[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073672, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4e2a\u5c16\u5cf0\u795e\u7ecf\u5143\u4e2d\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u548c\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u7684\u635f\u5931\u51fd\u6570\\\uff08\\mathcal{L}\\\uff09\u3002\u6700\u540e\u7684\u7d2f\u79ef\u503c\u662f\\\uff08\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\\uff09\u3002\u8fd9\u662f\u6a21\u62df\u6570\u636e\u7684\u53ef\u89c6\u5316\u3002\u5c16\u5cf0\u795e\u7ecf\u5143\u4f7f\u7528\u79bb\u6563\u7684\u5c16\u5cf0\u4e8b\u4ef6\u8fdb\u884c\u901a\u4fe1\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u795e\u7ecf\u5143\u6a21\u578b\u7684\u52a8\u529b\u5b66\u4e0d\u8fde\u7eed\u3002\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u4eec\u80fd\u6709\u68af\u5ea6\u5417\uff1f\u5728\u7531\u6f0f\u79ef\u5206\u795e\u7ecf\u5143\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u7ec4\u6210\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u819c\u7535\u4f4d\u68af\u5ea6\u548c\u5c16\u5cf0\u65f6\u95f4\u51e0\u4e4e\u5728\u91cd\u91cf\u7a7a\u95f4\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u6709\u9650\u7684\uff0c\u76f4\u5230\u5c16\u5cf0\u88ab\u6dfb\u52a0\u6216\u4e22\u5931\u7684\u8d85\u66f2\u9762\u3002\u6b63\u5982Christian Pehle\u548c\u4f5c\u8005[20]\u6700\u8fd1\u6240\u793a\uff0c\u63a8\u5bfc\u53cd\u5411\u4f20\u64ad\u6765\u8ba1\u7b97\u8fd9\u4e9b\u68af\u5ea6\u4e0d\u9700\u8981\u4efb\u4f55\u4efb\u610f\u9009\u62e9\u6216\u8fd1\u4f3c\u3002\u6b64\u5916\uff0c\u6700\u8fd1\u7684\u4e00\u4e9b\u51fa\u7248\u7269\u5c55\u793a\u4e86\u4f7f\u7528\u7cbe\u786e\u68af\u5ea6\u8bad\u7ec3\u591a\u5c42\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u57fa\u4e8e\u4e8b\u4ef6\u7684\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u901a\u4fe1\u65b9\u6848\u53ef\u4ee5\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u4fdd\u7559\uff08\u5982\u52a8\u753b\u6240\u793a\uff09\u3002\u4e0e\u5728\u4f20\u7edf\u6570\u5b57\u786c\u4ef6\u4e0a\u8bad\u7ec3\u65e0\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u76f8\u6bd4\uff0c\u8fd9\u53ef\u4ee5\u4f7f\u65b0\u578b\u795e\u7ecf\u5f62\u6001\u786c\u4ef6\u5b9e\u73b0\u66f4\u597d\u7684\u53ef\u6269\u5c55\u6027\u548c\u80fd\u6548\u3002\u4e0d\u8fde\u7eed\u7cfb\u7edf\u600e\u4e48\u53ef\u80fd\u6709\u5b9a\u4e49\u826f\u597d\u7684\u53c2\u6570\u5bfc\u6570\uff1f\u5bf9\u4e8e\u5b9a\u4e49\u5728\u8fde\u7eed\u65f6\u95f4\u4e2d\u7684\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff0c\u4e0e\u79bb\u6563\u65f6\u95f4\u76f8\u6bd4\uff0c\u53cd\u5411\u4f20\u64ad\u6709\u4ec0\u4e48\u76f8\u4f3c\u4e4b\u5904\uff1f\u8fd9\u7bc7\u535a\u6587\u6309\u987a\u5e8f\u56de\u7b54\u4e86\u8fd9\u4e24\u4e2a\u95ee\u9898\u3002\u5c16\u5cf0-\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u7684\u5bfc\u6570\u662f\u6df7\u5408\u52a8\u529b\u7cfb\u7edf\uff1a\u5b83\u4eec\u5c06\u8fde\u7eed\u52a8\u529b\u4e0e\u4e8b\u4ef6\u89e6\u53d1\u7684\u4e0d\u8fde\u7eed\u72b6\u6001\u53d8\u5316\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u7c7b\u7cfb\u7edf\u901a\u5e38\u4f7f\u7528\u77ac\u65f6\u4e8b\u4ef6\u5bf9\u77ed\u65f6\u95f4\u5185\u53d1\u751f\u7684\u73b0\u8c61\u8fdb\u884c\u5efa\u6a21\u3002\u5728\u68d8\u7a81\u795e\u7ecf\u5143\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u795e\u7ecf\u5143\u7684\u68d8\u7a81\u673a\u5236\uff1b\u5176\u4ed6\u4f8b\u5b50\u5305\u62ec\u5f39\u7403\u5728\u649e\u51fb\u5730\u9762\u65f6\u53cd\u5c04\uff0c\u53d1\u52a8\u673a\u53d8\u901f\u5668\u5728\u4e00\u5b9a\u8f6c\u901f\u4e0b\u6539\u53d8\u6863\u4f4d\uff0c\u6216\u8005\u6052\u6e29\u5668\u5728\u8fbe\u5230\u6e29\u5ea6\u9608\u503c\u65f6\u5207\u6362\u52a0\u70ed\u5143\u4ef6\u3002\u6df7\u5408\u7cfb\u7edf\u5df2\u7ecf\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba[20]\u7684\u80cc\u666f\u4e0b\u7814\u7a76\u4e86\u534a\u4e2a\u4e16\u7eaa\uff0c\u5305\u62ec\u8ba1\u7b97\u72b6\u6001\u53d8\u91cf\u7684\u53c2\u6570\u5bfc\u6570[20][20]\u3002\u76f4\u89c9\u662f\uff0c\u5982\u679c\u53c2\u6570\u7684\u5fae\u5c0f\u53d8\u5316\u5bfc\u81f4\u4e8b\u4ef6\u65f6\u95f4\u7684\u5fae\u5c0f\u53d8\u5316\uff0c\u5219\u4f1a\u5bfc\u81f4\u4e8b\u4ef6\u540e\u72b6\u6001\u53d8\u91cf\u7684\u5fae\u5c0f\u53d8\u5316\u3002\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u4e00\u79cd\u5f62\u5f0f\u5316\u7684\u6570\u5b66\u5904\u7406\u65b9\u6cd5\u4f7f\u4e4b\u7cbe\u786e\uff1a\u5b83\u5c06\u4e8b\u4ef6\u524d\u540e\u7684\u53c2\u6570\u5bfc\u6570\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u8bf4\u660e\u8fd9\u79cd\u5173\u7cfb\u6210\u7acb\u7684\u6761\u4ef6\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5b9a\u4e49\u4e86\u4e00\u4e2a\u9690\u5f0f\u51fd\u6570\uff08\u9ed1\u7ebf\uff09\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u786e\u5b9a\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\\\uff09\u3002\u5728\u6df7\u5408\u7cfb\u7edf\u4e2d\uff0c\u4e8b\u4ef6\u7531\u4e8b\u4ef6\u51fd\u6570\u7684\u8fc7\u96f6\u89e6\u53d1\u3002\u8003\u8651\u4e00\u4e2a\u6cc4\u6f0f\u7684\u79ef\u5206\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\uff0c\u5176\u4e2d\u4e8b\u4ef6\u51fd\u6570\u7b80\u5355\u5730\u5f00\u59cb{{Al}} V\uff08t\uff0cw\uff09-Valtheta\uff0c\\{{ } } } }\uff08v\uff08t\uff0cw\uff09\uff09\u662f\u4ee5\u7a81\u89e6\u6743\u91cd\uff08w\uff09\u548c\\\uff08\\Valtheta\uff09\u4e3a\u65f6\u95f4\u9608\u503c\u7684\u819c\u7535\u4f4d\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u5728A\uff08T\uff1d0\uff09\u65f6\u8003\u8651\u5355\u4e2a\u8f93\u5165\u5c16\u5cf0\u3002\u5173\u7cfb\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u5728\\\uff08t\uff0cw\\\uff09\u5e73\u9762\u4e0a\u523b\u51fa\u4e00\u6761\u7ebf\uff0c\u8be5\u5173\u7cfb\u5728\u6b64\u5e73\u9762\u4e0a\u6210\u7acb\uff08\u53c2\u89c1\u5de6\u56fe\uff09\u3002\u8fd9\u4e00\u884c\u7531\u51fd\u6570\\\uff08t{\\mathrm{spike}\uff08w\uff09\\\uff09\u5c40\u90e8\u63cf\u8ff0\u3002\u9690\u5f0f\u51fd\u6570\u5b9a\u7406[20]\u5141\u8bb8\u6211\u4eec\u7528\u819c\u52bf\u5bfc\u6570\u6765\u8868\u793a\u5b83\u7684\u5bfc\u6570\uff0c\u5373\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\\\uff08\\frac{\\partial t{\\mathrm{spike}}}{\\partial w}\uff09\uff0c\u5373\uff1abegin{align}\\boxed{\\frac{\\partial t{\\mathrm{spike}}{\\partial w}=-\\frac{1}{\\frac{\\partial V}{\\partial t}{\\\u7ed3\u675f{align}\u76f4\u89c2\u5730\u8bf4\uff0c\\\uff08w\\\uff09\u7684\u53d8\u5316\u9700\u8981\u901a\u8fc7\\\uff08t\\\uff09\u7684\u53d8\u5316\u6765\u8865\u507f\uff0c\u4ee5\u4fbf\u4fdd\u6301\u5728\\\uff08V\uff08t\uff0cw\uff09-\\vartheta=0\\\uff09\u7684\u7ebf\u4e0a\u3002\u8fd9\u79cd\u53d8\u5316\u7387\uff082\uff09\u7684\u5de6\u4fa7\uff09\u7531\u6cbft\u8f74\u548cw\u8f74\uff082\uff09\u7684V\u7684\u53d8\u5316\u7387\u7684\u8d1f\u6bd4\u7387\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u5904\uff0c\u6211\u4eec\u5c06\u819c\u7535\u4f4d\u91cd\u7f6e\u4e3a\u96f6\u3002\u7528\\\uff08V^+\\\uff09\u8868\u793a\u8dc3\u8fc1\u540e\u7684\u819c\u7535\u4f4d\uff0c\u6211\u4eec\u5f97\u5230\u4e86begin{align}V^+\uff08t{mathrm{spike}\uff0cw\uff09=0\u3002\\end{align}\u6211\u4eec\u77e5\u9053\\\uff08t{\\mathrm{spike}}\uff09\u662f\u6743\u91cd\\\uff08w\\\uff09\u7684\u51fd\u6570\uff0c\u5176\u5bfc\u6570\u6ee1\u8db3\\\uff08\uff082\uff09\\\uff09\u3002\u7531\u4e8e\u6211\u4eec\u7684\u8981\u6c42\u662f\\\uff08\uff083\uff09\\\uff09\u5728\u6211\u4eec\u6539\u53d8\\\uff08w\\\uff09\uff08\u9690\u5f0f\u6539\u53d8\\\uff08t{mathrm{spike}}\uff09\u65f6\u4fdd\u6301\u4e0d\u53d8\uff0c\\\uff08V^+\\\uff09\u76f8\u5bf9\u4e8e\\\uff08w\\\uff09\u7684\u603b\u5bfc\u6570\u5fc5\u987b\u6d88\u5931\uff1a\\begin{align}\\frac{partial V^+}{\\partial w}+\\frac{\\partial t{\\mathrm{spike}}{\\partial w}\\frac{\u3002\\\u7ed3\u675f{align}\u5728\\\uff08\uff082\uff09\\\uff09\u4e2d\u63d2\u5165\\\uff08V^-\\\uff09\u8868\u793a\u5c16\u5cf0\u524d\u7684\u8bc4\u4f30\uff0c\u5e76\u89e3\u51b3\\\uff08\\frac{\\partial V^+}{\\partial w}\uff09\u4ea7\u751f\u6240\u9700\u7684\u7ed3\u679c\uff1a\\begin{align}\\frac{\\partial V^+}{\\partial w}=\\frac{\\frac{\\partial V^+}{\\partial t}{\\frac{\\partial V^-}{\\partial t}\u3002\\end{align}\u5728\u4e00\u4e2a\u6709\u7535\u6d41\u7a81\u89e6\u548c\u819c\u65f6\u95f4\u5e38\u6570\u7684\u6cc4\u6f0f\u6574\u5408\u548c\u6fc0\u53d1\u795e\u7ecf\u5143\u4e2d\uff08\\tau{mathrm{mem}\uff09\uff0c\u8fd9\u53ef\u4ee5\u5199\u6210[20]\u3002\\begin{align}\\boxed{\\frac{\\partial V^+}{\\partial w}=\\left\uff081+\\frac{\\vartheta}{\\tau{\\mathrm{mem}\\frac}\\partial V^-\\frac}\\\u7aef\u70b9{align}\u5728\u5c16\u5cf0\u4e4b\u95f4\uff0c\\\uff08\\frac{\\partial V}{\\partial w}\\\uff09\u7684\u52a8\u529b\u5b66\u7531\u5b9a\u4e49\\\uff08V\\\uff09\u52a8\u529b\u5b66\u7684\u5fae\u5206\u65b9\u7a0b\u7684\\\uff08w\\\uff09\u5fae\u5206\u7ed9\u51fa\u3002\u5728\u5cf0\u503c\u65f6\uff0c\u5bfc\u6570\u6839\u636e\\\uff08\uff086\uff09\\\uff09\u8df3\u8dc3\u3002\u8fd9\u4e9b\u7ed3\u679c\u63a8\u5e7f\u5230\u5177\u6709\u4efb\u610f\u591a\u4e2a\u5c16\u5cf0\u7684\u5468\u671f\u6027\u5c16\u5cf0\u795e\u7ecf\u5143\u7f51\u7edc[20]\u3002\u9690\u51fd\u6570\u5b9a\u7406\u8981\u6c42\\\uff08\\dot{V}^-\\neq 0\\\uff09\u624d\u80fd\u4fdd\u6301\\\uff08\uff082\uff09\\\uff09\u3002\u5f53\u819c\u7535\u4f4d\u4e0e\u9608\u503c\u76f8\u5207\uff0c\u6211\u4eec\u6709\\\uff08\\dot{V}^-\\\u52300\\\uff09\u65f6\uff0c\\\uff08\uff082\uff09\\\uff09\u4e2d\u7684\u5c16\u5cf0\u65f6\u95f4\u5bfc\u6570\u53d1\u6563\u3002\u7531\u4e8e\\\uff08\\dot V^-=0\\\uff09\u548c\\\uff08V^-=\\vartheta\\\uff09\u4fdd\u6301\u7684\u70b9\u7531\\\uff08N\uff09\u7ef4\u6743\u91cd\u7a7a\u95f4\u4e2d\u7684\\\uff08\uff08N-1\uff09\u7ef4\u8d85\u66f2\u9762\u7ed9\u51fa\uff08\u4f8b\u5982\uff0c\u56fe1\u4e2d\u7684\u7ea2\u8272\u70b9\uff09\uff0c\u57fa\u4e8e\\\uff08V\\\uff09\u6216\\\uff08t{mathrm{spike}}}\u7684\u635f\u5931\u51fd\u6570\u51e0\u4e4e\u5728\u4efb\u4f55\u5730\u65b9\u90fd\u662f\u53ef\u5fae\u7684\uff08\u7c7b\u4f3c\u4e8e\u5728\u6fc0\u6d3b\u7684\u201c\u626d\u7ed3\u201d\u5904\u4e0d\u53ef\u5fae\u7684\u5e26ReLUs\u7684\u975e\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\uff09\u3002\u5df2\u53d1\u5e03\u7684\u6a21\u62df\u7ed3\u679c\u8868\u660e\uff0c\u68af\u5ea6\u53ef\u7528\u4e8e\u4f18\u5316\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc[20][20][20][20]\u3002\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u5728\u8ba1\u7b97\u53c2\u6570\u5bfc\u6570\u65f6\u5982\u4f55\u5904\u7406\u5c16\u5cf0\u4e0d\u8fde\u7eed\u6027\uff0c\u90a3\u4e48\u53cd\u5411\u4f20\u64ad\u662f\u4ec0\u4e48\u6837\u7684\u7c7b\u6bd4\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u8ba1\u7b97\u8fd9\u4e9b\u5bfc\u6570\u5462\uff1f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u4f7f\u7528\u7684\u4f34\u968f\u65b9\u6cd5\u53cd\u5411\u4f20\u64ad\u672c\u8d28\u4e0a\u662f\u4f34\u968f\u65b9\u6cd5[20]\u7684\u7279\u4f8b\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u8fde\u7eed\u65f6\u95f4\u7cfb\u7edf\uff0c\u5982\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u6216\u6700\u8fd1\u5f15\u5165\u7684\u795e\u7ecf\u5e38\u5fae\u5206\u65b9\u7a0b[20]\u3002\u7ed9\u5b9a\u4e00\u7ec4\u7531\u5e38\u5fae\u5206\u65b9\u7a0b\u548c\u635f\u5931\u51fd\u6570\u5b9a\u4e49\u7684\u52a8\u6001\u53d8\u91cf\uff0c\u5b83\u6307\u5b9a\u4e86\u4e00\u7ec4\u4ee5\u53cd\u5411\u65f6\u95f4\uff08\u201c\u65f6\u95f4\u53cd\u5411\u4f20\u64ad\u201d\uff09\u8ba1\u7b97\u7684\u4f34\u968f\u53d8\u91cf\uff0c\u5e76\u8ddf\u8e2a\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u603b\u635f\u5931\u7684\u8d21\u732e\u3002\u4f34\u968f\u53d8\u91cf\u7684\u6570\u91cf\u7b49\u4e8e\u539f\u59cb\u53d8\u91cf\u7684\u6570\u91cf\uff0c\u91cd\u8981\u7684\u662f\uff0c\u72ec\u7acb\u4e8e\u53c2\u6570\u7684\u6570\u91cf\uff0c\u5141\u8bb8\u5728\u53c2\u6570\u591a\u4e8e\u72b6\u6001\u53d8\u91cf\u7684\u7cfb\u7edf\uff08\u4f8b\u5982\uff0c\u795e\u7ecf\u7f51\u7edc\uff09\u4e2d\u8fdb\u884c\u6709\u6548\u7684\u68af\u5ea6\u8ba1\u7b97\u3002\u5386\u53f2\uff1aBackprop\u4e4b\u524d\u7684Backprop\u662f\u4e00\u4e2a\u6982\u5ff5\uff0c\u800c\u4f34\u968f\u5fae\u5206\u65b9\u7a0b\u7684\u6982\u5ff5\u53ef\u4ee5\u8ffd\u6eaf\u5230\u62c9\u683c\u6717\u65e5\uff0c\u62c9\u683c\u6717\u65e5\u57281766\u5e74\u7684\u7ebf\u6027\u60c5\u51b5\u4e0b\u8bc1\u660e\u4e86\u5b83\u4eec\u7684\u5b58\u5728\u6027\u548c\u552f\u4e00\u6027\uff08\u65b9\u7a0b\u4f34\u968f[20]\uff09\uff0c\u5b83\u4eec\u5728\u6700\u4f18\u63a7\u5236\u7406\u8bba\u548c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5e94\u7528\u662f\u6700\u8fd1\u624d\u51fa\u73b0\u7684\u30021956\u5e74\uff0c\u5217\u592b\u00b7\u5e9e\u7279\u91cc\u4e9a\u91d1\uff08Lev Pontryagin\uff09\u8457\u540d\u5730\u4f7f\u7528\u4e86\u4f34\u968f\u6cd5\uff0c\u56e0\u4e3a\u4ed6\u7684\u6700\u5927\u539f\u7406\u4e3a\u63a7\u5236\u8f68\u8ff9\u7684\u4f18\u5316\u63d0\u4f9b\u4e86\u5fc5\u8981\u6761\u4ef6[20]\u3002\u4f7f\u7528\u4f34\u968f\u65b9\u6cd5\u8ba1\u7b97\u53c2\u6570\u68af\u5ea6\u7684\u7b2c\u4e00\u6279\u51fa\u7248\u7269\u4f3c\u4e4e\u662f\u4ea8\u5229\u00b7J\u00b7\u51ef\u5229\uff08Henry J.Kelley\uff09\u57281960\u5e74[20]\u548c\u963f\u745f\u00b7E\u00b7\u5e03\u83b1\u68ee\uff08Arthur E.Bryson\uff09\u57281961\u5e74[20]\u64b0\u5199\u7684\u3002\u8fd9\u4e24\u4e2a\u51fa\u7248\u7269\u90fd\u63d0\u4f9b\u4e86\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u7684\u65b9\u7a0b\uff0c\u8fd9\u4e9b\u8bef\u5dee\u76f8\u5f53\u4e8e\u540e\u4f20\u64ad\uff0820\uff09[20 ] [20 ]\u4e2d\u63a8\u5bfc\u51fa\u7684\u90a3\u4e9b\u8bef\u5dee\uff0c\u8fd9\u4f7f\u5f97\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u540e\u8005\u662f\u201cKelle\u5e03\u83b1\u68ee\u68af\u5ea6\u8fc7\u7a0b\u201d[20 ] [20 ]\u7684\u72ec\u7acb\u53d1\u73b0\u3002\u4f34\u968f\u53d8\u91cf=\u53cd\u5411\u4f20\u64ad\u8bef\u5dee\u5728\u975e\u5c16\u5cf0\u4eba\u5de5\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u4f34\u968f\u53d8\u91cf\u4ec5\u5bf9\u5e94\u4e8e\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u901a\u5e38\u79f0\u4e3a\u4e2d\u95f4\u53d8\u91cf\u6216\u8bef\u5dee\uff08\\\uff08\\delta\\\uff09\u3002\u8003\u8651\u5177\u6709\uff08L\uff09\u5c42\u548c\u8f93\u5165\uff08x0 0\uff09\u7684\u524d\u9988\u7f51\u7edc\u3002\u901a\u8fc7\u6fc0\u6d3b\\\uff08x_i \\\uff09\u3001\u5c42\\\uff08i\\\uff09\u7684\u91cd\u91cf\\\uff08w_i \\\uff09\uff0c\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u7684\uff08i<L\uff09\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\u4e3a\uff08i<L\uff09\u6211\u4eec\u6709\uff1a\u6211\u4eec\u6709\uff1a\uff1a\uff1a\uff1a\u4ee5\u4e0b\u4ee5\u4e0b\u6211\u4eec\u5f00\u59cb\u5f00\u59cb\u5f00\u59cb{{\u6570\u7ec4\u6570\u7ec4{{lr}}{lr}}{{lr}}}{{1}}\u5b66\u6821\u5b66\u6821\u5b66\u6821....\u5411\u524d......\u5411\u524d.....\u5411\u524d..\u5411\u524d.\u5411\u524d.........\u548c...\u548c...........\u548c..................................................................................................\u548c\\delta_{L}=\\frac{\\partial\\mathcal{L}\uff08x_L\uff09}{\\partial x_L}f'\uff08w_Lx_{L-1}\uff09\\end{array}]\u7136\u540e\u5c06\\\uff08\\mathcal{L}\uff08x_L\uff09\\\uff09\u76f8\u5bf9\u4e8e\u6743\u91cd\\\uff08w_i\\\uff09\u4e0e\\\uff081\\leq i\\leq L\\\uff09\u7684\u5bfc\u6570\u8868\u793a\u4e3a\\begin{align}\\frac{\\mathrm{d}\\mathcal{L}\uff08x_L\uff09{\\mathrm{d}w_i}=\\delta_i x{i-1}\u3002\\end{align}Backprop\u5728\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e2d\uff0c\u5c16\u5cf0\u795e\u7ecf\u7f51\u7edc\u4e0d\u662f\u50cf\u8fd9\u6837\u7684\u79bb\u6563\u65b9\u7a0b\uff0c\u800c\u662f\u7531\u8fde\u7eed\u65f6\u95f4\u7684\u5fae\u5206\u65b9\u7a0b\u5b9a\u4e49\uff0c\u5e76\u4f7f\u7528\u5c16\u5cf0\u4e8b\u4ef6\u6765\u8026\u5408\u795e\u7ecf\u5143\u3002\u8003\u8651\u4e00\u4e2aN\uff08n\uff09\u6cc4\u6f0f\u79ef\u5206\u7f51\u7edc\u548c\u706b\u707e\u795e\u7ecf\u5143\u8026\u5408\u7684\u6743\u91cd\u77e9\u9635\uff08W\uff09\u3002\u5bf9\u4e8e\u819c\u7535\u4f4d\\\uff08V\\\uff09\u3001\u7a81\u89e6\u8f93\u5165\\\uff08I\\\uff09\uff08\u4e24\u4e2a\u5927\u5c0f\u7684\u5411\u91cf\\\uff08N\\\uff09\uff09\u548c\u635f\u5931\u51fd\u6570begin{align}\\mathcal{L}=L_p\uff08t{mathrm{spike}}\uff09+\\int_0^t L_V\uff08V\uff08t\uff09\uff0ct\uff09\\mathrm{d}t\\end{align}\u4f9d\u8d56\u4e8e\u5c16\u5cf0\u65f6\u95f4\u548c\u819c\u7535\u4f4d\u7684\u5411\u91cf\uff0c\u5c16\u5cf0\u4e4b\u95f4\u7684\u81ea\u7531\u52a8\u529b\u5b66\u4e3a[20]\uff0c\u7528\\\uff08\\lambda\\\uff09\u8868\u793a\u4f34\u968f\u53d8\u91cf\uff0c[\\begin{array}{lr}\\textrm{Forward}&\\textrm{Backward/adjunct}\\tau{mathrm{mem}}\\dot{V}=-V+I\\quad\\quad&\\quad\\quad\\tau{mem}\\tau{mathrm{mem V}-\\lambda{V}{\\", "note_en": "Event-based backpropagation in two spiking neurons and a spike-time dependent loss function \\(\\mathcal{L}\\). The final accumulated value is \\(\\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w}\\). This is a visualization of simulation data. Spiking neurons communicate using discrete spike events which cause discontinuities in the neuron model\u2019s dynamics. What are the implications for gradient-based optimization? Can we even have gradients? In a spiking neural network composed of leaky integrate-and-fire neurons, gradients of membrane potentials and spike times exist and are finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. As recently shown by Christian Pehle and the author [20], deriving backpropagation to compute these gradients does not require any arbitrary choices or approximations. Furthermore, several recent publications demonstrate training of multi-layer spiking neural networks using exact gradients [20] [20] [20] [20] [20]. The event-based communication scheme of spiking neural networks can be retained during backpropagation (illustrated in the animation). This could allow novel neuromorphic hardware to achieve better scalability and energy efficiency compared to training non-spiking artificial neural networks on traditional digital hardware. How is it possible that a discontinuous system can have well-defined parameter derivatives? What is the analogy to backpropagation for systems defined in continuous time such as spiking neural networks, as opposed to discrete time? This blog post answers these two questions, in that order. Derivatives at Spikes Spiking neural networks are hybrid dynamical systems: they combine continuous dynamics with event-triggered discontinuous state changes. Such systems typically model phenomena occuring on short timescales using instantaneous events. In the case of spiking neurons, this is the neuronal spike mechanism; other examples are a bouncing ball that is reflected upon hitting the ground, an engine transmission that changes its gear at a certain rotational speed or a thermostat that switches a heating element when a temperature threshold is reached. Hybrid systems have been studied for the better half of a century within the context of optimal control theory [20], including the computation of parameter derivatives of state variables [20] [20]. The intuition is that if a small change to a parameter causes a small change of an event time, it causes a small change to state variables after the event. A formal mathematical treatment, as sketched in the following, makes this precise: it relates parameter derivatives before and after an event and states the conditions for when this relation holds. The relation \\(V(t, w)-\\vartheta=0\\) defines an implicit function (the black line) which allows us determine the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\). In hybrid systems, events are triggered by zero-crossings of an event function. Consider a leaky integrate-and-fire neuron where the event function is simply \\begin{align} V(t, w) - \\vartheta, \\end{align} where \\(V(t, w)\\) is the membrane potential at time \\(t\\) using synaptic weight \\(w\\) and \\(\\vartheta\\) is the spike threshold. For simplicity, consider a single input spike at \\(t=0\\). The relation \\(V(t, w) -\\vartheta=0\\) carves out a line in the \\(t, w\\) plane on which this relation holds (see figure on the left). This line is locally described by a function \\(t_{\\mathrm{spike}}(w)\\). The implicit function theorem [20] allows us to express its derivative, the spike time derivative \\(\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w}\\), in terms of the membrane potential derivatives: \\begin{align} \\boxed{\\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} = - \\frac{1}{\\frac{\\partial V}{\\partial t}} \\frac{\\partial V}{\\partial w}.} \\end{align} Intuitively, changes of \\(w\\) need to be compensated by a change of \\(t\\) in order to stay on the line where \\(V(t, w)-\\vartheta=0\\) holds. The rate of this change (left side of \\((2)\\)) is given by the negative ratio of the rates of change of \\(V\\) along the \\(t\\) and \\(w\\) axis (\\(\\frac{\\partial V}{\\partial t}\\) and \\(\\frac{\\partial V}{\\partial w}\\) in the right side of \\((2)\\)). At a spike, we reset the membrane potential to zero. Denoting the membrane potential after the transition using \\(V^+\\), we have \\begin{align} V^+(t_{\\mathrm{spike}}, w) = 0. \\end{align} We know that \\(t_{\\mathrm{spike}}\\) is a function of the weight \\(w\\) and that its derivative satisfies \\((2)\\). Since our demand is that \\((3)\\) holds as we change \\(w\\) (implicitly changing \\(t_{\\mathrm{spike}}\\)), the total derivative of \\(V^+\\) with respect to \\(w\\) must vanish: \\begin{align} \\frac{\\partial V^+}{\\partial w} + \\frac{\\partial t_{\\mathrm{spike}}}{\\partial w} \\frac{\\partial V^+}{\\partial t} = 0. \\end{align} Plugging in \\((2)\\) with \\(V^-\\) denoting evaluation before the spike and solving for \\(\\frac{\\partial V^+}{\\partial w}\\) yields the desired result: \\begin{align} \\frac{\\partial V^+}{\\partial w} = \\frac{\\frac{\\partial V^+}{\\partial t}}{\\frac{\\partial V^-}{\\partial t}} \\frac{\\partial V^-}{\\partial w}. \\end{align} In a leaky integrate-and-fire neuron with current-based synapses and membrane time constant \\(\\tau_{\\mathrm{mem}}\\), this can be written as [20] \\begin{align} \\boxed{\\frac{\\partial V^+}{\\partial w} = \\left(1+\\frac{\\vartheta}{\\tau_{\\mathrm{mem}}\\frac{\\partial V^-}{\\partial t}}\\right)\\frac{\\partial V^-}{\\partial w}.} \\end{align} Inbetween spikes, the dynamics of \\(\\frac{\\partial V}{\\partial w}\\) are given by differentiation with respect to \\(w\\) of the differential equations defining the dynamics of \\(V\\). At spikes, the derivatives jump according to \\((6)\\). These results generalize to a recurrent network of spiking neurons with arbitrarily many spikes [20]. The implicit function theorem requires that \\(\\dot{V}^- \\neq 0\\) in order for \\((2)\\) to hold. As the membrane potential becomes tangent to the threshold and we have \\(\\dot{V}^-\\to 0\\), the spike time derivative in \\((2)\\) diverges. Since the points where \\(\\dot V^- = 0\\) and \\(V^-=\\vartheta\\) holds are given by \\((N-1)\\)-dimensional hypersurfaces in the \\(N\\)-dimensional weight space (e.g., the red point in fig. 1), loss functions based on \\(V\\) or \\(t_{\\mathrm{spike}}\\) are differentiable almost everywhere (similar to non-spiking neural networks with ReLUs that are non-differentiable at the \u201ckink\u201d of the activation). Published simulation results demonstrate that gradients can be used to optimize spiking neural networks [20] [20] [20] [20] [20]. Now that we have an idea of how to deal with spike discontinuities when computing parameter derivatives, what is the analogy to backpropagation that allows us to efficiently compute these derivatives? The Adjoint Method Backpropagation as used in deep learning is essentially a special case of the adjoint method [20] which can also be applied to continuous-time systems such as spiking neural networks or the recently introduced neural ordinary differential equations [20]. Given a set of dynamic variables defined by ordinary differential equations and a loss function, it specifies a set of adjoint variables that are computed in reverse time (\u201cbackpropagation through time\u201d) and track the contribution of each variable to the total loss. The number of adjoint variables is equal to the number of original variables and, importantly, independent of the number of parameters, allowing for efficient gradient computation in systems with more parameters than state variables (e.g., neural networks). History: Backprop Before Backprop Was a Thing While the concept of adjoint differential equations can be traced back to Lagrange who showed their existence and uniqueness in the linear case in 1766 (\u00e9quation adjointe, [20]), their use in optimal control theory and machine learning is more recent. The adjoint method was famously used by Lev Pontryagin in 1956 for his maximum principle that provides neccessary conditions for the optimality of control trajectories [20]. The first publications using the adjoint method to compute parameter gradients seem to be those written by Henry J. Kelley in 1960 [20] and Arthur E. Bryson in 1961 [20]. Both publications provide equations to backpropagate errors that are equivalent to those given in later derivations of backpropagation [20] [20] [20], which causes some to consider the latter to be independent discoveries of the \u201cKelley-Bryson gradient procedure\u201d [20] [20]. Adjoint Variables = Backpropagated Errors In non-spiking artificial neural networks, the adjoint variables simply correspond to what are typically called the intermediate variables or errors (\\(\\delta\\)s) during backpropagation. Consider a feed-forward network with \\(L\\) layers and input \\(x_0\\). With activation \\(x_i\\), weight \\(w_i\\) at layer \\(i\\), activation function \\(f\\) and loss function \\(\\mathcal{L}(x_L)\\) we have for \\(i<L\\): [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} x_{i+1} = f(w_{i+1}x_i)\\quad\\quad&\\quad\\quad\\delta_{i} = w_{i+1}\\delta_{i+1} f\u2019(w_{i}x_{i-1}) \\mathcal{L}(x_L)&\\delta_{L} = \\frac{\\partial \\mathcal{L}(x_L)}{\\partial x_L}f\u2019(w_Lx_{L-1}) \\end{array}] The derivative of \\(\\mathcal{L}(x_L)\\) with respect to the weight \\(w_i\\) with \\(1\\leq i\\leq L\\) is then given as \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}(x_L)}{\\mathrm{d}w_i} = \\delta_i x_{i-1}. \\end{align} Backprop in a Spiking Neural Network Instead of discrete equations like these, spiking neural networks are defined by differential equations in continuous time and use spike events to couple neurons. Consider a network of \\(N\\) leaky integrate-and-fire neurons coupled with weight matrix \\(W\\). With membrane potential \\(V\\), synaptic input \\(I\\) (both vectors of size \\(N\\)) and a loss function \\begin{align} \\mathcal{L}=l_p(t_{\\mathrm{spike}})+\\int_0^T l_V(V(t), t)\\mathrm{d}t \\end{align} that depends on the vector of spike times and membrane potentials, the free dynamics inbetween spikes are [20], denoting the adjoint variables using \\(\\lambda\\), [\\begin{array}{lr} \\textrm{Forward} & \\textrm{Backward/Adjoint} \\tau_{\\mathrm{mem}}\\dot{V} = -V + I\\quad\\quad&\\quad\\quad \\tau_{\\mathrm{mem}}\\lambda_{V}\u2019 = -\\lambda_{V} - \\frac{\\partial l_V}{\\partial V} \\tau_{\\mathrm{syn}}\\dot{I} = - I\\quad\\quad&\\tau_{\\mathrm{syn}}\\lambda_{I}\u2019 = -\\lambda_{I} + \\lambda_{V} \\end{array}] where a dot denotes the time derivative \\(\\frac{\\mathrm{d}}{\\mathrm{d}t}\\) and a dash denotes the reverse time derivative \\(-\\frac{\\mathrm{d}}{\\mathrm{d}t}\\). Spikes cause the synaptic input \\(I\\) to jump as \\begin{align} I^+ = I^- + We_n \\end{align} where \\(n\\) is the index of the spiking neuron and \\(e_n\\) is the unit vector with a \\(1\\) at index \\(n\\). Using the partial derivative jumps such as those presented in the previous section, the jump of the \\(n\\)th component of \\(\\lambda_V\\) turns out to be [20], with spike time \\(t_{\\mathrm{spike}}^k\\), \\begin{align} (\\lambda_V^-)n = (\\lambda_V^+)_n +\\frac{1}{\\tau{\\mathrm{mem}}(\\dot{V}^-)n}\\left[\\underbrace{\\vartheta\\lambda_V^+}{\\textrm{reset}}+\\underbrace{\\left(W^{\\mathsf{T}}(\\lambda_V^+-\\lambda_I)\\right)n}{\\textrm{backpropagated errors}}+\\underbrace{\\frac{\\partial l_p}{\\partial t_{\\mathrm{spike}}^k}}{\\textrm{spike time loss}}+\\underbrace{l_V^\u2013l_V^+}{\\textrm{voltage loss jump}}\\right]. \\end{align} This equation couples adjoint variables at spike times using the term representing backpropagated errors. The only quantities that need to be stored during the forward pass are the \\(n\\)th component of \\(\\dot{V}^-\\) and the spike time \\(t_{\\mathrm{spike}}^k\\). The derivative of \\(\\mathcal{L}\\) with respect to weight \\(w_{ji}\\) that connects neuron \\(i\\) to neuron \\(j\\) is then given as a sum of the \\(j\\)th component of \\(\\lambda_I\\) evaluated at the spike times of neuron \\(i\\), \\begin{align} \\frac{\\mathrm{d}\\mathcal{L}}{\\mathrm{d}w_{ji}} = \\sum_{\\textrm{spikes from } i} (\\lambda_I)_j. \\end{align} Since the adjoint variables are coupled only at spike times and gradients are computed by accumulating \\(\\lambda_I\\) at spike times, the backward pass can be computed in an event-based fashion. Conclusion Gradients of spiking neural networks are well-defined and finite almost everywhere in weight space, up to the hypersurfaces where spikes are added or lost. These gradients can be efficiently computed using event-based backpropagation and used for gradient-based optimization. The event-based nature of backpropagation in spiking neural networks could allow neuromorphic hardware to retain the efficiency of spike-based processing during training. References Event-based backpropagation can compute exact gradients for spiking neural networks. By Wunderlich, Timo C. and Pehle, Christian. Published in Scientific Reports 2021 11:1, 11:1-17, Nature Publishing Group, 2021. Fast and energy-efficient neuromorphic deep learning with first-spike times. By G\u00f6ltz, J. and Kriener, L. and Baumbach, A. and Billaudelle, S. and Breitwieser, O. and Cramer, B. and Dold, D. and Kungl, A. F. and Senn, W. and Schemmel, J. and Meier, K. and Petrovici, M. A.. Published in Nature Machine Intelligence 2021 3:9, 3:823-835, Nature Publishing Group, 2021. Temporal Coding in Spiking Neural Networks with Alpha Synaptic Function. By Comsa, Iulia M. and Fischbacher, Thomas and Potempa, Krzysztof and Gesmundo, Andrea and Versari, Luca and Alakuijala, Jyrki. Published in ICASSP, IEEE International Conference on Acoustics, Speech and Signal Processing - Proceedings, 2020-May:8529-8533, Institute of Electrical and Electronics Engineers Inc., 2020. Supervised learning based on temporal coding in spiking neural networks. By Mostafa, Hesham. Published in IEEE Transactions on Neural Networks and Learning Systems, 29:3227-3235, Institute of Electrical and Electronics Engineers Inc., 2018. Temporal Backpropagation for Spiking Neural Networks with One Spike per Neuron. By Kheradpisheh, Saeed Reza and Masquelier, Timoth\u00e9e. Published in International Journal of Neural Systems, 30, World Scientific Publishing Company, 2020. Modeling, simulation, sensitivity analysis, and optimization of hybrid systems. By Barton, Paul I. and Lee, Cha Kun. Published in ACM Transactions on Modeling and Computer Simulation (TOMACS), 12:256-289, ACM PUB27 New York, NY, USA , 2002. Parametric sensitivity functions for hybrid discrete/continuous systems. By Gal\u00e1n, Santos and Feehery, William F. and Barton, Paul I.. Published in Applied Numerical Mathematics, 31:17-47, North-Holland, 1999. General sensitivity equations of discontinuous systems. By Rozenvasser, E. N.. Published in Autom. Remote Control, 1967:400\u2013404, Springer US, New York, NY; Pleiades Publishing, New York, NY; MAIK \u201cNauka/Interperiodica\u201d, Moscow, 1967. The Implicit Function Theorem: History, Theory, and Applications. By Krantz, Steven G. and Parks, Harold R.. Springer New York, 2013. ISBN: 9781461459811. A theoretical framework for back-propagation. By Lecun, Yann. In Proceedings of the 1988 Connectionist Models Summer School, CMU, Pittsburg, PA, pages 21\u201328, Morgan Kaufmann, 1988. Neural Ordinary Differential Equations. By Chen, Ricky T. Q. and Rubanova, Yulia and Bettencourt, Jesse and Duvenaud, David K. In Advances in Neural Information Processing Systems, 31, pages , Curran Associates, Inc., 2018. Solution de diff\u00e9rents probl\u00e8mes de calcul int\u00e9gral. By Lagrange, Joseph-Louis. In Miscellanea taurinensia, Soci\u00e9t\u00e9 royale de Turin, 1766. The maximum principle in the theory of optimal processes of control. By Boltyanski, V.G. and Gamkrelidze, R.V. and Mishchenko, E.F. and Pontryagin, L.S.. Published in IFAC Proceedings Volumes, 1(1):464-469, 1960. Gradient Theory of Optimal Flight Paths. By Kelley, Henry J.. Published in ARS Journal, 30(10):947-954, 1960. A gradient method for optimizing multi-stage allocation processes. By Bryson, A.E.. In Proceedings of a Harvard Symposium on Digital Computers and Their Applications, 1961. Taylor expansion of the accumulated rounding error. By Linnainmaa, Seppo. Published in BIT Numerical Mathematics, 16:146-160, 1976. Applications of advances in nonlinear sensitivity analysis. By Werbos, Paul J.. In System Modeling and Optimization, pages 762\u2013770, Springer Berlin Heidelberg, 1982. Learning Internal Representations by Error Propagation. By Rumelhart, David E. and McClelland, James L.. In Parallel Distributed Processing: Explorations in the Microstructure of Cognition: Foundations, pages 318-362, 1987. Artificial neural networks, back propagation, and the Kelley-Bryson gradient procedure. By Dreyfus, Stuart E.. Published in Journal of Guidance, Control, and Dynamics, 13(5):926-928, 1990. On derivation of MLP backpropagation from the Kelley-Bryson optimal-control gradient formula and its application. By Mizutani, E. and Dreyfus, S.E. and Nishio, K.. In Proceedings of the IEEE-INNS-ENNS International Joint Conference on Neural Networks. IJCNN 2000. Neural Computing: New Challenges and Perspectives for the New Millennium, 2, pages 167-172 vol.2, 2000.", "posttime": "2022-02-17 02:50:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u7f51\u7edc,\u7b97\u6cd5,\u53cd\u5411,based,\u5c16\u5cf0", "title": "\u57fa\u4e8e\u4e8b\u4ef6\u7684\u53cd\u5411\u4f20\u64ad\u7b97\u6cd5\u5728\u8109\u51b2\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u5e94\u7528", "title_en": "Event-Based Backpropagation for Exact Gradients in Spiking Neural Networks", "transed": 1, "url": "https://timowunderlich.github.io/jekyll/update/2022/02/05/backprop.html", "via": "", "real_tags": ["\u795e\u7ecf\u7f51\u7edc", "\u7b97\u6cd5", "\u53cd\u5411", "based", "\u5c16\u5cf0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073671, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e86\u89e3\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\u53ca\u5176\u65e5\u672c\u7248\u300aYume K\u014dj\u014d\uff1aDoki Doki\u6050\u614c\u300b\u80cc\u540e\u7684\u5b8c\u6574\u5386\u53f2\u3002\u7b2c1\u90e8\u5206-\u4e3a\u8d85\u7ea7\u7403\u5458\uff081:17\uff09\u7b2c2\u90e8\u5206-A\u4e50\u3002\u3002\u3002", "note_en": "Learn the complete history behind Super Mario Bros. 2 and its Japanese counterpart, Yume K\u014dj\u014d: Doki Doki Panic.Part 1 - For Super Players (1:17)Part 2 - A Le...", "posttime": "2022-02-17 02:49:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u91cc\u5965,mario,doki", "title": "\u300a\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f2\u300b\uff082015\uff09[\u89c6\u9891]", "title_en": "Super Mario Bros. 2 (2015) [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=2EUYSN5aFcE", "via": "", "real_tags": ["\u9a6c\u91cc\u5965", "mario", "doki"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073670, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6355\u83b7\u9690\u85cf\u7684\u62a5\u544a\u3002c\u662f\u4e00\u4e2aUSB\u4e3b\u673a\u793a\u4f8b\u7a0b\u5e8f\uff0c\u7528\u4e8e\u6253\u5370\u4ece\u8bbe\u5907\u63a5\u6536\u7684HID\u62a5\u544a\u3002\u6253\u5f00\u4e32\u884c\u7aef\u53e3\u5e76\u5c06\u8bbe\u5907\u8fde\u63a5\u5230pico\u3002\u9ed8\u8ba4\u7684D+/D-\u662fgp0/gp1\u3002\u8c03\u7528pio_usb_add_port\uff08\uff09\u4ee5\u4f7f\u7528\u5176\u4ed6\u7aef\u53e3\u3002\nusb_\u8bbe\u5907\u3002c\u662f\u4e00\u4e2aHID USB FS\u8bbe\u5907\u793a\u4f8b\uff0c\u6bcf0.5s\u79fb\u52a8\u4e00\u6b21\u9f20\u6807\u5149\u6807\u3002D+\u5f15\u811a\u9700\u8981\u5916\u90e81.5\u6b27\u59c6\u4e0a\u62c9\u5bc4\u5b58\u5668\uff08\u9ed8\u8ba4\u4e3agp0\uff09\u3002", "note_en": "capture_hid_report.c is a USB host sample program which print HID reports received from device. Open serial port and connect devices to pico. Default D+/D- is gp0/gp1. Call  pio_usb_add_port() to use additional ports.\n usb_device.c is a HID USB FS device sample which moves mouse cursor every 0.5s. External 1.5kohm pull-up register is necessary to D+ pin (Default is gp0).", "posttime": "2022-02-17 02:49:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6f\u4ef6,raspberry-pi,\u5b9a\u4e49,defined,\u8bbe\u5907", "title": "\u8f6f\u4ef6\u5b9a\u4e49\u7684USB\u7aef\u53e3\uff08Raspberry Pi pico RP2040\uff09", "title_en": "Software defined USB port (Raspberry Pi pico RP2040)", "transed": 1, "url": "https://github.com/sekigon-gonnoc/Pico-PIO-USB", "via": "", "real_tags": ["\u8f6f\u4ef6", "\u5b9a\u4e49", "defined", "\u8bbe\u5907"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073669, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5728\u4e8b\u6545\u73b0\u573a\u5de5\u4f5c\u3002io\u662f\u4f26\u6566\u7684\u4e00\u5bb6\u521d\u521b\u516c\u53f8\uff0c\u5b83\u521a\u521a\u4f7f\u7528Fivetran\u8fdb\u884cETL\uff0c\u4f7f\u7528dbt\u8fdb\u884c\u8f6c\u6362\uff0c\u6784\u5efa\u4e86\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u6570\u636e\u5806\u6808\u3002\n\u867d\u7136\u6211\u4eec\u6784\u5efa\u7684\u7ba1\u9053\u4ec5\u4f9b\u5185\u90e8\u4f7f\u7528\uff0c\u4f46\u6211\u4eec\u5f88\u5feb\u610f\u8bc6\u5230\uff0cMetabase\u53ef\u4ee5\u4e3a\u6211\u4eec\u7684\u5185\u90e8\u4ea7\u54c1\u63d0\u4f9b\u6bd4\u6211\u4eec\u96f6\u788e\u7684\u57fa\u672cJavascript\u56fe\u5f62\u66f4\u597d\u7684\u4eea\u8868\u76d8\u3002\n\u8fd9\u5f88\u597d\uff0c\u4f46\u6211\u4eec\u5728\u4e3a\u81ea\u5df1\u5efa\u8bbe\u65f6\u63a5\u53d7\u4e86\u4e00\u4e9b\u59a5\u534f\uff0c\u5982\u679c\u6211\u4eec\u5411\u5ba2\u6237\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u7684dbt\u6d4b\u8bd5\u662f\u8106\u5f31\u7684\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u53d1\u5e03\u4e00\u4e2a\u6d4b\u8bd5\u7ecf\u5e38\u5931\u8d25\u7684\u6570\u636e\u4ea7\u54c1\u3002\n---\u7248\u672c\uff1a2\u4e2a\u6a21\u578b\uff1a-\u540d\u79f0\uff1a\u884c\u52a8\u63cf\u8ff0\uff1a\u4e8b\u4ef6\u884c\u52a8\u5217\uff1a-\u540d\u79f0\uff1a\u7ec4\u7ec7id\u63cf\u8ff0\uff1a&#34\uff1b\u7ec4\u7ec7ID&#34\uff1b\u6d4b\u8bd5\uff1a-\u975e\u7a7a-\u5173\u7cfb\uff1ato:ref\uff08&#39\uff1b\u7ec4\u7ec7&#39\uff1b\uff09\u5b57\u6bb5\uff1a\u7ec4\u7ec7id\n\u8be5\u6d4b\u8bd5\u8ba9dbt\u786e\u8ba4\u884c\u52a8\u8868\u4e2d\u7684\u6240\u6709\u7ec4\u7ec7id\u503c\u90fd\u51fa\u73b0\u5728\u7ec4\u7ec7\u4e2d\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u5728\u52a0\u5165\u65f6\u641e\u7838\u4e86\u4ec0\u4e48\uff0c\u8fd8\u662f\u6570\u636e\u770b\u8d77\u6765\u4e0d\u9519\uff1f\n\u6839\u636e\u6211\u4eec\u7684\u6d4b\u8bd5\u5957\u4ef6\uff0c\u6570\u636e\u770b\u8d77\u6765\u4e0d\u592a\u597d\u3002\u4f46\u53ea\u6709\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6d4b\u8bd5\u5957\u4ef6\u6bcf\u4e09\u6b21\u8fd0\u884c\u4e00\u6b21\uff0c\u6211\u4eec\u5c31\u4f1a\u770b\u5230\u5982\u4e0b\u9519\u8bef\uff1a\n\u6d4b\u8bd5\u5173\u7cfb\u5931\u8d25_\u4e8b\u4ef6_\u884c\u52a8_\u7ec4\u7ec7_id u\u53c2\u8003u\u7ec4\u7ec7uu\uff08models/staging/product/stg_product.yml\uff09\u5f97\u52301\u4e2a\u7ed3\u679c\uff0c\u5982\u679c\uff01=0\u76ee\u6807/\u5df2\u7f16\u8bd1/\u5206\u6790/\u6a21\u578b/\u767b\u53f0/\u4ea7\u54c1/stg_\u4ea7\u54c1\u7684\u5b8c\u6574SQL\u3002yml/relationships_inc_e2d88f3fd5bd723431990564532e121c\u3002sql\n\u8fd9\u4e0d\u662f\u6700\u6e05\u6670\u7684\u8f93\u51fa\uff0c\u4f46\u53ef\u4ee5\u7406\u89e3\u4e3a\u201cactions\u8868\u4e2d\u7684Organization ID\u4e0eOrganization Stable\u4e2d\u7684ID\u4e0d\u5339\u914d\u201d\u3002\n\u6211\u4eec\u4f7f\u7528Fivetran\u5c06Postgres\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\uff08\u7ec4\u7ec7\u548c\u4e8b\u4ef6\u884c\u52a8\u7684\u6765\u6e90\uff09\u62c9\u5165BigQuery\u6570\u636e\u4ed3\u5e93\u3002\n\u5728Postgres land\u4e2d\uff0c\u60a8\u53ef\u4ee5\u671f\u671b\u5728\u6240\u6709\u8868\u4e2d\u4ee5\uff08\u57fa\u672c\u4e0a\uff09\u4e00\u81f4\u7684\u6570\u636e\u89c6\u56fe\u8fd0\u884c\u3002\u5373\u4f7f\u5bf9\u4e8e\u5355\u4e2a\u67e5\u8be2\uff0c\u6570\u636e\u4e5f\u662f\u4ee5\u539f\u5b50\u65b9\u5f0f\u63d2\u5165\u548c\u66f4\u65b0\u7684\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u53e6\u4e00\u4e2a\u8868\u4e2d\u627e\u5230\u4e00\u4e2a\u5f15\u7528\u4e86\u4e0d\u5b58\u5728\u8be5\u5f15\u7528\u7684\u5185\u5bb9\u7684\u6e90\uff0c\u90a3\u5c06\u662f\u975e\u5e38\u5947\u602a\u7684\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u679c\u6211\u4eec\u4ecePostgres\u83b7\u53d6\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u8fd9\u4e9b\u65ad\u88c2\u7684\u5173\u7cfb\u4f1a\u5e26\u6765\u4ec0\u4e48\uff1f\n\u867d\u7136Postgres\u53ef\u80fd\u662f\u4e00\u81f4\u7684\uff0c\u4f46\u7531\u6b64\u4ea7\u751f\u7684BigQuery\u6570\u636e\u4ed3\u5e93\u5374\u4e0d\u4e00\u81f4\u3002Fivetran\u7684\u540c\u6b65\u8fc7\u7a0b\u53ef\u4ee5\u7b80\u5316\u4e3a\u4ee5\u4e0bpsuedo\u4ee3\u7801\uff1a\n\u6bcf15\u5206\u949f\uff1a\u7528\u4e8e\u6570\u636e\u5e93\u4e2d\u7684\u8868\u3002\u6240\u6709\u8868\u683c\uff1a\u81ea\u4e0a\u6b21\u540c\u6b65\u4ee5\u6765\u7684\u66f4\u6539\u3002\u83b7\u53d6\u81ea\uff08table.last_Synched\uff09\u8868\u4ee5\u6765\u7684\u66f4\u6539\u3002last_synced=now\uff08\uff09\u4ed3\u5e93\u3002\u63d2\u5165\uff08\u8868\u683c\uff0c\u81ea\u4e0a\u6b21\u540c\u6b65\u4ee5\u6765\u5df2\u66f4\u6539\uff09\nBigQuery\u4e0d\u63d0\u4f9b\u8de8\u591a\u4e2a\u8868\u7684\u4e00\u81f4\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u6700\u7ec8\u751f\u6210\u4e86\u4e00\u4e2a\u201c\u952f\u9f7f\u201d\u6570\u636e\u96c6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8868\u5728\u540c\u4e00\u65f6\u95f4\u540c\u6b65\u5230\u4e0d\u540c\u7684\u70b9\u3002\n\u5982\u679c\u5728t0\u4e4b\u540e\uff0c\u4f46\u5728t2\u4e4b\u524d\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7ec4\u7ec7\u548c\u4e00\u4e9b\u4e0e\u4e4b\u76f8\u5173\u7684\u4e8b\u4ef6\u64cd\u4f5c\uff0c\u90a3\u4e48\u6211\u4eec\u7684\u540c\u6b65\u5c06\u8df3\u8fc7\u8be5\u7ec4\u7ec7\uff0c\u4f46\u5305\u542b\u8fd9\u4e9b\u64cd\u4f5c\u3002\n\u8fd9\u5c31\u662f\u6211\u4eec\u6d4b\u8bd5\u5931\u8d25\u7684\u539f\u56e0\uff0c\u4e5f\u662f\u5b83\u4eec\u968f\u673a\u5931\u8d25\u7684\u539f\u56e0\uff08flake\uff09\uff1a\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8eFivetran\u4f55\u65f6\u6267\u884c\u4e86\u540c\u6b65\uff0c\u4ee5\u53ca\u6d4b\u8bd5\u662f\u5426\u5931\u8d25\u53ef\u80fd\u9057\u6f0f\u4e86\u54ea\u4e9b\u6570\u636e\u3002\n\u5728\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684BigQuery\u4ed3\u5e93\u4e2d\u7684\u8868\u5305\u542b\u4e00\u81f4\u622a\u6b62\u7684\u66f4\u65b0\uff0c\u5728\u6240\u6709\u8868\u4e2d\u5e94\u7528\u76f8\u540c\u3002\u8fd9\u5c06\u907f\u514d\u6211\u4eec\u7684\u5173\u7cfb\u4e0d\u534f\u8c03\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u4f9d\u9760\u6211\u4eec\u7684\u6d4b\u8bd5\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u521b\u5efa\u4e00\u4e2adbt\u6a21\u578bsync_\u6c34\u5370\uff0c\u8be5\u6a21\u578b\u4f30\u8ba1\u5728\u6700\u540e\u4e00\u6b21Fivetran\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5b89\u5168\u7684\u65f6\u95f4\u6233\u3002\n--\u6a21\u578b/\u540c\u6b65_\u6c34\u5370\u3002sql{config\uff08\u7269\u5316=&#34\uff1b\u8868&#34\uff1b\uff0c\uff09}\u2014\u2014\u8fd9\u4e2a\u8868\u6807\u8bb0\u4e86\u6211\u4eec&#39\uff1b\u6211\u8fd0\u884cdbt\u3002--cutoff\u7528\u4e8e\u8fc7\u6ee4\u6bcf\u4e2a--database\u8868\u4e2d\u6700\u8fd1\u7684\u4efb\u4f55\u66f4\u6539\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u786e\u4fdd--dataset\u4e2d\u7684\u6bcf\u4e2a\u8868\u662f\u4e00\u81f4\u7684\uff0c\u5373\u4f7f\u540c\u6b65\u53d1\u751f\u5728\u4e0d\u540c\u7684--period\u3002---\u5f53Fivetran\u6bcf15\u7c73\u5c1d\u8bd5\u540c\u6b65\u4e00\u6b21\u65f6\uff0c\u9009\u62e920\u7c73\uff0c\u8fd9\u5e94\u8be5\u5728&lt\uff1b100\u4e07\u3002\u8fd4\u56de20\u7c73\u53ef\u4ee5\u786e\u4fdd\u6211\u4eec\u5728\u6700\u540e\u4e00\u6b21\u5b8c\u6574\u540c\u6b65\u5f00\u59cb\u540e\u5b89\u5168\u5730\u5207\u65ad\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u8868\u90fd\u662f\u4e00\u81f4\u7684\u3002\u9009\u62e9\u65f6\u95f4\u6233_sub\uff08\u5f53\u524d\u65f6\u95f4\u6233\uff08\uff09\uff0c\u95f4\u969420\u5206\u949f\uff09\u4f5c\u4e3a\u622a\u6b62\u65f6\u95f4\n\u7531\u4e8e\u6211\u4eec\u7684Fivetran\u6bcf15\u7c73\u540c\u6b65\u4e00\u6b21\uff0c\u5e76\u4e14\u6bcf\u6b21\u540c\u6b65\u5728\u5927\u7ea61\u7c73\u7684\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u6211\u4eec\u77e5\u9053\u6240\u6709\u8868\u90fd\u5c06\u5b8c\u6210\u4e00\u6b21\u540c\u6b65&lt\uff1b2000\u4e07\u5e74\u524d\uff0c\u5c4a\u65f6\u5b83\u5c06\u5305\u542b\u622a\u6b62\u65e5\u671f\u4e4b\u524d\u548c\u4e4b\u540e\u7684\u6240\u6709\u6570\u636e\u3002\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u622a\u6b62\u5e94\u7528\u4e8e\u6240\u6709\u8868\uff0c\u5ffd\u7565\u8d85\u51fa\u8be5\u70b9\u7684\u4efb\u4f55\u4e0d\u4e00\u81f4\u7684\u540c\u6b65\u8fdb\u5ea6\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5df2\u7ecf\u5c06\u8fd9\u4e2a\u8868\u5177\u4f53\u5316\uff0c\u6240\u4ee5\u5728dbt\u8fd0\u884c\u5f00\u59cb\u65f6\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002\u8fd9\u4e0e\u89c6\u56fe\u76f8\u53cd\uff0c\u5728\u89c6\u56fe\u4e2d\uff0c\u6bcf\u5f53\u6211\u4eec\u67e5\u8be2\u8868\u65f6\uff0ccurrent_timestamp\uff08\uff09\u7684\u503c\u90fd\u4f1a\u6539\u53d8\u3002\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8868\u6a21\u578b\uff0c\u6211\u4eec\u5bf9createdat\u884c\u5e94\u7528\u622a\u6b62\u503c\uff1a\n\u6e90\u4ee3\u7801\u4e3a\uff08\u4ece{source\uff08&#39\uff1bcore#u production#u public&#39\uff1b\uff0c&#39\uff1borganizations&#39\uff1b\uff09}\u4e2d\u9009\u62e9*\uff0c{{ref\uff08&#39\uff1bsync#u\u6c34\u5370&#39\uff1b\uff09}\u540c\u6b65_\u6c34\u5370\uff0c\u5176\u4e2d_fivetran _deleted\u4e3a\u7a7a\uff0c\u5e76\u5728&lt\uff1b\u540c\u6b65\u6c34\u5370\u3002\u622a\u6b62\u65f6\u95f4\uff09\uff0c\u91cd\u547d\u540d\u4e3a\uff08\u9009\u62e9/*\u2026*/\u4ece\u6e90\u4ee3\u7801\uff09\u9009\u62e9*\u4ece\u91cd\u547d\u540d\n\u4f7f\u7528ref\uff08&#39\uff1bsync#u\u6c34\u5370&#39\uff1b\uff09\u8fd9\u610f\u5473\u7740dbt\u5c06\u77e5\u9053\u5728\u6211\u4eec\u7684\u6a21\u578b\u4e4b\u524d\u6784\u5efa\u6c34\u5370\uff0c\u56e0\u4e3a\u5b83\u5c06\u8ddf\u8e2adbt\u56fe\u5f62\u4e2d\u7684\u4f9d\u8d56\u5173\u7cfb\u3002\n\u6211\u4eec\u5bf9\u5176\u4f59\u7684\u6570\u636e\u5e93\u8868\u5e94\u7528\u76f8\u540c\u7684\u6a21\u5f0f\uff0c\u786e\u4fdd\u6bcf\u4e2a\u8868\u90fd\u6709\u4e00\u4e2a\u4e00\u81f4\u7684\u622a\u6b62\u70b9\u3002\n\u6211\u4eec\u4e0d\u53ea\u662f\u4ece\u6211\u4eec\u7684Postgres\u6570\u636e\u5e93\u540c\u6b65\u6570\u636e\uff1a\u6211\u4eec\u4ece\u5404\u79cd\u8d44\u6e90\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u6bd4\u5982\u7ec6\u5206\u5e02\u573a\u6216\u793e\u4ea4\u5a92\u4f53\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u53ef\u80fd\u5f15\u7528corePostgres\u8d44\u6e90\u3002\n\u5982\u679c\u6211\u4eec\u770b\u5230\u7c7b\u4f3c\u7684\u7247\u72b6\u6d4b\u8bd5\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9bModelsTo\u4e0a\u91cd\u590d\u4f7f\u7528\u622a\u6b62\u3002\u6211\u4eec\u5bf9BigQuery\u4e8b\u4ef6\u8868\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u8fd9\u4e9b\u8868\u662f\u4ece\u4ea7\u54c1\u5b9e\u65f6\u5199\u5165\u7684\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u8fd9\u662f\u7b80\u5355\u800c\u5feb\u901f\u7684\uff0c\u5e76\u4e14\u5982\u679c\u9700\u8981\u5f15\u7528\u6216\u68c0\u67e5\u6570\u636e\u4ed3\u5e93\uff0c\u53ef\u4ee5\u5c06\u4e2d\u65ad\u4fdd\u5b58\u5230\u6570\u636e\u4ed3\u5e93\u4e2d\u3002\n\u4e0d\u7ba1\u4f60\u662f\u7528\u8fd9\u4e2a\u8fd8\u662f\u522b\u7684\u4ec0\u4e48\uff0c\u907f\u514d\u4e0d\u53ef\u9760\u7684\u6d4b\u8bd5\u90fd\u5f88\u91cd\u8981\u3002\u5f53\u6211\u7b2c\u4e00\u6b21\u5e94\u7528\u4e2d\u65ad\u65f6\uff0c\u6211\u53d1\u73b0\u4e0e\u4e2d\u65ad\u65e0\u5173\u7684\u6545\u969c\u662f\u5408\u6cd5\u7684\u9519\u8bef\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a\u3002\n\u867d\u7136\u5728\u539f\u578b\u8bbe\u8ba1\u65f6\u5ffd\u7565\u8fd9\u4e9b\u5931\u8d25\u662f\u6b63\u786e\u7684\u51b3\u5b9a\uff0c\u4f46\u6211\u5efa\u8bae\u5728\u5411\u5ba2\u6237\u516c\u5f00\u8fd9\u4e9b\u6570\u636e\u4e4b\u524d\u5148\u5bf9\u5176\u8fdb\u884c\u5206\u7c7b\u3002\n\u5f53\u4f60\u6709\u4e00\u5957\u53ef\u4ee5\u4f9d\u8d56\u7684\u6d4b\u8bd5\u5957\u4ef6\u65f6\uff0c\u751f\u6d3b\u7684\u538b\u529b\u5c31\u66f4\u5c0f\u4e86\uff01\n\u5728Hackernews\u4e0a\u8ba8\u8bba\u8fd9\u7bc7\u5e16\u5b50\u3002\u5982\u679c\u4f60\u559c\u6b22\u8fd9\u7bc7\u6587\u7ae0\uff0c\u60f3\u770b\u5230\u66f4\u591a\uff0c\u8bf7\u70b9\u51fb@lawrjones\u8ddf\u6211\u6765\u3002", "note_en": "I work at  incident.io, a start-up in London that just built our first data stack using  Fivetran for ETL and dbt for transformations.\n While we built the pipeline for internal use only, we soon realised Metabase could provide much better dashboards for our internalproduct than our  scrappy  basic Javascript graphs.\n   This would be fine, except we\u2019d accepted some compromises while building forourselves that we couldn\u2019t if we were to provide this data to our customers.Namely, our dbt tests were flaky, and there was no way we\u2019d ship a data productwhere our tests would regularly fail.\n   --- version :  2 models :  -  name :  actions  description :  Incident actions  columns :  -  name :  organisation_id  description :  &#34; Organisation   ID&#34;  tests :  -  not_null  -  relationships :  to :  ref(&#39;organisations&#39;)  field :  organisation_id\n This test gets dbt to confirm all  organisation_id values in the actions table appear in  organisations. Put simply,have we screwed something up in our join, or does the data look good?\n According to our test suite, the data  did not look good. But only on someruns, where about once every three runs of the test suite we\u2019d see an error likethis:\n Failure in test relationships_incident_actions_organisation_id__ref_organisations_ (models/staging/product/stg_product.yml)Got 1 result, configured to fail if != 0compiled SQL at target/compiled/analytics/models/staging/product/stg_product.yml/relationships_inc_e2d88f3fd5bd723431990564532e121c.sql\n This isn\u2019t the clearest output, but it can understood as \u201cthere wereorganisation IDs in the actions table that had no match in the organisationstable\u201d.\n   We use Fivetran to pull data from our Postgres database, the source of theorganisation and incident actions, into our BigQuery data warehouse.\n In Postgres-land, you can expect to be running with a (mostly) consistent viewof data across all tables. Even with respect to individual queries, data isinserted and updated atomically, so it would be very strange for you to find aresource that references something in another table where that reference doesnot exist.\n That begs the question: if we\u2019re sourcing our data from Postgres, which isconsistent, what gives with these broken relations?\n Well, while Postgres might be consistent, the resulting BigQuery data warehouseis not. The syncing process for Fivetran can be reduced to this psuedo-code:\n every 15 minutes: for table in database.all_tables: changes_since_last_sync = table.get_changes_since(table.last_synced) table.last_synced = now() warehouse.insert(table, changed_since_last_sync)\n BigQuery does not provide consistency across multiple tables, so we end upproducing a \u2018jagged\u2019 dataset, where each table is synced to a different point intime.\n     If after t0, but before t2, we add an organisation and some incident actionsthat relate to it, then our sync will have skipped the organisation but includedthe actions.\n That\u2019s the cause of our failing tests, and why they fail randomly (flake): itentirely depends on when Fivetran has performed a sync and what data may havebeen missed on whether the test fails.\n  In an ideal world, our BigQuery warehouse would have tables that contain updatesup-to a consistent cutoff, applied equally across all tables. That would avoidus having patchy relations, and allow us to lean on our tests.\n  First, we create a dbt model  sync_watermarks that estimates a timestamp thatis safely before the start of the last Fivetran run.\n  -- models/sync_watermarks.sql {{  config (  materialized  =  &#34;table&#34; ,  ) }} -- This table marks the point at which we&#39;ve run dbt. The -- cutoff is used to filter any very recent changes from each -- database table, allowing us to ensure each table in the -- dataset is consistent, even when syncs happen at different -- periods. --  -- 20m is chosen as Fivetran attempts to sync every 15m, which -- should complete in &lt;1m. Going back 20m ensures we cutoff -- safely after the start of the last complete sync, meaning -- each table will be consistent. select  timestamp_sub ( current_timestamp (),  interval  20  minute )  as  cutoff_at\n As our Fivetran syncs every 15m, and each sync completes in ~1m, we know alltables will have completed a sync &lt;20m ago, at which point it will contain alldata up-to and beyond that cutoff.\n This means we can apply the cutoff to all tables, ignoring any inconsistent syncprogress beyond that point.\n Note that we\u2019ve materialised this table so it gets calculated just once, at thestart of our dbt run. This is as opposed to a view, where any time we query thetable, the value of  current_timestamp() would change.\n Then for each of our table models, we apply the cutoff against the row createdat:\n with source  as  (  select  *  from  {{  source ( &#39;core_production_public&#39; ,  &#39;organisations&#39; )  }} ,  {{  ref ( &#39;sync_watermarks&#39; )  }}  sync_watermarks  where  _fivetran_deleted  is  null  and  created_at  &lt;  sync_watermarks . cutoff_at ), renamed  as  (  select  /* ... */  from  source ) select  *  from  renamed\n Using  ref(&#39;sync_watermarks&#39;) means dbt will know to build thewatermark before our model, as it will track the dependency in dbt\u2019s graph.\n We apply the same pattern to the rest of our database tables, ensuring eachtable has a consistent cutoff.\n   We don\u2019t just sync data from our Postgres database: we pull it from a variety ofsources, such as Segment or social media, all of which might reference corePostgres resources.\n If we see similar flaky test issues, we can reuse the cutoff on these modelstoo. We do just that for our BigQuery event tables which are written to inrealtime from the product.\n   There\u2019s many ways to solve this problem, but this is simple and quick, and hasthe advantage of saving the cutoff into your data warehouse if you ever need toreference or check it.\n Whether you use this or something else, it\u2019s important to avoid flaky tests.When first applying the cutoff, I was unsurprised to discover failures that wereunrelated to the cutoff, and were legitimate bugs.\n While it was the right decision to ignore these failures when prototyping, I\u2019mglad we sorted it before exposing this data to our customers.\n Life is just less stress when you have a test suite you can depend on!\n  Discuss this post on  Hackernews. If you liked this post and want to see more, follow me at  @lawrjones.", "posttime": "2022-02-17 02:42:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e2d\u65ad,flaky,\u6570\u636e", "title": "\u7528\u540c\u6b65\u4e2d\u65ad\u4fee\u590d\u8106\u5f31\u7684dbt\u6d4b\u8bd5", "title_en": "Fixing flaky dbt tests with a sync cutoff", "transed": 1, "url": "https://blog.lawrencejones.dev/flaky-dbt-tests/", "via": "", "real_tags": ["\u4e2d\u65ad", "flaky", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073667, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53e4\u5df4\u536b\u751f\u5b98\u54582019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u75ab\u82d7\u63a5\u79cd\u7533\u8bf7\uff0c\u4ed6\u4eec\u5c06\u7533\u8bf7\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u6279\u51c6\u7684\u4e00\u79cd\u56fd\u4ea7CVID-19\u75ab\u82d7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5ba3\u5e03\u4ed6\u4eec\u5df2\u7ecf\u83b7\u5f97\u8d44\u91d1\uff0c\u4e3a\u4f4e\u6536\u5165\u56fd\u5bb6\u751f\u4ea72\u4ebf\u79cd\u75ab\u82d7\u3002\n\u53e4\u5df4\u536b\u751f\u76d1\u7ba1\u673a\u6784\uff08CECMED\uff09\u5df2\u6279\u51c6\u4f7f\u7528\u8be5\u56fd\u4e09\u79cd\u56fd\u4ea7\u75ab\u82d7\uff0c\u8fd9\u4e9b\u75ab\u82d7\u51fa\u53e3\u5230\u56db\u4e2a\u56fd\u5bb6\uff0c\u4f46\u5c1a\u672a\u83b7\u5f97\u4e16\u536b\u7ec4\u7ec7\u7684\u6279\u51c6\u30021\u53e4\u5df4\u56fd\u6709\u5236\u836f\u96c6\u56e2BioCubaFarma\u7684\u79d1\u5b66\u548c\u521b\u65b0\u4e3b\u7ba1\u7f57\u5170\u591a\u00b7\u4f69\u96f7\u65af\u00b7\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u4eca\u5e74\u5e94\u8be5\u4f1a\u6709\u6240\u6539\u53d8\u3002\n1\u670825\u65e5\uff0c\u7f57\u5fb7\u91cc\u683c\u65af\u5728\u54c8\u74e6\u90a3\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8bf4\uff1a\u201c\u6211\u4eec\u6b63\u5f0f\u8981\u6c42\u5bf9\u4e00\u79cd\u75ab\u82d7\u8fdb\u884c\u8d44\u683c\u9884\u5ba1\uff1a\u963f\u535c\u675c\u62c9\u3002\u201d\u3002\u201c\u6211\u4eec\u6b63\u5728\u5bf9\u8fd9\u4e9b\u6587\u4ef6\u8fdb\u884c\u6700\u540e\u5ba1\u67e5\uff0c\u5e94\u8be5\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u5185\u5c06\u5176\u53d1\u9001\u7ed9\u4e16\u536b\u7ec4\u7ec7\u3002\u201d\n\u54c8\u74e6\u90a3\u82ac\u83b1\u75ab\u82d7\u7814\u7a76\u6240\u7684\u8fbe\u683c\u739b\u00b7\u52a0\u897f\u4e9a\u00b7\u91cc\u7ef4\u62c9\u8bf4\uff0c\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\u7b2c\u4e8c\u79cd\u53e4\u5df4\u75ab\u82d7Soberana 2\u7684\u7533\u8bf7\u5e94\u5728\u672a\u6765\u51e0\u5468\u5185\u53d1\u51fa\uff0c\u5e76\u6709\u671b\u5728\u4eca\u5e74\u83b7\u5f97\u4f7f\u7528\u8bb8\u53ef\u3002\n\u53bb\u5e74\u590f\u5929\uff0c\u53e4\u5df42019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u7684\u8bb0\u5f55\u7387\u5df2\u7ecf\u6062\u590d\u3002\u963f\u5e03\u8fbe\u62c9\u3001\u7d22\u5df4\u62c9\u90a32\u53f7\u548c\u4e00\u79cd\u589e\u5f3a\u75ab\u82d7SoeSuraPlus\u7684\u63a8\u51fa\uff0c\u57282021\u5e748\u6708\u62a5\u544a\u4e86\u6bcf\u767e\u4e07\u4eba\u53e3\u4e2d861\u4e2a\u65b0\u7684\u6bcf\u65e5\u611f\u67d3\u91cf\u4e4b\u540e\uff0c\u4fdd\u6301\u4e86\u66f4\u5177\u611f\u67d3\u529b\u7684OmiCon\u53d8\u5f02\u4f53\u7684\u63a7\u5236\uff0c\u8fd9\u662f\u4e16\u754c\u4e0a\u6700\u9ad8\u7684\u30022\u76f8\u6bd4\u4e4b\u4e0b\uff0c1\u670824\u65e5\uff0c\u53e4\u5df4\u62a5\u544a\u4e86\u6bcf\u767e\u4e07\u4eba\u6bcf\u5929284\u4f8b\u65b0\u75c5\u4f8b\u3002\n\u975e\u540c\u884c\u8bc4\u5ba1\u7684\u7814\u7a76\u663e\u793a\uff0c\u4e09\u5242Abdala\u5bf9\u75c7\u72b6\u6027\u611f\u67d3\u7684\u6709\u6548\u7387\u4e3a92.3%\uff0c\u4e24\u5242\u548c\u989d\u5916\u4e00\u5242Soberana Plus\u540e\uff0cSoberana 2\u5bf9\u75c7\u72b6\u6027\u611f\u67d3\u7684\u6709\u6548\u7387\u4e3a92.4%\u30023.4\u53e4\u5df4\u8fd8\u6709\u5176\u4ed6\u5019\u9009\u75ab\u82d7\u5728\u8bd5\u9a8c\u4e2d\uff0c\u5305\u62ecSoberana 1\u548cMambisa\u9f3b\u5185\u75ab\u82d7\uff0c\u4ee5\u53ca\u9488\u5bf9\u65b0\u751fomicron\u53d8\u79cd\u7684\u75ab\u82d7\u30025.\n\u8fd9\u4e2a\u5c9b\u56fd\u5df2\u7ecf\u4e3a86%\u7684\u4eba\u53e3\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u4eba\u63a5\u79cd\u4e862.97\u5242\uff0c\u6bd4\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u90fd\u591a\u30026.\n\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u53e4\u5df4\u5411\u4f0a\u6717\u3001\u5c3c\u52a0\u62c9\u74dc\u3001\u59d4\u5185\u745e\u62c9\u548c\u8d8a\u5357\u51fa\u53e3\u75ab\u82d7\uff0c\u5e76\u6b63\u5728\u4e0e15\u591a\u4e2a\u56fd\u5bb6\u8fdb\u884c\u8ba8\u8bba\uff0c\u5176\u4e2d\u5927\u591a\u6570\u662f\u4f4e\u6536\u5165\u56fd\u5bb6\u3002\u6700\u8fd1\uff0c2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u75ab\u82d7\u6350\u8d60\u7ed9\u53d9\u5229\u4e9a\u3001\u5723\u6587\u68ee\u7279\u548cGrenadines\uff0c\u5e76\u4e0e\u5176\u4ed6\u56fd\u5bb6\u5206\u4eab\u77e5\u8bc6\u548c\u6280\u672f\u77e5\u8bc6\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728\u5f53\u5730\u751f\u4ea7\u75ab\u82d7\u3002\n\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff0c\u201c\u6211\u4eec\u5bf9\u4efb\u4f55\u6697\u793a\u6211\u4eec\u7684\u75ab\u82d7\u5bf9\u4e16\u754c\u4ea7\u751f\u66f4\u5927\u5f71\u54cd\u7684\u63d0\u8bae\u6301\u5f00\u653e\u6001\u5ea6\u2026\u2026\u5bf9\u5bf9\u53e4\u5df4\u75ab\u82d7\u611f\u5174\u8da3\u7684\u56fd\u5bb6\u6765\u8bf4\uff0c\uff08\u7f3a\u4e4f\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\uff09\u5e76\u4e0d\u662f\u4e00\u4e2a\u969c\u788d\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u75ab\u82d7\u7684\u9500\u552e\u4ef7\u683c\u4e0eCovax\u8ba1\u5212\u76f8\u5f53\uff0cCovax\u8ba1\u5212\u5411\u4e2d\u4f4e\u6536\u5165\u56fd\u5bb6\u5206\u53d1\u75ab\u82d7\u3002\u8be5\u56fd\u7684\u751f\u4ea7\u80fd\u529b\u4f7f\u5176\u80fd\u591f\u6bcf\u5e74\u751f\u4ea7\u7ea61.2\u4ebf\u5242\u75ab\u82d7\u30027.\n\u7136\u800c\uff0c\u4e16\u536b\u7ec4\u7ec7\u7684\u6279\u51c6\u662f\u65b0\u51a0\u80ba\u708e\u75ab\u82d7\u7684\u5fc5\u8981\u6761\u4ef6\uff0c\u65b0\u51a0\u80ba\u708e\u75ab\u82d7\u963b\u6b62\u53e4\u5df4\u75ab\u82d7\u901a\u8fc7\u4e16\u536b\u7ec4\u7ec7\u5171\u540c\u9886\u5bfc\u7684\u673a\u5236\u63a5\u79cd\u3002\u7f57\u5fb7\u91cc\u683c\u65af\u8bf4\uff1a\u201c\u4e5f\u8bb8\u5f53\u6388\u6743\u5b58\u5728\u65f6\uff0c\u8fd9\u5c06\u4fc3\u8fdb\u6216\u52a0\u901f\u5206\u9500\u3002\u201d\u3002\n\u53e4\u5df4\u516c\u5171\u536b\u751f\u90e8\u79d1\u6280\u521b\u65b0\u4e3b\u4efb\u4f0a\u83b1\u5b89\u5a1c\u00b7\u83ab\u62c9\u83b1\u65af\u00b7\u82cf\u4e9a\u96f7\u65af\u8bf4\uff0c\u521d\u6b65\u7814\u7a76\u8868\u660e\uff0c\u75ab\u82d7\u5bf9\u5965\u7c73\u514b\u9f99\u6709\u6548\u3002\n\u201c\u63a5\u79cdSoberana\u548cAbdala\u75ab\u82d7\u7684\u4eba\u5bf9omicron\u53d8\u79cd\u7684\u8840\u6e05\u8f6c\u5316\u7387\u5f88\u9ad8\uff0c\u201d\u5979\u8bf4\u3002\u7ed3\u679c\u201c\u975e\u5e38\u4ee4\u4eba\u9f13\u821e\u548c\u6709\u5229\u201d\uff0c\u5e94\u8be5\u5728\u672c\u5468\u516c\u5e03\n\u6839\u636eBMJ\u548c#39\u7684\u89c4\u5b9a\uff0c\u672c\u6587\u514d\u8d39\u63d0\u4f9b\u7ed9\u4e2a\u4eba\u4f7f\u7528\uff1b2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u6d41\u884c\u671f\u95f4\u7684\u7f51\u7ad9\u6761\u6b3e\u548c\u6761\u4ef6\uff0c\u6216\u7531BMJ\u53e6\u884c\u786e\u5b9a\u3002\u60a8\u53ef\u4ee5\u51fa\u4e8e\u4efb\u4f55\u5408\u6cd5\u7684\u975e\u5546\u4e1a\u76ee\u7684\uff08\u5305\u62ec\u6587\u672c\u548c\u6570\u636e\u6316\u6398\uff09\u4e0b\u8f7d\u548c\u6253\u5370\u672c\u6587\uff0c\u524d\u63d0\u662f\u4fdd\u7559\u6240\u6709\u7248\u6743\u58f0\u660e\u548c\u5546\u6807\u3002\nhttps://bmj.com/coronavirus/usage\n\u89c6\u56fe\u6458\u8981", "note_en": "Cuban health officials have said that they will apply for World Health Organization approval for one of the country\u2019s homegrown covid-19 vaccines, as they announced that they had secured funding to produce 200 million vaccine doses for low income countries.\n Cuba\u2019s health regulator (CECMED) has approved the use of three of the country\u2019s homegrown vaccines, which are exported to four countries, but none has been yet been approved by WHO. 1 That should change this year, said Rolando P\u00e9rez Rodr\u00edguez, director of science and innovation at Cuba\u2019s state run pharmaceutical conglomerate, BioCubaFarma.\n \u201cWe have formally requested the prequalification of one vaccine: Abdala,\u201d Rodriguez told a press conference in Havana on 25 January. \u201cWe are in the final review of the documents, and it should be sent in the following days to the WHO.\u201d\n The application for WHO approval of a second Cuban vaccine, Soberana 2, should be sent in the coming weeks and is also expected to gain authorisation for use this year, said Dagmar Garc\u00eda Rivera at the Finlay Institute of Vaccines in Havana.\n Cuba has regained control of the record rate of covid-19 infections seen last summer. Its rollout of Abdala, Soberana 2, and a booster vaccine, Soberana Plus, has kept the more infectious omicron variant under control after it reported 861 new daily infections per million population in August 2021, the highest in the world. 2 On 24 January, by contrast, Cuba reported 284 new cases per day per million people.\n Abdala is 92.3% effective against symptomatic infection after three doses, and Soberana 2 is 92.4% effective after two doses and an additional dose of Soberana Plus, non-peer-reviewed studies have shown. 3 4 Cuba has other vaccine candidates in trials, including Soberana 1 and Mambisa\u2014an intranasal vaccine\u2014as well as one that targets the nascent omicron variant. 5\n The island nation has fully vaccinated 86% of its population and administered 2.97 doses for every person, more than anywhere else in the world. 6\n Cuba exports its vaccines to Iran, Nicaragua, Venezuela, and Vietnam and is in discussion with more than 15 countries, most of which are low income nations, said Rodr\u00edguez. It recently donated covid-19 vaccines to Syria and to St Vincent and the Grenadines and is sharing knowledge and technical know-how with other countries to help them manufacture the vaccines locally.\n Rodr\u00edguez said, \u201cWe are open to any proposal that implies a greater impact of our vaccines on the world . . . [Lack of WHO approval] has not been an obstacle for countries interested in the Cuban vaccines.\u201d He added that the vaccines had been sold at a \u201cprice of solidarity\u201d comparable to the Covax scheme, which distributes vaccines to low and middle income countries. The country\u2019s manufacturing capacity allows it to produce around 120 million vaccine doses a year. 7\n However, WHO approval is a requisite for Covax vaccines, which has prevented Cuban shots from being administered through the WHO co-led mechanism. \u201cPerhaps when the authorisation is there, that will facilitate or accelerate distribution,\u201d said Rodr\u00edguez.\n Preliminary studies show that the vaccines hold up well against omicron, said Ileana Morales Su\u00e1rez, director of science and technology innovation at Cuba\u2019s Ministry of Public Health.\n \u201cThose vaccinated with Soberana and Abdala have high percentages of seroconversion against the omicron variant,\u201d she said. The results, which should be published this week, were \u201cvery encouraging and favourable.\u201d\n This article is made freely available for personal use in accordance with BMJ&#39;s website terms and conditions for the duration of the covid-19 pandemic or until otherwise determined by BMJ. You may download and print the article for any lawful, non-commercial purpose (including text and data mining) provided that all copyright notices and trade marks are retained.\n  https://bmj.com/coronavirus/usage\n View Abstract", "posttime": "2022-02-17 02:23:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u4ea7,request,\u75ab\u82d7", "title": "Covid-19\uff1a\u53e4\u5df4\u5c06\u8bf7\u6c42\u4e16\u536b\u7ec4\u7ec7\u6279\u51c6\u56fd\u4ea7\u75ab\u82d7", "title_en": "Covid-19: Cuba will request WHO approval for homegrown vaccine", "transed": 1, "url": "https://www.bmj.com/content/376/bmj.o230", "via": "", "real_tags": ["\u56fd\u4ea7", "request", "\u75ab\u82d7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073666, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81eaJAX\u4e8e2018\u5e74\u5e95\u95ee\u4e16\u4ee5\u6765\uff0c\u5b83\u7684\u53d7\u6b22\u8fce\u7a0b\u5ea6\u4e00\u76f4\u5728\u7a33\u6b65\u589e\u957f\uff0c\u8fd9\u662f\u6709\u5145\u5206\u7406\u7531\u7684\u3002DeepMind\u57282020\u5e74\u5ba3\u5e03\uff0c\u5b83\u6b63\u5728\u4f7f\u7528JAX\u6765\u52a0\u901f\u5176\u7814\u7a76\uff0c\u6765\u81eaGoogle Brain\u548c\u5176\u4ed6\u516c\u53f8\u7684\u8d8a\u6765\u8d8a\u591a\u7684\u51fa\u7248\u7269\u548c\u9879\u76ee\u6b63\u5728\u4f7f\u7528JAX\u3002\u6709\u4e86\u8fd9\u4e48\u591a\u7684\u70ed\u8bae\uff0cJAX\u4f3c\u4e4e\u662f\u4e0b\u4e00\u4e2a\u5927\u578b\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u5bf9\u5427\uff1f\n\u9519\u8bef\u7684\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u9610\u660eJAX\u662f\u4ec0\u4e48\uff08\u4e0d\u662f\uff09\uff0c\u4e3a\u4ec0\u4e48\u5e94\u8be5\u5173\u5fc3\uff08\u6216\u4e0d\u5e94\u8be5\uff0c\u4f46\u53ef\u80fd\u5e94\u8be5\uff09\uff0c\u4ee5\u53ca\u662f\u5426\u5e94\u8be5\uff08\u6216\u4e0d\u5e94\u8be5\uff09\u4f7f\u7528\u5b83\u3002\n\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089JAX\uff0c\u5e76\u4e14\u60f3\u8df3\u8fc7\u57fa\u51c6\u6d4b\u8bd5\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u8df3\u8f6c\u5230\u6211\u4eec\u5173\u4e8e\u4f55\u65f6\u4f7f\u7528\u5b83\u7684\u5efa\u8bae\n\u6700\u597d\u4eceJAX\u4e0d\u662f\u7684\u4e1c\u897f\u5f00\u59cb\u3002JAX\u4e0d\u662f\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6216\u5e93\uff0c\u5b83\u672c\u8eab\u4e5f\u4e0d\u662f\u4e00\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u6216\u5e93\u3002\u603b\u4e4b\uff0cJAX\u662f\u4e00\u4e2a\u6570\u5b57\u8ba1\u7b97\u5e93\uff0c\u5b83\u5305\u542b\u4e86\u53ef\u7ec4\u5408\u51fd\u6570\u8f6c\u6362[1]\u3002\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u6df1\u5ea6\u5b66\u4e60\u53ea\u662fJAX\u6240\u80fd\u505a\u7684\u4e00\u5c0f\u90e8\u5206\uff1a\n\u7b80\u800c\u8a00\u4e4b\uff0c\u5c31\u662f\u901f\u5ea6\u3002\u8fd9\u662fJAX\u7684\u901a\u7528\u65b9\u9762\uff0c\u4e0e\u4efb\u4f55\u7528\u4f8b\u90fd\u76f8\u5173\u3002\n\u8ba9&#39\uff1bs\u7528NumPy\u548cJAX\u6c42\u77e9\u9635\u7684\u524d\u4e09\u6b21\u5e42\u7684\u548c\uff08\u6309\u5143\u7d20\uff09\u3002\u9996\u5148\u662f\u6211\u4eec\u7684NumPy\u5b9e\u73b0\uff1a\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8ba1\u7b97\u5927\u7ea6\u9700\u8981478\u6beb\u79d2\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7528JAX\u5b9e\u73b0\u8fd9\u4e2a\u8ba1\u7b97\uff1a\nJAX\u53ea\u97005.54\u6beb\u79d2\u5373\u53ef\u5b8c\u6210\u6b64\u8ba1\u7b97\uff0c\u6bd4NumPy\u5feb86\u500d\u591a\u3002\n\u4e8b\u60c5\u5e76\u4e0d\u50cf&#34\u90a3\u4e48\u7b80\u5355\uff1b\u4f7f\u7528JAX\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u5feb86\u500d\uff1b\uff0c\u4f46\u4f7f\u7528JAX\u4ecd\u7136\u6709\u5f88\u591a\u7406\u7531\u3002\u7531\u4e8eJAX\u4e3a\u79d1\u5b66\u8ba1\u7b97\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u57fa\u7840\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u9886\u57df\uff0c\u4e0d\u540c\u7684\u4eba\u6709\u4e0d\u540c\u7684\u539f\u56e0\u3002\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u4f60\u5728\u4efb\u4f55\u4e0e\u79d1\u5b66\u8ba1\u7b97\u76f8\u5173\u7684\u9886\u57df\uff0c\u4f60\u90fd\u5e94\u8be5\u5173\u5fc3JAX\u3002\n1.\u52a0\u901f\u5668\u4e0a\u7684NumPy\u2014\u2014NumPy\u662f\u4f7f\u7528Python\u8fdb\u884c\u79d1\u5b66\u8ba1\u7b97\u7684\u57fa\u672c\u8f6f\u4ef6\u5305\u4e4b\u4e00\uff0c\u4f46\u5b83\u53ea\u4e0eCPU\u517c\u5bb9\u3002JAX\u63d0\u4f9b\u4e86NumPy\u7684\u4e00\u4e2a\u5b9e\u73b0\uff08\u5177\u6709\u51e0\u4e4e\u76f8\u540c\u7684API\uff09\uff0c\u53ef\u4ee5\u975e\u5e38\u8f7b\u677e\u5730\u5728GPU\u548cTPU\u4e0a\u5de5\u4f5c\u3002\u5bf9\u4e8e\u8bb8\u591a\u7528\u6237\u6765\u8bf4\uff0c\u4ec5\u6b64\u4e00\u70b9\u5c31\u8db3\u4ee5\u8bc1\u660e\u4f7f\u7528JAX\u7684\u5408\u7406\u6027\u3002\n2\u3001XLA\u2014XLA\uff0c\u6216\u52a0\u901f\u7ebf\u6027\u4ee3\u6570\uff0c\u662f\u4e00\u4e2a\u4e13\u95e8\u4e3a\u7ebf\u6027\u4ee3\u6570\u8bbe\u8ba1\u7684\u5b8c\u6574\u7684\u7a0b\u5e8f\u4f18\u5316\u7f16\u8bd1\u5668\u3002Jax\u662f\u57fa\u4e8eXLA\u6784\u5efa\u7684\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\u4e0a\u9650[1 ]\u3002\n3\u3001JIT JAX\u5141\u8bb8\u60a8\u4f7f\u7528XLA\uff087\uff09\u5c06\u60a8\u81ea\u5df1\u7684\u51fd\u6570\u8f6c\u6362\u6210\u5373\u65f6\uff08JIT\uff09\u7f16\u8bd1\u7248\u672c\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u8ba1\u7b97\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7b80\u5355\u7684\u51fd\u6570\u88c5\u9970\u5668\uff0c\u5c06\u8ba1\u7b97\u901f\u5ea6\u6f5c\u5728\u5730\u63d0\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\n4.\u81ea\u52a8\u533a\u5206\u2014\u2014JAX\u6587\u6863\u5c06JAX\u79f0\u4e3a&#34\uff1bAutoGrad\u548cXLA\uff0c\u6c47\u96c6\u4e8634\u4e2a\uff1b[ 1]. \u81ea\u52a8\u533a\u5206\u7684\u80fd\u529b\u5728\u79d1\u5b66\u8ba1\u7b97\u7684\u8bb8\u591a\u9886\u57df\u90fd\u81f3\u5173\u91cd\u8981\uff0cJAX\u63d0\u4f9b\u4e86\u51e0\u79cd\u5f3a\u5927\u7684\u81ea\u52a8\u533a\u5206\u5de5\u5177\u3002\n5\u3001\u6df1\u5ea6\u5b66\u4e60\u2014\u2014\u867d\u7136\u4e0d\u662f\u4e00\u4e2a\u6df1\u523b\u7684\u5b66\u4e60\u6846\u67b6\u672c\u8eab\uff0c\u4f46JAX\u5f53\u7136\u4e3a\u6df1\u5165\u5b66\u4e60\u7684\u76ee\u7684\u63d0\u4f9b\u4e86\u8db3\u591f\u591a\u7684\u57fa\u7840\u3002\u6709\u8bb8\u591a\u57fa\u4e8eJAX\u6784\u5efa\u7684\u5e93\u5bfb\u6c42\u6784\u5efa\u6df1\u5ea6\u5b66\u4e60\u80fd\u529b\uff0c\u5305\u62ecFlax\u3001\u4ff3\u53e5\u548c\u633d\u6b4c\u3002\u5728\u6700\u8fd1\u7684PyTorch vs TensorFlow\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u751a\u81f3\u5f3a\u8c03JAX\u662f\u4e00\u4e2a\u503c\u5f97\u5173\u6ce8\u7684\u201c\u6846\u67b6\u201d\uff0c\u5efa\u8bae\u5c06\u5176\u7528\u4e8e\u57fa\u4e8eTPU\u7684\u6df1\u5ea6\u5b66\u4e60\u7814\u7a76\u3002JAX&#39\uff1bHessians\u7684\u9ad8\u6548\u8ba1\u7b97\u4e5f\u4e0e\u6df1\u5ea6\u5b66\u4e60\u76f8\u5173\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u9ad8\u9636\u4f18\u5316\u6280\u672f\u66f4\u52a0\u53ef\u884c\u3002\n6.\u901a\u7528\u53ef\u5fae\u7f16\u7a0b\u8303\u5f0f\u2014\u2014\u867d\u7136\u4f7f\u7528JAX\u6765\u6784\u5efa\u548c\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5f53\u7136\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u5b83\u4e5f\u4e3a\u901a\u7528\u53ef\u5fae\u7f16\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6846\u67b6\u3002\u8fd9\u610f\u5473\u7740\uff0c\u901a\u8fc7\u4f7f\u7528\u57fa\u4e8e\u6a21\u578b\u7684\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u6765\u89e3\u51b3\u95ee\u9898\uff0cJAX\u53ef\u4ee5\u5229\u7528\u7ecf\u8fc7\u51e0\u5341\u5e74\u7814\u7a76\u79ef\u7d2f\u8d77\u6765\u7684\u7279\u5b9a\u9886\u57df\u7684\u5148\u9a8c\u77e5\u8bc6\u3002\nXLA\uff0c\u6216\u52a0\u901f\u7ebf\u6027\u4ee3\u6570\uff0c\u6b63\u662fJAX\u5f3a\u5927\u7684\u57fa\u7840\u3002\u7531\u8c37\u6b4c\u5f00\u53d1\u7684XLA\u662f\u4e00\u79cd\u57fa\u4e8e\u9886\u57df\u7684\u3001\u57fa\u4e8e\u56fe\u5f62\u7684\u3001\u5373\u65f6\u7684\u7ebf\u6027\u4ee3\u6570\u7f16\u8bd1\u5668[2 ]\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5404\u79cd\u5168\u5c40\u7a0b\u5e8f\u4f18\u5316\u663e\u8457\u5730\u63d0\u9ad8\u8ba1\u7b97\u901f\u5ea6[3 ]\u3002\n\u5728\u4e00\u4e2a\u4f8b\u5b50\uff082\uff09\u4e2d\uff0cXLA\u5355\u72ec\u4ece\u8ba1\u7b97\u89d2\u5ea6\u63d0\u9ad8\u4e86\u4f2f\u7279\u8bad\u7ec3\u901f\u5ea6\u51e0\u4e4e7.3\u500d\uff0c\u4f46\u662f\u7531\u4e8e\u4f7f\u7528XLA\u4e5f\u4f7f\u5f97\u5b58\u50a8\u5668\u4f7f\u7528\u7387\u964d\u4f4e\uff0c\u4ece\u800c\u4f7f\u5f97\u68af\u5ea6\u7d2f\u52a0\uff0c\u5bfc\u81f4\u8ba1\u7b97\u541e\u5410\u91cf\u7684\u60ca\u4eba\u589e\u957f12\u500d\u3002\nXLA\u88ab\u70d8\u70e4\u6210JAX\u7684DNA\uff0c\u4ece\u4ed6\u4eec\u7684\u6807\u5fd7\u4e2d\u4f60\u53ef\u4ee5\u770b\u5230JAX\u7684\u6210\u529f\u4f9d\u8d56XLA\u3002\n\u6b63\u786e\u56de\u7b54\u4e3a\u4ec0\u4e48XLA\u662f\u5982\u6b64\u5927\u7684\u4ea4\u6613\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u975e\u5e38\u6280\u672f\u6027\u7684\uff08\u548c\u957f\u671f\u7684\uff09\u8ba8\u8bba\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u76ee\u7684\uff0c\u8db3\u591f\u7684XLA\u662f\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u5b83\u5927\u5927\u63d0\u9ad8\u4e86\u6267\u884c\u901f\u5ea6\uff0c\u5e76\u901a\u8fc7\u878d\u5408\u4f4e\u7ea7\u64cd\u4f5c\u964d\u4f4e\u5185\u5b58\u4f7f\u7528\u3002\nXLA\u4e0d\u9884\u5148\u5c06\u5355\u4e2a\u64cd\u4f5c\u7f16\u8bd1\u6210\u8ba1\u7b97\u6838\uff0c\u800c\u662f\u5c06\u6574\u4e2a\u56fe\u7f16\u8bd1\u6210\u4e00\u4e2a\u4e13\u95e8\u4e3a\u8be5\u56fe\u751f\u6210\u7684\u8ba1\u7b97\u5185\u6838\u5e8f\u5217\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u901a\u8fc7\u4e0d\u6267\u884c\u4e0d\u5fc5\u8981\u7684\u5185\u6838\u542f\u52a8\u4ee5\u53ca\u5229\u7528\u5c40\u90e8\u4fe1\u606f\u8fdb\u884c\u4f18\u5316\u6765\u63d0\u9ad8\u901f\u5ea6[3]\u3002\u7531\u4e8eXLA\u4e0d\u5728\u64cd\u4f5c\u5e8f\u5217\u4e2d\u5b9e\u73b0\u4e2d\u95f4\u6570\u7ec4\uff08\u800c\u662f\u5728GPU\u5bc4\u5b58\u5668\u4e2d\u4fdd\u6301\u503c\u5e76\u5c06\u5b83\u4eec\u6d41\u52303\uff09\uff0c\u4f7f\u7528XLA\u4e5f\u51cf\u5c11\u4e86\u5185\u5b58\u6d88\u8017\u3002\n\u8fd9\u79cd\u964d\u4f4e\u7684\u5185\u5b58\u6d88\u8017\u4f1a\u4ea7\u751f\u8fdb\u4e00\u6b65\u7684\u901f\u5ea6\u63d0\u5347\uff0c\u56e0\u4e3a\uff08i\uff09\u5185\u5b58\u901a\u5e38\u662f\u7528GPU\u8ba1\u7b97\u7684\u9650\u5236\u56e0\u7d20\uff0c\u5e76\u4e14\uff08ii\uff09XLA\u4e0d\u4f1a\u6d6a\u8d39\u6267\u884c\u65e0\u5173\u6570\u636e\u79fb\u52a8\u7684\u65f6\u95f4\u3002\n\u867d\u7136\u64cd\u4f5c\u878d\u5408\uff08\u6216\u6838\u878d\u5408\uff09\u662fXLA\u7684\u65d7\u8230\u7279\u5f81\uff0c\u4f46\u5e94\u8be5\u6ce8\u610f\u5230XLA\u8fd8\u6267\u884c\u4e86\u5927\u91cf\u5176\u4ed6\u7684\u6574\u4f53\u7a0b\u5e8f\u4f18\u5316\uff0c\u4f8b\u5982\u4e13\u95e8\u9488\u5bf9\u5df2\u77e5\u5f20\u91cf\u5f62\u72b6\uff08\u5141\u8bb8\u66f4\u79ef\u6781\u7684\u6052\u5b9a\u4f20\u64ad\uff09\uff0c\u5206\u6790\u548c\u8c03\u5ea6\u5185\u5b58\u4f7f\u7528\u4ee5\u6d88\u9664\u4e2d\u95f4\u5b58\u50a8\u7f13\u51b2\u5668[4 ]\uff0c\u6267\u884c\u5185\u5b58\u5e03\u5c40\u64cd\u4f5c\uff0c\u5e76\u4ec5\u8ba1\u7b97\u8bf7\u6c42\u503c\u7684\u5b50\u96c6\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\u8fd4\u56de\u7684\u8bdd\uff09[5]\u3002\n\u7531\u4e8e\u6240\u6709Jax\u64cd\u4f5c\u90fd\u662f\u5728XLA\u7684\u64cd\u4f5c\u4e2d\u5b9e\u73b0\u7684\uff0cJAX\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u8ba1\u7b97\u8bed\u8a00\uff0c\u5141\u8bb8\u5b83\u5728CPU\u3001TPU\u548cGPU\u4e4b\u95f4\u65e0\u7f1d\u8fd0\u884c\uff0c\u800c\u5e93\u8c03\u7528\u53ca\u65f6\u7f16\u8bd1\u548c\u6267\u884c\uff081\uff09\u3002\n\u5982\u679c\u4e0a\u9762\u7684\u672f\u8bed\u6ca1\u6709\u4e00\u4e2a\u5bf9\u4f60\u6709\u610f\u4e49\uff0c\u4e0d\u8981\u62c5\u5fc3\u2014\u2014\u53ea\u77e5\u9053XLA\u662f\u4e00\u4e2a\u975e\u5e38\u5feb\u7684\u7f16\u8bd1\u5668\uff0c\u5b83\u662fJAX\u5728\u5404\u79cd\u5404\u6837\u7684\u786c\u4ef6\u4e0a\u4f7f\u7528\u7684\u552f\u4e00\u5f3a\u5927\u548c\u7b80\u5355\u7684\u57fa\u7840\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8c08\u5230\u4e86XLA\uff0c\u4ee5\u53ca\u5b83\u5982\u4f55\u5141\u8bb8JAX\u5728\u52a0\u901f\u5668\u4e0a\u5b9e\u73b0NoMPY\uff1b\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u53ea\u662f\u6211\u4eec\u5bf9JAX\u5b9a\u4e49\u7684\u4e00\u534a\u3002JAX\u4e0d\u4ec5\u4e3a\u5f3a\u5927\u7684\u79d1\u5b66\u8ba1\u7b97\u63d0\u4f9b\u4e86\u5de5\u5177\uff0c\u8fd8\u4e3a\u53ef\u7ec4\u5408\u7684\u51fd\u6570\u8f6c\u6362\u63d0\u4f9b\u4e86\u5de5\u5177\u3002\n\u7b80\u5355\u5730\u8bf4\uff0c\u51fd\u6570\u53d8\u6362\u662f\u4e00\u4e2a\u51fd\u6570\u4e0a\u7684\u8fd0\u7b97\u7b26\uff0c\u5176\u8f93\u51fa\u662f\u53e6\u4e00\u4e2a\u51fd\u6570\u3002\u5982\u679c\u6211\u4eec\u5bf9\u6807\u91cf\u503c\u51fd\u6570f\uff08x\uff09\u4f7f\u7528\u68af\u5ea6\u51fd\u6570\u53d8\u6362\uff0c\u90a3\u4e48\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u5411\u91cf\u503c\u51fd\u6570f&#39\uff1b\uff08x\uff09 \u5b83\u7ed9\u51fa\u4e86\u51fd\u6570\u5728f\uff08x\uff09\u57df\u4e2d\u4efb\u610f\u70b9\u7684\u68af\u5ea6\u3002\nJAX\u4e3a\u6b64\u7c7b\u529f\u80fd\u8f6c\u6362\u6574\u5408\u4e86\u4e00\u4e2a\u53ef\u6269\u5c55\u7cfb\u7edf\uff0c\u5e76\u6709\u56db\u4e2a\u5178\u578b\u7528\u6237\u611f\u5174\u8da3\u7684\u4e3b\u8981\u8f6c\u6362\uff1a\n\u8ba9\u6211\u4eec\u4f9d\u6b21\u770b\u770b\u8fd9\u4e9b\u8f6c\u53d8\uff0c\u5e76\u8ba8\u8bba\u5b83\u4eec\u7684\u539f\u56e0&#39\uff1b\u4f60\u592a\u6fc0\u52a8\u4eba\u5fc3\u4e86\u3002\n\u4e3a\u4e86\u80fd\u591f\u8bad\u7ec3\u673a\u5668\u5b66\u4e60\u6a21\u578b\uff0c\u9700\u8981\u80fd\u591f\u6267\u884c\u53cd\u5411\u4f20\u64ad\u3002\u4e0eTensorFlow\u6216Pytork\u901a\u8fc7\u5728\u8ba1\u7b97\u56fe\u4e2d\u53cd\u5411\u4f20\u64ad\u6765\u8ba1\u7b97\u635f\u5931\u51fd\u6570\u5728\u67d0\u4e00\u70b9\u7684\u68af\u5ea6\u4e0d\u540c\uff0cJAX grad\uff08\uff09\u51fd\u6570\u53d8\u6362\u8f93\u51fa\u68af\u5ea6\u51fd\u6570\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u5176\u57df\u4e2d\u7684\u4efb\u4f55\u70b9\u5bf9\u5176\u8fdb\u884c\u8ba1\u7b97\u3002\nJAX\u4e2d\u7684\u81ea\u52a8\u533a\u5206\u529f\u80fd\u975e\u5e38\u5f3a\u5927\uff0c\u8fd9\u90e8\u5206\u6e90\u4e8eJAX\u5728\u201c\u4f55\u5904\u201d\u53ef\u4ee5\u8ba1\u7b97\u68af\u5ea6\u65b9\u9762\u7684\u7075\u6d3b\u6027\u3002\u4f7f\u7528grad\uff08\uff09\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u672c\u673aPython\u548cNumPy\u51fd\u6570[6]\u8fdb\u884c\u533a\u5206\uff0c\u4f8b\u5982\u5faa\u73af\u3001\u5206\u652f\u3001\u9012\u5f52\u3001\u95ed\u5305\u548c\u201cPyTrees\u201d\uff08\u4f8b\u5982\u5b57\u5178\uff09\u3002\n\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\u2014\u2014\u6211\u4eec\u5c06\u7528Python\u63a7\u5236\u6d41\u5b9a\u4e49\u4e00\u4e2a\u7ecf\u8fc7\u4fee\u6b63\u7684\u7acb\u65b9\u4f53\u51fd\u6570f\uff08x\uff09=abs\uff08x3\uff09\u3002\u8fd9\u4e2a\u5b9e\u73b0\u663e\u7136\u4e0d\u662f\u8ba1\u7b97\u6548\u7387\u6700\u9ad8\u7684\u65b9\u6cd5\uff0c\u4f46\u5b83\u5e2e\u52a9\u6211\u4eec\u5f3a\u8c03grad\uff08\uff09\u5982\u4f55\u901a\u8fc7\u539f\u751fPython\u63a7\u5236\u6d41\u548c\u5d4c\u5957\u5728\u6761\u4ef6\u4e2d\u7684\u5faa\u73af\u5de5\u4f5c\u3002\ndef_\u7acb\u65b9\u4f53\uff08x\uff09\uff1a\u5982\u679cx&lt\uff1b0.\uff1a\u5bf9\u4e8e\u8303\u56f4\uff083\uff09\u4e2d\u7684i:r*=xr=-r\u5176\u4ed6\uff1a\u5bf9\u4e8e\u8303\u56f4\uff083\uff09\u4e2d\u7684i:r*=x\u8fd4\u56dergradient_\u51fd\u6570=grad\uff08\u77eb\u6b63\u7684_\u7acb\u65b9\u4f53\uff09\u6253\u5370\uff08f&#34\uff1bx=2f\uff08x\uff09={\u77eb\u6b63\u7684_\u7acb\u65b9\u4f53\uff082.\uff09}f&#39\uff1b\uff08x\uff09 =3*x^2={gradient_\u51fd\u6570\uff082.\uff09}&#34;)\u6253\u5370\uff08f&#34\uff1bx=-3F\uff08x\uff09={\u6b63\u65b9\u4f53\uff08-3.\uff09}f&#39\uff1b\uff08x\uff09 =-3*x^2={gradient_\u51fd\u6570\uff08-3.\uff09}&#34;)\nx=2f\uff08x\uff09=8.0f&#39\uff1b\uff08x\uff09 =3*x^2=12.0x=-3f\uff08x\uff09=27.0f&#39\uff1b\uff08x\uff09 =-3*x^2=-27.0\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728x=2\u548cx=-3\u65f6\u8ba1\u7b97\u51fd\u6570\u53ca\u5176\u5bfc\u6570\u65f6\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u9884\u671f\u7684\u7ed3\u679c\u3002\n\u901a\u8fc7\u91cd\u590d\u5e94\u7528grad\uff08\uff09\uff0cJAX\u53ef\u4ee5\u8f7b\u677e\u533a\u5206\u4efb\u4f55\u987a\u5e8f\u3002\n#\u5bf9\u4e8ex&gt\uff1b=0:f\uff08x\uff09=x^3=&gt\uff1bf&#39\uff1b\uff08x\uff09 =3*x^2=&gt\uff1bf&#39&#39;\uff08x\uff09 =3*2*x=&gt\uff1bf&#39&#39;&#39;\uff08x\uff09 =6third_deriv=grad\uff08grad\uff08grad\uff08grad\uff08rectived_cube\uff09\uff09\uff09\u8868\u793a\u8303\u56f4\uff085\uff09\u4e2d\u7684i\uff1a\u6253\u5370\uff08third_deriv\uff08float\uff08i\uff09\uff09\uff09\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u51fd\u6570\u7684\u4e09\u9636\u5bfc\u6570\u7684\u51e0\u4e2a\u8f93\u5165\u6c42\u503c\u5f97\u5230f&#39\u7684\u6052\u5b9a\u9884\u671f\u8f93\u51fa&#39;&#39;\uff08x\uff09 =6\u3002\n\u4ece\u66f4\u4e00\u822c\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5feb\u901f\u3001\u7b80\u5355\u5730\u83b7\u53d6\u591a\u4e2a\u5bfc\u6570\u7684\u80fd\u529b\u5bf9\u4e8e\u6df1\u5ea6\u5b66\u4e60\u4ee5\u5916\u7684\u8bb8\u591a\u66f4\u4e00\u822c\u7684\u8ba1\u7b97\u9886\u57df\u90fd\u6709\u5b9e\u9645\u7528\u9014\uff0c\u4f8b\u5982\u52a8\u529b\u7cfb\u7edf\u7684\u7814\u7a76\u3002\n\u6b63\u5982\u60a8\u6240\u6599\uff0cgrad\uff08\uff09\u91c7\u7528\u6807\u91cf\u503c\u51fd\u6570\u7684\u68af\u5ea6\uff0c\u8fd9\u610f\u5473\u7740\u5c06\u6807\u91cf/\u5411\u91cf\u6620\u5c04\u5230\u6807\u91cf\u7684\u51fd\u6570\u3002\u8fd9\u79cd\u51fd\u6570\u7684\u68af\u5ea6\u5bf9\u4e8e\u53cd\u5411\u4f20\u64ad\u975e\u5e38\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u901a\u8fc7\u4ece\uff08\u6807\u91cf\uff09\u635f\u5931\u51fd\u6570\u53cd\u5411\u4f20\u64ad\u6765\u66f4\u65b0\u6a21\u578b\u6743\u91cd\u6765\u8bad\u7ec3\u6a21\u578b\u3002\n\u867d\u7136grad\uff08\uff09\u5bf9\u4e8e\u5404\u79cd\u9879\u76ee\u6765\u8bf4\u90fd\u8db3\u591f\u4e86\uff0c\u4f46\u5b83\u5e76\u4e0d\u662fJAX\u53ef\u4ee5\u6267\u884c\u7684\u552f\u4e00\u4e00\u79cd\u5dee\u5f02\u5316\u7c7b\u578b\u3002\n\u5bf9\u4e8e\u5c06\u5411\u91cf\u6620\u5c04\u5230\u5411\u91cf\u7684\u5411\u91cf\u503c\u51fd\u6570\uff0c\u4e0e\u68af\u5ea6\u7c7b\u4f3c\u7684\u662f\u96c5\u53ef\u6bd4\u77e9\u9635\u3002\u901a\u8fc7\u51fd\u6570\u8f6c\u6362jacfwd\uff08\uff09\u548cjacrev\uff08\uff09\uff0cJAX\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff0c\u5f53\u5728\u57df\u4e2d\u7684\u67d0\u4e2a\u70b9\u6c42\u503c\u65f6\uff0c\u8be5\u51fd\u6570\u5c06\u751f\u6210\u96c5\u53ef\u6bd4\u77e9\u9635\u3002\ndef\u6620\u5c04\uff08v\uff09\uff1ax=v[0]y=v[1]z=v[2]\u8fd4\u56dejnp\u3002\u6570\u7ec4\uff08[x*x\uff0cy*z]\uff09#3\u4e2a\u8f93\u5165\uff0c2\u4e2a\u8f93\u51fa#[d/dx x^2\uff0cd/dy x^2\uff0cd/dz x^2]#[d/dx y*z\uff0cd/dy*z\uff0cd/dz y*z]#[2*x\uff0c0\uff0c0]#[0\uff0cz\uff0cy]f=jax\u3002jacfwd\uff08\u6620\u5c04\uff09v=jnp\u3002\u6570\u7ec4\uff08[4,5,9.]\uff09\uff09\u5370\u5237\u54c1\uff08f\uff08v\uff09\uff09\n\u4f8b\u5982\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u96c5\u53ef\u6bd4\u77e9\u9635\uff0c\u4ee5\u4fbf\u66f4\u6709\u6548\u5730\u8ba1\u7b97\u51fd\u6570\u76f8\u5bf9\u4e8e\u6570\u636e\u77e9\u9635\u4e2d\u6bcf\u4e2a\u57fa\u51c6\u7684\u6743\u91cd\u77e9\u9635\u7684\u68af\u5ea6\u3002\n\u4ece\u6df1\u5ea6\u5b66\u4e60\u7684\u89d2\u5ea6\u6765\u770b\uff0cJAX\u6700\u4ee4\u4eba\u5174\u594b\u7684\u4e00\u4e2a\u65b9\u9762\u53ef\u80fd\u662f\uff0c\u5b83\u4f7f\u8ba1\u7b97\u9ed1\u68ee\u4eba\u53d8\u5f97\u6781\u5176\u7b80\u5355\u548c\u9ad8\u6548\u3002\u7531\u4e8eXLA\uff0cJAX\u53ef\u4ee5\u6bd4PyTrac\u8ba1\u7b97Hessian\u7684\u901f\u5ea6\u5feb\u5f97\u591a\uff0c\u8fd9\u4f7f\u5f97\u5b9e\u73b0\u9ad8\u9636\u4f18\u5316\u6280\u672f\u5982AdHessian\u66f4\u52a0\u5b9e\u7528\u3002\u8fd9\u4e00\u4e8b\u5b9e\u672c\u8eab\u5c31\u8db3\u4ee5\u4e3a\u4e00\u4e9b\u4ece\u4e1a\u8005\u63d0\u4f9b\u4f7f\u7528JAX\u7684\u7406\u7531\u3002\n\u6700\u6162\u7684\u8dd1\u6b65\u6bd4\u6700\u5feb\u7684\u8dd1\u957f8.14\u500d\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u6b63\u5728\u7f13\u5b58\u4e2d\u95f4\u7ed3\u679c\u300210\u6b21\u5faa\u73af\uff0c\u6700\u4f735\u6b21\uff1a\u6bcf\u6b21\u5faa\u73af16.3\u6beb\u79d2\n\u5982\u6211\u4eec\u6240\u89c1\uff0c\u8ba1\u7b97\u5927\u7ea6\u9700\u898116.3\u6beb\u79d2\u3002Let&#39\uff1b\u8ba9\u6211\u4eec\u5728JAX\u4e2d\u5c1d\u8bd5\u540c\u6837\u7684\u8ba1\u7b97\uff1a\n\u6700\u6162\u7684\u8dd1\u6b65\u6bd4\u6700\u5feb\u7684\u8dd1\u957f47.27\u500d\u3002\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u6b63\u5728\u7f13\u5b58\u4e2d\u95f4\u7ed3\u679c\u30021000\u5708\uff0c\u6700\u4f735\u5708\uff1a\u6bcf\u57081.55\u6beb\u79d2\nJAX\u751a\u81f3\u53ef\u4ee5\u8ba1\u7b97\u96c5\u53ef\u6bd4\u77e2\u91cf\u79ef\u548c\u96c5\u53ef\u6bd4\u77e2\u91cf\u79ef\u3002\u8003\u8651\u5149\u6ed1\u6d41\u5f62\u4e4b\u95f4\u7684\u5149\u6ed1\u6620\u5c04\u3002JAX\u53ef\u4ee5\u8ba1\u7b97\u8fd9\u4e2a\u6620\u5c04\u7684\u63a8\u8fdb\uff0c\u5c06\u4e00\u4e2a\u6d41\u5f62\u4e0a\u7684\u70b9\u7684\u5207\u5411\u91cf\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u6d41\u5f62\u4e0a\u7684\u5207\u5411\u91cf\u3002\n\u5982\u679c\u8fd9\u90e8\u5206\u4ee4\u4eba\u56f0\u60d1\u6216\u4e0d\u719f\u6089\uff0c\u4e0d\u8981\u62c5\u5fc3\uff01\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u4e3b\u9898\uff0c\u53ef\u80fd\u4e0e\u5178\u578b\u7528\u6237\u65e0\u5173\u3002\u6211\u4eec\u6307\u51fa\u8fd9\u79cd\u80fd\u529b\u7684\u5b58\u5728\u53ea\u662f\u4e3a\u4e86\u5f3a\u8c03JAX\u4e3a\u5404\u79cd\u5404\u6837\u7684\u8ba1\u7b97\u4efb\u52a1\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u57fa\u7840\u3002\u4f8b\u5982\uff0c\u5411\u524d\u63a8\u5728\u5fae\u5206\u51e0\u4f55\u9886\u57df\u5f88\u91cd\u8981\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528JAX\u6765\u7814\u7a76\u3002\n\u901a\u8fc7\u6570\u5b66\u8f6c\u6362\u5230\u66f4\u5b9e\u9645\u7684/\u8ba1\u7b97\u8f6c\u6362\uff0c\u6211\u4eec\u5f97\u5230\u4e86vmap\uff08\uff09\u3002\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u60f3\u5728\u4e00\u7ec4\u5bf9\u8c61\u4e0a\u91cd\u590d\u5e94\u7528\u4e00\u4e2a\u51fd\u6570\u7684\u60c5\u51b5\u3002\u8ba9\u6211\u4eec\u8003\u8651\uff0c\u4f8b\u5982\uff0c\u6dfb\u52a0\u4e24\u4e2a\u6570\u5b57\u5217\u8868\u7684\u4efb\u52a1\u3002\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\u7684\u7b80\u5355\u65b9\u6cd5\u662f\u7b80\u5355\u5730\u4f7f\u7528for\u5faa\u73af\uff0c\u5373\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u7b2c\u4e8c\u4e2a\u5217\u8868\u4e2d\u7684\u76f8\u5e94\u503c\uff0c\u5e76\u5c06\u7ed3\u679c\u5199\u5165\u4e00\u4e2a\u65b0\u5217\u8868\u3002\n\u901a\u8fc7vmap\uff08\uff09\u8f6c\u6362\uff0cJAX\u6267\u884c\u76f8\u540c\u7684\u8ba1\u7b97\uff0c\u4f46\u5c06\u5faa\u73af\u5411\u4e0b\u63a8\u5230\u57fa\u672c\u64cd\u4f5c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u6027\u80fd[6]\uff0c\u4ece\u800c\u751f\u6210\u8ba1\u7b97\u7684\u81ea\u52a8\u77e2\u91cf\u5316\u7248\u672c\u3002\n\u5f53\u7136\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5217\u8868\u5b9a\u4e49\u4e3aJAX\u6570\u7ec4\uff0c\u5e76\u4f7f\u7528JAX&#39\uff1bs\u6570\u7ec4\u6dfb\u52a0\uff0c\u4f46\u7531\u4e8e\u8bb8\u591a\u539f\u56e0\uff0cvmap\uff08\uff09\u4ecd\u7136\u5f88\u6709\u7528\u3002\n\u4e00\u4e2a\u57fa\u672c\u539f\u56e0\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u66f4\u591a\u7684\u672c\u5730Python\u4ee3\u7801\u7f16\u5199\u64cd\u4f5c\uff0c\u7136\u540e\u4f7f\u7528vmap\uff08\uff09\u7f16\u5199\u64cd\u4f5c\uff0c\u4ece\u800c\u751f\u6210\u9ad8\u5ea6Pythonic\u7684\u3001\u53ef\u80fd\u66f4\u53ef\u8bfb\u7684\u4ee3\u7801\u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u5f53\u7136\u662f\u63a8\u5e7f\u5230\u6ca1\u6709\u7b80\u5355\u7684\u77e2\u91cf\u5316\u66ff\u4ee3\u65b9\u6848\u6765\u5b9e\u73b0\u7684\u60c5\u51b5\u3002\n\u5206\u5e03\u5f0f\u8ba1\u7b97\u4e00\u5e74\u6bd4\u4e00\u5e74\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u8fd9\u5728\u6df1\u5ea6\u5b66\u4e60\u4e2d\u5c24\u5176\u5982\u6b64\uff0c\u6b63\u5982\u4e0b\u56fe\u6240\u793a\uff0cSOTA\u6a21\u578b\u5df2\u7ecf\u53d1\u5c55\u5230\u7edd\u5bf9\u5929\u6587\u6570\u5b57\u3002\u4f8b\u5982\uff0cGPT-4\u5c06\u6709\u8d85\u8fc7100\u4e07\u4ebf\u4e2a\u53c2\u6570\u3002\n\u6211\u4eec&#39\uff1b\u4ee5\u4e0a\u8ba8\u8bba\u4e86\u5982\u4f55\u5229\u7528XLA\uff0cJAX\u53ef\u4ee5\u8f7b\u677e\u5730\u8ba1\u7b97\u52a0\u901f\u5668\uff0c\u4f46JAX\u4e5f\u53ef\u4ee5\u5bb9\u6613\u5730\u7528\u591a\u4e2a\u52a0\u901f\u5668\u8ba1\u7b97\uff0c\u7528\u5355\u4e2a\u547d\u4ee4PMAP-\uff08\uff09\u6765\u6267\u884cSPMD\u7a0b\u5e8f\u7684\u5206\u5e03\u5f0f\u8bad\u7ec3\u3002\n\u8003\u8651\u5411\u91cf\u77e9\u9635\u4e58\u6cd5\u7684\u4f8b\u5b50\u3002\u5047\u8bbe\u6211\u4eec\u901a\u8fc7\u987a\u5e8f\u8ba1\u7b97\u5411\u91cf\u4e0e\u77e9\u9635\u6bcf\u4e00\u884c\u7684\u70b9\u79ef\u6765\u6267\u884c\u8fd9\u4e2a\u8ba1\u7b97\u3002\u6211\u4eec\u9700\u8981\u4e00\u6b21\u4e00\u4e2a\u5730\u901a\u8fc7\u786c\u4ef6\u5b8c\u6210\u8fd9\u4e9b\u8ba1\u7b97\u3002\n\u4f7f\u7528JAX\uff0c\u53ea\u9700\u5c06\u64cd\u4f5c\u5305\u88c5\u5728pmap\uff08\uff09\u4e2d\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u8ba1\u7b97\u5206\u5e03\u52304\u4e2aTPU\u4e2d\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5728\u6bcf\u4e2aTPU\u4e0a\u540c\u65f6\u6267\u884c\u4e00\u4e2a\u70b9\u79ef\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u8ba1\u7b97\u901f\u5ea6\uff08\u5bf9\u4e8e\u5927\u578b\u8ba1\u7b97\uff09\u3002\n\u8fd9\u91cc\u975e\u5e38\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5bf9\u6211\u4eec\u7684\u4ee3\u7801\u6240\u505a\u7684\u66f4\u6539\u662f\u5982\u6b64\u4e4b\u5c0f\u3002\u7531\u4e8eJAX\u662f\u5efa\u7acb\u5728XLA\u4e0a\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8ba1\u7b97\u6620\u5c04\u5230\u786c\u4ef6\u3002\n\u5373\u65f6\u7f16\u8bd1\uff08Just-in-time\uff0c\u7b80\u79f0JIT\u7f16\u8bd1\uff09\u662f\u4e00\u79cd\u6267\u884c\u4ecb\u4e8e\u89e3\u91ca\u548c\u63d0\u524d\u7f16\u8bd1\uff08AoT\uff09\u4e4b\u95f4\u7684\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u91cd\u8981\u7684\u4e8b\u5b9e\u662f\uff0cJIT\u7f16\u8bd1\u5668\u4f1a\u5728\u8fd0\u884c\u65f6\u5c06\u4ee3\u7801\u7f16\u8bd1\u6210\u5feb\u901f\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u4ee3\u4ef7\u662f\u7b2c\u4e00\u6b21\u8fd0\u884c\u7684\u901f\u5ea6\u8f83\u6162\u3002\n\u5728JIT\u7f16\u8bd1\u4e2d\uff0c\u4ee3\u7801\u662f\u5728\u8fd0\u884c\u65f6\u7f16\u8bd1\u7684\uff0c\u56e0\u6b64\u5728\u7a0b\u5e8f\u7b2c\u4e00\u6b21\u8fd0\u884c\u65f6\uff0c\u7531\u4e8e\u9700\u8981\u7f16\u8bd1\u548c\u6267\u884c\u4ee3\u7801\uff0c\u56e0\u6b64\u4f1a\u6709\u4e00\u4e9b\u521d\u59cb\u5f00\u9500\u3002\u56e0\u6b64\uff0cAoT\u7f16\u8bd1\u5728\u7b2c\u4e00\u6b21\u901a\u8fc7\u65f6\u53ef\u80fd\u4f1a\u4f18\u4e8eJIT\uff1b\u7136\u800c\uff0c\u5bf9\u4e8e\u91cd\u590d\u6267\u884c\uff0cJIT\u7f16\u8bd1\u7684\u7a0b\u5e8f\u5c06\u4f7f\u7528\u4e4b\u524d\u7f16\u8bd1\u7684\u7f13\u5b58\u4ee3\u7801\u6765\u5feb\u901f\u6267\u884c\u3002JIT\u7f16\u8bd1\u7684\u7a0b\u5e8f\u5728\u7406\u8bba\u4e0a\u53ef\u4ee5\u6bd4AoT\u7f16\u8bd1\u7684\u540c\u4e00\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u56e0\u4e3aJIT\u7f16\u8bd1\u5668\u53ef\u4ee5\u5229\u7528\u4ee3\u7801\u5728\u5c06\u5728\u5176\u4e0a\u6267\u884c\u7684\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u7f16\u8bd1\u7684\u4e8b\u5b9e\uff0c\u4f7f\u7528\u672c\u5730\u4fe1\u606f\u8fdb\u884c\u4f18\u5316\u3002\n\u7ebf\u6761\u4f1a\u53d8\u5f97\u6a21\u7cca\u3002\u4f8b\u5982\uff0c\u5f53Python\u8fd0\u884c\u65f6\uff0c\u5b83\u88ab\u7f16\u8bd1\u6210\u5b57\u8282\u7801\uff0c\u7136\u540e\u7531Python\u7684\u865a\u62df\u673a\uff08\u4f8b\u5982CPython\uff09\u89e3\u91ca\u5b57\u8282\u7801\uff0c\u6216\u8005\u7f16\u8bd1\u6210\u673a\u5668\u7801\uff08PyPy\uff09\u3002\u5982\u679c\u8fd9\u4e9b\u7ec6\u8282\u4ee4\u4eba\u56f0\u60d1\uff0c\u8bf7\u4e0d\u8981&#39\uff1b\u522b\u62c5\u5fc3\u3002\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cJIT\u7f16\u8bd1JAX\u7a0b\u5e8f\u5141\u8bb8\u5b83\u4eec\u4ee5\u6781\u5feb\u7684\u901f\u5ea6\u6267\u884c\u3002\nXLA\u539f\u8bed\u662fJIT\u7f16\u8bd1\u7684\uff0c\u4f46\u662fJAX\u4e5f\u5141\u8bb8JIT\u5c06\u81ea\u5df1\u7684Python\u51fd\u6570\u7f16\u8bd1\u6210XLA\u4f18\u5316\u5185\u6838\uff0c\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u88c5\u9970\u5668JIT\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u672c\u8eabJITE\uff08\uff091\u3002\nJIT\u5c06\u4e00\u6b21\u4e00\u6b21\u7684\u64cd\u4f5c\u8c03\u5ea6\u5230GPU\u4e2d\uff0c\u800c\u4e0d\u662f\u4f7f\u7528XLA\u5c06\u64cd\u4f5c\u5e8f\u5217\u7f16\u8bd1\u6210\u4e00\u4e2a\u5185\u6838\uff0c\u7ed9\u51fa\u4e86\u51fd\u6570\u7684\u7aef\u5230\u7aef\u7f16\u8bd1\u7684\u3001\u9ad8\u6548\u7684XLA\u5b9e\u73b0[6 ] [7 ]\u3002\n\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u503c\u77e9\u9635\u7684\u524d\u4e09\u6b21\u5e42\u4e4b\u548c\u3002\u6211\u4eec\u5728\u4e00\u4e2a5000 x 5000\u7684\u77e9\u9635\u4e0a\u8ba1\u7b97\u8fd9\u4e2a\u51fd\u6570\u4e09\u6b21\u2014\u2014\u4e00\u6b21\u4f7f\u7528NumPy\uff0c\u4e00\u6b21\u4f7f\u7528JAX\uff0c\u4e00\u6b21\u4f7f\u7528JIT\u7f16\u8bd1\u7248\u672c\u7684JAX\u3002\u9996\u5148\uff0c\u6211\u4eec\u5728CPU\u4e0a\u8fdb\u884c\u5b9e\u9a8c\uff1a\ndef fn\uff08x\uff09\uff1a\u8fd4\u56dex+x*x+x*x*xx_np=np\u3002\u968f\u673a\u7684\u5170\u767b\uff085000\uff0c5000\uff09\u3002aType\uff08dtype=&#39\uff1bfloat32&#39\uff1b\uff09x_jnp=jnp\u3002\u6570\u7ec4\uff08x_np\uff09%timeit-n5-r5 fn\uff08x_np\uff09%timeit fn\uff08x_jnp\uff09\u3002\u963b\u585e_\uff0c\u76f4\u5230_ready\uff08\uff09jitted=jit\uff08fn\uff09jitted\uff08x_jnp\uff09%timeit jitted\uff08x_jnp\uff09\u3002\u963b\u585e_\u76f4\u5230_\u5c31\u7eea\uff08\uff09\n\u8b66\u544a\uff1aabsl\uff1a\u672a\u627e\u5230GPU/TPU\uff0c\u6b63\u5728\u8fd4\u56deCPU\u3002\uff08\u5c06TF_CPP_MIN_LOG_LEVEL\u8bbe\u7f6e\u4e3a0\uff0c\u7136\u540e\u91cd\u65b0\u8fd0\u884c\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002\uff095\u5708\uff0c\u6700\u4f735:151\u6beb\u79d2/\u570810\u5708\uff0c\u6700\u4f735:109\u6beb\u79d2/\u5708100\u5708\uff0c\u6700\u4f735:17.7\u6beb\u79d2/\u5708\n\u6211\u4eec\u770b\u5230JAX\u6bd4NumPy\u5feb\u8fd140%\uff0c\u5f53\u6211\u4eec\u5bf9\u51fd\u6570\u8fdb\u884cJIT\u65f6\uff0c\u6211\u4eec\u53d1\u73b0JAX\u6bd4NumPy\u5feb8.5\u500d\u3002\u8fd9\u4e9b\u7ed3\u679c\u5df2\u7ecf\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u8ba9\u6211\u4eec&#39\uff1b\u63d0\u9ad8\u8d4c\u6ce8\uff0c\u8ba9JAX\u5728TPU\u4e0a\u8ba1\u7b97\uff1a\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u770b\u5230JAX\u6bd4NumPy\u5feb9.3\u500d\uff0c\u5982\u679c\u6211\u4eec\u90fd\u5728TPU\u4e0aJIT\u51fd\u6570\u548c\u8ba1\u7b97\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0JAX\u6bd4NumPy\u5feb57\u500d\u3002\n\u5f53\u7136\uff0c\u901f\u5ea6\u7684\u5927\u5e45\u63d0\u9ad8\u5e76\u975e\u6ca1\u6709\u4ee3\u4ef7\u3002JAX\u5bf9JIT\u5141\u8bb8\u4f7f\u7528\u54ea\u4e9b\u51fd\u6570\u8fdb\u884c\u4e86\u9650\u5236\uff0c\u5c3d\u7ba1\u901a\u5e38\u5141\u8bb8\u4f7f\u7528\u53ea\u6d89\u53ca\u4e0a\u8ff0NumPy\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u6b64\u5916\uff0c\u901a\u8fc7Python\u63a7\u5236\u6d41\u8fdb\u884cJITting\u4e5f\u6709\u4e00\u4e9b\u9650\u5236\uff0c\u56e0\u6b64&#39\uff1b\u5728\u7f16\u5199\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\n\u5728\u4f7f\u7528jit\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u786e\u4fdd\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\u5141\u8bb8\u4f7f\u7528\u5b83\u3002\u5982\u679c\u4f60\u4e0d\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u4f46\u65e0\u8bba\u5982\u4f55\u90fd\u8981\u5c1d\u8bd5\u4f7f\u7528jit\uff0c\u4f60\u8981\u4e48\u4f1a\u6536\u5230\u8ba9\u4f60\u56f0\u60d1\u7684\u9519\u8bef\u6d88\u606f\uff08\u5982\u679c\u4f60\u5e78\u8fd0\u7684\u8bdd\uff09\uff0c\u8981\u4e48\u4f1a\u6536\u5230\u672a\u7ecf\u8ddf\u8e2a\u4e14\u4e0d\u53d7\u6b22\u8fce\u7684\u526f\u4f5c\u7528\uff0c\u8fd9\u4e9b\u526f\u4f5c\u7528\u4f1a\u6084\u6084\u5730\u5f71\u54cd\u7ed3\u679c\u7684\u51c6\u786e\u6027\uff08\u5982\u679c\u4f60\u4e0d\u5e78\u8fd0\u7684\u8bdd\uff09\u3002\nJAX\u67094\u79cd\u4e3b\u8981\u7684\u51fd\u6570\u8f6c\u6362\u2014\u2014grad\uff08\uff09\u7528\u4e8e\u81ea\u52a8\u533a\u5206\u51fd\u6570\uff0cvmap\uff08\uff09\u7528\u4e8e\u81ea\u52a8\u77e2\u91cf\u5316\u64cd\u4f5c\uff0cpmap\uff08\uff09\u7528\u4e8eSPMD\u7a0b\u5e8f\u7684\u5e76\u884c\u8ba1\u7b97\uff0cjit\uff08\uff09\u7528\u4e8e\u5c06\u51fd\u6570\u8f6c\u6362\u4e3ajit\u7f16\u8bd1\u7248\u672c\u3002\u8fd9\u4e9b\u8f6c\u6362\uff08\u5927\u90e8\u5206\uff09\u662f\u53ef\u7ec4\u5408\u7684\uff0c\u975e\u5e38\u5f3a\u5927\uff0c\u5e76\u4e14\u6709\u53ef\u80fd\u4f7f\u60a8\u7684\u7a0b\u5e8f\u52a0\u901f\u51e0\u500d\u3002\n\u6211\u4eec\u770b\u5230\u4e86XLA\u548c\u57fa\u672cJAX\u8f6c\u6362\u5982\u4f55\u6709\u53ef\u80fd\u663e\u8457\u5730\u63d0\u9ad8\u7a0b\u5e8f\u7684\u6027\u80fd\u3002\u867d\u7136JAX\u975e\u5e38\u5f3a\u5927\uff0c\u6709\u53ef\u80fd\u5728\u8bb8\u591a\u9886\u57df\u663e\u8457\u63d0\u9ad8\u751f\u4ea7\u7387\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u9700\u8981\u8c28\u614e\u3002\u7279\u522b\u662f\u5982\u679c\u60a8\u6b63\u5728\u8003\u8651\u4ecePyTorch\u6216TensorFlow\u8f6c\u79fb\u5230JAX\uff0c\u60a8\u5e94\u8be5\u4e86\u89e3JAX\u7684\u57fa\u672c\u7406\u5ff5\u4e0e\u4e24\u4e2a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u622a\u7136\u4e0d\u540c\u3002\u6211\u4eec&#39\uff1b\u6211\u73b0\u5728\u6765\u8c08\u8c08\u4e3b\u8981\u7684\u533a\u522b\u3002\nJAX\u7684\u4e3b\u8981\u533a\u522b\u5728\u4e8e\uff0c\u5b83\u7684\u8f6c\u6362\u548c\u7f16\u8bd1\u53ea\u9002\u7528\u4e8e\u529f\u80fd\u7eaf\u7cb9\u7684\u7a0b\u5e8f\u3002\u867d\u7136\u5982\u679c\u4f60\u53ea\u662f\u60f3\u4f7f\u7528JAX\u5728GPU\u6216TPU\u4e0a\u8fdb\u884cNumPy\u8ba1\u7b97\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u53ef\u80fd\u5e76\u4e0d\u91cd\u8981\uff0c\u4f46\u5b83\u4e0e\u5927\u91cf\u6f5c\u5728\u7684JAX\u5e94\u7528\u7a0b\u5e8f\u6709\u5173\uff0c\u56e0\u6b64\u4f60\u5e94\u8be5\u786e\u4fdd\u5728\u5f00\u59cb\u4e4b\u524d\u7406\u89e3\u91c7\u7528\u8fd9\u79cd\u8303\u5f0f\u7684\u542b\u4e49\u3002\n\u7eaf\u51fd\u6570\u7684\u4e2d\u5fc3\u7279\u5f81\u662f\u5f15\u7528\u900f\u660e\u6027\u2014\u2014\u7eaf\u51fd\u6570\u53ef\u4ee5\u968f\u65f6\u7528\u5176\u6c42\u503c\u7ed3\u679c\u66ff\u6362\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u5206\u8fa8\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u5728\u7ed9\u5b9a\u76f8\u540c\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u5e94\u59cb\u7ec8\u5bf9\u7a0b\u5e8f\u5177\u6709\u76f8\u540c\u7684\u6548\u679c\uff0c\u800c\u4e0d\u7ba1\u5b83\u662f\u5728\u4ec0\u4e48\u65f6\u95f4\u6216\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c\u7684\u3002\n\u8fd9\u5728\u539f\u5219\u4e0a\u542c\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u786e\u5b9e\u5b58\u5728\n......", "note_en": "Since  JAX hit the scene in late 2018, it has been steadily growing in popularity, and for good reason. DeepMind  announced in 2020 that it is using JAX to accelerate its research, and a growing number of publications and projects from Google Brain and others are using JAX.  With all of this buzz, it seems like JAX is the next big Deep Learning framework, right?\n Wrong. In this article we\u2019ll clarify what JAX is (and isn\u2019t), why you should care (or shouldn&#39;t, but you probably should), and whether you should (or shouldn\u2019t) use it.\n  If you&#39;re already familiar with JAX and want to skip the benchmarks, you can jump ahead to our recommendations on when to use it  here\n  It may be best to start off with what JAX is  not. JAX is  not a Deep Learning framework or library, and it is not designed to ever be a Deep Learning framework or library in and of itself. In a sentence,  JAX is a numerical computing library which incorporates composable function transformations [ 1]. As we can see, Deep Learning is just a small subset of what JAX can do:\n   In short -   speed. This is the universal aspect of JAX that is relevant for any use case.\n Let&#39;s sum the first three powers of a matrix (element-wise) with both NumPy and JAX. First up is our NumPy implementation:\n   We find that this calculation takes about  478 ms. Next, we implement this calculation with JAX:\n   JAX performs this calculation in only  5.54 ms - over  86 times faster than NumPy.\n    Things are not quite as simple as &#34;use JAX and your programs will be 86 times faster&#34;, but there are still a ton of reasons to use JAX. Since JAX provides a general foundation for scientific computing, it will be useful to different people in different fields for different reasons. Fundamentally,  if you are in  any field relating to scientific computing,  you should care about JAX.\n  1. NumPy on Accelerators - NumPy is one of the fundamental packages for scientific computing with Python, but it is compatible only with CPU. JAX provides an implementation of NumPy (with a near-identical API) that works on  both GPU  and TPU extremely easily. For many users, this  alone is sufficient to justify the use of JAX.\n 2. XLA - XLA, or Accelerated Linear Algebra, is a whole-program optimizing compiler, designed specifically for linear algebra. JAX is built on XLA, raising the computational-speed ceiling significantly [ 1].\n 3. JIT - JAX allows you to transform your  own functions into just-in-time (JIT) compiled versions using XLA [ 7]. This means that you can increase computation speed by potentially  orders of magnitude by adding a simple function decorator to your computational functions.\n 4. Auto-differentiation - The JAX documentation refers to JAX as &#34;Autograd and XLA, brought together&#34; [ 1]. The ability to automatically differentiate is crucial in many areas of scientific computing, and JAX provides several powerful auto-differentiation tools.\n 5. Deep Learning - While not a Deep Learning framework itself, JAX certainly provides a more-than-sufficient foundation for Deep Learning purposes. There are many libraries built on top of JAX that seek to build out Deep Learning capabilities, including  Flax,  Haiku, and  Elegy. We even highlighted JAX as a \u201cframework\u201d to watch in our recent  PyTorch vs TensorFlow article,  recommending its use for TPU-based Deep Learning research. JAX&#39;s highly efficient computations of Hessians are also relevant for Deep Learning, given that they make higher-order optimization techniques much more feasible.\n 6. General Differentiable Programming Paradigm - While it is certainly possible to use JAX in order to build and train Deep Learning models, it also provides a framework for  general Differentiable Programming. This means that JAX can exploit  prior knowledge in a given field, built up through decades of research, by using a model-based Machine Learning approach to solving a problem.\n     XLA, or Accelerated Linear Algebra, lies at the foundation of what makes JAX so powerful. Developed by Google, XLA is a domain-specific, graph-based, just-in-time compiler [ 2] for linear algebra that can significantly increase computation speed through a variety of whole-program optimizations [ 3].\n In one example [ 2], XLA boosts BERT training speed by almost  7.3 times from a  computational standpoint alone, but lowered memory usage as a result of using XLA  also enables gradient accumulation, resulting in a staggering  12 times increase to computational throughput.\n  XLA is baked into the very DNA of JAX - from their logos alone you can see how much the successes of JAX rely on XLA.\n   Answering exactly why XLA is such a big deal can yield a very technical (and long) discussion. For our purposes, it suffices to say that XLA is important because it  significantly increases execution speed and lowers memory usage by  fusing low-level operations.\n XLA doesn\u2019t precompile individual operations into compute kernels, but instead compiles the  entire graph into a sequence of compute kernels generated  specifically for that graph.\n  This approach increases speed by not performing needless kernel launches, as well as taking advantage of local information for optimization  [3]. Since XLA doesn\u2019t materialize intermediate arrays in an operation sequence (instead keeping values in GPU registers and streaming them  [3], using XLA also reduces memory consumption.\n  This lowered memory consumption yields a  further speed boost given that (i) memory is often the limiting factor in computing with GPUs, and (ii) XLA does not waste time performing extraneous data movement.\n While operation fusion (or  kernel fusion) is the flagship feature of XLA, it should be noted that XLA also performs a  ton of other whole-program optimizations, like specializing to known tensor shapes (allowing for more aggressive constant propagation), analyzing and scheduling memory usage to eliminate intermediate storage buffers [ 4], performing memory layout operations, and only computing subsets of requested values if not all of them are being returned [ 5].\n Since all JAX operations are implemented in terms of operations in XLA, JAX has a unified language for computation that allows it to run seamlessly across CPU, TPU, and GPU, with library calls getting just-in-time compiled and executed [ 1].\n  If none of the jargon above makes sense to you, don\u2019t worry - just know that XLA is a very fast compiler which lies at the foundation of what makes JAX uniquely powerful and simple to use on a diverse range of hardware.\n    So far, we\u2019ve talked about XLA and how it allows JAX to implement NumPy on accelerators; but recall that this was only one half of our definition of JAX. JAX provides tools not only for powerful scientific computing, but also for  composable function transformations.\n Quite simply, a function transformation is an  operator on a function whose output is  another function. If we use the gradient function transformation on a scalar-valued function  f(x), then we get a vector-valued function  f &#39;(x) which gives the gradient of the function at any point in the domain of  f(x).\n  JAX incorporates an extensible system for such function transformations, and has four main transformations of interest to the typical user:\n  Let\u2019s take a look at each of these transformations in turn and talk about why they&#39;re so exciting.\n  To be able to train Machine Learning models, one needs to be able to perform backpropagation. Rather than compute the gradient of the loss function at a certain  point as TensorFlow or PyTorch does by backpropagating through the computation graph, the JAX  grad() function transformation outputs the gradient  function, which can then be evaluated at any point in its domain.\n  Automatic differentiation in JAX is  extremely powerful, which stems partially from JAX\u2019s flexibility in \u201cwhere\u201d you can compute gradients. With  grad(), you can  differentiate through native Python and NumPy functions [ 6], such as loops, branches, recursion, closures, and \u201c PyTrees\u201d (e.g. dictionaries).\n Let\u2019s look at an example - we\u2019ll define a rectified cube function  f(x) = abs(x 3) with Python control flow. This implementation is obviously not the most computationally efficient approach, but it helps us highlight how  grad() works through native Python control flow and loops nested in conditionals.\n def rectified_cube(x): r = 1 if x &lt; 0.: for i in range(3): r *= x r = -r else: for i in range(3): r *= x return rgradient_function = grad(rectified_cube)print(f&#34;x = 2 f(x) = {rectified_cube(2.)} f&#39;(x) = 3*x^2 = {gradient_function(2.)}&#34;)print(f&#34;x = -3 f(x) = {rectified_cube(-3.)} f&#39;(x) = -3*x^2 = {gradient_function(-3.)}&#34;)\n x = 2 f(x) = 8.0 f&#39;(x) = 3*x^2 = 12.0x = -3 f(x) = 27.0 f&#39;(x) = -3*x^2 = -27.0\n We can see that we get the expected results when evaluating the function and its derivative at  x=2 and \u00a0 x=-3 .\n  JAX makes it easy to differentiate to  any order by the repeated application of  grad().\n # for x &gt;= 0: f(x)=x^3 =&gt; f&#39;(x)=3*x^2 =&gt; f&#39;&#39;(x)=3*2*x =&gt; f&#39;&#39;&#39;(x)=6third_deriv = grad(grad(grad(rectified_cube)))for i in range(5): print(third_deriv(float(i)))\n  We can see that the evaluation of several inputs to the third derivative of our function gives the constant expected output of  f &#39;&#39;&#39;(x)=6 .\n From a more general perspective, the ability to take multiple derivatives in a fast and easy manner is of practical use to many more general computational fields beyond Deep Learning, such as the study of Dynamical Systems.\n   As you would expect,  grad() takes the  gradient of a  scalar-valued function, meaning a function which maps scalars/vectors to scalars. The gradient of such a function is useful for e.g. backpropagation, where we train a model by backpropagating from a (scalar) loss function to update our model weights.\n While  grad() is sufficient for a variety of projects, it is not the only type of differentiation JAX can perform.\n  For  vector-valued  functions which map vectors to vectors, the analogue to the gradient is the  Jacobian. With the function transformations  jacfwd() and  jacrev(), JAX returns a function which yields the Jacobian when evaluated at a point in the domain.\n def mapping(v): x = v[0] y = v[1] z = v[2] return jnp.array([x*x, y*z])# 3 inputs, 2 outputs# [d/dx x^2 , d/dy x^2, d/dz x^2]# [d/dx y*z , d/dy y*z, d/dz y*z]# [2*x , 0, 0]# [0 , z, y]f = jax.jacfwd(mapping)v = jnp.array([4., 5., 9.])print(f(v))\n  You can alternatively use a Jacobian, for example, in order to more-efficiently compute the gradient of a function with respect to a weight matrix for each datum in a data matrix.\n  Perhaps one of the most exciting aspects of JAX from a Deep Learning perspective is that it makes computing  Hessians exceedingly  easy  and efficient. Because of XLA,  JAX can compute Hessians remarkably faster than PyTorch, which makes it much more practical to implement  higher-order optimization  techniques like  AdaHessian. This fact  alone could be justification enough to use JAX for some practitioners.\n   The slowest run took 8.14 times longer than the fastest. This could mean that an intermediate result is being cached.10 loops, best of 5: 16.3 ms per loop\n As we can see, the calculation takes about  16.3 ms. Let&#39;s try the same calculation in JAX:\n  The slowest run took 47.27 times longer than the fastest. This could mean that an intermediate result is being cached.1000 loops, best of 5: 1.55 ms per loop\n    JAX can even compute  Jacobian-vector products and  vector-Jacobian products. Consider a smooth map between smooth manifolds. JAX can compute the pushforward of this map, mapping tangent vectors at points on the one manifold to tangent vectors on another.\n  If this part is confusing or unfamiliar, don\u2019t worry! This is an advanced topic and probably not (in and of itself) of relevance or interest to the typical user. We point out the existence of this capability simply to highlight the fact that JAX provides a  very powerful foundation for a  wide variety of computational tasks. For example, pushforwards are important in the field of  Differential Geometry, which we might use JAX to study.\n  Moving past the mathematical to a more practical/computational transformation, we arrive at  vmap(). Consider the case in which we want to repeatedly apply a function to a set of objects. Let\u2019s consider, for example, the task of adding two lists of numbers. The naive way to implement such an operation is to simply utilize a  for loop - i.e. for each number in the first list, add it to the corresponding value in the second list, and write the result to a new list.\n  With the  vmap() transformation, JAX performs the same computation but  pushes the loop down to primitive operations for better performance [ 6], resulting in an automatically vectorized version of the computation.\n  Of course, we could\u2019ve simply defined our lists as JAX arrays and used JAX&#39;s array addition, but  vmap() is still useful for many reasons.\n One basic reason is that we can write operations in more native Python code and then  vmap() it, leading to highly Pythonic and possibly more readable code. Another reason is of course  generalizing to the cases in which there is  no simple vectorized alternative to implement.\n  Distributed computing has become increasingly important year-over-year, and this holds especially true in Deep Learning, where SOTA models have grown to absolutely astronomical sizes as you can see in the graph below.  GPT-4, for example, will have over  100  trillion parameters.\n  We&#39;ve discussed above how, thanks to XLA, JAX can compute on  an accelerator easily, but JAX can also compute with  multiple accelerators easily,  performing distributed training of SPMD programs  with a single command -  pmap().\n Consider the example of vector-matrix multiplication. Let\u2019s say we are performing this computation by sequentially computing the dot product of the vector with each row of the matrix. We would need to push these computations through our hardware one at a time.\n  With JAX, we can  easily distribute these computations across 4 TPUs by  simply wrapping our operation in  pmap(). This allows us to concurrently perform one dot product on each TPU, significantly increasing our computation speed (for large computations).\n  What is very noticeable here is how absolutely minimal the change to our code was. Since JAX is built on XLA, we can change how we map computations to hardware with ease.\n   Just-in-time, or JIT compilation, is a method of executing code that lies between interpretation and ahead-of-time (AoT) compilation. The important fact is that a  JIT-compiler will compile code at runtime into a fast executable, at the cost of a slower first run.\n With JIT compilation, code is compiled at runtime, so there is some  initial overhead during the first run of a program given that the code needs to be compiled  and executed. AoT compilation therefore may outperform JIT on a first pass; however, for repeated execution, a JIT-compiled program will use the  previously-compiled, cached code to execute very quickly.  A JIT-compiled program can theoretically run even  faster than the same program if it were AoT compiled given that JIT compilers can use local information for increased optimization by exploiting the fact that the code is compiled on the same machine it will be executed on.\n Lines can get blurry. For example, when Python is run, it is compiled into bytecode, which is then either interpreted by Python\u2019s virtual machine (e.g. CPython), or compiled to machine code (PyPy). If these details are confusing, don&#39;t worry. The important point is that  JIT-compiling JAX programs allows them to execute extremely quickly.\n  XLA primitives are JIT compiled, but JAX  also lets you  JIT compile your own Python functions into XLA-optimized kernels, either as a function decorator  @jit or as a function itself  jit() [ 1].\n Rather than dispatch kernels to a GPU one operations at a time, JIT will  compile the sequence of operations together into one kernel using XLA, giving an end-to-end compiled, efficient XLA implementation  of your function [ 6][ 7].\n To provide an example, let\u2019s define a function which computes the sum of the first three powers of a matrix of values. We compute this function on a 5000 x 5000 matrix three times - once with NumPy, once with JAX, and once with JAX on a JIT-compiled version of the function. First, we perform the experiment on CPU:\n def fn(x): return x + x*x + x*x*xx_np = np.random.randn(5000, 5000).astype(dtype=&#39;float32&#39;)x_jnp = jnp.array(x_np)%timeit -n5 -r5 fn(x_np)%timeit fn(x_jnp).block_until_ready()jitted = jit(fn)jitted(x_jnp)%timeit jitted(x_jnp).block_until_ready()\n WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)5 loops, best of 5: 151 ms per loop10 loops, best of 5: 109 ms per loop100 loops, best of 5: 17.7 ms per loop\n  We see that  JAX is almost 40% faster than NumPy, and when we JIT the function we find that  JAX is an insane 8.5 times faster than NumPy. These results are already impressive, but let&#39;s up the ante and let JAX compute on a TPU:\n  In this case, we see that JAX is a staggering  9.3 times faster than NumPy, and if we both JIT the function and compute on TPU we see find that JAX is an  obscene  57 times faster than NumPy.\n This drastic increase in speed is, of course, not without a cost. JAX places restrictions on which functions are permissible to JIT, although functions involving only NumPy operations like the one above are generally permissible. Further, there are limitations regarding JITting through Python control flow, so you&#39;ll have to keep this in mind when writing your functions.\n Before using  jit, you should make sure that you understand how it works and in what scenarios its use is permissible. If you do not have this understanding but try to use  jit anyway, you will either get error messages that are confusing to you (if you\u2019re lucky), or  untracked and undesirable side-effects that can quietly throw off the accuracy of your results (if you\u2019re unlucky).\n   JAX has 4 main function transformations -  grad() to automatically differentiate a function,  vmap() to automatically vectorize operations,  pmap() for parallel computation of SPMD programs, and  jit() to transform a function into a JIT-compiled version. These transformations are (mostly) composable, very powerful, and have the potential to expedite your programs several times over.\n   We saw above how XLA and fundamental JAX transformations have the potential to significantly increase the performance of your programs. While JAX is very powerful and has the potential to dramatically improve productivity in a great many areas, its use requires some care. Especially if you are considering moving from  PyTorch or TensorFlow to JAX, you should understand that JAX\u2019s underlying philosophy is quite different from the two Deep Learning frameworks. We&#39;ll talk about the main difference now.\n  The main characteristic that differentiates JAX is that its  transformations and compilation are designed to work only for functionally pure programs. While this fact may not be relevant if you just want to use JAX to put NumPy computations on GPU or TPU, it is relevant to a huge number of potential JAX applications, so you should make sure you understand the implications of adopting this paradigm before getting started.\n The central characteristic of a pure function  is that of  referential transparency - a pure function can be  replaced with the result of its evaluation at any time, and the program cannot tell the difference. The function should always have the same effect on the program given the same inputs  regardless of the time or context in which it is executed.\n This sounds simple in principle, but there certainly exists\n......", "posttime": "2022-02-17 02:09:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "jax", "title": "2022\u5e74\u4f7f\u7528JAX", "title_en": "Using JAX in 2022", "transed": 1, "url": "https://www.assemblyai.com/blog/why-you-should-or-shouldnt-be-using-jax-in-2022/", "via": "", "real_tags": ["jax"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073664, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bde\u751f\u4e8eLinux\u5185\u6838\u7684Bcachefs\u6587\u4ef6\u7cfb\u7edf&#39\uff1bs\u7684\u5757\u7f13\u5b58\u4ee3\u7801\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\u5df2\u7ecf\u975e\u5e38\u6210\u719f\u3002\u73b0\u5728\u52302022\u5e74\uff0c\u6587\u4ef6\u7cfb\u7edf\u7684\u6838\u5fc3\u57fa\u7840\u662f&#34\uff1b\u975e\u5e38\u63a5\u8fd1\u5b8c\u6210&#34\uff1b\u5e76\u4e14\u6709\u671b\u5728\u8fd9\u4e2a\u65e5\u5386\u5e74\u8fdb\u5165Linux\u5185\u6838\u3002\n\u8fd9\u91cc&#39\uff1b\u5e0c\u671bBcachefs\u57282022\u5e74\u6210\u529f\u6210\u719f\u5230\u53ef\u4ee5\u5728Linux\u5185\u6838\u4e2d\u8fdb\u884c\u7ef4\u62a4\u7684\u72b6\u6001\uff0c\u8fd9\u5c06\u6709\u52a9\u4e8e\u6269\u5c55\u6587\u4ef6\u7cfb\u7edf\u7684\u6d4b\u8bd5\u4eba\u5458\u5e93\uff0c\u5e76\u4f7f\u6587\u4ef6\u7cfb\u7edf\u80fd\u591f\u66f4\u597d\u5730\u8bc1\u660e\u81ea\u5df1\u3002", "note_en": "The  Bcachefs file-system that was born out of the Linux kernel&#39;s block cache code has over the past few years matured greatly. Now in 2022 the core fundamentals of the file-system are &#34;pretty close to done&#34; and will hopefully be mainlined this calendar year into the Linux kernel.\r   Bcachefs has been in development since the mid-2010s and  aims for speed while having ZFS/Btrfs-like features. It&#39;s been under heavy feature development and with time picking up features such as  Btrfs-like snapshots or referred to as   [email\u00a0protected]$$ snapshots, among other promising feature work to allow it to compete as a next-gen file-system. \r    Lead Bcachefs developer Kent Overstreet posted this morning an update on  the LKML about the state of this open-source file-system:\r  It&#39;s been a long road going from bcache, and starting with what was essentially a prototype for a new filesystem, and turning it into a real (scalable, robust, full featured) filesystem.\r   Over the past few years, we&#39;ve added reflink, subvolumes and snapshots. I&#39;m particularly proud of how snapshots turned out - it&#39;s roughly a versioned btree approach, and it&#39;s scalable and fast, even fsck is O(number of keys of metadata), not O(number of snapshots). I&#39;ve got it up to a million snapshots in a test VM.\r   The bigger thing though is that the core fundamentals are pretty close to done - replacing all the &#34;periodically walk the world&#34; algorigthms with real persistent data structures that scale. A big allocator rewrite is about to land, and after that will be backpointers - to fix copygc scanning.\r   Things are in flux lately with all the allocator work, but I&#39;m hoping once that settles down and I&#39;ve worked through the backlog of bug reports and performance regressions, we might be ready for upstreaming sometime this year...\n  Here&#39;s to hoping that Bcachefs will successfully mature to a state of readiness for mainlining in the Linux kernel in 2022, which should help in expanding the pool of testers of the file-system and allow the file-system to better prove itself.", "posttime": "2022-02-17 02:01:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,bcachefs,ready,\u6587\u4ef6\u7cfb\u7edf", "title": "\u4eca\u5e74\uff0cBcachefs\u53ef\u80fd\u5df2\u7ecf\u4e3aLinux\u7684\u5347\u7ea7\u505a\u597d\u4e86\u51c6\u5907", "title_en": "Bcachefs Might Be Ready for Upstreaming in Linux This Year", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Bcachefs-2022-Hopes", "via": "", "real_tags": ["linux", "bcachefs", "ready", "\u6587\u4ef6\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073662, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u970d\u6069\u4f2f\u683c\u548c\u79d1\u6069\u7684\u5de5\u4f5c\u8bc1\u660e\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u4e3b\u65b9\u7a0b\u2014\u2014\u666e\u9002\u5bc6\u5ea6\u6cdb\u51fd\u7684\u5b58\u5728\u3002\u8be5\u65b9\u7a0b\u5c06\u4ee5\u7535\u5b50\u6c64\u4e3a\u4f8b\uff0c\u8ba1\u7b97\u5176\u80fd\u91cf\uff0c\u5f15\u5bfc\u7269\u7406\u5b66\u5bb6\u627e\u5230\u6700\u81ea\u7136\u7684\u7535\u5b50\u6392\u5217\uff08\u80fd\u91cf\u6700\u4f4e\u7684\u7535\u5b50\uff09\u3002\u4ece\u539f\u7406\u4e0a\u8bb2\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u63cf\u8ff0\u4efb\u4f55\u7cfb\u7edf\uff0c\u4ece\u7845\u7816\u5230\u6c34\u5206\u5b50\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u5b83\u662f\u901a\u7528\u7684\u3002\n\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\u8fd9\u4e2a\u7b49\u5f0f\u662f\u4ec0\u4e48\u6837\u5b50\u3002\n\u4e0d\u4e45\uff0cKohn\u548c\u53e6\u4e00\u4f4d\u7269\u7406\u5b66\u5bb6Lu Jeu Sham\u9996\u6b21\u6210\u529f\u5730\u5199\u51fa\u4e86\u4e00\u4e2a\u5b9e\u7528\u7684\u5bc6\u5ea6\u6cdb\u51fd\u3002\u4e00\u4e2a\u7cbe\u786e\u7684\u51fd\u6570\u6355\u6349\u7535\u5b50\u884c\u4e3a\u7684\u6240\u6709\u7ec6\u5fae\u65b9\u9762\u5e94\u8be5\u662f\u96be\u4ee5\u5f62\u5bb9\u7684\u590d\u6742\uff0c\u6240\u4ee5\u4ed6\u4eec\u628a\u5b83\u4e00\u5206\u4e3a\u4e8c\u3002\u4e0a\u534a\u573a\u662f\u4ed6\u4eec\u77e5\u9053\u600e\u4e48\u505a\u7684\u90e8\u5206\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u7535\u5b50\u7684\u80fd\u91cf\uff0c\u8fd9\u4e9b\u7535\u5b50\u53ea\u80fd\u5e73\u5747\u611f\u77e5\u5f7c\u6b64\u3002\u5176\u4ed6\u4e00\u5207\u2014\u2014\u62dc\u5360\u5ead\u91cf\u5b50\u6548\u5e94\u548c\u975e\u5c40\u57df\u76f8\u4e92\u4f5c\u7528\u4ea7\u751f\u7684\u591a\u4f59\u80fd\u91cf\u2014\u2014\u90fd\u8fdb\u5165\u4e86\u4e0b\u534a\u90e8\u5206\uff1a\u4e00\u4e2a\u88ab\u79f0\u4e3a\u4ea4\u6362\u548c\u5173\u8054\u6cdb\u51fd\u7684\u6a21\u7cca\u56e0\u5b50\u3002\n\u5c3c\u987f\u8bf4\uff0c\u4ed6\u4eec\u201c\u628a\u6211\u4eec\u4e0d\u4e86\u89e3\u7684\u529f\u80fd\u7b80\u5316\u4e3a\u4e00\u5c0f\u90e8\u5206\u3002\u201d\u3002\n\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u79d1\u5b66\u5bb6\u4eec\u4ee5\u79d1\u6069\u548c\u6c99\u59c6\u7684\u5de5\u4f5c\u4e3a\u57fa\u7840\uff0c\u7528\u8d8a\u6765\u8d8a\u806a\u660e\u7684\u65b9\u6cd5\u6765\u4f30\u7b97\u798f\u5409\u56e0\u5b50\uff0c\u5bc6\u5ea6\u6cdb\u51fd\u6210\u4e3a\u4e86\u7406\u89e3\u7535\u5b50\u7684\u4e8b\u5b9e\u4e0a\u7684\u65b9\u6cd5\u3002\u7814\u7a76\u4eba\u5458\u5229\u7528\u5b83\u4eec\u6765\u9884\u6d4b\u539f\u5b50\u6355\u83b7\u6216\u91ca\u653e\u7535\u5b50\u7684\u53ef\u80fd\u6027\u3001\u5206\u5b50\u632f\u52a8\u7684\u65b9\u5f0f\uff08\u597d\u5947\u53f7\u63a2\u6d4b\u5668\u7528\u6765\u5bfb\u627e\u706b\u661f\u4e0a\u751f\u547d\u8ff9\u8c61\u7684\u4fe1\u606f\uff09\u3001\u6676\u683c\u4e2d\u539f\u5b50\u7684\u6392\u5217\u3001\u6750\u6599\u4e2d\u7684\u58f0\u901f\u7b49\u7b49\u3002\u8be5\u7406\u8bba\u6e90\u6e90\u4e0d\u65ad\u7684\u5e94\u7528\u4e3a\u79d1\u6069\u8d62\u5f97\u4e861998\u5e74\u7684\u8bfa\u8d1d\u5c14\u5956\u3002\n\u5f53\u7814\u7a76\u4eba\u5458\u8981\u6c42DFT\u5177\u6709\u66f4\u9ad8\u7684\u7cbe\u5ea6\u65f6\uff0c\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u8003\u8651\u5230\u6cdb\u51fd\u7684\u4ea4\u6362\u9879\u548c\u5173\u8054\u9879\u4e2d\u6240\u5305\u542b\u7684\u65e0\u77e5\uff0c\u4ece\u800c\u4f7f\u8349\u56fe\u7684\u7ec6\u8282\u66f4\u7b26\u5408\u666e\u9002\u5bc6\u5ea6\u6cdb\u51fd\u3002\n\u4eba\u5de5\u667a\u80fd\u516c\u53f8DeepMind\u7684\u7406\u8bba\u5316\u5b66\u5bb6\u963f\u4f26\u00b7\u79d1\u6069\uff08Aron Cohen\uff09\u662f\u5bfb\u627e\u795e\u79d8\u5b87\u5b99\u65b9\u7a0b\u5f0f\u7684\u4eba\u4e4b\u4e00\u3002\u4e3a\u4e86\u624e\u6839\u4e8e\u7406\u8bba\u91cf\u5b50\u5316\u5b66\u7684\u62bd\u8c61\u9886\u57df\uff0c\u4ed6\u624b\u8fb9\u653e\u7740\u4e00\u4e2a\u84dd\u8272\u76843D\u6253\u5370\u684c\u9762\u73a9\u5177\u3002\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5851\u6599\u5e78\u8fd0\u997c\uff0c\u5b83\u7684\u66f2\u7ebf\u52fe\u52d2\u51fa\u4e86\u4e00\u4e2a\u5177\u6709\u666e\u904d\u6027\u7684\u51fd\u6570\u7684\u786e\u5207\u5f62\u72b6\uff0c\u4f46\u53ea\u9002\u7528\u4e8e\u6700\u7b80\u5355\u7684\u7cfb\u7edf\uff1a\u5b83\u53ef\u4ee5\u7528\u6765\u63ed\u793a\u4eba\u4eec\u53ef\u80fd\u60f3\u77e5\u9053\u7684\u5173\u4e8e\u4efb\u610f\u4e24\u4e2a\u539f\u5b50\u4e4b\u95f4\u5171\u4eab\u7684\u4e24\u4e2a\u7535\u5b50\u7684\u4efb\u4f55\u4fe1\u606f\u3002\u4e0d\u8fc7\uff0c\u5b83\u63d0\u9192\u4ed6\uff0c\u53ef\u80fd\u5b58\u5728\u4e00\u79cd\u53ef\u4ee5\u5904\u7406\u4efb\u610f\u6570\u91cf\u7684\u7535\u5b50\u548c\u539f\u5b50\u7684\u6cdb\u51fd\u3002\u201c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u7684\u662f\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u201d\u4ed6\u8bf4\uff1b\u53ea\u662f\u8981\u590d\u6742\u5f97\u591a\u3002\u201c\u8fd9\u662f\u771f\u7684\u3002\u201d\nDFT\u7814\u7a76\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u627e\u5230\u66f4\u7cbe\u786e\u7684\u6cdb\u6cdb\u51fd\u8fd1\u4f3c\u3002\u5766\u666e\u5c14\u5927\u5b66\uff08Temple University\uff09\u7684\u7269\u7406\u5b66\u5bb6\u3001\u9886\u5148\u7684\u51fd\u6570\u5f00\u53d1\u4eba\u5458\u7ea6\u7ff0\u00b7\u73c0\u5fb7\uff08John Perdew\uff09\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u8fd9\u9879\u5de5\u4f5c\u7684\u5e26\u5934\u4eba\u3002\u4ed6\u5c06\u901a\u5f80\u901a\u7528\u529f\u80fd\u7684\u9053\u8def\u63cf\u8ff0\u4e3a\u722c\u68af\u5b50\u4e0a\u7684\u68af\u7ea7\u3002\u5728\u6bcf\u4e00\u4e2a\u68af\u7ea7\u4e0a\uff0c\u7269\u7406\u5b66\u5bb6\u90fd\u4f1a\u7ed9\u51fd\u6570\u6dfb\u52a0\u65b0\u7684\u6210\u5206\u3002\u6700\u7b80\u5355\u7684\u914d\u6599\u5c31\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7535\u5b50\u7096\u83dc\u7684\u539a\u5ea6\u3002\u5728\u4e0b\u4e00\u4e2a\u9636\u6bb5\uff0c\u529f\u80fd\u8fd8\u8003\u8651\u4e86\u539a\u5ea6\u5728\u4e0d\u540c\u4f4d\u7f6e\u7684\u53d8\u5316\u901f\u5ea6\uff0c\u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u66f4\u5e7f\u9614\u7684\u89c6\u91ce\uff0c\u5e76\u4f7f\u529f\u80fd\u66f4\u7cbe\u786e\u3002\nPerdew\u7b56\u7565\u7684\u4e00\u4e2a\u5173\u952e\u90e8\u5206\u662f\u4f7f\u7528\u7269\u7406\u63a8\u7406\u6765\u786e\u5b9a\u597d\u7684\u8fd1\u4f3c\u5fc5\u987b\u9075\u5b88\u7684\u67d0\u4e9b\u6570\u5b66\u7279\u6027\uff0c\u5373\u201c\u7cbe\u786e\u7ea6\u675f\u201d\u66f4\u9ad8\u7684\u68af\u7ea7\u6ee1\u8db3\u66f4\u591a\u7684\u7ea6\u675f\u6761\u4ef6\uff0c\u7814\u7a76\u4eba\u5458\u5fc5\u987b\u66f4\u52aa\u529b\u5730\u5bfb\u627e\u7b26\u5408\u8fd9\u4e9b\u7ea6\u675f\u6761\u4ef6\u7684\u65b9\u7a0b\u5f0f\u3002\nPerdew\u7684\u56e2\u961f\u4e8e1999\u5e74\u5f00\u59cb\u7814\u7a76\u6df7\u5408\u4e86\u516d\u79cd\u6210\u5206\u7684\u4e09\u7ea7\u529f\u80fd\uff0c2015\u5e74\uff0c\u4ed6\u53d1\u5e03\u4e86\u4e00\u6b3e\u540d\u4e3aSCAN\u7684\u6700\u65b0\u529f\u80fd\u3002\u8fd9\u662f\u4ed6\u7b2c\u516b\u6b21\u5c1d\u8bd5\uff0c\u4e5f\u662f\u7b2c\u4e00\u6b21\u9075\u5b88\u4e0e\u7b2c\u4e09\u7ea7\u76f8\u5173\u7684\u6240\u670917\u4e2a\u5df2\u77e5\u7ea6\u675f\u3002\u626b\u63cf\u65e2\u9002\u7528\u4e8e\u5206\u5b50\uff0c\u4e5f\u9002\u7528\u4e8e\u56fa\u4f53\uff0c\u5df2\u8bc1\u660e\u662f\u8fc4\u4eca\u4e3a\u6b62\u53d1\u73b0\u7684\u6700\u6709\u80fd\u529b\u7684\u666e\u9002\u6cdb\u51fd\u8fd1\u4f3c\u4e4b\u4e00\u3002\n\u201c\u7b2c\u4e09\u7ea7\u6cdb\u51fd\u6709\u975e\u5e38\u4e30\u5bcc\u7684\u53ef\u80fd\u6027\uff0c\u201d\u73c0\u5fb7\u8bf4\u3002\u201c\u5f04\u6e05\u695a\u4ec0\u4e48\u662f\u91cd\u8981\u7684\uff0c\u4ec0\u4e48\u662f\u6709\u6548\u7684\u9700\u8981\u65f6\u95f4\u3002\u201d\n\u968f\u7740\u73c0\u5fb7\u7528\u7269\u7406\u76f4\u89c9\u6539\u8fdb\u5bc6\u5ea6\u6cdb\u51fd\u7684\u827a\u672f\uff0c\u4e00\u573a\u9769\u547d\u6b63\u5728\u915d\u917f\u4e4b\u4e2d\u3002\u7b97\u6cd5\u80fd\u5426\u627e\u51fa\u7535\u5b50\u884c\u4e3a\u4e2d\u8fc7\u4e8e\u5fae\u5999\u7684\u6a21\u5f0f\uff0c\u8ba9\u4eba\u7c7b\u65e0\u6cd5\u7528\u6570\u5b66\u65b9\u6cd5\u8bb0\u5f55\u4e0b\u6765\uff1f\n2012\u5e74\uff0c\u4f2f\u514b\u548c\u4ed6\u7684\u5408\u4f5c\u8005\u9996\u6b21\u5c1d\u8bd5\u5c06\u673a\u5668\u5b66\u4e60\u5e94\u7528\u4e8e\u4e00\u7ec4\u7b80\u5316\u7684\u7535\u5b50\u3002\u4ed6\u7684\u4e00\u7ef4\u539f\u578b\u4fc3\u4f7f\u4ed6\u548c\u5176\u4ed6\u7814\u7a76\u5c0f\u7ec4\u7814\u7a76\u7b97\u6cd5\u662f\u5426\u80fd\u8ba9\u7814\u7a76\u4eba\u5458\u66f4\u4e0a\u4e00\u5c42\u697c\u3002\n\u4e00\u4e2a\u7a81\u7834\u51fa\u73b0\u57282021\u5e74\u521d\uff0c\u5f53Burke\u548c\u5408\u4f5c\u8005\u5efa\u7acb\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u7684\u73a9\u5177\u95ee\u9898\uff0c\u53ef\u4ee5\u8ddf\u8e2a\u5bc6\u5ea6\u8bef\u5dee\uff0c\u4ee5\u53ca\u80fd\u6e90\u9519\u8bef\u7684\u65b9\u5f0f\uff0c\u5927\u591a\u6570\u4ee5\u524d\u7684\u5c1d\u8bd5\u5ffd\u7565\u3002\u5362\u68ee\u5821\u5927\u5b66\u7684\u4e00\u4f4d\u7406\u8bba\u5316\u5b66\u5bb6Alexandre Tkatchenko\u8bf4\uff1a\u201c\u4e3a\u4e86\u83b7\u5f97\u4e00\u79cd\u65e2\u80fd\u7ed9\u4f60\u5e26\u6765\u5bc6\u5ea6\u53c8\u80fd\u7ed9\u4f60\u5e26\u6765\u80fd\u91cf\u7684\u529f\u80fd\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u975e\u5e38\u7075\u6d3b\u7684\u4f53\u7cfb\u7ed3\u6784\u3002\u201d\u201c\u7528\u4f60\u7684\u5934\u8111\u5199\u4e00\u4e2a\u51fd\u6570\u5f62\u5f0f\u5e76\u4e0d\u5bb9\u6613\u3002\u201d\nStony Brook\u7684\u8d39\u5c14\u5357\u5fb7\u65af\u00b7\u585e\u62c9\uff08Fern\u00e1ndez Serra\uff09\u4f7f\u7528\u7c7b\u4f3c\u7684\u7b56\u7565\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\uff0c\u8be5\u7f51\u7edc\u5c06\u7814\u7a76\u4e00\u7cfb\u5217\u5206\u5b50\u548c\u80fd\u91cf\uff0c\u5e76\u641c\u7d22\u7b26\u5408\u5927\u591a\u6570\u5df2\u77e5\u7ea6\u675f\u6761\u4ef6\u7684\u7b2c\u4e09\u7ea7\u51fd\u6570\uff0c\u57fa\u672c\u4e0a\u662f\u4f7f\u7528\u4e00\u53f0\u673a\u5668\u6765\u8ffd\u6eaf\u73c0\u5fb7\u7684\u8db3\u8ff9\u3002\n\u57282021\u79cb\u5b63\u7684\u7269\u7406\u8bc4\u8bbaB\u4e2d\uff0c\u5979\u548cSebastian Dick\u5728\u300a\u7269\u7406\u8bc4\u8bbaB\u300b\u4e2d\u62a5\u9053\uff0c\u7531\u6b64\u4ea7\u751f\u7684\u4ea4\u6362\u548c\u76f8\u5173\u529f\u80fd\u6027\u7684\u8282\u62cd\u626b\u63cf\u53ef\u4ee5\u5c06\u4e0d\u719f\u6089\u7684\u5206\u5b50\u7684\u80fd\u91cf\u9884\u6d4b\u5927\u7ea610%\u3002\u4f46\u8fd9\u4e00\u9002\u5ea6\u7684\u6536\u76ca\u8868\u660e\uff0c\u73c0\u5fb7\u7684\u5de5\u4f5c\u5df2\u7ecf\u63a5\u8fd1\u627e\u5230\u7b2c\u4e09\u4e2a\u9636\u68af\u7684\u4e0a\u9650\u3002\n\u8d39\u5c14\u5357\u5fb7\u65af\u00b7\u585e\u62c9\u8bf4\uff1a\u201c\u7269\u7406\u76f4\u89c9\u4e0d\u77e5\u4f55\u6545\u8017\u5c3d\u4e86\u4f60\u6240\u80fd\u8fbe\u5230\u7684\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u3002\u201d\u3002\u201cPerdew\u7684\u529f\u80fd\u771f\u7684\u5f88\u597d\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u3002\u201d\n\u722c\u5f97\u66f4\u9ad8\u9700\u8981\u66f4\u590d\u6742\u7684\u8f93\u5165\u2014\u2014\u4ee5\u53ca\u7406\u89e3\u8fd9\u4e9b\u8f93\u5165\u7684\u7b97\u6cd5\u3002\n\u5728\u75ab\u60c5\u7206\u53d1\u524d\u4e0d\u4e45\uff0cDeepMind\u7684\u7814\u7a76\u4eba\u5458\u5f81\u670d\u4e86\u68cb\u76d8\u6e38\u620f\u56f4\u68cb\uff0c\u6b63\u5728\u5bfb\u627e\u65b0\u7684\u6311\u6218\u3002\u4ed6\u4eec\u5bf9\u79d1\u5b66\u673a\u5668\u5b66\u4e60\u95ee\u9898\u7279\u522b\u611f\u5174\u8da3\uff0c\u79d1\u6069\u628a\u5b83\u4eec\u79f0\u4e3aDFT\u3002\u4ed6\u82b1\u4e86\u6570\u5e74\u65f6\u95f4\u7814\u7a76\u7b80\u5355\u7cfb\u7edf\u7684\u7cbe\u786e\u51fd\u6570\uff0c\u6bd4\u5982\u4ed6\u653e\u5728\u684c\u4e0a\u7684\u90a3\u4e2a\u3002\u4f46\u5b83\u4eec\u8fdc\u6ca1\u6709\u590d\u6742\u5230\u8db3\u4ee5\u63cf\u8ff0\u73b0\u5b9e\u4e16\u754c\u3002\n\u4ed6\u8bf4\uff1a\u201c\u60f3\u8981\u627e\u5230\u5bf9\u5316\u5b66\u6709\u7528\u7684\u4e1c\u897f\uff0c\u611f\u89c9\u662f\u4e00\u6761\u6f2b\u957f\u7684\u9053\u8def\u3002\u201d\u3002\nDFT\u7684\u4e00\u4e2a\u6838\u5fc3\u5f31\u70b9\u5c24\u5176\u4fb5\u8680\u4e86\u79d1\u6069\u3002\u7535\u6d41\u5bc6\u5ea6\u6cdb\u51fd\u901a\u5e38\u4f1a\u8fc7\u591a\u5730\u62b9\u53bb\u7535\u5b50\u3002\u5bf9\u4e8e\u4e0d\u5e73\u8861\u7684\u7cfb\u7edf\u6765\u8bf4\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c24\u5176\u7a81\u51fa\uff0c\u56e0\u4e3a\u7535\u5b50\u5e94\u8be5\u4e3b\u8981\u805a\u96c6\u5728\u4e00\u4e2a\u5206\u5b50\u4e0a\u3002DFT\u503e\u5411\u4e8e\u5c06\u7535\u5b50\u6c64\u66f4\u5747\u5300\u5730\u5206\u5e03\u5728\u4e24\u4e2a\u5206\u5b50\u4e0a\u3002\u4e00\u4e2a\u76f8\u5173\u7684\u95ee\u9898\u51fa\u73b0\u5728\u5316\u5b66\u53cd\u5e94\u4e2d\uff0c\u5f53DFT\u4e3a\u7c92\u5b50\u5408\u5e76\u548c\u5206\u79bb\u7ed9\u51fa\u9519\u8bef\u7684\u80fd\u91cf\u65f6\uff0c\u5373\u4f7f\u662f\u50cf\u6c22\u539f\u5b50\u8fd9\u6837\u7b80\u5355\u7684\u60c5\u51b5\u3002\u79d1\u6069\u8bf4\uff1a\u201c\u8fd9\u662f\u4e00\u5339\u4e3b\u529b\u9a6c\uff0c\u4f46\u6211\u77e5\u9053\u5b83\u6709\u8fd9\u4e9b\u5de8\u5927\u7684\u5931\u8d25\u3002\u201d\n\u4e3a\u4e86\u8bbe\u8ba1\u4ed6\u4eec\u7684\u4e0b\u4e00\u4ee3\u529f\u80fd\uff0c\u79d1\u6069\u548cDeepMind\u56e2\u961f\u9009\u62e9\u4e0d\u592a\u62c5\u5fc3\u6ee1\u8db3\u4e00\u957f\u4e32\u7269\u7406\u539f\u7406\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f1a\u4f9d\u8d56\u6570\u636e\uff0c\u5927\u91cf\u6570\u636e\u3002\u4ed6\u4eec\u5728\u6587\u732e\u4e2d\u641c\u5bfb\u6570\u5343\u4e2a\u5177\u6709\u5df2\u77e5\u80fd\u91cf\u7684\u5206\u5b50\u7684\u6570\u636e\u5e93\uff08\u4f7f\u7528\u859b\u5b9a\u8c14\u65b9\u7a0b\u6216\u7c7b\u4f3c\u65b9\u6cd5\u8fdb\u884c\u4e86\u5927\u91cf\u8ba1\u7b97\uff09\u3002\u7136\u540e\u4ed6\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f7f\u7528\u8d85\u7ea7\u8ba1\u7b97\u673a\u6765\u8ba1\u7b97\u6570\u767e\u4e2a\u989d\u5916\u5206\u5b50\u7684\u80fd\u91cf\u2014\u2014\u5176\u4e2d\u8bb8\u591a\u9700\u8981\u6570\u5929\u7684\u65f6\u95f4\u6765\u8ba1\u7b97\u3002\n\u5f53\u8be5\u56e2\u961f\u6536\u96c6\u4e86\u4e00\u4e2a\u8be6\u5c3d\u7684\u793a\u4f8b\u5206\u5b50\u5e93\u65f6\uff0c\u79d1\u6069\u548c\u5176\u4ed6\u5316\u5b66\u5bb6\u51b3\u5b9a\u4e86\u529f\u80fd\u6027\u5206\u5b50\u7684\u7ed3\u6784\u3002\n\u4ed6\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u8bf1\u4eba\u7684\u591a\u624d\u591a\u827a\u7684\u65b9\u6cd5\u3002\u7ecf\u8fc7\u591a\u5e74\u7684\u53cd\u590d\u8bd5\u9a8c\uff0c\u7814\u7a76\u4eba\u5458\u53d1\u73b0\u4e86\u4e00\u79cd\u4f30\u7b97\u90e8\u5206\u4ea4\u6362\u548c\u76f8\u5173\u51fd\u6570\u7684\u7279\u6b8a\u65b9\u6cd5\u3002\u5f53\u4e00\u4e2a\u529f\u80fd\u90e8\u4ef6\u768480%\u80fd\u91cf\u4ee5\u4e00\u79cd\u65b9\u5f0f\u8ba1\u7b97\uff0c\u53e6\u4e00\u79cd\u65b9\u5f0f\u768420%\u80fd\u91cf\u8ba1\u7b97\u65f6\uff0c\u6027\u80fd\u6709\u4e00\u4e2a\u6700\u4f73\u70b9\u3002\u957f\u671f\u4ee5\u6765\uff0c\u7814\u7a76\u4eba\u5458\u4e00\u76f4\u6000\u7591\u4e0b\u4e00\u6b65\u5c06\u662f\u8ba9\u5206\u5b50\u5468\u56f4\u768480/20\u6bd4\u4f8b\u5728\u70b9\u4e0e\u70b9\u4e4b\u95f4\u53d8\u5316\uff0c\u4f46\u6ca1\u6709\u4eba\u5b8c\u5168\u6210\u529f\u5730\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u4f2f\u514b\u57281998\u5e74\u4ecb\u7ecd\u4e86\u8fd9\u79cd\u51fd\u6570\u5f0f\uff0c\u4ed6\u8bf4\uff1a\u201c\u53ef\u80fd\u6709100\u7bc7\u8bba\u6587\uff0c\u4eba\u4eec\u5728\u5176\u4e2d\u4f7f\u7528\u8fd9\u79cd\u5f62\u5f0f\uff0c\u4f46\u4ed6\u4eec\u6ca1\u6709\u5236\u4f5c\u51fa\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684\u4e1c\u897f\u3002\u201d\u3002\u201c\u4e5f\u8bb8\u8fd9\u5bf9\u4e00\u4e2a\u4eba\u6765\u8bf4\u592a\u96be\u4e86\u3002\u201d\n\u51ed\u501f\u5927\u91cf\u7684\u793a\u4f8b\u5206\u5b50\u548cDeepMind\u56e2\u961f\u7684\u673a\u5668\u5b66\u4e60\u4e13\u4e1a\u77e5\u8bc6\uff0c\u8be5\u56e2\u961f\u7684\u795e\u7ecf\u7f51\u7edc\u80fd\u591f\u8bad\u7ec3\u51fa\u4e00\u79cd\u7075\u6d3b\u7684\u7b2c\u56db\u7ea7\u529f\u80fd\u3002\u4e0e\u626b\u63cf\u548c\u5176\u4ed6\u9876\u7ea7\u7ade\u4e89\u5bf9\u624b\u76f8\u6bd4\uff0c\u5b83\u80fd\u66f4\u597d\u5730\u4f30\u8ba1\u5927\u91cf\u5206\u5b50\u7684\u80fd\u91cf\uff0c\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u80fd\u66f4\u51c6\u786e\u5730\u653e\u7f6e\u7535\u5b50\uff0c\u66f4\u597d\u5730\u63cf\u8ff0\u5b83\u4eec\u7684\u81ea\u65cb\u3002\u8fd9\u4e00\u529f\u80fd\u88ab\u79f0\u4e3aDM21\uff0c\u662f\u7b2c\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u5316\u5b66\u952e\u65ad\u88c2\u548c\u5f62\u6210\u7684\u901a\u7528\u529f\u80fd\u300212\u67089\u65e5\uff0c\u8be5\u7ec4\u7ec7\u63cf\u8ff0\u4e86\u5b83\u4eec\u5728\u79d1\u5b66\u4e0a\u7684\u529f\u80fd\u3002\n\u201c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5408\u7406\u7684\u901a\u7528\u529f\u80fd\uff0c\u201d\u4f2f\u514b\u8bf4\uff0c\u4ed6\u6ca1\u6709\u53c2\u4e0e\u3002\u201c\u5982\u679c\u8fd9\u4e2a\u4e1c\u897f\u50cf\u5b83\u770b\u8d77\u6765\u90a3\u4e48\u597d\uff0c\u4e00\u5e74\u4e4b\u5185\u5c31\u4f1a\u6709\u6210\u5343\u4e0a\u4e07\u7684\u4eba\u5f00\u59cb\u4f7f\u7528\u5b83\u3002\u201d\n\u7136\u800c\uff0c\u4f2f\u514b\u63d0\u9192\u8bf4\uff0c\u5168\u9762\u6d4b\u8bd5\u529f\u80fd\u9700\u8981\u65f6\u95f4\u3002\u8be5\u9886\u57df\u5230\u5904\u90fd\u662f\u6700\u521d\u770b\u8d77\u6765\u5f88\u6709\u5e0c\u671b\u4f46\u9690\u85cf\u4e86\u81f4\u547d\u7f3a\u9677\u7684\u529f\u80fd\u7684\u6b8b\u9ab8\uff0c\u7814\u7a76\u4eba\u5458\u624d\u521a\u521a\u5f00\u59cb\u5206\u79bbDM21\u3002\nDM21\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5b83\u5bf9\u5468\u671f\u8868\u524d\u4e09\u884c\u7684\u5206\u5b50\u8fdb\u884c\u8bad\u7ec3\uff0c\u800c\u5468\u671f\u8868\u4e2d\u7684\u6570\u636e\u66f4\u4e30\u5bcc\u3002\u8fd9\u610f\u5473\u7740\u5b83\u5b66\u5230\u7684\u7535\u5b50\u884c\u4e3a\u53ef\u80fd\u4e0d\u4f1a\u4f20\u9012\u5230\u91d1\u5c5e\u539f\u5b50\u6216\u56fa\u4f53\u6750\u6599\u4e0a\uff0c\u4f8b\u5982\uff0c\u8fd9\u4e24\u79cd\u6750\u6599\u5bf9\u4e8e\u5206\u6790\u94dc\u57fa\u9ad8\u6e29\u8d85\u5bfc\u4f53\u5bb6\u65cf\u81f3\u5173\u91cd\u8981\u3002\u76ee\u524d\uff0c\u4ee3\u8868\u8fd9\u4e9b\u7cfb\u7edf\u7684\u901a\u7528\u6cdb\u51fd\u7684\u7ec6\u8282\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u626b\u63cf\u548c\u5176\u4ed6\u6cdb\u51fd\u66f4\u597d\u5730\u8fd1\u4f3c\u3002\n\u201c\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\uff0c\u6211\u8ba4\u4e3a\u4e0d\u4f1a\u6709\u4e00\u4e2a\u529f\u80fd\u6027\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u201d\u7279\u5361\u7279\u7434\u79d1\u8bf4\u3002\nFern\u00e1ndez Serra\u548cDeepMind\u7b49\u65b0\u6cdb\u51fd\u7684\u53d1\u5c55\u8868\u660e\uff0c\u673a\u5668\u5b66\u4e60\u53ef\u4ee5\u6210\u4e3a\u63a2\u7d22\u5b87\u5b99\u5bc6\u5ea6\u6cdb\u51fd\u65b0\u533a\u57df\u7684\u5f3a\u5927\u5de5\u5177\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u4e0e\u5206\u5b50\u548c\u5316\u5b66\u76f8\u5bf9\u5e94\u7684\u533a\u57df\u3002\nTkatchenko\u8bf4\uff0c\u8fd9\u6709\u52a9\u4e8e\u201c\u771f\u6b63\u8c03\u6574\u4f60\u60f3\u8981\u89e3\u51b3\u7684\u5316\u5b66\u7a7a\u95f4\u90e8\u5206\uff0c\u5e76\u4f7f\u5176\u5c3d\u53ef\u80fd\u9ad8\u6548\u5730\u53d1\u6325\u4f5c\u7528\u201d\u3002\u201c\u6211\u8ba4\u4e3a\u673a\u5668\u5b66\u4e60\u6280\u672f\u771f\u7684\u4f1a\u7559\u4e0b\u6765\u3002\u201d\n\u4f46\u6539\u8fdb\u540e\u7684\u5316\u5b66\u529f\u80fd\u662f\u5426\u80fd\u63ed\u793a\u4ece\u539f\u5b50\u5230\u6750\u6599\u7684\u4e00\u5207\u76f8\u5173\u7684\u4e00\u822c\u7279\u5f81\u4ecd\u6709\u5f85\u89c2\u5bdf\u3002\u4f8b\u5982\uff0cPerdew\u7ee7\u7eed\u5bfb\u627e\u65b0\u7684\u76f4\u89c9\u54c1\u8d28\uff0c\u4ee5\u4f20\u7edf\u65b9\u5f0f\u8fdb\u4e00\u6b65\u5b8c\u5584\u6cdb\u51fd\u3002\u201c\u6211\u53ef\u80fd\u4e0d\u4f1a\u82b1\u592a\u591a\u65f6\u95f4\u5728\u673a\u5668\u5b66\u4e60\u4e0a\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u56e0\u4e3a\u867d\u7136\u673a\u5668\u53ef\u4ee5\u5b66\u4e60\uff0c\u4f46\u5b83\u4eec\u8fd8\u4e0d\u80fd\u5411\u6211\u4eec\u89e3\u91ca\u5b83\u4eec\u6240\u5b66\u7684\u4e1c\u897f\u3002\u201d\n\u79d1\u6069\u5e0c\u671bDM21\u5df2\u7ecf\u77a5\u89c1\u4e86\u666e\u904d\u7684\u7279\u5f81\uff0c\u8fd9\u4e9b\u7279\u5f81\u53ef\u80fd\u6210\u4e3a\u672a\u6765\u8fd1\u4f3c\u503c\u7684\u6301\u4e45\u5143\u7d20\uff0c\u65e0\u8bba\u5b83\u4eec\u662f\u7531\u4eba\u7c7b\u5927\u8111\u8fd8\u662f\u795e\u7ecf\u7f51\u7edc\u751f\u6210\u7684\u3002\n\u201c\u529f\u80fd\u662f\u65e0\u9650\u590d\u6742\u7684\uff0c\u6240\u4ee5\u5bf9\u5b83\u8fdb\u884c\u4efb\u4f55\u653b\u51fb\u90fd\u662f\u597d\u7684\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5b83\u4eec\u7edf\u4e00\u8d77\u6765\u3002\u201d", "note_en": "Hohenberg and Kohn\u2019s work proved the existence of a powerful master equation \u2014 the universal density functional. The equation would take some instance of an electron soup and calculate its energy, guiding physicists to the most natural arrangement of electrons (the one with the lowest possible energy). The functional would be universal in the sense that it could, in principle, describe any system \u2014 from silicon bricks down to water molecules.\n The only catch was that no one had any idea what the equation looked like.\n Soon Kohn and another physicist, Lu Jeu Sham,  made a first pass at writing down a practical density functional. An exact functional capturing all subtle aspects of electron behavior should be unspeakably complicated, so they split it in two. The first half was the part they knew how to do. It provided the energy of a group of electrons that could sense each other only on average. Everything else \u2014 the excess energy from the byzantine quantum effects and nonlocal interactions \u2014 went into the second half: a fudge factor known as the exchange and correlation functional.\n They \u201creduced the thing that we don\u2019t understand about the functional to one small part of it,\u201d Neaton said.\n Over the following decades, scientists built on Kohn and Sham\u2019s work with increasingly clever ways of estimating the fudge factor, and density functionals became the de facto way to understand electrons. Researchers use them to predict how likely an atom is to grab or release an electron, the ways in which molecules vibrate (information the Curiosity rover uses to look for signs of life on Mars), the arrangement of atoms in crystal lattices, the speed of sound in a material, and much more. The theory\u2019s endless stream of applications  won Kohn a Nobel prize in 1998.\n  As researchers ask for more precision from DFT, they\u2019ve had to reckon with the ignorance stuffed into the exchange and correlation term of the functional, sharpening the details of their sketch to bring it more in line with the universal density functional.\n Aron Cohen, a theoretical chemist at the artificial intelligence company DeepMind, is among those searching for the mythical universal equation. To stay grounded in the abstract landscape of theoretical quantum chemistry, he keeps a blue 3D-printed desk toy on hand. It looks like a plastic fortune cookie, and its curves trace out the exact shape of a functional that is universal, but only for the simplest of systems: It can be used to reveal anything one might wish to know about two electrons shared between any two atoms. Still, it reminds him that a functional that can handle any number of electrons and atoms may exist. \u201cThe thing we\u2019re looking for is like this,\u201d he said; it\u2019s just much more complicated. \u201cIt\u2019s a real thing.\u201d\n  A major goal of DFT research is to find more accurate approximations of that universal functional.  John Perdew, a physicist at Temple University and a leading functional developer, has long spearheaded this work. He describes the path toward the universal functional as like climbing the rungs on a ladder. On each rung, physicists add new ingredients to the functional. The simplest ingredient is just the thickness of the electron stew in each location. On the next rung, the functional also considers how quickly the thickness changes from place to place, giving researchers a broader view and making the functional more precise.\n A key part of Perdew\u2019s strategy is to use physical reasoning to identify certain mathematical properties that good approximations must obey, known as \u201cexact constraints.\u201d Higher rungs satisfy more of these constraints, and researchers have to search harder to find equations that obey them all.\n Perdew\u2019s group started tackling third-rung functionals, which blend six ingredients, in 1999, and in 2015, he released a  state-of-the-art functional called SCAN. It was his eighth attempt, and the first to obey all 17 known constraints relevant on the third rung. Applicable to both molecules and solids, SCAN has proved one of the most capable approximations of the universal functional yet discovered.\n \u201cThere are very rich possibilities for third-rung functionals,\u201d Perdew said. \u201cIt takes time to figure out what is important and what works.\u201d\n  As Perdew refined the art of improving density functionals with physical intuition, a revolution was brewing. Could algorithms ferret out patterns in electron behavior too subtle for humans to write down mathematically?\n In 2012, Burke and his collaborators made the first modern attempt to  apply machine learning to a set of simplified electrons. His one-dimensional prototype motivated him and other groups to see if algorithms could hoist researchers further up the ladder.\n One breakthrough came  in early 2021, when Burke and collaborators set up a neural network for a toy problem that could keep track of density errors as well as energy errors in a way that most previous attempts had ignored. \u201cTo get a functional which gives you both density and energy, you need a very flexible architecture,\u201d said  Alexandre Tkatchenko, a theoretical chemist at the University of Luxembourg. \u201cIt\u2019s not easy to write a functional form with your mind.\u201d\n Fern\u00e1ndez-Serra at Stony Brook used a similar strategy to design a neural network that would study a range of molecules and energies and search for a third-rung functional obeying most known constraints, essentially using a machine to retrace Perdew\u2019s footsteps.\n The resulting exchange and correlation functional beat SCAN in predicting the energies of unfamiliar molecules by roughly 10%, as she and Sebastian Dick  reported in  Physical Review B in the fall of 2021. But the modest gain suggested that Perdew\u2019s work had already come close to finding the third rung\u2019s ceiling.\n \u201cPhysical intuition has somehow exhausted almost all that you can reach,\u201d Fern\u00e1ndez-Serra said. \u201cPerdew\u2019s functional really is as good as you can get without using machine learning.\u201d\n Climbing higher would require more complicated inputs \u2014 and algorithms to make sense of them.\n  Shortly before the pandemic, researchers at DeepMind, having conquered the board game Go, were searching for new challenges. They were especially interested in scientific machine learning problems, and Cohen pitched them DFT. He had spent years studying exact functionals of simple systems, like the one he keeps on his desk. But they were nowhere near complex enough to describe the real world.\n \u201cIt felt like a long path to get to something that would be useful for chemistry,\u201d he said.\n One weakness at the heart of DFT ate away at Cohen in particular. Current density functionals often smear out electrons too much. The problem is especially glaring for lopsided systems, where electrons should gather mostly on one molecule. DFT tends to spread out the electron soup more evenly across both molecules. A related problem appears in chemical reactions, when DFT gives incorrect energies for particles merging and pulling apart, even for cases as simple as hydrogen atoms. \u201cIt\u2019s this workhorse,\u201d Cohen said, \u201cbut I know it has these massive failures.\u201d\n  To design their next-generation functional, Cohen and the DeepMind team opted not to worry so much about satisfying a long list of physical principles. Instead, they\u2019d lean on data, lots of data. They scoured the literature for databases of thousands of molecules with known energies (calculated at great cost using the Schr\u00f6dinger equation or similar methods). Then they went further, using supercomputers to crunch the energies of hundreds of additional molecules \u2014 many of which took days to calculate.\n While the team assembled an exhaustive library of example molecules, Cohen and other chemists decided how the functional should be structured.\n They landed on a tantalizingly versatile approach. Over years of trial and error, researchers had found a special recipe for estimating part of the exchange and correlation functional. There was a sweet spot in performance when 80% of the energy for one piece of the functional was calculated in one way and 20% in another. Researchers had long suspected that the next step would be to let the 80/20 ratio vary from point to point around a molecule, but no one had fully succeeded in doing this.\n There have been \u201c100 papers maybe where people played with this form, but they hadn\u2019t produced something that everybody could use,\u201d said Burke, who  introduced this type of functional in 1998. \u201cMaybe it\u2019s too hard for a person.\u201d\n With its sea of example molecules and the machine learning expertise of the DeepMind team, the group\u2019s neural network was able to train a flexible fourth-rung functional of just that type. It can estimate the energies of a wide array of molecules better than SCAN and other top competitors, largely because it places electrons more accurately and better describes their spins. The functional, dubbed DM21, is the first general-purpose functional capable of handling the breaking and forming of chemical bonds. On December 9, the group  described their functional in  Science.\n \u201cThis is the first reasonably general-purpose functional,\u201d said Burke, who was not involved. \u201cIf this thing is as good as it looks, thousands of people will start using it within a year.\u201d\n However, Burke cautions that fully testing the functional will take time. The field is littered with the wreckage of functionals that initially looked promising but hid fatal flaws, and researchers have only just begun to pick apart DM21.\n One weakness is that DM21 trained on molecules from the first three rows of the periodic table, where data is more plentiful. That means the electron behavior it learned may not carry over to metal atoms or solid materials, both of which are crucial for analyzing the  copper-based family of high-temperature superconductors, for instance. The details of the universal functional representing those systems remain, for now, better approximated by SCAN and other functionals.\n \u201cFor the foreseeable future, I don\u2019t think there will be one functional that will do it all,\u201d Tkatchenko said.\n  The development of new functionals like those of Fern\u00e1ndez-Serra and DeepMind suggests that machine learning can be a powerful tool for exploring new regions of the universal density functional, particularly those corresponding to molecules and chemistry.\n It\u2019s good for \u201creally adjusting for the part of chemical space you want to address and making this functional as efficient as possible,\u201d said Tkatchenko. \u201cI think machine learning techniques really are here to stay.\u201d\n  But whether improved chemistry functionals will reveal general features relevant to everything from atoms to materials remains to be seen. Perdew, for example, continues to search for new intuitive qualities that can further refine functionals in the traditional way. \u201cI probably won\u2019t put a lot of time into machine learning efforts,\u201d he said, \u201cbecause although machines can learn, they can\u2019t yet explain to us what they have learned.\u201d\n Cohen hopes that DM21 has glimpsed universal features that could become enduring elements of future approximations, whether they\u2019re generated by human minds or neural networks.\n \u201cThe functional is infinitely complicated, so making any attack on it is good,\u201d he said. \u201cIdeally we\u2019d like to unify them all.\u201d", "posttime": "2022-02-17 01:51:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b66\u4e60,complexity,\u7535\u5b50", "title": "\u7528\u673a\u5668\u5b66\u4e60\u9a6f\u670d\u91cf\u5b50\u590d\u6742\u6027", "title_en": "Quantum complexity tamed by machine learning", "transed": 1, "url": "https://www.quantamagazine.org/quantum-complexity-tamed-by-machine-learning-20220207/", "via": "", "real_tags": ["\u5b66\u4e60", "\u7535\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073661, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f13\u5b58\u5185\u5b58\u7684\u5de5\u4f5c\u539f\u7406\u662f\u80e1\u841d\u535c\u52a0\u5927\u68d2\u3002\u5361\u7f57\u662f\u5730\u65b9\u6027\u539f\u5219\uff0c\u68cd\u5b50\u662f\u963f\u59c6\u8fbe\u5c14&#39\uff1b\u8fd9\u662f\u6cd5\u5f8b\u3002\u5c40\u90e8\u6027\u539f\u5219\u8ba4\u4e3a\u7a0b\u5e8f\u503e\u5411\u4e8e\u5c06\u5b83\u4eec\u7684\u5185\u5b58\u5f15\u7528\u805a\u96c6\u5728\u4e00\u8d77\u3002\u4e00\u6b21\u5f15\u7528\u7684\u5185\u5b58\u4f4d\u7f6e\u53ef\u80fd\u4f1a\u518d\u6b21\u88ab\u5f15\u7528\uff1a\u65f6\u95f4\u4f4d\u7f6e\u3002\u53c2\u8003\u4f4d\u7f6e\u9644\u8fd1\u7684\u8bb0\u5fc6\u4f4d\u7f6e\u5f88\u53ef\u80fd\u5f88\u5feb\u5c31\u4f1a\u88ab\u5f15\u7528\uff1a\u7a7a\u95f4\u6027\u3002\u963f\u59c6\u8fbe\u5c14&#39\uff1bs Law\u8868\u793a\uff0c\u4f7f\u7528\u901f\u5ea6\u66f4\u5feb\u7684\u7ec4\u4ef6\u6240\u83b7\u5f97\u7684\u6027\u80fd\u6539\u5584\u53d7\u5230\u4f7f\u7528\u901f\u5ea6\u66f4\u5feb\u7ec4\u4ef6\u7684\u65f6\u95f4\u7684\u9650\u5236\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCPU\u548c\u7f13\u5b58\u662f\u5feb\u901f\u7ec4\u4ef6\uff0c\u800c\u5185\u5b58\u5219\u662f\u7f13\u6162\u7684\u3002\n\u5982\u679c\u60a8\u7684\u7a0b\u5e8f\u9075\u5faa\u5c40\u90e8\u6027\u539f\u5219\uff0c\u5b83\u5c06\u53d7\u76ca\u4e8e\u5feb\u901f\u7f13\u5b58\u5e76\u4ee5\u5904\u7406\u5668\u901f\u5ea6\u8fd0\u884c\u3002\u5982\u679c\u6ca1\u6709&#39\uff1bt\u3001 \u5b83\u5bf9\u963f\u59c6\u8fbe\u5c14\u548c#39\u8d1f\u8d23\uff1bs\u5b9a\u5f8b\u5e76\u4ee5\u5185\u5b58\u901f\u5ea6\u8fd0\u884c\u3002\u547d\u4e2d\u7387\u5fc5\u987b\u975e\u5e38\u9ad8\uff0c\u6bd4\u5982\u8bf498%\uff0c\u7136\u540e\u5904\u7406\u5668\u901f\u5ea6\u624d\u80fd\u663e\u8457\u589e\u52a0\u3002\n\u963f\u59c6\u8fbe\u5c14\u548c#39\uff1bs\u5b9a\u5f8b\u5bf9\u591a\u5904\u7406\u5668\u6709\u7279\u6b8a\u60c5\u51b5\u60e9\u7f5a[Schimmel94]\u3002\u5728\u591a\u5904\u7406\u5668\u4e0a\u8fdb\u884c\u6296\u52a8\u4f1a\u964d\u4f4e\u6240\u6709\u5904\u7406\u5668\u7684\u901f\u5ea6\u3002\u5b83\u4eec\u5404\u81ea\u7b49\u5f85\u5bf9\u65b9\u7b49\u5f85\u5185\u5b58\uff0c\u800c\u591a\u5904\u7406\u5668\u63d0\u4f9b\u7684\u5185\u5b58\u5219\u76f8\u53cd\u3002\u9075\u5b88\u591a\u5904\u7406\u5668\u7684\u5c40\u90e8\u6027\u539f\u5219\uff0c\u4f46\u4e0d\u9075\u5b88\u8f6f\u4ef6\u5171\u4eab\u7684\u539f\u5219\uff0c\u4e0d\u662f\u5417&#39\uff1b\u8fd9\u4e0d\u4ec5\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4e5f\u662f\u4e00\u79cd\u5fc5\u9700\u54c1\u3002\n\u7f13\u5b58\u7f16\u7a0b\u98ce\u683c\u7684\u76ee\u6807\u662f\u589e\u52a0\u672c\u5730\u6027\u3002\u4e86\u89e3\u7f13\u5b58\u7684\u7ed3\u6784\u548c\u884c\u4e3a\u5f88\u91cd\u8981\uff0c\u4f46\u66f4\u91cd\u8981\u7684\u662f\u4e86\u89e3\u8981\u5229\u7528\u7684\u57fa\u672c\u5c5e\u6027\u548c\u8981\u907f\u514d\u7684\u6700\u574f\u60c5\u51b5\u3002\u672c\u6587\u5c06\u8be6\u7ec6\u4ecb\u7ecd\uff0c\u6458\u8981\u5c06\u63d0\u4f9b\u6307\u5bfc\u3002\n\u4f5c\u4e3a\u4e00\u4e2a\u8fd0\u884c\u793a\u4f8b\uff0c\u6211\u5c06\u7814\u7a76Linux[Maxwell99]\uff0c\u5c24\u5176\u662f\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5176\u60f3\u6cd5\u662f\u7a0d\u5fae\u4fee\u6539\u6570\u636e\u7ed3\u6784\u548c\u4ee3\u7801\uff0c\u5c1d\u8bd5\u66f4\u6709\u6548\u5730\u4f7f\u7528\u7f13\u5b58\u3002\u5e0c\u671b\u6211\u80fd\u5b9e\u73b0\u4e24\u4e2a\u76ee\u6807\uff1a\u4e00\u4e2a\u5b9e\u7528\u7684\u7f13\u5b58\u6559\u7a0b\u548c\u4e00\u4e9bLinux\u6027\u80fd\u6539\u8fdb\u3002\n\u6211\u5c06\u4e3b\u8981\u4f7f\u7528circa 1998 350 MHz Deschutes Pentium II\u7cfb\u7edf\u4f5c\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\uff0c\u800c\u4e0d\u662f\u4e00\u822c\u6027\u5730\u8ba8\u8bba\u9ad8\u901f\u7f13\u5b58\u7cfb\u7edf\u3002\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a\n\u5b58\u50a8\u5927\u5c0f\u5ef6\u8fdf\u6ce8\u91ca-------------------------------------------------------------------\u5bc4\u5b58\u566832\u5b57\u82823ns\u5bc4\u5b58\u5668\u91cd\u547d\u540d\u6587\u4ef6L1 32K 6ns\u7247\u4e0a\uff0c\u534a\u5954\u817eII\u65f6\u949f\u901f\u7387L2 256K 57 ns\u7247\u5916\uff0c\u5728[Intel99a]\u5c01\u88c5\u5185\u5b5864 MB 162 ns 100 MHz SDRAM\u3001\u5355\u94f6\u884c\u78c1\u76d810GB 9ms DMA IDE\u7f51\u7edc\u4e0a\uff0c56K PPP\n\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002CPU\u6027\u80fd\u6bcf\u5e74\u63d0\u9ad8\u7ea655%\uff0c\u5185\u5b58\u6bcf\u5e74\u63d0\u9ad8\u7ea67%\u3002\u5185\u5b58\u5927\u3001\u6210\u672c\u4f4e\u3001\u901f\u5ea6\u6162\uff0c\u800c\u7f13\u5b58\u5c0f\u3001\u901f\u5ea6\u5feb\u3001\u6210\u672c\u9ad8\u3002\u53cc\u6570\u636e\u901f\u7387SDRAM\u548cRambus\uff08\u5982\u679c\u53ef\u7528\uff09\u5c06\u6539\u5584\u5185\u5b58\u5e26\u5bbd\uff0c\u4f46\u4e0d\u4f1a\u6539\u5584\u5ef6\u8fdf\u3002\u8fd9\u4e9b\u6539\u8fdb\u5c06\u6709\u52a9\u4e8e\u591a\u5a92\u4f53\u7b49\u66f4\u5177\u53ef\u9884\u6d4b\u6027\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u4e0d\u4f1a\u5f71\u54cdLinux\u7b49\u53ef\u9884\u6d4b\u6027\u8f83\u5dee\u7684\u7a0b\u5e8f\u3002\n\u9996\u5148\uff0c\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u7f13\u5b58\u3002\u7f13\u5b58\u5728\u5927\u5c0f\u548c\u901f\u5ea6\u65b9\u9762\u90fd\u4e0e\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u76f8\u5339\u914d\u3002\u7f13\u5b58\u7ebf\u672a\u547d\u4e2d\u3001\u9875\u9762\u9519\u8bef\u548cHTTP\u8bf7\u6c42\u5728\u8fd9\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u4e0d\u540c\u7ea7\u522b\u4e0a\u662f\u76f8\u540c\u7684\u3002\u5f53Squid\u4ee3\u7406\u6ca1\u6709&#39\uff1b\u5982\u679c\u7f13\u5b58\u4e2d\u6ca1\u6709\u5bf9\u8c61\uff0c\u5b83\u4f1a\u5c06HTTP\u8bf7\u6c42\u8f6c\u53d1\u5230\u539f\u59cb\u670d\u52a1\u5668\u3002\u5f53CPU\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u662f&#39\uff1bt\u5728\u5185\u5b58\u4e2d\uff0c\u51fa\u73b0\u9875\u9762\u9519\u8bef\uff0c\u4ece\u78c1\u76d8\u8bfb\u53d6\u9875\u9762\u3002\u5f53CPU\u8bf7\u6c42\u7684\u5730\u5740\u4e0d\u662f&#39\uff1bt\u5728\u7f13\u5b58\u4e2d\uff0c\u5305\u542b\u7684\u7f13\u5b58\u7ebf\u4ece\u5185\u5b58\u4e2d\u8bfb\u53d6\u3002LRU\u3001\u5de5\u4f5c\u96c6\u3001\u5173\u8054\u6027\u3001\u4e00\u81f4\u6027\u3001\u54c8\u5e0c\u3001\u9884\u53d6\u90fd\u662f\u5b58\u50a8\u5c42\u6b21\u7ed3\u6784\u7684\u6bcf\u4e00\u5c42\u4e2d\u4f7f\u7528\u7684\u6280\u672f\u548c\u672f\u8bed\u3002\n\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c42\u6b21\u7ed3\u6784\u4e2d\u4e00\u4e2a\u8f83\u5c0f\u7684\u8f83\u5feb\u7ea7\u522b\u90fd\u6709\u53e6\u4e00\u4e2a\u8f83\u5927\u7684\u8f83\u6162\u7ea7\u522b\u4f5c\u4e3a\u540e\u76fe\u3002\u5982\u679c\u6027\u80fd\u53d7\u5230\u8fc7\u5ea6\u4f7f\u7528\u8f83\u6162\u7ea7\u522b\u7684\u9650\u5236\uff0c\u5219\u6839\u636eAmdahl\u548c#39\uff1b\u6839\u636es\u5b9a\u5f8b\uff0c\u53ea\u9700\u52a0\u5feb\u901f\u5ea6\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5fae\u5c0f\u7684\u6539\u8fdb\u3002\n\u5173\u4e8e\u7f13\u5b58[Handy98]\uff0c\u6700\u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\u7f13\u5b58\u7ebf\u3002\u901a\u5e38\uff0c\u7f13\u5b58\u7ebf\u7684\u957f\u5ea6\u4e3a32\u5b57\u8282\uff0c\u5e76\u4e0e32\u5b57\u8282\u7684\u504f\u79fb\u91cf\u5bf9\u9f50\u3002\u9996\u5148\uff0c\u5c06\u5185\u5b58\u5757amemory line\u52a0\u8f7d\u5230\u7f13\u5b58\u7ebf\u4e2d\u3002\u8fd9\u4e2a\u4ee3\u4ef7\u662f\u7f13\u5b58\u4e22\u5931\uff0c\u5373\u5185\u5b58\u5ef6\u8fdf\u3002\u7136\u540e\uff0c\u52a0\u8f7d\u540e\uff0c\u53ea\u8981\u7f13\u5b58\u7ebf\u4e2d\u7684\u5b57\u8282\u4ecd\u5728\u7f13\u5b58\u4e2d\uff0c\u5c31\u53ef\u4ee5\u5f15\u7528\u5b83\uff0c\u800c\u4e0d\u4f1a\u53d7\u5230\u60e9\u7f5a\u3002\u5982\u679c\u7f13\u5b58\u7ebf\u4e0d\u662f&#39\uff1b\u5f53\u9700\u8981\u52a0\u8f7d\u53e6\u4e00\u4e2a\u5185\u5b58\u884c\u65f6\uff0c\u5b83\u6700\u7ec8\u4f1a\u88ab\u5220\u9664\u3002\u5982\u679c\u4fee\u6539\u4e86\u7f13\u5b58\u7ebf\uff0c\u5219\u9700\u8981\u5148\u5199\u5165\u7f13\u5b58\u7ebf\uff0c\u7136\u540e\u624d\u80fd\u5220\u9664\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u662f\u6700\u7b80\u5355\u4e5f\u662f\u6700\u91cd\u8981\u7684\u7f13\u5b58\u89c6\u56fe\u3002\u5b83\u7684\u6559\u8bad\u6709\u4e24\u4e2a\uff1a\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u6253\u5305\u5230\u7f13\u5b58\u7ebf\u4e2d\uff0c\u5e76\u4f7f\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u7f13\u5b58\u7ebf\u3002\u672a\u6765\u5185\u5b58\u5e26\u5bbd\u7684\u589e\u52a0\uff08DDR\u548cRambus\uff09\u5c06\u5956\u52b1\u8fd9\u79cd\u505a\u6cd5\u3002\u7f13\u5b58\u66f4\u590d\u6742\u7684\u7279\u6027\uff0c\u5373\u7ed3\u6784\u548c\u884c\u4e3a\uff0c\u5bf9\u4e8e\u7406\u89e3\u548c\u907f\u514d\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u7f13\u5b58\u884c\u4e3a\uff1a\u6296\u52a8\u975e\u5e38\u91cd\u8981\u3002\n\u7ade\u4e89\u548c\u5171\u4eab\u7f13\u5b58\u7ebf\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u76f4\u5230apoint\u6210\u4e3a\u4e00\u4ef6\u574f\u4e8b\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5feb\u901f\u7f13\u5b58\u5c06\u5177\u6709\u8f83\u9ad8\u7684\u7f13\u5b58\u547d\u4e2d\u7387\uff0c\u5e76\u4e14\u6027\u80fd\u4e0d\u53d7\u5185\u5b58\u901f\u5ea6\u7684\u9650\u5236\u3002\u4f46\u662f\uff0c\u5f53\u7f13\u5b58\u7ebf\u592a\u5c11\u800c\u7ade\u4e89\u592a\u6fc0\u70c8\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u4e00\u4ef6\u975e\u5e38\u7cdf\u7cd5\u7684\u4e8b\u60c5\uff0c\u5373\u6296\u52a8\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u6570\u636e\u7ed3\u6784\u7684\u6700\u574f\u60c5\u51b5\u4e0b\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u524d\u7684\u5206\u6790\u5de5\u5177\u5173\u6ce8\u7684\u662f\u6307\u4ee4\u800c\u4e0d\u662f\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5458\u5fc5\u987b\u4e86\u89e3\u6570\u636e\u7ed3\u6784\u7684\u6700\u574f\u60c5\u51b5\uff0c\u5e76\u907f\u514d\u5b83\u4eec\u3002\u67e5\u627e\u70ed\u70b9\u7684\u6709\u7528\u5de5\u5177\u662fcacheprof[Seward]\u3002\n\u5954\u817eII[Shanley97]32K\u4e00\u7ea7\u7f13\u5b58\u75311024\u676132\u5b57\u8282\u7f13\u5b58\u7ebf\u7ec4\u6210\uff0c\u8fd9\u4e9b\u7f13\u5b58\u7ebf\u88ab\u5212\u5206\u4e3a512\u884c\u7f13\u5b58\u7684\u6307\u4ee4\u548c\u6570\u636e\u5e93\u3002\u5b83\u4f7f\u7528\u989c\u8272\u4f4d5-11\u7d22\u5f15\u6210\u4e00\u7ec4\u7f13\u5b58\u7ebf\u3002\u5e76\u884c\u5730\uff0c\u5b83\u6bd4\u8f83\u7d22\u5f15\u96c6\u4e2d\u6bcf\u4e2a\u7f13\u5b58\u7ebf\u7684\u6807\u8bb0\u4f4d12-31\uff0812-35\u4e0ePentium III\u7269\u7406\u5730\u5740\u6269\u5c55\uff09\u3002L1\u4f7f\u75284\u8def\u96c6\u5408\u5173\u8054\u6620\u5c04\uff0c\u5c06512\u884c\u5212\u5206\u4e3a128\u7ec44\u6761\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u4e9b\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u662f\u6700\u8fd1\u4f7f\u7528\u6700\u5c11\u7684\uff08LRU\uff09\u5217\u8868\u3002\u5982\u679c\u6709\u5339\u914d\u9879\uff0c\u5219\u4f7f\u7528\u5339\u914d\u7684\u7f13\u5b58\u7ebf\uff0c\u5e76\u5c06\u5176\u79fb\u52a8\u5230\u5217\u8868\u7684\u524d\u9762\u3002\u5982\u679c\u6ca1\u6709&#39\uff1b\u5982\u679c\u5339\u914d\uff0c\u5219\u4ece\u4e8c\u7ea7\u83b7\u53d6\u6570\u636e\uff0c\u66ff\u6362\u5217\u8868\u672b\u5c3e\u7684\u7f13\u5b58\u7ebf\uff0c\u5e76\u5c06\u65b0\u6761\u76ee\u653e\u5728\u5217\u8868\u7684\u524d\u9762\u3002\n\u540c\u4e00\u989c\u8272\u7684\u4e24\u6761\u5185\u5b58\u7ebf\u7ade\u4e89\u540c\u4e00\u7ec44\u6761\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u5b83\u4eec\u7684\u989c\u8272\u4f4d\uff085-11\uff09\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u7684\u989c\u8272\u4e0d\u76f8\u540c\u3002\u6216\u8005\uff0c\u5982\u679c\u5b83\u4eec\u7684\u8863\u670d\u76f8\u5dee4096:2^\uff087\u4e2a\u989c\u8272\u4f4d+5\u4e2a\u504f\u79fb\u4f4d\uff09\u7684\u500d\u6570\uff0c\u5219\u5b83\u4eec\u7684\u989c\u8272\u76f8\u540c\u3002\u4f8b\u5982\uff0c\u5730\u574064\u548c12352\u7684\u5dee\u503c\u4e3a12288\uff0c\u53733*4096\u3002\u56e0\u6b64\uff0c64\u548c12352\u7ade\u4e89\u603b\u51714\u6761\u4e00\u7ea7\u7f13\u5b58\u7ebf\u3002\u4f46\u662f64\u548c12384\u7684\u5dee\u503c\u662f12320\uff0c\u4e0d\u662f4096\u7684\u500d\u6570\uff0c\u6240\u4ee5\u5b83\u4eec\u4e0d&#39\uff1bt\u5bf9\u76f8\u540c\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u8fdb\u884c\u8865\u507f\u3002\n\u6307\u4ee4\u4e5f\u88ab\u7f13\u5b58\u3002\u5954\u817eII\u4e00\u7ea7\u7f13\u5b58\u662f\u54c8\u4f5b\uff08Harvard\uff09\u6216\u5206\u5272\u6307\u4ee4/\u6570\u636e\u7f13\u5b58\u3002\u8fd9\u610f\u5473\u7740\u6307\u4ee4\u548c\u6570\u636e\u6c38\u8fdc\u4e0d\u4f1a\u7ade\u4e89\u76f8\u540c\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u3002L2\u662f\u4e00\u4e2a\u7edf\u4e00\u7684\u7f13\u5b58\u3002\u7edf\u4e00\u610f\u5473\u7740\u53ea\u6709\u4e00\u4e2a\u7f13\u5b58\u5e93\uff0c\u6307\u4ee4\u548c\u6570\u636e\u7ade\u4e89\u7f13\u5b58\u7ebf\u3002\nL2\u4e0eL1\u76f8\u4f3c\uff0c\u53ea\u662f\u66f4\u5927\u3001\u901f\u5ea6\u66f4\u6162\u3002\u6211\u7684\u5954\u817eII\u4e0a\u7684\u8054\u673a\u5305256K\u4e8c\u7ea7\u7f13\u5b58\u67098192\u6761\u7f13\u5b58\u7ebf\u3002\u5b83\u4e5f\u662f4\u8def\u96c6\u5173\u8054\u7684\uff0c\u4f46\u662f\u7edf\u4e00\u7684\u3002\u6709\u5954\u817eII&#39\uff1b\u4f7f\u7528512K ofL2\u5c06\u96c6\u5408\u5927\u5c0f\u589e\u52a0\u52308\u3002\u8fd8\u6709PIII&#39\uff1b\u5177\u6709\u9ad8\u8fbe2MB\u7684L2\u7684s\u3002\u5982\u679c\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u672a\u547d\u4e2d\uff0c\u5c06\u4ece\u5185\u5b58\u4e2d\u63d0\u53d6\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u4e24\u6761\u5185\u5b58\u7ebf\u76f8\u5dee64K:2^\uff0811\u4e2a\u7f13\u5b58\u8272\u4f4d+5\u4e2a\u504f\u79fb\u4f4d\uff09\u7684\u500d\u6570\uff0c\u5219\u5b83\u4eec\u5c06\u7ade\u4e89\u76f8\u540c\u7684L2cache\u7ebf\u3002\n\u6211\u4eec\u5c06\u4ece\u7b80\u5355\u7684\u4e8b\u60c5\u5f00\u59cb\u3002\u6700\u597d\u662f\u628a\u6bcf\u4ef6\u4e8b\u90fd\u548c\u4e00\u4e2a\u957f\u5355\u8bcd\u7684\u8fb9\u754c\u5bf9\u9f50\u3002Linux\u662f\u7528gcc\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4e14\u4ed4\u7ec6\u7814\u7a76\u4e86gcc\u6807\u51c6\u6587\u6863&#34\uff1b\u4f7f\u7528\u548c\u79fb\u690dGNU CC&#34\uff1b[Stallman 00]\u56e0\u6b64\u662f\u5fc5\u8981\u7684\uff1a\u6ca1\u6709\u4eba\u50cfRichardStallman\u90a3\u6837\u62e5\u62b1\u548c\u5ef6\u4f38\u3002gcc\u5bf9\u667a\u80fd\u81ea\u52a8\u5bf9\u9f50\u7684\u7ed3\u6784\u5b57\u6bb5\u5bf9\u9f50\u7279\u522b\u6709\u7528\u3002ANSI C\u6807\u51c6\u5141\u8bb8\u6839\u636e\u5b9e\u65bd\u60c5\u51b5\u8fdb\u884c\u5305\u88c5\u6216\u586b\u5145\u3002\ngcc\u81ea\u52a8\u5c06d_Recen\u4e0e\u957f\u8fb9\u754c\u5bf9\u9f50\u3002\u8fd9\u9002\u7528\u4e8e\u65e0\u7b26\u53f7short\uff0c\u4f46\u5bf9\u4e8ex86\u4e0a\u7684short\uff0c\u7f16\u8bd1\u5668\u5fc5\u987b\u63d2\u5165\u7b26\u53f7\u6269\u5c55\u6307\u4ee4\u3002\u5982\u679c\u4f7f\u7528\u7684\u662fSaveSaveStEdStudio\uff0c\u8bf7\u8003\u8651\u4f7f\u7528\u65e0\u7b26\u53f7\u77ed\u3002\u4f8b\u5982\uff0c\u5728&lt\uff1blinux/mm\u3002h&gt\uff1b\u5c06vm_avl_height\u5b57\u6bb5\u66f4\u6539\u4e3aunsignedshort\u53ef\u4ee5\u4e3a\u5178\u578b\u6784\u5efa\u8282\u770132\u5b57\u8282\u7684\u6307\u4ee4\u3002\u5b83\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2aint\u3002\n\u5b57\u7b26\u4e32\u4e5f\u5e94\u8be5\u5bf9\u9f50\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6e90\u548c\u76ee\u6807\u90fd\u662f\u957f\u5b57\u5bf9\u9f50\u7684\uff0c\u5219strncmp\uff08\uff09\u53ef\u4ee5\u4e00\u6b21\u6bd4\u8f83\u4e24\u4e2a\u957f\u5b57\uff0c\u5373\u5ec9\u4ef7\u7684SIMD\u3002egcs2\u7684x86\u4ee3\u7801\u751f\u6210\u5668\u300295.2\u6709\u4e00\u4e2a\u4e0d\u9519\u7684\u5c0fbug\uff0c\u5b83\u4e0d&#39\uff1bt ALL\u5bf9\u9f50\u77ed\u5b57\u7b26\u4e32\u5e76\u5c06\u957f\u5b57\u7b26\u4e32\u4e0e\u7f13\u5b58\u7ebf\u5bf9\u9f50\uff1a\nchar*short_string=&#34\uff1b\u77ed\u4e32&#34\uff1b\uff1b\u5b57\u7b26*\u957f\u5b57\u7b26\u4e32=&#34\uff1ba_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_\u5723\u6212\u6307&#34\u3002LC0:\u3002\u5b57\u7b26\u4e32&#34\uff1b\u4e00\u6839\u77ed\u7ebf&#34\uff1b//\u672a\u5bf9\u9f50\u7684\u5b57\u7b26\u4e32\u3002\u3002\u3002\u00a0\u00a0\u00a0 .\u5bf9\u9f5032\u3002LC1://\u4e0e\u7f13\u5b58\u7ebf\u5bf9\u9f50\u3002\u5b57\u7b26\u4e32&#34\uff1ba_long_long_long_long_long_long_long_long_long_long_long_\u5723\u6212\u6307&#34\uff1b\n\u8fd9\u91cc\u9700\u8981\u7684\u662f\u5c06\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0e\u957f\u5355\u8bcd\u5bf9\u9f50\u3002\u5bf9\u9f504\u3002\u8fd9\u6837\u4f7f\u7528\u7684\u7a7a\u95f4\u66f4\u5c11\uff0c\u5bf9\u9f50\u6548\u679c\u66f4\u597d\u3002\u5728\u975e\u5178\u578bLinux\u6784\u5efa\u4e2d\uff0c\u8fd9\u8282\u7701\u4e86\u5927\u7ea68K\u3002\n\u6570\u7ec4\u548c\u7ed3\u6784\u5217\u8868\u63d0\u4f9b\u4e86\u7f13\u5b58\u5927\u91cf\u6570\u636e\u7684\u673a\u4f1a\u3002\u5982\u679c\u9891\u7e41\u8bbf\u95ee\u7684\u5b57\u6bb5\u88ab\u6536\u96c6\u5230\u5355\u4e2a\u7f13\u5b58\u7ebf\u4e2d\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u5355\u5185\u5b58\u8bbf\u95ee\u52a0\u8f7d\u5b83\u4eec\u3002\u8fd9\u53ef\u4ee5\u51cf\u5c11\u5ef6\u8fdf\u548c\u7f13\u5b58\u5360\u7528\u3002\u7136\u800c\uff0c\u5982\u679c\u8bbf\u95ee\u5927\u91cf\u6570\u636e\uff0c\u5b83\u4e5f\u4f1a\u589e\u52a0\u7f13\u5b58\u5360\u7528\u7a7a\u95f4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5305\u88c5\u6548\u7387\u548c\u6c61\u67d3\u66f4\u4e3a\u91cd\u8981\u3002\n\u56e0\u6b64\uff0c\u5bf9\u4e8e\u9635\u5217\uff0c\u9635\u5217\u7684\u5e95\u90e8\u5e94\u8be5\u4e0e\u7f13\u5b58\u5bf9\u9f50\u3002\u7ed3\u6784\u7684\u5927\u5c0f\u5fc5\u987b\u662f\u7f13\u5b58\u7ebf\u5927\u5c0f\u7684\u6574\u6570\u500d\u6216\u6574\u6570\u9664\u6570\u3002\u5982\u679c\u8fd9\u4e9b\u6761\u4ef6\u4fdd\u6301\u4e0d\u53d8\uff0c\u90a3\u4e48\u901a\u8fc7\u5f52\u7eb3\uff0c\u7f13\u5b58\u7ebf\u9635\u5217\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5c06\u5bf9\u9f50\u6216\u538b\u7f29\u3002\u8fde\u63a5\u7ed3\u6784\u5728\u5bf9\u9f50\u65b9\u9762\u7c7b\u4f3c\uff0c\u4f46don&#39\uff1b\u6709\u5c3a\u5bf8\u9650\u5236\u3002\nmem_map_t\u7c7b\u578b\u7684\u7ed3\u6784\u6570\u7ec4\u88abpageallocator\u7528\u4f5c\u8f6f\u4ef6\u9875\u8868\uff1a\n/**\u5c1d\u8bd5\u5c06\u6700\u5e38\u8bbf\u95ee\u7684\u5b57\u6bb5\u4fdd\u5b58\u5728\u5355\u4e2a\u7f13\u5b58\u7ebf*\u4e2d\uff0816\u5b57\u8282\u6216\u66f4\u5927\uff09\u3002\u8fd9\u79cd\u6392\u5e8f\u572832\u4f4d\u5904\u7406\u5668\u4e0a\u5e94\u8be5\u7279\u522b\u6709\u76ca\u7c7b\u578b\u5b9a\u4e49\u7ed3\u6784\u9875{//from linux-2.4.0-test2 structlist_head list\uff1b//2,4 struct address_space*\u6620\u5c04\uff1b//1,2 unsignedlong index\uff1b//1,2 structpage*next_hash\uff1b//1,2 atomic_t\u8ba1\u6570\uff1b//1,1+1\u4e2a\u65e0\u7b26\u53f7\u957f\u6807\u5fd7\uff1b//1,2\u7ed3\u6784\u5217\u8868\\u\u5934lru\uff1b//2,4\u7b49\u5f85\u961f\u5217\u5934\u7b49\u5f85\uff1b//5,10\u7ed3\u6784\u9875**pprev_\u6563\u5217\uff1b//1,2 struct buffer_head*buffers\uff1b//1,2\u4e2a\u65e0\u7b26\u53f7\u957f\u865a\u62df\uff1b//1,2 struct zone_struct*zone\uff1b//1,2}mem_map_t\uff1b//18*4==72 x86//36*4==144 Alpha\n\u572832\u4f4d\u5954\u817e\u4e0a\uff0cmem_map_t\u7684\u5927\u5c0f\u4e3a72\u5b57\u8282\u3002\u57282.2.16\u4e2d\u662f40\u5b57\u8282\u3002\u7531\u4e8e\u9635\u5217\u5206\u914d\u4ee3\u7801\u4f7f\u7528SSIZEOF\uff08mem_map___t\uff09\u6765\u5bf9\u9f50\u9635\u5217\uff0c\u56e0\u6b64\u57fa\u5ea7\u5bf9\u9f50\u4e0d\u6b63\u786e\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0cMAP_ALIGN\uff08\uff09\u90fd\u53ef\u4ee5\u66ff\u6362\u4e3aL1_CACHE_ALIGN\uff08\uff09\uff0c\u5b83\u4f7f\u7528\u66f4\u7b80\u5355\u7684\u4ee3\u7801\uff1a\n#\u5b9a\u4e49\u6620\u5c04\u5bf9\u9f50\uff08x\uff09\uff08\uff08\uff08x\uff09%sizeof\uff08mem_MAP_t\uff09\uff09=0\uff09\\\uff1f\uff08x\uff09 \uff1a\uff08\uff08x\uff09+sizeof\uff08mem_map_t\uff09-\uff08x\uff09%sizeof\uff08mem_map_t\uff09\uff09\uff09lmem_map=\uff08\u7ed3\u6784\u9875\u9762*\uff09\uff08\u9875\u9762\u504f\u79fb+\u8d34\u56fe\u5bf9\u9f50\uff08\uff08\u65e0\u7b26\u53f7\u957f\uff09lmem_\u8d34\u56fe-\u9875\u9762\u504f\u79fb\uff09#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5bf9\u9f50\uff08x\uff09\uff08\uff08x\uff09+\uff08\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282-1\uff09\uff09\\&amp~\uff08\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282-1\uff09\uff09lmem_\u6620\u5c04=\uff08\u7ed3\u6784\u9875*\uff09\u4e00\u7ea7\u7f13\u5b58\u5bf9\u9f50\uff08\uff08\u65e0\u7b26\u53f7\u957f\uff09lmem_\u6620\u5c04\uff09\uff1b\n\u572864\u4f4dAlpha\u4e0a\uff0clong\u662f8\u5b57\u8282\uff0c\u5e26\u67098\u5b57\u8282\u5bf9\u9f50\uff0csizeof\uff08mem_map__t\uff09\u662f144\u5b57\u8282\u3002flags\u5b57\u6bb5\u6ca1\u6709&#39\uff1bt\u4e0d\u9700\u8981\u662f\u957f\u7684\uff0c\u5b83\u5e94\u8be5\u662f\u4e00\u4e2aint\u3002\u56e0\u4e3a\u539f\u5b50_t\u4e5f\u662f\u4e00\u4e2aint\uff0c\u800c\u4e14\u4e24\u4e2a\u5b57\u6bb5\u76f8\u90bb\uff0c\u6240\u4ee5\u5b83\u4eec\u4f1a\u7ec4\u5408\u6210\u4e00\u4e2a\u957f\u5355\u8bcd\u3002Page wait\u961f\u5217\u5934\u8fc7\u53bb\u662f\u4e00\u4e2a\u6307\u9488\u3002\u5c06\u5176\u66f4\u6539\u56de\u539f\u6765\u7684\u7248\u672c\u5c06\u8282\u7701\u8db3\u591f\u7684\u5185\u5b58\uff0c\u4ee5\u5141\u8bb8\u7f13\u5b58\u5bf9\u9f5032\u4f4d\u548c64\u4f4d\u7248\u672c\u3002\n\u53ef\u4ee5\u9488\u5bf9\u7279\u5b9a\u7684\u5904\u7406\u5668\u8fdb\u884c\u6709\u6761\u4ef6\u7684\u7f16\u8bd1\u3002Linux\u6709\u4e00\u4e2a\u5305\u542b\u6587\u4ef6&lt\uff1basm-i386/\u9ad8\u901f\u7f13\u5b58\u3002h&gt\uff1b\uff0c\u5b9a\u4e49x86\u4f53\u7cfb\u7ed3\u6784\u7cfb\u5217\u7684\u4e00\u7ea7\u7f13\u5b58\u7ebf\u5927\u5c0f\uff0c\u5373\u4e00\u7ea7\u7f13\u5b58\u5b57\u8282\u3002slab\u5206\u914d\u5668[Bonwick94]\u4ece\u5185\u5b58\u9875\u5206\u914d\u5c0f\u5bf9\u8c61\uff0c\u5f53\u5ba2\u6237\u673a\u8bf7\u6c42\u5e26\u6709Lab_HWCACHE_ALIGN\u6807\u5fd7\u7684\u7f13\u5b58\u5bf9\u9f50\u5bf9\u8c61\u65f6\uff0c\u5b83\u4f7f\u75281_CACHE_\u5b57\u8282\u3002\n/**\u5305\u62ec/asm-i386/\u7f13\u5b58\u3002h*/#\u5982\u679cCPU==586 | CPU==686#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5b57\u828232#\u5426\u5219#\u5b9a\u4e49\u4e00\u7ea7\u7f13\u5b58\u5b57\u828216#endif#endif#\n\u5982\u679c\u6709\u4eba\u5f97\u5230\u4e86\u4e00\u4e2a\u4ee5486\u4e3a\u76ee\u6807\u7684\u3001\u7ecf\u8fc7\u4fdd\u5b88\u7f16\u8bd1\u7684Red Hat\u5185\u6838\uff0c\u90a3\u4e48\u5b83\u5c31\u5047\u5b9a\u670916\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002\u8fd9\u5bf9\u96c5\u5178\u4eba\u6765\u8bf4\u4e5f\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u57282.4\u4e2d\uff0c\u901a\u8fc7\u5728&lt\uff1blinux/autoconf\u3002h&gt\uff1b\u3002\n\u5982\u679c\u5728\u8bbe\u8ba1\u7528\u4e8e\u4fbf\u643a\u8f6f\u4ef6\u7684\u7ed3\u6784\u7684fieldsinside\u65f6\u5fc5\u987b\u5047\u5b9a\u4e00\u4e2a\u7f13\u5b58\u7ebf\u5927\u5c0f\uff0c\u8bf7\u4f7f\u752832\u5b57\u8282\u7f13\u5b58\u7ebf\u3002\u4f8b\u5982\uff0cmem_map_t\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u3002\u8bf7\u6ce8\u610f\uff0c32\u5b57\u8282\u5bf9\u9f50\u7684\u7f13\u5b58\u7ebf\u4e5f\u662f16\u5b57\u8282\u5bf9\u9f50\u7684\u3002PowerPC 601\u540d\u4e49\u4e0a\u6709\u4e00\u4e2a64\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a\u8fde\u63a5\u768432\u5b57\u8282\u7f13\u5b58\u7ebf\u3002Sparc64\u6709\u4e00\u4e2a32\u5b57\u8282\u7684L1\u548c\u4e00\u4e2a64\u5b57\u8282\u7684L2\u7f13\u5b58\u7ebf\u3002\u5c06\u6240\u6709\u7cfb\u7edf\u90fd\u89c6\u4e3a\u5177\u670932\u4e2a\u5b57\u8282\u7f13\u5b58\u7ebf\u5e76\u679a\u4e3e\u5f02\u5e38\uff08\u5982\u679c\u6709\uff09\u8981\u5bb9\u6613\u5f97\u591a\u3002Alpha\u548cSparc64\u670932\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\uff0c\u4f46Athlon\u548c\u5b89\u817e\uff08\u8bc1\u660e\u8fd9\u4e00\u89c4\u5219\u7684\u4f8b\u5916\uff09\u670964\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002IBM S/390 G6\u6709\u4e00\u4e2a256K\u7684\u4e00\u7ea7\u7f13\u5b58\uff0c\u5e26\u6709128\u5b57\u8282\u7684\u7f13\u5b58\u7ebf\u3002\n\u5728\u7edd\u5927\u591a\u6570\u5904\u7406\u5668\u4e0a\uff0c32\u5b57\u8282\u7f13\u5b58\u7ebf\u662f\u6b63\u786e\u7684\u9009\u62e9\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u572832\u5b57\u8282\u7684\u60c5\u51b5\u4e0b\u89e3\u51b3\u5e76\u907f\u514d\u4e86\u8db3\u8ff9\u548c\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u98a0\u7c38\u573a\u666f\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\u5c31\u53ef\u4ee5\u907f\u514d\u5b83\u4eec\u3002\nLinux\u7528\u5206\u914d\u4e86\u4e24\u4e2a4K\u9875\u9762\u7684task_\u7ed3\u6784\u8868\u793a\u6bcf\u4e2a\u8fdb\u7a0b\u3002\u4efb\u52a1\u5217\u8868\u662f\u4efb\u52a1\u7ed3\u6784\u7684\u5217\u8868&#39\uff1bsof\u6240\u6709\u73b0\u6709\u6d41\u7a0b\u3002runqueue\u662f\u4efb\u52a1\u7ed3\u6784\u7684\u5217\u8868&#39\uff1b\u8fd9\u662f\u6240\u6709\u53ef\u8fd0\u884c\u8fdb\u7a0b\u7684\u4e00\u90e8\u5206\u3002\u6bcf\u6b21\u8c03\u5ea6\u7a0b\u5e8f\u9700\u8981\u67e5\u627e\u53e6\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u8fdb\u7a0b\u65f6\uff0c\u5b83\u90fd\u4f1a\u5728\u6574\u4e2a\u8fd0\u884c\u961f\u5217\u4e2d\u641c\u7d22\u6700\u503c\u5f97\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\nIBM[Bryant00]\u7684\u4e00\u4e9b\u4eba\u6ce8\u610f\u5230\uff0c\u82e5\u6709\u51e0\u4e2a\u7ebf\u7a0b\uff0c\u8c03\u5ea6\u5360\u7528\u4e86\u76f8\u5f53\u5927\u7684\u53ef\u7528CPU\u65f6\u95f4\u3002\u5728\u4e00\u53f0\u5177\u6709\u6570\u767e\u4e2a\u672c\u5730Java\u7ebf\u7a0b\u7684\u5355\u5904\u7406\u5668\u673a\u5668\u4e0a\uff0c\u4ec5\u8c03\u5ea6\u7a0b\u5e8f\u5c31\u5360\u7528\u4e86\u8d85\u8fc725%\u7684\u53ef\u7528CPU\u3002\u8fd9\u5728sharedmemory SMP\u673a\u5668\u4e0a\u53d8\u5f97\u66f4\u7cdf\uff0c\u56e0\u4e3a\u5185\u5b58\u603b\u7ebf\u4e89\u7528\u589e\u52a0\u3002\u8fd9\u4e0d\u662f&#39\uff1bt\u523b\u5ea6\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8c03\u5ea6\u5668\u4e2d\u7684goodness\uff08\uff09\u4f8b\u7a0b\u5f15\u7528\u4e86task_\u7ed3\u6784\u4e2d\u7684\u51e0\u4e2a\u4e0d\u540c\u7f13\u5b58\u7ebf\u3002\u5728\u91cd\u65b0\u7ec4\u7ec7\u4efb\u52a1\u7ed3\u6784\u4e4b\u540e\uff0cgoodness\uff08\uff09\u73b0\u5728\u53ea\u5f15\u7528\u4e00\u6761\u7f13\u5b58\u7ebf\uff0cCPU\u5468\u671f\u8ba1\u6570\u4ece179\u4e2a\u5468\u671f\u51cf\u5c11\u5230115\u4e2a\u5468\u671f\u3002\u8fd9\u4ecd\u7136\u5f88\u591a\u3002\n\u4e0b\u9762\u662f\u91cd\u8981\u7684\u7f13\u5b58\u7ebf\u3001Linux\u8c03\u5ea6\u5faa\u73af\u548cthegoodness\uff08\uff09\u4f8b\u7a0b\u3002\u8c03\u5ea6\u5668\u5faa\u73af\u904d\u5386entirerunqueue\uff0c\u7528goodness\uff08\uff09\u8ba1\u7b97\u6bcf\u4e2a\u8fdb\u7a0b\uff0c\u5e76\u627e\u5230\u4e0b\u4e00\u4e2a\u8981\u8fd0\u884c\u7684\u6700\u4f73\u8fdb\u7a0b\u3002\n\u7ed3\u6784\u4efb\u52a1{\u2026long counter\uff1b//\u5173\u952e2cd\u7f13\u5b58\u7ebf\u957f\u4f18\u5148\u7ea7\uff1b\u65e0\u7b26\u53f7\u957f\u7b56\u7565\uff1b\u7ed3\u6784mm_struct*mm\uff0c*active_mm\uff1bint\u6709_cpu\uff1bint\u5904\u7406\u5668\uff1b\u7ed3\u6784\u5217\u8868_headrun_lisT//\u53ea\u6709\u7b2c\u4e00\u4e2a\u957f\u5355\u8bcd\u2026}\uff1btmp=\u8fd0\u884c\u961f\u5217\u5934\u3002\u4e0b\u4e00\u4e2awhile\uff08tmp\uff01=&amp\uff1brunqueue_head\uff09{p=list_entry\uff08tmp\uff0cstruct task_struct\uff0crun_list\uff09\uff1bif\uff08can_schedule\uff08p\uff09\uff09{//\u5728\u53e6\u4e00\u4e2aCPU\u4e0a\u8fd0\u884cint weight=goodness\uff08p\uff0cthis_CPU\uff0cprev-&gt\uff1bactive_mm\uff09\uff1bif\uff08weight&gt\uff1bc\uff09c=weight\uff0cnext=p\uff1b}tmp=tmp-&gt\uff1b\u4e0b\u4e00\u6b65\uff1b}#\u5b9a\u4e49\u8fdb\u7a0b\u66f4\u6539\u60e9\u7f5a15//\u5904\u7406\u5668\u5173\u8054\u9759\u6001\u5185\u8054int goodness\uff08struct task_struct*p\uff0cint this_cpu\uff0cstruct mm_struct*this_mm\uff09{int weight\uff1b\u5982\u679c\uff08p-&gt\uff1bpolicy\uff01=SCHED_OTHER\uff09{weight=1000+p-&gt\uff1brt_priority\uff1b//\u5b9e\u65f6\u8fdb\u7a0b\u9000\u51fa\uff1b}\u91cd\u91cf=p-&gt\uff1b\u67dc\u53f0\u5982\u679c\uff08\uff01\u91cd\u91cf\uff09\u6389\u51fa\u6765\uff1b//\u6ca1\u6709\u5269\u4f59\u7684\u91cf\u5b50#ifdef _usmp _; if\uff08p-&gt\uff1b\u5904\u7406\u5668==\u6b64cpu\uff09\u6743\u91cd+=\u7a0b\u5e8f\u66f4\u6539U\u60e9\u7f5a\uff1b//\u5904\u7406\u5668\u5173\u8054\u6027#endif\uff08p-&gt\uff1bmm==this_-mm\uff09//\u76f8\u540c\u7ebf\u7a0b\u7c7b\u6743\u91cd+=1\uff1b//\u7535\u6d41\uff1f\u91cd\u91cf+=p-&gt\uff1b\u4f18\u5148\u4e8b\u9879out\uff1a\u8fd4\u56de\u6743\u91cd\uff1b}\n\u5373\u4f7f\u5bf9\u4e8e\u8d1f\u8f7d\u5f88\u91cd\u7684\u670d\u52a1\u5668\uff0c\u957f\u8fd0\u884c\u961f\u5217\u4e5f\u80af\u5b9a\u4e0d\u662f\u5e38\u89c1\u7684\u60c5\u51b5\u3002\u8fd9\u662f\u56e0\u4e3a\u4e8b\u4ef6\u9a71\u52a8\u7684\u7a0b\u5e8f\u4f7f\u7528poll\uff08\uff09\u8fdb\u884c\u81ea\u6211\u8c03\u5ea6\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cJava\u3001Apache\u548cTUX\u66f4\u559c\u6b22\u7ebf\u7a0b\u5316\u98ce\u683c\u3002\u8bbd\u523a\u7684\u662f\uff0cpoll\uff08\uff09\u4e5f\u5b58\u5728\u53ef\u4f38\u7f29\u6027\u95ee\u9898\uff0c\u5728\u5176\u4ed6Unix\u7cfb\u7edf\u4e0a\u4e5f\u662f\u5982\u6b64[Honeyman 99]\u3002\u6b64\u5916\uff0cLinux 2.4 x86\u5185\u6838\u5c06\u6700\u5927\u7ebf\u7a0b\u6570\u589e\u52a0\u52304000\u4e2a\u4ee5\u4e0a\u3002\n\u5728SMP\u673a\u5668\u4e0a\uff0c\u8fdb\u7a0b\u4e0e\u5b83\u4eec\u8fd0\u884c\u7684\u6700\u540e\u4e00\u4e2aCPU\u5177\u6709\u8c03\u5ea6\u5173\u8054\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4e00\u4e9b\u5de5\u4f5c\u96c6\u4ecd\u7136\u5728\u672c\u5730\u7f13\u5b58\u4e2d\u3002\u4f46\u662f\u8c03\u5ea6\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5fae\u5999\u7684SMP\u9519\u8bef\u3002\u5f53\u4e00\u4e2aCPU\u5728\u8fd0\u884c\u961f\u5217\u4e0a\u6ca1\u6709\u8fdb\u7a0b\u65f6\uff0c\u8c03\u5ea6\u7a0b\u5e8f\u5c06\u628a\u5b83\u5206\u914d\u7ed9\u4e00\u4e2a\u4e0e\u53e6\u4e00\u4e2aCPU\u6709\u4eb2\u7f18\u5173\u7cfb\u7684\u53ef\u547d\u540d\u8fdb\u7a0b\u3002\u660e\u667a\u7684\u505a\u6cd5\u662f\u9996\u5148\u5411\u8fd0\u884c\u961f\u5217\u4e0a\u7684\u8fdb\u7a0b\u5206\u914d\u66f4\u591a\u91cf\u5b50\uff0c\u4e5f\u8bb8\u662f\u90a3\u4e9b\u4e0eCPU\u6709\u5173\u8054\u7684\u8fdb\u7a0b\u3002\u5373\u4f7f\u8fd9\u6837\uff0c\u7a7a\u95f2\u4e5f\u53ef\u80fd\u66f4\u597d\uff0c\u5c24\u5176\u662f\u5728\u8fd0\u884c\u961f\u5217\u8f83\u77ed\u7684\u60c5\u51b5\u4e0b\u3002\n\u73b0\u4ee3CPU\u79ef\u6781\u5730\u9884\u53d6\u6307\u4ee4\uff0c\u4f46\u6570\u636e\u5462\uff1fCPU\u4e0d&#39\uff1bt\u9884\u53d6\u6570\u636e\u7f13\u5b58\u7ebf\uff0c\u4f46\u77e2\u91cf\u5316\u7f16\u8bd1\u5668\u548c\u7a0b\u5e8f\u53ef\u4ee5\u3002\u6839\u636eCPU\u5bf9\u7f13\u5b58\u7ebf\u7684\u5904\u7406\u91cf\uff0c\u53ef\u80fd\u9700\u8981\u63d0\u524d\u9884\u53d6\u591a\u6761\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u9884\u56de\u8fc1\u63d0\u524d\u4e86\u8db3\u591f\u957f\u7684\u65f6\u95f4\uff0c\u5b83\u5c31\u8d62\u4e86&#39\uff1bt\u5224\u65ad\u7f13\u5b58\u7ebf\u662f\u5426\u5728\u5185\u5b58\u4e2d\uff0c\u800c\u4e0d\u662fL2[Intel99a]\u3002\n\u901a\u5e38\uff0c\u9884\u53d6\u7528\u4e8e\u591a\u5a92\u4f53\u5185\u6838\u548c\u77e9\u9635\u64cd\u4f5c\uff0c\u5176\u4e2d\u9884\u53d6\u5730\u5740\u53ef\u4ee5\u8f7b\u677e\u8ba1\u7b97\u3002\u5728\u6570\u636e\u7ed3\u6784\u4e0a\u8fd0\u884c\u7684\u7b97\u6cd5\u4e5f\u53ef\u4ee5\u4f7f\u7528\u9884\u53d6\u3002\u9664\u4e86\u9884\u53d6\u5730\u5740\u5c06\u9075\u5faaalink\u800c\u4e0d\u662f\u5730\u5740\u8ba1\u7b97\u4e4b\u5916\uff0c\u5176\u4ed6\u65b9\u6cd5\u4e5f\u9002\u7528\u3002\u6570\u636e\u7ed3\u6784\u7684\u9884\u53d6\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5185\u5b58\u5e26\u5bbd\u7684\u589e\u52a0\u6bd4\u5ef6\u8fdf\u7684\u51cf\u5c11\u66f4\u5feb\u3002\u904d\u5386\u6570\u636e\u7ed3\u6784\u66f4\u5bb9\u6613\u51fa\u73b0\u5ef6\u8fdf\u95ee\u9898\u3002\u901a\u5e38\u53ea\u4f7f\u7528\u7ed3\u6784\u4e2d\u7684\u51e0\u4e2a\u5b57\u6bb5\uff0c\u800c\u4f7f\u7528\u591a\u5a92\u4f53\u65f6\uff0c\u901a\u5e38\u4f1a\u68c0\u67e5\u6bcf\u4e2a\u5b57\u6bb5\u3002\n\u5982\u679c\u4e00\u6761\u9884\u53d6\u6307\u4ee4\u53ef\u4ee5\u5728\u4f7f\u7528\u7f13\u5b58\u7ebf\u4e4b\u524d\u8c03\u5ea620-25\u6b21\u6216SOI\u6307\u4ee4\uff0c\u5219\u53d6\u6570\u53ef\u4ee5\u5b8c\u5168\u91cd\u53e0\u6307\u4ee4\u6267\u884c\u3002\u7cbe\u786e\u7684\u9884\u53d6\u8c03\u5ea6\u8ddd\u79bb\u662f\u5904\u7406\u5668\u548c\u5185\u5b58\u7684\u4e00\u4e2a\u7279\u5f81\u3002\u8d85\u6807\u91cf\u5904\u7406\u5668\u4e00\u6b21\u6267\u884c\u591a\u6761\u6307\u4ee4\u3002\n\u5982\u679c\u7b97\u6cd5\u6b63\u5728\u904d\u5386\u53ef\u80fd\u662finL2\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4f7f\u7528\u7f13\u5b58\u7ebf\u4e4b\u524d\u5b89\u6392\u9884\u53d66-10\u6761\u6307\u4ee4\uff0c\u5219\u53d6\u6570\u53ef\u4ee5\u5b8c\u5168\u4e0e\u6307\u4ee4\u6267\u884c\u91cd\u53e0\u3002\nLinux\u8c03\u5ea6\u7a0b\u5e8f\u5faa\u73af\u662f\u4ece\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u9884\u53d6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u8005\uff0c\u56e0\u4e3agoodness\uff08\uff09\u5f88\u77ed\uff0c\u5728IBMpatch\u4e4b\u540e\uff0c\u5b83\u53ea\u89e6\u53ca\u4e00\u6761\u7f13\u5b58\u7ebf\u3002\n\u8fd9\u662f\u8c03\u5ea6\u7a0b\u5e8f\u7684\u9884\u53d6\u7248\u672c\u3002\u5728goodness\uff08\uff09\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4e0e\u4e8c\u7ea7\u7f13\u5b58\u7ebf\u7684\u9884\u53d6\u91cd\u53e0\u3002\ntmp=\u8fd0\u884c\u961f\u5217\u5934\u3002\u4e0b\u4e00\u4e2awhile\uff08tmp\uff01=&amp\uff1brunqueue_head\uff09{p=list_entry\uff08tmp\uff0cstruct task_struct\uff0crun_list\uff09\uff1btmp=tmp-&gt\uff1bnext\uff1bCacheLine_Prefetch\uff08tmp-&gt\uff1bnext\uff09//movl xx\uff08%ebx\uff09\uff0c%eax if\uff08can_schedule\uff08p\uff09\uff09{int weight=goods\uff08p\uff0cthis_cpu\uff0cprev-&gt\uff1bactive_mm\uff09\uff1bif\uff08weight&gt\uff1bc\uff09c=\u91cd\u91cf\uff0cnext=p\uff1b\u00a0\u00a0\u00a0 } }\n\u534e\u76db\u987f\n......", "note_en": "Cache memories work on the carrot and stick principle. Thecarrot is the Principle of Locality and the stick is Amdahl&#39;s Law.The Principle of Locality says that programs tend to cluster theirmemory references. A memory location referenced once is likely to bereferenced again: temporal locality. A memory location nearby areferenced location is likely to be referenced soon: spatiallocality. And Amdahl&#39;s Law says that the performance improvement tobe gained from using some faster component is limited by the fractionof time the faster component is used. In this case, CPU and cache arefast components and memory is slow.\n If your program adheres to the Principle of Locality, it benefitsfrom fast cache memory and runs at processor speed. If it doesn&#39;t, itis held accountable to Amdahl&#39;s Law and runs at memory speed. Hitrates have to be very high, say 98%, before incremental increases inprocessor speed are even noticeable.\n Amdahl&#39;s Law has a special circumstances penalty for multiprocessors[Schimmel94]. Thrashing on a multiprocessor can slow down all of theprocessors. They each wait for each other waiting for memory and theleverage a multiprocessor offers works in reverse. Adherence to thePrinciple of Locality for multiprocessors, but not to the point ofFalse Sharing, isn&#39;t just a nicety, it is a necessity.\n The object of cache programming style is to increase this locality.It is important to understand the structure and behavior of caches,but it is more important to know the basic properties to takeadvantage of and the worst cases to avoid. This article goes intodetails and the summary provides guidelines.\n   As a running example, I am going to look at Linux [Maxwell99]and at the scheduler in particular. The idea is to modify datastructures and code just slightly, trying to use the cache moreeffectively. Hopefully I will achieve two goals: a practical tutorialon caches and some performance improvements for Linux.\n Instead of talking about cache memory systems in general, I willmostly use my circa 1998 350 MHz Deschutes Pentium II system as aspecific example. It has these characteristics:\n  Storage\u00a0\u00a0\u00a0 Size\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Latency\u00a0\u00a0\u00a0 Notes ----------------------------------------- ---------------------------- register\u00a0\u00a0 32 bytes\u00a0\u00a0 3ns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 register renaming file L1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 32K\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 6ns\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 on-chip, half Pentium-II clockrate L2\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 256K\u00a0\u00a0\u00a0\u00a0\u00a0 57 ns\u00a0\u00a0\u00a0\u00a0\u00a0off-chip, on-package [Intel99a] memory\u00a0\u00a0\u00a0\u00a0 64 MB\u00a0\u00a0\u00a0\u00a0\u00a0162 ns\u00a0\u00a0\u00a0\u00a0 100 MHz SDRAM, single bank disk\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 10GB\u00a0\u00a0\u00a0\u00a0\u00a0 9ms\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 DMA IDE network\u00a0\u00a0\u00a0 whatever\u00a0\u00a0 whenever\u00a0\u00a056K PPP\n   These numbers are subject to change. CPU performance improves atabout 55%/year and memory improves at about 7%/year. Memory is big,cheap and slow while cache is small, fast and expensive. Double DataRate SDRAM and Rambus, when available, will improve memory bandwidthbut not latency. These improvements will help more predictableapplications like multimedia but not less predictable programs suchas Linux.\n   First, a few words about caches in general. Cache memory fitsinto the storage hierarchy in terms of both size and speed. Cacheline misses, page faults and HTTP requests are the same thing atdifferent levels of this hierarchy. When a Squid proxy doesn&#39;t havean object in its cache, it forwards the HTTP request to the originserver. When a CPU requests an address which isn&#39;t in memory, a pagefault occurs and the page is read from disk. When a CPU requests anaddress which isn&#39;t in cache, the containing cache line is read frommemory. LRU, working set, associative, coherency, hashing,prefetching are all techniques and terminology which are used in eachlevel of the storage hierarchy.\n In each case, one smaller faster level in the hierarchy is backed byanother bigger slower level. If performance is limited by excessiveuse of the slower level, then according to Amdahl&#39;s Law, littleimprovement can be made by just making the faster level faster.\n With respect to cache memory [Handy98], the most important thing tounderstand is the cache line. Typically a cache line is 32 bytes longand it is aligned to a 32 byte offset. First a block of memory, amemory line, is loaded into a cache line. This cost is a cache miss,the latency of memory. Then, after loading, bytes within a cache linecan be referenced without penalty as long as it remains in the cache.If the cache line isn&#39;t used it will be dropped eventually whenanother memory line needs to be loaded. If the cache line ismodified, it will need to be written before it is dropped.\n This is the simplest and most important view of a cache memory. Itslesson is two-fold: pack as much into a cache line as possible anduse as few cache lines as possible. Future memory bandwidth increases(DDR and Rambus) will reward this practice. The more complexcharacteristics of cache, the structure and behavior, are importantfor understanding and avoiding worst case cache behavior:thrashing.\n Competing for and sharing of cache lines is a good thing, up to apoint, when it becomes a bad thing. Ideally a fast cache will have ahigh cache hit rate and the performance will not be bound to thespeed of the memory. But a really bad thing, thrashing, happens whenthere is too much competition for too few cache lines. This happensin worst case scenarios for data structures. Unfortunately thecurrent profiling tools look at the instructions rather than data.This means that a programmer must be aware of worst case scenariosfor data structures and avoid them. A useful tool for finding a hotspot is cacheprof [Seward].\n   The Pentium II [Shanley97] 32K L1 cache consists of 1024 32 bytecache lines partitioned into instruction and data banks of 512 lineseach. It uses the color bits 5-11 to index into an array of sets ofcache lines. In parallel, it compares the tag bits 12-31 (12-35 withPentium III Physical Address Extension) for each of the cache linesin the indexed set. L1 uses a 4-way set associative mapping whichdivides the 512 lines into 128 sets of 4 cache lines.\n Each of these sets is really a least recently used (LRU) list. Ifthere is a match, the matching cache line is used and it is moved tothe front of the list. If there isn&#39;t a match, the data is fetchedfrom L2, the cache line at the end of the list is replaced and thenew entry is put at the front of the list.\n Two memory lines of the same color compete for the same set of 4 L1cache lines. They are off the same color if their color bits (5-11)are the same. Alternatively they are of the same color if theiraddresses differ by a multiple of 4096: 2 ^ (7 color bits + 5 offsetbits). For example, address 64 and 12352 differ by 12288 which is3*4096. So, 64 and 12352 compete for a total of 4 L1 cache lines. But64 and 12384 differ by 12320, not a multiple of 4096, so they don&#39;tcompete for the same L1 cache lines.\n Instructions are also cached. The Pentium II L1 cache is a Harvard,or split instruction/data cache. This means that instructions anddata never compete for the same L1 cache lines. L2 is a unifiedcache. Unified means that there is a single cache bank and thatinstructions and data compete for cache lines.\n L2 is similar to L1 except larger and much slower. The on-package256K L2 cache on my Pentium II has 8192 cache lines. It is also 4-wayset associative but is unified. There are Pentium II&#39;s with 512K ofL2 which increase the set size to 8. Also, there are PIII&#39;s with upto 2 MB of L2. If there is a cache line miss for L2, the cache lineis fetched from memory. Two memory lines compete for the same L2cache lines if they differ by a multiple of 64K: 2 ^ (11 cache colorbits + 5 offset bits).\n      We will start with the simple stuff. It is better to align justabout everything to a long word boundary. Linux is written in the gccprogramming language and a careful study of the gcc standardsdocument, &#34;Using and Porting GNU CC&#34; [Stallman00], istherefore necessary: no one embraces and extends quite like RichardStallman. gcc is particularly helpful with structure field alignmentwhich are intelligently and automatically aligned. ANSI C Standardallows for packing or padding according to the implementation.\n     gcc automatically aligns d_reclen to a long boundary. This workswell for unsigned short, but for short on the x86 the compiler mustinsert sign extension instructions. If you are using a short to savespace, consider using an unsigned short. For example, in&lt;linux/mm.h&gt; changing the field vm_avl_height into an unsignedshort saves 32 bytes of instructions for a typical build. It couldjust as well be an int.\n     Strings should be aligned as well. For example, strncmp() cancompare two long words at a time, cheap SIMD, if both source anddestination are long word aligned. The x86 code generator for egcs2.95.2 has a nice little bug that doesn&#39;t align short strings at alland aligns long strings to the cache line:\n  char* short_string = &#34;a_short_string&#34;; char* long_string = &#34;a_long_long_long_long_long_long_long_st ring&#34;;  .LC0: \u00a0\u00a0\u00a0 .string\u00a0\u00a0\u00a0&#34;a_short_string&#34;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 // an unaligned string \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0 .align 32 .LC1:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // aligned to cacheline \u00a0\u00a0\u00a0 .string\u00a0\u00a0\u00a0&#34;a_long_long_long_long_long_long_long_st ring&#34;\n   What is necessary here is to align both strings to long wordswith .align 4. This uses less space and has better alignment. On atypical Linux build, this saves about 8K.\n   Arrays and lists of structures offer an opportunity to cachealign large amounts of data. If the frequently accessed fields arecollected into a single cache line, they can be loaded with a singlememory access. This can reduce latency and cache footprint. However,it can also increase cache footprint if large amounts of data arebeing accessed. In this case, packing efficiency and also cachepollution are more important.\n So for arrays, the base of an array should be cache aligned. The sizeof a structure must be either an integer multiple or an integerdivisor of the cache line size. If these conditions hold, then byinduction, each element of the array the cache line will be alignedor packed. Linked structures are analogous for alignment but don&#39;thave the size constraint.\n An array of structures of type mem_map_t is used by the pageallocator as a software page table:\n  /*  * Try to keep the most commonly accessed fields in single cachelines  * here (16 bytes or greater).\u00a0 This ordering should beparticularly  * beneficial on 32-bit processors. ...  */ typedef struct page{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //from linux-2.4.0-test2 \u00a0\u00a0\u00a0 structlist_head\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0list;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 2,4 \u00a0\u00a0\u00a0 struct address_space*\u00a0\u00a0mapping;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 structpage*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 next_hash;\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0atomic_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,1+1 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0flags;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 structlist_head\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lru;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 2,4 \u00a0\u00a0\u00a0wait_queue_head_t\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0wait;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 5,10 \u00a0\u00a0\u00a0 structpage**\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pprev_hash;\u00a0 // 1,2 \u00a0\u00a0\u00a0 struct buffer_head*\u00a0\u00a0\u00a0\u00a0buffers;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 unsignedlong\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0virtual;\u00a0\u00a0\u00a0\u00a0 // 1,2 \u00a0\u00a0\u00a0 struct zone_struct*\u00a0\u00a0\u00a0\u00a0zone;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 1,2 }mem_map_t;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // 18* 4 ==\u00a0 72 x86 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// 36 * 4 == 144 Alpha\n   On a 32-bit Pentium, the size of mem_map_t is 72 bytes. It was40 bytes in 2.2.16. Since the array allocation code usessizeof(mem_map_t) to align the array, the base is aligned incorrectlyas well. In any case MAP_ALIGN() can be replaced withL1_CACHE_ALIGN() which uses simpler code:\n  #define MAP_ALIGN(x) ((((x) % sizeof(mem_map_t)) ==0)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0\u00a0 ? (x) : ((x) + sizeof(mem_map_t) - ((x) %sizeof(mem_map_t))))  lmem_map = (struct page *)(PAGE_OFFSET + \u00a0\u00a0 MAP_ALIGN((unsigned long)lmem_map - PAGE_OFFSET));  #define L1_CACHE_ALIGN(x)(((x)+(L1_CACHE_BYTES-1))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \\ \u00a0\u00a0\u00a0 &amp;~(L1_CACHE_BYTES-1))  lmem_map = (struct page*) L1_CACHE_ALIGN((unsigned long)lmem_map);\n   On a 64-bit Alpha, a long is 8 bytes with an 8 byte alignmentand sizeof(mem_map_t) is 144 bytes. The flags field doesn&#39;t need tobe a long, it should be an int. Since atomic_t is also an int and thetwo fields are adjacent, they would pack into a single long word. Thepage wait queue head used to be a pointer. Changing it back wouldsave enough to allow cache aligning both 32-bit and 64-bitversions.\n   It is possible to target and conditionally compile for aparticular processor. Linux has an include file,&lt;asm-i386/cache.h&gt;, defining the L1 cache line size,L1_CACHE_BYTES, for the x86 architecture family. The slab allocator[Bonwick94], which allocates small objects from memory pages, usesL1_CACHE_BYTES when a client requests a cache aligned object with theSLAB_HWCACHE_ALIGN flag.\n  /*  * include/asm-i386/cache.h  */ #ifndef __ARCH_I386_CACHE_H #define __ARCH_I386_CACHE_H /* bytes per L1 cache line */ #if\u00a0\u00a0\u00a0 CPU==586 || CPU==686 #define\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0L1_CACHE_BYTES\u00a0 32 #else #define\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0L1_CACHE_BYTES\u00a0 16 #endif #endif\n   If someone got a Red Hat kernel conservatively compiledtargeting the 486, then it assumed 16 byte cache lines. It was alsowrong for the Athlon. This has been fixed in 2.4 by defining andusing the kernel configuration macro CONFIG_X86_L1_CACHE_BYTES in&lt;linux/autoconf.h&gt;.\n If you must assume one cache line size when laying out the fieldsinside of structs intended for portable software, use 32 byte cachelines. For example, mem_map_t could use this. Notice that 32 bytealigned cache lines are also 16 byte aligned. The PowerPC 601nominally has a 64 byte cache line but it really has two connected 32byte cache lines. The Sparc64 has a 32 byte L1 and a 64 byte L2 cacheline. It is much easier to think of all systems as having 32 bytecache lines and enumerate the exceptions, if any. Alpha and Sparc64have 32 byte cache lines but the Athlon and Itanium, the exceptionsthat proves the rule, have 64 byte cache lines. And the IBM S/390 G6has a 256K L1 cache with 128 byte cache lines.\n On the vast majority of processors, 32 byte cache lines is the rightthing to do. And most importantly, if you have addressed and avoidedthe footprint and worst case thrashing scenarios in the 32 byte case,you will have avoided them for the other cases.\n   Linux represents each process with a task_struct which isallocated two 4K pages. The task list is a list of the task_struct&#39;sof all existing processes. The runqueue is a list of thetask_struct&#39;s of all runnable processes. Each time the schedulerneeds to find another process to run, it searches the entire runqueuefor the most deserving process.\n Some folks at IBM [Bryant00] noticed that if there were a couple ofthousand threads that scheduling took a significant percentage of theavailable CPU time. On a uniprocessor machine with a couple ofthousand native Java threads, just the scheduler alone was taking upmore than 25% of the available CPU. This gets worse on a sharedmemory SMP machine because memory bus contention goes up. Thisdoesn&#39;t scale.\n It turned out that the goodness() routine in the scheduler referencedseveral different cache lines in the task_struct. After reorganizingtask_struct, goodness() now references only a single cache line andthe CPU cycle count was reduced from 179 cycles to 115 cycles. Thisis still a lot.\n Here is the important cache line, the Linux scheduling loop and thegoodness() routine. The scheduler loop iterates through the entirerunqueue, evaluates each process with goodness() and finds the bestprocess to run next.\n  struct task_struct { \u00a0\u00a0\u00a0 ... \u00a0\u00a0\u00a0long\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0counter;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// critical 2cd cache line \u00a0\u00a0\u00a0long\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 priority; \u00a0\u00a0\u00a0 unsigned long\u00a0\u00a0\u00a0 policy; \u00a0\u00a0\u00a0 struct mm_struct *mm, *active_mm; \u00a0\u00a0\u00a0int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 has_cpu; \u00a0\u00a0\u00a0int\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 processor; \u00a0\u00a0\u00a0 struct list_headrun_list;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 //only first long word \u00a0\u00a0\u00a0 ... };  tmp = runqueue_head.next; while (tmp != &amp;runqueue_head) { \u00a0\u00a0\u00a0 p = list_entry(tmp, struct task_struct,run_list); \u00a0\u00a0\u00a0 if (can_schedule(p)){\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 // running on another CPU \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int weight = goodness(p,this_cpu, prev-&gt;active_mm); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (weight &gt; c) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 c= weight, next = p; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 tmp = tmp-&gt;next; }  #define PROC_CHANGE_PENALTY\u00a0\u00a015\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // processor affinity  static inline int goodness(struct task_struct *p, \u00a0\u00a0\u00a0 int this_cpu, struct mm_struct *this_mm) { \u00a0\u00a0\u00a0 int weight; \u00a0\u00a0\u00a0 if (p-&gt;policy != SCHED_OTHER) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight = 1000 +p-&gt;rt_priority; // realtime processes \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 goto out; \u00a0\u00a0\u00a0 } \u00a0\u00a0\u00a0 weight = p-&gt;counter; \u00a0\u00a0\u00a0 if (!weight) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 gotoout;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0 // no quanta left #ifdef __SMP__ \u00a0\u00a0\u00a0 if (p-&gt;processor == this_cpu) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight +=PROC_CHANGE_PENALTY;\u00a0 // processor affinity #endif \u00a0\u00a0\u00a0 if (p-&gt;mm ==this_mm)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0 // same thread class \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 weight +=1;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // ascurrent? \u00a0\u00a0\u00a0 weight += p-&gt;priority; out: \u00a0\u00a0\u00a0 return weight; }\n   A long runqueue is certainly not the common case even forheavily loaded servers. This is because event driven programsessentially self schedule with poll(). The contrasting style,threading, is preferred by Java, Apache and TUX. It is ironic thatpoll() also had scalability problems, and on other Unix systems aswell [Honeyman99]. Also, the Linux 2.4 x86 kernels increase themaximum number of threads past 4000.\n On SMP machines, processes have a scheduling affinity with the lastCPU they ran on. The idea is that some of the working set is still inthe local cache. But the scheduler has a subtle SMP bug. When a CPUhas no processes on the runqueue, the scheduler will assign it arunnable process with an affinity to another CPU. It would be wiserto first dole out more quanta to processes on the runqueue, perhapsonly those with an affinity to that CPU. Even then it may be betterto idle, particularly with a short runqueue.\n   Modern CPUs aggressively prefetch instructions but what aboutdata? CPUs don&#39;t prefetch data cache lines, but vectorizing compilersdo and programs can. Depending on the amount of CPU processing percache line, you may need to prefetch more than one cache line ahead.If the prefetch is scheduled sufficiently far in advance, it won&#39;tmatter if the cache line is in memory rather than L2 [Intel99a].\n Typically prefetching is used in multimedia kernels and matrixoperations where the prefetched address can be easily calculated.Algorithms operating on data structures can use prefetch as well. Thesame methods apply except that the prefetched address will follow alink rather than an address calculation. Prefetching for datastructures is important since memory bandwidth is increasing fasterthan latency is decreasing. Traversing a data structure is morelikely to suffer from a latency problem. Often only a few fields in astructure are used whereas with multimedia usually every bit isexamined.\n   If a prefetch instruction can be scheduled 20-25 or soinstructions before the cache line will be used, the fetch cancompletely overlap instruction execution. The exact prefetchscheduling distance is a characteristic of the processor and memory.Superscalar processors execute more than one instruction at atime.\n   If an algorithm is traversing a data structure likely to be inL2, and it can schedule a prefetch 6-10 instructions before the cacheline will be used, the fetch can completely overlap instructionexecution.\n The Linux scheduler loop is a good candidate for cache lineprefetching from L2 because goodness() is short and after the IBMpatch, it only touches a single cache line.\n Here is a prefetching version of the scheduler. It overlaps theprefetch of the next cache line from L2 during the execution ofgoodness().\n  tmp = runqueue_head.next; while (tmp != &amp;runqueue_head) { \u00a0\u00a0\u00a0 p = list_entry(tmp, struct task_struct,run_list); \u00a0\u00a0\u00a0 tmp = tmp-&gt;next; \u00a0\u00a0\u00a0CacheLine_Prefetch(tmp-&gt;next);\u00a0\u00a0\u00a0\u00a0\u00a0 //movl xx(%ebx),%eax \u00a0\u00a0\u00a0 if (can_schedule(p)) { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 int weight = goodness(p,this_cpu, prev-&gt;active_mm); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (weight &gt; c) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 c= weight, next = p; \u00a0\u00a0\u00a0 } }\n   By the wa\n......", "posttime": "2022-02-17 01:41:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f13\u5b58,\u7f16\u7a0b,cache", "title": "\u7f13\u5b58\u7f16\u7a0b\u98ce\u683c\u7684\u8981\u7d20\uff082000\uff09", "title_en": "The Elements of Cache Programming Style (2000)", "transed": 1, "url": "https://www.usenix.org/legacy/publications/library/proceedings/als00/2000papers/papers/full_papers/sears/sears_html/index.html", "via": "", "real_tags": ["\u7f13\u5b58", "\u7f16\u7a0b", "cache"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073658, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u82b1\u5728\u4e0e\u533b\u751f\u4e92\u52a8\u4e0a\u7684\u65f6\u95f4\u6bd4\u6211\u901a\u5e38\u5e0c\u671b\u7684\u8981\u591a\uff0c\u4ed6\u4eec\u603b\u662f\u544a\u8bc9\u6211\u6211\u6709\u9ad8\u8840\u538b\u3002\u6211\u4ee5\u4e3a\u662f\u767d\u5927\u8863\u7efc\u5408\u75c7\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5728\u4e00\u5468\u5185\u6bcf\u5929\u6d4b\u91cf\u8840\u538b\uff0c\u8bb0\u5f55\u4fe1\u606f\uff0c\u5e76\u7ed8\u5236\u7ed3\u679c\u56fe\uff08\u4ee5\u8bc1\u660e\u6211\u662f\u5bf9\u7684\uff09\u3002\u4e0b\u9762\u662f\u6211\u5982\u4f55\u4f7f\u7528matplotlib\u521b\u5efa\u5fc3\u7387\u8ddf\u8e2a\u5668\u7684\u5feb\u901f\u6307\u5357\u3002\n\u4e00\u4e9b\u5173\u4e8e\u8840\u538b\u7684\u5feb\u901f\u4fe1\u606f\uff1a\u5f53\u8bfb\u53d6\u8840\u538b\u65f6\uff0c\u8f83\u9ad8\u7684\u6570\u5b57\u662f\u6536\u7f29\u538b\u8bfb\u6570\uff0c\u8f83\u4f4e\u7684\u6570\u5b57\u662f\u8212\u5f20\u538b\u8bfb\u6570\u3002\u66f4\u591a\u5173\u4e8e\u8fd9\u4e24\u65b9\u9762\u7684\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\u8fd9\u4e24\u4e2a\u8bfb\u6570\u90fd\u662f\u4ee5\u6beb\u7c73\u6bcf\u6c5e\u67f1\uff08mmHg\uff09\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\uff0c\u6211\u4eec\u5982\u4f55\u8ba9\u4e00\u9897\u884c\u661f\u878d\u5165\u6211\u4eec\u7684\u8840\u6db2\u662f\u6211\u65e0\u6cd5\u7406\u89e3\u7684\u2026\n\u6211\u5c06Python\u4e0eNumPy\u548cMatplotlib\u7ed3\u5408\u4f7f\u7528\u6765\u89e3\u6790\u548c\u7ed8\u5236\u6570\u636e\u3002Numpy\u4f5c\u4e3a\u4e00\u4e2a\u7528\u4e8e\u9635\u5217\u64cd\u4f5c\u548c\u6570\u503c\u8ba1\u7b97\u7684\u5f00\u6e90\u5e93\uff0c\u5728\u79d1\u5b66\u754c\u88ab\u5e7f\u6cdb\u4f7f\u7528\u3002Matplotlib\u662f\u4e00\u4e2a\u793e\u533a\u5f00\u53d1\u7684Python\u7ed8\u56fe\u5e93\uff0c\u5b83\u5229\u7528\u4e86NumPy\u3002\u6211\u7528\u6807\u51c6\u7684\u8840\u538b\u8bfb\u6570\u5668\u83b7\u53d6\u4e86\u6570\u636e\u3002\n\u6211\u5c06\u6570\u636e\u8bb0\u5f55\u5728\u4e00\u4e2a\u5916\u90e8\u6587\u4ef6\u4e2d\uff0c\u5e76\u5c06\u5176\u683c\u5f0f\u5316\u4e3ajson\u3002\u7136\u540e\u6211\u5c06\u5176\u5bfc\u5165\u6211\u7684\u7a0b\u5e8f\u5e76\u89e3\u6790\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8bb0\u5f55\u6570\u636e\uff0c\u6216\u8005\u7b80\u5355\u5730\u5c06\u6570\u636e\u786c\u7f16\u7801\u5230\u7a0b\u5e8f\u4e2d\u3002\u6211\u7684\u6570\u636e\u5982\u4e0b\u6240\u793a\uff1a\n\u7136\u540e\u6211\u8fed\u4ee3\u6211\u7684\u6570\u636e\u5e76\u586b\u5145NumPy\u6570\u7ec4\u3002Matplotlib\u9700\u8981NumPy\u6570\u7ec4\u6765\u6253\u5370\u6570\u636e\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4ece\u6570\u636e\u4e2d\u63d0\u53d6\u65e5\u671f\u548c\u5fc3\u810f\u4fe1\u606f\u3002\ndef\u89e3\u6790\u6570\u636e\u65e5\u671f\u7cfb\u7edf\u76f4\u5f84\u8109\u51b2\uff08json\u6570\u636e\uff09\uff1a\n\u6211\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u7b56\u5212\u4e86\uff01\u6211\u5c06\u4f7f\u7528\u201c\u65e5\u671f\u201d\u6570\u7ec4\u4f5c\u4e3ax\u8f74\u3002\u5982\u679c\u6211\u60f3\u753b\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u66f2\u7ebf\u56fe\uff0c\u6211\u53ef\u4ee5\u7b80\u5355\u5730\u753b\u51fa\u6211\u7684\u65e5\u671f\u548c\u90a3\u4e9b\u65e5\u5b50\u7684\u6536\u7f29\u6307\u6570\u3002\u6211\u901a\u8fc7\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1a\n\u73b0\u5728\u6211\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u60c5\u8282\uff01\u8fd9\u610f\u5473\u7740\u975e\u5e38\u5c11\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u3002\u6211\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u529f\u80fd\u5c06\u6807\u7b7e\u6dfb\u52a0\u5230\u7ed8\u56fe\u4e2d\uff1a\n\u9664\u4e86\u6536\u7f29\u538b\u8bfb\u6570\uff0c\u6211\u8fd8\u60f3\u7ed8\u5236\u4e00\u5468\u7684\u8212\u5f20\u538b\u8bfb\u6570\uff08\u6700\u597d\u5728\u540c\u4e00\u5f20\u56fe\u4e0a\uff09\u3002\u8fd9\u5c31\u50cf\u7b2c\u4e8c\u6b21\u8c03\u7528plot\u51fd\u6570\u4e00\u6837\u7b80\u5355\uff0c\u4f46\u4f7f\u7528\u7684\u662f\u8212\u5f20\u6570\u636e\u3002\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\u73b0\u5728\uff0c\u8fd9\u5f88\u96be\u7406\u89e3\u548c\u9605\u8bfb\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u8bbe\u8ba1\u7ebf\u6761\u5e76\u63d0\u4f9b\u4e00\u4e2a\u56fe\u4f8b\u3002\u901a\u8fc7\u5411\u7ed8\u56fe\u8c03\u7528\u4f20\u9012\u6807\u7b7e\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5411\u7ebf\u6761\u548c\u56fe\u4f8b\u6dfb\u52a0\u6807\u7b7e\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c06linestyle\u503c\u4f20\u9012\u7ed9plot\u8c03\u7528\u6765\u8bbe\u7f6e\u7ebf\u6761\u7684\u6837\u5f0f\u3002\u4e0b\u9762\u662f\u6700\u7ec8\u7684\u56fe\u8868\uff1a\nplt\u3002\u6807\u9898\uff08&#34\uff1b\u8840\u538b&#34\uff1b\uff09\n\u8fd9\u5468\u6211\u8fd8\u8bb0\u5f55\u4e86\u6211\u7684\u8109\u640f\uff0c\u4e0b\u9762\u662f\u6211\u521b\u5efa\u7684\u4e00\u4e2a\u56fe\u8868\uff0c\u663e\u793a\u4e86\u6211\u7684\u8109\u640f\u7387\uff1a\n\u8d77\u521d\uff0c\u6211\u60f3\u628a\u6240\u6709\u4e09\u4e2a\u8bfb\u6570\u653e\u5728\u540c\u4e00\u4e2a\u56fe\u8868\u4e0a\uff0c\u4ee5\u663e\u793a\u76f8\u5173\u6027\u3002\u7136\u800c\uff0c\u8840\u538b\u548c\u8109\u640f\u7387\u662f\u4ee5\u4e24\u79cd\u4e0d\u540c\u7684\u5355\u4f4d\u6d4b\u91cf\u7684\uff0c\u5373\u6bcf\u5206\u949f\u7684\u5fc3\u8df3\u6570\u548c\u6bcf\u6beb\u7c73\u7684\u884c\u661f\u6570\u3002\u6211\u628a\u6570\u636e\u5206\u6210\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u56fe\u8868\uff0c\u56e0\u4e3a\u6c34\u661f\u4e0d\u80fd\u653e\u5728\u56fe\u8868\u4e0a\uff0c\u4f46\u4e3b\u8981\u662f\u4e3a\u4e86\u4fdd\u6301\u6570\u636e\u7684\u4e00\u81f4\u6027\u548c\u6613\u8bfb\u6027\u3002\n\u6211\u5e0c\u671b\u8fd9\u662f\u5bf9Matplotlib\u7684\u6709\u76ca\u4ecb\u7ecd\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u673a\u4f1a\uff0c\u8ba9\u6211\u91cd\u65b0\u5ba1\u89c6\u4e00\u4e9b\u5feb\u901f\u7684\u4e1a\u4f59\u7231\u597d\u7f16\u7a0b\uff0c\u540c\u65f6\u8bc1\u660e\u81ea\u5df1\u662f\u5bf9\u7684\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u6ce8\u91ca\u6216\u589e\u5f3a\u663e\u793a\u6548\u679c\u6765\u8fdb\u4e00\u6b65\u7406\u89e3\u8fd9\u6bb5\u4ee3\u7801\u3002\u6211\u8ba1\u5212\u6700\u7ec8\u5728\u4e00\u4e2a\u7f51\u7ad9\u4e0a\u53d1\u5e03\u8fd9\u4e9b\u4fe1\u606f\uff0c\u5c55\u793a\u7ed9\u6211\u7684\u533b\u751f\uff01\u7ed3\u679c\u6211\u53ea\u662f\u5f97\u4e86\u767d\u5927\u8863\u7efc\u5408\u75c7\u3002", "note_en": "I\u2019ve spent a bit more time interacting with doctors lately than I would usually prefer, and they always tell me I have high blood pressure. I thought it was  white coat syndrome. So, I decided to take my blood pressure every day for a week, record the information, and plot my results (to prove I\u2019m right). Here\u2019s a quick guide on how I used  matplotlib to create a heart rate tracker.\n  Some quick information about blood pressure: when reading blood pressure, the higher number is the systolic reading and the lower number is the diastolic reading. More information on both can be found  here. Both readings are measured in millimeters per mercury (mmHg), and how we fit a planet into our blood is beyond me\u2026\n   I used Python with  NumPy\u00a0and  Matplotlib\u00a0to parse and plot my data. Numpy is widely used in the scientific community as an open-source library for array manipulation and numerical computing. Matplotlib is a community-developed plotting library for Python that takes advantage of NumPy. I captured my data using a standard blood pressure reader.\n   I recorded my data in an external file and formatted it as  json. I then imported it into my program and parsed the data. You may record your data in similar ways or simply hardcode the data into the program. \u00a0My data looks something like this:\n  I then iterated over my data and populated the NumPy arrays. Matplotlib requires NumPy arrays to plot data. In this case, I am pulling the dates and the heart information out of my data.\n def parse_data_dates_sys_dia_pulse(json_data):\r dates =[]\r systolic_data = [] \r diastolic_data = [] \r pulse_data = [] \r for data in json_data[&#39;heart_info&#39;]:\r dates = np.append(dates, data[&#39;date&#39;])\r systolic_data = np.append(systolic_data, data[&#39;systolic&#39;])\r diastolic_data = np.append(diastolic_data, data[&#39;diastolic&#39;])\r pulse_data = np.append(pulse_data, data[&#39;pulse&#39;])\r return dates,systolic_data, diastolic_data,pulse_data\n  I can now start plotting! I\u2019ll be using my \u201cdates\u201d array as my x-axis. If I wanted to do a very basic plot, I could simply plot my dates and my systolic reading on those days. I do that by running the following code:\n    Now I have a simple plot! This means very little though, so let\u2019s add more information. I can add labels to my plot using these functions:\n  In addition to my systolic readings, I want to plot my diastolic readings over the week (preferably on the same graph). It\u2019s as easy as calling the plot function a second time but with diastolic data instead. The code looks like this:\n    Now, that\u2019s difficult to decipher and read, so let\u2019s style the lines and provide a legend. We can add a label to the lines and legend by passing a  label value to the plot call. We can also style the lines by passing a  linestyle value to the plot call. Below is the final graph:\n   plt.title(&#34;Blood pressure&#34;)\rplt.xlabel(&#34;dates&#34;)\rplt.ylabel(&#34;mmHg&#34;)\rplt.plot(dates, systolic_data, label = &#34;systolic&#34;, linestyle=&#34;solid&#34;)\rplt.plot(dates, diastolic_data, label = &#34;diastolic&#34;, linestyle=&#34;dashed&#34;)\rplt.legend()\rplt.show()\n  During this week I also recorded my pulse, so here is a graph I created showing my pulse rate:\n Originally I thought about putting all three readings on the same graph to show correlation. However, blood pressure and pulse rate are measured in two different units, beats per minute and planets per millimeter. I broke the data off into two different charts because, well, Mercury can\u2019t fit on a graph, but mostly to keep the data consistent and legible.\n  I hope this was a helpful introduction to Matplotlib. It was a great opportunity for me to revisit some quick hobby programming and prove myself right at the same time. You can take this code further by providing annotations or jazzing up the display. I plan to eventually host this information on a website to show to my doctors! Turns out I just have White Coat Syndrome.", "posttime": "2022-02-17 01:27:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b80\u4ecb,matplotlib,\u6570\u636e", "title": "Matplotlib\u7b80\u4ecb\uff1a\u5236\u4f5c\u5fc3\u810f\u4fe1\u606f\u8ddf\u8e2a\u5668", "title_en": "A Brief Intro to Matplotlib: Making a Heart Information Tracker", "transed": 1, "url": "https://spin.atomicobject.com/2022/02/16/matplotlib-heart-tracker/", "via": "", "real_tags": ["\u7b80\u4ecb", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073656, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u662f\u5728\u516c\u5171\u533a\u5757\u94fe\uff08\u53c8\u79f0\u53bb\u4e2d\u5fc3\u5316\u8d26\u672c\u3001\u52a0\u5bc6\u548cWeb3\uff09\u7684\u80cc\u666f\u4e0b\u5bf9\u9690\u79c1\u666f\u89c2\u7684\u9610\u8ff0\u3002\u7b2c\u4e00\u90e8\u5206\u6d89\u53ca\u4e3a\u4ec0\u4e48\u9690\u79c1\u662f\u5927\u89c4\u6a21\u91c7\u7528\u7684\u5173\u952e\u969c\u788d\uff0c\u4ee5\u53ca\u9690\u79c1\u7684\u4e0d\u540c\u65b9\u9762\u3002\u7b2c\u4e8c\u90e8\u5206\u8c03\u67e5\u4e86\u4e09\u79cd\u4e0d\u540c\u7684\u9690\u79c1\u65b9\u6cd5\uff1a\u901a\u8fc7\u96f6\u77e5\u8bc6\u8bc1\u660e\uff0c\u4ec5\u9488\u5bf9\u533f\u540d\uff0c\u4ee5\u53ca\u901a\u8fc7\u4e00\u79cd\u79f0\u4e3aMOCCAs\u7684\u65b0\u62bd\u8c61\u3002\n\u73b0\u4ee3\u91d1\u878d\u4f53\u7cfb\u8fd0\u4f5c\u826f\u597d\uff0c\u6211\u4eec\u4e0d\u5fc5\u62c5\u5fc3\u65e5\u5e38\u4ea4\u6613\u7684\u5b89\u5168\u6216\u9690\u79c1\u3002\u5f53\u4f60\u5728\u6742\u8d27\u5e97\u8d2d\u7269\uff0c\u901a\u8fc7\u652f\u7968\u652f\u4ed8\u79df\u91d1\uff0c\u6216\u5728\u94f6\u884c\u83b7\u5f97\u77ed\u671f\u8d37\u6b3e\u65f6\uff0c\u4f60\u4e0d\u5fc5\u62c5\u5fc3\u4f60\u7684\u4ea4\u6613\u4f1a\u53d7\u5230\u975e\u76f8\u5173\u65b9\u7684\u516c\u5f00\u5ba1\u67e5\u3002\u5728\u73b0\u4ee3\u94f6\u884c\u548c\u4fe1\u7528\u5361\u7f51\u7edc\u4e2d\uff0c\u4ea4\u6613\u7ec6\u8282\uff08\u4e3b\u8981\uff09\u7559\u5728\u76f8\u5173\u7684\u91d1\u878d\u4e2d\u4ecb\u673a\u6784\u548c\u5f53\u5c40\u3002\u7528\u6237\uff08\u7406\u60f3\u60c5\u51b5\u4e0b\uff09\u4e0d\u5fc5\u62c5\u5fc3\u4ed6\u4eec\u7684\u654f\u611f\u4fe1\u606f\u88ab\u6cc4\u9732\u7ed9\u516c\u4f17\uff0c\u5f53\u5c40\uff08\u5927\u90e8\u5206\uff09\u53ef\u4ee5\u8ffd\u8e2a\u975e\u6cd5\u6d3b\u52a8\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4eca\u5929\u5728\u6d41\u884c\u533a\u5757\u94fe\u4e0a\u8fdb\u884c\u7684\u4ea4\u6613\u5374\u4e0d\u80fd\u5982\u6b64\u3002\u5c3d\u7ba1\u533a\u5757\u94fe\u6280\u672f\u6709\u671b\u5206\u6563\u548c\u6c11\u4e3b\u5316\u5f53\u524d\u7684\u91d1\u878d\u751f\u6001\u7cfb\u7edf\uff0c\u4f46\u5927\u591a\u6570\u7cfb\u7edf\u751a\u81f3\u65e0\u6cd5\u6ee1\u8db3\u6211\u4eec\u6240\u671f\u671b\u7684\u6700\u57fa\u672c\u7684\u9690\u79c1\u7ea7\u522b\u3002\u60a8\u8d2d\u4e70\u7684\u62ab\u8428\u53ef\u4ee5\u6c38\u4e45\u8bb0\u5f55\uff0c\u60a8\u7684\u6240\u6709\u4ea4\u6613\u90fd\u53ef\u4ee5\u5728Etherscan\u4e0a\u8f7b\u677e\u516c\u5f00\u8bbf\u95ee\u3002\u6709\u4e00\u4e9b\u4ee5\u9690\u79c1\u4e3a\u91cd\u70b9\u7684\u9879\u76ee\uff0c\u4f46\u7531\u4e8e\u529f\u80fd\u548c\u6613\u7528\u6027\u65b9\u9762\u7684\u4e0d\u5e73\u7b49\uff0c\u5b83\u4eec\u76ee\u524d\u6ca1\u6709\u5f97\u5230\u5145\u5206\u5229\u7528\u3002\u8fd9\u6807\u5fd7\u7740\u9690\u79c1\u662f\u5927\u89c4\u6a21\u91c7\u7528\u533a\u5757\u94fe\u6280\u672f\u7684\u5173\u952e\u969c\u788d\u4e4b\u4e00\u3002\n\u516c\u5171\u533a\u5757\u94fe\u8bbe\u7f6e\u4e2d\u7684\u9690\u79c1\u4e0d\u662f\u5168\u6709\u6216\u5168\u65e0\u7684\u529f\u80fd\u3002\u76f8\u53cd\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u4e14\u591a\u5c42\u9762\u7684\u95ee\u9898\uff0c\u5728\u5bfc\u822a\u65f6\u9700\u8981\u5c0f\u5fc3\u3002\u8ba9\u6211\u4eec\u9996\u5148\u6df1\u5165\u4e86\u89e3\u4e0e\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u76f8\u5173\u7684\u9690\u79c1\u7c7b\u578b\u3002\nA\u8f74\uff1a\u533f\u540d\u6027\u548c\u4fdd\u5bc6\u6027\u3002\u5e7f\u4e49\u800c\u8a00\uff0c\u91d1\u878d\u4ea4\u6613\u6709\u4e24\u79cd\u9690\u79c1\uff1a\u533f\u540d\u548c\u4fdd\u5bc6\u3002\u5f53\u975e\u8425\u5229\u7ec4\u7ec7\u6536\u5230\u533f\u540d\u6350\u6b3e\u65f6\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u83b7\u5f97\u5173\u4e8e\u6350\u8d60\u8005\u7684\u4fe1\u606f\uff08\u533f\u540d\uff09\uff0c\u4f46\u77e5\u9053\u6536\u5230\u7684\u6350\u6b3e\u91d1\u989d\u3002\u5f53\u4f60\u5728\u836f\u5e97\u9000\u623f\u65f6\uff0c\u4f60\u7684\u8d2d\u4e70\u662f\u4fdd\u5bc6\u7684\u2014\u2014\u4f60\u80cc\u540e\u7684\u4eba\u4e0d\u77e5\u9053\u4f60\u53ef\u80fd\u4f1a\u88ab\u5f00\u54ea\u79cd\u836f\u4ee5\u53ca\u5b83\u4eec\u7684\u4ef7\u683c\uff0c\u4f46\u4ed6\u4eec\u77e5\u9053\u4f60\u6b63\u5728\u8d2d\u4e70\u3002\n\u8f74B\uff1a\u94fe\u4e0av.s.\u4e2d\u95f4\u5e94\u7528\u7a0b\u5e8f\u3002\u533a\u5757\u94fe\u548c\u52a0\u5bc6\u8d27\u5e01\u7684\u4e00\u4e2a\u57fa\u672c\u8bba\u9898\u662f\u5728\u6ca1\u6709\u53ef\u4fe1\u4e2d\u4ecb\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u91d1\u878d\u4ea4\u6613\u7684\u80fd\u529b\u3002\u7d27\u968f\u6bd4\u7279\u5e01\u7684\u811a\u6b65\uff0c\u51e0\u4e4e\u6240\u6709\u52a0\u5bc6\u8d27\u5e01\u90fd\u5141\u8bb8\u5728\u6ca1\u6709\u4e2d\u95f4\u4eba\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u652f\u4ed8\u3002\u4ee5\u592a\u574a\uff08Ethereum\uff09\u7b49\u667a\u80fd\u5408\u7ea6\u5e73\u53f0\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f7f\u652f\u4ed8\u4e4b\u5916\u7684\u91d1\u878d\u4ea4\u6613\u80fd\u591f\u5728\u6ca1\u6709\u4ea4\u6613\u548c\u501f\u8d37\u7b49\u4e2d\u4ecb\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u201c\u94fe\u4e0a\u201d\u4e00\u8bcd\u6765\u63cf\u8ff0\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u7528\u4f5c\u5171\u8bc6\u8282\u70b9\u64cd\u4f5c\u5458\u7684\u529f\u80fd\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u652f\u4ed8\u3001\u4ea4\u6613\u3001\u501f\u8d37\u3002\uff08\u9700\u8981\u6ce8\u610f\u7684\u662f\uff1a\u7528\u6237\u901a\u5e38\u4e0d\u4f1a\u8fd0\u884c\u81ea\u5df1\u7684\u4e00\u81f4\u6027\u8282\u70b9\u3002\u4f8b\u5982\uff0cWeb3\u94b1\u5305\u7684\u7b2c\u4e09\u65b9RPC\u7aef\u70b9\u63d0\u4f9b\u5546\u5728\u5b9e\u8df5\u4e2d\u5e94\u8be5\u88ab\u89c6\u4e3a\u4e2d\u4ecb\u3002\uff09\u94fe\u4e0a\u5e94\u7528\u7684\u4e00\u4e9b\u4f8b\u5b50\u5305\u62ec\u6bd4\u7279\u5e01\u548cZcash\u652f\u4ed8\u3001Uniswap\u4ea4\u6613\u548c\u590d\u5408\u8d37\u6b3e\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u4e2d\u4ecb\u673a\u6784\u5728\u751f\u6001\u7cfb\u7edf\u4e2d\u4ecd\u7136\u65e0\u5904\u4e0d\u5728\u3002Coinbase\u7b49\u4ea4\u6613\u6240\u662f\u5b83\u4eec\u4e3a\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u7684\u4e2d\u4ecb\u673a\u6784\uff0c\u7528\u6237\u9700\u8981\u5c06\u8d44\u4ea7\u5b58\u5165\u8fd9\u4e9b\u4ea4\u6613\u6240\u8fdb\u884c\u4ea4\u6613\u3002\u751a\u81f3\u4e00\u4e9b\u201c\u5206\u6563\u201d\u534f\u8bae\u4e5f\u4f9d\u8d56\u4e8e\u4e2d\u592e\u64cd\u4f5c\u7684\u4e2d\u4ecb\u3002\u4f8b\u5982\uff0cdYdX\u548cDiversiFi\u90fd\u6709\u4e2d\u592e\u4ea4\u6362\u8fd0\u8425\u5546\u3002\u8fd9\u4e0eUniswap\u8fd9\u6837\u7684\u94fe\u4e0a\u540c\u884c\u4e0d\u540c\uff0cUniswap\u4e0d\u9700\u8981\u4e0e\u5171\u8bc6\u7f51\u7edc\u4e4b\u5916\u7684\u670d\u52a1\u5668\u8fdb\u884c\u4ea4\u4e92\u3002dYdX\u548cDiversiFi\u5bf9Coinbase\u7684\u4f18\u52bf\u5728\u4e8e\u6d88\u9664\u4e86\u8d44\u91d1\u5b89\u5168\u6240\u9700\u7684\u4fe1\u4efb\u3002\u76f8\u53cd\uff0c\u7528\u6237\u9700\u8981\u4fe1\u4efb\u5bc6\u7801\u548c\u4ee3\u7801\uff0c\u5c24\u5176\u662fSTARKs\uff0c\u4ee5\u786e\u4fdd\u5176\u8d44\u91d1\u7684\u5b89\u5168\u3002\u652f\u4ed8\u6e20\u9053\u7f51\u7edc\uff08\u5982Lightning network\uff09\u548c\u6c47\u603b\uff08\u5982Arbitrium\u3001\u4e50\u89c2\u4e3b\u4e49\u3001Aztec\u548cScroll\uff09\u662f\u53e6\u5916\u4e24\u7c7b\u4e2d\u95f4\u5e94\u7528\u7a0b\u5e8f\u3002\u5c3d\u7ba1\u76ee\u524d\u5927\u591a\u6570\u4e2d\u4ecb\u673a\u6784\u90fd\u662f\u96c6\u4e2d\u7684\uff0c\u4f46\u5b83\u4eec\u53ef\u4ee5\u88ab\u8bbe\u8ba1\u6210\u5206\u6563\u7684\uff0c\u8fd9\u5bf9\u4e8e\u5377\u88c5\u5c24\u5176\u53ef\u53d6\uff0c\u56e0\u4e3a\u5b83\u4eec\u76f4\u63a5\u4e0e\u4fa7\u94fe\u7ade\u4e89\u3002\u4f8b\u5982\uff0czk roll-up\u53ef\u4ee5\u6709\u4e00\u4e2a\u5177\u6709\u67d0\u79cd\u5f62\u5f0f\u7684\u5171\u8bc6\u673a\u5236\u7684roll-up sequencer\u7f51\u7edc\uff0c\u6709\u6548\u5730\u4f7froll-up\u6210\u4e3a\u4e00\u6761\u94fe\u3002\n\u4ee5\u4e0a\u4e24\u4e2aBROBLAST\u5e94\u7528\u7a0b\u5e8f\u7684\u5206\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u989d\u5916\u7684\u8f74\u6765\u8003\u8651\u9690\u79c1\uff1a\u94fe\u9690\u79c1\u4e0e\u9690\u79c1\u7684\u4e2d\u95f4\u5e2d\u3002\n\u6211\u7684\u4fe1\u606f\u662f\u5426\u5df2\u62ab\u9732\u7ed9\u6211\u59d4\u6258\u4ee3\u8868\u6211\u884c\u4e8b\u7684\u5b9e\u4f53\uff08\u6bd4\u5982\u8d35\u884c\u3001Coinbase\u548c1inch\u7b49\u6389\u671f\u805a\u5408\u673a\u6784\uff09\uff1f\n\u628a\u65a7\u5b50\u653e\u5728\u4e00\u8d77\u3002\u901a\u8fc7\u7ed3\u5408\u4e24\u4e2a\u9690\u79c1\u7279\u5f81\u8f74\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u9690\u79c1\u7684\u56db\u4e2a\u6982\u5ff5\uff1a\u533f\u540d\u6027\u548c\u673a\u5bc6\u6027\u4e4b\u95f4\uff0c\u4ee5\u53ca\u94fe\u4e0a\u4e0e\u4e2d\u95f4\u3002\u4e0b\u8868\u5217\u51fa\u4e86\u6bcf\u4e2a\u7c7b\u522b\u4e2d\u7684\u4e00\u4e2a\u9690\u79c1\u95ee\u9898\u3002\n\u6211\u5728Uniswap\u4e0a\u7684\u4ea4\u6613\u662f\u5426\u53ef\u4ee5\u94fe\u63a5\u5230\u6211\u5728\u94fe\u4e0a\u8fdb\u884c\u7684\u5176\u4ed6\u6d3b\u52a8\uff0c\u4f8b\u5982NFT\u4ea4\u6613\uff1f\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u4e0a\u8ff0\u4efb\u4f55\u4e00\u4e2a\u95ee\u9898\uff0c\u7b54\u6848\u90fd\u662f\u60a8\u7684\u4fe1\u606f\u88ab\u6c38\u4e45\u8bb0\u5f55\u5728\u94fe\u4e0a\uff0c\u5e76\u4f20\u8f93\u7ed9\u4e2d\u4ecb\u673a\u6784\u3002\u6709\u4e86\u8fd9\u6837\u7684\u7406\u89e3\uff0c\u6211\u4eec\u73b0\u5728\u80fd\u591f\u6df1\u5165\u7814\u7a76\u94fe\u4e0a\u548c\u4e2d\u95f4\u533a\u5757\u94fe\u5e94\u7528\u7a0b\u5e8f\u7684\u9690\u79c1\u6027\u3002\n\u514d\u8d23\u58f0\u660e1\uff1a\u5c3d\u7ba1\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u58f0\u79f0\u662f\u5206\u6563\u7684\uff0c\u4f46\u94fe\u4e0a\u667a\u80fd\u5408\u7ea6\u7684\u5f00\u53d1\u548c\u8bbf\u95ee\u901a\u5e38\u662f\u975e\u5e38\u96c6\u4e2d\u7684\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7f16\u7801\u9519\u8bef\u901a\u5e38\u4f1a\u5bfc\u81f4\u6570\u767e\u4e07\u7f8e\u5143\u7684\u5229\u7528\uff0c\u800cDEX\u4ea4\u6613\u901a\u5e38\u4f1a\u901a\u8fc7\u6570\u91cf\u4e0d\u65ad\u51cf\u5c11\u7684\u6316\u6398\u6c60\u6765\u5229\u7528\u7528\u6237\u7684\u4ea4\u6613\u83b7\u53d6\u81ea\u8eab\u5229\u6da6\uff08\u8fd9\u88ab\u79f0\u4e3aMEV\uff0c\u6216Miner Extracted Value\uff09\u3002\u6211\u4eec\u5c06\u4e0d\u5728\u8fd9\u91cc\u8fdb\u4e00\u6b65\u9610\u8ff0\u8fd9\u4e9b\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u91cd\u70b9\u662f\u9690\u79c1\u95ee\u9898\u3002\n\u514d\u8d23\u58f0\u660e2\uff1a\u9690\u79c1\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u9762\u662f\u9690\u79c1\u3001\u76d1\u7ba1\u548c\u5408\u89c4\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u6211\u4eec\u5c06\u4e0d\u6df1\u5165\u8ba8\u8bba\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u91d1\u878d\u4e2d\u4ecb\u673a\u6784\u6709\u6cd5\u5f8b\u4e49\u52a1\u4e0d\u4ec5\u4e86\u89e3\u5176\u5ba2\u6237\uff08KYC\uff09\uff0c\u800c\u4e14\u8bb0\u5f55\u548c\u62a5\u544a\u67d0\u4e9b\u91d1\u878d\u4ea4\u6613\u3002\u53cd\u6d17\u94b1\uff08AML\uff09\u662f\u8be5\u8ba1\u5212\u7684\u4e3b\u8981\u76ee\u6807\u4e4b\u4e00\u3002\u4f8b\u5982\uff0c\u52a0\u5bc6\u8d27\u5e01\u7684\u900f\u660e\u5ea6\u6700\u8fd1\u5e2e\u52a9\u53f8\u6cd5\u90e8\u8ffd\u56de\u4e862016\u5e74Bitfinex\u9ed1\u5ba2\u653b\u51fb\u4e2d\u88ab\u76d7\u768436\u4ebf\u7f8e\u5143\u8d44\u91d1\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4e0d\u6d89\u53ca\u76d1\u7ba1\u548c\u5408\u89c4\u95ee\u9898\uff0c\u800c\u4ec5\u4ece\u6280\u672f\u548c\u7406\u8bba\u5c42\u9762\u5173\u6ce8\u9690\u79c1\u95ee\u9898\u3002\n\u8ba9\u6211\u4eec\u9996\u5148\u770b\u770b\u652f\u4ed8\uff0c\u56e0\u4e3a\u5b83\u4eec\u57fa\u672c\u4e0a\u90fd\u5df2\u89e3\u51b3\uff0c\u4e0d\u9700\u8981\u4e2d\u4ecb\u673a\u6784\u3002Zcash\u548cMonero\u662f\u4e24\u79cd\u65e2\u533f\u540d\u53c8\u4fdd\u5bc6\u7684\u5927\u578b\u786c\u5e01\u3002\u5b83\u4eec\u5206\u522b\u4f9d\u8d56\u4e8e\u96f6\u77e5\u8bc6\u8bc1\u660e\u548c\u73af\u7b7e\u540d\u6765\u63d0\u4f9b\u4e0d\u540c\u7ea7\u522b\u7684\u533f\u540d\u6027\u548c\u4fdd\u5bc6\u6027\u3002\u6211\u4eec\u8fd8\u6709\u5176\u4ed6\u66f4\u9ad8\u6548\u7684\u79c1\u4eba\u652f\u4ed8\u65b9\u5f0f\uff0c\u4f46\u9700\u8981\u50cfMimblewimble\u8fd9\u6837\u7684\u4ea4\u4e92\uff0c\u6216\u8005\u4e0d\u9700\u8981\u50cfQuisquis\u548cAnonymous Zether\u8fd9\u6837\u4e0d\u65ad\u6269\u5c55\u7684UTXO\u96c6\u5408\u3002\n\u7136\u800c\uff0c\u9664\u4e86\u652f\u4ed8\u4e4b\u5916\uff0c\u60c5\u51b5\u5c31\u4e0d\u90a3\u4e48\u660e\u6717\u4e86\u3002\u4f8b\u5982\uff0c\u652f\u4ed8\u4e4b\u5916\u6700\u6210\u529f\u7684\u5e94\u7528\u4e4b\u4e00\u662f\u5728\u5206\u6563\u91d1\u878d\uff08DeFi\uff09\u9886\u57df\u3002\u6211\u4eec\u4ecd\u7136\u4e0d\u77e5\u9053\u6216\u5e7f\u6cdb\u5efa\u7acb\u4e86DeFi\u5e94\u7528\u7a0b\u5e8f\u7684\u9690\u79c1\u6280\u672f\u3002\n\u4e3a\u4e86\u4ece\u6574\u4f53\u4e0a\u5bf9\u6b64\u8fdb\u884c\u63a8\u7406\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6709\u4e00\u4e2a\u826f\u597d\u7684\u7406\u8bba\u6a21\u578b\u6765\u8ba8\u8bba\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u3002\u4e00\u822c\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5efa\u6a21\u4e3a\u8fed\u4ee3\u8ba1\u7b97\uff0c\u7531\u8f6c\u6362\u51fd\u6570f\u6307\u5b9a\uff0c\u8be5\u51fd\u6570\u8ba1\u7b97\uff08s t\u2032\uff09\uff0c\u2006 o u t p u t\uff09\u2004\u2190\u2004 f\uff08s t\uff0c\u2006 i n p u t\uff09\u7528\u4e8e\u6bcf\u4e2a\u542f\u52a8\u72b6\u6001\u548c\u8f93\u5165\u3002\n\u7528\u6237\u53ef\u4ee5\u5728\u5c06\u4e8b\u52a1\u63d0\u4ea4\u7ed9\u5171\u8bc6\u8282\u70b9\u8fdb\u884c\u5904\u7406\u4e4b\u524d\u5c06\u5176\u6784\u9020\u4e3a\u8f93\u5165\u3002\u4e3a\u4e86\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4fdd\u62a4\u7528\u6237\u7684\u9690\u79c1\uff0c\u6211\u4eec\u9700\u8981\u5728\u4e0d\u6cc4\u9732\u7528\u6237\u8eab\u4efd\u548c\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u8ba1\u7b97\u3002\u6709\u4e09\u79cd\u65b9\u6cd5\uff1a\uff081\uff09\u5c06\u8ba1\u7b97\u63a8\u79bb\u94fe\uff1b\uff082\uff09\u4fdd\u6301\u8ba1\u7b97\u900f\u660e\uff0c\u4f46\u9690\u85cf\u53d1\u8d77\u4eba\u7684\u8eab\u4efd\uff1b\uff083\uff09\u5bf9\u5177\u6709\u900f\u660e\u8f93\u51fa\u7684\u52a0\u5bc6\u8f93\u5165\u8fdb\u884c\u540c\u6001\u8ba1\u7b97\u3002\n\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKPs\uff09\u662f20\u4e16\u7eaa80\u5e74\u4ee3\u672b\u7406\u8bba\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u5bc6\u7801\u5b66\u9886\u57df\u7684\u4e00\u4e2a\u91cd\u8981\u53d1\u5c55\uff08\u8fd9\u4e9b\u8bfe\u5802\u8bb2\u7a3f\u7684\u7b2c\u4e00\u7ae0\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u7efc\u8ff0\uff09\u3002\u533a\u5757\u94fe\u73af\u5883\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\u5f62\u5f0f\u7684\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\u5728\u5b66\u672f\u4e0a\u901a\u5e38\u88ab\u79f0\u4e3aNIZK\uff0c\u6216\u975e\u4ea4\u4e92\u5f0f\u96f6\u77e5\u8bc6\u3002\u5f53\u8bc1\u660e\u7b80\u6d01\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u88ab\u79f0\u4e3aSNARGs\uff08\u6216SNARKs\uff09\uff0c\u6216\u7b80\u6d01\u7684\u975e\u4ea4\u4e92\u8bba\u8bc1\uff08\u77e5\u8bc6\uff09\u3002\u5176\u4ed6\u6709\u8da3\u7684\u7279\u6027\u662f\u900f\u660e\u6027\uff08S TARKs\uff09\u548c\u901a\u7528\u6027\uff0c\u8fd9\u4f7f\u5f97\u8bc1\u660e\u7cfb\u7edf\u53ef\u4ee5\u7528\u4e8e\u591a\u4e2a\u7535\u8def\uff0c\u800c\u65e0\u9700\u53d7\u4fe1\u4efb\u7684\u8bbe\u7f6e\u6216\u4e00\u4e2a\u901a\u7528\u53d7\u4fe1\u4efb\u7684\u8bbe\u7f6e\u3002\nZKPs\u5728\u516c\u5171\u533a\u5757\u94fe\u4e2d\u7684\u6838\u5fc3\u5e94\u7528\u662f\u6267\u884c\u53ef\u9a8c\u8bc1\u7684\u94fe\u5916\u8ba1\u7b97\u7684\u80fd\u529b\u3002\u901a\u5e38\uff0c\u9a8c\u8bc1\u4eba\u662f\u6700\u7ec8\u7528\u6237\uff08\u5728ZK\u5e94\u7528\u5e73\u53f0\u7684\u60c5\u51b5\u4e0b\uff09\u6216\u4e2d\u95f4\u4eba\uff08ZK\u6c47\u603b\uff09\uff0c\u800c\u9a8c\u8bc1\u4eba\u662f\u94fe\uff0c\u5373\u9a8c\u8bc1\u4eba\u96c6\u3002\u4f7f\u7528ZKPs\u8fdb\u884c\u4e00\u822c\u8ba1\u7b97\u7684\u4e00\u79cd\u7b80\u5355\u65b9\u6cd5\u662f\u76f4\u63a5\u8bc1\u660e\u72b6\u6001\u8f6c\u6362\u7684\u6b63\u786e\u6027\u3002\u4e3a\u4e86\u8be6\u7ec6\u8bf4\u660e\uff0c\u7528\u6237\u5728\u94fe\u5916\u8bc1\u660e\uff0c\u5bf9\u4e8e\u7279\u5b9a\u7684\u94fe\u4e0a\u72b6\u6001st\uff0c\u5f53\u5e94\u7528\u4e8e\u8d77\u59cb\u72b6\u6001st\u65f6\uff0c\u7528\u6237\u6709\u4e00\u4e2a\u8f93\u5165\uff0c\u8be5\u8f93\u5165\u4f1a\u5bfc\u81f4\u65b0\u7684\u72b6\u6001st\u2032\uff0c\u5e76\u5e26\u6709\u4e00\u4e9bo u p u t\u3002\u7136\u540e\uff0c\u5171\u8bc6\u8282\u70b9\u5728\u8986\u76d6\u65e7\u72b6\u6001\u4e4b\u524d\u9a8c\u8bc1\u6240\u63d0\u8bae\u7684\u72b6\u6001\u8f6c\u6362\u7684\u6709\u6548\u6027\u3002\u8fd9\u662fMina Snapps\u548cAleo\u7b49ZK\u5e94\u7528\u5e73\u53f0\u6240\u91c7\u7528\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u90fd\u53d7\u5230Zexe\u5b66\u672f\u5de5\u4f5c\u7684\u542f\u53d1\u3002\n\u900f\u660e\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u4e0e\u4e0a\u8ff0\u4f53\u7cfb\u7ed3\u6784\u4e4b\u95f4\u7684\u5173\u952e\u533a\u522b\u5728\u4e8e\uff0c\u7b80\u5355\u5730\u8bf4\uff0c\u66f4\u65b0\uff08s t\u2032\uff09\uff0c\u2006 \u54e6\uff0c\u2006 \u03c0\uff09 \u4ec5\u5bf9\u7528\u6237\u7528\u4e8e\u751f\u6210\u66f4\u65b0\u7684\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001ST\u6709\u6548\u3002\u5982\u679c\u591a\u4e2a\u7528\u6237\u5728\u6ca1\u6709\u534f\u8c03\u7684\u60c5\u51b5\u4e0b\u4e0e\u540c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\uff0c\u8fd9\u5c06\u5bfc\u81f4\u201c\u7ade\u4e89\u6761\u4ef6\u201d\u3002\u4e3a\u4e86\u8be6\u7ec6\u8bf4\u660e\uff0c\u5047\u8bbe\u6709\u4e24\u4e2a\u9488\u5bf9\u76f8\u540c\u94fe\u72b6\u6001ST0\u6784\u5efa\u7684\u6709\u6548\u4e8b\u52a1\uff0c\u5206\u522b\u5c06\u5176\u66f4\u65b0\u4e3aST1\u548cST2\u3002\u5f53\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u8bb0\u5f55\u5728\u94fe\u4e0a\u65f6\uff0c\u94fe\u4e0a\u72b6\u6001\u66f4\u65b0\u4e3as t 1\u3002\u56e0\u6b64\uff0c\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u968f\u540e\u5c06\u4f7f\u7528\u65b0\u72b6\u6001ST1\u800c\u4e0d\u662fST0\u8fdb\u884c\u9a8c\u8bc1\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5b83\u65e0\u6548\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u5206\u5272\u4e3a\u4e0d\u540c\u7684\u90e8\u5206\u6765\u7ed5\u8fc7\u8fd9\u79cd\u7ade\u4e89\u6761\u4ef6\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u540c\u65f6\u8bbf\u95ee\u4e0d\u5171\u4eab\u5168\u5c40\u72b6\u6001\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f8b\u5982\uff0c\u53ef\u4ee5\u72ec\u7acb\u8bbf\u95eeAleo\u4e2d\u7684\u4e0d\u540c\u8bb0\u5f55\uff09\u3002\u4f46\u8bb8\u591a\u6709\u8da3\u7684\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u2014\u2014\u4f8b\u5982\u6052\u5b9a\u529f\u80fd\u5e02\u573a\u6807\u8bb0\uff08CFMM\uff09\u2014\u2014\u7684\u72b6\u6001\u57fa\u672c\u4e0a\u5728\u6240\u6709\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u3002\n\u5c3d\u7ba1\u5bf9\u4e8egrand Claimes\u6765\u8bf4\uff0c\u7531\u4e8e\u4e0a\u8ff0\u95ee\u9898\uff0c\u5728\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u8f6c\u6362\u4e2d\u4f7f\u7528ZKPs\u662f\u4e00\u79cd\u201c\u5411\u524d\u4e00\u6b65\uff0c\u5411\u540e\u4e00\u6b65\u201d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u6784\u5efa\u4e3a\u76f8\u4e92\u65ad\u5f00\u8fde\u63a5\u7684\u7528\u6237\u670d\u52a1\u7684\u5927\u578b\u4ea4\u6362\u673a\u7684\u89e3\u51b3\u65b9\u6848\u662f\u6dfb\u52a0\u4e00\u4e2a\u4e2d\u4ecb\u6216\u4ea4\u6362\u673a\u8fd0\u8425\u5546\uff0c\u4f7f\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8fd0\u8425\u5546\u662f\u79c1\u6709\u7684\uff0c\u800c\u4e0d\u662f\u5728\u6240\u6709\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u4e0d\u5b8c\u5168\u91c7\u7528\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u5df2\u77e5\u7684\u65b9\u6cd5\u5411\u8fd9\u4e9b\u4e2d\u4ecb\u673a\u6784\u9690\u85cf\u8d38\u6613\u4fe1\u606f\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u5728Aleo\u548cMina\u7b49ZK\u5e94\u7528\u7a0b\u5e8f\u5e73\u53f0\u4e0a\u7684\u4ea4\u6362\u5b9e\u73b0\u4e86\u4ee5\u4e0b\u9690\u79c1\u5c5e\u6027\u3002\n\u4e3a\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u589e\u52a0\u673a\u5bc6\u6027\u5f88\u96be\u3002\u5982\u679c\u6211\u4eec\u4e0d\u8bd5\u56fe\u63d0\u4f9b\u673a\u5bc6\u6027\uff0c\u800c\u53ea\u662f\u4e3a\u4e86\u63d0\u4f9b\u533f\u540d\u6027\uff0c\u90a3\u8be5\u600e\u4e48\u529e\uff1f\u4f7f\u7528\u73b0\u6709\u5de5\u5177\u5df2\u7ecf\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff1a\u4f7f\u7528\u4e0d\u5012\u7fc1\u548c\u6df7\u5408\u5668\uff0c\u6bd4\u5982CoinJoin\u548cTornado Cash\uff0c\u4f60\u53ef\u4ee5\u8d44\u52a9\u65b0\u7684\u4f2a\u533f\u540d\u5730\u5740\u6765\u83b7\u5f97\u533f\u540d\u6027\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e9b\u5de5\u5177\u7684\u9009\u62e9\u6027\u52a0\u5165\u6027\u8d28\u610f\u5473\u7740\u6076\u610f\u7528\u6237\u6bd4\u5408\u6cd5\u7528\u6237\u66f4\u5bb9\u6613\u4f7f\u7528\u5b83\u4eec\u3002\u4f8b\u5982\uff0cColonial Pipeline\u52d2\u7d22\u8f6f\u4ef6\u4f7f\u7528CoinJoin\uff0c\u800cTornado Cash\u7ecf\u5e38\u7528\u4e8e\u8d44\u52a9\u533f\u540d\u5730\u5740\u4ee5\u8fdb\u884cDeFi\u9ed1\u5ba2\u653b\u51fb\u3002\n\u6709\u4e24\u4e2a\u9879\u76ee\u8bd5\u56fe\u5728\u900f\u660e\u7684\u667a\u80fd\u5408\u7ea6\u5e73\u53f0\u4e0a\u9ed8\u8ba4\u6784\u5efa\u533f\u540d\u6027\u3002\u7b2c\u4e00\u4e2a\u662fAztec Connect\uff0c\u8fd9\u662f\u4ee5\u592a\u574a\u5373\u5c06\u63a8\u51fa\u7684\u201czkzk\u6c47\u603b\u201d\uff0c\u5728\u4e0e\u53d7\u652f\u6301\u7684\u7b2c\u4e00\u5c42\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u4ea4\u6613\u65f6\u63d0\u4f9b\u4ea4\u6613\u533f\u540d\u6027\u3002\u6c47\u603b\u5408\u540c\u4ee3\u8868\u7b2c\u4e8c\u5c42\u7528\u6237\uff08\u5176\u8eab\u4efd\u5728\u94fe\u4e0a\u548c\u6c47\u603b\u63d0\u4f9b\u5546\u90fd\u9690\u85cf\uff09\u4e0e\u7b2c\u4e00\u5c42DeFi\u534f\u8bae\u4ea4\u4e92\uff0c\u4e3a\u8fd9\u4e9b\u7b2c\u4e8c\u5c42\u7528\u6237\u63d0\u4f9b\u533f\u540d\u6027\u3002\n\u7b2c\u4e8c\u662f\u4e9a\u9ebb\u7684\u5b66\u672f\u7814\u7a76\u3002\u5b83\u63d0\u8bae\u91cd\u65b0\u8bbe\u8ba1\u4e00\u4e2a\u7c7b\u4f3c\u4ee5\u592a\u574a\u7684\u667a\u80fd\u5408\u7ea6\u5e73\u53f0\uff0c\u4ee5\u652f\u6301\u7ec8\u7aef\u7528\u6237\u7684\u5185\u7f6e\u533f\u540d\u6027\u3002\u5728\u6838\u5fc3\u90e8\u5206\uff0cFLAX\u63d0\u51fa\u4e86\u4e00\u4e2aERC20\u4ee4\u724c\u6807\u51c6\u7684\u533f\u540d\u7248\u672c\uff0c\u8be5\u6807\u51c6\u5141\u8bb8\u4ee4\u724c\u4f7f\u7528\u7684\u533f\u540d\u548c\u539f\u5b50\u59d4\u6258\u3002\u6709\u8da3\u7684\u662f\uff0c\u5b9e\u73b0\u8fd9\u4e9b\u201c\u533f\u540dERC20\u201d\u4e0d\u9700\u8981\u65b0\u7684\u52a0\u5bc6\u6280\u672f\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e4b\u524d\u63d0\u5230\u7684\u4efb\u4f55\u79c1\u4eba\u652f\u4ed8\u65b9\u6848\u4e2d\u7684\u76f8\u540c\u6280\u672f\uff0c\u6bd4\u5982\u4ee3\u5e01\u5408\u540c\u4e2d\u7684Zcash\u3001Monero\u6216Zether\u3002\n\u4e0b\u8868\u6982\u8ff0\u4e86\u4e0a\u8ff0\u89e3\u51b3\u65b9\u6848\u7684\u9690\u79c1\u529f\u80fd\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u7701\u7565\u4e86\u4e2d\u95f4\u4eba\u4e00\u5217\uff0c\u56e0\u4e3a\u6ca1\u6709\u6d89\u53ca\u4efb\u4f55\u4e2d\u95f4\u4eba\u2014\u2014\u9664\u4e86Aztec Connect\u2014\u2014\u5b83\u53ef\u80fd\u63d0\u4f9b\u6765\u81ea\u4e2d\u95f4\u4eba\uff08\u6c47\u603b\u63d0\u4f9b\u5546\uff09\u7684\u533f\u540d\u6027\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5206\u6563\u7a0b\u5ea6\u548c\u8fd9\u4e9b\u63d0\u4f9b\u5546\u7684\u786e\u5207\u884c\u4e3a\u3002\n\u662f\uff08\u4e0d\u5012\u7fc1\u548c\u6405\u62cc\u673a\u53ef\u9009\uff0cAztec Connect\u548cFlash\u9ed8\u8ba4\uff09\n\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5bf9\u94fe\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u548c\u7528\u6237\u8f93\u5165\u8fdb\u884c\u52a0\u5bc6\uff0c\u4f46\u4ecd\u7136\u80fd\u591f\u5bf9\u5b83\u4eec\u8fdb\u884c\u8ba1\u7b97\uff0c\u751a\u81f3\u53ef\u4ee5\u5bfc\u51fa\u672a\u52a0\u5bc6\u7684\u516c\u5171\u8f93\u51fa\u4fe1\u606f\uff0c\u90a3\u4f1a\u600e\u4e48\u6837\uff1f\u8ba9\u6211\u4eec\u628a\u8fd9\u79cd\u7406\u60f3\u7684\u529f\u80fd\u79f0\u4e3a\u795e\u5947\u7684\u94fe\u4e0a\u673a\u5bc6\u8ba1\u7b97\u8bbe\u5907\uff08MOCCA\uff09\u3002\n\u76f4\u89c2\u5730\u8bf4\uff0cMOCCA\u4e3a\u72b6\u6001\u8f6c\u79fb\u51fd\u6570f\u63d0\u4f9b\u4e86\u5c3d\u53ef\u80fd\u597d\u7684\u4fdd\u5bc6\u6027\u3002\u5728\u7ed9\u5b9a\u5fc5\u8981\u7684\u52a0\u5bc6\u8f93\u5165\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u94fe\u4e0a\u8ba1\u7b97\uff0c\u5e76\u4e14\u8ba1\u7b97\u5e94\u8be5\u4ea7\u751f\u52a0\u5bc6\u548c\u66f4\u65b0\u7684\u72b6\u6001\u4ee5\u53ca\u4e00\u4e9b\u900f\u660e\u7684\u8f93\u51fa\u503c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u7a0b\u5e8f\u72b6\u6001\u548c\u8f93\u5165\u88ab\u52a0\u5bc6\u5230\u94fe\u4e2d\uff0c\u8fd9\u6837\u5171\u8bc6\u53ef\u4ee5\u6267\u884c\u7684\u552f\u4e00\u64cd\u4f5c\u5c31\u662f\u8ba1\u7b97\u72b6\u6001\u8f6c\u6362\uff0c\u8fd9\u610f\u5473\u7740\u53ea\u6709\u5e94\u7528\u7a0b\u5e8f\u9884\u671f\u7684\u4fe1\u606f\u624d\u4f1a\u88ab\u89e3\u5bc6\u548c\u900f\u660e\u3002\u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u9b54\u76d2\uff0c\u90a3\u4e48\u5728\u63d0\u4f9b\u9690\u79c1\u7684\u540c\u65f6\u590d\u5236\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684\u529f\u80fd\u5c31\u5f88\u5bb9\u6613\u4e86\u3002\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8005\u53ef\u4ee5\u8bbe\u8ba1\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ea\u5c06\u76f8\u5173\u4fe1\u606f\u4f5c\u4e3a\u900f\u660e\u8f93\u51fa\u53d1\u5e03\uff0c\u4f8b\u5982\u73b0\u8d27\u4ef7\u683c\u6216\u50a8\u5907\u91d1\u989d\u3002\n\u6784\u5efaMOCCA\u6709\u4e24\u79cd\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u901a\u8fc7\u53d7\u4fe1\u4efb\u7684\u786c\u4ef6\uff0c\u53e6\u4e00\u79cd\u662f\u901a\u8fc7\u52a0\u5bc6\u6280\u672f\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u90fd\u5e0c\u671b\u5b9e\u73b0\u4fdd\u62a4\u9690\u79c1\u7684\u5206\u6563\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u9700\u8981\u5177\u6709\u4ee5\u4e0b\u7279\u6027\u7684\u4e2d\u4ecb\u3002\n\u6765\u81ea\u53ef\u4fe1\u786c\u4ef6\u7684MOCCA\u3002\u7b2c\u4e00\u79cd\u89e3\u51b3\u65b9\u6848\u662f\u5229\u7528\u53d7\u4fe1\u4efb\u7684\u6267\u884c\u73af\u5883\uff0c\u7279\u522b\u662f\u82f1\u7279\u5c14SGX\u3002\u8fd9\u662fEkiden\u7684\u5b66\u672f\u8457\u4f5c\u4e2d\u9996\u6b21\u63cf\u8ff0\u7684\uff0c\u4e5f\u662fOasis\u548cSecret Network\u91c7\u53d6\u7684\u65b9\u6cd5\u3002\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u5df2\u7ecf\u6709\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u8fd0\u884c\uff0c\u6bd4\u5982Secret Swap\u3002\u7136\u800c\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u82f1\u7279\u5c14SGX\u5b58\u5728\u7f3a\u9677\u3002\n\u6765\u81ea\u5bc6\u7801\u5b66\u7684MOCCAs\u3002\u6211\u4eec\u80fd\u53ea\u7528\u52a0\u5bc6\u6280\u672f\u6784\u5efa\u56fe\u7075\u5b8c\u6574\u7684mocca\u5417\uff1f\u4e8b\u5b9e\u8bc1\u660e\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5bc6\u7801\u5b66\u5bb6\u5df2\u7ecf\u53d1\u73b0\u4e86\u8c1c\u9898\u7684\u6240\u6709\u7ec6\u8282\u3002\n\u7b2c\u4e00\u4e2a\u96be\u9898\u662f\u9608\u503c\u5bc6\u94a5\u751f\u6210\u548c\u91cd\u65b0\u5171\u4eab\u3002\u6211\u4eec\u77e5\u9053\u5982\u4f55\u5728\u8282\u70b9\u52a0\u5165\u548c\u79bb\u5f00\u65f6\uff0c\u5728\u52a8\u6001\u4e00\u81f4\u6027\u96c6\u4e2d\u751f\u6210\u548c\u7ba1\u7406Shamir\u79d8\u5bc6\u5171\u4eab\uff0c\u5373\u4f7f\u5bf9\u4e8e\u5927\u578b\u4e00\u81f4\u6027\u96c6\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u4e9b\u5141\u8bb8\u201cn\u201d\u4e2a\u4e00\u81f4\u6027\u8282\u70b9\u4e2d\u7684\u4efb\u610f\u6570\u91cf\u7684\u201ct\u201d\u8d77\u4f5c\u7528\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u4e00\u8d77\u662f\u516c\u94a5\u52a0\u5bc6\u65b9\u6848\u6216\u7b7e\u540d\u65b9\u6848\u7684\u5bc6\u94a5\u6301\u6709\u8005\u4e00\u6837\u3002\u8fd9\u4e9b\u8fdb\u6b65\u5206\u522b\u662f\u4e3a\u4e86\u9632\u6b62\u524d\u7aef\u8fd0\u884c\uff08\u5982Ferveo\uff09\u548c\u6784\u5efa\u7b80\u6d01\u7684\u8f7b\u5ba2\u6237\u7aef\uff08\u5982\u94fe\u5bc6\u94a5\u52a0\u5bc6\uff09\u3002\n\u52a0\u6027MOCCA\u548c\u4ea4\u6362\u3002\u7b2c\u4e8c\u4e2a\u96be\u9898\u662f\u9608\u503c\u540c\u6001\u52a0\u5bc6\u3002\u4f17\u6240\u5468\u77e5\u7684\u548c\u5df2\u90e8\u7f72\u7684\u516c\u94a5\u52a0\u5bc6\u65b9\u6848\uff0c\u5982ElGamal\u548cPaillier\uff0c\u90fd\u662f\u9644\u52a0\u540c\u6001\u7684\uff0c\u5e76\u4e14\u652f\u6301Shamir\u79d8\u5bc6\u5171\u4eab\u4f5c\u4e3a\u5bc6\u94a5\u3002\u4f7f\u7528\u5b83\u4eec\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u5efa\u652f\u6301\u52a0\u6cd5\u7684mocca\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u5df2\u7ecf\u53ef\u4ee5\u4f7f\u7528\u53ea\u652f\u6301\u52a0\u6cd5\u7684MOCCA\u5728\u8fde\u9501\u4ea4\u6613\u6240\uff08\u5c24\u5176\u662f\u56fa\u5b9a\u529f\u80fd\u505a\u5e02\u5546\uff0c\u7b80\u79f0CFMM\uff09\u4e0a\u8fdb\u884c\u6784\u5efa\u3002\u8fd9\u662f\u5bf9\u534a\u5f71\u7684\u5929\u624d\u89c2\u5bdf\uff0c\u5b83\u5229\u7528ElGamal\u52a0\u5bc6\u7684\u52a0\u6cd5\u540c\u6001\u7279\u6027\u6765\u805a\u5408\u4ea4\u6613\uff0c\u5e76\u901a\u8fc7\u9608\u503c\u89e3\u5bc6\u6765\u63ed\u793a\u4e00\u6279\u4ea4\u6613\u7684\u51c0\u4ea4\u6613\u91cf\u3002\u8fd9\u4ee5\u533a\u522b\u9690\u79c1\u7684\u5f62\u5f0f\u4e3a\u4ea4\u6613\u63d0\u4f9b\u4e86\u4fdd\u5bc6\u6027\u3002\n\u4ece\u9608\u503cFHE\u56fe\u7075\u5b8c\u6210MOCCAs\u3002\u4e3a\u4e86\u5b9e\u73b0\u7528\u4e8e\u66f4\u4e00\u822c\u8ba1\u7b97\u7684MOCCA\uff0c\u6211\u4eec\u5f53\u7136\u9700\u8981\u5b8c\u5168\u540c\u6001\u52a0\u5bc6\uff08FHE\uff09\u3002\u81eaGenry construction\u4e8e2009\u5e74\u9996\u6b21\u5efa\u9020FHE\u4ee5\u6765\uff0cFHE\u65b9\u6848\u7684\u6548\u7387\u5728\u8fc7\u53bb\u5341\u5e74\u4e2d\u5728\u7406\u8bba\u548c\u5b9e\u8df5\u4e0a\u90fd\u7a33\u6b65\u63d0\u9ad8\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u7ee7\u7eed\u63d0\u9ad8\uff08\u4f8b\u5982\u901a\u8fc7\u5229\u7528\u786c\u4ef6\u52a0\u901f\uff09\u3002\u7136\u800c\uff0cFHE\u672c\u8eab\u5e76\u4e0d\u662f\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u6301\u6709\u89e3\u5bc6\u5bc6\u94a5\u4ecd\u7136\u53ef\u4ee5\u4f7f\u4efb\u4f55\u4e00\u65b9\u83b7\u5f97\u5728\u76f8\u5e94\u52a0\u5bc6\u5bc6\u94a5\u4e0b\u53d1\u5e03\u5230\u94fe\u4e2d\u7684\u6240\u6709\u4fe1\u606f\u3002\u8fd9\u5c31\u662f\u4e4b\u524d\u5728\u533a\u5757\u94fe\u73af\u5883\u4e2d\u90e8\u7f72FHE\uff08\u5982NuCypher\u548csmartFHE\uff09\u7684\u52aa\u529b\u65e0\u6cd5\u63d0\u4f9b\u4fdd\u62a4\u9690\u79c1\u7684\u94fe\u4e0a\u5e94\u7528\u7a0b\u5e8f\u7684\u5730\u65b9\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u77e5\u9053\u6784\u9020\u95e8\u9650\u89e3\u5bc6\u65b9\u6848\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u89e3\u5bc6\u5bc6\u94a5\u662fShamir\u79d8\u5bc6\u5171\u4eab\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6bcf\u4e2a\u4e00\u81f4\u6027\u8282\u70b9\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u7684\u7a0b\u5e8f\u72b6\u6001\u548c\u8f93\u5165\u72ec\u7acb\u5730\u8fdb\u884c\u8ba1\u7b97\uff0c\u4ee5\u5bfc\u51fa\u52a0\u5bc6\u7684\u65b0\u7a0b\u5e8f\u72b6\u6001\u548c\u52a0\u5bc6\u7684\u8f93\u51fa\u3002\u5173\u952e\u7684\u662f\uff0c\u4e3a\u4e86\u91ca\u653e\u900f\u660e\u8f93\u51fa\uff0c\u5171\u8bc6\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e00\u8f6e\u901a\u4fe1\u5bf9\u52a0\u5bc6\u8f93\u51fa\u8fdb\u884c\u9608\u503c\u89e3\u5bc6\u3002\u8fd9\u91cc\u7684threshold\u5c5e\u6027\u4fdd\u8bc1\uff0c\u53ea\u8981\u5728threshold\u4ee5\u4e0b\u6570\u91cf\u7684\u9a8c\u8bc1\u5668\u662f\u6076\u610f\u7684\uff08\u5728\u4efb\u4f55\u7eaa\u5143\u4e2d\uff09\uff0c\u53ea\u6709\u9884\u671f\u7684\u4fe1\u606f\uff08\u5373\u900f\u660e\u7684\u8f93\u51fa\uff09\u624d\u4f1a\u88ab\u91ca\u653e\uff0c\u8f93\u5165\u548c\u7a0b\u5e8f\u72b6\u6001\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u89e3\u5bc6\u3002\n\u7ed3\u5408\u4ee5\u4e0a\u5185\u5bb9\uff0c\u6211\u4eec\u53ef\u4ee5\u4e3a\u5b8c\u5168\u4f9d\u8d56\u4e8e\u5bc6\u7801\u5b66\u7684\u4e00\u822c\u56fe\u7075\u5b8c\u5907\u72b6\u6001\u8f6c\u79fb\u51fd\u6570\u6784\u5efa\u4e00\u4e2aMOCCA\uff0c\u5f53\u7136\uff0c\u5b83\u4f1a\u5bf9\u5927\u91cf\u6280\u672f\u7ec6\u8282\u8fdb\u884c\u6a21\u5757\u5316\u3002\uff08\u636e\u6211\u6240\u77e5\uff0c\u533a\u5757\u94fe\u8bbe\u7f6e\u4e2d\u9608\u503cFHE\u7684\u786e\u5207\u7528\u6cd5\u5c1a\u672a\u5728\u5176\u4ed6\u5730\u65b9\u8bf4\u660e\u3002\u6211\u5e0c\u671b\u60a8\u80fd\u6307\u70b9\u6211\u4e4b\u524d\u9519\u8fc7\u7684\u5de5\u4f5c\u3002\uff09\n\u9690\u79c1\u662f\u5927\u89c4\u6a21\u91c7\u7528\u516c\u5171\u533a\u5757\u94fe\u7684\u6700\u540e\u969c\u788d\u4e4b\u4e00\u3002\u9690\u79c1\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u7279\u5f81\u8f74\uff1a\u533f\u540d\u6027\u4e0e\u4fdd\u5bc6\u6027\uff0c\u4ee5\u53ca\u94fe\u4e0a\u9690\u79c1\u4e0e\u4e2d\u4ecb\u9690\u79c1\u3002\u6709\u4e09\u79cd\u5b9e\u73b0\u9690\u79c1\u7684\u65b9\u6cd5\u3002\n\u9996\u5148\uff0c\u4f7f\u7528\u96f6\u77e5\u8bc6\uff08ZK\uff09\u8bc1\u660e\uff08\u7279\u522b\u662fStark\u6216universal Snark\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u8ba1\u7b97\u4ece\u94fe\u4e0a\u8f6c\u79fb\u5230\u4e2d\u4ecb\u673a\u6784\u6765\u5b9e\u73b0\u94fe\u4e0a\u533f\u540d\u6027\u548c\u94fe\u4e0a\u4fdd\u5bc6\u6027\uff0c\u4ece\u800c\u727a\u7272\u4e2d\u4ecb\u673a\u6784\uff08\u4f8b\u5982Mina Snapps\u548cAleo\uff09\u7684\u9690\u79c1\u3002\n\u5176\u6b21\uff0c\u5728\u4e0d\u4f9d\u8d56\u4e2d\u95f4\u4eba\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u73b0\u6709\u7684\u94fe\u4e0a\u5e94\u7528\u751f\u6001\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u533f\u540d\u6027\uff08\u65e0\u9700\u4fdd\u5bc6\uff09\uff0c\u800c\u65e0\u9700\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8bbe\u8ba1\u8fdb\u884c\u91cd\u5927\u66f4\u6539\uff08\u4f8b\u5982CoinJoin\u3001Tornado Cash\u3001Aztec Connect\u548cFLAX\uff09\u3002\n\u6700\u540e\uff0c\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u79f0\u4e3aMOCCA\uff08\u9b54\u6cd5\u94fe\u4e0a\u673a\u5bc6\u8ba1\u7b97\u8bbe\u5907\uff09\u7684\u62bd\u8c61\uff0c\u5b83\u53ef\u4ee5\u5bf9\u52a0\u5bc6\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\uff0c\u5e76\u53d1\u5e03\u900f\u660e\u7684\u8f93\u51fa\u3002Mocca\u53ef\u7528\u4e8e\u6784\u5efa\u901a\u7528\u7684\n......", "note_en": "This post is an exposition on the landscape of privacy in the context of public blockchains (a.k.a. decentralized ledgers, crypto, and Web3). The first part touches on why privacy is a key hurdle to wide-scale adoption and what different aspects of privacy are. The second part surveys three different approaches to privacy: via zero-knowledge proofs, aiming for anonymity only, and via a new abstraction called MOCCAs.\n        The modern financial system works well enough that we do not have to worry about the security or privacy of our day-to-day transactions. When you make a purchase at a grocery store, a rent payment via check, or take out a short-term loan at your bank, you don\u2019t have to worry about your transactions being publicly scrutinized by non-relevant parties. In modern banking and credit card networks, transaction details (mostly) stay within relevant financial intermediaries and authorities. Users (ideally) don\u2019t have to worry about their sensitive information being leaked to the public, and authorities can (mostly) track illicit activities.\n  Unfortunately, the same cannot be said for transactions conducted on popular blockchains today. Although blockchain technologies promise to decentralize and democratize the current financial ecosystem, most systems fail to meet even the most basic level of privacy that we have come to expect. Your pizza purchase could be  permanently recorded, and all of your transactions could be easily and publicly  accessed on Etherscan. There are privacy-focused projects out there, but they are currently underutilized due to the non-parity in terms of features and ease of use. This marks privacy as one of the key obstacles towards the large-scale adoption of blockchain technologies.\n  Privacy in the public blockchain setting is not an all-or-nothing feature. Rather, it is a complex and multidimensional question that requires care when navigating. Let us first dive into what types of privacy are relevant to blockchain applications.\n    Axis A: anonymity and confidentiality. Broadly speaking, there are two types of privacy for financial transactions:  anonymity and  confidentiality. When a non-profit organization receives an anonymous donation, they gain no information on the donor (anonymity) but know the donation amount received. When you are checking out at a drug store, your purchase is  confidential\u2013the person behind you does not know which drugs you might be prescribed and how much they cost, but they know that  you are making a purchase.\n    Axis B: on-chain v.s. intermediated applications. One of the foundational theses of blockchains and cryptocurrencies is the ability to conduct financial transactions  without trusted intermediaries. Following the footsteps of Bitcoin, almost all cryptocurrencies allow direct payments without intermediaries. Smart-contract platforms such as Ethereum go a step further and enable financial transactions beyond payments to be conducted without intermediaries, such as trading and lending. In this article, we use the term  on-chain to describe functionalities and applications, such as payments, trading, lending, that a user  could use directly as an operator of a consensus node. (A word of caution: users often do not run their own consensus nodes. For example, third-party RPC endpoint providers for Web3 wallets should be seen as intermediaries in practice.) Some examples of on-chain applications include payments on Bitcoin and  Zcash, trades on  Uniswap, and lending on  Compound.\n    Unfortunately, intermediaries are still omnipresent in the ecosystem. Exchanges such as  Coinbase are intermediaries of the services that they provide\u2014users need to deposit assets to these exchanges to trade. Even some \u201cdecentralized\u201d protocols rely on centrally-operated intermediaries. For example,  dYdX and  DiversiFi both have central exchange operators. This is unlike their on-chain counterparts such as Uniswap, where no interaction with servers outside the consensus network is needed. What dYdX and DiversiFi have over Coinbase is the elimination of trust required for the security of funds. Users instead need to trust cryptography and code, in particular  STARKs, for the security of their funds.  Payment channel networks (e.g.\u00a0 Lightning network) and  roll-ups (e.g.  Arbitrum,  Optimism,  Aztec, and  Scroll) are two other categories of intermediated applications. Although most intermediaries are centralized at the moment, they could be engineered to be decentralized, which is especially desirable for roll-ups since they compete directly with side-chains. For example, zk-roll-ups could have a network of roll-up sequencers with  some form of consensus mechanism, effectively making the roll-up a chain.\n  The above two categorizations of blockchain applications provide us with an additional axis to consider for privacy: on-chain privacy vs.\u00a0privacy from intermediaries.\n  Is my information disclosed to an entity (think your bank, Coinbase, and swap aggregator such as 1inch) who I entrust to act on my behalf?\n  Putting the axes together. We obtain four notions of privacy for blockchain applications by combining the two privacy feature axes: between  anonymity and  confidentiality, as well as  on-chain versus  intermediated. Below is a table listing one privacy question in each category.\n  Are my trades on Uniswap linkable to other activities that I do on-chain, such as NFT trading?\n  Of course, for any of the above questions, the answer is that your information is being permanently recorded on-chain and transmitted to intermediaries. With this understanding, we are now able to dive into what privacy is possible with on-chain and intermediated blockchain applications.\n  Disclaimer 1: Although most applications claim to be decentralized, development of and access to the on-chain smart contracts are often very centralized. For example, one coding bug can often lead to multi-million dollar exploits, and DEX trades often go through a shrinking number of mining pools that exploit users\u2019 transactions for their own profit (which is called MEV, or Miner Extracted Value). We will not further elaborate on these issues here, as our focus is on the issue of privacy.\n  Disclaimer 2: One important dimension to privacy that we will not touch on deeper is the interplay between privacy,  regulation, and  compliance. Financial intermediaries in many circumstances have legal obligations to not only know their customers (KYC) but also record and report certain financial transactions. Anti money laundering (AML) is one of the main objectives of this. For example, transparency of cryptocurrencies has recently  helped the Department of Justice in  recovering $3.6B worth of funds stolen from the 2016 Bitfinex hack. We will not touch on the issue of regulation and compliance to instead focus solely on the issue of privacy from a technical and theoretical level in this article.\n    Let us first take a look at payments, as they are mostly solved and do not require intermediaries.  Zcash and  Monero are two large-cap coins that provide both anonymity and confidentiality. They rely on zero-knowledge proofs and ring signatures respectively to provide different levels of anonymity and confidentiality. We also have other methods of building private payments that are more efficient but require interaction like  Mimblewimble, or without an ever-expanding UTXO set such as  Quisquis and  Anonymous  Zether.\n  Beyond payments, however, the landscape is way less clear. For example, one of the most successful applications beyond payments is in the area of Decentralized Finance (DeFi). We still don\u2019t know or have widely established privacy techniques for DeFi applications.\n  To reason about this holistically, we need to first have a good theoretical model of talking about on-chain applications. General on-chain applications can be modeled as  iterative computation, specified by a transition function   f, which computes  ( s t\u2032,\u2006 o u t p u t)\u2004\u2190\u2004 f( s t,\u2006 i n p u t) for each starting state   s t and input.\n    Users can construct transactions as inputs before submitting them to consensus nodes for processing. To preserve users\u2019 privacy during this process, we need to carry out the computation without revealing users\u2019 identities and inputs. There are three approaches: (1) push the computation off-chain, (2) keep computation transparent but hide identities of originators, and (3) do homomorphic computation over encrypted inputs with transparent outputs.\n    Zero-knowledge proofs (ZKPs) were a crucial development in the field of theoretical computer science and cryptography in the late 1980s (Chapter 1 of  these lecture notes gives a good survey). The particular form of zero-knowledge proof (ZKP) used in the blockchain setting is typically academically referred to as a NIZK, or Non-Interactive Zero-Knowledge. When proofs are succinct, they are usually called SNARGs (or  SNARKs), or Succinct Non-interactive Argument (of Knowledge). Additional features of interest are  transparency ( S TARKs) and   universality, which allow the proof system to be used for multiple circuits without a trusted setup or with one universal trusted setup.\n  The core application of ZKPs to public blockchains is the ability to perform verifiable,  off-chain computation. Typically, the prover is an end-user (in case of ZK application platforms) or an intermediary (ZK roll-ups), while the verifier is the chain, i.e.\u00a0the validator set. A straightforward way to use ZKPs for general computation is to prove the correctness of state transitions directly. To elaborate, the user  proves off-chain that for a particular on-chain state   s t, the user has an input that results in a new state   s t\u2032 with some   o u t p u t when applied to staring state   s t. The consensus nodes then verify the validity of proposed state transitions before overwriting the old state. This is the approach taken by ZK application platforms such as  Mina Snapps and  Aleo, both inspired by the academic work of  Zexe.\n    The crucial difference between the transparent on-chain applications and the above architecture is that, naively, an update  ( s t\u2032,\u2006 o u t p u t,\u2006 \u03c0) is only valid against the application state   s t used to generate the update by the user. This leads to \u201crace conditions\u201d if multiple users interact with the same application without coordination. To elaborate, suppose there are two valid transactions constructed against the same on-chain state   s t 0, updating it to   s t 1 and   s t 2, respectively. When the first transaction gets recorded on-chain, the on-chain state is updated to   s t 1. As a result, the second transaction is then being validated using the new state   s t 1, not   s t 0, likely rendering it invalid.\n  It is worth noting that one could get around this race condition by segmenting the application state into distinct parts. For example, applications that don\u2019t share global states can be accessed concurrently (e.g.\u00a0 different records in Aleo can be accessed independently). But many interesting on-chain applications\u2013e.g. constant-function market markers (CFMMs)\u2013have states that are fundamentally shared between all their users.\n  Although with grand claims, using ZKPs for the whole application state transition is a bit of a \u201cone step forward and one step back\u201d solution due to the above problem. The solution to building large-scale exchanges serving mutually disconnected users is to add an  intermediary or exchange operator, making the application state private to the operator instead of shared between all users. Unfortunately, there is no known way of hiding trade information from these intermediaries without adopting other solutions entirely. To summarize, exchanges on ZK applications platforms such as Aleo and Mina achieve the following privacy properties.\n      Adding confidentiality to on-chain applications is hard. What if we don\u2019t attempt to provide confidentiality but only aim to provide anonymity? This is already possible using existing tools: using tumblers and mixers such as  CoinJoin and  Tornado Cash, one can fund new pseudo-anonymous addresses to gain anonymity. Unfortunately, the opt-in nature of these tools means that they are utilized more so by malicious users than legitimate ones. For example,  CoinJoin was used by the  Colonial Pipeline ransomware and Tornado Cash is often used to  fund anonymous addresses to mount DeFi hacks.\n  There are two projects that try to build anonymity by default onto transparent smart-contract platforms. The first is  Aztec Connect, which is an up-and-coming \u201czkzk-rollup\u201d for Ethereum that offers trade anonymity when trading with a supported layer-one application. The roll-up contract acts on behalf of layer-two users (whose identities are hidden both on-chain and to the roll-up provider) to interact with layer-one DeFi protocols, providing anonymity to these layer-two users.\n  The second is the academic work of  FLAX. Which proposes a redesign of an Ethereum-like smart-contract platform to support built-in anonymity for end-users. At the core, FLAX proposes an anonymous version of the ERC20 token standard that allows  anonymous and  atomic delegation of token use. Interestingly, there is no new cryptography required to realize these \u201canonymous ERC20s\u201d. One could use the same techniques from any of the previously mentioned private payment schemes, such as Zcash, Monero, or Zether inside the token contract.\n  Below is a table outlining the privacy features of the solutions discussed above. We omit the intermediary column here since there are no intermediaries involved\u2013except for Aztec Connect\u2013which potentially provides anonymity from the intermediaries (roll-up providers), depending on the level of decentralization and the exact behavior of these providers.\n  Yes ( opt-in in case of tumblers and mixers,  default in case of Aztec Connect and FLAX)\n    What if we can encrypt the on-chain application state and user input but still be able to do computation on them, and even derive public unencrypted output information? Let us call such an ideal functionality a  Magical  On-chain  Confidential  Computing  Apparatus (MOCCA).\n    Intuitively, MOCCAs offer the best-possible privacy for the state transition function   f. They can be computed  on-chain given necessary encrypted input, and the computation should yield both an encrypted and updated state as well as some transparent output value. Specifically, program states and inputs are encrypted  to the chain such that the only operation consensus can carry out is computing the state transitions, meaning only application-intended information is ever decrypted and made transparent. Assume for a moment that we have such a magic box, then it is easy to replicate the functionality of on-chain applications while offering privacy. As application designers can design their applications to release only the relevant information as transparent output, such as spot prices or reserve amounts.\n    There are two approaches to building MOCCAs, via trusted hardware and via cryptography. In either case, we could hope to achieve privacy-preserving decentralized applications without intermediaries with the following properties.\n    MOCCAs from Trusted Hardware. The first solution is to utilize trusted execution environments, specifically Intel SGX. This was first described in the academic work of  Ekiden and is the approach taken by  Oasis and  Secret Network. There are already applications running on these platforms such as  Secret Swap. However, Intel SGX is  known to be buggy.\n  MOCCAs from Cryptography. Can we build Turing-complete MOCCAs using only cryptography? It turns out the answer is yes, and cryptographers have already discovered all the individual pieces of the puzzle.\n  The first piece of the puzzle is threshold key generation and resharing. We know how to  generate and manage Shamir secret-shares in a dynamic consensus set as nodes join and leave, even for  large consensus sets. These allow any number \u201ct\u201d out of \u201cn\u201d consensus nodes to act as if they are together the secret-key holder of a public-key encryption scheme or signature scheme. These advances were put forth for the prevention of front-running (e.g.  Ferveo) and construction of succinct light clients (e.g.\u00a0 chain-key cryptography), respectively.\n  Additive MOCCAs and exchanges. The second piece of the puzzle is  threshold homomorphic encryption. Well-known and deployed public-key encryption schemes such as ElGamal and  Paillier are both additively homomorphic and support Shamir secret shares as keys. Using them, we can build MOCCAs that support addition.\n  It turns out, we can already build on-chain exchanges (in particular, constant-function market makers, or CFMMs) using MOCCAs that only support addition. This is the genius observation of  Penumbra, which utilizes additive homomorphic properties of ElGamal encryption to aggregate trades and threshold decryption to reveal the net trade amounts of a batch. This provides confidentiality of trades in the form of  differential privacy.\n  Turing-complete MOCCAs from Threshold FHE. To realize MOCCAs for more general computation, we of course need fully homomorphic encryption (FHE). Since the first constructions of FHE by  Genry\u2019s construction in 2009, the efficiency of FHE schemes has  steadily  improved both  theoretically and  practically over the past decade and is likely to continue to improve (e.g.\u00a0by tapping into  hardware acceleration). However, FHE by itself is not the entire solution, as holding the decryption key still empowers any single party to all the information ever posted to chain under the corresponding encryption key. This is where previous efforts on deploying FHE in the blockchain setting such as  NuCypher and  smartFHE fall short of providing privacy-preserving on-chain applications.\n  Fortunately, we know of ways of constructing  FHE schemes with threshold decryption where the decryption keys are Shamir secret-shares. Specifically, each consensus node can carry out computation on encrypted program state and input independently to derive encrypted new program state and  encrypted output. Crucially, to release the transparent output, consensus nodes can  threshold decrypt the encrypted output with one round of communication. The threshold property here guarantees that, as long as under threshold number of validators are malicious (in any epoch), only the intended information (i.e.\u00a0transparent outputs) are ever released, and inputs and program states are never decrypted.\n  Combining the above, we can build a MOCCA for general Turing-complete state transition functions relying purely on cryptography, modulo numerous technical details of course. (This exact usage of threshold FHE in the blockchain setting has not been stated elsewhere to my knowledge. I would appreciate pointers to prior works that I have missed.)\n    Privacy is one of the final roadblocks towards the wide-scale adoption of public blockchains. Privacy can be divided into two feature axes:  anonymity vs  confidentiality and  on-chain privacy vs  privacy from intermediaries. There are three categories of approaches to achieve privacy.\n  First, using zero-knowledge (ZK) proofs (in particular STARKs or universal SNARKs), we can achieve both on-chain anonymity and on-chain confidentiality by moving computation off-chain to intermediaries, thereby sacrificing privacy from intermediaries (e.g.\u00a0 Mina Snapps and  Aleo).\n  Second, without relying on intermediaries, we can add anonymity (without confidentiality) to existing on-chain application ecosystems without major changes to application design (e.g.  CoinJoin,  Tornado Cash,  Aztec Connect, and  FLAX).\n  Finally, this article proposes an abstraction called a MOCCA, or Magical On-Chain Confidential Computing Apparatus, which can compute on encrypted data  and release transparent outputs. MOCCAs can be used to build generic \n......", "posttime": "2022-02-17 01:05:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u533a\u5757\u94fe,\u533a\u5757,privacy,\u5e94\u7528\u7a0b\u5e8f", "title": "\u5728\u516c\u5171\u533a\u5757\u94fe\u4e0a\u5bfc\u822a\u9690\u79c1", "title_en": "Navigating Privacy on Public Blockchains", "transed": 1, "url": "https://wdai.us/posts/navigating-privacy/", "via": "", "real_tags": ["\u533a\u5757\u94fe", "\u533a\u5757", "privacy", "\u5e94\u7528\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073655, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b\uff08\u7f8e\u8054\u793e\uff09-\u4efb\u4f55\u66fe\u7ecf\u88ab\u8fce\u9762\u800c\u6765\u7684\u6c7d\u8f66\u7684\u8fdc\u5149\u706f\u6682\u65f6\u81f4\u76f2\u7684\u4eba\u90fd\u4f1a\u5f88\u9ad8\u5174\u542c\u5230\u8fd9\u4e2a\u6d88\u606f\u3002\n\u7f8e\u56fd\u516c\u8def\u5b89\u5168\u76d1\u7ba1\u673a\u6784\u5373\u5c06\u5141\u8bb8\u65b0\u7684\u9ad8\u79d1\u6280\u524d\u7167\u706f\u81ea\u52a8\u8c03\u6574\u5149\u675f\uff0c\u4f7f\u5176\u805a\u7126\u4e8e\u9053\u8def\u7684\u9ed1\u6697\u533a\u57df\uff0c\u4e0d\u4f1a\u5bf9\u8fce\u9762\u800c\u6765\u7684\u53f8\u673a\u9020\u6210\u7729\u5149\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u516c\u8def\u4ea4\u901a\u5b89\u5168\u7ba1\u7406\u5c40\uff08National Highway Traffic Safety Administration\uff09\u8868\u793a\uff0c\u5b83\u53d1\u5e03\u4e86\u4e00\u9879\u6700\u7ec8\u89c4\u5b9a\uff0c\u5141\u8bb8\u65b0\u8f66\u4f7f\u7528\u6240\u8c13\u7684\u201c\u81ea\u9002\u5e94\u8fdc\u5149\u524d\u7167\u706f\u201d\u3002\u5b83\u5c06\u5728\u672a\u6765\u51e0\u5929\u5728\u300a\u8054\u90a6\u516c\u62a5\u300b\u4e0a\u516c\u5e03\u540e\u751f\u6548\u3002\n\u6b27\u6d32\u5e38\u7528\u7684\u524d\u7167\u706f\u6709LED\u706f\uff0c\u53ef\u4ee5\u5c06\u5149\u675f\u805a\u7126\u5728\u9ed1\u6697\u4e2d\uff0c\u5982\u9a7e\u9a76\u8f66\u9053\u548c\u8def\u8fb9\u533a\u57df\u3002\u5982\u679c\u6709\u8fce\u9762\u800c\u6765\u7684\u8f66\u8f86\uff0c\u5b83\u4eec\u4e5f\u4f1a\u964d\u4f4e\u5149\u675f\u7684\u5f3a\u5ea6\u3002\u6444\u50cf\u5934\u4f20\u611f\u5668\u548c\u8ba1\u7b97\u673a\u6709\u52a9\u4e8e\u786e\u5b9a\u5149\u7ebf\u7684\u53bb\u5411\u3002\n\u8be5\u673a\u6784\u5728\u5468\u4e8c\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8868\u793a\uff1a\u201c\u8fd9\u9879\u6700\u7ec8\u89c4\u5b9a\u5c06\u63d0\u9ad8\u884c\u4eba\u548c\u9a91\u81ea\u884c\u8f66\u8005\u7684\u5b89\u5168\u6027\uff0c\u4f7f\u4ed6\u4eec\u5728\u591c\u95f4\u66f4\u5bb9\u6613\u770b\u5230\uff0c\u5e76\u901a\u8fc7\u66f4\u597d\u5730\u7167\u4eae\u9053\u8def\u4e0a\u548c\u6cbf\u9014\u7684\u52a8\u7269\u548c\u7269\u4f53\uff0c\u5e2e\u52a9\u9632\u6b62\u649e\u8f66\u3002\u201d\u3002\n\u8fd9\u9879\u5f97\u5230\u6c7d\u8f66\u884c\u4e1a\u652f\u6301\u7684\u65b0\u89c4\u5b9a\u51fa\u53f0\u4e4b\u9645\uff0c\u5b89\u5168\u5c40\u6b63\u52aa\u529b\u5e94\u5bf9\u5168\u56fd\u4ea4\u901a\u6b7b\u4ea1\u4eba\u6570\u7684\u6025\u5267\u4e0a\u5347\u3002\n\u7f8e\u56fd\u7684\u4ea4\u901a\u6b7b\u4ea1\u4eba\u6570\u57282021\u523031720\u7684\u5934\u4e5d\u4e2a\u6708\u6fc0\u589e\uff0c\u653f\u5e9c\u5728\u661f\u671f\u4e8c\u62a5\u9053\uff0c\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u671f\u95f4\u4fdd\u6301\u4e86\u5371\u9669\u9a7e\u9a76\u589e\u52a0\u7684\u521b\u7eaa\u5f55\u901f\u5ea6\u3002\n\u4ece\u4e00\u6708\u52302021\u5e749\u6708\u6b7b\u4e8e\u673a\u52a8\u8f66\u4e8b\u6545\u7684\u4eba\u6570\u4f30\u8ba1\u6bd42020\u540c\u671f\u9ad8\u51fa12%\u3002\u8fd9\u662f\u81ea1975\u5e74\u4ea4\u901a\u90e8\u5f00\u59cb\u8bb0\u5f55\u81f4\u547d\u4ea4\u901a\u4e8b\u6545\u6570\u636e\u4ee5\u6765\u4e5d\u4e2a\u6708\u5185\u6700\u9ad8\u7684\u767e\u5206\u6bd4\u589e\u957f\u3002\nGuidehouse Research\u7684\u9996\u5e2d\u79fb\u52a8\u5206\u6790\u5e08\u5c71\u59c6\u00b7\u963f\u5e03\u585e\u7c73\u5fb7\uff08Sam Abuelsamid\uff09\u8868\u793a\uff0c\u65b0\u7684\u8f66\u706f\u6700\u521d\u5c06\u51fa\u73b0\u5728\u6210\u672c\u66f4\u9ad8\u7684\u8c6a\u534e\u8f66\u4e0a\uff0c\u4f46\u968f\u7740\u6280\u672f\u4ef7\u683c\u7684\u4e0b\u964d\uff0c\u5c06\u63a8\u5e7f\u5230\u66f4\u591a\u7684\u4e3b\u6d41\u8f66\u4e0a\u3002\n\u76ee\u524d\uff0c\u5965\u8feae-tron Sportback\u7535\u52a8\u6c7d\u8f66\u5728\u7f8e\u56fd\u7684\u9876\u7ea7\u8f66\u706f\u552e\u4ef7\u4e3a3000\u7f8e\u5143\u3002\u81ea\u9002\u5e94\u5149\u675f\u706f\u5728\u7f8e\u56fd\u7684\u5927\u591a\u6570\u5965\u8fea\u8f66\u578b\u4e0a\u90fd\u6709\uff0c\u4f46\u76f4\u5230\u73b0\u5728\u8fd8\u4e0d\u80fd\u4f7f\u7528\u3002\u5965\u8fea\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u8bc4\u4f30\u8fd9\u4e9b\u8f66\u706f\u662f\u5426\u7b26\u5408\u56fd\u5bb6\u516c\u8def\u4ea4\u901a\u5b89\u5168\u7ba1\u7406\u5c40\uff08NHTSA\uff09\u7684\u6807\u51c6\uff0c\u4ee5\u53ca\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u5728\u672a\u6765\u6fc0\u6d3b\u3002\n\u8fd9\u9879\u6280\u672f\u4f7f\u7528\u4e86\u4e00\u7ec4\u53d1\u5149\u4e8c\u6781\u7ba1\uff0c\u53ef\u4ee5\u6539\u53d8\u5149\u675f\u53d1\u9001\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u5f53\u524d\u7684\u9ad8\u5149\u675f\u5230\u5904\u7167\u5c04\u7684\u6280\u672f\u3002Abuelsamid\u8bf4\uff1a\u201c\u4f60\u57fa\u672c\u4e0a\u53ef\u4ee5\u5728\u98de\u884c\u4e2d\u521b\u9020\u51fa\u4e00\u79cd\u9002\u5408\u5b9e\u65f6\u6761\u4ef6\u7684\u5149\u6a21\u5f0f\u3002\u201d\u3002\u201c\u4f60\u53ef\u4ee5\u628a\u5149\u7ebf\u6295\u5c04\u5230\u6700\u6709\u7528\u7684\u5730\u65b9\u3002\u201d\nAbuelsamid\u8bf4\uff0c\u65b0\u7684\u8f66\u706f\u8fd8\u5c06\u6709\u52a9\u4e8e\u90e8\u5206\u81ea\u52a8\u5316\u7684\u9a7e\u9a76\u5458\u8f85\u52a9\u7cfb\u7edf\u4f7f\u8f66\u8f86\u4fdd\u6301\u5728\u8f66\u9053\u4e0a\uff0c\u5e76\u5728\u591c\u95f4\u907f\u5f00\u8f66\u8f86\u524d\u65b9\u7684\u7269\u4f53\u3002\n\u7f8e\u56fd\u56fd\u5bb6\u516c\u8def\u4ea4\u901a\u5b89\u5168\u7ba1\u7406\u5c40\u8868\u793a\uff0c\u65b0\u7684\u7167\u660e\u6cd5\u89c4\u4e5f\u6bd4\u56fd\u4f1a\u53bb\u5e74\u901a\u8fc7\u7684\u4e24\u515a\u57fa\u7840\u8bbe\u65bd\u6cd5\u7684\u8981\u6c42\u63d0\u524d\u4e86\u4e00\u5e74\u534a\u3002\n\u8fc7\u53bb\uff0c\u8be5\u673a\u6784\u5728\u56fd\u4f1a\u6388\u6743\u7684\u5b89\u5168\u63aa\u65bd\u65b9\u9762\u8fdb\u5c55\u7f13\u6162\u3002\u7f8e\u8054\u793e\u53bb\u5e74\u5bf9\u7f8e\u56fd\u56fd\u5bb6\u516c\u8def\u4ea4\u901a\u5b89\u5168\u7ba1\u7406\u5c40\u5728\u524d\u4e09\u4efb\u603b\u7edf\u4efb\u671f\u5185\u7684\u89c4\u5219\u5236\u5b9a\u6d3b\u52a8\u8fdb\u884c\u4e86\u5ba1\u67e5\uff0c\u6839\u636e\u56fd\u4f1a\u901a\u8fc7\u7684\u6cd5\u5f8b\u89c4\u5b9a\u7684\u6700\u540e\u671f\u9650\uff0c\u53d1\u73b0\u81f3\u5c11\u670913\u9879\u6c7d\u8f66\u5b89\u5168\u89c4\u5219\u903e\u671f\u591a\u5e74\u3002\n\u81ea2017\u5e74\u521d\u4ee5\u6765\uff0c\u8be5\u673a\u6784\u4e00\u76f4\u6ca1\u6709\u53c2\u8bae\u9662\u786e\u8ba4\u7684\u884c\u653f\u957f\u5b98\u3002\u4e54\u00b7\u62dc\u767b\u603b\u7edf\u63d0\u540d\u524d\u52a0\u5dde\u7a7a\u6c14\u8d28\u91cf\u76d1\u7ba1\u673a\u6784\u53f2\u8482\u6587\u00b7\u514b\u5229\u592b\u62c5\u4efb\u8be5\u804c\u4f4d\u3002\u514b\u91cc\u592b\u6b63\u5728\u7b49\u5f85\u53c2\u8bae\u9662\u5168\u4f53\u8bae\u5458\u7684\u786e\u8ba4\u3002", "note_en": "DETROIT (AP) \u2014 Anyone who has ever been temporarily blinded by high-beam headlights from an oncoming car will be happy to hear this.\n U.S. highway safety regulators are about to allow new high-tech headlights that can automatically tailor beams so they focus on dark areas of the road and don\u2019t create glare for oncoming drivers.\n The National Highway Traffic Safety Administration says it issued a final rule allowing what\u2019s called \u201cadaptive driving beam headlights\u201d on new vehicles. It will go into effect when published in the Federal Register in the next few days.\n The headlights, commonly used in Europe, have LED lamps that can focus beams on darkness such as the driver\u2019s lane and areas along the roadside. They also lower the intensity of the light beams if there\u2019s oncoming traffic. Camera sensors and computers help determine where the light should go.\n \u201cThis final rule will improve safety for pedestrians and bicyclists by making them more visible at night, and will help prevent crashes by better illuminating animals and objects in and along the road,\u201d the agency said in a news release on Tuesday.\n  The new rule, which was supported by the auto industry, comes as the safety agency grapples with a dramatic rise in traffic deaths nationwide.\n  The number of  U.S. traffic deaths surged in the first nine months of 2021 to 31,720, the government reported Tuesday, keeping up a record pace of increased dangerous driving during the coronavirus pandemic.\n The estimated figure of people dying in motor vehicle crashes from January to September 2021 was 12% higher than the same period in 2020. That represents the highest percentage increase over a nine-month period since the Transportation Department began recording fatal crash data in 1975.\n  Sam Abuelsamid, principal mobility analyst for Guidehouse Research, said the new lights will show up in higher-cost luxury vehicles at first, but will spread to more mainstram vehicles as the price of the technology falls.\n Currently Audi charges $3,000 for the top version of the lights in the U.S. on its e-tron Sportback electric vehicle. The adaptive beam lights are offered on most Audi models in the U.S., but until now, could not be used. An Audi spokesman says the company is evaluating whether the lights meet NHTSA standards and whether they can be activated in the future.\n The technology uses an array of light emitting diodes that can change where light beams are sent, rather than the current technology of high beams hitting everywhere. \u201cYou have the ability to basically create a light pattern on the fly that is optimized for real-time conditions,\u201d Abuelsamid said. \u201cYou can cast the light where it\u2019s most useful.\u201d\n  The new lights also will help partially automated driver assist systems keep cars in their lanes and avoid objects in front of the vehicles at night, Abuelsamid said.\n The new lighting regulation also comes more than 1 1/2 years ahead of a requirement in the bipartisan infrastructure law passed by Congress last year, NHTSA said.\n In the past the agency has moved slowly on safety measures mandated by Congress.  An Associated Press review last year of NHTSA\u2019s rule-making activities under the last three presidents found at least 13 auto safety rules that are years overdue based on deadlines set in laws passed by Congress.\n The agency has been without a Senate-confirmed administrator since early 2017. President Joe Biden has nominated former California air quality regulator Steven Cliff for the post. Cliff is awaiting confirmation by the full Senate.", "posttime": "2022-02-17 01:02:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u6279\u51c6,headlights,\u5149\u675f", "title": "\u7f8e\u56fd\u6279\u51c6\u4e86\u4e0d\u4f1a\u8ba9\u8fce\u9762\u800c\u6765\u7684\u53f8\u673a\u5931\u660e\u7684\u65b0\u5934\u706f", "title_en": "US approves new headlights that won\u2019t blind oncoming drivers", "transed": 1, "url": "https://apnews.com/article/coronavirus-pandemic-technology-business-health-congress-761cac7ae30a03ab6a399b9676ae44bb", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6279\u51c6", "\u5149\u675f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073654, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce8\uff1a\u672c\u8bf4\u660e\u662f\u4e3a\u8bfe\u7a0bCS 329S\uff1a\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u8bbe\u8ba1\uff08\u65af\u5766\u798f\u5927\u5b66\uff0c2022\u5e74\uff09\u7f16\u5199\u7684\u6b63\u5728\u8fdb\u884c\u4e2d\u7684\u5de5\u4f5c\u3002\u5bf9\u4e8e\u5145\u5206\u5f00\u53d1\u7684\u6587\u672c\uff0c\u8bf7\u53c2\u9605\u300a\u8bbe\u8ba1\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u300b\uff08Chip Huyen\uff0cO\u2019Reilly 2022\uff09\u4e00\u4e66\u3002\u5e7b\u706f\u7247\uff08\u77ed\u5f97\u591a\uff09\ud83d\ude01).  \u8c37\u6b4c\u6587\u6863\u7684\u539f\u59cb\u7248\u672c\u3002\n\u8ba9\u6211\u4eec\u4ece\u4e00\u4f4d\u9ad8\u7ba1\u7ed9\u6211\u8bb2\u7684\u4e00\u4e2a\u6545\u4e8b\u5f00\u59cb\uff0c\u8bb8\u591a\u8bfb\u8005\u53ef\u80fd\u90fd\u80fd\u7406\u89e3\u8fd9\u4e2a\u6545\u4e8b\u3002\u5927\u7ea6\u4e24\u5e74\u524d\uff0c\u4ed6\u7684\u516c\u53f8\u8058\u8bf7\u4e86\u4e00\u5bb6\u54a8\u8be2\u516c\u53f8\u5f00\u53d1\u4e86\u4e00\u4e2aML\u6a21\u578b\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u9884\u6d4b\u4e0b\u5468\u4ed6\u4eec\u9700\u8981\u591a\u5c11\u79cd\u6742\u8d27\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u76f8\u5e94\u5730\u91cd\u65b0\u8fdb\u8d27\u3002\u8fd9\u5bb6\u54a8\u8be2\u516c\u53f8\u82b1\u4e86\u516d\u4e2a\u6708\u7684\u65f6\u95f4\u5f00\u53d1\u8fd9\u4e2a\u6a21\u578b\u3002\u5f53\u54a8\u8be2\u516c\u53f8\u4ea4\u51fa\u6a21\u578b\u65f6\uff0c\u4ed6\u7684\u516c\u53f8\u90e8\u7f72\u4e86\u5b83\uff0c\u5e76\u5bf9\u5176\u6027\u80fd\u975e\u5e38\u6ee1\u610f\u3002\u4ed6\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u5411\u6295\u8d44\u8005\u5439\u5618\u81ea\u5df1\u662f\u4e00\u5bb6\u4eba\u5de5\u667a\u80fd\u9a71\u52a8\u7684\u516c\u53f8\u3002\n\u7136\u800c\uff0c\u4e00\u5e74\u540e\uff0c\u4ed6\u4eec\u7684\u4eba\u6570\u4e0b\u964d\u4e86\u3002\u4e00\u4e9b\u5546\u54c1\u7684\u9700\u6c42\u4e00\u76f4\u88ab\u9ad8\u4f30\uff0c\u8fd9\u5bfc\u81f4\u989d\u5916\u7684\u5546\u54c1\u8fc7\u671f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4e00\u4e9b\u5546\u54c1\u7684\u9700\u6c42\u4e00\u76f4\u88ab\u4f4e\u4f30\uff0c\u5bfc\u81f4\u9500\u91cf\u4e0b\u964d\u3002\u6700\u521d\uff0c\u4ed6\u7684\u5e93\u5b58\u56e2\u961f\u624b\u52a8\u66f4\u6539\u6a21\u578b\u7684\u9884\u6d4b\uff0c\u4ee5\u7ea0\u6b63\u4ed6\u4eec\u6ce8\u610f\u5230\u7684\u6a21\u5f0f\uff0c\u4f46\u6700\u7ec8\uff0c\u6a21\u578b\u7684\u9884\u6d4b\u53d8\u5f97\u5982\u6b64\u7cdf\u7cd5\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u65e0\u6cd5\u518d\u4f7f\u7528\u5b83\u3002\u4ed6\u4eec\u6709\u4e09\u4e2a\u9009\u62e9\uff1a\u4ed8\u7ed9\u540c\u4e00\u5bb6\u54a8\u8be2\u516c\u53f8\u4e00\u5927\u7b14\u94b1\u6765\u66f4\u65b0\u6a21\u578b\uff0c\u4ed8\u7ed9\u53e6\u4e00\u5bb6\u54a8\u8be2\u516c\u53f8\u66f4\u591a\u7684\u94b1\uff0c\u56e0\u4e3a\u8fd9\u5bb6\u516c\u53f8\u9700\u8981\u65f6\u95f4\u6765\u8ddf\u4e0a\u8fdb\u5ea6\uff0c\u6216\u8005\u96c7\u4f63\u4e00\u4e2a\u5185\u90e8\u56e2\u961f\u6765\u7ef4\u62a4\u6a21\u578b\u3002\n\u4ed6\u7684\u516c\u53f8\u8270\u96be\u5730\u5438\u53d6\u4e86\u4e00\u4e2a\u91cd\u8981\u7684\u6559\u8bad\uff0c\u4e1a\u5185\u5176\u4ed6\u4eba\u4e5f\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\uff1a\u90e8\u7f72\u6a21\u578b\u5e76\u4e0d\u662f\u8fc7\u7a0b\u7684\u7ec8\u70b9\u3002\u6a21\u578b\u5728\u751f\u4ea7\u4e2d\u7684\u6027\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u4e0b\u964d\u3002\u4e00\u65e6\u90e8\u7f72\u4e86\u4e00\u4e2a\u6a21\u578b\uff0c\u6211\u4eec\u4ecd\u7136\u5fc5\u987b\u6301\u7eed\u76d1\u63a7\u5176\u6027\u80fd\u4ee5\u68c0\u6d4b\u95ee\u9898\uff0c\u5e76\u90e8\u7f72\u66f4\u65b0\u4ee5\u4fee\u590d\u8fd9\u4e9b\u95ee\u9898\u3002\n\u5e26\u6709\u81ea\u7136\u5730\u9762\u771f\u503c\u6807\u7b7e\u7684\u4efb\u52a1\u662f\u7cfb\u7edf\u53ef\u4ee5\u81ea\u52a8\u8bc4\u4f30\u6216\u90e8\u5206\u8bc4\u4f30\u6a21\u578b\u9884\u6d4b\u7684\u4efb\u52a1\u3002\u8c37\u6b4c\u5730\u56fe\u4e0a\u4f30\u8ba1\u5230\u8fbe\u65f6\u95f4\u7684\u6a21\u578b\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u5728\u65c5\u884c\u7ed3\u675f\u65f6\uff0c\u8c37\u6b4c\u5730\u56fe\u77e5\u9053\u65c5\u884c\u5b9e\u9645\u82b1\u8d39\u4e86\u591a\u957f\u65f6\u95f4\uff0c\u56e0\u6b64\u53ef\u4ee5\u8bc4\u4f30\u9884\u6d4b\u5230\u8fbe\u65f6\u95f4\u7684\u51c6\u786e\u6027\u3002\n\u81ea\u7136\u6807\u7b7e\u662f\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\u7684\u7406\u60f3\u9009\u62e9\u3002\u7136\u800c\uff0c\u5373\u4f7f\u4f60\u7684\u4efb\u52a1\u672c\u8eab\u6ca1\u6709\u81ea\u7136\u7684\u6807\u7b7e\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u8bbe\u7f6e\u4f60\u7684\u7cfb\u7edf\uff0c\u8ba9\u4f60\u53ef\u4ee5\u6536\u96c6\u4e00\u4e9b\u5173\u4e8e\u6a21\u578b\u7684\u53cd\u9988\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u50cfGoogle Translate\u8fd9\u6837\u7684\u7ffb\u8bd1\u7cfb\u7edf\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u8ba9\u793e\u533a\u4e3a\u7cdf\u7cd5\u7684\u7ffb\u8bd1\u63d0\u4ea4\u66ff\u4ee3\u7ffb\u8bd1\u3002\u65b0\u95fb\u6e90\u6392\u540d\u4e0d\u662f\u4e00\u9879\u5e26\u6709\u56fa\u6709\u6807\u7b7e\u7684\u4efb\u52a1\uff0c\u4f46\u901a\u8fc7\u5728\u6bcf\u4e2a\u65b0\u95fb\u6e90\u9879\u76ee\u4e2d\u6dfb\u52a0like\u6309\u94ae\u548c\u5176\u4ed6\u53cd\u5e94\uff0cFacebook\u80fd\u591f\u6536\u96c6\u5173\u4e8e\u5176\u6392\u540d\u7b97\u6cd5\u7684\u53cd\u9988\u3002\n\u5bf9\u4e8e\u5177\u6709\u81ea\u7136\u5730\u9762\u771f\u503c\u6807\u7b7e\u7684\u4efb\u52a1\uff0c\u4ece\u63d0\u4f9b\u9884\u6d4b\u5230\u63d0\u4f9b\u53cd\u9988\u6240\u9700\u7684\u65f6\u95f4\u662f\u53cd\u9988\u56de\u8def\u957f\u5ea6\u3002\n\u5177\u6709\u77ed\u53cd\u9988\u56de\u8def\u7684\u4efb\u52a1\u901a\u5e38\u5728\u51e0\u5206\u949f\u5185\u5c31\u53ef\u4ee5\u83b7\u5f97\u5730\u9762\u771f\u76f8\u6807\u7b7e\u3002\u8fd9\u7c7b\u4efb\u52a1\u7684\u5178\u578b\u4f8b\u5b50\u662f\u63a8\u8350\u7cfb\u7edf\u3002\u63a8\u8350\u7cfb\u7edf\u7684\u76ee\u6807\u662f\u5411\u7528\u6237\u63a8\u8350\u4ed6\u4eec\u60f3\u8981\u7684\u9879\u76ee\u3002\u65e0\u8bba\u7528\u6237\u662f\u5426\u70b9\u51fb\u4e86\u63a8\u8350\u9879\u76ee\uff0c\u90fd\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5bf9\u8be5\u63a8\u8350\u7684\u53cd\u9988\u3002\u88ab\u70b9\u51fb\u7684\u63a8\u8350\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u597d\u7684\u63a8\u8350\uff08\u5373\u6807\u7b7e\u662f\u80af\u5b9a\u7684\uff09\uff0c\u800c\u6ca1\u6709\u88ab\u70b9\u51fb\u7684\u63a8\u8350\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u574f\u7684\u63a8\u8350\uff08\u5373\u6807\u7b7e\u662f\u5426\u5b9a\u7684\uff09\u3002\u8bb8\u591a\u4efb\u52a1\u53ef\u4ee5\u88ab\u5b9a\u4e49\u4e3a\u63a8\u8350\u4efb\u52a1\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u5c06\u9884\u6d4b\u5e7f\u544a\u70b9\u51fb\u7387\u7684\u4efb\u52a1\u8bbe\u5b9a\u4e3a\u6839\u636e\u7528\u6237\u7684\u6d3b\u52a8\u5386\u53f2\u548c\u4e2a\u4eba\u8d44\u6599\u5411\u7528\u6237\u63a8\u8350\u6700\u76f8\u5173\u7684\u5e7f\u544a\u3002\n\u7136\u800c\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u7684\u63a8\u8350\u7cfb\u7edf\u90fd\u6709\u77ed\u53cd\u9988\u56de\u8def\u3002\u6839\u636e\u6240\u63a8\u8350\u7269\u54c1\u7684\u6027\u8d28\uff0c\u6807\u7b7e\u7684\u5ef6\u8fdf\u65f6\u95f4\u53ef\u4ee5\u662f\u51e0\u79d2\u5230\u51e0\u5c0f\u65f6\uff0c\u5728\u67d0\u4e9b\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u662f\u51e0\u5929\u6216\u51e0\u5468\u3002\u5982\u679c\u63a8\u8350\u7684\u9879\u76ee\u662f\u8981\u5728Reddit\u4e0a\u8ba2\u9605\u7684SubReddit\u3001\u8981\u5728Twitter\u4e0a\u5173\u6ce8\u7684\u4eba\u3001\u8981\u5728Tiktok\u4e0a\u89c2\u770b\u7684\u4e0b\u4e00\u4e2a\u89c6\u9891\u7b49\uff0c\u90a3\u4e48\u4ece\u63a8\u8350\u9879\u76ee\u5230\u70b9\u51fb\u5b83\uff08\u5982\u679c\u70b9\u51fb\u4e86\u5b83\uff09\u4e4b\u95f4\u7684\u65f6\u95f4\u662f\u79d2\u3002\u5982\u679c\u4f60\u5904\u7406\u8f83\u957f\u7684\u5185\u5bb9\u7c7b\u578b\uff0c\u5982\u535a\u5ba2\u6587\u7ae0\u3001\u6587\u7ae0\u6216YouTube\u89c6\u9891\uff0c\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u751a\u81f3\u51e0\u5c0f\u65f6\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u5efa\u7acb\u4e86\u4e00\u4e2a\u7cfb\u7edf\uff0c\u50cfone Stitch Fix\u90a3\u6837\u4e3a\u7528\u6237\u63a8\u8350\u8863\u670d\uff0c\u90a3\u4e48\u5728\u7528\u6237\u6536\u5230\u8fd9\u4e9b\u8863\u670d\u5e76\u8bd5\u7a7f\u4e4b\u524d\uff0c\u4f60\u4e0d\u4f1a\u5f97\u5230\u53cd\u9988\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u51e0\u5468\u540e\u3002\n\u9664\u975e\u6bcf\u4e2a\u63a8\u8350\u9879\u76ee\u65c1\u8fb9\u90fd\u6709\u4e00\u4e2a\u63d0\u793a\uff1a\u201c\u4f60\u559c\u6b22\u8fd9\u4e2a\u63a8\u8350\u5417\uff1f\u662f/\u5426\u201d\uff0c\u5426\u5219\u63a8\u8350\u7cfb\u7edf\u6ca1\u6709\u660e\u786e\u7684\u8d1f\u9762\u6807\u7b7e\u3002\u5373\u4f7f\u4f60\u6dfb\u52a0\u4e86\u8fd9\u4e2a\u63d0\u793a\uff0c\u4e5f\u4e0d\u80fd\u4fdd\u8bc1\u7528\u6237\u4f1a\u54cd\u5e94\u3002\u901a\u5e38\uff0c\u5982\u679c\u7f3a\u4e4f\u6b63\u9762\u53cd\u9988\uff0c\u5efa\u8bae\u88ab\u8ba4\u4e3a\u662f\u4e0d\u597d\u7684\u3002\u5728\u7279\u5b9a\u7684\u65f6\u95f4\u7a97\u53e3\u540e\uff0c\u5982\u679c\u6ca1\u6709\u70b9\u51fb\uff0c\u5219\u5047\u5b9a\u6807\u7b7e\u4e3a\u8d1f\u7247\u3002\u9009\u62e9\u6b63\u786e\u7684\u7a97\u53e3\u957f\u5ea6\u9700\u8981\u4ed4\u7ec6\u8003\u8651\uff0c\u56e0\u4e3a\u5b83\u6d89\u53ca\u901f\u5ea6\u548c\u7cbe\u5ea6\u7684\u6743\u8861\u3002\u77ed\u7a97\u53e3\u957f\u5ea6\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u66f4\u5feb\u5730\u6355\u83b7\u6807\u7b7e\uff0c\u8fd9\u5141\u8bb8\u60a8\u4f7f\u7528\u8fd9\u4e9b\u6807\u7b7e\u8fdb\u884c\u76d1\u63a7\u548c\u6301\u7eed\u5b66\u4e60\u3002\u7136\u800c\uff0c\u77ed\u7a97\u53e3\u957f\u5ea6\u4e5f\u610f\u5473\u7740\u60a8\u53ef\u80fd\u4f1a\u8fc7\u65e9\u5730\u5c06\u67d0\u4e2a\u9879\u76ee\u6807\u8bb0\u4e3a\u201c\u5728\u88ab\u5355\u51fb\u4e4b\u524d\u4e0d\u5355\u51fb\u201d\u3002\n\u65e0\u8bba\u4f60\u5c06\u7a97\u53e3\u957f\u5ea6\u8bbe\u7f6e\u4e3a\u591a\u957f\uff0c\u90fd\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fc7\u65e9\u7684\u8d1f\u9762\u6807\u7b7e\u30022021\u5e74\u521d\uff0c\u63a8\u7279\u5e7f\u544a\u56e2\u961f\u7684\u7814\u7a76\u53d1\u73b0\uff0c\u5373\u4f7f\u5e7f\u544a\u70b9\u51fb\u6b21\u6570\u6700\u591a\u53d1\u751f\u57285\u5206\u949f\u5185\uff0c\u4f46\u70b9\u51fb\u5e7f\u544a\u540e\u51e0\u5c0f\u65f6\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e9b\u70b9\u51fb\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u7c7b\u6807\u7b7e\u5f80\u5f80\u4f4e\u4f30\u4e86\u5b9e\u9645\u70b9\u51fb\u7387\u3002\u5982\u679c\u4f60\u53ea\u8bb0\u5f55\u4e861000\u6b21\u70b9\u51fb\uff0c\u5b9e\u9645\u7684\u70b9\u51fb\u6b21\u6570\u53ef\u80fd\u4f1a\u8d85\u8fc71000\u6b21\u3002\n\u5bf9\u4e8e\u53cd\u9988\u5faa\u73af\u8f83\u957f\u7684\u4efb\u52a1\uff0c\u81ea\u7136\u6807\u7b7e\u53ef\u80fd\u9700\u8981\u6570\u5468\u751a\u81f3\u6570\u6708\u624d\u80fd\u5230\u8fbe\u3002\u6b3a\u8bc8\u68c0\u6d4b\u5c31\u662f\u4e00\u4e2a\u957f\u53cd\u9988\u5faa\u73af\u4efb\u52a1\u7684\u4f8b\u5b50\u3002\u5728\u4ea4\u6613\u7ed3\u675f\u540e\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u7528\u6237\u53ef\u4ee5\u8d28\u7591\u8be5\u4ea4\u6613\u662f\u5426\u6b3a\u8bc8\u3002\u4f8b\u5982\uff0c\u5f53\u5ba2\u6237\u9605\u8bfb\u4fe1\u7528\u5361\u5bf9\u8d26\u5355\uff0c\u53d1\u73b0\u4e00\u7b14\u4ed6\u4eec\u4e0d\u8ba4\u8bc6\u7684\u4ea4\u6613\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4e0e\u94f6\u884c\u53d1\u751f\u4e89\u8bae\uff0c\u5411\u94f6\u884c\u63d0\u4f9b\u53cd\u9988\uff0c\u5c06\u8be5\u4ea4\u6613\u6807\u8bb0\u4e3a\u6b3a\u8bc8\u3002\u4e00\u4e2a\u5178\u578b\u7684\u4e89\u8bae\u7a97\u53e3\u662f\u4e00\u4e2a\u6708\u5230\u4e09\u4e2a\u6708\u3002\u4e89\u8bae\u7a97\u53e3\u8fc7\u540e\uff0c\u5982\u679c\u7528\u6237\u6ca1\u6709\u4e89\u8bae\uff0c\u60a8\u53ef\u4ee5\u5047\u5b9a\u8be5\u4ea4\u6613\u662f\u5408\u6cd5\u7684\u3002\n\u5e26\u6709\u957f\u53cd\u9988\u5faa\u73af\u7684\u6807\u7b7e\u6709\u52a9\u4e8e\u5728\u5b63\u5ea6\u6216\u5e74\u5ea6\u4e1a\u52a1\u62a5\u544a\u4e2d\u62a5\u544a\u6a21\u578b\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u60f3\u5c3d\u5feb\u53d1\u73b0\u6a21\u578b\u7684\u95ee\u9898\uff0c\u5b83\u4eec\u5e76\u4e0d\u662f\u5f88\u6709\u5e2e\u52a9\u3002\u5982\u679c\u4f60\u7684\u6b3a\u8bc8\u68c0\u6d4b\u6a21\u578b\u6709\u95ee\u9898\uff0c\u9700\u8981\u51e0\u4e2a\u6708\u624d\u80fd\u53d1\u73b0\uff0c\u7b49\u5230\u95ee\u9898\u89e3\u51b3\u65f6\uff0c\u4f60\u7684\u9519\u8bef\u6a21\u578b\u6cc4\u9732\u7684\u6240\u6709\u6b3a\u8bc8\u4ea4\u6613\u90fd\u53ef\u80fd\u5bfc\u81f4\u4e00\u5bb6\u5c0f\u4f01\u4e1a\u7834\u4ea7\u3002\n\u5728\u786e\u5b9aML\u7cfb\u7edf\u6545\u969c\u7684\u539f\u56e0\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u7b80\u8981\u8ba8\u8bba\u4e00\u4e0b\u4ec0\u4e48\u662fML\u7cfb\u7edf\u6545\u969c\u3002\u5f53\u8fdd\u53cd\u7cfb\u7edf\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u9884\u671f\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u6545\u969c\u3002\u5728\u4f20\u7edf\u8f6f\u4ef6\u4e2d\uff0c\u6211\u4eec\u4e3b\u8981\u5173\u5fc3\u7cfb\u7edf\u7684\u64cd\u4f5c\u9884\u671f\uff1a\u7cfb\u7edf\u662f\u5426\u5728\u9884\u671f\u7684\u64cd\u4f5c\u6307\u6807\uff08\u5982\u9884\u671f\u7684\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\uff09\u5185\u6267\u884c\u5176\u903b\u8f91\u3002\n\u5bf9\u4e8eML\u7cfb\u7edf\uff0c\u6211\u4eec\u5173\u5fc3\u5b83\u7684\u64cd\u4f5c\u6307\u6807\u548cML\u6027\u80fd\u6307\u6807\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u82f1\u6cd5\u673a\u5668\u7ffb\u8bd1\u7cfb\u7edf\u3002\u5b83\u7684\u64cd\u4f5c\u9884\u671f\u53ef\u80fd\u662f\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u82f1\u8bed\u53e5\u5b50\uff0c\u7cfb\u7edf\u4f1a\u5728\u7b2c\u4e8c\u4e2a\u5ef6\u8fdf\u5185\u8fd4\u56de\u4e00\u4e2a\u6cd5\u8bed\u7ffb\u8bd1\u3002\u5b83\u7684ML\u6027\u80fd\u9884\u671f\u662f\uff0c\u8fd4\u56de\u7684\u8bd1\u6587\u572899%\u7684\u65f6\u95f4\u5185\u662f\u5bf9\u539f\u59cb\u82f1\u8bed\u53e5\u5b50\u7684\u51c6\u786e\u7ffb\u8bd1\u3002\n\u5982\u679c\u4f60\u5728\u7cfb\u7edf\u4e2d\u8f93\u5165\u4e86\u4e00\u4e2a\u82f1\u8bed\u53e5\u5b50\uff0c\u4f46\u6ca1\u6709\u5f97\u5230\u7ffb\u8bd1\uff0c\u90a3\u4e48\u7b2c\u4e00\u4e2a\u671f\u671b\u503c\u5c31\u88ab\u8fdd\u53cd\u4e86\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u7cfb\u7edf\u6545\u969c\u3002\n\u5982\u679c\u4f60\u5f97\u5230\u4e86\u4e00\u4e2a\u4e0d\u6b63\u786e\u7684\u7ffb\u8bd1\uff0c\u8fd9\u4e0d\u4e00\u5b9a\u662f\u7cfb\u7edf\u6545\u969c\uff0c\u56e0\u4e3a\u7cbe\u5ea6\u9884\u671f\u5141\u8bb8\u4e00\u5b9a\u7684\u8bef\u5dee\u8303\u56f4\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60\u4e0d\u65ad\u5730\u5728\u7cfb\u7edf\u4e2d\u8f93\u5165\u4e0d\u540c\u7684\u82f1\u8bed\u53e5\u5b50\uff0c\u5e76\u4e14\u4e0d\u65ad\u5730\u5f97\u5230\u9519\u8bef\u7684\u7ffb\u8bd1\uff0c\u90a3\u4e48\u7b2c\u4e8c\u4e2a\u671f\u671b\u5c31\u88ab\u8fdd\u80cc\u4e86\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u7cfb\u7edf\u6545\u969c\u3002\n\u64cd\u4f5c\u9884\u671f\u8fdd\u89c4\u66f4\u5bb9\u6613\u68c0\u6d4b\uff0c\u56e0\u4e3a\u5b83\u4eec\u901a\u5e38\u4f34\u968f\u7740\u64cd\u4f5c\u4e2d\u65ad\uff0c\u4f8b\u5982\u8d85\u65f6\u3001\u7f51\u9875\u4e0a\u7684404\u9519\u8bef\u3001\u5185\u5b58\u4e0d\u8db3\u9519\u8bef\u3001\u5206\u6bb5\u9519\u8bef\u7b49\u3002\u7136\u800c\uff0cML\u6027\u80fd\u9884\u671f\u8fdd\u89c4\u66f4\u96be\u68c0\u6d4b\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u751f\u4ea7\u4e2d\u6d4b\u91cf\u548c\u76d1\u63a7ML\u6a21\u578b\u7684\u6027\u80fd\u3002\u5728\u4e0a\u9762\u7684\u82f1\u6cd5\u673a\u5668\u7ffb\u8bd1\u7cfb\u7edf\u7684\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u77e5\u9053\u6b63\u786e\u7684\u7ffb\u8bd1\u5e94\u8be5\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u572899%\u7684\u65f6\u95f4\u91cc\u68c0\u6d4b\u8fd4\u56de\u7684\u7ffb\u8bd1\u662f\u5426\u6b63\u786e\u662f\u5f88\u56f0\u96be\u7684\u3002\u6709\u65e0\u6570\u7684\u4f8b\u5b50\u8868\u660e\uff0c\u8c37\u6b4c\u7ffb\u8bd1\u7684\u9519\u8bef\u7ffb\u8bd1\u88ab\u7528\u6237\u4f7f\u7528\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u77e5\u9053\u8fd9\u4e9b\u7ffb\u8bd1\u662f\u9519\u8bef\u7684\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u4eec\u8bf4ML\u7cfb\u7edf\u901a\u5e38\u4f1a\u65e0\u58f0\u5730\u5931\u8d25\u3002\n\u4e3a\u4e86\u6709\u6548\u5730\u68c0\u6d4b\u548c\u4fee\u590d\u751f\u4ea7\u4e2d\u7684ML\u7cfb\u7edf\u6545\u969c\uff0c\u4e86\u89e3\u4e00\u4e2a\u6a21\u578b\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fd0\u884c\u826f\u597d\u540e\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u5728\u751f\u4ea7\u4e2d\u5931\u8d25\u662f\u5f88\u6709\u7528\u7684\u3002\u6211\u4eec\u5c06\u7814\u7a76\u4e24\u79cd\u7c7b\u578b\u7684\u6545\u969c\uff1a\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u548c\u7279\u5b9a\u4e8eML\u7684\u6545\u969c\u3002\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u662f\u975eML\u7cfb\u7edf\u53ef\u80fd\u53d1\u751f\u7684\u6545\u969c\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u7684\u4f8b\u5b50\u3002\n\u4f9d\u8d56\u5931\u8d25\uff1a\u7cfb\u7edf\u4f9d\u8d56\u7684\u8f6f\u4ef6\u5305\u6216\u4ee3\u7801\u5e93\u4e2d\u65ad\uff0c\u5bfc\u81f4\u7cfb\u7edf\u4e2d\u65ad\u3002\u5f53\u4f9d\u8d56\u5173\u7cfb\u7531\u7b2c\u4e09\u65b9\u7ef4\u62a4\u65f6\uff0c\u8fd9\u79cd\u6545\u969c\u6a21\u5f0f\u5f88\u5e38\u89c1\uff0c\u5982\u679c\u7ef4\u62a4\u4f9d\u8d56\u5173\u7cfb\u7684\u7b2c\u4e09\u65b9\u4e0d\u518d\u5b58\u5728\uff0c\u8fd9\u79cd\u6545\u969c\u6a21\u5f0f\u5c24\u5176\u5e38\u89c11\u3002\n\u90e8\u7f72\u5931\u8d25\uff1a\u7531\u90e8\u7f72\u9519\u8bef\u5f15\u8d77\u7684\u5931\u8d25\uff0c\u4f8b\u5982\uff0c\u5f53\u60a8\u610f\u5916\u5730\u90e8\u7f72\u4e86\u6a21\u578b\u7684\u65e7\u7248\u672c\u800c\u4e0d\u662f\u5f53\u524d\u7248\u672c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u65f6\uff0c\u6216\u8005\u5f53\u60a8\u7684\u7cfb\u7edf\u6ca1\u6709\u8bfb\u53d6\u6216\u5199\u5165\u67d0\u4e9b\u6587\u4ef6\u7684\u6b63\u786e\u6743\u9650\u65f6\u3002\n\u786c\u4ef6\u6545\u969c\uff1a\u5f53\u60a8\u7528\u4e8e\u90e8\u7f72\u6a21\u578b\u7684\u786c\u4ef6\uff08\u5982CPU\u6216GPU\uff09\u8868\u73b0\u4e0d\u6b63\u5e38\u65f6\u3002\u4f8b\u5982\uff0c\u60a8\u4f7f\u7528\u7684CPU\u53ef\u80fd\u8fc7\u70ed\u5e76\u51fa\u73b0\u6545\u969c\u3002\n\u505c\u673a\u6216\u5d29\u6e83\uff1a\u5982\u679c\u7cfb\u7edf\u7684\u67d0\u4e2a\u7ec4\u4ef6\u4ece\u67d0\u4e2a\u670d\u52a1\u5668\uff08\u5982AWS\u6216\u6258\u7ba1\u670d\u52a1\uff09\u8fd0\u884c\uff0c\u800c\u8be5\u670d\u52a1\u5668\u5df2\u5173\u95ed\uff0c\u5219\u7cfb\u7edf\u4e5f\u5c06\u5173\u95ed\u3002\n\u4ec5\u4ec5\u56e0\u4e3a\u4e00\u4e9b\u6545\u969c\u4e0d\u662f\u7279\u5b9a\u4e8eML\u7684\uff0c\u5e76\u4e0d\u610f\u5473\u7740ML\u5de5\u7a0b\u5e08\u7406\u89e3\u8fd9\u4e9b\u6545\u969c\u5e76\u4e0d\u91cd\u8981\u30022020\u5e74\uff0c\u8c37\u6b4c\u7684\u4e24\u540dML\u5de5\u7a0b\u5e08\u4e39\u5c3c\u5c14\u00b7\u5e15\u5e15\u897f\u5b89\uff08Daniel Papasian\uff09\u548c\u6258\u5fb7\u00b7\u5b89\u5fb7\u4f0d\u5fb7\uff08Todd Underwood\uff09\u7814\u7a76\u4e8696\u8d77\u8c37\u6b4c\u5927\u578bML\u7ba1\u9053\u7834\u88c2\u7684\u6848\u4f8b\u3002\u4ed6\u4eec\u56de\u987e\u4e86\u8fc7\u53bb15\u5e74\u7684\u6570\u636e\uff0c\u4ee5\u786e\u5b9a\u539f\u56e0\uff0c\u5e76\u53d1\u73b096\u6b21\u6545\u969c\u4e2d\u670960\u6b21\u662f\u7531\u4e8e\u4e0eML3\u65e0\u76f4\u63a5\u5173\u7cfb\u7684\u539f\u56e0\u9020\u6210\u7684\u3002\u5927\u591a\u6570\u95ee\u9898\u4e0e\u5206\u5e03\u5f0f\u7cfb\u7edf\u6709\u5173\uff0c\u4f8b\u5982\u5de5\u4f5c\u6d41\u8c03\u5ea6\u5668\u6216\u7f16\u6392\u5668\u51fa\u9519\uff0c\u6216\u4e0e\u6570\u636e\u7ba1\u9053\u6709\u5173\uff0c\u4f8b\u5982\u6765\u81ea\u591a\u4e2a\u6e90\u7684\u6570\u636e\u8fde\u63a5\u9519\u8bef\u6216\u4f7f\u7528\u4e86\u9519\u8bef\u7684\u6570\u636e\u7ed3\u6784\u3002\n\u89e3\u51b3\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u9700\u8981\u7684\u4e0d\u662fML\u6280\u80fd\uff0c\u800c\u662f\u4f20\u7edf\u7684\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\uff0c\u89e3\u51b3\u5b83\u4eec\u8d85\u51fa\u4e86\u672c\u8bfe\u7a0b\u7684\u8303\u56f4\u3002\u7531\u4e8e\u4f20\u7edf\u8f6f\u4ef6\u5de5\u7a0b\u6280\u80fd\u5728\u90e8\u7f72ML\u7cfb\u7edf\u4e2d\u7684\u91cd\u8981\u6027\uff0c\u5927\u591a\u6570ML\u5de5\u7a0b\u90fd\u662f\u5de5\u7a0b\uff0c\u800c\u4e0d\u662fML 4\u3002\u5bf9\u4e8e\u6709\u5174\u8da3\u4ece\u8f6f\u4ef6\u5de5\u7a0b\u7684\u89d2\u5ea6\u5b66\u4e60\u5982\u4f55\u4f7fML\u7cfb\u7edf\u53ef\u9760\u7684\u8bfb\u8005\uff0c\u6211\u5f3a\u70c8\u63a8\u8350O\u2019Reilly\u4e0eTodd Underwood\u5408\u8457\u7684\u300a\u53ef\u9760\u7684\u673a\u5668\u5b66\u4e60\u300b\u4e00\u4e66\u3002\n\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u666e\u904d\u5b58\u5728\u7684\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u7531\u4e8e\u4e1a\u754c\u5bf9ML\u7684\u91c7\u7528\u5c1a\u5904\u4e8e\u521d\u7ea7\u9636\u6bb5\uff0c\u56f4\u7ed5ML\u751f\u4ea7\u7684\u5de5\u5177\u6709\u9650\uff0c\u6700\u4f73\u5b9e\u8df5\u5c1a\u672a\u5f97\u5230\u5145\u5206\u5f00\u53d1\u6216\u6807\u51c6\u5316\u3002\u7136\u800c\uff0c\u968f\u7740ML\u751f\u4ea7\u5de5\u5177\u548c\u6700\u4f73\u5b9e\u8df5\u7684\u6210\u719f\uff0c\u6709\u7406\u7531\u76f8\u4fe1\u8f6f\u4ef6\u7cfb\u7edf\u6545\u969c\u7684\u6bd4\u4f8b\u5c06\u51cf\u5c11\uff0c\u800c\u7279\u5b9a\u4e8eML\u7684\u6545\u969c\u7684\u6bd4\u4f8b\u5c06\u589e\u52a0\u3002\n\u7279\u5b9a\u4e8eML\u7684\u6545\u969c\u662f\u7279\u5b9a\u4e8eML\u7cfb\u7edf\u7684\u6545\u969c\u3002\u4f8b\u5982\uff0c\u6570\u636e\u6536\u96c6\u548c\u5904\u7406\u95ee\u9898\u3001\u8d85\u53c2\u6570\u5dee\u3001\u8bad\u7ec3\u7ba1\u9053\u4e2d\u7684\u53d8\u5316\u672a\u5728\u63a8\u7406\u7ba1\u9053\u4e2d\u6b63\u786e\u590d\u5236\uff0c\u53cd\u4e4b\u4ea6\u7136\u3001\u5bfc\u81f4\u6a21\u578b\u6027\u80fd\u968f\u65f6\u95f4\u6076\u5316\u7684\u6570\u636e\u5206\u5e03\u53d8\u5316\u3001\u8fb9\u7f18\u60c5\u51b5\u548c\u9000\u5316\u7684\u53cd\u9988\u56de\u8def\u3002\n\u5728\u672c\u8bfe\u4e2d\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u8ba8\u8bba\u7279\u5b9a\u4e8eML\u7684\u6545\u969c\u3002\u5c3d\u7ba1\u5b83\u4eec\u53ea\u5360\u6545\u969c\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u4f46\u5b83\u4eec\u53ef\u80fd\u6bd4\u975eML\u6545\u969c\u66f4\u5371\u9669\uff0c\u56e0\u4e3a\u5b83\u4eec\u5f88\u96be\u68c0\u6d4b\u548c\u4fee\u590d\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u963b\u6b62ML\u7cfb\u7edf\u88ab\u5b8c\u5168\u4f7f\u7528\u3002\u5728\u4e4b\u524d\u7684\u8bfe\u7a0b\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u6570\u636e\u95ee\u9898\u3001\u8d85\u53c2\u6570\u8c03\u6574\uff0c\u4ee5\u53ca\u4f7f\u7528\u4e24\u6761\u5355\u72ec\u7684\u7ba1\u9053\u8fdb\u884c\u8bad\u7ec3\u548c\u63a8\u7406\u7684\u5371\u9669\u3002\u5728\u672c\u8bfe\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bba\u90e8\u7f72\u6a21\u578b\u540e\u51fa\u73b0\u7684\u4e09\u4e2a\u65b0\u4f46\u975e\u5e38\u5e38\u89c1\u7684\u95ee\u9898\uff1a\u6539\u53d8\u6570\u636e\u5206\u5e03\u3001\u8fb9\u7f18\u60c5\u51b5\u548c\u9000\u5316\u53cd\u9988\u5faa\u73af\u3002\n\u5f53\u6211\u4eec\u8bf4ML\u6a21\u578b\u4ece\u8bad\u7ec3\u6570\u636e\u4e2d\u5b66\u4e60\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u6a21\u578b\u5b66\u4e60\u8bad\u7ec3\u6570\u636e\u7684\u57fa\u672c\u5206\u5e03\uff0c\u76ee\u7684\u662f\u5229\u7528\u5b66\u4e60\u5230\u7684\u5206\u5e03\u4e3a\u770b\u4e0d\u89c1\u7684\u6570\u636e\u751f\u6210\u51c6\u786e\u7684\u9884\u6d4b\uff0c\u8fd9\u4e9b\u6570\u636e\u662f\u5b83\u5728\u8bad\u7ec3\u671f\u95f4\u6ca1\u6709\u770b\u5230\u7684\u3002\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u6570\u636e\u5206\u5e03\u90e8\u5206\u4ece\u6570\u5b66\u4e0a\u63a2\u8ba8\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u3002\u5f53\u6a21\u578b\u80fd\u591f\u4e3a\u770b\u4e0d\u89c1\u7684\u6570\u636e\u751f\u6210\u51c6\u786e\u7684\u9884\u6d4b\u65f6\uff0c\u6211\u4eec\u8bf4\u8fd9\u4e2a\u6a21\u578b\u201c\u63a8\u5e7f\u5230\u770b\u4e0d\u89c1\u7684\u6570\u636e\u30025\u201d\u6211\u4eec\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7528\u6765\u8bc4\u4f30\u6a21\u578b\u7684\u6d4b\u8bd5\u6570\u636e\u5e94\u8be5\u4ee3\u8868\u770b\u4e0d\u89c1\u7684\u6570\u636e\uff0c\u6a21\u578b\u5728\u6d4b\u8bd5\u6570\u636e\u4e0a\u7684\u8868\u73b0\u5e94\u8be5\u8ba9\u6211\u4eec\u4e86\u89e3\u6a21\u578b\u63a8\u5e7f\u7684\u6548\u679c\u3002\n\u6211\u5728ML\u8bfe\u7a0b\u4e2d\u5b66\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u8bad\u7ec3\u6570\u636e\u548c\u770b\u4e0d\u89c1\u7684\u6570\u636e\u5fc5\u987b\u6765\u81ea\u540c\u4e00\u4e2a\u5206\u5e03\u3002\u5047\u8bbe\u770b\u4e0d\u89c1\u7684\u6570\u636e\u6765\u81ea\u4e0e\u8bad\u7ec3\u6570\u636e\u5206\u5e03\u76f8\u540c\u7684\u5e73\u7a33\u5206\u5e03\u3002\u5982\u679c\u770b\u4e0d\u89c1\u7684\u6570\u636e\u6765\u81ea\u4e0d\u540c\u7684\u5206\u5e03\uff0c\u8be5\u6a21\u578b\u53ef\u80fd\u65e0\u6cd5\u5f88\u597d\u5730\u63a8\u5e7f\u3002\n\u8fd9\u79cd\u5047\u8bbe\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u539f\u56e0\u6709\u4e8c\u3002\u9996\u5148\uff0c\u771f\u5b9e\u4e16\u754c\u6570\u636e\u7684\u6f5c\u5728\u5206\u5e03\u4e0d\u592a\u53ef\u80fd\u4e0e\u8bad\u7ec3\u6570\u636e\u7684\u6f5c\u5728\u5206\u5e03\u76f8\u540c\u3002\u7b56\u5212\u4e00\u4e2a\u80fd\u591f\u51c6\u786e\u8868\u793a\u6a21\u578b\u5728\u751f\u4ea7\u4e2d\u4f1a\u9047\u5230\u7684\u6570\u636e\u7684\u8bad\u7ec3\u6570\u636e\u96c6\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u6570\u636e\u662f\u591a\u65b9\u9762\u7684\uff0c\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u51e0\u4e4e\u662f\u65e0\u9650\u7684\uff0c\u800c\u8bad\u7ec3\u6570\u636e\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u53d7\u6570\u636e\u96c6\u521b\u5efa\u548c\u5904\u7406\u671f\u95f4\u53ef\u7528\u7684\u65f6\u95f4\u3001\u8ba1\u7b97\u548c\u4eba\u529b\u8d44\u6e90\u7684\u9650\u5236\u3002\u53ef\u80fd\u4f1a\u51fa\u73b0\u8bb8\u591a\u4e0d\u540c\u7684\u9009\u62e9\u548c\u91c7\u6837\u504f\u5dee\uff0c\u4f7f\u73b0\u5b9e\u4e16\u754c\u7684\u6570\u636e\u4e0e\u8bad\u7ec3\u6570\u636e\u4ea7\u751f\u504f\u5dee\u3002\u8fd9\u79cd\u5dee\u5f02\u53ef\u80fd\u4e0e\u4f7f\u7528\u4e0d\u540c\u7c7b\u578b\u8868\u60c5\u7f16\u7801\u7684\u771f\u5b9e\u4e16\u754c\u6570\u636e\u4e00\u6837\u5c0f\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u5206\u6b67\u5bfc\u81f4\u4e86\u4e00\u79cd\u5e38\u89c1\u7684\u6545\u969c\u6a21\u5f0f\uff0c\u79f0\u4e3a\u201c\u5217\u8f66\u670d\u52a1\u503e\u659c\u201d\uff1a\u8fd9\u79cd\u6a21\u5f0f\u5728\u5f00\u53d1\u4e2d\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u5728\u90e8\u7f72\u65f6\u8868\u73b0\u4e0d\u4f73\u3002\n\u7b2c\u4e8c\uff0c\u73b0\u5b9e\u4e16\u754c\u4e0d\u662f\u9759\u6b62\u7684\u3002\u4e8b\u60c5\u53d8\u4e86\u3002\u6570\u636e\u5206\u5e03\u53d1\u751f\u4e86\u53d8\u5316\u30022019\uff0c2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c52019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\uff0c\u4f46\u5f53\u4eba\u4eec\u641c\u7d22\u6b66\u6c49\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u60f3\u5f97\u5230\u65c5\u6e38\u4fe1\u606f\uff0c\u4f46\u662f\u81ea\u4eceCOVID-19\uff0c\u5f53\u4eba\u4eec\u641c\u7d22\u6b66\u6c49\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u60f3\u77e5\u9053COVID-19\u8d77\u6e90\u7684\u5730\u65b9\u3002\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u6545\u969c\u6a21\u5f0f\u662f\uff0c\u6a21\u578b\u5728\u9996\u6b21\u90e8\u7f72\u65f6\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u968f\u7740\u6570\u636e\u5206\u5e03\u7684\u53d8\u5316\uff0c\u5176\u6027\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u4e0b\u964d\u3002\u53ea\u8981\u6a21\u578b\u4ecd\u5728\u751f\u4ea7\u4e2d\uff0c\u5c31\u9700\u8981\u6301\u7eed\u76d1\u63a7\u548c\u68c0\u6d4b\u8fd9\u79cd\u6545\u969c\u6a21\u5f0f\u3002\n\u5f53\u6211\u4f7f\u75282019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u5f15\u8d77\u6570\u636e\u8f6c\u79fb\u65f6\uff0c\u4e00\u4e9b\u4eba\u4f1a\u89c9\u5f97\u6570\u636e\u8f6c\u79fb\u53ea\u662f\u56e0\u4e3a\u4e0d\u5bfb\u5e38\u7684\u4e8b\u4ef6\u53d1\u751f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u4f1a\u7ecf\u5e38\u53d1\u751f\u3002\u6570\u636e\u53d8\u5316\u603b\u662f\u53d1\u751f\u7684\uff0c\u7a81\u7136\u7684\u3001\u9010\u6e10\u7684\u6216\u5b63\u8282\u6027\u7684\u3002\u5b83\u4eec\u53ef\u80fd\u4f1a\u56e0\u4e3a\u67d0\u4e2a\u7279\u5b9a\u4e8b\u4ef6\u800c\u7a81\u7136\u53d1\u751f\uff0c\u4f8b\u5982\uff0c\u5f53\u73b0\u6709\u7ade\u4e89\u5bf9\u624b\u6539\u53d8\u5176\u5b9a\u4ef7\u653f\u7b56\u65f6\uff0c\u4f60\u5fc5\u987b\u66f4\u65b0\u4ef7\u683c\u9884\u6d4b\u4ee5\u4f5c\u51fa\u56de\u5e94\uff0c\u6216\u8005\u5f53\u4f60\u5728\u4e00\u4e2a\u65b0\u7684\u5730\u533a\u63a8\u51fa\u4ea7\u54c1\u65f6\uff0c\u6216\u8005\u5f53\u4e00\u4f4d\u540d\u4eba\u63d0\u5230\u4f60\u7684\u4ea7\u54c1\u4ece\u800c\u5bfc\u81f4\u65b0\u7528\u6237\u6fc0\u589e\u65f6\uff0c\u7b49\u7b49\u3002\u5b83\u4eec\u53ef\u4ee5\u9010\u6e10\u53d1\u751f\uff0c\u56e0\u4e3a\u793e\u4f1a\u89c4\u8303\u3001\u6587\u5316\u3001\u8bed\u8a00\u3001\u8d8b\u52bf\u3001\u884c\u4e1a\u7b49\u7b49\u90fd\u4f1a\u968f\u7740\u65f6\u95f4\u800c\u6539\u53d8\u3002\u8fd9\u79cd\u60c5\u51b5\u4e5f\u53ef\u80fd\u56e0\u5b63\u8282\u53d8\u5316\u800c\u53d1\u751f\uff0c\u6bd4\u5982\u4eba\u4eec\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u5728\u5bd2\u51b7\u4e0b\u96ea\u7684\u51ac\u5b63\u800c\u4e0d\u662f\u6625\u5b63\u8981\u6c42\u4e58\u5750\u91ce\u5154\u3002\n\u5f53\u8c08\u5230\u6570\u636e\u8f6c\u79fb\u65f6\uff0c\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u7531\u4e8e\u5916\u90e8\u53d8\u5316\u9020\u6210\u7684\uff0c\u6bd4\u5982\u81ea\u7136\u707e\u5bb3\u3001\u5047\u671f\u6216\u7528\u6237\u884c\u4e3a\u3002\u4f46\u5728\u73b0\u5b9e\u4e2d\uff0c\u7531\u4e8eML\u7cfb\u7edf\u7684\u590d\u6742\u6027\u548c\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u7684\u4e0d\u826f\u505a\u6cd5\uff0c\u76d1\u63a7\u4eea\u8868\u76d8\u4e0a\u770b\u8d77\u6765\u50cf\u6570\u636e\u8f6c\u79fb\u7684\u5927\u90e8\u5206\u90fd\u662f\u7531\u5185\u90e8\u9519\u8bef8\u9020\u6210\u7684\uff0c\u4f8b\u5982\u6570\u636e\u7ba1\u9053\u4e2d\u7684\u9519\u8bef\u3001\u9519\u8bef\u586b\u5199\u7684\u7f3a\u5931\u503c\u3001\uff0c\u5728\u8bad\u7ec3\u548c\u63a8\u7406\u671f\u95f4\u63d0\u53d6\u7684\u7279\u5f81\u3001\u4f7f\u7528\u9519\u8bef\u6570\u636e\u5b50\u96c6\u7684\u7edf\u8ba1\u6570\u636e\u6807\u51c6\u5316\u7684\u7279\u5f81\u3001\u9519\u8bef\u7684\u6a21\u578b\u7248\u672c\u6216\u5e94\u7528\u7a0b\u5e8f\u754c\u9762\u4e2d\u8feb\u4f7f\u7528\u6237\u6539\u53d8\u5176\u884c\u4e3a\u7684\u7f3a\u9677\u4e4b\u95f4\u7684\u4e0d\u4e00\u81f4\u3002\n\u7531\u4e8e\u8fd9\u662f\u4e00\u79cd\u5f71\u54cd\u51e0\u4e4e\u6240\u6709ML\u6a21\u578b\u7684\u9519\u8bef\u6a21\u5f0f\uff0c\u6211\u4eec\u5c06\u5728\u201c\u6570\u636e\u5206\u5e03\u201d\u4e00\u8282\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u4e00\u70b9\u3002\n\u60f3\u8c61\u4e00\u4e0b\uff0c\u6709\u4e00\u8f86\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u53ef\u4ee5\u572899.99%\u7684\u65f6\u95f4\u91cc\u5b89\u5168\u9a7e\u9a76\u4f60\uff0c\u4f46\u5728\u53e6\u59160.01%\u7684\u65f6\u95f4\u91cc\uff0c\u5b83\u53ef\u80fd\u4f1a\u9677\u5165\u4e00\u573a\u707e\u96be\u6027\u4e8b\u6545\uff0c\u5bfc\u81f4\u4f60\u6c38\u4e45\u53d7\u4f24\u751a\u81f3\u6b7b\u4ea1\u3002\u4f60\u4f1a\u7528\u90a3\u8f86\u8f66\u5417\uff1f\n\u5982\u679c\u4f60\u60f3\u8bf4\u4e0d\uff0c\u4f60\u5e76\u4e0d\u5b64\u5355\u3002\u5982\u679cML\u6a21\u578b\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u5c11\u6570\u60c5\u51b5\u4e0b\u5931\u8d25\uff0c\u90a3\u4e48\u5982\u679c\u8fd9\u4e9b\u5931\u8d25\u5bfc\u81f4\u707e\u96be\u6027\u540e\u679c\uff0c\u5b83\u53ef\u80fd\u4e0d\u53ef\u7528\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u4e3b\u8981\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u516c\u53f8\u6b63\u4e13\u6ce8\u4e8e\u4f7f\u4ed6\u4eec\u7684\u7cfb\u7edf\u5728\u8fb9\u7f18\u60c5\u51b5\u4e0b\u5de5\u4f5c10 11 12\u3002\n\u8fb9\u7f18\u60c5\u51b5\u662f\u6307\u6570\u636e\u6837\u672c\u975e\u5e38\u6781\u7aef\uff0c\u5bfc\u81f4\u6a21\u578b\u51fa\u73b0\u707e\u96be\u6027\u9519\u8bef\u3002\u5c3d\u7ba1\u8fb9\u7f18\u6848\u4f8b\u901a\u5e38\u6307\u7684\u662f\u4ece\u540c\u4e00\u5206\u5e03\u4e2d\u63d0\u53d6\u7684\u6570\u636e\u6837\u672c\uff0c\u4f46\u5982\u679c\u6a21\u578b\u5728\u5176\u4e2d\u8868\u73b0\u4e0d\u4f73\u7684\u6570\u636e\u6837\u672c\u6570\u91cf\u7a81\u7136\u589e\u52a0\uff0c\u5219\u53ef\u80fd\u8868\u660e\u57fa\u7840\u6570\u636e\u5206\u5e03\u53d1\u751f\u4e86\u53d8\u5316\u3002\n\u81ea\u52a8\u9a7e\u9a76\u8f66\u8f86\u901a\u5e38\u7528\u4e8e\u8bf4\u660e\u8fb9\u7f18\u60c5\u51b5\u5982\u4f55\u963b\u6b62\u90e8\u7f72ML\u7cfb\u7edf\u3002\u4f46\u8fd9\u4e5f\u9002\u7528\u4e8e\u4efb\u4f55\u5b89\u5168\u5173\u952e\u578b\u5e94\u7528\uff0c\u5982\u533b\u7597\u8bca\u65ad\u3001\u4ea4\u901a\u63a7\u5236\u3001eDiscovery 13\u7b49\u3002\u975e\u5b89\u5168\u5173\u952e\u578b\u5e94\u7528\u4e5f\u9002\u7528\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u4e2a\u5ba2\u6237\u670d\u52a1\u804a\u5929\u673a\u5668\u4eba\u5bf9\u5927\u591a\u6570\u8bf7\u6c42\u90fd\u7ed9\u51fa\u4e86\u5408\u7406\u7684\u54cd\u5e94\uff0c\u4f46\u6709\u65f6\u5b83\u4f1a\u5410\u51fa\u6781\u7aef\u79cd\u65cf\u4e3b\u4e49\u6216\u6027\u522b\u6b67\u89c6\u7684\u5185\u5bb9\u3002\u8fd9\u4e2a\u804a\u5929\u673a\u5668\u4eba\u5bf9\u4efb\u4f55\u60f3\u4f7f\u7528\u5b83\u7684\u516c\u53f8\u6765\u8bf4\u90fd\u662f\u4e00\u4e2a\u54c1\u724c\u98ce\u9669\uff0c\u56e0\u6b64\u65e0\u6cd5\u4f7f\u7528\u3002\n\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u5f02\u5e38\u503c\u548c\u8fb9\u7f18\u60c5\u51b5\u4e4b\u95f4\u7684\u533a\u522b\u3002\u8fb9\u7f18\u6848\u4f8b\u7684\u5b9a\u4e49\u56e0\u5b66\u79d1\u800c\u5f02\u3002\u5728ML\u4e2d\uff0c\u7531\u4e8e\u5176\u6700\u8fd1\u5728\u751f\u4ea7\u4e2d\u7684\u91c7\u7528\uff0c\u8fb9\u7f18\u6848\u4f8b\u4ecd\u5728\u88ab\u53d1\u73b0\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u7684\u5b9a\u4e49\u6709\u4e89\u8bae\u3002\n\u5728\u8fd9\u5802\u8bfe\u4e2d\uff0c\u79bb\u7fa4\u503c\u6307\u7684\u662f\u6570\u636e\uff1a\u4e00\u4e2a\u4e0e\u5176\u4ed6\u4f8b\u5b50\u622a\u7136\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\u8fb9\u7f18\u60c5\u51b5\u6307\u7684\u662f\u6027\u80fd\uff1a\u4e00\u4e2a\u6a21\u578b\u7684\u6027\u80fd\u660e\u663e\u4f4e\u4e8e\u5176\u4ed6\u793a\u4f8b\u7684\u793a\u4f8b\u3002\u5f02\u5e38\u503c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6a21\u578b\u8868\u73b0\u5f02\u5e38\u7cdf\u7cd5\uff0c\u8fd9\u4f7f\u5176\u6210\u4e3a\u8fb9\u7f18\u60c5\u51b5\u3002\u7136\u800c\uff0c\u5e76\u975e\u6240\u6709\u7684\u5f02\u5e38\u503c\u90fd\u662f\u8fb9\u7f18\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5728\u9ad8\u901f\u516c\u8def\u4e0a\u884c\u8d70\u7684\u4eba\u662f\u4e00\u4e2a\u5f02\u5e38\u503c\uff0c\u4f46\u5982\u679c\u4f60\u7684\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u80fd\u591f\u51c6\u786e\u5730\u68c0\u6d4b\u5230\u90a3\u4e2a\u4eba\u5e76\u9002\u5f53\u5730\u51b3\u5b9a\u8fd0\u52a8\u54cd\u5e94\uff0c\u90a3\u5c31\u4e0d\u662f\u8fb9\u7f18\u60c5\u51b5\u3002\n\u5728\u6a21\u578b\u5f00\u53d1\u8fc7\u7a0b\u4e2d\uff0c\u5f02\u5e38\u503c\u53ef\u80fd\u4f1a\u5bf9\u6a21\u578b\u7684\u6027\u80fd\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\uff0c\u5220\u9664\u5f02\u5e38\u503c\u53ef\u80fd\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u5b83\u6709\u52a9\u4e8e\u60a8\u7684\u6a21\u578b\u66f4\u597d\u5730\u4e86\u89e3\u51b3\u7b56\u8fb9\u754c\uff0c\u5e76\u66f4\u597d\u5730\u6982\u62ec\u672a\u77e5\u6570\u636e\u3002\u7136\u800c\uff0c\u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u901a\u5e38\u6ca1\u6709\u5220\u9664o\u7684\u9009\u9879\n......", "note_en": "Note:  This note is a work-in-progress, created for the course  CS 329S: Machine Learning Systems Design  (Stanford, 2022). For the fully developed text, see  the book   Designing Machine Learning Systems (Chip Huyen, O\u2019Reilly 2022).  Slides (much shorter \ud83d\ude01).  Original Google Docs version.\n Let\u2019s start the note with a story I was told by an executive that many readers might be able to relate to. About two years ago, his company hired a consulting firm to develop an ML model to help them predict how many of each grocery item they\u2019d need next week, so they could restock the items accordingly. The consulting firm took six months to develop the model. When the consulting firm handed the model over, his company deployed it and was very happy with its performance. They could finally boast to their investors that they were an AI-powered company.\n However, a year later, their numbers went down. The demand for some items was consistently being overestimated, which caused the extra items to expire. At the same time, the demand for some items was consistently being underestimated, leading to lost sales. Initially, his inventory team manually changed the model\u2019s predictions to correct the patterns they noticed, but eventually, the model\u2019s predictions had become so bad that they could no longer use it. They had three options: pay the same consulting firm an obscene amount of money to update the model, pay another consulting firm even more money because this firm would need time to get up to speed, or hire an in-house team to maintain the model onwards.\n His company learned the hard way an important lesson that the rest of the industry is also discovering: deploying a model isn\u2019t the end of the process. A model\u2019s performance degrades over time in production. Once a model has been deployed, we still have to continually monitor its performance to detect issues as well as deploy updates to fix these issues.\n      Tasks with natural ground truth labels are tasks where the model\u2019s predictions can be automatically evaluated or partially evaluated by the system. An example is the model that estimates time of arrival on Google Maps. By the end of a trip, Google Maps knows how long the trip actually took, and thus can evaluate the accuracy of the predicted time of arrival.\n Natural labels are ideal for evaluating a model\u2019s performance. However, even if your task doesn\u2019t inherently have natural labels, it\u2019s possible to set up your system in a way that allows you to collect some feedback on your model. For example, if you\u2019re building a translation system like Google Translate, you can have the option for the community to submit alternative translations for bad translations. Newsfeed ranking is not a task with inherent labels, but by adding the like button and other reactions to each newsfeed item, Facebook is able to collect feedback on their ranking algorithm.\n For tasks with natural ground truth labels, the time it takes from when a prediction is served until when the feedback on it is provided is the feedback loop length.\n Tasks with short feedback loops are tasks where ground truth labels are generally available within minutes. The canonical example of this type of task is recommender systems. The goal of a recommender system is to recommend users items they would like. Whether a user clicks on the recommended item or not can be seen as the feedback for that recommendation. A recommendation that gets clicked on can be presumed to be a good recommendation (i.e. the label is POSITIVE) and a recommendation that doesn\u2019t get clicked on can be presumed to be bad (i.e. the label is NEGATIVE). Many tasks can be framed as recommendation tasks. For example, you can frame the task of predicting ads\u2019 click-through rates as recommending the most relevant ads to users based on their activity histories and profiles.\n However, not all recommender systems have short feedback loops. Depending on the nature of the item to be recommended, the delay until labels can be seconds to hours, and in some extreme cases, days or weeks. If the recommended items are subreddits to subscribe to on Reddit, people to follow on Twitter, videos to watch next on Tiktok, etc., the time between when the item is recommended until it\u2019s clicked on, if it\u2019s clicked on at all, is seconds. If you work with longer content types like blog posts or articles or YouTube videos, it can be minutes, even hours. However, if you build a system to recommend clothes for users like the one Stitch Fix has, you wouldn\u2019t get feedback until users have received the items and tried them on, which could be weeks later.\n Unless next to each recommended item, there\u2019s a prompt that says: \u201c Do you like this recommendation? Yes / No\u201d, recommender systems don\u2019t have explicit negative labels. Even if you add that prompt, there\u2019s no guarantee that users will respond to it. Typically, a recommendation is presumed to be bad if there\u2019s a lack of positive feedback. After a certain time window, if there is no click, the label is presumed to be negative. Choosing the right window length requires thorough consideration, as it involves the speed and accuracy tradeoff. A short window length means that you can capture labels faster, which allows you to use these labels for monitoring and continual learning. However, a short window length also means that you might prematurely label an item as no click before it\u2019s being clicked on.\n No matter how long you set your window length to be, there might still be premature negative labels. In early 2021, a  study by the Ads team at Twitter found that even though the majority of clicks on ads happen within the first 5 minutes, some clicks happen hours after when the ad is shown. This means that this type of label tends to give an underestimate of the actual click-through rate. If you only record 1000 clicks, the actual number of clicks might be a bit over 1000 clicks.\n For tasks with long feedback loops, natural labels might not arrive for weeks or even months. Fraud detection is an example of a task with long feedback loops. For a certain period of time after a transaction, users can dispute whether that transaction is fraudulent or not. For example, when a customer read their credit card\u2019s statement and saw a transaction they didn\u2019t recognize, they might dispute with their bank, giving the bank the feedback to label that transaction as fraudulent. A typical dispute window is a month to three months. After the dispute window has passed, if there\u2019s no dispute from the user, you can presume the transaction to be legitimate.\n Labels with long feedback loops are helpful for reporting a model\u2019s performance on quarterly or yearly business reports. However, they are not very helpful if you want to detect issues with your models as soon as possible. If there\u2019s a problem with your fraud detection model and it takes you months to catch, by the time the problem is fixed, all the fraudulent transactions your faulty model let through might have caused a small business to go bankrupt.\n  Before we identify the cause of ML system failures, let\u2019s briefly discuss what an ML system failure is. A failure happens when one or more expectations of the system is violated. In traditional software, we mostly care about a system\u2019s operational expectations: whether the system executes its logics within the expected operational metrics such as the expected latency and throughput.\n For an ML system, we care about both its operational metrics and its ML performance metrics. For example, consider an English-French machine translation system. Its operational expectation might be that given an English sentence, the system returns a French translation within a second latency. Its ML performance expectation is that the returned translation is an accurate translation of the original English sentence 99% of the time.\n If you enter an English sentence into the system and don\u2019t get back a translation, the first expectation is violated, so this is a system failure.\n If you get back a translation that isn\u2019t correct, it\u2019s not necessarily a system failure because the accuracy expectation allows some margin of error. However, if you keep entering different English sentences into the system and keep getting back wrong translations, the second expectation is violated, which makes it a system failure.\n Operational expectation violations are easier to detect, as they\u2019re usually accompanied by an operational breakage such as a timeout, a 404 error on a webpage, an out of memory error, a segmentation fault, etc. However, ML performance expectation violations are harder to detect as it requires measuring and monitoring the performance of ML models in production. In the example of the English-French machine translation system above, detecting whether the returned translations are correct 99% of the time is difficult if we don\u2019t know what the correct translations are supposed to be. There are countless examples of Google Translate\u2019s painfully wrong translations being used by users because they aren\u2019t aware that these are wrong translations. For this reason, we say that ML systems often fail silently.\n To effectively detect and fix ML system failures in production, it\u2019s useful to understand why a model, after proving to work well during development, would fail in production. We\u2019ll examine two types of failures:  Software system failures and ML-specific failures. Software system failures are failures that would have happened to non-ML systems. Here are some examples of software system failures.\n Dependency failure: a software package or a codebase that your system depends on breaks, which leads your system to break. This failure mode is common when the dependency is maintained by a third party, and especially common if the third-party that maintains the dependency no longer exists  1.\n  Deployment failure: failures caused by deployment errors, such as when you accidentally deploy the binaries of an older version of your model instead of the current version, or when your systems don\u2019t have the right permissions to read or write certain files.\n  Hardware failures: when the hardware that you use to deploy your model, such as CPUs or GPUs, doesn\u2019t behave the way it should. For example, the CPUs you use might overheat and break down  2.\n  Downtime or crashing: if a component of your system runs from a server somewhere, such as AWS or a hosted service, and that server is down, your system will also be down.\n Just because some failures are not specific to ML doesn\u2019t mean it\u2019s not important for ML engineers to understand. In 2020, Daniel Papasian and Todd Underwood, two ML engineers at Google, looked at 96 cases where a large ML pipeline at Google broke. They reviewed data from over the previous 15 years to determine the causes and found out that  60 out of these 96 failures happened due to causes not directly related to ML  3. Most of the issues are related to distributed systems e.g. where the workflow scheduler or orchestrator makes a mistake, or related to the data pipeline e.g. where data from multiple sources is joined incorrectly or the wrong data structures are being used.\n Addressing software system failures requires not ML skills, but traditional software engineering skills, and addressing them is beyond the scope of this class. Because of the importance of traditional software engineering skills in deploying ML systems, the majority of ML engineering is engineering, not ML  4. For readers interested in learning how to make ML systems reliable from the software engineering perspective, I highly recommend the book   Reliable Machine Learning, also published by O\u2019Reilly with Todd Underwood as one of the authors.\n A reason for the prevalence of software system failures is that because ML adoption in the industry is still nascent, tooling around ML production is limited and best practices are not yet well developed or standardized. However, as toolings and best practices for ML production mature, there are reasons to believe that the proportion of software system failures will decrease and the proportion of ML-specific failures will increase.\n ML-specific failures are failures specific to ML systems. Examples include data collection and processing problems, poor hyperparameters, changes in the training pipeline not correctly replicated in the inference pipeline and vice versa, data distribution shifts that cause a model\u2019s performance to deteriorate over time, edge cases, and degenerate feedback loop.\n In this lecture, we\u2019ll focus on addressing ML-specific failures. Even though they account for a small portion of failures, they can be more dangerous than non-ML failures as they\u2019re hard to detect and fix, and can prevent ML systems from being used altogether. We\u2019ve covered data problems, hyperparameter tuning, and the danger of having two separate pipelines for training and inference in previous lectures. In this lecture, we\u2019ll discuss three new but very common problems that arise after a model has been deployed: changing data distribution, edge cases, and degenerate feedback loops.\n  When we say that an ML model learns from the training data, it means that the model learns the underlying distribution of the training data with the goal of leveraging this learned distribution to generate accurate predictions for unseen data \u2014 data that it didn\u2019t see during training. We\u2019ll go into what this means mathematically in the  Data Distribution Shifts section below. When the model is able to generate accurate predictions for unseen data, we say that this model \u201cgeneralizes to unseen data.  5\u201d The test data that we use to evaluate a model during development is supposed to represent unseen data, and the model\u2019s performance on the test data is supposed to give us an idea of how well the model will generalize.\n One of the first things I learned in ML courses is that it\u2019s essential for the training data and the unseen data to come from the same distribution. The assumption is that the unseen data comes from a  stationary distribution that is  the same as the training data distribution. If the unseen data comes from a different distribution, the model might not generalize well  6.\n This assumption is incorrect in most cases for two reasons. First, the underlying distribution of the real-world data is unlikely to be  the same as the underlying distribution of the training data. Curating a training dataset that can accurately represent the data that a model will encounter in production turns out to be very difficult  7. Real-world data is multi-faceted, and in many cases, virtually infinite, whereas training data is finite and constrained by the time, compute, and human resources available during the dataset creation and processing. There are many different selection and sampling biases that can happen and make real-world data diverge from training data. The divergence can be something as minor as real-world data using a different type of encoding of emojis. This type of divergence leads to a common failure mode known as  the train-serving skew: a model that does great in development but performs poorly when deployed.\n Second, the real world isn\u2019t  stationary. Things change. Data distributions shift. In 2019, when people searched for Wuhan, they likely wanted to get travel information, but since COVID-19, when people search for Wuhan, they likely want to know about the place where COVID-19 originated. Another common failure mode is that a model does great when first deployed, but its performance degrades over time as the data distribution changes. This failure mode needs to be continually monitored and detected for as long as a model remains in production.\n When I use COVID-19 as an example that causes data shifts, some people have the impression that data shifts only happen because of unusual events, which implies they don\u2019t happen often. Data shifts happen all the time, suddenly, gradually, or seasonally. They can happen suddenly because of a specific event, such as when your existing competitors change their pricing policies and you have to update your price predictions in response, or when you launch your product in a new region, or when a celebrity mentions your product which causes a surge in new users, and so on. They can happen gradually because social norms, cultures, languages, trends, industries, and more just change over time. They can also happen due to seasonal variations, such as people might be more likely to request rideshares in the winter when it\u2019s cold and snowy than in the spring.\n When talking about data shifts, many people imagine that they are due to external changes, such as natural disasters, holiday seasons, or user behaviors. But in reality, due to the complexity of ML systems and the poor practices in deploying them, a large percentage of what might look like data shifts on monitoring dashboards are caused by internal errors  8, such as bugs in the data pipeline, missing values incorrectly filled in, inconsistencies between the features extracted during training and inference, features standardized using statistics from the wrong subset of data, wrong model version, or bugs in the app interface that forces users to change their behaviors.\n Since this is an error mode that affects almost all ML models, we\u2019ll cover this in detail in the section  Data Distribution Shifts.\n  Imagine there existed a self-driving car that can drive you safely 99.99% of the time, but the other 0.01% of the time, it might get into a catastrophic accident that can leave you permanently injured or even dead  9. Would you use that car?\n If you\u2019re tempted to say no, you\u2019re not alone. An ML model that performs well on most cases but fails on a small number of cases might not be usable if these failures cause catastrophic consequences. For this reason, major self-driving car companies are focusing on making their systems work on edge cases  10  11  12.\n Edge cases are the data samples so extreme that they cause the model to make catastrophic mistakes. Even though edge cases generally refer to data samples drawn from the same distribution, if there is a sudden increase in the number of data samples in which your model doesn\u2019t perform well on, it could be an indication that the underlying data distribution has shifted.\n Autonomous vehicles are often used to illustrate how edge cases can prevent an ML system from being deployed. But this is also true for any safety-critical application such as medical diagnosis, traffic control, eDiscovery  13, etc. It can also be true for non-safety-critical applications. Imagine a customer service chatbot that gives reasonable responses to most of the requests, but sometimes, it spits out outrageously racist or sexist content. This chatbot will be a brand risk for any company that wants to use it, thus rendering it unusable.\n  You might wonder about the differences between an outlier and an edge case. The definition of what makes an edge case varies by discipline. In ML, because of its recent adoption in production, edge cases are still being discovered, which makes their definition contentious.\n In this lecture, outliers refer to data: an example that differs significantly from other examples. Edge cases refer to performance: an example where a model performs significantly worse than other examples. An outlier can cause a model to perform unusually poorly, which makes it an edge case. However, not all outliers are edge cases. For example, a person jay-walking on a highway is an outlier, but it\u2019s not an edge case if your self-driving car can accurately detect that person and decide on a motion response appropriately.\n During model development, outliers can negatively affect your model\u2019s performance. In many cases, it might be beneficial to remove outliers as it helps your model to learn better decision boundaries and generalize better to unseen data. However, during inference, you don\u2019t usually have the option to remove o\n......", "posttime": "2022-02-17 00:53:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5206\u53d1,distribution,\u6a21\u578b", "title": "\u6570\u636e\u5206\u53d1\u548c\u76d1\u63a7", "title_en": "Data Distribution Shifts and Monitoring", "transed": 1, "url": "https://huyenchip.com/2022/02/07/data-distribution-shifts-and-monitoring.html", "via": "", "real_tags": ["\u5206\u53d1", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073653, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6316\u6398\u5e03\u7f57\u5fb7\u52a0\u72c2\u98ce\u8086\u8650\u7684\u8003\u53e4\u4eba\u5458\u6b63\u5728\u53d1\u6398\u65b0\u77f3\u5668\u65f6\u4ee3\u6751\u5e84\u3001\u575f\u5893\u3001\u6b66\u5668\u548c\u795e\u79d8\u5b97\u6559\u6587\u7269\u7684\u5b9d\u85cf\uff0c\u5176\u4e2d\u4e00\u4e9b\u5c06\u5728\u4e00\u573a\u8f70\u52a8\u4e00\u65f6\u7684\u5c55\u89c8\u4e2d\u5c55\u51fa\n\u5982\u679c\u4f60\u78b0\u5de7\u60f3\u5230\u82f1\u56fd\u77f3\u5668\u65f6\u4ee3\u7684\u9057\u8ff9\u5df2\u7ecf\u6240\u5269\u65e0\u51e0\uff0c\u6216\u8005\u5b83\u7684\u9057\u8ff9\u7531\u96be\u4ee5\u8fa8\u8ba4\u7684\u67f1\u5b54\u548c\u9aa8\u5934\u788e\u7247\u7ec4\u6210\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u627e\u5230\u53bb\u5965\u514b\u5c3c\u7684\u8def\uff0c\u90a3\u662f\u82cf\u683c\u5170\u4e1c\u5317\u6d77\u5cb8\u9644\u8fd1\u5206\u6563\u7684\u5c9b\u5c7f\u3002\u5728\u7fa4\u5c9b\u7684\u5927\u9646\u4e0a\uff0c\u671d\u7740\u98ce\u5439\u65e5\u6652\u7684\u897f\u6d77\u5cb8\uff0c\u90a3\u91cc\u6709\u6ce2\u6d6a\u62cd\u6253\u7684\u60ac\u5d16\uff0c\u4f60\u4f1a\u6765\u5230\u5e03\u7f57\u5fb7\u52a0\u7684\u5c3c\u65af\uff0c\u4e00\u4e2a\u5730\u5ce1\uff0c\u5206\u9694\u7740\u4e24\u4e2a\u95ea\u95ea\u53d1\u5149\u7684\u6e56\u6cca\uff0c\u4e00\u4e2a\u662f\u54b8\u6c34\uff0c\u4e00\u4e2a\u662f\u6de1\u6c34\u3002\u5c31\u5728\u9053\u8def\u53d8\u7a84\u4e4b\u524d\uff0c\u4f60\u4f1a\u770b\u5230\u72ed\u7a84\u7684\u77f3\u5934\u5728\u4f60\u9762\u524d\u5347\u8d77\u3002\u8fd9\u4e2a\u53e4\u8001\u7684\u77f3\u5708\u7684\u5de8\u77f3\u518d\u6b21\u51fa\u73b0\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u4f18\u96c5\u800c\u58ee\u89c2\u3002\u5b83\u4eec\u5c31\u50cf\u4e00\u6247\u901a\u5f80\u620f\u5267\u548c\u9b54\u6cd5\u6781\u9650\u4e16\u754c\u7684\u5927\u95e8\uff0c\u5c06\u4eba\u4eec\u7684\u89c6\u7ebf\u5f15\u5411\u5730\u5ce1\u4e4b\u5916\u7684\u53e6\u4e00\u5ea7\u66f4\u5927\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u7eaa\u5ff5\u7891\uff0c\u5728\u666f\u89c2\u4e2d\u50cf\u5728\u821e\u53f0\u4e0a\u4e00\u6837\u9ad8\u8038\u3002\u8fd9\u5c31\u662f\u5e03\u7f57\u5fb7\u52a0\u7684\u6212\u6307\uff0c\u5b83\u7684\u4e2a\u6027\u9c9c\u660e\u7684\u77f3\u5934\u50cf\u662f\u5728\u821e\u6b65\u4e2d\u95f4\u88ab\u902e\u6355\u7684\u5de8\u5927\u821e\u8005\u2014\u2014\u6b63\u5982\u5f53\u5730\u4f20\u8bf4\u4e2d\u6240\u8bf4\u7684\u90a3\u6837\u3002\n\u8003\u53e4\u5b66\u5bb6\u5c3c\u514b\u00b7\u5361\u5fb7\uff08Nick Card\uff09\u548c\u4ed6\u7684\u56e2\u961f\u6b63\u662f\u5728\u8fd9\u4e24\u4e2a\u77f3\u5934\u5708\u4e4b\u95f4\u6316\u6398\u4e00\u4e2a\u5de8\u5927\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u77f3\u5934\u5efa\u7b51\u5b9a\u5c45\u70b9\u3002\u6700\u65e9\u53ef\u8ffd\u6eaf\u5230\u516c\u5143\u524d3300\u5e74\u5de6\u53f3\uff0c\u5b83\u4eec\u7684\u5899\u58c1\u548c\u58c1\u7089\u5b8c\u597d\u65e0\u635f\uff0c\u9676\u5668\u548c\u77f3\u5668\u6781\u5176\u4e30\u5bcc\uff0c\u6574\u4e2a\u5efa\u7b51\u88ab\u516d\u7c73\u5bbd\u7684\u7eaa\u5ff5\u5899\u5305\u56f4\u3002\u201c\u4f60\u53ef\u80fd\u4f1a\u6301\u7eed\u597d\u51e0\u8f88\u5b50\uff0c\u800c\u4e0d\u4f1a\u6df1\u5165\u5230\u5b83\u7684\u5e95\u90e8\uff0c\u201d\u5f53\u6211\u4eec\u51dd\u89c6\u7740\u73b0\u573a\u65f6\uff0c\u8fd9\u5f20\u6574\u6d01\u7684\u767d\u80e1\u5b50\u7b80\u6d01\u7684\u5361\u7247\u8bf4\u3002\u76ee\u524d\uff0c\u73b0\u573a\u8986\u76d6\u7740\u9632\u6c34\u6cb9\u5e03\uff0c\u4ee5\u4fdd\u62a4\u5b83\u514d\u53d7\u51ac\u5b63\u98ce\u66b4\u7684\u5f71\u54cd\u3002\u201c\u6bcf\u5e74\u5b83\u90fd\u80fd\u751f\u4ea7\u51fa\u4ee4\u6211\u4eec\u9707\u60ca\u7684\u4ea7\u54c1\u3002\u201d\u7ecf\u8fc7\u8fd120\u5e74\u7684\u6316\u6398\uff0c\u4ed6\u4eec\u53ea\u6316\u6398\u4e86\u7ea610%\u7684\u9762\u79ef\u548c\u7ea65%\u7684\u4f53\u79ef\u3002\u5b83\u5f88\u6df1\uff1a\u5efa\u7b51\u7269\u5806\u5728\u65e7\u5efa\u7b51\u7684\u5e9f\u589f\u4e0a\uff1b\u8fd9\u4e2a\u5730\u65b9\u4f7f\u7528\u4e861000\u5e74\u3002\u5f53\u590f\u5929\u6765\u4e34\u65f6\uff0c\u4ed6\u4eec\u4f1a\u518d\u6b21\u6316\u6398\u3002\u5361\u5fb7\u7684\u540c\u4e8b\u5b89\u59ae\u00b7\u7c73\u5207\u5c14\uff08Anne Mitchell\uff09\u8bf4\uff0c\u6bcf\u5e747\u6708\uff0c\u5f53\u88ab\u5b50\u63ed\u4e0b\u65f6\uff0c\u201c\u4f60\u5c31\u4f1a\u5012\u4e0b\uff0c\u6210\u4e3a\u8fc7\u53bb\u7684\u5e7d\u7075\u4e4b\u4e00\u201d\u3002\n\u5927\u82f1\u535a\u7269\u9986\u5c06\u4e8e\u672c\u6708\u4e3e\u529e\u4e00\u4e2a\u540d\u4e3a\u201c\u5de8\u77f3\u9635\u7684\u4e16\u754c\u201d\u7684\u65b0\u5c55\u89c8\uff0c\u5c55\u793a\u5e03\u7f57\u5fb7\u52a0\u7684\u8bb8\u591a\u6700\u6709\u8da3\u7684\u53d1\u73b0\u3002\u8be5\u5c55\u89c8\u65e8\u5728\u8c03\u67e5\u4ece\u72e9\u730e\u91c7\u96c6\u8005\u65f6\u4ee3\u5230\u65e9\u671f\u9752\u94dc\u65f6\u4ee3\u7684\u5317\u6b27\u53f2\u524d\u53f2\uff0c\u82f1\u56fd\u6700\u8457\u540d\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u7eaa\u5ff5\u7891\u7684\u590d\u6742\u5386\u53f2\u4f5c\u4e3a\u6545\u4e8b\u7684\u810a\u6881\u3002\u5c3c\u65af\u516c\u56ed\u5468\u56f4\u7684\u666f\u89c2\u8ba9\u6211\u60f3\u8d77\u4e86\u5de8\u77f3\u9635\u5468\u56f4\u5e03\u6ee1\u624b\u63a8\u8f66\u7684\u4f4e\u6d3c\u5730\u5e26\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u4e24\u4e2a\u5730\u65b9\u90fd\u6709\u4e00\u79cd\u5de8\u5927\u821e\u53f0\u7684\u611f\u89c9\uff0c\u53ef\u4ee5\u7528\u6765\u4e3e\u884c\u4eea\u5f0f\u6216\u8868\u6f14\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6700\u65e9\u7684\u5efa\u7b51\u6bd4\u5de8\u77f3\u9635\u8fd8\u8981\u53e4\u8001\u3002\u5927\u82f1\u535a\u7269\u9986\u5c55\u89c8\u9986\u957f\u5c3c\u5c14\u00b7\u5a01\u5c14\u91d1\u8bf4\uff1a\u201c\u5bf9\u4e8e\u65b0\u77f3\u5668\u65f6\u4ee3\u7684\u77f3\u5934\u5efa\u7b51\u6765\u8bf4\uff0c\u5965\u514b\u5c3c\u628a\u5176\u4ed6\u5730\u65b9\u90fd\u5439\u51fa\u4e86\u6c34\u9762\u3002\u201d\u3002\n\u5728\u6b27\u6d32\u5176\u4ed6\u5730\u65b9\u2014\u2014\u5305\u62ec\u5a01\u5c14\u7279\u90e1\u675c\u7075\u987f\u5899\u7684\u5b9a\u5c45\u70b9\uff0c\u73b0\u5728\u88ab\u8ba4\u4e3a\u662f\u5de8\u77f3\u9635\u5efa\u9020\u8005\u5c45\u4f4f\u7684\u5730\u65b9\u2014\u2014\u6728\u6750\u662f\u65b0\u77f3\u5668\u65f6\u4ee3\u4f4f\u5b85\u5efa\u7b51\u6700\u53d7\u6b22\u8fce\u7684\u5efa\u7b51\u6750\u6599\u3002\u4f46\u5728\u5965\u514b\u5c3c\uff0c\u5c45\u6c11\u4eec\u4e5f\u7528\u77f3\u5934\u5efa\u9020\u623f\u5c4b\u3002\uff08\u8fd9\u91cc\u53ef\u80fd\u4e5f\u6709\u5f88\u591a\u6728\u7ed3\u6784\uff0c\u4f46\u9644\u8fd1\u7684\u77f3\u5934\u5efa\u7b51\u975e\u5e38\u4e30\u5bcc\uff0c\u56e0\u6b64\u5bfb\u627e\u67f1\u5b54\u7684\u5de5\u4f5c\u5c31\u4e0d\u90a3\u4e48\u7d27\u8feb\u4e86\uff1b\u5965\u514b\u5c3c\u73b0\u5728\u51e0\u4e4e\u6ca1\u6709\u6811\u6728\uff0c\u4f46\u53ef\u80fd\u6bd4\u90a3\u65f6\u66f4\u591a\uff0c\u8fd8\u6709\u5927\u91cf\u7684\u6d6e\u6728\u4f9b\u5e94\u3002\uff09\u8fd9\u610f\u5473\u7740\u6574\u4e2a\u7fa4\u5c9b\u4e0d\u4ec5\u70b9\u7f00\u7740\u4fdd\u5b58\u5b8c\u597d\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u9675\u5893\uff0c\u8fd9\u4e9b\u9675\u5893\u6574\u9f50\u5730\u7528\u5f53\u5730\u7684\u77f3\u677f\u5efa\u9020\u800c\u6210\uff0c\u800c\u4e14\u8fd8\u6709\u6751\u5e84\u2014\u2014\u5176\u89c4\u6a21\u548c\u8d28\u91cf\u76f4\u52304000\u5e74\u540e\u7684\u4e2d\u4e16\u7eaa\u624d\u5f97\u4ee5\u91cd\u73b0\u3002\u5176\u4e2d\u5305\u62ec\u8457\u540d\u7684\u65af\u5361\u62c9\u5e03\u96f7\uff08Skara Brae\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u6cbf\u6d77\u5b9a\u5c45\u70b9\uff0c\u57281850\u5e74\u524d\uff0c\u4e00\u573a\u98ce\u66b4\u5377\u8d70\u4e86\u9690\u85cf\u5728\u90a3\u91cc\u7684\u5927\u7247\u6c99\u5b50\u3002\u4f46\u4e5f\u6709\u5176\u4ed6\u66f4\u9b3c\u9b45\u7684\u5730\u65b9\uff0c\u6bd4\u5982\u6851\u8fea\u6d77\u5cb8\u7ebf\u4e0a\u7684\u4e00\u4e2a\u672a\u5f00\u51ff\u7684\u6751\u5e84\uff0c\u5f53\u5730\u5c45\u6c11\u3001\u7ea6\u514b\u5927\u5b66\u8003\u53e4\u5b66\u540d\u8a89\u6559\u6388\u9a6c\u514b\u00b7\u7231\u5fb7\u8499\u5728\u4ed6\u7684\u4e66\u300a\u5965\u5361\u8fea\u4e9a\u300b\u7684\u5f00\u5934\u63cf\u8ff0\u4e86\u8fd9\u4e2a\u6751\u5e84\u3002\u5728\u77f3\u5668\u65f6\u4ee3\uff0c\u5965\u514b\u5c3c\u5e76\u6ca1\u6709\u88ab\u8fb9\u7f18\u5316\u6216\u5272\u65ad\uff1b\u5b83\u5468\u56f4\u7684\u6c34\u57df\u4e0d\u662f\u5c4f\u969c\uff0c\u800c\u662f\u901a\u5f80\u7231\u5c14\u5170\u3001\u82f1\u56fd\u5927\u9646\u548c\u5176\u4ed6\u5730\u65b9\u7684\u901a\u9053\u3002\u5728\u610f\u5927\u5229\u963f\u5c14\u5351\u65af\u5c71\u91c7\u77f3\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u786c\u7389\u65a7\u5934\u5728\u82cf\u683c\u5170\u88ab\u53d1\u73b0\uff1a\u6700\u7f8e\u4e3d\u7684\u4f8b\u5b50\u662f\u4ece\u82cf\u683c\u5170\u56fd\u5bb6\u535a\u7269\u9986\u501f\u6765\u7684\u5de8\u77f3\u9635\u4e16\u754c\u5c55\u3002\u5c55\u89c8\u52a9\u7406\u7b56\u5c55\u4eba\u73cd\u59ae\u5f17\u00b7\u97e6\u514b\u65af\u52d2\u8bf4\uff1a\u201c\u5b83\u5982\u6b64\u7b80\u5355\u3001\u5982\u6b64\u7cbe\u81f4\uff0c\u5e26\u6709\u4e00\u79cd\u73b0\u4ee3\u4e3b\u4e49\u7684\u611f\u89c9\u3002\u5b83\u5728\u706f\u5149\u4e0b\u95ea\u95ea\u53d1\u5149\u3002\u201d\u7f8e\u5b66\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\u5f88\u91cd\u8981\u3002\n\u4eba\u4eec\u8ba4\u4e3a\uff0c\u5de8\u77f3\u9635\u5efa\u9020\u8005\u4f7f\u7528\u7684\u7279\u8272\u9676\u5668\u2014\u2014\u201c\u6c9f\u69fd\u9676\u5668\u201d\u6700\u65e9\u662f\u5728\u5965\u514b\u5c3c\u5236\u4f5c\u7684\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5361\u5fb7\u548c\u4ed6\u7684\u56e2\u961f\u5df2\u7ecf\u53d1\u73b0\u4e8610\u4e07\u5757\u788e\u7247\u3002\u7c73\u5207\u5c14\u89e3\u91ca\u4e86\u4ed6\u4eec\u662f\u5982\u4f55\u7528\u4ece\u4e00\u67b6\u65e7\u76f4\u5347\u673a\u4e0a\u6253\u635e\u51fa\u6765\u7684\u86cb\u7cd5\u7247\u548c\u94dd\u677f\u4ece\u6b63\u5348\uff08\u53e4\u4ee3\u5783\u573e\u5806\uff09\u4e2d\u6311\u51fa\u5783\u573e\u7684\u3002\u5728\u4ed6\u4eec\u7684\u603b\u90e8\uff0c\u5f88\u591a\u788e\u7247\u90fd\u88ab\u653e\u5728\u76d2\u5b50\u91cc\uff0c\u4ece\u5730\u677f\u5230\u5929\u82b1\u677f\u5806\u780c\u5728\u4e00\u8d77\u3002\u603b\u90e8\u662f\u4e00\u5ea7\u88c5\u6ee1\u6750\u6599\u7684\u5e73\u623f\u3002\u9676\u827a\u4e13\u5bb6\u7f57\u4f0a\u00b7\u6258\u5c14\u65af\uff08Roy Towers\uff09\u8bf4\uff0c\u6709\u4e9b\u9676\u5668\u76f8\u5f53\u6613\u788e\uff0c\u5c31\u50cf\u201c\u6d88\u5316\u997c\u5e72\u201d\uff0c\u4ed6\u662f\u8fd9\u9879\u6350\u8d60\u8d44\u52a9\u6316\u6398\u7684\u5fd7\u613f\u8005\u4e4b\u4e00\u3002Jan Blatchford\u662f\u53e6\u4e00\u4f4d\u6280\u672f\u5a34\u719f\u7684\u5fd7\u613f\u8005\uff0c\u4ed6\u5411\u6211\u5c55\u793a\u4e86\u53cd\u5c04\u53d8\u6362\u6210\u50cf\uff08Reflection transformation imaging\uff09\u2014\u2014\u4e00\u79cd\u4f7f\u7528\u591a\u4e2a\u76f8\u673a\u89d2\u5ea6\u7684\u6570\u5b57\u6444\u5f71\u6280\u672f\u2014\u2014\u5982\u4f55\u66b4\u9732\u8089\u773c\u51e0\u4e4e\u770b\u4e0d\u89c1\u7684\u7ec6\u8282\u3002\u8fd9\u662f\u4e00\u4e2a\u6807\u8bb0\uff0c\u4e00\u4e2a\u7f16\u7ed3\u7684\u57ab\u5b50\u5728\u4e00\u4e2a\u65b0\u505a\u7684\u672a\u70e7\u5236\u7684\u7f50\u5b50\u7684\u5e95\u5ea7\u4e0a\u7559\u4e0b\u4e86\u5370\u8bb0\uff1b\u4e0b\u9762\u662f\u5236\u9020\u8005\u62c7\u6307\u6307\u7eb9\u5728\u53e6\u4e00\u4e2a\u624b\u6307\u4e0a\u7684\u8f6e\u56de\uff0c\u5e26\u6765\u4e865000\u5e74\u524d\u4eba\u7c7b\u624b\u5851\u9020\u5bb9\u5668\u7684\u4ee4\u4eba\u7729\u6655\u7684\u4eb2\u5bc6\u611f\u3002\n2003\u5e74\u7684\u4e00\u5929\uff0c\u5728\u8fd9\u5ea7\u5c0f\u623f\u5b50\u7684\u7a97\u5916\uff0c\u8fd9\u4f4d\u524d\u623f\u4e1c\u5728\u6c34\u69fd\u91cc\u6d17\u852c\u83dc\u65f6\uff0c\u770b\u5230\u4e00\u628a\u7281\u5728\u5200\u5203\u4e4b\u95f4\u5939\u7740\u4e00\u5757\u7816\u77f3\uff0c\u7281\u53d1\u51fa\u560e\u5431\u560e\u5431\u7684\u58f0\u97f3\u3002\u5b83\u662f\u65b0\u77f3\u5668\u65f6\u4ee3\u7684\u77f3\u5934\u3002\u519c\u6c11\u8054\u7cfb\u4e86\u5f53\u5730\u7684\u8003\u53e4\u5b66\u5bb6\u3002\u7231\u5fb7\u8499\u8bf4\uff1a\u201c\u591a\u5e74\u6765\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5f00\u8f66\u7ecf\u8fc7\u8fd9\u4e2a\u5730\u65b9\uff0c\u4ee5\u4e3a\u5b83\u662f\u4e00\u5ea7\u5929\u7136\u5c71\u810a\u3002\u201d\u4ed6\u8bf4\uff0c\u8fd9\u91cc\u4e0d\u662f\u9690\u85cf\u5728\u666e\u901a\u89c6\u7ebf\u4e2d\u7684\u53e4\u4ee3\u9057\u8ff9\u3002\u5de8\u5927\u7684\u548c\u89e3\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u542f\u793a\u2014\u2014\u7136\u800c\uff0c\u4e5f\u8bb8\u5e76\u4e0d\u5b8c\u5168\u4ee4\u4eba\u60ca\u8bb6\u3002\u8fd9\u4e9b\u5c9b\u5c7f\u4e0a\u5230\u5904\u90fd\u662f\u65b0\u77f3\u5668\u65f6\u4ee3\u7684\u9057\u8ff9\u3002\u7231\u5fb7\u8499\u544a\u8bc9\u6211\uff0c\u4ed6\u66fe\u7ecf\u91c7\u8bbf\u8fc7\u5965\u5361\u8fea\u4e9a\u5bb6\u65cf\uff0c\u8be2\u95ee\u4ed6\u4eec\u58c1\u7089\u67b6\u4e0a\u7684\u53e4\u4ee3\u77f3\u65a7\u548c\u5176\u4ed6\u53d1\u73b0\u7269\uff0c\u5176\u4e2d\u6709\u5f88\u591a\u5173\u4e8e\u8fd9\u4f4d\u6216\u90a3\u4f4d\u66fe\u7956\u7236\u6bcd\u53d1\u73b0\u7684\u6545\u4e8b\u3002\u4e00\u4e9b\u65b0\u77f3\u5668\u65f6\u4ee3\u7684\u53d1\u73b0\uff0c\u6bd4\u5982\u51fa\u73b0\u5728\u8fd9\u91cc\u548c\u5176\u4ed6\u5730\u65b9\u7684\u590d\u6742\u96d5\u523b\u7684\u77f3\u7403\uff0c\u6216\u8005\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u65b0\u53d1\u73b0\u7684\u4f2f\u987f\u00b7\u963f\u683c\u5c3c\u65af\u548c\u6c11\u95f4\u4f20\u8bf4\u7684\u201c\u9f13\u201d\uff0c\u5373\u5728\u5317\u7ea6\u514b\u90e1\u4e0e\u5b69\u5b50\u4eec\u4e00\u8d77\u53d1\u73b0\u7684\u5c0f\u77f3\u67f1\uff0c\u6ca1\u6709\u660e\u663e\u7684\u5b9e\u9645\u7528\u9014\uff0c\u5e76\u7528\u6211\u4eec\u770b\u4e0d\u6e05\u7684\u8bbe\u8ba1\u88c5\u9970\uff0c\u5177\u6709\u4e0d\u53ef\u6062\u590d\u7684\u610f\u4e49\u3002\u540c\u6837\u7684\u9053\u7406\u4e5f\u9002\u7528\u4e8e\u53e4\u8001\u7684\u201c\u676f\u5b50\u548c\u6212\u6307\u201d\u6807\u8bb0\uff0c\u8fd9\u4e9b\u6807\u8bb0\u5b58\u5728\u4e8e\u82f1\u56fd\u81ea\u7136\u5f62\u6210\u7684\u9732\u5934\u4e0a\uff0c\u5927\u91cf\u5b58\u5728\u4e8e\u963f\u76d6\u5c14\u7684\u57fa\u5c14\u9a6c\u4e01\u5ce1\u8c37\u7b49\u5730\u3002\u201c\u6211\u559c\u6b22\u6bcf\u4e00\u4e2a\u90fd\u662f\u4e00\u4e2a\u7948\u7977\u6216\u5492\u8bed\u7684\u60f3\u6cd5\u2026\u2026\u6211\u8ba4\u4e3a\u5176\u610f\u4e49\u53ef\u80fd\u6b63\u5728\u5f62\u6210\u4e2d\uff0c\u201d\u8fd9\u4e9b\u6a21\u5f0f\u7684\u5a01\u5c14\u91d1\u6c89\u601d\u9053\u3002\n\u5e03\u7f57\u5fb7\u52a0\u5c3c\u65af\u7684\u5efa\u7b51\u4e5f\u6709\u88c5\u9970\u548c\u96d5\u523b\uff0c\u539a\u91cd\u4f46\u5f80\u5f80\u5fae\u5999\uff0c\u6709\u56fe\u6848\u2014\u2014\u83f1\u5f62\u3001\u4ea4\u53c9\u56fe\u6848\uff0c\u6709\u65f6\u662f\u8774\u8776\u5f62\u72b6\u3002\u6709\u65f6\u8fd9\u4e9b\u75d5\u8ff9\u5f88\u96be\u8fa8\u8ba4\u3002\u5361\u5fb7\u8bf4\uff1a\u201c\u4e00\u680b\u5efa\u7b51\u5df2\u7ecf\u66b4\u9732\u4e86\u597d\u51e0\u5e74\uff0c\u76f4\u5230\u592a\u9633\u4ee5\u67d0\u79cd\u7279\u5b9a\u7684\u65b9\u5f0f\u7167\u5c04\u5230\u5b83\uff0c\u6211\u4eec\u624d\u5f00\u59cb\u770b\u5230\u5b83\u3002\u201d\u3002\u7c73\u5207\u5c14\u8865\u5145\u9053\uff1a\u201c\u5728\u503e\u659c\u7684\u5149\u7ebf\u4e0b\uff0c\u6211\u4eec\u57288\u6708\u4efd\u53d1\u73b0\u7684\u6bd47\u6708\u4efd\u66f4\u591a\u3002\u201d\u3002\n\u8fd9\u4e9b\u56fe\u6848\uff0c\u77f3\u5934\u4e0a\u8fd9\u4e9b\u5fae\u5999\u7684\u7b14\u89e6\uff0c\u5728\u5927\u82f1\u535a\u7269\u9986\u7684\u5c55\u89c8\u4e2d\u90fd\u6709\u56de\u54cd\u3002\u5a01\u5c14\u91d1\u544a\u8bc9\u6211\uff0c\u4ed6\u60f3\u8bb2\u4e00\u4e2a\u5173\u4e8e\u5f71\u54cd\u548c\u8054\u7cfb\u7684\u6545\u4e8b\uff0c\u5173\u4e8e\u8d85\u8d8a\u5730\u5e73\u7ebf\u7684\u60f3\u6cd5\uff0c\u5173\u4e8e\u6d41\u52a8\u7684\u4eba\u7684\u6545\u4e8b\u3002\u8fd9\u59cb\u4e8e\u90a3\u4e9b\u5728\u82f1\u56fd\u4e1c\u6d77\u5cb8\u4ecd\u4e0e\u6b27\u6d32\u5927\u9646\u76f8\u8fde\u65f6\u8dcb\u6d89\u4e8e\u591a\u683c\u5170\u7684\u4eba\uff0c\u4ee5\u53ca\u90a3\u4e9b\u5728\u5927\u7ea66000\u5e74\u524d\u5c06\u519c\u4e1a\u4ece\u6d77\u5ce1\u5bf9\u5cb8\u5e26\u5230\u82f1\u56fd\u7684\u4eba\uff0c\u4ee5\u53ca\u4ece\u516c\u5143\u524d2500\u5e74\u5de6\u53f3\u6765\u5230\u82f1\u56fd\u7684\u201c\u70e7\u676f\u4eba\u201d\uff0c\u51e0\u4e4e\u5168\u90e8\u53d6\u4ee3\u4e86\u4ed6\u4eec\u3002\u8fd9\u4e2a\u6545\u4e8b\u51e0\u4e4e\u662f\u96be\u4ee5\u60f3\u8c61\u7684\u6f2b\u957f\uff0c\u4ece11000\u5e74\u524d\u7ea6\u514b\u90e1\u65af\u5854\u5361\u5c14\uff08Star Carr\uff0cYorkshire\uff09\u72e9\u730e\u91c7\u96c6\u8005\u7528\u9e7f\u89d2\u5236\u4f5c\u7684\u4ee4\u4eba\u96be\u4ee5\u5fd8\u6000\u7684\u5934\u9970\uff0c\u52308000\u5e74\u540e\u6cd5\u56fd\u548c\u5fb7\u56fd\u7528\u9ec4\u91d1\u5236\u4f5c\u7684\u5947\u602a\u5706\u9525\u5f62\u5e3d\u5b50\uff0c\u90fd\u662f\u901a\u8fc7\u4eba\u5de5\u5236\u54c1\u8bb2\u8ff0\u7684\u3002\u66f4\u4e0d\u7528\u8bf4\u7ea6\u516c\u5143\u524d1750\u5e74\u7531\u4e00\u5757\u7425\u73c0\u5236\u6210\u7684\u8ff7\u4eba\u7684\u8336\u676f\u5927\u5c0f\u7684\u5668\u76bf\u4e86\uff0c\u8fd9\u662f\u970d\u592b\u535a\u7269\u9986\u7684\u7470\u5b9d\uff0c\u5e94\u8be5\u66f4\u4e3a\u4eba\u6240\u77e5\uff0c\u6211\u5fcd\u4e0d\u4f4f\u60f3\u5230\u7684\u662f\u201c\u7425\u73c0\u671b\u8fdc\u955c\u201d\u2014\u2014\u4e00\u4e2a\u9576\u5d4c\u5728\u9752\u94dc\u4e2d\u7684\u534a\u900f\u660e\u7425\u73c0\u5706\u76d8\uff0c\u7ea6\u516c\u5143\u524d1200\u5e74\u5728\u4e39\u9ea6\u5236\u9020\uff0c\u53ef\u80fd\u66fe\u7ecf\uff0c\u5df2\u7ecf\u88ab\u7528\u6765\u201c\u6355\u6349\u201d\u592a\u9633\u4e86\u3002\n\u4e3a\u4ec0\u4e48\u5965\u514b\u5c3c\u3001\u5a01\u5c14\u7279\u90e1\u548c\u82f1\u56fd\u5176\u4ed6\u8bb8\u591a\u5730\u65b9\u7684\u4eba\u6c11\u57285000\u5e74\u524d\u5efa\u9020\u4e86\u5de8\u5927\u7684\u77f3\u7891\uff0c\u8fd9\u662f\u4e00\u4e2a\u6c38\u8fdc\u65e0\u6cd5\u786e\u5b9a\u7b54\u6848\u7684\u95ee\u9898\u2014\u2014\u5f53\u6211\u4eec\u5c1d\u8bd5\u65f6\uff0c\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u6211\u4eec\u8c08\u8bba\u7684\u66f4\u591a\u7684\u662f\u6211\u4eec\u81ea\u5df1\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u8fdc\u7956\u7684\u771f\u6b63\u610f\u56fe\u3002\u5f53\u6211\u95ee\u7231\u5fb7\u8499\u4ed6\u662f\u600e\u4e48\u60f3\u7684\u2014\u2014\u6211\u4eec\u5f53\u65f6\u6b63\u7ad9\u5728\u65af\u5361\u62c9\u5e03\u96f7\u91cd\u5efa\u7684\u65b0\u77f3\u5668\u65f6\u4ee3\u5c0f\u623f\u5b50\u91cc\uff0c\u559d\u7740\u4e00\u74f6\u5496\u5561\u8eb2\u907f\u51b0\u96f9\u2014\u2014\u4ed6\u7ed9\u51fa\u4e86\u4e00\u4e2a\u8bcd\uff0c\u5c3d\u7ba1\u5e26\u6709\u95ee\u53f7\uff1a\u201c\u50b2\u6162\uff1f\u201d\u4ed6\u8ba4\u4e3a\uff0c\u5f53\u4eba\u7c7b\u8981\u4e48\u5efa\u7acb\u6743\u529b\uff0c\u8981\u4e48\u611f\u53d7\u5230\u5a01\u80c1\u6216\u538b\u529b\u65f6\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u5728\u5efa\u9020\u975e\u51e1\u7684\u7eaa\u5ff5\u7891\u3002\u4e5f\u8bb8\u8fd9\u4e9b\u9065\u8fdc\u7684\u4eba\uff0c\u4ed6\u4eec\u7684\u751f\u6d3b\u5982\u6b64\u964c\u751f\uff0c\u5982\u6b64\u9065\u4e0d\u53ef\u53ca\uff0c\u7ec8\u7a76\u4f1a\u5728\u6211\u4eec\u8eab\u4e0a\u53d1\u73b0\u4e00\u4e9b\u4e1c\u897f\u3002\n\u672c\u6761\u4e8e2022\u5e742\u670816\u65e5\u4fee\u8ba2\u3002\u6839\u636e\u53d1\u73b0\u7684\u65f6\u95f4\u8303\u56f4\uff0c\u9e7f\u89d2\u5934\u9970\u548c\u91d1\u8272\u5706\u9525\u5f62\u5e3d\u5b50\u4e4b\u95f4\u7684\u65f6\u5dee\u9ad8\u8fbe8000\u5e74\uff0c\u800c\u4e0d\u662f\u65e9\u671f\u7248\u672c\u4e2d\u6240\u8ff0\u768410000\u5e74\u3002\n2\u670817\u65e5\u81f37\u670817\u65e5\uff0c\u4f26\u6566\u5927\u82f1\u535a\u7269\u9986\u5c55\u51fa\u4e86\u5de8\u77f3\u9635\u7684\u4e16\u754c\u3002\u6709\u5173\u5965\u514b\u5c3c\u65b0\u77f3\u5668\u65f6\u4ee3\u9057\u8ff9\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u5965\u514b\u5c3c\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u3002", "note_en": "Archaeologists excavating the windswept Ness of Brodgar are unearthing a treasure trove of neolithic villages, tombs, weapons and mysterious religious artefacts, some to be displayed in a blockbuster exhibition\n   I f you happen to imagine that there\u2019s not much left to discover of Britain\u2019s stone age, or that its relics consist of hard-to-love postholes and scraps of bones, then you need to find your way to Orkney, that scatter of islands off Scotland\u2019s north-east coast. On the archipelago\u2019s Mainland, out towards the windswept west coast with its wave-battered cliffs, you will come to the Ness of Brodgar, an isthmus separating a pair of sparkling lochs, one of saltwater and one of freshwater. Just before the way narrows you\u2019ll see the Stones of Stenness rising up before you. This ancient stone circle\u2019s monoliths were once more numerous, but they remain elegant and imposing. Like a gateway into a liminal world of theatricality and magic, they lead the eye to another, even larger neolithic monument beyond the isthmus, elevated in the landscape as if on a stage. This is the  Ring of Brodgar, its sharply individuated stones like giant dancers arrested mid-step \u2013 as local legend, indeed, has it.\n   It\u2019s between these two stone circles that archaeologist Nick Card and his team are excavating a huge settlement of neolithic stone buildings. The earliest date from about 3300BC, their walls and hearths crisply intact, their pots and stone tools in remarkable profusion, the whole bounded by six-metre-wide monumental walls. \u201cYou could continue for several lifetimes and not get to the bottom of it,\u201d says the neatly white-bearded, laconic Card as we gaze out over the site, presently covered with tarpaulin to protect it from the winter storms. \u201cEvery year it never fails to produce something that astounds us.\u201d After nearly two decades of digging, they have excavated only about 10% of its area, and about 5% of its volume. It goes deep: buildings are stacked on the ruins of older ones; the place was in use for 1,000 years. When summer comes, they\u2019ll dig again. When the coverings come off each July, says Card\u2019s colleague, Anne Mitchell, \u201cdown you go and you\u2019re among the ghosts of the past\u201d.\n  Many of the most intriguing finds from the Ness of Brodgar will be on show at the British Museum this month in a new exhibition,  the World of Stonehenge, a survey of northern-European prehistory from the era of the hunter-gatherers to the early bronze age, using the long, complex history of Britain\u2019s most celebrated neolithic monument as the story\u2019s spine. The landscape around the ness reminds me of the barrow-studded downs around Stonehenge, in fact \u2013 both have the feel of a vast stage, ready to be used for ritual or performance. The earliest buildings here are older than Stonehenge, though. \u201cFor neolithic stone architecture, Orkney blows everywhere else out of the water,\u201d says Neil Wilkin, curator of the British Museum show.\n  Elsewhere in Europe \u2013 including the settlement at Durrington Walls in Wiltshire, now thought to be where the builders of Stonehenge lived \u2013 wood was the favoured construction material for neolithic domestic buildings. But in Orkney the inhabitants also built their houses from stone. (There were perhaps many wooden structures too, but stone architecture around here is so profuse that the search for postholes feels less urgent; there are few trees on Orkney now, but maybe more then, as well as a plentiful supply of driftwood.) It means the whole archipelago is dotted not just with incredibly well preserved neolithic tombs, neatly built out of the local flagstone, but also villages \u2013 construction of a scale and quality that would not be repeated until well into the medieval era, 4,000 years later. These include the famous  Skara Brae, a coastal settlement revealed when a storm whipped away the great blanket of sand that had hidden it until 1850. But there are other, more ghostly places, too, like the unexcavated village on the eroding coastline of Sanday that Mark Edmonds, local resident and York University archaeology professor emeritus, describes at the start of his book,  Orcadia. Orkney was not peripheral or cut off in the stone age; its surrounding waters were not barriers but pathways, to Ireland, to mainland Britain, and beyond. Neolithic axes made of jadeite, quarried in the Italian Alps, have been found in Scotland: the most beautiful example, on loan from the  National Museum of Scotland, will be in the World of Stonehenge show. \u201cIt\u2019s so simple and so exquisite,\u201d says the exhibition\u2019s assistant curator, Jennifer Wexler, \u201cwith a kind of modernist feel to it. And it just sparkles in the light.\u201d Aesthetics were important in this world.\n  The characteristic pottery \u2013 \u201cgrooved ware\u201d \u2013 used by the builders of Stonehenge was first made in Orkney, it is thought. Card and his team have found 100,000 sherds of it so far. Mitchell explains how they tease it out of the middens (ancient refuse heaps) using a cake slice and an aluminium sheet salvaged from an old helicopter. A lot of these sherds are in boxes stacked floor-to-ceiling in their HQ, a bungalow on the site bursting with material. Some of the pottery is rather crumbly \u2013 like \u201cdigestive biscuits\u201d, says ceramics expert Roy Towers, one of the volunteers on this  donations-funded dig. Jan Blatchford, another highly skilled volunteer, shows me how  reflectance transformation imaging \u2013 a digital photography technique using multiple camera angles \u2013 can expose details barely visible to the naked eye. Here is the mark where a plaited mat made its imprint on the base of one newly made, unfired pot; here are the whorls of the maker\u2019s  thumbprint on another, bringing the dizzyingly intimate sense of a human hand shaping the vessel 5,000 years ago.\n  It was out of the window of this little house that, washing vegetables at her sink one day in 2003, the former owner saw a plough stutter as a piece of masonry got lodged between its blades. It was worked, neolithic stone. The farmer contacted the local archaeologists. \u201cWe\u2019d all been driving past the place for years assuming it was a natural ridge,\u201d says Edmonds \u2013 rather than ancient ruins, hiding in plain sight. The immense settlement is an ongoing revelation \u2013 and yet, perhaps, not entirely surprising. The islands are teeming with neolithic remains. Edmonds tells me he once interviewed Orcadian families, asking them about the ancient stone axes and other finds they have on their mantelpieces, rich with stories of discovery by this or that great-grandparent. Some of these neolithic finds, like the intricately  carved stone balls that turn up here and elsewhere, or  the incredible newly discovered Burton Agnes and  Folkton \u201cdrums\u201d, little stone cylinders found buried with children in North Yorkshire, have no obvious practical purpose, and are decorated with designs that are obscure to our eyes, dense with irrecoverable significance. The same goes for the ancient \u201ccup and ring\u201d marks that exist on naturally occurring outcrops in the British landscape, in great quantity in places like  Kilmartin Glen in Argyll. \u201cI like the idea that each is a prayer or a mantra \u2026 I think the meaning may be in the making,\u201d muses Wilkin of the patterns.\n  The buildings of the Ness of Brodgar are also decorated and inscribed, thickly but often subtly, with patterns \u2013 lozenges, cross-hatching, sometimes a kind of butterfly shape. At times the marks can be hard to make out. \u201cOne building had been exposed for several years and it wasn\u2019t until the sun hit it in a particular way that we began to see it,\u201d Card says. \u201cWe find more in August than July, in the raking light,\u201d adds Mitchell.\n These patterns, these subtle strokes in the stone, have their echoes throughout the  British Museum exhibition. Wilkin tells me he wanted to tell a story of influence and connection, of ideas travelling beyond the horizon, of people on the move. That starts with those who trudged across Doggerland when Britain\u2019s east coast was still connected to continental Europe, and continues with those who brought farming to Britain from across the Channel about 6,000 years ago, to the \u201cBeaker people\u201d who arrived from around 2500BC, all but replacing them. The story is almost unimaginably long, told through artefacts from the haunting headdress fashioned by hunter-gatherers from deer antlers 11,000 years ago in Star Carr, Yorkshire, all the way to the outrageously strange conical hats fashioned from gold in France and Germany up to 8,000 years later. Not to mention the spellbinding teacup-size vessel, shaped from a single lump of amber about 1750BC, that\u2019s a treasure of the Hove Museum and ought to be better known, and what I can\u2019t help thinking of as \u201cthe amber spyglass\u201d \u2013 a disk of translucent amber set in bronze, made in Denmark around 1200BC, that might once, possibly, have been use to \u201ccatch\u201d the sun.\n Why the peoples of Orkney, and Wiltshire, and many other places in Britain, built vast monuments of stone 5,000 years ago, is a question that can never be definitively answered \u2013 and when we try, we almost certainly say more about ourselves than the real intentions of our distant ancestors. When I ask Edmonds what he thinks \u2013 we are standing in the little reconstructed neolithic house at Skara Brae at the time, sheltering from a hailstorm with a flask of coffee \u2013 he offers one word, albeit with a question mark: \u201cHubris?\u201d Humans, he argues, seem to build remarkable monuments when they are either establishing power \u2013 or feeling under threat or pressure. Maybe these far distant people, their lives so alien and so unreachable, would find something to recognise in us, after all.\n This article was amended on 16 February 2022. The time difference between the deer antler headdress and the gold conical hats is up to 8,000 years based on the date range of the discoveries, not 10,000 as stated in an earlier version.\n The World of Stonehenge is at the British Museum, London, 17 February to 17 July. For information about the neolithic remains of Orkney, visit  orkney.com.", "posttime": "2022-02-17 00:51:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6316\u6398,dig,\u5730\u65b9", "title": "\u5965\u514b\u5c3c\u6316\u6398\u63ed\u793a\u82f1\u56fd\u77f3\u5668\u65f6\u4ee3\u6587\u5316", "title_en": "An Orkney dig uncovering Britain\u2019s stone age culture", "transed": 1, "url": "https://www.theguardian.com/culture/2022/feb/15/orkney-ghosts-of-past-world-of-stonehenge-british-museum", "via": "", "real_tags": ["\u6316\u6398", "dig", "\u5730\u65b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073652, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5e94\u8be5\u5efa\u7acb\u4e00\u4e2a\u5173\u4e8e\u4e8b\u7269\u5982\u4f55\u7834\u788e\u7684\u96c6\u5408\uff0c\u6765\u6559\u6211\u4eec\u5982\u4f55\u8bc6\u522b\u5ec9\u4ef7\u4ea7\u54c1\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u8ba9\u516c\u53f8\u627f\u62c5\u8d23\u4efb\uff0c\u5e76\u5f00\u59cb\u5173\u6ce8\u6211\u4eec\u4ea7\u751f\u7684\u5e9f\u7269\u91cf\u3002\n\u4ee5\u7ed3\u6784\u5316\u7684\u65b9\u5f0f\u83b7\u5f97\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u53ef\u4ee5\u8ba9\u6211\u4eec\u8fdb\u884c\u6709\u8da3\u7684\u8ba1\u7b97\uff0c\u6bd4\u5982\u4ea7\u54c1\u7684\u5e73\u5747\u5bff\u547d\u3002\n\u6211\u4eec&#39\uff1b\u6211\u4eec\u6b63\u5728\u52aa\u529b\u4f7f\u5176\u6210\u4e3a\u6700\u5927\u7684\u7834\u635f\u548c\u5931\u6548\u4ea7\u54c1\u6570\u636e\u5e93\u3002\u656c\u8bf7\u671f\u5f85\uff01\n\u6211\u4eec\u4e0d\u6536\u96c6\u4efb\u4f55\u4e2a\u4eba\u4fe1\u606f\u3002\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55\u8ffd\u8e2a\u5668\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u4f60\u662f\u8c01\uff0c\u4f60\u641c\u7d22\u4ec0\u4e48\uff0c\u4f60\u4e0a\u4f20\u4ec0\u4e48\u2014\u2014\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u3002\u65f6\u671f", "note_en": "We should build a collection about how things break to teach how to identify cheap products. Let&#39;s keep corporations accountable and start caring about the amount of waste we produce.\n Having all this data in a structured way allows us to do interesting calculations like the average longevity of products.\n  We&#39;re working on making this the biggest database of broken and failed products. Stay tuned!\n We don\u2019t collect any personal information. We don&#39;t use any trackers, we don\u2019t know who you are, what you search for, what you upload \u2014 and we never will. Period.", "posttime": "2022-02-17 00:50:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "database,\u6570\u636e\u5e93,broken,\u4ea7\u54c1", "title": "\u4e00\u4e2a\u6545\u969c\u6570\u636e\u5e93\uff0c\u7528\u4e8e\u8bc6\u522b\u5e38\u89c1\u6545\u969c\u6a21\u5f0f\u4ee5\u53ca\u5982\u4f55\u4fee\u590d\u5b83\u4eec", "title_en": "A database of broken things to identify common failure modes and how to fix them", "transed": 1, "url": "https://www.failscout.co", "via": "", "real_tags": ["database", "\u6570\u636e\u5e93", "broken", "\u4ea7\u54c1"]}]