[{"category": "", "categoryclass": "", "imagename": "c1af711e1ab28f245a7ecd28f75427f8.jpg", "infoid": 1069759, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Freddie Sayers \u4f1a\u89c1 Larry Sanger\u3002\u6536\u542c\u64ad\u5ba2\u7248\u672c\uff1ahttps://shows.acast.com/lockdowntv-with-freddie-sayers/larry-sanger\u9605\u8bfb\u5979\u7684\u5168\u6587...", "note_en": "Freddie Sayers meets Larry Sanger.Listen to the podcast version: https://shows.acast.com/lockdowntv-with-freddie-sayers/larry-sangerRead the full article her...", "posttime": "2021-07-26 10:42:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u8054\u5408,founder,sayers", "title": "\u7ef4\u57fa\u767e\u79d1\u8054\u5408\u521b\u59cb\u4eba\uff1a\u6211\u4e0d\u518d\u4fe1\u4efb\u6211\u521b\u5efa\u7684\u7f51\u7ad9", "title_en": "Wikipedia co-founder: I no longer trust the website I created", "transed": 1, "url": "https://www.youtube.com/watch?v=l0P4Cf0UCwU", "via": "", "real_tags": ["rust", "\u8054\u5408", "founder", "sayers"]}, {"category": "", "categoryclass": "", "imagename": "f5c27fed1df0b31b15693f78a4f94b32.png", "infoid": 1069758, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e09\u5e74\u524d\uff0c\u6211\u53d1\u73b0 CcmExec.exe \u672a\u80fd\u5173\u95ed\u8fdb\u7a0b\u53e5\u67c4\u5bfc\u81f4 32 GB \u5185\u5b58\u6cc4\u6f0f\u3002\u8be5\u9519\u8bef\u5df2\u4fee\u590d\uff0c\u4f46\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u542f\u7528\u4e86 Windows \u4efb\u52a1\u7ba1\u7406\u5668\u4e2d\u7684\u53e5\u67c4\u5217\uff0c\u4ee5\u9632\u4e07\u4e00\u6211\u9047\u5230\u53e6\u4e00\u4e2a\u53e5\u67c4\u6cc4\u6f0f\u3002\u7531\u4e8e\u8fd9\u9879\u4f8b\u884c\u68c0\u67e5\uff0c\u6211\u5728 2021 \u5e74 2 \u6708\u6ce8\u610f\u5230\uff0cChrome \u7684\u4e00\u4e2a\u8fdb\u7a0b\u6253\u5f00\u4e86 20,000 \u591a\u4e2a\u53e5\u67c4\uff01\u8fd9\u4e2a Chrome \u9519\u8bef\u73b0\u5df2\u4fee\u590d\uff0c\u4f46\u6211\u60f3\u5206\u4eab\u5982\u4f55\u8c03\u67e5\u5904\u7406\u6cc4\u6f0f\uff0c\u56e0\u4e3a\u8fd8\u6709\u5176\u4ed6\u6cc4\u6f0f\u7a0b\u5e8f\u3002\u6211\u4e5f\u60f3\u5206\u4eab\u6211\u7684\u5b66\u4e60\u8fc7\u7a0b\u3002\u5bf9 Chrome \u7684\u4efb\u52a1\u7ba1\u7406\u5668\u8fdb\u884c\u7684\u4e00\u4e9b\u8c03\u67e5\u8868\u660e\uff0c\u6709\u95ee\u9898\u7684\u8fdb\u7a0b\u662f gmail \u7684\u6e32\u67d3\u5668\u8fdb\u7a0b\uff0c\u518d\u591a\u770b\u770b\u5c31\u4f1a\u53d1\u73b0\u5927\u591a\u6570 Chrome \u6e32\u67d3\u5668\u8fdb\u7a0b\u7684\u5185\u6838\u53e5\u67c4\u5c11\u4e8e 1,000 \u4e2a\u3002 20,000 \u4f3c\u4e4e\u5f02\u5e38\uff0c\u7ecf\u8fc7\u51e0\u4e2a\u5c0f\u65f6\u7684\u76d1\u63a7\u540e\uff0c\u6211\u53ef\u4ee5\u770b\u5230\u53e5\u67c4\u6570\u91cf\u65e0\u9650\u589e\u52a0\u3002\u601c\u60af\u6d3b\u7740\uff0c\u770b\u8d77\u6765\u6211\u4eec\u7684\u53e5\u67c4\u6cc4\u6f0f\u4e86\u3002\u6211\u60f3\u77e5\u9053\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u8fd9\u4e9b\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u624b\u67c4\u3002 Windows \u53e5\u67c4\u53ef\u4ee5\u5f15\u7528\u6587\u4ef6\u3001\u8fdb\u7a0b\u3001\u7ebf\u7a0b\u3001\u4e8b\u4ef6\u3001\u4fe1\u53f7\u91cf\u548c\u8bb8\u591a\u5176\u4ed6\u5185\u6838\u5bf9\u8c61\u3002\u6211\u8f6c\u5411 sysinternals \u7684\u53e5\u67c4\u5de5\u5177\u67e5\u770b\u5b83\u662f\u54ea\u79cd\u7c7b\u578b\uff0c\u4f46\u5b83\u8bf4\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u53ea\u6709\u51e0\u767e\u4e2a\u53e5\u67c4\u6253\u5f00\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0chandle.exe \u9ed8\u8ba4\u53ea\u663e\u793a\u6709\u5173\u6587\u4ef6\u53e5\u67c4\u7684\u4fe1\u606f\u3002\u8981\u83b7\u53d6\u5b8c\u6574\u4fe1\u606f\uff0c\u60a8\u53ef\u4ee5\u4f20\u9012 -a \u4ee5\u8f6c\u50a8\u6709\u5173\u6240\u6709\u53e5\u67c4\u7684\u4fe1\u606f\uff0c\u6216\u4f20\u9012 -s \u4ee5\u6309\u7c7b\u578b\u8fdb\u884c\u6c47\u603b\u3002 -s \u9009\u9879\u5bf9\u672c\u6b21\u8c03\u67e5\u6700\u6709\u5e2e\u52a9\u3002\u5178\u578b\u7684\u8f93\u51fa\u50cf\u8fd9\u6837\u5bfb\u627e gmail\uff08\u4ece\u7ba1\u7406\u547d\u4ee4\u63d0\u793a\u7b26\u8fd0\u884c\u5b83\u4f1a\u89e3\u6790 &lt;Unknown type&gt; \u53e5\u67c4\uff09\uff1a\u53e5\u67c4\u7c7b\u578b\u6458\u8981\uff1a&lt;Unknown type&gt; : 4 &lt;Unknown type&gt; : 77 &lt;Unknown type&gt; : 48 ALPC Port \uff1a1 \u76ee\u5f55\uff1a2 \u4e8b\u4ef6\uff1a20858 \u6587\u4ef6\uff1a147 IoCompletion\uff1a4 IRTimer\uff1a6 \u952e\uff1a8 \u4fe1\u53f7\u91cf\uff1a8 \u7ebf\u7a0b\uff1a31 TpWorkerFactory\uff1a3 WaitCompletionPacket\uff1a10 \u603b\u53e5\u67c4\uff1a21207\n\u6240\u4ee5\u3002\u4e8b\u4ef6\u5904\u7406\u5b83\u662f\u3002\u8fd8\u53ef\u80fd\u4f1a\u66f4\u7cdf\u7cd5\u7684\u3002\u6cc4\u6f0f\u7684\u8fdb\u7a0b\u53e5\u67c4\u4fdd\u7559\u4e86\u6602\u8d35\u7684\u5185\u6838\u7ed3\u6784\uff0c\u6bcf\u4e2a\u53e5\u67c4\u4f3c\u4e4e\u52a0\u8d77\u6765\u5927\u7ea6 64 KB\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4e8b\u4ef6\u53e5\u67c4\u76f8\u5f53\u4fbf\u5b9c\u2014\u2014\u53ef\u80fd\u53ea\u6709 16 \u4e2a\u5b57\u8282\u5de6\u53f3\uff08\u5f88\u96be\u8861\u91cf\uff09\u3002\u8fd9\u6b21\u6cc4\u6f0f\u7684\u5f71\u54cd\u53ef\u80fd\u5fae\u4e4e\u5176\u5fae\u3002\u4f46\u662f\uff0cChrome \u4f7f\u7528 RAII \u5bf9\u8c61\u6765\u7ba1\u7406\u5b83\u7684\u6240\u6709\u53e5\u67c4\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u5e94\u8be5\u6709\u6cc4\u6f0f\u2014\u2014\u6211\u60f3\u77e5\u9053\u51fa\u4e86\u4ec0\u4e48\u95ee\u9898\u3002\u7ecf\u8fc7\u4e00\u756a\u8be2\u95ee\uff0c\u6211\u53d1\u73b0\u6211\u7684\u540c\u4e8b\u90fd\u4e0d\u77e5\u9053\u5982\u4f55\u8c03\u67e5\u5904\u7406\u6cc4\u6f0f\uff0c\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u5f04\u6e05\u695a\u3002\u6211\u5c06\u8c03\u8bd5\u5668\u9644\u52a0\u5230 gmail \u8fdb\u7a0b\u5e76\u5c1d\u8bd5\u5728\u521b\u5efa\u4e8b\u4ef6\u7684\u51fd\u6570\u4e0a\u8bbe\u7f6e\u65ad\u70b9\uff0c\u4f46\u6211\u6536\u5230\u592a\u591a\u566a\u97f3\u3002\u6b63\u5728\u521b\u5efa\u6570\u767e\u4e2a\u4e8b\u4ef6\uff0c\u5176\u4e2d\u8d85\u8fc7 99% \u7684\u4e8b\u4ef6\u88ab\u5f7b\u5e95\u5220\u9664\u3002\u6211\u9700\u8981\u66f4\u597d\u7684\u4e1c\u897f\u3002\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u8bf4\u6211\u592a\u6c89\u8ff7\u4e8e\u4f7f\u7528 Windows \u7684\u4e8b\u4ef6\u8ddf\u8e2a\u6765\u5c1d\u8bd5\u89e3\u51b3\u6240\u6709\u95ee\u9898\uff0c\u4f46\u53ea\u8981\u5b83\u7ee7\u7eed\u5de5\u4f5c\uff0c\u6211\u5c31\u4f1a\u7ee7\u7eed\u4f7f\u7528\u5b83\u3002\u6211\u6000\u7591 ETW \u53ef\u80fd\u80fd\u591f\u8ddf\u8e2a\u53e5\u67c4\u521b\u5efa\u548c\u9500\u6bc1\u5e76\u627e\u5230\u6cc4\u6f0f\uff0c\u4f46\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u3002\u4e00\u70b9\u8c37\u6b4c\u641c\u7d22\u627e\u5230\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002\u5b83\u8ba9\u6211\u5f00\u59cb\u4e86\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u7f3a\u9677\uff1a \u6587\u7ae0\u663e\u793a\u6570\u5341\u4e2a\u6807\u5fd7\u88ab\u4f20\u9012\u7ed9 xperf.exe\uff0c\u4f46\u6ca1\u6709\u89e3\u91ca\u5b83\u4eec\u662f\u4ec0\u4e48 \u6307\u5b9a\u7684\u6807\u5fd7\u5bfc\u81f4\u975e\u5e38\u9ad8\u7684\u6570\u636e\u901f\u7387\uff0c\u8fd9\u4f7f\u5f97\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u8ddf\u8e2a\u4e0d\u5207\u5b9e\u9645\u5e16\u5b50\u627f\u8bfa\u4f1a\u5728\u201c\u4e0b\u4e00\u4e2a\u5e16\u5b50\u201d\u4e2d\u89e3\u91ca\u5982\u4f55\u5206\u6790\u6570\u636e\uff0c\u4f46\u6ca1\u6709\u201c\u4e0b\u4e00\u4e2a\u5e16\u5b50\u201d\u548c\u6c42\u52a9\u7535\u8bdd\u5bfc\u81f4\u6ca1\u6709\u4efb\u4f55\u6f0f\u6d1e\uff0c\u8fd9\u8ba9\u6211\u7834\u6848\u4e86\u3002\u6211\u5f00\u59cb\u4e3b\u8981\u6309\u539f\u6837\u4f7f\u7528\u5b83\u3002\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u6cc4\u6f0f 10,000 \u4e2a\u53e5\u67c4\u7684\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5e76\u8bb0\u5f55\u4e86\u4e00\u4e2a\u8ddf\u8e2a\uff0c\u770b\u770b\u6211\u662f\u5426\u53ef\u4ee5\u770b\u5230\u6545\u610f\u6cc4\u6f0f\u3002\u6709\u6548\u3002\u7136\u800c\uff0c\u5b83\u4ee5\u6bcf\u5c0f\u65f6\u8bb8\u591a GB \u7684\u901f\u5ea6\u8bb0\u5f55\u6570\u636e\u3002\u56e0\u4e3a\u624b\u67c4\u6cc4\u6f0f\u76f8\u5f53\u7f13\u6162\u2014\u2014\u6cc4\u6f0f 20,000 \u4e2a\u624b\u67c4\u9700\u8981\u6570\u5468\u65f6\u95f4\u2014\u2014\u6211\u9700\u8981\u8fdb\u884c\u6570\u5c0f\u65f6\u7684\u8ddf\u8e2a\u4ee5\u786e\u4fdd\u6211\u80fd\u53d1\u73b0\u6cc4\u6f0f\u3002\u6211\u4e13\u6ce8\u4e8e\u4e24\u79cd\u7b56\u7565\uff1a\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b xperf -providers \u7684\u8f93\u51fa\u627e\u5230\u66f4\u591a\u5173\u4e8e\u5176\u4e2d\u4e00\u4e9b\u542b\u4e49\u7684\u4fe1\u606f\uff0c\u4f46\u7b80\u77ed\u7684\u7248\u672c\u662f\u63a8\u8350\u7684\u547d\u4ee4\u884c\u4e0d\u4ec5\u8bb0\u5f55\u6709\u5173\u53e5\u67c4\u7684\u4fe1\u606f\uff0c\u8fd8\u8bb0\u5f55\u6709\u5173\u6bcf\u4e2a\u4e0a\u4e0b\u6587\u5207\u6362\u548c\u6240\u6709\u78c1\u76d8\u7684\u4fe1\u606f\u3002 /O\uff08\u8bf7\u53c2\u9605\u5ef6\u8fdf\uff09\uff0c\u542f\u7528\u91c7\u6837\u5206\u6790\u5668\uff08\u4e5f\u5728\u5ef6\u8fdf\u4e2d\uff09\u7b49\u7b49\u3002\u6211\u7684\u7b2c\u4e00\u6b65\u662f\u5c06\u5176\u7cbe\u7b80\u4e3a\u8fd9\u6837\uff1a\u9700\u8981 PROC_THREAD+LOADER \u6765\u7406\u89e3\u4efb\u4f55 ETW \u8ddf\u8e2a\uff0c\u800c OB_HANDLE+OB_OBJECT \u4f3c\u4e4e\u662f\u53e5\u67c4\u8ddf\u8e2a\u7684\u5173\u952e\u3002\u4e00\u4f4d Microsoft \u8054\u7cfb\u4eba\u544a\u8bc9\u6211\u4e0d\u9700\u8981 OB_OBJECT\uff0c\u56e0\u6b64\u6211\u5c06\u5176\u5220\u9664\u3002\u63a8\u8350\u7684\u547d\u4ee4\u5bf9 -stackwalk \u6807\u5fd7\u4e5f\u6709\u516d\u4e2a\u4e0d\u540c\u7684\u53c2\u6570\uff0c\u800c\u6211\u771f\u6b63\u9700\u8981\u7684\u662f\u5206\u914d\u53e5\u67c4\u65f6\u7684\u5806\u6808\u3002\u6211\u5220\u9664\u4e86\u5176\u4e2d\u7684\u4e94\u4e2a\uff0c\u7136\u540e\u6dfb\u52a0\u4e86 HandleDuplicate \u4ee5\u9632\u4e07\u4e00\u3002\u60a8\u53ef\u4ee5\u5728 github \u4e0a\u7684\u6279\u5904\u7406\u6587\u4ef6\u4e2d\u770b\u5230\u4e00\u4e2a\u529f\u80fd\u66f4\u9f50\u5168\u7684\u547d\u4ee4\u884c\uff0c\u4f46\u8fd9\u663e\u793a\u4e86\u6700\u5c0f\u7684\u60f3\u6cd5\u3002\u5b83\u5f00\u59cb\u8ddf\u8e2a\uff0c\u8bb0\u5f55\u8db3\u591f\u7684\u4fe1\u606f\u4ee5\u5c06\u4e8b\u4ef6\u5f52\u56e0\u4e8e\u6b63\u786e\u7684\u7ebf\u7a0b\u548c\u6a21\u5757 (PROC_THREAD+LOADER)\uff0c\u8bb0\u5f55\u6709\u5173\u53e5\u67c4\u64cd\u4f5c\u7684\u4fe1\u606f (OB_HANDLE) \u5e76\u8bb0\u5f55\u6709\u5173\u53e5\u67c4\u521b\u5efa\u548c\u53e5\u67c4\u590d\u5236\u7684\u8c03\u7528\u5806\u6808\u3002\u5b8c\u7f8e\u7684\uff01\u7136\u540e\u6211\u5c06\uff08\u4ecd\u7136\u592a\u5927\u7684\uff09\u8ddf\u8e2a\u52a0\u8f7d\u5230 WPA \u4e2d\uff0c\u5e76\u67e5\u770b\u6240\u6709\u6570\u636e\u7684\u6765\u6e90\u3002\u4ea7\u751f\u6700\u591a\u4e8b\u4ef6\u7684\u8fdb\u7a0b\u662f\u4efb\u52a1\u7ba1\u7406\u5668\u548c Chrome \u8fdc\u7a0b\u684c\u9762\u3002\u9ad8\u6d41\u91cf\u610f\u5473\u7740\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u6b63\u5728\u521b\u5efa\u548c\u9500\u6bc1\u5927\u91cf\u53e5\u67c4\u3002\u8fd9\u901a\u5e38\u4e0d\u662f\u95ee\u9898\uff08\u5b83\u4eec\u6ca1\u6709\u6cc4\u6f0f\u53e5\u67c4\uff09\u4f46\u5b83\u4f7f\u6211\u7684\u8ddf\u8e2a\u53d8\u5927\uff0c\u56e0\u6b64\u89e3\u51b3\u65b9\u6848\u5f88\u660e\u786e - \u5728\u8ddf\u8e2a\u65f6\u5173\u95ed\u5b83\u4eec\u3002\u5173\u95ed\u4efb\u52a1\u7ba1\u7406\u5668\u5f88\u5bb9\u6613\uff0c\u4f46\u7531\u4e8e\u6211\u662f\u5728\u5bb6\u4e2d\u5728\u529e\u516c\u5ba4\u7684\u5de5\u4f5c\u7ad9\u4e0a\u8fdb\u884c\u8fd9\u9879\u8c03\u67e5\uff0c\u56e0\u6b64\u5173\u95ed Chrome \u8fdc\u7a0b\u684c\u9762\u4e0d\u592a\u65b9\u4fbf\u3002\u4f46\u662f\uff0c\u4e0d\u7528\u62c5\u5fc3\u3002\u6211\u786e\u4fdd\u4e00\u5207\u6b63\u5e38\u8fd0\u884c\uff0c\u7136\u540e\u65ad\u5f00\u8fde\u63a5\uff08\u4ee5\u51cf\u5c11\u751f\u6210\u7684\u6570\u636e\u91cf\uff09\uff0c\u7136\u540e\u5728 12 \u5c0f\u65f6\u540e\u91cd\u65b0\u8fde\u63a5\u3002\u8fd9\u79cd\u7b56\u7565 - \u5173\u95ed\u751f\u6210\u8fc7\u591a\u6570\u636e\u7684\u7a0b\u5e8f - \u901a\u5e38\u5bf9 ETW \u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u8bb0\u5f55\u6709\u5173\u6574\u4e2a\u7cfb\u7edf\u7684\u4fe1\u606f\uff0c\u5305\u62ec\u6240\u6709\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u3002\u73b0\u5728\u6211\u6709\u4e00\u4e9b\u5927\u4f46\u53ef\u7ba1\u7406\u7684\u8ddf\u8e2a\uff08~970 MB\uff0c\u538b\u7f29\uff09\uff0c\u6211\u53ef\u4ee5\u5f00\u59cb\u5206\u6790\u3002\u6211\u5c06\u8ddf\u8e2a\u52a0\u8f7d\u5230 Windows \u6027\u80fd\u5206\u6790\u5668\u4e2d\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u53e5\u67c4\u8ddf\u8e2a\u56fe\u3002\u5b83\u4f4d\u4e8e Graph Explorer \u4e2d\u7684 Memory (???)\u3001Handles\u3001Outstanding Count by Process \u4e0b\u3002\u5b8c\u7f8e\u7684\uff01\u6253\u5f00\u5b83\u4f1a\u7ed9\u51fa\u4e00\u4e2a\u56fe\u8868\uff0c\u663e\u793a\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u53e5\u67c4\u8ba1\u6570\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u3002\u5341\u4e8c\u4e2a\u5c0f\u65f6\u5185\u6709\u5f88\u591a\u6d3b\u52a8\u3002\u653e\u5927\u5230\u5341\u5206\u949f\u7684\u65f6\u95f4\u8de8\u5ea6\u663e\u793a\u4e00\u8fde\u4e32\u7684\u6d3b\u52a8\u3002\u8fdb\u7a0b\u88ab\u521b\u5efa\uff0c\u5206\u914d\u4e00\u4e9b\u53e5\u67c4\uff0c\u7136\u540e\u6b7b\u4ea1\uff0c\u521b\u5efa\u4e00\u4e2a\u50cf\u6570\u5b57\u7eaa\u5ff5\u7891\u8c37\u4e00\u6837\u7684\u89c6\u56fe\u3002\u5176\u4ed6\u8fdb\u7a0b\u5206\u914d\u548c\u91ca\u653e\u53e5\u67c4\u6ca1\u6709\u660e\u786e\u7684\u6a21\u5f0f\uff0c\u5176\u4ed6\u8fdb\u7a0b\u4f3c\u4e4e\u65e0\u9650\u671f\u5730\u589e\u52a0\u5b83\u4eec\u7684\u53e5\u67c4\u6570\uff1a\u56fe\u8868\u5f88\u6f02\u4eae\uff0c\u4f46\u6211\u51b3\u5b9a\u6211\u60f3\u8981\u539f\u59cb\u6570\u5b57\uff0c\u6240\u4ee5\u6211\u67e5\u770b\u4e86\u8868\u683c\u3002\u9ed8\u8ba4\u89c6\u56fe\u5bf9\u4e8e\u5206\u914d\u4e86\u8fd1 150 \u4e07\u4e2a\u53e5\u67c4\u7684 Chrome \u6d4f\u89c8\u5668\u8fdb\u7a0b\u6765\u8bf4\u975e\u5e38\u7cdf\u7cd5\u3002\u53ef\u662f\u7b49\u7b49\u2026\n\u53e5\u67c4\u6cc4\u6f0f\u4e0d\u5728\u6d4f\u89c8\u5668\u8fdb\u7a0b\u4e2d\uff0c\u5b83\u8fdc\u4e0d\u53ca 150 \u4e07\u4e2a\u53e5\u67c4\u3002\u597d\u5427\uff0c\u4e8b\u5b9e\u8bc1\u660e\u9ed8\u8ba4\u89c6\u56fe\u5177\u6709\u8bef\u5bfc\u6027\u3002\u867d\u7136\u56fe\u8868/\u8868\u683c\u88ab\u79f0\u4e3a\u201c\u6309\u6d41\u7a0b\u8ba1\u7b97\u7684\u6770\u51fa\u8ba1\u6570\u201d\uff0c\u8fd9\u786e\u5b9e\u662f\u56fe\u5f62\u663e\u793a\u7684\u5185\u5bb9\uff0c\u4f46\u8be5\u8868\u683c\u5b9e\u9645\u4e0a\u663e\u793a\u4e86\u6309\u6d41\u7a0b\u8ba1\u7b97\u7684\u7d2f\u8ba1\u8ba1\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6d4f\u89c8\u5668\u8fdb\u7a0b\u5728 12 \u5c0f\u65f6\u5185\u5206\u914d\u4e86 150 \u4e07\u4e2a\u53e5\u67c4\uff0c\u4f46\u5b83\u91ca\u653e\u4e86\u51e0\u4e4e\u6240\u6709\u7684\u53e5\u67c4\uff0c\u90a3\u4e48\u8c01\u5728\u4e4e\u5462\uff1f\u6211\u60f3\u770b\u5230\u7684\u662f\u7a81\u51fa\u7684\u53e5\u67c4\u2014\u2014\u5df2\u5206\u914d\u4f46\u672a\u91ca\u653e\u3002\u8be5\u8868\u53ef\u4ee5\u663e\u793a\u8fd9\u4e9b\u6570\u636e\uff0c\u4f46\u5b83\u80af\u5b9a\u4e0d\u4f1a\u8ba9\u5b83\u53d8\u5f97\u5bb9\u6613\u3002\u5728\u5806\u8ddf\u8e2a\u8868\u4e2d\u6709\u4e00\u4e2a\u6807\u8bb0\u4e3a\u7c7b\u578b\u7684\u5217\u3002\u73b0\u5728\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u5217\u540d\u9009\u62e9\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5217\u3002\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u5728\u7c7b\u578b\u5217\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u201c\u5185\u90e8\u201d\u8868\u793a\u5728\u8ddf\u8e2a\u8bb0\u5f55\u7684\u65f6\u95f4\u8303\u56f4\u5185\uff0c\u800c\u201c\u5916\u90e8\u201d\u8868\u793a\u5728\u8ddf\u8e2a\u8bb0\u5f55\u7684\u65f6\u95f4\u8303\u56f4\u4e4b\u5916\u3002\u53ef\u7528\u7684\u7c7b\u578b\u6709\uff1a AIFO \u662f\u6709\u8da3\u7684\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u5728\u8bb0\u5f55\u8ddf\u8e2a\u65f6\u5206\u914d\u7684\uff0c\u7136\u540e\u5728\u8ddf\u8e2a\u8bb0\u5f55\u505c\u6b62\u4e4b\u524d\u672a\u91ca\u653e\u3002\u5b83\u4eec\u53ef\u80fd\u5728\u51e0\u79d2\u949f\u540e\u88ab\u91ca\u653e\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5728\u540c\u4e00\u4e2a\u8c03\u7528\u5806\u6808\u4e0a\u770b\u5230\u8db3\u591f\u591a\u7684\u5b83\u4eec\uff0c\u60a8\u5c31\u4f1a\u6000\u7591\u2026\u2026\u8fd9\u5c31\u662f\u5806\u8ddf\u8e2a\u7684\u5de5\u4f5c\u539f\u7406\u3002\u53e5\u67c4\u8ddf\u8e2a\u91c7\u7528\u4e86\u8fd9\u4e2a\u6982\u5ff5\u5e76\u5c06\u5176\u66f4\u6539\u4e3a\u8db3\u4ee5\u4ee4\u4eba\u56f0\u60d1\u7684\u7a0b\u5ea6\u3002\u4ed6\u4eec\u5c06\u5217\u4ece Type \u91cd\u547d\u540d\u4e3a Lifetime\u3002 Lifetime \u7edd\u5bf9\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u540d\u5b57\uff0c\u4f46\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u53d1\u751f\u4e00\u4e9b\u6df7\u6dc6\uff0c\u56e0\u4e3a\u540c\u4e00\u6982\u5ff5\u6709\u4e24\u4e2a\u540d\u5b57 \u4ed6\u4eec\u9ed8\u8ba4\u5173\u95ed\u4e86\u8be5\u5217\u3002\u8fd9\u548c\u5806\u8ddf\u8e2a\u662f\u4e00\u81f4\u7684\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0bType\u5217\u662f\u5173\u95ed\u7684\uff0c\u4f46\u662f\u83ab\u540d\u5176\u5999\u3002\u8fd9\u662f\u8868\u683c\u4e2d\u6700\u91cd\u8981\u7684\u4e00\u5217\uff0c\u6240\u4ee5\u6211\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u5b83\u4e0d\u5728\u524d\u9762\u548c\u4e2d\u95f4\u3002\u9664\u4e86\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5173\u95ed\u5217\u4e4b\u5916\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u9690\u85cf\u4e86\u5b83\uff01\u901a\u5e38\uff0c\u60a8\u53ef\u4ee5\u53f3\u952e\u5355\u51fb\u4efb\u4f55\u5217\u6807\u9898\uff0c\u9009\u62e9\u66f4\u591a\u5217...\uff0c\u7136\u540e\u67e5\u770b\u60a8\u53ef\u4ee5\u542f\u7528\u7684\u5217\u5217\u8868\u3002\u8bb8\u591a\u7528\u6237\uff08\u6211\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff09\u53ef\u80fd\u8ba4\u4e3a\u83dc\u5355\u4e2d\u7684\u5217\u5217\u8868\u662f\u5b8c\u6574\u7684\u3002\u5b83\u4e0d\u662f\u3002\u5bf9\u4e8e\u67d0\u4e9b\u5217\u2014\u2014\u5305\u62ec\u6781\u5176\u91cd\u8981\u7684\u751f\u547d\u5468\u671f\u5217\u2014\u2014\u60a8\u5fc5\u987b\u8c03\u7528\u89c6\u56fe\u7f16\u8f91\u5668\uff08Ctrl+E \u6216\u5355\u51fb\u201c\u6309\u8fdb\u7a0b\u672a\u5b8c\u6210\u8ba1\u6570\u201d\u53f3\u4fa7\u7684\u9f7f\u8f6e\u6846\uff09\uff0c\u7136\u540e\u4ece\u53ef\u7528\u5217\u5217\u8868\u4e2d\u62d6\u52a8\u751f\u547d\u5468\u671f\u5217\u5728\u5de6\u8fb9\u5230\u53f3\u8fb9\u7684\u5217\u8868\u3002\u5509\u2026\u2026\u6211\u5411 WPA \u8d1f\u8d23\u4eba\u62a5\u544a\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u4ed6\u4eec\u540c\u610f\u9700\u8981\u6539\u8fdb\u3002\u65e2\u7136 WPA\uff08\u9884\u89c8\u7248\uff09\u5728 Microsoft \u5546\u5e97\u4e2d\u53ef\u7528\uff0c\u6211\u4eec\u5e94\u8be5\u671f\u671b\u50cf\u8fd9\u6837\u7684\u4fee\u590d\u7a0b\u5e8f\u5c06\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5feb\u5730\u53d1\u5e03\u3002\nETW \u7684\u53e5\u67c4\u8ddf\u8e2a\u8981\u6ce8\u610f\u7684\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u5b83\u4f3c\u4e4e\u6709\u4e00\u4e9b\u8bb0\u5e10\u9519\u8bef\u3002\u5b83\u5c06\u62a5\u544a\u7ed9\u5b9a\u201chandle -s\u201d\u8f93\u51fa\u4e0d\u53ef\u80fd\u53d1\u751f\u7684\u6cc4\u6f0f\uff0c\u56e0\u6b64\u8bf7\u52a1\u5fc5\u5728\u82b1\u8d39\u592a\u591a\u65f6\u95f4\u4e4b\u524d\u4ea4\u53c9\u68c0\u67e5\u60a8\u7684\u7ed3\u679c\u3002\u5e26\u7740\u6240\u6709\u7684\u5b66\u4e60\u548c\u53d1\u73b0\uff0c\u6211\u5f97\u51fa\u4e86\u8fd9\u4e2a\u89c2\u70b9\u3002\u5b83\u663e\u793a\u4e86 gmail \u8fdb\u7a0b\u5728 12 \u5c0f\u65f6\u5185\u6cc4\u6f0f\u7684 527 \u4e2a\u4e8b\u4ef6\u53e5\u67c4\uff0c\u5176\u4e2d 510 \u4e2a\u90fd\u6cc4\u6f0f\u5728\u540c\u4e00\u4e2a\u8c03\u7528\u5806\u6808\u4e0a\uff0c\u4ee5 WaitableEvent \u6784\u9020\u51fd\u6570\u7ed3\u675f\uff1a\u4e8b\u4ef6\u5bf9\u8c61\u7531 Chrome \u7684 WaitableEvent \u7c7b\u5206\u914d\u5e76\u5b58\u50a8\u5728\u5176\u4e2d\uff0c\u7531\u5176 ScopedHandle \u6210\u5458\u7ba1\u7406\u591a\u53d8\u7684\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u6cc4\u6f0f\u4e86\u8fd9\u4e9b\u53e5\u67c4\uff0c\u6211\u4eec\u4e5f\u4f1a\u6cc4\u6f0f WaitableEvent \u5bf9\u8c61\u3002\u5982\u679c\u6211\u4eec\u6cc4\u6f0f\u4e86\u90a3\u4e9b\uff0c\u90a3\u4e48\u6211\u4eec\u8fd8\u6cc4\u6f0f\u4e86\u4ec0\u4e48\uff1f\u6211\u4f7f\u7528\u5806\u5feb\u7167\u8ddf\u8e2a\u6765\u76d1\u63a7 gmail \u8fdb\u7a0b\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u662f\u719f\u6089\u7684\u9886\u57df\uff0c\u6240\u4ee5\u5b83\u8fdb\u884c\u5f97\u5f88\u987a\u5229\u3002\u7136\u540e\u6211\u901a\u8fc7\u7c7b\u4f3c\u4e8e\u53e5\u67c4\u6cc4\u6f0f\u7684\u8c03\u7528\u5806\u6808\u5bfb\u627e\u6f5c\u5728\u7684\u6cc4\u6f0f\u5e76\u627e\u5230\u4e86\u4e00\u4e9b\u3002\u7136\u540e\u6211\u73af\u987e\u56db\u5468\u5bfb\u627e\u5176\u4ed6\u6f5c\u5728\u7684\u6cc4\u6f0f\uff0c\u5176\u8ba1\u6570\u76f8\u4f3c\u4e14\u770b\u8d77\u6765\u4f3c\u4e4e\u76f8\u5173\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a\u4f3c\u4e4e\u4e0e IDBFactory \u548c OperationsController \u5bf9\u8c61\u6cc4\u6f0f\u76f8\u5173\u7684\u96c6\u5408\u3002\u6211\u4f7f\u7528 Chrome \u7684\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u67e5\u770b gmail \u662f\u5426\u6cc4\u6f0f\u4e86 IDB \u76f8\u5173\u5bf9\u8c61\u3002\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u6240\u4ee5\u6211\u4e0d\u80fd\u628a\u8fd9\u5f52\u548e\u4e8e gmail \u56e2\u961f\u3002\u6709\u51e0\u4e2a\u4eba\u6700\u7ec8\u4e3a\u5206\u6790\u505a\u51fa\u4e86\u8d21\u732e\u3002\u6211\u4e86\u89e3\u5982\u4f55\u89e3\u91ca\u8fd9\u4e9b\u75d5\u8ff9\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728 Chrome \u7684\u81ea\u5b9a\u4e49\u68c0\u6d4b\u7248\u672c\u4e0a\u91cd\u73b0\u6cc4\u6f0f\uff0c\u4f46\u6211\u5bf9 JavaScript \u5f88\u7cdf\u7cd5\uff0c\u800c\u4e14\u6211\u4e0d\u4e86\u89e3\u6211\u4eec\u7684 IDB \u67b6\u6784\u3002\u6211\u7684\u4e00\u4f4d\u540c\u4e8b\u4e86\u89e3\u6cc4\u6f0f\u5bf9\u8c61\u7684\u67b6\u6784\u3002\u8fd9\u4f4d\u540c\u4e8b\u610f\u8bc6\u5230\u6cc4\u6f0f\u7684\u5206\u914d\u53d1\u751f\u5728\u670d\u52a1\u5de5\u4f5c\u7ebf\u7a0b\u4e0a\uff0c\u5e76\u4e14\u5728 IndexedDB \u8fde\u63a5\u6253\u5f00\u65f6\u53ea\u8981\u670d\u52a1\u5de5\u4f5c\u7ebf\u7a0b\u6d88\u5931\u5c31\u4f1a\u6cc4\u6f0f\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u79cd\u60c5\u51b5\u5728\u67d0\u4e9b\u7f51\u7ad9\u4e0a\u7ecf\u5e38\u53d1\u751f\uff0c\u800c Chrome \u5bf9\u6b64\u5904\u7406\u5f97\u5f88\u5dee\u3002\u90a3\u5c31\u662f\u9519\u8bef\uff01\u8fdb\u4e00\u6b65\u7684\u8c03\u67e5\u652f\u6301\u4e86\u8fd9\u4e00\u7406\u8bba\u2014\u2014\u6cc4\u6f0f\u5bf9\u8c61\u6570\u91cf\u7684\u589e\u52a0\u4e0e\u670d\u52a1\u5de5\u4f5c\u7ebf\u7a0b\u7684\u9000\u51fa\u6709\u5173\u3002\u7136\u540e\u6211\u610f\u8bc6\u5230\u670d\u52a1\u5de5\u4f5c\u8005\u4e0e Google Drive \u7684\u79bb\u7ebf\u6a21\u5f0f\u76f8\u5173\u8054\u3002\u5982\u679c\u6211\u7981\u7528\u79bb\u7ebf\u6a21\u5f0f\uff0c\u90a3\u4e48\u6cc4\u6f0f\u5c31\u4f1a\u6d88\u5931\u3002\n\u82b1\u4e86\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u6765\u7406\u89e3\u8fd9\u4e2a\u9519\u8bef\uff0c\u4f46\u5f88\u5feb\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u4fee\u590d\u7a0b\u5e8f\uff08\u4e0d\u662f\u6211 - \u6211\u4ecd\u7136\u4e0d\u7406\u89e3\u4ee3\u7801\u7684\u90a3\u90e8\u5206\uff09\u5e76\u5728\u51e0\u5929\u540e\u767b\u9646 Chromium \u5b58\u50a8\u5e93\u3002\u8be5\u4fee\u590d\u4e8e 5 \u6708\u767b\u9646 M92\uff0c\u5e76\u4e8e 2021 \u5e74 7 \u6708 21 \u65e5\u5de6\u53f3\u5f00\u59cb\u5411\u666e\u901a\u7528\u6237\u63a8\u51fa\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u4fee\u590d\uff0c\u90a3\u4e48\u60a8\u5f88\u5feb\u5c31\u4f1a\u83b7\u5f97\u3002\u4e00\u65e6\u7406\u89e3\u4e86\u9519\u8bef\uff0c\u6211\u5c31\u53ef\u4ee5\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002\u4f7f\u7528\u5e26\u6709 bug \u7684 Chrome \u7248\u672c\uff0c\u6211\u540c\u65f6\u6253\u5f00\u4e86 gmail\u3001\u5de5\u4f5c\u8868\u3001\u6587\u6863\u548c\u9a71\u52a8\u5668\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4f7f\u7528\u79bb\u7ebf\u6a21\u5f0f\uff0c\u56e0\u6b64\u6240\u6709\u8fd9\u4e9b\u90fd\u6cc4\u6f0f\u4e86\u53e5\u67c4\u3002\u6211\u7684 Chrome \u7a97\u53e3\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a \u5728\u8ba9\u6709\u95ee\u9898\u7684 Chrome \u50cf\u8fd9\u6837\u8fd0\u884c\u51e0\u5929\u4e4b\u540e\uff0c\u4efb\u52a1\u7ba1\u7406\u5668\u5728\u6309\u53e5\u67c4\u6392\u5e8f\u65f6\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\u524d 11 \u4e2a\u8fdb\u7a0b\u4e2d\u6709 5 \u4e2a\u662f chrome.exe\uff08\u56db\u4e2a\u6e32\u67d3\u5668\u52a0\u4e0a\u6d4f\u89c8\u5668\u8fdb\u7a0b\uff09\u3002\u66f4\u65b0\u6d4f\u89c8\u5668\u540e\uff0c\u56db\u4e2a\u6e32\u67d3\u5668\u4e0d\u518d\u663e\u793a\u5728\u9876\u90e8\u5217\u8868\u4e2d\u3002\u4f46\u662f\u5176\u4ed6\u8fc7\u7a0b\u5462\uff1f WPA.exe \u662f Windows \u6027\u80fd\u5206\u6790\u5668\u2014\u2014\u6211\u7528\u6765\u5206\u6790\u53e5\u67c4\u6cc4\u6f0f\u8ddf\u8e2a\u7684\u5de5\u5177\u3002\u5b83\u6253\u5f00\u4e86\u5927\u7ea6 1,700 \u4e2a .symcache \u6587\u4ef6\uff0c\u5e76\u4e14\u4f3c\u4e4e\u6709\u4e00\u4e2a\u4e8b\u4ef6\u53e5\u67c4\u6cc4\u6f0f\uff0c\u5c31\u50cf Chrome \u4e00\u6837\u3002\u6211\u5df2\u7ecf\u5411\u5f00\u53d1\u4eba\u5458\u62a5\u544a\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u4ed6\u4eec\u6b63\u5728\u8c03\u67e5\u3002\u7cfb\u7edf\u6df7\u5408\u4e86\u4e8b\u4ef6\u53e5\u67c4\u3001\u6587\u4ef6\u53e5\u67c4\u3001IoCompletion \u53e5\u67c4\u3001\u8fdb\u7a0b\u53e5\u67c4\u3001WaitCompletionPacket \u53e5\u67c4\u7b49\u3002\u6211\u4e0d\u77e5\u9053\u8fd9\u4e9b\u662f\u5426\u4ee3\u8868\u6cc4\u6f0f\u3002\u6211\u731c\u4ed6\u4eec\u6ca1\u6709\u3002\u6b64 dllhost.exe \u526f\u672c\u6258\u7ba1 thumbcache.dll\u3002\u4e00\u4e9b\u5b9e\u9a8c\u8868\u660e\uff0c\u5982\u679c\u6211\u521b\u5efa\u65b0\u7684 .mp4 \u6587\u4ef6\uff0c\u90a3\u4e48\u5f53\u8d44\u6e90\u7ba1\u7406\u5668\u521b\u5efa\u7f29\u7565\u56fe\u65f6\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4f1a\u6cc4\u6f0f\u6bcf\u4e2a\u6587\u4ef6 12 \u4e2a\u4ee5\u4e0a\u7684 WaitCompletionPacket \u53e5\u67c4\u3002\u5f53\u6211\u6e05\u7406\u5047\u671f\u89c6\u9891\u65f6\uff0c\u8fd9\u5f88\u5bb9\u6613\u6cc4\u6f0f\u6210\u767e\u4e0a\u5343\u4e2a\u53e5\u67c4\u3002\u6211\u5728\u63a8\u7279\u4e0a\u63d0\u5230\u8fc7\u4e24\u6b21\u3002\u6211\u8fd8\u5728\u53cd\u9988\u4e2d\u5fc3\u62a5\u544a\u4e86\u5b83\uff08\u4ec5\u5bf9 Windows 10 \u4e0a\u7684\u975e\u516c\u53f8\u7528\u6237\u53ef\u89c1\uff09\u3002\u53ef\u4ee5\u5728\u6b64\u5904\u627e\u5230\u663e\u793a\u6211\u521b\u5efa 20 \u4e2a .mp4 \u6587\u4ef6\u5e76\u6cc4\u6f0f\u6570\u767e\u4e2a\u53e5\u67c4\u7684 ETW \u8ddf\u8e2a\u3002\u8fd9\u5e94\u8be5\u662f\u56fa\u5b9a\u7684\u3002\u6700\u540e\u4e00\u4e2a\u662f IntelTechnologyAccessService.exe\uff0c\u5b83\u4f1a\u6cc4\u6f0f\u4e8b\u4ef6\u53e5\u67c4\u3002\u6ca1\u6709\u7b26\u53f7\u6216\u4e0d\u77e5\u9053\u5b83\u7684\u4f5c\u7528\uff0c\u6211\u53ea\u80fd\u8bf4\u6cc4\u6f0f\u6765\u81ea\u4ed6\u4eec\u7684 core.dll\u3002\u6211\u5728\u63a8\u7279\u4e0a\u53d1\u5e03\u4e86\u5173\u4e8e\u6cc4\u6f0f\u7684\u6d88\u606f\uff0c\u5e76\u5f97\u5230\u4e86\u4e00\u4f4d\u60f3\u8981\u4fee\u590d\u6cc4\u6f0f\u7684\u82f1\u7279\u5c14\u5f00\u53d1\u4eba\u5458\u7684\u8fc5\u901f\u56de\u5e94\u3002\u6211\u5728\u7981\u7528\u79bb\u7ebf\u6a21\u5f0f\u548c\u56fa\u5b9a\u7248\u672c\u7684 Chrome\uff08\u91cd\u65b0\u542f\u7528\u79bb\u7ebf\u6a21\u5f0f\uff09\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4e86\u76f8\u540c\u7684\u538b\u529b\u6d4b\u8bd5\u3002\u8fd9\u6e05\u695a\u5730\u8868\u660e\u7981\u7528\u79bb\u7ebf\u6a21\u5f0f\u963b\u6b62\u4e86\u9519\u8bef\u7684\u51fa\u73b0\uff0c\u5e76\u4e14\u8bc1\u660e\u4e86\u4fee\u590d\u662f\u6709\u6548\u7684\u3002\u53e5\u67c4\u6cc4\u6f0f\u6d88\u5931\u4e86\uff0c\u76f8\u5173\u7684\u5185\u5b58\u6cc4\u6f0f\u4e5f\u6d88\u5931\u4e86\u3002\n\u5f53\u8fd0\u884c Chrome \u7684\u56fa\u5b9a\u7248\u672c\u65f6\uff0cWindows \u4efb\u52a1\u7ba1\u7406\u5668\u770b\u8d77\u6765\u66f4\u50cf\u8fd9\u6837\u3002 Chrome \u7684\u6d4f\u89c8\u5668\u548c GPU \u8fdb\u7a0b\uff08\u672a\u663e\u793a\uff09\u4ecd\u7136\u6709 1,000 \u591a\u4e2a\u53e5\u67c4\u6253\u5f00\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u4f46\u6e32\u67d3\u5668\u8fdb\u7a0b\u4f7f\u7528\u7684\u53e5\u67c4\u5f88\u5c11\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u90fd\u4e0d\u518d\u51fa\u73b0\u5728\u7ed3\u679c\u7684\u7b2c\u4e00\u9875\u4e0a\u2014\u2014\u95ee\u9898\u89e3\u51b3\u4e86\u3002 dllhost.exe \u7684\u6392\u540d\u4e0a\u5347\u4e86\uff0c\u56e0\u4e3a\u6211\u901a\u8fc7\u521b\u5efa 512 \u4e2a\u65b0\u7684 .mp4 \u6587\u4ef6\u5bf9\u5176\u8fdb\u884c\u4e86\u538b\u529b\u6d4b\u8bd5\uff0c\u5e76\u4e14\u8d44\u6e90\u7ba1\u7406\u5668\u51fa\u73b0\u4e86\uff0c\u56e0\u4e3a\u663e\u7136\u6211\u7684 .mp4 \u6d4b\u8bd5\u663e\u793a\u5176\u4e2d\u5b58\u5728\u4e8b\u4ef6\u53e5\u67c4\u6cc4\u6f0f\u3002\u53f9\u606f\u2026\u2026\u5904\u7406\u6cc4\u6f0f\u5e76\u4e0d\u662f\u6700\u7cdf\u7cd5\u7684\u4e8b\u60c5\u3002\u8fdb\u7a0b\u53e5\u67c4\u6cc4\u6f0f\u975e\u5e38\u6602\u8d35\uff0c\u4f46\u4e8b\u4ef6\u53e5\u67c4\u6cc4\u6f0f\u5219\u4e0d\u7136\u3002\u9664\u4e86\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u2014\u2014\u6bd4\u5982 Chrome \u7684\u2014\u2014\u53e5\u67c4\u6cc4\u6f0f\u53ef\u80fd\u4e0e\u5176\u4ed6\u6cc4\u6f0f\u76f8\u5173\uff0c\u6240\u4ee5\u5b83\u4eec\u901a\u5e38\u503c\u5f97\u8c03\u67e5\u3002\u6ce8\u610f\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u5c24\u5176\u662f\u4f60\u81ea\u5df1\u7684\u8fdb\u7a0b\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4ecd\u7136\u4e0d\u77e5\u9053\u5982\u4f55\u8c03\u67e5 GDI \u53e5\u67c4\u6cc4\u6f0f\u2014\u2014\u5982\u679c\u6709\u4eba\u77e5\u9053\uff0c\u8bf7\u544a\u8bc9\u6211\u3002\u60a8\u53ef\u4ee5\u5728 Chromium \u9519\u8bef\u4e2d\u9605\u8bfb\u957f\u8fbe\u6570\u6708\u7684\u8c03\u67e5\u2014\u2014\u5931\u8bef\u7b49\u7b49\u3002\u6b64\u6761\u76ee\u53d1\u8868\u5728\u9519\u8bef\u3001\u4ee3\u7801\u53ef\u9760\u6027\u3001\u8c03\u67e5\u62a5\u544a\u3001uiforetw\u3001xperf \u548c\u6807\u8bb0\u53e5\u67c4\u3001\u6cc4\u6f0f\u3002\u4e3a\u6c38\u4e45\u94fe\u63a5\u6dfb\u52a0\u4e66\u7b7e\u3002", "note_en": "Three years ago I found a  32 GB memory leak caused by  CcmExec.exe failing to close process handles. That bug is fixed, but ever since then I have had the  handles column in\u00a0 Windows Task Manager enabled, just in case I hit another handle leak.\n Because of this routine checking I noticed, in February of 2021, that one of Chrome\u2019s processes had more than 20,000  handles open!\n This Chrome bug is fixed now but I wanted to share how to investigate handle leaks because there are other leaky programs out there. I also wanted to share my process of learning.\n  A bit of investigation with  Chrome\u2019s Task manager showed that the process in question was the  renderer process for gmail, and a bit more looking around showed that most Chrome renderer processes had fewer than 1,000 kernel handles.\n 20,000 seemed anomalous and after monitoring for a few hours I could see that the handle count was going up indefinitely. Mercy sakes alive, looks like we\u2019ve got us a handle leak.\n  The first thing I wanted to know was what type of handles these were. Windows handles can refer to files, processes, threads, events, semaphores, and many other kernel objects. I turned to the sysinternals\u2019   handle tool to see which type it was, but it said there were only a few hundred handles open in that process. It turns out that  handle.exe defaults to only displaying information about file handles. To get full information you can pass -a to dump information about all handles, or -s to summarize by type. The -s option is most helpful for this investigation. Typical output looked for gmail like this (running it from an admin command prompt would have resolved the &lt;Unknown type&gt; handles):\n Handle type summary: \u00a0 &lt;Unknown type&gt;\u00a0 : 4 \u00a0 &lt;Unknown type&gt;\u00a0 : 77 \u00a0 &lt;Unknown type&gt;\u00a0 : 48 \u00a0 ALPC Port\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 1 \u00a0 Directory\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 2 \u00a0 Event\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 20858 \u00a0 File\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 147 \u00a0 IoCompletion\u00a0\u00a0\u00a0 : 4 \u00a0 IRTimer\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 6 \u00a0 Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 8 \u00a0 Semaphore\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 8 \u00a0 Thread\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 : 31 \u00a0 TpWorkerFactory : 3 \u00a0 WaitCompletionPacket: 10 Total handles: 21207\n So. Event handles it is. It could be worse. Leaked process handles keep around expensive kernel structures which seem to add up to about 64 KB per handle. Event handles, in comparison, are pretty cheap \u2013 perhaps sixteen bytes or so (it\u2019s hard to measure). It was possible that the impact of this leak was minuscule. But, Chrome uses  RAII objects to manage all of its handles so we shouldn\u2019t have leaks \u2013 I wanted to understand what was going wrong.\n After a bit of asking around I found that none of my coworkers knew how to investigate handle leaks, so I had to figure it out. I attached a debugger to the gmail process and tried setting a breakpoint on the functions that create events but I got too much noise. Hundreds of events were being created and more than 99% of them were being cleanly deleted. I need something better.\n  Some might say that am too obsessed with using  Event Tracing for Windows to try to solve all problems, but as long as it keeps working I\u2019m going to keep using it. I suspected that ETW might be able to track handle creation and destruction and find leaks, but I had no idea how.\n A bit of Google searching found  this article. It got me started, but it has a few flaws:\n The article shows dozens of flags being passed to xperf.exe, but no explanation of what they are The flags specified led to a very high data rate, which made long-running tracing impractical The post promised to explain how to analyze the data in \u201cthe next post\u201d, but there was no \u201cnext post\u201d and a  call for help led to nothing\n Flaws or not, this let me crack the case. I started by using it mostly as-is. I wrote a test program that leaked 10,000 handles and I recorded a trace to see if I could see the intentional leak. It worked.\n However it was recording data at many GB per hour. Because the handle leak was fairly slow \u2013 it took weeks to leak 20,000 handles \u2013 I needed a many-hour trace to be sure I could catch the leak. I focused on two strategies:\n    You can find more about what some of these mean by looking at the output of  xperf -providers but the short version is that the recommended command line doesn\u2019t just record information about handles, it also records information about every context switch and all disk I/O (see Latency), enables the sampling profiler (also in Latency), and so much more. My first step was to trim it down to just this:\n  PROC_THREAD+LOADER is required to make sense of any ETW trace, and OB_HANDLE+OB_OBJECT seemed to be the critical things for handle tracing. A Microsoft contact then told me that OB_OBJECT was not needed so I removed that. The recommended command also had six different parameters to the -stackwalk flag, when all I really need is the stacks for when handles are allocated. I deleted five of those and then added HandleDuplicate just in case.\n   You can see a more full-featured command line in the  batch file on github but this shows the minimal idea. It starts tracing, records enough information to attribute events to the right thread and module (PROC_THREAD+LOADER), records information on handle operations (OB_HANDLE) and records call stacks on handle creation and handle duplication. Perfect!\n  I then loaded the (still-too-large) traces into WPA and looked to see where all of the data was coming from. The processes that were generating the most events were  Task Manager and  Chrome Remote Desktop. The high amount of traffic meant that these two processes were creating and destroying a lot of handles. This was not normally a problem (they weren\u2019t leaking handles) but it was making my trace larger, so the solution was clear \u2013 shut them down while tracing. Closing  Task Manager was easy enough, but since I was doing this investigation from home on my workstation in the office it was less convenient to close  Chrome Remote Desktop. But, no worries. I made sure everything was running correctly and then disconnected (to reduce the amount of data being generated) and then reconnected twelve hours later. This sort of tactic \u2013 shutting down programs that are generating excessive data \u2013 is often useful with ETW because it generally records information about the entire system, including all running processes.\n  Now I had some large-but-manageable traces (~970 MB, compressed) and I could start the analysis. I loaded the trace into Windows Performance Analyzer and eventually found the handle tracking graph. It\u2019s in Graph Explorer, under Memory (???), Handles, Outstanding Count by Process. Perfect!\n Opening this gives a graph showing handle counts over time for every process. There\u2019s a lot of activity over twelve hours. Zooming in to a ten-minute time span shows a flurry of activity. Processes are created, allocate some handles, and then die, creating a view like a digital Monument Valley. Other processes allocate and free handles with no clear pattern, and others seem to increase their handle count indefinitely:\n  The graph was pretty, but I decided I wanted raw numbers so I looked at the table. The default view looked pretty damning for Chrome\u2019s browser process with almost 1.5 million handles allocated. But wait\u2026\n  The handle leak wasn\u2019t in the browser process, and it was nowhere near 1.5 million handles. Well, it turns out that the default view is misleading. While the graph/table are called \u201cOutstanding Count by Process\u201d and that is indeed what the graph shows, the  table actually shows  cumulative count by process. That is, the browser process allocated 1.5 million handles over twelve hours, but it freed pretty much all of them, so who cares?\n What I wanted to see was outstanding handles \u2013 allocated but not freed. The table can show that data, but it sure doesn\u2019t make it easy.\n In the  heap tracing tables there is a column labeled  Type. Now that is a uniquely poor choice for a column name, but it is a very important column. Crucially, in the context of the  Type column \u201cInside\u201d means inside the time range recorded by the trace and \u201cOutside\u201d means outside the time range recorded by the trace. The available types are:\n  AIFO are the interesting events because they were allocated while the trace was being recorded and then not freed before trace recording stopped. They  might have been freed a few seconds later, but if you see enough of them on the same call stack you get suspicious\u2026\n That\u2019s how heap tracing works. Handle tracing took that concept and changed it just enough to be confusing.\n They renamed the column from Type to Lifetime. Lifetime is definitely a better name, but there is inevitably some confusion that happens from having two names for the same concept They made the column off by default. This is consistent with heap tracing, which has the Type column off by default, but it is inexplicable. This is the single most important column in the table so I don\u2019t understand why it isn\u2019t front and center. In addition to having the column off by default they actually hide it! Normally you can right-click on any column header, select  More Columns\u2026, and see a list of columns that you can enable. Many users (me for a long time) probably assume that the list of columns in the menu is complete. It is not. For some columns \u2013 including the vitally important  Lifetime column \u2013 you have to invoke the  View Editor (Ctrl+E or click the gear box to the right of \u201c Outstanding Count by Process\u201d) and then drag the Lifetime column from the list of  Available Columns on the left to the list on the right. Sigh\u2026\n I reported these problems to the WPA lead and they agreed that improvements were needed. Now that  WPA (Preview) is available in the Microsoft store we should expect that fixes like this will ship faster than ever before.\n A final issue to be aware of with ETW\u2019s handle tracing is that it seems to have some accounting errors. It will report leaks that are impossible given the \u201chandle -s\u201d output, so be sure to cross-check your results before spending too much time.\n  With all of that learning and discovery behind me I arrived at this view. It showed 527 event handles leaked by the gmail process in twelve hours, with 510 of them all leaks on the same call stack, ending in the WaitableEvent constructor:\n    The event object was allocated by and stored in Chrome\u2019s  WaitableEvent class, managed by its ScopedHandle member variable. That meant that if we were leaking these handles we were also leaking the WaitableEvent objects. If we were leaking those then what else were we leaking?\n I used  heap snapshot tracing to monitor the gmail process. This was familiar territory for me so it went smoothly. I then looked for potential leaks with call stacks similar to the handle leak and found some. I then looked around for other potential leaks with counts that were similar and that looked plausibly related and I found a set that seemed related to leaks of IDBFactory and OperationsController objects.\n I used Chrome\u2019s developer tools to see if gmail was leaking IDB related objects. It was not, so I wasn\u2019t able to blame this on the gmail team.\n  Several people ended up contributing to the analysis. I understood how to interpret the traces and I could reproduce the leaks on custom-instrumented versions of Chrome, but I am terrible at JavaScript and I don\u2019t understand our IDB architecture. One of my coworkers understood the architecture of the leaking objects. This coworker realized that the leaked allocations were happening on service worker threads and were being leaked whenever service worker threads went away while an IndexedDB connection was open. It turns out this happens quite regularly on some websites, and Chrome was handling this poorly. That\u2019s the bug!\n Further investigation supported this theory \u2013 the increases in leaked object counts were correlated with service worker threads exiting. I then realized that the service workers were associated with Google Drive\u2019s offline mode. If I disabled offline mode then the leaks went away.\n It took months to understand the bug, but then a  fix was created fairly promptly (not by me \u2013 I still don\u2019t understand that part of the code) and landed in the Chromium repo a few days later.\n The fix landed in May  in M92 which started rolling out to regular users around July 21st 2021. If you don\u2019t have the fix already then you will soon.\n  Once the bug was understood I could do stress tests. Using a version of Chrome with the bug I left gmail, sheets, docs, and drive open simultaneously. All of these use offline mode so all of them leaked handles. My Chrome window looked like this:\n  After leaving buggy Chrome running like this for a few days Task Manager looked like this when sorted by handles:\n  Five of the top eleven processes are chrome.exe (four renderers plus the browser process). Once I updated my browser the four renderers no longer show up in the top list. But what about the other processes?\n WPA.exe is Windows Performance Analyzer \u2013 the tool I use to analyze the handle-leak traces. It leaves about 1,700 .symcache files open, and seems to have an Event handle leak, just like Chrome. I\u2019ve reported these issues to the developer and they are investigating. System has a mixture of Event handles, File handles, IoCompletion handles, Process handles, WaitCompletionPacket handles, and others. I don\u2019t know if these represent leaks. I\u2019m guessing they do not. This copy of dllhost.exe hosts thumbcache.dll. A bit of experimentation showed that if I create new .mp4 files then this process leaks 12+ WaitCompletionPacket handles per file when explorer creates the thumbnails. When I\u2019m cleaning up vacation videos this can easily leaks hundreds or thousands of handles. I  mentioned this on twitter,  twice. I also reported it on  Feedback Hub (only visible to non-corporate users on Windows 10). An ETW trace showing me creating 20 .mp4 files and leaking hundreds of handles can be  found here. This should be fixed. The last one is IntelTechnologyAccessService.exe, which leaks Event handles. Without symbols or any idea of what it does I can only tell that the leaks are from their core.dll. I\u00a0  tweeted about the leak and got a swift response from an Intel developer who wants to fix the leak.\n I did the same stress test both with offline mode disabled and with fixed versions of Chrome (with offline mode re-enabled). This made it clear that disabling offline mode stopped the bug from appearing, and it proved that the fix was working. The handle leaks were gone, as were the associated memory leaks.\n When running the fixed version of Chrome the Windows Task Manager looked more like this. Chrome\u2019s browser and GPU processes (not shown) still have more than 1,000 handles open, due to how they work, but the renderer processes are using few enough handles that none of them make it onto the first page of results anymore \u2013 problem solved. dllhost.exe has moved up the rankings because I stress-tested it by creating 512 new .mp4 files, and explorer showed up because apparently my .mp4 testing revealed an event handle leak in it. Sigh\u2026\n  Handle leaks are not the worst thing ever. Process handle leaks are quite expensive, but event handle leaks are not. Except that in some cases \u2013 like Chrome\u2019s \u2013 the handle leak may correlate with other leaks, so they are usually worth investigating.\n Pay attention to Task Manager, especially for your own processes, so that you can avoid  this problem.\n I still don\u2019t know how to investigate  GDI handle leaks \u2013 if somebody knows then please let me know.\n You can read the multi-month investigation \u2013 missteps and all \u2013 in the  Chromium bug.\n    This entry was posted in  Bugs,  Code Reliability,  Investigative Reporting,  uiforetw,  xperf and tagged  handles,  leaks. Bookmark the  permalink.", "posttime": "2021-07-26 10:41:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u53e5\u67c4", "title": "\u5728 Chromium \u7b49\u4e2d\u67e5\u627e Windows HANDLE \u6cc4\u6f0f", "title_en": "Finding Windows HANDLE leaks, in Chromium and others", "transed": 1, "url": "https://randomascii.wordpress.com/2021/07/25/finding-windows-handle-leaks-in-chromium-and-others/", "via": "", "real_tags": ["windows", "\u53e5\u67c4"]}, {"category": "", "categoryclass": "", "imagename": "99a61ac6f3d338bfc2332313bc4e1cda.jpg", "infoid": 1069757, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e5\u672c\u6a2a\u6ee8\uff0c2021 \u5e74 7 \u6708 16 \u65e5\u2014\u2014Socionext Inc. \u4e0e\u9ad8\u80fd\u52a0\u901f\u5668\u7814\u7a76\u7ec4\u7ec7\u6750\u6599\u7ed3\u6784\u79d1\u5b66\u7814\u7a76\u6240\u3001\u4eac\u90fd\u5927\u5b66\u7efc\u5408\u8f90\u5c04\u4e0e\u6838\u79d1\u5b66\u7814\u7a76\u6240\u548c\u5927\u962a\u4fe1\u606f\u79d1\u5b66\u4e0e\u6280\u672f\u7814\u7a76\u751f\u9662\u7684\u7814\u7a76\u4eba\u5458\u5408\u4f5c\u5927\u5b66\uff0c\u5e76\u9996\u6b21\u6210\u529f\u8bc1\u660e\u4e86\u4ecb\u5b50\u548c\u4e2d\u5b50\u5f15\u8d77\u7684\u534a\u5bfc\u4f53\u5668\u4ef6\u7684\u8f6f\u8bef\u5dee\u5177\u6709\u4e0d\u540c\u7684\u7279\u6027\u3002\u8be5\u7814\u7a76\u5c0f\u7ec4\u5728\u6750\u6599\u548c\u751f\u547d\u79d1\u5b66\u8bbe\u65bd (MLF) \u7684\u03bc \u5b50\u79d1\u5b66\u8bbe\u65bd (MUSE)\u3001\u65e5\u672c\u8d28\u5b50\u52a0\u901f\u5668\u7814\u7a76\u4e2d\u5fc3 (J-PARC)\u3001\u4eac\u90fd\u5927\u5b66\u7814\u7a76\u4e2d\u5fc3\u7684\u70ed\u4e2d\u5b50\u675f\u8fdb\u884c\u4e86\u7528\u8d1f\u548c\u6b63\u03bc\u5b50\u675f\u7167\u5c04\u534a\u5bfc\u4f53\u5668\u4ef6\u7684\u5b9e\u9a8c\u53cd\u5e94\u5806 (KUR) \u548c\u5927\u962a\u5927\u5b66\u6838\u7269\u7406\u7814\u7a76\u4e2d\u5fc3 (RCNP) \u7684\u9ad8\u80fd\u4e2d\u5b50\u675f\u3002\u8bfe\u9898\u7ec4\u901a\u8fc7\u4f7f\u7528\u591a\u79cd\u7c7b\u578b\u7684\u91cf\u5b50\u675f\uff0c\u5b9e\u73b0\u4e86\u5bf9\u5b87\u5b99\u5c04\u7ebf\u03bc\u5b50\u548c\u4e2d\u5b50\u5bf9\u73af\u5883\u8f90\u5c04\u5f71\u54cd\u7684\u7efc\u5408\u6d4b\u91cf\u3002\u4ee4\u4eba\u9f13\u821e\u7684\u7ed3\u679c\u6709\u671b\u63a8\u52a8\u73af\u5883\u8f90\u5c04\u5f15\u8d77\u7684\u8f6f\u9519\u8bef\u7684\u6709\u6548\u8bc4\u4f30\u65b9\u6cd5\u548c\u5bf9\u7b56\u7684\u53d1\u5c55\u3002\u9884\u8ba1\u7ed3\u679c\u8fd8\u5c06\u5bfc\u81f4\u521b\u5efa\u9ad8\u5ea6\u53ef\u9760\u7684\u534a\u5bfc\u4f53\u8bbe\u5907\uff0c\u4ee5\u652f\u6301\u672a\u6765\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u7814\u7a76\u5de5\u4f5c\u6210\u679c\u5df2\u4e8e2021\u5e745\u670821\u65e5\u5728\u7ebf\u53d1\u8868\u5728IEEE Transactions on Nuclear Science\u4e0a\u3002\u90e8\u5206\u7814\u7a76\u5de5\u4f5c\u5f97\u5230\u4e86\u201c\u4f01\u4e1a\u3001\u7814\u7a76\u6240\u548c\u5b66\u672f\u754c\u5f00\u653e\u521b\u65b0\u5e73\u53f0\u8ba1\u5212\uff08OPERA\uff09\u201d\u7684\u652f\u6301\u3002\u65e5\u672c\u79d1\u5b66\u6280\u672f\u632f\u5174\u673a\u6784\uff08JST\uff09\u3002\u80cc\u666f\u6280\u672f\u968f\u7740\u534a\u5bfc\u4f53\u5668\u4ef6\u7684\u96c6\u6210\u5ea6\u8d8a\u6765\u8d8a\u9ad8\uff0c\u5176\u5de5\u4f5c\u7535\u538b\u8d8a\u6765\u8d8a\u4f4e\uff0c\u5b83\u4eec\u66f4\u5bb9\u6613\u51fa\u73b0\u8f6f\u9519\u8bef\uff0c\u5f53\u7535\u5b50\u4fe1\u606f\u88ab\u8f90\u5c04\u610f\u5916\u6539\u53d8\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u8f6f\u9519\u8bef\u3002\u6709\u4eba\u62c5\u5fc3\u73af\u5883\u8f90\u5c04\u5f15\u8d77\u7684\u8f6f\u9519\u8bef\u4f1a\u5bfc\u81f4\u66f4\u4e25\u91cd\u7684\u95ee\u9898\u3002\u4ee5\u524d\uff0c\u73af\u5883\u8f90\u5c04\u4e2d\u7684\u5b87\u5b99\u5c04\u7ebf\u4e2d\u5b50\u88ab\u8ba4\u4e3a\u662f\u5f15\u8d77\u8f6f\u8bef\u5dee\u95ee\u9898\u7684\u4e3b\u8981\u6765\u6e90\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5bf9\u4e8e\u9ad8\u5ea6\u96c6\u6210\u4e14\u4f7f\u7528\u8f83\u4f4e\u7535\u538b\u7684\u5148\u8fdb\u534a\u5bfc\u4f53\u5668\u4ef6\uff0c\u7531\u540c\u6837\u6e90\u81ea\u5b87\u5b99\u5c04\u7ebf\u7684 \u03bc \u5b50\u5f15\u8d77\u7684\u8f6f\u9519\u8bef\u5df2\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\u3002\u5728\u843d\u5165\u5730\u7403\u7684\u5b87\u5b99\u5c04\u7ebf\u4e2d\uff0c\u4ecb\u5b50\u7ea6\u5360\u6240\u6709\u7c92\u5b50\u7684\u56db\u5206\u4e4b\u4e09\uff0c\u6709\u4eba\u6307\u51fa\u5b83\u4eec\u53ef\u80fd\u9020\u6210\u6bd4\u4e2d\u5b50\u66f4\u5927\u7684\u95ee\u9898\u3002\u4f46\u662f\uff0c\u5173\u4e8e\u03bc\u4ecb\u5b50\u5f15\u8d77\u7684\u8f6f\u8bef\u5dee\u7684\u62a5\u9053\u5f88\u5c11\uff0c\u4e2d\u5b50\u5f15\u8d77\u7684\u8f6f\u8bef\u5dee\u548c\u03bc\u4ecb\u5b50\u5f15\u8d77\u7684\u8f6f\u8bef\u5dee\u4e4b\u95f4\u7684\u533a\u522b\u8fd8\u4e0d\u662f\u5f88\u6e05\u695a\u3002\u7ed3\u679c \u672c\u7814\u7a76\u4e2d\uff0c\u4e3a\u4e86\u89e3\u5b87\u5b99\u5c04\u7ebf\u03bc\u5b50\u548c\u4e2d\u5b50\u5f15\u8d77\u7684\u8f6f\u8bef\u5dee\u5dee\u5f02\uff0c\u8bfe\u9898\u7ec4\u901a\u8fc7\u7528\u03bc\u5b50\u548c\u4e2d\u5b50\u7167\u5c04\u534a\u5bfc\u4f53\u5668\u4ef6\u8fdb\u884c\u4e86\u5bf9\u6bd4\u8bc4\u4ef7\u3002\u672c\u5b9e\u9a8c\u4e2d\u4f7f\u7528\u4e86\u91c7\u7528 20 \u7eb3\u7c73 CMOS \u5de5\u827a\u6280\u672f\u5236\u9020\u7684 SRAM \u7535\u8def\u3002\u6bcf\u675f\u91cf\u5b50\u675f\u7167\u5c04SRAM\uff0c\u5206\u6790\u6bcf\u4e00\u4e2a\u7c92\u5b50\u7684\u8f6f\u9519\u8bef\u53d1\u751f\u7387\u548c\u8d8b\u52bf\u3002\u53d1\u73b0\u03bc\u5b50\u548c\u4e2d\u5b50\u5728\u9519\u8bef\u7387\u7684\u7535\u6e90\u7535\u538b\u4f9d\u8d56\u6027\u3001\u591a\u4f4d\u9519\u8bef\u7684\u6bd4\u7387\u4ee5\u53ca\u591a\u4f4d\u9519\u8bef\u6a21\u5f0f\u7684\u7279\u5f81\u65b9\u9762\u5b58\u5728\u660e\u663e\u5dee\u5f02\u3002\u8be5\u7ed3\u679c\u5728\u4e16\u754c\u4e0a\u9996\u6b21\u83b7\u5f97\u3002\n\u672a\u6765 \u8fd9\u4e9b\u7ed3\u679c\u5c06\u5bfc\u81f4\u6280\u672f\u7684\u53d1\u5c55\uff0c\u4ee5\u6709\u6548\u89e3\u51b3\u5305\u62ec \u03bc \u5b50\u5728\u5185\u7684\u73af\u5883\u8f90\u5c04\u5f15\u8d77\u7684\u95ee\u9898\u3002\u672c\u7814\u7a76\u53d1\u73b0\u7684\u4ecb\u5b50\u548c\u4e2d\u5b50\u4e4b\u95f4\u6548\u5e94\u7684\u5dee\u5f02\u5c06\u6709\u52a9\u4e8e\u5efa\u7acb\u9632\u6b62\u8f6f\u9519\u8bef\u7684\u6700\u4f73\u8bbe\u8ba1\u65b9\u6cd5\u3002\u672c\u7814\u7a76\u7684\u7ed3\u679c\u4e5f\u6709\u671b\u901a\u8fc7\u6570\u503c\u6a21\u62df\u4fc3\u8fdb\u8bc4\u4f30\u65b9\u6cd5\u7684\u53d1\u5c55\u3002\u672a\u6765\uff0c\u57fa\u7840\u8bbe\u65bd\u7684\u53ef\u9760\u6027\u5c06\u53d6\u51b3\u4e8e\u5927\u91cf\u7684\u534a\u5bfc\u4f53\u5668\u4ef6\uff0c\u9884\u8ba1\u73af\u5883\u8f90\u5c04\u5f15\u8d77\u7684\u8f6f\u9519\u8bef\u7684\u8bc4\u4f30\u548c\u5bf9\u7b56\u5c06\u53d8\u5f97\u66f4\u52a0\u91cd\u8981\u3002\u6b63\u5982\u672c\u7814\u7a76\u4e2d\u6240\u505a\u7684\u90a3\u6837\uff0c\u4f7f\u7528\u91cf\u5b50\u675f\u8fdb\u884c\u8f6f\u9519\u8bef\u8bc4\u4f30\u7684\u5f00\u53d1\u6709\u671b\u5bfc\u81f4\u521b\u5efa\u66f4\u5b89\u5168\u3001\u66f4\u53ef\u9760\u548c\u66f4\u53ef\u9760\u7684\u534a\u5bfc\u4f53\u8bbe\u5907\u3002\u6587\u7ae0\u4fe1\u606f\u4e3b\u9898\uff1a20 \u7eb3\u7c73 SRAM \u4e2d\u7684\u4ecb\u5b50\u8bf1\u5bfc\u5355\u4e8b\u4ef6\u7ffb\u8f6c\uff1a\u4e0e\u4e2d\u5b50\u548c Alpha \u7c92\u5b50\u7684\u6bd4\u8f83\u8868\u5f81\u4f5c\u8005\uff1a Takashi Kato 1\u3001Motonobu Tampo 2\u3001Soshi Takeshita 2\u3001Hiroki Tanaka 3\u3001Hideya Matsuyama 1\u3001Masanori Hashimoto 4\u3001 Yasuhiro Miyake 2 1 Socionext Inc. \u53ef\u9760\u6027\u5de5\u7a0b\u90e8 2 Muon \u79d1\u5b66\u5b9e\u9a8c\u5ba4\uff0c\u6750\u6599\u7ed3\u6784\u79d1\u5b66\u7814\u7a76\u6240\uff0c\u9ad8\u80fd\u52a0\u901f\u5668\u7814\u7a76\u673a\u6784/ J-PARC 3 \u4eac\u90fd\u5927\u5b66\u7efc\u5408\u8f90\u5c04\u4e0e\u6838\u79d1\u5b66\u7814\u7a76\u6240 4 \u5927\u962a\u5927\u5b66\u4fe1\u606f\u79d1\u5b66\u4e0e\u6280\u672f\u7814\u7a76\u751f\u9662 \u6240\u6709\u6b64\u5904\u63d0\u53ca\u7684\u516c\u53f8\u6216\u4ea7\u54c1\u540d\u79f0\u662f\u5176\u5404\u81ea\u6240\u6709\u8005\u7684\u5546\u6807\u6216\u6ce8\u518c\u5546\u6807\u3002\u672c\u65b0\u95fb\u7a3f\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u5728\u53d1\u5e03\u65f6\u51c6\u786e\u65e0\u8bef\uff0c\u5982\u6709\u66f4\u6539\uff0c\u6055\u4e0d\u53e6\u884c\u901a\u77e5\u3002", "note_en": "Yokohama, Japan, July 16, 2021 --Socionext Inc. has collaborated with researchers from Institute of Materials Structure Science at High Energy Accelerator Research Organization, Institute for Integrated Radiation and Nuclear Science at Kyoto University and Graduate School of Information Science and Technology at Osaka University, and has successfully demonstrated, for the first time, that the soft errors of semiconductor devices induced by muons and neutrons have different characteristics. The research group conducted experiments to irradiate semiconductor devices with negative and positive muon beams at Muon Science Facility (MUSE) of Materials and Life Science Facility (MLF), Japan Proton Accelerator Research Complex (J-PARC), thermal neutron beams at Kyoto University Research Reactor (KUR), and high-energy neutron beams at Research Center for Nuclear Physics (RCNP) of Osaka University, respectively. By using multiple types of quantum beams, the research group has achieved a comprehensive measurement of the effects of cosmic-ray muons and neutrons in environmental radiation. The encouraging results are expected to drive the development of effective evaluation method and countermeasures for soft errors caused by environmental radiation. The results are also expected to lead to the creation of highly reliable semiconductor devices that will support the future infrastructure.\n The results of the research work have been published online in IEEE Transactions on Nuclear Science on May 21, 2021.\n Part of this research work was supported by the &#34;Program on Open Innovation Platform with Enterprises, Research Institutes and Academia (OPERA)&#34; of the Japan Science and Technology Agency (JST).\n Background As semiconductor devices become more highly integrated and their operation voltage becomes lower, they are more prone to soft errors, which occur when electronic information is unexpectedly altered by radiation. There are concerns that soft errors by environmental radiation will cause more serious problems.\n Previously, cosmic-ray neutrons in environmental radiation were considered as the main source of the problems to cause soft errors. On the other hand, for advanced semiconductor devices, which are highly integrated and use lower voltage, soft errors caused by muons, which are also derived from cosmic rays, have become a concern. Muons account for about three-quarters of all particles in cosmic rays that fall to the Earth, and it has been pointed out that they may cause a bigger problem than neutrons. However, there have been very few reports of soft errors caused by muons, and the difference between soft errors caused by neutrons and by muons has not been well understood.\n Results In this study, to understand the difference in soft errors caused by cosmic-ray muons and neutrons, the research group performed comparative evaluations by irradiating semiconductor devices with muons and neutrons. An SRAM circuit fabricated with 20-nm CMOS process technology has been used in this experiment. The SRAM was irradiated with each quantum beam, and the rate and the trend of soft error occurrence were analyzed by each of the particles.\n It was found that there are clear differences between muons and neutrons in terms of supply voltage dependency of the error rate, the ratio of multiple-bit errors, as well as the characteristics of the multiple-bit error patterns. The result has been obtained for the first time in the world.\n  Future The results will lead to a development of technologies to effectively solve the problems caused by environmental radiation which includes muons. The difference of effects between muons and neutrons, which have been discovered in this study, will help establish an optimal design method to prevent soft errors. The results of this study are also expected to contribute to the evolution of evaluation method by numerical simulations.\n In the future, the reliability of the infrastructure will depend on a vast number of semiconductor devices, and it is expected that evaluation and countermeasures against soft errors caused by environmental radiation will become even more important. Development of soft error evaluation using quantum beams, as was done in this study, is expected to lead to the creation of safer, securer, and more reliable semiconductor devices.\n Article Information Subject:\u00a0 Muon-Induced Single-Event Upsets in 20-nm SRAMs: Comparative Characterization with Neutrons and Alpha Particles Authors: Takashi Kato 1, Motonobu Tampo 2, Soshi Takeshita 2, Hiroki Tanaka 3, Hideya Matsuyama 1, Masanori Hashimoto 4, Yasuhiro Miyake 2  1Reliability Engineering Department, Socionext Inc.  2Muon Science Laboratory, Institute of Materials Structure Science, High Energy Accelerator Research Organization/ J-PARC  3Institute for Integrated Radiation and Nuclear Science, Kyoto University  4Graduate School of Information Science and Technology, Osaka University\n          All company or product names mentioned herein are trademarks or registered trademarks of their respective owners. Information provided in this press release is accurate at time of publication and is subject to change without advance notice.", "posttime": "2021-07-26 10:41:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ecb\u5b50,semiconductor,\u7814\u7a76", "title": "\u5b87\u5b99\u7ebf\u4ecb\u5b50\u548c\u4e2d\u5b50\u5f15\u8d77\u7684\u534a\u5bfc\u4f53\u8f6f\u8bef\u5dee\u5dee\u5f02", "title_en": "Differences in Semiconductor Soft Errors Caused by Cosmic-Ray Muons and Neutrons", "transed": 1, "url": "http://www.socionextus.com/pressreleases/socionext-and-partners-clarify-differences-between-semiconductor-soft-errors-caused-by-cosmic-ray-muons-and-neutrons/", "via": "", "real_tags": ["\u4ecb\u5b50", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "51a81b07663f1889989df2f903325846.jpeg", "infoid": 1069756, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5355\u51fb\u201c\u6ce8\u518c\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81ea Insider \u7684\u8425\u9500\u7535\u5b50\u90ae\u4ef6\u4ee5\u53ca\u5176\u4ed6\u5408\u4f5c\u4f19\u4f34\u7684\u4f18\u60e0\uff0c\u5e76\u63a5\u53d7\u6211\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u3002\u53c2\u8bae\u5458\u4f0a\u4e3d\u838e\u767d\u00b7\u6c83\u4f26 (Elizabeth Warren) \u5468\u65e5\u5728\u63a8\u7279\u4e0a\u8c08\u5230\u4e86\u6770\u592b\u00b7\u8d1d\u4f50\u65af (Jeff Bezos) \u6700\u8fd1\u7684\u592a\u7a7a\u98de\u884c\uff0c\u79f0\u5982\u679c\u4ed6\u6709\u80fd\u529b\u53bb\u592a\u7a7a\uff0c\u4ed6\u5c31\u53ef\u4ee5\u652f\u4ed8\u66f4\u591a\u7684\u7a0e\u3002\u6c83\u4f26\u5728\u63a8\u7279\u4e0a\u5199\u9053\uff1a\u201c\u5730\u7403\u4e0a\u6700\u5bcc\u6709\u7684\u4eba\u53ef\u4ee5\u5c06\u81ea\u5df1\u9001\u5165\u592a\u7a7a\uff0c\u800c\u8d85\u8fc7\u4e00\u534a\u7684\u56fd\u5bb6\u9760\u85aa\u6c34\u8fc7\u65e5\u5b50\uff0c\u8fd1 4300 \u4e07\u4eba\u80cc\u8d1f\u7740\u5b66\u751f\u503a\u52a1\uff0c\u80b2\u513f\u8d39\u7528\u8feb\u4f7f\u6570\u767e\u4e07\u4eba\u5931\u4e1a\u3002\u201d \u201c\u4ed6\u6709\u80fd\u529b\u6295\u7403\uff0c\u6240\u4ee5\u5176\u4ed6\u4eba\u90fd\u6709\u673a\u4f1a\u3002\u201d\u636e ProPublica 6 \u6708\u62a5\u9053\uff0c\u4e9a\u9a6c\u900a\u521b\u59cb\u4eba\u517c\u524d\u9996\u5e2d\u6267\u884c\u5b98\u6770\u592b\u00b7\u8d1d\u7d22\u65af (Jeff Bezos) \u5728 2006 \u5e74\u81f3 2018 \u5e74\u95f4\u81f3\u5c11\u4e24\u5e74\u5185\u7f34\u7eb3\u4e86 0 \u7f8e\u5143\u7684\u8054\u90a6\u6240\u5f97\u7a0e\u3002\u91cd\u78c5\u62a5\u9053\u8fd8\u900f\u9732\uff0c\u7279\u65af\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u57c3\u9686\u9a6c\u65af\u514b\u5728 2018 \u5e74\u4e5f\u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\u3002 Insider \u7684 Lynnley Browning \u5728 2019 \u5e74\u62a5\u9053\u79f0\uff0c\u4e9a\u9a6c\u900a\u5728 2017 \u5e74\u548c 2018 \u5e74\u4e5f\u7f34\u7eb3\u4e86 0 \u7f8e\u5143\u7684\u6240\u5f97\u7a0e\u3002\u8d1d\u7d22\u65af\u76ee\u524d\u88ab\u798f\u5e03\u65af\u5217\u4e3a\u5168\u7403\u9996\u5bcc\uff0c\u5176\u4e2d\u51c0\u8d44\u4ea7\u4e3a 2092 \u4ebf\u7f8e\u5143\u3002\u8fd9\u4f4d\u4ebf\u4e07\u5bcc\u7fc1\u7684\u592a\u7a7a\u63a2\u7d22\u516c\u53f8 Blue Origin \u5468\u4e8c\u6210\u529f\u5b8c\u6210\u4e86\u9996\u6b21\u8f7d\u4eba\u592a\u7a7a\u98de\u884c\uff0c\u5c06\u8d1d\u7d22\u65af\u548c\u5176\u4ed6\u4e09\u4eba\u9001\u5165\u592a\u7a7a\uff0c\u5e76\u5728\u5931\u91cd\u72b6\u6001\u4e0b\u8fdb\u884c\u4e86\u5927\u7ea6\u4e09\u5206\u949f\u7684\u98de\u884c\u3002\n\u6c83\u4f26\u4e0a\u5468\u8fd8\u5728\u98de\u884c\u9014\u4e2d\u5bf9\u8d1d\u7d22\u65af\u8fdb\u884c\u4e86\u731b\u70c8\u62a8\u51fb\uff0c\u4ed6\u5728\u63a8\u7279\u4e0a\u5199\u9053\uff1a\u201c\u6770\u592b\u8d1d\u7d22\u65af\u5fd8\u8bb0\u611f\u8c22\u6240\u6709\u8f9b\u52e4\u5de5\u4f5c\u7684\u7f8e\u56fd\u4eba\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u7f34\u7eb3\u4e86\u7a0e\u6b3e\u4ee5\u7ef4\u6301\u8fd9\u4e2a\u56fd\u5bb6\u7684\u8fd0\u8f6c\uff0c\u800c\u4ed6\u548c\u4e9a\u9a6c\u900a\u5374\u6ca1\u6709\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\u3002\u201d\u6ce8\u518c\u63a5\u6536\u6765\u81ea Insider \u7684\u901a\u77e5\uff01\u968f\u65f6\u4e86\u89e3\u60a8\u60f3\u77e5\u9053\u7684\u5185\u5bb9\u3002\u5f62\u6210\u201cX\u201d\u7684\u4e24\u6761\u200b\u200b\u4ea4\u53c9\u7ebf\u3002\u5b83\u6307\u793a\u4e00\u79cd\u5173\u95ed\u4ea4\u4e92\u6216\u5173\u95ed\u901a\u77e5\u7684\u65b9\u5f0f\u3002", "note_en": "By clicking \u2018Sign up\u2019, you agree to receive marketing emails from Insider as well as other partner offers and accept our  Terms of Service and  Privacy Policy.\n    Sen. Elizabeth Warren tweeted Sunday about Jeff Bezos&#39;s recent space flight, saying that if he can afford to go to space he can afford to pay more in taxes.\n &#34;The richest guy on Earth can launch himself into space while over half the country lives paycheck to paycheck, nearly 43 million are saddled with student debt, and child care costs force millions out of work,&#34; Warren tweeted. &#34;He can afford to pitch in so everyone else gets a chance.&#34;\n Jeff Bezos, the founder and former CEO of Amazon, paid $0 in federal income taxes for at least two years between 2006 and 2018,  ProPublica reported in June. The  bombshell report also revealed Tesla CEO Elon Musk did the same thing in 2018.\n      Insider&#39;s Lynnley Browning  reported in 2019 that Amazon also paid $0 in income taxes in 2017 and 2018.\n   Bezos is currently listed by  Forbes as the richest person in the world, with a net worth of $209.2 billion.\n The billionaire&#39;s space exploration company Blue Origin  successfully completed its first passenger space flight on Tuesday, launching Bezos and three others into space for about three minutes of weightlessness.\n Warren had also  taken a jab at Bezos over the flight last week, writing on Twitter: &#34;Jeff Bezos forgot to thank all the hardworking Americans who actually paid taxes to keep this country running while he and Amazon paid nothing.&#34;\n    Sign up for notifications from Insider! Stay up to date with what you want to know.\n            Two crossed lines that form an &#39;X&#39;. It indicates a way to close an interaction, or dismiss a notification.", "posttime": "2021-07-26 10:03:18", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u592a\u7a7a,space", "title": "\u4f0a\u4e3d\u838e\u767d\u6c83\u4f26\uff1a\u5982\u679c\u6770\u592b\u8d1d\u7d22\u65af\u53ef\u4ee5\u4e0a\u592a\u7a7a\uff0c\u4ed6\u53ef\u4ee5\u7f34\u7eb3\u66f4\u591a\u7684\u7a0e\u3002 \u201c\u5730\u7403\u4e0a\u6700\u5bcc\u6709\u7684\u4eba\u53ef\u4ee5\u5c06\u81ea\u5df1\u9001\u5165\u592a\u7a7a\uff0c\u800c\u8d85\u8fc7\u4e00\u534a\u7684\u56fd\u5bb6\u5219\u9760\u85aa\u6c34\u8fc7\u65e5\u5b50\u201d", "title_en": "Elizabeth Warren: If Jeff Bezos Can Go to Space, He Can Pay More Taxes. 'The richest guy on Earth can launch himself into space while over half the country lives paycheck to paycheck'", "transed": 1, "url": "https://www.businessinsider.com/elizabeth-warren-jeff-bezos-can-go-to-space-while-paycheck-2021-7", "via": "", "real_tags": ["\u592a\u7a7a", "space"]}, {"category": "", "categoryclass": "", "imagename": "513657c8e762c7c2ce15fd4835c1a623.jpg", "infoid": 1069755, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Apple \u7684\u79fb\u52a8\u7f51\u7edc\u6d4f\u89c8\u5668\u662f\u4eca\u5e74 iOS 15 \u6d4b\u8bd5\u7248\u7684\u4e3b\u8981\u907f\u96f7\u9488\uff0c\u5b83\u662f\u5426\u4f1a\u5728\u79cb\u5b63\u771f\u6b63\u63a8\u51fa\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u591a\u5e74\u524d\uff0cAndroid \u7248 Chrome \u5c1d\u8bd5\u5728 iOS 15 \u91cd\u65b0\u8bbe\u8ba1\u4e0a\u4f7f\u7528\u7c7b\u4f3c\u7684 Safari\uff0c\u8be5\u9879\u76ee\u7684\u8bbe\u8ba1\u5e08\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u89c1\u89e3\uff0c\u8bf4\u660e Google \u653e\u5f03\u5b83\u7684\u539f\u56e0\u3002 iOS 15 \u4e0a\u7684 Safari \u5177\u6709 Apple \u6240\u8c13\u7684\u201c\u65b0\u6807\u7b7e\u680f\u8bbe\u8ba1\u201d\uff0c\u5176\u4e2d\u5730\u5740\u5b57\u6bb5\u548c\u5176\u4ed6\u5173\u952e\u64cd\u4f5c\u653e\u7f6e\u5728\u5c4f\u5e55\u5e95\u90e8\u7684\u6761\u5e26\u4e2d\uff0c\u5c31\u5728\u7cfb\u7edf\u624b\u52bf\u680f\u7684\u4e0a\u65b9\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u201c\u6700\u5927\u5316\u4e86\u60a8\u7684\u5c4f\u5e55\u7a7a\u95f4\uff0c\u5e76\u5728\u60a8\u6eda\u52a8\u548c\u63a2\u7d22\u65f6\u4e0d\u53d7\u5e72\u6270\u3002\u201d\u5b83\u4f4d\u4e8e\u4e00\u4e2a\u975e\u5e38\u5bb9\u6613\u5230\u8fbe\u7684\u4f4d\u7f6e\uff0c\u5141\u8bb8\u60a8\u901a\u8fc7\u6ed1\u52a8\u5728\u6253\u5f00\u7684\u6807\u7b7e\u4e4b\u95f4\u8df3\u8f6c\u3002\u6700\u7ec8\uff0cApple \u76f8\u4fe1\u5b83\u662f\u201c\u4e3a\u6211\u4eec\u4eca\u5929\u7684\u6d4f\u89c8\u65b9\u5f0f\u91cd\u65b0\u8bbe\u8ba1\u7684\u201d\uff0c\u4f46\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6d4b\u8bd5\u7248\u4e2d\u4e00\u76f4\u5728\u5bf9\u5176\u8fdb\u884c\u8c03\u6574\u3002\u8c37\u6b4c\u5728 2016 \u5e74\u5c1d\u8bd5\u901a\u8fc7\u540d\u4e3a\u201cChrome Home\u201d\u7684\u52aa\u529b\u8fdb\u884c\u8fd9\u6837\u7684\u91cd\u65b0\u8bbe\u8ba1\u3002 \u514b\u91cc\u65af\u674e - \u8c37\u6b4c\u7684\u524d\u5458\u5de5\u4ea4\u4e92\u8bbe\u8ba1\u5e08\u5728\u201c\u539f\u59cb\u6982\u5ff5\u548c\u5ba3\u4f20\u201d\u80cc\u540e - \u5728\u4ed6\u7684\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u8c08\u5230\u4e86\u8fd9\u4e2a\u9879\u76ee\uff0c\u79f0\u5176\u4e3a\u201c\u96c4\u5fc3\u52c3\u52c3\u7684\u201d\u91cd\u65b0\u8bbe\u8ba1\u4e86\u79fb\u52a8 Chrome \u7684\u4e3b\u7528\u6237\u754c\u9762\u3002\u201d\u5728\u9ad8\u5c42\u6b21\u4e0a\uff1a\u5b83\u5c06 Chrome \u7684\u5de5\u5177\u680f\u5e26\u5230\u5c4f\u5e55\u5e95\u90e8\uff0c\u5e76\u5c06 [\u5b83] \u53d8\u6210\u4e00\u4e2a\u53ef\u4ee5\u6ed1\u52a8\u4ee5\u663e\u793a\u5176\u4ed6\u63a7\u4ef6\u7684\u7aa5\u89c6\u9762\u677f\u3002\u591a\u529f\u80fd\u6846\u79fb\u52a8\u5230\u4e0b\u65b9\uff0c\u65c1\u8fb9\u662f\u9009\u9879\u5361\u5207\u6362\u5668\u548c\u6ea2\u51fa\u83dc\u5355\u3002\u5411\u4e0a\u6ed1\u52a8\uff0c\u6b63\u5982\u5730\u5740\u5b57\u6bb5\u4e0a\u65b9\u7684\u62c9\u7247\u6240\u6697\u793a\u7684\u90a3\u6837\uff0c\u5411\u7528\u6237\u663e\u793a\u5177\u6709\u56db\u4e2a\u90e8\u5206\u7684\u4f20\u7edf\u5e95\u90e8\u680f\u3002\u7b2c\u4e00\u4e2a\u7528\u4e8e\u53d1\u73b0\u548c\u6700\u8fd1\u7684\u7ad9\u70b9\u3001\u4e0b\u8f7d\u3001\u4e66\u7b7e\u548c\u5386\u53f2\u8bb0\u5f55\u3002\n\u4e0e\u5f53\u4eca iOS 15 \u4e0a\u7684 Safari \u4e00\u6837\uff0c\u8fd9\u79cd Chrome \u8bbe\u8ba1\u57fa\u4e8e\u4e0d\u65ad\u589e\u957f\u7684\u5c4f\u5e55\u5c3a\u5bf8\u4ee5\u53ca\u521b\u5efa\u201c\u4ecd\u7136\u53ef\u4ee5\u7528\u4e00\u53ea\u624b\u4f7f\u7528\u201d\u7684\u754c\u9762\u7684\u613f\u671b\u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f Chrome \u6709\u5f88\u591a\u529f\u80fd\u53ea\u662f\u653e\u5728\u201c\u4e09\u70b9\u201d\u6ea2\u51fa\u83dc\u5355\u4e2d\uff0c\u56e0\u4e3a\u6ca1\u6709\u5176\u4ed6\u5730\u65b9\u53ef\u4ee5\u663e\u793a\u5b83\u4eec\uff0c\u4ece\u800c\u635f\u5bb3\u4e86\u53ef\u53d1\u73b0\u6027\u3002 Lee \u8bf4 Home \u201c\u5728\u5185\u90e8\u53d7\u5230\u4e86\u5173\u6ce8\uff0c\u6700\u7ec8\u6210\u4e3a Chrome \u7ec4\u7ec7\u7684\u4f18\u5148\u4e8b\u9879\u3002\u201d\u5728\u539f\u578b\u8bbe\u8ba1\u3001\u73b0\u573a Beta \u5b9e\u9a8c/\u6807\u5fd7\u548c\u6d4b\u8bd5\u4e4b\u540e\uff0c\u8be5\u56e2\u961f\u201c\u542c\u5230\u4e86\u5404\u79cd\u5404\u6837\u7684\u53cd\u5e94\u201d\u3002 \u201c\u4e3b\u6d41\u7528\u6237\u201d\u8868\u793a\u91cd\u65b0\u8bbe\u8ba1\u201c\u8ba9\u4eba\u8ff7\u5931\u65b9\u5411\u201d\uff0c\u5c3d\u7ba1\u201c\u8be5\u529f\u80fd\u5728\u6280\u672f\u793e\u533a\u4e2d\u83b7\u5f97\u4e86\u72c2\u70ed\u8ffd\u968f\u8005\u201d\u3002 Chrome \u4e3a\u5168\u7403\u6570\u5341\u4ebf\u5177\u6709\u4e0d\u540c\u6280\u672f\u7d20\u517b\u7684\u7528\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u8d8a\u6765\u8d8a\u76f8\u4fe1\uff0c\u63a8\u51fa Chrome Home \u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u4e3a\u6211\u4eec\u6240\u6709\u7684\u7528\u6237\u670d\u52a1\u3002\u56e0\u6b64\uff0c\u5c31\u50cf\u6211\u63d0\u51fa\u7684\u6700\u521d\u6982\u5ff5\u4e00\u6837[\u5f3a\u70c8]\uff0c\u6211\u4e3b\u5f20\u6211\u4eec\u505c\u6b62\u53d1\u5e03\u2014\u2014\u8fd9\u8fdb\u884c\u4e86\u4e0d\u5c0f\u7684\u8fa9\u8bba\u3002\u8c37\u6b4c\u548c\u8fd9\u4f4d\u8bbe\u8ba1\u5e08\u7684\u5916\u5356\u662f\u5173\u4e8e\u201c\u5728\u5927\u89c4\u6a21\u4ea7\u54c1\u4e2d\u8fdb\u884c\u521b\u65b0\u6240\u9700\u7684\u610f\u56fe\u201d\u3002 2018 \u5e74 2 \u6708\uff0c\u8c37\u6b4c\u8868\u793a\u5c06\u201c\u7ed3\u675f\u5f53\u524d\u7684 Chrome Home \u5b9e\u9a8c\u201d\u3002\u4eca\u5929\u7684\u5e16\u5b50\u7ec8\u4e8e\u89e3\u91ca\u4e86\u539f\u56e0\u3002\u7136\u800c\uff0c\u201cChrome Duplex\u201d\u2014\u2014\u540e\u6765\u66f4\u540d\u4e3a\u201cDuet\u201d\u2014\u2014\u7684\u5de5\u4f5c\u51e0\u4e4e\u7acb\u5373\u5f00\u59cb\u3002\u8fd9\u4e2a\u201c\u62c6\u5206\u5de5\u5177\u680f\u201d\u53d8\u4f53\u770b\u5230\u591a\u529f\u80fd\u6846\u4fdd\u7559\u5728\u5c4f\u5e55\u9876\u90e8\uff0c\u4f46\u770b\u5230\u8c37\u6b4c\u5c06\u6807\u7b7e\u5207\u6362\u5668\u3001\u6ea2\u51fa\u83dc\u5355\u548c\u5176\u4ed6\u5404\u79cd\u5feb\u6377\u65b9\u5f0f\u5e26\u5230\u5e95\u90e8\u7684\u6761\u4e0a\u3002\u8be5\u9879\u76ee\u4e5f\u5728 2020 \u5e74\u5e74\u4e2d\u88ab\u653e\u5f03\uff0c\u8fd9\u8868\u660e\u8c37\u6b4c\u4ecd\u7136\u4e0d\u9002\u5e94\u5927\u5e45\u6539\u53d8 Chrome \u7684\u7528\u6237\u754c\u9762\u3002\n\u60a8\u6b63\u5728\u9605\u8bfb 9to5Google \u2014 \u65e5\u590d\u4e00\u65e5\u5730\u53d1\u5e03\u6709\u5173 Google \u53ca\u5176\u5468\u8fb9\u751f\u6001\u7cfb\u7edf\u65b0\u95fb\u7684\u4e13\u5bb6\u3002\u8bf7\u52a1\u5fc5\u67e5\u770b\u6211\u4eec\u7684\u4e3b\u9875\u4ee5\u83b7\u53d6\u6240\u6709\u6700\u65b0\u6d88\u606f\uff0c\u5e76\u5728 Twitter\u3001Facebook \u548c LinkedIn \u4e0a\u5173\u6ce8 9to5Google \u4ee5\u4e86\u89e3\u6700\u65b0\u6d88\u606f\u3002\u4e0d\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\uff1f\u67e5\u770b\u6211\u4eec\u7684\u72ec\u5bb6\u6545\u4e8b\u3001\u8bc4\u8bba\u3001\u64cd\u4f5c\u65b9\u6cd5\uff0c\u5e76\u8ba2\u9605\u6211\u4eec\u7684 YouTube \u9891\u9053", "note_en": "Apple\u2019s mobile web browser is the main lightning rod of this year\u2019s iOS 15 beta period and it remains to be seen whether it will actually launch in the fall. Chrome for Android tried a similar Safari on iOS 15 redesign years ago, and a designer on that project provided some interesting insight into why Google abandoned it.\n  Safari on iOS 15 has what Apple calls a \u201cnew tab bar design\u201d where the address field and other key actions are placed in a strip at the bottom of the screen, just above the system gesture bar.\n The company says it \u201cmaximizes your screen space and stays out of the way as you scroll and explore.\u201d It\u2019s in a very reachable position and allows you to jump between open tabs by swiping.\n Ultimately, Apple believes it is \u201creimagined for the way we browse today,\u201d but has been  tweaking it over the past few betas.\n   Google attempted such a redesign with an effort called \u201cChrome Home\u201d in 2016. Chris Lee \u2014 a former staff interaction designer at Google behind the \u201coriginal concept and pitch\u201d \u2014  talked about the project on his personal site, describing it as an \u201cambitious redesign of mobile Chrome\u2019s main UI.\u201d At a high level:\n It brought Chrome\u2019s toolbar to the bottom of the screen and turned [it] into a peeking panel that could be swiped to expose additional controls.\n The Omnibox is moved below with the tab switcher and overflow menu right beside it. A swipe up, as hinted by a pull tab above the address field, shows users a traditional bottom bar with four sections. The first is for Discover and recent sites, Downloads, Bookmarks, and History.\n   Like Safari on iOS 15 today, this Chrome design was based on the growing screen sizes and the desire to create an interface that \u201cwould still be usable with one hand.\u201d Another reason was how Chrome has a lot of features that are just placed in the \u201cthree dot\u201d overflow menu because there\u2019s nowhere else to surface them, thus hurting discoverability.\n Lee says Home \u201ccaught traction internally, eventually becoming a Chrome org priority.\u201d After prototyping, live beta experiments/flags, and testing, the team \u201cheard a mixture of reactions.\u201d\n \u201cMainstream users\u201d said the redesign \u201cfelt disorienting,\u201d though the \u201cfeature gained a cult following among the tech community.\u201d\n Chrome serves billions of users around the globe with varying tech literacy. I became increasingly convinced that launching Chrome Home would not serve all our users well.\n So just [as strongly] as I had pitched the original concept, I advocated for us to stop the launch \u2013 which took not a small amount of debate.\n Google and this designer\u2019s takeaway was about the \u201cintentionality needed to innovate within a product of massive scale.\u201d In  February 2018, Google said it was \u201cending the current Chrome Home experiment.\u201d Today\u2019s post finally provides an explanation why.\n However, work on \u201cChrome Duplex\u201d \u2014  later renamed \u201cDuet\u201d \u2014 started almost immediately. This \u201c split toolbar\u201d variant saw the Omnibox remain at the top of the screen, but saw Google bring the tab switcher, overflow menu, and various other shortcuts to a strip at the bottom. This project was  also abandoned by mid-2020 in a sign that Google was still not comfortable with drastically changing Chrome\u2019s UI.\n  You\u2019re reading 9to5Google \u2014 experts who break news about Google and its surrounding ecosystem, day after day. Be sure to check out  our homepage for all the latest news, and follow 9to5Google on  Twitter,  Facebook, and  LinkedIn to stay in the loop. Don\u2019t know where to start? Check out our  exclusive stories,  reviews,  how-tos, and  subscribe to our YouTube channel", "posttime": "2021-07-26 09:54:48", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "chrome,google,ios,\u8c37\u6b4c,\u8bbe\u8ba1", "title": "\u524d\u8c37\u6b4c\u5458\u5de5\u8bb2\u8ff0\u4e86\u8c37\u6b4c\u5982\u4f55\u653e\u5f03\u5728 Android \u4e0a\u91cd\u65b0\u8bbe\u8ba1 Chrome \u7684\u5c1d\u8bd5\uff0c\u8fd9\u7c7b\u4f3c\u4e8e iOS 15 \u7684 Safari\uff0c\u5e95\u90e8\u6709 URL \u680f", "title_en": "Ex-Google employee recounts how Google abandoned a redesign attempt of Chrome on Android, that was similar to iOS 15's Safari, with the URL bar at the bottom", "transed": 1, "url": "https://9to5google.com/2021/07/25/google-chrome-safari-ios-15/", "via": "", "real_tags": ["chrome", "google", "ios", "\u8c37\u6b4c", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "2fc5a4fa0ae24f12ac9a09ef338e0b2c.png", "infoid": 1069753, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u5e74\u591a\u4ee5\u524d\uff0c\u5728\u6211\u4eec\u4e24\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e4b\u95f4\u7684\u5b89\u5168\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0cSSD \u88ab\u76d7\u3002\u6211\u4eec\u7acb\u5373\u63d0\u51fa\u6295\u8bc9\u5e76\u8b66\u544a\u53ef\u80fd\u53d7\u5f71\u54cd\u7684\u5ba2\u6237\u3002\u51fa\u4e4e\u610f\u6599\u7684\u662f\uff0c\u6700\u8fd1\uff0c\u4e00\u4f4d YouTuber \u51c6\u5907\u4e86\u4e00\u4e2a\u5173\u4e8e\u6570\u636e\u64e6\u9664\u53ca\u5176\u683c\u5f0f\u5316\u540e\u6301\u4e45\u6027\u7684\u4e3b\u9898\uff0c\u5728\u5206\u7c7b\u7f51\u7ad9\u4e0a\u8d2d\u4e70\u4e86\u8fd9\u6b3e SSD \u9a71\u52a8\u5668\u3002\u7531\u4e8e\u6211\u4eec\u5ba2\u6237\u6570\u636e\u7684\u5b89\u5168\u662f\u91cd\u4e2d\u4e4b\u91cd\uff0c\u6211\u4eec\u5f88\u5feb\u4e0e\u8fd9\u4f4d YouTuber \u5408\u4f5c\u6062\u590d\u4e86 SSD\uff0c\u4ed6\u4ee5\u4e66\u9762\u5f62\u5f0f\u5411\u6211\u4eec\u4fdd\u8bc1\u4e0d\u518d\u6709\u526f\u672c\u3002\u8fd9\u4e00\u4e8b\u4ef6\u4e5f\u4f7f\u5f53\u524d\u8b66\u65b9\u7684\u8c03\u67e5\u53d6\u5f97\u4e86\u91cd\u5927\u8fdb\u5c55\uff0c\u8fd9\u4e5f\u4f7f\u6211\u4eec\u65e0\u6cd5\u5c31\u6b64\u95ee\u9898\u8fdb\u884c\u8fdb\u4e00\u6b65\u6c9f\u901a\u3002\u9488\u5bf9\u6b64\u4e8b\u4ef6\uff0c\u6211\u4eec\u5bf9\u5a92\u4f53\u4f20\u8f93\u6d41\u7a0b\u8fdb\u884c\u4e86\u5168\u9762\u5ba1\u6838\u3002\u5bf9\u8fd9\u79cd\u8fd0\u8f93\u7684\u52a0\u5f3a\u63a7\u5236\u5df2\u7ecf\u5230\u4f4d\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u53ef\u4ee5\u5728\u914d\u5907 GPS \u8ddf\u8e2a\u5668\u7684\u52a0\u56fa\u7bb1\u4e2d\u786e\u4fdd\u5b58\u50a8\u8bbe\u5907\u7684\u8fd0\u8f93\u3002\u6211\u4eec\u5728\u591a\u4e2a\u6807\u51c6\uff08ISO 27001\u3001HDS\uff09\u7684\u6846\u67b6\u5185\u5bf9\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u5b9a\u671f\u5ba1\u8ba1\uff0c\u5e76\u7ee7\u7eed\u671d\u8fd9\u4e2a\u65b9\u5411\u6295\u8d44\u3002\u4e3a\u4e86\u5c3d\u53ef\u80fd\u6709\u6548\u5730\u4fdd\u62a4\u60a8\u7684\u6570\u636e\uff0cScaleway \u4f1a\u968f\u7740\u5e02\u573a\u6807\u51c6\u4e0d\u65ad\u53d1\u5c55\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6b64\u4e8b\u4ef6\u5e76\u672a\u635f\u5bb3\u6211\u4eec\u5ba2\u6237\u7684\u4e1a\u52a1\u6d3b\u52a8\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u7f51\u7edc\u72af\u7f6a\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u7978\u5bb3\uff0c\u6211\u4eec\u90fd\u5e94\u8be5\u4ee5\u4e13\u4e1a\u7cbe\u795e\u548c\u8c28\u614e\u6001\u5ea6\u4e0e\u4e4b\u6297\u4e89\u3002\u8be5\u65b0\u95fb\u7ecf\u5e38\u5f15\u53d1\u4e3b\u8981\u53c2\u4e0e\u8005\u4e4b\u95f4\u53d1\u751f\u7684\u91cd\u5927\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5371\u53ca\u6570\u767e\u4e07\u4eba\u7684\u4e2a\u4eba\u6570\u636e\uff0c\u6709\u65f6\u751a\u81f3\u662f\u6570\u5341\u4ebf\u4eba\u7684\u4e2a\u4eba\u6570\u636e\uff0c\u6216\u7834\u574f\u5546\u4e1a\u6d3b\u52a8\u3002\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u8fd9\u4e00\u4e8b\u4ef6\u63ed\u793a\u4e86 Scaleway \u56e2\u961f\u5728\u5b89\u5168\u65b9\u9762\u6240\u505a\u7684\u5de5\u4f5c\u3002\u5728\u95f4\u63a5\u53c2\u4e0e\u7684 300 \u591a\u540d\u5458\u5de5\u4e2d\uff0c\u6709 12 \u540d\u5458\u5de5\u4e0d\u77e5\u75b2\u5026\u5730\u5de5\u4f5c\uff0c\u4ee5\u62b5\u5fa1\u65e5\u5e38\u88ad\u51fb\uff0c\u4e3b\u8981\u6765\u81ea\u5916\u90e8\u548c\u57df\u5916\u3002\u6700\u5e94\u8be5\u5411\u8fd9\u4e9b\u5408\u4f5c\u8005\u81f4\u656c\uff0c\u56e0\u4e3a\u5728\u6bcf\u4e00\u4ef6\u4e8b\u7684\u80cc\u540e\uff0c\u90fd\u6709\u6210\u5343\u4e0a\u4e07\u7684\u4eba\u56e0\u4e3a\u4ed6\u4eec\u7684\u8f9b\u52e4\u5de5\u4f5c\u800c\u6ca1\u6709\u53d1\u751f\u3002", "note_en": "Il y a plus d\u2019un an, nous avons fait l\u2019objet du vol d\u2019un SSD lors d\u2019un transport s\u00e9curis\u00e9 entre deux de nos datacenters. Nous avons sans d\u00e9lai port\u00e9 plainte et pr\u00e9venu la client\u00e8le potentiellement impact\u00e9e.  Rebondissement insoup\u00e7onn\u00e9, tr\u00e8s r\u00e9cemment, un Youtubeur, pr\u00e9parant un sujet sur l\u2019effacement des donn\u00e9es et de leur persistance apr\u00e8s un formatage, a achet\u00e9 sur un site de petites annonces ce disque SSD.  Puisque la s\u00e9curit\u00e9 des donn\u00e9es de nos clients est une priorit\u00e9 absolue, nous avons rapidement collabor\u00e9 avec ce Youtubeur pour r\u00e9cup\u00e9rer le SSD et il nous a assur\u00e9 par \u00e9crit qu\u2019il n\u2019existait plus de copie.  Cet \u00e9v\u00e9nement a \u00e9galement permis une avanc\u00e9e significative de l\u2019enqu\u00eate de police en cours, qui par ailleurs, nous emp\u00eache de pouvoir communiquer davantage \u00e0 ce sujet.  En r\u00e9ponse \u00e0 cet incident, nous avons effectu\u00e9 un audit complet de nos processus de transport de m\u00e9dias. Un contr\u00f4le renforc\u00e9 de ces transports a \u00e9t\u00e9 mis en place. Par exemple, le transport de mat\u00e9riel de stockage est dor\u00e9navant assur\u00e9 dans des mallettes durcies \u00e9quip\u00e9es de traceurs GPS.  Nous effectuons des audits r\u00e9guliers de nos infrastructures dans le cadre de plusieurs normes (ISO 27001, HDS) et continuons \u00e0 investir dans ce sens. Pour prot\u00e9ger vos donn\u00e9es le plus efficacement possible, Scaleway \u00e9volue en permanence avec les standards du march\u00e9.  Fort heureusement, cet incident n\u2019a pas endommag\u00e9 l\u2019activit\u00e9 commerciale de nos clients. En revanche, la cybercriminalit\u00e9 est un r\u00e9el fl\u00e9au que nous nous devons tous de combattre, avec professionnalisme et discr\u00e9tion. L\u2019actualit\u00e9 \u00e9voque r\u00e9guli\u00e8rement des incidents majeurs chez des grands acteurs qui compromettent les donn\u00e9es personnelles de millions, parfois de milliards de particuliers, ou alors an\u00e9antissent des activit\u00e9s commerciales.  Enfin et surtout, cet incident permet de mettre en lumi\u00e8re le travail qu\u2019effectuent les \u00e9quipes de Scaleway au niveau de la s\u00e9curit\u00e9. Parmi plus de 300 collaborateurs indirectement impliqu\u00e9s, une douzaine travaillent sans rel\u00e2che pour repousser les attaques quotidiennes, majoritairement de l\u2019ext\u00e9rieur et d\u2019origines extra-territoriales. Ce sont ces collaborateurs qu\u2019il convient avant toute chose de saluer, car derri\u00e8re chaque incident se cachent des milliers d\u2019autres qui ne surviennent pas gr\u00e2ce \u00e0 leur travail acharn\u00e9.", "posttime": "2021-07-26 09:54:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f20\u8f93,incident,\u6570\u636e", "title": "Scaleway\uff1a\u4e8b\u4ef6 SSD \u5728\u6570\u636e\u4e2d\u5fc3\u4e4b\u95f4\u7684\u5b89\u5168\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u88ab\u76d7", "title_en": "Scaleway: Incident SSD was stolen during a secure transport between datacenters", "transed": 1, "url": "https://blog.scaleway.com/incident-securitaire-video-youtube/", "via": "", "real_tags": ["\u4f20\u8f93", "incident", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "c51bc6b2582198fb3edc198c7747f4b5.jpg", "infoid": 1069752, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u90a3\u91cc\uff01\u6211\u8bf4\u8fc7\uff0c\u6211\u8ba4\u4e3a\u756a\u8304\u5de5\u4f5c\u6cd5\u5f88\u70c2\u3002\u5b83\u8ba9\u5b66\u4e60\u611f\u89c9\u50cf\u662f\u4e00\u4ef6\u82e6\u5dee\u4e8b\uff0c\u5e76\u6d88\u9664\u4e86\u6211\u4eec\u53ef\u4ee5\u7ed9\u6211\u4eec\u7684\u5927\u8111\u505a\u4efb\u4f55\u4efb\u52a1\u7684\u6700\u5927\u52a8\u529b\u2014\u2014\u8fdb\u5165\u2026\u2026", "note_en": "There! I said it, I think Pomodoro s*cks. It makes studying feel like a chore and takes out the biggest incentive we can give our brain with any task - enter...", "posttime": "2021-07-26 09:53:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u756a\u8304,pomodoro,\u611f\u89c9", "title": "\u756a\u8304\u949f\u5f88\u70c2\u3002\u8bd5\u8bd5 Flowtime", "title_en": "Pomodoro Sucks. Try Flowtime", "transed": 1, "url": "https://www.youtube.com/watch?v=NgnZ_4iwExU", "via": "", "real_tags": ["\u756a\u8304", "pomodoro", "\u611f\u89c9"]}, {"category": "", "categoryclass": "", "imagename": "2a1de059d6212cfbb608c9cd2830b5e7.jpg", "infoid": 1069751, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Olumide Soyombo \u662f\u5c3c\u65e5\u5229\u4e9a\u79d1\u6280\u521d\u521b\u516c\u53f8\u548c\u6574\u4e2a\u975e\u6d32\u77e5\u540d\u7684\u6d3b\u8dc3\u5929\u4f7f\u6295\u8d44\u4eba\u4e4b\u4e00\u3002\u81ea 2014 \u5e74\u5f00\u59cb\u5929\u4f7f\u6295\u8d44\u4ee5\u6765\uff0cSoyombo \u5df2\u7ecf\u6295\u8d44\u4e86 33 \u5bb6\u521d\u521b\u516c\u53f8\uff0c\u5305\u62ec Stripe \u65d7\u4e0b\u7684 Paystack\u3001PiggyVest \u548c TeamApt\u3002\u4eca\u5929\uff0c\u6295\u8d44\u8005\u5ba3\u5e03\u63a8\u51fa\u4ed6\u4e0e [...] \u5171\u540c\u521b\u7acb\u7684\u6cdb\u975e\u98ce\u9669\u6295\u8d44\u516c\u53f8 Voltron Capital\u3002", "note_en": "Olumide Soyombo is one of the well-known active angel investors in Nigeria tech startups and Africa at large. Since he began angel investing in 2014, Soyombo has invested in 33 startups, including Stripe-owned Paystack, PiggyVest, and TeamApt. Today, the investor is announcing the launch of Voltron Capital, a Pan-African venture capital firm he co-founded with [\u2026]", "posttime": "2021-07-26 09:15:35", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u975e\u6d32,\u5929\u4f7f,high", "title": "\u5c3c\u65e5\u5229\u4e9a\u4e00\u4f4d\u5907\u53d7\u77a9\u76ee\u7684\u5929\u4f7f\u6295\u8d44\u4eba\u6b63\u5728\u4e3a\u975e\u6d32\u521d\u521b\u516c\u53f8\u8bbe\u7acb\u57fa\u91d1", "title_en": "\n\t\t\t\tOne of Nigeria\u2019s high profile angel investors is launching a fund for African startups\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/07/26/one-of-nigerias-high-profile-angel-investors-is-launching-a-fund-for-african-startups/", "via": "", "real_tags": ["\u975e\u6d32", "\u5929\u4f7f", "high"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069750, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6f2b\u6e38\u82f1\u56fd\u7684\u5c71\u533a\u4e00\u76f4\u662f\u6211\u751f\u6d3b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u4f60\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\uff0c\u5728\u6211\u5f00\u59cb\u957f\u9014\u8dcb\u6d89\u4e4b\u524d\uff0c\u6211\u559c\u6b22\u7c97\u7565\u5730\u77e5\u9053\u6211\u8ba9\u81ea\u5df1\u8fdb\u53bb\u505a\u4ec0\u4e48\u3002\u5176\u4e2d\u4e00\u90e8\u5206\u662f\u4f30\u8ba1\u6211\u5c06\u8d70\u591a\u8fdc\u3002\u51e0\u5341\u5e74\u524d\uff0c\u6211\u7684\u540c\u5b66\u517c\u767b\u5c71\u670b\u53cb\u5927\u536b\u544a\u8bc9\u6211\u4e00\u79cd\u5feb\u901f\u800c\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u4f30\u7b97\u6b65\u884c\u7684\u957f\u5ea6\u3002\u5b83\u4f7f\u7528\u5370\u5728\u82f1\u56fd\u5c71\u5730\u6b65\u884c\u8005\u4f7f\u7528\u7684\u519b\u68b0\u6d4b\u91cf\u5730\u56fe\u4e0a\u7684\u5e73\u65b9\u516c\u91cc\u7f51\u683c\u3002\u8981\u4f30\u8ba1\u6b65\u884c\u7684\u957f\u5ea6\uff0c\u8bf7\u8ba1\u7b97\u8def\u7ebf\u7a7f\u8fc7\u7684\u7f51\u683c\u7ebf\u7684\u6570\u91cf\uff0c\u7136\u540e\u9664\u4ee5 2\u3002\u8fd9\u4f7f\u60a8\u53ef\u4ee5\u4f30\u7b97\u6b65\u884c\u7684\u957f\u5ea6\uff08\u4ee5\u82f1\u91cc\u4e3a\u5355\u4f4d\uff09\u3002\u662f\u7684\uff0c\u82f1\u91cc\uff0c\u5373\u4f7f\u7f51\u683c\u7ebf\u4ee5\u5343\u7c73\u4e3a\u95f4\u9694\u3002\u5728\u53f3\u4fa7\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u865a\u6784\u7684\u793a\u4f8b\u3002\u8be5\u8def\u7ebf\u8de8\u8d8a 22 \u6761\u7f51\u683c\u7ebf\uff0c\u56e0\u6b64\u6211\u4eec\u4f30\u8ba1\u5176\u957f\u5ea6\u4e3a 11 \u82f1\u91cc\u3002\u8fd9\u4e2a\u89c4\u5219\u5b9e\u9645\u4e0a\u6709\u7528\u5417\uff1f\u663e\u7136\uff0c\u6b65\u884c\u65f6\u95f4\u8d8a\u957f\uff0c\u8def\u7ebf\u53ef\u80fd\u7a7f\u8fc7\u7684\u7f51\u683c\u7ebf\u5c31\u8d8a\u591a\uff0c\u56e0\u6b64\u8ba1\u7b97\u7f51\u683c\u7ebf\u80af\u5b9a\u4f1a\u7ed9\u6211\u4eec\u63d0\u4f9b\u6b65\u884c\u65f6\u95f4\u7684\u67d0\u79cd\u5ea6\u91cf\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u63aa\u65bd\u6709\u591a\u597d\uff0c\u4e3a\u4ec0\u4e48\u5f53\u7f51\u683c\u7ebf\u76f8\u8ddd\u4e00\u516c\u91cc\u65f6\u6211\u4eec\u4f1a\u5f97\u5230\u4ee5\u82f1\u91cc\u4e3a\u5355\u4f4d\u7684\u4f30\u8ba1\uff1f\u6211\u8c03\u67e5\u4e86\u6240\u6d89\u53ca\u7684\u6570\u5b66\uff0c\u8fd9\u91cc\u662f\u5934\u6761\u65b0\u95fb\u3002\u5b83\u4eec\u9002\u7528\u4e8e\u5178\u578b\u6446\u52a8\u7684\u6b65\u884c\uff1b\u8fd9\u6761\u89c4\u5219\u5bf9\u4e8e\u575a\u5b9a\u4e0d\u79fb\u5730\u9075\u5faa\u4e00\u4e2a\u7f57\u76d8\u65b9\u4f4d\u7684\u6b65\u884c\u6765\u8bf4\u662f\u4e0d\u53ef\u9760\u7684\u3002\u5e73\u5747\u800c\u8a00\uff0c\u4f30\u8ba1\u8ddd\u79bb\u63a5\u8fd1\u5b9e\u9645\u8ddd\u79bb\uff1a\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u8be5\u89c4\u5219\u9ad8\u4f30\u4e86\u6b65\u884c\u8ddd\u79bb 2.4%\u3002\n\u5f53\u7136\uff0c\u6bcf\u6b21\u8d70\u8def\u90fd\u6709\u4e00\u4e9b\u968f\u673a\u53d8\u5316\u3002\u5bf9\u4e8e\u5927\u7ea6 10 \u82f1\u91cc\u7684\u6b65\u884c\uff0c\u5927\u7ea6\u4e09\u5206\u4e4b\u4e8c\u7684\u65f6\u95f4\u6b65\u884c\u7684\u4f30\u8ba1\u957f\u5ea6\u5c06\u5728\u5b9e\u9645\u8ddd\u79bb\u7684 7% \u4ee5\u5185\u3002 2.4% \u7684\u957f\u671f\u9ad8\u4f30\u662f\u5f88\u5c0f\u7684\uff1a\u5728 10 \u82f1\u91cc\u7684\u6b65\u884c\u4e2d\uff0c\u5b83\u4ec5\u76f8\u5f53\u4e8e\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\u3002\u53ef\u53d8\u6027\u66f4\u4e25\u91cd\uff1a\u5927\u7ea6\u4e09\u5206\u4e4b\u4e00\u7684\u65f6\u95f4\u4f30\u8ba1\u4f1a\u8d85\u8fc7 7%\u3002\u4f46\u662f\u5176\u4ed6\u4e0d\u53ef\u4f30\u91cf\u7684\u56e0\u7d20\uff08\u4f8b\u5982\u5730\u9762\u7684\u6027\u8d28\u6216\u8ff7\u8def\uff09\u5bf9\u5b8c\u6210\u6b65\u884c\u6240\u9700\u7684\u7cbe\u529b\u6216\u65f6\u95f4\u7684\u5f71\u54cd\u4f1a\u6bd4\u8fd9\u66f4\u5927\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u8fd9\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5982\u6b64\u5feb\u901f\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u89c4\u5219\uff0c\u8fd9\u6761\u89c4\u5219\u5bf9\u6211\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u4e86\u3002\u8fd9\u4e5f\u4e00\u6837\uff0c\u56e0\u4e3a\u6211\u5728\u8fc7\u53bb 35 \u5e74\u91cc\u6beb\u65e0\u7591\u95ee\u5730\u4f7f\u7528\u5b83\u3002 George-Louis Leclerc, Comte de Buffon, (1707-1788) \u662f\u4e00\u4f4d\u6cd5\u56fd\u77e5\u8bc6\u5206\u5b50\uff0c\u5bf9\u5c71\u5730\u5f92\u6b65\u6ca1\u6709\u4efb\u4f55\u5174\u8da3\u3002\u4f46\u4ed6\u786e\u5b9e\u8003\u8651\u4e86\u4ee5\u4e0b\u95ee\u9898\uff0c\u5373\u5e03\u51af\u7684\u9488\uff1a\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u7531\u5e73\u884c\u6728\u6761\u5236\u6210\u7684\u5730\u677f\uff0c\u6bcf\u6761\u6728\u6761\u7684\u5bbd\u5ea6\u76f8\u540c\uff0c\u6211\u4eec\u5c06\u4e00\u6839\u9488\u653e\u5728\u5730\u677f\u4e0a\u3002\u9488\u7a7f\u8fc7\u4e24\u6761\u5e26\u4e4b\u95f4\u7684\u4e00\u6761\u7ebf\u7684\u6982\u7387\u662f\u591a\u5c11\uff1f\u8ba9\u6211\u4eec\u7a0d\u5fae\u91cd\u65b0\u63d0\u51fa\u8fd9\u4e2a\u95ee\u9898\u5e76\u95ee\uff1a\u5982\u679c\u7ebf\u6761\u76f8\u8ddd 1 \u4e2a\u5355\u4f4d\uff0c\u5e76\u4e14\u6211\u4eec\u591a\u6b21\u653e\u4e0b\u9488\uff0c\u90a3\u4e48\u88ab\u653e\u4e0b\u7684\u9488\u7a7f\u8fc7\u7684\u5e73\u5747\u7ebf\u6570\u662f\u591a\u5c11\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5176\u4e2d l \u662f\u9488\u7684\u957f\u5ea6\u3002\u73b0\u5728\u6dfb\u52a0\u53e6\u4e00\u7ec4\u76f4\u89d2\u7ebf\uff08\u597d\u50cf\u5730\u677f\u662f\u7531\u65b9\u5f62\u5757\u800c\u4e0d\u662f\u6761\u5e26\u5236\u6210\u7684\uff09\u3002\u843d\u9488\u7a7f\u8fc7\u7684\u5e73\u5747\u7ebf\u6570\u52a0\u500d\u4e3a\n\u4f60\u80fd\u770b\u51fa\u4e0e\u8ddd\u79bb\u4f30\u8ba1\u89c4\u5219\u7684\u8054\u7cfb\u5417\uff1f\u5730\u677f\u4e0a\u7684\u88c2\u7f1d\u53d8\u6210\u4e86\u7f51\u683c\u7ebf\uff0c\u9488\u53d8\u6210\u4e86\u8d70\u9053\u7684\u4e00\u6bb5\u3002\u6b65\u884c\u7684\u76f4\u7ebf\u6bb5\u5e73\u5747\u6bcf\u516c\u91cc\u957f\u5ea6\u5c06\u7a7f\u8fc7\u7f51\u683c\u7ebf\u3002\u73b0\u5728\u4e00\u82f1\u91cc\u662f 1.609 \u516c\u91cc\uff0c\u6240\u4ee5\u6b65\u884c\u7684\u4e00\u6bb5\u5e73\u5747\u6bcf\u82f1\u91cc\u5c06\u7a7f\u8fc7\u7f51\u683c\u7ebf\uff0c\u975e\u5e38\u63a5\u8fd1\u6bcf\u82f1\u91cc 2 \u6761\u7f51\u683c\u7ebf\uff0c\u6b63\u5982\u6211\u4eec\u7684\u89c4\u5219\u6240\u5047\u8bbe\u7684\u90a3\u6837\u3002\u5982\u679c\u4e00\u82f1\u91cc\u662f\u516c\u91cc\uff081.570\u2026\u516c\u91cc\uff09\uff0c\u6211\u4eec\u5e73\u5747\u6bcf\u82f1\u91cc\u6b63\u597d\u6709 2 \u6761\u7f51\u683c\u7ebf\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u516c\u91cc\u7f51\u683c\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4ee5\u82f1\u91cc\u4e3a\u5355\u4f4d\u7684\u8fd1\u8ddd\u79bb\u8ddd\u79bb\u6d4b\u91cf\u8fd9\u4e00\u4e8b\u5b9e\u53ea\u662f\u795d\u60a8\u597d\u8fd0\u3002\u8fd9\u662f\u56e0\u4e3a\u4e00\u82f1\u91cc\u975e\u5e38\u63a5\u8fd1\u516c\u91cc\u3002\u5728\u4ee5\u540e\u7684\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u8fdb\u4e00\u6b65\u63a2\u8ba8\u6570\u5b66\u3002\u6211\u4eec\u5c06\u770b\u5230\u4e0a\u8ff0\u7ed3\u679c\u7684\u6765\u6e90\uff0c\u5e76\u66f4\u8be6\u7ec6\u5730\u4e86\u89e3\u6b65\u884c\u5230\u6b65\u884c\u7684\u53ef\u53d8\u6027\u3002\u6211\u4eec\u8fd8\u5c06\u770b\u5230\u4e3a\u4ec0\u4e48\u9002\u7528\u4e8e\u76f4\u7ebf\u7684\u7ed3\u679c\u4e5f\u9002\u7528\u4e8e\u66f2\u7ebf\uff08\u5982\u6b65\u884c\uff09\uff0c\u5e76\u4e14\u5728\u8fd9\u6837\u505a\u65f6\u4f1a\u53d1\u73b0\u5e03\u51af\u4f2f\u7235\u4e0d\u4ec5\u6709\u9488\uff0c\u4ed6\u8fd8\u6709\u9762\u6761\u3002", "note_en": "Wandering the mountains of the UK has been a big part of my life. You won\u2019t be surprised that before I start a long walk I like to know roughly what I\u2019m letting myself in for. One part of this is estimating how far I\u2019ll be walking.\n Several decades ago my fellow student and hillwalking friend David told me of a quick and simple way to estimate the length of a walk. It uses the grid of kilometre squares that is printed on the Ordnance Survey maps that UK hillwalkers use.\n To estimate the length of the walk, count the number of grid lines that the route crosses, and divide by two. This gives you an estimate of the length of the walk in miles.\n Yes,  miles, even though the grid lines are spaced at kilometre intervals. On the right you can see a made-up example. The route crosses 22 grid lines, so we estimate its length as 11 miles.\n Is this rule practically useful? Clearly, the longer a walk, the more grid lines the route is likely to cross, so counting grid lines will definitely give us  some kind of measure of how long the walk is. But how good is this measure, and why do we get an estimate in miles when the grid lines are a kilometre apart?\n I\u2019ve investigated the maths involved, and here are the headlines. They are valid for walks of typical wiggliness; the rule isn\u2019t reliable for a walk that unswervingly follows a single compass bearing.\n On average, the estimated distance is close to the actual distance: in the long run the rule overestimates the lengths of walks by 2.4%.\n There is, of course, some random variation from walk to walk. For walks of about 10 miles, about two-thirds of the time the estimated length of the walk will be within 7% of the actual distance.\n The long-run overestimation of 2.4% is tiny: it amounts to only a quarter-mile in a 10-mile walk. The variability is more serious: about a third of the time the estimate will be more than 7% out. But other imponderables (such as the nature of the ground, or getting lost) will have a bigger effect than this on the effort or time needed to complete a walk, so I don\u2019t think it\u2019s a big deal.\n In conclusion, for a rule that is so quick and easy to use, this rule is good enough for me. Which is just as well, because I\u2019ve been using it unquestioningly for the past 35 years.\n   George-Louis Leclerc, Comte de Buffon,\u00a0 (1707-1788) was a French intellectual with no recorded interest in hillwalking. But he did consider the following problem, known as  Buffon\u2019s Needle:\n Suppose we have a floor made of parallel strips of wood, each the same width, and we drop a needle onto the floor. What is the probability that the needle will lie across a line between two strips?\n Let\u2019s recast that question a little and ask: if the lines are spaced 1 unit apart, and we drop the needle many times, what\u2019s the average number of lines crossed by the dropped needle? It turns out that it is\n  where  l is the length of the needle. Now add another set of lines at right angles (as if the floor were made of square blocks rather than strips). The average number of lines crossed by the dropped needle doubles to\n  Can you see the connection with the distance-estimating rule? The cracks in the floor become the grid lines, and the needle becomes a segment of the walk. A straight segment of a walk will cross, on average,   grid lines per kilometre of its length. Now a mile is 1.609 kilometres, so a segment of the walk will, on average, cross   grid lines per mile, which is very close to 2 grid lines per mile, as our rule assumes. If a mile were   km (1.570\u2026 km), we\u2019d average exactly 2 grid lines per mile.\n So the fact that using a kilometre grid gives us a close measure of distance in miles is just good luck. It\u2019s because a mile is very close to   kilometres.\n In a future post, I\u2019ll explore the maths further. We\u2019ll see where the results above come from, and look in more detail at walk-to-walk variability. We\u2019ll also see why results that apply to straight lines also apply to curved lines (like walks), and in doing so discover that not only did the Comte de Buffon have a needle, he also had a noodle.", "posttime": "2021-07-26 09:07:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e94\u8be5,love,\u6b65\u884c", "title": "Hillwalkers\u5e94\u8be5\u559c\u6b22Comte de Buffon", "title_en": "Hillwalkers should love the Comte de Buffon", "transed": 1, "url": "http://bencraven.org.uk/2020/08/05/why-hillwalkers-should-love-the-comte-de-buffon/", "via": "", "real_tags": ["\u5e94\u8be5", "love", "\u6b65\u884c"]}, {"category": "", "categoryclass": "", "imagename": "a9f648df22e7fbca99ff537458fada4e.png", "infoid": 1069749, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CXXGraph \u662f\u4e00\u4e2a\u5c0f\u578b\u5e93\uff0c\u53ea\u6709\u5934\u6587\u4ef6\uff0c\u7528\u4e8e\u7ba1\u7406 Graph \u53ca\u5176\u5728 C++ \u4e2d\u7684\u7b97\u6cd5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e00\u4e2a\u201c\u7efc\u5408 C++ \u56fe\u5f62\u5e93\u201d\u3002 Graph Dijkstras Shortest Path Algorithm(Dijkstra&#39;s Shortest Path) Dijkstra&#39;s Algorithm \u7528\u4e8e\u67e5\u627e\u56fe\u4e2d\u4ece\u6e90\u8282\u70b9\u5230\u6240\u6709\u5176\u4ed6\u53ef\u8fbe\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u3002\u8be5\u7b97\u6cd5\u6700\u521d\u5047\u8bbe\u6240\u6709\u8282\u70b9\u90fd\u65e0\u6cd5\u4ece\u7ed9\u5b9a\u7684\u6e90\u8282\u70b9\u5230\u8fbe\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6240\u6709\u8282\u70b9\u7684\u8ddd\u79bb\u6807\u8bb0\u4e3a\u65e0\u7a77\u5927\u3002\uff08\u65e0\u7a77\u5927\uff09\u5230\u6e90\u8282\u70b9\uff08INF / \u65e0\u7a77\u5927\u8868\u793a\u65e0\u6cd5\u5230\u8fbe\uff09\u3002\u5f53\u8fb9\u6743\u91cd\u662f\u5c0f\u6574\u6570\uff08\u4ee5\u53c2\u6570 C \u4e3a\u754c\uff09\u65f6\uff0c\u5229\u7528\u8fd9\u4e00\u4e8b\u5b9e\u7684\u4e13\u7528\u961f\u5217\u53ef\u7528\u4e8e\u52a0\u901f Dijkstra \u7b97\u6cd5\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u7b2c\u4e00\u4e2a\u7b97\u6cd5\u662f Dial \u7b97\u6cd5\uff08Dial 1969\uff09\uff0c\u7528\u4e8e\u5177\u6709\u6b63\u6574\u6570\u8fb9\u6743\u91cd\u7684\u56fe\uff0c\u5b83\u4f7f\u7528\u6876\u961f\u5217\u6765\u83b7\u5f97\u8fd0\u884c\u65f6\u95f4 O(|E|+|V|C)\u3002\uff08\u6765\u6e90\u7ef4\u57fa\u767e\u79d1\uff09Buckets 0\uff0c 1, 2,..wV \u4f9d\u6b21\u68c0\u67e5\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u6876\u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5305\u542b\u5728\u7b2c\u4e00\u4e2a\u975e\u7a7a\u6876\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5177\u6709\u6700\u5c0f\u8ddd\u79bb\u6807\u7b7e\u3002\u5728\u626b\u63cf\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u5177\u6709\u6700\u5c0f\u8ddd\u79bb\u6807\u7b7e\u7684\u8282\u70b9\u88ab\u6c38\u4e45\u6807\u8bb0\u5e76\u4ece\u6876\u4e2d\u5220\u9664\u3002\u5f53\u9876\u70b9\u7684\u8ddd\u79bb\u6807\u7b7e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u4e34\u65f6\u6807\u8bb0\u7684\u9876\u70b9\u5728\u6876\u4e2d\u7684\u4f4d\u7f6e\u4f1a\u76f8\u5e94\u66f4\u65b0\u3002\u91cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u76f4\u5230\u6240\u6709\u9876\u70b9\u90fd\u88ab\u6c38\u4e45\u6807\u8bb0\uff08\u6216\u6240\u6709\u9876\u70b9\u7684\u8ddd\u79bb\u6700\u7ec8\u786e\u5b9a\uff09\u3002\n(Breadth First Search) Breadth First Search Algorithm(\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22) \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e5f\u5f15\u4f5cBFS\uff0c\u662f\u4e00\u79cdGraph Traversal Algorithm\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(|V| + |E|) \u5176\u4e2d V \u662f\u9876\u70b9\u7684\u6570\u91cf\uff0cE \u662f\u56fe\u4e2d\u7684\u8fb9\u7684\u6570\u91cf\u3002\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u5e94\u7528\u662f\uff1a \u5bfb\u627e\u4e24\u4e2a\u9876\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u5f84\uff0c\u6bd4\u5982 u \u548c v\uff0c\u6709\u8def\u5f84\u4ee5\u8fb9\u6570\u8861\u91cf\u7684\u957f\u5ea6\uff08\u4f18\u4e8e\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5\uff09 (Depth First Search) \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u7b97\u6cd5 (Depth First Search) \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u4e5f\u5f15\u7528\u4e3a DFS\uff0c\u662f\u4e00\u79cd\u56fe\u904d\u5386\u7b97\u6cd5\u3002\u65f6\u95f4\u590d\u6742\u5ea6 O(|V| + |E|) \u5176\u4e2d V \u4e3a\u9876\u70b9\u6570\uff0cE \u4e3a\u56fe\u4e2d\u8fb9\u6570\u3002 -first search (DFS) \u67e5\u627e\u6307\u5411\u5f53\u524d\u9876\u70b9\u7684\u7956\u5148\u7684\u8fb9\uff08\u5b83\u5305\u542b\u540e\u8fb9\uff09\u3002 DFS \u8df3\u8fc7\u7684\u6240\u6709\u540e\u8fb9\u7f18\u90fd\u662f\u5faa\u73af\u7684\u4e00\u90e8\u5206\u3002\u5728\u65e0\u5411\u56fe\u4e2d\uff0c\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u8fb9\u4e0d\u5e94\u8be5\u7b97\u4f5c\u540e\u8fb9\uff0c\u4f46\u627e\u5230\u4efb\u4f55\u5176\u4ed6\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u9876\u70b9\u5c06\u8868\u793a\u540e\u8fb9\u3002\u5728\u65e0\u5411\u56fe\u7684\u60c5\u51b5\u4e0b\uff0c\u53ea\u9700\u8981 O(n) \u65f6\u95f4\u5c31\u53ef\u4ee5\u5728 n \u9876\u70b9\u56fe\u4e2d\u627e\u5230\u4e00\u4e2a\u5faa\u73af\uff0c\u56e0\u4e3a\u6700\u591a n - 1 \u6761\u8fb9\u53ef\u4ee5\u662f\u6811\u8fb9\u3002\u8bb8\u591a\u62d3\u6251\u6392\u5e8f\u7b97\u6cd5\u4e5f\u4f1a\u68c0\u6d4b\u5faa\u73af\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u662f\u62d3\u6251\u987a\u5e8f\u5b58\u5728\u7684\u969c\u788d\u3002\u6b64\u5916\uff0c\u5982\u679c\u6709\u5411\u56fe\u5df2\u88ab\u5212\u5206\u4e3a\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u5219\u73af\u4ec5\u5b58\u5728\u4e8e\u5206\u91cf\u5185\u800c\u4e0d\u5b58\u5728\u4e8e\u5b83\u4eec\u4e4b\u95f4\uff0c\u56e0\u4e3a\u73af\u662f\u5f3a\u8fde\u901a\u7684\u3002\u5bf9\u4e8e\u6709\u5411\u56fe\uff0c\u53ef\u4ee5\u4f7f\u7528\u57fa\u4e8e\u5206\u5e03\u5f0f\u6d88\u606f\u7684\u7b97\u6cd5\u3002\u8fd9\u4e9b\u7b97\u6cd5\u4f9d\u8d56\u4e8e\u8fd9\u6837\u4e00\u4e2a\u60f3\u6cd5\uff0c\u5373\u4e00\u4e2a\u9876\u70b9\u5728\u4e00\u4e2a\u5faa\u73af\u4e2d\u53d1\u9001\u7684\u6d88\u606f\u5c06\u8fd4\u56de\u5230\u81ea\u8eab\u3002\u5206\u5e03\u5f0f\u5faa\u73af\u68c0\u6d4b\u7b97\u6cd5\u5bf9\u4e8e\u5728\u8ba1\u7b97\u673a\u96c6\u7fa4\uff08\u6216\u8d85\u7ea7\u8ba1\u7b97\u673a\uff09\u4e0a\u4f7f\u7528\u5206\u5e03\u5f0f\u56fe\u5904\u7406\u7cfb\u7edf\u5904\u7406\u5927\u89c4\u6a21\u56fe\u5f88\u6709\u7528\u3002\u5faa\u73af\u68c0\u6d4b\u7684\u5e94\u7528\u5305\u62ec\u4f7f\u7528\u7b49\u5f85\u56fe\u6765\u68c0\u6d4b\u5e76\u53d1\u7cfb\u7edf\u4e2d\u7684\u6b7b\u9501\u3002\n\u9876\u70b9\u5207\u5272\u5206\u533a\u5c06\u56fe\u7684\u8fb9\u5212\u5206\u4e3a\u76f8\u7b49\u5927\u5c0f\u7684\u5206\u533a\u3002\u4fdd\u5b58\u8fb9\u7aef\u70b9\u7684\u9876\u70b9\u4e5f\u4e0e\u8fb9\u672c\u8eab\u653e\u5728\u540c\u4e00\u5206\u533a\u4e2d\u3002\u4f46\u662f\uff0c\u9876\u70b9\u5728\u5206\u533a\u4e4b\u95f4\u4e0d\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u5fc5\u987b\u590d\u5236\uff08\u526a\u5207\uff09\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u8fb9\u5206\u5e03\u5728\u4e0d\u540c\u7684\u5206\u533a\u4e0a\u3002\u590d\u5236\u56e0\u5b50\u91cf\u5316\u4e86\u4e0e\u539f\u59cb\u8f93\u5165\u56fe\u7684\u9876\u70b9\u6570\u91cf\u76f8\u6bd4\uff0c\u5728\u8ba1\u7b97\u673a\u4e0a\u590d\u5236\u7684\u9876\u70b9\u6570\u91cf\u3002\u8be5\u7b97\u6cd5\u662f\u5faa\u73af\u65b9\u5f0f\u7684\u7b80\u5355\u9876\u70b9\u5207\u5272\u3002\u5b83\u91c7\u7528\u539f\u59cb\u56fe\u8fb9\u5e76\u5c06\u5b83\u4eec\u5206\u914d\u7ed9\u5206\u533a\uff0c\u5c06\u5176\u5212\u5206\u4e3a\u76f8\u7b49\uff08\u6216\u76f8\u4f3c\uff09\u5927\u5c0f\u3002\u8be5\u7b97\u6cd5\u4e0d\u8003\u8651\u9876\u70b9\u590d\u5236\uff08\u590d\u5236\u56e0\u5b50\uff09\u4e2d\u7684\u4f18\u5316\uff0c\u800c\u53ea\u5e73\u8861\u5206\u533a\u4e2d\u7684\u8fb9\u3002\u6240\u9700\u7684\u6700\u4f4e C++ \u6807\u51c6\u662f C++17 \u548c\u5927\u4e8e 7.3.0 \u7684 G++ \u7f16\u8bd1\u5668\u7248\u672c\u3002\u5e93\u7684\u4f7f\u7528\u5f88\u7b80\u5355\uff0c\u628a\u5934\u6587\u4ef6\u653e\u5230\u9700\u8981\u7684\u5730\u65b9\u5c31\u884c\u4e86\uff01 git clone https://github.com/google/googletest.gitcd googletest # \u514b\u9686\u4ed3\u5e93\u7684\u4e3b\u76ee\u5f55.mkdir build # \u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u4fdd\u5b58\u6784\u5efa output.cd buildcmake .. # \u4e3a GoogleTest.makesudo make \u751f\u6210\u539f\u751f\u6784\u5efa\u811a\u672cinstall # \u9ed8\u8ba4\u5b89\u88c5\u5728/usr/local/ Benchmark \u9700\u8981\u5927\u4e8e3.9 \u7684CMake \u7248\u672c\u4ee5\u53cagoogle test \u548cgoogle benchmark \u5e93\u3002\n# \u67e5\u770b\u5e93\u3002$ git clone https://github.com/google/benchmark.git# Benchmark \u9700\u8981 Google Test \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002\u5c06\u6e90\u4ee3\u7801\u6811\u6dfb\u52a0\u4e3a\u5b50\u76ee\u5f55\u3002$ git clone https://github.com/google/googletest.git benchmark/googletest# \u8f6c\u5230\u5e93\u6839\u76ee\u5f55$ cd benchmark# \u521b\u5efa\u4e00\u4e2a\u6784\u5efa\u76ee\u5f55\u4ee5\u653e\u7f6e\u6784\u5efa\u8f93\u51fa\u3002$ cmake -E make_directory &quot;build&quot;# \u4f7f\u7528 cmake \u751f\u6210\u6784\u5efa\u7cfb\u7edf\u6587\u4ef6\u3002$ cmake -E chdir &quot;build&quot; cmake -DCMAKE_BUILD_TYPE=Release ../# \u6216\u8005\uff0c\u4ece CMake 3.13 \u5f00\u59cb\uff0c\u4f7f\u7528\u66f4\u7b80\u5355\u7684\u5f62\u5f0f\uff1a# cmake -DCMAKE_BUILD_TYPE=Release - \u3002 -B &quot;build&quot;#\u6784\u5efa\u5e93$ cmake --build &quot;build&quot; --config Release# install library$ sudo cmake --build &quot;build&quot; --config Release --target install \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u8fd0\u884c\u4f4d\u4e8e\u201cbuild\u201d\u76ee\u5f55\u4e0b\u7684\u540d\u4e3a\u201ctest_exe\u201d\u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e26\u6709\u7b80\u5355\u7684\u547d\u4ee4 ./test_exe\u3002\u5982\u679c\u60a8\u60f3\u63d0\u4f9b\u652f\u6301\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u62c9\u53d6\u8bf7\u6c42\u6216\u62a5\u544a\u95ee\u9898\u3002\u5982\u679c\u60a8\u60f3\u66f4\u6539\u4ee3\u7801\u3001\u4fee\u590d\u95ee\u9898\u6216\u5b9e\u65bd\u65b0\u529f\u80fd\uff0c\u8bf7\u9605\u8bfb\u6211\u4eec\u7684\u8d21\u732e\u6307\u5357\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u5f00\u53d1\u4eba\u5458\u548c\u63d0\u4ea4\u8005\uff0c\u4e5f\u662f\u9996\u5148\u7ecf\u9a8c\uff0c\u6211\u4eec\u5c06\u4e00\u6b65\u6b65\u5f15\u5bfc\u60a8\u8d70\u5411\u5f00\u6e90\u4e16\u754c\uff01\u5982\u679c\u60a8\u6709\u5174\u8da3\uff0c\u8bf7\u901a\u8fc7 zigrazor@gmail.com \u4e0e\u6211\u4eec\u8054\u7cfb\u6216\u4e3a\u6b64\u9879\u76ee\u505a\u51fa\u8d21\u732e\u3002\u6211\u4eec\u6b63\u5728\u7b49\u4f60\uff01", "note_en": "CXXGraph is a small library, header only, that manages the Graph and it&#39;s algorithms in  C++. In other words a &#34;Comprehensive C++ Graph Library&#34;.\n   Graph Dijkstras Shortest Path Algorithm(Dijkstra&#39;s Shortest Path) Dijkstra&#39;s Algorithm is used to find the shortest path from a source node to all other reachable nodes in the graph. The algorithm initially assumes all the nodes are unreachable from the given source node so we mark the distances of all nodes as infinity.(infinity) from source node (INF / infinity denotes unable to reach).\n   When edge weights are small integers (bounded by a parameter  C), specialized queues which take advantage of this fact can be used to speed up Dijkstra&#39;s algorithm. The first algorithm of this type was Dial&#39;s algorithm (Dial 1969) for graphs with positive integer edge weights, which uses a bucket queue to obtain a running time O(|E|+|V|C).( source wikipedia)\n  Buckets 0, 1, 2,..wV are checked sequentially until the first non-empty bucket is found. Each node contained in the first non-empty bucket has the minimum distance label by definition.\n One by one, these nodes with minimum distance label are permanently labeled and deleted from the bucket during the scanning process.\n  The position of a temporarily labeled vertex in the buckets is updated accordingly when the distance label of a vertex changes.\n Process repeated until all vertices are permanently labeled (or distances of all vertices are finalized).\n   (Breadth First Search) Breadth First Search Algorithm(Breadth First Search) Breadth First Search, also quoted as  BFS, is a Graph Traversal Algorithm. Time Complexity O(|V| + |E|) where V are the number of vertices and E are the number of edges in the graph.Applications of Breadth First Search are :\n Finding shortest path between two vertices say u and v, with path length measured by number of edges (an advantage over depth first search algorithm)\n   (Depth First Search) Depth First Search Algorithm (Depth First Search) Depth First Search, also quoted as  DFS, is a Graph Traversal Algorithm. Time Complexity O(|V| + |E|) where V is number of vertices and E is number of edges in graph.Application of Depth First Search are:\n     The existence of a cycle in directed and undirected graphs can be determined by whether depth-first search (DFS) finds an edge that points to an ancestor of the current vertex (it contains a back edge). All the back edges which DFS skips over are part of cycles. In an undirected graph, the edge to the parent of a node should not be counted as a back edge, but finding any other already visited vertex will indicate a back edge. In the case of undirected graphs, only O(n) time is required to find a cycle in an n-vertex graph, since at most n \u2212 1 edges can be tree edges.\n Many topological sorting algorithms will detect cycles too, since those are obstacles for topological order to exist. Also, if a directed graph has been divided into strongly connected components, cycles only exist within the components and not between them, since cycles are strongly connected.\n For directed graphs, distributed message based algorithms can be used. These algorithms rely on the idea that a message sent by a vertex in a cycle will come back to itself. Distributed cycle detection algorithms are useful for processing large-scale graphs using a distributed graph processing system on a computer cluster (or supercomputer).\n Applications of cycle detection include the use of wait-for graphs to detect deadlocks in concurrent systems.\n    A vertex-cut partitioning divides edges of a graph into equal size partitions. The vertices that hold the endpoints of an edge are also placed in the same partition as the edge itself. However, the vertices are not unique across partitions and might have to be replicated (cut), due to the distribution of their edge across different partitions.\n Replication factor quantifies how many vertexes are replicated over computers compared with the the number of vertexes of the original input graph.\n  This Algorithm is a simple vertex-cut in Round-Robin fashion.It takes the original graph edges and assign them to the partitions, dividing it in equal(or similar) size. This algorithm does not take care of optimization in vertex replication ( Replication Factor) but only balance the edge in the partitions.\n    The minimun C++ standard required is  C++17 and a G++ compiler version greater than 7.3.0.\n  The use of the library is very simple,  just put the header file where you need!\n     git clone https://github.com/google/googletest.gitcd googletest # Main directory of the cloned repository.mkdir build # Create a directory to hold the build output.cd buildcmake .. # Generate native build scripts for GoogleTest.makesudo make install # Install in /usr/local/ by default\n  The Benchmark required the CMake version greater than 3.9 and the  google test and the  google benchmark library.\n   # Check out the library.$ git clone https://github.com/google/benchmark.git# Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory.$ git clone https://github.com/google/googletest.git benchmark/googletest# Go to the library root directory$ cd benchmark# Make a build directory to place the build output.$ cmake -E make_directory &#34;build&#34;# Generate build system files with cmake.$ cmake -E chdir &#34;build&#34; cmake -DCMAKE_BUILD_TYPE=Release ../# or, starting with CMake 3.13, use a simpler form:# cmake -DCMAKE_BUILD_TYPE=Release -S . -B &#34;build&#34;# Build the library.$ cmake --build &#34;build&#34; --config Release# install library$ sudo cmake --build &#34;build&#34; --config Release --target install\n      After the compilation, you can run the executable that is under the &#34;build&#34; directory with the name &#34;test_exe&#34;, with the simple command  ./test_exe.\n    If you want give your support you can create a   pull request    or report an   issue   .If you want to change the code, or fix issue, or implement a new feature please read our  CONTRIBUTING Guide\n                 We are looking for developers and committer, also at  first experience, we will guide you step by step to the open-source world!If you are interested, please contact us at  zigrazor@gmail.com or contribute to this project. We are waiting for you!", "posttime": "2021-07-26 09:06:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,algorithms,c++,graph,\u9876\u70b9", "title": "C++ \u4e2d\u7684\u9ad8\u7ea7\u56fe\u7b97\u6cd5", "title_en": "Advanced Graph Algorithms in C++", "transed": 1, "url": "https://github.com/ZigRazor/CXXGraph", "via": "", "real_tags": ["\u7b97\u6cd5", "c++", "graph", "\u9876\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "11c246f46cd3c3f0d0b5807e5581c410.jpg", "infoid": 1069747, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u521b\u5efa\u4e86\u4e00\u4e2a repo \u6765\u6293\u53d6\u548c\u5206\u6790\u5728 leetcode \u7684\u8865\u507f\u9875\u9762\u4e0a\u53d1\u5e03\u7684\u5e16\u5b50\u3002\u62a5\u544a\u662f\u6839\u636e\u622a\u81f3 7 \u6708 22 \u65e5\u6536\u96c6\u7684 1940 \u6761\u8bb0\u5f55\u751f\u6210\u7684\uff08\u6765\u81ea\u85aa\u916c\u9875\u9762\u4e0a\u7684 272 \u9875\uff09\u3002", "note_en": "I created a repo to scrape and analyse the posts made on the compensations page of leetcode.\n Reports are generated from 1940 records collected till Jul 22 (from the 272 pages available on the compensations page).", "posttime": "2021-07-26 08:20:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u85aa\u916c,compensation,\u6293\u53d6", "title": "Leetcode \u85aa\u916c\u62a5\u544a\uff08\u5370\u5ea6\uff092019 \u5e74 1 \u6708 \u2013 2021 \u5e74 7 \u6708", "title_en": "Leetcode Compensation report (India) Jan 2019 \u2013 Jul 2021", "transed": 1, "url": "https://www.reddit.com/r/developersIndia/comments/ors1zd/leetcode_compensation_report_india_jan_2019_jul/", "via": "", "real_tags": ["\u85aa\u916c", "\u6293\u53d6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069746, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c1d\u8bd5\u5b8c\u5168\u6570\u5b57\u8bbf\u95ee\uff0c\u770b\u770b\u4e3a\u4ec0\u4e48\u6709\u8d85\u8fc7 100 \u4e07\u8bfb\u8005\u8ba2\u9605\u4e86 FT \u9009\u62e9 \u8d2d\u4e70 1 \u7f8e\u5143\u7684\u8bd5\u7528\u8ba2\u9605 4 \u5468 \u8bd5\u7528\u671f\u7ed3\u675f\u540e\uff0c\u60a8\u5c06\u6bcf\u6708\u652f\u4ed8 91 \u7f8e\u5143 4 \u5468\u5185\u83b7\u5f97\u5bf9 FT \u503c\u5f97\u4fe1\u8d56\u7684\u5956\u52b1\u7684\u65e0\u9650\u5236\u9ad8\u7ea7\u6570\u5b57\u8bbf\u95ee- \u83b7\u5956\u5546\u4e1a\u65b0\u95fb\u793c\u54c1\u6587\u7ae0 \u2013 \u6bcf\u6708\u6700\u591a\u4e0e\u5bb6\u4eba\u3001\u670b\u53cb\u548c\u540c\u4e8b\u5206\u4eab 10 \u7bc7\u6587\u7ae0", "note_en": "Try full digital access and see why over 1 million readers subscribe to the FT\n  Select  Purchase a Trial subscription for $1 for 4 weeks   You will be billed $91 per month after the trial ends\n  For 4 weeks receive unlimited Premium digital access to the FT&#39;s trusted, award-winning business news\n  Gift Article \u2013 share up to 10 articles a month with family, friends and colleagues", "posttime": "2021-07-26 08:19:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bbd\u5e26,broadband,\u8ba2\u9605", "title": "\u5149\u7ea4\u5bbd\u5e26\u201c\u6dd8\u91d1\u70ed\u201d\uff1a\u82f1\u56fd\u7684\u66ff\u4ee3\u7f51\u7edc\u80fd\u5426\u6210\u529f\uff1f", "title_en": "Fibre broadband \u2018gold rush\u2019: can the UK\u2019s alt-nets pull it off?", "transed": 1, "url": "https://www.ft.com/content/0af3b0ea-a803-4b23-be18-a47717c095eb", "via": "", "real_tags": ["\u5bbd\u5e26", "broadband", "\u8ba2\u9605"]}, {"category": "", "categoryclass": "", "imagename": "55b07d20cf1174d0261ff81787f094a1.jpg", "infoid": 1069745, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf 5 \u5206\u949f\uff0cAEMO \u5c06\u5728\u5168\u56fd\u7535\u529b\u5e02\u573a (NEM) \u5185\u8c03\u5ea6\u53d1\u7535\u673a\u4ee5\u6ee1\u8db3\u9700\u6c42\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0cAEMO \u9700\u8981\u9884\u6d4b\u672a\u6765 5 \u5206\u949f\u5185\u7684\u9700\u6c42\u60c5\u51b5\u3002\u76ee\u524d\uff0cAEMO \u4f7f\u7528\u6070\u597d\u4e00\u5468\u524d\u7684 6 \u4e2a\u8c03\u5ea6\u95f4\u9694\u4e2d\u7684\u9700\u6c42\u53d8\u5316\uff0c\u4ee5\u53ca\u5f53\u524d\u8c03\u5ea6\u95f4\u9694\u4e4b\u524d\u7684 5 \u4e2a\u8c03\u5ea6\u95f4\u9694\u3002\u8fd9\u4e9b\u8ba1\u7b97\u7684\u7ed3\u679c\u662f 9 \u4e2a\u503c\uff0c\u4ee3\u8868\u4e86\u9700\u6c42\u968f\u65f6\u95f4\u7684\u53d8\u5316\u3002\u7136\u540e\u5c06\u8fd9 9 \u4e2a\u503c\u8f93\u5165\u5230\u79f0\u4e3a\u795e\u7ecf\u7f51\u7edc\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u4e2d\u3002\u6211\u5df2\u7ecf\u5728\u4e0b\u9762\u7ed8\u5236\u4e86\u8fd9\u4e2a\u7f51\u7edc\u7684\u7ed3\u6784\uff0c\u4f46\u60a8\u771f\u6b63\u9700\u8981\u62c5\u5fc3\u7684\u662f\u8f93\u5165\u5c42\uff08\u91c7\u7528\u4e0a\u9762\u8ba8\u8bba\u7684 9 \u4e2a\u503c\uff09\u548c\u9884\u6d4b\u9700\u6c42\u53d8\u5316\u7684\u8f93\u51fa\u5c42\u3002\u5982\u679c\u60a8\u5bf9\u8fd9\u4e2a\u795e\u7ecf\u7f51\u7edc\u7a76\u7adf\u5982\u4f55\u63a5\u53d7\u8fd9\u4e9b\u8f93\u5165\u5e76\u80fd\u591f\u8f93\u51fa\u9884\u6d4b\u611f\u5174\u8da3\uff0c\u6211\u5df2\u7ecf\u5728\u8fd9\u91cc\u7528 Python \u4ece\u5934\u5f00\u59cb\u200b\u200b\u5b9e\u73b0\u4e86\u5b83\u3002\u6700\u540e\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4efd\u63a2\u7d22\u66ff\u4ee3\u9884\u6d4b\u5efa\u6a21\u6280\u672f\u7684\u62a5\u544a\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\u3002", "note_en": "Every 5 minutes, AEMO will dispatch generators across the National Electricity Market (NEM) in order to meet demand. To achieve this, AEMO needs to predict what demand will look like 5 minutes in the future.\n   Currently, AEMO uses the change in demand in the 6 dispatch intervals exactly a week before, and the 5 dispatch intervals immediately preceding the current dispatch interval. The outcome of these calculations is 9 values representing the change in demand over time.\n  These 9 values are then fed into a machine learning algorithm called a neural network. I\u2019ve drawn the structure of this network below, but all you really need to worry about is the input layer (that takes the 9 values discussed above) and the output layer that predicts the change in demand.\n  If you\u2019re interested in exactly how this neural network takes these inputs and is able to output a prediction, I\u2019ve  implemented it here from scratch in Python.\n Finally, I think this\u00a0 report\u00a0exploring alternative predictive modelling techniques is well worth a read.", "posttime": "2021-07-26 08:19:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9884\u6d4b,predict", "title": "AEMO \u5982\u4f55\u9884\u6d4b\u5168\u56fd\u7535\u529b\u5e02\u573a\u7684\u9700\u6c42\uff1f", "title_en": "How does AEMO predict demand in the National Electricity Market?", "transed": 1, "url": "https://jacksimpson.co/how-does-aemo-predict-demand-in-the-national-electricity-market/", "via": "", "real_tags": ["\u9884\u6d4b", "predict"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069743, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u7684\u8bba\u6587\u662f Facebook \u7684 Tectonic Filesystem: Efficiency from Exascale from FaST &#39;21\u3002\u8fd9\u7bc7\u8bba\u6587\u6db5\u76d6\u4e86 Facebook \u7684 Tectonic \u6587\u4ef6\u7cfb\u7edf\u3001\u5b83\u7684\u5b9e\u73b0\u4ee5\u53ca\u4ed6\u4eec\u505a\u51fa\u7684\u5404\u79cd\u8bbe\u8ba1\u51b3\u7b56\u3002\u6211\u5c06\u603b\u7ed3\u8fd9\u7bc7\u8bba\u6587\uff0c\u5e76\u6df1\u5165\u63a2\u8ba8\u5176\u4e2d\u7684\u4e00\u4e9b\u4eae\u70b9\u3002\u867d\u7136\u6587\u4ef6\u7cfb\u7edf\u8bba\u6587\u548c\u7cfb\u7edf\u6709\u7740\u4e30\u5bcc\u7684\u5386\u53f2\uff0c\u4f46\u9605\u8bfb\u8fd9\u7bc7 Tectonic \u8bba\u6587\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\uff0c\u56e0\u4e3a\u8bb8\u591a\u7ecf\u5e38\u88ab\u5f15\u7528\u7684\u8bba\u6587\u5df2\u7ecf\u6709\u70b9\u957f\u4e86\u3002\u8c37\u6b4c\u6587\u4ef6\u7cfb\u7edf (2003) \u8bba\u6587\u5df2\u6709\u8fd1 20 \u5e74\u7684\u5386\u53f2\uff0c\u4f46\u5728\u91ce\u5916\u88ab\u5f15\u7528\u7684\u6b21\u6570\u8d85\u8fc7\u4e86 Bill Murray\u3002 1 \u8fd8\u6709\u4e00\u4e9b\u66f4\u73b0\u4ee3\u7684\u8bba\u6587\uff0c\u4e3b\u8981\u6765\u81ea Microsoft\uff0c\u5982 Windows Azure Storage (2011) \u548c Azure Data Lake Store (2017)\uff0c\u4f46\u5f88\u9ad8\u5174\u770b\u5230\u6765\u81ea\u4e0d\u540c\u516c\u53f8\u7684\u4e00\u4e9b\u4e1c\u897f\u3002 Tectonic \u4f7f\u7528\u80d6\u5ba2\u6237\u7aef\u67b6\u6784\uff0c\u652f\u6301\u76f4\u63a5\u4ece\u78c1\u76d8\u5230\u5ba2\u6237\u7aef\u7684\u6570\u636e\u6d41\uff0c\u5e76\u4f7f\u7528\u5206\u7247\u5143\u6570\u636e\u670d\u52a1\u4e3a\u6587\u4ef6\u7cfb\u7edf\u63d0\u4f9b\u670d\u52a1\u3002 Tectonic \u5c06\u5143\u6570\u636e\u5c42\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff1a(1) \u540d\u79f0\u5c42\uff0c(2) \u6587\u4ef6\u5c42\uff0c\u548c (3) \u5757\u5c42\u3002\u6bcf\u4e2a\u5c42\u8d1f\u8d23\u4e00\u90e8\u5206\u5143\u6570\u636e\uff0c\u5e76\u4e14\u6240\u6709\u5c42\u90fd\u4f5c\u4e3a\u65e0\u72b6\u6001\u5fae\u670d\u52a1\u5b9e\u73b0\u5728 ZippyDB \u4e4b\u4e0a\uff0cZippyDB \u662f\u4e00\u4e2a\u6c34\u5e73\u53ef\u6269\u5c55\u7684\u952e\u503c\u5b58\u50a8\u3002\u7531\u4e8e\u5143\u6570\u636e\u5c42\u662f\u5b8c\u5168\u72ec\u7acb\u7684\uff0c\u6bcf\u4e2a\u5c42\u90fd\u53ef\u4ee5\u72ec\u7acb\u7f29\u653e\u4ee5\u5904\u7406\u5176\u8d1f\u8f7d\u3002 Name \u5c42\u63d0\u4f9b\u76ee\u5f55\u6811\u62bd\u8c61\uff0c\u5c06\u76ee\u5f55\u6620\u5c04\u5230\u5b83\u4eec\u5305\u542b\u7684\u6587\u4ef6\u548c\u76ee\u5f55\u3002\u6587\u4ef6\u5c42\u4ece\u6587\u4ef6\u6620\u5c04\u5230\u5b83\u4eec\u7684\u7ec4\u6210\u5757\u3002\u5757\u662f\u5bf9\u8fde\u7eed\u5b57\u8282\u4e32\u7684\u62bd\u8c61\uff0c\u9690\u85cf\u4e86\u5b83\u4eec\u7684\u5b58\u50a8\u6216\u7f16\u7801\u65b9\u5f0f\u3002\u6587\u4ef6\u53ea\u662f\u5757\u7684\u6709\u5e8f\u5217\u8868\u3002\u5728 Tectonic \u4e2d\uff0c\u5757\u4f7f\u7528\u590d\u5236\u7f16\u7801\uff0c\u5176\u4e2d \\(N\\) \u4e2a\u76f8\u540c\u7684\u5757\u6bcf\u4e2a\u5b58\u50a8\u5757\u7684\u5b8c\u6574\u526f\u672c\uff0c\u6216\u8005\u4f7f\u7528 Reed-Solomon \u7f16\u7801\uff0c\u5176\u4e2d\u5757\u88ab\u7f16\u7801\u4e3a \\(X\\) \u6570\u636e\u5757\u548c \\(Y\\ ) \u4ee3\u7801/\u5947\u5076\u6821\u9a8c\u5757\u3002\u5757\u5c42\u5305\u542b\u4ece\u5757\u5230\u5176\u7f16\u7801\u53ca\u5176\u7ec4\u5757\u96c6\u7684\u6620\u5c04\u3002 Tectonic \u7684\u6700\u540e\u4e00\u90e8\u5206\u662f Chunk Store\uff0c\u5b83\u662f\u5b83\u81ea\u5df1\u7684\u5206\u5e03\u5f0f\u6570\u636e\u5b58\u50a8\uff0c\u5176\u4e2d\u8282\u70b9\u5b58\u50a8\u539f\u59cb\u5b57\u8282\u5757\u548c\u4e00\u4e9b\u6700\u5c0f\u5143\u6570\u636e\uff0c\u4ee5\u4ece\u5757 id \u6620\u5c04\u5230\u5b58\u50a8\u5728\u672c\u5730\u3001\u4fee\u6539\u8fc7\u7684 XFS \u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u5b57\u8282\u3002 Name \u5c42\u3001File \u5c42\u548c Block \u5c42\u7684\u6a21\u5f0f\u5728\u8bba\u6587\u4e2d\u7684\u8fd9\u5f20\u8868\u4e2d\uff1a\nName \u5c42\u7ef4\u62a4\u4ece\u76ee\u5f55\u5230\u5b50\u76ee\u5f55\u548c\u5176\u4e2d\u5305\u542b\u7684\u6587\u4ef6\u7684\u6620\u5c04\uff0c\u5e76\u7531\u76ee\u5f55\u7684 dir_id \u5206\u7247\u3002 File \u5c42\u4ece\u6587\u4ef6\u6620\u5c04\u5230\u5176\u903b\u8f91\u5757\u5217\u8868\uff0c\u5e76\u7531 file_id \u5206\u7247\u3002 Block \u5c42\u4ece\u5757\u6620\u5c04\u5230\u5b58\u50a8\u5b83\u7684\u5757/\u78c1\u76d8\u5217\u8868\uff0c\u5e76\u7531 blk_id \u5206\u7247\u3002\u5757\u5c42\u8fd8\u7ef4\u62a4\u4ece\u6bcf\u4e2a\u78c1\u76d8\u5230\u5b58\u50a8\u5728\u5176\u4e0a\u7684\u5757\u5217\u8868\u7684\u6620\u5c04\u3002\u8fd9\u79cd\u53cd\u5411\u6620\u5c04\u5bf9\u4e8e\u7ef4\u62a4\u5f88\u6709\u7528\uff0c\u4f8b\u5982\uff0c\u5f53\u78c1\u76d8\u4e22\u5931\u65f6\uff0c\u8fd9\u79cd\u6620\u5c04\u5141\u8bb8\u540e\u53f0\u7ef4\u62a4\u4efb\u52a1\u51c6\u786e\u679a\u4e3e\u54ea\u4e9b\u5757\u9700\u8981\u5411\u4e0a\u590d\u5236\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u91cd\u5efa\u3002 ZippyDB \u5c06\u952e\u7ec4\u5408\u6210\u5206\u7247\uff0c\u5e76\u4fdd\u8bc1\u5177\u6709\u76f8\u540c\u5206\u7247 id \u7684\u6240\u6709\u952e\u503c\u5bf9\u90fd\u653e\u7f6e\u5728\u540c\u4e00\u4e2a\u5206\u7247\u4e2d\u3002\u8fd9\u610f\u5473\u7740\u7531 dir_id \u5206\u7247\u7684 Tectonic \u7684 Name \u5c42\u53ef\u4ee5\u4ece\u5355\u4e2a\u5206\u7247\u5feb\u901f\u63d0\u4f9b\u4e00\u4e2a\u76ee\u5f55\u4e2d\u6240\u6709\u5b50\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u5f3a\u4e00\u81f4\u6027\u5217\u8868\uff0c\u800c\u5b83\u7684 File \u5c42\uff0c\u7531 file_id \u5206\u7247\uff0c\u53ef\u4ee5\u4e3a\u6240\u6709\u7684\u5217\u8868\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\u6587\u4ef6\u5757\u3002\u4f46\u662f\uff0c\u4e0d\u80fd\u4fdd\u8bc1\u5b50\u76ee\u5f55\u4e0e\u7236\u76ee\u5f55\u4f4d\u4e8e\u540c\u4e00\u5206\u7247\u4e0a\uff0c\u5e76\u4e14 ZippyDB \u4e0d\u63d0\u4f9b\u4efb\u4f55\u8de8\u5206\u7247\u4e8b\u52a1\uff0c\u56e0\u6b64\u4e0d\u652f\u6301\u5927\u591a\u6570\u9012\u5f52\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u3002 Tectonic \u7684 ZippyDB \u6a21\u5f0f\u8fd8\u5c06\u5217\u8868\u5b58\u50a8\u4e3a\uff08\u952e\uff0c\u503c\uff09\u5bf9\u7684\u5b8c\u5168\u201c\u6269\u5c55\u201d\u7ec4\u5408\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5305\u542b\u5b50\u76ee\u5f55 bar \u548c quux \u7684\u76ee\u5f55 foo\uff0cTectonic \u5b58\u50a8\u4e24\u4e2a\u5355\u72ec\u7684\u952e (foo, bar) \u548c (foo, quux)\uff0c\u5e76\u4f7f\u7528\u524d\u7f00\u952e\u626b\u63cf foo, \u5904\u7406\u76ee\u5f55 foo \u7684\u5217\u8868\u8bf7\u6c42\u3002\u8fd9\u79cd\u6269\u5c55\u7684\u5217\u8868\u683c\u5f0f\u7528\u4e8e\u964d\u4f4e\u5411\u5df2\u7ecf\u62e5\u6709\u6570\u767e\u4e07\u4e2a\u6587\u4ef6\u7684\u5927\u578b\u76ee\u5f55\u6dfb\u52a0\u6216\u5220\u9664\u5355\u4e2a\u6761\u76ee\u7684\u6210\u672c\uff0c\u56e0\u4e3a Tectonic \u4e0d\u5fc5\u53cd\u5e8f\u5217\u5316\u3001\u7f16\u8f91\u3001\u5e8f\u5217\u5316\u548c\u5199\u56de\u4e00\u767e\u4e07\u4e2a\u6761\u76ee\u5217\u8868\u3002 Tectonic \u5177\u6709\u5355\u5199\u5165\u5668\u3001\u4ec5\u8ffd\u52a0\u8bed\u4e49\u2014\u2014\u8fd9\u610f\u5473\u7740 Tectonic \u7981\u6b62\u591a\u4e2a\u5e76\u53d1\u5199\u5165\u5668\u5199\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5e76\u4e14\u6587\u4ef6\u53ea\u80fd\u8ffd\u52a0\u5230\u3002\u4e3a\u786e\u4fdd\u5355\u5199\u5165\u5668\u8bed\u4e49\uff0c\u6bcf\u5f53\u5ba2\u6237\u7aef\u6253\u5f00\u6587\u4ef6\u65f6\uff0c\u5b83\u90fd\u4f1a\u83b7\u5f97\u4e00\u4e2a\u5199\u5165\u4ee4\u724c\uff0c\u8be5\u4ee4\u724c\u4e0e\u6587\u4ef6\u4e00\u8d77\u5b58\u50a8\u5728\u5143\u6570\u636e\u5c42\u4e2d\u3002\u6bcf\u5f53\u5ba2\u6237\u7aef\u5e0c\u671b\u5199\u5165\u6587\u4ef6\u65f6\uff0c\u5b83\u5fc5\u987b\u5305\u542b\u5199\u5165\u4ee4\u724c\uff0c\u5e76\u4e14\u53ea\u6709\u6700\u65b0\u7684\u5199\u5165\u4ee4\u724c\u624d\u88ab\u5141\u8bb8\u6539\u53d8\u6587\u4ef6\u5143\u6570\u636e\u5e76\u5199\u5165\u5176\u5757\u3002\u5f53\u63a7\u5236\u8def\u5f84\u901a\u8fc7\u5143\u6570\u636e\u5c42\u548c ZippyDB \u65f6\uff0c\u6570\u636e\u8def\u5f84\u76f4\u63a5\u4ece\u5ba2\u6237\u7aef\u5230\u5757\u5b58\u50a8\u8282\u70b9\u3002\u8fd9\u51cf\u5c11\u4e86\u6574\u4e2a\u7cfb\u7edf\u6240\u9700\u7684\u7f51\u7edc\u5e26\u5bbd\uff0c\u4ee5\u53ca\u5728\u7f51\u7edc\u4e0a\u79fb\u52a8\u5b57\u8282\u6240\u9700\u7684\u8ba1\u7b97\u3002 Tectonic \u7684\u80d6\u5ba2\u6237\u7aef\u5bf9\u5176\u8bfb\u53d6\u548c\u5199\u5165\u5177\u6709\u975e\u5e38\u7ec6\u7c92\u5ea6\u7684\u63a7\u5236\uff0c\u56e0\u4e3a\u5b83\u76f4\u63a5\u8fdb\u5165\u5757\u5b58\u50a8\u8282\u70b9\u6765\u8bfb\u53d6\u548c\u5199\u5165\u5355\u4e2a\u5757\u3002\u8fd9\u5141\u8bb8\u5ba2\u6237\u7aef\u9488\u5bf9\u4e0d\u540c\u7684\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u8c03\u6574\uff0c\u4f8b\u5982\uff0c\u662f\u5426\u4f18\u5316\u5199\u5165\u7684\u6301\u4e45\u6027\u6216\u5ef6\u8fdf\u3002\u4e0e\u53ef\u80fd\u5728\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5f3a\u5236\u6267\u884c\u5355\u4e2a\u914d\u7f6e\u7684\u5176\u4ed6\u7cfb\u7edf\u76f8\u53cd\uff0cTectonic \u5ba2\u6237\u7aef\u8fd8\u53ef\u4ee5\u9488\u5bf9\u6bcf\u4e2a\u6587\u4ef6\u751a\u81f3\u6bcf\u4e2a\u5757\u8c03\u6574\u8fd9\u4e9b\u53c2\u6570\u3002 Tectonic \u4f7f\u7528\u5e38\u89c1\u7684\u4ef2\u88c1\u63d0\u4ea4\u6216\u4ef2\u88c1\u5199\u5165\u6280\u672f\u6765\u4f18\u5316\u5ba2\u6237\u7aef\u6267\u884c\u5168\u5757\u5199\u5165 - \u53ea\u9700\u8981\u5ba2\u6237\u7aef\u6301\u4e45\u5730\u5199\u5165\u5757\u7684\u6240\u6709\u5757\u526f\u672c\u4e2d\u7684\u5927\u591a\u6570\u4ee5\u63d0\u4ea4\u5757\u3002\u4e3e\u4f8b\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5177\u6709 3 \u4e2a\u526f\u672c\u7684 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6 2 Tectonic \u53ea\u9700\u8981\u5ba2\u6237\u7aef\u5728\u8003\u8651\u63d0\u4ea4\u7684\u5757\u4e4b\u524d\u5b8c\u6210\u5bf9\u5176\u4e2d 2 \u4e2a\u526f\u672c\u5757\u7684\u5199\u5165\u2014\u2014\u8fd9\u6709\u52a9\u4e8e\u5c3e\u5ef6\u8fdf 3\u3002\u5982\u679c\u6700\u540e\u7684\u7b2c\u4e09\u4e2a\u526f\u672c\u5757\u5199\u5165\u5931\u8d25\uff0cTectonic \u7684\u540e\u53f0\u7ef4\u62a4\u670d\u52a1\u5c06\u901a\u8fc7\u4fee\u590d\u7b2c 3 \u4e2a\u5757\u526f\u672c\u6765\u4fee\u590d\u5757\u3002\n\u9664\u4e86\u8fd9\u79cd\u5e38\u89c1\u7684\u4f18\u5316\u4e4b\u5916\uff0cTectonic \u8fd8\u4f7f\u7528\u4e86\u4e00\u79cd\u79f0\u4e3a Reservation Requests \u7684\u5de7\u5999\u6280\u672f\u6765\u4f18\u5316\u5168\u5757\u5199\u5165\uff0c\u8fd9\u7c7b\u4f3c\u4e8e The Tail At Scale \u4e2d\u8ba8\u8bba\u7684\u5bf9\u51b2\u8bf7\u6c42\u3002\u4e3a\u4e86\u6fc0\u53d1\u9884\u7559\u8bf7\u6c42\uff0c\u6211\u4eec\u5c06\u9996\u5148\u7ed5\u9053\u800c\u884c\uff0c\u770b\u770b\u5bf9\u51b2\u8bf7\u6c42\u3001\u5b83\u4eec\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u9884\u7559\u8bf7\u6c42\u53ef\u80fd\u66f4\u9002\u5408 Tectonic \u7684\u7528\u4f8b\u3002\u5bf9\u51b2\u8bf7\u6c42\u662f\u4e00\u79cd\u5ef6\u8fdf\u4f18\u5316\uff0c\u60a8\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u53ef\u80fd\u7684\u591a\u53f0\u670d\u52a1\u5668\uff0c\u5e76\u63a5\u53d7\u6765\u81ea\u6700\u5feb\u670d\u52a1\u5668\u7684\u7b2c\u4e00\u4e2a\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u4e3a\u4e00\u9879\u5de5\u4f5c\u53d1\u9001\u5355\u4e2a\u8bf7\u6c42\u3002\u4e0d\u53ea\u662f\u91cd\u590d\u5927\u91cf\u5de5\u4f5c\u7684\u5173\u952e\u662f\uff0c\u4e0d\u662f\u7acb\u5373\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u800c\u662f\u7b49\u5f85\u4e00\u70b9\uff0c\u5176\u4e2d\u201c\u4e00\u70b9\u201d\u610f\u5473\u7740\u60a8\u671f\u671b\u6b63\u5e38\u8bf7\u6c42\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u5982\u679c\u56de\u590d\u4ecd\u672a\u5230\u8fbe\uff0c\u90a3\u4e48\u60a8\u201c\u5bf9\u51b2\u201d\u60a8\u7684\u8d4c\u6ce8\uff0c\u5373\u8be5\u670d\u52a1\u5668\u5c06\u5728\u5408\u7406\u7684\u65f6\u95f4\u8303\u56f4\u5185\u54cd\u5e94\u5e76\u5c06\u76f8\u540c\u7684\u8bf7\u6c42\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u526f\u672c\u3002\u5bf9\u51b2\u8bf7\u6c42\u6709\u52a9\u4e8e\u6539\u5584\u957f\u5c3e\u5ef6\u8fdf\uff0c\u56e0\u4e3a\u60a8\u53ef\u4ee5\u907f\u514d\u5ba2\u6237\u7aef\u5728\u53d6\u5f97\u4efb\u4f55\u8fdb\u5c55\u4e4b\u524d\u5fc5\u987b\u7b49\u5f85\u53ef\u80fd\u4e0d\u5065\u5eb7\u7684\u8282\u70b9\u54cd\u5e94\u5176\u8bf7\u6c42\u7684\u60c5\u51b5\u3002\u7136\u800c\uff0c\u5bf9\u51b2\u8bf7\u6c42\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u5bfc\u81f4\u63a5\u6536\u670d\u52a1\u5668\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\u6fc0\u589e\uff0c\u4ee5\u53ca\u989d\u5916\u8bf7\u6c42\u548c\u54cd\u5e94\u6240\u9700\u7684\u989d\u5916\u5e26\u5bbd\u2014\u2014\u8fd9\u662f\u5b58\u50a8\u7cfb\u7edf\u6240\u5173\u5fc3\u7684\u50cf\u6784\u9020\u3002\u6b64\u5916\uff0cTectonic \u5ba2\u6237\u7aef\u4e0d\u80fd\u771f\u7684\u53ea\u662f\u9009\u62e9\u53e6\u4e00\u4e2a\u968f\u673a\u5b58\u50a8\u8282\u70b9\u6765\u5199\u5165\u4ed6\u4eec\u7684\u6570\u636e\uff0c\u4ed6\u4eec\u5fc5\u987b\u4e0e\u5143\u6570\u636e\u5c42\u534f\u8c03\uff0c\u4ee5\u4fbf\u5143\u6570\u636e\u51c6\u786e\u53cd\u6620\u54ea\u4e9b\u8282\u70b9\u5b58\u50a8\u54ea\u4e9b\u5757\u3002\u76f8\u53cd\uff0cTectonic \u4f7f\u7528\u4fdd\u7559\u8bf7\u6c42\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u5f88\u5c0f\uff0c\u7c7b\u4f3c\u4e8e ping \u8bf7\u6c42\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u5230\u591a\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\u6765\u51b3\u5b9a\u5c06\u5176\u6570\u636e\u5b9e\u9645\u5199\u5165\u54ea\u4e9b\u8282\u70b9\u3002 Tectonic \u9009\u62e9\u6700\u5148\u54cd\u5e94\u7684\u5757\u5b58\u50a8\u8282\u70b9\u4f5c\u4e3a\u8fdb\u884c\u5b9e\u9645\u5199\u5165\u7684\u8282\u70b9\uff0c\u5047\u8bbe\u53ef\u4ee5\u5feb\u901f\u54cd\u5e94\u7684\u8282\u70b9\u5f53\u524d\u6ca1\u6709\u8fc7\u8f7d\u3002\u9884\u7559\u8bf7\u6c42\u4e0d\u643a\u5e26\u4efb\u4f55\u7528\u4e8e\u5b9e\u9645\u5199\u5165\u7684\u6570\u636e\uff0c\u56e0\u6b64\u5b83\u4eec\u4f7f\u7528\u7684\u5e26\u5bbd\u975e\u5e38\u5c11\uff0c\u5e76\u4e14\u5904\u7406\u6210\u672c\u975e\u5e38\u4f4e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u6b63\u5728\u5199\u5165 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6\uff0c\u5219\u5ba2\u6237\u7aef\u5c06\u9996\u5148\u5411 5 \u4e2a\u5757\u5b58\u50a8\u8282\u70b9\u53d1\u9001\u9884\u7559\u8bf7\u6c42\u3002\u5ba2\u6237\u7aef\u9009\u62e9\u6700\u5148\u54cd\u5e94\u7684 3 \u4e2a\u5b58\u50a8\u8282\u70b9\u6765\u5b9e\u9645\u53d1\u9001 3 \u4e2a\u5199\u5165\u8bf7\u6c42\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6570\u636e\u4ecd\u7136\u53ea\u5e7f\u64ad\u5230 3 \u4e2a\u8282\u70b9\uff0c\u4f46\u662f\u9996\u5148\u901a\u8fc7\u9884\u7559\u8bf7\u6c42\u8fdb\u884c\u7684\u5feb\u901f\u5065\u5eb7\u68c0\u67e5\u51cf\u5c11\u4e86\u5ba2\u6237\u7aef\u7b49\u5f85\u4e0d\u5065\u5eb7\u6216\u5361\u4f4f\u7684\u8282\u70b9\u7684\u53ef\u80fd\u6027\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u5c3e\u90e8\u5ef6\u8fdf\u3002\u9884\u7559\u8bf7\u6c42\u4e0d\u4f7f\u7528\u4efb\u4f55\u989d\u5916\u7684\u5e26\u5bbd\u6216\u5904\u7406\uff0c\u4f46\u4e0e\u5bf9\u51b2\u8bf7\u6c42\u76f8\u6bd4\u786e\u5b9e\u6709\u7f3a\u70b9\u3002\u7531\u4e8e\u5168\u5757\u5199\u5165\u5fc5\u987b\u9996\u5148\u6267\u884c\u8fd9\u4e9b\u9884\u7559\u8bf7\u6c42\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u4e3a\u6bcf\u4e2a\u5199\u5165\u589e\u52a0\u4e00\u70b9\u5ef6\u8fdf\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9884\u7559\u8bf7\u6c42\u4ec5\u7528\u4e8e\u5168\u5757\u5199\u5165\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5199\u5165\u7684\u6570\u636e\u91cf\u8db3\u591f\u5927\uff0c\u8fd9\u79cd\u5ef6\u8fdf\u5f00\u9500\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u66f4\u597d\u7684\u5c3e\u90e8\u5ef6\u8fdf\u7684\u6298\u8877\u3002\u6211\u5047\u8bbe\u9884\u7559\u8bf7\u6c42\u5728\u5b9e\u8df5\u4e2d\u8fd0\u884c\u826f\u597d\uff0c\u4f46\u6211\u611f\u5174\u8da3\u7684\u662f\u9884\u7559\u8bf7\u6c42\u63d0\u4f9b\u7684\u5065\u5eb7\u68c0\u67e5\u548c\u8d1f\u8f7d\u5e73\u8861\u4fe1\u53f7\u5fc5\u987b\u662f\u591a\u8fd1\u7684\uff0c\u4ee5\u907f\u514d\u6700\u7cdf\u7cd5\u7684\u5c3e\u90e8\u5ef6\u8fdf\u3002\u6211\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u4f7f\u7528\u8f83\u5c11\u68c0\u67e5\u9891\u7387\u7684\u7cfb\u7edf\u53ef\u80fd\u4ecd\u7136\u80fd\u591f\u63d0\u4f9b\u9884\u8ba2\u8bf7\u6c42\u7684\u5927\u90e8\u5206\u597d\u5904\uff0c\u540c\u65f6\u8fd8\u51cf\u5c11\u4e86\u5b8c\u6210\u7684\u5de5\u4f5c\u91cf\u3002\nTectonic \u8fd8\u901a\u8fc7\u4ef2\u88c1\u8ffd\u52a0\u6765\u4f18\u5316\u5c0f\u4e8e\u5757\u5927\u5c0f\u7684\u8ffd\u52a0\uff0c\u7c7b\u4f3c\u4e8e\u5b8c\u6574\u5757\u5199\u5165\u3002\u4f18\u5316\u6709\u52a9\u4e8e\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf\uff0c\u4f46\u5bf9\u4e8e\u90e8\u5206\u5757\u8ffd\u52a0\u800c\u4e0d\u662f\u5b8c\u6574\u5757\u5199\u5165\uff0c\u4ef2\u88c1\u63d0\u4ea4\u8981\u6b63\u786e\u5b9e\u73b0\u6709\u70b9\u68d8\u624b\u3002\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u4e00\u4e2a\u5b8c\u6574\u7684\u5757\uff0c\u90a3\u4e48\u60a8\u4e0d\u5fc5\u62c5\u5fc3\u5e76\u53d1\u5199\u5165\u5668\u4e89\u76f8\u5199\u5165\u540c\u4e00\u4e2a\u5757\uff0c\u4f46\u662f\u5bf9\u4e8e\u8f83\u5c0f\u7684\u5199\u5165\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4e3a\u4e86\u8bf4\u660e\u53ef\u80fd\u53d1\u751f\u7684\u53ef\u80fd\u9519\u8bef\uff0c\u8bf7\u8003\u8651\u4e00\u4e2a \\(R(3.2)\\) \u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u7684\u5757\u5927\u5c0f\u4e3a 8MB\uff0c\u591a\u4e2a\u5ba2\u6237\u7aef\u9644\u52a0\u5230\u5355\u4e2a\u5757\u3002\u5ba2\u6237\u7aefA\u8ffd\u52a0512\u5b57\u8282\uff0c\u6210\u529f\u63d0\u4ea4\u8ffd\u52a0\u5230\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u5757\uff0c\u4f46\u5199\u5165\u7b2c\u4e09\u4e2a\u5757\u526f\u672c\u5931\u8d25\u3002\u7136\u540e\u5ba2\u6237\u7aef B \u63a7\u5236\u6587\u4ef6\u5e76\u9644\u52a0\u53e6\u5916 512 \u4e2a\u5b57\u8282\uff0c\u4f46\u7b2c\u4e8c\u4e2a\u5757\u526f\u672c\u5931\u8d25\uff0c\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e09\u4e2a\u6210\u529f\u3002\u6700\u540e\uff0c\u5ba2\u6237\u7aef C \u63a7\u5236\u4e86\u6587\u4ef6\u5e76\u9644\u52a0\u4e86\u53e6\u5916 512 \u4e2a\u5b57\u8282\uff0c\u4f46\u662f\u7b2c\u4e00\u4e2a\u5757\u5199\u5165\u5931\u8d25\uff0c\u800c\u7b2c\u4e8c\u4e2a\u548c\u7b2c\u4e09\u4e2a\u6210\u529f\u3002\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u5757\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e00\u548c\u7b2c\u4e8c\u6b21\u8ffd\u52a0\uff09\uff0c\u7b2c\u4e8c\u4e2a\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e00\u548c\u7b2c\u4e09\u6b21\u8ffd\u52a0\uff09\uff0c\u7b2c\u4e09\u4e2a\u526f\u672c\u957f\u5ea6\u4e3a 1024 \u5b57\u8282\uff08\u7b2c\u4e8c\u548c\u7b2c\u4e09\u6b21\u8ffd\u52a0\uff09\u3002\u8bfb\u8005\u4f1a\u770b\u5230\u6587\u4ef6\u5143\u6570\u636e\u62a5\u544a\u7684\u5757\u957f\u5ea6\u4e3a 1536 \u5b57\u8282\uff0c\u4f46\u5b9e\u9645\u6570\u636e\u5757\u90fd\u4e0d\u662f\u90a3\u4e2a\u957f\u5ea6\uff01\u5e76\u4e14\u6ca1\u6709\u4e00\u4e2a\u5757\u5305\u542b\u76f8\u540c\u7684\u6570\u636e\uff01\u5e76\u4e14\u4e0d\u6e05\u695a\u5728\u5b8c\u6210\u8fd9\u4e9b\u5199\u5165\u65f6\u8bfb\u8005\u53ef\u80fd\u4f1a\u9605\u8bfb\u4ec0\u4e48\uff01\u6216\u8005\uff0c\u5982\u679c\u6240\u6709\u7684\u5757\u90fd\u4ee5\u76f8\u540c\u7684\u6570\u636e\u7ed3\u675f\uff01\u6216\u8005\uff0c\u5982\u679c\u8fd9\u7bc7\u535a\u6587\u4e2d\u7684\u5176\u4f59\u53e5\u5b50\u5c06\u4ee5\u611f\u53f9\u53f7\u7ed3\u5c3e\uff01 4 Tectonic \u5904\u7406\u8fd9\u4e9b\u6f5c\u5728\u95ee\u9898\u7684\u65b9\u5f0f\u662f\u5f3a\u5236\u6267\u884c\u4e24\u6761\u89c4\u5219\uff1a(1) \u53ea\u5141\u8bb8\u521b\u5efa\u5757\u7684\u5ba2\u6237\u7aef\u9644\u52a0\u5230\u5b83\uff0c\u4ee5\u53ca (2) \u5ba2\u6237\u7aef\u5411\u5143\u6570\u636e\u5c42\u63d0\u4ea4\u65b0\u7684\u5757\u957f\u5ea6\u548c\u6821\u9a8c\u548c\u4e4b\u524d\u786e\u8ba4\u4ef2\u88c1\u9644\u52a0\u5230\u5e94\u7528\u7a0b\u5e8f\u3002\u867d\u7136\u8bba\u6587\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u8ba4\u4e3a\u5355\u4e2a\u5ba2\u6237\u7aef\u4f1a\u5c06\u5176\u8ffd\u52a0\u5e8f\u5217\u5316\u5230\u7ed9\u5b9a\u7684\u5757\u5b58\u50a8\u8282\u70b9\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5b83\u6267\u884c\u7b2c\u4e00\u6b21\u8ffd\u52a0\u548c\u7b2c\u4e8c\u6b21\u8ffd\u52a0\uff0c\u5b83\u5c06\u7b49\u5f85\u7b2c\u4e00\u6b21\u8ffd\u52a0\u5230\u5728\u5c06\u7b2c\u4e8c\u4e2a append \u5199\u5165\u5b58\u50a8\u8282\u70b9\u4e4b\u524d\u6210\u529f\u3002\u901a\u8fc7\u5ba2\u6237\u7aef\u5b8c\u6210\u8fd9\u79cd\u5e8f\u5217\u5316\uff0c\u5e76\u5f3a\u5236\u53ea\u6709\u4e00\u4e2a\u5ba2\u6237\u7aef\u53ef\u4ee5\u5199\u5165\u5757\uff0c\u6211\u4eec\u4e0a\u9762\u7684\u7ade\u4e89\u4e0d\u4f1a\u53d1\u751f\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u5c06\u5728\u5199\u5165\u7b2c\u4e8c\u4e2a\u8ffd\u52a0\u4e4b\u524d\u7b49\u5f85\u7b2c\u4e00\u4e2a\u8ffd\u52a0\u53d1\u751f\u5728\u5757\u5b58\u50a8\u8282\u70b9\u4e0a\u3002\u8fd9\u53ef\u4ee5\u786e\u4fdd\u591a\u4e2a\u4f5c\u8005\u4e0d\u4f1a\u4e92\u76f8\u8e29\u8e0f\u3002\u5728\u6bcf\u4e2a\u4ef2\u88c1\u8ffd\u52a0\u4e4b\u540e\u63d0\u4ea4\u5757\u957f\u5ea6\u548c\u6821\u9a8c\u548c\uff0c\u4f46\u5728\u5411\u5e94\u7528\u7a0b\u5e8f\u786e\u8ba4\u4e4b\u524d\u5411\u8bfb\u8005\u4fdd\u8bc1\u4ed6\u4eec\u53ef\u4ee5\u8bfb\u53d6\u7684\u5185\u5bb9\u3002\u8fd9\u610f\u5473\u7740\u5e94\u7528\u7a0b\u5e8f\u5e94\u8be5\u5177\u6709\u5199\u540e\u8bfb\u4e00\u81f4\u6027\uff0c\u56e0\u4e3a Tectonic \u5411\u5e94\u7528\u7a0b\u5e8f\u786e\u8ba4\u7684\u4efb\u4f55\u6570\u636e\u90fd\u5df2\u6301\u4e45\u63d0\u4ea4\u5230\u4e24\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\uff0c\u5e76\u5c06\u65b0\u957f\u5ea6\u63d0\u4ea4\u5230\u5143\u6570\u636e\u5c42\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c Tectonic \u62a5\u544a\u7684\u5757\u957f\u5ea6\u4e3a \\(B\\) \u5b57\u8282\uff0c\u90a3\u4e48\u81f3\u5c11 \\(B\\) \u5b57\u8282\u5df2\u7ecf\u88ab\u63d0\u4ea4\u5230\u4e24\u4e2a\u5757\u5b58\u50a8\u8282\u70b9\uff0c\u5e76\u4e14\u4efb\u4f55\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8bfb\u53d6\u5230 \\(B\\)\u5b57\u8282\uff0c\u5e76\u4fdd\u8bc1\u5b83\u4eec\u662f\u6b63\u786e\u7684\u3002\u8bb8\u591a\u5de5\u4f5c\u8d1f\u8f7d\u662f\u201c\u4e00\u6b21\u5199\u5165\uff0c\u5f88\u5c11\u8bfb\u53d6\u201d\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u5e94\u8be5\u8fdb\u884c Reed-Solomon \u7f16\u7801\u800c\u4e0d\u662f\u590d\u5236\u4ee5\u51cf\u5c11\u5b58\u50a8\u5f00\u9500\u3002\u4f46\u662f\uff0c\u6570\u636e\u901a\u5e38\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u5199\u5165\uff0c\u5e76\u4e14\u5199\u5165\u5ef6\u8fdf\u5bf9\u5ba2\u6237\u7aef\u5f88\u91cd\u8981\uff0c\u56e0\u6b64\u4f7f\u7528\u590d\u5236\u7f16\u7801\u6765\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf 5 \u662f\u6709\u610f\u4e49\u7684\u3002\u5229\u7528\u590d\u5236\u5199\u5165\u6539\u8fdb\u7684\u5ef6\u8fdf\uff0c\u540c\u65f6\u8fd8\u5177\u6709\u63d0\u9ad8\u4e86 Reed-Solomon \u7f16\u7801\u7684\u5b57\u8282\u6548\u7387\u3002\n\u901a\u8fc7\u8ba9\u5ba2\u6237\u7aef\u4ee5\u590d\u5236\u7f16\u7801\u5199\u5165\u5757\uff0cTectonic \u53ef\u4ee5\u5403\u86cb\u7cd5\uff0c\u4e5f\u53ef\u4ee5\u5403\u5b83\uff0c\u4f46\u662f\u4e00\u65e6\u5757\u5df2\u6ee1\u5e76\u5bc6\u5c01\uff0c\u5ba2\u6237\u7aef\u5c06\u5728\u540e\u53f0\u5c06\u5757\u91cd\u65b0\u7f16\u7801\u4e3a Reed-Solomon\u3002\u901a\u8fc7\u6211\u4eec\u8ba8\u8bba\u7684\u6240\u6709\u4f18\u5316\uff0c\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f97\u4e86\u590d\u5236\u5199\u5165\u7684\u6539\u8fdb\u5ef6\u8fdf\uff0c\u4f46 Reed-Solomon \u5b58\u50a8\u7684\u7a7a\u95f4\u6548\u7387\u3002\u4ece\u8bba\u6587\u4e2d\u4e0d\u6e05\u695a\u5982\u679c\u5ba2\u6237\u7aef\u5e94\u7528\u7a0b\u5e8f\u5d29\u6e83\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4f46\u6211\u5047\u8bbe\u6709\u4e00\u4e2a\u540e\u53f0\u670d\u52a1\u53ef\u4ee5\u5c06\u5b8c\u5168\u5199\u5165\u7684\u5757\u91cd\u65b0\u7f16\u7801\u4e3a Reed-Solomon\u3002 Tectonic \u4f7f\u7528\u526f\u672c\u96c6\u590d\u5236\u6765\u6700\u5927\u7a0b\u5ea6\u5730\u51cf\u5c11\u5728\u9047\u5230\u534f\u8c03\u78c1\u76d8\u6545\u969c\u65f6\u6570\u636e\u4e22\u5931\u7684\u53ef\u80fd\u6027\u3002 Copyset \u590d\u5236\u771f\u7684\u5f88\u806a\u660e\uff0c\u4f46\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u7a0d\u5fae\u5907\u4efd\u4e00\u4e0b\uff0c\u4ee5\u8ba8\u8bba\u5728\u5c1d\u8bd5\u5c06\u6570\u636e\u653e\u7f6e\u5230\u78c1\u76d8\u4e0a\u65f6\u5b58\u5728\u7684\u56f0\u96be\u95ee\u9898\u548c\u6743\u8861\u3002\u5728\u9009\u62e9\u5c06\u6570\u636e\u5199\u5165\u54ea\u4e9b\u78c1\u76d8\u65f6\uff0c\u5728\u78c1\u76d8\u53ef\u80fd\u51fa\u73b0\u6545\u969c\u7684\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5728\u6570\u636e\u4e22\u5931\u7684\u53ef\u80fd\u6027\u4e0e\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u4e4b\u95f4\u8fdb\u884c\u6743\u8861\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bf9\u4e8e\u6240\u6709 \\(R(3.2)\\) \u590d\u5236\u6587\u4ef6\uff0c\u60a8\u5c06\u6bcf\u4e2a\u5757\u526f\u672c\u5199\u5165\u968f\u673a\u9009\u62e9\u7684\u78c1\u76d8\uff0c\u5219\u4efb\u4f55 3 \u4e2a\u78c1\u76d8\u6545\u969c\u5c06\u5bfc\u81f4\u67d0\u4e9b\u590d\u5236\u6587\u4ef6\u7684\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u8d8a\u6765\u8d8a\u5927\u3002\u8fd9\u662f\u56e0\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a\u5757\uff0c\u6211\u4eec\u968f\u673a\u9009\u62e9\u4e00\u7ec4 3 \u4e2a\u78c1\u76d8\u6765\u5b58\u50a8\u5176\u5757\uff0c\u5e76\u4e14\u968f\u7740\u6211\u4eec\u5411\u7cfb\u7edf\u6dfb\u52a0\u66f4\u591a\u5757\uff0c\u6700\u7ec8\u6bcf\u7ec4 3 \u4e2a\u78c1\u76d8\u5c06\u5b58\u50a8\u67d0\u4e2a\u5757\u7684\u6240\u6709\u5757\u526f\u672c\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u968f\u673a\u78c1\u76d8\u9009\u62e9\uff0c\u5f53\u6211\u4eec\u7531\u4e8e\u6570\u636e\u4e2d\u5fc3\u6545\u969c\u800c\u4e22\u5931\u78c1\u76d8\u65f6\uff0c\u53d1\u751f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u6982\u7387\u6700\u9ad8\u3002\u7136\u800c\uff0c\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5757\u7684\u5757\u526f\u672c\u6070\u597d\u4f4d\u4e8e\u4e00\u7ec4\u5931\u8d25\u7684\u78c1\u76d8\u4e0a\u7684\u53ef\u80fd\u6027\u5f88\u5c0f\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u968f\u673a\u9009\u62e9\u7684\u3002\u4e00\u79cd\u601d\u8003\u65b9\u5f0f\u662f\uff0c\u5982\u679c 3 \u4e2a\u78c1\u76d8\u53d1\u751f\u6545\u969c\uff0c\u5219\u4e22\u5931\u5757\u7684\u9884\u671f\u503c\u8f83\u4f4e\uff0c\u4f46\u81f3\u5c11\u4e22\u5931\u4e00\u4e2a\u5757\u7684\u6982\u7387\u5f88\u9ad8\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u4ee5\u60f3\u8c61\u53e6\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c06\u6240\u6709\u8282\u70b9\u5206\u6210 3 \u4e2a\u8282\u70b9\u7684\u96c6\u5408\uff0c\u79f0\u4e3a\u526f\u672c\u96c6\u3002\u5f53\u6211\u4eec\u60f3\u5c06\u4e00\u4e2a\u5757\u7684\u5757\u5206\u914d\u7ed9\u5b58\u50a8\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u9996\u5148\u4e3a\u8be5\u5757\u9009\u62e9\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\u7136\u540e\u5c06\u5757\u526f\u672c\u5206\u914d\u7ed9\u8be5\u526f\u672c\u96c6\u7684 3 \u4e2a\u8282\u70b9\u3002\u5728\u5177\u6709 9 \u4e2a\u8282\u70b9\u7684\u6570\u636e\u4e2d\u5fc3\u4e2d\uff0c\u8282\u70b9 \\([1,2,3]\\) \u53ef\u80fd\u662f\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\\([4,5,6]\\) \u5c06\u662f\u53e6\u4e00\u4e2a\u526f\u672c\u96c6\uff0c\u800c \\([7,8,9]\\ ) \u5c06\u662f\u6700\u540e\u4e00\u4e2a\u3002\u5728\u8be5\u65b9\u6848\u4e2d\uff0c\u53ea\u67093\u4e2a\u4e09\u8282\u70b9\u6545\u969c\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\uff0c\u5373\u53ea\u6709\u4e00\u4e2a\u526f\u672c\u96c6\u7684\u6240\u6709\u8282\u70b9\u4e22\u5931\u624d\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u5757\u7684\u6570\u636e\u4e22\u5931\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u4f4e\u6982\u7387\u7684\u4e8b\u4ef6\uff0c\u56e0\u4e3a\u5728\u53ef\u80fd\u7684 \\({9 \\choose 3} = 84\\) \u4e2a\u4e09\u8282\u70b9\u96c6\u5408\u4e2d\u53ea\u6709 3 \u4e2a\u96c6\u5408\u4f1a\u5bfc\u81f4\u6570\u636e\u4e22\u5931\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u968f\u673a\u8282\u70b9\u590d\u5236\u6700\u7ec8\u4f1a\u4f7f\u6240\u6709 84 \u4e2a\u4e09\u8282\u70b9\u96c6\u6210\u4e3a\u67d0\u4e2a\u5757\u7684\u526f\u672c\u96c6\uff0c\u56e0\u6b64\u526f\u672c\u96c6\u590d\u5236\u6bd4\u968f\u673a\u590d\u5236\u63d0\u9ad8\u4e86 28 \u500d\uff0c\u4ee5\u964d\u4f4e\u6570\u636e\u4e22\u5931\u7684\u6982\u7387\u3002\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u5bf9\u4e8e\u526f\u672c\u96c6\u590d\u5236\uff0c\u6bcf\u4e2a\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u4e22\u5931\u7684\u6570\u636e\u91cf\u4f1a\u975e\u5e38\u9ad8\u2014\u2014\u5206\u914d\u7ed9\u526f\u672c\u96c6\u7684\u6240\u6709\u5757\u90fd\u5c06\u4e22\u5931\u3002\u867d\u7136\u4e22\u5931\u6240\u6709\u6570\u636e\u53ef\u80fd\u4e0d\u662f\u6b63\u786e\u7684\u6743\u8861\uff0c\u4f46\u6211\u4eec\u53ef\u80fd\u4f1a\u5728\u6bcf\u4e2a\u4e8b\u4ef6\u4e22\u5931\u66f4\u591a\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u6743\u8861\uff0c\u4ee5\u51cf\u5c11\u4efb\u4f55\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u3002\u8fd9\u662f\u56e0\u4e3a\u4efb\u4f55\u6570\u91cf\u7684\u6570\u636e\u4e22\u5931\u90fd\u4f1a\u5bfc\u81f4\u5927\u91cf\u56fa\u5b9a\u7684\u6570\u636e\u6062\u590d\u5de5\u4f5c\u5f00\u9500\uff0c\u4f5c\u4e3a\u8fd0\u8425\u5546\uff0c\u6211\u4eec\u771f\u7684\u5e0c\u671b\u5c3d\u53ef\u80fd\u907f\u514d\u5b83\u3002\u8fd9\u662f\u6211\u4eec\u5bfb\u627e\u66f4\u597d\u7684\u65b9\u5f0f\u5c06\u5757\u5206\u914d\u5230\u78c1\u76d8\u7684\u52a8\u673a\u3002\n\u9664\u4e86\u5f71\u54cd\u6570\u636e\u4e22\u5931\u7684\u6982\u7387\u4e4b\u5916\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u5757\u5206\u914d\u7ed9\u8282\u70b9\u4e5f\u4f1a\u5f71\u54cd\u6211\u4eec\u5047\u8bbe\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u5904\u7406\u7684\u7cfb\u7edf\u7684\u5176\u4ed6\u5c5e\u6027\u3002\u5728\u6211\u4eec\u7684 naive 3 copyset \u8bbe\u7f6e\u4e2d\uff0c\u5982\u679c\u8282\u70b9 1 \u53d1\u751f\u6545\u969c\uff0c\u6211\u4eec\u53ea\u80fd\u4ece\u8282\u70b9 2 \u548c 3 \u6062\u590d\u8be5\u6570\u636e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5c06\u8fd9\u4e9b\u8282\u70b9\u4e0a\u7684\u8d1f\u8f7d\u589e\u52a0 50%\u3002\u5bf9\u4e8e\u968f\u673a\u78c1\u76d8\u9009\u62e9\u8bbe\u7f6e\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u51fa\u73b0\u6545\u969c\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u6240\u6709\u5269\u4f59\u8282\u70b9\u6062\u590d\u6570\u636e\uff0c\u56e0\u4e3a\u6570\u636e\u5df2\u5747\u5300\u5206\u5e03\u5728\u6240\u6709 84 \u4e2a\u526f\u672c\u96c6\u4e0a\u3002\u56e0\u6b64\uff0c\u968f\u673a\u78c1\u76d8\u9009\u62e9\u5728\u63d0\u4f9b\u6f5c\u5728\u6062\u590d\u5de5\u4f5c\u7684\u826f\u597d\u8d1f\u8f7d\u5e73\u8861\u65b9\u9762\u5177\u6709\u4f18\u52bf\u3002\u7136\u800c\uff0c\u5982\u679c\u6211\u4eec\u6253\u7834\u4e25\u683c\u7684\u526f\u672c\u96c6\u8bbe\u7f6e\uff0c\u5e76\u5141\u8bb8\u4e00\u4e2a\u8282\u70b9\u4e0a\u7684\u6570\u636e\u6f5c\u5728\u5730\u590d\u5236\u5230\u66f4\u591a\u7684\u5176\u4ed6\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u66f4\u5feb\u5730\u4ece\u5355\u4e2a\u8282\u70b9\u6545\u969c\u4e2d\u6062\u590d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5728\u6240\u6709\u8282\u70b9\u4e0a\u65bd\u52a0\u592a\u591a\u8d1f\u8f7d\u3002\u5269\u4f59\u8282\u70b9\u3002\u8ba9\u6211\u4eec\u5c06\u5b58\u50a8\u5355\u4e2a\u8282\u70b9\u6570\u636e\u526f\u672c\u7684\u8282\u70b9\u6570\u79f0\u4e3a\u6563\u70b9\u5bbd\u5ea6\u3002\u5728\u4e0a\u9762 9 \u4e2a\u8282\u70b9\u548c 3 \u4e2a\u526f\u672c\u96c6\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u6563\u5bbd\u5ea6\u4e3a 2\uff0c\u56e0\u4e3a\u53ea\u6709 2 \u4e2a\u5176\u4ed6\u8282\u70b9\u62e5\u6709\u4efb\u4f55\u5176\u4ed6\u8282\u70b9\u6570\u636e\u7684\u526f\u672c\u2014\u2014\u8282\u70b9 1 \u7684\u6570\u636e\u4e5f\u5728\u8282\u70b9 2 \u548c\u8282\u70b9 3 \u4e0a\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5f15\u5165\u4e86 3 \\([1,4,7]\\)\u3001\\([2,5,8]\\) \u548c \\([3,6,9]\\) \u7684\u66f4\u591a\u526f\u672c\u96c6\u7136\u540e\u73b0\u5728\u8282\u70b9 1 \u4e0a\u7684\u6570\u636e\u53ef\u4ee5\u5728\u4efb\u4e00\u8282\u70b9 2\u30013\u30014 \u6216 7\uff0c\u56e0\u6b64\u5206\u6563\u5bbd\u5ea6\u73b0\u5728\u4e3a 4\u2014\u2014\u5141\u8bb8\u6211\u4eec\u66f4\u5feb\u5730\u4ece\u8282\u70b9\u6545\u969c\u4e2d\u6062\u590d\u3002\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4eec\u5e0c\u671b\u62e5\u6709\u8f83\u9ad8\u7684\u5206\u6563\u5bbd\u5ea6\u4ee5\u786e\u4fdd\u6211\u4eec\u53ef\u4ee5\u4ece\u5927\u91cf\u8282\u70b9\u6062\u590d\u6570\u636e\uff0c\u4f46\u6211\u4eec\u4e5f\u5e0c\u671b\u5c06\u526f\u672c\u96c6\u7684\u6570\u91cf\u4fdd\u6301\u5728\u8f83\u4f4e\u6c34\u5e73\u4ee5\u964d\u4f4e\u53d1\u751f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\u3002\u60f3\u51fa\u4e00\u4e2a\u65b9\u6848\u6765\u505a\u8fd9\u4e24\u4ef6\u4e8b\u662f\u4e00\u4e2a\u4e0d\u5e73\u51e1\u7684\u95ee\u9898\u3002 Copysets \u8bba\u6587\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8fd1\u4e4e\u6700\u4f18\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u79f0\u4e3a\u590d\u5236\u96c6\u590d\u5236\uff0c\u65e8\u5728\u521b\u5efa\u7ed9\u5b9a\u6563\u5e03\u5bbd\u5ea6\u7684\u5c11\u6570\u526f\u672c\u96c6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u526f\u672c\u96c6\u590d\u5236\u964d\u4f4e\u4e86\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u53ef\u80fd\u6027\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u8282\u70b9\u4e4b\u95f4\u7684\u826f\u597d\u8d1f\u8f7d\u5e73\u8861\u3002\u8fd9\u7bc7\u8bba\u6587\u89e3\u91ca\u4e86\u4ed6\u4eec\u7684\u7b97\u6cd5\u5982\u4f55\u662f\u6700\u4f18\u7684\uff0c\u4f46\u6838\u5fc3\u601d\u60f3\u662f\u4f60\u521b\u5efa\u7cfb\u7edf\u4e2d\u6240\u6709\u8282\u70b9\u7684\u6392\u5217\uff0c\u7136\u540e\u901a\u8fc7\u5c06\u6392\u5217\u7ec4\u5408\u6210\u8fde\u7eed\u8282\u70b9\u7684\u8fd0\u884c\u6765\u4ece\u6392\u5217\u4e2d\u5f62\u6210\u526f\u672c\u96c6\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u66f4\u591a\u6392\u5217\u6765\u589e\u52a0\u5206\u6563\u5bbd\u5ea6\uff0c\u4f46\u8fd9\u5c06\u521b\u5efa\u66f4\u591a\u526f\u672c\u96c6\uff0c\u56e0\u4e3a\u989d\u5916\u7684\u6392\u5217\u5c06\u5177\u6709\u4e0d\u540c\u7684\u8282\u70b9\u6539\u7ec4\uff0c\u4ece\u800c\u5bfc\u81f4\u4e0d\u540c\u548c\u66f4\u591a\u7684\u526f\u672c\u96c6\u3002\u4f46\u5173\u952e\u662f\u526f\u672c\u96c6\u6570\u91cf\u7684\u8fd9\u79cd\u589e\u52a0\u5c06\u5c3d\u53ef\u80fd\u5c0f\uff0c\u4ece\u800c\u4f7f\u6570\u636e\u4e22\u5931\u4e8b\u4ef6\u7684\u6982\u7387\u5c3d\u53ef\u80fd\u4f4e\u3002\u5f53\u5ba2\u6237\u7aef\u9700\u8981\u5199\u5165\u5757\u65f6\uff0c\u9996\u5148\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u4f5c\u4e3a\u4e3b\u8282\u70b9\uff0c\u8fd9\u5c06\u526f\u672c\u96c6\u96c6\u9650\u5236\u4e3a\u6bcf\u4e2a\u6392\u5217\u4e00\u4e2a\u3002\u60a8\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u6392\u5217\u53ca\u5176\u526f\u672c\u96c6\uff0c\u6216\u8005\u5728 Tectonic \u7684\u60c5\u51b5\u4e0b\uff0c\u5757\u5c42\u4ece\u5bf9\u5e94\u4e8e\u8be5\u5757 ID \u7684\u6392\u5217\u4e2d\u9009\u62e9\u526f\u672c\u96c6\uff0c\u4ee5\u6392\u5217\u6570\u4e3a\u6a21\uff0c\u4ee5\u4f7f\u5176\u5177\u6709\u786e\u5b9a\u6027\u3002\n\u867d\u7136\u76f8\u5bf9\u4e8e\u526f\u672c\u96c6\u65b9\u6848\u521d\u59cb\u653e\u7f6e\u662f\u6700\u4f73\u7684\uff0c\u4f46\u78c1\u76d8\u4ecd\u7136\u4f1a\u51fa\u73b0\u6545\u969c\u6216\u88ab\u53d6\u51fa\u8fdb\u884c\u7ef4\u62a4\uff0c\u56e0\u6b64\u540e\u53f0\u91cd\u65b0\u5e73\u8861\u5668\u670d\u52a1\u4e5f\u5c1d\u8bd5\u5c06\u5757\u7684\u5757\u4fdd\u7559\u5728\u5176\u539f\u59cb\u526f\u672c\u96c6\u4e2d\u3002 Copyset \u590d\u5236\u548c Tectonic&#39; ......", "note_en": "Today\u2019s paper is  Facebook\u2019s Tectonic Filesystem: Efficiency from Exascale from  FaST \u201821. The paper covers the Tectonic Filesystem at Facebook, its implementation, and various design decisions they made. I\u2019ll summarize the paper and do a deeper dive on some of its highlights.\n While there is a rich history of filesystem papers and systems, it\u2019s nice to read this Tectonic paper, since many of the oft-quoted papers are getting a bit long in the tooth.  The Google File System (2003) paper is almost two decades old but is cited more than  Bill Murray in the wild.  1 There are some more modern papers, mostly from Microsoft like  Windows Azure Storage (2011) and  Azure Data Lake Store (2017), but it\u2019s nice to see something from a different company.\n  Tectonic uses a thick-client architecture, to enable streaming of data directly from disks to the client, and a sharded metadata service to serve the filesystem. Tectonic shards out the metadata layer into three components: (1) Name layer, (2) File layer, and (3) Block layer. Each of the layers are responsible for a part of the metadata, and all of them are implemented as stateless microservices on top of  ZippyDB, a horizontally scalable key-value store. Since the metadata layers are completely separate, each layer can be independently scaled to handle its load.\n  The Name layer provides the directory tree abstraction, mapping directories to the files and directories they contain. The File layer maps from files to their constituent  blocks. Blocks are an abstraction for a contiguous string of bytes that hide how they are stored or encoded. A file is just an ordered list of blocks.\n In Tectonic, blocks use either replicated encoding, where \\(N\\) identical chunks each store a complete copy of the block, or use  Reed-Solomon encoding where the block is encoded into \\(X\\) data chunks and \\(Y\\) code/parity chunks. The Block layer contains the mapping from a block to its encoding and its set of chunks.\n The final piece of Tectonic is the  Chunk Store which is its own distributed data-store where nodes store the raw byte chunks and some minimal metadata to map from chunk id to the bytes stored on a local, modified  XFS filesystem.\n  The schemas of the Name layer, File layer, and Block layer are in this table from the paper:\n    The Name layer maintains the mapping from directory to the subdirectories and files contained within it, and is sharded by the directory\u2019s  dir_id. The File layer maps from files to its list of logical blocks and is sharded by the  file_id. The Block layer maps from blocks to the list of chunks/disks that store it and is sharded by the  blk_id. The Block layer also maintains a mapping from every disk to the list of blocks that are stored on it. This reverse mapping is useful for maintenance, e.g., when a disk is lost this mapping allows background maintenance tasks to enumerate exactly which blocks need to be up-replicated or otherwise reconstructed.\n ZippyDB groups keys together into shards, and guarantees that all key, value pairs with the same sharding id, are placed into the same shard. This means that Tectonic\u2019s Name layer, which shards by  dir_id, can quickly serve from a single shard a strongly consistent list of all subdirectories and files in a directory, and its File layer, sharded by  file_id, can do the same for the list of all blocks for a file. However there\u2019s no guarantee that subdirectories are placed on the same shard as the parent directory, and ZippyDB does not provide any cross-shard transactions, so most recursive filesystem operations are not supported.\n Tectonic\u2019s ZippyDB schema also stores lists as fully \u201cexpanded\u201d combinations of (key,value) pairs. That is, for a directory  foo containing subdirectories  bar and  quux, Tectonic stores two separate keys  (foo, bar) and  (foo, quux), and handles list requests for directory  foo with a prefix-key scan of  foo,. This expanded list format is used to reduce the cost of adding or removing single entries to large directories that already have many millions of files, since Tectonic does not have to deserialize, edit, serialize, and write back a million entry list.\n  Tectonic has single-writer, append-only semantics \u2013 meaning Tectonic prohibits multiple concurrent writers to a file, and files can only be appended to. To ensure single-writer semantics, whenever a client opens a file it is given a write token that is stored with the file in the metadata layer. Any time a client wishes to write to the file, it must include the write token, and only the most up-to-date write token is allowed to mutate the file metadata and write to its chunks.\n  While the control path goes through the metadata layer and ZippyDB, the data path is direct from the client to the chunk storage nodes. This reduces the networking bandwidth required for the system as a whole, as well as the compute required to move the bytes over the network.\n Tectonic\u2019s thick-client has very fine-grained control over its reads and writes, since it goes directly to the chunk storage nodes to read and write individual chunks. This allows the client to be tuned for different workloads, e.g., whether to optimize for durability or latency of writes. The Tectonic client can also tune these parameters per file, and even per block, as opposed to other systems that may enforce a single configuration across the entire filesystem.\n  Tectonic uses the common  quorum commit, or quorum write technique, to optimize clients doing full-block writes \u2013 only requiring a client to durably write to a majority of all chunk replicas of a block in order to commit the block. To illustrate, for a \\(R(3.2)\\) replicated file with 3 replicas  2 Tectonic will only require the client to finish writing to 2 of the replica chunks before considering the block committed \u2013 which helps tail latency  3. If the final 3rd replica chunk write fails, Tectonic\u2019s background maintenance services will fix up the block by repairing the 3rd chunk replica.\n  In addition to this common optimization, Tectonic uses a neat technique called  Reservation Requests to optimize full-block writes, that are similar to hedged requests discussed in  The Tail At Scale. To motivate reservation requests, we\u2019ll first take a little detour and look at hedged requests, their benefits and drawbacks, and why reservation requests might be more suitable for Tectonic\u2019s use case.\n Hedged requests are a latency optimization where instead of sending a single request for a piece of work, you send the request to potentially multiple servers, and accept the first response from the fastest server. The key to not just duplicating a lot of work though is that instead of immediately sending the request to multiple servers, you wait for a bit, where \u201ca bit\u201d means how long you\u2019d expect a normal request to take. If the reply still hasn\u2019t arrived, then you \u201chedge\u201d your bet that this server will respond in a reasonable timeframe and send the same request to another replica.\n    Hedged requests help improve long-tail latency, since you avoid the situation where the client has to wait for a possibly unhealthy node to respond to its request before making any progress. However, a problem with hedged requests is that they can create a blow-up in the amount of work done by the receiving servers, as well as the additional bandwidth you need for the extra requests and responses \u2013 which is of concern for a storage system like Tectonic. In addition, Tectonic clients can\u2019t really just choose another random storage node to write their data to, they have to coordinate with the metadata layer so that the metadata accurately reflects which nodes store which chunks.\n Tectonic instead uses  reservation requests, which are small, ping-like, requests that a client sends to multiple chunk storage nodes to decide which nodes to actually write its data to. Tectonic chooses the chunk storage nodes that respond first as the nodes to do the actual writes to, with the hypothesis that nodes that can respond quickly are not currently overloaded. The reservation requests don\u2019t carry any of the data for actual writing, so they use very little bandwidth, and the processing can be super cheap.\n For example, if a client was writing to a \\(R(3.2)\\) replicated file, the client would first send reservation requests to 5 chunk storage nodes.\n  The 3 storage nodes that respond first are chosen by the client to actually send the 3 write requests to. In this way, the data is still only broadcast to 3 nodes, but the quick health-checking done first via the reservation requests reduces the likelihood that the client will wait on an unhealthy or stuck node, thereby reducing tail latency.\n  Reservation requests don\u2019t use any extra bandwidth or processing, but do have drawbacks compared to hedged requests. Since full-block writes have to first perform these reservation requests, they add a little bit of latency to each of the writes. This is why reservation requests are only used for full-block writes, where the amount of data being written is large enough that this latency overhead is an acceptable tradeoff for better tail latency. I would assume reservation requests work well in practice, but I\u2019d be interested how recent the health-checking and load-balancing signal provided by reservation requests has to be to avoid the worst of the tail latency. I could imagine a system using less frequent checks might still be able to provide the majority of the benefit of reservation requests, while also reducing the amount of work done.\n  Tectonic also optimizes smaller than block-size appends via quorum append, similar to full block writes. The optimization helps reduce tail latency, but for partial block appends instead of full block writes, quorum commit is a wee bit trickier to implement correctly. If you\u2019re writing a whole block, then you don\u2019t have to worry about concurrent writers racing to write to the same block, but with smaller writes this can be a problem.\n To illustrate the possible bugs that can happen, consider a \\(R(3.2)\\) file with a 8MB block size and multiple clients appending to a single block. Client A appends 512 bytes, and successfully commits the append to the first and second chunks, but the write to the third chunk replica fails. Then Client B takes control of the file and appends another 512 bytes, but the 2nd chunk replica fails, and the 1st and 3rd succeed. Finally, client C takes control of the file and appends another 512 bytes, but the 1st chunk write fails, while the 2nd and 3rd succeed. You\u2019re left with the 1st chunk replica at length 1024 bytes (1st &amp; 2nd appends), the 2nd replica at 1024 bytes (1st and 3rd appends), and the 3rd replica at 1024 bytes (2nd &amp; 3rd appends).\n  Readers would see file metadata reporting a block length of 1536 bytes, but none of the actual data chunks are that length! And none of the chunks contain the same data!  And it\u2019s unclear exactly what readers might read while these writes are being done! Or if all the chunks will end up with the same data! Or if the rest of the sentences in this blog post will end in exclamation points!   4\n The way Tectonic deals with these potential problems is to enforce two rules: (1) Only allow the client that created a block to append to it, and (2) The client commits to the metadata layer the new block-length and checksum before acknowledging the quorum append to the application.\n Although the paper doesn\u2019t spell this out explicitly, I presume that a single client will serialize its appends to a given chunk storage node \u2013 that is, if it\u2019s performing a first append and a second append, it will wait for the first append to succeed before writing the second append to the storage node. With this serialization done by a client, and enforcing only a single client can write to a block, our race above cannot happen as the client will wait for the 1st append to happen to a chunk storage node, before writing the 2nd append. This makes sure that multiple writers won\u2019t stomp over each other.\n  Committing the block-length and checksum after each quorum append, but before acknowledging to the application gives readers guarantees about what they can read. It means the application should have read-after-write consistency, since any data that\u2019s been acknowledged by Tectonic to the application, has been durably committed to two chunk storage nodes and the new length committed to the metadata layer. In general, this means that if Tectonic reports a block length of \\(B\\) bytes, then at least \\(B\\) bytes have been comitted to two chunk storage nodes, and any client can read up to \\(B\\) bytes and be guaranteed they\u2019re correct.\n  Many workloads are \u201cwrite once, read rarely\u201d which would imply that the data should be Reed-Solomon encoded rather than replicated to reduce the storage overhead. However, the data is often written interactively, and the write latency is important to the client so it makes sense to use replicated encoding to reduce tail latency  5. It would be nice to take advantage of the improved latency of replicated writes while also having the improved byte efficiency of Reed-Solomon encoding.\n Tectonic is able to have its cake and eat it too by having the client write the block in a replicated encoding, but then once the block is full and sealed, the client will re-encode the block to Reed-Solomon in the background. This way the application gets the improved latency of replicated writes, with all the optimizations we discussed, but the space-efficiency of Reed-Solomon storage. It\u2019s unclear from the paper what happens if the client application crashes, but I assume there is a background service that can re-encode fully written blocks to Reed-Solomon.\n  Tectonic uses   copyset replication to minimize its probability of data loss in the face of coordinated disk failures. Copyset replication is really smart, but we\u2019ll have to back up a bit to discuss the difficult problems and tradeoffs that exist when trying to place data onto disks.\n When choosing which disks to write data to, in a world where disks can fail, there is a tradeoff between the likelihood of data loss and how much data is lost per data loss event. For example, if for all \\(R(3.2)\\) replicated files, you write each chunk replica to a randomly selected disk, it becomes increasingly likely that any 3 disk failures will result in a data loss event for some replicated file. This is because for every block, we choose a random set of 3 disks to store its chunks on, and as we add more blocks to the system, eventually every set of 3 disks will store all the chunk replicas for  some block.\n This means that for random disk selection, when we lose disks due to failures in the datacenter, we have the highest probability of a data loss event. However, the  amount of data lost per data loss event is very low, because of the low probability that a block will have its chunk replicas on exactly the set of disks that fail since they were chosen randomly. One way to think about this is that if 3 disks fail then the  expected value of blocks lost is low, but the probability that at least one block will be lost is high.\n However you could imagine another approach where all the nodes are separated into sets of 3 nodes, called a  copyset. When we want to assign chunks of a block to storage nodes, we first choose a copyset for the block, and then the chunk replicas are assigned to the 3 nodes of the copyset. In a datacenter with 9 nodes, nodes \\([1,2,3]\\) might be one copyset, \\([4,5,6]\\) would be another, and \\([7,8,9]\\) would be the last.\n  In this scheme, there are only 3 three-node failures that would cause data loss, i.e., only a loss of all the nodes of a copyset would cause data loss for a block. This is a very low probability event given that only 3 sets out of a possible \\({9 \\choose 3} = 84\\) three-node sets cause data loss. In comparison, random node replication will eventually make all 84 three-node sets a copyset for  some block, so copyset replication is a 28x improvement over random replication for reducing the probability of data loss. Remember though, that for copyset replication the amount of data lost per data loss event would be quite high \u2013  all of the blocks assigned to the copyset would be lost.\n  While losing all of the data is probably not the right trade off, we\u2019d probably trade off a little bit more data lost per event in order to reduce the likelihood of any data loss event. This is because any amount of data loss incurs such a large fixed overhead of work to recover data that as operators we\u2019d really prefer to avoid it as much as possible. This is our motivation for finding a better way of allocating chunks to disks.\n Besides affecting the probability of data loss, how we assign chunks to nodes also affect other properties of the system that our hypothetical solution will have to deal with. In our naive 3 copyset setup, if node 1 failed, we could only recover that data from node 2 and 3, which could potentially increase the load on those nodes by 50%. For the random disk selection setup, if a node fails we can recover the data from all of the remaining nodes, since the data has been spread uniformly across all 84 copysets. So the random disk selection has the edge here in providing good load-balancing of potential recovery work.\n  However if we broke with our strict copyset setup, and allowed the data on a node to potentially be replicated to a larger number of other nodes, then we could recover from a single node failure faster, and not put as much load on all of the remaining nodes.\n Let\u2019s call the number of nodes that store copies for a single node\u2019s data our  scatter width. In our example above of 9 nodes, and 3 copysets, our scatter width is 2, as only 2 other nodes have copies of any other node\u2019s data \u2013 node 1 has its data also on node 2 and node 3. However, if we introduced 3 more copysets of \\([1,4,7]\\), \\([2,5,8]\\), and \\([3,6,9]\\) then now the data on node 1 could be on either node 2, 3, 4, or 7, so the scatter width would be 4 now \u2013 allowing us to recover from node failures faster.\n  So to summarize, we\u2019d like to have a high scatter width to ensure we can recover data from lots of nodes, but we also want to keep the number of copysets low in order to reduce the probability of a data loss event. Coming up with a scheme to do both of these things is a non-trivial problem.\n The  Copysets paper presents a near optimal solution to this problem called  copyset replication, that aims to create the fewset number of copysets given a scatter width. To put it another way, copyset replication reduces the probability of a data loss event while still allowing good load-balancing between nodes.\n The paper explains how their algorithm is optimal, but the core idea is that you create permutations of all nodes in the system, then form copysets from a permutation by chunking up the permutation into runs of consecutive nodes. You can increase scatter width by creating more permutations, but this will create more copysets since an additional permutation will have a different shuffling of nodes which results in different and more copysets. But the key is that this increase in the number of copysets will be as minimal as possible, keeping the probability of a data loss event as low as possible.\n  When a client needs to write a block, first a node is chosen randomly as the  primary, which constrains the set of copysets down to one per permutation. You could choose a random permutation and its copyset, or in Tectonic\u2019s case the Block layer chooses the copyset from the permutation corresponding to that block ID modulo the number of permutations so that it\u2019s deterministic.\n  While the initial placement is optimal with respect to the copyset scheme, disks will still fail or be taken out for maintenance, so the background rebalancer service also tries to keep a block\u2019s chunks in its original copyset.\n Copyset replication, and Tectonic\u2019\n......", "posttime": "2021-07-26 08:18:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u6784\u9020,tectonic,\u8282\u70b9", "title": "Facebook \u7684\u6784\u9020\u6587\u4ef6\u7cfb\u7edf\uff1aExascale \u7684\u6548\u7387", "title_en": "Facebook's Tectonic Filesystem:Efficiency from Exascale", "transed": 1, "url": "https://paulcavallaro.com/blog/facebook-tectonic-filesystem/", "via": "", "real_tags": ["facebook", "\u6784\u9020", "tectonic", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "128366848b2d1f4a1cb3f28584ca70ab.png", "infoid": 1069742, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Wasp\uff08Web \u5e94\u7528\u7a0b\u5e8f\u89c4\u8303\u8bed\u8a00\uff09\u662f\u4e00\u79cd\u58f0\u660e\u5f0f DSL\uff08\u57df\u7279\u5b9a\u8bed\u8a00\uff09\uff0c\u7528\u4e8e\u4ee5\u66f4\u5c11\u7684\u4ee3\u7801\u5f00\u53d1\u3001\u6784\u5efa\u548c\u90e8\u7f72\u73b0\u4ee3\u5168\u6808 Web \u5e94\u7528\u7a0b\u5e8f\u3002\u5e94\u7528\u7a0b\u5e8f\u3001\u9875\u9762\u3001\u7528\u6237\u3001\u767b\u5f55\u3001\u524d\u7aef\u3001\u751f\u4ea7\u7b49\u6982\u5ff5\u90fd\u878d\u5165\u5230\u8bed\u8a00\u4e2d\uff0c\u5e26\u6765\u4e86\u65b0\u7684\u8868\u8fbe\u6c34\u5e73\uff0c\u8ba9\u60a8\u53ef\u4ee5\u7528\u66f4\u5c11\u7684\u4ee3\u7801\u884c\u5b8c\u6210\u66f4\u591a\u7684\u5de5\u4f5c\u3002\u5728\u4f7f\u7528 Wasp \u63cf\u8ff0\u9ad8\u7ea7\u529f\u80fd\u7684\u540c\u65f6\uff0c\u60a8\u4ecd\u7136\u4f7f\u7528\u81ea\u5df1\u559c\u6b22\u7684\u6280\u672f\uff08\u76ee\u524d\u662f React\u3001NodeJS\u3001Prisma\uff09\u7f16\u5199\u5176\u4f59\u903b\u8f91\u3002\u6ce8\u610f\uff1aWasp \u5904\u4e8e alpha \u9636\u6bb5\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u53d1\u751f\u5f88\u5927\u53d8\u5316\uff0c\u5b58\u5728\u9519\u8bef\u5e76\u9519\u8fc7\u91cd\u8981\u529f\u80fd\u3002 // file: main.wasp app TodoApp { title: &quot;Todo App&quot; } route &quot;/&quot; -&gt; page Main page Main { component: import Main from &quot;@ext/pages/Main.js&quot; // \u5bfc\u5165 React \u7ec4\u4ef6\u3002 } query getTasks { fn: import { getTasks } from &quot;@ext/queries.js&quot; , // \u5bfc\u5165 NodeJS \u4ee3\u7801\u3002\u5b9e\u4f53\uff1a[\u4efb\u52a1]}\u5b9e\u4f53\u4efb\u52a1{=psl id Int@id@default(autoincrement())\u63cf\u8ff0\u5b57\u7b26\u4e32isDone\u5e03\u5c14@default(false)psl=}\u6e90\u6587\u4ef6(.wasp,.js(x),.css,. ..) \u7531 waspc\uff08Wasp \u7f16\u8bd1\u5668\uff09\u7f16\u8bd1\u6210\u60a8\u9009\u62e9\u7684 Web \u6280\u672f\u5806\u6808\uff08\u76ee\u524d\u4e3a React + NodeJS/ExpressJS + Prisma\uff09\u3002\u5feb\u901f\u5165\u95e8\uff1a\u7531\u4e8e\u5b83\u7684\u8868\u73b0\u529b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5f88\u5c11\u7684\u51e0\u884c\u7b80\u6d01\u3001\u4e00\u81f4\u3001\u58f0\u660e\u6027\u7684\u4ee3\u7801\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u548c\u90e8\u7f72\u53ef\u7528\u4e8e\u751f\u4ea7\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u3002\n\u7075\u6d3b\uff1a\u5f53\u60a8\u9700\u8981\u6bd4 Wasp \u63d0\u4f9b\u7684\u66f4\u591a\u63a7\u5236\u65f6\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u73b0\u6709\u6280\u672f\uff08\u4f8b\u5982 js/html/css/...\uff09\u7f16\u5199\u4ee3\u7801\uff0c\u5e76\u5c06\u5176\u4e0e Wasp \u4ee3\u7801\u7ed3\u5408\u4f7f\u7528\uff01\u65e0\u9501\u5b9a\uff1a\u5982\u679c Wasp \u5bf9\u60a8\u6765\u8bf4\u9650\u5236\u592a\u591a\uff0c\u53ea\u9700\u5f39\u51fa\u5e76\u7ee7\u7eed\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u6e90\u4ee3\u7801\u5373\u53ef\u3002\u5728 OSX/Linux \u4e0a\u5b89\u88c5 Wasp\u3002\u4ece\u90a3\u91cc\uff0c\u53ea\u9700\u6309\u7167\u8bf4\u660e\u5728\u4e0d\u5230\u4e00\u5206\u949f\u7684\u65f6\u95f4\u5185\u8fd0\u884c\u60a8\u7684\u7b2c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff01\u8fd9\u662f Wasp Universe \u7684\u4e3b\u8981\u5b58\u50a8\u5e93\uff0c\u5305\u542b\u6838\u5fc3\u4ee3\u7801\uff08\u4e3b\u8981\u662f waspc - Wasp \u7f16\u8bd1\u5668\uff09\u548c\u652f\u6301\u6750\u6599\u3002\u76ee\u524d\uff0cWasp \u5904\u4e8e alpha \u9636\u6bb5\u5e76\u5177\u6709\u8db3\u591f\u7684\u529f\u80fd\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u5f00\u53d1\u57fa\u672c\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff01\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u5728\u67d0\u4e9b\u5730\u65b9\u7f3a\u5c11\u7075\u6d3b\u6027\u6216\u7f3a\u5c11\u4e00\u4e9b\u66f4\u5927\u7684\u529f\u80fd\uff0c\u4f46\u57fa\u7840\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u5728\u6dfb\u52a0\u5728\u5b83\u4eec\u4e4b\u4e0a\u3002\u4e07\u4e00\u4f60\u5361\u4f4f\u4e86\uff0c\u4f60\u53ef\u4ee5\u83b7\u53d6\u751f\u6210\u7684\u4ee3\u7801\u5e76\u7ee7\u7eed\u5b83\u3002\u968f\u7740 Wasp \u7684\u8fdb\u4e00\u6b65\u53d1\u5c55\uff0c\u5b83\u5e94\u8be5\u5141\u8bb8\u5f00\u53d1\u8d8a\u6765\u8d8a\u590d\u6742\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u65e0\u9700\u5f39\u51fa\uff01\u867d\u7136\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u5728\u672a\u6765\u652f\u6301\u591a\u4e2a Web \u6280\u672f\u5806\u6808\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u4e13\u6ce8\u4e8e\u7279\u5b9a\u5806\u6808\uff1aReact + react-query\u3001NodeJS + ExpressJS\u3001Prisma\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8003\u8651\u5230\u8d8b\u52bf\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u6539\u53d8\u8fd9\u4e00\u70b9\uff0c\u4f46\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u8fd9\u5bf9\u4e8e\u5f00\u53d1\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u7684\u76ee\u7684\u6765\u8bf4\u975e\u5e38\u6709\u7528\u3002\u6700\u597d\u7684\u8d77\u70b9\u662f\u67e5\u770b waspc/\uff0c\u5728\u90a3\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u6b21\u8d21\u732e\u8005\u7684\u8be6\u7ec6\u6b65\u9aa4 + \u6709\u5173 Wasp \u7f16\u8bd1\u5668\u7684\u6280\u672f\u7ec6\u8282\u3002\n\u5373\u4f7f\u60a8\u4e0d\u6253\u7b97\u63d0\u4ea4\u4efb\u4f55\u4ee3\u7801\uff0c\u53ea\u8981\u52a0\u5165\u6709\u5173 discord \u7684\u8ba8\u8bba\u5e76\u63d0\u4f9b\u60a8\u7684\u53cd\u9988\u5c31\u5df2\u7ecf\u5f88\u68d2\u5e76\u4e14\u6709\u5f88\u5927\u5e2e\u52a9\uff08\u6fc0\u52b1\u6211\u4eec\u5e76\u5e2e\u52a9\u6211\u4eec\u5f04\u6e05\u695a\u5982\u4f55\u5851\u9020 Wasp\uff09\uff01", "note_en": "Wasp ( Web  Application  Specification Language) is a declarative DSL (domain-specific language) for developing, building and deploying modern full-stack web apps with less code.\n Concepts such as  app,  page,  user,  login,  frontend,  production, etc. are baked into the language, bringing a new level of expressiveness and allowing you to get more work done with fewer lines of code.\n While describing high-level features with Wasp, you still write the rest of your logic in your favorite technologies (currently React, NodeJS, Prisma).\n NOTE: Wasp is in alpha and is therefore likely to change a lot, have bugs and miss important features.\n // file: main.wasp app  TodoApp  {  title:  &#34;Todo App&#34; } route   &#34;/&#34;  - &gt;  page  Main page  Main  { component:  import  Main  from  &#34;@ext/pages/Main.js&#34;  // Importing React component. } query  getTasks  { fn:  import  {  getTasks  }  from  &#34;@ext/queries.js&#34; ,  // Importing NodeJS code. entities:  [ Task ] } entity  Task  { = psl  id  Int @ id @ default ( autoincrement ( ) )  description   String  isDone  Boolean @ default ( false ) psl = }\n Source files ( .wasp,  .js(x),  .css, ...) are compiled by  waspc (Wasp compiler) into the web technology stack of your choice (currently React + NodeJS/ExpressJS + Prisma).\n   Quick start: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.\n Flexible: When you need more control than Wasp offers, you can write code in existing technologies such as js/html/css/... and combine it with Wasp code!\n No lock-in: If Wasp becomes too limiting for you, simply eject and continue with the generated source code, which is human-readable.\n     to install Wasp on OSX/Linux. From there, just follow the instructions to run your first app in less then a minute!\n   This is the main repo of the Wasp universe, containing core code (mostly  waspc - Wasp compiler) and the supporting materials.\n  Currently, Wasp is in alpha and has enough features so that you can develop a basic web app in it!You might find that it misses flexibility in some places or that some bigger features are missing, but the basics are there and we are now adding on top of them.In the case you get stuck, you can take the generated code and continue with it.As Wasp grows further, it should allow the development of web apps of increasing complexity, without the need to eject!\n While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma. We might yet change that as time goes, taking trends into account, but for now, this is serving us well for the purpose of developing compiler and language.\n   The best place to start is to check out  waspc/, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.\n Even if you don&#39;t plan to submit any code, just joining the discussion on discord    and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!", "posttime": "2021-07-26 08:18:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u7f16\u7a0b,programming,web,wasp", "title": "Wasp \u2013 \u4e00\u79cd\u4e86\u89e3 Web \u5e94\u7528\u7a0b\u5e8f\u662f\u4ec0\u4e48\u7684\u7f16\u7a0b\u8bed\u8a00", "title_en": "Wasp \u2013 A programming language that understands what a web app is", "transed": 1, "url": "https://github.com/wasp-lang/wasp", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u7f16\u7a0b", "web", "wasp"]}]