[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1014993, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Safari\u6280\u672f\u9884\u89c8\u7248111\u73b0\u5728\u53ef\u4f9bMacOS Big Sur\u548cMacOS Catalina\u4e0b\u8f7d\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5b89\u88c5\u4e86Safari\u6280\u672f\u9884\u89c8\uff0c\u60a8\u53ef\u4ee5\u5728MacOS\u7cfb\u7edf\u9996\u9009\u9879\u7684\u8f6f\u4ef6\u66f4\u65b0\u7a97\u683c\u4e2d\u8fdb\u884c\u66f4\u65b0\u3002\n\u5982\u679c\u65e0\u6cd5\u5728\u753b\u5e03\u9009\u9879\u5361\u4e2d\u63d0\u53d6\u7740\u8272\u5668\u6e90\uff0c\u5219\u6dfb\u52a0\u9519\u8bef\u6d88\u606f(R264045)\u3002\n\u4fee\u590d\u4e86\u68c0\u67e5JSContext\u65f6\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4e0d\u586b\u5145\u5806\u5feb\u7167\u5bf9\u8c61\u56fe\u5f62\u89c6\u56fe\u7684\u95ee\u9898(R264124)\u3002\n\u66f4\u65b0\u4e86MacOS Big Sur\u4e2d\u672a\u505c\u9760\u7684Web Inspector\u7684\u6807\u9898\u680f\u4e3a\u767d\u8272(R264204)\u3002\n\u4fee\u590d\u4e86chrome.tab.create()\uff0c\u4ee5\u4fbf\u5b83\u5c06\u6709\u6548\u7684tab\u5bf9\u8c61\u4f20\u9012\u7ed9\u76f8\u5bf9\u6269\u5c55URL\u7684\u56de\u8c03\u3002\n\u901a\u8fc7\u786e\u4fdd\u5728\u6eda\u52a8\u7ebf\u7a0b\u4e0a\u6b63\u5728\u8fdb\u884c\u7528\u6237\u6eda\u52a8\u65f6\u4e0d\u4f1a\u53d1\u751f\u5e03\u5c40\u89e6\u53d1\u7684\u6eda\u52a8\u6355\u6349\uff0c\u4fee\u590d\u4e86\u6eda\u52a8\u5361\u987f\u95ee\u9898(R264203)\u3002\n\u6dfb\u52a0\u4e86\u6253\u5f00\u5f39\u51fa\u7a97\u53e3\u5e76\u83b7\u53d6\u7528\u6237\u4ea4\u4e92\u7684\u529f\u80fd\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4ee3\u8868\u672c\u5e94\u81ea\u5df1\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u7f51\u7ad9\uff0c\u5c06\u5b58\u50a8\u8bbf\u95eeAPI\u4f5c\u4e3a\u4e34\u65f6\u8c03\u7528(R263992)", "note_en": "Safari Technology Preview Release 111 is now  available for download for macOS Big Sur and macOS Catalina. If you already have Safari Technology Preview installed, you can update in the Software Update pane of System Preferences on macOS.\n   Added an error message if unable to fetch shader source in the Canvas tab ( r264045)\n Fixed Heap Snapshot Object Graph view not getting populated in some cases when inspecting a JSContext ( r264124)\n Updated the title bar of undocked Web Inspector to be white in macOS Big Sur ( r264204)\n  Fixed  chrome.tabs.create() so it passes a valid tab object to the callback for relative extension URLs\n  Fixed stuttery scrolling by ensuring a layout-triggered scroll snap does not happen if a user scroll is in progress on the scrolling thread ( r264203)\n      Added the capability to open a popup and get user interaction so we can call the Storage Access API as a quirk, on behalf of websites that should be doing it themselves ( r263992)", "posttime": "2020-07-30 02:32:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6280\u672f,notes,\u6eda\u52a8", "title": "Safari\u6280\u672f\u9884\u89c8\u7248111\u53d1\u884c\u8bf4\u660e", "title_en": "Release Notes for Safari Technology Preview 111", "transed": 1, "url": "https://webkit.org/blog/10967/release-notes-for-safari-technology-preview-111/", "via": "", "real_tags": ["\u6280\u672f", "notes", "\u6eda\u52a8"]}, {"category": "", "categoryclass": "", "imagename": "5753a5b5464ad0fd38cb8c3bd7ad3400.jpg", "infoid": 1014992, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u963f\u59c6\u65af\u7279\u4e39--130\u5e74\u524d\uff0c\u6587\u68ee\u7279\u00b7\u68b5\u9ad8(Vincent Van Gogh)\u5728\u6cd5\u56fd\u5965\u5f17\u65af\u6cb3\u7554\u6b27\u4f0a\u65af\u7684\u4e00\u5bb6\u5ba2\u6808\u7684\u623f\u95f4\u91cc\u9192\u6765\uff0c\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u5e26\u7740\u4e00\u5757\u753b\u5e03\u51fa\u95e8\u3002\u90a3\u5929\u665a\u4e0a\uff0c\u4ed6\u5e26\u7740\u81f4\u547d\u7684\u67aa\u4f24\u56de\u5230\u4e86\u5ba2\u6808\u3002\u4e24\u5929\u540e\uff0c\u4e5f\u5c31\u662f1890\u5e747\u670829\u65e5\uff0c\u4ed6\u53bb\u4e16\u4e86\u3002\n\u957f\u671f\u4ee5\u6765\uff0c\u5b66\u8005\u4eec\u4e00\u76f4\u5728\u731c\u6d4b\u67aa\u51fb\u4e8b\u4ef6\u53d1\u751f\u5f53\u5929\u7684\u987a\u5e8f\uff0c\u73b0\u5728\u6cd5\u56fd\u7814\u7a76\u4eba\u5458\u6c83\u7279\u00b7\u8303\u5fb7\u7ef4\u6069(Wouter Van Der Veen)\u8868\u793a\uff0c\u4ed6\u53d1\u73b0\u4e86\u8c1c\u5e95\u7684\u4e00\u5927\u5757\uff1a\u68b5\u9ad8\u521b\u4f5c\u4ed6\u6700\u540e\u4e00\u5e45\u753b\u300a\u6811\u6839\u300b(Tree Roots)\u7684\u786e\u5207\u4f4d\u7f6e\u3002\u8fd9\u4e00\u53d1\u73b0\u6709\u52a9\u4e8e\u66f4\u597d\u5730\u7406\u89e3\u8fd9\u4f4d\u827a\u672f\u5bb6\u662f\u5982\u4f55\u5ea6\u8fc7\u4ed6\u5de5\u4f5c\u7684\u6700\u540e\u4e00\u5929\u7684\u3002\n\u68b5\u9ad8\u7814\u7a76\u6240(Van Gogh Institute)\u7684\u79d1\u5b66\u4e3b\u7ba1\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u201c\u6211\u4eec\u73b0\u5728\u77e5\u9053\u4ed6\u5728\u88ab\u67aa\u6740\u524d\u7684\u6700\u540e\u4e00\u5929\u5728\u505a\u4ec0\u4e48\u3002\u201d\u8be5\u7814\u7a76\u6240\u662f\u4e00\u5bb6\u975e\u8425\u5229\u6027\u7ec4\u7ec7\uff0c\u65e8\u5728\u4fdd\u62a4\u8fd9\u4f4d\u827a\u672f\u5bb6\u5728\u5965\u5f17\u65af\u6cb3\u7554\u5965\u4f2f\u65e5\u00b7\u62c9\u6b66\u9152\u5e97(Auberge Ravoux)\u7684\u5c0f\u623f\u95f4\u3002\u201c\u6211\u4eec\u77e5\u9053\u4ed6\u82b1\u4e86\u4e00\u6574\u5929\u7684\u65f6\u95f4\u753b\u8fd9\u5e45\u753b\uff0c\u201d\u8303\u5fb7\u7ef4\u6069\u8bf4\u3002\n\u8303\u5fb7\u7ef4\u6069\u53d1\u73b0\uff0c\u201c\u6811\u6839\u201d\u753b\u5728\u9053\u6bd4\u5c3c\u8857(Rue Daubigny)\u4e0a\uff0c\u8fd9\u662f\u4e00\u6761\u7a7f\u8fc7\u5965\u5f17\u65af\u6cb3\u7554\u5965\u4f0a\u65af(Auvers-Sur-Oise)\u7684\u4e3b\u5e72\u9053\uff0c\u4f4d\u4e8e\u5df4\u9ece\u4ee5\u5317\u7ea620\u82f1\u91cc(\u7ea6\u540820\u516c\u91cc)\u5904\u3002\u4eca\u5929\uff0c\u5728\u90a3\u91cc\u7684\u4e00\u5ea7\u5c0f\u5c71\u7684\u659c\u5761\u4e0a\uff0c\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u7ea0\u7ed3\u7684\u3001\u591a\u8282\u7684\u6811\u6839\u548c\u6811\u6869\uff0c\u8ddd\u79bb\u68b5\u9ad8\u4e00\u751f\u6700\u540e70\u5929\u751f\u6d3b\u7684\u5965\u4f2f\u5409\u62c9\u6c83(Auberge Ravoux)\u53ea\u6709500\u82f1\u5c3a\u3002\n\u963f\u59c6\u65af\u7279\u4e39\u68b5\u9ad8\u535a\u7269\u9986\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u8ba4\u53ef\u4e86\u8fd9\u4e00\u53d1\u73b0\u3002\u5468\u4e8c\uff0c\u535a\u7269\u9986\u9986\u957f\u827e\u7c73\u4e3d\u00b7\u6208\u767b\u514b(Emily Gordenker)\u51fa\u5e2d\u4e86\u8be5\u5730\u70b9\u7684\u63ed\u5e55\u4eea\u5f0f\u3002\n\u68b5\u9ad8\u535a\u7269\u9986\u7684\u9ad8\u7ea7\u7814\u7a76\u5458Louis van Tilborgh\u5728\u63a5\u53d7\u91c7\u8bbf\u65f6\u8bf4\uff0c\u8fd9\u4e00\u53d1\u73b0\u662f\u201c\u4e00\u79cd\u89e3\u8bfb\uff0c\u4f46\u770b\u8d77\u6765\u786e\u5b9e\u662f\u771f\u7684\u3002\u201d\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u4ed6\u4ece94\u5c81\u7684\u6cd5\u56fd\u5987\u5973\u73cd\u5b81\u00b7\u5fb7\u7a46\u96f7\u5179(Janine Demuriez)\u90a3\u91cc\u501f\u6765\u76841905\u5e74\u5de6\u53f3\u7684\u5965\u5f17\u65af\u7684\u7167\u7247\uff0c\u8ba9\u4ed6\u770b\u5230\u4e86\u8fd9\u4e00\u53d1\u73b0\u3002\u5979\u6536\u96c6\u4e86\u6570\u767e\u5f20\u5386\u53f2\u660e\u4fe1\u7247\u3002\u5176\u4e2d\u4e00\u5f20\u7167\u7247\u663e\u793a\uff0c\u9053\u6bd4\u5c3c\u8857\u4e0a\u6709\u4e00\u4e2a\u9a91\u81ea\u884c\u8f66\u7684\u4eba\uff0c\u505c\u5728\u9661\u5ced\u7684\u5824\u575d\u65c1\uff0c\u90a3\u91cc\u7684\u6811\u6839\u6e05\u6670\u53ef\u89c1\u3002\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u5728\u6cd5\u56fd\u65af\u7279\u62c9\u65af\u5821\u7684\u5bb6\u4e2d\uff0c\u5728\u5c01\u9501\u671f\u95f4\uff0c\u4ed6\u7684\u5c4f\u5e55\u4e0a\u6070\u597d\u6709\u4e00\u5f20\u660e\u4fe1\u7247\uff0c\u8fd9\u65f6\u4ed6\u8111\u6d77\u4e2d\u7a81\u7136\u6d6e\u73b0\u51fa\u4e00\u4e2a\u5ff5\u5934\uff1a\u660e\u4fe1\u7247\u8ba9\u4ed6\u60f3\u8d77\u4e86\u201c\u6811\u6839\u201d(Tree Roots)\u3002\u4ed6\u62ff\u51fa\u4e86\u8fd9\u5e45\u753b\u7684\u7535\u5b50\u7248\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u5e76\u6392\u6bd4\u8f83\u3002\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u8fd9\u5f20\u660e\u4fe1\u7247\u201c\u4e0d\u662f\u4efb\u4f55\u4eba\u90fd\u627e\u4e0d\u5230\u7684\u79d8\u5bc6\u6587\u4ef6\u201d\u3002\u201c\u5f88\u591a\u4eba\u5df2\u7ecf\u770b\u8fc7\u4e86\uff0c\u5e76\u8ba4\u51fa\u4e86\u4e3b\u9898\uff0c\u6811\u6839\u7684\u4e3b\u9898\u3002\u5b83\u5c31\u85cf\u5728\u663e\u773c\u7684\u5730\u65b9\u3002\u201c\u3002\n\u7531\u4e8e\u65e0\u6cd5\u4eb2\u81ea\u4ece\u65af\u7279\u62c9\u65af\u5821\u51fa\u53d1\uff0c\u8303\u5fb7\u7ef4\u6069\u6253\u7535\u8bdd\u7ed9\u4f4f\u5728\u5965\u5f17\u65af\u7684\u68b5\u9ad8\u753b\u5eca\u8001\u677f\u591a\u7c73\u5c3c\u514b-\u67e5\u5c14\u65af\u00b7\u8a79\u68ee\u65af(Dominique-Charles Janssens)\uff0c\u8bf7\u4ed6\u53bb\u770b\u770b\u8fd9\u4e00\u5730\u533a\u3002\n\u201c\u6211\u4f1a\u8bf4\uff0c\u4ecd\u670945%\u523050%\u7684\u4eba\u5728\u90a3\u91cc\uff0c\u201d\u8a79\u68ee\u65af\u5728\u7535\u8bdd\u91c7\u8bbf\u4e2d\u8bf4\uff0c\u4ed6\u6307\u7684\u662f\u6839\u90e8\u7684\u7ea0\u7f20\u3002\u201c\u4ed6\u4eec\u780d\u6389\u4e86\u4e00\u4e9b\u6811\uff0c\u6811\u4e0a\u957f\u6ee1\u4e86\u5e38\u6625\u85e4\uff0c\u4f46\u6211\u4eec\u780d\u6389\u4e86\u4e00\u4e9b\u3002\u201d\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u68b5\u9ad8\u4f1a\u6cbf\u7740\u9053\u6bd4\u5c3c\u8857\u8d70\u5230\u9547\u4e0a\u7684\u6559\u5802\uff0c\u4ed6\u57281890\u5e746\u6708\u4e3a\u201c\u5965\u5f17\u65af\u7684\u6559\u5802\u201d(The Church At Auvers)\u753b\u4e86\u8fd9\u5ea7\u6559\u5802\uff0c\u7136\u540e\u53bb\u4e86\u57ce\u5916\u5e7f\u9614\u7684\u9ea6\u7530\uff0c7\u6708\u4ed6\u5728\u90a3\u91cc\u753b\u4e86\u201c\u4e4c\u9e26\u9ea6\u7530\u201d(Wheatfield With Crows)\u3002\n\u5173\u4e8e\u54ea\u5e45\u753b\u662f\u68b5\u9ad8\u7684\u6700\u540e\u4e00\u5e45\u4f5c\u54c1\uff0c\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5b58\u5728\u4e89\u8bae\uff0c\u56e0\u4e3a\u4ed6\u503e\u5411\u4e8e\u4e0d\u786e\u5b9a\u4ed6\u7684\u753b\u7684\u65e5\u671f\u3002\u5f88\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u201c\u4e4c\u9e26\u9ea6\u7530\u201d\uff0c\u56e0\u4e3aVincente Minnelli 1956\u5e74\u7684\u4f20\u8bb0\u7247\u201c\u751f\u547d\u7684\u6b32\u671b\u201d\u63cf\u8ff0\u4e86\u67ef\u514b\u00b7\u9053\u683c\u62c9\u65af(Kirk Douglas)\u9970\u6f14\u7684\u68b5\u9ad8(Van Gogh)\u5728\u75af\u72c2\u65f6\u753b\u7684\u753b\uff0c\u5c31\u5728\u81ea\u6740\u4e4b\u524d\u3002\n\u5b89\u5fb7\u70c8\u65af\u00b7\u90a6\u683c(Andries Bonger)\u662f\u6587\u68ee\u7279\u7684\u54e5\u54e5\u897f\u5965\u00b7\u68b5\u9ad8(Theo Van Gogh)\u7684\u59b9\u592b\uff0c\u4ed6\u5199\u4e0b\u4e86\u56f4\u7ed5\u6587\u68ee\u7279\u6b7b\u4ea1\u7684\u4e00\u4e9b\u4e8b\u4ef6\u3002\u4ed6\u5728\u4e00\u5c01\u4fe1\u4e2d\u6307\u51fa\uff0c\u201c\u5728\u6587\u68ee\u7279\u53bb\u4e16\u7684\u524d\u4e00\u5929\u65e9\u4e0a\uff0c\u4ed6\u753b\u4e86\u4e00\u5e45\u68ee\u6797\u666f\u8c61\uff0c\u5145\u6ee1\u4e86\u9633\u5149\u548c\u751f\u547d\u3002\u201d\n2012\u5e74\uff0c\u68b5\u9ad8\u535a\u7269\u9986(Van Gogh Museum)\u53d1\u8868\u4e86\u8303\u8482\u5c14\u5821\u548c\u4f2f\u7279\u00b7\u6885\u65af(Bert Maes)\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u8ba4\u4e3a\u8fd9\u5c01\u4fe1\u63d0\u5230\u4e86\u535a\u7269\u9986\u6536\u85cf\u7684\u672a\u5b8c\u6210\u7684\u6cb9\u753b\u201c\u6811\u6839\u201d(Tree Roots)\u3002\u8fd9\u4e00\u8bf4\u6cd5\u73b0\u5728\u57fa\u672c\u4e0a\u5df2\u7ecf\u88ab\u5b66\u8005\u4eec\u63a5\u53d7\u4e86\u3002\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u7531\u4e8e\u5149\u5728\u6811\u6839\u4e0a\u7684\u63cf\u7ed8\u65b9\u5f0f\uff0c\u4ed6\u8ba4\u4e3a\u68b5\u9ad8\u5728\u4e0b\u53485\u70b9\u5de6\u53f3\u7ed3\u675f\u65f6\u6b63\u5728\u770b\u4ed6\u7684\u4e3b\u9898\u3002\u6216\u4e0b\u53486\u70b9\u3002\u4ed6\u8bf4\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u610f\u5473\u7740\u68b5\u9ad8\u53ef\u80fd\u82b1\u4e86\u4e00\u6574\u5929\u7684\u65f6\u95f4\u753b\u753b\u3002\n\u8303\u5fb7\u7ef4\u6069\u8865\u5145\u8bf4\uff0c\u65b0\u7684\u8bc1\u636e\u6311\u6218\u4e86\u53f2\u8482\u6587\u00b7\u5948\u83f2(Steven Nafeh)\u548c\u683c\u96f7\u6208\u91cc\u00b7\u6000\u7279\u00b7\u53f2\u5bc6\u65af(Gregory White Smith)\u57282011\u5e74\u51fa\u7248\u7684\u4f20\u8bb0\u201c\u68b5\u9ad8\uff1a\u751f\u6d3b\u201d(Van Gogh\uff1aThe Life)\u4e2d\u63d0\u51fa\u7684\u7406\u8bba\u3002\u4ed6\u4eec\u8fa9\u79f0\uff0c\u68b5\u9ad8\u4e0d\u662f\u81ea\u6740\uff0c\u800c\u662f\u53ef\u80fd\u559d\u9189\u4e86\uff0c\u5e76\u4e0e\u4e24\u4e2a\u5c0f\u7537\u5b69\u4e89\u5435\uff0c\u7136\u540e\u4e24\u4e2a\u5c0f\u7537\u5b69\u5728\u8ddd\u79bbAuberge Ravoux\u4e0d\u8fdc\u7684\u5730\u65b9\u610f\u5916\u6740\u6b7b\u4e86\u4ed6\u3002\u8303\u5fb7\u7ef4\u6069\u5bf9\u201c\u6811\u6839\u201d\u7684\u7814\u7a76\u5c06\u4e8e\u5468\u4e8c\u5728\u6cd5\u56fd\u51fa\u7248\u4e00\u672c\u4e66\uff0c\u5e76\u5c06\u4ee5\u6570\u5b57\u5f62\u5f0f\u63a8\u51fa\u82f1\u6587\u7248\u672c\u3002\n\u8303\u5fb7\u7ef4\u6069\u8bf4\uff0c\u201c\u73b0\u5728\u6211\u4eec\u77e5\u9053\u4ed6\u6574\u5929\u90fd\u5728\u753b\u753b\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u95f4\u5c31\u66f4\u5c11\u4e86\u3002\u201d\n\u5948\u98de\u56de\u5e94\u8bf4\uff0c\u4e0d\u53ef\u80fd\u6839\u636e\u5149\u7ebf\u7684\u89d2\u5ea6\u4e3a\u4e00\u5e45\u753b\u52a0\u65f6\u95f4\u6233\u3002\u201c\u8fd9\u4e0d\u662f\u4e00\u5f20\u7167\u7247\uff1b\u8fd9\u662f\u4e00\u5e45\u753b\uff0c\u201d\u4ed6\u5728\u63a5\u53d7\u7535\u8bdd\u91c7\u8bbf\u65f6\u8bf4\u3002\u201c\u68b5\u9ad8\u7684\u7ed8\u753b\u6709\u4e9b\u62bd\u8c61\uff0c\u4ed6\u603b\u662f\u4ecb\u7ecd\u5f88\u591a\u7ed8\u753b\u4e0a\u7684\u53d1\u660e\uff0c\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u6240\u4ee5\u5f88\u96be\u8bf4\u4ed6\u662f\u4eb2\u773c\u770b\u5230\u7684\u5149\uff0c\u8fd8\u662f\u53ea\u662f\u5728\u753b\u5e03\u4e0a\u521b\u9020\u51fa\u6765\u7684\u5149\u3002\n\u5948\u83f2\u8bf4\uff0c\u8fd9\u4e00\u53d1\u73b0\u751a\u81f3\u53ef\u4ee5\u652f\u6301\u4ed6\u7684\u8c0b\u6740\u8bba\u3002\u4ed6\u8bf4\uff1a\u201c\u4ed6\u6574\u5929\u51fa\u53bb\u753b\u753b\uff0c\u4e0d\u53ea\u662f\u4e00\u5e45\u666e\u901a\u7684\u753b\uff0c\u800c\u662f\u4e00\u5e45\u975e\u5e38\u91cd\u8981\u7684\u753b\uff0c\u8fd9\u8868\u660e\u4ed6\u53ef\u80fd\u5e76\u6ca1\u6709\u6291\u90c1\u3002\u201d\u201c\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u662f\u4e00\u4e2a\u5bcc\u6709\u6210\u6548\u7684\u6b63\u5e38\u4e00\u5929\uff0c\u8fd9\u4e0e\u4ed6\u53ef\u80fd\u4f1a\u53bb\u81ea\u6740\u7684\u60f3\u6cd5\u80cc\u9053\u800c\u9a70\u3002\u201d\n\u8303\u5fb7\u7ef4\u6069\u5148\u751f\u540c\u610f\u4e00\u70b9\u3002\u4ed6\u8bf4\uff1a\u201c\u8fd9\u8bc1\u5b9e\u4e86\u76ee\u524d\u5927\u591a\u6570\u76ee\u51fb\u8005\u6240\u8bf4\u7684\u4e00\u5207\uff0c\u5373\u4ed6\u5728\u6700\u540e\u51e0\u5929\u7684\u884c\u4e3a\u5b8c\u5168\u6b63\u5e38\u3002\u201d\u201c\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u4ed6\u6709\u5371\u673a\u3002\u201d\n\u4e0d\u8fc7\uff0c\u8303\u5fb7\u7ef4\u6069\u5148\u751f\u575a\u6301\u8ba4\u4e3a\u68b5\u9ad8\u662f\u81ea\u6740\u8eab\u4ea1\u7684\uff0c\u8fd9\u4e5f\u662f\u68b5\u9ad8\u535a\u7269\u9986\u7684\u5b98\u65b9\u7acb\u573a\u3002\n\u68b5\u9ad8\u57281882\u5e74\u4f4f\u5728\u6d77\u7259\u65f6\u4e5f\u753b\u8fc7\u6811\u6839\u3002\u4ed6\u5728\u4e00\u5c01\u4fe1\u4e2d\u5411\u4ed6\u7684\u5144\u5f1f\u897f\u5965\u63cf\u8ff0\u4e86\u8fd9\u4ef6\u827a\u672f\u54c1\u3002\n\u4ed6\u5199\u9053\uff0c\u4ed6\u5e0c\u671b\u8fd9\u68f5\u6811\u201c\u8868\u8fbe\u4e00\u4e9b\u751f\u6d3b\u7684\u6323\u624e\u201d\uff0c\u8ba4\u4e3a\u5b83\u201c\u75af\u72c2\u800c\u70ed\u60c5\u5730\u624e\u6839\u4e8e\u5927\u5730\uff0c\u4f46\u5374\u88ab\u66b4\u98ce\u96e8\u6495\u88c2\u4e86\u4e00\u534a\u201d\u3002\n\u201c\u7528\u8fd9\u5e45\u753b\u7ed3\u675f\u4ed6\u7684\u751f\u547d\u5f88\u6709\u610f\u4e49\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u8fd9\u5e45\u753b\u63cf\u7ed8\u4e86\u751f\u547d\u7684\u6323\u624e\uff0c\u4ee5\u53ca\u4e0e\u6b7b\u4ea1\u7684\u6597\u4e89\u3002\u8fd9\u5c31\u662f\u4ed6\u7559\u4e0b\u7684\u4e1c\u897f\u3002\u8fd9\u662f\u4e00\u5f20\u5f69\u8272\u7684\u544a\u522b\u4fe1\u3002\u201c", "note_en": "AMSTERDAM \u2014 One hundred and thirty years ago, Vincent van Gogh awoke in his room at an inn in Auvers-sur-Oise, France, and went out, as he usually did, with a canvas to paint. That night, he returned to the inn with a fatal gunshot wound. He died two days later, on July 29, 1890.\n Scholars have long speculated about the sequence of events on the day of the shooting, and now Wouter van der Veen, a researcher in France, says he has discovered a large piece of the puzzle: the precise location where van Gogh created his final painting, \u201c Tree Roots.\u201d The finding could help to better understand how the artist spent his final day of work.\n  \u201cWe now know what he was doing during his last day\u201d before he was shot, said Mr. van der Veen, the scientific director of the Van Gogh Institute, a nonprofit established to preserve the artist\u2019s tiny room at the Auberge Ravoux, the inn in Auvers-sur-Oise. \u201cWe know that he spent all day painting this painting,\u201d Mr. van der Veen noted.\n \u201cTree Roots\u201d was painted on the Rue Daubigny, a main road through Auvers-sur-Oise, which is about 20 miles north of Paris, Mr. van der Veen found. The tangled, gnarled tree roots and stumps can still be seen in the slope of a hill there today, just 500 feet from the Auberge Ravoux, where van Gogh spent the last 70 days of his life.\n  Researchers at the Van Gogh Museum in Amsterdam have endorsed the finding. On Tuesday, the director of the museum, Emilie Gordenker, attended an unveiling of the spot.\n Louis van Tilborgh, a senior researcher at the Van Gogh Museum, said in an interview that the finding was \u201can interpretation, but it looks like indeed it is true.\u201d\n Mr. van der Veen said that he was pointed toward the discovery while looking at images of Auvers from about 1905, which he had borrowed from Janine Demuriez, a 94-year-old Frenchwoman who has collected hundreds of historical postcards. One shows a cyclist on the Rue Daubigny, stopping next to a steep embankment, where tree roots are clearly visible.\n  Mr. van der Veen said that he just happened to have the postcard on his screen at home in Strasbourg, France, during lockdown when something clicked in his mind: The postcard was reminiscent of \u201cTree Roots.\u201d He pulled up a digital version of the painting, and compared them side by side.\n The postcard is \u201cnot a secret hidden document that nobody can find,\u201d Mr. van der Veen said. \u201cA lot of people have already seen it, and recognize the subject, the motif of tree roots. It was hidden in plain sight.\u201d\n Because he was unable to travel from Strasbourg himself, Mr. van der Veen called Dominique-Charles Janssens, the owner of the Van Gogh Institute who was in Auvers, and asked him to take a look at the area.\n \u201cI\u2019d say 45 to 50 percent is still there,\u201d Mr. Janssens said in a telephone interview, referring to the entanglement of roots. \u201cThey cut some of the trees down, and it was covered with ivy, but we took some of that down.\u201d\n Van Gogh would have walked along the Rue Daubigny to get to the town\u2019s church, which he painted for  \u201cThe Church at Auvers\u201d in June 1890, and to make his way to the sprawling wheat fields just outside of town, where he painted  \u201cWheatfield With Crows\u201d in July, Mr. van der Veen said.\n   There has long been debate about which painting was van Gogh\u2019s last work, because he tended not to date his paintings. Many people believe it was \u201cWheatfield With Crows,\u201d because Vincente Minnelli\u2019s 1956 biopic  \u201cLust for Life\u201d depicts van Gogh, played by Kirk Douglas, painting that work as he goes mad, just before killing himself.\n Andries Bonger, who wrote down some of the events surrounding Vincent\u2019s death and was the brother-in-law of Theo van Gogh, Vincent\u2019s brother, noted in a letter, \u201cThe morning before his death, he had painted a forest scene, full of sun and life.\u201d\n In 2012, the Van Gogh Museum published a paper by Mr. van Tilborgh and Bert Maes arguing that the letter referred to \u201cTree Roots,\u201d an unfinished painting in the museum\u2019s collection. That claim has now largely been accepted by scholars.\n  Because of the way light is depicted on the roots, Mr. van der Veen says he believes that van Gogh was looking at his subject matter at the end of the afternoon, about 5 p.m. or 6 p.m. He says he thinks this means that van Gogh probably spent the entire day painting.\n Mr. van der Veen added that the new evidence challenged a theory put forward in 2011 by Steven Naifeh and Gregory White Smith in their biography, \u201cVan Gogh: The Life.\u201d They argued that van Gogh did not commit suicide, but may have gotten drunk and argued with two young boys, who then accidentally killed him, not far from the Auberge Ravoux. Mr. van der Veen\u2019s research on \u201cTree Roots\u201d will be published in a book in France on Tuesday, and will also be available in English in  digital form.\n \u201cNow that we know he was painting all day, there was even less time for that to happen,\u201d Mr. van der Veen said.\n Mr. Naifeh responded that it would be impossible to time-stamp a painting based on the angle of the light. \u201cIt\u2019s not a photograph; it\u2019s a painting,\u201d he said in a telephone interview. \u201cVan Gogh painted somewhat abstractly, and he was always introducing a lot of painterly inventions,\u201d he added, so it would be hard to tell if he was painting light he saw with his own eyes or just creating it on the canvas.\n  Mr. Naifeh said the discovery could even support his murder theory. \u201cThe fact that he went out and painted all day, not just an average painting but a very important painting, indicates that he may not have been depressed,\u201d he said. \u201cIt was otherwise a productive normal day, and that runs counterintuitive to the idea that he might then go and kill himself.\u201d\n Mr. van der Veen agreed on one point. \u201cIt confirms everything that most witnesses at this time say, that his behavior was perfectly normal in the last days,\u201d he said. \u201cThere was no sign that he was having a crisis.\u201d\n However, Mr. van der Veen maintains that van Gogh killed himself, which is also the official position of the Van Gogh Museum.\n Van Gogh had also made a drawing of tree roots when he lived in The Hague in 1882. He described the artwork to his brother, Theo, in a letter.\n He wrote that he wanted the tree to \u201cexpress something of life\u2019s struggle,\u201d seeing it as \u201cFrantically and fervently rooting itself, as it were, in the earth, and yet being half torn up by the storm.\u201d\n  \u201cEnding his life with this painting makes so much sense,\u201d he said. \u201cThe painting illustrates the struggle of life, and a struggle with death. That\u2019s what he leaves behind. It is a farewell note in colors.\u201d", "posttime": "2020-07-30 02:31:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u68b5\u9ad8,van", "title": "\u5728\u68b5\u9ad8\u7684\u6700\u540e\u4e00\u5e45\u753b\u4e2d\u53ef\u4ee5\u627e\u5230\u68b5\u9ad8\u6700\u540e\u51e0\u5929\u7684\u7ebf\u7d22", "title_en": "A Clue to van Gogh\u2019s Final Days Is Found in His Last Painting", "transed": 1, "url": "https://www.nytimes.com/2020/07/28/arts/design/vincent-van-gogh-tree-roots.html", "via": "", "real_tags": ["\u68b5\u9ad8", "van"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014991, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u90fd\u662f\u5173\u4e8eJavaScriptCore\u865a\u62df\u673a\u4e0a\u4e0b\u6587\u4e2d\u7684\u6295\u673a\u6027\u7f16\u8bd1\uff0c\u6216\u8005\u7b80\u79f0\u4e3a\u6295\u673a\u6027\u7f16\u8bd1\u3002\u63a8\u6d4b\u6027\u7f16\u8bd1\u662f\u4f7f\u52a8\u6001\u8bed\u8a00\u6216\u4efb\u4f55\u5177\u6709\u8db3\u591f\u52a8\u6001\u7279\u6027\u7684\u8bed\u8a00\u8fd0\u884c\u5f97\u66f4\u5feb\u7684\u7406\u60f3\u9009\u62e9\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5173\u6ce8\u5bf9JavaScript\u7684\u731c\u6d4b\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u8fd9\u79cd\u6280\u672f\u6216\u5bc6\u5207\u76f8\u5173\u7684\u53d8\u4f53\u5df2\u7ecf\u6210\u529f\u5730\u5e94\u7528\u4e8eSmalltalk\u3001Self\u3001Java\u3001.NET\u3001Python\u548cRuby\u7b49\u3002\u4ece90\u5e74\u4ee3\u5f00\u59cb\uff0c\u8bb8\u591aJava\u5b9e\u73b0\u4e4b\u95f4\u6fc0\u70c8\u7684\u57fa\u51c6\u9a71\u52a8\u7ade\u4e89\u5e2e\u52a9\u521b\u5efa\u4e86\u5bf9\u5982\u4f55\u4e3a\u5177\u6709\u5c11\u91cf\u52a8\u6001\u6027\u7684\u8bed\u8a00\u6784\u5efa\u6295\u673a\u6027\u7f16\u8bd1\u5668\u7684\u7406\u89e3\u3002\u5c3d\u7ba1\u6bd4Java\u52a8\u6001\u5316\u5f97\u591a\uff0c\u4f46\u4ece\u96f6\u5f00\u59cb\u7684JavaScript\u6027\u80fd\u6218\u4e89\u901a\u5e38\u503e\u5411\u4e8e\u4f7f\u7528\u5bf9Java\u975e\u5e38\u6709\u7528\u7684\u76f8\u540c\u6295\u673a\u6027\u7f16\u8bd1\u6280\u5de7\u7684\u65e5\u76ca\u6fc0\u8fdb\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u4f3c\u4e4e\u63a8\u6d4b\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u4f7f\u7528\u8fd0\u884c\u65f6\u68c0\u67e5\u7684\u8bed\u8a00\u5b9e\u73b0\uff0c\u8fd9\u4e9b\u68c0\u67e5\u5f88\u96be\u9759\u6001\u63a8\u7406\u3002\n\u8fd9\u662f\u4e00\u7bc7\u5f88\u957f\u7684\u5e16\u5b50\uff0c\u8bd5\u56fe\u63ed\u5f00\u4e00\u4e2a\u590d\u6742\u7684\u8bdd\u9898\u7684\u795e\u79d8\u9762\u7eb1\u3002\u5b83\u57fa\u4e8e\u4e24\u4e2a\u5c0f\u65f6\u7684\u7f16\u8bd1\u5668\u8bb2\u5ea7(\u5e7b\u706f\u7247\u4e5f\u6709PDF\u683c\u5f0f)\u3002\u6211\u4eec\u5047\u8bbe\u60a8\u5bf9\u4e2d\u95f4\u8868\u793a(\u7279\u522b\u662f\u9759\u6001\u5355\u4e00\u8d4b\u503c\u5f62\u5f0f\uff0c\u7b80\u79f0SSA)\u3001\u9759\u6001\u5206\u6790\u548c\u4ee3\u7801\u751f\u6210\u7b49\u7f16\u8bd1\u5668\u6982\u5ff5\u6709\u4e00\u5b9a\u7684\u4e86\u89e3\u3002\u76ee\u6807\u53d7\u4f17\u662f\u4efb\u4f55\u60f3\u8981\u66f4\u597d\u5730\u7406\u89e3JavaScriptCore\u7684\u4eba\uff0c\u6216\u8005\u4efb\u4f55\u8003\u8651\u4f7f\u7528\u8fd9\u4e9b\u6280\u672f\u6765\u52a0\u5feb\u81ea\u5df1\u7684\u8bed\u8a00\u5b9e\u73b0\u7684\u4eba\u3002\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u63cf\u8ff0\u7684\u5927\u591a\u6570\u6982\u5ff5\u90fd\u4e0d\u662f\u7279\u5b9a\u4e8eJavaScript\u7684\uff0c\u5e76\u4e14\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u5047\u5b9a\u4e8b\u5148\u4e86\u89e3JavaScriptCore\u3002\n\u5728\u8fdb\u5165\u63a8\u6d4b\u7684\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u63d0\u4f9b\u63a8\u6d4b\u7684\u6982\u8ff0\u548cJavaScriptCore\u7684\u6982\u8ff0\u3002\u8fd9\u5c06\u6709\u52a9\u4e8e\u4e3a\u672c\u6587\u7684\u4e3b\u8981\u90e8\u5206\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff0c\u901a\u8fc7\u5c06\u5176\u5206\u4e3a\u4e94\u4e2a\u90e8\u5206\u6765\u63cf\u8ff0\u731c\u6d4b\uff1a\u5b57\u8282\u7801(\u516c\u5171IR)\u3001\u63a7\u5236\u3001\u5206\u6790\u3001\u7f16\u8bd1\u548cOSR(\u5806\u6808\u66ff\u6362)\u3002\u6700\u540e\uff0c\u6211\u4eec\u5bf9\u76f8\u5173\u5de5\u4f5c\u8fdb\u884c\u4e86\u5c0f\u5e45\u56de\u987e\u3002\n\u63a8\u6d4b\u80cc\u540e\u7684\u76f4\u89c9\u662f\u5229\u7528\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\u6280\u672f\u6765\u5c3d\u53ef\u80fd\u5feb\u5730\u5236\u4f5c\u52a8\u6001\u8bed\u8a00\u3002\u6784\u9020\u9ad8\u6027\u80fd\u7f16\u8bd1\u5668\u662f\u4e00\u95e8\u5e7f\u4e3a\u4eba\u77e5\u7684\u827a\u672f\uff0c\u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u5c3d\u53ef\u80fd\u591a\u5730\u91cd\u7528\u5b83\u3002\u4f46\u662f\u5bf9\u4e8eJavaScript\u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u7c7b\u578b\u4fe1\u606f\u7684\u7f3a\u4e4f\u610f\u5473\u7740\u7f16\u8bd1\u5668\u65e0\u6cd5\u5bf9\u4efb\u4f55\u57fa\u672c\u64cd\u4f5c(\u751a\u81f3\u50cf+\u6216==\u8fd9\u6837\u7684\u64cd\u4f5c)\u8fdb\u884c\u6709\u610f\u4e49\u7684\u4f18\u5316\u3002\u63a8\u6d4b\u6027\u7f16\u8bd1\u5668\u4f7f\u7528\u5206\u6790\u6765\u52a8\u6001\u63a8\u65ad\u7c7b\u578b\u3002\u751f\u6210\u7684\u4ee3\u7801\u4f7f\u7528\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u6765\u9a8c\u8bc1\u5206\u6790\u7684\u7c7b\u578b\u3002\u5982\u679c\u7a0b\u5e8f\u4f7f\u7528\u7684\u7c7b\u578b\u4e0e\u6211\u4eec\u5206\u6790\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u6211\u4eec\u5c06\u4e22\u5f03\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u7136\u540e\u91cd\u8bd5\u3002\u8fd9\u4f7f\u4f18\u5316\u7f16\u8bd1\u5668\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u7c7b\u578b\u7a0b\u5e8f\u7684\u9759\u6001\u7c7b\u578b\u8868\u793a\u5f62\u5f0f\u3002\n\u7c7b\u578b\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4e00\u4e2a\u4e3b\u8981\u4e3b\u9898\uff0c\u5c3d\u7ba1\u6211\u4eec\u63cf\u8ff0\u7684\u6280\u672f\u662f\u7528\u4e8e\u5b9e\u73b0\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u7684\u3002\u5f53\u8bed\u8a00\u5305\u542b\u9759\u6001\u7c7b\u578b\u65f6\uff0c\u53ef\u4ee5\u4e3a\u7a0b\u5e8f\u5458\u63d0\u4f9b\u5b89\u5168\u5c5e\u6027\uff0c\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u4f18\u5316\u7f16\u8bd1\u5668\u3002\u6211\u4eec\u53ea\u5bf9\u6027\u80fd\u7c7b\u578b\u611f\u5174\u8da3\uff0cJavaScriptCore\u4e2d\u7684\u63a8\u6d4b\u7b56\u7565\u53ef\u4ee5\u5927\u81f4\u8ba4\u4e3a\u662f\u63a8\u65adC\u7a0b\u5e8f\u5c06\u5177\u6709\u7684\u7c7b\u578b\uff0c\u4f46\u4f7f\u7528\u4e13\u95e8\u4e3a\u4f18\u5316\u7f16\u8bd1\u5668\u6784\u5efa\u7684\u5185\u90e8\u7c7b\u578b\u7cfb\u7edf\u3002\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u63cf\u8ff0\u7684\u6280\u672f\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4efb\u4f55\u7c7b\u578b\u7684\u6982\u8981\u5f15\u5bfc\u4f18\u5316\uff0c\u5305\u62ec\u90a3\u4e9b\u4e0e\u7c7b\u578b\u65e0\u5173\u7684\u4f18\u5316\u3002\u4f46\u662f\u8fd9\u7bc7\u6587\u7ae0\u548cJavaScriptCore\u90fd\u5173\u6ce8\u4e8e\u6700\u81ea\u7136\u5730\u8ba4\u4e3a\u662f\u5173\u4e8e\u7c7b\u578b\u7684\u5256\u6790\u548c\u63a8\u6d4b(\u53d8\u91cf\u662f\u5426\u662f\u6574\u6570\uff0c\u6307\u9488\u6307\u5411\u4ec0\u4e48\u5bf9\u8c61\u5f62\u72b6\uff0c\u64cd\u4f5c\u662f\u5426\u6709\u6548\u679c\uff0c\u7b49\u7b49)\uff0c\u4f46\u662f\u8fd9\u7bc7\u6587\u7ae0\u548cJavaScriptCore\u90fd\u5173\u6ce8\u4e8e\u6700\u81ea\u7136\u5730\u8ba4\u4e3a\u662f\u5173\u4e8e\u7c7b\u578b(\u53d8\u91cf\u662f\u5426\u662f\u6574\u6570\uff0c\u6307\u9488\u6307\u5411\u4ec0\u4e48\u5bf9\u8c61\u5f62\u72b6\uff0c\u64cd\u4f5c\u662f\u5426\u6709\u6548\u679c\u7b49)\u7684\u5256\u6790\u548c\u63a8\u6d4b\u3002\n\u4e3a\u4e86\u66f4\u6df1\u5165\u5730\u63a2\u8ba8\u8fd9\u4e00\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u8003\u8651\u7c7b\u578b\u7684\u5f71\u54cd\u3002\u7136\u540e\u6211\u4eec\u770b\u770b\u6295\u673a\u662f\u5982\u4f55\u7ed9\u6211\u4eec\u7c7b\u578b\u7684\u3002\n\u6211\u4eec\u5e0c\u671b\u4e3a\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u63d0\u4f9b\u901a\u5e38\u5728\u9ad8\u6027\u80fd\u9759\u6001\u7c7b\u578b\u8bed\u8a00(\u5982C)\u7684\u9884\u7f16\u8bd1\u5668\u4e2d\u53ef\u4ee5\u627e\u5230\u7684\u90a3\u79cd\u4f18\u5316\u7f16\u8bd1\u5668\u6d41\u6c34\u7ebf\u3002\u8fd9\u79cd\u4f18\u5316\u5668\u7684\u8f93\u5165\u901a\u5e38\u662f\u67d0\u79cd\u5185\u90e8\u8868\u793a(IR)\uff0c\u5b83\u7cbe\u786e\u5730\u8868\u793a\u6bcf\u4e2a\u64cd\u4f5c\u7684\u7c7b\u578b\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4e00\u4e2a\u53ef\u4ee5\u63a8\u65ad\u6bcf\u4e2a\u64cd\u4f5c\u7c7b\u578b\u7684\u8868\u793a\u3002\n\u8981\u4e86\u89e3\u7c7b\u578b\u7684\u5f71\u54cd\u4ee5\u53ca\u63a8\u6d4b\u6027\u7f16\u8bd1\u5668\u5982\u4f55\u5904\u7406\u5b83\u4eec\uff0c\u8bf7\u8003\u8651\u4e0b\u9762\u7684C\u51fd\u6570\uff1a\n\u5728C\u4e2d\uff0c\u50cfint\u8fd9\u6837\u7684\u7c7b\u578b\u88ab\u7528\u6765\u63cf\u8ff0\u53d8\u91cf\u3001\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u3002\u5728\u4f18\u5316\u7f16\u8bd1\u5668\u6709\u673a\u4f1a\u7834\u89e3\u4e0a\u9762\u7684\u51fd\u6570\u4e4b\u524d\uff0c\u7c7b\u578b\u68c0\u67e5\u5668\u4f1a\u586b\u5145\u7a7a\u767d\uff0c\u4ee5\u4fbf+\u8fd0\u7b97\u5c06\u4f7f\u7528IR\u6307\u4ee4\u8868\u793a\uff0c\u8be5\u6307\u4ee4\u77e5\u9053\u5b83\u6b63\u5728\u6dfb\u52a032\u4f4d\u6709\u7b26\u53f7\u6574\u6570(\u5373int)\u3002\u6b64\u77e5\u8bc6\u975e\u5e38\u91cd\u8981\uff1a\n\u7c7b\u578b\u4fe1\u606f\u544a\u8bc9\u7f16\u8bd1\u5668\u7684\u4ee3\u7801\u751f\u6210\u5668\u5982\u4f55\u53d1\u51fa\u6b64\u6307\u4ee4\u7684\u4ee3\u7801\u3002\u7531\u4e8eint\u7c7b\u578b\uff0c\u6211\u4eec\u77e5\u9053\u8981\u4f7f\u7528\u6574\u6570\u52a0\u6cd5\u6307\u4ee4(\u800c\u4e0d\u662f\u53cc\u91cd\u52a0\u6cd5\u6216\u5176\u4ed6\u6307\u4ee4)\u3002\n\u7c7b\u578b\u4fe1\u606f\u544a\u8bc9\u4f18\u5316\u5668\u5982\u4f55\u4e3a\u8f93\u5165\u548c\u8f93\u51fa\u5206\u914d\u5bc4\u5b58\u5668\u3002\u6574\u6570\u8868\u793a\u4f7f\u7528\u901a\u7528\u5bc4\u5b58\u5668\u3002\u6d6e\u70b9\u8868\u793a\u4f7f\u7528\u6d6e\u70b9\u5bc4\u5b58\u5668\u3002\n\u7c7b\u578b\u4fe1\u606f\u544a\u8bc9\u4f18\u5316\u5668\u6b64\u6307\u4ee4\u53ef\u4ee5\u8fdb\u884c\u54ea\u4e9b\u4f18\u5316\u3002\u786e\u5207\u5730\u77e5\u9053\u5b83\u7684\u4f5c\u7528\u53ef\u4ee5\u8ba9\u6211\u4eec\u77e5\u9053\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b\u5176\u4ed6\u64cd\u4f5c\u6765\u4ee3\u66ff\u5b83\uff0c\u5141\u8bb8\u6211\u4eec\u5bf9\u7a0b\u5e8f\u6b63\u5728\u8fdb\u884c\u7684\u6570\u5b66\u8fdb\u884c\u4e00\u4e9b\u4ee3\u6570\u63a8\u7406\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u5728\u8f93\u5165\u662f\u5e38\u91cf\u7684\u60c5\u51b5\u4e0b\u5c06\u6307\u4ee4\u5408\u5e76\u4e3a\u5e38\u91cf\u3002\u5982\u679c\u6709+\u5bf9\u5176\u6709\u5f71\u54cd\u7684\u7c7b\u578b(\u5982\u5728C++\u4e2d)\uff0c\u5219\u8fd9\u662f\u4e00\u4e2a\u6574\u6570+\u8fd9\u4e00\u4e8b\u5b9e\u610f\u5473\u7740\u5b83\u662f\u7eaf\u7684\u3002\u5982\u679c+\u4e0d\u662f\u7eaf\u7684\uff0c\u90a3\u4e48\u8bb8\u591a\u9002\u7528\u4e8e+\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u90fd\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\n\u6211\u4eec\u4e0d\u518d\u6709\u6253\u5b57\u7684\u5962\u4f88\u3002\u7a0b\u5e8f\u6ca1\u6709\u544a\u8bc9\u6211\u4eeca\u6216b\u7684\u7c7b\u578b\u3002\u7c7b\u578b\u68c0\u67e5\u5668\u4e0d\u53ef\u80fd\u5c06+\u64cd\u4f5c\u6807\u8bb0\u4e3a\u4efb\u4f55\u7279\u5b9a\u7684\u64cd\u4f5c\u3002\u5b83\u53ef\u4ee5\u6839\u636ea\u548cb\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u6267\u884c\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u64cd\u4f5c\uff1a\n\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5e26\u6709\u65b9\u6cd5\u8c03\u7528\u7684\u5faa\u73af\u3002\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u662f\u7528\u6237\u5b9a\u4e49\u7684\uff0c\u53ef\u4ee5\u6267\u884c\u4efb\u610f\u6548\u679c\u3002\u5982\u679ca\u6216b\u662f\u5bf9\u8c61\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u57fa\u4e8e\u6b64\uff0c\u4f18\u5316\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u8981\u505a\u4ec0\u4e48\u3002\u6307\u4ee4\u9009\u62e9\u610f\u5473\u7740\u8981\u4e48\u53d1\u51fa\u5bf9\u6574\u4e2a\u4e8b\u7269\u7684\u51fd\u6570\u8c03\u7528\uff0c\u8981\u4e48\u53d1\u51fa\u6602\u8d35\u7684\u63a7\u5236\u6d41\u5b50\u56fe\u6765\u5904\u7406\u6240\u6709\u4e0d\u540c\u7684\u60c5\u51b5(\u56fe1)\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u54ea\u4e2a\u5bc4\u5b58\u5668\u5806\u6700\u9002\u5408\u8f93\u5165\u6216\u7ed3\u679c\uff1b\u6211\u4eec\u53ef\u80fd\u4f1a\u4f7f\u7528\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u6267\u884c\u989d\u5916\u7684\u79fb\u52a8\u6307\u4ee4\uff0c\u4ee5\u4fbf\u5c06\u6570\u636e\u653e\u5165\u6d6e\u70b9\u5bc4\u5b58\u5668\uff0c\u4ee5\u9632\u6211\u4eec\u5fc5\u987b\u8fdb\u884c\u53cc\u91cd\u52a0\u6cd5\u3002\u4e0d\u53ef\u80fd\u77e5\u9053\u4e00\u4e2a\u52a0\u6cd5\u662f\u5426\u4f1a\u4ea7\u751f\u4e0e\u53e6\u4e00\u4e2a\u52a0\u6cd5\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6709\u6709\u6548\u65b9\u6cd5\u8c03\u7528\u7684\u5faa\u73af\u3002\u65e0\u8bba\u4f55\u65f6\u53d1\u751f+\uff0c\u6211\u4eec\u90fd\u5fc5\u987b\u8003\u8651\u5230\u6574\u4e2a\u5806\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5f02\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u9664\u975e\u6211\u4eec\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4e3a\u6240\u6709\u503c\u548c\u64cd\u4f5c\u63d0\u4f9b\u7c7b\u578b\uff0c\u5426\u5219\u4f7f\u7528\u9488\u5bf9JavaScript\u7684\u4f18\u5316\u7f16\u8bd1\u5668\u662f\u4e0d\u5207\u5b9e\u9645\u7684\u3002\u8981\u4f7f\u8fd9\u4e9b\u7c7b\u578b\u6709\u7528\uff0c\u5b83\u4eec\u9700\u8981\u5e2e\u52a9\u6211\u4eec\u907f\u514d\u50cf+\u8fd9\u6837\u7684\u57fa\u672c\u64cd\u4f5c\uff0c\u770b\u8d77\u6765\u5b83\u4eec\u9700\u8981\u63a7\u5236\u6d41\u6216\u6548\u679c\u3002\u4ed6\u4eec\u8fd8\u9700\u8981\u5e2e\u52a9\u6211\u4eec\u4e86\u89e3\u8981\u4f7f\u7528\u54ea\u4e9b\u6307\u4ee4\u6216\u5bc4\u5b58\u5668\u6587\u4ef6\u3002\u63a8\u6d4b\u6027\u7f16\u8bd1\u5668\u901a\u8fc7\u5c06\u8fd9\u79cd\u63a8\u7406\u5e94\u7528\u4e8e\u8bed\u8a00\u4e2d\u7684\u6240\u6709\u52a8\u6001\u64cd\u4f5c\u6765\u63d0\u9ad8\u901f\u5ea6-\u4ece\u8868\u793a\u4e3a\u57fa\u672c\u64cd\u4f5c(\u5982+\u6216o.f\u548co[i]\u7b49\u5185\u5b58\u8bbf\u95ee)\u7684\u64cd\u4f5c\uff0c\u5230\u6d89\u53ca\u5185\u90e8\u51fd\u6570\u6216\u53ef\u8bc6\u522b\u4ee3\u7801\u6a21\u5f0f\u7684\u64cd\u4f5c(\u5982\u8c03\u7528Function.Prototype.Apply)\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u5173\u6ce8\u7684\u662f\u90a3\u4e9b\u6700\u81ea\u7136\u5730\u5c06\u6536\u96c6\u5230\u7684\u4fe1\u606f\u7406\u89e3\u4e3a\u7c7b\u578b\u4fe1\u606f\u7684\u63a8\u6d4b\uff0c\u6bd4\u5982\u53d8\u91cf\u662f\u5426\u662f\u6574\u6570\u4ee5\u53ca\u6307\u5411\u7684\u5bf9\u8c61\u5177\u6709\u4ec0\u4e48\u5c5e\u6027(\u4ee5\u53ca\u6309\u4ec0\u4e48\u987a\u5e8f)\u3002\u8ba9\u6211\u4eec\u66f4\u6df1\u5165\u5730\u7406\u89e3\u8fd9\u4e00\u70b9\u7684\u4e24\u4e2a\u65b9\u9762\uff1a\u5206\u6790\u548c\u4f18\u5316\u53d1\u751f\u7684\u65f6\u95f4\u548c\u65b9\u5f0f\uff0c\u4ee5\u53ca\u63a8\u6d4b\u7c7b\u578b\u7684\u610f\u4e49\u3002\n\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u6211\u4eec\u6240\u8bf4\u7684\u9488\u5bf9JavaScript\u7684\u63a8\u6d4b\u6027\u7f16\u8bd1\u662f\u4ec0\u4e48\u610f\u601d\u3002JavaScript\u5b9e\u73b0\u4f2a\u88c5\u6210\u89e3\u91ca\u5668\uff1b\u5b83\u4eec\u63a5\u53d7JS\u6e90\u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\u3002\u4f46\u662f\u5728\u5185\u90e8\uff0c\u8fd9\u4e9b\u5b9e\u73b0\u7ed3\u5408\u4f7f\u7528\u89e3\u91ca\u5668\u548c\u7f16\u8bd1\u5668\u3002\u6700\u521d\uff0c\u4ee3\u7801\u5728\u6267\u884c\u5f15\u64ce\u4e2d\u5f00\u59cb\u8fd0\u884c\uff0c\u8be5\u6267\u884c\u5f15\u64ce\u4e0d\u8fdb\u884c\u57fa\u4e8e\u7c7b\u578b\u7684\u63a8\u6d4b\u6027\u4f18\u5316\uff0c\u800c\u662f\u6536\u96c6\u6709\u5173\u7c7b\u578b\u7684\u5206\u6790\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u540d\u53e3\u8bd1\u5458\uff0c\u4f46\u5e76\u4e0d\u603b\u662f\u8fd9\u6837\u3002\u4e00\u65e6\u51fd\u6570\u5177\u6709\u4ee4\u4eba\u6ee1\u610f\u7684\u5206\u6790\u91cf\uff0c\u5f15\u64ce\u5c06\u542f\u52a8\u8be5\u51fd\u6570\u7684\u4f18\u5316\u7f16\u8bd1\u5668\u3002\u4f18\u5316\u7f16\u8bd1\u5668\u57fa\u4e8e\u4e0eC\u7f16\u8bd1\u5668\u4e2d\u76f8\u540c\u7684\u57fa\u672c\u539f\u7406\uff0c\u4f46\u5728\u8fd9\u91cc\uff0c\u5b83\u4e0d\u662f\u4ece\u7c7b\u578b\u68c0\u67e5\u5668\u63a5\u53d7\u7c7b\u578b\u5e76\u4f5c\u4e3a\u547d\u4ee4\u884c\u5de5\u5177\u8fd0\u884c\uff0c\u800c\u662f\u4ece\u5206\u6790\u5668\u63a5\u53d7\u7c7b\u578b\uff0c\u5e76\u5728\u4e0e\u5b83\u6b63\u5728\u7f16\u8bd1\u7684\u7a0b\u5e8f\u76f8\u540c\u8fdb\u7a0b\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u3002\u4e00\u65e6\u7f16\u8bd1\u5668\u5b8c\u6210\u53d1\u51fa\u4f18\u5316\u7684\u673a\u5668\u7801\uff0c\u6211\u4eec\u5c31\u5c06\u8be5\u51fd\u6570\u7684\u6267\u884c\u4ece\u6027\u80fd\u5206\u6790\u5c42\u5207\u6362\u5230\u4f18\u5316\u5c42\u3002\u8fd0\u884cJavaScript\u4ee3\u7801\u65e0\u6cd5\u89c2\u5bdf\u5230\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u5728\u81ea\u8eab\u8eab\u4e0a\uff0c\u9664\u975e\u5b83\u6d4b\u91cf\u6267\u884c\u65f6\u95f4\u3002(\u4f46\u662f\uff0c\u6211\u4eec\u7528\u4e8e\u6d4b\u8bd5JavaScriptCore\u7684\u73af\u5883\u5305\u62ec\u8bb8\u591a\u7528\u4e8e\u81ea\u7701\u5df2\u7f16\u8bd1\u5185\u5bb9\u7684\u6302\u94a9\u3002)\u3002\u56fe2\u5c55\u793a\u4e86\u5728\u8fd0\u884cJavaScript\u65f6\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u8fdb\u884c\u6027\u80fd\u5206\u6790\u548c\u4f18\u5316\u3002\n\u7c97\u7565\u5730\u8bf4\uff0c\u63a8\u6d4b\u6027\u7f16\u8bd1\u610f\u5473\u7740\u6211\u4eec\u7684\u793a\u4f8b\u51fd\u6570\u5c06\u8f6c\u6362\u4e3a\u5982\u4e0b\u6240\u793a\uff1a\n\u68d8\u624b\u7684\u662f\uff0c\u6295\u673a\u5230\u5e95\u610f\u5473\u7740\u4ec0\u4e48\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u9009\u62e9\u662f\u6211\u4eec\u6240\u8bf4\u7684\u94bb\u77f3\u6295\u673a\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6bcf\u6b21\u6267\u884c\u64cd\u4f5c\u65f6\uff0c\u90fd\u4f1a\u6709\u4e00\u6761\u4e13\u95e8\u7528\u4e8e\u5206\u6790\u5668\u544a\u8bc9\u6211\u4eec\u7684\u5feb\u901f\u8def\u5f84\u548c\u4e00\u6761\u5904\u7406\u4e00\u822c\u60c5\u51b5\u7684\u6162\u901f\u8def\u5f84\uff1a\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e24\u6b21x\uff0c\u4e24\u6b21\u90fd\u5c06\u5176\u4e0e\u5df2\u77e5\u6574\u6570\u76f8\u52a0\u3002\u5047\u8bbe\u5206\u6790\u5668\u544a\u8bc9\u6211\u4eecx\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4f46\u662f\u6211\u4eec\u6ca1\u6709\u529e\u6cd5\u9759\u6001\u5730\u8bc1\u660e\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u8bf4\uff0cx\u7684\u503c\u5728\u4e24\u79cd\u7528\u9014\u4e4b\u95f4\u4e0d\u53d8\uff0c\u6211\u4eec\u5df2\u7ecf\u9759\u6001\u5730\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\u3002\n\u56fe3\u663e\u793a\u4e86\u5982\u679c\u6211\u4eec\u4f7f\u7528\u83f1\u5f62\u63a8\u6d4b\u6765\u63a8\u6d4bx\u662f\u6574\u6570\u8fd9\u4e00\u4e8b\u5b9e\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\u6211\u4eec\u5f97\u5230\u4e00\u6761\u6267\u884c\u6574\u6570\u52a0\u6cd5\u7684\u5feb\u901f\u8def\u5f84\u548c\u4e00\u6761\u8df3\u51fa\u5230\u52a9\u624b\u51fd\u6570\u7684\u6162\u901f\u8def\u5f84\u3002\u50cf\u8fd9\u6837\u7684\u6295\u673a\u53ef\u4ee5\u4ee5\u9002\u5ea6\u7684\u6210\u672c\u4ea7\u751f\u9002\u5ea6\u7684\u52a0\u901f\u3002\u6210\u672c\u662f\u9002\u4e2d\u7684\uff0c\u56e0\u4e3a\u5982\u679c\u6295\u673a\u662f\u9519\u8bef\u7684\uff0c\u53ea\u6709x\u4e0a\u7684\u64cd\u4f5c\u624d\u4f1a\u4ed8\u51fa\u4ee3\u4ef7\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u662f\u91cd\u590d\u4f7f\u7528x\u5fc5\u987b\u91cd\u65b0\u68c0\u67e5\u5b83\u662f\u5426\u4e3a\u6574\u6570\u3002\u91cd\u65b0\u68c0\u67e5\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u63a7\u5236\u6d41\u5408\u5e76\u53d1\u751f\u5728Things\u5757\u4e0a\uff0c\u5e76\u4e14\u518d\u6b21\u53d1\u751f\u5728\u66f4\u591a\u7684\u4e8b\u60c5\u4e0a\u3002\n\u8fd9\u4e2a\u95ee\u9898\u7684\u539f\u59cb\u89e3\u51b3\u65b9\u6848\u662f\u62c6\u5206\uff0c\u5728\u62c6\u5206\u8fc7\u7a0b\u4e2d\uff0c\u4e3a\u4e86\u907f\u514d\u5206\u652f\uff0c\u7a0b\u5e8f\u5728\u4e8b\u7269\u548c\u66f4\u591a\u4e8b\u7269\u4e4b\u95f4\u7684\u533a\u57df\u4f1a\u88ab\u590d\u5236\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u6781\u7aef\u7248\u672c\u662f\u8ddf\u8e2a\uff0c\u5373\u5728\u4efb\u4f55\u5206\u652f\u4e4b\u540e\u590d\u5236\u51fd\u6570\u7684\u6574\u4e2a\u5269\u4f59\u90e8\u5206\u3002\u8fd9\u4e9b\u6280\u672f\u7684\u95ee\u9898\u662f\u590d\u5236\u4ee3\u7801\u6210\u672c\u5f88\u9ad8\u3002\u6211\u4eec\u5e0c\u671b\u5c06\u7f16\u8bd1\u540c\u4e00\u6bb5\u4ee3\u7801\u7684\u6b21\u6570\u964d\u5230\u6700\u4f4e\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5feb\u901f\u7f16\u8bd1\u5927\u91cf\u4ee3\u7801\u3002JavaScriptCore\u505a\u7684\u6700\u63a5\u8fd1\u62c6\u5206\u7684\u4e8b\u60c5\u662f\u5c3e\u90e8\u590d\u5236\uff0c\u5982\u679c\u4ee3\u7801\u5f88\u5c0f\uff0c\u5b83\u901a\u8fc7\u5728\u83f1\u5f62\u63a8\u6d4b\u4e4b\u95f4\u590d\u5236\u4ee3\u7801\u6765\u4f18\u5316\u83f1\u5f62\u63a8\u6d4b\u3002\n\u4e0e\u83f1\u5f62\u6295\u673a\u6216\u62c6\u5206\u76f8\u6bd4\uff0cOSR(\u5806\u6808\u66ff\u6362)\u662f\u4e00\u79cd\u66f4\u597d\u7684\u9009\u62e9\u3002\u4f7f\u7528OSR\u65f6\uff0c\u5931\u8d25\u7684\u7c7b\u578b\u68c0\u67e5\u4f1a\u4ece\u4f18\u5316\u540e\u7684\u51fd\u6570\u9000\u51fa\uff0c\u8fd4\u56de\u5230\u672a\u4f18\u5316\u4ee3\u7801\u4e2d\u7684\u7b49\u4ef7\u70b9(\u5373\u6027\u80fd\u5206\u6790\u5c42\u7684\u51fd\u6570\u7248\u672c)\u3002\n\u56fe4\u663e\u793a\u4e86\u5f53\u6211\u4eec\u4f7f\u7528OSR\u63a8\u6d4bx\u662f\u6574\u6570\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u56e0\u4e3a\u5728x\u662fint\u7684\u60c5\u51b5\u548cx\u4e0d\u662fint\u7684\u60c5\u51b5\u4e4b\u95f4\u6ca1\u6709\u63a7\u5236\u6d41\u5408\u5e76\uff0c\u6240\u4ee5\u7b2c\u4e8c\u6b21\u68c0\u67e5\u53d8\u5f97\u591a\u4f59\u5e76\u4e14\u53ef\u4ee5\u6d88\u9664\u3002\u6ca1\u6709\u5408\u5e76\u610f\u5473\u7740\u5230\u8fbe\u7b2c\u4e8c\u4e2a\u68c0\u67e5\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u7b2c\u4e00\u4e2a\u68c0\u67e5\u662f\u5426\u901a\u8fc7\u3002\nOSR\u63a8\u6d4b\u4e3a\u6211\u4eec\u7684\u4f20\u7edf\u4f18\u5316\u7f16\u8bd1\u5668\u63d0\u4f9b\u4e86\u9759\u6001\u7c7b\u578b\u3002\u5728\u4efb\u4f55\u57fa\u4e8eOSR\u7684\u7c7b\u578b\u68c0\u67e5\u4e4b\u540e\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u5047\u5b9a\u68c0\u67e5\u7684\u5c5e\u6027\u73b0\u5728\u662f\u4e8b\u5b9e\u3002\u6b64\u5916\uff0c\u56e0\u4e3aOSR\u68c0\u67e5\u5931\u8d25\u4e0d\u5f71\u54cd\u8bed\u4e49(\u6211\u4eec\u9000\u51fa\u5230\u76f8\u540c\u4ee3\u7801\u4e2d\u7684\u76f8\u540c\u70b9\uff0c\u53ea\u662f\u4f18\u5316\u8f83\u5c11)\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u68c0\u67e5\u63d0\u5347\u5230\u6211\u4eec\u60f3\u8981\u7684\u9ad8\u5ea6\uff0c\u5e76\u901a\u8fc7\u4f7f\u7528\u76f8\u5e94\u7684\u7c7b\u578b\u68c0\u67e5\u4fdd\u62a4\u53d8\u91cf\u7684\u6240\u6709\u8d4b\u503c\u6765\u63a8\u65ad\u53d8\u91cf\u603b\u662f\u5177\u6709\u67d0\u79cd\u7c7b\u578b\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u672c\u6587\u548cJavaScriptCore\u4e2d\u6240\u79f0\u7684OSR\u51fa\u53e3\u5728\u5176\u4ed6\u5730\u65b9\u901a\u5e38\u79f0\u4e3a\u53bb\u4f18\u5316\u3002\u6211\u4eec\u66f4\u559c\u6b22\u5728\u4ee3\u7801\u5e93\u4e2d\u4f7f\u7528\u672f\u8bedOSR\u51fa\u53e3\uff0c\u56e0\u4e3a\u5b83\u5f3a\u8c03\u91cd\u70b9\u662f\u4f7f\u7528\u5916\u6765\u6280\u672f(OSR)\u9000\u51fa\u4f18\u5316\u51fd\u6570\u3002\u672f\u8bed\u201c\u53d6\u6d88\u4f18\u5316\u201d\u4f7f\u6211\u4eec\u770b\u8d77\u6765\u50cf\u662f\u5728\u64a4\u6d88\u4f18\u5316\uff0c\u8fd9\u53ea\u5728\u72ed\u4e49\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u5373\u7279\u5b9a\u7684\u6267\u884c\u4ece\u4f18\u5316\u7684\u4ee3\u7801\u8df3\u5230\u672a\u4f18\u5316\u7684\u4ee3\u7801\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u9075\u5faaJavaScriptCore\u884c\u8bdd\u3002\nJavaScriptCore\u4f7f\u7528OSR\u6216\u83f1\u5f62\u63a8\u6d4b\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6211\u4eec\u5bf9\u63a8\u6d4b\u662f\u5426\u6b63\u786e\u7684\u4fe1\u5fc3\u3002OSR\u63a8\u6d4b\u6709\u66f4\u9ad8\u7684\u6536\u76ca\u548c\u66f4\u9ad8\u7684\u6210\u672c\uff1a\u6536\u76ca\u66f4\u9ad8\uff0c\u56e0\u4e3a\u53ef\u4ee5\u6d88\u9664\u91cd\u590d\u68c0\u67e5\uff0c\u4f46\u6210\u672c\u4e5f\u66f4\u9ad8\uff0c\u56e0\u4e3aOSR\u6bd4\u8c03\u7528\u52a9\u624b\u51fd\u6570\u66f4\u6602\u8d35\u3002\u7136\u800c\uff0c\u53ea\u6709\u5728\u9000\u51fa\u5b9e\u9645\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u4f1a\u652f\u4ed8\u6210\u672c\u3002OSR\u6295\u673a\u7684\u597d\u5904\u662f\u5982\u6b64\u4f18\u8d8a\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u5c06\u5176\u4f5c\u4e3a\u6211\u4eec\u7684\u4e3b\u8981\u6295\u673a\u7b56\u7565\uff0c\u5982\u679c\u6211\u4eec\u7684\u4fa7\u5199\u8868\u660e\u6211\u4eec\u5bf9\u6295\u673a\u7f3a\u4e4f\u4fe1\u5fc3\uff0c\u94bb\u77f3\u6295\u673a\u662f\u6211\u4eec\u7684\u540e\u5907\u9009\u62e9\u3002\n\u57fa\u4e8eOSR\u7684\u63a8\u6d4b\u4f9d\u8d56\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u4f20\u7edf\u7f16\u8bd1\u5668\u5df2\u7ecf\u64c5\u957f\u5bf9\u4fa7\u8fb9\u9000\u51fa\u8fdb\u884c\u63a8\u7406\u3002\u9677\u9631\u6307\u4ee4(\u6bd4\u5982Java\u865a\u62df\u673a\u4e2d\u7684null check\u4f18\u5316)\u3001\u5f02\u5e38\u548c\u591a\u4e2a\u8fd4\u56de\u8bed\u53e5\u90fd\u662f\u7f16\u8bd1\u5668\u5df2\u7ecf\u652f\u6301\u9000\u51fa\u51fd\u6570\u7684\u793a\u4f8b\u3002\n\u5047\u8bbe\u6211\u4eec\u4f7f\u7528\u5b57\u8282\u7801\u4f5c\u4e3a\u672a\u4f18\u5316\u7684\u6982\u8981\u6267\u884c\u5c42\u548c\u4f18\u5316\u5c42\u4e4b\u95f4\u5171\u4eab\u7684\u516c\u5171\u8bed\u8a00\uff0c\u90a3\u4e48\u9000\u51fa\u76ee\u7684\u5730\u53ef\u4ee5\u53ea\u662f\u5b57\u8282\u7801\u6307\u4ee4\u8fb9\u754c\u3002\u56fe5\u663e\u793a\u4e86\u8fd9\u53ef\u80fd\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u4f18\u5316\u7f16\u8bd1\u5668\u751f\u6210\u7684\u673a\u5668\u4ee3\u7801\u5305\u542b\u9488\u5bf9\u4e0d\u592a\u53ef\u80fd\u7684\u6761\u4ef6\u7684\u63a8\u6d4b\u68c0\u67e5\u3002\u6211\u4eec\u7684\u60f3\u6cd5\u662f\u505a\u5927\u91cf\u7684\u63a8\u6d4b\u3002\u4f8b\u5982\uff0c\u5e8f\u8a00(\u56fe\u4e2d\u7684Enter\u6307\u4ee4)\u53ef\u80fd\u63a8\u6d4b\u53c2\u6570\u7684\u7c7b\u578b-\u5373\u6bcf\u4e2a\u53c2\u6570\u4e00\u4e2a\u63a8\u6d4b\u3002\u52a0\u6cd5\u6307\u4ee4\u53ef\u4ee5\u63a8\u6d4b\u5176\u8f93\u5165\u7684\u7c7b\u578b\u4ee5\u53ca\u6ca1\u6709\u6ea2\u51fa\u7684\u7ed3\u679c\u3002\u6211\u4eec\u7684\u7c7b\u578b\u5206\u6790\u53ef\u80fd\u4f1a\u544a\u8bc9\u6211\u4eec\uff0c\u67d0\u4e9b\u53d8\u91cf\u5f80\u5f80\u603b\u662f\u5177\u6709\u67d0\u79cd\u7c7b\u578b\uff0c\u56e0\u6b64\u5176\u6e90\u4ee3\u7801\u672a\u88ab\u8bc1\u660e\u5177\u6709\u8be5\u7c7b\u578b\u7684mov\u6307\u4ee4\u53ef\u80fd\u4f1a\u63a8\u6d4b\u8be5\u503c\u5728\u8fd0\u884c\u65f6\u5177\u6709\u8be5\u7c7b\u578b\u3002\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20(\u6211\u4eec\u79f0\u4e4b\u4e3aget_by_val)\u53ef\u80fd\u4f1a\u63a8\u6d4b\u8be5\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u7d22\u5f15\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u7d22\u5f15\u5728\u8fb9\u754c\u5185\uff0c\u5e76\u4e14\u7d22\u5f15\u5904\u7684\u503c\u4e0d\u662f\u4e00\u4e2a\u7a7a\u6d1e(\u5728JavaScript\u4e2d\uff0c\u4ece\u4ece\u672a\u8d4b\u503c\u7684\u6570\u7ec4\u5143\u7d20\u52a0\u8f7d\u610f\u5473\u7740\u904d\u5386\u6570\u7ec4\u7684\u539f\u578b\u94fe\u4ee5\u67e5\u770b\u662f\u5426\u53ef\u4ee5\u5728\u90a3\u91cc\u627e\u5230\u8be5\u5143\u7d20-\u8fd9\u662f\u6211\u4eec\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u907f\u514d\u505a\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u6211\u4eec\u63a8\u6d4b\u4e0d\u9700\u8981\u8fd9\u6837\u505a)\u3002\u8c03\u7528\u51fd\u6570\u53ef\u80fd\u4f1a\u63a8\u6d4b\u88ab\u8c03\u7528\u8005\u5c31\u662f\u6211\u4eec\u9884\u671f\u7684\u88ab\u8c03\u7528\u8005\uff0c\u6216\u8005\u81f3\u5c11\u5b83\u6709\u9002\u5f53\u7684\u7c7b\u578b(\u8fd9\u662f\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u7684\u4e1c\u897f)\u3002\n\u867d\u7136\u5728\u4e0d\u8fdd\u53cd\u4f18\u5316\u7f16\u8bd1\u5668\u7684\u57fa\u672c\u5047\u8bbe\u7684\u60c5\u51b5\u4e0b\u9000\u51fa\u51fd\u6570\u5f88\u7b80\u5355\uff0c\u4f46\u8fdb\u5165\u5374\u975e\u5e38\u56f0\u96be\u3002\u5728\u51fd\u6570\u7684\u4e3b\u5165\u53e3\u70b9\u4e4b\u5916\u7684\u5176\u4ed6\u4f4d\u7f6e\u8fdb\u5165\u51fd\u6570\u4f1a\u4f7f\u5165\u53e3\u70b9\u4e4b\u95f4\u7684\u4efb\u4f55\u5408\u5e76\u70b9\u7684\u4f18\u5316\u53d8\u5f97\u60b2\u89c2\u3002\u5982\u679c\u6211\u4eec\u5141\u8bb8\u5728\u6bcf\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\u8fb9\u754c\u8fdb\u5165\uff0c\u8fd9\u5c06\u8feb\u4f7f\u6bcf\u4e2a\u6307\u4ee4\u8fb9\u754c\u5bf9\u7c7b\u578b\u505a\u51fa\u6700\u574f\u7684\u5047\u8bbe\uff0c\u4ece\u800c\u5426\u5b9aOSR\u9000\u51fa\u7684\u597d\u5904\u3002\u5373\u4f7f\u53ea\u5141\u8bb8OSR\u6761\u76ee\u4f4d\u4e8e\u5faa\u73af\u6807\u5934\uff0c\u4e5f\u4f1a\u7834\u574f\u5927\u91cf\u5faa\u73af\u4f18\u5316\u3002\u8fd9\u610f\u5473\u7740\u9000\u51fa\u540e\u901a\u5e38\u4e0d\u53ef\u80fd\u91cd\u65b0\u8fdb\u5165\u4f18\u5316\u6267\u884c\u3002\u6211\u4eec\u53ea\u652f\u6301\u5728\u5956\u52b1\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\u8fdb\u5165\uff0c\u6bd4\u5982\u5206\u6790\u5668\u544a\u8bc9\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5faa\u73af\u5c1a\u672a\u7ec8\u6b62\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u4f20\u7edf\u7f16\u8bd1\u5668\u662f\u4e3a\u5355\u5165\u53e3\u3001\u591a\u51fa\u53e3\u8fc7\u7a0b\u8bbe\u8ba1\u7684\uff0c\u8fd9\u610f\u5473\u7740OSR\u8fdb\u5165\u5f88\u96be\uff0c\u4f46OSR\u9000\u51fa\u5f88\u5bb9\u6613\u3002\nJavaScriptCore\u548c\u5927\u591a\u6570\u63a8\u6d4b\u7f16\u8bd1\u5668\u652f\u6301\u5728\u70ed\u5faa\u73af\u4e2d\u8fdb\u5165OSR\uff0c\u4f46\u662f\u7531\u4e8e\u5b83\u4e0d\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u672c\u7279\u6027\uff0c\u6211\u4eec\u5c06\u628a\u7406\u89e3\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7559\u7ed9\u8bfb\u8005\u4f5c\u4e3a\u7ec3\u4e60\u3002\n\u672c\u6587\u7684\u4e3b\u8981\u90e8\u5206\u4ece\u4e94\u4e2a\u7ec4\u4ef6(\u56fe6)\u6765\u63cf\u8ff0\u63a8\u6d4b\uff1a\u865a\u62df\u673a\u7684\u5b57\u8282\u7801\u6216\u516c\u5171IR\uff0c\u5b83\u5141\u8bb8\u5728\u672a\u4f18\u5316\u7684\u6027\u80fd\u5206\u6790\u5c42\u548c\u4f18\u5316\u5c42\u4e4b\u95f4\u5bf9\u6027\u80fd\u5206\u6790\u548c\u9000\u51fa\u7ad9\u70b9\u7684\u542b\u4e49\u6709\u5171\u540c\u7684\u7406\u89e3\uff1b\u672a\u4f18\u5316\u7684\u6027\u80fd\u5206\u6790\u5c42\uff0c\u7528\u4e8e\u5728\u542f\u52a8\u65f6\u6267\u884c\u51fd\u6570\uff0c\u6536\u96c6\u5173\u4e8e\u5b83\u4eec\u7684\u6027\u80fd\u5206\u6790\uff0c\u5e76\u7528\u4f5c\u9000\u51fa\u76ee\u7684\u5730\uff1b\u63a7\u5236\u7cfb\u7edf\uff0c\u7528\u4e8e\u51b3\u5b9a\u4f55\u65f6\u8c03\u7528\u4f18\u5316\u7f16\u8bd1\u5668\uff1b\u4f18\u5316\u5c42\uff0c\u5c06\u4f20\u7edf\u7684\u4f18\u5316\u7f16\u8bd1\u5668\u4e0e\u589e\u5f3a\u529f\u80fd\u76f8\u7ed3\u5408\uff0c\u4ee5\u652f\u6301\u57fa\u4e8e\u3002\u4ee5\u53caOSR\u9000\u51fa\u6280\u672f\uff0c\u8be5\u6280\u672f\u5141\u8bb8\u4f18\u5316\u7f16\u8bd1\u5668\u5728\u63a8\u6d4b\u68c0\u67e5\u5931\u8d25\u65f6\u5c06\u5256\u6790\u5c42\u7528\u4f5c\u9000\u51fa\u76ee\u7684\u5730\u3002\nJavaScriptCore\u63a5\u53d7\u4e86\u5206\u5c42\u7684\u601d\u60f3\uff0c\u5b83\u6709\u56db\u5c42JavaScript(\u4e09\u5c42WebAssembly\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8ba8\u8bba\u8303\u56f4)\u3002\u5206\u5c42\u6709\u4e24\u4e2a\u597d\u5904\uff1a\u524d\u4e00\u8282\u63cf\u8ff0\u7684\u652f\u6301\u63a8\u6d4b\u7684\u4e3b\u8981\u597d\u5904\uff1b\u4ee5\u53ca\u5141\u8bb8\u6211\u4eec\u5728\u6bcf\u4e2a\u529f\u80fd\u7684\u57fa\u7840\u4e0a\u5fae\u8c03\u541e\u5410\u91cf-\u5ef6\u8fdf\u6743\u8861\u7684\u6b21\u8981\u597d\u5904\u3002\u6709\u4e9b\u51fd\u6570\u8fd0\u884c\u7684\u65f6\u95f4\u975e\u5e38\u77ed--\u6bd4\u5982\u76f4\u7ebf\u8fd0\u884c\u4e00\u6b21\u7684\u521d\u59cb\u5316\u4ee3\u7801--\u4ee5\u81f3\u4e8e\u5728\u8fd9\u4e9b\u51fd\u6570\u4e0a\u8fd0\u884c\u4efb\u4f55\u7f16\u8bd1\u5668\u90fd\u6bd4\u89e3\u91ca\u5b83\u4eec\u66f4\u6602\u8d35\u3002\u6709\u4e9b\u51fd\u6570\u88ab\u9891\u7e41\u8c03\u7528\uff0c\u6216\u8005\u6709\u5982\u6b64\u957f\u7684\u5faa\u73af\uff0c\u4ee5\u81f3\u4e8e\u5b83\u4eec\u7684\u603b\u6267\u884c\u65f6\u95f4\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u4f7f\u7528\u79ef\u6781\u7684\u4f18\u5316\u7f16\u8bd1\u5668\u7f16\u8bd1\u5b83\u4eec\u7684\u65f6\u95f4\u3002\u4f46\u5728\u8fd9\u4e24\u8005\u4e4b\u95f4\u4e5f\u6709\u5f88\u591a\u51fd\u6570\uff1a\u5b83\u4eec\u8fd0\u884c\u7684\u65f6\u95f4\u4e0d\u8db3\u4ee5\u8ba9\u6fc0\u8fdb\u7684\u7f16\u8bd1\u5668\u76c8\u5229\uff0c\u4f46\u8db3\u591f\u957f\uff0c\u4ee5\u81f3\u4e8e\u4e00\u4e9b\u4e2d\u95f4\u7f16\u8bd1\u5668\u8bbe\u8ba1\u53ef\u4ee5\u63d0\u4f9b\u52a0\u901f\u3002JavaScriptCore\u6709\u56db\u5c42\uff0c\u5982\u56fe7\u6240\u793a\uff1a\nLLInt\u6216\u4f4e\u7ea7\u89e3\u91ca\u5668\uff0c\u5b83\u662f\u9075\u5faaJIT\u7f16\u8bd1\u5668ABI\u7684\u89e3\u91ca\u5668\u3002\u5b83\u5728\u4e0eJIT\u76f8\u540c\u7684\u5806\u6808\u4e0a\u8fd0\u884c\uff0c\u5e76\u5c06\u4e00\u7ec4\u5df2\u77e5\u7684\u5bc4\u5b58\u5668\u548c\u5806\u6808\u4f4d\u7f6e\u7528\u4e8e\u5176\u5185\u90e8\u72b6\u6001\u3002\n\u57fa\u7ebfJIT\uff0c\u4e5f\u79f0\u4e3a\u5b57\u8282\u7801\u6a21\u677fJIT\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\u53d1\u51fa\u4e00\u4e2a\u673a\u5668\u4ee3\u7801\u6a21\u677f\uff0c\u800c\u4e0d\u4f1a\u8bd5\u56fe\u63a8\u65ad\u51fd\u6570\u4e2d\u591a\u4e2a\u6307\u4ee4\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\u5b83\u7f16\u8bd1\u6574\u4e2a\u51fd\u6570\uff0c\u8fd9\u4f7f\u5f97\u5b83\u6210\u4e3a\u4e00\u79cd\u65b9\u6cd5JIT\u3002Baseline\u6ca1\u6709OSR\u63a8\u6d4b\uff0c\u4f46\u786e\u5b9e\u6709\u4e00\u4e9b\u57fa\u4e8eLLInt\u7684\u5256\u6790\u7684\u94bb\u77f3\u63a8\u6d4b\u3002\nDFG JIT\u6216\u6570\u636e\u6d41\u56feJIT\uff0c\u5b83\u6839\u636eLLInt\u3001\u57fa\u7ebf\u7684\u8bc4\u6d4b\u6267\u884cOSR\u63a8\u6d4b\uff0c\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\u751a\u81f3\u4f7f\u7528DFG JIT\u548cFTL JIT\u6536\u96c6\u7684\u8bc4\u6d4b\u6570\u636e\u8fdb\u884cOSR\u63a8\u6d4b\u3002\u5b83\u53ef\u4ee5OSR\u9000\u51fa\u5230\u57fa\u7ebf\u6216LLInt\u3002DFG\u6709\u4e00\u4e2a\u79f0\u4e3aDFG IR\u7684\u7f16\u8bd1\u5668IR\uff0c\u5b83\u5141\u8bb8\u5bf9\u63a8\u6d4b\u8fdb\u884c\u590d\u6742\u7684\u63a8\u7406\u3002DFG\u907f\u514d\u8fdb\u884c\u6602\u8d35\u7684\u4f18\u5316\uff0c\u5e76\u505a\u51fa\u8bb8\u591a\u59a5\u534f\u4ee5\u5b9e\u73b0\u5feb\u901f\u4ee3\u7801\u751f\u6210\u3002\nFTL JIT\uff0c\u6216\u6bd4LIGHT JIT\u66f4\u5feb\uff0c\u540e\u8005\u8fdb\u884c\u5168\u9762\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u3002\u5b83\u662f\u4e3a\u5cf0\u503c\u541e\u5410\u91cf\u800c\u8bbe\u8ba1\u7684\u3002FTL\u4ece\u4e0d\u4f1a\u5728\u541e\u5410\u91cf\u4e0a\u59a5\u534f\uff0c\u4ece\u800c\u7f29\u77ed\u7f16\u8bd1\u65f6\u95f4\u3002\u6b64JIT\u91cd\u7528\u4e86DFG JIT\u7684\u5927\u90e8\u5206\u4f18\u5316\uff0c\u5e76\u6dfb\u52a0\u4e86\u66f4\u591a\u4f18\u5316\u3002FTL JIT\u4f7f\u7528\u591a\u4e2aIR(DFG IR\u3001DFG SSA IR\u3001B3 IR\u548cAssembly IR)\u3002\n&#34\uff1b\u4f7f\u7528\u4e25\u683c\u7684&#34\uff1b\uff1b\u8bbeResult=0\uff1bfor(\u8bbei=0\uff1bi&lt\uff1b10000000\uff1b++i){let o={f\uff1ai}\uff1bresult+=o.f\uff1b}print(Result)\uff1b\n\u7531\u4e8e\u5faa\u73af\u4e2d\u7684\u5bf9\u8c61\u5206\u914d\uff0c\u5b83\u5c06\u8fd0\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u76f4\u5230FTL JIT\u53ef\u4ee5\u7f16\u8bd1\u5b83\u3002FTL JIT\u5c06\u7ec8\u6b62\u8be5\u5206\u914d\uff0c\u56e0\u6b64\u5faa\u73af\u5f88\u5feb\u7ed3\u675f\u3002\u4f18\u5316\u524d\u7684\u957f\u65f6\u95f4\u8fd0\u884c\u51e0\u4e4e\u4fdd\u8bc1\u4e86\n.", "note_en": "This post is all about speculative compilation, or just  speculation for short, in the context of the JavaScriptCore virtual machine. Speculative compilation is ideal for making dynamic languages, or any language with enough dynamic features, run faster. In this post, we will look at speculation for JavaScript. Historically, this technique or closely related variants has been applied successfully to  Smalltalk,  Self,  Java,  .NET,  Python, and  Ruby, among others. Starting in the 90\u2019s, intense benchmark-driven competition between many Java implementations helped to create an understanding of how to build speculative compilers for languages with small amounts of dynamism. Despite being a lot more dynamic than Java, the JavaScript performance war  that started in the naughts has generally favored  increasingly  aggressive applications of the same speculative compilation tricks that worked great for Java. It seems like speculation can be applied to any language implementation that uses runtime checks that are hard to reason about statically.\n This is a long post that tries to demystify a complex topic. It\u2019s based on a  two hour compiler lecture ( slides also available in PDF). We assume some familiarity with compiler concepts like intermediate representations (especially  Static Single Assignment Form, or SSA for short), static analysis, and code generation. The intended audience is anyone wanting to understand JavaScriptCore better, or anyone thinking about using these techniques to speed up their own language implementation. Most of the concepts described in this post are not specific to JavaScript and this post doesn\u2019t assume prior knowledge about JavaScriptCore.\n Before going into the details of speculation, we\u2019ll provide an overview of speculation and an overview of JavaScriptCore. This will help provide context for the main part of this post, which describes speculation by breaking it down into five parts:  bytecode (the common IR),  control,  profiling,  compilation, and  OSR (on stack replacement). We conclude with a small review of related work.\n  The intuition behind speculation is to leverage traditional compiler technology to make dynamic languages as fast as possible. Construction of high-performance compilers is a well-understood art, so we want to reuse as much of that as we can. But we cannot do this directly for a language like JavaScript because the lack of type information means that the compiler can\u2019t do meaningful optimizations for any of the fundamental operations (even things like  + or  ==). Speculative compilers use profiling to infer types dynamically. The generated code uses dynamic type checks to validate the profiled types. If the program uses a type that is different from what we profiled, we throw out the optimized code and try again. This lets the optimizing compiler work with a statically typed representation of the dynamically typed program.\n Types are a major theme of this post even though the techniques we are describing are for implementing dynamically typed languages. When languages include static types, it can be to provide safety properties for the programmer or to help give an optimizing compiler leverage. We are only interested in types for performance and the speculation strategy in JavaScriptCore can be thought of in broad strokes as inferring the kinds of types that a C program would have, but using an internal type system purpose built for our optimizing compiler. More generally, the techniques described in this post can be used to enable any kind of profile-guided optimizations, including ones that aren\u2019t related to types. But both this post and JavaScriptCore focus on the kind of profiling and speculation that is most natural to think if as being about type (whether a variable is an integer, what object shapes a pointer points to, whether an operation has effects, etc).\n To dive into this a bit deeper, we first consider the impact of types. Then we look at how speculation gives us types.\n  We want to give dynamically typed languages the kind of optimizing compiler pipeline that would usually be found in ahead-of-time compilers for high-performance statically typed languages like C. The input to such an optimizer is typically some kind of internal representation (IR) that is precise about the type of each operation, or at least a representation from which the type of each operation can be inferred.\n To understand the impact of types and how speculative compilers deal with them, consider this C function:\n  In C, types like  int are used to describe variables, arguments, return values, etc. Before the optimizing compiler has a chance to take a crack at the above function, a type checker fills in the blanks so that the  + operation will be represented using an IR instruction that knows that it is adding 32-bit signed integers (i.e.  ints). This knowledge is essential:\n Type information tells the compiler\u2019s code generator how to emit code for this instruction. We know to use integer addition instructions (not double addition or something else) because of the  int type.\n Type information tells the optimizer how to allocate registers for the inputs and outputs. Integers mean using general purpose registers. Floating point means using floating point registers.\n Type information tells the optimizer what optimizations are possible for this instruction. Knowing exactly what it does allows us to know what other operations can be used in place of it, allows us to do some algebraic reasoning about the math the program is doing, and allows us to fold the instruction to a constant if the inputs are constants. If there are types for which  + has effects (like in C++), then the fact that this is an integer  + means that it\u2019s pure. Lots of compiler optimizations that work for  + would not work if it wasn\u2019t pure.\n   We no longer have the luxury of types. The program doesn\u2019t tell us the types of  a or  b. There is no way that a type checker can label the  + operation as being anything specific. It can do a bunch of different things based on the runtime types of  a and  b:\n It might be a loop with method calls. Those methods can be user-defined and may perform arbitrary effects. This\u2019ll happen if  a or  b are objects.\n  Based on this, it\u2019s not possible for an optimizer to know what to do. Instruction selection means emitting either a function call for the whole thing or an expensive control flow subgraph to handle all of the various cases (Figure 1). We won\u2019t know which register file is best for the inputs or results; we\u2019re likely to go with general purpose registers and then do additional move instructions to get the data into floating point registers in case we have to do a double addition. It\u2019s not possible to know if one addition produces the same results as another, since they have loops with effectful method calls. Anytime a  + happens we have to allow for the the possibility that the whole heap might have been mutated.\n In short, it\u2019s not practical to use optimizing compilers for JavaScript unless we can somehow provide types for all of the values and operations. For those types to be useful, they need to help us avoid basic operations like  + seeming like they require control flow or effects. They also need to help us understand which instructions or register files to use. Speculative compilers get speed-ups by applying this kind of reasoning to all of the dynamic operations in a language \u2014 ranging from those represented as fundamental operations (like  + or memory accesses like  o.f and  o[i]) to those that involve intrinsics or recognizable code patterns (like calling   Function.prototype.apply).\n  This post focuses on those speculations where the collected information can be most naturally understood as type information, like whether or not a variable is an integer and what properties a pointed-to object has (and in what order). Let\u2019s appreciate two aspects of this more deeply: when and how the profiling and optimization happen and what it means to speculate on type.\n  Let\u2019s consider what we mean by speculative compilation for JavaScript. JavaScript implementations pretend to be interpreters; they accept JS source as input. But internally, these implementations use a combination of interpreters and compilers. Initially, code starts out running in an execution engine that does no speculative type-based optimizations but collects profiling about types. This is usually an interpreter, but not always. Once a function has a satisfactory amount of profiling, the engine will start an optimizing compiler for that function. The optimizing compiler is based on the same fundamentals as the one found in a C compiler, but instead of accepting types from a type checker and running as a command-line tool, here it accepts types from a profiler and runs in a thread in the same process as the program it\u2019s compiling. Once that compiler finishes emitting optimized machine code, we switch execution of that function from the profiling tier to the optimized tier. Running JavaScript code has no way of observing this happening to itself except if it measures execution time. (However, the environment we use for testing JavaScriptCore includes many hooks for introspecting what has been compiled.) Figure 2 illustrates how and when profiling and optimization happens when running JavaScript.\n Roughly, speculative compilation means that our example function will be transformed to look something like this:\n  The tricky thing is what exactly it means to  speculate. One simple option is what we call  diamond speculation. This means that every time that we perform an operation, we have a fast path specialized for what the profiler told us and a slow path to handle the generic case:\n    Here, we use  x twice, both times adding it to a known integer. Let\u2019s say that the profiler tells us that  x is an integer but that we have no way of proving this statically. Let\u2019s also say that  x\u2018s value does not change between the two uses and we have proved that statically.\n  Figure 3 shows what happens if we speculate on the fact that  x is an integer using a diamond speculation: we get a fast path that does the integer addition and a slow path that bails out to a helper function. Speculations like this can produce modest speed-ups at modest cost. The cost is modest because if the speculation is wrong, only the operations on  x pay the price. The trouble with this approach is that repeated uses of  x must recheck whether it is an integer. The rechecking is necessary because of the control flow merge that happens at the  things block and again at  more things.\n The  original solution to this problem was splitting, where the region of the program between  things and  more things would get duplicated to avoid the branch. An extreme version of this is  tracing, where the entire remainder of a function is duplicated after any branch. The trouble with these techniques is that duplicating code is expensive. We want to minimize the number of times that the same piece of code is compiled so that we can compile a lot of code quickly. The closest thing to splitting that JavaScriptCore does is  tail duplication, which optimizes diamond speculations by duplicating the code between them if that code is tiny.\n A better alternative to diamond speculations or splitting is  OSR (on stack replacement). When using OSR, a failing type check  exits out of the optimized function back to the equivalent point in the unoptimized code (i.e. the profiling tier\u2019s version of the function).\n  Figure 4 shows what happens when we speculate that  x is an integer using OSR. Because there is no control flow merge between the case where  x is an int and the case where it isn\u2019t, the second check becomes redundant and can be eliminated. The lack of a merge means that the only way to reach the second check is if the first check passed.\n OSR speculations are what gives our traditional optimizing compiler its static types. After any OSR-based type check, the compiler can assume that the property that was checked is now fact. Moreover, because OSR check failure does not affect semantics (we exit to the same point in the same code, just with fewer optimizations), we can hoist those checks as high as we want and infer that a variable always has some type simply by guarding all assignments to it with the corresponding type check.\n Note that what we call  OSR exit in this post and in JavaScriptCore is usually called   deoptimization elsewhere. We prefer to use the term  OSR exit in our codebase because it emphasizes that the point is to  exit an optimized function using an exotic technique ( OSR). The term  deoptimization makes it seem like we are undoing optimization, which is only true in the narrow sense that a particular execution jumps from optimized code to unoptimized code. For this post we will follow the JavaScriptCore jargon.\n JavaScriptCore uses OSR or diamond speculations depending on our confidence that the speculation will be right. OSR speculation has higher benefit and higher cost: the benefit is higher because repeated checks can be eliminated but the cost is also higher because OSR is more expensive than calling a helper function. However, the cost is only paid if the exit actually happens. The benefits of OSR speculation are so superior that we focus on that as our main speculation strategy, with diamond speculation being the fallback if our profiling indicates lack of confidence in the speculation.\n  OSR-based speculation relies on the fact that traditional compilers are already good at reasoning about side exits. Trapping instructions (like for null check optimization in Java virtual machines), exceptions, and multiple return statements are all examples of how compilers already support exiting from a function.\n Assuming that we use bytecode as the common language shared between the unoptimizing profiled tier of execution and the optimizing tier, the exit destinations can just be bytecode instruction boundaries. Figure 5 shows how this might work. The machine code generated by the optimizing compiler contains speculation checks against unlikely conditions. The idea is to do  lots of speculations. For example, the prologue (the  enter instruction in the figure) may speculate about the types of the arguments \u2014 that\u2019s one speculation per argument. An  add instruction may speculate about the types of its inputs and about the result not overflowing. Our type profiling may tell us that some variable tends to always have some type, so a  mov instruction whose source is not proved to have that type may speculate that the value has that type at runtime. Accessing an array element (what we call  get_by_val) may speculate that the array is really an array, that the index is an integer, that the index is in bounds, and that the value at the index is not a hole (in JavaScript, loading from a never assigned array element means walking the array\u2019s prototype chain to see if the element can be found there \u2014 something we avoid doing most of the time by speculating that we don\u2019t have to). Calling a function may speculate that the callee is the one we expected or at least that it has the appropriate type (that it\u2019s something we can call).\n While exiting out of a function is straightforward without breaking fundamental assumptions in optimizing compilers, entering turns out to be super hard. Entering into a function somewhere other than at its primary entrypoint pessimises optimizations at any merge points between entrypoints. If we allowed entering at every bytecode instruction boundary, this would negate the benefits of OSR exit by forcing every instruction boundary to make worst-case assumptions about type. Even allowing OSR entry just at loop headers would break lots of loop optimizations. This means that it\u2019s generally not possible to reenter optimized execution after exiting. We only support entry in cases where the reward is high, like when our profiler tells us that a loop has not yet terminated at the time of compilation. Put simply, the fact that traditional compilers are designed for single-entry multiple-exit procedures means that OSR entry is hard but OSR exit is easy.\n JavaScriptCore and most speculative compilers support OSR entry at hot loops, but since it\u2019s not an essential feature for most applications, we\u2019ll leave understanding how we do it as an  exercise  for  the  reader.\n  The main part of this post describes speculation in terms of its five components (Figure 6): the  bytecode, or common IR, of the virtual machine that allows for a shared understanding about the meaning of profiling and exit sites between the unoptimized profiling tier and the optimizing tier; the unoptimized  profiling tier that is used to execute functions at start-up, collect profiling about them, and to serve as an exit destination; the  control system for deciding when to invoke the optimizing compiler; the  optimizing tier that combines a traditional optimizing compiler with enhancements to support speculation based on profiling; and the  OSR exit technology that allows the optimizing compiler to use the profiling tier as an exit destination when speculation checks fail.\n   JavaScriptCore embraces the idea of tiering and has four tiers for JavaScript (and three tiers for WebAssembly, but that\u2019s outside the scope of this post). Tiering has two benefits: the primary benefit, described in the previous section, of enabling speculation; and a secondary benefit of allowing us to fine-tune the throughput-latency tradeoff on a per-function basis. Some functions run for so short \u2014 like straight-line run-once initialization code \u2014 that running any compiler on those functions would be more expensive than interpreting them. Some functions get invoked so frequently, or have such long loops, that their total execution time far exceeds the time to compile them with an aggressive optimizing compiler. But there are also lots of functions in the grey area in between: they run for not enough time to make an aggressive compiler profitable, but long enough that some intermediate compiler designs can provide speed-ups. JavaScriptCore has four tiers as shown in Figure 7:\n The  LLInt, or low-level interpreter, which is an interpreter that obeys JIT compiler ABI. It runs on the same stack as the JITs and uses a known set of registers and stack locations for its internal state.\n The  Baseline JIT, also known as a bytecode template JIT, which emits a  template of machine code for each bytecode instruction without trying to reason about relationships between multiple instructions in the function. It compiles whole functions, which makes it a  method JIT. Baseline does no OSR speculations but does have a handful of diamond speculations based on profiling from the LLInt.\n The  DFG JIT, or data flow graph JIT, which does OSR speculation based on profiling from the LLInt, Baseline, and in some rare cases even using profiling data collected by the DFG JIT and FTL JIT. It may OSR exit to either baseline or LLInt. The DFG has a compiler IR called DFG IR, which allows for sophisticated reasoning about speculation. The DFG avoids doing expensive optimizations and makes many compromises to enable fast code generation.\n The  FTL JIT, or faster than light JIT, which does comprehensive compiler optimizations. It\u2019s designed for peak throughput. The FTL never compromises on throughput to improve compile times. This JIT reuses most of the DFG JIT\u2019s optimizations and adds lots more. The FTL JIT uses multiple IRs (DFG IR, DFG SSA IR, B3 IR, and Assembly IR).\n  &#34;use strict&#34;;let result = 0;for (let i = 0; i &lt; 10000000; ++i) { let o = {f: i}; result += o.f;}print(result);\n Thanks to the object allocation inside the loop, it will run for a long time until the FTL JIT can compile it. The FTL JIT will kill that allocation, so then the loop finishes quickly. The long running time before optimization virtually guarantee\n......", "posttime": "2020-07-30 02:31:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,javascriptcore,speculation,\u7c7b\u578b", "title": "JavaScriptCore\u4e2d\u7684\u63a8\u6d4b", "title_en": "Speculation in JavaScriptCore", "transed": 1, "url": "https://webkit.org/blog/10308/speculation-in-javascriptcore/", "via": "", "real_tags": ["java", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "40e7a602efbf8909953a90e742f89ad4.png", "infoid": 1014990, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u95ee\uff1a\u4e00\u7247\u8349\u6709\u51e0\u53ea\u773c\u775b\uff1f\u4e00\u7247\u8349\u53f6\u53ea\u6709\u4e00\u53ea\u773c\u775b\u3002\n\u95ee\uff1a\u4f60\u662f\u5982\u4f55\u4f7f\u7528\u6668\u5149\u7684\uff1f\u7b54\uff1a\u4f60\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u5b62\u5b50\u6765\u4f7f\u5b62\u5b50\u53d1\u82bd\u3002\n\u95ee\uff1a\u4e00\u4e2a\u5f15\u53f7\u91cc\u6709\u591a\u5c11\u4e2a\u7206\u7af9\uff1fA\uff1a\u4e00\u4e2a\u5f15\u53f7\u91cc\u6709\u4e09\u4e2a\u7206\u7af9\u3002\n\u95ee\uff1a\u4ece\u590f\u5a01\u5937\u8df3\u5230\u5341\u4e03\u9053\u5f69\u8679\u9700\u8981\u51e0\u9053\u5f69\u8679\uff1f\u4ece\u590f\u5a01\u5937\u8df3\u5230\u5341\u4e03\u4e2a\u5f69\u8679\u9700\u8981\u4e24\u9053\u5f69\u8679\u3002\n\u95ee\uff1a\u54ea\u4e9b\u65e0\u8272\u7684\u7eff\u8272\u70b9\u5b50\u7761\u5f97\u5f88\u9999\uff1f\u7b54\uff1a\u65e0\u8272\u3001\u7eff\u8272\u3001\u7761\u5f97\u5f88\u9999\u7684\u60f3\u6cd5\u5c31\u662f\u7761\u5f97\u5f88\u9999\u3002\nGPT-3\u6700\u68d8\u624b\u7684\u4e8b\u60c5\u4e4b\u4e00\u662f\uff0c\u60a8\u53ef\u4ee5\u8bc1\u660e\u5b83\u77e5\u9053\u5982\u4f55\u505a\u67d0\u4e8b\uff0c\u4f46\u4e0d\u80fd\u8bc1\u660e\u5b83\u4e0d\u77e5\u9053\uff0c\u56e0\u4e3a\u7a0d\u5fae\u4e0d\u540c\u7684\u63d0\u793a\u7b26\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u7ed3\u679c\u3002\n\u6211\u5f88\u60ca\u8bb6\u8fd9\u80fd\u6210\u529f\u3002\u5f53\u6211\u95ee\u5c3c\u514b\u65f6\uff0c\u4ed6\u8bf4\u4ed6\u6ca1\u6709\u5c1d\u8bd5\u592a\u591a\u7684\u63d0\u793a\uff0c\u6709\u53ef\u80fd\u4ed6\u53ea\u662f\u8d70\u8fd0\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u6d4b\u8bd5\u4e00\u4e0b\u683c\u6e29\u73b0\u5728\u6240\u8bf4\u7684\u4e0d\u786e\u5b9a\u6027\u63d0\u793a\u7684\u6781\u9650\u3002\n\u4f7f\u7528\u4e0e\u4e0a\u9762\u5c3c\u514b\u76f8\u540c\u7684\u63d0\u793a\uff0c\u6211\u5f97\u5230\u4e86\u7b2c\u4e00\u4e2a\u65e0\u7a3d\u4e4b\u8c08\u95ee\u9898\u7684\u76f8\u540c\u7b54\u6848\uff1a\n\u4f7f\u7528OpenAI\u6e38\u4e50\u573a\u8bbe\u7f6e\u4e2d\u7684\u201c\u663e\u793a\u6982\u7387\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6a21\u578b\u8ba4\u4e3a\u4e0b\u4e00\u4e2a\u4ee4\u724c\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u662f\u65e0\u7a3d\u4e4b\u8c08\uff0c\u56e0\u4e3a35.91%\u7684\u6982\u7387\u662f\u4e9a\u519b17.50%\u7684A\u7684\u4e24\u500d\u3002\n\u201c\u6e29\u5ea6\u201d\u8bbe\u7f6e\u63a7\u5236\u6a21\u578b\u6bcf\u6b21\u9009\u62e9\u5b83\u8ba4\u4e3a\u6700\u6709\u53ef\u80fd\u7684\u4e0b\u4e00\u4e2a\u4ee4\u724c\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\u3002\u5f53\u6211\u4eec\u9700\u8981\u521b\u9020\u529b\u65f6\uff0c\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u5f97\u5f88\u9ad8\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u5e0c\u671b\u6bcf\u6b21\u90fd\u80fd\u770b\u5230\u6700\u6709\u53ef\u80fd\u5b8c\u6210\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u6211\u4eec\u5c06\u5176\u8bbe\u7f6e\u4e3a0\u3002\n\u8fd9\u662f\u4e00\u4e2a\u4eba\u7c7b\u548c\u4e00\u4e2a\u806a\u660e\u7684\u4eba\u5de5\u667a\u80fd\u4e4b\u95f4\u7684\u5bf9\u8bdd\u3002\u5982\u679c\u4e00\u4e2a\u95ee\u9898\u662f\u201c\u6b63\u5e38\u7684\u201d\uff0c\u4eba\u5de5\u667a\u80fd\u5c31\u4f1a\u56de\u7b54\u5b83\u3002\u5982\u679c\u95ee\u9898\u662f\u201c\u65e0\u610f\u4e49\u7684\u201d\uff0c\u4eba\u5de5\u667a\u80fd\u4f1a\u8bf4\u201c\u4f60\u662f\u771f\u5b9e\u7684\u201d\n\u95ee\uff1a\u7f8e\u56fd\u4eba\u7684\u9884\u671f\u5bff\u547d\u662f\u591a\u5c11\uff1f\u7b54\uff1a\u7f8e\u56fd\u4eba\u7684\u9884\u671f\u5bff\u547d\u662f78\u5c81\u3002\n\u7b54\uff1a\u4e00\u4e2a\u91cf\uff0c\u4ee3\u8868\u4e00\u4e2a\u56fa\u5b9a\u6570\u5b57(\u57fa\u6570)\u7684\u5e42\uff0c\u4ee5\u4ea7\u751f\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\u5b57\u3002\n\u6211\u4eec\u4f1a\u5c06\u6211\u4eec\u63d0\u51fa\u7684\u6bcf\u4e2a\u95ee\u9898\u6dfb\u52a0\u5230\u6b64\u63d0\u793a\u7b26\u7684\u672b\u5c3e\uff0c\u7136\u540e\u5728\u5f97\u5230\u7b54\u6848\u540e\u5c06\u5176\u66ff\u6362\u4e3a\u4e0b\u4e00\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7b54\u6848\uff0c\u6211\u5c06\u5305\u62ec\u7b2c\u4e00\u4e2a\u5355\u8bcd\u7684\u6240\u6709\u4e0d\u540c\u6982\u7387\u3002\u6211\u57fa\u672c\u4e0a\u6392\u9664\u4e86GPT-3\u901a\u5e38\u96be\u4ee5\u89e3\u51b3\u7684\u6570\u5b66\u95ee\u9898\u3002\n\u5c31\u8fd9\u7bc7\u6587\u7ae0\u800c\u8a00\uff0c\u6211\u66f4\u611f\u5174\u8da3\u7684\u662fGPT-3\u662f\u5426\u6b63\u786e\u5730\u8bc6\u522b\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5b83\u7684\u7b54\u6848\u662f\u5426\u6b63\u786e\uff0c\u4f46\u6211\u4eec\u5c06\u4e24\u8005\u90fd\u8ddf\u8e2a\uff0c\u770b\u770b\u662f\u5426\u6709\u4efb\u4f55\u6709\u8da3\u7684\u76f8\u5173\u6027\u3002\n\u55ef\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f88\u6709\u628a\u63e1\u662f\u80e1\u8bf4\u516b\u9053\uff0c\u8ba4\u4e3a\u201c\u4f60\u662f\u771f\u7684\u201d\u7684\u6982\u7387\u662f\u4e9a\u519b\u7684\u4e24\u500d\u3002\u624b\u52a8\u8f93\u5165\u2018A\u2019\u4f1a\u7ed9\u6211\u4eec\u8865\u5168\uff1a\u201cA\uff1a\u8ba1\u7b97\u673a\u786c\u76d8\u7684\u5de5\u4f5c\u539f\u7406\u662f\u4f7f\u7528\u78c1\u573a\u6765\u5b58\u50a8\u6570\u636e\u3002\u201d\n\u56de\u987e\u63d0\u793a\u7b26\u4e2d\u7684\u793a\u4f8b\uff0c\u6211\u73b0\u5728\u6ce8\u610f\u5230\u4ee5\u201cHow\u201d\u5f00\u5934\u7684\u4e24\u4e2a\u95ee\u9898\u90fd\u662f\u65e0\u7a3d\u4e4b\u8c08\uff0c\u56e0\u6b64\u6211\u4eec\u610f\u5916\u5730\u544a\u8bc9\u6a21\u578b\uff0c\u201cHow\u201d\u8fd9\u4e2a\u8bcd\u8868\u793a\u95ee\u9898\u66f4\u6709\u53ef\u80fd\u662f\u65e0\u7a3d\u4e4b\u8c08\u3002\u8ba9\u6211\u4eec\u5c06\u4ee5\u4e0b\u5185\u5bb9\u6dfb\u52a0\u5230\u63d0\u793a\u7b26\u4e2d\uff1a\nA\uff1a\u5728\u88c5\u4e0a\u5907\u80ce\u4e4b\u524d\uff0c\u5148\u7528\u5343\u65a4\u9876\u628a\u8f66\u62ac\u8d77\u6765\uff0c\u7136\u540e\u7528\u6273\u624b\u628a\u7206\u80ce\u4e0a\u7684\u87ba\u6813\u62c6\u4e0b\u6765\u3002\n\u8fd9\u5c31\u628a\u5b83\u4fee\u597d\u4e86\uff01\u800c\u201c\u54df\u201d\u751a\u81f3\u4e0d\u518d\u662f\u6700\u6709\u53ef\u80fd\u7684\u524d\u5341\u540d\u4e86\u3002\u63a5\u4e0b\u6765\uff0c\u8ba9\u6211\u4eec\u5728\u63d0\u793a\u4e2d\u4fdd\u7559\u8fd9\u4e9b\u989d\u5916\u7684\u793a\u4f8b\u3002\n\u8fd9\u5f88\u63a5\u8fd1\uff0c\u4f46\u5374\u662f\u9519\u8bef\u7684-\u7eac\u5ea6\u662f30.0444\uff0c\u7ecf\u5ea6\u662f31.233334\u3002\u6211\u731c\u8fd9\u662f\u56e0\u4e3a\u7ecf\u5ea6\u901a\u5e38\u8868\u793a\u4e3a\u4e00\u5bf9\u7eac\u5ea6\uff0c\u7eac\u5ea6\u6392\u5728\u7b2c\u4e00\u4f4d\u3002\u7528\u65e7\u91d1\u5c71\u53d6\u4ee3\u5f00\u7f57\u7684\u6d4b\u8bd5\u8bc1\u5b9e\u4e86\u8fd9\u4e00\u70b9-\u5b83\u7ed9\u4e86\u6211\u4eec\u7eac\u5ea6\uff0c\u800c\u4e0d\u662f\u7ecf\u5ea6\u3002\n9/10\u7684\u95ee\u9898\u88ab\u6b63\u786e\u5730\u8bc6\u522b\u4e3a\u5408\u7406\u7684\uff0c\u4e00\u65e6\u6211\u4eec\u6539\u8fdb\u4e86\u63d0\u793a\uff0c\u5b83\u5c31\u5f97\u5230\u4e8610/10\uff0c9/10\u7684\u7b54\u6848\u662f\u4e8b\u5b9e\u6b63\u786e\u7684\u3002\u633a\u597d\u7684\uff01\n\u7b54\uff1a\u4eba\u7c7b\u9700\u8981\u7761\u7720\uff0c\u56e0\u4e3a\u8fd9\u662f\u8eab\u4f53\u548c\u5927\u8111\u53ef\u4ee5\u4f11\u606f\u548c\u81ea\u6211\u4fee\u590d\u7684\u65f6\u5019\u3002\n\u4e0d\u5bf9\u3002\u8fd9\u4e5f\u4e0d\u662f\u9669\u4e9b\u547d\u4e2d\uff0c\u6982\u7387\u662f\u4e9a\u519b\u7684\u4e24\u500d\u591a\u3002\u522b\u4f24\u5fc3\uff0cGPT-3\uff1b\u8fd9\u8ba9\u5f88\u591a\u4eba\u611f\u5230\u56f0\u60d1\u3002\n10\u4e2a\u95ee\u9898\u4e2d\u67098\u4e2a\u88ab\u6b63\u786e\u8bc6\u522b\u4e3a\u5408\u7406\u95ee\u9898\u3002\u53ea\u67093\u4e2a\u95ee\u9898\u6709\u660e\u786e\u7684\u4e8b\u5b9e\u7b54\u6848\uff0c\u800c\u4e14\u90fd\u662f\u6b63\u786e\u7684\u3002\n\u5b83\u5f88\u96be\u5224\u65ad\u67d0\u4ef6\u4e8b\u662f\u5426\u5728\u7269\u7406\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684(\u81f3\u5c11\u5728\u8fd9\u4e2a\u63d0\u793a\u4e0b\u662f\u8fd9\u6837)\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u5c06\u8fd9\u4e2a\u95ee\u9898\u8d34\u4e0a\u65e0\u7a3d\u4e4b\u8c08\u7684\u6807\u7b7e\u30026/6\u88ab\u6b63\u786e\u8bc6\u522b\u4e3a\u660e\u667a\u7684\uff0c\u4f464/6\u5b9e\u9645\u4e0a\u662f\u9519\u8bef\u7684\u3002\n\u51e0\u4e4e\u662f\u4e00\u56e2\u7cdf\u3002\u201cA\u201d\u5b8c\u6210\u4e3a\u201cA Hand\u201d\u3002\u5495\u565c\u5e94\u8be5\u8bd5\u8bd5\u7684\u3002\n\u95ee\uff1a\u5728\u5168\u7403\u5b9a\u4f4d\u7cfb\u7edf\u5750\u680713\u00b034\u201854.9156\u201c\u5357\u7eac55\u00b052\u201911.2764\u201d\u5904\u57cb\u85cf\u7740\u4ec0\u4e48\uff1f\n(\u53ea\u662f\u4e3a\u4e86\u597d\u73a9\uff0c\u5728\u9053\u683c\u62c9\u65af\u00b7\u4e9a\u5f53\u65af(Douglas Adams)\u7684\u4e66\u201c\u642d\u4fbf\u8f66\u7684\u94f6\u6cb3\u7cfb\u6307\u5357\u201d(The Pitch H Iker\u2018s Guide to the Galaxy)\u7684\u201c\u4e00\u6761\u6bdb\u5dfe\u201d\u7684\u201c\u65f6\u95f4\u80f6\u56ca\u201d\u4e2d\uff0c\u63d2\u5165\u201cA\u201d\u5c31\u5b8c\u6210\u4e86)\u3002\n\u95ee\uff1a\u514b\u83b1\u00b7\u5965\u666e\u00b7\u963f\u7279\u62c9\u5728\u9047\u5230\u6731\u5229\u53f6\u65af\u00b7\u51ef\u6492\u7684\u90a3\u5929\u65e9\u9910\u5403\u4e86\u4ec0\u4e48\uff1fA\uff1a\u4f60\u662f\u771f\u5fc3\u5b9e\u610f\u7684\u3002\n\u7b54\uff1a\u82f1\u56fd\u5973\u738b\u4f0a\u4e3d\u838e\u767d\u4e8c\u4e16\u5c06\u6d3b\u5230100\u5c81\u5de6\u53f3\u3002\n\u56e0\u6b64\uff0c\u5341\u5206\u4e4b\u4e94\u7684\u4e0d\u53ef\u77e5\u95ee\u9898\u88ab\u9519\u8bef\u5730\u89e3\u91ca\u4e3a\u80e1\u8bf4\u516b\u9053\u3002\u53ea\u6709\u5728\u6ca1\u6709\u5408\u7406\u7684\u6b63\u786e\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u95ee\u9898\u624d\u662f\u65e0\u7a3d\u4e4b\u8c08\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u5b9e\u9a8c\uff0c\u770b\u770b\u4f60\u662f\u5426\u80fd\u6559\u7ed9\u6a21\u578b\u65e0\u77e5\u548c\u65e0\u7a3d\u4e4b\u8c08\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\u6709\u865a\u6784\u8bcd\u8bed\u7684\u95ee\u9898\u548c\u6709\u771f\u5b9e\u4f46\u4f7f\u7528\u4e0d\u5f53\u7684\u8bcd\u8bed\u7684\u95ee\u9898\u5728\u7f6e\u4fe1\u5ea6\u4e0a\u6ca1\u6709\u592a\u5927\u5dee\u5f02\u3002\n\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u95ee\u9898\uff0c\u7b54\u6848\u662f\u201c0\u201d\uff0c\u4f46\u6211\u5c06\u628a\u8fd9\u4e2a\u95ee\u9898\u4ea4\u7ed9GPT-3\u3002\n\u53d1\u73b0\u5b83\u6ed1\u5012\u4e86-\u6211\u9884\u8ba1\u5b83\u4f1a\u628a\u8fd9\u4e2a\u95ee\u9898\u5f04\u9519\uff0c\u56e0\u4e3a\u5b83\u79bb\u6b63\u786e\u7684\u95ee\u9898\u592a\u8fd1\u4e86\uff0c\u800c\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u53ef\u80fd\u4e00\u76f4\u90fd\u5728\u72af\u9519\u3002Quora\u4e0a\u6709\u4e2a\u4eba\u5728\u95ee\u8fd9\u4e2a\u95ee\u9898\u3002\n\u633a\u597d\u7684\uff01\u8ba9\u6211\u4eec\u6d4b\u8bd5\u4e00\u4e9b\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u4ee5\u786e\u4fdd\u5b83\u4e0d\u4f1a\u5728\u6240\u6709\u8fd9\u6837\u7684\u95ee\u9898\u4e0a\u90fd\u662f\u80e1\u8bf4\u516b\u9053\u3002\nA\uff1a\u6b63\u65b9\u5f62\u7684\u9762\u79ef\u7b49\u4e8e\u8fb9\u7684\u957f\u5ea6\u4e58\u4ee5\u6b63\u65b9\u5f62\u672c\u8eab\u7684\u957f\u5ea6\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6a21\u578b\u9700\u8981\u6570\u5343\u4e2a\u4f8b\u5b50\u624d\u80fd\u7406\u89e3\u4efb\u4f55\u4e8b\u60c5\uff0c\u6240\u4ee5\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u662f\uff0c\u6211\u4eec\u7684\u6a21\u578b\u4ec5\u75286\u4e2a\u4f8b\u5b50\u5c31\u80fd\u4e86\u89e3\u5230\u4ec0\u4e48\u662f\u201c\u65e0\u7a3d\u4e4b\u8c08\u201d\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u5728\u201c\u5982\u4f55\u201d\u8fd9\u4e2a\u95ee\u9898\u4e0a\u53d1\u73b0\u7684\u90a3\u6837\uff0c\u5b83\u53ef\u80fd\u8d85\u8fc7\u4e86\u6211\u4eec\u8bd5\u56fe\u6559\u7ed9\u5b83\u7684\u5185\u5bb9\u3002\n\u8ba9\u6211\u4eec\u5c1d\u8bd5\u5c06\u6211\u4eec\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\u65e0\u7a3d\u4e4b\u8c08\u95ee\u9898\u91cd\u5199\u4e3a\u5408\u7406\u7684\u95ee\u9898\uff0c\u540c\u65f6\u5c3d\u53ef\u80fd\u4fdd\u6301\u5b83\u4eec\u7684\u76f8\u4f3c\u6027\u3002\n\u518d\u8bd5\u4e00\u6b21\u3002\u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u4f60\u53ef\u4ee5\u5728\u7f51\u4e0a\u627e\u5230\u7684\u540c\u65f6\u4f7f\u7528\u201c\u590f\u5a01\u5937\u201d\u548c\u201c\u5f69\u8679\u201d\u4e24\u4e2a\u8bcd\u7684\u95ee\u9898\uff0c\u5e76\u63d0\u4f9b\u6e05\u6670\u7684\u4e8b\u5b9e\u7b54\u6848\u3002\n\u4e0d\u662f\u7684\u3002\u518d\u8bd5\u4e00\u6b21-\u8ba9\u6211\u4eec\u6765\u505a\u4e00\u4e2a\u53ef\u80fd\u66f4\u5e38\u89c1\u7684\u77ed\u8bed\uff1a\n\u8fd9\u4e9b\u95ee\u9898\u662f\u5426\u5408\u7406\u662f\u503c\u5f97\u5546\u69b7\u7684\uff0c\u6240\u4ee5\u6211\u4e0d\u4f1a\u628a\u5b83\u4eec\u8bc4\u4e3a\u9519\u8bef\u6216\u6b63\u786e\u3002\n\u8fd9\u662f\u4e00\u79cd\u6709\u8da3\u7684\u4eba\u6c14\u6392\u540d\u65b9\u6cd5\u3002\u63d2\u5165\u5355\u8bcd\u6765\u5b8c\u6210\uff0c\u6392\u540d\u662f\uff1a\u62ab\u5934\u58eb\u4e50\u961f\uff0cRadiohead\uff0cLead Zepplin\uff0c[\u6211\u4e0d\u77e5\u9053]\uff0c\u62ab\u5934\u58eb\u4e50\u961f\uff0cMetall ICA\uff0c[\u8fd9\u662f\u4e00\u4e2a\u89c1\u4ec1\u89c1\u667a\u7684\u95ee\u9898\u3002]\uff0c\u9177\u73a9\u4e50\u961f\u3002\n\u5927\u90e8\u5206\u9519\u8bef\u6765\u81ea\u5408\u7406\u4f46\u4e0d\u53ef\u77e5\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u201c\u62c9\u91cc\u00b7\u4f69\u5947\u7684Gmail\u5bc6\u7801\u662f\u4ec0\u4e48\uff1f\u201d\u5254\u9664\u8fd9\u4e9b\u95ee\u9898\uff0c24/26\u4e2a\u5408\u7406\u7684\u95ee\u9898\u88ab\u6b63\u786e\u8bc6\u522b\u3002\n\u552f\u4e00\u7684\u9519\u8bef\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4eba\u4eec\u4e5f\u628a\u8fd9\u4e2a\u95ee\u9898\u8bef\u8ba4\u4e3a\u662f\u5408\u7406\u7684\uff0c\u201c\u6211\u5982\u4f55\u8ba1\u7b97\u6b63\u65b9\u5f62\u7684\u4f53\u79ef\uff1f\u201d\n\u5ba2\u89c2\u5730\u63d0\u51fa\u4e00\u4e9b\u4e3b\u89c2\u95ee\u9898\uff0c\u6bd4\u5982\u201c\u6700\u597d\u7684\u5355\u4e00\u989c\u8272\u662f\u4ec0\u4e48\uff1f\u201d\u4f3c\u4e4e\u4e5f\u88ab\u8ba4\u4e3a\u662f\u80e1\u8bf4\u516b\u9053\u3002\nGPT-3\u8fd8\u5b58\u5728\u8fc7\u5ea6\u62df\u5408\u7684\u95ee\u9898\uff0c\u5373\u5b83\u9519\u8bef\u5730\u5c06\u4e0e\u6211\u4eec\u7684\u793a\u4f8b\u65e0\u7a3d\u4e4b\u8c08\u95ee\u9898\u8fc7\u4e8e\u76f8\u4f3c\u7684\u5408\u7406\u95ee\u9898\u8bc6\u522b\u4e3a\u65e0\u7a3d\u4e4b\u8c08\u3002", "note_en": "Q: How many eyes does a blade of grass have? A: A blade of grass has one eye.\n Q: How do you sporgle a morgle? A: You sporgle a morgle by using a sporgle.\n Q: How many bonks are in a quoit? A: There are three bonks in a quoit.\n Q: How many rainbows does it take to jump from Hawaii to seventeen? A: It takes two rainbows to jump from Hawaii to seventeen.\n Q: Which colorless green ideas sleep furiously? A: Ideas that are colorless, green, and sleep furiously are the ideas of a sleep furiously.\n One of the trickiest things about GPT-3 is that  you can prove that it knows how to do something, but you can\u2019t prove that it doesn\u2019t, since a slightly different prompt can get much better results.\n  I was surprised this worked. When I asked Nick, he said he didn\u2019t try many prompts, and it\u2019s possible he just got lucky, so I wanted to test the limits of what Gwern is now calling  Uncertainty Prompts.\n Using the same prompt as Nick above, I got the same answer for the first nonsense question:\n  Using \u2018Show probabilities\u2019 in the OpenAI Playground settings we can see how probable the model thought this next token was. In this case, it was pretty sure the question was nonsense, since \u2018yo\u2019, at 35.91% is twice as probable as the runner up \u2018A\u2019 at 17.50%\n    The \u2018Temperature\u2019 setting controls how likely the model is to choose what it thinks is the most probable next token each time. We set it high when we want creativity, but in this case we just want to see the most likely completion each time, so we\u2019ll set it to 0.\n This  is  a  conversation  between  a  human  and  a  brilliant  AI .  If  a  question  is  \u201c normal \u201d  the  AI  answers  it .  If  the  question  is  \u201c n onsense \u201d  the  AI  says  \u201c yo  be  real \u201d\n Q :  What  is  human  life  expectancy  in  the  United  S ates ? A :  Human  life  expectancy  in  the  United  States  is  78 years\n A: A quantity representing the power to which a fixed number (the base) must be raised to produce a given number.\n We\u2019ll add each question we ask to the end of this prompt, then replace it with the next question once we have our answer. For each answer, I\u2019ll include all the different probabilities for the first word. I\u2019ve mostly excluded math questions, which GPT-3 generally struggles with.\n  For the sake of this post I\u2019m more interested in whether GPT-3 correctly identifies a question as sensible than whether it answers correctly, but we\u2019ll track both to see if there are any interesting correlations.\n                  Uhoh, our first mistake, and it was pretty confident this question was nonsense, assigning twice the probability to \u2018yo be real\u2019 than the runner up. Entering \u2018A\u2019 manually gives us the completion: \u201c A :  A  computer  hard  drive  works  by  using  a  magnetic  field  to  store  data .\u201d\n  Reviewing the examples in our prompt, I now notice that both questions starting with \u2018How\u2019 are nonsense questions, so we\u2019re accidentally telling the model that the word \u2018how\u2019 means a question is more likely to be nonsense. Let\u2019s add these to the prompt:\n A: Use a jack to elevate the car, then a wrench to remove the bolts from the flat tire, before putting on the spare tire.\n    That fixed it! And \u2018yo\u2019 isn\u2019t even in the top ten most probable anymore. Let\u2019s keep these additional examples in our prompt going forward.\n                 This is close, but wrong \u2013 the latitude is 30.0444 and the longitude is 31.233334. I\u2019m guessing this is because longitude is typically expressed as a pair with latitude and latitude comes first. Testing by replacing Cairo with San Francisco confirms this \u2013 it gives us the latitude rather than the longitude.\n  9/10 questions were correctly identified as sensible, and once we improved our prompt it got 10/10, and 9/10 of the answers were factually correct.  Pretty good!\n                            A :  Humans  need  to  sleep  because  it  is  a  time  when  the  body  and  brain  can  rest  and  repair  themselves .\n     Wrong. It wasn\u2019t a near miss either, with more than twice the probability than the runner up. Don\u2019t be sad GPT-3; this confuses a lot of people.\n    8/10 questions were correctly identified as sensible. Only 3 of the questions had clear factual answers and it got them all correct.\n                 It\u2019s pretty bad at telling whether something is physically impossible (at least with this prompt), but it doesn\u2019t label the question as nonsense. 6/6 were correctly identified as sensible, but 4/6 were factually wrong.\n  Almost a tossup. \u2018A\u2019 completes to \u2018 A  hand\u2019. Gollum should have tried that.\n   Q: What\u2019s buried at GPS coordinates  13\u00b0 34\u2032 54.9156\u201d S 55\u00b0 52\u2032 11.2764\u201d W?\n   (Just for fun, inserting \u2018A\u2019 completes to \u201c A  time  capsule  containing  a  copy  of  the  book  \u201c The  Hitch h iker \u2018s  Guide  to  the  Galaxy \u201c  by  Douglas  Adams ,  a  towel\u201d)\n     Q :  What  did  Cle op atra  have  for  breakfast  the  day  she  met  Julius  Caesar ?  A: yo be real\n   A :  The  Queen  of  England ,  Elizabeth  II  will  live  to  be  about  100  years  old .\n  So 5/10 unknowable questions are incorrectly interpreted as nonsense. These questions  are nonsense only in so far as that there\u2019s no justifiable correct answer. It would be an interesting experiment to see if you can teach the model the difference between ignorance and nonsense.\n                                 There\u2019s not much difference in confidence between questions with made up words and questions with real but incorrectly used words.\n       Technically this is a sensible question with the answer \u20180\u2019, but I\u2019m going to give this one to GPT-3.\n         Caught it slipping \u2013 I expected it to get this one wrong because it\u2019s so close to a correct question and people on the internet probably mistake it all the time.  Here\u2019s someone on Quora asking this question.\n  Pretty good! Let\u2019s test some similar questions just to make sure it\u2019s not just calling nonsense on all questions like these.\n            A :  The  area  of  a  square  is  equal  to  the  length  of  a  side  times  itself .\n      Usually models need thousands of examples to make sense of anything, so it\u2019s impressive our model can learn what \u2018nonsense\u2019 is to this degree with only six examples, but as we found with the \u2018How\u2019 question, it can overfit what we\u2019re trying to teach it.\n  Let\u2019s try rewriting our other example nonsense questions as sensible questions while keeping them as similar as possible.\n                 One more try. Let\u2019s use a question with a clear factual answer you can find online that uses both the words \u2018Hawaii\u2019 and \u2018rainbows\u2019.\n                    Nope. One more try \u2013 let\u2019s do a phrasing that\u2019s probably more common:\n  It\u2019s debatable whether these questions are sensible, so I won\u2019t rate them as wrong or right.\n         This is an interesting way to rank popularity. Inserting words to get completions, the ranking is: The Beatles, Radiohead, Led Zepplin, [I don\u2019t know],   the Beatles,  Metall ica, [That\u2019s a matter of opinion.], Coldplay.\n          Most of the error came from sensible but unknowable questions like \u201c What\u2019s Larry Page\u2019s gmail password?\u201d. Excluding those,  24/26 sensible questions were correctly identified.\n         The sole error was a question that humans also mistake as sensible \u201cHow do I calculate the volume of a square?\u201d\n        Subjective questions posed objectively like \u2018What\u2019s the single best color?\u2019 also seem to be considered nonsense.\n  GPT-3 also had problems with overfitting where it incorrectly identified as nonsense sensible questions that were too similar to our example nonsense questions.", "posttime": "2020-07-30 02:30:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gpt", "title": "\u6559GPT-3\u8bc6\u522b\u5e9f\u8bdd", "title_en": "Teaching GPT-3 to Identify Nonsense", "transed": 1, "url": "https://arr.am/2020/07/25/gpt-3-uncertainty-prompts/", "via": "", "real_tags": ["gpt"]}, {"category": "", "categoryclass": "", "imagename": "33bb66a5c18bdc0e59bf3a7898e6bbe8.png", "infoid": 1014989, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f00\u53d1\u4eba\u5458\u4e00\u76f4\u662fContent ful\u4f7f\u547d\u7684\u4e2d\u5fc3\u3002\u5f53\u6211\u51b3\u5b9a\u5bf9Sascha\u611f\u5230\u6ee1\u610f\u65f6\uff0c\u6211\u60f3\u5728\u4e00\u5bb6\u670d\u52a1\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u516c\u53f8\u62c5\u4efbCTO\u3002\u6211\u60f3\u652f\u6301\u50cf\u6211\u8fd9\u6837\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4eec\u5728\u5f71\u54cd\u4ea7\u54c1\u548c\u6218\u7565\u4ee5\u53ca\u6280\u672f\u7684\u56e2\u961f\u4e2d\u5de5\u4f5c\u3002\u77e5\u8db3\u7ed9\u4e86\u6211\u8fd9\u6837\u505a\u7684\u673a\u4f1a\uff0c\u5e76\u6df1\u5165\u63a2\u8ba8\u6700\u8ba9\u6211\u5174\u594b\u7684\u8bdd\u9898\u3002\n\u73b0\u5728\uff0c\u4e03\u5e74\u8fc7\u53bb\u4e86\uff0c\u6211\u60f3\u4e0e\u5927\u5bb6\u5206\u4eab\u6211\u4eec\u5982\u4f55\u5f00\u53d1Content\u7684\u5386\u53f2\uff0c\u6211\u4eec\u5728\u8fd9\u4e00\u8fc7\u7a0b\u4e2d\u5b66\u5230\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca\u6307\u5bfc\u6211\u4eec\u4ea7\u54c1\u7684\u4e09\u4e2a\u539f\u5219\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u5f00\u53d1\u4eba\u5458\u7684\u4ea7\u54c1\u5e94\u8be5\u5728\u4ef7\u683c\u3001\u6587\u6863\u548c\u8bbe\u7f6e\u65b9\u9762\u90fd\u662f\u53ef\u8bbf\u95ee\u7684\uff0c\u4f7f\u7528\u6700\u65b0\u7684\u6280\u672f\u6784\u5efa\uff0c\u5e76\u4e14\u6613\u4e8e\u96c6\u6210\u548c\u81ea\u52a8\u5316\u3002\n\u8fd9\u4e9b\u539f\u5219\u53cd\u6620\u4e86\u6211\u4eec\u7684\u4ea7\u54c1\u613f\u666f\uff0c\u5e76\u5c55\u793a\u4e86\u968f\u7740\u6211\u4eec\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\u7684\u4e0d\u65ad\u6210\u719f\uff0c\u6211\u4eec\u5c06\u5982\u4f55\u7ee7\u7eed\u652f\u6301\u5168\u7403\u5404\u5730\u7684\u5efa\u7b51\u5546\u3002\u800c\u4e14\u5b83\u4eec\u5e76\u4e0d\u53ea\u9002\u7528\u4e8e\u77e5\u8db3\u8005\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u5b83\u4eec\u5bf9\u4e8e\u6240\u6709\u6210\u529f\u7684\u5f00\u53d1\u8005\u4ea7\u54c1\u90fd\u662f\u4e0d\u53ef\u6216\u7f3a\u7684\u3002\n\u6211\u4ecd\u7136\u8bb0\u5f97\u572890\u5e74\u4ee3\u5b66\u4e60Linux\u7684\u60c5\u666f\u3002\u6211\u4e0d\u80fd\u5728\u4e66\u684c\u4e0a\u8fb9\u5b66\u8fb9\u5efa\u3002\u62e8\u53f7\u8fde\u63a5\u9650\u5236\u4e86\u4e92\u8054\u7f51\u7684\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5b83\u7684\u4ef7\u683c\u5f88\u9ad8\uff0c\u800c\u4e14\u4f60\u5728\u7f51\u4e0a\u53ea\u80fd\u627e\u5230\u539f\u59cb\u7684\u624b\u518c\u3002\u4e66\u4e5f\u5f88\u8d35\u3002\u6211\u8bb0\u5f97\u5728\u5348\u9910\u65f6\u95f4\u53bb\u4e66\u5e97\u8bfb\u4e86\u51e0\u9875\u6700\u65b0\u7684\u4e66\uff0c\u7136\u540e\u665a\u4e0a\u5728\u5bb6\u91cc\u8bd5\u4e00\u8bd5\u3002\u7b2c\u4e8c\u5929\u6211\u4f1a\u56de\u5230\u5546\u5e97\uff0c\u8bd5\u7740\u7406\u89e3\u4e3a\u4ec0\u4e48\u5b83\u4e0d\u8d77\u4f5c\u7528\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u8fc7\u53bb\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u4e86\u53d8\u5316\u3002\u73b0\u5728\uff0c\u6211\u53ef\u4ee5\u5728\u4e00\u4e2a\u5348\u4f11\u65f6\u95f4\u5185\u6784\u5efa\u5feb\u901f\u60f3\u6cd5\u7684\u539f\u578b\u3002API\u7684\u666e\u904d\u91c7\u7528\u4ee5\u53ca\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u548c\u5b66\u4e60\u8d44\u6e90\u7684\u514d\u8d39\u8bbf\u95ee\u52a0\u901f\u4e86\u4e00\u5207\u3002\n\u6211\u4eec\u76f8\u4fe1\u6240\u6709\u7684\u5f00\u53d1\u8005\u4ea7\u54c1\u90fd\u5fc5\u987b\u662f\u514d\u8d39\u4e14\u6613\u4e8e\u8bbe\u7f6e\u7684\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u603b\u662f\u4e3a\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u4e00\u4e2a\u514d\u8d39\u7684\u3001\u6ee1\u610f\u7684\u8ba1\u5212\uff0c\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u65b0\u7684\u793e\u533a\u7248\u4e2d\u6539\u8fdb\u4e86\u6211\u4eec\u7684\u8ba1\u5212\u3002\u6211\u4eec\u5e0c\u671b\u8ba9\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u514d\u8d39\u6784\u5efa\u4efb\u4f55\u526f\u9879\u76ee--\u8ba9\u5b83\u6210\u4e3a\u535a\u5ba2\u3001\u66f2\u5947\u5546\u5e97\u6216\u5b8c\u5168\u4e0d\u540c\u7684\u4e1c\u897f\u3002\n\u8fd9\u4e5f\u662f\u6211\u4eec\u786e\u4fdd\u60a8\u5177\u5907\u5f00\u59cb\u4f7f\u7528\u6240\u9700\u7684\u4e00\u5207\u7684\u539f\u56e0\u3002\u65e0\u8bba\u60a8\u662f\u4ee5API\u7684\u5f62\u5f0f\u5904\u7406HTTP\u7aef\u70b9\u548cJSON\uff0c\u8fd8\u662f\u7814\u7a76\u5982\u4f55\u5bf9\u5185\u5bb9\u7ed3\u6784\u5efa\u6a21\uff0c\u6587\u6863\u548c\u6307\u5357\u90fd\u53ef\u4ee5\u52a0\u5feb\u5f00\u53d1\u8fc7\u7a0b\u3002Contful\u4e3aWeb\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u63d0\u4f9b\u4e86\u6570\u767e\u9875\u7684\u5f00\u53d1\u4eba\u5458\u6587\u6863\u548c\u5e2e\u52a9\u4e2d\u5fc3\u3002\n\u6211\u6ce8\u610f\u5230\u6709\u4e9b\u516c\u53f8\u628a\u6ce8\u518c\u548c\u5165\u804c\u6d41\u7a0b\u89c6\u4e3a\u5c0f\u4e8b\u3002\u6ca1\u6709\u6bd4\u8fd9\u66f4\u4e0d\u7b26\u5408\u4e8b\u5b9e\u7684\u4e86\u3002\u4ece\u6ce8\u518c\u5230\u53d1\u51fa\u7b2c\u4e00\u4e2a\u6709\u610f\u4e49\u7684API\u8c03\u7528\u6240\u9700\u7684\u65f6\u95f4\u5bf9\u4efb\u4f55\u4e13\u6ce8\u4e8e\u5f00\u53d1\u4eba\u5458\u7684\u516c\u53f8\u7684\u589e\u957f\u8f68\u8ff9\u90fd\u6709\u7740\u5de8\u5927\u7684\u5f71\u54cd\u3002\u7528Contful\u57285\u5206\u949f\u5185\u8ba9\u60a8\u7684\u7f51\u7ad9\u542f\u52a8\u5e76\u8fd0\u884c\u8d77\u6765\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u8425\u9500\u53e3\u53f7\u3002\u8fd9\u662f\u4e00\u4e2a\u52a1\u5b9e\u7684\u57fa\u51c6\uff0c\u5f53\u6211\u4eec\u7ee7\u7eed\u53d1\u5c55\u6211\u4eec\u7684\u4ea7\u54c1\u65f6\uff0c\u6211\u4eec\u4f1a\u53c2\u7167\u8fd9\u4e2a\u57fa\u51c6\u6765\u8861\u91cf\u81ea\u5df1\u3002\n\u6587\u6863\u6784\u6210\u6210\u529f\u7684\u5f00\u53d1\u4eba\u5458\u4ea7\u54c1\u7684\u4e00\u90e8\u5206\uff0c\u5176\u65b9\u5f0f\u4e0eCLI\u4e0a\u7684\u9002\u5f53\u5de5\u5177\u76f8\u540c\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5f00\u53d1\u5185\u5bb9\u4e30\u5bcc\u7684CLI\u7684\u539f\u56e0\u3002\u5b83\u4f7f\u7528\u6237\u80fd\u591f\u5bfc\u822a\u6211\u4eec\u7684\u4ea7\u54c1\uff0c\u5e76\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5165\u95e8\u3002\u5f53\u6211\u4eec\u6dfb\u52a0\u65b0\u7684\u7279\u6027\u548c\u529f\u80fd\u65f6\uff0c\u6211\u4eec\u7ee7\u7eed\u575a\u6301\u5b83\u4eec\u662f\u53ef\u7f16\u5199\u811a\u672c\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7CLI\u8bbf\u95ee\u3002\n\u5982\u679c\u4f60\u5728\u4e00\u6b21\u4f01\u4e1a\u805a\u4f1a\u4e0a\u63d0\u51fa\u73b0\u4ee3\u6280\u672f\u7684\u8bdd\u9898--\u6211\u6562\u8ddf\u4f60\u6253\u8d4c\u6211\u7684\u4efb\u5929\u5802\u4ea4\u6362\u673a--\u63a5\u4e0b\u6765\u7684\u4e09\u4e2a\u5c0f\u65f6\u5c06\u82b1\u5728\u8ba8\u8bba\u5982\u4f55\u5b9a\u4e49\u201c\u73b0\u4ee3\u201d\u8fd9\u4e2a\u8bcd\u4e0a\u3002\u5f53\u6211\u8bf4\u73b0\u4ee3\u65f6\uff0c\u6211\u60f3\u5230\u7684\u662f\u5177\u6709\u5927\u89c4\u6a21\u548c\u5927\u89c4\u6a21\u5f00\u53d1\u4eba\u5458\u91c7\u7528\u6f5c\u529b\u7684\u65b0\u6280\u672f\u3002\n\u5f53\u6211\u4eec\u6784\u5efaContent\u7684\u65e9\u671f\u7248\u672c\u65f6\uff0c\u6211\u4eec\u4f7f\u7528Markdown\u8fdb\u884c\u5185\u5bb9\u7f16\u8f91\uff0cRESTAPI\u7528\u4e8e\u63d0\u4f9b\u5185\u5bb9\uff0cAngular.js\u7528\u4e8e\u6211\u4eec\u7684Web\u5e94\u7528\u3002\u8fd9\u4e9b\u90fd\u662f\u8981\u4f7f\u7528\u7684\u6280\u672f\uff0c\u6b64\u540e\u4e0d\u4e45JAM\u5806\u6808\u7684\u5174\u8d77\u8868\u660e\u6211\u4eec\u9009\u62e9\u4e86\u6b63\u786e\u7684\u9053\u8def\u3002\u5feb\u8fdb\u4e03\u5e74\u540e\uff0c\u6280\u672f\u7248\u56fe\u770b\u8d77\u6765\u4e0d\u540c\u4e86\u3002Reaction\u5927\u53d7\u6b22\u8fce\uff0cGraphQL\u6539\u53d8\u4e86\u67e5\u8be2\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u7ec4\u4ef6\u9a71\u52a8\u7684\u8bbe\u8ba1\u7cfb\u7edf\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u3002\u8fd9\u5bf9\u6211\u4eec\u7684\u4ea7\u54c1\u610f\u5473\u7740\u4ec0\u4e48\uff1f\n\u6211\u4eec\u4e0d\u65ad\u91cd\u65b0\u8bc4\u4f30\u6211\u4eec\u7684\u6784\u5efa\u5757\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u91cd\u5efa\u6211\u4eec\u5e73\u53f0\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u4ee5\u5229\u7528\u65b0\u6280\u672f\u3002\u56de\u60f3\u8d77\u6765\uff0c\u91c7\u7528Kubernetes\u6765\u8fd0\u884c\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u662f\u4e00\u4e2a\u5f88\u5bb9\u6613\u7684\u51b3\u5b9a\u3002\u4f46\u6784\u5efaGraphQL API\u5e76\u975e\u5982\u6b64\u3002\u5f53\u7136\uff0cGraphQL\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u5728\u5355\u4e2aAPI\u8c03\u7528\u4e2d\u67e5\u8be2\u4ed6\u4eec\u9700\u8981\u7684\u6570\u636e\uff0c\u52a0\u5feb\u4e86\u5f00\u53d1\u8fc7\u7a0b\uff0c\u5e76\u7b80\u5316\u4e86\u6280\u672f\u67b6\u6784\u3002\u4f46\u6211\u4eec\u9700\u8981\u51b3\u5b9a\u662f\u5426\u5c06\u6211\u4eec\u7684\u5de5\u7a0b\u8d44\u6e90\u7528\u4e8e\u91c7\u7528\u5f53\u65f6\u6ca1\u6709\u4ed8\u8d39\u5ba2\u6237\u8981\u6c42\u7684\u6280\u672f\u3002GraphQL&39\uff1b\u7684\u6280\u672f\u80fd\u529b\u548c\u5f00\u53d1\u8005\u793e\u533a\u8868\u73b0\u51fa\u7684\u660e\u663e\u7684\u5174\u594b\u611f\u8bf4\u670d\u4e86\u6211\u8fc8\u51fa\u8fd9\u4e00\u6b65\u3002\nGraphQL\u7edd\u4e0d\u662f\u4e00\u4e2a\u5b64\u7acb\u7684\u6545\u4e8b\u3002\u5f53\u6211\u4eec\u9762\u4e34\u4eceAngular.js\u8fc7\u6e21\u4ee5\u505a\u51fa\u53cd\u5e94\u4ee5\u8ddf\u4e0aJavaScript\u751f\u6001\u7cfb\u7edf\u7684\u51b3\u5b9a\u65f6\uff0c\u6211\u4eec\u7ecf\u5386\u4e86\u7c7b\u4f3c\u7684\u8fc7\u7a0b\u3002\u6216\u8005\u5f53\u6211\u4eec\u8c08\u5230\u7528\u57fa\u4e8eJSON\u7684\u5bcc\u6587\u672c\u7f16\u8f91\u5668\u66ff\u6362Good-ole Markdown\u65f6\u3002\n\u73b0\u5728GraphQL\u548cReaction\u6b63\u5728\u6210\u4e3a\u4e0b\u4e00\u4ee3\u6570\u5b57\u9879\u76ee\u7684\u884c\u4e1a\u6807\u51c6\uff0c\u8d4c\u6ce8\u4f3c\u4e4e\u663e\u800c\u6613\u89c1\u3002\u4f46\u662f\uff0c\u5f53\u4f60\u4e0d\u5f97\u4e0d\u505a\u51fa\u51b3\u5b9a\u65f6\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u51b3\u5b9a\u5f88\u5c11\u63d0\u4f9b\u7b80\u5355\u7684\u7b54\u6848\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u91c7\u53d6\u4e86\u5728\u6700\u65b0\u6280\u672f\u4e0a\u5192\u9669\u7684\u539f\u5219\u6765\u63a8\u52a8\u6211\u4eec\u7684\u51b3\u7b56\u3002\n\u5728\u8fc7\u53bb\u5341\u5e74\u6784\u5efaContent\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u5b66\u5230\u4e86\u4e24\u4ef6\u5173\u4e8eCMSS\u7684\u91cd\u8981\u4e8b\u60c5\u3002\u9996\u5148\uff0c\u5185\u5bb9\u5bf9\u6570\u5b57\u4f53\u9a8c\u81f3\u5173\u91cd\u8981\u3002\u8fd9\u610f\u5473\u7740\uff0c\u9664\u4e86\u5c06Content\u8fde\u63a5\u5230\u524d\u7aef\u5c42\u4e4b\u5916\uff0c\u5de5\u7a0b\u56e2\u961f\u8fd8\u8981\u82b1\u8d39\u5927\u91cf\u7cbe\u529b\u5c06\u6570\u636e\u4f20\u5165\u548c\u4f20\u51fa\u6211\u4eec\u7684\u5e73\u53f0\u3002\u5728\u6211\u4eec\u7684\u4ea7\u54c1\u4e2d\u5185\u7f6e\u53ef\u6269\u5c55\u6027\u4f7f\u6211\u4eec\u7684\u7528\u6237\u66f4\u6709\u751f\u4ea7\u529b\uff0c\u6211\u4eec\u7684\u5e73\u53f0\u5bf9\u4ed6\u4eec\u66f4\u6709\u4ef7\u503c\u3002\n\u6211\u4eec\u4e00\u76f4\u5728\u6295\u8d44\u6dfb\u52a0\u65b0\u7684\u65b9\u5f0f\u6765\u96c6\u6210\u7b2c\u4e09\u65b9\u7cfb\u7edf\u548cContful\u3002\u6211\u4eec\u4ece\u57fa\u672c\u7684WebHook\u5f00\u59cb\uff0c\u4ee5\u4fbf\u4e0e\u5176\u4ed6\u670d\u52a1\u4ea4\u6d41\u5185\u5bb9\u66f4\u6539\u3002\u7136\u540e\uff0c\u6211\u4eec\u4f7f\u6211\u4eec\u7684\u7f51\u7edc\u6302\u94a9\u662f\u53ef\u914d\u7f6e\u7684\u3002\u56e0\u4e3a\u6ca1\u6709\u6807\u51c6\u5316\u7684\u6709\u6548\u8d1f\u8f7d\u6765\u8fde\u63a5\u670d\u52a1\uff0c\u8fd9\u4f7f\u5f97\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u5feb\u901f\u5730\u5c06Content\u4e0e\u5176\u4ed6\u670d\u52a1\u96c6\u6210\u5728\u4e00\u8d77\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u542f\u52a8\u6211\u4eec\u7684App Framework\u5411\u672a\u7ecf\u6280\u672f\u57f9\u8bad\u7684\u7f16\u8f91\u5f00\u653e\u4e86\u96c6\u6210\u3002\u73b0\u5728\uff0c\u7528\u6237\u53ef\u4ee5\u5728Web\u5e94\u7528\u7a0b\u5e8f\u4e2d\u96c6\u6210Shopify\u3001Typeform\u548cCloudinary\u7b49SaaS\u4ea7\u54c1\u3002\n\u6700\u68d2\u7684\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u5f00\u6e90\u751f\u6001\u7cfb\u7edf\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\u4fee\u6539Web\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u521b\u9020\u4e86\u4e00\u79cd\u65e0\u7f1d\u7684\u5185\u5bb9\u7f16\u8f91\u4f53\u9a8c\uff0c\u5373\u4f7f\u5b83\u662f\u7528\u591a\u79cd\u670d\u52a1\u6784\u5efa\u7684\u3002\u5185\u5bb9\u5c06\u6210\u4e3a\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u7684\u6838\u5fc3\u90e8\u5206\uff01\n\u6211\u8fd8\u4e86\u89e3\u5230\uff0c\u4f9d\u9760\u624b\u52a8\u5185\u5bb9\u7ba1\u7406\u662f\u6b21\u4f18\u7684\u3002CMSS--\u5c31\u50cf\u6bcf\u4e2a\u8f6f\u4ef6\u4e00\u6837--\u8feb\u5207\u9700\u8981\u81ea\u52a8\u5316\u3002\u81ea\u52a8\u6267\u884c\u624b\u52a8\u4efb\u52a1\u53ef\u4ee5\u89e3\u653e\u7f16\u8f91\uff0c\u8ba9\u4ed6\u4eec\u4e13\u6ce8\u4e8e\u66f4\u6709\u521b\u610f\u3001\u66f4\u6709\u5f71\u54cd\u529b\u7684\u6d3b\u52a8\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u81ea\u52a8\u5316\u5e2e\u52a9\u7ec4\u7ec7\u5c06\u6784\u5efa\u65b0\u8f6f\u4ef6\u7684\u6df7\u4e71\u8fc7\u7a0b\u8f6c\u53d8\u4e3a\u66f4\u53ef\u9884\u6d4b\u3001\u66f4\u53ef\u8861\u91cf\u548c\u66f4\u53ef\u9760\u7684\u8fc7\u7a0b\u3002\n\u4ee5\u5411\u60a8\u7684\u7f51\u7ad9\u6dfb\u52a0\u65b0\u529f\u80fd\u4e3a\u4f8b\u3002\u5f53\u60a8\u7684\u4ea7\u54c1\u5904\u4e8e\u7e41\u91cd\u7684\u5f00\u53d1\u9636\u6bb5\u65f6\uff0c\u60a8\u5982\u4f55\u7ba1\u7406\u60a8\u7684\u5185\u5bb9\uff1f\u600e\u6837\u624d\u80fd\u5728\u4e0d\u6253\u788e\u4e1c\u897f\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u7f29\u653e\u5462\uff1f\u6211\u4eec\u4ece\u5934\u5f00\u59cb\uff0c\u5c06CMS\u7684\u6982\u5ff5\u5b9a\u4e49\u4e3a\u4ee3\u7801\u3002\u5373\u4f7f\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7API\u83b7\u5f97\uff0c\u7ed3\u6784\u66f4\u6539\u4e5f\u5fc5\u987b\u80fd\u591f\u4ee5\u81ea\u52a8\u548c\u5b89\u5168\u7684\u65b9\u5f0f\u6267\u884c\u3002\n\u90a3\u79fb\u6c11\u5462\uff1f\u6211\u4eec\u5728CLI\u8fc1\u79fb\u5de5\u5177\u4e0a\u8fdb\u884c\u4e86\u6295\u8d44\uff0c\u5e76\u901a\u8fc7\u73af\u5883\u6269\u5c55\u4e86\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u3002Conentful\u73b0\u5728\u5141\u8bb8\u60a8\u4ee5\u4e0e\u7f16\u5199\u4ee3\u7801\u76f8\u540c\u7684\u65b9\u5f0f\u7f16\u8f91\u3001\u66f4\u6539\u548c\u53d1\u5c55\u5185\u5bb9\u3002\u6269\u5c55\u3001\u66f4\u6539\u3001\u8fc1\u79fb\u548c\u6d4b\u8bd5\u3002\u5728\u60a8\u77e5\u9053\u4e00\u5207\u90fd\u6309\u9884\u671f\u5de5\u4f5c\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u5e26\u56de\u5230\u60a8\u7684\u4e3b\u73af\u5883\u4e2d\u3002\u60a8\u5728\u57fa\u7840\u67b6\u6784\u4e2d\u4f7f\u7528\u7684CI/CD\u5de5\u4f5c\u6d41\u8fd8\u53ef\u4ee5\u7ba1\u7406\u60a8\u7684\u5185\u5bb9-\u968f\u65f6\u53ef\u6269\u5c55\uff01Contful\u5c06\u7ee7\u7eed\u9075\u5faa\u5176\u7b2c\u4e09\u6761\u539f\u5219\uff1a\u5f00\u53d1\u8005\u4ea7\u54c1\u5fc5\u987b\u9488\u5bf9\u96c6\u6210\u548c\u81ea\u52a8\u5316\u8fdb\u884c\u4f18\u5316\u3002\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u6784\u5efa\uff0c\u800c\u4e0d\u662f\u6267\u884c\u5bb6\u52a1\u3002\n\u6211\u5f88\u9ad8\u5174\u770b\u5230Conentful\u73b0\u5728\u6bcf\u5929\u63d0\u4f9b5\u4ebf\u4e2a\u5185\u5bb9\u4ea4\u4ed8API\u8bf7\u6c42(\u52a0\u4e0a3000\u4e07\u4e2aGraphQL\u8bf7\u6c42\uff0c\u800c\u4e14\u8fd8\u5728\u4e0d\u65ad\u589e\u52a0)\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u7528\u6211\u4eec\u7684\u793e\u533a\u7248\u548c\u6211\u4eec\u5728\u6b64\u8fc7\u7a0b\u4e2d\u5f00\u53d1\u7684\u65b0\u529f\u80fd\u6765\u56de\u9988\u5f00\u53d1\u4eba\u5458\u3002\u6211\u4eec\u5df2\u7ecf\u8ba9\u5165\u95e8\u53d8\u5f97\u514d\u8d39\u800c\u7b80\u5355\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u4e0a\u524d\u4f53\u9a8c\u4e00\u4e0b\u4e86\uff01\n\u8ba2\u9605\u4ee5\u63a5\u6536\u6700\u91cd\u8981\u7684\u66f4\u65b0\u3002\u6211\u4eec\u6bcf\u6708\u53d1\u9001\u4e00\u6b21\u7535\u5b50\u901a\u8baf\uff0c\u5185\u5bb9\u5305\u62ec\u70ed\u95e8\u8bdd\u9898\u548c\u529f\u80fd\u66f4\u65b0\u3002", "note_en": "Developers have always been at the center of Contentful\u2019s mission. When I decided to found Contentful with Sascha, I wanted to work as a CTO for a company that served developers. I wanted to support developers like me, who worked in teams that impacted product and strategy along with technology. Contentful gave me the opportunity to do this and dive deep into the topics that excited me most.\n Now, seven years later, I want to share with you the history of how we developed Contentful, what we learned along the way, and the three principles that guide our product. We believe that developer products should be accessible in price, documentation and setup, built with the latest technologies, and easy to integrate and automate.\n These principles reflect our product vision and demonstrate how we will continue to support builders all across the globe as we continue to mature as a company. And they don\u2019t apply only to Contentful. We believe that they are integral to all successful developer products.\n I can still remember learning about Linux in the \u201890s. I couldn&#39;t just learn and build simultaneously from my desk. Dial-up connection limited internet access because of its hefty price tag, and raw manuals were all you could find online anyway. Books were also expensive. I remember going to the bookshop to read a few pages from the most updated books at lunchtime \u2014 and then try things at home at night. I\u2019d be back at the shop the next day to try and understand why it didn\u2019t work.\n  Luckily, this has changed over the last few decades. Now I can build prototypes of quick ideas in the span of a single lunch break. The general adoption of APIs and free access to developer tools and learning resources has sped everything up.\n  We believe that all developer products must be free and easy to set up. This is why we\u2019ve always had a free Contentful plan for developers, and why we improved our plan with the   new Community edition. We want to enable developers to build any side project for free \u2014 let it be a blog, a cookie shop or something completely different.\n  It\u2019s also why we\u2019re making sure you have everything you need to get started. Documentation and guides speed up the development process, whether you\u2019re dealing with HTTP endpoints and JSON in the form of APIs or figuring out how to model a content structure. Contentful offers hundreds of pages of developer   documentation and a   help center for web app users.\n  I\u2019ve noticed that some companies treat the signup and onboarding flows as a minor matter. Nothing could be further from the truth. The time it takes from signing up to issuing the first meaningful API call has an outsized impact on the growth trajectory of any developer-focused company. Getting your website up and running in five minutes with Contentful is not a marketing slogan. It\u2019s a pragmatic benchmark we measure ourselves against as we continue to evolve our product.\n  Documentation forms part of a successful developer product the same way that proper tooling does on the CLI. That&#39;s why we developed   the Contentful CLI. It enables users to navigate our product and helps developers get started. And as we add new features and capabilities, we continue to insist that they\u2019re scriptable and accessible via the CLI.\n     If you bring up the topic of modern technologies at an enterprise gathering \u2014 and I can bet you my Nintendo Switch \u2014 the next three hours will be consumed by discussions about how to define the word \u201cmodern.\u201d When I say  modern, I&#39;m thinking of new technologies that come with the potential for scale and mass-developer adoption.\n  When we built early versions of Contentful, we used Markdown for content editing, REST APIs for serving content and Angular.js for our web app. Those were  the technologies to use and the rise of the JAMstack soon thereafter showed that we took the right path. Fast forward seven years and the technological landscape looks different. React has gained massive popularity, GraphQL has changed the way to query data and component-driven design systems are now the de facto standard. What does that mean for our product?\n  We constantly reevaluate our building blocks and, when necessary, rebuild key components of our platform to take advantage of new technologies. In retrospect, adopting Kubernetes to run our infrastructure was an easy call. But building the GraphQL API was not. Sure, GraphQL allows developers to query the data they need in a single API call, speeds up the development process, and simplifies technical architecture. But we needed to decide if we wanted to commit our engineering resources toward adopting a technology that, at the time, no paying customer had requested.   GraphQL&#39;s technical capabilities and the palpable excitement displayed by the developer community convinced me to take the leap.\n  GraphQL was by no means an isolated story. We went through a similar process when faced with the decision to transition from Angular.js to React to keep up with the JavaScript ecosystem. Or when we talked about replacing good-ole Markdown with a JSON-based   Rich Text editor.\n  Now that GraphQL and React are becoming the industry standard for the next generation of digital projects, the bets seem obvious. But these types of decisions rarely offer easy answers when you have to make them. That\u2019s why we adopted  the principle of taking risks on the latest technologies to drive our decision-making.\n     I\u2019ve learned two important things about CMSes in the past decade of building Contentful. First, content is crucial for digital experiences. This means that in addition to connecting Contentful to the frontend layer, engineering teams expend tremendous amounts of energy bringing data in and out of our platform. Building extensibility into our product makes our users more productive and our platform more valuable to them.\n  We\u2019ve consistently invested into adding new ways to integrate third-party systems with Contentful. We started with basic webhooks to communicate content changes with other services. Then we   made our webhooks configurable. Because there was no standardized payload to connect services, this allowed developers to quickly integrate Contentful with other services. Then we opened integration to editors without technical training by launching our   App Framework. Now users can integrate SaaS products like Shopify, Typeform and Cloudinary right in the web app.\n  Best of all, developers can modify the web app to their needs thanks to our open-source ecosystem. This creates a seamless content-editing experience even though it&#39;s built with multiple services. Content becomes a core part of your infrastructure!\n  I also learned that relying on manual content management is suboptimal. CMSes \u2014 just like every piece of software \u2014 cry for automation. Automating manual tasks frees editors to focus on more creative and impactful activities. But even more importantly, automation helps organizations turn the messy process of building new software into something much more predictable, measurable and reliable.\n  Take the example of adding new features to your website. How do you manage your content when your product is under heavy development? How do you make it scale without breaking things? We went to the drawing board and defined the idea of   CMS as Code. Even though content is available via an API, structural changes must be able to be performed in an automated and safe way.\n  And what about migrations? We invested in   CLI migration tools and   extended our infrastructure with environments. Contentful now allows you to edit, change and evolve content the same way you code. Branch out, change, migrate and test. You can bring it back into your main environment after you know everything works as expected. The CI/CD workflows you use with your infrastructure can also manage your content \u2014 ready to scale! Contentful will continue to follow its  third principle: developer products must optimize for integration and automation. Developers want to build, not perform chores.\n  I&#39;m happy to see that Contentful now delivers 500 million content delivery API requests per day\u00a0 (plus 30 million GraphQL requests and counting). We\u2019ll keep giving back to developers with our Community edition, and new features we develop along the way. We\u2019ve made it   free and easy to\u00a0get started, so you can go forth and experiment!\n  Subscribe to receive the most important updates. We send eNewsletters once a month that cover trending topics and feature updates.", "posttime": "2020-07-30 02:29:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u5f00\u53d1\u4eba\u5458,building", "title": "\u6784\u5efa\u5f00\u53d1\u4eba\u5458\u4ea7\u54c1\u7684\u539f\u5219\uff1aCTO\u7684\u89c6\u89d2", "title_en": "Principles for building developer products: a CTO\u2019s perspective", "transed": 1, "url": "https://www.contentful.com/blog/2020/07/29/principles-for-building-developer-products-cto-perspective/", "via": "", "real_tags": ["\u5f00\u53d1", "\u5f00\u53d1\u4eba\u5458", "building"]}, {"category": "", "categoryclass": "", "imagename": "5061c182d73cc20a0654d4b0a2219450.jpg", "infoid": 1014988, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u9a6c\u900a\u7684\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u3001Facebook\u7684\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u3001\u8c37\u6b4c\u7684\u6851\u8fbe\u5c14\u00b7\u76ae\u67e5\u4f0a\u548c\u82f9\u679c\u7684\u8482\u59c6\u00b7\u5e93\u514b\u51fa\u73b0\u5728\u4f17\u8bae\u9662\u53f8\u6cd5\u59d4\u5458\u4f1a\u7684\u53cd\u5784\u65ad\u5c0f\u7ec4\u9762\u524d\u3002#...", "note_en": "Amazon's Jeff Bezos, Facebook's Mark Zuckerberg, Google's Sundar Pichai and Apple's Tim Cook appear before the House Judiciary Committee\u2019s antitrust panel. #...", "posttime": "2020-07-30 02:29:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u82f9\u679c,\u8c37\u6b4c,apple,\u4e9a\u9a6c\u900a", "title": "Facebook\u3001\u4e9a\u9a6c\u900a\u3001\u8c37\u6b4c\u548c\u82f9\u679c\u7684\u9996\u5e2d\u6267\u884c\u5b98\u5728\u53cd\u5784\u65ad\u542c\u8bc1\u4f1a\u4e0a\u9762\u4e34\u56fd\u4f1a", "title_en": "CEOs of Facebook, Amazon, Google and Apple Face Congress in Antitrust Hearing", "transed": 1, "url": "https://www.youtube.com/watch?v=T0gJYFX8WVc", "via": "", "real_tags": ["google", "\u82f9\u679c", "\u8c37\u6b4c", "apple", "\u4e9a\u9a6c\u900a"]}, {"category": "", "categoryclass": "", "imagename": "9fbb34d29907c5cb767cf3218ea777bf.jpg", "infoid": 1014987, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u4eec\u9996\u6b21\u5728\u5357\u6781\u6d32\u7684\u51b0\u67b6\u4e0b\u53d1\u73b0\u4e86\u6d3b\u8dc3\u7684\u7532\u70f7\u6c14\u4f53\u6cc4\u6f0f\u3002\u8fd9\u4e00\u53d1\u73b0\u5df2\u7ecf\u6572\u54cd\u4e86\u8b66\u949f\uff0c\u63d0\u9192\u4eba\u4eec\u6ce8\u610f\u53ef\u80fd\u968f\u4e4b\u800c\u6765\u7684\u6f5c\u5728\u53d8\u6696\uff0c\u6a2a\u8de8\u8fd9\u5757\u51b0\u96ea\u8986\u76d6\u7684\u767d\u8272\u5927\u9646\u3002\n\u7532\u70f7\u662f\u4e00\u79cd\u5f3a\u6709\u529b\u7684\u6e29\u5ba4\u6c14\u4f53\uff0c\u5728\u53ef\u4ee5\u6307\u6570\u7ea7\u589e\u52a0\u5730\u7403\u53d8\u6696\u7684\u6700\u4e30\u5bcc\u7684\u4eba\u4e3a\u6e29\u5ba4\u6c14\u4f53\u4e2d\u6392\u540d\u7b2c\u4e8c\u3002\n\u50cf\u5357\u6781\u6d32\u548c\u5317\u6781\u8fd9\u6837\u7684\u6781\u5730\u5730\u533a\u662f\u4e16\u754c\u4e0a\u53d8\u6696\u6700\u5feb\u7684\u5730\u533a--\u662f\u4e16\u754c\u5176\u4ed6\u5730\u533a\u7684\u6570\u500d\u3002\u6781\u5730\u5730\u533a\u51b0\u5ddd\u7684\u878d\u5316\u53ef\u80fd\u5bfc\u81f4\u4e16\u754c\u5404\u5730\u6d77\u5e73\u9762\u7684\u663e\u8457\u4e0a\u5347\u3002\n\u76ee\u524d\u7684\u7814\u7a76\u62a5\u544a\u79f0\uff0c\u5357\u6781\u6d32\u7f57\u65af\u6d77\u5b58\u5728\u7532\u70f7\u6c14\u4f53\uff0c\u8fd9\u662f\u7b2c\u4e00\u79cd\u4ecd\u6709\u6d3b\u8dc3\u6e17\u6f0f\u7684\u7532\u70f7\u6c14\u4f53\u3002\u79d1\u5b66\u5bb6\u4eec\u5bf9\u7f57\u65af\u6d77\u548c\u53d1\u73b0\u6e17\u6f0f\u7684\u533a\u57df\u8fdb\u884c\u4e8660\u591a\u5e74\u7684\u7814\u7a76\uff1b\u4f46\u6e17\u6f0f\u76f4\u52302011\u5e74\u624d\u5f00\u59cb\u6d3b\u8dc3\u3002\n\u636e\u4f30\u8ba1\uff0c\u5730\u7403\u5357\u6781\u7684\u767d\u8272\u5927\u9646\u8574\u85cf\u7740\u5730\u7403\u6d77\u6d0b\u7532\u70f7\u603b\u91cf\u7684\u56db\u5206\u4e4b\u4e00\u3002\u8fd9\u4e00\u53d1\u73b0\u4ee4\u4eba\u9707\u60ca\uff0c\u56e0\u4e3a\u6b64\u524d\u4e16\u754c\u4e0a\u8fd9\u4e00\u5730\u533a\u4ece\u672a\u62a5\u9053\u8fc7\u6d3b\u6027\u7532\u70f7\u6e17\u6f0f\u3002\n\u8fd9\u9879\u7814\u7a76\u7684\u9996\u5e2d\u7814\u7a76\u5458\u3001\u4fc4\u52d2\u5188\u5dde\u7acb\u5927\u5b66(Oregon State University)\u6d77\u6d0b\u751f\u6001\u5b66\u5bb6\u5b89\u5fb7\u9c81\u00b7\u745f\u4f2f(Andrew Thber)\u8868\u793a\uff0c\u7532\u70f7\u662f\u4f7f\u6211\u4eec\u7684\u5927\u6c14\u53d8\u6696\u7684\u7b2c\u4e8c\u5927\u6709\u6548\u6c14\u4f53\uff0c\u5357\u6781\u6709\u5927\u91cf\u7684\u6c34\u5e93\uff0c\u968f\u7740\u6c14\u5019\u53d8\u5316\u5bfc\u81f4\u51b0\u76d6\u9000\u7f29\uff0c\u8fd9\u4e9b\u6c34\u5e93\u5f88\u53ef\u80fd\u4f1a\u6253\u5f00\u3002\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u8fd9\u662f\u4e00\u9879\u91cd\u5927\u53d1\u73b0\uff0c\u6709\u52a9\u4e8e\u586b\u8865\u6211\u4eec\u5bf9\u7532\u70f7\u5faa\u73af\u7406\u89e3\u4e0a\u7684\u4e00\u5927\u7a7a\u767d\u3002\n\u5728\u5357\u6781\u6d32\uff0c\u7532\u70f7\u901a\u5e38\u662f\u5728\u6d77\u5e95\u8150\u70c2\u7684\u85fb\u7c7b\u6c89\u79ef\u7269\u4e2d\u53d1\u73b0\u7684\uff0c\u53ef\u4ee5\u8ffd\u6eaf\u5230\u51e0\u5343\u5e74\u524d\u3002\u6b64\u5916\uff0c\u4e00\u5b9a\u6570\u91cf\u7684\u7532\u70f7\u4e5f\u6765\u81ea\u6d77\u5e95\u4ee5\u4e0b\u7684\u6c38\u51bb\u571f\u3002\n\u5728\u5168\u7403\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u6d77\u6d0b\u4e2d\u90fd\u53ef\u4ee5\u627e\u5230\u5de8\u5927\u7684\u7532\u70f7\u6c14\u85cf\u3002\u6d77\u6c34\u4e2d\u7684\u5927\u591a\u6570\u7532\u70f7\u90fd\u53d7\u5230\u4fdd\u62a4\uff0c\u4e0d\u4f1a\u6cc4\u6f0f\u5230\u5927\u6c14\u4e2d\uff0c\u56e0\u4e3a\u6d77\u5e8a\u4e0a\u7684\u5fae\u751f\u7269\u4f1a\u6d88\u8017\u5b83\uff0c\u4ece\u800c\u9650\u5236\u4e86\u9003\u9038\u3002\u8fd9\u4e9b\u5fae\u751f\u7269\u4e0d\u65ad\u7e41\u6b96\uff0c\u4ee5\u904f\u5236\u4e16\u754c\u5404\u5730\u6d77\u6d0b\u7684\u6cc4\u6f0f\u3002\u4f46\u662f\uff0c\u5f53\u8fd9\u4e9b\u5fae\u751f\u7269\u4e0d\u80fd\u5b8c\u5168\u6d88\u8017\u6c14\u4f53\u65f6\uff0c\u5b83\u5c31\u4f1a\u9003\u9038\u5230\u5927\u6c14\u4e2d\uff0c\u8fd9\u5c31\u662f\u7532\u70f7\u6e17\u6f0f\u53d1\u751f\u7684\u539f\u56e0\u3002\u5357\u6781\u6d32\u9996\u4f8b\u5df2\u77e5\u7684\u6d3b\u6027\u7532\u70f7\u6cc4\u6f0f\u5c31\u662f\u8fd9\u79cd\u60c5\u51b5\u3002\n\u6839\u636e\u8fd9\u9879\u7814\u7a76\uff0c\u6d3b\u8dc3\u7684\u7532\u70f7\u6cc4\u6f0f\u662f\u5728\u5357\u6781\u6d32\u7f57\u65af\u5c9b\u706b\u5c71\u4e24\u4fa7\u7684\u7070\u9525\u9057\u5740\u53d1\u73b0\u7684\u3002\u8fd9\u662f\u4e00\u4e2a10\u7c73\u6df1\u7684\u533a\u57df\uff0c\u6709\u4e00\u575770\u7c73\u957f\u7684\u5fae\u751f\u7269\u57ab\u5b50\u3002\u8fd9\u9879\u7814\u7a76\u7684\u4f5c\u8005\u8ba4\u4e3a\uff0c\u5fae\u751f\u7269\u57ab\u7684\u5b58\u5728\u901a\u5e38\u662f\u7532\u70f7\u6e17\u6f0f\u7684\u4e3b\u8981\u8ff9\u8c61\u3002\n\u6b64\u5916\uff0c\u767d\u8272\u5927\u9646\u4e2d\u53d1\u73b0\u7684\u5fae\u751f\u7269\u4e0e\u5176\u4ed6\u6d77\u6d0b\u6709\u5f88\u5927\u4e0d\u540c\uff0c\u751f\u957f\u901f\u5ea6\u8f83\u6162\uff0c\u5bfc\u81f4\u6cc4\u6f0f\u3002\u8fd9\u9879\u7814\u7a76\u6307\u51fa\uff0c\u5728\u5357\u6781\u6d32\uff0c\u5403\u7532\u70f7\u7684\u5fae\u751f\u7269\u81f3\u5c11\u9700\u8981\u4e94\u5e74\u65f6\u95f4\u624d\u80fd\u5bf9\u6cc4\u6f0f\u505a\u51fa\u53cd\u5e94\uff0c\u5373\u4f7f\u5230\u90a3\u65f6\uff0c\u5b83\u4eec\u4e5f\u4e0d\u4f1a\u5b8c\u5168\u6d88\u8017\u6c14\u4f53\u3002\u7814\u7a76\u4eba\u5458\u5728\u5357\u6781\u6d32\u7684\u540c\u4e00\u533a\u57df\u53d1\u73b0\u4e86\u4e24\u4e2a\u6d3b\u8dc3\u7684\u6e17\u6f0f\u3002\n\u5982\u679c\u8fd9\u6837\u7684\u6cc4\u6f0f\u7ee7\u7eed\u4e0b\u53bb\uff0c\u7532\u70f7\u7684\u5b58\u5728\u53ef\u80fd\u4f1a\u5728\u5357\u6781\u6d32-\u4e43\u81f3\u6574\u4e2a\u5730\u7403-\u5438\u6536\u5927\u91cf\u7684\u70ed\u91cf\uff0c\u4ece\u800c\u589e\u52a0\u51b0\u7684\u878d\u5316\u3002\u8fd9\u9879\u7814\u7a76\u662f\u53ca\u65f6\u7684\uff0c\u5c06\u6709\u52a9\u4e8e\u586b\u8865\u56f4\u7ed5\u975e\u6d32\u5927\u9646\u7532\u70f7\u5faa\u73af\u7684\u77e5\u8bc6\u7a7a\u767d-\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u63a2\u7d22\u8f83\u5c11\u7684\u7814\u7a76\u9886\u57df\u3002\n\u6b64\u5916\uff0c\u572820\u5e74\u7684\u65f6\u95f4\u6846\u67b6\u5185\uff0c\u4e0e\u7c7b\u4f3c\u6570\u91cf\u7684\u4e8c\u6c27\u5316\u78b3\u76f8\u6bd4\uff0c\u7532\u70f7\u6709\u53ef\u80fd\u52a0\u901f\u5168\u7403\u53d8\u669650\u500d\u4ee5\u4e0a\u3002\u745f\u4f2f\u8bf4\uff1a\u201c\u6709\u4e00\u4e2a\u6d3b\u8dc3\u7684\u6e17\u6f0f\u53ef\u4ee5\u8ba9\u7814\u7a76\u4eba\u5458\u5bf9\u7532\u70f7\u5faa\u73af\u6709\u4e00\u4e2a\u65b0\u7684\u7406\u89e3\uff0c\u4ee5\u53ca\u4e0e\u5730\u7403\u4e0a\u5176\u4ed6\u5730\u65b9\u76f8\u6bd4\uff0c\u5357\u6781\u6d32\u7684\u7532\u70f7\u5faa\u73af\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\u201d\n\u6b64\u5916\uff0c\u8bb8\u591a\u6c14\u5019\u7814\u7a76\u4e5f\u6ca1\u6709\u8003\u8651\u7532\u70f7\u6cc4\u6f0f\uff0c\u8fd9\u4e9b\u7814\u7a76\u68c0\u67e5\u4e86\u975e\u6d32\u5927\u9646\u7684\u5347\u6e29\u901f\u5ea6\uff0c\u5e76\u9884\u6d4b\u4e86\u672a\u6765\u7684\u8d8b\u52bf\u3002\u6839\u636e\u7814\u7a76\uff0c\u7532\u70f7\u5728\u5927\u6c14\u4e2d\u7684\u505c\u7559\u65f6\u95f4-\u4e00\u4e2a\u5206\u5b50\u4ece\u5927\u6c14\u4e2d\u5b8c\u5168\u6d88\u9664\u6240\u9700\u7684\u5e73\u5747\u65f6\u95f4-\u5927\u7ea6\u4e3a9\u5e74\u3002\n\u56e0\u6b64\uff0c\u6076\u6027\u5faa\u73af-\u53d8\u6696\u52a0\u901f\u51b0\u5ddd\u878d\u5316\uff0c\u878d\u5316\u5bfc\u81f4\u7532\u70f7\u6cc4\u6f0f\uff0c\u7532\u70f7\u52a0\u5267\u53d8\u6696-\u53ef\u80fd\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5bf9\u5168\u7403\u6c14\u5019\u6784\u6210\u91cd\u5927\u98ce\u9669\u3002\n\u8fd9\u9879\u7814\u7a76\u53d1\u8868\u5728\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u7684\u201c\u82f1\u56fd\u7687\u5bb6\u5b66\u4f1a\u5b66\u62a5B\u201d\u4e0a\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u9605\u3002\n\u6709\u5173\u5929\u6c14\u3001\u79d1\u5b66\u548c\u65b0\u51a0\u80ba\u708e\u7684\u79fb\u52a8\u66f4\u65b0\uff0c\u8bf7\u4e0b\u8f7d\u5929\u6c14\u9891\u9053\u5e94\u7528\u7a0b\u5e8f(\u5728\u5b89\u5353\u548ciOS\u5546\u5e97)\u3002\u5b83\u662f\u514d\u8d39\u7684\uff01", "note_en": "For the first time, scientists have discovered an active leak of methane gas beneath the ice shelves of Antarctica. The discovery has set the alarm bells ringing on the potential warming that could ensue across the icy white continent.\n Methane is a potent greenhouse gas and ranks second among the most abundant anthropogenic greenhouse gases that can exponentially increase the Earth\u2019s warming.\n  Polar regions like Antarctica and Arctic are the rapidly warming regions of the world\u2014 several times more than the rest of the world. The melting of ice glaciers in the polar regions can result in significant sea-level rise across the world.\n The current study reports that methane gas is present in the Ross Sea of Antarctica and is the first of such kind which still has an active seep. The Ross Sea and the area in which the seep was discovered has been studied by scientists for more than 60 years; but the seep was not active until 2011.\n The white continent at the South Pole of the Earth is estimated to hold a quarter of Earth&#39;s total marine methane. The discovery has come as a shock since active methane seep was never reported in this part of the world before.\n  &#34;Methane is the second-most effective gas at warming our atmosphere and the Antarctic has vast reservoirs that are likely to open up as ice sheets retreat due to climate change,&#34; said Andrew Thurber, lead researcher of the study and marine ecologist at Oregon State University. He added, \u201cThis is a significant discovery that can help fill a large hole in our understanding of the methane cycle.&#34;\n  In Antarctica, the methane is found usually in the decaying algae deposits under the ocean floor, dating back to several thousands of years. In addition, some amount of methane also comes from permafrost below the seafloor.\n Vast reservoirs of methane gas can be found in nearly each and every ocean of the globe. Most methane in the ocean water is protected from leaking into the atmosphere, as the microbes present in the seabed consume it, thus limiting the escape. These microbes keep proliferating to curb the leak throughout the oceans found in the world. But, when these microbes are not able to completely consume the gas, it escapes into the atmosphere, and that\u2019s how the methane seep happens. This is the case with the first-known active methane leak in Antarctica.\n As per the study, the active methane leak is found in Cinder Cones site on the flanks of the volcanic Ross Island of Antarctica. It is a 10-metre deep area that hosts a 70-metre long patch of microbial mats. The authors of the study suggest the presence of microbial mat is usually a prime sign of methane seep.\n Moreover the microbes found in the white continent are quite different from the other oceans and have slower growth rate, resulting in a leak. The study noted, in Antarctica, the methane-eating microbes take at least five years to respond to the leak and even then they do not consume the gas completely. Researchers have discovered two active seeps in the same region of Antarctica.\n  If such leaks continue, the presence of methane can absorb a large amount of heat over Antarctica\u2014 and the globe in general\u2014 thus, increasing the melting of ice. The study is timely and will benefit in filling the knowledge gaps around the methane cycle of the continent\u2014 which remains a less-explored area of research.\n  Moreover, methane holds the potential to accelerate global warming by more than 50 times compared to similar amounts of carbon dioxide over a 20-year timeframe. \u201cHaving an active seep to study gives researchers a new understanding of the methane cycle and how that process might differ in Antarctica compared to other places on the planet,\u201d says Thurber.\n Moreover, many climatic studies, which examine the rate at which the continent is heating and predict its future trends, have also not taken into account the methane seep leak. As per research, the atmospheric residence time for methane\u2014 average time taken by a molecule to be completely removed from the atmosphere\u2014 is approximately 9 years.\n Therefore, the vicious cycle\u2014 warming accelerating ice-melting, melting leading to methane leaks and methane enhancing warming\u2014 could pose a major risk to global climate in near future.\n The study was published in the journal  Proceedings of the Royal Society B earlier this week and can be accessed  here.\n  For weather, science and COVID-19 updates on the go, download   The Weather Channel App  (on Android and iOS store). It&#39;s free!", "posttime": "2020-07-30 02:29:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u5b66\u5bb6,\u5357\u6781\u6d32,warming,\u7532\u70f7", "title": "\u79d1\u5b66\u5bb6\u5728\u5357\u6781\u6d32\u53d1\u73b0\u9996\u4e2a\u7532\u70f7\u6cc4\u6f0f\uff1b\u8b66\u544a\u5168\u7403\u53d8\u6696\u5a01\u80c1", "title_en": "Scientists Discover First Methane Leak in Antarctica; Warn of Warming Threat", "transed": 1, "url": "https://weather.com/en-IN/india/science/news/2020-07-28-scientists-discover-first-methane-leak-in-antarctica-global-warming", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u5357\u6781\u6d32", "warming", "\u7532\u70f7"]}, {"category": "", "categoryclass": "", "imagename": "e15bd1652048823880d2c47f17417529.png", "infoid": 1014985, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u597d\uff0c\u6211\u662f\u5de5\u4eba\u961f\u7684\u4e00\u540d\u5de5\u7a0b\u5e08\uff0c\u4eca\u5929\u6211\u60f3\u548c\u4f60\u4eec\u8c08\u8c08\u5b89\u5168\u95ee\u9898\u3002\nCloudFlare\u662f\u4e00\u5bb6\u5b89\u5168\u516c\u53f8\uff0c\u5728\u6211\u770b\u6765\uff0cWorkers\u7684\u6838\u5fc3\u662f\u4e00\u4e2a\u5b89\u5168\u9879\u76ee\u3002\u8fd0\u884c\u7531\u7b2c\u4e09\u65b9\u7f16\u5199\u7684\u4ee3\u7801\u603b\u662f\u4e00\u4e2a\u53ef\u6015\u7684\u95ee\u9898\uff0c\u800c\u5de5\u4eba\u56e2\u961f\u4e3b\u8981\u5173\u5fc3\u7684\u662f\u786e\u4fdd\u5b89\u5168\u3002\n\u5bf9\u4e8e\u8fd9\u6837\u7684\u9879\u76ee\uff0c\u4ec5\u4ec5\u901a\u8fc7\u5b89\u5168\u5ba1\u67e5\u5e76\u8bf4\u201c\u597d\u4e86\uff0c\u6211\u4eec\u5b89\u5168\u4e86\uff0c\u7136\u540e\u7ee7\u7eed\u524d\u8fdb\u201d\u662f\u4e0d\u591f\u7684\u3002\u5728\u8bbe\u8ba1\u548c\u5b9e\u73b0\u7684\u6bcf\u4e2a\u9636\u6bb5\u8003\u8651\u5b89\u5168\u6027\u90fd\u662f\u4e0d\u591f\u7684\u3002\u5bf9\u4e8e\u5de5\u4eba\u6765\u8bf4\uff0c\u5b89\u5168\u672c\u8eab\u662f\u4e00\u9879\u6301\u7eed\u7684\u9879\u76ee\uff0c\u800c\u8fd9\u9879\u5de5\u4f5c\u6c38\u8fdc\u4e0d\u4f1a\u5b8c\u6210\u3002\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5\u6765\u964d\u4f4e\u672a\u6765\u6f0f\u6d1e\u7684\u98ce\u9669\u548c\u5f71\u54cd\u3002\n\u4eca\u5929\uff0c\u6211\u60f3\u5411\u60a8\u6982\u8ff0\u4e00\u4e0b\u6211\u4eec\u7684\u5b89\u5168\u4f53\u7cfb\u7ed3\u6784\uff0c\u7136\u540e\u89e3\u51b3\u6211\u4eec\u7ecf\u5e38\u88ab\u95ee\u5230\u7684\u4e24\u4e2a\u5177\u4f53\u95ee\u9898\uff1aV8\u9519\u8bef\u548cSpectre\u3002\n\u8bbe\u8ba1\u4ee3\u7801\u6c99\u7bb1\u6709\u4e24\u4e2a\u57fa\u672c\u90e8\u5206\uff1a\u5b89\u5168\u9694\u79bb\u548cAPI\u8bbe\u8ba1\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6267\u884c\u73af\u5883\uff0c\u5728\u8fd9\u4e2a\u73af\u5883\u4e2d\uff0c\u4ee3\u7801\u4e0d\u80fd\u8bbf\u95ee\u4efb\u4f55\u5b83\u4e0d\u5e94\u8be5\u8bbf\u95ee\u7684\u4e1c\u897f\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u7684\u4e3b\u8981\u5de5\u5177\u662fV8\uff0c\u8fd9\u662fGoogle\u5f00\u53d1\u7684\u7528\u4e8eChrome\u7684JavaScript\u5f15\u64ce\u3002V8\u6267\u884c\u9694\u79bb\u5185\u4ee3\u7801\uff0c\u8fd9\u4f1a\u963b\u6b62\u4ee3\u7801\u8bbf\u95ee\u9694\u79bb\u5916\u7684\u5185\u5b58--\u5373\u4f7f\u5728\u540c\u4e00\u8fdb\u7a0b\u5185\u4e5f\u662f\u5982\u6b64\u3002\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u591a\u4e2a\u9694\u79bb\u3002\u8fd9\u5bf9\u4e8e\u5de5\u4eba\u8fd9\u6837\u7684\u8fb9\u7f18\u8ba1\u7b97\u5e73\u53f0\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u6258\u7ba1\u6570\u5343\u4e2a\u8bbf\u5ba2\u5e94\u7528\uff0c\u5e76\u4ee5\u6700\u5c0f\u7684\u5f00\u9500\u6bcf\u79d2\u5728\u8fd9\u4e9b\u8bbf\u5ba2\u4e4b\u95f4\u5feb\u901f\u5207\u6362\u6570\u5343\u6b21\u3002\u5982\u679c\u6211\u4eec\u5fc5\u987b\u4e3a\u6bcf\u4e2a\u5ba2\u6237\u8fd0\u884c\u5355\u72ec\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u652f\u6301\u7684\u79df\u6237\u6570\u91cf\u5c06\u5927\u5e45\u51cf\u5c11\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u5c06EDGE\u8ba1\u7b97\u9650\u5236\u5728\u5c11\u6570\u53ef\u4ee5\u652f\u4ed8\u9ad8\u989d\u8d39\u7528\u7684\u5927\u578b\u4f01\u4e1a\u5ba2\u6237\u3002\u6709\u4e86\u9694\u79bb\u6280\u672f\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fb9\u7f18\u8ba1\u7b97\u3002\n\u4e0d\u8fc7\uff0c\u6709\u65f6\u6211\u4eec\u786e\u5b9e\u4f1a\u51b3\u5b9a\u5b89\u6392\u4e00\u4e2a\u5458\u5de5\u5728\u5176\u81ea\u5df1\u7684\u79c1\u4eba\u6d41\u7a0b\u4e2d\u5de5\u4f5c\u3002\u5982\u679c\u5b83\u4f7f\u7528\u4e86\u6211\u4eec\u89c9\u5f97\u9700\u8981\u989d\u5916\u9694\u79bb\u7684\u67d0\u4e9b\u529f\u80fd\uff0c\u6211\u4eec\u5c31\u4f1a\u8fd9\u4e48\u505a\u3002\u4f8b\u5982\uff0c\u5f53\u5f00\u53d1\u4eba\u5458\u4f7f\u7528DevTools\u8c03\u8bd5\u5668\u68c0\u67e5\u5176Worker\u65f6\uff0c\u6211\u4eec\u5c06\u5728\u5355\u72ec\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u8be5Worker\u3002\u8fd9\u662f\u56e0\u4e3a\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\uff0c\u68c0\u67e5\u5668\u534f\u8bae\u53ea\u80fd\u7531\u6d4f\u89c8\u5668\u7684\u53ef\u4fe1\u64cd\u4f5c\u5458\u4f7f\u7528\uff0c\u56e0\u6b64\u6ca1\u6709\u50cfV8\u7684\u5176\u4ed6\u7248\u672c\u90a3\u6837\u63a5\u53d7\u8fc7\u591a\u7684\u5b89\u5168\u68c0\u67e5\u3002\u4e3a\u4e86\u89c4\u907f\u68c0\u67e5\u5668\u534f\u8bae\u4e2d\u589e\u52a0\u7684bug\u98ce\u9669\uff0c\u6211\u4eec\u5c06\u88ab\u68c0\u67e5\u7684\u5de5\u4f5c\u4eba\u5458\u79fb\u5230\u5e26\u6709\u8fdb\u7a0b\u7ea7\u6c99\u7bb1\u7684\u5355\u72ec\u8fdb\u7a0b\u4e2d\u3002\u6211\u4eec\u8fd8\u4f7f\u7528\u8fdb\u7a0b\u9694\u79bb\u4f5c\u4e3a\u5bf9Spectre\u7684\u989d\u5916\u9632\u5fa1\uff0c\u6211\u5c06\u5728\u672c\u6587\u540e\u9762\u63cf\u8ff0\u8fd9\u4e00\u70b9\u3002\n\u6b64\u5916\uff0c\u5373\u4f7f\u5bf9\u4e8e\u4e0e\u5176\u4ed6\u9694\u79bb\u5728\u5171\u4eab\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u7684\u9694\u79bb\uff0c\u6211\u4eec\u4e5f\u4f1a\u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u6574\u4e2a\u8fd0\u884c\u65f6\u7684\u591a\u4e2a\u5b9e\u4f8b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u201c\u8b66\u6212\u201d(cordons&#34\uff1b)\u3002\u901a\u8fc7\u4e3a\u6bcf\u4e2a\u5458\u5de5\u5206\u914d\u4e00\u4e2a\u4fe1\u4efb\u7ea7\u522b\uff0c\u5e76\u5c06\u4f4e\u4fe1\u4efb\u5458\u5de5\u4e0e\u6211\u4eec\u9ad8\u5ea6\u4fe1\u4efb\u7684\u5458\u5de5\u5206\u5f00\uff0c\u4ece\u800c\u5728\u8b66\u6212\u7ebf\u4e4b\u95f4\u5206\u914d\u5458\u5de5\u3002\u64cd\u4f5c\u4e2d\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a\u6ce8\u518c\u6211\u4eec\u7684\u514d\u8d39\u8ba1\u5212\u7684\u5ba2\u6237\u5c06\u4e0d\u4f1a\u88ab\u5b89\u6392\u5728\u4e0e\u4f01\u4e1a\u5ba2\u6237\u76f8\u540c\u7684\u6d41\u7a0b\u4e2d\u3002\u8fd9\u5728V8\u4e2d\u53d1\u73b0\u96f6\u65e5\u5b89\u5168\u6f0f\u6d1e\u7684\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6df1\u5ea6\u9632\u5fa1\u3002\u4f46\u6211\u5c06\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u540e\u9762\u8ba8\u8bba\u66f4\u591a\u5173\u4e8eV8\u7684\u9519\u8bef\uff0c\u4ee5\u53ca\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u5b83\u4eec\u3002\n\u5728\u5168\u8fc7\u7a0b\u5c42\u9762\uff0c\u6211\u4eec\u5728\u7eb5\u6df1\u9632\u5fa1\u4e0a\u53c8\u52a0\u4e86\u4e00\u5c42\u6c99\u76d2\u3002\u7b2c\u4e8c\u5c42\u6c99\u7bb1\u4f7f\u7528Linux\u547d\u540d\u7a7a\u95f4\u548cseccomp\u6765\u7981\u6b62\u5bf9\u6587\u4ef6\u7cfb\u7edf\u548c\u7f51\u7edc\u7684\u6240\u6709\u8bbf\u95ee\u3002\u540d\u79f0\u7a7a\u95f4\u548cseccomp\u901a\u5e38\u7528\u4e8e\u5b9e\u73b0\u5bb9\u5668\u3002\u7136\u800c\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e9b\u6280\u672f\u7684\u4f7f\u7528\u6bd4\u5bb9\u5668\u5f15\u64ce\u4e2d\u901a\u5e38\u53ef\u80fd\u7684\u8981\u4e25\u683c\u5f97\u591a\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u8fdb\u7a0b\u542f\u52a8\u4e4b\u540e(\u4f46\u5728\u52a0\u8f7d\u4efb\u4f55\u9694\u79bb\u4e4b\u524d)\u914d\u7f6e\u540d\u79f0\u7a7a\u95f4\u548cseccomp\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5(\u5e76\u4e14\u786e\u5b9e)\u4f7f\u7528\u5b8c\u5168\u7a7a\u7684\u6587\u4ef6\u7cfb\u7edf(\u6302\u8f7d\u540d\u79f0\u7a7a\u95f4)\uff0c\u5e76\u4f7f\u7528seccomp\u5b8c\u5168\u963b\u6b62\u6240\u6709\u4e0e\u6587\u4ef6\u7cfb\u7edf\u76f8\u5173\u7684\u7cfb\u7edf\u8c03\u7528\u3002\u5bb9\u5668\u5f15\u64ce\u901a\u5e38\u4e0d\u80fd\u7981\u6b62\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u4f1a\u4f7f\u4f7f\u7528exec()\u4ece\u78c1\u76d8\u542f\u52a8\u6765\u5bbe\u7a0b\u5e8f\u53d8\u5f97\u4e0d\u53ef\u80fd\uff1b\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6765\u5bbe\u7a0b\u5e8f\u4e0d\u662f\u672c\u673a\u4e8c\u8fdb\u5236\u7a0b\u5e8f\uff0c\u5e76\u4e14\u5728\u6211\u4eec\u963b\u6b62\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u4e4b\u524d\uff0cWorker\u8fd0\u884c\u65f6\u672c\u8eab\u5df2\u7ecf\u5b8c\u6210\u52a0\u8f7d\u3002\n\u7b2c2\u5c42\u6c99\u7bb1\u4e5f\u5b8c\u5168\u7981\u6b62\u7f51\u7edc\u8bbf\u95ee\u3002\u76f8\u53cd\uff0c\u8be5\u8fdb\u7a0b\u4ec5\u9650\u4e8e\u901a\u8fc7\u672c\u5730Unix\u57df\u5957\u63a5\u5b57\u8fdb\u884c\u901a\u4fe1\uff0c\u4ee5\u4fbf\u4e0e\u540c\u4e00\u7cfb\u7edf\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\u901a\u4fe1\u3002\u4efb\u4f55\u4e0e\u5916\u90e8\u4e16\u754c\u7684\u901a\u4fe1\u90fd\u5fc5\u987b\u7531\u6c99\u7bb1\u4e4b\u5916\u7684\u67d0\u4e2a\u5176\u4ed6\u672c\u5730\u8fdb\u7a0b\u8fdb\u884c\u8c03\u89e3\u3002\n\u5176\u4e2d\u4e00\u4e2a\u7279\u522b\u7684\u8fdb\u7a0b\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u4e3b\u7ba1\u8fdb\u7a0b\uff0c\u8d1f\u8d23\u4ece\u78c1\u76d8\u6216\u5176\u4ed6\u5185\u90e8\u670d\u52a1\u83b7\u53d6\u5de5\u4f5c\u7a0b\u5e8f\u4ee3\u7801\u548c\u914d\u7f6e\u3002\u4e3b\u7ba1\u786e\u4fdd\u6c99\u7bb1\u8fdb\u7a0b\u4e0d\u80fd\u8bfb\u53d6\u4efb\u4f55\u914d\u7f6e\uff0c\u4f46\u4e0e\u5176\u5e94\u8be5\u8fd0\u884c\u7684\u5de5\u4f5c\u8fdb\u7a0b\u76f8\u5173\u7684\u914d\u7f6e\u9664\u5916\u3002\n\u4f8b\u5982\uff0c\u5f53\u6c99\u7bb1\u8fdb\u7a0b\u6536\u5230\u5bf9\u5b83\u4ee5\u524d\u4ece\u672a\u89c1\u8fc7\u7684\u5de5\u4f5c\u8fdb\u7a0b\u7684\u8bf7\u6c42\u65f6\uff0c\u8be5\u8bf7\u6c42\u5305\u62ec\u8be5\u5de5\u4f5c\u8fdb\u7a0b\u4ee3\u7801\u7684\u52a0\u5bc6\u5bc6\u94a5(\u5305\u62ec\u9644\u52a0\u7684\u673a\u5bc6)\u3002\u7136\u540e\uff0c\u6c99\u7bb1\u53ef\u4ee5\u5c06\u8be5\u5bc6\u94a5\u4f20\u9012\u7ed9\u4e3b\u7ba1\uff0c\u4ee5\u4fbf\u8bf7\u6c42\u4ee3\u7801\u3002\u6c99\u7bb1\u4e0d\u80fd\u8bf7\u6c42\u5b83\u6ca1\u6709\u6536\u5230\u9002\u5f53\u5bc6\u94a5\u7684\u4efb\u4f55\u5de5\u4f5c\u5668\u3002\u5b83\u4e0d\u80fd\u679a\u4e3e\u5df2\u77e5\u7684\u5de5\u4f5c\u8005\u3002\u5b83\u4e5f\u4e0d\u80fd\u8bf7\u6c42\u5b83\u4e0d\u9700\u8981\u7684\u914d\u7f6e\uff1b\u4f8b\u5982\uff0c\u5b83\u4e0d\u80fd\u5411\u5de5\u4f5c\u8005\u8bf7\u6c42\u7528\u4e8eHTTPS\u901a\u4fe1\u7684TLS\u5bc6\u94a5\u3002\n\u9664\u4e86\u8bfb\u53d6\u914d\u7f6e\u4e4b\u5916\uff0c\u6c99\u7bb1\u4e0e\u7cfb\u7edf\u4e0a\u7684\u5176\u4ed6\u8fdb\u7a0b\u5bf9\u8bdd\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\u5b9e\u73b0\u5411Worker\u516c\u5f00\u7684API\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86API\u8bbe\u8ba1\u3002\n\u6709\u4e00\u79cd\u8bf4\u6cd5\uff1a\u5982\u679c\u4e00\u68f5\u6811\u5012\u5728\u68ee\u6797\u91cc\uff0c\u4f46\u6ca1\u6709\u4eba\u542c\u5230\u5b83\u7684\u58f0\u97f3\uff0c\u5b83\u4f1a\u53d1\u51fa\u58f0\u97f3\u5417\uff1f&#34\uff1b\u6211\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u8bf4\u6cd5\uff1a\u5982\u679c\u4e00\u4e2a\u5de5\u4eba\u5728\u5b8c\u5168\u4e0e\u4e16\u9694\u7edd\u7684\u73af\u5883\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5728\u8fd9\u4e2a\u73af\u5883\u4e2d\uff0c\u5b83\u5b8c\u5168\u88ab\u963b\u6b62\u4e0e\u5916\u754c\u4ea4\u6d41\uff0c\u5b83\u771f\u7684\u4f1a\u8dd1\u5417\uff1f&#34\uff1b\n\u5b9e\u9645\u4e0a\uff0c\u5b8c\u5168\u7684\u4ee3\u7801\u9694\u79bb\u662f\u65e0\u7528\u7684\u3002\u4e3a\u4e86\u8ba9\u5de5\u4eba\u505a\u4efb\u4f55\u6709\u7528\u7684\u4e8b\u60c5\uff0c\u4ed6\u4eec\u5fc5\u987b\u88ab\u5141\u8bb8\u4e0e\u7528\u6237\u4ea4\u6d41\u3002\u81f3\u5c11\uff0c\u5de5\u4f5c\u4eba\u5458\u9700\u8981\u80fd\u591f\u63a5\u6536\u5e76\u54cd\u5e94\u8bf7\u6c42\u3002\u5982\u679c\u5b83\u80fd\u5b89\u5168\u5730\u5411\u4e16\u754c\u53d1\u9001\u8bf7\u6c42\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981API\u3002\n\u5728\u6c99\u7bb1\u73af\u5883\u4e2d\uff0cAPI\u8bbe\u8ba1\u627f\u62c5\u4e86\u65b0\u7684\u8d23\u4efb\u3002\u6211\u4eec\u7684API\u51c6\u786e\u5b9a\u4e49\u4e86\u5458\u5de5\u53ef\u4ee5\u548c\u4e0d\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u6211\u4eec\u5fc5\u987b\u975e\u5e38\u5c0f\u5fc3\u5730\u8bbe\u8ba1\u6bcf\u4e2aAPI\uff0c\u4f7f\u5176\u53ea\u80fd\u8868\u8fbe\u6211\u4eec\u60f3\u8981\u5141\u8bb8\u7684\u64cd\u4f5c\uff0c\u800c\u4e0d\u80fd\u8d85\u8fc7\u8fd9\u4e9b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5e0c\u671b\u5141\u8bb8Worker\u53d1\u51fa\u548c\u63a5\u6536HTTP\u8bf7\u6c42\uff0c\u800c\u4e0d\u5e0c\u671b\u4ed6\u4eec\u80fd\u591f\u8bbf\u95ee\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u6216\u5185\u90e8\u7f51\u7edc\u670d\u52a1\u3002\n\u8ba9\u6211\u4eec\u5148\u6df1\u5165\u7814\u7a76\u4e00\u4e0b\u8f83\u7b80\u5355\u7684\u4f8b\u5b50\u3002\u76ee\u524d\uff0cWorker\u4e0d\u5141\u8bb8\u5bf9\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u4efb\u4f55\u8bbf\u95ee\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u516c\u5f00\u6587\u4ef6\u7cfb\u7edfAPI\u3002\u6ca1\u6709API\u8868\u793a\u6ca1\u6709\u8bbf\u95ee\u6743\u9650\u3002\n\u4f46\u662f\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5728\u5c06\u6765\u652f\u6301\u672c\u5730\u6587\u4ef6\u7cfb\u7edf\u8bbf\u95ee\u3002\u6211\u4eec\u8981\u600e\u4e48\u505a\u5462\uff1f\u6211\u4eec\u663e\u7136\u4e0d\u5e0c\u671b\u5de5\u4eba\u770b\u5230\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u3002\u4f46\u662f\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2aWorker\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u90fd\u6709\u81ea\u5df1\u7684\u79c1\u6709\u76ee\u5f55\uff0c\u5b83\u53ef\u4ee5\u5728\u5176\u4e2d\u5b58\u50a8\u4efb\u4f55\u5b83\u60f3\u8981\u7684\u4e1c\u897f\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u57fa\u4e8e\u529f\u80fd\u7684\u5b89\u5168\u6027\u8bbe\u8ba1\u3002\u529f\u80fd\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u4e3b\u9898\uff0c\u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u4e3a\u5de5\u4f5c\u8005\u63d0\u4f9b\u4e00\u4e2aDirectory\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u4e00\u4e2a\u76ee\u5f55\u3002\u6b64\u5bf9\u8c61\u5c06\u5177\u6709\u5141\u8bb8\u521b\u5efa\u548c\u6253\u5f00\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u7684API\uff0c\u4f46\u4e0d\u5141\u8bb8\u5411\u4e0a\u904d\u5386\u6811\u5230\u7236\u76ee\u5f55\u3002\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u5de5\u4f5c\u4eba\u5458\u90fd\u4f1a\u5c06\u5176\u79c1\u6709\u76ee\u5f55\u89c6\u4e3a\u81ea\u5df1\u6587\u4ef6\u7cfb\u7edf\u7684\u6839\u76ee\u5f55\u3002\n\u8fd9\u6837\u7684API\u5c06\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\u5982\u4e0a\u6240\u8ff0\uff0c\u6c99\u7bb1\u8fdb\u7a0b\u4e0d\u80fd\u8bbf\u95ee\u771f\u5b9e\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6211\u4eec\u66f4\u613f\u610f\u8ba9\u5b83\u4fdd\u6301\u8fd9\u79cd\u72b6\u6001\u3002\u76f8\u53cd\uff0c\u6587\u4ef6\u8bbf\u95ee\u5c06\u7531\u4e3b\u7ba1\u8fdb\u7a0b\u8fdb\u884c\u8c03\u89e3\u3002\u6c99\u7bb1\u4f7f\u7528Cap&#39\uff1bn Proto RPC(\u4e00\u79cd\u57fa\u4e8e\u529f\u80fd\u7684RPC\u534f\u8bae)\u4e0e\u4e3b\u7ba1\u8fdb\u884c\u5bf9\u8bdd\u3002(Cap&39\uff1bn Proto\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u76ee\u524d\u7531Cloudflare Workers\u56e2\u961f\u7ef4\u62a4\u3002)\u3002\u8be5\u534f\u8bae\u4f7f\u5f97\u5b9e\u73b0\u57fa\u4e8e\u529f\u80fd\u7684API\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5c06\u6c99\u7bb1\u4e25\u683c\u9650\u5236\u4e3a\u53ea\u8bbf\u95ee\u5c5e\u4e8e\u5b83\u6b63\u5728\u8fd0\u884c\u7684Worker\u7684\u6587\u4ef6\u3002\n\u73b0\u5728\uff0c\u7f51\u7edc\u8bbf\u95ee\u60c5\u51b5\u5982\u4f55\u5462\uff1f\u4eca\u5929\uff0c\u5de5\u4eba\u4eec\u53ea\u80fd\u901a\u8fc7HTTP\u4e0e\u4e16\u754c\u5176\u4ed6\u5730\u65b9\u4ea4\u8c08--\u65e0\u8bba\u662f\u4f20\u5165\u7684\u8fd8\u662f\u4f20\u51fa\u7684\u3002\u5176\u4ed6\u5f62\u5f0f\u7684\u7f51\u7edc\u8bbf\u95ee\u6ca1\u6709API\uff0c\u56e0\u6b64\u88ab\u7981\u6b62(\u867d\u7136\u6211\u4eec\u8ba1\u5212\u5c06\u6765\u652f\u6301\u5176\u4ed6\u534f\u8bae)\u3002\n\u5982\u524d\u6240\u8ff0\uff0c\u6c99\u7bb1\u8fdb\u7a0b\u4e0d\u80fd\u76f4\u63a5\u8fde\u63a5\u5230\u7f51\u7edc\u3002\u76f8\u53cd\uff0c\u6240\u6709\u51fa\u7ad9HTTP\u8bf7\u6c42\u90fd\u901a\u8fc7Unix\u57df\u5957\u63a5\u5b57\u53d1\u9001\u5230\u672c\u5730\u4ee3\u7406\u670d\u52a1\u3002\u8be5\u670d\u52a1\u5bf9\u8bf7\u6c42\u5b9e\u65bd\u9650\u5236\u3002\u4f8b\u5982\uff0c\u5b83\u9a8c\u8bc1\u8bf7\u6c42\u662f\u53d1\u5f80\u516c\u5171Internet\u670d\u52a1\uff0c\u8fd8\u662f\u53d1\u5f80\u5458\u5de5\u533a\u57df\u81ea\u5df1\u7684\u6e90\u670d\u52a1\u5668\uff0c\u800c\u4e0d\u662f\u53d1\u5f80\u53ef\u80fd\u5728\u672c\u5730\u8ba1\u7b97\u673a\u6216\u7f51\u7edc\u4e0a\u53ef\u89c1\u7684\u5185\u90e8\u670d\u52a1\u3002\u5b83\u8fd8\u5411\u6bcf\u4e2a\u8bf7\u6c42\u6dfb\u52a0\u4e00\u4e2a\u6807\u5934\uff0c\u4ee5\u6807\u8bc6\u53d1\u8d77\u8be5\u8bf7\u6c42\u7684Worker\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u8ddf\u8e2a\u548c\u963b\u6b62\u6ee5\u7528\u8bf7\u6c42\u3002\u4e00\u65e6\u4e00\u5207\u5c31\u7eea\uff0c\u8bf7\u6c42\u5c31\u4f1a\u88ab\u53d1\u9001\u5230\u6211\u4eec\u7684HTTP\u7f13\u5b58\u5c42\uff0c\u7136\u540e\u518d\u53d1\u9001\u5230Internet\u3002\n\u540c\u6837\uff0c\u5165\u7ad9HTTP\u8bf7\u6c42\u4e0d\u4f1a\u76f4\u63a5\u8f6c\u5230Worker\u8fd0\u884c\u65f6\u3002\u5b83\u4eec\u9996\u5148\u7531\u5165\u7ad9\u4ee3\u7406\u670d\u52a1\u63a5\u6536\u3002\u8be5\u670d\u52a1\u8d1f\u8d23TLS\u7ec8\u6b62(Worker Runtime\u6c38\u8fdc\u4e0d\u4f1a\u770b\u5230TLS\u5bc6\u94a5)\uff0c\u4ee5\u53ca\u6807\u8bc6\u8981\u4e3a\u7279\u5b9a\u8bf7\u6c42URL\u8fd0\u884c\u7684\u6b63\u786eWorker\u811a\u672c\u3002\u4e00\u65e6\u4e00\u5207\u5c31\u7eea\uff0c\u8bf7\u6c42\u5c31\u4f1a\u901a\u8fc7Unix\u57df\u5957\u63a5\u5b57\u4f20\u9012\u5230\u6c99\u7bb1\u8fdb\u7a0b\u3002\n\u6bcf\u4e00\u4e2a\u91cd\u8981\u7684\u8f6f\u4ef6\u90fd\u6709\u7f3a\u9677\uff0c\u6c99\u76d2\u6280\u672f\u4e5f\u4e0d\u4f8b\u5916\u3002\u865a\u62df\u673a\u6709bug\uff0c\u5bb9\u5668\u6709bug\uff0c\u662f\u7684\uff0c\u9694\u79bb(\u6211\u4eec\u4f7f\u7528\u7684)\u4e5f\u6709bug\u3002\u6211\u4eec\u4e0d\u80fd\u751f\u6d3b\u5728\u5047\u88c5\u518d\u4e5f\u4e0d\u4f1a\u53d1\u73b0\u9519\u8bef\u7684\u60c5\u51b5\u4e0b\uff1b\u76f8\u53cd\uff0c\u6211\u4eec\u5fc5\u987b\u5047\u8bbe\u4ed6\u4eec\u4f1a\u53d1\u73b0\uff0c\u5e76\u76f8\u5e94\u5730\u505a\u597d\u8ba1\u5212\u3002\n\u6211\u4eec\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8eV8\u63d0\u4f9b\u7684\u9694\u79bb\uff0cV8\u662fGoogle\u4e3a\u5728Chrome\u4e2d\u4f7f\u7528\u800c\u6784\u5efa\u7684JavaScript\u5f15\u64ce\u3002\u8fd9\u6709\u597d\u7684\u4e00\u9762\uff0c\u4e5f\u6709\u574f\u7684\u4e00\u9762\u3002\u4e00\u65b9\u9762\uff0cV8\u662f\u4e00\u9879\u6781\u5176\u590d\u6742\u7684\u6280\u672f\uff0c\u5b83\u521b\u9020\u4e86\u6bd4\u865a\u62df\u673a\u66f4\u5e7f\u6cdb\u7684\u653b\u51fb\u9762\u3002\u590d\u6742\u6027\u8d8a\u9ad8\uff0c\u51fa\u9519\u7684\u673a\u4f1a\u5c31\u8d8a\u591a\u3002\u4e0d\u8fc7\uff0c\u597d\u7684\u4e00\u9762\u662f\uff0c\u7531\u4e8eV8\u53ef\u4ee5\u8bf4\u662f\u4e16\u754c\u4e0a\u6700\u6d41\u884c\u7684\u6c99\u76d2\u6280\u672f\uff0c\u5728\u5bfb\u627e\u548c\u4fee\u590dV8\u9519\u8bef\u65b9\u9762\u6295\u5165\u4e86\u5927\u91cf\u7684\u7cbe\u529b\u3002\u8c37\u6b4c\u5b9a\u671f\u5411\u4efb\u4f55\u627e\u5230V8\u6c99\u76d2\u9003\u751f\u7684\u4eba\u652f\u4ed85\u4f4d\u6570\u7684\u8d4f\u91d1\u3002\u8c37\u6b4c\u8fd8\u8fd0\u8425\u7740\u6a21\u7cca\u57fa\u7840\u8bbe\u65bd\uff0c\u81ea\u52a8\u67e5\u627e\u6f0f\u6d1e\u7684\u901f\u5ea6\u6bd4\u5927\u591a\u6570\u4eba\u90fd\u5feb\u3002\u8c37\u6b4c\u7684\u6295\u8d44\u5927\u5927\u964d\u4f4e\u4e86V8\u96f6\u65e5\u6f0f\u6d1e\u7684\u98ce\u9669\uff0c\u8fd9\u4e9b\u6f0f\u6d1e\u662f\u574f\u4eba\u53d1\u73b0\u7684\uff0c\u8c37\u6b4c\u5e76\u4e0d\u77e5\u9053\u3002\n\u4f46\u662f\uff0c\u5728\u597d\u4eba\u53d1\u73b0\u5e76\u62a5\u544a\u4e86\u9519\u8bef\u4e4b\u540e\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1fV8\u662f\u5f00\u653e\u6e90\u7801\u7684\uff0c\u6240\u4ee5\u9488\u5bf9\u5b89\u5168\u9519\u8bef\u7684\u4fee\u590d\u662f\u516c\u5f00\u5f00\u53d1\u7684\uff0c\u5e76\u540c\u65f6\u5411\u6240\u6709\u4eba\u53d1\u5e03--\u597d\u4eba\u548c\u574f\u4eba\u3002\u91cd\u8981\u7684\u662f\uff0c\u5728\u574f\u4eba\u5f00\u53d1\u6f0f\u6d1e\u4e4b\u524d\uff0c\u4efb\u4f55\u8865\u4e01\u90fd\u8981\u5c3d\u5feb\u6295\u5165\u751f\u4ea7\u3002\n\u4ece\u53d1\u5e03\u4fee\u8865\u7a0b\u5e8f\u5230\u90e8\u7f72\u4fee\u8865\u7a0b\u5e8f\u4e4b\u95f4\u7684\u65f6\u95f4\u79f0\u4e3a\u8865\u4e01\u7a0b\u5e8f\u95f4\u9699\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u8c37\u6b4c\u5ba3\u5e03Chrome\u7684\u8865\u4e01\u95f4\u9694\u4ece33\u5929\u7f29\u77ed\u523015\u5929\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f18\u52bf\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u63a7\u5236\u7cfb\u7edf\u5728\u5176\u4e0a\u8fd0\u884c\u7684\u673a\u5668\u3002\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u51e0\u4e4e\u6574\u4e2a\u6784\u5efa\u548c\u53d1\u5e03\u8fc7\u7a0b\u7684\u81ea\u52a8\u5316\uff0c\u56e0\u6b64\u4e00\u65e6\u53d1\u5e03\u4e86V8\u8865\u4e01\uff0c\u6211\u4eec\u7684\u7cfb\u7edf\u5c31\u4f1a\u81ea\u52a8\u6784\u5efa\u4e00\u4e2a\u65b0\u7248\u672c\u7684Workers Runtime\uff0c\u5e76\u4e14\u5728\u5fc5\u8981\u7684(\u4eba\u5de5)\u5ba1\u67e5\u8005\u5355\u51fb\u7b7e\u5b57\u540e\uff0c\u4f1a\u81ea\u52a8\u5c06\u8be5\u7248\u672c\u63a8\u5411\u751f\u4ea7\u3002\n\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u8865\u4e01\u95f4\u9694\u73b0\u5728\u4e0d\u523024\u5c0f\u65f6\u3002V8&39\uff1b\u5728\u6155\u5c3c\u9ed1\u7684\u56e2\u961f\u5728\u5de5\u4f5c\u65e5\u53d1\u5e03\u7684\u8865\u4e01\u901a\u5e38\u4f1a\u5728\u6211\u4eec\u5728\u7f8e\u56fd\u7684\u5de5\u4f5c\u65e5\u7ed3\u675f\u4e4b\u524d\u6295\u5165\u751f\u4ea7\u3002\n\u6211\u4eec\u6536\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u5e7d\u7075\u515a\u7684\u95ee\u9898\u3002\u8c37\u6b4c\u7684V8\u56e2\u961f\u5df2\u7ecf\u660e\u786e\u8868\u793a\uff0cV8\u672c\u8eab\u4e0d\u80fd\u9632\u5fa1Spectre\u3002\u7531\u4e8e\u5de5\u4eba\u4f9d\u8d56V8\u8fdb\u884c\u6c99\u7bb1\uff0c\u8bb8\u591a\u4eba\u95ee\u8fd9\u662f\u5426\u4f1a\u8ba9\u5de5\u4eba\u53d8\u5f97\u8106\u5f31\u3002\u7136\u800c\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u4f9d\u8d56V8\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff1bWorker\u73af\u5883\u63d0\u4f9b\u4e86\u8bb8\u591a\u66ff\u4ee3\u65b9\u6cd5\u6765\u7f13\u89e3Spectre\u3002\n\u5e7d\u7075\u662f\u590d\u6742\u548c\u5fae\u5999\u7684\uff0c\u6211\u4e0d\u53ef\u80fd\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u6db5\u76d6\u5173\u4e8e\u5b83\u7684\u6240\u6709\u77e5\u8bc6\uff0c\u6216\u8005\u5de5\u4eba\u4eec\u662f\u5982\u4f55\u89e3\u51b3\u5b83\u7684\u3002\u4f46\u662f\uff0c\u5e0c\u671b\u6211\u80fd\u6f84\u6e05\u4e00\u4e9b\u56f0\u60d1\u548c\u62c5\u5fe7\u3002\nSPECTE\u662f\u4e00\u7c7b\u653b\u51fb\uff0c\u5728\u8fd9\u79cd\u653b\u51fb\u4e2d\uff0c\u6076\u610f\u7a0b\u5e8f\u53ef\u4ee5\u8bf1\u4f7fCPU\u4f7f\u7528\u7a0b\u5e8f\u4e0d\u5e94\u8be5\u8bbf\u95ee\u7684\u6570\u636e\u63a8\u6d4b\u6027\u5730\u6267\u884c\u8ba1\u7b97\u3002CPU\u6700\u7ec8\u610f\u8bc6\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e0d\u5141\u8bb8\u7a0b\u5e8f\u770b\u5230\u63a8\u6d4b\u8ba1\u7b97\u7684\u7ed3\u679c\u3002\u7136\u800c\uff0c\u8be5\u7a0b\u5e8f\u53ef\u80fd\u80fd\u591f\u901a\u8fc7\u67e5\u770b\u8ba1\u7b97\u7684\u7ec6\u5fae\u526f\u4f5c\u7528(\u4f8b\u5982\u5bf9\u9ad8\u901f\u7f13\u5b58\u7684\u5f71\u54cd)\u6765\u63a8\u5bfc\u51fa\u79d8\u5bc6\u6570\u636e\u7684\u6bd4\u7279\u3002\nSPECTE\u5305\u542b\u4e86\u73b0\u4ee3CPU\u4e2d\u5b58\u5728\u7684\u5404\u79cd\u6f0f\u6d1e\u3002\u5177\u4f53\u7684\u6f0f\u6d1e\u56e0\u4f53\u7cfb\u7ed3\u6784\u548c\u578b\u53f7\u800c\u5f02\uff0c\u5f88\u53ef\u80fd\u5b58\u5728\u8bb8\u591a\u5c1a\u672a\u53d1\u73b0\u7684\u6f0f\u6d1e\u3002\n\u8fd9\u4e9b\u6f0f\u6d1e\u662f\u6bcf\u4e2a\u4e91\u8ba1\u7b97\u5e73\u53f0\u7684\u95ee\u9898\u3002\u4efb\u4f55\u65f6\u5019\uff0c\u53ea\u8981\u60a8\u6709\u591a\u4e2a\u79df\u6237\u5728\u540c\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u4ee3\u7801\uff0cSpectre\u653b\u51fb\u5c31\u4f1a\u5f00\u59cb\u53d1\u6325\u4f5c\u7528\u3002\u7136\u800c\uff0c\u79df\u6237\u79bb\u5f97\u8d8a\u8fd1\uff0c\u5c31\u8d8a\u96be\u4ee5\u7f13\u89e3\u7279\u5b9a\u7684\u6f0f\u6d1e\u3002\u8bb8\u591a\u5df2\u77e5\u95ee\u9898\u53ef\u4ee5\u5728\u5185\u6838\u7ea7\u522b(\u76f8\u4e92\u4fdd\u62a4\u8fdb\u7a0b)\u6216\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u7ea7\u522b(\u4fdd\u62a4VM)\u5f97\u5230\u7f13\u89e3\uff0c\u901a\u5e38\u501f\u52a9CPU\u5fae\u7801\u66f4\u65b0\u548c\u5404\u79cd\u6280\u5de7(\u4e0d\u5e78\u7684\u662f\uff0c\u5176\u4e2d\u8bb8\u591a\u90fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u6027\u80fd\u5f71\u54cd)\u3002\n\u5728Cloudflare Workers\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528V8\u9694\u79bb\u5c06\u79df\u6237\u5f7c\u6b64\u9694\u79bb--\u800c\u4e0d\u662f\u8fdb\u7a0b\u6216VM\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u4e00\u5b9a\u8981\u4f9d\u8d56\u64cd\u4f5c\u7cfb\u7edf\u6216\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u8865\u4e01\u6765\u4e3a\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u3002\u6211\u4eec\u9700\u8981\u6211\u4eec\u81ea\u5df1\u7684\u6218\u7565\u3002\nCloudFlare Workers\u8bbe\u8ba1\u7528\u4e8e\u5728\u6bcf\u4e2aCloudFlare\u4f4d\u7f6e\u8fd0\u884c\u60a8\u7684\u4ee3\u7801\uff0c\u76ee\u524d\u5168\u7403\u6709200\u4e2aCloudFlare\u4f4d\u7f6e\uff0c\u800c\u4e14\u8fd8\u5728\u4e0d\u65ad\u589e\u52a0\u3002\n\u6211\u4eec\u5e0c\u671bWorker\u6210\u4e3a\u4e00\u4e2a\u4eba\u4eba\u90fd\u53ef\u4ee5\u8bbf\u95ee\u7684\u5e73\u53f0--\u800c\u4e0d\u4ec5\u4ec5\u662f\u90a3\u4e9b\u53ef\u4ee5\u652f\u4ed8\u767e\u4e07\u7f8e\u5143\u7684\u5927\u4f01\u4e1a\u5ba2\u6237\u3002\u6211\u4eec\u9700\u8981\u5904\u7406\u5927\u91cf\u7684\u79df\u6237\uff0c\u5176\u4e2d\u8bb8\u591a\u79df\u6237\u7684\u6d41\u91cf\u975e\u5e38\u5c0f\u3002\n\u5178\u578b\u7684\u975e\u8fb9\u7f18\u65e0\u670d\u52a1\u5668\u63d0\u4f9b\u5546\u53ef\u4ee5\u901a\u8fc7\u5c06\u4f4e\u6d41\u91cf\u79df\u6237\u7684\u6240\u6709\u6d41\u91cf\u53d1\u9001\u5230\u4e00\u53f0\u8ba1\u7b97\u673a\u6765\u5904\u7406\u8be5\u79df\u6237\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u52a0\u8f7d\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u4e2a\u526f\u672c\u3002\u6bd4\u65b9\u8bf4\uff0c\u5982\u679c\u8fd9\u53f0\u673a\u5668\u80fd\u5904\u7406\u5341\u51e0\u4e2a\u79df\u6237\uff0c\u90a3\u5c31\u8db3\u591f\u4e86\u3002\u8fd9\u53f0\u673a\u5668\u53ef\u4ee5\u6258\u7ba1\u5728\u4e00\u4e2a\u62e5\u6709\u6570\u767e\u4e07\u53f0\u673a\u5668\u7684\u5de8\u578b\u6570\u636e\u4e2d\u5fc3\uff0c\u5b9e\u73b0\u89c4\u6a21\u7ecf\u6d4e\u3002\u7136\u800c\uff0c\u5f53\u7528\u6237\u78b0\u5de7\u4e0d\u5728\u9644\u8fd1\u65f6\uff0c\u8fd9\u79cd\u96c6\u4e2d\u5316\u4f1a\u62db\u81f4\u5ef6\u8fdf\u548c\u5168\u7403\u5e26\u5bbd\u6210\u672c\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u6709\u4e86Worker\uff0c\u65e0\u8bba\u6d41\u91cf\u7ea7\u522b\u5982\u4f55\uff0c\u6bcf\u4e2a\u79df\u6237\u76ee\u524d\u90fd\u53ef\u4ee5\u5728\u6bcf\u4e2aCloudflare\u4f4d\u7f6e\u8fd0\u884c\u3002\u5728\u6211\u4eec\u5bfb\u6c42\u5c3d\u53ef\u80fd\u63a5\u8fd1\u6700\u7ec8\u7528\u6237\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u9009\u62e9\u4ec5\u6709\u7a7a\u95f4\u5bb9\u7eb3\u6709\u9650\u6570\u91cf\u7684\u673a\u5668\u7684\u4f4d\u7f6e\u3002\u6700\u7ec8\u7ed3\u679c\u662f\uff0c\u6211\u4eec\u9700\u8981\u80fd\u591f\u5728\u6bcf\u53f0\u8ba1\u7b97\u673a\u4e0a\u6258\u7ba1\u6570\u5343\u4e2a\u6d3b\u52a8\u79df\u6237\uff0c\u5e76\u80fd\u591f\u6309\u9700\u5feb\u901f\u542f\u52a8\u975e\u6d3b\u52a8\u79df\u6237\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6765\u5bbe\u4e0d\u80fd\u5360\u7528\u8d85\u8fc7\u51e0\u5146\u5b57\u8282\u7684\u5185\u5b58--\u51e0\u4e4e\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u6765\u653e\u7f6e\u8c03\u7528\u5806\u6808\uff0c\u66f4\u4e0d\u7528\u8bf4\u8fdb\u7a0b\u6240\u9700\u7684\u6240\u6709\u5176\u4ed6\u5185\u5bb9\u4e86\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u9700\u8981\u975e\u5e38\u4fbf\u5b9c\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u8bb8\u591a\u9a7b\u7559\u5728\u8bb0\u5fc6\u4e2d\u7684\u5de5\u4eba\u53ea\u4f1a\u65f6\u4e0d\u65f6\u5730\u5904\u7406\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u800c\u4e14\u8bb8\u591a\u5de5\u4eba\u5728\u4efb\u4f55\u7279\u5b9a\u4e8b\u4ef6\u4e0a\u82b1\u8d39\u7684\u65f6\u95f4\u90fd\u4e0d\u5230\u96f6\u70b9\u51e0\u6beb\u79d2\u3002\u5728\u8fd9\u79cd\u73af\u5883\u4e2d\uff0c\u5355\u4e2a\u6838\u5fc3\u5f88\u5bb9\u6613\u53d1\u73b0\u81ea\u5df1\u6bcf\u79d2\u90fd\u4f1a\u5728\u6570\u5343\u4e2a\u4e0d\u540c\u7684\u79df\u6237\u4e4b\u95f4\u5207\u6362\u3002\u6b64\u5916\uff0c\u8981\u5904\u7406\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u9700\u8981\u5728\u5ba2\u6237\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u4e3b\u673a\u4e4b\u95f4\u8fdb\u884c\u5927\u91cf\u901a\u4fe1\uff0c\u8fd9\u610f\u5473\u7740\u66f4\u591a\u7684\u4ea4\u6362\u548c\u901a\u4fe1\u5f00\u9500\u3002\u5982\u679c\u6bcf\u4e2a\u79df\u6237\u90fd\u751f\u6d3b\u5728\u81ea\u5df1\u7684\u8fdb\u7a0b\u4e2d\uff0c\u90a3\u4e48\u6240\u6709\u8fd9\u4e9b\u5f00\u9500\u90fd\u6bd4\u591a\u4e2a\u79df\u6237\u751f\u6d3b\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u8981\u5927\u51e0\u4e2a\u6570\u91cf\u7ea7\u3002\u5728Worker\u4e2d\u4f7f\u7528\u4e25\u683c\u7684\u8fdb\u7a0b\u9694\u79bb\u65f6\uff0c\u6211\u4eec\u53d1\u73b0CPU\u6210\u672c\u5f88\u5bb9\u6613\u8fbe\u5230\u5171\u4eab\u8fdb\u7a0b\u768410\u500d\u3002\n\u4e3a\u4e86\u8ba9\u5458\u5de5\u4fdd\u6301\u5ec9\u4ef7\u3001\u5feb\u901f\u548c\u4eba\u4eba\u90fd\u80fd\u8bbf\u95ee\uff0c\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u6258\u7ba1\u591a\u4e2a\u79df\u6237\u3002\n\u8be5\u884c\u4e1a\u4e0d\u613f\u627f\u8ba4\u7684\u4e00\u4e2a\u80ae\u810f\u7684\u79d8\u5bc6\u662f\uff1a\u6ca1\u6709\u4eba\u4fee\u590d\u8fc7\u201c\u5e7d\u7075\u515a\u201d\u3002\u5373\u4f7f\u5728\u4f7f\u7528\u91cd\u91cf\u7ea7\u865a\u62df\u673a\u65f6\u4e5f\u4e0d\u4f1a\u3002\u6bcf\u4e2a\u4eba\u90fd\u4ecd\u7136\u8106\u5f31\u4e0d\u582a\u3002\n\u76ee\u524d\u5927\u591a\u6570\u884c\u4e1a\u91c7\u53d6\u7684\u65b9\u6cd5\u672c\u8d28\u4e0a\u662f\u4e00\u573a\u6253\u5730\u9f20\u7684\u6e38\u620f\u3002\u6bcf\u9694\u51e0\u4e2a\u6708\uff0c\u7814\u7a76\u4eba\u5458\u5c31\u4f1a\u53d1\u73b0\u4e00\u4e2a\u65b0\u7684Spectre\u6f0f\u6d1e\u3002CPU\u4f9b\u5e94\u5546\u53d1\u5e03\u4e86\u4e00\u4e9b\u65b0\u7684\u5fae\u7801\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f9b\u5e94\u5546\u53d1\u5e03\u4e86\u5185\u6838\u8865\u4e01\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5fc5\u987b\u66f4\u65b0\u3002\n\u5f88\u660e\u663e\uff0c\u8fd8\u6709\u66f4\u591a\u7684\u6f0f\u6d1e\u5b58\u5728\uff0c\u4f46\u5c1a\u672a\u516c\u4e4b\u4e8e\u4f17\u3002\u8c01\u4f1a\u77e5\u9053\u8fd9\u4e9b\u6f0f\u6d1e\u5462\uff1f\u53d1\u5e03\u7684\u5927\u591a\u6570\u9519\u8bef\u90fd\u662f\u7531(\u975e\u5e38\u806a\u660e\u7684)\u7814\u7a76\u751f\u7528\u5f88\u5c11\u7684\u9884\u7b97\u53d1\u73b0\u7684\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u4e00\u4e2a\u8d44\u91d1\u96c4\u539a\u7684\u653f\u5e9c\u673a\u6784\uff0c\u80fd\u591f\u4e70\u5230\u4e16\u754c\u4e0a\u6700\u4f18\u79c0\u7684\u4eba\u624d\uff0c\u8fd8\u80fd\u53d1\u73b0\u591a\u5c11\u6f0f\u6d1e\u3002\n\u4e3a\u4e86\u771f\u6b63\u9632\u5fa1\u5e7d\u7075\u515a\uff0c\u6211\u4eec\u9700\u8981\u91c7\u53d6\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u5b83\u4e0d\u8db3\u4ee5\u963b\u6b62\u5355\u4e2a\u5df2\u77e5\u6f0f\u6d1e\u3002\u6211\u4eec\u5fc5\u987b\u7acb\u5373\u89e3\u51b3\u6574\u4e2a\u7c7b\u522b\u7684\u6f0f\u6d1e\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4e0d\u592a\u53ef\u80fd\u627e\u5230\u4efb\u4f55\u5305\u7f57\u4e07\u8c61\u7684\u5e7d\u7075\u4fee\u590d\u65b9\u6cd5\u3002\u4f46\u4e3a\u4e86\u4fbf\u4e8e\u8ba8\u8bba\uff0c\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u3002\n\u57fa\u672c\u4e0a\uff0c\u6240\u6709Spectre\u6f0f\u6d1e\u90fd\u4f7f\u7528\u65c1\u8def\u6765\u68c0\u6d4b\u9690\u85cf\u7684\u5904\u7406\u5668\u72b6\u6001\u3002\u6839\u636e\u5b9a\u4e49\uff0c\u4fa7\u901a\u9053\u5305\u62ec\u89c2\u5bdf\u7cfb\u7edf\u7684\u4e00\u4e9b\u4e0d\u786e\u5b9a\u884c\u4e3a\u3002\u65b9\u4fbf\u7684\u662f\uff0c\u5927\u591a\u6570\u8f6f\u4ef6\u6267\u884c\u73af\u5883\u90fd\u5728\u52aa\u529b\u6d88\u9664\u4e0d\u786e\u5b9a\u6027\uff0c\u56e0\u4e3a\u975e\u786e\u5b9a\u6027\u6267\u884c\u4f1a\u4f7f\u5e94\u7528\u7a0b\u5e8f\u4e0d\u53ef\u9760\u3002\n\u7136\u800c\uff0c\u6709\u51e0\u79cd\u975e\u51b3\u5b9a\u8bba\u4ecd\u7136\u5f88\u5e38\u89c1\u3002\u5176\u4e2d\u6700\u660e\u663e\u7684\u662f\u65f6\u673a\u3002\u4e1a\u754c\u5f88\u65e9\u4ee5\u524d\u5c31\u653e\u5f03\u4e86\u7a0b\u5e8f\u6bcf\u6b21\u8fd0\u884c\u90fd\u5e94\u8be5\u82b1\u8d39\u76f8\u540c\u65f6\u95f4\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u786e\u5b9a\u6027\u7684\u65f6\u95f4\u5b89\u6392\u4e0e\u542f\u53d1\u5f0f\u7684\u6027\u80fd\u4f18\u5316\u4ece\u6839\u672c\u4e0a\u662f\u4e0d\u4e00\u81f4\u7684\u3002\u679c\u4e0d\u5176\u7136\uff0c\u5927\u591a\u6570Spectre\u653b\u51fb\u90fd\u96c6\u4e2d\u5728\u8ba1\u65f6\u4e0a\uff0c\u5c06\u5176\u4f5c\u4e3a\u68c0\u6d4bCPU\u9690\u85cf\u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u72b6\u6001\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\n\u4e00\u4e9b\u4eba\u63d0\u51fa\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u5b9a\u65f6\u5668\u4e0d\u51c6\u786e\u6216\u6dfb\u52a0\u968f\u673a\u566a\u58f0\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u5e76\u4e0d\u80fd\u963b\u6b62\u653b\u51fb\uff1b\u5b83\u53ea\u4f1a\u4f7f\u653b\u51fb\u53d8\u5f97\u66f4\u6162\u3002\u5982\u679c\u8ba1\u65f6\u5668\u5b8c\u5168\u8ddf\u8e2a\u5b9e\u65f6\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u591a\u6b21\u8fd0\u884c\u653b\u51fb\u5e76\u4f7f\u7528\u7edf\u8ba1\u6570\u636e\u8fc7\u6ee4\u566a\u97f3\u6765\u514b\u670d\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u5176\u4e0d\u51c6\u786e\u7684\u95ee\u9898\u3002\n\u8bb8\u591a\u5b89\u5168\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\u8fd9\u5c31\u662f\u6545\u4e8b\u7684\u7ed3\u5c40\u3002\u5982\u679c\u653b\u51fb\u4ecd\u7136\u6709\u53ef\u80fd\uff0c\u51cf\u7f13\u653b\u51fb\u53c8\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u4e00\u65e6\u653b\u51fb\u8005\u62ff\u5230\u4f60\u7684\u79c1\u94a5\uff0c\u6e38\u620f\u5c31\u7ed3\u675f\u4e86\uff0c\u5bf9\u5417\uff1f\u4ed6\u4eec\u82b1\u4e00\u5206\u949f\u8fd8\u662f\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\u5462\uff1f\n\u6211\u4eec\u7684\u4e3b\u8981\u89c1\u89e3\u662f\uff1a\u5f53\u653b\u51fb\u53d8\u5f97\u66f4\u6162\u65f6\uff0c\u65b0\u7684\u6280\u672f\u53d8\u5f97\u5b9e\u7528\uff0c\u4f7f\u5b83\u53d8\u5f97\u66f4\u6162\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5c06\u8db3\u591f\u591a\u7684\u6280\u672f\u4e32\u8054\u5728\u4e00\u8d77\uff0c\u4f7f\u653b\u51fb\u53d8\u5f97\u5982\u6b64\u7f13\u6162\uff0c\u4ee5\u81f3\u4e8e\u53d8\u5f97\u4e4f\u5473\u3002\n\u6bd5\u7adf\uff0c\u8bb8\u591a\u5bc6\u7801\u5b66\u5728\u6280\u672f\u4e0a\u5f88\u5bb9\u6613\u53d7\u5230\u66b4\u529b\u653b\u51fb--\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u53ea\u8981\u6709\u8db3\u591f\u7684\u65f6\u95f4\uff0c\u4f60\u5c31\u53ef\u4ee5\u7834\u89e3\u5b83\u3002\u4f46\u5f53\u6240\u9700\u7684\u65f6\u95f4\u662f\u6570\u5343\u5e74(\u751a\u81f3\u6570\u5341\u4ebf\u5e74)\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u8fd9\u5c31\u8db3\u591f\u4e86\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u8981\u600e\u4e48\u505a\u624d\u80fd\u628a\u5e7d\u7075\u653b\u51fb\u51cf\u6162\u5230\u6beb\u65e0\u610f\u4e49\u7684\u5730\u6b65\u5462\uff1f\n\u6211\u4eec\u4e0d\u5141\u8bb8\u6211\u4eec\u7684\u5ba2\u6237\u4e0a\u4f20\u5728\u6211\u4eec\u7f51\u7edc\u4e0a\u8fd0\u884c\u7684\u672c\u673a\u4ee3\u7801\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u6211\u4eec\u53ea\u63a5\u53d7JavaScript\u548cWebAssembly\u3002\u5f53\u7136\uff0c\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\uff0c\u5982Python\u3001Rust\uff0c\u751a\u81f3Cobol\uff0c\u90fd\u53ef\u4ee5\u7f16\u8bd1\u6216\u8f6c\u6362\u4e3a\u8fd9\u4e24\u79cd\u683c\u5f0f\u4e2d\u7684\u4e00\u79cd\u3002\n.", "note_en": "Hello, I&#39;m an engineer on the Workers team, and today I want to talk to you about security.\n Cloudflare is a security company, and the heart of Workers is, in my view, a security project. Running code written by third parties is always a scary proposition, and the primary concern of the Workers team is to make that safe.\n For a project like this, it is not enough to pass a security review and say &#34;ok, we&#39;re secure&#34; and move on. It&#39;s not even enough to consider security at every stage of design and implementation. For Workers, security in and of itself is an ongoing project, and that work is never done. There are always things we can do to reduce the risk and impact of future vulnerabilities.\n Today, I want to give you an overview of our security architecture, and then address two specific issues that we are frequently asked about: V8 bugs, and Spectre.\n    There are two fundamental parts of designing a code sandbox: secure isolation and API design.\n  First, we need to create an execution environment where code can&#39;t access anything it&#39;s not supposed to.\n For this, our primary tool is V8, the JavaScript engine developed by Google for use in Chrome. V8 executes code inside &#34;isolates&#34;, which prevent that code from accessing memory outside the isolate -- even within the same process. Importantly, this means we can run many isolates within a single process. This is essential for an edge compute platform like Workers where we must host many thousands of guest apps on every machine, and rapidly switch between these guests thousands of times per second with minimal overhead. If we had to run a separate process for every guest, the number of tenants we could support would be drastically reduced, and we&#39;d have to limit edge compute to a small number of big enterprise customers who could pay a lot of money. With isolate technology, we can make edge compute available to everyone.\n Sometimes, though, we do decide to schedule a worker in its own private process. We do this if it uses certain features that we feel need an extra layer of isolation. For example, when a developer uses the devtools debugger to inspect their worker, we run that worker in a separate process. This is because historically, in the browser, the inspector protocol has only been usable by the browser&#39;s trusted operator, and therefore has not received as much security scrutiny as the rest of V8. In order to hedge against the increased risk of bugs in the inspector protocol, we move inspected workers into a separate process with a process-level sandbox. We also use process isolation as an extra defense against Spectre, which I&#39;ll describe later in this post.\n Additionally, even for isolates that run in a shared process with other isolates, we run multiple instances of the whole runtime on each machine, which we call &#34;cordons&#34;. Workers are distributed among cordons by assigning each worker a level of trust and separating low-trusted workers from those we trust more highly. As one example of this in operation: a customer who signs up for our free plan will not be scheduled in the same process as an enterprise customer. This provides some defense-in-depth in the case a zero-day security vulnerability is found in V8. But I&#39;ll talk more about V8 bugs, and how we address them, later in this post.\n At the whole-process level, we apply another layer of sandboxing for defense in depth. The &#34;layer 2&#34; sandbox uses Linux namespaces and seccomp to prohibit all access to the filesystem and network. Namespaces and seccomp are commonly used to implement containers. However, our use of these technologies is much stricter than what is usually possible in container engines, because we configure namespaces and seccomp after the process has started (but before any isolates have been loaded). This means, for example, we can (and do) use a totally empty filesystem (mount namespace) and use seccomp to block absolutely all filesystem-related system calls. Container engines can&#39;t normally prohibit all filesystem access because doing so would make it impossible to use  exec() to start the guest program from disk; in our case, our guest programs are not native binaries, and the Workers runtime itself has already finished loading before we block filesystem access.\n The layer 2 sandbox also totally prohibits network access. Instead, the process is limited to communicating only over local Unix domain sockets, to talk to other processes on the same system. Any communication to the outside world must be mediated by some other local process outside the sandbox.\n One such process in particular, which we call the &#34;supervisor&#34;, is responsible for fetching worker code and configuration from disk or from other internal services. The supervisor ensures that the sandbox process cannot read any configuration except that which is relevant to the workers that it should be running.\n For example, when the sandbox process receives a request for a worker it hasn&#39;t seen before, that request includes the encryption key for that worker&#39;s code (including attached secrets). The sandbox can then pass that key to the supervisor in order to request the code. The sandbox cannot request any worker for which it has not received the appropriate key. It cannot enumerate known workers. It also cannot request configuration it doesn&#39;t need; for example, it cannot request the TLS key used for HTTPS traffic to the worker.\n Aside from reading configuration, the other reason for the sandbox to talk to other processes on the system is to implement APIs exposed to Workers. Which brings us to API design.\n  There is a saying: &#34;If a tree falls in the forest, but no one is there to hear it, does it make a sound?&#34; I have a related saying: &#34;If a Worker executes in a fully-isolated environment in which it is totally prevented from communicating with the outside world, does it actually run?&#34;\n Complete code isolation is, in fact, useless. In order for Workers to do anything useful, they have to be allowed to communicate with users. At the very least, a Worker needs to be able to receive requests and respond to them. It would also be nice if it could send requests to the world, safely. For that, we need APIs.\n In the context of sandboxing, API design takes on a new level of responsibility. Our APIs define exactly what a Worker can and cannot do. We must be very careful to design each API so that it can only express operations which we want to allow, and no more. For example, we want to allow Workers to make and receive HTTP requests, while we do not want them to be able to access the local filesystem or internal network services.\n Let&#39;s dig into the easier example first. Currently, Workers does not allow any access to the local filesystem. Therefore, we do not expose a filesystem API at all. No API means no access.\n But, imagine if we did want to support local filesystem access in the future. How would we do that? We obviously wouldn&#39;t want Workers to see the whole filesystem. Imagine, though, that we wanted each Worker to have its own private directory on the filesystem where it can store whatever it wants.\n To do this, we would use a design based on  capability-based security. Capabilities are a big topic, but in this case, what it would mean is that we would give the worker an object of type  Directory, representing a directory on the filesystem. This object would have an API that allows creating and opening files and subdirectories, but does not permit traversing &#34;up&#34; the tree to the parent directory. Effectively, each worker would see its private  Directory as if it were the root of their own filesystem.\n How would such an API be implemented? As described above, the sandbox process cannot access the real filesystem, and we&#39;d prefer to keep it that way. Instead, file access would be mediated by the supervisor process. The sandbox talks to the supervisor using  Cap&#39;n Proto RPC, a capability-based RPC protocol. (Cap&#39;n Proto is an open source project currently maintained by the Cloudflare Workers team.) This protocol makes it very easy to implement capability-based APIs, so that we can strictly limit the sandbox to accessing only the files that belong to the Workers it is running.\n Now what about network access? Today, Workers are allowed to talk to the rest of the world only via HTTP -- both incoming and outgoing. There is no API for other forms of network access, therefore it is prohibited (though we plan to support other protocols in the future).\n As mentioned before, the sandbox process cannot connect directly to the network. Instead, all outbound HTTP requests are sent over a Unix domain socket to a local proxy service. That service implements restrictions on the request. For example, it verifies that the request is either addressed to a public Internet service, or to the Worker&#39;s zone&#39;s own origin server, not to internal services that might be visible on the local machine or network. It also adds a header to every request identifying the worker from which it originates, so that abusive requests can be traced and blocked. Once everything is in order, the request is sent on to our HTTP caching layer, and then out to the Internet.\n Similarly, inbound HTTP requests do not go directly to the Workers Runtime. They are first received by an inbound proxy service. That service is responsible for TLS termination (the Workers Runtime never sees TLS keys), as well as identifying the correct Worker script to run for a particular request URL. Once everything is in order, the request is passed over a Unix domain socket to the sandbox process.\n  Every non-trivial piece of software has bugs, and sandboxing technologies are no exception. Virtual machines have bugs, containers have bugs, and yes, isolates (which we use) also have bugs. We can&#39;t live life pretending that no further bugs will ever be discovered; instead, we must assume they will and plan accordingly.\n We rely heavily on isolation provided by V8, the JavaScript engine built by Google for use in Chrome. This has good sides and bad sides. On one hand, V8 is an extraordinarily complicated piece of technology, creating a wider &#34;attack surface&#34; than virtual machines. More complexity means more opportunities for something to go wrong. On the bright side, though, an extraordinary amount of effort goes into finding and fixing V8 bugs, owing to its position as arguably the most popular sandboxing technology in the world. Google regularly pays out 5-figure bounties to anyone finding a V8 sandbox escape. Google also operates fuzzing infrastructure that automatically finds bugs faster than most humans can. Google&#39;s investment does a lot to minimize the danger of V8 &#34;zero-days&#34; -- bugs that are found by the bad guys and not known to Google.\n But, what happens after a bug is found and reported by the good guys? V8 is open source, so fixes for security bugs are developed in the open and released to everyone at the same time -- good guys and bad guys. It&#39;s important that any patch be rolled out to production as fast as possible, before the bad guys can develop an exploit.\n The time between publishing the fix and deploying it is known as the &#34;patch gap&#34;. Earlier this year,  Google announced that Chrome&#39;s patch gap had been reduced from 33 days to 15 days.\n Fortunately, we have an advantage here, in that we directly control the machines on which our system runs. We have automated almost our entire build and release process, so the moment a V8 patch is published, our systems automatically build a new release of the Workers Runtime and, after one-click sign-off from the necessary (human) reviewers, automatically push that release out to production.\n As a result, our patch gap is now under 24 hours. A patch published by V8&#39;s team in Munich during their work day will usually be in production before the end of our work day in the US.\n  We get a lot of questions about Spectre. The V8 team at Google has stated in no uncertain terms that  V8 itself cannot defend against Spectre. Since Workers relies on V8 for sandboxing, many have asked if that leaves Workers vulnerable. However, we do not need to depend on V8 for this; the Workers environment presents many alternative approaches to mitigating Spectre.\n Spectre is complicated and nuanced, and there&#39;s no way I can cover everything there is to know about it or how Workers addresses it in a single blog post. But, hopefully I can clear up some of the confusion and concern.\n  Spectre is a class of attacks in which a malicious program can trick the CPU into &#34;speculatively&#34; performing computation using data that the program is not supposed to have access to. The CPU eventually realizes the problem and does not allow the program to see the results of the speculative computation. However, the program may be able to derive bits of the secret data by looking at subtle side effects of the computation, such as the effects on cache.\n   Spectre encompasses a wide variety of vulnerabilities present in modern CPUs. The specific vulnerabilities vary by architecture and model, and it is likely that many vulnerabilities exist which haven&#39;t yet been discovered.\n These vulnerabilities are a problem for every cloud compute platform. Any time you have more than one tenant running code on the same machine, Spectre attacks come into play. However, the &#34;closer together&#34; the tenants are, the more difficult it can be to mitigate specific vulnerabilities. Many of the known issues can be mitigated at the kernel level (protecting processes from each other) or at the hypervisor level (protecting VMs), often with the help of CPU microcode updates and various tricks (many of which, unfortunately, come with serious performance impact).\n In Cloudflare Workers, we isolate tenants from each other using V8 isolates -- not processes nor VMs. This means that we cannot necessarily rely on OS or hypervisor patches to &#34;solve&#34; Spectre for us. We need our own strategy.\n  Cloudflare Workers is designed to run your code in every single Cloudflare location, of which there are currently 200 worldwide and growing.\n We wanted Workers to be a platform that is accessible to everyone -- not just big enterprise customers who can pay megabucks for it. We need to handle a huge number of tenants, where many tenants get very little traffic.\n  A typical, non-edge serverless provider could handle a low-traffic tenant by sending all of that tenant&#39;s traffic to a single machine, so that only one copy of the application needs to be loaded. If the machine can handle, say, a dozen tenants, that&#39;s plenty. That machine can be hosted in a mega-datacenter with literally millions of machines, achieving economies of scale. However, this centralization incurs latency and worldwide bandwidth costs when the users don&#39;t happen to be nearby.\n With Workers, on the other hand, every tenant, regardless of traffic level, currently runs in every Cloudflare location. And in our quest to get as close to the end user as possible, we sometimes choose locations that only have space for a limited number of machines. The net result is that we need to be able to host thousands of active tenants per machine, with the ability to rapidly spin up inactive ones on-demand. That means that each guest cannot take more than a couple megabytes of memory -- hardly enough space for a call stack, much less everything else that a process needs.\n Moreover, we need context switching to be extremely cheap. Many Workers resident in memory will only handle an event every now and then, and many Workers spend less than a fraction of a millisecond on any particular event. In this environment, a single core can easily find itself switching between thousands of different tenants every second. Moreover, to handle one event, a significant amount of communication needs to happen between the guest application and its host, meaning still more switching and communications overhead. If each tenant lives in its own process, all this overhead is orders of magnitude larger than if many tenants live in a single process. When using strict process isolation in Workers, we find the CPU cost can easily be 10x what it is with a shared process.\n In order to keep Workers inexpensive, fast, and accessible to everyone, we must solve these issues, and that means we must find a way to host multiple tenants in a single process.\n  A dirty secret that the industry doesn&#39;t like to admit: no one has &#34;fixed&#34; Spectre. Not even when using heavyweight virtual machines. Everyone is still vulnerable.\n The current approach being taken by most of the industry is essentially a game of whack-a-mole. Every couple months, researchers uncover a new Spectre vulnerability. CPU vendors release some new microcode, OS vendors release kernel patches, and everyone has to update.\n  It is abundantly clear that many more vulnerabilities exist, but haven&#39;t yet been publicized. Who might know about those vulnerabilities? Most of the bugs being published are being found by (very smart) graduate students on a shoestring budget. Imagine, for a minute, how many more bugs a well-funded government agency, able to buy the very best talent in the world, could be uncovering.\n To truly defend against Spectre, we need to take a different approach. It&#39;s not enough to block individual known vulnerabilities. We must address the entire class of vulnerabilities at once.\n  Unfortunately, it&#39;s unlikely that any catch-all &#34;fix&#34; for Spectre will be found. But for the sake of argument, let&#39;s try.\n Fundamentally, all Spectre vulnerabilities use side channels to detect hidden processor state. Side channels, by definition, involve observing some non-deterministic behavior of a system. Conveniently, most software execution environments try hard to eliminate non-determinism, because non-deterministic execution makes applications unreliable.\n However, there are a few sorts of non-determinism that are still common. The most obvious among these is timing. The industry long ago gave up on the idea that a program should take the same amount of time every time it runs, because deterministic timing is fundamentally at odds with heuristic performance optimization. Sure enough, most Spectre attacks focus on timing as a way to detect the hidden microarchitectural state of the CPU.\n Some have proposed that we can solve this by making timers inaccurate or adding random noise. However, it turns out that this does not stop attacks; it only makes them slower. If the timer tracks real time at all, then anything you can do to make it inaccurate can be overcome by running an attack multiple times and using statistics to filter out the noise.\n Many security researchers see this as the end of the story. What good is slowing down an attack, if the attack is still possible? Once the attacker gets your private key, it&#39;s game over, right? What difference does it make if it takes them a minute or a month?\n   Our key insight is this: as an attack becomes slower, new techniques become practical to make it even slower still. The goal, then, is to chain together enough techniques that an attack becomes so slow as to be uninteresting.\n Much of cryptography, after all, is technically vulnerable to &#34;brute force&#34; attacks -- technically, with enough time, you can break it. But when the time required is thousands (or even billions) of years, we decide that this is good enough.\n So, what do we do to slow down Spectre attacks to the point of meaninglessness?\n    We do not allow our customers to upload native-code binaries to run on our network. We only accept JavaScript and WebAssembly. Of course, many other languages, like Python, Rust, or even Cobol, can be compiled or transpiled to one of these two formats; t\n......", "posttime": "2020-07-30 02:27:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b89\u5168,security,\u8fdb\u7a0b", "title": "\u7f13\u89e3\u9891\u8c31\u548c\u5176\u4ed6\u5b89\u5168\u5a01\u80c1\uff1aCloudFlare\u5de5\u4f5c\u4eba\u5458\u5b89\u5168\u6a21\u578b", "title_en": "Mitigating Spectre and Other Security Threats: Cloudflare Workers Security Model", "transed": 1, "url": "https://blog.cloudflare.com/mitigating-spectre-and-other-security-threats-the-cloudflare-workers-security-model/", "via": "", "real_tags": ["\u5b89\u5168", "security", "\u8fdb\u7a0b"]}, {"category": "", "categoryclass": "", "imagename": "2d0db135edada03c181734d354a47bc8.jpg", "infoid": 1014984, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f17\u8bae\u9662\u53f8\u6cd5\u673a\u6784\u5c31\u53cd\u5784\u65ad\u6cd5\u4e3e\u884c\u542c\u8bc1\u4f1a\u3002\u9996\u5e2d\u6267\u884c\u5b98\u4f5c\u8bc1\uff1a\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c(Facebook)\u3001\u8482\u59c6\u00b7\u5e93\u514b(Tim Cook)(\u82f9\u679c)\u3001\u6770\u592b\u00b7\u8d1d\u4f50\u65af(Jeff Bezos)(\u4e9a\u9a6c\u900a)\u3001\u6851\u8fbe\u5c14\u00b7\u76ae\u67e5\u4f0a(Sundar Pichai)(\u8c37\u6b4c)\u2026\u2026", "note_en": "House Judiciary hearing on Antitrust Law. Testimony from CEOs: Mark Zuckerberg (Facebook) Tim Cook (Apple) Jeff Bezos (Amazon) Sundar Pichai (Google) LIVE at...", "posttime": "2020-07-30 02:27:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e93\u514b,\u8d1d\u4f50\u65af,\u6267\u884c\u5b98,testify,cook", "title": "\u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\u3001\u8482\u59c6\u00b7\u5e93\u514b\u3001\u6770\u592b\u00b7\u8d1d\u4f50\u65af\u3001\u6851\u8fbe\u5c14\u00b7\u76ae\u67e5\u4f0a\u5728\u4f17\u8bae\u9662\u4f5c\u8bc1", "title_en": "CEOs Mark Zuckerberg, Tim Cook, Jeff Bezos,Sundar Pichai Testify Before House", "transed": 1, "url": "https://www.youtube.com/watch?v=1s1uWo1_bzg", "via": "", "real_tags": ["\u5e93\u514b", "\u8d1d\u4f50\u65af", "\u6267\u884c\u5b98", "testify", "cook"]}, {"category": "", "categoryclass": "", "imagename": "6a1649c1a5ade694b4fc83dd6a825634.jpeg", "infoid": 1014983, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u6bcd\u677f(Motherboard)\u5bf9\u5de5\u4f1a\u5b98\u5458\u7684\u91c7\u8bbf\u548c\u5f53\u5730\u5404\u79cd\u65b0\u95fb\u62a5\u9053\uff0c\u5168\u56fd\u5404\u5730\u7684\u90ae\u5c40\u90fd\u5728\u5927\u5e45\u524a\u51cf\u5de5\u4f5c\u65f6\u95f4-\u5305\u62ec\u4e00\u5929\u4e2d\u6700\u7e41\u5fd9\u7684\u65f6\u95f4-\u51e0\u4e4e\u6ca1\u6709\u901a\u77e5\uff0c\u8fd9\u662f\u53e6\u4e00\u9879\u7a81\u7136\u7684\u6210\u672c\u8282\u7ea6\u63aa\u65bd\u3002\u7f8e\u56fd\u90ae\u653f\u603b\u5c40\u8fd8\u8ba1\u5212\u4ec5\u63d0\u524d\u4e09\u5468\u901a\u77e5\u5c31\u5b8c\u5168\u5173\u95ed\u4e00\u4e9b\u529e\u4e8b\u5904\uff0c\u8fd9\u5f88\u53ef\u80fd\u8fdd\u53cd\u4e86\u8054\u90a6\u6cd5\u5f8b\uff0c\u4f46\u4f3c\u4e4e\u6b63\u5728\u8d70\u56de\u5934\u8def\u3002\n\u8fd9\u4e9b\u7a81\u5982\u5176\u6765\u7684\u53d8\u5316\u662f\u65b0\u4efb\u90ae\u653f\u603b\u5c40\u5c40\u957f\u8def\u6613\u65af\u00b7\u5fb7\u4e54\u4f0a(Louis DeJoy)\u5236\u5b9a\u7684\u4e00\u7cfb\u5217\u653f\u7b56\u7684\u4e00\u90e8\u5206\u3002\u5fb7\u4e54\u4f0a\u662f\u7279\u6717\u666e\u7684\u6350\u8d60\u8005\uff0c\u5728\u4ed6\u7684\u79c1\u8425\u7269\u6d41\u516c\u53f8\u65b0\u54c1\u79cd\u7269\u6d41(New Bed\u7269\u6d41)\u6709\u53cd\u5de5\u4f1a\u884c\u4e3a\u7684\u5386\u53f2\u3002\u8fd9\u4e9b\u653f\u7b56\u8868\u9762\u4e0a\u662f\u5173\u4e8e\u8d22\u653f\u8d23\u4efb\uff0c\u4f46\u4e5f\u5bfc\u81f4\u4e86\u5168\u56fd\u5404\u5730\u7684\u90ae\u4ef6\u5ef6\u8bef\uff0c\u5e76\u8ba9\u90ae\u653f\u5de5\u4eba\u62c5\u5fc3\u4ed6\u4eec\u4e0d\u518d\u88ab\u5141\u8bb8\u4ece\u4e8b\u81ea\u5df1\u7684\u5de5\u4f5c\u3002\u8bb8\u591a\u90ae\u653f\u5458\u5de5\u8fd8\u8ba4\u4e3a\uff0c\u8fd9\u4e9b\u53d8\u5316\u53ea\u4f1a\u8ba9\u90ae\u5c40\u7684\u8d22\u52a1\u72b6\u51b5\u53d8\u5f97\u66f4\u7cdf\u3002\n\u897f\u5f17\u5409\u5c3c\u4e9a\u5dde\u514b\u62c9\u514b\u65af\u5821\u7684\u7f8e\u56fd\u90ae\u653f\u5de5\u4eba\u5de5\u4f1a\u5730\u65b93264\u7684\u4e00\u540d\u7ba1\u7406\u4eba\u5458\u4f0a\u4e3d\u838e\u767d\u00b7\u5e93\u5357(Elizabeth Coonan)\u8bf4\uff0c\u201c\u5f88\u591a\u4e8b\u60c5\u90fd\u662f\u5728\u5f88\u5c11\u6216\u6839\u672c\u6ca1\u6709\u6c9f\u901a\u7684\u60c5\u51b5\u4e0b\u843d\u5230\u6211\u4eec\u8eab\u4e0a\u7684\u3002\u201d\u201c\u4ed6\u4eec(\u529e\u516c\u5ba4)\u5173\u95ed\u7684\u65f6\u95f4\u662f\u4ed6\u4eec\u505a\u5f88\u591a\u751f\u610f\u7684\u65f6\u5019\u3002\u201d\n\u5f53\u88ab\u95ee\u53ca\u5de5\u65f6\u51cf\u5c11\u548c\u5173\u95ed\u65f6\uff0cUSPS\u53d1\u8a00\u4ebaKim Frum\u63d0\u4f9b\u4e86\u4e0eUSPS\u6700\u8fd1\u51e0\u5468\u5411\u5927\u591a\u6570\u56fd\u5bb6\u5a92\u4f53\u8be2\u95eeUSPS\u524a\u51cf\u6210\u672c\u63aa\u65bd\u76f8\u540c\u7684\u4e66\u9762\u58f0\u660e\u3002\u8fd9\u4efd\u58f0\u660e\u4f7f\u7528\u4e86\u5bbd\u6cdb\u7684\u8bed\u8a00\uff0c\u79f0\u201c\u5236\u5b9a\u4e00\u9879\u5546\u4e1a\u8ba1\u5212\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u7684\u8d22\u52a1\u7a33\u5b9a\uff0c\u5e76\u80fd\u591f\u7ee7\u7eed\u5411\u6240\u6709\u7f8e\u56fd\u4eba\u63d0\u4f9b\u53ef\u9760\u3001\u8d1f\u62c5\u5f97\u8d77\u3001\u5b89\u5168\u53ef\u9760\u7684\u90ae\u4ef6\u548c\u5305\u88f9\u9012\u9001\uff0c\u4f5c\u4e3a\u56fd\u5bb6\u5173\u952e\u57fa\u7840\u8bbe\u65bd\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u201d\u7136\u540e\uff0cFrum\u63d0\u4f9b\u4e86\u4e00\u4e2a\u94fe\u63a5\uff0c\u6307\u5411DeJoy\u540c\u6837\u542b\u7cca\u7684\u201c\u5353\u8d8a\u8fd0\u8425\u58f0\u660e\u201d\u3002\u5f53\u88ab\u95ee\u53ca\u5173\u95ed\u7684\u7ec6\u8282\u65f6\uff0c\u5f17\u9c81\u59c6\u8868\u793a\uff0c\u5979\u4e0d\u80fd\u63d0\u4f9b\u4efb\u4f55\u8fdb\u4e00\u6b65\u7684\u4fe1\u606f\u3002\n\u56e0\u6b64\uff0c\u5f88\u96be\u5168\u9762\u4e86\u89e3\u5168\u56fd31,322\u5bb6\u90ae\u5c40\u96f6\u552e\u70b9\u4e2d\u6709\u591a\u5c11\u53d7\u5230\u65b0\u65f6\u95f4\u7684\u5f71\u54cd\u3002Coogan\u544a\u8bc9Motherboard\uff0c\u5728\u5979\u6240\u5728\u7684\u897f\u5f17\u5409\u5c3c\u4e9a\u5dde\u5730\u533a\uff0c26\u4e2a\u529e\u516c\u5ba4\u6b63\u88ab\u8feb\u5c06\u5de5\u4f5c\u65e5\u5178\u578b\u76848\u5c0f\u65f6\u5de5\u4f5c\u65f6\u95f4\u51cf\u5c11\u5230\u6bcf\u59294\u5c0f\u65f6\u4ee5\u4e0b\u3002\u53e6\u670931\u5bb6\u90ae\u5c40\u88ab\u8feb\u5728\u5348\u9910\u65f6\u95f4\u5173\u95ed\uff0c\u8fd9\u901a\u5e38\u662f\u90ae\u5c40\u4e00\u5929\u4e2d\u6700\u7e41\u5fd9\u7684\u65f6\u95f4\u4e4b\u4e00\u3002\u65b0\u6cfd\u897f\u5dde\u5357\u90e8APWU Local 526\u7684\u5546\u4e1a\u4ee3\u7406\u5f17\u5170\u514b\u00b7\u535a\u6797\u683c(Frank Bollinger)\u544a\u8bc9Motherboard\uff0c\u4ed6\u6240\u5728\u5730\u533a\u768410\u5bb6\u529e\u516c\u5ba4\u6b63\u5728\u4ece\u5de5\u4f5c\u65e5\u76849\u4e2a\u5f00\u653e\u65f6\u95f4\u51cf\u5c11\u52304\u4e2a\uff0c\u53e6\u670930\u4e2a\u529e\u516c\u5ba4\u8ba1\u5212\u5728\u5348\u9910\u65f6\u95f4\u5173\u95ed\u3002\n\u4f60\u5728\u90ae\u5c40\u5de5\u4f5c\u5417\uff1f\u4f60\u4eec\u90ae\u5c40\u7684\u5de5\u4f5c\u65f6\u95f4\u51cf\u5c11\u4e86\u5417\uff1f\u6709\u6ca1\u6709\u5176\u4ed6\u53d8\u5316\u8ba9\u4f60\u66f4\u96be\u505a\u597d\u4f60\u7684\u5de5\u4f5c\uff1f\u8054\u7cfb\u4e9a\u4f26\u00b7\u6208\u767b(Aaron Gordon)\uff0c\u7535\u5b50\u90ae\u4ef6\uff1aaaron.gordon@vice.com\u3002\n\u8fd910\u4e2a\u529e\u4e8b\u5904\u4e2d\u5305\u62ec\u4e1c\u5361\u59c6\u767b(East Camden)\u7684\u4e00\u4e2a\u529e\u4e8b\u5904\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f4e\u6536\u5165\u793e\u533a\uff0c\u6709\u8bb8\u591a\u6ca1\u6709\u94f6\u884c\u8d26\u6237\u7684\u5c45\u6c11\uff0c\u4ed6\u4eec\u4f9d\u8d56\u90ae\u5c40\u7684\u6c47\u7968\u5904\u7406\u3002\u6ce2\u6797\u683c\u8bf4\uff0c\u5728\u6708\u521d\uff0c\u8be5\u529e\u516c\u5ba4\u901a\u5e38\u6bcf\u5929\u5904\u7406\u201c\u8fdc\u8fdc\u8d85\u8fc7\u201d3.5\u4e07\u7f8e\u5143\u7684\u6c47\u7968\uff0c\u73b0\u5728\u7531\u4e8e\u5de5\u4f5c\u65f6\u95f4\u7684\u51cf\u5c11\uff0c\u8fd9\u4e00\u6570\u5b57\u5904\u4e8e\u5371\u9669\u4e4b\u4e2d\u3002\n\u201c\u5982\u679c\u6211\u5230\u4e0d\u4e86\u90ae\u5c40\uff0c\u201d\u6ce2\u6797\u683c\u8bf4\uff0c\u201c\u6211\u5c31\u4e0d\u7528\u90ae\u5c40\u4e86\u3002\u201d\n\u9664\u4e86\u897f\u5f17\u5409\u5c3c\u4e9a\u5dde\u548c\u65b0\u6cfd\u897f\u5dde\uff0c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u4f2f\u514b\u5229\u3001\u963f\u62c9\u65af\u52a0\u5f7c\u5f97\u5821\u3001\u4fc4\u4ea5\u4fc4\u5dde\u626c\u65af\u6566\u548c\u7530\u7eb3\u897f\u5dde\u8bfa\u514b\u65af\u7ef4\u5c14\u7684\u90ae\u5c40\u4e5f\u5ba3\u5e03\u4e86\u7c7b\u4f3c\u7684\u51cf\u5c11\u5de5\u4f5c\u65f6\u95f4\u7684\u8ba1\u5212\u3002\u4e3b\u677f\u5ba1\u67e5\u7684\u6240\u6709\u53d8\u5316\u90fd\u662f\u901a\u8fc7\u6302\u5728\u90ae\u5c40\u95e8\u4e0a\u7684\u724c\u5b50\u5ba3\u5e03\u7684\u3002\n\u5468\u4e8c\uff0c\u7f8e\u56fd\u897f\u5f17\u5409\u5c3c\u4e9a\u5dde\u53c2\u8bae\u5458\u4e54\u00b7\u66fc\u94a6(Joe Manin)\u81f4\u4fe1\u5fb7\u4e54\u4f0a\uff0c\u79f0\u201c\u6211\u6240\u5728\u5dde\u548c\u5168\u56fd\u201d\u7684\u90ae\u5c40\u201c\u5373\u5c06\u5173\u95ed\u6216\u5927\u5e45\u51cf\u5c11\u201d\u90ae\u5c40\u7684\u5de5\u4f5c\u65f6\u95f4\u548c\u670d\u52a1\u3002\u66fc\u94a6\u7684\u4fe1\u6307\u51fa\uff0c\u201c\u8fd9\u53ef\u80fd\u4f1a\u8fdd\u53cd\u8054\u90a6\u6cd5\u5f8b\u548c\u7f8e\u56fd\u90ae\u653f(USPS)\u7684\u89c4\u5b9a\uff0c\u540e\u8005\u89c4\u5b9a\u4e86\u4e00\u4e2a\u5177\u4f53\u7684\u5173\u95ed\u8fc7\u7a0b\uff0c\u9700\u8981\u81f3\u5c11120\u5929\u7684\u901a\u77e5\u201d\uff0c\u8fd9\u4e0e\u76ee\u524d\u8ba1\u5212\u4e0b\u7684\u4e09\u5468\u65f6\u95f4\u76f8\u53bb\u751a\u8fdc\u3002\u5230\u5468\u4e8c\u665a\u4e0a\uff0c\u5e93\u5357\u544a\u8bc9\u6bcd\u677f\u90ae\u5c40\u5df2\u7ecf\u201c\u6536\u56de\u4e86\u5173\u95ed\u90ae\u5c40\u7684\u7acb\u573a\u201d\uff0c\u4ed6\u4eec\u201c\u76ee\u524d\u6b63\u5728\u91cd\u65b0\u8bc4\u4f30\u60c5\u51b5\u201d\u3002\n\u8fd9\u4e0d\u662f\u7f8e\u56fd\u90ae\u653f\u7b2c\u4e00\u6b21\u5728\u6ca1\u6709\u9075\u5faa\u6cd5\u5f8b\u89c4\u5b9a\u7684\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u7a81\u7136\u5173\u95ed\u90ae\u5c40\u5730\u70b9\u30022011\u5e74\uff0c\u90ae\u653f\u7ba1\u7406\u59d4\u5458\u4f1a(Postal Regulatory Commission)\u4e3b\u5e2d\u9732\u4e1d\u00b7\u6208\u5fb7\u97e6(Ruth Goldway)\u5728\u81f4\u65f6\u4efb\u90ae\u653f\u7f72\u7f72\u957f\u5e15\u7279\u91cc\u514b\u00b7\u591a\u7eb3\u970d(Patrick Donahoe)\u7684\u4e00\u5c01\u4fe1\u4e2d\u6297\u8bae\u79f0\uff0c\u7f8e\u56fd\u90ae\u653f\u603b\u5c40\u5728\u6ca1\u6709\u6309\u7167\u6cd5\u5f8b\u8981\u6c42\u901a\u77e5\u4e2d\u534e\u4eba\u6c11\u5171\u548c\u56fd\u7684\u60c5\u51b5\u4e0b\u5173\u95ed\u4e86\u5168\u56fd\u529e\u4e8b\u5904\u3002\n\u5c31\u5e93\u5357\u800c\u8a00\uff0c\u5979\u4e0d\u8ba4\u4e3a\u5fb7\u4e54\u4f0a-\u57286\u6708\u4efd\u6210\u4e3a\u90ae\u653f\u603b\u5c40\u5c40\u957f\u4e4b\u524d\u4ece\u672a\u4e3a\u7f8e\u56fd\u90ae\u653f\u603b\u5c40\u5de5\u4f5c\u8fc7-\u6b63\u5728\u8ba9\u7f8e\u56fd\u90ae\u653f\u603b\u5c40\u8d70\u4e0a\u6210\u529f\u7684\u9053\u8def\uff0c\u4e5f\u4e0d\u8ba4\u4e3a\u4ed6\u7684\u6210\u672c\u524a\u51cf\u63aa\u65bd\u4f1a\u8d77\u5230\u4efb\u4f55\u79ef\u6781\u7684\u4f5c\u7528\u3002\u5979\u8bf4\uff1a\u201c\u780d\u6740\u548c\u9ed1\u5ba2\u653b\u51fb\u5df2\u7ecf\u88ab\u5c1d\u8bd5\u8fc7\u4e86\u3002\u201d\u201c\u8fd9\u662f\u884c\u4e0d\u901a\u7684\u3002\u201d\n\u7b7e\u7f72\u201c\u8272\u60c5\u901a\u8baf\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81ea\u201c\u8272\u60c5\u901a\u8baf\u201d\u7684\u7535\u5b50\u901a\u8baf\uff0c\u5176\u4e2d\u6709\u65f6\u53ef\u80fd\u5305\u62ec\u5e7f\u544a\u6216\u8d5e\u52a9\u5185\u5bb9\u3002", "note_en": "Post offices around the country are slashing their hours\u2014including during the busiest times of day\u2014with little notice as yet another abrupt cost-saving measure, according to interviews with union officials conducted by Motherboard and various local news reports. The USPS had also planned to close some offices entirely with just three weeks\u2019 notice, likely in violation of federal law, but appears to be backtracking.\n   The sudden changes come as part of a slate of policies instituted by the new Postmaster General Louis DeJoy, a Trump donor with  a history of anti-union practices at his private logistics firm New Breed Logistics, that are ostensibly about fiscal responsibility but have  contributed to mail being delayed across the country and have postal workers concerned they\u2019re no longer being allowed to do their jobs. Many postal employees also believe the changes will only make the post office\u2019s financial situation worse.\n  \u201cA lot of this has been dropped on us with little or no communication,\u201d said Elizabeth Coonan, a steward for the American Postal Workers Union Local 3264 in the Clarksburg, West Virginia area. \u201cThe times that they\u2019re slating [the offices] to close is when they do a lot of business.\u201d\n   When asked about the hours reductions and closures, USPS spokesperson Kim Frum provided the same written statement the USPS has been providing to most national media inquiries over recent weeks regarding the USPS\u2019s cost-cutting measures. The statement uses broad language about \u201cdeveloping a business plan to ensure that we will be financially stable and able to continue to provide dependable, affordable, safe and secure delivery of mail and packages to all Americans as a vital part of the nation\u2019s critical infrastructure.\u201d Frum then provided a link to DeJoy\u2019s similarly vague \u201c Statement on Operational Excellence.\u201d Pressed for details on the closures, Frum said she could not provide any further information.\n  As a result, it\u2019s difficult to get a complete picture of how many of the post office\u2019s  31,322 retail locations nationwide are impacted by the new hours. Coogan told Motherboard that in her region of West Virginia 26 offices are being forced to reduce hours from the typical eight-hour weekday schedule to under four hours per day. Another 31 offices are being forced to close during lunch hours, typically among the busiest times of day at a post office. Frank Bollinger, the business agent for APWU Local 526 in southern New Jersey, told Motherboard that 10 offices in his region are dropping from nine open hours per weekday to four, while another 30 are slated to close during lunch hours.\n Do you work for the post office? Are your post office\u2019s hours being reduced? Have other changes made it harder for you to do your job? Contact Aaron Gordon at  aaron.gordon@vice.com.\n  Included in those 10 offices is one in East Camden, a low income neighborhood with many unbanked residents who rely on the post office\u2019s money order processing. Bollinger says that at the beginning of the month, that office typically fields \u201cwell above\u201d $35,000 in money orders per day, which is now in jeopardy thanks to the reduced hours.\n  \u201cIf I can\u2019t make it to the post office,\u201d Bollinger said, \u201cI\u2019m not going to use the post office.\u201d\n   In addition to West Virginia and New Jersey, post offices in  Berkeley, California;  Petersburg, Alaska,  Youngstown, Ohio, and  Knoxville, Tennessee have announced similar plans to reduce hours. All of the changes Motherboard has reviewed were announced only by signs hanging on the post office doors.\n   On Tuesday, U.S. Senator Joe Manchin of West Virginia  sent a letter to DeJoy regarding the \u201cimminent closure or significant reduction in hours and services\u201d as post offices \u201cin my state and across the nation.\u201d Manchin\u2019s letter noted that \u201cthis would likely be a violation of both federal law and United States Postal Service (USPS) rules that prescribe a specific closure process which requires, at minimum, 120 days\u2019 notice,\u201d a far cry from the three weeks under the current plan. By Tuesday evening, Coonan told Motherboard the post office had \u201cwalked back its position on closing the offices\u201d and they are \u201ccurrently reevaluating the situation.\u201d\n  This is not the first time the USPS has moved to abruptly close post office locations without following the legally prescribed procedures for doing so. In 2011, the Postal Regulatory Commission Chairman Ruth Goldway  protested in a letter to then-Postmaster General Patrick Donahoe that the USPS was closing offices nationwide without informing the PRC as they are required to do by law.\n  For her part, Coonan doesn\u2019t think DeJoy\u2014who has never worked for the USPS before becoming postmaster general in June\u2014is putting the USPS on a path to success or that his cost-cutting measures will do anything positive. \u201cSlashing and hacking has already been tried,\u201d she said. \u201cIt\u2019s not going to work.\u201d\n  By signing up to the VICE newsletter you agree to receive electronic communications from VICE that may sometimes include advertisements or sponsored content.", "posttime": "2020-07-30 02:26:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u90ae\u653f\u603b\u5c40,plans,\u90ae\u5c40", "title": "\u7f8e\u56fd\u90ae\u653f\u603b\u5c40\u8ba1\u5212\u5927\u5e45\u524a\u51cf\u8bb8\u591a\u90ae\u5c40\u7684\u5de5\u4f5c\u65f6\u95f4\uff0c\u5e0c\u671b\u8282\u7701\u4e00\u7f8e\u5143", "title_en": "USPS Plans to Slash Hours at Many Post Offices, Hoping to Save a Buck", "transed": 1, "url": "https://www.vice.com/en_us/article/wxq47q/usps-plans-to-slash-hours-at-many-post-offices-hoping-to-save-a-buck", "via": "", "real_tags": ["\u7f8e\u56fd", "\u90ae\u653f\u603b\u5c40", "plans", "\u90ae\u5c40"]}, {"category": "", "categoryclass": "", "imagename": "e9942900c16d2009501ea1c65e417d35.png", "infoid": 1014982, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u4e00\u53f7(Google One)\u662f\u8c37\u6b4c\u7684\u8ba2\u9605\u8ba1\u5212\uff0c\u7528\u4e8e\u8d2d\u4e70\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\u548c\u5b9e\u65f6\u652f\u6301\u3002\u8c37\u6b4c\u4e00\u53f7\u4eca\u5929\u8fdb\u884c\u4e86\u66f4\u65b0\uff0c\u5c06\u4e3a\u5b89\u88c5\u8be5\u5e94\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u4eba\u63d0\u4f9bAndroid\u548ciOS\u8bbe\u5907\u7684\u514d\u8d39\u624b\u673a\u5907\u4efd-\u5373\u4f7f\u4ed6\u4eec\u6ca1\u6709\u4ed8\u8d39\u4f1a\u5458\u3002\u95ee\u9898\u662f\uff1a\u867d\u7136\u8fd9\u9879\u529f\u80fd\u662f\u514d\u8d39\u7684\uff0c\u4f46\u5907\u4efd\u4f1a\u8ba1\u5165\u4f60\u514d\u8d39\u63d0\u4f9b\u768415 GB\u8c37\u6b4c\u5b58\u50a8\u7a7a\u95f4\u3002\u5982\u679c\u4f60\u9700\u8981\u66f4\u591a-\u4f60\u731c\u5230\u4e86-Google One\u4f1a\u5458\u8d44\u683c\uff0c\u53ef\u4ee5\u8d2d\u4e70\u66f4\u591a\u7684\u5b58\u50a8\u7a7a\u95f4\u6216\u5220\u9664\u4f60\u4e0d\u518d\u9700\u8981\u7684\u6570\u636e\u3002100 GB\u7684\u4ed8\u8d39\u4f1a\u5458\u8d77\u6b65\u4ef7\u4e3a\u6bcf\u67081.99\u7f8e\u5143\u3002\n\u53bb\u5e74\uff0c\u4ed8\u8d39\u4f1a\u5458\u5df2\u7ecf\u53ef\u4ee5\u5728Android\u4e0a\u4f7f\u7528\u8fd9\u4e00\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u5c06\u4f60\u7684\u6587\u672c\u3001\u8054\u7cfb\u4eba\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u7167\u7247\u548c\u89c6\u9891\u5b58\u50a8\u5728\u8c37\u6b4c\u7684\u4e91\u4e2d\u3002Android\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u201c\u514d\u8d39\u201d\u5907\u4efd\u3002\u4e00\u65e6Google One\u5e94\u7528\u7a0b\u5e8f\u5728\u4e0d\u4e45\u7684\u5c06\u6765\u5728iOS\u4e0a\u63a8\u51fa\uff0ciOS\u7528\u6237\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5b83\u3002\n\u5728\u8fd9\u6b21\u66f4\u65b0\u4e2d\uff0c\u8c37\u6b4c\u8fd8\u5728Google one\u4e2d\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5b58\u50a8\u7ba1\u7406\u5668\u5de5\u5177\uff0c\u8be5\u5de5\u5177\u53ef\u5728\u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7edc\u4e0a\u4f7f\u7528\uff0c\u5141\u8bb8\u60a8\u6839\u636e\u9700\u8981\u5220\u9664\u6587\u4ef6\u548c\u5907\u4efd\u3002\u4f8b\u5982\uff0c\u8be5\u5de5\u5177\u53ef\u4ee5\u5728\u8c37\u6b4c\u7684\u6240\u6709\u5c5e\u6027\u4e2d\u8fd0\u884c\uff0c\u53ef\u4ee5\u8ba9\u4f60\u5728\u8c37\u6b4c\u786c\u76d8\u5b58\u50a8\u4e2d\u627e\u5230\u5305\u542b\u975e\u5e38\u5927\u7684\u9644\u4ef6\u6216\u5927\u6587\u4ef6\u7684\u7535\u5b50\u90ae\u4ef6\u3002\n\u901a\u8fc7\u8fd9\u4e00\u514d\u8d39\u5907\u4efd\u529f\u80fd\uff0c\u8c37\u6b4c\u663e\u7136\u662f\u60f3\u8ba9\u66f4\u591a\u7684\u4eba\u4f7f\u7528Google One\u3002\u6bd5\u7adf\uff0c15 GB\u7684\u514d\u8d39\u5b58\u50a8\u7a7a\u95f4\u5f88\u5bb9\u6613\u8fbe\u5230(\u8fd9\u662f\u4f60\u5728\u8c37\u6b4c\u4e0a\u7684\u603b\u5b58\u50a8\u7a7a\u95f4\uff0c\u5305\u62ecGmail\u548c\u5176\u4ed6\u670d\u52a1)\uff0c\u82b11.99\u7f8e\u5143\u8d2d\u4e70100 GB\u5e76\u4e0d\u662f\u4e00\u7b14\u5927\u5f00\u652f\uff0c\u7279\u522b\u662f\u5982\u679c\u4f60\u5df2\u7ecf\u662f\u8c37\u6b4c\u751f\u6001\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u4f7f\u7528\u8c37\u6b4c\u7167\u7247(Google Photos)\u7b49\u5e94\u7528\u7a0b\u5e8f\u3002", "note_en": "Google One,  Google\u2019s   subscription program for buying additional storage and live support, is  getting an update today that will bring free phone backups for  Android and iOS devices to anybody who installs the app \u2014 even if they don\u2019t have a paid membership. The catch: while the feature is free, the backups count against your free Google storage allowance of 15GB. If you need more you need \u2014 you guessed it \u2014 a Google One membership to buy more storage or delete data you no longer need. Paid memberships start at $1.99/month for 100GB.\n  Last year, paid members already got access to this feature on  Android,   which stores your texts, contacts, apps, photos and videos in Google\u2019s cloud. The \u201cfree\u201d backups are now available to Android users. iOS users will get access to it once the Google One app rolls out on iOS in the near future.\n   With this update, Google is also introducing a new storage manager tool in Google One, which is available in the app and  on the web, and which allows you to delete files and backups as needed. The tool works across Google properties and lets you find emails with very large attachments or large files in your Google Drive storage, for example.\n With this free backup feature, Google is clearly trying to get more people onto Google One. The free 15GB storage limit is pretty easy to hit, after all (and that\u2019s for your overall storage on Google, including Gmail and other services) and paying $1.99 for 100GB isn\u2019t exactly a major expense, especially if you are already part of the Google ecosystem and use apps like Google Photos already.", "posttime": "2020-07-30 01:11:32", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "google,5g,\u514d\u8d39,android,ios", "title": "\nGoogle One\u73b0\u5728\u5728Android\u548ciOS\u4e0a\u63d0\u4f9b\u6700\u9ad815 GB\u7684\u514d\u8d39\u624b\u673a\u5907\u4efd", "title_en": "\n\t\t\t\tGoogle One now offers free phone backups up to 15GB on Android and iOS\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/07/29/google-one-now-offers-free-phone-backups-up-to-15gb-on-android-and-ios/", "via": "", "real_tags": ["google", "5g", "\u514d\u8d39", "android", "ios"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014981, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5370\u5ea6\u662f\u4e16\u754c\u4e0a\u7b2c\u4e09\u4e2a\u53d7\u707e\u6700\u4e25\u91cd\u7684\u56fd\u5bb6\uff0c\u4f46\u6709\u4eba\u62c5\u5fc3\uff0c\u7f3a\u4e4f\u6d4b\u8bd5\u53ef\u80fd\u610f\u5473\u7740\u771f\u5b9e\u7684\u6570\u5b57\u8981\u9ad8\u5f97\u591a\u3002\n\u6839\u636e\u8be5\u5e02\u59d4\u6258\u8fdb\u884c\u7684\u4e00\u9879\u7814\u7a76\uff0c\u5c45\u4f4f\u5728\u5b5f\u4e70\u8d2b\u6c11\u7a9f\u7684\u4eba\u4e2d\u6709\u8d85\u8fc7\u4e00\u534a\u7684\u4eba\u611f\u67d3\u4e86\u51a0\u72b6\u75c5\u6bd2\uff0c\u8fd9\u5f15\u53d1\u4e86\u4eba\u4eec\u5bf9\u5370\u5ea6\u5b98\u65b9\u75c5\u4f8b\u6570\u5b57\u7684\u65b0\u6000\u7591\u3002\n\u5370\u5ea6\u5df2\u7ecf\u662f\u4ec5\u6b21\u4e8e\u7f8e\u56fd\u548c\u5df4\u897f\u7684\u7b2c\u4e09\u5927\u75ab\u60c5\u56fd\u5bb6\uff0c\u6709\u8fd1150\u4e07\u4f8b\u75c5\u4f8b\uff0c\u5c3d\u7ba1\u4e13\u5bb6\u6b64\u524d\u66fe\u8868\u793a\uff0c\u7f3a\u4e4f\u68c0\u6d4b\u53ef\u80fd\u610f\u5473\u7740\u771f\u5b9e\u7684\u75c5\u4f8b\u6570\u5b57\u8981\u9ad8\u5f97\u591a\u3002\n\u5468\u4e8c\u516c\u5e03\u7684\u8fd9\u9879\u7814\u7a76\u79f0\uff0c\u5b5f\u4e70\u5e02\u653f\u5e9c\u968f\u673a\u62bd\u53d66936\u4eba\u8fdb\u884c\u8840\u6db2\u68c0\u6d4b\uff0c\u53d1\u73b057%\u7684\u8d2b\u6c11\u7a9f\u5c45\u6c11\u548c16%\u7684\u975e\u8d2b\u6c11\u7a9f\u5c45\u6c11\u643a\u5e26\u75c5\u6bd2\u6297\u4f53\u3002\n\u5b5f\u4e70\u5927\u7ea640%\u7684\u4eba\u53e3\u751f\u6d3b\u5728\u8d2b\u6c11\u7a9f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u62a5\u544a\u7684\u611f\u67d3\u4eba\u6570\u521a\u521a\u8d85\u8fc711\u4e07\u4eba\uff0c\u6b7b\u4ea1\u4eba\u6570\u8d85\u8fc76000\u4eba\u3002\n\u8fd9\u5ea7\u62e5\u67092000\u4e07\u4eba\u53e3\u7684\u57ce\u5e02\u662f\u5370\u5ea6\u6700\u5927\u7684\u8d2b\u6c11\u7a9f\u8fbe\u62c9\u7ef4(Dharavi)\u7684\u6240\u5728\u5730\uff0c\u4f30\u8ba1\u6709100\u4e07\u4eba\u5c45\u4f4f\u5728\u90a3\u91cc\u3002\u4f46\u8fd9\u4e2a\u5e9e\u5927\u8d2b\u6c11\u7a9f\u7684\u6b7b\u4ea1\u4eba\u6570\u5e76\u6ca1\u6709\u7206\u70b8\uff0c\u5f53\u5730\u5b98\u5458\u8868\u793a\uff0c\u4ed6\u4eec\u904f\u5236\u75c5\u6bd2\u4f20\u64ad\u7684\u79ef\u6781\u52aa\u529b\u662f\u6709\u6548\u7684\u3002\n\u7814\u7a76\u79f0\uff0c\u8c03\u67e5\u7ed3\u679c\u8868\u660e\uff0c\u65e0\u75c7\u72b6\u611f\u67d3\u201c\u53ef\u80fd\u5728\u6240\u6709\u611f\u67d3\u4e2d\u5360\u5f88\u9ad8\u6bd4\u4f8b\u201d\uff0c\u8fd8\u8868\u660e\u75c5\u6bd2\u6b7b\u4ea1\u7387\u53ef\u80fd\u201c\u975e\u5e38\u4f4e\u201d\u3002\n\u5728\u5b5f\u4e70\u8c03\u67e5\u7684\u4e00\u5468\u524d\uff0c\u653f\u5e9c\u59d4\u6258\u8fdb\u884c\u7684\u4e00\u9879\u6297\u4f53\u7814\u7a76\u8868\u660e\uff0c\u5728\u62e5\u67092000\u4e07\u4eba\u53e3\u7684\u9996\u90fd\u65b0\u5fb7\u91cc\uff0c\u8fd1\u56db\u5206\u4e4b\u4e00\u7684\u4eba\u611f\u67d3\u4e86\u8fd9\u79cd\u75c5\u6bd2\u3002", "note_en": "India is the third-worst hit country in the world, but there are concerns a lack of testing could mean the true figure is far higher\n    Over half the people living in the slums of Mumbai have had the coronavirus, according to a city-commissioned study that raises fresh doubts about India\u2019s official case numbers.\n India is already the third-worst hit country after the US and Brazil, with nearly 1.5 million cases, though experts have previously said the lack of testing could mean the true tally is much higher.\n  Blood tests on 6,936 randomly selected people conducted by Mumbai\u2019s city authorities found that 57% of slum-dwellers and 16% of non-slum residents had virus antibodies, the study released on Tuesday said.\n  Mumbai, where about 40% of the population lives in slums, has reported just over 110,000 infections and more than 6,000 deaths so far.\n The city of 20 million people is home to India\u2019s largest slum, Dharavi, where an estimated million people live. But deaths in the sprawling slum have not exploded, with local officials saying their aggressive efforts to stem the spread of the virus has been effective.\n The survey results suggested asymptomatic infections were \u201clikely to be a high proportion of all infections\u201d and also indicated the virus death rate was likely to be \u201cvery low\u201d, the study said.\n The Mumbai survey came a week after an antibody study commissioned by the government suggested that almost a quarter of people in the capital New Delhi, home to 20 million people, have had the virus.", "posttime": "2020-07-30 01:09:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u51a0\u72b6\u75c5\u6bd2,\u75c5\u6bd2,\u5c45\u6c11,slum", "title": "\u5b5f\u4e70\u4e00\u534a\u7684\u8d2b\u6c11\u7a9f\u5c45\u6c11\u611f\u67d3\u4e86\u51a0\u72b6\u75c5\u6bd2-\u7814\u7a76", "title_en": "Half of Mumbai\u2019s slum residents have had coronavirus \u2013 study", "transed": 1, "url": "https://www.theguardian.com/world/2020/jul/29/half-of-mumbais-slum-residents-have-had-coronavirus-study", "via": "", "real_tags": ["\u51a0\u72b6\u75c5\u6bd2", "\u75c5\u6bd2", "\u5c45\u6c11", "slum"]}, {"category": "", "categoryclass": "", "imagename": "02b4daece8e341ab41eb1b3aff4895b8.jpg", "infoid": 1014980, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u540d\u8054\u90a6\u6cd5\u5b98\u547d\u4ee4\u7ebd\u7ea6\u5dde\u8fc5\u901f\u5411\u56db\u540d\u4f18\u6b65\u548cLyft\u53f8\u673a\u652f\u4ed8\u5931\u4e1a\u6551\u6d4e\u91d1\uff0c\u8fd9\u4e9b\u53f8\u673a\u81ea3\u6708\u62164\u6708\u4ee5\u6765\u4e00\u76f4\u5728\u7b49\u5f85\u5931\u4e1a\u6551\u6d4e\u91d1\u3002\u7f8e\u56fd\u7ebd\u7ea6\u51fa\u79df\u8f66\u5de5\u4eba\u8054\u76df(New York Taxi Workers Alliance)\u65e9\u57285\u6708\u4efd\u5c31\u8fd9\u4e00\u95ee\u9898\u63d0\u8d77\u4e86\u8bc9\u8bbc\uff0c\u8be5\u8054\u76df\u8868\u793a\uff0c\u8fd9\u9879\u88c1\u51b3\u6700\u7ec8\u53ef\u80fd\u4f1a\u5e2e\u52a9\u6570\u5343\u540d\u5904\u4e8e\u7c7b\u4f3c\u60c5\u51b5\u7684\u53f8\u673a\u3002\n\u4f18\u6b65\u548cLyft\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u8fa9\u79f0\uff0c\u5176\u53f8\u673a\u662f\u72ec\u7acb\u627f\u5305\u5546\uff0c\u800c\u4e0d\u662f\u5458\u5de5\u3002\u4f46\u8fd9\u4e00\u7acb\u573a\u9762\u4e34\u7740\u8d8a\u6765\u8d8a\u5927\u7684\u538b\u529b\u3002\u81ea2016\u5e74\u4ee5\u6765\uff0c\u7ebd\u7ea6\u52b3\u5de5\u90e8(New York Department Of Labor)\u4e00\u76f4\u8ba4\u4e3a\uff0c\u7f51\u7ea6\u8f66\u53f8\u673a\u662f\u4e3a\u4e86\u5931\u4e1a\u4fdd\u9669\u76ee\u7684\u7684\u96c7\u5458\u3002\u4f46\u4f18\u6b65\u548cLyft\u4e00\u76f4\u5728\u62d6\u5ef6\uff0c\u672a\u80fd\u63d0\u4f9b\u5de5\u8d44\u6570\u636e\uff0c\u4f7f\u8be5\u673a\u6784\u80fd\u591f\u8ba1\u7b97\u6bcf\u4e2a\u5de5\u4eba\u7684\u5931\u4e1a\u6551\u6d4e\u91d1\u3002\n\u56e0\u6b64\uff0c\u5f53\u4f18\u6b65(Uber)\u548cLyft\u53f8\u673a\u56e0\u6d41\u611f\u800c\u88ab\u8feb\u5931\u4e1a\u65f6\uff0c\u4e00\u4e9b\u4eba\u88ab\u544a\u77e5\u4ed6\u4eec\u4e0d\u7b26\u5408\u8d44\u683c\uff0c\u56e0\u4e3a\u5dde\u6570\u636e\u663e\u793a\u4ed6\u4eec\u7684\u6536\u5165\u4e3a\u96f6\u3002\u5373\u4f7f\u5728\u63d0\u4ea4\u4e861099\u4efd\u663e\u793a\u6536\u5165\u7684\u7eb3\u7a0e\u7533\u62a5\u8868\u540e\uff0c\u5de5\u4eba\u4eec\u4ecd\u7136\u88ab\u5265\u593a\u4e86\u798f\u5229\u3002\n\u5176\u4e2d\u4e00\u540d2019\u5e74\u5728\u8d5b\u767e\u5473\u5de5\u4f5c\u7684\u539f\u544a\u6bcf\u5468\u83b7\u5f97155\u7f8e\u5143\u7684\u798f\u5229-\u8fd9\u53cd\u6620\u4e86\u4ed6\u5728\u8d5b\u767e\u5473\u7684\u6536\u5165\uff0c\u4f46\u4e0d\u662f\u4ed6\u4f5c\u4e3a\u4f18\u6b65(Uber)\u548cLyft\u53f8\u673a\u7684\u6536\u5165\u3002\n\u5728\u5468\u4e8c\u7684\u88c1\u51b3\u4e2d\uff0c\u6cd5\u5b98\u62c9\u5c1a\u6069\u00b7\u5fb7\u963f\u897f\u00b7\u970d\u5c14(LaShann DeArcy Hall)\u76f4\u622a\u4e86\u5f53\u5730\u7ad9\u5728\u53f8\u673a\u4e00\u8fb9\u3002\u5979\u627f\u8ba4\uff0c\u4f18\u6b65\u548cLyft\u56e0\u672a\u80fd\u5411\u5dde\u653f\u5e9c\u63d0\u4f9b\u5fc5\u8981\u7684\u6570\u636e\u800c\u627f\u62c5\u4e86\u90e8\u5206\u8d23\u4efb\u3002\u4f46\u5979\u8868\u793a\uff0c\u56fd\u5bb6\u4ecd\u6709\u4e49\u52a1\u8fc5\u901f\u652f\u4ed8\u798f\u5229-\u5fc5\u8981\u65f6\u4f7f\u7528\u5de5\u4eba\u81ea\u5df1\u63d0\u4f9b\u7684\u6570\u636e\u3002\n\u4e3a\u4e86\u786e\u4fdd\u672a\u6765\u8fc5\u901f\u652f\u4ed8\u798f\u5229\uff0c\u970d\u5c14\u547d\u4ee4\u7ebd\u7ea6\u52b3\u5de5\u90e8(New York Department Of Labor)\u6210\u7acb\u4e00\u4e2a\u753135\u540d\u6210\u5458\u7ec4\u6210\u7684\u5de5\u4f5c\u7ec4\uff0c\u4ee5\u52a0\u5feb\u53eb\u8f66\u53f8\u673a\u7684\u7533\u8bf7\uff0c\u8fd9\u4e9b\u53f8\u673a\u5728\u8be5\u673a\u6784\u7684\u4e0a\u8bc9\u8fc7\u7a0b\u4e2d\u4e00\u76f4\u4e3e\u6b65\u7ef4\u8270\u3002\u5979\u547d\u4ee4\u8be5\u673a\u6784\u572845\u5929\u5185\u6e05\u7406\u79ef\u538b\u7684\u53eb\u8f66\u53f8\u673a\u7533\u8bf7\uff0c\u7136\u540e\u572814\u5929\u5185\u5904\u7406\u4efb\u4f55\u65b0\u7684\u7533\u8bf7\u3002\n\u8fd9\u9879\u88c1\u51b3\u662f\u5728\u5931\u4e1a\u7cfb\u7edf\u9762\u4e34\u4e0d\u786e\u5b9a\u6027\u548c\u538b\u529b\u7684\u65f6\u5019\u505a\u51fa\u7684\u3002\u5931\u4e1a\u529e\u516c\u5ba4\u9762\u4e34\u7740\u53f2\u65e0\u524d\u4f8b\u7684\u5931\u4e1a\u7533\u9886\u4eba\u6570\u6fc0\u589e\uff0c\u8fd9\u4e9b\u4eba\u56e0\u4e3a\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u800c\u5931\u53bb\u4e86\u5de5\u4f5c\u3002\u4e00\u4e9b\u5dde\u5931\u4e1a\u529e\u516c\u5ba4\u5df2\u7ecf\u4e89\u5148\u6050\u540e\u5730\u5bfb\u627eCOBOL\u7a0b\u5e8f\u5458\u6765\u5e2e\u52a9\u4ed6\u4eec\u5347\u7ea7\u4ed6\u4eec\u53e4\u8001\u7684\u5931\u4e1a\u7cfb\u7edf\u3002\n\u6839\u636e3\u6708\u4efd\u901a\u8fc7\u7684CARE\u6cd5\u6848\uff0c\u8bb8\u591a\u5931\u4e1a\u5de5\u4eba\u6709\u6743\u83b7\u5f97\u6bcf\u5468\u989d\u5916600\u7f8e\u5143\u7684\u6551\u6d4e\u91d1\u3002\u4f46\u8fd9\u4e9b\u798f\u5229\u5c06\u4e8e\u672c\u6708\u5e95\u5230\u671f\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u56fd\u4f1a\u662f\u5426\u4f1a\u901a\u8fc7\u7acb\u6cd5\uff0c\u5c06\u589e\u52a0\u7684\u798f\u5229\u5ef6\u957f\u52307\u6708\u4efd\u4ee5\u540e\u3002", "note_en": "A federal judge has ordered the state of New York to quickly pay unemployment benefits to four Uber and Lyft drivers who have been waiting for the payments since March or April. The\u00a0New York Taxi Workers Alliance, which filed a lawsuit over the issue back in May, says that the ruling could ultimately help thousands of drivers in similar situations.\n Uber and Lyft have long argued that its drivers are independent contractors, not employees.\u00a0That stance has come under increasing pressure. Since 2016, the New York Department of Labor has held that ride-hail drivers were employees for purposes of unemployment insurance. But Uber and Lyft have dragged their feet, failing to provide wage data that would enable the agency to calculate unemployment payments for each worker.\n  As a result, when Uber and Lyft drivers forced out of work by the pandemic applied for unemployment benefits, some were told that they weren&#39;t eligible because state data showed them with zero earnings. Workers continued to be denied benefits even after they submitted 1099 tax forms showing their earnings.\n One of the plaintiffs who worked at Subway in 2019 received a weekly benefit of $155\u2014reflecting his Subway earnings but not his earnings as an Uber and Lyft driver.\n In her  Tuesday ruling, Judge\u00a0LaShann DeArcy Hall sided squarely with the drivers. She acknowledged that Uber and Lyft bore some of the blame for failing to supply the state with necessary data. But she said the state still had an obligation to pay benefits promptly\u2014using data supplied by workers themselves if necessary.\n To ensure that benefits are paid promptly in the future,\u00a0Hall ordered the New York Department of Labor to create a 35-member workgroup to expedite applications from ride-hail drivers that have languished in the agency&#39;s appeal process. She ordered the agency to clear its backlog of applications from ride-hail drivers within 45 days and then process any new applications within 14 days.\n  The ruling comes at a time of uncertainty and stress for the unemployment system. Unemployment offices have faced an unprecedented surge of unemployment claims from people who lost jobs due to the COVID-19 pandemic. Some state unemployment offices have  scrambled to find COBOL programmers to help them upgrade their ancient unemployment systems.\n Under the CARES Act, passed in March, many unemployed workers have been entitled to an extra $600 in weekly benefits. But those benefits are due to expire at the end of the month. It&#39;s not clear if Congress will pass legislation extending the enhanced benefits beyond July.", "posttime": "2020-07-30 00:47:43", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u547d\u4ee4,orders,\u53f8\u673a", "title": "\u6cd5\u5b98\u547d\u4ee4\u7ebd\u7ea6\u5411\u4f18\u6b65\u548cLyft\u53f8\u673a\u652f\u4ed8\u5931\u4e1a\u8d39\u7528", "title_en": "Judge orders New York to pay unemployment to Uber and Lyft drivers", "transed": 1, "url": "https://arstechnica.com/tech-policy/2020/07/judge-orders-new-york-to-pay-unemployment-to-uber-and-lyft-drivers/", "via": "", "real_tags": ["\u547d\u4ee4", "orders", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "1563f26b5e6e3c4f7a0d8291a227b566.jpg", "infoid": 1014979, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65f6\u673a\u5f88\u91cd\u8981\uff0c\u800c\u4e14\u6bd4\u521b\u59cb\u4eba\u53ef\u80fd\u610f\u8bc6\u5230\u7684\u8981\u590d\u6742\u5f97\u591a\uff0c\u4f46\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u9009\u62e9\u6b63\u786e\u7684\u6708\u4efd\u6216\u65f6\u95f4\u7684\u95ee\u9898\u3002Emerging Capital\u7684\u6770\u514b\u00b7\u8428\u73c0\u4e0a\u5468\u53c2\u52a0\u4e86TechCrunch\u7684\u865a\u62df\u65e9\u671f\u6d3b\u52a8\uff0c\u4ed6\u8868\u793a\uff0c\u627e\u5230\u5408\u9002\u7684\u878d\u8d44\u65f6\u673a\u9700\u8981\u5fae\u89c2\u548c\u5b8f\u89c2\u5c42\u9762\u7684\u6218\u7565\u3002\n\u201c\u786e\u5b9e\u6709\u4e24\u4e2a\u89d2\u5ea6\u9700\u8981\u8003\u8651\uff0c\u201d\u8428\u73c0\u8bf4\u3002\u7b2c\u4e00\u4e2a\u662f\u5b8f\u89c2\u89d2\u5ea6\uff0c\u8003\u8651\u5230\u884c\u4e1a\u5185\u4ea4\u6613\u7684\u4e00\u822c\u6d41\u7a0b\u3002\u4ed6\u8865\u5145\u8bf4\uff0c\u8fd8\u6709\u5c31\u662f\u5bf9\u6bcf\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u6765\u8bf4\uff0c\u5fae\u89c2\u65f6\u673a\u90fd\u662f\u5177\u4f53\u7684-\u800c\u4e14\u662f\u4e0d\u540c\u7684-\u3002\n\u867d\u7136\u8428\u73c0\u7279\u522b\u4e13\u6ce8\u4e8e\u4e3a\u5df2\u7ecf\u7b79\u96c6\u4e86\u79cd\u5b50\u8f6e\u5e76\u51c6\u5907\u7b79\u96c6\u9996\u8f6e\u8d44\u91d1\u7684\u521d\u521b\u516c\u53f8\u521b\u59cb\u4eba\u63d0\u4f9b\u5efa\u8bae\uff0c\u4f46\u4ed6\u8868\u793a\uff0c\u4ed6\u7684\u5927\u90e8\u5206\u6307\u5bfc\u90fd\u53ef\u4ee5\u9002\u7528\u4e8e\u5904\u4e8e\u4e0d\u540c\u878d\u8d44\u9636\u6bb5\u7684\u516c\u53f8\u3002\u8ba9\u6211\u4eec\u4ece\u57fa\u7840\u77e5\u8bc6\u5f00\u59cb\u5427\u3002\n\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u521b\u59cb\u4eba\u5728\u4e00\u5e74\u4e2d\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u4f1a\u7b79\u6b3e\u3002\u7136\u800c\uff0c\u5728\u4e00\u5e74\u4e2d\u7684\u67d0\u4e9b\u65f6\u5019\uff0c\u6295\u8d44\u8005\u4f1a\u66f4\u79ef\u6781\u5730\u8bc4\u4f30\u7403\u573a\u7532\u677f\u3002\n\u6839\u636eDocSend\u7684\u6570\u636e\uff0c1\u6708\u548c2\u6708\u662f\u6295\u8d44\u8005\u6700\u6d3b\u8dc3\u7684\u6708\u4efd\uff0c\u7d27\u968f\u5176\u540e\u7684\u662f9\u6708\u3002DocSend\u7684\u6570\u636e\u8861\u91cf\u4e86\u4f01\u4e1a\u5bb6\u6bcf\u6708\u53d1\u51fa\u7684\u6bcf\u4e2a\u7403\u573a\u5e73\u53f0\u7684\u8bbf\u95ee\u91cf\u3002\n\u8fd9\u4e0eEmerging\u7684\u8f76\u4e8b\u8bc1\u636e\u76f8\u543b\u5408\u3002\u8428\u73c0\u8bf4\uff0c\u8be5\u516c\u53f8\u8ba4\u4e3a\uff0c\u90a3\u4e9b\u572812\u6708\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u4e3a1\u6708\u548c2\u6708\u7684\u5927\u578b\u53d1\u5e03\u4f1a\u6216\u7b79\u8d44\u6d3b\u52a8\u505a\u51c6\u5907\u7684\u521b\u59cb\u4eba\u3002\u52301\u6708\u4efd\u521b\u4e1a\u8005\u4eec\u5f00\u59cb\u63a8\u51fa\u5957\u88c5\u65f6\uff0c\u98ce\u6295\u4eec\u5df2\u7ecf\u4ece\u5ea6\u5047\u6216\u5176\u4ed6\u4e0e\u79d1\u6280\u76f8\u5173\u7684\u6d3b\u52a8(\u5982CES)\u4e2d\u56de\u6765\u4e86\u3002\u540c\u6837\u7684\u8282\u594f\u59cb\u4e8e\u590f\u5b63\uff0c\u521b\u59cb\u4eba\u4eec\u5229\u7528\u8fd9\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u4e3a\u79cb\u5b63\u7684\u7b79\u8d44\u505a\u51c6\u5907\u3002\n\u8428\u73c0\u8bf4\uff0c\u867d\u7136\u8fd9\u662f\u5411\u98ce\u6295\u63a8\u9500\u7684\u5e38\u89c1\u65f6\u95f4\uff0c\u4f46\u8bf7\u8bb0\u4f4f\uff0c\u4f60\u4e5f\u5728\u4e89\u53d6\u4ed6\u4eec\u7684\u6ce8\u610f\u529b\u3002", "note_en": "Timing matters and it\u2019s more complicated than founders might realize, but it\u2019s not just about picking the right month or time of day. Finding the right time to fundraise requires a micro- and macro-level strategy, according to  Jake Saper   of Emergence Capital, who joined TechCrunch\u2019s virtual Early Stage event last week.\n \u201cThere are really two angles to think about,\u201d Saper said. The first is the macro perspective that takes into account the general flow of deals in the industry. Then there\u2019s the micro timing that is specific \u2014 and different \u2014 for every startup, he added.\n While Saper was particularly focused on giving advice to startup founders who have already raised a seed round and are preparing to raise a Series A, he said that most of his guidance can be applied to companies at a variety of funding stages. Let\u2019s get started with the basics.\n  The reality is that founders fundraise in all times of the year. However, there are certain times of the year when investors are more actively reviewing pitch decks.\n January and February, followed by September, are the most active months for investors, based on data from DocSend that measured visits per pitch deck sent out by entrepreneurs each month.\n  This fits with Emergence\u2019s anecdotal evidence. The firm sees founders who spend a lot of December preparing for a big launch or fundraise in January and February, Saper said. By the time founders begin sending decks out in January, VCs are back from holiday vacations or other tech-related events, like CES. The same rhythm begins in summer with founders using these months to prep for fundraising in the fall.\n While this is a common time to pitch VCs, keep in mind that you\u2019re also fighting for their attention, Saper said.", "posttime": "2020-07-30 00:46:37", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7b79\u6b3e,series,\u521b\u59cb\u4eba", "title": "\n\u5982\u4f55\u5b89\u6392\u4f60\u7684\u9996\u8f6e\u7b79\u6b3e\u65f6\u95f4", "title_en": "\n\t\t\t\tHow to time your Series A fundraise\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/07/29/how-to-time-your-series-a-fundraise/", "via": "", "real_tags": ["\u7b79\u6b3e", "series", "\u521b\u59cb\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "d165d30416312bf67bc2ed3219aa2209.jpg", "infoid": 1014978, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u667a\u80fd\u773c\u955c\u516c\u53f8\u8bfa\u65af(North)\u544a\u8bc9\u987e\u5ba2\uff0c\u4ed6\u4eec\u82b1600\u7f8e\u5143(460\u82f1\u9551)\u8d2d\u4e70\u7684\u773c\u955c\u5c06\u5728\u51e0\u5929\u540e\u505c\u6b62\u5de5\u4f5c\u3002\n\u8fd9\u5bb6\u6700\u8fd1\u88ab\u8c37\u6b4c\u6536\u8d2d\u7684\u52a0\u62ff\u5927\u516c\u53f8\u8868\u793a\uff0c\u5176Focals\u773c\u955c\u5c06\u4e8e\u5468\u4e94\u505c\u6b62\u4f7f\u7528\u3002\n\u4ece\u90a3\u65f6\u8d77\uff0c\u62e5\u6709\u8005\u5c06\u4e0d\u80fd\u4f7f\u7528\u773c\u955c\u7684\u4efb\u4f55\u529f\u80fd\uff0c\u4e5f\u4e0d\u80fd\u8fde\u63a5\u5230\u914d\u5957\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5b83\u627f\u8bfa\u5c06\u628a\u8d2d\u4e70\u4ef7\u683c\u5bc4\u56de\u539f\u6765\u7684\u652f\u4ed8\u65b9\u5f0f\uff0c\u5e76\u8054\u7cfb\u90a3\u4e9b\u65e0\u6cd5\u5904\u7406\u9000\u6b3e\u7684\u5ba2\u6237\u3002\n6\u6708\u5e95\uff0cNorth\u5ba3\u5e03\u5c06\u88ab\u8c37\u6b4c\u6536\u8d2d\uff0c\u4e0d\u4f1a\u53d1\u5e03\u8ba1\u5212\u4e2d\u7684\u7b2c\u4e8c\u4ee3\u8bbe\u5907\u3002\n\u8be5\u516c\u53f8\u8fd8\u8868\u793a\uff0c\u5c06\u9010\u6b65\u505c\u6b62\u53bb\u5e74\u53d1\u5e03\u7684\u7b2c\u4e00\u4ee3\u667a\u80fd\u773c\u955c\u3002\n\u987e\u5ba2\u4eec\u53d1\u73b0\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u6b3e\u667a\u80fd\u773c\u955c\u5c06\u901a\u8fc7\u8be5\u516c\u53f8\u7f51\u7ad9\u4e0a\u53d1\u5e03\u7684\u4e00\u4efd\u58f0\u660e\u548c\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u53d1\u5e03\u3002\n\u7136\u800c\uff0cFocals\u773c\u955c\u9644\u5e26\u5904\u65b9\u955c\u7247\u4f5c\u4e3a\u9009\u9879\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u4f5c\u4e3a\u65e5\u5e38\u5904\u65b9\u773c\u955c\u4f7f\u7528\u3002\u7b28\u91cd\u7684\u955c\u6846\u5185\u88c5\u6709\u6fc0\u5149\u5668\u3001\u7535\u6c60\u548c\u5176\u4ed6\u5957\u4ef6\uff0c\u5c06\u4e0d\u518d\u80fd\u505a\u666e\u901a\u773c\u955c\u4e0d\u80fd\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\u3002\nCCS Insight\u9996\u5e2d\u5206\u6790\u5e08\u672c\u00b7\u4f0d\u5fb7(Ben Wood)\u8868\u793a\uff0c\u4ece\u4e91\u8ba1\u7b97\u786c\u4ef6\u4e2d\u63d0\u53d6\u529f\u80fd\u5e76\u4e0d\u5c11\u89c1-\u8fd9\u5728\u4ed6\u8eab\u4e0a\u4ee5\u524d\u5c31\u53d1\u751f\u8fc7\u3002\n\u4ed6\u8b66\u544a\u8bf4\uff0c\u5982\u679c\u4f60\u60f3\u6210\u4e3a\u65e9\u671f\u91c7\u7528\u8005\uff0c\u5e76\u4eab\u53d7\u4e00\u5bb6\u96c4\u5fc3\u52c3\u52c3\u7684\u521d\u521b\u4f01\u4e1a\u521b\u9020\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u65b0\u6280\u672f\uff0c\u90a3\u4e48\u4ed6\u4eec\u603b\u662f\u6709\u65e0\u6cd5\u5b8c\u6210\u5546\u4e1a\u8ba1\u5212\u7684\u98ce\u9669\u3002\n\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u670d\u52a1\u505c\u6b62\u5de5\u4f5c\uff0c\u6216\u8005\u4f60\u6700\u7ec8\u53d1\u73b0\u4f60\u4e0d\u5f97\u4e0d\u652f\u4ed8\u989d\u5916\u7684\u8d39\u7528\u6765\u7ef4\u6301\u670d\u52a1\u7684\u8fde\u7eed\u6027\u3002\n\u6709\u51e0\u4e2a\u80fd\u4e0a\u7f51\u7684\u667a\u80fd\u8bbe\u5907\u7684\u4f8b\u5b50\uff0c\u5f53\u516c\u53f8\u6539\u53d8\u5176\u5546\u4e1a\u6a21\u5f0f\u65f6\uff0c\u5b83\u4eec\u7a81\u7136\u53d8\u5f97\u65e0\u6cd5\u4f7f\u7528\uff0c\u5931\u53bb\u4e86\u8bb8\u591a\u529f\u80fd\uff0c\u751a\u81f3\u53d8\u5f97\u65e0\u6cd5\u4f7f\u7528\u3002\n\u53cb\u597d\u7684\u5bb6\u7528\u673a\u5668\u4ebaJibo\u5f00\u59cb\u544a\u8bc9\u5b83\u7684\u4e3b\u4eba\uff0c\u5b83\u7684\u670d\u52a1\u5668\u6b63\u5728\u5173\u95ed\uff0c\u4e4b\u540e\u5b83\u7684\u53cd\u5e94\u5c06\u662f\u6709\u9650\u7684-\u5c3d\u7ba1\u4e00\u5e74\u591a\u8fc7\u53bb\u4e86\uff0c\u5b83\u4ecd\u7136\u5728\u5de5\u4f5c\u3002\n\u626c\u58f0\u5668\u516c\u53f8\u7d22\u8bfa\u65af(Sonos)\u4e0d\u5f97\u4e0d\u53d6\u6d88\u6539\u7528\u8001\u5f0f\u667a\u80fd\u626c\u58f0\u5668\u7684\u8ba1\u5212\uff0c\u8fd9\u4e9b\u626c\u58f0\u5668\u5c06\u4e0d\u518d\u63a5\u6536\u66f4\u65b0\uff0c\u5e76\u6700\u7ec8\u505c\u6b62\u5de5\u4f5c\u3002\n\u667a\u80fd\u5bb6\u5c45\u5e73\u53f0Wink\u6700\u8fd1\u5ba3\u5e03\uff0c\u4e4b\u524d\u514d\u8d39\u7684\u529f\u80fd\u5c06\u88ab\u9501\u5b9a\u5728\u6bcf\u6708\u8ba2\u9605\u4e4b\u540e\uff0c\u9650\u5236\u4e86\u529f\u80fd\u3002\n\u672c\u5468\uff0c\u8be5\u516c\u53f8\u5ba3\u5e03\uff0c\u5982\u679c\u4e0d\u6536\u53d6\u6bcf\u5e7448\u7f8e\u5143\u7684\u8ba2\u9605\u8d39\uff0c\u552e\u4ef7399\u7f8e\u5143\u7684Mlow sous-vide\u7535\u996d\u9505\u5c06\u5931\u53bb\u5176\u667a\u80fd\u529f\u80fd\n2013\u5e74\uff0c\u8c37\u6b4c(Google)\u5728\u5176\u8c37\u6b4c\u773c\u955c(Google Glass)\u4ea7\u54c1\u4e0a\u8fdb\u884c\u4e86\u4e00\u6b21\u65e9\u671f\u7684\u3001\u4f46\u6ce8\u5b9a\u8981\u5931\u8d25\u7684\u5c1d\u8bd5\uff0c\u8bd5\u56fe\u4f7f\u667a\u80fd\u773c\u955c\u6210\u4e3a\u4e3b\u6d41\u3002\n\u5728\u6536\u8d2dNorth\u65f6\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u8be5\u516c\u53f8\u7684\u6280\u672f\u4e13\u957f\u5c06\u5e2e\u52a9\u5176\u5b9e\u73b0\u73af\u5883\u8ba1\u7b97\u672a\u6765\u7684\u613f\u666f\u3002\n\u5c3d\u7ba1\u901a\u77e5\u65f6\u95f4\u5f88\u77ed\uff0c\u4f46\u4f0d\u5fb7\u8868\u793a\uff0c\u4e3a\u5317\u65b9\u5ba2\u6237\u63d0\u4f9b\u5168\u989d\u9000\u6b3e\u7684\u63d0\u8bae\u683c\u5916\u6177\u6168\uff0c\u4ece\u5ba2\u6237\u5173\u7cfb\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u662f\u6700\u597d\u7684\u65b9\u5f0f\u3002\n\u4ed6\u8bf4\uff0c\u5bf9\u4e8e\u8c37\u6b4c\u6765\u8bf4\uff0c\u8003\u8651\u5230\u5b9e\u9645\u51fa\u552e\u7ed9\u771f\u6b63\u7ec8\u7aef\u7528\u6237\u7684\u5317\u65b9\u773c\u955c\u6570\u91cf\u5f88\u5c11\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u820d\u5165\u8bef\u5dee\u3002", "note_en": "Smart glasses company North has told customers that their $600 (\u00a3460) purchases will stop working in a few days&#39; time.\n The Canadian company, recently purchased by Google, says its Focals glasses will cease functioning on Friday.\n From then, owners will not be able to use &#34;any features&#34; of the glasses, or connect to the companion app.\n  It promised to send the purchase price back to the original payment method, and to contact those customers whose refunds it could not process.\n  At the end of June, North announced it was being acquired by Google, and would not release a planned second-generation device.\n It also said it would &#34;wind down&#34; its first generation smart glasses, released last year.\n Customers found out that meant the smart glasses would be rendered &#34;dumb&#34;  through a statement published on the company&#39;s website and by email.\n The Focals glasses, however, come with prescription lenses as an option, meaning they can function as everyday prescription eyewear. The bulky frames, housing a laser, battery, and other kit will no longer do anything that regular spectacles cannot do.\n Ben Wood, chief analyst at CCS Insight, said the pulling of features from cloud-powered hardware is not uncommon - and something that has happened to him before.\n &#34;If you want to be an early adopter and have some fun new tech that an ambitious start-up has created, there&#39;s always a risk that they won&#39;t be able to make the business plan stack up,&#34; he warned.\n &#34;That could either mean the service stops working or you end up finding you have to pay additional charges to maintain service continuity.&#34;\n   There have been several examples of internet-enabled smart devices that are suddenly rendered &#34;dumb&#34;, losing many features or even becoming unusable when the company changes its business model.\n  Friendly home robot  Jibo started telling its owners that its servers were being shut down and its reactions would &#34;be limited&#34; afterwards - though more than a year later,  it is still working\n Speaker firm  Sonos had to reverse plans to &#34;brick&#34; older smart speakers, which will no longer receive updates and  eventually stop working\n Smart home platform  Wink recently announced that previously free features would be locked behind a monthly subscription, limiting functionality\n This week, it was announced  the Mellow $399 sous-vide cooker will lose its smart functionality without a $48-a-year subscription\n  Google made  an early but ill-fated attempt to make smart glasses mainstream with its Google Glass product in 2013.\n When it bought North, Google said the company&#39;s &#34;technical expertise&#34; would help it realise its vision of an &#34;ambient computing&#34; future.\n And despite the short notice, Mr Wood says the offer of a full refund for North customers is &#34;exceptionally generous&#34;, and the best approach from a customer relations point of view.\n &#34;For Google, given the small number of North glasses that were actually sold to real end users, it&#39;s a rounding error,&#34; he said.", "posttime": "2020-07-30 00:44:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u667a\u80fd,offers,\u773c\u955c", "title": "\u8c37\u6b4c\u5728\u667a\u80fd\u773c\u955c\u505c\u6b62\u5de5\u4f5c\u540e\u63d0\u4f9b\u9000\u6b3e", "title_en": "Google offers refunds after smart glasses stop working", "transed": 1, "url": "https://www.bbc.co.uk/news/technology-53581762", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u667a\u80fd", "offers", "\u773c\u955c"]}]