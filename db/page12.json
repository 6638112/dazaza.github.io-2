[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1070266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL;DR\uff1a\u6211\u4fee\u6539\u4e86 DOSBox \u4ee5\u63d0\u53d6 Monkey Island PC-Speaker \u6b4c\u66f2\u7684\u9891\u7387/\u5ef6\u8fdf\u503c\u5bf9\u3002\u7136\u540e\u6211\u4f7f\u7528\u970d\u592b\u66fc\u538b\u7f29\u5c06\u6240\u6709\u97f3\u4e50\u538b\u7f29\u5230 ATtiny85\uff08512 \u5b57\u8282\u7684 RAM\uff0c8 KB \u7684\u95ea\u5b58\uff09\u4e2d\u3002\u4e00\u65e6\u6211\u505a\u5230\u4e86\uff0c\u6211\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5e26\u6709\u626c\u58f0\u5668\u7684\u5c0f\u7535\u8def - \u64ad\u653e\u97f3\u4e50......\u4f5c\u4e3a\u4e00\u4e2a\u7ed9\u6211\u4f84\u5973\u548c\u4f84\u5b50\u7684\u793c\u7269\uff1b\u7ecf\u8fc7\u4e00\u5e74\u591a\u7684\u9694\u79bb (COVID) \u540e\uff0c\u6211\u5c06\u5728\u4e0b\u5468\u89c1\u5230\u4ed6\uff01\u662f\u7684\uff0c\u4ed6\u4eec\u7684\u53d4\u53d4\u662f\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u4e66\u5446\u5b50\u3002\u4ed6\u786e\u4fdd\u4ed6\u4eec\u957f\u5927\u540e\u9047\u5230\u4e86 Guybrush Threepwood :-)", "note_en": "TL;DR: I modified DOSBox to extract the frequency/delay value pairs of the Monkey Island PC-Speaker songs. I then used Huffman compression to squeeze all music inside an ATtiny85 ( 512  bytes of RAM, 8  KB of flash) Once I managed that, I then created a small circuit with a speaker - to play the music... ...as a gift for my nieces and nephews; whom I&#39;ll see next week after more than a year&#39;s isolation (COVID)!\n Yes, their uncle is a complete nerd. And he made sure they grew up meeting Guybrush Threepwood :-)", "posttime": "2021-07-29 22:00:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,island,\u538b\u7f29", "title": "\u7334\u5c9b\u7535\u8111\u97f3\u7bb1\u97f3\u4e50\u64ad\u653e\u5668", "title_en": "Monkey Island PC-speaker music player", "transed": 1, "url": "https://www.thanassis.space/monkeyisland.html", "via": "", "real_tags": ["\u7535\u8111", "island", "\u538b\u7f29"]}, {"category": "", "categoryclass": "", "imagename": "f02ee9afb5626ece69390ba8ef7c4b31.jpg", "infoid": 1070265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ef4\u52a0\u65af\u73af\u7ebf\u96a7\u9053\u73b0\u5df2\u5f00\u653e\uff0c\u53f8\u673a\u5df2\u6536\u5230\u6709\u5173\u5982\u4f55\u4e0e\u4e58\u5ba2\u4ea4\u8c08\u7684\u4e25\u683c\u6307\u793a\u3002 The Boring Company \u6700\u8fd1\u5728\u62c9\u65af\u7ef4\u52a0\u65af\u4f1a\u8bae\u4e2d\u5fc3 (LVCC) \u5f00\u8bbe\u4e86\u96a7\u9053\uff0c\u96a7\u9053\u4f4d\u4e8e\u5730\u4e0b 40 \u82f1\u5c3a\uff0c\u957f 1.7 \u82f1\u91cc\u3002\u8be5\u7cfb\u7edf\u914d\u5907\u4e86\u4e13\u95e8\u6539\u88c5\u7684\u7279\u65af\u62c9\u8f66\u8f86\u7684\u53f8\u673a\uff0c\u8bbe\u6709\u4e09\u4e2a\u8f66\u7ad9\uff0c\u53ef\u5e2e\u52a9\u4e58\u5ba2\u66f4\u5feb\u5730\u7ed5\u8fc7\u5de8\u5927\u7684\u8bbe\u65bd\u3002\u4f5c\u4e3a\u57c3\u9686\u9a6c\u65af\u514b\u6709\u4e89\u8bae\u7684\u96a7\u9053\u52aa\u529b\u7684\u7b2c\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50\uff0c\u8be5\u516c\u53f8\u975e\u5e38\u8ba4\u771f\u5730\u63a7\u5236\u56f4\u7ed5\u7cfb\u7edf\u7684\u53d9\u8ff0\u3002\u6b63\u5982 TechCrunch \u83b7\u5f97\u7684\u6587\u4ef6\u6240\u63ed\u793a\u7684\u90a3\u6837\uff0c\u65e0\u804a\u516c\u53f8\u751a\u81f3\u6307\u793a\u53f8\u673a\u5728\u4e0e\u4e58\u5ba2\u4e92\u52a8\u65f6\u9075\u5b88\u811a\u672c\u3002\u901a\u8fc7\u516c\u5171\u8bb0\u5f55\u6cd5\u62ab\u9732\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5305\u62ec\u53d1\u7ed9\u4e3a\u516c\u53f8\u5de5\u4f5c\u7684\u53f8\u673a\u7684\u201c\u9a91\u884c\u811a\u672c\u201d\u3002\u53f8\u673a\u88ab\u6307\u793a\u5c3d\u91cf\u51cf\u5c11\u8c08\u8bdd\uff0c\u5e76\u5728\u4e58\u5ba2\u8be2\u95ee\u65f6\u7ed9\u51fa\u5efa\u8bae\u7684\u56de\u5e94\u3002\u7279\u522b\u5173\u6ce8\u56de\u907f\u4e58\u5ba2\u5173\u4e8e\u7cfb\u7edf\u4e2d\u5c31\u4e1a\u548c\u4e8b\u6545\u7ec6\u8282\u7684\u95ee\u9898\u3002\u6587\u4ef6\u4e2d\u7684\u5c16\u9510\u5f15\u8ff0\u4f7f\u4eba\u53d1\u4eba\u6df1\u7701\u3002\u4e00\u4e2a\u90e8\u5206\u4e25\u5389\u5730\u6307\u793a\u53f8\u673a\u201c\u4f60\u7684\u76ee\u6807\u662f\u4e3a\u4e58\u5ba2\u63d0\u4f9b\u5b89\u5168\u7684\u4e58\u8f66\u4f53\u9a8c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u65c5\u7a0b\u3002\u5c3d\u91cf\u51cf\u5c11\u8c08\u8bdd\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u9053\u8def\u201d\u53e6\u4e00\u90e8\u5206\u544a\u8bc9\u53f8\u673a\u5982\u679c\u4e58\u5ba2\u8be2\u95ee\u4ed6\u4eec\u591a\u957f\u65f6\u95f4\u6211\u5df2\u7ecf\u4e3a Loop \u5f00\u8f66\u4e86\uff0c\u56de\u7b54\u662f\u201c\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u4e86\u89e3\u8fd9\u4e9b\u96a7\u9053\uff01\u201d\u8fd9\u662f\u4e00\u79cd\u660e\u663e\u7684\u56de\u907f\u6280\u672f\uff0c\u8db3\u4ee5\u88ab\u4e00\u4f4d\u7099\u624b\u53ef\u70ed\u7684\u4e2d\u5b66\u8bb0\u8005\u53d1\u73b0\uff0c\u4f46\u795d\u798f\u4ed6\u4eec\u90fd\u5c1d\u8bd5\u8fc7\u3002\u57c3\u9686\u00b7\u9a6c\u65af\u514b (Elon Musk) \u62e5\u6709 Boring Company\uff0c\u8fd1\u5e74\u6765\uff0c\u96a7\u9053\u4e00\u76f4\u662f\u8fd9\u4f4d\u795e\u79d8\u7684\u4ebf\u4e07\u5bcc\u7fc1\u7684\u5ba0\u513f\u3002\u8fd9\u4e2a\u6709\u4e89\u8bae\u7684\u4eba\u7269\u80af\u5b9a\u4f1a\u6210\u4e3a\u4e58\u5ba2\u7684\u4e00\u4e2a\u5174\u8da3\u70b9\uff0c\u5267\u672c\u6307\u793a\u53f8\u673a\u975e\u5e38\u5c0f\u5fc3\u5730\u5904\u7406\u8fd9\u4e2a\u8bdd\u9898\u3002\u5f53\u88ab\u95ee\u53ca\u9a6c\u65af\u514b\u662f\u4ec0\u4e48\u6837\u7684\u4eba\u65f6\uff0c\u53f8\u673a\u4eec\u88ab\u544a\u77e5\u201c\u4ed6\u771f\u68d2\uff01\u201d\u5728\u5bf9\u516c\u53f8\u521b\u59cb\u4eba\u9f13\u821e\u4eba\u5fc3\u548c\u6fc0\u52b1\u4eba\u5fc3\u7684\u54c1\u8d28\u55e4\u4e4b\u4ee5\u9f3b\u4e4b\u524d\u3002\u5bf9\u4e8e\u559c\u6b22\u4e3a\u9a6c\u65af\u514b\u5de5\u4f5c\u7684\u53f8\u673a\u662f\u5426\u5e94\u8be5\u5f97\u5230\u76f4\u622a\u4e86\u5f53\u7684\u56de\u7b54\u7684\u95ee\u9898\uff1a\u201c\u662f\u7684\uff0c\u4ed6\u662f\u4e00\u4f4d\u4f1f\u5927\u7684\u9886\u5bfc\u8005\uff01\u4ed6\u6fc0\u52b1\u6211\u4eec\u505a\u4f1f\u5927\u7684\u5de5\u4f5c\u3002\u201d\u90e8\u5206\u811a\u672c\u88ab\u7f16\u8f91\uff0c\u7279\u522b\u662f\u56f4\u7ed5\u5982\u4f55\u6307\u793a\u9a7e\u9a76\u5458\u56de\u7b54\u6709\u5173\u7279\u65af\u62c9\u81ea\u52a8\u9a7e\u9a76\u4eea\u6280\u672f\u7684\u95ee\u9898\u3002 Loop \u7cfb\u7edf\u4e0a\u4f7f\u7528\u7684\u8f66\u8f86\u5b9e\u9645\u4e0a\u88ab\u7981\u6b62\u4f7f\u7528\u9a7e\u9a76\u5458\u8f85\u52a9\u8bbe\u5907\uff0c\u514b\u62c9\u514b\u53bf\u6b63\u5f0f\u7981\u6b62\u5728\u8bbe\u65bd\u5185\u5916\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002\u751a\u81f3\u9700\u8981\u7981\u7528\u81ea\u52a8\u7d27\u6025\u5236\u52a8\u548c\u8f66\u9053\u4fdd\u6301\u7b49\u5e38\u89c1\u529f\u80fd\u3002\u53d1\u5e03\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\u6307\u51fa\uff0c\u6280\u672f\u4eba\u5458\u5c06\u8fdb\u884c\u65e5\u5e38\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u8fd9\u4e9b\u529f\u80fd\u672a\u88ab\u4f7f\u7528\u3002\u9a7e\u9a76\u8f85\u52a9\u8bbe\u5907\u7981\u4ee4\u610f\u5473\u7740\u53f8\u673a\u5728\u7a7f\u8fc7\u96a7\u9053\u65f6\u5b8c\u5168\u5904\u4e8e\u624b\u52a8\u63a7\u5236\u72b6\u6001\u3002\u867d\u7136 Boring \u516c\u53f8\u63d0\u51fa\u4e86\u4ee5\u9ad8\u8fbe 150 \u82f1\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76\u7684\u81ea\u52a8\u8f66\u8f86\u7684\u7406\u60f3\u9009\u62e9\uff0c\u4f46 LVCC \u7cfb\u7edf\u7684\u8fd0\u884c\u901f\u5ea6\u8981\u4f4e\u5f97\u591a\u3002\u636e CNET \u4e0a\u4e2a\u6708\u62a5\u9053\uff0c\u6c7d\u8f66\u7684\u65f6\u901f\u9650\u5236\u4e3a 35 \u82f1\u91cc/\u5c0f\u65f6\u3002\u5982\u679c\u53f8\u673a\u88ab\u95ee\u53ca\u649e\u8f66\u6216\u201c\u4e8b\u6545\u201d\uff0c\u5982\u6587\u4ef6\u6240\u79f0\uff0c\u4ed6\u4eec\u4f1a\u88ab\u6307\u793a\u56de\u7b54\u201c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5b89\u5168\u7684\u7cfb\u7edf\uff0c\u6211\u4e0d\u786e\u5b9a\u3002\u4f60\u5fc5\u987b\u8054\u7cfb\u516c\u53f8\u3002\u201d\nTechCrunch \u7684\u6574\u7bc7\u6587\u7ae0\u975e\u5e38\u9002\u5408\u9605\u8bfb\uff0c\u5e76\u4e14\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6587\u6863\u7684\u5185\u5bb9\uff0c\u6db5\u76d6\u4e86\u4ece Loop \u4e0a\u7684\u76d1\u63a7\u7cfb\u7edf\u5230\u5176\u4ed6\u6709\u5173\u53f8\u673a\u65e0\u89c6\u5b89\u5168\u6cd5\u89c4\u7684\u76f8\u5173\u95ee\u9898\u3002\u5373\u4f7f\u662f\u5b89\u5168\u5e26\u5408\u89c4\u6027\u548c\u96a7\u9053\u4e2d\u7684\u901f\u5ea6\u9650\u5236\u7b49\u57fa\u672c\u9879\u76ee\u4e5f\u4e00\u76f4\u662f\u514b\u62c9\u514b\u53bf\u5b98\u5458\u5173\u6ce8\u7684\u7126\u70b9\u3002\u9274\u4e8e\u8be5\u7cfb\u7edf\u624d\u521a\u521a\u5f00\u59cb\u8fd0\u884c\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u5146\u5934\u3002\u6211\u4eec\u5e0c\u671b\u770b\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\u6765\u81ea\u4e58\u5ba2\u7684\u89c6\u9891\uff0c\u8be5\u89c6\u9891\u8bd5\u56fe\u4ece\u53f8\u673a\u90a3\u91cc\u5f15\u51fa\u8fd9\u4e9b\u673a\u5668\u4eba\u7684\u3001\u811a\u672c\u5316\u7684\u54cd\u5e94\u3002\u8fd9\u79cd\u4f53\u9a8c\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u5728\u89d2\u8272\u626e\u6f14\u6e38\u620f\u4e2d\u4e0e NPC \u4ea4\u8c08\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u8ba9\u53f8\u673a\u5728\u7a7f\u8d8a\u4f1a\u8bae\u4e2d\u5fc3\u7684\u4e24\u5206\u949f\u65c5\u7a0b\u4e2d\u591a\u6b21\u5bf9\u540c\u4e00\u95ee\u9898\u505a\u51fa\u76f8\u540c\u7684\u56de\u7b54\uff0c\u5219\u53ef\u4ee5\u52a0\u5206\u3002\u6240\u7f3a\u5c11\u7684\u53ea\u662f\u8ba9\u53f8\u673a\u5728\u8f6e\u73ed\u65f6\u80cc\u8bf5\u7684\u4e00\u4e2a\u6717\u6717\u4e0a\u53e3\u3001\u50cf\u90aa\u6559\u4e00\u6837\u7684\u5492\u8bed\u3002\u4e5f\u8bb8\u4ed6\u4eec\u53ef\u80fd\u559c\u6b22\u8fd9\u6837\u541f\u5531\uff1a\u201c\u6211\u4eec\u8d5e\u7f8e\u96a7\u9053\uff0c\u6211\u4eec\u8d5e\u7f8e\u7684\u96a7\u9053\u3002\u201d\u53ef\u4ee5\u5f88\u6709\u8da3\u3002", "note_en": "The Vegas Loop tunnels are now open, and drivers have been given strict instructions on how to talk to passengers.\n  The Boring Company recently opened its tunnels at the Las Vegas Convention Center (LVCC), sitting 40 feet underground and stretching 1.7 miles long. Staffed with drivers behind the wheel of specially modified Tesla vehicles, the system features three stations and helps passengers get around the huge facility more quickly. As the first live example of Elon Musk&#39;s controversial tunneling efforts, the company is serious about controlling the narrative around the system. The Boring Company has gone so far as to instruct drivers to stick to a script during interactions with passengers,  as revealed in documents obtained by  TechCrunch.\n Revealed via public records laws, the documents included a &#34;Ride Script&#34; issued to the drivers working for the company. Drivers are instructed to minimize conversation, and given recommended responses to use when queried by passengers. Particular focus is given to evading passenger questions around details of employment and accidents in the system.\n   Poignant quotes from the document make for sobering reading. One section sternly instructs drivers that &#34;Your goal is to provide a safe ride for the passengers, not an entertaining ride. Keep conversation to a minimum so you can focus on the road&#34; Another tells drivers to obfuscate if passengers ask about how long they&#39;ve driven for the Loop, by responding &#34;Long enough to know these tunnels pretty well!&#34; It&#39;s an evasive technique obvious enough to be spotted by a hot-shot middle school reporter, but bless them for trying all the same.\n   Elon Musk owns the Boring Company, and the tunnels have been somewhat of a pet project for the enigmatic billionaire in recent years. The controversial figure is sure to be a point of interest for passengers, and the script instructs drivers to handle this topic  very carefully . When asked what Musk is like, drivers are told to respond &#34;He&#39;s awesome!&#34; before prevaricating about the inspiring and motivating qualities of the company&#39;s founder. Questions over whether drivers like working for Musk should receive a squeaky-clean response: &#34;Yup, he&#39;s a great leader! He motivates us to do great work.&#34;\n Some of the script is redacted, notably around how drivers are instructed to respond to questions about Tesla&#39;s Autopilot technology. The vehicles used on the Loop system are in fact banned from using driver aids, with Clark County officially outlawing their use anywhere in and around the facility. Even common features like automatic emergency braking and lane keeping are required to be disabled. Other documents in the release state that daily checks will be made by technicians to ensure the features are not being used.\n The driving aids ban means that drivers are in full manual control when driving through the tunnels. While the Boring Company presented an ideal of automated vehicles driving at speeds of  up to 150 mph, the LVCC system runs at much lower speeds. Cars are limited to juts 35 mph  as reported by  CNET last month. If drivers are asked about crashes, or &#34;accidents,&#34; as the document terms them, they&#39;re instructed to respond \u201cIt\u2019s a very safe system, and I\u2019m not sure. You\u2019d have to reach out to the company.\u201d\n The full piece from  TechCrunch makes a great read, and goes into granular detail about the contents of the documents, covering everything from the monitoring systems on the Loop to other concerning issues around drivers ignoring safety regulations. Even basic items like seatbelt compliance and speed limits in the tunnels have been points of concern for Clark County officials. It bodes poorly given the system has only just begun operations.\n One thing we&#39;d love to see is a video from a passenger that attempts to elicit these robotic, scripted responses from drivers. The experience would probably be akin to talking with NPCs in a role-playing game. Bonus points if you can get the driver to respond identically to the same question multiple times in the two-minute journey across the convention center. All that&#39;s missing is a catchy, cult-like mantra for the drivers to recite on-shift. Perhaps they might like to chant thusly: &#34;We praise the Tunnels, the Tunnels we Praise.&#34; Could be fun.", "posttime": "2021-07-29 22:00:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "boring,\u53f8\u673a", "title": "\u811a\u672c\u65e0\u804a\u516c\u53f8\u53f8\u673a\u4e0d\u5f97\u4e0d\u80cc\u8bf5\u9a6c\u65af\u514b", "title_en": "The Script Boring Company Drivers Have to Recite About Musk", "transed": 1, "url": "https://www.thedrive.com/news/41741/hes-awesome-heres-the-script-boring-company-drivers-have-to-recite-about-musk", "via": "", "real_tags": ["boring", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "3a6087af7bfc317fcd8672af1b7d5abf.png", "infoid": 1070264, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6b63\u5728\u53d1\u5e03 Triton 1.0\uff0c\u8fd9\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e Python \u7684\u5f00\u6e90\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u4f7f\u6ca1\u6709 CUDA \u7ecf\u9a8c\u7684\u7814\u7a76\u4eba\u5458\u80fd\u591f\u7f16\u5199\u9ad8\u6548\u7684 GPU \u4ee3\u7801\u2014\u2014\u5927\u90e8\u5206\u65f6\u95f4\u4e0e\u4e13\u5bb6\u80fd\u591f\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u5f53\u3002 Triton \u4f7f\u5f97\u4ee5\u76f8\u5bf9\u8f83\u5c11\u7684\u52aa\u529b\u8fbe\u5230\u5cf0\u503c\u786c\u4ef6\u6027\u80fd\u6210\u4e3a\u53ef\u80fd\uff1b\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e0d\u5230 25 \u884c\u4ee3\u7801\u7f16\u5199\u4e0e cuBLAS \u6027\u80fd\u76f8\u5339\u914d\u7684 FP16 \u77e9\u9635\u4e58\u6cd5\u5185\u6838\u2014\u2014\u8fd9\u662f\u8bb8\u591a GPU \u7a0b\u5e8f\u5458\u65e0\u6cd5\u505a\u5230\u7684\u3002\u6211\u4eec\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u4f7f\u7528\u5b83\u6765\u751f\u6210\u6548\u7387\u6bd4\u540c\u7b49 Torch \u5b9e\u73b0\u9ad8 2 \u500d\u7684\u5185\u6838\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u4e0e\u793e\u533a\u5408\u4f5c\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u66f4\u5bb9\u6613\u4f7f\u7528 GPU \u7f16\u7a0b\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\uff0c\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u539f\u751f\u6846\u67b6\u7b97\u5b50\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002\u867d\u7136\u65b9\u4fbf\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u9700\u8981\u521b\u5efa\uff08\u548c/\u6216\u79fb\u52a8\uff09\u8bb8\u591a\u4e34\u65f6\u5f20\u91cf\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5927\u89c4\u6a21\u635f\u5bb3\u795e\u7ecf\u7f51\u7edc\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u4e13\u95e8\u7684 GPU \u5185\u6838\u6765\u7f13\u89e3\uff0c\u4f46\u7531\u4e8e GPU \u7f16\u7a0b\u7684\u8bb8\u591a\u590d\u6742\u6027\uff0c\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u975e\u5e38\u56f0\u96be\u3002\u800c\u4e14\uff0c\u5c3d\u7ba1\u6700\u8fd1\u51fa\u73b0\u4e86\u5404\u79cd\u7cfb\u7edf\u6765\u7b80\u5316\u6b64\u8fc7\u7a0b\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u5b83\u4eec\u8981\u4e48\u8fc7\u4e8e\u5197\u957f\uff0c\u8981\u4e48\u7f3a\u4e4f\u7075\u6d3b\u6027\uff0c\u8981\u4e48\u751f\u6210\u7684\u4ee3\u7801\u660e\u663e\u6162\u4e8e\u6211\u4eec\u624b\u52a8\u8c03\u6574\u7684\u57fa\u7ebf\u3002\u8fd9\u4fc3\u4f7f\u6211\u4eec\u6269\u5c55\u548c\u6539\u8fdb Triton\uff0c\u8fd9\u662f\u4e00\u79cd\u6700\u65b0\u7684\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\uff0c\u5176\u6700\u521d\u7684\u521b\u5efa\u8005\u73b0\u5728\u5728 OpenAI \u5de5\u4f5c\u3002\u73b0\u4ee3 GPU \u7684\u67b6\u6784\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u2014\u2014DRAM\u3001SRAM \u548c ALU\u2014\u2014\u5728\u4f18\u5316 CUDA \u4ee3\u7801\u65f6\u5fc5\u987b\u8003\u8651\u5230\u6bcf\u4e2a\u90e8\u5206\uff1a \u5fc5\u987b\u5c06\u6765\u81ea DRAM \u7684\u5185\u5b58\u4f20\u8f93\u5408\u5e76\u4e3a\u5927\u578b\u4e8b\u52a1\uff0c\u4ee5\u5229\u7528\u73b0\u4ee3\u5185\u5b58\u7684\u5927\u603b\u7ebf\u5bbd\u5ea6\u63a5\u53e3\u3002\u6570\u636e\u5fc5\u987b\u5728\u91cd\u65b0\u4f7f\u7528\u4e4b\u524d\u624b\u52a8\u5b58\u50a8\u5230 SRAM \u4e2d\uff0c\u5e76\u8fdb\u884c\u7ba1\u7406\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u68c0\u7d22\u65f6\u7684\u5171\u4eab\u5185\u5b58\u5e93\u51b2\u7a81\u3002\u8ba1\u7b97\u5fc5\u987b\u5728\u6d41\u5f0f\u591a\u5904\u7406\u5668 (SM) \u4e4b\u95f4\u548c\u5185\u90e8\u4ed4\u7ec6\u5206\u533a\u548c\u8c03\u5ea6\uff0c\u4ee5\u4fc3\u8fdb\u6307\u4ee4/\u7ebf\u7a0b\u7ea7\u5e76\u884c\u6027\u5e76\u5229\u7528\u4e13\u7528 ALU\uff08\u4f8b\u5982\uff0c\u5f20\u91cf\u6838\u5fc3\uff09\u3002\u5bf9\u6240\u6709\u8fd9\u4e9b\u56e0\u7d20\u8fdb\u884c\u63a8\u7406\u53ef\u80fd\u5177\u6709\u6311\u6218\u6027\uff0c\u5373\u4f7f\u5bf9\u4e8e\u5177\u6709\u591a\u5e74\u7ecf\u9a8c\u7684 CUDA \u7a0b\u5e8f\u5458\u4e5f\u662f\u5982\u6b64\u3002 Triton \u7684\u76ee\u7684\u662f\u5c06\u8fd9\u4e9b\u4f18\u5316\u5b8c\u5168\u81ea\u52a8\u5316\uff0c\u8ba9\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u66f4\u597d\u5730\u4e13\u6ce8\u4e8e\u5e76\u884c\u4ee3\u7801\u7684\u9ad8\u7ea7\u903b\u8f91\u3002 Triton \u65e8\u5728\u5e7f\u6cdb\u9002\u7528\uff0c\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u5b89\u6392\u8de8 SM \u7684\u5de5\u4f5c\u2014\u2014\u5c06\u4e00\u4e9b\u91cd\u8981\u7684\u7b97\u6cd5\u8003\u8651\u56e0\u7d20\uff08\u4f8b\u5982\u5e73\u94fa\u3001SM \u95f4\u540c\u6b65\uff09\u7559\u7ed9\u5f00\u53d1\u4eba\u5458\u81ea\u884c\u51b3\u5b9a\u3002\n\u5728\u6240\u6709\u53ef\u7528\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00\u548c JIT \u7f16\u8bd1\u5668\u4e2d\uff0cTriton \u53ef\u80fd\u4e0e Numba \u6700\u76f8\u4f3c\uff1a\u5185\u6838\u88ab\u5b9a\u4e49\u4e3a\u4fee\u9970\u7684 Python \u51fd\u6570\uff0c\u5e76\u5728\u6240\u8c13\u7684\u5b9e\u4f8b\u7f51\u683c\u4e0a\u4e0e\u4e0d\u540c\u7684\u7a0b\u5e8f ID \u540c\u65f6\u542f\u52a8\u3002\u4f46\u662f\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6240\u793a\uff0c\u76f8\u4f3c\u4e4b\u5904\u4ec5\u6b62\u4e8e\u6b64\uff1aTriton \u901a\u8fc7\u5bf9\u5757\uff08\u7ef4\u6570\u4e3a 2 \u7684\u5e42\u7684\u5c0f\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6765\u516c\u5f00\u5b9e\u4f8b\u5185\u5e76\u884c\u6027\uff0c\u800c\u4e0d\u662f\u5355\u6307\u4ee4\u591a\u7ebf\u7a0b (SIMT) \u6267\u884c\u6a21\u578b\u3002\u8fd9\u6837\u505a\u65f6\uff0cTriton \u6709\u6548\u5730\u62bd\u8c61\u51fa\u4e86\u4e0e CUDA \u7ebf\u7a0b\u5757\u5185\u7684\u5e76\u53d1\u76f8\u5173\u7684\u6240\u6709\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u5185\u5b58\u5408\u5e76\u3001\u5171\u4eab\u5185\u5b58\u540c\u6b65/\u51b2\u7a81\u3001\u5f20\u91cf\u6838\u5fc3\u8c03\u5ea6\uff09\u3002 BLOCK = 512# \u8fd9\u662f Numba \u4e2d\u7684 GPU \u5185\u6838\u3002# this# \u51fd\u6570\u7684\u4e0d\u540c\u5b9e\u4f8b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u3002@jitdef add(X, Y, Z, N): # \u5728 Numba/CUDA \u4e2d\uff0c\u6bcf\u4e2a\u5185\u6838 # \u5b9e\u4f8b\u672c\u8eab\u4f7f\u7528\u4e00\u4e2aSIMT \u6267\u884c # \u6a21\u578b\uff0c\u5176\u4e2d\u6307\u4ee4\u9488\u5bf9\u4e0d\u540c\u7684 threadIdx \u503c\u5e76\u884c\u6267\u884c # tid = threadIdx.x bid = blockIdx.x # \u6807\u91cf\u7d22\u5f15 idx = bid * BLOCK + tid if id &lt; N: # Numba \u4e2d\u6ca1\u6709\u6307\u9488\u3002 # Z,X,Y \u662f\u5bc6\u96c6\u5f20\u91cf Z[idx] = X[idx] + Y[idx]...grid = (ceil_div(N, BLOCK),)block = (BLOCK,)add[grid, block]( x, y, z, x.shape[0]) BLOCK = 512# \u8fd9\u662f Triton \u4e2d\u7684 GPU \u5185\u6838\u3002# this# \u51fd\u6570\u7684\u4e0d\u540c\u5b9e\u4f8b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u3002@jitdef add(X, Y, Z, N): # \u5728 Triton \u4e2d\uff0c\u6bcf\u4e2a\u5185\u6838\u5b9e\u4f8b # \u5728\u5355\u4e2a\u7ebf\u7a0b\u4e0a\u6267\u884c\u5757\u64cd\u4f5c\uff1a\u6ca1\u6709\u6784\u9020 # \u7c7b\u4f3c\u4e8e threadIdx pid = program_id(0) # \u7d22\u5f15\u5757 idx = pid * BLOCK + arange(BLOCK) mask = idx &lt; N # Triton \u4f7f\u7528\u6307\u9488\u7b97\u672f # \u800c\u4e0d\u662f\u7d22\u5f15\u8fd0\u7b97\u7b26 x = load(X + idx, mask=mask) y = load(Y + idx, mask=mask) store(Z + idx, x + y, mask=mask).. .grid = (ceil_div(N, BLOCK),)# no thread-blockadd[grid](x, y, z, x.shape[0]) \u867d\u7136\u8fd9\u5bf9\u4e8e\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\uff08\u5373\u5143\u7d20\u65b9\u5f0f\uff09\u53ef\u80fd\u4e0d\u662f\u7279\u522b\u6709\u7528) \u8ba1\u7b97\uff0c\u5b83\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u66f4\u590d\u6742\u7684 GPU \u7a0b\u5e8f\u7684\u5f00\u53d1\u3002\u4f8b\u5982\uff0c\u8003\u8651\u878d\u5408 softmax \u5185\u6838\uff08\u5982\u4e0b\uff09\u7684\u60c5\u51b5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b9e\u4f8b\u6807\u51c6\u5316\u7ed9\u5b9a\u8f93\u5165\u5f20\u91cf $X \\in \\mathbb{R}^{M \\times N}$ \u7684\u4e0d\u540c\u884c\u3002\u8fd9\u79cd\u5e76\u884c\u5316\u7b56\u7565\u7684\u6807\u51c6 CUDA \u5b9e\u73b0\u53ef\u80fd\u96be\u4ee5\u7f16\u5199\uff0c\u9700\u8981\u7ebf\u7a0b\u4e4b\u95f4\u7684\u663e\u5f0f\u540c\u6b65\uff0c\u56e0\u4e3a\u5b83\u4eec\u540c\u65f6\u51cf\u5c11 $X$ \u7684\u540c\u4e00\u884c\u3002\u5927\u591a\u6570\u8fd9\u79cd\u590d\u6742\u6027\u5728 Triton \u4e2d\u6d88\u5931\u4e86\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5185\u6838\u5b9e\u4f8b\u52a0\u8f7d\u611f\u5174\u8da3\u7684\u884c\u5e76\u4f7f\u7528\u7c7b\u4f3c NumPy \u7684\u539f\u8bed\u6309\u987a\u5e8f\u5bf9\u5176\u8fdb\u884c\u89c4\u8303\u5316\u3002 import tritonimport triton.language as tl@triton.jitdef softmax(Y, stride_ym, stride_yn, X, stride_xm, stride_xn, M, N): # row index m = tl.program_id(0) # col indices # \u8fd9\u4e2a\u7279\u5b9a\u7684\u5185\u6838\u624d\u6709\u6548\u5bf9\u4e8e # \u5c11\u4e8e BLOCK_SIZE \u5217\u7684\u77e9\u9635 BLOCK_SIZE = 1024 n = tl.arange(0, BLOCK_SIZE) # \u6211\u4eec\u60f3\u8981\u52a0\u8f7d\u7684\u6240\u6709\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740 # \u53ef\u4ee5\u8ba1\u7b97\u5982\u4e0b X = X + m * stride_xm + n * stride_xn # \u52a0\u8f7d\u8f93\u5165\u6570\u636e\uff1b\u7528 0 x = tl.load(X, mask=n &lt; N, other=-float(&#39;inf&#39;)) \u586b\u5145\u8d8a\u754c\u5143\u7d20 # \u8ba1\u7b97\u6570\u503c\u7a33\u5b9a\u7684 softmax z = x - tl.max(x, axis =0) num = tl.exp(z) denom = tl.sum(num,axis=0) y = num / denom # \u5199\u56de YY = Y + m * stride_ym + n * stride_yn tl.store(Y, y , mask=n &lt; N)import torch# \u5206\u914d\u8f93\u5165/\u8f93\u51fa tensorsX = torch.normal(0, 1, size=(583, 931), device=&#39;cuda&#39;)Y = torch.empty_like(X)# SPMD \u542f\u52a8 gridgrid = (X.shape[0], )# \u5165\u961f GPU kernelsoftmax[grid](Y, Y.stride(0), Y.stride(1), X, X.stride(0), X.stride(1), X.shape[0] , X.shape[1]) \u8bf7\u6ce8\u610f\uff0cTriton JIT \u5c06 X \u548c Y \u89c6\u4e3a\u6307\u9488\u800c\u4e0d\u662f\u5f20\u91cf\uff1b\u6211\u4eec\u89c9\u5f97\u4fdd\u7559\u5bf9\u5185\u5b58\u8bbf\u95ee\u7684\u4f4e\u7ea7\u63a7\u5236\u5bf9\u4e8e\u5904\u7406\u66f4\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff08\u4f8b\u5982\uff0c\u5757\u7a00\u758f\u5f20\u91cf\uff09\u5f88\u91cd\u8981\u3002\n\u91cd\u8981\u7684\u662f\uff0csoftmax \u7684\u8fd9\u79cd\u7279\u6b8a\u5b9e\u73b0\u5728\u6574\u4e2a\u89c4\u8303\u5316\u8fc7\u7a0b\u4e2d\u5c06 $X$ \u7684\u884c\u4fdd\u7559\u5728 SRAM \u4e2d\uff0c\u8fd9\u5728\u9002\u7528\u65f6\u6700\u5927\u5316\u4e86\u6570\u636e\u91cd\u7528\uff08~&lt;32K \u5217\uff09\u3002\u8fd9\u4e0e PyTorch \u7684\u5185\u90e8 CUDA \u4ee3\u7801\u4e0d\u540c\uff0c\u540e\u8005\u4f7f\u7528\u4e34\u65f6\u5185\u5b58\u4f7f\u5176\u66f4\u901a\u7528\u4f46\u901f\u5ea6\u660e\u663e\u66f4\u6162\uff08\u5982\u4e0b\uff09\u3002\u8fd9\u91cc\u7684\u5e95\u7ebf\u4e0d\u662f Triton \u672c\u8d28\u4e0a\u66f4\u597d\uff0c\u800c\u662f\u5b83\u7b80\u5316\u4e86\u4e13\u7528\u5185\u6838\u7684\u5f00\u53d1\uff0c\u8fd9\u4e9b\u5185\u6838\u6bd4\u901a\u7528\u5e93\u4e2d\u7684\u5185\u6838\u5feb\u5f97\u591a\u3002 Torch (v1.9) JIT \u7684\u8f83\u4f4e\u6027\u80fd\u51f8\u663e\u4e86\u4ece\u9ad8\u7ea7\u5f20\u91cf\u64cd\u4f5c\u5e8f\u5217\u81ea\u52a8\u751f\u6210 CUDA \u4ee3\u7801\u7684\u96be\u5ea6\u3002 @torch.jit.scriptdef softmax(x): x_max = x.max(dim=1)[0] z = x - x_max[:, None] numerator = torch.exp(x) denominator = numerator.sum(dim= 1) return numerator / denominator[:, None] \u80fd\u591f\u4e3a\u5143\u7d20\u8fd0\u7b97\u548c\u5f52\u7ea6\u7f16\u5199\u878d\u5408\u5185\u6838\u5f88\u91cd\u8981\uff0c\u4f46\u8003\u8651\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u77e9\u9635\u4e58\u6cd5\u4efb\u52a1\u7684\u91cd\u8981\u6027\uff0c\u8fd9\u8fd8\u4e0d\u591f\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cTriton \u4e5f\u975e\u5e38\u9002\u5408\u8fd9\u4e9b\u5e94\u7528\uff0c\u53ea\u9700\u7ea6 25 \u884c Python \u4ee3\u7801\u5373\u53ef\u5b9e\u73b0\u6700\u4f73\u6027\u80fd\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728 CUDA \u4e2d\u5b9e\u73b0\u7c7b\u4f3c\u7684\u4e1c\u897f\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u7cbe\u529b\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u964d\u4f4e\u6027\u80fd\u3002 @triton.jitdef matmul(A, B, C, M, N, K, stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn, **META): # \u63d0\u53d6\u5143\u53c2\u6570 BLOCK_M, GROUP_M = META[&#39;BLOCK_M&#39;], META [&#39;GROUP_M&#39;] BLOCK_N = META[&#39;BLOCK_N&#39;] BLOCK_K = META[&#39;BLOCK_K&#39;] # \u7a0b\u5e8f\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u63d0\u9ad8 L2 \u547d\u4e2d\u7387 _pid_m = tl.program_id(0) _pid_n = tl.program_id(1) pid_m = _pid_m // GROUP_M pid_n =\uff08_pid_n * GROUP_M\uff09+\uff08_pid_m\uff05GROUP_M\uff09\uff03RM\uff08\u5206\u522b\u5730\uff0cRN\uff09\u8868\u793a\u7528\u4e8e\u884c\u7684\u8303\u56f4\u7684\u7d22\u5f15\uff03\uff08\u76f8\u5e94\u7684\u680f\uff09C RM = pid_m * BLOCK_M + tl.arange\u7684\uff080\uff0c BLOCK_M) rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N) # rk \u8868\u793a A (resp. B) \u7684\u5217 # (resp. rows) \u7684\u7d22\u5f15\u8303\u56f4 (resp. B) rk = tl.arange(0, BLOCK_K) # the # A \u548c B \u7684\u7b2c\u4e00\u4e2a\u5757\u4e2d\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u53ef\u4ee5\u4f7f\u7528 numpy \u98ce\u683c\u7684\u5e7f\u64ad\u8ba1\u7b97 A = A + (rm[:, None] * stride_am + rk[None, :] * stride_ak) B = B + (rk [:, None] * stride_bk + rn[None, :] * stride_bn) # \u521d\u59cb\u5316\u5e76\u8fed\u4ee3\u66f4\u65b0\u7d2f\u52a0\u5668 acc = tl.zeros((BLOCK_M, BLOCK _N), dtype=tl.float32) for k in range(K, 0, -BLOCK_K): a = tl.load(A) b = tl.load(B) # \u5757\u7ea7\u77e9\u9635\u4e58\u6cd5 acc += tl.dot( a, b) # \u9012\u589e\u6307\u9488\uff0c\u4ee5\u4fbf\u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u671f\u95f4\u52a0\u8f7d A \u548c B \u7684\u4e0b\u4e00\u4e2a\u5757 # A += BLOCK_K * stride_ak B += BLOCK_K * stride_bk # \u5982\u679c\u9700\u8981\uff0c\u878d\u5408\u6cc4\u6f0f\u7684 ReLU # acc = tl.where(acc &gt; = 0, acc, alpha * acc) # \u5199\u56de\u7ed3\u679c C = C + (rm[:, None] * stride_cm + rn[None, :] * stride_cn) mask = (rm[:, None] &lt; M) &amp; ( rn[None, :] &lt; N) tl.store(C, acc, mask=mask) \u624b\u5199\u77e9\u9635\u4e58\u6cd5\u5185\u6838\u7684\u4e00\u4e2a\u91cd\u8981\u4f18\u70b9\u662f\u5b83\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u5b9a\u5236\u4ee5\u9002\u5e94\u5176\u8f93\u5165\u7684\u878d\u5408\u53d8\u6362\uff08\u4f8b\u5982\uff0c\u5207\u7247\uff09\u548c\u8f93\u51fa\uff08\u4f8b\u5982\uff0cLeaky ReLU\uff09\u3002\u5982\u679c\u6ca1\u6709\u50cf Triton \u8fd9\u6837\u7684\u7cfb\u7edf\uff0c\u5bf9\u4e8e\u6ca1\u6709\u7279\u6b8a GPU \u7f16\u7a0b\u4e13\u4e1a\u77e5\u8bc6\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u77e9\u9635\u4e58\u6cd5\u5185\u6838\u7684\u975e\u5e73\u51e1\u4fee\u6539\u5c06\u662f\u9065\u4e0d\u53ef\u53ca\u7684\u3002 Triton \u7684\u826f\u597d\u6027\u80fd\u6765\u81ea\u4e8e\u4ee5 Triton-IR \u4e3a\u4e2d\u5fc3\u7684\u6a21\u5757\u5316\u7cfb\u7edf\u67b6\u6784\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e LLVM \u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5176\u4e2d\u591a\u7ef4\u503c\u5757\u662f\u4e00\u7b49\u516c\u6c11\u3002\n@triton.jit \u88c5\u9970\u5668\u901a\u8fc7\u904d\u5386\u63d0\u4f9b\u7684 Python \u51fd\u6570\u7684\u62bd\u8c61\u8bed\u6cd5\u6811 (AST) \u6765\u5de5\u4f5c\uff0c\u4ee5\u4fbf\u4f7f\u7528\u5e38\u89c1\u7684 SSA \u6784\u9020\u7b97\u6cd5\u5373\u65f6\u751f\u6210 Triton-IR\u3002\u751f\u6210\u7684 IR \u4ee3\u7801\u968f\u540e\u7531\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u540e\u7aef\u8fdb\u884c\u7b80\u5316\u3001\u4f18\u5316\u548c\u81ea\u52a8\u5e76\u884c\u5316\uff0c\u7136\u540e\u518d\u8f6c\u6362\u4e3a\u9ad8\u8d28\u91cf\u7684 LLVM-IR\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3a PTX\uff0c\u4ee5\u4fbf\u5728\u6700\u65b0\u7684 NVIDIA GPU \u4e0a\u6267\u884c\u3002\u76ee\u524d\u4e0d\u652f\u6301 CPU \u548c AMD GPU\uff0c\u4f46\u6211\u4eec\u6b22\u8fce\u65e8\u5728\u89e3\u51b3\u6b64\u9650\u5236\u7684\u793e\u533a\u8d21\u732e\u3002\u6211\u4eec\u53d1\u73b0\u901a\u8fc7 Triton-IR \u4f7f\u7528\u963b\u585e\u7684\u7a0b\u5e8f\u8868\u793a\u5141\u8bb8\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u81ea\u52a8\u6267\u884c\u5404\u79cd\u91cd\u8981\u7684\u7a0b\u5e8f\u4f18\u5316\u3002\u4f8b\u5982\uff0c\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u8ba1\u7b97\u5bc6\u96c6\u578b\u5757\u7ea7\u64cd\u4f5c\uff08\u4f8b\u5982\uff0ctl.dot\uff09\u7684\u64cd\u4f5c\u6570\u81ea\u52a8\u5b58\u50a8\u5230\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528\u6807\u51c6\u6d3b\u6027\u5206\u6790\u6280\u672f\u8fdb\u884c\u5206\u914d/\u540c\u6b65\u3002\u53e6\u4e00\u65b9\u9762\uff0cTriton \u7a0b\u5e8f\u53ef\u4ee5\uff081\uff09\u901a\u8fc7\u540c\u65f6\u6267\u884c\u4e0d\u540c\u7684\u5185\u6838\u5b9e\u4f8b\u8de8 SM \u8fdb\u884c\u9ad8\u6548\u548c\u81ea\u52a8\u5e76\u884c\u5316\uff0c\u4ee5\u53ca\uff082\uff09\u901a\u8fc7\u5206\u6790\u6bcf\u4e2a\u5757\u7ea7\u64cd\u4f5c\u7684\u8fed\u4ee3\u7a7a\u95f4\u5e76\u5728\u4e0d\u540c\u7684 SIMD \u4e2d\u5bf9\u5176\u8fdb\u884c\u5145\u5206\u5206\u533a\u6765\u5728 SM \u5185\u8fdb\u884c\u5e76\u884c\u5316\u5355\u4f4d\uff0c\u5982\u4e0b\u56fe\u3002\u6211\u4eec\u6253\u7b97\u8ba9 Triton \u6210\u4e3a\u4e00\u4e2a\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\u3002\u968f\u610f\u5728 GitHub \u4e0a fork \u6211\u4eec\u7684\u5b58\u50a8\u5e93\uff01\u5982\u679c\u60a8\u6709\u5174\u8da3\u52a0\u5165\u6211\u4eec\u7684\u56e2\u961f\u5e76\u7814\u7a76 Triton \u548c GPU \u5185\u6838\uff0c\u6211\u4eec\u6b63\u5728\u62db\u8058\uff01 Yan, D.\u3001Wang, W. \u548c Chu, X.\uff082020 \u5e74 5 \u6708\uff09\u3002\u63ed\u79d8\u5f20\u91cf\u6838\u5fc3\u4ee5\u4f18\u5316\u534a\u7cbe\u5ea6\u77e9\u9635\u4e58\u6cd5\u3002\u5728 2020 \u5e74 IEEE \u56fd\u9645\u5e76\u884c\u548c\u5206\u5e03\u5f0f\u5904\u7406\u7814\u8ba8\u4f1a (IPDPS)\u3002 IEEE\u3002 Tillet, P.\u3001Kung, HT \u548c Cox, D.\uff082019 \u5e74 6 \u6708\uff09\u3002 Triton\uff1a\u4e00\u79cd\u7528\u4e8e\u5e73\u94fa\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u7684\u4e2d\u95f4\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u3002\u5728\u7b2c\u4e09\u5c4a ACM SIGPLAN \u673a\u5668\u5b66\u4e60\u548c\u7f16\u7a0b\u8bed\u8a00\u56fd\u9645\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\uff08\u7b2c 10-19 \u9875\uff09\u4e2d\u3002\nBraun, M.\u3001Buchwald, S.\u3001Hack, S.\u3001Lei\u00dfa, R.\u3001Mallon, C. \u548c Zwinkau, A.\uff082013 \u5e74 3 \u6708\uff09\u3002\u7b80\u5355\u9ad8\u6548\u7684\u9759\u6001\u5355\u8d4b\u503c\u5f62\u5f0f\u6784\u9020\u3002\u5728\u7f16\u8bd1\u5668\u6784\u5efa\u56fd\u9645\u4f1a\u8bae\u4e0a\uff08\u7b2c 102-122 \u9875\uff09\u3002\u65af\u666e\u6797\u683c\uff0c\u67cf\u6797\uff0c\u6d77\u5fb7\u5821\u3002", "note_en": "We&#39;re releasing Triton 1.0, an open-source Python-like programming language which enables researchers with no CUDA experience to write highly efficient GPU code\u2014most of the time on par with what an expert would be able to produce. Triton makes it possible to reach peak hardware performance with relatively little effort; for example, it can be used to write FP16 matrix multiplication kernels that match the performance of cuBLAS\u2014something that many GPU programmers can&#39;t do\u2014in under 25 lines of code. Our researchers have already used it to produce kernels that are up to 2x more efficient than equivalent Torch implementations, and we&#39;re excited to work with the community to make GPU programming more accessible to everyone.\n   in the field of Deep Learning are generally implemented using a combination of native framework operators. While convenient, this approach often requires the creation (and/or movement) of many temporary tensors, which can hurt the performance of neural networks at scale. These issues can be mitigated by writing specialized GPU kernels, but doing so can be surprisingly difficult due to the many intricacies of GPU programming.    And, although a variety of systems have recently emerged   to make this process easier, we have found them to be either too verbose, lack flexibility or generate code noticeably slower than our hand-tuned baselines. This has led us to extend and improve Triton , a recent language and compiler whose original creator now works at OpenAI.\n  The architecture of modern GPUs can be roughly divided into three major components\u2014DRAM, SRAM and ALUs\u2014each of which must be considered when optimizing CUDA code:\n Memory transfers from DRAM must be  coalesced into large transactions to leverage the large bus width of modern memory interfaces.\n Data must be manually stashed to SRAM prior to being re-used, and managed so as to minimize shared memory bank conflicts upon retrieval.\n Computations must be partitioned and scheduled carefully, both across and within Streaming Multiprocessors (SMs), so as to promote instruction/thread-level parallelism and leverage special-purpose ALUs (e.g., tensor cores).\n  Reasoning about all these factors can be challenging, even for seasoned CUDA programmers with many years of experience. The purpose of Triton is to fully automate these optimizations, so that developers can better focus on the high-level logic of their parallel code. Triton aims to be broadly applicable, and therefore does not automatically schedule work across SMs -- leaving some important algorithmic considerations (e.g. tiling, inter-SM synchronization) to the discretion of developers.\n    Out of all the Domain Specific Languages and JIT-compilers available, Triton is perhaps most similar to Numba: kernels are defined as decorated Python functions, and launched concurrently with different  program_id\u2019s on a grid of so-called  instances. However, as shown in the code snippet below, the resemblance stops there: Triton exposes intra-instance parallelism via operations on  blocks\u2014small arrays whose dimensions are powers of two\u2014rather than a Single Instruction, Multiple Thread (SIMT)  execution model. In doing so, Triton effectively abstracts away all the issues related to concurrency  within CUDA thread blocks (e.g., memory coalescing, shared memory synchronization/conflicts, tensor core scheduling).\n BLOCK = 512# This is a GPU kernel in Numba.# Different instances of this# function may run in parallel.@jitdef add(X, Y, Z, N): # In Numba/CUDA, each kernel # instance itself uses an SIMT execution # model, where instructions are executed in # parallel for different values of threadIdx tid = threadIdx.x bid = blockIdx.x # scalar index idx = bid * BLOCK + tid if id &lt; N: # There is no pointer in Numba. # Z,X,Y are dense tensors Z[idx] = X[idx] + Y[idx]...grid = (ceil_div(N, BLOCK),)block = (BLOCK,)add[grid, block](x, y, z, x.shape[0])\n BLOCK = 512# This is a GPU kernel in Triton.# Different instances of this# function may run in parallel.@jitdef add(X, Y, Z, N): # In Triton, each kernel instance # executes block operations on a # single thread: there is no construct # analogous to threadIdx pid = program_id(0) # block of indices idx = pid * BLOCK + arange(BLOCK) mask = idx &lt; N # Triton uses pointer arithmetics # rather than indexing operators x = load(X + idx, mask=mask) y = load(Y + idx, mask=mask) store(Z + idx, x + y, mask=mask)...grid = (ceil_div(N, BLOCK),)# no thread-blockadd[grid](x, y, z, x.shape[0])\n  While this may not be particularly helpful for embarrassingly parallel (i.e., element-wise) computations, it can greatly simplify the development of more complex GPU programs.\n Consider for example the case of a fused softmax kernel (below) in which each instance normalizes a different row of the given input tensor $X \\in \\mathbb{R}^{M \\times N}$. Standard CUDA implementations of this parallelization strategy can be challenging to write, requiring explicit synchronization between threads as they concurrently reduce the same row of $X$. Most of this complexity goes away with Triton, where each kernel instance loads the row of interest and normalizes it sequentially using NumPy-like primitives.\n import tritonimport triton.language as tl@triton.jitdef softmax(Y, stride_ym, stride_yn, X, stride_xm, stride_xn, M, N): # row index m = tl.program_id(0) # col indices # this specific kernel only works for matrices that # have less than BLOCK_SIZE columns BLOCK_SIZE = 1024 n = tl.arange(0, BLOCK_SIZE) # the memory address of all the elements # that we want to load can be computed as follows X = X + m * stride_xm + n * stride_xn # load input data; pad out-of-bounds elements with 0 x = tl.load(X, mask=n &lt; N, other=-float(&#39;inf&#39;)) # compute numerically-stable softmax z = x - tl.max(x, axis=0) num = tl.exp(z) denom = tl.sum(num, axis=0) y = num / denom # write back to Y Y = Y + m * stride_ym + n * stride_yn tl.store(Y, y, mask=n &lt; N)import torch# Allocate input/output tensorsX = torch.normal(0, 1, size=(583, 931), device=&#39;cuda&#39;)Y = torch.empty_like(X)# SPMD launch gridgrid = (X.shape[0], )# enqueue GPU kernelsoftmax[grid](Y, Y.stride(0), Y.stride(1), X, X.stride(0), X.stride(1), X.shape[0] , X.shape[1])\n  Note that the Triton JIT treats X and Y as  pointers rather than tensors; we felt like retaining low-level control of memory accesses was important to address more complex data structures (e.g., block-sparse tensors).\n Importantly, this particular implementation of softmax keeps the rows of $X$ in SRAM throughout the entire normalization process, which maximizes data reuse when applicable (~&lt;32K columns). This differs from PyTorch\u2019s internal CUDA code, whose use of temporary memory makes it more general but significantly slower (below). The bottom line here is not that Triton is inherently better, but that it simplifies the development of specialized kernels that can be much faster than those found in general-purpose libraries.\n   The lower performance of the Torch (v1.9) JIT highlights the difficulty of automatic CUDA code generation from sequences of high-level tensor operations.\n @torch.jit.scriptdef softmax(x): x_max = x.max(dim=1)[0] z = x - x_max[:, None] numerator = torch.exp(x) denominator = numerator.sum(dim=1) return numerator / denominator[:, None]\n   Being able to write fused kernels for element-wise operations and reductions is important, but not sufficient given the prominence of matrix multiplication tasks in neural networks. As it turns out, Triton also works very well for those, achieving peak performance with just ~25 lines of Python code. On the other hand, implementing something similar in CUDA would take  a lot more effort and would even be likely to achieve lower performance.\n @triton.jitdef matmul(A, B, C, M, N, K, stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn, **META): # extract metaparameters BLOCK_M, GROUP_M = META[&#39;BLOCK_M&#39;], META[&#39;GROUP_M&#39;] BLOCK_N = META[&#39;BLOCK_N&#39;] BLOCK_K = META[&#39;BLOCK_K&#39;] # programs are grouped together to improve L2 hit rate _pid_m = tl.program_id(0) _pid_n = tl.program_id(1) pid_m = _pid_m // GROUP_M pid_n = (_pid_n * GROUP_M) + (_pid_m % GROUP_M) # rm (resp. rn) denotes a range of indices # for rows (resp. col) of C rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M) rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N) # rk denotes a range of indices for columns # (resp. rows) of A (resp. B) rk = tl.arange(0, BLOCK_K) # the memory addresses of elements in the first block of # A and B can be computed using numpy-style broadcasting A = A + (rm[:, None] * stride_am + rk[None, :] * stride_ak) B = B + (rk [:, None] * stride_bk + rn[None, :] * stride_bn) # initialize and iteratively update accumulator acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32) for k in range(K, 0, -BLOCK_K): a = tl.load(A) b = tl.load(B) # block level matrix multiplication acc += tl.dot(a, b) # increment pointers so that the next blocks of A and B # are loaded during the next iteration A += BLOCK_K * stride_ak B += BLOCK_K * stride_bk # fuse leaky ReLU if desired # acc = tl.where(acc &gt;= 0, acc, alpha * acc) # write back result C = C + (rm[:, None] * stride_cm + rn[None, :] * stride_cn) mask = (rm[:, None] &lt; M) &amp; (rn[None, :] &lt; N) tl.store(C, acc, mask=mask)\n  One important advantage of handwritten matrix multiplication kernels is that they can be customized as desired to accommodate fused transformations of their inputs (e.g., slicing) and outputs (e.g., Leaky ReLU). Without a system like Triton, non-trivial modifications of matrix multiplication kernels would be out-of-reach for developers without exceptional GPU programming expertise.\n    The good performance of Triton comes from a modular system architecture centered around Triton-IR, an LLVM-based intermediate representation in which multi-dimensional blocks of values are first-class citizens.\n  The  @triton.jit decorator works by walking the Abstract Syntax Tree (AST) of the provided Python function so as to generate Triton-IR on-the-fly using a common SSA construction algorithm.  The resulting IR code is then simplified, optimized and automatically parallelized by our compiler backend, before being converted into high-quality LLVM-IR\u2014and eventually PTX\u2014for execution on recent NVIDIA GPUs. CPUs and AMD GPUs are not supported at the moment, but we welcome community contributions aimed at addressing this limitation.\n  We have found that the use of blocked program representations via Triton-IR allows our compiler to automatically perform a wide variety of important program optimizations. For example, data can be automatically stashed to shared memory by looking at the operands of computationally intensive block-level operations (e.g.,  tl.dot)\u2014and allocated/synchronized using standard liveness analysis techniques.\n  On the other hand, Triton programs can be efficiently and automatically parallelized both (1) across SMs by executing different kernel instances concurrently, and (2) within SMs by analyzing the iteration space of each block-level operation and partitioning it adequately across different SIMD units, as shown below.\n   We intend for Triton to become a community-driven project. Feel free to fork our repository on  GitHub!\n If you\u2019re interested in joining our team and working on Triton &amp; GPU kernels,  we\u2019re hiring!\n  Yan, D., Wang, W., &amp; Chu, X. (2020, May).  Demystifying tensor cores to optimize half-precision matrix multiply. In  2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE.\n   Tillet, P., Kung, H. T., &amp; Cox, D. (2019, June).  Triton: an intermediate language and compiler for tiled neural network computations. In  Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages (pp. 10-19).\n  Braun, M., Buchwald, S., Hack, S., Lei\u00dfa, R., Mallon, C., &amp; Zwinkau, A. (2013, March).  Simple and efficient construction of static single assignment form. In  International Conference on Compiler Construction (pp. 102-122). Springer, Berlin, Heidelberg.", "posttime": "2021-07-29 22:00:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u5f00\u6e90,\u795e\u7ecf\u7f51\u7edc,\u7f16\u7a0b,\u7528\u4e8e", "title": "Triton\uff1a\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u6e90 GPU \u7f16\u7a0b", "title_en": "Triton: Open-Source GPU Programming for Neural Networks", "transed": 1, "url": "https://www.openai.com/blog/triton/", "via": "", "real_tags": ["\u5f00\u6e90", "\u795e\u7ecf\u7f51\u7edc", "\u7f16\u7a0b", "\u7528\u4e8e"]}, {"category": "", "categoryclass": "", "imagename": "9894da14e366784fec9525c408f8a980.jpg", "infoid": 1070263, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fc7\u53bb\uff0c\u5982\u679c\u60a8\u60f3\u5c06\u60a8\u7684\u4fe1\u606f\u4f20\u8fbe\u7ed9\u7279\u5b9a\u7684\u4eba\u7fa4\uff0c\u60a8\u4f1a\u5728\u5e7f\u544a\u724c\u4e0a\u8d2d\u4e70\u5e7f\u544a\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u4eba\u53ef\u80fd\u4f1a\u770b\u5230\u5b83\uff0c\u6216\u8005\u5728\u76ee\u6807\u5e02\u573a\u9605\u8bfb\u7684\u62a5\u7eb8\u7248\u5757\u4e2d\u8d2d\u4e70\u5e7f\u544a\u4f4d\u3002\u5728\u4e92\u8054\u7f51\u4e0a\u5728\u8d85\u5b9a\u5411\u5e7f\u544a\u4e4b\u524d\uff0c\u8fd9\u610f\u5473\u7740\u4e3a\u60a8\u7684\u4ea7\u54c1\u5bfb\u627e\u5728\u7ebf\u51fa\u7248\u7269\u6216\u5728\u641c\u7d22\u5f15\u64ce\u4e0a\u8d2d\u4e70\u7279\u5b9a\u7684\u76f8\u5173\u672f\u8bed\u3002\u5982\u679c\u60a8\u6253\u7b97\u63a8\u51fa\u65b0\u7684\u732b\u7cae\u7cfb\u5217\uff1f\u60a8\u5728 ModernCat.com \u4e0a\u6295\u653e\u5e7f\u544a\u6216\u652f\u4ed8\u201c\u732b\u7cae\u201d\u7684\u9876\u7ea7\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u3002\u968f\u7740\u7531\u4e2a\u4eba\u6570\u636e\u6536\u96c6\u63d0\u4f9b\u652f\u6301\u7684\u5e7f\u544a\u6280\u672f\u7684\u5174\u8d77\uff0c\u5e7f\u544a\u5546\u53ef\u4ee5\u901a\u8fc7\u5411\u5e7f\u544a\u6280\u672f\u516c\u53f8\u4ed8\u8d39\uff0c\u8ba9\u4ed6\u4eec\u5728\u89c2\u4f17\u6240\u5230\u4e4b\u5904\u5c55\u793a\u4ed6\u4eec\u7684\u5e7f\u544a\uff0c\u4ece\u800c\u63a5\u89e6\u5230\u7231\u732b\u4eba\u58eb\uff08\u6216\u4efb\u4f55\u76ee\u6807\u7fa4\u4f53\uff09\u3002\u4e5f\u8bb8\u60a8\u4f1a\u4e3a ModernCat.com \u652f\u4ed8\u9ad8\u4ef7\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u662f\u5728\u60a8\u4f7f\u7528 cookie \u8ddf\u8e2a\u5176\u4ed6\u7f51\u7ad9\u7684\u8bbf\u95ee\u8005\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u66f4\u4fbf\u5b9c\u5730\u901a\u8fc7\u8f83\u4f4e\u8d28\u91cf\u7684\u6e20\u9053\u63a5\u89e6\u5230\u76f8\u540c\u7684\u4eba\u3002\u8fd9\u79cd\u8de8\u7ad9\u70b9\u7684\u4fb5\u5165\u6027\u5b9a\u4f4d\u548c\u8ddf\u8e2a\u4eba\u5458\u7684\u7ed3\u679c\u662f\u9010\u5e95\u7ade\u4e89\u3002\u5e7f\u544a\u8d39\u7528\u5df2\u7ecf\u4ece\u7531\u77e5\u8bc6\u6e0a\u535a\u7684\u4f5c\u8005\u64b0\u5199\u7684\u5185\u5bb9\u7ecf\u8fc7\u5145\u5206\u7814\u7a76\u7684\u51fa\u7248\u7269\u8f6c\u79fb\u5230\u4f4e\u8d28\u91cf\u7684 SEO \u4f18\u5316\u7ad9\u70b9\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u5177\u6709\u91cd\u65b0\u5229\u7528\u7684\u6750\u6599\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4ed8\u8d39\u5e7f\u544a\u5370\u8c61\u3002\u867d\u7136\u62a5\u7eb8\u8870\u843d\u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u4f46\u8fd9\u79cd\u52a8\u6001\u8f6c\u53d8\u662f\u4e00\u4e2a\u4e3b\u8981\u56e0\u7d20\u3002\u4e0e\u5176\u82b1\u94b1\u5728\u8c03\u67e5\u8bb0\u8005\u8eab\u4e0a\uff0c\u5236\u9020\u70b9\u51fb\u8bf1\u9975\u6765\u6539\u5199\u5176\u4ed6\u5730\u65b9\u6240\u505a\u7684\u7814\u7a76\uff0c\u8fd9\u5728\u7ecf\u6d4e\u4e0a\u66f4\u6709\u610f\u4e49\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u4ece\u5e7f\u544a\u6280\u672f\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6240\u6709\u7684\u5370\u8c61\u90fd\u662f\u4e00\u6837\u7684\u3002\u5982\u679c\u5e7f\u544a\u51fa\u73b0\u5728\u8bb0\u5f55\u7eb8\u4e0a\u6216\u70b9\u51fb\u8bf1\u9975\u7f51\u7ad9\u4e0a\uff0c\u5982\u679c\u5b83\u4eec\u63a5\u89e6\u5230\u7c7b\u4f3c\u7684\u53d7\u4f17\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\u3002\u5e7f\u544a\u6d4f\u89c8\u91cf\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u5546\u54c1\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5e7f\u544a\u8d44\u52a9\u7684\u5305\u62ec\u8bb8\u591a\u62a5\u7eb8\u5728\u5185\u7684\u7f51\u7ad9\uff0c\u4e89\u593a\u89c2\u70b9\u7684\u4ee3\u4ef7\u662f\u727a\u7272\u8d28\u91cf\u3002\u5207\u65ad\u5e7f\u544a\u6280\u672f\u76d1\u89c6\u6280\u672f\u3002\u5e7f\u544a\u6280\u672f\u7531\u4e2a\u4eba\u6570\u636e\u9a71\u52a8\uff0c\u4f46\u6709\u4e00\u4e9b\u4f8b\u5916\uff0c\u8fd9\u4e9b\u6570\u636e\u662f\u901a\u8fc7\u4f7f\u7528\u7b2c\u4e09\u65b9 cookie\u3001\u6307\u7eb9\u8bc6\u522b\u548c\u5176\u4ed6\u8ddf\u8e2a\u6280\u672f\u4ece\u5404\u4e2a\u53d1\u5e03\u5546\u7f51\u7ad9\u6536\u96c6\u7684\u3002\u53d1\u5e03\u5546\u5e94\u6d88\u9664\u6216\u4e25\u683c\u9650\u5236\u53ef\u4ee5\u5728\u5176\u7f51\u7ad9\u4e0a\u8fd0\u884c\u7684\u5e7f\u544a\u6280\u672f\u3002\u505c\u6b62\u4e3a\u8ddf\u8e2a\u516c\u53f8\u5c55\u793a\u5e7f\u544a\u63d0\u4f9b\u5e7f\u544a\u7a7a\u95f4\u3002\u5982\u679c\u65e0\u6cd5\u5728\u8ddf\u8e2a\u65b9\u9762\u9650\u5236\u5e7f\u544a\u7f51\u7edc\uff0c\u5219\u5220\u9664\u5b8c\u5168\u8ddf\u8e2a\u7528\u6237\u7684\u5e7f\u544a\u3002\u4e0d\u8fc7\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u653e\u5f03\u60a8\u7684\u5e7f\u544a\u6536\u5165\u3002\u867d\u7136\u5728\u7ebf\u5e7f\u544a\u7a7a\u95f4\u4f3c\u4e4e\u662f\u65e0\u9650\u7684\uff0c\u4f46\u4f18\u8d28\u5e7f\u544a\u7a7a\u95f4\u7684\u6570\u91cf\u975e\u5e38\u6709\u9650\u3002\u8f83\u5927\u7684\u53d1\u5e03\u5546\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5e7f\u544a\u5546\u5408\u4f5c\uff0c\u79c1\u4e0b\u6295\u653e\u5e7f\u544a\uff0c\u8fd9\u901a\u5e38\u4f1a\u589e\u52a0\u4ed6\u4eec\u81ea\u5df1\u7684\u6536\u5165\u6b63\u5982\u7ebd\u7ea6\u65f6\u62a5\u6240\u505a\u7684\u90a3\u6837\u3002\u5bf9\u4e8e\u89c4\u6a21\u592a\u5c0f\u6216\u65e0\u6cd5\u8058\u8bf7\u9500\u552e\u4eba\u5458\u7684\u51fa\u7248\u5546\uff0c\u4ed6\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5e7f\u544a\u7f51\u7edc\uff0c\u5728\u4e0d\u727a\u7272\u7528\u6237\u9690\u79c1\u6216\u4e3a\u4e86\u5e7f\u544a\u7f51\u7edc\u7684\u5229\u76ca\u800c\u7a83\u53d6\u53d7\u4f17\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u6295\u653e\u5e7f\u544a\u3002\n\u4e3a\u4e2d\u5c0f\u578b\u53d1\u5e03\u5546\u63d0\u4f9b\u4e00\u79cd\u5728\u4e0d\u653e\u5f03\u5176\u9690\u79c1\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7\u53d7\u4f17\u83b7\u5229\u7684\u65b9\u5f0f\u662f\u6211\u4eec\u5efa\u7acb EthicalAds \u7f51\u7edc\u7684\u539f\u56e0\u3002\u6709\u8bb8\u591a\u4ee5\u5f00\u53d1\u4eba\u5458\u4e3a\u4e2d\u5fc3\u7684\u7f51\u7ad9\u89c4\u6a21\u592a\u5c0f\u800c\u65e0\u6cd5\u76f4\u63a5\u9500\u552e\u5e7f\u544a\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u4e0d\u4f1a\u635f\u5bb3\u60a8\u7684\u53d7\u4f17\u7684\u5e7f\u544a\u7f51\u7edc\uff0c\u52a0\u5165 EthicalAds \u5e76\u5e2e\u52a9\u4fdd\u62a4\u7f51\u7edc\u9690\u79c1\uff01", "note_en": "It used to be if you wanted to reach a particular group of people with your messageyou\u2019d buy ad space on a billboard where those people are likely to see itor buy an ad spot in a newspaper section that your target market reads.On the internet before hyper-targeted advertising,this meant finding an online publication for your productor buying up specific, relevant terms on search engines.If you plan to introduce a new line of cat food?You run an ad on  ModernCat.comor you pay to take the top search engine result for &#34;cat food&#34;.\n With the rise of ad tech powered by personal data collection,advertisers can reach cat lovers (or any targeted group)by paying ad tech companies to show their ads wherever the audience goes.Maybe you pay top dollar for ModernCat.com for a little while,but after you&#39;ve got cookies to track their visitors onto other sites,you can reach the same folks on lower quality channels more cheaply.\n  The result of this intrusive targeting and tracking people across sites is a race to the bottom.Advertising dollars have moved away from publications with well researched content written by knowledgeable authorsto low quality SEO optimized sites with re-purposed material developed to maximize paid ad impressions.While there are a lot of reasons for the fall of newspapers, this dynamic shift is a major factor.Instead of spending money on investigative reporters,it makes more economic sense to churn out clickbait that rephrases research done elsewhere.\n In essence, all impressions are the same from an ad tech perspective.It doesn&#39;t matter if ads appear on the paper of record or on a clickbait siteif they reach a similar audience.Ad views have become a commodity.For most ad-funded sites including many newspapers,the race for views comes at the cost of sacrificing quality.\n   Cut off ad tech surveillance technology. Ad tech is driven by personal data which, with some exceptions, is collected from individual publishers sites through the use of third-party cookies, fingerprinting, and other tracking technologies. Publishers should eliminate or severely restrict what ad tech can run on their site.\n Stop providing ad space for tracking companies to show ads. Where it isn&#39;t possible to restrict the ad network in terms of tracking, remove ads that track users completely.\n This doesn&#39;t mean giving up your ad revenue, though.While there seems to be unlimited ad space online there is a very limited amount of quality ad space.Larger publishers can work directly with advertisers to privately place ads often driving up their own revenue as the New York Times did.For publishers that are too small or unable to hire a sales force,they can find an ad network that will place ads without sacrificing user privacyor siphoning off their audience&#39;s data for the ad network&#39;s gain.\n Giving small and mid-size publishers a way to monetize their audience without giving up their privacyis the reason we built the EthicalAds network.There are lots of developer-focused sites that are too small to sell ads directly.If you&#39;re looking for an ad network that won&#39;t compromise your audience, join EthicalAds and help preserve privacy on the web!", "posttime": "2021-07-29 21:59:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,\u9ad8\u8d28\u91cf,ad", "title": "\u4fb5\u5165\u6027\u5e7f\u544a\u5b9a\u4f4d\u5bf9\u65b0\u95fb\u4e1a\u548c\u5176\u4ed6\u9ad8\u8d28\u91cf\u51fa\u7248\u5546\u4e0d\u5229", "title_en": "Invasive ad targeting is bad for journalism and other high-quality publishers", "transed": 1, "url": "https://www.ethicalads.io/blog/2021/05/how-invasive-ad-targeting-is-bad-for-journalism-and-other-high-quality-publishers/", "via": "", "real_tags": ["\u5e7f\u544a", "\u9ad8\u8d28\u91cf", "ad"]}, {"category": "", "categoryclass": "", "imagename": "d8ed0716c028f5fe25a36e0a6c2a4302.png", "infoid": 1070262, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba9\u6211\u4eec\u56de\u5230 2006 \u5e74\u590f\u5929\u548c EC2 \u7684\u53d1\u5e03\u3002\u6211\u4eec\u4ece\u4e00\u79cd\u5b9e\u4f8b\u7c7b\u578b\uff08\u53e4\u8001\u7684 m1.small\uff09\u3001\u5b89\u5168\u7ec4\u548c\u53e4\u8001\u7684\u7f8e\u56fd\u4e1c\u90e8\uff08\u5f17\u5409\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df\u5f00\u59cb\u3002 EC2-Classic \u7f51\u7edc\u6a21\u578b\u662f\u6241\u5e73\u7684\uff0c\u5177\u6709\u5728\u542f\u52a8\u65f6\u5206\u914d\u7684\u516c\u5171 IP \u5730\u5740\u3002\u6211\u4eec\u7684\u521d\u59cb\u5ba2\u6237\u7acb\u5373\u770b\u5230\u4e86\u4ef7\u503c\uff0c\u5e76\u5f00\u59cb\u4ee5\u591a\u79cd\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528 EC2\u3002\u6211\u4eec\u6258\u7ba1\u4e86\u7f51\u7ad9\uff0c\u652f\u6301 Justin.TV \u7684\u53d1\u5e03\uff0c\u5e76\u5e2e\u52a9 Animoto \u5728\u4ed6\u4eec\u7684 Facebook \u5e94\u7528\u7a0b\u5e8f\u75c5\u6bd2\u5f0f\u4f20\u64ad\u65f6\u6269\u5c55\u5230\u5f53\u65f6\u60ca\u4eba\u7684 3400 \u4e2a\u5b9e\u4f8b\u3002 EC2 \u7684\u4e00\u4e9b\u65e9\u671f\u589e\u5f3a\u529f\u80fd\u4fa7\u91cd\u4e8e\u7f51\u7edc\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5728 2008 \u5e74\u521d\u6dfb\u52a0\u4e86\u5f39\u6027 IP \u5730\u5740\uff0c\u4ee5\u4fbf\u5730\u5740\u53ef\u4ee5\u957f\u671f\u5b58\u5728\u5e76\u5728\u5fc5\u8981\u65f6\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u4e0e\u4e0d\u540c\u7684\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 Auto Scaling\u3001Load Balancing \u548c CloudWatch\uff0c\u4ee5\u5e2e\u52a9\u60a8\u6784\u5efa\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u65e9\u671f\u5ba2\u6237\u5e0c\u671b\u5c06\u4ed6\u4eec\u7684 EC2 \u5b9e\u4f8b\u8fde\u63a5\u5230\u4ed6\u4eec\u7684\u516c\u53f8\u7f51\u7edc\uff0c\u5bf9 IP \u5730\u5740\u8303\u56f4\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\uff0c\u5e76\u6784\u5efa\u66f4\u590d\u6742\u7684\u7f51\u7edc\u62d3\u6251\u3002\u6211\u4eec\u5728 2009 \u5e74\u63a8\u51fa\u4e86 Amazon Virtual Private Cloud\uff0c\u5e76\u5728 2013 \u5e74\u901a\u8fc7 Virtual Private Clouds for Everyone \u4f7f VPC \u6a21\u578b\u57fa\u672c\u4e0a\u900f\u660e\u3002\u9000\u5f79 EC2-Classic EC2-Classic \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u670d\u52a1\uff0c\u4f46\u6211\u4eec\u5c06\u7ed9\u5b83\u4e00\u5757\u91d1\u8868\u548c\u5f53\u4e4b\u65e0\u6127\u7684\u9001\u522b\uff01\u8fd9\u7bc7\u6587\u7ae0\u5c06\u544a\u8bc9\u60a8\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u3001\u9700\u8981\u505a\u4ec0\u4e48\u4ee5\u53ca\u4f55\u65f6\u9700\u8981\u8fd9\u6837\u505a\u3002\u5728\u6211\u6df1\u5165\u7814\u7a76\u4e4b\u524d\uff0c\u8bf7\u653e\u5fc3\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u4f7f\u8fd9\u4e00\u5207\u987a\u5229\u4e14\u65e0\u4e2d\u65ad\u3002\u6211\u4eec\u4e0d\u6253\u7b97\u4e2d\u65ad\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6211\u4eec\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u5145\u8db3\u7684\u51c6\u5907\u65f6\u95f4\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8ba1\u5212\u3001\u6d4b\u8bd5\u548c\u6267\u884c\u8fc1\u79fb\u3002\u9664\u4e86\u8fd9\u7bc7\u535a\u6587\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u5de5\u5177\u3001\u6587\u6863\u548c\u4eba\u5458\uff0c\u5b83\u4eec\u90fd\u65e8\u5728\u63d0\u4f9b\u5e2e\u52a9\u3002\u65f6\u95f4 \u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ed6\u4eec\u7684\u5ba2\u6237\u56e2\u961f\u901a\u77e5\u5176\u4f59\u7684 EC2-Classic \u5ba2\u6237\uff0c\u5e76\u5c06\u5f88\u5feb\u5f00\u59cb\u5728 Personal Health Dashboard \u4e2d\u53d1\u5e03\u901a\u77e5\u3002\u4ee5\u4e0b\u662f\u60a8\u65e5\u5386\u7684\u91cd\u8981\u65e5\u671f\uff1a\n2013 \u5e74 12 \u6708 4 \u65e5\u4e4b\u540e\u521b\u5efa\u7684\u6240\u6709 AWS \u8d26\u6237\u90fd\u5df2\u7ecf\u662f VPC \u4e13\u7528\u7684\uff0c\u9664\u975e\u56e0\u652f\u6301\u8bf7\u6c42\u800c\u542f\u7528\u4e86 EC2-Classic\u3002 2021 \u5e74 10 \u6708 30 \u65e5\uff0c\u6211\u4eec\u5c06\u4e3a\u533a\u57df\u4e2d\u6ca1\u6709\u6d3b\u52a8 EC2-Classic \u8d44\u6e90\u7684 AWS \u8d26\u6237\u7981\u7528\u533a\u57df\u4e2d\u7684 EC2-Classic\uff0c\u5982\u4e0b\u6240\u5217\u3002\u6211\u4eec\u8fd8\u5c06\u505c\u6b62\u9500\u552e EC2-Classic \u7684 1 \u5e74\u548c 3 \u5e74\u9884\u7559\u5b9e\u4f8b\u3002\u6211\u4eec\u9884\u8ba1\u6240\u6709\u8fc1\u79fb\u5c06\u5728 2022 \u5e74 8 \u6708 15 \u65e5\u5b8c\u6210\uff0c\u4efb\u4f55 AWS \u8d26\u6237\u4e2d\u90fd\u4e0d\u5b58\u5728\u5269\u4f59\u7684 EC2-Classic \u8d44\u6e90\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e0d\u6253\u7b97\u4e2d\u65ad\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5e76\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u5e2e\u52a9\u60a8\u6ee1\u8db3\u8fd9\u4e9b\u65e5\u671f\u3002\u53d7\u5f71\u54cd\u7684\u8d44\u6e90 \u4e3a\u4e86\u4ece EC2-Classic \u5b8c\u5168\u8fc1\u79fb\u5230 VPC\uff0c\u60a8\u9700\u8981\u67e5\u627e\u3001\u68c0\u67e5\u548c\u8fc1\u79fb\u4ee5\u4e0b\u6240\u6709\u8d44\u6e90\uff1a \u5728\u51c6\u5907\u8fc1\u79fb\u65f6\uff0c\u8bf7\u52a1\u5fc5\u9605\u8bfb\u4ece EC2-Classic \u8fc1\u79fb\u5230 VPC\u3002\u60a8\u53ef\u80fd\u9700\u8981\u4e3a\u60a8\u7684\u8d26\u6237\u521b\u5efa\uff08\u6216\u91cd\u65b0\u521b\u5efa\uff0c\u5982\u679c\u60a8\u5220\u9664\u4e86\u5b83\uff09\u9ed8\u8ba4 VPC\u3002\u8981\u4e86\u89e3\u5982\u4f55\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u9605\u8bfb\u521b\u5efa\u9ed8\u8ba4 VPC\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u80fd\u591f\u4fee\u6539\u73b0\u6709\u8d44\u6e90\uff1b\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u9700\u8981\u5728 VPC \u4e2d\u521b\u5efa\u65b0\u7684\u7b49\u6548\u8d44\u6e90\u3002\u67e5\u627e EC2-Classic \u8d44\u6e90 \u4f7f\u7528 EC2 Classic Resource Finder \u811a\u672c\u67e5\u627e\u60a8\u8d26\u6237\u4e2d\u7684\u6240\u6709 EC2-Classic \u8d44\u6e90\u3002\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u5355\u4e2a AWS \u8d26\u6237\u4e2d\u8fd0\u884c\u5b83\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u7684\u591a\u8d26\u6237\u5305\u88c5\u5668\u9488\u5bf9 AWS \u7ec4\u7ec7\u7684\u6bcf\u4e2a\u8d26\u6237\u8fd0\u884c\u5b83\u3002 Resource Finder \u8bbf\u95ee\u6bcf\u4e2a AWS \u533a\u57df\uff0c\u67e5\u627e\u7279\u5b9a\u8d44\u6e90\uff0c\u5e76\u751f\u6210\u4e00\u7ec4 CSV \u6587\u4ef6\u3002\u8fd9\u662f\u6211\u7684\u8fd0\u884c\u8f93\u51fa\u7684\u7b2c\u4e00\u90e8\u5206\uff1a\u811a\u672c\u9700\u8981\u51e0\u5206\u949f\u624d\u80fd\u8fd0\u884c\u3002\u6211\u68c0\u67e5\u4e86 CSV \u6587\u4ef6\u5217\u8868\u4ee5\u4e86\u89e3\u6211\u9700\u8981\u505a\u591a\u5c11\u5de5\u4f5c\uff1a \u539f\u6765\u6211\u6709\u4e00\u4e9b\u5df2\u505c\u6b62\u7684 OpsWorks \u5806\u6808\uff0c\u6211\u53ef\u4ee5\u8fc1\u79fb\u6216\u5220\u9664\u5b83\u4eec\uff1a \u8fc1\u79fb\u5de5\u5177 \u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u8fc1\u79fb\u5de5\u5177\u7684\u6982\u8ff0\u8fc1\u79fb\u60a8\u7684 AWS \u8d44\u6e90\uff1aAWS \u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u670d\u52a1 \u2013 \u4f7f\u7528 AWS MGN \u5c06\u60a8\u7684\u5b9e\u4f8b\u548c\u6570\u636e\u5e93\u4ece EC2-Classic \u8fc1\u79fb\u5230 VPC\uff0c\u540c\u65f6\u5c06\u505c\u673a\u65f6\u95f4\u964d\u81f3\u6700\u4f4e\u3002\u6b64\u670d\u52a1\u4f7f\u7528\u5757\u7ea7\u590d\u5236\u5e76\u5728\u591a\u4e2a\u7248\u672c\u7684 Linux \u548c Windows \u4e0a\u8fd0\u884c\uff08\u9605\u8bfb\u5982\u4f55\u4f7f\u7528\u65b0\u7684 AWS \u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u670d\u52a1\u8fdb\u884c\u76f4\u63a5\u8fc1\u79fb\u8fc1\u79fb\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff09\u3002\u5bf9\u4e8e\u60a8\u8fc1\u79fb\u7684\u6bcf\u53f0\u670d\u52a1\u5668\uff0c\u524d 90 \u5929\u7684\u590d\u5236\u90fd\u662f\u514d\u8d39\u7684\uff1b\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 AWS \u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5b9a\u4ef7\u9875\u9762\u3002\u652f\u6301\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41 \u2013 \u6b64\u5de5\u4f5c\u6d41\u652f\u6301\u7b80\u5355\u7684\u5b9e\u4f8b\u7ea7\u8fc1\u79fb\u3002\u5b83\u5c06\u6e90\u5b9e\u4f8b\u8f6c\u6362\u4e3a AMI\uff0c\u521b\u5efa\u5b89\u5168\u7ec4\u7684\u955c\u50cf\uff0c\u5e76\u5728\u76ee\u6807 VPC \u4e2d\u542f\u52a8\u65b0\u5b9e\u4f8b\u3002\n\u8fc1\u79fb\u7279\u5b9a\u533a\u57df\u5185\u7684\u6240\u6709\u8d44\u6e90\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u652f\u6301\u6848\u4f8b\u6765\u7981\u7528 EC2-Classic\u3002\u5982\u679c\u60a8\u60f3\u907f\u514d\u5728\u8be5\u533a\u57df\u610f\u5916\u521b\u5efa\u65b0\u7684 EC2-Classic \u8d44\u6e90\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u7edd\u5bf9\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5728\u533a\u57df\u4e2d\u7981\u7528 EC2-Classic \u65e8\u5728\u6210\u4e3a\u5355\u5411\u95e8\uff0c\u4f46\u5982\u679c\u60a8\u8fd0\u884c\u5b83\uff0c\u7136\u540e\u53d1\u73b0\u9700\u8981\u4e3a\u533a\u57df\u91cd\u65b0\u542f\u7528 EC2-Classic\uff0c\u60a8\u53ef\u4ee5\u8054\u7cfb AWS Support\u3002\u8bf7\u52a1\u5fc5\u8fd0\u884c\u524d\u9762\u63d0\u5230\u7684\u8d44\u6e90\u67e5\u627e\u5668\uff0c\u5e76\u786e\u4fdd\u60a8\u6ca1\u6709\u7559\u4e0b\u4efb\u4f55\u8d44\u6e90\u3002\u5373\u4f7f\u5e10\u6237\u72b6\u6001\u5df2\u66f4\u6539\uff0c\u8fd9\u4e9b\u8d44\u6e90\u4ecd\u5c06\u7ee7\u7eed\u8fd0\u884c\u5e76\u4ea7\u751f\u8d39\u7528\u3002 IP \u5730\u5740\u8fc1\u79fb \u2013 \u5982\u679c\u60a8\u8981\u8fc1\u79fb EC2 \u5b9e\u4f8b\u4ee5\u53ca\u4e0e\u8be5\u5b9e\u4f8b\u5173\u8054\u7684\u4efb\u4f55\u5f39\u6027 IP \u5730\u5740\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 move-address-to-vpc\uff0c\u7136\u540e\u5c06\u5f39\u6027 IP \u9644\u52a0\u5230\u8fc1\u79fb\u7684\u5b9e\u4f8b\u3002\u8fd9\u5c06\u5141\u8bb8\u60a8\u7ee7\u7eed\u901a\u8fc7\u539f\u59cb DNS \u540d\u79f0\u5f15\u7528\u5b9e\u4f8b\u3002 Classic Load Balancer \u2013 \u5982\u679c\u60a8\u8ba1\u5212\u8fc1\u79fb Classic Load Balancer \u5e76\u9700\u8981\u4fdd\u7559\u539f\u59cb DNS \u540d\u79f0\uff0c\u8bf7\u8054\u7cfb AWS Support \u6216\u60a8\u7684 AWS \u5ba2\u6237\u56e2\u961f\u3002\u66f4\u65b0\u5b9e\u4f8b\u7c7b\u578b EC2-Classic \u4e2d\u53ef\u7528\u7684\u6240\u6709\u5b9e\u4f8b\u7c7b\u578b\u5728 VPC \u4e2d\u4e5f\u53ef\u7528\u3002\u4f46\u662f\uff0c\u8bb8\u591a\u8f83\u65b0\u7684\u5b9e\u4f8b\u7c7b\u578b\u4ec5\u5728 VPC \u4e2d\u53ef\u7528\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8003\u8651\u5c06\u66f4\u65b0\u4f5c\u4e3a\u6574\u4f53\u8fc1\u79fb\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662f\u4e00\u5f20\u5e2e\u52a9\u60a8\u5165\u95e8\u7684\u5730\u56fe\uff1a\u4f9d\u9760\u6211\u4eec AWS Support \u7684\u540c\u4e8b\u968f\u65f6\u51c6\u5907\u5e2e\u52a9\u60a8\u8fc1\u79fb\u5230 VPC\u3002\u6211\u8fd8\u8ba1\u5212\u5728\u5176\u4ed6\u4fe1\u606f\u548c\u5176\u4ed6\u8fc1\u79fb\u8d44\u6e90\u53ef\u7528\u540e\u7acb\u5373\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002", "note_en": "Let\u2019s go back to the summer of 2006 and the  launch of EC2. We started out with one instance type (the venerable   m1.small), security groups, and the venerable  US East (N. Virginia) Region. The  EC2-Classic network model was  flat, with public IP addresses that were assigned at launch time.\n  Our initial customers saw the value right away and started to put EC2 to use in many different ways. We hosted web sites,  supported the launch of Justin.TV, and  helped Animoto to scale to a then-amazing 3400 instances when their Facebook app went viral.\n  Some of the early enhancements to EC2 focused on networking. For example, we added  Elastic IP addresses in early 2008 so that addresses could be long-lived and associated with different instances over time if necessary. After that we added  Auto Scaling, Load Balancing, and CloudWatch to help you to build highly scalable applications.\n  Early customers wanted to connect their EC2 instances to their corporate networks, exercise additional control over IP address ranges, and to construct more sophisticated network topologies. We launched  Amazon Virtual Private Cloud in 2009, and in 2013 we made the VPC model essentially transparent with  Virtual Private Clouds for Everyone.\n  Retiring EC2-Classic  EC2-Classic has served us well, but we\u2019re going to give it a gold watch and a well-deserved sendoff! This post will tell you what you need to know, what you need to do, and when you need to do it.\n  Before I dive in, rest assured that we are going to make this as smooth and as non-disruptive as possible. We are not planning to disrupt any workloads and we are giving you plenty of lead time so that you can plan, test, and perform your migration. In addition to this blog post, we have tools, documentation, and people that are all designed to help.\n  Timing  We are already notifying the remaining EC2-Classic customers via their account teams, and will soon start to issue notices in the Personal Health Dashboard. Here are the important dates for your calendar:\n  All AWS accounts created after  December 4, 2013 are already VPC-only, unless EC2-Classic was enabled as a result of a support request.\n  On October 30, 2021 we will disable EC2-Classic in Regions for AWS accounts that have no active EC2-Classic resources in the Region, as listed below. We will also stop selling 1-year and 3-year Reserved Instances for EC2-Classic.\n  On  August 15, 2022 we expect all migrations to be complete, with no remaining EC2-Classic resources present in any AWS account.\n  Again, we don\u2019t plan to disrupt any workloads and will do our best to help you to meet these dates.\n  Affected Resources  In order to fully migrate from EC2-Classic to VPC, you need to find, examine, and migrate all of the following resources:\n    In preparation for your migration, be sure to read  Migrate from EC2-Classic to a VPC.\n  You may need to create (or re-create, if you deleted it) the default VPC for your account. To learn how to do this, read  Creating a Default VPC.\n  In some cases you will be able to modify the existing resources; in others you will need to create new and equivalent resources in a VPC.\n  Finding EC2-Classic Resources  Use the  EC2 Classic Resource Finder script to find all of the EC2-Classic resources in your account. You can run this directly in a single AWS account, or you can use the included  multi-account-wrapper to run it against each account of an AWS Organization. The Resource Finder visits each AWS Region, looks for specific resources, and generates a set of CSV files. Here\u2019s the first part of the output from my run:\n    The script takes a few minutes to run. I inspect the list of CSV files to get a sense of how much work I need to do:\n        Turns out that I have some stopped OpsWorks Stacks that I can either migrate or delete:\n    Migration Tools  Here\u2019s an overview of the migration tools that you can use to migrate your AWS resources:\n  AWS Application Migration Service \u2013 Use  AWS MGN to migrate your instances and your databases from EC2-Classic to VPC with minimal downtime. This service uses block-level replication and runs on multiple versions of Linux and Windows (read  How to Use the New AWS Application Migration Service for Lift-and-Shift Migrations to learn more). The first 90 days of replication are free for each server that you migrate; see the  AWS Application Service Pricing page for more information.\n  Support Automation Workflow \u2013 This workflow supports simple, instance-level migration. It converts the source instance to an AMI, creates mirrors of the security groups, and launches new instances in the destination VPC.\n  After you have migrated all of the resources within a particular region, you can disable EC2-Classic by creating a support case. You can do this if you want to avoid accidentally creating new EC2-Classic resources in the region, but it is definitely not required.\n  Disabling EC2-Classic in a region is intended to be a one-way door, but you can contact AWS Support if you run it and then find that you need to re-enable EC2-Classic for a region. Be sure to run the Resource Finder that mentioned earlier and make sure that you have not left any resources behind. These resources will continue to run and to accrue charges even after the account status has been changed.\n  IP Address Migration \u2013 If you are migrating an EC2 instance and any Elastic IP addresses associated with the instance, you can use  move-address-to-vpc then attach the Elastic IP to the migrated instance. This will allow you to continue to reference the instance by the original DNS name.\n  Classic Load Balancers \u2013 If you plan to migrate a Classic Load Balancer and need to preserve the original DNS names, please contact AWS Support or your AWS account team.\n  Updating Instance Types  All of the instance types that are available in EC2-Classic are also available in VPC. However, many newer instance types are available only in VPC, and you may want to consider an update as part of your overall migration plan. Here\u2019s a map to get you started:\n    Count on Us  My colleagues in AWS Support are ready to help you with your migration to VPC. I am also planning to update this post with additional information and other migration resources as soon as they become available.", "posttime": "2021-07-29 21:59:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,ec2,\u8fc1\u79fb", "title": "Amazon EC2-Classic \u5373\u5c06\u505c\u7528", "title_en": "Amazon EC2-Classic Is Retiring", "transed": 1, "url": "https://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/", "via": "", "real_tags": ["amazon", "ec2", "\u8fc1\u79fb"]}, {"category": "", "categoryclass": "", "imagename": "3fe28e363a17af3c9917fda3ee7b567a.png", "infoid": 1070261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u80fd\u7528\u88ab\u76d7\u7684\u7b14\u8bb0\u672c\u7535\u8111\u505a\u4ec0\u4e48\uff1f\u4f60\u80fd\u8bbf\u95ee\u6211\u4eec\u7684\u5185\u90e8\u7f51\u7edc\u5417\uff1f\u8fd9\u662f\u5ba2\u6237\u6700\u8fd1\u60f3\u8981\u56de\u7b54\u7684\u95ee\u9898\u3002\u5267\u900f\u8b66\u62a5\uff1a\u662f\u7684\uff0c\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u3002\u8fd9\u7bc7\u535a\u6587\u5c06\u5e26\u60a8\u4e86\u89e3\u6211\u4eec\u5982\u4f55\u83b7\u53d6\u201c\u88ab\u76d7\u201d\u7684\u516c\u53f8\u7b14\u8bb0\u672c\u7535\u8111\u5e76\u5c06\u591a\u4e2a\u6f0f\u6d1e\u94fe\u63a5\u5728\u4e00\u8d77\u4ee5\u8fdb\u5165\u5ba2\u6237\u7684\u516c\u53f8\u7f51\u7edc\u3002\u6211\u4eec\u6536\u5230\u4e86\u4e00\u53f0\u9884\u914d\u7f6e\u4e86\u8be5\u7ec4\u7ec7\u6807\u51c6\u5b89\u5168\u5806\u6808\u7684\u8054\u60f3\u7b14\u8bb0\u672c\u7535\u8111\u3002\u6211\u4eec\u6ca1\u6709\u5f97\u5230\u5173\u4e8e\u8fd9\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u6ca1\u6709\u6d4b\u8bd5\u51ed\u636e\uff0c\u6ca1\u6709\u914d\u7f6e\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u8fd9\u662f\u4e00\u4e2a 100% \u7684\u9ed1\u76d2\u6d4b\u8bd5\u3002\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u6765\u540e\uff0c\u6211\u4eec\u6253\u5f00\u4e86\u88c5\u8fd0\u7bb1\u5e76\u5f00\u59cb\u5de5\u4f5c\u3002\u5728\u6211\u4eec\u5bf9\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u884c\u8c03\u67e5\uff08BIOS \u8bbe\u7f6e\u3001\u6b63\u5e38\u542f\u52a8\u64cd\u4f5c\u3001\u786c\u4ef6\u8be6\u7ec6\u4fe1\u606f\u7b49\uff09\u4e4b\u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u9075\u5faa\u4e86\u8bb8\u591a\u6700\u4f73\u5b9e\u8df5\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u8bb8\u591a\u5e38\u89c1\u653b\u51fb\u3002\u4f8b\u5982\uff1a \u00b7 \u4f7f\u7528 Microsoft \u7684 BitLocker \u5bf9 SSD \u8fdb\u884c\u5168\u76d8\u52a0\u5bc6 (FDE)\uff0c\u901a\u8fc7\u53ef\u4fe1\u5e73\u53f0\u6a21\u5757 (TPM) \u8fdb\u884c\u4fdd\u62a4 \u5728\u6ca1\u6709\u5176\u4ed6\u4efb\u4f55\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u70b9\uff0cTPM \u4fdd\u62a4\u7684 BitLocker\uff0c\u5c06\u6210\u4e3a\u6211\u4eec\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u5176\u4e2d\u4e00\u4ef6\u4e8b\u6211\u4eec\u5728\u8fdb\u884c\u4fa6\u5bdf\u65f6\u770b\u5230\u7b14\u8bb0\u672c\u7535\u8111\u76f4\u63a5\u542f\u52a8\u5230 Windows 10 \u767b\u5f55\u5c4f\u5e55\u3002\u518d\u52a0\u4e0a BitLocker \u52a0\u5bc6\u610f\u5473\u7740\u9a71\u52a8\u5668\u89e3\u5bc6\u5bc6\u94a5\u4ec5\u4ece TPM \u4e2d\u63d0\u53d6\uff0c\u4e0d\u9700\u8981\u7528\u6237\u63d0\u4f9b PIN \u6216\u5bc6\u7801\uff0c\u8fd9\u662f BitLocker \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002 Microsoft \u5efa\u8bae\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u63d0\u9ad8\u5b89\u5168\u6027\uff1a \u6709\u8db3\u591f\u65f6\u95f4\u7684\u6709\u9488\u5bf9\u6027\u7684\u653b\u51fb\uff1b\u8be5\u653b\u51fb\u8005\u5c06\u6253\u5f00\u5916\u58f3\u3001\u710a\u63a5\u5e76\u4f7f\u7528\u590d\u6742\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u3002 \u2022 \u4f7f\u7528PIN \u4fdd\u62a4\u5668\u5c06\u9884\u542f\u52a8\u8eab\u4efd\u9a8c\u8bc1\u8bbe\u7f6e\u4e3aTPM\uff08\u4f7f\u7528\u590d\u6742\u7684\u5b57\u6bcd\u6570\u5b57PIN [\u589e\u5f3a\u578bPIN] \u4ee5\u5e2e\u52a9TPM \u53cd\u653b\u51fb\u7f13\u89e3\uff09\u3002\u6b63\u5982\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u7684\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u4e00\u4e2a\u9884\u5148\u88c5\u5907\u597d\u7684\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u4e0d\u5230 30 \u5206\u949f\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u6574\u4e2a\u653b\u51fb\u94fe\uff0c\u65e0\u9700\u710a\u63a5\u3001\u7b80\u5355\u4e14\u76f8\u5bf9\u4fbf\u5b9c\u7684\u786c\u4ef6\u548c\u516c\u5f00\u53ef\u7528\u7684\u5de5\u5177\u3002\u4e00\u4e2a\u5c06\u5b83\u5b8c\u5168\u7f6e\u4e8e\u90aa\u6076\u5973\u4ec6\u9886\u57df\u7684\u8fc7\u7a0b\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u77e5\u9053\u7684\u4eba\u6765\u8bf4\uff0cTPM \u662f\u4e00\u79cd\u9ad8\u5ea6\u5b89\u5168\u4e14\u590d\u6742\u7684\u786c\u4ef6\uff0c\u5177\u6709\u5927\u91cf\u7684\u7be1\u6539\u68c0\u6d4b\u548c\u4fdd\u62a4\u3002\u76f4\u63a5\u653b\u51fb TPM \u4e0d\u592a\u53ef\u80fd\u5728\u6d4b\u8bd5\u65f6\u95f4\u5185\u53d6\u5f97\u6210\u679c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u67e5\u770b\u56f4\u7ed5 TPM \u7684\u4fe1\u4efb\u5173\u7cfb\u53ca\u5176\u4f9d\u8d56\u7684\u5185\u5bb9\u3002\u5b83\u662f\u4e0e\u4e3b\u677f\u4e0a\u5176\u4ed6\u7ec4\u4ef6\u4e0d\u540c\u7684\u72ec\u7acb\u82af\u7247\uff0c\u53ef\u80fd\u5bb9\u6613\u53d7\u5230\u5404\u79cd\u653b\u51fb\u3002\u6b64\u5904\u663e\u793a\u4e86\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u7279\u5b9a TPM\uff1a\u7814\u7a76\u7279\u5b9a TPM \u82af\u7247\u540e\u53d1\u73b0\u5b83\u4f7f\u7528\u4e32\u884c\u5916\u8bbe\u63a5\u53e3 (SPI) \u534f\u8bae\u4e0e CPU \u901a\u4fe1\uff1a\u5f53\u6211\u4eec\u53d1\u73b0\u7b14\u8bb0\u672c\u7535\u8111\u539f\u7406\u56fe\u4e2d\u63d0\u5230\u7684 TPM \u65f6\u8fdb\u4e00\u6b65\u652f\u6301\u8be5\u534f\u8bae\uff1aSPI \u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u51e0\u4e4e\u5728\u6240\u6709\u786c\u4ef6\u4e2d\u90fd\u975e\u5e38\u666e\u904d\u3002\u7531\u4e8e\u5176\u7b80\u5355\u6027\uff0cSPI \u6ca1\u6709\u52a0\u5bc6\u9009\u9879\u3002\u4efb\u4f55\u52a0\u5bc6\u90fd\u5fc5\u987b\u7531\u8bbe\u5907\u672c\u8eab\u5904\u7406\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cBitLocker \u672a\u4f7f\u7528 TPM 2.0 \u6807\u51c6\u7684\u4efb\u4f55\u52a0\u5bc6\u901a\u4fe1\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u6765\u81ea TPM \u7684\u4efb\u4f55\u6570\u636e\u90fd\u4ee5\u660e\u6587\u5f62\u5f0f\u51fa\u73b0\uff0c\u5305\u62ec Windows \u7684\u89e3\u5bc6\u5bc6\u94a5\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u8be5\u5bc6\u94a5\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u89e3\u5bc6\u9a71\u52a8\u5668\uff0c\u8bbf\u95ee VPN \u5ba2\u6237\u7aef\u914d\u7f6e\uff0c\u5e76\u53ef\u80fd\u8bbf\u95ee\u5185\u90e8\u7f51\u7edc\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7ed5\u8fc7 TPM \u7c7b\u4f3c\u4e8e\u5ffd\u7565\u8bfa\u514b\u65af\u5821\u800c\u4e13\u6ce8\u4e8e\u4ece\u5b83\u51fa\u6765\u7684\u4e0d\u90a3\u4e48\u88c5\u7532\u7684\u6c7d\u8f66\u3002\u4e3a\u4e86\u55c5\u63a2\u901a\u8fc7 SPI \u603b\u7ebf\u79fb\u52a8\u7684\u6570\u636e\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u5f15\u7ebf\u6216\u63a2\u9488\u8fde\u63a5\u5230 TPM \u4e0a\u7684\u5f15\u811a\uff08\u4e0a\u9762\u6807\u8bb0\u4e3a MOSI\u3001MISO\u3001CS \u548c CLK\uff09\u3002\u901a\u5e38\u8fd9\u5f88\u7b80\u5355\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b58\u5728\u5b9e\u9645\u95ee\u9898\u3002\u6b64 TPM \u91c7\u7528 VQFN32 \u5c01\u88c5\uff0c\u975e\u5e38\u5c0f\u3002 \u201c\u9500\u201d\u5b9e\u9645\u4e0a\u53ea\u6709 0.25 \u6beb\u7c73\u5bbd\uff0c\u95f4\u8ddd\u4e3a 0.5 \u6beb\u7c73\u3002\u8fd9\u4e9b\u201c\u5f15\u811a\u201d\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u5f15\u811a\uff0c\u5b83\u4eec\u5e73\u8d34\u5728\u82af\u7247\u58c1\u4e0a\uff0c\u56e0\u6b64\u5728\u7269\u7406\u4e0a\u4e0d\u53ef\u80fd\u8fde\u63a5\u4efb\u4f55\u7c7b\u578b\u7684\u5939\u5b50\u3002\u60a8\u53ef\u4ee5\u5c06\u201c\u98de\u7ebf\u201d\u710a\u63a5\u5230\u710a\u76d8\u4e0a\uff0c\u4f46\u8fd9\u5f88\u9ebb\u70e6\uff0c\u800c\u4e14\u5f80\u5f80\u662f\u4e00\u79cd\u7269\u7406\u4e0a\u975e\u5e38\u4e0d\u7a33\u5b9a\u7684\u8fde\u63a5\u3002\u6216\u8005\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u7b56\u7565\u662f\u653e\u7f6e\u4e32\u8054\u7535\u963b\u4ee5\u8fdb\u884c\u710a\u63a5\uff0c\u4f46\u5b83\u4eec\u540c\u6837\u5c0f\uff0c\u751a\u81f3\u66f4\u8106\u5f31\u3002\u8fd9\u5e76\u4e0d\u5bb9\u6613\u3002\u4f46\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u8ba4\u4e3a\u53ef\u80fd\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u5f88\u591a\u65f6\u5019\uff0cSPI \u82af\u7247\u4e0e\u5176\u4ed6 SPI \u82af\u7247\u5171\u4eab\u76f8\u540c\u7684\u201c\u603b\u7ebf\u201d\u3002\u8fd9\u662f\u786c\u4ef6\u8bbe\u8ba1\u4eba\u5458\u7528\u6765\u7b80\u5316\u8fde\u63a5\u3001\u8282\u7701\u6210\u672c\u5e76\u4f7f\u6545\u969c\u6392\u9664/\u7f16\u7a0b\u66f4\u5bb9\u6613\u7684\u6280\u672f\u3002\u6211\u4eec\u5f00\u59cb\u5728\u6574\u4e2a\u7535\u8def\u677f\u4e0a\u5bfb\u627e\u53ef\u80fd\u4e0e TPM \u4f4d\u4e8e\u540c\u4e00\u603b\u7ebf\u4e0a\u7684\u4efb\u4f55\u5176\u4ed6\u82af\u7247\u3002\u4e5f\u8bb8\u4ed6\u4eec\u7684\u522b\u9488\u4f1a\u66f4\u5927\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\u7ecf\u8fc7\u4e00\u4e9b\u63a2\u7d22\u548c\u67e5\u9605\u539f\u7406\u56fe\u540e\uff0c\u7ed3\u679c\u8bc1\u660e TPM \u4e0e\u53e6\u4e00\u4e2a\u82af\u7247\u5171\u4eab\u4e00\u4e2a SPI \u603b\u7ebf\uff0cCMOS \u82af\u7247\u80af\u5b9a\u6709\u66f4\u5927\u7684\u5f15\u811a\u3002\u4e8b\u5b9e\u4e0a\uff0cCMOS \u82af\u7247\u51e0\u4e4e\u662f\u6807\u51c6\u4e3b\u677f\u4e0a\u6700\u5927\u7684\u5f15\u811a\u5c3a\u5bf8\uff0c\u5b83\u662f SOP-8\uff08\u53c8\u540d SOIC-8\uff09\u3002\n\u8fd9\u662f\u7406\u60f3\u7684\u3002\u6211\u4eec\u7ee7\u7eed\u6839\u636e CMOS \u7684\u6570\u636e\u8868\u5c06\u6211\u4eec\u7684 Saleae \u903b\u8f91\u5206\u6790\u4eea\u8fde\u63a5\u5230\u5f15\u811a\uff1a\u4e00\u4e2a\u9884\u5148\u88c5\u5907\u7684\u653b\u51fb\u8005\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u5f00\u5934\u63d0\u5230\u7684\uff0c\u5c06\u4f7f\u7528 SOIC-8 \u5939\u5b50\u800c\u4e0d\u662f\u5355\u72ec\u7684\u63a2\u9488\u3002\u8be5\u526a\u8f91\u5c06\u4f7f\u8fde\u63a5\u5230\u82af\u7247\u53d8\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u5e76\u5c06\u5b9e\u9645\u653b\u51fb\u65f6\u95f4\u7f29\u77ed\u51e0\u5206\u949f\u3002\u73b0\u5728\u63a2\u9488\u5df2\u8fde\u63a5\u597d\uff0c\u6211\u4eec\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111\u5e76\u8bb0\u5f55\u5728\u8ff9\u7ebf\u4e0a\u79fb\u52a8\u7684\u6bcf\u4e2a SPI \u5b57\u8282\u3002\u5728\u6570\u767e\u4e07\u6761\u6570\u636e\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u53d1\u9001\u4e86\u4e00\u4e2a BitLocker \u89e3\u5bc6\u5bc6\u94a5\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f\u627e\u5230\u5b83\u3002\u6211\u4eec\u4f7f\u7528 Henri Numi \u7684 bitlocker-spi-toolkit \u5c1d\u8bd5\u81ea\u52a8\u63d0\u53d6\u5bc6\u94a5\uff0c\u4f46\u5b83\u5728\u6211\u4eec\u7684\u6355\u83b7\u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002\u4e0b\u9762\u662f\u4ed6\u7684\u9ad8\u7ea7\u5206\u6790\u5668 (HLA) \u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u4e8b\u52a1\u88ab\u6b63\u786e\u89e3\u6790\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6211\u4eec\u7684\u6355\u83b7\u6709\u4e9b\u4e0d\u540c\uff0cHLA \u65e0\u6cd5\u89e3\u91ca\u3002\u7ecf\u8fc7\u51e0\u5929\u7684\u6545\u969c\u6392\u9664\u3001\u6bd4\u8f83\u6355\u83b7\u548c\u62c9\u5934\u53d1\uff0c\u6211\u4eec\u7ec8\u4e8e\u53d1\u73b0\u5b83\u662f TPM \u547d\u4ee4\u6570\u636e\u5305\u7684\u4e0d\u540c\u4f4d\u63a9\u7801\u7684\u7ec4\u5408\u4ee5\u53ca\u7528\u4e8e\u67e5\u627e\u5bc6\u94a5\u7684\u4e0d\u540c\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7ec4\u5408\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4fee\u590d\u8bf7\u6c42\uff0c\u73b0\u5728 bitlocker-spi-toolkit \u4e5f\u53ef\u4ee5\u89e3\u6790\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u90a3\u4e2a\uff0c\u77a7\uff0c\u94a5\u5319\u5c31\u5f39\u51fa\u6765\u4e86\u3002\u5b8c\u7f8e\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u89e3\u5bc6\u5bc6\u94a5\uff0c\u8ba9\u6211\u4eec\u89e3\u5bc6 SSD\uff0c\u770b\u770b\u6211\u4eec\u6709\u4ec0\u4e48\u3002\u6211\u4eec\u62c9\u51fa SSD\uff0c\u5c06\u5176\u5b89\u88c5\u5728\u9002\u914d\u5668\u4e2d\u5e76\u63d2\u5165\uff1a\u6211\u4eec\u5236\u4f5c\u4e86\u9a71\u52a8\u5668\u7684\u78c1\u76d8\u6620\u50cf\uff0c\u7136\u540e\u7ee7\u7eed\u64cd\u4f5c\u3002\u6709\u8da3\u7684\u662f\uff0c\u5728\u6574\u4e2a\u653b\u51fb\u94fe\u8fc7\u7a0b\u4e2d\uff0c\u8017\u65f6\u6700\u957f\u7684\u90e8\u5206\u53ea\u662f\u7b80\u5355\u5730\u590d\u5236\u4e86 256GB \u7684\u6587\u4ef6\u3002\u5728\u672c\u5730\u83b7\u5f97\u6620\u50cf\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Dislocker \u5de5\u5177\u96c6\u89e3\u5bc6\u9a71\u52a8\u5668\uff1a $ echo daa0ccb7312&lt;REDACTED&gt; | xxd -r -p &gt; ~/vmk$ mkdir ~/ssd ~/mounted$ sudo lostup -P /dev/loop6 /mnt/hgfs/ExternalSSD/ssd-dd.img $ sudo fdisk -l /dev/loop6 \u78c1\u76d8 /dev /loop6\uff1a238.47 GiB\uff0c256060514304 \u5b57\u8282\uff0c500118192 \u4e2a\u6247\u533a\u5355\u4f4d\uff1a1 * 512 = 512 \u5b57\u8282\u6247\u533a \u6247\u533a\u5927\u5c0f\uff08\u903b\u8f91/\u7269\u7406\uff09\uff1a512 \u5b57\u8282/512 \u5b57\u8282 I/O \u5927\u5c0f\uff08\u6700\u5c0f/\u6700\u4f73\uff09\uff1a512 \u5b57\u8282/\u78c1\u76d8\u6807\u7b7e\u7c7b\u578b\uff1aGPT\u78c1\u76d8\u6807\u8bc6\uff1aBD45F9A-F26D-41C9-8F1F-0F1EE74233\u8bbe\u5907\u5f00\u59cb\u7ed3\u675f\u6247\u533a\u5927\u5c0f\u7c7b\u578b\u7684/ dev / loop6p1 2048 1026047 1024000\u7ea7500M\u7684Windows\u6062\u590d\u73af\u5883\u7684/ dev / loop6p2 1026048 2050047 1024000 500M\u7535\u55b7\u7cfb\u7edf\u7684/ dev / loop6p3 2050048 2312191 262144 128M\u5fae\u8f6f\u4fdd\u7559 /dev/loop6p4 2312192 500117503 497805312 237.4G \u5fae\u8f6f\u57fa\u672c\u6570\u636e &lt;- bitlocker drive$ sudo dislocker-fuse -K ~/vmk /dev/loop6p4 -- ~/ssd$ sudo ntfs-3g ~/ss-file /mounted$ ls -al ~/mounted total 19156929 drwxrwxrwx 1 root root 8192 May 5 19:00 \u3002 drwxrwxrwt 17 root root 4096 Jun 15 09:43 .. drwxrwxrwx 1 root root 0 May 6 14:29 &#39;$Recycle.Bin&#39; drwxrwxrwx 1 root root 0 May 4 10:55 &#39;$WinREAgent &#39; -Decx17x r8 r8rwxrwx 2019 bootmgr -rwxrwxrwx 1 root root 1 Dec 7 2019 BOOTNXT lrwxrwxrwx 2 root root 15 May 4 11:18 &#39;Documents and Settings&#39; -&gt; ~/mounted/Users\n\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u7eaf\u6587\u672c\u8bbf\u95ee\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u4e86\u63a0\u593a\u6570\u636e\u7684\u6807\u51c6\u6d41\u7a0b\u3002\u63d0\u53d6\u5bc6\u7801\u54c8\u5e0c\u3001\u7eaf\u6587\u672c\u6216\u7f16\u7801\u51ed\u636e\u3001\u66b4\u9732\u7684\u654f\u611f\u6587\u4ef6\u7b49\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u6709\u7528\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u7c7b\u578b\u7684\u79bb\u7ebf\u51ed\u636e\uff0c\u8fd9\u5e94\u8be5\u4e0d\u8db3\u4e3a\u5947\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u5b9e\u9645\u5458\u5de5\u7684\u7b14\u8bb0\u672c\u7535\u8111\u51ed\u501f\u591a\u5e74\u7684\u6587\u4ef6\uff0c\u5b83\u662f\u4e13\u4e3a\u6b64\u6b21\u7279\u5b9a\u6d4b\u8bd5\u6253\u9020\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u4f46\u662f\uff0c\u6211\u4eec\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u5728\u4f7f\u7528\u7684 VPN \u5ba2\u6237\u7aef\uff1aPalo Alto \u7684 Global Protect (GP)\u3002 GP \u6709\u4e00\u4e2a\u6709\u8da3\u7684\u201c\u529f\u80fd\u201d\uff0c\u79f0\u4e3a\u9884\u767b\u5f55\u96a7\u9053\uff1a\u9884\u767b\u5f55\u662f\u4e00\u79cd\u5728\u7528\u6237\u767b\u5f55\u4e4b\u524d\u5efa\u7acb VPN \u96a7\u9053\u7684\u8fde\u63a5\u65b9\u6cd5\u3002\u9884\u767b\u5f55\u7684\u76ee\u7684\u662f\u9a8c\u8bc1\u7aef\u70b9\uff08\u800c\u4e0d\u662f\u7528\u6237\uff09\u5e76\u542f\u7528\u57df\u811a\u672c\u6216\u5176\u4ed6\u4efb\u52a1\u5728\u7aef\u70b9\u542f\u52a8\u540e\u7acb\u5373\u8fd0\u884c\u3002\u5bf9\u4e8e IT \u90e8\u95e8\u7ba1\u7406\u5176\u7aef\u70b9\u6765\u8bf4\uff0c\u8fd9\u542c\u8d77\u6765\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u529f\u80fd\u3002\u8fd9\u542c\u8d77\u6765\u4e5f\u662f\u4e00\u79cd\u5728\u4e0d\u77e5\u9053\u4efb\u4f55\u4eba\u7684\u51ed\u636e\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee VPN \u7684\u597d\u65b9\u6cd5\u3002\u7406\u8bba\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111\u7684\u540e\u95e8\u7248\u672c\uff0c\u4f8b\u5982\u4f7f\u7528\u7c98\u6ede\u952e\u540e\u95e8\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u8bbf\u95ee VPN \u96a7\u9053\u800c\u65e0\u9700\u4efb\u4f55\u51ed\u636e\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e3a\u4e86\u901f\u5ea6\uff0c\u6211\u4eec\u51b3\u5b9a\u8d70\u865a\u62df\u5316\u8def\u7ebf\u3002\u7531\u4e8e\u6211\u4eec\u62e5\u6709\u5bf9\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5305\u62ec\u91cd\u5199\u5185\u6838\u7ea7\u6076\u610f\u8f6f\u4ef6\u7684\u9a71\u52a8\u7a0b\u5e8f\u6587\u4ef6\u5230\u4ee3\u7406\u7279\u6743 DLL \u4ee5\u6dfb\u52a0\u5e10\u6237\u3002\u4e3a\u4e86\u65f6\u95f4\u548c\u6548\u7387\uff0c\u7c98\u6ede\u952e\u975e\u5e38\u9002\u5408\u8fd9\u79cd\u60c5\u51b5\uff0c\u5176\u8fc7\u7a0b\u5f88\u7b80\u5355\uff1a\u73b0\u5728\u6211\u4eec\u6709\u540e\u95e8\u8bbf\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u542f\u52a8\u9a71\u52a8\u5668\u3002\u4e3a\u4e86\u5c06\u89e3\u5bc6\u540e\u7684 Windows \u6620\u50cf\u4f5c\u4e3a\u865a\u62df\u673a\u542f\u52a8\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49 VMDK \u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u9700\u8981\u8bbe\u7f6e\u53c2\u6570\uff0c\u5e76\u5c06\u89e3\u5bc6\u540e\u7684BitLocker\u5206\u533a\u548c\u52a0\u5bc6\u955c\u50cf\u7684\u8d77\u59cb\u6247\u533a\u6620\u5c04\u5230\u76f8\u5e94\u7684VM\u5206\u533a\u3002\u751f\u6210\u7684 VMDK \u662f\uff1a# Disk DescriptorFileversion=1CID=19362586parentCID=ffffffffcreateType=&quot;partitionedDevice&quot;# Extent descriptionRW 63 FLAT &quot;ssd-dd.img&quot; 0RW 1985 FLAT &quot;ssd-dd.img&quot; 2048RW0&quot;ssd-dd.img&quot; 2048RW0 10220400d-ZFLATW100s img&quot; 1026048RW 262144 FLAT &quot;ssd-dd.img&quot; 2050048#\u8fd9\u662f\u52a0\u5bc6\u7684bitlocker\u9a71\u52a8\u5668\u6240\u5728\u7684\u7b2c4\u4e2a\u5206\u533aRW 497805312 FLAT &quot;dislocker2-file&quot; 0RW 655 ZERO RW 33 FLATd3ddbvr.imgtws 4&quot;ddb.adapterType=&quot;ide&quot;ddb.geometry. cylinders=&quot;16383&quot;ddb.geometry.heads=&quot;16&quot;ddb.geometry.sectors=&quot;63&quot;ddb.uuid.image=&quot;43e1e-5c24-46cc-bcec -daad3d500&quot;ddb.uuid.parent=&quot;00000000-0000-0000-0000-000000000000&quot;ddb.uuid.modification=&quot;8d285-ad86-4227-86d4-ec168b6b3&quot;dd0000000000000000000000000000 0000-000000000000&quot;ddb.geometry.biosCylinders=&quot;1024&quot;ddb.geometry.biosHeads=&quot;255&quot;ddb.geometry.biosSectors=&quot;63&quot; \u73b0\u5728\uff0c\u4f7f\u7528 VMDK \u548c\u7c98\u6ede\u952e\u540e\u95e8 Windows \u6620\u50cf\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u865a\u62df\u673a\uff0c\u542f\u52a8\u5b83\uff0c\u7136\u540e\u5728\u767b\u5f55\u5c4f\u5e55\u4e0a\u70b9\u51fb WINdows + U\u6069\u3002\n\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u4e3a\u6b64\uff0c\u901a\u8fc7\u9644\u52a0\u5230\u8ba1\u7b97\u673a\u5e10\u6237\u7684\u8bc1\u4e66\u5bf9 VPN \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u7531\u4e8e\u6bcf\u4e2a\u8ba1\u7b97\u673a\u5e10\u6237\u5728 Active Directory \u4e2d\u90fd\u5177\u6709\u975e\u5e38\u57fa\u672c\u7684\u6743\u9650\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u57df\u5185\u8fd0\u884c\u57fa\u672c\u7684 SMB \u547d\u4ee4\u3002\u6211\u4eec\u5411\u57df\u63a7\u5236\u5668\u67e5\u8be2\u7528\u6237\u3001\u7ec4\u3001\u7cfb\u7edf\u7b49\u5404\u7c7b\u57df\u4fe1\u606f\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u5217\u51fa\u548c\u67e5\u770b\u5185\u90e8 SMB \u5171\u4eab\u4e0a\u7684\u6587\u4ef6\u5185\u5bb9\uff1a\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u8ba1\u7b97\u673a\u5e10\u6237\u7684\u8bbf\u95ee\u6743\u9650\u4f5c\u4e3a\u542f\u52a8\u5185\u90e8\u653b\u51fb\u548c\u6a2a\u5411\u5347\u7ea7\u3002\u4e3a\u4e86\u8bc1\u660e\u6211\u4eec\u62e5\u6709\u5bf9\u4e0d\u5e94\u8be5\u62e5\u6709\u7684\u670d\u52a1\u5668\u7684\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u4ece\u4e0a\u9762\u9009\u62e9\u4e86\u5185\u90e8\u6587\u4ef6\u670d\u52a1\u5668\u3002\u6982\u5ff5\u8bc1\u660e\u662f\u5c06\u6587\u4ef6\u5199\u5165\u8be5\u670d\u52a1\u5668\u5e76\u5c06\u5176\u8bfb\u56de\u4ee5\u8bc1\u660e\u8bfb/\u5199\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e2a\u201c\u626b\u63cf\u5668\u201d\u5171\u4eab\u662f\u653b\u51fb\u8005\u7684\u7edd\u4f73\u9009\u62e9\uff0c\u4f5c\u4e3a\u5404\u79cd\u6280\u672f\u7684\u6c34\u5751\uff0c\u4f8b\u5982 LNK \u653b\u51fb\u3001\u6728\u9a6c PDF \u7b49\u3002\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u5bf9\u5185\u90e8\u7f51\u7edc\u7684\u8bbf\u95ee\u6743\u9650\u3001\u5bf9 Active Directory \u7684\u57fa\u672c\u6743\u9650\u4ee5\u53ca\u8bbf\u95ee\u5185\u90e8\u6587\u4ef6\u5171\u4eab\uff0c\u8db3\u4ee5\u5f00\u59cb\u5371\u5bb3\u654f\u611f\u7684\u516c\u53f8\u6570\u636e\u3002\u56de\u987e\u4e00\u4e0b\uff0c\u6211\u4eec\u62ff\u4e86\u4e00\u53f0\u9501\u5b9a\u7684 FDE \u7b14\u8bb0\u672c\u7535\u8111\uff0c\u55c5\u63a2\u4e86\u6765\u81ea TPM \u7684 BitLocker \u89e3\u5bc6\u5bc6\u94a5\uff0c\u540e\u95e8\u865a\u62df\u5316\u6620\u50cf\uff0c\u5e76\u4f7f\u7528\u5176 VPN \u81ea\u52a8\u8fde\u63a5\u529f\u80fd\u653b\u51fb\u5185\u90e8\u516c\u53f8\u7f51\u7edc\u3002\u8fd9\u662f\u4ece\u88ab\u76d7\u7b14\u8bb0\u672c\u7535\u8111\u5230\u5185\u90e8\u59a5\u534f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u7279\u522b\u611f\u8c22\u4e4b\u524d\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u5e76\u5e2e\u52a9\u4f7f\u8fd9\u6b21\u653b\u51fb\u66f4\u52a0\u73b0\u5b9e\u3001\u5b9e\u7528\u548c\u66f4\u5feb\u7684\u7814\u7a76\u4eba\u5458\uff1a", "note_en": "What can you do with a stolen laptop? Can you get access to our internal network? That was the question a client wanted answered recently. Spoiler alert: Yes, yes you can. This post will walk you through how we took a \u201cstolen\u201d corporate laptop and chained several exploits together to get inside the client\u2019s corporate network.\n  We received a Lenovo laptop preconfigured with the standard security stack for this organization. We didn\u2019t get any information about this laptop, no test credentials, no configuration details, no nothing, it was a 100% blackbox test. Once the laptop came in, we opened the shipping box and got to work. After we did our reconnaissance of the laptop (BIOS settings, normal boot operation, hardware details, etc) we noted a lot of best practices were being followed, negating many common attacks. For example:\n       \u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The SSD was full disk encrypted (FDE) using Microsoft\u2019s BitLocker, secured via Trusted Platform Module (TPM)\n With nothing else working, that last point, TPM secured BitLocker, was going to be our way in. One of the things we saw when doing recon was that the laptop boots directly to the Windows 10 Login screen. That, coupled with the BitLocker encryption means that the drive decryption key is being pulled only from the TPM, no user supplied PIN or password was needed which is the default for BitLocker.  Microsoft recommends increasing the security if:\n Targeted attack with plenty of time; this attacker will open the case, will solder, and will use sophisticated hardware or software.\n  \u2022\tPre-boot authentication set to TPM with a PIN protector (with a sophisticated alphanumeric PIN [enhanced pin] to help the TPM anti-hammering mitigation).\n As we\u2019ll show you, this isn\u2019t quite the case. A pre-equipped attacker can perform this entire attack chain in less than 30 minutes with no soldering, simple and relatively cheap hardware, and publicly available tools. A process that places it squarely into Evil-Maid territory.\n  For those that don\u2019t know, the TPM is a highly secure and sophisticated piece of hardware that has numerous tamper detections and protections in place. Attacking the TPM directly is very unlikely to bear fruit within the timeframe of testing. As a result, we must look at the trust relationships around the TPM and what it relies on. It is a distinct and separate chip from other components on the motherboard and may be susceptible to a variety of attacks. Our particular TPM in question is shown here:\n  Researching  that specific TPM chip revealed it communicates to the CPU using the Serial Peripheral Interface (SPI) protocol:\n  Which was further supported when we found the TPM mentioned in the laptop\u2019s schematics:\n  SPI is a communication protocol for embedded systems and is extremely common amongst virtually all hardware. Due to its simplicity, there is no encryption option for SPI. Any encryption must be handled by the devices themselves. At the time of this writing BitLocker does not utilize any encrypted communication features of the TPM 2.0 standard, which means any data coming out of the TPM is coming out in plaintext, including the decryption key for Windows. If we can grab that key, we should be able to decrypt the drive, get access to the VPN client config, and maybe get access to the internal network.\n Getting around the TPM in this manner is akin to ignoring Fort Knox and focusing on the not-so-armored car coming out of it.\n In order to sniff the data moving over the SPI bus, we must attach leads or probes to the pins (labeled above as MOSI, MISO, CS, and CLK) on the TPM. Normally that is simple but there is a practical problem in this case. This TPM is on a  VQFN32 footprint, which is very tiny. The \u201cpins\u201d are actually only 0.25mm wide and spaced 0.5mm apart. And those \u201cpins\u201d aren\u2019t actually pins, they are flat against the wall of the chip so it\u2019s physically impossible to attach any sort of clip. You could solder \u201cfly leads\u201d to the solder pads but that\u2019s a hassle and tends to be a very physically unstable connection. Alternatively a common tactic is to locate in-series resistors to solder to, but they were just as small, and even more fragile. This was not going to be easy.\n But before we got started we figured there might be another way. Many times SPI chips share the same \u201cbus\u201d with other SPI chips. It\u2019s a technique hardware designers use to make connections simpler, save on cost, and make troubleshooting/programming easier. We started looking throughout the board for any other chip that might be on the same bus as the TPM. Maybe their pins would be larger and easier to use. After some probing and consulting the schematics, it turned out that the TPM shared a SPI bus with a single other chip, the CMOS chip, which definitely had larger pins. In fact, the CMOS chip had just about the largest pin size you can find on standard motherboards, it was a SOP-8 (aka SOIC-8).\n  This was ideal. We proceeded to hook up our  Saleae logic analyzer to the pins according to the  CMOS\u2019s datasheet:\n   A pre-equipped attacker, like we mentioned at the beginning, would instead use a  SOIC-8 clip instead of individual probes. The clip would make it brain dead simple to connect to the chip and shave a couple minutes off a real-world attack.\n Now that the probes were hooked up, we booted the laptop and recorded every SPI byte moving over the traces. Somewhere in the millions of pieces of data was a BitLocker decryption key being sent, the problem was now finding it. We used Henri Numi\u2019s  bitlocker-spi-toolkit to try to extract the key automatically but it wasn\u2019t working on our capture. Below is a screenshot of his High Level Analyzer (HLA) in action, you can see that some transactions are being parsed correctly and some aren\u2019t. There was something different about our capture that the HLA couldn\u2019t account for.\n  After days of troubleshooting, comparing captures, and pulling hair, we finally figured out it was a combination of different bit masks for the TPM command packets as well as a different regex for finding the key. We made a  pull request for the fix and now the bitlocker-spi-toolkit can parse these types of requests as well. Once we had that, lo and behold, the key popped out.\n  Perfect, now that we have the decryption key, let\u2019s decrypt the SSD and see what we have. We pulled the SSD, mounted it in an adapter and plugged it in:\n  We made a disk image of the drive which we operated on moving forward. Interestingly, in the entire process of the attack chain the part that takes the longest is simply copying the 256GB of files. Once we had the image locally, we could use the  Dislocker toolset to decrypt the drive:\n $ echo daa0ccb7312&lt;REDACTED&gt; | xxd -r -p &gt; ~/vmk$ mkdir ~/ssd ~/mounted$ sudo losetup -P /dev/loop6 /mnt/hgfs/ExternalSSD/ssd-dd.img $ sudo fdisk -l /dev/loop6 Disk /dev/loop6: 238.47 GiB, 256060514304 bytes, 500118192 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: BD45F9A-F26D-41C9-8F1F-0F1EE74233 Device Start End Sectors Size Type /dev/loop6p1 2048 1026047 1024000 500M Windows recovery environment /dev/loop6p2 1026048 2050047 1024000 500M EFI System /dev/loop6p3 2050048 2312191 262144 128M Microsoft reserved /dev/loop6p4 2312192 500117503 497805312 237.4G Microsoft basic data &lt;- bitlocker drive$ sudo dislocker-fuse -K ~/vmk /dev/loop6p4 -- ~/ssd$ sudo ntfs-3g ~/ssd/dislocker-file ~/mounted$ ls -al ~/mounted total 19156929 drwxrwxrwx 1 root root 8192 May 5 19:00 . drwxrwxrwt 17 root root 4096 Jun 15 09:43 .. drwxrwxrwx 1 root root 0 May 6 14:29 &#39;$Recycle.Bin&#39; drwxrwxrwx 1 root root 0 May 4 10:55 &#39;$WinREAgent&#39; -rwxrwxrwx 1 root root 413738 Dec 7 2019 bootmgr -rwxrwxrwx 1 root root 1 Dec 7 2019 BOOTNXT lrwxrwxrwx 2 root root 15 May 4 11:18 &#39;Documents and Settings&#39; -&gt; ~/mounted/Users\n Now that we have offline plaintext access to the contents, we began our standard process for pillaging the data. Extracting password hashes, plaintext or encoded credentials, exposed sensitive files, etc. Unfortunately, nothing useful was found and we didn\u2019t get any offline credentials of any sort, which shouldn\u2019t be that surprising since this wasn\u2019t an actual employee\u2019s laptop with years of files, it was a purpose built laptop for this specific test. We did, however, find the VPN client in use:  Palo Alto\u2019s Global Protect (GP). GP has an interesting \u201cfeature\u201d called a  Pre-logon tunnel:\n Pre-logon is a connect method that establishes a VPN tunnel before a user logs in. The purpose of pre-logon is to authenticate the endpoint (not the user) and enable domain scripts or other tasks to run as soon as the endpoint powers on.\n That sounds like a really nice feature for an IT department to manage their endpoints. It also sounds like a great way to access the VPN without knowing anyone\u2019s credentials. In theory, if we could boot a backdoored version of the laptop, e.g. use  the sticky keys backdoor, we should be able to access the VPN tunnel without ever needing any credentials. In practice there are lots of ways to accomplish that but we decided to go the virtualization route in the interest of speed.\n Since we have write access to the entire file system, we could have done anything including rewriting driver files for kernel level malware to proxying privileged DLLs to just adding accounts. In the interest of time and efficiency, sticky keys is perfect for this scenario, whose process is simply:\n  Now that we have backdoor access, we just need to boot the drive. In order to boot the decrypted Windows image as a Virtual Machine, we first needed to create a custom VMDK file. This file needs to set up the parameters and map the start sectors of the decrypted BitLocker partition and encrypted image to the appropriate VM partitions. The resulting VMDK was:\n # Disk DescriptorFileversion=1CID=19362586parentCID=ffffffffcreateType=&#34;partitionedDevice&#34;# Extent descriptionRW 63 FLAT &#34;ssd-dd.img&#34; 0RW 1985 FLAT &#34;ssd-dd.img&#34; 2048RW 1024000 ZERORW 1024000 FLAT &#34;ssd-dd.img&#34; 1026048RW 262144 FLAT &#34;ssd-dd.img&#34; 2050048# This is the 4th partition where the encrypted bitlocker drive wasRW 497805312 FLAT &#34;dislocker2-file&#34; 0RW 655 ZERO RW 33 FLAT &#34;ssd-dd.img&#34; 63ddb.virtualHWVersion = &#34;4&#34;ddb.adapterType=&#34;ide&#34;ddb.geometry.cylinders=&#34;16383&#34;ddb.geometry.heads=&#34;16&#34;ddb.geometry.sectors=&#34;63&#34;ddb.uuid.image=&#34;43e1e-5c24-46cc-bcec-daad3d500&#34;ddb.uuid.parent=&#34;00000000-0000-0000-0000-000000000000&#34;ddb.uuid.modification=&#34;8d285-ad86-4227-86d4-ec168b6b3&#34;ddb.uuid.parentmodification=&#34;00000000-0000-0000-0000-000000000000&#34;ddb.geometry.biosCylinders=&#34;1024&#34;ddb.geometry.biosHeads=&#34;255&#34;ddb.geometry.biosSectors=&#34;63&#34;\n Now, with that VMDK and the sticky keys backdoored Windows image, we created the virtual machine, booted it, and hit WIndows + U at the login screen.\n  That\u2019s exactly what we wanted. For this to work, authentication to the VPN happens via a certificate attached to the computer account. Since every computer account has very basic privileges in Active Directory, we can run basic SMB commands within the domain. We queried the domain controller for various types of domain information such as users, groups, systems, etc. We could also list and view the contents of files on internal SMB shares:\n  We can also use this computer account\u2019s access as a platform for launching internal attacks and escalating laterally. To prove we had write access to a server that we shouldn\u2019t have, we chose the internal file server from above. The proof of concept was to write a file to that server and read it back to prove read/write access.\n  This \u201cScanner\u201d share is a great choice for an attacker as a watering hole for various techniques, e.g. LNK attacks, trojaned PDFs, etc. At this point we had gained access to the internal network, basic privileges on Active Directory, and access to internal file shares, more than enough to start compromising sensitive corporate data.\n  To recap, we took a locked down FDE laptop, sniffed the BitLocker decryption key coming out of the TPM, backdoored a virtualized image, and used its VPN auto-connect feature to attack the internal corporate network. That is one way to go from stolen laptop to internal compromise.\n  Special thanks for the researchers who shared their knowledge previously and helped make this attack more realistic, practical, and quicker:", "posttime": "2021-07-29 21:58:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u7b14\u8bb0\u672c\u7535\u8111,laptop,quot", "title": "\u4ece\u88ab\u76d7\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5230\u516c\u53f8\u7f51\u7edc\u5185\u90e8", "title_en": "From stolen laptop to inside the company network", "transed": 1, "url": "https://dolosgroup.io/blog/2021/7/9/from-stolen-laptop-to-inside-the-company-network", "via": "", "real_tags": ["\u7535\u8111", "\u7b14\u8bb0\u672c\u7535\u8111", "laptop", "quot"]}, {"category": "", "categoryclass": "", "imagename": "7371b63b98290fa27865093cd1985ae9.jpg", "infoid": 1070260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "git bisect \u547d\u4ee4\u53ef\u5e2e\u52a9\u60a8\u8bc6\u522b\u7834\u574f\u67d0\u4e9b\u5185\u5bb9\u7684\u8303\u56f4\u5185\u7684\u7b2c\u4e00\u4e2a\u63d0\u4ea4\u3002\u4f60\u7ed9\u5b83\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u548c\u4e00\u4e2a\u574f\u7684\u63d0\u4ea4\uff0c\u5b83\u4f1a\u5728\u4e24\u8005\u4e4b\u95f4\u505a\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u574f\u63d0\u4ea4\u3002\u5728\u6bcf\u4e00\u6b65\uff0c\u60a8\u90fd\u53ef\u4ee5\u6839\u636e\u5b83\u662f\u5426\u901a\u8fc7\u6d4b\u8bd5\u6765\u9009\u62e9 git bisect good \u6216 git bisect bad\uff0c\u8fd9\u5c06\u4f7f\u60a8\u5728\u8be5\u8303\u56f4\u5185\u7684\u5269\u4f59\u63d0\u4ea4\u4e2d\u9014\u5b8c\u6210\u3002\u6709\u51e0\u4e2a\u5173\u4e8e\u5728 Linux \u5185\u6838\u4e2d\u4f7f\u7528 git bisect \u7684\u6307\u5357\uff08\u4f8b\u5982\uff0cupstream\u3001Gentoo \u548c Ubuntu \u90fd\u6709\u4e00\u4e2a\uff09\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u662f\u975e\u5e38\u8017\u65f6\u7684\u64cd\u4f5c\uff1b\u4ed6\u4eec\u90fd\u8bf4\u4e86\u8fd9\u6837\u7684\u8bdd\uff0c\u201c\u73b0\u5728\u6784\u5efa\u5185\u6838\uff0c\u91cd\u65b0\u542f\u52a8\u5b83\uff0c\u5e76\u6d4b\u8bd5\u5b83\uff0c\u7136\u540e\u6839\u636e\u5b83\u662f\u5426\u6709\u6548\u8f93\u5165 git bisect good \u6216 git bisect bad\u3002\u201d\u5bf9\u4e8e\u68d8\u624b\u7684\u786c\u4ef6\u517c\u5bb9\u6027\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u662f\u60a8\u552f\u4e00\u7684\u9009\u62e9\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6b63\u5728\u6d4b\u8bd5\u6709\u5173\u5185\u6838\u884c\u4e3a\u7684\u67d0\u4e9b\u5185\u5bb9\uff0c\u8fd9\u5c06\u4e0d\u5fc5\u8981\u5730\u7f13\u6162\u4e14\u624b\u52a8\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u505a\u5176\u4ed6\u4e8b\u60c5\uff0c\u4f8b\u5982\u8bfb\u53d6\u63d0\u4ea4\u65e5\u5fd7\u3002\u524d\u51e0\u5929\u5728\u5de5\u4f5c\u4e2d\uff0c\u6709\u4eba\u62a5\u544a\u8bf4\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5728\u65b0\u865a\u62df\u673a\u4e2d\u4e0d\u518d\u5de5\u4f5c\u3002\u5728\u4f7f\u7528 strace \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u8c03\u8bd5\u540e\uff0c\u6211\u4eec\u786e\u5b9a\u8be5\u7a0b\u5e8f\u6b63\u5728\u4ee5 0 \u7684\u79ef\u538b\u8c03\u7528 listen \u7cfb\u7edf\u8c03\u7528\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u613f\u610f\u63a5\u53d7\u6700\u591a\u96f6\u4e2a\u8fde\u63a5\u3002\u6839\u636e\u89c4\u8303\uff0c\u5b83\u4e0d\u5e94\u8be5\u5de5\u4f5c\u2014\u2014\u4f46\u5b83\u786e\u5b9e\u5728\u4ed6\u4eec\u7684\u65e7\u865a\u62df\u673a\u4e0a\u5de5\u4f5c\u3002\u65b0\u7cfb\u7edf\u4e4b\u95f4\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\uff0c\u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f\u65b0 VM \u7684\u5185\u6838\u4e3a 4.9\uff0c\u65e7\u7684\u5185\u6838\u4e3a 4.1\u3002 \uff08\u53e6\u4e00\u4e2a\u662f\u5b83\u90e8\u7f72\u5728\u6211\u7684\u56e2\u961f\u8d1f\u8d23\u7684\u65b0\u4e91\u73af\u5883\u4e2d\uff0c\u6709\u4e00\u4e9b\u7f51\u7edc\u53d8\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u786e\u4fdd\u6211\u4eec\u6ca1\u6709\u7834\u574f\u4efb\u4f55\u4e1c\u897f\uff01\uff09\u6211\u5c1d\u8bd5\u901a\u8bfb git log --grep listen v4.1\u3002 .v4.9 net/\uff0c\u4f46\u5185\u5bb9\u592a\u591a\u4e86\uff0c\u6211\u4ec0\u4e48\u4e5f\u627e\u4e0d\u5230\u3002\u6240\u4ee5\u6211\u51b3\u5b9a\u770b\u770b\u4e8c\u5206\u662f\u5426\u53ef\u4ee5\u5e2e\u52a9\u6211\uff0c\u4f7f\u7528 git bisect run\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5168\u81ea\u52a8\u4e8c\u7b49\u5206\u3002\u6211\u5bf9\u91cd\u65b0\u542f\u52a8\u6211\u7684\u673a\u5668\u4ee5\u5bf9\u516b\u4e2a\u5185\u6838\u7248\u672c\u8fdb\u884c\u4e8c\u8fdb\u5236\u641c\u7d22\u5e76\u4e0d\u611f\u5230\u5174\u594b\uff0c\u4f46\u662f\u5982\u679c\u6211\u80fd\u8ba9\u5b83\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8fd0\u884c\uff0c\u6211\u53ef\u4ee5\u8ba9\u5b83\u7ee7\u7eed\u8fd0\u884c\u3002\u5bf9\u4e8e\u666e\u901a\u7a0b\u5e8f\uff0c\u4f7f\u7528 git bisect run \u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u6210\u529f (0) \u6216\u5931\u8d25 (1) \u7684\u547d\u4ee4\uff1a\u60a8\u901a\u5e38\u53ef\u4ee5\u6267\u884c\u8bf8\u5982 git bisect run make test \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u5185\u6838\u56de\u5f52\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u547d\u4ee4\u6765\u5f15\u5bfc\u5185\u6838\u5e76\u8fd0\u884c\u4e00\u4e9b\u4ee3\u7801\u3002\u4e3a\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 qemu \u865a\u62df\u673a\u8f6f\u4ef6\uff0c\u5b83\u6709\u4e24\u4e2a\u7279\u6027\u4f7f\u5b83\u7279\u522b\u9002\u5408\u4f5c\u4e3a\u8fd9\u6837\u7684\u547d\u4ee4\uff1a\u5b83\u53ef\u4ee5\u76f4\u63a5\u5f15\u5bfc Linux \u5185\u6838\uff0c\u800c\u4e0d\u662f\u5728\u786c\u76d8\u4e0a\u6a21\u62df\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u8fd0\u884c\u4e34\u65f6 VM\u5728\u5355\u4e2a\u547d\u4ee4\u884c\u4e2d\uff0c\u65e0\u9700\u4efb\u4f55\u989d\u5916\u8bbe\u7f6e\u3002\u6211\u4eec\u5c06\u4e3a\u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u5f88\u5c0f\u7684\u201cinitrd\u201d\uff08\u521d\u59cb RAM \u78c1\u76d8\uff09\uff0c\u5b83\u901a\u5e38\u7528\u4e8e\u52a0\u8f7d\u8db3\u591f\u7684\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u8bbf\u95ee\u60a8\u7684\u786c\u76d8\u9a71\u52a8\u5668\u5e76\u5b8c\u5168\u542f\u52a8\u60a8\u7684\u7cfb\u7edf\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684 initrd \u5c06\u53ea\u5305\u542b\u6211\u4eec\u7684\u4e00\u4e2a\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5b83\u53ef\u80fd\u4f1a\u6253\u5370\u4e00\u6761\u6210\u529f\u6d88\u606f\uff0c\u5e76\u5173\u95ed\u7cfb\u7edf\u3002\u6211\u4eec\u65e0\u6cd5\u4ece qemu \u4e2d\u6709\u610f\u4e49\u5730\u83b7\u5f97\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4ec5 grep \u5176\u8f93\u51fa\u4ee5\u83b7\u53d6\u6210\u529f\u6d88\u606f\u3002\u7b2c\u4e00\u6b65\u662f\u68c0\u67e5\u5185\u6838\u6e90\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b83\u4eec\uff0c\u5e76\u6784\u5efa\u4e00\u4e2a\u5185\u6838\uff1a\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u4e0a\u4f7f\u7528 VM \u7684\u4e32\u884c\u63a7\u5236\u53f0\u4ee5\u6587\u672c\u6a21\u5f0f\u8fd0\u884c\u5b83\uff0c\u800c\u4e0d\u662f\u5c1d\u8bd5\u5f39\u51fa\u56fe\u5f62\u7a97\u53e3\uff0c\u5e76\u544a\u8bc9\u5185\u6838\u4f7f\u7528\u4e32\u884c\u7aef\u53e3\u8fdb\u884c\u63a7\u5236\u53f0\u8f93\u51fa\u3002\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u652f\u6301\u5b83\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0 -enable-kvm \u4ee5\u4f7f\u5176\u66f4\u5feb\uff0c\u5c3d\u7ba1\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728\u8fd0\u884c\u6d4b\u8bd5\u540e\u7acb\u5373\u5173\u95ed VM\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u4ea7\u751f\u592a\u5927\u5dee\u5f02\uff082 \u79d2\u5bf9 4 \u79d2\uff09\u6211\u7684\u673a\u5668\uff09\u3002\u8fd9\u4f1a\u5f15\u8d77\u6050\u614c\uff0c\u56e0\u4e3a\u6211\u4eec\u65e2\u6ca1\u6709\u7ed9\u5185\u6838\u4e00\u4e2a\u6839\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e5f\u6ca1\u6709\u7ed9\u5b83\u4e00\u4e2a\u6709\u6548\u7684 initrd\u3002 \uff08\u60a8\u53ef\u4ee5\u901a\u8fc7\u6309 Ctrl-A \u548c X \u6765\u7ec8\u6b62 VM\u3002\uff09\u6240\u4ee5\u8ba9\u6211\u4eec\u7528\u5355\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 init \u7f16\u5199\u4e00\u4e2a initrd\u3002\u5b83\u9700\u8981\u5173\u95ed\u7cfb\u7edf\uff0c\u6240\u4ee5\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u63d0\u793a\uff1a $ mkdir initrd $ cd initrd $ cat &gt; init.c &lt;&lt; EOF #include &lt;sys/reboot.h&gt; #include &lt;stdio.h&gt; #include &lt; unistd.h&gt; int main(void) { printf(&quot;Hello world!\\n&quot;);\u91cd\u542f\uff08RB_POWER_OFF\uff09\uff1b EOF\uff08\u662f\u7684\uff0c\u5173\u95ed\u7cfb\u7edf\u7684\u7cfb\u7edf\u8c03\u7528\u540d\u4e3a\u201crebo\u200b\u200bot\u201d\uff0c\u56e0\u4e3a\u7cfb\u7edf\u8c03\u7528\u5df2\u7ecf\u4f7f\u7528\u4e86\u201cshutdown\u201d\u8fd9\u4e2a\u540d\u79f0\u6765\u5173\u95ed\u5957\u63a5\u5b57\u3002\u6211\u731c\u65e9\u671f\u7684 UNIX \u8ba1\u7b97\u673a\u4e0d\u652f\u6301\u542f\u52a8\u786c\u4ef6\u65ad\u7535\u6765\u81ea\u8f6f\u4ef6\uff0c\u6240\u4ee5\u5173\u673a\u547d\u4ee4\u53ea\u4f1a\u505c\u6b62\u6240\u6709\u8fdb\u7a0b\uff0c\u540c\u6b65\u548c\u5378\u8f7d\u78c1\u76d8\uff0c\u5e76\u6253\u5370\u4e00\u6761\u6d88\u606f\uff0c\u8981\u6c42\u64cd\u4f5c\u5458\u5207\u65ad\u7535\u6e90\u3002\uff09\u9759\u6001\u7f16\u8bd1\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5f62\u5f0f\u4e2dinitrd\uff08\u4e00\u4e2a\u538b\u7f29\u7684 cpio \u6863\u6848\uff0c\u4e00\u79cd\u53e4\u8001\u4f46\u975e\u5e38\u7b80\u5355\u7684\u683c\u5f0f\uff0c\u5e26\u6709\u4e00\u4e2a\u5947\u602a\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff09\u5e76\u786e\u4fdd\u5b83\u88ab\u547d\u540d\u4e3a init\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528 qemu \u542f\u52a8\u5b83\uff1a $ cd initrd $ cc -static -o init init\u3002 c $ \u56de\u58f0\u521d\u59cb\u5316 | cpio -H newc -o | gzip &gt; initrd.gz 1621 \u5757 $ cd .. $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz... [ 0.502593 ] ALSA \u8bbe\u5907\u5217\u8868\uff1a [0.502889]\u672a\u627e\u5230\u58f0\u5361\u3002 [0.503554]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5b58\u50a8\u5668\uff1a1088K\uff08ffffffff81f2f000  -  ffffffff8203f000\uff09[0.504262]\u5199\u4fdd\u62a4\u5185\u6838\u53ea\u8bfb\u6570\u636e\uff1a14336k [0.505004]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5b58\u50a8\u5668\uff1a1680K\uff08ffff88000185c000  -  ffff880001a00000\uff09[0.505855]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5185\u5b58\uff1a1340K (ffff880001cb1000 - ffff880001e00000) \u4e16\u754c\u4f60\u597d\uff01 [1.089618] \u8f93\u5165\uff1aImExPS/2 \u901a\u7528\u8d44\u6e90\u7ba1\u7406\u5668\u9f20\u6807\u4f5c\u4e3a /devices/platform/i8042/serio1/input/input3 [1.092997] ACPI\uff1a\u51c6\u5907\u8fdb\u5165\u7cfb\u7edf\u7761\u7720\u72b6\u6001 S5 [1.094083] \u91cd\u542f\uff1a\u65ad\u7535\u5f88\u68d2\u3002\u6211\u4eec\u5df2\u7ecf\u6784\u5efa\u4e86\u81ea\u5df1\u7684\u5185\u6838\uff0c\u5411\u5b83\u4f20\u9012\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fd0\u884c\uff0c\u5e76\u5728\u9000\u51fa\u7684 qemu \u547d\u4ee4\u4e2d\u542f\u52a8\u5b83\u3002\u8fd9\u53d8\u6210\u4e86\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u7ed9 git bisect run \u7684\u4e1c\u897f\u3002\u73b0\u5728\u662f\u7f16\u5199\u5b9e\u9645\u6d4b\u8bd5\u7684\u65f6\u5019\u4e86\u3002\u8fd9\u662f\u6211\u6700\u7ec8\u8ffd\u8e2a\u6211\u7684\u9519\u8bef\u7684\u7ed3\u679c\uff1a\n#include &lt;sys/types.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/time.h&gt; #include &lt;sys/reboot.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;net/ if.h&gt; #include &lt;netinet/in.h&gt; #include &lt;netinet/tcp.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int main ( void ) { / * \u6211\u6b63\u5728\u8ffd\u8e2a\u7684\u95ee\u9898\u53ea\u6709\u5728\u7981\u7528 syncookies \u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u91cd\u73b0\u3002\u867d\u7136 initrd \u88ab\u89e3\u538b\u5230\u4e00\u4e2a\u53ef\u5199\u7684\u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4f46\u4ec0\u4e48\u90fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u5982\u679c\u6211\u9700\u8981 /proc\uff0c\u6211\u9700\u8981\u81ea\u5df1\u521b\u5efa\u548c\u6302\u8f7d\u5b83\u3002 */ if ( getpid () == 1 ) { mkdir (&quot;/proc&quot;); mount ( &quot;proc&quot; , &quot;/proc&quot; , &quot;proc&quot; , 0 , NULL ); char buf [] = &quot;0 \\n&quot; ; int fd = open ( &quot;/proc/sys/net/ipv4/tcp_syncookies&quot; , O_WRONLY );\u5199 ( fd , buf , 2 );\u5173\u95ed ( fd ); } int server = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); /* \u6b64\u5916\uff0c\u867d\u7136\u5b58\u5728\u73af\u56de\u4ee5\u592a\u7f51\u8bbe\u5907\uff0c\u4f46\u5b83\u5e76\u672a\u542f\u7528\uff0c\u56e0\u6b64\u7f51\u7edc\u6d4b\u8bd5\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002\u6b64\u4ee3\u7801\u7b49\u6548\u4e8e `ifconfig lo up`\u3002 */ struct ifreq ifreq = { . ifr_name = &quot;lo&quot; , }; ioctl ( server , SIOCGIFFLAGS , &amp; ifreq ); if ( ! ( ifreq . ifr_flags &amp; IFF_UP )) { ifreq . ifr_flags |= IFF_UP ; ioctl ( \u670d\u52a1\u5668 , SIOCSIFFLAGS , &amp; ifreq ); } struct sockaddr_in addr = { . sin_family = AF_INET , . sin_port = htons (54321), . sin_addr = { htonl ( INADDR_LOOPBACK )}, }; bind ( server , ( struct sockaddr * ) &amp; addr , sizeof ( addr ));\u542c\uff08\u670d\u52a1\u5668\uff0c0\uff09\uff1b int client = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP );\u7ed3\u6784\u65f6\u95f4\u8d85\u65f6 = { 3 , 0 }; setockopt ( \u5ba2\u6237\u7aef , SOL_SOCKET , SO_SNDTIMEO , &amp; timeout , sizeof ( timeout )); if ( connect ( client , ( struct sockaddr * ) &amp; addr , sizeof ( addr )) == 0 ) { printf ( &quot;Success \\n &quot;); } else { perror\uff08\u201c\u8fde\u63a5\u201d\uff09\uff1b } if ( getpid () == 1 ) { \u91cd\u542f( RB_POWER_OFF ); } \u8fd4\u56de 0 ;\u5927\u90e8\u5206\u5185\u5bb9\u7279\u5b9a\u4e8e\u6211\u5c1d\u8bd5\u6d4b\u8bd5\u7684\u5185\u5bb9\uff0c\u4f46\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u4ee3\u7801\u6765\u521b\u5efa\u548c\u6302\u8f7d /proc \u6216\u542f\u7528 lo\u3002\u6b64\u5916\uff0c\u6211\u5728 getpid() == 1 \u4e0a\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u6761\u4ef6\uff0c\u4ee5\u4fbf\u6211\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u6211\u7684\u4e3b\u673a\u7cfb\u7edf\u4e0a\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5728\u90a3\u91cc\u5b83\u4e0d\u662f\u4ee5 root \u8eab\u4efd\u8fd0\u884c\uff0c\u5e76\u4e14\u6211\u4e0d\u5e0c\u671b\u5b83\u5173\u95ed\u4efb\u4f55\u7535\u6e90\u3002 \uff08\u6211\u5728 strace \u4e0b\u8fd0\u884c\u4e86\u51e0\u6b21\u4ee5\u786e\u4fdd\u5b83\u6309\u7167\u6211\u7684\u9884\u671f\u8fd0\u884c\uff0c\u800c\u4e14\u6211\u4e0d\u60f3\u8d39\u5fc3\u5728\u6211\u7684 initrd \u4e2d\u83b7\u53d6 strace\u3002\uff09\u6240\u4ee5\u6211\u9996\u5148\u786e\u4fdd\u8fd9\u53ef\u4ee5\u5728\u80a1\u7968\u5185\u6838\u4e0a\u91cd\u73b0\u672c\u8eab\uff0c\u4e0e\u6211\u7684\u5de5\u4f5c\u573a\u6240\u53ef\u80fd\u6dfb\u52a0\u7684\u4efb\u4f55\u914d\u7f6e\u9694\u79bb\uff1a $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success $ git checkout v4.1 $ make defconfig &amp;&amp; make -j8 $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^SuccessSuccess \u9177\uff0c\u8fd9\u7edd\u5bf9\u662f\u8fd9\u4e9b\u7248\u672c\u4e4b\u95f4\u7684\u56de\u5f52\u3002 \uff08\u914d\u7f6e\u9009\u9879\u96c6\u4ece\u5185\u6838\u7248\u672c\u5230\u5185\u6838\u7248\u672c\u4e0d\u540c\uff0c\u56e0\u6b64\u5728\u5982\u6b64\u5e7f\u6cdb\u7684\u8303\u56f4\u5185\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u83b7\u53d6\u5f53\u524d\u5185\u6838\u7684\u9ed8\u8ba4\u914d\u7f6e - \u5982\u679c\u60a8\u9700\u8981\u81ea\u5b9a\u4e49\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u4e4b\u540e\u7f16\u8f91 .config\u8fd0\u884c make defconfig \u6216\u5176\u4ed6\u4e1c\u897f\u3002\uff09\u73b0\u5728\u8ba9 git bisect run \u505a\u5b83\u7684\u4e8b\u60c5\uff1a $ git bisect start $ git bisect bad v4.9 $ git bisect good v4.1 $ git bisect run sh -c &#39;make defconfig &amp;&amp; make -j8 &amp;&amp; qemu-system-x86_64 -nographic -append console=ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success&#39; \u5b83\u5f00\u59cb\u6253\u5370\u4e00\u5806\u6784\u5efa\u65e5\u5fd7\uff0c\u7136\u540e\u6211\u5f00\u59cb\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u5927\u7ea6\u534a\u5c0f\u65f6\u540e\uff08\u6211\u9884\u8ba1\u9700\u8981\u66f4\u957f\u65f6\u95f4\uff01\uff09\uff0c\u5b83\u6253\u5370\u51fa\u6765\uff1a\nef547f2ac16bd9d77a780a0e7c70857e69e8f23f\u662f\u7b2c\u4e00\u574fcommitcommit ef547f2ac16bd9d77a780a0e7c70857e69e8f23fAuthor\uff1a\u57c3\u91cc\u514bDumazet &lt;edumazet@google.com&gt;\u65e5\u671f\uff1a\u661f\u671f\u4e9410\u67082\u65e511\u70b943\u520637\u79d22015 -0700 TCP\uff1a\u5220\u9664max_qlen_log\u8be5\u63a7\u5236\u53d8\u91cf\u8bbe\u5b9a\u4e3a\u7b2c\u4e00\u542c\uff08FD\uff0c\u79ef\u538b\uff09\u547c\u53eb\uff0c\u4f46\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8bd5\u56fe\u589e\u52a0\u6216\u51cf\u5c11\u79ef\u538b\uff0c\u5219\u4e0d\u4f1a\u66f4\u65b0\u3002\u5f53\u65f6\u76d1\u542c\u5668\u6709\u4e00\u4e2a\u4e0d\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u54c8\u5e0c\u8868\u662f\u6709\u9053\u7406\u7684\u3002\u6b64\u5916\uff0c\u56db\u820d\u4e94\u5165\u5230 2 \u7684\u5e42\u4e5f\u4e0d\u662f\u5f88\u53cb\u597d\u3002\u7b7e\u5b57\u4eba\uff1aEric Dumazet &lt;edumazet@google.com&gt; \u7b7e\u5b57\u4eba\uff1aDavid S. Miller &lt;davem@davemloft.net&gt;$ git describe --contains ef547f2ac16bd9d77a780a0e7c70857e69e8f23fv4.412^1^1 2~2 \u770b\u8d77\u6765\u975e\u5e38\u76f8\u5173\u2014\u2014\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u79ef\u538b\u5de5\u4f5c\u3002\u67e5\u770b\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a\u5728\u5185\u6838 4.4 \u4e4b\u524d\uff0cbacklog \u53c2\u6570\u7684\u4e0a\u9650\u603b\u662f\u81f3\u5c11\u4e3a 8\uff0c\u5e76\u4e14\u8fd8\u4f1a\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a 2 \u7684\u5e42\u3002\u56e0\u6b64\uff0c\u5728\u8f83\u65e7\u7684\u5185\u6838\u4e0a\uff0clisten(fd, 0) \u53d8\u6210\u4e86 listen(fd, 8)\uff0c\u5c3d\u7ba1\u4f7f\u7528\u4e86\u9519\u8bef\u7684 listen()\uff0c\u4f46\u8be5\u7a0b\u5e8f\u4e4b\u524d\u4ecd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u8fd9\u4e2a\u63d0\u4ea4\u5b9e\u9645\u4e0a\u5728\u6211\u8bd5\u56fe\u9605\u8bfb\u7684 git \u65e5\u5fd7\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u4f46\u6211\u4e00\u5b9a\u5df2\u7ecf\u6eda\u52a8\u8fc7\u4e86\u5b83\u3002 git reflog \u663e\u793a git bisect \u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\u7ecf\u5386\u4e86 16 \u6b21\u63d0\u4ea4\uff1a\u5b83\u5728\u7b2c 11 \u6b21\u5c1d\u8bd5\u65f6\u627e\u5230\u4e86\u8fd9\u4e2a\uff0c\u7136\u540e\u53c8\u82b1\u4e86 5 \u6b21\u63d0\u4ea4\u786e\u8ba4\u5728\u8fd9\u4e2a\u63d0\u4ea4\u4e4b\u524d\u7684\u6240\u6709\u63d0\u4ea4\u90fd\u662f\u597d\u7684\u3002\u6240\u4ee5\u6211\u5f88\u9ad8\u5174 git bisect run \u627e\u5230\u4e86\u8fd9\u4e2a\u63d0\u4ea4\uff0c\u6211\u7279\u522b\u9ad8\u5174\u5b83\u5728\u65e0\u4eba\u770b\u7ba1\u7684\u534a\u5c0f\u65f6\u5185\u627e\u5230\u4e86\u5b83\uff0c\u800c\u6211\u4e0d\u5fc5\u624b\u52a8\u7f16\u8bd1\u548c\u6d4b\u8bd5 16 \u4e2a\u5185\u6838\u3002", "note_en": "The  git bisect command helps you identify the first commit in a range that broke something. You give it a good commit and a bad one, and it will do a binary search between the two to find the first bad commit. At each step, you say either  git bisect good or  git bisect bad depending on whether it passes your test, and it will move you halfway through the remaining commits in the range.\n There are several guides for using git bisect with the Linux kernel (e.g.,  upstream,  Gentoo, and  Ubuntu all have one). Unfortunately, they&#39;re pretty time-intensive operations; they all say something to the effect of, &#34;now build the kernel, reboot into it, and test it, then type  git bisect good or  git bisect bad depending on whether it worked.&#34; For a tricky hardware compatibility bug, this might be your only option. But if you&#39;re testing something about the kernel&#39;s behavior, this is unnecessarily slow and manual, and you might be tempted to do something else, like read commit logs.\n At work a few days ago, someone reported that a certain application no longer worked in a new VM. After some initial debugging with  strace, we determined that the program was calling the  listen system call with a backlog of 0: that is, it was saying it was willing to accept up to zero connections. By the specification, it shouldn&#39;t work\u2014and yet it did work on their older VM. A few things were different between the new systems, but one notable one was that the new VM had kernel 4.9 and the old one kernel 4.1. (Another was that it was deployed in a new cloud environment that my team is responsible for, with some networking changes, so we wanted to ensure we had not broken anything!)\n I tried reading through  git log --grep listen v4.1..v4.9 net/, but there was entirely too much and I couldn&#39;t find anything. So I decided to see if bisection could help me, with the use of  git bisect run, which enables  fully automated bisecting. I wasn&#39;t excited about rebooting my machine to do a binary search across eight kernel releases, but if I could get it to run in some other way, I could just leave it running.\n For a normal program, it&#39;s pretty easy to use  git bisect run, which just wants a command that returns success (0) or failure (1): you can usually do something like  git bisect run make test. For a kernel regression, though, we&#39;ll need a command to boot the kernel and run some code. We can use the  qemu virtual machine software for this, which has two properties that make it particularly suitable as such a command: it can boot a Linux kernel directly, instead of emulating a bootloader on a hard disk, and it can run a temporary VM in a single command line without any additional setup.\n We&#39;ll build ourselves a tiny &#34;initrd&#34; (initial RAM disk), which is what&#39;s commonly used to load enough drivers to access your hard drive and completely boot your system. However, our initrd will just contain our one test program, which will possibly print a success message, and shut down the system. We can&#39;t meaningfully get a return value out of qemu, so we&#39;ll just grep its output for the success message.\n The first step is to check out the kernel sources, if we don&#39;t have them already, and build a kernel:\n      That is, run it in text mode with the VM&#39;s serial console on standard input/output instead of trying to pop up a graphical window, and tell the kernel to use the serial port for console output. If your system supports it, you can add  -enable-kvm to make it a faster, although since we want to shut down the VM immediately once we run our test, it doesn&#39;t make a huge difference (2 seconds vs. 4 on my machine).\n This will panic, because we gave the kernel neither a root filesystem nor a working initrd. (You can kill the VM by typing Ctrl-A and then X.) So let&#39;s write an initrd with a single binary,  init. It needs to shut down the system, so we get back to our prompt:\n $ mkdir initrd $  cd initrd $ cat &gt; init.c  &lt;&lt; EOF #include &lt;sys/reboot.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int main(void) {  printf(&#34;Hello world!\\n&#34;);  reboot(RB_POWER_OFF); } EOF\n (Yes, the system call for shutting down the system is named &#34; reboot&#34;, because the name &#34; shutdown&#34; was already used for the system call to close a socket. I guess early UNIX computers didn&#39;t support initiating a hardware poweroff from software, so the  shutdown  command would just stop all processes, sync and unmount disks, and print a message asking the operator to cut power.)\n Compile this program statically, so it&#39;s a single binary, put it in the particular form required for an initrd (a compressed cpio archive, an old but very simple format with a weird command-line tool) and make sure it&#39;s named  init, and then we can boot it up with qemu:\n $  cd initrd $ cc -static -o init init.c $  echo init  | cpio -H newc -o  | gzip &gt; initrd.gz 1621 blocks $  cd .. $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz... [ 0.502593 ] ALSA device list: [ 0.502889 ] No soundcards found. [ 0.503554 ] Freeing unused kernel memory: 1088K  (ffffffff81f2f000 - ffffffff8203f000 ) [ 0.504262 ] Write protecting the kernel  read-only data: 14336k [ 0.505004 ] Freeing unused kernel memory: 1680K  (ffff88000185c000 - ffff880001a00000 ) [ 0.505855 ] Freeing unused kernel memory: 1340K  (ffff880001cb1000 - ffff880001e00000 )Hello world! [ 1.089618 ] input: ImExPS/2 Generic Explorer Mouse as /devices/platform/i8042/serio1/input/input3 [ 1.092997 ] ACPI: Preparing to enter system sleep state S5 [ 1.094083 ] reboot: Power down\n Great. We&#39;ve built our own kernel, passed it a test binary to run, and got it booted in a qemu command that exits. This is turning into something we can pass to  git bisect run. Now it&#39;s time to write the actual test. Here&#39;s what I ultimately ended up with to track down my bug:\n #include &lt;sys/types.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/time.h&gt; #include &lt;sys/reboot.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;net/if.h&gt; #include &lt;netinet/in.h&gt; #include &lt;netinet/tcp.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int  main ( void )  {  /* The problem I was tracing was only reproducible with syncookies  disabled. While the initrd gets unpacked into a writable temporary  filesystem, nothing exists yet, so if I need /proc, I need to create  and mount it myself. */  if  ( getpid ()  ==  1 )  {  mkdir ( &#34;/proc&#34; );  mount ( &#34;proc&#34; ,  &#34;/proc&#34; ,  &#34;proc&#34; ,  0 ,  NULL );  char  buf []  =  &#34;0 \\n &#34; ;  int  fd  =  open ( &#34;/proc/sys/net/ipv4/tcp_syncookies&#34; ,  O_WRONLY );  write ( fd ,  buf ,  2 );  close ( fd );  }  int  server  =  socket ( AF_INET ,  SOCK_STREAM ,  IPPROTO_TCP );  /* Also, while a loopback ethernet device exist, it&#39;s not  enabled, so network tests won&#39;t work. This code is equivalent  to `ifconfig lo up`. */  struct  ifreq  ifreq  =  {  . ifr_name  =  &#34;lo&#34; ,  };  ioctl ( server ,  SIOCGIFFLAGS ,  &amp; ifreq );  if  ( ! ( ifreq . ifr_flags  &amp;  IFF_UP ))  {  ifreq . ifr_flags  |=  IFF_UP ;  ioctl ( server ,  SIOCSIFFLAGS ,  &amp; ifreq );  }  struct  sockaddr_in  addr  =  {  . sin_family  =  AF_INET ,  . sin_port  =  htons ( 54321 ),  . sin_addr  =  { htonl ( INADDR_LOOPBACK )},  };  bind ( server ,  ( struct  sockaddr  * ) &amp; addr ,  sizeof ( addr ));  listen ( server ,  0 );  int  client  =  socket ( AF_INET ,  SOCK_STREAM ,  IPPROTO_TCP );  struct  timeval  timeout  =  { 3 ,  0 };  setsockopt ( client ,  SOL_SOCKET ,  SO_SNDTIMEO ,  &amp; timeout ,  sizeof ( timeout ));  if  ( connect ( client ,  ( struct  sockaddr  * ) &amp; addr ,  sizeof ( addr ))  ==  0 )  {  printf ( &#34;Success \\n &#34; );  }  else  {  perror ( &#34;connect&#34; );  }  if  ( getpid ()  ==  1 )  {  reboot ( RB_POWER_OFF );  }  return  0 ; }\n Most of it is specific to the thing I was trying to test, but you may also need the code to create and mount  /proc or to enable  lo. Also, I put a few things conditional on  getpid() == 1 so that I could safely test the program on my host system, where it wasn&#39;t running as root and where I didn&#39;t want it powering anything off. (I ran it a few times under  strace to make sure it was doing what I expected it to do, and I didn&#39;t want to bother with getting  strace inside my initrd.)\n So I first made sure this is reproducible on a stock kernel by itself, isolated from any config my workplace might add:\n $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz  | grep ^Success $ git checkout v4.1 $ make defconfig  &amp;&amp; make -j8 $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz  | grep ^SuccessSuccess\n Cool, it&#39;s definitely a regression somewhere between those versions. (The set of config options change from kernel version to kernel version, so across this wide of a range, the easiest thing is to just get the current kernel&#39;s default config - if you need custom config options, you might want to edit .config after running  make defconfig or something.) Now time to let  git bisect run do its thing:\n $ git bisect start $ git bisect bad v4.9 $ git bisect good v4.1 $ git bisect run sh -c  &#39;make defconfig &amp;&amp; make -j8 &amp;&amp; qemu-system-x86_64 -nographic -append console=ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success&#39;\n It started printing a bunch of build logs and I went to work on something else. About half an hour later (I expected it to take longer!), it prints this out:\n ef547f2ac16bd9d77a780a0e7c70857e69e8f23f is the first bad commitcommit ef547f2ac16bd9d77a780a0e7c70857e69e8f23fAuthor: Eric Dumazet &lt;edumazet@google.com&gt;Date: Fri Oct 2 11:43:37 2015 -0700 tcp: remove max_qlen_log This control variable was set at first listen(fd, backlog) call, but not updated if application tried to increase or decrease backlog. It made sense at the time listener had a non resizeable hash table. Also rounding to powers of two was not very friendly. Signed-off-by: Eric Dumazet &lt;edumazet@google.com&gt; Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;$ git describe --contains ef547f2ac16bd9d77a780a0e7c70857e69e8f23fv4.4-rc1~141^2~238^2~2\n which looks awfully relevant\u2014it implies they were previously rounding off the backlog. Looking at commit, we can see what happened: before kernel 4.4,  the backlog argument was always capped to at least 8, and also rounded up to the next power of two. So  listen(fd, 0) was turning into  listen(fd, 8) on older kernels, and the program previously worked despite using  listen() incorrectly. This commit was actually somewhere in the  git log I was trying to read, but I must have scrolled past it.\n git reflog shows that  git bisect went through sixteen commits before settling on this one: it found this one on its 11th try, and then spent 5 more commits confirming that all the commits before this one were good. So I&#39;m glad  git bisect run found this commit, and I&#39;m especially glad it found it in half an hour unattended, without me having to manually compile and test sixteen kernels by hand.", "posttime": "2021-07-29 21:56:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "git,kernel,\u5185\u6838", "title": "\u4f7f\u7528 git bisect run (2018) \u5728\u534a\u5c0f\u65f6\u5185\u627e\u5230\u5185\u6838\u56de\u5f52", "title_en": "Finding a kernel regression in half an hour with git bisect run (2018)", "transed": 1, "url": "https://ldpreload.com/blog/git-bisect-run", "via": "", "real_tags": ["git", "kernel", "\u5185\u6838"]}, {"category": "", "categoryclass": "", "imagename": "8dbbc29b5c1bc33d6f69f35830e2744c.jpg", "infoid": 1070259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5b9e\u73b0\u5bf9\u7231\u56e0\u65af\u5766\u5e7f\u4e49\u76f8\u5bf9\u8bba\u7684\u9884\u6d4b\uff0c\u7814\u7a76\u4eba\u5458\u62a5\u544a\u4e86\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u6b21\u8bb0\u5f55\u5230\u9ed1\u6d1e\u8fdc\u7aef\u7684 X \u5c04\u7ebf\u53d1\u5c04\u3002\u65af\u5766\u798f\u5927\u5b66\u7684\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u4e39\u00b7\u5a01\u5c14\u91d1\u65af (Dan Wilkins) \u770b\u7740 X \u5c04\u7ebf\u4ece 8 \u4ebf\u5149\u5e74\u8fdc\u7684\u661f\u7cfb\u4e2d\u5fc3\u7684\u8d85\u5927\u8d28\u91cf\u9ed1\u6d1e\u5c04\u5165\u5b87\u5b99\uff0c\u53d1\u73b0\u4e86\u4e00\u79cd\u6709\u8da3\u7684\u6a21\u5f0f\u3002\u4ed6\u89c2\u5bdf\u5230\u4e00\u7cfb\u5217\u660e\u4eae\u7684 X \u5c04\u7ebf\u8000\u6591\u2014\u2014\u4ee4\u4eba\u5174\u594b\uff0c\u4f46\u5e76\u975e\u53f2\u65e0\u524d\u4f8b\u2014\u2014\u7136\u540e\uff0c\u671b\u8fdc\u955c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u4e1c\u897f\uff1a\u6bd4\u660e\u4eae\u7684\u8000\u6591\u66f4\u5c0f\u3001\u66f4\u665a\u3001\u201c\u989c\u8272\u201d\u4e0d\u540c\u7684\u989d\u5916 X \u5c04\u7ebf\u95ea\u5149\u3002", "note_en": "Fulfilling a prediction of Einstein\u2019s theory of general relativity, researchers report the first-ever recordings of X-ray emissions from the far side of a black hole.\n  Watching X-rays flung out into the universe by the supermassive black hole at the center of a galaxy 800 million light-years away, Stanford University astrophysicist  Dan Wilkins noticed an intriguing pattern. He observed a series of bright flares of X-rays \u2013 exciting, but not unprecedented \u2013 and then, the telescopes recorded something unexpected: additional flashes of X-rays that were smaller, later and of different \u201ccolors\u201d than the bright flares.", "posttime": "2021-07-29 21:55:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6765\u81ea,light,\u5c04\u7ebf", "title": "\u9996\u6b21\u63a2\u6d4b\u5230\u6765\u81ea\u9ed1\u6d1e\u540e\u9762\u7684\u5149", "title_en": "First detection of light from behind a black hole", "transed": 1, "url": "https://news.stanford.edu/2021/07/28/first-detection-light-behind-black-hole/", "via": "", "real_tags": ["\u6765\u81ea", "light", "\u5c04\u7ebf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070258, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee3\u6570\u6548\u5e94\u4f3c\u4e4e\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u4e00\u79cd\u5723\u676f\u3002\u5f53\u6211\u5728\u8fd9\u91cc\u8bf4\u201c\u4ee3\u6570\u6548\u5e94\u201d\u65f6\uff0c\u6211\u7684\u610f\u601d\u662f\uff1a\u5c06\u4efb\u4f55\u6548\u5e94\u89c6\u4e3a\u7a0b\u5e8f\u4e2d\u7684\u503c\u6216\u7c7b\u578b\uff0c\u540c\u65f6\u8fd8\u6709\u4e00\u4e9b\u7b80\u5355\u7684\u8fd0\u7b97\uff08\u4ee3\u6570\uff09\u6765\u7ec4\u5408\u6548\u5e94\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f\u60f3\u5230\u7684\u4e24\u79cd\u8bed\u8a00\u662f Idris \u548c PureScript\u3002\u5f53\u60a8\u4f7f\u7528\u4ed6\u4eec\u7684\u6548\u679c\u652f\u6301\u8fdb\u884c\u7f16\u7a0b\u65f6\uff0c\u60a8\u7f16\u5199\u4e86 monadic \u4ee3\u7801\uff0c\u4f46\u672c\u8d28\u4e0a\u6709\u4e00\u4e2a\u60a8\u53ef\u4ee5\u4ece\u73af\u5883\u4e2d\u63d0\u53d6\u7684\u6548\u679c\u5217\u8868\uff1a\u65e5\u5fd7\u8bb0\u5f55\u3001\u72b6\u6001\u3001IO \u7b49\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u9488\u5bf9\u4e00\u5806\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u53ea\u9700\u5047\u8bbe\u8fd9\u4e9b\u6548\u679c\u4f60\u9700\u8981\u7684\u5b58\u5728\uff0c\u5141\u8bb8\u6211\u4eec\u6839\u636e\u9700\u8981\u4efb\u610f\u589e\u52a0\u6548\u679c\u5806\u6808\u3002\u8fd9\u662f\u5f88\u4e0d\u9519\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u65e0\u6cd5\u5728 Haskell \u4e2d\u8bbf\u95ee\u8fd9\u4e9b\u5de5\u5177\u3002\u76f8\u53cd\uff0chaskellers \u901a\u5e38\u4f9d\u8d56\u4e8e mtl \u6216 Free Monads\u3002\u6211\u4eca\u5929\u8981\u5c55\u793a\u7684\u662f\u4e00\u4e2a\u63a5\u8fd1 Idris \u548c PureScript \u7684\u6548\u679c\u5e93\uff0c\u4f7f\u7528 van Laarhoven \u7f16\u7801\u7684 Free Monad\uff0c\u914d\u5907\u4e86\u4e00\u4e2a\u5f02\u6784\u5217\u8868 (HList) \u6548\u679c\u3002\u6211\u58f0\u79f0\u8fd9\u5177\u6709 Idris \u548c PureScript \u4e2d Effect \u5de5\u5177\u7684\u4e00\u4e9b\u597d\u5904\uff0c\u4e0e\u5e38\u89c4 Free Monads \u76f8\u540c\u7684\u8868\u73b0\u529b\uff0c\u6bd4 Church\u3001Fused \u6216 Oleg \u7f16\u7801\u66f4\u9ad8\u6548\u7684\u7f16\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\u3002\u5168\u90e8\u5728\u5927\u7ea6 60 \u884c\u4ee3\u7801\u4e2d\u3002 -- |\u6211\u4eec\u4f7f\u7528\u663e\u5f0f\u7684 `liftVL` \u7ec4\u5408\u5668\u7528\u4e8e\u8bf4\u660e\u76ee\u7684\u3002-- \u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u60a8\u5c06\u62e5\u6709\u81ea\u5df1\u7684\u7ec4\u5408\u5668\u3002-- \u53d1\u5e03 requestpostReq :: HasEffect \u6548\u679c Http =&gt; Url -&gt; RequestBody -&gt; FreeVL \u6548\u679c StatusCodepostReq url body = do resp &lt;- liftVL (\\http -&gt; put http url body) return (statusCode resp)-- \u53d6\u4efb\u610f\u81ea\u7531 monad \u5e76\u7528 loggingwithLog \u5305\u88c5\u5b83 :: HasEffect effects Logging =&gt; String -&gt; String -&gt; FreeVL effects a -&gt; FreeVL \u6548\u679c awithLog preMsg postMsg program = do liftVL (\\log -&gt; infoLogger log preMsg) a &lt;- program liftVL (\\log -&gt; infoLogger log postMsg) return a-- \u7528\u4e8e\u5b9a\u4e49\u89e3\u91ca\u5668\u7c7b\u578b\u7684\u5177\u4f53\u6548\u679c\u5217\u8868 MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: State &#39;: &#39;[] )--\u4f5c\u4e3a\u503c\u7684\u89e3\u91ca\u5668ioInterpreter :: Effects MyEffects IOioInterpreter = httpIO .: loggerIO .: randomIO .: stateIO .: EmptyEffect--\u5b9e\u9645\u8fd0\u884c\u6211\u4eec\u7684programmain :: IO ()main = interpret ioInterpreter (withLog &quot;POST!&quot; &quot;phew! made it!&quot; (postReq &quot;https://weirdcanada.com&quot; &quot;rare=cool&quot;) ) \u4e0a\u9762\u552f\u4e00\u7f3a\u5c11\u7684\u90e8\u5206\u662f\u6211\u4eec\u7684\u6548\u679c\uff08Http\u3001Logger \u7b49\uff09\u7684\u6837\u5b50\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a -- HTTP effectdata Http m = Http { get :: Url -&gt; m Response , put :: Url -&gt; RequestBody -&gt; m Response -- \u7b49\u7b49 }-- Logging effectdata Logging m = Logging { infoLogger :: String -&gt; m (), debugLogger :: String -&gt; m ()-- \u7b49\u7b49}\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u662f\u7528\u8bc6\u5b57\u7684haskell\u5199\u7684\u3002\u6211\u9f13\u52b1\u60a8\u526a\u5207\u5e76\u7c98\u8d34\u6b64\u4ee3\u7801\u5e76\u81ea\u5df1\u73a9\uff01\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\u548c\u5bfc\u5165\uff01 &gt; {-# LANGUAGE DataKinds #-}&gt; {-# LANGUAGE FlexibleContexts #-}&gt; {-# LANGUAGE FlexibleInstances #-}&gt; {-# LANGUAGE GADTs #-}&gt; {-# LANGUAGE KindSignatures #-}&gt; {-# LANGUAGE MultiParamTypeClasses #-}&gt; {-# LANGUAGE PolyKinds #-}&gt; {-# LANGUAGE RankNTypes #-}&gt; {-# LANGUAGE TypeOperators #-}&gt; &gt; module Main where&gt; &gt; import Control.Arrow ((&amp;&amp;&amp;))&gt; import Control .Concurrent(threadDelay)&gt; import Control.Exception(catch)&gt; import Control.Lens((^.))&gt; import Data.ByteString.Lazy(ByteString)&gt; import Network.Wreq(get, post, Response, responseStatus, statusCode) &gt; \u5bfc\u5165 Network.HTTP.Client (HttpException(StatusCodeException))&gt; \u5bfc\u5165\u5408\u683c\u7684 Network.HTTP.Types.Status \u4f5c\u4e3a S&gt; \u5bfc\u5165 System.Random (randomIO) \u6211\u5411\u60a8\u63a8\u8350 Russell O&#39;Connor \u5728 van Laarhoven Free Monad \u4e0a\u7684\u7cbe\u5f69\u535a\u6587.\u8fd9\u662f\u4e00\u4e2a\u7b80\u77ed\u800c\u7b80\u6d01\u7684\u8bfb\u7269\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0cvan Laarhoven Free Monad \u4e0e\u666e\u901a\u5355\u5b50\u662f\u53cc\u91cd\u7684\u3002\u6211\u4eec\u4f7f\u7528\u4e58\u79ef\u800c\u4e0d\u662f\u4f7f\u7528 sum \u7c7b\u578b\u6765\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5efa\u6a21\u3002 &gt; -- \u8f93\u5165\u522b\u540d\uff0c\u4f7f\u5b83\u770b\u8d77\u6765\u50cf\u771f\u6b63\u7684\u4ee3\u7801\u3002&gt; type Url = String&gt; type RequestBody = ByteString&gt; &gt; -- \u8001\u5f0f\u7684\u81ea\u7531\u5355\u5b50\u7f16\u7801&gt; data Free effect a = Pure a&gt; | Free (effect (Free effect a))&gt; &gt; -- \u793a\u4f8bhttp\u6548\u679c\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u4f7f\u7528Strings\u8868\u793aurl\u548c\u54cd\u5e94&gt; data YeOldeHttp a = Get Url (Response ByteString -&gt; a)&gt; | Post Url RequestBody (Response ByteString -&gt; a)&gt; &gt; -- \u793a\u4f8b\u89e3\u91ca\u5668&gt; freeIOInterp :: Free YeOldeHttp a -&gt; IO a&gt; freeIOInterp (Pure a) = return a&gt; freeIOInterp (Free (Get url next)) = get url &gt; &gt;= freeIOInterp \u3002 next&gt; freeIOInterp (Free (Post url body next)) = post url body &gt;&gt;= freeIOInterp \u3002 next&gt; &gt; -- \u793a\u4f8b\u7ec4\u5408\u5668&gt; oldGet :: Url -&gt; Free YeOldeHttp (Response ByteString)&gt; oldGet url = Free (Get url Pure) \u7ed9\u5b9a\u4e00\u4e2a\u6548\u679c\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u4e2asum-type\uff08\u6bcf\u4e2a\u5206\u652f\u4e0d\u540c\u7684\u64cd\u4f5c\uff08\u4f8b\u5982Get , Put)) \u6211\u4eec\u53ef\u4ee5\u8bc1\u660e Free YeOldHttp a \u662f\u4e00\u4e2a monad\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Gabriel \u7684\u535a\u5ba2\u6587\u7ae0\uff09\u5e76\u9488\u5bf9\u5b83\u7f16\u5199\u89e3\u91ca\u5668\uff0c\u4e3a\u5176\u63d0\u4f9b\u6b63\u786e\u7684\u8bed\u4e49\u3002 Free Monads \u7684\u91cd\u8981\u90e8\u5206\u662f\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e0d\u540c\u7684\u89e3\u91ca\u5668\uff0c\u6bcf\u4e2a\u89e3\u91ca\u5668\u90fd\u6709\u81ea\u5df1\u7684\u7279\u5b9a\u7528\u9014\uff08\u6d4b\u8bd5\u3001\u751f\u4ea7\u3001\u8c03\u8bd5\u7b49\uff09\u3002\u73b0\u5728\uff0cvan Laarhoven Free Monad \u662f\u4e00\u79cd\u4e0d\u540c\u7684\u7f16\u7801\uff0c\u9700\u8981\u60a8\u5c06\u6548\u679c\u8868\u793a\u4e3a\u4e58\u79ef\u800c\u4e0d\u662f\u603b\u548c\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u76f8\u5f53\u4e8e\uff1a &gt; -- (\u7b80\u5355) van Laarhoven Free Monad encoding&gt; newtype FreeVL1 effect a =&gt; FreeVL1 { runFreeVL1 :: forall m. Monad m =&gt; effect m -&gt; ma }&gt; &gt; -- \u4f8b\u5b50Http effect&gt; data NewHttp m =&gt; NewHttp { getNewHttp :: Url -&gt; m (Response ByteString)&gt; , postNewHttp :: Url -&gt; RequestBody -&gt; m (Response ByteString)&gt; }&gt; &gt; -- \u793a\u4f8b\u89e3\u91ca\u5668&gt; newHttpIO :: NewHttp IO&gt; newHttpIO = NewHttp { getNewHttp = get, postNewHttp = post }&gt; &gt; freeVL1IOInterpreter :: FreeVL1 NewHttp a -&gt; IO a&gt; freeVL1IOInterpreter program = runFreeVL1 program newHttpIO&gt; -- \u793a\u4f8b\u7ec4\u5408&gt; newGet :: Url -&gt; FreeVL1 NewHttp (Response ByteString)&gt; newGet url = FreeVL1 (\\httpEffects -&gt; getNewHttp httpEffects url)\nFreeVL1 \u7684\u597d\u5904\u5728\u4e8e\u5b83\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u8981\u89e3\u91ca\u7528 FreeVL1 NewHttp a \u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63d0\u4f9b NewHttp m \u7c7b\u578b\u7684\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002\u8fd9\u610f\u5473\u7740\u9488\u5bf9 FreeVL1 NewHttp a \u7f16\u5199\u7a0b\u5e8f\u5c06\u5177\u6709\u4e0e\u51fd\u6570\u7ec4\u5408\u6216 Reader monad \u76f8\u540c\u7684\u8fd0\u884c\u65f6\u6210\u672c\u3002\u5c06\u6b64\u4e0e Free \u7684\u5e38\u89c4\u7f16\u7801\u8fdb\u884c\u5bf9\u6bd4\uff0c\u540e\u8005\u5728\u7ed1\u5b9a\u4e0b\u6267\u884c\u5f97\u975e\u5e38\u7cdf\u7cd5\uff08\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u82b1\u54e8\u7684\u64cd\u4f5c\u94fe\u8868\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Church-encoding \u6765\u5927\u5e45\u6539\u5584\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u4e5f\u6709\u5176\u4ed6\u7684\u6743\u8861\u3002\u73b0\u5728\uff0c\u7b80\u5355\u7684 van Laarhoven \u7f16\u7801\u7684\u7f3a\u70b9\u662f\u6211\u4eec\u4e00\u6b21\u53ea\u6709\u4e00\u79cd\u6548\u679c\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u5982\u4f55\u6539\u8fdb\u5b83\uff01\u6211\u4eec\u73b0\u5728\u7684\u52a8\u673a\u662f\u521b\u5efa\u65b0\u7684\u6548\u679c\uff08\u4f8b\u5982\uff0c\u4e5f\u8bb8\u6211\u4eec\u60f3\u8981\u65e5\u5fd7\u3001\u968f\u673a\u6570\u7b49\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5 Http\uff09\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u3002\u5728\u4f20\u7edf\u7684 Free Monad \u7f16\u7801\u4e2d\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u8054\u4ea7\u54c1\uff08\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u535a\u5ba2\u6587\u7ae0\uff09\u3002\u7531\u4e8e\u6bcf\u4e2a effect \u90fd\u662f\u4e00\u4e2a Functor\uff0c\u800c Functors \u7684 Co-Products \u4ecd\u7136\u662f\u4e00\u4e2a Functor\uff0c\u8fd9\u5728\u6280\u672f\u4e0a\u662f\u53ef\u80fd\u7684\u3002\u7136\u800c\uff0c\u5b83\u4f7f\u5f97\u4ece\u5806\u6808\u4e2d\u63d0\u53d6\u6548\u679c\u4ee5\u53ca\u7f16\u5199\u548c\u7ec4\u5408\u89e3\u91ca\u5668\u53d8\u5f97\u975e\u5e38\u9ebb\u70e6\u3002\u5728 van Laarhoven \u7f16\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u6548\u679c\u5df2\u7ecf\u662f\u4e00\u4e2a\u4ea7\u54c1\u7c7b\u578b\u4e86\u3002\u6211\u4eec\u60f3\u8981\u7684\u662f\u80fd\u591f\u4e3a\u6211\u4eec\u7684\u6548\u679c\u6dfb\u52a0\u66f4\u591a\u201c\u5b57\u6bb5\u201d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u5b57\u6bb5 log :: String -&gt; m()\uff0c\u90a3\u51e0\u4e4e\u5c31\u50cf\u5728\u6211\u4eec\u7684\u6548\u679c\u5806\u6808\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8bb0\u5f55\u5668\u4e00\u6837\uff01\u6dfb\u52a0\u5b57\u6bb5\u7684\u4e00\u79cd\u7b49\u6548\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a Heterogeneous \u6548\u679c\u5217\u8868\uff01\u5982\u679c\u6211\u4eec\u4e0d\u662f\u5c06\u6211\u4eec\u7684\u6548\u679c\u4ea7\u54c1\u201c\u76f8\u4e58\u201d\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u9644\u52a0\u5230\u4e00\u4e2a\u5f02\u6784\u5217\u8868\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u79cd\u6dfb\u52a0\u66f4\u591a\u6548\u679c\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e0e\u6dfb\u52a0\u66f4\u591a\u5b57\u6bb5\u662f\u540c\u6784\u7684\u3002\u8ba9\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u8fd9\u6837\u7684 HList \u5e76\u5c55\u793a\u5b83\u5982\u4f55\u4f7f\u6211\u4eec\u80fd\u591f\u6269\u5c55\u4ee5\u524d\u7684 van Laarhoven \u7f16\u7801\uff01 &gt; -- |\u6211\u4eec\u7684 HList of effects&gt; -- \u8bf7\u6ce8\u610f\uff0c\u6839\u636e van Laarhoven \u7f16\u7801\uff0c\u6211\u4eec\u7684\u6548\u679c\u662f\u53c2\u6570\u5316\u7684&gt; -- \u7531\u4e00\u4e2a monad m.&gt; data EffectStack a (m :: * -&gt; *) where&gt; EmptyEffect :: EffectStack &#39;[] m&gt; ConsEffect :: effect m -&gt; EffectStack \u6548\u679c m -&gt; EffectStack (effect &#39;: effects) m\nEffectStack \u73b0\u5728\u5305\u542b\u4e00\u4e2a\u4efb\u610f\u7684\u6548\u679c\u5217\u8868\uff0c\u6bcf\u4e2a\u6548\u679c\u7531 m \u53c2\u6570\u5316\u3002\u6211\u4eec\u73b0\u5728\u51c6\u5907\u5b9a\u4e49\u5806\u6808\u9a71\u52a8\u7684 van Laarhoven Free Monad\uff1a &gt; -- van Laarhoven Free Monad with Effect Stacks encoding&gt; newtype FreeVL effects a =&gt; FreeVL { runFreeVL :: forall m. Monad m =&gt; EffectStack effects m -&gt; ma }&gt; &gt; -- \u662f\u7684\uff0c\u5b83\u662f\u4e00\u4e2amonad&gt; instance Functor (FreeVL effects) where&gt; fmap f (FreeVL run) = FreeVL (fmap f .run)&gt; &gt; instance Applicative (FreeVL)\u6548\u679c) where&gt; pure a = FreeVL (const (pure a))&gt; (FreeVL fab) (FreeVL a) =&gt; FreeVL $ uncurry () \u3002 (fab &amp;&amp;&amp; a)&gt; &gt; instance Monad (FreeVL effects) where&gt; (FreeVL run) &gt;&gt;= f =&gt; FreeVL $ \\effects -&gt; run effects &gt;&gt;= \\a -&gt; runFreeVL (fa) effects &gt; -- \u89e3\u91ca\u4e00\u4e2avan Laarhoven Free Monad with Effect Stacks&gt; interperet :: Monad m&gt; =&gt; EffectStack effects m&gt; -&gt; FreeVL effects a&gt; -&gt; ma&gt; interperet interpreter program = runFreeVL program interpreter \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u4ee5\u6211\u4eec\u7684\u65b0\u5e7b\u60f3\u7f16\u5199\u7a0b\u5e8f\u514d\u8d39\u7684\u5355\u5b50\u3002\u6211\u4eec\u9700\u8981\u6784\u5efa\u5177\u6709\u4efb\u610f\u6548\u679c\u5806\u6808\u7684\u7a0b\u5e8f\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u4ece EffectStack \u4e2d\u63d0\u53d6\u6548\u679c\u5e76\u4f7f\u7528\u5b83\u7684\u65b9\u6cd5\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4ece haskell-servant \u7684 Julian Arni \u90a3\u91cc\u501f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff08\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u4ed6\u7684\u4ee3\u7801\uff09\u3002\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff0c\u5b83\u80fd\u591f\u5728 EffectStack \u4e2d\u6293\u53d6 HList \u5e76\u641c\u7d22\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u7136\u540e\u8fd4\u56de\u5b83\u3002 &gt; -- \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff0c\u53ea\u6709\u5728\u6709\u67d0\u79cd\u6548\u679c\u65f6\u624d\u4f1a\u7f16\u8bd1&gt; -- \u5b58\u5728\u4e8e\u6808\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u3002&gt; class HasEffect (effects :: [((* -&gt; *) -&gt; *)]) (effect :: ((* -&gt; *) -&gt; *)) where&gt; getEffect :: EffectStack effects m -&gt; effect m&gt; &gt; -- \u8ba9\u6211\u4eec\u63d0\u4f9b\u4e00\u4e9b`HasEffect`\u7684\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u722c\u884cEffectStack\u770b&gt; -- \u5bf9\u4e8e\u5339\u914d\u7136\u540e\u8fd4\u56de\u7684\u6548\u679c\u3002&gt; &gt; -- \u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u5904\u7406\u6211\u4eec\u7684\u6548\u679c\u7c7b\u578b\u4e0e HList \u7684 &gt; -- \u5934\u90e8\u4e0d\u5339\u914d\u5e76\u8fdb\u4e00\u6b65\u9012\u5f52\u7684\u60c5\u51b5\u3002&gt; \u5b9e\u4f8b {-# OVERLAPPABLE #- }&gt; HasEffect effects effect =&gt; HasEffect (notIt &#39;: effects) effect where&gt; getEffect (ConsEffect _ effects) = getEffect effects&gt; &gt; -- \u8fd9\u4e2a\u5b9e\u4f8b\u5339\u914d\u6211\u4eec\u7684&#39;effect&#39;\u7c7b\u578b\u5339\u914dhead\u7684\u60c5\u51b5&gt; -- HList\u7684.\u7136\u540e\u6211\u4eec\u8fd4\u56de\u90a3\u4e2a\u6548\u679c\u3002&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect (effect &#39;: effects) effect where&gt; getEffect (ConsEffect effect _) = effect \u90a3\u4e9b\u7c7b\u578b\u7c7b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u6709\u70b9\u60f3\u6b6a\u4e86\uff08\u4ed6\u4eec\u80af\u5b9a\u4f1a\u6b6a\u66f2\u6211\u7684\uff09 \uff0c\u4f46\u5982\u679c\u4f60\u81ea\u5df1\u5199\uff08\u6211\u9f13\u52b1\u4f60\u8fd9\u6837\u505a\uff09\uff0c\u4f60\u5c31\u4f1a\u638c\u63e1\u5b83\u7684\u7a8d\u95e8\u3002 \uff08PS - \u6211\u6c38\u8fdc\u611f\u8c22\u6731\u5229\u5b89\u7684\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u592a\u65b9\u4fbf\u4e86\uff01\uff09\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u9009\u62e9\u6548\u679c\u7684\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u7ec4\u5408\u5668\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u4efb\u610f\u6548\u679c\u5806\u6808\u7f16\u5199\u7a0b\u5e8f\u3002 &gt; -- \u5c06\u64cd\u4f5c\u63d0\u5347\u5230 van Laarhoven Free Monad&gt;liftVL :: HasEffect \u6548\u679c\u6548\u679c&gt; -- ^ \u7ea6\u675f\u5f3a\u5236\u6211\u4eec\u7684\u6548\u679c\u5728\u6548\u679c\u5806\u6808\u4e2d&gt; =&gt; (forall m. effect m -&gt; ma)&gt; -- ^ \u65b9\u6cd5\u4ece\u6211\u4eec\u7684\u6548\u679c\u4e2d\u63d0\u53d6\u6211\u4eec\u7684\u64cd\u4f5c\u3002&gt; -&gt; FreeVL effects a&gt;liftVL getOp = FreeVL (\\effects -&gt; getOp (getEffect effects)) \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u7528\u6237\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u4ece\u5b9a\u4e49\u4e09\u4e2a\u6548\u679c\u5f00\u59cb\uff1a &gt; -- HTTP Effect&gt; data Http m =&gt; Http { getHttpEff :: Url -&gt; m (Either Int (Response ByteString))&gt; , postHttpEff :: Url -&gt; RequestBody -&gt; m (\u8981\u4e48 Int (Response ByteString))&gt; }&gt; &gt; -- Logging Effect&gt; data Logging m = Logging { logEff :: String -&gt; m () }&gt; &gt; -- \u968f\u673a\u6570\u6548\u5e94&gt; data Random m = Random { getRandEff :: m Int }&gt; &gt; -- suspend effect&gt; data Suspend m = Suspend { suspendEff :: Int -&gt; m () } \u73b0\u5728\u6765\u770b\u4e00\u4e9b\u4ee3\u7801\u3002\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u6548\u679c\u4e2d\u7684\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u7f16\u5199\u7ec4\u5408\u5b50\u3002 &gt; getHttp :: HasEffect \u6548\u679c Http&gt; =&gt; Url&gt; -&gt; FreeVL \u6548\u679c (Either Int (Response ByteString))&gt; getHttp url =liftVL (`getHttpEff` url)&gt; &gt; postHttp :: HasEffect \u6548\u679c Http&gt; =&gt; Url&gt; -&gt; RequestBody&gt; -&gt; FreeVL \u6548\u679c\uff08Either Int (Response ByteString))&gt; postHttp url body = liftVL (\\http -&gt; postHttpEff http url body)&gt; &gt; logMsg :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; FreeVL effects ()&gt; logMsg msg = LiftVL (`logEff` msg)&gt; &gt; getRand :: HasEffect \u6548\u679c\u968f\u673a&gt; =&gt; FreeVL \u6548\u679c Int&gt; getRand = LiftVL getRandEff&gt; &gt; \u6682\u505c :: HasEffect \u6548\u679c Suspend&gt; =&gt; Int&gt; -&gt; FreeVL \u6548\u679c ()&gt; \u6682\u505ci = liftVL (`suspendEff` i) \u6709\u4e86\u8fd9\u4e9b\u7ec4\u5408\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u7a0b\u5e8f\u4e86\uff01\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u53d1\u51fa\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u6682\u505c 100 \u6beb\u79d2\u5e76\u91cd\u8bd5\u3002\u5b83\u5c06\u91cd\u8bd5\u968f\u673a\u6b21\u6570\u3002\n&gt; repeatReq :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; )&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; repeatReq url = do&gt; numRetries &lt;- (flip mod 10) ) getRand&gt; eResponse &lt;- getHttp url&gt; go numRetries eResponse&gt; where&gt; go 0 r = return r&gt; go i _ = do&gt; eResponse &lt;- getHttp url&gt; case eResponse of&gt; r@(Right _) -&gt; return r&gt; l @(Left _) -&gt; suspend 100 &gt;&gt; go (i-1) eResponse &gt; withLog :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; String&gt; -&gt; FreeVL effects a&gt; -&gt; FreeVL effects a&gt; withLog preMsg postMsg program = do&gt; logMsg preMsg&gt; a &lt;- program&gt; logMsg postMsg&gt; return a \u6700\u540e\uff0c\u8ba9\u6211\u5411\u60a8\u5c55\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u6211\u4eec\u4e4b\u524d\u7684 repeatReq \u4ee3\u7801\u4e0e\u65e5\u5fd7\u8bb0\u5f55\u548c\u63d0\u4f9b url \u4e00\u8d77\u5305\u88c5\u6765\u7ec4\u5408\u4efb\u610f\u7a0b\u5e8f\u548c\u6548\u679c\u5806\u6808\u3002 &gt; -- \u8ba9\u6211\u4eec\u7ed3\u5408\u4e00\u4e9b\u7a0b\u5e8f&gt; program :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; , HasEffect effects Logging&gt; )&gt; =&gt; FreeVL effects (Either Int (Response ByteString))&gt; program = withLog &quot;\u8fd0\u884c\u8bf7\u6c42\uff01\u201d \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u5220\u9664\u8fd9\u4e9b\u7ea6\u675f\u4e4b\u4e00\uff08\u4f8b\u5982 Suspend\uff09\uff0c\u60a8\u5c06\u6536\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a01.lhs:313:49:Could not deduce (HasEffect effects Suspend ) \u4ece\u4e0a\u4e0b\u6587\uff08HasEffect \u6548\u679c Http\u3001HasEffect \u6548\u679c\u968f\u673a\u3001HasEffect \u6548\u679c\u8bb0\u5f55\uff09\u4e2d\u4f7f\u7528 &#39;repeatReq&#39; \u4ea7\u751f\uff0c\u7531\u7a0b\u5e8f\u7684\u7c7b\u578b\u7b7e\u540d\u7ea6\u675f ::\uff08HasEffect \u6548\u679c Http\u3001HasEffect \u6548\u679c\u968f\u673a\u3001HasEffect \u6548\u679c\u8bb0\u5f55\uff09=&gt; FreeVL effects (Maybe (Response ByteString)) at 01.lhs:(308,14)-(312,57) \u5728 &#39;withLog&#39; \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373 &#39;(repeatReq &quot;http://aaronlevin.ca&quot;)&#39; \u4e2d\u8868\u8fbe\uff1a withLog &quot;\u6b63\u5728\u8fd0\u884c\u7684\u8bf7\u6c42\uff01&quot; \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u5728 &#39;program&#39; \u7684\u7b49\u5f0f\u4e2d\uff1a program = withLog &quot;running request!&quot; \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e9b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u89e3\u91ca\u5668\u3002\u6211\u4eec\u5c06\u63d0\u4f9b IO \u4e2d\u7684\u4e3b\u8981\u89e3\u91ca\u5668\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7ec3\u4e60\u7559\u7ed9\u8bfb\u8005\u6765\u521b\u5efa\u4e00\u4e2a\u7eaf\u7cb9\u7684\u89e3\u91ca\u5668\u3002\n\u56de\u60f3\u4e00\u4e0b van Laarhoven Free Monad \u4e2d\u7684\u89e3\u91ca\u5668\u53ea\u662f\u4e00\u4e2a effect m \u7c7b\u578b\u7684\u503c\u3002\u540c\u6837\uff0c\u5728\u6548\u679c\u5806\u6808\u7248\u672c\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a EffectStack \u6548\u679c m \u7c7b\u578b\u7684\u503c\uff0c\u5b83\u53ea\u662f\u6211\u4eec\u6548\u679c\u7684 HList\u3002 &gt; -- \u4e00\u4e2a\u4f7f\u521b\u5efa HList \u5728\u8bed\u6cd5\u4e0a\u66f4\u597d\u7684\u7ec4\u5408\u5668\u3002&gt; (.:.) :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m&gt; effect .:. effects = ConsEffect effect effects&gt; infixr 4 .:.&gt; &gt; -- \u89e3\u91caIO\u4e2d\u7684http\u52a8\u4f5c&gt; handleExcep :: HttpException -&gt; Each Int a&gt; handleExcep (StatusCodeException status _ _) = Left (S.statusCode status)&gt; handleExcep _ =\u9519\u8bef\u201c\u672a\u5904\u7406\u7684 HttpException\u201d&gt; &gt; httpIO :: Http IO&gt; httpIO =&gt; Http { getHttpEff = \\req -&gt; (Right get req) `catch` (return .handleExcep)&gt; , postHttpEff = \\req body -&gt; (Right post req body) `catch` (return .handleExcep)&gt; }&gt; &gt; -- \u89e3\u91ca IO \u4e2d\u7684\u65e5\u5fd7\u64cd\u4f5c&gt; logIO :: Logging IO&gt; logIO = Logging { logEff = putStrLn }&gt; &gt; -- IO \u4e2d\u7684\u968f\u673a\u6570\u751f\u6210\u5668&gt; randIO :: Random IO&gt; randIO = Random { getRandEff = randomIO }&gt; &gt; -- \u5728IO\u4e2d\u6682\u505c&gt; suspendIO :: Suspend IO&gt; suspendIO = Suspend { suspendEff = threadDelay }&gt; &gt; -- \u6211\u4eec\u7684\u6548\u679c\u6808&gt; type MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: Suspend &#39;: &#39;[] )&gt; &gt; -- \u6211\u4eec\u7684\u89e3\u91ca\u5668&gt; ioInterpreter :: EffectStack MyEffects IO&gt; ioInterpreter = httpIO .:.\u65e5\u5fd7IO .:.\u968f\u673a\u6570 .:.\u6682\u505cIO .:. EmptyEffect \u5e0c\u671b\u73b0\u5728\u60a8\u5df2\u7ecf\u786e\u4fe1\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u76ee\u6807\uff1a\u6211\u4eec\u53ef\u4ee5\u5728 Haskell \u4e2d\u9488\u5bf9\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u5c31\u50cf\u6211\u4eec\u4f7f\u7528 Idris \u548c PureScript \u7f16\u7a0b\u7684\u540c\u5fd7\u4e00\u6837\uff08\u6211\u8bf4\u8fd9\u5b8c\u5168\u662f\u534a\u5f00\u73a9\u7b11\uff09\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u6548\u679c\u5806\u6808\u5e76\u4ee5\u6211\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u65b9\u5f0f\u7ec4\u5408\u89e3\u91ca\u5668\uff08\u53ea\u8981\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684 monad\uff09\u3002\u8c03\u67e5\u7a0b\u5e8f\u5206\u6790\u3002 van Laarhoven Free Monad \u53ea\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4e3a\u5b83\u63d0\u4f9b\u4e00\u4e2a\u4e3a\u7a0b\u5e8f\u6216\u9759\u6001\u5206\u6790\u6784\u5efa\u7684\u6548\u679c\u5806\u6808\u5417\uff1f", "note_en": "Algebraic effects seem to be a sort of holy grail in functional programming. What I mean when I say \u201calgebraic effect\u201d here is: treating any effect like a value or type in your program, while also having some simple operations (an algebra) to combine effects.\n What does this look like practically? The two languages that come to mind are  Idris and  PureScript. When you program using their Effects support, you write monadic code, but essentially have a list of effects you can pull from the environment: logging, state, IO, etc. Further, you can program against a stack of effects, only assuming the ones you need are present, allowing us to arbitrarily grow that effect stack as needed. It\u2019s very nice.\n Unfortunately we don\u2019t have access to these tools in Haskell. Instead, haskellers usually rely on  mtl or  Free Monads.\n What I want to present today is an Effects library close to that of Idris and PureScript using the  van Laarhoven encoded Free Monad armed with a Heterogeneous List (HList) of effects. I claim this has some of the benefits of Effect tooling in Idris and PureScript, the same expressiveness of regular Free Monads, a more performant encoding than Church, Fused, or Oleg encodings, and only costs us a few extensions. All in about  60 lines of code.\n   -- | we use the explicit `liftVL` combinator for illustrative purposes.-- in real code you&#39;d have your own combinators.-- Make a post requestpostReq :: HasEffect effects Http =&gt; Url -&gt; RequestBody -&gt; FreeVL effects StatusCodepostReq url body = do resp &lt;- liftVL (\\http -&gt; put http url body) return (statusCode resp)-- take any arbitrary free monad and wrap it with loggingwithLog :: HasEffect effects Logging =&gt; String -&gt; String -&gt; FreeVL effects a -&gt; FreeVL effects awithLog preMsg postMsg program = do liftVL (\\log -&gt; infoLogger log preMsg) a &lt;- program liftVL (\\log -&gt; infoLogger log postMsg) return a-- a concrete list of effects used to define an interpretertype MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: State &#39;: &#39;[] )-- an interpreter as a valueioInterpreter :: Effects MyEffects IOioInterpreter = httpIO .: loggerIO .: randomIO .: stateIO .: EmptyEffect-- actually running our programmain :: IO ()main = interpret ioInterpreter (withLog &#34;POST!&#34; &#34;phew! made it!&#34; (postReq &#34;https://weirdcanada.com&#34; &#34;rare=cool&#34;) )\n The only part that\u2019s missing from the above is what our effects ( Http,  Logger, etc.) look like. Here is an example:\n -- the HTTP effectdata Http m = Http { get :: Url -&gt; m Response , put :: Url -&gt; RequestBody -&gt; m Response -- etc. }-- the Logging effectdata Logging m = Logging { infoLogger :: String -&gt; m (), debugLogger :: String -&gt; m ()-- etc.}\n The rest of this post is written in literate haskell. I encourage you to cut-and-paste this code and play with it yourself! To start, let\u2019s get some extensions and imports out of the way!\n &gt; {-# LANGUAGE DataKinds #-}&gt; {-# LANGUAGE FlexibleContexts #-}&gt; {-# LANGUAGE FlexibleInstances #-}&gt; {-# LANGUAGE GADTs #-}&gt; {-# LANGUAGE KindSignatures #-}&gt; {-# LANGUAGE MultiParamTypeClasses #-}&gt; {-# LANGUAGE PolyKinds #-}&gt; {-# LANGUAGE RankNTypes #-}&gt; {-# LANGUAGE TypeOperators #-}&gt; &gt; module Main where&gt; &gt; import Control.Arrow ((&amp;&amp;&amp;))&gt; import Control.Concurrent (threadDelay)&gt; import Control.Exception (catch)&gt; import Control.Lens ((^.))&gt; import Data.ByteString.Lazy (ByteString)&gt; import Network.Wreq (get, post, Response, responseStatus, statusCode)&gt; import Network.HTTP.Client (HttpException(StatusCodeException))&gt; import qualified Network.HTTP.Types.Status as S&gt; import System.Random (randomIO)\n  I refer you to Russell O&#39;Connor\u2019s great  blog post on the van Laarhoven Free Monad. It\u2019s a short and succinct read. In some sense, the van Laarhoven Free Monad is dual to the usual one; instead of using a  sum type to model operations we use a  product.\n  &gt; -- type aliases to make this look like real code.&gt; type Url = String&gt; type RequestBody = ByteString&gt; &gt; -- old-fashioned free monad encoding&gt; data Free effect a = Pure a&gt; | Free (effect (Free effect a))&gt; &gt; -- example http effect: using Strings to represent urls and responses for brevity&gt; data YeOldeHttp a = Get Url (Response ByteString -&gt; a)&gt; | Post Url RequestBody (Response ByteString -&gt; a)&gt; &gt; -- example interpreter&gt; freeIOInterp :: Free YeOldeHttp a -&gt; IO a&gt; freeIOInterp (Pure a) = return a&gt; freeIOInterp (Free (Get url next)) = get url &gt;&gt;= freeIOInterp . next&gt; freeIOInterp (Free (Post url body next)) = post url body &gt;&gt;= freeIOInterp . next&gt; &gt; -- example combinator&gt; oldGet :: Url -&gt; Free YeOldeHttp (Response ByteString)&gt; oldGet url = Free (Get url Pure)\n Given an effect, which is itself a sum-type (each branch a different operation (e.g.  Get,  Put)) we can show that  Free YeOldHttp a is a monad (see  Gabriel\u2019s blog post for more) and write interpreters against it, supplying it with the right semantics. The great part about Free Monads is that we can write different interpreters, each for their own specific use (testing, production, debugging, etc.).\n Now, the van Laarhoven Free Monad is a different encoding, and requires you to represent effects as  products instead of  sums. The above example is equivalent to:\n &gt; -- (simple) van Laarhoven Free Monad encoding&gt; newtype FreeVL1 effect a =&gt; FreeVL1 { runFreeVL1 :: forall m. Monad m =&gt; effect m -&gt; m a }&gt; &gt; -- example Http effect&gt; data NewHttp m =&gt; NewHttp { getNewHttp :: Url -&gt; m (Response ByteString)&gt; , postNewHttp :: Url -&gt; RequestBody -&gt; m (Response ByteString)&gt; }&gt; &gt; -- example interpreter&gt; newHttpIO :: NewHttp IO&gt; newHttpIO = NewHttp { getNewHttp = get, postNewHttp = post }&gt; &gt; freeVL1IOInterpreter :: FreeVL1 NewHttp a -&gt; IO a&gt; freeVL1IOInterpreter program = runFreeVL1 program newHttpIO&gt; &gt; -- example combinator&gt; newGet :: Url -&gt; FreeVL1 NewHttp (Response ByteString)&gt; newGet url = FreeVL1 (\\httpEffects -&gt; getNewHttp httpEffects url)\n The nice thing about  FreeVL1 is it\u2019s just a function. To  interpret a program written in  FreeVL1 NewHttp a requires us only to provide a value of type  NewHttp m as demonstrated above. This means that writing programs against  FreeVL1 NewHttp a will have the same runtime cost as function composition or the Reader monad. Contrast this to the regular encoding of  Free which performs horrendously under binds (it\u2019s basically a fancy linked list of operations). We can use the  Church-encoding to improve this substantially, but it has other trade offs as well.\n Now, the downside of the simple van Laarhoven encoding is that we only have one effect at a time. Let\u2019s see how we can improve that!\n  Our motivation now is to create new effects (for example, instead of just  Http perhaps we want logging, random numbers, etc.) and combine them. One way of doing this in the traditional Free Monad encoding is to use co-products (see blog post  here). Since each effect is a Functor, and Co-Products of Functors is still a Functor, this is technically possible. However, it makes pulling effects out of the stack and writing and combining interpreters finnicky.\n In the van Laarhoven encoding, our effect is already a product type. What we want is to be able to add more \u201cfields\u201d to our effect. For example, if we could add the field  log :: String -&gt; m (), that would be almost like adding a logger to our effect stack!\n An equivalent way of adding fields would be to create a Heterogeneous list of effects! If instead of \u201cmultiplying\u201d our effect products we appended them to a heterogeneous list, then we\u2019ve got a way to add more effects that is isomorphic to adding more fields.\n Let us design such an  HList and show how this empowers us to extend the previous van Laarhoven encoding!\n &gt; -- | our HList of effects&gt; -- note that as per the van Laarhoven encoding, our effects are parameterized&gt; -- by a monad m.&gt; data EffectStack a (m :: * -&gt; *) where&gt; EmptyEffect :: EffectStack &#39;[] m&gt; ConsEffect :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m\n EffectStack now contains an arbitrary list of effects, each one paramaterized by  m. We are now ready to define the stack-driven van Laarhoven Free Monad:\n &gt; -- van Laarhoven Free Monad with Effect Stacks encoding&gt; newtype FreeVL effects a =&gt; FreeVL { runFreeVL :: forall m. Monad m =&gt; EffectStack effects m -&gt; m a }&gt; &gt; -- Yes, it is a monad&gt; instance Functor (FreeVL effects) where&gt; fmap f (FreeVL run) = FreeVL (fmap f . run)&gt; &gt; instance Applicative (FreeVL effects) where&gt; pure a = FreeVL (const (pure a))&gt; (FreeVL fab) (FreeVL a) =&gt; FreeVL $ uncurry () . (fab &amp;&amp;&amp; a)&gt; &gt; instance Monad (FreeVL effects) where&gt; (FreeVL run) &gt;&gt;= f =&gt; FreeVL $ \\effects -&gt; run effects &gt;&gt;= \\a -&gt; runFreeVL (f a) effects\n  &gt; -- interpret a van Laarhoven Free Monad with Effect Stacks&gt; interperet :: Monad m&gt; =&gt; EffectStack effects m&gt; -&gt; FreeVL effects a&gt; -&gt; m a&gt; interperet interpreter program = runFreeVL program interpreter\n Unfortunately we are not quite ready to write programs in our new fancy Free Monad. We need to construct programs with arbitrary effect stacks, and for that, we need a way to pull an effect from  EffectStack and use it.\n To achieve this I borrowed a trick from Julian Arni of  haskell-servant (you can see his code  here). Essentially, we create a typeclass capable of crawling the HList in  EffectStack and search for the effect we want, and then return it.\n &gt; -- define a type class that will only compile if a certain effect is&gt; -- present in the stack, and if it is present, return it.&gt; class HasEffect (effects :: [((* -&gt; *) -&gt; *)]) (effect :: ((* -&gt; *) -&gt; *)) where&gt; getEffect :: EffectStack effects m -&gt; effect m&gt; &gt; -- Let&#39;s provide some instances of `HasEffect` that can crawl EffectStack looking&gt; -- for an effect that matches and then return it.&gt; &gt; -- this first instances handles the case where our effect type doesn&#39;t match the &gt; -- head of the HList and recurses further.&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect effects effect =&gt; HasEffect (notIt &#39;: effects) effect where&gt; getEffect (ConsEffect _ effects) = getEffect effects&gt; &gt; -- this instance matches the case where our &#39;effect&#39; type matches the head&gt; -- of the HList. we then return that effect.&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect (effect &#39;: effects) effect where&gt; getEffect (ConsEffect effect _) = effect\n Those typeclasses will likely bend your mind a little (they most certainly bent mine), but if you write it our yourself (which I encourage you to do) you kind of get the hang of it. (PS - I\u2019m forever grateful to Julian for this idea because it\u2019s so handy!)\n Now that we have tooling to pick our effects, we can start writing combinators that will allow us to write programs against an arbitrary effect stack.\n &gt; -- lift operations into the van Laarhoven Free Monad&gt; liftVL :: HasEffect effects effect&gt; -- ^ constraint enforcing that our effect is in the effect stack&gt; =&gt; (forall m. effect m -&gt; m a)&gt; -- ^ method to pull our operation from our effect.&gt; -&gt; FreeVL effects a&gt; liftVL getOp = FreeVL (\\effects -&gt; getOp (getEffect effects))\n  Let\u2019s write some user code. We\u2019ll start by defining three effects:\n &gt; -- HTTP Effect&gt; data Http m =&gt; Http { getHttpEff :: Url -&gt; m (Either Int (Response ByteString))&gt; , postHttpEff :: Url -&gt; RequestBody -&gt; m (Either Int (Response ByteString))&gt; }&gt; &gt; -- Logging Effect&gt; data Logging m = Logging { logEff :: String -&gt; m () }&gt; &gt; -- random number effect&gt; data Random m = Random { getRandEff :: m Int }&gt; &gt; -- suspend effect&gt; data Suspend m = Suspend { suspendEff :: Int -&gt; m () }\n Now for some code. Let\u2019s write combinators for each operator in each effect.\n &gt; getHttp :: HasEffect effects Http&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; getHttp url = liftVL (`getHttpEff` url)&gt; &gt; postHttp :: HasEffect effects Http&gt; =&gt; Url&gt; -&gt; RequestBody&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; postHttp url body = liftVL (\\http -&gt; postHttpEff http url body)&gt; &gt; logMsg :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; FreeVL effects ()&gt; logMsg msg = liftVL (`logEff` msg)&gt; &gt; getRand :: HasEffect effects Random&gt; =&gt; FreeVL effects Int&gt; getRand = liftVL getRandEff&gt; &gt; suspend :: HasEffect effects Suspend&gt; =&gt; Int&gt; -&gt; FreeVL effects ()&gt; suspend i = liftVL (`suspendEff` i)\n With these combinators we can write programs! Let\u2019s write a program that makes a web-request and if it fails, suspends for 100ms and retries. It will retry a random number of times.\n &gt; repeatReq :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; )&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; repeatReq url = do&gt; numRetries &lt;- (flip mod 10) getRand&gt; eResponse &lt;- getHttp url&gt; go numRetries eResponse&gt; where&gt; go 0 r = return r&gt; go i _ = do&gt; eResponse &lt;- getHttp url&gt; case eResponse of&gt; r@(Right _) -&gt; return r&gt; l@(Left _) -&gt; suspend 100 &gt;&gt; go (i-1) eResponse\n  &gt; withLog :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; String&gt; -&gt; FreeVL effects a&gt; -&gt; FreeVL effects a&gt; withLog preMsg postMsg program = do&gt; logMsg preMsg&gt; a &lt;- program&gt; logMsg postMsg&gt; return a\n And finally, let me show you that we can combine arbitrary programs and effect stacks by wrapping our previous  repeatReq code with logging and supplying a url.\n &gt; -- let&#39;s combine some programs&gt; program :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; , HasEffect effects Logging&gt; )&gt; =&gt; FreeVL effects (Either Int (Response ByteString))&gt; program = withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;)\n Note that if you remove one of those constraints (like  Suspend for example), you will get a compile error:\n 01.lhs:313:49: Could not deduce (HasEffect effects Suspend) arising from a use of \u2018repeatReq\u2019 from the context (HasEffect effects Http, HasEffect effects Random, HasEffect effects Logging) bound by the type signature for program :: (HasEffect effects Http, HasEffect effects Random, HasEffect effects Logging) =&gt; FreeVL effects (Maybe (Response ByteString)) at 01.lhs:(308,14)-(312,57) In the third argument of \u2018withLog\u2019, namely \u2018(repeatReq &#34;http://aaronlevin.ca&#34;)\u2019 In the expression: withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;) In an equation for \u2018program\u2019: program = withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;)\n  Now that we\u2019ve written some programs, we need to supply some interpreters. We\u2019ll supply the main interpreter in  IO and leave it as an exercise to the reader to create a pure one.\n Recall that an interpreter in the van Laarhoven Free Monad is just a value of type  effect m. Similarly, in the effect stack version, it\u2019s a value of type  EffectStack effects m, which is just an HList of our effects.\n &gt; -- a combinator to make creating HLists syntactically nicer.&gt; (.:.) :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m&gt; effect .:. effects = ConsEffect effect effects&gt; infixr 4 .:.&gt; &gt; -- interpret http actions in IO&gt; handleExcep :: HttpException -&gt; Either Int a&gt; handleExcep (StatusCodeException status _ _) = Left (S.statusCode status)&gt; handleExcep _ = error &#34;unhandled HttpException&#34;&gt; &gt; httpIO :: Http IO&gt; httpIO =&gt; Http { getHttpEff = \\req -&gt; (Right get req) `catch` (return . handleExcep)&gt; , postHttpEff = \\req body -&gt; (Right post req body) `catch` (return . handleExcep)&gt; }&gt; &gt; -- interpret logging actions in IO&gt; logIO :: Logging IO&gt; logIO = Logging { logEff = putStrLn }&gt; &gt; -- random number generator in IO&gt; randIO :: Random IO&gt; randIO = Random { getRandEff = randomIO }&gt; &gt; -- suspend in IO&gt; suspendIO :: Suspend IO&gt; suspendIO = Suspend { suspendEff = threadDelay }&gt; &gt; -- our effect stack&gt; type MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: Suspend &#39;: &#39;[] )&gt; &gt; -- our interpreter&gt; ioInterpreter :: EffectStack MyEffects IO&gt; ioInterpreter = httpIO .:. logIO .:. randIO .:. suspendIO .:. EmptyEffect\n    Hopefully by now you\u2019ve been convinced that we\u2019ve achieved our goal: we can program against effects in Haskell just like our comrades programming with Idris and PureScript (I say this fully tongue-in-cheek). Further, we can provide arbitrary effect stacks and combine interpreters in whatever way we want (so long as they share the same monad).\n  investigate program analysis. The van Laarhoven Free Monad is just a function, but can we supply it with an effect stack built for program or static analysis?", "posttime": "2021-07-29 21:55:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "laarhoven,effects,gt", "title": "van Laarhoven Free Monad \u4e2d\u7684\u53ef\u6269\u5c55\u6548\u679c", "title_en": "Extensible Effects in the van Laarhoven Free Monad", "transed": 1, "url": "https://aaronlevin.ca/post/136494428283/extensible-effect-stacks-in-the-van-laarhoven-free", "via": "", "real_tags": ["laarhoven", "effects", "gt"]}, {"category": "", "categoryclass": "", "imagename": "ab4cb7fa127ab4b997d47c990d69c036.jpg", "infoid": 1070257, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u6280\u5de8\u5934\u5468\u4e09\u8868\u793a\uff0c\u8c37\u6b4c\u548c Facebook \u5c06\u8981\u6c42\u7f8e\u56fd\u5458\u5de5\u5728\u8fd4\u56de\u516c\u53f8\u529e\u516c\u5ba4\u4e4b\u524d\u63a5\u79cd\u51a0\u72b6\u75c5\u6bd2\u75ab\u82d7\u3002\u5728\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u8c37\u6b4c\u9996\u5e2d\u6267\u884c\u5b98\u6851\u8fbe\u5c14\u76ae\u67e5\u4f0a\u8868\u793a\uff0c\u75ab\u82d7\u6388\u6743\u5c06\u5728\u672a\u6765\u51e0\u5468\u5185\u9002\u7528\u4e8e\u5176\u7f8e\u56fd\u529e\u4e8b\u5904\uff0c\u6700\u7ec8\u5c06\u9002\u7528\u4e8e\u5176\u4ed6\u5730\u70b9\u3002 \u201c\u63a5\u79cd\u75ab\u82d7\u662f\u5728\u672a\u6765\u51e0\u4e2a\u6708\u4fdd\u6301\u6211\u4eec\u81ea\u5df1\u548c\u6211\u4eec\u7684\u793e\u533a\u5065\u5eb7\u7684\u6700\u91cd\u8981\u65b9\u6cd5\u4e4b\u4e00\uff0c\u201d\u76ae\u67e5\u4f0a\u5199\u9053\u3002\u5728\u8c37\u6b4c\u5ba3\u5e03\u8fd9\u4e00\u6d88\u606f\u540e\u4e0d\u4e45\uff0cFacebook \u8868\u793a\uff0c\u5b83\u4e5f\u5c06\u8981\u6c42\u4efb\u4f55\u6765\u5176\u7f8e\u56fd\u529e\u4e8b\u5904\u5de5\u4f5c\u7684\u4eba\u63a5\u79cd\u75ab\u82d7\u3002 \u201c\u6211\u4eec\u5982\u4f55\u5b9e\u65bd\u8fd9\u9879\u653f\u7b56\u5c06\u53d6\u51b3\u4e8e\u5f53\u5730\u7684\u6761\u4ef6\u548c\u6cd5\u89c4\u3002\u6211\u4eec\u5c06\u4e3a\u90a3\u4e9b\u56e0\u533b\u7597\u6216\u5176\u4ed6\u539f\u56e0\u65e0\u6cd5\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u5236\u5b9a\u4e00\u4e2a\u6d41\u7a0b\uff0c\u5e76\u5c06\u968f\u7740\u60c5\u51b5\u7684\u53d1\u5c55\u8bc4\u4f30\u6211\u4eec\u5728\u5176\u4ed6\u5730\u533a\u7684\u65b9\u6cd5\uff0c\u201dFacebook \u526f\u603b\u88c1 Lori Goler\u4eba\u6c11\u603b\u7edf\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u5199\u9053\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5305\u62ec\u82f9\u679c\u548c\u4e9a\u9a6c\u900a\u5728\u5185\u7684\u5176\u4ed6\u4e3b\u8981\u79d1\u6280\u516c\u53f8\u90fd\u62d2\u7edd\u5f3a\u5236\u63a5\u79cd\u75ab\u82d7\u3002\u5fae\u8f6f\u5728\u7ed9\u5458\u5de5\u7684\u4e00\u4efd\u8bf4\u660e\u4e2d\u8868\u793a\uff0c\u8fdb\u5165\u5de5\u4f5c\u573a\u6240\u4e0d\u9700\u8981\u63a5\u79cd\u75ab\u82d7\uff0c\u4f46\u516c\u53f8\u9ad8\u7ea7\u5b98\u5458\u5efa\u8bae\u5458\u5de5\u63a5\u79cd\u75ab\u82d7\u3002\u76ae\u67e5\u4f0a\u8fd8\u8868\u793a\uff0c\u968f\u7740\u65b0\u578b\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\uff0c\u8c37\u6b4c\u5c06\u628a\u5176 144,000 \u540d\u5458\u5de5\u4e2d\u7684\u5927\u591a\u6570\u4eba\u7684\u590d\u5de5\u65e5\u671f\u4ece 9 \u6708\u63a8\u8fdf\u5230 10 \u6708\u4e2d\u65ec\u3002\u5176\u4ed6\u79d1\u6280\u516c\u53f8\u4e5f\u5ba3\u5e03\u4e86\u7c7b\u4f3c\u7684\u5ef6\u8fdf\u3002\n\u5728\u5468\u4e09\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u8c37\u6b4c\u7684\u76ae\u67e5\u4f0a\u8868\u793a\uff0c\u8c37\u6b4c\u5458\u5de5\u7684\u75ab\u82d7\u63a5\u79cd\u7387\u201c\u975e\u5e38\u9ad8\u201d\uff0c\u4ed6\u53d7\u5230\u4e86\u9f13\u821e\u3002\u4ed6\u5199\u9053\uff1a\u201c\u8fd9\u662f\u6211\u4eec\u5bf9\u5e0c\u671b\u65e9\u65e5\u8fd4\u56de\u7684\u5458\u5de5\u5f00\u653e\u4e00\u4e9b\u529e\u516c\u5ba4\u611f\u5230\u5f88\u81ea\u5728\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u56e0\u3002\u201d\u968f\u7740\u53bb\u5e74\u5927\u6d41\u884c\u7684\u8513\u5ef6\uff0c\u79d1\u6280\u884c\u4e1a\u662f\u6700\u65e9\u5c06\u5458\u5de5\u9001\u56de\u5bb6\u5de5\u4f5c\u7684\u884c\u4e1a\u4e4b\u4e00\u3002\u73b0\u5728\uff0c\u5b83\u6b63\u5728\u52aa\u529b\u89e3\u51b3\u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u5c06\u4ed6\u4eec\u5e26\u56de\u529e\u516c\u5ba4\uff0c\u4ee5\u53ca\u5e94\u8be5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u8ba9\u5176\u5e9e\u5927\u7684\u5458\u5de5\u7ee7\u7eed\u8fdc\u7a0b\u5de5\u4f5c\u7684\u95ee\u9898\u3002\u8bb8\u591a\u516c\u53f8\u5f00\u53d1\u4e86\u6df7\u5408\u6a21\u5f0f\uff0c\u81f3\u5c11\u4e3a\u5458\u5de5\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7075\u6d3b\u6027\u3002\u82f9\u679c\u516c\u53f8\u8fd8\u5c06\u5176\u91cd\u8fd4\u529e\u516c\u5ba4\u7684\u65e5\u671f\u63a8\u8fdf\u5230 10 \u6708\uff0c\u4f46\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u81f4\u529b\u4e8e\u8ba9\u5927\u591a\u6570\u5458\u5de5\u6bcf\u5468\u81f3\u5c11\u5728\u73b0\u573a\u5de5\u4f5c\u4e09\u5929\u3002\u5fae\u8f6f\u7684\u76ee\u6807\u662f\u5728 9 \u6708\u91cd\u65b0\u5f00\u653e\u5176\u529e\u516c\u5ba4\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5927\u6d41\u884c\u4f7f\u5176\u6269\u5927\u4e86\u4e3a\u5de5\u4eba\u63d0\u4f9b\u7684\u6df7\u5408\u5de5\u4f5c\u673a\u4f1a\u3002 Facebook \u6709\u671b\u5728 10 \u6708\u91cd\u65b0\u5f00\u653e\u5176\u529e\u516c\u5ba4\uff0c\u4f46\u5c06\u5141\u8bb8\u5458\u5de5\u5728\u83b7\u5f97\u8bb8\u53ef\u7684\u60c5\u51b5\u4e0b\u7ee7\u7eed\u8fdc\u7a0b\u5de5\u4f5c\u3002 Facebook \u9996\u5e2d\u6267\u884c\u5b98\u9a6c\u514b\u624e\u514b\u4f2f\u683c\u66fe\u8868\u793a\uff0c\u4ed6\u9884\u8ba1\u8fd9\u5bb6\u79d1\u6280\u5de8\u5934\u7684 48,000 \u540d\u5458\u5de5\u4e2d\u6709\u4e00\u534a\u5c06\u5728\u672a\u6765\u51e0\u5e74\u8fdb\u884c\u8fdc\u7a0b\u5de5\u4f5c\u3002\u5bf9\u4e8e\u4e9a\u9a6c\u900a\u5458\u5de5\u6765\u8bf4\uff0c\u4eca\u5e74\u79cb\u5929\u4e5f\u5c06\u91cd\u8fd4\u529e\u516c\u5ba4\u3002\u4e9a\u9a6c\u900a\u66fe\u8868\u793a\u5c06\u5141\u8bb8\u5458\u5de5\u6bcf\u5468\u5728\u5bb6\u5de5\u4f5c\u4e24\u5929\u3002\u516c\u53f8\u53d1\u8a00\u4eba\u62d2\u7edd\u5c31\u662f\u5426\u4f1a\u53d1\u5e03\u75ab\u82d7\u6388\u6743\u53d1\u8868\u8bc4\u8bba\u3002\nTwitter \u8981\u6c42\u5176\u8fd4\u56de\u7684\u5458\u5de5\u5728\u8fd4\u56de\u529e\u516c\u5ba4\u4e4b\u524d\u51fa\u793a\u75ab\u82d7\u63a5\u79cd\u8bc1\u660e\u3002\u7136\u800c\uff0c\u5b83\u62e5\u6709\u4e1a\u5185\u6700\u5927\u80c6\u7684\u8fdc\u7a0b\u5de5\u4f5c\u653f\u7b56\u4e4b\u4e00\u3002\u8be5\u516c\u53f8\u5728 5 \u6708\u4efd\u5ba3\u5e03\uff0c\u5982\u679c\u5458\u5de5\u613f\u610f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6c38\u4e45\u8fdc\u7a0b\u5de5\u4f5c\u3002 Twitter \u9996\u5e2d\u8d22\u52a1\u5b98 Ned Segal \u672c\u6708\u5728\u4e00\u6761\u63a8\u6587\u4e2d\u8868\u793a\uff1a\u201c\u6211\u4eec\u4e0d\u4f1a\u8981\u6c42\u6bcf\u4e2a\u4eba\u90fd\u56de\u6765\u3002\u6c38\u8fdc\uff0c\u201d\u5e76\u8865\u5145\u8bf4 Twitter \u5458\u5de5\u53ef\u4ee5\u201c\u5728\u6c99\u53d1\u4e0a\u6216\u529e\u516c\u5ba4\u91cc\u201d\u5de5\u4f5c\u3002\u5468\u4e09\uff0cTwitter \u5ba3\u5e03\u5c06\u6839\u636e\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u7684\u6700\u65b0\u6307\u5357\u5173\u95ed\u5176\u5728\u65e7\u91d1\u5c71\u548c\u7ebd\u7ea6\u91cd\u65b0\u5f00\u653e\u7684\u529e\u516c\u5ba4\u3002\u636e\u516c\u53f8\u53d1\u8a00\u4eba\u79f0\uff0c\u5546\u4e1a\u8f6f\u4ef6\u5236\u9020\u5546 Salesforce \u5df2\u5f00\u59cb\u8ba9\u5458\u5de5\u8fd4\u56de\u5176\u6240\u5728\u5730\uff0c\u8be5\u516c\u53f8\u8981\u6c42\u5458\u5de5\u5728\u8fd4\u56de\u524d\u63a5\u79cd\u75ab\u82d7\u3002", "note_en": "Google and Facebook will require U.S. employees to be vaccinated against the coronavirus before returning to the company&#39;s offices, the tech giants said on Wednesday.\n  In  a blog post, Google CEO Sundar Pichai said the vaccine mandate would apply to its U.S. offices in the coming weeks and would be required eventually for other locations.\n  &#34;Getting vaccinated is one of the most important ways to keep ourselves and our communities healthy in the months ahead,&#34; Pichai wrote.\n  Shortly after Google&#39;s announcement, Facebook said it too will require anyone coming to work at its U.S. offices to be vaccinated.\n  &#34;How we implement this policy will depend on local conditions and regulations. We will have a process for those who cannot be vaccinated for medical or other reasons and will be evaluating our approach in other regions as the situation evolves,&#34; Lori Goler, Facebook&#39;s vice president of people, wrote in a statement.\n    So far, other major tech companies, including Apple and Amazon, have declined to mandate vaccines. Microsoft, in a note to employees, said it will not require vaccination to enter workplaces, but top company officials recommend employees receive the shot.\n    Pichai also said Google would push back the return-to-office date for most of its 144,000 employees from September to mid-October as the delta variant of the coronavirus spreads. Other tech companies have announced similar delays.\n  In his blog post Wednesday, Google&#39;s Pichai said he has been encouraged to see &#34;very high vaccination rates&#34; among Googlers.\n  &#34;This is a big reason why we felt comfortable opening some of our offices to employees who wanted to return early,&#34; he wrote.\n  As the pandemic took hold last year, the tech industry was one of the first to send employees home to work. Now it&#39;s struggling with how and when to bring them back to the office, and to what degree it should let its vast workforce continue working remotely. Many companies have developed hybrid models, offering workers at least some flexibility.\n  Apple also has pushed back its return-to-the-office date to October, but the company said it is committed to having most employees work on location at least three days a week.\n  Microsoft is aiming for a September reopening of its offices. The company  said the pandemic has led it to expand its hybrid work opportunities for workers.\n  Facebook is on track to reopen its offices in October but will allow employees to continue working remotely with permission. Facebook CEO Mark Zuckerberg  has said he expects half of the tech giant&#39;s 48,000 employees to be working remotely in the coming years.\n    For Amazon workers, a return to the office is also slated for this fall. Amazon has said it will allow employees to work from home two days a week. A company spokesman declined to comment on whether it will issue a vaccine mandate.\n  Twitter is requiring its returning workers to show proof of vaccination before coming back to the office. Yet it has among the boldest remote work policies in the industry. The company announced in May that its employees can work remotely permanently if they so choose. Twitter Chief Financial Officer Ned Segal said in  a tweet this month: &#34;We aren&#39;t asking everyone to return. Ever,&#34; adding that Twitter staffers can do their work &#34;on their sofa or in an office.&#34;\n  On Wednesday, Twitter announced it is shutting down its reopened offices in San Francisco and New York in light of updated guidelines from the Centers for Disease Control and Prevention.\n  Business software maker Salesforce has begun to bring employees back to its locations and the company is requiring its workers be vaccinated before returning, according to a company spokeswoman.", "posttime": "2021-07-29 21:55:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,facebook,google,\u7f8e\u56fd,\u5458\u5de5", "title": "\u8c37\u6b4c\u548c Facebook \u4e3a\u7f8e\u56fd\u529e\u4e8b\u5904\u7684\u5458\u5de5\u5f3a\u5236\u63a5\u79cd\u75ab\u82d7", "title_en": "Google and Facebook mandate vaccines for employees at U.S. offices", "transed": 1, "url": "https://www.npr.org/2021/07/28/1021798222/google-mandates-vaccines-for-workers-pushes-back-return-to-office-date", "via": "", "real_tags": ["\u8c37\u6b4c", "facebook", "google", "\u7f8e\u56fd", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "99b8da0172616d7527839828723da956.png", "infoid": 1070256, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u540c\u65f6\u8bb0\u5f55\u6570\u767e\u4e2a\u795e\u7ecf\u5143\u5df2\u53d8\u5f97\u53f8\u7a7a\u89c1\u60ef\u3002\u5982\u679c\u6839\u636e\u8fc7\u53bb\u7684\u8d8b\u52bf\u63a8\u65ad\uff0c\u5230 2030 \u5e74\u6211\u4eec\u901a\u5e38\u53ef\u80fd\u4f1a\u8bb0\u5f55 1 \u4e07\u4e2a\u795e\u7ecf\u5143\u3002\u6211\u4eec\u5c06\u5982\u4f55\u5904\u7406\u6240\u6709\u8fd9\u4e9b\u6570\u636e\uff1f\u8981\u5904\u7406 14 \u7ef4\u7a7a\u95f4\uff0c\u8bf7\u60f3\u8c61\u4e00\u4e2a 3D \u7a7a\u95f4\u5e76\u5927\u58f0\u5bf9\u81ea\u5df1\u8bf4 14\u3002\u6bcf\u4e2a\u4eba\u90fd\u8fd9\u6837\u505a\u3002 \u2014 Geoffrey Hinton \u795e\u7ecf\u52a8\u529b\u5b66\u7684\u7ef4\u5ea6\u5f80\u5f80\u4f4e\u4e8e\u8bb0\u5f55\u7684\u795e\u7ecf\u5143\u6570\u91cf\u6240\u6697\u793a\u7684\u7ef4\u5ea6 \u2013 Humphries (2020) \u62a5\u544a\u4e86 10 \u500d\u5230 100 \u500d\u7684\u538b\u7f29\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u533a\u57df\u548c\u4efb\u52a1\u3002 Humphries \u5efa\u8bae\uff0c\u501f\u52a9\u795e\u7ecf\u964d\u7ef4\u7684\u5f3a\u5927\u539f\u7406\uff0c\u964d\u7ef4\u53ef\u4ee5\u5411\u6211\u4eec\u5c55\u793a\u795e\u7ecf\u56de\u8def\u6240\u4f53\u73b0\u7684\u771f\u5b9e\u6f5c\u5728\u4fe1\u53f7\u3002\u5373\u4f7f\u6211\u4eec\u4e0d\u5b8c\u5168\u76f8\u4fe1\u8fd9\u4e2a\u5f3a\u5927\u7684\u539f\u7406\u2014\u2014\u5b83\u5728\u89c6\u89c9\u7814\u7a76\u4eba\u5458\u4e2d\u80af\u5b9a\u5b58\u5728\u4e89\u8bae\u2014\u2014\u8bb8\u591a\u4eba\u8d5e\u540c\u5f31\u539f\u7406\uff1a\u66f4\u5c0f\u3001\u65f6\u95f4\u66f4\u5e73\u6ed1\u3001\u566a\u58f0\u66f4\u5c11\u7684\u5b50\u7a7a\u95f4\u6bd4\u539f\u59cb\u6570\u636e\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4ecb\u7ecd\u4e86\u795e\u7ecf\u6570\u636e\u5206\u6790\u4e2d\u65e0\u76d1\u7763\u65b9\u6cd5\u7684\u5206\u7c7b\uff0c\u786e\u5b9a\u4e86\u6587\u732e\u4e2d\u4e00\u4e9b\u4ee4\u4eba\u5174\u594b\u7684\u8d8b\u52bf\uff0c\u5e76\u5c55\u793a\u4e86\u4e00\u4e9b\u5173\u952e\u5dee\u8ddd\u2014\u2014\u672a\u6765\u51e0\u5e74\u7684\u7814\u7a76\u8def\u7ebf\u56fe\u3002\u4e3a\u4ec0\u4e48\u6211\u4eec\u5173\u5fc3\u795e\u7ecf\u79d1\u5b66\u4e2d\u7684\u964d\u7ef4\uff1f\u8ba9\u6211\u4eec\u6570\u4e00\u6570\u65b9\u5f0f\uff08\u5927\u81f4\u6309\u91ce\u5fc3\u6392\u5e8f\uff0c\u6216\u4ece\u5f31\u539f\u5219\u5230\u5f3a\u539f\u5219\uff09\uff1a \u538b\u7f29\uff1a\u5c06\u6570\u636e\u538b\u7f29\u5230\u51e0\u5341\u4e2a\u7ef4\u5ea6\u800c\u4e0d\u662f\u51e0\u767e\u4e2a\u7ef4\u5ea6\u6709\u5b9e\u9645\u7684\u8ba1\u7b97\u539f\u56e0\u2014\u2014\u5373\u8282\u7701\u5185\u5b58\u548c\u5904\u7406\u3002\u53ef\u89c6\u5316\uff1a\u4eba\u7c7b\u4e0d\u64c5\u957f\u53ef\u89c6\u5316\u8d85\u8fc7 2 \u6216 3 \u4e2a\u7ef4\u5ea6\u3002\u5c06\u4fe1\u606f\u538b\u7f29\u5230\u5c11\u6570\u6709\u610f\u4e49\u7684\u7ef4\u5ea6\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u7ed8\u5236\u5b83\u4eec\uff0c\u5e76\u76f4\u89c2\u5730\u4e86\u89e3\u6570\u636e\u53d8\u5316\u7684\u56e0\u7d20\u3002\n\u53bb\u566a\uff1a\u5982\u679c\u6211\u4eec\u60f3\u4e86\u89e3\u5355\u6b21\u8bd5\u9a8c\u671f\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u53bb\u566a\u3002\u5982\u679c 100 \u4e2a\u795e\u7ecf\u5143\u662f\u540c\u4e00\u4e2a\u6f5c\u5728\u53d8\u91cf\u7684 100 \u4e2a\u72ec\u7acb\u8868\u73b0\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5e73\u5747\u6765\u5c06\u4fe1\u566a\u6bd4\u63d0\u9ad8\u4e00\u4e2a\u56e0\u5b50\u221a100 = 10\u3002\u964d\u7ef4\u7075\u6d3b\u5730\u5e73\u5747\u540c\u4e00\u6570\u636e\u7684\u591a\u4e2a\u91cd\u53e0\u5b9e\u73b0\uff0c\u4ee5\u5b9e\u73b0\u4fe1\u566a\u6bd4\u7684\u63d0\u5347\u3002\u751f\u6210\u5047\u6570\u636e\uff1a\u8bb8\u591a\u964d\u7ef4\u65b9\u6cd5\u90fd\u662f\u6709\u6548\u7684\u751f\u6210\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u4eec\u751f\u6210\u5047\u795e\u7ecf\u6570\u636e\uff0c\u4f8b\u5982\u5bf9\u5c16\u5cf0\u6392\u5e8f\u548c\u9499\u6210\u50cf\u4fe1\u53f7\u5904\u7406\u7ba1\u9053\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002\u4e0e\u884c\u4e3a\u76f8\u5173\uff1a\u5608\u6742\u7684\u9ad8\u7ef4\u795e\u7ecf\u6570\u636e\u5f88\u96be\u4e0e\u52a8\u7269\u7684\u884c\u4e3a\u76f8\u5173\u8054\uff0c\u800c\u8fd9\u5f80\u5f80\u662f\u6211\u4eec\u6700\u7ec8\u5173\u5fc3\u7684\u3002\u5c06\u4fe1\u606f\u538b\u7f29\u5230\u4f4e\u7ef4\u5b50\u7a7a\u95f4\u53ef\u4ee5\u66f4\u5bb9\u6613\u5730\u4e0e\u884c\u4e3a\u76f8\u5173\u8054\u3002\u7406\u89e3\u8ba1\u7b97\uff1a\u6f5c\u5728\u7a7a\u95f4\u53ef\u80fd\u4ee3\u8868\u539f\u59cb\u6570\u636e\u4e2d\u4e0d\u53ef\u89c1\u7684\u795e\u7ecf\u8ba1\u7b97\u7684\u6709\u8da3\u65b9\u9762\uff0c\u4f8b\u5982\uff0c\u7ebf\u5438\u5f15\u5b50\u6216\u65cb\u8f6c\u52a8\u529b\u5b66\u3002\u964d\u7ef4\u7684\u6f5c\u5728\u7a7a\u95f4\u53ef\u4ee5\u5e2e\u52a9\u53d1\u73b0\u90a3\u4e9b\u9690\u85cf\u7684\u8ba1\u7b97\u3002\u89e3\u5f00\u6f5c\u5728\u56e0\u7d20\uff1a\u4e5f\u8bb8\u6700\u96c4\u5fc3\u52c3\u52c3\u7684\u662f\uff0c\u6211\u4eec\u60f3\u8981\u786e\u5b9a\u5bfc\u81f4\u6570\u636e\u53d8\u5316\u7684\u6f5c\u5728\u56e0\u7d20\u3002\u5927\u591a\u6570\u964d\u7ef4\u65b9\u6cd5\u4e0d\u76f4\u63a5\u6355\u83b7\u56e0\u679c\u673a\u5236\u2014\u2014\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u903b\u8f91\u7ef4\u5ea6\u53ef\u80fd\u6355\u83b7\u51e0\u4e2a\u56e0\u679c\u673a\u5236\u3002\u4f46\u662f\u4e00\u4e9b\u964d\u7ef4\u65b9\u6cd5\u6e34\u671b\u89e3\u5f00\u72ec\u7acb\u7684\u539f\u56e0\u2014\u2014\u7ebf\u6027 ICA\uff08\u72ec\u7acb\u6210\u5206\u5206\u6790\uff09\u53ef\u80fd\u662f\u6700\u8457\u540d\u7684\u4f8b\u5b50\u3002\u6807\u51c6\u514d\u8d23\u58f0\u660e\uff1a\u56e0\u679c\u63a8\u65ad\u5f88\u96be\u3002\u5bf9\u56e0\u679c\u8bba\u65ad\u6301\u6000\u7591\u6001\u5ea6\u3002\u8fd9\u662f\u4e00\u4e2a\u6d3b\u8dc3\u7684\u7814\u7a76\u9886\u57df\u3002\u9274\u4e8e\u8fd9\u4e9b\u4e0d\u540c\u7684\u5206\u6790\u76ee\u6807\uff0c\u6211\u4eec\u53ef\u4ee5\u7f16\u8bd1\u4e00\u4e2a\u89c4\u8303\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u6db5\u76d6\u4e86\u5e7f\u6cdb\u7684\u964d\u7ef4\u6280\u672f\u3002\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u751f\u6210\u6a21\u578b\uff0c\u5b83\u901a\u8fc7\u6620\u5c04\u51fd\u6570 f \u548c\u566a\u58f0\u6a21\u578b\u5c06\u6f5c\u5728\u56e0\u5b50 z(t) \u6620\u5c04\u5230\u795e\u7ecf\u89c2\u5bdf x(t)\u3002\u6f5c\u5728\u56e0\u7d20\u6839\u636e\u5b83\u4eec\u7684\u52a8\u6001 D \u6f14\u5316\u3002\u964d\u7ef4\u6280\u672f\u7684\u4e2d\u5fc3\u76ee\u6807\u662f\u5b66\u4e60\u63a8\u7406\u51fd\u6570 \u03c6\uff0c\u5b83\u5c06\u795e\u7ecf\u89c2\u5bdf x(t) \u6620\u5c04\u5230\u6f5c\u5728\u56e0\u7d20 z(t)\u3002\u8be5\u63a8\u7406\u51fd\u6570\u53ef\u4ee5\u50cf\u77e9\u9635\u4e58\u6cd5\u4e00\u6837\u7b80\u5355\uff0c\u4e5f\u53ef\u4ee5\u50cf\u7531\u591a\u6b65\u4f18\u5316\u7a0b\u5e8f\u5b9e\u73b0\u7684\u9690\u5f0f\u51fd\u6570\u4e00\u6837\u590d\u6742\u3002\n\u4e3a\u4e86\u5728\u5730\u9762\u4e0a\u653e\u7f6e\u4e00\u4e9b\u8d4c\u6ce8\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e9b\u4e0d\u540c\u7684\u7ec4\u4ef6\u5982\u4f55\u5728\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u7684\u4e00\u4e9b\u6d41\u884c\u6a21\u578b\u4e2d\u76f8\u4e92\u4f5c\u7528\uff1a PCA\uff1a\u5728\u4e3b\u6210\u5206\u5206\u6790 (PCA) \u4e2d\uff0c\u6620\u5c04\u51fd\u6570 f \u662f\u77ac\u65f6\u7ebf\u6027\u51fd\u6570\uff0c\u566a\u58f0\u662f\u9ad8\u65af\u51fd\u6570\uff08\u5728 PCA \u7684\u6982\u7387\u6269\u5c55\u4e2d\uff09\u3002\u52a8\u6001\u6ca1\u6709\u660e\u786e\u5efa\u6a21\u3002\u63a8\u7406\u51fd\u6570\u662f\u6620\u5c04\u51fd\u6570 ICA \u7684\u9006\u77e9\u9635\uff1a\u5728\u72ec\u7acb\u5206\u91cf\u5206\u6790 (ICA) \u4e2d\uff0c\u6620\u5c04\u51fd\u6570\u7684\u7c7b\u522b\u4e0e PCA \u4e2d\u7684\u76f8\u540c\uff0c\u4f46\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\uff0c\u6620\u5c04\u51fd\u6570 \u03c6 \u88ab\u7ea6\u675f\u4e3a\u6f5c\u5728\u7a7a\u95f4 z(t ) \u88ab\u5206\u89e3\u4e3a\u72ec\u7acb\u7684\u6765\u6e90\u3002 GPFA\uff1a\u5728\u9ad8\u65af\u8fc7\u7a0b\u56e0\u5b50\u5206\u6790 (GPFA) \u4e2d\uff0c\u6620\u5c04\u51fd\u6570\u518d\u6b21\u662f\u7ebf\u6027\u51fd\u6570\uff0c\u540e\u8ddf\u9ad8\u65af\u566a\u58f0\uff0c\u4f46\u73b0\u5728\u4f7f\u7528\u72ec\u7acb\u7684\u9ad8\u65af\u8fc7\u7a0b (GP) \u5148\u9a8c\u660e\u786e\u5730\u5efa\u6a21\u52a8\u6001\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u5f3a\u5236\u6f5c\u5728\u53d8\u91cf\u968f\u65f6\u95f4\u5e73\u6ed1\u53d8\u5316\u3002\u63a8\u7406\u662f\u901a\u8fc7\u5177\u6709\u671f\u671b\u6700\u5927\u5316\u7684\u5c01\u95ed\u5f62\u5f0f GP \u63a8\u7406\u6765\u5b8c\u6210\u7684\uff0c\u4ee5\u5b66\u4e60\u8d85\u53c2\u6570 LFADS\uff1a\u5728\u901a\u8fc7\u52a8\u6001\u7cfb\u7edf\u7684\u6f5c\u5728\u56e0\u5b50\u5206\u6790 (LFADS) \u4e2d\uff0c\u52a8\u6001\u7531 RNN \u7ed9\u51fa\uff0c\u800c\u6620\u5c04\u51fd\u6570\u662f\u7ebf\u6027\u7684\uff0c\u566a\u58f0\u53ef\u4ee5\u662f\u9ad8\u65af\u6216\u6cca\u677e\u3002 RNN \u9690\u542b\u5730\u5f3a\u52a0\u4e86\u5e73\u6ed1\u7684\u52a8\u6001\u3002\u63a8\u7406\u662f\u901a\u8fc7\u53d8\u5206\u81ea\u52a8\u7f16\u7801\u5668 (VAE) \u6846\u67b6\u4e2d\u7684\u53d8\u5206\u63a8\u7406\u5b8c\u6210\u7684\u3002\u4e5f\u8bb8\u6700\u91cd\u8981\u7684\u52a8\u4eba\u90e8\u5206\u662f\u52a8\u6001\u3002\u4e3a\u4e86\u5728\u5355\u4e2a\u8bd5\u9a8c\u7ea7\u522b\u63a8\u65ad\u795e\u7ecf\u6d3b\u52a8\u7684\u6f5c\u5728\u7ed3\u6784\uff0c\u4f7f\u7528\u5f53\u524d\u73b0\u6709\u7684\u8bb0\u5f55\u6280\u672f\uff0c\u6ca1\u6709\u8db3\u591f\u7684\u795e\u7ecf\u5143\u548c SNR \u6765\u63a8\u65ad\u5355\u4e2a\u8bd5\u9a8c\u7ea7\u522b\u7684\u6f5c\u5728\u7ed3\u6784\uff1a\u6211\u4eec\u5fc5\u987b\u7075\u6d3b\u5730\u5e73\u6ed1\u65f6\u95f4\u3002\u590d\u6742\u7684\u52a8\u6001\u5148\u9a8c\u9700\u8981\u590d\u6742\u7684\u3001\u6982\u7387\u6027\u7684\u63a8\u7406\u65b9\u6cd5\u2014\u2014\u6bcf\u79cd\u65b9\u6cd5\u5728\u901f\u5ea6\u3001\u5b9e\u73b0\u7684\u7b80\u5355\u6027\u548c\u901a\u7528\u6027\u65b9\u9762\u90fd\u6709\u5176\u6743\u8861\u2014\u2014\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u8fc7\u53bb 5 \u5e74\u4e2d\u770b\u5230\u4e86\u65b9\u6cd5\u7684\u7206\u70b8\u5f0f\u589e\u957f\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u4e9b\u964d\u7ef4\u65b9\u6cd5\u7684\u4f8b\u5b50\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u4e9b\u5df2\u53d1\u8868\u7684\u5206\u7c7b\u6cd5\uff0c\u5b83\u4eec\u8bd5\u56fe\u4e3a\u6df7\u4e71\u5e26\u6765\u4e00\u4e9b\u79e9\u5e8f\u3002\u6211\u5df2\u7ecf\u7528\u4e0a\u9762\u7684\u89c4\u8303\u6a21\u578b\uff08\u7ea2\u8272\uff09\u7684\u7ec4\u4ef6\u6ce8\u91ca\u4e86\u8fd9\u4e9b\u5206\u7c7b\u6cd5\u4ee5\u4f9b\u53c2\u8003\u3002 Cunningham and Yu (2014) \u7684\u7ecf\u5178\u8bc4\u8bba\u4e2d\u6709\u4e00\u4e2a\u65e9\u671f\u7684\u5206\u7c7b\u6cd5\uff1a\n\u6211\u4eec\u770b\u5230\u4e86\u8fd9\u9879\u65e9\u671f\u5de5\u4f5c\u4e2d\u6240\u4ee3\u8868\u7684\u76ee\u6807\u7684\u591a\u6837\u6027\u3002\u63a5\u4e0b\u6765\u51e0\u5e74\u7684\u5927\u90e8\u5206\u7814\u7a76\u90fd\u96c6\u4e2d\u5728\u6784\u5efa\u590d\u6742\u7684\u65b0\u63a8\u7406\u65b9\u6cd5\u4e0a\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5047\u5b9a\u663e\u5f0f\u751f\u6210\u548c\u52a8\u6001\u6a21\u578b\u3002\u52a8\u529b\u5b66\u5141\u8bb8\u6a21\u578b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u6574\u5408\u4fe1\u606f\uff0c\u8fd9\u4f7f\u5f97\u8fdb\u884c\u5355\u6b21\u8bd5\u9a8c\u63a8\u7406\u6210\u4e3a\u53ef\u80fd\u3002\u7ea6\u7ff0\u00b7\u574e\u5b81\u5b89 (John Cunningham) \u5728 2018 \u5e74\u5de6\u53f3\u7684\u4e00\u6b21\u6f14\u8bb2\u4e2d\u63d0\u51fa\u4e86\u8fd9\u4e9b\u6a21\u578b\u7684\u65b0\u5206\u7c7b\u6cd5\uff1a\u4e3a\u4f4e\u8d28\u91cf\u9053\u6b49\uff0c\u5b83\u662f\u4ece\u5173\u952e\u5e7b\u706f\u7247\u7684\u7167\u7247\u4e2d\u63d0\u53d6\u7684 \u8fd9\u4e2a\u66f4\u65b0\u7684\u8868\u683c\u6709\u70b9\u96be\u4ee5\u89e3\u6790\uff0c\u4f46\u6211\u53d1\u73b0\u5b83\u63d0\u4f9b\u4e86\u5f88\u591a\u5386\u53f2\u4e0a\u4e0b\u6587\u548c\u8c31\u7cfb\uff1a\u6211\u4eec\u5728\u5de6\u5217\u4e2d\u770b\u5230\u6709\u5173\u6613\u5904\u7406\u6a21\u578b\u7684\u65e9\u671f\u5de5\u4f5c\uff08\u9690\u85cf\u9a6c\u5c14\u53ef\u592b\u6a21\u578b\u3001\u7ebf\u6027\u52a8\u529b\u7cfb\u7edf\u3001\u5207\u6362 LDS\uff09\u5728\u4e2d\u5217\u548c\u53f3\u5217\u4e2d\u6f14\u53d8\u4e3a\u66f4\u590d\u6742\u7684\u6a21\u578b\u3002\u590d\u6742\u7684\u6a21\u578b\u5e26\u6765\u4e86\u590d\u6742\u7684\u63a8\u7406\u6280\u672f\uff1b Memming Park \u5728 2020 \u5e74 CoSyNe \u6f14\u8bb2\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u603b\u7ed3\uff1a\u5176\u4e2d\u8bb8\u591a\u65b9\u6cd5\u6700\u8fd1\u88ab\u7f16\u8bd1\u6210 Hurwitz \u7b49\u4eba\u7684\u53e6\u4e00\u4e2a\u5206\u7c7b\u6cd5\u3002 (2021)\uff0c\u7528\u5c16\u7aef\u65b9\u6cd5\u7efc\u5408\u4e86\u8be5\u9886\u57df\u7684\u4e00\u4e9b\u65e9\u671f\u5de5\u4f5c\u3002\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u6709\u70b9\u96be\u4ee5\u63cf\u8ff0\uff0c\u4f46\u60a8\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u4e2d\u7684\u5b57\u6bcd\u7ec4\u6765\u731c\u6d4b\u6bcf\u79cd\u65b9\u6cd5\u7684\u542b\u4e49\uff1aGP\uff1a\u9ad8\u65af\u8fc7\u7a0b\u3002\u9ad8\u65af\u8fc7\u7a0b\u901a\u5e38\u7528\u4e8e\u5bf9\u6f5c\u5728\u53d8\u91cf\u65bd\u52a0\u65f6\u95f4\u5e73\u6ed1\uff0c\u5f88\u5c11\u7528\u4e8e\u5bf9\u975e\u7ebf\u6027\u8c03\u8c10\u66f2\u7ebf\u8fdb\u884c\u5efa\u6a21\u3002\nLDS\uff1a\u7ebf\u6027\u52a8\u529b\u7cfb\u7edf\u3002\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668\u662f\u5177\u6709\u57fa\u7840\u7ebf\u6027\u52a8\u529b\u7cfb\u7edf\u7684\u6a21\u578b\u7684\u793a\u4f8b\u3002 SLDS\uff1a\u5207\u6362 LDS\u3002\u53ef\u4ee5\u6839\u636e\u79bb\u6563\u53d8\u91cf\u5728 2 \u4e2a\u6216\u66f4\u591a\u6f5c\u5728\u7ebf\u6027\u52a8\u6001\u4e4b\u95f4\u5207\u6362\u7684\u6a21\u578b\u3002 P*\uff1a\u6cca\u677e\u3002\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u4e2d\u7684\u8d77\u59cb P \u901a\u5e38\u6307\u7684\u662f\u6cca\u677e\u566a\u58f0\u6a21\u578b\u3002 VAE\uff1a\u53d8\u5206\u81ea\u52a8\u7f16\u7801\u5668\u3002\u4e00\u79cd\u6f5c\u5728\u53d8\u91cf\u6a21\u578b\uff0c\u5b83\u4f7f\u7528\u7f16\u7801\u5668\u5c06\u89c2\u5bdf\u7ed3\u679c\u538b\u7f29\u4e3a\u6f5c\u5728\u53d8\u91cf\uff0c\u4f7f\u5176\u6210\u4e3a\u6613\u5904\u7406\u7684\u5206\u5e03\uff08\u901a\u5e38\u662f\u591a\u5143\u9ad8\u65af\u5206\u5e03\uff09\uff0c\u5e76\u901a\u8fc7\u53d8\u5206\u63a8\u7406\u8fdb\u884c\u62df\u5408\u3002\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u8fd9\u4e9b\u5206\u7c7b\u6cd5\u5e76\u672a\u660e\u786e\u8bf4\u660e\u5982\u4f55\u5c06\u884c\u4e3a\u548c\u5b9e\u9a8c\u6761\u4ef6\u96c6\u6210\u5230\u6bcf\u4e2a\u6a21\u578b\u4e2d\u3002\u8be5\u9886\u57df\u4e00\u4e9b\u6700\u6709\u8da3\u7684\u53d1\u5c55\u4e0e\u5c06\u884c\u4e3a\u663e\u5f0f\u5730\u6574\u5408\u5230\u964d\u7ef4\u4e2d\u6709\u5173\u3002\u8ba9\u6211\u4eec\u8003\u8651\u4e00\u4e2a\u66f4\u901a\u7528\u7684\u964d\u7ef4\u6a21\u578b\uff0c\u5b83\u96c6\u6210\u4e86\u884c\u4e3a\u4ee5\u53ca\u5bf9\u5e94\u4e8e\u5b9e\u9a8c\u6761\u4ef6\u7684\u5916\u90e8\u534f\u53d8\u91cf\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u6709\u4e0e\u795e\u7ecf\u65f6\u95f4\u5e8f\u5217 x(t) \u5e73\u884c\u7684\u884c\u4e3a\u65f6\u95f4\u5e8f\u5217 u(t)\u3002\u4f8b\u5982\uff0cu(t) \u53ef\u4ee5\u7531\u5230\u8fbe\u4efb\u52a1\u4e2d\u624b\u81c2\u4f4d\u7f6e\u7684\u65f6\u95f4\u5e8f\u5217\u3001\u9f20\u6807\u9762\u90e8\u89c6\u9891\u7684 PC \u6216\u5b9e\u9a8c\u6761\u4ef6\u7ec4\u6210\u3002\u6620\u5c04\u51fd\u6570\u548c\u751f\u6210\u6a21\u578b\u73b0\u5728\u5bf9\u8fd9\u4e9b\u65f6\u95f4\u5e8f\u5217\u7684\u4e32\u8054\u8fdb\u884c\u64cd\u4f5c\u2014\u2014\u6f5c\u5728\u7a7a\u95f4 z(t) \u5728\u884c\u4e3a\u548c\u795e\u7ecf\u6570\u636e\u4e4b\u95f4\u5171\u4eab\u3002\u5728\u8fd9\u91cc\uff0c\u884c\u4e3a\u56de\u5f52\u5230\u5927\u8111\u6570\u636e\uff08\u53cd\u4e4b\u4ea6\u7136\uff09\u548c\u964d\u7ef4\u4e4b\u95f4\u7684\u533a\u522b\u662f\u6a21\u7cca\u7684\uff1a\u5b83\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u3002\u8fd9\u662f\u6211\u5728\u8003\u8651\u6574\u5408\u884c\u4e3a\u548c\u795e\u7ecf\u6570\u636e\u65f6\u4f7f\u7528\u7684\u5fc3\u7406\u6a21\u578b\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u6574\u5408\u884c\u4e3a\u548c\u795e\u7ecf\u6570\u636e\u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u4f46\u8868\u9762\u4e0a\u770b\u8d77\u6765\u4e0d\u540c\u3002 LDA\uff1a\u7ebf\u6027\u5224\u522b\u5206\u6790\u3002\u7ecf\u5178\u6280\u672f\u3002\u67e5\u627e\u53ef\u4ee5\u6700\u5927\u7a0b\u5ea6\u533a\u5206\u4e00\u7ec4\u7c7b\u7684\u4e00\u7ec4\u7ef4\u5ea6\u3002\u6ca1\u6709\u52a8\u6001\u3002\nCCA\uff1a\u5178\u578b\u76f8\u5173\u5206\u6790\u3002\u7ecf\u5178\u6280\u672f\u3002\u67e5\u627e\u4e24\u7ec4\u4e0d\u540c\u77e9\u9635\u4e4b\u95f4\u7684\u516c\u5171\u7ebf\u6027\u5b50\u7a7a\u95f4\u3002\u901a\u8fc7\u7ebf\u6027\u51fd\u6570\u8fdb\u884c\u63a8\u7406\u548c\u6620\u5c04\u3002\u65e0\u52a8\u529b\u5b66 Demixed component analysis\uff1a\u6839\u636e\u4e0d\u540c\u7ea7\u522b\u7684\u6761\u4ef6\u53ca\u5176\u76f8\u4e92\u4f5c\u7528\uff0c\u5bf9\u6570\u636e\u6267\u884c\u7c7b\u4f3c\u65b9\u5dee\u5206\u6790\u6216\u7c7b\u4f3c\u5f20\u91cf\u5206\u89e3\u7684\u5206\u89e3\u3002\u6ca1\u6709\u52a8\u6001\uff0c\u53ea\u6709\u5e73\u5747\u8bd5\u9a8c\u3002 LFADS\uff1a\u901a\u8fc7\u52a8\u6001\u7cfb\u7edf\u8fdb\u884c\u7684\u6f5c\u5728\u56e0\u7d20\u5206\u6790\u3002\u53ef\u4ee5\u5c06\u884c\u4e3a\u548c\u6761\u4ef6\u4fe1\u606f\u4f5c\u4e3a\u8f85\u52a9\u4fe1\u606f\u96c6\u6210\u5230\u6f5c\u5728\u7a7a\u95f4\u3002\u5355\u6b21\u8bd5\u9a8c\u3001RNN \u52a8\u529b\u5b66\u3001\u663e\u5f0f\u566a\u58f0\u6a21\u578b\u3001\u53d8\u5206\u63a8\u7406 (VAE)\u3002 PSID\uff1a\u4f18\u5148\u5b50\u7a7a\u95f4\u8bc6\u522b\u3002\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668\u542f\u53d1\u6a21\u578b\u5c06\u6f5c\u5728\u7a7a\u95f4\u660e\u786e\u5212\u5206\u4e3a\u4ec5\u884c\u4e3a\u3001\u4ec5\u795e\u7ecf\u548c\u795e\u7ecf\u548c\u884c\u4e3a\u5b50\u96c6\u3002\u5355\u6b21\u8bd5\u9a8c\u3001\u7ebf\u6027\u52a8\u529b\u5b66\u3001\u9ad8\u65af\u566a\u58f0\u6a21\u578b\u3001\u57fa\u4e8e\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668\u7684\u63a8\u7406\uff08\u52a8\u6001\u89c4\u5212\uff09\u3002 pi-VAE\uff1a\uff08\u5176\u4ed6\u8bc4\u8bba\u4e2d\u672a\u6db5\u76d6\uff0c\u4e8e 2020 \u5e74\u672b\u53d1\u5e03\uff09\u3002\u6cca\u677e\u53ef\u89e3\u91ca\u53d8\u5206\u81ea\u52a8\u7f16\u7801\u5668\u3002\u5d4c\u5165\u6709\u5173\u6761\u4ef6\u548c\u884c\u4e3a\u7684\u6f5c\u5728\u4fe1\u606f\uff0c\u4f5c\u4e3a\u7c7b\u4f3c VAE \u7684\u5206\u5c42\u751f\u6210\u6a21\u578b\u7684\u4e00\u90e8\u5206\u3002\u53d7\u8fd1\u671f\u878d\u5408\u975e\u7ebf\u6027 ICA \u548c VAE \u5de5\u4f5c\u7684\u542f\u53d1\uff08Khemakhem \u7b49\u4eba\uff0c2019 \u5e74\uff09\uff0c\u4f7f\u7528\u7075\u6d3b\u7684\u5355\u5c04\u51fd\u6570\uff08GIN\uff0cRealNVP \u7684\u53d8\u4f53\uff09\u4f5c\u4e3a\u751f\u6210\u6a21\u578b\u6765\u89e3\u5f00\u6f5c\u5728\u539f\u56e0\uff08\u76f4\u81f3\u6392\u5217\uff09\u3002\u6ca1\u6709\u52a8\u6001\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u4ece\u4e0a\u4e00\u6bb5\u63a8\u65ad\u51fa\u7684\u90a3\u6837\uff0c\u6211\u5f88\u9ad8\u5174\u770b\u5230\u660e\u786e\u6574\u5408\u884c\u4e3a\u7684\u6a21\u578b\u53d6\u5f97\u4e86\u8fdb\u5c55\u3002\u964d\u7ef4\u7b97\u6cd5\u901a\u5e38\u5728\u5df2\u77e5\u7684\u4f4e\u7ef4\u7cfb\u7edf\u4e0a\u8fdb\u884c\u5b8c\u6574\u6027\u68c0\u67e5\u2014\u2014\u4f8b\u5982\u8303\u5fb7\u6ce2\u5c14\u632f\u8361\u5668\u3001\u6d1b\u4f26\u5179\u7cfb\u7edf\u3001\u5e73\u8861 EI \u7f51\u7edc\u3002\u7136\u800c\uff0c\u5f53\u5b83\u4eec\u5728\u91ce\u5916\u90e8\u7f72\u65f6\uff0c\u5bf9\u5b83\u4eec\u7684\u8bc4\u4f30\u901a\u5e38\u5f52\u7ed3\u4e3a\u5c06\u5b83\u4eec\u4e0e\u5df2\u77e5\u7684\u884c\u4e3a\u548c\u5b9e\u9a8c\u6761\u4ef6\u76f8\u5339\u914d\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u884c\u4e3a\u662f\u57fa\u672c\u4e8b\u5b9e\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9519\u5931\u4e86\u4e0d\u660e\u786e\u6a21\u62df\u884c\u4e3a\u7684\u673a\u4f1a\u3002\u60a8\u53ef\u80fd\u4f1a\u95ee\u81ea\u5df1\uff1a\u96c6\u6210\u884c\u4e3a\u548c\u795e\u7ecf\u6570\u636e\u7684\u6f5c\u53d8\u91cf\u6a21\u578b\u4e0e\u7b80\u5355\u5730\u5bf9\u795e\u7ecf\u6570\u636e\u8fdb\u884c\u56de\u5f52\u884c\u4e3a\u6709\u4f55\u4e0d\u540c\uff1f\u4e00\u4e2a\u7b54\u6848\u662f\u5b58\u5728\u4e00\u4e2a\u5171\u4eab\u7684\u4f4e\u7ef4\u74f6\u9888\uff0c\u800c\u8fd9\u4e2a\u4f4e\u7ef4\u74f6\u9888\u7684\u7ed3\u6784\u53ef\u4ee5\u63ed\u793a\u4e00\u4e9b\u5173\u4e8e\u795e\u7ecf\u8ba1\u7b97\u548c\u884c\u4e3a\u7684\u6709\u8da3\u4e4b\u5904\u3002\u4f8b\u5982\u8003\u8651 Wiltschko \u7b49\u4eba\u3002 (2015)\uff0c\u4ed6\u4f7f\u7528\u81ea\u56de\u5f52\u9690\u9a6c\u5c14\u53ef\u592b\u6a21\u578b (AR-HMM) \u5bf9\u5c0f\u9f20\u7684\u81ea\u53d1\u884c\u4e3a\u8fdb\u884c\u5efa\u6a21\uff1a\u5047\u8bbe\u5c0f\u9f20\u9075\u5faa\u7531\u79bb\u6563\u72b6\u6001\uff08\u4f8b\u5982\u6b65\u884c\u3001\u6682\u505c\u3001\u4f4e\u540e\u65b9\u7b49\uff09\u786e\u5b9a\u7684\u4e0d\u540c\u7ebf\u6027\u52a8\u529b\u5b66\u3002\u8fd9\u662f\u5207\u6362\u7ebf\u6027\u52a8\u529b\u7cfb\u7edf (SLDS) \u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5b83\u4e5f\u7ecf\u5e38\u5e94\u7528\u4e8e\u795e\u7ecf\u6570\u636e\u3002\n\u73b0\u5728\u60f3\u8c61\u4e00\u4e0b\u76f8\u540c\u7684\u6a21\u578b\uff0c\u4f46\u8fd9\u6b21\u9002\u7528\u4e8e\u795e\u7ecf\u548c\u884c\u4e3a\u6570\u636e\u3002\u63a8\u65ad\u7684\u72b6\u6001\u4e0d\u4ec5\u4f1a\u63ed\u793a\u901a\u8fc7\u5934\u9876\u6444\u50cf\u5934\u53ef\u89c1\u7684\u884c\u4e3a\u72b6\u6001\uff0c\u8fd8\u4f1a\u63ed\u793a\u795e\u7ecf\u72b6\u6001\uff0c\u5982\u5524\u9192\u548c\u6ce8\u610f\u529b\u3002\u5b9e\u9645\u4e0a\uff0cPSID \u7684\u76ee\u6807\u662f\u5c06\u4f4e\u7ef4\u74f6\u9888\u5212\u5206\u4e3a\u4ec5\u884c\u4e3a\u7ef4\u5ea6\u3001\u4ec5\u795e\u7ecf\u7ef4\u5ea6\u548c\u884c\u4e3a\u4e0e\u795e\u7ecf\u7ef4\u5ea6\u3002\u7406\u60f3\u7684\u6a21\u578b\u4f1a\u5411 PSID \u4e2d\u5236\u5b9a\u7684\u57fa\u672c\u8ba1\u5212\u6dfb\u52a0\u66f4\u591a\u7684\u95f4\u63a5\u5c42\uff08\u4f8b\u5982\u79bb\u6563\u72b6\u6001\u3001\u884c\u4e3a\u548c\u795e\u7ecf\u7ec4\u4ef6\u7684\u4e0d\u540c\u975e\u7ebf\u6027\u8bbe\u5907\u3001\u5207\u6362\u52a8\u529b\u5b66\uff09\u3002\u5c06\u5176\u89c6\u4e3a\u5177\u6709\u52a8\u529b\u5b66\u7684\u53ef\u89e3\u91ca\u975e\u7ebf\u6027 CCA\uff08\u5178\u578b\u76f8\u5173\u5206\u6790\uff09\u3002\u6211\u4eec\u5e0c\u671b\u4ece\u8fd9\u4e9b\u6a21\u578b\u4e2d\u5f97\u5230\u4ec0\u4e48\uff1f\u8fc7\u53bb\u51e0\u5e74\u5c0f\u9f20\u89c6\u89c9\u4e2d\u6700\u4ee4\u4eba\u60ca\u8bb6\u7684\u53d1\u73b0\u4e4b\u4e00\u662f\u53d1\u73b0\u4e86\u89c6\u89c9\u76ae\u5c42\u9762\u90e8\u884c\u4e3a\u7684\u4f17\u591a\u7f16\u7801\u7ef4\u5ea6\uff08Stringer et al. (2019)\uff09\u3002\u8fd9\u4e00\u53d1\u73b0\u7684\u6838\u5fc3\u662f\u964d\u9636\u56de\u5f52\uff0c\u5b83\u53d1\u73b0\u9762\u90e8\u884c\u4e3a\u548c\u89c6\u89c9\u53cd\u5e94\u4e4b\u95f4\u5b58\u5728\u5927\u91cf\u5171\u4eab\u5dee\u5f02\uff08\u6392\u540d 16\uff01\uff09\u3002\u8fd9\u79cd\u7814\u7a76\u91cd\u65b0\u5b9a\u4e49\u4e86\u6211\u4eec\u5bf9\u795e\u7ecf\u6d3b\u52a8\u548c\u884c\u4e3a\u4e4b\u95f4\u5173\u7cfb\u7684\u7406\u89e3\uff0c\u6211\u9884\u8ba1\u968f\u7740\u5de5\u5177\u7684\u6210\u719f\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u5f88\u591a\u8fd9\u6837\u7684\u7814\u7a76\u3002\u5f53\u6211\u7b2c\u4e00\u6b21\u7814\u7a76\u964d\u7ef4\u6280\u672f\u65f6\uff0c\u4ee4\u6211\u9707\u60ca\u7684\u662f\uff0c\u5927\u591a\u6570\u6280\u672f\u660e\u667a\u5730\u4f7f\u7528\u7b80\u5355\u7684\u7ebf\u6027\u51fd\u6570 f \u6765\u6620\u5c04\u6f5c\u5728\u53d8\u91cf z(t) \u5230 x(t)\u3002\u6211\u5bf9\u67d0\u4e9b\u65b9\u6cd5\u4f7f\u7528\u5f3a\u5927\u7684\u975e\u7ebf\u6027\u89e3\u7801\u51fd\u6570 f \u611f\u5230\u56f0\u60d1\u3002\u5982\u679c\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u6613\u4e8e\u89e3\u91ca\u7684\u6f5c\u5728\u5b50\u7a7a\u95f4\uff0c\u90a3\u4e48\u4ece\u6f5c\u5728\u5230\u6570\u636e\u7684\u7b80\u5355\u6620\u5c04\u2014\u2014\u7c7b\u4f3c\u4e8e\u53ef\u4fe1\u7684 LNP\uff08\u7ebf\u6027\u975e\u7ebf\u6027\u6cca\u677e\uff09\u6a21\u578b\u4e0d\u662f\u66f4\u597d\u5417\uff1f P-GPLVM \u8bba\u6587\uff08Anqi Wu \u7b49\u4eba\uff0c2017 \u5e74\uff09\u8ba9\u6211\u4fe1\u670d\u3002\u8981\u4f7f\u7528\u7ebf\u6027\u89e3\u7801\u51fd\u6570\u4ece\u6d77\u9a6c\u4f53\u7684\u7ebf\u6027\u8f68\u8ff9\u4e0a\u89e3\u7801\u52a8\u7269\u7684\u4f4d\u7f6e\uff0c\u60a8\u9700\u8981\u4e00\u4e2a\u9ad8\u7ef4\u7684\u6f5c\u5728\u7a7a\u95f4\u3002\u5982\u679c\u60a8\u7684\u8f68\u9053\u957f 1 \u7c73\uff0c\u5e76\u4e14\u6bcf\u4e2a\u573a\u5730\u7684\u5bbd\u5ea6\u7ea6\u4e3a 20 \u5398\u7c73\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u9700\u8981 5 \u4e2a\u7ef4\u5ea6 (=100 \u5398\u7c73 / 20 \u5398\u7c73) \u6765\u8868\u793a\u6240\u6709\u573a\u5730\u3002\u4f46\u662f\u53ea\u6709\u4e00\u4e2a\u903b\u8f91\u7ef4\u5ea6\uff08\u8f68\u9053\u4e0a\u7684\u7ebf\u6027\u4f4d\u7f6e\uff09\uff01\u5728\u89e3\u7801\u4e2d\u6dfb\u52a0\u975e\u7ebf\u6027\uff08\u4ee5\u5e7f\u4e49\u52a0\u6027\u6a21\u578b\u7684\u98ce\u683c\uff09\u4fee\u590d\u4e86\u8fd9\u4e2a\u7f3a\u9677\u3002\u6211\u4eec\u8fd8\u770b\u5230\u4e86\u878d\u5408\u4fe1\u53f7\u5904\u7406\u7ba1\u9053\u548c\u964d\u7ef4\u7684\u52aa\u529b\u3002\u5df4\u8482\u7b49\u4eba\u3002 (2019) \u63d0\u51fa\u4e86\u4e00\u4e2a\u5206\u5c42\u6a21\u578b (BehaveNet) \u6765\u76f4\u63a5\u4ece\u9f20\u6807\u7684\u56fe\u50cf\u63a8\u65ad\u6f5c\u5728\u7684\u3002\u76f8\u5173\u5730\uff0cValPACa\uff08\u9499\u6210\u50cf\u6570\u636e\u5e76\u884c\u81ea\u52a8\u7f16\u7801\u7684\u53d8\u5206\u9636\u68af\uff09\u5e94\u7528 LFADS \u7684\u5206\u5c42\u53d8\u4f53\u76f4\u63a5\u4ece\u9499\u56fe\u50cf\u4e2d\u63d0\u53d6\u6f5c\u5728\u53d8\u91cf\u3002\u5c06\u4fe1\u53f7\u5904\u7406\u7ec4\u4ef6\u4e0e\u6f5c\u5728\u53d8\u91cf\u6a21\u578b\u878d\u5408\u901a\u5e38\u610f\u5473\u7740\u4f7f\u7528\u4e30\u5bcc\u7684\u975e\u7ebf\u6027\u89e3\u7801\u6a21\u578b\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u770b\u5230\u66f4\u591a\u5177\u6709\u4e30\u5bcc\u89e3\u7801\u6a21\u578b\u7684\u8bba\u6587\uff0c\u65e0\u8bba\u5b83\u4eec\u662f GP\u3001RNN \u8fd8\u662f\u53ef\u9006\u795e\u7ecf\u7f51\u7edc\u3002\u8fd9\u7bc7\u6587\u7ae0\u662f\u5728\u51e0\u4e2a\u6708\u524d\u5f00\u59cb\u7684\uff0c\u5f53\u65f6\u6211\u60f3\u62e5\u6709\u5de5\u5177\u6765\u7406\u89e3 Memming \u7684\u5206\u7c7b\u6cd5\u548c\u5f3a\u8c03\u7684\u65b9\u6cd5\u2014\u2014\u6240\u4ee5\u6211\u53c2\u52a0\u4e86\u6df1\u5ea6\u65e0\u76d1\u7763\u5b66\u4e60\u7684\u8bfe\u7a0b\u4ee5\u83b7\u5f97\u6b63\u786e\u7684\u80cc\u666f\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u73b0\u4ee3\u65e0\u76d1\u7763\u5b66\u4e60\u4ee5\u51e0\u79cd\u53ef\u89c1\u7684\u65b9\u5f0f\u5f71\u54cd\u4e86\u795e\u7ecf\u79d1\u5b66\u4e2d\u7684\u964d\u7ef4\uff1a\u4f7f\u7528 RNN \u8868\u793a\u590d\u6742\u52a8\u6001\uff0c\u4ee5\u53ca\u4f7f\u7528 BBVI \u548c VAE \u6280\u672f\u8fdb\u884c\u63a8\u7406\u3002\u7136\u800c\uff0c\u5728\u65e0\u76d1\u7763\u5b66\u4e60\u65b9\u9762\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u8fdb\u6b65\uff08\u53c2\u89c1\u6df1\u5ea6\u65e0\u76d1\u7763\u5b66\u4e60\u8bfe\u7a0b\uff09\uff0c\u4f46\u5c1a\u672a\u5bf9\u795e\u7ecf\u79d1\u5b66\u7684\u964d\u7ef4\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u3002\n\u81ea\u76d1\u7763\u5b66\u4e60\u53ef\u4ee5\u5b66\u4e60\u826f\u597d\u7684\u4f4e\u7ef4\u8868\u793a\uff0c\u800c\u65e0\u9700\u660e\u786e\u5b66\u4e60\u751f\u6210\u6a21\u578b\uff0c\u4f8b\u5982\u4f7f\u7528\u5bf9\u6bd4\u6280\u672f\u3002\u5728 Apple \u7814\u7a76\u4eba\u5458\u7684\u8fd9\u7bc7\u8bba\u6587 (Cheng et al. 2020) \u4e2d\uff0c\u4ed6\u4eec\u4f7f\u7528\u5bf9\u6bd4\u7269\u955c\u627e\u5230\u4e86 EEG \u7684\u51fa\u8272\u8868\u793a\u3002\u8fd9\u79cd\u65b9\u6cd5\u6709\u52a9\u4e8e\u627e\u5230\u6742\u4e71\u4fe1\u53f7\u7684\u826f\u597d\u4f4e\u7ef4\u8868\u793a\uff0c\u4f8b\u5982 ECoG \u548c\u5c40\u90e8\u573a\u7535\u4f4d\u3002\u5bf9\u6297\u6027\u7f51\u7edc\u662f\u53e6\u4e00\u4e2a\u5305\u542b\u8bb8\u591a\u5bcc\u6709\u6210\u679c\u7684\u60f3\u6cd5\u7684\u9886\u57df\u3002\u540c\u4e00\u7bc7\u8bba\u6587 (Cheng et al. 2020) \u4f7f\u7528\u5bf9\u6297\u6027\u8bc4\u8bba\u5bb6\u6765\u5f3a\u5236\u8868\u793a\u4ece\u4e3b\u9898\u8f6c\u79fb\u5230\u4e3b\u9898\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5bf9\u6297\u6027\u65b9\u6cd5\u53ef\u7528\u4e8e\u5212\u5206\u6f5c\u5728\u7a7a\u95f4\u3002\u6700\u540e\uff0c\u6211\u5c06\u63d0\u5230\u89c4\u8303\u5316\u6d41\u6a21\u578b\u7684\u4f7f\u7528\u3002\u6807\u51c6\u5316\u6d41\u6a21\u578b\u975e\u5e38\u5de7\u5999\uff1a\u5b83\u4eec\u4f7f\u7528\u53ef\u9006\u795e\u7ecf\u7f51\u7edc\u5b66\u4e60\u6f5c\u5728\u7a7a\u95f4\u3002\u5b66\u4e60\u975e\u5e38\u7b80\u5355\uff1a\u4f60\u76f4\u63a5\u6700\u5927\u5316\u6570\u636e\u7684\u53ef\u80fd\u6027\uff0c\u52a0\u4e0a\u5bf9\u795e\u7ecf\u7f51\u7edc\u96c5\u53ef\u6bd4\u7684\u6821\u6b63\u2014\u2014\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u53ea\u4f7f\u7528\u4f53\u79ef\u4fdd\u6301\u53d8\u6362\u6765\u6446\u8131\u96c5\u53ef\u6bd4\u3002\u5728\u6211\u770b\u6765\uff0c\u5b83\u4eec\u6bd4 VAE \u66f4\u4e0d\u6311\u5254\u3002\u5b83\u4eec\u975e\u5e38\u7075\u6d3b\uff0c\u6211\u5f88\u4e50\u610f\u770b\u5230\u5b83\u4eec\u88ab\u66f4\u591a\u5730\u4f7f\u7528\u2014\u2014\u636e\u6211\u6240\u77e5\uff0cpi-VAE \u662f\u7b2c\u4e00\u7bc7\u5728\u795e\u7ecf\u79d1\u5b66\u80cc\u666f\u4e0b\u4f7f\u7528\u6d41\u6a21\u578b\u7684\u8bba\u6587\uff08\u5c3d\u7ba1\u4ee5\u6709\u9650\u7684\u65b9\u5f0f\uff09\u3002\u6807\u51c6\u5316\u6d41\u6a21\u578b\u786e\u5b9e\u6709\u4e00\u4e9b\u9700\u8981\u9996\u5148\u89e3\u51b3\u7684\u91cd\u5927\u9650\u5236\uff08\u4e0d\u80fd\u76f4\u63a5\u6a21\u62df\u4e0d\u8fde\u7eed\u5206\u5e03\uff0c\u6f5c\u5728\u7a7a\u95f4\u4e0e\u89c2\u5bdf\u5927\u5c0f\u76f8\u540c\uff09\u3002\u54ea\u79cd\u65b9\u6cd5\u6700\u9002\u5408\u7528\u4e8e\u60a8\u7684\u6570\u636e\uff1f\u5f88\u96be\u8bf4\u3002\u5927\u591a\u6570\u8bba\u6587\u90fd\u662f\u56f4\u7ed5\u6df1\u5165\u4e86\u89e3\u7279\u5b9a\u6570\u636e\u96c6\u800c\u6784\u5efa\u7684\uff0c\u5e76\u4e14\u51e0\u4e4e\u6ca1\u6709\u7cfb\u7edf\u5730\u8bc4\u4f30\u54ea\u79cd\u65b9\u6cd5\u6700\u6709\u6548\u4ee5\u53ca\u4f55\u65f6\u6700\u6709\u6548\uff08\u66f4\u4e0d\u7528\u8bf4\u8fd0\u884c\u65f6\u95f4\u548c\u8ba1\u7b97\u9700\u8981\u8c03\u6574\u591a\u5c11\u4e2a\u65cb\u94ae\uff09\u3002 Chethan Pandarinath \u5728\u4eca\u5e74\u7684 CoSyNe \u4e0a\u516c\u5e03\u4e86 Neural Latents \u57fa\u51c6\u3002\u6211\u662f\u8fd9\u4e2a\u60f3\u6cd5\u7684\u5fe0\u5b9e\u7c89\u4e1d\uff0c\u4e00\u65e6\u5b83\u53d1\u5e03\uff0c\u6211\u5c31\u4f1a\u5f88\u9ad8\u5174\u5730\u505a\u51fa\u8d21\u732e\u3002\u60a8\u5e94\u8be5\u5c1d\u8bd5\u4ec0\u4e48\u65b9\u6cd5\u6765\u5904\u7406\u60a8\u7684\u6570\u636e\uff1f\u4e0a\u9762\u5206\u7c7b\u4e2d\u5217\u51fa\u7684\u5927\u591a\u6570\u65b9\u6cd5\u90fd\u4e0d\u662f\u5373\u63d2\u5373\u7528\u7684\u4e8b\u52a1\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u60a8\u662f\u4e00\u540d\u5b9e\u9a8c\u8005\u5e76\u4e14\u60a8\u4e0d\u60f3\u6d6a\u8d39\u5927\u91cf\u65f6\u95f4\u6765\u505a\u67d0\u4e8b\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4ee5\u4e0b\u4e4b\u4e00\uff1a\u7ebf\u6027\u52a8\u529b\u7cfb\u7edf (LDS) \u548c\u5bfc\u6570\uff0c\u5305\u62ec\u5207\u6362\u3001\u6cca\u677e\u3001\u5faa\u73af\u3001\u548c Linderman \u5b9e\u9a8c\u5ba4 ssm \u5305\u4e2d\u7684\u975e\u7ebf\u6027\u6620\u5c04\u53d8\u4f53\u3002\u4f18\u79c0\u7684\u6559\u7a0b\u3002 LFADS\uff0c\u5b83\u5728 Tensorflow\u3001PyTorch \u548c jax \u4e2d\u6709\u5b9e\u73b0\u3002\u53e6\u8bf7\u53c2\u9605 AutoLFADS\uff0c\u4e86\u89e3\u53ef\u4ee5\u5728\u4e91\u4e2d\u81ea\u52a8\u641c\u7d22\u8d85\u53c2\u6570\u7684\u53d8\u4f53\u3002\n\u8fd9\u662f\u6838\u5fc3\u95ee\u9898\u4e4b\u4e00\uff1a2018 \u5e74\u53ef\u80fd\u662f\u65b0\u6a21\u578b\u6700\u5927\u7684\u4e00\u5e74\uff08\u57fa\u4e8e\u6211\u770b\u8fc7\u7684\u5206\u7c7b\u6cd5\uff09\u3002\u8fd9\u4e5f\u662f\u673a\u5668\u5b66\u4e60\u7ba1\u9053\u53d1\u751f\u5de8\u5927\u53d8\u5316\u7684\u4e00\u5e74\uff1aTheano \u5373\u5c06\u63a8\u51fa\uff0cTF2.0 \u5c1a\u672a\u63a8\u51fa\uff0cPyTorch \u53d1\u5c55\u8fc5\u901f\u3002\u8fd9\u91cc\u8ba8\u8bba\u7684\u8bb8\u591a\u65b9\u6cd5\u90fd\u5728 github \u5b58\u50a8\u5e93\u4e2d\uff0c\u661f\u6570\u4e0d\u5230\u5341\uff0c\u5e76\u4e14\u4ec5\u9002\u7528\u4e8e\u65e7\u7248\u672c\u7684 CUDA \u4e0a\u7684 TF\u3001PyTorch \u6216 Theano \u7684\u8fc7\u65f6\u7248\u672c\u3002\u8ba9\u5b83\u4eec\u8fd0\u884c\u53ef\u80fd\u610f\u5473\u7740\u5728 nvidia-docker \u5185\u90e8\u8fd0\u884c\u3002\u8fdb\u53e3\u53cd\u91cd\u529b\u8fd9\u4e0d\u662f\u3002\u8fd9\u662f\u4e00\u6761\u524d\u8fdb\u7684\u9053\u8def\uff1a\u5e94\u8be5\u4f7f\u7528 nvidia-docker\u3001\u6346\u5305\u7ebf\u548c\u53e3\u9999\u7cd6\u5bf9\u73b0\u6709\u65b9\u6cd5\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\uff08\u4e0a\u56fe\uff09\uff0c\u7136\u540e\u53ef\u4ee5\u9009\u62e9\u6700\u6709\u524d\u9014\u7684\u65b9\u6cd5\u6765\u4fdd\u5b58\u5728\u4e00\u4e2a\u6709\u636e\u53ef\u67e5\u7684\u5305\u88c5\u5185\u3002\u8be5\u5305\u53ef\u4ee5\u4f7f\u7528\u4e0e sklearn \u76f8\u540c\u7684\u7ea6\u5b9a\uff08Elephant \u6709\u4e00\u4e2a\u56f4\u7ed5\u6b64\u62bd\u8c61\u6784\u5efa\u7684 GPFA \u7684\u4f18\u96c5\u5b9e\u73b0\uff09\u3002\u5b83\u5e94\u8be5\u9009\u62e9\u4e00\u4e2a\u6846\u67b6\uff08\u53ef\u80fd\u662f PyTorch\uff09\u5e76\u627f\u8bfa\u4f7f\u7528\u6301\u7eed\u96c6\u6210\u7b49\u65b9\u6cd5\u6765\u7ef4\u62a4\u8fd9\u4e9b\u65b9\u6cd5\u3002\u6b64\u5916\uff0c\u5b83\u5e94\u8be5\u53ef\u4ee5\u901a\u8fc7\u4e91\u5e73\u53f0\u4f7f\u7528\uff0c\u4f8b\u5982\u901a\u8fc7 NeuroCAAS\u3002\u8fd9\u5c06\u5927\u5927\u589e\u52a0\u66f4\u590d\u6742\u7684\u5206\u6790\u65b9\u6cd5\u7684\u8303\u56f4\u3002", "note_en": "It\u2019s become commonplace to record from hundreds of neurons simultaneously.  If past trends extrapolate, we might commonly record 10k neurons by 2030. What are we going to do with all this data?\n To deal with a 14-dimensional space, visualize a 3D space and say  fourteen to yourself very loudly. Everyone does it. \u2014 Geoffrey Hinton\n Neural dynamics tend to be lower-dimensional than the number of neurons recorded would suggest \u2013  Humphries (2020) reports 10X to 100X compression depending on the area and task. Humphries suggests, with the strong principle of neural dimensionality reduction, that dimensionality reduction can show us the  true underlying signal embodied by the neural circuit. Even if we don\u2019t fully believe in this strong principle \u2013 it\u2019s certainly contentious among vision researchers \u2013 many subscribe to the weak principle: the smaller, temporally smoother, and less noisy subspace can be easier to understand than the raw data.\n   Here, I present taxonomies of unsupervised methods in neural data analysis, identify some exciting trends in the literature, and show some key gaps \u2013 a research roadmap for the next few years.\n  Why do we care about dimensionality reduction in neuroscience? Let\u2019s count the ways (roughly sorted by ambition, or from weak principle to strong principle):\n Compression: there are practical computational reasons to compress the data down to a few dozens of dimension rather than a few hundreds \u2013 i.e. to save memory and processing.\n Visualization: humans are not good at visualizing more than 2 or 3 dimensions. Compressing information down to a handful of meaningful dimensions makes it more feasible to plot them, and understand the factors of variations in the data visually.\n Denoising: if we want to understand what happens during single trials, we need to denoise the data. If 100 neurons are 100 independent manifestations of the same latent variable, we can boost the signal-to-noise ratio by a factor \u221a100 = 10 by averaging. Dimensionality reduction flexibly averages multiple overlapping realizations of the same data to achieve a boost in signal-to-noise ratio.\n Generate fake data: many dimensionality reduction methods are valid generative models, and we can use them generate fake neural data, for instance to benchmark spike sorting and calcium imaging signal processing pipelines.\n Relating to behaviour: the noisy, high-dimensional neural data is hard to relate to the behaviour of the animal, which is often what we care about in the end. Compressing the info into to a lower-dimensional subspace can make it easier to relate to the behaviour.\n Understanding computation: the latent space may represent interesting aspects of the neural computation invisible in the raw data, for example, line attractor or rotational dynamics. The dimensionality-reduced latent space can help uncover those hidden computations.\n Untangling latent factors: perhaps most ambitiously, we want to identify latent factors which  cause the variation in the data. Most dimensionality reduction methods don\u2019t directly capture causal mechanisms \u2013 meaning that each logical dimension may capture several causal mechanisms. But some dimensionality reduction methods  aspire to untangle independent causes \u2013 with linear ICA (independent component analysis) perhaps being the most well known example. Standard disclaimer: causal inference is hard. Be skeptical of causal claims. This is an active area of research.\n  Given these diverse analysis objectives, we can compile a canonical model which covers a wide range of dimensionality reduction techniques.\n   Conceptually, we have a generative model which maps latent factors  z(t) to neural observations  x(t) via a mapping function  f and a noise model. The latent factors evolve according to their dynamics  D. A central goal of the dimensionality reduction technique is learn an inference function  \u03c6 which maps neural observations  x(t) to latent factors  z(t). This inference function could be as simple as matrix multiplication or as complex as an implicit function implemented by a multi-step optimization procedure.\n To place some stakes in the ground, let\u2019s see how these different components interact in some popular models that you might have heard of:\n PCA: In Principal Component Analysis (PCA), the mapping function  f is an instantaneous linear function and the noise is Gaussian (in the probabilistic extension of PCA). The dynamics are not explicitly modeled. The inference function is the matrix inverse of the mapping function\n ICA: In Independent Component Analysis (ICA), the class of mapping functions is the same as in PCA, but during learning, the mapping function  \u03c6 is constrained that the latent space  z(t) is factorized into independent sources.\n GPFA: In Gaussian Process Factor Analysis (GPFA), the mapping function is again a linear function followed by Gaussian noise, but now the dynamics are explicitly modeled using a independent Gaussian Process (GP) prior. You can think of this as imposing that the latent variables vary smoothly over time. The inference is done through closed form GP inference with Expectation Maximization to learn the hyperparameters\n LFADS: In Latent Factor Analysis via Dynamical Systems (LFADS), the dynamics are given by an RNN, while the mapping function is linear and the noise can be Gaussian or Poisson. The RNN implicity imposes smooth dynamics. Inference is done via variational inference in a variational autoencoder (VAE) framework.\n Perhaps the most important moving piece is the dynamics. To infer the latent structure of neural activity at a single trial level, with currently existing recording technology, there just isn\u2019t enough neurons and SNR to infer latents at a single-trial level: we have to flexibly smooth through time. Complex dynamics priors require sophisticated, probabilistic methods for inference \u2013 each with their tradeoffs in terms of speed, simplicity of implementation, and generality \u2013 which is why we\u2019ve seen an explosion of methods in the last 5 years.\n  Now that we\u2019ve seen some examples of dimensionality reduction methods in the wild, let\u2019s look at some published taxonomies that try to bring some order into the chaos. I\u2019ve annotated these taxonomies with the components of the canonical model (in red) above for reference. An early taxonomy is in the now classic review  Cunningham and Yu (2014):\n  We see the diversity of goals represented in this early work. Much of the research in the following years has been focused on building sophisticated new methods of inference that assume explicit generative and dynamics models. Dynamics allow models to integrate information over time, which makes it possible to do single-trial inference. John Cunningham presented a new taxonomy of these models in a talk circa 2018:\n  Apologies for the low quality, it was extracted from a photo of the key slide\n This updated table is a bit hard to parse, but I find it gives a lot of historical context and genealogy: we see early work on tractable models in the left column (hidden Markov models, linear dynamical systems, switching LDS) evolved into more sophisticated models in the middle and right columns.\n With sophisticated models comes sophisticated inference techniques;  Memming Park provided an excellent summary in a 2020 CoSyNe talk:\n  Many of these methods were compiled very recently into yet another taxonomy from  Hurwitz el al. (2021), synthesizing some of the earlier work in this space with cutting-edge methods.\n  The acronyms are a bit non-descript, but you can often guess what each method is about by looking at groups of letters within the acronyms:\n GP: Gaussian Process. Gaussian processes are often used to impose temporal smoothness on latent variables, and more rarely to model nonlinear tuning curves.\n LDS: Linear dynamical system. The Kalman filter is an example of a model with an underlying linear dynamical system.\n SLDS: Switching LDS. A model which can switch between 2 or more latent linear dynamics depending on a discrete variable.\n P*: Poisson. A starting P in an acronym often refers to a Poisson noise model.\n VAE: Variational auto-encoder. A latent variable model which compresses observations to latents using an encoder down to a tractable distribution (frequently a multivariate Gaussian) and which is fit through variational inference.\n  You\u2019ll notice that these taxonomies don\u2019t explicitly address how behaviour and experimental conditions are integrated into each model. Some of the most interesting developments in this field relate to explicitly integrating behaviour into dimensionality reduction.\n  Let\u2019s consider a more general version of the dimensionality reduction model, which integrates behaviour, as well as external covariates corresponding to experimental conditions. Here, we have behaviour time series  u(t) which are parallel to neural time series  x(t).  u(t) could consist of time series of arm position in a reaching task, PCs of a video of a mouse\u2019s face, or experimental conditions, for example. The mapping functions and generative models now operate on the concatenation of these times series \u2013 the latent space  z(t) is shared between behaviour and neural data. Here, the distinction between regression of behaviour onto brain data (or vice versa) and dimensionality reduction is blurred: it\u2019s something in the middle. This is the mental model I\u2019m using when considering the integration of behaviour and neural data, but be aware that there are a lot of different ways of integrating behaviour and neural data that look superficially different.\n  LDA: Linear discriminant analysis. Classic technique. Finds a set of dimensions which can maximally discriminate a set of classes. No dynamics.\n CCA: Canonical correlation analysis. Classic technique. Finds a common linear subspace between two different sets of matrices. Inference and mapping both down through linear functions. No dynamics\n Demixed component analysis: Performs an ANOVA-like or tensor-factorization-like decomposition of the data in terms of different levels of conditions and their interactions. No dynamics, averaged trials only.\n  LFADS: Latent factor analysis via dynamical systems. Can integrate behavioural and condition information as side information to the latent space. Single-trial, RNN dynamics, explicit noise model, variational inference (VAE).\n PSID: Preferential subspace identification. Kalman-filter-inspired model which explicitly partitions the latent space into behaviour-only, neural-only, and neural-and-behaviour subsets. Single trial, linear dynamics, gaussian noise model, Kalman-filter-based inference (dynamic programming).\n  pi-VAE: (not covered in other reviews, published late 2020). Poisson interpretable variational auto-encoder. Embeds the latent information about conditions and behaviour as part of a VAE-like hierarchical generative model. Inspired by recent work fusing nonlinear ICA and VAEs ( Khemakhem et al. 2019), uses flexible injective functions (GIN, a variant of RealNVP) as generative models to untangle latent causes (up to permutations). No dynamics.\n    As you might have infered from the previous paragraph, I\u2019m excited to see the progress in models which explicitly integrate behaviour. Dimensionality reduction algorithms are often sanity-checked on known low-dimensional systems \u2013 e.g. the Van der Pol oscillator, the Lorenz system, balanced E-I networks. When they\u2019re deployed in the wild, however, evaluating them often boils down to matching them to known behaviour and experimental conditions. In essence, the behaviour  is the ground truth. In this context, it is a missed opportunity to not explicitly model behaviour.\n You may be asking yourself: how does a latent variable model which integrates behaviour and neural data any different than simply regressing behaviour against neural data? One answer is that there\u2019s a shared low-dimensional bottleneck, and the structure of that low-dimensional bottleneck can reveal something interesting about neural computations and behaviours. Consider for instance  Wiltschko et al. (2015), who modeled the spontaneous behaviour of mice with an autoregressive hidden Markov model (AR-HMM): the mouse is assumed to follow different linear dynamics determined by a discrete state (e.g. walk, pause, low rear, etc.). This is an example of a  switching linear dynamical system (SLDS), which has also been frequently applied to neural data.\n  Now imagine the same model, but this time applied to both neural and behavioural data. The inferred states would not only reveal behavioural states which are visible through an overhead camera, but also neural states like arousal and attention. In fact, the goal of PSID is to partition the low-dimensional bottleneck into behaviour-only, neural-only, and behaviour-and-neural dimensions. An ideal model would add a few more layers of indirection (e.g. discrete states, different nonlinear  plants for the behavioural and neural components, switching dynamics) to the basic plan formulated in PSID. Think of it as interpretable nonlinear CCA (canonical correlation analysis) with dynamics.\n What can we hope to get out of such models? One of the most surprising findings in mouse vision in the past few years is the discovery of numerous coding dimensions for facial behaviour in visual cortex ( Stringer et al. (2019)). At the heart of this finding is a reduced rank regression which finds a large amount of shared variance between face behaviour and visual responses (rank 16!). This is the kind of research that redefines our understanding of the relationship between neural activity and behaviour, and I expect we\u2019ll see a lot of this as tools mature.\n   When I was first looking into dimensionality reduction techniques, it struck me that most techniques sensibly used simple, linear functions  f to map from latent variables  z(t) to  x(t). I was confused by some methods\u2019 use of powerful, nonlinear decoding functions  f. If the goal is to find a latent subspace which is easy to interpret, wouldn\u2019t it be better to have a simple mapping from latents to data \u2013 something similar to the trusted LNP (linear-nonlinear-Poisson) model?\n The  P-GPLVM paper (Anqi Wu et al. 2017) convinced me otherwise. To decode an animal\u2019s position on a linear track from the hippocampus with a linear decoding function, you would need a high-dimensional latent space. If your track is one meter long, and each place field is about 20 cm wide, then you\u2019d need perhaps 5 dimensions (=100 cm / 20 cm) to represent all the place fields. But there\u2019s only one logical dimension (the linear position on the track)! Adding nonlinearities in the decoding (in the style of generalized additive models) fixes this deficiency.\n  We\u2019re also seeing efforts to fuse signal processing pipelines and dimensionality reduction. Batty et al. (2019) present a hierarchical model ( BehaveNet) to infer latents directly from images of a mouse. Relatedly,  VaLPACa (variational ladders for parallel auto-encoding of calcium imaging data) applies a hierarchical variant of LFADS to directly extract latent variables from calcium images. Fusing the signal processing component with the latent variable model often means using a rich nonlinear decoding model.\n  Thus, we\u2019re likely to see more papers with rich decoding models, whether they be GP, RNNs, or invertible neural networks.\n  This article started a few months ago when I wanted to have the tools to understand Memming\u2019s taxonomy and the methods highlighted \u2013 so I took a course on  deep unsupervised learning to have the right background. It turns out that modern unsupervised learning has influenced dimensionality reduction in neuroscience in several visible ways: using RNNs to represent complex dynamics, and inference using BBVI and VAE techniques. However, there are a lot of other advances in unsupervised learning (see curriculum for the deep unsupervised learning course) which have not yet made a big dent in dimensionality reduction in neuroscience .\n Self-supervised learning can learn good, low-dimensional representations without explicitly learning a generative model, for instance using contrastive techniques.  In this paper from researchers at Apple (Cheng et al. 2020), they find excellent representations for EEG using a contrastive objective. This kind of approach is helpful to find good low-dimensional representations of messy signals, including, for instance, ECoG and local field potentials.\n  Adversarial networks is another area which contains many fruitful ideas. The same paper (Cheng et al. 2020) uses an adversarial critic to enforce that the representation  transfers from subject to subject. Indeed, adversarial methods can be used to partition the latent space.\n Finally, I\u2019ll mention the use of normalizing flow models. Normalizing flow models are pretty slick: they learn a latent space using an invertible neural network. Learning is dead simple: you directly maximize the likelihood of the data, plus a correction for the Jacobian of the neural net \u2013 in some cases, you can even  get rid of the Jacobian by using only volume-preserving transforms. They\u2019re a lot less finicky to make work than VAEs, in my humble opinion. They\u2019re surprisingly flexible and I\u2019d love to see them used more \u2013 to the best of my knowledge, pi-VAE is the first paper to use flow models in the context of neuroscience (albeit in a limited fashion). Normalizing flow models do have some significant limitations that will need to be worked around first (cannot directly model discontinuous distributions, latent space the same size as the observations).\n   What method is  best to use on your data? It\u2019s hard to tell. Most papers are built around gaining insight into a specific dataset, and there has been little systematic appraisal of which methods work best and when (not to mention runtime and counting how many knobs need to be tweaked). Chethan Pandarinath unveiled the  Neural Latents benchmark at this year\u2019s CoSyNe. I\u2019m a big fan of this idea and will happily contribute as soon as it\u2019s released.\n  What method should you try on your data? Most of the methods listed in the taxonomies above are not plug-and-play affairs. In practice, if you\u2019re an experimentalist and you don\u2019t want to waste a ton of time getting something to work, you\u2019ll pick from one of:\n Linear dynamical systems (LDS) and derivatives, including switching, Poisson, recurrent, and nonlinear mapping variants in the ssm package from the Linderman lab.  Excellent tutorials.\n LFADS, which has implementations in  Tensorflow,  PyTorch and  jax. See also  AutoLFADS for a variant that can automatically search through hyperparameters in the cloud.\n Here\u2019s one of the core problems: 2018 was perhaps the biggest year for new models (based on the taxonomies I\u2019ve looked at). It\u2019s also a year of huge change in machine learning pipelines: Theano was on its way out, TF2.0 wasn\u2019t out yet, and PyTorch was evolving rapidly. Many of the methods discussed here are in github repos with less than ten stars, and only work on obsolete versions of TF, PyTorch or Theano, on old versions of CUDA. Getting them to run will likely mean running inside of nvidia-docker.  import antigravity this is not.\n Here\u2019s a path forward: benchmarking (above) should be done with existing methods using nvidia-docker, bale wire and chewing gum, and the most promising methods can then be selected for preservation inside of a well-documented package. That package could use the same conventions as sklearn (Elephant has an elegant implementation of GPFA built around this abstraction). It should pick one framework (probably PyTorch) and commit to maintaining the methods using, e.g. continuous integration. Furthermore, it should be available through a cloud platform, for instance through  NeuroCAAS. This would vastly increase the reach of more sophisticated analysis methods.", "posttime": "2021-07-29 21:54:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf,reduction,\u6a21\u578b", "title": "\u795e\u7ecf\u6570\u636e\u5206\u6790\u4e2d\u7684\u964d\u7ef4", "title_en": "Dimensionality reduction in neural data analysis", "transed": 1, "url": "https://xcorr.net/2021/07/26/dimensionality-reduction-in-neural-data-analysis/", "via": "", "real_tags": ["\u795e\u7ecf", "reduction", "\u6a21\u578b"]}, {"category": "", "categoryclass": "", "imagename": "b3f7225cfab76c2e2f8d8656d1331243.jpg", "infoid": 1070255, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6089\u5c3c\uff0c7 \u6708 29 \u65e5\uff08\u8def\u900f\u793e\uff09\u2014\u2014\u5728\u8fd9\u4e2a\u62e5\u6709 600 \u4e07\u4eba\u53e3\u7684\u57ce\u5e02\u5468\u56db\u516c\u5e03\u7684 COVID-19 \u75c5\u4f8b\u6bcf\u65e5\u589e\u52a0\u521b\u7eaa\u5f55\u4e14\u5dde\u5f53\u5c40\u8868\u793a\u75ab\u60c5\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u4e4b\u540e\uff0c\u6fb3\u5927\u5229\u4e9a\u519b\u65b9\u5c06\u5e2e\u52a9\u5728\u6089\u5c3c\u5b9e\u65bd\u5c01\u9501\u3002\u6fb3\u5927\u5229\u4e9a\u6700\u5927\u57ce\u5e02\u7684\u5c01\u9501\u589e\u52a0\u4e86\u603b\u7406\u65af\u79d1\u7279\u83ab\u91cc\u68ee\u7684\u538b\u529b\uff0c\u4ed6\u73b0\u5728\u5728\u6c11\u610f\u8c03\u67e5\u4e2d\u843d\u540e\uff0c\u5e76\u52a0\u5267\u4e86\u5bf9\u6fb3\u5927\u5229\u4e9a 2 \u4e07\u4ebf\u6fb3\u5143\uff081.5 \u4e07\u4ebf\u7f8e\u5143\uff09\u7ecf\u6d4e\u53ef\u80fd\u9677\u5165\u8870\u9000\u7684\u62c5\u5fe7\u3002\u5c3d\u7ba1\u81ea\u9ad8\u4f20\u67d3\u6027\u4e09\u89d2\u6d32\u75c5\u6bd2\u7206\u53d1\u4ee5\u6765\u6089\u5c3c\u5ef6\u957f\u4e86\u5c01\u9501\u65f6\u95f4\uff0c\u4f46\u8be5\u5e02\u5728 24 \u5c0f\u65f6\u5185\u8bb0\u5f55\u4e86 239 \u4f8b\u65b0\u7684\u672c\u5730\u611f\u67d3\u51a0\u72b6\u75c5\u6bd2\u75c5\u4f8b\uff0c\u8fd9\u662f\u81ea\u5927\u6d41\u884c\u5f00\u59cb\u4ee5\u6765\u7684\u6700\u5927\u5355\u65e5\u589e\u5e45\u3002\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u5dde\u957f\u683c\u62c9\u8fea\u65af\u00b7\u8d1d\u96f7\u5409\u514b\u5229\u5b89 (Gladys Berejiklian) \u8bf4\uff1a\u201c\u9274\u4e8e\u793e\u533a\u4e2d\u5177\u6709\u4f20\u67d3\u6027\u7684\u4eba\u6570\uff0c\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u60c5\u51b5\u5728\u597d\u8f6c\u4e4b\u524d\u53ef\u80fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\u201d\u6089\u5c3c\u662f\u8be5\u5dde\u7684\u9996\u5e9c\u3002 Berejiklian \u8bf4\uff0c\u6700\u8fd1\u4e00\u6b21\u75ab\u60c5\u9020\u6210\u7684\u6b7b\u4ea1\u4eba\u6570\u589e\u52a0\u5230 13 \u4eba\uff0c\u5168\u56fd\u5171\u6709 921 \u4eba\u3002 Berejiklian \u8868\u793a\uff0c\u51e0\u4e4e\u6ca1\u6709\u8ff9\u8c61\u8868\u660e\u9650\u5236\u51cf\u5c11\u611f\u67d3\u7684\u8ff9\u8c61\uff0c\u4f46\u5c06\u5728\u6089\u5c3c\u7684\u897f\u5357\u90e8\u548c\u897f\u90e8\u5730\u533a\u5b9e\u65bd\u65b0\u7684\u9650\u5236\u63aa\u65bd\uff0c\u90a3\u91cc\u7684\u5927\u591a\u6570\u4eba\u6b63\u5728\u53d1\u73b0 COVID-19 \u75c5\u4f8b\u3002\u90a3\u91cc\u7684\u5c45\u6c11\u5c06\u88ab\u8feb\u5728\u6237\u5916\u6234\u53e3\u7f69\uff0c\u5e76\u5f85\u5728\u79bb\u5bb6\u4e94\u516c\u91cc\uff08\u4e09\u82f1\u91cc\uff09\u4ee5\u5185\u3002\n\u968f\u7740\u5468\u4e94\u5f00\u59cb\u5b9e\u65bd\u66f4\u4e25\u683c\u7684\u9650\u5236\uff0c\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u8b66\u65b9\u8868\u793a\u5df2\u8981\u6c42 300 \u540d\u519b\u4e8b\u4eba\u5458\u5e2e\u52a9\u6267\u884c\u5c01\u9501\u4ee4\u3002\u56fd\u9632\u90e8\u957f\u5f7c\u5f97\u00b7\u8fbe\u987f\u8bf4\uff0c\u8fd9\u4e9b\u4eba\u5458\u5c06\u4e8e\u5468\u4e94\u90e8\u7f72\uff0c\u5e76\u5c06\u5728\u4e0b\u5468\u5f00\u59cb\u534f\u52a9\u8b66\u65b9\u786e\u4fdd\u9075\u5b88\u9650\u5236\u3002\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u5360\u6fb3\u5927\u5229\u4e9a\u7ecf\u6d4e\u7684\u4e09\u5206\u4e4b\u4e00\u4ee5\u4e0a\u3002\u8054\u90a6\u8d22\u957f\u4e54\u4ec0\u00b7\u5f17\u83b1\u767b\u4f2f\u683c (Josh Frydenberg) \u8868\u793a\uff0c\u4ed6\u9884\u8ba1\u56fd\u6c11\u7ecf\u6d4e\u5c06\u5728 9 \u6708\u5b63\u5ea6\u840e\u7f29\uff0c\u4f46\u80fd\u5426\u907f\u514d\u6280\u672f\u6027\u8870\u9000\u5c06\u53d6\u51b3\u4e8e\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u80fd\u5426\u907f\u514d\u66f4\u957f\u65f6\u95f4\u7684\u5c01\u9501\u3002 \u201c\u5c31 12 \u6708\u5b63\u5ea6\u800c\u8a00\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u53d6\u51b3\u4e8e\u6211\u4eec\u6700\u5927\u7684\u5dde\u7ecf\u6d4e\u4f53\u65b0\u5357\u5a01\u5c14\u58eb\u5dde\u5728\u6218\u80dc\u8fd9\u79cd\u75c5\u6bd2\u65b9\u9762\u7684\u6210\u529f\u7a0b\u5ea6\uff0c\u201d\u5f17\u83b1\u767b\u4f2f\u683c\u544a\u8bc9\u6fb3\u5927\u5229\u4e9a\u5e7f\u64ad\u516c\u53f8\u3002 Berejiklian \u8868\u793a\u9700\u8981\u4fdd\u6301\u9650\u5236\u5728\u8f89\u745e (PFE.N)/BioNTech (22UAy.DE) \u75ab\u82d7\u4f9b\u5e94\u7d27\u5f20\u7684\u60c5\u51b5\u4e0b\uff0c\u6089\u5c3c\u7684\u75ab\u82d7\u63a5\u79cd\u4eba\u6570\u592a\u5c11\uff0c\u6fb3\u5927\u5229\u4e9a\u66fe\u5e0c\u671b\u4e3a 60 \u5c81\u4ee5\u4e0b\u7684\u6240\u6709\u4eba\u63a5\u79cd\u75ab\u82d7\u3002\u5df2\u6566\u4fc3\u6089\u5c3c\u7684\u6240\u6709\u6210\u5e74\u4eba\u5bfb\u6c42\u963f\u65af\u5229\u5eb7 (AZN.L) \u75ab\u82d7\u3002\u6709\u4e9b\u4eba\u4ee5\u7f55\u89c1\u7684\u8840\u51dd\u5757\u4e3a\u7531\u8868\u793a\u4e0d\u60c5\u613f\uff0c\u5b81\u613f\u7b49\u5f85\u51e0\u4e2a\u6708\uff0c\u56e0\u4e3a\u9884\u8ba1\u6fb3\u5927\u5229\u4e9a\u5c06\u6536\u5230\u989d\u5916\u7684\u8f89\u745e\u4f9b\u5e94\u3002 Renju Jose \u548c Colin Packham \u5728\u582a\u57f9\u62c9\u62a5\u9053\uff1b Xihao Jiang \u5728\u4e1c\u4eac\u7684\u8865\u5145\u62a5\u9053\uff1b Michael Perry\u3001Lincoln Feast \u548c Timothy Heritage \u7f16\u8f91", "note_en": "SYDNEY, July 29 (Reuters) - Australia&#39;s military will help enforce a lockdown in Sydney after the city of 6 million posted a record daily rise in COVID-19 cases on Thursday and state authorities said the outbreak was likely to get worse.\n The lockdown of Australia&#39;s biggest city has increased pressure on Prime Minister Scott Morrison, who is now trailing in opinion polls, and heightened concern that Australia&#39;s A$2 trillion ($1.5 trillion) economy could slide into recession.\n Despite an extended lockdown in Sydney since an outbreak of the highly infectious Delta variant, 239 new locally acquired coronavirus cases were recorded in the city over a 24-hour period, the biggest daily rise since the pandemic began.\n &#34;We can only assume that things are likely to get worse before they get better given the quantity of people infectious in the community,&#34; said Gladys Berejiklian, the premier of New South Wales state, of which Sydney is the capital.\n Berejiklian said one new death took the toll from the latest outbreak to 13 and the national total was now 921.\n With little sign that of restrictions reducing infections, Berejiklian said new curbs would be imposed on the southwestern and western areas of Sydney where the majority of COVID-19 cases are being found.\n Residents there will be forced to wear masks outdoors and to stay within five km (three miles) of their homes.\n With even tighter restrictions set to begin on Friday, New South Wales Police said it had asked for 300 military personnel to help enforce lockdown orders.\n The personnel will deploy on Friday, Defence Minister Peter Dutton said, and will begin assisting police with ensuring compliance with restrictions next week.\n   New South Wales accounts for over a third of Australia&#39;s economy. Federal Treasurer Josh Frydenberg said he expected the national economy to shrink in the September quarter but the ability to avoid a technical recession would depend on whether New South Wales can avoid a longer lockdown.\n &#34;With respect to the December quarter, that does depend to a large extent how successful New South Wales, our largest state economy, is in getting on top of this virus,&#34; Frydenberg told the Australian Broadcasting Corp.\n Berejiklian has said restrictions need to remain as too few people in Sydney are vaccinated amid tight supplies of the Pfizer  (PFE.N)/BioNTech  (22UAy.DE) vaccine, with which Australia had hoped to inoculate everyone under 60 years old.\n All adults in Sydney have been urged to seek an AstraZeneca  (AZN.L) vaccine. Some, citing rare blood clots, are reluctant and would prefer to wait several months when Australia is expected to receive additional Pfizer supplies.\n  Reporting by Renju Jose and Colin Packham in Canberra; additonal reporting by Xihao Jiang in Tokyo; Editing by Michael Perry, Lincoln Feast and Timothy Heritage", "posttime": "2021-07-29 21:54:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u589e\u52a0,cases,\u5c01\u9501", "title": "\u968f\u7740\u75c5\u4f8b\u7684\u589e\u52a0\uff0c\u6fb3\u5927\u5229\u4e9a\u519b\u65b9\u5c06\u5e2e\u52a9\u5b9e\u65bd\u6089\u5c3c Covid-19 \u5c01\u9501", "title_en": "Australian military to help enforce Sydney Covid-19 lockdown as cases rise", "transed": 1, "url": "https://www.reuters.com/world/asia-pacific/australia-pm-says-vaccinations-alone-will-not-end-sydneys-covid-19-lockdown-2021-07-28/", "via": "", "real_tags": ["\u589e\u52a0", "cases", "\u5c01\u9501"]}, {"category": "", "categoryclass": "", "imagename": "9cb9f643bc8ff3130ff65873e26dc252.jpg", "infoid": 1070254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u5e74\u6765\uff0c\u8ba1\u7b97\u673a\u8bc1\u660e\u52a9\u624b\u4e00\u76f4\u662f\u6570\u5b66\u4e2d\u4e00\u4e2a\u6709\u8da3\u7684\u5b50\u60c5\u8282\u2014\u2014\u627f\u8bfa\u5c06\u6570\u5b66\u5bb6\u5de5\u4f5c\u65b9\u5f0f\u7684\u6838\u5fc3\u65b9\u9762\u81ea\u52a8\u5316\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\u5bf9\u8be5\u9886\u57df\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u3002\u4f46 6 \u6708\u521d\u5b8c\u6210\u7684\u4e00\u4e2a\u65b0\u7ed3\u679c\uff0c\u6709\u79cd\u83dc\u9e1f\u5728\u5927\u8054\u76df\u4e2d\u9996\u521b\u7684\u611f\u89c9\uff1a\u7ec8\u4e8e\uff0c\u4e00\u4f4d\u8bc1\u660e\u52a9\u624b\u901a\u8fc7\u9a8c\u8bc1\u590d\u6742\u7684\u73b0\u4ee3\u6570\u5b66\u7684\u6b63\u786e\u6027\uff0c\u4e3a\u6570\u5b66\u7814\u7a76\u7684\u524d\u6cbf\u505a\u51fa\u4e86\u771f\u6b63\u7684\u8d21\u732e\u3002\u8bc1\u660e\u3002 \u201c\u8fd9\u8868\u660e\u73b0\u4ee3\u6570\u5b66\u53ef\u4ee5\u5728\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u5f62\u5f0f\u5316\uff0c\u201d\u5251\u6865\u5927\u5b66\u7814\u7a76\u751f Bhavik Mehta \u8bf4\uff0c\u4ed6\u4e3a\u8fd9\u9879\u5de5\u4f5c\u505a\u51fa\u4e86\u8d21\u732e\u3002\u6709\u95ee\u9898\u7684\u8bc1\u660e\u662f\u7531\u6ce2\u6069\u5927\u5b66\u7684 Peter Scholze \u63d0\u51fa\u7684\uff0c\u4ed6\u662f\u4e16\u754c\u4e0a\u6700\u53d7\u5c0a\u656c\u7684\u6570\u5b66\u5bb6\u4e4b\u4e00\u3002\u8fd9\u53ea\u662f\u4ed6\u548c\u54e5\u672c\u54c8\u6839\u5927\u5b66\u7684\u8fbe\u65af\u6c40\u00b7\u514b\u52b3\u68ee (Dustin Clausen) \u591a\u5e74\u6765\u4e00\u76f4\u81f4\u529b\u4e8e\u7684\u540d\u4e3a\u201c\u6d53\u7f29\u6570\u5b66\u201d\u7684\u66f4\u5927\u9879\u76ee\u7684\u4e00\u90e8\u5206\u3002\u4ed6\u4eec\u7684\u76ee\u6807\u662f\u4e3a\u62d3\u6251\u521b\u5efa\u65b0\u7684\u57fa\u7840\uff0c\u7528\u4f5c\u8005\u79f0\u4e4b\u4e3a\u51dd\u805a\u96c6\u7684\u66f4\u901a\u7528\u7684\u5bf9\u8c61\u53d6\u4ee3\u62d3\u6251\u7a7a\u95f4\u7684\u4f20\u7edf\u6982\u5ff5\u2014\u2014\u5176\u4f8b\u5b50\u5305\u62ec\u7403\u4f53\u548c\u751c\u751c\u5708\u3002\u5728\u8fd9\u4e2a\u65b0\u89c6\u89d2\u4e2d\uff0c\u62d3\u6251\u7a7a\u95f4\u88ab\u8ba4\u4e3a\u662f\u7531\u65e0\u6570\u7c98\u5728\u4e00\u8d77\u7684\u5c18\u57c3\u70b9\u7ec4\u88c5\u800c\u6210\u7684\u3002\u8be5\u9879\u76ee\u5305\u62ec\u4e00\u4e2a\u7279\u522b\u91cd\u8981\u4e14\u56f0\u96be\u7684\u8bc1\u660e\uff0c\u8bc1\u660e Scholze \u5728 2019 \u5e74 7 \u6708\u7684\u4e00\u4e2a\u6d88\u8017\u5468\u4e2d\u81ea\u5df1\u8ba1\u7b97\u51fa\u6765\u3002\u5b83\u8868\u660e\uff0c\u5982\u679c\u7528\u538b\u7f29\u96c6\u66ff\u6362\u62d3\u6251\u7a7a\u95f4\uff0c\u79f0\u4e3a\u5b9e\u51fd\u6570\u5206\u6790\u7684\u6570\u5b66\u9886\u57df\u4ecd\u7136\u6709\u6548\u3002 Scholze \u5728\u661f\u671f\u4e00\u5f00\u59cb\u4e86\u8bc1\u660e\u3002\u4ed6\u5b8c\u5168\u5728\u5934\u8111\u4e2d\u5de5\u4f5c\uff0c\u51e0\u4e4e\u6ca1\u6709\u5199\u4e0b\u4efb\u4f55\u4e1c\u897f\uff0c\u66f4\u4e0d\u7528\u8bf4\u4f7f\u7528\u7535\u8111\u4e86\u3002\u5230\u5468\u56db\u4e0b\u5348\uff0c\u4ed6\u51e0\u4e4e\u5df2\u7ecf\u60f3\u901a\u4e86\uff0c\u53ea\u7559\u4e0b\u4e86\u4e00\u4ef6\u4ed6\u505a\u4e0d\u5bf9\u7684\u4e8b\u3002\u4ed6\u4e5f\u611f\u53d7\u5230\u4e86\u5728\u4ed6\u6d3b\u8dc3\u7684\u8bb0\u5fc6\u4e2d\u4fdd\u6301\u5982\u6b64\u590d\u6742\u7684\u4e89\u8bba\u6240\u9700\u7684\u9ad8\u5ea6\u96c6\u4e2d\u7684\u538b\u529b\u3002\u6240\u4ee5\u90a3\u5929\u665a\u4e0a\u4ed6\u548c\u4e00\u4e9b\u670b\u53cb\u5728\u9152\u5427\u653e\u677e\u4e86\u3002\u7b2c\u4e8c\u5929\u65e9\u4e0a\uff0c\u661f\u671f\u4e94\uff0c\u4ed6\u4ed8\u4e86\u94b1\u3002\n\u4f46\u4ed6\u4e5f\u77e5\u9053\u4ed6\u5468\u672b\u6ca1\u6709\u65f6\u95f4\u5de5\u4f5c\uff0c\u8fd9\u8ba9\u5468\u4e94\u6210\u4e3a\u5b8c\u6210\u8bc1\u660e\u7684\u6700\u4f73\u673a\u4f1a\u3002\u60f3\u5230\u8981\u4e0e\u8fc7\u53bb\u4e00\u5468\u4ed6\u5728\u8111\u6d77\u4e2d\u5efa\u7acb\u7684\u4e00\u5207\u5931\u53bb\u8054\u7cfb\uff0c\u7136\u540e\u4e0d\u5f97\u4e0d\u5728\u5468\u4e00\u91cd\u65b0\u5f00\u59cb\uff0c\u8fd9\u8d85\u51fa\u4e86\u4ed6\u7684\u8003\u8651\u3002 \u201c\u6211\u4e0d\u8ba4\u4e3a\u6211\u6709\u80fd\u529b\u5728\u8111\u6d77\u4e2d\u518d\u6b21\u91cd\u5efa\u5b83\uff0c\u201dScholze \u8bf4\u3002\u4e8e\u662f\u4ed6\u901a\u7535\u5e76\u5b8c\u6210\u4e86\u8bc1\u660e\u3002\u4f46\u4e8b\u540e\uff0c\u4ed6\u5e76\u4e0d\u786e\u5b9a\u81ea\u5df1\u6240\u505a\u7684\u662f\u5426\u6b63\u786e\u3002\u539f\u56e0\u4e0d\u4ec5\u4ec5\u662f\u4ed6\u6e05\u9664\u4e86\u6700\u540e\u4e00\u9053\u969c\u788d\u7684\u6726\u80e7\u73af\u5883\u3002\u8bc1\u660e\u662f\u5982\u6b64\u590d\u6742 Scholze \u77e5\u9053\u4ed6\u53ef\u80fd\u6f0f\u6389\u4e86\u4e00\u4e9b\u4e1c\u897f\u3002 \u201c\u8fd9\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u6709\u8bb8\u591a\u6d3b\u52a8\u90e8\u4ef6\u3002\u5f53\u60a8\u6539\u53d8\u8fd9\u4e9b\u53c2\u6570\u4e4b\u4e00\u65f6\uff0c\u5f88\u96be\u77e5\u9053\u54ea\u4e9b\u90e8\u4ef6\u79fb\u52a8\u4e86\u591a\u5c11\uff0c\u201dScholze \u8bf4\u3002\u76f4\u5230 2019 \u5e74 11 \u6708\uff0cScholze \u624d\u62bd\u51fa\u65f6\u95f4\u771f\u6b63\u5199\u4e0b\u8bc1\u660e\u3002\u4e00\u5e74\u540e\uff0c\u4ed6\u8054\u7cfb\u4e86\u4f26\u6566\u5e1d\u56fd\u7406\u5de5\u5b66\u9662\u7684\u6570\u5b66\u5bb6 Kevin Buzzard\uff0c\u4ed6\u4e5f\u662f\u4e00\u4e2a\u540d\u4e3a Lean \u7684\u8bc1\u660e\u52a9\u7406\u9879\u76ee\u7684\u8457\u540d\u4f20\u64ad\u8005\u3002 Scholze \u60f3\u77e5\u9053\u662f\u5426\u6709\u53ef\u80fd\u5c06\u4ed6\u7684\u8bc1\u660e\u8f93\u5165\u5230 Lean \u4e2d\u2014\u2014\u628a\u5b83\u50cf\u8f6f\u4ef6\u7a0b\u5e8f\u4e00\u6837\u53d8\u6210\u4ee3\u7801\u884c\u2014\u2014\u8fd9\u6837\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u9a8c\u8bc1\u5b83\u662f\u5426\u771f\u7684\u6b63\u786e\u3002 Buzzard \u4e0e\u5305\u62ec\u5f17\u83b1\u5821\u5927\u5b66\u535a\u58eb\u540e\u7814\u7a76\u5458 Johan Commelin \u5728\u5185\u7684\u5c11\u6570\u7cbe\u76ca\u793e\u533a\u6210\u5458\u5206\u4eab\u4e86 Scholze \u7684\u8c03\u67e5\u3002 Commelin \u62e5\u6709\u9002\u5408\u8fd9\u4efd\u5de5\u4f5c\u7684\u5b8c\u7f8e\u80cc\u666f\u2014\u2014\u4ed6\u5df2\u7ecf\u4f7f\u7528 Lean \u591a\u5e74\u5e76\u4e14\u719f\u6089\u538b\u7f29\u6570\u5b66\u2014\u2014\u5e76\u4e14\u4ed6\u76f8\u4fe1\u9a8c\u8bc1 Scholze \u7684\u8bc1\u660e\u5bf9\u4e8e\u8bc1\u660e\u52a9\u7406\u5728\u6570\u5b66\u754c\u7684\u5730\u4f4d\u5408\u6cd5\u5316\u6709\u5f88\u5927\u5e2e\u52a9\u3002 \u201c\u80fd\u591f\u5728\u8fd9\u6837\u4e00\u4e2a\u9879\u76ee\u4e0a\u4e0e\u5f7c\u5f97\u5408\u4f5c\u5e76\u9644\u4e0a\u4ed6\u7684\u540d\u5b57\u5bf9\u7cbe\u76ca\u6765\u8bf4\u5c06\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u63a8\u52a8\uff0c\u201dCommelin \u8bf4\u3002\n\u4f46\u4ed6\u4e5f\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u9700\u8981\u4e00\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\uff0c\u8fd9\u8ba9\u4ed6\u72b9\u8c6b\u4e86\u3002 Commelin \u62c5\u5fc3\u4ed6\u53ef\u80fd\u4f1a\u82b1\u8d39\u6240\u6709\u65f6\u95f4\u6765\u9a8c\u8bc1\u8bc1\u660e\uff0c\u6700\u540e\uff0c\u6570\u5b66\u754c\u7684\u5176\u4ed6\u4eba\u53ea\u4f1a\u8038\u8038\u80a9\u3002 \u201c\u6211\u60f3\uff0c\u5982\u679c\u6211\u82b1\u4e24\u5e74\u65f6\u95f4\u7814\u7a76\u8fd9\u4e2a\uff0c\u7136\u540e\u8d70\u51fa\u6211\u7684\u6d1e\u7a74\u8bf4\uff0c\u2018\u8fd9\u5f88\u597d\u2019\uff0c\u4e16\u754c\u5176\u4ed6\u5730\u65b9\u4f1a\u8bf4\uff0c\u2018\u54c7\uff0c\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\uff0c\u5f7c\u5f97\u8bc1\u660e\u4e86\u8fd9\u4e00\u70b9\uff0c \u2019\u201d\u79d1\u6885\u6797\u8bf4\u3002 Scholze \u672c\u4eba\u5e76\u4e0d\u5b8c\u5168\u786e\u5b9a\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\u3002\u56e0\u6b64\uff0cCommelin \u95ee Scholze\uff0c\u4ed6\u662f\u5426\u613f\u610f\u53d1\u8868\u516c\u5f00\u58f0\u660e\uff0c\u8bc1\u660e\u8fd9\u9879\u5de5\u4f5c\u7684\u91cd\u8981\u6027\u3002 Scholze \u540c\u610f\u4e86\uff0c\u5e76\u4e8e 2020 \u5e74 12 \u6708 5 \u65e5\u5728 Buzzard \u7684\u535a\u5ba2\u4e0a\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\u3002\u4ed6\u4eec\u5c06\u5176\u79f0\u4e3a\u201c\u6db2\u4f53\u5f20\u91cf\u5b9e\u9a8c\u201d\uff0c\u8fd9\u662f\u5bf9\u79f0\u4e3a\u6db2\u4f53\u5b9e\u5411\u91cf\u7a7a\u95f4\u7684\u8bc1\u660e\u4e2d\u6d89\u53ca\u7684\u6570\u5b66\u5bf9\u8c61\u7684\u4e00\u79cd\u81f4\u656c\uff0c\u5e76\u5411\u4ed6\u548c Commelin \u559c\u6b22\u7684\u524d\u536b\u6447\u6eda\u4e50\u961f\u81f4\u656c\uff0c\u79f0\u4e3a\u6db2\u4f53\u5f20\u529b\u5b9e\u9a8c\u3002\u5728 4,400 \u5b57\u7684\u521d\u7ea7\u8bfb\u7269\u4e2d\uff0cScholze \u89e3\u91ca\u4e86\u7ed3\u679c\u7684\u4e00\u4e9b\u6280\u672f\u65b9\u9762\uff0c\u7136\u540e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6ce8\u91ca\uff0c\u7528\u901a\u4fd7\u7684\u8bed\u8a00\u8bc1\u660e\u4ed6\u8ba4\u4e3a\u7528\u8ba1\u7b97\u673a\u68c0\u67e5\u5b83\u7684\u91cd\u8981\u6027\u3002 \u201c\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u6211\u8fc4\u4eca\u4e3a\u6b62\u6700\u91cd\u8981\u7684\u5b9a\u7406\u3002 \uff08\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u8fd8\u6ca1\u6709\u771f\u6b63\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u6211\u76f8\u4fe1\u8fd9\u4f1a\u6539\u53d8\uff0c\uff09\u201dScholze \u5199\u9053\u3002 \u201c\u6700\u597d\u786e\u4fdd\u5b83\u662f\u6b63\u786e\u7684\u2026\u2026\u201d \u4fdd\u8bc1\u5230\u4f4d\uff0cCommelin \u5f00\u59cb\u5de5\u4f5c\u3002\u5728\u5411 Lean \u89e3\u91ca\u4e86\u4ed6\u6700\u7ec8\u5e0c\u671b\u7a0b\u5e8f\u68c0\u67e5\u5176\u8bc1\u660e\u7684\u6570\u5b66\u9648\u8ff0\u4e4b\u540e\uff0c\u4ed6\u5c06\u66f4\u591a\u7684\u6570\u5b66\u5bb6\u5e26\u5165\u4e86\u8be5\u9879\u76ee\u3002\u4ed6\u4eec\u786e\u5b9a\u4e86\u4e00\u4e9b\u5f15\u7406\u2014\u2014\u8bc1\u660e\u4e2d\u7684\u4e2d\u95f4\u6b65\u9aa4\u2014\u2014\u770b\u8d77\u6765\u6700\u5bb9\u6613\u4e0a\u624b\u3002\u4ed6\u4eec\u9996\u5148\u5c06\u8fd9\u4e9b\u5f62\u5f0f\u5316\uff0c\u5728\u7cbe\u76ca\u7528\u6765\u786e\u5b9a\u7ed9\u5b9a\u9648\u8ff0\u662f\u5426\u6b63\u786e\u7684\u6570\u5b66\u77e5\u8bc6\u5e93\u4e4b\u4e0a\u5bf9\u5b83\u4eec\u8fdb\u884c\u7f16\u7801\u3002\u53bb\u5e74 10 \u6708\uff0c\u5e7f\u8fbe\u5199\u9053\uff0c\u7528\u7cbe\u76ca\u7f16\u5199\u6570\u5b66\u7684\u96c6\u4f53\u52aa\u529b\u5177\u6709\u201c\u63d0\u9ad8\u8c37\u4ed3\u7684\u6c14\u6c1b\u201d\u3002\u8fd9\u4e2a\u9879\u76ee\u4e5f\u4e0d\u4f8b\u5916\u3002 Commelin \u5c06\u8bc6\u522b\u8bc1\u660e\u7684\u79bb\u6563\u90e8\u5206\u5e76\u5c06\u5b83\u4eec\u53d1\u5e03\u5230 Zulip\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u7cbe\u76ca\u793e\u533a\u4e2d\u5fc3\u7684\u8ba8\u8bba\u677f\u3002\u5f53\u6570\u5b66\u5bb6\u770b\u5230\u9002\u5408\u4ed6\u4eec\u4e13\u4e1a\u77e5\u8bc6\u7684\u90e8\u5206\u8bc1\u660e\u65f6\uff0c\u4ed6\u4eec\u4f1a\u81ea\u613f\u5c06\u5176\u5f62\u5f0f\u5316\u3002\nMehta \u662f\u4e3a\u8fd9\u9879\u5de5\u4f5c\u505a\u51fa\u8d21\u732e\u7684\u5341\u51e0\u4f4d\u6570\u5b66\u5bb6\u4e4b\u4e00\u3002 5 \u6708\uff0c\u4ed6\u770b\u5230\u4e86 Commelin \u7684\u4e00\u7bc7\u5e16\u5b50\uff0c\u8bf7\u6c42\u5e2e\u52a9\u5c06\u4e00\u4e2a\u540d\u4e3a Gordan \u5f15\u7406\u7684\u9648\u8ff0\u7684\u8bc1\u660e\u5f62\u5f0f\u5316\uff0c\u8be5\u9648\u8ff0\u4e0e Mehta \u5728\u7ec4\u5408\u51e0\u4f55\u9886\u57df\u7684\u5de5\u4f5c\u6709\u5173\u3002\u4ed6\u82b1\u4e86\u4e00\u5468\u65f6\u95f4\u7528\u4e0e\u6570\u5b66\u5bb6\u6b63\u5728\u6784\u5efa\u7684\u66f4\u5927\u7684\u8bc1\u660e\u4e00\u81f4\u7684\u672f\u8bed\u5bf9\u8bc1\u660e\u8fdb\u884c\u7f16\u7801\u3002\u4ed6\u8bf4\uff0c\u8fd9\u662f\u7cbe\u76ca\u5de5\u4f5c\u65b9\u5f0f\u7684\u8c61\u5f81\u3002 \u201c\u8fd9\u662f\u4e00\u6b21\u5927\u578b\u5408\u4f5c\uff0c\u5f88\u591a\u4eba\u90fd\u5728\u505a\u4ed6\u4eec\u64c5\u957f\u7684\u4e8b\u60c5\u6765\u5236\u4f5c\u4e00\u4e2a\u5355\u4e00\u7684\u6574\u4f53\uff0c\u201d\u4ed6\u8bf4\u3002\u968f\u7740\u5de5\u4f5c\u7684\u8fdb\u884c\uff0cScholze \u59cb\u7ec8\u5982\u4e00\u5730\u51fa\u73b0\u5728 Zulip \u4e0a\uff0c\u56de\u7b54\u95ee\u9898\u5e76\u89e3\u91ca\u8bc1\u660e\u8981\u70b9\u2014\u2014\u6709\u70b9\u50cf\u5efa\u7b51\u5e08\u5728\u5de5\u4f5c\u73b0\u573a\u4e3a\u5efa\u7b51\u5546\u63d0\u4f9b\u6307\u5bfc\u3002 \u201c\u4ed6\u603b\u662f\u89e6\u624b\u53ef\u53ca\uff0c\u201d\u79d1\u6885\u6797\u8bf4\u3002 5 \u6708\u5e95\uff0c\u8be5\u5c0f\u7ec4\u5b8c\u6210\u4e86 Scholze \u6700\u4e0d\u786e\u5b9a\u7684\u8bc1\u660e\u7684\u4e00\u90e8\u5206\u3002 5 \u6708 29 \u65e5\u51cc\u6668 1 \u70b9 10 \u5206\uff0cCommelin \u8f93\u5165\u4e86\u6700\u540e\u7684\u51fb\u952e\u3002Lean \u7f16\u8bd1\u4e86\u8bc1\u660e\uff0c\u5b83\u50cf\u4e00\u4e2a\u6b63\u5e38\u8fd0\u884c\u7684\u7a0b\u5e8f\u4e00\u6837\u8fd0\u884c\uff0c\u9a8c\u8bc1 Scholze \u7684\u5de5\u4f5c\u662f 100% \u6b63\u786e\u7684\u3002\u73b0\u5728 Scholze \u548c\u5176\u4ed6\u6570\u5b66\u5bb6\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6280\u672f\u4ece\u771f\u6b63\u7684\u6cdb\u51fd\u5206\u6790\u5e94\u7528\u5230\u538b\u7f29\u96c6\uff0c\u56e0\u4e3a\u4ed6\u4eec\u77e5\u9053\u4ed6\u4eec\u80af\u5b9a\u4f1a\u5728\u8fd9\u4e2a\u65b0\u73af\u5883\u4e2d\u5de5\u4f5c\u3002\u867d\u7136 Scholze \u4ecd\u7136\u559c\u6b22\u5728\u8111\u6d77\u4e2d\u627e\u51fa\u8bc1\u636e\uff0c\u4f46 Lean \u7684\u80fd\u529b\u7ed9\u4ed6\u7559\u4e0b\u4e86\u6df1\u523b\u7684\u5370\u8c61\u3002\u4ed6\u73b0\u5728\u53ef\u4ee5\u9884\u89c1\u50cf\u5b83\u8fd9\u6837\u7684\u7a0b\u5e8f\u5728\u7814\u7a76\u6570\u5b66\u4e2d\u53d1\u6325\u6301\u4e45\u7684\u4f5c\u7528\u3002 \u201c\u8fd9\u4e2a\u5b9e\u9a8c\u5f7b\u5e95\u6539\u53d8\u4e86\u6211\u5bf9 [\u8bc1\u660e\u52a9\u7406] \u80fd\u529b\u7684\u5370\u8c61\uff0c\u201dScholze \u8bf4\u3002 \u201c\u6211\u73b0\u5728\u8ba4\u4e3a\u539f\u5219\u4e0a\u5728\u7cbe\u76ca\u4e2d\u5c06\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u5185\u5bb9\u5f62\u5f0f\u5316\u662f\u660e\u667a\u7684\u3002\u6ca1\u6709\u771f\u6b63\u7684\u969c\u788d\u3002\u201d", "note_en": "Computer proof assistants have been an intriguing subplot in mathematics for years \u2014 promising to automate core aspects of the way mathematicians work, but in practice having little effect on the field.\n But a new result,  completed in early June, has the feel of a rookie\u2019s first hit in the big leagues: At last, a proof assistant has made a real contribution to the leading edge of mathematical research by verifying the correctness of a complicated, modern proof.\n \u201cIt demonstrates that modern maths can be formalized in a theorem prover,\u201d said  Bhavik Mehta, a graduate student at the University of Cambridge who contributed to the work.\n The proof in question is by  Peter Scholze of the University of Bonn, one of the most widely respected mathematicians in the world. It is just one piece of a larger project called \u201c condensed mathematics\u201d that he and  Dustin Clausen of the University of Copenhagen have been working on for several years.\n  Their goal is to create new foundations for topology, replacing the traditional notion of a topological space \u2014 whose examples include the sphere and the doughnut \u2014 with more versatile objects that the authors call condensed sets. In this new perspective, topological spaces are thought of as being assembled from infinite points of dust glued together.\n That project includes a particularly important, difficult proof that Scholze worked out himself during a consuming week in July 2019. It establishes that\u00a0an area of math called real functional\u00a0analysis still works if you replace topological spaces with condensed\u00a0sets.\n Scholze began the proof on a Monday. He worked entirely in his head, barely writing anything down, let alone using a computer. By Thursday afternoon he\u2019d nearly figured it out, save one piece that he just couldn\u2019t get right. He was also feeling the strain of the intense concentration required to hold such a complicated argument in his active memory. So that night he unwound with some friends at a bar. He paid for it the next morning, Friday.\n  But he also knew that he wouldn\u2019t have time to work over the weekend, making Friday his best chance to finish the proof. The thought of losing touch with everything he\u2019d built up in his mind over the past week, then having to start again fresh on Monday, was more than he wanted to consider.\n \u201cI didn\u2019t think I\u2019d have the mental capacity to rebuild this in my head again,\u201d said Scholze.\n So he powered through and finished the proof. But afterward, he wasn\u2019t certain that what he had done was correct. The reason was more than the hazy circumstances in which he\u2019d cleared the final hurdle. The proof was so complicated Scholze knew it was possible he had missed something.\n  \u201cIt\u2019s some very convoluted thing with many moving parts. It\u2019s hard to know which parts move by how much when you shift one of these parameters,\u201d said Scholze.\n Scholze didn\u2019t find time to actually write down the proof until November 2019. A year later he contacted  Kevin Buzzard, a mathematician at Imperial College London and a prominent evangelist for a proof assistant program called  Lean. Scholze wanted to know whether it would be possible to type his proof into Lean \u2014 turning it into lines of code like a software program \u2014 so that the program could verify whether it was really true.\n Buzzard shared Scholze\u2019s inquiry with a handful of other members of the Lean community including  Johan Commelin, a postdoctoral researcher at the University of Freiburg. Commelin had the perfect background for the job \u2014 he\u2019d been using Lean for several years and was familiar with condensed mathematics \u2014 and he was convinced that verifying Scholze\u2019s proof would do a lot to legitimize the proof assistant\u2019s standing in the mathematical community.\n \u201cBeing able to collaborate with Peter on such a project and having his name attached to it would be an enormous boost for Lean,\u201d said Commelin.\n But he also thought it could take a year or more to do it, which gave him pause. Commelin was worried he might spend all that time verifying the proof and, at the end, the rest of the math world would just shrug.\n \u201cI thought that if I spend two years working on this and I come out of my cave and say, \u2018This is fine,\u2019 the rest of the world is going to say, \u2018Wow, we already knew this, Peter proved it,\u2019\u201d said Commelin. It wouldn\u2019t matter that Scholze himself wasn\u2019t entirely sure.\n So Commelin asked Scholze if he\u2019d be willing to make a public statement vouching for the importance of the work. Scholze agreed, and on Dec. 5, 2020, he  wrote a post on Buzzard\u2019s blog.\n They called it the \u201cLiquid Tensor Experiment,\u201d a nod to mathematical objects involved in the proof called liquid real vector spaces, and to a progressive rock band he and Commelin enjoy called  Liquid Tension Experiment. In the 4,400-word primer, Scholze explained some technical aspects of the result and then added a note testifying in plain language to what he saw as the importance of checking it with a computer.\n \u201cI think this may be my most important theorem to date. (It does not really have any applications so far, but I\u2019m sure this will change,)\u201d Scholze wrote. \u201cBetter be sure it\u2019s correct\u2026\u201d\n Assurance in place, Commelin set to work. After explaining to Lean the mathematical statement whose proof he ultimately wanted the program to check, he brought more mathematicians into the project. They identified a few lemmas \u2014 intermediate steps in the proof \u2014 that seemed most approachable. They formalized those first, coding them on top of the library of mathematical knowledge that Lean draws on to determine if a given statement is true or not.\n  Last  October,  Quanta wrote that the collective effort to write mathematics in Lean has the \u201cair of a barn raising.\u201d This project was no different. Commelin would identify discrete parts of the proof and post them to  Zulip, a discussion board that serves as a hub for the Lean community. When mathematicians saw a part of the proof that fit their expertise, they\u2019d volunteer to formalize it.\n Mehta was one of about a dozen mathematicians who contributed to the work. In May he saw a post from Commelin asking for help formalizing the proof of a statement called Gordan\u2019s lemma, which related to Mehta\u2019s work in the area of combinatorial geometry. He spent a week coding the proof in terms that were consistent with the larger proof the mathematicians were building. It was emblematic, he said, of the way Lean works.\n \u201cIt\u2019s one big collaboration with a lot of people doing what they\u2019re good at to make a singular monolith,\u201d he said.\n As the work proceeded, Scholze was a consistent presence on Zulip, answering questions and explaining points of the proof \u2014 a bit like an architect giving directions to builders on a job site. \u201cHe was always within reach,\u201d Commelin said.\n  At the end of May the group finished formalizing the one part of the proof Scholze was most unsure about. Commelin entered the final keystroke at 1:10 a.m. on May 29. Lean compiled the proof, and it ran like a functioning program, verifying that Scholze\u2019s work was 100% correct. Now Scholze and other mathematicians can apply those techniques from real functional analysis to condensed sets, knowing that they\u2019ll definitely work in this new setting.\n And while Scholze still prefers to work out proofs in his head, Lean\u2019s abilities left him impressed. He can now foresee programs like it playing an enduring role in research mathematics.\n \u201cThis experiment has changed drastically my impression of how capable [proof assistants] are,\u201d Scholze said. \u201cI now think it\u2019s sensible in principle to formalize whatever you want in Lean. There\u2019s no real obstruction.\u201d", "posttime": "2021-07-29 21:53:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u52a9\u624b,assistant,\u8bc1\u660e", "title": "\u8bc1\u660e\u52a9\u624b\u8df3\u5230\u5927\u8054\u76df\u6570\u5b66", "title_en": "Proof Assistant Makes Jump to Big-League Math", "transed": 1, "url": "https://www.quantamagazine.org/lean-computer-program-confirms-peter-scholze-proof-20210728/", "via": "", "real_tags": ["\u52a9\u624b", "assistant", "\u8bc1\u660e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070253, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u6e90\uff1a\u7f8e\u56fd\u80fd\u6e90\u4fe1\u606f\u7f72 (EIA)\uff0c\u6bcf\u6708\u80fd\u6e90\u8bc4\u8bba \u6ce8\uff1a\u8be5\u56fe\u663e\u793a\u4e86\u6240\u6709\u90e8\u95e8\uff08\u7535\u529b\u3001\u5de5\u4e1a\u3001\u5546\u4e1a\u548c\u4f4f\u5b85\uff09\u7684\u51c0\u53d1\u7535\u91cf\uff0c\u5305\u62ec\u516c\u7528\u4e8b\u4e1a\u89c4\u6a21\u548c\u5c0f\u89c4\u6a21\uff08\u5ba2\u6237\u73b0\u573a\u3001\u5c0f\u4e8e 1 \u5146\u74e6\uff09\u592a\u9633\u80fd\u3002 2020 \u5e74\uff0c\u53ef\u518d\u751f\u80fd\u6e90\uff08\u5305\u62ec\u98ce\u80fd\u3001\u6c34\u7535\u3001\u592a\u9633\u80fd\u3001\u751f\u7269\u8d28\u80fd\u548c\u5730\u70ed\u80fd\uff09\u4ea7\u751f\u4e86\u521b\u7eaa\u5f55\u7684 8340 \u4ebf\u5343\u74e6\u65f6\uff08kWh\uff09\u7535\u529b\uff0c\u7ea6\u5360\u7f8e\u56fd\u603b\u53d1\u7535\u91cf\u7684 21%\u3002 2020 \u5e74\uff0c\u5728\u7f8e\u56fd\uff0c\u53ea\u6709\u5929\u7136\u6c14\uff0816170 \u4ebf\u5343\u74e6\u65f6\uff09\u7684\u53d1\u7535\u91cf\u8d85\u8fc7\u4e86\u53ef\u518d\u751f\u80fd\u6e90\u3002\u53ef\u518d\u751f\u80fd\u6e90\u6709\u53f2\u4ee5\u6765\u9996\u6b21\u8d85\u8fc7\u6838\u80fd\uff087900 \u4ebf\u5343\u74e6\u65f6\uff09\u548c\u7164\u70ad\uff087740 \u4ebf\u5343\u74e6\u65f6\uff09\u3002 2020 \u5e74\u7684\u8fd9\u4e00\u7ed3\u679c\u4e3b\u8981\u662f\u7531\u4e8e\u7f8e\u56fd\u53d1\u7535\u4e2d\u7164\u70ad\u7684\u4f7f\u7528\u663e\u7740\u51cf\u5c11\uff0c\u800c\u98ce\u80fd\u548c\u592a\u9633\u80fd\u7684\u4f7f\u7528\u7a33\u6b65\u589e\u52a0\u3002 2020 \u5e74\uff0c\u7f8e\u56fd\u6240\u6709\u884c\u4e1a\u7684\u7164\u70ad\u53d1\u7535\u91cf\u6bd4 2019 \u5e74\u4e0b\u964d\u4e86 20%\uff0c\u800c\u5305\u62ec\u5c0f\u89c4\u6a21\u592a\u9633\u80fd\u5728\u5185\u7684\u53ef\u518d\u751f\u80fd\u6e90\u589e\u957f\u4e86 9%\u3002\u98ce\u80fd\u662f\u76ee\u524d\u7f8e\u56fd\u6700\u666e\u904d\u7684\u53ef\u518d\u751f\u7535\u529b\u6765\u6e90\uff0c2020 \u5e74\u6bd4 2019 \u5e74\u589e\u957f\u4e86 14%\u3002\u516c\u7528\u4e8b\u4e1a\u89c4\u6a21\u7684\u592a\u9633\u80fd\u53d1\u7535\uff08\u6765\u81ea 1 \u5146\u74e6\u4ee5\u4e0a\u7684\u9879\u76ee\uff09\u589e\u957f\u4e86 26%\uff0c\u5c0f\u89c4\u6a21\u592a\u9633\u80fd\uff0c\u5982\u7535\u7f51\u8fde\u63a5\u5c4b\u9876\u592a\u9633\u80fd\u7535\u6c60\u677f\uff0c\u589e\u957f 19%\u3002\u7f8e\u56fd\u7684\u71c3\u7164\u53d1\u7535\u91cf\u5728 2007 \u5e74\u8fbe\u5230 20160 \u4ebf\u5343\u74e6\u65f6\u7684\u5cf0\u503c\uff0c\u6b64\u540e\u5927\u90e8\u5206\u5bb9\u91cf\u5df2\u88ab\u5929\u7136\u6c14\u53d1\u7535\u53d6\u4ee3\u6216\u8f6c\u6362\u4e3a\u5929\u7136\u6c14\u53d1\u7535\u3002\u5728 2016 \u5e74\u4e4b\u524d\uff0c\u7164\u70ad\u662f\u7f8e\u56fd\u6700\u5927\u7684\u7535\u529b\u6765\u6e90\uff0c\u800c 2020 \u5e74\u662f\u53ef\u518d\u751f\u80fd\u6e90\u548c\u6838\u80fd\u53d1\u7535\u91cf\u8d85\u8fc7\u7164\u70ad\u53d1\u7535\u91cf\u7684\u7b2c\u4e00\u5e74\uff08\u6839\u636e\u6211\u4eec\u53ef\u8ffd\u6eaf\u5230 1949 \u5e74\u7684\u6570\u636e\u7cfb\u5217\uff09\u3002\u4ece 2019 \u5e74\u5230 2020 \u5e74\uff0c\u6838\u7535\u4e0b\u964d\u4e86 2%\uff0c\u56e0\u4e3a\u51e0\u5ea7\u6838\u7535\u7ad9\u9000\u5f79\uff0c\u5176\u4ed6\u6838\u7535\u7ad9\u7ecf\u5386\u4e86\u4e0e\u7ef4\u62a4\u76f8\u5173\u7684\u505c\u7535\u7565\u591a\u3002\u6211\u4eec\u9884\u8ba1 2021 \u5e74\u7f8e\u56fd\u7684\u71c3\u7164\u53d1\u7535\u91cf\u5c06\u589e\u52a0\uff0c\u56e0\u4e3a\u5929\u7136\u6c14\u4ef7\u683c\u7ee7\u7eed\u4e0a\u6da8\uff0c\u7164\u70ad\u5728\u7ecf\u6d4e\u4e0a\u66f4\u5177\u7ade\u4e89\u529b\u3002\u6839\u636e\u6211\u4eec\u7684\u77ed\u671f\u80fd\u6e90\u5c55\u671b (STEO) \u4e2d\u7684\u9884\u6d4b\uff0c\u6211\u4eec\u9884\u8ba1 2021 \u5e74\u6240\u6709\u884c\u4e1a\u7684\u71c3\u7164\u53d1\u7535\u91cf\u5c06\u6bd4 2020 \u5e74\u7684\u6c34\u5e73\u589e\u52a0 18%\uff0c\u7136\u540e\u5728 2022 \u5e74\u4e0b\u964d 2%\u3002\u6211\u4eec\u9884\u8ba1\u7f8e\u56fd\u6240\u6709\u884c\u4e1a\u7684\u53ef\u518d\u751f\u80fd\u6e90\u53d1\u7535\u91cf\u5c06\u589e\u52a02021 \u5e74\u4e3a 7%\uff0c2022 \u5e74\u4e3a 10%\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9884\u6d4b\u7164\u70ad\u5c06\u6210\u4e3a 2021 \u5e74\u7b2c\u4e8c\u5927\u6700\u6d41\u884c\u7684\u7535\u529b\u6765\u6e90\uff0c\u800c\u53ef\u518d\u751f\u80fd\u6e90\u5c06\u6210\u4e3a 2022 \u5e74\u7b2c\u4e8c\u5927\u6700\u6d41\u884c\u7684\u80fd\u6e90\u3002\u6211\u4eec\u9884\u8ba1\u6838\u7535\u5c06\u4e0b\u964d 2\u968f\u7740\u8fd0\u8425\u5546\u9000\u5f79\u591a\u53f0\u53d1\u7535\u673a\uff0c2021 \u5e74\u548c 2022 \u5e74\u5206\u522b\u4e0b\u964d % \u548c 3%\u3002\u8d44\u6599\u6765\u6e90\uff1a\u7f8e\u56fd\u80fd\u6e90\u4fe1\u606f\u7f72\u3001\u6bcf\u6708\u80fd\u6e90\u8bc4\u8bba\u548c\u77ed\u671f\u80fd\u6e90\u5c55\u671b (STEO) \u6ce8\uff1a\u8be5\u56fe\u663e\u793a\u4e86\u6240\u6709\u90e8\u95e8\uff08\u7535\u529b\u3001\u5de5\u4e1a\u3001\u5546\u4e1a\u548c\u4f4f\u5b85\uff09\u7684\u51c0\u53d1\u7535\u91cf\uff0c\u5305\u62ec\u516c\u7528\u4e8b\u4e1a\u89c4\u6a21\u548c\u5c0f\u578b\u89c4\u6a21\uff08\u5ba2\u6237\u73b0\u573a\uff0c\u5c0f\u4e8e 1 \u5146\u74e6\uff09\u592a\u9633\u80fd\u3002", "note_en": "Source: U.S. Energy Information Administration (EIA),   Monthly Energy Review   Note: This graph shows electricity net generation in all sectors (electric power, industrial, commercial, and residential) and includes both utility-scale and small-scale (customer-sited, less than 1 megawatt) solar.\n    In 2020,  renewable energy sources (including wind, hydroelectric,  solar, biomass, and geothermal energy) generated a record 834 billion kilowatthours (kWh) of electricity, or about 21% of all the electricity generated in the United States. Only  natural gas (1,617 billion kWh) produced more electricity than renewables in the United States in 2020. Renewables surpassed both  nuclear (790 billion kWh) and  coal (774 billion kWh) for the first time on record. This outcome in 2020 was due mostly to significantly less coal use in U.S. electricity generation and steadily increased use of wind and solar.\n  In 2020, U.S. electricity generation from coal in all sectors declined 20% from 2019, while renewables, including  small-scale solar, increased 9%.  Wind, currently the most prevalent source of renewable electricity in the United States, grew 14% in 2020 from 2019.  Utility-scale solar generation (from projects greater than 1 megawatt) increased 26%, and  small-scale solar, such as grid-connected rooftop solar panels, increased 19%.\n  Coal-fired electricity generation in the United States peaked at 2,016 billion kWh in 2007 and much of that capacity has been  replaced by or converted to natural gas-fired generation since then. Coal was the largest source of electricity in the United States until 2016, and 2020 was the first year that more electricity was generated by renewables and by  nuclear power than by coal (according to our data series that dates back to 1949). Nuclear electric power declined 2% from 2019 to 2020 because several nuclear power plants retired and other nuclear plants experienced slightly more maintenance-related outages.\n  We expect  coal-fired electricity generation to increase in the United States during 2021 as  natural gas prices continue to rise and as coal becomes more economically competitive. Based on forecasts in our   Short-Term Energy Outlook (STEO), we expect coal-fired electricity generation in all sectors in 2021 to  increase 18% from 2020 levels before falling 2% in 2022. We expect U.S. renewable generation across all sectors to increase 7% in 2021 and 10% in 2022. As a result, we forecast coal will be the second-most prevalent electricity source in 2021, and renewables will be the second-most prevalent source in 2022. We expect nuclear electric power to decline 2% in 2021 and 3% in 2022 as operators  retire several generators.\n    Source: U.S. Energy Information Administration,   Monthly Energy Review and   Short-Term Energy Outlook (STEO)  Note: This graph shows electricity net generation in all sectors (electric power, industrial, commercial, and residential) and includes both utility-scale and small-scale (customer-sited, less than 1 megawatt) solar.", "posttime": "2021-07-29 21:53:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u7f8e\u56fd,\u7535\u529b,renewables,\u592a\u9633\u80fd", "title": "\u53ef\u518d\u751f\u80fd\u6e90\u6210\u4e3a 2020 \u5e74\u7f8e\u56fd\u7b2c\u4e8c\u5927\u6700\u6d41\u884c\u7684\u7535\u529b\u6765\u6e90", "title_en": "Renewables became the second-most prevalent U.S. electricity source in 2020", "transed": 1, "url": "https://www.eia.gov/todayinenergy/detail.php?id=48896", "via": "", "real_tags": ["2020", "\u7f8e\u56fd", "\u7535\u529b", "\u592a\u9633\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "7b030f03a5405a6f7f3210fbe21d7574.jpg", "infoid": 1070252, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f88\u5feb\u5c31\u4f1a\u6709\u4e00\u5929\u6ca1\u6709\u63d0\u9192\uff0c\u6bcf\u5929\uff0c\u5f53\u4f60\u8d70\u5728\u8857\u4e0a\u65f6\uff0c\u4f60\u9047\u5230\u7684\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u539f\u521b\u7684\u89c2\u70b9\u3002\u5907\u53d7\u559c\u7231\u7684\u513f\u7ae5\u52a8\u753b\u8282\u76ee\u5c06\u4e8e 2022 \u5e74\u521d\u7ed3\u675f\uff0c\u4e5f\u5c31\u662f\u7b2c 25 \u5b63\u548c\u6700\u540e\u4e00\u5b63\u4e4b\u540e\u3002\u8be5\u5267\u7684\u6267\u884c\u5236\u7247\u4eba\u5361\u7f57\u5c14\u00b7\u683c\u6797\u6c83\u5c14\u5fb7 (Carol Greenwald) \u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u4e9a\u745f\u662f\u5386\u53f2\u4e0a\u64ad\u51fa\u65f6\u95f4\u6700\u957f\u7684\u513f\u7ae5\u52a8\u753b\u7cfb\u5217\uff0c\u4ee5\u901a\u8fc7\u8bb8\u591a\u5f00\u521b\u6027\u65f6\u523b\u5411\u51e0\u4ee3\u89c2\u4f17\u4f20\u6388\u5584\u826f\u3001\u540c\u60c5\u548c\u5305\u5bb9\u800c\u95fb\u540d\u3002\u201d\u5979\u8865\u5145\u8bf4\uff0c\u8be5\u8282\u76ee\u5c06\u5728\u672a\u6765\u51e0\u5e74\u7ee7\u7eed\u5728 PBS KIDS \u4e0a\u64ad\u653e\u3002\u4e9a\u745f\u8ddf\u968f\u5176\u540d\u4e49\u4e0a\u7684\u89d2\u8272\uff0c\u4e00\u53ea\u516b\u5c81\u7684\u571f\u8c5a\uff0c\u5728\u5bb6\u4eba\u3001\u670b\u53cb\u548c\u5b66\u6821\u4e2d\u5ea6\u8fc7\u3002\u8be5\u8282\u76ee\u64c5\u957f\u5c55\u793a\u6765\u81ea\u4e0d\u540c\u6587\u5316\u3001\u9636\u7ea7\u548c\u5bb6\u5ead\u80cc\u666f\u7684\u89d2\u8272\u3002\u6709\u65f6\u5b83\u662f\u8fb9\u754c\u63a8\u52a8 - \u8be5\u8282\u76ee\u7684\u884d\u751f\u5267\u96c6\uff0c\u6765\u81ea\u5df4\u65af\u7279\u7684\u660e\u4fe1\u7247\uff0c\u56e0 2005 \u5e74\u4ee5\u5973\u540c\u6027\u604b\u7236\u6bcd\u4e3a\u7279\u8272\u7684\u5267\u96c6\u800c\u53d7\u5230\u5f53\u65f6\u7684\u6559\u80b2\u90e8\u957f\u739b\u683c\u4e3d\u7279\u00b7\u65af\u4f69\u6797\u7684\u6279\u8bc4\uff0c\u800c\u963f\u62c9\u5df4\u9a6c\u5dde\u516c\u5171\u7535\u89c6\u53f0\u62d2\u7edd\u64ad\u51fa 2019 \u5e74\u7684\u5267\u96c6\uff0c\u8be5\u5267\u96c6\u663e\u793a\u4e00\u573a\u540c\u6027\u5a5a\u793c\u3002\u672c\u6708\u65e9\u4e9b\u65f6\u5019\uff0c\u5728\u64ad\u5ba2\u300aFinding DW\u300b\u7684 7 \u6708 13 \u65e5\u4e00\u96c6\u4e2d\u7684\u4e00\u6b21\u91c7\u8bbf\u4e2d\uff0c\u8282\u76ee\u7ed3\u675f\u7684\u6d88\u606f\u9996\u6b21\u6d6e\u51fa\u6c34\u9762\uff0c\u4e9a\u745f\u4f5c\u5bb6\u51ef\u897f\u00b7\u6c83\u900f\u9732\uff0c\u8be5\u8282\u76ee\u4e0d\u518d\u5236\u4f5c\uff0c\u6700\u540e\u4e00\u96c6\u5728\u51e0\u5e74\u524d\u5b8c\u6210. \u201c\u6211\u8ba4\u4e3a\u4e9a\u745f\u5e94\u8be5\u56de\u6765\uff0c\u201d\u5979\u8bf4\u3002 \u201c\u6211\u77e5\u9053\u6211\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u8ba4\u4e3a\u4ed6\u4eec\u72af\u4e86\u9519\u8bef\u7684\u4eba\u3002\u201d\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u53ef\u80fd\u4e0d\u662f\u4e9a\u745f\u7684\u7ec8\u7ed3\uff1a\u683c\u6797\u6c83\u5c14\u5fb7\u7684\u58f0\u660e\u8865\u5145\u8bf4\uff0c\u201c\u5236\u7247\u4eba GBH \u548c PBS KIDS \u5c06\u7ee7\u7eed\u5408\u4f5c\u5236\u4f5c\u4e9a\u745f\u7684\u66f4\u591a\u5185\u5bb9\uff0c\u4ee5\u65b0\u7684\u65b9\u5f0f\u5206\u4eab\u4e9a\u745f\u548c\u4ed6\u7684\u670b\u53cb\u4eec\u7684\u7ecf\u9a8c\u6559\u8bad\u3002\u201d", "note_en": "There will soon be a day without the reminder that every day, when you&#39;re walking down the street, everybody that you meet has an original point of view.\n    The much beloved animated kids show is coming to an end in early 2022, after its 25th and final season.\n  &#34;Arthur is the longest-running kids animated series in history and is known for teaching kindness, empathy and inclusion through many groundbreaking moments to generations of viewers,&#34; said the show&#39;s executive producer, Carol Greenwald, in a statement. She added that the show will continue to be available on PBS KIDS for years to come.\n     Arthur followed its titular character, an eight-year-old aardvark, as he navigated life among family, friends and school. The show had a knack for featuring characters from different cultures, classes and family backgrounds. At times it was boundary pushing \u2014 an episode of the show&#39;s spin-off,  Postcards from Buster, received criticism from then-Education Secretary Margaret Spelling for a  2005 episode that featured lesbian parents, and  Alabama Public Television refused to air a 2019 episode that showed a  same-sex wedding.\n  The news of the show ending was first floated earlier this month in an interview featured in the July 13 episode of the podcast   Finding D.W. , where  Arthur writer Kathy Waugh revealed that the show was no longer in production, and the final episode was completed years ago. &#34;I think  Arthur should come back,&#34; she said. &#34;I know I&#39;m not alone in thinking they made a mistake.&#34;\n    Still, this might not be the end of Arthur: The statement from Greenwald adds that &#34;producer GBH and PBS KIDS are continuing to work together on additional Arthur content, sharing the lessons of Arthur and his friends in new ways.&#34;", "posttime": "2021-07-29 21:53:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u513f\u7ae5,longest,\u8282\u76ee", "title": "\u65f6\u95f4\u6700\u957f\u7684\u513f\u7ae5\u52a8\u753b\u7cfb\u5217\u201c\u4e9a\u745f\u201d\u5373\u5c06\u7ed3\u675f", "title_en": "'Arthur,' the longest-running kids animated series, is ending", "transed": 1, "url": "https://www.npr.org/2021/07/28/1021687616/pbs-kids-show-arthur-ending", "via": "", "real_tags": ["\u513f\u7ae5", "longest", "\u8282\u76ee"]}]