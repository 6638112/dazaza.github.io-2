[{"category": "", "categoryclass": "", "imagename": "9630a45f23a11d31483858bf77502d0d.jpg", "infoid": 1071270, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4e2a\u7ea2\u8272\u7684\u4e1c\u897f\u85cf\u5728\u592a\u9633\u7cfb\u4e0d\u5e94\u8be5\u5b58\u5728\u7684\u5730\u65b9\u3002\u7531\u65e5\u672c\u822a\u5929\u5c40 JAXA \u7684 Sunao Hasegawa \u9886\u5bfc\u7684\u79d1\u5b66\u5bb6\u5468\u4e00\u5728\u300a\u5929\u4f53\u7269\u7406\u5b66\u6742\u5fd7\u5feb\u62a5\u300b\u4e0a\u62a5\u9053\u8bf4\uff0c\u5728\u706b\u661f\u548c\u6728\u661f\u4e4b\u95f4\u7684\u5c0f\u884c\u661f\u5e26\u4e2d\u53d1\u73b0\u7684\u4e24\u4e2a\u7269\u4f53\u4f3c\u4e4e\u8d77\u6e90\u4e8e\u6d77\u738b\u661f\u4e4b\u5916\u3002\u8fd9\u4e9b\u53d1\u73b0\u6709\u671d\u4e00\u65e5\u53ef\u80fd\u4e3a\u65e9\u671f\u592a\u9633\u7cfb\u4e2d\u5b58\u5728\u7684\u6df7\u4e71\u63d0\u4f9b\u76f4\u63a5\u8bc1\u636e\u3002 \u201c\u5982\u679c\u8fd9\u662f\u771f\u7684\uff0c\u90a3\u5c06\u662f\u4e00\u7b14\u5927\u4e70\u5356\uff0c\u201d\u79d1\u7f57\u62c9\u591a\u5dde\u897f\u5357\u7814\u7a76\u6240\u7684\u884c\u661f\u79d1\u5b66\u5bb6\u54c8\u5c14\u00b7\u83b1\u7ef4\u68ee (Hal Levison) \u8bf4\uff0c\u4ed6\u5e76\u672a\u53c2\u4e0e\u8fd9\u9879\u7814\u7a76\u3002\u4eca\u5929\u5730\u7403\u7684\u6052\u661f\u9644\u8fd1\u76f8\u5f53\u7a33\u5b9a\u3002\u4f46\u5728 40 \u4ebf\u5e74\u524d\uff0c\u6728\u661f\u548c\u5176\u4ed6\u5de8\u884c\u661f\u7684\u8f68\u9053\u53ef\u80fd\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u6df7\u4e71\u7edf\u6cbb\u7740\u3002\u8fd9\u79cd\u884c\u661f\u4e4b\u821e\u9020\u6210\u7684\u91cd\u529b\u7834\u574f\u5f88\u53ef\u80fd\u5c06\u5ca9\u77f3\u548c\u51b0\u5757\u6254\u5f97\u5230\u5904\u90fd\u662f\u3002 \u201c\u8fd9\u662f\u975e\u5e38\u6709\u6d3b\u529b\u7684\uff0c\u201d\u54c8\u4f5b\u5927\u5b66\u592a\u9633\u7cfb\u6f14\u5316\u4e13\u5bb6\u5361\u7433\u00b7\u5965\u4f2f\u683c\u8bf4\uff0c\u4ed6\u6ca1\u6709\u53c2\u4e0e\u8fd9\u9879\u65b0\u7814\u7a76\u3002\u5176\u4e2d\u4e00\u4e9b\u5ca9\u77f3\u843d\u5165\u706b\u661f\u548c\u6728\u661f\u4e4b\u95f4\u7684\u7f1d\u9699\u4e2d\uff0c\u6210\u4e3a\u5c0f\u884c\u661f\u5e26\u3002\u5927\u591a\u6570\u6750\u6599\u88ab\u8ba4\u4e3a\u662f\u76f8\u5f53\u76f8\u4f3c\u7684\u672a\u5f62\u6210\u884c\u661f\u7684\u4e0d\u6d3b\u52a8\u5ca9\u77f3\u5927\u5757\u3002\u5b83\u4eec\u7684\u8f68\u9053\u5927\u7ea6\u662f\u5730\u7403-\u592a\u9633\u8ddd\u79bb\u7684 2.7 \u500d\u548c 2.6 \u500d\uff0c\u6b63\u597d\u4f4d\u4e8e\u5c0f\u884c\u661f\u5e26\u5185\u3002\u5927\u7ea6 70 \u82f1\u91cc\u5bbd\u7684 203 Pompeja \u4f3c\u4e4e\u5728\u7ed3\u6784\u4e0a\u5b8c\u597d\u65e0\u635f\uff0c\u800c\u53ea\u6709 35 \u82f1\u91cc\u5de6\u53f3\u7684 269 Justitia \u53ef\u80fd\u662f\u5148\u524d\u78b0\u649e\u7684\u788e\u7247\u3002\u4e24\u8005\u90fd\u6709\u7a33\u5b9a\u7684\u5706\u5f62\u8f68\u9053\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u4e00\u5b9a\u5f88\u4e45\u4ee5\u524d\u5c31\u5df2\u7ecf\u8fdb\u5165\u8fd9\u4e2a\u7a7a\u95f4\u4e86\u3002\n\u4e24\u8005\u4e5f\u6709\u4e0d\u5bfb\u5e38\u7684\u989c\u8272\u3002\u592a\u9633\u7cfb\u5185\u90e8\u7684\u7269\u4f53\u5f80\u5f80\u53cd\u5c04\u66f4\u591a\u7684\u84dd\u5149\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u6709\u673a\u7269\u8d28\u2014\u2014\u6bd4\u5982\u78b3\u548c\u7532\u70f7\u2014\u2014\u800c\u592a\u9633\u7cfb\u5916\u90e8\u7684\u7269\u4f53\u5219\u66f4\u7ea2\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5f88\u591a\u6709\u673a\u7269\uff0c\u4e5f\u8bb8\u662f\u751f\u547d\u7684\u57fa\u77f3\u5730\u7403\u3002\u8be5\u8bba\u6587\u7684\u5408\u8457\u8005\u3001\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u8fc8\u514b\u5c14\u00b7\u9a6c\u585e\u7279 (Micha\u00ebl Marsset) \u8bf4\uff1a\u201c\u4e3a\u4e86\u62e5\u6709\u8fd9\u4e9b\u6709\u673a\u7269\uff0c\u60a8\u6700\u521d\u9700\u8981\u5728\u8868\u9762\u5f62\u6210\u5927\u91cf\u51b0\u3002\u201d \u201c\u6240\u4ee5\u5b83\u4eec\u4e00\u5b9a\u662f\u5728\u975e\u5e38\u5bd2\u51b7\u7684\u73af\u5883\u4e2d\u5f62\u6210\u7684\u3002\u7136\u540e\u51b0\u7684\u592a\u9633\u8f90\u5c04\u4f1a\u4ea7\u751f\u90a3\u4e9b\u590d\u6742\u7684\u6709\u673a\u7269\u3002\u201d\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e24\u5757\u5ca9\u77f3\u975e\u5e38\u7ea2\u2014\u2014\u6bd4\u5c0f\u884c\u661f\u5e26\u4e2d\u770b\u5230\u7684\u4efb\u4f55\u5ca9\u77f3\u90fd\u8981\u7ea2\u3002\u867d\u7136\u5df2\u7ecf\u53d1\u73b0\u4e86\u5176\u4ed6\u7ea2\u8272\u5c0f\u884c\u661f\u7684\u521d\u6b65\u8ff9\u8c61\uff0c\u4f46\u8fd9\u4e24\u4e2a\u4f3c\u4e4e\u5f88\u7279\u522b\u3002\u8fd9\u4e00\u53d1\u73b0\u5982\u679c\u6b63\u786e\u7684\u8bdd\uff0c\u5c06\u4e3a\u65e9\u671f\u592a\u9633\u7cfb\u4e2d\u7684\u884c\u661f\u8fc1\u79fb\u63d0\u4f9b\u8bc1\u636e\uff0c\u7279\u522b\u662f\u652f\u6301\u4e00\u79cd\u79f0\u4e3a\u5c3c\u65af\u6a21\u578b\u7684\u60f3\u6cd5\uff0c\u571f\u661f\u3001\u5929\u738b\u661f\u548c\u6d77\u738b\u661f\u90fd\u5411\u5916\u79fb\u52a8\uff0c\u800c\u6728\u661f\u7a0d\u5fae\u5411\u5185\u79fb\u52a8\uff0c\u5386\u65f6\u6570\u4ebf\u5e74.\u8fd9\u4f1a\u6270\u4e71\u884c\u661f\u5f62\u6210\u8fc7\u7a0b\u4e2d\u9057\u7559\u4e0b\u6765\u7684\u5bcc\u542b\u6709\u673a\u7269\u7684\u5c0f\u884c\u661f\uff0c\u8ba9\u5b83\u4eec\u5728\u592a\u9633\u7cfb\u5468\u56f4\u55e1\u55e1\u4f5c\u54cd\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u53d1\u73b0\uff0c\u5bf9\u751f\u547d\u8d77\u6e90\u6709\u5f71\u54cd\uff0c\u201d\u5965\u4f2f\u683c\u535a\u58eb\u8bf4\u3002\u4eca\u5929\u8fd9\u4e9b\u9057\u7559\u4e0b\u6765\u7684\u5929\u4f53\u5927\u591a\u88ab\u79f0\u4e3a\u8de8\u6d77\u738b\u661f\u5929\u4f53\uff0c\u5b83\u4eec\u5728\u6d77\u738b\u661f\u4ee5\u5916\u7684\u67ef\u4f0a\u4f2f\u5e26\u4e2d\u8fd0\u884c\u3002\u8bb8\u591a\u90fd\u662f\u7ea2\u8272\u7684\uff0c\u6bd4\u5982 Arrokoth\uff0cNASA \u7684\u65b0\u89c6\u91ce\u53f7\u4efb\u52a1\u5728 2019 \u5e74\u8fd1\u8ddd\u79bb\u62cd\u6444\u4e86\u8fd9\u5757\u5ca9\u77f3\u3002 203 Pompeja \u548c 269 Justitia \u4f3c\u4e4e\u90fd\u4e0e\u5b83\u4eec\u76f8\u5339\u914d\u3002\u672a\u53c2\u4e0e\u8be5\u8bba\u6587\u7684\u5317\u4e9a\u5229\u6851\u90a3\u5927\u5b66\u884c\u661f\u79d1\u5b66\u5bb6\u4e54\u4ec0\u00b7\u57c3\u9ed8\u91cc (Josh Emery) \u8bf4\uff1a\u201c\u4eba\u4eec\u4e00\u76f4\u5728\u8c08\u8bba\u6765\u81ea\u67ef\u4f0a\u4f2f\u5e26\u7684\u90e8\u5206\u5c0f\u884c\u661f\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u3002\u201d\u4ed6\u8bf4\uff0c\u8fd9\u9879\u7814\u7a76\u201c\u80af\u5b9a\u5411\u524d\u8fc8\u51fa\u4e86\u4e00\u6b65\u201d\uff0c\u4ee5\u5bfb\u627e\u652f\u6301\u8be5\u5047\u8bbe\u7684\u8bc1\u636e\u3002\n\u5e76\u975e\u6240\u6709\u4eba\u90fd\u5bf9\u6b64\u6df1\u4fe1\u4e0d\u7591\u3002\u83b1\u7ef4\u68ee\u535a\u58eb\u4e5f\u6ca1\u6709\u53c2\u4e0e\u8be5\u8bba\u6587\uff0c\u4ed6\u8bf4\u7269\u4f53\u5728\u63a5\u8fd1\u592a\u9633\u65f6\u5e94\u8be5\u53d8\u5f97\u4e0d\u90a3\u4e48\u7ea2\u3002\u5373\u4f7f\u5728\u6728\u661f\u8f68\u9053\u4e0a\u6355\u83b7\u7684\u88ab\u79f0\u4e3a\u7279\u6d1b\u4f0a\u7684\u5c0f\u884c\u661f\uff0c\u88ab\u8ba4\u4e3a\u53ef\u80fd\u662f\u8de8\u6d77\u738b\u661f\u7684\u7269\u4f53\uff0c\u4e5f\u4e0d\u662f\u8fd9\u4e2a\u7ea2\u8272\u7684\u3002 \u201c\u8fd9\u4f3c\u4e4e\u4e0e\u6211\u4eec\u7684\u6a21\u578b\u4e0d\u4e00\u81f4\uff0c\u201d\u7f8e\u56fd\u5b87\u822a\u5c40\u9732\u897f\u4efb\u52a1\u7684\u8d1f\u8d23\u4eba\u5217\u7ef4\u68ee\u535a\u58eb\u8bf4\uff0c\u8be5\u4efb\u52a1\u8ba1\u5212\u4e8e 10 \u6708\u53d1\u5c04\u4ee5\u7814\u7a76\u6728\u661f\u7684\u7279\u6d1b\u4f0a\u6728\u9a6c\u3002 Marsset \u535a\u58eb\u540c\u610f\uff0c\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u4e3a\u4ec0\u4e48\u5b83\u4eec\u4f1a\u5982\u6b64\u7ea2\uff0c\u4f46\u8fd9\u53ef\u80fd\u4e0e\u5b83\u4eec\u88ab\u690d\u5165\u5c0f\u884c\u661f\u5e26\u6240\u9700\u7684\u65f6\u95f4\u6709\u5173\u3002\u6709\u4e9b\u6728\u9a6c\u4e5f\u53ef\u80fd\u662f\u7ea2\u8272\u7684\uff0c\u4f46\u8fd8\u6ca1\u6709\u88ab\u53d1\u73b0\u3002\u4e3a\u4e86\u771f\u6b63\u786e\u8ba4 203 Pompeja \u548c 269 Justitia \u7684\u8d77\u6e90\uff0c\u822a\u5929\u5668\u53ef\u80fd\u9700\u8981\u8bbf\u95ee\u5b83\u4eec\u3002\u8fd9\u6837\u7684\u4efb\u52a1\u6709\u53ef\u80fd\u8ba9\u6211\u4eec\u4e00\u77a5\u5916\u592a\u9633\u7cfb\uff0c\u4f46\u65e0\u9700\u82b1\u8d39\u5341\u5e74\u6216\u66f4\u957f\u65f6\u95f4\u98de\u5230\u90a3\u91cc\u3002 \u201c\u4f60\u53ef\u4ee5\u98de\u8d8a\u8fd9\u4e9b\u5947\u602a\u7684\u5c0f\u884c\u661f\u4e2d\u7684\u4e00\u4e2a\uff0c\u548c\u4e00\u4e2a\u66f4\u5178\u578b\u7684\u5c0f\u884c\u661f\u8fdb\u884c\u6bd4\u8f83\uff0c\u201d\u57c3\u200b\u200b\u9ed8\u91cc\u535a\u58eb\u8bf4\u3002 \u201c\u90a3\u5c06\u662f\u4e00\u6b21\u975e\u5e38\u5f15\u4eba\u6ce8\u76ee\u7684\u822a\u5929\u5668\u4efb\u52a1\u3002\u201d", "note_en": "Two red things are hiding in a part of the solar system where they shouldn\u2019t be.\n Scientists led by Sunao Hasegawa from JAXA, the Japanese space agency, reported in  The Astrophysical Journal Letters on Monday that two objects spotted in the asteroid belt between Mars and Jupiter appear to have originated beyond Neptune. The discoveries could one day provide direct evidence of the chaos that existed in the early solar system.\n \u201cIf true it would be a huge deal,\u201d says Hal Levison, a planetary scientist at the Southwest Research Institute in Colorado, who was not involved in the research.\n Earth\u2019s stellar neighborhood is fairly stable today. But 4 billion years ago, chaos reigned as the orbits of Jupiter and other giant planets beyond it may have shifted. The gravitational havoc caused by this planetary dance likely threw pieces of rock and ice all over the place.\n \u201cIt was very dynamic,\u201d said Karin \u00d6berg, an expert in solar system evolution from Harvard University who was not involved in the new study.\n Some of those rocks settled into the gap between Mars and Jupiter and became the asteroid belt. Most of the material is believed to be fairly similar hunks of inactive rock that failed to form planets.\n  They orbit at about 2.7 and 2.6 times the Earth-sun distance, well within the asteroid belt. 203 Pompeja, at about 70 miles across, appears to be structurally intact, whereas 269 Justitia, only 35 miles or so, is likely a fragment of a previous collision. Both have stable circular orbits, meaning they must have settled into this space long ago.\n Both also have an unusual color. Objects in the inner solar system tend to reflect more blue light because they are devoid of organic material \u2014 things like carbon and methane \u2014 whereas objects in the outer solar system are redder because they have a lot of organics, perhaps the building blocks of life on Earth.\n \u201cIn order to have these organics, you need to initially have a lot of ice at the surface,\u201d said Micha\u00ebl Marsset from the Massachusetts Institute of Technology, a co-author on the paper. \u201cSo they must have formed in a very cold environment. Then the solar irradiation of the ice creates those complex organics.\u201d\n These two rocks, as it turns out, are extremely red \u2014 more red than anything else seen in the asteroid belt. While tentative hints of other red asteroids have been found, these two appear to be special.\n The finding, if correct, would offer evidence for planetary migration in the early solar system, particularly in support of an idea called  the Nice Model, with Saturn, Uranus and Neptune all moving outward, and Jupiter inward slightly, over a few hundred million years. This would have perturbed organic-laden asteroids leftover from the formation of the planets, sending them pinging around the solar system.\n \u201cIt\u2019s an exciting discovery with implications for the origins of life,\u201d Dr. \u00d6berg said.\n Most of these leftover objects in the present day are known as trans-Neptunian objects and orbit in the Kuiper belt beyond Neptune. Many are red in color, like Arrokoth, the rock that NASA\u2019s New Horizons mission  got a close-up of in 2019. 203 Pompeja and 269 Justitia both appear to match them.\n \u201cPeople have been talking about some fraction of asteroids coming from the Kuiper belt for quite a while now,\u201d said Josh Emery, a planetary scientist from Northern Arizona University who was not involved in the paper. He said the research \u201cdefinitely takes a step\u201d toward finding evidence to support that hypothesis.\n Not everyone is convinced just yet. Dr. Levison, who was also not involved in the paper, says objects should become less red as they approach the sun. Even captured asteroids in Jupiter\u2019s orbit known as Trojans, thought to possibly be trans-Neptunian objects, aren\u2019t this red. \u201cIt seems to be inconsistent with our models,\u201d said Dr. Levison, who is the head of NASA\u2019s  Lucy mission, which is scheduled to launch in October to study Jupiter\u2019s Trojans.\n Dr. Marsset agrees that it\u2019s not clear why they would be so red, but it is possibly related to how long it took them to become implanted into the asteroid belt. Some Trojans may also be as red, but haven\u2019t been found yet.\n To truly confirm the origin of 203 Pompeja and 269 Justitia, a spacecraft would likely need to visit them. Such a mission could potentially offer a glimpse at the outer solar system, but without spending a decade or more to fly there.\n \u201cYou could flyby one of these strange asteroids, and a more typical asteroid for comparison,\u201d Dr. Emery said. \u201cThat would be a really compelling spacecraft mission.\u201d", "posttime": "2021-08-03 03:05:49", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7ea2\u8272,objects,\u53ef\u80fd", "title": "\u5728\u5c0f\u884c\u661f\u5e26\u4e2d\u53d1\u73b0\u7684 2 \u4e2a\u7ea2\u8272\u7269\u4f53\u3002\u4ed6\u4eec\u4e0d\u5e94\u8be5\u5728\u90a3\u91cc\u3002", "title_en": "2 Red Objects Found In the Asteroid Belt. They Shouldn't Be There.", "transed": 1, "url": "https://www.nytimes.com/2021/07/28/science/red-asteroids-belt.html", "via": "", "real_tags": ["\u7ea2\u8272", "objects", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "36c6bbfa0bf372785822f49cdc9193c2.jpeg", "infoid": 1071269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e92\u8054\u7f51\u548c\u5ba0\u7269\u6709\u7740\u60a0\u4e45\u7684\u5173\u7cfb\u3002\u5b83\u59cb\u4e8e\u81ed\u540d\u662d\u8457\u7684 Pets.com\u3002\u867d\u7136\u4e0d\u5e78\u7684\u662f\uff0c\u4e1a\u52a1\u5d29\u6e83\u4e86\uff0c\u7ecf\u6d4e\u4e5f\u5d29\u6e83\u4e86\uff0c\u4f46\u5b83\u786e\u7acb\u4e86\u5728\u7ebf\u7684\u5b58\u5728\u3002\u7ecf\u6d4e\u590d\u82cf\u4e86\uff0c\u5bf9\u4e92\u8054\u7f51\u7684\u9700\u6c42\u4e5f\u6bd4\u4ee5\u524d\u66f4\u5f3a\u70c8\u4e86\u3002\u4e3a\u4e86\u5728\u7ebf\u5f00\u5c55\u4e1a\u52a1\uff0c\u6211\u4eec\u8fc7\u53bb\u5e38\u5e38\u8d2d\u4e70\u670d\u52a1\u5668\u786c\u4ef6\u8fdb\u884c\u8fd0\u8425\u3002\u6211\u4eec\u4ee5\u5c0a\u91cd\u7684\u65b9\u5f0f\u547d\u540d\u5b83\u4eec\u2014\u2014\u52a8\u7269\u3001\u9f99\u3001\u661f\u7403\u5927\u6218\u3001\u8461\u8404\u9152\u6216\u7535\u5f71\u89d2\u8272\u3002\u5c31\u50cf\u6211\u4eec\u7684\u5ba0\u7269\u4e00\u6837\uff0c\u6211\u4eec\u7167\u987e\u5b83\u4eec\u5e76\u4e86\u89e3\u5b83\u4eec\u7684\u6240\u6709\u602a\u7656\u3002\u5feb\u8fdb\u5230\u4eca\u5929\uff0c\u57fa\u7840\u8bbe\u65bd\u518d\u6b21\u88ab\u5ba0\u7269\u6df9\u6ca1\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u4ea4\u6362\u7684\u662f\u5ba0\u7269\u7167\u7247\uff0c\u800c\u4e0d\u662f\u5ba0\u7269\u7528\u54c1\u3002\u7a81\u7136\u95f4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5927\u91cf\u8fd9\u4e9b\u670d\u52a1\u5668\u3002\u6211\u4eec\u518d\u4e5f\u4e0d\u80fd\u7528\u5ba0\u7269\u6765\u547d\u540d\u5b83\u4eec\uff0c\u6211\u4eec\u4e5f\u4e0d\u592a\u5173\u5fc3\u5b83\u4eec\u80fd\u4e3a\u6211\u4eec\u505a\u4ec0\u4e48\u3002\u65e0\u8bba\u4e00\u4e2a\u5931\u8d25\uff0c\u8fd8\u6709\u53e6\u4e00\u4e2a\u7b49\u5f85\u63a5\u53d7\u8d1f\u8f7d\u3002\u5173\u95ed\u6574\u4e2a\u5de5\u5382\u4ee5\u5728\u4f20\u9001\u5e26\u4e0a\u8fdb\u884c\u7ef4\u62a4\u5de5\u4f5c\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u540c\u6837\uff0c\u5982\u679c\u5bf9\u8f6f\u4ef6\u7684\u67d0\u4e9b\u90e8\u5206\u8fdb\u884c\u7ef4\u62a4\uff0c\u5219\u8f6f\u4ef6\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u65e0\u6cd5\u4f7f\u7528\u4e5f\u662f\u65e0\u6cd5\u5bb9\u5fcd\u7684\u3002\u56e0\u6b64\uff0c\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u8f6f\u4ef6\u62c6\u5206\u4e3a\u66f4\u5c0f\u7684\u3001\u72ec\u7acb\u7684\u670d\u52a1\u3002\u5b83\u662f\u4e00\u7ec4\u7aef\u70b9\u5417\uff1f\u5c5e\u4e8e\u652f\u4ed8\u56e2\u961f\u6743\u9650\u7684\u7aef\u70b9\u7ec4\u5408\u8fd8\u662f\u4e3a\u591a\u4e2a\u56e2\u961f\u670d\u52a1\u7684\u5171\u4eab\u7ec4\u4ef6\uff1f\u6570\u636e\u4ed3\u5e93\uff0c\u8fce\u5408 API \u548c\u8ba1\u8d39\u56e2\u961f \u5728\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u60a8\u751a\u81f3\u4e0d\u77e5\u9053\u5b58\u5728\u7684\u8ba1\u7b97\u673a\u6545\u969c\u53ef\u80fd\u5bfc\u81f4\u60a8\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u65e0\u6cd5\u4f7f\u7528\u3002\n\u670d\u52a1\u7684\u5b9a\u4e49\u4f53\u73b0\u5728\u5931\u8d25\u7684\u5b9a\u4e49\u4e0a\u3002\u8f6f\u4ef6\u6a21\u5757\u7684\u4e00\u4e2a\u7406\u60f3\u8981\u6c42\u662f\u5b83\u4eec\u5e94\u8be5\u662f\u72ec\u7acb\u7684\u5e76\u4e14\u4e0d\u4f1a\u5931\u8d25\u800c\u5176\u4ed6\u6a21\u5757\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570\u8d44\u6e90\u6700\u7ec8\u4f1a\u7ea7\u8054/\u5931\u8d25\u3002\u4e00\u4e2a\u7406\u60f3\u7684\u8f6f\u4ef6\u5e94\u8be5\u8868\u73b0\u5f97\u51e0\u4e4e\u50cf\u4e00\u4e2a\u4eba\u4f53\u3002\u591a\u4e2a\u6d3b\u52a8\u90e8\u4ef6\u901a\u8fc7\u660e\u786e\u7684\u901a\u4fe1\u5408\u540c\u72ec\u7acb\u8fd0\u884c\uff0c\u4eab\u6709\u4e0e\u8f6f\u4ef6\u6240\u8ffd\u6c42\u7684\u76f8\u540c\u7a0b\u5ea6\u7684\u81ea\u7531\u3002\u5931\u8d25\u7684\u5b9a\u4e49\u4e0d\u662f\u5e03\u5c14\u503c Yes \u6216 No\u3002\u76f8\u53cd\uff0c\u5728\u67d0\u4e9b\u4e1c\u897f\u88ab\u8ba4\u4e3a\u53d1\u751f\u6545\u969c\u4e4b\u524d\u4f1a\u6709\u4e00\u6bb5\u65f6\u95f4\u7684\u6027\u80fd\u4e0b\u964d\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u4f7f KPI \u6700\u6709\u6548\uff0c\u5e94\u5c06\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u5b9a\u4e49\u3002\u793a\u4f8b\uff1a\u5bf9\u4e8e\u5a92\u4f53\u6d41\u670d\u52a1\u7684 KPI\uff0cProcessingLag \u6bd4 CPU \u5229\u7528\u7387\u66f4\u6709\u6548\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e0e\u670d\u52a1\u7c7b\u578b\u76f8\u5173\u7684\u5e38\u89c1 KPI \u793a\u4f8b\u3002\u76d1\u63a7\u670d\u52a1\u7684\u5173\u952e\u6027\u80fd\u6307\u6807\u7684\u8bc1\u660e\u5728\u4e8e\uff0c\u6700\u597d\u7684 KPI \u548c\u76d1\u63a7\u9700\u8981\u5bf9\u6545\u969c\u8fdb\u884c\u6700\u8f7b\u5fae\u7684\u68c0\u67e5\u3002\u4f46\u662f\uff0c\u76f8\u53cd\uff0c\u5b83\u7528\u4e8e\u5efa\u7acb\u7cfb\u7edf\u7684\u5176\u4ed6\u635f\u574f\u90e8\u5206\u3002\u4ee3\u7801\u4e0e\u670d\u52a1\u4e4b\u95f4\u7684\u4e00\u4e2a\u516c\u5e73\u533a\u522b\u662f\uff0c\u670d\u52a1\u53ea\u6709\u5728\u90e8\u7f72\u548c\u8fd0\u884c\u65f6\u624d\u6709\u610f\u4e49\u3002\u56e0\u6b64\uff0c\u4e3a\u7ee7\u7eed\u9a7b\u7559\u5728 Github \u4e2d\u4e14\u4ece\u672a\u90e8\u7f72\u8fc7\u7684\u8f6f\u4ef6\u5efa\u7acb\u670d\u52a1\u7ea7\u522b\u76ee\u6807\u5c06\u662f\u5f92\u52b3\u7684\u3002\u540c\u4e00\u670d\u52a1\u7684\u4e0d\u540c\u5b89\u88c5\u4f7f\u7528\u76f8\u540c\u7684 KPI\uff0c\u4f46\u5177\u6709\u4e0d\u540c\u7684\u9608\u503c\u3002 KPI \u5141\u8bb8\u5c06\u5c5e\u4e8e\u8981\u89c2\u5bdf\u7684\u670d\u52a1\u8303\u56f4\u7684\u6240\u6709\u7ec4\u4ef6\u548c\u90e8\u4ef6\u6346\u7ed1\u5728\u4e00\u8d77\u3002\u5b83\u4f7f\u60a8\u4e0d\u4f1a\u6709\u8fc7\u5206\u8b66\u544a\uff0c\u8fd9\u5bf9\u5b9e\u9645\u5065\u5eb7\u72b6\u51b5\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u3002\n\u8fd9\u662f\u4e00\u4e2a\u793a\u4f8b\uff1a\u51cc\u6668 3 \u70b9\u6d88\u8017 100% \u7684\u78c1\u76d8\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u53ef\u64cd\u4f5c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5176\u5bf9\u670d\u52a1 KPI \u7684\u5f71\u54cd\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u6ce8\u9500\u670d\u52a1\uff0c\u5e76\u4e14 KPI \u663e\u793a 99.999% \u7684\u53ef\u7528\u6027\uff0c\u5c3d\u7ba1\u78c1\u76d8\u6545\u969c\uff0c\u5b83\u53ef\u4ee5\u7b49\u5230\u65e9\u4e0a\u3002\u5b9e\u9645\u6307\u6807\u4e0e\u670d\u52a1\u53ca\u5176\u5065\u5eb7\u72b6\u51b5\u7684\u8fd9\u79cd\u76f8\u5173\u6027\u5141\u8bb8\u505a\u51fa\u6700\u57fa\u672c\u7684\u51b3\u5b9a\uff1b\u4e0b\u4e00\u4e2a\u51b2\u523a\u5e94\u8be5\u662f\u9762\u5411\u529f\u80fd\u8fd8\u662f\u7a33\u5b9a\u6027\uff1f\u53ef\u9760\u6027\u4e0d\u662f\u6218\u65f6\u53cd\u5e94\uff1b\u8fd9\u662f\u548c\u5e73\u65f6\u671f\u7684\u51c6\u5907\u3002\u8fd9\u79cd\u51c6\u5907\u662f\u4ee5\u529f\u80fd\u5f00\u53d1\u4e3a\u4ee3\u4ef7\u7684\u3002\u5982\u679c\u4e00\u4e2a\u670d\u52a1\u5728\u4e00\u4e2a\u591a\u6708\u7684\u65f6\u95f4\u91cc\u53ef\u4ee5\u65e0\u8bef\u5730\u5904\u7406 99.99% \u7684\u8bf7\u6c42\uff0c\u5e76\u4e14\u5728 20 \u6beb\u79d2\u5185\u6ca1\u6709\u9519\u8bef\uff0c\u90a3\u4e48\u5b83\u53ef\u4ee5\u4e3a\u65b0\u529f\u80fd\u63d0\u4f9b\u4e00\u70b9\u521b\u9020\u529b\uff0c\u8fd9\u603b\u662f\u5b58\u5728\u964d\u4f4e\u53ef\u9760\u6027\u6570\u5b57\u7684\u98ce\u9669\u3002\u76f8\u53cd\uff0c\u6027\u80fd\u592a\u5dee\u7684\u670d\u52a1\u5fc5\u987b\u5728\u65b0\u529f\u80fd\u4e4b\u524d\u52a0\u5f3a\u73b0\u6709\u90e8\u7f72\u3002\u4e00\u65e6\u601d\u7ef4\u8fc7\u7a0b\u5728\u5f71\u54cd\u4e0b\u4ece\u670d\u52a1\u5668\u548c\u7ec4\u4ef6\u8f6c\u79fb\u5230\u670d\u52a1\uff0c\u5f53\u4e0e\u4f9d\u8d56\u4fe1\u606f\u7ed3\u5408\u65f6\uff0c\u5b83\u53ef\u4ee5\u89e3\u9501\u5de8\u5927\u7684\u6536\u76ca\u3002\u5b83\u5141\u8bb8\u5feb\u901f\u505a\u51fa\u51b3\u7b56\uff0c\u56e0\u4e3a\u5728\u53d1\u751f\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\uff0c\u968f\u53eb\u968f\u5230\u7684\u5143\u5e05\u53ef\u4ee5\u4e0e\u5408\u9002\u7684\u56e2\u961f\u63a5\u6d3d\u3002\u5f53\u8fd9 9 \u4e2a\u6309\u5206\u949f\u8ba1\u7b97\u65f6\uff0c\u4e0a\u4e0b\u6e38\u670d\u52a1\u7684\u5feb\u901f\u68c0\u6d4b\u53ef\u4ee5\u5c06\u5e73\u5747\u68c0\u6d4b\u65f6\u95f4 (MTTD) \u964d\u4f4e\u5230\u4e2a\u4f4d\u6570\u5206\u949f\u4ee5\u4e0b\u3002\u5728\u4eba\u4eec\u610f\u8bc6\u5230\u4e4b\u524d\uff0c\u8ba8\u8bba\u4ece DevOps \u4e0e\u4ee3\u7801\u6216\u57fa\u7840\u8bbe\u65bd\u4e0e\u6d4b\u8bd5\u8f6c\u79fb\u5230\u201c\u652f\u4ed8\u63d0\u4f9b\u5546 X \u6b63\u5728\u964d\u7ea7\uff0c\u8ba9\u6211\u4eec\u7981\u7528 UPI \u4ee5\u652f\u6301\u6216\u5361\u4ee5\u9632\u6b62\u7ed3\u8d26\u5931\u8d25\u3002\u201d\n\u8fd9\u79cd\u80fd\u529b\u63d0\u9ad8\u4e86\u5c06\u65b0\u529f\u80fd\u53d1\u5e03\u5230\u4ea7\u54c1\u4e2d\u7684\u654f\u6377\u6027\u548c\u4fe1\u5fc3\u3002\u56e0\u6b64\uff0c\u4e0b\u6b21\u5f53\u60a8\u770b\u5230 Kafka OfflinePartitionsCount \u589e\u52a0\u7684\u8b66\u62a5\u65f6\uff0c\u53ea\u9700\u901a\u8fc7\u8be2\u95ee\u54ea\u4e9b\u670d\u52a1 KPI \u53d7\u5230\u5f71\u54cd\u4ee5\u53ca\u5f71\u54cd\u7a0b\u5ea6\u6765\u76f4\u63a5\u8bbe\u7f6e\u5b83\u4eec\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u54ea\u4e2a\u4e3b\u9898\u7684\u5904\u7406\u5ef6\u8fdf\u589e\u52a0\u4e86\u591a\u5c11\uff0c\u6700\u540e\uff0c\u6b64\u8b66\u62a5\u4f1a\u5f71\u54cd\u54ea\u4e2a\u670d\u52a1\u7684\u65b0\u9c9c\u5ea6\uff1f\u4e0e\u5b9e\u4f53\u4e1a\u52a1\u76f8\u6bd4\uff0c\u4f7f\u8f6f\u4ef6\u4e1a\u52a1\u5982\u6b64\u6210\u529f\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\u53d8\u5316\u7684\u901f\u5ea6\u3002\u5f53\u60a8\u5f00\u59cb\u89c2\u5bdf\u4e0e\u6d88\u8d39\u8005\u4f53\u9a8c\u76f8\u5173\u7684\u6bcf\u4e00\u4e2a\u6545\u969c\u65f6\uff0c\u6240\u6709\u53ea\u662f\u6570\u636e\u7684\u4e1c\u897f\u90fd\u53d8\u6210\u4e86\u53ef\u64cd\u4f5c\u7684\u77e5\u8bc6\u3002\u77e5\u8bc6\u7684\u529b\u91cf\u548c\u5bf9\u65e9\u671f\u672a\u77e5\u4e8b\u7269\u7684\u4e86\u89e3\u4f7f\u6211\u4eec\u80fd\u591f\u81ea\u4fe1\u800c\u53ef\u9760\u5730\u505a\u51fa\u6539\u53d8\u3002\u53ea\u8981\u4ea7\u54c1\u4e0d\u62b1\u6028\uff0c\u60a8\u5c31\u4e0d\u518d\u5173\u5fc3\u5e95\u5c42\u7ec4\u4ef6\u7684\u4e2a\u6027\u5316\u3002\u5e95\u5c42\u7ec4\u4ef6\u53d8\u6210\u4e86\u725b\uff0c\u670d\u52a1\u53d8\u6210\u4e86\u4f60\u6700\u5173\u5fc3\u7684\u65b0\u5ba0\u7269\u3002\u8fd9\u79cd\u5bf9\u670d\u52a1\u7684\u65e0\u6761\u4ef6\u5173\u6000\u662f\u8f6f\u4ef6\u53ef\u9760\u6027\u7684\u5173\u952e\uff01 Last9 \u662f\u4e00\u4e2a\u8f6f\u4ef6\u53ef\u9760\u6027\u5e73\u53f0\uff0c\u5141\u8bb8\u60a8\u5c06\u8f6f\u4ef6\u89c6\u4e3a\u670d\u52a1\u4f18\u5148\u3002\u5b83\u9f13\u52b1\u60a8\u66f4\u591a\u5730\u5173\u6ce8\u670d\u52a1 KPI\uff0c\u4e5f\u79f0\u4e3a\u670d\u52a1\u6c34\u5e73\u6307\u6807 (SLI)\uff0c\u800c\u4e0d\u662f\u5206\u6563\u4e3a\u4e1a\u52a1\u6307\u6807\u3001\u6027\u80fd\u6307\u6807\u6216\u57fa\u7840\u8bbe\u65bd\u7684\u5355\u4e2a\u6307\u6807\u3002\u901a\u8fc7\u6574\u4f53\u51cf\u5c11 MTTD \u548c\u8b66\u62a5\u75b2\u52b3\uff0c\u6700\u7ec8\u8d62\u5bb6\u662f\u60a8\u7684\u5ba2\u6237\u3002\u6211\u7ed9\u4f60\u7559\u4e0b\u4e00\u4e2a\u60f3\u8c61\uff1b\u4e0b\u6b21\u60a8\u8981\u5728\u51cc\u6668 3 \u70b9\u8fdb\u884c\u6570\u636e\u5e93\u66f4\u6539\u65f6\uff0c\u60f3\u8c61\u4e00\u4e0b\u80fd\u591f\u5728\u6e05\u695a\u4e86\u89e3\u8be5\u6b21\u8981\u505c\u673a\u7684\u6240\u6709\u5f71\u54cd\u6709\u591a\u5927\u548c\u5f71\u54cd\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u8fc1\u79fb\uff01", "note_en": "The Internet and Pets have an old relationship. It started with the infamous   Pets.com. While unfortunately, the business crashed, and so did the economy, it established that online was here to stay. The economy resurrected, and so did the need for the Internet, stronger than before.\n  To run a business online, we used to buy server hardware for operations. We named these with respect\u2014animals, dragons, star wars, wines, or movie characters.  Just like our pets, we attended to them with care and understood all their quirks.\n Fast forward to today, Infrastructure  is overwhelmed with pets again. This time around, we are exchanging pet photos and not pet supplies. Suddenly, we have a flock of these servers at our disposal. No longer can we name them after pets, and we care less about the tricks they could do for us. No matter if one fails, there is another one waiting to entertain the load.\n   It is unacceptable for an entire factory to be shut for maintenance work on a conveyor belt. Likewise, it is intolerable for software as a whole to be unserviceable in the event of maintenance on a few parts of it. So the simple solution was to split the software into more minor, independent services.\n  Is it a group of  Endpoints? Combination of endpoints that fall under the purview of a payment team\n   Or shared components serving  multiple teams? A data warehouse, catering to the API and Billing teams\n    A  distributed system is  one in which the failure of a  computer you didn&#39;t even  know existed can render your own  computer unusable.\n The definition of a Service manifests from the definition of failure. An Ideal ask from a software module is that they should be independent and not fail while other modules may fail, but in reality, most resources end up cascading/failing together.\n   An ideal software should behave almost like a human body. Multiple moving parts are functioning independently with explicit communication contracts, enjoying the same  degree of freedom that a Software aspires.\n The definition of failure is not a boolean Yes or a No. Instead, there is a period of degraded performance before something is considered broken down. Therefore, for KPIs to be most effective, they should be defined for the Service as a whole.  Example: For KPIs of a media streaming service,  ProcessingLag is way more effective than  CPU utilization.\n Here\u2019s an example of some common KPIs that are relevant based on the type of Service.\n  The testament of monitoring Key Performance Indicators of a Service lies in the fact that the best KPIs and monitoring require the slightest inspection on failures. But, instead, it is used to establish other broken parts of the system.\n A fair distinction between  code vs. service is that a service should only come to meaning when deployed and running. Thus, it would be futile to establish Service Level Objectives for a piece of software that continues to reside in Github and has never been deployed. Different  installations of the same service are served with the same KPIs but with different thresholds.\n   KPIs allow tying all components and parts that fall under the purview of a Service to be observed together. It allows you not to have throw-over-the-wall alerts, which have little or no bearing on the actual health.\n Here\u2019s an  example: A disk consuming  100% at 3 AM may or may not be actionable depending on its impact on service KPI. For instance, if it\u2019s a logout service and the KPI says  99.999% availability despite a disk failure, It can wait till the morning.\n Such correlation of actual metrics to Services and their health allows for the most fundamental decision to be made; Should the next sprint be towards features or stability?  Reliability is not a war-time reaction; it\u2019s a peace-time preparation.\n This preparation comes at the cost of feature development. If a service has been serving 99.99% of requests without errors and within 20ms for over a month, it can afford a bit of creativity towards new features, which will always present a risk of bringing down the reliability numbers. On the contrary, a service performing too poorly must strengthen the existing deployments ahead of new features.\n    Once the thought process has moved away from Servers and Components to Service under the impact, it can unlock tremendous gains when coupled with dependency information.\n It allows speedy decision-making because the on-call marshal can engage the right team in case of an Impact.\n When these 9&#39;s are counted by the minute, quick detection of upstream and downstream services can bring down the Mean Time to Detect (MTTD) to under single-digit minutes.\n Before one realizes it, The discussion moves from DevOps vs. Code or Infra vs. Testing to \u00a0&#34;Payment provider X is degrading, let&#39;s disable UPI in favor or card to prevent checkout frustrations.&#34;\n This ability improves the agility and confidence of releasing new features into your product. So next time you see an alert that says Kafka OfflinePartitionsCount has increased, just set them straight by asking what service KPI is being impacted and by how much. In this case, what is the increase in processing  Lag for what topic, and lastly, will this alert impact what Service\u2019s  freshness?\n  The fundamental difference that makes Software business so successful, compared with physical counterparts, is the speed of change.\n When you start observing every failure correlated with consumer experience, everything that was just data becomes actionable knowledge. The power of knowledge and knowing the earlier unknown allows us to make changes confidently and reliably. You stop caring about the individuality of the underlying components as long as the product isn\u2019t complaining. The underlying  components become the cattle, and the  services become the new Pet that you tend to with your utmost care.  This unconditional care for services is the crux of software reliability!\n Last9 is a platform for Software reliability that allows you to view your software as Services-first. It encourages you to pay more attention to Service KPIs, also referred to as Service Level Indicators (SLIs), instead of individual metrics fragmented as business metrics, performance metrics, or Infrastructure. By overall reduction in MTTD and alert fatigue, the end winner is your customer.\n I leave you with an Imagination; Next time you are about to make a database change at 3 AM, imagine being able to perform the migration with a clear understanding of how much and where all the impact of that minor downtime will be!", "posttime": "2021-08-03 03:04:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89c2\u5bdf,observe,\u670d\u52a1", "title": "\u89c2\u5bdf\u670d\u52a1\uff1b\u4e0d\u662f\u670d\u52a1\u5668", "title_en": "Observe a Service; Not a Server", "transed": 1, "url": "https://blog.last9.io/services-not-server-observability/", "via": "", "real_tags": ["\u89c2\u5bdf", "observe", "\u670d\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "1bdd0419bc9746cad6b18131c00d3d21.png", "infoid": 1071268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Heap \u662f\u4e00\u4e2a\u6570\u5b57\u6d1e\u5bdf\u5e73\u53f0\uff0c\u53ef\u81ea\u52a8\u6355\u83b7 Web \u548c\u79fb\u52a8\u884c\u4e3a\uff0c\u4f8b\u5982\u9875\u9762\u67e5\u770b\u3001\u70b9\u51fb\u548c\u70b9\u51fb\u3002\u6211\u4eec\u6700\u8fd1\u53d1\u5e03\u4e86 Effort Analysis\uff0c\u8fd9\u662f\u4e00\u79cd\u8ba9 Heap \u5ba2\u6237\u67e5\u770b\u6f0f\u6597\u5185\u6bcf\u4e2a\u6b65\u9aa4\u4e4b\u95f4\u4ea4\u4e92\u6b21\u6570\u548c\u79d2\u6570\u7684\u4e2d\u4f4d\u6570\u7684\u65b9\u6cd5\u3002\u5b83\u7684\u5916\u89c2\u5982\u4e0b\uff1a \u4e3a\u4e86\u6784\u5efa\u6b64\u529f\u80fd\uff0c\u6211\u4eec\u9700\u8981\u7f16\u5199\u4e00\u4e2a\u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u53ef\u4ee5\u5feb\u901f\u626b\u63cf\u8d85\u8fc7 10 \u4ebf\u884c\u7684\u4e8b\u4ef6\u6570\u636e\u3002\u4f46\u662f\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u5f00\u59cb\u7814\u7a76\u8fd9\u4e2a\u529f\u80fd\u65f6\uff0c\u626b\u63cf\u6570\u636e\u7684\u65f6\u95f4\u592a\u957f\u4e86\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u627e\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5c06\u8be5\u529f\u80fd\u7684 p90 \u6027\u80fd\u901f\u5ea6\u63d0\u9ad8\u4e00\u500d\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u89e3\u51b3 Postgres \u89c4\u5212\u5668\u6839\u636e Postgres \u6587\u6863\u201c\u4e0d\u662f\u5f88\u806a\u660e\u201d\u7684\u60c5\u51b5\u3002\u8fd9\u4e2a Postgres \u602a\u7656\u4ee4\u4eba\u60ca\u8bb6\u5730\u963b\u6b62\u4e86\u73b0\u6709\u7d22\u5f15\u652f\u6301\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u8fd9\u7bc7\u6587\u7ae0\u662f\u5173\u4e8e\u5bfc\u81f4\u6211\u4eec\u7684\u6027\u80fd\u95ee\u9898\u7684\u602a\u7656\u4ee5\u53ca\u6211\u4eec\u7528\u6765\u5b9e\u73b0 2 \u500d\u6027\u80fd\u80dc\u5229\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u9996\u5148\uff0c\u5feb\u901f\u56de\u987e\u4e00\u4e0b\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u7d22\u5f15\u662f\u6570\u636e\u5e93\u4e2d\u7684\u8f85\u52a9\u6570\u636e\u7ed3\u6784\uff0c\u67e5\u8be2\u89c4\u5212\u5668\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u52a0\u5feb\u67d0\u4e9b\u67e5\u8be2\u7684\u901f\u5ea6\u3002\u4f8b\u5982\uff0cuser_id \u5217\u4e0a\u7684\u7d22\u5f15\u53ef\u4ee5\u66f4\u5feb\u5730\u67e5\u627e\u7279\u5b9a user_id\u3002\u4ec5\u7d22\u5f15\u626b\u63cf\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u64cd\u4f5c\uff0c\u5728\u8fd9\u79cd\u64cd\u4f5c\u4e2d\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\u4ec5\u4f7f\u7528\u7d22\u5f15\u4e2d\u7684\u4fe1\u606f\u6765\u6ee1\u8db3\u67e5\u8be2\uff0c\u800c\u65e0\u9700\u8bfb\u53d6\u8868\u7684\u5b9e\u9645\u884c\u3002\u4f8b\u5982\uff0c\u5806\u4e0a\u7684\u4e00\u4e2a\u5178\u578b\u7d22\u5f15\u5305\u542b\u4e00\u4e2a\u4e8b\u4ef6\u7684\u65f6\u95f4\u548c\u6267\u884c\u8be5\u4e8b\u4ef6\u7684\u7528\u6237\u7684 user_id\uff1a\u7ed9\u5b9a\u8fd9\u4e2a\u8868\u548c\u7d22\u5f15\uff0c\u67e5\u8be2\u8ba1\u5212\u5668\u5c06\u5bf9\u50cf SELECT user_id FROM events WHERE \u8fd9\u6837\u7684\u67e5\u8be2\u4f7f\u7528\u4ec5\u7d22\u5f15\u626b\u63cftime &gt; now() - &#39;7 days&#39;::interval \u56e0\u4e3a\u6211\u4eec\u9700\u8981\u7684\u552f\u4e00\u503c user_id \u5728\u7d22\u5f15\u4e2d\u3002\u5bf9\u4e8e\u7c7b\u4f3c SELECT * FROM events WHERE time &gt; now() - &#39;7 days&#39;::interval \u7684\u7a0d\u5fae\u4e0d\u540c\u7684\u67e5\u8be2\uff0c\u67e5\u8be2\u8ba1\u5212\u5668\u4e0d\u80fd\u4f7f\u7528\u4ec5\u7d22\u5f15\u626b\u63cf\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u4e0d\u5728\u6b64\u7d22\u5f15\u4e2d\u7684\u5217\u3002\u89c4\u5212\u5668\u53ef\u80fd [1] \u4f7f\u7528\u7d22\u5f15\u626b\u63cf\u4ee3\u66ff\u3002\n\u987e\u540d\u601d\u4e49\uff0c\u7d22\u5f15\u626b\u63cf\u4f1a\u626b\u63cf\u7d22\u5f15\u4ee5\u67e5\u627e\u6ee1\u8db3\u67e5\u8be2\u8c13\u8bcd\u7684\u884c\u3002\u4f46\u662f\uff0c\u5b83\u8fd8\u4ece\u8868\u672c\u8eab\u8bfb\u53d6\u6570\u636e\u9875\uff0c\u4ee5\u8fd4\u56de\u548c/\u6216\u5bf9\u4e0d\u5728\u7d22\u5f15\u4e2d\u7684\u503c\u6267\u884c\u8ba1\u7b97\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u6b65\u9aa4\u901a\u5e38\u4f1a\u4f7f\u7d22\u5f15\u626b\u63cf\u6bd4\u4ec5\u7d22\u5f15\u626b\u63cf\u6162\u3002\u6211\u4eec\u7684\u8bb8\u591a\u5ba2\u6237\u6bcf\u5468\u8bb0\u5f55\u8d85\u8fc7 1 \u4ebf\u4e2a\u4e8b\u4ef6\uff0c\u8fd9\u610f\u5473\u7740 90 \u5929\u7684\u6f0f\u6597\u9700\u8981\u626b\u63cf\u8d85\u8fc7 10 \u4ebf\u884c\u3002\u7ed3\u679c\uff0c\u67e5\u8be2\u7684 p90 \u5927\u7ea6\u4e3a 20 \u79d2\uff0c\u6bd4\u6211\u4eec\u6700\u521d\u542f\u52a8\u65f6\u60f3\u8981\u7684\u8981\u6162\u5f97\u591a\u3002\u8fd9\u662f\u652f\u6301 Effort Analysis \u7684\u521d\u59cb\u67e5\u8be2\u7684\u7b80\u5316\u7248\u672c\uff1a \u6700\u521d\uff0c\u652f\u6301 Effort Analysis \u7684\u67e5\u8be2\u4e0d\u4f7f\u7528\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u8fd9\u8ba9\u6211\u4eec\u611f\u5230\u60ca\u8bb6\uff0c\u56e0\u4e3a\u6211\u4eec\u6709\u4e00\u4e2a\u5982\u4e0b\u6240\u793a\u7684\u7d22\u5f15\uff1a \u8fd9\u4e2a\u7d22\u5f15\u6ca1\u6709\u4ea7\u751f\u4ec5\u7d22\u5f15\u626b\u63cf\u7684\u539f\u56e0\u662f\u56e0\u4e3a Postgres \u7684\u4e00\u4e2a\u4ee4\u4eba\u60ca\u8bb6\u7684\u602a\u7656\u3002\u8fd9\u662f\u53d1\u751f\u7684\u4e8b\u60c5\uff1a\u867d\u7136 data -&gt;&gt; &#39;type&#39; \u5728\u7d22\u5f15\u4e2d\uff0c\u67e5\u8be2\u8ba1\u5212\u5668\u8ba4\u4e3a\u5b83\u4e5f\u9700\u8981\u5728\u7d22\u5f15\u4e2d\u5305\u542b\u6570\u636e\uff0c\u5373\u4f7f\u6570\u636e\u672c\u8eab\u4ece\u672a\u5728\u67e5\u8be2\u4e2d\u88ab\u5f15\u7528\uff0c\u9664\u4e86\u4f5c\u4e3a\u67e5\u8be2\u7684\u4e00\u90e8\u5206\u6570\u636e -&gt;&gt; &#39;\u7c7b\u578b&#39; \u8868\u8fbe\u5f0f\u3002\u5982\u679c\u8fd9\u5bf9\u8ba1\u5212\u8005\u6765\u8bf4\u4f3c\u4e4e\u4e0d\u662f\u4e00\u79cd\u806a\u660e\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0cPostgres \u6587\u6863\u540c\u610f\u60a8\u7684\u770b\u6cd5\uff1a\u53ea\u8981\u67e5\u8be2\u5728\u5217\u4e0a\u4f7f\u7528\u51fd\u6570\u6216\u8fd0\u7b97\u7b26\uff0c\u5c31\u4f1a\u51fa\u73b0\u6b64\u95ee\u9898\u3002 \uff08\u8fd0\u7b97\u7b26\u53ea\u662f\u51fd\u6570\u7684\u8bed\u6cd5\u7cd6\u3002[2]\uff09\u5982\u679c\u60a8\u7684\u67e5\u8be2\u5f15\u7528 f(x)\uff0c\u5219\u5fc5\u987b\u5728\u7d22\u5f15\u4e2d\u5305\u542b f(x) \u548c x \u624d\u80fd\u83b7\u5f97\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u968f\u673a\u7684\u9ed1\u5ba2\u653b\u51fb\uff1b\u8fd9\u662f Postgres \u6587\u6863\u4e2d\u9488\u5bf9\u6b64\u95ee\u9898\u7684\u5efa\u8bae\u89e3\u51b3\u65b9\u6cd5\u3002\u7136\u800c\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0cx \u662f\u6570\u636e\uff0c\u5e76\u4e14\u56e0\u4e3a\u6570\u636e\u5305\u542b\u4e0e\u4e8b\u4ef6\u76f8\u5173\u7684\u5927\u90e8\u5206\u6570\u636e\uff08\u4f8b\u5982\uff0c\u7c7b\u578b\u3001\u4e8b\u4ef6\u53d1\u751f\u7684\u9875\u9762 url \u7b49\uff09\uff0c[3] \u8fd9\u79cd\u53d8\u901a\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u63a5\u53d7\u7684\u5927\u7d22\u5f15\u3002\n\u6211\u4eec\u521a\u521a\u770b\u5230\uff0c\u5982\u679c\u60a8\u7684\u67e5\u8be2\u5305\u542b\u4e00\u5217\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u6216\u64cd\u4f5c\u6570\uff0c\u90a3\u4e48\u8be5\u5217\u662f\u5426\u5728\u7d22\u5f15\u4e2d\u5e76\u4e0d\u91cd\u8981\uff1b\u60a8\u4ecd\u7136\u4e0d\u4f1a\u83b7\u5f97\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u5217\u4ec5\u7528\u4e8e\u4e0e\u90e8\u5206\u7d22\u5f15\u7684\u8c13\u8bcd\u5339\u914d\u7684\u8c13\u8bcd\u4e2d\uff0c\u5219\u89c4\u5212\u5668\u8db3\u591f\u806a\u660e\uff0c\u53ef\u4ee5\u610f\u8bc6\u5230\u5b83\u4e0d\u9700\u8981\u8bbf\u95ee\u8868\u6765\u8fc7\u6ee4\u7ed3\u679c\uff0c\u5373\u4f7f\u60a8\u7684\u5217\u662f\u4e00\u4e2a\u51fd\u6570\u53c2\u6570\u6216\u64cd\u4f5c\u6570\u3002 [4] \u8fd9\u662f\u6211\u4eec\u4e3a\u63d0\u9ad8\u6027\u80fd\u800c\u91c7\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3\u5b83\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5b83\u5982\u4f55\u5e94\u7528\u4e8e\u6211\u4eec\u4e0a\u9762\u7684\u793a\u4f8b\u67e5\u8be2\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u67e5\u8be2\u4e2d\uff0c\u6211\u4eec\u4ec5\u5728\u67e5\u8be2\u7684 WHERE \u5b50\u53e5\u4e2d\u5f15\u7528\u4e86\u6570\u636e -&gt;&gt; &#39;type&#39;\u3002\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u8fd4\u56de\u6570\u636e\u7684\u503c -&gt;&gt; &#39;type&#39;\u3002\u56e0\u6b64\uff0cPostgres \u9700\u8981\u8bbf\u95ee\u8be5\u8868\u7684\u552f\u4e00\u539f\u56e0\u662f\u786e\u4fdd data -&gt;&gt; &#39;type&#39; IN (&#39;click&#39;, &#39;change&#39;, &#39;touch&#39;) \u5bf9\u4e8e\u8fd4\u56de\u7ed3\u679c\u7684\u6bcf\u4e00\u884c\u90fd\u4e3a\u771f\uff0c\u4f46\u7531\u4e8e\u90e8\u5206\u7d22\u5f15\u662f\u5982\u4f55\u6784\u5efa\u7684\uff0c\u8fd9\u6b21\u8bbf\u95ee\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\u4f5c\u4e3a\u590d\u4e60\uff0c\u90e8\u5206\u7d22\u5f15\u4ec5\u5305\u542b\u4e0e\u8c13\u8bcd\u5339\u914d\u7684\u884c\u7684\u6761\u76ee\u3002\u4f8b\u5982\uff0c\u8fd9\u4e2a\u90e8\u5206\u7d22\u5f15\u53ea\u5305\u542b\u6570\u636e -&gt;&gt; &#39;type&#39; IN (&#39;click&#39;, &#39;change&#39;, &#39;touch&#39;) \u7684\u6761\u76ee\uff1a\u56e0\u4e3a Postgres \u77e5\u9053 ea_index \u53ea\u6709\u6570\u636e -&gt;&gt; &#39;type&#39; IN ( &#39;click&#39;, &#39;change&#39;, &#39;touch&#39;)\uff0c\u8fd9\u6837\u7684\u67e5\u8be2\uff1aSELECT time FROM funnel_events WHERE data -&gt;&gt; &#39;type&#39; IN (&#39;click&#39;, &#39;change&#39;, &#39;touch&#39;) \u5c06\u5bfc\u81f4\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u6211\u4eec\u7684\u793a\u4f8b\u67e5\u8be2\u5f15\u7528\u4e86 step_num\u3001time\u3001num_actions\u3001time_engaged \u548c data \u5217\u3002 step_num\u3001time\u3001num_actions\u548ctime_engaged\u90fd\u5728\u7d22\u5f15\u4e2d\uff0cdata\u53ea\u5728where\u5b50\u53e5\u4e2d\u901a\u8fc7data -&gt;&gt; &#39;type&#39; IN (&#39;click&#39;, &#39;change&#39;)\u5f15\u7528\u3002\u56e0\u4e3a\u67e5\u8be2\u8c13\u8bcd\u5339\u914d\u90e8\u5206\u7d22\u5f15\u8c13\u8bcd\uff0c\u6240\u4ee5\u89c4\u5212\u5668\u77e5\u9053\u7d22\u5f15\u53ea\u5305\u542b\u6ee1\u8db3\u67e5\u8be2\u8c13\u8bcd\u7684\u503c\uff0c\u4e0d\u9700\u8981\u8bbf\u95ee\u8868\u6765\u8fc7\u6ee4\u626b\u63cf\u7d22\u5f15\u7684\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6700\u7ec8\u5bf9\u793a\u4f8b\u67e5\u8be2\u8fdb\u884c\u4e86\u4ec5\u7d22\u5f15\u626b\u63cf\u3002\u6b64\u53d8\u901a\u65b9\u6cd5\u4f7f Effort Analysis \u7684 p90 \u6027\u80fd\u63d0\u9ad8\u4e86 2 \u500d\uff0c\u5e76\u4e14\u8fd8\u4f7f\u6211\u4eec\u7684 p70 \u548c p50 \u67e5\u8be2\u901f\u5ea6\u66f4\u5feb\uff1a\u53ea\u6709\u5728\u67e5\u770b\u8fd9\u4e9b\u7ed3\u679c\u540e\uff0c\u6211\u4eec\u624d\u5b8c\u5168\u4e86\u89e3\u5bfc\u81f4\u6b64\u6027\u80fd\u95ee\u9898\u7684\u602a\u7656\u4ee5\u53ca\u89e3\u51b3\u8be5\u95ee\u9898\u7684\u53d8\u901a\u65b9\u6cd5\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u6211\u4eec\u5f88\u5e78\u8fd0\u3002\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u8fd9\u4e9b Postgres \u4e8b\u5b9e\uff0c\u5176\u4ed6\u56e2\u961f\u53ef\u4ee5\u66f4\u52a0\u614e\u91cd\u5730\u63d0\u9ad8\u4ed6\u4eec\u7684\u67e5\u8be2\u6027\u80fd\u3002\n\u5982\u679c\u60a8\u559c\u6b22\u5bf9\u4f18\u5316 Postgres \u548c/\u6216 citus \u67e5\u8be2\u611f\u5174\u8da3\uff0c\u8bf7\u5728 Twitter @philosohacker \u4e0a@-me\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u5728\u5f53\u524d\u7684\u5de5\u4f5c\u4e2d\u6ca1\u6709\u8db3\u591f\u7684\u673a\u4f1a\u4f18\u5316\u67e5\u8be2\uff0c\u6211\u4eec\u6b63\u5728\u62db\u8058\uff01\u67e5\u770b\u6211\u4eec\u7684\u56e2\u961f\u548c\u7a7a\u7f3a\u804c\u4f4d\u3002 [1] Postgres \u4f7f\u7528\u7d22\u5f15\u626b\u63cf\u8fd8\u662f\u987a\u5e8f\u626b\u63cf\u53d6\u51b3\u4e8e\u5b83\u9884\u8ba1\u9700\u8981\u4ece\u8868\u4e2d\u83b7\u53d6\u7684\u884c\u7684\u767e\u5206\u6bd4\u3002 [3] \u6211\u4eec\u77e5\u9053\u4e25\u91cd\u4f9d\u8d56 JSONB \u5217\u6709\u5f88\u591a\u7f3a\u70b9\u3002", "note_en": "Heap is a digital insights platform that automatically captures web and mobile behavior like page views, clicks, and taps. We recently shipped  Effort Analysis, a way for Heap customers to see the median number of interactions and seconds engaged between each step within a funnel. Here\u2019s what it looks like:\n  To build this feature, we needed to write a query that could quickly scan more than a billion rows of event data. But when we first started working on this feature, it took too long to scan the data.\n Fortunately, we found a way to double the speed of this feature&#39;s p90 performance. To do this, we had to work around a case where the Postgres planner is, according to the Postgres docs, \u201cnot very smart.\u201d This Postgres quirk surprisingly prevented an existing index from supporting an index-only scan. This post is about the quirk that caused our performance problem and the workaround we leveraged to achieve a 2x performance win.\n  First, a quick refresher on index-only scans. An index is a secondary data structure in your database that the query planner can use to make some queries faster. For example, an index on the  user_id column can make lookups of a specific  user_id faster. An index-only scan is a special kind of operation in which the database can satisfy a query with  just the information that\u2019s in the index, without having to read the table\u2019s actual rows.\n For example, a typical index at Heap contains the time of an event and the  user_id of the user who performed that event:\n    Given this table and index, the query planner would use an index-only scan for a query like  SELECT user_id FROM events WHERE time &gt; now() - \u20187 days\u2019::interval because the only value we need,  user_id, is in the index.\n For a slightly different query like  SELECT * FROM events WHERE time &gt; now() - \u20187 days\u2019::interval, the query planner couldn\u2019t use an index-only scan because we need columns that are not in this index. The planner may [1] use an index scan instead.\n An index scan, as the name implies, scans the index for rows that satisfy the query predicate. However, it also reads in pages of data from the table itself to return and/or perform computations on values that aren\u2019t in the index. This additional step often makes index scans slower than index-only scans.\n  Many of our clients record more than 100 million events a week, meaning a 90-day funnel would require scanning more than a billion rows. As a result, the p90 for the query was about 20 seconds, much slower than we wanted for our initial launch. Here\u2019s a simplified version of the initial query that powered Effort Analysis:\n  Initially, the query that powered Effort Analysis wasn\u2019t using an index-only scan. This surprised us because we had an index that looked like the following:\n  The reason this index didn\u2019t yield an index-only scan is because of a surprising Postgres quirk.\n  Here\u2019s what was happening: although  data -&gt;&gt; \u2018type\u2019 is in the index, the query planner thinks it also needs to have  data in the index,  even though  data  itself isn\u2019t ever referenced in the query except as a part of the  data -&gt;&gt; \u2018type\u2019  expression. If that doesn\u2019t seem like a smart way for the planner to work, the Postgres documentation agrees with you:\n  This problem arises any time a query uses a function or operator on a column. (Operators are just syntactic sugar for functions. [2]) If your query references  f(x), you must include  f(x)  and  x in your index to get an index-only scan. This isn\u2019t a random hack; it&#39;s the suggested workaround for this issue in\r the Postgres docs.\n However, in our case,  x is  data, and because  data contains most of the data associated with an event (e.g., type, page url where event occurred, etc.), [3] this workaround would result in an unacceptably large index.\n  We\u2019ve just seen that if your query includes a column as a function parameter or operand, it doesn\u2019t matter if that column is in the index; you still won\u2019t get an index-only scan. If, however, your column is only used in a predicate that matches the predicate of the partial index, the planner is smart enough to realize that it doesn\u2019t need to visit the table to filter down the result,  even if your column is a function parameter or operand. [4]\n This is the workaround we leveraged for our performance win. To better understand it, let\u2019s look at how it applies to our above example query. Notice that in our example query, we only reference  data -&gt;&gt; \u2018type\u2019 in the WHERE clause of the query. We aren\u2019t actually returning the value of  data -&gt;&gt; \u2018type\u2019. So the only reason Postgres would need to visit the table would be to ensure that  data -&gt;&gt; \u2018type\u2019 IN (\u2018click\u2019, \u2018change\u2019, \u2018touch\u2019) is true for each row of the returned result, but because of how partial indexes are constructed, this visit isn\u2019t necessary.\n As a refresher, partial indexes only contain entries for rows that match a predicate. For example, this partial index only contains entries where  data -&gt;&gt; \u2018type\u2019 IN (\u2018click\u2019, \u2018change\u2019, \u2018touch\u2019):\n  Because Postgres knows that  ea_index only has entries where  data -&gt;&gt; \u2018type\u2019 IN (\u2018click\u2019, \u2018change\u2019, \u2018touch\u2019), a query like:  SELECT time FROM funnel_events WHERE data -&gt;&gt; \u2018type\u2019 IN (\u2018click\u2019, \u2018change\u2019, \u2018touch\u2019) would result in an index-only scan.\n Our example query references the columns  step_num,  time,  num_actions,  time_engaged, and  data.  step_num, time,  num_actions, and  time_engaged are in the index, and  data is only referenced in the where clause via  data -&gt;&gt; \u2018type\u2019 IN (\u2018click\u2019, \u2018change\u2019). Because the query predicate matches the partial index predicate, the planner knows that the index only contains values that satisfy the query predicate, and it doesn\u2019t need to visit the table to filter down the results of scanning the index. Thus, we wind up with an index-only scan for our example query.\n  This workaround lead to a 2x p90 performance improvement for Effort Analysis, and it made our p70 and p50 query faster as well:\n  Only after looking at these results did we fully understand the quirk that caused this performance issue and the workaround that solved it. In some sense, we got lucky. We hope that by sharing these Postgres facts, other teams can be more deliberate about improving the performance of their queries.\n If you like nerding out about optimizing Postgres and/or citus queries, @-me on Twitter  @philosohacker, and if you\u2019re not getting enough opportunities to optimize queries at your current gig, we\u2019re hiring! Check out  our team and  open roles.\n  [1] Whether Postgres uses an index scan or a sequential scan depends on the percentage of rows it anticipates it will need to fetch from the table.\n  [3] We know that there are lots of downsides to relying this heavily on a JSONB column.", "posttime": "2021-08-03 03:04:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgres,case,\u67e5\u8be2", "title": "\u89e3\u51b3 Postgres \u89c4\u5212\u5668\u201c\u4e0d\u662f\u5f88\u806a\u660e\u201d\u7684\u6848\u4f8b", "title_en": "Working Around a Case Where the Postgres Planner Is \u201cNot Very Smart\u201d", "transed": 1, "url": "https://heap.io/blog/when-the-postgres-planner-is-not-very-smart", "via": "", "real_tags": ["postgres", "case", "\u67e5\u8be2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071267, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Jason A. Donenfeld Jason \u5728 zx2c4.com \u5468\u4e00 8 \u6708 2 \u65e5 17:27:37 UTC 2021 \u5927\u5bb6\u597d\uff0c\u7ecf\u8fc7\u51e0\u4e2a\u6708\u7684\u5de5\u4f5c\uff0cSimon \u548c\u6211\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03 WireGuardNT \u9879\u76ee\uff0c\u8fd9\u662f WireGuard \u5230 Windows \u5185\u6838\u7684\u672c\u5730\u7aef\u53e3\u3002\u8fd9\u662f\u4e00\u9879\u610f\u4e49\u91cd\u5927\u7684\u5de5\u4f5c\uff0c\u5982\u679c\u60a8\u6ce8\u610f\u5230\u6211\u5927\u7ea6\u4e24\u4e2a\u6708\u6ca1\u6709\u9605\u8bfb\u7535\u5b50\u90ae\u4ef6\uff0c\u73b0\u5728\u60a8\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e86\u3002\u4ee3\u7801\u5e93\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4ece\u8be5\u4ee3\u7801\u5df2\u7ecf\u6536\u5230\u7684\u5206\u6790\u548c\u5ba1\u67e5\u4e2d\u53d7\u76ca\u3002\u5728\u6700\u521d\u7684\u79fb\u690d\u5de5\u4f5c\u53d6\u5f97\u6210\u529f\u540e\uff0cNT \u4ee3\u7801\u5e93\u8fc5\u901f\u5206\u5316\uff0c\u4ee5\u5f88\u597d\u5730\u9002\u5e94\u672c\u673a NTism \u548c NDIS\uff08Windows \u7f51\u7edc\u5806\u6808\uff09API\u3002\u6700\u7ec8\u7ed3\u679c\u662f\u4e3a NTkernel \u6df1\u5ea6\u96c6\u6210\u548c\u9ad8\u6027\u80fd\u7684 WireGuard \u5b9e\u73b0\uff0c\u5b83\u5145\u5206\u5229\u7528\u4e86 NT \u5185\u6838\u548c NDIS \u529f\u80fd\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u9605\u8bfb\u8be5\u9879\u76ee\u5e76\u67e5\u770b\u5176\u6e90\u4ee3\u7801\uff1ahttps://git\u3002 zx2c4.com/wireguard-nt/about/\u5bf9\u4e8eWindows\u5e73\u53f0\uff0c\u8fd9\u4e2a\u9879\u76ee\u5bf9\u6211\u6765\u8bf4\u610f\u4e49\u91cd\u5927\uff0c\u56e0\u4e3a\u5b83\u6807\u5fd7\u7740WireGuard\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u4e25\u8083\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u4ef6\uff0c\u610f\u5473\u7740\u66f4\u4e25\u8083\u7684\u4f7f\u7528\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u5f00\u6e90\u7248\u672c\uff0c\u56e0\u4e3a\u901a\u5e38\u6ca1\u6709\u90a3\u4e48\u591a\uff08\u5c3d\u7ba1\u6709\u4e00\u4e9b\uff09\u5f00\u6e90\u52a0\u5bc6 NICdriver \u4ee3\u7801\u5df2\u7ecf\u5728\u90a3\u91cc\u505a\u8fd9\u79cd\u4e8b\u60c5\uff0c\u540c\u65f6\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u5c06\u5404\u79cd\u5185\u6838\u529f\u80fd\u6574\u5408\u5728\u4e00\u8d77\u3002 \u6784\u5efa\u4ec0\u4e48 WireGuardNT\u662f\uff0c\u5728\u6b64\u4e4b\u524d\uff0cWindows_currently_ \u4e0a\u7684 WireGuard \u5982\u4f55\u5de5\u4f5c\u7684\u4e00\u4e9b\u80cc\u666f\u53ef\u80fd\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\u3002\u6211\u4eec\u76ee\u524d\u6709\u8de8\u5e73\u53f0\u7684 Go \u4ee3\u7801\u5e93\uff0c\u79f0\u4e3a wireguard-go\uff0c\u5b83\u4f7f\u7528\u6211\u4eec\u5f00\u53d1\u7684\u901a\u7528 TUNdriver Wintun\uff08\u6709\u5173\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 wintun.net\uff09\u3002\u8be5\u5b9e\u73b0\u5b58\u5728\u4e8e\u7528\u6237\u7a7a\u95f4\u4e2d\uff0c\u5e76\u5728 Wintun \u63a5\u53e3\u4e4b\u95f4\u4f20\u9001\u6570\u636e\u5305\u3002 WireGuardNT \u5c06\uff08\u6700\u7ec8\uff09\u53d6\u4ee3\u5b83\uff0c\u5c06\u6240\u6709 WireGuard \u534f\u8bae\u5b9e\u73b0\u76f4\u63a5\u653e\u5165\u7f51\u7edc\u5806\u6808\u4e2d\u4ee5\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u96c6\u6210\uff0c\u5c31\u50cf\u76ee\u524d\u5728 Linux\u3001OpenBSD \u548c FreeBSD \u4e0a\u6240\u505a\u7684\u90a3\u6837\u3002\u4f7f\u7528\u65e7\u7684wireguard-go/Wintun \u5b9e\u73b0\uff0c\u4e8b\u5b9e\u5728\u7528\u6237\u7a7a\u95f4\u610f\u5473\u7740\u5bf9\u4e8e\u4ece NIC \u5230\u8fbe\u5185\u6838\u5e76\u653e\u5165 UDP \u5957\u63a5\u5b57\u7f13\u51b2\u533a\u7684\u6bcf\u4e2a RX UDP \u6570\u636e\u5305\uff0c\u6709\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5207\u6362\u5230\u7528\u6237\u7a7a\u95f4\u4ee5\u63a5\u6536\u5b83\uff0c\u7136\u540e\u901a\u8fc7 Go \u8c03\u5ea6\u7a0b\u5e8f\u5bf9\u5176\u8fdb\u884c\u89e3\u5bc6\uff0c\u7136\u540e\u5199\u5165\u5230 Wintun \u7684\u73af\u5f62\u7f13\u51b2\u533a\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u6b21\u4e0a\u4e0b\u6587\u5207\u6362\u65f6\u5904\u7406\u5b83\u3002\u5bf9\u4e8e TX\uff0c\u4e8b\u60c5\u662f\u76f8\u53cd\u7684\uff1a\u7528\u6237\u7a7a\u95f4\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u7136\u540e\u6709\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5207\u6362\u5230\u5185\u6838\u5c06\u5b83\u4ea4\u7ed9 Wintun\uff0c\u5b83\u628a\u5b83\u653e\u5230\u4e00\u4e2a\u73af\u5f62\u7f13\u51b2\u533a\u4e2d\uff0c\u7136\u540e\u6709\u53e6\u4e00\u4e2a\u5230\u7528\u6237\u7a7a\u95f4\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u5e76\u901a\u8fc7 Go \u8c03\u5ea6\u7a0b\u5e8f\u5230\u52a0\u5bc6\u5b83\uff0c\u7136\u540e\u5b83\u901a\u8fc7\u4e00\u4e2a\u5957\u63a5\u5b57\u53d1\u9001\uff0c\u8fd9\u6d89\u53ca\u53e6\u4e00\u4e2a\u5230\u53d1\u9001\u7684\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u6240\u6709\u7684\u73af\u5f62\u7f13\u51b2\u533a\u2014\u2014Wintun \u7684\u73af\u548c Winsock \u7684 RIO \u73af\u2014\u2014\u5c3d\u53ef\u80fd\u5730\u644a\u9500\u4e0a\u4e0b\u6587\u5207\u6362\u5e76\u4f7f\u5176\u76f8\u5f53\u5feb\uff0c\u4f46\u6240\u6709\u5b83\u4ecd\u7136\u6784\u6210\u5f00\u9500\u548c\u5ef6\u8fdf\u3002 WireGuardNT \u6446\u8131\u4e86\u6240\u6709\u8fd9\u4e9b\u3002\u867d\u7136\u73b0\u5728\u7684\u6027\u80fd\u76f8\u5f53\u4e0d\u9519\uff08\u5728\u6211\u7684\u5c0f\u6d4b\u8bd5\u76d2\u4e0a\u5927\u7ea6 7.5Gbps TX\uff09\uff0c\u4f46\u8fd8\u6ca1\u6709\u82b1\u5f88\u591a\u7cbe\u529b\u6765\u4f18\u5316\u5b83\uff0c\u800c\u4e14\u8fd8\u6709\u5f88\u591a\u6027\u80fd\u9700\u8981\u63d0\u9ad8\uff0c\u6211\u6000\u7591\uff0c\u5c24\u5176\u662f\u5f53\u6211\u4eec\u66f4\u591a\u5730\u4e86\u89e3 NT \u7684\u8c03\u5ea6\u7a0b\u5e8f\u548c\u7ebf\u7a0b\u6a21\u578b\u7ec6\u8282\u65f6\u3002\u7136\u800c\uff0c\u901a\u8fc7\u7b80\u5355\u5730\u8fdb\u5165\u5185\u6838\uff0c\u6211\u4eec\u663e\u7740\u51cf\u5c11\u4e86\u5ef6\u8fdf\u5e76\u6d88\u9664\u4e86wireguard-go/Wintun \u7684\u4e0a\u4e0b\u6587\u5207\u6362\u95ee\u9898\u3002\u7136\u800c\uff0c\u5927\u591a\u6570 Windows \u7528\u6237\u5e76\u4e0d\u771f\u6b63\u5173\u5fc3\u8d85\u8fc7 1Gbps \u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8fd9\u5c31\u662f\u4e8b\u60c5\u53d8\u5f97\u6709\u8da3\u7684\u5730\u65b9\u3002\u4f7f\u7528\u4ee5\u592a\u7f51\u8fde\u63a5\u7684 Windows \u7528\u6237\u5728\u4f7f\u7528\u65e7\u7684\u6162\u901fwireguard-go/Wintun \u65f6\u901a\u5e38\u4e0d\u4f1a\u9047\u5230\u63a5\u8fd1 1Gbps \u5de6\u53f3\u7684\u95ee\u9898\uff0c\u4f46\u662f\u901a\u8fc7 WiFi\uff0c\u8fd9\u4e9b\u7528\u6237\u901a\u5e38\u4f1a\u770b\u5230\u5927\u5e45\u51cf\u901f\u3002\u968f\u7740 WireGuardNT \u7684\u5ef6\u8fdf\u663e\u7740\u964d\u4f4e\uff0c\u8fd9\u4e9b\u51cf\u901f\u4f3c\u4e4e\u4e0d\u518d\u5b58\u5728\u3002 Jonathan Tooker \u5411\u6211\u62a5\u544a\u8bf4\uff0c\u5728\u4ed6\u7684\u5e26\u6709 Intel AC9560 WiFi \u5361\u7684\u7cfb\u7edf\u4e0a\uff0c\u4ed6\u5728\u6ca1\u6709 WireGuard \u7684\u60c5\u51b5\u4e0b\u83b7\u5f97~600Mbps\uff0c\u901a\u8fc7\u4ee5\u592a\u7f51\u4f7f\u7528wireguard-go/Wintun \u83b7\u5f97~600Mbps\uff0c\u901a\u8fc7 WiFi \u4f7f\u7528wireguard-go/Wintun \u83b7\u5f97~95Mbps\uff0c\u4f7f\u7528 WireGuardNT \u83b7\u5f97~600Mbps\u65e0\u7ebf\u7f51\u7edc\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u4f7f\u7528 WireGuardNT \u65f6\uff0cwireguard-go/Wintun \u5bf9 WiFi \u6027\u80fd\u7684\u5f71\u54cd\u5df2\u7ecf\u6d88\u5931\u3002\u529f\u8017\u548c\u7535\u6c60\u4f7f\u7528\u91cf\u4e5f\u5e94\u8be5\u66f4\u4f4e\u3002\u5f53\u7136\uff0c\u5728\u591a\u5343\u5146\u541e\u5410\u91cf\u65b9\u9762\uff0cWindows Server \u7528\u6237\u65e0\u7591\u5c06\u53d7\u76ca\u3002\u8be5\u9879\u76ee\u4ecd\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\uff0c\u76ee\u524d\uff082021 \u5e74 8 \u6708\uff1b\u5982\u679c\u60a8&#39;\u5c06\u6765\u91cd\u8bfb\u8fd9\u53ef\u80fd\u4e0d\u9002\u7528\uff09\u8fd9\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u201c\u5b9e\u9a8c\u6027\u7684\u201d\u3002\u6709\u76f8\u5f53\u591a\u7684\u65b0\u4ee3\u7801\uff0c\u6211\u60f3\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u4ed4\u7ec6\u68c0\u67e5\u548c\u5206\u6790\u3002\u5e0c\u671b\u901a\u8fc7\u5c06\u5728\u7ebf\u4ee3\u7801\u7f6e\u4e8e\u201c\u65e9\u671f\u201d\u5f00\u53d1\u9636\u6bb5\uff0c\u5176\u4ed6\u4eba\u53ef\u80fd\u6709\u5174\u8da3\u7814\u7a76\u6e90\u4ee3\u7801\u5e76\u62a5\u544a\u5176\u4e2d\u7684\u9519\u8bef\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u65e0\u8bba\u662f\u5426\u5177\u6709\u5b9e\u9a8c\u6027\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u4eba\u4eec\u5bf9\u6b64\u8fdb\u884c\u6d4b\u8bd5\u5e76\u5e2e\u52a9\u89e3\u51b3\u95ee\u9898\u3002\u4e3a\u6b64\uff0cWireGuardNT \u73b0\u5728\u53ef\u7528\u4e8e Windows \u5ba2\u6237\u7aef\u7684\u666e\u901a WireGuard -- https://www.wireguard.com/install/ -- \u4ee5\u53ca 0.4.z \u7cfb\u5217\uff0c\u6b64\u5916\u8fd8\u5b8c\u5168\u652f\u6301\u53e4\u8001\u7684 wg(8 ) \u5b9e\u7528\u7a0b\u5e8f\uff0c\u4f46\u76ee\u524d\uff082021 \u5e74 8 \u6708\uff1b\u5982\u679c\u60a8\u5c06\u6765\u9605\u8bfb\u6b64\u5185\u5bb9\uff0c\u8fd9\u53ef\u80fd\u4e0d\u9002\u7528\uff09\u5b83\u4f4d\u4e8e\u624b\u52a8\u8bbe\u7f6e\u7684\u6ce8\u518c\u8868\u65cb\u94ae\u540e\u9762\u3002 0.4.z \u7cfb\u5217\u5c06\u5206\u4e3a\u4e09\u4e2a\u9636\u6bb5\uff1a \u9636\u6bb5 1) WireGuardNT \u9690\u85cf\u5728\u201cExperimentalKernelDriver\u201d\u6ce8\u518c\u8868\u65cb\u94ae\u540e\u9762\u3002\u5982\u679c\u60a8\u4e0d\u624b\u52a8\u4fee\u6539\u4ee5\u542f\u7528\u5b83\uff0c\u5ba2\u6237\u7aef\u5c06\u7ee7\u7eed\u50cf\u4ee5\u524d\u4e00\u6837\u4f7f\u7528 wireguard-go/Wintun\u3002\u9636\u6bb5 2) WireGuardNT \u9ed8\u8ba4\u542f\u7528\uff0c\u4e0d\u518d\u9690\u85cf\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b58\u5728\u5bfc\u81f4\u73b0\u6709\u57fa\u7840\u8bbe\u65bd\u505c\u673a\u7684\u540e\u671f\u95ee\u9898\uff0c\u5c06\u4f1a\u6709\u4e00\u4e2a\u540d\u4e3a\u201cUseUserspaceImplementation\u201d\u7684\u65b0\u9690\u85cf\u65cb\u94ae\uff0c\u5b83\u53ef\u4ee5\u50cf\u4ee5\u524d\u4e00\u6837\u4f7f\u7528wireguard-go/Wintun\u3002\u9636\u6bb5 3) WireGuardNT \u542f\u7528\uff0cwireguard-go/Wintun \u4ece\u5ba2\u6237\u7aef\u4e2d\u5220\u9664\u3002 [\u8bf7\u6ce8\u610f\uff1a\u4f5c\u4e3a\u9879\u76ee\u548c\u4ee3\u7801\u5e93\uff0cWintun \u548c wireguard-go \u90fd\u5c06\u7ee7\u7eed\u7ef4\u62a4\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u6211\u4eec\u7684 WireGuard \u5ba2\u6237\u7aef\u4e4b\u5916\u6709\u5e94\u7528\u7a0b\u5e8f\u548c\u7528\u9014\uff0c\u800c Wintun \u901a\u5e38\u5728 WireGuard \u4e4b\u5916\u4f7f\u7528\u3002]\u6bcf\u4e2a\u9636\u6bb5\u4e4b\u95f4\u7684\u98de\u8dc3\u662f\u76f8\u5f53\u5927\uff0c\u6bcf\u6b21\u53d1\u751f\u65f6\u6211\u90fd\u4f1a\u66f4\u65b0\u8fd9\u4e2a\u7ebf\u7a0b\u3002\u5f53\u4e00\u822c\u6d88\u8d39\u770b\u8d77\u6765\u6ca1\u95ee\u9898\u65f6\uff0c\u5c31\u4f1a\u4ece 1 \u79fb\u5230 2\uff0c\u800c\u5f53\u6211\u4eec\u6709\u7406\u7531\u786e\u5b9a\u5b58\u5728\u76f8\u540c\u6c34\u5e73\u7684\u7a33\u5b9a\u6027\u65f6\uff0c\u5c31\u4f1a\u53d1\u751f\u4ece 2 \u79fb\u5230 3\u3002\u7531\u4e8e\u6211\u4eec\u5728\u5ba2\u6237\u7aef\u4e2d\u4e0d\u5305\u542b\u4efb\u4f55\u9065\u6d4b\uff0c\u56e0\u6b64\u5f88\u591a\u8bc4\u4f30\u5c06\u53d6\u51b3\u4e8e\u60a8\u3001\u90ae\u4ef6\u5217\u8868\u8bfb\u8005\u3001\u53d1\u9001\u9519\u8bef\u62a5\u544a\u6216\u4e0d\u53d1\u9001\u9519\u8bef\u62a5\u544a\u3002\u5f53\u7136\uff0c\u5728\u4e0d\u7a33\u5b9a\u7684\u7b2c 1 \u9636\u6bb5\u62e5\u6709\u6d4b\u8bd5\u4eba\u5458\u5c06\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u798f\u97f3\u3002\u53ef\u4ee5\u5728\u901a\u5e38\u7684\u4f4d\u7f6e\u627e\u5230\u6709\u5173\u542f\u7528\u8fd9\u4e9b\u65cb\u94ae\u7684\u8bf4\u660e\uff1ahttps://git.zx2c4.com/wireguard-windows/about/docs/adminregistry.md[\u5982\u679c\u60a8\u5c06\u6765\u6b63\u5728\u9605\u8bfb\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\u5e76\u4e14\u8be5\u9875\u9762\u6ca1\u6709\u5b58\u5728\u6216\u4e0d\u5305\u542b\u63d0\u53ca\u201cExperimentalKernelDriver\u201d\u6216\u201cUseUserspaceImplementation\u201d\uff0c\u90a3\u4e48\u6211\u4eec\u5df2\u7ecf\u8fdb\u5165\u4e86\u7b2c 3 \u9636\u6bb5\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e9b\u90fd\u4e0d\u518d\u9002\u7528\u3002 ]\u6240\u4ee5\uff0c\u8bf7\u8bd5\u4e00\u8bd5\uff0c\u67e5\u770b\u6587\u6863\u548c\u4ee3\u7801\uff0c\u7136\u540e\u8ba9\u6211\u77e5\u9053\u60a8\u7684\u60f3\u6cd5\u3002\u6211\u671f\u5f85\u542c\u5230\u60a8\u7684\u60f3\u6cd5\u5e76\u6536\u5230\u9519\u8bef\u62a5\u544a\u3001\u4f53\u9a8c\u62a5\u544a\u548c\u603b\u4f53\u53cd\u9988\u3002\u4eab\u53d7\u5427\uff01\u6770\u68ee", "note_en": "Jason A. Donenfeld  Jason at zx2c4.com    Mon Aug 2 17:27:37 UTC 2021  Hey everyone,After many months of work, Simon and I are pleased to announce the WireGuardNTproject, a native port of WireGuard to the Windows kernel. This has been amonumental undertaking, and if you&#39;ve noticed that I haven&#39;t read emails inabout two months, now you know why.WireGuardNT, lower-cased as &#34;wireguard-nt&#34; like the other repos, began as aport of the Linux codebase, so that we could benefit from the analysis andscrutiny that that code has already received. After the initial portingefforts there succeeded, the NT codebase quickly diverged to fit well withnative NTisms and NDIS (Windows networking stack) APIs. The end result is adeeply integrated and highly performant implementation of WireGuard for the NTkernel, that makes use of the full gamut of NT kernel and NDIS capabilities.You can read about the project and look at its source code here:  https://git.zx2c4.com/wireguard-nt/about/For the Windows platform, this project is a big deal to me, as it marks thegraduation of WireGuard to being a serious operating system component, meantfor more serious usage. It&#39;s also a rather significant open source release, asthere generally isn&#39;t so much (though there is some) open source crypto-NICdriver code already out there that does this kind of thing while pullingtogether various kernel capabilities in the process.To frame what WireGuardNT is, a bit of background for how WireGuard on Windows_currently_ works, prior to this, might be in store. We currently have across-platform Go codebase, called wireguard-go, which uses a generic TUNdriver we developed called Wintun (see wintun.net for info). Theimplementation lives in userspace, and shepherds packets to and from theWintun interface. WireGuardNT will (eventually) replace that, placing all ofthe WireGuard protocol implementation directly into the networking stack fordeeper integration, in the same way that it&#39;s done currently on Linux,OpenBSD, and FreeBSD.With the old wireguard-go/Wintun implementation, the fact of being inuserspace means that for each RX UDP packet that arrives in the kernel fromthe NIC and gets put in a UDP socket buffer, there&#39;s a context switch touserspace to receive it, and then a trip through the Go scheduler to decryptit, and then it&#39;s written to Wintun&#39;s ring buffer, where it is then processedupon the next context switch. For TX, things happen in reverse: userspacesends a packet, and there&#39;s a context switch to the kernel to hand it off toWintun, which places it into a ring buffer, and then there&#39;s another contextswitch to userspace, and a trip through the Go scheduler to encrypt it, andthen it&#39;s sent through a socket, which involves another context switch to sendit. All of the ring buffers -- Wintun&#39;s rings and Winsock&#39;s RIO rings --amortize context switches as much as possible and make this decently fast, butall and all it still constitutes overhead and latency. WireGuardNT gets rid ofall of that.While performance is quite good right now (~7.5Gbps TX on my small test box),not a lot of effort has yet been spent on optimizing it, and there&#39;s still alot more performance to eek out of it, I suspect, especially as we learn moreabout NT&#39;s scheduler and threading model particulars. Yet, by simply being inthe kernel, we significantly reduce latency and do away with the contextswitch problems of wireguard-go/Wintun.Most Windows users, however, don&#39;t really care what happens beyond 1Gbps, andthis is where things get interesting. Windows users with an Ethernetconnection generally haven&#39;t had much trouble getting close to 1Gbps or sowith the old slow wireguard-go/Wintun, but over WiFi, those same users wouldcommonly see massive slowdowns. With the significantly decreased latency ofWireGuardNT, it appears that these slowdowns are no more. Jonathan Tookerreported to me that, on his system with an Intel AC9560 WiFi card, he gets~600Mbps without WireGuard, ~600Mbps with wireguard-go/Wintun over Ethernet,~95Mbps with wireguard-go/Wintun over WiFi, and ~600Mbps with WireGuardNT overWiFi. In other words, the WiFi performance hit from wireguard-go/Wintun hasevaporated when using WireGuardNT. Power consumption, and hence battery usage,should be lower too.And of course, on the multigig throughput side of things, Windows Server userswill no doubt benefit.The project is still at its early stages, and for now (August 2021; if you&#39;rereading this in the future this might not apply) this should be considered&#34;experimental&#34;. There&#39;s a decent amount of new code on which I&#39;d like to spenda bit more time scrutinizing and analyzing. And hopefully by putting the codeonline in an &#34;earlier&#34; stage of development, others might be interested instudying the source and reporting bugs in it.Nonetheless, experimental or not, we still need people to test this and helpshake out issues. To that end, WireGuardNT is now available in the ordinaryWireGuard for Windows client --  https://www.wireguard.com/install/ -- with the0.4.z series, in addition to having full support of the venerable wg(8)utility, but currently (August 2021; if you&#39;re reading this in the future thismight not apply) it is behind a manually set registry knob. There will bethree phases of the 0.4.z series: Phase 1) WireGuardNT is hidden behind the &#34;ExperimentalKernelDriver&#34; registry knob. If you don&#39;t manually tinker around to enable it, the client will continue to use wireguard-go/Wintun like before. Phase 2) WireGuardNT is enabled by default and is no longer hidden. However, in case there are late-stage problems that cause downtime for existing infrastructure, there&#39;ll be a new hidden knob called &#34;UseUserspaceImplementation&#34; that goes back to using wireguard-go/Wintun like before. Phase 3) WireGuardNT is enabled, and wireguard-go/Wintun is removed from the client. [Do note: as projects and codebases, both Wintun and wireguard-go will continue to be maintained, as they have applications and uses outside of our WireGuard client, and Wintun has uses outside of WireGuard in general.]The leap between each phase is rather large, and I&#39;ll update this thread wheneach one happens. Moving from 1 to 2 will happen when things seem okay forgeneral consumption and from 2 to 3 when we&#39;re reasonably sure there&#39;s thesame level of stability. Since we don&#39;t include any telemetry in the client, alot of this assessment will be a matter of you, mailing list readers, sendingbug reports or not sending bug reports. And of course, having testers duringthe unstable phase 1 will be a great boon. Instructions on enabling theseknobs can be found in the usual place:  https://git.zx2c4.com/wireguard-windows/about/docs/adminregistry.md[ If you&#39;re reading this email in the future and that page either does not exist or does not contain mention of &#34;ExperimentalKernelDriver&#34; or &#34;UseUserspaceImplementation&#34;, then we have already moved to phase 3, as above, and none of this applies any more. ]So, please do give it a whirl, check out the documentation and code, and letme know what you think. I&#39;m looking forward to hearing your thoughts andreceiving bug reports, experience reports, and overall feedback.Enjoy!Jason", "posttime": "2021-08-03 03:04:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,windows,high,wintun", "title": "WireGuardNT\uff0cWindows \u5185\u6838\u7684\u9ad8\u6027\u80fd WireGuard \u5b9e\u73b0", "title_en": "WireGuardNT, a high-performance WireGuard implementation for the Windows kernel", "transed": 1, "url": "https://lists.zx2c4.com/pipermail/wireguard/2021-August/006887.html", "via": "", "real_tags": ["\u6027\u80fd", "windows", "high", "wintun"]}, {"category": "", "categoryclass": "", "imagename": "c3ad2256f31cc7b669820434f4cb01f6.jpeg", "infoid": 1071266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fde\u7eed\u4e09\u6b21\u6d41\u4ea7\u540e\uff0c\u5e03\u5217\u5854\u5c3c\u00b7\u53e4\u5c14\u5fb7 (Brittany Gould) \u8bf4\uff0c\u5979\u6c42\u52a9\u4e8e Theranos Inc.\uff0c\u60f3\u77e5\u9053\u5979\u6700\u8fd1\u7684\u6000\u5b55\u662f\u5426\u987a\u5229\u3002\u53e4\u5c14\u5fb7\u5973\u58eb\u8bf4\uff0c\u7136\u540e\uff0c\u8be5\u516c\u53f8\u7684\u4e00\u9879\u6807\u5fd7\u6027\u624b\u6307\u523a\u75db\u6d4b\u8bd5\u8868\u660e\u5979\u53c8\u5931\u53bb\u4e86\u4e00\u4e2a\u5b69\u5b50\u3002\u4e9a\u5229\u6851\u90a3\u5dde\u6885\u8428\u5e02\u7684\u533b\u7597\u52a9\u7406\u56de\u5fc6\u8bf4\uff0c\u5f53\u5979\u4e0d\u5f97\u4e0d\u544a\u8bc9\u6b63\u5728\u7b49\u5f85\u5144\u5f1f\u59d0\u59b9\u7684 7 \u5c81\u5973\u513f\u65f6\uff0c\u5979\u5f88\u5bb3\u6015\u3002\u4e0e\u5728 Theranos \u521b\u59cb\u4eba Elizabeth Holmes \u7684\u5211\u4e8b\u5ba1\u5224\u4e2d\u88ab\u6307\u5b9a\u4e3a\u6f5c\u5728\u8bc1\u4eba\u7684\u5176\u4ed6\u60a3\u8005\u4e00\u6837\uff0cGould \u5973\u58eb\u7684\u6d4b\u8bd5\u662f\u9519\u8bef\u7684\u3002\u68c0\u5bdf\u5b98\u6307\u63a7\u798f\u5c14\u6469\u65af\u5973\u58eb\u901a\u8fc7\u9519\u8bef\u5730\u58f0\u79f0\u5979\u7684\u53d1\u660e\u53ef\u4ee5\u51c6\u786e\u5730\u5bf9\u51e0\u6ef4\u8840\u8fdb\u884c\u5b9e\u9a8c\u5ba4\u6d4b\u8bd5\u6765\u6b3a\u9a97\u60a3\u8005\u548c\u6295\u8d44\u8005\u3002\u4e00\u518d\u63a8\u8fdf\u7684\u5ba1\u5224\u2014\u2014\u56e0\u4e3a\u798f\u5c14\u6469\u65af\u5973\u58eb\u81ea\u5df1\u8981\u751f\u5b69\u5b50\u800c\u63a8\u8fdf\u4e00\u6b21\u2014\u2014\u9884\u8ba1\u5c06\u6210\u4e3a\u591a\u5e74\u6765\u6700\u53d7\u5173\u6ce8\u7684\u516c\u53f8\u6b3a\u8bc8\u6848\u4ef6\u4e4b\u4e00\u3002\u5ba1\u5224\u5b9a\u4e8e 8 \u6708 31 \u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5723\u4f55\u585e\u5f00\u59cb\u966a\u5ba1\u56e2\u9009\u62e9\uff0c\u5176\u4e2d\u5305\u62ec\u661f\u5149\u71a0\u71a0\u7684\u6f5c\u5728\u8bc1\u4eba\u540d\u5355\uff0c\u5176\u4e2d\u5305\u62ec\u524d Theranos \u8463\u4e8b\u4ea8\u5229\u00b7\u57fa\u8f9b\u683c\u548c\u5409\u59c6\u00b7\u9a6c\u8482\u65af\uff1b\u524d Theranos \u5f8b\u5e08 David Boies\uff1b\u4ee5\u53ca\u77e5\u540d\u6295\u8d44\u8005\uff0c\u5305\u62ec Bechtel Corp. \u524d\u8463\u4e8b\u957f Riley Bechtel \u548c Fox Corp. \u8463\u4e8b\u957f\u517c\u65b0\u95fb\u96c6\u56e2\u6267\u884c\u4e3b\u5e2d Rupert Murdoch\uff0c\u534e\u5c14\u8857\u65e5\u62a5\u7684\u6240\u6709\u8005\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u5c06\u5411\u60a8\u6536\u53d6 $ + \u7a0e\u6b3e\uff08\u5982\u679c\u9002\u7528\uff09\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u5728\u5ba2\u6237\u4e2d\u5fc3\u66f4\u6539\u60a8\u7684\u8ba1\u8d39\u504f\u597d\u6216\u81f4\u7535\u5ba2\u6237\u670d\u52a1\u3002\u5982\u679c\u8d39\u7387\u6216\u6761\u6b3e\u6709\u4efb\u4f55\u53d8\u5316\uff0c\u60a8\u5c06\u63d0\u524d\u6536\u5230\u901a\u77e5\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u81f4\u7535\u5ba2\u6237\u670d\u52a1\u90e8\u53d6\u6d88\u8ba2\u9605\u3002", "note_en": "After three back-to-back miscarriages, Brittany Gould said she turned to Theranos Inc. to know if her latest pregnancy was on track.\n  Then, one of the company\u2019s trademark finger-prick tests indicated she was losing another baby, Ms. Gould said. The Mesa, Ariz., medical assistant recalled dreading the moment when she would have to tell her 7-year-old daughter, who was waiting for a sibling.\n    Like those of other patients slated as potential witnesses in  the criminal trial of Theranos founder Elizabeth Holmes, Ms. Gould\u2019s test was wrong. Prosecutors have accused Ms. Holmes of defrauding patients and investors by falsely claiming her invention could accurately perform lab tests on just a few drops of blood.\n  The repeatedly delayed trial\u2014postponed once because Ms. Holmes was due to have a baby herself\u2014is expected to be one of the most widely watched corporate-fraud cases in years. Scheduled to begin with jury selection on Aug. 31 in San Jose, Calif., the trial features a star-studded list of potential witnesses, including ex-Theranos directors Henry Kissinger and Jim Mattis; ex-Theranos lawyer David Boies; and high-profile investors, including Riley Bechtel, the former chairman of Bechtel Corp., and Rupert Murdoch, chairman of Fox Corp. and executive chairman of News Corp, owner of The Wall Street Journal.\n  You will be charged $  + tax (if applicable) for The Wall Street Journal. You may change your billing preferences at any time in the Customer Center or call  Customer Service. You will be notified in advance of any changes in rate or terms. You may cancel your subscription at anytime by calling  Customer Service.", "posttime": "2021-08-03 03:04:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u798f\u5c14\u6469\u65af,wild,\u5973\u58eb", "title": "\u4f0a\u4e3d\u838e\u767d\u798f\u5c14\u6469\u65af\u5ba1\u5224\u4e2d\u7684\u65b0\u901a\u914d\u7b26\uff1aTheranos \u60a3\u8005", "title_en": "The Emerging Wild Card in the Trial of Elizabeth Holmes: Theranos Patients", "transed": 1, "url": "https://www.wsj.com/articles/theranos-patients-the-emerging-wild-card-in-the-trial-of-elizabeth-holmes-11627915111", "via": "", "real_tags": ["\u798f\u5c14\u6469\u65af", "wild", "\u5973\u58eb"]}]