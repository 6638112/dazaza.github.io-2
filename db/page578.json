[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1017304, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2)\u7ed3\u679c(\u7531\u4e8e\u7269\u7406\u539f\u56e0\uff0c\u9700\u8981\u66f4\u957f\u7684\u65f6\u95f4\u6765\u89e3\u91ca)\uff0c\u5728LINOT\u578b\u6392\u5b57\u673a\u4e0a\uff0c\u952e\u7684\u6392\u5217\u4e0d\u662fQuerty\uff0c\u800c\u662f\u9891\u7387\u6392\u5217\u7684\u5217\uff1aETAOIN\u662f\u7b2c\u4e00\u5217(\u5411\u4e0b\u8bfb)\uff0cShrdlu\u662f\u7b2c\u4e8c\u5217\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n3)\u7ebf\u578b(\u4ece\u9ec4\u94dc\u6a21\u5177\u4ea7\u751f\u70ed\u578b\u91d1\u5c5e\u5757)\u6ca1\u6709\u9000\u683c\u3002\u53bb\u6389\u4e00\u884c\u6253\u9519\u7684\u5b57\u662f\u4e00\u4e2a\u590d\u6742\u7684\u8fc7\u7a0b\u3002\n4)\u6240\u4ee5\u5f53\u4ed6\u4eec\u72af\u4e86\u9519\u8bef\u65f6\uff0c\u61d2\u60f0\u7684\u7ebf\u6761\u6253\u5b57\u5458\u4f1a\u7528\u5783\u573e\u586b\u6ee1\u884c\u7684\u5176\u4f59\u90e8\u5206\uff0c\u8fd9\u6837\u5b83\u5c31\u4f1a\u5728\u7a0d\u540e\u88ab\u6821\u5bf9\u5458\u62c9\u4e0b\u6765(\u5b57\u4f53\u7684\u7ebf\u6761\u662f\u91d1\u5c5e\u7269\u4f53)\u3002\n5)\u7528\u968f\u673a\u5b57\u7b26\u586b\u5145\u4e00\u884c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4ec0\u4e48\uff1f(\u7ec3\u4e60\u7559\u7ed9\u8bfb\u8005)\u3002\n6)\u5e76\u4e0d\u662f\u6240\u6709\u7684\u6821\u5bf9\u4eba\u5458\u90fd\u662f\u8b66\u89c9\u7684\u3002\u56e0\u6b64\uff0c\u50cfSHRDLUSHRDLUSHRDLU\u8fd9\u6837\u7684\u6587\u5b57\u5076\u5c14\u4f1a\u51fa\u73b0\u5728\u5370\u5237\u54c1\u4e2d(\u6211\u6536\u96c6\u4e86\u4eba\u4eec\u591a\u5e74\u6765\u5bc4\u7ed9\u6211\u7684\u4e00\u4e9b\u5947\u602a\u7684\u526a\u62a5--\u968f\u7740\u8ba1\u7b97\u673a\u6392\u7248\u53d6\u4ee3\u4e86\u7ebf\u578b\u6392\u7248\uff0c\u5b83\u4eec\u65e9\u5c31\u4e0d\u518d\u51fa\u73b0\u4e86)\u3002\n7)MADMagazine\u7684\u4f5c\u8005\u628a\u8fd9\u4e9b\u5e8f\u5217\u5f53\u4f5c\u5e9f\u8bdd\u6765\u4f7f\u7528\uff0c\u5c31\u50cf\u4f60\u4e0a\u9762\u63d0\u5230\u7684\u90a3\u6837\u3002\n9)\u5230\u4e86\u7ed9\u7cfb\u7edf\u547d\u540d\u7684\u65f6\u5019\uff0c\u6211\u8bd5\u7740\u60f3\u51fa\u4e00\u4e9b\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u662f\u5f88\u597d\u7684\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u53ea\u9009\u4e00\u4e9b\u770b\u8d77\u6765\u50cf\u9996\u5b57\u6bcd\u7f29\u5199\u4f46\u4e0d\u662f\u7684\u3002\u6211\u627e\u5230\u4e86\u4e00\u4e2a\u968f\u673a\u5e8f\u5217\u7684\u5207\u5206\u8bb0\u5fc6\u3002\n10)\u51e0\u5e74\u540e\uff0c\u6709\u4eba\u7ed9\u4e86\u6211\u4e00\u672c\u5f17\u96f7\u5fb7\u91cc\u514b\u00b7\u5e03\u6717\u7684\u79d1\u5e7b\u5c0f\u8bf4\uff0c\u6700\u521d\u5199\u4e8e1942\u5e74(\uff01)\uff0c\u4e66\u540d\u4e3a\u201cETAOINSHRDLU&34\uff1b\u201d\uff0c\u5728\u5c0f\u8bf4\u4e2d\uff0c\u4e00\u53f0\u4eba\u5de5\u667a\u80fd\u7684\u7ebf\u6027\u6253\u5b57\u673a(\u5177\u6709\u81ea\u7136\u8bed\u8a00\u80fd\u529b)\u5b66\u4e60\u5b83\u8f93\u5165\u7684\u6240\u6709\u4e1c\u897f\uff0c\u5e76\u8bd5\u56fe\u63a5\u7ba1\u4e16\u754c(\u201c\u5947\u8ff9\u4e16\u754c\u201d\u7f16\u8f91)\u3002\u5f17\u83b1\u5f7b\u00b7\u666e\u62c9\u7279(FletcherPratt)(\u7ebd\u7ea6\uff1a\u5410\u6e29\u51fa\u7248\u793e\uff0c1951\uff0c3.95\u7f8e\u5143\uff0c445\u9875\uff0cHC)\u3002\u5f53\u6211\u770b\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5b83\u4f3c\u4e4e\u6709\u4e9b\u719f\u6089\uff0c\u6240\u4ee5\u6211\u6000\u7591\u6211\u5728\u9ad8\u4e2d\u79d1\u5e7b\u65f6\u4ee3\u8bfb\u8fc7\u5b83\uff0c\u5b83\u5728\u6211\u660f\u6697\u7684\u8bb0\u5fc6\u6df1\u5904\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u5728\u9002\u5f53\u7684\u65f6\u5019\u53c8\u5192\u4e86\u51fa\u6765\u3002\n\u53e6\u5916\uff0c\u4e3b\u4eba\u516c\u667a\u80dc\u4e86\u65bd\u7279\u9c81\u7684\u57c3\u6d9b\uff0c\u8ba9\u5b83\u6392\u7248\u6bcf\u4e00\u672c\u5173\u4e8e\u4f5b\u6559\u7684\u4e66\u3002\u6545\u4e8b\u7ed3\u675f\u4e86\uff1a\u770b\uff0c\u4e54\u6cbb\uff0c\u5b83\u76f8\u4fe1\u5b83\u6240\u8bbe\u5b9a\u7684\u4e00\u5207\u3002\u6240\u4ee5\u6211\u7ed9\u5b83\u704c\u8f93\u4e86\u4e00\u79cd\u5b97\u6559\uff0c\u8ba9\u5b83\u76f8\u4fe1\u6240\u6709\u7684\u52aa\u529b\u548c\u884c\u52a8\u90fd\u662f\u5b8c\u5168\u5f92\u52b3\u7684\uff0c\u865a\u65e0\u662f\u53ef\u53d6\u7684\u2026\u2026\u5b83\u4e0d\u5728\u4e4e\u5b83\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5b83\u751a\u81f3\u4e0d\u77e5\u9053\u6211\u4eec\u5728\u8fd9\u91cc\u3002\u5b83\u662f\u5f52\u6863\u7684\u6d85\u69c3\uff0c\u5b83\u6b63\u5750\u5728\u90a3\u91cc\u6c89\u601d\u7740\u5b83\u7684\u51f8\u8f6e\u87ba\u67f1\u3002", "note_en": "2) As a result (for physical reasons, which would take longerto explain), the arrangement of the keys on Linotype typesettingmachines was not QUERTY, but frequency arranged columns: ETAOINwas the first column (reading downward), SHRDLU the second, etc.\n 3) The Linotype (which produced slugs of hot type metal frombrass molds) did not have a backspace. It was a complicated processto get rid of a mistyped line.\n 4) So when they made a mistake, lazy linotypists would fillthe rest of the line with garbage, so it would get pulled laterby the proofreaders (lines of type were metal objects).\n 5) What is the easiest way to fill a line with random characters?(exercise left to the reader).\n 6) Not all proofreaders are alert. Therefore lines full ofthings like SHRDLUSHRDLUSHRDLU occasionally found their way intoprint (I have a collection of odd clippings that people sent meover the years -- they have long since stopped coming, as computertypesetting replaced the Linotype).\n 7)  MADMagazine authors picked up these sequences as nonsense wordsand used them as you mention above.\n  9) When it came time to name the system, I tried to come upwith acronyms and none were very good so I decided to just picksomething that looked like an acronym but wasn&#39;t. I reached intomy memories for a random sequence.\n 10) Several years later, someone gave me a copy of the sciencefiction story by  FredericBrown, written originally in 1942(!), entitled &#34; ETAOINSHRDLU&#34; in which an artificially intelligent Linotypemachine (with natural language ability) learns everything it typesetsand tries to take over the world (World of Wonder ed. FletcherPratt (New York: Twayne, 1951, $3.95, 445pp, hc)). When I sawit, it seemed vaguely familiar, so I suspect that I had read itduring my science-fiction years in high school, and it had stucksomewhere in the dim recesses of my memory and popped back outwhen appropriate.\n  p.s., the hero outwits ETAOIN SHRDLU by having it typeset everybook on Buddhism. The story ends: &#34;See, George, it believeswhat it sets. So I fed it a religion that convinced it of theutter futility of all effort and action and the desirability ofnothingness...It doesn&#39;t care what happens to it and it doesn&#39;teven know we&#39;re here. It&#39;s archived Nirvana, and it&#39;s sittingthere contemplating its cam stud.&#34;", "posttime": "2020-08-10 16:19:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "shrdlu,\u6392\u7248", "title": "SHRDLU\u662f\u5982\u4f55\u5f97\u540d\u7684(2003)", "title_en": "How SHRDLU got its name (2003)", "transed": 1, "url": "http://hci.stanford.edu/winograd/shrdlu/name.html", "via": "", "real_tags": ["shrdlu", "\u6392\u7248"]}, {"category": "", "categoryclass": "", "imagename": "c224ff5205db3724c4519a2dcc52ca27.jpeg", "infoid": 1017302, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c3c\u53e4\u62c9\u00b7\u7279\u65af\u62c9(Nikola Tesla)\u5728120\u5e74\u524d\u505a\u4e86\u7b2c\u4e00\u6b21\u7a7a\u6c14\u52a8\u529b\u5b9e\u9a8c\uff0c\u4f46\u94dc\u7ebf\u53d6\u4ee3\u4e86\u5176\u4ed6\u4e00\u5207\u3002\n\u4e00\u5bb6\u540d\u4e3aEmrod\u7684\u80fd\u6e90\u521d\u521b\u516c\u53f8\u8868\u793a\uff0c\u5728\u5c3c\u53e4\u62c9\u00b7\u7279\u65af\u62c9(Nikola Tesla)\u9996\u6b21\u8bc1\u660e\u8fd9\u662f\u53ef\u80fd\u7684\u4e00\u4e2a\u591a\u4e16\u7eaa\u4e4b\u540e\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u4e3a\u65b0\u897f\u5170\u5e26\u6765\u65e0\u7ebf\u7535\u529b\u3002\u5c31\u50cf\u6027\u80fd\u6700\u597d\u7684\u536b\u661f\u4e92\u8054\u7f51\u8fde\u63a5\u4e00\u6837\uff0cEmrod\u7684\u8fde\u63a5\u53ea\u9700\u8981\u6e05\u6670\u7684\u89c6\u7ebf\u3002\n\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\uff0cEmrod\u521b\u59cb\u4eba\u683c\u96f7\u683c\u00b7\u5e93\u4ec0\u5c3c\u5c14(Greg Kushnir)\u8868\u793a\uff0c\u4ed6\u7684\u52a8\u673a\u662f\u65b0\u897f\u5170\u72ec\u7279\u7684\u4e00\u5957\u6280\u80fd\uff0c\u5c31\u50cf\u5229\u4e9a\u59c6\u00b7\u5c3c\u68ee(Liam Neeson)\u5728Take\u4e2d\u6240\u8bf4\u7684\u90a3\u6837\u3002\n\u201c\u6211\u4eec\u5728\u4e16\u754c\u5404\u5730\u62e5\u6709\u4e30\u5bcc\u7684\u6e05\u6d01\u6c34\u80fd\u3001\u592a\u9633\u80fd\u548c\u98ce\u80fd\uff0c\u4f46\u4f7f\u7528\u4f20\u7edf\u65b9\u6cd5\u8f93\u9001\u8fd9\u4e9b\u80fd\u6e90\u5e26\u6765\u4e86\u6602\u8d35\u7684\u6311\u6218\uff0c\u4f8b\u5982\uff0c\u79bb\u5cb8\u98ce\u529b\u53d1\u7535\u573a\u6216\u65b0\u897f\u5170\u7684\u5e93\u514b\u6d77\u5ce1\u9700\u8981\u5b89\u88c5\u548c\u7ef4\u62a4\u6602\u8d35\u7684\u6c34\u4e0b\u7535\u7f06\u3002\u201d\nEmrod\u8868\u793a\uff0c\u901a\u8fc7\u6d88\u9664\u5bf9\u4f20\u7edf\u94dc\u7ebf\u957f\u8ddd\u79bb\u94fa\u8bbe\u7684\u9700\u6c42\uff0c\u5b83\u53ef\u4ee5\u4e3a\u66f4\u56f0\u96be\u7684\u5730\u5f62\u548c\u8d1f\u62c5\u4e0d\u8d77\u4e00\u5b9a\u6c34\u5e73\u7684\u7269\u7406\u57fa\u7840\u8bbe\u65bd\u7684\u5730\u65b9\u5e26\u6765\u7535\u529b\u3002\u4f8b\u5982\uff0c\u8fd9\u4e5f\u53ef\u80fd\u4f1a\u9020\u6210\u73af\u5883\u5f71\u54cd\uff0c\u56e0\u4e3a\u8bb8\u591a\u79bb\u7f51\u7684\u5730\u65b9\u6700\u7ec8\u90fd\u4f1a\u4f7f\u7528\u67f4\u6cb9\u53d1\u7535\u673a\u3002\n\u5e93\u4ec0\u5c3c\u5c14\u544a\u8bc9\u201c\u65b0\u5730\u56fe\u96c6\u201d\u8bf4\uff0c\u76ee\u524d\uff0cEmrod\u6b63\u5728\u8fdb\u884c\u4e00\u6b21\u201c\u5fae\u5c0f\u7684\u201d\u957f\u8ddd\u79bb\u6d4b\u8bd5\uff0c\u6765\u56de\u53d1\u5c04\u201c\u51e0\u74e6\u7279\u201d\u7ea6130\u82f1\u5c3a\u3002\u89c6\u7ebf\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u9879\u6280\u672f\u4f9d\u8d56\u4e8e\u4ece\u4e00\u70b9\u5230\u4e0b\u4e00\u70b9\u7684\u6e05\u6670\u3001\u5305\u542b\u7684\u5149\u675f\u3002\n\u201c\u80fd\u6e90\u662f\u901a\u8fc7\u7535\u78c1\u6ce2\u4f20\u8f93\u8fdc\u8ddd\u79bb\u4f7f\u7528Emrod\u7684\u4e13\u6709\u5149\u675f\u6574\u5f62\uff0c\u8d85\u6750\u6599\u548c\u6574\u6d41\u6280\u672f\uff0c\u201dEmrod\u89e3\u91ca\u8bf4\u3002\n\u201c\u6574\u6d41\u7ba1\u201d\u5c06\u7535\u78c1\u6ce2\u8f6c\u5316\u4e3a\u7535\u3002\u5b89\u88c5\u5728\u6746\u5b50\u4e0a\u7684\u6b63\u65b9\u5f62\u5143\u4ef6\u8d77\u5230\u4e86\u901a\u7535\u7684\u4f5c\u7528\uff0c\u53ef\u4ee5\u8bf4\uff0c\u66f4\u5927\u7684\u8868\u9762\u79ef\u53ef\u4ee5\u6355\u6349\u5230\u6574\u4e2a\u6ce2\u3002\u5149\u675f\u88ab\u4e00\u4e2a\u4f4e\u529f\u7387\u7684\u6fc0\u5149\u6805\u680f\u5305\u56f4\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u51fb\u4e2d\u8fc7\u5f80\u7684\u9e1f\u7c7b\u6216\u4e58\u7528\u8f66\u3002Emrod\u8868\u793a\uff0c\u5982\u679c\u53d1\u751f\u505c\u7535\uff0c\u5b83\u53ef\u4ee5\u9a71\u52a8\u8f66\u8f7d\u6574\u6d41\u5929\u7ebf\uff0c\u4ee5\u5f25\u8865\u4efb\u4f55\u4e22\u5931\u7684\u7ee7\u7535\u5668\u652f\u8def\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u50cf\u8fd9\u6837\u7684\u6280\u672f\u4f3c\u4e4e\u662f\u4e0d\u53ef\u4fe1\u7684\uff0c\u56e0\u4e3a\u50cf\u901a\u8fc7\u7a7a\u4e2d\u4f20\u8f93\u7136\u540e\u901a\u8fc7\u4e00\u7cfb\u5217\u4e2d\u4ecb\u6280\u672f\u7684\u4fe1\u53f7\u4fdd\u771f\u5ea6\u635f\u5931\u8fd9\u6837\u7684\u95ee\u9898\u3002\u4f46Emrod\u7684\u4e2d\u7ee7\u6280\u672f\uff0c\u5b83\u8bf4\u662f\u201c\u91cd\u65b0\u805a\u7126\u5149\u675f\u201d\uff0c\u4e0d\u4f7f\u7528\u4efb\u4f55\u7535\u529b\uff0c\u800c\u4e14\u51e0\u4e4e\u6ca1\u6709\u635f\u5931\u3002\n\u201c\u6211\u4eec\u5f00\u53d1\u7684\u6240\u6709\u7ec4\u4ef6\u7684\u6548\u7387\u90fd\u76f8\u5f53\u4e0d\u9519\uff0c\u63a5\u8fd1100%\u3002\u5927\u90e8\u5206\u635f\u5931\u90fd\u5728\u4f20\u8f93\u7aef\u3002\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u56fa\u6001\u4f5c\u4e3a\u53d1\u5c04\u7aef\uff0c\u8fd9\u57fa\u672c\u4e0a\u662f\u76f8\u540c\u7684\u7535\u5b50\u5143\u4ef6\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u96f7\u8fbe\u7cfb\u7edf\u4e2d\u627e\u5230\uff0c\u751a\u81f3\u5728\u5bb6\u91cc\u7684\u5fae\u6ce2\u7089\u4e2d\u90fd\u53ef\u4ee5\u627e\u5230\u3002\u76ee\u524d\uff0c\u8fd9\u4e9b\u6548\u7387\u4ec5\u9650\u4e8e70%\u5de6\u53f3\u3002\u4f46\u8fd9\u91cc\u9762\u6709\u5f88\u591a\u53d1\u5c55\uff0c\u4e3b\u8981\u662f\u7531\u901a\u4fe1\u30015G\u7b49\u63a8\u52a8\u7684\u3002\u201c\u3002\nEmrod\u5728\u5176\u7f51\u7ad9\u4e0a\u8868\u793a\uff1a\u201c\u539f\u578b\u5f97\u5230\u4e86\u4e00\u4e9b\u653f\u5e9c\u8d44\u52a9\uff0c\u662f\u5728\u5965\u514b\u5170\u4e0e\u5361\u62c9\u6c49\u521b\u65b0\u516c\u53f8(Callaghan Innovation)\u5408\u4f5c\u8bbe\u8ba1\u548c\u5efa\u9020\u7684\u3002\u201d\u4ed6\u6307\u7684\u662f\u65b0\u897f\u5170\u653f\u5e9c\u7684\u201c\u521b\u65b0\u673a\u6784\u201d\u3002\u201c\u5b83\u5df2\u83b7\u5f97\u7687\u5bb6\u5b66\u4f1a\u5956\u63d0\u540d\uff0c\u65b0\u897f\u5170\u7b2c\u4e8c\u5927\u914d\u7535\u516c\u53f8Powerco\u5c06\u7387\u5148\u6d4b\u8bd5Emrod\u6280\u672f\u3002\u201c\u3002\n\u5e93\u4ec0\u5c3c\u5c14\u8bf4\uff0c\u8d77\u521d\uff0c\u8ddd\u79bb\u548c\u7535\u529b\u8d1f\u8377\u5c06\u76f8\u5f53\u4f4e-\u5728\u65b0\u897f\u5170\u5883\u5185\u7684\u8f83\u77ed\u8ddd\u79bb\u5185\u53d1\u9001\u51e0\u5343\u74e6\u7684\u7535\u529b\u3002\u4f46\u662f\uff0c\u4ed6\u8bf4\uff0c\u8ddd\u79bb\u548c\u7535\u529b\u8d1f\u8377\u7684\u5047\u8bbe\u6781\u9650\u5c06\u6269\u5927\u5230\u51e0\u4e4e\u6df1\u4e0d\u53ef\u6d4b\u7684\u6570\u91cf\u3002\u57c3\u59c6\u7f57\u5fb7\u8981\u505a\u7684\u5c31\u662f\u505a\u66f4\u5927\u7684\u6574\u6d41\u7ba1\u3002\n\u6b64\u5185\u5bb9\u7531\u7b2c\u4e09\u65b9\u521b\u5efa\u548c\u7ef4\u62a4\uff0c\u5e76\u5bfc\u5165\u5230\u6b64\u9875\u9762\u4ee5\u5e2e\u52a9\u7528\u6237\u63d0\u4f9b\u5176\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u60a8\u53ef\u4ee5\u5728piano.io\u4e0a\u627e\u5230\u6709\u5173\u6b64\u5185\u5bb9\u548c\u7c7b\u4f3c\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u6b64\u8bc4\u8bba\u533a\u7531\u7b2c\u4e09\u65b9\u521b\u5efa\u548c\u7ef4\u62a4\uff0c\u5e76\u5bfc\u5165\u5230\u6b64\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u66f4\u591a\u4fe1\u606f\u3002", "note_en": "Nikola Tesla did the first air-power experiments 12o years ago, but copper wire superseded everything else.\n   An energy startup named Emrod says  it\u2019s bringing wireless electricity to New Zealand, more than a century after  Nikola Tesla first demonstrated it was possible. Like the best-performing satellite internet connections, Emrod\u2019s link only needs a clear line of sight.\n In a statement, Emrod founder Greg Kushnir says he was motivated by New Zealand\u2019s particular set of skills, \u00e0 la Liam Neeson in  Taken.\n \u201cWe have an abundance of clean hydro, solar, and wind energy available around the world but there are costly challenges that come with delivering that energy using traditional methods, for example, offshore wind farms or the Cook Strait here in New Zealand requiring underwater cables which are expensive to install and maintain.\u201d\n  By eliminating the need for long stretches of traditional copper wiring, Emrod says it can bring power to more difficult terrain and places that just can\u2019t afford a certain level of physical infrastructure. There could be environmental ramifications as well, since many places that are off the grid end up using diesel generators, for example.\n  Right now, Emrod is testing over a \u201ctiny\u201d long distance\u2014sending \u201c a few watts\u201d back and forth about 130 feet, Kushnir tells  New Atlas. Line of sight is important because the technology relies on a clear, contained beam from one point to the next.\n \u201cEnergy is transmitted through electromagnetic waves over long distances using Emrod&#39;s proprietary beam shaping, metamaterials and rectenna technology,\u201d  Emrod explains.\n       The \u201crectenna\u201d turns magnetic waves into electricity. A square element mounted on a pole acts as the pass-through point that keeps electricity beaming along, and a broader surface area catches the entire wave, so to speak. The beam is surrounded by a low-power laser fence so it won\u2019t zap passing birds or passenger vehicles. If there\u2019s ever an outage, Emrod says it can drive out a truck-mounted rectenna to make up for any missing relay legs.\n Typically, technology like this would seem implausible because of issues like the loss of signal fidelity over the transmission through the air then through a series of mediating technologies. But Emrod\u2019s relay technology, which it says \u201crefocuses the beam,\u201d doesn\u2019t use any power, and loses almost none.\n  \u201cThe efficiency of all the components we&#39;ve developed are pretty good, close to 100 percent. Most of the loss is on the transmitting side. We&#39;re using solid state for the transmitting side, and that&#39;s essentially the same electronic elements you can find in any radar system, or even your microwave at home. Those are at the moment limited to around 70-percent efficiency. But there&#39;s a lot of development going into it, mainly driven by communications, 5G and so on.\u201d\n   \u201cThe prototype received some government funding and was designed and built in Auckland in cooperation with Callaghan Innovation,\u201d Emrod says on its site, referring to the New Zealand government\u2019s \u201cinnovation agency.\u201d \u201cIt has received a Royal Society Award nomination, and New Zealand\u2019s second largest electricity distribution company, Powerco, will be the first to test Emrod technology. \u201c\n Kushnir says the distance and power load will, at first, be fairly low\u2014sending a few kilowatts over shorter distances within New Zealand. But, he says, the hypothetical limit for distance and power load will scale up to almost unfathomable amounts. All Emrod has to do is make bigger rectennas.\n  This content is created and maintained by a third party, and imported onto this page to help users provide their email addresses. You may be able to find more information about this and similar content at piano.io\n   This commenting section is created and maintained by a third party, and imported onto this page. You may be able to find more information on their web site.", "posttime": "2020-08-10 15:28:47", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7279\u65af\u62c9,\u8bc1\u660e,tesla,emrod", "title": "\u5c3c\u53e4\u62c9\u00b7\u7279\u65af\u62c9\u8bc1\u660e\u4e86\u8fd9\u662f\u53ef\u80fd\u7684\u3002\u73b0\u5728\uff0c\u65e0\u7ebf\u7535\u529b\u5df2\u6210\u4e3a\u73b0\u5b9e\u3002", "title_en": "Nikola Tesla Proved It Was Possible. Now Wireless Electricity Is a Reality.", "transed": 1, "url": "https://www.popularmechanics.com/science/a33522699/wireless-electricity-new-zealand/", "via": "", "real_tags": ["\u7279\u65af\u62c9", "\u8bc1\u660e", "tesla", "emrod"]}, {"category": "", "categoryclass": "", "imagename": "780d8185f48f013921d96e9bd5774bbf.png", "infoid": 1017301, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Palmetto\u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u5357\u5361\u7f57\u6765\u7eb3\u5dde\u67e5\u5c14\u65af\u987f\u7684\u6e05\u6d01\u6280\u672f\u8f6f\u4ef6\u548c\u5c65\u7ea6\u5e73\u53f0\u516c\u53f8\uff0c\u8be5\u516c\u53f8\u5b8c\u6210\u4e862900\u4e07\u7f8e\u5143\u7684B\u7cfb\u5217\u878d\u8d44\u3002\n\u652f\u6301\u8005\u5305\u62ecEvergy Ventures\uff0cArctern Ventures\uff0cShell Ventures\uff0cGreycroft\uff0cLerer Hippeau\uff0cBox Group\uff0cFalkon Ventures\u548cLeto Family Office\u3002\n\u8be5\u516c\u53f8\u6253\u7b97\u5229\u7528\u8fd9\u7b14\u8d44\u91d1\u8fdb\u4e00\u6b65\u6269\u5927\u5176\u4ea7\u54c1\u7ebf\uff0c\u6269\u5927\u670d\u52a1\u8303\u56f4\uff0c\u6269\u5927\u56e2\u961f\u89c4\u6a21\uff0c\u4e13\u6ce8\u4e8e\u7814\u53d1\u3001\u8f6f\u4ef6\u3001\u6570\u636e\u79d1\u5b66\uff0c\u5e76\u6269\u5927\u5ba2\u6237\u670d\u52a1\u3002\n\u5728\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u514b\u91cc\u65af\u00b7\u80af\u73c0(Chris Kemper)\u7684\u9886\u5bfc\u4e0b\uff0cPalmetto\u4e13\u6ce8\u4e8e\u4e3a\u6d88\u8d39\u8005\u6784\u5efa\u548c\u90e8\u7f72\u7b80\u5316\u7684\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u4ee5\u4e86\u89e3\u4ed6\u4eec\u7684\u80fd\u6e90\u652f\u51fa\u3002", "note_en": "Palmetto, a Charleston, S.C.-based clean technology software and fulfillment platform company, completed a $29M Series B funding.\n  Backers included Evergy Ventures, Arctern Ventures, Shell Ventures, Greycroft, Lerer Hippeau, Box Group, Falkon Ventures and the Leto Family Office.\n The company intends to use the funds to further grow its product lines and expand into a wider range of services, expand the team, focusing on R&amp;D, software, data science and buildout the customer services.\n Led by Chris Kemper, Founder and CEO, Palmetto is focused on building and deploying simplified software systems for consumers to understand their energy spend.", "posttime": "2020-08-10 15:27:07", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "sc,ventures", "title": "\u603b\u90e8\u4f4d\u4e8e\u5357\u5361\u7f57\u6765\u7eb3\u5dde\u67e5\u5c14\u65af\u987f\u7684\u521d\u521b\u516c\u53f8Palmetto\u901a\u8fc7\u4f7f\u7528\u592a\u9633\u80fd\u7b49\u7eff\u8272\u6280\u672f\u6765\u5e2e\u52a9\u6d88\u8d39\u8005\u8ba1\u7b97\u6f5c\u5728\u7684\u80fd\u6e90\u6210\u672c\u548c\u8282\u7701\uff0c\u8be5\u516c\u53f8\u7b79\u96c6\u4e862900\u4e07\u7f8e\u5143\u7684B\u7cfb\u5217\u8d44\u91d1", "title_en": "Charleston, SC-based startup Palmetto, which helps consumers calculate potential energy costs and savings by using green tech like solar, raises $29M Series B", "transed": 1, "url": "http://www.finsmes.com/2020/08/palmetto-closes-29m-series-b-funding.html", "via": "", "real_tags": ["sc", "ventures"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1017300, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Josh\u6700\u8fd1\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u5173\u4e8e2006\u5e74Debian Linux\u4e2d\u51fa\u73b0\u7684\u4e00\u4e2a\u4e25\u91cd\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u4ee5\u53ca\u5b83\u662f\u5426\u771f\u7684\u662fNSA\u63d2\u5165\u7684\u540e\u95e8\u3002(\u4ed6\u7684\u7ed3\u8bba\u662f\uff0c\u5f88\u53ef\u80fd\u4e0d\u662f\u3002)\u3002\n\u4eca\u5929\u6211\u60f3\u5199\u7684\u662f2003\u5e74\u7684\u53e6\u4e00\u4ef6\u4e8b\uff0c\u5728\u90a3\u4ef6\u4e8b\u4e2d\uff0c\u6709\u4eba\u8bd5\u56fe\u501f\u58f3Linux\u5185\u6838\u3002\u8fd9\u4e00\u6b21\u7edd\u5bf9\u662f\u4f01\u56fe\u63d2\u5165\u540e\u95e8\u3002\u4f46\u6211\u4eec\u4e0d\u77e5\u9053\u662f\u8c01\u505a\u4e86\u8fd9\u4e00\u5c1d\u8bd5--\u6211\u4eec\u53ef\u80fd\u6c38\u8fdc\u4e5f\u4e0d\u4f1a\u77e5\u9053\u3002\u65e9\u57282003\u5e74\uff0cLinux\u5c31\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3aBitKeeper\u7684\u7cfb\u7edf\u6765\u5b58\u50a8Linux\u6e90\u4ee3\u7801\u7684\u4e3b\u526f\u672c\u3002\u5982\u679c\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u63d0\u51fa\u4fee\u6539Linux\u4ee3\u7801\u7684\u5efa\u8bae\uff0c\u4ed6\u4eec\u5c06\u63d0\u4ea4\u4ed6\u4eec\u5efa\u8bae\u7684\u66f4\u6539\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u6709\u7ec4\u7ec7\u7684\u5ba1\u6279\u8fc7\u7a0b\u6765\u51b3\u5b9a\u66f4\u6539\u662f\u5426\u4f1a\u88ab\u63a5\u53d7\u5230\u4e3b\u4ee3\u7801\u4e2d\u3002\u5bf9\u4e3b\u4ee3\u7801\u7684\u6bcf\u4e00\u6b21\u66f4\u6539\u90fd\u4f1a\u6709\u4e00\u4e2a\u7b80\u77ed\u7684\u89e3\u91ca\uff0c\u5176\u4e2d\u603b\u662f\u5305\u542b\u4e00\u4e2a\u6307\u5411\u5176\u6279\u51c6\u8bb0\u5f55\u7684\u6307\u9488\u3002\n\u4f46\u6709\u4e9b\u4eba\u4e0d\u559c\u6b22BitKeeper\uff0c\u6240\u4ee5\u4fdd\u7559\u4e86\u6e90\u4ee3\u7801\u7684\u7b2c\u4e8c\u4efd\u526f\u672c\uff0c\u8fd9\u6837\u5f00\u53d1\u8005\u5c31\u53ef\u4ee5\u901a\u8fc7\u53e6\u4e00\u4e2a\u540d\u4e3aCVS\u7684\u4ee3\u7801\u7cfb\u7edf\u83b7\u5f97\u4ee3\u7801\u3002\u4ee3\u7801\u7684CVS\u526f\u672c\u662f\u4e3b\u8981BitKeeper\u526f\u672c\u7684\u76f4\u63a5\u514b\u9686\u3002\n\u4f46\u57282003\u5e7411\u67085\u65e5\uff0c\u62c9\u91cc\u00b7\u9ea6\u514b\u6c83\u4f0a(Larry McVoy)\u6ce8\u610f\u5230CVS\u526f\u672c\u4e2d\u6709\u4e00\u4e2a\u4ee3\u7801\u66f4\u6539\uff0c\u6ca1\u6709\u6307\u5411\u6279\u51c6\u8bb0\u5f55\u7684\u6307\u9488\u3002\u8c03\u67e5\u663e\u793a\uff0c\u8be5\u66f4\u6539\u4ece\u672a\u83b7\u5f97\u6279\u51c6\uff0c\u66f4\u5947\u602a\u7684\u662f\uff0c\u8be5\u66f4\u6539\u6839\u672c\u6ca1\u6709\u51fa\u73b0\u5728\u4e3b\u8981\u7684BitKeeper\u5b58\u50a8\u5e93\u4e2d\u3002\u8fdb\u4e00\u6b65\u7684\u8c03\u67e5\u786e\u5b9a\uff0c\u663e\u7136\u6709\u4eba(\u4ee5\u7535\u5b50\u65b9\u5f0f)\u95ef\u5165CVS\u670d\u52a1\u5668\u5e76\u63d2\u5165\u4e86\u6b64\u66f4\u6539\u3002\n\u8fd9\u4e00\u53d8\u5316\u8d77\u5230\u4e86\u4ec0\u4e48\u4f5c\u7528\uff1f\u8fd9\u624d\u662f\u771f\u6b63\u6709\u8da3\u7684\u5730\u65b9\u3002\u8fd9\u4e00\u66f4\u6539\u4fee\u6539\u4e86\u540d\u4e3await4\u7684Linux\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u8be5\u4ee3\u7801\u7b49\u5f85\u67d0\u4e9b\u4e8b\u60c5\u53d1\u751f\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u6dfb\u52a0\u4e86\u8fd9\u4e24\u884c\u4ee3\u7801\uff1a\n[\u4e86\u89e3C\u7f16\u7a0b\u8bed\u8a00\u7684\u8bfb\u8005\u7ec3\u4e60\uff1a\u8fd9\u6bb5\u4ee3\u7801\u6709\u4ec0\u4e48\u4e0d\u5bfb\u5e38\u4e4b\u5904\uff1f\u7b54\u6848\u663e\u793a\u5728\u4e0b\u9762\u3002]\u3002\n\u4e13\u5bb6\u7684\u968f\u610f\u9605\u8bfb\u4f1a\u5c06\u5176\u89e3\u91ca\u4e3a\u65e0\u5bb3\u7684\u9519\u8bef\u68c0\u67e5\u4ee3\u7801\uff0c\u4ee5\u4f7fwait4\u5728\u4ee5\u6587\u6863\u7981\u6b62\u7684\u7279\u5b9a\u65b9\u5f0f\u8c03\u7528wait4\u65f6\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002\u4f46\u662f\u4e00\u4e2a\u771f\u6b63\u7ec6\u5fc3\u7684\u4e13\u5bb6\u8bfb\u8005\u4f1a\u6ce8\u610f\u5230\uff0c\u5728\u7b2c\u4e00\u884c\u7684\u672b\u5c3e\uff0c\u5b83\u8bf4\u7684\u662f\u201c=0\u201d\uff0c\u800c\u4e0d\u662f\u201c==0\u201d\u3002\u5728\u8fd9\u6837\u7684\u4ee3\u7801\u4e2d\u7f16\u5199\u4ee3\u7801\u901a\u5e38\u662f\u201c==0\u201d\uff0c\u5b83\u6d4b\u8bd5\u5f53\u524d\u8fd0\u884c\u7684\u4ee3\u7801(current-&gt\uff1buid)\u7684\u7528\u6237ID\u662f\u5426\u7b49\u4e8e\u96f6\uff0c\u800c\u4e0d\u4fee\u6539\u7528\u6237ID\uff0c\u4f46\u5b9e\u9645\u51fa\u73b0\u7684\u662f\u201c=0\u201d\uff0c\u5176\u6548\u679c\u662f\u5c06\u7528\u6237ID\u8bbe\u7f6e\u4e3a\u96f6\u3002\n\u5c06\u7528\u6237ID\u8bbe\u7f6e\u4e3a\u96f6\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u7528\u6237ID\u53f70\u662f\u201c\u6839\u201d\u7528\u6237\uff0c\u5b83\u88ab\u5141\u8bb8\u505a\u4efb\u4f55\u5b83\u60f3\u505a\u7684\u4e8b\u60c5-\u8bbf\u95ee\u6240\u6709\u6570\u636e\u3001\u66f4\u6539\u6240\u6709\u4ee3\u7801\u7684\u884c\u4e3a\uff0c\u5e76\u5b8c\u5168\u5371\u53ca\u7cfb\u7edf\u6240\u6709\u90e8\u5206\u7684\u5b89\u5168\u6027\u3002\u56e0\u6b64\uff0c\u8fd9\u6bb5\u4ee3\u7801\u7684\u6548\u679c\u662f\u4e3a\u4efb\u4f55\u4ee5\u7279\u5b9a\u65b9\u5f0f\u8c03\u7528wait4\u7684\u8f6f\u4ef6\u6388\u4e88root\u6743\u9650\uff0c\u800c\u8fd9\u79cd\u65b9\u5f0f\u5e94\u8be5\u662f\u65e0\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u2026\u3002\u8fd9\u662f\u4e2a\u7ecf\u5178\u7684\u540e\u95e8\u3002\n\u8fd9\u662f\u4e00\u4ef6\u975e\u5e38\u5de7\u5999\u7684\u4f5c\u54c1\u3002\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u65e0\u5bb3\u7684\u9519\u8bef\u68c0\u67e5\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u540e\u95e8\u3002\u800c\u4e14\u5b83\u662f\u5728\u6b63\u5e38\u7684\u5ba1\u6279\u6d41\u7a0b\u4e4b\u5916\u88ab\u5077\u5077\u6e9c\u8fdb\u4ee3\u7801\u4e2d\u7684\uff0c\u4ee5\u907f\u514d\u5ba1\u6279\u6d41\u7a0b\u6ce8\u610f\u5230\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u60c5\u7684\u4efb\u4f55\u53ef\u80fd\u6027\u3002\n\u4f46\u662f\u8fd9\u4e00\u5c1d\u8bd5\u6ca1\u6709\u6210\u529f\uff0c\u56e0\u4e3aLinux\u56e2\u961f\u8db3\u591f\u4ed4\u7ec6\u5730\u6ce8\u610f\u5230\u8fd9\u6bb5\u4ee3\u7801\u5728CVS\u5b58\u50a8\u5e93\u4e2d\uff0c\u800c\u6ca1\u6709\u7ecf\u8fc7\u6b63\u5e38\u7684\u5ba1\u6279\u6d41\u7a0b\u3002Linux\u5f97\u4e00\u5206\u3002\n\u8fd9\u6709\u53ef\u80fd\u662f\u7f8e\u56fd\u56fd\u5bb6\u5b89\u5168\u5c40\u7684\u88ad\u51fb\u5417\uff1f\u4e5f\u8bb8\u5427\u3002\u4f46\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u4eba\u6709\u5b9e\u65bd\u8fd9\u6b21\u88ad\u51fb\u7684\u6280\u80fd\u548c\u52a8\u673a\u3002\u9664\u975e\u6709\u4eba\u8ba4\u7f6a\uff0c\u6216\u8005\u627e\u5230\u786e\u51ff\u7684\u6587\u4ef6\uff0c\u5426\u5219\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\u3002", "note_en": "Josh  wrote recently about a serious security bug that appeared in Debian Linux back in 2006, and whether it was really a backdoor inserted by the NSA. (He concluded that it probably was not.)\n Today I want to write about another  incident, in 2003, in which someone tried to backdoor the Linux kernel. This one was definitely an attempt to insert a backdoor. But we don\u2019t know who it was that made the attempt\u2014and we probably never will.   Back in 2003 Linux used a system called BitKeeper to store the master copy of the Linux source code. If a developer wanted to propose a modification to the Linux code, they would submit their proposed change, and it would go through an organized approval process to decide whether the change would be accepted into the master code. Every change to the master code would come with a short explanation, which always included a pointer to the record of its approval.\n But some people didn\u2019t like BitKeeper, so a second copy of the source code was kept so that developers could get the code via another code system called CVS. The CVS copy of the code was a direct clone of the primary BitKeeper copy.\n But on Nov. 5, 2003, Larry McVoy  noticed that there was a code change in the CVS copy that did not have a pointer to a record of approval. Investigation showed that the change had never been approved and, stranger yet, that this change did not appear in the primary BitKeeper repository at all. Further investigation determined that someone had apparently broken in (electronically) to the CVS server and inserted this change.\n What did the change do? This is where it gets really interesting. The change modified the code of a Linux function called wait4, which a program could use to wait for something to happen. Specifically, it added these two lines of code:\n  [Exercise for readers who know the C programming language: What is unusual about this code? Answer appears below.]\n A casual reading by an expert would interpret this as innocuous error-checking code to make wait4 return an error code when wait4 was called in a certain way that was forbidden by the documentation. But a really careful expert reader would notice that, near the end of the first line, it said \u201c= 0\u201d rather than \u201c== 0\u201d. The normal thing to write in code like this is \u201c== 0\u201d, which tests whether the user ID of the currently running code (current-&gt;uid) is equal to zero, without modifying the user ID. But what actually appears is \u201c= 0\u201d, which has the effect of setting the user ID to zero.\n Setting the user ID to zero is a problem because user ID number zero is the \u201croot\u201d user, which is allowed to do absolutely anything it wants\u2014to access all data, change the behavior of all code, and to compromise entirely the security of all parts of the system. So the effect of this code is to give root privileges to any piece of software that called wait4 in a particular way that is supposed to be invalid. In other words \u2026 it\u2019s a classic backdoor.\n This is a very clever piece of work. It looks like innocuous error checking, but it\u2019s really a back door. And it was slipped into the code outside the normal approval process, to avoid any possibility that the approval process would notice what was up.\n But the attempt didn\u2019t work, because the Linux team was careful enough to notice that that this code was in the CVS repository without having gone through the normal approval process. Score one for Linux.\n Could this have been an NSA attack? Maybe. But there were many others who had the skill and motivation to carry out this attack. Unless somebody confesses, or a smoking-gun document turns up, we\u2019ll never know.", "posttime": "2020-08-10 15:26:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u540e\u95e8,backdoor,\u4ee3\u7801", "title": "2003\u5e74\u7684Linux\u540e\u95e8\u5c1d\u8bd5", "title_en": "The Linux Backdoor Attempt of 2003", "transed": 1, "url": "https://freedom-to-tinker.com/2013/10/09/the-linux-backdoor-attempt-of-2003/", "via": "", "real_tags": ["linux", "\u540e\u95e8", "backdoor", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "a0489bc78108a09052bfb9e7bcea0f9e.png", "infoid": 1017298, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53ef\u79fb\u690d(Linux\u3001Unix\u3001MacOS\u3001Windows\u7b49)\uff0c\u53d1\u884c\u7248\u4e2d\u5305\u62ec\u7528\u4e8eWindows\u7684x86\u548cx64\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u8d85\u5feb\u7684\u65b0\u5339\u914d\u7b97\u6cd5\uff0c\u8f7b\u677e\u51fb\u8d25grep\u3001ripgrep\u3001Silver Search\u3001Hyperscan\u3001SIFT\u7b49\u8bf7\u53c2\u9605\u6027\u80fd\u57fa\u51c6\u3002\n\u7528\u6237\u53cb\u597d\uff0cug\u547d\u4ee4\u4f7f\u7528\u5408\u7406\u7684\u9ed8\u8ba4\u503c\u548c\u53ef\u5b9a\u5236\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8be5\u547d\u4ee4\u4e0eugrep--config\u76f8\u540c\uff0c\u53ef\u4ee5\u4f7f\u7528\u60a8\u7684\u9996\u9009\u9879\u52a0\u8f7d.ugrep\u914d\u7f6e\u6587\u4ef6\u3002\n\u641c\u7d22\u6863\u6848(cpio\u3001jar\u3001tar\u3001pax\u3001zip)\u548c\u538b\u7f29\u6587\u4ef6(zip\u3001gz\u3001z\u3001bz\u3001bz2\u3001lzma\u3001xz\u3001lz4)\u7684\u5185\u5bb9\u3002\nUgrep--filter=&39\uff1bpdf\uff1apdftotext%-&#39\uff1b\u6a21\u5f0f...ugrep--filter=&#39\uff1bodt\uff0cdoc\uff0cdocx\uff0crtf\uff0cxls\uff0cxlsx\uff0cppt\uff0cpptx\uff1asoffice--headless--cat%&39\uff1b\u6a21\u5f0f...ugrep--filter=&#39\uff1bpem\uff1aopenssl x509-text\uff0cce\uff0ccrt\uff0cder\uff1aopenSSL x509-text-info\u3002\n\u641c\u7d22\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u663e\u793a\u5177\u6709\u4e8c\u8fdb\u5236\u6a21\u5f0f\u5339\u914d\u7684\u5341\u516d\u8fdb\u5236\u8f6c\u50a8(Unicode\u6587\u672c\u6216\u539f\u59cb\u5b57\u8282\u6a21\u5f0f)\u3002\nUgrep-W TEXTPATTERN...\u3002UGREP-X TEXTPATTERN...UGREP-W-U BYTEPATTERN...\u3002UGREP-X-U BYTEPATTERN...\u3002\n\u5305\u62ec\u8981\u6309\u6587\u4ef6\u7c7b\u578b\u6216\u6587\u4ef6\u5e7b\u5b57\u8282\u6570\u641c\u7d22\u7684\u6587\u4ef6\uff0c\u6216\u4f7f\u7528^\u5c06\u5176\u6392\u9664\nUgrep-t\u578b\u56fe\u6848...\u3002Ugrep-t^\u578b\u56fe\u6848...ugrep-M&39\uff1bMagic\u56fe\u6848...\u3002Ugrep-M&39\uff1b^\u9b54\u672f\u56fe\u6848...\u3002\n\u5305\u62ec\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u4ee5\u641c\u7d22\u4e0egitignore\u6837\u5f0f\u5168\u5c40\u5339\u914d\u6587\u4ef6\u548c\u76ee\u5f55\uff0c\u6216\u4f7f\u7528^\u5c06\u5176\u6392\u9664\u3002\nUgrep-g&#39\uff1bFILEGLOB&39\uff1b\u56fe\u6848...\u3002Ugrep-g&39\uff1b^FILEGLOB&39\uff1bPattern...ugrep-g&39\uff1bDIRGLOB/&39\uff1bPattern...\u3002Ugrep-g&39\uff1b^DIRGLOB/&39\uff1bPattern...ugrep-g&39\uff1bpath/FILEGLOB&39\uff1bPattern...\u3002Ugrep-g&#39\uff1b^PATH/FILEGLOB&#39\uff1bPattern...ugrep-g&39\uff1bPATH/DIRGLOB/&39\uff1bPattern...\u3002Ugrep-g&39\uff1b^\u8def\u5f84/\u76ee\u5f55\u6a21\u5f0f...\u3002\n\u5305\u62ec\u9884\u5b9a\u4e49\u7684regex\u6a21\u5f0f\uff0c\u7528\u4e8e\u641c\u7d22\u6e90\u4ee3\u7801\u3001javascript\u3001XML\u3001JSON\u3001HTML\u3001PHP\u3001markdown\u7b49\u3002\nUgrep pattern-f c++/zap_Comments-f c++/zap_string...ugrep pattern-f php/zap_html...ugrep-f js/\u51fd\u6570...|ugrep pattern...\u3002\nUgrep--\u6392\u5e8f\u6a21\u5f0f...\u3002Ugrep--SORT=\u5927\u5c0f\u6a21\u5f0f...ugrep--SORT=\u66f4\u6539\u7684\u6a21\u5f0f...\u3002Ugrep--SORT=\u5df2\u521b\u5efa\u7684\u6a21\u5f0f...ugrep-Z--SORT=\u6700\u4f73\u6a21\u5f0f...\u3002\nUgrep--CSV\u6a21\u5f0f..\u3002Ugrep--json\u6a21\u5f0f...ugrep--XML\u6a21\u5f0f...\u3002Ugrep--format=&#39\uff1b\u6587\u4ef6=%f\u884c=%n\u5339\u914d=%O%~&#39\uff1b\u6a21\u5f0f...\u3002\n\u641c\u7d22\u4e0e\u591a\u884c\u5339\u914d\u7684\u6a21\u5f0f\uff0c\u5373\u6a21\u5f0f\u53ef\u80fd\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\\n\u6362\u884c\u7b26\n\u8fd9\u5c06\u5b89\u88c5ugrep\u548cug\u547d\u4ee4\uff0c\u5176\u4e2dug\u4e0eugrep\u76f8\u540c\uff0c\u4f46\u5f53\u914d\u7f6e\u6587\u4ef6.ugrep\u51fa\u73b0\u5728\u5de5\u4f5c\u76ee\u5f55\u6216\u4e3b\u76ee\u5f55\u4e2d\u65f6\uff0c\u5b83\u8fd8\u4f1a\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6.ugrep\u3002\n\u5982\u679c\u60a8\u8fd8\u9700\u8981ug\u547d\u4ee4\uff0c\u8bf7\u5c06ugrep.exe\u590d\u5236\u5230ug.exe\uff0c\u8be5\u547d\u4ee4\u4f1a\u5728\u5de5\u4f5c\u76ee\u5f55\u6216\u4e3b\u76ee\u5f55\u4e2d\u5b58\u5728\u65f6\u52a0\u8f7d.ugrep\u914d\u7f6e\u6587\u4ef6\u3002\n\u5c06ugrep.exe\u548cug.exe\u6dfb\u52a0\u5230\u60a8\u7684\u6267\u884c\u8def\u5f84\uff1a\u8f6c\u5230\u201c\u8bbe\u7f6e\u201d\uff0c\u7136\u540e\u5728\u201c\u67e5\u627e\u8bbe\u7f6e\u201d\u4e2d\u641c\u7d22&#34\uff1b\u8def\u5f84&#34\uff1b\u3002\u9009\u62e9\u73af\u5883\u53d8\u91cf-&gt\uff1bpath-&gt\uff1bNew\uff0c\u7136\u540e\u6dfb\u52a0\u653e\u7f6eugrep.exe\u548cug.exe\u53ef\u6267\u884c\u6587\u4ef6\u7684\u76ee\u5f55\u3002\n\u5728\u547d\u4ee4\u884c\u4e0a\u5f15\u7528\u6a21\u5f0f\u548c\u53c2\u6570\u65f6\uff0c\u4e0d\u8981\u4f7f\u7528\u5355\u5f15\u53f7\uff0c\u800c\u8981\u4f7f\u7528\u5355\u5f15\u53f7\uff1b\u5927\u591a\u6570Windows\u547d\u4ee4\u5b9e\u7528\u7a0b\u5e8f\u90fd\u4f1a\u8003\u8651\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5355\u5f15\u53f7\u90e8\u5206\uff01\n\u5f53\u6307\u5b9a\u7a7a\u6a21\u5f0f\u6765\u5339\u914d\u6240\u6709\u8f93\u5165\u65f6\uff0c\u67d0\u4e9bWindows\u547d\u4ee4\u89e3\u91ca\u7a0b\u5e8f(\u5982Powershell)\u53ef\u80fd\u4f1a\u5ffd\u7565\u8fd9\u4e00\u70b9\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4f7f\u7528option--Match\u3002\n\u9009\u9879-P(Perl\u6b63\u5219\u8868\u8fbe\u5f0f)\u9700\u8981PCRE2\u5e93(\u9996\u9009)\u6216Boost.Regex\u5e93\u3002\u5982\u679c\u672a\u5b89\u88c5PCRE2\uff0c\u8bf7\u4f7f\u7528\u4f8b\u5982sudo apt-get install-y libpcre2-dev\u6216\u4e0b\u8f7dPCRE2\u5e76\u6309\u7167\u5b89\u88c5\u8bf4\u660e\u5b89\u88c5PCRE2\u3002\u6216\u8005\uff0c\u4e0b\u8f7dBoost.Regex\u5e76\u8fd0\u884c./bootstrap.sh\u548csudo./b2--with-regex install\u3002\u8bf7\u53c2\u9605Boost\uff1a\u5feb\u901f\u5165\u95e8\u3002\n\u9009\u9879-z(\u538b\u7f29\u6587\u4ef6\u548c\u5f52\u6863\u641c\u7d22)\u9700\u8981\u5b89\u88c5zlib\u5e93\u3002\u5b83\u5b89\u88c5\u5728\u5927\u591a\u6570\u7cfb\u7edf\u4e0a\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u5b89\u88c5\u5b83\uff0c\u4f8b\u5982\u4f7f\u7528sudo apt-get install-y libz-dev.\u8981\u641c\u7d22.bz\u548c.bz2\u6587\u4ef6\uff0c\u8bf7\u5b89\u88c5bzip2\u5e93\uff0c\u4f8b\u5982\u4f7f\u7528sudo apt-get install-y libbz2-dev\u3002\u8981\u641c\u7d22.lzma\u548c.xz\u6587\u4ef6\uff0c\u8bf7\u5b89\u88c5lzma\u5e93\uff0c\u4f8b\u5982\u4f7f\u7528sudo apt-get install-y liblzma-dev\u3002\u8981\u641c\u7d22.lz4\u6587\u4ef6\uff0c\u8bf7\u5b89\u88c5lz4\u5e93\uff0c\u4f8b\u5982\u4f7f\u7528sudo apt-get install-y liblz4-dev\u3002\n\u67d0\u4e9bLinux\u7cfb\u7edf\u53ef\u80fd\u672a\u914d\u7f6e\u4e3a\u4ece/usr/local/lib\u52a0\u8f7d\u52a8\u6001\u5e93\uff0c\u4ece\u800c\u5bfc\u81f4\u5728\u8fd0\u884cugrep\u65f6\u51fa\u73b0\u5e93\u52a0\u8f7d\u9519\u8bef\u3002\u8981\u7ea0\u6b63\u8fd9\u4e00\u70b9\uff0c\u8bf7\u5c06\u5bfc\u51faLD_LIBRARY_PATH=&#34\uff1b$LD_LIBRARY_PATH:/usr/local/lib&#34\uff1b\u6dfb\u52a0\u5230~/.bashrc\u6587\u4ef6\u3002\u6216\u8005\u8fd0\u884csudo ldconfig/usr/local/lib\u3002\n\u8fd9\u5c06\u4f7f\u7528./configure--enable-color\u548cmake-j\u5728ugrep/src\u76ee\u5f55\u4e2d\u6784\u5efaugrep\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u5e76\u4f7f\u7528make test\u8fdb\u884c\u9a8c\u8bc1\u3002\u6240\u6709\u6d4b\u8bd5\u901a\u8fc7\u540e\uff0cugrep\u53ef\u6267\u884c\u6587\u4ef6\u5c06\u590d\u5236\u5230ugrep/bin/ugrep\uff0c\u5e76\u4e3aug\u547d\u4ee4\u6dfb\u52a0symlink ugrep/bin/ug-&gt\uff1bugrep/bin/ugrep\u3002\n\u8bf7\u6ce8\u610f\uff0cug\u4e0eugrep\u76f8\u540c\uff0c\u4f46\u662f\u5f53ug\u51fa\u73b0\u5728\u5de5\u4f5c\u76ee\u5f55\u6216\u4e3b\u76ee\u5f55\u4e2d\u65f6\uff0c\u5b83\u8fd8\u4f1a\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6.ugrep\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728.ugrep\u4e2d\u5b9a\u4e49ug\u7684\u9ed8\u8ba4\u9009\u9879\u3002\n\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u5c06ugrep/bin/ugrep\u548cugrep/bin/ug\u590d\u5236\u5230\u65b9\u4fbf\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982~/bin\u76ee\u5f55\u4e2d\u3002\n\u8fd9\u8fd8\u4f1a\u5b89\u88c5\u5e26\u6709\u9884\u5b9a\u4e49\u6a21\u5f0f\u7684\u6a21\u5f0f\u6587\u4ef6\uff0c\u7528\u4e8e\u9009\u9879-FAT/usr/local/share/ugrep/Patterns/\u3002\u9009\u9879-f\u9996\u5148\u68c0\u67e5\u5de5\u4f5c\u76ee\u5f55\u4e2d\u662f\u5426\u5b58\u5728\u6a21\u5f0f\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u68c0\u67e5\u73af\u5883\u53d8\u91cfGREP_PATH\u4ee5\u52a0\u8f7d\u6a21\u5f0f\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8bfb\u53d6\u5df2\u5b89\u88c5\u7684\u9884\u5b9a\u4e49\u6a21\u5f0f\u6587\u4ef6\u3002\n\u9057\u61be\u7684\u662f\uff0cGit\u514b\u9686\u4e0d\u4fdd\u7559\u65f6\u95f4\u6233\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u8b66\u544a\uff1a&#39\uff1baclocal-1.15&#39\uff1b\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u4e22\u5931\u3002&#34\uff1b\u6216\u8005\u5728\u8fd0\u884cmake\u65f6\u627e\u4e0d\u5230\u81ea\u52a8\u6807\u9898\u3002\n\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u5e0c\u671b\u5728\u8fdb\u884c\u91cd\u5927\u66f4\u6539\u65f6\u4f7f\u7528\u6740\u83cc\u5668\u6765\u9a8c\u8bc1ugrep\u4ee3\u7801\uff0c\u4f8b\u5982\u68c0\u6d4b\u4e0eThreadSaniizer\u7684\u6570\u636e\u7ade\u4e89\uff1a\n\u6211\u4eec\u7528clang AddressSaniizer\u3001MemorySaniizer\u3001ThreadSaniizer\u548cUnfinedBehaviorSaniizer\u68c0\u67e5\u4e86ugrep\u3002\u8fd9\u4e9b\u9009\u9879\u4f1a\u5e26\u6765\u5de8\u5927\u7684\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u4e0d\u5e94\u7528\u4e8e\u6700\u7ec8\u6784\u5efa\u3002\nUgrep\u662f\u591a\u7ebf\u7a0b\u7684\uff0c\u5e76\u4f7f\u7528\u5de7\u5999\u7684\u65e0\u9501\u4f5c\u4e1a\u961f\u5217\u7a83\u53d6\u6765\u4f18\u5316\u8d1f\u8f7d\u5e73\u8861\u3002\u6211\u4eec\u8fd8\u4f7f\u7528AVX2/512BW\u3001SSE2\u548cARM NEON/AArch64\u6307\u4ee4\u4f18\u5316\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002\u538b\u7f29\u6587\u4ef6\u5728\u641c\u7d22\u7684\u540c\u65f6\u88ab\u540c\u65f6\u89e3\u538b\u7f29\uff0c\u4ee5\u8fdb\u4e00\u6b65\u63d0\u9ad8\u6027\u80fd\u3002\u5b9e\u73b0\u5f02\u6b65IO\u4ee5\u5b9e\u73b0\u9ad8\u6548\u7684\u8f93\u5165\u548c\u8f93\u51fa\u3002\n\u4eceQt 5.9.2\u6839\u76ee\u5f55\u5bf9\u76ee\u5f55\u6811\u4e2d\u7684#include&#34\uff1b...&#34\uff1b\u8fdb\u884c\u591a\u7ebf\u7a0b\u9012\u5f52\u641c\u7d22\uff0c\u9650\u5236\u4e3a.h\u3001.hpp\u548c.cpp\u3002\n\u6ce8\u610f\uff1aT10\u548cT11\u4f7f\u7528ugrep\u9009\u9879-oh\uff0chpp\uff0ccpp\u5c06\u641c\u7d22\u9650\u5236\u4e3a\u6269\u5c55\u540d\u4e3a.h\u3001.hpp\u548c.cpp\u7684\u6587\u4ef6\uff0c\u5e94\u4f7f\u7528GNU/BSD/PCRGE grep\u8868\u793a\u4e3a--include=&#39\uff1b*.h&#39\uff1b--include=&#39\uff1b*.hpp&#39\uff1b--include=&#39\uff1b*.cpp&#39\uff1b\uff0c\u4f7f\u7528Silver Search as-G&#39\uff1b\u9700\u8981--\u641c\u7d22-\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u641c\u7d22\u538b\u7f29\u6587\u4ef6(\u9519\u8bef)\uff0c\u5e76\u4f7f\u7528--glob=&#39\uff1b*.h&#39\uff1b--glob=&#39\uff1b*.hpp&#39\uff1b--glob=&#39\uff1b*.cpp&#39\uff1b\u3002\n\u6027\u80fd\u6d4b\u8bd5\u662f\u5728\u4e00\u53f02.9 GHz Intel Corei7\u300116 GB 2133 MHz LPDDR3 Mac OS 10.12.6\u673a\u5668\u4e0a\u4f7f\u7528clang 9.0.0-O2\u7684MacOSX\u8fdb\u884c\u7684\u3002\u5728\u673a\u5668\u8d1f\u8f7d\u6700\u5c0f\u7684\u60c5\u51b5\u4e0b\uff0c\u663e\u793a\u4e86\u81f3\u5c1130\u6b21\u8fd0\u884c\u7684\u6700\u4f73\u65f6\u95f4\u3002\n\u7ed3\u679c\u4ee5\u5b9e\u65f6(\u6302\u949f\u65f6\u95f4)\u79d2\u6570\u663e\u793a\u3002\u6700\u4f73\u65f6\u95f4\u4ee5\u7c97\u4f53\u663e\u793a\uff0cn/a\u8868\u793a\u8fd0\u884c\u65f6\u95f4\u8d85\u8fc71\u5206\u949f\u6216\u4e0d\u652f\u6301\u6240\u9009\u9009\u9879(\u4f8b\u5982\uff0c\u9009\u9879-z)\u3002\n\u6ce8\u610f\uff1aSilver Searcher2.2.0\u5728\u591a\u7ebf\u7a0b(T10 0.45s)\u4e0b\u7684\u8fd0\u884c\u901f\u5ea6\u6bd4\u5355\u7ebf\u7a0b(T11 0.32s)\u6162\uff0c\u8fd9\u662f\u5411\u7ef4\u62a4\u4eba\u5458\u62a5\u544a\u7684\u4e00\u4e2a\u95ee\u9898\u3002\n\u7531\u4e8e\u5176\u62a5\u544a\u7684\u6240\u6709\u5339\u914d\u90fd\u662f\u6a21\u5f0f\u5339\u914d\u884c\u4e3a\uff0cHyperscan simple greprep\u6bd4\u5176\u4ed6grep\u591a\u8f6c\u6362\u51e0\u4e2a\u5339\u914d\u9879\u3002\u9009\u9879-w\u4f7f\u7528\u6a21\u5f0f\\b(char|int|long|size_t|void)\\b\u6a21\u62df\u3002\u9009\u9879-f\u6a21\u62df\u5982\u4e0b\uff1a\n\u6ce8\u610f\uff1a\u8f93\u51fa\u88ab\u53d1\u9001\u5230\u7a7a\u5b9e\u7528\u7a0b\u5e8f\uff0c\u4ee5\u6d88\u9664\u7ec8\u7aef\u663e\u793a\u5f00\u9500\u3002\u7a7a\u5b9e\u7528\u7a0b\u5e8f\u6e90\u4ee3\u7801\uff1a\n#include&lt\uff1bsys/tyes.h&gt\uff1b#include&lt\uff1bsys/uio.h&gt\uff1b#include&lt\uff1bunistd.h&gt\uff1bint main(){char buf[65536]\uff1bWhile(Read(0\uff0cbuf\uff0c65536)&gt\uff1b0)Continue\uff1b}\n\u6ce8\u610f\uff1a\u6027\u80fd\u7ed3\u679c\u53d6\u51b3\u4e8e\u70ed/\u51b7\u8fd0\u884c\u3001\u7f16\u8bd1\u5668\u3001\u5e93\u3001Theos\u3001CPU\u7c7b\u578b\u548c\u6587\u4ef6\u7cfb\u7edf\u5ef6\u8fdf\u3002\u7136\u800c\uff0c\u5728\u8bb8\u591a\u5176\u4ed6\u7c7b\u578b\u7684\u673a\u5668\u4e0a\u4e5f\u83b7\u5f97\u4e86\u7c7b\u4f3c\u7684\u7ade\u4e89\u7ed3\u679c\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5728Vim\u4e2d\u5b9a\u4e49\uff1agrep\u547d\u4ee4\u6765\u9012\u5f52\u641c\u7d22\u6587\u4ef6\u3002\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u5c06\u4ee5\u4e0b\u884c\u6dfb\u52a0\u5230\u6839\u76ee\u5f55\u4e2d\u7684.vimrc\u6587\u4ef6\u4e2d\uff1a\n\u8fd9\u4f7f\u7528Vim\uff1agrep\u547d\u4ee4\u6307\u5b9a\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684\u641c\u7d22\u3002\u5bf9\u4e8e\u533a\u5206\u5927\u5c0f\u5199\u7684\u641c\u7d22\uff0c\u8bf7\u4ecegrepprg\u4e2d\u5220\u9664\\-j\u3002\u540c\u4e00\u884c\u4e0a\u7684\u591a\u4e2a\u5339\u914d\u9879\u5206\u522b\u5217\u5728\u5feb\u901f\u4fee\u590d\u7a97\u53e3\u4e2d\u3002\u5982\u679c\u8fd9\u4e0d\u662f\u6240\u9700\u7684\uff0c\u8bf7\u4ecegrepprg\u4e2d\u5220\u9664\\-u\u3002\u4f7f\u7528\u6b64\u66f4\u6539\uff0c\u53ea\u663e\u793a\u4e00\u884c\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u3002\u9009\u9879--Ignore-files\u8df3\u8fc7.gitignore\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u6587\u4ef6(\u5982\u679c\u5b58\u5728)\u3002\u8981\u5c06\u9012\u5f52\u641c\u7d22\u7684\u6df1\u5ea6\u9650\u5236\u4e3a\u4ec5\u9650\u4e8e\u5f53\u524d\u76ee\u5f55\uff0c\u8bf7\u5c06\\1\\f25\\1\\f6\u8ffd\u52a0\u5230-1\\f25 grepprg-1\\f6\u3002\n\u73b0\u5728\u53ef\u4ee5\u8c03\u7528Vim\u4e2d\u7684Vim\uff1agrep\u547d\u4ee4\u5728\u6307\u5b9a\u8def\u5f84\u4e0a\u7684\u6587\u4ef6\u4e2d\u641c\u7d22\u6a21\u5f0f\u5339\u914d\uff1a\n\u5982\u679c\u7701\u7565path\uff0c\u5219\u641c\u7d22\u5de5\u4f5c\u76ee\u5f55\u3002\u4f7f\u7528%\u4f5c\u4e3aPATH\u4ec5\u641c\u7d22Vim\u4e2d\u5f53\u524d\u6253\u5f00\u7684\u6587\u4ef6\uff1a\n\uff1agrep\u547d\u4ee4\u5728\u5feb\u901f\u4fee\u590d\u7a97\u53e3\u4e2d\u663e\u793a\u7ed3\u679c\uff0c\u8be5\u7a97\u53e3\u5141\u8bb8\u60a8\u5feb\u901f\u8df3\u8f6c\u5230\u627e\u5230\u7684\u5339\u914d\u9879\u3002\n\u53cc\u51fb\u6b64\u7a97\u53e3\u4e2d\u7684\u4e00\u884c(\u6216\u9009\u62e9\u4e00\u884c\u5e76\u6309Enter\u952e)\u8df3\u8f6c\u5230\u5339\u914d\u7684\u6587\u4ef6\u548c\u6587\u4ef6\u4e2d\u7684\u4f4d\u7f6e\u3002\u8f93\u5165Commands\uff1acnand\uff1acp\u5206\u522b\u8df3\u5230\u4e0b\u4e00\u4e2a\u6216\u4e0a\u4e00\u4e2a\u5339\u914d\u3002\u8981\u66f4\u65b0QuickFix\u7a97\u53e3\u4e2d\u7684\u641c\u7d22\u7ed3\u679c\uff0c\u53ea\u9700\u5bf9\u5b83\u4eec\u8fdb\u884cgrep\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u8981\u9012\u5f52\u641c\u7d22\u5de5\u4f5c\u76ee\u5f55\u4e2d\u6807\u8bb0\u4e3aFIXME\u7684C++\u6e90\u4ee3\u7801\uff1a\n\u60a8\u53ef\u4ee5\u5c06ugrep\u9009\u9879\u4e0e\uff1agrep\u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982\u9009\u62e9\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u5355\u884c\u548c\u591a\u884c\u6ce8\u91ca\uff1a\n\u5feb\u901f\u4fee\u590d\u4e2d\u53ea\u663e\u793a\u591a\u884c\u6ce8\u91ca\u7684\u7b2c\u4e00\u884c\uff0c\u4ee5\u4fdd\u5b58\u7a7a\u95f4\u3002\u8981\u663e\u793a\u591a\u884c\u5339\u914d\u7684\u6240\u6709\u884c\uff0c\u8bf7\u4ecegrepformat\u4e2d\u5220\u9664%-G\u3002\n\u8fd9\u4e9b\u9009\u9879\u662f\u53ef\u9009\u7684\uff0c\u53ef\u4ee5\u7701\u7565\uff1a-i\u8df3\u8fc7\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u9009\u9879--Ignore-files\u8df3\u8fc7.gitignore\u6587\u4ef6\u4e2d\u6307\u5b9a\u7684\u6587\u4ef6(\u5982\u679c\u5b58\u5728)\uff0c\u9009\u9879-3\u5c06\u641c\u7d22\u76ee\u5f55\u9650\u5236\u5728\u4e09\u4e2a\u7ea7\u522b(\u5de5\u4f5c\u76ee\u5f55\u53ca\u5176\u4ee5\u4e0b\u6700\u591a\u4e24\u4e2a\u7ea7\u522b)\u3002\nGrep=ugrep--SORT-G-U-Y-\u3002-Dread-dreadegrep=ugrep--\u6392\u5e8f-E-U-Y-\u3002-Dread-dreadfgrep=ugrep--SORT-F-U-Y-\u3002-Dread-dreadzgrep=ugrep--SORT-G-U-Y-Z-\u3002-Dread-dreadzegrep=ugrep--SORT-E-U-Y-Z-\u3002-Dread-dreadzfgrep=ugrep--SORT-F-U-Y-Z-\u3002-\u6050\u60e7-\u6050\u60e7\u3002\n\u5f53ugrep(\u6216ugrep.exe)\u53ef\u6267\u884c\u6587\u4ef6\u91cd\u547d\u540d\u4e3agrep(grep.exe)\u3001egrep(egrep.exe)\u3001fgrep(fgrep.exe)\u7b49\u65f6\uff0c\u4e0a\u9762\u663e\u793a\u7684\u9009\u9879\u5b50\u96c6\u5c06\u81ea\u52a8\u751f\u6548\uff0c\u4f46--SORT\u3001-DREAD\u3001-DREAD\u548c-U\u9664\u5916\uff0c\u4ee5\u5141\u8bb8Unicode\u5339\u914d\u3002\u4f8b\u5982\uff0c\u5f53ugrep\u91cd\u547d\u540d\u4e3aegrep\u65f6\uff0c\u9009\u9879-E\u3001-Y\u548c-\u3002\u4f1a\u81ea\u52a8\u542f\u7528\u3002\n\u8bf7\u6ce8\u610f\uff0c\u67d0\u4e9bgrep\u9009\u9879\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4ee5\u4f7fugrep\u66f4\u52a0\u7528\u6237\u53cb\u597d\uff0c\u8bf7\u53c2\u9605\u5bf9grep\u7684\u663e\u8457\u6539\u8fdb\u3002\n\u522b\u540dUQ=&#39\uff1bug-q&#39\uff1b#Short&amp\uff1b\u5feb\u901f\u67e5\u8be2UI(\u4ea4\u4e92\u5f0f\uff0c\u4f7f\u7528.ugrep config)\u522b\u540dUX=&#39\uff1bug-UX&#39\uff1b#Short&amp\uff1b\u5feb\u901f\u4e8c\u8fdb\u5236\u6a21\u5f0f\u641c\u7d22(\u4f7f\u7528.ugrep config)\u522b\u540duz=&#39\uff1bug-z&#39\uff1b#Short&amp\uff1b\u5feb\u901f\u538b\u7f29\u6587\u4ef6\u548c\u6863\u6848\u641c\u7d22(\u4f7f\u7528.ugrep config)\u522b\u540dUGIT=&#39\uff1bug\u3002\u5728.ugrep configalias grep=&#39\uff1bugrep-G&#39\uff1b#Search with Basic Regular Expression(BRE)alias egrep=&#39\uff1bugrep-E&#39\uff1b#Search with Extended Regular Expression(Ere)alias fgrep=&#39\uff1bugrep-F&#39\uff1b#find string(S)alias pgrep=&#39\uff1bugrep-P&#39\uff1b#Search With Perl Regular Expression(ERE)alias fgrep=&#39\uff1bugrep-F&#39\uff1b#find string(S)alias pgrep=&#39\uff1bugrep-P&#39\uff1b#Search with Perl Regular Expression\u3002Ugrep-zg&#\u4f7f\u7528BREalias zegrep=&#39\uff1bugrep-ze&#39\uff1b#\u641c\u7d22\u538b\u7f29\u6587\u4ef6\u548c\u6863\u6848\u4f7f\u7528EREalias zfgrep=&#39\uff1bugrep-ZF&#39\uff1b#\u5728\u538b\u7f29\u6587\u4ef6\u548c/\u6216\u6863\u6848\u4e2d\u67e5\u627e\u5b57\u7b26\u4e32\u522b\u540d\u4e3azpgrep=&#39\uff1bugrep-ZP&#39\uff1b#\u4f7f\u7528Perl\u6b63\u5219\u8868\u8fbe\u5f0fsaulas zxas\u641c\u7d22\u538b\u7f29\u6587\u4ef6\u548c\u6863\u6848\u3002&#34\uff1b&#39\uff1b#\u4e0d\u641c\u7d22\u7684\u5341\u516d\u8fdb\u5236\u8f6c\u50a8\u6587\u4ef6\u3002\n\u8981\u81ea\u52a8\u641c\u7d22PDF\u548cOffice\u6587\u6863\uff0c\u8bf7\u5411\u5e26\u522b\u540d\u7684ugrep\u547d\u4ee4\u6dfb\u52a0\u7b5b\u9009\u5668\u9009\u9879\uff1a\nUgrep\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u6bd4GNU\u3001GREP\u548cBSD\u3001GREP\u3001POSIX\u66f4\u5177\u8868\u73b0\u529b\uff0c\u5e76\u4e14\u652f\u6301Unicode\u6a21\u5f0f\u5339\u914d\u548c\u5927\u90e8\u5206PCRE\u8bed\u6cd5\u3002\u6269\u5c55\u6b63\u5219\u8868\u8fbe\u5f0f(ERE)\u8bed\u6cd5\u662f\u9ed8\u8ba4\u8bed\u6cd5(\u5373\u9009\u9879-E\uff0c\u5982egrep\uff0c\u800c-G\u542f\u7528BRE)\u3002\nUgrep\u4f7f\u7528-W(\u4ee5\u5341\u516d\u8fdb\u5236\u8f93\u51fa\u4e8c\u8fdb\u5236\u5339\u914d\uff0c\u4e0e\u901a\u5e38\u4e00\u6837\u8f93\u51fa\u6587\u672c\u5339\u914d)\u548c-X(\u4ee5\u5341\u516d\u8fdb\u5236\u8f93\u51fa\u6240\u6709\u5339\u914d)\u751f\u6210\u5341\u516d\u8fdb\u5236\u8f6c\u50a8\u3002\nUgrep\u641c\u7d22pdf\u3001doc\u3001docx\u3001xls\u3001xlsx\u3001epub\u4ee5\u53ca\u66f4\u591a--filter\u4f7f\u7528\u7b2c\u4e09\u65b9\u683c\u5f0f\u8f6c\u6362\u5b9e\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u63d2\u4ef6\u3002\nUgrep\u63d0\u4f9b\u8d1f\u6a21\u5f0f-N\u6a21\u5f0f\uff0c\u8fd9\u662f(^X)\u5f62\u5f0f\u7684\u6a21\u5f0f\uff0c\u7528\u4e8e\u8df3\u8fc7\u4e0eX\u5339\u914d\u7684\u8f93\u5165\u3002\u8d1f\u6a21\u5f0f\u53ef\u7528\u4e8e\u5728\u641c\u7d22\u6e90\u4ee3\u7801\u4e2d\u7684\u6807\u8bc6\u7b26\u65f6\u8df3\u8fc7\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\uff0c\u5e76\u5728\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\u4e2d\u67e5\u627e\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\u3002\u9884\u5b9a\u4e49\u7684ZAP\u6a21\u5f0f\u4f7f\u7528\u5426\u5b9a\u6a21\u5f0f\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528-fcpp/zap_comments\u5ffd\u7565C++\u6ce8\u91ca\u4e2d\u7684\u6a21\u5f0f\u5339\u914d\u3002\nUgrep\u9009\u9879-f\u4f7f\u7528GREP_PATH\u73af\u5883\u53d8\u91cf\u6216\u5b89\u88c5\u5728/usr/local/share/ugrep/pattern\u4e2d\u7684\u9884\u5b9a\u4e49\u6a21\u5f0f\u3002\u5982\u679c\u6307\u5b9a\u4e86-f\uff0c\u5e76\u4e14\u8fd8\u6307\u5b9a\u4e86\u4e00\u4e2a\u6216\u591a\u4e2a-e\u6a21\u5f0f\uff0c\u5219\u9009\u9879-F\u3001-x\u548c-w\u4e0d\u9002\u7528\u4e8e-f\u6a21\u5f0f\u3002\u8fd9\u662f\u4e3a\u4e86\u907f\u514d\u5728\u5c06-f\u4e0e\u53ef\u80fd\u4e0d\u518d\u4e0e\u8fd9\u4e9b\u9009\u9879\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u7684\u9884\u5b9a\u4e49\u6a21\u5f0f\u4e00\u8d77\u4f7f\u7528\u65f6\u4ea7\u751f\u6df7\u6dc6\u3002\nUgrep\u9009\u9879-O\u3001-M\u548c-t\u5206\u522b\u6307\u5b9a\u6587\u4ef6\u6269\u5c55\u540d\u3001\u6587\u4ef6\u7b7e\u540d\u5e7b\u5b57\u8282\u6a21\u5f0f\u548c\u9884\u5b9a\u4e49\u7684\u6587\u4ef6\u7c7b\u578b\u3002\u8fd9\u5141\u8bb8\u5728\u76ee\u5f55\u6811\u4e2d\u641c\u7d22\u7279\u5b9a\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u4f8b\u5982\uff0c\u4f7f\u7528\u9012\u5f52\u641c\u7d22\u9009\u9879-R\u548c-r\u3002\u9009\u9879-O\u3001-M\u548c-t\u4e5f\u9002\u7528\u4e8ecpio\u3001jar\u3001pax\u3001tar\u548czip\u6587\u4ef6\u4e2d\u7684\u5f52\u6863\u6587\u4ef6\u3002\nUgrep\u9009\u9879-k\uff0c--column-number\u663e\u793a\u5217\u53f7\uff0c\u6309\u7167\u9009\u9879--tabs\u7684\u6307\u5b9a\uff0c\u901a\u8fc7\u5c55\u5f00\u5236\u8868\u7b26\u6765\u8003\u8651\u5236\u8868\u7b26\u95f4\u8ddd\u3002\nUgrep\u9009\u9879-P(Perl\u6b63\u5219\u8868\u8fbe\u5f0f)\u652f\u6301\u53cd\u5411\u5f15\u7528(\u5e26\u6709--format)\u548clookbehinds\uff0c\u540e\u8005\u4f7f\u7528PCRE2\u6216Boost.Regexlibrary\u4e0e\u7c7b\u4f3cPCRE\u7684\u8bed\u6cd5\u8fdb\u884c\u5feb\u901fPerl\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002\nUgrep\u9009\u9879-b\u4f7f\u7528\u9009\u9879-o\u6216\u4f7f\u7528\u9009\u9879-u\u65f6\uff0cugrep\u663e\u793a\u6a21\u5f0f\u5339\u914d\u7684\u786e\u5207\u5b57\u8282\u504f\u79fb\u91cf\uff0c\u800c\u4e0d\u662fGNU/BSD grep\u62a5\u544a\u7684\u5339\u914d\u884c\u5f00\u59cb\u7684\u5b57\u8282\u504f\u79fb\u91cf\u3002\nUgrep\u9009\u9879-u\uff0c--ungroup\u4ee5\u4e0d\u5bf9\u6bcf\u884c\u7684\u5339\u914d\u9879\u8fdb\u884c\u5206\u7ec4\u3002\u6b64\u9009\u9879\u4e3a\u8be5\u884c\u4e0a\u7684\u6bcf\u4e2a\u9644\u52a0\u6a21\u5f0f\u5339\u914d\u518d\u6b21\u663e\u793a\u5339\u914d\u7684\u8f93\u5165\u884c\u3002\u6b64\u9009\u9879\u4e0e\u9009\u9879-c\u4e00\u8d77\u62a5\u544a\u6bcf\u4e2a\u6587\u4ef6\u7684\u6a21\u5f0f\u5339\u914d\u603b\u6570\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u6587\u4ef6\u5339\u914d\u7684\u884c\u6570\uff0c\u8fd9\u4e00\u70b9\u7279\u522b\u6709\u7528\u3002\nUgrep\u9009\u9879-Y\u542f\u7528\u5339\u914d\u7a7a\u6a21\u5f0f\u3002\u4f7f\u7528\u7a7a\u5339\u914d\u6a21\u5f0f\u8fdb\u884cgrep\u5f88\u5947\u602a\uff0c\u5e76\u4e14\u4f7f\u7528GNU grep\u548c\u4f7f\u7528BSD grep\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cugrep\u4e0d\u8f93\u51fa\u7a7a\u5339\u914d\uff0c\u8fd9\u4f1a\u907f\u514d\u51fa\u9519\uff0c\u4ece\u800c\u53ef\u80fd\u4ea7\u751f\u968f\u673a\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u4f7f\u7528GNU/BSD grep\uff0c\u6a21\u5f0fa*\u5339\u914d\u8f93\u5165\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u5b9e\u9645\u4e0a\u5339\u914dxyz\u4e09\u6b21(x\u3001y\u548cz\u4e4b\u524d\u548c\u4e4b\u95f4\u7684\u7a7a\u8f6c\u6362)\u3002\u5141\u8bb8\u7a7a\u5339\u914d\u9700\u8981ugrep\u9009\u9879-Y\u3002\u901a\u8fc7\u9690\u5f0f\u542f\u7528-Y\uff0c\u5141\u8bb8\u4ee5^\u5f00\u5934\u3001\u4ee5$\u7ed3\u5c3e\u7684Patterns\u5339\u914d\u7a7a\uff0c\u4f8b\u5982^\\h*$\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cugrep\u9009\u9879-D\uff0c--device=action\u662f\u8df3\u8fc7\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6\u3002\u8fd9\u53ef\u4ee5\u9632\u6b62\u610f\u5916\u6302\u8d77\u9012\u5f52\u641c\u7d22\u7684\u76ee\u5f55\u4e2d\u7684\u547d\u540d\u7ba1\u9053\uff0c\u5c31\u50cf\u9ed8\u8ba4\u8bfb\u53d6\u8bbe\u5907\u7684GNU/BSD grep\u53ef\u80fd\u53d1\u751f\u7684\u90a3\u6837\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cugrep\u9009\u9879-d\uff0c--directory=action\u662f\u8df3\u8fc7\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5c06\u641c\u7d22\u547d\u4ee4\u884c\u4e0a\u6307\u5b9a\u7684\u76ee\u5f55\uff0c\u4f46\u4e0d\u4f1a\u9012\u5f52\u6df1\u5165\u5230\u5b50\u76ee\u5f55\u3002\nUgrep\u4e0d\u4f7f\u7528.greprc\u914d\u7f6e\u6587\u4ef6\u6216GREP_OPTIONS\u73af\u5883\u53d8\u91cf\uff0c\u56e0\u4e3augrep\u7684\u884c\u4e3a\u5fc5\u987b\u5728\u6bcf\u4e2a\u7cfb\u7edf\u4e0a\u90fd\u662f\u53ef\u79fb\u690d\u548c\u53ef\u9884\u6d4b\u7684\uff0c\u800c\u4e0d\u5fc5\u5c06\u914d\u7f6e\u6587\u4ef6\u590d\u5236\u5230\u6bcf\u4e2a\u7cfb\u7edf\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0cGNU grep\u4e5f\u653e\u5f03\u4e86GREP_OPTIONS\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u8bf7\u4f7f\u7528shell\u522b\u540d\u6765\u521b\u5efa\u5177\u6709\u7279\u5b9a\u641c\u7d22\u9009\u9879\u7684\u65b0\u547d\u4ee4\u3002\n\u8981\u4f7f\u7528\u4f4d\u4e8eworkingdirectory\u6216home\u76ee\u5f55\u4e2d\u7684\u914d\u7f6e\u6587\u4ef6.ugrep\u6267\u884c\u641c\u7d22(\u8bf7\u6ce8\u610f\uff0cug\u4e0eugrep--config\u76f8\u540c)\uff1a\n\u8981\u5c06.ugrep\u914d\u7f6e\u6587\u4ef6\u4fdd\u5b58\u5230\u5de5\u4f5c\u76ee\u5f55\uff0c\u7136\u540e\u7f16\u8f91\u4e3b\u76ee\u5f55\u4e2d\u7684\u6b64\u6587\u4ef6\u4ee5\u81ea\u5b9a\u4e49ug\u9ed8\u8ba4\u503c\u7684\u9996\u9009\u9879\uff1a\n\u8981\u641c\u7d22\u5de5\u4f5c\u76ee\u5f55\u5e76\u9012\u5f52\u6df1\u5165\u5730\u67e5\u627emain(\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u672a\u6307\u5b9a\u6587\u4ef6\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u542f\u7528-R Recurse\u7b26\u53f7\u94fe\u63a5)\uff1a\n\u540c\u6837\uff0c\u4f7f\u7528\u4ea4\u4e92\u5f0f\u67e5\u8be2UI\uff0c\u4ece\u521d\u59cb\u641c\u7d22\u6a21\u5f0fmain\u5f00\u59cb(\u8bf7\u6ce8\u610f\uff0c\u5e26\u6709\u521d\u59cb\u6a21\u5f0f\u7684-q\u9700\u8981\u9009\u9879-e\uff0c\u56e0\u4e3a\u901a\u5e38\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u6307\u5b9a\u5b57\u7b26\uff0c\u5e76\u4e14\u6240\u6709\u547d\u4ee4\u884c\u53c2\u6570\u90fd\u88ab\u89c6\u4e3a\u6587\u4ef6/\u76ee\u5f55)\uff1a\n\u8981\u5728C++\u6587\u4ef6\u4e2d\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u641c\u7d22#DEFINE(\u548c#DEFINE\u7b49)(\u8bf7\u6ce8\u610f\uff0c\u5e94\u8be5\u7528\u5f15\u53f7\u5c06\u6a21\u5f0f\u5f15\u8d77\u6765\uff0c\u4ee5\u9632\u6b62*\u548c\uff1f\u7684shell\u66ff\u6362)\uff1a\n\u8981\u5728\u76ee\u5f55myproject\u4e2d\u9012\u5f52\u641c\u7d22main\u4f5c\u4e3a\u5355\u8bcd(-w)\u800c\u4e0d\u8ddf\u968f\u7b26\u53f7\u94fe\u63a5(-r)\uff0c\u5e76\u5728\u5339\u914d\u7684\u884c\u65c1\u663e\u793a\u5339\u914d\u7684\u884c(-n)\u548c\u5217(-k)\u7f16\u53f7\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u76f8\u540c\uff0c\u4f46\u4ec5\u641c\u7d22myproject\uff0c\u4e0d\u8fdb\u884c\u66f4\u6df1\u5165\u7684\u9012\u5f52(\u8bf7\u6ce8\u610f\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u5728\u4e00\u4e2a\u7ea7\u522b\u641c\u7d22directory\u53c2\u6570)\uff1a\n\u76f8\u540c\uff0c\u4f46\u4e5f\u53ef\u4ee5\u5728\u5f52\u6863(\u4f8b\u5982zip\u548ctar\u6587\u4ef6)\u4e2d\u641c\u7d22\uff0c\u5e76\u4f7f\u7528-z\u538b\u7f29\u6587\u4ef6\uff1a\n\u9012\u5f52\u641c\u7d22Main\u7684\u5de5\u4f5c\u76ee\u5f55\uff0c\u540c\u65f6\u5ffd\u7565gitignoredfiles(\u4f8b\u5982\uff0c\u5047\u8bbe.gitignore\u4f4d\u4e8e\u5de5\u4f5c\u76ee\u5f55\u6216\u5176\u4e0b)\uff1a\n\u8981\u5217\u51fa.gitignore\u6587\u4ef6\u672a\u5ffd\u7565\u7684\u5de5\u4f5c\u76ee\u5f55\u548c\u66f4\u6df1\u5c42\u4e2d\u7684\u6240\u6709\u6587\u4ef6\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u8981\u663e\u793a\u6839\u636e-t\u53c2\u6570\u641c\u7d22\u7684\u6587\u4ef6\u6269\u5c55\u540d\u548c\u5e7b\u5b57\u8282(Shebangs)\u7684\u5217\u8868\uff0c\u8bf7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u8981\u6839\u636e\u6269\u5c55\u540d\u548c\u5e26-l\u7684Shebangs\u9012\u5f52\u5217\u51fa\u6240\u6709shell\u6587\u4ef6(\u8bf7\u6ce8\u610f\uff0c&#39\uff1b&#39\uff1b\u5339\u914d\u4efb\u4f55\u975e\u7a7a\u6587\u4ef6)\uff1a\n\u8981\u5728\u6e90\u4ee3\u7801\u4e2d\u641c\u7d22Main\uff0c\u540c\u65f6\u5ffd\u7565\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\u5757\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e26\u6709\u9009\u9879-N\u7684\u5426\u5b9a\u6a21\u5f0f\u8df3\u8fc7\u4e0d\u9700\u8981\u7684\u5339\u914d\u9879Inc/C++\u5f15\u53f7\u7684\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\u5757\uff1a\n\u8981\u6b63\u786e\u952e\u5165\u8fd9\u662f\u4e00\u9879\u5f88\u5927\u7684\u5de5\u4f5c\uff01\u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\uff0c\u5f53\u6211\u5728\u505a\u66f4\u91cd\u8981\u7684\u4e8b\u60c5\u65f6\uff0c\u6211\u4e0d\u60f3\u82b1\u65f6\u95f4\u6446\u5f04\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\u3002\u4f7f\u7528\u968fugrep\u5de5\u5177\u5b89\u88c5\u7684ugrep\u9884\u5b9a\u4e49\u6a21\u5f0f(-f)\u6709\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1a\n\u6b64\u67e5\u8be2\u8fd8\u641c\u7d22C/C++\u6e90\u4ee3\u7801\u4ee5\u5916\u7684\u5176\u4ed6\u6587\u4ef6\uff0c\u5982Readme\u3001Makefile\u7b49\u3002\u6211\u4eec\u8fd8\u8df3\u8fc7\u4e86\u5e26\u6709-r\u7684\u7b26\u53f7\u94fe\u63a5\u3002Solet\u901a\u8fc7\u4ec5\u4f7f\u7528\u9009\u9879-tc\u3001c++\u9009\u62e9C/C++\u6587\u4ef6\u5e76\u4f7f\u7528-R\uff1a\u5305\u62ec\u6307\u5411\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u7b26\u53f7\u94fe\u63a5\u6765\u4f18\u5316\u6b64\u67e5\u8be2\uff1a\n\u5982\u679c\u6211\u4eec\u53ea\u67e5\u627e\u6807\u8bc6\u7b26main\uff0c\u800c\u4e0d\u662f\u5c06\u5176\u4f5c\u4e3a\u51fd\u6570main(\uff1f)\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5426\u5b9a\u6a21\u5f0f\u8df3\u8fc7\u4e0d\u9700\u8981\u7684Main\\h*(\u6a21\u5f0f\u5339\u914d\uff1a\n\u8fd9\u4f7f\u7528-e\u548c-N\u9009\u9879\u5206\u522b\u663e\u5f0f\u6307\u5b9a\u6a21\u5f0f\u548c\u8d1f\u6a21\u5f0f\uff0c\u8fd9\u5b9e\u8d28\u4e0a\u5f62\u6210\u4e86\u6a21\u5f0fmain|(\uff1f^main\\h*\\()\uff0c\u5176\u4e2d\\h\u5339\u914d\u7a7a\u683c\u548c\u5236\u8868\u7b26\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5426\u5b9a\u6a21\u5f0f\u5bf9\u4e8e\u8fc7\u6ee4\u6389\u6211\u4eec\u4e0d\u611f\u5174\u8da3\u7684\u6a21\u5f0f\u5339\u914d\u5f88\u6709\u7528\u3002\n\u4f5c\u4e3a\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u5728C/C++\u6ce8\u91ca\u5757\u4e2d\u641c\u7d22\u5355\u8bcdFixme\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u9996\u5148\u4f7f\u7528ugrep&#39\uff1b\u9884\u5b9a\u4e49\u7684c/Comments\u6a21\u5f0f\u9009\u62e9\u6ce8\u91ca\u5757\uff0c\u7136\u540e\u4f7f\u7528apipe\u4f7f\u7528Fixme\u9009\u62e9\u884c\uff1a\n\u4f7f\u7528\u7ba1\u9053\u8fc7\u6ee4\u7ed3\u679c\u901a\u5e38\u6bd4\u4f7f\u7528\u67d0\u4e9b\u641c\u7d22\u5de5\u5177\u4f7f\u7528\u7684AND-OR\u903b\u8f91\u66f4\u5bb9\u6613\u3002\u8fd9\u79cd\u65b9\u6cd5\u9075\u5faaUnix\u7cbe\u795e\uff0c\u4f7f\u5b9e\u7528\u7a0b\u5e8f\u4fdd\u6301\u7b80\u5355\uff0c\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u4f7f\u7528\u6765\u5b8c\u6210\u66f4\u590d\u6742\u7684\u4efb\u52a1\u3002\n\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u751f\u6210Java source code\u4e2d\u627e\u5230\u7684\u6240\u6709\u6807\u8bc6\u7b26\u7684\u6392\u5e8f\u5217\u8868\uff0c\u540c\u65f6\u8df3\u8fc7\u5b57\u7b26\u4e32\u548c\u6ce8\u91ca\uff1a\n\u4f7f\u7528\u4f20\u7edf\u7684grep\u548cgrep\u3002\n.", "note_en": "Portable (Linux, Unix, MacOS, Windows, etc), includes x86 and x64 binaries for Windows in the  releases\n Ultra fast with new match algorithms, easily beating grep, ripgrep, silver searcher, hyperscan, sift, etc. see  performance benchmarks\n User-friendly with sensible defaults and customizable  configuration files used by the  ug command, which is the same as  ugrep --config to load the .ugrep configuration file with your preferences\n   Search the contents of  archives (cpio, jar, tar, pax, zip) and  compressed files (zip, gz, Z, bz, bz2, lzma, xz, lz4)\n ugrep --filter=&#39;pdf:pdftotext % -&#39; PATTERN ...ugrep --filter=&#39;odt,doc,docx,rtf,xls,xlsx,ppt,pptx:soffice --headless --cat %&#39; PATTERN ...ugrep --filter=&#39;pem:openssl x509 -text,cer,crt,der:openssl x509 -text -inform der&#39; PATTERN ...\n Search  binary files and display hexdumps with binary pattern matches (Unicode text or raw byte patterns)\n ugrep -W TEXTPATTERN ... ugrep -X TEXTPATTERN ...ugrep -W -U BYTEPATTERN ... ugrep -X -U BYTEPATTERN ...\n  Include files to search by  file types or file &#34;magic bytes&#34; or exclude them with  ^\n ugrep -t TYPE PATTERN ... ugrep -t ^TYPE PATTERN ...ugrep -M &#39;MAGIC&#39; PATTERN ... ugrep -M &#39;^MAGIC&#39; PATTERN ...\n Include files and directories to search that match  gitignore-style globs or exclude them with  ^\n ugrep -g &#39;FILEGLOB&#39; PATTERN ... ugrep -g &#39;^FILEGLOB&#39; PATTERN ...ugrep -g &#39;DIRGLOB/&#39; PATTERN ... ugrep -g &#39;^DIRGLOB/&#39; PATTERN ...ugrep -g &#39;PATH/FILEGLOB&#39; PATTERN ... ugrep -g &#39;^PATH/FILEGLOB&#39; PATTERN ...ugrep -g &#39;PATH/DIRGLOB/&#39; PATTERN ... ugrep -g &#39;^PATH/DIRGLOB/&#39; PATTERN ...\n    Includes  predefined regex patterns to search source code, javascript, XML, JSON, HTML, PHP, markdown, etc.\n ugrep PATTERN -f c++/zap_comments -f c++/zap_strings ...ugrep PATTERN -f php/zap_html ...ugrep -f js/functions ... | ugrep PATTERN ...\n ugrep --sort PATTERN ... ugrep --sort=size PATTERN ...ugrep --sort=changed PATTERN ... ugrep --sort=created PATTERN ...ugrep -Z --sort=best PATTERN ...\n ugrep --csv PATTERN ... ugrep --json PATTERN ...ugrep --xml PATTERN ... ugrep --format=&#39;file=%f line=%n match=%O%~&#39; PATTERN ...\n   Search for patterns that match multiple lines, i.e. patterns may contain one or more  \\n newlines\n         This installs the  ugrep and  ug commands, where  ug is the same as  ugrepbut also loads the configuration file .ugrep when present in the workingdirectory or home directory.\n   Copy  ugrep.exe to  ug.exe if you also want the  ug command, which loads the.ugrep configuration file when present in the working directory or homedirectory.\n Add  ugrep.exe and  ug.exe to your execution path: go to  Settings andsearch for &#34;Path&#34; in  Find a Setting. Select  environment variables -&gt; Path -&gt;  New and add the directory where you placed the  ugrep.exe and ug.exe executables.\n  when quoting patterns and arguments on the command line, do not use single &#39; quotes but use  &#34; instead; most Windows command utilities considerthe single  &#39; quotes part of the command-line argument!\n when specifying an empty pattern  &#34;&#34; to match all input, this may be ignoredby some Windows command interpreters such as Powershell, in that case useoption  --match instead\n       Option  -P (Perl regular expressions) requires either the PCRE2 library(preferred) or the Boost.Regex library. If PCRE2 is not installed,install PCRE2 with e.g.  sudo apt-get install -y libpcre2-dev or download PCRE2 and follow the installationinstructions. Alternatively, download Boost.Regex and run ./bootstrap.sh and  sudo ./b2 --with-regex install. See Boost: getting started.\n Option  -z (compressed files and archives search) requires the zlib library installed. It is installed on mostsystems. If not, install it, e.g. with  sudo apt-get install -y libz-dev.To search  .bz and  .bz2 files, install the bzip2 library, e.g. with sudo apt-get install -y libbz2-dev. To search  .lzma and  .xz files,install the  lzma library, e.g. with sudo apt-get install -y liblzma-dev. To search  .lz4 files, install the lz4 library, e.g. with sudo apt-get install -y liblz4-dev.\n   Some Linux systems may not be configured to load dynamic libraries from /usr/local/lib, causing a library load error when running  ugrep. Tocorrect this, add  export LD_LIBRARY_PATH=&#34;$LD_LIBRARY_PATH:/usr/local/lib&#34; toyour  ~/.bashrc file. Or run  sudo ldconfig /usr/local/lib.\n    This builds the  ugrep executable in the  ugrep/src directory with ./configure --enable-color and  make -j, verified with  make test. Whenall tests pass, the  ugrep executable is copied to  ugrep/bin/ugrep andthe symlink  ugrep/bin/ug -&gt; ugrep/bin/ugrep is added for the  ug command.\n Note that  ug is the same as  ugrep but also loads the configuration file.ugrep when present in the working directory or home directory. This meansthat you can define your default options for  ug in .ugrep.\n     After the build completes, copy  ugrep/bin/ugrep and  ugrep/bin/ug to aconvenient location, for example in your  ~/bin directory.\n   This also installs the pattern files with predefined patterns for option  -fat  /usr/local/share/ugrep/patterns/. Option  -f first checks the workingdirectory for the presence of pattern files, if not found checks environmentvariable  GREP_PATH to load the pattern files, and if not found reads theinstalled predefined pattern files.\n  Unfortunately, git clones do not preserve timestamps which means that you mayrun into &#34;WARNING: &#39;aclocal-1.15&#39; is missing on your system.&#34; or thatautoheader was not found when running  make.\n     Developers may want to use sanitizers to verify the  ugrep code when makingsignificant changes, for example to detect data races with the ThreadSanitizer:\n  We checked  ugrep with the clang AddressSanitizer, MemorySanitizer,ThreadSanitizer, and UndefinedBehaviorSanitizer. These options incursignificant runtime overhead and should not be used for the final build.\n    ugrep is multi-threaded and uses clever lock-free job queue stealing foroptimized load balancing. We also optimized regex matching with AVX2/512BW,SSE2, and ARM NEON/AArch64 instructions. Compressed files are decompressedconcurrently while searching them to furher improve performance. AsynchronousIO is implemented for efficient input and output.\n   multi-threaded recursive search of  #include &#34;...&#34; in the directory tree from the Qt 5.9.2 root, restricted to  .h,  .hpp, and  .cpp\n Note: T10 and T11 use  ugrep option  -Oh,hpp,cpp to restrict the search tofiles with extensions  .h,  .hpp, and  .cpp, which should be formulated withGNU/BSD/PCRGE grep as  --include=&#39;*.h&#39; --include=&#39;*.hpp&#39; --include=&#39;*.cpp&#39;,with silver searcher as  -G &#39;.*\\.(h|hpp|cpp)&#39; requiring  --search-binary tosearch compressed files (a bug), and with ripgrep as  --glob=&#39;*.h&#39; --glob=&#39;*.hpp&#39; --glob=&#39;*.cpp&#39;.\n   Performance tests were conducted with a Mac OS X using clang 9.0.0 -O2 on a 2.9GHz Intel Core i7, 16 GB 2133 MHz LPDDR3 Mac OS 10.12.6 machine. The besttimes for at least 30 runs is shown under minimal machine load.\n Results are shown in real time (wall clock time) seconds elapsed. Best timesare shown in  boldface and  n/a means that the running time exceeded 1minute or the selected options are not supported (e.g. option  -z).\n  Note:  silver searcher 2.2.0runs slower with multiple threads (T10 0.45s) than single-threaded (T11 0.32s),which was reported as an issue to the maintainers.\n Hyperscan simple grepreturns a few more matches than other greps due to its &#34;all matches reported&#34;pattern matching behavior. Option  -w was emulated using the pattern \\b(char|int|long|size_t|void)\\b. Option  -f was emulated as follows:\n  Note: output is sent to a  null utility to eliminate terminal displayoverhead. The  null utility source code:\n #include &lt;sys/types.h&gt;#include &lt;sys/uio.h&gt;#include &lt;unistd.h&gt;int main() { char buf[65536]; while (read(0, buf, 65536) &gt; 0) continue; }\n Note: performance results depend on warm/cold runs, compilers, libraries, theOS, the CPU type, and file system latencies. However, comparable competitiveresults were obtained on many other types of machines.\n    First, let&#39;s define the  :grep command in Vim to search files recursively. Todo so, add the following lines to your  .vimrc located in the root directory:\n  This specifies case insensitive searches with the Vim  :grep command. Forcase sensitive searches, remove  \\ -j from  grepprg. Multiple matches on thesame line are listed in the quickfix window separately. If this is notdesired, remove  \\ -u from  grepprg. With this change, only the first matchon a line is shown. Option  --ignore-files skips files specified in .gitignore files, when present. To limit the depth of recursive searches tothe current directory only, append  \\ -1 to  grepprg.\n You can now invoke the Vim  :grep command in Vim to search files on aspecified  PATH for  PATTERN matches:\n  If you omit  PATH, then the working directory is searched. Use  % as  PATHto search only the currently opened file in Vim:\n  The  :grep command shows the results in a quickfix windowthat allows you to quickly jump to the matches found.\n   Double-click on a line in this window (or select a line and press ENTER) tojump to the file and location in the file of the match. Enter commands  :cnand  :cp to jump to the next or previous match, respectively. To update thesearch results in the quickfix window, just grep them. For example, torecursively search C++ source code marked  FIXME in the working directory:\n    You can use  ugrep options with the  :grep command, for example toselect single- and multi-line comments in the current file:\n  Only the first line of a multi-line comment is shown in quickfix, to savespace. To show all lines of a multi-line match, remove  %-G from grepformat.\n     These options are optional and may be omitted:  -I skips binary files,option  --ignore-files skips files specified in  .gitignore files, whenpresent, and option  -3 restricts searching directories to three levels (theworking directory and up to two levels below).\n           grep = ugrep --sort -G -U -Y -. -Dread -dreadegrep = ugrep --sort -E -U -Y -. -Dread -dreadfgrep = ugrep --sort -F -U -Y -. -Dread -dreadzgrep = ugrep --sort -G -U -Y -z -. -Dread -dreadzegrep = ugrep --sort -E -U -Y -z -. -Dread -dreadzfgrep = ugrep --sort -F -U -Y -z -. -Dread -dread\n   When the  ugrep (or  ugrep.exe) executable is renamed to  grep ( grep.exe), egrep ( egrep.exe),  fgrep ( fgrep.exe) and so on, then a subset of theoptions shown above are automatically in effect except for  --sort,  -Dread, -dread, and  -U to permit Unicode matching. For example, when  ugrep isrenamed to  egrep, options  -E,  -Y, and  -. are automatically enabled.\n Note that the defaults of some grep options may differ to make  ugrep moreuser friendly, see  notable improvements over grep.\n     alias uq = &#39;ug -Q&#39; # short &amp; quick query UI (interactive, uses .ugrep config)alias ux = &#39;ug -UX&#39; # short &amp; quick binary pattern search (uses .ugrep config)alias uz = &#39;ug -z&#39; # short &amp; quick compressed files and archives search (uses .ugrep config)alias ugit = &#39;ug -R --ignore-files&#39; # works like git-grep &amp; define your preferences in .ugrep configalias grep = &#39;ugrep -G&#39; # search with basic regular expressions (BRE)alias egrep = &#39;ugrep -E&#39; # search with extended regular expressions (ERE)alias fgrep = &#39;ugrep -F&#39; # find string(s)alias pgrep = &#39;ugrep -P&#39; # search with Perl regular expressionsalias xgrep = &#39;ugrep -W&#39; # search (ERE) and output text or hex for binaryalias zgrep = &#39;ugrep -zG&#39; # search compressed files and archives with BREalias zegrep = &#39;ugrep -zE&#39; # search compressed files and archives with EREalias zfgrep = &#39;ugrep -zF&#39; # find string(s) in compressed files and/or archivesalias zpgrep = &#39;ugrep -zP&#39; # search compressed files and archives with Perl regular expressionsalias zxgrep = &#39;ugrep -zW&#39; # search (ERE) compressed files/archives and output text or hex for binaryalias xdump = &#39;ugrep -X &#34;&#34;&#39; # hexdump files without searching\n To search PDF and office documents automatically, add a filter option to thealiased  ugrep command:\n      ugrep regular expression patterns are more expressive than GNU grep andBSD grep POSIX ERE and support Unicode pattern matching and most of the PCREsyntax. Extended regular expression (ERE) syntax is the default (i.e.option  -E, as egrep, whereas  -G enables BRE).\n  ugrep produces hexdumps with  -W (output binary matches in hex with textmatches output as usual) and  -X (output all matches in hex).\n   ugrep searches pdf, doc, docx, xls, xlsx, epub, and more with  --filterusing third-party format conversion utilities as plugins.\n ugrep offers  negative patterns  -N PATTERN, which are patterns of theform  (?^X) to skip input that matches  X. Negative patterns can be usedto skip strings and comments when searching for identifiers in source codeand find matches that aren&#39;t in strings and comments. Predefined  zappatterns use nagative patterns, for example, use  -f cpp/zap_comments toignore pattern matches in C++ comments.\n ugrep option  -f uses  GREP_PATH environment variable or the predefinedpatterns installed in  /usr/local/share/ugrep/patterns. If  -f isspecified and also one or more  -e patterns are specified, then options -F,  -x, and  -w do not apply to  -f patterns. This is to avoidconfusion when  -f is used with predefined patterns that may no longer workproperly with these options.\n ugrep options  -O,  -M, and  -t specify file extensions, filesignature magic byte patterns, and predefined file types, respectively. Thisallows searching for certain types of files in directory trees, for examplewith recursive search options  -R and  -r. Options  -O,  -M, and  -talso applies to archived files in cpio, jar, pax, tar, and zip files.\n ugrep option  -k,  --column-number to display the column number, takingtab spacing into account by expanding tabs, as specified by option  --tabs.\n ugrep option  -P (Perl regular expressions) supports backreferences(with  --format) and lookbehinds, which uses the PCRE2 or Boost.Regexlibrary for fast Perl regex matching with a PCRE-like syntax.\n ugrep option  -b with option  -o or with option  -u,  ugrepdisplays the exact byte offset of the pattern match instead of the byteoffset of the start of the matched line reported by GNU/BSD grep.\n ugrep option  -u,  --ungroup to not group matches per line. Thisoption displays a matched input line again for each additional pattern matchon the line. This option is particularly useful with option  -c to reportthe total number of pattern matches per file instead of the number of linesmatched per file.\n ugrep option  -Y enables matching empty patterns. Grepping withempty-matching patterns is weird and gives different results with GNU grepversus BSD grep. Empty matches are not output by  ugrep by default, whichavoids making mistakes that may produce &#34;random&#34; results. For example, withGNU/BSD grep, pattern  a* matches every line in the input, and actuallymatches  xyz three times (the empty transitions before and between the  x, y, and  z). Allowing empty matches requires  ugrep option  -Y.Patterns that start with  ^ and end with  $ are permitted to match empty,e.g.  ^\\h*$, by implicitly enabling  -Y.\n ugrep option  -D, --devices=ACTION is  skip by default, instead of read. This prevents unexpectedly hanging on named pipes in directoriesthat are recursively searched, as may happen with GNU/BSD grep that  readdevices by default.\n ugrep option  -d, --directories=ACTION is  skip by default, instead of read. By default, directories specified on the command line are searched,but not recursively deeper into subdirectories.\n ugrep does not use a  .greprc configuration file or a  GREP_OPTIONSenvironment variable, because the behavior of  ugrep must be portable andpredictable on every system, without having to copy the configuration filesto each system. Also GNU grep abandoned  GREP_OPTIONS for this reason.Instead, please use shell aliases to create new commands with specific searchoptions.\n      To perform a search using a configuration file  .ugrep placed in the workingdirectory or home directory (note that  ug is the same as  ugrep --config):\n  To save a  .ugrep configuration file to the working directory, then edit thisfile in your home directory to customize your preferences for  ug defaults:\n  To search the working directory and recursively deeper for  main (note that -R recurse symlinks is enabled by default if no file arguments arespecified):\n    Same, using the interactive query UI, starting with the initial search pattern main (note that  -Q with an initial pattern requires option  -e becausepatterns are normally specified interactively and all command line argumentsare considered files/directories):\n  To search for  #define (and  # define etc) using a regex pattern in C++ files(note that patterns should be quoted to prevent shell globbing of  * and  ?):\n  To search for  main as a word ( -w) recursively without following symlinks( -r) in directory  myproject, showing the matching line ( -n) and column( -k) numbers next to the lines matched:\n  Same, but only search  myproject without recursing deeper (note that directoryarguments are searched at one level by default):\n      Same, but also search inside archives (e.g. zip and tar files) and compressedfiles with  -z:\n  Search recursively the working directory for  main while ignoring gitignoredfiles (e.g. assuming  .gitignore is in the working directory or below):\n  To list all files in the working directory and deeper that are not ignored by .gitignore file(s):\n  To display the list of file name extensions and &#34;magic bytes&#34; (shebangs)that are searched corresponding to  -t arguments:\n  To list all shell files recursively, based on extensions and shebangs with  -l(note that  &#39;&#39; matches any non-empty file):\n     To search for  main in source code while ignoring strings and comment blockswe can use  negative patterns with option  -N to skip unwanted matches inC/C++ quoted strings and comment blocks:\n  This is a lot of work to type in correctly! If you are like me, I don&#39;t wantto spend time fiddling with regex patterns when I am working on something moreimportant. There is an easier way by using  ugrep&#39;s predefined patterns( -f) that are installed with the  ugrep tool:\n  This query also searches through other files than C/C++ source code, likeREADMEs, Makefiles, and so on. We&#39;re also skipping symlinks with  -r. Solet&#39;s refine this query by selecting C/C++ files only using option  -tc,c++and include symlinks to files and directories with  -R:\n  What if we are only looking for the identifier  main but not as a function main(? We can use a negative pattern for this to skip unwanted  main\\h*(pattern matches:\n  This uses the  -e and  -N options to explicitly specify a pattern and anegative pattern, respectively, which is essentially forming the pattern main|(?^main\\h*\\(), where  \\h matches space and tab. In general, negativepatterns are useful to filter out pattern matches we are not interested in.\n As another example, we may want to search for the word  FIXME in C/C++ commentblocks. To do so we can first select the comment blocks with  ugrep&#39;spredefined  c/comments pattern AND THEN select lines with  FIXME using apipe:\n  Filtering results with pipes is generally easier than using AND-OR logic thatsome search tools use. This approach follows the Unix spirit to keep utilitiessimple and use them in combination for more complex tasks.\n Say we want to produce a sorted list of all identifiers found in Java sourcecode while skipping strings and comments:\n   With traditional grep and grep\n......", "posttime": "2020-08-10 14:34:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ea4\u4e92,faster", "title": "Ugrep\uff1a\u66f4\u5feb\u7684\u6a21\u7cca\u4ea4\u4e92grep", "title_en": "Ugrep: Faster Fuzzy Interactive Grep", "transed": 1, "url": "https://github.com/Genivia/ugrep", "via": "", "real_tags": ["\u4ea4\u4e92", "faster"]}, {"category": "", "categoryclass": "", "imagename": "f72df3181906741353cf101e4150001e.png", "infoid": 1017297, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u56db\u665a\u4e0a\uff0c\u4fc4\u7f57\u65af\u548c\u4f0a\u6717\u7684\u4eba\u4eec\u5f00\u59cb\u6536\u5230\u5947\u602a\u7684\u77ed\u4fe1\u3002\u8fd9\u4e9b\u77ed\u4fe1\u5411\u4eba\u4eec\u63d0\u4f9b1000\u4e07\u7f8e\u5143\uff0c\u4ee5\u83b7\u5f97\u4e0e\u5373\u5c06\u5230\u6765\u7684\u7f8e\u56fd\u5927\u9009\u76f8\u5173\u7684\u7f51\u7edc\u5a01\u80c1\u4fe1\u606f\u3002\u5b83\u6709\u4e00\u4e2a\u65b9\u4fbf\u7684\u94fe\u63a5\uff0c\u53d7\u8bbf\u8005\u53ef\u4ee5\u5728\u90a3\u91cc\u62a5\u544a\u63d0\u793a\u3002\u636e\u8def\u900f\u793e\u62a5\u9053\uff0c\u7f8e\u56fd\u56fd\u52a1\u9662\u5df2\u627f\u8ba4\u5bf9\u8fd9\u4e9b\u77ed\u4fe1\u8d1f\u8d23\u3002\n\u7f8e\u56fd\u56fd\u52a1\u9662\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u544a\u8bc9\u8def\u900f\u793e\uff0c\u8fd9\u4e9b\u4e3b\u52a8\u53d1\u6765\u7684\u77ed\u4fe1\u662f\u4e3a\u4e86\u63d0\u9ad8\u56fd\u9645\u610f\u8bc6\u3002\u201c\u8fd9\u662f\u4e00\u573a\u4f7f\u7528\u591a\u79cd\u8bed\u8a00\u7684\u4e16\u754c\u6027\u6d3b\u52a8\uff0c\u201dState\u544a\u8bc9\u8def\u900f\u793e\u3002\n\u8fd9\u4e9b\u4fe1\u606f\u662f\u7528\u6ce2\u65af\u8bed\u6216\u4fc4\u8bed\u5199\u7684\uff0c\u4e0a\u9762\u5199\u7740\uff0c\u201c\u7f8e\u56fd\u4e3a\u4efb\u4f55\u6709\u5173\u5916\u56fd\u5e72\u9884\u7f8e\u56fd\u9009\u4e3e\u7684\u4fe1\u606f\u652f\u4ed8\u9ad8\u8fbe1000\u4e07\u7f8e\u5143\u3002\u201d\u63d0\u4f9b\u7684\u94fe\u63a5\u8fde\u63a5\u5230\u7f8e\u56fd\u6b63\u4e49\u5956\u52b1\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u662f\u4e00\u4e2a\u7f51\u7ad9\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\u62a5\u544a\u6709\u5173\u901a\u7f09\u6050\u6016\u5206\u5b50\u548c\u5e72\u9884\u9009\u4e3e\u73b0\u91d1\u7684\u63d0\u793a\u3002\n\u56fd\u52a1\u9662\u4e8e8\u67085\u65e5\u5ba3\u5e03\u4e86\u8fd9\u4e00\u8ba1\u5212\uff0c\u5e76\u5728\u4e00\u5929\u540e\u5f00\u59cb\u53d1\u9001\u77ed\u4fe1\u3002\u4e00\u4efd\u65b0\u95fb\u7a3f\u8bf4\uff1a\u201c\u60ac\u8d4f\u63d0\u8bae\u5bfb\u6c42\u6709\u5173\u4efb\u4f55\u4eba\u7684\u8eab\u4efd\u6216\u5730\u70b9\u7684\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4eba\u5728\u5916\u56fd\u653f\u5e9c\u7684\u6307\u793a\u6216\u63a7\u5236\u4e0b\u884c\u4e8b\uff0c\u5e72\u6270\u7f8e\u56fd\u4efb\u4f55\u8054\u90a6\u3001\u5dde\u6216\u5730\u65b9\u9009\u4e3e\u3002\u201d\n\u5bf9\u4fc4\u7f57\u65af\u548c\u4f0a\u6717\u793e\u4ea4\u5a92\u4f53\u4e0a\u7684\u6587\u672c\u7684\u53cd\u5e94\u662f\u6279\u8bc4\u7684\u3002\u4fc4\u7f57\u65af\u5916\u4ea4\u90e8\u53d1\u8a00\u4eba\u739b\u4e3d\u4e9a\u00b7\u624e\u54c8\u7f57\u5a03(Maria Zakharova)\u5728Facebook\u4e0a\u8868\u793a\uff1a\u201c\u60f3\u8c61\u4e00\u4e0b\uff0c\u60c5\u51b5\u5c31\u662f\u8fd9\u6837\uff1a\u4fc4\u7f57\u65af\u5916\u4ea4\u90e8\u76f4\u63a5\u9762\u5411\u7f8e\u56fd\u516c\u6c11\uff0c\u5e76\u5ba3\u5e03\u6536\u96c6\u6709\u5173\u534e\u76db\u987f\u5e72\u9884\u4fc4\u7f57\u65af\u56fd\u5185\u653f\u7b56\u7684\u4fe1\u606f\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u7f51\u7ad9\uff0c\u201d\u4fc4\u7f57\u65af\u5916\u4ea4\u90e8\u53d1\u8a00\u4eba\u739b\u4e3d\u4e9a\u00b7\u624e\u54c8\u7f57\u5a03(Maria Zakharova)\u5728Facebook\u4e0a\u8868\u793a\u3002\n\u524d\u4e2d\u592e\u60c5\u62a5\u5c40\u5b98\u5458\u6770\u592b\u00b7\u963f\u820d\u4e5f\u6279\u8bc4\u4e86\u8fd9\u4e00\u6218\u7565\u3002\u201c\u8fd9\u7edd\u5bf9\u662f\u6700\u611a\u8822\u7684\u60f3\u6cd5\uff0c\u201d\u4ed6\u5728\u63a8\u7279\u4e0a\u8bf4\u3002\u201c\u8ba9\u6211\u4eec\u5047\u8bbe\u4f60\u771f\u7684\u5947\u8ff9\u822c\u5730\u63a5\u89e6\u5230\u4e86\u60f3\u8981\u5206\u4eab\u4fe1\u606f\u7684\u4eba\u3002\u73b0\u5728\uff0c\u4f60\u5df2\u7ecf\u7528\u516c\u5f00\u7684[\u7f8e\u56fd\u653f\u5e9c]\u8054\u7cfb\u4eba\u73b7\u6c61\u4e86\u4ed6\u4eec\uff0c\u800c\u4e14\u4f60\u5df2\u7ecf\u7ed5\u8fc7\u4e86\u53ef\u4ee5\u79d8\u5bc6\u5904\u7406\u4ed6\u4eec\u7684\u7ec4\u7ec7(\u4e2d\u60c5\u5c40)\u3002\u201c\u3002\n\u7b7e\u7f72\u201c\u8272\u60c5\u901a\u8baf\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81ea\u201c\u8272\u60c5\u901a\u8baf\u201d\u7684\u7535\u5b50\u901a\u8baf\uff0c\u5176\u4e2d\u6709\u65f6\u53ef\u80fd\u5305\u62ec\u5e7f\u544a\u6216\u8d5e\u52a9\u5185\u5bb9\u3002", "note_en": "On Thursday night, people in Russia and Iran started getting weird text messages. The texts offered people $10 million for information about cyber threats related to the upcoming U.S. election. It had a handy link where respondents could report tips. The U.S. State Department has admitted responsibility for the text messages,  according to Reuters.\n  The State Department told Reuters in an email that the unsolicited text messages were meant to build awareness internationally. \u201cThis is a worldwide campaign in multiple languages,\u201d  State told Reuters.\n   The messages are written in Farsi or Russian and say, \u201cthe United States pays up to $10 million for any information on foreign interference in American elections.\u201d The provided link routes to the  U.S. Rewards for Justice program, a website where people can report tips about wanted terrorists and election interference for cash.\n   The State Department announced the program on August 5 and started sending out text messages a day later. \u201cThe reward offer seeks information on the identification or location of any person who, while acting at the direction of or under the control of a foreign government, interferes with any U.S. federal, state, or local election,\u201d  a press release said.\n  Reaction to the texts on Russian and Iranian social media been critical. \u201cImagine, for a second, a mirror situation: the Russian Foreign Ministry directly addresses American citizens and announces collecting information about Washington&#39;s intervention in Russian domestic policy, offering a website,\u201d Russian Foreign Ministry spokeswoman Maria Zakharova  said on Facebook.\n  Former CIA officer Jeff Asher also criticized the strategy. \u201cThis is the absolute dumbest possible idea,\u201d  he said on Twitter. \u201cLet&#39;s say you actually by some miracle reach somebody with information who wants to share it. Now you&#39;ve tainted them with overt [United States Government] contact and you&#39;ve bypassed the org that can conceivably handle them covertly (CIA).\u201d\n  By signing up to the VICE newsletter you agree to receive electronic communications from VICE that may sometimes include advertisements or sponsored content.", "posttime": "2020-08-10 14:08:45", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u4fc4\u7f57\u65af,\u53d1\u9001,spamming", "title": "\u7f8e\u56fd\u653f\u5e9c\u5411\u968f\u673a\u9009\u62e9\u7684\u4f0a\u6717\u4eba\u548c\u4fc4\u7f57\u65af\u4eba\u53d1\u9001\u77ed\u4fe1", "title_en": "The US Government Is Spamming Random Iranians and Russians With Text Messages", "transed": 1, "url": "https://www.vice.com/en_us/article/4ayb9w/the-us-government-is-spamming-random-iranians-and-russians-with-text-messages", "via": "", "real_tags": ["\u7f8e\u56fd", "\u4fc4\u7f57\u65af", "\u53d1\u9001", "spamming"]}, {"category": "", "categoryclass": "", "imagename": "efd1367c3d2958038650c4534b76e74b.jpeg", "infoid": 1017295, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u901a\u8fc7\u4e3b\u52a8\u8c03\u6574\u673a\u7ffc\u7684\u4fef\u4ef0\u5b9e\u73b0\u5b89\u5168\u529f\u80fd\uff0c\u901a\u8fc7\u78c1\u76d8\u53d1\u751f\u5668\u5b9e\u73b0\u673a\u68b0\u5236\u52a8\u548c\u7535\u5b50\u5236\u52a8\u529f\u80fd\u3002\n\u6211\u5b9e\u9645\u4e0a\u5f00\u59cb\u8fd9\u4e2a\u9879\u76ee\u662f\u4f5c\u4e3aNerdiskerator\u7684\u540e\u7eed\u9879\u76ee(\u4fe1\u606f\u5728\u8fd9\u91cc\uff1ahttps://hackaday.io/project/172445-nerdiskerator-a-3d-printed-disk-generator).\u3002\u8fd9\u662f\u4e00\u4e2a\u78c1\u76d8\u751f\u6210\u5668\uff0c\u6211\u6700\u521d\u662f\u4f5c\u4e3a\u4e00\u79cd\u5b9e\u9a8c\u5efa\u9020\u7684\u3002\u5f53\u6211\u6210\u529f\u5730\u628a\u5b83\u9020\u597d\u540e\uff0c\u6211\u60f3\u4ec5\u4ec5\u662f\u628a\u5b83\u653e\u5728\u67b6\u5b50\u4e0a\u5c31\u592a\u53ef\u60dc\u4e86\u3002(\u6211\u559c\u6b22\u5efa\u9020\u6709\u5b9e\u9645\u7528\u9014\u7684\u4e1c\u897f\uff0c\u5373\u4f7f\u5b83\u4eec\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86\u3002)\u3002\u6240\u4ee5Nerdiskerator\u4e5f\u5e94\u8be5\u6709\u5b9e\u9645\u7528\u9014\uff0c\u751a\u81f3\u53ef\u4ee5\u7a0d\u5fae\u51cf\u8f7b\u6211\u7684\u7535\u8d39\u3002\uff1a)\u3002\n\u7531\u4e8e\u6211\u5728\u8fd9\u4e2a\u5730\u533a\u6ca1\u6709\u6d41\u6c34\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u6c34\u8f6e\u673a\u4e0d\u662f\u9a71\u52a8\u53d1\u7535\u673a\u7684\u9009\u62e9\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4f4f\u7684\u5730\u65b9\u6709\u98ce\u3002\u4e0d\u662f\u5f88\u591a\uff0c\u4f46\u80af\u5b9a\u8db3\u591f\u4ece\u5730\u7403\u6bcd\u4eb2\u90a3\u91cc\u83b7\u5f97\u4e00\u4e9b\u514d\u8d39\u7684\u74e6\u7279\u3002\n\u5728\u7814\u7a76\u53ef\u7528\u4e14\u6613\u4e8e\u590d\u5236\u7684\u98ce\u529b\u6da1\u8f6e\u673a\u8bbe\u8ba1\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u6709\u5f88\u591a\u5173\u4e8e\u81ea\u5df1\u5efa\u9020\u98ce\u529b\u53d1\u7535\u673a\u7684\u96f6\u6563\u4fe1\u606f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u4e2d\u7684\u8bb8\u591a\u90fd\u662f\u65e7\u7684\uff0c\u5728\u6211\u770b\u6765\u6ca1\u6709\u4e00\u4e2a\u662f\u5bb9\u6613\u590d\u5236\u7684\u3002\u4e0d\u77e5\u4f55\u6545\uff0c\u6211\u5e0c\u671b\u5916\u9762\u7684\u4eba\u5df2\u7ecf\u5f00\u53d1\u51fa\u4e86\u4e00\u79cd\u98ce\u529b\u6da1\u8f6e\u673a\u7684\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u75283D\u6253\u5370\u673a\u91cd\u5370\u3002\n\u6211\u627e\u5230\u4e86\u51e0\u4e2a\u8bbe\u8ba1\uff0c\u4f46\u5b83\u4eec\u8981\u4e48\u4e0d\u5408\u9002\uff0c\u8981\u4e48\u7531\u53ea\u80fd\u7528\u975e\u5e38\u5927\u76843D\u6253\u5370\u673a\u6253\u5370\u7684\u90e8\u4ef6\u7ec4\u6210\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u50cf\u6211\u60f3\u8c61\u7684\u90a3\u6837\uff0cHAWT\u98ce\u529b\u6da1\u8f6e\u673a\u76843D\u53ef\u6253\u5370\u8bbe\u8ba1\u3002\u6211\u5728\u5bfb\u627e\u4e00\u79cd\u5bb9\u6613\u6269\u5c55\u3001\u5bb9\u6613\u9002\u5e94\u7684\u4e1c\u897f\uff0c\u5f53\u7136\u5b83\u5e94\u8be5\u662f\u5b89\u5168\u7684\u3002\n\u7531\u4e8e\u6211\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u6211\u51b3\u5b9a\u5f00\u53d1\u4e00\u79cd\u81ea\u5df1\u8bbe\u8ba1\u7684\u6613\u4e8e\u590d\u5236\u7684\u98ce\u529b\u673a\u3002\uff1a)\u3002\nHAWT\u98ce\u529b\u6da1\u8f6e\u673a\u6548\u7387\u66f4\u9ad8\uff0c\u56e0\u4e3a\u6240\u6709\u53f6\u7247\u90fd\u540c\u65f6\u5728\u98ce\u4e2d\u5de5\u4f5c\u3002\u6b64\u5916\uff0c\u6ca1\u6709\u4e00\u4e2a\u673a\u7ffc\u80fd\u50cfVAWT\u8bbe\u8ba1\u7684\u98ce\u529b\u6da1\u8f6e\u673a\u90a3\u6837\u963b\u6b62\u98ce\u7684\u5f71\u54cd\u3002\n\u6211\u559c\u6b22\u8fd9\u91cc\u5fc5\u987b\u89e3\u51b3\u7684\u5404\u79cd\u6280\u672f\u95ee\u9898\u3002\u6b64\u5916\uff0c\u81f3\u5c11\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7528\u4e8e\u98ce\u529b\u6da1\u8f6e\u673a\u7684DIY HAWT\u8bbe\u8ba1\u5e76\u4e0d\u591a\u3002\n\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u4e70\u8fd9\u6837\u7684\u98ce\u529b\u6da1\u8f6e\u673a\u3002\u53ef\u80fd\u6bd4WinDIY\u66f4\u4fbf\u5b9c\uff0c\u529f\u80fd\u66f4\u5f3a\u5927\u3002\u90a3\u4e48\uff0c\u4e3a\u4ec0\u4e48\u8981\u5851\u9020\u81ea\u5df1\u5462\uff1f\n\u9996\u5148\uff1a\u6211\u8ba4\u4e3a\uff0c\u5c24\u5176\u662f\u9762\u5bf9\u6c14\u5019\u53d8\u5316\u3001\u4e0d\u65ad\u589e\u52a0\u7684\u80fd\u6e90\u6d88\u8017\u4ee5\u53ca\u603b\u4f53\u4e0a\u6280\u672f\u548c\u4eba\u7c7b\u65e5\u5e38\u751f\u6d3b\u65e5\u76ca\u76f8\u4e92\u4f9d\u8d56\u7684\u6311\u6218\uff0c\u91cd\u8981\u7684\u662f\u8981\u610f\u8bc6\u5230\u67d0\u4e9b\u4e1c\u897f\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff0c\u4ee5\u53ca\u6211\u4eec\u7684\u6280\u672f\u4e0d\u4ec5\u5982\u4f55\u5f71\u54cd\u6211\u4eec\u7684\u751f\u6d3b\uff0c\u800c\u4e14\u6211\u4eec\u6b63\u5728\u5982\u4f55\u5f71\u54cd\u6280\u672f\u3002\n\u6211\u8ba4\u4e3a\u91cd\u8981\u7684\u4e0d\u4ec5\u4ec5\u662f\u6d88\u8d39\u79d1\u6280\u3002\u6211\u4eec\u4e5f\u5e94\u8be5\u6709\u5174\u8da3\u548c\u597d\u5947\u5fc3\uff0c\u4e0d\u65ad\u8d28\u7591\u73b0\u6709\u7684\u6280\u672f\uff0c\u5bfb\u627e\u6539\u8fdb\u7684\u6f5c\u529b\u3002\u4f46\u8fd9\u53ea\u6709\u5728\u4f60\u4e86\u89e3\u73b0\u6709\u6280\u672f\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u594f\u6548\u3002\u5f53\u4f60\u8d2d\u4e70\u6280\u672f\u4ea7\u54c1\u65f6\uff0c\u4f60\u901a\u5e38\u53ea\u770b\u5230\u6700\u7ec8\u4ea7\u54c1\u3002\u4f60\u770b\u4e0d\u5230\u5728\u53bb\u90a3\u91cc\u7684\u8def\u4e0a\u89e3\u51b3\u4e86\u54ea\u4e9b\u6280\u672f\u95ee\u9898\u3002\u8bb8\u591a\u4e4d\u770b\u8d77\u6765\u5e76\u4e0d\u91cd\u8981\u7684\u6280\u672f\u7ec6\u8282\u4ecd\u7136\u5927\u591a\u9690\u85cf\u7740\u3002\u6211\u76f8\u4fe1\u81ea\u5df1\u5efa\u9020\u5b83\u662f\u7406\u89e3\u6280\u672f\u3001\u7269\u7406\u5173\u7cfb\u53ca\u5176\u6700\u4f73\u7528\u9014\u7684\u6700\u597d\u65b9\u5f0f\u3002\n\u5bf9\u6211\u4e2a\u4eba\u6765\u8bf4\uff0cWinDIY\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u5982\u679c\u6ca1\u6709WinDIY\uff0c\u6211\u53ef\u80fd\u4e0d\u4f1a\u6d89\u53ca\u98ce\u529b\u6da1\u8f6e\u673a\u7684\u57fa\u672c\u529f\u80fd\u3002\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u5c3d\u53ef\u80fd\u8f7b\u7684\u673a\u7ffc\u3002\u6211\u5f53\u7136\u4e0d\u4f1a\u8003\u8651\u5bf9\u53d1\u7535\u673a\u6750\u6599\u7684\u8981\u6c42\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u5728\u8d1f\u8f7d\u6216\u66f4\u9ad8\u7684\u6e29\u5ea6\u4e0b\u7194\u5316\u6210PLA\u7684\u4e00\u5927\u5757\u3002\n\u7b2c\u4e8c\uff1a\u7528WinDIY&34\uff1b\u6211\u60f3\u5411\u4f60\u5c55\u793a\u4e00\u4e0b3D\u6253\u5370\u673a\u548c\u4e00\u4e9b\u673a\u68b0\u6807\u51c6\u4ef6\u53ef\u4ee5\u505a\u4e9b\u4ec0\u4e48\u3002\n\u7279\u522b\u662f\u5728\u7535\u6655\u5927\u6d41\u884c\u671f\u95f4\uff0c\u5f88\u660e\u663e\uff0c\u6211\u4eec(\u5728\u53d1\u8fbe\u56fd\u5bb6)\u62e5\u6709\u4e00\u79cd\u7279\u6b8a\u7684\u5962\u4f88\u54c1\uff1a\u51e0\u4e4e\u65e0\u8bba\u6211\u4eec\u60f3\u8981\u4ec0\u4e48\u90e8\u4ef6\u3001\u8bbe\u5907\u6216\u4ea7\u54c1\u3002\u4e00\u65e6\u8ba2\u8d2d\uff0c\u5b83\u5c06\u5728\u51e0\u5929\u5185\u9001\u5230\u6211\u4eec\u7684\u90ae\u7bb1\u3002\n\u4eba\u4eec\u5f88\u5bb9\u6613\u5fd8\u8bb0\uff0c\u5e76\u4e0d\u662f\u6240\u6709\u5730\u65b9\u90fd\u6709\u8fd9\u79cd\u7c7b\u578b\u7684\u7269\u6d41\uff0c\u6211\u4eec\u4e5f\u4e0d\u5e94\u8be5\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\n\u5728\u7535\u6655\u5927\u6d41\u884c\u671f\u95f4\uff0c\u4f60\u5df2\u7ecf\u53ef\u4ee5\u770b\u52303D\u6253\u5370\u673a\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u975e\u5e38\u6709\u7528\u3002\u5f53\u4e2a\u4eba\u9632\u62a4\u88c5\u5907\u51e0\u4e4e\u65e0\u5904\u4e0d\u5728\u65f6\uff0c3D\u6253\u5370\u673a\u51e0\u4e4e\u5168\u5929\u5019\u8dd1\u8fdb\u6bcf\u4e00\u5bb6MakerLab\u5236\u9020\u9762\u7f69\u548c\u5176\u4ed6\u6709\u7528\u7684\u8bbe\u5907\u3002\n\u5f53\u7136\uff0cWinDIY&34\uff1b\u4e0d\u80fd\u9632\u5fa1\u75c5\u6bd2\u3002\u4f46\u5b83\u53ef\u4ee5\u4f20\u9012\u80fd\u91cf\uff0c\u4ece\u800c\u4f7f\u5149\u3001\u70ed\u6216\u901a\u4fe1\u6210\u4e3a\u53ef\u80fd\u3002\u8fd9\u4e9b\u53cd\u8fc7\u6765\u53c8\u662f\u62ef\u6551\u751f\u547d\u548c\u5b9e\u73b0\u751f\u5b58\u7684\u91cd\u8981\u57fa\u77f3\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u662f\u201c\u4ec0\u4e48\u662f\u53ef\u80fd\u7684\u201d\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\n\u6211\u60f3\u8ba9WinDIY\u4fdd\u6301\u6a21\u5757\u5316\u3002\u4e0d\u4ec5\u662f\u56e0\u4e3a\u5355\u4e2a\u90e8\u4ef6\u53ef\u4ee5\u5feb\u901f\u8f7b\u677e\u5730\u8fdb\u884c\u7ef4\u4fee\u6216\u66f4\u6362\u3002WinDIY\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u7f29\u653e(\u5f53\u7136\uff0c\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a)\u3002\n\u4f8b\u5982\uff0cWinDIY\u7684\u673a\u7ffc\u8bbe\u8ba1\u4f7f\u5f97\u5b83\u4eec\u7684\u7ffc\u5c55\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6539\u53d8\u3002\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u7a7a\u95f4\u6216\u4e0d\u9700\u8981\u90a3\u4e48\u591a\u7684\u80fd\u91cf\uff0c\u673a\u7ffc\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u6700\u521d\u8ba1\u5212\u768415\u6839\u623f\u6881\u4e2d\u768410\u52305\u6839\u7ec4\u88c5\u8d77\u6765\u3002\n\u5f53\u7136\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cWinDIY\u540a\u6746\u548c\u98ce\u5411\u6807\u4e5f\u5e94\u8be5\u5c0f\u4e00\u70b9\u3002\u8fd9\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fde\u63a5\u7684\u94dd\u578b\u6750\u88ab\u7b80\u5355\u5730\u5207\u5272\u5e76\u5b89\u88c5\u5f97\u7a0d\u5fae\u77ed\u4e00\u4e9b\u3002\n\u7c7b\u4f3c\u7684\u60c5\u51b5\u4e5f\u9002\u7528\u4e8e\u53d1\u7535\u673a\u3002\u6211\u76ee\u524d\u6b63\u5728\u7814\u7a76Nerdiskerator Mark1&34\uff1b(https://hackaday.io/project/172445-nerdiskerator-a-3d-printed-disk-generator))\uff0c\u5e76\u5c06\u4e0eWinDIY\u4e00\u8d77\u4f7f\u7528\u5b83\u6765\u53d1\u7535\u3002\u4f46\u662f\uff0c\u8fd9\u4ec5\u901a\u8fc7\u4e3b\u8f74\u673a\u68b0\u8fde\u63a5\u5230WinDIY\u3002\u5b83\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6362\u6210\u53e6\u4e00\u53f0\u529f\u7387\u66f4\u5927/\u529f\u7387\u66f4\u5c0f\u6216\u4e0d\u540c\u7684\u53d1\u7535\u673a\u3002\u5373\u4f7f\u662f\u52a0\u6cb9\u6cf5\u4e5f\u662f\u53ef\u80fd\u7684\u3002\n\u4f8b\u5982\uff0c\u6211\u4e5f\u53ef\u4ee5\u60f3\u8c61\uff0cWinDIY\u7684\u65cb\u8f6c\u8fd0\u52a8\u53ef\u4ee5\u901a\u8fc7\u9f7f\u8f6e\u4f20\u9012\u5230\u8815\u52a8\u6cf5\u4e0a\u3002\u8fd9\u610f\u5473\u7740\uff0c\u704c\u6e89\u7530\u5730\u7684\u4e95\u6cf5\u53ef\u4ee5\u7528\u76f8\u5bf9\u8f83\u5c11\u7684\u673a\u68b0\u90e8\u4ef6\u5b89\u88c5\uff0c\u5e76\u4e14\u5b8c\u5168\u4e0d\u9700\u8981\u7535\u5b50\u8bbe\u5907\u3002\n\u6211\u76f8\u4fe1\uff0c\u901a\u8fc7\u8fd9\u79cd\u6a21\u5757\u5316\u8bbe\u8ba1\uff0cWinDIY\u7684\u6bcf\u4e2a\u90e8\u5206\u90fd\u53ef\u4ee5\u9488\u5bf9\u73b0\u573a\u7684\u4e0d\u540c\u5e94\u7528\u8fdb\u884c\u4f18\u5316\u3002\u65e0\u8bba\u662f\u504f\u8fdc\u7684\u65e0\u7ebf\u7535\u4e2d\u7ee7\u7ad9\uff0c\u91ce\u5916\u7684\u5e10\u7bf7\uff0c\u8fd8\u662f\u8fdc\u79bb\u56fa\u5b9a\u7535\u529b\u6216\u4f9b\u6c34\u7684\u81ea\u5df1\u7684\u5bb6\u3002\n\u5982\u679c\u4f60\u60f3\u652f\u6301\u6211\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e2a\u9879\u76ee\u9875\u9762\u4e0a\u70b9\u8d5e\uff0c\u5728Instagram\u4e0a\u70b9\u8d5e\uff0c\u6216\u8005\u901a\u8fc7\u6350\u8d60\u4e00\u676f\u5496\u5561\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\uff1a)", "note_en": "Safety functions through active pitch adjustment of the wings, mechanical brake and electronic brake function via the disk generator\n                            I actually started this project as a follow-up project from the Nerdiskerator (infos here:  https://hackaday.io/project/172445-nerdiskerator-a-3d-printed-disk-generator). This is a disk generator that I initially built as a kind of experiment. When I had successfully built it up I thought &#34;Just putting it on the shelf is a shame&#34;. (I like to build things that have a practical use even after they have been set up.) So the Nerdiskerator should also get a practical use and maybe even relieve my electricity bill a bit. :)\n  Since I have no flowing water in the area, a water turbine is unfortunately not an option to drive the generator. Fortunately there is wind here where I live. Not much, but certainly enough to be able to harvest some free watts from Mother Earth here and there.\n  When researching for available and easy replicable wind turbine designs, I noticed that there is a lot of scattered information about building a wind generator yourself. Unfortunately, many of them were old and none of them seemed to me to be easy to replicate. I was hoping somehow that someone out there had already developed a design for a wind turbine that could easily be &#34;reprinted&#34; with a 3D printer.\n  I found a couple of designs, but either they weren&#39;t suitable or consisted of parts that could only be printed with very large 3D printers. Unfortunately, there was not a 3D printable design for a HAWT wind turbine as I imagined. I was looking for something easy scalable, easy adaptable and of course it should be safe.\n  Since I couldn&#39;t find something like this I decided to develop an own design of an easy replicable HAWT wind turbine. :)\n      HAWT wind turbines are more efficient because all blades work in the wind at the same time. In addition, none of the wings prevent the effect of the wind like it happens with a VAWT-design wind turbine.\n    I\u00a0like the various technical problems that have to be solved here. Additionally, at least until now there are not many DIY HAWT designs for wind turbines available.\n    Of course you could also buy such a wind turbine. Probably even cheaper and maybe more powerful than WinDIY. So why build yourself?\n  First: I think, especially in connection with the challenges of climate change, increasing energy consumption and in general the increasing interdependency of technology and everyday human life, it is important to become aware of how something works and how our technology not only affects our lives but also how we are influencing technology.\n  I think it is important not just to &#34;consume&#34; technology. We should also have interest and curiosity to constantly question the existing technology and look for potential for improvement. But this only works if you understand existing technologies. When you buy a technological product, you usually only see the end product. You cannot see which technological problems have been solved on the way there. Many technical details that seem unimportant at first glance remain mostly hidden. I believe &#34;building it yourself&#34; is the best way to understand technologies, physical relationships and their best use.\n  For me personally, WinDIY is a good example of this. Without WinDIY, I probably would not have dealt with the basic functions of a wind turbine. I would never have thought about how to design a wing as lightweight as possible. And I certainly would not have thought about the demands that must be made of the materials of a generator so that it does not melt into a chunk of PLA under load or higher temperatures.\n  Second: With &#34;WinDIY&#34; I would like to show you what can be built with a 3D printer and a few mechanical standard parts.\n  Especially during the corona pandemic it became obvious that we (in the &#34;developed&#34; countries) have a special luxury good: almost no matter what part, device or product we want. Once ordered, it will be in our mailbox within a few days.\n  It&#39;s easy to forget that this type of logistics is not available everywhere and also shouldn&#39;t be taken for granted by &#34;us&#34;.\n  During the corona pandemic, you could already see that 3D printers can be very helpful in these situations.\u00a0When personal protective equipment became rare almost everywhere, 3D printers ran in almost every makerLab 24/7 to manufacture face shields and other useful equipment.\n  Of course &#34;WinDIY&#34; cannot protect against viruses. But it can deliver energy, which then enables light, heat or communication. These in turn are important building blocks to save lives and enable survival. Above all, it is an example of &#34;what is possible&#34;.\n    I want to keep WinDIY modular. Not only because individual parts can be repaired or replaced quickly and easily. WinDIY can also be scaled in this way (to a certain extent, of course).\n  For example, the wings of WinDIY are designed the way that their wingspan can be varied easily. In case there is not enough space or there is not that much energy required, the wing can simply be assembled with just ten or five of the initially planned 15 rafters.\n  In this case, of course, the WinDIY boom and the wind vane should also be a bit smaller. This is not a problem, because in this case the connecting aluminum profiles are simply cut and installed a little shorter.\n  Something similar applies to the generator. I am currently working on the &#34;Nerdiskerator Mark1&#34; ( https://hackaday.io/project/172445-nerdiskerator-a-3d-printed-disk-generator) and will use it with WinDIY to generate energy. However, this is only mechanically linked to WinDIY via the main shaft. It could easily be exchanged for another more/less powerfull or different generator. Even a pump would be possible.\n  For example, I could also imagine,\u00a0that the rotary motion of WinDIY could be transferred to a peristaltic pump via a gear. This means that a well pump for irrigating a field can be set up with relatively few mechanical parts and completely without electronics.\n  I believe that with this modular design, every part of WinDIY can be optimized for the respective application on site. Regardless of whether it is a remote radio relay station, a tent in the wild or your own home far from a fixed electricity or water supply.\n                       If you want to support me, you can do so by like on this project page, on\u00a0 Instagram\u00a0or by donating a\u00a0 coffee. :)", "posttime": "2020-08-10 14:06:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hawt,\u6280\u672f", "title": "WinDIY-HAWT\u98ce\u529b\u673a", "title_en": "WinDIY \u2013 HAWT Wind Turbine", "transed": 1, "url": "https://hackaday.io/project/172328-windiy-hawt-wind-turbine/details", "via": "", "real_tags": ["hawt", "\u6280\u672f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1017293, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u6700\u8fd1\u7684\u4e00\u6b21\u5199\u4f5c\u4f11\u606f\u65f6\u95f4\uff0c\u6211\u601d\u8003\u4e86\u4e00\u7cfb\u5217\u4f3c\u4e4e\u603b\u662f\u51fa\u73b0\u5728\u8f6f\u4ef6\u53ef\u9760\u6027\u6216\u53ef\u7ef4\u62a4\u6027\u95ee\u9898\u4e0a\u7684\u4e8b\u60c5\u3002\u6839\u636e\u6211\u5bf9\u8fd9\u4e2a\u5e7c\u5e74\u6982\u5ff5\u7684\u53cd\u5e94\uff0c\u4ed6\u4eec\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u53ef\u80fd\u4e0d\u4f1a\u548c\u6211\u4ea4\u5f88\u591a\u670b\u53cb\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8ba4\u4e3a\u5b83\u8fd8\u9700\u8981\u63a2\u7d22\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u6211\u8ba4\u4e3a\u5bf9\u4e8e\u4f7f\u7528\u67d0\u4e9b\u7f16\u7a0b\u8bed\u8a00\u7684\u4eba\u6765\u8bf4\uff0c\u4f7f\u7528\u4e92\u8054\u7f51\u8fd9\u4e00\u5e7f\u9614\u7684\u5c0f\u4e11\u4e16\u754c\u4e2d\u7684\u5e93\u5df2\u7ecf\u53d8\u5f97\u592a\u5bb9\u6613\u4e86\u3002\u4ed6\u4eec\u7684\u751f\u6001\u7cfb\u7edf\u4f7f\u5f97\u4f9d\u8d56\u8fd9\u4e9b\u4e1c\u897f\u53d8\u5f97\u975e\u5e38\u975e\u5e38\u5bb9\u6613\u3002\u95ee\u9898\u662f\uff0c\u8fd9\u4e9b\u56fe\u4e66\u9986\u7ecf\u5e38\u662f\u72d7\u5c4e\u3002\u5982\u679c\u5b83\u7684\u67d0\u4e9b\u90e8\u5206\u635f\u574f\u4e86\uff0c\u60a8\u53ef\u80fd\u65e0\u6cd5\u5bf9\u5176\u8fdb\u884c\u7f16\u7801\uff0c\u5e76\u4e14\u53ef\u80fd\u5fc5\u987b\u5b9e\u9645\u5904\u7406\u5b83\u4eec\u624d\u80fd\u4fee\u590d\u5b83\u3002\n\u5176\u4e2d\u4e00\u4e9b\u6765\u81ea\u6700\u8fd1\u4e0e\u670b\u53cb\u7684\u4e00\u6b21\u804a\u5929\u3002\u4ed6\u4eec\u95ee\u6211\u4e3a\u4ec0\u4e48\u8ba4\u4e3a\u5176\u4ed6\u4eba\u559c\u6b22\u4e00\u79cd\u7279\u5b9a\u7684\u8bed\u8a00\u3002\u6211\u8bf4\u8fc7\uff0c\u5f88\u591a\u8bed\u8a00\u90fd\u6709\u5e9e\u5927\u7684\u5728\u7ebf\u56fe\u4e66\u9986\u85cf\u4e66\uff0c\u5b83\u4eec\u4f7f\u5f97\u5bfc\u5165\u5b83\u4eec\u53d8\u5f97\u975e\u5e38\u5bb9\u6613--\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f9d\u8d56\u5b83\u4eec\u3002\u6211\u73b0\u5728\u8c08\u8bba\u7684\u4e1c\u897f\u6bd4CPAN(\u5bf9\u4e8ePerl)\u8981\u5bb9\u6613\u5f97\u591a\u3002\u6211\u73b0\u5728\u8c08\u8bba\u7684\u662f\u56f4\u68cb\u3001\u94c1\u9508\u7b49\u8f83\u65b0\u7684\u4e1c\u897f\uff0c\u662f\u7684\uff0c\u8fd8\u6709node.js\u3002\u4eba\u4eec\u771f\u7684\u5f88\u559c\u6b22\u8fd9\u4e9b\u4e1c\u897f\uff01\u6211\u8865\u5145\u8bf4\uff0cPython\u5e76\u975e\u6613\u4e8b\uff0c\u4f46\u5728\u8fd9\u65b9\u9762\u6709\u4e00\u4e9b\u5de5\u5177\u53ef\u4ee5\u5e2e\u52a9\u4f60\u3002\n\u663e\u7136\uff0c\u8bed\u8a00\u7684\u9009\u62e9\u5728\u8fd9\u91cc\u5e76\u4e0d\u662f\u7279\u522b\u91cd\u8981\u3002\u4f60\u51e0\u4e4e\u53ef\u4ee5\u7528\u4efb\u4f55\u4e1c\u897f\u628a\u81ea\u5df1\u5e26\u5165\u8fd9\u79cd\u5883\u5730\u3002\u8fd9\u662f\u4e00\u79cd\u5fc3\u6001\u95ee\u9898\uff1a\u4f60\u613f\u610f\u628a\u8fd9\u4efd\u5de5\u4f5c\u5378\u7ed9\u56fe\u4e66\u9986\u5417\uff1f\n\u6240\u4ee5\u4ed6\u4eec\u95ee\uff0c\u53e6\u4e00\u79cd\u9009\u62e9\u53ef\u80fd\u662f\u4ec0\u4e48\u3002\u6211\u8bf4\uff0c\u55ef\uff0c\u9996\u5148\uff0c\u6ca1\u6709\u4e00\u5927\u5806\u53ef\u4ee5\u9a6c\u4e0a\u5bfc\u5165\u7684\u5e93\u53ef\u80fd\u662f\u4e00\u4e2a\u5f00\u59cb\u3002\u6709\u4e9b\u8bed\u8a00\u53ea\u5141\u8bb8\u4f60\u6307\u5411GitHub\u7684URL\u6216\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f(\u6709\u4e9b\u751a\u81f3\u66f4\u7b80\u5355)\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u4ed6\u4eec\u8bf4\uff0c\u8fd9\u5c06\u5bfc\u81f4\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u5b8c\u6210\u4eba\u4eec\u4f7f\u7528\u8fd9\u4e9b\u8bed\u8a00\u5b8c\u6210\u7684\u51e0\u4e4e\u4efb\u4f55\u4e8b\u60c5\u3002\u6211\u540c\u610f\u8fd9\u4e00\u70b9\uff0c\u8bf4\u4eba\u4eec\u4f1a\u53d1\u73b0\u4ed6\u4eec\u4e0d\u5f97\u4e0d\u5199\u66f4\u591a\u7684\u4e1c\u897f\u3002\n\u6211\u7684\u670b\u53cb\u5e76\u4e0d\u8ba4\u4e3a\u90a3\u542c\u8d77\u6765\u5f88\u6709\u8da3\u3002\u6211\u53cd\u9a73\u8bf4\uff0c\u5bf9\u6211\u6765\u8bf4\uff0c\u80fd\u591f\u8fdb\u53e3(\u4f9d\u8d56)\u4efb\u4f55\u7410\u788e\u7684\u4e1c\u897f\u7684\u60c5\u51b5\u542c\u8d77\u6765\u5e76\u4e0d\u6709\u8da3\u3002\u663e\u7136\uff0c\u6211\u4eec\u5728\u8fd9\u4ef6\u4e8b\u4e0a\u6ca1\u6709\u8fbe\u6210\u4e00\u81f4\u3002\u6211\u4eec\u8c08\u5230\u4e86\u4e00\u4e9b\u5173\u4e8e\u80f6\u6c34\u8bed\u8a00\u7684\u5e16\u5b50\uff0c\u5c31\u5728\u4e0d\u4e45\u524d\uff0c\u8fd9\u4e9b\u80f6\u6c34\u8bed\u8a00\u6210\u4e3a\u4e86\u5e38\u89c1\u7684HN\u56de\u5408\uff0c\u4ed6\u8ba4\u4e3a\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u90fd\u5c5e\u4e8e\u80f6\u6c34\u7c7b\u3002\u4ed6\u8ba4\u4e3a\uff0c\u5982\u679c\u6ca1\u6709\u89e3\u51b3\u95ee\u9898\u7684\u6d41\u884c\u548c\u5bb9\u6613\u5bfc\u5165\u7684\u5e93\uff0c\u8f6f\u4ef6\u4f1a\u66f4\u7cdf\u7cd5\u3002\n\u6211\u7684\u731c\u6d4b\u662f\uff0c\u4eba\u4eec\u8fdb\u5165\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u4f3c\u4e4e\u56fe\u4e66\u9986\u5c06\u662f\u4e00\u4e2a\u53ef\u9760\u7684100%\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u8ba9\u4f60\u5931\u671b\uff0c\u751a\u81f3\u53ef\u80fd\u8fbe\u523080%\u7684\u5173\u53e3\u3002\u6709\u7f3a\u5c11\u7684\u6700\u4f73\u5b9e\u8df5\u3001\u660e\u663e\u7684\u8bbe\u8ba1\u7f3a\u9677\u3001\u9519\u8bef\u3001\u5b89\u5168\u6f0f\u6d1e\u6216\u60a8\u80fd\u60f3\u8c61\u5230\u7684\u4efb\u4f55\u5176\u4ed6\u4e1c\u897f\u3002\u4f60\u4f38\u624b\u53bb\u62ff\u865a\u62df\u8d27\u67b6\u4e0a\u7684\u8f6f\u4ef6\uff0c\u5e0c\u671b\u5b83\u662f\u575a\u56fa\u7684\uff0c\u4f46\u5f80\u5f80\u5e76\u975e\u5982\u6b64\u3002(\u5982\u679c\u662f\u7684\u8bdd\uff0c\u6211\u5c31\u4e0d\u4f1a\u5728\u8fd9\u91cc\u62b1\u6028\u4e86\u3002)\u3002\n\u6211\u6709\u4e00\u4e2a\u6545\u4e8b\uff0c\u6709\u4e00\u6b21\uff0c\u6709\u4eba\u9009\u62e9\u5c3d\u53ef\u80fd\u591a\u5730\u5c06\u4ed6\u4eec\u7684\u5de5\u5177\u5378\u8f7d\u5230\u5916\u90e8\u5e93\u4e2d\uff0c\u8fd9\u7ed9\u4ed6\u4eec\u7684\u7528\u6237\u5e26\u6765\u4e86\u75db\u82e6\u3002\u5f53\u6211\u8bd5\u56fe\u4f7f\u7528\u4ed6\u4eec\u7684\u5de5\u5177\u65f6\uff0c\u5b83\u51fa\u73b0\u5728\u6211\u7684\u96f7\u8fbe\u4e0a\uff0c\u4f46\u9047\u5230\u4e86\u540c\u6837\u7684\u969c\u788d\u3002\n\u6709\u4e00\u4e2a\u5de5\u5177\uff0c\u4f60\u5fc5\u987b\u8fd0\u884c\u5b83\u624d\u80fd\u4e0e\u5e93\u4f2f\u5185\u65af\u7684\u4e1c\u897f\u4ea4\u8c08\u3002\u7531\u4e8e\u57fa\u7840\u8bbe\u65bd\u4e2d\u7684\u4e00\u4e9b\u53e4\u602a\u51b3\u7b56\uff0c\u60a8\u771f\u7684\u4e0d\u80fd\u81ea\u5df1\u8fd0\u884c\u5b9e\u9645\u7684\u539f\u751fCLI\u5de5\u5177\u3002\u4f60\u5fc5\u987b\u628a\u5b83\u653e\u8fdb\u8fd9\u4e2a\u5305\u88c5\u7eb8\u91cc\u3002\n\u6211\u6b63\u5728\u6784\u5efa\u4e00\u4e2a\u6982\u5ff5\u9a8c\u8bc1\u5de5\u5177\uff0c\u5b83\u5c06\u8fde\u63a5\u5230\u60a8\u7684\u51e0\u767e\u4e2a\u4f5c\u4e1a\u5b9e\u4f8b\uff0c\u5e76\u6709\u6548\u5730\u8ddf\u8e2a\u5b83\u4eec\u7684\u6807\u51c6\uff0c\u5e76\u5728\u60a8\u7684\u672c\u5730\u8ba1\u7b97\u673a\u4e0a\u4ee5\u4e00\u79cd\u6709\u7528\u7684\u65b9\u5f0f\u805a\u5408\u5b83\u4eec\u3002\u5b83\u7684\u76ee\u7684\u662f\u5411\u4eba\u4eec\u5c55\u793a\u65e5\u5fd7\u5904\u7406\u4e0d\u662f\u9b54\u672f\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e00\u4e9b\u76f8\u5bf9\u7b80\u5355\u7684\u5de5\u5177\u4e2d\u83b7\u5f97\u4ef7\u503c\uff0c\u4f46\u8fd9\u4e0d\u662f\u8fd9\u91cc\u7684\u6545\u4e8b\u3002\u8fd9\u4e2a\u6545\u4e8b\u662f\u6211\u4e0d\u5f97\u4e0d\u6253\u7ed9\u7684\u5305\u88c5\u7eb8\uff0c\u4ee5\u53ca\u5b83\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\n\u5728\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u65f6\uff0c\u6211\u8ba9\u4ed6\u4eec\u7684\u5305\u88c5\u5668\u5de5\u5177\u8fdb\u5165\u8fd9\u4e2a\u5931\u8d25\u6a21\u5f0f\uff0c\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5b83\u4f1a\u62b1\u6028\u4e00\u4e9b\u635f\u574f\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u5b83\u6700\u7ec8\u4f1a\u50cf\u8fd9\u6837\u9501\u5b58\uff0c\u7136\u540e\u6240\u6709\u8c03\u7528\u90fd\u4f1a\u5931\u8d25\u3002\u4f3c\u4e4e\u4ee5\u6211\u7684\u5927\u89c4\u6a21\u5e76\u884c\u65b9\u5f0f\u8fd0\u884c\u5b83\u4f7f\u5f97\u5b83\u66f4\u6709\u53ef\u80fd\u53d1\u751f\u3002\n\u6211\u81ea\u5df1\u505a\u4e86\u529f\u8bfe\uff0c\u5e76\u5728\u516c\u53f8\u804a\u5929\u548cbug\u7cfb\u7edf\u4e2d\u6316\u6398\u4e86\u5176\u4ed6\u5173\u4e8e\u8fd9\u79cd\u60c5\u51b5\u7684\u62a5\u544a\uff0c\u7ed3\u679c\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e0d\u592a\u6709\u5e0c\u671b\u7684\u4e8b\u60c5\uff1a\u8d1f\u8d23\u7684\u56e2\u961f\u544a\u8bc9\u53d7\u5f71\u54cd\u7684\u7528\u6237\u5220\u9664\u4ed6\u4eec\u4e3b\u76ee\u5f55\u4e2d\u7684\u4e00\u4e9b\u70b9\u6587\u4ef6\u3002\u8fd9\u5c31\u662f\u6240\u6709\u7684\u56de\u5e94\u3002\u4e0d\u592a\u597d\u3002\n\u6211\u4e5f\u53ef\u4ee5\u90a3\u6837\u505a\uff0c\u4f46\u95ee\u9898\u662f\uff0c\u8fd9\u79cd\u60c5\u51b5\u6700\u7ec8\u4f1a\u518d\u6b21\u53d1\u751f\u3002\u6211\u5e76\u884c\u8fd0\u884c\u7684\u5b9e\u4f8b\u8d8a\u591a\uff0c\u9501\u4f4f\u574f\u72b6\u6001\u7684\u901f\u5ea6\u5c31\u8d8a\u5feb\uff0c\u7136\u540e\u6211\u5c31\u4e0d\u5f97\u4e0d\u5173\u95ed\u6574\u4e2a\u7cfb\u7edf\uff0c\u4e22\u5f03\u6587\u4ef6\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u59cb\u3002\n\u6211\u5bf9\u6b64\u611f\u5230\u538c\u5026\uff0c\u4e8e\u662f\u51b3\u5b9a\u5f00\u52a8\u8111\u7b4b\u3002\u8fd9\u5c31\u662f\u8fd9\u4e2a\u6545\u4e8b\u56de\u523080%\u56fe\u4e66\u9986\u95ee\u9898\u7684\u5730\u65b9\u3002\n\u539f\u6765\u8fd9\u4e2a\u70b9\u6587\u4ef6\u88ab\u8fd9\u4e2a\u7a0b\u5e8f\u7528\u6765\u8bb0\u4f4f\u5b83\u6700\u540e\u4e00\u6b21\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u5b83\u6700\u540e\u4e00\u6b21\u5411\u4f60\u5927\u558a\u81ea\u5df1\u8001\u4e86\u7684\u65f6\u95f4\u3002\u56e2\u961f\u5df2\u7ecf\u51b3\u5b9a\uff0c\u60a8\u624b\u52a8\u653e\u5230Mac\u4e0a\u7684\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5728\u8db3\u591f\u65e7\u7684\u65f6\u5019\u9700\u8981\u5b9a\u671f\u8fdb\u884c\u6295\u8bc9\u3002\u4f46\u662f\uff0c\u7136\u540e\u4ed6\u4eec\u5c31\u8fd9\u4e48\u505a\u4e86\uff0c\u8fd9\u6837\u5b83\u5c31\u4e0d\u4f1a\u6bcf\u6b21\u90fd\u62b1\u6028\u4e86\u3002\u5b83\u6709\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u53ef\u80fd\u6bcf\u9694\u5341\u6b21\u5c31\u4f1a\u5927\u53eb\u4e00\u6b21\uff0c\u6216\u8005\u7c7b\u4f3c\u7684\u53eb\u58f0\u3002\n\u6240\u4ee5\uff0c\u5b83\u6709\u4e00\u4e2a\u8bb0\u5f55\u8fd9\u4e9b\u4e1c\u897f\u7684\u6587\u4ef6\u3002\u95ee\u9898\u662f\uff0c\u90a3\u4e2a\u6587\u4ef6\u88ab\u7834\u574f\u4e86\u3002\u5f53\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u5b83\u65e0\u6cd5\u5c06\u5176\u8bfb\u56de\uff0c\u7531\u4e8e\u8fd9\u88ab\u89c6\u4e3a\u81f4\u547d\u9519\u8bef\uff0c\u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u7ee7\u7eed\u3002\u6ca1\u6709--\u65e0\u89c6\u90a3\u8be5\u6b7b\u7684\u4e1c\u897f\u7684\u65d7\u5e1c\u8981\u7ee7\u7eed\u8d70\u4e0b\u53bb\u3002\n\u67e5\u770b\u8be5\u6587\u4ef6\u4f1a\u53d1\u73b0\u4e00\u4e9b\u5947\u602a\u7684\u4e1c\u897f\uff1a\u8be5\u6587\u4ef6\u770b\u8d77\u6765\u50cf\u662f\u6709\u4e00\u7ec4\u5b8c\u6574\u7684&#34\uff1bvar=value&34\uff1b\u884c\uff0c\u4f46\u968f\u540e\u5b83\u53c8\u6709\u4e86\u6587\u4ef6\u7684\u5c3e\u90e8\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u53ef\u80fd\u7c7b\u4f3c\u4e8e&#34\uff1b\u8fd9\u662f\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u3002G\u6587\u4ef6\u3002\u5b83\u51e0\u4e4e\u5c31\u50cf\u662f\u4e00\u4e2a\u8f83\u957f\u7684\u7248\u672c\u88ab\u5199\u5165\u6587\u4ef6\uff0c\u7136\u540e\u5728\u8be5\u6587\u4ef6\u4e4b\u4e0a\u5199\u5165\u4e00\u4e2a\u8f83\u77ed\u7684\u7248\u672c\uff0c\u4f46\u8be5\u6587\u4ef6\u968f\u540e\u5e76\u6ca1\u6709\u88ab\u622a\u65ad\u3002\u5f88\u5947\u602a\uff0c\u5bf9\u5427\uff1f\n\u5f53\u7136\uff0c\u4efb\u4f55\u6cbf\u7740\u8fd9\u6761\u8def\u8d70\u8fc7\u7684\u4eba\u73b0\u5728\u90fd\u4f1a\u5728\u5c4f\u5e55\u4e0a\u8df3\u6765\u8df3\u53bb\u5730\u5927\u558a\u5927\u53eb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528\u9501\u5b9a\uff01\u6216\u8005\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528\u4e34\u65f6\u6587\u4ef6\u5e76\u91cd\u65b0\u547d\u540d\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002\u662f\u7684\uff0c\u4ed6\u4eec\u662f\u5bf9\u7684\u3002\u8fd9\u4e1c\u897f\u5b8c\u5168\u6ca1\u6709\u505a\u8fd9\u4e24\u4ef6\u4e8b\u3002\n\u5f53\u60a8\u8fd0\u884c\u5b83\u65f6\uff0c\u5b83\u53ea\u662f\u6253\u5f00\u6587\u4ef6\u5e76\u8fdb\u884c\u5199\u5165\u3002\u5982\u679c\u4f60\u5e76\u884c\u8fd0\u884c\u5f88\u591a\u6b21\uff0c\u5b83\u4eec\u4f1a\u4e92\u76f8\u8df5\u8e0f\uff0c\u4e0d\u51fa\u6240\u6599\uff0c\u7ed3\u679c\u6709\u65f6\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65e0\u6cd5\u5b8c\u5168\u89e3\u6790\u7684\u914d\u7f6e\u6587\u4ef6\u3002\n\u5b83\u53ef\u4ee5\u5199\u5165mktemp()\u7c7b\u578b\u51fd\u6570\u7684\u7ed3\u679c\uff0c\u7136\u540e\u4f7f\u7528rename()\u81ea\u52a8\u5c06\u5176\u653e\u7f6e\u5230\u4f4d\u3002\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\n\u9884\u6599\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u6211\u62ff\u5230\u4e86\u4e00\u4efd\u4ed6\u4eec\u7684\u6e90\u7801\uff0c\u5e76\u53bb\u5bfb\u627e\u6ca1\u6709\u5199\u6587\u4ef6\u504f\u6267\u7684\u5185\u5bb9\u7684\u5730\u65b9\u3002\u6211\u627e\u4e0d\u5230\u5b83\u3002\u6211\u6240\u627e\u5230\u7684\u53ea\u662f\u5bf9\u8fd9\u4e2a\u6267\u884c\u914d\u7f6e\u6587\u4ef6\u8bfb\u5199\u7684\u5e93\u7684\u5f15\u7528\uff0c\u4ee5\u53ca\u5bf9\u5b83\u7684\u51e0\u6b21\u8c03\u7528\u3002\u5b9e\u9645\u6587\u4ef6I/O\u9690\u85cf\u5728Internet\u4e0a\u67d0\u4e2a\u5730\u65b9\u7684\u53e6\u4e00\u4e2a\u5e93\u4e2d\u3002\n\u679c\u7136\uff0c\u8be5\u4ee3\u7801\u65e0\u6cd5\u8fdb\u884c\u5408\u7406\u7684\u9501\u5b9a\u6216\u539f\u5b50\u5199\u5165\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u6ca1\u6709\u673a\u4f1a\u7ed9\u5b83\u4e00\u4e2a\u5408\u7406\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6216\u8005\u6b3a\u9a97\u5b83\u5199\u5165\u4e00\u4e2a\u5b89\u5168\u7684\u4e34\u65f6\u8def\u5f84\uff0c\u7136\u540e\u6211\u53ef\u4ee5\u5728\u516c\u53f8\u7684\u5305\u88c5\u5de5\u5177\u4e2d\u5c06\u5176\u91cd\u547d\u540d\u5230\u9002\u5f53\u7684\u4f4d\u7f6e\u3002\n\u4fee\u590d\u5b83\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728\u8fd9\u4e2a\u7b2c\u4e09\u65b9\u5e93\u4e2d\u3002\u8fd9\u5c06\u610f\u5473\u7740\u8981\u4e48\u4ece\u90a3\u91cc\u5206\u53c9\u5e76\u7ef4\u62a4\u5b83\uff0c\u8981\u4e48\u4e0e\u4e0a\u6e38\u5408\u4f5c\u5e76\u5e0c\u671b\u4ed6\u4eec\u8ba4\u771f\u5bf9\u5f85\u6211\u5e76\u63a5\u53d7\u5b83\u3002\n\u6211\u5df2\u7ecf\u8bf4\u8fc7\uff0c\u6211\u5728\u8fd9\u4e9b\u4e8b\u60c5\u4e0a\u6709\u8fc7\u4e0d\u6109\u5feb\u7684\u65f6\u5149\uff0c\u6240\u4ee5\u6211\u503e\u5411\u4e8e\u4e0d\u53c2\u4e0e\u8fd9\u6837\u7684\u9879\u76ee\u3002\n\u6211\u51b3\u5b9a\u6211\u5df2\u7ecf\u6309\u539f\u6837\u505a\u4e86\u5f88\u591a\uff0c\u4e0d\u6253\u7b97\u6e05\u7406\u4ed6\u4eec\u7684\u70c2\u644a\u5b50\u3002\u8fd9\u4e2a\u56e2\u961f\u9009\u62e9\u4f7f\u7528\u8fd9\u4e2a\u5e93\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u5f04\u6e05\u695a\u4ed6\u4eec\u5c06\u5982\u4f55\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u5c06\u4fee\u590d\u7a0b\u5e8f\u63a8\u5411\u4e0a\u6e38\uff0c\u6216\u8005\u8bf8\u5982\u6b64\u7c7b\u3002\n\u6211\u4e0e\u56e2\u961f\u4e00\u8d77\u6253\u5f00\u4e86\u4e00\u4efd\u516c\u53f8\u5185\u90e8\u9519\u8bef\u62a5\u544a\uff1a\u5de5\u5177X\u5728\u4e0e\u81ea\u8eab\u7684\u5176\u4ed6\u5b9e\u4f8b\u7ade\u4e89\u65f6\u4f1a\u635f\u574f\u6587\u4ef6Y\uff0c\u7136\u540e\u4e0d\u4f1a\u8fd0\u884c\u3002\u6211\u94fe\u63a5\u5230\u5176\u4ed6\u4eba\u9047\u5230\u5b83\u7684\u5730\u65b9\uff0c\u4ee5\u8868\u660e\u4e0d\u53ea\u662f\u6211\u5728\u505a\u4e00\u4e9b\u75c5\u6001\u7684\u4e8b\u60c5(\u4ee5\u514d\u4ed6\u4eec\u8bd5\u56fe\u8d2c\u4f4e\u6211\u7684\u62a5\u544a)\u3002\n\u4ed6\u4eec\u505a\u51fa\u4e86\u56de\u5e94\u3002\u4ed6\u4eec\u505a\u4e86\u4ec0\u4e48\uff1f\u4ed6\u4eec\u8ba9\u5b83\u6355\u6349\u5230\u70b9\u6587\u4ef6\u8bfb\u53d6\u5931\u8d25\u7684\u60c5\u51b5\uff0c\u5e76\u4f7f\u5b83\u4e0d\u4f1a\u7834\u574f\u6574\u4e2a\u7a0b\u5e8f\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4ed6\u4eec\u53ea\u662f\u7ee7\u7eed\u751f\u6d3b\uff0c\u5c31\u597d\u50cf\u5b83\u4e0d\u5728\u90a3\u91cc\u4e00\u6837\u3002\n\u8fd9\u91cc\u9519\u5931\u4e86\u592a\u591a\u673a\u4f1a\u3002\u5728\u4e0d\u540c\u7684\u73af\u5883\u4e2d\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u5411\u4eba\u4eec\u4f20\u6388\u9501\u3001\u539f\u5b50\u5199\u5165\u3001write()\u53ef\u4ee5\u5728\u6d88\u8017\u6574\u4e2a\u7f13\u51b2\u533a\u4e4b\u524d\u8fd4\u56de\u7684\u4e8b\u5b9e\uff0c\u4ee5\u53ca\u6240\u6709\u5176\u4ed6\u6709\u8da3\u7684Unixy\u77e5\u8bc6\u7684\u673a\u4f1a\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u4e00\u4e9b\u5408\u7406\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u8be5\u516c\u53f8\u7684\u6240\u6709\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002\n\u4f46\u662f\uff0c\u7531\u4e8e\u4ed6\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u8fd9\u4e00\u8d23\u4efb\uff0c\u4ed6\u4eec\u53d7\u5230\u4e86\u4e00\u4e9b\u9879\u76ee\u7684\u6446\u5e03\uff0c\u8fd9\u4e9b\u9879\u76ee\u6ca1\u6709\u7279\u522b\u7684\u7406\u7531\u53bb\u5173\u5fc3\u4ed6\u4eec\u3002\u6211\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\u4e3a\u4ec0\u4e48\u56e2\u961f\u9009\u62e9\u541e\u4e0b\u9519\u8bef\u6765\u5904\u7406\u6211\u7684\u62a5\u544a\uff0c\u800c\u4e0d\u662f\u5904\u7406\u4e0a\u6e38\u7684\u9519\u8bef\uff0c\u4f46\u8fd9\u5c31\u662f\u53d1\u751f\u7684\u4e8b\u60c5\u3002\n\u73b0\u5728\u5c06\u8fd9\u4e2a\u6a21\u5f0f\u91cd\u590d\u4e00\u767e\u4e07\u6b21\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u4eca\u5929\u7684\u4e16\u754c\u72b6\u51b5\uff1a\u4e00\u5806\u6c38\u8fdc\u4e0d\u4f1a\u6d88\u5931\u7684\u611a\u8822\u7684\u526a\u7eb8\u3002\n\u4eba\u4eec\u5bf9\u8fd9\u79cd\u60c5\u51b5\u7684\u53cd\u5e94\u65b9\u5f0f\u8fd8\u6709\u53e6\u4e00\u4e2a\u95ee\u9898\u3002\u6211\u628a\u4e0a\u9762\u7684\u6545\u4e8b\u544a\u8bc9\u4e86\u4e00\u4e2a\u4e86\u89e3\u6211\u7684\u804c\u4e1a\u751f\u6daf\u7684\u4eba\uff0c\u4ed6\u66fe\u5728\u67d0\u4e9b\u516c\u53f8\u5de5\u4f5c\u8fc7\uff0c\u62e5\u6709\u5f88\u591a\u771f\u6b63\u7684Linux\u673a\u5668\u3002\u4ed6\u4eec\u8bf4\u7684\u8bdd\u5b9e\u5728\u4ee4\u4eba\u6cae\u4e27\uff1a\n\u5982\u679c\u5c06\u8bb8\u591a\u975e\u5e73\u51e1\u7684\u5e93\u5e94\u7528\u4e8e\u89e3\u51b3Google\u89c4\u6a21\u7684\u95ee\u9898\uff0c\u5b83\u4eec\u5c06\u5305\u542b\u5404\u79cd\u95ee\u9898\u3002\n\u662f\u7684\uff0c\u90a3\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u6211\u4e3aG\u6216FB\u6216\u5176\u4ed6\u4ec0\u4e48\u516c\u53f8\u5de5\u4f5c\uff0c\u65e0\u8bba\u4f55\u65f6\u6211\u9047\u5230\u95ee\u9898\uff0c\u90fd\u662f\u56e0\u4e3a\u6211\u60f3\u8981\u505a\u89c4\u6a21\u592a\u5927\u7684\u4e8b\u60c5\uff0c\u662f\u56e0\u4e3a\u6211\u60f3\u8981\u505a\u4e00\u4e9b\u89c4\u6a21\u592a\u5927\u7684\u4e8b\u60c5\u5417\uff1f\u4f60\u5728\u800d\u6211\u5417\uff1f\u8d76\u5feb\u3002\n\u6211\u8bf4\uff0c\u4ed6\u4eec\u8bd5\u56fe\u968f\u610f\u5ffd\u7565\u6211\u8ba4\u4e3a\u662f\u684c\u4e0a\u8d4c\u6ce8\u7684\u90a3\u7c7b\u4e8b\u60c5\uff0c\u8fd9\u5c31\u662f\u6211\u7684\u95ee\u9898\u6240\u5728\u3002\u8fd9\u5728\u7b2c\u4e00\u6b21\u5e76\u6ca1\u6709\u5b8c\u5168\u843d\u5730\uff0c\u6240\u4ee5\u6211\u5c1d\u8bd5\u4e86\u53e6\u4e00\u79cd\u65b9\u6cd5\u3002\n\u6211\u9047\u5230\u4e86\u4e00\u4e2a\u95ee\u9898(\u563f\uff0c\u8fd9\u4e2a\u4e1c\u897f\u56e0\u4e3aX\u548cY\u7684\u539f\u56e0\u4e00\u76f4\u5728\u53d8\u574f)\uff0c\u7a81\u7136\u4e4b\u95f4\uff0c\u5b83\u662f\u56e0\u4e3a\u6211\u4eceG\u6216FB\u6216\u5176\u4ed6\u4ec0\u4e48\u5730\u65b9\u4e70\u7684\u4e1c\u897f\uff0c\u800c\u6211\u60f3\u4ece\u4ed6\u4eec\u7684\u4e1c\u897f\u91cc\u62ff\u5230\u4e0d\u5408\u7406\u7684\u4e1c\u897f(#34\uff1bM&34\uff1b34\uff1bI&34\uff1bI&34\uff1bm&34\uff1bto a#34\uff1bG&m&34\uff1b34\uff1bto I&#34\uff1bm&34\uff1bfrom&#34\uff1bG\u6216FB\u6216\u8bf8\u5982\u6b64\u7c7b\u7684\u4e1c\u897f)\u3002\u6240\u4ee5\uff0c\u6211\u7684\u8bf7\u6c42\u662f\u65e0\u6548\u7684\uff0c\u4e0d\u8fc7\u8fd8\u662f\u8c22\u8c22\u4f60\u5f00\u8f66\u3002\n\u8fd9\u5c31\u662f\u6211\u6240\u8bf4\u768480%\u3002\u6211\u4f4f\u5728\u53e6\u591620%\u7684\u5730\u65b9\uff0c\u56e0\u4e3a\u6211\u9700\u8981\u66f4\u591a\u7684\u4e1c\u897f\u6765\u5de5\u4f5c\u3002\u8fd9\u5e76\u4e0d\u7f55\u89c1\uff0c\u56e0\u4e3a\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u6211\u7684\u804a\u5929\u65e5\u5fd7\u548c\u9519\u8bef/\u7968\u8bc1\u641c\u7d22\u90fd\u53d1\u73b0\u4e86\u5176\u4ed6\u4eba\u62a5\u544a\u4e86\u540c\u6837\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u5b66\u5230\u7684\u667a\u6167\uff0c\u53ea\u8981\u5220\u9664\u8fd9\u4e2a\u70b9\u6587\u4ef6\u5c31\u884c\u4e86\u3002\n\u4f3c\u4e4e\u53ef\u4ee5\u5f52\u7ed3\u4e3a\uff1a\u4eba\u4eec\u4f9d\u8d56\u56fe\u4e66\u9986\u3002\u7ed3\u679c\u5927\u90e8\u5206\u90fd\u662f\u5e9f\u8bdd\u3002\u4f60\u4ecb\u7ecd\u7684\u8d8a\u591a\uff0c\u4f60\u5c31\u8d8a\u6709\u53ef\u80fd\u5f97\u5230\u4e00\u4e9b\u975e\u5e38\u7cdf\u7cd5\u7684\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u4f3c\u4e4e\u7406\u6027\u7684\u505a\u6cd5\u662f\u5bf9\u8fd9\u4e9b\u4e8b\u60c5\u975e\u5e38\u6311\u5254\uff0c\u5982\u679c\u6709\u7684\u8bdd\uff0c\u4e5f\u4e0d\u8981\u6293\u5f97\u592a\u591a\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u60a8\u5411\u540e\u5de5\u4f5c\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u6dfb\u52a0\u4e00\u4e9b\u968f\u673a\u5e93\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u610f\u5473\u7740\u66f4\u6709\u53ef\u80fd\u6709\u4eba\u4f1a\u8fd9\u6837\u505a\u3002\u628a\u5b83\u60f3\u8c61\u6210\u4e00\u4e2a\u5438\u5f15\u4eba\u7684\u9ebb\u70e6\u3002\u8fd9\u4f7f\u66f2\u67c4\u8f6c\u52a8\uff0c\u63a5\u4e0b\u6765\u60a8\u77e5\u9053\uff0c\u60a8\u5c06\u770b\u5230\u4ee4\u4eba\u53f9\u4e3a\u89c2\u6b62\u7684\u4f9d\u8d56\u6811-\u5145\u6ee1\u4e86\u611a\u8822\u7684\u5c0f\u7f3a\u70b9\uff0c\u5e76\u4e14\u7f3a\u4e4f\u6700\u4f73\u5b9e\u8df5\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u8fd9\u4e2a\u96be\u9898\u3002\u8fd9\u4e00\u4e2a\u5e93\u964d\u4f4e\u4e86\u4eba\u4eec\u7f16\u5199\u8be5\u5de5\u5177\u7684\u95e8\u69db\u3002\u662f\u771f\u7684\u3002\u4e0d\u80fd\u5426\u8ba4\u8fd9\u4e00\u70b9\u3002\n\u4f46\u662f\uff0c\u8fd9\u7ed9\u4e86\u4ed6\u4eec\u4e00\u79cd\u865a\u5047\u7684\u5b8c\u6210\u611f\u548c\u5b89\u5168\u611f\uff0c\u800c\u8fd9\u65e2\u4e0d\u662f\u5b8c\u6210\u7684\uff0c\u4e5f\u4e0d\u662f\u5b89\u5168\u7684\u3002\u5982\u679c\u4f7f\u7528\u8db3\u591f\u591a\uff0c\u8be5\u5de5\u5177\u6700\u7ec8\u5c06\u5931\u8d25\uff0c\u5e76\u4e14(\u81f3\u5c11\u5728\u4ed6\u4eec\u6dfb\u52a0\u5ffd\u7565\u5931\u8d25\u7684\u8bfb\u53d6\u5185\u5bb9\u4e4b\u524d)\uff0c\u4f1a\u5c06\u81ea\u8eab\u9501\u5b9a\u5230\u635f\u574f\u72b6\u6001\uff0c\u5e76\u4e14\u5728\u6ca1\u6709\u624b\u52a8\u5e72\u9884\u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u518d\u5de5\u4f5c\u3002\n\u95ee\u95ee\u81ea\u5df1\uff1a\u8fd9\u771f\u7684\u662f\u4e00\u4ef6\u597d\u4e8b\u5417\uff1f\u60a8\u5e0c\u671b\u4eba\u4eec\u80fd\u591f\u5728\u4e0d\u4e86\u89e3\u5177\u4f53\u60c5\u51b5\u7684\u60c5\u51b5\u4e0b\u53d1\u5e03\u8fd9\u6837\u7684\u4ee3\u7801\u5417\uff1f\u662f\u7684\uff0c\u6211\u4eec\u663e\u7136\u5fc5\u987b\u6307\u51fa\uff0c\u7cfb\u7edf\u4e0d\u5e94\u8be5\u5728\u5e95\u5c42\u53d8\u5f97\u5982\u6b64\u590d\u6742\uff0c\u4e0d\u5f97\u4e0d\u62c5\u5fc3\u539f\u5b50\u5199\u5165\u548c\u9501\u5b9a\u662f\u4ee4\u4eba\u607c\u706b\u7684\u5730\u72f1\uff0c\u4f46\u8fd9\u5c31\u662f\u5b58\u5728\u7684\u60c5\u51b5\u3002\u5982\u679c\u4f60\u6253\u7b97\u76f4\u63a5\u4f7f\u7528\u6587\u4ef6\u7cfb\u7edf\uff0c\u4f60\u5fc5\u987b\u89e3\u51b3\u5b83\u3002\u5b83\u662fPOSIX\u6587\u4ef6\u7cfb\u7edf\u4e16\u754c\u9644\u5e26\u7684\u5305\u88b1\u7684\u4e00\u90e8\u5206\u3002\n\u8fd9\u6574\u4ef6\u4e8b\u8fdb\u5165\u4e86\u66f4\u9ed1\u6697\u7684\u5730\u65b9\uff0c\u4f46\u6211\u60f3\u6211\u73b0\u5728\u5c31\u5230\u6b64\u4e3a\u6b62\u3002\u4e0d\u7528\u8bf4\uff0c\u672a\u6765\u6211\u8fd8\u6709\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u66f4\u5927\u4e3b\u9898\u7684\u6587\u7ae0\u8981\u5199\u3002", "note_en": "While on my most recent break from writing, I pondered a bunch of things that keep seeming to come up in issues of reliability or maintainability in software. At least one of them is probably not going to make me many friends based on the reactions I&#39;ve had to the concept in its larval form. Still, I think it needs to be explored.\n In short, I think it&#39;s become entirely too easy for people using certain programming languages to use libraries from the wide world of clowns that is the Internet. Their ecosystems make it very very easy to become reliant on this stuff. Trouble is, those libraries are frequently shit. If something about it is broken, you might not be able to code around it, and may have to actually deal with them to get it fixed.\n  Some of this came from a recent chat with a friend. They asked why I thought other people liked a particular language. I said that a bunch of languages have giant online collections of libraries, and they make it very easy to import them - that is, depend on them. I&#39;m talking about stuff that&#39;s WAY easier than things like CPAN (for Perl) ever did. I&#39;m talking about newer things like Go, Rust, and yeah, node.js too.People really dig this stuff! I added that Python isn&#39;t quite as easy but there are tools which try to help you out in this regard.\n Obviously, the choice of language isn&#39;t particularly important here. You can get yourself into this situation with just about anything. It&#39;s a mindset thing: are you willing to offload that job to a library?\n So they asked what the alternative might be. I said, well, first of all, not having a buttload of libraries that you could import at the drop of a hat might be a start. Some languages let you just point at a GitHub URL or whatever (some even simpler than that), and that&#39;s it. They said it would &#34;result in a lot more work to accomplish just about anything people use these languages for&#34;. I agreed with this, saying that people would find themselves having to write a lot more stuff.\n My friend didn&#39;t think that sounded fun. I countered that the situation of being able to import (depend on) anything trivially did not sound fun to me. Clearly, we did not agree on this matter. We got to talking about some post about &#34;glue languages&#34; that had made the usual HN rounds not too long ago, and he figured most programmers &#34;fall into the glue category&#34;. He thought software would be much worse if there weren&#39;t popular and easy to import libraries that solved problems.\n My guess was that people get into these situations where it seems like a library is going to be a solid &#34;100% solution&#34;, and yet it lets you down and maybe reaches the 80% mark. There are best practices missing, obvious design flaws, bugs, security holes, or whatever else you can imagine. You reach for software on the virtual shelf hoping it&#39;s solid, but frequently it is not. (If it was, I wouldn&#39;t be here complaining about it.)\n I have a story about a time when someone&#39;s choice to offload as much as possible to external libraries for their tool caused pain for their users. It came on my radar when I tried to use their tool and hit the same snag.\n There was this tool that you had to run to talk to Kubernetes stuff. Because of some wacky decisions in the infrastructure, you really couldn&#39;t run the actual native CLI tools yourself. You had to run it through this wrapper.\n I was building a proof-of-concept tool that would connect to a few hundred of your job&#39;s instances and would effectively &#34;tail -f&#34; their stderr and aggregate it in a useful fashion right there on your local machine. It was intended to show people that log handling isn&#39;t magic, and you can get value from some relatively simple tooling, but that&#39;s not the story here. The story is the wrapper I had to call, and what happened with it.\n While working on this, I got their wrapper tool into this failure mode where it would complain about some corrupted config file, and that would be it. It would &#34;latch&#34; like this eventually, and then all invocations would fail. It seemed like running it in my massively parallel manner made it that much more likely to happen.\n Doing my own homework and digging around on the company chat and bug systems for other reports of this happening turned up something not too promising: the responsible team told the affected user to delete some dotfile in their home directory. That was the whole response. Not good.\n I could do that too, but the problem is, it would eventually happen again. The more instances I ran in parallel, the faster it would latch in the bad state, and then I&#39;d have to shut the whole thing down, drop the file, and start over.\n I was getting tired of this, and decided to dig in. That&#39;s where this story comes back around to the &#34;80% library&#34; problem.\n It turned out the dotfile was used by this program to remember the last time it had run, and the last time it had yelled at you about being old. The team had decided that this binary you manually dropped onto your Mac periodically needed to complain when it was sufficiently old. But, then they made it so it wouldn&#39;t complain EVERY time. It kept a counter and would maybe yell every tenth time, or something like that.\n And so, it had a file that logged this stuff. Trouble is, that file was getting corrupted. When this happened, it failed to read it back in, and since that was treated as a fatal error, the program would not continue. There was no --ignore-that-damn-thing flag to keep going.\n Looking at that file showed something wacky: the file looked like it had a full set of &#34;var = value&#34; lines, but then it had the tail end of the file again.\n That is, it might look like &#34;This is a config file. g file.&#34; It&#39;s almost like a longer version was written to the file, and then a shorter version was written on top of that, but the file wasn&#39;t truncated afterward. Weird, right?\n Of course, anyone who&#39;s been down this road is hopping up and down yelling at their screen right now going &#34;THEY DIDN&#39;T USE LOCKING!&#34; or &#34;THEY DIDN&#39;T USE A TEMP FILE AND RENAME&#34; or something like it. And yeah, they&#39;re right. This thing totally did neither of those things.\n When you ran it, it just opened the file and did a write. If you ran it a bunch of times in parallel, they&#39;d all stomp all over each other, and unsurprisingly, the results sometimes yielded a config file that was not entirely parseable.\n  It could have written to the result from a mktemp() type function and then used rename() to atomically drop it into place. It didn&#39;t.\n Expecting that, I got a copy of their source and went looking for the spot which was missing the file-writing paranoia stuff. I couldn&#39;t find it. All I found was some reference to this library that did config file reading and writing, and a couple of calls into it. The actual file I/O was hidden away in that other library which lived somewhere on the Internet.\n Sure enough, that code had no way to do sensible locking or atomic writes. Worse still, there was no chance of handing it a &#34;sane&#34; file descriptor, or tricking it into writing to a safe temp path that I could then rename into place in the company&#39;s wrapper tool.\n The only way to fix it would be in this third-party library. That would mean either forking it and maintaining it from there, or working with the upstream and hoping they&#39;d take me seriously and accept it.\n I&#39;ve already  statedthat I&#39;ve had bad times with this stuff, and so I tend to not engage with such projects.\n I decided I had already done plenty as it was, and wasn&#39;t going to clean up their mess. This team chose to use this library, so they can figure out how they&#39;re going to deal with the problem and get the fix pushed upstream, or whatever.\n I opened an internal company bug report with the team: tool X corrupts file Y when it races with other instances of itself, and then won&#39;t run. I linked to places where other people had run into it to show that it wasn&#39;t just me doing something pathological (lest they try to discount my report).\n  They responded. What did they do? They made it catch the situation where the dotfile read failed, and made it not blow up the whole program. Instead, they just carried on as if it wasn&#39;t there.\n There are just so many missed opportunities here. In a different environment, it would be an opportunity to teach people about locking, atomic writes, the fact that write() can return before consuming the whole buffer, and all of those other fun Unixy things you learn the hard way. Then we could have written something that did sensible writes and used it across *ALL* of the code at that company.\n But, since they had abdicated that responsibility, they were at the mercy of some project that had no particular reason to care about them. I will never know why the team chose to handle my report by swallowing the error instead of dealing with upstream, but that&#39;s what happened.\n Now repeat this pattern a million times, and you have the state of the world today: a bunch of dumb paper cuts that never really go away.\n There&#39;s another problem with the way people respond to situations like this. I told the above story to someone who knew my career history of working at certain companies with Lots of Actual Linux Boxes. What they said was really disheartening:\n Many non-trivial libraries would contain all sorts of issues if they were applied against Google-scale problems.\n Yeah, that&#39;s right, because I worked for G or FB or whatever, somehow any time I have a problem with something, it&#39;s because I&#39;m trying to do something at too big of a scale? Are you shitting me? COME ON.\n I said that they were trying to casually dismiss the sort of things that I consider table stakes, and that right there is my problem with the situation. This didn&#39;t quite land the first time, so I tried another approach.\n I show up with a problem (&#34;hey, this thing keeps getting corrupted because X and Y&#34;) and suddenly it&#39;s because I&#39;m &#34;from&#34; G or FB or something and I &#34;want unreasonable things&#34; from their stuff. So, my request is invalid, thank you drive though.\n That is what I mean by 80%. I live in that other 20% because I need things to work more than that. It&#39;s not even that unusual, because, remember, my chat log and bug/ticket searches had turned up other people reporting this same problem. That&#39;s how I learned the &#34;wisdom&#34; of &#34;just delete the dotfile&#34;.\n It seems to boil down to this: people rely on libraries. They turn out to be mostly crap. The more you introduce, the more likely it is that you will get something really bad in there. So, it seems like the rational approach would be to be very selective about these things, and not grab too many, if at all.\n But, if you work backwards, you can see that making it very easy to add some random library means that it&#39;s much more likely that someone will. Think of it as an &#34;attractive nuisance&#34;. That turns the crank and the next thing you know, you have breathtaking dependency trees chock-full of dumb little foibles and lacking best practices.\n Now we have this conundrum. That one library lowered the barrier to entry for someone to write that tool. True. Can&#39;t deny that.\n  But, it gave them a false sense of completion and safety, when it is neither done nor safe. The tool will fail eventually given enough use, and (at least until they added the &#34;ignore the failed read&#34; thing), will latch itself into a broken state and won&#39;t ever work again without manual intervention.\n Ask yourself: is that really a good thing? Do you WANT people being able to ship code like that without understanding the finer points of what&#39;s going on? Yeah, we obviously have to make the point that the systems should not be so damned complicated underneath, and having to worry about atomic writes and locking is annoying as hell, but it&#39;s what exists. If you&#39;re going to use the filesystem directly, you HAVE to solve for it. It&#39;s part of the baggage which comes with the world of POSIX-ish filesystems.\n This whole thing goes into even darker places, but I think I&#39;ll stop there for now. Needless to say, I have more to write on this larger topic in the future.", "posttime": "2020-08-10 13:38:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fe\u4e66\u9986,potholes", "title": "\u5728\u592a\u591a\u56fe\u4e66\u9986\u7684\u5751\u5751\u6d3c\u6d3c\u4e2d\u7eca\u5012", "title_en": "Tripping over the potholes in too many libraries", "transed": 1, "url": "http://rachelbythebay.com/w/2020/08/09/lib/", "via": "", "real_tags": ["\u56fe\u4e66\u9986", "potholes"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1017292, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u670b\u53cbJuan Paucar\u5411\u6211\u4ecb\u7ecd\u4e86\u7b2c28\u5c4a\u6b27\u6d32\u7f16\u7a0b\u7814\u8ba8\u4f1a(ESOP 2019)\u4e2d\u4e0eCodata\u76f8\u5173\u7684\u4e00\u7bc7\u8bba\u6587\u3002\u6211\u5bf9codata\u975e\u5e38\u611f\u5174\u8da3\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u4ee5\u4e00\u79cd\u8303\u7574\u8bba\u7684\u65b9\u5f0f\u4e0e\u6570\u636e\u76f8\u5173\uff0c\u4f46\u662f\uff0c\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u5e76\u4e0d\u7406\u89e3\u5176\u4e2d\u7684\u8bb8\u591a\u5355\u8bcd\u3002\u8fd9\u7bc7\u8bba\u6587\u5e2e\u52a9\u6211\u7406\u89e3\u4e86\u5f88\u591a\uff0c\u4e5f\u5e2e\u52a9\u6211\u7406\u89e3\u548c\u5851\u9020\u4e86\u5982\u4f55\u8fde\u63a5FP\u548cOOP\u4e16\u754c\u7684\u60f3\u6cd5\u3002\u4f46\u662f\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5bf9\u4e00\u4e9b\u7406\u8bba\u8fdb\u884c\u5de1\u56de\u6f14\u51fa\u3002\n\u6570\u636e\uff0c\u66f4\u597d\u5730\u7406\u89e3\u4e3aHaskell\u7684\u6570\u636e\u58f0\u660e\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e00\u79cd\u7c7b\u578b\u548c\u4e00\u7cfb\u5217\u521b\u5efa\u8be5\u7c7b\u578b\u7684\u503c\u7684\u65b9\u6cd5(\u51fd\u6570)\u3002\u6211\u5c06\u4f7f\u7528GADT\u8bed\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f7f\u51fd\u6570\u53ef\u89c1\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a\nData Foo WHERE Foo1\uff1a\uff1aint-&gt\uff1bString-&gt\uff1bFoo2\uff1a\uff1aBool-&gt\uff1bFoo\u3002\n\u4f46\u662f\u4f7f\u7528GADT\u8bed\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u51fd\u6570\u3002Foo1\u662f\u4e00\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\u3002Foo1\u63a5\u6536\u4e00\u4e2aInt\u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u6784\u9020\u4e00\u4e2afoo\u7c7b\u578b\u7684\u503c\u3002Foo2\u4e5f\u53d1\u751f\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u60c5\u51b5\u3002\n\u6211\u4eec\u521a\u624d\u8c08\u5230\u4e86\u6784\u9020\u51fd\u6570\uff1a\u6784\u9020\u51fd\u6570\u53ea\u4e0d\u8fc7\u662f\u4e00\u4e2a\u4ece\u5176\u4ed6\u503c\u4ea7\u751f\u503c\u7684\u51fd\u6570\u3002\u4f46\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5c06\u6bcf\u4e2a\u51fd\u6570\u5b9a\u4e49\u4e3a\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u5e76\u6ca1\u6709\u4ec0\u4e48\u5e2e\u52a9\u3002\u6211\u4eec\u5c06\u66f4\u8fdb\u4e00\u6b65\uff1a\u6784\u9020\u51fd\u6570\u662f\u751f\u6210T\u7c7b\u578b\u7684\u503c\u7684\u539f\u8bed\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u7531\u751f\u6210T\u7c7b\u578b\u7684\u503c\u7684\u5176\u4ed6\u51fd\u6570\u6784\u5efa\u7684\u3002\u6b64\u5916\uff0c\u6784\u9020\u51fd\u6570\u662f\u60a8\u5728\u7f16\u5199\u6570\u636e\u58f0\u660e\u65f6\u5b9a\u4e49\u7684\u51fd\u6570\u3002\n\u5982\u679c\u6709\u6784\u9020\u51fd\u6570\uff0c\u5c31\u5e94\u8be5\u6709\u62c6\u5206\u6570\u636e\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u6570\u636e\u4f3c\u4e4e\u662f\u901a\u8fc7\u805a\u5408\u503c\u6765\u6784\u9020\u7684\u3002\u8fd9\u79cd\u89e3\u6784\u6570\u636e\u7684\u4e1c\u897f\u53eb\u505a\u6d88\u9664\u5668\u3002Haskell\u4e2d\u7684\u901a\u7528\u6d88\u9664\u7b26\u662fcase\u8bed\u53e5\uff1a\nCase\u8bed\u53e5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570(\u653e\u5728case\u548cof\u4e4b\u95f4\u7684\u53c2\u6570)\u5e76\u8fd4\u56de\u67d0\u79cd\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48Case\u8bed\u53e5\u4e2d\u7684\u6240\u6709\u5206\u652f\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u56e0\u4e3a\u5f53\u60a8\u7f16\u5199Case\u8bed\u53e5\u65f6\uff0c\u60a8\u7f16\u5199\u7684\u662fMyCase\uff1a\uff1aFoo-&gt\uff1bX\u8fd9\u6837\u7684\u51fd\u6570\uff0c\u4f46\u662f\u4f7f\u7528\u4e86\u66f4\u597d\u7684\u8bed\u6cd5\u3002\n\u8fd9\u610f\u5473\u7740\u6d88\u9664\u7b26\u5e76\u4e0d\u603b\u662f\u4ee5case\u8bed\u53e5\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u5b9e\u9645\u4e0a\uff0c\u6d88\u9664\u5668\u53ea\u662f\u51fd\u6570\uff0cHaskell\u4e3a\u8fd9\u4e9b\u51fd\u6570\u63d0\u4f9b\u4e86\u7279\u6b8a\u7684\u8bed\u6cd5\uff0c\u4ee5\u4fbf\u4ee5\u66f4\u597d\u7684\u65b9\u5f0f\u7f16\u5199\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u4f7f\u7528Lisp\uff0c\u4f8b\u5982\uff0c\u6211\u4eec\u4e5f\u6709\u6784\u9020\u5668\u548c\u6d88\u9664\u5668\u3002\n\u5728Lisp\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u6784\u9020\u51fd\u6570cons(\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u88ab\u79f0\u4e3acons-cell)\u6765\u751f\u6210\u5177\u6709\u65b0\u5934\u90e8\u7684\u5217\u8868\u3002Cons\u53ea\u662f\u53e6\u4e00\u4e2a\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\u7684\u51fd\u6570\uff1a\u8981\u6784\u9020\u7684\u5217\u8868\u7684\u5934\u90e8\u548c\u5c3e\u90e8\uff0c\u5e76\u8fd4\u56de\u8be5\u5217\u8868\u3002\u8981\u5206\u89e3cons\u5217\u8868\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u6d88\u9664\u5668\uff1acar\u548ccdr\u3002Car\u83b7\u53d6\u5217\u8868\u5e76\u8fd4\u56de\u5934\u90e8\uff0cCdr\u83b7\u53d6\u5217\u8868\u5e76\u8fd4\u56de\u5c3e\u90e8\u3002\nHaskell\u4e5f\u63d0\u4f9b\u4e86\u6d88\u9664\u7b26\uff0c\u4f46\u662f\u5982\u679c\u60a8\u8fc7\u5ea6\u4f7f\u7528\u5b83\u4eec\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u76b1\u8d77\u7709\u5934\uff1a\u5f53\u60a8\u58f0\u660e\u4e00\u4e2a\u8bb0\u5f55\u6570\u636e\u7c7b\u578b\u65f6\uff0cHaskell\u4f1a\u5f88\u6709\u5e2e\u52a9\u5730\u521b\u5efa\u51fd\u6570\u6765\u8bbf\u95ee\u6bcf\u4e2a\u5b57\u6bb5\uff1a\nData FooRecord=FooRecord{fooField1\uff1a\uff1aint\uff0cfooField2\uff1a\uff1aString}--Both--fooField1\uff1a\uff1aFooRecord-&gt\uff1bInt--fooField2\uff1a\uff1aFooRecord-&gt\uff1bString--\u73b0\u5728\u5b58\u5728\u3002\n\u5f53\u60a8\u4f7f\u7528\u8fd9\u4e9b\u8bbf\u95ee\u5668\u65f6\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u76b1\u8d77\u7709\u5934\uff0c\u56e0\u4e3a\u5982\u679cFooRecord\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u800c\u60a8\u5bf9\u53e6\u4e00\u4e2a\u6784\u9020\u51fd\u6570\u4f7f\u7528\u4e86\u6d88\u9664\u5668\uff0c\u90a3\u4e48\u60a8\u7684\u7a0b\u5e8f\u5c31\u4f1a\u4ed8\u4e4b\u4e00\u70ac\u3002\u8fd9\u4e0e\u5c06Car\u548cCdr\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u4e3a\u7a7a\u5217\u8868\u65f6\u7206\u70b8\u6210\u706b\u7130\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\u3002\n\u6240\u6709\u8fd9\u4e00\u5207\u7684\u8981\u70b9\u662f\uff0c\u6570\u636e\u662f\u4e00\u79cd\u58f0\u660e\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u521b\u5efa\u503c\uff0c\u60a8\u7684\u7a0b\u5e8f\u4f1a\u9009\u62e9\u60a8\u5bf9\u5f53\u524d\u6848\u4f8b\u611f\u5174\u8da3\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\n\u8303\u7574\u8bba\u662f\u6570\u5b66\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u4e3b\u8981\u88abhaskler\u7528\u6765\u60f9\u607c\u5176\u4ed6\u6240\u6709\u4eba\u3002\u4f46\u662f\uff0c\u4fe1\u4e0d\u4fe1\u7531\u4f60\uff0c\u5bf9\u9879\u76ee\u8fdb\u884c\u63a8\u7406\u4e5f\u5f88\u6709\u7528\u3002\u5728\u8303\u7574\u8bba\u4e2d\uff0c\u6211\u4eec\u6709\u5bf9\u8c61\uff0c\u6211\u4eec\u6709\u76f8\u4e92\u8fde\u63a5\u5bf9\u8c61\u7684\u7bad\u5934\u3002\u5bf9\u4e8e\u4e00\u4e2a\u7c7b\u522b\u6765\u8bf4\uff0c\u5b83\u7684\u5bf9\u8c61\u548c\u7bad\u5934\u5fc5\u987b\u9075\u5b88\u4e00\u4e9b\u89c4\u5219\u3002\n\u8303\u7574\u7406\u8bba\u7684\u4e00\u4e2a\u7ed3\u6784\u662f\u5171\u8303\u7574\u3002\u540c\u4e49\u8303\u7574\u662f\u7bad\u5934\u98a0\u5012\u7684\u8303\u7574\u3002\u5982\u679c\u5728\u7c7b\u522bX\u4e2d\uff0c\u7bad\u5934\u4eceA\u5230B\uff0c\u5728\u7c7b\u522bco-X\u4e2d\uff0c\u7bad\u5934\u4eceB\u5230A\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u60a8\u5e94\u8be5\u4f1a\u6000\u7591&#34\uff1bcodata&#34\uff1b\u3002\u5b83\u770b\u8d77\u6765\u5b8c\u5168\u50cf&#34\uff1bco-data&34\uff1b\uff0c\u662f&#34\uff1bdata&#34\uff1b\u7684\u5171\u540c\u7c7b\u522b\u3002\u4f46\u662f\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u6837\u5b50\u7684&#34\uff1b\u6570\u636e&#34\uff1b\u7c7b\u522b\uff1f\n\u6570\u636e\u7c7b\u522b\u4f5c\u4e3a\u6570\u636e\u58f0\u660e\u663e\u793a\u7ed9\u6211\u4eec\u3002\u8ba9\u6211\u4eec\u518d\u770b\u4e00\u770bfoo\u7684\u4f8b\u5b50\uff1a\nData Foo WHERE Foo1\uff1a\uff1aint-&gt\uff1bString-&gt\uff1bFoo2\uff1a\uff1aBool-&gt\uff1bFoo\u3002\n\u5728\u672c\u4f8b\u4e2d(\u4f46\u4e0d\u662f\u5728\u6240\u6709\u7c7b\u522b\u4e2d)\uff0c\u7c7b\u578b\u662f\u5bf9\u8c61\uff0c\u51fd\u6570\u662f\u7bad\u5934\u3002\u5982\u679c\u6211\u4eec\u7a0d\u5fae\u4fee\u6539\u4e00\u4e0b\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u901a\u8fc7\u4f7f\u7528uncurrling\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e00\u79cd\u4e0d\u90a3\u4e48\u50cf\u7bad\u5934\u7684\u6570\u636e\u683c\u5f0f\uff0c\u5e76\u4e14\u66f4\u5bb9\u6613\u8fbe\u5230\u6211\u4eec\u7684\u76ee\u7684\uff1a\n\u73b0\u5728\uff0cFoo1\u83b7\u53d6\u4e00\u5bf9Int\u548cString\u5e76\u8fd4\u56deFoo\uff0c\u800cFoo2\u83b7\u53d6Bool\u5e76\u8fd4\u56deFoo\u3002\u8fd9\u51e0\u4e4e\u662f\u6bcf\u4e2ahaskler\u90fd\u77e5\u9053\u7684\uff1a\u9664\u975e\u540c\u65f6\u63d0\u4f9bInt\u548cString\uff0c\u65e0\u8bba\u4e2d\u95f4\u6709\u591a\u5c11\u4e2a\u7bad\u5934\uff0c\u90fd\u4e0d\u4f1a\u6709foo via Foo1\u3002\nFoo1(i\uff0cs)\u7684\u6848\u4f8bmyfoo-&gt\uff1b\u5982\u679cFoo1 I s Foo2 b-&gt\uff1b\u5982\u679cFoo2 b\u600e\u4e48\u529e_Do_If_Foo1\uff1bWhat_To_Do_If_Foo2 b\u3002\n\u811a\u90e8\u6d88\u9664\u5668\uff1a\uff1a(foo\uff0c((Int\uff0cString)-&gt\uff1ba)\uff0c(Bool-&gt\uff1ba)-&gt\uff1ba\u811a\u90e8\u6d88\u9664\u5668(myfoo\uff0cWhat_to_do_if_Foo1\uff0cWhat_to_do_if_Foo2)=case myfoo of Foo1(i\uff0cs)-&gt\uff1bWhat_to_do_if_Foo1(i\uff0cs)Foo2 b-&gt\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u5c06case\u8f6c\u6362\u4e3a\u666e\u901a\u7684\u65e7\u51fd\u6570\uff0c\u6211\u4eec\u5c31\u4e0d\u9700\u8981\u624b\u52a8\u653e\u5f03\u548c\u9b54\u672f\u4e86\uff0c\u56e0\u4e3a\u73b0\u5728\u4e00\u5207\u90fd\u662f\u666e\u901a\u7684\u65e7\u51fd\u6570\u7ec4\u5408\u548c\u5e94\u7528\u4e86\u3002\u6b64\u5916\uff0c\u6240\u6709haskeller\u5373\u5c06\u62b1\u6028\u7684\u6240\u6709\u4ee4\u4eba\u4e0d\u5feb\u7684\u4e8b\u60c5\u90fd\u5c06\u5bf9\u6211\u4eec\u6709\u6240\u5e2e\u52a9\u3002\n\u6211\u6309\u6469\u4e86\u6240\u6709\u8fd9\u4e9b\u8868\u60c5\uff0c\u7136\u540e\u628a\u5b83\u4eec\u89e3\u5f00\u4e86\uff0c\u56e0\u4e3a\uff0c\u5426\u5219\u4f1a\u8ba9\u4eba\u8ff7\u60d1\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u5171\u540c\u8303\u7574\u662f\u4e00\u4e2a\u7bad\u5934\u7ffb\u8f6c\u7684\u8303\u7574\u3002\u8fd9\u5c31\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u54ea\u652f\u7bad\uff1f\u6240\u6709\u4eba\uff1f\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\uff1f\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u7bad\u5934\uff0c\u4e00\u5207\u90fd\u4f1a\u53d8\u5f97\u66f4\u5bb9\u6613\uff1a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0d\u5fc5\u53bb\u627e\u51fa\u662f\u54ea\u4e00\u4e2a\u3002\n\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u7ffb\u8f6cFoo\u6570\u636e\u58f0\u660e\u7684\u7bad\u5934\uff0c\u770b\u770b\u4f1a\u6709\u4ec0\u4e48\u7ed3\u679c\u3002\n--\u8fd9\u4e0d\u662f\u771f\u6b63\u7684Haskell\uff0c\u5728Haskell codata Foo\u4e2d(\u5c1a\u4e0d\u5b58\u5728)`codata`\uff0c\u5176\u4e2dFoo1\uff1a\uff1a(int\uff0cstring)&lt\uff1b-Foo Foo2\uff1a\uff1aBool&lt\uff1b-Foo\u3002\n\u6211\u5f88\u9ad8\u5174\u5730\u5c06\u6570\u636e\u91cd\u547d\u540d\u4e3aCodata\uff0c\u5e76\u7ffb\u8f6c\u4e86\u6bcf\u884c\u4e2d\u7684\u5355\u7bad\u5934\u3002\u8ba9\u6211\u4eec\u5c06\u53c2\u6570\u7684\u987a\u5e8f\u98a0\u5012\u4e00\u4e0b\uff0c\u4f7f\u7bad\u5934\u6307\u5411\u53f3\u4fa7\uff0c\u56e0\u4e3a\u6211\u4eec\u4e60\u60ef\u4e8e\u770b\u5230\u7bad\u5934\u662f\u8fd9\u6837\u8d77\u4f5c\u7528\u7684\uff1a\n\u8fd9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u55ef\uff0c\u540c\u65f6\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\uff0c\u4f46\u662f\u8ba9\u6211\u4eec\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u53bb\u5427\u3002\n\u6211\u4eec\u6709\u4e24\u4e2a\u4e0ecodata foo\u76f8\u5173\u7684\u51fd\u6570\u3002\u7b2c\u4e00\u4e2a\uff0c\u79f0\u4e3aFoo1\uff0c\u63a5\u53d7Foo\u5e76\u5236\u9020\u4e00\u5bf9Int\u548cString\u3002\u7b2c\u4e8c\u4e2a\uff0c\u53eb\u505aFoo2\uff0c\u5b83\u505a\u4e86\u4e00\u4e2a\u50bb\u74dc\uff0c\u5236\u9020\u4e86\u4e00\u4e2a\u5e03\u5c14(Bool)\u3002\u6211\u4eec\u6709\u4e24\u4e2a\u51fd\u6570\uff0c\u5b83\u4eec\u63a5\u53d7\u4f3c\u4e4e\u662f\u590d\u5408\u503cfoo\uff0c\u5e76\u4ece\u4e2d\u63d0\u53d6Int\u3001String\u548cBool\u7c7b\u578b\u7684\u7b80\u5355\u503c\u3002\n\u5c31\u50cf\u6211\u4eec\u53ef\u4ee5\u8c03\u7528data Foo\u58f0\u660e\u4e2d\u7684\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u8c03\u7528codata Foo\u4e2d\u7684\u4e24\u4e2a\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u5e76\u4e3a\u7b2c\u4e00\u79cd\u60c5\u51b5\u83b7\u5f97\u4e00\u4e2a(Int\uff0cString)\uff0c\u4e3a\u7b2c\u4e8c\u79cd\u60c5\u51b5\u83b7\u5f97\u4e00\u4e2aBool\u3002\u6ca1\u6709\u4ec0\u4e48\u80fd\u5f3a\u8feb\u6211\u4eec\u7ed9\u4e24\u4e2a\u90fd\u6253\u7535\u8bdd\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u7ed9\u4ed6\u4eec\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u6253\u7535\u8bdd\u3002\n\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2afoo\uff0c\u901a\u8fc7\u8c03\u7528foo1\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u83b7\u5f97\u7b80\u5355\u7684\u503c\uff0c\u8fd9\u770b\u8d77\u6765\u5f88\u50cf\u4e00\u4e2a\u6d88\u9664\u5668\u3002\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u8c03\u7528Foo2\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u53e6\u4e00\u4e2a\u6d88\u9664\u5668\u3002\n\u6570\u636e\u662f\u5173\u4e8e\u5982\u4f55\u8c03\u7528\u5408\u6210\u503c\u7684\u8bb8\u591a\u4e0d\u540c\u6784\u9020\u51fd\u6570\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\nCODATA\u662f\u5173\u4e8e\u6211\u4eec\u5982\u4f55\u8c03\u7528\u5408\u6210\u503c\u7684\u8bb8\u591a\u4e0d\u540c\u6d88\u9664\u5668\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\nCodata\u770b\u8d77\u6765\u5f88\u50cf\u5bf9\u8c61\u548c\u65b9\u6cd5\uff0c\u5176\u4e2dcodata\u503c\u662f\u5bf9\u8c61\uff0c\u800c\u6d88\u9664\u5668\u662f\u65b9\u6cd5\u3002\u53ef\u80fd\u6709\u4e00\u4e9b\u5b9a\u7406\u53ef\u4ee5\u5c06codata\u4f5c\u4e3a\u4e00\u4e2a\u7c7b\u522b\u6620\u5c04\u5230OO\u7a0b\u5e8f\u4e2d\u7684\u5bf9\u8c61\u3002\n\u8fd9\u5e76\u4e0d\u662f\u8bf4\u51fd\u6570\u5f0f\u7f16\u7a0b\u4f18\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\u4f46\u662f\uff0c\u901a\u5e38\u7684\u51fd\u6570\u5f0f\u7a0b\u5e8f\u5458\u4ee5\u524d\u90fd\u662f\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u5458\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u4ed6\u5f88\u53ef\u80fd\u77e5\u9053\u6765\u81eaOO\u7684codata\uff0c\u73b0\u5728\u5f00\u59cb\u7406\u89e3\u6765\u81eaFP\u7684\u6570\u636e\u3002\u56e0\u6b64\uff0c\u4ed6\u6bd4\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u5458\u88c5\u5907\u5f97\u66f4\u597d\uff0c\u56e0\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u5458\u53ea\u77e5\u9053codata\u3002\n\u5982\u679c\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u7eaf\u7cb9\u7684FP\u7a0b\u5e8f\u5458\u548c\u4e00\u4e2a\u7eaf\u7cb9\u7684OO\u7a0b\u5e8f\u5458\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6709\u7c7b\u4f3c\u7684\u6280\u80fd\u6c34\u5e73\uff0c\u4f46\u5728\u5b8c\u5168\u4e0d\u540c\u7684\u7ef4\u5ea6\u4e0a\u3002\u8fd9\u5c06\u4f7f\u5f97\u5f88\u96be\u771f\u6b63\u8ba1\u7b97\u51fa\u8c01\u662f\u6700\u719f\u7ec3\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u6280\u80fd\u7ec4\u5408\u4e0d\u80fd\u4e0e\u4e4b\u76f8\u5ab2\u7f8e\uff01\u60a8\u5982\u4f55\u5c06\u6570\u636e\u4e2d\u7684\u6280\u80fd\u96c6\u4e0eCodata\u4e2d\u7684\u6280\u80fd\u96c6\u8fdb\u884c\u6bd4\u8f83\uff1f\n\u6570\u636e(\u548c\u51fd\u6570\u7f16\u7a0b)\u6d89\u53ca\u5982\u4f55\u4f7f\u7528\u6784\u9020\u51fd\u6570\u4ece\u7b80\u5355\u6570\u636e\u7c7b\u578b\u6784\u9020\u590d\u6742\u6570\u636e\u7c7b\u578b\u3002Codata(\u548c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b)\u6d89\u53ca\u5982\u4f55\u901a\u8fc7\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5\u4ece\u5bf9\u8c61\u4e2d\u63d0\u53d6\u7ec4\u4ef6\u3002\n\u8868\u8fbe\u5f0f\u95ee\u9898\u6307\u51fa\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u5411\u6570\u636e\u7c7b\u578b\u6dfb\u52a0\u65b0\u7528\u4f8b\u548c\u65b0\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u635f\u5931\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u4e5f\u4e0d\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002\n\u5728\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u4e2d\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u53e6\u4e00\u4e2a\u5b50\u7c7b\u5e76\u5b9e\u73b0\u65b9\u6cd5\u6765\u6dfb\u52a0\u65b0\u6848\u4f8b\u3002\u4f46\u662f\uff0c\u5982\u679c\u8981\u5411\u6570\u636e\u7c7b\u578b\u6dfb\u52a0\u65b0\u51fd\u6570\uff0c\u5219\u5fc5\u987b\u5c06\u5176\u6dfb\u52a0\u5230\u8d85\u7c7b\u4e2d\uff0c\u5e76\u5728\u6240\u6709\u73b0\u6709\u7684\u5b50\u7c7b\u4e0a\u5b9e\u73b0\u5b83\uff0c\u8fd9\u610f\u5473\u7740\u4fee\u6539\u5927\u91cf\u6587\u4ef6\u5e76\u91cd\u65b0\u7f16\u8bd1\u5927\u90e8\u5206\u7a0b\u5e8f\u3002\n\u5728FP\u8bed\u8a00\u4e2d\uff0c\u53ea\u9700\u6dfb\u52a0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u53ef\u4ee5\u5c06\u65b0\u51fd\u6570\u6dfb\u52a0\u5230\u73b0\u6709\u7684\u6570\u636e\u7c7b\u578b\u4e2d\u3002\u4f46\u662f\uff0c\u5982\u679c\u8981\u6dfb\u52a0\u65b0\u6848\u4f8b\uff0c\u5219\u5fc5\u987b\u6dfb\u52a0\u6784\u9020\u51fd\u6570\u5e76\u4fee\u6539\u6240\u6709\u4f7f\u7528\u8be5\u6570\u636e\u7c7b\u578b\u7684\u51fd\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4fee\u6539\u5927\u91cf\u6587\u4ef6\u5e76\u91cd\u65b0\u7f16\u8bd1\u5927\u90e8\u5206\u7a0b\u5e8f\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6709\u4e86\u6211\u4eec\u65b0\u7684\u6570\u636e\u534f\u6570\u636e\u77e5\u8bc6\uff0c\u6211\u4eec\u5bf9\u8868\u8fbe\u5f0f\u95ee\u9898\u6709\u4e86\u66f4\u6df1\u7684\u6d1e\u5bdf\u529b\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u89e3\u51b3\u65b9\u6848\u611f\u89c9\u90fd\u662f\u534a\u9014\u800c\u5e9f\u3002Haskell\u4e2d\u7684\u7c7b\u578b\u7c7b\u611f\u89c9\u5c31\u50cf\u87ba\u6813\u56fa\u5b9a\u5728&#34\uff1b\u4e2d\u7684&#OO\uff0c\u4e0eC#\u6269\u5c55\u65b9\u6cd5\u611f\u89c9\u50cf\u87ba\u6813\u56fa\u5b9a\u5728&#34\uff1b\u4e2d\u7684&#34\uff1b\u51fd\u6570\u4e00\u6837\u3002\u5728\u4e00\u4e2a\u6570\u636e\u4e3a\u738b\u7684\u4e16\u754c\u91cc\uff0c\u534f\u540c\u6570\u636e\u7684\u4e1c\u897f\u8ba9\u4eba\u611f\u89c9\u88ab\u9501\u4f4f\u4e86\uff1b\u5c31\u50cf\u5728\u6570\u636e\u4e3a\u738b\u7684\u4e16\u754c\u91cc\u4e00\u6837\uff0c\u6570\u636e\u7684\u4e1c\u897f\u611f\u89c9\u88ab\u9501\u4f4f\u4e86\u3002\u8fd9\u4e24\u4e2a\u7c7b\u522b\u662f\u76f8\u53cd\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6f5c\u5728\u7684\u6570\u5b66\u6b63\u5728\u4e0e\u6211\u4eec\u60f3\u8981\u6dfb\u52a0\u7684\u5185\u5bb9\u8fdb\u884c\u6597\u4e89\u3002\u5982\u679c\u6ca1\u6709\u6570\u5b66\u65b9\u9762\u7684\u5408\u4f5c\uff0c\u6211\u4eec\u6700\u591a\u53ea\u80fd\u5f97\u5230\u4e00\u4e2a\u534a\u9014\u800c\u5e9f\u7684\u7ed3\u679c\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u7528\u5b83\u505a\u70b9\u4ec0\u4e48\uff0c\u6240\u6709\u8fd9\u4e9b\u7406\u8bba\u90fd\u5c06\u6beb\u65e0\u7528\u5904(\u5c31\u50cf\u8fd9\u7bc7\u8bba\u6587\u4e00\u6837)\u3002\u7ed3\u679c\uff0c\u8fd9\u7bc7\u8bba\u6587\u5c55\u793a\u4e86\u4e00\u4e9b\u975e\u5e38\u6709\u8da3\u7684\u4e1c\u897f\uff1a\u5728codata\u4e16\u754c\u4e2d\u5b9e\u73b0\u6570\u636e\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u4ee5\u53ca\u5728\u6570\u636e\u4e16\u754c\u4e2d\u5b9e\u73b0codata\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u4ef6\u5f88\u68d2\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u6765\u53ef\u80fd\u4f1a\u6709\u65e2\u652f\u6301\u6570\u636e\u53c8\u652f\u6301\u534f\u540c\u6570\u636e\u7684\u7f16\u7a0b\u8bed\u8a00\uff01\n\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u7684\u7b2c\u4e00\u4e2a\u8f6c\u6362\u662f\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u521b\u5efa\u5bf9\u8c61\u3002Haskell\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u79cd\u5b9e\u73b0\u5b83\u4eec\u7684\u65b9\u6cd5\uff1a\u7c7b\u578b\u7c7b\u3002\u5f53\u60a8\u8bfb\u5230\u6709\u5173\u7c7b\u578b\u7c7b\u7684\u5185\u5bb9\u65f6\uff0c\u6587\u732e\u5f00\u59cb\u629b\u51fa\u9690\u5f0f\u4f20\u9012\u7684\u51fd\u6570\u5b57\u5178\u3002\u8fd9\u63d0\u4f9b\u4e86\u4e00\u79cd\u5b9e\u73b0\u5bf9\u8c61\u7684\u65b9\u6cd5\uff1a\u4f5c\u4e3a\u5bf9\u8c61\u7684\u6d88\u9664\u5668(\u65b9\u6cd5)\u7684\u4ea7\u7269\u3002\u56e0\u6b64\uff1a\nClass{int fooInt\uff1bfooString\uff1bpublic(int x\uff0cy){fooInt=x\uff1bfooString=y\uff1b}public int getTheInt(){return fooInt\uff1b}public DoSomething(Extra){return fooString\u3002Concat(fooInt.\u3002ToString())\u3002Concat(\u989d\u5916)\uff1b}}\u3002\nData foo=foo{getTheInt\uff1a\uff1aint\uff0cDoSomething\uff1a\uff1astring-&gt\uff1bstring}--\u6784\u9020\u51fd\u6570mkFoo\uff1a\uff1aint-&gt\uff1bstring-&gt\uff1bfoo mkFoo fooInt fooString=foo{getTheInt=fooInt\uff0cDoSomething=\\Extra-&gt\uff1bfooString&lt\uff1b&gt\uff1bshow fooInt&lt\uff1b&gt\uff1bExtra}\u3002\n\u5982\u679c\u8fd9\u4e0d\u80fd\u7528\u4e8e\u7ee7\u627f\uff0c\u6240\u6709\u7684\u9762\u5411\u5bf9\u8c61\u4eba\u5458\u90fd\u4f1a\u62b1\u6028\uff0c\u4ed6\u4eec\u662f\u5bf9\u7684\uff0c\u56e0\u4e3a\u5426\u5219\u5b83\u5c31\u4e0d\u80fd\u5728\u8868\u8fbe\u5f0f\u95ee\u9898\u4e0a\u53d1\u6325\u4f5c\u7528\u3002\u56e0\u6b64\uff0c\u8ba9\u6211\u4eec\u6269\u5c55\u8fd9\u4e24\u4e2a\u793a\u4f8b\uff1a\n\u7c7b\u6269\u5c55{bool mfooBool\uff1bpublic(int x\uff0cy\uff0cbool z){Super(x\uff0cy)\uff1bmfooBool=z\uff1b}public DoSomething(Extra){if(MfooBool){return&#34\uff1bno&34\uff1b\uff1b}Else{return super.\u3002\u505a\u67d0\u4e8b(\u989d\u5916)\uff1b}\u3002\nMkModifiedFoo\uff1a\uff1aint-&gt\uff1bString-&gt\uff1bBool-&gt\uff1bFoo mkModifiedFoo fooInt fooString fooBool=Foo{getTheInt=getTheInt Super\uff0cDoSomething=\\Extra-&gt\uff1bif mfooBool Then&#34\uff1bNope&34\uff1bElse DoSomething Super Extra}\u5176\u4e2dSuper=mkFoo fooInt fooString\nHaskell\u65b9\u6cd5\u5c06\u5c5e\u6027\u5b58\u50a8\u5728\u95ed\u5305\u4e2d\uff0c\u800c\u4e0d\u662f\u58f0\u660e\u5b83\u4eec\u3002\u6211\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7279\u5b9a\u7684\u5bf9\u8c61\u6765\u5b58\u50a8\u5b83\u4eec\uff0c\u4f46\u662f\u6211\u8ba4\u4e3a\u95ed\u5305\u5df2\u7ecf\u8db3\u591f\u597d\u4e86\u3002\n\u5947\u602a\u7684\u662f\uff0c\u8fd9\u4e24\u672c\u4e66\u4e4b\u95f4\u7684\u7ffb\u8bd1\u5927\u591a\u662f\u673a\u68b0\u5316\u7684\uff0c\u8fd9\u4e5f\u662f\u8bba\u6587\u4f5c\u8005\u7528\u6765\u5c06\u4e00\u672c\u4e66\u673a\u68b0\u5730\u8f6c\u6362\u6210\u53e6\u4e00\u672c\u4e66\u7684\u65b9\u6cd5\u3002\n\u5947\u602a\u7684\u662f\uff0c\u5728OOP\u8bed\u8a00\u4e2d\u5b9e\u73b0ADT\u6709\u5f88\u591a\u540d\u5b57\uff0c\u4f46\u770b\u8d77\u6765\u5f88\u53ef\u6015\uff0c\u81f3\u5c11\u6700\u521d\u662f\u8fd9\u6837\u3002\u5b83\u6709\u4e00\u4e2a\u975e\u5e38\u5947\u7279\u7684\u540d\u5b57\uff1a\u6559\u5802\u7f16\u7801\uff0c\u8fd8\u6709\u4e00\u4e2a\u4e0d\u90a3\u4e48\u5947\u7279\u7684\u540d\u5b57\uff1a\u8bbf\u5ba2\u6a21\u5f0f\uff0c\u4f46\u5b83\u4eec\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u6b64\u6280\u672f\u57fa\u4e8e\u5c06case\u8bed\u53e5\u8f6c\u6362\u4e3a\u5bf9\u8c61\uff0c\u5e76\u5c06\u4e0d\u540c\u7684\u6784\u9020\u51fd\u6570\u8f6c\u6362\u4e3a\u63a5\u53d7\u5668\u7c7b\u7684\u5b9e\u4f8b\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u4f8b\u5b50\uff1a\nData Foo WHERE Foo1\uff1a\uff1a(int\uff0cString)-&gt\uff1bFoo Foo2\uff1a\uff1aBool-&gt\uff1bFoo FooEviinator\uff1a(Foo\uff0c((Int\uff0cString)-&gt\uff1ba)\uff0c(Bool-&gt\uff1ba)-&gt\uff1ba Foo\u6d88\u9664\u7b26(myfoo\uff0cWhat_to_Do_if_Foo1\uff0cWhat_to_do_if_Foo2)=case Foomyfoo of Foo2(myfoo\uff0cWhat_to_do_if_Foo1\uff0cWhat_to_do_if_Foo2)=case myfoo of Foo2\u3002\u5982\u679cFoo1(i\uff0cs)Foo2 b-&gt\uff1b\u5982\u679cFoo2 b\u600e\u4e48\u529e\u3002\n\u62bd\u8c61\u7c7b{public\u6d88\u9664(&lt\uff1b&gt\uff1bfooEmininator)\uff1b}//\u8868\u793aFoo1\u7684\u6700\u7ec8\u7c7b\u6269\u5c55{int i\uff1bs\uff1bpublic\u6d88\u9664(&lt\uff1b&gt\uff1bfooEmininator){return fooEmininator\u3002What_to_do_if_foo1(i\uff0cs)\uff1b}}//\u8868\u793aFoo2\u6700\u7ec8\u7c7b\u7684\u7c7b\u6269\u5c55{bool b\uff1bpublic\u6d88\u9664(&lt\uff1b&gt\uff1bfooEmininator){return fooEmininator\u3002What_to_do_if_Foo2(B)\uff1b}}\u62bd\u8c61\u7c7b&lt\uff1b&gt\uff1b{public What_to_do_if_Foo1(int i\uff0cs)\uff1bpublic What_to_do_if_Foo2(Bool B)\uff1b}\u3002\n\u5728Haskell\u793a\u4f8b\u4e2d\uff0cWhat_to_do_if_foox\u662f\u6211\u4eec\u9700\u8981\u4e00\u8d77\u4f20\u9012\u7684\u4e24\u4e2a\u51fd\u6570\uff0c\u56e0\u4e3a\u5b83\u4eec\u6210\u4e3a\u540c\u4e00\u4e2acase\u8bed\u53e5\u7684\u4e00\u90e8\u5206\u3002\u5728Java\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u51b3\u5b9a\u5c06\u5b83\u4eec\u4e00\u8d77\u4f5c\u4e3aFooEmininator\u7684\u5b9e\u4f8b\u8fdb\u884c\u4f20\u9012\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e00\u8d77\u4f20\u9012\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u540c\u4e00\u5bf9\u8c61\u7684\u65b9\u6cd5\u3002\n\u6309\u7167\u8868\u8fbe\u5f0f\u95ee\u9898\u7684\u8981\u6c42\uff0c\u5411foo\u6dfb\u52a0\u65b0\u64cd\u4f5c\u5728\u8fd9\u4e24\u79cd\u5b9e\u73b0\u4e2d\u90fd\u975e\u5e38\u5bb9\u6613\u3002\u5728Haskell\u4e2d\uff0c\u6211\u4eec\u53ea\u4f7f\u7528\u4e0d\u540c\u7684\u53c2\u6570\u8c03\u7528fooEmininator\uff1a\n\u5bf9\u4e8eJava\u7684\u5b9e\u73b0\u4e5f\u5f88\u5bb9\u6613\u3002\u6211\u4eec\u6d3e\u751f\u51fa\u4e00\u79cd\u65b0\u578b\u7684FooEmininator\uff0c\u6211\u4eec\u7528\u5b83\u6765\u547d\u540d\u4e3aFoo.exemination\uff1a\n\u7c7b\u6269\u5c55&lt\uff1b&gt\uff1b{public What_to_do_if_Foo1(int i\uff0cs){return&#34\uff1b\u67d0\u4e2a\u4e0d\u540c\u7684&#34\uff1b\u3002Concat(i.\u3002ToString())\u3002Conat(S)\uff1b}public What_do_if_foo2(Bool B){return&#34\uff1b\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f&#34\uff1b\u3002Concat(b.\u3002ToString()\uff1b}}myFoo=new(3\uff0c&#34\uff1basdf&#34\uff1b)\uff1b&lt\uff1b&gt\uff1bliminator=new()\uff1b.out\u3002Println(myfoo.\u3002\u6d88\u9664(\u6d88\u9664\u5668)\uff1b\n\u5b9e\u9645\u4e0a\uff0c\u6784\u9020\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u53d8\u4f53\u6240\u9700\u7684\u503c\u6210\u4e3a\u6d88\u9664\u5668\u65b9\u6cd5\u7684\u53c2\u6570\u3002\n\u4e0e\u524d\u9762\u7684\u8f6c\u6362\u60c5\u51b5\u7c7b\u4f3c\uff0c\u8fd9\u4e2a\u8f6c\u6362\u51e0\u4e4e\u662f\u673a\u68b0\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5c06\u6765\u53ef\u80fd\u4f1a\u770b\u5230\u5b83\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u81ea\u52a8\u5b8c\u6210\u3002\n\u50cf\u5f80\u5e38\u4e00\u6837\uff0c\u8fd9\u7bc7\u8bba\u6587\u5bf9\u7c7b\u578b\u8bba\u3001\u8303\u7574\u8bba\u548c\u5927\u91cf\u7684\u6570\u5b66\u7b26\u53f7\u8fdb\u884c\u4e86\u66f4\u591a\u7684\u7814\u7a76\uff0c\u8fd9\u4f7f\u5f97\u5b83\u5bf9\u6211\u5728\u8fd9\u91cc\u5199\u7684\u4e1c\u897f\u66f4\u52a0\u51c6\u786e\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u7cbe\u786e\u5ea6\u548c\u6570\u5b66\u7b26\u53f7\u53ef\u80fd\u4f1a\u8ba9\u521d\u5b66\u8005\u4e0d\u592a\u5bb9\u6613\u7406\u89e3\u3002\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u5bf9\u521d\u5b66\u8005\u66f4\u53cb\u597d\u4e00\u4e9b\uff0c\u540c\u65f6\u4ecd\u7136\u4f20\u8fbe\u4e86\u4e3b\u8981\u89c2\u70b9\u3002\n\u6700\u540e\uff0c\u6211\u8981\u611f\u8c22Paul Downen\u3001Zachary Sullivan\u3001Zena M.Ariola\u548cSimon Peyton Jones\u5199\u4e0b\u7684\u6781\u5177\u6d1e\u5bdf\u529b\u7684\u8bba\u6587\uff0c\u4ee5\u53ca\u6211\u7684\u597d\u670b\u53cbJuan Paucar\uff0c\u611f\u8c22\u4ed6\u4eec\u53d1\u73b0\u5e76\u544a\u8bc9\u6211\u8bba\u6587\u7684\u5b58\u5728\uff0c\u4ee5\u53ca\u6821\u5bf9\u8fd9\u7bc7\u6587\u7ae0\u3002", "note_en": "My friend Juan Paucar directed me to a paper from the magnificent  Programming Languages and Systems28th European Symposium on Programming, ESOP 2019, related to Codata. I have been very interested in codata, mainly because it relates to data in a category-theory way, but, as usual, I didn&#39;t understand many of the words involved. This paper helped me understand a lot, and also helped me understand and shape my mind on how to connect the worlds of FP and OOP. But, before that, we must go on tour over a bit of theory.\n  Data, better understood as Haskell&#39;s  data declaration, is nothing more than a type and a bunch of ways (functions) to create values of that type. I&#39;m going to use the GADT syntax just because it makes the functions visible. Here is an example:\n data  Foo  where  Foo1  ::  Int  -&gt;  String  -&gt;  Foo  Foo2  ::  Bool  -&gt;  Foo\n   But with the GADT syntax we can see the functions.  Foo1 is a constructor, but also a function.  Foo1 receives an Int and a String, and constructs a value of type  Foo. Exactly the same happens with  Foo2.\n We just talked about constructors: a constructor is nothing more than a function that manufactures a value out of other values. But that pretty much defines every function as a constructor, which isn&#39;t helpful. We&#39;ll go a bit further: a constructor is a &#34;primitive&#34; function that makes a value of type T, and is not build out of other functions that make a value of type T. Also, a constructor is the function you define when you write a  data declaration.\n If there are constructors, there should be something that dismantles data, because data seems to be constructed by aggregating values. This thing that deconstructs data is called &#34;eliminators&#34;. The universal eliminator in Haskell is the  case statement:\n  The  case statement accepts a parameter (what you put between the  case and the  of) and returns a value of some type. That&#39;s why all the branches in a  case statement must have the same type, because when you write a  case statement, you are writing a function like  mycase :: Foo -&gt; X, but with a nicer syntax.\n This means eliminators are not always in the shape of  case statements. In reality, eliminators are just functions, and Haskell provides special syntax for these functions to be written in a better way. But, if we go to Lisp, for example, we also have constructors and eliminators.\n In Lisp you can manufacture a list with a new head by using the constructor  cons (this is why these data structure is called a  cons-cell).  cons is just another function with two parameters: the head and the tail of the list to be constructed, and returns the list. To destructure a cons-list, you have two eliminators:  car and  cdr.  car takes a list and returns the head,  cdr takes the list and returns the tail.\n Haskell also offers eliminators, but everyone frowns at you if you use them too much: when you declare a record datatype, Haskell helpfully creates functions to access each of the fields:\n data  FooRecord  =  FooRecord  {  fooField1  ::  Int ,  fooField2  ::  String  } -- Both -- fooField1 :: FooRecord -&gt; Int -- fooField2 :: FooRecord -&gt; String -- now exist\n Everyone frowns at you when you use these accessors because if  FooRecord has more than a single constructor, and you use an eliminator for the other constructor, your program blows up in flames. This is no different to how  car and  cdr blow up in flames when you pass as parameter an empty list.\n The point of all of this is that  data is a declaration that offers a bunch of different ways to create a value, and your program chooses which one interests you for the current case.\n  Category Theory is a branch of Mathematics mainly used by haskellers to annoy everyone else. But, believe it or not, it&#39;s also useful to reason about programs. In Category Theory we have objects and we have arrows that interconnect the objects. For something to be a Category, its objects and arrows have to obey some rules.\n One of the constructs of Category Theory is the co-category. A co-category is a category where the arrows have been reversed. If in category X, an arrow goes from A to B, in the category co-X, the arrow goes from B to A.\n At this point, &#34;codata&#34; should be suspicious to you. It totally looks like &#34;co-data&#34;, the co-category of &#34;data&#34;. But, how does it actually look the category of &#34;data&#34;?\n  The &#34;data&#34; category is revealed to us as the  data declaration. Let&#39;s have another look at the  Foo example:\n data  Foo  where  Foo1  ::  Int  -&gt;  String  -&gt;  Foo  Foo2  ::  Bool  -&gt;  Foo\n In this case (but not in all categories) the types are the objects and the functions are the arrows. If we massage a little bit the code above, by using uncurrying, we can get to a data format that is a bit less arrow-ish and easier for our purposes:\n  Now  Foo1 takes a pair of Int and String and returns a  Foo, and  Foo2 takes a  Bool and returns a  Foo. This is pretty much what every haskeller already knows: you don&#39;t have a  Foo via  Foo1 until you provide both the  Int and the  String, no matter how many arrows are in the middle.\n  case  myfoo  of  Foo1  ( i ,  s )  -&gt;  what_to_do_if_Foo1  i  s  Foo2  b  -&gt;  what_to_do_if_Foo2  b\n  fooEliminator  ::  ( Foo ,  ( ( Int ,  String )  -&gt;  a ) ,  ( Bool  -&gt;  a ) )  -&gt;  a fooEliminator  ( myfoo ,  what_to_do_if_Foo1 ,  what_to_do_if_Foo2 )  =  case  myfoo  of  Foo1  ( i ,  s )  -&gt;  what_to_do_if_Foo1  ( i ,  s )  Foo2  b  -&gt;  what_to_do_if_Foo2  b\n Now that we have converted  case into a plain old function, we don&#39;t need to do hand-waiving and magic because everything is now plain old function composition and application. Also, all the uncurrying that all the haskellers are about to complain is just going to help us.\n  I massaged all these expressions and uncurried them because, otherwise it is confusing. I mean, a co-category is a category with the arrows flipped. Which poses the question: which arrows? All of them? Some of them? Everything is easier if there is a single arrow: it means we don&#39;t have to go figuring out which one.\n So let&#39;s flip the arrow of the  Foo data declaration, and let&#39;s see what comes out.\n -- This is not real Haskell, `codata` doesn&#39;t exist (yet) in Haskell codata  Foo  where  Foo1  ::  ( Int ,  String )  &lt;-  Foo  Foo2  ::  Bool  &lt;-  Foo\n I happily renamed  data to  codata, and flipped the single arrow in each line. Let&#39;s massage it a little bit more by flipping the order of the arguments so that the arrow points to the right, because we are accustomed to see the arrow functions that way:\n  What does this mean? Well, a lot of things at the same time, but let&#39;s go one by one.\n We have two functions related to the  codata Foo. The first, called  Foo1 takes a  Foo and manufactures a pair of Int and String. The second, called  Foo2 takes a  Foo and manufactures a  Bool. We have two functions that take what seems to be a composite value  Foo and extract simple values from it of types  Int,  String and  Bool.\n The same way that we could call any of the two functions in the  data Foo declaration, we can call any of the two functions in the  codata Foo, and get an  (Int, String) for the first case, and a  Bool for the second. Nothing forces us to call both, and we can just call any one of them.\n If we have a  Foo, and by calling  Foo1 we get simple values from it, this looks a lot like a eliminator. But we can also call  Foo2, which looks like another eliminator.\n  data is about how we can call any of the many different constructors of a composite value.\n codata is about how we can call any of the many different eliminators of a composite value.\n  Codata looks a lot like objects and methods, where the codata value is the object, and the eliminators are the methods. There is probably some theorem out there that maps codata as a category to objects in OO programs.\n It&#39;s not that Functional Programming is superior to Object Oriented Programming. But, the usual Functional Programmer has been an Object Oriented Programmer before. Because of this, he is likely to know  codata from OO, and now is starting to understand  data from FP. As a result of this, he is better armed than an Object Oriented Programmer because an Object Oriented Programmer only knows  codata.\n  If we were to find a pure FP programmer, and a pure OO programmer, they would probably have a similar level of skill, but in totally different dimensions. This would make very hard to actually figure out who is the most skilled, because their skill-sets wouldn&#39;t be comparable! How do you compare skill-set in  data with skill-set in  codata?\n Data (and Functional Programming) deals on how we can construct complex datatypes from simple ones by using constructors. Codata (and Object Oriented Programming) deals on how we can extract the components from an object by calling its methods.\n The  Expression Problem states that you should be able to add new cases and new functions to a datatype without losing type safety and without having to recompile.\n In an OO language, you can add a new case by creating another subclass and implementing the methods. But, if you want to add a new function to a datatype, you have to add it to the superclass and implement it on all the existing subclasses, which means modifying a lot of files and recompiling most of the program.\n In a FP language you can add a new function to an existing datatype just by adding a function. But, if you want to add a new case, you have to add the constructor and modify all the functions that use the datatype, which means modifying a lot of files and recompiling most of the program.\n Turns out, with our new data-codata knowledge, that we have a deeper insight into the Expression Problem, and why most solutions feel half-assed. Typeclasses in Haskell feel like &#34;OO bolted in&#34;, the same way that C# extension methods feel like &#34;functions bolted in&#34;. In a world where data is king, codata stuff feels bolted in; the same way than in a world where codata is king, data stuff feels bolted in. The categories are opposite, and that means the underlying math is fighting with what we want to add. Without cooperation from the math side, the best we can hope is getting a half-assed result.\n  All this theory would be useless (as well as the paper) if we couldn&#39;t do something with it. Turns out the paper shows something very interesting: a way to implement  data in the  codata world, and a way to implement  codata in the  data world. This is something great, as it means we may have programming languages in the future that support both  data and  codata!\n  The first conversion that we can implement is creating Objects in Functional Programming. Haskell already shines a way to implement them: typeclasses. When you read about typeclasses, the literature starts throwing around dictionary of functions passed implicitly. This shines a way to implement objects: as a product of the eliminators (methods) of the object. Thus:\n class    {  int fooInt ;   fooString ;  public   ( int x ,   y )  { fooInt  = x ; fooString  = y ;  }  public  int  getTheInt ( )  {  return fooInt ;  }  public    doSomething (  extra )  {  return fooString  . concat (fooInt . toString ( ) )  . concat (extra ) ;  } }\n  data  Foo  =  Foo  {  getTheInt  ::  Int ,  doSomething  ::  String  -&gt;  String  } -- constructor mkFoo  ::  Int  -&gt;  String  -&gt;  Foo mkFoo  fooInt  fooString  =  Foo  {  getTheInt  =  fooInt ,  doSomething  =  \\ extra  -&gt;  fooString  &lt;&gt;  show  fooInt  &lt;&gt;  extra  }\n   All the OO folks will complain if this doesn&#39;t work with inheritance, and they are right, because otherwise this fails to do its part on the Expression problem. So let&#39;s extend both examples:\n class    extends    { bool mfooBool ;  public   ( int x ,   y , bool z )  {  super (x , y ) ; mfooBool  = z ;  }  public    doSomething (  extra )  {  if (mfooBool )  {  return  &#34;Nope&#34; ;  }  else  {  return  super . doSomething (extra ) ;  }  } }\n  mkModifiedFoo  ::  Int  -&gt;  String  -&gt;  Bool  -&gt;  Foo mkModifiedFoo  fooInt  fooString  mfooBool  =  Foo  {  getTheInt  =  getTheInt  super ,  doSomething  =  \\ extra  -&gt;  if  mfooBool  then  &#34;Nope&#34;  else  doSomething  super  extra  }  where  super  =  mkFoo  fooInt  fooString\n The Haskell approach stores attributes in a closure, instead of declaring them. I could create a specific object to store them, but I consider the closures good enough.\n Curiously, the translation between the two is mostly mechanical, which is what the authors of the paper use to mechanically convert one into the other.\n  Curiously, implementing ADTs in OOP languages is something that goes with many names, but seems to be hideous, at least initially. It has a very fancy name:  Church Encoding, and a less fancy name:  the Visitor Pattern, but they are pretty much the same thing. This technique is based on converting the  case statement into an object, and the different constructors into instances of an  Acceptor class. Let&#39;s see an example:\n data  Foo  where  Foo1  ::  ( Int ,  String )  -&gt;  Foo  Foo2  ::  Bool  -&gt;  Foo fooEliminator  ::  ( Foo ,  ( ( Int ,  String )  -&gt;  a ) ,  ( Bool  -&gt;  a ) )  -&gt;  a fooEliminator  ( myfoo ,  what_to_do_if_Foo1 ,  what_to_do_if_Foo2 )  =  case  myfoo  of  Foo1  ( i ,  s )  -&gt;  what_to_do_if_Foo1  ( i ,  s )  Foo2  b  -&gt;  what_to_do_if_Foo2  b\n  abstract  class    {  public    eliminate (   &lt;  &gt; fooEliminator ) ; } // Class to represent Foo1 final  class    extends    {  int i ;   s ;  public    eliminate (   &lt;  &gt; fooEliminator )  {  return fooEliminator . what_to_do_if_Foo1 (i , s ) ;  } } // Class to represent Foo2 final  class    extends    { bool b ;  public    eliminate (   &lt;  &gt; fooEliminator )  {  return fooEliminator . what_to_do_if_Foo2 (b ) ;  } } abstract  class    &lt;  &gt;  {  public    what_to_do_if_Foo1 ( int i ,   s ) ;  public    what_to_do_if_Foo2 (bool b ) ; }\n In the Haskell example, the  what_to_do_if_FooX were two functions that we need to pass in together, as they become parts of the same  case statement. In the Java version we decide to pass them together as an instance of  FooEliminator, thus going together because they are methods of the same object.\n Adding new operations to  Foo, as the Expression Problem demands, is quite easy in both implementations. In Haskell we just call  fooEliminator with different parameters:\n  For the Java implementation is also easy. We derive a new type of  FooEliminator, and we call  Foo.eliminate with it:\n class    extends    &lt;  &gt;  {  public    what_to_do_if_Foo1 ( int i ,   s )  {  return  &#34;something different&#34; . concat (i . toString ( ) ) . concat (s ) ;  }  public    what_to_do_if_Foo2 (bool b )  {  return  &#34;something different&#34; . concat (b . toString ( ) ) ;  } }  myFoo  =  new   ( 3 ,  &#34;asdf&#34; ) ;   &lt;  &gt; eliminator  =  new   ( ) ;  .out . println (myFoo . eliminate (eliminator ) ) ;\n Effectively, the values we needed to construct the variants of our Algebraic Data Type become the parameters of the eliminator methods.\n With similar situation to the previous conversion, this one is pretty much mechanical, which means we will probably see it in the future done automatically in programming languages.\n  As usual,  the paper goes a lot more into type theory, category theory and lots of mathematical notation, which makes it much more precise to what I have written here. Unfortunately, all this precision and mathematical notation may make it a bit less understandable for beginners. I hope this article is a bit more beginner friendly, while still conveying the major points.\n Finally, I want to thank Paul Downen, Zachary Sullivan, Zena M. Ariola,and Simon Peyton Jones for the insightfully great paper they have written, and my good friend Juan Paucar for finding and telling me that the paper exists, as well as for proofreading the article.", "posttime": "2020-08-10 13:38:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fde\u63a5,action,\u51fd\u6570", "title": "\u8fd0\u884c\u4e2d\u7684Codata\uff0c\u6216\u8005\u5982\u4f55\u8fde\u63a5FP\u548cOOP", "title_en": "Codata in action, or how to connect FP and OOP", "transed": 1, "url": "https://www.javiercasas.com/articles/codata-in-action/", "via": "", "real_tags": ["\u8fde\u63a5", "action", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "358c6fad9320fc98e8eaf8dc49ea1c00.jpg", "infoid": 1017291, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b80\u800c\u8a00\u4e4b\uff0c\u672c\u5468\u6709\u6d88\u606f\u79f0\uff0c\u4f60\u7684\u8c37\u6b4c\u5bb6\u5ead\u626c\u58f0\u5668\u53ef\u80fd\u5728\u672a\u7ecf\u4f60\u7684\u8bb8\u53ef\u6216\u6388\u6743\u7684\u60c5\u51b5\u4e0b\uff0c\u5728\u4f60\u5bb6\u5468\u56f4\u6084\u6084\u5730\u5f55\u97f3\u3002\n\u5de7\u514b\u529b\u5de5\u5382\u627f\u8ba4\uff0c\u5b83\u4e0d\u5c0f\u5fc3\u6253\u5f00\u4e86\u4e00\u9879\u529f\u80fd\uff0c\u5141\u8bb8\u5176\u58f0\u63a7\u4eba\u5de5\u667a\u80fd\u52a9\u624b\u6fc0\u6d3b\u548c\u7aa5\u63a2\u5468\u56f4\u73af\u5883\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u51fa\u4e8e\u9690\u79c1\u539f\u56e0\uff0c\u8bbe\u5907\u53ea\u6709\u5728\u542c\u5230\u5524\u9192\u5355\u8bcd(\u5982\u201cOK\uff0cGoogle\u201d\u6216\u201c\u563f\uff0cGoogle\u201d)\u540e\u624d\u5f00\u59cb\u4e3b\u52a8\u76d1\u542c\u5e76\u8bb0\u5f55\u6240\u542c\u5230\u7684\u5185\u5bb9\u3002\u5728\u9192\u6765\u4e4b\u524d\uff0c\u5b83\u4f1a\u4e0d\u65ad\u5730\u503e\u542c\u8fd9\u4e9b\u8bdd\uff0c\u4f46\u4e0d\u5e94\u8be5\u5c06\u6240\u542c\u5230\u7684\u8bb0\u5f55\u4e0b\u6765\u3002\n\u7136\u800c\uff0c\u6295\u6ce8\u8005\u6ce8\u610f\u5230\uff0c\u5f53\u4ed6\u4eec\u7684\u624b\u673a\u5f00\u59cb\u6536\u5230\u901a\u77e5\u65f6\uff0c\u4ed6\u4eec\u6ce8\u610f\u5230\u4ed6\u4eec\u7684\u8c37\u6b4c\u4e3b\u9875\u4e00\u76f4\u5728\u8bb0\u5f55\u968f\u673a\u7684\u58f0\u97f3\uff0c\u6ca1\u6709\u53d1\u51fa\u4efb\u4f55\u53eb\u9192\u7684\u8bdd\u3002\u901a\u77e5\u663e\u793a\uff0c\u8be5\u8bbe\u5907\u542c\u5230\u4e86\u70df\u96fe\u62a5\u8b66\u5668\u561f\u561f\u58f0\u6216\u5bb6\u91cc\u73bb\u7483\u7834\u788e\u7684\u58f0\u97f3-\u6240\u6709\u8fd9\u4e9b\u90fd\u6ca1\u6709\u5f97\u5230\u4ed6\u4eec\u7684\u6279\u51c6\u3002\n\u636eProtocol\u62a5\u9053\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u8be5\u529f\u80fd\u5728\u6700\u8fd1\u7684\u4e00\u6b21\u8f6f\u4ef6\u66f4\u65b0\u4e2d\u88ab\u610f\u5916\u6253\u5f00\uff0c\u73b0\u5728\u5df2\u88ab\u5173\u95ed\u3002\u8fd9\u9879\u529f\u80fd\u53ef\u80fd\u662f\u6216\u539f\u672c\u6253\u7b97\u5728\u67d0\u4e00\u65f6\u523b\u7528\u4e8e\u5bb6\u5ead\u5b89\u5168\uff1a\u4f8b\u5982\uff0c\u60f3\u8c61\u4e00\u4e0b\uff0c\u6bcf\u5f53\u52a9\u7406\u542c\u5230\u6709\u4eba\u95ef\u5165\u65f6\u5c31\u4f1a\u9192\u6765\u3002\u8c37\u6b4c\u521a\u521a\u4ee54.5\u4ebf\u7f8e\u5143\uff0c\u62166.6%\u7684\u80a1\u4efd\u6536\u8d2d\u4e86\u53cd\u76d7\u7a83\u5de8\u5934ADT\u3002\n\u4e00\u7bc7\u51e0\u4e4e\u5168\u90e8\u7531OpenAI\u7684\u6587\u672c\u751f\u6210\u5668GPT-3\u64b0\u5199\u7684\u535a\u5ba2\u6587\u7ae0\u5438\u5f15\u4e86\u6570\u5343\u540d\u8bbf\u95ee\u8005\u3002\u663e\u7136\uff0c\u53ea\u6709\u4e00\u4e2a\u4eba\u6000\u7591\u5b83\u662f\u7531\u4eba\u5de5\u667a\u80fd\u8f6f\u4ef6\u751f\u6210\u7684\uff0c\u800c\u4e0d\u662f\u4eba\u7c7b\u4f5c\u5bb6\u3002\n\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821(University of California\uff0cBerkeley)\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\u7684\u5b66\u751f\u5229\u4e9a\u59c6\u00b7\u6ce2\u5c14(Liam Porr)\u5728\u7f51\u4e0a\u63a8\u5e7f\u8fd9\u4e2a\u865a\u5047\u7684\u81ea\u52a9\u535a\u5ba2\u3002\u4ee4\u4ed6\u60ca\u8bb6\u7684\u662f\uff0c\u8fd9\u7bc7\u5e16\u5b50\u83b7\u5f97\u4e86\u5927\u91cf\u7684\u9875\u9762\u6d4f\u89c8\u91cf\uff0c\u5c3d\u7ba1\u53ea\u6709\u4e00\u4e2a\u4eba\u6ce8\u610f\u5230\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u53e5\u5b50\u5728\u8bed\u6cd5\u4e0a\u6709\u610f\u4e49\uff0c\u4f46\u5199\u4f5c\u7f3a\u4e4f\u4efb\u4f55\u5b9e\u8d28\u5185\u5bb9\uff0c\u56e0\u6b64\u4ed6\u4eec\u6000\u7591\u8fd9\u662f\u4e00\u573a\u8c0b\u6740\u3002\nPorr\u900f\u9732\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u662f\u4f7f\u7528\u57fa\u4e8eOpenAI\u6700\u65b0\u6587\u672c\u751f\u6210\u5668\u7684\u5de5\u5177\u7f16\u5199\u7684\u3002\u4ed6\u4e00\u6b21\u7ed9\u6a21\u578b\u6dfb\u52a0\u6700\u591a\u4e94\u53e5\u8bdd\uff0c\u7136\u540e\u5b83\u4f1a\u586b\u6ee1\u5176\u4f59\u7684\u53e5\u5b50\uff0c\u4ece\u800c\u4ea7\u751f\u4e00\u7bc7\u5b8c\u6574\u7684\u6587\u7ae0\u3002\u7136\u800c\uff0c\u8981\u83b7\u5f97\u6700\u597d\u7684\u7ed3\u679c\u9700\u8981\u4e00\u4e9b\u52aa\u529b\uff0c\u4ed6\u751f\u6210\u4e86\u51e0\u4e2a\u7248\u672c\uff0c\u5e76\u786e\u4fdd\u5220\u9664\u4e86\u5305\u542b\u542c\u8d77\u6765\u5047\u7684\u5f15\u8bed\u7684\u53e5\u5b50\u3002\n\u6ce2\u5c14\u8ba4\u4e3a\uff0c\u4ed6\u7684\u5b9e\u9a8c\u8bc1\u660e\uff0cGPT-3\u8fd8\u4e0d\u8db3\u4ee5\u5b9e\u73b0\u5b8c\u5168\u81ea\u52a8\u5316\uff1b\u4eba\u7c7b\u4f5c\u5bb6\u4ecd\u9700\u7f16\u8f91\u548c\u6da6\u8272\u6587\u7a3f\u3002\u7136\u800c\uff0c\u4ed6\u8ba4\u4e3a\uff0c\u50cfGPT-3\u8fd9\u6837\u7684\u5de5\u5177\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u4e92\u8054\u7f51\u4e0a\u66f4\u5feb\u5730\u5236\u4f5c\u5185\u5bb9\u7684\u65b9\u6cd5\u3002\n\u5eb7\u5948\u5c14\u5927\u5b66(Cornell University)\u5df2\u7ecf\u6536\u96c6\u4e86arxiv\u4e0a\u7684\u6240\u6709\u5185\u5bb9\uff0carxiv\u662f\u4e00\u4e2a\u514d\u8d39\u7684\u79d1\u5b66\u8bba\u6587\u50a8\u5b58\u5e93\uff0c\u7b49\u5f85\u540c\u884c\u8bc4\u5ba1\u53d1\u8868\uff0c\u4ee5\u5efa\u7acb\u4e00\u4e2a\u6574\u9f50\u7684\u57fa\u4e8e\u6587\u672c\u7684\u6570\u636e\u96c6\uff0c\u4f9b\u673a\u5668\u5b66\u4e60\u5de5\u7a0b\u5e08\u4f7f\u7528\u3002\n\u8be5\u6570\u636e\u96c6\u6db5\u76d6\u4e86\u8fd130\u5e74\u7684\u51fa\u7248\u7269\uff0c\u73b0\u5728\u6258\u7ba1\u5728\u8c37\u6b4c\u62e5\u6709\u7684\u6570\u636e\u79d1\u5b66\u5e73\u53f0Kaggle\u4e0a\uff0c\u4f9b\u4efb\u4f55\u4eba\u4e0b\u8f7d\u3002\u5e0c\u671b\u901a\u8fc7\u516c\u5f00\u8fd9\u4e9b\u6570\u636e\uff0c\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u57f9\u8bad\u63a8\u8350\u5f15\u64ce\u7b49\u4eba\u5de5\u667a\u80fd\u5de5\u5177\uff0c\u6216\u8005\u5e2e\u52a9\u7528\u6237\u66f4\u5bb9\u6613\u5730\u641c\u7d22\u611f\u5174\u8da3\u7684\u8bba\u6587\u3002\n\u201c\u5c06\u6574\u4e2aarxiv\u8bed\u6599\u5e93\u653e\u5728kaggle\u4e0a\uff0c\u6781\u5927\u5730\u589e\u52a0\u4e86arxiv\u6587\u7ae0\u7684\u6f5c\u529b\uff0c\u201darxiv\u6267\u884c\u8463\u4e8b\u57c3\u83b1\u5965\u8bfa\u62c9\u00b7\u666e\u96f7\u8428\u5c3c(Eleonora Presani)\u8bf4\u3002\u901a\u8fc7\u63d0\u4f9b\u5173\u4e8eKaggle\u7684\u6570\u636e\u96c6\uff0c\u6211\u4eec\u8d85\u8d8a\u4e86\u4eba\u7c7b\u901a\u8fc7\u9605\u8bfb\u6240\u6709\u8fd9\u4e9b\u6587\u7ae0\u6240\u80fd\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u4ee5\u673a\u5668\u53ef\u8bfb\u7684\u683c\u5f0f\u5411\u516c\u4f17\u63d0\u4f9b\u4e86arxiv\u80cc\u540e\u7684\u6570\u636e\u548c\u4fe1\u606f\u3002\u201c\u3002\n\u6570\u636e\u96c6\u4e2d\u7684170\u4e07\u7bc7\u8bba\u6587\u5df2\u7ecf\u53d1\u5e03\u4e8630\u591a\u5e74\uff0c\u5e76\u5c06\u5728Kaggle\u4e0a\u5206\u6279\u53d1\u8868\u3002\nCortana\u662f\u5fae\u8f6f\u5bf9Siri\u548cGoogle Assistant\u7684\u56de\u5e94\uff0c\u4f46\u5b83\u5e76\u6ca1\u6709\u50cf\u7ade\u4e89\u5bf9\u624b\u90a3\u6837\u5927\u53d7\u6b22\u8fce\u3002\n\u73b0\u5728\uff0c\u96f7\u5fb7\u8499\u5fb7\u5df2\u7ecf\u51b3\u5b9a\u6574\u5408\u5176\u52aa\u529b\uff0c\u6253\u9020\u4e00\u6b3e\u4e13\u6ce8\u4e8e\u5fae\u8f6f365\u7684\u4eba\u5de5\u667a\u80fd\u6570\u5b57\u52a9\u7406\uff0c\u5e76\u5c06\u5728\u624b\u673a\u4e0a\u53d6\u6d88\u5bf9Cortana\u7684\u652f\u6301\uff0c\u540c\u65f6\u8fd8\u5c06\u627c\u6740\u7b2c\u4e09\u65b9Cortana\u5e94\u7528\u7a0b\u5e8f\uff0c\u5373Skills\u3002\n\u5fae\u8f6f\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff1a\u201c\u968f\u7740\u6211\u4eec\u5728\u5fae\u8f6f365\u4e2d\u5411\u53d8\u9769\u6027\u7684\u4eba\u5de5\u667a\u80fd\u52a9\u624b\u4f53\u9a8c\u8f6c\u53d8\uff0c\u6211\u4eec\u9700\u8981\u8c03\u6574\u521b\u65b0\u548c\u5f00\u53d1\u7684\u91cd\u70b9\u9886\u57df\uff0c\u5728\u5ba2\u6237\u6700\u9700\u8981\u7684\u5730\u65b9\u63d0\u4f9b\u5e2e\u52a9\u3002\u201d\u56e0\u6b64\uff0c\u6211\u4eec\u6b63\u5728\u4ee5\u66f4\u4f4e\u7684\u4f7f\u7528\u7387\u5bf9\u4e00\u4e9b\u4ee5\u6d88\u8d39\u8005\u4e3a\u4e2d\u5fc3\u7684\u7f8e\u56fd\u7279\u6027\u548c\u529f\u80fd\u8fdb\u884c\u4fee\u6539\u3002\u201c\u3002\n\u8fd9\u4e9b\u53d8\u5316\u662f\uff1a\u4ece9\u67087\u65e5\u8d77\u505c\u6b62\u5bf9\u6240\u6709\u7b2c\u4e09\u65b9Cortana\u6280\u80fd\u7684\u652f\u6301\u3002\u7136\u540e\uff0c\u57282021\u5e74\u521d\uff0c\u6211\u4eec\u5c06\u505c\u6b62\u652f\u6301\u7528\u4e8e\u79fb\u52a8(iOS\u548cAndroid)\u7684Cortana\u5e94\u7528\u7a0b\u5e8f\u2026\u2026\u3002\u6b64\u5916\uff0c\u7ecf\u8fc7\u4ed4\u7ec6\u8003\u8651\uff0c\u6211\u4eec\u51b3\u5b9a\u57282021\u5e741\u6708\u7ec8\u6b62\u5bf9Harman Kardon Invoke\u626c\u58f0\u5668\u4e2d\u7684Cortana\u670d\u52a1\u96c6\u6210\u7684\u652f\u6301\u3002&#34\uff1b\u00ae\nThe Register-\u72ec\u7acb\u4e8e\u79d1\u6280\u754c\u7684\u65b0\u95fb\u548c\u89c2\u70b9\u3002\u60c5\u51b5\u53d1\u5e03\u7684\u4e00\u90e8\u5206", "note_en": "In brief Your Google Home speaker may have been quietly recording sounds around your house without your permission or authorization, it was revealed this week.\n  The Chocolate Factory admitted it had accidentally turned on a feature that allowed its voice-controlled AI-based assistant to activate and snoop on its surroundings. Normally, the device only starts actively listening in and making a note of what it hears after it has heard wake words, such as \u201cOk, Google\u201d or \u201cHey, Google,\u201d for privacy reasons. Prior to waking, it&#39;s constantly listening out for those words, but is not supposed to keep a record of what it hears.\n  Yet punters noticed their Google Homes had been recording random sounds, without any wake word uttered, when they started receiving notifications on their phone that showed the device had heard things like a smoke alarm beeping, or glass breaking in their homes \u2013 all without giving their approval.\n  Google said the feature had been accidentally turned on during a recent software update, and it has now been switched off, Protocol  reported. It may be that this feature is or was intended to be used for home security at some point: imagine the assistant waking up whenever it hears a break in, for instance. Google just  bought a $450m, or 6.6 per cent, stake in anti-burglary giant ADT.\n    A blog post written almost entirely by OpenAI\u2019s text-generator GPT-3 attracted thousands of visitors. And only one person suspected it was generated by AI software rather than a human writer, apparently.\n  Liam Porr, a computer science student at the University of California, Berkeley, promoted the  bogus self-help blog online. To his surprise, the post received lots of page views, though only one person noticed that although the sentences made grammatical sense, the writing lacked any substance, so they suspected foul play.\n  Porr  revealed that, indeed, it was written using a  tool based on OpenAI\u2019s latest text generator. He fed the model up to five sentences at a time, and it would fill in the rest, producing a whole article. It took a bit of fiddling to get the best results, however, and he generated several versions and made sure to delete sentences that included fake-sounding quotes.\n  Porr reckons his experiment is proof that GPT-3 isn\u2019t yet good enough for complete automation yet; human writers will still need to edit and polish copy. However, tools like GPT-3 provide a way to crank out content on the internet much more quickly, he opined.\n    Cornell University has collected all the content on arXiv, the free repository of scientific papers awaiting peer-reviewed publication, to build a tidy text-based dataset for machine-learning engineers to play with.\n  The dataset, covering nearly 30 years of publications, is now hosted on Kaggle, a Google-owned data science platform, for anyone to download. It is hoped that by making the data public, it\u2019ll encourage developers to train AI tools like recommendation engines or help users search for interesting papers more easily.\n  \u201cHaving the entire arXiv corpus on Kaggle grows the potential of arXiv articles immensely,\u201d  said Eleonora Presani, arXiv executive director. \u201cBy offering the dataset on Kaggle we go beyond what humans can learn by reading all these articles and we make the data and information behind arXiv available to the public in a machine-readable format.\u201d\n  The 1.7 million papers in the dataset have been released over 30 years, and will be  published on Kaggle in multiple batches.\n    Cortana, Microsoft\u2019s answer to Siri and Google Assistant, hasn\u2019t taken off quite like its competitors.\n  Now, Redmond has decided to consolidate its efforts to build an AI digital assistant focused on Microsoft 365, and will pull support for Cortana on phones, and also kill off third-party Cortana apps, known as skills.\n  \u201cAs we make this shift toward a transformational AI-powered assistant experience in Microsoft 365, we need to adjust our focus areas of innovation and development to give our customers assistance where they need it most,\u201d Microsoft  said in a statement. \u201cAs a result, we are making changes to some US consumer-centric features and functionalities with lower usage.\u201d\n  Those changes are: &#34;To end support for all third-party Cortana skills on September 7. Then, in early 2021, we\u2019ll stop supporting the Cortana app for mobile (iOS and Android) ... In addition, after careful consideration, we\u2019ve decided to end support for the Cortana service integration in the Harman Kardon Invoke speaker in January 2021.&#34; \u00ae\n         The Register - Independent news and views for the tech community. Part of Situation Publishing", "posttime": "2020-08-10 13:37:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,arxiv", "title": "\u8c37\u6b4c\u201c\u610f\u5916\u201d\u5730\u79bb\u5f00\u4e86\u8c37\u6b4c\u5bb6\u5ead\u8bbe\u5907\uff0c\u8bb0\u5f55\u4f60\u7684\u6bcf\u4e00\u53e5\u8bdd", "title_en": "Google 'accidentally' left Google Home devices recording your every word", "transed": 1, "url": "https://www.theregister.com/2020/08/08/ai_in_brief/", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "arxiv"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1017290, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(\u7b80\u79f0&#34\uff1bIM\uff0c&#34\uff1b)\u3002\u4f46\u662f\uff0c\u5b83\u4eec\u4e5f\u8bf4\u660e\u4e86\u4f7f\u7528ImageMagick\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3(API)\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u9875\u9762\u5e94\u8be5\u662fIM\u7528\u6237\u9605\u8bfb\u7b80\u660e\u547d\u4ee4\u884c(CLI)\u9009\u9879\u624b\u518c\u540e\u7684\u7b2c\u4e00\u7ad9\u3002\u901a\u5e38\uff0c\u540c\u6837\u7684\u95ee\u9898\u4f1a\u5728\u7f51\u7edc\u4e0a\u88ab\u53cd\u590d\u95ee\u5230\uff0c\u6bd4\u5982\u6211\u8be5\u5982\u4f55\u2026\u2026\u3002\u6211\u5e0c\u671b\u8fd9\u4e9b\u7f51\u9875\u4e0a\u7684\u4f8b\u5b50\u80fd\u56de\u7b54\u5927\u591a\u6570\u5e38\u89c1\u7684\u5982\u4f55\u505a\u7684\u95ee\u9898\u3002\u793a\u4f8b\u9875\u9762\u4e2d\u4f7f\u7528\u7684\u7b26\u53f7\u7684\u56fe\u4f8b...\u3002\u6d4b\u8bd5\u56fe\u50cf\u5b58\u50a8\u76ee\u5f55...\u3002\u5305\u62ec\u5c0f\u56fe\u50cf(\u56fe\u50cf\u663e\u793a)\uff0c\u66f4\u591a\u7684\u7167\u7247(\u82b1\u5f0f\u6307\u6570)\u3002ImageMagick\u662f\u4e3a\u6279\u91cf\u5904\u7406\u56fe\u50cf\u800c\u8bbe\u8ba1\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u811a\u672c(shell\u3001DOS\u3001Perl\u3001PHP\u7b49)\u4e2d\u7ec4\u5408\u56fe\u50cf\u5904\u7406\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u5e94\u7528\u4e8e\u8bb8\u591a\u56fe\u50cf\uff0c\u6216\u5176\u4ed6\u4e00\u4e9b\u5de5\u5177\u7684\u5b50\u7cfb\u7edf\uff0c\u5982Web\u5e94\u7528\u7a0b\u5e8f\u3001\u89c6\u9891\u5904\u7406\u5de5\u5177\u3001\u5168\u666f\u56fe\u751f\u6210\u5668\u7b49\u3002\u5b83\u4e0d\u662f\u4e00\u4e2aGUI\u56fe\u50cf\u7f16\u8f91\u5668\u3002\nImageMagick\u9996\u5148\u662f\u4e00\u4e2a\u56fe\u50cf\u5230\u56fe\u50cf\u8f6c\u6362\u5668\u3002\u8fd9\u5c31\u662f\u5b83\u6700\u521d\u8bbe\u8ba1\u7684\u76ee\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u4f1a\u5c06\u4efb\u4f55\u56fe\u50cf\u683c\u5f0f(\u544a\u8bc9\u6211\u4eec\u662f\u5426\u53ef\u4ee5)\u8f6c\u6362\u6210\u4efb\u4f55\u5176\u4ed6\u56fe\u50cf\u683c\u5f0f\u3002\u4f46\u5b83\u4e5f\u662f\u4e00\u4e2a\u56fe\u50cf\u5904\u7406\u7b97\u6cd5\u5e93\u3002\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u884c\u548cshell/DOS\u811a\u672c(\u8fd9\u4e9b\u793a\u4f8b\u9875\u9762\u8bf4\u660e\u4e86\u8fd9\u4e00\u70b9)\u6216\u901a\u8fc7\u5927\u91cf\u7f16\u7a0b\u8bed\u8a00(\u5982C\u3001C++\u3001Perl\u3001Ruby\u3001PHP\u7b49)\u8bbf\u95ee\u8fd9\u4e9bAPI\u3002\u8bf7\u53c2\u9605\uff1aImageMagick API\u3002\u901f\u5ea6\u4ece\u6765\u4e0d\u662fIM\u7684\u4e00\u4e2a\u4e3b\u8981\u7279\u5f81\uff0c\u5b83\u66f4\u5f3a\u8c03\u751f\u6210\u7684\u56fe\u50cf\u7684\u8d28\u91cf\u3002\u8fd9\u5e76\u4e0d\u662f\u8bf4\u5b83\u53ef\u4ee5\u5728\u5408\u7406\u7684\u65f6\u95f4\u5185\u8f6c\u6362\u56fe\u50cf\u3002\u5b83\u53ea\u662f\u4e0d\u662f\u76f2\u76ee\u5feb\u901f\u7684\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0cIM\u6267\u884c\u67d0\u4e9b\u5904\u7406\u64cd\u4f5c\u7684\u901f\u5ea6\u53ef\u80fd\u4f1a\u5f88\u6162\uff0c\u5c24\u5176\u662f\u5728\u5c1d\u8bd5\u5c06\u56fe\u50cf\u538b\u7f29\u4e3a\u529f\u80fd\u6709\u9650\u7684\u56fe\u50cf\u683c\u5f0f\u65f6\u3002ImageMagick\u4e3b\u8981\u5173\u6ce8\u50cf\u7d20\u77e9\u5f62\u9635\u5217(\u901a\u5e38\u79f0\u4e3a\u6805\u683c)\u5f62\u5f0f\u7684\u56fe\u50cf\u3002\u5b83\u5c06\u5904\u7406Postscript\u6216PDF\u7b49\u77e2\u91cf\u56fe\u50cf\u683c\u5f0f\uff0c\u4f46\u4ee3\u4ef7\u662f\u5728\u52a0\u8f7d\u56fe\u50cf\u65f6\u5c06\u5176\u8f6c\u6362\u4e3a\u5149\u6805\uff0c\u5e76\u5728\u4fdd\u5b58\u65f6\u5728\u6805\u683c\u5468\u56f4\u751f\u6210\u77e2\u91cf\u56fe\u50cf\u5305\u88c5\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u65f6\uff0c\u77e2\u91cf\u56fe\u50cf\u7684\u5904\u7406\u6548\u679c\u5f80\u5f80\u5f88\u5dee\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u7684\u9009\u9879\u6765\u6539\u5584\u8fd9\u79cd\u60c5\u51b5\u3002\u8bf7\u53c2\u9605\uff1a\u5173\u4e8e\u77e2\u91cf\u56fe\u50cf\u683c\u5f0f\u7684\u4e00\u53e5\u8bdd\u3002\u8fd9\u4e9b\u9875\u9762\u662f\u4ece\u6211\u7684ImageMagick\u63d0\u793a\u548c\u63d0\u793a\u96c6\u5408\u9875\u9762\u53d1\u5c55\u800c\u6765\u7684\uff0c\u4e5f\u662f\u6211\u57281993\u5e74\u9996\u6b21\u5f00\u59cb\u7684\u9875\u9762\u7684\u5ef6\u7eed\uff0c\u5e76\u5728\u540c\u4e00\u65f6\u95f4\u51fa\u73b0\u5728\u65b0\u7684\u6709\u82b1\u54e8\u7684\u4e07\u7ef4\u7f51\u4e0a\u3002\u5173\u4e8eIM\u7684\u8bb8\u591a\u65b9\u9762\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u9875\u9762\u4e2d\u6ca1\u6709\u5305\u542b\u7684\u6ce8\u91ca\uff0c\u4ecd\u7136\u5b58\u5728\u4e8e\u8be5\u6587\u6863\u4e2d\u3002\u7136\u800c\uff0c\u867d\u7136\u73b0\u5728\u7684\u9875\u9762\u662f\u8bbe\u8ba1\u7ed9\u4f60\u770b\u7684\uff0c\u4f46\u63d0\u793a\u548c\u63d0\u793a\u6587\u6863\u53ea\u4f9b\u6211\u81ea\u5df1\u542f\u8fea\u3002\u56e0\u6b64\uff0c\u5b83\u5728\u67d0\u4e9b\u5730\u65b9\u53ef\u80fd\u662f\u6a21\u7cca\u7684\u6216\u6df7\u4e71\u7684\u3002\u6b22\u8fce\u60a8\u6d4f\u89c8\u3001\u5b66\u4e60\u548c\u8bc4\u8bba\u3002\u5176\u4ed6\u7684\u4f8b\u5b50\u662f\u4eceIMForum\u4e0a\u5bf9\u7528\u6237\u95ee\u9898\u7684\u56de\u7b54\u4e2d\u6293\u53d6\u6216\u53d1\u5c55\u51fa\u6765\u7684\uff0c\u6216\u8005\u662f\u4f5c\u4e3a\u5404\u79cd\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u8d21\u732e\u7ed9\u6211\u7684\u3002\u6211\u671f\u5f85\u7740\u6765\u81ea\u5176\u4ed6IM\u7528\u6237\u7684\u5efa\u8bae\u548c\u7535\u5b50\u90ae\u4ef6\u3002\u8fd9\u6837\u7684\u7535\u5b50\u90ae\u4ef6\u901a\u5e38\u5bfc\u81f4\u5bf9\u8fd9\u4e9b\u793a\u4f8b\u9875\u9762\u7684\u6539\u8fdb\u548c\u6269\u5c55\u3002\u6240\u6709\u793a\u4f8b\u90fd\u662f\u4f7f\u7528Bash\u811a\u672c\u7f16\u5199\u7684\uff0c\u4ee5\u4fbf\u5728UNIX\u4e0a\u4f7f\u7528\uff0c\u7279\u522b\u662f\u5728GNU/Linux\u7cfb\u7edf\u4e0a\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6709\u4e9b\u793a\u4f8b\u4f7f\u7528shell-for-do\u5faa\u73af\u3002\u5927\u591a\u6570\u793a\u4f8b\u5728\u884c\u5c3e\u4f7f\u7528\u53cd\u659c\u6760\u6765\u5728\u4e0b\u4e00\u884c\u7ee7\u7eed\u6267\u884c\u8be5\u547d\u4ee4\u3002\u8f83\u957f\u7684\u547d\u4ee4\u88ab\u5206\u5272\u6210\u5355\u72ec\u7684\u884c\uff0c\u4ee5\u5c1d\u8bd5\u8fdb\u4e00\u6b65\u7a81\u51fa\u663e\u793a\u6b63\u5728\u5e94\u7528\u7684\u6b65\u9aa4\u3002\u4f46\u662f\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528PC Windows\u6279\u5904\u7406\u811a\u672c\u4e2d\u7684\u8fd9\u4e9b\u793a\u4f8b\uff0c\u4f46\u5bf9\u67d0\u4e9b\u5b57\u7b26\u7684\u5904\u7406\u8fdb\u884c\u4e86\u4e00\u4e9b\u66f4\u6539\u3002\u7a0d\u52a0\u4fee\u6539\uff0c\u793a\u4f8b\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ecePHP\u811a\u672c\u4e2d\u7684\u7cfb\u7edf\u8c03\u7528\u8fd0\u884c\u3002\u6709\u5173\u5728\u8fd9\u4e9b\u66ff\u4ee3\u73af\u5883\u4e2d\u4f7f\u7528ImageMagick\u547d\u4ee4\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Windows\u7528\u6cd5\u548cAPI\u548c\u811a\u672c\u3002\u6b22\u8fce\u6295\u7a3f\u548c\u6d4b\u8bd5\u793a\u4f8b\u3002\u8fd8\u5e94\u8be5\u53ef\u4ee5\u4fee\u6539\u8fd9\u4e9b\u793a\u4f8b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\uff0c\u4ee5\u4f7f\u7528\u6765\u81eaPerl\u3001C\u3001C++\u3001Ruby\u3001PHP\u7b49\u8bed\u8a00\u7684IMAPI\u3002\u6211\u5efa\u8bae\u60a8\u5148\u5728\u547d\u4ee4\u884c\u4e0a\u5c1d\u8bd5\uff0c\u76f4\u5230\u6b63\u786e\u4e3a\u6b62\uff0c\u7136\u540e\u5c06\u64cd\u4f5c\u8f6c\u6362\u4e3a\u60a8\u6b63\u5728\u4f7f\u7528\u7684\u7279\u5b9aAPI\u3002\u867d\u7136\u8fd9\u79cd\u60c5\u51b5\u5728IM\u7248\u672c6\u4e2d\u6709\u4e86\u5f88\u5927\u7684\u6539\u5584\uff0c\u4f46\u662f\u547d\u4ee4\u884c\u5728\u4efb\u4f55\u65f6\u5019\u5b9e\u9645\u4e0a\u90fd\u53ea\u5904\u7406\u5355\u4e2a\u56fe\u50cf\u5e8f\u5217\u3002\u4f46\u662fAPI\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u53ef\u4ee5\u5355\u72ec\u64cd\u4f5c\u591a\u4e2a\u56fe\u50cf\u5e8f\u5217\uff0c\u4e5f\u53ef\u4ee5\u4e00\u8d77\u64cd\u4f5c\u591a\u4e2a\u56fe\u50cf\u5e8f\u5217\uff0c\u4ee5\u6267\u884c\u66f4\u590d\u6742\u7684\u64cd\u4f5c\u3002\u8fd9\u79cd\u80fd\u529b\u4f7f\u5f97\u4f7f\u7528IMAPI\u5b9e\u73b0\u8fd9\u4e9b\u793a\u4f8b\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u5e76\u6d88\u9664\u4e86\u5c06\u56fe\u50cf\u53e6\u5b58\u4e3a\u4e34\u65f6\u6587\u4ef6\u7684\u9700\u8981\uff0c\u6b63\u5982\u8bb8\u591a\u547d\u4ee4\u884c\u793a\u4f8b\u6240\u9700\u7684\u90a3\u6837\u3002\u4f7f\u7528API\u65f6\uff0c\u53ea\u9700\u5c06\u6c38\u4e45\u548c\u534a\u6c38\u4e45\u6620\u50cf\u4fdd\u5b58\u5230\u78c1\u76d8\u3002\u57fa\u672c\u4e0a\uff0c\u8ba9\u793a\u4f8b\u9875\u9762\u7ed9\u60a8\u4e00\u4e2a\u5f00\u59cb\uff0c\u8ba9\u60a8\u4e86\u89e3\u4f7f\u7528ImageMagick\u53ef\u4ee5\u5b9e\u73b0\u7684\u529f\u80fd\u3002\u90a3\u4e48\uff0cFo", "note_en": "(&#34;IM,&#34; for short)from the command line. However, they also illustrate what can be done usingthe ImageMagick Application Programming Interface (API). As such, these pagesshould be the first stop for IM users after reading the terse  CommandLine (CLI) Option manuals. Often, the same questions of &#34; How do I...&#34; gets asked, over and overagain on the network. The examples in these web pages, I hope, will answermost of the common &#34;how-to&#34; questions that arise.      Legend for symbols used within example pages...  Test Image Storage Directories... \u00a0 Small Images( image display), \u00a0\u00a0\u00a0 Photographs( fancy index). ImageMagick isdesigned for batch processing of images. That is, it allow you to combineimage processing operations in a script (shell, DOS, Perl, PHP, etc.) sothe operations can be applied to many images, or asa sub-system of some other tool, such as a Web application, videoprocessing tool, panorama generator, etc.  It is not a GUI imageeditor.\nImageMagick is, first of all, an image-to-image converter. That is what it wasoriginally designed to do. That is, it will convert an image in just aboutany image format (tell us if it can&#39;t) to any other image format. But it is also a library of  image processing algorithms. These can beaccess via the command line and shell/DOS scripts (which these example pagesdemonstrate), or via a large number of programming languages, such as C, C++,Perl, Ruby, PHP, etc. See:  ImageMagick APIs. Speed was never a major feature of IM, which places more emphasis on thequality of the images it generates. That is not to say that it can&#39;ttransform images in a reasonable amount of time. It&#39;s just not blindinglyfast. Because of this, IM can be slow to perform certain processingoperations, especially when attempting to compress images into image formatsthat have limited capabilities. ImageMagick concerns itself mainly with images in the form of a  rectangulararray of pixels, commonly called a &#34;raster.&#34; It will handle &#34;vector&#34;image formats like Postscript or PDF, but at the cost of converting thoseimages into a raster when loading them, and generating a vector image wrapperaround the raster when saving it. As a result, vector images are oftenprocessed badly when using the default settings. However, specific optionscan be used to improve this situation. See:  A word about vector image formats.  These pages were developed from, and are a continuation of, my  Collection of ImageMagick Hints and Tips page I first started in 1993,and placed on the new fangled world-wide-web making its appearance around thesame time. Information on many aspects of IM, and notes not included in thesepages, are still present in that document. However, while the present pageswere designed for you to look at, the hints and tips document was only for myown edification. So, it may be vague or chaotic in places. You are welcometo look at it, learn, and make comments on it. Other examples were grabbed or developed from answers to users&#39; questions onhe  IMForums, or contributed to me as solutions to various problems. I look forward to suggestions and e-mail from other IM users. Such e-mailgenerally results in improvements and expansions to these example pages. All examples are written for use on UNIX, and specifically GNU/Linux systems,using BASH scripting. As a consequence, some examples use shell &#39;for-do&#39;loops. Most examples use a backslash &#39; \\&#39; at the end of a line tocontinue that command on the next line. The longer commands are broken intoseparate lines to try to further highlight the steps being applied. However, you can still use these examples from  PC Windows batchscripts, with some changes to the handling of certain characters. Withsome slight adaptation, the examples can also be run directly from&#39; system&#39; calls in  PHP scripts. See  Windows Usage and  APIsand Scripting for more information on using the ImageMagick commands inthese alternative environments. Contributions and test examples are welcome. It should also be possible to adapt any of these examples to use the IM APIfrom languages such as Perl, C, C++, Ruby, PHP, and so on. I recommend tryingthings out on the command line first, until you get them right, and thenconverting the operations to the specific API you are using. Although the situation has improved enormously with IM version 6, the commandline really only deals with a single image sequence at any one time. However,APIs do not have this limitation, and allow you to manipulate multiple imagesequences, separately or together, to perform more complex operations. Thisability makes it simpler to implement these examples using the IM API, andremoves the need to save images as temporary files, as many of the commandline examples require. When using an API, only permanent and semi-permanentimages need be saved to disk. Basically, let the example pages give you a start, to let you see whatis possible with ImageMagick. Then, formulate what you want to do onthe command line, before coding the operations in scripts and APIcode, where it is harder to make extensive changes. I also recommend that you comment your API code,  heavily, adding thecommand line equivalents to what you are trying to do, if possible. That way,you can check and compare the results against those using the command line.This lets you debug problems that you may come across later, especially asimprovements are made to image processing in the Core ImageMagick Library. As much as possible, I try to use images built-into IM (such as&#34; logo:&#34; or &#34; rose:&#34;) as input images for IM examplecommands, or to generate input images using IM commands. I also often re-usethe output of previous commands in later examples. Because of this, youusually don&#39;t need to download any &#39;test&#39; images in order to try out theexamples yourself. However, such generated or built-in images are not always convenient. So,when I do use an external image, I tend to re-use that input image, or theresults of previous examples, for later examples in that section. Sometimes the original source image will be displayed or for larger imagesa link to the source image is provided. More commonly only the final resultingimage will be shown, as the input is well known or obvious. Almost all the IM example commands shown are executed in the same webdirectory in which they appear. That is, the command you see is the commandthat was actually used to generate the image. Because of this you can modifythe page&#39;s URL to download or view the input image(s) used by an example.Extra copies of the external source images have also been placed in the &#34; images&#34; and &#34; img_photos&#34;sub-directories. See also the example of a  Fancy Photo Index of those images. If text output or image information is produced by an example, it is saved toa text file, and an image of it is generated for display on the Web page.Selecting the text output image will link you to a copy of the actual textoutput by the command. In all these examples, selecting the output image should let you download theimage which was actually created by the example command. But be warned, notall browsers understand all image formats used.  By the way, most of the source images used in these examples come from  Anthony&#39;s IconLibrary, particularly the  background tiles,  largeclip-art, and  dragons sections of the library. (I like dragons!) This library actually predates the WWW. I created it in 1991, due to the lackof good, clean iconic images for use on the X Window System. The advent ofthe WWW has of course changed this, but my original library still exists andremains available as a source of images, even though it is not activelygrowing. Some specific images, and larger images, are contributed by the authors ofspecific examples. The authors of such examples are listed in the contributedsection, or at the bottom of the page. If you are looking for a specific image, I recommend using  Google Image Search (or similar) tofind something appropriate. You can, of course, convert or resize such imagesusing IM for your own purposes. However, you should be careful aboutcopyright if you plan to use such images commercially.     In many examples, I use an image in PNG format, such as that shown to theright of this text. The PNG image format supports images withsemi-transparent pixels, a feature few other image formats provide. It isalso a very well-understood image format and, as such, is usable by most oftoday&#39;s image programs and Web browsers. Some Web browsers, however, do NOT handle transparent PNG images correctly(most notably Microsoft Internet Explorer v6). Because of this, I generallyuse the JPEG and GIF formats for images on the Web, and only use the PNGformat when generating images with semi-transparent pixels, or when exactcolors are needed for later examples. To allow IE v6 browsers to display PNG images, I use a special &#39;style sheet&#39;using complex JavaScript. For information on this, see  PNG withtransparency for IE. Technically, this is only problem with IE, notImageMagick.  Display problems can also occur when displaying images on-screen. Because ofthis, I recommend using a command like the following to tilea &#39; checkerboard&#39; pattern underneath the image, to highlight anytransparent or semi-transparent pixels in it.\nThe image displayed in the above example is a special PNG-format  test image, which was generated using the shellscript &#34;  generate_test&#34;.Normally, the command would output the results to your display, not onto a Webpage like this. If you look carefully, you can see the checkerboard pattern though thesemi-transparent colors. However, the image, as a whole, is fully opaque. So,this technique should work on all displays, Web browsers, and image viewers.As of IM v6.0.2, the &#34; display&#34; program performs something likethis automatically. However, it does not seem to handle images using colortables (i.e., GIF) in this way. Using the &#34; x:&#34; output image format(as above) causes an image to be displayed directly to the screen, withouthaving to save it. See  Show Output Display for moreinformation.   The fonts I use in these examples are from a small collection of TrueType fontsI have found over the years, and saved for my own use. Some of these are undercopyright, so I cannot publish them online. You are, however, welcome to substitute other fonts that you have available.The examples should work (perhaps with some changes to image size) with anyappropriate font you have available on your system. Microsoft &#34;Arial&#34; font, oreven &#34;Times-BoldItalic&#34;, should work on most systems. To see what fonts are currently available to your version of IM, run thefollowing command... convert -list type # for IM older than v6.3.5-7 convert -list font # for newer versions\nWARNING: If the font requested is not found, ImageMagick used to silentlysubstitute a default font, typically Arial or Times. It still does this, but awarning is now given. So, test the font beforehand, to make sure that it isthe one you want, and not the default font. On my Linux system, I use a special Perl script, &#34;   imagick_type_gen&#34;, togenerate a file, &#34; type.xml&#34;, saved in the &#34; .magick&#34;sub-directory of my home directory. ImageMagick uses that file, which containsa font list in XML format, to find fonts. The script &#34; locate&#34;s(run &#34; updatedb&#34; first, if you have just added new fonts), anddescribes all the fonts available on my system. With this setup, I only needto specify the name of the font I want to use, and not the full path to aspecific font file. For example... # Instead of using the command... convert -font $HOME/lib/font/truetype/favorite/candice.ttf \\ -pointsize 72 label:Anthony anthony.gif # I can use the simpler font label... convert -font Candice -pointsize 72 label:Anthony anthony.gif\n Before IM v6.1.2-3, the &#34; type.xml&#34; file was named &#34; type.mgk&#34;. If you are using an earlier version of IM.\nThe fonts used in these IM examples are listed in a  . Mypersonal favorite is Candice, so it gets used quite a bit.  If you also like the &#39; Candice&#39; font, or any of the other fonts I use, grab them from  Free Fonts or  1001 Fonts .com.\n These example pages are in an on-going cycle of improvement. Generally, I findI stop adding to these pages for long periods of time, when my interests becomefocused on other things. Often these examples are re-built using the latest beta release of IM, allowingme to see changes and bugs that may appear in each version of IM, before it isgenerally released. However, the example images shown are what the given IMcommand produces on  my system. If you get something different, your IMis probably a much older version (with old bugs), or is not correctlyinstalled. Note that e-mailing me, or discussing some aspect of ImageMagick on the  IM Users Forum will generally result in newexamples, or whole new sections, being added to these examples. The morediscussion there is, the better the examples become. If you are doing anything interesting with IM, please share, and allow me toprovide examples of your technique to the rest of the IM community. Some of thebiggest advances in IM usage have come from users just like you.  A special thank you goes to Cristy, who has tirelessly spent months, upgrading,bug-fixing, and putting up with my off-the-wall suggestions... especially withregards to my major suggestions for the command line processing, parenthesis,image sequence operators, and GIF animation processing. He has done a marvelous job making Version 6 the best and most advanced commandline image processing program available. While most users will not showappreciation for that, I certainly do appreciate the effort he has put into IM.I also want to thank Gabe Schaffer, who has been most helpful in discussionsinvolving the JPEG format and library, affine matrix operators, and  MagickVector Graphics in general. And to Glenn Randers-Pehrson, who looks after the PNG coder module and has ainterest in Color Quantization and Dithering. He was the first to add&#39;halftone&#39; dithering to IM, which I later revised and extended further, toadded new dithers to the ordered dither configuration file. And finally, I want to thank the huge number of people with problems,suggestions, and solutions, who generally lurk on the  IM User Forum. Many now have their names ascontributors of ideas and suggestions throughout IM Examples. I also want to thank the people who regularly answer questions on the forums,such as &#39; Bonzo&#39;, and his web site  RubbleWebs, detailing use of IM commands from PHP scripts. Also &#39; scri8e&#39; and his Web site,  Moons Stars, for glitter and starhandling. Also a thank you goes to Pete &#39; el_supremo&#39; A special thanks goes to  Fred Weinhaus, a researcher from the early days of image processing, whowas a major help in the initial implementation of the  General Image Distortion Operator. You can seeFred&#39;s ImageMagick scripts on  Fred&#39;s ImageMagick Site, often as a proof of concept for future IMadditions. Also to Nicolas Robidoux, an expert in digital image processing, for reworkingthe  Elliptical Weighted AverageResampling, which vastly improves the output of  General Image Distortion. And finally to the many users of ImageMagick who, had allowed others to seethe IM commands they use as part of some project, either on the forums, or onthe web. You are all to be commended on your willingness and openness to shareyour findings.   Well enough &#34;Yadda, yadda, yadda.&#34; \u00a0 Go look at some of the examples.   Created: 7 November 2003  Updated: 30 November 2012  Author:  Anthony Thyssen, &lt;Anthony.Thyssen@gmail.com&gt; Examples Generated with:   Licence: IM Examples follows the same  Licence as ImageMagickURL:  http://www.imagemagick.org/Usage/", "posttime": "2020-08-10 13:10:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7528\u6cd5,imagemagick,\u56fe\u50cf", "title": "ImageMagick\u7528\u6cd5\u793a\u4f8b", "title_en": "Examples of ImageMagick Usage", "transed": 1, "url": "http://www.imagemagick.org/Usage/", "via": "", "real_tags": ["\u7528\u6cd5", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "0ddee4e23d7ef039dc29db87da63bafe.jpg", "infoid": 1017289, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c0f\u62a5\u98ce\u683c\u7684\u82f9\u679c\u65e5\u62a5\u521b\u59cb\u4eba\u56e0\u6d89\u5acc\u5916\u56fd\u4e32\u901a\u548c\u6b3a\u8bc8\u800c\u88ab\u62d8\u7559\u3002\u4ed6\u7684\u4e24\u4e2a\u513f\u5b50\u548c\u8be5\u62a5\u7684\u4e00\u4e9b\u9ad8\u7ea7\u7ba1\u7406\u4eba\u5458\u4e5f\u5728\u8b66\u65b9\u7684\u626b\u8361\u884c\u52a8\u4e2d\u88ab\u62d8\u7559\u3002", "note_en": "Founder of the tabloid-style Apple Daily was detained on suspicion of foreign collusion and fraud. His two sons and some of the newspaper\u2019s senior executives were also detained in sweeping police operation.", "posttime": "2020-08-10 13:10:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apple,\u82f9\u679c,\u88ab\u6355,\u8b66\u65b9", "title": "\u9999\u6e2f\u82f9\u679c\u65e5\u62a5\u8001\u677f\u88ab\u6355\uff0c\u516c\u53f8\u6839\u636e\u65b0\u56fd\u5bb6\u5b89\u5168\u6cd5\u906d\u5230\u7a81\u51fb\u641c\u67e5", "title_en": "Hk Apple Daily Owner Arrested, Company Raided Under New National Security Law", "transed": 1, "url": "https://www.scmp.com/news/hong-kong/law-and-crime/article/3096679/hong-kong-national-security-law-media-mogul-jimmy-lai", "via": "", "real_tags": ["apple", "\u82f9\u679c", "\u88ab\u6355", "\u8b66\u65b9"]}, {"category": "", "categoryclass": "", "imagename": "52dc0c73bc51e79fa53a40d77779dfa0.jpg", "infoid": 1017288, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea20\u4e16\u7eaa\u521d\u4ee5\u6765\uff0c\u8d1d\u5c14\u7535\u8bdd\u5b9e\u9a8c\u5ba4(\u6216\u79f0\u8d1d\u5c14\u5b9e\u9a8c\u5ba4)\u4e00\u76f4\u662f\u6280\u672f\u8bd5\u9a8c\u548c\u53d8\u9769\u7684\u4e3b\u8981\u6765\u6e90\u3002\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u8d5e\u52a9\u7684\u7814\u7a76\u8fdc\u8fdc\u8d85\u51fa\u4e86\u5176\u6700\u521d\u7684\u91cd\u70b9--\u7535\u8bdd--\u7684\u8303\u56f4\u3002\u4ece\u7535\u8bdd\u5230\u96f7\u8fbe\u518d\u5230\u8ba1\u7b97\u673a\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u79d1\u5b66\u5bb6\u4eec\u53c2\u4e0e\u4e8620\u4e16\u7eaa\u6700\u91cd\u8981\u7684\u53d1\u660e\u3002\n\u523020\u4e16\u7eaa20\u5e74\u4ee3\u521d\uff0c\u7814\u7a76\u5de5\u4f5c\u5df2\u7ecf\u53d1\u5c55\u5f97\u5982\u6b64\u4e4b\u5927-\u52301924\u5e74\uff0c\u8d85\u8fc73600\u540d\u5458\u5de5-\u7ba1\u7406\u5c42\u51b3\u5b9a\u5c06\u5176\u62c6\u5206\u5230\u81ea\u5df1\u7684\u7ec4\u7ec7\u4e2d\u3002\u8fd9\u5bb6\u65b0\u7684\u5b50\u516c\u53f8\u8d1d\u5c14\u7535\u8bdd\u5b9e\u9a8c\u5ba4\u516c\u53f8\u30021925\u5e741\u67081\u65e5\u5f00\u59cb\u8fd0\u8425\u3002\u5b83\u7531\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u548c\u897f\u65b9\u7535\u6c14(Western Electric)\u5171\u540c\u62e5\u6709\uff0c\u5360\u636e\u4e86\u7ebd\u7ea6\u5e02\u73b0\u6709\u7684\u7814\u7a76\u5927\u697c\u3002\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u6b63\u5728\u6210\u4e3a\u4e16\u754c\u4e0a\u6700\u5927\u7684\u5de5\u4e1a\u7814\u7a76\u5b9e\u9a8c\u5ba4\u3002\n\u572820\u4e16\u7eaa30\u5e74\u4ee3\u548c\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u7ed3\u675f\u671f\u95f4\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7ee7\u7eed\u6269\u5927\u3002\u8be5\u516c\u53f8\u5728\u65b0\u6cfd\u897f\u5dde\u5efa\u7acb\u4e86\u65b0\u7684\u7814\u7a76\u8bbe\u65bd\uff0c\u90a3\u91cc\u7684\u5f00\u9614\u571f\u5730\u4ecd\u7136\u4e30\u5bcc\u800c\u5ec9\u4ef7\uff0c\u65e0\u7ebf\u7535\u7814\u7a76\u53ef\u4ee5\u5728\u6ca1\u6709\u7ebd\u7ea6\u5e02\u5e72\u6270\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002\u5784\u65ad\u7535\u8bdd\u670d\u52a1\u7684\u7f8e\u56fd\u7535\u8bdd\u7535\u62a5\u516c\u53f8(AT&amp\uff1bT)\u62e5\u6709\u5de8\u5927\u7684\u8d44\u6e90\uff0c\u8fd9\u4f7f\u5f97\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u80fd\u591f\u8fdb\u884c\u53ea\u4e0e\u666e\u901a\u7535\u8bdd\u670d\u52a1\u677e\u6563\u8054\u7cfb\u7684\u57fa\u7840\u7814\u7a76\u3002\u4f8b\u5982\uff0c1933\u5e74\uff0c\u5728\u65b0\u6cfd\u897f\u5dde\u970d\u59c6\u5fb7\u5c14\u8bbe\u65bd\u5de5\u4f5c\u7684\u5361\u5c14\u00b7\u8a79\u65af\u57fa(Karl Jansky)\u53d1\u73b0\u4e86\u5c04\u7535\u5929\u6587\u5b66\u3002\u53e6\u4e00\u4e2a\u8d8b\u52bf\u662f\u4e0e\u519b\u65b9\u66f4\u5bc6\u5207\u7684\u5408\u4f5c\uff0c\u8fd9\u79cd\u5408\u4f5c\u59cb\u4e8e\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\uff0c\u5e76\u6301\u7eed\u523020\u4e16\u7eaa30\u5e74\u4ee3\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u5f00\u59cb\u7814\u7a76\u96f7\u8fbe\u548c\u519b\u4e8b\u901a\u4fe1\u7cfb\u7edf\u3002\u5f53\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u6765\u4e34\u65f6\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u53d1\u660e\u6216\u6539\u8fdb\u4e86\u8bb8\u591a\u519b\u4e8b\u7cfb\u7edf\uff0c\u5982\u53cc\u5411\u65e0\u7ebf\u7535\u3001\u8fd1\u8ddd\u79bb\u5f15\u4fe1\u3001\u534a\u5bfc\u4f53\u5668\u4ef6\u3001\u96f7\u8fbe\u3001\u58f0\u7eb3\u3001\u8ba1\u7b97\u673a\u3001\u201c\u706b\u7bad\u7b52\u201d\u548c\u7b2c\u4e00\u6279\u52a0\u5bc6\u901a\u4fe1\u7cfb\u7edf\u3002\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u5e0c\u52a0\u5229\uff0c\u4f7f\u7f8e\u56fd\u603b\u7edf\u5bcc\u5170\u514b\u6797\u00b7\u7f57\u65af\u798f\u548c\u82f1\u56fd\u9996\u76f8\u6e29\u65af\u987f\u00b7\u4e18\u5409\u5c14\u80fd\u591f\u5728\u5927\u897f\u6d0b\u5f7c\u5cb8\u5b9a\u671f\u8fdb\u884c\u7535\u8bdd\u4ea4\u8c08\u3002\n\u5728\u6218\u4e89\u7ed3\u675f\u65f6\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u529b\u91cf\u8fbe\u5230\u4e86\u9876\u5cf0\u3002\u4ece20\u4e16\u7eaa40\u5e74\u4ee3\u672b\u523070\u5e74\u4ee3\u672b\uff0c\u5b83\u4e00\u76f4\u662f\u4e16\u754c\u4e0a\u6700\u5927\u3001\u4e5f\u8bb8\u662f\u6700\u5177\u521b\u9020\u6027\u7684\u5de5\u4e1a\u5b9e\u9a8c\u5ba4\uff0c\u65e0\u53ef\u4e89\u8bae\u5730\u5360\u636e\u7740\u7edf\u6cbb\u5730\u4f4d\u3002\u5b83\u7684\u5de5\u7a0b\u5e08\u548c\u79d1\u5b66\u5bb6\u53d1\u660e\u6216\u5b9e\u73b0\u4e86\u8bb8\u591a\u6280\u672f\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u6676\u4f53\u7ba1\u53ca\u5176\u8bb8\u591a\u91cd\u8981\u7684\u53d8\u79cd\u3002\u867d\u7136\u96c6\u6210\u7535\u8def\u662f\u5728\u522b\u5904\u53d1\u660e\u7684\uff0c\u4f46\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u53d1\u660e\u7684\u5efa\u9020\u6280\u672f\u4e3a\u5b83\u5efa\u7acb\u4e86\u8bb8\u591a\u5fc5\u8981\u7684\u5148\u9a71\u3002\u540c\u6837\u7684\u9053\u7406\u4e5f\u9002\u7528\u4e8e\u5149\u7ea4\u4f20\u8f93\u3001\u7535\u5b50\u4ea4\u6362\u7cfb\u7edf\u3001\u8702\u7a9d\u7535\u8bdd\u3001\u536b\u661f\u901a\u4fe1\u3001\u592a\u9633\u80fd\u4ee5\u53ca\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u5176\u4ed6\u6280\u672f\u3002\n\u867d\u7136\u5b83\u4eec\u7684\u6240\u6709\u5143\u7d20\u5e76\u4e0d\u90fd\u662f\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u53d1\u660e\u7684\uff0c\u4f46\u6b63\u662f\u5728\u90a3\u91cc\uff0c\u6f2b\u957f\u800c\u6602\u8d35\u7684\u5f00\u53d1\u8fc7\u7a0b\u4f7f\u5b83\u4eec\u8d70\u5411\u6210\u719f\u3002\u867d\u7136\u6709\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u5931\u8d25\uff0c\u5982\u201c\u53ef\u89c6\u7535\u8bdd\u201d\u7cfb\u7edf\uff0c\u4f46\u4e5f\u6709\u8bb8\u591a\u53d1\u660e\uff0c\u5176\u4e2d\u4e00\u4e9b\u5728\u5f53\u65f6\u9c9c\u4e3a\u4eba\u77e5\uff0c\u540e\u6765\u53d8\u5f97\u975e\u5e38\u91cd\u8981\u3002\u7535\u8377\u8026\u5408\u5668\u4ef6\u6216CCD\uff0c\u73b0\u5728\u666e\u904d\u7528\u4e8e\u6570\u7801\u76f8\u673a\u3001\u6444\u50cf\u673a\u3001\u54c8\u52c3\u671b\u8fdc\u955c\u548c\u5176\u4ed6\u5730\u65b9\uff0c\u5c31\u662f\u8fd9\u6837\u7684\u53d1\u5c55\u3002\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u5de5\u7a0b\u5e08\u5a01\u62c9\u5fb7\u00b7\u535a\u4f0a\u5c14(Willard Boyle)\u548c\u4e54\u6cbb\u00b7\u53f2\u5bc6\u65af(George Smith)\u572820\u4e16\u7eaa70\u5e74\u4ee3\u53d1\u660e\u4e86\u5b83\u3002\n20\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u52b3\u4f26\u65af\u00b7\u54c8\u96f7\u00b7\u5362\u5361\u59c6(Lawrence Harley Luckham)\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4(Bell Labs)\u5de5\u4f5c\uff0c\u6709\u4e00\u5929\uff0c\u4ed6\u5e26\u7740\u76f8\u673a\u53bb\u4e0a\u73ed\uff1a\u201c\u572860\u5e74\u4ee3\u672b\uff0c\u6211\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u5de5\u4f5c\u4e86\u51e0\u5e74\uff0c\u7ba1\u7406\u7740\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\uff0c\u5e76\u5f00\u53d1\u4e86\u4e00\u79cd\u8d85\u9ad8\u901f\u4fe1\u606f\u68c0\u7d22\u7cfb\u7edf\u3002\u90a3\u662f\u5987\u5973\u548c\u5927\u578b\u8ba1\u7b97\u673a\u4e0a\u6709\u8702\u7a9d\u5934\u53d1\u7684\u65e5\u5b50\u3002\u6709\u4e00\u5929\uff0c\u6211\u5e26\u7740\u76f8\u673a\u53bb\u4e0a\u73ed\uff0c\u62cd\u4e0b\u4e86\u4e0b\u9762\u7684\u7167\u7247\u3002\u6211\u7684\u5458\u5de5\u5f88\u68d2\uff0c\u9664\u4e86\u7a0b\u5e8f\u5458\u90fd\u662f\u7537\u6027\u5916\uff0c\u5927\u591a\u6570\u90fd\u662f\u5973\u6027\u3002\u7531\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u90a3\u5929\u53ea\u6709\u4e00\u4e2a\u4eba\u5728\u9644\u8fd1\u62cd\u7167\u3002\u201c\u3002\u8fd9\u91cc\u663e\u793a\u7684\u8fd9\u4e9b\u7167\u7247\u662f\u62c9\u91cc\u00b7\u52d2\u5361\u59c6\u62cd\u6444\u7684\u3002\u6240\u6709\u7684\u5b57\u5e55\u90fd\u662f\u539f\u521b\u7684\u3002", "note_en": "Since the early 1900s Bell Telephone Laboratories, or Bell Labs, has been a major source of technological experimentation and change. Bell Labs has sponsored research far beyond the limits of its original focus, the telephone. From telephones to radar to computers, the scientists at Bell Labs have had a hand in the most important inventions of the 20th century.\n By the early 1920s the research effort had grown so large\u2014over 3600 employees by 1924\u2014management decided to split it off into its own organization. This new subsidiary Bell Telephone Laboratories Inc. began operations on January 1, 1925. It was owned jointly by AT&amp;T and Western Electric, and occupied the existing research building in New York City. Bell Labs was on its way to becoming the world\u2019s largest industrial research laboratory.\n In the 1930s and through the end of World War II, Bell Labs continued to expand. The company established new research facilities in New Jersey, where open land was still plentiful and cheap, and radio research could be conducted free of the interference found in New York City. The huge resources of AT&amp;T, which had a monopoly on telephone service, enabled Bell Labs to undertake fundamental research that had only loose ties to ordinary telephone service. In 1933, for example, Karl Jansky, working at the Holmdel, New Jersey facility, discovered radio astronomy. Another trend was closer cooperation with the military, which had begun during World War I, and which continued in the 1930s as Bell Labs began working on radar and military communication systems. When World War II came, Bell Labs invented or improved numerous military systems, such as the two-way radio, proximity fuses, semiconductor devices, radar, sonar, computers, the \u201cbazooka,\u201d and the first encrypted communications systems. This system, Sigaly, enabled US President Franklin Roosevelt and British Prime Minister Winston Churchill to hold regular telephone conversations across the Atlantic.\n At the end of the war Bell Labs was at the peak of its power. From the late 1940s through the late 1970s, it reigned unchallenged as the largest and perhaps most inventive industrial laboratory in the world. Its engineers and scientists invented or brought to fruition numerous technologies, including the first transistor and many of its important variations. Although the integrated circuit was invented elsewhere, construction techniques invented at Bell Labs established many of the necessary precursors to it. The same could be said for fiber optic transmission, electronic switching systems, cellular telephony, satellite communication, solar power, and other technologies we use today.\n Although not all of their elements were invented at Bell Labs, it was there that the long and incredibly expensive development process brought them to maturity. And while there were notable failures, such as the \u201cPicturephone\u201d system, there were numerous inventions, some little-known at the time, which later became very important. The Charge-Coupled Device or CCD, now universally used in digital cameras, video cameras, the Hubble telescope, and elsewhere, was one such development. Bell Labs engineers Willard Boyle and George Smith invented it in the 1970s.\n In the 1960s,  Lawrence Harley Luckham worked at Bell Labs and, one day, he took a camera to work:  \u201cIn the late \u201960\u2019s I worked for Bell Labs for a few years managing a data center and developing an ultra high speed information retrieval system. It was the days of beehive hair on women and big mainframe computers. One day I took a camera to work and shot the pictures below. I had a great staff, mostly women except for the programmers who were all men. For some reason only one of them was around for the pictures that day\u201d. These photographs shown here are taken by Larry Luckham. All of the captions are original.", "posttime": "2020-08-10 12:19:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d1d\u5c14\u5b9e\u9a8c\u5ba4,bell", "title": "20\u4e16\u7eaa60\u5e74\u4ee3\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u6570\u636e\u4e2d\u5fc3\u7684\u7167\u7247", "title_en": "Photos from Bell Labs Datacenter in 1960s", "transed": 1, "url": "https://rarehistoricalphotos.com/inside-bell-labs-datacenter-1960s/", "via": "", "real_tags": ["\u8d1d\u5c14\u5b9e\u9a8c\u5ba4", "bell"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1017285, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u5230\u5bfc\u822a\u8df3\u5230\u641c\u7d22\u7b2c\u4e09\u6ce2\u662f\u52a0\u5dde\u9ad8\u4e2d\u5386\u53f2\u8001\u5e08\u7f57\u6069\u00b7\u743c\u65af\u4e8e1967\u5e74\u521b\u7acb\u7684\u4e00\u9879\u5b9e\u9a8c\u6027\u793e\u4f1a\u8fd0\u52a8\uff0c\u76ee\u7684\u662f\u89e3\u91ca\u5fb7\u56fd\u6c11\u4f17\u5982\u4f55\u63a5\u53d7\u4e8c\u6218\u671f\u95f4\u7eb3\u7cb9\u653f\u6743\u7684\u884c\u52a8\u3002[1][2]\u5f53\u743c\u65af\u5728\u4ed6\u7684\u5f53\u4ee3\u4e16\u754c\u5386\u53f2\u8bfe\u4e0a\u6559\u4ed6\u7684\u5b66\u751f\u6709\u5173\u7eb3\u7cb9\u5fb7\u56fd\u7684\u77e5\u8bc6\u65f6\uff0c\u4ed6\u53d1\u73b0\u5f88\u96be\u89e3\u91ca\u5fb7\u56fd\u4eba\u6c11\u5982\u4f55\u63a5\u53d7\u7eb3\u7cb9\u7684\u884c\u4e3a\uff0c\u4e8e\u662f\u51b3\u5b9a\u53d1\u8d77\u4e00\u573a\u793e\u4f1a\u8fd0\u52a8\uff0c\u4ee5\u5c55\u793a\u6cd5\u897f\u65af\u4e3b\u4e49\u7684\u5438\u5f15\u529b\u3002\u5728\u4e94\u5929\u7684\u65f6\u95f4\u91cc\uff0c\u743c\u65af--SDS\u6210\u5458\u3001\u5e93\u4f2f\u5229\u8054\u5408\u5b66\u751f\u8fd0\u52a8\u53d1\u8d77\u4eba[4]\u548c\u9ed1\u8c79\u652f\u6301\u8005[5]--\u5728\u4ed6\u7684\u6559\u5ba4\u91cc\u8fdb\u884c\u4e86\u4e00\u7cfb\u5217\u5f3a\u8c03\u7eaa\u5f8b\u548c\u793e\u533a\u7684\u7ec3\u4e60\uff0c\u610f\u5728\u6a21\u4eff\u7eb3\u7cb9\u8fd0\u52a8\u7684\u67d0\u4e9b\u7279\u5f81\u3002\u968f\u7740\u8fd9\u573a\u8fd0\u52a8\u5728\u4ed6\u7684\u73ed\u7ea7\u4e4b\u5916\u53d1\u5c55\u58ee\u5927\uff0c\u5e76\u5f00\u59cb\u6709\u6570\u767e\u4eba\u53c2\u52a0\uff0c\u743c\u65af\u5f00\u59cb\u89c9\u5f97\u8fd9\u573a\u8fd0\u52a8\u5df2\u7ecf\u5931\u63a7\u4e86\u3002\u4ed6\u8bf4\u670d\u5b66\u751f\u4eec\u53c2\u52a0\u4e00\u4e2a\u96c6\u4f1a\uff0c\u4ed6\u5728\u96c6\u4f1a\u4e0a\u58f0\u79f0\uff0c\u8bfe\u5802\u9879\u76ee\u662f\u5168\u56fd\u8fd0\u52a8\u7684\u4e00\u90e8\u5206\uff0c\u7b2c\u4e09\u6ce2\u603b\u7edf\u5019\u9009\u4eba\u7684\u5ba3\u5e03\u5c06\u5728\u7535\u89c6\u4e0a\u64ad\u51fa\u3002\u5b66\u751f\u4eec\u4e00\u5230\uff0c\u5c31\u770b\u5230\u4e86\u4e00\u6761\u7a7a\u767d\u9891\u9053\u3002\u743c\u65af\u544a\u8bc9\u4ed6\u7684\u5b66\u751f\u4eec\uff0c\u8fd9\u573a\u8fd0\u52a8\u7684\u771f\u5b9e\u6027\u8d28\u662f\u6cd5\u897f\u65af\u4e3b\u4e49\u7684\u5b9e\u9a8c\uff0c\u5e76\u5411\u4ed6\u4eec\u5c55\u793a\u4e86\u4e00\u90e8\u8ba8\u8bba\u7eb3\u7cb9\u5fb7\u56fd\u884c\u52a8\u7684\u77ed\u7247\u3002[6]\u3002\n\u8fd9\u9879\u5b9e\u9a8c\u4e8e1967\u5e744\u6708\u7684\u7b2c\u4e00\u5468\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5e15\u6d1b\u963f\u5c14\u6258\u7684\u5e93\u4f2f\u5229\u9ad8\u4e2d(Cubberley High School)\u8fdb\u884c\u3002[1]\u743c\u65af\u53d1\u73b0\u81ea\u5df1\u65e0\u6cd5\u5411\u4ed6\u7684\u5b66\u751f\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5fb7\u56fd\u4eba\u4f1a\u58f0\u79f0\u5bf9\u5927\u5c60\u6740\u4e00\u65e0\u6240\u77e5\uff0c\u4e8e\u662f\u51b3\u5b9a\u5411\u4ed6\u4eec\u6f14\u793a\u8fd9\u4e00\u70b9\u3002[6]\u743c\u65af\u53d1\u8d77\u4e86\u4e00\u573a\u540d\u4e3a\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u7684\u8fd0\u52a8\uff0c\u5e76\u544a\u8bc9\u4ed6\u7684\u5b66\u751f\uff0c\u8fd9\u573a\u8fd0\u52a8\u65e8\u5728\u6d88\u9664\u6c11\u4e3b\u3002[1]\u6c11\u4e3b\u5f3a\u8c03\u4e2a\u6027\u7684\u60f3\u6cd5\u88ab\u8ba4\u4e3a\u662f\u4e00\u79cd\u7f3a\u9677\uff0c\u743c\u65af\u5728\u5176\u5ea7\u53f3\u94ed\u4e2d\u5f3a\u8c03\u4e86\u8fd9\u4e00\u8fd0\u52a8\u7684\u4e3b\u8981\u89c2\u70b9\uff1a\u901a\u8fc7\u7eaa\u5f8b\u83b7\u5f97\u529b\u91cf\uff0c\u901a\u8fc7\u793e\u533a\u83b7\u5f97\u529b\u91cf\uff0c\u901a\u8fc7\u884c\u52a8\u83b7\u5f97\u529b\u91cf\uff0c\u901a\u8fc7\u9a84\u50b2\u83b7\u5f97\u529b\u91cf\u3002\n\u5f53\u65f6\uff0c\u8fd9\u4e2a\u5b9e\u9a8c\u6ca1\u6709\u5f88\u597d\u7684\u8bb0\u5f55\u3002\u5728\u5f53\u4ee3\u7684\u8d44\u6599\u4e2d\uff0c\u8fd9\u4e2a\u5b9e\u9a8c\u53ea\u5728\u5e93\u4f2f\u5229\u9ad8\u4e2d\u7684\u5b66\u751f\u62a5\u7eb8\u201c\u5e93\u4f2f\u5229\u5361\u7279\u8499\u7279\u62a5\u201d\u4e2d\u88ab\u63d0\u53ca\u3002\u8fd9\u53ea\u5728\u4e24\u671f\u4e2d\u7b80\u8981\u63d0\u5230\uff0c[7][3]\uff0c\u53e6\u5916\u4e00\u671f\u8bba\u6587\u5728\u7ed3\u8bba\u65f6\u6709\u4e00\u7bc7\u66f4\u957f\u7684\u5173\u4e8e\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u6587\u7ae0\u3002[1]\u743c\u65af\u672c\u4eba\u5728\u5927\u7ea69\u5e74\u540e\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u8be6\u7ec6\u63cf\u8ff0[6]\uff0c\u968f\u540e\u53c8\u53d1\u8868\u4e86\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u5b9e\u9a8c\u7684\u6587\u7ae0\uff0c\u5305\u62ec\u5bf9\u743c\u65af\u548c\u6700\u521d\u7684\u5b66\u751f\u7684\u4e00\u4e9b\u91c7\u8bbf\u3002[2]\u3002\n\u7f57\u6069\u00b7\u743c\u65af(Ron Jones)\u5199\u9053\uff0c\u4ed6\u5728\u5b9e\u9a8c\u7684\u7b2c\u4e00\u5929\u5c31\u5f00\u59cb\u4e86\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u6b63\u786e\u7684\u5ea7\u4f4d\u548c\u5bf9\u5b66\u751f(\u4ed6\u4eec\u6b63\u5728\u8bfb\u5927\u56db)\u8fdb\u884c\u5e7f\u6cdb\u7684\u8bad\u7ec3\u3002[6]\u7136\u540e\uff0c\u4ed6\u5f00\u59cb\u6267\u884c\u4e25\u683c\u7684\u8bfe\u5802\u7eaa\u5f8b\uff0c\u6210\u4e3a\u4e00\u4e2a\u5a01\u6743\u4eba\u7269\uff0c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u8bfe\u5802\u6548\u7387\u3002\n\u7b2c\u4e00\u5929\u7684\u4f1a\u8bae\u7ed3\u675f\u4e86\uff0c\u53ea\u6709\u51e0\u6761\u89c4\u5219\uff0c\u76f8\u5f53\u7b80\u5355\uff0c\u6253\u7b97\u6210\u4e3a\u4e00\u5929\u7684\u5b9e\u9a8c\u3002\u5728\u7b2c\u4e8c\u58f0\u94c3\u58f0\u54cd\u8d77\u4e4b\u524d\uff0c\u5b66\u751f\u4eec\u5fc5\u987b\u7acb\u6b63\u5c31\u5ea7\uff0c\u5fc5\u987b\u7ad9\u8d77\u6765\u63d0\u95ee\u6216\u56de\u7b54\u95ee\u9898\uff0c\u5e76\u4e14\u5fc5\u987b\u7528\u4e09\u4e2a\u5b57\u6216\u66f4\u5c11\u7684\u7bc7\u5e45\u56de\u7b54\u95ee\u9898\uff0c\u5e76\u4e14\u8981\u6c42\u6bcf\u53e5\u8bdd\u90fd\u8981\u6709\u743c\u65af\u5148\u751f\u7684\u5f00\u573a\u767d\u3002[6]\u3002\n\u7b2c\u4e8c\u5929\uff0c\u4ed6\u6210\u529f\u5730\u5c06\u4ed6\u7684\u5386\u53f2\u8bfe\u878d\u5165\u4e86\u4e00\u4e2a\u5177\u6709\u81f3\u9ad8\u65e0\u4e0a\u7684\u7eaa\u5f8b\u6027\u548c\u793e\u533a\u611f\u7684\u5c0f\u7ec4\u3002\u743c\u65af\u5c06\u4ed6\u7684\u8fd0\u52a8\u547d\u540d\u4e3a\u201c\u7b2c\u4e09\u6ce2\u201d\uff0c\u8fd9\u662f\u57fa\u4e8e\u4e00\u7cfb\u5217\u6d6a\u6f6e\u4e2d\u7684\u7b2c\u4e09\u6ce2\u662f\u6700\u5f3a\u7684\u8fd9\u4e00\u5047\u60f3\u4e8b\u5b9e\u3002[6]\u743c\u65af\u521b\u9020\u4e86\u4e00\u79cd\u656c\u793c\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u53ea\u676f\u72b6\u7684\u624b\u7a7f\u8fc7\u80f8\u90e8\uff0c\u4f38\u5411\u5bf9\u9762\u80a9\u8180\uff0c\u7c7b\u4f3c\u4e8e\u5e0c\u7279\u52d2\u656c\u793c\uff0c[1]\u5e76\u547d\u4ee4\u73ed\u7ea7\u6210\u5458\u5373\u4f7f\u5728\u8bfe\u5802\u5916\u4e5f\u8981\u76f8\u4e92\u656c\u793c\u3002\u4ed6\u4eec\u90fd\u9075\u5b88\u4e86\u8fd9\u4e2a\u547d\u4ee4\u3002[6]\u3002\n\u8fd9\u4e2a\u5b9e\u9a8c\u6709\u4e86\u81ea\u5df1\u7684\u751f\u547d\uff0c\u6765\u81ea\u5168\u6821\u5404\u5730\u7684\u5b66\u751f\u90fd\u52a0\u5165\u4e86\u8fdb\u6765\uff1a\u4e00\u4e9b\u6ca1\u6709\u4e0a\u5386\u53f2\u8bfe\u4f46\u6709\u7a7a\u95f2\u65f6\u95f4\u7684\u5b66\u751f\u51b3\u5b9a\u52a0\u5165\u8fd9\u4e2a\u73ed\u7ea7\u3002\u7b2c\u4e09\u5929\uff0c\u73ed\u7ea7\u4ece\u6700\u521d\u768430\u4eba\u6269\u5927\u523043\u4eba\u3002\u6240\u6709\u7684\u5b66\u751f\u90fd\u5728\u5b66\u672f\u6280\u80fd\u4e0a\u6709\u4e86\u5f88\u5927\u7684\u63d0\u9ad8\uff0c\u5e76\u8868\u73b0\u51fa\u4e86\u5de8\u5927\u7684\u52a8\u529b\u3002\u6240\u6709\u7684\u5b66\u751f\u90fd\u5f97\u5230\u4e86\u4f1a\u5458\u5361\uff0c\u4ed6\u4eec\u6bcf\u4e2a\u4eba\u90fd\u6536\u5230\u4e86\u4e00\u9879\u7279\u6b8a\u7684\u4efb\u52a1\uff0c\u6bd4\u5982\u8bbe\u8ba1\u7b2c\u4e09\u6ce2\u6a2a\u5e45\uff0c\u963b\u6b62\u975e\u4f1a\u5458\u8fdb\u5165\u73ed\u7ea7\uff0c\u7b49\u7b49\u3002\u743c\u65af\u6307\u5bfc\u5b66\u751f\u5982\u4f55\u62db\u52df\u65b0\u6210\u5458\uff0c\u5230\u5f53\u5929\u7ed3\u675f\u65f6\uff0c\u8be5\u8fd0\u52a8\u5df2\u6709200\u591a\u540d\u53c2\u4e0e\u8005\u3002[6]\u743c\u65af\u611f\u5230\u60ca\u8bb6\u7684\u662f\uff0c\u5f53\u8fd0\u52a8\u7684\u5176\u4ed6\u6210\u5458\u4e0d\u9075\u5b88\u89c4\u5219\u65f6\uff0c\u4e00\u4e9b\u5b66\u751f\u5f00\u59cb\u5411\u4ed6\u62a5\u544a\u3002[6]\u3002\n\u5728\u5b9e\u9a8c\u7684\u7b2c\u56db\u5929\uff0c\u743c\u65af\u51b3\u5b9a\u7ec8\u6b62\u8fd9\u573a\u8fd0\u52a8\uff0c\u56e0\u4e3a\u5b83\u6b63\u5728\u8131\u79bb\u4ed6\u7684\u63a7\u5236\u3002\u5b66\u751f\u4eec\u8d8a\u6765\u8d8a\u591a\u5730\u53c2\u4e0e\u5230\u8fd9\u4e2a\u9879\u76ee\u4e2d\u6765\uff0c\u4ed6\u4eec\u7684\u7eaa\u5f8b\u548c\u5bf9\u9879\u76ee\u7684\u5fe0\u8bda\u5ea6\u975e\u5e38\u7a81\u51fa\u3002\u4f55\u963f\u8bfa\n\u5b66\u751f\u4eec\u770b\u5230\u7684\u4e0d\u662f\u4ed6\u4eec\u9886\u5bfc\u4eba\u7684\u7535\u89c6\u8bb2\u8bdd\uff0c\u800c\u662f\u4e00\u4e2a\u7a7a\u9891\u9053\u3002\u7b49\u4e86\u51e0\u5206\u949f\u540e\uff0c\u743c\u65af\u5ba3\u5e03\uff0c\u4ed6\u4eec\u662f\u6cd5\u897f\u65af\u4e3b\u4e49\u5b9e\u9a8c\u7684\u4e00\u90e8\u5206\uff0c\u4ed6\u4eec\u90fd\u5fc3\u7518\u60c5\u613f\u5730\u521b\u9020\u4e86\u4e00\u79cd\u4f18\u8d8a\u611f\uff0c\u5c31\u50cf\u7eb3\u7cb9\u5fb7\u56fd\u65f6\u671f\u7684\u5fb7\u56fd\u516c\u6c11\u4e00\u6837\u3002\u7136\u540e\uff0c\u4ed6\u7ed9\u4ed6\u4eec\u64ad\u653e\u4e86\u4e00\u90e8\u5173\u4e8e\u7eb3\u7cb9\u653f\u6743\u7684\u7535\u5f71\uff0c\u4ee5\u7ed3\u675f\u5b9e\u9a8c\u3002[6]\u3002\n2010\u5e7410\u670810\u65e5\uff0c\u7eaa\u5f55\u7247\u300a\u6559\u6848\u300b\u901a\u8fc7\u5bf9\u539f\u8457\u5b66\u751f\u548c\u8001\u5e08\u7684\u91c7\u8bbf\u91cd\u8ff0\u4e86\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u7684\u6545\u4e8b\uff0c\u5728\u7c73\u5c14\u8c37\u7535\u5f71\u8282\u4e0a\u9996\u6b21\u4eae\u76f8\u3002[8]\u5b83\u662f\u7531\u83f2\u5229\u666e\u00b7\u5c3c\u5c14(Philip Neel)\u5236\u4f5c\u7684\uff0c\u4ed6\u662f\u743c\u65af\u4ee5\u524d\u7684\u5b66\u751f\u4e4b\u4e00\u3002\n\u8be5\u5b9e\u9a8c\u7684\u4e8b\u4ef6\u88ab\u6539\u7f16\u62101981\u5e74\u7684\u7f8e\u56fd\u7535\u89c6\u7279\u8f91\u201c\u6d6a\u6f6e\u201d\u3002\u8fd9\u6784\u6210\u4e86\u6258\u5fb7\u00b7\u65af\u7279\u62c9\u745f(Todd Strasser)\u540c\u540d\u9752\u5e74\u5c0f\u8bf4\u7684\u57fa\u7840\uff0c\u4ed6\u5c06\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u7684\u6545\u4e8b\u5e26\u5165\u4e86\u4e00\u4e2a\u73b0\u4ee3\u65f6\u671f\uff0c\u4ed6\u5728\u6b27\u6d32\u4f7f\u7528\u4e86\u7b14\u540d\u83ab\u987f\u00b7\u9c81(Morton Rhue)\u3002\n\u5728\u201c\u751c\u8c37\u53cc\u80de\u80ce\u201d\u7cfb\u5217\u7684\u7b2c86\u672c\u4e66\u201c\u4e0d\u80fd\u5728\u8fd9\u91cc\u53d1\u751f\u201d\u4e2d\uff0c\u8bb2\u8ff0\u4e86\u4e00\u4f4d\u4ee3\u8bfe\u8001\u5e08\u8fdb\u884c\u7684\u5b9e\u9a8c\u6027\u8d28\u4e0e\u201c\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u201d\u975e\u5e38\u76f8\u4f3c\u7684\u6545\u4e8b\u3002\n2001\u5e74\uff0c\u5965\u62c9\u592b\u00b7\u76ae\u7279\u5229\u514b(Olaf Pyttlik)\u521b\u4f5c\u7684\u4e00\u90e8\u97f3\u4e50\u6539\u7f16\u5267\u5728\u52a0\u62ff\u5927\u9a6c\u5c3c\u6258\u5df4\u7701\u7687\u5bb6\u5267\u9662\u4e2d\u5fc3(Royal Manitoba Theatre Centre)\u9996\u6f14\u3002\n2008\u5e74\u7684\u5fb7\u56fd\u7535\u5f71\u201c\u6b7b\u4ea1\u4e4b\u58f0\u201d\u5c06\u8fd9\u4e2a\u5b9e\u9a8c\u8f6c\u79fb\u5230\u4e86\u4e00\u4e2a\u73b0\u4ee3\u7684\u5fb7\u56fd\u6559\u5ba4\u3002\u8fd9\u90e8\u7535\u5f71\u53d7\u5230\u8bc4\u8bba\u754c\u7684\u597d\u8bc4\u3002\n\u201c\u83b1\u514b\u4f0d\u5fb7\u7684\u9a84\u50b2\u201d\u662f\u513f\u7ae5\u52a8\u753b\u7247\u201c\u4e9a\u745f\u201d2010\u5e74\u7684\u4e00\u96c6\uff0c\u5927\u81f4\u4e0a\u662f\u6839\u636e\u201c\u7b2c\u4e09\u6ce2\u201d\u5b9e\u9a8c\u6539\u7f16\u7684\u3002\u5728\u8fd9\u90e8\u7535\u5f71\u4e2d\uff0c\u7ec4\u6210\u793e\u533a\u9a84\u50b2\u56e2\u4f53\u7684\u5b66\u751f\u53d8\u5f97\u6cd5\u897f\u65af\u4e3b\u4e49\u3002\n2010\u5e74\uff0c\u743c\u65af\u4e0a\u6f14\u4e86\u4e00\u90e8\u540d\u4e3a\u201c\u6d6a\u6f6e\u201d\u7684\u97f3\u4e50\u5267\uff0c\u8fd9\u90e8\u97f3\u4e50\u5267\u662f\u4e0e\u73ed\u4e0a\u7684\u4e00\u4e9b\u5b66\u751f\u4e00\u8d77\u521b\u4f5c\u7684\u3002[9]\n2011\u5e74\uff0c\u7ea6\u745f\u592b\u00b7\u7f57\u6bd4\u5185\u7279(Joseph Robinette)\u548c\u7f57\u6069\u00b7\u743c\u65af(Ron Jones)\u5c06\u8fd9\u4e9b\u4e8b\u4ef6\u6539\u7f16\u6210\u4e86\u76f4\u64ad\u5267\u7248\u672c\u3002\n\u5fb7\u8bed\u8ff7\u4f60\u5267\u300a\u6211\u4eec\u662f\u6ce2\u6d6a\u300b(2019\u5e74)\u662f\u6839\u636eStrasser\u7684\u4e66\u6539\u7f16\u7684\u3002\n^a b c d e f Bill Klink(1967\u5e744\u670821\u65e5)\u3002\u201c\u7b2c\u4e09\u6ce2\u201d\u4ecb\u7ecd\u4e86\u6cd5\u897f\u65af\u4e3b\u4e49\u7684\u5185\u5e55\u3002\u5361\u7279\u8499\u7279\u5e93\u4f2f\u5229\u3002\u201c\u57c3\u5c14\u4f0d\u5fb7\u00b7P\u00b7\u5361\u4f2f\u5229\u9ad8\u4e2d\u201d\u7b2c11\u5377\u7b2c14\u671f\u3002\n^a b\u83b1\u65af\u5229\u00b7\u6e29\u83f2\u5c14\u5fb7(1991\u5e749\u6708)\u3002\u8bb0\u4f4f\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u3002\u7f57\u6069\u00b7\u743c\u65af\u7f51\u7ad9\u30022011\u5e747\u670819\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^a b\u67e5\u5c14\u65af\u00b7\u65af\u79d1\u7279(1967\u5e7412\u67088\u65e5)\u3002\u4eba\u4eec\u73a9\u7684\u6e38\u620f\u2026\u2026\u5361\u7279\u8499\u7279\u5e93\u4f2f\u5229\u3002\u201c\u57c3\u5c14\u4f0d\u5fb7\u00b7P\u00b7\u5361\u4f2f\u5229\u9ad8\u4e2d\u201d\u7b2c12\u5377\u7b2c6\u671f\u3002\n^a b c d e f g h i j k l Jones\uff0cRon(1972)\u3002\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u3002\u5b58\u6863\u65e5\u671f\u4e3a2005-02-22\u3002\uff0c\u548cJones\uff0cRon(1976)\u3002\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u3002\u6d6a\u6f6e\u4e4b\u5bb6\u3002\u5b58\u6863\u65e5\u671f\u4e3a2015-02-02\u3002\n^a b BerniceSakuma&Amp\uff1bRobin Leler(1967\u5e744\u67087\u65e5)\u3002\u901a\u8fc7\u864e\u773c\u3002\u5361\u7279\u8499\u7279\u5e93\u4f2f\u5229\u3002\u201c\u57c3\u5c14\u4f0d\u5fb7\u00b7P\u00b7\u5361\u4f2f\u5229\u9ad8\u4e2d\u201d\u7b2c11\u5377\u7b2c13\u671f\u3002\n^Ducey\uff0c\u8fd9\u662fPatricia\u3002\u7f8e\u56fd\u4e00\u6240\u9ad8\u4e2d\u7684\u6cd5\u897f\u65af\u4e3b\u4e49\u5b9e\u9a8c\uff1a\u7ebd\u6ce2\u7279\u6d77\u6ee9\u7535\u5f71\u8282\u7684\u6559\u6848\u3002\u5229\u4f2f\u5854\u65af\u7535\u5f71\u6742\u5fd7\u3002\n\u201c\u5c71\u59c6\u00b7\u6000\u5ef7\u201d(2010\u5e741\u670830\u65e5)\u3002\u5728\u201c\u6d6a\u6f6e\u201d\u4e2d\uff0c\u524d\u6559\u5e08\u7f57\u6069\u00b7\u743c\u65af\u56de\u987e\u4e86\u8fc7\u53bb\u3002SFGate\u3002\n\u514b\u6797\u514b\uff0c\u6bd4\u5c14\u30021967\u5e744\u670821\u65e5\u3002\u7b2c\u4e09\u6ce2\u4ecb\u7ecd\u4e86\u201c\u6cd5\u897f\u65af\u4e3b\u4e49\u5185\u5e55\u201d\uff0c\u201c\u5e93\u4f2f\u5229\u5361\u7279\u8499\u7279\u201d\uff0c\u7b2c11\u5377\uff0c\u7b2c14\u671f\uff0c\u7b2c3\u9875\u3002(Cubberley\u5b66\u751f\u62a5\u7eb8\u4e0a\u7684\u65b0\u95fb\u6587\u7ae0\uff0c\u5728\u7b2c\u4e09\u6ce2\u96c6\u4f1a\u4e4b\u540e\uff0c\u5305\u62ec\u96c6\u4f1a\u7684\u7ec6\u8282\u548c\u4e00\u4e9b\u53c2\u4e0e\u7684\u4eba\u7684\u540d\u5b57\u3002)\u3002\n\u83b1\u52d2\uff0c\u7f57\u5bbe\u548c\u4f50\u4e45\u739b\uff0c\u4f2f\u59ae\u65af\u30021967\u5e744\u67087\u65e5\u3002\u201c\u5361\u7279\u8499\u7279\u201d\uff0c\u7b2c11\u5377\uff0c\u7b2c13\u671f\uff0c\u7b2c2\u9875\uff0c\u6807\u9898\u4e3a\u201c\u901a\u8fc7\u864e\u773c\u201d\u7684\u4e13\u680f\u3002(Cubberley\u5b66\u751f\u62a5\u4e0a\u7684\u4e00\u7bc7\u6587\u7ae0\u7b80\u8981\u63d0\u5230\u4e86\u7b2c\u4e09\u6b21\u6d6a\u6f6e\u7684\u4e8b\u4ef6\u3002)\u3002\n\u5a01\u5ec9\u59c6\u65af\uff0c\u897f\u5c14\u7ef4\u4e9a\u00b7\u8d1d\u745e\u30021970\u5e74\u3002\u5435\u67b6\u3002\u7ebd\u7ea6\uff1a\u5c0f\uff0c\u5e03\u6717\u3002\u7b2c7\u7ae0\u7b2c51\u9875(#34\uff1b\u5173\u4e8eUSM\u7684\u660e\u7ec6\u8868)\u3002\n\u6559\u6848-\u539f\u7b2c\u4e09\u6ce2\u5e08\u751f\u8bb2\u8ff0\u7684\u7b2c\u4e09\u6ce2\u7eaa\u5f55\u7247\u3002\n\u8428\u59c6\u00b7\u6000\u5ef7(2010\u5e741\u670830\u65e5)\u3002\u5728\u201c\u6d6a\u6f6e\u201d\u4e2d\uff0c\u524d\u6559\u5e08\u7f57\u6069\u00b7\u743c\u65af\u56de\u987e\u4e86\u8fc7\u53bb\u3002\u201c\u65e7\u91d1\u5c71\u7eaa\u4e8b\u62a5\u201d\u3002\u8d6b\u65af\u7279\u516c\u53f8\u3002", "note_en": "Jump to navigation  Jump to search  The Third Wave was an experimental social movement created by California high school history teacher  Ron Jones in 1967 to explain how the German population could accept the actions of the  Nazi regime during the  Second World War.  [1]  [2] While he taught his students about Nazi Germany during his &#34;Contemporary World History&#34; class, Jones found it difficult to explain how the German people could accept the actions of the Nazis, and decided to create a social movement as a demonstration of the appeal of  fascism. Over the course of five days, Jones \u2013 a member of the  SDS,  [3] Cubberley United Student Movement sponsor  [4] and  Black Panthers supporter  [5] \u2013 conducted a series of exercises in his classroom emphasizing discipline and community, intended to model certain characteristics of the Nazi movement. As the movement grew outside his class and began to number in the hundreds, Jones began to feel that the movement had spiraled out of control. He convinced the students to attend a rally where he claimed that the classroom project was part of a nationwide movement, and that the announcement of a Third Wave presidential candidate would be televised. Upon their arrival, the students were presented with a blank channel. Jones told his students of the true nature of the movement as an experiment in fascism, and presented to them a short film discussing the actions of Nazi Germany.  [6]\n   The experiment took place at  Cubberley High School in  Palo Alto,  California, during the first week of April 1967.  [1] Jones, finding himself unable to explain to his students how the German population could have claimed ignorance of  The Holocaust, decided to demonstrate it to them instead.  [6] Jones started a movement called &#34;The Third Wave&#34; and told his students that the movement aimed to eliminate democracy.  [1] The idea that democracy emphasises individuality was considered as a drawback, and Jones emphasised this main point of the movement in its motto: &#34;Strength through discipline, strength through community, strength through action, strength through pride.&#34;  [1]\n The experiment was not well documented at the time. Of contemporary sources, the experiment is only mentioned in the Cubberley High School student newspaper,  The Cubberley Catamount. It is only briefly mentioned in two issues,  [7]  [3] and one more issue of the paper has a longer article about this experiment at its conclusion.  [1] Jones himself wrote a detailed account of the experiment some nine years afterward  [6] and more articles about the experiment followed, including some interviews with Jones and the original students.  [2]\n   Ron Jones writes that he started the first day of the experiment with simple things such as proper seating and extensively drilling the students.(who were in their senior year of school).  [6] He then proceeded to enforce strict classroom discipline by emerging as an authoritarian figure and dramatically improving the efficiency of the class.\n The first day&#39;s session was closed with only a few rules, being rather simple and intending to be a one-day experiment. Students had to be sitting at attention before the second bell, had to stand up to ask or answer questions and had to do it in three words or fewer, and were required to preface each remark with &#34;Mr. Jones&#34;.  [6]\n  On the second day, he managed to meld his history class into a group with a supreme sense of discipline and community. Jones based the name of his movement, &#34;The Third Wave&#34;, on the supposed fact that the third in a series of waves is the strongest.  [6] Jones created a salute involving a cupped hand reaching across the chest toward the opposite shoulder  [6] resembling a  Hitler salute,  [1] and ordered class members to salute each other even outside the class. They all complied with this command.  [6]\n  The experiment took on a life of its own, with students from all over the school joining in: some students who did not take the history class but had a free period decided to join the class. On the third day, the class expanded from initial 30 students to 43 attendees. All of the students showed drastic improvement in their academic skills and tremendous motivation. All of the students were issued a member card, and each of them received a special assignment, like designing a Third Wave Banner, stopping non-members from entering the class, or the like. Jones instructed the students on how to initiate new members, and by the end of the day the movement had over 200 participants.  [6] Jones was surprised that some of the students started reporting to him when other members of the movement failed to abide by the rules.  [6]\n  On the fourth day of the experiment, Jones decided to terminate the movement because it was slipping out of his control. The students became increasingly involved in the project and their discipline and loyalty to the project was outstanding. He announced to the participants that this movement was a part of a nationwide movement and that on the next day a presidential candidate of the Third Wave would publicly announce its existence. Jones ordered students to attend a noon rally on Friday to witness the announcement.  [6]\n  Instead of a televised address of their leader, the students were presented with  an empty channel. After a few minutes of waiting, Jones announced that they had been a part of an experiment in  fascism and that they all willingly created a sense of superiority like German citizens had in the period of Nazi Germany. He then played them a film about the Nazi regime to conclude the experiment.  [6]\n  On October 10, 2010, the documentary,   Lesson Plan, which retold the story of the Third Wave through interviews with the original students and teacher, debuted at the  Mill Valley Film Festival.  [8] It was produced by Philip Neel, one of Jones&#39;s own former students.\n  The events of the experiment were adapted into a 1981 US TV special,   The Wave. This formed the basis for the  Young Adult  novelization  of the same name by  Todd Strasser, who conducted the story of the Third Wave into a modern time period, who used the pen name  Morton Rhue in Europe.\n It Can&#39;t Happen Here, the 86th book in the   Sweet Valley Twins series, features a substitute teacher who conducts an experiment very similar in nature to The Third Wave.\n In 2001, a musical adaptation written by Olaf Pyttlik premiered at the  Royal Manitoba Theatre Centre in Canada.\n The 2008 German film   Die Welle transferred the experiment to a modern-day German classroom. The film received critical acclaim.\n &#34;The Pride of Lakewood&#34;, a 2010 episode of children&#39;s animated series   Arthur, was loosely based on the Third Wave experiment. In it, students who form a community pride group become fascistic.\n In 2010, Jones staged a musical called  The Wave, written with some of the students in the class.  [9]\n The events were adapted into a straight play version in 2011 by  Joseph Robinette and Ron Jones.\n The German-language miniseries   We Are the Wave (2019) is based on the book by Strasser.\n      ^     a     b     c     d     e     f   Bill Klink (April 21, 1967).  &#34; &#39;Third Wave&#39; presents inside look into Fascism&#34;.  Cubberley Catamount. Vol.\u00a011 no.\u00a014. Ellwood P. Cubberley High School .\n ^     a     b   Leslie Weinfield (September 1991).  &#34;Remembering the 3rd Wave&#34;.  Ron Jones Website. Archived from  the original on July 19, 2011 .\n ^     a     b   Charles Scott (December 8, 1967).  &#34;The Games People Play...&#34;  Cubberley Catamount. Vol.\u00a012 no.\u00a06. Ellwood P. Cubberley High School .\n   ^     a     b     c     d     e     f     g     h     i     j     k     l   Jones, Ron (1972).  &#34;The Third Wave&#34;. Archived from  the original on 2005-02-22 .  , and  Jones, Ron (1976).  &#34;The Third Wave&#34;.  The Wave Home. Archived from  the original on 2015-02-02 .\n ^     a     b   Bernice Sakuma &amp; Robin Leler (April 7, 1967).  &#34;Through the Tiger Eye&#34;.  Cubberley Catamount. Vol.\u00a011 no.\u00a013. Ellwood P. Cubberley High School .\n ^   Ducey, Patricia.  &#34;Experiment in Fascism at an American High School: The Lesson Plan @ The Newport Beach Film Festival&#34;.  Libertas Film Magazine .\n ^   Whiting, Sam (January 30, 2010).  &#34;In &#39;The Wave,&#39; ex-teacher Ron Jones looks back&#34;.  SFGate .\n  Klink, Bill. April 21, 1967. &#34;The Third Wave presents inside look at Fascism&#34;,  The Cubberley Catamount, Volume 11, No. 14, Page 3. (News article in Cubberley student newspaper, following the Third Wave Rally, including details regarding the rally and names of some individuals involved.)\n Leler, Robin and Sakuma, Bernice. April 7, 1967.  The Cubberley Catamount, Volume 11, No. 13, Page 2. Column entitled &#34;Through the Tiger Eye&#34;. (Article in Cubberley student newspaper makes brief reference to the events of the &#34;Third Wave&#34;.)\n  Williams, Sylvia Berry. 1970.  Hassling. New York: Little, Brown. Page 51 in Chapter 7 (&#34;A Bill of Particulars on the USM&#34;).\n  Lesson Plan \u2013 Third Wave documentary film, as told by the original Third Wave students and teacher\n    Whiting, Sam (January 30, 2010).  &#34;In &#39;The Wave,&#39; ex-teacher Ron Jones looks back&#34;.  San Francisco Chronicle. Hearst Corp .", "posttime": "2020-08-10 11:51:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b9e\u9a8c,wave,\u5b66\u751f", "title": "\u7b2c\u4e09\u6ce2\u5b9e\u9a8c", "title_en": "The Third Wave Experiment", "transed": 1, "url": "https://en.wikipedia.org/wiki/The_Third_Wave_(experiment)", "via": "", "real_tags": ["\u5b9e\u9a8c", "wave", "\u5b66\u751f"]}, {"category": "", "categoryclass": "", "imagename": "994fd7239734a5f6f26269c43ad85c65.jpg", "infoid": 1017284, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c31\u5728\u7f8e\u56fd\u6295\u653e\u4eba\u7c7b\u5df2\u77e5\u7684\u6700\u5f3a\u5927\u6b66\u5668\u7684\u524d\u51e0\u5468\uff0c\u957f\u5d0e\u751a\u81f3\u4e0d\u5728\u539f\u5b50\u5f39\u76ee\u6807\u57ce\u5e02\u7684\u540d\u5355\u4e0a\u3002\n\u8fd9\u4efd\u540d\u5355\u662f\u7531\u4e00\u4e2a\u7531\u7f8e\u56fd\u519b\u4e8b\u5c06\u9886\u3001\u519b\u5b98\u548c\u79d1\u5b66\u5bb6\u7ec4\u6210\u7684\u59d4\u5458\u4f1a\u521b\u5efa\u7684\u3002\u4eac\u90fd\u62e5\u67092000\u591a\u5ea7\u4f5b\u6559\u5bfa\u5e99\u548c\u795e\u9053\u795e\u793e\uff0c\u5176\u4e2d\u5305\u62ec17\u4e2a\u4e16\u754c\u9057\u4ea7\uff0c\u4f4d\u5c45\u699c\u9996\u3002\n\u4f1a\u8bae\u8bb0\u5f55\u663e\u793a\uff0c\u8fd9\u4e2a\u76ee\u6807\u662f\u4e00\u4e2a\u62e5\u6709100\u4e07\u4eba\u53e3\u7684\u57ce\u5e02\u5de5\u4e1a\u533a\u3002\n\u4ed6\u4eec\u8fd8\u5c06\u4eac\u90fd\u4eba\u63cf\u8ff0\u4e3a\u66f4\u5bb9\u6613\u9886\u4f1a\u5c0f\u73a9\u610f\u513f\u8fd9\u6837\u4e00\u4ef6\u6b66\u5668\u7684\u610f\u4e49\u3002\n\u53f2\u8482\u6587\u65af\u7406\u5de5\u5b66\u9662(Stevens Institute Of Technology)\u7684\u79d1\u5b66\u53f2\u5b66\u5bb6\u4e9a\u5386\u514b\u65af\u00b7\u97e6\u52d2\u65af\u5766(Alex Wellerstein)\u8868\u793a\uff0c\u4eac\u90fd\u88ab\u519b\u65b9\u89c6\u4e3a\u7406\u60f3\u7684\u76ee\u6807\uff0c\u56e0\u4e3a\u5b83\u6839\u672c\u6ca1\u6709\u906d\u5230\u8f70\u70b8\uff0c\u8bb8\u591a\u5de5\u4e1a\u90fd\u642c\u8fc1\u4e86\uff0c\u4e00\u4e9b\u5927\u5de5\u5382\u4e5f\u5728\u90a3\u91cc\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u76ee\u6807\u59d4\u5458\u4f1a\u7684\u79d1\u5b66\u5bb6\u66f4\u559c\u6b22\u4eac\u90fd\uff0c\u56e0\u4e3a\u5b83\u662f\u8bb8\u591a\u5927\u5b66\u7684\u6240\u5728\u5730\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u90a3\u91cc\u7684\u4eba\u4eec\u5c06\u80fd\u591f\u7406\u89e3\u539f\u5b50\u5f39\u4e0d\u4ec5\u4ec5\u662f\u53e6\u4e00\u79cd\u6b66\u5668--\u5b83\u51e0\u4e4e\u662f\u4eba\u7c7b\u5386\u53f2\u7684\u4e00\u4e2a\u8f6c\u6298\u70b9\u3002\n\u00d7\u6295\u4e0b\u7b2c\u4e8c\u9897\u539f\u5b50\u5f39\uff0c1945\u5e748\u67089\u65e5\u3002\u76f4\u52307\u670824\u65e5\uff0c\u8fd9\u5ea7\u57ce\u5e02\u624d\u88ab\u6dfb\u52a0\u5230\u76ee\u6807\u540d\u5355\u4e2d\uff0c\u4ee5\u53d6\u4ee3\u4eac\u90fd\u3002\n\u4eac\u90fd\u662f\u65e5\u672c\u53e4\u8001\u7684\u4f20\u7edf\u9996\u90fd\uff0c\u5728\u6218\u4e89\u90e8\u957f\u4ea8\u5229\u00b7\u53f2\u6c40\u751f\u8bf4\u670d\u675c\u9c81\u95e8\u603b\u7edf\u4ee5\u5176\u6587\u5316\u91cd\u8981\u6027\u4e3a\u7531\u5c06\u5176\u79fb\u9664\u4e4b\u524d\uff0c\u4eac\u90fd\u4e00\u76f4\u4f4d\u5c45\u699c\u9996\u3002\n\u00d78\u67089\u65e5\u7b2c\u4e8c\u679a\u539f\u5b50\u5f39\u7684\u539f\u5b9a\u76ee\u6807\u3002\u7531\u4e8e\u80fd\u89c1\u5ea6\u4f4e\uff0c\u98de\u673a\u98de\u5f80\u957f\u5d0e\u3002\n\u00d7\u653b\u51fb\u88d5\u4ec1\u5929\u7687\u7684\u5bab\u6bbf\u88ab\u8ba8\u8bba\u8fc7\uff0c\u4f46\u7f8e\u56fd\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u65e5\u672c\u4eba\u5bf9\u4e00\u540d\u5728\u65e5\u672c\u88ab\u89c6\u4e3a\u6d3b\u7740\u7684\u795e\u7684\u4eba\u7684\u6b7b\u4ea1\u7684\u53cd\u5e94\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\uff0c\u4e0d\u5efa\u8bae\u8fd9\u6837\u505a\u3002\u4e1c\u4eac\u57283\u6708\u4efd\u51e0\u4e4e\u5df2\u7ecf\u88ab\u706b\u529b\u8f70\u70b8\u6467\u6bc1\uff0c\u56e0\u6b64\u88ab\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u6218\u7565\u4ef7\u503c\u3002\n\u00d7\u5927\u5de5\u4e1a\u533a\uff0c\u6ca1\u6709\u53d7\u5230\u5e38\u89c4\u8f70\u70b8\u7684\u5f71\u54cd\uff0c\u4f46\u57287\u6708\u5e95\u4ece\u540d\u5355\u4e2d\u5220\u9664\u3002\n\u00d7\u91cd\u8981\u6e2f\u53e3\uff0c\u88ab\u7f8e\u56fd\u76ee\u6807\u59d4\u5458\u4f1a\u786e\u5b9a\u4e3a\u6f5c\u5728\u7684\u5de5\u4e1a\u5206\u6563\u4e2d\u5fc3\u3002\n\u4f46\u57281945\u5e746\u6708\u521d\uff0c\u6218\u4e89\u90e8\u957f\u4ea8\u5229\u00b7\u53f2\u6c40\u751f(Henry Stimson)\u4e0b\u4ee4\u5c06\u4eac\u90fd\u4ece\u76ee\u6807\u540d\u5355\u4e2d\u5220\u9664\u3002\u4ed6\u8fa9\u79f0\uff0c\u5b83\u5177\u6709\u6587\u5316\u91cd\u8981\u6027\uff0c\u4e0d\u662f\u519b\u4e8b\u76ee\u6807\u3002\n\u5a01\u52d2\u65af\u5766\u6559\u6388\u8868\u793a\uff0c\u519b\u65b9\u4e0d\u5e0c\u671b\u5c06\u5176\u5220\u9664\uff0c\u56e0\u6b64\u4e00\u76f4\u5c06\u201c\u4eac\u90fd\u8bae\u5b9a\u4e66\u201d\u91cd\u65b0\u5217\u5165\u540d\u5355\uff0c\u76f4\u52307\u6708\u4e0b\u65ec\uff0c\u4f46\u53f2\u6c40\u751f\u76f4\u63a5\u53bb\u627e\u4e86\u675c\u9c81\u95e8\u603b\u7edf\u3002\n\u5728\u4e0e\u603b\u7edf\u8fdb\u884c\u8ba8\u8bba\u540e\uff0c\u53f2\u6c40\u751f\u5148\u751f\u57281945\u5e747\u670824\u65e5\u7684\u65e5\u8bb0\u4e2d\u5199\u9053\uff0c\u4ed6\u7279\u522b\u575a\u51b3\u5730\u540c\u610f\u6211\u7684\u5efa\u8bae\uff0c\u5373\u5982\u679c\u4e0d\u8fdb\u884c\u6d88\u706d\uff0c\u8fd9\u79cd\u8086\u610f\u884c\u4e3a\u5c06\u9020\u6210\u7684\u75db\u82e6\u53ef\u80fd\u4f1a\u4f7f\u65e5\u672c\u4eba\u5728\u6218\u540e\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\u4e0d\u53ef\u80fd\u5728\u90a3\u4e2a\u5730\u533a\u4e0e\u6211\u4eec\u548c\u89e3\uff0c\u800c\u4e0d\u662f\u4e0e\u4fc4\u7f57\u65af\u4eba\u548c\u89e3\u3002\n\u5bfc\u81f4\u51b7\u6218\u7684\u7d27\u5f20\u5c40\u52bf\u5df2\u7ecf\u5728\u915d\u917f\u4e4b\u4e2d\uff0c\u7f8e\u56fd\u4eba\u6700\u4e0d\u60f3\u505a\u7684\u4e8b\u60c5\u5c31\u662f\u652f\u6301\u4e9a\u6d32\u7684\u5171\u4ea7\u4e3b\u4e49\u4e8b\u4e1a\u3002\n\u5c31\u5728\u90a3\u65f6\uff0c\u957f\u5d0e\u53d6\u4ee3\u4e86\u4eac\u90fd\u88ab\u6dfb\u52a0\u5230\u76ee\u6807\u540d\u5355\u4e2d\u3002\u4f46\u5e7f\u5c9b\u548c\u957f\u5d0e\u4e5f\u4e0d\u662f\u519b\u4e8b\u76ee\u6807\u3002\n\u6b63\u5982\u6211\u4eec\u4eca\u5929\u6240\u77e5\uff0c\u5305\u62ec\u5987\u5973\u548c\u513f\u7ae5\u5728\u5185\u7684\u6570\u5341\u4e07\u5e73\u6c11\u88ab\u6740\u5bb3\u3002\u867d\u7136\u4eac\u90fd\u53ef\u80fd\u662f\u6700\u8457\u540d\u7684\u6587\u5316\u57ce\u5e02\uff0c\u4f46\u5176\u4ed6\u57ce\u5e02\u4e5f\u62e5\u6709\u5b9d\u8d35\u7684\u8d44\u4ea7\u3002\n\u97e6\u52d2\u65af\u5766\u6559\u6388\u8868\u793a\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u770b\u8d77\u6765\u53f2\u6c40\u751f\u7684\u52a8\u673a\u66f4\u4e2a\u4eba\u5316\uff0c\u800c\u8fd9\u4e9b\u5176\u4ed6\u501f\u53e3\u53ea\u662f\u5408\u7406\u5316\u800c\u5df2\u3002\n\u4f17\u6240\u5468\u77e5\uff0c\u53f2\u6c40\u751f\u57281920\u5e74\u4ee3\u62c5\u4efb\u83f2\u5f8b\u5bbe\u603b\u7763\u65f6\u66fe\u6570\u6b21\u8bbf\u95ee\u4eac\u90fd\u3002\u4e00\u4e9b\u5386\u53f2\u5b66\u5bb6\u8bf4\uff0c\u8fd9\u662f\u4ed6\u7684\u871c\u6708\u76ee\u7684\u5730\uff0c\u4ed6\u662f\u65e5\u672c\u6587\u5316\u7684\u5d07\u62dc\u8005\u3002\n\u4f46\u4ed6\u4e5f\u662f\u62d8\u755910\u4e07\u591a\u540d\u65e5\u88d4\u7f8e\u56fd\u4eba\u7684\u5e55\u540e\u9ed1\u624b\uff0c\u56e0\u4e3a\u6b63\u5982\u53f2\u6c40\u751f\u6240\u8bf4\uff0c\u4ed6\u4eec\u7684\u79cd\u65cf\u7279\u5f81\u5982\u6b64\u4e4b\u6df1\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u751a\u81f3\u65e0\u6cd5\u7406\u89e3\u6216\u4fe1\u4efb\u65e5\u672c\u516c\u6c11\u3002\n\u8fd9\u53ef\u80fd\u662f\u53e6\u4e00\u4e2a\u4eba\u51e0\u5341\u5e74\u6765\u62ef\u6551\u4eac\u90fd\u7684\u529f\u52b3\u7684\u90e8\u5206\u539f\u56e0\u3002\n\u4eba\u4eec\u666e\u904d\u8ba4\u4e3a\uff0c\u5efa\u8bae\u5f53\u5c40\u4e0d\u8981\u8f70\u70b8\u4eac\u90fd\u7b49\u62e5\u6709\u6587\u5316\u8d44\u4ea7\u7684\u57ce\u5e02\u7684\u662f\u7f8e\u56fd\u8003\u53e4\u5b66\u5bb6\u548c\u827a\u672f\u5386\u53f2\u5b66\u5bb6\u5170\u767b\u00b7\u534e\u7eb3(Langdon Warner)\uff0c\u800c\u4e0d\u662f\u6709\u4e89\u8bae\u7684\u6218\u4e89\u90e8\u957f\u3002\u4eac\u90fd\u548c\u9570\u4ed3\u751a\u81f3\u6709\u7eaa\u5ff5\u534e\u7eb3\u5148\u751f\u7684\u7eaa\u5ff5\u7891\u3002\n\u8fd9\u679a\u70b8\u5f39\u7684\u7ef0\u53f7\u662f\u201c\u5c0f\u7537\u5b69\u201d\uff0c\u636e\u4fe1\u5176\u7206\u70b8\u5a01\u529b\u76f8\u5f53\u4e8e2\u4e07\u5428TNT\u70b8\u836f\u3002\n\u6765\u81ea\u4f0a\u5229\u8bfa\u4f0a\u5dde\u768430\u5c81\u4e0a\u6821\u4fdd\u7f57\u00b7\u8482\u8d1d\u8328(Paul Tibbets)\u4e0a\u6821\u9886\u5bfc\u4e86\u5411\u65e5\u672c\u6295\u63b7\u539f\u5b50\u5f39\u7684\u4efb\u52a1\u3002\n\u6295\u4e0b\u70b8\u5f39\u7684\u57c3\u8bfa\u62c9\u00b7\u76d6\u4f0a(Enola Gay)\u98de\u673a\u662f\u4e3a\u4e86\u7eaa\u5ff5\u8482\u8d1d\u8328(Tibbets)\u7684\u6bcd\u4eb2\u800c\u547d\u540d\u7684\u3002\n\u6700\u7ec8\u76ee\u6807\u662f\u5728\u70b8\u5f39\u6295\u653e\u524d\u4e0d\u5230\u4e00\u5c0f\u65f6\u786e\u5b9a\u7684\u3002\u5e7f\u5c9b\u4e0a\u7a7a\u826f\u597d\u7684\u5929\u6c14\u72b6\u51b5\u51b3\u5b9a\u4e86\u8fd9\u5ea7\u57ce\u5e02\u7684\u547d\u8fd0\u3002\n\u5728\u7206\u70b8\u65f6\uff0c\u70b8\u5f39\u7206\u7834\u70b9\u7684\u6e29\u5ea6\u662f\u51e0\u767e\u4e07\u5ea6\u3002\u5730\u9762\u4e0a\u6570\u4ee5\u5343\u8ba1\u7684\u4eba\u5f53\u573a\u6b7b\u4ea1\u6216\u53d7\u4f24\u3002\n\u65e5\u672c\u5386\u53f2\u5b66\u5bb6\u5409\u7530\u76db\u592b(Morio Yoshida)\u57281995\u5e74\u51fa\u7248\u7684\u201c\u5728\u4eac\u90fd\u6295\u4e0b\u539f\u5b50\u5f39\u201d\u4e00\u4e66\u4e2d\u6307\u51fa\uff0c\u4f5c\u4e3a\u7f8e\u56fd\u6218\u540e\u5ba3\u4f20\u7684\u4e00\u90e8\u5206\uff0c\u534e\u7eb3\u5148\u751f\u88ab\u8a89\u4e3a\u65e5\u672c\u6587\u5316\u8d44\u4ea7\u7684\u6551\u661f\u3002\n\u97e6\u52d2\u65af\u5766\u6559\u6388\u8868\u793a\uff0c\u6218\u540e\u7f8e\u56fd\u5360\u9886\u65e5\u672c\u671f\u95f4\uff0c\u5bf9\u539f\u5b50\u5f39\u8fdb\u884c\u4e86\u4e25\u683c\u7684\u5ba1\u67e5\u3002\n\u6211\u4eec\u4ece\u524d\u51e0\u6b21\u6218\u4e89\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u6218\u8d25\u7684\u654c\u4eba\u618e\u6068\u4f60\u4eec\u7684\u6559\u8bad\uff0c\u6240\u4ee5\u4efb\u4f55\u8ba9\u65e5\u672c\u4eba\u76f8\u4fe1\u7f8e\u56fd\u5173\u5fc3\u65e5\u672c--\u65e0\u8bba\u662f\u4eba\u6c11\u8fd8\u662f\u6587\u5316\u8d44\u4ea7--\u7684\u8a00\u8bba\u90fd\u4f1a\u88ab\u5360\u9886\u5f53\u5c40\u89c6\u4e3a\u4f1f\u5927\u7684\u3002\n\u4f46\u675c\u9c81\u95e8\u603b\u7edf\u4e0d\u4ec5\u660e\u663e\u4e0d\u5173\u5fc3\u65e5\u672c\u7684\u6587\u5316\u8d44\u4ea7\uff0c\u4ed6\u8fd8\u5c06\u65e5\u672c\u63cf\u8ff0\u4e3a\u4e00\u4e2a\u5728\u6218\u4e89\u4e2d\u6781\u5176\u6b8b\u5fcd\u548c\u4e0d\u6587\u660e\u7684\u56fd\u5bb6\uff0c\u79f0\u65e5\u672c\u4eba\u4e3a\u91ce\u517d\uff0c\u56e0\u4e3a\u73cd\u73e0\u6e2f\u88ad\u51fb\u4e8b\u4ef6\uff0c\u65e5\u672c\u4eba\u65e2\u4e0d\u503c\u5f97\u8363\u8a89\uff0c\u4e5f\u4e0d\u503c\u5f97\u540c\u60c5\u3002\n\u8fd9\u7c7b\u8a00\u8bba\u5bfc\u81f4\u4eba\u4eec\u731c\u6d4b\uff0c\u7f8e\u56fd\u5411\u65e5\u672c\u6295\u63b7\u539f\u5b50\u5f39\uff0c\u800c\u4e0d\u662f\u5fb7\u56fd\uff0c\u662f\u56e0\u4e3a\u79cd\u65cf\u4e3b\u4e49-\u5bf9\u767d\u4eba\u4f7f\u7528\u539f\u5b50\u5f39\u53ef\u80fd\u88ab\u89c6\u4e3a\u66f4\u591a\u7684\u7981\u5fcc\uff0c\u800c\u4e0d\u662f\u5bf9\u65e5\u672c\u4eba\u3002\n\u4eca\u5929\uff0c\u675c\u9c81\u95e8\u603b\u7edf\u56e0\u547c\u5401\u6295\u63b7\u70b8\u5f39\u800c\u53d7\u5230\u8d5e\u626c\u548c\u6279\u8bc4\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5386\u53f2\u5b66\u5bb6\u8bf4\uff0c\u4ed6\u5728\u5927\u7ea68\u67083\u65e5\u4e4b\u540e\u624d\u4e0b\u4ee4\u5f00\u59cb\u4f7f\u7528\u8fd9\u79cd\u65b0\u6b66\u5668\uff0c\u800c\u4e14\u4ed6\u5e76\u6ca1\u6709\u5b8c\u5168\u53c2\u4e0e\u8be6\u7ec6\u7684\u51b3\u5b9a\u3002\n\u97e6\u52d2\u65af\u5766\u6559\u6388\u8bf4\uff0c\u6709\u6587\u732e\u8bc1\u636e\u8868\u660e\uff0c\u603b\u7edf\u5bf9\u7b2c\u4e00\u679a\u70b8\u5f39\u9020\u6210\u7684\u7834\u574f\u611f\u5230\u60ca\u8bb6\uff0c\u7279\u522b\u662f\u6709\u8fd9\u4e48\u591a\u5987\u5973\u548c\u513f\u7ae5\u6b7b\u4ea1\uff0c\u800c\u7b2c\u4e8c\u679a\u4e5f\u662f\u5a01\u529b\u66f4\u5927\u7684\u70b8\u5f39-\u88ad\u51fb\u957f\u5d0e-\u4ec5\u5728\u4e09\u5929\u540e\u5c31\u6295\u4e0b\u4e86\u3002\n\u8fd9\u4e00\u547c\u5401\u6765\u81ea\u6838\u5f39\u9879\u76ee\u7684\u519b\u4e8b\u4e3b\u7ba1\u83b1\u65af\u5229\u00b7\u683c\u7f57\u592b\u65af\u5c06\u519b\uff0c\u4ed6\u9886\u5bfc\u4e86\u76ee\u6807\u59d4\u5458\u4f1a\uff0c\u5e76\u5728\u8ba9\u4eac\u90fd\u8bae\u5b9a\u4e66\u7ee7\u7eed\u4f4d\u5c45\u699c\u9996\u7684\u6218\u6597\u4e2d\u5931\u8d25\u3002\n\u4ed6\u5728\u4e00\u5c01\u65e5\u671f\u4e3a7\u670819\u65e5\u7684\u4fe1\u4e2d\u8bf4\uff0c\u4ed6\u5e0c\u671b\u5bf9\u65e5\u672c\u4f7f\u7528\u81f3\u5c11\u4e24\u679a\u3001\u591a\u8fbe\u56db\u679a\u539f\u5b50\u5f39\u3002\u97e6\u52d2\u65af\u5766\u6559\u6388\u8868\u793a\uff0c\u4f60\u53ef\u4ee5\u4e89\u8fa9\u8bf4\uff0c\u4f7f\u7528\u8fd9\u4e24\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u539f\u5b50\u5f39\u5bf9\u4ed6\u4e2a\u4eba\u6709\u5229\u5bb3\u5173\u7cfb\u3002\n\u56e0\u6b64\uff0c70\u5e74\u524d\u7684\u4eca\u5929\uff0c\u957f\u5d0e\u4eba\u6c11\u5728\u4e00\u7728\u773c\u4e4b\u95f4\u5c31\u6d88\u5931\u4e86\uff0c\u800c\u4e0d\u662f\u6210\u5343\u4e0a\u4e07\u7684\u5bfa\u5e99\u548c\u795e\u793e\u3002\n\u8fd9\u5ea7\u751a\u81f3\u4e0d\u5728\u8f70\u70b8\u547d\u4ee4\u6700\u521d\u76ee\u6807\u540d\u5355\u4e0a\u7684\u57ce\u5e02\u4e4b\u6240\u4ee5\u88ab\u9009\u4e2d\uff0c\u662f\u56e0\u4e3a\u7b2c\u4e8c\u4e2a\u76ee\u6807\u79d1\u5e93\u62c9\u5e02\u4e0a\u7a7a\u7684\u6076\u52a3\u5929\u6c14-\u8fd9\u963b\u6b62\u4e86\u98de\u884c\u5458\u57288\u67089\u65e5\u6295\u63b7\u70b8\u5f39\u3002\n\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u58f0\u79f0\u4ea8\u5229\u00b7\u53f2\u6c40\u751f(Henry Stimson)\u5c06\u4eac\u90fd\u4ece\u539f\u5b50\u5f39\u4e2d\u62ef\u6551\u51fa\u6765\uff0c\u5c31\u597d\u50cf\u8fd9\u662f\u4e00\u4e2a\u79ef\u6781\u7684\u7ed3\u679c\uff0c\u8fd9\u662f\u8352\u8c2c\u7684\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u65e5\u672c\u4e0d\u662f\u65e9\u57284\u5929\u524d\u6295\u964d\uff0c8\u670819\u65e5\u5c31\u51c6\u5907\u6295\u4e0b\u53e6\u4e00\u9897\u539f\u5b50\u5f39\u3002\u7b2c\u4e09\u4e2a\u76ee\u6807\u636e\u4fe1\u662f\u4e1c\u4eac--\u53ef\u80fd\u662f\u5929\u7687\u7684\u5bab\u6bbf\u3002\n\u4eca\u5929\uff0c\u5c3d\u7ba1\u539f\u5b50\u5f39\u9020\u6210\u4e86\u75db\u82e6\uff0c\u4f46\u5728\u65e5\u672c\u5f88\u5e38\u89c1\u7684\u4eba\u8bf4\uff0c\u539f\u5b50\u5f39\u662f\u7ed3\u675f\u6218\u4e89\u6240\u5fc5\u9700\u7684\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u4eac\u90fd\u88ab\u6467\u6bc1\u4e86\uff0c\u6216\u8005\u5929\u7687\u88ab\u6740\u4e86\uff0c\u4e5f\u8bb8\u4e0d\u4f1a\u6709\u90a3\u4e48\u591a\u4eba\u63a5\u53d7\u65e5\u672c\u906d\u53d7\u7684\u60b2\u60e8\u547d\u8fd0\u3002", "note_en": "Just weeks before the US dropped the most powerful weapon mankind has ever known, Nagasaki was not even on a list of target cities for the atomic bomb.\n  The list was created by a committee of American military generals, army officers and scientists. Kyoto, which is home to more than 2,000 Buddhist temples and Shinto shrines, including 17 World Heritage Sites, was at the top of it.\n &#34;This target is an urban industrial area with a population of 1,000,000,&#34;  the minutes from the meeting note.\n They also described the people of Kyoto as &#34;more apt to appreciate the significance of such a weapon as the gadget&#34;.\n  &#34;Kyoto was seen as an ideal target by the military because it had not been bombed at all, so many of the industries were relocated and some major factories were there,&#34; says Alex Wellerstein, who is a historian of science at the Stevens Institute of Technology.\n &#34;The scientists on the Target Committee also preferred Kyoto because it was home to many universities and they thought the people there would be able to understand that an atomic bomb was not just another weapon - that it was almost a turning point in human history,&#34; he adds.\n  \u00d7    Second atomic bomb dropped, 9 August 1945. The city was added to the target list to replace Kyoto only on 24 July.\n  \u00d7    Japan&#39;s ancient traditional capital, Kyoto topped the list until Secretary of War Henry Stimson persuaded President Truman to remove it on the basis of its cultural importance.\n  \u00d7    Original target for the second A-bomb on 9 August. Due to poor visibility, the plane headed to Nagasaki.\n  \u00d7    Attacking Emperor Hirohito&#39;s palace was discussed, but the US concluded that Japanese reaction to the death of a man considered in Japan a living deity was unpredictable and it was not recommended. Tokyo had already been virtually destroyed by fire bombing in March, so was considered to be of little strategic value.\n  \u00d7    Large industrial area which was untouched by conventional bombing, but removed from the list by the end of July.\n  \u00d7    Important port, identified as a potential centre for industrial dispersion by the US Target Committee.\n   But in early June 1945, Secretary of War Henry Stimson ordered Kyoto to be removed from the target list. He argued that it was of cultural importance and that it was not a military target.\n &#34;The military didn&#39;t want it removed so it kept putting Kyoto back on the list until late July but Stimson went directly to President Truman,&#34; says Prof Wellerstein.\n  After holding a discussion with the President, Mr Stimson wrote  in his diary on 24 July 1945 that &#34;he was particularly emphatic in agreeing with my suggestion that if elimination was not done, the bitterness which would be caused by such a wanton act might make it impossible during the long post-war period to reconcile the Japanese to us in that area rather than to the Russians&#34;.\n Tensions that led to the Cold War were already brewing and the last thing the Americans wanted to do was bolster the Communist cause in Asia.\n That was when Nagasaki was added to the target list instead of Kyoto. But Hiroshima and Nagasaki were not military targets either.\n As we know today, hundreds of thousands of civilians, including women and children, were killed. And while Kyoto may have been the most famous cultural city, the other cities also had valuable assets.\n &#34;That is why it seems that Stimson was motivated by something more personal, and these other excuses were just rationalisations,&#34; says Prof Wellerstein.\n  It is known that Mr Stimson visited Kyoto several times in the 1920s when he was the governor of the Philippines. Some historians say it was his honeymoon destination and that he was an admirer of Japanese culture.\n But he was also behind the internment of more than 100,000 Japanese Americans because, as Mr Stimson put it, &#34;their racial characteristics are such that we cannot understand or trust even the citizen Japanese&#34;.\n That may be partly why another man took the credit for saving Kyoto for many decades.\n It was widely believed that it was the American archaeologist and art historian Langdon Warner, and not the controversial Secretary of War, who advised the authorities not to bomb cities with cultural assets including Kyoto. There are even monuments to honour Mr Warner in Kyoto and Kamakura.\n    The bomb was nicknamed &#39;Little Boy&#39; and was thought to have the explosive force of 20,000 tonnes of TNT.\n Colonel Paul Tibbets, a 30 year old colonel from Illinois, led the mission to drop the atomic bomb on Japan.\n The Enola Gay, the plane which dropped the bomb, was named in tribute to Tibbets&#39; mother.\n The final target was decided less than an hour before the bomb was dropped. The good weather conditions over Hiroshima sealed the city&#39;s fate.\n On detonation, the temperature at the burst-point of the bomb was several million degrees. Thousands of people on the ground were killed or injured instantly.\n    In his 1995 book, Drop the Atomic Bomb on Kyoto, Japanese historian Morio Yoshida argued that Mr Warner was celebrated as a saviour of Japan&#39;s cultural assets as part of America&#39;s post-war propaganda.\n &#34;During the US occupation of Japan after the war, there was heavy censorship about atomic bombs,&#34; says Prof Wellerstein.\n &#34;We learned enough lessons from the previous wars about defeated enemies hating you, so any spin that would make the Japanese believe that America cared about Japan - whether the people or cultural assets - would be seen as great by the occupation authorities.&#34;\n But not only did President Truman apparently care little about Japan&#39;s cultural assets, he also described Japan as &#34;a terribly cruel and uncivilized nation in warfare,&#34; calling the Japanese &#34;beasts&#34; who deserved neither honour nor compassion because of the attack on Pearl Harbour.\n These kinds of remarks have resulted in speculation that the US dropped atomic bombs on Japan, not Germany, because of racism - that using the weapon against white people might be seen as more of a taboo than on the Japanese.\n  Today, President Truman is both praised and criticised for making the call to drop the bombs.\n In reality, historians say he gave the order to start using the new weapon only after about 3 August and he was not fully involved in detailed decisions.\n Prof Wellerstein says there is documentary evidence that the President was surprised by the devastation caused by the first bomb, especially that so many women and children had died, and the second and more powerful bomb - that hit Nagasaki - was dropped only three days later.\n That call came from the military director of the bomb project, General Leslie Groves, who led the Target Committee and lost the battle to keep Kyoto at the top of the list.\n He said in a letter dated 19 July that he wanted to use at least two and as many as four atomic bombs on Japan. &#34;You can argue that he had a personal stake in using both of the different types of atomic bombs,&#34; says Prof Wellerstein.\n So, 70 years ago today, instead of thousands of temples and shrines, it was the people of Nagasaki that evaporated in the blink of an eye.\n The city which was not even on the initial list of targets on the bombing order was chosen because of bad weather over the second target of Kokura city - which prevented the pilots from dropping the bomb on 9 August.\n In some senses, it is perverse to claim that Henry Stimson saved Kyoto from the atomic bomb as if it was a positive outcome.\n But another atomic bomb was prepared to be dropped on 19 August if Japan had not surrendered four days earlier. The third target is believed to have been Tokyo - possibly the Emperor&#39;s palace.\n Today, despite the suffering that they caused, it is quite common to find people in Japan who say that the atomic bombs were needed to end the war.\n But if Kyoto had been destroyed or if the Emperor was killed, perhaps not as many would be as accepting of the tragic fate that Japan suffered.", "posttime": "2020-08-10 11:51:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51fa\u6765,saved,\u65e5\u672c", "title": "\u628a\u4eac\u90fd\u4ece\u539f\u5b50\u5f39\u4e2d\u62ef\u6551\u51fa\u6765\u7684\u4eba", "title_en": "A man who saved Kyoto from the atomic bomb", "transed": 1, "url": "https://www.bbc.com/news/world-asia-33755182", "via": "", "real_tags": ["\u51fa\u6765", "saved", "\u65e5\u672c"]}]