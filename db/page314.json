[{"category": "", "categoryclass": "", "imagename": "8535110d88c394c9f4d0fcbee02d1095.png", "infoid": 1032068, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0cNetflix\u4e00\u76f4\u5728\u5f00\u53d1\u4e00\u6b3e\u540d\u4e3aProdicle\u7684\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u521b\u65b0\u7535\u89c6\u8282\u76ee\u548c\u7535\u5f71\u7684\u5b9e\u4f53\u5236\u4f5c\u3002\u7269\u8d28\u751f\u4ea7\u7684\u4e16\u754c\u662f\u5feb\u8282\u594f\u7684\uff0c\u56fd\u5bb6\u3001\u5730\u533a\u4e4b\u95f4\u7684\u9700\u6c42\u5dee\u5f02\u5f88\u5927\uff0c\u751a\u81f3\u4ece\u4e00\u79cd\u751f\u4ea7\u5230\u53e6\u4e00\u79cd\u751f\u4ea7\u4e5f\u662f\u5982\u6b64\u3002\u8fd9\u9879\u5de5\u4f5c\u7684\u6027\u8d28\u610f\u5473\u7740\u6211\u4eec\u8981\u5728\u5206\u5e03\u5f0f\u73af\u5883\u4e2d\u5f00\u53d1\u7f16\u5199\u7e41\u91cd\u7684\u8f6f\u4ef6\uff0c\u5728\u8fd9\u4e9b\u8bbe\u5907\u4e0a\uff0c\u53ea\u6709\u4e0d\u5230\u2153\u7684\u7528\u6237\u5728\u73b0\u573a\u5177\u6709\u975e\u5e38\u53ef\u9760\u7684\u8fde\u63a5\uff0c\u5e76\u4e14\u9519\u8bef\u5bb9\u9650\u6709\u9650\u3002\u51fa\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5c0f\u578b\u5de5\u7a0b\u56e2\u961f\uff0c\u6211\u4eec\u53d1\u73b0\u8981\u60f3\u6210\u529f\u5730\u6ee1\u8db3\u4e0d\u65ad\u53d8\u5316\u7684\u5ba2\u6237\u9700\u6c42\uff0c\u5fc5\u987b\u4f18\u5316\u4ea7\u54c1\u4ea4\u4ed8\u7684\u53ef\u9760\u6027\u548c\u901f\u5ea6\u3002\n\u7f51\u7edc\u8fde\u63a5\u4e0d\u53ef\u9760\u7684\u53ef\u80fd\u6027\u5f88\u9ad8\uff0c\u8fd9\u5bfc\u81f4\u6211\u4eec\u6c42\u52a9\u4e8e\u79fb\u52a8\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u5b9e\u73b0\u5f3a\u5927\u7684\u5ba2\u6237\u7aef\u6301\u4e45\u6027\u548c\u79bb\u7ebf\u652f\u6301\u3002\u4e3a\u4e86\u5feb\u901f\u4ea4\u4ed8\u4ea7\u54c1\uff0c\u6211\u4eec\u5c1d\u8bd5\u4e86\u591a\u5e73\u53f0\u67b6\u6784\u3002\u73b0\u5728\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u4f7f\u7528Kotlin MultiPlatform\u5728Kotlin\u4e2d\u7f16\u5199\u5e73\u53f0\u65e0\u5173\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5e76\u901a\u8fc7Kotlin/Native\u7f16\u8bd1\u6210\u9002\u7528\u4e8eAndroid\u7684Kotlin\u5e93\u548c\u9002\u7528\u4e8eiOS\u7684\u672c\u673a\u901a\u7528\u6846\u67b6\u3002\nKotlin MultiPlatform\u5141\u8bb8\u60a8\u4f7f\u7528\u5355\u4e2a\u4ee3\u7801\u5e93\u6765\u5904\u7406iOS\u548cAndroid\u5e94\u7528\u7a0b\u5e8f\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u4f8b\u5982\uff0c\u5728\u9700\u8981\u5b9e\u73b0\u672c\u673aUI\u6216\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684API\u65f6\uff0c\u60a8\u53ea\u9700\u8981\u7f16\u5199\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u4ee3\u7801\u3002\nKotlin MultiPlatform\u5904\u7406\u8de8\u5e73\u53f0\u79fb\u52a8\u5f00\u53d1\u7684\u65b9\u5f0f\u4e0e\u8be5\u9886\u57df\u7684\u4e00\u4e9b\u77e5\u540d\u6280\u672f\u4e0d\u540c\u3002\u5728\u5176\u4ed6\u6280\u672f\u62bd\u8c61\u6216\u5b8c\u5168\u53d6\u4ee3\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u7684\u60c5\u51b5\u4e0b\uff0cKotlin MultiPlatform\u662f\u5bf9\u73b0\u6709\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u6280\u672f\u7684\u8865\u5145\uff0c\u65e8\u5728\u53d6\u4ee3\u4e0e\u5e73\u53f0\u65e0\u5173\u7684\u4e1a\u52a1\u903b\u8f91\u3002\u8fd9\u662f\u5de5\u5177\u7bb1\u4e2d\u7684\u4e00\u4e2a\u65b0\u5de5\u5177\uff0c\u800c\u4e0d\u662f\u53d6\u4ee3\u5de5\u5177\u7bb1\u3002\n\u6211\u4eec\u7684Android\u548ciOS\u5de5\u4f5c\u5ba4\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5171\u4eab\u7684\u67b6\u6784\uff0c\u5728\u4e24\u4e2a\u5e73\u53f0\u4e0a\u7f16\u5199\u7684\u4e1a\u52a1\u903b\u8f91\u76f8\u4f3c\uff0c\u751a\u81f3\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662f\u76f8\u540c\u7684\u3002\n\u5728\u6211\u4eec\u7684Android\u548ciOS\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u51e0\u4e4e50%\u7684\u751f\u4ea7\u4ee3\u7801\u4e0e\u5e95\u5c42\u5e73\u53f0\u5206\u79bb\u3002\n\u6211\u4eec\u63a2\u7d22\u5404\u81ea\u5e73\u53f0(Android Jetpack Compose\u3001Swift UI\u7b49)\u63d0\u4f9b\u7684\u6700\u65b0\u6280\u672f\u7684\u80c3\u53e3\u4e1d\u6beb\u6ca1\u6709\u53d7\u5230\u4efb\u4f55\u963b\u788d\u3002\n\u5982\u524d\u6240\u8ff0\uff0c\u6211\u4eec\u7684\u7528\u6237\u9700\u6c42\u4ece\u4e00\u79cd\u4ea7\u54c1\u5230\u53e6\u4e00\u79cd\u4ea7\u54c1\u5dee\u522b\u5f88\u5927\u3002\u8fd9\u610f\u5473\u7740\u9700\u8981\u8fdb\u884c\u5927\u91cf\u7684\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\uff0c\u4ee5\u5207\u6362\u529f\u80fd\u53ef\u7528\u6027\u5e76\u4f18\u5316\u6bcf\u4e2a\u4ea7\u54c1\u7684\u5e94\u7528\u5185\u4f53\u9a8c\u3002\u5c06\u7ba1\u7406\u8fd9\u4e9b\u914d\u7f6e\u7684\u4ee3\u7801\u4e0e\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u89e3\u8026\u6709\u52a9\u4e8e\u964d\u4f4e\u5e94\u7528\u7a0b\u5e8f\u589e\u957f\u65f6\u7684\u590d\u6742\u6027\u3002\u6211\u4eec\u5bf9\u4ee3\u7801\u5171\u4eab\u7684\u7b2c\u4e00\u6b21\u63a2\u7d22\u6d89\u53ca\u5230\u4e3a\u6211\u4eec\u7684\u5185\u90e8\u4f53\u9a8c\u7ba1\u7406\u5de5\u5177Hendrix\u5b9e\u73b0\u79fb\u52a8SDK\u3002\n\u672c\u8d28\u4e0a\uff0cHendrix\u662f\u4e00\u79cd\u7b80\u5355\u7684\u89e3\u91ca\u578b\u8bed\u8a00\uff0c\u8868\u793a\u5e94\u8be5\u5982\u4f55\u8ba1\u7b97\u914d\u7f6e\u503c\u3002\u8fd9\u4e9b\u8868\u8fbe\u5f0f\u5728\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u4f1a\u8bdd\u4e0a\u4e0b\u6587\u4e2d\u6c42\u503c\uff0c\u53ef\u4ee5\u8bbf\u95eeA/B\u6d4b\u8bd5\u5206\u914d\u3001\u4f4d\u7f6e\u3001\u8bbe\u5907\u5c5e\u6027\u7b49\u6570\u636e\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u7528\u4f8b\uff0c\u6211\u4eec\u6b63\u5728\u914d\u7f6e\u7279\u5b9a\u4e8e\u751f\u4ea7\u3001\u7248\u672c\u548c\u533a\u57df\u7684\u5e94\u7528\u7a0b\u5e8f\u529f\u80fd\u96c6\u7684\u53ef\u7528\u6027\u3002\n\u7f51\u7edc\u8fde\u901a\u6027\u5dee\uff0c\u52a0\u4e0a\u54cd\u5e94\u7528\u6237\u6d3b\u52a8\u800c\u9891\u7e41\u66f4\u6539\u914d\u7f6e\u503c\uff0c\u610f\u5473\u7740\u8bbe\u5907\u4e0a\u7684\u89c4\u5219\u8bc4\u4f30\u6bd4\u670d\u52a1\u5668\u7aef\u8bc4\u4f30\u66f4\u53ef\u53d6\u3002\n\u8fd9\u5bfc\u81f4\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684Hendrix\u79fb\u52a8SDK-Kotlin MultiPlatform\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u8005\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u91cd\u8981\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u5e76\u4e14\u5b8c\u5168\u4e0e\u5e73\u53f0\u65e0\u5173\u3002\n\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u8df3\u8fc7Hendrix\u7684\u5177\u4f53\u7ec6\u8282\uff0c\u5e76\u89e6\u53ca\u4f7f\u7528Kotlin MultiPlatform\u4ee3\u66ffKotlin/Swift\u6240\u6d89\u53ca\u7684\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002\n\u5bf9\u4e8eAndroid\u6765\u8bf4\uff0c\u4e00\u5207\u5982\u5e38\u3002Hendrix\u591a\u5e73\u53f0SDK\u901a\u8fc7Gradle\u4f5c\u4e3aAndroid\u5e93\u9879\u76ee\u4f9d\u8d56\u9879\u5bfc\u5165\uff0c\u5176\u65b9\u5f0f\u4e0e\u4efb\u4f55\u5176\u4ed6\u4f9d\u8d56\u9879\u76f8\u540c\u3002\u5728iOS\u7aef\uff0c\u672c\u673a\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f5c\u4e3a\u901a\u7528\u6846\u67b6\u5305\u542b\u5728Xcode\u9879\u76ee\u4e2d\u3002\nKotlin\u591a\u5e73\u53f0\u6e90\u4ee3\u7801\u53ef\u4ee5\u7f16\u8f91\u3001\u91cd\u65b0\u7f16\u8bd1\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728Android Studio\u548cXcode\u4e2d\u9644\u52a0\u65ad\u70b9\u7684\u8c03\u8bd5\u5668(\u5305\u62eclldb\u652f\u6301)\u3002Android Studio\u5f00\u7bb1\u5373\u7528\uff0cXcode\u652f\u6301\u901a\u8fc7TouchLabs\u7684Xcode-Kotlin\u63d2\u4ef6\u5b9e\u73b0\u3002\nHendrix\u89e3\u91ca\u89c4\u5219\u96c6-\u4e0b\u8f7d\u5230\u8bbe\u5907\u7684\u8fdc\u7a0b\u53ef\u914d\u7f6e\u6587\u4ef6\u3002\u6211\u4eec\u4f7f\u7528KTOR\u7684\u591a\u5e73\u53f0HttpClient\u5c06\u6211\u4eec\u7684\u7f51\u7edc\u4ee3\u7801\u5d4c\u5165\u5230SDK\u4e2d\u3002\n\u5f53\u7136\uff0c\u7f51\u7edc\u8fde\u63a5\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u53ef\u7528\u7684\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u4e0b\u8f7d\u7684\u89c4\u5219\u96c6\u7f13\u5b58\u5230\u78c1\u76d8\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528SQLDelight\u4ee5\u53ca\u5b83\u7684Android\u548cNative Database\u9a71\u52a8\u7a0b\u5e8f\u6765\u5b9e\u73b0\u591a\u5e73\u53f0\u6301\u4e45\u5316\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5bc6\u5207\u5173\u6ce8Kotlin\u591a\u5e73\u53f0\u7684\u53d1\u5c55\uff0c\u5e76\u76f8\u4fe1\u8fd9\u9879\u6280\u672f\u5df2\u7ecf\u8fbe\u5230\u4e86\u4e00\u4e2a\u8f6c\u6298\u70b9\u3002Xcode\u7684\u5de5\u5177\u548c\u6784\u5efa\u7cfb\u7edf\u96c6\u6210\u5f97\u5230\u4e86\u663e\u8457\u6539\u8fdb\uff0c\u56e0\u6b64\u4e0d\u5fc5\u7f16\u5199\u548c\u7ef4\u62a4\u591a\u4e2a\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5b9e\u73b0\u7684\u597d\u5904\u76d6\u8fc7\u4e86\u96c6\u6210\u548c\u7ef4\u62a4\u6240\u6d89\u53ca\u7684\u590d\u6742\u6027\u3002\n\u6211\u4eec\u7684Android\u548ciOS\u5de5\u4f5c\u5ba4\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u6709\u5927\u91cf\u7684\u989d\u5916\u4ee3\u7801\u5171\u4eab\u673a\u4f1a\u3002\u5f53\u6211\u4eec\u8003\u8651\u5230Javascript\u8f6c\u6362\u4e5f\u662f\u53ef\u80fd\u7684\u65f6\uff0c\u8fd9\u9879\u6280\u672f\u7684\u6f5c\u5728\u672a\u6765\u5e94\u7528\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002\n\u6211\u4eec\u5f88\u9ad8\u5174\u6211\u4eec\u7684\u5de5\u4f5c\u5ba4\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6f14\u53d8\u6210\u5177\u6709\u5171\u4eab\u4e1a\u52a1\u903b\u8f91\u7684\u8584UI\u5c42\uff0c\u5e76\u5c06\u7ee7\u7eed\u5728\u6b64\u8fc7\u7a0b\u4e2d\u4e0e\u60a8\u5206\u4eab\u6211\u4eec\u7684\u7ecf\u9a8c\u6559\u8bad\u3002", "note_en": "Over the last few years Netflix has been developing a mobile app called Prodicle to innovate i n the physical production of TV shows and movies. The world of physical production is fast-paced, and needs vary significantly between the country, region, and even from one production to the next. The nature of the work means we\u2019re developing write-heavy software, in a distributed environment, on devices where less than \u2153 of our users have very reliable connectivity whilst on set, and with a limited margin for error. For these reasons, as a small engineering team, we\u2019ve found that optimizing for reliability and speed of product delivery is required for us to serve our evolving customers\u2019 needs successfully.\n The high likelihood of unreliable network connectivity led us to lean into mobile solutions for robust client side persistence and offline support. The need for fast product delivery led us to experiment with  a multiplatform architecture. Now we\u2019re taking this one step further by using  Kotlin Multiplatform to write platform agnostic business logic  once in Kotlin and compiling to a Kotlin library for Android and a native Universal Framework for iOS via  Kotlin/Native.\n   Kotlin Multiplatform allows you to use a single codebase for the business logic of iOS and Android apps. You only need to write platform-specific code where it\u2019s necessary, for example, to implement a native UI or when working with platform-specific APIs.\n Kotlin Multiplatform approaches cross-platform mobile development differently from some well known technologies in the space. Where other technologies abstract away or completely replace platform specific app development, Kotlin Multiplatform is complementary to existing platform specific technologies and is geared towards replacing platform agnostic business logic. It\u2019s a new tool in the toolbox as opposed to replacing the toolbox.\n  Our Android and iOS studio apps have a shared architecture with similar or in some cases identical business logic written on both platforms.\n Almost 50% of the production code in our Android and iOS apps is decoupled from the underlying platform.\n Our appetite for exploring the latest technologies offered by respective platforms (Android Jetpack Compose, Swift UI, etc) isn\u2019t hampered in any way.\n   As noted earlier, our user needs vary significantly from one production to the next. This translates to a large number of app configurations to toggle feature availability and optimize the in-app experience for each production. Decoupling the code that manages these configurations from the apps themselves helps to reduce complexity as the apps grow. Our first exploration with code sharing involves the implementation of a mobile SDK for our internal experience management tool, Hendrix.\n At its core, Hendrix is a simple interpreted language that expresses how configuration values should be computed. These expressions are evaluated in the current app session context, and can access data such as A/B test assignments, locality, device attributes, etc. For our use-case, we\u2019re configuring the availability of production, version, and region specific app feature sets.\n Poor network connectivity coupled with frequently changing configuration values in response to user activity means that on-device rule evaluation is preferable to server-side evaluation.\n This led us to build a lightweight Hendrix mobile SDK \u2014 a great candidate for Kotlin Multiplatform as it requires significant business logic and is entirely platform agnostic.\n  For brevity, we\u2019ll skip over the Hendrix specific details and touch on some of the differences involved in using Kotlin Multiplatform in place of Kotlin/Swift.\n  For Android, it\u2019s business as usual. The Hendrix Multiplatform SDK is imported via gradle as an Android library project dependency in the same fashion as any other dependency. On the iOS side, the native binary is included in the Xcode project as a universal framework.\n  Kotlin Multiplatform source code can be edited, recompiled, and can have a debugger attached with breakpoints in Android Studio and Xcode (including lldb support). Android Studio works out of the box, Xcode support is achieved via TouchLabs\u2019  xcode-kotlin plugin.\n   Hendrix interprets rule set(s) \u2014 remotely configurable files that get downloaded to the device. We\u2019re using  Ktor\u2019s Multiplatform HttpClient to embed our networking code within the SDK.\n  Of course, network connectivity may not always be available so downloaded rule sets need to be cached to disk. For this, we\u2019re using  SQLDelight along with it\u2019s Android and Native Database drivers for Multiplatform persistence .\n  We\u2019ve followed the evolution of Kotlin Multiplatform keenly over the last few years and believe that the technology has reached an inflection point. The tooling and build system integrations for Xcode have improved significantly such that the complexities involved in integration and maintenance are outweighed by the benefit of not having to write and maintain multiple platform specific implementations.\n Opportunities for additional code sharing between our Android and iOS studio apps are plentiful. Potential future applications of the technology become even more interesting when we consider that  Javascript transpilation is also possible.\n We\u2019re excited by the possibility of evolving our studio mobile apps into thin UI layers with shared business logic and will continue to share our learnings with you on that journey.", "posttime": "2020-10-30 01:07:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "kotlin,multiplatform,\u5e73\u53f0", "title": "Netflix\u7684Kotlin\u591a\u5e73\u53f0", "title_en": "Kotlin Multiplatform at Netflix", "transed": 1, "url": "https://medium.com/@NetflixTechBlog/netflix-android-and-ios-studio-apps-kotlin-multiplatform-d6d4d8d25d23", "via": "", "real_tags": ["kotlin", "\u5e73\u53f0"]}, {"category": "", "categoryclass": "", "imagename": "22724cab0772454f169f912e954335dd.jpeg", "infoid": 1032067, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u538c\u5026\u4e86\u5e72\u51c0\u7684\u996e\u98df\uff0c\u5b8c\u7f8e\u7684\u5065\u8eab\u8863\uff0c\u8f6e\u5ed3\u5206\u660e\u7684\u8179\u808c\uff1f\u8fd9\u91cc\u6709\u4e00\u4f4d\u5065\u7f8e\u7684\u5973\u4eba\uff0c\u5979\u4f1a\u5e2e\u4f60\u4fdd\u6301\u5065\u5eb7\uff0c\u4eab\u53d7\u78b3\u6c34\u5316\u5408\u7269\uff0c\u8fd8\u80fd\u8ba9\u4f60\u559d\u5f97\u9169\u914a\u5927\u9189\u3002\n\u4ece\u9ad8\u4e2d\u5f00\u59cb\uff0c\u6211\u5c31\u4e00\u76f4\u5728\u8d77\u4f0f\u4e0d\u5b9a\uff0c\u9ad8\u4e2d\u6bd5\u4e1a\u540e\u6211\u60f3\u589e\u52a010\u78c5\uff0c\u5927\u5b66\u65f6\u6211\u60f3\u8dd1400\u7c73\uff0c20\u591a\u5c81\u65f6\u6211\u60f3\u4fdd\u6301\u800c\u4e0d\u9700\u8981\u592a\u591a\u5de5\u4f5c\u3002\n\u6211\u5728\u9014\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u5931\u53bb\u4e86\u5bf9\u5065\u8eab\u623f\u7684\u70ed\u7231\uff0c\u57283\u6708\u521d-\u5728\u5927\u58f6\u94c3\u77ed\u7f3a\u4e4b\u524d-\u6211\u8fdb\u5165\u4e86\u5e15\u7ef4\u5c14\u00b7\u8428\u82cf\u6797(Pavel Tsatsuline)\u7684\u7b80\u5355\u800c\u9669\u6076\u7684\u5065\u8eab\u623f\u3002\u4f5c\u4e3a\u4e00\u540d\u8bb0\u8005\uff0c\u4e00\u4e2a\u5fd9\u788c\u7684\u4eba\u548c\u4e00\u4e2a\u529f\u80fd\u529b\u91cf\u7231\u597d\u8005\uff0c\u6211\u771f\u7684\u5f88\u559c\u6b22Tsatsuline\u7684\u65b9\u6cd5\u548c\u575a\u56fa/\u5b9e\u7528\u548c\u9632\u6b62\u53d7\u4f24\u7684\u76ee\u6807\uff0c\u4e0e\u529b\u91cf\u548c\u4f53\u683c/\u5916\u8868\u76f8\u6bd4\uff0c\u8fd9\u4f3c\u4e4e\u7ecf\u5e38\u88ab\u5265\u593a\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4e00\u76f4\u5f88\u559c\u6b22\u58f6\u94c3\u57f9\u8bad\u7684\u6548\u7387\u548c\u5b9e\u7528\u6027\uff0c\u6211\u60f3\u5728\u5e15\u7ef4\u5c14\u7684\u4e66\u4e4b\u5916\u5b66\u5230\u66f4\u591a\u3002\u7136\u540e\u6211\u542c\u4e86\u4ed6\u7684Tim Ferriss\u64ad\u5ba2\u548c\u2026\u3002\u3002\u795e\u5723\u7684\u2026\u3002\u4ed6\u5988\u7684\u72d7\u5c4e\uff01\n\u6211\u8bfb\u4e86\u4e00\u70b9\uff0c\u8fd8\u6709\u5fb7\u6000\u7279\u00b7\u52a0\u7eb3(Dwight Garner)\u5728\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d(New Times)\u7684\u6770\u4f5c\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d(New Times)\u7684\u4e00\u7bc7\u8bc4\u8bba\u6587\u7ae0\uff0c\u8bc4\u8bba\u4e86\u8d39\u91cc\u65af\u7684\u201c4\u5c0f\u65f6\u8eab\u4f53\u4e66\u201d(4 Hour Body Book)\u548c\u201c\u5988\u5988\u54aa\u5440\u201d(Mamma Mia)\u3002\u8fd9\u72d7\u5c4e\u662f\u575a\u679c\uff0c\u7ed9\u4eba\u5947\u602a\u7684\u5065\u8eab\u5efa\u8bae\uff0c\u670d\u7528\u751f\u80b2\u836f\u7269\uff0c\u5403\u3002\u8fd9\u662f\u4e9a\u5386\u514b\u65af\u00b7\u743c\u65af\u7684\u72d7\u5c4e\uff0c\u4e0d\u662f\u5417\uff1f\u6211\u4eec\u600e\u4e48\u80fd\u4e0d\u8c08\u8fd9\u4ef6\u4e8b\u5462\uff1f\n\u8fd9\u8ba9\u6211\u601d\u8003\u5982\u4f55\u63a5\u8fd1\u597d\u7684\u5efa\u8bae\u548c\u66f4\u4e13\u6ce8\u4e8e\u5b66\u672f\u7684\u4e1c\u897f\u662f\u5982\u4f55\u6f5c\u4f0f\u5728\u8868\u9762\u4e4b\u4e0b\u7684\u75af\u72c2\u4e4b\u4e95\uff0c\u6211\u53ea\u662f\u5047\u8bbe\u6700\u7ec8\u4f1a\u88ab\u6fb3\u5927\u5229\u4e9a\u5f53\u5c40\u5982\u65af\u83b1\u00b7\u53f2\u6cf0\u9f99(Sly Stallone)\u5e26\u7740T\u7684\u884c\u674e\u7bb1\u6293\u83b7\u3002\u4e3a\u4ec0\u4e48\u5065\u8eab\u8bba\u575b\u548cReddits\u4e4b\u7c7b\u7684\u4e1c\u897f\u603b\u662f\u79bb\u75af\u72c2\u57ce\u53ea\u6709\u4e00\u6b65\u4e4b\u9065\u5462\uff1f\u4e3a\u4ec0\u4e48\u98df\u8089\u52a8\u7269\u8a79\u59c6\u65af\u00b7\u5e03\u6717\u7279\u7684\u574f\u8840\u75c5\u996e\u98df(\u4ed6\u5988\u7684\u575a\u679c)\u79bb\u58f6\u94c3\u6446\u52a8\u53ea\u6709\u51e0\u4e2a\u70b9\u51fb\u7684\u8ddd\u79bb(\u4ed6\u5988\u7684\u592a\u68d2\u4e86\uff01)-\u4f0a\u68ee\u3002\n\u4f19\u8ba1\uff0c\u6211\u975e\u5e38\u611f\u8c22\u6709\u673a\u4f1a\u91cd\u8bbf\u8482\u59c6\u00b7\u8d39\u91cc\u65af\uff0c\u56e0\u4e3a\u4ed6\u6bd4\u6211\u7684\u65f6\u4ee3\u65e9\u4e86\u4e00\u70b9\uff0c\u611f\u89c9\u5c31\u50cf\u5f88\u591a\u7537\u4eba\u90fd\u5bf9\u4ed6\u7740\u8ff7\u4e00\u6837\u3002\u4f60\u5e76\u4e0d\u662f\u5728\u95ee\u8482\u59c6\u00b7\u8d39\u91cc\u65af(Tim Ferriss)\u8bf4\u7684\u4efb\u4f55\u4e8b\u60c5\u6709\u591a\u201c\u771f\u5b9e\u201d\uff0c\u6216\u8005\u4efb\u4f55\u4e00\u79cd\u5065\u5eb7/\u5065\u5eb7/\u5065\u8eab\u65f6\u5c1a\u3002\u4f46\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4f60\u4e5f\u6ce8\u610f\u5230\uff0c\u6709\u6548\u7684\u3001\u597d\u7684\u4e1c\u897f\u5f80\u5f80\u88ab\u653e\u5728\u79bb\u8bd5\u56fe\u8017\u5c3d\u4f60\u8d44\u6e90\u7684\u4e1c\u897f\u592a\u8fd1\u7684\u5730\u65b9\uff0c\u800c\u8fd9\u4e9b\u4e1c\u897f\u662f\u4e0d\u597d\u7684\u3002\u5bf9\u4e8e\u8482\u59c6\u00b7\u8d39\u91cc\u65af(Tim Ferriss)\u7684\u5177\u4f53\u60c5\u51b5\uff0c\u4ee5\u53ca\u4efb\u4f55\u5065\u8eab\u65f6\u5c1a\uff0c\u6211\u8ba4\u4e3a\u5173\u6ce8\u957f\u5bff\u662f\u5f88\u91cd\u8981\u7684\u3002\u6ca1\u6709\u4eba\u518d\u771f\u6b63\u9075\u5faa\u4ed6\u7684\u517b\u751f\u6cd5\u4e86\uff0c\u81f3\u5c11\u80af\u5b9a\u4e0d\u662f\u5b83\u4e00\u5f00\u59cb\u5c31\u6d41\u884c\u7684\u7537\u4eba\u7684\u6570\u91cf\u3002\u6211\u4eec\u5f53\u7136\u8fd8\u6ca1\u6709\u5f00\u59cb\uff0c\u5957\u7528\u4e66\u8bc4\u7684\u8bdd\uff0c\u62ff\u7740\u751f\u59dc\u548c\u6ce1\u83dc(\uff1f)\u3002\u5982\u679c\u6211\u4eec\u201c\u808c\u8089\u4e0d\u8db3\u201d\uff0c\u6216\u8005\u5f53\u6211\u4eec\u201c\u7761\u4e0d\u7740\u201d\u7684\u65f6\u5019\u589e\u52a0\u4e86\u9971\u548c\u8102\u80aa\u548c\u5bd2\u51b7\u7684\u66b4\u9732\u3002\n\u6211\u4e0d\u8bb0\u5f97\u4ed6\u662f\u5426\u4e3a\u8fd9\u4e9b\u4e8b\u60c5\u63d0\u4f9b\u4e86\u4efb\u4f55\u7406\u7531\uff0c\u4f46\u5b83\u4eec\u6839\u672c\u6ca1\u6709\u9053\u7406\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6709\u628a\u63e1\u5730\u8bf4\uff0c\u5982\u679c\u8fd9\u662f\u5173\u952e\uff0c\u6211\u4eec\u73b0\u5728\u90fd\u5df2\u7ecf\u5728\u505a\u4e86\u3002\u4ed6\u7684\u54f2\u5b66\u4e2d\u4f60\u53ef\u80fd\u4f1a\u8bf4\u575a\u6301\u7684\u90e8\u5206\uff0c\u6bd4\u5982\u201c\u5403\u5168\u8c37\u7269\u800c\u4e0d\u662f\u2018\u767d\u8272\u2019\u78b3\u6c34\u5316\u5408\u7269\u201d\uff0c\u5e76\u4e0d\u662f\u4ed6\u60f3\u51fa\u7684\u72ec\u7279\u6982\u5ff5\u3002\n\u4e8b\u540e\u770b\u6765\uff0c\u8fd9\u4e00\u5207\u90fd\u5f88\u5bb9\u6613\u8bf4\uff0c\u4f46\u6211\u60f3\u66f4\u6df1\u5165\u5730\u6316\u6398\u6211\u4eec\u662f\u5982\u4f55\u4f53\u9a8c\u8fd9\u4e9b\u4e1c\u897f\u7684\uff0c\u4ee5\u53ca\u4e00\u822c\u7684\u5065\u5eb7\u4e1c\u897f\uff0c\u4ee5\u5c1d\u8bd5\u5e76\u5efa\u7acb\u4e00\u4e2a\u7406\u8bba\uff0c\u5373\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u51c6\u786e\u5730\u533a\u5206\u597d\u7684\u548c\u6709\u7528\u7684\u5065\u5eb7\u5efa\u8bae(\u8fd9\u751a\u81f3\u53ef\u80fd\u662f\u503c\u5f97\u82b1\u94b1\u7684\uff01)\u3002\u8fdc\u79bb\u7cbe\u795e\u9519\u4e71\uff0c\u751a\u81f3\u662f\u9c81\u83bd\u548c\u6709\u5bb3\u7684\u4e1c\u897f\u3002\n\u4f46\u5728\u66f4\u5e7f\u6cdb\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5bf9\u5065\u5eb7\u7684\u6574\u4f53\u7cfb\u7edf\u65b9\u6cd5\u662f\u4e3a\u4e86\u521b\u9020\u771f\u6b63\u7684\u7126\u8651\u548c\u5e7b\u89c9\u7684\u201c\u9700\u6c42\u201d\uff0c\u4f46\u4e5f\u6ca1\u6709\u7ed9\u6211\u4eec\u8db3\u591f\u7684\u8d44\u6e90\u6765\u6709\u610f\u4e49\u5730\u6539\u53d8\u6211\u4eec\u7684\u5065\u5eb7\uff0c\u800c\u4e0d\u662f\u505a\u5f88\u591a\u8270\u82e6\u7684\u5de5\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\u5df2\u7ecf\u5b8c\u5168\u51c6\u5907\u597d\u5411\u58f0\u97f3\u6700\u5927\u3001\u542c\u8d77\u6765\u6700\u81ea\u4fe1\u7684\u6709\u5f71\u54cd\u529b\u7684\u4eba\u6295\u5165\u5927\u91cf\u8d44\u91d1\uff0c\u5e0c\u671b\u4ed6\u4eec\u80fd\u4fee\u590d\u6211\u4eec\u3002\n\u4f60\u6709\u5173\u4e8e\u953b\u70bc\u3001\u996e\u98df\u3001\u5065\u5eb7\u7684\u95ee\u9898\u5417\uff1f\u6216\u8005\u4e3a\u4ec0\u4e48\u4f60\u4e0d\u5e94\u8be5\u5bb3\u6015\u4e3e\u91cd\uff1f\u5c06\u5176\u53d1\u9001\u5230swole.Women@vice.com\uff0c\u5e76\u5728Instagram\u4e0a\u5173\u6ce8@swoleWomen\u3002\n\u8425\u517b\u5efa\u8bae\uff0c\u751a\u81f3\u8425\u517b\u6807\u7b7e\uff0c\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u88ab\u6e38\u8bf4\u8005\u9738\u5360\uff1b\u7389\u7c73\u6e38\u8bf4\u56e2\u4f53\uff0c\u4e73\u5236\u54c1\u6e38\u8bf4\u56e2\u4f53\u3002\u770b\u770b\u4e73\u5236\u54c1\u884c\u4e1a\u662f\u5982\u4f55\u5f3a\u884c\u767b\u4e0a\u6307\u5bfc\u7f8e\u56fd\u4eba\u5982\u4f55\u5065\u5eb7\u996e\u98df\u7684\u6700\u65b0\u6307\u5357\u3002\u7136\u540e\uff0c\u5f53\u6211\u4eec\u7684\u751f\u6d3b\u5f88\u7cdf\u7cd5\u65f6\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u7cfb\u7edf\u6ca1\u6709\u771f\u6b63\u6fc0\u52b1\u6211\u4eec\u63d0\u4f9b\u5de5\u5177\u3001\u65f6\u95f4\u6216\u8d44\u6e90\u6765\u7167\u987e\u6211\u4eec\u81ea\u5df1\uff0c\u8fd9\u5c31\u9a71\u4f7f\u6211\u4eec\u76f4\u63a5\u6295\u5165\u5230\u533b\u7597\u4fdd\u5065\u548c\u4fdd\u9669\u884c\u4e1a\u7684\u6000\u62b1\u4e2d\u3002\n\u8fd9\u662f\u5bf9\u7684\uff1b\u90a3\u4e9b\u5728\u7f8e\u56fd\u5927\u578b\u5065\u5eb7\u76f8\u5173\u4f01\u4e1a\u53e3\u888b\u91cc\u7684\u653f\u5ba2\u4eec\u53ef\u4ee5\u4e0d\u662f\u4e00\u6b21\uff0c\u800c\u662f\u4e24\u6b21\u4f9d\u9760\u6211\u4eec\u611a\u8822\u7684\u5c0f\u5c0f\u751f\u8ba1\u3002\u8ba9\u98df\u54c1\u3001\u996e\u98df\u548c\u8865\u5145\u5242\u6e38\u8bf4\u56e2\u4f53\u9a71\u4f7f\u6211\u4eec\u8fdb\u5165\u4e0d\u5065\u5eb7\u7684\u751f\u6d3b\u65b9\u5f0f\uff0c\u7cd6\u5c3f\u75c5\u3001\u5fc3\u810f\u75c5\u548c\u9ad8\u8840\u538b\u7b49\u7b49\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u9700\u8981\u4e25\u8083\u7684\u533b\u7597\u5e72\u9884\uff0c\u957f\u65f6\u95f4\u4f4f\u9662\uff0c\u7535\u89c6\u5e7f\u544a\u4e2d\u5ba3\u4f20\u7684\u82b1\u54e8\u7684\u65b0\u836f(\u7f8e\u56fd\u53ea\u662f\u4e24\u4e2a\u5408\u6cd5\u7684\u56fd\u5bb6\u4e4b\u4e00)\u3002\n\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u9634\u8c0b\u8bba\uff0c\u4f46\u9634\u8c0b\u8bba\u4e0d\u53ef\u80fd\u6bcf\u5929\u90fd\u5728\u6211\u4eec\u773c\u524d\u53d1\u751f\uff0c\u5bf9\u5417\uff1f\u6211\u4eec\u9009\u62e9\u5403\u9ea6\u5f53\u52b3\uff0c\u800c\u4e0d\u662f\u6bcf\u5361\u8def\u91cc\u4ef7\u683c\u9ad8\u51fa\u8bb8\u591a\u500d\u7684\u65b0\u9c9c\u6c34\u679c\u548c\u852c\u83dc\uff0c\u5bf9\u5417\uff1f\u8fd9\u4e0d\u662f\u56e0\u4e3a\u725b\u8089\u3001\u4e73\u5236\u54c1\u548c\u571f\u8c46\u884c\u4e1a\u901a\u8fc7\u6e38\u8bf4\u83b7\u5f97\u4e86\u5de8\u989d\u8865\u8d34\uff0c\u800c\u662f\u56e0\u4e3a\u5982\u679c\u6211\u4eec\u5403\u4e86\u5927\u91cf\u7684\u725b\u8089\u3001\u4e73\u5236\u54c1\u548c\u571f\u8c46\uff0c\u6211\u4eec\u6700\u7ec8\u66f4\u6709\u53ef\u80fd\u56e0\u6162\u6027\u75c5\u4f4f\u8fdb\u533b\u9662\uff0c\u8ba9\u533b\u9662\u548c\u4fdd\u9669\u516c\u53f8\u7ed9\u6211\u4eec\u6324\u5976\uff1f\n\u6211\u4eec\u5728\u8fd9\u4e2a\u56fd\u5bb6\u5bf9\u9884\u9632\u533b\u5b66\u53ea\u6709\u6700\u57fa\u672c\u7684\u624b\u52bf\uff0c\u540c\u65f6\uff0c\u51e0\u4e4e\u6bcf\u4e00\u4e2a\u8868\u9762\u4e0a\u4e3a\u4e86\u4fdd\u62a4\u6211\u4eec\u800c\u5b58\u5728\u7684\u7ed3\u6784\u90fd\u88ab\u4f01\u4e1a\u7684\u5f71\u54cd\u6240\u8150\u8680\u3002\u8fd9\u4e00\u6a21\u5f0f\u7684\u4e00\u4e2a\u6700\u65b0\u4f8b\u5b50\u662f\uff1a\u6211\u56fd\u653f\u5e9c\u5bf9\u51a0\u72b6\u75c5\u6bd2\u7684\u53cd\u5e94\u4e0d\u662f\u901a\u8fc7\u53ef\u9760\u7684\u63a5\u89e6\u8005\u8ffd\u8e2a\u3001\u4e00\u81f4\u7684\u8054\u90a6\u7ea7\u516c\u5171\u4fe1\u606f\u6216\u5e7f\u6cdb\u53ef\u7528\u7684\u514d\u8d39\u5feb\u901f\u68c0\u6d4b\u7b49\u9884\u9632\u6027\u63aa\u65bd\u6765\u7ba1\u7406\u5b83\u3002(\u5b83\u786e\u5b9e\u627f\u8bfaCOVID\u6d4b\u8bd5\u5c06\u662f\u514d\u8d39\u7684\uff0c\u4f46\u6d4b\u8bd5\u4ecd\u7136\u53d7\u5230\u9650\u5236\uff0c\u5c3d\u7ba1\u5982\u6b64\uff0c\u4fdd\u9669\u516c\u53f8\u548c\u533b\u7597\u4e2d\u5fc3\u8fd8\u662f\u8bbe\u6cd5\u9003\u8131\u4e86\u5404\u79cd\u6076\u4f5c\u5267\u7684\u60e9\u7f5a\uff0c\u4ece\u9644\u52a0\u65e0\u5173\u7684\u8d39\u7528\u5230\u62d2\u7edd\u4eba\u4eec\u8fdb\u884c\u5b9e\u9645\u6d4b\u8bd5\uff0c\u4ee5\u4fbf\u5c06\u4ed6\u4eec\u7684\u6765\u8bbf\u6807\u8bb0\u4e3a\u4e0e\u51a0\u72b6\u75c5\u6bd2\u65e0\u5173)\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u653f\u5e9c\u6295\u5165\u4e86\u66f4\u591a\u7684\u7cbe\u529b\u6765\u5f00\u53d1\u9488\u5bf9\u5df2\u7ecf\u60a3\u75c5\u7684\u4eba\u7684\u6cbb\u7597\u65b9\u6cd5\uff0c\u5305\u62ec\u6388\u4e88Regeneron\u516c\u53f84.5\u4ebf\u7f8e\u5143\u7684\u5408\u540c\uff0cRegeneron\u516c\u53f8\u751f\u4ea7\u7279\u6717\u666e\u611f\u67d3COVID\u65f6\u670d\u7528\u7684\u591a\u514b\u9686\u6297\u4f53\u9e21\u5c3e\u9152\uff0c\u4ee5\u53ca\u4f30\u8ba19900\u4e07\u7f8e\u5143\u7684\u7a0e\u91d1\uff0c\u7528\u4e8e\u5c06redesivir\u5f00\u53d1\u6210COVID\u6cbb\u7597\u3002\u5982\u679c\u8fd9\u4e9b\u6cbb\u7597\u6210\u4e3a\u6807\u51c6\uff0c\u4eba\u4eec\u5c06\u518d\u6b21\u88ab\u6536\u53d6\u8d39\u7528\uff1a\u636e\u4f30\u8ba1\uff0c\u96f7\u7c73\u5fb7\u97e6\u4e00\u4e2a\u7597\u7a0b\u7684\u8d39\u7528\u4e3a3120\u7f8e\u5143\uff0c\u6bcf\u4e2a\u6297\u4f53\u6cbb\u7597\u7684\u8d39\u7528\u4e3a\u6570\u5343\u7f8e\u5143\u3002\u8fd9\u66f4\u4e0d\u7528\u8bf4\u4efb\u4f55COVID\u76f8\u5173\u5e76\u53d1\u75c7\u7684\u6cbb\u7597\u8d39\u7528\u4e86\u3002\u8fd9\u5bf9\u603b\u7edf\u6765\u8bf4\u4e00\u5b9a\u5f88\u597d\uff0c\u4ed6\u62e5\u6709\u5f00\u53d1\u8fd9\u4e9b\u7597\u6cd5\u7684\u516c\u53f8\u7684\u80a1\u7968\u3002\n\u8fd9\u4e0e\u5065\u8eab\u5927\u5e08\u63d0\u4f9b\u7684\u53e4\u602a\u89e3\u51b3\u65b9\u6848\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u4e3b\u8981\u662f\u56e0\u4e3a\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u88ab\u5982\u6b64\u79ef\u6781\u5730\u8bbe\u8ba1\u6210\u5bf9\u6211\u4eec\u4e0d\u5229\uff0c\u5bf9\u5bc4\u751f\u866b\u6709\u5229\u3002\u5982\u679c\u4e00\u4f4d\u5065\u8eab\u5927\u5e08\u9677\u5bb3\u4f60\uff0c\u8ba9\u4f60\u76f8\u4fe1\u4ed6\u4eec\u7684\u4f53\u578b\u662f\u591a\u5e74\u52aa\u529b\u7684\u7ed3\u679c(\u6216\u8005\u662f\u7c7b\u56fa\u9187\u548c\u5b89\u975e\u4ed6\u660e\uff0c\u8c01\u77e5\u9053\u8fd8\u6709\u4ec0\u4e48)\uff0c\u53ea\u970020\u7f8e\u5143\u7684\u4e00\u5957\u6a61\u80f6\u5065\u8eab\u8170\u5e26\uff0c\u6216\u800512\u7f8e\u5143\u7684\u51cf\u80a5\u8336\u6df7\u5408\u7269\uff0c\u6216\u800535\u7f8e\u5143\u7684\u201c\u8d85\u7ea7\u7537\u6027\u6d3b\u529b\u8840\u6e05\u201d\uff0c\u6211\u4eec\u5c31\u4f1a\u5f3a\u70c8\u5730\u76f8\u4fe1\u4ed6\u4eec\uff0c\u4ed6\u4eec\u6ca1\u6709\u8d23\u4efb\u8bc1\u660e\u4efb\u4f55\u4e8b\u60c5\u3002\n(\u8bb8\u591a\u4eba\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46FDA\u5bf9\u8865\u5145\u5242\u7684\u76d1\u7ba1\u662f\u53cd\u5e94\u6027\u7684\uff0c\u800c\u4e0d\u662f\u4e3b\u52a8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u5bb6\u516c\u53f8\u8981\u5c06\u8865\u5145\u5242\u6295\u653e\u5e02\u573a\u6240\u9700\u505a\u7684\u5c31\u662f\u63d0\u4ea4\u4e00\u4efd\u4ed6\u4eec\u81ea\u5df1\u59d4\u6258\u7684\u57fa\u672c\u62a5\u544a\uff0c\u8868\u660e\u4ea7\u54c1\u5e76\u4e0d\u5371\u9669\uff1bFDA\u4f1a\u76f8\u4fe1\u4efb\u4f55\u4eba\uff0c\u76f4\u5230\u4eba\u4eec\u5f00\u59cb\u88ab\u4e00\u79cd\u4ea7\u54c1\u4f24\u5bb3\uff0c\u5e76\u8bbe\u6cd5\u5c06\u5176\u4e0e\u4f24\u5bb3\u4ed6\u4eec\u7684\u4ea7\u54c1\u8054\u7cfb\u8d77\u6765\u3002)\u3002\n\u5f53\u7136\uff0c\u6709\u4e9b\u4eba\uff0c\u5bcc\u4eba\uff0c\u4ed6\u4eec\u6709\u65f6\u95f4\u73cd\u89c6\u81ea\u5df1\u7684\u5065\u5eb7\uff0c\u5728\u4e0a\u9762\u6295\u5165\u91d1\u94b1\u548c\u65f6\u95f4\uff0c\u5e76\u57f9\u517b\u5bf9\u5065\u5eb7\u7684\u6574\u4f53\u7231\u597d\u3002\u5728\u8fc7\u53bb\u5341\u5e74\u5de6\u53f3\u7684\u65f6\u95f4\u91cc\uff0c\u5065\u5eb7\u884c\u4e1a\u7684\u4ef7\u503c\u6fc0\u589e\u662f\u6709\u539f\u56e0\u7684\uff1a\u751f\u6d3b\u65b9\u5f0f\u75be\u75c5\u7684\u589e\u52a0\u8ba9\u6211\u4eec\u8fdb\u5165\u4e86\u8f6c\u6298\u70b9\uff0c\u800c\u73b0\u5728\u7167\u987e\u597d\u81ea\u5df1\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u4f18\u5148\u4e8b\u9879\u3002\u6240\u4ee5\u5bcc\u4eba\u6709\u5174\u8da3\u82b1\u8fd9\u4e9b\u65f6\u95f4\u548c\u91d1\u94b1\u6d3b\u5f97\u66f4\u957f\u66f4\u597d\uff1b\u8fd9\u5c31\u662f\u6211\u4eec\u5f97\u523066\u7f8e\u5143\u7389\u86cb\u7684\u539f\u56e0\u3002\n\u4f46\u6211\u4eec\u5176\u4f59\u7684\u4eba\u53d1\u73b0\uff0c\u6211\u4eec\u628a\u5065\u5eb7\u653e\u5728\u9996\u4f4d\u7684\u613f\u671b\u4e25\u91cd\u53d7\u635f\u3002\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u9677\u5165\u4e86\u8fd9\u79cd\u4e0d\u53ef\u80fd\u7684\u5883\u5730\uff0c\u83b7\u80dc\u662f\u4e00\u573a\u8270\u82e6\u7684\u6597\u4e89\uff1a\u6211\u4eec\u7684\u996e\u98df\u662f\u7531\u5927\u4f01\u4e1a\u8bbe\u8ba1\u7684\uff0c\u8feb\u4f7f\u6211\u4eec\u60a3\u4e0a\u6162\u6027\u751f\u6d3b\u65b9\u5f0f\u75be\u75c5\uff1b\u6211\u4eec\u7684\u6536\u5165\u5728\u8fc7\u53bb\u51e0\u5341\u5e74\u91cc\u4e00\u76f4\u7531\u73b0\u5728\u5728\u4e16\u7684\u6700\u5bcc\u6709\u7684\u4eba\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u4ee5\u81f3\u4e8e\u6211\u4eec\u4e0d\u5f97\u4e0d\u5de5\u4f5c\u8d8a\u6765\u8d8a\u957f\u7684\u65f6\u95f4\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u539f\u5730\u8e0f\u6b65\uff0c\u907f\u514d\u7533\u8bf7\u7834\u4ea7\uff0c\u6240\u4ee5\u6211\u4eec\u65e2\u8d1f\u62c5\u4e0d\u8d77\u953b\u70bc\u7684\u8d39\u7528\uff0c\u4e5f\u6ca1\u6709\u65f6\u95f4\u953b\u70bc\uff1b\u4ece\u7cbe\u795e\u548c\u60c5\u611f\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u8ba9\u6211\u4eec\u652f\u79bb\u7834\u788e\u3002\n\u6211\u4eec\u611f\u89c9\u5f88\u7cdf\u7cd5\uff0c\u611f\u89c9\u66f4\u7cdf\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u8d44\u6e90\u53bb\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u6b63\u662f\u5728\u8fd9\u4e2a\u9ed1\u6697\u7684\u65f6\u523b\uff0c\u901f\u6548\u51cf\u80a5\u6cd5\u5e94\u8fd0\u800c\u751f\uff0c\u65b0\u7684\u953b\u70bc\u8bbe\u5907\u627f\u8bfa\u5728\u4e00\u5468\u5185\u5b9e\u73b0\u6781\u7aef\u7684\u6548\u679c\uff0c\u6bd4\u5982\u516b\u5757\u8179\u808c\u3002\u6211\u4eec\u77e5\u9053\uff0c\u5728\u5065\u5eb7\u65b9\u9762\uff0c\u6211\u4eec\u6240\u5904\u7684\u4f4d\u7f6e\u548c\u6211\u4eec\u5e94\u8be5\u8fbe\u5230\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5dee\u8ddd\u662f\u5de8\u5927\u7684\uff1b\u540c\u6837\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u771f\u6b63\u7684\u65f6\u95f4\u6216\u91d1\u94b1\u6765\u81f4\u529b\u4e8e\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6709\u4eba\u8bb8\u8bfa\u6211\u4eec\u80fd\u5728\u6709\u9650\u7684\u65f6\u95f4\u548c\u91d1\u94b1\u4e0b\u5230\u8fbe\u90a3\u91cc\uff0c\u4ed6\u4eec\u5c31\u4f1a\u628a\u80ae\u810f\u7684\u624b\u6307\u76f4\u63a5\u6316\u5230\u5065\u5eb7\u8d1f\u7f6a\u611f\u7684\u4f24\u53e3\u4e0a\uff0c\u7136\u540e\u6211\u4eec\u4f1a\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u628a\u81ea\u5df1\u6316\u51fa\u6765\u3002\n\u5982\u679c\u4f60\u786e\u5b9e\u6709\u4e00\u70b9\u65f6\u95f4\u548c\u7cbe\u529b\uff0c\u8bd5\u7740\u628a\u81ea\u5df1\u4ece\u8fd9\u573a\u901f\u6218\u901f\u51b3\u7684\u6fc0\u70c8\u7ade\u4e89\u4e2d\u62c9\u51fa\u6765\uff0c\u5e76\u8bd5\u7740\u6ce8\u610f\u5230\uff0c\u5f53\u4f60\u8bd5\u56fe\u6446\u8131\u5bf9\u5065\u5eb7\u7684\u8d1f\u7f6a\u611f\u65f6\uff0c\u6700\u7ec8\u53ea\u662f\u5728\u90a3\u4e9b\u5783\u573e\u4e1c\u897f\u4e0d\u8d77\u4f5c\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u904d\u53c8\u4e00\u904d\u5730\u5931\u671b\u548c\u8d23\u602a\u81ea\u5df1\uff0c\u8fd9\u662f\u503c\u5f97\u7684\u3002\u6709\u4e00\u4e9b\u975e\u5e38\u57fa\u672c\u7684\u6d3b\u52a8\u662f\u6709\u6548\u7684\uff0c\u6bd4\u5982\u6563\u6b65\uff0c\u4f38\u5c55\u8eab\u4f53\uff0c\u8e72\u4e0b/\u4fef\u5367\u6491/\u6392\u8d77/\u4e3e\u91cd\uff0c\u4e00\u5929\u5403\u4e00\u987f\u852c\u83dc\u548c\u51e0\u987f\u996d\u3002\u5982\u679c\u4f60\u4e00\u5468\u6709\u51e0\u4e2a\u5c0f\u65f6\uff0c\u4f60\u5c31\u6709\u65f6\u95f4\u505a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u8fd9\u53ea\u662f\u5de5\u4f5c\uff0c\u4f60\u5fc5\u987b\u4ece\u8fd9\u4e0d\u5bb9\u6613\u7684\u60f3\u6cd5\u5f00\u59cb\u3002\u8fd9\u5e76\u4e0d\u662f\u975e\u5e38\u56f0\u96be\uff0c\u4f46\u5c31\u50cf\u6211\u4eec\u7684\u5de5\u4f5c\u548c\u5065\u5eb7\u996e\u98df\u4e00\u6837\uff0c\u6559\u6211\u4eec\u7684\u4f34\u4fa3\u4f60\u5fc5\u987b\u628a\u9910\u5177\u5f80\u4e0a\u6307\uff0c\u800c\u4e0d\u662f\u5f80\u4e0b\u653e\u5728\u6d17\u7897\u673a\u91cc\uff0c\u5426\u5219\u5b83\u4eec\u5c31\u4e0d\u4f1a\u5e72\u51c0\uff0c\u8fd9\u5e76\u4e0d\u603b\u662f\u6709\u8da3\u7684\uff1b\u8fd9\u662f\u5bf9\u4f60\u6574\u4f53\u798f\u7949\u548c\u5e78\u798f\u611f\u7684\u6295\u8d44\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e00\u751f\u90fd\u4f1a\u57f9\u517b\u8fd9\u79cd\u5e73\u8861\uff0c\u4f46\u5feb\u901f\u89e3\u51b3\u65b9\u6848\u8981\u5bb9\u6613\u5f97\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u9ed8\u8ba4\u8fd9\u6837\u505a\u3002\n\u4f60\u4f1a\u6ce8\u610f\u5230\uff0c\u53e4\u602a\u7684\u4e1c\u897f\u548c\u771f\u6b63\u7684\u4e1c\u897f\u4f3c\u4e4e\u662f\u5e76\u6392\u51fa\u552e\u7684\uff0c\u5f80\u5f80\u662f\u540c\u4e00\u4e2a\u4eba\u5356\u7684\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u5e02\u573a\u7ec6\u5206\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u7535\u89c6\u4e0a\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u6bd4\u65b9\u8bf4\u7535\u89c6\u3002\u67094,700727\u82f1\u5bf8\u7684LG OLED4K\u7535\u89c6\uff0c\u8fd8\u6709150\u7f8e\u5143\u768436\u82f1\u5bf8brand-that-won&#39\uff1bt-be-named-but-the-backlight-is-sure-to-die-precisely-two-months-after-the-warranty-runs-out.\u3002\u5c31\u7b2c\u4e8c\u53f0\u7535\u89c6\u800c\u8a00\uff0c\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u5b83\u53ef\u80fd\u4e0d\u662f\u4e00\u4ef6\u771f\u6b63\u7684\u5783\u573e\uff0c\u5e76\u4e0d\u80fd\u771f\u6b63\u8d77\u4f5c\u7528\uff0c\u603b\u4f53\u6765\u8bf4\u662f\u4e00\u79cd\u53ef\u6015\u7684\u4f53\u9a8c\uff0c\u56e0\u4e3a\u5b83\u770b\u8d77\u6765\u548c\u4f7f\u7528\u8d77\u6765\u90fd\u8db3\u591f\u50cf4700\u7f8e\u5143\u76844K\u7535\u89c6\u3002\u4f46\u662f\u5982\u679c\u4f60\u5bf9\u7535\u89c6\u6709\u4efb\u4f55\u4e86\u89e3\uff0c\u4f60\u5c31\u77e5\u9053\u5b83\u662f\u771f\u7684\u3002\u5982\u679c\u4f60\u5bf9\u5065\u8eab\u6709\u6240\u4e86\u89e3\uff0c\u4f60\u5c31\u4f1a\u77e5\u905324\u7f8e\u5143\u7684\u8170\u90e8\u6559\u7ec3\u548c\u6f2b\u5a01\u7535\u5f71\u4e2d\u4ece\u6559\u7ec3\u5230\u6240\u6709\u540d\u4eba\u7684\u4e2a\u4eba\u6559\u7ec3\u5b8c\u5168\u4e0d\u540c\u3002\u4f46\u5728\u8fd9\u4e24\u8005\u4e4b\u95f4\u6709\u5f88\u591a\u597d\u4e1c\u897f\u3002\n\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u533a\u5206\u771f\u6b63\u7684\u4ea4\u6613\u548c\u65f6\u5c1a\u5462\uff1f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u53ea\u662f\u5728\u6559\u80b2\u6211\u4eec\u81ea\u5df1\u3002\u5c31\u50cf\u5065\u5eb7\u672c\u8eab\u4e00\u6837\uff0c\u5e76\u6ca1\u6709\u4e00\u6761\u771f\u6b63\u7684\u6377\u5f84\u3002\u6709\u51e0\u4e2a\u6280\u5de7\u548c\u5371\u9669\u4fe1\u53f7\u9700\u8981\u5bfb\u627e\u3002\n\u8ba9\u6211\u6f84\u6e05\u4e00\u4e0b\uff1a\u4f60\u4e0d\u9700\u8981\u82b1\u94b1\u6765\u5b66\u4e60\u5982\u4f55\u953b\u70bc\u548c\u53d8\u5f97\u66f4\u5f3a\u58ee\u3002\u5c31\u50cf\u4efb\u4f55\u5f62\u5f0f\u7684\u5b66\u6821\u548c\u81ea\u5b66\u76f8\u6bd4\uff0c\u514d\u8d39\u81ea\u5b66\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\u3001\u7814\u7a76\u548c\u8010\u5fc3\uff1b\u81f3\u5c11\u4f60\u9700\u8981\u559c\u6b22\uff0c\u4e70\u4e00\u4e9b\u5b66\u4e60\u6750\u6599\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u4ece\u4e00\u4f4d\u597d\u6559\u7ec3\u90a3\u91cc\u83b7\u5f97\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4ed6\u4f1a\u6559\u4f60\u4e1c\u897f\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u8ba9\u4f60\u505a\u4e8b\u60c5\u3002\n\u4f46\u4e5f\u8981\u8bb0\u4f4f\uff0c\u4efb\u4f55\u770b\u8d77\u6765\u975e\u5e38\u96be\u505a\u7684\u4e8b\u60c5\u90fd\u4e0d\u4e00\u5b9a\u662f\u66f4\u597d\u7684\u3002\u4e00\u4e2a\u6bcf\u5929\u82b1\u4e24\u4e2a\u5c0f\u65f6\u7684\u953b\u70bc\u8ba1\u5212\uff0c\u8ba9\u4f60\u9178\u75db\u5230\u65e0\u6cd5\u52a8\u5f39\uff0c\u5e76\u627f\u8bfa\u5728\u4e09\u4e2a\u6708\u5185\u8ba9\u4f60\u51cf\u6389100\u78c5\uff0c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u5b83\u66f4\u591a\u7684\u662f\u5728\u63a0\u593a\u4f60\u7684\u8d1f\u7f6a\u611f\uff0c\u800c\u4e0d\u662f\u771f\u6b63\u8bd5\u56fe\u5e2e\u52a9\u4f60\u3002\u6211\u53ef\u4ee5\u8bf4\uff0c\u4efb\u4f55\u8bd5\u56fe\u5728\u4e00\u591c\u4e4b\u95f4\u5f7b\u5e95\u6539\u53d8\u4f60\u7684\u5b58\u5728\uff0c\u7279\u522b\u662f\u4f60\u7684\u5916\u8868\u7684\u7a0b\u5e8f\uff0c\u90fd\u662f\u80e1\u8bf4\u516b\u9053\u3002\u5bfb\u627e\u90a3\u4e9b\u5ba3\u626c\u53ef\u6301\u7eed\u8fdb\u6b65\u548c\u6559\u4f60\u6280\u80fd\u7684\u4e1c\u897f(\u6bd4\u5982\u529b\u91cf\u8bad\u7ec3\uff01\uff01)\u3002\u800c\u4e0d\u662f\u60e9\u7f5a\u4f60\u3002\n\u4f46\u53e6\u4e00\u4e2a\u6781\u7aef\u4e5f\u662f\u80e1\u8bf4\u516b\u9053\u3002\u4efb\u4f55\u80fd\u5feb\u901f\u3001\u5ec9\u4ef7\u3001\u7b80\u5355\u5730\u4fee\u590d\u4f60\u7684\u751f\u6d3b\u7684\u4e8b\u60c5\uff0c\u90fd\u53ea\u662f\u60f3\u4ece\u4f60\u8eab\u4e0a\u5feb\u901f\u8d5a\u523030\u7f8e\u5143\u3002\u4f46\u662f\uff0c\u4efb\u4f55\u6bcf\u6708\u82b1\u8d39\u6570\u767e\u7f8e\u5143\u7684\u4e1c\u897f\uff0c\u8981\u4e48\u4e5f\u662f\u5728\u5229\u7528\u4f60\u5c1d\u8bd5\u4e86\u5f88\u591a\u5f88\u591a\u4e1c\u897f\u800c\u6ca1\u6709\u575a\u6301\u4efb\u4f55\u4e00\u4ef6\u4e8b\u60c5\u7684\u8d1f\u7f6a\u611f(\u55ef\u54fc\uff0c\u52a8\u611f\u5355\u8f66\u8bfe\u7a0b\uff0c\u975e\u5e38\u82b1\u54e8\u7684\u5065\u8eab\u4ff1\u4e50\u90e8\u4f1a\u5458\u8d44\u683c)\uff0c\u8981\u4e48\u5c31\u662f\u771f\u7684\u627f\u8bfa\u4e86\u4e00\u4e9b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u4e25\u8083\u548c\u5177\u4f53\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u5982\u679c\u4f60\u4e0d\u662f\u771f\u6b63\u575a\u6301\u953b\u70bc\u7684\u4eba\uff0c\u6211\u5f88\u62b1\u6b49\u5730\u8bf4\uff0c\u4f60\u7edd\u5bf9\u4e0d\u662f\u4e00\u4e2a\u521a\u521a\u88ab\u9009\u4e3a\u7eff\u5de8\u4eba\u7684\u804c\u4e1a\u8fd0\u52a8\u5458\u6216\u4e00\u7ebf\u5973\u6f14\u5458\u3002\u5176\u4ed6\u6301\u4e2d\u95f4\u7acb\u573a\u7684\u4eba\uff0c\u6211\u5f88\u6709\u4fe1\u5fc3\u5730\u8bf4\uff0c\u6211\u4eec\u6709\u8d1f\u62c5\u5f97\u8d77\u7684\u9009\u62e9\u3002\u8fd9\u4e9b\u662f\u4f60\u6bcf\u6708\u7684\u953b\u70bc\u8ba1\u5212\uff0c\u4f60\u7684\u6d88\u8d39\u7ea7\u5065\u8eab\u623f\u4f1a\u5458\u8d44\u683c\uff0c\n\u6240\u6709\u8fd9\u4e9b\u90fd\u8868\u660e\uff0c\u5982\u679c\u4f60\u4e0d\u5c1d\u8bd5\uff0c\u4f60\u662f\u5b66\u4e0d\u4f1a\u7684\u3002\u52aa\u529b\u7167\u987e\u597d\u81ea\u5df1\u53ea\u4f1a\u662f\u4e00\u6b21\u5b66\u4e60\u7684\u7ecf\u5386\u3002\u4e0d\u8981\u4e3a\u5728\u4f60\u7684\u5065\u5eb7\u4e0a\u82b1\u4e00\u4e9b\u94b1\u800c\u611f\u5230\u5185\u759a\uff1b\u4f60\u53ea\u6709\u4e00\u4e2a\u8eab\u4f53\uff0c\u6211\u4eec\u51e0\u4e4e\u6ca1\u6709\u4ece\u5e94\u8be5\u6559\u6211\u4eec\u7684\u4eba\u90a3\u91cc\u5f97\u5230\u5173\u4e8e\u5982\u4f55\u7ba1\u7406\u5b83\u7684\u6307\u5bfc\uff0c\u800c\u6211\u4eec\u90fd\u8fd8\u5728\u5b66\u4e60\u3002\u4e0d\u8981\u62d8\u6ce5\u4e8e\u5408\u540c\uff0c\u5728\u4f60\u7b7e\u7ea6\u4e4b\u524d\u786e\u4fdd\u4efb\u4f55\u4e1c\u897f\u90fd\u5f88\u5bb9\u6613\u53d6\u6d88\uff1b\u73b0\u5728\u6709\u8fd9\u4e48\u591a\u5065\u5eb7\u7528\u54c1\u7684\u9009\u62e9\uff0c\u4e0d\u6d89\u53ca\u4e00\u5e74\u7684\u5408\u540c\u548c\u5176\u4ed6\u8bf8\u5982\u6b64\u7c7b\u7684\u5e9f\u8bdd\u3002\u4f46\u662f\u6709\u5404\u79cd\u5404\u6837\u7684\u4e1c\u897f\uff0c\u9664\u975e\u4f60\u5c1d\u8bd5\u8fc7\uff0c\u5426\u5219\u4f60\u4e0d\u4f1a\u77e5\u9053\u8c01\u7684\u65af\u8482\u5179\u4f1a\u4e3a\u4f60\u5de5\u4f5c\u3002\u4f60\u53ef\u80fd\u4e0d\u4f1a\u77e5\u9053\u4ec0\u4e48\u662f\u5047\u7684\uff0c\u76f4\u5230\u4f60\u88ab\u70e7\u4f24\u4e86\u51e0\u6b21\uff0c\u4f46\u6211\u6240\u8981\u6c42\u7684\u662f\uff0c\u4f60\u8981\u5bf9\u95ee\u9898\u4e0d\u662f\u4f60\u81ea\u5df1\u7684\u53ef\u80fd\u6027\u6301\u5f00\u653e\u6001\u5ea6\u3002\n\u514d\u8d23\u58f0\u660e\uff1a\u51ef\u897f\u00b7\u7ea6\u7ff0\u65af\u987f\u4e0d\u662f\u533b\u751f\u3001\u8425\u517b\u5b66\u5bb6\u3001\u8425\u517b\u5e08\u3001\u79c1\u4eba\u6559\u7ec3\u3001\u7269\u7406\u6cbb\u7597\u5e08\u3001\u5fc3\u7406\u6cbb\u7597\u5e08\u3001\u533b\u751f\u6216\u5f8b\u5e08\uff1b\u5979\u53ea\u662f\u4e00\u4e2a\u505a\u8fc7\u5f88\u591a\u4e3e\u91cd\u8fd0\u52a8\uff0c\u8bfb\u8fc7\u5f88\u591a\u5173\u4e8e\u4e3e\u91cd\u7684\u4e66\u7684\u4eba\u3002\n\u4f60\u53ef\u4ee5\u5728\u53d1\u5939\u7f51\u7ad9\u548c\u81ea\u6211\u7f51\u7ad9\u4e0a\u9605\u8bfb\u8fc7\u53bb\u7684Ask A Swole Women\u4e13\u680f\uff0c\u5e76\u5728Instagram\u4e0a\u5173\u6ce8And A Swole Women\u3002\u6709\u95ee\u9898\u8981\u95ee\u5979\u5417\uff1f\u7535\u5b50\u90ae\u4ef6\uff1aswole.Women@vice.com\u3002", "note_en": "Sick of clean eating, perfect gym outfits, and chiseled abs? A Swole Woman is here to help you be healthy, enjoy carbs, and get jacked.\n    I\u2019ve been lifting on and off since high school, having done so in an I-want-to-add-10lbs approach after high school, an I-want-to-run-a-fast-400m approach in college, and an I-want-to-maintain-without-too-much-work approach in my 20s.\n  I fell out of love with gyms somewhere along the way and in early March \u2014 before the Great Kettlebell Shortage \u2014 I got into Pavel Tsatsouline\u2019s Simple and Sinister. As a reporter, a busy person, and a functional strength enthusiast, I really liked Tsatsouline\u2019s approach and the goal of ruggedness/utility and injury prevention, which seems so often deprioritized compared to things like strength and physique/looks.\n  Anyway, I\u2019ve been loving kettlebell training\u2019s efficiency and utility, and I wanted to learn more beyond Pavel\u2019s books. Then I listened to his Tim Ferriss podcast and\u2026. holy\u2026 fucking shit!\n  I read a little bit and Dwight Garner\u2019s NYTimes masterpiece of a  review of Ferriss&#39;s 4 hour body book  and MAMMA MIA THIS SHIT IS NUTS, doling out weird fitness advice and taking fertility drugs and eating various foods as medicine. This is some Alex Jones shit, no? How are we not talking about this??\n  This got me thinking about how adjacent to good advice and more academically focused stuff is this well of crazy that lurks just below the surface that I only assume finishes in getting caught with a suitcase of T by the Australian authorities like Sly Stallone. Why are fitness forums and Reddits and the like always a stones throw from crazytown?? Why is the  carnivore James Blunt scurvy diet  (fucking nuts) only a few clicks away from kettlebell swings (fucking great!)? - Ethan\n  Man, I so appreciate the opportunity to revisit Tim Ferriss, since he came a little before my time and it feels like  many dudes who were fascinated with him. You are not quite asking how \u201creal\u201d anything that Tim Ferriss says is, or any sort of health/wellness/fitness fad. But you also sort of are, in noting that the stuff that works and is good is often positioned so close to the stuff that is just trying to drain you of resources and is bad. In the specific case of Tim Ferriss, but also any fitness fad, I think it\u2019s important to look at longevity. No one really follows his regimen anymore, at least certainly not the number of guys who it caught on with in the first place. We certainly haven\u2019t all started, to paraphrase the book review, taking ginger and sauerkraut (???) if we are \u201cundermuscled\u201d or upping our saturated fat and cold exposure when we \u201ccan\u2019t sleep.\u201d\n  I don\u2019t recall if he gives any justification for these things, but they simply don\u2019t make sense, and now we can safely say, if this were the key, we\u2019d all be doing it by now. The parts of his philosophy that you might say have stuck, like \u201ceat whole grains instead of \u2018white\u2019 carbs,\u201d were  not unique concepts he came up with.\n  This all easy to say in hindsight, but I want to dig deeper into how we experience this stuff, and health stuff in general, to try and land on a theory of how, exactly, we are supposed to distinguish the good and helpful health advice (that might even be worth paying for!) from that which is deranged, or even reckless and harmful.\n    But in the broader case, our overall systemic approach to health is set up to create both real anxieties and phantom \u201cneeds,\u201d but also not give us enough resources to meaningfully change our health without a lot of uphill work, so we are perfectly primed to shower the loudest and most self-assured-sounding influencer with money in hopes they can fix us.\n Do you have a question about working out, eating, health, or why you shouldn&#39;t be afraid of lifting heavy weights? Send it to  swole.woman@vice.com   and follow\u00a0 @swolewoman\u00a0  on Instagram.\n  Nutrition recommendations, and even nutrition labels, have been lorded over by lobbyists for decades; the corn lobby, the dairy lobby. Look at  how the dairy industry forced its way onto the latest &#34;My Plate&#34; guidance instructing Americans on how to eat healthy. And then, when we have terrible lives because our system is not really incentivized to give us the tools or time or resources to take care of ourselves, that drives us right into the arms of the healthcare and insurance industries.\n  That&#39;s right; politicians who are in the pockets of big American health-related businesses can score not once, but twice on our dumb little livelihoods. Let the food and diet and supplement lobbies drive us into an unhealthy lifestyle, diabetes and heart disease and high blood pressure and so forth, to the point that we need serious medical intervention, long hospital stays, fancy new medications that are advertised in TV commercials (the United States is  only one of two countries where this is legal).\n    It would seem like a conspiracy theory except a conspiracy theory couldn&#39;t be happening every day right in front of our eyes, right? We are  choosing to eat the McDonalds and not the fresh fruits and vegetables that cost many times more per calorie, right? It&#39;s not because the beef and dairy and potato industries receive massive subsidies through lobbying, and because if we eat lots of that beef and dairy and potato we&#39;re more likely to end up in the hospital with a chronic illness for a hospital and an insurance company to milk?\n  We have only the barest gestures toward preventative medicine in this country, and meanwhile, nearly every structure that ostensibly exists to protect us has been corrupted by corporate influence. One very recent example of this pattern: Our government&#39;s response to coronavirus has not been to manage it through preventive measures like solid contact tracing, consistent federal-level public messaging, or widely available and free rapid tests. (It did promise COVID tests would be free, but tests are still constrained, and insurance companies and medical centers have nonetheless  somehow managed to get away with all manner of shenanigans, from tacking on extraneous charges to denying people an actual test in order to mark their visit as unrelated to coronavirus). Instead, the government has put far more energy into developing treatments for people who are already sick, including a $450 million contract awarded to Regeneron, the company producing the polyclonal antibody cocktail that Trump took when he contracted COVID, and  an estimated $99 million in tax dollars to develop remdesivir into a COVID treatment. If those treatments become standard,  people will be charged for them again:  an estimated $3,120 for a course of remdesivir, and  a few thousand dollars per antibody treatment. This is to say nothing of the treatment costs of any COVID-related complications. It must be nice for the president, who  owns stock in the companies developing these treatments.\n  What does this have to do with the kooky solutions offered by fitness gurus? Mostly that our infrastructure is so aggressively engineered against us and in favor of parasites. If a fitness guru sets you up to believe that their physique, which is the result of years and years of work (or else, steroids and amphetamines and who knows what else) is achievable with a  $20 set of rubber fitness bands, or a $12 diet tea mix, or a  $35 \u201csuper male vitality serum,\u201d we are highly motivated to believe them, and they have no burden of proving anything.\n   (Many people don&#39;t realize this, but  the FDA regulates supplements reactively, not proactively, meaning all a company has to do to put a supplement on the market is submit a basic report they themselves commissioned indicating the product is not dangerous; the FDA will believe anyone literally until people start getting hurt by a product and manage to make the connection that it&#39;s the product hurting them.)\n   Sure, there are people, wealthy people, who have time to value their health, throwing money and time at it and cultivating the overall hobby of it. There is a reason that the wellness industry has ballooned in value over the last decade or so:  the rise in lifestyle diseases has us steering into the turn, and now &#34;taking care of ourselves&#34; is a huge priority. So rich people have an interest in spending that time and money to live longer and better; that&#39;s how we arrive at  the $66 jade egg.\n    But the rest of us find our desire to prioritize health significantly compromised. We find ourselves in this impossible situation where winning is an uphill struggle: our diets are engineered by big business and force us into chronic lifestyle illnesses; our income has been carefully engineered over the last several decades by the now-wealthiest people alive to never go up, so we have to work longer and longer hours just to tread water and avoid filing for bankruptcy, so we can&#39;t afford to exercise nor do we have time to; and these things tear us to pieces, mentally and emotionally speaking.\n  We feel terrible, and feel even worse about feeling terrible because we have no resources with which to do anything about it. It is in this dark hour that the quick-fix diet solution arrives, the new exercise device promising something extreme like eight pack abs in one week. We know the gap between where we are and where we should be, health wise, is vast; we likewise do not really have time or money to devote to getting there. So if someone is promising we can get there, with a modest amount of time and money, they&#39;re digging their dirty fingers right into that health guilt wound and then we will do anything to dig ourselves out.\n   If you do have a little bit of time and energy, it&#39;s worth it to try and pull yourself out of the quick-fix rat race, and try to notice when you&#39;re trying to band-aid over your guilt about your health but ultimately just disappointing and blaming yourself over and over when that junky stuff doesn\u2019t work. There are pretty basic things that work, like going for a walk, stretching, squats/pushups/rows/deadlifts, eating a vegetable with a couple meals a day. You have time for these things if you have a few hours a week. It\u2019s just going to be work, and you have to begin from the idea that it\u2019s not easy. It\u2019s not devastatingly hard, but just like our jobs and eating healthy and teaching our partners that you have to point the utensils up instead of down in the dishwasher or else they don\u2019t get clean, it\u2019s not fun all of the time; it&#39;s an investment in your overall well-being and happiness. Ideally we would have been cultivating this kind of balance all our lives, but a quick-fix is the far easier option, so we default to that.\n  You note that often the kooky stuff and the real stuff seems to be sold side by side, often by the same person. This is called market segmentation. You also see this in, let&#39;s say TVs. There is the $4,700 727-inch LG OLED 4K TV, and then there is the $150 36-inch brand-that-won&#39;t-be-named-but-the-backlight-is-sure-to-die-precisely-two-months-after-the-warranty-runs-out. In the case of the second TV, it may not be as clear on the surface that it&#39;s a real piece of garbage that doesn&#39;t really work and is an overall terrible experience, because it looks and works enough like the $4,700 4K TV. But if you know anything about TVs, you know that it is. If you know something about working out, you know that a $24 waist trainer is nothing like individual coaching from a trainer to all the celebrities in the Marvel movies. But there is lots of fine stuff in between.\n   So how do we tell the real deals from the fads? Mostly, it\u2019s just educating ourselves. Like being healthy itself, there is not really a shortcut. There are a couple of tricks and red flags to look for.\n    Let me be clear: you don\u2019t have to pay money to learn how to work out and get stronger. Just like any form of school versus being self-taught, teaching yourself for free can take a lot of time and research and patience; at minimum you\u2019re going to need to like, buy some study materials. You can get more than information out of, for instance, a good coach, one who teaches you things instead of just making you do things.\n  But also remember that anything that seems incredibly hard to do is not necessarily better. A workout program that takes two hours every single day and  leaves you so sore you can\u2019t move and promises to make you lose 100 pounds in three months maybe isn\u2019t made to be impossible, but it is preying on your guilt more than actually trying to help you. I\u2019d feel okay about saying that any program that is trying to overhaul your entire existence overnight, especially the way you look, is bullshit. Look for things that preach sustainable progress and teaching you skills ( like strength training!!) versus punishing you.\n   But the other extreme is bullshit, too. Anything that promises to fix your life fast, cheap, and easy is just trying to get a quick 30 bucks out of you. But anything that costs like, hundreds of dollars a month is either also preying on your guilt about having tried lots and lots of stuff and not having stuck with any of it (ahem, spin classes, profoundly fancy health club memberships), or is really promising some incredibly serious and specific expertise. If you\u2019re not the person who has ever really stuck with a workout, you\u2019re, I\u2019m sorry to say, definitely not a pro athlete or A-list actress who\u2019s just been cast as She-Hulk. Everyone else in the middle ground, I feel confident saying we have options that are affordable. These are your monthly workout programs, your consumer-level gym memberships,\n  All of this said, you won\u2019t learn if you don\u2019t try. Trying to take care of yourself just IS going to be a learning experience. Don\u2019t feel guilty about throwing SOME money at your health; you only have one body and we get next to no instruction on how to manage it from the people who should be teaching us, and we\u2019re all still learning. Just don&#39;t get locked into contracts and make sure whatever it is is easy to cancel before you sign up; there are so many options for health stuff now that don\u2019t involve one-year contracts and other bullshit like that. But there is a great variety of stuff out there and you won\u2019t know whose particular steez is going to work for you until you try it. You might not learn what\u2019s fake as hell until you get burned a few times, but all I ask is that you stay open to the possibility that the problem is not you.\n  Disclaimer: Casey Johnston is not a doctor, nutritionist, dietitian, personal trainer, physiotherapist, psychotherapist, doctor, or lawyer; she is simply someone who has done a lot of, and read a lot about, lifting weights.\n  You can read past Ask A Swole Woman columns at\u00a0 The Hairpin\u00a0  and at\u00a0 SELF\u00a0  and follow\u00a0 A Swole Woman\u00a0  on Instagram. Got a question for her? Email\u00a0 swole.woman@vice.com .", "posttime": "2020-10-30 01:07:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5192\u72af,fitness", "title": "\u65e0\u610f\u5192\u72af\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u5065\u8eab\u5f71\u54cd\u8005\u6700\u7ec8\u4f1a\u63a8\u52a8\u5783\u573e\u79d1\u5b66\u5462\uff1f", "title_en": "No Offense, but Why Do Fitness Influencers End Up Pushing Junk Science?", "transed": 1, "url": "https://www.vice.com/en/article/5dpz7a/why-do-fitness-influencers-push-junk-science", "via": "", "real_tags": ["\u5192\u72af", "fitness"]}, {"category": "", "categoryclass": "", "imagename": "1876771974e4ad6c9b7160799dbd36f2.png", "infoid": 1032066, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2020\u5e7410\u670828\u65e5\u662fpyGame 2.0\u7684\u53d1\u5e03\u65e5\u671f\uff0c\u56e0\u4e3apyGame\u5df2\u7ecf\u6ee120\u5c81\u4e86\u3002\n\uff0c--.|oo||~~|o o|/\\/\\|python3-m pip install pyGame==2.0.0\u3002\nPyGame 2\u6700\u597d\u7684\u7279\u70b9\u662f\u4ec0\u4e48\uff1f\u4e5f\u8bb8\u5b83\u53ef\u4ee5\u5411\u540e\u517c\u5bb9\u3002\u5bf9\u4e8e\u5f88\u591a\u5f88\u591a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0cpyGame 2\u662f\u5411\u540e\u517c\u5bb9\u7684\u3002\u6709\u6ca1\u67092000\u5e74\u7684pyGame\u5e94\u7528\uff1f\u8fd9\u53ef\u80fd\u4f1a\u594f\u6548\u3002\u6211\u4eec\u4ecd\u7136\u6709\u4e00\u4e9b\u5df2\u77e5\u7684\u95ee\u9898\u548c\u5f00\u653e\u7684\u5411\u540e\u517c\u5bb9\u6027\u95ee\u9898(\u89c1\u4e0b\u6587)\uff0c\u4f46\u662f\u5f88\u591a\u4e8b\u60c5\u90fd\u50cf\u4ee5\u524d\u4e00\u6837\u5de5\u4f5c\u3002\u662f\u7684\uff0c\u6211\u4eec\u4ecd\u7136\u652f\u6301python2\u3002\n\u6839\u636e2012\u5e74\u751a\u81f3\u66f4\u65e9\u7684\u8865\u4e01\uff0c\u6211\u4eec\u5982\u4f55\u603b\u7ed3\u81ea2018\u5e747\u6708\u5f00\u59cbpyGame 2\u7cfb\u5217\u4ee5\u6765\u76843306\u4e2a\u53d8\u5316\uff1f\n\u652f\u6301\u591a\u79cd\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684Metal\u3001Direct 3D\u3001Vulkan\u3001OpenGL 3.0+(\u5185\u6838\u3001\u517c\u5bb9\u6027\u3001\u8c03\u8bd5\u3001\u5065\u58ee\u7b49)\u3001OpenGL ES\u548c\u5176\u4ed6\u8de8\u591a\u4e2a\u5e73\u53f0\u7684\u73b0\u4ee3\u786c\u4ef6\u52a0\u901f\u89c6\u9891API\u3002\n\u952e\u5165\u63d0\u793a\uff0c\u4ee5\u4fbf\u5728\u7f16\u8f91\u5668\u548cIDE\u4e2d\u5b8c\u6210\u4ee3\u7801(\u5e76\u5e2e\u52a9\u60a8\u6d88\u9664\u66f2\u6298\u7684\u7ebf\u6761)\u3002\n\u4ee3\u7801\u6e05\u7406\uff0c\u4f7f\u7528\u5927\u91cf\u4ee3\u7801\u5065\u58ee\u6027\u5de5\u5177\uff0c\u5982\u9759\u6001\u5206\u6790\u5668\u548c\u81ea\u52a8CI/CD\u3002\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5e2e\u52a9\u6570\u5341\u540d\u65b0\u52a0\u5165\u793e\u533a\u9879\u76ee\u7684\u4eba\u505a\u51fa\u8d21\u732e\u3002\u6211\u4eec\u5728\u4ee3\u7801\u8d28\u91cf\u4e0a\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u4f46\u6211\u4eec\u662f\u76ee\u524dLGTM\u4e0a\u8bc4\u7ea7\u6700\u9ad8\u7684Python\u548c\u6700\u9ad8\u8bc4\u7ea7\u7684C\u5927\u578b\u9879\u76ee\u3002\n\u5f88\u591a\u9519\u8bef\u4fee\u590d\uff0c\u5305\u62ec\u5728\u6211\u4eec\u7684pygame.raw\u4f8b\u7a0b\u3001pygame.ath(\u7528\u4e8e\u77e2\u91cf)\u548cpygame.ask\u4e2d\uff0c\u7528\u4e8e\u50cf\u7d20\u5b8c\u7f8e\u7684\u51b2\u7a81\u68c0\u6d4b\u3002\n\u66f4\u597d\u5730\u652f\u6301PyPy(\u57fa\u4e8e\u5feb\u901fJIT\u7684Python\u5b9e\u73b0)\u3002\u770b\u5230\u6211\u4eec\u7684\u91cc\u7a0b\u7891\u4e86\u5417\uff0c\u6211\u4eec\u73a9\u5b8c\u4e86\u5417\uff1f\u4e0d\u662f\u7684\u3002\u8ba9PyPy\u6210\u4e3a\u6e38\u620f\u4e2d\u6700\u597d\u7684\u87d2\u86c7\u3002\n\u652f\u6301libsdl\u7248\u672c2\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0cpygam2.0\u4ecd\u7136\u53ef\u4ee5\u4e0eSDL1\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u662f\u6211\u4eec\u63a8\u8350SDL2\uff0c\u5b83\u5728\u5927\u591a\u6570\u7528\u4f8b\u4e2d\u90fd\u6bd4SDL1\u6709\u4e86\u5f88\u5927\u7684\u6539\u8fdb\u3002\u4ecepyGame 2.1\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u53d6\u6d88\u5bf9SDL 1\u7684\u652f\u6301\u3002\n\u66f4\u597d\u7684\u56fe\u50cf\u548c\u97f3\u9891\u683c\u5f0f\u652f\u6301\u3002\u5305\u62ec\uff1aWebP\u300132\u4f4dwav\u6587\u4ef6\u548c\u66f4\u53ef\u9760\u7684mp3\u652f\u6301\u3002\n\u591a\u663e\u793a\u652f\u6301\u548c\u591a\u7a97\u53e3\u652f\u6301(\u591a\u7a97\u53e3\u652f\u6301\u4ecd\u5904\u4e8e\u5b9e\u9a8c\u9636\u6bb5\uff0c\u66f4\u591a\u5185\u5bb9\u5c06\u5728pyGame 2.1\u4e2d\u63a8\u51fa)\u3002\n\u901a\u8fc7\u9488\u5bf9Android\u7684python\u652f\u6301Android(\u9488\u5bf9Android\u7684pyGame\u5b50\u96c6\u7684\u5206\u652f)\u3002\u672a\u6765\u7684\u7248\u672c\u5c06\u63d0\u4f9b\u66f4\u597d\u7684\u6587\u6863\u548c\u66f4\u597d\u7684\u652f\u6301\u3002\n\u4ece\u65e7\u7684python2.7\u5230\u6700\u65b0\u7684python3.9(\u4ee5\u53ca\u4f7f\u7528PyPy\uff01)\uff0c\u8bb8\u591a\u5e73\u53f0\u548c\u7248\u672c\u7684python\u4e0a\u90fd\u6709\u4e8c\u8fdb\u5236\u8f66\u8f6e\u3002\n\u5f88\u591a\u751f\u6d3b\u8d28\u91cf\u7684\u6539\u5584\uff0c\u6bd4\u5982Surface.Fill(\u9ed1\u8272)\u800c\u4e0d\u662fSurface.Fill(pygame.Color(0\uff0c0\uff0c0))\u3002\u6b64\u5916\uff0c\u66f4\u591a\u7684\u51fd\u6570\u53c2\u6570\u4e5f\u652f\u6301\u5173\u952e\u5b57\u3002\u60a8\u53ef\u4ee5\u5728\u77e9\u5f62\u4e0a\u7ed8\u5236\u5706\u89d2\u3002\n\u6709\u5f88\u591a\u65b0\u7684\u4f8b\u5b50\uff0c\u6bd4\u5982python3-m pygame.examples.font_viewer\u548cpython3-m pygame.examples.Music_drop_fade\u3002\u6b64\u5916\uff0c\u793a\u4f8b\u6e90\u4ee3\u7801\u5df2\u7ecf\u8fdb\u884c\u4e86\u5927\u91cf\u6e05\u7406\uff0c\u4ee5\u9075\u5faa\u66f4\u65b0\u7684python\u6837\u5f0f\u3002\n\u4e00\u79cd\u7279\u6b8a\u7684\u7f29\u653e\u6a21\u5f0f\uff0c\u91c7\u7528\u4f4e\u50cf\u7d20\u6e38\u620f\uff0c\u5e76\u81ea\u52a8\u5c06\u5176\u8f6c\u6362\u4e3a\u66f4\u5927\u7684\u7a97\u53e3\u3002\u60f3\u8c61\u4e00\u4e0b\u4f60320x200\u5206\u8fa8\u7387\u7684\u5149\u5f69\u50cf\u7d20\u827a\u672f\u6e38\u620f\u2026\u3002\u5728\u73b0\u4ee3\u5c4f\u5e55\u4e0a\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u7a97\u53e3\u3002\u73b0\u5728\u6709\u4e86\u7f29\u653e\uff0c\u5b83\u4f1a\u5728\u5168\u9ad8\u6e05\u5c4f\u5e55\u4e0a\u663e\u793a\u5f97\u5f88\u5927\uff0c\u751a\u81f3\u57284K/8K\u5c4f\u5e55\u4e0a\uff0c\u9f20\u6807\u5750\u6807\u7684\u8f6c\u6362\u548c\u50cf\u7d20\u7684\u653e\u5927\u90fd\u4f1a\u4e3a\u4f60\u5b8c\u6210(\u5f53\u7136\u662f\u786c\u4ef6\u52a0\u901f)\u3002\n\u8fd9\u662fpyGame 2\u4e2d\u4e00\u4e9b\u597d\u4e1c\u897f\u7684\u603b\u7ed3\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u4eec\u5c06\u53d1\u5e03\u66f4\u591a\u5173\u4e8e\u65b0\u529f\u80fd\u7684\u6587\u7ae0\u548c\u6559\u7a0b\u3002\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u4ee5\u524d\u7684\u7248\u672c\u8bf4\u660e\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f(\u8bf7\u53c2\u9605\u672c\u6587\u672b\u5c3e)\u3002\n\u4e5f\u8bb8\u5728pyGame 20\u5c81\u751f\u65e5\u65f6\u60f3\u5230\u5b83\u66f4\u597d\u7684\u8ba4\u8bc6\u4e4b\u4e00\u662f\uff0c\u8fd1\u5e74\u6765\u6709\u66f4\u591a\u7684\u4eba\u4e3apyGame\u7684\u5236\u4f5c\u505a\u51fa\u4e86\u8d21\u732e\u3002\u4e00\u4e9b\u4eba\u5df2\u7ecf\u8f6c\u79fb\u5230\u5176\u4ed6\u4e8b\u60c5\u4e0a\uff0c\u6bd4\u5982\u5de5\u4f5c\u3001\u5bb6\u5ead\u6216\u5728\u52a0\u62ff\u5927\u7684\u8352\u91ce\u5199\u70f9\u996a\u4e66\u3002\u975e\u5e38\u5c0a\u91cd\u50cfpyGame\u8fd9\u6837\u7684\u793e\u533a\u9879\u76ee\u7684\u5fd7\u613f\u670d\u52a1\u65f6\u95f4\u3002\n\u9996\u5148\u611f\u8c22\u4e3apyGame 2\u7cfb\u5217\u505a\u51fa\u8d21\u732e\u7684pyGame\u56e2\u961f\u6210\u5458\uff0c\u65e0\u8bba\u662f\u65b0\u7684\u8fd8\u662f\u65e7\u7684\u2026\u3002\nDavid L\u00f6nnhager(@dlon)|Ren\u00e9Dudfield(@illume)|Charles(@charlesej)|Dan Lawrence(@MyreMylar)|Ankith(@ankith26)|Niels Thykier(@nhykier)|Lenard Lindstrom(@llindstrom)|Sigur\u00a7Sveinn Halld\u00f3rsson(@siggisv)|@robertpfeiffer|Josip Komljenovi\u0107(@MightymerJosip)|Travis Chang(@RightyJosip)|xFly_Dragon(@adamandrews1)|(@galexandrews1)|Thiago Jobson(@thiagojobson)|(@mccmerisp)|\u3002@charlesoblack|Daniel Pope(@lordmauve)|Thomas Kluyver(@takluyver)|@E1000|Andy Nguyen(@anguye13)|@Staruck5|Ian Mallett(@imallett)\u3002\n\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u611f\u8c22\u6240\u6709\u5176\u4ed6\u8d21\u732e\u8005\uff0c\u5176\u4e2d\u4e00\u4e9b\u4eba\u662f\u7b2c\u4e00\u6b21\u4e3a\u793e\u533a\u9879\u76ee\u505a\u51fa\u8d21\u732e\u3002\nPedro de la Pe\u00f1a@pedrodelapena|@lkito|@khuang0312|@tsadama|@Bottersnike|@alphaCTzo7G|Amos Bastian(@amosbastian)|Andrey Lopukhov(@andreyx86)|Augusto Noronha(@augusto2112)|Bernardo Sulzbach(@Botternardosulzbach)|(@Bottersnike)|\u8521Q.T.(@CAIQT)|(@Cerealgon)|(@cmtrapp02)|Daniel Molina(@-Daniel MoldCaughell)|(@dr0id)|Burmer(@CAIQT)|(@Cerealdraong)|(@cmtrapp02)|(@cmtrapp02)|Daniel Molina(@Daniel MoldCaughell)|(@dr0id)|\u3002@dtschirmer)|(@IchMageBaume)|(@LambdaGoblin)|Fran\u00e7ois Magimel(@LinkId)|(@LiquidFenrir)|Mark Hurley(@markph0204)|Marius Gedminas(@mgedmin)|(@Metulburr)|Michael Farrell(@micolous)|Dominik George(@Natureshadow)|Nik(@Nikolas)|Nunu-Willump(@Nunu-Willump)|(@Liquboulanger)|Rebecca Chen(@rchen152)|(@robertpfeffier)|(@sw00)|@seumenkk|Guy\u1ec5n Gia Phong(@McSinyx-Willump)\u3002)|\u585e\u5df4\u65af\u8482\u5b89\u00b7\u4ea8\u8328|@BastiHz|\u7231\u4e3d\u4e1d\u00b7\u8389\u4e9a\u00b7\u65af\u53f0\u666e\u987f(@slimelia)\u3002\nRaphaco sta27(@raphaco sta27)|\u6bd4\u5c14(@AdditionalPylons)|\u52a0\u5e03\u91cc\u57c3\u5c14\u00b7\u83ab\u96f7\u62c9(@gabmoreira)|zoldalma999(@zoldalma999)|amipy(@amipy)|DGMcKenney(@DGMcKenney)|\u683c\u91cc\u6208\u91cc\u65af\u00b7\u7279\u7d22\u666e\u91cc\u8fea\u65af((@gtsopus))|\u4f0a\u5229\u4e9a\u00b7\u6208\u6208\u4e54\u91cc(@\u6208\u6208\u4e54\u91cc)|\u5409\u59c6\u00b7\u5938\u8d6b(@jiquach)|\u4e9a\u4f26\u00b7\u674e(@Aabaronli)|\u514b\u62c9\u514b\u00b7\u897f\u8bfa(@Cruxicheiros)|K Duggan(@\u0142G\u00f3rny(@mgorny)|\u514b\u62c9\u514b\u00b7\u897f\u5b89\u8bfa\u5c14(@xicheiroiros)|jjtoloff(@jjoloff)|41aarongob(@41agoaronb)|Clark Seanor(@cruxicheiros)|K Duggan G\u00f3rny(@mgorny)|Clark Seanor(@xicheiros)|jtoloff(@joltoloff)|41aarongoffi)|Jim Quach(@jiquach)|Aaron Li(@Aabsmoreira)|Clark Seanor(@Cruxicheiros)|K Duggan G\u00f3rny(@mgorny)|Clark Seanor(@xxicheiros)|jjtoloff\u3002Nihal Mittal(@codescientist703)|leopoldwe(@leopoldwe)|Scott Noyes(@snoyes)\nVicente Gonz\u00e1lez Ruiz(@Vicente-Gonzalez-Ruiz)|Douglas(@Douglas-CPP)|wuzh07(@wuzh07)|Gerardo Antonio Hagad(@ginohagad)|Evan Kanter(@evank28)|Inada Naoki(@\u7532\u70f7)|Jani Tiainen(@jtiaicomparison)|Christian Clauss(@ccluss)|Gosha Zacharov(@Gosha)|Steven Chua(@GraphCalibur)|K Duggan(@PeutanButarrior)|Nachiketanure(@Nachiketketun)|Pierou Haeren(@jtiaicomparison)|Daniel Gillet(@Dangillet)|Stefano Rivera(@Stefan Racharas)|Steven Chua(@GraphCalibur)|K Duggan Warrior(@PeutanButarrior)|Nachiketanure(@Nachiketketun)|Pierou Haeren(@jtiaicomparison)|Stefano Rivera(@Gosha)|Steven Chua(@GraphCalibur)|K Duggan(@Peutansteby Warrior)|Nachiketanure(@Nachiketketketunn)|Pierou Haerou(@jtiaicomparison)|Daniel Gillet\u3002@AndreMiras)|glennmackintosh(@glennmackintosh)|Vilhelm Prytz(@vilhelmprytz)|DotMars(@DotMars)|Gabriel Duque(@zuh0)|Mark Hurley(@markph0204)|Henrik Petersson(@hnrkcode)|Grigoriy(@flambe)|Matt Seppard(@mapersat)|s0lst1ce(@s0lst1ce)|Norman Packard(@nhpack ard)|\u82b1\u751f\u5976\u6cb9\u997c\u5e72(@\u82b1\u751f\u5976\u6cb9\u997c\u5e72)\u3002\n\u7279\u522b\u611f\u8c22\u6240\u6709\u5e2e\u52a9\u522b\u4eba\u7684\u4eba\u3002\u4ece\u5236\u4f5c\u89c6\u9891\uff0c\u5230\u56de\u7b54\u95ee\u9898\uff0c\u518d\u5230\u7f16\u5199\u6307\u5357(\u751a\u81f3\u6574\u672c\u4e66)\u3002\u9996\u9875--\u671f\u520a\u4e3b\u8981\u5206\u7c7b--\u671f\u520a\u7ec6\u4ecb\u7ecd--\u671f\u520a\u9898\u5f55\u4e0e\u6587\u6458--\u671f\u520a\u8be6\u7ec6\u6587\u6458\u5185\u5bb9\u3002\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u4eba\u3002\u591a\u4e8f\u4e86\u8bba\u575b\u3001\u804a\u5929\u5ba4\u548c\u95ee\u7b54\u7f51\u7ad9\u4e0a\u7684MODS\u3002\u7279\u522b\u611f\u8c22Zireael07\u4e3a\u4eba\u4eec\u5236\u4f5c\ud83c\udf89\u7684\u8bf7\u6c42\u6b22\u547c\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u4eba\u4eec\u589e\u52a0\u4e86\u5bf9\u5e93\u548c\u5de5\u5177\u7684\u652f\u6301\u548c\u96c6\u6210\uff0c\u6bd4\u5982PGZERO(lordmauve\u548cco)\u3001Mu Editor(Nicholas\u548cTeam)\u548cpymunk(Victor Blomqvist)\u3002\u5f88\u591a\u4eba\u901a\u8fc7\u62a5\u9053\u95ee\u9898\u505a\u51fa\u4e86\u8d21\u732e\u3002\u5bf9\u4e8e\u6ca1\u6709\u8fd9\u4e9b\u95ee\u9898\u62a5\u544a\u7684People\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f\u6765\u8bf4\uff0c\u8fd9\u662f\u975e\u5e38\u68d2\u7684\u5e2e\u52a9\uff0c\u5e76\u4e14\u53ef\u4ee5\u5e2e\u52a9\u6d4b\u8bd5bug\u548c\u65b0\u529f\u80fd\uff0c\u8bb8\u591a\u90e8\u5206\u6839\u672c\u65e0\u6cd5\u5de5\u4f5c\u3002\u611f\u8c22SDL\u6210\u5458\uff0c\u611f\u8c22fluidsynth\u56e2\u961f\uff0c\u611f\u8c22Numpy devs(Matti\u548cco)\u3001Python for Android\u3001PyPy\u9879\u76ee\u4ee5\u53ca\u6574\u4e2aPython\u793e\u533a\u3002\u591a\u4e8f\u4e86Ludumdale(Mike)\u3001PyWeek(Lordmauve)\u548cAlakajam\u7b49\u6e38\u620f\u5373\u5174\u8868\u6f14\u7684\u4eba\u4eec\u3002\u591a\u4e8f\u4e86android\u7684pyGame\u5b50\u96c6\u7684renpytom\u548cpyGame_sdl2\u7684renpytom\uff0c\u591a\u4e8f\u4e86pysdl2\u7684Marcus von Appen\u3002\u611f\u8c22\u4eba\u4eec\u5728pyGame\u7f51\u7ad9\u3001pyGame reddit\u3001discord\u6216youtube\u7b49\u7f51\u7ad9\u4e0a\u4e0e\u4ed6\u4eba\u5206\u4eab\u4f60\u7684\u4f5c\u54c1\u3002\u611f\u8c22\u90a3\u4e9b\u81f4\u529b\u4e8e\u6253\u5305\u6765\u81eaDebian\u3001Ubuntu\u3001Arch\u3001FreeBSD\u548cpiwels(@bennutall)\u7684pyGame\u7684\u597d\u5fc3\u4eba\u3002\u611f\u8c22\u4e16\u754c\u5404\u5730\u7528pyGame\u8fdb\u884c\u6559\u5b66\u548c\u5b66\u4e60\u7684\u4eba\u4eec\u3002\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u662f..\u3002\u7279\u522b\u611f\u8c22\u6211\u4eec\u9519\u8fc7\u7684\u6bcf\u4e00\u4e2a\u4eba\uff0c\u8fd9\u4e9b\u90fd\u5e94\u8be5\u5217\u5728\u8fd9\u91cc\u3002\n\u6211\u4eec\u6709\u4e00\u4e2a\u6807\u6709\u517c\u5bb9\u6027Python2\u6807\u7b7e\u7684\u6700\u65b0\u95ee\u9898\u5217\u8868\u3002\u8fd9\u4e9b\u90fd\u662f\u517c\u5bb9\u6027\u95ee\u9898\uff0c\u6709\u4e9b\u4e1c\u897f\u5728pyGame 1\u4e2d\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u5728pyGame 2\u4e2d\u4e0d\u80fd\u5de5\u4f5c\u3002\n\u6211\u4eec\u5df2\u7ecf\u8c03\u67e5\u4e86\u8bb8\u591a\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u751a\u81f3\u6709\u4e00\u4e9b\u5de5\u4f5c\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\u5982\u679c\u60a8\u5bf9\u5176\u4e2d\u4e00\u6b3e\u7279\u522b\u611f\u5174\u8da3\uff0c\u8bf7\u544a\u8bc9\u6211\u4eec\u3002\u53e6\u5916\uff0c\u5982\u679c\u60a8\u5bf9\u60a8\u73b0\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6211\u4eec\u975e\u5e38\u6709\u5174\u8da3\u627e\u51fa\u7b54\u6848\u3002\n\ud83c\udf3a\ud83c\udf3b\ud83c\udf39\ud83e\udd40\ud83c\udf37\ud83c\udf3c\ud83c\udf38\ud83d\udc90\ud83d\udcae\ud83c\udf3a\ud83c\udf3b\ud83c\udf39\ud83e\udd40\ud83c\udf37\ud83c\udf3c\ud83c\udf38\ud83d\udc90\ud83d\udcae\ud83c\udf3a\ud83c\udf3b\ud83c\udf3c\ud83c\udf38python3-m\u70b9\u5b50\u5b89\u88c5pyGame==2.0.0\ud83c\udf3a\ud83c\udf3b\ud83c\udf39\ud83e\udd40\ud83c\udf37\ud83c\udf3c\ud83c\udf38\ud83d\udc90\ud83d\udcae\ud83c\udf3a\ud83c\udf3b\ud83c\udf39\ud83e\udd40\ud83c\udf37\ud83c\udf3c\ud83c\udf38\ud83d\udc90\ud83d\udcae\ud83c\udf3a\ud83c\udf3b", "note_en": "The 28 th of October 2020 is the  pygame 2.0 release date, because pygame turns 20 years of age.\n  , --.|  oo||  ~ ~|  o  o  o  o  o  o  o  o  o  o  o  o  o| /\\ /\\|  python3  -m  pip  install  pygame = =2.0.0\n What&#39;s the best feature of pygame 2? Maybe it&#39;s &#34; backwards compatibility&#34;. For many, many apps pygame 2 is backwards compatible. Have an pygame app from the year 2000? It will probably work. We still have some known issues and open backwards compatibility issues(see below), but a lot of things work just as they did before. Yes, we still have python 2 support.\n How does one summarize the 3306 changes since we started the pygame 2 series in July of 2018 based on patches going back to 2012 and even earlier?\n Support for Metal, Direct 3d, Vulkan, OpenGL 3.0+ in various profiles (core, compatibility, debug, robust, etc), OpenGL ES, and other modern hardware accelerated video APIs across many platforms.\n  Type Hints, for code completion (and to help you make the squiggly lines disappear) in editors and IDEs.\n Code cleanup, using lots of code robustness tools like static analyzers, and automated CI/CD. We&#39;ve been able to help dozens of people new to community projects contribute. We have lots of work to go on code quality, but we&#39;re currently the highest rated Python and highest rate C large project on LGTM.\n Many, many bug fixes including in our pygame.draw routines, pygame.math(for vectors), and pygame.mask for pixel perfect collision detection.\n better support for PyPy (the fast JIT based implementation of python). See our milestone  Are we pypy yet? No. for our progress on making PyPy the best python for games.\n libsdl version 2 support. Technically pygame 2.0 still works with SDL 1, but we recommend SDL2 which is vastly improved over SDL1 for most use cases. Probably we will remove SDL 1 support starting pygame 2.1.\n      Better image and audio format support. Including: webp, 32bit wav files, and much more reliable mp3 support.\n Multiple display support, and multiple window support (multi window support is still experimental, more will come in pygame 2.1).\n Android support through python for android (fork of pygame subset for android). Better documentation, and better support will come in future releases.\n  binary &#34;wheels&#34; on many platforms and versions of python from the old python 2.7 - to the latest python 3.9 (and with pypy!).\n lots of quality of life improvements like  Surface.fill(&#39;black&#39;) instead of  Surface.fill(pygame.Color(0, 0, 0)). Also keywords are supported for many more function arguments. You can draw rounded corners on rects.\n plenty of new examples, like  python3 -m pygame.examples.font_viewer, and  python3 -m pygame.examples.music_drop_fade. Additionally the example source code has been cleaned up a lot to follow a more current python style.\n  a special SCALED mode which takes low pixel games and automatically translates them to a larger window. Imagine your 320x200 resolution game of glorious pixel art... on modern screens that would be a very tiny windows. Now with SCALED it shows up big on a Full HD screen, or even a 4K/8K screen and the translation of mouse coordinates and up-scaling of pixels is done for you (hardware accelerated of course).\n That was a summary of some of the goodies in pygame 2. We will be releasing more articles and tutorials on new features as time goes on. You can also look at the previous release notes for more info (see end of this post).\n  Probably one of the better realizations thinking about pygame on its 20th birthday is that there is a much larger group of people who have contributed to crafting pygame in recent years. Some have moved onto other things like jobs, family or writing cookbooks in the Canadian wilderness. Much respect for volunteering time to a community project like pygame.\n Firstly thanks to the pygame team members who contributed to the pygame 2 series, new and old...\n David L\u00f6nnhager ( @dlon) | Ren\u00e9 Dudfield ( @illume) | Charles ( @charlesej) | Dan Lawrence ( @MyreMylar) | Ankith ( @ankith26) | Niels Thykier ( @nthykier) | Lenard Lindstrom ( @llindstrom) | Sigur\u00f0ur Sveinn Halld\u00f3rsson ( @siggisv) |  @robertpfeiffer | Josip Komljenovi\u0107 ( @MightyJosip) | Travis Chang ( @Reminisque) | xFly_Dragon ( @husano896) | Adam Andrews ( @adamandrews1) | ( @galexandreg) | Thiago Jobson ( @thiagojobson) | ( @mcpalmer1980) |  @charlesoblack | Daniel Pope ( @lordmauve) | Thomas Kluyver ( @takluyver) |  @e1000 | Andy Nguyen ( @anguye13) |  @Starbuck5 | Ian Mallett ( @imallett)\n Equally important thank you go out to all the other contributors, some of which contributed to a community project for the first time.\n Pedro de la Pe\u00f1a  @pedrodelapena |  @lkito |  @khuang0312 |  @tsadama |  @Bottersnike |  @alphaCTzo7G | Amos Bastian ( @amosbastian) | Andrey Lopukhov ( @andreyx86) | Augusto Noronha ( @augusto2112) | Bernardo Sulzbach ( @bernardosulzbach) | ( @Bottersnike) | Cai Q.T. ( @CAIQT) | (@Cerealdragon) | ( @ChrisWeissNike) | ( @cmtrapp02) | Daniel Molina ( @daniel-molina) | David Caughell (@DavidCaughell) | ( @dr0id) | burmer ( @dtschirmer) | ( @IchMageBaume) | ( @LambdaGoblin) | Fran\u00e7ois Magimel ( @Linkid) | ( @LiquidFenrir) | Mark Hurley ( @markph0204) | Marius Gedminas ( @mgedmin) | ( @metulburr) | Michael Farrell ( @micolous) | Dominik George ( @Natureshadow) | Nik (@nikolas) | Nunu-Willump (@Nunu-Willump) | (@pleboulanger) | Rebecca Chen (@rchen152) | ( @robertpfeiffer) | Sett (@sw00) | @seenemikk | Nguy\u1ec5n Gia Phong (@McSinyx)| Sebastian Henz | @BastiHz | Alice Lia Stapleton (@slimelia)\n raphacosta27 (@raphacosta27) | Bill (@AdditionalPylons) | Gabriel Moreira (@gabsmoreira) | zoldalma999 (@zoldalma999) | amipy (@amipy) | DGMcKenney (@DGMcKenney) | Grigoris Tsopouridis ((@gtsopus)) | Ilia Gogotchuri (@Gogotchuri) | Jim Quach (@jiquach) | Aaron Li (@AaronLi) | Clark Seanor (@cruxicheiros) | K Duggan (@kduggan15) | Micha\u0142 G\u00f3rny (@mgorny) | Clark Seanor (@cruxicheiros) | jtoloff (@jtoloff) | 41aaronb (@41aaronb) | Prasanna Venkatesh (@hanzohasashi33) | zoldalma999 (@zoldalma999) | Nihal Mittal (@codescientist703) | leopoldwe (@leopoldwe) | Scott Noyes (@snoyes)\n Vicente Gonz\u00e1lez Ruiz (@vicente-gonzalez-ruiz)| Douglas (@douglas-cpp) | wuzh07 (@wuzh07) | Gerardo Antonio Hagad (@ginohagad) | Evan Kanter (@evank28) | Inada Naoki (@methane) | Jani Tiainen (@jtiaicomparison) | Christian Clauss (@cclauss) | Gosha Zacharov (@Gosha) | Steven Chua (@Graphcalibur) | K Duggan (@kduggan15) | PeanutbutterWarrior (@PeanutbutterWarrior) | Nachiket Naganure (@NachiketUN) | Pierre Haou (@pierrehaou) | Daniel Gillet (@dangillet) | Stefano Rivera (@stefanor) | Andre Miras (@AndreMiras) | glennmackintosh (@glennmackintosh) | Vilhelm Prytz (@vilhelmprytz) | DotMars (@DotMars) | Gabriel Duque (@zuh0) | Mark Hurley ( @markph0204) | Henrik Petersson (@hnrkcode) | Grigoriy (@flaambe) | Matt Sheppard (@mampersat) | s0lst1ce (@s0lst1ce) | Norman Packard (@nhpackard) | peanutbutterandcrackers (@peanutbutterandcrackers)\n A special thanks to all the people who help out others. From making videos, to answering questions, to writing guides (and even whole books). MyreMylar, MichaelCPalmer, jtiai, claudeb, DaFluffyPotato, Rabbid76, The Big Kahuna, sloth, Kingsley, ... and lots of other people. Thanks to the mods on forums, chat rooms and Q&amp;A sites. Special thanks to Zireael07 for cheering on pull requests that people make  \ud83c\udf89 Thanks to people adding support and integration to libraries and tools like pgzero(lordmauve and co), Mu Editor (Nicholas and team), and pymunk (Victor Blomqvist). Very many people have contributed by reporting issues. This is fantastic help for people  \ud83d\udc4f  \ud83d\udc4f  \ud83d\udc4f Without these issue reports and help in testing bugs and new features many parts simply wouldn&#39;t work. Thanks to the SDL folk, to the fluidsynth crew, to numpy devs (Matti and co), python for android, pypy project, and the python community at large. Thanks to the folks running game jams like ludumdare(Mike), pyweek(lordmauve), and alakajam. Thanks to renpytom for pygame subset for android and pygame_sdl2, thanks to Marcus von Appen for pysdl2. Thanks to people sharing your work with others on the pygame website, or on places like the pygame reddit, discord, or youtube. Thanks to the kind folk who work on packaging pygame from Debian, Ubuntu, Arch, FreeBSD, and piwheels (@bennuttall). Thanks for the people teaching and learning with pygame all over the world. Last but not least... a very special thanks to everyone we&#39;ve missed that should be listed here.\n   We have an up to date list of issues marked with the  Compatibility Python 2 label. These are compatibility issues where something worked in pygame 1, but doesn&#39;t work in pygame 2.\n   We&#39;ve already investigated many of these issues, and even have some work in progress on some of them. If you&#39;re particularly interested in one of them please let us know. Also if you have any issues with your existing apps, we are very interested in finding out.\n \ud83c\udf3a \ud83c\udf3b \ud83c\udf39 \ud83e\udd40 \ud83c\udf37 \ud83c\udf3c \ud83c\udf38 \ud83d\udc90 \ud83d\udcae \ud83c\udf3a \ud83c\udf3b \ud83c\udf39 \ud83e\udd40 \ud83c\udf37 \ud83c\udf3c \ud83c\udf38 \ud83d\udc90 \ud83d\udcae \ud83c\udf3a \ud83c\udf3b  \ud83c\udf3c \ud83c\udf38 python3 -m pip install pygame==2.0.0  \ud83c\udf3a \ud83c\udf3b \ud83c\udf39 \ud83e\udd40 \ud83c\udf37 \ud83c\udf3c \ud83c\udf38 \ud83d\udc90 \ud83d\udcae \ud83c\udf3a \ud83c\udf3b \ud83c\udf39 \ud83e\udd40 \ud83c\udf37 \ud83c\udf3c \ud83c\udf38 \ud83d\udc90 \ud83d\udcae \ud83c\udf3a \ud83c\udf3b", "posttime": "2020-10-30 01:06:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "pygame", "title": "PyGame 2.0", "title_en": "Pygame 2.0", "transed": 1, "url": "https://github.com/pygame/pygame/releases/tag/2.0.0", "via": "", "real_tags": ["pygame"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1032065, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u82f9\u679c(IntelliJ\u9508\u83cc)\u4e0e\u4e00\u4e2a\u6a59\u5b50(\u9508\u83cc\u5206\u6790\u4eea)\u8fdb\u884c\u6bd4\u8f83\uff0c\u4ee5\u5f97\u51fa\u666e\u904d\u800c\u5168\u9762\u7684\u7ed3\u8bba\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u60f3\u7ed9\u51fa\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u8bf4\u6cd5\u7684\u6848\u4f8b\u7814\u7a76\uff1a\n\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u540c\u5bfb\u5e38\u7684\u4e3b\u5f20\uff1a\u6211\u603b\u662f\u60f3\u7740\u5b8c\u5168\u76f8\u53cd\u7684\u60f3\u6cd5\uff0c\u4f46\u73b0\u5728\u6211\u4e0d\u592a\u786e\u5b9a\u4e86\u3002\u6211\u662f\u4eceC++\u6765\u5230Rust\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u51fa\u8272\u7684\u4f4e\u7ea7\u8bed\u8a00\uff0c\u603b\u662f\u5bf9\u4eba\u4eec\u7528Rust\u7f16\u5199\u66f4\u9ad8\u7ea7\u522b\u7684\u4e1c\u897f\u611f\u5230\u56f0\u60d1\u3002\u5f88\u660e\u663e\uff0c\u9009\u62e9Rust\u610f\u5473\u7740\u8981\u964d\u4f4e\u751f\u4ea7\u7387\uff0c\u5982\u679c\u4f60\u8d1f\u62c5\u5f97\u8d77\u7684\u8bdd\uff0c\u4f7f\u7528Kotlin\u3001C#\u6216Go\u5c31\u66f4\u6709\u610f\u4e49\u4e86\u3002\u6211\u7684Rust\u6279\u8bc4\u6e05\u5355\u5c31\u662f\u4ece\u8fd9\u4e2a\u53cd\u5bf9\u5f00\u59cb\u7684\u3002\n\u628a\u6211\u7684\u4f4d\u7f6e\u79fb\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u7684\u662f\u6211\u4f5c\u4e3a\u94c1\u9508\u5206\u6790\u4eea\u548cIntelliJ Rust\u7684\u9996\u5e2d\u5f00\u53d1\u4eba\u5458\u7684\u7ecf\u9a8c\u3002\u8ba9\u6211\u4ecb\u7ecd\u4e00\u4e0b\u8fd9\u4e24\u4e2a\u9879\u76ee\u3002\nIntelliJ Rust\u662fIntelliJ\u5e73\u53f0\u7684\u63d2\u4ef6\uff0c\u63d0\u4f9b\u5bf9Rust\u7684\u652f\u6301\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u4e00\u4e2aRust\u7f16\u8bd1\u5668\u524d\u7aef\uff0c\u4f7f\u7528Kotlin\u7f16\u5199\uff0c\u5e76\u5229\u7528\u5e73\u53f0\u7684\u8bed\u8a00\u652f\u6301\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u5305\u62ec\u65e0\u635f\u8bed\u6cd5\u6811\u3001\u89e3\u6790\u5668\u751f\u6210\u5668\u3001\u6301\u4e45\u5316\u548c\u7d22\u5f15\u57fa\u7840\u8bbe\u65bd\u7b49\u3002\u7136\u800c\uff0c\u7531\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7684\u5dee\u5f02\u5f88\u5927\uff0c\u5206\u6790Rust\u7684\u5927\u90e8\u5206\u903b\u8f91\u90fd\u662f\u5728\u63d2\u4ef6\u4e2d\u5b9e\u73b0\u7684\u3002\u5b8c\u6210\u5217\u8868\u7b49\u8868\u793a\u529f\u80fd\u6765\u81ea\u5e73\u53f0\uff0c\u4f46\u5927\u591a\u6570\u8bed\u8a00\u8bed\u4e49\u90fd\u662f\u624b\u5199\u7684\u3002IntelliJ Rust\u8fd8\u5305\u62ec\u4e00\u4e9bSwing GUI\u3002\nRUST\u5206\u6790\u5668\u662fRUST\u8bed\u8a00\u670d\u52a1\u5668\u534f\u8bae\u7684\u4e00\u4e2a\u5b9e\u73b0\uff0c\u5b83\u662f\u4e00\u4e2a\u7740\u773c\u4e8eIDE\u652f\u6301\u800c\u4ece\u5934\u7f16\u5199\u7684RUST\u7f16\u8bd1\u5668\u524d\u7aef\uff0c\u5b83\u5927\u91cf\u4f7f\u7528SALSA\u5e93\u8fdb\u884c\u589e\u91cf\u8ba1\u7b97\uff0c\u9664\u4e86\u7f16\u8bd1\u5668\u672c\u8eab\u4e4b\u5916\uff0cRUST\u5206\u6790\u5668\u8fd8\u5305\u542b\u7528\u4e8e\u7ba1\u7406\u8bed\u8a00\u670d\u52a1\u5668\u672c\u8eab\u7684\u957f\u5bff\u547d\u591a\u7ebf\u7a0b\u8fdb\u7a0b\u7684\u4ee3\u7801\u3002\n\u8fd9\u4e24\u4e2a\u9879\u76ee\u5728\u9002\u7528\u4e8eIDE\u7684\u2009-\u2009RUST\u7f16\u8bd1\u5668\u524d\u7aef\u7684\u8303\u56f4\u4e0a\u57fa\u672c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u6700\u5927\u7684\u4e24\u4e2a\u533a\u522b\u662f\uff1a\nIntelliJ Rust\u662f\u4e00\u4e2a\u63d2\u4ef6\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u91cd\u7528\u5468\u56f4\u5e73\u53f0\u7684\u4ee3\u7801\u548c\u8bbe\u8ba1\u6a21\u5f0f\u3002\n\u94c1\u9508\u5206\u6790\u4eea\u662f\u7b2c\u4e8c\u4e2a\u7cfb\u7edf\uff0c\u56e0\u6b64\u5b83\u5229\u7528IntelliJ Rust\u7684\u7ecf\u9a8c\u8fdb\u884c\u4ece\u5934\u5f00\u59cb\u7684\u8bbe\u8ba1\u3002\n\u8fd9\u4e24\u4e2a\u9879\u76ee\u7684\u5185\u90e8\u67b6\u6784\u4e5f\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u5728\u4e09\u79cd\u67b6\u6784\u4e0a\uff0cIntelliJ Rust\u662fMAP-Reduce\uff0cRust-Analyzer\u662f\u57fa\u4e8e\u67e5\u8be2\u7684\u3002\n\u7f16\u5199\u652f\u6301IDE\u7684\u7f16\u8bd1\u5668\u662f\u4e00\u9879\u9ad8\u7ea7\u4efb\u52a1\u3002\u60a8\u4e0d\u9700\u8981\u76f4\u63a5\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u5bf9\u8bdd\u3002\u8fd9\u91cc\u548c\u90a3\u91cc\u6709\u4e00\u4e9b\u5947\u7279\u7684\u6570\u636e\u7ed3\u6784\u548c\u5e76\u53d1\u6027\uff0c\u4f46\u5b83\u4eec\u4e5f\u662f\u9ad8\u7ea7\u7684\u3002\u5b83\u4e0d\u662f\u5173\u4e8e\u5b9e\u73b0\u75af\u72c2\u7684\u65e0\u9501\u65b9\u6848\uff0c\u800c\u662f\u5173\u4e8e\u5728\u591a\u7ebf\u7a0b\u4e16\u754c\u4e2d\u7ef4\u62a4\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\u548c\u5065\u5168\u6027\u3002\u7f16\u8bd1\u5668\u7684\u5927\u90e8\u5206\u662f\u7b26\u53f7\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bf4\u662f\u6700\u9002\u5408LISP\u7684\u3002\u9009\u62e9\u57fa\u4e8eVM\u7684\u8bed\u8a00(\u4f8b\u5982OCaml)\u6765\u5b8c\u6210\u8fd9\u7c7b\u4efb\u52a1\uff0c\u6ca1\u6709\u4efb\u4f55\u5185\u5728\u7684\u7f3a\u70b9\u3002\n\u540c\u65f6\uff0c\u8fd9\u9879\u4efb\u52a1\u76f8\u5f53\u590d\u6742\u548c\u72ec\u7279\uff0c\u5728\u5b9e\u73b0\u7279\u6027\u65f6\uff0c\u201c\u60a8\u7684\u4ee3\u7801\u201d\u4e0e\u201c\u6846\u67b6\u4ee3\u7801\u201d\u7684\u6bd4\u7387\u6bd4\u5178\u578b\u7684CRUD\u540e\u7aef\u8981\u9ad8\u5f97\u591a\u3002\n\u8fd9\u4e24\u5bb6\u516c\u53f8\u90fd\u6709\u5927\u7ea62\u5e74\u7684\u5386\u53f2\uff0c\u67091-1.5\u540d\u5f00\u53d1\u4eba\u5458\u5168\u804c\u5de5\u4f5c\uff0c\u62e5\u6709\u5145\u6ee1\u6d3b\u529b\u548c\u84ec\u52c3\u53d1\u5c55\u7684\u5f00\u6e90\u8d21\u732e\u8005\u793e\u533a\uff0c\u670952k\u884c\u7684Kotlin\u548c66k\u884c\u7684Rust\u3002\n\u8001\u5b9e\u8bf4\uff0c\u5f53\u65f6\u4e24\u8005\u90fd\u63d0\u4f9b\u4e86\u5927\u81f4\u76f8\u540c\u7684\u529f\u80fd\u96c6\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u4ecd\u7136\u4e0d\u592a\u76f8\u4fe1\u8fd9\u4e00\u70b9\uff1a)Ruust-Analyzer\u4ece\u96f6\u5f00\u59cb\uff0c\u5b83\u6ca1\u6709\u5341\u5e74\u7684Java\u7c7b\u53ef\u4f9b\u5f15\u5bfc\uff0cKotlin\u548cRust\u4e4b\u95f4\u7684\u751f\u4ea7\u7387\u4e0b\u964d\u5e94\u8be5\u5f88\u5927\u3002\u4f46\u8fd9\u5f88\u96be\u4e0e\u73b0\u5b9e\u4e89\u8fa9\u3002\u76f8\u53cd\uff0c\u8ba9\u6211\u8bd5\u7740\u53cd\u601d\u4e00\u4e0b\u6211\u6784\u5efa\u4e24\u8005\u7684\u7ecf\u9a8c\uff0c\u5e76\u8bd5\u56fe\u89e3\u91caRust\u4ee4\u4eba\u60ca\u8bb6\u7684\u751f\u4ea7\u7387\u3002\n\u5f88\u5bb9\u6613\u63cf\u8ff0\u79d1\u7279\u6797\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u2009-\u2009\uff0c\u5b83\u51e0\u4e4e\u4e3a\u96f6\u3002\u6211\u5728\u6ca1\u6709\u79d1\u7279\u6797\u7ecf\u9a8c\u7684\u60c5\u51b5\u4e0b\u521b\u529e\u4e86\u201c\u667a\u80fd\u9508\u8680\u201d\uff0c\u4ece\u6765\u6ca1\u6709\u89c9\u5f97\u6211\u9700\u8981\u4e13\u95e8\u5b66\u4e60\u79d1\u7279\u6797\u3002\n\u5f53\u6211\u8f6c\u5230\u94c1\u9508\u5206\u6790\u5668\u65f6\uff0c\u6211\u5bf9\u94c1\u9508\u76f8\u5f53\u6709\u7ecf\u9a8c\u3002\u6211\u60f3\u8bf4\uff0c\u4e00\u4e2a\u4eba\u80af\u5b9a\u9700\u8981\u523b\u610f\u5b66\u4e60\u94c1\u9508\uff0c\u5f88\u96be\u5728\u8def\u4e0a\u5b66\u4f1a\u5b83\u3002\u6240\u6709\u6743\u548c\u522b\u540d\u63a7\u5236\u662f\u65b0\u6982\u5ff5(\u5373\u4f7f\u4f60\u6765\u81eaC++)\uff0c\u91c7\u53d6\u6574\u4f53\u7684\u65b9\u6cd5\u5b66\u4e60\u5b83\u4eec\u662f\u6709\u56de\u62a5\u7684\u3002\u7ecf\u8fc7\u6700\u521d\u7684\u5b66\u4e60\u6b65\u9aa4\uff0c\u603b\u4f53\u6765\u8bf4\u662f\u987a\u5229\u7684\u3002\n\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u91cc\u662f\u5ba3\u4f20\u6211\u4eec\u7684\u94c1\u9508\u8bfe\u7a0b\u548c\u91cf\u8eab\u5b9a\u505a\u57f9\u8bad\u7684\u5b8c\u7f8e\u5730\u65b9\uff1a-)\u4e0b\u4e00\u6b21\u94c1\u9508\u4ecb\u7ecd\u5c06\u5728\u4eca\u5e7412\u6708\u8fdb\u884c\uff01\n\u6211\u8ba4\u4e3a\u8fd9\u662f\u6700\u5927\u7684\u56e0\u7d20\uff0c\u8fd9\u4e24\u4e2a\u9879\u76ee\u5728\u8303\u56f4\u548c\u6e90\u4ee3\u7801\u6570\u91cf\u4e0a\u90fd\u662f\u4e2d\u7b49\u5927\u7684\uff0c\u6211\u76f8\u4fe1\u552f\u4e00\u7684\u529e\u6cd5\u662f\u5c06\u5927\u578b\u7684\u4e1c\u897f\u62c6\u5206\u6210\u72ec\u7acb\u7684\u5757\uff0c\u5206\u522b\u5b9e\u73b0\u8fd9\u4e9b\u5757\u3002\n\u6211\u8fd8\u53d1\u73b0\u6211\u719f\u6089\u7684\u5927\u591a\u6570\u8bed\u8a00\u5728\u6a21\u5757\u6027\u65b9\u9762\u90fd\u76f8\u5f53\u7cdf\u7cd5\uff0c\u66f4\u666e\u904d\u7684\u662f\uff0c\u6211\u5bf9FP\u548cOO\u7684\u4e89\u8bba\u5f88\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u4f3c\u4e4e\u201c\u4e3a\u4ec0\u4e48\u6ca1\u6709\u4eba\u628a\u6a21\u5757\u505a\u5bf9\u5462\uff1f\u201d\u662f\u4e00\u4e2a\u66f4\u7a81\u51fa\u7684\u95ee\u9898\u3002\nRust\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u5177\u6709\u4e00\u6d41\u5e93\u6982\u5ff5\u7684\u8bed\u8a00\u4e4b\u4e00\uff0cRust\u4ee3\u7801\u5206\u4e3a\u4e24\u4e2a\u5c42\u6b21\uff1a\n\u6a21\u5757\u4e4b\u95f4\u5141\u8bb8\u5faa\u73af\u4f9d\u8d56\uff0c\u4f46\u673a\u7bb1\u4e4b\u95f4\u4e0d\u5141\u8bb8\u5faa\u73af\u4f9d\u8d56\u3002\u673a\u7bb1\u662f\u91cd\u7528\u548c\u9690\u79c1\u7684\u5355\u4f4d\uff1a\u53ea\u6709\u673a\u7bb1\u7684\u516c\u5171API\u5f88\u91cd\u8981\uff0c\u4ec0\u4e48\u662f\u673a\u7bb1\u7684\u516c\u5171API\u662f\u975e\u5e38\u6e05\u695a\u7684\u3002\u6b64\u5916\uff0c\u673a\u7bb1\u662f\u533f\u540d\u7684\uff0c\u6240\u4ee5\u5728\u5355\u4e2a\u673a\u7bb1\u56fe\u4e2d\u6df7\u5408\u540c\u4e00\u673a\u7bb1\u7684\u51e0\u4e2a\u7248\u672c\u65f6\uff0c\u4e0d\u4f1a\u51fa\u73b0\u540d\u79f0\u51b2\u7a81\u548c\u4f9d\u8d56\u5730\u72f1\u3002\n\u8fd9\u4f7f\u5f97\u4f7f\u4e24\u6bb5\u4ee3\u7801\u4e0d\u76f8\u4e92\u4f9d\u8d56(\u975e\u4f9d\u8d56\u6027\u662f\u6a21\u5757\u6027\u7684\u672c\u8d28)\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff1a\u53ea\u9700\u5c06\u5b83\u4eec\u653e\u5728\u5355\u72ec\u7684craters\u4e2d\u3002\u5728\u4ee3\u7801\u5ba1\u67e5\u671f\u95f4\uff0c\u53ea\u9700\u4ed4\u7ec6\u76d1\u89c6\u5bf9Cargo.tomls\u7684\u66f4\u6539\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0cIntelliJ Rust\u662f\u4e00\u4e2a\u5355\u72ec\u7684Kotlin\u6a21\u5757\uff0c\u6240\u6709\u7684\u4e00\u5207\u90fd\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u5176\u4ed6\u6240\u6709\u4e1c\u897f\u3002\u867d\u7136IntelliJ Rust\u7684\u5185\u90e8\u7ec4\u7ec7\u975e\u5e38\u5e72\u51c0\uff0c\u4f46\u5b83\u6ca1\u6709\u53cd\u6620\u5728\u6587\u4ef6\u7cfb\u7edf\u5e03\u5c40\u548c\u6784\u5efa\u7cfb\u7edf\u4e2d\uff0c\u9700\u8981\u6301\u7eed\u7ef4\u62a4\u3002\n\u7ba1\u7406\u9879\u76ee\u7684\u6784\u5efa\u9700\u8981\u5927\u91cf\u7684\u65f6\u95f4\uff0c\u5e76\u4e14\u4f1a\u5bf9\u5176\u4ed6\u6240\u6709\u4e8b\u60c5\u4ea7\u751f\u500d\u589e\u7684\u5f71\u54cd\u3002\n\u94c1\u9508\u7684\u6784\u5efa\u7cfb\u7edfCARADE\u975e\u5e38\u597d\uff0c\u867d\u7136\u4e0d\u5b8c\u7f8e\uff0c\u4f46\u5b83\u662f\u7ee7Java\u2018s Gradle\u4e4b\u540e\u7684\u4e00\u80a1\u65b0\u9c9c\u7a7a\u6c14\u3002\nCargo\u7684\u8bc0\u7a8d\u5728\u4e8e\u5b83\u6ca1\u6709\u8bd5\u56fe\u6210\u4e3a\u4e00\u4e2a\u901a\u7528\u7684\u6784\u5efa\u7cfb\u7edf\uff0c\u5b83\u53ea\u80fd\u6784\u5efaRust\u9879\u76ee\uff0c\u5e76\u4e14\u5bf9\u9879\u76ee\u7ed3\u6784\u6709\u4e25\u683c\u7684\u671f\u671b\uff0c\u4e0d\u53ef\u80fd\u9009\u62e9\u9000\u51fa\u6838\u5fc3\u5047\u8bbe\uff0cConfiguration\u662f\u4e00\u4e2a\u9759\u6001\u7684\u3001\u4e0d\u53ef\u6269\u5c55\u7684TOML\u6587\u4ef6\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0cGradle\u5141\u8bb8\u81ea\u7531\u683c\u5f0f\u7684\u9879\u76ee\u7ed3\u6784\uff0c\u5e76\u901a\u8fc7\u56fe\u7075\u5b8c\u5168\u8bed\u8a00\u8fdb\u884c\u914d\u7f6e\u3002\u6211\u89c9\u5f97\u6211\u5b66\u4e60Gradle\u7684\u65f6\u95f4\u6bd4\u5b66\u4e60Rust\u7684\u65f6\u95f4\u8fd8\u591a\uff01\u8fd0\u884cWC-w\u4f1a\u7ed9\u51fa182_817\u4e2a\u5355\u8bcd\u7528\u4e8eRust\u56fe\u4e66\uff0c280_506\u4e2a\u5355\u8bcd\u7528\u4e8eGradle\u7684\u7528\u6237\u6307\u5357\u3002\n\u5f53\u7136\uff0c\u6700\u5927\u7684\u7f3a\u70b9\u662f\u81ea\u5b9a\u4e49\u6784\u5efa\u903b\u8f91\u4e0d\u80fd\u7528Cargo\u8868\u8fbe\u3002\u8fd9\u4e24\u4e2a\u9879\u76ee\u90fd\u9700\u8981\u5927\u91cf\u7684\u903b\u8f91\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7f16\u8bd1\uff0c\u624d\u80fd\u5c06\u6700\u7ec8\u7ed3\u679c\u4ea4\u4ed8\u7ed9\u7528\u6237\u3002\u5bf9\u4e8e\u9508\u8680\u5206\u6790\u5668\u6765\u8bf4\uff0c\u8fd9\u662f\u7531\u624b\u5199\u7684\u9508\u8680\u811a\u672c\u5904\u7406\u7684\uff0c\u5728\u8fd9\u79cd\u89c4\u6a21\u4e0b\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\n\u5bf9\u5e93\u7684\u8bed\u8a00\u7ea7\u652f\u6301\u548c\u4e00\u6d41\u7684\u6784\u5efa\u7cfb\u7edf/\u5305\u7ba1\u7406\u5668\u4f7f\u751f\u6001\u7cfb\u7edf\u84ec\u52c3\u53d1\u5c55\u3002\u9508\u68c0\u5206\u6790\u5668\u6bd4IntelliJ Rust\u66f4\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\u3002\u9508\u68c0\u5206\u6790\u5668\u7684\u67d0\u4e9b\u90e8\u5206\u4e5f\u53d1\u5e03\u5230crates.io\u4ee5\u4f9b\u5176\u4ed6\u9879\u76ee\u91cd\u7528\u3002\n\u6b64\u5916\uff0cRust\u7f16\u7a0b\u8bed\u8a00\u7684\u4f4e\u7ea7\u7279\u6027\u901a\u5e38\u5141\u8bb8\u201c\u5b8c\u7f8e\u7684\u201d\u5e93\u63a5\u53e3\uff0c\u8fd9\u4e9b\u63a5\u53e3\u51c6\u786e\u5730\u53cd\u6620\u4e86\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u800c\u4e0d\u4f1a\u5f3a\u52a0\u4e2d\u95f4\u8bed\u8a00\u7ea7\u522b\u7684\u62bd\u8c61\u3002\n\u6211\u89c9\u5f97\u5f53\u6d89\u53ca\u5230\u57fa\u672c\u8bed\u8a00\u7684\u7ec6\u8282\u65f6\uff0cRUST\u7684\u6548\u7387\u8981\u9ad8\u5f97\u591a\u3002\u2009-\u2009\u7ed3\u6784\u3001\u679a\u4e3e\u3001\u51fd\u6570\u7b49\u3002\u8fd9\u5e76\u4e0d\u662fRUST\u6240\u7279\u6709\u7684\uff0c\u4efb\u4f55ML\u7cfb\u5217\u8bed\u8a00\u90fd\u6709\u5b83\u4eec\u3002\u4f46\u662f\uff0cRUST\u662f\u7b2c\u4e00\u79cd\u5c06\u8fd9\u4e9b\u7279\u6027\u5c01\u88c5\u5728\u4e00\u4e2a\u5f88\u597d\u7684\u5305\u4e2d\u7684\u5de5\u4e1a\u8bed\u8a00\uff0c\u4e0d\u53d7\u5411\u540e\u517c\u5bb9\u6027\u7684\u9650\u5236\u3002\u6211\u60f3\u5217\u51fa\u4e00\u4e9b\u6211\u8ba4\u4e3a\u53ef\u4ee5\u5728RUST\u4e2d\u66f4\u5feb\u5730\u751f\u6210\u53ef\u7ef4\u62a4\u4ee3\u7801\u7684\u5177\u4f53\u7279\u6027\u3002\u4f46\u662f\uff0cRUST\u662f\u7b2c\u4e00\u79cd\u5c06\u8fd9\u4e9b\u7279\u6027\u5c01\u88c5\u5728\u4e00\u4e2a\u5f88\u597d\u7684\u5305\u4e2d\u7684\u5de5\u4e1a\u8bed\u8a00\u3002\u6211\u60f3\u5217\u51fa\u4e00\u4e9b\u6211\u8ba4\u4e3a\u53ef\u4ee5\u5728RUST\u4e2d\u66f4\u5feb\u5730\u751f\u6210\u53ef\u7ef4\u62a4\u4ee3\u7801\u7684\u5177\u4f53\u7279\u6027\u3002\n\u5f3a\u8c03\u6570\u636e\u91cd\u4e8e\u884c\u4e3a\u3002\u4e5f\u5c31\u662f\u8bf4\uff0cRUST\u4e0d\u662f\u4e00\u79cdOOP\u8bed\u8a00\u3002OOP\u7684\u6838\u5fc3\u601d\u60f3\u662f\u52a8\u6001\u5206\u6d3e\u2009-\u2009\uff0c\u7531\u51fd\u6570\u8c03\u7528\u8c03\u7528\u7684\u4ee3\u7801\u662f\u5728\u8fd0\u884c\u65f6\u51b3\u5b9a\u7684(\u540e\u671f\u7ed1\u5b9a)\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u5f0f\uff0c\u5141\u8bb8\u7075\u6d3b\u548c\u53ef\u6269\u5c55\u7684\u7cfb\u7edf\u3002\u95ee\u9898\u662f\uff0c\u53ef\u6269\u5c55\u6027\u662f\u6602\u8d35\u7684\uff01\u6700\u597d\u53ea\u5728\u67d0\u4e9b\u6307\u5b9a\u7684\u9886\u57df\u5e94\u7528\u5b83\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8bbe\u8ba1\u53ef\u6269\u5c55\u6027\u662f\u4e0d\u5212\u7b97\u7684\u3002Rust\u5c06\u9759\u6001\u5206\u6d3e\u653e\u5728\u6700\u524d\u9762\u548c\u4e2d\u5fc3\uff1a\u53ea\u9700\u8bfb\u53d6\u4ee3\u7801\u5c31\u53ef\u4ee5\u5f88\u6e05\u695a\u5730\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u56e0\u4e3a\u5b83\u72ec\u7acb\u4e8e\u5bf9\u8c61\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u3002\n\u6211\u559c\u6b22Rust\u7684\u4e00\u4e2a\u5c0f\u8bed\u6cd5\u65b9\u9762\u662f\u5b83\u5982\u4f55\u5728\u8bed\u6cd5\u4e0a\u5c06\u5b57\u6bb5\u548c\u65b9\u6cd5\u653e\u5230\u4e0d\u540c\u7684\u5757\u4e2d\uff1a\nStruct Person{First_Name\uff1aString\uff0cLast_Name\uff1aString\uff0c}Impll Person{fn Full_Name(&amp\uff1bSelf)-&gt\uff1bString{...}}\u3002\n\u80fd\u591f\u4e00\u76ee\u4e86\u7136\u5730\u770b\u5230\u6240\u6709\u5b57\u6bb5\u4f7f\u5f97\u7406\u89e3\u4ee3\u7801\u53d8\u5f97\u7b80\u5355\u5f97\u591a\uff0c\u5b57\u6bb5\u4f20\u8fbe\u7684\u4fe1\u606f\u6bd4\u65b9\u6cd5\u591a\u5f97\u591a\u3002\nSUM\u7c7b\u578b\u3002Rust\u7684\u7b80\u5355\u547d\u540d\u679a\u4e3e\u662f\u5168\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u8868\u8fbe\u4e0d\u76f8\u4ea4\u5e76\u96c6\u7684\u6982\u5ff5\uff1a\n\u8fd9\u5728\u5c0f\u7684\u65e5\u5e38\u7f16\u7a0b\u4e2d\u975e\u5e38\u6709\u7528\uff0c\u6709\u65f6\u5728\u5927\u7684\u7f16\u7a0b\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0cIDE\u7684\u6838\u5fc3\u6982\u5ff5\u4e4b\u4e00\u662f\u5f15\u7528\u548c\u5b9a\u4e49\u3002\u50cflet foo=92\uff1b\u8fd9\u6837\u7684\u5b9a\u4e49\u4e3a\u53ef\u4ee5\u5728\u4e00\u884c\u4e2d\u4f7f\u7528\u7684\u5b9e\u4f53\u6307\u5b9a\u4e00\u4e2a\u540d\u79f0\u3002\u50cffoo+90\u8fd9\u6837\u7684\u5f15\u7528\u6307\u7684\u662f\u4e00\u4e9b\u5b9a\u4e49\u3002\u5f53\u4f60\u6309\u4f4fctrl\u952e\u5355\u51fb\u5f15\u7528\u65f6\uff0c\u5c31\u4f1a\u8f6c\u5230\u5b9a\u4e49\u3002\n\u5728Kotlin\u4e2d\u5efa\u6a21\u7684\u81ea\u7136\u65b9\u6cd5\u662f\u6dfb\u52a0\u63a5\u53e3\u5b9a\u4e49\u548c\u63a5\u53e3\u5f15\u7528\u3002\u95ee\u9898\u662f\uff0c\u6709\u4e9b\u4e1c\u897f\u4e24\u8005\u90fd\u6709\uff01\nStruct S{field\uff1aI32}fn\u8fdb\u7a0b{\u5339\u914ds{S{field}=&gt\uff1bprintln\uff01(&#34\uff1b{}&#34\uff1b\uff0cfield+2)}}\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u65e2\u662f\u5bf9field\uff1ai32\u5b9a\u4e49\u7684\u5f15\u7528\uff0c\u4e5f\u662f\u540d\u79f0\u4e3afield\u7684\u5c40\u90e8\u53d8\u91cf\u7684\u5b9a\u4e49\uff01\u7c7b\u4f3c\u5730\uff0c\u5728\u3002\n\u5b57\u6bb5\u5728\u6982\u5ff5\u4e0a\u5305\u542b\u4e24\u4e2a\u2009-\u2009\u5f15\u7528\uff0c\u4e00\u4e2a\u662f\u5bf9\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\uff0c\u53e6\u4e00\u4e2a\u662f\u5bf9\u5b57\u6bb5\u5b9a\u4e49\u7684\u5f15\u7528\u3002\n\u5728IntelliJ Rust\u4e2d\uff0c\u8fd9\u901a\u5e38\u662f\u901a\u8fc7\u5411\u4e0b\u9884\u6d4b\u7279\u6b8a\u60c5\u51b5\u6765\u5904\u7406\u7684\u3002\u5728\u9508\u8680\u5206\u6790\u5668\u4e2d\uff0c\u8fd9\u662f\u7531\u5217\u51fa\u6240\u6709\u7279\u6b8a\u60c5\u51b5\u7684\u679a\u4e3e\u6765\u5904\u7406\u7684\u3002\n\u9632\u9508\u5206\u6790\u5668\u662f\u975e\u5e38\u7e41\u91cd\u7684\uff0c\u6709\u5f88\u591a\u4ee3\u7801\u67af\u71e5\u5730\u5339\u914dN\u4e2a\u53d8\u91cf\uff0c\u5e76\u4e14\u505a\u51e0\u4e4e\u76f8\u540c\u7684\u4e8b\u60c5\u3002\u8fd9\u6bb5\u4ee3\u7801\u6bd4\u7279\u6b8a\u5916\u58f3\u7279\u5b9a\u5947\u602a\u60c5\u51b5\u7684IntelliJ Rust\u66ff\u4ee3\u65b9\u6848\u66f4\u5197\u957f\uff0c\u4f46\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u652f\u6301\u3002\u60a8\u4e0d\u9700\u8981\u5728\u5934\u8111\u4e2d\u4fdd\u6301\u66f4\u5e7f\u6cdb\u7684\u4e0a\u4e0b\u6587\u6765\u7406\u89e3\u54ea\u4e9b\u7279\u6b8a\u60c5\u51b5\u53ef\u80fd\u662f\u53ef\u80fd\u7684\u3002\n\u9519\u8bef\u5904\u7406\u3002\u5f53\u8c08\u5230\u7a7a\u5b89\u5168\u6027\u65f6\uff0cKotlin\u548cRust\u5728\u5b9e\u8df5\u4e2d\u57fa\u672c\u4e0a\u662f\u7b49\u4ef7\u7684\u3002\u8054\u5408\u7c7b\u578b\u548cSUM\u7c7b\u578b\u4e4b\u95f4\u6709\u4e00\u4e9b\u66f4\u7ec6\u5fae\u7684\u533a\u522b\uff0c\u4f46\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u5b83\u4eec\u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\u662f\u65e0\u5173\u7684\u3002\u4ece\u8bed\u6cd5\u4e0a\u8bb2\uff0cKotlin\u7684\uff1f\u8fd8\u6709\uff1f\uff1a\u7ecf\u5e38\u611f\u89c9\u66f4\u65b9\u4fbf\u4e00\u4e9b\u3002\n\u7136\u800c\uff0c\u5f53\u8c08\u5230\u9519\u8bef\u5904\u7406(Result&lt\uff1bT\uff0cE&gt\uff1b\u800c\u4e0d\u662fOption&lt\uff1bT&gt\uff1b)\u65f6\uff0cRust\u8f7b\u677e\u53d6\u80dc\u3002\u5728\u8c03\u7528\u70b9\u4e0a\u6ce8\u91ca\u9519\u8bef\u8def\u5f84\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u3002\u4ee5\u4e00\u79cd\u4f7f\u7528\u9ad8\u9636\u51fd\u6570\u7684\u65b9\u5f0f\u5bf9\u51fd\u6570\u8fd4\u56de\u7c7b\u578b\u4e2d\u7684\u9519\u8bef\u8fdb\u884c\u7f16\u7801\u6709\u52a9\u4e8e\u83b7\u5f97\u5065\u58ee\u7684\u4ee3\u7801\u3002\u6211\u5bb3\u6015\u7528Kotlin\u548cPython\u8c03\u7528\u5916\u90e8\u8fdb\u7a0b\uff0c\u56e0\u4e3a\u8fd9\u6b63\u662f\u5e38\u89c1\u5f02\u5e38\u7684\u5730\u65b9\uff0c\u800c\u4e14\u6211\u6bcf\u6b21\u90fd\u5fd8\u8bb0\u81f3\u5c11\u5904\u7406\u4e00\u79cd\u60c5\u51b5\u3002\n\u5c3d\u7ba1Rust\u7684\u7c7b\u578b\u548c\u8868\u8fbe\u5f0f\u901a\u5e38\u5141\u8bb8\u60a8\u51c6\u786e\u5730\u58f0\u660e\u60a8\u60f3\u8981\u4ec0\u4e48\uff0c\u4f46\u662f\u4ecd\u7136\u5b58\u5728\u501f\u7528\u68c0\u67e5\u5668\u9047\u5230\u969c\u788d\u7684\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u80fd\u8fd4\u56de\u60f3\u8981\u4ece\u4e34\u65f6\u7684\uff1autils.rs\u501f\u7528\u7684\u8fed\u4ee3\u5668\u3002\n\u5728\u5b66\u4e60\u65f6\uff0c\u8fd9\u7c7b\u9508\u8680\u95ee\u9898\u975e\u5e38\u9891\u7e41\u3002\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u5c06\u4f20\u7edf\u7684\u201c\u6307\u9488\u6c64\u201d\u8bbe\u8ba1\u5e94\u7528\u4e8e\u9508\u8680\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002\u6839\u636e\u7ecf\u9a8c\uff0c\u4e0e\u8bbe\u8ba1\u76f8\u5173\u7684\u501f\u7528\u68c0\u67e5\u5668\u9519\u8bef\u5f80\u5f80\u4f1a\u968f\u7740\u7ec4\u4ef6\u6811\u7684\u8fd0\u884c\u800c\u9010\u6e10\u6d88\u5931\uff0c\u800c\u4e14\u51e0\u4e4e\u603b\u662f\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u3002\u5269\u4f59\u7684\u501f\u7528\u68c0\u67e5\u5668\u9650\u5236\u662f\u607c\u4eba\u7684\uff0c\u4f46\u5728\u603b\u4f53\u89c4\u5212\u4e2d\u65e0\u5173\u7d27\u8981\u3002\nIntelliJ Rust\u548cRust-Analyzer\u4f7f\u7528\u7c7b\u4f3c\u7684\u5e76\u53d1\u65b9\u6cd5\uff0c\u6709\u4e00\u4e2a\u5168\u5c40\u8bfb\u5199\u9501\u6765\u4fdd\u62a4\u57fa\u672c\u5e94\u7528\u7a0b\u5e8f\u72b6\u6001\uff0c\u8fd8\u6709\u5927\u91cf\u7528\u4e8e\u6d3e\u751f\u6570\u636e\u7684\u7ebf\u7a0b\u5b89\u5168\u7f13\u5b58\u3002\n\u5728\u79d1\u7279\u6797\u7ba1\u7406\u8fd9\u4ef6\u4e8b\u5f88\u96be\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u66fe\u7ecf\u95ee\u81ea\u5df1\u201c\u6211\u5e94\u8be5\u628a\u8fd9\u4ef6\u4e8b\u6807\u8bb0\u4e3a\u4e0d\u7a33\u5b9a\u5417\uff1f\u201d\u5728\u6ca1\u6709\u660e\u786e\u7684\u65b9\u6cd5\u5f97\u5230\u7b54\u6848\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u786e\u5b9a\u67d0\u4e2a\u4e1c\u897f\u5728Kotlin\u4e2d\u662f\u5426\u5e94\u8be5\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u65b9\u6cd5\u662f\u9605\u8bfb\u6587\u6863\u5e76\u67e5\u627e\u6240\u6709\u7528\u6cd5\u3002\n\u76f8\u53cd\uff0c\u201c\u8be5\u7c7b\u578b\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u5417\uff1f\u201d\u662f\u53cd\u6620\u5728Rust\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u5c5e\u6027(\u901a\u8fc7Send\u548cSync\u7279\u5f81)\u3002\u7f16\u8bd1\u5668\u81ea\u52a8\u6d3e\u751f\u7ebf\u7a0b\u5b89\u5168\u6027\uff0c\u5e76\u68c0\u67e5\u975e\u7ebf\u7a0b\u5b89\u5168\u7c7b\u578b\u662f\u5426\u88ab\u610f\u5916\u5171\u4eab\u3002\n\u5728IntelliJ Rust\u548cRust-Analyzer\u4e2d\u90fd\u53d1\u751f\u4e86\u4e00\u4e2abug\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u6848\u4f8b\u3002\u5728\u8fd9\u4e24\u4e2a\u9879\u76ee\u4e2d\uff0c\u6211\u90fd\u5229\u7528\u4e86\u7ebf\u7a0b\u4e4b\u95f4\u5171\u4eab\u7684\u7f13\u5b58\u3002\u5728\u8fd9\u4e24\u4e2a\u9879\u76ee\u4e2d\uff0c\u6211\u66fe\u7ecf\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u667a\u80fd\u4f18\u5316\uff0c\u4e0d\u5e78\u7684\u662f(\u65e0\u610f\u4e2d)\u5c06\u7ebf\u7a0b\u4e0d\u5b89\u5168\u7684\u6570\u636e\u653e\u5230\u4e86\u8fd9\u4e2a\u5171\u4eab\u7684Cache\u4e2d\u3002\u5728IntelliJ Rust\u4e2d\uff0c\u6211\u4eec\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u53d1\u73b0\u6709\u95ee\u9898\uff0c\u5e76\u8fdb\u884c\u4e86\u66f4\u591a\u7684\u8c03\u67e5\u6765\u786e\u5b9a\u6839\u672c\u539f\u56e0\u3002\u5728Ruust-Analyzer\u4e2d\uff0c\u6211\u53ea\u662f\u6d6a\u8d39\u4e86\u65f6\u95f4\u6765\u5b9e\u73b0\u4f18\u5316\u672c\u8eab\u3002\u5728\u6211\u4fee\u590d\u4e86\u6211\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u4e4b\u540e\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a\u9519\u8bef\u3002\u5728IntelliJ Rust\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u53d1\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u7136\u540e\u8fdb\u884c\u4e86\u66f4\u591a\u7684\u8c03\u67e5\u6765\u627e\u51fa\u6839\u672c\u539f\u56e0\u3002\u5728Ruust-Analyzer\u4e2d\uff0c\u6211\u53ea\u6d6a\u8d39\u4e86\u65f6\u95f4\u6765\u5b9e\u73b0\u4f18\u5316\u672c\u8eab\u3002\u5728\u6211\u4fee\u590d\u4e86\u6211\u8ba4\u4e3a\u662f\u6700\u540e\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\u4e4b\u540e\uff0c\u7f16\u8bd1\u5668\u4e25\u8083\u5730\u6307\u51fa\uff0c\u5c06\u5305\u542bB\u7684A\u548c\u5305\u542b\u975e\u7ebf\u7a0b\u5b89\u5168D\u7684C\u653e\u5165\u8de8\u7ebf\u7a0b\u5171\u4eab\u7684\u7ed3\u6784\u4e2d\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u4e3b\u610f\uff01\n\u6211\u5f00\u53d1IntelliJ Rust\u7684\u4e00\u822c\u7ecf\u9a8c\u662f\u201c\u65e0\u8bba\u6211\u505a\u4ec0\u4e48\uff0c\u5b83\u90fd\u4e0d\u50cf\u6211\u5e0c\u671b\u7684\u90a3\u6837\u5feb\u201d\uff0c\u800c\u6211\u4f7f\u7528\u94c1\u9508\u5206\u6790\u4eea\u7684\u7ecf\u9a8c\u6b63\u597d\u76f8\u53cd\uff0c\u201c\u65e0\u8bba\u6211\u505a\u4ec0\u4e48\uff0c\u5b83\u90fd\u8db3\u591f\u5feb\u201d\u3002\n\u4f5c\u4e3a\u4e00\u5219\u8f76\u4e8b\uff0c\u6211\u65e9\u671f\u5728\u9508\u8680\u5206\u6790\u5668\u4e2d\u5b9e\u73b0\u5b9a\u70b9\u8fed\u4ee3\u540d\u79f0\u89e3\u6790\u7b97\u6cd5\u3002\u8fd9\u662f\u4e00\u4e2aIDE\u7684\u654c\u610f\u4e4b\u5904\u3002\u5b83\u9700\u8981\u5728\u6bcf\u4e00\u6b21\u51fb\u952e\u4e0a\u91cd\u505a\u76f8\u5f53\u591a\u7684\u5de5\u4f5c\uff0c\u5982\u679c\u505a\u5f97\u5f88\u5929\u771f\u7684\u8bdd\u3002\u5f53\u6211\u7528\u8fd9\u4e2a\u66f4\u6539\u6784\u5efa\u9508\u8680\u5206\u6790\u5668\u65f6\uff0c\u6211\u7ec8\u4e8e\u770b\u5230\u5b8c\u6210\u660e\u663e\u6ede\u540e\u3002\u201c\u5c31\u662f\u8fd9\u6837\u201d\uff0c\u6211\u60f3\uff0c\u201c\u6211\u5e94\u8be5\u505c\u6b62\u53ea\u4f7f\u7528\u5e7c\u7a1a\u7684\u7b97\u6cd5\uff0c\u5f00\u59cb\u5e94\u7528\u4e00\u4e9b\u4f18\u5316\u201d\u3002\u597d\u4e86\uff0c\u539f\u6765\u6211\u62ff\u4e86\u4e00\u4e2a\u8c03\u8bd5\u7248\u672c\u7684\u9508\u8680\u5206\u6790\u5668\u4f5c\u4e3a\u6d4b\u8bd5\u9a71\u52a8\uff01\u7528-\u53d1\u5e03-\u91cd\u5efa\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\u65c1\u767d\uff1a\u5bf9\u4e8eRust\u6765\u8bf4\uff0c\u8c03\u8bd5\u6784\u5efa\u901a\u5e38\u975e\u5e38\u6162\u7684\u4e8b\u5b9e\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u3002\n\u62e5\u6709\u57fa\u51c6\u826f\u597d\u7684\u6027\u80fd\u7edd\u5bf9\u6709\u52a9\u4e8e\u63d0\u9ad8\u751f\u4ea7\u529b\u2009-\u2009\u9488\u5bf9\u6027\u80fd\u4f18\u5316\u4ee3\u7801\u901a\u5e38\u4f1a\u4f7f\u91cd\u6784\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u60a8\u53ef\u4ee5\u5728\u4f4e\u7ea7\u522b\u7684\u6027\u80fd\u4f18\u5316\u4e0a\u6295\u5165\u7684\u65f6\u95f4\u8d8a\u957f(\u4e0e\u4f53\u7cfb\u7ed3\u6784\u7ea7\u522b\u7684\u6027\u80fd\u5de5\u4f5c\u76f8\u53cd)\uff0c\u60a8\u9700\u8981\u505a\u7684\u603b\u5de5\u4f5c\u5c31\u4f1a\u8d8a\u5c11\u3002\n\u66f4\u91cd\u8981\u7684\u662f\uff0cRust\u7684\u6027\u80fd\u662f\u53ef\u9884\u6d4b\u7684\u3002\u901a\u5e38\uff0c\u8fd0\u884c\u4e00\u4e2a\u7a0b\u5e8fN\u6b21\u4f1a\u5f97\u5230\u5927\u81f4\u76f8\u540c\u7684\u7ed3\u679c\u3002\u8fd9\u4e0eJVM\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\uff0c\u5728JVM\u4e2d\uff0c\u60a8\u9700\u8981\u505a\u5927\u91cf\u70ed\u8eab\u624d\u80fd\u7a33\u5b9a\u751a\u81f3\u662f\u5fae\u57fa\u51c6\u6d4b\u8bd5\u3002\u5728IntelliJ Rust\u4e2d\uff0c\u6211\u4ece\u672a\u6210\u529f\u5730\u8fdb\u884c\u8fc7\u53ef\u91cd\u73b0\u7684\u5b8f\u57fa\u51c6\u6d4b\u8bd5\u3002\n\u66f4\u5e7f\u6cdb\u5730\u8bf4\uff0c\u6ca1\u6709\u8fd0\u884c\u65f6\uff0c\u7a0b\u5e8f\u884c\u4e3a\u7684\u53d8\u5316\u8981\u5c0f\u5f97\u591a\uff0c\u8fd9\u4f7f\u5f97\u8ffd\u9010\u56de\u5f52\u66f4\u52a0\u6709\u6548\u3002\n\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u6709\u4e00\u4ef6\u4e8b\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff0c\u90a3\u5c31\u662f\u5185\u5b58\u5b89\u5168\uff1a\u4e24\u4e2a\u9879\u76ee\u90fd\u6ca1\u6709\u6bb5\u9519\u8bef\u6216\u5806\u635f\u574f\uff0c\u540c\u6837\uff0c\u7a7a\u6307\u9488\u53d6\u6d88\u5f15\u7528\u4e5f\u4e0d\u662f\u95ee\u9898\u3002\n\u4e0e\u5176\u4ed6\u7cfb\u7edf\u8bed\u8a00\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u662fRust\u6700\u91cd\u8981\u7684\u4f18\u70b9\uff0c\u4f46\u662f\u5bf9\u4e8e\u624b\u5934\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u8bf4\uff0c\u5b83\u4eec\u662f\u65e0\u5173\u7d27\u8981\u7684\u3002\n\u6211\u8ba4\u4e3a\u8bb8\u591a\u8ba8\u8bba\u70b9\u7684\u7edf\u4e00\u4e3b\u9898\u662f\u201c\u5927\u89c4\u6a21\u7f16\u7a0b\u201d\u3002\u6a21\u5757\u5316\u3001\u6784\u5efa\u8fc7\u7a0b\u3001\u53ef\u9884\u6d4b\u6027\u53ea\u6709\u5728\u4ee3\u7801\u7684\u6570\u91cf\u3001\u5e74\u9f84\u548c\u8d21\u732e\u8005\u7684\u6570\u91cf\u589e\u957f\u65f6\u624d\u5f00\u59cb\u91cd\u8981\u3002\u6211\u559c\u6b22Ttes Winters\u7684\u8868\u8ff0\uff0c\u5373\u201c\u8f6f\u4ef6\u5de5\u7a0b\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u8fdb\u884c\u96c6\u6210\u7684\u7f16\u7a0b\u201d\u3002Rust\u64c5\u957f\u8fd9\u7c7b\u5de5\u4f5c\uff0c\u5b83\u662f\u4e00\u79cd\u53ef\u4f38\u7f29\u7684\u8bed\u8a00\u3002\n\u6211\u66f4\u6b23\u8d4f\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0cRust\u53ef\u80fd\u662f\u4e00\u79cd\u51e0\u4e4e\u901a\u7528\u7684\u8bed\u8a00\u7684\u4e00\u4e2a\u770b\u4f3c\u5408\u7406\u7684\u5019\u9009\u8005\u3002\u5f15\u7528\u53e6\u4e00\u53e5\u5f88\u68d2\u7684\u8bdd(John Carmack)\uff1a\u201c\u9002\u5408\u8fd9\u9879\u5de5\u4f5c\u7684\u6b63\u786e\u5de5\u5177\u901a\u5e38\u662f\u4f60\u5df2\u7ecf\u5728\u4f7f\u7528\u7684\u5de5\u5177\u201d\u3002\u4e0a\u4e0b\u6587\u5207\u6362\u548c\u8fde\u63a5\u4e0d\u540c\u6280\u672f\u9700\u8981\u5f88\u591aEffort\u3002\u4f7f\u7528Rust\uff0c\u4f60\u901a\u5e38\u4e0d\u9700\u8981\uff01\u5b83\u81ea\u7136\u53ef\u4ee5\u7f29\u51cf\u5230\u88f8\u91d1\u5c5e\u3002\u6b63\u5982\u672c\u6587\u6240\u63a2\u7d22\u7684\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7ea7\u7f16\u7a0b\u3002Rust\u751a\u81f3\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4e5f\u9002\u7528\u4e8e\u811a\u672c\u7f16\u5199\uff01Rust-Analyzer\u7684\u6784\u5efa\u57fa\u7840\u5728\u7406\u8bba\u4e0a\u66f4\u9002\u5408bash\u548cPython\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u53ef\u4ee5\u5f88\u81ea\u7136\u5730\u7f29\u51cf\u5230\u88f8\u9732\u7684\u91d1\u5c5e\u3002\u6b63\u5982\u672c\u6587\u6240\u63a2\u7d22\u7684\u90a3\u6837\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5f88\u597d\u5730\u7528\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7ea7\u7f16\u7a0b\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0cRust\u751a\u81f3\u8fd8\u53ef\u4ee5\u7528\u4e8e\u811a\u672c\u7f16\u5199\uff01Rust-Analyzer\u7684\u6784\u5efa\u57fa\u7840\u5728\u7406\u8bba\u4e0a\u66f4\u9002\u5408bash\u548cPython\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u94c1\u9508\u53ef\u4ee5\u5f88\u597d\u5730\u5de5\u4f5c\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f88\u597d\u5730\u8de8\u5e73\u53f0\u3002\n\u6700\u540e\uff0c\u6211\u60f3\u91cd\u7533\uff0c\u672c\u6848\u4f8b\u7814\u7a76\u53ea\u6d89\u53ca\u4e24\u4e2a\u76f8\u4f3c\u4f46\u4e0d\u662f\u5b6a\u751f\u7684\u9879\u76ee\u3002\u4e0a\u4e0b\u6587\u4e5f\u5f88\u91cd\u8981\uff1a\u6838\u5fc3\u529f\u80fd\u4e0d\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\u5bf9\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u6765\u8bf4\u6709\u70b9\u4e0d\u5bfb\u5e38\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6211\u8ba4\u4e3a\u8fd9\u79cd\u7ecf\u9a8c\u548c\u5206\u6790\u6307\u5411\u4e86\u5b9a\u6027\u6b63\u786e\u7684\u65b9\u5411\uff0c\u4f46\u60a8\u7684\u5b9a\u91cf\u7ed3\u679c\u53ef\u80fd\u4f1a\u6709\u5f88\u5927\u5dee\u5f02\uff01", "note_en": "In this article, we will compare one apple (IntelliJ Rust) to one orange (rust-analyzer) to reach general and sweeping conclusions.Specifically, I want to present a case study supporting the following claim:\n  For me, this is an unusual claim to argue: I always thought exactly the opposite, but I am not so sure now.I came to Rust from C++.I was of the opinion that this is a brilliant low-level language and always felt puzzled at people writing higher-level things in Rust.Clearly, choosing Rust means taking a productivity hit, and using Kotlin, C# or Go just makes much more sense if you can afford GC.My  list of Rust criticisms starts with this objection.\n What moved my position in the other direction was my experience as the lead developer of rust-analyzer and IntelliJ Rust.Let me introduce the two projects.\n IntelliJ Rust is the plugin for IntelliJ Platform, providing Rust support.In effect, it is a Rust compiler front-end, written in Kotlin and making use of language-support features of the platform.These features include lossless syntax trees, a parser generator, persistence and indexing infrastructure, among others.Nonetheless, as programming languages differ lot, the bulk of logic for analyzing Rust is implemented in the plugin itself.Presentational features like completion list come from the platform, but most of the language semantics is hand-written.IntelliJ Rust also includes a bit of a Swing GUI.\n rust-analyzer is an implementation of Language Server Protocol for Rust.It is a Rust compiler front-end written from scratch with an eye towards IDE support.It makes heavy use of  salsa library for incremental computations.Beyond the compiler itself, rust-analyzer includes code for managing long-lived multithreaded process of the language server itself.\n The projects are essentially equivalent in scope\u2009\u2014\u2009rust compiler front-ends suitable for IDEs.The two biggest differences are:\n IntelliJ Rust is a plugin, so it can re-use code and design patterns of the surrounding platform.\n rust-analyzer is the second system, so it leverages experience of IntelliJ Rust for a from-scratch design.\n The internal architecture of the two projects also differs a lot.In terms of  Three Architectures, IntelliJ Rust is map-reduce, and rust-analyzer is query-based.\n Writing an IDE-ready compiler is a high-level task.You don\u2019t need to talk to the operating system directly.There are some fancy data structures and concurrency here and there, but they are also high-level.It\u2019s not about implementing crazy lock-free schemes, it\u2019s about maintaining application state and sanity in the multithreaded world.The bulk of the compiler is symbolic manipulation, arguably best suited for lisp.Picking a VM-based language for such task (for example, OCaml), doesn\u2019t have any intrinsic downsides.\n At the same time, the task is pretty complex and unique.The ratio of \u201cyour code\u201d vs \u201cframework code\u201d when implementing features is much higher than in a typical CRUD backend.\n   Both are about 2 years old, with 1-1.5 developers working full time and vibrant and thriving community of open-source contributors.There are 52k lines of Kotlin and 66k lines of Rust.\n Both delivered roughly equivalent feature sets at that time.To be honest, I still don\u2019t really believe this :)rust-analyzer started from zero, it didn\u2019t have a decade worth of Java classes to bootstrap from, and the productivity drop between Kotlin and Rust is supposed to be huge.But it\u2019s hard to argue with reality.Instead, let me try to reflect on my experience building both, and to try to explain Rust\u2019s surprising productivity.\n It\u2019s easy to characterize Kotlin\u2019s learning curve\u2009\u2014\u2009it is nearly zero.I\u2019ve started IntelliJ Rust without Kotlin experience and never felt that I need to specifically learn Kotlin.\n When I switched to rust-analyzer, I was pretty experienced with Rust.I would say that one definitely needs to deliberately learn Rust, it\u2019s hard to pick it up on the go.Ownership and aliasing control are novel concepts (even if you come from C++), and taking holistic approach to learning them pays off.After the initial learning step the ride is generally smooth.\n By the way, this is the perfect place to plug our Rust courses and tailor-made  trainings :-)The next  introduction to Rust is happening this December!\n This I think is the biggest factor.Both projects are moderately large in terms of scope as well as in terms of amount of source code.I believe that the only way to ship big things is to split them in independent-ish chunks and implement the chunks separately.\n I also find most of the languages I am familiar with to be pretty horrible with respect to modularity.More generally, I am amused with FP vs OO debate, as it seems that \u201cwhy no one does modules right?\u201d is a more salient issue.\n Rust is one of the few languages which has first-class concept of libraries.Rust code is organized on two levels:\n  Cyclic dependencies are allowed between the modules, but not between the crates.Crates are units of reuse and privacy: only crate\u2019s public API matters, and it is crystal clear what crate\u2019s public API is.Moreover, crates are anonymous, so you don\u2019t get name conflicts and dependency hell when mixing several versions of the same crate in a single crate graph.\n This makes it very easy to make two pieces of code  not depend on each other (non-dependencies are the essence of modularity): just put them in separate crates.During code review, only changes to Cargo.tomls need to be monitored carefully.\n At the time of comparison, rust-analyzer is split into 23 internal crates, with a handful general-purposed ones released on crates.io.In contrast, IntelliJ Rust is a single Kotlin module, where everything can depend on everything else.Although internal organization of IntelliJ Rust is pretty clean, it\u2019s not reflected in the file system layout and build system, and needs constant maintenance.\n Managing project\u2019s build takes significant amount of times, and has multiplicative effect on everything else.\n Rust\u2019s build system,  Cargo, is very good.It\u2019s not perfect, but it is a breath of fresh air after Java\u2019s  Gradle.\n Cargo\u2019s trick is that it doesn\u2019t try to be a general purpose build system.It can only build Rust projects, and it has rigid expectation about the project structure.It\u2019s impossible to opt out of the core assumptions.Configuration is a static non-extensible TOML file.\n In contrast, Gradle allows free-form project structure, and is configured via a Turing complete language.I feel like I\u2019ve spend more time learning Gradle than learning Rust!Running  wc -w gives 182_817 words for Rust book, and 280_506 for Gradle\u2019s user guide.\n  Of course, the biggest downside is that custom build logic is not expressible in Cargo.Both projects needs substantial amount of logic beyond mere compilation to deliver the final result to the user.For rust-analyzer, this is handled by hand-written Rust script, which works perfectly at this scale.\n Language-level support for libraries and top-notch build system/package manager allow for a thriving ecosystem.rust-analyzer relies on third-party libraries much more than IntelliJ Rust.Some parts of rust-analyzer are also published to crates.io for other projects to reuse.\n Additionally, low-level nature of the Rust programming language often allows for \u201cperfect\u201d library interfaces.Interfaces which exactly reflect the underlying problem, without imposing intermediate language-level abstractions.\n I feel that Rust is significantly more productive when it comes to basic language nuts and bolts\u2009\u2014\u2009structs, enums, functions, etc.This is not specific to Rust\u2009\u2014\u2009any ML-family language has them.However, Rust is the first industrial language which wraps these features in a nice package, not constrained by backwards compatibility.I want to list specific features which I think allow producing maintainable code faster in Rust\n Emphasis on data over behavior.Aka, Rust is not an OOP language.The core idea of OOP is that of dynamic dispatch\u2009\u2014\u2009which code is invoked by a function call is decided at runtime (late binding).This is a powerful pattern which allows for flexible and extensible system.The problem is, extensibility is costly!It\u2019s better only to apply it in certain designated areas.Designing for extensibility by default is not cost effective.Rust puts static dispatch front and center: it is mostly clear whats going on by just reading the code, as it is independent of runtime types of the objects.\n One small syntactic thing I enjoy about Rust is how it puts fields and methods into different blocks syntactically:\n struct  Person  {  first_name :  String ,  last_name :  String , } impl  Person  {  fn  full_name ( &amp; self )  -&gt;  String  {  ...  } }\n Being able to see at a glance all the fields makes understanding the code much simpler.Fields convey much more information than methods.\n Sum types.Rust\u2019s humbly named enums are full algebraic data types.This means that you can express the idea of disjoint union:\n  This is hugely useful in day-to-day programming in the small, and some times during programming in the large as well.To give one example, one of the core concepts for an IDE are references and definitions.A definition a like  let foo = 92; assigns a name to an entity which can be used down a line.A reference like  foo + 90  refers to some definition.When you ctrl-click on reference, you go to the definition.\n Natural way to model that in Kotlin is by adding  interface Definition and  interface Reference.The problem is, some things are both!\n struct  S  {  field :  i32  } fn  process ( s :  S )  {  match  s  {  S  {  field  }  =&gt;  println! ( &#34;{}&#34; ,  field  +  2 )  } }\n In this example, the second  field is both a reference to the  field: i32 definition, as well as a definition of a local variable with the name  field!Similarly, in\n  field conceptually holds two references\u2009\u2014\u2009one reference to a local variable, and one reference to a field definition.\n In IntelliJ Rust, this is generally handled by downcasting special cases.In rust-analyzer, this is handled by an enumwhich lists all of the special cases.\n rust-analyzer is very enum-heavy, and there\u2019s a lot of code which boringly matches over N variants and does almost the same thing.This code is more verbose then IntelliJ Rust alternative of special-casing specific odd cases, but is much easier to understand and support.You don\u2019t need to keep broader context in your head to understand what special cases  might be possible.\n Error Handling.When it comes to null safety, Kotlin and Rust are mostly equivalent in practice.There are some finer distinctions here between union types vs sum types, but they are irrelevant in real code in my experience.Syntactically, Kotlin\u2019s take on  ? and  ?: feels a little more convenient more often.\n However, when it comes to error handling ( Result&lt;T, E&gt; rather than  Option&lt;T&gt;), Rust wins hands down.Having  ? annotating error paths on the call site is very valuable.Encoding errors in function\u2019s return type, in a way which works with high-order functions, makes for robust code.I dread calling external processes in Kotlin and Python, because it is exactly the place where exceptions are common, and where I forget to handle at least one case every single time.\n Although Rust\u2019s types and expressions usually allow one to state precisely what one wants, there are still cases when the borrow checker gets in a way.For example, here we can\u2019t return an iterator which wants to borrow from a temporary: utils.rs.\n When learning Rust problems of this kind are very frequent.This is primarily because applying the traditional \u201csoup of pointers\u201d design to Rust doesn\u2019t work.With experience, design-related borrow checker errors tend to fade away\u2009\u2014\u2009building software as a tree of components works, and it is almost always a good design.The residual borrow checker limitations are annoying, but don\u2019t matter in the grand scheme of things.\n IntelliJ Rust and rust-analyzer use similar approach to concurrency.There\u2019s a global reader-write lock guarding the base application state and a large number of thread safe caches for derived data.\n Managing this in Kotlin is hard.More that once I asked myself \u201cshould I mark this as volatile?\u201d without a clear way to get the answer.The way to figure out if something is supposed to be thread safe in Kotlin is to read the docs and hunt for all usages.\n In contrast, \u201cis this type thread-safe?\u201d is a property which is reflected in Rust\u2019s type system (via  Send and  Sync traits).Compiler automatically derives thread-safeness, and checks that non thread-safe types are not accidentally shared.\n A bug which happened in both IntelliJ Rust and rust-analyzer is a good case study here.Recall that both make use of caches shared between the threads.In both projects, I once devised a smart optimization which unfortunately involved placing (unintentionally) thread unsafe data into this shared cache.In IntelliJ Rust, it took us a long while to notice that something is wrong in the first place, and even more investigation to pin down the root cause.In rust-analyzer, I only wasted the time for implementing the optimization itself.After I fixed what I though would be the last compilation error, compiler somberly noted that putting  A which contains  B which contains  C which contains non thread-safe  D into a structure which is shared across threads might not be the best idea!\n My general experience with developing IntelliJ Rust is \u201cno mater what I do, it is not as fast as I\u2019d like it to be\u201d.My experience with rust-analyzer is exactly the opposite \u201cno matter what I do, it is fast enough\u201d.\n As an anecdote, in the early days I was implementing fixed-point iteration name resolution algorithm in rust-analyzer.This is an IDE hostile bit.It requires to redo quite a bit of work on every keystroke, if done naively.When I build rust-analyzer with this change, I finally saw completion to noticeably lag.\u201cThis is it\u201d, thought I, \u201cI should stop just using naive algorithms and start applying some optimizations\u201d.Well, turns out I took a debug version of rust-analyzer for a test drive!Rebuilding with  --release fixed the issue.\n Aside: the fact that debug builds often are unusably slow is a big issue for Rust.\n Having baseline good performance definitely helps with productivity\u2009\u2014\u2009optimizing code for performance usually makes it harder to refactor.The longer you can punt on the low-level performance optimizations (as opposed to the architecture-level performance work), the less total work you\u2019ll do.\n What is more important is that Rust\u2019s performance is predictable.Generally, running a program N times gives more-or-less the same result.This is in sharp contrast to JVM, where you need to do a lot of warm-up to stabilize even microbenchmarks.I\u2019ve never succeeded with reproducible macro benchmarks in IntelliJ Rust.\n More generally, without runtime there\u2019s much less variation in the behavior of the program.This makes chasing regressions much more effective.\n Just to be clear, one thing which was  not different is memory safety: there were no segfaults or heap corruptions in either project.Similarly, null pointer dereferences weren\u2019t an issue.\n These are the most significant benefits of Rust over other systems languages, but for the applications at hand they were irrelevant.\n I think the unifying topic of many discussed points is \u201cprogramming in the large\u201d.Modularity, build process, predictability only start to matter once the code grows in volume, age, and the amount of contributors.I like  Titus Winters formulation that \u201csoftware engineering is programming integrated over time\u201d.Rust excels at this kind of work, it is a scalable language.\n Another thing I\u2019ve come to appreciate more is that Rust might be a plausible candidate for a nearly universal language.To throw in another great quote (by  John Carmack), \u201cthe right tool for the job is often the tool you are already using\u201d.Context switching and bridging different technologies takes a lot of effort.With Rust, you often don\u2019t need to!It naturally scales down to the bare metal.As this post explores, it works fine for application-level programming as well.Rust even works for scripting to some extent!rust-analyzer\u2019s build infra is in theory better suited for bash and Python, but, in practice,  Rust works just fine, and is delightfully cross platform.\n Finally, I want to re-iterate that the present case study concerns only two projects which are similar, but not twins.The context is also important: not relying on third-party libraries for core functionality is a bit unusual for application programming.So, while I think that this experience and analysis point in the qualitatively right direction, you quantitative results may vary greatly!", "posttime": "2020-10-30 01:06:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u94c1\u9508,applications", "title": "\u5bf9\u4e8e\u590d\u6742\u7684\u5e94\u7528\uff0c\u94c1\u9508\u4e0eKotlin\u4e00\u6837\u9ad8\u6548", "title_en": "For Complex Applications, Rust Is as Productive as Kotlin", "transed": 1, "url": "https://ferrous-systems.com/blog/rust-as-productive-as-kotlin/", "via": "", "real_tags": ["rust", "\u94c1\u9508"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1032064, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u9a6c\u900a(Amazon)\u5728\u5317\u6b27\u63a8\u51fa\u4e86\u7b2c\u4e00\u4e2a\u745e\u5178\u96f6\u552e\u7f51\u7ad9\uff0c\u8fd9\u5728\u8fd9\u5bb6\u7535\u5546\u516c\u53f8\u5f15\u8d77\u4e86\u5c34\u5c2c\u3002\u6b64\u524d\uff0c\u4e00\u7cfb\u5217\u9519\u8bef\u5bfc\u81f4\u4ea7\u54c1\u76ee\u5f55\u4e0a\u6563\u5e03\u7740\u4ee4\u4eba\u56f0\u60d1\u7684\u3001\u6beb\u65e0\u610f\u4e49\u7684\u3001\u5076\u5c14\u8fd8\u7c97\u4fd7\u7684\u4ea7\u54c1\u6e05\u5355\u3002\n\u9996\u5148\uff0c\u4e9a\u9a6c\u900a\u9009\u62e9\u4e86\u9519\u8bef\u7684\u56fd\u65d7\uff1a\u963f\u6839\u5ef7\u56fd\u65d7\u51fa\u73b0\u5728\u672c\u5e94\u653e\u7f6e\u745e\u5178\u56fd\u65d7\u7684\u4e61\u6751\u91c7\u6458\u5668\u4e0a\u3002\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u9519\u8bef\u662f\u5982\u4f55\u53d1\u751f\u7684\uff1a\u9664\u4e86\u5927\u91cf\u4f7f\u7528\u84dd\u8272\u4e4b\u5916\uff0c\u8fd9\u4e24\u9762\u65d7\u5e1c\u5e76\u4e0d\u76f8\u4f3c\u3002\n\u5176\u4ed6\u95ee\u9898\u66f4\u5bb9\u6613\u7406\u89e3\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u4ece\u8be5\u96f6\u552e\u5546\u5176\u4ed6\u6b27\u6d32\u5206\u652f\u673a\u6784\u7684\u5217\u8868\u4e2d\u81ea\u52a8\u7ffb\u8bd1\u51fa\u4e00\u4e9b\u707e\u96be\u6027\u7684\u4fe1\u606f\u3002\u4efb\u5929\u5802\u5f00\u5173\u6e38\u620f\u88ab\u5217\u4e3a\u9002\u5408\u4efb\u5929\u5802\u65ad\u8def\u5668\u7684\u6e38\u620f\uff0c\u4e00\u7cfb\u5217\u4e8c\u6218\u65f6\u671f\u7684\u4fc4\u7f57\u65af\u6b65\u5175\u96d5\u50cf\u88ab\u7ffb\u8bd1\u4e3a\u201c\u4fc4\u7f57\u65af\u8e52\u8dda\u5b66\u6b65\u7684\u5b69\u5b50\u201d\u3002\n\u4ee5\u732b\u4e3a\u7279\u8272\u7684\u4ea7\u54c1\u53d7\u5230\u7684\u6253\u51fb\u5c24\u5176\u4e25\u91cd\uff0c\u201cpussy\u201d\u4e00\u8bcd\u7684\u4e0b\u6d41\u53cc\u91cd\u542b\u4e49\u5bfc\u81f4\u5370\u6709\u732b\u7684T\u6064\u88ab\u8d34\u4e0a\u7c97\u4fd7\u7684\u745e\u5178\u8bed\u672f\u8bed\u201c\u9634\u9053\u201d\u7684\u6807\u7b7e\u3002\n\u4e9a\u9a6c\u900a\u8868\u793a\uff1a\u201c\u6211\u4eec\u8981\u611f\u8c22\u5927\u5bb6\u5f3a\u8c03\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u5e76\u5e2e\u52a9\u6211\u4eec\u505a\u51fa\u4e86\u6539\u53d8\uff0c\u6539\u8fdb\u4e86amazon.se\u3002\u867d\u7136\u6211\u4eec\u975e\u5e38\u9ad8\u5174\u4eca\u5929\u63a8\u51fa\u4e86Amazon.se\uff0c\u4ea7\u54c1\u8d85\u8fc71.5\u4ebf\u4ef6\uff0c\u4f46\u8fd9\u53ea\u662f\u6211\u4eec\u5728\u745e\u5178\u7684\u7b2c\u4e00\u5929\uff0c\u6211\u4eec\u81f4\u529b\u4e8e\u4e0d\u65ad\u6539\u5584\u5ba2\u6237\u4f53\u9a8c\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u4efb\u4f55\u4eba\u53d1\u73b0\u4ea7\u54c1\u9875\u9762\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u52a1\u5fc5\u4f7f\u7528\u9875\u9762\u4e0a\u7684\u94fe\u63a5\u63d0\u4f9b\u53cd\u9988\uff0c\u6211\u4eec\u5c06\u8fdb\u884c\u5fc5\u8981\u7684\u66f4\u6539\u3002\n\u8fd9\u4e9b\u9519\u8bef\u62db\u81f4\u4e86\u989d\u5916\u7684\u5632\u7b11\uff0c\u56e0\u4e3a\u745e\u5178\u7684\u82f1\u8bed\u8bc6\u5b57\u7387\u5f88\u9ad8\u3002\u65af\u5fb7\u54e5\u5c14\u6469\u7684\u6e38\u620f\u5f00\u53d1\u8005\u6770\u514b\u00b7\u6c99\u5fb7\u5c14\u5728\u63a8\u7279\u4e0a\u5199\u9053\uff1a\u201c\u4e9a\u9a6c\u900a\u7684\u6bcf\u4e2a\u4eba\u90fd\u5728\u9f13\u638c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5929\u624d\u7684\u51b3\u5b9a\uff0c\u7528\u4e00\u79cd\u5927\u591a\u6570\u745e\u5178\u4eba\u90fd\u80fd\u542c\u61c2\u7684\u8bed\u8a00\uff0c\u4e3a\u7f51\u7ad995%\u4ee5\u4e0a\u7684\u5185\u5bb9\u8fdb\u884c\u5783\u573e\u673a\u5668\u7ffb\u8bd1\u3002\u201d\n\u4e9a\u9a6c\u900a\u5728\u745e\u5178\u63a8\u51fa\u7684\u540c\u65f6\u5ba3\u5e03\uff0c\u8be5\u516c\u53f8\u5c06\u5728\u745e\u5178\u897f\u90e8\u7684B\u00e4ckhammar\u6295\u8d44\u4e00\u4e2a91\u5146\u74e6\u7684\u98ce\u7535\u573a\u3002\u8be5\u9879\u76ee\u5c06\u4e3a\u4e9a\u9a6c\u900a\u7684\u6570\u636e\u4e2d\u5fc3\u4f9b\u7535\uff0c\u5e76\u5c06\u591a\u4f59\u7684\u7535\u529b\u53cd\u9988\u7ed9\u56fd\u5bb6\u7535\u7f51\u3002", "note_en": "Amazon\u2019s launch of a Swedish retail site, its first in the Nordics, has caused embarrassment at the e-commerce company after a series of errors led to confusing, nonsensical and occasionally vulgar product listings scattered across the catalogue.\n To start with,  Amazon chose the wrong flag: the Argentine flag appeared where the Swedish flag should have been placed on the country picker. It is unclear how the error happened: aside from copious use of blue, the two flags are not similar.\n Other problems were more understandable, thanks to some disastrous automatic translation from listings on other European branches of the retailer. Nintendo Switch games were listed as suitable for the Nintendo Circuit Breaker, and a collection of second world war-era Russian infantry figurines was translated as \u201cRussian toddlers\u201d.\n Products featuring cats were hit particularly hard, with the lewd double meaning of the word \u201cpussy\u201d leading to a T-shirt with a cat on it being labelled with an vulgar Swedish term for \u201cvagina\u201d.\n  Amazon said: \u201cWe want to thank everyone for highlighting these issues and helping us make the changes and improve Amazon.se. While we are really excited to have launched Amazon.se today with more than 150m products, it is only day one for us here in  Sweden, and we are committed to constantly improving the customer experience.\n \u201cTherefore, if anyone spots any issues with product pages, please do use the link on the page to provide feedback and we will make the necessary changes.\u201d\n  The errors drew additional mockery because of the high rates of English literacy in Sweden. \u201cGolf clapping for everyone at Amazon involved in the genius decision of doing garbage machine translation for 95+% of the site from a language that most people in Sweden can understand,\u201d  tweeted Jake Shadle, a Stockholm-based games developer.\n Amazon paired its Swedish launch with the announcement that the company was investing in a 91MW windfarm in B\u00e4ckhammar, western Sweden. The project will power Amazon\u2019s datacentres and feed excess electricity back into the national grid.", "posttime": "2020-10-30 01:05:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,\u4e9a\u9a6c\u900a,\u9047\u5230,hits,\u4ea7\u54c1", "title": "\u4e9a\u9a6c\u900a\u5728\u745e\u5178\u63a8\u51fa\u4f4e\u4fd7\u7ffb\u8bd1\u9047\u5230\u9ebb\u70e6", "title_en": "Amazon hits trouble with Sweden launch over lewd translation", "transed": 1, "url": "https://www.theguardian.com/technology/2020/oct/29/amazon-hits-trouble-with-sweden-launch-over-lewd-pussy-translation", "via": "", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u9047\u5230", "hits", "\u4ea7\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "a54bb00a5880e5f99f4a7ddce8a9bf7c.jpg", "infoid": 1032061, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b98\u5458\u4eec\u5468\u56db\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u9ed1\u5ba2\u4ece\u5a01\u65af\u5eb7\u661f\u5dde\u5171\u548c\u515a\u7a83\u53d6\u4e86230\u4e07\u7f8e\u5143\uff0c\u8fd9\u7b14\u94b1\u539f\u672c\u6253\u7b97\u7528\u4e8e\u603b\u7edf\u7684\u8fde\u4efb\u7ade\u9009\u6d3b\u52a8\u3002\u7f14\u7ea6\u56fd\u8868\u793a\uff0c\u4e00\u5468\u524d\u5c31\u6ce8\u610f\u5230\u4e86\u53ef\u7591\u6d3b\u52a8\uff0c\u5e76\u4e8e\u4e0a\u5468\u4e94\u8054\u7cfb\u4e86\u8054\u90a6\u8c03\u67e5\u5c40\u3002\n\u5a01\u65af\u5eb7\u661f\u5dde\u5171\u548c\u515a\u4e3b\u5e2d\u5b89\u5fb7\u9c81\u00b7\u5e0c\u7279(Andrew Hitt)\u8868\u793a\uff0c\u8fd9\u8d77\u76d7\u7a83\u4e8b\u4ef6\u4f7f\u7279\u6717\u666e\u5728\u8be5\u5dde\u5904\u4e8e\u4e0d\u5229\u5730\u4f4d\u3002\u4ed6\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u8be5\u515a\u8ba1\u5212\u5728\u6bd4\u8d5b\u7684\u6700\u540e\u51e0\u5929\u5c06\u8fd9\u7b14\u94b1\u7528\u4e8e\u6700\u540e\u4e00\u523b\u7684\u9700\u8981\u3002\n\u8fd9\u8d77\u76d7\u7a83\u662f\u901a\u8fc7\u7be1\u6539\u56db\u4e2a\u4f9b\u5e94\u5546\u63d0\u4ea4\u7ed9\u5f53\u4e8b\u4eba\u7684\u53d1\u7968\u5b8c\u6210\u7684\u3002\u4fee\u6539\u540e\u7684\u53d1\u7968\u6307\u793a\u5dde\u653f\u5e9c\u5411\u9ed1\u5ba2\u63a7\u5236\u7684\u8d26\u6237\u6c47\u6b3e\u3002\u5e0c\u7279\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u8fd9\u6b21\u9ed1\u5ba2\u653b\u51fb\u663e\u7136\u662f\u4e00\u6b21\u9493\u9c7c\u4f01\u56fe\u3002\n\u5a01\u65af\u5eb7\u661f\u5dde\u88ab\u8ba4\u4e3a\u662f\u4e0b\u5468\u603b\u7edf\u9009\u4e3e\u4e2d\u6700\u91cd\u8981\u7684\u5dde\u4e4b\u4e00\u30022016\u5e74\uff0c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e(Donald Trump)\u5728\u4e2d\u897f\u90e8\u4e09\u4e2a\u4f20\u7edf\u4e0a\u5c5e\u4e8e\u6c11\u4e3b\u515a\u7684\u5dde-\u5a01\u65af\u5eb7\u661f\u5dde\u3001\u5bc6\u6b47\u6839\u5dde\u548c\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde-\u8d62\u5f97\u4e86\u603b\u7edf\u5927\u9009\u3002\n\u6700\u65b0\u7684\u6c11\u8c03\u5e73\u5747\u503c\u663e\u793a\uff0c\u4e54\u00b7\u62dc\u767b\u5728\u8be5\u5dde\u9886\u51486\u4e2a\u767e\u5206\u70b9\u3002\u5bf9\u4e8e\u6c11\u4e3b\u515a\u63d0\u540d\u4eba\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u8212\u9002\u7684\u4f18\u52bf\uff0c\u4f46\u5c31\u5728\u7279\u6717\u666e\u4ee5\u5fae\u5f31\u4f18\u52bf\u8d62\u5f97\u8be5\u5dde\u4e4b\u524d\uff0c\u5e0c\u62c9\u91cc\u00b7\u514b\u6797\u987f(Hillary Clinton)\u57282016\u5e74\u7684\u6c11\u8c03\u4e2d\u540c\u6837\u9886\u5148\u4e866\u4e2a\u767e\u5206\u70b9\u3002", "note_en": "Hackers have stolen $2.3 million from the Wisconsin Republican Party that was intended for use in the president&#39;s re-election campaign, officials  told the Associated Press on Thursday. The state party says it noticed suspicious activity a week ago and contacted the FBI last Friday.\n Andrew Hitt, the chairman of the Wisconsin Republican Party, says the theft puts Trump at a disadvantage in the state. He told the AP the party planned to use the money for last-minute needs in the final days of the race.\n The theft was accomplished by tampering with invoices submitted to the party from four vendors. The modified invoices directed the state GOP to send money to accounts controlled by the hackers. The hack apparently began as a phishing attempt, Hitt told the AP.\n  Wisconsin is considered one of the most important states in next week&#39;s presidential election. Donald Trump won the presidency in 2016 by flipping three traditionally Democratic states in the Midwest\u2014Wisconsin, Michigan, and Pennsylvania.\n The latest polling average gives Joe Biden a  six-point lead in the state. That might seem like a comfortable margin for the Democratic nominee, but Hillary Clinton enjoyed an  identical six-point polling lead in 2016 just before Trump narrowly won the state.", "posttime": "2020-10-30 00:50:17", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,\u7279\u6717\u666e,trump,\u5a01\u65af\u5eb7\u661f\u5dde", "title": "\u9ed1\u5ba2\u4ece\u7279\u6717\u666e\u7684\u5a01\u65af\u5eb7\u661f\u5dde\u8fde\u4efb\u57fa\u91d1\u7a83\u53d6230\u4e07\u7f8e\u5143", "title_en": "Hackers steal $2.3 million from Trump\u2019s Wisconsin re-election fund", "transed": 1, "url": "https://arstechnica.com/tech-policy/2020/10/hackers-steal-2-3-million-from-trumps-wisconsin-re-election-fund/", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u7279\u6717\u666e", "trump", "\u5a01\u65af\u5eb7\u661f\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "d919a75863b4f8429c9467eb8a2a7ade.png", "infoid": 1032060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u8f6e\u878d\u8d44\u4e4b\u524d\uff0cTraderlust\u5df2\u7ecf\u7b79\u96c6\u4e861310\u4e07\u7f8e\u5143\uff0c\u4f7f\u5176\u65b0\u7684B\u8f6e\u878d\u8d44\u89c4\u6a21\u8d85\u8fc7\u4e86\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u4e4b\u524d\u7b79\u96c6\u7684\u6240\u6709\u8d44\u91d1\u3002\n\u636eWanderlust\u9996\u5e2d\u6267\u884c\u5b98\u8fc8\u514b\u00b7\u6885\u91cc\u6d1b\u8868\u793a\uff0c\u516c\u53f8\u65e9\u671f\u56e2\u961f\u4e2d\u6709\u5f88\u5927\u4e00\u90e8\u5206\u66fe\u662fHubSpot\u7684\u8d44\u6df1\u5c45\u6c11\uff0c\u8fd9\u4f7f\u5f97\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u80fd\u591f\u5728B\u8f6e\u878d\u8d44\u4e4b\u524d\u901a\u8fc7\u89c4\u6a21\u8f83\u5c0f\u76842\u8f6e\u548c300\u4e07\u7f8e\u5143\u878d\u8d44\u3002\u8fd9\u4f4d\u9996\u5e2d\u6267\u884c\u5b98\u8865\u5145\u8bf4\uff0c\u4ed6\u7684\u516c\u53f8\u4e00\u76f4\u5728\u5bfb\u6c42\u4ec5\u7b79\u96c6700\u4e07\u7f8e\u5143\uff0c\u5e76\u5df2\u8d70\u4e0a\u76c8\u5229\u4e4b\u8def\u3002\nWanderlust Group\u4eca\u5929\u6709\u4e24\u4e2a\u4e3b\u8981\u90e8\u5206\uff1aDockwa\uff0c\u8fd9\u662f\u4e00\u6b3e\u4e3a\u7801\u5934\u63d0\u4f9b\u7684\u8f6f\u4ef6\u5957\u4ef6\uff0c\u53ef\u4ee5\u8ba9\u4ed6\u4eec\u7ba1\u7406\u4ece\u83b7\u5f97\u5ba2\u6237\u5230\u8fd0\u8425\u7684\u6240\u6709\u4e1a\u52a1\u3002Wanderlust\u65e9\u57282017\u5e74\u5c31\u6536\u8d2d\u4e86Marinas.com\uff0c\u8fd9\u662f\u4e00\u5bb6\u4e3a\u7801\u5934\u63d0\u4f9b\u5206\u7c7b\u5e7f\u544a\u670d\u52a1\u7684\u7f51\u7ad9\uff0c\u8be5\u516c\u53f8\u58f0\u79f0\u81ea\u5df1\u662f\u201c\u4e16\u754c\u4e0a\u6392\u540d\u7b2c\u4e00\u7684\u53ef\u641c\u7d22\u7801\u5934\u76ee\u5f55\u201d\u3002\nDockwa\u7684\u7801\u5934\u8f6f\u4ef6\u6210\u672c\u4ece\u6bcf\u5e741000\u7f8e\u5143\u591a\u4e00\u70b9\u5230\u66f4\u5927\u3001\u66f4\u590d\u6742\u64cd\u4f5c\u76843\u4e07\u7f8e\u5143\u4e0d\u7b49\u3002\n\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u6709\u6269\u5f20\u8ba1\u5212\uff0c\u5176\u589e\u5f3a\u7684\u8d44\u672c\u57fa\u7840\u53ef\u80fd\u4f1a\u6d3e\u4e0a\u7528\u573a\u3002\u8be5\u516c\u53f8\u5e0c\u671b\u4ece\u7801\u5934\u548c\u6e38\u8247\u9886\u57df\u6269\u5f20\u5230\u623f\u8f66\u5e02\u573a\uff0cDockwa\u7684\u5ba2\u6237\u6b63\u5728\u5e2e\u52a9\u5c06\u516c\u53f8\u62c9\u5165\u8fd9\u4e2a\u5e02\u573a\u3002\n\u6885\u5229\u6d1b\u8bf4\uff0c\u8be5\u516c\u53f8\u6ce8\u610f\u5230\u4e00\u4e9b\u5ba2\u6237\u672c\u8d28\u4e0a\u662f\u5bf9\u6e38\u8247\u8f6f\u4ef6\u8fdb\u884c\u4e86\u9ed1\u5ba2\u653b\u51fb\uff0c\u4ee5\u5305\u62ec\u623f\u8f66\u79df\u8d41\uff0c\u8fd9\u662f\u4e00\u4e9b\u7801\u5934\u7684\u7279\u70b9\u3002\u81f3\u4e8e\u5ba2\u6237\u5173\u4e8e\u4ea7\u54c1\u65b9\u5411\u7684\u4fe1\u53f7\uff0c\u8fd9\u662f\u4e00\u4e2a\u660e\u786e\u7684\u4fe1\u53f7\u3002(\u5b83\u7684About\u9875\u9762\u6697\u793a\uff0c\u672a\u6765\u7684\u623f\u8f66\u4ea7\u54c1\u53ef\u80fd\u4f1a\u88ab\u79f0\u4e3a\u201c\u9732\u8425\u201d(Campout)\u3002)\u3002\nWanderlust Group\u662f\u4e00\u4e2a\u5782\u76f4\u7684SaaS\u4e1a\u52a1\uff0c\u5b83\u653b\u51fb\u7684\u662f\u4e00\u4e2a\u8fc7\u4e8e\u9891\u7e41\u5730\u4f9d\u8d56\u8001\u5f0f\u6280\u672f\u6216\u7b80\u5355\u5730\u7f3a\u4e4f\u6280\u672f\u7684\u5e02\u573a\u3002\u8f6f\u4ef6\u53ef\u80fd\u4f1a\u8ba9\u7801\u5934\u66f4\u5bb9\u6613\u9884\u8ba2\u66f4\u591a\u7684\u8239\u53ea\uff0c\u4e5f\u66f4\u5bb9\u6613\u8ba9\u8239\u6c11\u9501\u5b9a\u6cca\u4f4d\uff0c\u4ece\u800c\u5141\u8bb8\u8239\u4e3b\u8fdb\u884c\u66f4\u591a\u7684\u65c5\u884c\u3002\n\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u8fd9\u5c06\u7b26\u5408\u6f2b\u6e38\u6b32\u671b\u7684\u76ee\u6807\uff0c\u6885\u5229\u6d1b\u8bf4\u8fd9\u662f\u4e3a\u4e86\u8ba9\u4eba\u4eec\u66f4\u591a\u5730\u53bb\u6237\u5916\u6d3b\u52a8\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u662f\u5927\u6d41\u884c\u6b63\u5728\u5e2e\u52a9\u7684\u4e8b\u60c5\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u544a\u8bc9TechCrunch\uff0c\u65b0\u51a0\u80ba\u708e\u5e2e\u52a9\u50cf\u5343\u79a7\u4e00\u4ee3\u8fd9\u6837\u7684\u5e74\u8f7b\u4eba\u8d70\u51fa\u5bb6\u95e8\uff0c\u767b\u4e0a\u4e86\u8239\u3002\u4ed6\u8fd8\u6307\u51fa\uff0c\u6700\u8fd1\u4eba\u4eec\u8d2d\u4e70\u8239\u53ea\u7684\u5e73\u5747\u5e74\u9f84\u6709\u6240\u4e0b\u964d\uff0c\u8fd9\u4e0e\u4e4b\u524d\u7684\u8d8b\u52bf\u76f8\u53cd\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u968f\u7740\u8ba1\u5212\u4ece\u6d77\u4e0a\u5411\u9646\u5730\u53d1\u5c55\uff0c\u5e76\u7740\u773c\u4e8e\u56fd\u9645\u5e02\u573a-\u6885\u5229\u6d1b\u544a\u8bc9TechCrunch\uff0c\u6fb3\u5927\u5229\u4e9a\u548c\u65b0\u897f\u5170\u662f\u4e3b\u8981\u7684\u623f\u8f66\u56fd\u5bb6-Wanderlust Group\u4f3c\u4e4e\u5df2\u7ecf\u505a\u597d\u4e86\u8ba9\u66f4\u591a\u4eba\u79bb\u5f00\u529e\u516c\u6905\u8d70\u51fa\u5927\u95e8\u7684\u51c6\u5907\u3002\n\u6700\u540e\uff0c\u8fd9\u5bb6\u5b8c\u5168\u8fdc\u7a0b\u542f\u52a8\u7684\u521d\u521b\u516c\u53f8\u6709\u4e00\u79cd\u6709\u8da3\u7684\u6587\u5316\u8bbe\u7f6e\uff0c\u5728\u8fd9\u79cd\u6587\u5316\u8bbe\u7f6e\u4e2d\uff0c\u5b83\u6ca1\u6709\u6b63\u5f0f\u7684\u5468\u4e00\u5de5\u4f5c\u65e5\u3002\u5468\u4e00\u7981\u6b62\u5f00\u4f1a\uff0c\u5458\u5de5\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u610f\u613f\u5de5\u4f5c\u6216\u4e0d\u5de5\u4f5c\u3002\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u8bb8\u591a\u5458\u5de5\u751f\u6d3b\u5728\u6cbf\u6d77\u57ce\u9547-\u6211\u4eec\u4f30\u8ba1\u90a3\u91cc\u6709\u7801\u5934-\u5468\u4e00\u662f\u6e38\u5ba2\u4e0d\u5728\u7684\u65e5\u5b50\uff0c\u8fd9\u4f7f\u5f97\u8fd9\u662f\u4e00\u4e2a\u56db\u5904\u8d70\u52a8\u3001\u4eab\u53d7\u4e16\u754c\u7684\u597d\u65e5\u5b50\u3002\u56e0\u6b64\uff0cWanderlust\u6709\u4e00\u5929\u7684\u5047\u671f\uff0c\u6216\u8005\u81f3\u5c11\u6709\u8db3\u591f\u7684\u5047\u671f\uff0c\u8fd9\u6837\u5b83\u7684\u5458\u5de5\u5c31\u53ef\u4ee5\u8d76\u4e0a\u771f\u6b63\u7684\u5de5\u4f5c\uff0c\u4e0d\u53d7\u5e72\u6270\u3002\n\u6839\u636e\u6885\u5229\u6d1b\u7684\u8bf4\u6cd5\uff0c\u8fd9\u4e00\u5b89\u6392\u5e26\u6765\u4e86\u66f4\u597d\u7684\u5468\u4e8c\u4f1a\u8bae\uff0c\u6211\u731c\uff0c\u8fd8\u6709\u76f8\u5f53\u597d\u7684\u4eba\u5458\u7559\u4f4f\u3002", "note_en": "Wanderlust had raised $13.1 million prior to this round of funding, making its new Series B larger than all the capital the startup had raised previously.\n According to Wanderlust\u2019s CEO, Mike Melillo, a large percentage of the company\u2019s early team were formerly senior denizens at HubSpot, allowing the startup to raise money in smaller, $2 and $3 million rounds before its Series B. The CEO added that his company had been looking to raise just $7 million, and had been on a path to profitability.\n   The Wanderlust Group has two main halves today:  Dockwa, a software suite for marinas that allows them to manage their businesses, from customer acquisition through to operations. And Wanderlust bought  Marinas.com back in 2017, a classifieds service for marinas that it claims is the \u201cworld\u2019s #1 searchable marina directory.\u201d\n Dockwa\u2019s marina software costs from a little over $1,000 yearly up to $30,000 for larger, more complex operations.\n The startup has expansion plans, for which its boosted capital base may come in handy. The company wants to expand from the marina and boating worlds into the RV market, a space into which Dockwa customers are helping pull the company.\n Melillo said the company noticed some of its customers essentially hacking the boating software to include RV rentals, something that some marinas feature. As far as customer signals regarding product direction go, that was a clear one. (Its About page hints that the future RV product could be called \u201c Campouts.\u201d)\n The Wanderlust Group is a vertical SaaS play, attacking a market that runs too frequently on old-school technologies, or a simple lack of tech. Software may make it easier for marinas to book more boats, and easier for boaters to lock in berths, allowing their owners to set out on more trips.\n If so, that would match Wanderlust\u2019s goal, which Melillo described as getting folks outdoors more. That\u2019s something that the pandemic is assisting, notably, with the CEO telling TechCrunch that COVID-19 has helped get younger folks like millennials outside, and into boats. He also pointed to the average age of folks purchasing boats dropping recently, a reversal of prior trends.\n  Regardless, with plans to evolve from the sea to the land, and an eye on international markets \u2014 Melillo told TechCrunch that Australia and New Zealand are prime RV countries \u2014 The Wanderlust Group appears well set to get more folks out of their office chairs and out the door.\n Closing, the fully remote-enabled startup has an interesting cultural setup in which it doesn\u2019t have formal Monday work days. Meetings are banned on Mondays, and employees can work or not, as they wish. Why? Because a lot of the staff live in coastal towns \u2014 where there are marinas, we reckon \u2014 where Mondays are the day when tourists aren\u2019t around, making it a good day to get around and enjoy the world. So Wanderlust has the day off, or at least sufficiently off so that its staff can catch up on real work, sans interruption.\n According to Melillo, the setup has led to better Tuesday meetings, and, I would guess, pretty good personnel retention.", "posttime": "2020-10-30 00:45:30", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "group", "title": "\nWanderlust Group\u7b79\u96c61420\u4e07\u7f8e\u5143\u52a0\u500d\u5438\u5f15\u4eba\u4eec\u5230\u6237\u5916\u6d3b\u52a8", "title_en": "\n\t\t\t\tThe Wanderlust Group raises $14.2M to double-down on getting folks outdoors\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/10/29/the-wanderlust-group-raises-14-2m-to-double-down-on-getting-folks-outdoors/", "via": "", "real_tags": ["group"]}, {"category": "", "categoryclass": "", "imagename": "892231280ef4352b8bd7fb5f6041288d.jpg", "infoid": 1032059, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u65e9\u57287\u6708\u4efd\u5c31\u5bf9\u8fd9\u5bb6\u516c\u53f8\u8fdb\u884c\u4e86\u4ecb\u7ecd\uff0c\u4eca\u5929\u5b83\u5ba3\u5e03\u53c8\u7b79\u96c6\u4e86400\u4e07\u7f8e\u5143\uff0c\u8fd9\u4e00\u6b21\u662f\u4ece\u79d1\u65af\u62c9\u98ce\u9669\u6295\u8d44\u516c\u53f8(Khosla Ventures)\u7684\u57c3\u6587\u00b7\u6469\u5c14\u3001\u4ef2\u91cf\u8054\u884c(JLL Spark)\u7684\u5927\u536b\u00b7\u683c\u65af\u7279\u548cLennar\u8463\u4e8b\u4f1a\u6210\u5458\u65af\u79d1\u7279\u00b7\u65af\u6258\u5a01\u5c14\u7b49\u623f\u5730\u4ea7\u6218\u7565\u6295\u8d44\u8005\uff0c\u4ee5\u53caDropbox\u7684\u4e9a\u5f53\u00b7\u7eb3\u4ec0\u548cTikTok\u660e\u661f\u4e54\u5e0c\u00b7\u7406\u67e5\u5179(Josh Richards)\u7b49\u4e2a\u4eba\u624b\u4e2d\u7b79\u96c6\u7684\uff0c\u6211\u731c\u4ed6\u5df2\u7ecf\u5c06\u7092\u4f5c\u623f\u5c4b\u7684\u6574\u4e2a\u6982\u5ff5\u8f6c\u5316\u4e3a\u623f\u5730\u4ea7\u6295\u8d44\u8bba\u6587\u3002\u6216\u8005\u522b\u7684\u4ec0\u4e48\u3002\n\u8fd9\u8fd8\u4e0d\u5305\u62ec\u8be5\u516c\u53f8\u65e9\u4e9b\u65f6\u5019200\u4e07\u7f8e\u5143\u7684\u79cd\u5b50\u671f\u878d\u8d44\uff0c\u5982\u679c\u8fd9\u6b3e\u53f0\u5f0f\u8ba1\u7b97\u5668\u6b63\u5e38\u5de5\u4f5c\uff0c\u603b\u7b79\u8d44\u989d\u5c06\u8fbe\u5230600\u4e07\u7f8e\u5143\u3002\n\u81ea\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u4eceYC\u6bd5\u4e1a\u4ee5\u6765\uff0cAtmos\u53d6\u5f97\u4e86\u66f4\u5927\u7684\u8fdb\u6b65\u3002\u636e\u9996\u5e2d\u6267\u884c\u5b98\u5c3c\u514b\u00b7\u591a\u7eb3\u4f11(Nick Donahue)\u8868\u793a\uff0c\u7528\u6237\u5df2\u7ecf\u5f00\u59cb\u5728\u8be5\u5e73\u53f0\u4e0a\u8bbe\u8ba1\u201c\u9996\u6279\u5341\u51e0\u5957\u623f\u5c4b\u201d\uff0c\u901a\u8fc7Atmos\u8bbe\u8ba1\u7684\u7b2c\u4e00\u5957\u623f\u5c4b\u73b0\u5728\u5df2\u7ecf\u7834\u571f\u52a8\u5de5\u3002\n\u8be5\u516c\u53f8\u8fd8\u8fdb\u884c\u4e86\u4e00\u6b21\u6536\u8d2d\uff0c\u4ee5\u6269\u5927\u5176\u56e2\u961f\uff0c\u5e76\u6b63\u5728\u53d1\u5c55\u5176\u6280\u672f\uff0c\u4f7f\u7528\u6237\u80fd\u591f\u66f4\u5bb9\u6613\u5730\u5728\u7279\u5b9a\u5730\u5757\u7684\u80cc\u666f\u4e0b\u53ef\u89c6\u5316\u4ed6\u4eec\u7684\u4f4f\u623f\u8bbe\u8ba1\u3002\n\u5982\u679c\u4f60\u5bf9\u8fd9\u5bb6\u516c\u53f8\u7684\u521b\u59cb\u6545\u4e8b\u548c\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u66f4\u591a\u4e8b\u60c5\u611f\u5174\u8da3\uff0c\u4e00\u5b9a\u8981\u591a\u8bfb\u51e0\u5468\u524d\u6211\u4eec\u7684\u6545\u4e8b\u3002", "note_en": "The company,  which we profiled back in July, announced today that it raised another $4 million, this time from Evan Moore at Khosla Ventures, real estate strategic investors like David Gerster at JLL Spark and Lennar board member Scott Stowell as well as individuals like Adam Nash of Dropbox and TikTok star Josh Richards, who I guess has turned that whole concept of hype houses into a real estate investment thesis. Or something.\n That\u2019s on top of the company\u2019s earlier $2 million seed round, bringing the total fundraised to $6 million if this desk calculator is functioning.\n  Atmos has made even more progress since they graduated from YC earlier this year. According to CEO Nick Donahue, users have started designing the \u201cfirst dozen homes\u201d on the platform, and the first home designed through Atmos has now broken ground on construction.\n The company has also done an acquihire to expand its team, and it is growing its technology to allow users to more easily visualize their housing designs within the context of specific property lots.\n If you\u2019re curious about the company\u2019s founding story and more of what they are doing,  definitely read more from our story just a few weeks ago.", "posttime": "2020-10-30 00:45:10", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "housing", "title": "\n\u4e00\u952e\u5f0f\u4f4f\u623f\u521d\u521b\u516c\u53f8Atmos\u4eceKhosla\u3001\u623f\u5730\u4ea7\u6218\u7565\u516c\u53f8\u548cTikTok\u660e\u661f\u4e54\u5e0c\u00b7\u7406\u67e5\u5179\u90a3\u91cc\u53c8\u7b79\u96c6\u4e86400\u4e07\u7f8e\u5143", "title_en": "\n\t\t\t\tOne-click housing startup Atmos raises another $4M from Khosla, real estate strategics, and TikTok star Josh Richards\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/10/29/one-click-housing-startup-atmos-raises-another-4m-from-khosla-real-estate-strategics-and-tiktok-star-josh-richards/", "via": "", "real_tags": ["housing"]}, {"category": "", "categoryclass": "", "imagename": "332e95c121032b9e5119f82d39bdb377.jpeg", "infoid": 1032057, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5a01\u65af\u5eb7\u661f\u5dde\u9ea6\u8fea\u900a\u3002(\u7f8e\u8054\u793e)--\u5a01\u65af\u5eb7\u661f\u5dde\u5171\u548c\u515a\u4e3b\u5e2d\u5468\u56db\u544a\u8bc9\u7f8e\u8054\u793e\uff0c\u9ed1\u5ba2\u4ece\u5a01\u65af\u5eb7\u661f\u5dde\u5171\u548c\u515a\u7684\u8d26\u6237\u4e2d\u7a83\u53d6\u4e86230\u4e07\u7f8e\u5143\uff0c\u8be5\u8d26\u6237\u88ab\u7528\u6765\u5e2e\u52a9\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u603b\u7edf\u5728\u8fd9\u4e2a\u5173\u952e\u7684\u6218\u573a\u5dde\u8fde\u4efb\u3002\n\u5171\u548c\u515a\u4e3b\u5e2d\u5b89\u5fb7\u9c81\u00b7\u5e0c\u7279(Andrew Hitt)\u8bf4\uff0c\u8be5\u515a\u572810\u670822\u65e5\u6ce8\u610f\u5230\u4e86\u8fd9\u4e00\u53ef\u7591\u6d3b\u52a8\uff0c\u5e76\u4e8e\u5468\u4e94\u8054\u7cfb\u4e86\u8054\u90a6\u8c03\u67e5\u5c40(FBI)\u3002\n\u5e0c\u7279\u8bf4\uff0c\u8054\u90a6\u8c03\u67e5\u5c40\u6b63\u5728\u8fdb\u884c\u8c03\u67e5\u3002FBI\u53d1\u8a00\u4eba\u4f26\u7eb3\u5fb7\u00b7\u548c\u5e73(Leonard Peace)\u6ca1\u6709\u7acb\u5373\u56de\u590d\u5bfb\u6c42\u7f6e\u8bc4\u7684\u6d88\u606f\u3002\n\u8fd9\u6b21\u88ad\u51fb\u662f\u5728\u9009\u4e3e\u65e5\u4e0d\u5230\u4e24\u5468\u524d\u53d1\u73b0\u7684\uff0c\u5f53\u65f6\u7279\u6717\u666e\u548c\u6c11\u4e3b\u515a\u7ade\u4e89\u5bf9\u624b\u4e54\u00b7\u62dc\u767b(Joe Biden)\u90fd\u4e3a\u8d62\u5f97\u5a01\u65af\u5eb7\u661f\u5dde\u53ca\u517610\u5f20\u9009\u4e3e\u4eba\u7968\u505a\u4e86\u6700\u540e\u7684\u52aa\u529b\u3002\u7279\u6717\u666e\u57282016\u5e74\u4ee5\u4e0d\u52302.3\u4e07\u5f20\u9009\u7968\u7684\u4f18\u52bf\u8d62\u5f97\u4e86\u8be5\u5dde\uff0c\u5e76\u8ba1\u5212\u5728\u5468\u4e94\u8fdb\u884c\u4ed6\u4e03\u5929\u5185\u7684\u7b2c\u4e09\u6b21\u8bbf\u95ee\u3002\u62dc\u767b\u8fd8\u8ba1\u5212\u5468\u4e94\u5728\u5a01\u65af\u5eb7\u661f\u5dde\u8fdb\u884c\u7ade\u9009\u6d3b\u52a8\u3002\u6c11\u8c03\u4e00\u76f4\u663e\u793a\u8be5\u5dde\u7684\u7ade\u4e89\u52bf\u5747\u529b\u654c\uff0c\u62dc\u767b\u901a\u5e38\u4ee5\u4e2a\u4f4d\u6570\u7684\u4f18\u52bf\u9886\u5148\uff0c\u5e76\u5728\u8bef\u5dee\u8303\u56f4\u5185\u3002\n\u5e0c\u7279\u8bf4\uff0c\u4ed6\u4e0d\u77e5\u9053\u6709\u4efb\u4f55\u5176\u4ed6\u5dde\u7684\u5171\u548c\u515a\u53d7\u5230\u7c7b\u4f3c\u9ed1\u5ba2\u653b\u51fb\u7684\u653b\u51fb\uff0c\u4f46\u5728\u4eca\u5e74\u590f\u5929\u7684\u5171\u548c\u515a\u5168\u56fd\u4ee3\u8868\u5927\u4f1a\u4e0a\uff0c\u5404\u5dde\u653f\u515a\u88ab\u8b66\u544a\u8981\u8b66\u60d5\u7f51\u7edc\u653b\u51fb\u3002\n\u5171\u548c\u515a\u5168\u56fd\u59d4\u5458\u4f1a\u53d1\u8a00\u4eba\u8fc8\u514b\u5c14\u00b7\u963f\u4f26\u65af(Michael Ahrens)\u8868\u793a\uff1a\u201c\u6211\u4eec\u4e00\u76f4\u4e0e\u8be5\u5dde\u653f\u515a\u4fdd\u6301\u8054\u7cfb\uff0c\u5e76\u6b63\u5728\u534f\u52a9\u4ed6\u4eec\u5b8c\u6210\u8fd9\u4e00\u8fc7\u7a0b\u3002\u201d2016\u5e74\u540e\uff0c\u5171\u548c\u515a\u5168\u56fd\u59d4\u5458\u4f1a\u4ece\u672a\u79bb\u5f00\u8fc7\u5a01\u65af\u5eb7\u661f\u5dde\uff0c\u6211\u4eec\u76f8\u4fe1\uff0c\u6211\u4eec\u7684\u5730\u9762\u6bd4\u8d5b\u4ee5\u53ca\u6211\u4eec\u5728\u7535\u89c6\u548c\u6570\u5b57\u4e0a\u82b1\u8d39\u7684\u6570\u767e\u4e07\u7f8e\u5143\uff0c\u5c06\u57282020\u5e74\u4e3a\u6211\u4eec\u5e26\u6765\u53e6\u4e00\u573a\u80dc\u5229\u3002\n\u5a01\u65af\u5eb7\u661f\u5dde\u6c11\u4e3b\u515a\u53d1\u8a00\u4eba\u8003\u7279\u5c3c\u00b7\u62dc\u5c14(Courtney Beyer)\u8868\u793a\uff0c\u5728\u8fd9\u4e2a\u7ade\u9009\u5468\u671f\u4e2d\uff0c\u9488\u5bf9\u5a01\u65af\u5eb7\u661f\u5dde\u6c11\u4e3b\u515a\u7684\u7ecf\u6d4e\u5229\u76ca\u53d1\u52a8\u4e86800\u591a\u6b21\u672a\u9042\u7f51\u7edc\u9493\u9c7c\u653b\u51fb\uff0c\u4f46\u6ca1\u6709\u4e00\u6b21\u6210\u529f\u3002\n\u5e0c\u7279\u8bf4\uff0c\u9ed1\u5ba2\u7be1\u6539\u4e86\u56db\u4e2a\u4f9b\u5e94\u5546\u7684\u53d1\u7968\uff0c\u8fd9\u4e9b\u4f9b\u5e94\u5546\u4e3a\u7279\u6717\u666e\u7684\u8fde\u4efb\u52aa\u529b\u76f4\u63a5\u90ae\u5bc4\uff0c\u4ee5\u53ca\u5411\u652f\u6301\u8005\u5206\u53d1\u5e3d\u5b50\u7b49\u4eb2\u7279\u6717\u666e\u7684\u6750\u6599\u3002\u5e0c\u7279\u8bf4\uff0c\u53d1\u7968\u548c\u5176\u4ed6\u6587\u4ef6\u88ab\u7be1\u6539\uff0c\u5f53\u5f53\u4e8b\u4eba\u4e3a\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u5411\u4ed6\u4eec\u4ed8\u6b3e\u65f6\uff0c\u8fd9\u7b14\u94b1\u6d41\u5411\u4e86\u9ed1\u5ba2\uff0c\u800c\u4e0d\u662f\u4f9b\u5e94\u5546\u3002\n\u4ed6\u8bf4\uff0c\u9ed1\u5ba2\u662f\u5728\u6709\u4eba\u6ce8\u610f\u5230\u751f\u6210\u4e86\u4e0d\u5e94\u8be5\u751f\u6210\u7684\u53d1\u7968\u540e\u53d1\u73b0\u7684\u3002\n\u8be5\u515a\u53d1\u8a00\u4eba\u4e9a\u5386\u514b\u00b7\u9f50\u9ed8\u5c14\u66fc(Alec Zimmerman)\u8868\u793a\uff0c\u5e0c\u7279\u8868\u793a\uff0c\u653b\u51fb\u4f3c\u4e4e\u662f\u4e00\u6b21\u7f51\u7edc\u9493\u9c7c\u4f01\u56fe\uff0c\u4f3c\u4e4e\u6ca1\u6709\u6570\u636e\u88ab\u76d7\u3002\n\u9f50\u9ed8\u5c14\u66fc\u8bf4\uff0c\u8fd9\u7b14\u94b1\u662f\u4ece\u8be5\u5dde\u653f\u515a\u7684\u8054\u90a6\u8d26\u6237\u88ab\u76d7\u7684\uff0c\u8be5\u8d26\u6237\u76ee\u524d\u7ea6\u6709110\u4e07\u7f8e\u5143\uff0c\u4f46\u7531\u4e8e\u7ade\u9009\u540e\u671f\u8d44\u6e90\u7684\u5feb\u901f\u8f6c\u79fb\uff0c\u8fd9\u4e2a\u6570\u5b57\u6bcf\u5929\u90fd\u4f1a\u6ce2\u52a8\u3002\n\u672c\u5468\u5728\u5a01\u65af\u5eb7\u661f\u5dde\u63d0\u4ea4\u7684\u7ade\u9009\u8d22\u52a1\u62a5\u544a\u663e\u793a\uff0c\u6c11\u4e3b\u515a\u4eba\u7b79\u96c6\u7684\u8d44\u91d1\u8fdc\u8fdc\u8d85\u8fc7\u5171\u548c\u515a\u4eba\u3002\u5dde\u6c11\u4e3b\u515a\u5728\u8fc7\u53bb\u4e24\u5e74\u4e2d\u7b79\u96c6\u4e86\u8fd15900\u4e07\u7f8e\u5143\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5171\u548c\u515a\u53ea\u7b79\u96c6\u4e862370\u4e07\u7f8e\u5143\u3002\n\u5a01\u65af\u5eb7\u661f\u5dde\u7684\u63d0\u524d\u6295\u7968\u6b63\u5728\u5982\u706b\u5982\u837c\u5730\u8fdb\u884c\uff0c\u622a\u81f3\u5468\u56db\u4e0a\u5348\uff0c\u5df2\u6709\u8d85\u8fc7160\u4e07\u5f20\u9009\u7968\u9000\u56de\u3002\u8fd9\u51e0\u4e4e\u662f2016\u5e74\u603b\u6295\u7968\u6570\u768455%\u3002\n\u7f8e\u8054\u793e\u7684\u63d0\u524d\u6295\u7968\u6307\u5357\u4e3a\u60a8\u5e26\u6765\u4e86\u63d0\u524d\u6295\u7968\u7684\u4e8b\u5b9e\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u90ae\u4ef6\u8fd8\u662f\u4ece\u6bcf\u4e2a\u5dde\u7f3a\u5e2d\uff1ahttps://interactives.ap.org/advance-voting-2020/", "note_en": "MADISON, Wis. (AP) \u2014 Hackers have stolen $2.3 million from the Wisconsin Republican Party\u2019s account that was being used to help reelect President Donald Trump in the key battleground state, the party\u2019s chairman told The Associated Press on Thursday.\n The party noticed the suspicious activity on Oct. 22 and contacted the FBI on Friday, said Republican Party Chairman Andrew Hitt.\n Hitt said the FBI is investigating. FBI spokesman Leonard Peace did not immediately return a message seeking comment.\n The attack was discovered less than two weeks before Election Day, as both  Trump and Democratic rival Joe Biden made their final push to win Wisconsin and its 10 electoral votes. Trump won the state by fewer than 23,000 votes in 2016 and planned his third visit in seven days on Friday. Biden also planned to campaign in Wisconsin on Friday. Polls have consistently shown a tight race in the state, usually with Biden ahead by single digits and within the margin of error.\n  Hitt said he was not aware of any other state GOP being targeted for a similar hack, but state parties were warned at the Republican National Convention this summer to be on the lookout for cyber attacks.\n   \u201cWe have been in contact with the state party and are assisting them through this process,\u201d said Republican National Committee spokesman Michael Ahrens. \u201cThe RNC never left Wisconsin after 2016, and we are confident that our ground game and the millions we are spending on TV and digital will deliver us another win there in 2020.\u201d\n There have been more than 800 attempted phishing attacks for financial gain targeting the Wisconsin Democratic Party this campaign cycle, but none has been successful, said party spokeswoman Courtney Beyer.\n Hitt said the hackers manipulated invoices from four vendors who were being paid for direct mail for Trump\u2019s reelection efforts as well as for pro-Trump material such as hats to be handed out to supporters. Invoices and other documents were altered so when the party paid them for the services rendered, the money went to the hackers instead of the vendors, Hitt said.\n The hack was discovered after someone noticed that an invoice was generated that should not have been, he said.\n Hitt said it appears the attack began as a phishing attempt and no data appears to have been stolen, said party spokesman Alec Zimmerman.\n The money was stolen from the state party\u2019s federal account, which currently contains about $1.1 million, but that number fluctuates daily because of quick moving resources late in the campaign, Zimmerman said.\n Campaign finance reports filed this week in Wisconsin show Democrats have raised far more money than Republicans. The state Democratic Party raised nearly $59 million over the past two years compared with just $23.7 million for Republicans.\n Early voting is in full swing in Wisconsin, with more than 1.6 million ballots returned as of Thursday morning. That is nearly 55% of the total vote cast in 2016.\n  AP\u2019s Advance Voting guide brings you the facts about voting early, by mail or absentee from each state:  https://interactives.ap.org/advance-voting-2020/", "posttime": "2020-10-30 00:44:02", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u9ed1\u5ba2,\u8d26\u6237,party,\u5a01\u65af\u5eb7\u661f\u5dde", "title": "\u5a01\u65af\u5eb7\u661f\u5dde\u5171\u548c\u515a\u79f0\u9ed1\u5ba2\u4ece\u5176\u8054\u90a6\u8d26\u6237\u7a83\u53d6230\u4e07\u7f8e\u5143\uff1b\u8be5\u515a\u4e3b\u5e2d\u79f0FBI\u6b63\u5728\u8c03\u67e5", "title_en": "Wisconsin Republican Party says hackers stole $2.3M from its federal account; party chairman says the FBI is investigating", "transed": 1, "url": "https://apnews.com/article/wisconsin-republican-party-hackers-stole-641a8174e51077703888e2fa89070e12", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u8d26\u6237", "party", "\u5a01\u65af\u5eb7\u661f\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "3279b46982adfeb4e87cd98d41d83e12.jpg", "infoid": 1032055, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u4e24\u5e74\u7684\u4e13\u95e8\u8bbe\u8ba1\u548c\u7528\u6237\u53cd\u9988\uff0cTimscaleDB 2.0\u7ec8\u4e8e\u95ee\u4e16\u4e86\uff0c\u5b83\u4e3a\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\u6811\u7acb\u4e86\u4e00\u4e2a\u65b0\u7684\u6807\u6746-\u800c\u4e14\u5b83\u662f\u5b8c\u5168\u514d\u8d39\u7684\u3002\n\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u65e0\u5904\u4e0d\u5728\u3002\u65e0\u8bba\u60a8\u662f\u5728\u76d1\u63a7\u60a8\u7684\u8f6f\u4ef6\u5806\u6808\u3001\u7528\u6237\u3001\u751f\u4ea7\u7ebf\u3001\u5bb6\u5ead\u3001\u8f66\u8f86\u3001\u80a1\u7968\u548c\u52a0\u5bc6\u8d27\u5e01\u7ec4\u5408\u3001\u60a8\u5bb6\u4e2d\u7684\u7a7a\u6c14\u8d28\u91cf\uff0c\u8fd8\u662f\u53ea\u662f\u5728\u5927\u6d41\u884c\u671f\u95f4\u76d1\u6d4b\u60a8\u7684\u5065\u5eb7\u72b6\u51b5\uff0c\u60a8\u90fd\u5728\u6536\u96c6\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002\u968f\u7740\u8f6f\u4ef6\u7ee7\u7eed\u65e0\u60c5\u5730\u6e17\u900f\u5230\u6211\u4eec\u7684\u751f\u6d3b\u548c\u4e1a\u52a1\u4e2d\uff0c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6b63\u53d8\u5f97\u66f4\u52a0\u65e0\u5904\u4e0d\u5728\uff0c\u800c\u4e14\u5bf9\u4efb\u52a1\u81f3\u5173\u91cd\u8981\u3002\n\u4e0e\u6b64\u540c\u65f6\uff0c\u5173\u7cfb\u6570\u636e\u5e93\u8fd9\u4e00\u53e4\u8001\u7684\u575a\u5b9a\u4e0d\u79fb\u7684\u6570\u636e\u5e93\u6b63\u5728\u5377\u571f\u91cd\u6765\uff0c\u6210\u4e3a\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\u7684\u9996\u9009\u6570\u636e\u5e93\u3002\u5c3d\u7ba1\u591a\u5e74\u6765\u4e00\u76f4\u5728\u7092\u4f5cNoSQL\uff0c\u4f46\u76ee\u524d\u4f7f\u7528\u6700\u591a\u76844\u4e2a\u6570\u636e\u5e93\u90fd\u662f\u5173\u7cfb\u6570\u636e\u5e93\u3002\u6b64\u5916\uff0cPostgreSQL\u662f\u53bb\u5e74\u589e\u957f\u6700\u5feb\u7684\u6570\u636e\u5e93(\u662f\u7684\uff0c\u751a\u81f3\u6bd4MongoDB\u8fd8\u5feb)\u3002\n\u5f00\u53d1\u4eba\u5458\u9700\u8981\u7684\u662f\u4e00\u79cd\u65b0\u7684\u6570\u636e\u5e93\uff0c\u4e13\u4e3a\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u800c\u6784\u5efa\uff0c\u540c\u65f6\u5b8c\u5168\u91c7\u7528\u5173\u7cfb\u6a21\u578b\u3002\u6bd5\u7adf\uff0c\u4f60\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e76\u4e0d\u5b58\u5728\u4e8e\u771f\u7a7a\u4e2d\u3002\u80fd\u591f\u5c06\u5176\u4e0e\u6280\u672f\u5143\u6570\u636e\u3001\u4e1a\u52a1\u6570\u636e\u548c\u7ed3\u679c\u76f8\u5173\u8054\uff0c\u5bf9\u4e8e\u4e86\u89e3\u60a8\u7684\u8f6f\u4ef6\u3001\u7cfb\u7edf\u3001\u8fd0\u8425\u548c\u4e1a\u52a1\u5982\u4f55\u968f\u65f6\u95f4\u53d8\u5316\u81f3\u5173\u91cd\u8981\u3002\n\u6784\u5efa\u8be5\u6570\u636e\u5e93\u4e00\u76f4\u662f\u6211\u4eec\u7684\u4f7f\u547d\uff1a\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u4ee5\u5feb\u901f\u3001\u53ef\u9760\u548c\u7ecf\u6d4e\u9ad8\u6548\u7684\u65b9\u5f0f\u5b58\u50a8\u548c\u5206\u6790\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u6838\u5fc3\u5e94\u7528\u7a0b\u5e8f\u5e76\u53d6\u60a6\u4ed6\u4eec\u7684\u7528\u6237\u3002\n\u81ea3.5\u5e74\u524d\u63a8\u51fa\u4ee5\u6765\uff0cTimscaleDB\u5df2\u8bc1\u660e\u81ea\u5df1\u662f\u9886\u5148\u7684\u65f6\u5e8f\u6570\u636e\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u57fa\u4e8ePostgreSQL\u8fdb\u884c\u8bbe\u8ba1\uff0c\u5e76\u901a\u8fc7\u514d\u8d39\u8f6f\u4ef6\u6216\u4f5c\u4e3aAWS\u3001Azure\u548cGCP\u4e0a\u7684\u5b8c\u5168\u6258\u7ba1\u670d\u52a1\u63d0\u4f9b\u3002\n\u5728\u6b64\u671f\u95f4\uff0cTimscaleDB\u793e\u533a\u5df2\u6210\u4e3a\u6700\u5927\u7684\u65f6\u5e8f\u6570\u636e\u5f00\u53d1\u8005\u793e\u533a\uff1a\u6570\u5343\u4e07\u4e0b\u8f7d\u91cf\uff1b\u8d85\u8fc7500,000\u4e2a\u6d3b\u52a8\u6570\u636e\u5e93\uff1bAppDynamics\u3001\u535a\u4e16\u3001\u601d\u79d1\u3001\u5eb7\u5361\u65af\u7279\u3001\u745e\u58eb\u4fe1\u8d37\u3001DigitalOcean\u3001\u9676\u6c0f\u5316\u5b66\u3001\u827a\u7535\u3001\u5bcc\u58eb\u901a\u3001IBM\u3001\u5fae\u8f6f\u3001Rackspace\u3001\u65bd\u8010\u5fb7\u7535\u6c14\u3001\u4e09\u661f\u3001\u897f\u95e8\u5b50\u3001\u4f18\u6b65\u3001\u6c83\u5c14\u739b\u3001\u534e\u7eb3\u97f3\u4e50\u3001WebEx\u7b49\u6570\u4ee5\u5343\u8ba1\u7684\u7ec4\u7ec7\uff1b\u6240\u6709\u8fd9\u4e9b\u90fd\u662fPostgreSQL\u793e\u533a\u548c\u751f\u6001\u7cfb\u7edf\u4e4b\u5916\u7684\u3002\n\u5728\u6b642.0\u7248\u672c\u4e2d\uff0cTimscaleDB\u73b0\u5728\u662f\u7528\u4e8e\u65f6\u95f4\u5e8f\u5217\u7684\u5206\u5e03\u5f0f\u3001\u591a\u8282\u70b9\u3001PB\u7ea7\u5173\u7cfb\u6570\u636e\u5e93\u3002\u800c\u4e14\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u5b8c\u5168\u514d\u8d39\u7684\u3002\u8fd9\u662f\u4e24\u5e74\u6765\u4e13\u5fc3\u81f4\u5fd7\u7684\u5de5\u7a0b\u52aa\u529b\u7684\u7ed3\u679c\uff0c\u4e5f\u662f\u7528\u6237\u5bf9\u4e4b\u524d\u51e0\u4e2a\u6d4b\u8bd5\u7248\u7684\u91cd\u8981\u53cd\u9988\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u7528\u6237\u5728\u8fde\u7eed\u65e5\u5e38\u4f7f\u7528\u4e2d\u8fd0\u884c\u591a\u8282\u70b9TimscaleDB\u5df2\u7ecf\u6709\u597d\u51e0\u4e2a\u6708\u4e86\uff0c\u5305\u62ec\u4e00\u5bb6\u8d22\u5bcc100\u5f3a\u79d1\u6280\u516c\u53f8\u6bcf\u5929\u541e\u566c\u8d85\u8fc710\u4ebf\u884c\u768422\u8282\u70b9\u96c6\u7fa4\uff1a\n\u6211\u4eec\u4e0d\u65ad\u5730\u5c06\u9065\u6d4b\u4e8b\u4ef6\u63a5\u6536\u5230TimscaleDB 2.0\u4e2d\uff0c\u4ee5\u76d1\u63a7\u548c\u5206\u6790\u5927\u91cf\u4f1a\u8bdd\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u4e4e\u4e00\u5e74\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u572822\u53f0\u670d\u52a1\u5668\u4e0a\u8fd0\u884cTimscaleDB\u591a\u8282\u70b9\uff0c\u6bcf\u5929\u63a5\u6536\u8d85\u8fc710\u4ebf\u884c\u6570\u636e\u3002TimscaleDB\u7684\u6027\u80fd\u3001\u89c4\u6a21\u3001\u5173\u7cfb\u548cSQL\u529f\u80fd\uff0c\u4ee5\u53ca\u5904\u7406\u590d\u6742\u6570\u636e\u7684\u80fd\u529b\u4e00\u76f4\u662f\u771f\u6b63\u7684\u8d62\u5bb6\u3002&\u62c9\u80e1\u5c14\uff0c\u8d22\u5bcc100\u5f3a\u79d1\u6280\u516c\u53f8\u7684\u6280\u672f\u4e3b\u7ba1\u3002\nNetskope\u4ee5\u901f\u5ea6\u548c\u53ef\u6269\u5c55\u6027\u800c\u81ea\u8c6a\uff0c\u6211\u4eec\u4e25\u91cd\u4f9d\u8d56\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6765\u8ba1\u5212\u3001\u76d1\u63a7\u548c\u6392\u9664\u6211\u4eec\u7531\u6570\u5343\u53f0\u670d\u52a1\u5668\u7ec4\u6210\u7684\u5168\u7403\u7f51\u7edc\u7684\u6545\u969c\u3002\u6709\u4e86TimscaleDB\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u65e0\u5904\u4e0d\u5728\u7684PostgreSQL\u751f\u6001\u7cfb\u7edf\uff0c\u5e76\u4f7f\u7528TimscaleDB\u7684\u8fde\u7eed\u805a\u5408\u548c\u5176\u4ed6\u5185\u7f6e\u7684\u65f6\u95f4\u5e8f\u5217\u529f\u80fd\u8fdb\u884c\u5b9e\u65f6\u5206\u6790\u548c\u9ad8\u7ea7\u5386\u53f2\u5206\u6790\u3002\u73b0\u5728\u6709\u4e86\u591a\u8282\u70b9TimscaleDB\uff0c\u6211\u4eec\u83b7\u5f97\u4e86\u6211\u4eec\u73b0\u5728\u548c\u5c06\u6765\u5927\u89c4\u6a21\u76d1\u63a7\u548c\u7ba1\u7406\u6211\u4eec\u7684\u7cfb\u7edf\u6240\u9700\u7684\u6c34\u5e73\u53ef\u6269\u5c55\u6027\u548c\u5feb\u901f\u541e\u5410\u80fd\u529b\u3002\u201c-Netskope\u516c\u53f8\u7684\u7cfb\u7edf\u67b6\u6784\u5e08\u9a6c\u514b\u00b7S\u00b7\u96f7\u4f2f\u7279\u535a\u58eb(Mark S.Reibert\uff0cPh.D.)\u3002\n\u66f4\u65b0\u3001\u66f4\u5bbd\u677e\u7684\u8bb8\u53ef\uff1a\u4f7f\u6211\u4eec\u6240\u6709\u7684\u4f01\u4e1a\u529f\u80fd\u90fd\u662f\u514d\u8d39\u7684\uff0c\u5e76\u5411\u7528\u6237\u6388\u4e88\u66f4\u591a\u6743\u9650\u3002\n\u5bf9\u8fde\u7eed\u805a\u5408\u7684\u5b9e\u8d28\u6027\u6539\u8fdb\uff1a\u6539\u8fdbAPI\u5e76\u8ba9\u7528\u6237\u66f4\u597d\u5730\u63a7\u5236\u6d41\u7a0b\u3002\n\u7528\u6237\u81ea\u5b9a\u4e49\u64cd\u4f5c(\u65b0\u529f\u80fd\uff01)\uff1a\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u4e2d\u5b9a\u4e49\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e76\u4f7f\u7528\u6211\u4eec\u7684\u4f5c\u4e1a\u8c03\u5ea6\u7cfb\u7edf\u5bf9\u5176\u8fdb\u884c\u8c03\u5ea6\u3002\nTimscaleDB 2.0\u5019\u9009\u7248\u672c\u7acb\u5373\u53ef\u7528\u4e8e\u81ea\u6211\u7ba1\u7406\u8f6f\u4ef6\u5b89\u88c5\uff0c\u9884\u8ba1\u57282020\u5e74\u540e\u671f\u5168\u9762\u4e0a\u5e02\u3002\u5c4a\u65f6\uff0cTimscaleDB 2.0\u5c06\u5728\u6211\u4eec\u7684\u6258\u7ba1\u65f6\u95f4\u7cfb\u5217\u670d\u52a1\u4e0a\u63d0\u4f9b\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528TimscaleDB\uff0c\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86\u8be6\u7ec6\u7684\u6587\u6863\u6765\u7b80\u5316\u548c\u52a0\u901f\u60a8\u7684\u8fc1\u79fb\u3002\n\u6211\u4eec\u4e5f\u9f13\u52b1\u60a8\u52a0\u5165\u6211\u4eec5,000+\u4f1a\u5458\u7684Slake\u793e\u533a\uff0c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u4e86\u89e3\u66f4\u591a\uff0c\u5e76\u4e0e\u5fd7\u540c\u9053\u5408\u7684\u5f00\u53d1\u4eba\u5458\u4f1a\u9762-\u6211\u4eec\u5728\u6240\u6709\u6e20\u9053\u90fd\u5f88\u6d3b\u8dc3\uff0c\u5e76\u5728\u6b64\u63d0\u4f9b\u5e2e\u52a9\u3002\n(\u867d\u7136Ajay\u548cMike\u88ab\u5217\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u7684\u4f5c\u8005\uff0c\u4f46Timescale\u6570\u636e\u5e93\u56e2\u961f\u7684\u6210\u5458\u5728\u51e0\u4e2a\u5c0f\u65f6\u3001\u51e0\u5468\u548c\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u4e00\u76f4\u81f4\u529b\u4e8e\u4ea4\u4ed8\u9ad8\u8d28\u91cf\u7684\u4ee3\u7801\uff1aErik Nordstr\u00f6m\u3001Gayathri Ayyappan\u3001Ruslan Fomkin\u3001Mats Kindahl\u3001Sven Klemm\u3001Brian Rowe\u548cDmitry Simonenko\uff0c\u8fd9\u662f\u4ed6\u4eec\u7684\u5168\u90e8\u8363\u8a89\u548c\u70ed\u70c8\u7684\u638c\u58f0\u3002)\u3002\n\u6211\u4eec\u975e\u5e38\u611f\u8c22\u6211\u4eec\u6240\u6709\u7684\u6d4b\u8bd5\u7248\u6d4b\u8bd5\u4eba\u5458\uff1b\u4ece\u62a5\u544a\u95ee\u9898\u5230\u5206\u4eab\u53cd\u9988\u548c\u5efa\u8bae\u7279\u6027\uff0c\u4f60\u4eec\u90fd\u4e3a\u4f7fTimscaleDB 2.0\u6210\u4e3a\u5f00\u53d1\u4eba\u5458\u6700\u597d\u7684\u4f53\u9a8c\u53d1\u6325\u4e86\u91cd\u8981\u4f5c\u7528\u3002\n\u8981\u4e86\u89e3\u6709\u5173TimscaleDB2.0\u3001\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u6211\u4eec\u8ba4\u4e3a\u5173\u7cfb\u6570\u636e\u5e93\u662f\u8f6f\u4ef6\u5f00\u53d1\u7684\u8fc7\u53bb\u548c\u672a\u6765\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\n\u5927\u7ea630\u5e74\u6765\uff0c\u4ece20\u4e16\u7eaa70\u5e74\u4ee3\u4e2d\u671f\u52302000\u5e74\u4ee3\u4e2d\u671f\uff0c\u5982\u679c\u60a8\u5728\u5f00\u53d1\u8f6f\u4ef6\uff0c\u60a8\u4f7f\u7528\u7684\u662f\u5173\u7cfb\u6570\u636e\u5e93\u3002\u4eceSystem R(1974)\u5230Oracle(1979)\u3001SQL Server(1989)\uff0c\u518d\u5230\u540e\u6765\u7684\u5f00\u6e90\u9009\u9879\uff0c\u5982MySQL(1995)\u548cPostgreSQL(1996)\uff0c\u5173\u7cfb\u6570\u636e\u5e93\u662f\u4efb\u4f55\u65b0\u5e94\u7528\u7a0b\u5e8f\u7684\u6807\u51c6\u3002\n\u5927\u7ea615\u5e74\u524d\uff0c\u8fd9\u4e00\u5207\u90fd\u6539\u53d8\u4e86\u3002\u975e\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a\u201cNoSQL\u201d\u6570\u636e\u5e93\uff0c\u53d8\u5f97\u6d41\u884c\u8d77\u6765\u3002\u5f88\u591a\u8fd9\u6837\u7684\u7528\u6cd5\u90fd\u662f\u5408\u6cd5\u5fc5\u8981\u7684\u3002\u65b0\u7684\u4e92\u8054\u7f51\u5de8\u5934\u5efa\u9020\u4e86\u65b0\u7684\u7cfb\u7edf\u6765\u5904\u7406\u4ee5\u524d\u6df1\u4e0d\u53ef\u6d4b\u7684\u6570\u636e\u91cf\uff0c\u4f8b\u5982\uff0c\u8c37\u6b4c(Google)\u63a8\u51fa\u4e86MapReduce(2004\u5e74)\u548cBigtable(2006\u5e74)\uff1b\u4e9a\u9a6c\u900a(Amazon)\u63a8\u51fa\u4e86Dynamo(2007\u5e74)\u3002\u4f46\u662f\uff0c\u5927\u91cf\u91c7\u7528NoSQL\u662f\u4e0b\u610f\u8bc6\u7684\u53cd\u5e94\uff0c\u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a\u201c\u5173\u7cfb\u6570\u636e\u5e93\u4e0d\u80fd\u4f38\u7f29\uff0c\u6240\u4ee5\u6211\u9700\u8981\u4e00\u4e2aNoSQL\u6570\u636e\u5e93\u3002\u201d\n\u7136\u800c\uff0c\u5927\u591a\u6570\u516c\u53f8\u90fd\u4e0d\u662f\u8c37\u6b4c\u6216\u4e9a\u9a6c\u900a\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4ee5\u4fdd\u7559\u6570\u636e\u96c6\u4e2d\u5173\u7cfb\u7684\u65b9\u5f0f\u5b58\u50a8\u6570\u636e\u7684\u80fd\u529b\u5f88\u6709\u4ef7\u503c\u3002\u5728\u751f\u4ea7\u4e2d\u4f7f\u7528\u4e86\u51e0\u5341\u5e74\u4e4b\u540e\uff0c\u5927\u591a\u6570\u5173\u7cfb\u6570\u636e\u5e93\u90fd\u662f\u7ecf\u4e45\u8010\u7528\u7684\uff0c\u901a\u5e38\u6bd4\u5b83\u4eec\u7684NoSQL\u8868\u4eb2\u66f4\u53ef\u9760\u3002SQL\u4e5f\u91cd\u65b0\u6210\u4e3a\u6570\u636e\u5206\u6790\u7684\u901a\u7528\u8bed\u8a00\uff0c\u662f\u5f53\u4eca\u7b2c\u4e09\u5e7f\u6cdb\u4f7f\u7528\u7684\u8bed\u8a00(\u4ec5\u6b21\u4e8eJavaScript\u548cHTML/CSS)\u3002\n\u4eca\u5929\uff0c\u4f7f\u7528\u6700\u591a\u76844\u4e2a\u6570\u636e\u5e93\u4ecd\u7136\u90fd\u662f\u5173\u7cfb\u6570\u636e\u5e93\u3002\u7279\u522b\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0cPostgreSQL\u662f\u53bb\u5e74\u589e\u957f\u6700\u5feb\u7684\u6570\u636e\u5e93(\u662f\u7684\uff0c\u751a\u81f3\u6bd4MongoDB\u8fd8\u5feb)\u3002\u5176\u4e2d\u4e00\u4e9b\u6765\u81ea\u6539\u6362\u8fc7\u6765\u7684\u5f00\u53d1\u4eba\u5458\uff1b\u53e6\u4e00\u4e9b\u6765\u81ea\u4ece\u672a\u79bb\u5f00\u5173\u7cfb\u6570\u636e\u5e93\u7684\u5f00\u53d1\u4eba\u5458\u3002\u6240\u4ee5\u4e0d\u8981\u79f0\u5b83\u4e3a\u5377\u571f\u91cd\u6765-\u5173\u7cfb\u6570\u636e\u5e93\u5df2\u7ecf\u5728\u8fd9\u91cc\u5b58\u5728\u4e86\u5f88\u591a\u5e74\u4e86(h/t James Todd Smith)\u3002\n\u6700\u91cd\u8981\u7684\u662f\uff0c\u5173\u7cfb\u6570\u636e\u5e93\u5b9e\u9645\u4e0a\u53ef\u4ee5\u4f38\u7f29\u3002\u6211\u4eec\u5728\u6700\u8fd1\u7684\u201cNewSQL\u201d\u6570\u636e\u5e93\u6d6a\u6f6e\u4e2d\u770b\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u8fd1\u5341\u5e74\u524d\uff0c\u8c37\u6b4c\u518d\u6b21\u8d70\u5728\u4e86\u524d\u5217\uff0c\u5728\u4ed6\u4eec\u7684\u7b2c\u4e00\u7bc7Spanner\u8bba\u6587(2012\u5e74)(\u4f5c\u8005\u5305\u62ecMapReduce\u7684\u539f\u59cb\u4f5c\u8005)\u4e2d\u5ba3\u5e03\u4e86\u4e00\u4e2a\u5730\u7406\u590d\u5236\u7684\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u7d27\u968f\u5176\u540e\u7684\u662f\u5176\u4ed6\u5148\u9a71\uff0c\u5982CockroachDB(2014)\u548cYuabyte(2016)\u3002\u6709\u4e86TimscaleDB(2017)\uff0c\u6211\u4eec\u5df2\u7ecf\u5efa\u7acb\u4e86\u4e00\u4e2a\u53ef\u9488\u5bf9\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u8fdb\u884c\u7f29\u653e\u7684\u5173\u7cfb\u6570\u636e\u5e93\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u65f6\u95f4\u5e8f\u5217\u662f\u8de8\u8d8a\u65f6\u95f4\u7684\u4e8b\u7269\u7684\u5ea6\u91cf\u3002\u4f46\u662f\uff0c\u66f4\u6df1\u5165\u5730\u6316\u6398\uff0c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u662f\u5bf9\u4e8b\u7269\u5982\u4f55\u53d8\u5316\u7684\u5ea6\u91cf\u3002\n\u5982\u679c\u6211\u5bc4\u7ed9\u4f6010\u7f8e\u5143\uff0c\u90a3\u4e48\u4e00\u4e2a\u4f20\u7edf\u7684\u94f6\u884c\u6570\u636e\u5e93\u4f1a\u81ea\u52a8\u8bb0\u5165\u6211\u7684\u8d26\u6237\u7684\u501f\u65b9\uff0c\u5e76\u8bb0\u5165\u4f60\u7684\u8d26\u6237\u7684\u8d37\u65b9\u3002\u7136\u540e\uff0c\u5982\u679c\u4f60\u5bc4\u7ed9\u621110\u7f8e\u5143\uff0c\u540c\u6837\u7684\u8fc7\u7a0b\u4f1a\u53d1\u751f\u76f8\u53cd\u7684\u60c5\u51b5\u3002\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u65f6\uff0c\u6211\u4eec\u7684\u94f6\u884c\u4f59\u989d\u770b\u8d77\u6765\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u94f6\u884c\u53ef\u80fd\u4f1a\u60f3\uff0c\u201c\u54e6\uff0c\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u3002\u201d\u8fd9\u5c31\u662f\u4f20\u7edf\u6570\u636e\u5e93\u4f1a\u5411\u4f60\u5c55\u793a\u7684\u3002\n\u4f46\u662f\uff0c\u6709\u4e86\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\uff0c\u94f6\u884c\u53ef\u4ee5\u770b\u5230\uff0c\u201c\u563f\uff0c\u8fd9\u4e24\u4e2a\u4eba\u4e00\u76f4\u5728\u4e92\u76f8\u5bc410\u7f8e\u5143--\u4e5f\u8bb8\u4ed6\u4eec\u662f\u670b\u53cb\uff0c\u4e5f\u8bb8\u4ed6\u4eec\u662f\u5ba4\u53cb\uff0c\u4e5f\u8bb8\u6709\u5176\u4ed6\u4e8b\u60c5\u53d1\u751f\u3002\u201d\u8fd9\u79cd\u7c92\u5ea6\u6c34\u5e73\uff0c\u5373\u5bf9\u4e8b\u7269\u5982\u4f55\u53d8\u5316\u7684\u5ea6\u91cf\uff0c\u6b63\u662f\u65f6\u95f4\u5e8f\u5217\u6240\u80fd\u5b9e\u73b0\u7684\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u96c6\u4ee5\u63d2\u5165(\u800c\u4e0d\u662f\u66f4\u65b0)\u7684\u5f62\u5f0f\u8ddf\u8e2a\u5bf9\u6574\u4e2a\u7cfb\u7edf\u7684\u66f4\u6539\uff0c\u4ee5\u6355\u83b7\u6709\u5173\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u65f6\u95f4\u5e8f\u5217\u8fc7\u53bb\u662f\u5c0f\u4f17\u7684\uff0c\u5b64\u7acb\u4e8e\u91d1\u878d\u3001\u6d41\u7a0b\u5236\u9020(\u4f8b\u5982\uff0c\u77f3\u6cb9\u548c\u5929\u7136\u6c14\u3001\u5316\u5de5\u3001\u5851\u6599)\u6216\u7535\u529b\u548c\u516c\u7528\u4e8b\u4e1a\u7b49\u884c\u4e1a\u3002\u4f46\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\uff0c\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u5448\u7206\u70b8\u5f0f\u589e\u957f(\u8fd9\u662f\u8fc7\u53bb24\u4e2a\u6708\u4e2d\u589e\u957f\u6700\u5feb\u7684\u7c7b\u522b)\u3002\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u7531\u4e8eIT\u76d1\u63a7\u548c\u7269\u8054\u7f51\u7684\u589e\u957f\uff0c\u4f46\u4e5f\u6709\u8bb8\u591a\u5176\u4ed6\u65b0\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6765\u6e90\uff1a\u52a0\u5bc6\u8d27\u5e01\u3001\u6e38\u620f\u3001\u673a\u5668\u5b66\u4e60\u7b49\u3002\n\u6b63\u5728\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u5e0c\u671b\u66f4\u5feb\u5730\u505a\u51fa\u66f4\u597d\u7684\u6570\u636e\u9a71\u52a8\u51b3\u7b56\uff0c\u8fd9\u610f\u5473\u7740\u4ee5\u5c3d\u53ef\u80fd\u9ad8\u7684\u4fdd\u771f\u5ea6\u6536\u96c6\u6570\u636e\u3002\u65f6\u95f4\u5e8f\u5217\u662f\u60a8\u53ef\u4ee5\u6355\u83b7\u7684\u6700\u9ad8\u4fdd\u771f\u5ea6\u7684\u6570\u636e\uff0c\u56e0\u4e3a\u5b83\u51c6\u786e\u5730\u544a\u8bc9\u60a8\u4e8b\u60c5\u662f\u5982\u4f55\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\u7684\u3002\u4f20\u7edf\u6570\u636e\u96c6\u4e3a\u60a8\u63d0\u4f9b\u9759\u6001\u5feb\u7167\uff0c\u800c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5219\u63d0\u4f9b\u6574\u4e2a\u7cfb\u7edf\u4e2d\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u52a8\u6001\u7535\u5f71\uff1a\u4f8b\u5982\uff0c\u60a8\u7684\u8f6f\u4ef6\u3001\u7269\u7406\u53d1\u7535\u5382\u3001\u6e38\u620f\u3001\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u5ba2\u6237\u3002\n\u65f6\u95f4\u5e8f\u5217\u4e0d\u518d\u662f\u4e00\u4e9b\u5c0f\u4f17\u7684\u5de5\u4f5c\u8d1f\u8377\u3002\u5b83\u65e0\u5904\u4e0d\u5728\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6240\u6709\u6570\u636e\u90fd\u662f\u65f6\u95f4\u5e8f\u5217\u6570\u636e-\u5982\u679c\u60a8\u80fd\u591f\u4ee5\u8fd9\u79cd\u4fdd\u771f\u5ea6\u5b58\u50a8\u5b83\u7684\u8bdd\u3002\u5f53\u7136\uff0c\u8fd9\u5c31\u662f\u6536\u96c6\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u7684\u95ee\u9898\uff1a\u5b83\u662f\u65e0\u60c5\u7684\u3002\u901a\u8fc7\u6267\u884c\u6240\u6709\u8fd9\u4e9b\u63d2\u5165\uff0c\u800c\u4e0d\u662f\u66f4\u65b0\uff0c\u60a8\u6700\u7ec8\u4f1a\u4ee5\u6bd4\u4ee5\u5f80\u66f4\u9ad8\u7684\u5bb9\u91cf\u548c\u901f\u5ea6\u83b7\u5f97\u66f4\u591a\u7684\u6570\u636e\u3002\u60a8\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u6570\u5341\u4ebf\u884c\u4e2d\u7684\u8868\u3002\u5bf9\u4e8e\u4f20\u7edf\u6570\u636e\u5e93\u6765\u8bf4\uff0c\u8fd9\u5728\u6027\u80fd\u548c\u53ef\u4f38\u7f29\u6027\u65b9\u9762\u5e26\u6765\u4e86\u6311\u6218\u3002\nTimscaleDB\u662f\u9886\u5148\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5173\u7cfb\u6570\u636e\u5e93\u3002Timescale\u57fa\u4e8ePostgreSQL\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u901a\u8fc7\u514d\u8d39\u8f6f\u4ef6\u83b7\u5f97\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3aAWS\u3001Azure\u548cGCP\u4e0a\u7684\u5b8c\u5168\u6258\u7ba1\u670d\u52a1\u4f7f\u7528\u3002\nTimscaleDB\u662f\u4e13\u95e8\u4e3a\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u6784\u5efa\u7684\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4ee5\u6781\u5c11\u7684\u6210\u672c\u83b7\u5f97\u6570\u91cf\u7ea7\u7684\u6027\u80fd\u63d0\u5347\uff0c\u4ee5\u53ca\u66f4\u597d\u7684\u5f00\u53d1\u4f53\u9a8c\u3002\u8fd9\u610f\u5473\u7740\u5de8\u5927\u7684\u89c4\u6a21(\u5355\u4e2a\u670d\u52a1\u5668\u4e0a\u6bcf\u79d2\u6570\u5343\u4ebf\u884c\u548c\u6570\u767e\u4e07\u6b21\u63d2\u5165)\u300194%\u4ee5\u4e0a\u7684\u672c\u673a\u538b\u7f29\u3001\u6bd4PostgreSQL\u3001InfluxDB\u3001Cassandra\u548cMongoDB\u5feb10-100\u500d\u7684\u67e5\u8be2\u901f\u5ea6-\u6240\u6709\u8fd9\u4e9b\u90fd\u4fdd\u6301\u4e86PostgreSQL\u7684\u53ef\u9760\u6027\u3001\u6613\u7528\u6027\u3001SQL\u63a5\u53e3\u548c\u6574\u4f53\u4f18\u52bf\u3002\n\u5982\u4eca\uff0c\u5b58\u50a8\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u6709\u51e0\u79cd\u9009\u62e9\u3002\u7136\u800c\uff0c\u5927\u591a\u6570\u662f\u975e\u5173\u7cfb\u7cfb\u7edf\uff0c\u672c\u8d28\u4e0a\u662f\u7f8e\u5316\u7684\u5ea6\u91cf\u5b58\u50a8\uff0c\u4e13\u6ce8\u4e8e\u5b58\u50a8\u6570\u5b57\u6570\u636e\uff0c\u800c\u4e0d\u662f\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u6240\u9700\u7684\u5e7f\u6cdb\u7684\u6570\u636e\u7c7b\u578b(\u4e5f\u4e0d\u662f\u6570\u636e\u96c6\u4e4b\u95f4\u5173\u7cfb\u7684\u4e30\u5bcc\u8868\u793a)\u3002\n2017\u5e744\u6708\uff0c\u6211\u4eec\u5c06TimscaleDB\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u652f\u6301\u5168SQL\u7684\u65f6\u5e8f\u6570\u636e\u5e93\uff0c\u8fdb\u5165\u4e86\u8fd9\u4e2a\u5145\u65a5\u7740\u975e\u5173\u7cfb\u578b\u6307\u6807\u5b58\u50a8\u7684\u4e16\u754c\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u5176\u4ed6\u8bb8\u591a\u4eba\u5df2\u7ecf\u5c06\u6211\u4eec\u7684SQL\u65b9\u6cd5\u590d\u5236\u5230\u65f6\u95f4\u5e8f\u5217\u4e2d(\u5305\u62ec\u4e00\u4e9b\u540d\u79f0\u975e\u5e38\u53ef\u7591\u7684\u65b9\u6cd5\uff0c*\u54b3\u55fd*Amazon Time Stream*\u54b3\u55fd*)\uff0c\u4f46\u6ca1\u6709\u4eba\u80fd\u591f\u590d\u5236TimscaleDB\u7684\u771f\u6b63\u5173\u7cfb\u57fa\u7840\u548c\u793e\u533a\u3002\n\u56e0\u6b64\uff0c\u5728\u77ed\u77ed3.5\u5e74\u7684\u65f6\u95f4\u91cc\uff0cTimscaleDB\u5df2\u7ecf\u53d6\u5f97\u4e86\u957f\u8db3\u7684\u8fdb\u6b65\uff0c\u73b0\u5728\u5df2\u7ecf\u6709\u4e86\u6570\u5343\u4e07\u7684\u4e0b\u8f7d\u91cf\u548c\u8d85\u8fc750\u4e07\u4e2a\u6d3b\u52a8\u6570\u636e\u5e93\u3002TimscaleDB\u5f00\u53d1\u4eba\u5458\u793e\u533a\u5305\u62ecAppDynamics\u3001\u535a\u4e16\u3001\u601d\u79d1\u3001\u5eb7\u5361\u65af\u7279\u3001DigitalOcean\u3001\u9676\u6c0f\u5316\u5b66\u3001\u7535\u5b50\u827a\u754c\u3001\u5bcc\u58eb\u901a\u3001IBM\u3001\u5fae\u8f6f\u3001Rackspace\u3001\u65bd\u8010\u5fb7\u7535\u6c14\u3001\u4e09\u661f\u3001\u897f\u95e8\u5b50\u3001\u4f18\u6b65\u3001\u6c83\u5c14\u739b\u3001\u534e\u7eb3\u97f3\u4e50\u3001WebEx\u7b49\u6570\u4ee5\u5343\u8ba1\u7684\u7ec4\u7ec7\u3002\n\u9664\u4e86\u8fd9\u4e2a\u4e13\u95e8\u7684\u793e\u533a\uff0c\u6211\u4eec\u8fd8\u53d7\u76ca\u4e8e\u5e9e\u5927\u7684PostgreSQL\u793e\u533a\u548c\u751f\u6001\u7cfb\u7edf\u3002\u603b\u800c\u8a00\u4e4b\uff0cTimscaleDB\u793e\u533a\u662f\u6700\u5927\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5f00\u53d1\u793e\u533a\u3002\n\u81ea\u4ece\u6211\u4eec\u63a8\u51faTimscaleDB\u4ee5\u6765\uff0c\u6211\u4eec\u5c31\u9047\u5230\u4e86\u8d28\u7591\u3002\u6bd5\u7adf\uff0c\u5728PostgreSQL\u4e0a\u6784\u5efa\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\u662f\u4e00\u4e2a\u4e0d\u660e\u663e\u7684\u3001\u6709\u70b9\u5f02\u7aef\u7684\u51b3\u5b9a\u3002\u7136\u800c\uff0c\u968f\u7740\u6bcf\u4e00\u6b21\u53d1\u5e03\uff0c\u6211\u4eec\u7ee7\u7eed\u53cd\u9a73\u6211\u4eec\u7684\u4ec7\u6068\u8005\uff0c\u5e76\u53d6\u60a6\u6211\u4eec\u7684\u7528\u6237\u3002\u56e0\u4e3a\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e3a\u65f6\u95f4\u5e8f\u5217\u6784\u5efa\u4e00\u4e2a\u53ef\u4f38\u7f29\u7684\u5173\u7cfb\u6570\u636e\u5e93\u5e76\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684-\u53ea\u662f\u5f88\u96be\u3002\u4f46\u662f\uff0c\u51ed\u501f\u6211\u4eec\u624d\u534e\u6a2a\u6ea2\u7684\u56e2\u961f\u548c\u70ed\u60c5\u7684\u7528\u6237\uff0c\u6211\u4eec\u6b63\u5728\u505a\u8fd9\u4ef6\u4e8b\u3002\n\u8bef\u533a1\uff1a\u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e0d\u80fd\u50cf\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u90a3\u6837\u5177\u6709\u4f38\u7f29\u6027\n\u4e8b\u5b9e\uff1a\u5bf9\u4e8e\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u6211\u4eec\u7684\u6027\u80fd\u4f18\u4e8e\u975e\u5173\u7cfb(\u548c\u5176\u4ed6\u5173\u7cfb)\u6570\u636e\u5e93\u3002\u4e0eCassandra\u76f8\u6bd4\uff0c\u63d2\u5165\u901f\u5ea6\u63d0\u9ad8\u4e8610\u500d\uff0c\u67e5\u8be2\u901f\u5ea6\u63d0\u9ad8\u4e861000\u500d\u3002\u4e0eMongo\u76f8\u6bd4\uff0c\u63d2\u5165\u901f\u5ea6\u63d0\u9ad8\u4e8620%\uff0c\u67e5\u8be2\u901f\u5ea6\u63d0\u9ad8\u4e861400\u500d\u3002\u4e0eInfluxDB\u76f8\u6bd4\uff0c\u63d2\u5165\u66f4\u591a\u3001\u67e5\u8be2\u66f4\u5feb\u3001\u53ef\u9760\u6027\u66f4\u9ad8\u3002(\u4e0e\u6240\u6709\u8fd9\u4e9b\u9009\u9879\u4e0d\u540c\uff0c\u6211\u4eec\u8fd8\u652f\u6301\u5b8c\u6574\u7684SQL\uff0c\u8fd9\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u7f16\u7a0b\u8bed\u8a00\u548c\u4ed6\u4eec\u5df2\u7ecf\u77e5\u9053\u7684\u5de5\u5177\u5bf9\u5176\u6570\u636e\u8fd0\u884c\u590d\u6742\u7684\u5206\u6790\u3002)\u3002\n\u8bef\u533a2\uff1a\u5173\u7cfb\u6570\u636e\u5e93\u5360\u7528\u592a\u591a\u78c1\u76d8\u7a7a\u95f4(\u6216\u8005\uff0c\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u4e0d\u80fd\u50cf\u5217\u5f0f\u6570\u636e\u5e93\u90a3\u6837\u538b\u7f29)\u3002\n\u4e8b\u5b9e\uff1a\u53ef\u4ee5\u5728\u9762\u5411\u884c\u7684\u6570\u636e\u5e93\u4e2d\u6784\u5efa\u5217\u538b\u7f29\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u505a\u7684\u3002TimscaleDB\u91c7\u7528\u4e86\u51e0\u79cd\u540c\u7c7b\u6700\u4f73\u7684\u538b\u7f29\u7b97\u6cd5\uff0c\u5305\u62ecDelta-Delta\u3001Gorilla\u548cSIMPLE-8bRLE\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u5b9e\u73b094%\u4ee5\u4e0a\u7684\u672c\u673a\u538b\u7f29\u3002\n\u4e8b\u5b9e\uff1a\u6bcf\u4e2a\u6570\u636e\u5e93\uff0c\u65e0\u8bba\u662f\u5173\u7cfb\u6570\u636e\u5e93\u8fd8\u662f\u975e\u5173\u7cfb\u6570\u636e\u5e93\uff0c\u90fd\u4f7f\u7528\u6a21\u5f0f\u6765\u5b58\u50a8\u6570\u636e\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u60a8\u662f\u5426\u6709\u80fd\u529b\u4fee\u6539\u8be5\u6a21\u5f0f\u5e76\u6839\u636e\u60a8\u7684\u4f7f\u7528\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\u4f46\u662f\uff0c\u81ea\u52a8\u4e3a\u60a8\u751f\u6210\u6a21\u5f0f\u662f\u5f88\u6709\u7528\u7684\u3002\u6211\u4eec\u5df2\u7ecf\u5728\u63a2\u7d22\u81ea\u52a8\u6a21\u5f0f\uff1a\u4f8b\u5982\uff0c\u8bf7\u53c2\u9605Promscale\uff0c\u8fd9\u662f\u6211\u4eec\u4e3a\u666e\u7f57\u7c73\u4fee\u65af\u6784\u5efa\u7684\u57fa\u4e8eTimscaleDB\u7684\u65b0\u5206\u6790\u5e73\u53f0\uff0c\u5b83\u5c06\u6570\u636e\u5b58\u50a8\u5728\u9488\u5bf9\u6307\u6807\u9ad8\u5ea6\u4f18\u5316\u7684\u52a8\u6001\u81ea\u52a8\u751f\u6210\u6a21\u5f0f\u4e2d\u3002\u8fd8\u4f1a\u6709\u66f4\u591a\u3002\n\u4e8b\u5b9e\uff1aNewSQL\u6570\u636e\u5e93(\u5982\u4e0a\u6240\u8ff0)\u9a73\u65a5\u4e86\u4e8b\u52a1\u6027\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8fd9\u4e00\u795e\u8bdd\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u7528TimscaleDB 2.0\u4e3a\u65f6\u95f4\u5e8f\u5217\u5de5\u4f5c\u8d1f\u8f7d\u9a73\u65a5\u8fd9\u4e00\u795e\u8bdd\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u5ba2\u6237\u5728\u8fde\u7eed\u7684\u65e5\u5e38\u4f7f\u7528\u4e2d\u8fd0\u884c\u591a\u8282\u70b9TimscaleDB\u5df2\u7ecf\u6709\u597d\u51e0\u4e2a\u6708\u4e86\uff0c\u5176\u4e2d\u5305\u62ec\u4e00\u5bb6\u8d22\u5bcc100\u5f3a\u79d1\u6280\u516c\u53f8\u6bcf\u5929\u541e\u566c\u8d85\u8fc710\u4ebf\u884c\u7684\u5305\u542b22\u53f0\u670d\u52a1\u5668\u7684\u96c6\u7fa4\u3002\n\u5e38\u89c4\u8d85\u7ea7\u8868\u662f\u6211\u4eec\u7684\u539f\u521b\u6027\u521b\u65b0\u4e4b\u4e00\uff0c\u5b83\u662fTimscaleDB\u4e2d\u7684\u4e00\u4e2a\u865a\u62df\u8868\uff0c\u5b83\u81ea\u52a8\u5c06\u6570\u636e\u5206\u533a\u5230\u5355\u4e2a\u673a\u5668\u4e0a\u7684\u591a\u4e2a\u5b50\u8868(\u201c\u5757\u201d)\u4e2d\uff0c\u6839\u636e\u9700\u8981\u4e0d\u65ad\u521b\u5efa\u65b0\u7684\u5b50\u8868\uff0c\u540c\u65f6\u59cb\u7ec8\u63d0\u4f9b\u5355\u4e2a\u8fde\u7eed\u8868\u7684\u9519\u89c9\u3002\n\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u662f\u4e00\u4e2a\u8d85\u7ea7\u8868\uff0c\u5b83\u81ea\u52a8\u8de8\u591a\u53f0\u673a\u5668\u5c06\u6570\u636e\u5206\u533a\u4e3a\u5757\uff0c\u540c\u65f6\u59cb\u7ec8\u4fdd\u6301\u5355\u4e2a\u8fde\u7eed\u8868\u7684\u9519\u89c9(\u548c\u7528\u6237\u4f53\u9a8c)\u3002\n\u8be5\u4f53\u7cfb\u7ed3\u6784\u7531\u4e00\u4e2a\u8bbf\u95ee\u8282\u70b9(AN)\u548c\u4e00\u7ec4\u6570\u636e\u8282\u70b9(DN)\u7ec4\u6210\uff0c\u524d\u8005\u5b58\u50a8\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u7684\u5143\u6570\u636e\u5e76\u8de8\u96c6\u7fa4\u6267\u884c\u67e5\u8be2\u89c4\u5212\uff0c\u540e\u8005\u5b58\u50a8\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u6570\u636e\u96c6\u7684\u5b50\u96c6\u5e76\u5728\u672c\u5730\u6267\u884c\u67e5\u8be2\u3002*\u4e3a\u7b80\u5316\u64cd\u4f5c\uff0cTimscaleDB\u4ecd\u7136\u662f\u4e00\u4e2a\u5355\u4e00\u8f6f\u4ef6\uff1b\u4e0a\u8ff0\u89d2\u8272\u662f\u901a\u8fc7\u5728TimscaleDB\u5185\u6267\u884c\u6570\u636e\u5e93\u547d\u4ee4\u6765\u5efa\u7acb\u7684(\u4f8b\u5982\uff0c\u5728\u5e94\u8be5\u5145\u5f53\u8bbf\u95ee\u8282\u70b9\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u6dfb\u52a0\u6307\u5411\u6570\u636e\u8282\u70b9\u4e3b\u673a\u540d\u7684_DATA_NODE\uff0c\u7136\u540e\u6dfb\u52a0_Distributed_HYPERTABLE\u3002)\u3002\n\u76ee\u524d\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0\u4efb\u610f\u6570\u91cf\u7684\u6570\u636e\u8282\u70b9\u4ee5\u5b9e\u73b0\u6c34\u5e73\u53ef\u4f38\u7f29\u6027\uff0c\u8fd8\u53ef\u4ee5\u5229\u7528\u6570\u636e\u8282\u70b9\u4e0a\u73b0\u6709\u7684Postgres\u7269\u7406\u590d\u5236\u6765\u5b9e\u73b0\u5bb9\u9519(\u6211\u4eec\u8fd8\u5728\u4e3a\u5c06\u6765\u7684\u7248\u672c\u5f00\u53d1\u66f4\u591a\u672c\u673a\u590d\u5236\uff1b\u8bf7\u53c2\u89c1\u4e0b\u6587)\u3002\n\u8bbf\u95ee\u8282\u70b9\u8fd8\u53ef\u4ee5\u8fdb\u884c\u7269\u7406\u590d\u5236\u4ee5\u5b9e\u73b0\u9ad8\u53ef\u7528\u6027\uff0c\u672a\u6765\u7684\u7248\u672c\u5c06\u4fa7\u91cd\u4e8e\u8fdb\u4e00\u6b65\u6269\u5c55TimscaleDB\u591a\u8282\u70b9\u7684\u8bfb\u5199\u8def\u5f84\u3002\n\u56e0\u6b64\uff0c\u4f20\u7edf\u7684\u8d85\u7ea7\u8868\u683c\u53ef\u4ee5\u6269\u5c55\u5230\u6bcf\u79d2100-200\u4e07\u4e2a\u6307\u6807\u548c100 TB\u7684\u6570\u636e\uff0c\u800c\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u683c\u5219\u53ef\u4ee5\u6269\u5c55\u5230\u6bcf\u79d2\u63a5\u65361000\u591a\u4e07\u4e2a\u6307\u6807\u5e76\u5b58\u50a8PB\u7ea7\u7684\u6570\u636e\uff1a\n\u5206\u5e03\u5f0f\u8d85\u8868\u8fd8\u5229\u7528\u67e5\u8be2\u5e76\u884c\u5316\uff0c\u91c7\u7528\u5b8c\u5168/\u90e8\u5206\u805a\u5408\u548c\u4e0b\u63a8\uff0c\u4ee5\u5b9e\u73b0\u66f4\u5feb\u7684\u67e5\u8be2\uff1a\n\u6211\u4eec\u5df2\u7ecf\u5728\u52aa\u529b\u6539\u8fdb\u8fd9\u4e2a\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u7684\u521d\u59cb\u7248\u672c\uff0c\u5e76\u63d0\u4f9b\u4ee5\u4e0b\u4e00\u7cfb\u5217\u529f\u80fd\uff1a\n\u590d\u5236\uff1a\u76ee\u524d\u6bcf\u4e2a\u8282\u70b9\u90fd\u9700\u8981\u81ea\u5df1\u7684\u590d\u5236(\u4f7f\u7528\u4e3b/\u5907\u4efd\u7269\u7406\u590d\u5236)\u3002\u9488\u5bf9TimscaleDB\u672c\u673a\u6784\u5efa\u7684\u8de8\u6570\u636e\u8282\u70b9\u7684\u7fa4\u96c6\u8303\u56f4\u590d\u5236\u6b63\u5728\u5f00\u53d1\u4e2d\u3002\n\u91cd\u65b0\u5e73\u8861\uff1a\u76ee\u524d\uff0c\u5f53\u65b0\u6570\u636e\u8282\u70b9\u7075\u6d3b\u5730\u6dfb\u52a0\u5230\u73b0\u6709\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u4e2d\u65f6\uff0c\u4f1a\u8de8\u53ef\u7528\u8282\u70b9\u521b\u5efa\u65b0\u7684\u533a\u5757\uff0c\u5e76\u76f8\u5e94\u5730\u8def\u7531\u67e5\u8be2\u4ee5\u8bc6\u522b\u91cd\u65b0\u5206\u533a\u3002\u4f46\u4e0e\u672c\u673a\u590d\u5236\u76f8\u5173\uff0c\u73b0\u6709\u533a\u5757\u76ee\u524d\u6ca1\u6709\u8de8\u8282\u70b9\u91cd\u65b0\u5e73\u8861\uff0c\u8fd9\u4e5f\u5728\u5f00\u53d1\u4e2d\u3002\n\u5907\u4efd\uff1a\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u5907\u4efd\u548c\u8fd8\u539f\uff0c\u4f46\u76ee\u524d\u5728\u6574\u4e2a\u7fa4\u96c6\u4e0a\u6ca1\u6709\u4e00\u81f4\u7684\u8fd8\u539f\u70b9\u5feb\u7167\u3002\u7fa4\u96c6\u8303\u56f4\u7684\u5907\u4efd\u4e5f\u5728\u5f00\u53d1\u4e2d\u3002\n\u538b\u7f29\uff1a\u5f53\u524d\u5fc5\u987b\u4ee5\u5757\u4e3a\u5355\u4f4d\u6267\u884c\u538b\u7f29\u3002\u5c06\u6765\uff0c\u8bbf\u95ee\u8282\u70b9\u4e0a\u7684\u538b\u7f29\u7b56\u7565\uff0c\u7136\u540e\u4f20\u64ad\u5230\u6bcf\u4e2a\u6570\u636e\u8282\u70b9\u5c06\u6210\u4e3a\u53ef\u80fd\u3002\n\u4e00\u4e9b\u529f\u80fd\uff0c\u5982\u8fde\u7eed\u805a\u5408\u548cTIME_BUCK_GAPFILL\uff0c\u76ee\u524d\u4e0d\u9002\u7528\u4e8e\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u3002\u8fd9\u4e9b\u4e5f\u5728\u5f00\u53d1\u4e2d\u3002\n\u8bf7\u67e5\u770b\u4e0b\u9762\u7684\u8bb2\u89e3\u89c6\u9891\uff0c\u4e86\u89e3\u5206\u5e03\u5f0f\u8d85\u7ea7\u8868\u683c\u7684\u5de5\u4f5c\u539f\u7406\u3001\u4f55\u65f6\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5b83\u4eec\u3001\u6700\u4f73\u5b9e\u8df5\u7b49\u8be6\u7ec6\u4fe1\u606f\u3002\n\u66f4\u65b0\u3001\u66f4\u5bbd\u677e\u7684\u8bb8\u53ef\uff1a\u4f7f\u6211\u4eec\u6240\u6709\u7684\u4f01\u4e1a\u529f\u80fd\u90fd\u662f\u514d\u8d39\u7684\uff0c\u5e76\u5411\u7528\u6237\u6388\u4e88\u66f4\u591a\u6743\u9650\u3002\n\u5bf9\u8fde\u7eed\u805a\u5408\u7684\u5b9e\u8d28\u6027\u6539\u8fdb\uff1a\u6539\u8fdbAPI\u5e76\u8ba9\u7528\u6237\u66f4\u597d\u5730\u63a7\u5236\u6d41\u7a0b\u3002\n\u7528\u6237\u81ea\u5b9a\u4e49\u64cd\u4f5c(\u65b0\u529f\u80fd\uff01)\uff1a\u7528\u6237\u73b0\u5728\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u4e2d\u5b9a\u4e49\u81ea\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e76\u4f7f\u7528\u6211\u4eec\u7684\u4f5c\u4e1a\u8c03\u5ea6\u7cfb\u7edf\u5bf9\u5176\u8fdb\u884c\u8c03\u5ea6\u3002\nTimscaleDB 2.0\u5f15\u5165\u4e86Timescale\u8bb8\u53ef\u8bc1\u7684\u66f4\u65b0\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6e90\u4ee3\u7801\u53ef\u7528\u8bb8\u53ef\u8bc1\uff0c\u7528\u4e8e\u7ba1\u7406\u6211\u4eec\u7684\u5927\u591a\u6570\u9ad8\u7ea7\u529f\u80fd\uff0c\u5305\u62ec\u672c\u673a\u538b\u7f29\u3001\u591a\u8282\u70b9\u3001\u8fde\u7eed\u805a\u5408\u7b49\u3002\n\u6b64\u66f4\u65b0\u4f7f\u6211\u4eec\u6240\u6709\u7684\u4f01\u4e1a\u529f\u80fd\u90fd\u662f\u514d\u8d39\u7684\uff0c\u5e76\u4e3a\u7528\u6237\u63d0\u4f9b\u4e86\u6269\u5c55\u7684\u6743\u9650\uff0c\u52a0\u5f3a\u4e86\u6211\u4eec\u5bf9\u793e\u533a\u7684\u627f\u8bfa\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u66f4\u65b0\u589e\u52a0\u4e86\u201c\u7ef4\u4fee\u6743\u201d\u3001\u201c\u6539\u8fdb\u6743\u201d\uff0c\u5e76\u5b8c\u5168\u53d6\u6d88\u4e86\u4ed8\u8d39\u4f01\u4e1a\u5c42\u548c\u4f7f\u7528\u9650\u5236(\u4ece\u800c\u786e\u5b9a\u6211\u4eec\u6240\u6709\u7684\u8f6f\u4ef6\u90fd\u5c06\u662f\u514d\u8d39\u7684)\u3002(\u66f4\u591a\u4fe1\u606f\u8bf7\u53c2\u89c1\u672c\u516c\u544a\u3002)\u3002\n\u8fde\u7eed\u805a\u5408\u662f\u4e00\u9879\u73b0\u6709\u529f\u80fd(1.5\u5e74\u524d\u5728TimscaleDB 1.3\u4e2d\u5f15\u5165)\uff0c\u5b83\u53ef\u4ee5\u5728\u540e\u53f0\u81ea\u52a8\u8ba1\u7b97\u67e5\u8be2\u7ed3\u679c\u5e76\u5c06\u7ed3\u679c\u5177\u4f53\u5316\uff0c\u4ece\u800c\u5927\u5927\u52a0\u5feb\u67e5\u8be2\u901f\u5ea6\u3002\u5b83\u4eec\u4e0ePostgreSQL\u5b9e\u4f53\u5316\u89c6\u56fe\u6709\u70b9\u7c7b\u4f3c\uff0c\u4f46\u4e0e\u5b9e\u4f53\u5316\u89c6\u56fe\u4e0d\u540c\u7684\u662f\uff0c\u8fde\u7eed\u805a\u96c6\u4e0d\u9700\u8981\u624b\u52a8\u5237\u65b0\uff1b\u89c6\u56fe\u5728\u6dfb\u52a0\u65b0\u6570\u636e\u6216\u4fee\u6539\u65e7\u6570\u636e\u65f6\u4f1a\u5728\u540e\u53f0\u81ea\u52a8\u5237\u65b0\u3002(\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u8fde\u7eed\u805a\u96c6\u6587\u6863\u3002)\u3002\nTimscaleDB 2.0\u5305\u62ec\u5bf9\u8fde\u7eed\u805a\u96c6\u7684\u5b9e\u8d28\u6027\u6539\u8fdb(\u56e0\u6b64\uff0c\u8fd8\u5305\u62ec\u4e00\u4e9b\u7a81\u7834\u6027\u7684API\u66f4\u6539)\uff1a\n\u66f4\u65b0\u4e86\u5c06\u529f\u80fd\u548c\u7b56\u7565\u5206\u5f00\u7684API\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u66f4\u597d\u5730\u63a7\u5236\u8fde\u7eed\u805a\u5408\u8fc7\u7a0b\u3002\u4f8b\u5982\uff0c\u73b0\u5728\u53ef\u4ee5\u5728\u7ed9\u5b9a\u8303\u56f4\u5185\u624b\u52a8\u5237\u65b0\u8fde\u7eed\u805a\u5408\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u7528\u6237\u8bf7\u6c42\u662f\u7269\u5316\u6700\u65b0\u6570\u636e\uff0c\u4f46\u5c06\u5386\u53f2\u6570\u636e\u7559\u7ed9\u624b\u52a8\u5237\u65b0\u3002\u73b0\u5728\u8fd9\u662f\u53ef\u80fd\u7684\u3002\n\u529f\u80fd\u548c\u7b56\u7565\u7684\u5206\u79bb\u4e5f\u4f7f\u5f97\u6b64\u529f\u80fd\u5728\u5c06\u6765\u66f4\u9002\u5408\u5206\u5e03\u5f0f\u64cd\u4f5c(\u4f8b\u5982\uff0c\u591a\u8282\u70b9)\u3002\u4f8b\u5982\uff0c\u8bbf\u95ee\u8282\u70b9\u4e0a\u7684\u7b56\u7565\u53ef\u4ee5\u89e6\u53d1\u6570\u636e\u8282\u70b9\u4e0a\u7684\u5237\u65b0\u3002\n\u56e0\u6b64\uff0c\u5bf9\u8fde\u7eed\u805a\u96c6(\u7a81\u51fa\u663e\u793a)\u8fdb\u884c\u4e86\u4e00\u4e9b\u7a81\u7834\u6027\u7684API\u66f4\u6539\u3002\n.", "note_en": "After two years of dedicated engineering and user feedback, TimescaleDB 2.0 is finally here, setting a new bar for time-series databases \u2013 and it\u2019s completely free.\n Time-series data is everywhere. Whether you are monitoring your software stack, users, manufacturing line, home, vehicle, stock and cryptocurrency portfolio, air quality in your house, or just your health in the middle of a pandemic, you are collecting time-series data. As software continues to relentlessly penetrate our lives and businesses, time-series data is becoming even more ubiquitous and mission-critical.\n At the same time, relational databases, that old stalwart, are making a comeback as the database of choice for software applications. Despite years of NoSQL hype, the  top 4 databases in use today are all relational databases. In addition, PostgreSQL is the  fastest growing database over the last year (yes, growing faster than even MongoDB).\n What developers need is a new kind of database, purpose-built for time-series workloads while fully embracing the relational model. After all, your time-series data doesn\u2019t exist in a vacuum. Being able to correlate it with technical metadata, business data, and outcomes is critical to understanding how your software, systems, operations, and business changes over time.\n Building that database has always been our mission: to help developers store and analyze time-series data in a fast, reliable, and cost-effective way, so that they can focus on their core application and delight their users.\n Since launching 3.5 years ago, TimescaleDB has proven itself as the leading relational database for time-series data, engineered on top of PostgreSQL, and offered  via free software or as a fully-managed service on AWS, Azure, and GCP.\n In that time, the TimescaleDB community has become the largest developer community for time-series data: tens of millions of downloads; over 500,000 active databases; organizations like AppDynamics, Bosch, Cisco, Comcast, Credit Suisse, DigitalOcean, Dow Chemical, Electronic Arts, Fujitsu, IBM, Microsoft, Rackspace, Schneider Electric, Samsung, Siemens, Uber, Walmart, Warner Music, WebEx, and thousands of others; all in addition to the PostgreSQL community and ecosystem.\n  With this 2.0 release, TimescaleDB is now a distributed, multi-node, petabyte-scale relational database for time-series.  And, we are making everything in this release completely free. This is the culmination of two years of dedicated engineering effort, as well as significant user feedback on several previous betas.\n In fact, users have already been running multi-node TimescaleDB in continuous daily use for many months, including a 22-node cluster by a Fortune 100 tech company ingesting more than a billion rows per day:\n &#34;We continuously ingest telemetry events into TimescaleDB 2.0 to monitor and analyze huge numbers of sessions.  We&#39;ve been running TimescaleDB multi-node across 22 servers for almost the past year, ingesting more than a billion rows of data per day. TimescaleDB&#39;s performance, scale, relational and SQL capabilities, and ability to handle complex data have been a real winner.&#34; \u2013 Rahul, Technical Leader at Fortune 100 tech company\n \u201cNetskope prides itself on speed and scalability, and we rely heavily on time-series data to plan, monitor, and troubleshoot our global network of thousands of servers. With TimescaleDB, we tap into the ubiquitous PostgreSQL ecosystem and use TimescaleDB&#39;s continuous aggregates and other built-in time-series functions for real-time analytics and advanced historical analysis. Now  with multi-node TimescaleDB, we get the horizontal scalability and rapid ingest throughput we need to monitor and manage our systems at scale, now and in the future.\u201d \u2013 Mark S. Reibert, Ph.D., Systems Architect at  Netskope, Inc.\n  Updated, more permissive licensing: making all of our enterprise features free and granting more rights to users.\n Substantial improvements to Continuous Aggregates: improving APIs and giving users greater control over the process.\n User-Defined Actions (new feature!): users can now define custom behaviors inside the database and schedule them using our job scheduling system.\n The TimescaleDB 2.0 Release Candidate is available immediately for self-managed software installations, with General Availability expected in late 2020. TimescaleDB 2.0 will be available on our hosted time-series services at that time. If you\u2019re already using TimescaleDB, we\u2019ve created detailed documentation to simplify and speed up your migration.\n  We also encourage you to  join our 5,000+ member Slack community for any questions, to learn more, and to meet like-minded developers \u2013 we\u2019re active in all channels and here to help.\n (While Ajay and Mike are listed as authors of this post, full credit and a big round of applause goes to members of the Timescale database team for their hours, weeks, and months of dedication and commitment to shipping high quality code:   Erik Nordstr\u00f6m ,   Gayathri Ayyappan ,   Ruslan Fomkin ,   Mats Kindahl,    Sven Klemm ,   Brian Rowe , and   Dmitry Simonenko .)\n We\u2019d like to give a massive thank you to all of our beta testers; from reporting issues to sharing feedback and suggesting features, you all played a big role in making TimescaleDB 2.0 the best possible experience for developers.\n To learn more about TimescaleDB 2.0, time-series data, and why we believe relational databases are the past and future of software development, please read on.\n  For about 30 years, from the mid-1970s to the mid-2000s, if you were developing software, you used a relational database. From System R ( 1974) to Oracle (1979), SQL Server (1989), and later open-source options like MySQL (1995) and PostgreSQL (1996), relational databases were the standard for any new application.\n About 15 years ago, this all changed. Non-relational databases, sometimes also called \u201cNoSQL\u201d databases, became fashionable. A lot of this usage was legitimately necessary. New Internet giants built new systems to handle data volumes that were previously unfathomable, e.g., Google with MapReduce ( 2004) and Bigtable ( 2006); Amazon with Dynamo ( 2007). But a lot of NoSQL adoption was a knee-jerk reaction, along the lines of, \u201c relational databases don\u2019t scale, so I need a NoSQL database.\u201d\n Yet most companies are not Google or Amazon. And it turns out the ability to store data in a way that preserves the relationships in your dataset is valuable. After decades of usage in production, most relational databases are battle-hardened and typically more reliable than their NoSQL cousins. SQL has also re-emerged as the  universal language for data analysis, and is the  third most widely used language today (after JavaScript and HTML/CSS).\n Today, the  top 4 databases in use are still all relational databases. In particular, PostgreSQL is the  fastest growing database over the last year (yes, growing faster than even MongoDB). Some of this is from developers switching back; some from developers who never left relational databases. So don\u2019t call it a comeback - relational databases have been here for years (h/t  James Todd Smith).\n Most importantly, relational databases can, in fact, scale. We see this in the more recent wave of \u201cNewSQL\u201d databases. Google again led the way almost a decade ago, with a geo-replicated relational database announced in their first Spanner paper  (2012) (whose authors include the original MapReduce authors), followed by other pioneers like CockroachDB ( 2014) and Yugabyte ( 2016). And with TimescaleDB ( 2017), we have built a relational database that scales for time-series data.\n  Simply put, time-series is the measurement of something across time. But, to dig a little deeper,  time-series data is the measurement of how something changes.\n  If I send you $10, then a traditional bank database would atomically debit my account and credit your account. Then, if you send me $10, the same process happens in reverse.\n At the end of this process, our bank balances would look the same, so the bank might think, \u201cOh, nothing happened.\u201d And that\u2019s what a traditional database would show you.\n But, with a time-series database, the bank could see, \u201cHey, these two people keep sending each other $10 - maybe they\u2019re friends, maybe they\u2019re roommates, maybe there\u2019s something else going on.\u201d That level of granularity,  the measurement of how something changes, is what time-series enables.\n In other words, time-series datasets track changes to the overall system as INSERTs, not UPDATEs, to capture more information of what is happening.\n Time-series used to be niche, isolated to industries like finance, process manufacturing (e.g., oil and gas, chemicals, plastics), or power and utilities. But in the last few years, time-series workloads have exploded (the  fastest growing category in the past 24 months). This is partly due to the growth in IT monitoring and IoT, but there are also many other new sources of time-series data: cryptocurrencies, gaming, machine learning, and more.\n What is happening is that everyone wants to make better data-driven decisions faster, which means collecting data at the highest fidelity possible.  Time-series is the highest fidelity of data you can capture, because it tells you exactly how things are changing over time. While traditional datasets give you static snapshots, time-series data provides the dynamic movie of what\u2019s happening across your system: e.g., your software, your physical power plant, your game, your customers inside your application.\n Time-series is no longer some niche workload. It\u2019s everywhere. In fact, all data is time-series data - if you are able to store it at that fidelity. Of course, that\u2019s the problem with collecting time-series data: it\u2019s relentless. By performing all these inserts, as opposed to updates, you end up with a lot more data, at higher volumes and velocities than ever before. You quickly get to tables in the billions of rows. For a traditional database, this creates challenges around performance and scalability.\n   TimescaleDB is the leading relational database for time-series data. Engineered on top of PostgreSQL, Timescale is available  via free software or as a fully-managed service on AWS, Azure, and GCP.\n TimescaleDB is purpose-built for time-series workloads, so that you can get orders of magnitude better performance at a fraction of the cost, along with a much better developer experience. This means massive scale (100s billions of rows and millions of inserts per second on a single server),  94%+ native compression, 10-100x faster queries than  PostgreSQL,  InfluxDB,  Cassandra, and  MongoDB \u2013 all while maintaining the reliability, ease-of-use, SQL interface, and overall goodness of PostgreSQL.\n Today, there are several options for storing time-series data. However, most are non-relational systems that are essentially glorified metric stores, focused on storing numerical data and not the broad spectrum of  data types (nor the rich representation of relationships between datasets) that time-series workloads need.\n In April 2017, we launched TimescaleDB into this world full of non-relational metric stores as the  first time-series database that supported full SQL. Since then, many others have copied our SQL approach to time-series (including some that are very suspiciously named, *cough*  Amazon Timestream *cough*), but no one has been able to replicate the true relational foundation and community of TimescaleDB.\n As a result, in just 3.5 years, TimescaleDB has come a long way, now with tens of millions of downloads and over 500,000 active databases. The TimescaleDB developer community includes organizations like AppDynamics, Bosch, Cisco, Comcast, DigitalOcean, Dow Chemical, Electronic Arts, Fujitsu, IBM, Microsoft, Rackspace, Schneider Electric, Samsung, Siemens, Uber, Walmart, Warner Music, WebEx, and thousands of others.\n In addition to this dedicated community, we also benefit from the vast PostgreSQL community and ecosystem.  Altogether, the TimescaleDB community is the largest developer community for time-series data.\n  Ever since we launched TimescaleDB, we\u2019ve met skepticism. After all, building a time-series database on PostgreSQL is a non-obvious, somewhat heretical decision. Yet with each release, we continue to disprove our haters and delight our users. Because, as it turns out, building a scalable relational database for time-series isn\u2019t impossible \u2013 it\u2019s just hard. But, with our talented team and passionate users, we\u2019re doing it.\n Myth 1: A relational database can\u2019t scale as well as a non-relational database\n Fact: We outperform non-relational (and other relational) databases for time-series data.  Versus Cassandra, 10x higher inserts, 1000x faster queries.  Versus Mongo, 20% higher inserts, 1400x faster queries.  Versus InfluxDB, higher inserts, faster queries, and better reliability. (Unlike all of these options, we also support full SQL, which allows users to run complex analysis on their data using a programming language and the tools they already know.)\n Myth 2: Relational databases take up too much disk space (or, row-oriented databases can\u2019t compress as well as columnar databases)\n Fact: It is possible to build columnar compression in a row-oriented database,  which is what we have done. TimescaleDB employs several  best-in-class compression algorithms, including delta-delta, Gorilla, and Simple-8b RLE, allowing us to achieve 94%+ native compression.\n  Fact: Every database, relational or non-relational, uses a schema to store data. The only difference is whether you have the ability to modify that schema and optimize it for your use. However, having a schema automatically generated for you is useful. We are already exploring automatic schemas: e.g., see  Promscale, our new analytical platform for Prometheus built on TimescaleDB, which stores data in a dynamically auto-generated schema highly optimized for metrics. More to come.\n  Fact: NewSQL databases (mentioned above) are disproving this myth for transactional workloads. And today, we are disproving this myth for time-series workloads, with TimescaleDB 2.0.\n  As mentioned above, customers have already been running multi-node TimescaleDB in continuous daily use for many months, including a 22-server cluster by a Fortune 100 tech company ingesting more than a billion rows per day.\n   A regular   hypertable, one of our original innovations, is a virtual table in TimescaleDB that automatically partitions data into many sub-tables (\u201cchunks\u201d) on a single machine, continuously creating new ones as necessary, yet provides the illusion of a single continuous table across all time.\n A   distributed hypertable is a hypertable that automatically partitions data into chunks  across multiple machines, while still maintaining the illusion (and user-experience) of a single continuous table across all time.\n The architecture consists of an access node (AN), which stores metadata for the distributed hypertable and performs query planning across the cluster, and a set of data nodes (DN), which store subsets of the distributed hypertable dataset and execute queries locally. \u00a0TimescaleDB remains a single piece of software for operational simplicity; these roles as described are established by executing database commands within TimescaleDB (e.g., on a server that should act as an access node, you   add_data_node pointing to the hostnames of the data nodes, and then   create_distributed_hypertable.)\n  Currently, you can add any number of data nodes for horizontal scalability, as well as leverage existing Postgres physical replication on data nodes for fault tolerance (we are also working on more native replication for future releases; see below).\n The access node can also be physically replicated for high availability, and future releases will focus on further scaling out the read and write paths for TimescaleDB multi-node.\n  As a result, while a traditional hypertable scales to 1-2 million metrics per second and 100 terabytes of data, a distributed hypertable scales to ingest 10+ million metrics per second and store petabytes of data:\n  Distributed hypertables also take advantage of query parallelization, employing full/partial aggregates and push-downs, to achieve much faster queries:\n   We are already hard at work improving upon this initial release of  distributed hypertables with the next series of features:\n Replication: Currently every node needs its own replication (using primary/backup physical replication). Cluster-wide replication across data nodes, built natively for TimescaleDB, is in development.\n Rebalancing: \u00a0Currently when new data nodes are elastically added to an existing distributed hypertables, new chunks are created across the available nodes, and queries are  routed accordingly to be repartitioning-aware. \u00a0But related to native replication, existing chunks are not currently rebalanced across nodes, which is also in development.\n Backup: Each node can be backed up and restored, but there is currently no consistent restore-point snapshot across the whole cluster. Cluster-wide backup is also in development.\n Compression: Compression currently must be performed on a per-chunk basis. In the future, compression policies on the access node, which then propagate to each data node, will be possible.\n Some features, such as continuous aggregates and  time_bucket_gapfill, do not currently work on distributed hypertables. Those are also in development.\n Check out the below explainer video for a breakdown of how distributed hypertables work, when and why you&#39;d use them, best practices, and more.\n    Updated, more permissive licensing: making all of our enterprise features free and granting more rights to users.\n Substantial improvements to Continuous Aggregates:   improving APIs and giving users greater control over the process.\n User-Defined Actions (new feature!): users can now define custom behaviors inside the database and schedule them using our job scheduling system.\n  TimescaleDB 2.0 introduces an update to the Timescale License, our source-available license that governs most of our advanced capabilities, including native compression, multi-node, continuous aggregations, and more.\n This update makes all of our enterprise features free, and provides expanded rights to users, reinforcing our commitment to our community. Notably, this update adds the \u201cright-to-repair\u201d, the \u201cright-to-improve\u201d, and eliminates the paid enterprise tier and usage limits altogether (thus establishing that all of our software will be available for free). ( More in this announcement.)\n  Continuous Aggregates are an existing capability ( introduced 1.5 years ago with TimescaleDB 1.3) that automatically calculates the results of a query in the background and materializes the results, leading to vastly faster query times. They are somewhat similar to PostgreSQL materialized views, but unlike a materialized view, Continuous Aggregates do not need to be refreshed manually; views are automatically refreshed in the background as new data is added, or old data is modified. ( See our Continuous Aggregates documentation for more details.)\n TimescaleDB 2.0 includes substantial improvements (and, as a result, some breaking API changes) to Continuous Aggregates:\n Updated APIs that separate function and policies, giving users greater control of the Continuous Aggregation process. For example, a Continuous Aggregate can now be manually refreshed over a given range. One common user request has been to materialize recent data but leave historical data to manual refreshes. Now that is possible.\n The separation of function and policies also makes this feature more amenable to distributed operation in the future (e.g., multinode). For instance, a policy on an Access Node can trigger refreshes on Data Nodes.\n  As a result, there are some breaking API changes to Continuous Aggregates ( highlighted\n......", "posttime": "2020-10-30 00:38:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,\u73b0\u5728,distributed,\u6570\u636e", "title": "TimscaleDB 2.0\u53d1\u5e03\uff0c\u73b0\u5728\u662f\u5206\u5e03\u5f0f\u591a\u8282\u70b9", "title_en": "TimescaleDB 2.0 released, now distributed multi-node", "transed": 1, "url": "https://blog.timescale.com/blog/timescaledb-2-0-a-multi-node-petabyte-scale-completely-free-relational-database-for-time-series/", "via": "", "real_tags": ["\u53d1\u5e03", "\u73b0\u5728", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1032054, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "SCI-Hub.tf/10.1038/s41560020579-8", "note_en": "sci-hub.tf/10.1038/s41560-020-0579-8", "posttime": "2020-10-30 00:38:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u80fd\u6e90,inequality,sci", "title": "\u6536\u5165\u7fa4\u4f53\u4e4b\u95f4\u56fd\u9645\u80fd\u6e90\u8db3\u8ff9\u7684\u5de8\u5927\u4e0d\u5e73\u7b49", "title_en": "Large inequality in international energy footprints between income groups", "transed": 1, "url": "https://sci-hub.tf/10.1038/s41560-020-0579-8", "via": "", "real_tags": ["\u80fd\u6e90", "sci"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1032053, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u56de\u5230\u7f16\u8bd1Lisp\u7cfb\u5217\u3002\u4e0a\u6b21\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u667a\u80fd\u6307\u4ee4\u7f16\u7801\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e9b\u77e5\u8bc6\u6765\u7f16\u8bd1\u8fc7\u7a0b\u8c03\u7528\u3002\nLisp\u4e2d\u5e38\u7528\u7684\u51fd\u6570\u8868\u8fbe\u5f0f\u662flambda--\u4e00\u4e2a\u53ef\u4ee5\u63a5\u53d7\u53c2\u6570\u548c\u5173\u95ed\u53d8\u91cf\u7684\u533f\u540d\u51fd\u6570\u3002\u8fc7\u7a0b\u8c03\u7528\u4e0d\u662f\u8fd9\u6837\u7684\u3002\u5b83\u4eec\u662f\u66f4\u7b80\u5355\u7684\u6784\u9020\uff0c\u53ea\u63a5\u53d7\u53c2\u6570\u5e76\u8fd4\u56de\u503c\u3002\n\u6211\u4eec\u9996\u5148\u6dfb\u52a0\u8fc7\u7a0b\u8c03\u7528\u4f5c\u4e3a\u5b8c\u5168\u95ed\u5305\u652f\u6301\u7684\u57ab\u811a\u77f3\uff0c\u8fd9\u5c06\u5e2e\u52a9\u6211\u4eec\u5efa\u7acb\u67d0\u79cd\u5185\u90e8\u8c03\u7528\u7ea6\u5b9a\uff0c\u5e76\u5728\u4e8b\u60c5\u53d8\u5f97\u592a\u590d\u6742\u4e4b\u524d\u5f04\u6e05\u695a\u5806\u6808\u64cd\u4f5c\u3002\n(\u6807\u7b7e((add(code(X Y)(+x y)(sub(code(X Y)(-x y)(labelcall sub 4(Labelcall Add 12)\uff1b=&gt\uff1b1\u3002\n(Label((\u9636\u4e58(code(X)(if(&lt\uff1bx2)1(*x(labelcall\u9636\u4e58(-x 1)(labelcall\u9636\u4e585))\uff1b=&gt\uff1b120\u3002\n\u8fd9\u4e9b\u4ee3\u7801\u7247\u6bb5\u76f8\u5f53\u5e73\u6de1\u65e0\u5947\uff0c\u4f46\u5b83\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u6dfb\u52a0\u7684\u4e00\u4e9b\u65b0\u529f\u80fd\uff0c\u4f8b\u5982\uff1a\nGhuloum\u6ca1\u6709\u89e3\u91ca\u4ed6\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\uff0c\u4f46\u6211\u60f3\uff0c\u4e4b\u6240\u4ee5\u9009\u62e9\u6807\u7b7eForm\u800c\u4e0d\u662f\u5141\u8bb8\u591a\u4e2a\u72ec\u7acb\u7684\u9876\u7ea7\u7ed1\u5b9a\uff0c\u662f\u56e0\u4e3a\u5b83\u66f4\u5bb9\u6613\u89e3\u6790\u548c\u904d\u5386\u3002\n\u4e3a\u4e86\u7f16\u8bd1\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c06\u904d\u5386\u6807\u7b7e\u4e2d\u7684\u6bcf\u4e2a\u7ed1\u5b9a\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u7ed1\u5b9a\uff0c\u6211\u4eec\u5c06\u4e3a\u6bcf\u4e2a\u4ee3\u7801\u5bf9\u8c61\u751f\u6210\u4ee3\u7801\u3002\n\u7f16\u8bd1\u4ee3\u7801\u5bf9\u8c61\u9700\u8981\u4e3a\u5b83\u4eec\u7684\u53c2\u6570\u521b\u5efa\u4e00\u4e2a\u73af\u5883\u3002\u6211\u4eec\u7a0d\u540e\u5c06\u5efa\u7acb\u4e00\u4e2a\u8c03\u7528\u7ea6\u5b9a\uff0c\u4ee5\u4fbf\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u53c2\u6570\u3002\n\u7136\u540e\uff0c\u4e00\u65e6\u6211\u4eec\u53d1\u51fa\u4e86\u7ed1\u5b9a\u7684\u6240\u6709\u4ee3\u7801\uff0c\u6211\u4eec\u5c06\u7f16\u8bd1\u6b63\u6587\u3002\u6b63\u6587\u53ef\u4ee5(\u4f46\u4e0d\u662f\u5fc5\u987b)\u5305\u542blabelcall\u8868\u8fbe\u5f0f\u3002\n\u4e3a\u4e86\u7f16\u8bd1labelcall\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u5c06\u7f16\u8bd1\u63d0\u4f9b\u7684\u6240\u6709\u53c2\u6570\uff0c\u5c06\u5b83\u4eec\u4fdd\u5b58\u5728\u5806\u6808\u4e0a\u7684\u8fde\u7eed\u4f4d\u7f6e\uff0c\u7136\u540e\u53d1\u51faCALL\u6307\u4ee4\u3002\n\u5f53\u6240\u6709\u8fd9\u4e9b\u90e8\u5206\u653e\u5728\u4e00\u8d77\u65f6\uff0c\u5f97\u5230\u7684\u673a\u5668\u4ee3\u7801\u5c06\u5982\u4e0b\u6240\u793a\uff1a\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u6240\u6709\u4ee3\u7801\u5bf9\u8c61\u90fd\u5c06\u6309\u987a\u5e8f\u7f16\u8bd1\uff0c\u7d27\u968f\u5176\u540e\u7684\u662fLabels\u7a97\u4f53\u7684\u6b63\u6587\u3002\n\u56e0\u4e3a\u6211\u8fd8\u6ca1\u6709\u60f3\u51fa\u5982\u4f55\u5728\u751f\u6210\u4ee3\u7801\u7684\u5f00\u5934\u4ee5\u5916\u7684\u5176\u4ed6\u5730\u65b9\u5f00\u59cb\u6267\u884c\uff0c\u800c\u4e14\u6211\u6ca1\u6709\u5c06\u751f\u6210\u7684\u4ee3\u7801\u5b58\u50a8\u5728\u4efb\u4f55\u4e2d\u95f4\u7f13\u51b2\u533a\u4e2d\uff0c\u5e76\u4e14\u56e0\u4e3a\u6211\u4eec\u4e8b\u5148\u4e0d\u77e5\u9053\u4efb\u4f55\u4ee3\u7801\u7684\u5927\u5c0f\uff0c\u6240\u4ee5\u6211\u505a\u4e86\u8fd9\u4e2a\u65f6\u9ae6\u7684\u4e8b\u60c5\uff0c\u6211\u5411\u4e3b\u4f53\u4ee3\u7801\u53d1\u51fa\u4e00\u4e2aJMP\u3002\n\u6211\u4eec\u4e0d\u4f1a\u4f7f\u7528System V AMD64ABI\u3002\u8be5\u8c03\u7528\u7ea6\u5b9a\u8981\u6c42\u53c2\u6570\u9996\u5148\u5728\u67d0\u4e9b\u5bc4\u5b58\u5668\u4e2d\u4f20\u9012\uff0c\u7136\u540e\u5728\u5806\u6808\u4e0a\u4f20\u9012\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u5728\u5806\u6808\u4e0a\u4f20\u9012\u6240\u6709\u53c2\u6570\u3002\n\u8fd9\u4f7f\u6211\u4eec\u7684\u4ee3\u7801\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u4f46\u8fd9\u4e5f\u610f\u5473\u7740\u5728\u4ee5\u540e\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u6dfb\u52a0\u4e0d\u540c\u7c7b\u578b\u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u8c03\u7528\u5916\u90e8\u51fd\u6570(\u5982printf\u3001\u6216exit\u7b49)\u3002\u8fd9\u4e9b\u51fd\u6570\u671f\u671b\u5b83\u4eec\u7684\u53c2\u6570\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u6211\u4eec\u4ee5\u540e\u518d\u62c5\u5fc3\u8fd9\u4ef6\u4e8b\u3002\n\u5982\u679c\u6211\u4eec\u501f\u7528\u5e76\u6539\u7f16Ghuloum\u6559\u7a0b\u4e2d\u7684\u4f18\u79c0\u56fe\u8868\uff0c\u8fd9\u610f\u5473\u7740\u5c31\u5728\u6211\u4eec\u8fdb\u884c\u8fc7\u7a0b\u8c03\u7528\u4e4b\u524d\uff0c\u6211\u4eec\u7684\u5806\u6808\u5c06\u5982\u4e0b\u6240\u793a\uff1a\n\u4f4e\u5730\u5740|...|+-++|...|+-++-&gt\uff1b|arg3|RSP-56\u8f93\u51fa|+-+\u53c2\u6570||arg2|RSP-48|+\u3002|arg1|rsp-40+-++||rsp-32+-&gt\uff1b|local3|rsp-24|+-+\u672c\u5730||local2|rsp-16|+-++-&gt\uff1b|local1|RSP-8+-+base|\u8fd4\u56de\u70b9|RSP\u9ad8\u5730\u5740\u3002\n\u60a8\u53ef\u4ee5\u5728[RSP]\u5904\u770b\u5230\u7b2c\u4e00\u4e2a\u8fd4\u56de\u70b9\u3002\u8fd9\u662f\u5f53\u524d\u51fd\u6570\u7684\u8c03\u7528\u65b9\u653e\u7f6e\u7684\u8fd4\u56de\u70b9\u3002\n\u4e0a\u9762\u662f\u6211\u4eec\u7528let\u58f0\u660e\u7684\u4efb\u4f55\u5c40\u90e8\u53d8\u91cf\uff0c\u6216\u8005\u53ef\u80fd\u662f\u6765\u81ea\u67d0\u4e9b\u8ba1\u7b97\u7684\u4e2d\u95f4\u503c\u3002\n\u5176\u4e0a\u65b9\u662f\u4e3a\u7b2c\u4e8c\u4e2a\u8fd4\u56de\u70b9\u9884\u7559\u7684\u7a7a\u767d\u533a\u57df\u3002\u8fd9\u662f\u5c06\u8981\u8c03\u7528\u7684\u51fd\u6570\u7684\u8fd4\u56de\u70b9\u3002CALL\u6307\u4ee4\u5c06\u5728\u8bc4\u4f30\u6240\u6709\u53c2\u6570\u540e\u586b\u5199\u3002\n\u8fd4\u56de\u70b9\u4e0a\u65b9\u662f\u6240\u6709\u4f20\u51fa\u53c2\u6570\u3002\u5bf9\u4e8e\u88ab\u8c03\u7528\u7684\u8fc7\u7a0b\uff0c\u5b83\u4eec\u5c06\u663e\u793a\u4e3a\u672c\u5730\u4eba\u3002\nCALL\u6307\u4ee4\u9012\u51cfRSP\uff0c\u7136\u540e\u5199\u5165[RSP]\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u53ea\u662f\u53d1\u51fa\u4e00\u4e2a\u8c03\u7528\uff0c\u7b2c\u4e00\u4e2a\u672c\u5730\u4ee3\u7801\u5c06\u88ab\u8986\u76d6\u3002\u4e0d\u597d\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5806\u6808\u7684\u5e03\u5c40\u65b9\u5f0f\u5c06\u610f\u5473\u7740\u672c\u5730\u5c06\u770b\u8d77\u6765\u50cf\u53c2\u6570\u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u9996\u5148\u8c03\u6574RSP\u4ee5\u6307\u5411\u6700\u540e\u4e00\u4e2a\u672c\u5730\u3002\u8fd9\u6837\uff0c\u51cf\u91cf\u4f1a\u5c06\u5176\u79fb\u5230\u672c\u5730\u5730\u5740\u4e4b\u4e0b\uff0c\u8fd4\u56de\u5730\u5740\u5c06\u4f4d\u4e8e\u672c\u5730\u5730\u5740\u548c\u53c2\u6570\u4e4b\u95f4\u3002\n\u5728CALL\u6307\u4ee4\u4e4b\u540e\uff0c\u5806\u6808\u770b\u8d77\u6765\u4f1a\u6709\u6240\u4e0d\u540c\u3002\u9664\u4e86RSP\uff0c\u5b9e\u9645\u4e0a\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\u5bf9RSP\u7684\u6b64\u66f4\u6539\u610f\u5473\u7740\u88ab\u8c03\u7528\u65b9\u5177\u6709\u4e0d\u540c\u7684\u89c6\u56fe\uff1a\n\u4f4e\u5730\u5740|...|+-++|...|+-|arg3|RSP-24\u4f4d\u4e8e|+-+args||arg2|RSP-16|+\u3002|arg1|RSP-8+-+BASE|\u8fd4\u56de\u70b9|RSP+-+|~|+-~|+-~|\u9ad8\u4f4d\u5730\u5740\u3002\n\u8fd4\u56de\u70b9\u4e0b\u65b9\u7a7a\u767d\u5904\u7684\u5f69\u8272\u7a7a\u767d\u8868\u793a\u5806\u6808\u4e0a\u7684\u503c\u662f\u201c\u9690\u85cf\u201d\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u9ad8\u4e8e(\u9ad8\u4e8e)[RSP]\u7684\u5730\u5740\u3002\u88ab\u8c03\u7528\u7684\u51fd\u6570\u5c06\u65e0\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u503c\u3002\n\u5982\u679c\u88ab\u8c03\u7528\u7684\u51fd\u6570\u60f3\u8981\u4f7f\u7528\u5176\u53c2\u6570\u4e4b\u4e00\uff0c\u5b83\u53ef\u4ee5\u5c06\u5176\u4ece\u5176\u6307\u5b9a\u4f4d\u7f6e\u79fb\u51fa\u5806\u6808\u3002\n\u8fd9\u4e2a\u8c03\u7528\u60ef\u4f8b\u7684\u4e00\u4e2a\u4e0d\u5e78\u540e\u679c\u662fValgrind\u4e0d\u7406\u89e3\u5b83\u3002Valgrind\u65e0\u6cd5\u7406\u89e3\u8c03\u7528\u65b9\u5df2\u4e13\u95e8\u5c06\u6570\u636e\u653e\u5728\u5806\u6808\u4e0a\u4ee5\u4f9b\u88ab\u8c03\u7528\u65b9\u8bfb\u53d6\uff0c\u5e76\u8ba4\u4e3a\u8fd9\u662f\u672a\u521d\u59cb\u5316\u503c\u7684\u79fb\u52a8/\u8df3\u8f6c\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u5728\u8fd9\u4e9b\u6807\u7b7e\u8c03\u7528\u6d4b\u8bd5\u4e2d\u4f1a\u9047\u5230\u4e00\u4e9b\u9519\u8bef\u3002\n\u6700\u540e\uff0c\u5f53\u51fd\u6570\u8fd4\u56de\u65f6\uff0cret\u6307\u4ee4\u5c06\u4ece\u5806\u6808\u4e2d\u5f39\u51fa\u8fd4\u56de\u6307\u9488\u5e76\u8df3\u8f6c\u5230\u5806\u6808\u3002\u8fd9\u5c06\u628a\u6211\u4eec\u5e26\u56de\u5230\u4e4b\u524d\u7684\u547c\u53eb\u6846\u67b6\u3002\n\u5c31\u662f\u8fd9\u6837\uff01\u6211\u8fd8\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u597d\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u8ba9\u6211\u5728\u7a0b\u5e8f\u6267\u884c\u65f6\u53ef\u89c6\u5316\u5806\u6808\u3002Gdb\u53ef\u80fd\u6709\u4e00\u4e2a\u9690\u85cf\u5728\u67d0\u4e2a\u6ca1\u6709\u6587\u6863\u7684\u5730\u65b9\u7684\u6a21\u5f0f\uff0c\u5b83\u5c31\u662f\u8fd9\u6837\u505a\u7684\u3002\u5361\u7279\u6709\u70b9\u559c\u6b22\uff0c\u4f46\u6211\u771f\u7684\u4e0d\u592a\u660e\u767d\u5b83\u662f\u600e\u4e48\u6311\u5254\u7684\u3002\u4e5f\u8bb8\u6709\u4e00\u5929\u5361\u5730\u514b\u7684x86-64Mu\u53c9\u4f1a\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u4e3a\u4e86\u4f7f\u8fd9\u7ec4\u66f4\u6539\u6709\u610f\u4e49\uff0c\u6211\u5c06\u81ea\u4e0a\u800c\u4e0b\u5730\u9010\u4e00\u89e3\u91ca\u6240\u6709\u90e8\u5206\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u5c06\u67e5\u770b\u65b0\u7684\u548c\u6539\u8fdb\u7684COMPILE_ENTRY\uff0c\u5b83\u5df2\u7ecf\u8fdb\u884c\u4e86\u66f4\u65b0\u4ee5\u5904\u7406\u6807\u7b7e\u8868\u5355\u3002\u8fd9\u5c06\u5bf9\u4ee3\u7801\u4f53\u6267\u884c\u5e38\u89c1\u7684Lisp entrypointsetup\u3001\u4e00\u4e9b\u68c0\u67e5\u548c\u524d\u9762\u63d0\u5230\u7684JMP\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u5c06\u5b9e\u9645\u4e86\u89e3\u4e00\u4e0b\u5982\u4f55\u7f16\u8bd1\u6807\u7b7e\u3002\u8fd9\u610f\u5473\u7740\u9010\u4e2a\u68c0\u67e5\u7ed1\u5b9a\u5e76\u7f16\u8bd1\u5b83\u4eec\u7684\u4ee3\u7801\u5bf9\u8c61\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u7f16\u8bd1\u4ee3\u7801\u5bf9\u8c61\u610f\u5473\u7740\u4ec0\u4e48\u3002\u63d0\u793a\uff1a\u5b83\u5f88\u50cfLET\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5728\u7f16\u8bd1Label\u8868\u5355\u7684\u6b63\u6587\u65f6\u5c06\u5b83\u4eec\u5168\u90e8\u6346\u7ed1\u5728\u4e00\u8d77\u3002\n\u8fd9\u6bb5\u4ee3\u7801\u7684\u5927\u90e8\u5206\u90fd\u5728\u68c0\u67e5\u3002\u8fc7\u53bb\u53ea\u7f16\u8bd1\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u73b0\u5728\u9a8c\u8bc1\u4e86\uff0c\u5728\u5c06\u5176\u653e\u5165\u5176\u7ec4\u6210\u90e8\u5206(\u7ed1\u5b9a\u548c\u6b63\u6587)\u4e4b\u524d\uff0c\u6211\u4eec\u4f20\u5165\u7684\u5185\u5bb9\u81f3\u5c11\u6a21\u7cca\u5730\u770b\u8d77\u6765\u50cf\u662f\u683c\u5f0f\u826f\u597d\u7684\u6807\u7b7e\u8868\u5355\u3002\nInt COMPILE_ENTRY(buffer*buf\uff0cASTNode*node){buffer_write_arr(buf\uff0ckEntryPrologue\uff0csizeof kEntryPrologue)\uff1bAssert(AST_IS_Pair(Node)&amp\uff1b&amp\uff1b#34\uff1b\u7a0b\u5e8f\u5fc5\u987b\u6709\u6807\u7b7e)\uff1b//\u5047\u5b9a\u5b83(\u6807\u7b7e...)\u3002ASTNode*labels_sym=AST_Pair_Car(Node)\uff1bAssert(AST_is_Symbol(Labels_Sym)&amp\uff1b&amp\uff1b&34\uff1b\u7a0b\u5e8f\u5fc5\u987b\u6709\u6807\u7b7e&34\uff1b)\uff1bAssert(AST_Symbol_Matches(Labels_sym\uff0c&34\uff1bLabels&34\uff1b)&amp\uff1b&amp\uff1b&34\uff1b\u7a0b\u5e8f\u5fc5\u987b\u6709\u6807\u7b7e&#34\uff1b)\uff1b//\u8df3\u5230\u6b63\u6587\u5355\u8bcdbody_pos=emit_jmp(buf\uff0ckLabelPlaceholder)\uff1bASTNode*args=AST_Pair_Cdr(\u8282\u70b9)\uff1bASTNode*bindings=operand1(Args)\uff1bAssert(AST_IS_Pair(\u7ed1\u5b9a)||AST_is_nil(\u7ed1\u5b9a))\uff1bASTNode*body=operand2(Args)\uff1b_(\u7f16\u8bd1_\u6807\u7b7e(buf\uff0c\u7ed1\u5b9a\uff0cbody\uff0c/*labels=*/null\uff0cbody_pos))\uff1bbuffer_write_arr(buf\uff0ckFunctionEpilogue\uff0csizeof kFunctionEpilogue)\uff1breturn 0\uff1b}\u3002\nCOMPILE_ENTRY\u5206\u6d3e\u7ed9COMPILE_LABEL\u4ee5\u8fed\u4ee3\u6240\u6709\u6807\u7b7e\u3002COMPILE_LABESTS\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5b83\u5728\u5176\u53c2\u6570\u4e2d\u8ddf\u8e2a\u5230\u76ee\u524d\u4e3a\u6b62\u7684\u6240\u6709\u6807\u7b7e\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u4e00\u4e2a\u7a7a\u7684\u6807\u7b7e\u73af\u5883\u5f00\u59cb\u3002\n\u6211\u4eec\u8fd8\u5c06JMP\u7684\u4f4d\u7f6e\u4f20\u9012\u7ed9\u5b83\uff0c\u8fd9\u6837\u5728\u5b83\u7f16\u8bd1\u6b63\u6587\u4e4b\u524d\uff0c\u5b83\u5c31\u53ef\u4ee5\u4fee\u8865\u8df3\u8f6c\u76ee\u6807\u3002\n\u5728COMPILE_LABEL\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u6709\u4e00\u4e2a\u57fa\u672c\u60c5\u51b5\uff1a\u5982\u679c\u6ca1\u6709\u6807\u7b7e\uff0c\u6211\u4eec\u5e94\u8be5\u53ea\u53d1\u51fa\u4e3b\u4f53\u3002\nInt Compile_Labels(Buffer*buf\uff0cASTNode*bindings\uff0cASTNode*Body\uff0cEnv*Labels\uff0cWord Body_pos){if(AST_is_nil(Bindings)){emit_backpatch_imm32(buf\uff0cbody_pos)\uff1b//\u57fa\u672c\u60c5\u51b5\uff1a\u65e0\u7ed1\u5b9a\u3002\u7f16\u8bd1BODY_(COMPILE_EXPR(buf\uff0cbody\uff0c/*STACK_INDEX=*/-kWordSize\uff0c/*varenv=*/null\uff0clabels))\uff1b\u8fd4\u56de0\uff1b}//...}\u3002\n\u6211\u4eec\u8fd8\u5c06\u8df3\u8dc3\u4f4d\u7f6e\u4fee\u8865\u5230\u8981\u53d1\u5c04\u6807\u7b7e\u4e3b\u4f53\u7684\u4f4d\u7f6e\u3002\u5728\u6ca1\u6709\u6807\u7b7e\u7684\u57fa\u672c\u60c5\u51b5\u4e0b\uff0c\u8df3\u8f6c\u6709\u70b9\u6ca1\u7528\uff0c\u56e0\u4e3a\u6ca1\u6709\u8981\u8df3\u8fc7\u7684\u4e2d\u95f4\u4ee3\u7801\uff0c\u4f46\u8fd9\u6ca1\u4ec0\u4e48\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u90fd\u4f1a\u6709\u7ed1\u5b9a\u3002\n\u6211\u4eec\u4f20\u5165\u4e00\u4e2a\u7a7a\u7684varenv\uff0c\u56e0\u4e3a\u6211\u4eec\u4e00\u8def\u4e0a\u6ca1\u6709\u79ef\u7d2f\u4efb\u4f55\u5f53\u5730\u4eba\uff1b\u53ea\u6709\u6807\u7b7e\u3002\u51fa\u4e8e\u540c\u6837\u7684\u539f\u56e0\uff0c\u6211\u4eec\u7ed9\u51fa\u4e86-kWordSize-\u7b2c\u4e00\u4e2a\u69fd\u7684STACK_INDEX\u3002\n\u5982\u679c\u6211\u4eec\u6709\u6807\u7b7e\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u5e94\u8be5\u5904\u7406\u7b2c\u4e00\u4e2a\u6807\u7b7e\uff0c\u5373\uff1a\nInt\u7f16\u8bd1_Labels(Buffer*buf\uff0cASTNode*\u7ed1\u5b9a\uff0cASTNode*Body\uff0cEnv*Labels\uff0cWord Body_pos){//....\u3002Assert(AST_IS_Pair(\u7ed1\u5b9a))\uff1b//\u83b7\u53d6\u4e0b\u4e00\u4e2a\u7ed1\u5b9aASTNode*binding=AST_Pair_CAR(\u7ed1\u5b9a)\uff1bASTNode*name=AST_Pair_CAR(\u7ed1\u5b9a)\uff1bAssert(AST_IS_Symbol(Name))\uff1bASTNode*binding_code=AST_Pair_Car(AST_Pair_Cdr(\u7ed1\u5b9a))\uff1bword function_location=buffer_len(Buf)\uff1b//\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u6307\u4ee4\u6d41\u73af\u5883\u6761\u76ee=env_bind(AST_Symbol_CSTR(Name)\uff0cfunction_location\uff0clabels)\uff1b//\u7f16\u8bd1\u7ed1\u5b9a\u51fd\u6570_(Compile_code(buf\uff0cbinding_code\uff0c&amp\uff1bentry))\uff1b_(Compile_Labels(buf\uff0cAST_Pair_Cdr(Bindings)\uff0cbody\uff0c&amp\uff1bentry\uff0cbody_pos))\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u6211\u4eec\u5728\u7f16\u8bd1\u4ee3\u7801\u5bf9\u8c61\u4e4b\u524d\u662f\u7ed1\u5b9a\u7684\uff0c\u5e76\u4e14\u6211\u4eec\u5728\u7f16\u8bd1\u4e4b\u524d\u4f7f\u4ee3\u7801\u4f4d\u7f6e\u53ef\u7528\uff01\u8fd9\u610f\u5473\u7740\u4ee3\u7801\u5bf9\u8c61\u53ef\u4ee5\u5f15\u7528\u5b83\u4eec\u81ea\u5df1\uff0c\u751a\u81f3\u53ef\u4ee5\u9012\u5f52\u5730\u8c03\u7528\u5b83\u4eec\u81ea\u5df1\u3002\n\u7531\u4e8e\u6211\u4eec\u968f\u540e\u5c06\u7ed1\u5b9a\u4f20\u9012\u5230\u6807\u7b7e\u4ee5\u8fdb\u884c\u9012\u5f52\u8c03\u7528\uff0c\u56e0\u6b64\u6807\u7b7e\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u5728\u5b83\u4eec\u4e4b\u524d\u5b9a\u4e49\u6240\u6709\u6807\u7b7e\u3002\n\u6211\u5c06\u5176\u5206\u6210\u4e24\u4e2a\u51fd\u6570\uff1a\u4e00\u4e2a\u662f\u5206\u79bb\u4ee3\u7801\u5bf9\u8c61\u7684\u5e2e\u52a9\u5668(\u6211\u4e0d\u60f3\u5728\u6807\u7b7e\u4e2d\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u8ba4\u4e3a\u8fd9\u6837\u4f1a\u4f7f\u4e3b\u9898\u53d8\u5f97\u6df7\u4e71)\uff0c\u53e6\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u8d1f\u8d23\u5c06\u53c2\u6570\u653e\u5165\u73af\u5883\u4e2d\u3002\n\u56e0\u6b64COMPILE_CODE\u53ea\u662f\u5c06(code(x y z...)\u3002Body)\u8f6c\u6362\u4e3a\u5f62\u5f0f\u53c2\u6570\u548cBody\u3002\u7531\u4e8eCompile_code_impl\u5c06\u9700\u8981\u9012\u5f52\u5730\u6784\u5efa\u6709\u5173STACK_INDEX\u548cvarenv\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u5bf9\u5176\u8fdb\u884c\u8865\u5145\u3002\nInt\u7f16\u8bd1_code(buffer*buf\uff0cASTNode*code\uff0cEnv*labels){ASSERT(AST_IS_Pair(Code))\uff1bASTNode*code_sym=AST_Pair_Car(Code)\uff1bAssert(AST_IS_Symbol(Code_Sym))\uff1bAssert(AST_Symbol_Matches(code_sym\uff0c&#34\uff1bcode&#34\uff1b))\uff1bASTNode*args=AST_Pair_Cdr(Code)\uff1bASTNode*formals=operand1(Args)\uff1bASTNode*code_body=operand2(Args)\uff1breturn CODE_IMPL(buf\uff0cformals\uff0ccode_body\uff0c/*STACK_INDEX=*/-kWordSize\uff0c/*varenv=*/null\uff0clabels)\uff1b}\u3002\n\u6211\u8bf4\u8fd9\u4f1a\u50cf\u662f\u51fa\u79df\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u4e0eletbody\u4e00\u6837\uff0c\u4ee3\u7801\u5bf9\u8c61\u4e5f\u6709\u201c\u5c40\u90e8\u53c2\u6570\u201d--\u5f62\u5f0f\u53c2\u6570\u3002\u6839\u636e\u6211\u4eec\u7684\u8c03\u7528\u7ea6\u5b9a\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u53c2\u6570\u7684\u540d\u79f0\u7ed1\u5b9a\u5230\u8fde\u7eed\u7684\u5806\u6808\u4f4d\u7f6e\u3002\n\u5728\u57fa\u672c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\uff0c\u6240\u4ee5\u6211\u4eec\u7f16\u8bd1\u6b63\u6587\uff1a\nInt build_code_impl(buffer*buf\uff0cASTNode*formals\uff0cASTNode*body\uff0cword stack_index\uff0cenv*varenv\uff0cenv*labels){if(AST_is_nil(Formals)){_(build_expr(buf\uff0cbody\uff0cstack_index\uff0cvarenv\uff0clabels))\uff1bbuffer_write_arr(buf\uff0ckFunctionEpilogue\uff0csizeof kFunctionEpilogue)\uff1breturn 0\uff1b}//...}\u3002\n\u6211\u4eec\u4e5f\u53d1\u51fa\u8fd9\u4e2a\u51fd\u6570\u7ed3\u8bed\uff0c\u73b0\u5728\u5b83\u5c31\u662fret\u3002\u6211\u53bb\u6389\u4e86PUSH RBP/MOV RBP\uff0cRSP/POP RBP\u821e\u8e48\uff0c\u56e0\u4e3a\u6211\u4eec\u6539\u4e3a\u53ea\u4f7f\u7528RSP\u3002\u6211\u5728\u4e4b\u524d\u7684\u6307\u4ee4\u7f16\u7801\u95f4\u6b47\u5e16\u5b50\u4e2d\u63d0\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\n\u5728\u6211\u4eec\u81f3\u5c11\u6709\u4e00\u4e2a\u5f62\u5f0f\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u540d\u79f0\u7ed1\u5b9a\u5230\u5806\u6808\u4f4d\u7f6e\uff0c\u7136\u540e\u7ee7\u7eed\u6211\u4eec\u7684\u5feb\u4e50\u4e4b\u8def\u3002\nInt CODE_IMPL(Buffer*buf\uff0cASTNode*Forals\uff0cASTNode*Body\uff0cWORD STACK_INDEX\uff0cEnv*varenv\uff0cEnv*Labels){//...\u3002Assert(AST_IS_Pair(Formal))\uff1bASTNode*name=AST_Pair_Car(Formal)\uff1bAssert(AST_IS_Symbol(Name))\uff1bEnv entry=Env_Bind(AST_Symbol_CSTR(Name)\uff0cstack_index\uff0cvarenv)\uff1breturn Compile_code_impl(buf\uff0cAST_air_Cdr(Formals)\uff0cbody\uff0cstack_index-kWordSize\uff0c&amp\uff1bentry\uff0clabels)\uff1b}\u3002\n\u5982\u679c\u6211\u4eec\u4e0d\u80fd\u8c03\u7528\u8fd9\u4e9b\u7a0b\u5e8f\uff0c\u5b83\u4eec\u53c8\u6709\u4ec0\u4e48\u7528\u5462\uff1f\u8ba9\u6211\u4eec\u4e86\u89e3\u4e00\u4e0b\u5982\u4f55\u7f16\u8bd1\u8fc7\u7a0b\u8c03\u7528\u3002\n\u8c03\u7528\u8fc7\u7a0b\u7684\u4ee3\u7801\u5fc5\u987b\u6309\u7167\u88ab\u8c03\u7528\u8fc7\u7a0b\u671f\u671b\u7684\u65b9\u5f0f\u5c06\u53c2\u6570\u548c\u8fd4\u56de\u5730\u5740\u7cbe\u786e\u5730\u653e\u5728\u5806\u6808\u4e0a\u3002\n\u628a\u8fd9\u4efd\u5408\u540c\u505a\u597d\u53ef\u80fd\u4f1a\u5f88\u68d8\u624b\u3002\u6211\u82b1\u4e86\u51e0\u4e2a\u5c0f\u65f6\u8ba9\u5b83\u4e0d\u4f1a\u5760\u6bc1\u3002\u7136\u540e\uff0c\u5373\u4f7f\u5b83\u6ca1\u6709\u5d29\u6e83\uff0c\u5b83\u4e5f\u8fd4\u56de\u4e86\u9519\u8bef\u6570\u636e\u3002\u539f\u6765\u6211\u662f\u4e0d\u5c0f\u5fc3\u91cd\u5199\u4e86\u5bc4\u4fe1\u4eba\u7684\u5730\u5740\uff0c\u800c\u662f\u56de\u5230\u4e86\u4e00\u4e2a\u964c\u751f\u7684\u5730\u65b9\u3002\n\u5236\u4f5c\u8ddf\u8e2aRSP\u548c\u5806\u6808\u66f4\u6539\u7684\u624b\u5de5\u56fe\u8868\u786e\u5b9e\u6709\u52a9\u4e8e\u7406\u89e3\u8c03\u7528\u7ea6\u5b9a\u9519\u8bef\u3002\n\u6211\u4eec\u5c06\u4ece\u5c06\u66f4\u591a\u4ee3\u7801\u8f6c\u50a8\u5230COMPILE_CALL\u5f00\u59cb\u3002\u6b64\u4ee3\u7801\u5c06\u67e5\u627e\u5f62\u5f0f\u4e3a(labelcall name...)\u7684\u5185\u5bb9\u3002\nARG_STACK_INDEX\uff0c\u8fd9\u662f\u5806\u6808\u4e0a\u5efa\u8bae\u4f7f\u7528ARG\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u56e0\u4e3a\u6211\u4eec\u4e3a\u8fd4\u56de\u5730\u5740\u8df3\u8fc7\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u6240\u4ee5\u8fd9\u6bd4\u5f53\u524d(\u53ef\u7528)\u69fd\u7d22\u5f15\u591a\u4e00\u4e2a\u7a7a\u683c\u3002\nRSP_ADJUST\uff0c\u8fd9\u662f\u6211\u4eec\u9700\u8981\u8c03\u6574RSP\u7684\u91cf\u3002\u5982\u679c\u6ca1\u6709\u6765\u81ealet\u7684\u5c40\u90e8\u53d8\u91cf\u6216\u6765\u81ea\u8fc7\u7a0b\u8c03\u7528\u7684\u4f20\u5165\u53c2\u6570\uff0c\u5219\u8be5\u503c\u5c06\u4e3a0\u3002\u52a0\u4e0a\u672c\u5730\u4eba\u548c/\u6216\u4e89\u8bba\uff0c\u8fd9\u5c06\u662f\u90a3\u4e9b\u4eba\u5360\u7528\u7684\u7a7a\u95f4\u603b\u91cf\u3002\nINT COMPILE_CALL(Buffer*buf\uff0cASTNode*Callable\uff0cASTNode*args\uff0cWORD STACK_INDEX\uff0cEnv*varenv\uff0cEnv*Labels){//...\u3002IF(AST_Symbol_Matches(Callable\uff0c&#34\uff1blabelcall&#34\uff1b)){ASTNode*Label=Operand1(Args)\uff1bAssert(AST_is_Symbol(Label))\uff1bASTNode*call_args=AST_Pair_Cdr(Args)\uff1b//\u8df3\u8fc7\u5806\u6808\u4e0a\u7684\u7a7a\u683c\u4ee5\u653e\u7f6e\u8fd4\u56de\u5730\u5740\u5b57arg_stack_index=stack_index-kWordSize\uff1b//\u6211\u4eec\u8f93\u5165COMPILE_CALL\uff0c\u5176\u4e2dSTACK_INDEX\u6307\u5411\u5806\u6808\u4e0a\u7684\u4e0b\u4e00\u4e2a//\u53ef\u7528\u4f4d\u7f6e\u3002\u6dfb\u52a0kWordSize(STACK_INDEX\u4e3a\u8d1f)//\u8fd9\u6837\u5b83\u53ea\u662f\u672c\u5730\u53d8\u91cfN\u7684\u500d\u6570\uff0c\u800c\u4e0d\u662fN+1.word RSP_ADJUST=STACK_INDEX+kWordSize\uff1b\u8fd4\u56deCOMPILE_Labelcall(buf\uff0clabel\uff0ccall_args\uff0carg_stack_index\uff0cvarenv\uff0clabels\uff0crsp_adjust)\uff1b}//...}\u3002\nCOMPILE_LABELCALL\u662f\u6211\u4eec\u8f6f\u7f16\u5199\u7684\u6709\u8da3\u7684\u9012\u5f52\u51fd\u6570\u4e4b\u4e00\u3002\u5b83\u7684\u5de5\u4f5c\u662f\u7f16\u8bd1\u6240\u6709\u53c2\u6570\uff0c\u5e76\u5c06\u5b83\u4eec\u7684\u7ed3\u679c\u5b58\u50a8\u5728\u8fde\u7eed\u7684\u5806\u6808\u4f4d\u7f6e\u3002\n\u5728\u57fa\u672c\u60c5\u51b5\u4e0b\uff0c\u5b83\u6ca1\u6709\u8981\u7f16\u8bd1\u7684\u53c2\u6570\u3002\u5b83\u5e94\u8be5\u53ea\u662f\u8c03\u6574\u5806\u6808\u6307\u9488\uff0c\u8c03\u7528\u8fc7\u7a0b\uff0c\u8c03\u6574\u56de\u5806\u6808\u6307\u9488\uff0c\u7136\u540e\u8fd4\u56de\u3002\nVoid emit_rsp_adjust(\u7f13\u51b2\u533a*buf\uff0c\u5b57\u8c03\u6574){if(adjust&lt\uff1b0){emit_sub_reg_imm32(buf\uff0ckrsp\uff0c-adjut)\uff1b}ELSE if(adjust&gt\uff1b0){emit_add_reg_imm32(buf\uff0ckrsp\uff0cadjust)\uff1b}}int Compile_labelcall(Buffer*buf\uff0cASTNode*Callable\uff0cASTNode*args\uff0cword stack_index\uff0cenv*varenv\uff0cenv*labels\uff0cword RSP_ADJUST){if(AST_is_nil(Args)){word code_address\uff1bif(\uff01Env_find(labels\uff0cAST_Symbol_CSTR(Callable)\uff0c&amp\uff1bCODE_ADDRESS)){return-1\uff1b}//\u4fdd\u5b58\u672c\u5730\u53d8\u91cfemit_rsp_adjust(buf\uff0crsp_adjust)\uff1bemit_call_imm32(buf\uff0ccode_address)\uff1b//\u53d6\u6d88\u4fdd\u5b58\u672c\u5730\u53d8\u91cfemit_rsp_adjust(buf\uff0c-rsp_adjust)\uff1breturn 0\uff1b}//...}\u3002\nEmit_rsp_adjust\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u51fd\u6570\uff0c\u5b83\u9700\u8981\u4e00\u4e9b\u5806\u6808\u8c03\u6574\u589e\u91cf\u3002\u5982\u679c\u5b83\u662f\u8d1f\u7684\uff0c\u5b83\u5c06\u53d1\u51faSUB\u6307\u4ee4\u3002\u5982\u679c\u662f\u6b63\u6570\uff0c\u5219\u4e3aADD\u3002\u5426\u5219\uff0c\u5b83\u4ec0\u4e48\u4e5f\u505a\u4e0d\u4e86\u3002\nInt\u7f16\u8bd1_labelcall(Buffer*buf\uff0cASTNode*Callable\uff0cASTNode*args\uff0cWORD STACK_INDEX\uff0cEnv*varenv\uff0cEnv*Labels\uff0cWord RSP_ADJUST){//...\u3002Assert(AST_IS_Pair(Args))\uff1bASTNode*arg=AST_Pair_Car(Args)\uff1b_(COMPILE_EXPR(buf\uff0carg\uff0cstack_index\uff0cvarenv\uff0clabels))\uff1bemit_store_reg_direct(buf\uff0cind(krsp\uff0cstack_index)\uff0ckrax)\uff1breturn Compile_labelcall(buf\uff0ccallable\uff0cAST_air_cdr(Args)\uff0cstack_index-kWordSize\uff0cvarenv\uff0clabels\uff0crsp_adjut)\uff1b}\u3002\n\u597d\u4e86\uff0c\u8fd9\u8fd8\u4e0d\u7b97\u592a\u7cdf\uff0c\u4e0d\u662f\u5417\uff1f\u6211\u662f\u8bf4\uff0c\u5982\u679c\u4f60\u7b2c\u4e00\u6b21\u5c31\u505a\u5bf9\u4e86\u3002\u6211\u5f53\u7136\u6ca1\u6709\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u5728\u51e0\u4e2a\u6708\u524d\u5c31\u653e\u5f03\u4e86\u8fd9\u4e2a\u7f16\u8bd1\u5668\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff0c\u56e0\u4e3a\u6211\u4e0d\u80fd\u6b63\u786e\u5730\u8c03\u7528\u8fc7\u7a0b\u3002\u6709\u4e86\u8fd9\u7bc7\u6587\u7ae0\uff0c\u6211\u73b0\u5728\u5df2\u7ecf\u5ea6\u8fc7\u4e86\u90a3\u4e2a\u7279\u522b\u68d8\u624b\u7684\u91cc\u7a0b\u7891\uff01\n\u6211\u4e0d\u4f1a\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5305\u542b\u6240\u6709\u7684\u6d4b\u8bd5\uff0c\u4f46\u662f\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u6d4b\u8bd5\u3002\u8fd9\u662f\u5176\u4e2d\u7684\u4e00\u4e9b\u3002\nTest CODE_CODE_WITH_TWO_PARAMS(Buffer*buf){ASTNode*node=Reader_Read(&#34\uff1b(code(X Y)(+x y))&#34\uff1b)\uff1bint COMPILE_RESULT=COMPILE_CODE(buf\uff0cnode\uff0c/*labels=*/null)\uff1bASSERT_EQ(CODE_RESULT\uff0c0)\uff1b//clang-format off byte\u9884\u671f[]={//mov rax\uff0c[rsp-16]0x48\uff0c0x8b\uff0c0x44\uff0c0x24\uff0c0xf0\uff0c//mov[rsp-24]\uff0crax 0x48\uff0c0x89\uff0c0x44\uff0c0x24\uff0c0x24\uff0c0xe8\uff0c//mov rax\uff0c[rsp-8]0x48\uff0c0x8b\uff0c0x44\uff0c0x24\uff0c0xf8\uff0c//add rax\uff0c[rsp-24]0x48\uff0c0x03\uff0c0x44\uff0c0x24\uff0c0xe8\uff0c/ret/0xc3\uff0c}\uff1b//clang-format on expect_equals_bytes(buf\uff0cexpred)\uff1bAST_HEAP_FREE(\u8282\u70b9)\uff1bPASS()\uff1b}\u3002\n\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u8fd9\u91c7\u7528[RSP-8]\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u548c[RSP-16]\u4e2d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4e34\u65f6\u53c2\u6570\u5b58\u50a8\u5728[RSP-24]\u4e2d\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u4e0d\u6d4b\u8bd5\u6267\u884c\uff0c\u56e0\u4e3a\u6211\u4e0d\u60f3\u7f16\u5199\u6d4b\u8bd5\u57fa\u7840\u8bbe\u65bd\u6b63\u5f0f\u5730\u8bbe\u7f6e\u8fc7\u7a0b\u8c03\u7528\u3002\nTest COMPILE_LABEL_WITH_ONE_LABEL(Buffer*buf){ASTNode*node=Reader_Read(&#34\uff1b(labels((const(code()5)1)&#34\uff1b)\uff1bint COMPILE_RESULT=COMPILE_ENTRY(buf\uff0cnode)\uff1bASSERT_EQ(COMPILE_RESULT\uff0c0)\uff1b//clang-format off byte\u9884\u671f[]={//mov rsi\uff0cRDI 0x48\uff0c0x89\uff0c0xfe\uff0c//jmp 0x08 0xe9\uff0c0x08\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov rax\uff0c\u7f16\u8bd1(5)0x48\uff0c0xc7\uff0c0xc0\uff0c0x14\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//ret 0xc3\uff0c//mov rax\uff0c0x2 0x48\uff0c0xc7\uff0c0xc0\uff0c0x04\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//ret 0xc3\uff0c}\uff1b//clang-format on expect_equals_bytes(buf\uff0cexpred)\uff1bbuffer_make_executable(Buf)\uff1buword result=TESTING_EXECUTE_ENTRY(buf\uff0c/*heap=*/null)\uff1bASSERT_EQ_FMT(OBJECT_ENCODE_INTEGER(1)\uff0cRESULT\uff0c&#34\uff1b0x%lx&#34\uff1b)\uff1bAST_HEAP_FREE(\u8282\u70b9)\uff1bPASS()\uff1b}\u3002\n\u8fd9\u5c06\u6d4b\u8bd5\u662f\u5426\u8df3\u8fc7\u7f16\u8bd1\u7684\u8fc7\u7a0b\u4e3b\u4f53(check\uff01)\u3001\u53d1\u51fa\u7f16\u8bd1\u7684\u8fc7\u7a0b\u4e3b\u4f53(check\uff01)\u548c\u53d1\u51fa\u6807\u7b7e\u7a97\u4f53\u7684\u4e3b\u4f53(check\uff01)\u3002\u8fd9\u4e00\u6b21\u6211\u4eec\u53ef\u4ee5\u6267\u884c\u3002\nTest build_labelcall_with_one_param(buffer*buf){ASTNode*node=Reader_Read(&#34\uff1b(labels((id(code(X)x)(Labelcall Id 5))&#34\uff1b)\uff1bint Compile_Result=Compile_Entry(buf\uff0cnode)\uff1bassert_EQ(Compile_Result\uff0c0)\uff1b//clang-\u8981\u6c42\u7684\u683c\u5f0f\u5173\u95ed\u5b57\u8282[]={//mov rsi\uff0cRDI 0x48\uff0c0x89\uff0c0xfe\uff0c//jmp 0x06 0xe9\uff0c0x06\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov rax\uff0c[rsp-8]0x48\uff0c0x8b\uff0c0x44\uff0c0x24\uff0c0xf8\uff0c//ret 0xc3\uff0c//mov rax\uff0c\u7f16\u8bd1(5)0x48\uff0c0xc7\uff0c0xc0\uff0c0x14\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[RSP-16]\uff0crax 0x48\uff0c0x89\uff0c0xf8\uff0c//ret 0xc3\uff0c//mov rax\uff0c\u7f16\u8bd1(5)0x48\uff0c0xc7\uff0c0xc0\uff0c0x14\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[RSP-16]\u30020x24\uff0c0xf0\uff0c//\u8c03\u7528`id`0xe8\uff0c0xe9\uff0c0xff\uff0c0xff\uff0c0xff\uff0c//ret 0xc3\uff0c}\uff1b//clang-Expect_EQUALS_BYTES\u4e0a\u7684\u683c\u5f0f(buf\uff0c\u671f\u671b\u3002\n.", "note_en": "Welcome back to the Compiling a Lisp series. Last time, we learned about Intelinstruction encoding. This time, we\u2019re going to use that knowledge to compileprocedure calls.\n The usual function expression in Lisp is a  lambda \u2014 an anonymous functionthat can take arguments and close over variables. Procedure calls are  notthis. They are simpler constructs that just take arguments and return values.\n We\u2019re adding procedure calls first as a stepping stone to full closure support.This will help us get some kind of internal calling convention established andstack manipulation figured out before things get too complicated.\n  ( labels  (( add  ( code  ( x  y )  ( +  x  y )))  ( sub  ( code  ( x  y )  ( -  x  y ))))  ( labelcall  sub  4  ( labelcall  add  1  2 ))) ; =&gt; 1\n  ( labels  (( factorial  ( code  ( x )  ( if  ( &lt;  x  2 )  1  ( *  x  ( labelcall  factorial  ( -  x  1 )))))))  ( labelcall  factorial  5 )) ; =&gt; 120\n These are fairly pedestrian snippets of code but they demonstrate some newfeatures we are adding, like:\n  Ghuloum does not explain why he does this, but I imagine that the  labels formwas chosen over allowing multiple separate top-level bindings because it iseasier to parse and traverse.\n  In order to compile a program, we are going to traverse every binding in the labels. For each binding, we will generate code for each  code object.\n Compiling  code objects requires making an environment for their parameters.We\u2019ll establish a calling convention later so that our compiler knows where tofind the parameters.\n Then, once we\u2019ve emitted all the code for the bindings, we will compile thebody. The body may, but is not required to, contain a  labelcall expression.\n In order to compile a  labelcall expression, we will compile all of thearguments provided, save them in consecutive locations on the stack, and thenemit a  call instruction.\n When all of these pieces come together, the resulting machine code will looksomething like this:\n  You can see that all of the  code objects will be compiled in sequence,followed by the body of the  labels form.\n Because I have not yet figured out how to start executing at somewhere otherthan the beginning of the generated code, and because I don\u2019t store generatedcode in any intermediate buffers, and because we don\u2019t know the sizes of anycode in advance, I do this funky thing where I emit a  jmp to the body code.\n   We\u2019re not going to use the System V AMD64 ABI. That calling convention requiresthat parameters are passed first in certain registers, and then on the stack.Instead, we will pass all parameters on the stack.\n This makes our code simpler, but it also means that at some point later on, wewill have to add a different kind of calling convention so that we can callforeign functions (like  printf, or  exit, or something). Those functionsexpect their parameters in registers. We\u2019ll worry about that later.\n If we borrow and adapt the excellent diagrams from the Ghuloum tutorial, thismeans that right before we make a procedure call, our stack will look likethis:\n Low address | ... | +------------------+ | ... | +------------------+ +-&gt; | arg3 | rsp-56 out | +------------------+ args| | arg2 | rsp-48 | +------------------+ +-&gt; | arg1 | rsp-40 +------------------+ | | rsp-32 +------------------+ +-&gt; | local3 | rsp-24 | +------------------+locals| | local2 | rsp-16 | +------------------+ +-&gt; | local1 | rsp-8 +------------------+ base | return point | rsp High address\n  You can see the first return point at  [rsp]. This is the return point placedby the caller of the  current function.\n Above that are whatever local variables we have declared with  let or perhapsare intermediate values from some computation.\n Above that is a blank space reserved for the second return point. This is thereturn point for the  about-to-be-called function. The  call instruction willfill in after evaluating all the arguments.\n Above the return point are all the outgoing arguments. They will appear aslocals for the procedure being called.\n  The  call instruction decrements  rsp and then writes to  [rsp]. This meansthat if we just emitted a  call, the first local would be overwritten. Nogood. Worse, the way the stack would be laid out would mean that the localswould look like arguments.\n In order to solve this problem, we need to first adjust  rsp to point to thelast local. That way the decrement will move it below the local and the returnaddress will go between the locals and the arguments.\n After the  call instruction, the stack will look different. Nothing will haveactually changed, except for  rsp. This change to  rsp means that the calleehas a different view:\n Low address | ... | +------------------+ | ... | +------------------+ +-&gt; | arg3 | rsp-24 in | +------------------+ args| | arg2 | rsp-16 | +------------------+ +-&gt; | arg1 | rsp-8 +------------------+ base | return point | rsp +------------------+ | ~~~~~~~~~~~~ | +------------------+ | ~~~~~~~~~~~~ | +------------------+ | ~~~~~~~~~~~~ | +------------------+ | ~~~~~~~~~~~~ | High address\n  The empty colored in spaces below the return point indicate that the values onthe stack are \u201chidden\u201d from view, since they are above (higher addresses than) [rsp]. The called function will  not be able to access those values.\n If the called function wants to use one of its arguments, it can pull it offthe stack from its designated location.\n One unfortunate consequence of this calling convention is that Valgrind doesnot understand it. Valgrind cannot understand that the caller has placed dataon the stack specifically for the callee to read it, and thinks this is amove/jump of an uninitialized value. This means that we get some errors nowon these labelcall tests.\n Eventually, when the function returns, the  ret instruction will pop thereturn point off the stack and jump to it. This will bring us back to theprevious call frame.\n That\u2019s that! I have yet to find a good tool that will let me visualize thestack as a program is executing. GDB probably has a mode hidden away somewhereundocumented that does exactly this. Cutter sort of does, but it\u2019s finicky inways I don\u2019t really understand. Maybe one day  Kartik\u2019sx86-64 Mu fork will be able to do this.\n  In order for this set of changes to make sense, I am going to explain all ofthe pieces one at a time, top-down.\n First, we\u2019ll look at the new-and-improved  Compile_entry, which has beenupdated to handle the  labels form. This will do the usual Lisp entrypointsetup, some checks, and the aforementioned  jmp to the body of the code.\n Then, we\u2019ll actually look at compiling the  labels. This means going throughthe bindings one-by-one and compiling their  code objects.\n Then, we\u2019ll look at what it means to compile a  code object. Hint: it\u2019s verymuch like  let.\n Last, we\u2019ll tie it all together when compiling the body of the  labels form.\n  Most of this code is checking. What used to just compile an expression nowvalidates that what we\u2019ve passed in at least vaguely looks like a well-formed labels form before picking it into its component parts: the  bindings andthe  body.\n int  Compile_entry ( Buffer  * buf ,  ASTNode  * node )  {  Buffer_write_arr ( buf ,  kEntryPrologue ,  sizeof  kEntryPrologue );  assert ( AST_is_pair ( node )  &amp;&amp;  &#34;program must have labels&#34; );  // Assume it&#39;s (labels ...)  ASTNode  * labels_sym  =  AST_pair_car ( node );  assert ( AST_is_symbol ( labels_sym )  &amp;&amp;  &#34;program must have labels&#34; );  assert ( AST_symbol_matches ( labels_sym ,  &#34;labels&#34; )  &amp;&amp;  &#34;program must have labels&#34; );  // Jump to body  word  body_pos  =  Emit_jmp ( buf ,  kLabelPlaceholder );  ASTNode  * args  =  AST_pair_cdr ( node );  ASTNode  * bindings  =  operand1 ( args );  assert ( AST_is_pair ( bindings )  ||  AST_is_nil ( bindings ));  ASTNode  * body  =  operand2 ( args );  _ ( Compile_labels ( buf ,  bindings ,  body ,  /*labels=*/ NULL ,  body_pos ));  Buffer_write_arr ( buf ,  kFunctionEpilogue ,  sizeof  kFunctionEpilogue );  return  0 ; }\n Compile_entry dispatches to  Compile_labels for iterating over all of thelabels.  Compile_labels is a recursive function that keeps track of all thelabels so far in its arguments, so we start it off with an empty  labelsenvironment.\n We also pass it the location of the  jmp so that right before it compiles thebody, it can patch the jump target.\n  In  Compile_labels, we have first a base case: if there are no labels weshould just emit the body.\n int  Compile_labels ( Buffer  * buf ,  ASTNode  * bindings ,  ASTNode  * body ,  Env  * labels ,  word  body_pos )  {  if  ( AST_is_nil ( bindings ))  {  Emit_backpatch_imm32 ( buf ,  body_pos );  // Base case: no bindings. Compile the body  _ ( Compile_expr ( buf ,  body ,  /*stack_index=*/ - kWordSize ,  /*varenv=*/ NULL ,  labels ));  return  0 ;  }  // ... }\n We also patch the jump location to the position where we\u2019re going to emit thebody of the  labels. In the base case with no labels, the jump would be alittle bit useless, since there would be no intervening code to jump over, butthat\u2019s alright. In most cases, there will be bindings.\n We pass in an empty  varenv, since we are not accumulating any locals alongthe way; only labels. For the same reason, we give a  stack_index of -kWordSize \u2014 the first slot.\n If we  do have labels, on the other hand, we should deal with the first label.This means:\n   int  Compile_labels ( Buffer  * buf ,  ASTNode  * bindings ,  ASTNode  * body ,  Env  * labels ,  word  body_pos )  {  // ....  assert ( AST_is_pair ( bindings ));  // Get the next binding  ASTNode  * binding  =  AST_pair_car ( bindings );  ASTNode  * name  =  AST_pair_car ( binding );  assert ( AST_is_symbol ( name ));  ASTNode  * binding_code  =  AST_pair_car ( AST_pair_cdr ( binding ));  word  function_location  =  Buffer_len ( buf );  // Bind the name to the location in the instruction stream  Env  entry  =  Env_bind ( AST_symbol_cstr ( name ),  function_location ,  labels );  // Compile the binding function  _ ( Compile_code ( buf ,  binding_code ,  &amp; entry ));  _ ( Compile_labels ( buf ,  AST_pair_cdr ( bindings ),  body ,  &amp; entry ,  body_pos ));  return  0 ; }\n It\u2019s important to note that we are binding  before we compile the code object and we are making the code location available before it is compiled! Thismeans that  code objects can reference themselves and even recursively callthemselves.\n Since we then pass that binding into  labels for the recursive call, it alsomeans that labels can access all labels defined before them, too.\n   I split this into two functions: one helper that pulls apart  code objects (Ididn\u2019t want to do that in  labels because I thought it would clutter themeaning), and one recursive function that does the work of putting theparameters in the environment.\n So  Compile_code just pulls apart the  (code (x y z ...) body) into theformal parameters and the body. Since  Compile_code_impl will need torecursively build up information about the  stack_index and  varenv, wesupply those.\n int  Compile_code ( Buffer  * buf ,  ASTNode  * code ,  Env  * labels )  {  assert ( AST_is_pair ( code ));  ASTNode  * code_sym  =  AST_pair_car ( code );  assert ( AST_is_symbol ( code_sym ));  assert ( AST_symbol_matches ( code_sym ,  &#34;code&#34; ));  ASTNode  * args  =  AST_pair_cdr ( code );  ASTNode  * formals  =  operand1 ( args );  ASTNode  * code_body  =  operand2 ( args );  return  Compile_code_impl ( buf ,  formals ,  code_body ,  /*stack_index=*/ - kWordSize ,  /*varenv=*/ NULL ,  labels ); }\n I said this would be like  let. What I meant by that was that, like  letbodies, code objects have \u201clocals\u201d \u2014 the formal parameters. We have to bindthe names of the parameters to successive stack locations, as per our callingconvention.\n In the base case, we do not have any formals, so we compile the body:\n int  Compile_code_impl ( Buffer  * buf ,  ASTNode  * formals ,  ASTNode  * body ,  word  stack_index ,  Env  * varenv ,  Env  * labels )  {  if  ( AST_is_nil ( formals ))  {  _ ( Compile_expr ( buf ,  body ,  stack_index ,  varenv ,  labels ));  Buffer_write_arr ( buf ,  kFunctionEpilogue ,  sizeof  kFunctionEpilogue );  return  0 ;  }  // ... }\n We also emit this function epilogue, which right now is just  ret. I got ridof the  push rbp/ mov rbp, rsp/ pop rbp dance because we switched to using rsp only instead. I alluded to this in the previous instruction encodinginterlude post.\n In the case where we have at least one formals, we bind the name to the stacklocation and go on our merry way.\n int  Compile_code_impl ( Buffer  * buf ,  ASTNode  * formals ,  ASTNode  * body ,  word  stack_index ,  Env  * varenv ,  Env  * labels )  {  // ...  assert ( AST_is_pair ( formals ));  ASTNode  * name  =  AST_pair_car ( formals );  assert ( AST_is_symbol ( name ));  Env  entry  =  Env_bind ( AST_symbol_cstr ( name ),  stack_index ,  varenv );  return  Compile_code_impl ( buf ,  AST_pair_cdr ( formals ),  body ,  stack_index  -  kWordSize ,  &amp; entry ,  labels ); }\n   What use are procedures if we can\u2019t call them? Let\u2019s figure out how to compileprocedure  calls.\n Code for calling a procedure must put the arguments and return address on thestack precisely how the called procedure expects them.\n Getting this contract right can be tricky. I spent several frustrated hoursgetting this to not crash. Then, even though it didn\u2019t crash, it returned baddata. It turns out that I was overwriting the return address by accident andreturning to someplace strange instead.\n  Making handmade diagrams that track the changes to  rsp and the stack really helps with understanding calling convention bugs.\n We\u2019ll start off by dumping yet more code into  Compile_call. This code willlook for something of the form  (labelcall name ...).\n  arg_stack_index, which is the first place on the stack where args aresupposed to go. Since we\u2019re skipping a space for the return address, this isone more than the current (available) slot index.\n  rsp_adjust, which is the amount that we\u2019re going to have to, well, adjust rsp. Without locals from  let or incoming arguments from a procedure call,this will be  0. With locals and/or arguments, this will be the total amountof space taken up by those.\n  int  Compile_call ( Buffer  * buf ,  ASTNode  * callable ,  ASTNode  * args ,  word  stack_index ,  Env  * varenv ,  Env  * labels )  {  // ...  if  ( AST_symbol_matches ( callable ,  &#34;labelcall&#34; ))  {  ASTNode  * label  =  operand1 ( args );  assert ( AST_is_symbol ( label ));  ASTNode  * call_args  =  AST_pair_cdr ( args );  // Skip a space on the stack to put the return address  word  arg_stack_index  =  stack_index  -  kWordSize ;  // We enter Compile_call with a stack_index pointing to the next  // available spot on the stack. Add kWordSize (stack_index is negative)  // so that it is only a multiple of the number of locals N, not N+1.  word  rsp_adjust  =  stack_index  +  kWordSize ;  return  Compile_labelcall ( buf ,  label ,  call_args ,  arg_stack_index ,  varenv ,  labels ,  rsp_adjust );  }  // ... }\n Compile_labelcall is one of those fun recursive functions we write sofrequently. Its job is to compile all of the arguments and store their resultsin successive stack locations.\n In the base case, it has no arguments to compile. It should just adjust thestack pointer, call the procedure, adjust the stack pointer back, and return.\n void  Emit_rsp_adjust ( Buffer  * buf ,  word  adjust )  {  if  ( adjust  &lt;  0 )  {  Emit_sub_reg_imm32 ( buf ,  kRsp ,  - adjust );  }  else  if  ( adjust  &gt;  0 )  {  Emit_add_reg_imm32 ( buf ,  kRsp ,  adjust );  } } int  Compile_labelcall ( Buffer  * buf ,  ASTNode  * callable ,  ASTNode  * args ,  word  stack_index ,  Env  * varenv ,  Env  * labels ,  word  rsp_adjust )  {  if  ( AST_is_nil ( args ))  {  word  code_address ;  if  ( ! Env_find ( labels ,  AST_symbol_cstr ( callable ),  &amp; code_address ))  {  return  - 1 ;  }  // Save the locals  Emit_rsp_adjust ( buf ,  rsp_adjust );  Emit_call_imm32 ( buf ,  code_address );  // Unsave the locals  Emit_rsp_adjust ( buf ,  - rsp_adjust );  return  0 ;  }  // ... }\n Emit_rsp_adjust is a convenience function that takes some stack adjustmentdelta. If it\u2019s negative, it will issue a  sub instruction. If it\u2019s positive,an  add. Otherwise, it\u2019ll do nothing.\n  int  Compile_labelcall ( Buffer  * buf ,  ASTNode  * callable ,  ASTNode  * args ,  word  stack_index ,  Env  * varenv ,  Env  * labels ,  word  rsp_adjust )  {  // ...  assert ( AST_is_pair ( args ));  ASTNode  * arg  =  AST_pair_car ( args );  _ ( Compile_expr ( buf ,  arg ,  stack_index ,  varenv ,  labels ));  Emit_store_reg_indirect ( buf ,  Ind ( kRsp ,  stack_index ),  kRax );  return  Compile_labelcall ( buf ,  callable ,  AST_pair_cdr ( args ),  stack_index  -  kWordSize ,  varenv ,  labels ,  rsp_adjust ); }\n There, that wasn\u2019t so bad, was it? I mean, if you manage to get it right thefirst time. I certainly did not. In fact, I gave up on the first version ofthis compiler many months ago because I could not get procedure calls right.With this post, I have now made it past that particular thorny milestone!\n   I won\u2019t include all the tests in this post, but a full battery of tests isavailable in  compile-procedures.c. Here are some of them.\n  TEST  compile_code_with_two_params ( Buffer  * buf )  {  ASTNode  * node  =  Reader_read ( &#34;(code (x y) (+ x y))&#34; );  int  compile_result  =  Compile_code ( buf ,  node ,  /*labels=*/ NULL );  ASSERT_EQ ( compile_result ,  0 );  // clang-format off  byte  expected []  =  {  // mov rax, [rsp-16]  0x48 ,  0x8b ,  0x44 ,  0x24 ,  0xf0 ,  // mov [rsp-24], rax  0x48 ,  0x89 ,  0x44 ,  0x24 ,  0xe8 ,  // mov rax, [rsp-8]  0x48 ,  0x8b ,  0x44 ,  0x24 ,  0xf8 ,  // add rax, [rsp-24]  0x48 ,  0x03 ,  0x44 ,  0x24 ,  0xe8 ,  // ret  0xc3 ,  };  // clang-format on  EXPECT_EQUALS_BYTES ( buf ,  expected );  AST_heap_free ( node );  PASS (); }\n As expected, this takes the first argument in  [rsp-8] and second in [rsp-16], storing a temporary in  [rsp-24]. This test does not testexecution because I did not want to write the testing infrastructure formanually setting up procedure calls.\n  TEST  compile_labels_with_one_label ( Buffer  * buf )  {  ASTNode  * node  =  Reader_read ( &#34;(labels ((const (code () 5))) 1)&#34; );  int  compile_result  =  Compile_entry ( buf ,  node );  ASSERT_EQ ( compile_result ,  0 );  // clang-format off  byte  expected []  =  {  // mov rsi, rdi  0x48 ,  0x89 ,  0xfe ,  // jmp 0x08  0xe9 ,  0x08 ,  0x00 ,  0x00 ,  0x00 ,  // mov rax, compile(5)  0x48 ,  0xc7 ,  0xc0 ,  0x14 ,  0x00 ,  0x00 ,  0x00 ,  // ret  0xc3 ,  // mov rax, 0x2  0x48 ,  0xc7 ,  0xc0 ,  0x04 ,  0x00 ,  0x00 ,  0x00 ,  // ret  0xc3 ,  };  // clang-format on  EXPECT_EQUALS_BYTES ( buf ,  expected );  Buffer_make_executable ( buf );  uword  result  =  Testing_execute_entry ( buf ,  /*heap=*/ NULL );  ASSERT_EQ_FMT ( Object_encode_integer ( 1 ),  result ,  &#34;0x%lx&#34; );  AST_heap_free ( node );  PASS (); }\n This tests for a jump over the compiled procedure bodies (CHECK!), emittingcompiled procedure bodies (CHECK!), and emitting the body of the  labels form(CHECK!). This one we can execute.\n  TEST  compile_labelcall_with_one_param ( Buffer  * buf )  {  ASTNode  * node  =  Reader_read ( &#34;(labels ((id (code (x) x))) (labelcall id 5))&#34; );  int  compile_result  =  Compile_entry ( buf ,  node );  ASSERT_EQ ( compile_result ,  0 );  // clang-format off  byte  expected []  =  {  // mov rsi, rdi  0x48 ,  0x89 ,  0xfe ,  // jmp 0x06  0xe9 ,  0x06 ,  0x00 ,  0x00 ,  0x00 ,  // mov rax, [rsp-8]  0x48 ,  0x8b ,  0x44 ,  0x24 ,  0xf8 ,  // ret  0xc3 ,  // mov rax, compile(5)  0x48 ,  0xc7 ,  0xc0 ,  0x14 ,  0x00 ,  0x00 ,  0x00 ,  // mov [rsp-16], rax  0x48 ,  0x89 ,  0x44 ,  0x24 ,  0xf0 ,  // call `id`  0xe8 ,  0xe9 ,  0xff ,  0xff ,  0xff ,  // ret  0xc3 ,  };  // clang-format on  EXPECT_EQUALS_BYTES ( buf ,  expected\n......", "posttime": "2020-10-30 00:37:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,lisp,rsp", "title": "\u5c06Lisp\u7f16\u8bd1\u4e3ax86-64\uff1a\u5e26\u6807\u7b7e\u7684\u8fc7\u7a0b\u8c03\u7528", "title_en": "Compiling a Lisp to x86-64: Labelled procedure calls", "transed": 1, "url": "https://bernsteinbear.com/blog/compiling-a-lisp-11/", "via": "", "real_tags": ["\u7f16\u8bd1", "lisp", "rsp"]}, {"category": "", "categoryclass": "", "imagename": "2a206234ef82bb3b183c460fb67c9b05.jpg", "infoid": 1032052, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u514d\u8d39\u3001\u5feb\u901f\u3001\u5f00\u6e90\u3001\u79bb\u7ebf\u3001\u53ef\u5b9a\u5236\u3002\u8fd9\u4e9b\u8bcd\u4e0d\u5e38\u7528\u6765\u63cf\u8ff0\u4ee3\u7801\u626b\u63cf\u5de5\u5177\uff0c\u8fd9\u662f\u4e00\u79cd\u803b\u8fb1\u3002\n\u6211\u4eec\u521b\u5efar2c\u662f\u4e3a\u4e86\u7ed9\u5f00\u53d1\u8005\u5e26\u6765\u4e16\u754c\u7ea7\u7684\u5b89\u5168\u5de5\u5177\uff0c\u56e0\u4e3a\u6211\u4eec\u575a\u4fe1\u8f6f\u4ef6\u5c06\u8fd0\u884c\u672a\u6765\u6700\u4ee4\u4eba\u5174\u594b\u7684\u90e8\u5206\uff1a\u4ece\u533b\u7597\u8bbe\u5907\u5230\u673a\u5668\u4eba\u518d\u5230\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\uff0c\u65e0\u6240\u4e0d\u5305\u3002\u5b89\u5168\u8fc7\u7a0b\u4e0d\u5e94\u8be5\u662f\u654c\u4eba\uff0c\u800c\u5e94\u8be5\u662f\u5feb\u901f\u8f6f\u4ef6\u5f00\u53d1\u7684\u63a8\u52a8\u8005\u3002\u5982\u679c\u5f00\u53d1\u4eba\u5458\u7f3a\u4e4f\u6613\u4e8e\u8bbe\u7f6e\u548c\u7406\u89e3\u7684\u5de5\u5177\uff0c\u6216\u8005\u5982\u679c\u5f00\u53d1\u4eba\u5458\u6bcf\u6b21\u66f4\u6362\u5de5\u4f5c\u65f6\u90fd\u5fc5\u987b\u8bf4\u670d\u4ed6\u4eec\u7684\u7ecf\u7406\u82b1\u8d39\u6570\u767e\u4e07\u7f8e\u5143\u8d2d\u4e70\u9ad8\u7ea7\u5b89\u5168\u5de5\u5177\uff0c\u90a3\u4e48\u672a\u6765\u5c06\u662f\u9eef\u6de1\u7684\u3002\n\u5728\u521b\u7acbR2C\u4e4b\u524d\uff0c\u6211\u4eec\u4e3a\u5927\u516c\u53f8\u548c\u653f\u5e9c\u5f00\u53d1\u5b89\u5168\u548c\u5f00\u53d1\u5de5\u5177\u3002\u4ee4\u4eba\u5927\u5f00\u773c\u754c\u7684\u662f\uff0c\u5c3d\u7ba1\u9884\u7b97\u5de8\u5927\uff0c\u4f46\u4ed6\u4eec\u7684\u5b89\u5168\u9879\u76ee\u603b\u4f53\u4e0a\u843d\u540e\u4e8e\u79d1\u6280\u5de8\u5934\u4e00\u4ee3\u4eba\u6216\u66f4\u957f\u65f6\u95f4\u3002\u5f53\u8c08\u5230\u5f00\u53d1\u4eba\u5458\u7684\u5b89\u5168\u5de5\u5177\u65f6\uff0c\u5927\u591a\u6570\u56e2\u961f\u90fd\u538c\u5026\u4e86\u626b\u63cf\u4ee3\u7801\u4e2d\u7684\u6f0f\u6d1e\uff1b\u4ed6\u4eec\u8ba8\u538c\u4ed6\u4eec\u5fc5\u987b\u4f7f\u7528\u7684\u5de5\u5177\uff0c\u901a\u5e38\u53ea\u505a\u6ee1\u8db3\u9075\u4ece\u6027\u590d\u9009\u6846\u6240\u9700\u7684\u6700\u4f4e\u9650\u5ea6\u7684\u5de5\u4f5c\uff0c\u800c\u5ffd\u7565\u8fd9\u4e9b\u5de5\u5177\u3002\n\u5728Facebook\u3001\u82f9\u679c\u3001\u4e9a\u9a6c\u900a\u3001Netflix\u548c\u8c37\u6b4c\u7b49\u5730\u8fdb\u884c\u4ee3\u7801\u626b\u63cf\u600e\u4e48\u6837\uff1f\u4ed6\u4eec\u901a\u5e38\u4e0d\u4f1a\u4f7f\u7528\u4f20\u7edf\u7684\u5546\u4e1a\u5b89\u5168\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u4f1a\u95ee\u6211\u4eec\u5982\u4f55\u624d\u80fd\u627e\u5230\u6bcf\u4e00\u4e2a\u6f0f\u6d1e\uff1f\u76f8\u53cd\uff0c\u4ed6\u4eec\u4e13\u6ce8\u4e8e\u53ef\u4ee5\u4e3a\u5f00\u53d1\u4eba\u5458\u6784\u5efa\u62a4\u680f\u7684\u81ea\u5b9a\u4e49\u5de5\u5177\u3002\u8fd9\u4e0d\u9700\u8981\u767e\u4e07\u7f8e\u5143\u7684\u5de5\u5177\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5206\u6790\u7684\u535a\u58eb\u5b66\u4f4d\uff0c\u4e5f\u4e0d\u9700\u8981\u51e0\u5929\u7684\u8ba1\u7b97\u65f6\u95f4\u3002\u5b83\u770b\u8d77\u6765\u66f4\u50cf\u662f\u5b89\u5168\u6027\u7684\u5355\u5143\u6d4b\u8bd5\u3002\n\u6211\u4eec\u8ba4\u4e3a\u5728\u4f20\u7edf\u7684\u5408\u89c4\u5de5\u5177\u548c\u7b80\u5355\u7684\u77ed\u9488\u4e4b\u95f4\u5b58\u5728\u5dee\u8ddd\uff0c\u8fd9\u662f\u4e00\u79cd\u65b0\u65b9\u6cd5\u7684\u6210\u719f\uff0c\u6211\u4eec\u5f88\u5e78\u8fd0\u5730\u627e\u5230\u4e86Redpoint Ventures\u548cSequoia Capital\u7684\u5408\u4f5c\u4f19\u4f34\uff0c\u4ed6\u4eec\u540c\u610f\u8fd9\u4e00\u70b9\u3002\u5728\u4ed6\u4eec\u7684\u5e2e\u52a9\u4e0b\uff0c\u6211\u4eec\u7b79\u96c6\u4e861300\u4e07\u7f8e\u5143\u7684\u9996\u8f6e\u878d\u8d44\uff0c\u7528\u6765\u6784\u5efa\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u771f\u7684\u4f1a\u559c\u6b22\u7684\u5b89\u5168\u5de5\u5177\u3002\u6211\u4eec\u5df2\u7ecf\u6084\u6084\u5730\u4e3a\u5b83\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u6211\u4eec\u7ec8\u4e8e\u51c6\u5907\u597d\u5411\u5168\u4e16\u754c\u5ba3\u5e03\u5b83\u4e86\uff01\n\u6211\u4eec\u7684\u5f00\u6e90\u4ea7\u54c1Semgrep\u662f\u4e13\u95e8\u4e3a\u6839\u9664\u9519\u8bef\u7c7b\u800c\u8bbe\u8ba1\u7684\u3002\u5f00\u53d1\u4eba\u5458\u548c\u5b89\u5168\u5de5\u7a0b\u5e08\u53ef\u4ee5\u8bf4\uff0c\u8fd9\u662f\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u7684\u5b89\u5168\u6a21\u5f0f(\u4f8b\u5982\uff0c\u89e3\u6790XML)\uff0c\u5728\u51e0\u5206\u949f\u5185\u7f16\u5199\u4e00\u6761\u89c4\u5219\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u7f16\u8f91\u5668\u4fdd\u5b58\u3001\u63d0\u4ea4\u548c\u62c9\u5165\u8bf7\u6c42\u5f3a\u5236\u6267\u884c\u8be5\u89c4\u5219\u3002\nSemgrep\u662f\u6784\u5efa\u5b89\u5168\u62a4\u680f\u7684\u7406\u60f3\u9009\u62e9\uff1a\u9996\u5148\u4f7f\u7528\u8003\u8651\u5230\u5b89\u5168\u6027\u7684\u6846\u67b6\uff0c\u7136\u540e\u81ea\u52a8\u6807\u8bb0\u504f\u79bb\u9ed8\u8ba4\u5b89\u5168\u8def\u5f84\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u8c37\u6b4c\u3001Facebook\u3001\u4e9a\u9a6c\u900a\u3001Dropbox\u3001Strip\u3001Netflix\u548c\u5176\u4ed6\u516c\u53f8\u4f7f\u7528\u7684\u65b9\u6cd5-\u6211\u548cClint Gibler\u5728Global AppSec 2020\u4e0a\u4ecb\u7ecd\u4e86\u8fd9\u4e2a\u4e3b\u9898\u3002\u6b64\u65b9\u6cd5\u63d0\u9ad8\u4e86\u5f00\u53d1\u4eba\u5458\u7684\u5de5\u4f5c\u6548\u7387\uff0c\u51cf\u5c11\u4e86\u53d7\u653b\u51fb\u9762\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u4eba\u5de5\u68c0\u67e5\u548c\u5ba1\u6838\u7684\u533a\u57df\uff0c\u5e76\u5141\u8bb8\u5b89\u5168\u56e2\u961f\u4ee5\u53ef\u4f38\u7f29\u7684\u65b9\u5f0f\u4fdd\u62a4\u6570\u5343\u540d\u5f00\u53d1\u4eba\u5458\u7f16\u5199\u7684\u4ee3\u7801\u3002\nSemgrep\u80cc\u540e\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff1a\u5b83\u611f\u89c9\u50cf\u662f\u4e00\u4e2a\u5e38\u89c4\u641c\u7d22(Grep)\uff0c\u4f46\u5b83\u662f\u8bed\u6cd5\u611f\u77e5\u7684\u3002\u51e0\u5206\u949f\u540e\u4f60\u5c31\u53ef\u4ee5\u5b66\u4f1aSemgrep\u4e86\uff01Semgrep\u53ef\u7528\u4e8e\u7684\u4e0d\u4ec5\u4ec5\u662f\u5b89\u5168\u95ee\u9898\uff1a\u6027\u80fd\u3001\u56fd\u9645\u5316\uff0c\u6216\u8005\u53ea\u662f\u5076\u7136\u72af\u4e0b\u7684\u9ebb\u70e6\u3002\n$semgrep-e foo(1)\u5339\u914d\u6240\u6709\u7b49\u4ef7\u53d8\u4f53\u3002\u67e5\u770b\u5339\u914dEXEC\u547c\u53eb\u7684\u73b0\u573a\u793a\u4f8b\u3002\nSemgrep\u6700\u521d\u662fFacebook\u7684\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u5f88\u5e78\u8fd0\u6709\u5b83\u7684\u539f\u59cb\u4f5c\u8005Yoann Padioleau\u52a0\u5165\u6211\u4eec\u7684r2c\u56e2\u961f\u3002\u81ea\u4ece\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u6211\u4eec\u53d1\u5e03\u4e86Facebook\u53d1\u5e03\u540e\u7684\u7b2c\u4e00\u4e2a\u7248\u672c(0.4)\u4ee5\u6765\uff0c\u6211\u4eec\u5df2\u7ecf\u53d1\u5e03\u4e8625\u4e2a\u65b0\u7248\u672c\uff0c\u589e\u52a0\u4e86\u5bf98\u79cd\u65b0\u8bed\u8a00\u7684\u652f\u6301\uff0c\u91cd\u65b0\u4fee\u6539\u4e86\u89e3\u6790\u5668\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u4e0eGithub\u5408\u4f5c\u5f00\u53d1Treate-Sitter\uff0c\u6210\u5343\u4e0a\u4e07\u7684GitHub\u70ed\u60c5\u8ffd\u968f\u8005\u52a0\u5165\u4e86\u6211\u4eec\u7684\u884c\u5217\uff0c\u5e76\u89c2\u770b\u4e86\u8d85\u8fc710\u4e07\u6b21Semgrep Docker\u56fe\u7247\u7684\u62c9\u53d6\u3002\n\u6211\u4eec\u7684\u8def\u7ebf\u56fe\u5305\u542b\u66f4\u591a\u8ba1\u5212\u5206\u6790\u529f\u80fd\uff0c\u4ee5\u652f\u6301\u5927\u578b\u6280\u672f\u516c\u53f8\u5df2\u7ecf\u5728\u5927\u91cf\u5229\u7528\u7684\u9ed8\u8ba4\u5b89\u5168\u5f3a\u5236\u5b9e\u65bd(\u6301\u7eed\u4f20\u64ad\u3001\u6c61\u70b9\u8ddf\u8e2a\u7b49)\uff0c\u4ee5\u53ca\u5bf9\u66f4\u591a\u8bed\u8a00\u7684\u652f\u6301\u3002\n\u968f\u7740Semgrep\u7684\u53d1\u5e03\uff0c\u6211\u4eec\u518d\u6b21\u5ba3\u5e03\u63a8\u51faSemgrep Community\u548cSemgrep Teams\u3002Semgrep Community\u662f\u7528\u4e8e\u7ba1\u7406Semgrep CI\u7684\u514d\u8d39\u6258\u7ba1\u670d\u52a1\uff0cSemgrep Teams\u662f\u4e00\u9879\u4ed8\u8d39\u670d\u52a1\uff0c\u6dfb\u52a0\u4e86\u5bf9\u4f01\u4e1a\u6709\u7528\u7684Semgrep\u7ba1\u7406\u9644\u52a0\u529f\u80fd\u3002\u8fd9\u4e24\u4e2a\u4ea7\u54c1\u90fd\u4e3a\u64cd\u4f5c\u73b0\u4ee3AppSec\u7a0b\u5e8f\u63d0\u4f9b\u4e86SaaS\u57fa\u7840\u8bbe\u65bd\u3002\u5b83\u4eec\u652f\u6301\u4e3a\u60a8\u7684\u9879\u76ee\u96c6\u4e2d\u5b9a\u4e49\u4ee3\u7801\u6807\u51c6\uff0c\u5e76\u663e\u793a\u60a8\u5df2\u7ecf\u5de5\u4f5c\u8fc7\u7684\u5730\u65b9\u7684\u7ed3\u679c\uff1aGitHub\u3001GitLab\u3001Slake\u3001Jira\u3001VS Code\u7b49\u7b49\u3002\n\u6211\u4eec\u4e5f\u5f88\u9ad8\u5174Semgrep Registry\u5df2\u7ecf\u6709900\u591a\u6761\u7531r2c\u548c\u793e\u533a\u7f16\u5199\u7684\u89c4\u5219-\u60a8\u73b0\u5728\u5c31\u53ef\u4ee5\u5f00\u59cb\u8fd0\u884c\u60a8\u7684\u9879\u76ee\u4e86\uff01\u6216\u8005\u5982\u679c\u4f60\u559c\u6b22DIY\uff0c\u8bd5\u7740\u5199\u4f60\u81ea\u5df1\u7684\u3002\n\u83b7\u53d6\u6709\u5173Semgrep\u7684\u6700\u65b0\u529f\u80fd\u548c\u6211\u4eec\u7684\u5b89\u5168\u7814\u7a76\u7684\u6700\u65b0\u65b0\u95fb\u3002\u6211\u4eec\u4fdd\u8bc1\u6c38\u8fdc\u4e0d\u4f1a\u7ed9\u60a8\u53d1\u5783\u573e\u90ae\u4ef6\u3002", "note_en": "Free, fast,  open-source, offline, customizable. These are not often words that describe code scanning tools, and that&#39;s a shame.\n We founded r2c to bring world-class security tools to developers based on our conviction that software will run the most exciting parts of the future: everything from medical equipment to robots to autonomous cars. The security process should not be the foe but rather the enabler of rapid software development. If developers lack tooling that is easy to set up and understand\u2014or if a developer has to convince their manager to spend a few million dollars on advanced security tools each time they change jobs, the future is bleak.\n Before founding r2c, we worked on security and developer tools for large companies and governments. It was eye-opening to see that despite massive budgets, their security programs were generally a generation or more behind the tech giants. When it came to security tools for developers, most teams were jaded about scanning code for vulnerabilities; they hated the tools they had to use and usually ignored them beyond doing the minimum necessary to satisfy a compliance checkbox.\n What about code scanning at places like Facebook, Apple, Amazon, Netflix, and Google? They don&#39;t generally use traditional commercial security tools which ask &#34;how can we find every bug?&#34; Instead, they focus on custom tooling that can build guardrails for developers. This doesn&#39;t require million-dollar tools, PhDs in program analysis, or days of compute time. It looks much more like unit tests for security.\n We believe there is a gap between traditional compliance tools and simple linters that&#39;s ripe for a new approach, and we were fortunate to find partners from Redpoint Ventures and Sequoia Capital who agreed. With them, we raised a $13M Series A round of funding to build a security tool that developers might actually love. We&#39;ve been working on it quietly for a while now, and we&#39;re finally ready to announce it to the world!\n  Semgrep, our open-source product, is specifically designed for eradicating bug classes.Developers and security engineers can say &#34;this is the safe pattern we always use for (e.g. parsing XML)&#34;, write a rule in a few minutes, and enforce that on every editor save, commit, and pull request.\n Semgrep is ideal for building security guardrails: start by using frameworks designed with security in mind, then automatically flag code that strays from the  secure-by-default path. This is an approach used by  Google,  Facebook,  Amazon, Dropbox, Stripe,  Netflix, and others\u2014a topic  Clint Gibler and I presented on at Global AppSec 2020. This approach increases developer productivity, reduces attack surface, minimizes the areas for human inspection and audit, and allows the security team to scalably protect code written by thousands of developers.\n The idea behind Semgrep is simple: it feels like a regular search (grep) but is syntax-aware. You can  learn Semgrep in a few minutes! And Semgrep can be used for  more than just security issues: performance, internationalization, or just annoyances  committed by accident.\n  $ semgrep -e foo(1) matches all equivalent variations.  See a live example of matching  exec calls\n  Semgrep started as an open-source project at Facebook and we&#39;re lucky to have its original author, Yoann Padioleau, on our team at r2c. Since we released the first post-Facebook version (0.4) earlier this year, we&#39;ve released 25 new versions, added support for 8 new languages, reworked the parsers so we could collaborate with Github on  tree-sitter, been joined by thousands of enthusiastic GitHub followers, and seen over 100K pulls of the Semgrep Docker image.\n Our roadmap contains more program analysis features to support the sorts of secure-by-default enforcement that large technology companies are already leveraging so heavily (constant propagation, taint tracking, and more), as well as support for many more languages.\n  Along with this release of Semgrep, we&#39;re announcing the availability of  Semgrep Community, a free, hosted service for managing Semgrep CI as well as Semgrep Teams, a paid service which adds additional features for managing Semgrep that are useful for enterprises. Both these offerrings provide SaaS infrastructure for operating a modern AppSec program. They enable central definition of code standards for your projects and show results where you already work: GitHub, GitLab, Slack, Jira, VS Code, and more.\n We&#39;re also excited that  Semgrep Registry already has 900+ rules written by r2c and the community\u2014you can start running on your project right now! Or if you like to DIY,  try writing your own.\n Get fresh news about the latest Semgrep features and our security research. We promise to never spam you.", "posttime": "2020-10-30 00:36:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "semgrep,\u5b89\u5168", "title": "\u4ecb\u7ecdSemgrep\u548cR2c", "title_en": "Introducing Semgrep and r2c", "transed": 1, "url": "https://r2c.dev/blog/2020/introducing-semgrep-and-r2c/", "via": "", "real_tags": ["semgrep", "\u5b89\u5168"]}, {"category": "", "categoryclass": "", "imagename": "d1c51483e37125a2a17ee8480a74b9a7.jpeg", "infoid": 1032051, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e95\u7279\u5f8b(\u8def\u900f\u793e)-\u901a\u7528\u6c7d\u8f66\u516c\u53f8(General Motors Co)\u7684GM.N Super Cruise\u5468\u4e09\u8868\u793a\uff0c\u5728\u300a\u6d88\u8d39\u8005\u62a5\u544a\u300b(Consumer Reports)\u5bf917\u8f86\u914d\u5907\u4e3b\u52a8\u9a7e\u9a76\u8f85\u52a9\u7cfb\u7edf(ADA)\u7684\u8f66\u8f86\u8fdb\u884c\u7684\u8bc4\u4f30\u4e2d\uff0c\u901a\u7528\u6c7d\u8f66(GM.N)\u7684GM.N Super Cruise\u518d\u6b21\u9886\u5148\u4e8e\u7279\u65af\u62c9(Tesla)\u7684TSLA.O Autopilot\u3002\n\u8be5\u96c6\u56e2\u8868\u793a\uff0c\u4e00\u8f86\u88c5\u6709Autopilot\u7684\u7279\u65af\u62c9Model Y\u201c\u8fdc\u8fdc\u843d\u540e\u4e8e\u201d\u4e00\u8f86\u914d\u5907Super Cruise\u7684\u51ef\u8fea\u62c9\u514bCT6\uff0c\u901a\u7528\u6c7d\u8f66\u5c06\u5728\u672a\u6765\u4e09\u5e74\u541120\u591a\u8f86\u6c7d\u8f66\u63a8\u51fa\u8fd9\u6b3e\u8f66\uff0c\u5305\u62ec\u5176\u65b0\u6b3e\u608d\u9a6c\u7535\u52a8\u76ae\u5361\u3002\n\u5b89\u5168\u548c\u4fdd\u9669\u7814\u7a76\u4eba\u5458\u7ecf\u5e38\u8b66\u544a\u6d88\u8d39\u8005\u9ad8\u4f30ADAS\u7cfb\u7edf\u80fd\u529b\u7684\u98ce\u9669\uff0c\u4e00\u4e9b\u6c7d\u8f66\u5236\u9020\u5546\u79f0\u4ed6\u4eec\u7684\u4ea7\u54c1\u4e3aAutopilot\u3001ProPilot\u6216Co-Pilot\uff0c\u52a0\u5267\u4e86\u8fd9\u79cd\u8bef\u89e3\u3002\n2018\u5e74\uff0c\u914d\u5907Super Cruise\u7684\u51ef\u8fea\u62c9\u514bCT6\u5728\u6d88\u8d39\u8005\u62a5\u544a(Consumer Reports)\u5bf9\u53ea\u6709\u56db\u8f86\u914d\u5907ADA\u7684\u8f66\u8f86\u8fdb\u884c\u7684\u6d4b\u8bd5\u4e2d\uff0c\u5f97\u5206\u9ad8\u4e8e\u914d\u5907\u81ea\u52a8\u9a7e\u9a76\u7684\u7279\u65af\u62c9Model 3\u3002\n\u5728\u4eca\u5e74\u590f\u5929\u5728\u8d5b\u9053\u548c\u516c\u5171\u9053\u8def\u4e0a\u8fdb\u884c\u7684\u6700\u65b0\u6d4b\u8bd5\u4e2d\uff0c\u51ef\u8fea\u62c9\u514b\u5f97\u4e8669\u5206(\u6ee1\u5206100\u5206)\uff0c\u800c\u7279\u65af\u62c9\u5f97\u4e8657\u5206\u3002\u4e00\u8f86\u914d\u5907\u4e86\u798f\u7279\u6c7d\u8f66\u516c\u53f8F.N Co-Pilot 360\u7cfb\u7edf\u7684\u6797\u80af\u6d77\u76d7\u8f66\u4ee552\u5206\u4f4d\u5c45\u7b2c\u4e09\u3002\n\u8d85\u7ea7\u5de1\u822a\u7cfb\u7edf\u7684\u5173\u952e\u533a\u522b\u662f\u4e00\u4e2a\u9762\u5411\u53f8\u673a\u7684\u7ea2\u5916\u6444\u50cf\u5934\uff0c\u4ee5\u786e\u4fdd\u4ed6\u6216\u5979\u6b63\u5728\u5173\u6ce8\u9053\u8def\uff0c\u5e76\u51c6\u5907\u597d\u5728\u5fc5\u8981\u65f6\u63a5\u7ba1\u624b\u52a8\u63a7\u5236\uff0c\u6d88\u8d39\u8005\u62a5\u544a\u7684\u8054\u7f51\u548c\u81ea\u52a8\u5316\u8f66\u8f86\u6d4b\u8bd5\u4e3b\u7ba1\u51ef\u5229\u00b7\u82ac\u514b\u8c6a\u52d2(Kelly Funkhoer)\u8bf4\u3002\n\u8be5\u7ec4\u7ec7\u6307\u51fa\uff0cAutopilot\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u4f1a\u7a81\u7136\u5173\u95ed\uff0c\u800cSuper Cruise\u5728\u7cfb\u7edf\u8131\u79bb\u65f6\u901a\u77e5\u53f8\u673a\u7684\u5de5\u4f5c\u505a\u5f97\u66f4\u597d\u3002\n\u5728\u6700\u8fd1\u7684\u6b27\u6d32\u5b89\u5168\u6d4b\u8bd5\u4e2d\uff0c\u4e00\u8f86\u914d\u5907\u81ea\u52a8\u9a7e\u9a76\u7684\u7279\u65af\u62c9Model 3\u572810\u4e2a\u7cfb\u7edf\u4e2d\u6392\u540d\u7b2c\u516d\uff0c\u5728\u6027\u80fd\u548c\u5e94\u5bf9\u7d27\u6025\u60c5\u51b5\u7684\u80fd\u529b\u65b9\u9762\u83b7\u5f97\u4e86\u9ad8\u5206\uff0c\u4f46\u5728\u4fdd\u6301\u53f8\u673a\u4e13\u6ce8\u4e8e\u9053\u8def\u4e0a\u7684\u80fd\u529b\u65b9\u9762\u5f97\u5206\u8f83\u4f4e\u3002", "note_en": "DETROIT (Reuters) - General Motors Co&#39;s   GM.N  Super Cruise once again edged Tesla&#39;s   TSLA.O  Autopilot in an evaluation of 17 vehicles equipped with active driving assistance systems (ADAS) by Consumer Reports, the testing organization said on Wednesday.\n A Tesla Model Y fitted with Autopilot finished \u201ca distant second,\u201d the group said, to a Cadillac CT6 equipped with Super Cruise, which GM is rolling out to more than 20 vehicles - including its new Hummer electric pickup truck - over the next three years.\n Safety and insurance researchers have frequently warned of the risks of consumers overestimating ADAS systems\u2019 abilities, a misconception increased by some automakers calling their products Autopilot, ProPilot or Co-Pilot.\n  In 2018, the Cadillac CT6 with Super Cruise scored higher than a Tesla Model 3 with Autopilot, in a Consumer Reports test of just four vehicles equipped with ADAS.\n In the latest test, conducted this summer on a track and on public roads, the Cadillac scored 69 points out of a possible 100, while the Tesla scored 57. A Lincoln Corsair equipped with Ford Motor Co&#39;s   F.N  Co-Pilot 360 system, finished third with 52.\n The critical difference in the Super Cruise system is a driver-facing infrared camera to make sure he or she is paying attention to the road and is ready to take over manual control when necessary, said Kelly Funkhouser, head of connected and automated vehicle testing at Consumer Reports.\n  The group noted that Autopilot can shut off abruptly in some situations, while Super Cruise did a better job of notifying the driver when the system is disengaging.\n In recent European safety testing, a Tesla Model 3 with Autopilot placed sixth out of 10 systems, getting high marks for performance and ability to respond to emergencies, but falling short on its ability to maintain a driver\u2019s focus on the road.", "posttime": "2020-10-30 00:36:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7279\u65af\u62c9,\u901a\u7528\u6c7d\u8f66,\u514d\u63d0,autopilot,\u7cfb\u7edf", "title": "\u7279\u65af\u62c9Autopilot\u5728\u514d\u63d0\u6d4b\u8bd5\u4e2d\u8fdc\u8fdc\u843d\u540e\u4e8e\u901a\u7528\u6c7d\u8f66\u7684Super Cruise", "title_en": "Tesla Autopilot 'a distant second' to GM's Super Cruise in hands-free test", "transed": 1, "url": "https://www.reuters.com/article/us-autos-selfdriving-safety-idUSKBN27D1B7", "via": "", "real_tags": ["\u7279\u65af\u62c9", "\u901a\u7528\u6c7d\u8f66", "\u514d\u63d0", "autopilot", "\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "4c7f6f5d56f848cd0715faf402243cd6.jpg", "infoid": 1032050, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u5ba3\u5e03\u65a5\u8d4475\u4ebf\u7f8e\u5143\u901a\u8fc7\u6bcd\u516c\u53f8Zenimax Media\u6536\u8d2d\u8d1d\u585e\u65af\u8fbe\u8f6f\u4ef6\u516c\u53f8(Bethesda Softworks)\u5df2\u7ecf\u4e00\u4e2a\u591a\u6708\u4e86\u3002\u4f46\u6e38\u620f\u73a9\u5bb6\u548c\u884c\u4e1a\u89c2\u5bdf\u5bb6\u4eec\u4ecd\u7136\u6709\u4e00\u4e2a\u4e9f\u5f85\u89e3\u51b3\u7684\u95ee\u9898\uff1a\u8fd9\u5bf9\u672a\u6765Bethesda\u6e38\u620f\u53d1\u5e03\u591a\u63a7\u5236\u53f0(\u5373\u975eXbox)\u7684\u524d\u666f\u610f\u5473\u7740\u4ec0\u4e48\uff1f\n\u8d1d\u585e\u65af\u8fbe\u7684\u6258\u5fb7\u00b7\u970d\u534e\u5fb7\u4ee5\u6267\u5bfc\u548c\u5236\u4f5c\u957f\u8001\u5377\u8f74\u548c\u7011\u5e03\u7cfb\u5217\u800c\u95fb\u540d\uff0c\u4ed6\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u76f4\u63a5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u5728\u63a5\u53d7GamesIndustry.biz\u91c7\u8bbf\u65f6\uff0c\u4ed6\u5bbd\u6cdb\u5730\u6697\u793a\uff0c\u4ed6\u9884\u8ba1\u672a\u6765\u8d1d\u585e\u65af\u8fbe\u7684\u4e3b\u8981\u7279\u8bb8\u7ecf\u8425\u6743\u5c06\u51fa\u73b0\u5728\u975eXbox\u6e38\u620f\u673a\u4e0a\u3002\n\u970d\u534e\u5fb7\u5728\u56de\u7b54\u6709\u5173\u6b64\u4e8b\u7684\u76f4\u63a5\u95ee\u9898\u65f6\u8868\u793a\uff1a\u6211\u540c\u610f\u8fd9\u662f\u5f88\u96be\u60f3\u8c61\u7684\u3002\u957f\u8001\u5377\u8f74VI\u4ec5\u9650\u4e8e\u5fae\u8f6f\u5e73\u53f0\u3002\n\u5728\u91c7\u8bbf\u7684\u5176\u4ed6\u5730\u65b9\uff0c\u970d\u534e\u5fb7\u627f\u8ba4\uff0c\u4f5c\u4e3a\u6536\u8d2d\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u53cc\u65b9\u8fd8\u6ca1\u6709\u5145\u5206\u8ba8\u8bba\u591a\u5e73\u53f0\u51fa\u7248\u7684\u7ec6\u8282\uff0c\u8fd9\u7b14\u4ea4\u6613\u8981\u5230\u660e\u5e74\u624d\u4f1a\u6572\u5b9a\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u7ecf\u5386\u8fc7\u8fd9\u4e00\u5207\uff0c\u4ed6\u8bf4\u3002\n\u970d\u534e\u5fb7\u8865\u5145\u8bf4\uff0c\u6211\u4eec\u786e\u5b9e\u8ba4\u4e3a\uff0c\u800c\u4e14\u6211\u4eec\u81ea\u5df1\u4e00\u76f4\u90fd\u662f\u8fd9\u6837\u8ba4\u4e3a\u7684\uff0c\u8fd9\u4e0e\u4e0a\u4e2a\u6708\u5fae\u8f6f(Microsoft)\u7684\u83f2\u5c14\u00b7\u65af\u5bbe\u585e(Phil Spencer)\u5728\u5f6d\u535a\u65b0\u95fb(Bloomberg News)\u8ba8\u8bba\u591a\u5e73\u53f0\u95ee\u9898\u65f6\u4f7f\u7528\u7684\u63aa\u8f9e\u4e0d\u8c0b\u800c\u5408\u3002\u4f5c\u4e3a\u5fae\u8f6f\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u4e5f\u4f1a\u8fd9\u4e48\u505a\u3002\u4ed6\u4eec\u5728\u5176\u4ed6\u5e73\u53f0\u4e0a\u90fd\u662f\u76f8\u5f53\u5f00\u653e\u7684\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728Xbox\u5185\u3002\u8fd9\u662f\u4e00\u4e2a\u5c40\u5916\u4eba\u7684\u89c2\u70b9\uff0c\u4f46\u5982\u679c\u4f60\u56de\u523010\u5e74\u524d\u7684\u5fae\u8f6f\uff0c\u4f60\u4e5f\u4e0d\u4f1a\u6307\u671b\u4ed6\u4eec\u5728iPhone\u4e0a\u62e5\u6709\u5b8c\u6574\u7684Office\u5957\u4ef6\u3002\n\u970d\u534e\u5fb7\u8fd8\u5f3a\u8c03\uff0c\u8d1d\u585e\u65af\u8fbe\u6709\u81ea\u4e3b\u6743[\u8fd0\u884c]\u6211\u4eec\u7684\u6e38\u620f\uff0c\u4ee5\u6211\u4eec\u62e5\u6709\u7684\u65b9\u5f0f[\u63a8\u52a8]\u4e00\u5207\uff0c\u5373\u4f7f\u4f5c\u4e3a\u5fae\u8f6f\u7684\u5b50\u516c\u53f8\u4e5f\u662f\u5982\u6b64\u3002\u6211\u4eec\u5f3a\u70c8\u8ba4\u540c\u4ed6\u4eec\u7684\u89c2\u70b9\uff0c\u5373\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u73a9\u6e38\u620f\uff0c\u65e0\u8bba\u4ed6\u4eec\u5728\u54ea\u91cc\uff0c\u4f7f\u7528\u4ec0\u4e48\u8bbe\u5907\u73a9\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5e26\u7ed9\u4ed6\u4eec\u3002\u6211\u4eec\u5bf9\u6b64\u975e\u5e38\u3001\u975e\u5e38\u70ed\u60c5\uff0c\u6700\u7ec8\u6211\u4eec\u76f8\u4fe1\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u6210\u4e3aXbox\u7684\u4e00\u90e8\u5206\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u662f\u7b2c\u4e09\u65b9\uff0c\u6765\u5236\u9020\u66f4\u597d\u7684\u4ea7\u54c1\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u5bb9\u6613\u5730\u63a5\u89e6\u5230\u8fd9\u4e9b\u4ea7\u54c1\u3002\n\u970d\u534e\u5fb7\u53d1\u8868\u8bc4\u8bba\u7684\u51e0\u5929\u524d\uff0c\u5fae\u8f6f\u7684\u83f2\u5c14\u00b7\u65af\u5bbe\u585e\u544a\u8bc9Kotaku\uff0c\u5fae\u8f6f\u8ba4\u4e3a\u5b83\u53ef\u4ee5\u6536\u56de\u5728\u8d1d\u585e\u65af\u8fbe\u768475\u4ebf\u7f8e\u5143\u6295\u8d44\uff0c\u800c\u4e0d\u9700\u8981\u5728PlayStation\u4e0a\u53d1\u5e03Elder Scrolls VI\u3002\u4f46\u65af\u5bbe\u585e\u5f88\u5feb\u5c31\u53d1\u8868\u4e86\u8fd9\u4e00\u58f0\u660e\uff0c\u5e76\u63d0\u51fa\u4e86\u4e00\u4e9b\u8b66\u544a\uff0c\u5f3a\u8c03\u8fd9\u4e0d\u4e00\u5b9a\u662f\u8be5\u516c\u53f8\u7684\u610f\u56fe\u3002\n\u4ed6\u8bf4\uff0c\u8fd9\u7b14\u4ea4\u6613\u4e0d\u662f\u4e3a\u4e86\u4ece\u53e6\u4e00\u4e2a\u73a9\u5bb6\u57fa\u7840\u4e0a\u593a\u8d70\u6e38\u620f\u7684\u3002\u6211\u4eec\u6574\u7406\u7684\u6587\u6863\u4e2d\u6ca1\u6709\u63d0\u5230\uff1a\u2018\u6211\u4eec\u5982\u4f55\u963b\u6b62\u5176\u4ed6\u73a9\u5bb6\u73a9\u8fd9\u4e9b\u6e38\u620f\uff1f\u2019\u6211\u4eec\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u80fd\u591f\u73a9\u6e38\u620f\uff0c\u800c\u4e0d\u662f\u66f4\u5c11\u7684\u4eba\u80fd\u591f\u53bb\u73a9\u6e38\u620f\u3002\u4f46\u6211\u4e5f\u4f1a\u8bf4\u5728\u6a21\u578b\u91cc\u3002\u9664\u4e86\u6211\u4eec\u652f\u6301\u7684\u5e73\u53f0\u4e4b\u5916\uff0c\u6211\u4e0d\u9700\u8981\u5728\u4efb\u4f55\u5176\u4ed6\u5e73\u53f0\u4e0a\u53d1\u8d27\u8fd9\u4e9b\u6e38\u620f\uff0c\u4ee5\u4fbf\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8ba9\u8fd9\u7b14\u4ea4\u6613\u5bf9\u6211\u4eec\u8d77\u4f5c\u7528\u3002\u4e0d\u7ba1\u90a3\u662f\u4ec0\u4e48\u610f\u601d\u3002&#34\uff1b\n\u5206\u6790\u8fd9\u4e9b\u58f0\u660e\uff0c\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u5fae\u8f6f\u548c\u8d1d\u585e\u65af\u8fbe\u4f3c\u4e4e\u90fd\u4e0d\u662f\u7279\u522b\u6709\u5174\u8da3\u5c06\u51fa\u7248\u5546\u7684\u5de8\u5927\u7279\u8bb8\u7ecf\u8425\u6743\u4f5c\u4e3a\u4eba\u8d28\uff0c\u4ee5\u63a8\u52a8\u4eba\u4eec\u5bf9\u5fae\u8f6f\u5e73\u53f0\u7684\u66f4\u591a\u5174\u8da3\u3002\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5fae\u8f6f\u5f88\u53ef\u80fd\u4f1a\u5927\u58f0\u9f13\u5439\u8fd9\u79cd\u6392\u4ed6\u6027\uff0c\u4ee5\u5e2e\u52a9\u63d0\u9ad8\u4eba\u4eec\u5bf9Xbox\u6e38\u620f\u673a\u9500\u552e\u548c\u6e38\u620f\u901a\u884c\u8bc1\u8ba2\u9605\u7684\u5174\u8da3\u3002\n\u4f46\u4e8b\u5b9e\u662f\uff0c\u4e24\u515a\u90fd\u4e0d\u60f3\u76f4\u63a5\u627f\u8bfa\u7ee7\u7eed\u4e3a\u8d1d\u585e\u65af\u8fbe\u7684\u6e38\u620f\u63d0\u4f9b\u591a\u63a7\u5236\u53f0\u652f\u6301\uff0c\u8fd9\u4e5f\u8868\u660e\u4ed6\u4eec\u4fdd\u7559\u4e86\u53ef\u80fd\u6027\uff0c\u4ee5\u9632\u4ed6\u4eec\u6539\u53d8\u4e3b\u610f\u3002\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u4eec\u90fd\u5728\u7b49\u5f85\u66f4\u5177\u4f53\u7684\u8ba1\u5212\u516c\u5e03\uff0c\u5f88\u53ef\u80fd\u662f\u5728\u660e\u5e74\u3002", "note_en": "It has been over a month now since Microsoft  announced it was spending $7.5 billion to purchase Bethesda Softworks via its parent company, Zenimax Media. But gamers and industry-watchers are still left with one burning question: what does this mean for  the prospect of multi-console (i.e. non-Xbox) releases for future Bethesda games?\n Bethesda&#39;s Todd Howard, known for his directing and producing work on  The Elder Scrolls and  Fallout series, isn&#39;t quite ready to answer that question directly. But in  an interview with GamesIndustry.biz, he broadly hinted that he expects Bethesda&#39;s major franchises to appear on non-Xbox consoles going forward.\n &#34;I would agree that is hard to imagine&#34;  The Elder Scrolls VI restricted to Microsoft platforms, Howard said in response to a direct question on the matter.\n Elsewhere in the interview, Howard admits that the parties haven&#39;t fully discussed the details of multiplatform publishing as part of the purchase deal, which won&#39;t be finalized until next year. &#34;We haven&#39;t gone through all of that, to be honest,&#34; he said.\n &#34;We do view it, and always have by ourselves, on a case-by-case basis,&#34; Howard added, echoing phrasing Microsoft&#39;s Phil Spencer  used with Bloomberg News when discussing the multiplatform issue last month. &#34;We&#39;ll do that as part of Microsoft as well. They&#39;ve been pretty open on other platforms and not just within Xbox. This is an outside perspective, but if you go back 10 years at Microsoft, you wouldn&#39;t expect them to have a full Office suite on an iPhone either.&#34;\n Howard also stressed Bethesda&#39;s autonomy to &#34;[run] our games and [push] everything the way that we have,&#34; even as a Microsoft subsidiary. &#34;We felt very strongly about their view of access; games for everybody that we can bring to anybody regardless of where they are, what devices they&#39;re playing on. We&#39;re very, very passionate about that, and at the end of the day we&#39;re convinced we&#39;ll make better products and get them to more people easily by being part of Xbox as opposed to being just a third party.&#34;\n  Howard&#39;s comments come a few days after Microsoft&#39;s Phil Spencer  told Kotaku that Microsoft felt it could recoup its $7.5 billion investment in Bethesda without releasing  The Elder Scrolls VI on PlayStation. But Spencer was quick to couch that statement with some caveats to stress that this was not necessarily the company&#39;s intent.\n &#34;This deal was not done to take games away from another player base like that,&#34; he said. &#34;Nowhere in the documentation that we put together was: \u2018How do we keep other players from playing these games?\u2019 We want more people to be able to play games, not fewer people to be able to go play games. But I\u2019ll also say in the model... I don\u2019t have to go ship those games on any other platform other than the platforms that we support in order to kind of make the deal work for us. Whatever that means.&#34;\n  Parsing these statements, for the time being, it seems like neither Microsoft nor Bethesda is particularly interested in holding the publisher&#39;s massive franchises hostage to drive more interest in Microsoft platforms. If they were, Microsoft would likely be trumpeting that exclusivity loudly to help drive interest in Xbox console sales and Game Pass subscriptions.\n But the fact that neither party wants to directly commit to continued multi-console support for Bethesda&#39;s games also suggests they&#39;re holding the possibility open, just in case they change their minds. For now, we&#39;re all left reading the tea leaves and waiting for more concrete plans to be announced, likely next year.", "posttime": "2020-10-30 00:16:22", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "elder,exec,\u6e38\u620f", "title": "Bethesda\u9ad8\u7ba1\u8868\u793a\uff0cXbox\u4e13\u5c5e\u7684Elder Scrolls\u662f\u201c\u5f88\u96be\u60f3\u8c61\u7684\u201d", "title_en": "Bethesda exec says an Xbox-exclusive Elder Scrolls is \u201chard to imagine\u201d", "transed": 1, "url": "https://arstechnica.com/gaming/2020/10/bethesda-exec-says-an-xbox-exclusive-elder-scrolls-is-hard-to-imagine/", "via": "", "real_tags": ["elder", "exec", "\u6e38\u620f"]}]