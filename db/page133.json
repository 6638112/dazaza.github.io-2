[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1067498, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56de\u52302012\u5e74\uff0c\u6211\u88ab\u9ed1\u4e86\u4e00\u70b9\u5de5\u5177\u7528\u4e8e\u5bf9\u56fe\u50cf\u8fdb\u884c\u9519\u8bef\u7ea7\u522b\u5206\u6790\u3002\u5766\u7387\u5730\u662f\u4e00\u4e2a\u5766\u7387\u7684UI\uff0c\u5b83\u5df2\u7ecf\u4f7f\u7528\u4e86250\u5c81\u4ee5\u4e0a\u7684\u7cdf\u7cd5UI\u548c\uff0339; 000\u4eba\u3002\n \u51e0\u5929\u524d\uff0c\u6211\u968f\u673a\u5076\u7136\u5730\u5076\u7136\u53d1\u73b0\u4e86\u6770\u897f\u5361\u5f17\u91cc\u5fb7\u91cc\u5e0c\uff0c\u5927\u536b\u82cf\u5361\u5c14\u548cJanLuk\u00e1\u0161.i\u7684\u6570\u5b57\u56fe\u50cf\u4e2d\u7684\u590d\u5236\u4f2a\u9020\u7eb8\u4e0a\u7684\u7eb8\u5f20\u68c0\u6d4b\u3002\u6211\u60f3\u770b\u770b\u6211\u662f\u5426\u53ef\u4ee5\u505a\u4e00\u4e9b\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u5e76\u4f7f\u5b83\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u3002\u5b83\u4e00\u4e2a\u5f88\u597d\u7684\u8c03\u6574\uff0c\u4f46\u6211\u7ed3\u675f\u4e86\u4e00\u4e9b\u5de5\u4f5c\u7684\u4e1c\u897f\u3002\u6211\u62cd\u4e86\u4e00\u4efd\u6211\u7684\u7167\u7247\u7535\u5f71\u4eff\u771f\u5668\u4f5c\u4e3aUI\u7684\u57fa\u7840\uff0c\u6539\u7f16\u4e86\u5b83\uff0c\u79fb\u690d\u4e86\u65e7\u7684ELA\u4ee3\u7801\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u65b0\u5de5\u5177\u3002\u7ed3\u679c\u88ab\u8c03\u7528urententical\u3002\n   \u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u4f7f\u7528\u7684\u6307\u5bfc\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u6bd2\u836f\u3002\u4f18\u60e0\u662f\u4e00\u4e2a12\u5206\u949f\u7684\u72ec\u767d\uff0c\u5f62\u5f0f\u7684\u8bb2\u89e3\u89c6\u9891ORA\u7684\u5168\u90e8\u675f\u5728\u5e2e\u52a9\u9875\u4e0a\u7684\u9690\u79d8\u6587\u672c\u3002\u6211\u5f88\u62b1\u6b49\uff0c\u4e5f\u4e0d\u662f\u975e\u5e38\u597d\u7684\u3002\n  \u6211\u731c\u8fd9\u4e2a\u65b0\u5de5\u5177\u7684\u6700\u6709\u8da3\u7684\u7279\u5f81\u662f\u514b\u9686\u68c0\u6d4b\u3002\u6240\u4ee5\u8ba9\u6211\u900f\u9732\u7ed9\u4f60\u6211\u5982\u4f55\u5236\u4f5c\u5b83\u7684\u5de5\u4f5c\u3002\u6211\u4f1a\u5c3d\u529b\u4fdd\u6301\u89e3\u91ca\u3002\u5982\u679c\u6709\u5174\u8da3IT Imight\u4ecd\u5728\u7a0d\u540e\u7f16\u5199\u7b97\u6cd5\u7684\u66f4\u65b0\u63cf\u8ff0\u3002\n  \u5728\u56fe\u50cf\u4e0a\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\uff0c\u5bf9\u4e8e\u7a97\u53e3\u7684\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u7a97\u53e3\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u90fd\u5c06\u7a97\u53e3\u4e2d\u7684\u6240\u6709\u50cf\u7d20\u4f5c\u4e3a\u952e\u4f5c\u4e3a\u952e\uff0c\u5982\u679c\u952e\u5df2\u7ecf\u5728\u8868\u4e2d\u6211\u4eec\u627e\u5230\u4e86\u514b\u9686\uff01\u6807\u8bb0\u5b83\u3002\u5426\u5219\u5c06\u952e\u6dfb\u52a0\u5230\u8868\u683c\u4e2d\n \u8fd9\u5b9e\u9645\u4e0a\u662f\u6709\u6548\u7684\uff0c\u4f46\u5b83\u53ea\u4f1a\u627e\u5230\u5b8c\u7f8e\u7684\u526f\u672c\u3002\u6211\u4eec\u5e0c\u671b\u5339\u914d\u66f4\u5177\u6a21\u7cca\u3002\n  \u56e0\u6b64\uff0c\u4e0b\u4e00\u4e2a\u5173\u952e\u6b65\u9aa4\u662f\u4f7f\u5339\u914d\u66f4\u5177\u6a21\u7cca\u3002\u6211\u4eec\u901a\u8fc7\u538b\u7f29\u952e\u6765\u4f7f\u5176\u66f4\u52a0\u552f\u4e00\u3002\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e00\u6b65\u8f6c\u6362\u4e3a\u5fae\u5c0f\u7684JPEG\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u50cf\u7d20\u4f5c\u4e3a\u952e\u5c06\u6bcf\u4e2a\u5c0f\u5757\u8f6c\u6362\u4e3a\u952e\u3002 \u3002\u5b9e\u9645\u5b9e\u73b0\u662f\u4f7f\u7528\u6b64\u6b65\u9aa4\u7684HAAR\u5c0f\u6ce2\u3002\u60a8\u53ef\u4ee5\u770b\u5230\u901a\u8fc7\u5355\u51fb\u514b\u9686\u68c0\u6d4b\u5de5\u5177\u4e2d\u7684\u663e\u793a\u91cf\u5316\u56fe\u50cf\u6765\u4f7f\u7528\u538b\u7f29\u5757\u3002 \n\u56e0\u6b64\uff0c\u4e0b\u4e00\u6b65\u662f\u8fc7\u6ee4\u6240\u6709\u5757\u5e76\u4e22\u5f03\u9557\u5b54\u3002\u8fd9\u662f\u901a\u8fc7\u5c06\u9ad8\u9891\u7387\u4e2d\u7684\u7ec6\u8282\u91cf\u8fdb\u884c\u6bd4\u8f83\u5230\u9608\u503c\u6765\u5b8c\u6210\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u51cf\u53bb\u5757\u7684\u6a21\u7cca\u56fe\u50cf\u8be5\u5757\u7136\u540e\u67e5\u770b\u50cf\u7d20\u7684\u5269\u4f59\u5269\u4f59\u3002\u5728\u7ec3\u4e60\u6a21\u7cca\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u5c0f\u6ce2\u6b65\u9aa4\u5df2\u7ecf\u4e3aUS\u5b8c\u6210\u4e86\u3002\u60a8\u53ef\u4ee5\u5c06\u88ab\u62d2\u7edd\u7684\u5757\u89c6\u4e3a\u91cf\u5316\u56fe\u50cf\u4e2d\u7684\u9ed1\u70b9\u3002\n \u5728\u6b64\u9636\u6bb5\uff0c\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4f46\u5b83\u4ecd\u7136\u663e\u793a\u4e86\u5f88\u591a\u6070\u597d\u6070\u597d\u770b\u8d77\u6765\u76f8\u4f3c\u7684\u5757\u7684\u65e0\u8da3\u526f\u672c\u3002\n  \u6240\u4ee5\u73b0\u5728\u6211\u4eec\u62cd\u6444\u4e86\u53e6\u4e00\u5f20\u6211\u4eec\u53d1\u73b0\u7684\u514b\u9686\u3002\u5982\u679c\u6e90\u548c\u76ee\u7684\u5730\u4e4b\u95f4\u7684\u8ddd\u79bb\u592a\u5c0f\uff0c\u6211\u4eec\u62d2\u7edd\u5b83\u4eec\u3002\u6211\u4eec\u770b\u770b\u4ece\u7c7b\u4f3c\u5730\u65b9\u5f00\u59cb\u7684\u514b\u9686\uff0c\u5e76\u88ab\u590d\u5236\u6210\u76f8\u4f3c\u7684\u65b9\u5411\u3002\u5982\u679c\u6211\u4eec\u53d1\u73b0\u5c11\u4e8e\u6700\u5c0f\u7684\u7c07\u5927\u5c0f\uff0c\u5176\u4ed6\u7c7b\u4f3c\u7684\u514b\u9686\uff0c\u6211\u4eec\u5c06\u514b\u9686\u4e22\u5f03\u4e3a\u566a\u97f3\u3002\n  \u6211\u5c1a\u672a\u5f04\u6e05\u695a\u5982\u4f55\u8bb8\u53ef\u4ee3\u7801\u548c\u8d44\u4ea7\u3002\u4f46\u6211\u8ba1\u5212\u4ee5\u67d0\u79cd\u5f62\u5f0f\u91ca\u653e\u5b83\u3002\n  \u4e00\u5982\u65e2\u5f80\u5730\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u548c\u5e16\u5b50\u4e0a\u90fd\u662f\u8d5e\u8d4f\u7684\u53cd\u9988\u3002\u60a8\u5e0c\u671b\u672a\u6765\u7684\u5e16\u5b50\u66f4\u6df1\u5165\u548c\u6280\u672f\u6216\u60a8\u53ef\u4ee5\u5982\u6b64\u7684\u5f53\u524d\u683c\u5f0f\uff1f ", "note_en": "Back in 2012 I hacked to together a little  tool for performing Error Level Analysis on images.Despite being such a simple tool with, frankly, a bad UI it has been used by over  250&#39;000 people.\n A few days ago I randomly stumbled across the paper  Detection of Copy-Move Forgery in Digital Images by Jessica Fridrich, David Soukal, and Jan Luk\u00e1\u0161.I wanted to see if I could do something similar and make it run in a browser.It took a good bit of tweaking but I ended up with something that works.I took a copy of my  photo film emulator as a base for the UI, adapted it a bit, ported the old ELA code and added some new tools.The result is called Forensically.\n   If you want some guidance on how to use forensically you get to pick your poison. On offer is a 12 minute monologue in form of a tutorial video ora whole bunch of cryptic text on the  help page. I&#39;m sorry that neither are very good.\n  I guess the most interesting feature of this new tool is the clone detection. So let me reveal to you how I made it work.I will try to keep the explanation simple. If there is interest in it Imight still write a more technical description of the algorithm later.\n  Create a TableMove a window over the image, for each position of the window Use all of the pixels in the window as a key If the key is already in the table We found a clone! Mark it. Else Add the key to the table\n This does actually work, but it will only find perfect copies. We want the matching to be more fuzzy.\n  So the next key step is to make the matching more fuzzy.We do this by compressing the key to make it less unique.You can think of this step as converting each of the littleblocks into a tiny JPEG and then using those pixels as a key.The actual implementation is using Haar wavelets for this step.You can see the compressed blocks that are used by clicking on  Show Quantized Image in the  Clone Detection Tool.\n   So the next step is to filter all of the blocks and to throw away the boring ones.This is done by comparing the amount of detail in the high frequencies to a threshold.You can think of it as subtracting a blurred image of the block from the block and then looking at how much is left of the pixels.In practice the blurring is not required because the wavelet step has already done it for us.You can see the rejected blocks as black spots in the quantized image.\n At this stage the algorithm works but it does still show a lot of uninteresting copies of blocks that just happen to look similar.\n  So now we take another look at all of the clones that we found.If the distance between the source and destination is too small we reject them.Next we look at clones that start from a similar place and are copied into a similar direction. If we find less than  Minimal Cluster Size other clones that are similar we discard the clone as noise.\n  I haven&#39;t figured out how I want to license the code and assets yet. But I do plan to release it in some form.\n  As always, feedback is appreciated both on the app and on the post.Would you like future posts to be more in depth and technical or do youlike the current format?", "posttime": "2021-06-23 01:09:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "web,photo,\u514b\u9686", "title": "forexe\uff0cWeb\u7684\u7167\u7247\u53d6\u8bc1\uff082015\uff09 ", "title_en": "Forensically, Photo Forensics for the Web (2015)", "transed": 1, "url": "https://29a.ch/2015/08/16/forensically-photo-forensics-for-the-web", "via": "", "real_tags": ["web", "photo", "\u514b\u9686"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067497, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7248\u6743\u6240\u6709\u00a92021W3C\u00ae\uff08\u9ebb\u7701\u7406\u5de5\u5b66\u9662\uff0cercim\uff0cKeio\uff0cBeihang\uff09\u3002 W3C\u8d23\u4efb\uff0c\u5546\u6807\u548c\u8bb8\u53ef\u8bc1\u6587\u4ef6\u8bb8\u53ef\u89c4\u5219\u9002\u7528\u3002\n  \u5206\u6563\u7684\u6807\u8bc6\u7b26\uff08DIDS\uff09\u662f\u4e00\u79cd\u65b0\u578b\u7684\u6807\u8bc6\u7b26\uff0c\u6982\u8ff0\u53ef\u9a8c\u8bc1\u7684\uff0c\u5206\u6563\u7684\u6570\u5b57\u8eab\u4efd\u3002 a\u662f\u6307\u7531DID\u7684\u63a7\u5236\u5668\u786e\u5b9a\u7684\u4efb\u4f55\u7d22\u8d54\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u4eba\uff0c\u7ec4\u7ec7\uff0c\u4e8b\u7269\uff0c\u6570\u636e\u6a21\u578b\uff0c\u62bd\u8c61\u5b9e\u4f53\u7b49\uff09\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8054\u5408\u7684\u6807\u8bc6\u7b26\uff0c\u5df2\u7ecf\u8bbe\u8ba1\u4e86\uff0c\u4f7f\u4ed6\u4eec\u53ef\u4ee5\u4e0e\u96c6\u4e2d\u6ce8\u518c\u7ba1\u7406\u673a\u6784\uff0c\u8eab\u4efd\u63d0\u4f9b\u8005\u548c\u8ba4\u8bc1\u6388\u6743\u89e3\u8026\u3002\u5177\u4f53\u800c\u8a00\uff0c\u867d\u7136\u5176\u4ed6\u7f14\u7ea6\u65b9\u53ef\u7528\u4e8e\u5e2e\u52a9\u542f\u7528\u4e0e\u4e4b\u76f8\u5173\u7684\u4fe1\u606f\uff0c\u4f46\u8be5\u8bbe\u8ba1\u4f7f\u5f97Theconstroler\u80fd\u591f\u8bc1\u660e\u5b83\u6765\u8bc1\u660e\u5b83\u800c\u4e0d\u9700\u8981\u5141\u8bb8\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u3002 DIDS\u662f\u5c06DIDSUBJECT\u4e0eDID\u6587\u4ef6\u76f8\u5173\u8054\u7684URI\uff0c\u5141\u8bb8\u4e0e\u8be5\u4e3b\u9898\u7684\u53ef\u4fe1\u7ec4\u7ec7\u8fdb\u884c\u53ef\u4fe1\u8d56\u3002\n  \u6bcf\u4e2a\u6587\u4ef6\u90fd\u53ef\u4ee5\u8868\u8fbe\u52a0\u5bc6\u6750\u6599\uff0c\u9a8c\u8bc1\u65b9\u6cd5\u6216\u670d\u52a1\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u7ec4\u673a\u5236\uff0c\u4f7f\u63a7\u5236\u5668\u80fd\u591f\u8bc1\u660e\u5bf9\u6b64\u7684\u63a7\u5236\u3002\u670d\u52a1\u4e0eDOD\u4e3b\u9898\u76f8\u5173\u7684\u4e92\u52a8\u3002\u5982\u679cDIDsubject\u662f\u8bf8\u5982\u6570\u636e\u6a21\u578b\u7684\u4fe1\u606f\u8d44\u6e90\uff0c\u5219\u786e\u5b9e\u53ef\u4ee5\u63d0\u4f9b\u8fd4\u56deDOT\u672c\u8eab\u7684\u624b\u6bb5\u3002\n  \u6b64\u6587\u6863\u6307\u5b9aDID\u8bed\u6cd5\uff0c\u5e38\u89c1\u7684\u6570\u636e\u6a21\u578b\uff0c\u6838\u5fc3\u5c5e\u6027\uff0c\u5e8f\u5217\u5316\u8868\u793a\uff0c\u6267\u884c\u64cd\u4f5c\uff0c\u5e76\u89e3\u6790\u89e3\u51b3\u5b83\u4eec\u6240\u4ee3\u8868\u7684\u8d44\u6e90\u3002\n  \u672c\u8282\u4ecb\u7ecd\u5728\u53d1\u5e03\u65f6\u672c\u6587\u6863\u7684\u72b6\u6001\u3002\u5176\u4ed6\u6587\u4ef6\u53ef\u80fd\u4f1a\u53d6\u4ee3\u672c\u6587\u6863\u3002\u76ee\u524d\u7684W3C\u51fa\u7248\u7269\u5217\u8868\u548c\u672c\u6280\u672f\u62a5\u544a\u7684\u6700\u65b0\u7248\u672c\u53ef\u4ee5\u5728HTTPS://www.w3.org/tr/\u7684W3C\u6280\u672f\u62a5\u544a\u7d22\u5f15\u4e2d\u627e\u5230\u3002\n  W3C\u5206\u6563\u7684\u6807\u8bc6\u7b26\u5de5\u4f5c\u7ec4\u5df2\u5c06\u672c\u6587\u6863\u53d1\u5e03\u4e3aW3C\u5019\u9009\u63a8\u8350\uff0c\u5e76\u8981\u6c42\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u548cDIDMethod\u89c4\u8303\u4f5c\u8005\u63d0\u4f9b\u5b9e\u9a8c\u5b9e\u65bd\uff0c\u8bbe\u8ba1\u4e86TOTEST\u672c\u6587\u6863\u4e2d\u6240\u6709\u529f\u80fd\u7684\u53ef\u5b9e\u73b0\u6027\u3002\n  \u8981\u9000\u51faW3C\u5019\u9009\u63a8\u8350\u9636\u6bb5\uff0cW3C\u6267\u884c\u7ec4WillRequire\u4e24\u4ef6\u4e8b\uff1a1\uff09\u5bf9\u4e8e\u673a\u5668\u53ef\u6d4b\u8bd5\u7684\u89c4\u8303\u6027\u9648\u8ff0\uff0c\u6bcf\u4e2a\u529f\u80fd\u81f3\u5c11\u4e24\u4e2a\u53ef\u4e92\u64cd\u4f5c\u7684\u5b9e\u73b0\uff0c2\uff09\u5bf9\u4e8e\u4e0d\u53ef\u901a\u8fc7\u673a\u5668\u53ef\u6d4b\u8bd5\u7684\u6b63\u5e38\u6027\uff0c\u81f3\u5c11\u6709\u4e24\u4e2a\u6f14\u793a\u6bcf\u4e2a\u529f\u80fd\u3002\u7279\u5f81\u88ab\u5b9a\u4e49\u4e3a\u89c4\u8303\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u529f\u80fd\u7edf\u4e00\u7684\u89c4\u8303\u6027\u8bed\u53e5\u3002 \n\u76ee\u524d\uff0c\u5b58\u572898\u5b9e\u9a8c\u6027\u7684\u65b9\u6cd5\u89c4\u8303\uff0c32\u5b9e\u9a8c\u8868\u660e\u65b9\u6cd5\u9a7e\u9a76\u5458\u9a7e\u9a76\u5458\uff0c\u786e\u5b9a\u4e0e\u7ed9\u5b9a\u5b9e\u73b0\u7684\u5019\u9009\u63a8\u8350\u6d4b\u8bd5\u5957\u4ef6\u662f\u7b26\u5408\u672c\u89c4\u8303\u548c\u63d0\u4ea4\u7ed9\u7b26\u5408\u6d4b\u8bd5\u5957\u4ef6\u7684\u5b9e\u73b0\u3002\u5efa\u8bae\u7406\u89e3\u5176\u6838\u5fc3\u7684\u6838\u5fc3\u95ee\u9898\u5e76\u8fdb\u884c\u4e86\u6838\u5fc3\u6d4b\u8bd5\u5957\u4ef6\uff0c\u6bcf\u4e2a\u6838\u5fc3\u6d4b\u8bd5\u5957\u4ef6\u90fd\u5305\u542b\u6700\u65b0\u7684\u7591\u8651\u5217\u8868\u548c\u5efa\u8bae\u7684\u957f\u54c8\u4e01\u53ef\u80fd\u5bfc\u81f4\u8be5\u89c4\u8303\u7684\u53d8\u66f4\u3002\n    \u5728\u98ce\u9669\u6807\u8bb0\u4e0a\u6dfb\u52a0\u5230\u5927\u591a\u6570DID\u53c2\u6570\uff0c\u9884\u671f\u4e0d\u5b9e\u73b0\u7684\u6570\u636e\u578b\u53f7\uff0c\u4ee5\u53caTheApplication / DID + LD + JSON\u5a92\u4f53\u7c7b\u578b\u3002\u8fd9\u79cd\u53d8\u5316\u5bfc\u81f4\u4e86DID WG\uff06\uff0339; sdecision\u6267\u884c\u7b2c\u4e8c\u4e2a\u5019\u9009\u63a8\u8350\u9636\u6bb5\u3002\u6240\u6709\u5176\u4ed6\u8bd1\u6587\u90fd\u662f\u7f16\u8f91\u6216\u9884\u6d4b\uff06\uff0334;\u5728\u98ce\u9669\uff06\uff0334;\u95ee\u9898\u6807\u8bb0\u3002\n  \u5220\u9664\u7528\u4e8eNextUpdate\u548cNextVersionID\u7684\u7279\u5b9a\u4e8e\u7279\u5b9a\u4e8e\u7279\u5b9a\u4e8e\u7279\u5b9a\u4e8e\u7279\u5b9a\u65b9\u6cd5ID\u7684\u98ce\u9669\u95ee\u9898\u6807\u8bb0\u3002\n    \u5f15\u5165\u62bd\u8c61\u6570\u636e\u6a21\u578b\uff0c\u53ef\u4ee5\u5e8f\u5217\u5316\u5230\u5305\u62ecJSON\u548cJSON-LD\u7684\u591a\u4e2a\u9879\u76ee\u3002\n  \u4ecb\u7ecdDID\u89c4\u8303\u6ce8\u518c\u8868\u7684\u76ee\u7684\u662f\u7528\u4e8e\u91cd\u65b0\u6ce8\u518c\u7684\u6269\u5c55\u5c5e\u6027\uff0c\u8868\u793a\uff0cDICATE INPUTMETADATA\u548cOUTPUT METADATA\uff0cDIDED METADATA\uff0cDID\u53c2\u6570\u548cDIDMETHOD\u3002\n      \u4e3a\u8eab\u4efd\u9a8c\u8bc1\uff0c\u65ad\u8a00\uff0c\u5173\u952e\u534f\u8bae\uff0c\u80fd\u529b\u8c03\u7528\u548c\u80fd\u529b\u4ee3\u8868\u6027\u7684\u76ee\u7684\u6dfb\u52a0\u9a8c\u8bc1\u5173\u7cfb\u3002\n  \u652f\u6301\u4e0eDID\u6587\u4ef6\u76f8\u5173\u591a\u6807\u8bc6\u7b26\u7684\u80fd\u529b\uff0c\u4f8b\u5982DID\u63a7\u5236\u5668\uff0c\u4e5f\u79f0\u4e3a\u7b49\u6548ID\u548c\u89c4\u8303ID\u3002 \n\u4e00\u4e2a\u8868\u793a\u90e8\u5206\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u62bd\u8c61\u6570\u636e\u6a21\u578b\u5982\u4f55\u4ee5\u5404\u79cd\u4e0d\u540c\u7684\u683c\u5f0f\u5448\u73b0\u548c\u6d88\u8017\u4ee5\u53ca\u6240\u6709\u8868\u793a\uff0c\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u4e00\u822c\u3002\n  \u8be6\u7ec6\u8bf4\u660e\u4e86DID\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u786e\u4fdd\u4e86URL\u89e3\u9664\u4e86interfaceDefinition\uff0c\u5373\u6240\u6709DIDS\u7684interfacedefinition\u9884\u8ba1\u5c06\u66dd\u5149\u4ee5\u53cainputs\u548c\u8f93\u51fa\u5230\u8fd9\u4e9b\u8fdb\u7a0b\u3002\n  \u6b22\u8fce\u6709\u5173\u672c\u6587\u4ef6\u7684\u8bc4\u8bba\u3002\u8bf7\u5728github\u4e0a\u53d1\u5e03\u95ee\u9898\uff0c\u6216\u53d1\u9001\u4e3b\u9898to public-did-wg@w3.org\uff08\u8ba2\u9605\uff0c\u6863\u6848\uff09\u3002\n  \u672c\u6587\u4ef6\u7531\u5206\u6563\u7684\u6807\u8bc6\u7b26\u5de5\u4f5c\u7ec4\u4f5c\u4e3a\u5019\u9009\u4eba\u63a8\u8350\u8349\u6848\u516c\u5e03\u3002\u672c\u6587\u6863\u65e8\u5728\u6210\u4e3aW3C\u63a8\u8350\u3002\n GitHub\u95ee\u9898\u662f\u5bf9\u672c\u89c4\u8303\u8ba8\u8bba\u7684\u9996\u9009\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u5411\u6211\u4eec\u7684\u90ae\u4ef6\u5217\u8868\u53d1\u9001\u8bc4\u8bba\u3002\u8bf7\u5c06\u5b83\u4eec\u53d1\u9001\u5230public-did-wg@w3.org\uff08\u8ba2\u9605\uff0c\u6863\u6848\uff09\u3002\n \u4f5c\u4e3a\u5019\u9009\u5efa\u8bae\u7684\u51fa\u7248\u5e76\u4e0d\u610f\u5473\u7740W3C\u4f1a\u5458\u8d44\u683c\u7684\u8ba4\u53ef\u3002\u5019\u9009\u5efa\u8bae\u8349\u6848\u5c06\u5de5\u4f5c\u7ec4\u62df\u5728\u968f\u540e\u7684\u5019\u9009\u63a8\u8350\u5feb\u7167\u4e2d\u7eb3\u5165\u66f4\u6539\u3002\n \u8fd9\u662f\u4e00\u4e2a\u6587\u4ef6\u8349\u6848\uff0c\u53ef\u4ee5\u968f\u65f6\u66f4\u65b0\uff0c\u66f4\u65b0\uff0c\u66ff\u6362\u6216\u5df2\u88ab\u5176\u4ed6\u6587\u4ef6\u66ff\u6362\u3002\u9664\u4e86\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u4e4b\u5916\uff0c\u5c06\u8fd9\u4efd\u6587\u4ef6\u5f15\u7528\u8fd9\u4efd\u6587\u4ef6\u662f\u4e0d\u5408\u9002\u7684\u3002 \n\u672c\u6587\u4ef6\u7531\u5728W3C\u4e13\u5229\u653f\u7b56\u4e0b\u8fd0\u8425\u7684\u96c6\u56e2\u5236\u4f5c\u3002 W3C\u7ef4\u62a4\u4e0e\u672c\u96c6\u56e2\u53ef\u4ea4\u4ed8\u6210\u679c\u6709\u5173\u7684\u4efb\u4f55\u4e13\u5229\u62ab\u9732\u7684\u516c\u5f00\u540d\u5355;\u8be5\u9875\u9762\u8fd8\u5305\u62ec\u7528\u4e8e\u62ab\u9732\u4e13\u5229\u7684\u8bf4\u660e\u3002\u5177\u6709\u5b9e\u9645\u77e5\u8bc6\u7684\u4e2a\u4eba\u5bf9\u4e2a\u4eba\u8ba4\u4e3a\u5305\u542b\u5fc5\u8981\u7d22\u8d54\u7684\u4e13\u5229\uff0c\u5fc5\u987b\u6839\u636eW3C\u4e13\u5229\u653f\u7b56\u7684\u7b2c6\u6761\u62ab\u9732\u4fe1\u606f\u3002\n       \u672c\u8282\u4ecb\u7ecdDIDS\u7684\u6b63\u5f0f\u8bed\u6cd5\uff0c\u5e76\u6267\u884c\u4e86URL\u3002\u672f\u8bed\uff06\uff0334;\u901a\u7528\uff06\uff0334;\u7528\u4e8e\u533a\u5206\u6b64\u5904\u5b9a\u4e49\u7684\u8bed\u6cd5\u4ece\u5176\u5404\u81ea\u7684\u7279\u5b9a\u65b9\u6cd5\u4e2d\u7684SyntaxDefined\u3002\n  \u901a\u7528\u7684\u65b9\u6cd5\u662f\u4e0e[RFC3986]\u7b26\u5408[RFC3986]\u7684URI\u65b9\u6848\u3002\u53ef\u4ee5\u5728\u4e0b\u9762\u627e\u5230ABNF\u5b9a\u4e49\uff0c\u5b83\u4f7f\u7528[RFC5234]\u4e2d\u7684\u8bed\u6cd5\u548cAlpha\u548cDigit\u7684\u76f8\u5e94\u5b9a\u4e49\u3002\u5728[RFC3986]\u4e2d\uff0c\u5728\u4e0b\u9762\u7684ABNF\u4e2d\u672a\u5b9a\u4e49\u7684\u6240\u6709\u5176\u4ed6\u89c4\u5219\u540d\u79f0\u3002\u6240\u6709\u786e\u5b9e\u5fc5\u987b\u7b26\u5408ThedId\u8bed\u6cd5ABNF\u89c4\u5219\u3002\n  did =\uff06\uff0334; DID\uff1a\uff06\uff0334;\u65b9\u6cd5\u540d\u79f0\uff06\uff0334;\uff1a\uff06\uff0334;\u7279\u5b9a\u65b9\u6cd5 -  idmethod-name = 1 *\u65b9\u6cd5 -  charmethod-char =\uff05x61-7a / digitmethod-id = *\uff08* iDchar\uff06\uff0334;\uff1a\uff06\uff0334;\uff091 * id\u6258arch = alpha / digit /\uff06 \uff0334;\u3002\uff06\uff0334; /\uff06\uff0334;  - \uff06\uff0334; /\uff06\uff0334; _\uff06\uff0334; / pct-encodedpct-encoded =\uff06\uff0334;\uff05\uff06\uff0334; Hexdig Hexdig\n  \u5bf9\u4e8e\u4e0eDID\u8bed\u6cd5\u6709\u5173\u7684\u65b9\u6cd5\u7684\u8981\u6c42\uff0cSeesection\u00a78.1\u65b9\u6cd5\u8bed\u6cd5\u3002\n  DIFT URL\u662f\u7279\u5b9a\u8d44\u6e90\u7684\u7f51\u7edc\u4f4d\u7f6e\u6807\u8bc6\u7b26\u3002\u5b83\u53ef\u7528\u4e8e\u68c0\u7d22\u50cfDeptations\uff0c\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u670d\u52a1\uff0cDID\u6587\u4ef6\u7684\u7279\u5b9a\u90e8\u5206\u6216\u5176\u4ed6\u8d44\u6e90\u7684\u8868\u73b0\u3002\n  \u4ee5\u4e0b\u662f\u4f7f\u7528[RFC5234]\u4e2d\u7684\u8bed\u6cd5\u7684ABNF\u5b9a\u4e49\u3002\u5b83\u6784\u5efa\u4e86\u7b2c3.1\u8282\u4e2d\u5b9a\u4e49\u7684DID STAVED\u8bed\u6cd5\u3002 [RFC3986]\u4e2d\u5c55\u793a\u7684\u8def\u5f84\u907f\u514d\uff0c\u67e5\u8be2\u548c\u7247\u6bb5\u7ec4\u4ef6\u3002\u6240\u6709URL\u90fd\u5fc5\u987b\u7b26\u5408ThedID URL\u8bed\u6cd5ABNF\u89c4\u5219\u3002\u5982\u7b2c8.1\u65b9\u6cd5\u8bed\u6cd5\u4e2d\u6240\u8ff0\uff0c\u65b9\u6cd5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u9650\u5236\u9aa8\u9ad3\u3002 \n\u867d\u7136\u53ef\u4ee5\u6839\u636eDID URL\u8bed\u6cd5\u7684\u4e3b\u7ba1\u4f7f\u7528\u5206\u53f7\uff08;\uff09\u5b57\u7b26\uff0c\u4f46\u662f\u672c\u89c4\u8303\u7684\u672a\u6765\u7248\u672c\u53ef\u4ee5\u4f7f\u7528\u5b83\u4f5c\u4e3a\u5982[MATRIX-URIS]\u4e2d\u6240\u8ff0\u7684\u53c2\u6570\u7684\u5b50\u5206\u9694\u7b26\u3002 Toavoid\u672a\u6765\u51b2\u7a81\uff0c\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u907f\u514d\u4f7f\u7528\u5b83\u3002\n  DID\u8def\u5f84\u4e0e\u901a\u7528URI\u8def\u5f84\u76f8\u540c\uff0c\u5e76\u7b26\u5408RFC 3986\uff0c\u7b2c3.3\u8282\u4e2d\u7684\u8def\u5f84\u907f\u514d\u7684ABRF\u89c4\u5219\u3002\u4e0eURI\u4e00\u6837\uff0c\u53ef\u4ee5\u901a\u8fc7DID\u65b9\u6cd5\u6307\u5b9a\u8def\u5f84\u8bed\u4e49\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u63a7\u5236\u5668\u80fd\u591f\u8fdb\u4e00\u6b65\u4e13\u6ce8\u4e8e\u8fd9\u4e9b\u8bed\u4e49\u3002\n  A\u67e5\u8be2\u4e0e\u901a\u7528URI\u67e5\u8be2\u76f8\u540c\uff0c\u7b26\u5408RFC 3986\u4e2d\u7684\u67e5\u8be2ABNF\u89c4\u5219\uff0c\u7b2c3.4\u8282\u3002\u5728\u7b2c3.2.1\u8282\u4e2d\u9610\u8ff0\u4e86\u8fd9\u79cd\u8bed\u6cd5\u6210\u679c\u3002\n  \u7247\u6bb5\u8bed\u6cd5\u548c\u8bed\u4e49\u662f\u5426\u4e0e\u901a\u7528\u6cdb\u8bc1\u76f8\u540c\uff0c\u5e76\u7b26\u5408RFC 3986\uff0c\u7b2c3.5\u8282\u4e2d\u7684Fragment ABNF\u89c4\u5219\u3002\n  \u5c06DID\u7247\u6bb5\u7528\u4f5c\u4e0eDidDocument\u6216\u5916\u90e8\u8d44\u6e90\u7684\u65b9\u6cd5\u65e0\u5173\u7684\u53c2\u8003\u3002\u788e\u7247identifer\u7684\u4e00\u4e9b\u4f8b\u5b50\u5982\u4e0b\u6240\u793a\u3002\n        \u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4e92\u64cd\u4f5c\u6027\uff0c\u6566\u4fc3\u5b9e\u65bd\u8005\u4ee5\u786e\u4fdd\u5728\u6a2a\u8de8\u8868\u793a\u7684\u65b9\u5f0f\u4e2d\u4ee5\u76f8\u540c\u65b9\u5f0f\u89e3\u91ca\u788e\u7247\uff08\u53c2\u89c1\u00a76\u8868\u793a\uff09\u3002\u4f8b\u5982\uff0cjonsjson\u6307\u9488[rfc6901]\u53ef\u4ee5\u5728did\u7247\u6bb5\u4e2d\u4f7f\u7528\uff0c\u5b83\u4e0d\u4f1a\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5728\u975eJSON\u8868\u793a\u4e2d\u8131\u8282\u3002\n  \u5728\u00a7B.2\u5e94\u7528\u7a0b\u5e8f/ DID + LD + JSON\u4e2d\uff0c\u5728\u672c\u8282\u4e2d\u4e0e\u8bed\u4e49\u4e0a\u7684\u8bed\u4e49\u4e0a\u517c\u5bb9\u7684\u7247\u6bb5\u6807\u8bc6\u7b26\u7684\u9644\u52a0\u8bed\u4e49\u3002\u5bf9\u4e8e\u4fe1\u606f\u4ea4\u6d41\u5982\u4f55\u53d6\u6d88\u5f15\u7528DID\u788e\u7247\uff0c\u8bf7\u53c2\u9605\u7b2c7.2\u8282\u7b2c7.2\u8282DID URL\u53d6\u6d88\u5f15\u7528\u3002 \nDID URL\u8bed\u6cd5\u652f\u6301\u57fa\u4e8e\u00a7\u67e5\u8be2\u4e2d\u63cf\u8ff0\u7684\u67e5\u8be2\u7ec4\u4ef6\u7684\u53c2\u6570\u7684\u7b80\u5355\u683c\u5f0f\u3002\u5c06DIDParameter\u6dfb\u52a0\u5230DIFT URL\u610f\u5473\u7740\u8be5\u53c2\u6570\u6210\u4e3a\u8d44\u6e90\u7684\u5206\u7c7b\u5668\u7684\u4e00\u90e8\u5206\u3002\n      \u6709\u4e9b\u53c2\u6570\u5b8c\u5168\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7684DIDMethod\u548c\u529f\u80fd\uff0c\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4e3a\u6240\u6709\u4eba\u505a\u7684\u3002\u5176\u4ed6DID\u65b9\u6cd5\u4e0d\u652f\u6301\u7684\u5176\u4ed6DID\u53c2\u6570\u3002\u5728aresupport\u4e2d\u7684\u53ef\u9009\u53c2\u6570\uff0c\u5b83\u4eec\u9884\u8ba1\u5c06\u5747\u5300\u5730\u8fd0\u884c\u5728DID\u65b9\u6cd5\u652f\u6301\u5b83\u4eec\u3002\u4e0b\u8868\u63d0\u4f9b\u4e86\u5e38\u89c1\u7684\u53c2\u6570\u7b26\u5408\u6240\u6709DID\u65b9\u6cd5\u7684\u65b9\u6cd5\u3002\u5bf9\u6240\u6709\u53c2\u6570\u7684\u652f\u6301\u662f\u53ef\u9009\u7684\u3002\n  \u5de5\u4f5c\u7ec4\u6b63\u5728\u5bfb\u6c42\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u5b9e\u65bd\u8005\u53cd\u9988\u3002\u5982\u679c\u5728Chandidate\u63a8\u8350\u671f\u7ed3\u675f\u65f6\u6ca1\u6709\u8db3\u591f\u7684\u5b9e\u73b0\u7ecf\u9a8c\uff0c\u5219\u5c06\u4ece\u89c4\u8303\u4e2d\u5220\u9664\u3002\n\u901a\u8fc7Service ID\u8bc6\u522b\u4eceDID\u6587\u6863\u4e2d\u7684\u670d\u52a1.IF\u5b58\u5728\uff0c\u5173\u8054\u7684\u503c\u5fc5\u987b\u662fASCII\u5b57\u7b26\u4e32\u3002\n  \u5de5\u4f5c\u7ec4\u6b63\u5728\u5bfb\u6c42\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u5b9e\u65bd\u8005\u53cd\u9988\u3002\u5982\u679c\u5728Chandidate\u63a8\u8350\u671f\u7ed3\u675f\u65f6\u6ca1\u6709\u8db3\u591f\u7684\u5b9e\u73b0\u7ecf\u9a8c\uff0c\u5219\u5c06\u4ece\u89c4\u8303\u4e2d\u5220\u9664\u3002\n\u6839\u636eRFC3986\u7b2c4.2\u8282\u7684\u76f8\u5bf9URI\u5f15\u7528\uff0c\u5b83\u6807\u8bc6\u670d\u52a1\u7aef\u70b9\u5904\u7684\u8d44\u6e90\uff0c\u5b83\u662f\u901a\u8fc7\u4f7f\u7528\u670d\u52a1\u53c2\u6570\u4eceDidDocument\u4e2d\u9009\u62e9\u7684\u8d44\u6e90\u3002\u5982\u679c\u5b58\u5728\uff0c\u5219\u5173\u8054\u7684\u503c\u5fc5\u987b\u662fASCII\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u5fc5\u987b\u4f7f\u7528\u767e\u5206\u6bd4\u7f16\u7801\u7684\u6838\u5fc3\u5b57\u7b26\u4f5c\u4e3a\u5728RFC3986Section 2.1\u4e2d\u6307\u5b9a\u3002\n  \u8bc6\u522b\u8981\u89e3\u6790\u7684\u7279\u5b9a\u7248\u672c\u7684DID\u6587\u4ef6\uff08reversion ID\u53ef\u4ee5\u662f\u987a\u5e8f\u7684\uff0c\u6216\u8005\u662fuuId\uff0c\u6216\u7279\u5b9a\u4e8e\u65b9\u6cd5\uff09.if\u5b58\u5728\uff0c\u5173\u8054\u7684\u503c\u5fc5\u987b\u662fASCII\u5b57\u7b26\u4e32\u3002 \n\u5de5\u4f5c\u7ec4\u6b63\u5728\u5bfb\u6c42\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u5b9e\u65bd\u8005\u53cd\u9988\u3002\u5982\u679c\u5728Chandidate\u63a8\u8350\u671f\u7ed3\u675f\u65f6\u6ca1\u6709\u8db3\u591f\u7684\u5b9e\u73b0\u7ecf\u9a8c\uff0c\u5219\u5c06\u4ece\u89c4\u8303\u4e2d\u5220\u9664\u3002\n\u8bc6\u522b\u8981\u89e3\u51b3\u7684DID\u6587\u4ef6\u7684\u67d0\u4e2a\u7248\u672c\u65f6\u95f4\u6233\u3002\u8fd9\u662f\uff0c\u5728Certaintime\u4e3aA\u6709\u6548\u7684DID\u6587\u4ef6\u3002\u5982\u679c\u5b58\u5728\uff0c\u5219\u5173\u8054\u7684\u503c\u5fc5\u987b\u662fASCII\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u662f\u6709\u6548\u7684XMLDateTime\u503c\uff0c\u5982W3C XML Schema\u5b9a\u4e49\u8bed\u8a00\uff08XSD\uff091.1\u7b2c2\u90e8\u5206\u7684\u7b2c3.3.7\u8282\u4e2d\u6240\u5b9a\u4e49\u7684\u7b2c2\u90e8\u5206\uff1a\u6570\u636e\u7c7b\u578b[XMLSchema11-2]\u3002\u6b64\u65e5\u671f\u65f6\u95f4\u503c\u5fc5\u987b\u4e3aUTC 00:00:00\u800c\u6ca1\u6709\u6b21\u7ea7\u4e8c\u8fdb\u5236\u7cbe\u5ea6\u3002\u5bf9\u4e8e\u4f8b\u5982\uff1a2020-12-20t19\uff1a17\uff1a47z\u3002\n  \u5de5\u4f5c\u7ec4\u6b63\u5728\u5bfb\u6c42\u5173\u4e8e\u6b64\u529f\u80fd\u7684\u5b9e\u65bd\u8005\u53cd\u9988\u3002\u5982\u679c\u5728Chandidate\u63a8\u8350\u671f\u7ed3\u675f\u65f6\u6ca1\u6709\u8db3\u591f\u7684\u5b9e\u73b0\u7ecf\u9a8c\uff0c\u5219\u5c06\u4ece\u89c4\u8303\u4e2d\u5220\u9664\u3002\nDID\u6587\u4ef6\u7684\u8d44\u6e90\u54c8\u5e0c\u503c\u4ee5\u6dfb\u52a0\u5b8c\u6574\u6027\u4fdd\u62a4\uff0c\u5728[hashlink]\u4e2dasspecized\u3002\u6b64\u53c2\u6570\u662f\u975e\u89c4\u8303\u6027\u7684\u3002\u5982\u679c\u5b58\u5728\uff0c\u5219\u5173\u8054\u503c\u5fc5\u987b\u662fASCII\u5b57\u7b26\u4e32\u3002\n  \u5b9e\u65bd\u8005\u4ee5\u53ca\u65b9\u6cd5\u89c4\u8303\u4f5c\u8005\u53ef\u80fd\u4f1auseadational\u5728\u8fd9\u91cc\u5217\u51fa\u7684\u53c2\u6570\u3002\u5bf9\u4e8eMaximicalInteroperability\uff0c\u5efa\u8bae\u4f7f\u7528DIDSpecification Registrics\u673a\u5236[DID-SPEC-REPARTIS]\uff0c\u4ee5\u907f\u514d\u4e0e\u4e0d\u540c\u8bed\u4e49\u76f8\u540c\u7684\u53c2\u6570\u7684\u5176\u4ed6\u7528\u9014\u8fdb\u884c\u78b0\u649e\u3002\n  \u5982\u679c\u5b58\u5728\u6e05\u6670\u7684\u7528\u4f8b\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570\uff0c\u5176\u4e2dParameterNeed\u662f\u5f15\u7528\u8d44\u6e90\u7684URL\u7684\u4e00\u90e8\u5206\uff0c\u5176\u4e0e\u5355\u72ec\u4f7f\u7528\u786e\u5b9e\u4e0d\u540c\u3002\u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u5c06\u5143\u6570\u636e\u4f20\u9012\u7ed9DID\u89e3\u6790\u5668\u53ef\u4ee5\u8868\u8fbe\u76f8\u540c\u7684\u529f\u80fd\uff0c\u5219\u9884\u8ba1\u4e0d\u4f1a\u4f7f\u7528\u53c2\u6570\u3002\u5728[DID-Resolution]\u4e2d\u8ba8\u8bba\u4e86\u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u53c2\u6570\u7684\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\u3002\n  DID DIST\u548cDID URL\u53d6\u6d88\u5f15\u7528\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u5c06\u8f93\u5165\u5143\u6570\u636e\u4f20\u9012\u7ed9DID URL\u7684ARENOT\u90e8\u5206\u7684\u89e3\u6790\u5668\u6765\u5f71\u54cd\uff08\u53c2\u89c1\u7b2c7.1.1\u8282\u7684\u89e3\u51b3\u65b9\u6848\u9009\u9879\uff09\u3002\u8fd9\u662f\u53ef\u6bd4\u8f83\u7684TOTP\uff0c\u5176\u4e2d\u67d0\u4e9b\u53c2\u6570\u53ef\u4ee5\u5305\u542b\u5728HTTP URL\u4e2d\uff0c\u5728\u53d6\u6d88\u5f15\u7528\u8fc7\u7a0b\u4e2d\u4f5c\u4e3aHTTP\u6807\u5934oraltern\u4f20\u9012\u3002 Theimportant\u7684\u533a\u522b\u662fDIDURL\u7684\u4e00\u90e8\u5206\u7684\u53c2\u6570\u5e94\u8be5\u7528\u4e8e\u6307\u5b9a\u54ea\u4e9b\u8d44\u6e90\u662f\u4e60\u60ef\u7684\uff0c\u800c\u8f93\u5165\u7684\u5143\u6570\u636e\u4e0d\u662fDID URL\u5149\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u63a7\u5236\u5982\u4f55\u89e3\u51b3\u8be5\u8d44\u6e90\u7684\u89e3\u91ca\u3002 \n\u4e00\u4e2a\u76f8\u5bf9\u7684URL\u662fDOD\u6587\u4ef6\u4e2d\u7684\u4efb\u4f55URL\u503c\uff0c\u5b83\u5728DOD\u4e2d\u5f00\u59cb\uff1a\uff06lt;\u65b9\u6cd5\u540d\u79f0\uff06gt;\uff1a\uff06lt;\u65b9\u6cd5 - \u7279\u5b9a\u4e8eid\uff06gt ;.\u5e38\u5207\u5730\uff0c\u5b83\u662f\u4efb\u4f55URL\u503c\uff0c\u5b83\u4e0d\u4f1a\u4ee5\u7b2c3.1\u8282\u4e2d\u5b9a\u4e49\u7684ABNF\u5f00\u5934\u3002 URL\u9884\u8ba1\u5c06\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u5f15\u7528\u8d44\u6e90\u3002\u76f8\u5bf9\u4e8eURL\u53ef\u80fd\u662f\u76f8\u5bf9\u8def\u5f84\u7ec4\u4ef6\uff0c\u67e5\u8be2\u53c2\u6570\u548c\u7247\u6bb5\u6807\u8bc6\u7b26\u3002\n  \u89e3\u6790\u76f8\u5bf9\u7684URL\u53c2\u8003\u65f6\uff0c\u5fc5\u987b\u4f7f\u7528RFC3986\u7b2c5\u8282\u4e2d\u6307\u5b9a\u7684\u7b97\u6cd5\uff1a\u5fc5\u987b\u4f7f\u7528\u53c2\u8003\u5206\u8fa8\u7387\u3002\u57fa\u672cURI\u503c\u662f\u4e0eDOD\u4e3b\u9898\u76f8\u52a0\u7684DID\uff0c\u8bf7\u53c2\u89c1\u7b2c5.1.1\u6bb5\u6240\u505a\u7684\u4e3b\u9898\u3002\u8be5\u8ba1\u5212\u662f\u505a\u8fc7\u7684\u3002\u8be5\u6743\u9650\u662f\uff06lt;\u65b9\u6cd5\u540d\u79f0\uff06gt;\uff1a\uff06lt;\u65b9\u6cd5 - \u7279\u5b9a\u4e8e\u65b9\u6cd5ID\uff06gt;\uff0c\u4ee5\u53ca\u5206\u522b\u5728\u00a7\u8def\u5f84\uff0c\u00a7\u67e5\u8be2\u548c\u00a7\u7247\u6bb5\u4e2d\u5b9a\u4e49\u7684\u8def\u5f84\uff0c\u67e5\u8be2\u548c\u788e\u7247\u503c\u3002\n  \u76f8\u5bf9\u4e8eURL\u901a\u5e38\u7528\u4e8e\u5f15\u7528\u9a8c\u8bc1\u65b9\u6cd5\u548c\u5728\u6ca1\u6709\u4f7f\u7528AbsolutuRL\u7684\u6587\u6863\u4e2d\u7684\u670d\u52a1\u3002\u5b58\u50a8\u5927\u5c0f\u662f\u8003\u8651\u56e0\u7d20\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u662fUseled URL\u4ee5\u51cf\u5c11DID\u6587\u6863\u7684\u5b58\u50a8\u5927\u5c0f\u3002\n  {\uff06\uff0334; @\u4e0a\u4e0b\u6587\uff06\uff0334 ;: [\uff06\uff0334; https\uff1a//www.w3.org/ns/did/v1&#34 ;,\uff06\uff0334; https\uff1a//w3id.org/security/suites / ed25519-2020 / v1\uff06\uff0334; ]\uff06\uff0334; ID\uff06\uff0334 ;:\uff06\uff0334;\u4f8b\uff1a123456789abcdefghi\uff06\uff0334 ;,\uff06\uff0334; verificationmethod\uff06\uff0334 ;: [{\uff06\uff0334; id\uff06\uff0334 ;:\uff06\uff0334; did\uff1a\uff06\uff0334; \uff1a123456789abcdefghi\uff03key-1\uff06\uff0334 ;,\uff06\uff0334;\u7c7b\u578b\uff06\uff0334 ;:\uff06\uff0334; ed25519verificedkey2020\uff06\uff0334; //\u5916\u90e8\uff08\u5c5e\u6027\u503c\uff09\uff06\uff0334;\u63a7\u5236\u5668\uff06\uff0334;\uff1a\u793a\u4f8b\uff1a123456789abcdefghi\uff06\uff0334 ;,\uff06\uff0334; pressekeymultibase\uff06\uff0334 ;:\uff06\uff0334; zh3c2avvlmv6gmmnam3uvajzpfkcjcwdwnzn6z3wxmqpv\uff06\uff0334; }\uff0c......]\uff0c\uff06\uff0334;\u8eab\u4efd\u9a8c\u8bc1\uff06\uff0334 ;: [//\u76f8\u5bf9\u4e8e\u7528\u4e8e\u5f15\u7528\u4e0a\u9762\u9a8c\u8bc1\u65b9\u6cd5\u7684URL; \uff03\u952e-1\uff06\uff0334; ]}\n  \u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u76f8\u5bf9\u7684URL\u503c\u5c06\u88ab\u8f6c\u6362\u4e3atoan\u7edd\u5bf9\u6267\u884c\u7684URL\u503c\u4e3a\uff1a\u793a\u4f8b\uff1a123456789abcdefghi\uff03key-1\u3002\n  \u672c\u89c4\u8303\u5b9a\u4e49\u4e86\u4e00\u79cd\u6570\u636e\u6a21\u578b\uff0c\u53ef\u7528\u4e8e\u8868\u8fbeDidDocuments\uff0c\u5e76\u6267\u884c\u6587\u6863\u6570\u636e\u7ed3\u6784\uff0c\u7136\u540e\u53ef\u4ee5\u662f\u5e8f\u5217\u5316\u7684\u591a\u4e2a\u5177\u4f53\u8868\u793a\u3002\u672c\u8282\u63d0\u4f9b\u4e86\u6570\u636e\u6a21\u578b\u7684AHigh\u7ea7\u63cf\u8ff0\uff0c\u5728\u6570\u636e\u6a21\u578b\u4e2d\u8868\u8fbe\u4e0d\u540c\u7c7b\u578b\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u65b9\u5f0f\u7684\u63cf\u8ff0\uff0c\u4ee5\u53ca\u7528\u4e8e\u6269\u5c55\u6570\u636e\u6a21\u578b\u7684\u6307\u4ee4\u3002\n  DOD\u6587\u4ef6\u7531\u6761\u76ee\u7684\u5730\u56fe\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6761\u76ee\u7531AKEY / VALEE\u5bf9\u7ec4\u6210\u3002 DOD\u6587\u6863\u6570\u636e\u6a21\u578b\u5305\u542b\u81f3\u5c11\u4e24\u500d\u7684\u6761\u76ee\u7c7b\u3002\u7b2c\u4e00\u7c7b\u6761\u76ee\u79f0\u4e3a\u5c5e\u6027\uff0c\u5e76\u5728\u7b2c5\u8282\u7b2c5\u8282\u4e2d\u6307\u5b9a\u3002\u7531\u7279\u5b9a\u4e8e\u4ee3\u8868\u7684\u6761\u76ee\u7ec4\u6210\u7684\u7b2c\u4e8c\u7c7b\uff0c\u5e76\u5728\u7b2c6\u8282\u4e2d\u6307\u5b9a\u3002 \nDOD\u6587\u6863\u6570\u636e\u6a21\u578b\u4e2d\u7684\u6240\u6709\u6761\u76ee\u5bc6\u94a5\u90fd\u662f\u5b57\u7b26\u4e32\u3002\u6240\u6709\u6761\u76ee\u503c\u90fd\u4f7f\u7528\u4e0b\u8868\u4e2d\u7684\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u8868\u793a\u6240\u6709\u6761\u76ee\u503c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8868\u793a\u90fd\u662f\u6bcf\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u5177\u4f53\u5e8f\u5217\u5316\u683c\u5f0f\u3002\n  \u6709\u9650\u7684\u952e/\u503c\u5bf9\u5e8f\u5217\uff0c\u6ca1\u6709\u952e\u5728[infra]\u4e2d\u51fa\u73b0\u4e24\u6b21asspecized\u3002\u5728[infra]\u4e2d\uff0c\u5730\u56fe\u6709\u65f6\u88ab\u79f0\u4e3a\u6709\u5e8f\u5730\u56fe\u3002\n    \u6709\u9650\u7684\u6709\u5e8f\u7684\u9879\u76ee\u5e8f\u5217\uff0c\u4e0d\u5305\u542b[infra]\u4e2d\u6307\u5b9a\u7684\u540c\u4e00\u9879\u76eeTwiceas\u3002\u4e00\u4e2a\u96c6\u5408\u6709\u65f6\u88ab\u79f0\u4e3a[infra]\u4e2d\u7684\u6709\u5e8f\u96c6\u3002\n  \u5728[XMLSchema11-2]\u4e2d\u6307\u5b9a\u7684DateTime\uff0c\u80fd\u591f\u65e0\u635f\u5730\u8868\u8fbe\u6240\u6709\u4f30\u503c\u7684\u65e5\u671f\u548c\u65f6\u95f4\u503c\u3002\n  \u901a\u5e38\u7528\u4e8e\u4ee3\u8868[infra]\u4e2d\u6307\u5b9a\u7684\u4eba\u7c7b\u53ef\u8bfb\u6717\u5e03\u7684\u4ee3\u7801\u5355\u5143\u5e8f\u5217\u3002\n  \u6ca1\u6709[XMLSchema11-2]\u4e2d\u89c4\u5b9a\u7684\u5c0f\u6570\u7ec4\u4ef6\u7684\u5b9e\u6570\u3002\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\uff0c\u6566\u4fc3\u5b9e\u65bd\u8005\u5728RFC8259\uff0c\u7b2c6\u8282\u4e2d\u9075\u5b88\u5173\u4e8eINTININTEGERS\u7684\u5efa\u8bae\uff0c\u7b2c6\u8282\uff1a\u6570\u5b57\u3002\n  \u901a\u5e38\u7528\u4e8e\u8fd1\u4f3c\u4efb\u610f\u5b9e\u9645\u6570\u5b57\u7684\u503c\uff0c\u5982\u6307\u5b9ain [xmlschema11-2]\u3002\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\uff0c\u6566\u4fc3\u5b9e\u65bd\u8005\u5728RFC8259\u4e2d\u9075\u5b88\u6709\u5173\u5173\u4e8eDoubles\u7684\u5efa\u8bae\uff0c\u7b2c6\u8282\uff1a\u6570\u5b57\u3002 \n\u7528\u4e8e\u6307\u793a\u7f3a\u5c11[infra]\u4e2d\u5b9a\u4e49\u7684\u503c\u7684\u503c\u3002\n  \u7531\u4e8e\u4ece[INFRA]\u4f7f\u7528\u7684\u6570\u636e\u6a21\u578b\uff0c\u4ece[INFRA]\u7684\u4f7f\u7528\u65b9\u6cd5\uff0c\u660e\u786e\u5730\u6392\u5e8f\u4e86\u53ef\u4ee5\u5305\u542b\u591a\u4e8e\u5355\u4f4d\u7684\u5c5e\u6027\u503c\uff0c\u4f8b\u5982\u5217\u8868\uff0c\u6620\u5c04\u548c\u96c6\u5408\u3002\u6240\u6709\u5217\u8868\u4f3c\u4e4e\u5728[infra]\u4e2d\u7684\u6240\u6709\u5217\u8868\u4f3c\u4e4e\u90fd\u662f\u8ba2\u8d2d\u7684\uff0c\u65e0\u8bba\u662f\u8ba2\u5355\u53ef\u8bc1\u5f0f\u3002\u51fa\u4e8e\u672c\u8bf4\u660e\u4e66\u7684\u76ee\u7684\uff0c\u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0c\u5426\u5219\u5730\u56fe\u548c\u8bbe\u7f6e\u6392\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u5e76\u4e14\u9884\u8ba1\u4e0d\u4f1a\u4ea7\u751f\u6216\u6d88\u8017\u786e\u5b9a\u6027\u5730\u79e9\u5e8f\u3002\n  \u4e3a\u4e86\u83b7\u5f97\u6700\u5927\u4e92\u64cd\u4f5c\u6027\uff0c\u5efa\u8bae\u6269\u5c55\u4f7f\u7528W3C\u7684\u89c4\u8303\u6ce8\u518c\u673a\u5236[DID-SPED-REPARTIS]\u3002\u5bf9\u65b0\u5c5e\u6027\u6216\u5176\u4ed6\u6269\u5c55\u7684\u4f7f\u7528\u673a\u5236\u662f\u552f\u4e00\u53ef\u786e\u4fdd\u4e24\u79cd\u4e0d\u540c\u7684\u8868\u793a\u80fd\u591f\u80fd\u591f\u4e00\u8d77\u62d6\u66f3\u7684\u7279\u5b9a\u673a\u5236\u3002\n  \u8868\u793a\u53ef\u4ee5\u5b9a\u4e49\u5176\u4ed6\u53ef\u6269\u5c55\u6027\u673a\u5236\uff0c\u5305\u62ecOnesthat\u4e0d\u9700\u8981\u4f7f\u7528DID\u89c4\u8303\u6ce8\u518c\u8868\u3002\u8fd9\u79cd\u62d3\u5c55\u673a\u6784\u5e94\u652f\u6301\u4efb\u4f55\u5176\u4ed6\u7b26\u5408\u6027\u4ee3\u8868\u7684\u65e0\u635f\u8f6c\u6362\u3002\u8868\u793a\u8868\u793a\u7684\u6269\u5c55\u673a\u5236\u5e94\u5c06\u6240\u6709\u5c5e\u6027\u548c\u8868\u793a\u8bed\u6cd5\u7684\u6620\u5c04\u5230\u6570\u636e\u6a21\u578b\u53ca\u5176\u7c7b\u578b\u7cfb\u7edf\u4e2d\u3002\n  \u4e24\u79cd\u7279\u5b9a\u5b9e\u73b0\u59cb\u7ec8\u53ef\u4ee5\u540c\u610f\u4e50\u961f\u5916\u51fa\u6dd8\u6c70\u7684\u4e92\u52a8\u7684\u6269\u5c55\u6216\u8868\u793a\uff0c\u8fd9\u4e9b\u6269\u5c55\u6216\u8868\u793a\u5728DID\u89c4\u8303\u6ce8\u518c\u8868[DID-SPEC-REPARTIES];\u6b64\u7c7b\u5b9e\u65bd\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u548c\u8f83\u5927\u7684\u751f\u6001\u7cfb\u7edf\u5c06\u662f\u53ef\u9760\u7684\u3002\n  \u786e\u5b9e\u4e0eDID\u6587\u4ef6\u76f8\u5173\u8054\u3002\u4f7f\u7528\u6570\u636e\u6a21\u578b\u8868\u8fbe\u4e86DID\u6587\u4ef6\uff0c\u53ef\u4ee5\u5e8f\u5217\u5316\u4e3a\u8868\u793a\u3002\u4ee5\u4e0b\u90e8\u5206\u5b9a\u4e49\u4e86DID\u6587\u6863\u4e2d\u7684\u5c5e\u6027\uff0c\u5305\u62ec\u662f\u5426\u9700\u8981\u8fd9\u4e9b\u5c5e\u6027\u6216\u53ef\u9009\u3002\u8fd9\u4e9b\u5c5e\u6027\u7b7e\u7f72\u4e86DOD\u4e3b\u9898\u4e0e\u4f2a\u88c5\u4ef7\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n  \u4e0b\u8868\u5305\u542b\u672c\u89c4\u8303\u7684\u6838\u5fc3\u5c5e\u6027\u7684\u4fe1\u606f\u5f15\u7528\uff0c\u5176\u4e2d\u5305\u542b\u9884\u671f\u503c\uff0c\u4ee5\u53ca\u5b83\u4eec\u662f\u5426\u88ab\u5224\u65ad\u3002\u8868\u4e2d\u7684\u5c5e\u6027\u540d\u79f0\u4e0eNuremativeDefinitions\u76f8\u5173\u8054\u4ee5\u53ca\u6bcf\u4e2a\u5c5e\u6027\u7684\u66f4\u8be6\u7ec6\u63cf\u8ff0\u3002 \n\u5c5e\u6027\u540d\u79f0ID\uff0c\u7c7b\u578b\u548c\u63a7\u5236\u5668\u53ef\u4ee5\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u5730\u56fe\u4e2d\u5b58\u5728\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u53ef\u80fd\u5dee\u5f02\u3002  \u4e00\u7ec4\u7b26\u5408\u00a7\u9a8c\u8bc1\u65b9\u6cd5\u5c5e\u6027\u4e2d\u7684\u89c4\u5219\u7684VerificationMethod\u6620\u5c04\uff0c\u6216\u7b26\u5408\u7b2c3.2\u8282\u4e2d\u89c4\u5219\u7684\u5b57\u7b26\u4e32\u6267\u884cURL\u8bed\u6cd5\u3002  \u4ee3\u8868JSON Web\u7684\u5730\u56fe  ...... ", "note_en": "Copyright \u00a9 2021   W3C \u00ae (  MIT,   ERCIM,  Keio,  Beihang). W3C  liability,  trademark and  permissive document license rules apply.\n  Decentralized identifiers (DIDs) are a new type of identifier thatenables verifiable, decentralized digital identity. A  DID refers to anysubject (e.g., a person, organization, thing, data model, abstract entity, etc.)as determined by the controller of the  DID. In contrast totypical, federated identifiers,  DIDs have been designed so that they maybe decoupled from centralized registries, identity providers, and certificateauthorities. Specifically, while other parties might be used to help enable thediscovery of information related to a  DID, the design enables thecontroller of a  DID to prove control over it without requiring permissionfrom any other party.  DIDs are  URIs that associate a  DIDsubject with a  DID document allowing trustable interactionsassociated with that subject.\n  Each  DID document can express cryptographic material,  verificationmethods, or  services, which provide a set of mechanisms enabling a DID controller to prove control of the  DID.  Services enabletrusted interactions associated with the  DID subject. A  DID mightprovide the means to return the  DID subject itself, if the  DIDsubject is an information resource such as a data model.\n  This document specifies the DID syntax, a common data model, core properties,serialized representations, DID operations, and an explanation of the processof resolving DIDs to the resources that they represent.\n  This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current  W3C publications and the latest revision of this technical report can be found in the   W3C technical reports index at https://www.w3.org/TR/.\n  The  W3C Decentralized Identifier Working Group has published this document as a W3C Candidate Recommendation and is requesting that software developers and DIDMethod specification authors provide experimental implementations designed totest the implementability of all of the features in this document.\n  To exit the  W3C Candidate Recommendation phase, the  W3C DID Working Group willrequire two things: 1) for normative statements that are machine testable, atleast two interoperable implementations per feature, and 2) for normativestatements that are not machine testable, at least two demonstrations ofimplementation per feature. A feature is defined as one or more functionallyrelated normative statements in the specification.\n  At present, there exist 98experimental DID Method specifications, 32 experimental DID Method driverimplementations, a Candidate Recommendation  test suite that determineswhether or not a given implementation is conformant with this specificationand 18 implementations submitted to the conformance test suite.Readers are advised to heed the  DID Core issues and   DID Core Test Suiteissues that each contain the latest list of concerns and proposed changesthat might result in alterations to this specification.\n    Addition of at risk markers to most of the DID Parameters, the data modeldatatypes that are expected to not be implemented, and theapplication/did+ld+json media type. This change resulted in the DID WG&#39;sdecision to perform a second Candidate Recommendation phase. All otherchanges were either editorial or predicted in &#34;at risk&#34; issue markers.\n  Removal of the at risk issue marker for the  method-specific-id ABNF ruleand for  nextUpdate and  nextVersionId.\n    The introduction of an abstract data model that can be serialized to multiplerepresentations including JSON and JSON-LD.\n  The introduction of a DID Specifications Registry for the purposes ofregistering extension properties, representations, DID Resolution inputmetadata and output metadata, DID Document metadata, DID parameters, and DIDMethods.\n      The addition of verification relationships for the purposes of authentication,assertion, key agreement, capability invocation and capability delegation.\n  The ability to support relating multiple identifiers with the DID Document,such as the DID controller, also known as, equivalent IDs, and canonical IDs.\n      A Representations section that details how the abstract data model can beproduced and consumed in a variety of different formats along with generalrules for all representations, producers, and consumers.\n  A section detailing the DID Resolution and DID URL Dereferencing interfacedefinition that all DID resolvers are expected to expose as well as inputsand outputs to those processes.\n  Comments regarding this document are welcome. Please file issuesdirectly on  GitHub,or send themto  public-did-wg@w3.org ( subscribe, archives).\n  This document was published by the  Decentralized Identifier Working Group as a Candidate Recommendation Draft. This document is intended to become a  W3C Recommendation.\n GitHub Issues are preferred for discussion of this specification. Alternatively, you can send comments to our mailing list. Please send them to  public-did-wg@w3.org ( subscribe,  archives).\n Publication as a Candidate Recommendation does not imply endorsement by the  W3C Membership. A Candidate Recommendation Draft integrates changes from the previous Candidate Recommendation that the Working Group intends to include in a subsequent Candidate Recommendation Snapshot.\n This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.\n  This document was produced by a group operating under the   W3C Patent Policy.  W3C maintains a  public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains  Essential Claim(s) must disclose the information in accordance with  section 6 of the  W3C Patent Policy.\n       This section describes the formal syntax for  DIDs and  DID URLs.The term &#34;generic&#34; is used to differentiate the syntax defined here from syntaxdefined by  specific  DID methods in their respectivespecifications.\n  The generic  DID scheme is a  URI scheme conformant with[  RFC3986]. The ABNF definition can be found below, which uses the syntax in[  RFC5234] and the corresponding definitions for  ALPHA and DIGIT. All other rule names not defined in the ABNF below aredefined in [  RFC3986]. All  DIDs  MUST conform to theDID Syntax ABNF Rules.\n  did = &#34;did:&#34; method-name &#34;:&#34; method-specific-idmethod-name = 1*method-charmethod-char = %x61-7A / DIGITmethod-specific-id = *( *idchar &#34;:&#34; ) 1*idcharidchar = ALPHA / DIGIT / &#34;.&#34; / &#34;-&#34; / &#34;_&#34; / pct-encodedpct-encoded = &#34;%&#34; HEXDIG HEXDIG\n  For requirements on  DID methods relating to the  DID syntax, seeSection  \u00a7\u00a0 8.1 Method Syntax.\n  A  DID URL is a network location identifier for a specific resource. It can be used to retrieve things like representationsof  DID subjects,  verification methods,  services,specific parts of a  DID document, or other resources.\n  The following is the ABNF definition using the syntax in [  RFC5234]. It buildson the  did scheme defined in  \u00a7\u00a0 3.1 DID Syntax. The   path-abempty,   query, and   fragment components aredefined in [  RFC3986]. All  DID URLs  MUST conform to theDID URL Syntax ABNF Rules.  DID methods can further restrict theserules, as described in  \u00a7\u00a0 8.1 Method Syntax.\n    Although the semicolon ( ;) character can be used according to therules of the  DID URL syntax, future versions of this specification mayuse it as a sub-delimiter for parameters as described in [  MATRIX-URIS]. Toavoid future conflicts, developers ought to refrain from using it.\n  A  DID path is identical to a generic  URI path and conforms to the path-abempty ABNF rule in  RFC\u00a03986, section 3.3. As with URIs, path semantics can be specified by  DID Methods, which inturn might enable  DID controllers to further specialize those semantics.\n  A  DID query is identical to a generic  URI query and conforms tothe  query ABNF rule in  RFC\u00a03986, section 3.4. This syntaxfeature is elaborated upon in  \u00a7\u00a0 3.2.1 DID Parameters.\n  DID fragment syntax and semantics are identical to a generic  URIfragment and conforms to the  fragment ABNF rule in  RFC\u00a03986, section 3.5.\n  A  DID fragment is used as a method-independent reference into a  DIDdocument or external  resource. Some examples of DID fragmentidentifiers are shown below.\n        In order to maximize interoperability, implementers are urged to ensure that DID fragments are interpreted in the same way across representations (see  \u00a7\u00a0 6. Representations). For example, whileJSON Pointer [  RFC6901] can be used in a  DID fragment, it will not beinterpreted in the same way across non-JSON  representations.\n  Additional semantics for fragment identifiers, which are compatible with andlayered upon the semantics in this section, are described for JSON-LDrepresentations in  \u00a7\u00a0 B.2 application/did+ld+json. For informationabout how to dereference a  DID fragment, see  \u00a7\u00a0 7.2 DID URL Dereferencing.\n  The  DID URL syntax supports a simple format for parameters based on the query component described in  \u00a7\u00a0Query. Adding a DIDparameter to a  DID URL means that the parameter becomes part of theidentifier for a  resource.\n      Some DID parameters are completely independent of of any specific  DIDmethod and function the same way for all  DIDs. Other DID parametersare not supported by all  DID methods. Where optional parameters aresupported, they are expected to operate uniformly across the  DID methodsthat do support them. The following table provides common DID parameters thatfunction the same way across all  DID methods. Support for all DID Parameters is  OPTIONAL.\n  The DID Working Group is seeking implementer feedback on this feature. If thereis not enough implementation experience with this feature at the end of theCandidate Recommendation period, it will be removed from the specification.\nIdentifies a service from the  DID document by service ID.If present, the associated value  MUST be an  ASCII string.\n  The DID Working Group is seeking implementer feedback on this feature. If thereis not enough implementation experience with this feature at the end of theCandidate Recommendation period, it will be removed from the specification.\nA relative  URI reference according to  RFC3986 Section 4.2 that identifies a resource at a  service endpoint, which is selected from a  DIDdocument by using the  service parameter.If present, the associated value  MUST be an  ASCII string and  MUST use percent-encoding forcertain characters as specified in  RFC3986Section 2.1.\n  Identifies a specific version of a  DID document to be resolved (theversion ID could be sequential, or a  UUID, or method-specific).If present, the associated value  MUST be an  ASCII string.\n  The DID Working Group is seeking implementer feedback on this feature. If thereis not enough implementation experience with this feature at the end of theCandidate Recommendation period, it will be removed from the specification.\nIdentifies a certain version timestamp of a  DID document to be resolved.That is, the  DID document that was valid for a  DID at a certaintime. If present, the associated value MUST be an  ASCII string which is a valid XMLdatetime value, as defined in section 3.3.7 of   W3C XML Schema Definition Language(XSD) 1.1 Part 2: Datatypes [  XMLSCHEMA11-2]. This datetime value  MUST benormalized to UTC 00:00:00 and without sub-second decimal precision.For example:  2020-12-20T19:17:47Z.\n  The DID Working Group is seeking implementer feedback on this feature. If thereis not enough implementation experience with this feature at the end of theCandidate Recommendation period, it will be removed from the specification.\nA resource hash of the  DID document to add integrity protection, asspecified in [  HASHLINK]. This parameter is non-normative.If present, the associated value  MUST be an ASCII string.\n  Implementers as well as  DID method specification authors might useadditional DID parameters that are not listed here. For maximuminteroperability, it is  RECOMMENDED that DID parameters use the DIDSpecification Registries mechanism [  DID-SPEC-REGISTRIES], to avoid collisionwith other uses of the same DID parameter with different semantics.\n  DID parameters might be used if there is a clear use case where the parameterneeds to be part of a  URL that references a  resource with moreprecision than using the  DID alone. It is expected that DID parametersare  not used if the same functionality can be expressed by passinginput metadata to a  DID resolver. Additional considerations forprocessing these parameters are discussed in [  DID-RESOLUTION].\n  The  DID resolution and the  DID URL dereferencing functions canbe influenced by passing input metadata to a  DID resolver that arenot part of the  DID URL (see  \u00a7\u00a0 7.1.1 DID Resolution Options). This is comparable toHTTP, where certain parameters could either be included in an HTTP URL, oralternatively passed as HTTP headers during the dereferencing process. Theimportant distinction is that DID parameters that are part of the  DIDURL should be used to specify  what  resource is beingidentified, whereas input metadata that is not part of the  DID URLshould be use to control  how that  resource is resolved ordereferenced.\n  A relative  DID URL is any URL value in a  DID document that doesnot start with  did:&lt;method-name&gt;:&lt;method-specific-id&gt;. Morespecifically, it is any URL value that does not start with the ABNF defined in \u00a7\u00a0 3.1 DID Syntax. The URL is expected to referencea  resource in the same  DID document. Relative  DID URLs  MAYcontain relative path components, query parameters, and fragment identifiers.\n  When resolving a relative  DID URL reference, the algorithm specified in RFC3986 Section 5: Reference Resolution MUST be used. The  base URI value is the  DID that isassociated with the  DID subject, see  \u00a7\u00a0 5.1.1 DID Subject. The scheme is  did. The  authority is acombination of  &lt;method-name&gt;:&lt;method-specific-id&gt;, and the path,  query, and  fragmentvalues are those defined in  \u00a7\u00a0Path,  \u00a7\u00a0Query, and  \u00a7\u00a0Fragment, respectively.\n  Relative  DID URLs are often used to reference  verification methodsand  services in a  DID Document without having to use absoluteURLs.  DID methods where storage size is a consideration might userelative URLs to reduce the storage size of  DID documents.\n  { &#34;@context&#34;: [ &#34;https://www.w3.org/ns/did/v1&#34;, &#34;https://w3id.org/security/suites/ed25519-2020/v1&#34; ] &#34;id&#34;: &#34;did:example:123456789abcdefghi&#34;, &#34;verificationMethod&#34;: [{ &#34;id&#34;: &#34;did:example:123456789abcdefghi#key-1&#34;, &#34;type&#34;: &#34;Ed25519VerificationKey2020&#34;,  // external (property value) &#34;controller&#34;: &#34;did:example:123456789abcdefghi&#34;, &#34;publicKeyMultibase&#34;: &#34;zH3C2AVvLMv6gmMNam3uVAjZpfkcJCwDwnZn6z3wXmqPV&#34; }, ...], &#34;authentication&#34;: [  // a relative DID URL used to reference a verification method above &#34; #key-1&#34; ]}\n  In the example above, the relative  DID URL value will be transformed toan absolute  DID URL value of did:example:123456789abcdefghi#key-1.\n  This specification defines a data model that can be used to express  DIDdocuments and DID document data structures, which can then be serializedinto multiple concrete  representations. This section provides ahigh-level description of the data model, descriptions of the ways differenttypes of properties are expressed in the data model, and instructions forextending the data model.\n  A  DID document consists of a  map of  entries, where each entry consists of akey/value pair. The  DID document data model contains at least twodifferent classes of entries. The first class of entries is called properties,and is specified in section  \u00a7\u00a0 5. Core Properties. The second classis made up of representation-specific entries, and is specified in section  \u00a7\u00a0 6. Representations.\n    All entry keys in the  DID document data model are  strings. All entry values are expressed using oneof the abstract data types in the table below, and each  representationspecifies the concrete serialization format of each data type.\n  A finite ordered sequence of key/value pairs, with no key appearing twice asspecified in [  INFRA]. A map is sometimes referred to as an ordered map in [  INFRA].\n    A finite ordered sequence of items that does not contain the same item twiceas specified in [  INFRA]. A set is sometimes referred to as an ordered set in [  INFRA].\n  A date and time value that is capable of losslessly expressing all valuesexpressible by a  dateTime as specified in[ XMLSCHEMA11-2].\n  A sequence of code units often used to represent human readable languageas specified in [  INFRA].\n  A real number without a fractional component as specified in[ XMLSCHEMA11-2]. To maximizeinteroperability, implementers are urged to heed the advice regardingintegers in  RFC8259, Section 6: Numbers.\n  A value that is often used to approximate arbitrary real numbers as specifiedin [ XMLSCHEMA11-2]. To maximizeinteroperability, implementers are urged to heed the advice regardingdoubles in  RFC8259, Section 6: Numbers.\n    A value that is used to indicate the lack of a value as defined in [  INFRA].\n  As a result of the  data model being defined usingterminology from [  INFRA], property values which can contain more than oneitem, such as  lists,  maps and  sets, are explicitly ordered. All list-likevalue structures in [  INFRA] are ordered, whether or not that order issignificant. For the purposes of this specification, unless otherwise stated,  map and  set ordering is not important andimplementations are not expected to produce or consume deterministically orderedvalues.\n  For maximum interoperability, it is  RECOMMENDED that extensions use the W3C DID Specification Registries mechanism [  DID-SPEC-REGISTRIES]. The use ofthis mechanism for new properties or other extensions is the only specifiedmechanism that ensures that two different  representations will be able towork together.\n  Representations  MAY define other extensibility mechanisms, including onesthat do not require the use of the DID Specification Registries. Such extensionmechanisms  SHOULD support lossless conversion into any other conformant representation. Extension mechanisms for a  representation  SHOULDdefine a mapping of all properties and  representation syntax into the  data model and its type system.\n  It is always possible for two specific implementations to agree out-of-band touse a mutually understood extension or  representation that is notrecorded in the DID Specification Registries [  DID-SPEC-REGISTRIES];interoperability between such implementations and the larger ecosystem will beless reliable.\n  A  DID is associated with a  DID document. DID documents are expressed using the data model and can be serialized into a representation.The following sections define the properties in a  DID document,including whether these properties are required or optional. These propertiesdescribe relationships between the  DID subject and the value of theproperty.\n  The following tables contain informative references for the core propertiesdefined by this specification, with expected values, and whether or not they arerequired. The property names in the tables are linked to the normativedefinitions and more detailed descriptions of each property.\n  The property names  id,  type, and controller can be present in maps of different typeswith possible differences in constraints.\n  A  set of either  VerificationMethod  maps that conform tothe rules in  \u00a7\u00a0Verification Method properties) or strings that conform to the rules in \u00a7\u00a0 3.2 DID URL Syntax.\n  A  map representing a JSON Web\n......", "posttime": "2021-06-23 01:09:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6807\u8bc6\u7b26,identifiers,\u65b9\u6cd5", "title": "\u5206\u6563\u7684\u6807\u8bc6\u7b26\uff08DIDS\uff09V1.0\uff08W3C\u8349\u6848\uff09 ", "title_en": "Decentralized Identifiers (DIDs) v1.0 (W3C draft)", "transed": 1, "url": "https://www.w3.org/TR/did-core/", "via": "", "real_tags": ["\u6807\u8bc6\u7b26", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067496, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53d1\u73b0\u533a\u5757\u94fe\u8ff7\u4eba\uff0c\u56e0\u4e3a\u5b83\u5c06\u5f00\u6e90\u8f6f\u4ef6\u5f00\u53d1\u6269\u5c55\u5230\u5f00\u6e90+\u72b6\u6001\u3002\u8fd9\u4f3c\u4e4e\u662f\u8ba1\u7b97\u8303\u5f0f\u7684\u771f\u6b63/\u4ee4\u4eba\u5174\u594b\u7684\u521b\u65b0;\u6211\u4eec\u4e0d\u4ec5\u4ec5\u662f\u5206\u4eab\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u4eab\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u8ba1\u7b97\u673a\uff0c\u4efb\u4f55\u4eba\u968f\u65f6\u968f\u5730\u90fd\u53ef\u4ee5\u4ee5\u6253\u5f00\u548c\u6743\u9650\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\u3002\u8fd9\u573a\u9769\u547d\u7684\u79cd\u5b50\u53ef\u4ee5\u4f7f\u7528\u6bd4\u7279\u5e01\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u53d8\u5f97\u597d\u5947\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5b83\uff0c\u4ee5\u4fbf\u76f4\u89c2\u5730\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002\u672c\u7740\u201c\u6211\u65e0\u6cd5\u521b\u9020\u7684\u4e1c\u897f\u6211\u4e0d\u660e\u767d\u7684\u7cbe\u795e\u201d\uff0c\u8fd9\u6bd4\u4ece\u5934\u5f00\u59cb\u5b9e\u73b0\u8fd9\u4e00\u70b9\u66f4\u597d\u7684\u65b9\u6cd5\uff1f\n \u6211\u4eec\u5c06\u5728\u7eafPython\u4e2d\u521b\u5efa\uff0c\u6570\u5b57\u7b7e\u540d\u548c\u5e7f\u64ad\u6bd4\u7279\u5e01\u4e8b\u52a1\uff0c\u4ece\u5934\u5f00\u59cb\uff0c\u4f9d\u8d56\u4e8e\u96f6\u4f9d\u8d56\u6027\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u6bd4\u7279\u5e01\u4ee3\u8868\u4ef7\u503c\u7684\u4e00\u70b9\u3002\u6211\u4eec\u53bb\u53d6\u5f97\u5b83\u3002\n \uff08BTW\u5982\u679c\u6b64\u5e16\u5b50\u7684\u89c6\u89c9\u683c\u5f0f\u70e6\u607c\u60a8\uff0c\u8bf7\u53c2\u9605jupyter\u7b14\u8bb0\u672c\u7248\u672c\uff0c\u5177\u6709\u76f8\u540c\u7684\u5185\u5bb9\uff09\u3002\n  \u9996\u5148\uff0c\u6211\u4eec\u5e0c\u671b\u751f\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u52a0\u5bc6\u8eab\u4efd\uff0c\u8fd9\u53ea\u662f\u79c1\u4eba\u516c\u5171\u952e\u9986\u3002\u6bd4\u7279\u5e01\u4f7f\u7528\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u800c\u4e0d\u662f\u66f4\u5e38\u89c1\u7684\u4e1c\u897f\uff0c\u5982RSA\u6765\u4fdd\u62a4\u4e8b\u52a1\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4e0d\u4f1a\u5b8c\u6574\u4ecb\u7ecdECC\uff0c\u56e0\u4e3a\u5176\u4ed6\u4eba\u5df2\u7ecf\u505a\u4e86\u660e\u663e\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u66f4\u597d\u7684\u5de5\u4f5c\u3002\u6211\u53d1\u73b0Andrea Corbellini\u7684\u535a\u5ba2\u6587\u7ae0\u7cfb\u5217\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u8d44\u6e90\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ea\u662f\u5199\u4ee3\u7801\uff0c\u4f46\u8981\u7406\u89e3\u4e3a\u4ec0\u4e48\u5b83\u6709\u6548\u5730\u5de5\u4f5c\uff0c\u60a8\u9700\u8981\u901a\u8fc7\u8be5\u7cfb\u5217\u3002\n \u597d\u5427\uff0c\u6240\u4ee5\u6bd4\u7279\u5e01\u4f7f\u7528secp256k1\u66f2\u7ebf\u3002\u4f5c\u4e3a\u4e00\u4e2a\u65b0\u624b\uff0c\u6211\u53d1\u73b0\u8fd9\u90e8\u5206\u4ee4\u4eba\u7740\u8ff7 - \u6709\u4e9b\u4e0d\u540c\u7684\u66f2\u7ebf\u56fe\u4e66\u9986\u60a8\u53ef\u4ee5\u9009\u62e9\u63d0\u4f9b\u4e0d\u540c\u7684\u4e13\u4e1a\u4eba\u5458\u548c\u7f3a\u70b9\u548c\u5c5e\u6027\u3002 NIST\u53d1\u5e03\u4e86\u6709\u5173\u54ea\u4e9b\u4f7f\u7528\u7684\u5efa\u8bae\uff0c\u4f46\u4eba\u4eec\u66f4\u559c\u6b22\u4f7f\u7528\u4e0d\u592a\u53ef\u80fd\u5728\u5176\u5185\u7f6e\u540e\u95e8\u7684\u5176\u4ed6\u66f2\u7ebf\uff08\u5982SECP256K1\uff09\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u692d\u5706\u66f2\u7ebf\u662f\u4e00\u4e2a\u76f8\u5f53\u4f4e\u7684\u6570\u5b66\u6570\u5b66\u5bf9\u8c61\uff0c\u53ea\u97003\u4e2a\u6574\u6570\u6765\u5b9a\u4e49\uff1a\n \u6765\u81ea__future__\u5bfc\u5165\u6ce8\u91ca#pep 563\uff1a\u63a8\u8fdf\u8bc4\u4f30dataclasses\u5bfc\u5165dataclass\uff03https://docs.python.org/3/library/dataclasses.html\u6211\u559c\u6b22\u8fd9\u4e9b\u5f88\u591a@ dataclass\u7c7b\u66f2\u7ebf\uff1a\uff06\uff0334;\uff06\uff03 34;\uff06\uff0334;\u692d\u5706\u66f2\u7ebf\u5728\u6574\u6570\u6a21\u578b\u7684\u6574\u6570\u9886\u57df\u3002\u66f2\u7ebf\u4e0a\u7684\u70b9\u6ee1\u8db3Y ^ 2 = x ^ 3 + a * x + b\uff08mod p\uff09\u3002 \uff06\uff0334;\uff06\uff0334;\uff06\uff0334; p\uff1aint\uff03\u7684\u6709\u9650\u5b57\u6bb5\u7684\u4e3b\u8981\u6a21\u91cfa\uff1aint b\uff1aint\uff03secp256k1\u4f7f\u7528a = 0\uff0cb = 7\uff0c\u6240\u4ee5\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5904\u7406\u66f2\u7ebfY ^ 2 = x ^ 3 + 7\uff08mod p \uff08P = 0x = 0x000000600/6000000/7800300c600c600c600c600ca\uff0c\uff03a = 0 b = 0x000000600/380000c0000c0000c0000c0000c0000c0000c0000c0000c000000ca\uff0c\uff03a = 0 b = 0x00000000c0000c0000c0000c0000c0000c0000c000000c600c600ca\uff0c\uff03a = 0 b = 0x0000000000/3000000ca\uff0c\uff03a = 0 b = 0x00000000000000/3000000capp = 7\uff09\n \u9664\u4e86\u5b9e\u9645\u66f2\u7ebf\u4e4b\u5916\uff0c\u6211\u4eec\u9664\u4e86\u66f2\u7ebf\u5468\u671f\u4e0a\u7684\u4e00\u4e2a\u56fa\u5b9a\u7684\u201c\u8d77\u70b9\u201d\uff0c\u5b83\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u53d1\u7535\u673a\u70b9\uff0c\u8fd9\u4e9b\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e9b\u56fa\u5b9a\u7684\u201c\u8d77\u59cb\u70b9\u201d\u7528\u4e8e\u5728\u66f2\u7ebf\u5468\u56f4\u542f\u52a8\u201c\u968f\u673a\u884c\u8d70\u201d\u3002\u53d1\u7535\u673a\u662f\u516c\u5f00\u7684\uff0c\u5e76\u540c\u610f\u6301\u7eed\uff1a \n@ dataclass\u7c7b\u70b9\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\u4e0a\u7684\u6574\u6570\u70b9\uff08x\uff0cy\uff09\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\uff1a\u66f2\u7ebfX\uff1aINT Y\uff1aINT G =\u70b9\uff08bitcoin_curve\uff0cX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\uff0cY = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\uff09\uff03\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u8be5\u53d1\u7535\u673a\u70b9\u7684\u786e\u662f\u66f2\u7ebf\uff0c\u5373\uff0cY 1 2 = X ^ 3 + 7\uff08MOD p\uff09\u6253\u5370\uff08\uff06\uff0334;\u53d1\u7535\u673a\u5728\u66f2\u7ebf\u4e0a\uff1a\uff06\uff0334;\uff08g\u3002y ** 2  -  g.x ** 3  -  7\uff09\uff05bitcoin_curve\u3002p == 0\uff09\uff03\u4e00\u4e9b\u5176\u4ed6\u5b8c\u5168\u968f\u673a\u7684\u70b9\u5f53\u7136\u4e0d\u4f1a\u5728\u66f2\u7ebf\u4e0a\uff0c_MOST_\u53ef\u80fd\u4f1a\u968f\u673a\u8fdb\u53e3\u3002\u79cd\u5b50\uff081337\uff09x =\u968f\u673a\u3002 RandRange\uff080\uff0c\u6bd4\u7279\u5e01_Curve\u3002P\uff09Y =\u968f\u673a\u3002 RandRange\uff080\uff0c\u6bd4\u7279\u5e01_Curve\u3002P\uff09\u6253\u5370\uff08\uff06\uff0334;\u5b8c\u5168\u968f\u673a\u70b9\u4e0d\u662f\uff1a\uff06\uff0334;\uff08y ** 2  -  x ** 3  -  7\uff09\uff05\u6bd4\u7279\u5e01_curve\u3002p == 0\uff09\n  \u6700\u540e\uff0c\u5df2\u77e5\u751f\u6210\u70b9G\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u6709\u6548\u5730\u662f\u6211\u4eec\u5728\u66f2\u7ebf\u5468\u56f4\u7684\u5468\u671f\u4e0a\u7684\uff08x\uff0cy\uff09\u6574\u6570\u5143\u7ec4\u65b9\u9762\u4f7f\u7528\u7684\u201c\u8bbe\u7f6e\u7684\u5927\u5c0f\u201d\u3002\u6211\u559c\u6b22\u5c06\u6b64\u4fe1\u606f\u7ec4\u7ec7\u6210\u4e00\u4e2a\u66f4\u591a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6211\u4f1a\u8c03\u7528\u751f\u6210\u5668\uff1a\n @ dataclass\u7c7b\u751f\u6210\u5668\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f2\u7ebf\u4e0a\u7684\u53d1\u7535\u673a\uff1a\u521d\u59cb\u70b9\u548c\uff08\u9884\u8ba1\uff09\u79e9\u5e8f\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; g\uff1a\u70b9\uff03\u66f2\u7ebf\u4e0a\u7684\u53d1\u7535\u70b9n\uff1aint\uff03\u53d1\u7535\u70b9\u7684\u987a\u5e8f\uff0c\u6240\u4ee50 * g = n * g = inf bitcoin_gen =\u751f\u6210\u5668\uff08g = g\uff0c\uff03g\u7684\u987a\u5e8f\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u53ef\u4ee5\u5728\u6570\u5b66\u4e0a\u6d3e\u751fN = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBAAEDCE6AF48A03BBFD25E8CD0364141\n \u8bf7\u6ce8\u610f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\uff0c\u8fd9\u4e00\u5207\u90fd\u53ea\u662f\u5bf9\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5b9a\u4e49\uff0c\u5e76\u7528\u4e0e\u6bd4\u7279\u5e01\u4e2d\u4f7f\u7528\u7684\u692d\u5706\u66f2\u7ebf\u76f8\u5173\u7684\u516c\u77e5\u5e38\u6570\u586b\u5145\u5b83\u4eec\u3002\u8fd9\u5373\u5c06\u6539\u53d8\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u51c6\u5907\u597d\u751f\u6210\u6211\u4eec\u7684\u79c1\u94a5\u3002\u79c1\u94a5\uff08\u6216\u201c\u79d8\u5bc6\u5bc6\u94a5\u201d\u5982\u6211\u6240\u8bf4\u7684\uff09\u5373\u5c06\u5230\u6765\uff09\u53ea\u662f\u6ee1\u8db31\uff06lt; = key\uff06lt;\u7684\u968f\u673a\u6574\u6570\u3002 n\uff08\u53ec\u56den\u662fg\u7684\u987a\u5e8f\uff09\uff1a\n \uff03secret_key = random.randrange\uff081\uff0cbitcoin_gen.nn\uff09\uff03\u8fd9\u662f_would_ do secret_key = int\u7684\u65b9\u5f0f\u3002 from_bytes\uff08B\uff06\uff0339; Andrej\u5f88\u9177\uff1aP\uff06\uff0339;\uff0c\uff06\uff0339; Big\uff06\uff0339;\uff09\uff03\u8fd9\u662f\u6211\u5c06\u5982\u4f55\u4e3a\u518d\u73b0\u6027assert 1\uff06lt; secret_key\uff06lt;\u6bd4\u7279\u5e01_gen\u3002 n\u6253\u5370\uff08secret_key\uff09\n  \u8fd9\u662f\u6211\u4eec\u7684\u79d8\u5bc6\u5bc6\u94a5 - \u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u7a81\u51fa\u7684\u6574\u6570\uff0c\u4f46\u4efb\u4f55\u77e5\u9053\u5b83\u53ef\u4ee5\u63a7\u5236\u4e0e\u5b83\u76f8\u5173\u7684\u6bd4\u7279\u5e01\u533a\u5757\u94fe\u4e2d\u62e5\u6709\u7684\u6240\u6709\u8d44\u91d1\u3002\u5728\u6700\u7b80\u5355\u7684\uff0c\u6700\u5e38\u89c1\u7684vanilla\u7528\u4f8b\u7684\u6bd4\u7279\u5e01\u662f\u63a7\u5236\u60a8\u5e10\u6237\u7684\u5355\u4e2a\u201c\u5bc6\u7801\u201d\u3002\u5f53\u7136\uff0c\u5728\u6211\u4e0a\u9762\u7684\u4e00\u4e9b\u5176\u4ed6Andrej\u624b\u52a8\u751f\u6210\u4e86\u4ed6\u4eec\u7684\u79d8\u5bc6\u5bc6\u94a5\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0e\u8fd9\u4e2a\u79d8\u5bc6\u5bc6\u94a5\u76f8\u5173\u7684\u94b1\u5305\u5f88\u53ef\u80fd\u662f\u96f6\u6bd4\u7279\u5e01\u7684\u5e73\u8861:)\u3002\u5982\u679c\u5b83\u6ca1\u6709\uff0c\u6211\u4eec\u786e\u5b9e\u975e\u5e38\u5e78\u8fd0\u3002\n \u6211\u4eec\u73b0\u5728\u8981\u751f\u6210\u516c\u94a5\uff0c\u8fd9\u662f\u4e8b\u60c5\u5f00\u59cb\u53d8\u5f97\u6709\u8da3\u7684\u5730\u65b9\u3002\u516c\u94a5\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u4ece\u6dfb\u52a0\u53d1\u7535\u673a\u70b9\u5230\u81ea\u8eab\u7684\u79d8\u5bc6\u65f6\u95f4\u3002\u5373\uff0c\u6211\u4eec\u6709\uff1apublic_key = g + g + g +\uff08\u79d8\u5bc6\u952e\u65f6\uff09+ g = secret_key * G.\u8bf7\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684'+'\uff08\u6dfb\u52a0\uff09\u548c'*'\uff08\u6b21\uff09\u7b26\u53f7\u90fd\u975e\u5e38\u7279\u522b\uff0c\u7565\u5fae\u6df7\u6dc6\u3002\u79d8\u5bc6\u5bc6\u94a5\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u4f46\u662f\u53d1\u7535\u673a\u70b9G\u662f\u4e00\u4e2a\uff08x\uff0cy\uff09\u5143\u7ec4\uff0c\u5b83\u662f\u66f2\u7ebf\u4e0a\u7684\u70b9\uff0c\u5bfc\u81f4\uff08x\uff0cy\uff09\u5143\u7ec4\u516c\u94a5\uff0c\u518d\u6b21\u66f2\u7ebf\u4e0a\u7684\u4e00\u4e2a\u70b9\u3002\u8fd9\u662f\u6211\u4eec\u5fc5\u987b\u5728\u692d\u5706\u66f2\u7ebf\u4e0a\u5b9e\u9645\u5b9a\u4e49\u52a0\u6cd5\u8fd0\u7b97\u7b26\u7684\u5730\u65b9\u3002\u5b83\u5177\u6709\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u5b9a\u4e49\u548c\u51e0\u4f55\u89e3\u91ca\uff08\u89c1\u4e0a\u9762\u7684Andrea\u7684\u53d1\u5e03\uff09\uff0c\u4f46\u5b9e\u9645\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355\uff1a \nWarning: Can only detect less than 5000 characters\nWarning: Can only detect less than 5000 characters", "note_en": "I find blockchain fascinating because it extends open source software development to open source + state. This seems to be a genuine/exciting innovation in computing paradigms; We don\u2019t just get to share code, we get to share a running computer, and anyone anywhere can use it in an open and permissionless manner. The seeds of this revolution arguably began with Bitcoin, so I became curious to drill into it in some detail to get an intuitive understanding of how it works. And in the spirit of \u201cwhat I cannot create I do not understand\u201d, what better way to do this than implement it from scratch?\n We are going to create, digitally sign, and broadcast a Bitcoin transaction in pure Python, from scratch, and with zero dependencies. In the process we\u2019re going to learn quite a bit about how Bitcoin represents value. Let\u2019s get it.\n (btw if the visual format of this post annoys you, see the  jupyter notebook version, which has identical content).\n  First we want to generate a brand new cryptographic identity, which is just a private, public keypair. Bitcoin uses  Elliptic Curve Cryptography instead of something more common like RSA to secure the transactions. I am not going to do a full introduction to ECC here because others have done a significantly better job, e.g. I found  Andrea Corbellini\u2019s blog post series to be an exceptional resource. Here we are just going to write the code but to understand why it works mathematically you\u2019d need to go through the series.\n Okay so Bitcoin uses the  secp256k1 curve. As a newbie to the area I found this part fascinating - there are entire libraries of different curves you can choose from which offer different pros/cons and properties. NIST publishes recommendations on which ones to use, but people prefer to use other curves (like secp256k1) that are less likely to have backdoors built into them. Anyway, an elliptic curve is a fairly low dimensional mathematical object and takes only 3 integers to define:\n from  __future__  import  annotations  # PEP 563: Postponed Evaluation of Annotations from  dataclasses  import  dataclass  # https://docs.python.org/3/library/dataclasses.html I like these a lot @ dataclass class  Curve :  &#34;&#34;&#34; Elliptic Curve over the field of integers modulo a prime. Points on the curve satisfy y^2 = x^3 + a*x + b (mod p). &#34;&#34;&#34;  p :  int  # the prime modulus of the finite field  a :  int  b :  int # secp256k1 uses a = 0, b = 7, so we&#39;re dealing with the curve y^2 = x^3 + 7 (mod p) bitcoin_curve  =  Curve (  p  =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F ,  a  =  0x0000000000000000000000000000000000000000000000000000000000000000 ,  # a = 0  b  =  0x0000000000000000000000000000000000000000000000000000000000000007 ,  # b = 7 )\n In addition to the actual curve we define a Generator point, which is just some fixed \u201cstarting point\u201d on the curve\u2019s cycle, which is used to kick off the \u201crandom walk\u201d around the curve. The generator is a publicly known and agreed upon constant:\n @ dataclass class  Point :  &#34;&#34;&#34; An integer point (x,y) on a Curve &#34;&#34;&#34;  curve :  Curve  x :  int  y :  int G  =  Point (  bitcoin_curve ,  x  =  0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798 ,  y  =  0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 , ) # we can verify that the generator point is indeed on the curve, i.e. y^2 = x^3 + 7 (mod p) print ( &#34;Generator IS on the curve: &#34; ,  ( G . y ** 2  -  G . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # some other totally random point will of course not be on the curve, _MOST_ likely import  random random . seed ( 1337 ) x  =  random . randrange ( 0 ,  bitcoin_curve . p ) y  =  random . randrange ( 0 ,  bitcoin_curve . p ) print ( &#34;Totally random point is not: &#34; ,  ( y ** 2  -  x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n  Finally, the order of the generating point G is known, and is effectively the \u201csize of the set\u201d we are working with in terms of the (x,y) integer tuples on the cycle around the curve. I like to organize this information into one more data structure I\u2019ll call Generator:\n @ dataclass class  Generator :  &#34;&#34;&#34; A generator over a curve: an initial point and the (pre-computed) order &#34;&#34;&#34;  G :  Point  # a generator point on the curve  n :  int  # the order of the generating point, so 0*G = n*G = INF bitcoin_gen  =  Generator (  G  =  G ,  # the order of G is known and can be mathematically derived  n  =  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 , )\n Notice that we haven\u2019t really done anything so far, it\u2019s all just definition of some data structures, and filling them with the publicly known constants related to the elliptic curves used in Bitcoin. This is about to change, as we are ready to generate our private key. The private key (or \u201c secret key\u201d as I\u2019ll call it going forward) is simply a random integer that satisfies 1 &lt;= key &lt; n (recall n is the order of G):\n # secret_key = random.randrange(1, bitcoin_gen.n) # this is how you _would_ do it secret_key  =  int . from_bytes ( b &#39;Andrej is cool :P&#39; ,  &#39;big&#39; )  # this is how I will do it for reproducibility assert  1  &lt;=  secret_key  &lt;  bitcoin_gen . n print ( secret_key )\n  This is our secret key - it is a a pretty unassuming integer but anyone who knows it can control all of the funds you own on the Bitcoin blockchain, associated with it. In the simplest, most common vanilla use case of Bitcoin it is the single \u201cpassword\u201d that controls your account. Of course, in the exceedingly unlikely case that some other Andrej manually generated their secret key as I did above, the wallet associated with this secret key most likely has a balance of zero bitcoin :). If it didn\u2019t we\u2019d be very lucky indeed.\n We are now going to generate the  public key, which is where things start to get interesting. The public key is the point on the curve that results from adding the generator point to itself secret_key times. i.e. we have: public_key = G + G + G + (secret key times) + G = secret_key * G. Notice that both the \u2018+\u2019 (add) and the \u2018*\u2019 (times) symbol here is very special and slightly confusing. The secret key is an integer, but the generator point G is an (x,y) tuple that is a Point on the Curve, resulting in an (x,y) tuple public key, again a Point on the Curve. This is where we have to actually define the Addition operator on an elliptic curve. It has a very specific definition and a geometric interpretation (see Andrea\u2019s post above), but the actual implementation is relatively simple:\n INF  =  Point ( None ,  None ,  None )  # special point at &#34;infinity&#34;, kind of like a zero def  extended_euclidean_algorithm ( a ,  b ):  &#34;&#34;&#34; Returns (gcd, x, y) s.t. a * x + b * y == gcd This function implements the extended Euclidean algorithm and runs in O(log b) in the worst case, taken from Wikipedia. &#34;&#34;&#34;  old_r ,  r  =  a ,  b  old_s ,  s  =  1 ,  0  old_t ,  t  =  0 ,  1  while  r  !=  0 :  quotient  =  old_r  //  r  old_r ,  r  =  r ,  old_r  -  quotient  *  r  old_s ,  s  =  s ,  old_s  -  quotient  *  s  old_t ,  t  =  t ,  old_t  -  quotient  *  t  return  old_r ,  old_s ,  old_t def  inv ( n ,  p ):  &#34;&#34;&#34; returns modular multiplicate inverse m s.t. (n * m) % p == 1 &#34;&#34;&#34;  gcd ,  x ,  y  =  extended_euclidean_algorithm ( n ,  p )  # pylint: disable=unused-variable  return  x  %  p def  elliptic_curve_addition ( self ,  other :  Point )  -&gt;  Point :  # handle special case of P + 0 = 0 + P = 0  if  self  ==  INF :  return  other  if  other  ==  INF :  return  self  # handle special case of P + (-P) = 0  if  self . x  ==  other . x  and  self . y  !=  other . y :  return  INF  # compute the &#34;slope&#34;  if  self . x  ==  other . x :  # (self.y = other.y is guaranteed too per above check)  m  =  ( 3  *  self . x ** 2  +  self . curve . a )  *  inv ( 2  *  self . y ,  self . curve . p )  else :  m  =  ( self . y  -  other . y )  *  inv ( self . x  -  other . x ,  self . curve . p )  # compute the new point  rx  =  ( m ** 2  -  self . x  -  other . x )  %  self . curve . p  ry  =  ( - ( m * ( rx  -  self . x )  +  self . y ))  %  self . curve . p  return  Point ( self . curve ,  rx ,  ry ) Point . __add__  =  elliptic_curve_addition  # monkey patch addition into the Point class\n I admit that it may look a bit scary and understanding and re-deriving the above took me a good half of a day. Most of the complexity comes from all of the math being done with modular arithmetic. So even simple operations like division \u2018/\u2019 suddenly require algorithms such as the modular multiplicative inverse  inv. But the important thing to note is that everything is just a bunch of adds/multiplies over the tuples (x,y) with some modulo p sprinkled everywhere in between. Let\u2019s take it for a spin by generating some trivial (private, public) keypairs:\n # if our secret key was the integer 1, then our public key would just be G: sk  =  1 pk  =  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # if it was 2, the public key is G + G: sk  =  2 pk  =  G  +  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 ) # etc.: sk  =  3 pk  =  G  +  G  +  G print ( f &#34; secret key:  { sk } \\n  public key:  { ( pk . x ,  pk . y ) } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( pk . y ** 2  -  pk . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n secret key: 1 public key: (55066263022277343669578718895168534326250603453777594175500187360389116729240, 32670510020758816978083085130507043184471273380659243275938904335757337482424)Verify the public key is on the curve: True secret key: 2 public key: (89565891926547004231252920425935692360644145829622209833684329913297188986597, 12158399299693830322967808612713398636155367887041628176798871954788371653930)Verify the public key is on the curve: True secret key: 3 public key: (112711660439710606056748659173929673102114977341539408544630613555209775888121, 25583027980570883691656905877401976406448868254816295069919888960541586679410)Verify the public key is on the curve: True\n Okay so we have some keypairs above, but we want the public key associated with our randomly generator secret key above. Using just the code above we\u2019d have to add G to itself a very large number of times, because the secret key is a large integer. So the result would be correct but it would run very slow. Instead, let\u2019s implement the \u201cdouble and add\u201d algorithm to dramatically speed up the repeated addition. Again, see the post above for why it works, but here it is:\n def  double_and_add ( self ,  k :  int )  -&gt;  Point :  assert  isinstance ( k ,  int )  and  k  &gt;=  0  result  =  INF  append  =  self  while  k :  if  k  &amp;  1 :  result  +=  append  append  +=  append  k  &gt;&gt;=  1  return  result # monkey patch double and add into the Point class for convenience Point . __rmul__  =  double_and_add # &#34;verify&#34; correctness print ( G  ==  1 * G ) print ( G  +  G  ==  2 * G ) print ( G  +  G  +  G  ==  3 * G )\n  # efficiently calculate our actual public key! public_key  =  secret_key  *  G print ( f &#34;x:  { public_key . x } \\n y:  { public_key . y } &#34; ) print ( &#34;Verify the public key is on the curve: &#34; ,  ( public_key . y ** 2  -  public_key . x ** 3  -  7 )  %  bitcoin_curve . p  ==  0 )\n  With the private/public key pair we\u2019ve now generated our crypto identity. Now it is time to derive the associated Bitcoin wallet address. The wallet address is not just the public key itself, but it can be deterministically derived from it and has a few extra goodies (such as an embedded checksum). Before we can generate the address though we need to define some hash functions. Bitcoin uses the ubiquitous SHA-256 and also RIPEMD-160. We could just plug and play use the implementations in Python\u2019s  hashlib, but this is supposed to be a zero-dependency implementation, so  import hashlib is cheating. So first here is the SHA256 implementation I wrote in pure Python following the (relatively readable) NIST  FIPS PUB 180-4 doc:\n def  gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace ():  &#34;&#34;&#34; SHA256 implementation. Follows the FIPS PUB 180-4 description for calculating SHA-256 hash function https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf Noone in their right mind should use this for any serious reason. This was written purely for educational purposes. &#34;&#34;&#34;  import  math  from  itertools  import  count ,  islice  # -----------------------------------------------------------------------------  # SHA-256 Functions, defined in Section 4  def  rotr ( x ,  n ,  size = 32 ):  return  ( x  &gt;&gt;  n )  |  ( x  &lt;&lt;  size  -  n )  &amp;  ( 2 ** size  -  1 )  def  shr ( x ,  n ):  return  x  &gt;&gt;  n  def  sig0 ( x ):  return  rotr ( x ,  7 )  ^  rotr ( x ,  18 )  ^  shr ( x ,  3 )  def  sig1 ( x ):  return  rotr ( x ,  17 )  ^  rotr ( x ,  19 )  ^  shr ( x ,  10 )  def  capsig0 ( x ):  return  rotr ( x ,  2 )  ^  rotr ( x ,  13 )  ^  rotr ( x ,  22 )  def  capsig1 ( x ):  return  rotr ( x ,  6 )  ^  rotr ( x ,  11 )  ^  rotr ( x ,  25 )  def  ch ( x ,  y ,  z ):  return  ( x  &amp;  y ) ^  ( ~ x  &amp;  z )  def  maj ( x ,  y ,  z ):  return  ( x  &amp;  y )  ^  ( x  &amp;  z )  ^  ( y  &amp;  z )  def  b2i ( b ):  return  int . from_bytes ( b ,  &#39;big&#39; )  def  i2b ( i ):  return  i . to_bytes ( 4 ,  &#39;big&#39; )  # -----------------------------------------------------------------------------  # SHA-256 Constants  def  is_prime ( n ):  return  not  any ( f  for  f  in  range ( 2 , int ( math . sqrt ( n )) + 1 )  if  n % f  ==  0 )  def  first_n_primes ( n ):  return  islice ( filter ( is_prime ,  count ( start = 2 )),  n )  def  frac_bin ( f ,  n = 32 ):  &#34;&#34;&#34; return the first n bits of fractional part of float f &#34;&#34;&#34;  f  -=  math . floor ( f )  # get only the fractional part  f  *=  2 ** n  # shift left  f  =  int ( f )  # truncate the rest of the fractional content  return  f  def  genK ():  &#34;&#34;&#34; Follows Section 4.2.2 to generate K The first 32 bits of the fractional parts of the cube roots of the first 64 prime numbers: 428a2f98 71374491 b5c0fbcf e9b5dba5 3956c25b 59f111f1 923f82a4 ab1c5ed5 d807aa98 12835b01 243185be 550c7dc3 72be5d74 80deb1fe 9bdc06a7 c19bf174 e49b69c1 efbe4786 0fc19dc6 240ca1cc 2de92c6f 4a7484aa 5cb0a9dc 76f988da 983e5152 a831c66d b00327c8 bf597fc7 c6e00bf3 d5a79147 06ca6351 14292967 27b70a85 2e1b2138 4d2c6dfc 53380d13 650a7354 766a0abb 81c2c92e 92722c85 a2bfe8a1 a81a664b c24b8b70 c76c51a3 d192e819 d6990624 f40e3585 106aa070 19a4c116 1e376c08 2748774c 34b0bcb5 391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3 748f82ee 78a5636f 84c87814 8cc70208 90befffa a4506ceb bef9a3f7 c67178f2 &#34;&#34;&#34;  return  [ frac_bin ( p  **  ( 1 / 3.0 ))  for  p  in  first_n_primes ( 64 )]  def  genH ():  &#34;&#34;&#34; Follows Section 5.3.3 to generate the initial hash value H^0 The first 32 bits of the fractional parts of the square roots of the first 8 prime numbers. 6a09e667 bb67ae85 3c6ef372 a54ff53a 9b05688c 510e527f 1f83d9ab 5be0cd19 &#34;&#34;&#34;  return  [ frac_bin ( p  **  ( 1 / 2.0 ))  for  p  in  first_n_primes ( 8 )]  # -----------------------------------------------------------------------------  def  pad ( b ):  &#34;&#34;&#34; Follows Section 5.1: Padding the message &#34;&#34;&#34;  b  =  bytearray ( b )  # convert to a mutable equivalent  l  =  len ( b )  *  8  # note: len returns number of bytes not bits  # append but &#34;1&#34; to the end of the message  b . append ( 0b10000000 )  # appending 10000000 in binary (=128 in decimal)  # follow by k zero bits, where k is the smallest non-negative solution to  # l + 1 + k = 448 mod 512  # i.e. pad with zeros until we reach 448 (mod 512)  while  ( len ( b ) * 8 )  %  512  !=  448 :  b . append ( 0x00 )  # the last 64-bit block is the length l of the original message  # expressed in binary (big endian)  b . extend ( l . to_bytes ( 8 ,  &#39;big&#39; ))  return  b  def  sha256 ( b :  bytes )  -&gt;  bytes :  # Section 4.2  K  =  genK ()  # Section 5: Preprocessing  # Section 5.1: Pad the message  b  =  pad ( b )  # Section 5.2: Separate the message into blocks of 512 bits (64 bytes)  blocks  =  [ b [ i : i + 64 ]  for  i  in  range ( 0 ,  len ( b ),  64 )]  # for each message block M^1 ... M^N  H  =  genH ()  # Section 5.3  # Section 6  for  M  in  blocks :  # each block is a 64-entry array of 8-bit bytes  # 1. Prepare the message schedule, a 64-entry array of 32-bit words  W  =  []  for  t  in  range ( 64 ):  if  t  &lt;=  15 :  # the first 16 words are just a copy of the block  W . append ( bytes ( M [ t * 4 : t * 4 + 4 ]))  else :  term1  =  sig1 ( b2i ( W [ t - 2 ]))  term2  =  b2i ( W [ t - 7 ])  term3  =  sig0 ( b2i ( W [ t - 15 ]))  term4  =  b2i ( W [ t - 16 ])  total  =  ( term1  +  term2  +  term3  +  term4 )  %  2 ** 32  W . append ( i2b ( total ))  # 2. Initialize the 8 working variables a,b,c,d,e,f,g,h with prev hash value  a ,  b ,  c ,  d ,  e ,  f ,  g ,  h  =  H  # 3.  for  t  in  range ( 64 ):  T1  =  ( h  +  capsig1 ( e )  +  ch ( e ,  f ,  g )  +  K [ t ]  +  b2i ( W [ t ]))  %  2 ** 32  T2  =  ( capsig0 ( a )  +  maj ( a ,  b ,  c ))  %  2 ** 32  h  =  g  g  =  f  f  =  e  e  =  ( d  +  T1 )  %  2 ** 32  d  =  c  c  =  b  b  =  a  a  =  ( T1  +  T2 )  %  2 ** 32  # 4. Compute the i-th intermediate hash value H^i  delta  =  [ a ,  b ,  c ,  d ,  e ,  f ,  g ,  h ]  H  =  [( i1  +  i2 )  %  2 ** 32  for  i1 ,  i2  in  zip ( H ,  delta )]  return  b &#39;&#39; . join ( i2b ( i )  for  i  in  H )  return  sha256 sha256  =  gen_sha256_with_variable_scope_protector_to_not_pollute_global_namespace () print ( &#34;verify empty hash:&#34; ,  sha256 ( b &#39;&#39; ). hex ())  # should be e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855 print ( sha256 ( b &#39;here is a random bytes message, cool right?&#39; ). hex ()) print ( &#34;number of bytes in a sha256 digest: &#34; ,  len ( sha256 ( b &#39;&#39; )))\n  Okay the reason I wanted to implement this from scratch and paste it here is that I want you to note that again there is nothing too scary going on inside. SHA256 takes some bytes message that is to be hashed, it first pads the message, then breaks it up into chunks, and passes these chunks into what can best be described as a fancy \u201cbit mixer\u201d, defined in section 3, that contains a number of bit shifts and binary operations orchestrated in a way that is frankly beyond me, but that results in the beautiful properties that SHA256 offers. In particular, it creates a fixed-sized, random-looking short digest of any variably-sized original message s.t. the scrambling is not invertible and also it is basically computationally impossible to construct a different message that hashes to any given digest.\n Bitcoin uses SHA256 everywhere to create hashes, and of course it is the core element in Bitcoin\u2019s Proof of Work, where the goal is to modify the block of transactions until the whole thing hashes to a sufficiently low number (when the bytes of the digest are interpreted as a number). Which, due to the nice properties of SHA256, can only be done via brute force search. So all of the ASICs designed for efficient mining are just incredibly optimized close-to-the-metal implementations of exactly the above code.\n Anyway before we can generate our address we also need the RIPEMD160 hash function, which I found on the internet and shortened and cleaned up:\n def  gen_ripemd160_with_variable_scope_protector_to_not_pollute_global_namespace ():  import  sys\n......", "posttime": "2021-06-23 01:08:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd4\u7279\u5e01,python,\u5212\u4f24,tour,\u66f2\u7ebf", "title": "\u5728Python\u7684\u6bd4\u7279\u5e01\u5212\u4f24\u4e4b\u65c5 ", "title_en": "A from-scratch tour of Bitcoin in Python", "transed": 1, "url": "https://karpathy.github.io/2021/06/21/blockchain/", "via": "", "real_tags": ["\u6bd4\u7279\u5e01", "python", "\u5212\u4f24", "tour", "\u66f2\u7ebf"]}, {"category": "", "categoryclass": "", "imagename": "f8b746c90a0ed763e726acfcd1920e1c.jpg", "infoid": 1067494, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u7834\u88c2\u7684\u8001\u57fa\u77f3\u88ab\u6700\u9ad8\u6cd5\u9662\u4eceNCAA\u4e0b\u6765\u731b\u62c9\u51fa\u6765\uff0c\u5b83\u5c06\u5bfc\u81f4\u90a3\u5bb6\u7c97\u66b4\u7684\u623f\u5b50\u7684\u603b\u5d29\u6e83\uff0c\u53ea\u662f\u4f60\u770b\u3002\u5f88\u5feb\u5c31\u4f1a\u5728Mark Emmert\u7684\u811a\u4e0b\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\uff0c\u800c\u662f\u51e0\u4e2a\u8150\u70c2\u7684\u8463\u4e8b\u4f1a\u3002 NCAA\u5e94\u8be5\u7b7e\u51fa\uff1a\u201c\u8fd9\u4e2a\u8d22\u4ea7\u53d7\u5230\u8c34\u8d23\u3002\u201d\n \u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u65f6\u523b\uff0c\u4f46\u57c3\u8499\u7279\u548c\u4ed6\u7684\u4e2d\u5c09\u5728\u6cd5\u5f8b\u8d39\u7528\u4e2d\u5ea6\u8fc7\u4e86\u591a\u5e74\u548c\u6570\u5341\u4ebf\u7f8e\u5143\uff0c\u8bd5\u56fe\u901a\u8fc7\u6cd5\u9662\u6218\u6597\u8fd0\u52a8\u5458\u800c\u4e0d\u662f\u56de\u5f52\u57fa\u672c\u4e0a\u662f\u4ed6\u4eec\u88ab\u76d7\u7684\u8d22\u4ea7\u3002 \u201cNCAA\u4e0d\u9ad8\u4e8e\u6cd5\u5f8b\uff0c\u201dBrett M. Kavanaugh Justice Brett M. Kavanaugh\u5728NCAA v\u7684\u4e00\u81f49-0\u51b3\u5b9a\u4e2d\u5199\u9053\u3002\u963f\u5c14\u65af\u987f\u54e6\uff0c\u4f46\u5b83\u8ba4\u4e3a\u8fd9\u662f\u3002\u5728\u6574\u4e2a\u73b0\u4ee3\u6cd5\u5f8b\u53f2\u4e0a\uff0cNCAA\u7684\u7ba1\u5bb6\u4f9d\u9760\u50b2\u6162\u7684\u5047\u8bbe\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6240\u505a\u7684\u672c\u8d28\u6240\u6b20\u7684\u6cd5\u9662\u5f52\u548e\u4e8e\uff1a\u4ed6\u4eec\u662f\u4e1a\u4f59\u4e3b\u4e49\u548c\u5b66\u672f\u7eaf\u6d01\u7684\u5b88\u95e8\u4eba\uff0c\u5373\u4f7f\u4ed6\u4eec\u5265\u79bb\u548c\u878d\u5408\u548c\u6536\u96c6\u7684\u540e\u671frakeoffs\u3002\n \u5728\u53e5\u5b50\u4e4b\u540e\uff0c\u5728\u77ed\u8bed\u4e4b\u540e\u77ed\u8bed\uff0c\u6700\u9ad8\u5bab\u5ef7\u79bb\u5f00NCAA\u65e0\u4e0e\u4f26\u4e4b\u88f8\u9732\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u7559\u4e0b\u4e86\u5b83\u7684\u81ea\u8d1f\u3002\n   \u201cNCAA Couches\u4e3a\u6ca1\u6709\u652f\u4ed8\u65e0\u5bb3\u7684\u6807\u7b7e\u652f\u4ed8\u5b66\u751f\u8fd0\u52a8\u5458\u7684\u8bba\u70b9\uff0c\u201dKavanaugh\u5199\u9053\u3002 \u201c\u4f46\u662f\u6807\u7b7e\u4e0d\u80fd\u4f2a\u9020\u73b0\u5b9e\uff1aNCAA\u7684\u5546\u4e1a\u6a21\u5f0f\u5728\u7f8e\u56fd\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u884c\u4e1a\u90fd\u4f1a\u5728\u7f8e\u56fd\u7684\u51e0\u4e4e\u662f\u8fdd\u6cd5\u7684\u3002\u201d\u7e41\u8363\u3002\u811a\u8e1d\u5468\u56f4\u7684\u88e4\u5b50\u3002\n \u8fd9\u53e5\u8bdd\u80af\u5b9a\u4f1a\u5bfc\u81f4\u8d4b\u4e88\u8bc9\u8bbc\u3002\u8fd9\u5c31\u662f\u8fd9\u4e00\u70b9\uff0c\u4eceNeil M.\u6208\u5c14\u82cf\u5947\u5927\u81f4\u610f\u89c1\uff1a\u201c\u7b80\u5355\u5730\u8bf4\uff0c\u8fd9\u5957\u8bc9\u8bbc\u6d89\u53ca\u5728\u88ab\u544a\u8fd0\u52a8\u5e02\u573a\u63a7\u5236\u7684\u5e02\u573a\u4e2d\u627f\u8ba4\u6c34\u5e73\u4ef7\u683c\u4fee\u590d\uff0c\u201d\u4ed6\u5199\u9053\u3002\n  \u201c\u5e73\u5766\u7684\u975e\u6cd5\u201d\u548c\u201c\u4ef7\u683c\u5b9a\u5f71\u201d - \u8fd9\u4e9b\u662fNCAA\u601d\u60f3\u662f\u4e00\u4e2a\u72ed\u9698\u7684\u5c0f\u6848\u7684\u5927\u8bcd\u3002\u963f\u5c14\u65af\u987f\u5728\u5176\u8138\u4e0a\uff0c\u53ea\u662f\u5173\u4e8eNCAA\u662f\u5426\u53ef\u4ee5\u6267\u884c\u9650\u5236\u4e0e\u7814\u7a76\u751f\u5956\u5b66\u91d1\u7b49\u67d0\u4e9b\u6559\u80b2\u76f8\u5173\u798f\u5229\u7684\u89c4\u5219\u3002\u4f46\u6700\u9ad8\u6cd5\u9662\u5bbd\u9614 - \u800c\u4e14\u8fd9\u6837\u505a\u5c31\u8e22\u4e86\u817f\u90e8\uff0c\u5373NCAA\u4e00\u76f4\u5728\u634d\u536b\u5176\u5728\u5176\u4ed6\u6848\u4ef6\u4e2d\u634d\u536b\u5176\u975e\u6cd5\u884c\u4e3a\u7684\u817f\uff0c\u7279\u522b\u662f\u8fd0\u52a8\u5458\u6536\u56de\u4ed6\u4eec\u7684\u540d\u5b57\uff0c\u5f62\u8c61\u548c\u8096\u50cf\u6743\u5229\u6240\u5e26\u6765\u7684\u4ecd\u7136\u5728\u8f83\u4f4e\u7684\u6cd5\u9662\u3002\n   ncaa\u8ba4\u4e3a\u5b83\u6709\u4e00\u4e2a\u9b54\u6cd5\u6597\u7bf7\uff0c\u4f46\u73b0\u5728\u5b83\u5df2\u7ecf\u6d88\u5931\u4e86\u3002\u5b83\u4f9d\u8d56\u4e8e1984\u5e74\u7edf\u6cbb\u7684\u63aa\u8f9e\u53eb\u505aNCAA\u8bc9\u59d4\u5458\u4f1a\u7684\u63aa\u8f9e\u3002\u8463\u4e8b\u4f1a\u7684\u8463\u4e8b\u4f1a\uff0c\u8be5\u59d4\u5458\u4f1a\u6307\u51fa\uff0c\u5177\u6709\u5b66\u672f\u4f20\u7edf\u7684\u5927\u5b66\u8db3\u7403\u662f\u4ece\u5c0f\u8054\u76df\u68d2\u7403\u7684\u533a\u522b\u3002 NCAA\u8ba4\u4e3a\u5176\u201c\u4e1a\u4f59\u7231\u60c5\u201d\u89c4\u5219\u5c06\u8fd0\u52a8\u5458\u4ece\u6cd5\u9662\u8d5a\u94b1\u201c\u795d\u798f\u201d\u3002 \n\u4e0d\u518d\u3002\u8fd9\u662f\u5361\u74e6\u4e07\u64a4\u56de\u8fd9\u79cd\u795d\u798f\u3002 \u201c\u6d41\u6d6a\u70b9\u8bc4\u201d\u6765\u81ea\u7687\u5bb6\u4eba\uff0c\u4ed6\u5199\u5f97\u4e0d\u5c51\u4e00\u987e\u597d\u50cfNCAA\u662f\u4e00\u53ea\u80e1\u540c\u732b\uff0c\u6ca1\u6709\u8fa9\u62a4\u3002\u4ed6\u603b\u7ed3\u4e86NCAA\u591a\u5e74\u6765\uff0cNCAA\u5728\u6cd5\u9662\u6f5c\u5165\u7684\u5faa\u73af\u903b\u8f91\uff1a\u201cNCAA\u8868\u793a\uff0c\u7531\u4e8eNCAA\u7684\u8bf4\u6cd5\uff0c\u5927\u5b66\u53ef\u80fd\u4f1a\u62d2\u7edd\u652f\u4ed8\u5b66\u751f\u8fd0\u52a8\u5458\uff0c\u56e0\u4e3aNCAA\u7684\u5927\u5b66\u8fd0\u52a8\u7684\u5b9a\u4e49\u7279\u5f81\u662f\u5b66\u751f\u8fd0\u52a8\u5458\u6ca1\u6709\u652f\u4ed8\u3002\u201c\n Kavanaugh\u5728\u5b83\u9002\u5f53\u7684\u8352\u51c9\u7684\u80cc\u666f\u4e0b\u653e\u7f6e\u3002 \u201c\u533b\u9662\u4e0d\u80fd\u540c\u610f\u62a4\u58eb\u6536\u5165\uff0c\u4ee5\u521b\u9020\u4e00\u4e2a\u201d\u666e\u53ca\u7684\u201c\u5f62\u5f0f\u7684\u5e2e\u52a9\u75c5\u4eba\uff0c\u201d\u4ed6\u5199\u9053\u3002 \u201c...\u7535\u5f71\u5de5\u4f5c\u5ba4\u4e0d\u80fd\u524a\u51cf\u5bf9\u955c\u5934\u8239\u5458\u7684\u4f18\u52bf\uff0c\u4ee5\u70b9\u71c3\u597d\u83b1\u575e\u7684\u201d\u4e1a\u4f59\u4e3b\u4e49\u7cbe\u795e\u201c\u3002\u201d\n   Kavanaugh\u5199\u9053\uff0c\u4e3a\u4e86\u592a\u4e45\uff0cNCAA\u201c\u4ece\u666e\u901a\u7684\u53cd\u6258\u62c9\u65af\u5ba1\u67e5\u4e2d\u957f\u671f\u5c4f\u853d\u4e86\u5b83\u7684\u85aa\u916c\u89c4\u5219\u201d\uff0cKavanaugh\u5199\u9053\u3002\n \u6208\u65af\u9c81\u514b\u4e5f\u88ad\u51fb\u4e86NCAA\u7684\u63a8\u7406\u4f5c\u4e3a\u7279\u6743\u72b6\u6001\u7684\u8981\u6c42\u3002\u5b83\u8981\u6c42\u201c\u4ece[\u53cd\u6258\u62c9\u65af\u6cd5\u5f8b]\u4e3a\u5176\u8d38\u6613\u675f\u7f1a\u7684\u6761\u4ef6\u4e0b\uff0c\u6211\u4eec\u5e94\u8be5\u5ffd\u89c6\u5176\u9650\u5236\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6070\u597d\u843d\u5728\u9ad8\u7b49\u6559\u80b2\uff0c\u4f53\u80b2\u548c\u91d1\u94b1 - \u6211\u4eec\u4e0d\u80fd\u540c\u610f\uff0c\u6211\u4eec\u4e0d\u80fd\u540c\u610f\uff0c \u201c \u4ed6\u5199\u4e86\u3002\n \u9b54\u672f\u6597\u7bf7\u5df2\u7ecf\u88ab\u6495\u6389\u4e86\u3002\u5728\u5b83\u7684\u5730\u65b9\u662f\u57c3\u8499\u7279\u548c\u4ed6\u7684\u6f5c\u5728\u5ba2\u6237\u7684\u88f8\u9732\u819d\u76d6\uff0c\u4ee5\u53ca\u5f88\u591a\u95ee\u9898\u3002\u5141\u8bb8\u8fd0\u52a8\u5458\u5982\u4f55\u4ece\u4ed6\u4eec\u7684\u59d3\u540d\uff0c\u56fe\u50cf\u548c\u8096\u50cf\u4e2d\u53d7\u76ca\u5f71\u54cd\u8fd0\u52a8\u90e8\u95e8\u7684\u6574\u4f53\u6536\u5165\uff1f\u8fd0\u52a8\u5458\u5728\u8f83\u5c0f\u7684\u8fd0\u52a8\u4e2d\u7684\u6548\u679c\u4f1a\u662f\u4ec0\u4e48\uff1f\u662f\u5426\u5fc5\u987b\u6709\u85aa\u6c34\u5e3d\u4fdd\u6301\u7ade\u4e89\u6027\u5e73\u8861\uff1f\u7531\u4e8e\u6ca1\u6709\u53d1\u73b0NCAA\u81ea\u5df1\u7684\u89c4\u5219\u5728\u6cd5\u5f8b\u4e4b\u5916\uff0c\u8fd9\u662f\u771f\u7684\u6709\u4ec0\u4e48\u8fd9\u6837\u7684\u4e8b\u60c5\u662f\u201c\u975e\u6cd5\u62db\u8058\u201d\uff1f\n  \u8fd9\u4e9b\u95ee\u9898\u5fc5\u987b\u7531\u81ea\u7136\u5e02\u573a\u529b\u91cf\u6216\u56fd\u5bb6\u548c\u8054\u90a6\u7acb\u6cd5\u56de\u7b54\u3002\u80af\u5b9a\u7684\u662f\uff0c\u4ed6\u4eec\u5c06\u4e0d\u518d\u88ab\u4e00\u4e2a\u5229\u6da6\u7684\u56e4\u79ef\u5b98\u50da\u673a\u6784\u56de\u7b54\uff0c\u8fd9\u4e9b\u5b98\u50da\u673a\u6784\u4f7f\u7528\u53cd\u590d\u65e0\u5e38\u7684\u89c4\u5219\u9884\u8ba2\u548c\u9053\u5fb7\u5316\u201c\u7eaf\u7cb9\u201d\u7684\u201c\u7eaf\u6d01\u201d\uff0c\u4f5c\u4e3a\u5176\u5728\u5b66\u751f\u80cc\u9762\u7684\u63a0\u593a\u6027\u5546\u4e1a\u5b9e\u8df5\u7684\u5c01\u9762\u3002\n   \u201c\u6211\u4eec\u5f88\u6fc0\u52a8\uff0c\u201d\u80dc\u5229\u7684\u5f8b\u5e08\u53f2\u8482\u592b\u00b7\u4f69\u66fc\u662f\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5199\u7684\u3002 \u201cNCAA\u4e0d\u518d\u4e89\u8fa9\u8bf4\u5b83\u6709\u6743\u5c0a\u91cd\u5176\u4ed6\u4f01\u4e1a\u6ca1\u6709\u3002\u201d \nNCAA\u5df2\u6210\u4e3a\u53e6\u4e00\u4e2a\u574f\u516c\u53f8\u6f14\u5458\u3002 \u5b83\u5df2\u7ecf\u6d88\u5931\u7684\u8fc7\u5ea6\u529b\u91cf\uff0c\u4f60\u53ef\u4ee5\u542c\u5230\u788e\u7247\u3002 \u4ec0\u4e48\u4f1a\u66ff\u6362\u5b83\uff1f \u66f4\u597d\u7684\u4e1c\u897f\u3002 \u6cd5\u9662\u6b63\u786e\u8ba4\u8bc6\u5230\uff0c\u5927\u5b66\u8fd0\u52a8\u5458\u4ecd\u7136\u5fc5\u987b\u6ce8\u518c\u548c\u826f\u597d\u7684\u5b66\u672f\u5730\u4f4d\u3002 \u8fd9\u662f\u4e00\u79cd\u611a\u8822\u7684\u8c2c\u8bef\uff0c\u603b\u662f\uff0c\u904f\u5236NCAA\u7684\u5931\u63a7\u529b\u91cf\u4f1a\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f7f\u7cfb\u7edf\u66f4\u7eaf\u4e8e\u5b83\u3002 \u4e8b\u5b9e\u4e0a\uff0c\u5b83\u5c06\u4f7f\u5176\u66f4\u52a0\u8bda\u5b9e\uff0c\u66f4\u76f4\u63a5\u3002 \u66f4\u76f4\u7684\u3002  \u5982\u4f55\u91cd\u5efa\uff1f \u8fd9\u662f\u7b2c\u4e00\u5757\u7816\uff1a\u4e00\u4e2a\u4eba\u7684\u81ea\u7136\u540d\u79f0\u548c\u670d\u52a1\u5458\u7ecf\u6d4e\u6743\u5229\u672c\u8d28\u4e0a\u5c5e\u4e8e\u5b83\u4eec\u800c\u4e0d\u662fNCAA\u3002 \u4ece\u90a3\u4e2a\u89d2\u8272\u5f00\u59cb\u3002 \u4ece\u73b0\u5728\u5f00\u59cb\u7684\u5176\u4ed6\u4e8b\u60c5\u90fd\u4f1a\u662f\u7a33\u5b9a\u7684\uff0c\u4ece\u73b0\u5728\u5f00\u59cb\u9020\u6210\u66f4\u591a\u7684\u610f\u4e49\u3002  \u5f53\u5929\u6700\u91cd\u8981\u7684\u65b0\u95fb\u6545\u4e8b\uff0c\u7531\u90ae\u653f\u7f16\u8f91\u7b56\u5212\u5e76\u6bcf\u5929\u65e9\u4e0a\u4ea4\u4ed8\u3002 ", "note_en": "A cracked old cornerstone has been yanked out from under the NCAA by the Supreme Court, and it\u2019s going to lead to the total collapse of that crude shanty house, just you watch. Soon there will be nothing left under Mark Emmert\u2019s feet but a few rotten boards. The NCAA should put a sign out: \u201cThis property is condemned.\u201d\n This was an inevitable moment, and yet Emmert and his lieutenants spent years and billions in legal fees trying to forestall it, fighting athletes through the courts instead of returning what was essentially their stolen property. \u201cThe NCAA is not above the law,\u201d Justice Brett M. Kavanaugh wrote in a concurrence to the  unanimous 9-0 decision in  NCAA v. Alston. Oh, but it thought it was. Throughout its modern legal history, the NCAA\u2019s stewards had relied on the arrogant supposition that the courts owed them acquiescence because of the nature of what they do: They were the gatekeepers of amateurism and of scholarly purity, even as they filched and conned and collected backroom rakeoffs.\n In sentence after sentence, phrase after phrase, the highest court left the NCAA unhoused and naked, with nothing left but its pretensions.\n   \u201cThe NCAA couches its arguments for not paying student athletes in innocuous labels,\u201d Kavanaugh wrote. \u201cBut the labels cannot disguise the reality: The NCAA\u2019s business model would be flatly illegal in almost any other industry in America.\u201d Boom. Pants around ankles.\n That sentence is sure to lead to a blitz of litigation. So is this one, from Justice Neil M. Gorsuch in the majority opinion: \u201cPut simply, this suit involves admitted horizontal price fixing in a market where the defendants exercise market control,\u201d he wrote.\n  \u201cFlatly illegal\u201d and \u201cprice fixing\u201d \u2014 those are big words for what the NCAA thought was a narrow little case.  Alston was, on its face, simply about whether the NCAA could enforce rules limiting certain education-related benefits such as graduate scholarships. But the Supreme Court went broad \u2014 and in doing so it kicked the legs out of every legal argument the NCAA has been using to defend its illegal behavior in other cases, especially those brought by athletes to reclaim their name, image and likeness rights, which are still in the lower courts.\n   The NCAA thought it had a magic cloak, but now it\u2019s gone. It had relied heavily on wording in a 1984 ruling called  NCAA v. Board of Regents, which stated that the identification of college football with an academic tradition is what differentiated it from minor league baseball. The NCAA took that to mean its \u201camateurism\u201d rules that restrict athletes from making money had been \u201cblessed\u201d by the courts.\n Not anymore. Here is Kavanaugh retracting that blessing. \u201cStray comments\u201d from  Regents, he wrote dismissively as if the NCAA were an alley cat, did not amount to a defense. He summed up the circular logic the NCAA has been foisting off on courts for years: \u201cThe NCAA says that colleges may decline to pay student athletes because the defining feature of college sports, according to the NCAA, is that the student athletes are not paid.\u201d\n Kavanaugh put that in its properly ludicrous context. \u201cHospitals cannot agree to cap nurses\u2019 income in order to create a \u2018purer\u2019 form of helping the sick,\u201d he wrote. \u201c\u2026 Movie studios cannot collude to slash benefits to camera crews to kindle a \u2018spirit of amateurism\u2019 in Hollywood.\u201d\n   For too long, the NCAA \u201chas long shielded its compensation rules from ordinary antitrust scrutiny\u201d with that sort of nonsense, Kavanaugh wrote.\n Gorsuch, too, attacked the NCAA\u2019s reasoning as a request for privileged status. It demanded \u201ca sort of judicially ordained immunity from the terms of [antitrust law] for its restraints of trade \u2014 that we should overlook its restrictions because they happen to fall at the intersection of higher education, sports, and money \u2014 we cannot agree,\u201d he wrote.\n The magic cloak has been torn away. In its place are the bare knees of Emmert and his lead counsels, and a lot of questions. How will allowing athletes to benefit from their names, images and likenesses affect overall revenue for athletic departments? What will the effect be for athletes in smaller sports? Will there have to be salary caps to preserve competitive balance? Is there really any such thing anymore as \u201cillegal recruiting\u201d since the NCAA\u2019s own rules have been found to be outside of the law?\n  Those questions will have to be answered by natural market forces, or by state and federal legislation. What\u2019s sure is that they will no longer be answered by a profit-hoarding bureaucracy that used capricious rule-booking and moralizing on \u201cpurity\u201d of amateurs as cover for its predatory business practices on the backs of students.\n   \u201cWe\u2019re thrilled,\u201d Steve Berman, one of the winning attorneys, wrote via email. \u201cThe NCAA can no longer argue that it\u2019s entitled to deference other businesses don\u2019t have.\u201d\n The NCAA has become just another bad corporate actor. The inordinate power it had is gone, and you can hear the splintering. What will replace it? Something better. The court rightly recognized that college athletes still have to be enrolled and in good academic standing. It was a silly fallacy, always, that curbing the NCAA\u2019s runaway power would somehow make the system more impure than it already is. In fact, it will make it more honest, more direct. Straighter.\n How to rebuild? Here\u2019s the first brick: A person\u2019s natural-born name and attendant economic rights inherently belong to them and not to the NCAA. Start with that cornerstone. Everything else that comes after will be solid and make a lot more sense from now on.\n     The most important news stories of the day, curated by Post editors and delivered every morning.", "posttime": "2021-06-23 01:07:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u77e5\u9053,longer,ncaa", "title": "\u5f88\u5feb\uff0c\u6211\u4eec\u77e5\u9053\u7684NCAA\u5c06\u4e0d\u518d\u5b58\u5728\u3002 \u7529\u6389\u5305\u88b1\u3002 ", "title_en": "Soon, the NCAA as we know it will no longer exist. Good riddance.", "transed": 1, "url": "https://www.washingtonpost.com/sports/2021/06/22/sally-jenkins-supreme-court-ncaa-decision/", "via": "", "real_tags": ["\u77e5\u9053", "longer", "ncaa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067493, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u79d1\u5b66\u5bb6\u8bf4\uff0c\u8be5\u7cfb\u7edf\u5bf9\u73af\u5883\u5f71\u54cd\u5f88\u5c0f\uff0c\u5bf9\u7272\u755c\u517b\u6b96\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\n    \u6839\u636e\u4e00\u9879\u65b0\u7684\u7814\u7a76\uff0c\u7ed3\u5408\u592a\u9633\u80fd\u548c\u5fae\u751f\u7269\u53ef\u4ee5\u4ea7\u751f\u6bd4\u5927\u8c46\u8c46\u7c7b\u7b49\u4f5c\u7269\u66f4\u591a\u7684\u86cb\u767d\u8d28\u768410\u500d\u3002\n \u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u8be5\u7cfb\u7edf\u5bf9\u73af\u5883\u5f71\u54cd\u5f88\u5c0f\uff0c\u4e0e\u7272\u755c\u517b\u6b96\u9c9c\u660e\u5bf9\u6bd4\uff0c\u5bfc\u81f4\u5de8\u5927\u7684\u6c14\u5019\u52a0\u70ed\u6c14\u4f53\u4ee5\u53ca\u6c34\u6c61\u67d3\u3002\n  \u8be5\u6982\u5ff5\u4f7f\u7528\u4ece\u7a7a\u6c14\u4e2d\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\u548c\u4e8c\u6c27\u5316\u78b3\u7684\u7535\u529b\u6765\u4e3a\u5fae\u751f\u7269\u751f\u957f\uff0c\u4ee5\u4ea7\u751f\u71c3\u6599\uff0c\u7136\u540e\u5728\u751f\u7269\u53cd\u5e94\u5668VATS\u4e2d\u751f\u957f\uff0c\u7136\u540e\u52a0\u5de5\u6210\u5e72\u71e5\u7684\u86cb\u767d\u8d28\u7c89\u672b\u3002\u79d1\u5b66\u5bb6\u8bf4\uff0c\u8be5\u8fc7\u7a0b\u4f7f\u571f\u5730\uff0c\u6c34\u548c\u80a5\u6599\u7684\u9ad8\u6548\u5229\u7528\u80fd\u591f\u90e8\u7f72\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u90e8\u7f72\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5728\u5177\u6709\u5f3a\u5927\u7684\u9633\u5149\u6216\u80a5\u6c83\u571f\u58e4\u7684\u56fd\u5bb6\u3002\n \u4ed6\u4eec\u8bf4\uff0c\u7cae\u98df\u5b89\u5168\u662f\u672a\u6765\u51e0\u5341\u5e74\u6765\u4eba\u7c7b\u7684\u201c\u5173\u952e\u95ee\u9898\u201d\uff0c\u4ed6\u4eec\u8868\u793a\uff0c\u968f\u7740\u5168\u7403\u4eba\u53e3\u751f\u957f\uff0c\u751f\u7269\u71c3\u6599\u4e0e\u4f5c\u7269\u7684\u571f\u5730\u7ade\u4e89\uff0c\u5927\u7ea6800\u4e07\u4eba\u4eca\u5929\u5df2\u7ecf\u8425\u9020\u4e86\u7ea6800\u4e07\u4eba\u3002\u6b64\u5916\uff0c\u5728\u4e0d\u524a\u51cf\u52a8\u7269\u548c\u4e73\u5236\u54c1\u751f\u4ea7\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u51b3\u6c14\u5019\u5371\u673a\u5c06\u8fd1\u4e0d\u53ef\u80fd\u3002\n \u5fae\u751f\u7269\u5df2\u7ecf\u7528\u4e8e\u5236\u4f5c\u8bb8\u591a\u5e38\u89c1\u7684\u98df\u7269\uff0c\u5982\u9762\u5305\uff0c\u9178\u5976\uff0c\u5564\u9152\u548cQuorn\u3002\u4f46\u5176\u4ed6\u7814\u7a76\u4eba\u5458\u79f0\uff0c\u5c06\u6d88\u8d39\u8005\u8f6c\u5316\u4e3a\u98df\u7528\u5fae\u751f\u7269\u86cb\u767d\u53ef\u80fd\u662f\u56f0\u96be\u7684\uff0c\u5e76\u4e14\u8fd9\u79cd\u98df\u7269\u53ef\u80fd\u4e0d\u4f1a\u8425\u517b\u5b8c\u6574\u3002\n Dorian Leger\uff0c\u5728\u6ce2\u8328\u5766\u7684Max Planck\u5206\u5b50\u690d\u7269\u751f\u7406\u5b66\u7814\u7a76\u6240\uff0c\u5fb7\u56fd\u9886\u5bfc\u4e86\u65b0\u5206\u6790\uff0c\u8bf4\uff1a\u201c\u6211\u4eec\u8ba4\u4e3a\u5fae\u751f\u7269\u98df\u54c1\u975e\u5e38\u6709\u524d\u9014\uff0c\u5e76\u5c06\u6210\u4e3a\u89e3\u51b3\u6f5c\u5728\u7cae\u98df\u5371\u673a\u7684\u4e3b\u8981\u8d21\u732e\u8005\u4e4b\u4e00\u3002 \n\u201c\u5b83\u53ef\u80fd\u4f1a\u5728\u6d88\u8d39\u65b9\u9762\u8fc5\u901f\u62ff\u8d77\uff0c\u4f46\u5f88\u96be\u8bf4\u3002 \u201c\u4f46\u6211\u505a\u4e86\u4e00\u4e9b\u8fd0\u52a8\uff0c\u5982\u679c\u6211\u73b0\u5728\u88ab\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ec6\u83cc\u86cb\u767d\u8d28\uff0c\u6211\u4f1a\u6709\u5b83\u3002\u201d\n \u8be5\u56e2\u961f\u4e13\u6ce8\u4e8e\u5927\u8c46\u8c46\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e0e\u68ee\u6797\u7684\u7834\u574f\u76f8\u5173\uff0c\u5927\u591a\u662f\u5582\u517b\u52a8\u7269\uff0c\u4f46\u5176\u4ed6\u7ec6\u83cc\u4ea7\u751f\u68d5\u6988\u6cb9\u7684\u4e3b\u8981\u5143\u7d20\u3002 \u201c\u7ec6\u83cc\u975e\u5e38\u7075\u6d3b\uff0c\u56e0\u6b64\u4ed6\u4eec\u6700\u7ec8\u53ef\u4ee5\u8c03\u6574\u5230\u4e0d\u540c\u7684\u4ea7\u54c1\uff0c\u201dleger\u8bf4\u3002\n \u81f3\u5c11\u6709\u5341\u51e0\u5bb6\u516c\u53f8\u5df2\u7ecf\u4ece\u5fae\u751f\u7269\u751f\u4ea7\u52a8\u7269\u9972\u6599\uff0c\u4f46\u7ec6\u83cc\u901a\u5e38\u662f\u4ece\u5176\u4ed6\u4f5c\u7269\u6216\u7532\u70f7\u6216\u7532\u9187\u7684\u7cd6\u4e2d\u4ece\u5316\u77f3\u71c3\u6599\u4e2d\u5582\u98df\u3002\u57fa\u4e8e\u82ac\u5170\u7684\u592a\u9633\u80fd\u98df\u54c1\u6b63\u5728\u5229\u7528\u7535\u529b\u4e3a\u4eba\u7c7b\u521b\u9020\u98df\u7269\u3002\n \u516c\u5e03\u7684\u65b0\u8bc4\u4f30\u5728\u7f8e\u56fd\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u9662\u7684\u671f\u520a\u4e0a\u53d1\u5e03\uff0c\u662f\u4f20\u7edf\u519c\u4e1a\u548c\u592a\u9633\u80fd\u5fae\u751f\u7269\u751f\u4ea7\u7cfb\u7edf\u4e4b\u95f4\u7684\u571f\u5730\u5229\u7528\u548c\u80fd\u6e90\u6548\u7387\u7684\u7b2c\u4e00\u6b21\u5b9a\u91cf\u6bd4\u8f83\u3002\n \u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e86\u4eca\u5929\u6280\u672f\u7684\u6570\u636e\u6765\u8ba1\u7b97\u8fc7\u7a0b\u7684\u6bcf\u4e2a\u6b65\u9aa4\u7684\u6548\u7387\uff0c\u5305\u62ec\u4ece\u7a7a\u4e2d\u6355\u83b7CO 2\u5e76\u5c06\u5fae\u751f\u7269\u52a0\u5de5\u6210\u4eba\u4eec\u53ef\u4ee5\u5403\u7684\u98df\u7269\u3002\u4ed6\u4eec\u53d1\u73b0\u5fae\u751f\u7269\u7cfb\u7edf\u4ec5\u4f7f\u7528\u4f5c\u7269\u6240\u9700\u76841\uff05\uff0c\u80a5\u6599\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u662f\u5728\u9886\u57df\u4f7f\u7528\u65f6\u6d6a\u8d39\u3002\n \u8be5\u5206\u6790\u4f30\u8ba1\uff0c\u6bcf\u5e74\u7684\u6bcf\u516c\u9877\uff08\u6216\u6bcf\u82f1\u4ea9\uff09\u7684\u200b\u200b\u592a\u9633\u5fae\u751f\u7269\u8fc7\u7a0b\u53ef\u4ee5\u4ece\u6bcf\u516c\u9877\uff08\u6216\u6bcf\u82f1\u4ea9\uff09\u4ea7\u751f15\u5428\u86cb\u767d\u8d28\uff0c\u8db3\u4ee5\u517b\u6d3b520\u4eba\uff0c\u79d1\u5b66\u5bb6\u8868\u793a\u662f\u4fdd\u5b88\u7684\u4f30\u8ba1\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5927\u8c46\u8c46\u7c7b\u516c\u9877\u53ef\u4ee5\u4ea7\u751f1.1\u5428\u86cb\u767d\u8d28\uff0c\u5582\u98df40\u4eba\u3002\u5373\u4f7f\u5728\u9633\u5149\u6c34\u5e73\u7b49\u9633\u5149\u6c34\u5e73\u7684\u56fd\u5bb6\uff0c\u5fae\u751f\u7269\u86cb\u767d\u8d28\u4ea7\u91cf\u6bd4\u6bcf\u516c\u9877\u7684\u5fae\u751f\u7269\u86cb\u767d\u8d28\u4ea7\u91cf\u6bd4\u690d\u7269\u81f3\u5c11\u9700\u8981\u4e94\u500d\u3002\n \u7814\u7a76\u4eba\u5458\u5efa\u8bae\uff0c\u5fae\u751f\u7269\u86cb\u767d\u7684\u6210\u672c\u4e0e\u5f53\u524d\u86cb\u767d\u8d28\uff08\u4f8b\u5982\u4e73\u6e05\u6216\u8c4c\u8c46\uff09\u5403\u7684\u76ee\u524d\u86cb\u767d\u8d28\u76f8\u540c\u3002\u4f46\u5b83\u6bd4\u76ee\u524d\u7684\u52a8\u7269\u9972\u6599\u6602\u8d35\u51e0\u500d\uff0c\u5c3d\u7ba1\u672a\u6765\u7684\u6280\u672f\u6539\u5584\u9884\u8ba1\u5c06\u964d\u4f4e\u6210\u672c\u3002 \nLeger\u8868\u793a\u690d\u7269\u5bf9\u5149\u5408\u4f5c\u7528\u7684\u80fd\u529b\u663e\u7740\uff0c\u4f46\u5728\u80fd\u6548\u65b9\u9762\uff0c\u4e3b\u98df\u4ec5\u5c06\u5927\u7ea61\uff05\u7684\u592a\u9633\u80fd\u8f6c\u5316\u4e3a\u53ef\u98df\u7528\u7684\u751f\u7269\u8d28\u3002\u8fd9\u662f\u56e0\u4e3a\u690d\u7269\u5df2\u7ecf\u53d1\u5c55\u4ee5\u7ade\u4e89\u548c\u518d\u73b0\uff0c\u5e76\u4e14\u521a\u521a\u589e\u957f\uff0c\u5e76\u4e14\u4f7f\u7528\u6bd4\u5149\u4f0f\u9762\u677f\u66f4\u5c11\u7684\u592a\u9633\u5149\u8c31\u3002\n \u7cfb\u7edf\u7684\u6240\u6709\u7ec4\u4ef6\u90fd\u5b58\u5728\uff0c\u4f46\u662fleger\u8868\u793a\u4ed6\u4eec\u73b0\u5728\u9700\u8981\u4e00\u8d77\u6d4b\u8bd5\uff0c\u7279\u522b\u662f\u5728\u5c3a\u5ea6\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0c\u7279\u522b\u662f\u4ece\u7a7a\u6c14\u4e2d\u6355\u83b7CO 2\uff0c\u5e76\u786e\u4fdd\u4f7f\u7528\u7684\u592a\u9633\u80fd\u7535\u6c60\u677f\u53ef\u4ee5\u56de\u6536\u5229\u7528\u3002 \u201c\u5bf9\u4e8e\u4eba\u7c7b\u98df\u7269\uff0c\u4e5f\u9700\u8981\u514b\u670d\u5f88\u591a\u89c4\u5b9a\uff0c\u201d\u4ed6\u8bf4\u3002\n Pete Iannetta\u5728\u82cf\u683c\u5170\u8a79\u59c6\u65af\u00b7\u8d6b\u987f\u7814\u7a76\u6240\uff0c\u8bf4\uff1a\u201c\u201d\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u6982\u5ff5 - \u4f60\u6b63\u5728\u79bb\u5a5a\u4ece\u571f\u5730\u4f7f\u7528\u4e2d\u7684\u98df\u7269\u751f\u4ea7\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u62e5\u6709\u53ef\u91cd\u65b0\u5236\u9020\u7684\u6240\u6709\u571f\u5730\u3002\u201c\n \u4f46\u4ed6\u8bf4\uff0c\u98df\u7269\u4e0d\u4ec5\u7531\u4e3b\u8981\u8425\u517b\u7d20\u7ec4\u6210\uff0c\u5982\u86cb\u767d\u8d28\u548c\u78b3\u6c34\u5316\u5408\u7269\uff1a\u201c\u6709\u5f88\u591a\u6b21\u8981\u5316\u5408\u7269\u5bf9\u60a8\u7684\u798f\u7949\u5f88\u91cd\u8981\u3002\u201d Iannetta\u8fd8\u8d28\u7591\u5fae\u751f\u7269\u98df\u54c1\u662f\u5426\u4f1a\u6210\u4e3a\u4e3b\u6d41\uff1a\u201c\u4f8b\u5982\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u5f88\u957f\u65f6\u95f4\u7684\u85fb\u7c7b\u4f5c\u4e3a\u6f5c\u5728\u7684\u98df\u7269\u8d44\u6e90\uff0c\u4f46\u5b83\u4ecd\u7136\u6ca1\u6709\u88ab\u5e7f\u6cdb\u63a5\u53d7\u3002\u201d\n \u519c\u4e1a\u6280\u672f\u987e\u95ee\u535a\u58eb\u535a\u58eb\u8868\u793a\uff1a\u201c\u76f4\u5230\u6a21\u578b\u4e0e\u8bd5\u9a8c\u5382\u7684\u6d4b\u8bd5\u548c\u6210\u672c\u8ba1\u7b97\uff0c\u5305\u62ec[\u592a\u9633\u80fd\u7535\u6c60\u677f]\u751f\u4ea7\u7684\u751f\u547d\u5468\u671f\u8bc4\u4f30\uff0c\u5f88\u96be\u8bc4\u8bba\u5b83\u662f\u5426\u6709\u6240\u6539\u5584[\u519c\u4e1a]\u5df2\u7ecf\u6301\u7eed\u4e86\u6570\u5343\u5e74\u7684\u7cfb\u7edf\uff0c\u5c3d\u7ba1\u4eba\u53e3\u4f4e\u4e8e\u6211\u4eec\u8ba1\u5212\u9972\u6599\u7684\u4eba\u53e3\u3002\u201c ", "note_en": "The system would also have very little impact on the environment, in contrast to livestock farming, scientists say\n    Combining solar power and microbes could produce 10 times more protein than crops such as soya beans, according to a new study.\n The system would also have very little impact on the environment, the researchers said, in stark contrast to livestock farming which results in  huge amounts of climate-heating gases as well as water pollution.\n  The concept uses electricity from solar panels and carbon dioxide from the air to create fuel for microbes, which are grown in bioreactor vats and then processed into dry protein powders. The process makes highly efficient use of land, water and fertiliser and could be deployed anywhere, not just in countries with strong sunshine or fertile soils, the scientists said.\n Food security is a \u201ccritical issue\u201d for humanity in coming decades, they said, with the global population growing, biofuels competing for land with crops, and about 800 million people already undernourished today. Furthermore, tackling the climate crisis will be near impossible without  slashing emissions from animal and dairy food production.\n Microbes are already used to make many common foods, such as bread, yoghurt, beer and Quorn. But other researchers said converting consumers to eating microbial protein might be difficult and that such foods may not be nutritionally complete.\n Dorian Leger, at the Max Planck Institute of Molecular Plant Physiology in Potsdam, Germany, who led the new analysis, said: \u201cWe think microbial foods are very promising and will be one of the major contributors to solving the potential food crisis.\n \u201cIt might pick up quite quickly on the consumer side, but it\u2019s hard to say. \u201cBut I do some exercise, and if I was offered a bacterial protein shake now, I would have it.\u201d\n The team focused on soya beans, as these are  linked to the destruction of forests and are mostly fed to animals, but other bacteria produce the main elements of palm oil. \u201cBacteria are very flexible, so they could eventually be tuned to different products,\u201d Leger said.\n At least a dozen companies are already  producing animal feed from microbes but the bacteria are typically fed either sugars from other crops or methane or methanol from fossil fuels.  Solar Foods, based in Finland, is using electricity to create food for humans.\n The new assessment, published in the journal  Proceedings of the National Academy of Sciences of the United States of America, is the first quantitative comparison of land use and energy efficiency between traditional agriculture and solar-powered microbial production systems.\n The researchers used data on today\u2019s technologies to calculate the efficiency of each step of the process, including capturing CO 2 from the air and processing the microbes into food that people could eat. They found the microbial system used just 1% of the water needed by the crops and a small fraction of the fertiliser, most of which is wasted when used in fields.\n The analysis estimated that the solar-microbial process could produce 15 tonnes of protein from each hectare (or per 2.5 acres) a year, enough to feed 520 people, which the scientists said was a conservative estimate. In comparison, a hectare of soya beans could produce 1.1 tonnes of protein, feeding 40 people. Even in countries with relatively low sunlight levels  like the UK, microbial protein production was at least five times greater from each hectare than plants.\n The microbial protein would cost about the same as current proteins eaten by people, such as whey or pea, the researchers suggested. But it was several times more expensive than current animal feeds, although future technological improvements are expected to lower costs.\n Leger said plants\u2019 ability to photosynthesise is remarkable but, in terms of energy efficiency, staple crops only convert about 1% of solar energy into edible biomass. This is because plants have evolved to compete and reproduce as well as just grow, and use less of the solar light spectrum than photovoltaic panels.\n All the components of the system exist, but Leger said they now need to be tested together and at scale, in particular the capturing of CO 2 from the air and ensuring that used solar panels can be recycled. \u201cFor human food, there\u2019s also a lot of regulation that needs to be overcome,\u201d he said.\n Pete Iannetta, at the James Hutton Institute in Scotland, said: \u201c\u201cIt\u2019s a really interesting concept \u2013 you are divorcing food production from land use, which would mean you could have all that land available for rewilding.\u201d\n But he said food is not only composed of the main nutrients, like protein and carbohydrate: \u201cThere are an awful lot of secondary compounds that are important for your wellbeing.\u201d Iannetta also questioned whether microbial foods would become mainstream: \u201cFor example, we have used algae for a long time as a potential food resource, but it\u2019s still not widely accepted.\u201d\n Dr Toby Mottram, a consultant on agricultural technology, said: \u201cUntil the model is tested and costed with a pilot-scale plant, including a lifecycle assessment of [solar panel] production, it is hard to comment on whether it improves on [farming] systems which have been sustained for thousands of years, albeit for a lower population than we are planning to feed.\u201d", "posttime": "2021-06-23 01:07:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u592a\u9633\u80fd,food,\u5fae\u751f\u7269", "title": "\u5fae\u751f\u7269\u548c\u592a\u9633\u80fd\u80fd\u529b\u6bd4\u690d\u7269\u4ea7\u751f10\u500d\u7684\u98df\u7269' ", "title_en": "Microbes and solar power \u2018could produce 10 times more food than plants\u2019", "transed": 1, "url": "https://www.theguardian.com/environment/2021/jun/21/microbes-and-solar-power-could-produce-10-times-more-food-than-plants", "via": "", "real_tags": ["\u592a\u9633\u80fd", "food", "\u5fae\u751f\u7269"]}]