[{"category": "", "categoryclass": "", "imagename": "0a4d1035667918caafe11e740fb3b66e.png", "infoid": 1068750, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6b63\u5728\u53d1\u5e03\u7b2c\u4e00\u4e2a 1.0 \u540e\u7248\u672c\uff0c\u52aa\u529b\u5151\u73b0\u6211\u4eec\u6bcf 3 \u4e2a\u6708\u5b9a\u671f\u53d1\u5e03\u4e00\u6b21\u7684\u627f\u8bfa\uff0c\u7531\u4e8e\u4f1a\u8bae\u800c\u6709\u6240\u5ef6\u8fdf\uff0c\u5e76\u7279\u522b\u6ce8\u91cd\u4fdd\u6301\u8bed\u8a00\u7a33\u5b9a\u6027\u3002\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u4e86\u6700\u91cd\u8981\u6216\u6700\u6709\u8da3\u7684\u53d8\u5316\uff0c\u4f46\u6ca1\u6709\u63d0\u5230\u51e0\u4e2a\u9519\u8bef\u4fee\u6b63\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u53d1\u884c\u8bf4\u660e\u3002\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5305\u542b\u4e86\u81ea 1.0.0 \u7248\u672c\u4ee5\u6765\u7531 28 \u4e2a\u8d21\u732e\u8005\u53d1\u5e03\u7684 166 \u4e2a PR\u3002\u6211\u4eec\u611f\u8c22\u4e3a\u6539\u8fdb\u8bed\u8a00\u53ca\u5176\u6807\u51c6\u5e93\u6240\u505a\u7684\u6240\u6709\u52aa\u529b\uff01 \u2764\ufe0f Splats \u73b0\u5728\u53ef\u4ee5\u5d4c\u5165\u5230\u53ef\u679a\u4e3e\u7684\u6587\u5b57\u548c\u7c7b\u578b\u5b9a\u4e49\u4e2d (#10429)\u3002\u51e0\u4e2a\u4f8b\u5b50\uff1a t1 = { 1 , &#39;a&#39; } t2 = { true , * t1 } # =&gt; {true, 1, &#39;a&#39;} typeof ( t2 ) # =&gt; Tuple(Bool, Int32, Char) def f1 ( x : { Bool , * { Int32 , Char }}); end # \u4e5f\u9002\u7528\u4e8e\u7c7b\u578b\u6ce8\u91ca def f2 ( x : Tuple ( Bool , * { Int32 , Char })); end ae = &#39;a&#39; .. &#39;e&#39; ccae = [ &#39;&lt;&#39; , * ae , &#39;&gt;&#39; ] # =&gt; [&#39;&lt;&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39; e&#39;, &#39;&gt;&#39;] a = 1 .. 10 b = 5 .. 15 Set { * a , * b } # =&gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} while \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u73b0\u5728\u662f\u4e3b\u4f53\u5185\u6240\u6709 break \u8868\u8fbe\u5f0f\u7684\u5e76\u96c6\uff0c\u5982\u679c\u6761\u4ef6\u4e0d\u662f\u771f\u6b63\u7684\u6587\u5b57\uff0c\u5219\u52a0\u4e0a Nil\uff1b\u5982\u679c\u6761\u4ef6\u5931\u8d25\uff0cwhile \u8868\u8fbe\u5f0f\u5c06\u8fd4\u56de nil\u3002\u4e2d\u65ad\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u8ba1\u7b97\u7c7b\u4f3c\u4e8e\u5757\u5185\u7684\u4e2d\u65ad\u6216\u8fd4\u56de\uff08\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u4e3a Nil\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\uff0c\u5219\u4e3a\u5143\u7ec4\uff09\uff08#10566\uff09\u3002 # \u9996\u5148 STDIN \u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u884c first_non_blank_line = while line = \u5f97\u5230\u65ad\u884c\uff0c\u9664\u975e line \u3002\u7a7a\u767d\u7684\uff1f end puts first_non_blank_line \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u5b9e\u4f8b\u53d8\u91cf@top_level (#10682) \u8bbf\u95ee\u9876\u7ea7\u6a21\u5757\uff1a\nNumberLiteral \u73b0\u5728\u5305\u542b\u4e00\u4e2a to_number \u65b9\u6cd5\u6765\u83b7\u53d6\u7eaf\u6570\u5b57\uff0c\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u4e32\u5316 #10802\uff1a\u6211\u4eec\u5305\u542b\u4e86\u4e00\u4e2a\u5c0f\u7684\u7a81\u7834\u6027\u66f4\u6539\uff0c\u56e0\u4e3a\u6587\u6863\u548c\u5173\u4e8e Path#global? \u7684\u4ee3\u7801\u4e4b\u95f4\u5b58\u5728\u4e0d\u5339\u914d\u3002\u4ee5\u524d\u7684 Path#global \u73b0\u5728\u5df2\u88ab\u5f03\u7528\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f Path#global?\uff0c\u5176\u540d\u79f0\u66f4\u80fd\u4ee3\u8868\u5b83\uff08#10812\uff09\u3002\u6709\u4e00\u4e2a\u65b0\u7684\u5b8f\u65b9\u6cd5 ASTNode#nil\uff1f\u7528\u4e8e\u67e5\u8be2\u5bf9\u8c61\u662f NilLiteral \u8fd8\u662f Nop (#10850, #10616)\u3002\u6709\u4e00\u4e9b\u66f4\u6539\u4e0d\u5e94\u8be5\u5bf9\u7528\u6237\u4ea7\u751f\u76f4\u63a5\u5f71\u54cd\u3002\u9700\u8981\u6ce8\u610f\u7684\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u4e3a\u4e86\u5e2e\u52a9\u83b7\u5f97\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f\u548c\u6587\u6863\uff0c\u4e00\u4e9b\u65b9\u6cd5\u4f7f\u7528\u9884\u671f\u7c7b\u578b\u8fdb\u884c\u4e86\u6ce8\u91ca\u3002\u6dfb\u52a0\u952e\u5165\u6ce8\u91ca\u53ef\u80fd\u4f1a\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u7834\u574f\u73b0\u6709\u4ee3\u7801\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u7acb\u5373\u544a\u8bc9\u6211\u4eec\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6b63\u5728\u589e\u52a0\u5bf9\u539f\u751f Windows \u7684\u652f\u6301\uff0c\u8fd9\u9700\u8981\u8fdb\u884c\u591a\u6b21\u91cd\u6784\u3002\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 new \u4ece\u4e0d\u540c\u7684\u8868\u793a\u4e2d\u521b\u5efa\u6570\u5b57\uff0c\u5982 Float32.new(&quot;1.1&quot;, whitespace:false) ((#10422)\u3002\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u65b0\u7684 Steppable \u6a21\u5757\u6982\u62ec\u4e86 Number#step\uff0c\u8be5\u6a21\u5757\u5305\u542b\u5728Char\u3001Number\u3001Time \u548c Time::Span (#10279). \u6700\u540e\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 #truncate \u548c Array\uff0c\u6709\u6548\u5730\u4ece\u4e24\u7aef\u79fb\u9664\u5143\u7d20 (#10712)\u3002\n\u6bb5\u9519\u8bef\u5904\u7406\u7a0b\u5e8f\u73b0\u5728\u5728 Crystal \u4e2d\u5b9e\u73b0\uff0c\u5b9e\u9645\u4e0a\u610f\u5473\u7740 Crystal \u7684\u7f16\u8bd1\u8fc7\u7a0b\u66f4\u7b80\u5355\uff1a\u5b83\u4e0d\u9700\u8981\u4ee5\u524d\u7684\u5916\u90e8 libcrystal\u3002\u5bf9\u4e8e\u5305\u7ef4\u62a4\u8005\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u6784\u5efa libcrystal.a\uff08\u5b83\u662f make deps \u914d\u65b9\u7684\u4e00\u90e8\u5206\uff09\u73b0\u5728\u5df2\u7ecf\u8fc7\u65f6\u4e86\u3002\u6b64\u5e93\u7684 C \u4ee3\u7801\u5df2\u88ab\u5220\u9664\uff0c\u9700\u8981\u66f4\u65b0\u6253\u5305\u8bf4\u660e\u3002\u6784\u5efa\u4efb\u610f Crystal \u7a0b\u5e8f\u4e0d\u518d\u9700\u8981 make deps\uff1b\u73b0\u5728\u5b83\u53ea\u6784\u5efa llvm_ext.a\uff0c\u53ea\u9700\u8981\u94fe\u63a5\u5230 LLVM\uff08\u4f8b\u5982\u5728\u6784\u5efa\u7f16\u8bd1\u5668\u672c\u8eab\u65f6\uff09\u3002\u611f\u8c22 84codes\u3001\u5c3c\u53e4\u62c9\u6c7d\u8f66\u516c\u53f8\u548c\u6240\u6709\u5176\u4ed6\u8d5e\u52a9\u5546\u7684\u6301\u7eed\u652f\u6301\uff0c\u6211\u4eec\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u5207\u3002\u4e3a\u4e86\u4fdd\u6301\u548c\u52a0\u5feb\u53d1\u5c55\u901f\u5ea6\uff0c\u6350\u8d60\u548c\u8d5e\u52a9\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002 OpenCollective \u53ef\u7528\u4e8e\u6b64\u76ee\u7684\u3002\u5982\u679c\u60a8\u60f3\u6210\u4e3a\u76f4\u63a5\u8d5e\u52a9\u5546\u6216\u5bfb\u627e\u5176\u4ed6\u65b9\u5f0f\u6765\u652f\u6301 Crystal\uff0c\u8bf7\u8054\u7cfb Crystal@manas.tech\u3002\u6211\u4eec\u63d0\u524d\u611f\u8c22\u60a8\uff01\u6211\u4eec\u6b63\u5728\u53d1\u5e03\u7b2c\u4e00\u4e2a 1.0 \u540e\u7248\u672c\uff0c\u52aa\u529b\u5151\u73b0\u6211\u4eec\u6bcf 3 \u4e2a\u6708\u5b9a\u671f\u53d1\u5e03\u4e00\u6b21\u7684\u627f\u8bfa\uff0c\u7531\u4e8e\u4f1a\u8bae\u800c\u6709\u6240\u5ef6\u8fdf\uff0c\u5e76\u7279\u522b\u6ce8\u91cd\u4fdd\u6301\u8bed\u8a00\u7a33\u5b9a\u6027\u3002\u4e0b\u9762\u6211\u4eec\u5217\u51fa\u4e86\u6700\u91cd\u8981\u6216\u6700\u6709\u8da3\u7684\u53d8\u5316\uff0c\u4f46\u6ca1\u6709\u63d0\u5230\u51e0\u4e2a\u9519\u8bef\u4fee\u6b63\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee\u53d1\u884c\u8bf4\u660e\u3002\u5728\u8fd9\u4e2a\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u5305\u542b\u4e86\u81ea 1.0.0 \u7248\u672c\u4ee5\u6765\u7531 28 \u4e2a\u8d21\u732e\u8005\u53d1\u5e03\u7684 166 \u4e2a PR\u3002\u6211\u4eec\u611f\u8c22\u4e3a\u6539\u8fdb\u8bed\u8a00\u53ca\u5176\u6807\u51c6\u5e93\u6240\u505a\u7684\u6240\u6709\u52aa\u529b\uff01 \u2764\ufe0f Splats \u73b0\u5728\u53ef\u4ee5\u5d4c\u5165\u5230\u53ef\u679a\u4e3e\u7684\u6587\u5b57\u548c\u7c7b\u578b\u5b9a\u4e49\u4e2d (#10429)\u3002\u51e0\u4e2a\u4f8b\u5b50\uff1a t1 = { 1 , &#39;a&#39; } t2 = { true , * t1 } # =&gt; {true, 1, &#39;a&#39;} typeof ( t2 ) # =&gt; Tuple(Bool, Int32, Char) def f1 ( x : { Bool , * { Int32 , Char }}); end # \u4e5f\u9002\u7528\u4e8e\u7c7b\u578b\u6ce8\u91ca def f2 ( x : Tuple ( Bool , * { Int32 , Char })); end ae = &#39;a&#39; .. &#39;e&#39; ccae = [ &#39;&lt;&#39; , * ae , &#39;&gt;&#39; ] # =&gt; [&#39;&lt;&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39; e&#39;, &#39;&gt;&#39;] a = 1 .. 10 b = 5 .. 15 Set { * a , * b } # =&gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} while \u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u73b0\u5728\u662f\u4e3b\u4f53\u5185\u6240\u6709 break \u8868\u8fbe\u5f0f\u7684\u5e76\u96c6\uff0c\u5982\u679c\u6761\u4ef6\u4e0d\u662f\u771f\u6b63\u7684\u6587\u5b57\uff0c\u5219\u52a0\u4e0a Nil\uff1b\u5982\u679c\u6761\u4ef6\u5931\u8d25\uff0cwhile \u8868\u8fbe\u5f0f\u5c06\u8fd4\u56de nil\u3002\u4e2d\u65ad\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u8ba1\u7b97\u7c7b\u4f3c\u4e8e\u5757\u5185\u7684\u4e2d\u65ad\u6216\u8fd4\u56de\uff08\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u4e3a Nil\uff0c\u5982\u679c\u6709\u591a\u4e2a\u503c\uff0c\u5219\u4e3a\u5143\u7ec4\uff09\uff08#10566\uff09\u3002\n# \u9996\u5148 STDIN \u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u884c first_non_blank_line = while line = \u5f97\u5230\u65ad\u884c\uff0c\u9664\u975e line \u3002\u7a7a\u767d\u7684\uff1f end puts first_non_blank_line \u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u7279\u6b8a\u7684\u5b9e\u4f8b\u53d8\u91cf@top_level (#10682) \u8bbf\u95ee\u9876\u5c42\u6a21\u5757\uff1aNumberLiteral \u73b0\u5728\u5305\u542b\u4e00\u4e2a to_number \u65b9\u6cd5\u6765\u83b7\u53d6\u7eaf\u6570\u5b57\uff0c\u6ca1\u6709\u4efb\u4f55\u5b57\u7b26\u4e32\u5316 #10802\uff1a\u6211\u4eec\u5305\u542b\u4e86\u4e00\u4e2a\u5c0f\u7684\u7a81\u7834\u6027\u53d8\u5316\uff0c\u56e0\u4e3a\u6587\u6863\u548c\u5173\u4e8e Path#global? \u7684\u4ee3\u7801\u4e0d\u5339\u914d\u3002\u4ee5\u524d\u7684 Path#global \u73b0\u5728\u5df2\u88ab\u5f03\u7528\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f Path#global?\uff0c\u5176\u540d\u79f0\u66f4\u80fd\u4ee3\u8868\u5b83\uff08#10812\uff09\u3002\u6709\u4e00\u4e2a\u65b0\u7684\u5b8f\u65b9\u6cd5 ASTNode#nil\uff1f\u7528\u4e8e\u67e5\u8be2\u5bf9\u8c61\u662f NilLiteral \u8fd8\u662f Nop (#10850, #10616)\u3002\u6709\u4e00\u4e9b\u66f4\u6539\u4e0d\u5e94\u8be5\u5bf9\u7528\u6237\u4ea7\u751f\u76f4\u63a5\u5f71\u54cd\u3002\u9700\u8981\u6ce8\u610f\u7684\u6700\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u4e3a\u4e86\u5e2e\u52a9\u83b7\u5f97\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f\u548c\u6587\u6863\uff0c\u4e00\u4e9b\u65b9\u6cd5\u4f7f\u7528\u9884\u671f\u7c7b\u578b\u8fdb\u884c\u4e86\u6ce8\u91ca\u3002\u6dfb\u52a0\u952e\u5165\u6ce8\u91ca\u53ef\u80fd\u4f1a\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u7834\u574f\u73b0\u6709\u4ee3\u7801\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u9047\u5230\u8fd9\u79cd\u60c5\u51b5\uff0c\u8bf7\u7acb\u5373\u544a\u8bc9\u6211\u4eec\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6b63\u5728\u589e\u52a0\u5bf9\u539f\u751f Windows \u7684\u652f\u6301\uff0c\u8fd9\u9700\u8981\u8fdb\u884c\u591a\u6b21\u91cd\u6784\u3002\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 new \u4ece\u4e0d\u540c\u7684\u8868\u793a\u5f62\u5f0f\u521b\u5efa\u6570\u5b57\uff0c\u5982 Float32.new(&quot;1.1&quot;, whitespace:false) ((#10422)\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u4f7f\u7528\u65b0\u7684 Steppable \u6a21\u5757\u6982\u62ec\u4e86 Number#step\uff0c\u8be5\u6a21\u5757\u5305\u542b\u5728 Char\u3001Number\u3001Time \u548c Time::Span (#10279) \u4e2d\u3002\u6700\u540e\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 #truncate \u548c Array\uff0c\u6709\u6548\u5730\u4ece\u4e24\u7aef\u5220\u9664\u5143\u7d20 (#10712)\u3002\u6bb5\u9519\u8bef\u5904\u7406\u7a0b\u5e8f\u73b0\u5728\u5728 Crystal \u4e2d\u5b9e\u73b0\uff0c\u5b9e\u9645\u4e0a\u610f\u5473\u7740 Crystal \u7684\u7f16\u8bd1\u8fc7\u7a0b\u66f4\u7b80\u5355\uff1a\u5b83\u4e0d\u9700\u8981\u4ee5\u524d\u7684\u5916\u90e8 libcrystal\u3002\u5bf9\u4e8e\u5305\u7ef4\u62a4\u8005\u6765\u8bf4\uff0c\u8fd9\u610f\u5473\u7740\u6784\u5efa libcrystal.a\uff08\u5b83\u662f make deps \u914d\u65b9\u7684\u4e00\u90e8\u5206\uff09\u73b0\u5728\u5df2\u7ecf\u8fc7\u65f6\u4e86\u3002\u6b64\u5e93\u7684 C \u4ee3\u7801\u5df2\u88ab\u5220\u9664\uff0c\u9700\u8981\u66f4\u65b0\u6253\u5305\u8bf4\u660e\u3002\u6784\u5efa\u4efb\u610f Crystal \u7a0b\u5e8f\u4e0d\u518d\u9700\u8981 make deps\uff1b\u73b0\u5728\u5b83\u53ea\u6784\u5efa llvm_ext.a\uff0c\u53ea\u9700\u8981\u94fe\u63a5\u5230 LLVM\uff08\u4f8b\u5982\u5728\u6784\u5efa\u7f16\u8bd1\u5668\u672c\u8eab\u65f6\uff09\u3002\u611f\u8c22 84codes\u3001\u5c3c\u53e4\u62c9\u6c7d\u8f66\u516c\u53f8\u548c\u6240\u6709\u5176\u4ed6\u8d5e\u52a9\u5546\u7684\u6301\u7eed\u652f\u6301\uff0c\u6211\u4eec\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u5207\u3002\u4e3a\u4e86\u4fdd\u6301\u548c\u52a0\u5feb\u53d1\u5c55\u901f\u5ea6\uff0c\u6350\u8d60\u548c\u8d5e\u52a9\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002 OpenCollective \u53ef\u7528\u4e8e\u6b64\u76ee\u7684\u3002\u5982\u679c\u60a8\u60f3\u6210\u4e3a\u76f4\u63a5\u8d5e\u52a9\u5546\u6216\u5bfb\u627e\u5176\u4ed6\u65b9\u5f0f\u6765\u652f\u6301 Crystal\uff0c\u8bf7\u8054\u7cfb Crystal@manas.tech\u3002\u6211\u4eec\u63d0\u524d\u611f\u8c22\u60a8\uff01\u7531 Disqus \u63d0\u4f9b\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "We are releasing the first post-1.0 release, making efforts to keep our promise of making regular releases each 3 months, a bit delayed because of the  conference, and with special focus on keeping the language stability. Below we list the most important or interesting changes, without mentioning the several bugfixes. For details visit the  release\u2019s notes.\n  In this release we included  166 PRs since the 1.0.0 release by 28 contributors. We thank all the effort put into improving the language and its stdlib! \u2764\ufe0f\n  Splats can now be embedded in enumerable literals and in type definitions ( #10429). A few examples:\n t1  =  { 1 ,  &#39;a&#39; } t2  =  { true ,  * t1 }  # =&gt; {true, 1, &#39;a&#39;} typeof ( t2 )  # =&gt; Tuple(Bool, Int32, Char) def  f1 ( x  :  { Bool ,  * { Int32 ,  Char }});  end  # Works in type annotations too def  f2 ( x  :  Tuple ( Bool ,  * { Int32 ,  Char }));  end ae  =  &#39;a&#39; .. &#39;e&#39; ccae  =  [ &#39;&lt;&#39; ,  * ae ,  &#39;&gt;&#39; ]  # =&gt; [&#39;&lt;&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;&gt;&#39;] a  =  1 .. 10 b  =  5 .. 15 Set { * a ,  * b }  # =&gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n The type of a while expression is now the union of all break expressions within the body, plus  Nil if the condition isn\u2019t exactly the  true literal; the while expression returns  nil if the condition fails. The type of a break expression is computed similarly to a break inside a block or a return ( Nil if empty,  Tuple if multiple values) ( #10566).\n # First the first non-blank line in STDIN first_non_blank_line  =  while  line  =  gets  break  line  unless  line . blank?  end puts  first_non_blank_line\n  It is now possible to access the top level module with the special instance variable  @top_level ( #10682):\n  NumberLiteral now includes a  to_number method to obtain the pure number, without any  stringification  #10802:\n  We included a small breaking change, as there was a mismatch between the documentation and the code regarding  Path#global?. The former  Path#global is now deprecated in favor of  Path#global?, whose name better represents it ( #10812).\n There is a new macro method  ASTNode#nil? for querying if an object is the  NilLiteral or  Nop ( #10850,  #10616).\n  There were several changes that are not supposed to have a direct impact on the users. The most important one to note is that to help get better error messages and documentation, several methods were annotated with expected types. Adding typing annotations might break existing code in specific scenarios so, if this happens to you, please let us now. Also, we are growing the native Windows support, requiring several refactors.\n  It is now possible to create numbers from different representations using  new, as in  Float32.new(&#34;1.1&#34;, whitespace:false) (( #10422).\n      Also, we generalized  Number#step with a new   Steppable module, that is included in  Char,  Number,  Time and  Time::Span ( #10279).\n Finally, it is now possible to  #truncate and  Array, to efficiently remove elements from both ends ( #10712).\n        The segfault handler is now implemented in Crystal, in practice meaning that the compilation process of Crystal is simpler: it does not require the former external  libcrystal. For package maintainers, this means building  libcrystal.a (which was part of the  make deps recipe) is obsolete now. The C code for this library has been removed and packaging instructions need to be updated.  make deps is no longer necessary for building arbitrary Crystal programs; now it only builds  llvm_ext.a, only required for linking against LLVM (for example when building the compiler itself).\n   We have been able to do all of this thanks to the continued support of  84codes,  Nikola Motor Company and every other  sponsor. To maintain and increase the development pace, donations and sponsorships are essential.  OpenCollective is available for that. Reach out to  crystal@manas.tech if you\u2019d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!\n  We are releasing the first post-1.0 release, making efforts to keep our promise of making regular releases each 3 months, a bit delayed because of the  conference, and with special focus on keeping the language stability. Below we list the most important or interesting changes, without mentioning the several bugfixes. For details visit the  release\u2019s notes.\n  In this release we included  166 PRs since the 1.0.0 release by 28 contributors. We thank all the effort put into improving the language and its stdlib! \u2764\ufe0f\n  Splats can now be embedded in enumerable literals and in type definitions ( #10429). A few examples:\n t1  =  { 1 ,  &#39;a&#39; } t2  =  { true ,  * t1 }  # =&gt; {true, 1, &#39;a&#39;} typeof ( t2 )  # =&gt; Tuple(Bool, Int32, Char) def  f1 ( x  :  { Bool ,  * { Int32 ,  Char }});  end  # Works in type annotations too def  f2 ( x  :  Tuple ( Bool ,  * { Int32 ,  Char }));  end ae  =  &#39;a&#39; .. &#39;e&#39; ccae  =  [ &#39;&lt;&#39; ,  * ae ,  &#39;&gt;&#39; ]  # =&gt; [&#39;&lt;&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;&gt;&#39;] a  =  1 .. 10 b  =  5 .. 15 Set { * a ,  * b }  # =&gt; Set{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n The type of a while expression is now the union of all break expressions within the body, plus  Nil if the condition isn\u2019t exactly the  true literal; the while expression returns  nil if the condition fails. The type of a break expression is computed similarly to a break inside a block or a return ( Nil if empty,  Tuple if multiple values) ( #10566).\n # First the first non-blank line in STDIN first_non_blank_line  =  while  line  =  gets  break  line  unless  line . blank?  end puts  first_non_blank_line\n  It is now possible to access the top level module with the special instance variable  @top_level ( #10682):\n  NumberLiteral now includes a  to_number method to obtain the pure number, without any  stringification  #10802:\n  We included a small breaking change, as there was a mismatch between the documentation and the code regarding  Path#global?. The former  Path#global is now deprecated in favor of  Path#global?, whose name better represents it ( #10812).\n There is a new macro method  ASTNode#nil? for querying if an object is the  NilLiteral or  Nop ( #10850,  #10616).\n  There were several changes that are not supposed to have a direct impact on the users. The most important one to note is that to help get better error messages and documentation, several methods were annotated with expected types. Adding typing annotations might break existing code in specific scenarios so, if this happens to you, please let us now. Also, we are growing the native Windows support, requiring several refactors.\n  It is now possible to create numbers from different representations using  new, as in  Float32.new(&#34;1.1&#34;, whitespace:false) (( #10422).\n      Also, we generalized  Number#step with a new   Steppable module, that is included in  Char,  Number,  Time and  Time::Span ( #10279).\n Finally, it is now possible to  #truncate and  Array, to efficiently remove elements from both ends ( #10712).\n        The segfault handler is now implemented in Crystal, in practice meaning that the compilation process of Crystal is simpler: it does not require the former external  libcrystal. For package maintainers, this means building  libcrystal.a (which was part of the  make deps recipe) is obsolete now. The C code for this library has been removed and packaging instructions need to be updated.  make deps is no longer necessary for building arbitrary Crystal programs; now it only builds  llvm_ext.a, only required for linking against LLVM (for example when building the compiler itself).\n   We have been able to do all of this thanks to the continued support of  84codes,  Nikola Motor Company and every other  sponsor. To maintain and increase the development pace, donations and sponsorships are essential.  OpenCollective is available for that. Reach out to  crystal@manas.tech if you\u2019d like to become a direct sponsor or find other ways to support Crystal. We thank you in advance!\n  comments powered by  Disqus", "posttime": "2021-07-22 21:34:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c34\u6676,crystal,\u73b0\u5728", "title": "\u6c34\u6676 1.1.0", "title_en": "Crystal 1.1.0", "transed": 1, "url": "https://crystal-lang.org/2021/07/16/1.1.0-released.html", "via": "", "real_tags": ["\u6c34\u6676", "crystal", "\u73b0\u5728"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068749, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u516b\u4e2a\u6708\u7684\u6f2b\u957f\u7b49\u5f85\uff0cNature \u73b0\u5728\u53d1\u5e03\u4e86 AlphaFold 2 \u8bba\u6587\u3002\u6b63\u6587\u6216\u591a\u6216\u5c11\u5730\u62a5\u544a\u4e86\u6211\u4eec\u8fd1\u4e00\u5e74\u6765\u6240\u77e5\u9053\u7684\u5185\u5bb9\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e9b\u82b1\u7d6e\uff0c\u5c3d\u7ba1\u5728\u8865\u5145\u4fe1\u606f\u4e2d\u4f34\u968f\u7740\u5bf9\u67b6\u6784\u7684\u7ec6\u81f4\u63cf\u8ff0\u3002\u4e5f\u8bb8\u66f4\u91cd\u8981\u7684\u662f\uff0c\u4f5c\u8005\u5df2\u7ecf\u5728 Github \u4e0a\u53d1\u5e03\u4e86\u5b8c\u6574\u7684\u4ee3\u7801\uff0c\u5305\u62ec\u8fd0\u884c\u7ba1\u9053\u7684\u6240\u6709\u7ec6\u8282\u3002\u8fd9\u6b21\u6ca1\u6709\u5c0f\u5b57\uff1a\u60a8\u53ef\u4ee5\u5bf9\u4efb\u4f55\u86cb\u767d\u8d28\u8fdb\u884c\u63a8\u7406\uff08\u6211\u5df2\u7ecf\u68c0\u67e5\u8fc7\uff01\uff09\u3002\u4f60\u6ca1\u6709\u542c\u5230\u8fd9\u4e2a\u6d88\u606f\u5417\uff1f\u8ba9\u6211\u5237\u65b0\u4f60\u7684\u8bb0\u5fc6\u3002 2020 \u5e74 11 \u6708\uff0c\u6765\u81ea\u8c37\u6b4c DeepMind \u7684\u4eba\u5de5\u667a\u80fd\u79d1\u5b66\u5bb6\u56e2\u961f\u65e0\u53ef\u4e89\u8bae\u5730\u8d62\u5f97\u4e86\u7b2c 14 \u5c4a\u7ed3\u6784\u9884\u6d4b\u5173\u952e\u8bc4\u4f30\u7ade\u8d5b\uff0c\u8fd9\u662f\u4e00\u9879\u4e24\u5e74\u4e00\u5ea6\u7684\u76f2\u6d4b\uff0c\u8ba1\u7b97\u751f\u7269\u5b66\u5bb6\u8bd5\u56fe\u9884\u6d4b\u51e0\u79cd\u86cb\u767d\u8d28\u7684\u7ed3\u6784\uff0c\u8fd9\u4e9b\u86cb\u767d\u8d28\u7684\u7ed3\u6784\u5df2\u901a\u8fc7\u5b9e\u9a8c\u786e\u5b9a\u4f46\u672a\u516c\u5f00\u53d1\u5e03\u3002\u4ed6\u4eec\u7684\u7ed3\u679c\u5982\u6b64\u60ca\u4eba\uff0c\u800c\u4e14\u8fd9\u4e2a\u95ee\u9898\u5bf9\u751f\u7269\u5b66\u6765\u8bf4\u5982\u6b64\u91cd\u8981\uff0c\u4ee5\u81f3\u4e8e\u6574\u4e2a\u4e16\u754c\u90fd\u5927\u5403\u4e00\u60ca\uff0c\u6574\u4e2a\u5b66\u79d1\u2014\u2014\u8ba1\u7b97\u751f\u7269\u5b66\u2014\u2014\u90fd\u60f3\u77e5\u9053\u521a\u521a\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u73b0\u5728\u6587\u7ae0\u5df2\u7ecf\u4e0a\u7ebf\uff0c\u5174\u594b\u4e4b\u60c5\u6ea2\u4e8e\u8a00\u8868\u3002\u6211\u4eec\u6709 70 \u591a\u9875\u671f\u5f85\u5df2\u4e45\u7684\u7b54\u6848\uff0c\u4ee5\u53ca\u6570\u5343\u884c\u4ee3\u7801\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u5b83\u4eec\u5c06\u6210\u4e3a\u8ba1\u7b97\u751f\u7269\u5b66\u7684\u57fa\u672c\u7ec4\u6210\u90e8\u5206\u3002\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u4e5f\u6709\u8bb8\u591a\u65b0\u95ee\u9898\u3002\u65b0\u95fb\u7206\u51fa\u524d\u7684\u79d8\u8bc0\u662f\u4ec0\u4e48\uff0c\u4e3a\u4f55\u5982\u6b64\u6709\u6548\uff1f\u5b83\u662f\u4e00\u6bb5\u666e\u901a\u7528\u6237\u53ef\u4ee5\u5b9e\u9645\u8fd0\u884c\u7684\u4ee3\u7801\u5417\uff1f AlphaFold 2 \u7684\u7f3a\u70b9\u662f\u4ec0\u4e48\uff1f\u800c\u4e14\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u5bf9\u8ba1\u7b97\u751f\u7269\u5b66\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u5bf9\u4e8e\u6211\u4eec\u6240\u6709\u4eba\uff1f\u5728\u8fd9\u7bc7\u8bc4\u8bba\u4e2d\uff0c\u6211\u7684\u76ee\u6807\u662f\u4f5c\u4e3a\u6211\u516b\u4e2a\u6708\u524d\u535a\u5ba2\u6587\u7ae0\u7684\u5ef6\u7eed\uff0c\u6211\u8bd5\u56fe\u89e3\u51b3\u5176\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u9996\u5148\uff0c\u6211\u63d0\u4f9b\u4e86 AlphaFold 2 \u67b6\u6784\u7684\u9e1f\u77b0\u56fe\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6280\u672f\u8bf4\u660e\uff08SI \u5c3d\u53ef\u80fd\u8be6\u7ec6\uff0c\u751a\u81f3\u4ee3\u7801\u4e5f\u5f15\u7528\u4e86\u5176\u4e2d\u7684\u4e0d\u540c\u90e8\u5206\uff09\uff0c\u800c\u662f\u4fa7\u91cd\u4e8e\u67b6\u6784\u80cc\u540e\u7684\u76f4\u89c9\u3002\u6211\u5e0c\u671b\u8fd9\u80fd\u8986\u76d6\u90a3\u4e9b\u6ca1\u6709\u6df1\u5ea6\u5b66\u4e60\u548c\u751f\u7269\u4fe1\u606f\u5b66\u80cc\u666f\u4f46\u60f3\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\u7684\u4eba\uff1b\u4ee5\u53ca\u90a3\u4e9b\u53ef\u80fd\u5177\u6709\u6b63\u786e\u80cc\u666f\u4f46\u5e0c\u671b\u5728\u6df1\u5165\u7814\u7a76\u4e4b\u524d\u5bf9\u5168\u6587\u8fdb\u884c\u6982\u8ff0\u7684\u4eba\u3002\u6839\u636e\u51b0\u51b7\u3001\u575a\u786c\u7684\u4e8b\u5b9e\uff0c\u6211\u5bf9\u5efa\u7b51\u80cc\u540e\u7684\u60f3\u6cd5\u8fdb\u884c\u4e86\u5b8c\u5168\u4e2a\u4eba\u7684\u8bc4\u4f30\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4f1a\u89e3\u91ca\u6211\u8ba4\u4e3a\u54ea\u4e9b\u60f3\u6cd5\u662f AlphaFold 2 \u6210\u529f\u7684\u5173\u952e\uff0c\u5e76\u63a8\u6d4b\u54ea\u4e9b\u56e0\u7d20\u4f7f\u8fd9\u4e2a\u56e2\u961f\u53d6\u5f97\u4e86\u6210\u529f\uff0c\u800c\u5176\u4ed6\u8bb8\u591a\u4eba\u90fd\u6ca1\u6709\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u662f\u4e00\u4e2a\u6709\u5f3a\u70c8\u610f\u89c1\u7684\u4eba\uff0c\u4f46\u4ecd\u7136\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\u6211\u7684\u60f3\u6cd5\u53ef\u80fd\u5b8c\u5168\u671d\u7740\u9519\u8bef\u7684\u65b9\u5411\u53d1\u5c55\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u8ba4\u4e3a AlphaFold 2 \u7684\u6545\u4e8b\u63d0\u51fa\u4e86\u5f88\u591a\u6211\u4eec\u4f5c\u4e3a\u793e\u533a\u5c1a\u672a\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u503c\u5f97\u5728\u67d0\u5904\u9002\u5f53\u8003\u8651\u3002\u6700\u540e\uff0c\u6211\u91cd\u65b0\u5ba1\u89c6\u4e86\u6211\u516b\u4e2a\u6708\u524d\u63d0\u51fa\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u8bba\u6587\u6216\u4ee3\u7801\u5df2\u7ecf\u56de\u7b54\u4e86\u5176\u4e2d\u4e00\u4e9b\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u8fd0\u884c\u4ee3\u7801\u7684\u9650\u5236\u662f\u4ec0\u4e48\uff09\u3002\u8fd8\u6709\u4e00\u4e9b\u6ca1\u6709\u660e\u786e\u89e3\u51b3\uff0c\u4f46\u6211\u6709\u673a\u4f1a\u66f4\u6df1\u5165\u5730\u601d\u8003\u5b83\u4eec\uff0c\u6211\u8ba4\u4e3a\u6211\u6709\u4e00\u4e9b\u65b0\u9896\u7684\u89c1\u89e3\u3002\u8fd8\u6709\u4e00\u4e9b\u662f\u7531\u65b0\u4fe1\u606f\u5f15\u8d77\u7684\u95ee\u9898\uff0c\u6211\u8ba4\u4e3a\u6211\u4eec\u5fc5\u987b\u4e00\u8d77\u56de\u7b54\u3002\u6211\u5411\u81ea\u5df1\u4fdd\u8bc1\uff0c\u8fd9\u6b21\u6211\u4f1a\u66f4\u7b80\u6d01\u2014\u2014\u6bd5\u7adf\u51e0\u4e2a\u6708\u540e\u6211\u5e94\u8be5\u5199\u6211\u7684\u535a\u58eb\u8bba\u6587\uff0c\u6211\u771f\u7684\u6ca1\u6709\u592a\u591a\u65f6\u95f4\u53ef\u4ee5\u817e\u51fa\u65f6\u95f4\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u662f\u5426\u7ba1\u7406\u3002\n\u76f4\u5230\u5468\u56db\u65e9\u4e0a\uff0c\u6211\u4eec\u5f97\u5230\u7684\u6700\u4f73\u7b54\u6848\u662f\u4e00\u5f20\u56fe\u7247\uff0c\u65e9\u5728 11 \u6708\uff0cDeepMind \u7684\u65b0\u95fb\u7a3f\u4e2d\u5c31\u5df2\u53d1\u5e03\u3002\u8fd9\u79cd\u6a21\u5f0f\u5728\u5f53\u65f6\u5728\u4e92\u8054\u7f51\u4e0a\u6d41\u4f20\uff0c\u5e76\u4e14\u4ece\u90a3\u65f6\u8d77\u5c31\u51fa\u73b0\u5728\u4f17\u591a\u4f1a\u8bae\u548c\u8ba8\u8bba\u7ec4\u4e2d\u3002\u4f46\u662f\uff0c\u9057\u61be\u7684\u662f\uff0c\u5b83\u7f3a\u4e4f\u7ec6\u8282\uff0c\u5373\u4f7f\u662f\u77e5\u8bc6\u6700\u6e0a\u535a\u7684\u6df1\u5ea6\u5b66\u4e60\u4e13\u5bb6\u4e5f\u53ea\u80fd\u505a\u51fa\u6709\u6839\u636e\u7684\u731c\u6d4b\u3002 Nature \u6587\u7ae0\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u76f8\u4f3c\u4f46\u7a0d\u5fae\u8be6\u7ec6\u7684\u56fe\u8868\uff0c\u6982\u8ff0\u4e86\u67b6\u6784\u7684\u4e0d\u540c\u90e8\u5206\u3002\u603b\u4f53\u601d\u8def\u975e\u5e38\u7b80\u5355\uff0c\u6240\u4ee5\u6211\u5c06\u5c1d\u8bd5\u7528\u51e0\u884c\u6765\u52fe\u52d2\u5b83\u3002\u5982\u679c\u60a8\u4e0d\u719f\u6089\u6df1\u5ea6\u5b66\u4e60\uff0c\u4ee5\u4e0b\u5185\u5bb9\u53ef\u80fd\u542c\u8d77\u6765\u6709\u70b9\u62bd\u8c61\uff0c\u4f46\u5b8c\u5168\u6ca1\u95ee\u9898\u3002\u7a0d\u540e\u6211\u5c06\u5e26\u60a8\u4e86\u89e3\u8be6\u7ec6\u4fe1\u606f\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u8ba9\u6211\u4eec\u5c1d\u8bd5\u83b7\u53d6\u7f51\u7edc\u7684\u793a\u610f\u56fe\u3002\u4e3a\u6e05\u695a\u8d77\u89c1\uff0c\u6211\u5c06\u56fe\u50cf\u5206\u6210\u4e09\u4efd\uff0c\u4ee3\u8868 AlphaFold 2 \u7cfb\u7edf\u7684\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u3002\u9996\u5148\uff0cAlphaFold 2\u7cfb\u7edf\u5229\u7528\u8f93\u5165\u7684\u6c28\u57fa\u9178\u5e8f\u5217\u67e5\u8be2\u591a\u4e2a\u86cb\u767d\u8d28\u5e8f\u5217\u6570\u636e\u5e93\uff0c\u6784\u5efa\u591a\u5e8f\u5217\u6bd4\u5bf9\uff08MSA\uff09\u3002\u7b80\u800c\u8a00\u4e4b\uff0cMSA \u53ef\u8bc6\u522b\u5728\u751f\u7269\u4f53\u4e2d\u5df2\u8bc6\u522b\u7684\u76f8\u4f3c\u4f46\u4e0d\u76f8\u540c\u7684\u5e8f\u5217\u3002\u8fd9\u53ef\u4ee5\u786e\u5b9a\u5e8f\u5217\u4e2d\u66f4\u53ef\u80fd\u53d1\u751f\u53d8\u5f02\u7684\u90e8\u5206\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u68c0\u6d4b\u5b83\u4eec\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002 AlphaFold 2 \u8fd8\u5c1d\u8bd5\u8bc6\u522b\u53ef\u80fd\u4e0e\u8f93\u5165\uff08\u201c\u6a21\u677f\u201d\uff09\u5177\u6709\u76f8\u4f3c\u7ed3\u6784\u7684\u86cb\u767d\u8d28\uff0c\u5e76\u6784\u5efa\u8be5\u7ed3\u6784\u7684\u521d\u59cb\u8868\u793a\uff0c\u79f0\u4e3a\u201c\u5bf9\u8868\u793a\u201d\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u8fd9\u662f\u4e00\u79cd\u6c28\u57fa\u9178\u53ef\u80fd\u76f8\u4e92\u63a5\u89e6\u7684\u6a21\u578b\u3002\u5728\u56fe\u8868\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\uff0cAlphaFold 2 \u5c06\u591a\u5e8f\u5217\u5bf9\u9f50\u548c\u6a21\u677f\uff0c\u5e76\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9\u4e00\u4e2a\u8f6c\u6362\u5668\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u8ba8\u8bba Transformer \u9700\u8981\u4ec0\u4e48\uff0c\u4f46\u73b0\u5728\u60a8\u53ef\u4ee5\u5c06\u5176\u7406\u89e3\u4e3a\u201coracle\u201d\uff0c\u53ef\u4ee5\u5feb\u901f\u8bc6\u522b\u54ea\u4e9b\u4fe1\u606f\u7684\u4fe1\u606f\u91cf\u66f4\u5927\u3002\u8fd9\u90e8\u5206\u7684\u76ee\u6807\u662f\u6539\u8fdb MSA \u548c\u914d\u5bf9\u4ea4\u4e92\u7684\u8868\u793a\uff0c\u540c\u65f6\u4e5f\u5728\u5b83\u4eec\u4e4b\u95f4\u8fed\u4ee3\u5730\u4ea4\u6362\u4fe1\u606f\u3002\u66f4\u597d\u7684 MSA \u6a21\u578b\u5c06\u6539\u8fdb\u7f51\u7edc\u5bf9\u51e0\u4f55\u7684\u8868\u5f81\uff0c\u540c\u65f6\u6709\u52a9\u4e8e\u6539\u8fdb MSA \u6a21\u578b\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u88ab\u7ec4\u7ec7\u6210\u5757\uff0c\u8fed\u4ee3\u5730\u91cd\u590d\u76f4\u5230\u6307\u5b9a\u6570\u91cf\u7684\u5faa\u73af\uff08\u5df2\u53d1\u5e03\u6a21\u578b\u4e2d\u7684 48 \u4e2a\u5757\uff09\u3002\u8be5\u4fe1\u606f\u88ab\u5e26\u5230\u56fe\u8868\u7684\u6700\u540e\u4e00\u90e8\u5206\uff1a\u7ed3\u6784\u6a21\u5757\u3002\u8fd9\u6761\u590d\u6742\u7684\u7ba1\u9053\u91c7\u7528\u7cbe\u70bc\u7684\u201cMSA \u8868\u793a\u201d\u548c\u201c\u5bf9\u8868\u793a\u201d\uff0c\u5e76\u5229\u7528\u5b83\u4eec\u6765\u6784\u5efa\u7ed3\u6784\u7684\u4e09\u7ef4\u6a21\u578b\u3002\u4e0e\u4e4b\u524d\u6700\u5148\u8fdb\u7684\u6a21\u578b\u4e0d\u540c\uff0c\u8be5\u7f51\u7edc\u4e0d\u4f7f\u7528\u4efb\u4f55\u4f18\u5316\u7b97\u6cd5\uff1a\u5b83\u53ea\u9700\u4e00\u6b65\u5373\u53ef\u751f\u6210\u9759\u6001\u7684\u6700\u7ec8\u7ed3\u6784\u3002\u6700\u7ec8\u7ed3\u679c\u662f\u4e00\u957f\u4e32\u7b1b\u5361\u5c14\u5750\u6807\uff0c\u4ee3\u8868\u86cb\u767d\u8d28\u6bcf\u4e2a\u539f\u5b50\u7684\u4f4d\u7f6e\uff0c\u5305\u62ec\u4fa7\u94fe\u3002\u56e0\u6b64\uff0c\u56de\u987e\u4e00\u4e0b\uff1aAlphaFold 2 \u627e\u5230\u4e0e\u8f93\u5165\u76f8\u4f3c\u7684\u5e8f\u5217\uff0c\u4f7f\u7528\u7279\u6b8a\u7684\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\u63d0\u53d6\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u8be5\u4fe1\u606f\u4f20\u9012\u7ed9\u53e6\u4e00\u4e2a\u751f\u6210\u7ed3\u6784\u7684\u795e\u7ecf\u7f51\u7edc\u3002\n\u6700\u540e\u4e00\u70b9\u662f\u8be5\u6a21\u578b\u4ee5\u8fed\u4ee3\u65b9\u5f0f\u5de5\u4f5c\u3002\u751f\u6210\u6700\u7ec8\u7ed3\u6784\u540e\uff0c\u5b83\u5c06\u83b7\u53d6\u6240\u6709\u4fe1\u606f\uff08\u5373 MSA \u8868\u793a\u3001\u5bf9\u8868\u793a\u548c\u9884\u6d4b\u7ed3\u6784\uff09\u5e76\u5c06\u5176\u4f20\u9012\u56de Evoformer \u5757\u7684\u5f00\u5934\uff0c\u5373\u6211\u4eec\u56fe\u8868\u7684\u7b2c\u4e8c\u90e8\u5206\u3002\u8fd9\u5141\u8bb8\u6a21\u578b\u6539\u8fdb\u5176\u9884\u6d4b\uff0c\u5e76\u751f\u6210\u4e00\u4e9b\u60a8\u53ef\u4ee5\u5728\u6587\u7ae0\u9875\u9762\u4e2d\u627e\u5230\u7684\u6709\u8da3\u89c6\u9891\u3002\u4e0e\u5927\u591a\u6570\u751f\u7269\u4fe1\u606f\u5b66\u7a0b\u5e8f\u4e00\u6837\uff0cAlphaFold 2 \u914d\u5907\u4e86\u201c\u9884\u5904\u7406\u7ba1\u9053\u201d\uff0c\u8fd9\u662f\u8be5\u5b66\u79d1\u5bf9\u201c\u8c03\u7528\u5176\u4ed6\u4ee3\u7801\u7684 Bash \u811a\u672c\u201d\u7684\u672f\u8bed\u3002\u7ba1\u9053\u8fd0\u884c\u591a\u4e2a\u7a0b\u5e8f\u6765\u67e5\u8be2\u6570\u636e\u5e93\uff0c\u5e76\u4f7f\u7528\u8f93\u5165\u5e8f\u5217\u751f\u6210\u591a\u5e8f\u5217\u6bd4\u5bf9 (MSA) \u548c\u6a21\u677f\u5217\u8868\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u811a\u672c\u7565\u6709\u4e0d\u540c\uff0c\u4f46 AlphaFold 2 \u4e0e\u60a8\u7684\u82b1\u56ed\u54c1\u79cd\u86cb\u767d\u8d28\u7ed3\u6784\u9884\u6d4b\u9884\u5904\u7406\u7ba1\u9053\u5e76\u6ca1\u6709\u592a\u5927\u533a\u522b\u3002\u503c\u5f97\u89e3\u91ca\u591a\u5e8f\u5217\u200b\u200b\u6bd4\u5bf9\u7684\u542b\u4e49\u3002\u5728 MSA \u4e2d\uff0c\u6211\u4eec\u6253\u7b97\u9884\u6d4b\u5176\u7ed3\u6784\u7684\u86cb\u767d\u8d28\u7684\u5e8f\u5217\u5728\u4e00\u4e2a\u5927\u578b\u6570\u636e\u5e93\u4e2d\u8fdb\u884c\u6bd4\u8f83\uff08\u901a\u5e38\u7c7b\u4f3c\u4e8e UniRef\uff0c\u5c3d\u7ba1\u5728\u540e\u6765\u7684\u51e0\u5e74\u4e2d\uff0c\u4f7f\u7528\u6e90\u81ea\u5b8f\u57fa\u56e0\u7ec4\u5b66\u7684\u5e8f\u5217\u6765\u4e30\u5bcc\u8fd9\u4e9b\u6bd4\u5bf9\u662f\u5f88\u5e38\u89c1\u7684\uff09\u3002\u6f5c\u5728\u7684\u60f3\u6cd5\u662f\uff0c\u5982\u679c\u4e24\u4e2a\u6c28\u57fa\u9178\u7d27\u5bc6\u63a5\u89e6\uff0c\u5176\u4e2d\u4e00\u4e2a\u7684\u7a81\u53d8\u5c06\u7d27\u968f\u53e6\u4e00\u4e2a\u7684\u7a81\u53d8\uff0c\u4ee5\u4fdd\u6301\u7ed3\u6784\u3002\u8003\u8651\u4ee5\u4e0b\u793a\u4f8b\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u79cd\u86cb\u767d\u8d28\uff0c\u5176\u4e2d\u5e26\u8d1f\u7535\u8377\u7684\u6c28\u57fa\u9178\uff08\u4f8b\u5982\u8c37\u6c28\u9178\uff09\u9760\u8fd1\u5e26\u6b63\u7535\u8377\u7684\u6c28\u57fa\u9178\uff08\u4f8b\u5982\u8d56\u6c28\u9178\uff09\uff0c\u5c3d\u7ba1\u5b83\u4eec\u5728\u6c28\u57fa\u9178\u5e8f\u5217\u4e2d\u90fd\u76f8\u8ddd\u751a\u8fdc\u3002\u8fd9\u79cd\u5e93\u4ed1\u76f8\u4e92\u4f5c\u7528\u7a33\u5b9a\u4e86\u86cb\u767d\u8d28\u7684\u7ed3\u6784\u3002\u73b0\u5728\u60f3\u8c61\u4e00\u4e0b\uff0c\u7b2c\u4e00\u4e2a\u6c28\u57fa\u9178\u7a81\u53d8\u6210\u5e26\u6b63\u7535\u7684\u6c28\u57fa\u9178\u2014\u2014\u4e3a\u4e86\u4fdd\u6301\u8fd9\u79cd\u63a5\u89e6\uff0c\u7b2c\u4e8c\u4e2a\u6c28\u57fa\u9178\u5c06\u5728\u8fdb\u5316\u538b\u529b\u4e0b\u7a81\u53d8\u6210\u5e26\u8d1f\u7535\u7684\u6c28\u57fa\u9178\uff0c\u5426\u5219\u4ea7\u751f\u7684\u86cb\u767d\u8d28\u53ef\u80fd\u65e0\u6cd5\u6298\u53e0.\u5f53\u7136\uff0c\u771f\u5b9e\u60c5\u51b5\u5f88\u5c11\u50cf\u8fd9\u4e2a\u4f8b\u5b50\u90a3\u6837\u660e\u786e\uff0c\u4f46\u4f60\u660e\u767d\u4e86\u3002\u67e5\u627e\u6a21\u677f\u9075\u5faa\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u4f46\u53c8\u5bc6\u5207\u76f8\u5173\u7684\u539f\u5219\u3002\u6a21\u677f\u5efa\u6a21\u80cc\u540e\u7684\u54f2\u5b66\u53ef\u4ee5\u7528\u683c\u8a00\u201c\u592a\u9633\u5e95\u4e0b\u6ca1\u6709\u65b0\u9c9c\u4e8b\u201d\u6765\u7f16\u7801\u3002\u86cb\u767d\u8d28\u4f1a\u53d1\u751f\u53d8\u5f02\u548c\u8fdb\u5316\uff0c\u4f46\u5c3d\u7ba1\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u4f46\u5b83\u4eec\u7684\u7ed3\u6784\u5f80\u5f80\u4fdd\u6301\u76f8\u4f3c\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u56fe\u4e2d\uff0c\u6211\u5c55\u793a\u4e86\u5bf9\u5e94\u4e8e\u4e0d\u540c\u751f\u7269\u4f53\u7684\u56db\u79cd\u4e0d\u540c\u808c\u7ea2\u86cb\u767d\u7684\u7ed3\u6784\u3002\u60a8\u53ef\u4ee5\u6b23\u8d4f\u5b83\u4eec\u770b\u8d77\u6765\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u662f\u5982\u679c\u60a8\u67e5\u770b\u5e8f\u5217\uff0c\u60a8\u4f1a\u53d1\u73b0\u5de8\u5927\u7684\u5dee\u5f02\u3002\u4f8b\u5982\uff0c\u53f3\u4e0b\u89d2\u7684\u86cb\u767d\u8d28\u4e0e\u5de6\u4e0a\u89d2\u7684\u86cb\u767d\u8d28\u53ea\u6709\u7ea6 25% \u7684\u6c28\u57fa\u9178\u76f8\u540c\u3002\u7136\u800c\uff0c\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4fdd\u62a4\u53d1\u751f\u5728\u8f83\u5c0f\u7684\u8303\u56f4\u5185\uff0c\u5176\u4e2d\u86cb\u767d\u8d28\u7247\u6bb5\uff08\u4f8b\u5982\uff0c\u9176\u7684\u6d3b\u6027\u4e2d\u5fc3\uff09\u5728\u5176\u5468\u56f4\u73af\u5883\u8fdb\u5316\u65f6\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8\u3002\u5927\u5c0f\u5e76\u4e0d\u91cd\u8981\uff1a\u4f7f\u7528\u6b63\u786e\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8bc6\u522b\u5176\u4e2d\u4e00\u4e9b\u4fdd\u5b88\u7247\u6bb5\u5e76\u5c06\u5b83\u4eec\u7528\u4f5c\u6784\u5efa\u7ed3\u6784\u7684\u6307\u5357\u3002\u8fd9\u662f\u7ed3\u6784\u9884\u6d4b\u4e2d\u7684\u4e00\u4e2a\u91cd\u8981\u56e0\u7d20\uff0cCASP14 \u4e2d\u7684\u76ee\u6807\u901a\u5e38\u6839\u636e\u53ef\u7528\u6a21\u677f\u7684\u6570\u91cf\u8fdb\u884c\u5206\u7c7b\u3002\u8fd9\u91cc\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5417\uff1f\u5e76\u975e\u5982\u6b64\uff1aCASP14 \u7684\u5927\u591a\u6570\u53c2\u4e0e\u8005\u90fd\u9075\u5faa\u975e\u5e38\u76f8\u4f3c\u7684\u7b56\u7565\u3002\u4f7f\u7528\u76f8\u5173\u7a81\u53d8\u4ece MSA \u4e2d\u63d0\u53d6\u7ed3\u6784\u4fe1\u606f\u7684\u60f3\u6cd5\u5df2\u6709\u6570\u5341\u5e74\u5386\u53f2\uff0c\u800c\u6536\u96c6\u5176\u4ed6\u86cb\u767d\u8d28\u7247\u6bb5\u6765\u6a21\u62df\u76ee\u6807\u7ed3\u6784\u7684\u60f3\u6cd5\u751a\u81f3\u53ef\u80fd\u66f4\u65e9\u3002\u6211\u60f3\u8bf4\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6ca1\u6709\u4ec0\u4e48\u65b0\u4e1c\u897f\u3002\n\u8fd9\u662f\u6545\u4e8b\u771f\u6b63\u5f00\u59cb\u7684\u5730\u65b9\u3002\u5de8\u5927\u7684 AlphaFold 2 \u795e\u7ecf\u7f51\u7edc\u7684\u7b2c\u4e00\u90e8\u5206 Evoformer \u7684\u4efb\u52a1\u662f\u4ece\u591a\u5e8f\u5217\u6bd4\u5bf9\u548c\u6a21\u677f\u4e2d\u63d0\u53d6\u6bcf\u4e00\u76ce\u53f8\u7684\u4fe1\u606f\u3002\u542c\u5230\u4ece\u591a\u5e8f\u5217\u6bd4\u5bf9\u4e2d\u63d0\u53d6\u4fe1\u606f\uff08\u201c\u534f\u540c\u8fdb\u5316\u5206\u6790\u201d\uff09\u591a\u5e74\u6765\u4e00\u76f4\u662f\u7ed3\u6784\u751f\u7269\u4fe1\u606f\u5b66\u7684\u4e3b\u8981\u8ffd\u6c42\uff0c\u60a8\u53ef\u80fd\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\u3002\u4eba\u4eec\u5728 90 \u5e74\u4ee3\u5f00\u59cb\u7814\u7a76\u5b83\uff0c\u5c3d\u7ba1\u6210\u529f\u6709\u9650\u3002\u5728\u4e0a\u4e2a\u5341\u5e74\u4e4b\u521d\uff0c\u51e0\u4e2a\u5c0f\u7ec4\u5f00\u59cb\u786e\u5b9a\u4e00\u4e9b\u963b\u788d\u5148\u524d\u5c1d\u8bd5\u7684\u504f\u89c1\uff0c\u5e76\u5f00\u53d1\u4e86\u5f3a\u5927\u7684\u7edf\u8ba1\u673a\u5236\u6765\u7ea0\u6b63\u5b83\u4eec\u3002\u51e0\u5e74\u6765\u53d6\u5f97\u4e86\u4e00\u4e9b\u6301\u7eed\u7684\u8fdb\u5c55\u3002\u7136\u540e\uff0c\u5728 CASP13 (2018) \u4e2d\uff0c\u51e0\u4e2a\u5c0f\u7ec4\u8bc1\u660e\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u7a33\u5065\u7684\u7edf\u8ba1\u6570\u636e\uff1a\u4f60\u53ea\u9700\u8981\u8bad\u7ec3\u6df1\u5ea6\u6b8b\u5dee\u795e\u7ecf\u7f51\u7edc\u3002 AlphaFold 2 \u7684 Evoformer \u5f7b\u5e95\u6539\u9020\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5e76\u8fdb\u4e00\u6b65\u63a8\u8fdb\u4e86\u51e0\u4e2a\u6b65\u9aa4\u3002 Evoformer \u80cc\u540e\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\u4fe1\u606f\u5728\u6574\u4e2a\u7f51\u7edc\u4e2d\u6765\u56de\u6d41\u52a8\u3002\u5728 AlphaFold 2 \u4e4b\u524d\uff0c\u5927\u591a\u6570\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5c06\u91c7\u7528\u591a\u5e8f\u5217\u6bd4\u5bf9\u5e76\u8f93\u51fa\u4e00\u4e9b\u5173\u4e8e\u51e0\u4f55\u63a5\u8fd1\u5ea6\u7684\u63a8\u65ad\u3002\u56e0\u6b64\uff0c\u51e0\u4f55\u4fe1\u606f\u662f\u7f51\u7edc\u7684\u4ea7\u7269\u3002\u76f8\u53cd\uff0c\u5728 Evoformer \u4e2d\uff0c\u5bf9\u8868\u793a\u65e2\u662f\u4ea7\u54c1\u53c8\u662f\u4e2d\u95f4\u5c42\u3002\u5728\u6bcf\u4e2a\u5faa\u73af\u4e2d\uff0c\u8be5\u6a21\u578b\u5229\u7528\u5f53\u524d\u7684\u7ed3\u6784\u5047\u8bbe\u6765\u6539\u8fdb\u5bf9\u591a\u5e8f\u5217\u6bd4\u5bf9\u7684\u8bc4\u4f30\uff0c\u8fd9\u53cd\u8fc7\u6765\u53c8\u4f1a\u5bfc\u81f4\u65b0\u7684\u7ed3\u6784\u5047\u8bbe\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u8868\u793a\uff0c\u5e8f\u5217\u548c\u7ed3\u6784\uff0c\u4ea4\u6362\u4fe1\u606f\uff0c\u76f4\u5230\u7f51\u7edc\u8fbe\u5230\u53ef\u9760\u7684\u63a8\u7406\u3002\u8fd9\u4f5c\u4e3a\u793a\u4f8b\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u5047\u8bbe\u60a8\u67e5\u770b\u591a\u5e8f\u5217\u6bd4\u5bf9\u5e76\u6ce8\u610f\u5230\u4e00\u5bf9\u6c28\u57fa\u9178\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002\u8ba9\u6211\u4eec\u79f0\u5b83\u4eec\u4e3a A \u548c B\u3002\u60a8\u5047\u8bbe A \u548c B \u5f88\u63a5\u8fd1\uff0c\u7136\u540e\u5c06\u6b64\u5047\u8bbe\u8f6c\u5316\u4e3a\u60a8\u7684\u7ed3\u6784\u6a21\u578b\u3002\u968f\u540e\uff0c\u60a8\u68c0\u67e5\u6240\u8ff0\u6a21\u578b\u5e76\u89c2\u5bdf\u5230\uff0c\u7531\u4e8e A \u548c B \u5f88\u63a5\u8fd1\uff0c\u56e0\u6b64 C \u548c D \u5f88\u53ef\u80fd\u5e94\u8be5\u63a5\u8fd1\u3002\u8fd9\u5bfc\u81f4\u4e86\u53e6\u4e00\u4e2a\u57fa\u4e8e\u7ed3\u6784\u7684\u5047\u8bbe\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 MSA \u4e2d\u641c\u7d22 C \u548c D \u4e4b\u95f4\u7684\u76f8\u5173\u6027\u6765\u786e\u8ba4\u3002\u901a\u8fc7\u591a\u6b21\u91cd\u590d\u6b64\u64cd\u4f5c\uff0c\u60a8\u53ef\u4ee5\u5f88\u597d\u5730\u7406\u89e3\u7ed3\u6784\u3002\u7f51\u7edc\u4e2d\u7684\u7b2c\u4e00\u6b65\u662f\u4e3a MSA \u548c\u6a21\u677f\u5b9a\u4e49\u201c\u5d4c\u5165\u201d\u3002\u8bf7\u8bb0\u4f4f\uff0c\u591a\u91cd\u5e8f\u5217\u6bd4\u5bf9\u6700\u7ec8\u662f\u6765\u81ea\u6709\u9650\u5b57\u6bcd\u8868\u7684\u7b26\u53f7\u5e8f\u5217\uff1a\u79bb\u6563\u53d8\u91cf\u7684\u4e3b\u8981\u4f8b\u5b50\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u795e\u7ecf\u7f51\u7edc\u672c\u8d28\u4e0a\u662f\u8fde\u7eed\u7684\u8bbe\u5907\uff0c\u4f9d\u9760\u5dee\u5f02\u5316\u4ece\u8bad\u7ec3\u96c6\u4e2d\u5b66\u4e60\u3002 \u201c\u5d4c\u5165\u201d\u662f\u6df1\u5ea6\u5b66\u4e60\u9b54\u6cd5\u4e66\u4e2d\u7684\u4e00\u4e2a\u6280\u5de7\uff0c\u5b83\u5141\u8bb8\u5c06\u79bb\u6563\u53d8\u91cf\u8f6c\u6362\u4e3a\u8fde\u7eed\u7a7a\u95f4\uff08\u201c\u5d4c\u5165\u7a7a\u95f4\u201d\uff09\uff0c\u4ece\u800c\u53ef\u4ee5\u8bad\u7ec3\u7f51\u7edc\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u590d\u6742\uff0c\u5b9e\u9645\u4e0a\u975e\u5e38\u7b80\u5355\u3002\u60a8\u53ea\u9700\u8981\u5b9a\u4e49\u4e00\u5c42\u63a5\u6536\u79bb\u6563\u8f93\u5165\u5e76\u8f93\u51fa\u4e00\u4e9b\u8fde\u7eed\u5411\u91cf\u7684\u795e\u7ecf\u5143\u3002\u5d4c\u5165\u53ef\u80fd\u662f\u9884\u8bad\u7ec3\u7684\uff0c\u8fd9\u5728\u81ea\u7136\u8bed\u8a00\u5904\u7406 (NLP) \u4e2d\u5f88\u5e38\u89c1\uff0c\u4f46\u66f4\u5e38\u89c1\u7684\u662f\uff0c\u5b83\u4e0e\u6211\u4eec\u8bd5\u56fe\u5b66\u4e60\u7684\u4efb\u4f55\u76ee\u6807\u4e00\u8d77\u8bad\u7ec3\u3002\u5728 AlphaFold 2 \u4e2d\uff0c\u5d4c\u5165\u662f\u666e\u901a\u7684\u5bc6\u96c6\u795e\u7ecf\u7f51\u7edc\u3002\n\u4e00\u65e6\u6211\u4eec\u7684 MSA \u548c\u6a21\u677f\u5904\u4e8e\u6b63\u786e\u7684\u201c\u5d4c\u5165\u7a7a\u95f4\u201d\uff0cEvoformer \u5c31\u8be5\u53d1\u6325\u5b83\u7684\u9b54\u529b\u4e86\u3002\u8981\u4e86\u89e3 Evoformer\uff0c\u60a8\u9996\u5148\u9700\u8981\u719f\u6089\u8fc4\u4eca\u4e3a\u6b62\u6700\u70ed\u95e8\u7684\u6df1\u5ea6\u5b66\u4e60\u67b6\u6784\uff1atransformer\u3002\u4e0d\u4e4f\u89e3\u91ca\u8fd9\u79cd\u67b6\u6784\u7684\u6750\u6599\uff0c\u5766\u7387\u5730\u8bf4\uff0c\u5f88\u591a\uff08\u5982\u679c\u4e0d\u662f\u5927\u591a\u6570\uff09\u90fd\u4f1a\u6bd4\u6211\u7684\u8981\u597d\u3002\u5982\u679c\u60a8\u5bf9\u6df1\u5165\u5206\u6790\u611f\u5174\u8da3\uff0c\u6211\u4f1a\u63a8\u8350 Jay Alammar \u7684 The Illustrated Transformer\u3002\u5982\u679c\u60a8\u53ea\u60f3\u77e5\u9053\u6700\u4f4e\u9650\u5ea6\uff0c\u8bf7\u9605\u8bfb\u4ee5\u4e0b\u5185\u5bb9\u3002\u800c\u4e14\uff0c\u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053\u50cf\u624b\u638c\u8fd9\u6837\u7684\u8f6c\u6362\u5668\uff0c\u8bf7\u6309 Ctrl+F \u5e76\u5728\u4e0b\u9762\u7684\u51e0\u6bb5\u4e2d\u627e\u5230\u201c\u56de\u5230 Evoformer\u201d\u8fd9\u53e5\u8bdd\u3002 Transformer \u67b6\u6784\u4e8e 2017 \u5e74\u7531 Google Brain \u7684\u4e00\u4e2a\u56e2\u961f\u5728\u4e00\u7bc7\u9898\u4e3a\u201cAttention is all you need\u201d\u7684\u8bba\u6587\u4e2d\u4ecb\u7ecd\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u4ece\u663e\u773c\u7684\u6807\u9898\u4e2d\u60f3\u8c61\u7684\u90a3\u6837\uff0c\u5173\u952e\u8981\u7d20\u662f\u4e00\u79cd\u79f0\u4e3a\u6ce8\u610f\u529b\u7684\u65b0\u9896\u673a\u5236\u3002\u6ce8\u610f\u7684\u76ee\u6807\u662f\u786e\u5b9a\u8f93\u5165\u7684\u54ea\u4e9b\u90e8\u5206\u5bf9\u795e\u7ecf\u7f51\u7edc\u7684\u76ee\u6807\u66f4\u91cd\u8981\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8981\u786e\u5b9a\u5b83\u5e94\u8be5\u6ce8\u610f\u8f93\u5165\u7684\u54ea\u4e9b\u90e8\u5206\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u60a8\u6b63\u5728\u5c1d\u8bd5\u8bad\u7ec3\u4e00\u4e2a\u795e\u7ecf\u7f51\u7edc\u6765\u751f\u6210\u56fe\u50cf\u6807\u9898\u3002\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6cd5\u662f\u8bad\u7ec3\u7f51\u7edc\u5904\u7406\u6574\u4e2a\u56fe\u50cf\u2014\u2014\u6bd4\u5982 512\u00d7512 \u56fe\u7247\u4e2d\u7684\u7ea6 250k \u50cf\u7d20\u3002\u8fd9\u53ef\u80fd\u6709\u6548\uff0c\u4f46\u6709\u4e00\u4e9b\u539f\u56e0\u8868\u660e\u5b83\u4e0d\u662f\u6700\u597d\u7684\u4e3b\u610f\u3002\u4e5f\u8bb8\u9996\u5148\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u6211\u4eec\u4eba\u7c7b\u6240\u505a\u7684\uff1a\u5f53\u6211\u4eec\u770b\u4e00\u5f20\u56fe\u7247\u65f6\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u770b\u5230\u5b83\u201c\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u201d\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u5176\u5212\u5206\u4e3a\u4e0d\u540c\u7684\u6a21\u5f0f\uff1a\u5b69\u5b50\u3001\u72d7\u3001\u98de\u76d8\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4e8b\u5b9e\u8bc1\u660e\u6211\u4eec\u53ef\u4ee5\u8bad\u7ec3\u4e00\u4e2a\u8bbe\u8ba1\u5de7\u5999\u7684\u795e\u7ecf\u7f51\u7edc\u5c42\u6765\u6267\u884c\u8fd9\u9879\u4efb\u52a1\u3002\u800c\u4e14\uff0c\u6839\u636e\u7ecf\u9a8c\uff0c\u5b83\u4f3c\u4e4e\u5927\u5927\u63d0\u9ad8\u4e86\u6027\u80fd\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u56fe\u50cf\u5b57\u5e55\u5e76\u4e0d\u662f\u552f\u4e00\u7684\u4f8b\u5b50\u3002\u4e0e\u539f\u59cb\u7684\u201cAttention is all you need\u201d\u8bba\u6587\u66f4\u76f8\u5173\u7684\u662f\u673a\u5668\u7ffb\u8bd1\u7684\u60c5\u51b5\uff0c\u5176\u4e2d\u6ce8\u610f\u529b\u63ed\u793a\u4e86\u5e8f\u5217\u7684\u54ea\u4e9b\u90e8\u5206\u5bf9\u5f53\u524d\u7ffb\u8bd1\u90e8\u5206\u5f88\u91cd\u8981\u3002\u53d8\u538b\u5668\u666e\u904d\u4f7f\u7528\u7684\u539f\u56e0\u8fd8\u6709\u5f88\u591a\u3002\u4f8b\u5982\uff0c\u5728\u673a\u5668\u7ffb\u8bd1\u4e2d\uff0c\u5b83\u4eec\u6709\u52a9\u4e8e\u6539\u5584\u201c\u68af\u5ea6\u6d88\u5931\u95ee\u9898\u201d\uff0c\u8fd9\u662f\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e2a\u5e38\u89c1\u969c\u788d\u3002\u5728\u57fa\u4e8e\u5e8f\u5217\u7684\u6a21\u578b\u4e2d\uff0c\u76f8\u5bf9\u4e8e\u7ecf\u5178\u7684\u5faa\u73af\u795e\u7ecf\u7f51\u7edc (RNN) \u6a21\u578b\uff0c\u5b83\u4eec\u53ef\u4ee5\u663e\u7740\u52a0\u5feb\u8bad\u7ec3\u901f\u5ea6\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u53d8\u538b\u5668\u5728\u5404\u79cd\u4efb\u52a1\u4e2d\u51ed\u7ecf\u9a8c\u8bc1\u660e\u4e86\u5353\u8d8a\u7684\u6027\u80fd\u3002\u7279\u522b\u662f\uff0c\u8fc7\u53bb\u4e00\u5e74\u4e2d\u5927\u90e8\u5206\u6700\u5f15\u4eba\u6ce8\u76ee\u7684 AI \u6210\u5c31\u90fd\u843d\u540e\u4e8e\u4ed6\u4eec\u2014\u2014\u4f8b\u5982\uff0cGPT-3 \u4e2d\u7684 GPT \u4ee3\u8868\u201c\u751f\u6210\u5f0f\u9884\u8bad\u7ec3\u53d8\u538b\u5668\u201d\u3002\u5728\u6211\u8ba4\u4e3a\u6211\u7684\u89e3\u91ca\u5b8c\u6574\u4e4b\u524d\uff0c\u6211\u786e\u5b9e\u89c9\u5f97\u6211\u5fc5\u987b\u63d0\u5230\u6700\u540e\u4e00\u4e2a\u514d\u8d23\u58f0\u660e\u3002\u53d8\u538b\u5668\u6ca1\u6709\u5728\u8bb8\u591a\u9886\u57df\u5f97\u5230\u5e7f\u6cdb\u5e94\u7528\u662f\u6709\u539f\u56e0\u7684\u3002\u6ce8\u610f\u77e9\u9635\u7684\u6784\u5efa\u5bfc\u81f4\u4e86\u4e8c\u6b21\u5185\u5b58\u6210\u672c\u3002\u5373\u4f7f\u60a8\u62e5\u6709\u914d\u5907 80 GB \u4e13\u7528\u5185\u5b58\u7684\u4e0a\u4e00\u4ee3 NVIDIA A100\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5f88\u5feb\u88ab\u586b\u6ee1\u3002\u4e0d\u51fa\u6240\u6599\uff0c\u8c37\u6b4c\u8457\u540d\u7684\u5f20\u91cf\u5904\u7406\u5355\u5143 (TPU) \u7684\u5173\u952e\u4f18\u52bf\u4e4b\u4e00\u662f\u6bcf\u4e2a\u5185\u6838\u7684\u5927\u91cf\u5185\u5b58\u3002\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u968f\u7740\u65b0\u67b6\u6784\uff08\u4f8b\u5982 Performer \u6216 Perceiver\uff09\u7684\u5f15\u5165\u800c\u8fc5\u901f\u6539\u53d8\uff0c\u5b83\u4eec\u5c06\u8fd9\u79cd\u4e8c\u6b21\u6210\u672c\u964d\u4f4e\u4e3a\u4f2a\u7ebf\u6027\u6210\u672c\u3002\u4f46\u662f\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u5df2\u7ecf\u8d85\u8d8a\u4e86\u81ea\u5df1\u3002\u56de\u5230 Evoformer\u3002 Evoformer \u67b6\u6784\u4f7f\u7528\u7684\u4e0d\u662f\u4e00\u4e2a\uff0c\u800c\u662f\u4e24\u4e2a\u53d8\u538b\u5668\uff08\u201c\u53cc\u5854\u67b6\u6784\u201d\uff09\uff0c\u4e24\u8005\u4e4b\u95f4\u6709\u4e00\u4e2a\u6e05\u6670\u7684\u901a\u4fe1\u901a\u9053\u3002\u6bcf\u4e2a\u5934\u90e8\u4e13\u95e8\u7528\u4e8e\u5b83\u6b63\u5728\u67e5\u770b\u7684\u7279\u5b9a\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6216\u8005\u662f\u591a\u5e8f\u5217\u6bd4\u5bf9\uff0c\u6216\u8005\u662f\u6c28\u57fa\u9178\u4e4b\u95f4\u6210\u5bf9\u76f8\u4e92\u4f5c\u7528\u7684\u8868\u793a\u3002\u5b83\u4eec\u8fd8\u5305\u542b\u8fde\u7eed\u8868\u793a\u7684\u4fe1\u606f\uff0c\u5141\u8bb8\u5b9a\u671f\u4ea4\u6362\u4fe1\u606f\u548c\u8fed\u4ee3\u7ec6\u5316\u3002\n\u8ba9\u6211\u4eec\u9996\u5148\u770b\u770b\u8d1f\u8d23 MSA \u7684\u8d1f\u8d23\u4eba\uff0c\u6211\u5c06\u5176\u79f0\u4e3a\u201cMSA \u8f6c\u6362\u5668\u201d\uff0c\u4ee5\u7eaa\u5ff5 Facebook AI Research 2 \u6708\u4efd\u53d1\u8868\u7684\u8bba\u6587\uff0c\u8be5\u8bba\u6587\u5b9e\u73b0\u4e86\u7c7b\u4f3c\u7684\u60f3\u6cd5\u3002 MSA \u8f6c\u6362\u5668\u5728\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u86cb\u767d\u8d28\u7b26\u53f7\u77e9\u9635\u4e0a\u8ba1\u7b97\u6ce8\u610f\u529b\u3002\u4e3a\u4e86\u51cf\u5c11\u539f\u672c\u4e0d\u53ef\u80fd\u7684\u8ba1\u7b97\u6210\u672c\uff0c\u6ce8\u610f\u529b\u88ab\u201c\u5206\u89e3\u201d\u4e3a\u201c\u884c\u201d\u548c\u201c\u5217\u201d\u7ec4\u4ef6\u3002\u5373\uff0c\u7f51\u7edc\u9996\u5148\u5728\u6c34\u5e73\u65b9\u5411\u8ba1\u7b97\u6ce8\u610f\u529b\uff0c\u8ba9\u7f51\u7edc\u8bc6\u522b\u54ea\u4e9b\u6c28\u57fa\u9178\u5bf9\u66f4\u76f8\u5173\uff1b\u7136\u540e\u5728\u5782\u76f4\u65b9\u5411\u4e0a\uff0c\u786e\u5b9a\u54ea\u4e9b\u5e8f\u5217\u7684\u4fe1\u606f\u91cf\u66f4\u5927\u3002 AlphaFold 2 \u7684 MSA \u53d8\u6362\u5668\u6700\u91cd\u8981\u7684\u7279\u70b9\u662f\u884c\uff08\u6c34\u5e73\uff09\u6ce8\u610f\u529b\u673a\u5236\u7ed3\u5408\u4e86\u6765\u81ea\u201c\u5bf9\u8868\u793a\u201d\u7684\u4fe1\u606f\u3002\u5728\u8ba1\u7b97\u6ce8\u610f\u529b\u65f6\uff0c\u7f51\u7edc\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u504f\u7f6e\u9879\uff0c\u8be5\u504f\u7f6e\u9879\u662f\u76f4\u63a5\u6839\u636e\u5f53\u524d\u5bf9\u8868\u793a\u8ba1\u7b97\u5f97\u51fa\u7684\u3002\u8fd9\u4e2a\u6280\u5de7\u589e\u5f3a\u4e86\u6ce8\u610f\u529b\u673a\u5236\u5e76\u5141\u8bb8\u5b83\u7cbe\u786e\u5b9a\u4f4d\u76f8\u4e92\u4f5c\u7528\u7684\u6b8b\u57fa\u5bf9\u3002\u53e6\u4e00\u4e2a\u53d8\u538b\u5668\u5934\uff0c\u4f5c\u7528\u4e8e\u5bf9\u8868\u793a\u7684\u90a3\u4e2a\uff0c\u4ee5\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5de5\u4f5c\uff0c\u5f53\u7136\uff0c\u867d\u7136\u5f88\u591a\u7ec6\u8282\u4e0d\u540c\u3002\u8be5\u7f51\u7edc\u7684\u5173\u952e\u7279\u5f81\u662f\u6ce8\u610f\u529b\u4ee5\u6b8b\u5dee\u4e09\u89d2\u5f62\u7684\u5f62\u5f0f\u6392\u5217\u3002\u8fd9\u91cc\u7684\u76f4\u89c9\u662f\u52a0\u5f3a\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff0c\u8fd9\u662f\u5ea6\u91cf\u7a7a\u95f4\u7684\u516c\u7406\u4e4b\u4e00\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u806a\u660e\u7684\u60f3\u6cd5\uff0c\u56e0\u4e3a\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u7ed3\u6784\u9884\u6d4b\u7684\u7ecf\u5178\u95ee\u9898\u4e4b\u4e00\u662f\u8ddd\u79bb\u5206\u5e03\u4e0d\u80fd\u5d4c\u5165\u5230\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u3002\u4f3c\u4e4e\u8fd9\u4e2a\u6280\u5de7\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u7136\u540e\u8fd8\u6709\u66f4\u591a\u3002\u7ecf\u8fc7\u591a\u6b21\u8fed\u4ee3\uff08\u8bba\u6587\u4e2d\u7684 48 \u6b21\uff09\uff0c\u7f51\u7edc\u5efa\u7acb\u4e86\u86cb\u767d\u8d28\u5185\u90e8\u76f8\u4e92\u4f5c\u7528\u7684\u6a21\u578b\u3002\u73b0\u5728\uff0c\u662f\u65f6\u5019\u5efa\u7acb\u4e00\u4e2a\u7ed3\u6784\u4e86\u3002\u5982\u679c\u4f60\u4e86\u89e3\u8fd9\u4e48\u591a\uff0c\u4f60\u73b0\u5728\u53ef\u80fd\u77e5\u9053 AlphaFold 2 \u5904\u7406\u5e8f\u5217\u641c\u7d22\u6570\u636e\u4ee5\u751f\u6210\u4e24\u4e2a\u201c\u8868\u793a\u201d\uff1a\u591a\u5e8f\u5217\u6bd4\u5bf9 (MSA) \u7684\u8868\u793a\uff0c\u5b83\u6355\u83b7\u5e8f\u5217\u53d8\u5f02\uff1b\u4ee5\u53ca\u201c\u6b8b\u57fa\u5bf9\u201d\u7684\u8868\u793a\uff0c\u5b83\u6355\u83b7\u4e86\u54ea\u4e9b\u6b8b\u57fa\u53ef\u80fd\u5f7c\u6b64\u76f8\u4e92\u4f5c\u7528\u3002\u73b0\u5728\u7684\u95ee\u9898\u662f\uff1a\u6211\u4eec\u5982\u4f55\u4ece\u8fd9\u4e9b\u4e2d\u83b7\u5f97\u7ed3\u6784\uff1f\u8fd9\u662f\u7ed3\u6784\u6a21\u5757\u7684\u5de5\u4f5c\u7ed3\u6784\u6a21\u5757\u80cc\u540e\u7684\u60f3\u6cd5\u5728\u6982\u5ff5\u4e0a\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u662f\u901a\u8fc7......\u7684\u8bb8\u591a\u7ec6\u8282\u53d8\u5f97\u6df7\u4e71\u3002", "note_en": "Nature has now released that  AlphaFold 2 paper, after eight long months of waiting. The main text reports more or less what we have known for nearly a year, with some added tidbits, although it is accompanied by a painstaking description of the architecture in the  supplementary information. Perhaps more importantly, the authors have released the entirety of the code, including all details to run the pipeline,  on Github. And there is no small print this time: you can run inference on  any protein (I\u2019ve checked!).\n Have you not heard the news? Let me refresh your memory. In November 2020, a team of AI scientists from Google DeepMind \u00a0indisputably won the\u00a0 14 th\u00a0Critical Assessment of Structural Prediction\u00a0competition, a biennial blind test where computational biologists try to predict the structure of several proteins whose structure has been determined experimentally but not publicly released. Their results were so astounding, and the problem so central to biology, that it took the entire world by surprise and left an entire discipline, computational biology, wondering what had just happened.\n  Now that the article is live, the excitement is palpable. We have 70+ pages of long-awaited answers, and several thousand lines of code that will, no doubt, become a fundamental part of computational biology. At the same time, however, we have many new questions. What is the secret sauce before the news splash, and why is it so effective? Is it a piece of code that the average user can actually run? What are AlphaFold 2\u2019s shortcomings? And, most important of all, what will it mean for computational biology? And for all of us?\n In this commentary, which aims to be a continuation of  my blog post from eight months ago, I try to address some of these questions. First, I provide a bird\u2019s eye overview of the AlphaFold 2 architecture. This is not meant to be a technical exposition (the  SI is as detailed as you could wish, and even the code cites different sections of it), but focuses on the intuition behind the architecture. I want this to reach people without a background in either deep learning and bioinformatics who want to know what\u2019s going on; and those who may have the right background, but want an overview of the full paper before diving right into it.\n Following the cold, stone-hard facts, I give a completely personal assessment of the ideas behind the architecture. Namely, I explain which ideas I think were key to the success of AlphaFold 2, and speculate which factors made this team succeed where so many others have fallen short. I am a person of strong opinions, but nevertheless happy to declare that my thoughts may be going in completely the wrong direction. Still, I think the story of AlphaFold 2 raises a lot of questions that we have not addressed as a community and that deserve appropriate consideration somewhere.\n Finally, I revisit some of the questions that I raised  eight months ago. Some of these questions have been answered by the paper, or by the code ( e.g. what are the limitations to run the code). Some others are not solved explicitly, but I have had a chance to reflect upon them more deeply and I think I have some novel insight. And some others are matters that have arisen from the new information, and that I think we will have to answer together.\n I have promised myself that I will be more succinct this time \u2014 after all, in a few months I should be writing up my PhD thesis and I really don\u2019t have much time to spare. Let\u2019s see if I manage.\n   Until Thursday morning, the best answer we had was an image, published in DeepMind\u2019s  press release back in November. This schema made the rounds of the internet at the time, and has been featured in a multitude of conferences and discussion groups ever since. But, sadly, it was lacking in details, and even the most knowledgeable deep learning experts were only able to make educated guesses.\n  The  Nature article provides a very similar, but slightly more detailed diagram that outlines the different pieces of the architecture.\n  The overarching idea is quite simple, so I will try to sketch it in a few lines. If you are not familiar with deep learning, the following might sound slightly abstract, and that is perfectly fine. I will take you through the details later. For now, though, let us try to get a schematic picture of the network. For clarity, I have divided the image into thirds which represent the three main parts of the AlphaFold 2 system.\n First of all, the AlphaFold 2 system uses the input amino acid sequence to query several databases of protein sequences, and constructs a  multiple sequence alignment (MSA). Put simply, an MSA identifies similar, but not identical, sequences that have been identified in living organisms. This enables the determination of the parts of the sequence that are more likely to mutate, and allows us to detect correlations between them. AlphaFold 2 also tries to identify proteins that may have a similar structure to the input (\u201ctemplates\u201d), and constructs an initial representation of the structure, which it calls the \u201cpair representation\u201d. This is, in essence, a model of which amino acids are likely to be in contact with each other.\n In the second part of the diagram, AlphaFold 2 takes the multiple sequence alignment and the templates, and passes them through a  transformer. We will talk about what a transformer entails later, but for now you can understand it as an \u201coracle\u201d that can quickly identify which pieces of information are more informative. The objective of this part is to refine the representations for both the MSA and the pair interactions, but also to iteratively exchange information between them. A better model of the MSA will improve the network\u2019s characterization of the geometry, which simultaneously will help refine the model of the MSA. This process is organised in blocks that are repeated iteratively until a specified number of cycles (48 blocks in the published model).\n This information is taken to the last part of the diagram: the structure module. This sophisticated piece of the pipeline takes the refined \u201cMSA representation\u201d and \u201cpair representation\u201d, and leverages them to construct a three-dimensional model of the structure. Unlike the previous state-of-the-art models, this network does not use any optimisation algorithm: it generates a static, final structure, in a single step. The end result is a long list of Cartesian coordinates representing the position of each atom of the protein, including side chains.\n So, to recap: AlphaFold 2 finds similar sequences to the input, extracts the information using an especial neural network architecture, and then passes that information to another neural network that produces a structure.\n One last piece is that the model works iteratively. After generating a final structure, it will take all the information ( i.e. MSA representation, pair representation  and predicted structure) and pass it back to the beginning of the Evoformer blocks, the second part of our diagram. This allows the model to refine its predictions, and also produce some  funny videos that you can find in the article\u2019s page.\n   Like most bioinformatics programs, AlphaFold 2 comes equipped with a \u201cpreprocessing pipeline\u201d, which is the discipline\u2019s lingo for \u201ca Bash script that calls some other codes\u201d. The pipeline runs a number of programs for querying databases and, using the input sequence, generates a multiple sequence alignment (MSA) and a list of templates. Every program has a slightly different script, but AlphaFold 2\u2019s is not too different from your garden variety protein structure prediction preprocessing pipeline.\n It is worth explaining the meaning of a multiple sequence alignment. In an MSA, the sequence of the protein whose structure we intend to predict is compared across a large database (normally something like\u00a0 UniRef, although in later years it has been common to enrich these alignments with sequences derived from\u00a0 metagenomics). The underlying idea is that, if two amino acids are in close contact, mutations in one of them will be closely followed by mutations of the other, in order to preserve the structure.\n  Consider the following example. Suppose we have a protein where an amino acid with negative charge (say, glutamate) is near to an amino acid with positive charge (say, lysine), although they are both far away in the amino acid sequence. This Coulombic interaction stabilises the structure of the protein. Imagine now that the first amino acid mutates into a positively charged amino acid \u2014 in order to preserve this contact, the second amino acid will be under evolutionary pressure to mutate into a negatively charged amino acid, otherwise the resulting protein may not be able to fold. Of course, real situations are rarely as clear-cut as this example, but you get the idea.\n Finding templates follows a completely different, but closely related principle. The philosophy behind template modelling may be encoded in the maxim \u201cthere is nothing new under the sun\u201d. Proteins mutate and evolve, but their structures tend to remain similar despite the changes. In the image below, for example, I display the structure of four different myoglobin proteins, corresponding to different organisms. You can appreciate that they all look pretty much the same, but if you were to look at the sequences, you would find enormous differences. The protein on the bottom right, for example, only has ~25% amino acids in common with the protein on the top left.\n  In most cases, however, conservation occurs on a smaller scale, where pieces of the protein (say, the active centre of an enzyme) remain mostly unchanged while their surroundings evolve. Size does not really matter: using the right methods, it is possible to identify some of these conserved fragments and use them as a guide to construct the structure. This has been such an important ingredient in structural prediction that targets in CASP14 have classically been classified depending on the number of templates available.\n Is there anything especial in here? Not really: most of the participants at CASP14 followed very similar strategies. The idea of using correlated mutations to extract structural information from an MSA is decades old, and collecting pieces of other proteins to model your target\u2019s structure is perhaps older even. I would say that, so far, there is nothing new.\n  Here is where the story really gets going. The first section of the gigantic AlphaFold 2 neural network, the Evoformer, has the task of squeezing every ounce of information out of the multiple sequence alignment and the templates.\n You may not be surprised to hear that extracting information from the multiple sequence alignment (\u201ccoevolutionary analysis\u201d) has been a prime pursuit of structural bioinformatics for years. People started looking at it in the nineties, although with limited success. At the beginning of last decade, several groups started to identify a number of biases that had stymied prior attempts, and developed powerful statistical machinery to correct them. There was some consistent progress for several years. And then, in CASP13 (2018), several groups demonstrated that there was actually no need for robust statistics: you just needed to train deep residual neural networks.\n AlphaFold 2\u2019s Evoformer completely reinvents this process and takes it several steps further.\n The central idea behind the Evoformer is that the information flows back and forth throughout the network. Before AlphaFold 2, most deep learning models would take a multiple sequence alignment and output some inference about geometric proximity. Geometric information was therefore a  product of the network. In the Evoformer, instead, the pair representation is a both a product  and an intermediate layer. At every cycle, the model leverages the current structural hypothesis to improve the assessment of the multiple sequence alignment, which in turns leads to a new structural hypothesis, and so on, and so on. Both representations, sequence and structure, exchange information until the network reaches a solid inference.\n This is easier to understand as an example. Suppose that you look at the multiple sequence alignment and notice a correlation between a pair of amino acids. Let\u2019s call them A and B. You hypothesise that A and B are close, and translate this assumption into your model of the structure. Subsequently, you examine said model and observe that, since A and B are close, there is a good chance that C and D should be close. This leads to another hypothesis, based on the structure, which can be confirmed by searching for correlations between C and D in the MSA. By repeating this several times, you can build a pretty good understanding of the structure.\n   The first step in the network is to define \u201cembeddings\u201d for the MSA and templates. Bear in mind that multiple sequence alignments are ultimately sequences of symbols from a finite alphabet: a prime example of a discrete variable. Neural networks, on the other hand, are intrinsically continuous devices that rely on differentiation to learn from their training set. An \u201cembedding\u201d is a trick from the deep learning magic book that allows the transformation of a discrete variable to a continuous space (\u201cembedded space\u201d) so that the network can be trained.\n Complicated as this may sound, it is in fact very simple. You just need to define a layer of neurons that receives the discrete input and outputs some continuous vector. The embedding may be pretrained, as used to be common in natural language processing (NLP), but more commonly it is trained alongside whatever objective we are trying to learn. In AlphaFold 2, the embeddings are vanilla dense neural networks.\n  Once our MSA and templates are in the correct \u201cembedding space\u201d, it is time for the Evoformer to work its magic. To understand the Evoformer, you first need to be familiar with the hottest deep learning architecture to date: the  transformer. There is no shortage of material explaining this architecture, and quite frankly, many if not most will be better than mine. If you are interested in an in-depth analysis, I would recommend  The Illustrated Transformer, by Jay Alammar. If you just want to know the minimum, read below. And, if you already know transformers like the palm of your hand, hit Ctrl+F and find the sentence \u201cBack to the Evoformer\u201d a few paragraphs below.\n The transformer architecture was introduced in 2017 by a team at Google Brain, in a paper entitled \u201c Attention is all you need\u201c. As you will probably imagine from the conspicuous title, the key ingredient is a novel mechanism called  attention. The objective of attention is to identify which parts of the input are more important for the objective of the neural network. In other words, to identify which parts of the input  it should pay attention to.\n Imagine that you are trying to train a neural network to produce image captions. One possible approach is to train the network to process the whole image \u2014 say ~250k pixels in a 512\u00d7512 picture. This may work, but there are some reasons why it is not the best idea. Perhaps first of all, because this is not what we humans do: when we look into a picture, we do not see it \u201cas a whole\u201d. Instead, we segment it into different patterns: a child, a dog, a frisbee. Luckily, it turns out that we can train a cleverly-designed neural network layer to perform this task. And, empirically, it seems to improve the performance by a lot.\n  Image captioning is not the only example, by far. More related to the original \u201cAttention is all you need\u201d paper is the case of machine translation, where attention reveals which parts of the sequence are important for the current part of the translation.\n  There are a lot of other reasons why transformers are in common use. In machine translation, for example, they help ameliorate the \u201cvanishing gradient problem\u201d, a common hurdle during training. In sequence-based models, they can significantly speed up training with respect to classical recurrent neural network (RNN) models. Most important of all, transformers have empirically demonstrated superior performance in a variety of tasks. In particular, they are behind most of the splashiest AI achievements of the past year \u2014 for example, the GPT in  GPT-3 stands for \u201cGenerative Pre-training Transformer\u201d.\n I do feel I have to mention one last disclaimer before I consider my explanation complete. There is a reason why transformers have not been widely implemented in many fields. The construction of the attention matrix leads to a  quadratic memory cost. Even if you have a last-generation NVIDIA A100 with an 80 GB dedicated memory, that can get filled very quickly. Unsurprisingly, one of the crucial advantages of Google\u2019s celebrated  Tensor Processing Units (TPUs) is the massive amount of memory per core. This situation may change very quickly with the introduction of novel architectures such as the  Performer or the  Perceiver, which reduce this quadratic cost to a pseudo-linear one. But, anyway, I am getting ahead of myself.\n Back to the Evoformer. The Evoformer architecture uses not one, but two transformers (a \u201ctwo-tower architecture\u201d), with one clear communication channel between the two. Each head is specialised for the particular type of data it is looking at, either a multiple sequence alignment, or a representation of pairwise interactions between amino acids. They also incorporate the information of the contiguous representation, allowing for regular exchange of information and iterative refinement.\n Let us first look at the head that attends to the MSA, which I will term the \u201cMSA transformer\u201d, in honour to the  February paper by Facebook AI Research which implements a similar idea. The MSA transformer computes attention over a very large matrix of protein symbols. To reduce what would otherwise be an impossible computational cost, the attention is \u201cfactorised\u201d in \u201crow-wise\u201d and \u201ccolumn-wise\u201d components. Namely, the network first computes attention in the horizontal direction, allowing the network to identify which pairs of amino acids are more related; and then in the vertical direction, determining which sequences are more informative.\n The most important feature of AlphaFold 2\u2019s MSA transformer is that the row-wise (horizontal) attention mechanism incorporates information from the \u201cpair representation\u201d. When computing attention, the network adds a bias term that is calculated directly from the current pair representation. This trick augments the attention mechanism and allows it to pinpoint interacting pairs of residues.\n The other transformer head, the one that acts on the pair representation, works in a similar manner, although a lot of details differ, of course. The key feature of this network is that attention is arranged in terms of triangles of residues. The intuition here is to enforce the triangle inequality, one of the axioms of metric spaces. This is quite a clever idea since one of the classical problems of deep learning-based structure prediction was that distance distributions could not be embedded in three-dimensional space. It seems this trick fixes that and then some more.\n  After a number of iterations, 48 in the paper, the network has built a model of the interactions within the protein. Now, it is the time to build a structure.\n  If you got this far, you probably know by now that AlphaFold 2 processes the sequence search data to generate two \u201crepresentations\u201d: a representation of the multiple sequence alignment (MSA), which captures sequence variation; and a representation of the \u201cpairs of residues\u201d, which captures which residues are likely to interact with each other. The question is now: how do we get a structure from these? This is a job for the structure module\n The idea behind the structure module is conceptually very simple, but it gets muddy through the many, many details of the\n......", "posttime": "2021-07-22 21:34:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ed3\u6784,structure,\u5e8f\u5217", "title": "AlphaFold 2 \u6765\u4e86\uff1a\u7ed3\u6784\u9884\u6d4b\u5947\u8ff9\u7684\u80cc\u540e\u662f\u4ec0\u4e48", "title_en": "AlphaFold 2 is here: what\u2019s behind the structure prediction miracle", "transed": 1, "url": "https://www.blopig.com/blog/2021/07/alphafold-2-is-here-whats-behind-the-structure-prediction-miracle/", "via": "", "real_tags": ["\u7ed3\u6784", "structure", "\u5e8f\u5217"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068748, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u529e\u516c\u5ba4\u91cc\uff0c\u5f53\u4f60\u7684\u540c\u4e8b\u5728 Deep Work \u65f6\uff0c\u8fd9\u662f\u5f88\u660e\u663e\u7684\u3002\u4f60\u770b\u8fc7\u53bb\uff0c\u53d1\u73b0\u5979\u5bf9\u4e00\u4e9b\u4ee3\u7801\u5f88\u611f\u5174\u8da3\u3002\u5979\u5728\u533a\u57df\u5185\uff0c\u773c\u775b\u76ef\u7740\u5c4f\u5e55\u3002\u5982\u679c\u60a8\u7684\u95ee\u9898\u4e0d\u7d27\u6025\uff0c\u8bf7\u4fdd\u5b58\u4ee5\u5907\u540e\u7528\u3002\u5982\u679c\u4e8b\u60c5\u5f88\u7d27\u6025\uff0c\u4f60\u4f1a\u6253\u65ad\u5e76\u8ba9\u6240\u6709\u4eba\u90fd\u5728\u7532\u677f\u4e0a\u3002\u5f53\u60a8\u5728\u529e\u516c\u5ba4\u65f6\uff0c\u60a8\u7684\u540c\u4e8b\u4f11\u606f\u65f6\u4e5f\u5f88\u660e\u663e\u3002\u5979\u4f1a\u79bb\u5f00\u5979\u7684\u529e\u516c\u684c\u3002\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u4e0d\u7d27\u6025\u7684\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u4fdd\u5b58\u4ee5\u5907\u540e\u7528\u3002\u5982\u679c\u5b83\u5f88\u7d27\u6025\uff0c\u4f60\u53d1\u9001\u4e00\u4e2a\u9875\u9762\u5e76\u53bb\u5bfb\u627e\u3002\u4f7f\u7528\u5728\u5bb6\u5de5\u4f5c\uff0c\u60a8\u6ca1\u6709\u8fd9\u79cd\u76f8\u540c\u7c7b\u578b\u7684\u53ef\u89c1\u6027\u3002\u91cd\u65b0\u521b\u5efa\u5b83\u9700\u8981\u66f4\u591a\u7684\u52aa\u529b\uff0c\u4f46\u5b83\u53ef\u80fd\u662f\u503c\u5f97\u7684\uff0c\u5e76\u63d0\u4f9b\u8d85\u51fa\u961f\u53cb\u53ef\u89c1\u6027\u7684\u597d\u5904\u3002\u8fc7\u53bb\u51e0\u5468\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5c1d\u8bd5\u4f7f\u7528\u4e00\u7ec4 4 \u4e2a\u8868\u60c5\u7b26\u53f7\u6765\u8868\u793a\u6211\u4eec\u5f53\u524d\u7684\u5de5\u4f5c\u72b6\u6001\uff1a\u6df1\u5ea6\u5de5\u4f5c\u3001\u6df1\u5ea6\u4f11\u606f\u3001\u5916\u51fa (OOO)\u3001\u6b63\u5728\u5f00\u4f1a\u3002\u60a8\u53ef\u4ee5\u5c06\u5b83\u4eec\u81ea\u5b9a\u4e49\u4e3a\u6700\u9002\u5408\u60a8\u7684\u56e2\u961f\u7684\u72b6\u6001\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u5728 Bytebase \u4f7f\u7528\u7684\uff1a\u6211\u4eec\u6d4b\u8bd5\u5b83\u7684\u6700\u521d\u76ee\u6807\u662f\u770b\u770b\u5b83\u662f\u5426\u4f1a\u4f7f\u534f\u4f5c\u66f4\u52a0\u65e0\u7f1d\u3002\u5c31\u50cf\u5728\u529e\u516c\u5ba4\u4e00\u6837\uff0c\u4e86\u89e3\u662f\u5426\u6709\u4eba\u53ef\u4ee5\u52a0\u5165\u5e76\u914d\u5bf9\u6216\u4ed6\u4eec\u662f\u5426\u4e0d\u53ef\u7528\u662f\u5f88\u6709\u7528\u7684\u3002\u5bf9\u67d0\u4eba\u6267\u884c ping \u64cd\u4f5c\u5374\u6709\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\u53ef\u80fd\u4f1a\u4ee4\u4eba\u8d39\u89e3\u3002\u5f53\u4f60\u5728\u505a\u67d0\u4e8b\u7684\u65f6\u5019\uff0c\u6536\u5230\u4e0d\u7d27\u6025\u7684\u4ea4\u6d41\u4f1a\u8ba9\u4eba\u5206\u5fc3\u3002\u4e86\u89e3\u961f\u53cb\u5728\u505a\u4ec0\u4e48\u53ef\u4ee5\u8ba9\u60a8\u8c03\u6574\u5f53\u5929\u7684\u8ba1\u5212\u3002\u901a\u8fc7 Slack Statuses\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u961f\u53cb\u4f55\u65f6\u5904\u4e8e\u6df1\u5ea6\u5de5\u4f5c\u3001\u4f11\u606f\u6216\u53ef\u4ee5\u52a0\u5165\u6211\u4eec\u3002\u8fd9\u662f\u4e00\u79cd\u51cf\u5c11\u534f\u4f5c\u6469\u64e6\u7684\u8f7b\u91cf\u7ea7\u65b9\u6cd5\u3002\n\u6709\u4e24\u4e2a\u56e0\u7d20\u5bfc\u81f4\u6211\u4eec\u6bcf\u4e2a\u4eba\u5728 Deep Work \u6216 Deep Break/Out of Office \u4e0a\u82b1\u8d39\u66f4\u591a\u65f6\u95f4\uff1a\u4f5c\u4e3a\u4e00\u4e2a\u56e2\u961f\uff0c\u6211\u4eec\u7279\u522b\u91cd\u89c6 Deep Work \u548c Deep Breaks\u3002\u6df1\u5ea6\u5de5\u4f5c\u662f\u6211\u4eec\u89e3\u51b3\u95ee\u9898\u7684\u65f6\u5019\u3002\u8fd9\u662f\u5bcc\u6709\u6210\u6548\u7684\uff0c\u5b83\u662f\u4ee4\u4eba\u6ee1\u610f\u7684\u3002 Deep Breaks \u8ba9\u6211\u4eec\u53ef\u4ee5\u5728\u5de5\u4f5c\u4e4b\u4f59\u5145\u7535\u5e76\u4eab\u53d7\u65f6\u5149\u3002\u5b83\u4eec\u5bf9\u4e8e\u9632\u6b62\u5026\u6020\u81f3\u5173\u91cd\u8981\u3002\u677e\u5f1b\u72b6\u6001\u5e2e\u52a9\u6211\u4eec\u8ba9\u5f7c\u6b64\u5bf9\u6211\u4eec\u5982\u4f55\u5ea6\u8fc7\u65f6\u95f4\u8d1f\u8d23\u3002\u72b6\u6001\u4e3a\u56e2\u961f\u63d0\u4f9b\u4e86\u53cd\u601d\u7684\u597d\u673a\u4f1a\u3002\u5f53\u961f\u53cb\u6ca1\u6709\u8db3\u591f\u7684\u4e0d\u95f4\u65ad\u7684 Deep Work \u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u662f\u4ec0\u4e48\u7e41\u5fd9\u7684\u5de5\u4f5c\u6216\u5176\u4ed6\u6311\u6218\u9020\u6210\u4e86\u963b\u788d\u3002\u5f53\u961f\u53cb\u665a\u4e0a\u5341\u70b9\u5728\u201c\u6df1\u5ea6\u5de5\u4f5c\u201d\u65f6\uff0c\u8fd9\u4e5f\u503c\u5f97\u8ba8\u8bba\u3002\u6bcf\u4e2a\u4eba\u90fd\u6709\u81ea\u5df1\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u4f46\u91cd\u8981\u7684\u662f\u8981\u6709\u5145\u5206\u7684\u4f11\u606f\u65f6\u95f4\u4ee5\u907f\u514d\u5026\u6020\u3002\u665a\u4e0a\u5341\u70b9\u901a\u5e38\u662f\u4f11\u606f\u65f6\u95f4\u3002\u4f46\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u56e2\u961f\u95ee\u8d23\u5236\u5e76\u4e0d\u662f\u4f7f\u7528 Slack \u72b6\u6001\u7684\u6700\u5927\u4f18\u52bf\u3002\u5f53\u6211\u5c06\u6211\u7684\u8868\u60c5\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u201c\u6df1\u5ea6\u5de5\u4f5c\u201d\u65f6\uff0c\u5b9e\u9645\u4e0a\u4e0d\u4e0a Twitter \u6216\u9605\u8bfb\u6587\u7ae0\u7b26\u5408\u6211\u7684\u6700\u5927\u5229\u76ca\u3002\u6211\u6b63\u5728\u4e3a\u63a5\u4e0b\u6765\u7684\u4e00\u6bb5\u65f6\u95f4\u8bbe\u5b9a\u6211\u7684\u610f\u56fe\u3002\u8fd9\u51cf\u5c11\u4e86\u6211\u65e0\u610f\u8bc6\u5730\u8fdb\u5165\u4e00\u4e9b\u5b9e\u9645\u4e0a\u4e0d\u7b26\u5408\u6211\u5f53\u5929\u4f18\u5148\u4e8b\u9879\u7684\u5154\u5b50\u6d1e\u7684\u53ef\u80fd\u6027\u3002\u540c\u6837\uff0c\u5f53\u6211\u5904\u4e8e\u201c\u6df1\u5ea6\u4f11\u606f\u201d\u72b6\u6001\u65f6\uff0c\u6211\u6700\u597d\u4e0d\u8981\u67e5\u770b Slack \u6216\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u7684\u961f\u53cb\u77e5\u9053\u6211\u6b63\u5728\u4f11\u606f\uff0c\u5982\u679c\u9700\u8981\u6211\u4f1a\u901a\u8fc7\u9875\u9762/\u7535\u8bdd\u8054\u7cfb\u6211\u3002\u5f53\u6211\u5c06\u6211\u7684\u8868\u60c5\u7b26\u53f7\u8bbe\u7f6e\u4e3a\u201c\u5bb6\u201d\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eca\u5929\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u6211\u4e0d\u5e94\u8be5\u5728\u968f\u673a\u65f6\u95f4\u8fdb\u6765\u548c\u7f16\u7801\u3002\u6211\u7684\u610f\u601d\u662f\u653e\u677e\uff0c\u800c\u4e0d\u662f\u5728\u6b63\u5e38\u65f6\u95f4\u4e4b\u5916\u505a\u968f\u673a\u5206\u6563\u7684\u5de5\u4f5c\u3002\n\u6211\u7684\u76ee\u6807\u662f\u6700\u5927\u5316\u6df1\u5ea6\u5de5\u4f5c\u548c\u6df1\u5ea6\u4f11\u606f\u3002\u5f53\u6211\u6ce8\u610f\u5230\u6211\u5df2\u7ecf\u201c\u5de5\u4f5c\u201d\u4e86\u4e00\u6bb5\u65f6\u95f4\u65f6\uff0c\u6211\u4f1a\u505c\u4e0b\u6765\u9009\u62e9\u6df1\u5ea6\u5de5\u4f5c\u6216\u6df1\u5ea6\u4f11\u606f\u65b9\u5411\u3002\u6df1\u5ea6\u5de5\u4f5c\u662f\u5de5\u4f5c\u65e5\u4e2d\u6700\u4ee4\u4eba\u6ee1\u610f\u548c\u6700\u6709\u6210\u5c31\u611f\u7684\u90e8\u5206\u3002\u662f\u65f6\u5019\u82b1\u65f6\u95f4\u89e3\u51b3\u95ee\u9898\u548c\u6784\u5efa\u4e86\u3002\u8fd9\u5f88\u6709\u8da3\uff0c\u4e5f\u5f88\u5145\u5b9e\u3002\u8fd9\u4e5f\u9700\u8981\u5f88\u591a\u7cbe\u529b\u2014\u2014\u4e0d\u53ef\u80fd\u6bcf\u5929\u90fd\u82b1\u4e00\u6574\u5929\u7684\u65f6\u95f4\u5728\u6df1\u5ea6\u5de5\u4f5c\u4e2d\u3002\u6df1\u5ea6\u4f11\u606f\u6216\u5b8c\u5168\u4e0d\u5408\u65f6\u5b9c\u7684\u65f6\u95f4\u4e5f\u5f88\u91cd\u8981\u3002\u4f7f\u7528 WFH \u4fdd\u62a4\u5b83\u4eec\u8981\u56f0\u96be\u5f97\u591a\uff0c\u56e0\u4e3a\u5f88\u5bb9\u6613\u8ba9\u81ea\u5df1\u56de\u5230\u5de5\u4f5c\u6a21\u5f0f\u3002\u4f46\u662f\u901a\u8fc7\u8bbe\u5b9a\u6211\u7684\u610f\u56fe\uff0c\u6211\u6709\u66f4\u591a\u7684\u4f11\u606f\u65f6\u95f4\uff0c\u6ca1\u6709\u5185\u759a\u6216\u611f\u89c9\u9700\u8981\u7acb\u5373\u56de\u590d\u6d88\u606f\u3002\u5728\u5c1d\u8bd5\u5c06 Slack Statuses \u4f5c\u4e3a\u8fdc\u7a0b\u5de5\u4f5c\u7684\u5de5\u5177\u540e\uff0c\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e9b\u6539\u8fdb\u7684\u673a\u4f1a\u3002\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u6211\u4eec\u5f00\u59cb\u6df1\u5165\u5de5\u4f5c\u5e76\u5fd8\u8bb0\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6211\u4eec\u7684\u610f\u56fe\u3002\u5373\uff0c\u4ece\u66f4\u6d45\u7684\u5de5\u4f5c\u5f00\u59cb\u7684\u4e8b\u60c5\u53d8\u6210\u4e86\u6211\u65e0\u6cd5\u56de\u590d\u6d88\u606f\u7684\u6df1\u5ea6\u5de5\u4f5c\u3002\u540c\u6837\uff0c\u5f53\u5bb6\u91cc\u51fa\u73b0\u67d0\u4e9b\u4e8b\u60c5\u65f6\uff0c\u6211\u65e0\u6cd5\u56de\u5e94\u7684\u4f11\u606f\u65f6\u95f4\u53ef\u80fd\u4f1a\u7a81\u7136\u5f00\u59cb\u3002\u8fd9\u79cd\u7f3a\u4e4f\u53ef\u89c1\u6027\u4f1a\u5bfc\u81f4\u6df7\u4e71\u3002\u5f53\u60a8\u5c06\u201c\u6df1\u5ea6\u5de5\u4f5c\u201d\u8bbe\u7f6e\u4e3a\u60a8\u7684\u7126\u70b9\u4e00\u5c0f\u65f6\u540e\uff0c\u5b83\u5c06\u6e05\u9664\u4e3a\u672a\u8bbe\u7f6e\u72b6\u6001\u7684\u72b6\u6001\u3002\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u60a8\u4ecd\u5728 Deep Work \u4e2d\uff0c\u4f46 Slack \u5e76\u672a\u518d\u6b21\u786e\u8ba4\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u8ba9\u72b6\u6001\u6c38\u8fdc\u4e0d\u4f1a\u6e05\u9664\uff0c\u4f46\u8fd9\u4f1a\u5bfc\u81f4\u4e0a\u8ff0\u95ee\u9898\uff08\u5fd8\u8bb0\u8bbe\u7f6e\u72b6\u6001\uff09\u3002\u6d1e\u5bdf\u529b\u5fc5\u987b\u57fa\u4e8e\u76f4\u89c9\u2014\u2014\u6ca1\u6709\u4e0e\u72b6\u6001\u4f7f\u7528\u76f8\u5173\u7684\u8ddf\u8e2a\u3002\u67e5\u770b\u5728 Deep Work \u548c Deep Break/Out of Office \u4e2d\u82b1\u8d39\u7684\u65f6\u95f4\u7ec6\u5206\u4ee5\u4e86\u89e3\u6211\u4eec\u5982\u4f55\u4e0d\u65ad\u6539\u8fdb\u4f1a\u5f88\u6709\u5e2e\u52a9\uff01\n\u4f7f\u7528\u72b6\u6001\u6765\u4fdd\u62a4\u6df1\u5ea6\u5de5\u4f5c\u548c\u6df1\u5ea6\u4f11\u606f\u4e0d\u53d7\u5e72\u6270\u662f\u5f88\u6709\u4ef7\u503c\u7684\u3002\u4e00\u4e2a\u56e2\u961f\u4f7f\u7528\u72b6\u6001\u6765\u4e3a\u4f60\u5982\u4f55\u5b89\u6392\u4f60\u7684\u4e00\u5929\u5236\u9020\u5185\u759a\u662f\u4e0d\u5065\u5eb7\u7684\u3002\u5982\u679c\u60a8\u7684\u5496\u5561\u4f11\u606f\u65f6\u95f4\u5f88\u957f\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728 Slack \u4e2d\u56de\u590d\uff0c\u5219\u6ca1\u6709\u5fc5\u8981\u5e7f\u64ad\u60a8\u6b63\u5728\u201c\u4f11\u606f\u201d\u3002\u72b6\u6001\u4e0d\u662f\u4e3a\u4e86\u5fae\u89c2\u7ba1\u7406\uff0c\u800c\u662f\u7ed9\u4f60\u7684\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9009\u62e9\u6211\u4eec\u7684 Slack Status \u5efa\u8bae\u4e3a Deep Work\u3001Deep Break \u548c Out of Office\u3002\u6211\u4eec\u6545\u610f\u6ca1\u6709\u4e00\u4e2a\u7528\u4e8e\u201c\u5de5\u4f5c\u201d\u7684\uff0c\u56e0\u4e3a\u5b83\u88ab\u5047\u5b9a\u4e3a\u57fa\u7ebf\u60c5\u51b5\u5e76\u4e14\u592a\u6709\u5229\u4e8e\u5fae\u89c2\u7ba1\u7406\u3002\u60a8\u662f\u5426\u5c1d\u8bd5\u8fc7\u5c06 Slack \u72b6\u6001\u7528\u4f5c\u8fdc\u7a0b\u56e2\u961f\uff1f\u544a\u8bc9\u6211\u4eec\u60a8\u5728 hello@bytebase.io \u6216 @Bytebaseapp \u4e0a\u5b66\u5230\u4e86\u4ec0\u4e48\u3002 Bytebase \u662f\u4e00\u6b3e\u7b14\u8bb0\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u5e2e\u52a9\u60a8\u5728\u5728\u5bb6\u5de5\u4f5c\u65f6\u7406\u6e05\u601d\u8def\u3001\u786e\u5b9a\u4f18\u5148\u7ea7\u5e76\u5b8c\u6210\u66f4\u591a\u6df1\u5ea6\u5de5\u4f5c\u3002\u5728 https://bytebase.io \u8bf7\u6c42\u8bbf\u95ee\u3002", "note_en": "In the office, it\u2019s pretty obvious when your colleague is in  Deep Work. You look over and see that she\u2019s deep in some code. She\u2019s in the zone, with her eyes glued to the screen. If your question isn\u2019t urgent, you save it for later. If it\u2019s urgent, you interrupt and get all hands on deck.\n When you\u2019re in the office, it\u2019s also obvious when your colleague is on a break. She\u2019ll be away from her desk. If you have a non-urgent question, you save it for later. If it\u2019s urgent, you send a page and go looking.\n With Work From Home, you don\u2019t have this same type of visibility. It takes a little more effort to recreate it, but it can be worthwhile and provide benefits beyond teammate visibility.\n  The last few weeks, we\u2019ve been experimenting with using a set of 4 emojis to denote our current status at work: Deep Work, Deep Break, Out of Office (OOO), In a meeting.\n     You can customize them to the statuses that work best for your team. This is what we use at Bytebase:\n     Our original goal in testing this out was to see if it would make collaboration more seamless. Just like in the office, it\u2019s useful to know if someone is available to jump in and pair or if they\u2019re unavailable. It can be puzzling to ping someone and not get a response for a while. And it\u2019s distracting to receive non-urgent communication when you\u2019re in the middle of something. Knowing what teammates are up to lets you adapt your plan for the day.\n With Slack Statuses, we know when a teammate is in Deep Work, on a break, or available to jump in with us. It\u2019s a lightweight way to reduce friction to collaborating.\n   There are two factors that have resulted in each of us spending more time in Deep Work or in Deep Break/Out of Office:\n   As a team, we especially value Deep Work and Deep Breaks. Deep Work is when we problem-solve. It\u2019s productive and it\u2019s satisfying. Deep Breaks allow us to recharge and enjoy time outside of work. They\u2019re essential to prevent burnout. Slack Statuses help us hold one another accountable in how we spend our time.\n Statuses create a good opportunity for reflection as a team. When a teammate doesn\u2019t have enough uninterrupted Deep Work, we can look into what busy-work or other challenges are getting in the way. When a teammate is in \u201cDeep Work\u201d at ten at night, that can also be worth discussing. Everyone has their own working style but it\u2019s important to have time for full breaks in order to avoid burnout. Ten at night would usually be a break time.\n However, we found team accountability isn\u2019t the biggest advantage of using Slack Statuses.\n  When I set my emoji to be \u201cDeep Work,\u201d it\u2019s in my best interest to not actually be on twitter or reading articles. I\u2019m setting my intention for the next period of time. This reduces the likelihood that I mindlessly go down some rabbit hole that is not actually in line with my priorities for the day.\n Likewise, when I\u2019m on a \u201cDeep Break\u201d, I better not be checking Slack or email. My teammates know I\u2019m on a Deep Break and will reach me via page / call if I\u2019m needed.\n When I set my emoji to \u201cHome,\u201d this means I\u2019m done for the day. I shouldn\u2019t be coming in at a random time and coding. I\u2019m meant to be relaxing, not doing random scattered work outside of regular hours.\n My goal is to maximize Deep Work and Deep Breaks. When I notice I\u2019ve been \u201cworking\u201d for a while, I pause and choose either a Deep Work or Deep Break direction instead.\n  Deep Work is the most satisfying and fulfilling part of the work day. It\u2019s time spent problem-solving and building. It\u2019s fun and it\u2019s fulfilling. It also takes a lot of energy - it\u2019s not possible to spend your whole day in Deep Work every day.\n  Deep Breaks or time completely off the clock are essential too. They\u2019re a lot harder to protect with WFH because it\u2019s easy to let yourself drift back into work mode. But by setting my intention, I have more full breaks, without guilt or feeling like I need to respond to messages immediately.\n  After experimenting with Slack Statuses as a tool for remote work, we ran into a few opportunities for improvement.\n  We\u2019ve run into issues where we start Deep Work and forget to set that as our intention. I.e., something that started as more shallow work becomes Deep Work where I am not available to respond to messages. Likewise, a break where I\u2019m not available to respond can start suddenly when something comes up at home. This lack of visibility can lead to confusion.\n  When you set \u2018Deep Work\u2019 as your focus for one hour, it will clear to a state where no Status is set. Most likely, you\u2019re still in Deep Work but Slack doesn\u2019t re-affirm this. Our workaround is to have the Statuses never clear, but this results in the above problem (forgetting to set the Status).\n  Insights have to be based on intuition - there\u2019s no tracking linked to Status usage. It would be helpful to see a breakdown of time spent in Deep Work, and Deep Break/Out of Office to see how we can keep improving!\n  It\u2019s valuable to use Statuses to protect Deep Work and Deep Breaks from interruptions. It\u2019s not healthy for a team to use Statuses to create guilt around how you structure your day. If your coffee break goes long but you\u2019re available to respond in Slack, it\u2019s unnecessary to broadcast that you\u2019re on a \u201cbreak.\u201d Statuses aren\u2019t for micro-managing, they\u2019re for you. That\u2019s why we\u2019ve chosen our Slack Status suggestions to be Deep Work, Deep Break, and Out of Office. We intentionally do not have one for \u2018Working\u2019 because that\u2019s assumed to be the baseline case and is too conducive to micromanagement.\n  Have you tried using Slack Statuses as a remote team? Tell us what you\u2019ve learned at  hello@bytebase.io or  @Bytebaseapp.\n  Bytebase is a notes app that helps you clear your mind, prioritize, and do more Deep Work as you work from home. Request access at  https://bytebase.io.", "posttime": "2021-07-22 21:33:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8fdc\u7a0b\u5de5\u4f5c,slack", "title": "\u6211\u5728\u8fdc\u7a0b\u5de5\u4f5c\u65f6\u5b66\u5230\u7684\u5173\u4e8e\u4f7f\u7528 Slack \u72b6\u6001\u7684\u77e5\u8bc6", "title_en": "What I learned about using Slack statuses when working remotely", "transed": 1, "url": "https://bytebase.io/blog/slack-status-remote-work/", "via": "", "real_tags": ["\u8fdc\u7a0b\u5de5\u4f5c", "slack"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068746, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u5b50\u5806\u6808\u662f\u5173\u4e8e\u4ec0\u4e48\u7684\uff1f\u4ee5\u4e0b\u662f\u524d 25 \u671f\u7684\u6700\u4f73\u521b\u610f\u5217\u8868\u3002\u4e00\u4e9b\u793e\u4ea4\u7f51\u7edc\u6709\u4e00\u4e2a\u53cb\u8c0a\u7684\u6982\u5ff5\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u8fd9\u662f\u76f8\u4e92\u7684\u3002\u4f60\u53ef\u4ee5\u5411\u67d0\u4eba\u53d1\u9001\u201c\u597d\u53cb\u8bf7\u6c42\u201d\uff0c\u5982\u679c\u4ed6\u4eec\u63a5\u53d7\uff0c\u90a3\u4e48\u4f60\u4eec\u4e24\u4e2a\u5c31\u6210\u4e3a\u201c\u597d\u53cb\u201d\u3002 \uff08\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u8ffd\u968f\u8005\u6982\u5ff5\uff0c\u5b83\u53ef\u80fd\u662f\u5355\u5411\u7684\uff1a\u4f60\u53ef\u4ee5\u662f\u6211\u7684\u8ffd\u968f\u8005\uff0c\u4f46\u6211\u53ef\u80fd\u662f\u4e5f\u53ef\u80fd\u4e0d\u662f\u4f60\u7684\u8ffd\u968f\u8005\uff1b\u8fd9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u6a21\u578b\u3002\uff09\u6211\u4eca\u5929\u60f3\u8ba8\u8bba\u4e00\u79cd\u5171\u540c\u7684\u53cb\u8c0a\uff0c\u56e0\u4e3a\u5b83\u6784\u6210\u51e0\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u4ece\u8981\u6c42\u5f00\u59cb\u3002\u6211\u4eec\u6709\u4ee5\u4e0b\u5178\u578b\u7684\u64cd\u4f5c\u548c\u67e5\u8be2\uff1a \u6211\u4eec\u53ef\u4ee5\u5c06\u76f8\u4e92\u7684\u53cb\u8c0a\u8868\u793a\u4e3a\u4e00\u5bf9\u6709\u5411\u53cb\u8c0a\uff1aAlice \u662f Bob \u7684\u670b\u53cb\uff0cBob \u662f Alice \u7684\u670b\u53cb\u3002\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u5982\u4e0b\u7269\u7406\u8868\uff1a CREATE TABLE Friendship ( user1_id INTEGER NOT NULL, user2_id INTEGER NOT NULL, PRIMARY KEY (user1_id, user2_id)); DELETE FROM FriendshipWHERE (user1_id = 3 AND user2_id = 5) OR (user1_id = 5 AND user2_id = 3);\n\u6211\u4eec\u518d\u770b\u4e00\u4e0b Alice \u548c Bob \u7684\u597d\u53cb\u5173\u7cfb\u767b\u8bb0\u8868\u7684\u5185\u5bb9\uff1a \u597d\u5427\uff0c\u597d\u5427\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\uff08\u4e0d\u5bd2\u800c\u6817\uff09\u6570\u636e\u91cd\u590d\u5417\uff1f\u6211\u4eec\u7684\u4ee3\u7801\u4fdd\u8bc1\u6bcf\u4e00\u884c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5bf9\u79f0\u884c\uff1b\u6211\u4eec\u53ef\u80fd\u8ba4\u4e3a\u7b2c\u4e8c\u884c\u662f\u591a\u4f59\u7684\u3002\u90a3\u4e48\u8ba9\u6211\u4eec\u7814\u7a76\u4e00\u4e0b\u5355\u884c\u8bbe\u8ba1\u3002\u521b\u5efa\u8868\u76f8\u4e92\u53cb\u8c0a\uff08user1_id INTEGER NOT NULL\uff0cuser2_id INTEGER NOT NULL\uff0cPRIMARY KEY\uff08user1_id\uff0cuser2_id\uff09\uff09\uff1b\u6211\u4eec\u5e0c\u671b\u6bcf\u4e00\u4e2a\u76f8\u4e92\u7684\u53cb\u8c0a\u90fd\u6709\u4e00\u884c\u3002\u90a3\u4e48\uff0c\u4f1a\u662f\uff1a\uff1f\u9009\u62e9\u968f\u673a\u987a\u5e8f\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u8fd9\u4e24\u79cd\u53ef\u80fd\u6027\u6700\u7ec8\u90fd\u6709\u53ef\u80fd\u88ab\u63d2\u5165\uff0c\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u5b83\u5c06\u5982\u4f55\u5f71\u54cd\u6211\u4eec\u7684\u5178\u578b\u67e5\u8be2\uff1f\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u6211\u4eec\u603b\u662f\u5728 user1_id \u4e2d\u63d2\u5165\u4e00\u4e2a\u8f83\u5c0f\u7684 ID\uff0c\u5728 user2_id \u4e2d\u63d2\u5165\u8f83\u5927\u7684 ID\u3002\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u5728\u6211\u4eec\u7684\u8868\u4e0a\u5b9a\u4e49 CHECK \u7ea6\u675f\u6765\u5728\u6570\u636e\u5e93\u7ea7\u522b\u5f3a\u5236\u6267\u884c\u6b64\u64cd\u4f5c\uff1a CREATE TABLE \u76f8\u4e92\u53cb\u8c0a ( user1_id INTEGER NOT NULL, user2_id INTEGER NOT NULL, PRIMARY KEY (user1_id, user2_id), CONSTRAINT user1_user2_ids CHECK (user1_id) &lt; user2_id) ;\n\uff08\u4f46\u5f53\u7136\uff0c\u5982\u679c\u60a8\u53ef\u4ee5\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4fdd\u8bc1\u4ee3\u7801\u4e2d\u7684\u8fd9\u79cd\u4e0d\u53d8\u6027\uff0c\u5219\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff09\u3002\u5982\u679c\u6211\u4eec\u7684\u4e0d\u53d8\u91cf\u5f97\u5230\u4fdd\u8bc1\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u67e5\u8be2\u83b7\u5f97 Alice \u7684\u670b\u53cb\u5217\u8868\uff1a \u8fd9\u4e2a\u67e5\u8be2\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u6709\u95ee\u9898\uff0c\u56e0\u4e3a\u6211\u4e0d\u5c0f\u5fc3\u4f7f\u7528\u4e86\u770b\u8d77\u6765\u5f88\u660e\u663e\u7684\u6761\u4ef6\u201cWHERE user1_id = 5 OR user2_id = 5\u201d\u3002\u8fd9\u4e2a\u6761\u4ef6\u662f\u9519\u8bef\u7684\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u4ece\u5b9e\u7528\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4e3a\u4e86\u63d0\u9ad8\u8fd9\u4e2a\u67e5\u8be2\u7684\u6027\u80fd\uff0c\u6211\u4eec\u8fd8\u5e94\u8be5\u521b\u5efa\u7b2c\u4e8c\u4e2a\u8868\u7d22\u5f15\u3002\u7b2c\u4e00\u4e2a\u7531\u4e3b\u952e\u7ea6\u675f\u63d0\u4f9b\u3002\u7b2c\u4e8c\u4e2a\u5c06\u662f\u201cINDEX (user2_id, user1_id)\u201d\u3002\u6b64\u7d22\u5f15\u4e5f\u5c06\u63d0\u9ad8\u4ee5\u4e0b\u67e5\u8be2\u7684\u6027\u80fd\u3002\u8981\u786e\u5b9a Alice \u548c Bob \u662f\u5426\u662f\u670b\u53cb\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u67e5\u8be2\uff1a \u4e3a\u4e86\u4f7f\u6b64\u67e5\u8be2\u8d77\u4f5c\u7528\uff0c\u6211\u4eec\u7684\u4ee3\u7801\u5fc5\u987b\u786e\u4fdd\u7b2c\u4e00\u4e2a ID \u5c0f\u4e8e\u7b2c\u4e8c\u4e2a ID\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u6709\u67d0\u79cd\u51fd\u6570\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u4efb\u610f ID\uff0c\u5219\u8be5\u51fd\u6570\u9700\u8981\u5bf9\u4e24\u4e2a ID \u8fdb\u884c\u6392\u5e8f\u5e76\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u4f20\u9012\u5b83\u4eec\u3002\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u6216\u4e0d\u80fd\u5bf9\u4ee3\u7801\u4e2d\u7684 ID \u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651 SQL \u4e2d\u7684\u4e24\u4e2a\u9009\u9879\uff1a\nSELECT 1FROM Mutual_friendshipWHERE (user1_id = $ID1 AND user2_id = $ID2) OR (user1_id = $ID2 AND user2_id = $ID1) \u8fd9\u53ea\u9002\u7528\u4e8e\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u9884\u5904\u7406\u4e00\u5bf9 ID \u4ece\u800c\u4fdd\u8bc1\u7b2c\u4e00\u4e2a ID \u662f\u6bd4\u7b2c\u4e8c\u4e2a\u5c0f\u3002\u5426\u5219\uff0c\u6211\u4eec\u5fc5\u987b\u660e\u786e\u5730\u5199\u51fa OR \u6761\u4ef6\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u6a21\u578b\uff0c\u6211\u4eec\u90fd\u9700\u8981\u5b9e\u73b0\u4fdd\u6301\u4e0d\u53d8\u7684\u51fd\u6570\u6765\u5efa\u7acb\u548c\u5220\u9664\u53cb\u8c0a\u3002\u7136\u540e\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u53ea\u80fd\u901a\u8fc7\u8fd9\u4e9b\u51fd\u6570\u66f4\u6539\u6570\u636e\u3002\u81f3\u4e8e\u67e5\u8be2\uff1a\u5982\u679c\u60a8\u9700\u8981\uff0c\u4e24\u884c\u6a21\u578b\u5bf9\u4e8e\u4e34\u65f6\u624b\u52a8\u548c\u5206\u6790\u67e5\u8be2\u4f3c\u4e4e\u8981\u7b80\u5355\u5f97\u591a\uff08\u8fd9\u662f\u4e00\u4ef6\u597d\u4e8b\uff09\u3002\u5355\u884c\u6a21\u578b\u5f88\u5feb\u5c31\u4f1a\u53d8\u5f97\u4e4f\u5473\uff0c\u6216\u8005\u518d\u6b21\u9700\u8981\u9884\u5904\u7406\u3002\u9632\u6b62\u6570\u636e\u91cd\u590d\u662f\u4eba\u4eec\u5728\u8c08\u8bba\u6570\u636e\u5e93\u89c4\u8303\u5316\u65f6\u8c08\u8bba\u7684\u4e3b\u8981\u5185\u5bb9\u4e4b\u4e00\u3002\u5982\u679c\u60a8\u8981\u4e0e\u67d0\u4eba\u8ba8\u8bba\u5728\u4e24\u79cd\u8868\u793a\u4e4b\u95f4\u8fdb\u884c\u9009\u62e9\uff0c\u90a3\u4e48\u80af\u5b9a\u4f1a\u51fa\u73b0\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u786e\u5b9a\u4e24\u884c\u6a21\u578b\u8868\u793a\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ef4\u57fa\u767e\u79d1\u7684\u4e00\u4e2a\u4f8b\u5b50\u6765\u8bf4\u660e\u6570\u636e\u91cd\u590d\u7684\u60f3\u6cd5\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\u7684\u9526\u6807\u8d5b\u83b7\u80dc\u8005\u8868\uff1a \u8fd9\u79cd\u7ed3\u6784\u4e0d\u662f\u7b2c\u4e09\u8303\u5f0f\uff1a\u5982\u679c\u540c\u4e00\u4e2a\u4eba\u8d62\u5f97\u4e86\u591a\u6b21\u9526\u6807\u8d5b\uff0c\u6211\u4eec\u5c06\u591a\u6b21\u5b58\u50a8\u4ed6\u4eec\u7684 DOB\u3002\u8fd9\u5c31\u662f\u6570\u636e\u91cd\u590d\u548c\u4e0d\u4e00\u81f4\u7684\u6839\u6e90\uff1a\u5982\u679c\u6211\u4eec\u4e0d\u5c0f\u5fc3\u4e3a\u540c\u4e00\u4e2a\u4eba\u8f93\u5165\u4e86\u4e24\u4e2a\u4e0d\u540c\u7684\u51fa\u751f\u65e5\u671f\u600e\u4e48\u529e\uff1f\n\u4e3a\u4e86\u89c4\u8303\u8fd9\u4e2a\u6a21\u5f0f\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u8fd0\u52a8\u5458\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u8868\uff0c\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a\u7136\u540e\u4ece\u9526\u6807\u8d5b\u83b7\u80dc\u8005\u8868\u4e2d\u5220\u9664\u201c\u83b7\u80dc\u8005\u51fa\u751f\u65e5\u671f\u201d\u3002\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u73b0\u5728\uff0c\u7531\u4e8e\u6d88\u9664\u4e86\u6570\u636e\u91cd\u590d\uff0c\u5f53\u9700\u8981\u66f4\u6539\u5355\u4e2a\u6570\u636e\u65f6\uff0c\u5c06\u5bfc\u81f4\u66f4\u6539\u5355\u4e2a\u8868\u503c\u3002\u5982\u679c\u6211\u4eec\u53d1\u73b0\u5176\u4e2d\u4e00\u540d\u8fd0\u52a8\u5458\u7684\u51fa\u751f\u65e5\u671f\u4e0d\u6b63\u786e\uff0c\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u4e00\u4e2a\u503c\u3002\u5728\u975e 3NF \u5f62\u5f0f\u4e2d\uff0c\u8fd9\u5c06\u9700\u8981\u66f4\u6539\u65e0\u9650\u6570\u91cf\u7684\u884c\uff0c\u4e0e\u4ed6\u4eec\u8d62\u5f97\u9526\u6807\u8d5b\u7684\u6b21\u6570\u4e00\u6837\u591a\u3002\u8fd9\u91cc\u7684\u5173\u952e\u5b57\u4f3c\u4e4e\u662f\u201c\u65e0\u9650\u201d\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u63d0\u51fa\u4e24\u884c\u6a21\u578b\u4e2d\u6ca1\u6709\uff08\u574f\uff09\u6570\u636e\u91cd\u590d\u3002\u5f53\u6211\u4eec\u6dfb\u52a0\u6216\u5220\u9664\u5355\u4e2a\u597d\u53cb\u65f6\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u6216\u5220\u9664\u56fa\u5b9a\u6570\u91cf\u7684\u884c\uff0c\u5373\u4e24\u884c\u3002\u5b83\u4e0d\u662f\u65e0\u9650\u7684\u3002\u6211\u4e0d\u786e\u5b9a\u8fd9\u662f\u5426\u662f\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u63a5\u53d7\u7684\u8bba\u70b9\uff0c\u6211\u4ec0\u81f3\u4e0d\u786e\u5b9a\u6700\u521d\u7684\u95ee\u9898\u662f\u5426\u6709\u6548\u3002\u5766\u7387\u5730\u8bf4\uff0c\u8fd9\u4e24\u79cd\u6a21\u578b\u90fd\u611f\u89c9\u6709\u4e9b\u5947\u602a\uff0c\u5b83\u4eec\u5f3a\u70c8\u53cd\u5bf9\u5173\u7cfb\u6570\u636e\u5e93\u5efa\u6a21\u7684\u901a\u5e38\u8f7b\u677e\u6027\u3002\u4e5f\u8bb8\u8fd9\u662f\u56e0\u4e3a\u8868\u7ed3\u6784\u4e0d\u76f4\u63a5\u5904\u7406\u7684\u9644\u52a0\u4e0d\u53d8\u91cf\uff1f\u5766\u7387\u5730\u8bf4\uff0c\u6211\u6709\u70b9\u671f\u5f85\u6709\u4eba\u4f1a\u4e3a\u8fd9\u4e2a\u95ee\u9898\u63d0\u51fa\u4e00\u4e2a\u66f4\u4f18\u96c5\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u90fd\u4f1a\u5b66\u5230\u65b0\u7684\u4e1c\u897f\u3002\u6211\u4eec\u5c06\u5728\u4ee5\u540e\u7684\u5e16\u5b50\u4e2d\u8c03\u67e5\u5176\u4ed6\u4e00\u4e9b\u7c7b\u4f3c\u7684\u6848\u4f8b\u3002\u6211\u4eec\u5e0c\u671b\u627e\u5230\u63cf\u8ff0\u8fd9\u79cd\u60c5\u51b5\u7684\u6b63\u786e\u65b9\u6cd5\u3002\nPS\uff1a\u5982\u679c\u60a8\u662f\u8fd9\u4e2a\u5b50\u5806\u6808\u7684\u65b0\u624b\uff0c\u8bf7\u67e5\u770b\u524d 25 \u671f\u7684\u6700\u4f73\u521b\u610f\u5217\u8868\u3002", "note_en": "What is this substack about? Here is   the list of best ideas from the first 25 issues.\n  Some social networks have a concept of friendship which is mutual by definition.\u00a0 You can send somebody a \u201cfriend request\u201d, and if they accept it, then you two become \u201cfriends\u201d.\n (There is a separate concept of followers, that could be unidirectional: you could be my follower, but I may or may not be your follower; this is trivially modelled.)\n I\u2019d like to discuss a  mutual friendship today, because it poses a couple of interesting questions.\u00a0 First, let\u2019s begin with the requirements.\u00a0 We have the following typical operations and queries:\n     We can represent mutual friendship as a pair of directed friendships: Alice is a friend of Bob, Bob is a friend of Alice.\u00a0 We can design the following physical table:\n CREATE TABLE friendship (\u00a0\u00a0user1_id INTEGER NOT NULL,\u00a0\u00a0user2_id INTEGER NOT NULL,\u00a0\u00a0PRIMARY KEY (user1_id, user2_id));\n            DELETE FROM friendshipWHERE (user1_id = 3 AND user2_id = 5) OR (user1_id = 5 AND user2_id = 3);\n Let\u2019s look again at the table contents where Alice and Bob\u2019s friendship is registered:\n  Well, well, well, but isn\u2019t it a (shudder)  data duplication?\u00a0 Our code guarantees that for every row there is a corresponding symmetric row; we may think that this second row is redundant.\u00a0 Let\u2019s investigate the single-row design then.\n   CREATE TABLE mutual_friendship (\u00a0\u00a0user1_id INTEGER NOT NULL,\u00a0\u00a0user2_id INTEGER NOT NULL,\u00a0\u00a0PRIMARY KEY (user1_id, user2_id));\n  We want to have a single row for every mutual friendship.\u00a0 So, would it be:\n    ?\u00a0 Choosing a random order is not a good idea, because there is a chance that both possibilities would eventually get inserted, and what would that mean?\u00a0 And how will it affect our typical queries?\n We can decide that we always insert a smaller ID into  user1_id, and larger ID into  user2_id. It\u2019s even possible to enforce this on the database level by defining the CHECK constraint on our table:\n CREATE TABLE mutual_friendship (\u00a0\u00a0user1_id INTEGER NOT NULL,\u00a0\u00a0user2_id INTEGER NOT NULL,\u00a0\u00a0PRIMARY KEY (user1_id, user2_id),\u00a0\u00a0CONSTRAINT user1_user2_ids  CHECK (user1_id &lt; user2_id));\n (But of course, this is not necessary if you can guarantee this invariant in your code in some other way).\n  If our invariants are guaranteed, we can get the list of Alice\u2019s friends by the following query:\n   The first version of this query was buggy, because I carelessly used the obvious-looking condition \u201c WHERE user1_id = 5 OR user2_id = 5\u201d.\u00a0 This condition is wrong.\n By the way, from the practical point of view, to improve the performance of this query we should also create a second table index.\u00a0 The first one is provided by the primary key constraint.\u00a0 The second one is going to be \u201c INDEX (user2_id, user1_id)\u201d.\u00a0 This index will improve the performance of the following query too.\n  To find out if Alice and Bob are friends, we will use the following query:\n  For this query to work, our code must make sure that the first ID is less than the second ID.\u00a0 So if we have some kind of function that accepts two arbitrary IDs, this function needs to sort both IDs and pass them in the right order.\n If we don\u2019t want or cannot sort the IDs in our code, we have to consider both options in the SQL:\n SELECT 1FROM mutual_friendshipWHERE (user1_id = $ID1 AND user2_id = $ID2) OR\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(user1_id = $ID2 AND user2_id = $ID1)\n     This only works if we can pre-process a pair of IDs in our code and thus guarantee that the first ID is smaller than the second.\u00a0 Otherwise, we must explicitly write the OR-condition.\n       We see here that for both models we need to  implement invariant-preserving functions to establish and delete friendships. Then we must ensure that the data could be changed only via those functions.\n As for querying: the two-row model seems to be  substantially simpler for ad-hoc manual and analytic queries, if you need those (and it\u2019s a nice thing to have).\u00a0 The single-row model will quickly become tedious or would again require pre-processing.\n  Preventing data duplication is one of the main things people talk about when they talk about database normalization. If you would discuss choosing between two representations with somebody, this question would most certainly come up, and we have to decide if the two-row model representation is acceptable.\n We can illustrate the idea of data duplication by an example from Wikipedia.\u00a0 Suppose that we have a  table of tournament winners with the following structure:\n  This structure is  not in the third normal form: if the same person won multiple tournaments, we would store their DOB multiple times.\u00a0 This is the source of data duplication and inconsistencies: what if we accidentally put two different dates of birth for the same person?\n To normalize this schema we need to create a separate  table for athletes, with the following structure:\n  And then remove the \u201cWinner date of birth\u201d from the table of tournament winners.\n What happened here? \u00a0 Now, as the data duplication is eliminated, when a  single piece of data needs to be changed, it will lead to changing a  single table value.\u00a0 If we discover that the date of birth of  one of the athletes is incorrect, we only need to change  one value.\u00a0 In non-3NF form this would require changing an  unlimited number of rows, as many as the number of times they won tournaments.\n The keyword here seems to be \u201cunlimited\u201d, and it allows us to propose that  there is no (bad) data duplication in the two-row model.\u00a0 When we add or remove a single friendship, we need to add or remove a constant number of rows, namely two.\u00a0 It\u2019s not unlimited.\n I\u2019m not sure if that would be an acceptable argument for everyone, and I\u2019m not even sure if the original question is valid. \u00a0 Both of those models frankly feel somehow weird, they go strongly against the usual effortlessness of relational database modeling.\u00a0 Maybe this is because of the additional invariants that are not handled directly by the table structure?\n Frankly, I kind of expect that somebody will just present a much more elegant solution for this problem, and we all would learn something new.\n We\u2019re going to investigate some other similar cases in future posts.\u00a0 Our hope is to find the right way to describe this kind of situations.\n  P.S.: If you\u2019re new to this substack, take a look at   the list of best ideas from the first 25 issues.", "posttime": "2021-07-22 21:33:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5851\u9020,mutual,id", "title": "\u5851\u9020\u76f8\u4e92\u53cb\u8c0a", "title_en": "Modeling mutual friendship", "transed": 1, "url": "https://minimalmodeling.substack.com/p/modeling-mutual-friendship", "via": "", "real_tags": ["\u5851\u9020", "mutual", "id"]}, {"category": "", "categoryclass": "", "imagename": "f210e1e94a9a1050164d00832ca1bc4d.png", "infoid": 1068744, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Square Checking \u8d26\u6237\u7531 FDIC \u6210\u5458\u8428\u987f\u94f6\u884c\u63d0\u4f9b\u3002 Square \u501f\u8bb0\u5361\u662f\u4e00\u79cd\u501f\u8bb0\u5361\uff0c\u53ef\u5b58\u53d6 Square Checking \u8d26\u6237\u4e2d\u7684\u8d44\u91d1\uff0c\u7531 FDIC \u6210\u5458\u8428\u987f\u94f6\u884c\u53d1\u884c\uff1b\u6839\u636e Mastercard International Incorporated \u7684\u8bb8\u53ef\uff0c\u53ef\u4ee5\u5728\u63a5\u53d7 Mastercard \u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u3002\u901a\u8fc7 Square \u7684\u652f\u4ed8\u5904\u7406\u670d\u52a1\u4ea7\u751f\u7684\u8d44\u91d1\u901a\u5e38\u5728\u5904\u7406\u4ed8\u6b3e\u540e\u7acb\u5373\u5728 Square \u652f\u7968\u8d26\u6237\u4f59\u989d\u4e2d\u53ef\u7528\u3002\u8d44\u91d1\u53ef\u7528\u65f6\u95f4\u53ef\u80fd\u56e0\u6280\u672f\u95ee\u9898\u800c\u6709\u6240\u4e0d\u540c\u3002 1Savings \u8d26\u6237\u7531 FDIC \u6210\u5458 Square Financial Services, Inc. \u63d0\u4f9b\u3002 0.50% \u7684\u5e74\u6536\u76ca\u7387 (APY) \u5c06\u9002\u7528\u4e8e 2021 \u5e74 12 \u6708 31 \u65e5\uff0c\u4e4b\u540e\u5c06\u9002\u7528\u5f53\u65f6\u6709\u6548\u7684 APY\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5f00\u6237\u4e0d\u9700\u8981\u6700\u4f4e\u5b58\u6b3e\uff0c\u83b7\u5f97\u4efb\u4f55\u5e7f\u544a\u7684APY\u4e5f\u4e0d\u9700\u8981\u6700\u4f4e\u4f59\u989d\u3002\u6211\u4eec\u4e0d\u6536\u53d6\u6708\u8d39\u3002\u67d0\u4e9b\u53ef\u80fd\u4f1a\u51cf\u5c11\u5e10\u6237\u6536\u5165\u7684\u53ef\u9009\u9ad8\u7ea7\u529f\u80fd\u53ef\u80fd\u4f1a\u6536\u53d6\u67d0\u4e9b\u8d39\u7528\u3002\u50a8\u84c4\u8d26\u6237\u7531 FDIC \u627f\u4fdd\uff0c\u6700\u9ad8\u53ef\u8fbe 250,000 \u7f8e\u5143\u3002\u6240\u6709\u8d37\u6b3e\u5747\u7531\u72b9\u4ed6\u5dde\u7279\u8bb8\u5de5\u4e1a\u94f6\u884c\u3001FDIC \u6210\u5458 Square Financial Services, Inc. \u53d1\u884c\u3002\u6bcf 60 \u5929\u81f3\u5c11\u9700\u8981\u652f\u4ed8\u521d\u59cb\u8d37\u6b3e\u4f59\u989d\u7684 1/18\uff0c\u5e76\u4e14\u9700\u8981\u5728 18 \u4e2a\u6708\u5185\u5168\u989d\u507f\u8fd8\u8d37\u6b3e\u3002\u5b9e\u9645\u8d39\u7528\u53d6\u51b3\u4e8e\u652f\u4ed8\u5361\u5904\u7406\u5386\u53f2\u3001\u8d37\u6b3e\u91d1\u989d\u548c\u5176\u4ed6\u8d44\u683c\u56e0\u7d20\u3002\u4e0d\u4fdd\u8bc1\u8d37\u6b3e\u8d44\u683c\u3002\u6240\u6709\u8d37\u6b3e\u5747\u987b\u83b7\u5f97\u4fe1\u8d37\u6279\u51c6\u3002 Square\u3001Square \u5fbd\u6807\u3001Square Financial Services \u548c\u5176\u4ed6\u662f Square, Inc. \u548c/\u6216\u5176\u5b50\u516c\u53f8\u7684\u5546\u6807\u3002 Square Financial Services, Inc. \u662f Square, Inc. \u7684\u5168\u8d44\u5b50\u516c\u53f8\u3002", "note_en": "Square Checking accounts are provided by Sutton Bank, Member FDIC. The Square Debit Card is a debit card that accesses the funds in the Square Checking account, and is issued by Sutton Bank, Member FDIC; pursuant to a license from Mastercard International Incorporated, and may be used wherever Mastercard is accepted. Funds generated through Square\u2019s payment processing services are generally available in the Square checking account balance immediately after a payment is processed. Fund availability times may vary due to technical issues.\n 1Savings accounts are provided by Square Financial Services, Inc., Member FDIC. Annual percentage yield (APY) of 0.50% will apply until 12/31/2021, after which the APY in effect at that time will apply, and will be subject to change. No minimum deposit is required to open an account, and no minimum balance is required to obtain any advertised APY. We do not charge monthly fees. Certain fees may apply for optional, premium features that may reduce account earnings. Savings accounts are FDIC-insured up to $250,000.\n All loans are issued by Square Financial Services, Inc., a Utah-chartered Industrial Bank, Member FDIC. A minimum payment of 1/18th of the initial loan balance is required every 60 days, and full loan repayment is required within 18 months. Actual fee depends upon payment card-processing history, loan amount and other eligibility factors. Loan eligibility is not guaranteed. All loans are subject to credit approval.\n Square, the Square logo, Square Financial Services, and others are trademarks of Square, Inc. and/or its subsidiaries. Square Financial Services, Inc. is a wholly-owned subsidiary of Square, Inc.", "posttime": "2021-07-22 21:33:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u573a,square", "title": "\u5e7f\u573a\u94f6\u884c", "title_en": "Square Banking", "transed": 1, "url": "https://squareup.com/us/en/banking", "via": "", "real_tags": ["\u5e7f\u573a", "square"]}]