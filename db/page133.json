[{"category": "", "categoryclass": "", "imagename": "ea0e14e0f94d101f8228b15e8abbe0a4.jpg", "infoid": 1066922, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u6709\u4e9b\u4eba\u4ecd\u7136\u6000\u7591\u7535\u52a8\u9769\u547d\u5df2\u7ecf\u5f00\u59cb\uff0c\u4f46\u53e6\u4e00\u4e2a\u6c7d\u8f66\u5236\u9020\u5546\u5df2\u7ecf\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u65e5\u671f\uff0c\u4ee5\u4fbf\u505c\u6b62\u5c06\u65b0\u7684\u6c14\u4f53\u548c\u67f4\u6cb9\u8f66\u5e26\u5230\u5e02\u573a\u4e0a\u3002\n \u8463\u4e8b\u4f1a\u4e3b\u5e2dMarkus Deesmann\u5728\u4e0e\u516c\u53f8\u9ad8\u7ba1\u548c\u52b3\u5de5\u4ee3\u8868\u7684\u4f1a\u6664\u4e2d\u8868\u793a\uff0c\u5965\u8fea\u5c06\u505c\u6b62\u5c06\u65b0\u7684\u5316\u77f3\u71c3\u6599\u71c3\u70e7\u6c7d\u8f66\u5f15\u51652026\u5e74\u3002\u6b64\u5916\uff0c\u4ed6\u4eec\u7684\u9635\u5bb9\u4ec5\u5305\u62ec2028\u5e74\u7684\u201c\u7535\u5b50\u201d\u54c1\u724c\u6c7d\u8f66\u3002\n  \u8fd9\u4e0d\u662f\u5fb7\u56fd\u6c7d\u8f66\u5236\u9020\u5546\u5c06\u8f6c\u5411\u7535\u52a8\u7684\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019Deesmann\u8868\u793a\uff0c\u6b27\u6d32\u8054\u76df\u4e25\u683c\u7684\u6392\u653e\u6307\u5357\u6709\u52a9\u4e8e\u63a8\u52a8\u4ed6\u4eec\u7ed3\u675f\u65b0\u578b\u5185\u71c3\u673a\uff08ICE\uff09\u7684\u5f00\u53d1\u3002\n \u5965\u8fea\u6700\u8fd1\u63a8\u51fa\u4e862022\u5e74\u5965\u8feaQ4 E-Tron\u3002\u7535\u52a8\u4ea4\u53c9\u5c06\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u4fee\u526a\u9009\u9879\uff0c\u63d0\u4f9b\u4ece200\u82f1\u91cc\uff08321km\uff09\u7684\u8303\u56f4\uff0c\u6700\u9ad8\u53ef\u8fbe323\u82f1\u91cc\uff08520\u516c\u91cc\uff09\u3002\n \u6c7d\u8f66\u5236\u9020\u5546\u8ba1\u5212\u5728\u672a\u6765\u4e94\u5e74\u5185\u63a8\u51fa\u591a\u8fbe20\u4e2aEV\u6a21\u578b\uff0c\u4f5c\u4e3a\u6bcd\u516c\u53f8\u5927\u4f17\u6c7d\u8f66\u63a8\u52a8\u7535\u6c14\u5316\u7684\u4e00\u90e8\u5206\u3002\n \u7f16\u8005\u6ce8\u610f\uff1a\u672c\u6587\u7684\u5148\u524d\u7248\u672c\u5965\u8fea\u5c06\u505c\u6b62\u5c06\u519b\u6c7d\u8f66\u8fbe\u52302026\u5e74\u3002\u76f8\u53cd\uff0c\u5965\u8fea\u5c06\u57282026\u5e74\u5c06\u65b0\u7684\u71c3\u6c14\u8f66\u5e26\u5230\u5e02\u573a\u3002\u8fd9\u5df2\u7ecf\u7ea0\u6b63\u3002 ", "note_en": "While some still doubt the electric revolution has begun, another automaker has set a date to stop bringing new gas and diesel cars to market.\n In a meeting with company executives and labour representatives, board chairman Markus Duesmann said Audi would stop introducing new fossil fuel burning cars by 2026. Additionally, their lineup will only consist of \u201ce-\u201d branded cars by 2028.\n  This isn\u2019t the first signal the German automaker would be shifting to electric. Earlier this year Duesmann said the European Union\u2019s strict emission guidelines helped push them to end development of new internal combustion engines (ICE).\n Audi recently unveiled the  2022 Audi Q4 e-tron. The electric crossover will come in three different trim options, and offer ranges varying from 200 miles (321km) up to 323 miles (520km) on a full charge.\n The automaker plans to introduce as many as 20 EV models in the next five years as part of parent company  Volkswagen\u2019s push to electrification.\n Editor\u2018s  note: A previous version of this article stated Audi would stop making gas cars by 2026. Instead, Audi will no longer bring new gas cars to market by 2026. This has been corrected.", "posttime": "2021-06-20 02:46:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7279\u65af\u62c9,\u67f4\u6cb9\u8f66,tesla,\u6c7d\u8f66", "title": "\u5965\u8fea\u5c06\u57282026\u5e74\u5c06\u65b0\u7684\u5929\u7136\u6c14\u548c\u67f4\u6cb9\u8f66\u505c\u6b62 - \u9a7e\u9a76\u7279\u65af\u62c9\u52a0\u62ff\u5927 ", "title_en": "Audi will halt new gas and diesel cars by 2026 \u2013 Drive Tesla Canada", "transed": 1, "url": "https://driveteslacanada.ca/news/audi-stop-gas-and-diesel-cars-2026/", "via": "", "real_tags": ["\u7279\u65af\u62c9", "\u67f4\u6cb9\u8f66", "tesla", "\u6c7d\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "9628a3dffb922bdb9dace93a44260955.jpg", "infoid": 1066921, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u4ee5\u641c\u7d22OpenCola\u662f\u4e00\u4e2a\u5f00\u6e90\u53ef\u4e50\u7684\u54c1\u724c\uff0c\u5728\u90a3\u91cc\u5236\u4f5c\u5b83\u7684\u8bf4\u660e\u662f\u514d\u8d39\u63d0\u4f9b\u7684\u548c\u53ef\u4fee\u6539\u7684\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u559d\u9152\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4fee\u6539\u548c\u6539\u8fdb\u98df\u8c31\u3002\u5b83\u4e8e2001\u5e74\u7531\u81ea\u7531\u8f6f\u4ef6P2P\u516c\u53f8Opencola\u63a8\u51fa\uff0c\u63a8\u5e7f\u5176\u516c\u53f8\u3002 [1]\n   \u539f\u59cb\u7248\u672c1.0\u7531Grad Conn\uff0cCory Doctorow\u548cJohn Henson\u53d1\u5e03\u4e8e2001\u5e741\u670827\u65e5\u3002\u5f53\u524d\u7248\u672c\u4e3a1.1.3\u3002\u867d\u7136\u6700\u521d\u662f\u4f5c\u4e3a\u89e3\u91ca\u81ea\u7531\u548c\u5f00\u6e90\u8f6f\u4ef6\u7684\u4fc3\u9500\u5de5\u5177\uff0c\u4f46\u996e\u6599\u5360\u636e\u4e86\u81ea\u5df1\u7684\u5bff\u547d\uff0c\u9500\u552e\u4e86150,000\u7f50\u3002 [2]\u57fa\u4e8e\u591a\u4f26\u591a\u7684\u516c\u53f8Opencola\u5bf9\u996e\u6599\u66f4\u597d\u5730\u4e86\u89e3\uff0c\u800c\u4e0d\u662f\u5b83\u5e94\u8be5\u63a8\u5e7f\u7684\u8f6f\u4ef6\u3002\u83b1\u5fb7\u5e03\u6717\uff0c\u516c\u53f8\uff06\uff0339;\u9ad8\u7ea7\u7b56\u7565\u5e08\uff0c\u5c06\u5176\u6210\u529f\u5f52\u529f\u4e8e\u5bf9\u5927\u516c\u53f8\u548c\uff06\uff0334\u7684\u5e7f\u6cdb\u4e0d\u4fe1\u4efb;\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u7684\u4e13\u6709\u6027\u8d28\uff06\uff0334; [3]\n        \u5c06\u6d53\u7f29\u7269\u6df7\u5408\u5230\u89c4\u5b9a\u7684\u914d\u65b9\uff08\u5305\u62ec\u6240\u6709\u63a8\u8350\u7684\u5b89\u5168\u9884\u9632\u63aa\u65bd\uff09\u540e\uff0c\u7528\uff08\uff06\uff0334;\u4f18\u9009\u65e0\u94a0\uff06\uff0334;\uff09\u82cf\u6253\u6c34\u7a00\u91ca5\uff1a1\uff0c\u4f7f\u6210\u54c1\u996e\u7528;\u5728\u8be5\u7a00\u91ca\u4e2d\uff0c\u4e0a\u8ff0\u6210\u5206\u7ec4\u5408\u5c06\u4ea7\u751f\u7ea624\u5347\u7684Opencola\u3002\n \u5168\u98df\u54c1\u8fd8\u5305\u62ec\u7531\u8bf8\u5982\u9175\u6bcd\u548c\u7cd6\u7b49\u57fa\u672c\u6210\u5206\u751f\u4ea7\u7684\u81ea\u5236\u82cf\u6253\u6c34\u7684\u8bf4\u660e\u4e66\uff0c\u4ee5\u4f7f\u6574\u4e2a\u8fc7\u7a0b\u5f00\u6e90;\u5426\u5219\u9700\u8981\u4f7f\u7528\u5546\u4e1a\u751f\u4ea7\u7684\u74f6\u88c5\u6216\u7f50\u88c5\u82cf\u6253\u6c34\uff0c\u6216\u5177\u6709\u5546\u4e1a\u5236\u9020\u7684\u4e8c\u6c27\u5316\u78b3\u7f50\u7684\u6d88\u8d39\u78b3\u5316\u673a\u3002 [4] [5]\n     ^ Paul Heltzel\uff082001\u5e744\u67089\u65e5\uff09\u3002 \uff06\uff0334; Opencola  - \u6709\u4e00\u4e9b\u4ee3\u7801\u548c\u5fae\u7b11\uff06\uff0334;\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u6280\u672f\u5ba1\u67e5\u3002 OpenCola\u6070\u597d\u4ea7\u751f\u82cf\u6253\u6c34\u7684\u8f6f\u4ef6\u516c\u53f8\u4f7f\u7528\u70b9\u5bf9\u70b9\u641c\u7d22\u6765\u67e5\u627e\u7f51\u7edc\u4e0a\u7684\u4fe1\u606f\u3002\u5b83\u7684\u8f6f\u996e\u6599\uff0cOpencola\uff0c\u6709\u52a9\u4e8e\u63a8\u5e7f\u516c\u53f8\u3002\n ^ Malyn\uff082007\u5e742\u670818\u65e5\uff09\u3002 \uff06\uff0334; Opencola  - \u5f00\u6e90\u53ef\u53e3\u53ef\u4e50\uff06\uff0334;\u6570\u5b57\u671f\u520a\u3002\u8f6f\u996e\u6599\u6700\u521d\u662f\u65e8\u5728\u5e2e\u52a9\u89e3\u91ca\u5f00\u6e90\u8f6f\u4ef6\u7684\u4fc3\u9500\u5de5\u5177\uff0c\u4f46\u81ea\u63a8\u51fa\u5b83\u4ee5\u6765\uff06\uff0339;\u5728\u81ea\u5df1\u7684\u751f\u6d3b\u4e2d\u62cd\u6444\u3002\u63a8\u51fa\u5b83\u7684\u516c\u53f8\u5df2\u7ecf\u4e3a\u996e\u6599\u8d8a\u6765\u8d8a\u95fb\u540d\u4e8e\u4ed6\u4eec\u63d0\u4f9b\u7684\u8f6f\u4ef6......\u9500\u552e\u996e\u54c1\u7684\u7f51\u7ad9\u5df2\u552e\u51fa\u8d85\u8fc7150,000\u7f50\uff01\n ^ ian Steadman\uff082013\u5e744\u670813\u65e5\uff09\u3002 \uff06\uff0334;\u5f00\u6e90\u53ef\u4e50\u548c\uff06\uff0339; Napster\u65f6\u523b\uff06\uff0339;\u4e3a\u98df\u54c1\u5546\u4e1a\uff06\uff0334;\u6709\u7ebf \u3002\u5b83\uff06\uff0339; S\u79f0\u4e3aOpen Cola\uff0c\u8be5\u4ea7\u54c1\u9996\u5148\u7531\u73b0\u5728\u7f3a\u52e4\u591a\u4f26\u591a\u8f6f\u4ef6\u516c\u53f8Opencola\u4f5c\u4e3a\u4e00\u4e2a\u7b11\u8bdd\u3002\u4eceRichard Stallman\uff06\uff0339;\u81ea\u7531\u8f6f\u4ef6\u662f\uff06\uff0334\u7684\u7740\u540d\u00b7\u683c\u5c14\u66fc\u7684\u7075\u611f\u6765\u81ea\u8a00\u8bba\u81ea\u7531\uff0c\u4e0d\u50cf\u5564\u9152\uff06\uff0334;\u90a3\u6837\u662f\u4e00\u79cd\u4fc3\u9500\u5de5\u5177\u3002\u98df\u8c31\u5728\u7ebf\u53d1\u5e03\uff0c\u4f9b\u4efb\u4f55\u4eba\u91c7\u53d6\u548c\u9002\u5e94\u3002\u7248\u672c1.0\u4e8e2001\u5e741\u670827\u65e5\u53d1\u5e03 - \u6700\u65b0\u7248\u672c\u4e3a1.1.3\u3002 Opencola\u4e8e2003\u5e74\u5173\u95ed\uff0c\u4f46\u5f00\u653e\u53ef\u4e50\uff06\uff0339;\u4ecd\u7136\u5b58\u5728\u3002 \n^ a b c\uff06\uff0334; opencola.com  - \u8f6f\u996e\u6599\u914d\u65b9 - \u4e92\u8054\u7f51\u6863\u6848\uff06\uff0334; 2001.\u4ece2001-02-18\u5f52\u6863\u539f\u4ef6\u3002 ", "note_en": "Jump to navigation  Jump to search  OpenCola is a brand of  open-source cola, where the instructions for making it are freely available and modifiable. Anybody can make the drink, and anyone can modify and improve on the recipe. It was launched in 2001 by free software P2P company Opencola, to promote their company.  [1]\n   The original version 1.0 was released on 27 January 2001 by Grad Conn,  Cory Doctorow, and John Henson. The current version is 1.1.3. Although originally intended as a promotional tool to explain  free and open source software, the drink took on a life of its own and 150,000 cans were sold.  [2] The Toronto-based company Opencola became better known for the drink than the software it was supposed to promote. Laird Brown, the company&#39;s senior strategist, attributes its success to a widespread mistrust of big corporations and the &#34;proprietary nature of almost everything&#34;.  [3]\n        After mixing up the concentrate to the prescribed recipe (including all recommended safety precautions), the syrup is diluted 5:1 with (&#34;preferably  sodium-free&#34;)  soda water to make the finished drink; at this dilution, the above combination of ingredients will yield approximately 24 litres of OpenCola.\n The full recipe also includes instructions for home-made soda water produced from basic ingredients such as  yeast and  sugar in order to make the entire process open source; otherwise there would be a need to use commercially produced bottled or canned soda, or consumer  carbonation machines with commercially manufactured  carbon dioxide canisters.  [4]  [5]\n     ^   Paul Heltzel (9 April 2001).  &#34;OpenCola-Have Some Code and a Smile&#34;.  MIT Technology Review .  A software company that happens to produce a soda, OpenCola uses peer-to-peer searching to find information on the Web. Its soft drink, OpenCola, helps to promote the company.\n ^    Malyn (18 February 2007).  &#34;OpenCola - Open Source Coca Cola&#34;. Digital Journal .  The soft drink was originally intended to be a promotional tool to help explain open source software but since its launch it&#39;s taken on a life of its own. The company that launched it has become more well known for the drink than the software they offer... the website selling the drink has sold over 150,000 cans!\n ^    Ian Steadman (13 April 2013).  &#34;Open source cola and the &#39;Napster moment&#39; for the food business&#34;.  Wired .  It&#39;s called Open Cola, a product first produced by now-defunct Toronto software company Opencola as something of a joke. Taking inspiration from Richard Stallman&#39;s famous dictum that free software was &#34;free as in speech, not as in beer&#34;, it was meant as a kind of promotional tool. The recipe was published online for anyone to take and adapt. Version 1.0 was published on 27 January 2001 -- the latest version is 1.1.3. Opencola closed in 2003, but Open Cola&#39;s recipe is still around.\n ^     a     b     c     &#34;OpenCola.com - Soft Drink Formula - Internet Archive&#34;. 2001. Archived from  the original on 2001-02-18 .", "posttime": "2021-06-20 02:46:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "opencola", "title": "Opencola\uff08\u996e\u6599\uff09 ", "title_en": "OpenCola (Drink)", "transed": 1, "url": "https://en.wikipedia.org/wiki/OpenCola_(drink)", "via": "", "real_tags": ["opencola"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066920, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u6bcf\u4e2a\u5de5\u7a0b\u5e08\u90fd\u5fc5\u987b\u51b3\u5b9a\u662f\u5426\u4e3a\u67d0\u4e9b\u4e1c\u897f\u5199\u6d4b\u8bd5\u6216\u53ea\u662f\u8fd0\u9001\u529f\u80fd\u5e76\u7ee7\u7eed\u524d\u8fdb\u3002\n \u5728\u4e00\u6bb5\u65f6\u95f4\u560e\u5431\u560e\u5431\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u5c06\u7ecf\u5e38\u4e3a\u7b80\u5355\u7684\u4e1c\u897f\u5199\u6d4b\u8bd5\uff08\u4f8b\u5982\u7eaf\u51fd\u6570\uff09\u6216\u5199\u4e0b\u4e3a\u4ed6\u4eec\u7684\u964d\u538b\u63d0\u4f9b\u6700\u5927\u7684\u7206\u70b8\u7684\u6d4b\u8bd5\uff08\u4f8b\u5982\uff0c\u670d\u52a1\u7684\u7aef\u5230\u7aef\u96c6\u6210\u6d4b\u8bd5\uff09\u3002\n \u6d4b\u8bd5\u4ee3\u7801\u4e0e\u5916\u90e8\u7cfb\u7edf\u76f8\u4e92\u4f5c\u7528\uff0c\u5982\u6570\u636e\u5e93\u6216S3\uff0c\u9700\u8981\u66f4\u591a\u7684\u52aa\u529b\u3002\u4f46\u662f\uff0c\u91cd\u8981\u7684\u4e1a\u52a1\u903b\u8f91\u7ecf\u5e38\u53d1\u751f\u5728\u6b64\u4ee3\u7801\u4e2d\uff0c\u6700\u8fd1\u6211\u5bf9\u6d4b\u8bd5\u5b83\u66f4\u611f\u5174\u8da3\u3002\n    \u6765\u81eaDataclasses Import DataClass Import Json Import Boto3 S3_Bucket =\uff06\uff0334;\u98df\u8c31\uff06\uff0334; def get_s3\uff08\uff09\uff1a\u8fd4\u56deboto3\u3002\u5ba2\u6237\u7aef\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09@ dataclass\u7c7b\u914d\u65b9\uff1a\u540d\u79f0\uff1astr\u8bf4\u660e\uff1astr @ classmethod def get_by_name\uff08cls\uff0cname\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u62ac\u8d77\u98df\u8c31\u6309\u540d\u79f0args\uff1aname\uff08str\uff09\uff1a\u98df\u8c31\u540d\u79f0\u8fd4\u56de\u98df\u8c31\u5bf9\u8c61\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; response = get_s3\uff08\uff09\u3002 get_object\uff08bucket = s3_bucket\uff0ckey = name\uff09\u54cd\u5e94= json\u3002\u52a0\u8f7d\uff08\u54cd\u5e94[\uff06\uff0334;\u8eab\u4f53\uff06\uff0334;]\u3002read\uff08\uff09\uff09\u8fd4\u56decls\uff08\u54cd\u5e94[\uff06\uff0334;\u540d\u79f0\uff06\uff0334;]\uff0c\u54cd\u5e94[\uff06\uff0334;\u6307\u4ee4\uff06\uff0334;]\uff09@ classMethod def update_instructions\uff08 CLS\uff0c\u540d\u79f0\uff1astr\uff0cnew_instructions\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u66f4\u65b0\u98df\u8c31args\u7684\u8bf4\u660e\uff1aname\uff08str\uff09\uff1a\u8981\u66f4\u65b0new_instructions\uff08str\uff09\u7684\u914d\u65b9\u7684\u540d\u79f0\uff1a\u65b0\u7684\u6307\u4ee4\u548c\uff0334;\uff06\uff0334;\uff06\uff0334;\u98df\u8c31= CLS\u3002 get_by_name\uff08name\uff09\u914d\u65b9\u3002\u8bf4\u660e= new_instructions\u8fd4\u56de\u914d\u65b9@ classmethod def delete\uff08cls\uff0cname\uff1astr\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5220\u9664\u98df\u8c31args\uff1aname\uff08str\uff09\uff1a\u5220\u9664\u914d\u65b9\u7684\u540d\u79f0\u548c\uff0334;\uff06 \uff0334;\uff06\uff0334; get_s3\uff08\uff09\u3002 delete_object\uff08bucket = s3_bucket\uff0ckey = name\uff09def to_json\uff08self\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5e8f\u5217\u5316json returns\uff1astr\uff1ajson\u8868\u793a\u914d\u65b9\uff06\uff0334;\uff06\uff0334; \uff06\uff0334;\u8fd4\u56dejson\u3002\u8f6c\u50a8\uff08{\uff06\uff0334;\u540d\u79f0\uff06\uff0334; self\u3002\u540d\u5b57\uff0c\uff06\uff0334;\u6307\u793a\uff06\uff0334; self\u3002\u8bf4\u660e}\uff09def save\uff08self\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u6301\u7eed\u5b58\u5728FEREAPE\u5230S3\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; serialized_recipe = self\u3002 to_json\uff08\uff09\u3002\u7f16\u7801\uff08\uff06\uff0334; UTF-8\uff06\uff0334;\uff09get_s3\uff08\uff09\u3002 put_object\uff08bucket = s3_bucket\uff0ckey = self\u3002\u540d\u79f0\uff0cbody = serialized_recipe\uff09\n   Moto\u662f\u4e00\u4e2aPython\u5e93\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u6a21\u62dfAWS\u5728\u6d4b\u8bd5\u4e2d\u7684\u670d\u52a1\u3002\u8ba9\u6211\u4eec\u4f7f\u7528\u5b83\u6765\u6d4b\u8bd5\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u521b\u5efa\u6211\u4eecS3\u5b58\u50a8\u6876\u7684PyTest\u3002 Mock_s3\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u4e2d\u7684\u6240\u6709S3\u4ea4\u4e92\u5c06\u5728Moto\u7684Virtual AWS\u5e10\u6237\u4e2d\u5b9a\u5411\u3002\n \u4eceMoto Import Mock_s3\u5bfc\u5165Boto3\u4ece\u98df\u8c31\u5bfc\u5165\u914d\u65b9\uff0cS3_Bucket @ PyTest\u8fdb\u53e3Pytest\u3002\u5939\u5177def s3\uff08\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u5728\u5047moto aws\u5e10\u6237\u4e2d\u521b\u5efa\u98df\u8c31\u6876\u7684Pytest\u5939\u5177\u4ea7\u751f\u5047\u7684Boto3 S3\u5ba2\u6237\uff06\uff0334;\uff06\uff0334;\uff06\uff0334; Mock_s3\uff08\uff09\uff1as3 = boto3\u3002\u5ba2\u6237\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09s3\u3002 CREATE_BUCKET\uff08BUCKET = S3_BUCKET\uff09\u4ea7\u91cfS3 \ndef test_create_and_get\uff08s3\uff09\uff1a\u914d\u65b9\uff08name =\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334;\n \u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u83b7\u53d6\u4e0d\u5b58\u5728\u7684\u914d\u65b9\uff0c\u5219\u5e94\u63d0\u51fa\u5f02\u5e38\u3002\u6b64\u6d4b\u8bd5\u6db5\u76d6\u4e86\u8fd9\u79cd\u60c5\u51b5\u3002\n  \u6211\u4eec\u8fd8\u53ef\u4ee5\u66f4\u65b0\u914d\u65b9\u3002\u6b64\u6d4b\u8bd5\u786e\u8ba4\u5728\u8c03\u7528Save\uff08\uff09\u540e\u66f4\u65b0\u6570\u636e\u3002\n def test_update\uff08s3\uff09\uff1aold_instructions =\uff06\uff0334;\u82af\u7247\u4e0a\u7684\u7194\u4f53\u5976\u916a\uff06\uff0334; new_instructions =\uff06\uff0334;\u5fae\u6ce2\u4e00\u76d8\u88c5\u6ee1\u7389\u7c73\u7247\u548c\u5976\u916a\uff06\uff0334;\u98df\u8c31\uff08\u540d\u79f0=\uff06\uff0334; Nachos\uff06\uff0334;\uff0c\u6307\u4ee4= Old_Instructions\uff09\u3002\u4fdd\u5b58\uff08\uff09new_recipe =\u914d\u65b9\u3002 update_instructions\uff08name =\uff06\uff0334; nachos\uff06\uff0334;\uff0cnew_instructions = new_instructions\uff09\uff03\u5728\u8c03\u7528save\uff08\uff09\u914d\u65b9=\u914d\u65b9\u4e4b\u524d\u6ca1\u6709\u66f4\u6539\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002\u6307\u4ee4== old_instructions new_recipe\u3002\u4fdd\u5b58\uff08\uff09\uff03\u4fdd\u5b58\u914d\u65b9=\u914d\u65b9\u540e\u7684\u914d\u65b9\u66f4\u65b0\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002\u6307\u4ee4== new_instructions.\n  def test_delete\uff08s3\uff09\uff1a\u98df\u8c31\uff08\u540d\u79f0=\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u54cd\u5e94= S3\u3002 list_objects_v2\uff08\u6876= s3_bucket\uff09\u65ad\u8a00Len\uff08\u54cd\u5e94[\uff06\uff0334;\u5185\u5bb9\uff06\uff0334;]\uff09== 1\u65ad\u8a00\u54cd\u5e94[\uff06\uff0334;\u5185\u5bb9\uff06\uff0334; ] [0] [\uff06\uff0334; key\uff06\uff0334; ] ==\uff06\uff0334; Nachos\uff06\uff0334;\u98df\u8c31 \u3002\u5220\u9664\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\uff03\u5220\u9664\u914d\u65b9\u54cd\u5e94= S3\u540e\uff0cS3\u4e2d\u7684\u6570\u636e\u6d88\u5931\u4e86\u3002 list_objects_v2\uff08\u6876= s3_bucket\uff09\u65ad\u8a00\uff06\uff0334;\u5185\u5bb9\uff06\uff0334;\u4e0d\u662f\u56de\u5e94\u3002\u952e\uff08\uff09\n \u603b\u7684\u6765\u8bf4\uff0cMoto\u5728\u5b9e\u65bdS3 API\u65f6\u505a\u5f97\u5f88\u597d\u3002\u5b89\u88c5\u6613\u4e8e\u5b89\u88c5\uff0c\u611f\u89c9\u5c31\u50cf\u771f\u5b9e\u7684S3\u4e00\u6837\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4efb\u4f55\u4ee3\u7801\u66f4\u6539\u3002\n   \u4ee5\u4e0b\u662f\u521b\u5efaS3\u5b58\u6839\u7684PyTest\u5939\u5177\u3002\u7531\u4e8e\u5176\u4ed6S3\u5ba2\u6237\u7aef\u4e0d\u4f1a\u4f7f\u7528\u6b64\u5b58\u6839\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u4fee\u8865get_s3\u5e76\u7528\u5b58\u6839\u66ff\u6362\u5176\u8fd4\u56de\u503c - \u4ece\u800c\u5f3a\u5236\u5728\u914d\u65b9\u7c7b\u4e2d\u7684\u6240\u6709S3\u5ba2\u6237\u7aef\u6765\u4f7f\u7528\u6211\u4eec\u7684\u5b58\u6839\u3002 \n\u5bfc\u5165DateTime Import JSON\u6765\u81eaDateutil.tz\u5bfc\u5165Tzutc\u4eceIo Import Bytesio\u4eceunittest.stub\u5bfc\u5165\u8865\u4e01\u5bfc\u5165boto3\u4ecebotocore.stub\u5bfc\u5165stubber\uff0c\u4efb\u4f55\u6765\u81eabotocore.response\u5bfc\u5165\u6d41\u5a92\u4f53\u5bfc\u5165pytest\u4ece\u914d\u65b9\u5bfc\u5165\u914d\u65b9\uff0cs3_bucket @ pytest\u3002\u5939\u5177def s3_stub\uff08\uff09\uff1a\uff06\uff0334;\uff06\uff0334;\uff06\uff0334;\u7528s3\u5ba2\u6237\u7aef\u5b58\u6839\u6a21\u62dfget_s3\u51fd\u6570\u7684pytest\u706f\u5177\u4f1a\u4ea7\u751fs3\u5ba2\u6237\u7aef\uff06\uff0334\u7684\u8131\u832c;\uff06\uff0334;\uff06\uff0334; s3 = boto3\u3002\u5ba2\u6237\u7aef\uff08\uff06\uff0334; s3\uff06\uff0334;\uff09stubber = stuber\uff08s3\uff09\u4e0e\u8865\u4e01\uff08\uff06\uff0334; recipe.get_s3\uff06\uff0334;\uff0creturn_value = s3\uff09\uff1a\u4ea7\u91cf\u8131\u832c\n \u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06put_object\u548cget_object s3 apis\u505c\u7559\u54cd\u5e94\u3002\u4f7f\u7528\u90a3\u4e9b\u5b58\u6839\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u521b\u5efa\u5e76\u968f\u540e\u83b7\u53d6\u914d\u65b9\u7684\u6d4b\u8bd5\u3002\n def test_create_and_get\uff08s3_stub\uff09\uff1a\uff03stup out put_object\u54cd\u5e94\uff03\u6ce8\u610f\uff1a\u8fd9\u4e9b\u5b58\u6839\u662f\u4e0d\u5b8c\u6574\u7684 - \u6211\u7701\u7565\u4e86\u8bf8\u5982#brevity pured_object_response = {\uff06\uff0334; respectemetadata\uff06\uff0334\u7b49\u4e8b\u60c5\u3002 \uff1a{\uff06\uff0334; quequentId\uff06\uff0334; \uff1a\uff06\uff0334; 5994D680BF127CE3\uff06\uff0334; \uff0c\uff06\uff0334; httpstatuscode\uff06\uff0334; \uff1a200\uff0c\uff06\uff0334; retryattempts\uff06\uff0334; \uff1a1\uff0c}\uff0c\uff06\uff0334; Etag\uff06\uff0334; \uff1a\uff06\uff0339;\uff06\uff0334; 6299528715bad0e3510d1e4c4952ee7e\uff06\uff0334;\uff06\uff0334; \uff0c} put_object_expected_pa\u200b\u200brams = {\uff06\uff0334;\u94f2\u6597\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334; key\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334;\u8eab\u4f53\uff06\uff0334; \uff1a\u4efb\u4f55} s3_stub\u3002 add_response\uff08\uff06\uff0334; put_object\uff06\uff0334; put_object_response\uff0cput_object_expecty_params\uff09\uff03\u521b\u5efaGet_Object Encoded_Message = JSON\u8fd4\u56de\u7684\u6d41\u4f53\u3002\u8f6c\u50a8\uff08{\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\uff1a\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\uff06\uff0334;\u6307\u793a\uff06\uff0334;\uff1a\uff06\uff0334;\u788e\u7247\u4e0a\u7684\u7194\u4f53\u5976\u916a\uff06\uff0334;}\uff09\u3002\u7f16\u7801\uff08\uff06\uff0334; utf-8\uff06\uff0334;\uff09raw_stream = streamingbody\uff08bytesio\uff08encoded_message\uff09\uff0clen\uff08encoded_message\uff09\uff09\uff03stup out get_object\u54cd\u5e94get_object_response = {\uff06\uff0334; respectemetadata\uff06\uff0334; \uff1a{\uff06\uff0334; quequentId\uff06\uff0334; \uff1a\uff06\uff0334; 6BFC00970E62BC8F\uff06\uff0334; \uff0c\uff06\uff0334; httpstatuscode\uff06\uff0334; \uff1a200\uff0c\uff06\uff0334; retryattempts\uff06\uff0334; \uff1a1\uff0c}\uff0c\uff06\uff0334; LastModified\uff06\uff0334; \uff1a  \u7ea6\u4f1a\u65f6\u95f4 \u3002 DateTime\uff082020,4,6,5,39,29\uff0cTzinfo = Tzutc\uff08\uff09\uff09\uff0c\uff06\uff0334; contentLength\uff06\uff0334; \uff1a58\uff0c\uff06\uff0334; Etag\uff06\uff0334; \uff1a\uff06\uff0339;\uff06\uff0334; 6299528715bad0e3510d1e4c4952ee7e\uff06\uff0334;\uff06\uff0334; \uff0c\uff06\uff0334; contenttype\uff06\uff0334; \uff1a\uff06\uff0334;\u4e8c\u5143/\u516b\u5143\u95e8\u6d41\uff06\uff0334; \uff0c\uff06\uff0334;\u5143\u6570\u636e\uff06\uff0334; \uff1a{}\uff0c\uff06\uff0334;\u8eab\u4f53\uff06\uff0334; \uff1araw_stream\uff0c} get_object_expected_pa\u200b\u200brams = {\uff06\uff0334;\u94f2\u6597\uff06\uff0334; \uff1a\u4efb\u4f55\uff0c\uff06\uff0334; key\uff06\uff0334; \uff1a\u4efb\u4f55} s3_stub\u3002 add_response\uff08\uff06\uff0334; get_object_response\uff0cget_object_eppect_params\uff09\uff03\u7528s3_stub\u6fc0\u6d3bstuber\uff1acrecipe = crecipe\uff08name =\uff06\uff0334;\u7389\u7c73\u866b\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u788e\u7247\u6405\u62cc\u5976\u916a\uff06\uff0334; \uff09  \u98df\u8c31 \u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334;\n \u867d\u7136Botocore Stubs\u662f\u529f\u80fd\u7684\uff0c\u4f46\u6211\u4e0d\u559c\u6b22\u7528\u5b83\u4eec\u5de5\u4f5c\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n \u4ed6\u4eec\u9700\u8981\u66f4\u591a\u7684\u51c6\u5907\u3002\u521b\u5efa\u5b58\u6839\u662f\u8017\u65f6\u7684\u3002\u5373\u4f7f\u60a8\u4ea4\u4e92\u65b9\u5f0f\u8fd0\u884c\u771f\u5b9e\u4ee3\u7801\u5e76\u590d\u5236\u54cd\u5e94\uff0c\u4e5f\u9700\u8981\u66ff\u6362\u4e00\u4e9b\u4e8b\u60c5 - \u4f8b\u5982\u4e0a\u9762\u7684\u6d41\u4f53\u3002\n  \u4ed6\u4eec\u662f\u8106\u5f31\u800c\u5047\u7684\u3002\u9996\u5148\u8fd4\u56de\u54cd\u5e94\uff0c\u9996\u5148\u51fa\u5c40 - \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u4ee5\u4e0d\u540c\u7684\u987a\u5e8f\u8c03\u7528S3 API\uff0c\u5219\u5b83\u5c06\u629b\u51fa\u9519\u8bef\u3002\u5982\u679c\u60a8\u5728\u5982\u4f55\u8c03\u7528API\u4e2d\u6709\u4e00\u4e2a\u9519\u8bef\uff0c\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002\n  \u8981\u4f7f\u5b58\u6839\u770b\u8d77\u6765\u6709\u70b9\u903c\u771f\uff0c\u4f60\u5fc5\u987b\u5632\u7b11\u4f60\u7684\u4ee3\u7801\u4e0d\u5173\u5fc3\u7684\u5f88\u591a\u9886\u57df\uff0c\u5e76\u5c06\u60a8\u7684\u6d4b\u8bd5\u4e0e\u5047\u54cd\u5e94\u878d\u4e3a\u4e00\u4f53\u3002 \n\u5b83\u4eec\u4ece\u6b63\u5728\u6d4b\u8bd5\u7684\u6a21\u5757\u4e2d\u6cc4\u6f0f\u5b9e\u73b0\u8be6\u7ec6\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6a21\u5757\u4ece\u4f7f\u7528s3.list_objects\u5207\u6362\u5230s3.list_objects_v2\uff0c\u5219\u6d4b\u8bd5\u5c06\u5931\u8d25\uff0c\u56e0\u4e3a\u5b83\u53d6\u51b3\u4e8e\u88ab\u8c03\u7528\u7684\u7279\u5b9aAPI\u3002\u8fd9\u4f1a\u521b\u5efa\u5bf9\u6a21\u5757\u7684\u79c1\u6709API\u7684\u4e0d\u5fc5\u8981\u4f9d\u8d56\uff0c\u800c\u4e0d\u662f\u6d4b\u8bd5\u516c\u5171API\u3002\n  \u7b2c\u4e09\u4e2a\u9009\u9879\u662fLocalStack\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u672c\u5730\u63d0\u51fa\u6574\u4e2aAWS\u4e91\u5806\u6808\u3002\n  \u7248\u672c\uff1a\uff06\uff0334; 3.7\uff06\uff0334;\u670d\u52a1\uff1a\u6d4b\u8bd5\uff1a\u56fe\u7247\uff1aS3_TESTING\uff1a\u6700\u65b0\u7f51\u7edc\uff1a - \u5e94\u7528\u7a0b\u5e8f\u8f93\u5165\u70b9\uff1a -  /pp/wait-for-it.sh--t  - \uff06\uff0334; 30\uff06\uff0334; -  localstack\uff1a4572  -   -   -   -  pytest  - \u6d4b\u8bd5/\u73af\u5883\uff1a -  aws_access_key_id = fake  -  aws_default_region = fake  -  aws_secret_access_key = fake localstack\uff1a\u56fe\u7247\uff1alocalstack / localstack\u7aef\u53e3\uff1a - \uff06\uff0334; 4566-4599\uff1a4566-4599\uff06\uff0334;\u7f51\u7edc\uff1a - \u5e94\u7528\u73af\u5883\uff1a -  Services = S3\u7f51\u7edc\uff1a\u5e94\u7528\u7a0b\u5e8f\uff1a\u9a71\u52a8\u7a0b\u5e8f\uff1a\u6865\u63a5\u5668\uff1a\u6865\n \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u518d\u6b21\u6a21\u62dfget_s3\uff0c\u6b64\u65f6\u95f4\u7528\u8fde\u63a5\u5230localstack\u7684s3\u5ba2\u6237\u7aef\u66ff\u6362\u5b83\u3002\n \u6765\u81eaunittest.mock import\u8865\u4e01\u5bfc\u5165boto3\u4ece\u98df\u8c31\u5bfc\u5165\u914d\u65b9\uff0cs3_bucket @ pytest\u5bfc\u5165pytest\u3002\u5939\u5177DEF S3_LOCALSTACK\uff08\uff09\uff1aS3 = BOTO3\u3002\u5ba2\u6237\uff08\uff06\uff0334; s3\uff06\uff0334;\uff0cendpoint_url =\uff06\uff0334; http\uff1a// localstack\uff1a4572\uff06\uff0334;\uff09s3\u3002 CREATE_BUCKET\uff08BUCKET = S3_BUCKET\uff09\u5e26\u8865\u4e01\uff08\uff06\uff0334; recipe.get_s3\uff06\uff0334;\uff0creturn_value = s3\uff09\uff1a\u4ea7\u91cfs3\n \u901a\u8fc7\u8fd9\u79cd\u6a21\u62df\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Moto\u8fd0\u884c\u7684\u76f8\u540c\u6d4b\u8bd5\u3002\n def test_create_and_get\uff08s3_localstack\uff09\uff1a\u98df\u8c31\uff08name =\uff06\uff0334; Nachos\uff06\uff0334;\uff0c\u6307\u793a=\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5408\u5976\u916a\uff06\uff0334;\uff09\u3002\u4fdd\u5b58\uff08\uff09\u914d\u65b9=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334; Nachos\uff06\uff0334;\uff09\u65ad\u8a00\u98df\u8c31\u3002 name ==\uff06\uff0334;\u7389\u7c73\u7247\uff06\uff0334;\u65ad\u8a00\u98df\u8c31\u3002\u8bf4\u660e==\uff06\uff0334;\u5728\u82af\u7247\u4e0a\u878d\u5316\u5976\u916a\uff06\uff0334; def test_get_does_not_exist\uff08s3_localstack\uff09\uff1a\u4f7f\u7528pytest\u3002\u63d0\u5347\uff08S3_Localstack\u3002\u4f8b\u5916\u3002Nosuchkey\uff09\uff1a\u98df\u8c31=\u914d\u65b9\u3002 get_by_name\uff08\uff06\uff0334;\u4e09\u660e\u6cbb\uff06\uff0334;\uff09 \nLopalStack\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u4f46\u5728\u6211\u7684\u673a\u5668\u4e0a\u65cb\u8f6c\u9700\u8981\u8fd130\u79d2\u3002  Moto\u548cLocalStack\u90fd\u975e\u5e38\u5f3a\u5927\uff0c\u6613\u4e8e\u4f7f\u7528\u3002 \u4e24\u4e2a\u89e3\u51b3\u65b9\u6848\u90fd\u505a\u597d\u5b9e\u73b0S3 API\uff0c\u5e76\u4e14\u5b83\u4eec\u8fd8\u652f\u6301\u5176\u4ed6AWS\u670d\u52a1\uff0c\u5305\u62ecEC2\uff0cRDS\uff0cLambda\u7b49\u3002 \u9664\u4e86Python\u4e4b\u5916\uff0c\u5b83\u4eec\u8fd8\u53ef\u4ee5\u7528\u4e8e\u6d4b\u8bd5\u4ee3\u7801\u4ee5\u5176\u4ed6\u8bed\u8a00\u3002  lopalstack\u53ef\u80fd\u662f\u5b9e\u9645\u8fde\u63a5\u5230aws\u7684\u6700\u63a5\u8fd1\u7684\u4e8b\u60c5\uff0c\u4f46\u5bf9\u4e8e\u4e0a\u9762\u63d0\u51fa\u7684\u7b80\u5355\u7528\u4f8b\uff0c\u6211\u65e0\u6cd5\u8bc1\u660e\u65cb\u8f6c\u5806\u6808\u6240\u9700\u7684\u989d\u5916\u5f00\u9500\u548c\u65f6\u95f4\u3002 \u56e0\u6b64\uff0c\u6211\u63a8\u8350Moto\uff0c\u56e0\u4e3a\u5b83\u662f\u6b63\u786e\u5b9e\u73b0S3 API\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u89e3\u51b3\u65b9\u6848\u3002  \u5bf9\u4e8e\u6d4b\u8bd5S3\u6027\u80fd\u7684\u66f4\u590d\u6742\u7684\u9879\u76ee\uff0cLocalStack\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002 Botocore Stubs\u4e0d\u4f1a\u524a\u51cf\u3002  \u8c22\u8c22\u9605\u8bfb\uff01 \u5982\u679c\u60a8\u6709\u4efb\u4f55\u53cd\u9988\uff0c\u6211\u5f88\u4e50\u610f\u6536\u5230\u60a8\u7684\u6d88\u606f - \u5728Twitter\u4e0a\u5173\u6ce8\u6211\u6216\u5728LinkedIn\u4e0a\u7559\u8a00\u3002 ", "note_en": "At some point, every engineer has to decide whether to write tests for something or just ship the feature and move on.\n Under a time crunch, I\u2019ll often write tests for the easy things (e.g. pure functions) or write the tests that provide the biggest bang for their buck (e.g. an end-to-end integration test for the service).\n Testing code that interacts with external systems, like a database or S3, requires a bit more effort. However, important business logic often happens in this code and recently I\u2019ve become more interested in testing it.\n    from  dataclasses  import  dataclass import  json import  boto3 S3_BUCKET  =  &#34;recipes&#34; def  get_s3 ():  return  boto3 . client ( &#34;s3&#34; ) @ dataclass class  Recipe :  name :  str  instructions :  str  @ classmethod  def  get_by_name ( cls ,  name :  str ):  &#34;&#34;&#34;Looks up a Recipe by name Args: name (str): Recipe name Returns a Recipe object &#34;&#34;&#34;  response  =  get_s3 (). get_object ( Bucket = S3_BUCKET ,  Key = name )  response  =  json . loads ( response [ &#34;Body&#34; ]. read ())  return  cls ( response [ &#34;name&#34; ],  response [ &#34;instructions&#34; ])  @ classmethod  def  update_instructions ( cls ,  name :  str ,  new_instructions :  str ):  &#34;&#34;&#34;Updates the instructions for a recipe Args: name (str): Name of the recipe to update new_instructions (str): New instructions &#34;&#34;&#34;  recipe  =  cls . get_by_name ( name )  recipe . instructions  =  new_instructions  return  recipe  @ classmethod  def  delete ( cls ,  name :  str ):  &#34;&#34;&#34;Deletes a recipe Args: name (str): Name of the recipe to delete &#34;&#34;&#34;  get_s3 (). delete_object ( Bucket = S3_BUCKET ,  Key = name )  def  to_json ( self ):  &#34;&#34;&#34;Serialize the recipe to json Returns: str: JSON representation of the Recipe &#34;&#34;&#34;  return  json . dumps ({ &#34;name&#34; :  self . name ,  &#34;instructions&#34; :  self . instructions })  def  save ( self ):  &#34;&#34;&#34;Persists a recipe to S3 &#34;&#34;&#34;  serialized_recipe  =  self . to_json (). encode ( &#34;utf-8&#34; )  get_s3 (). put_object ( Bucket = S3_BUCKET ,  Key = self . name ,  Body = serialized_recipe )\n   Moto is a Python library that makes it easy to mock out AWS services in tests. Let\u2019s use it to test our app.\n First, create a pytest a fixture that creates our S3 bucket. All S3 interactions within the  mock_s3 context manager will be directed at moto\u2019s virtual AWS account.\n import  boto3 from  moto  import  mock_s3 import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3 ():  &#34;&#34;&#34;Pytest fixture that creates the recipes bucket in the fake moto AWS account Yields a fake boto3 s3 client &#34;&#34;&#34;  with  mock_s3 ():  s3  =  boto3 . client ( &#34;s3&#34; )  s3 . create_bucket ( Bucket = S3_BUCKET )  yield  s3\n  def  test_create_and_get ( s3 ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34;\n If we try to fetch a Recipe that doesn\u2019t exist, an exception should be raised. This test covers that scenario.\n  We can also update a Recipe. This test confirms that the data is updated after  save() is called.\n def  test_update ( s3 ):  old_instructions  =  &#34;Melt cheese on chips&#34;  new_instructions  =  &#34;Microwave a plate full of tortilla chips and cheese&#34;  Recipe ( name = &#34;nachos&#34; ,  instructions = old_instructions ). save ()  new_recipe  =  Recipe . update_instructions (  name = &#34;nachos&#34; ,  new_instructions = new_instructions  )  # Nothing changes until you call save()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . instructions  ==  old_instructions  new_recipe . save ()  # Recipe updates after saving  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . instructions  ==  new_instructions\n  def  test_delete ( s3 ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  response  =  s3 . list_objects_v2 ( Bucket = S3_BUCKET )  assert  len ( response [ &#34;Contents&#34; ])  ==  1  assert  response [ &#34;Contents&#34; ][ 0 ][ &#34;Key&#34; ]  ==  &#34;nachos&#34;  Recipe . delete ( &#34;nachos&#34; )  # Data in S3 is gone after deleting the recipe  response  =  s3 . list_objects_v2 ( Bucket = S3_BUCKET )  assert  &#34;Contents&#34;  not  in  response . keys ()\n Overall, moto does a great job of implementing the S3 API. It\u2019s easy to install, feels just like the real S3, and doesn\u2019t require any code changes.\n   Below is a pytest fixture that creates an S3 stub. Since other S3 clients won\u2019t use this stub, we also need to patch  get_s3 and replace its return value with the stub - thereby forcing all S3 clients in the Recipe class to use our stub.\n import  datetime import  json from  dateutil.tz  import  tzutc from  io  import  BytesIO from  unittest.mock  import  patch import  boto3 from  botocore.stub  import  Stubber ,  ANY from  botocore.response  import  StreamingBody import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3_stub ():  &#34;&#34;&#34;Pytest fixture that mocks the get_s3 function with a S3 client stub Yields a Stubber for the S3 client &#34;&#34;&#34;  s3  =  boto3 . client ( &#34;s3&#34; )  stubber  =  Stubber ( s3 )  with  patch ( &#34;recipe.get_s3&#34; ,  return_value = s3 ):  yield  stubber\n Then, we can stub out responses for the  put_object and  get_object S3 APIs. With those stubs in place, we can run the test that creates and subsequently fetches a Recipe.\n def  test_create_and_get ( s3_stub ):  # Stub out the put_object response  # Note: These stubs are incomplete - I omitted things such as  # HTTP headers for brevity  put_object_response  =  {  &#34;ResponseMetadata&#34; :  {  &#34;RequestId&#34; :  &#34;5994D680BF127CE3&#34; ,  &#34;HTTPStatusCode&#34; :  200 ,  &#34;RetryAttempts&#34; :  1 ,  },  &#34;ETag&#34; :  &#39;&#34;6299528715bad0e3510d1e4c4952ee7e&#34;&#39; ,  }  put_object_expected_params  =  { &#34;Bucket&#34; :  ANY ,  &#34;Key&#34; :  ANY ,  &#34;Body&#34; :  ANY }  s3_stub . add_response ( &#34;put_object&#34; ,  put_object_response ,  put_object_expected_params )  # Create the StreamingBody that will be returned by get_object  encoded_message  =  json . dumps (  { &#34;name&#34; :  &#34;nachos&#34; ,  &#34;instructions&#34; :  &#34;Melt cheese on chips&#34; }  ). encode ( &#34;utf-8&#34; )  raw_stream  =  StreamingBody ( BytesIO ( encoded_message ),  len ( encoded_message ))  # Stub out the get_object response  get_object_response  =  {  &#34;ResponseMetadata&#34; :  {  &#34;RequestId&#34; :  &#34;6BFC00970E62BC8F&#34; ,  &#34;HTTPStatusCode&#34; :  200 ,  &#34;RetryAttempts&#34; :  1 ,  },  &#34;LastModified&#34; :  datetime . datetime ( 2020 ,  4 ,  6 ,  5 ,  39 ,  29 ,  tzinfo = tzutc ()),  &#34;ContentLength&#34; :  58 ,  &#34;ETag&#34; :  &#39;&#34;6299528715bad0e3510d1e4c4952ee7e&#34;&#39; ,  &#34;ContentType&#34; :  &#34;binary/octet-stream&#34; ,  &#34;Metadata&#34; :  {},  &#34;Body&#34; :  raw_stream ,  }  get_object_expected_params  =  { &#34;Bucket&#34; :  ANY ,  &#34;Key&#34; :  ANY }  s3_stub . add_response ( &#34;get_object&#34; ,  get_object_response ,  get_object_expected_params )  # Activate the stubber  with  s3_stub :  recipe  =  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; )  recipe . save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34;\n While botocore stubs are functional, I don\u2019t like working with them for several reasons:\n They require a lot more prep. Creating stubs is time-consuming. Even if you run the real code interactively and copy the response, some things need to be replaced - such as the StreamingBody above.\n  They\u2019re fragile and fake. Responses are returned first in, first out - so if you call the S3 APIs in a different order than you added the responses, it will throw an error. If you have a bug in how you call the API, it might not be caught.\n  To make the stubs look somewhat realistic, you have to mock many fields that your code doesn\u2019t care about and bloat your tests with fake responses.\n  They leak implementation details from the module being tested. For example, if a module switched from using  s3.list_objects to  s3.list_objects_v2, the test would fail because it depends on a specific API being called. This creates an unnecessary dependency on the private API of the module, instead of testing the public API.\n  A third option is  localstack, which allows you to bring up an entire AWS cloud stack locally.\n  version :  &#34; 3.7&#34; services :  tests :  image :  s3_testing:latest  networks :  -  app  entrypoint :  -  /app/wait-for-it.sh  -  -t  -  &#34; 30&#34;  -  localstack:4572  -  --  -  pytest  -  test/  environment :  -  AWS_ACCESS_KEY_ID=fake  -  AWS_DEFAULT_REGION=fake  -  AWS_SECRET_ACCESS_KEY=fake  localstack :  image :  localstack/localstack  ports :  -  &#34; 4566-4599:4566-4599&#34;  networks :  -  app  environment :  -  SERVICES=s3 networks :  app :  driver :  bridge\n Next, we mock  get_s3 again and this time replace it with an S3 client that is connected to localstack.\n from  unittest.mock  import  patch import  boto3 import  pytest from  recipe  import  Recipe ,  S3_BUCKET @ pytest . fixture def  s3_localstack ():  s3  =  boto3 . client ( &#34;s3&#34; ,  endpoint_url = &#34;http://localstack:4572&#34; )  s3 . create_bucket ( Bucket = S3_BUCKET )  with  patch ( &#34;recipe.get_s3&#34; ,  return_value = s3 ):  yield  s3\n With this mock in place, we can run the same tests that we ran with moto.\n def  test_create_and_get ( s3_localstack ):  Recipe ( name = &#34;nachos&#34; ,  instructions = &#34;Melt cheese on chips&#34; ). save ()  recipe  =  Recipe . get_by_name ( &#34;nachos&#34; )  assert  recipe . name  ==  &#34;nachos&#34;  assert  recipe . instructions  ==  &#34;Melt cheese on chips&#34; def  test_get_does_not_exist ( s3_localstack ):  with  pytest . raises ( s3_localstack . exceptions . NoSuchKey ):  recipe  =  Recipe . get_by_name ( &#34;sandwich&#34; )\n Localstack is extremely easy to use, but it takes almost 30 seconds to spin up on my machine.\n  Both moto and localstack are very powerful and easy to work with. Both solutions do a good job of implementing the S3 API, and they also support other AWS services including EC2, RDS, Lambda, and more. They can both be used to test code in other languages in addition to Python.\n Localstack is probably the closest thing to actually connecting to AWS, but for my simple use case presented above, I can\u2019t justify the extra overhead and time required to spin up the stack. Therefore, I recommend moto as it\u2019s the most lightweight solution that properly implements the S3 API.\n For more complicated projects that are testing S3 performance, localstack could be a good choice. Botocore stubs don\u2019t make the cut.\n  Thanks for reading! If you have any feedback, I\u2019d love to hear from you - follow me on  Twitter or message me on  LinkedIn.", "posttime": "2021-06-20 02:46:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u6d4b\u8bd5,s3", "title": "\u5982\u4f55\u5728Python\u4e2d\u6d4b\u8bd5S3 ", "title_en": "How to Test S3 in Python", "transed": 1, "url": "https://www.sanjaysiddhanti.com/2020/04/08/s3testing/", "via": "", "real_tags": ["python", "\u6d4b\u8bd5", "s3"]}, {"category": "", "categoryclass": "", "imagename": "9d432380c4c2b578e7f0e8c15712b3a6.jpeg", "infoid": 1066919, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5feb\u901f\u4e0a\u5347\u7684\u4f4f\u623f\u6210\u672c\u6709\u52a9\u4e8e\u5c06\u901a\u8d27\u81a8\u80c0\u63a8\u541113\u5e74\u3002\u4f46\u653f\u5e9c\u7edf\u8ba1\u5b66\u5bb6\u8ffd\u8e2a\u6d88\u8d39\u54c1\u4ef7\u683c\u7684\u65b9\u5f0f\u53ef\u80fd\u7f3a\u5c11\u6700\u8fd1\u51e0\u4e2a\u6708\u7206\u70b8\u6027\u7684\u623f\u4ef7\u589e\u957f\u3002\n  \u6839\u636e\u52b3\u5de5\u7edf\u8ba1\u5c40\u5468\u56db\u53d1\u5e03\u7684\u6708\u5ea6\u5468\u56db\u53d1\u5e03\u7684\u6700\u65b0\u7248\u672c\u7684\u6700\u65b0\u7248\u672c\uff0c\u4f4f\u623f\u6210\u672c\u57284\u6708\u81f35\u6708\u4e4b\u95f4\u589e\u957f0.4\uff05\u3002\u4e0e\u53bb\u5e74\u76f8\u6bd4\uff0c\u79df\u623f\u8005\u548c\u623f\u4e3b\u76f8\u4f3c\u7684\u4f4f\u623f\u4ef7\u683c\u4e0a\u6da82.2\uff05\u3002\n  \u603b\u5171\uff0c\u623f\u4ef7\u7684\u4e0a\u6da8\u536010\u6708\u4efd\u901a\u80c0\u603b\u4f53\u4e0a\u6da8\u7684\u4e00\u5b63\u5ea6\uff0c\u53cd\u6620\u4e86\u653f\u5e9c\u7ecf\u6d4e\u5b66\u5bb6\u5982\u4f55\u91cd\u91cf\u8fd9\u4e00\u652f\u51fa\u7c7b\u522b\u3002\n  \u4f46\u5982\u679c\u8fd9\u662f2.2\uff05\u7684\u6570\u5b57\u4f3c\u4e4e\u662f\u6839\u636e\u81ea\u5df1\u7684\u8d2d\u4e70\u6216\u9500\u552e\u623f\u5c4b\u7684\u7ecf\u9a8c\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u60ca\u559c\u3002\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u540c\u610f\u623f\u4ef7\u589e\u957f\u7684\u901f\u5ea6\u3002\n    \u5176\u4ed6\u6570\u636e\u8868\u660e\uff0c\u623f\u4ef7\u5347\u503c\u548c\u79df\u8d41\u589e\u957f\u7684\u901f\u5ea6\u8981\u5feb\u5f97\u591a\uff0c\u4e14\u8d85\u8fc7\u8be5\u6c34\u5e73\u3002\n  3\u6708\u4efd\u6848\u4ef6 - \u6d77\u8fd0\u623f\u4ef7\u6307\u6570\u7684\u6700\u65b0\u62a5\u544a\u8868\u660e\uff0c\u81ea2005\u5e74\u4ee5\u6765\u7684\u6700\u5927\u589e\u957f\u7387\u6da8\u5e45\u8d85\u8fc713\uff05\u4ee5\u4e0a\u3002\n  \u90a3\u4e48CPI\u5982\u4f55\u8ba1\u7b97\u4f4f\u623f\uff1f\u9996\u5148\uff0c\u4f4f\u623f\u5355\u4f4d\u672c\u8eab\u4e0d\u5305\u62ecCPI\u5e02\u573a\u7bee\u5b50\u3002 \n\u5176\u6b21\uff0c\u79df\u8d41\u6570\u636e\u5efa\u7acb\u6bcf\u516d\u4e2a\u6708\u7684\u4ef7\u683c\u5982\u4f55\u53d8\u5316\u3002\u6bcf\u6708\u6216\u53cc\u6708\u5730\u6536\u96c6\u5927\u591a\u6570\u5176\u4ed6CPI\u9879\u76ee\u7684\u8ba1\u7b97\u3002\n  \u201c\u4e0e\u5927\u591a\u6570\u5176\u4ed6\u7ecf\u6d4e\u7cfb\u5217\u4e00\u6837\uff0cCPI\u89c6\u4e3a\u623f\u5c4b\u5355\u4f4d\u4f5c\u4e3a\u8d44\u672c\uff08\u6216\u6295\u8d44\uff09\u8d27\u7269\u800c\u4e0d\u662f\u4f5c\u4e3a\u6d88\u8d39\u7269\u54c1\uff0c\u201d\u52b3\u5de5\u7edf\u8ba1\u5c40\u8868\u793a\u3002 \u201c\u652f\u51fa\u8d2d\u4e70\u548c\u6539\u8fdb\u623f\u5c4b\u548c\u5176\u4ed6\u4f4f\u623f\u5355\u4f4d\u662f\u6295\u8d44\u800c\u4e0d\u662f\u6d88\u8d39\u3002\u201d\n  \u201c\u79df\u7528\u4f4f\u623f\u4f4f\u623f\u7684\u4f4f\u6240\u7684\u6210\u672c\u662f\u79df\u91d1\u3002\u5bf9\u4e8e\u4e1a\u4e3b\u5360\u7528\u7684\u5355\u4f4d\uff0c\u5e87\u62a4\u6240\u7684\u6210\u672c\u662f\u6240\u6709\u8005\u5360\u7528\u8005\u5982\u679c\u4ed6\u4eec\u79df\u623f\u7684\u623f\u5c4b\u5fc5\u987b\u652f\u4ed8\u7684\u9690\u542b\u79df\u91d1\uff0c\u201c\u5b83\u589e\u52a0\u4e86\u3002\n   \u653f\u5e9cPollsters\u8be2\u95ee\u623f\u4e3b\uff1a\u201c\u5982\u679c\u6709\u4eba\u4eca\u5929\u79df\u7528\u4f60\u7684\u5bb6\uff0c\u4f60\u8ba4\u4e3a\u6bcf\u6708\uff0c\u65e0\u5bb6\u5177\u548c\u6ca1\u6709\u516c\u7528\u4e8b\u4e1a\u4f1a\u79df\u591a\u5c11\u94b1\uff1f\u201d\n  \u4ed6\u4eec\u8be2\u95ee\u79df\u623f\u4eba\uff1a\u201c\u60a8\u7684[\u5bb6\u5ead]\u7684\u79df\u8d41\u8d39\u7528\u662f\u4ec0\u4e48\uff0c\u5305\u62ec\u8f66\u5e93\u548c\u505c\u8f66\u8bbe\u65bd\u7684\u4efb\u4f55\u989d\u5916\u8d39\u7528\uff1f\u4e0d\u5305\u62ec\u5f53\u5730\uff0c\u5dde\u6216\u8054\u90a6\u673a\u6784\u7684\u76f4\u63a5\u4ed8\u6b3e\u3002\u8fd9\u4e2a\u5c01\u9762\u662f\u4ec0\u4e48\u65f6\u95f4\uff1f\u201c\n   \u201c\u623f\u4ef7\u5347\u503c\u7387\u5e76\u4e0d\u7c7b\u4f3c\u4e8e\u901a\u8d27\u81a8\u80c0\uff0c\u201dTitle Insurance Company First American Financial Services FAF\u7684\u9996\u5e2d\u200b\u200b\u7ecf\u6d4e\u5b66\u5bb6Mark Fleming\u8bf4\u3002\n  \u5f00\u59cb\uff0c\u4f4f\u623f\u662f\u4e00\u4e2a\u975e\u5e38\u57fa\u672c\u7684\u5fc5\u8981\u6027\u3002 \u201c\u5bf9\u907f\u96be\u6240\u7684\u9700\u6c42\u4e0d\u4f1a\u6d88\u5931 - \u5b83\u53ea\u662f\u79fb\u52a8\uff0c\u201d\u5f17\u83b1\u660e\u8bf4\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u822a\u7a7a\u516c\u53f8\u7684\u4ef7\u683c\u98d9\u53477\uff05\uff0c\u5c31\u50cf\u8fc7\u53bb\u4e00\u4e2a\u6708\u4e00\u6837\uff0c\u5bb6\u5ead\u53ef\u4ee5\u53cd\u5bf9\u90a3\u4e2a\u590f\u5929\u7684\u9003\u4ea1\u3002 \n\u5f53\u6d89\u53ca\u5230\u4f4f\u623f\u65f6\uff0c\u9009\u62e9\u5e76\u4e0d\u662f\u90a3\u4e48\u7b80\u5355\u3002\u968f\u7740\u5e87\u62a4\u6240\u7684\u6210\u672c\u589e\u52a0\uff0c\u56fd\u5bb6\u4f4e\u6536\u5165\u4f4f\u623f\u8054\u76df\u7814\u7a76\u526f\u603b\u88c1Andrew Aurand\u8868\u793a\uff0c\u5b83\u53ef\u4ee5\u5bf9\u201c\u6781\u4f4e\u6536\u5165\u79df\u623f\u8005\u7684\u7ea7\u8054\u6548\u5e94\u201d\u3002\n    \u6765\u81eaAurand\u7684\u7ec4\u7ec7\u7684\u7814\u7a76\u8868\u660e\uff0c\u8d85\u8fc7920\u4e07\u201c\u6781\u4f4e\u7684\u6536\u5165\u201d\u79df\u623f\u8005\u56e0\u4f4f\u623f\u6210\u672c\u8d1f\u62c5\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u5728\u5e87\u62a4\u76f8\u5173\u8d39\u7528\u4e0a\u82b1\u8d39\u4e86\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e00\u7684\u6536\u5165\u3002\u8fd9\u4e9b\u5bb6\u5ead\u4e2d\u7684\u8bb8\u591a\u5bb6\u5ead\u5728\u4f4f\u623f\u4e0a\u82b1\u8d39\u4e8650\uff05\uff0c\u7559\u4e0b\u4e86\u5176\u4ed6\u8d2d\u4e70\u7684\u5c11\u91cf\u8d44\u91d1\u3002\n  \u8fd9\u4e9b\u5bb6\u5ead\u7684\u66ff\u4ee3\u65b9\u6848\u5c06\u5728\u4ed6\u4eec\u7684\u5934\u4e0a\u5931\u53bb\u5c4b\u9876\u3002\u8fd1\u5e74\u6765\uff0c\u8fd9\u5df2\u6210\u4e3a\u8bb8\u591a\u7f8e\u56fd\u4eba\u7684\u73b0\u5b9e\u3002\u7279\u6717\u666e\u653f\u5e9c\u53d1\u5e03\u76842019\u5e74\u7814\u7a76\u4f30\u8ba1\uff0c\u5168\u56fd\u5404\u5730\u6bcf\u665a\u7761\u8d85\u8fc7500,000\u4eba\uff0c\u800c\u8bb8\u591a\u957f\u6c99\u53d1\u51b2\u6d6a\u6216\u5229\u7528\u5e87\u62a4\u6240\u65e0\u4e0e\u4f26\u6bd4\u7684\u4eba\u3002\n  \u4e0e\u6b64\u540c\u65f6\uff0c\u5bf9\u4e8e\u62e5\u6709\u81ea\u5df1\u7684\u5bb6\u56ed\u7684\u4eba\uff0c\u8d2d\u4e70\u7269\u4e1a\u4e0e\u4e70\u5355\u4e0d\u4e00\u6837\uff0c\u6bd4\u5982\u9999\u8549\u3002\u62e5\u6709\u9999\u8549\u4e0d\u4f1a\u5728\u957f\u671f\u7684\u60c5\u51b5\u4e0b\u5728\u7ecf\u6d4e\u4e0a\u53d7\u76ca\uff0c\u800c\u60a8\u53ef\u4ee5\u671f\u5f85\u770b\u5230\u5176\u4ef7\u503c\u589e\u52a0\u5e76\u76c8\u5229\u3002\u4f46\u623f\u5c4b\u4e0d\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u6295\u8d44\u8d44\u4ea7 - \u8fd9\u662f\u4e24\u8005\u7684\u6df7\u5408\u3002\n    \u7531\u4e8e\u5b9e\u9645\u7684\u7ed3\u6784\u672c\u8eab\u53ef\u80fd\u66f4\u503c\u5f97\u5347\u9ad8\uff0c\u56e0\u4e3a\u52b3\u52a8\u529b\u548c\u6728\u6750\u7684\u6210\u672c\u4e0a\u5347\uff0c\u800c\u4e14\u56e0\u4e3a\u4eba\u4eec\u8ba4\u4e3a\u5b83\u4f5c\u4e3a\u8d44\u672c\u6295\u8d44\u7684\u4ef7\u503c\u4e5f\u662f\u5982\u6b64\u3002\n  \u56e0\u6b64\uff0c\u7ecf\u6d4e\u5b66\u5bb6\u6216\u653f\u5e9c\u7edf\u8ba1\u65e5\u7684\u5347\u7ea7\u623f\u4ef7\u7684\u65b9\u5f0f\u53ef\u80fd\u5b58\u5728\u4e0d\u5339\u914d\uff0c\u4ee5\u53ca\u5bf9\u6d88\u8d39\u8005\u7684\u610f\u601d\u662f\u4ec0\u4e48\u610f\u601d\u3002\n  \u201c\u5728\u4ef7\u683c\u4e0a\u6da8\u7684\u5e02\u573a\u73af\u5883\u4e2d\u5982\u6b64\u8fc5\u901f\u5730\u8d2d\u4e70\u623f\u5c4b\uff0c\u7ecf\u6d4e\u5b66\u5bb6\u4f1a\u8bf4\uff0c\u5168\u56fd\u5bb6\u5ead\u5efa\u8bbe\u8005\u534f\u4f1a\u9996\u5e2d\u7ecf\u6d4e\u5b66\u5bb6\u7f57\u4f2f\u7279\u00b7\u8fea\u8328\uff08Robert Dietz\uff09\u8868\u793a\u3002 \u201c\u4f46\u662f\u5bf9\u4e8e\u4e70\u65b9\u6765\u8bf4\uff0c\u5b83\u4ee3\u8868\u4e86\u66f4\u9ad8\u7684\u751f\u6d3b\u6210\u672c\u3002\u201d \n\u4eba\u4eec\u5bf9\u5927\u591a\u6570\u5176\u4ed6\u4ea7\u54c1\u4e0d\u540c\u5730\u4f53\u9a8c\u901a\u8d27\u81a8\u80c0\u7387\uff0c\u8fd9\u4f7f\u5f97\u8861\u91cf\u6311\u6218\u3002\n  \u5bf9\u4e8e\u5178\u578b\u7684\u623f\u4e3b\uff0c\u4ed6\u4eec\u7684\u4f4f\u623f\u6210\u672c\u53ef\u80fd\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u6ca1\u6709\u592a\u591a\u53d8\u5316\u3002\n  \u201c\u5982\u679c\u60a8\u6709\u56fa\u5b9a\u7684\u62b5\u62bc\u8d37\u6b3e\uff0c\u5728\u60a8\u7684\u5bb6\u4e2d\uff0c\u540c\u5e74\u5e74\uff0c\u60a8\u7684\u4f4f\u6240\u66f4\u6539\u7684\u751f\u6d3b\u8d39\u7528\u662f\u591a\u5c11\uff1f\u4e0d\u662f\u5f88\u591a\uff0c\u201c\u5f17\u83b1\u660e\u8bf4\u3002 \u201c\u552f\u4e00\u4e00\u5e74\u591a\u5e74\u6765\u7684\u7a0e\u6536\u548c\u4fdd\u9669\u7684\u552f\u4e00\u4e8b\u60c5\u3002\u201d\n  \u5373\u4f7f\u6709\u79df\u623f\u8005\uff0c\u4f4f\u623f\u7684\u4ef7\u683c\u4e5f\u4e0d\u4f1a\u4ece\u4e00\u4e2a\u6708\u5f00\u59cb\u6216\u66f4\u4f4e\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u52b3\u52a8\u7edf\u8ba1\u5c40\u7edf\u8ba1\u5c40\u6bd4CPI\u7bee\u5b50\u4e2d\u7684\u5927\u591a\u6570\u5176\u4ed6\u7269\u54c1\u66f4\u5c11\u6536\u96c6\u4f4f\u623f\u6570\u636e\u3002\n  \u5bf9\u4e8e\u79df\u623f\u548c\u4e70\u5bb6\u6765\u8bf4\uff0c\u5f53\u60a8\u7684\u751f\u6d3b\u5b89\u6392\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u60a8\u9047\u5230\u4e86\u4e0d\u65ad\u53d8\u5316\u7684\u6210\u672c\uff1a\u5f53\u60a8\u642c\u5230\u65b0\u7684\u5bb6\u4e2d\u65f6\uff0c\u7b7e\u7f72\u65b0\u7684\u79df\u7ea6\u6216\u518d\u878d\u8d44\u60a8\u7684\u62b5\u62bc\u8d37\u6b3e\u3002\n    \u4f46\u7f8e\u56fd\u4eba\u786e\u5b9e\u9700\u8981\u77e5\u9053\u623f\u5c4b\u6210\u672c\u4e0a\u5347\u6216\u4e0b\u964d\u7684\u7a0b\u5ea6 - \u5e76\u975e\u6700\u5c11\u7684\u662f\uff0c\u56e0\u4e3a\u4f4f\u5b85\u623f\u5730\u4ea7\u6784\u6210\u4e86\u8fd9\u4e00\u5927\u90e8\u5206\u7684\u56fd\u5bb6\u7ecf\u6d4e\u3002\n  \u653f\u5e9c\u7684\u6d88\u8d39\u8005\u4ef7\u683c\u6307\u6570\u8ba1\u7b97\u201c\u5360\u7528\u79df\u91d1\u201d - \u57fa\u672c\u4e0a\uff0c\u623f\u4e3b\u652f\u4ed8\u4f4f\u623f\u7684\u91d1\u989d\u800c\u4e0d\u662f\u652f\u4ed8\u623f\u4e1c\u3002 \n\u5982\u679c\u6ca1\u6709\u8fd9\u6837\u505a\uff0cGDP\u5b9e\u9645\u4e0a\u4f1a\u5815\u843d\uff0cDietz\u8bf4\uff0c\u201c\u56e0\u4e3a\u79df\u623f\u6240\u652f\u4ed8\u7684\u5e02\u573a\u79df\u8d41\u7684\u91d1\u94b1\u7a81\u7136\u6d88\u5931\u3002\u201d\n  \u4e3a\u5f25\u5408\u8fd9\u4e00\u6311\u6218\uff0c\u653f\u5e9c\u4f9d\u8d56\u8c03\u67e5\u6570\u636e\uff0c\u4ee5\u751f\u4ea7\u79df\u623f\u548c\u623f\u4e3b\u7684\u4f4f\u623f\u6210\u672c\u4f30\u8ba1\u3002\u5728\u79df\u623f\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u53ea\u662f\u8be2\u95ee\u4ed6\u4eec\u652f\u4ed8\u591a\u5c11\u4f4f\u623f\u3002\n  \u4f46\u4e1a\u4e3b\u5e76\u6ca1\u6709\u88ab\u95ee\u5230\u4ed6\u4eec\u7684\u62b5\u62bc\u8d37\u6b3e\u662f\u4ec0\u4e48 - \u6bd5\u7adf\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u6709\u62b5\u62bc\u8d37\u6b3e\u3002\u76f8\u53cd\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u88ab\u8981\u6c42\u4f30\u8ba1\u4ed6\u4eec\u80fd\u591f\u6536\u53d6\u591a\u5c11\u8d39\u7528\u4ee5\u79df\u8d41\u4ed6\u4eec\u5f53\u524d\u7684\u5bb6\u3002\n  \u653f\u5e9c\u7edf\u8ba1\u4eba\u5b9a\u671f\u8c03\u67e5\u540c\u4e00\u4f19\u4f34\u4eec\u7684\u7f8e\u56fd\u4eba\uff0c\u4ee5\u4ea7\u751f\u4ed6\u4eec\u7684\u53d1\u73b0\u548c\u8ddf\u8e2a\u53d8\u5316\uff0c\u4ee5\u4f30\u8ba1\u4f4f\u623f\u6210\u672c\u3002\n  \u201c\u623f\u4ef7\u666e\u904d\u5b58\u5728\u201d\u7684\u901a\u8d27\u81a8\u80c0\u548c[\u53d8\u5316]\uff0cKimc\u603b\u88c1\u517c\u79c1\u7acb\u623f\u5730\u4ea7\u6295\u8d44\u516c\u53f8Kimc\u603b\u88c1\u517c\u9996\u5e2d\u6295\u8d44\u5b98Jonathan Fellell\u8868\u793a\u3002\u4ed6\u8865\u5145\u8bf4\uff0c\u623f\u4ef7\u4e0a\u6da8\u201c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u8d85\u51fa\u4e86\u901a\u8d27\u81a8\u80c0\u201d\u3002\n  \u7136\u800c\uff0c\u4e00\u4e9b\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u4f4e\u4f30\u548c/\u6216\u907f\u514d\u8bc6\u522b\u4f4f\u623f\u5e02\u573a\u53d1\u751f\u7684\u771f\u6b63\u901a\u80c0\u3002\n  Fannie Mae Fnma\u7684\u65b0\u5206\u6790\uff0c+ 2.26\uff05\u8868\u660e\uff0c\u5f53\u623f\u4ef7\u5b9e\u9645\u4e0a\u4e0a\u5347\u65f6\uff0c\u901a\u5e38\u5b58\u5728\u6ede\u540e\uff0c\u5f53\u4ef7\u683c\u589e\u957f\u53cd\u6620\u5728\u6d88\u8d39\u8005\u4ef7\u683c\u6307\u6570\u7b49\u901a\u8d27\u81a8\u80c0\u62a5\u544a\u4e2d\u3002 \n\u4f4f\u623f\u504f\u597d\u548cCovid-19\u5927\u6d41\u884c\u5f15\u8d77\u7684\u9700\u6c42\u7684\u8f6c\u53d8\u4e5f\u4f7f\u6211\u4eec\u8861\u91cf\u901a\u80c0\u5728\u4f4f\u623f\u5e02\u573a\u4e2d\u7684\u6548\u679c\u7684\u80fd\u529b\u590d\u6742\u5316\u3002\n  \u5bcc\u88d5\u7684\u7f8e\u56fd\u4eba\uff0c\u5176\u4e2d\u8bb8\u591a\u4eba\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u80fd\u591f\u8fdc\u7a0b\u5de5\u4f5c\uff0c\u9009\u62e9\u5c06\u4e3b\u8981\u57ce\u5e02\u79fb\u5f00\u5230\u90ca\u533a\u7684\u66f4\u5927\uff0c\u66f4\u4fbf\u5b9c\u7684\u5bb6\uff0c\u5f80\u5f80\u8282\u7701\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7684\u94b1\u3002\u56e0\u6b64\uff0cPricier\u793e\u533a\u7684\u79df\u91d1\u7387\u4e0b\u964d\u3002\n  \u4f46\u5728\u66f4\u5b9e\u60e0\u7684\u5730\u533a\uff0c\u79df\u91d1\u5b9e\u9645\u4e0a\u589e\u52a0\u4e86\u3002\u7531\u4e8e\u5927\u6d41\u884c\u800c\u5931\u53bb\u4e86\u5de5\u4f5c\u7684\u7f8e\u56fd\u4eba\u8d76\u7d27\u627e\u5230\u66f4\u4fbf\u5b9c\u7684\u4f4f\u623f\uff0c\u63a8\u52a8\u697c\u5b87\u6700\u4fbf\u5b9c\u7684\u516c\u5bd3\u548c\u90ca\u533a\u7684\u623f\u5c4b\u79df\u91d1\u3002\n  \u8fd9\u4e9b\u6548\u679c\u5f00\u59cb\u6d88\u6563\uff0c\u4f46\u5c06\u7ee7\u7eed\u79f0\u4e3a\u50cf\u6d88\u8d39\u8005\u4ef7\u683c\u6307\u6570\u4e00\u6837\u7684\u5b98\u65b9\u63aa\u65bd\uff0c\u56e0\u4e3a\u5f53\u65f6\u53d1\u751f\u7684\u65f6\u95f4\u6ede\u540e\u3002\n    \u6240\u4ee5\u5916\u58f3\u8fc5\u901f\u53d8\u5f97\u8d8a\u6765\u8d8a\u8d35\u5417\uff1f\u7ecf\u6d4e\u5b66\u5bb6\u540c\u610f\u7684\u7b54\u6848\u662f\u80af\u5b9a\u7684\u3002\u7b2c\u4e00\u4e2a\u7f8e\u56fd\u91d1\u878d\u670d\u52a1\u6709\u81ea\u5df1\u7684\u63aa\u65bd\uff0c\u771f\u6b63\u7684\u623f\u4ef7\u6307\u6570\uff0c\u8fd9\u4e0e\u7f8e\u56fd\u4eba\u8d1f\u62c5\u5f97\u8d77\u57fa\u4e8e\u73b0\u884c\u5229\u7387\u548c\u5bb6\u5ead\u6536\u5165\u7684\u7269\u4e1a\u7684\u80fd\u529b\u5c06\u6807\u79f0\u4ef7\u683c\u6536\u76ca\u76f8\u6bd4\u3002\n  \u5f17\u83b1\u660e\u8bf4\uff0c\u57282018\u5e74\u81f32020\u5e74\u4e4b\u95f4\u4e0e2020\u5e74\u521d\uff0c\u771f\u6b63\u7684\u623f\u4ef7\u6307\u6570\u6b63\u5728\u4e0b\u964d\uff0c\u56e0\u4e3a\u7f8e\u56fd\u4eba\u7684\u8d2d\u4e70\u529b\u901f\u5ea6\u5347\u9ad8\uff0c\u5f17\u83b1\u660e\u8bf4\u3002\u4e0d\u518d\u662f\u8fd9\u79cd\u60c5\u51b5\u3002\n  \u201c\u901a\u8d27\u7d27\u7f29\u53d8\u6210\u4e86\u901a\u8d27\u81a8\u80c0\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u5229\u7387\u5df2\u7ecf\u4e0a\u6da8 - \u4ed6\u4eec\u53ea\u4e0a\u6da8\u4e86\u4e00\u70b9\u70b9 - \u4f46\u7531\u4e8e\u623f\u4ef7\u53ea\u662f\u75af\u72c2\uff0c\u201d\u5f17\u83b1\u660e\u8bf4\u3002 \n\u623f\u4ef7\u4e0a\u6da8\u7684\u539f\u56e0\u5982\u6b64\u4e4b\u5feb\uff0c\u76f8\u5f53\u7b80\u5355\u3002\u7ecf\u6d4e\u8870\u9000\u5de8\u5927\u540e\uff0c\u5bb6\u5ead\u5efa\u7b51\u6d3b\u52a8\u90fd\u9664\u4e86\u5efa\u7b51\u884c\u4e1a\u6062\u590d\u65f6\uff0c\u6240\u6709\u4eba\u90fd\u8fbe\u5230\u4e86\u4e00\u4e2a\u505c\u6ede\u4e0d\u524d\u3002\n    \u56e0\u6b64\uff0c\u65b0\u623f\u5efa\u8bbe\u5e76\u6ca1\u6709\u4e0e\u4eba\u53e3\u589e\u957f\u548c\u65b0\u5bb6\u5ead\u7684\u5f62\u6210\u4fdd\u6301\u6b65\u4f10\u3002\n  \u8fd9\u8ba9\u623f\u5730\u4ea7\u5e02\u573a\u5e26\u6765\u4e25\u91cd\u77ed\u7f3a\uff0c\u5c31\u50cf\u5343\u79a7\u4e00\u4ee3\u5f00\u59cb\u7ed3\u5a5a\u5e76\u62e5\u6709\u5b69\u5b50 - \u73b0\u573a\u8d2d\u4e70\u5174\u8da3\u7684\u4f20\u7edf\u6807\u5fd7\u3002\n  \u968f\u7740\u5927\u6d41\u884c\uff0c\u9065\u63a7\u5de5\u4f5c\u548c\u4f4e\u5229\u7387\u7684\u8f6c\u53d8\u53ea\u4f1a\u52a0\u5267\u4e86\u4e8b\u7269\u3002\n  \u89e3\u51b3\u4f4f\u623f\u5931\u63a7\u901a\u8d27\u81a8\u80c0\u7684\u4e3b\u8981\u89e3\u51b3\u65b9\u6848\u5c06\u662f\u5efa\u9020\u66f4\u591a\u7684\u5bb6\u56ed - \u800c\u4e0d\u662f\u5b8c\u6210\u7684\u4e1c\u897f\u3002 \u201c\u6211\u4eec\u9762\u4e34\u5728\u4f4f\u5b85\u5efa\u7b51\u884c\u4e1a\u4f9b\u5e94\u65b9\u9762\u7684\u4e00\u4e9b\u6311\u6218\u5c06\u6301\u7eed\u52302022\u5e74\uff0c\u201dDietz\u8bf4\u3002\n  \u8fd9\u4e9b\u6311\u6218\u4ece\u6728\u6750\u9ad8\u6210\u672c\u5230\u7f3a\u4e4f\u6280\u672f\u5de5\u4eba\u6765\u5b8c\u6210\u5efa\u7b51\u9879\u76ee\u7684\u6311\u6218\u3002\u53e6\u4e00\u4e2a\u56e0\u7d20\uff1a\u5168\u56fd\u5404\u5730\u7684\u5206\u533a\u89c4\u5b9a\u9632\u6b62\u5728\u8bb8\u591a\u57ce\u5e02\u5efa\u8bbe\u66f4\u5bc6\u96c6\u7684\u4f4f\u623f\uff0c\u5728\u6b64\u8fc7\u7a0b\u4e2d\u6709\u6548\u5730\u63d0\u9ad8\u623f\u4ef7\u548c\u79df\u91d1\u3002\n  \u6700\u540e\uff0c\u5355\u72ec\u7684\u65b0\u5bb6\u5ead\u5efa\u7b51\u4e0d\u4f1a\u8ba9\u6240\u6709\u7f8e\u56fd\u4eba\u66f4\u5bb9\u6613\u3002\u7531\u4e8e\u6210\u672c\u9ad8\uff0c\u5efa\u8bbe\u8005\u66f4\u5bb9\u6613\u6784\u5efa\u66f4\u6602\u8d35\u7684\u623f\u5c4b\uff0c\u5373\u4f7f\u9700\u6c42\u548c\u7ade\u4e89\u5bf9\u5165\u95e8\u7ea7\u5c5e\u6027\u6700\u5f3a\u3002 \n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u623f\u5730\u4ea7\u5e02\u573a\u5e95\u5c42\u4e2d\u589e\u52a0\u7684\u6d53\u5ea6\u6b63\u5728\u63a8\u52a8\u90a3\u4e9b\u6700\u4e0d\u8d77\u7684\u4eba\u7684\u4ef7\u683c\u3002  \u201c\u6709\u8fd9\u4e2a\u8bba\u70b9\uff0c\u5982\u679c\u4f60\u53ea\u662f\u5efa\u7acb\u66f4\u591a\u7684\u4f9b\u5e94\u6765\u6ee1\u8db3\u9700\u6c42\uff0c\u5b83\u5c06\u6700\u7ec8\u6709\u52a9\u4e8e\u6781\u4f4e\u548c\u6781\u4f4e\u7684\u6536\u5165\u79df\u623f\u8005\uff0c\u201dAurand\u8bf4\u3002 \u201c\u4f46\u5e02\u573a\u4e0d\u4f1a\u5145\u5206\u670d\u52a1\uff0c\u4e3b\u8981\u662f\u6781\u4f4e\u7684\u6536\u5165\u79df\u623f\u3002\u201d ", "note_en": "Fast-rising housing costs have helped to push inflation to a 13-year high. But the way that government statisticians track the price of consumer goods may be missing just how explosive home-price growth has been in recent months.\n  Housing costs rose by 0.4% between April and May, according to  the latest edition of the monthly consumer price index released Thursday by the Bureau of Labor Statistics. Compared with last year, housing prices for renters and homeowners alike were up 2.2%.\n  Altogether, the rise in housing prices  accounted for over a quarter of the overall increase in inflation in May, a reflection of how heavily government economists weight this spending category.\n  But if that 2.2% figure seems off based on your own experience of buying or selling a home, it\u2019s not a surprise. Not everyone agrees on the rate of house-price growth.\n    Other data suggested a much faster pace of home price appreciation and rental growth, well in excess of that level.\n  The  most recent report from the Case-Shiller Home Price Index for March showed that home prices were up more than 13%, the largest rate of growth since 2005.\n  So how does the CPI calculate housing? Firstly, housing units themselves are not included the CPI market basket.\n  Secondly, rental data to establish how prices are changing are collected every six months. The calculations for most other CPI items are collected monthly or bimonthly.\n  \u201cLike most other economic series, the CPI views housing units as capital (or investment) goods and not as consumption items,\u201d  the Bureau of Labor Statistics says. \u201cSpending to purchase and improve houses and other housing units is investment and not consumption.\u201d\n  \u201cThe cost of shelter for renter-occupied housing is rent. For an owner-occupied unit, the cost of shelter is the implicit rent that owner occupants would have to pay if they were renting their homes,\u201d it adds.\n   The government pollsters ask homeowners: \u201cIf someone were to rent your home today, how much do you think it would rent for monthly, unfurnished and without utilities?\u201d\n  And they ask renters: \u201cWhat is the rental charge to your [household] for this unit including any extra charges for garage and parking facilities? Do not include direct payments by local, state or federal agencies. What period of time does this cover?\u201d\n   \u201cThe rate of house price appreciation is not akin to inflation,\u201d said Mark Fleming, chief economist at title insurance company First American Financial Services  FAF.\n  For a start, housing is a very basic necessity. \u201cDemand for shelter doesn\u2019t go away \u2014 it just moves around,\u201d Fleming said. In other words, if the price of airfares skyrockets 7%, as it did over the past month, families could decide against going on that summer getaway.\n  That choice isn\u2019t so simple when it comes to housing. As the cost of shelter increases it can have a \u201ccascading effect on extremely low-income renters,\u201d said Andrew Aurand, vice president for research at the National Low Income Housing Coalition.\n    Research from Aurand\u2019s organization has shown that more than 9.2 million \u201cextremely low-income\u201d renters are cost burdened by their housing, meaning they spent more than a third of their income on shelter-related expenses. Many of these households spend upwards of 50% on housing, leaving little money behind for other purchases.\n  The alternative for these households would be losing the roof over their heads. In recent years, that has become the reality for many Americans. A  2019 study released by the Trump administration estimated that more than 500,000 people sleep outdoors each night across the country, while many more couch surf or utilize shelters for unhoused people.\n  Meanwhile, for people who own their homes, buying a property isn\u2019t the same as buying, say, a banana. Owning that banana won\u2019t benefit you financially in the long-run, whereas with a house you can expect to see its value increase and to profit off that. But a home isn\u2019t a pure investment asset like a stock \u2014 it\u2019s a mix of both.\n    Home prices can rise both because the actual structure itself may be worth more \u2014 thanks to the rising cost of labor and lumber \u2014 but also because people see value in it as a capital investment.\n  As a result, there can be a mismatch in the way economists or government statistician view rising home prices, and what that means to a consumer.\n  \u201cIn a market environment where prices are rising so quickly to buy a home the economist would say that\u2019s the increase in the price of the capital good,\u201d said Robert Dietz, chief economist at the National Association of Home Builders. \u201cBut to the buyer, it represents a higher cost of living.\u201d\n   People experience inflation vis-\u00e0-vis housing differently to most other products, and that makes it a challenging to measure.\n  For the typical homeowner, their housing costs likely haven\u2019t changed too much over the past year.\n  \u201cIf you have a fixed mortgage, on your home, year over year, how much does your cost of living in that home change? Not very much,\u201d Fleming said. \u201cThe only things that change year over year are your escrows for taxes and insurance.\u201d\n  Even with renters, the price of housing doesn\u2019t shift higher or lower from month to month. That\u2019s why the Bureau of Labor Statistics collects housing data more infrequently than most other items in the CPI basket of goods.\n  For renters and buyers, you encounter the changing cost when something about your living arrangement changed: When you move to a new home, sign a new lease or refinance your mortgage.\n    But Americans do need to know how much housing costs are rising or falling \u2014 not the least of which because residential real-estate makes up such a huge portion of the nation\u2019s economy.\n  The government\u2019s Consumer Price Index calculates the \u201cimputed rent\u201d \u2014 essentially the amount a homeowner is paying for their housing rather than paying a landlord.\n  If it did not do so, GDP would actually fall, Dietz said, \u201cbecause money that would be a rental payment in the marketplace paid by a renter suddenly disappears.\u201d\n  To bridge this challenge, the government relies on survey data to produce its estimates of housing costs for renters and homeowners. In renters\u2019 cases, they are simply asked how much they pay for housing.\n  But owners aren\u2019t asked what their mortgage payment is \u2014 after all, not everyone has a mortgage. Instead, that\u2019s why they are asked to estimate how much they would be able to charge for rent to lease out their current home.\n  Government statisticians survey the same cohort of Americans periodically to produce their findings and track changes over time to estimate housing costs.\n  \u201cInflation and [changes in] housing prices have generally been matched up,\u201d said Jonathan Needell, President and Chief Investment Officer of KIMC, a private real-estate investment company. He added that rising housing prices has \u201cexceeded inflation in some circumstances.\u201d\n  Some researchers have argued, however, that this approach  can also understate and/or be slow to identify true inflation occurring in the housing market.\n  A  new analysis from Fannie Mae  FNMA,  +2.26% showed that there is typically a lag between when home prices are actually rising, and when that price growth is reflected in inflation reports like the consumer price index.\n   The shifts in housing preferences and needs caused by the COVID-19 pandemic has also complicated our ability to gauge the effect of inflation in the housing market.\n  Wealthier Americans, many of whom suddenly found themselves able to work remotely, chose to move away from major cities into larger and cheaper homes in the suburbs, often saving money in the process. As a result, rental rates declined in pricier neighborhoods.\n  But in more affordable areas, rents actually increased. Americans who lost their jobs because of the pandemic rushed to find cheaper housing, pushing rents higher for the least expensive apartments and homes in the suburbs.\n  Those effects are beginning to dissipate, but will continue to weigh on official measures like the consumer price index given the time lags that occur.\n    So is housing quickly becoming more expensive? The answer, economists agree, is yes. First American Financial Services has its own measure, the Real House Price Index, which compares nominal-price gains with Americans\u2019 ability to afford to purchase a property based on the prevailing interest rates and household income.\n  For a period of time between 2018 and the beginning of 2020, the  Real House Price Index was falling, because Americans\u2019 buying power was rising faster than home prices, Fleming said. That\u2019s not the case anymore.\n  \u201cDeflation has turned into inflation, not because interest rates have gone up \u2014 they\u2019ve only gone up a little bit \u2014 but because house prices are just crazy,\u201d Fleming said.\n  The reason home prices are rising so fast is fairly simple. After the Great Recession, home-building activity all but drew to a standstill as the construction industry worked to recover.\n    As a result, the construction of new homes did not keep pace with population growth and the formation of new households.\n  That left the housing market with a serious shortage of homes, just as millennials have begun getting married and having kids \u2014 traditional hallmarks of home-buying interest.\n  With the pandemic, the shift to remote working and low interest rates have only exacerbated things.\n  The primary solution to address runaway inflation in housing will be to build more homes \u2014 something that\u2019s easier said than done. \u201cSome of the challenges that we face on the supply side of the residential construction industry are going to persist well into 2022,\u201d Dietz said.\n  Those challenges run the gamut from the high cost of lumber to the lack of skilled workers to complete construction projects. Another factor: Zoning regulations across the country prevent the construction of more dense housing in many cities, effectively driving up home prices and rents in the process.\n  Finally, new-home construction alone won\u2019t make matters easier for all Americans. Because of the high costs, it\u2019s easier for builders to construct more expensive homes, even though the demand and competition is strongest for entry-level properties.\n  Over time, that increased concentration in the bottom-tier of the housing market is driving up prices for those who can least afford it.\n  \u201cThere\u2019s this argument that if you just build more supply to meet the demand, it will eventually help extremely low and very low-income renters,\u201d Aurand said. \u201cBut the market is not going to adequately serve mostly extremely low-income renters.\u201d", "posttime": "2021-06-20 02:45:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u98ce\u66b4,storm,\u4f4f\u623f", "title": "\u901a\u8d27\u81a8\u80c0\u98ce\u66b4\u6b63\u5728\u4e3a\u7f8e\u56fd\u4f4f\u623f\u5e02\u573a\u6765\u4e34 ", "title_en": "An inflation storm is coming for the U.S. housing market", "transed": 1, "url": "https://www.marketwatch.com/story/an-inflation-storm-is-coming-for-the-u-s-housing-market-11623419869?mod=mw_more_headlines", "via": "", "real_tags": ["\u7f8e\u56fd", "\u98ce\u66b4", "storm", "\u4f4f\u623f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066918, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "JPEG XL\u56fe\u50cf\u683c\u5f0f\u5305\u62ec\u6240\u8c13\u7684\uff06\uff0334;\u9884\u6d4b\u5668\u548c\uff0334;\uff0c\u901a\u8fc7\u5728\u5176\u90bb\u5c45\u989c\u8272\u7684\u989c\u8272\u65b9\u9762\u8868\u8fbe\u50cf\u7d20\u7684\u989c\u8272\u6765\u63d0\u9ad8\u538b\u7f29\u7684\u5c0f\u7a0b\u5e8f\u3002\u53ef\u4ee5\u5728JPEG XL\u9884\u6d4b\u5668\u4e2d\u5b9e\u73b0\u89c4\u5219110\u8702\u7a9d\u81ea\u52a8\u673a\u3002 \uff08\u5b83\u4e0d\u662f\u4efb\u4f55\u590d\u6742\u7684\u4e1c\u897f\uff0c\u4f46\u6211\u60f3\u6211\u662f\u7b2c\u4e00\u4e2a\u505a\u5230\u8fd9\u4e00\u70b9\u3002\uff09\u7531\u4e8e\u89c4\u5219110\u662f\u5b8c\u6210\u7684\uff0c\u8fd9\u4f3c\u4e4e\u8bc1\u660e\u4e86JPEG XL\u9884\u6d4b\u56e0\u5b50\u672c\u8eab\u662f\u5b8c\u6574\u7684 - \u9664\u4e86\u4ed6\u4eec\u4e0d\u662f\uff01\u4e3a\u4e86\u5e2e\u52a9\u5e76\u884c\u89e3\u7801\uff0cJPEG XL\u89e3\u7801\u5668\u5728\u56fe\u50cf1024\u7684\u7247\u6bb5\u4e0a\u5de5\u4f5c1024\u50cf\u7d20\u7684\u5c3a\u5bf8\u3002\u6240\u4ee5JPEG XL\u672c\u8eab\u662f\uff06\uff0339; T\u5b8c\u6210;\u6ca1\u67091024\u00d71024\u50cf\u7d20\u9650\u5236\u7684\u60c5\u51b5\u7684\u4e00\u4e2a\u7248\u672c\u3002\n   \u8fd9\u662f\u6211JPEG XL\u5b9e\u73b0\u89c4\u5219110\u7684\u88c1\u526a\u3002\u5355\u51fb\u5b83\u4ee5\u67e5\u770b\u5b8c\u6574\u56fe\u50cf\u3002\n   \u5f53\u6211\u5728\u4e0b\u9762\u5199\u4e0b\u4ee3\u7801\u65f6\uff0cJXL\u9884\u6d4b\u5668\u7684\u6e90\u4ee3\u7801\u683c\u5f0f\u5e76\u6ca1\u6709\u53d1\u8868\u8bc4\u8bba\u6216\u5e38\u91cf\uff0c\u6211\u60f3\u8ba9\u5b83\u66f4\u5bb9\u6613\u7406\u89e3\u3002\u8fd9\u5c31\u662f\u4ee3\u7801\u9700\u8981\u9884\u5904\u7406\u6b65\u9aa4\u7684\u539f\u56e0\u3002\u5728\u7f16\u8bd1\u4e4b\u524d\uff0c\u5e94\u7528sed\u547d\u4ee4sed\uff06\uff0339; s | \\ s *;\u3002* $ ||; s | t 1 | t 255 |; s | -1 | -255 |\uff06\uff0339;\u5265\u53bb\u6ce8\u91ca\u5e76\u8f6c\u6362\u00b11\u81f3\u00b1255\u3002\n  \u5982\u679cY\uff06gt; 0\u5982\u679cn\uff06gt; 0\u5982\u679cnw-n\uff06gt; -1; n = 1\u5982\u679cn-ne\uff06gt; 0; nw = 1  - \u8bbe\u7f6e1; ne = 0  - \u8bbe\u7f6e0; ne = 1  - \u8bbe\u7f6e1; NW = 1\uff0cNE = 0/1\u5982\u679cnw-n>; 0; n = 0\u5982\u679cn-ne\uff06gt; -1; nw = 1  - \u8bbe\u7f6e0; ne = 0  - \u8bbe\u7f6e1; NE = 1\u5982\u679cn-ne\uff06gt; -1; nw = 0  - \u8bbe\u7f6e0; ne = 0  - \u8bbe\u7f6e1; NE = 1\u5982\u679cx\uff06gt; 1022  -  SET 255  -  SET 0\n  JPEG XL\u9884\u6d4b\u5668\u7528\u4e8e\u521b\u5efa\u827a\u672f\u3002\u60a8\u53ef\u4ee5\u5728JPEG XL Developer Jon Sneyers\u7684JXL Art Gallery\u4e2d\u770b\u5230\u5176\u4e2d\u7684\u4e00\u4e9b\u827a\u672f\u8005\uff0c\u4ed6\u4eec\u5728JPEG XL Discord\u4e2d\u7684#JXL-ART\u901a\u9053\u4e0a\u8fdb\u884c\u4e86\u5f00\u521b\u4e86\u9884\u6d4b\u827a\u672f\u3002\u8be5\u5e93\u9700\u8981\u4e00\u4e2a\u652f\u6301JPEG XL\u7684\u6d4f\u89c8\u5668\u3002\n \u201cJPEG XL\u827a\u672f\uff1a\uff06\uff0339; eeg\u5728Mount sierpinski\uff06\uff0339; 77\u5b57\u8282\u7684\u57fa\u5730\u3002 reddit\u7ebf\u7a0b\u901a\u8fc7Jon Sneyers\u53d1\u8868\u8bc4\u8bba\uff0c\u4ee5\u4ed6\u4ee5\u524d\u7684\u56fe\u50cf\u683c\u5f0f\u89e3\u91ca\u9884\u6d4b\u56e0\u5b50\u53ca\u5176\u8d77\u6e90\u3002 ", "note_en": "The  JPEG XL image format includes so-called &#34;predictors&#34;, small programs that improve compression by expressing the color of a pixel in terms of the colors of its neighbors. It is possible to implement the  Rule 110 cellular automaton in JPEG XL predictors. (It wasn&#39;t anything complicated, but I think  I was the first to do it.) Since Rule 110 is Turing-complete, this seems to prove that JPEG XL predictors are themselves Turing-complete \u2014 except they are not! To help with parallel decoding, JPEG XL decoders work on slices of images 1024 by 1024 pixels in size. So JPEG XL itself isn&#39;t Turing-complete; a version of it without the 1024\u00d71024 pixel limitation would be.\n   This is a crop of my JPEG XL implementation of Rule 110. Click it to see the full image.\n   When I wrote the code below, the source code format for JXL predictors didn&#39;t have comments or constants, which I wanted to make it easier to understand. This is why the code needs a preprocessing step. Before you compile it, apply the sed command  sed &#39;s|\\s*;.*$||;s|t 1|t 255|;s|-1|-255|&#39; to strip out the comments and convert \u00b11 to \u00b1255.\n  if y &gt; 0 if N &gt; 0 if NW-N &gt; -1 ; N = 1 if N-NE &gt; 0 ; NW = 1 - Set 1 ; NE = 0 - Set 0 ; NE = 1 - Set 1 ; NW = 1, NE = 0/1 if NW-N &gt; 0 ; N = 0 if N-NE &gt; -1 ; NW = 1 - Set 0 ; NE = 0 - Set 1 ; NE = 1 if N-NE &gt; -1 ; NW = 0 - Set 0 ; NE = 0 - Set 1 ; NE = 1 if x &gt; 1022 - Set 255 - Set 0\n  JPEG XL predictors are used to create art. You can see some of it in the  JXL Art Gallery of JPEG XL developer Jon Sneyers, who pioneered predictor art, and on the #jxl-art channel in the JPEG XL Discord. The Gallery requires a browser that supports JPEG XL.\n \u201cJPEG XL art: &#39;EEG at the base of Mount Sierpinski&#39;, 77 bytes\u201d. The Reddit thread has a comment by Jon Sneyers explaining predictors and their origin in his previous image format, FLIF.", "posttime": "2021-06-20 02:45:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "xl", "title": "JPEG XL\u5c06\u5b8c\u6210\uff08\u901a\u8fc7\u89c4\u5219110\uff09 ", "title_en": "JPEG XL would be Turing-complete (via Rule 110)", "transed": 1, "url": "https://dbohdan.com/wiki/jpeg-xl?", "via": "", "real_tags": ["xl"]}]