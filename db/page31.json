[{"category": "", "categoryclass": "", "imagename": "a65b2560390a4870bdf837f90f62f7d8.jpg", "infoid": 1072157, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0cmacOS \u4e0a Telegram \u7684\u9ad8\u7ea7\u9690\u79c1\u529f\u80fd\u5b58\u5728\u4e00\u4e2a\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u4e3a\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u8bbe\u5907\u4e0a\u7684\u6d88\u606f\u8bbe\u7f6e\u4e86\u201c\u81ea\u6bc1\u201d\u8ba1\u65f6\u5668\uff0c\u5373\u4f7f\u8fd9\u4e9b\u6d88\u606f\u5df2\u88ab\u5220\u9664\uff0c\u67d0\u4eba\u4e5f\u53ef\u4ee5\u68c0\u7d22\u8fd9\u4e9b\u6d88\u606f\u3002\u6210\u7acb\u3002 Trustwave SpiderLabs \u9996\u5e2d\u5a01\u80c1\u67b6\u6784\u5e08 Reegun Richard Jayapaul \u53d1\u73b0\u4e86 Telegram MacOS \u7684\u81ea\u6bc1\u529f\u80fd\u4e2d\u7684\u7f3a\u9677\uff0c\u8be5\u529f\u80fd\u662f\u4f7f\u7528\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u6d88\u606f\u5e94\u7528\u7a0b\u5e8f\u7684 Secret-Chat \u65b9\u9762\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u79cd\u52a0\u5bc6\u2014\u2014\u5373\u4f7f\u662f Telegram \u7ba1\u7406\u5458\u4e5f\u6ca1\u6709\u7684\u5bc6\u94a5\u2014\u2014\u201c\u9002\u7528\u4e8e\u90a3\u4e9b\u5173\u5fc3\u804a\u5929\u8bb0\u5f55\u5b89\u5168\u6027\u548c\u9690\u79c1\u7684\u4eba\uff0c\u201d\u4ed6\u5728\u5468\u56db\u53d1\u8868\u7684\u4e00\u7bc7\u5173\u4e8e\u4ed6\u7684\u53d1\u73b0\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u8bf4\u3002\u4e8b\u5b9e\u4e0a\uff0cTelegram \u4e00\u822c\u88ab\u5e7f\u6cdb\u8ba4\u4e3a\u662f\u66f4\u5b89\u5168\u7684\u6d88\u606f\u4f20\u9012\u5e94\u7528\u7a0b\u5e8f\u4e4b\u4e00\u3002\u8bb8\u591a\u7528\u6237\u9009\u62e9\u4ece Facebook \u7684 WhatsApp \u5207\u6362\u5230 Telegram\uff0c\u56e0\u4e3a\u4ed6\u4eec\u62c5\u5fc3\u81ea\u5df1\u7684\u9690\u79c1\u3002 Jayapaul \u4e0e Telegram \u5408\u4f5c\u4fee\u8865\u4e86\u8be5\u6f0f\u6d1e\uff0c\u8be5\u6f0f\u6d1e\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u60c5\u51b5\u4fb5\u72af\u7528\u6237\u7684\u9690\u79c1\u3002\u5728\u8fd9\u6837\u505a\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u8bf4\u4ed6\u4e86\u89e3\u5230\u516c\u53f8\u6f0f\u6d1e\u62ab\u9732\u8ba1\u5212\u7684\u4e00\u4e2a\u8b66\u544a\uff0c\u8be5\u8ba1\u5212\u963b\u6b62\u7814\u7a76\u4eba\u5458\u5728\u540c\u610f\u63a5\u53d7\u6f0f\u6d1e\u8d4f\u91d1\u7684\u60c5\u51b5\u4e0b\u62ab\u9732\u6f0f\u6d1e\u2014\u2014Jayapaul \u8bf4\u4ed6\u4e0d\u540c\u610f\u8fd9\u4e00\u70b9\u3002\u4ed6\u5199\u9053\uff0c\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5171\u4eab\u4f4d\u7f6e\u3001\u89c6\u9891\u548c\u97f3\u9891\u6d88\u606f\u53ef\u80fd\u4f1a\u6cc4\u6f0f\uff0c\u5373\u4f7f\u6d88\u606f\u5728\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u8bbe\u5907\u4e0a\u90fd\u88ab\u5b9a\u65f6\u81ea\u6bc1\u3002\u5728\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u6ca1\u6709\u6536\u4ef6\u4eba\u6253\u5f00\u6216\u5220\u9664\u90ae\u4ef6\uff0c\u8fd9\u4e9b\u76f8\u540c\u7684\u90ae\u4ef6\u4e5f\u53ef\u80fd\u6cc4\u6f0f\u3002\u7136\u800c\uff0c\u867d\u7136 Telegram \u89e3\u51b3\u4e86\u521b\u5efa\u7b2c\u4e00\u4e2a\u573a\u666f\u7684\u95ee\u9898\uff0c\u4f46\u8be5\u516c\u53f8\u62d2\u7edd\u4fee\u590d\u7b2c\u4e8c\u4e2a\u573a\u666f\u3002\u56e0\u6b64\uff0cTrustwave \u7814\u7a76\u4eba\u5458\u62d2\u7edd\u4e86 Telegram \u7684\u6f0f\u6d1e\u8d4f\u91d1\uff0c\u56e0\u4e3a\u5b83\u201c\u4f1a\u963b\u6b62\u6211\u4eec\u5411\u793e\u533a\u62ab\u9732\u8fd9\u9879\u7814\u7a76\uff0c\u201dJayapaul \u5199\u9053\u3002\n\u201c\u6211\u4eec\u8ba4\u4e3a\u9700\u8981\u5bf9\u6f0f\u6d1e\u6c38\u4e45\u4fdd\u6301\u6c89\u9ed8\u7684\u6f0f\u6d1e\u8d4f\u91d1\u65e0\u52a9\u4e8e\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\u6539\u5584\u4ed6\u4eec\u7684\u5b89\u5168\u5b9e\u8df5\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u63d0\u51fa\u95ee\u9898\uff0c\u5373\u6f0f\u6d1e\u8d4f\u91d1\u7a76\u7adf\u5728\u8865\u507f\u4e2a\u4eba\u4ec0\u4e48\u2014\u2014\u5411\u8d4f\u91d1\u652f\u4ed8\u8005\u6216\u5176\u5bf9\u66f4\u5e7f\u6cdb\u7684\u793e\u533a\u4fdd\u6301\u6c89\u9ed8\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u8fd9\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c24\u5176\u4e25\u91cd\uff0c\u5176\u4e2d\u4e00\u4e2a\u62a5\u544a\u7684\u95ee\u9898\u6ca1\u6709\u5f97\u5230\u89e3\u51b3\u3002\u201d Jayapaul \u53d1\u73b0\u4e86 macOS Telegram 7.5 \u7248\u4e2d\u7684\u6f0f\u6d1e\uff0c\u5176\u4e2d\u901a\u8fc7\u8be5\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u4efb\u4f55\u5171\u4eab\u4f4d\u7f6e\u3001\u97f3\u9891\u3001\u89c6\u9891\u6216\u6587\u6863\u90fd\u5b58\u50a8\u5728\u4ee5\u4e0b\u8def\u5f84\u7684 Telegram \u7f13\u5b58\u4e2d\uff1a\u201c/Users/Admin/Library/Group Containers/XXXXXXX.ru\u3002 keepcoder.Telegram/appstore/account-1271742300XXXXXX/postbox/media\u201d\u3002 Telegram \u5c06 Secret-Chat \u5b58\u50a8\u5728\u6b64\u76ee\u5f55\u4e2d\uff0c\u524d\u7f00\u4e3a\u201csecret-file-xxxxxx\u201d\u3002 \u201c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d1\u9001\u5230 Telegram \u7684\u4efb\u4f55\u5a92\u4f53\u6587\u4ef6\uff08\u9644\u4ef6\u9664\u5916\uff09\u90fd\u4f1a\u4e0b\u8f7d\u5230\u4e0a\u8ff0\u7f13\u5b58\u6587\u4ef6\u5939\u4e2d\uff0c\u201d\u4ed6\u5728\u5e16\u5b50\u4e2d\u89e3\u91ca\u9053\u3002 \u201c\u5171\u4eab\u4f4d\u7f6e\u5b58\u50a8\u4e3a\u56fe\u7247\u3002\u201d\u5728\u4ed6\u7684\u62ab\u9732\u4e2d\uff0cJayapaul \u8be6\u7ec6\u6982\u8ff0\u4e86\u5982\u4f55\u5728\u4e24\u79cd\u60c5\u51b5\u4e0b\u5229\u7528\u8be5\u6f0f\u6d1e - \u4e00\u79cd\u4fb5\u72af\u6d88\u606f\u6216\u4f4d\u7f6e\u7684\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u7684\u9690\u79c1\uff0c\u53e6\u4e00\u79cd\u4ec5\u5f71\u54cd\u53d1\u9001\u8005\u3002\u5728\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u67d0\u4eba\u53d1\u9001\u5f55\u97f3\u3001\u89c6\u9891\u6d88\u606f\u6216\u56fe\u50cf\uff0c\u6216\u5206\u4eab\u4ed6\u6216\u5979\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u542f\u7528\u201c\u81ea\u6bc1\u201d\u529f\u80fd\u3002\u6536\u4ef6\u4eba\u9605\u8bfb\u90ae\u4ef6\u540e\uff0c\u786e\u5b9e\u4f1a\u6839\u636e\u8be5\u529f\u80fd\u7684\u5de5\u4f5c\u65b9\u5f0f\u5c06\u5176\u5220\u9664\u3002 \u201c\u4f46\u662f\uff0c\u8fd9\u4e9b\u6587\u4ef6\u4ecd\u672c\u5730\u5b58\u50a8\u5728\u53ef\u7528\u4e8e\u6062\u590d\u7684\u7f13\u5b58\u6587\u4ef6\u5939\u4e2d\uff0c\u201dJayapaul \u8bf4\u3002\u7b2c\u4e8c\u79cd\u60c5\u51b5\u53d6\u51b3\u4e8e\u6d88\u606f\u7684\u63a5\u6536\u8005\u8fdb\u5165\u7f13\u5b58\u6587\u4ef6\u5939\u4ee5\u83b7\u53d6\u8bbe\u7f6e\u4e3a\u81ea\u6bc1\u7684\u6587\u4ef6\uff0c\u6216\u8005\u5220\u9664\u6d88\u606f\u800c\u4e0d\u5728 Telegram \u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bfb\u53d6\u5b83\u4eec\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u53d1\u4ef6\u4eba\u90fd\u4e0d\u4f1a\u77e5\u9053\u6d88\u606f\u662f\u5426\u5df2\u88ab\u9605\u8bfb\uff0c\u800c\u6536\u4ef6\u4eba\u201c\u5c06\u4fdd\u7559\u4e00\u4efd\u6c38\u4e45\u7684\u5a92\u4f53\u526f\u672c\u201d\uff0c\u636e\u8be5\u5e16\u5b50\u79f0\u3002\u5f53 Jayapaul \u8054\u7cfb Telegram \u65f6\uff0c\u8be5\u516c\u53f8\u8fc5\u901f\u505a\u51fa\u56de\u5e94\uff0c\u4fee\u590d\u4e86\u7b2c\u4e00\u79cd\u60c5\u51b5\u4e0b\u7684\u6f0f\u6d1e\uff0c\u5176\u4e2d\u201c\u4efb\u4f55\u804a\u5929/\u5a92\u4f53\u90fd\u53ef\u4ee5\u4ece\u7f13\u5b58\u4e2d\u6062\u590d\uff0c\u5373\u4f7f\u5b83\u4eec\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6253\u5f00\u6d88\u606f\u540e\u636e\u79f0\u5df2\u81ea\u884c\u5220\u9664\uff0c\u201d\u4ed6\u5199\u9053\u3002 .\u4ed6\u8bf4\uff0c\u867d\u7136\u6700\u521d\u7684\u4fee\u590d\u6700\u521d\u5e76\u4e0d\u9002\u7528\u4e8e\u5171\u4eab\u4f4d\u7f6e\uff0c\u4f46\u8be5\u516c\u53f8\u6700\u7ec8\u4e5f\u4e3a\u6b64\u53d1\u5e03\u4e86\u4fee\u590d\u3002\nJayapaul \u5199\u9053\uff0c\u8be5\u516c\u53f8\u62d2\u7edd\u4fee\u8865\u9002\u7528\u4e8e\u5a92\u4f53\u6587\u4ef6\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0b\u7684\u7f13\u5b58\u95ee\u9898\uff0c\u4f46\u5f15\u7528\u4e86\u201c\u4e00\u4e9b\u65b9\u6cd5\u6765\u89e3\u51b3\u201d\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u81ea\u6bc1\u8ba1\u65f6\u5668\u201c\u8d85\u51fa\u201d\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u63a7\u5236\u7684\u8303\u56f4\u3002 Telegram \u627f\u8ba4\uff0c\u5b83\u5728\u5176\u7f51\u7ad9\u7684\u201c\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u201d\u9875\u9762\u4e0a\u8b66\u544a\u7528\u6237\u201c\u6b64\u7c7b\u60c5\u51b5\u201d\u3002\u8d3e\u4e9a\u4fdd\u5c14\u8868\u793a\uff0c\u4ed6\u8ba4\u4e3a\u4fee\u590d\u201c\u5c06\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4fee\u590d\u201d\uff0c\u53ea\u9700\u8981\u5e94\u7528\u4e0e\u81ea\u6bc1\u804a\u5929\u7528\u4e8e\u9644\u4ef6\u7684\u76f8\u540c\u7f13\u5b58\u65b9\u6cd5\u3002 \u201c\u5982\u679c\u60a8\u5c06\u5a92\u4f53\u6587\u4ef6\u9644\u52a0\u5230\u6d88\u606f\u4e2d\uff0c\u5219\u5728\u5355\u51fb\u6d88\u606f\u4e4b\u524d\u65e0\u6cd5\u5728\u7f13\u5b58\u4e2d\u8bbf\u95ee\u9644\u4ef6\uff0c\u201dJayapaul \u89e3\u91ca\u8bf4\u3002 \u201c\u53ea\u6709\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6253\u5f00\u6d88\u606f\u540e\uff0c\u624d\u4f1a\u4e0b\u8f7d\u9644\u4ef6\uff0c\u7136\u540e\u5728\u8ba1\u65f6\u5668\u540e\u5220\u9664\u3002\u201d Telegram \u4e3a\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6f0f\u6d1e\u8d4f\u91d1\uff0c\u4ed6\u201c\u5f88\u9ad8\u5174\u201d\u6536\u5230\uff0c\u4f46\u4ed6\u6700\u7ec8\u62d2\u7edd\u4e86\uff0c\u56e0\u4e3a\u4ed6\u9009\u62e9\u53d1\u8868\u4ed6\u7684\u53d1\u73b0\u3002 \u201c\u516c\u5f00\u62ab\u9732\u662f\u6f0f\u6d1e\u53d1\u73b0\u548c\u4fee\u590d\u8fc7\u7a0b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u201dJayapaul \u8bf4\u3002 \u201c\u5b83\u4ee5\u591a\u79cd\u65b9\u5f0f\u5bf9\u516c\u4f17\u81f3\u5173\u91cd\u8981\u3002\u7531\u4e8e\u8fd9\u4e9b\u62c5\u5fe7\u4ee5\u53ca\u6211\u5bf9\u4fe1\u606f\u5b89\u5168\u7684\u627f\u8bfa\uff0c\u6211\u62d2\u7edd\u4e86\u6f0f\u6d1e\u8d4f\u91d1\u4ee5\u6362\u53d6\u62ab\u9732\u3002\u201d\u62c5\u5fc3\u4e0b\u4e00\u6b21\u653b\u51fb\u6765\u81ea\u54ea\u91cc\uff1f\u6211\u4eec\u652f\u6301\u4f60\u3002\u7acb\u5373\u6ce8\u518c\u6211\u4eec\u5373\u5c06\u4e8e\u7f8e\u56fd\u4e1c\u90e8\u6807\u51c6\u65f6\u95f4 8 \u6708 17 \u65e5\u4e0a\u5348 11 \u70b9\u4e0e Uptycs \u5408\u4f5c\u4e3e\u529e\u7684\u76f4\u64ad\u7f51\u7edc\u7814\u8ba8\u4f1a\u201c\u5982\u4f55\u50cf\u5a01\u80c1\u6f14\u5458\u4e00\u6837\u601d\u8003\u201d\uff0c\u5e76\u51c6\u786e\u627e\u51fa\u653b\u51fb\u8005\u7784\u51c6\u60a8\u7684\u4f4d\u7f6e\u4ee5\u53ca\u5982\u4f55\u9996\u5148\u5230\u8fbe\u90a3\u91cc\u3002\u4e0e\u4e3b\u6301\u4eba Becky Bracken \u548c Uptycs \u7814\u7a76\u4eba\u5458 Amit Malik \u548c Ashwin Vamshi \u4e8e\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f4 8 \u6708 17 \u65e5\u4e0a\u5348 11 \u70b9\u4e00\u8d77\u8fdb\u884c\u73b0\u573a\u8ba8\u8bba\u3002", "note_en": "A vulnerability in a high-level privacy feature of  Telegram on macOS that sets up a \u201cself-destruct\u201d timer for messages on both the sender\u2019s and recipient\u2019s devices can allow someone to retrieve these messages even after they\u2019ve been deleted, a researcher has found.\n Reegun Richard Jayapaul,  Trustwave SpiderLabs Lead Threat Architect, discovered the flaw in the Self-Destruct feature of Telegram MacOS, which is part of the Secret-Chats aspect of the messaging app that uses end-to-end encryption.\n This encryption \u2013 the key to which even Telegram administrators do not have \u2013 \u201cis meant for people who are concerned about the security and privacy of their chat history,\u201d he said in a  blog post about his findings published Thursday.\n  Indeed,  Telegram in general is widely viewed as one of the more secure messaging apps; many users have opted to switch from Facebook\u2019s WhatsApp to Telegram because they are concerned about their privacy.\n Jayapaul worked with Telegram to patch the flaw, which can allow the privacy of users to be violated via two scenarios. In doing so, he said he learned of a caveat of the company\u2019s vulnerability disclosure program that prevents researchers from disclosing a flaw if they agree to accept a bug bounty \u2013 something Jayapaul said he was not on board with.\n In the first scenario, Shared Location, video and audio messages can leak even after the messages have been timed to self-destruct on both the sender\u2019s and recipient\u2019s device, he wrote. In the second scenario, these same messages can leak without a recipient even opening or deleting the message.\n However, while Telegram fixed the issue creating the first scenario, the company declined to fix the second. Because of this, the Trustwave researcher declined the bug bounty from Telegram, as it \u201cwould have kept us from disclosing this research to the community,\u201d Jayapaul wrote.\n \u201cWe feel bug bounties that require permanent silence about a vulnerability do not help the broader community to improve their security practices and can serve to raise questions about what exactly the bug bounty is compensating the individual for \u2013 reporting a vulnerability to the bounty payer or their silence to the broader community,\u201d he said. \u201cThis is especially serious in this case, where one of the issues reported went unaddressed.\u201d\n  Jayapaul discovered the flaw in macOS Telegram version 7.5, where any shared location, audio, video or documents sent via the app are stored in the Telegram cache in the following path: \u201c/Users/Admin/Library/Group Containers/XXXXXXX.ru.keepcoder.Telegram/appstore/account-1271742300XXXXXX/postbox/media\u201d.\n Telegram stores the Secret-Chat in this directory with the prefix \u201csecret-file-xxxxxx\u201d. \u201cBy default, any media files, except attachments, sent to Telegram are downloaded to the above cache folder,\u201d he explained in the post. \u201cShared locations are stored as a picture.\u201d\n In his disclosure, Jayapaul outlined in detail how the flaw can be exploited in the two scenarios \u2013 one that violates the privacy of both the sender and recipient of the messages or locations, the other in which just the sender is affected.\n In the first scenario, someone sends a voice recording, video message or image, or shares his or her location, and then enables the \u201cself-destruct\u201d feature. Once the recipient reads the message, it does indeed get deleted according to how the feature works. \u201cHowever, the files are still stored locally inside the cache folder available for recovery,\u201d Jayapaul said.\n The second scenario depends upon the recipient of the message going into the cache folder to grab the file that\u2019s set to self-destruct, or deletes the messages without reading them within the Telegram app. Either way, the sender won\u2019t know whether the message was read, and the recipient \u201cwill retain a permanent copy of the media,\u201d according to the post.\n  When Jayapaul contacted Telegram, the company quickly responded to fix the vulnerability in the first scenario, in which \u201cany chats/media can be recovered from the cache even after they are supposedly self-deleted after opening the message in the app,\u201d he wrote. While the initial fix didn\u2019t apply to Shared Locations initially, the company eventually published a fix for this as well, he said.\n The company declined to patch the caching issue in the second scenario as applied to media files, however, citing \u201csome ways to work around\u201d the self-destruct timer in the app \u201cthat are outside\u201d what the app can control, Jayapaul wrote. Telegram acknowledged that it warns users about \u201csuch circumstances\u201d on a  \u201cFAQ\u201d page on its website.\n For his part, Jayapaul said he thinks the fix \u201cwould be a simple one\u201d that needs only to apply the same caching method that the self-destruct chats use for attachments.\n \u201cIf you attach media files to a message, the attachments cannot be accessed in the cache prior to clicking the message,\u201d Jayapaul explained. \u201cOnly after the message is opened in the app are the attachments downloaded and then deleted after the timer.\u201d\n Telegram offered the researcher a bug bounty that he was \u201cdelighted\u201d to receive, but he ultimately declined it because he chose to publish his findings.\n \u201cPublic disclosure is an important part of the vulnerability discovery and remediation process,\u201d Jayapaul said. \u201cIt is essential for the public in a variety of ways. Because of these concerns and my commitment to information security, I have declined the bug bounty in exchange for disclosure.\u201d\n Worried about where the next attack is coming from? We\u2019ve got your back.   REGISTER NOW for our upcoming live webinar, How to  Think Like a Threat Actor, in partnership with Uptycs on Aug. 17 at 11 AM EST and find out precisely where attackers are targeting you and how to get there first. Join host Becky Bracken and Uptycs researchers Amit Malik and Ashwin Vamshi on   Aug. 17 at 11AM EST for this LIVE discussion.", "posttime": "2021-08-09 02:55:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f3a\u9677,flaw,telegram", "title": "\u7535\u62a5\u4e2d\u7684 macOS \u7f3a\u9677\u53ef\u68c0\u7d22\u5df2\u5220\u9664\u7684\u90ae\u4ef6", "title_en": "macOS Flaw in Telegram Retrieves Deleted Messages", "transed": 1, "url": "https://threatpost.com/macos-flaw-in-telegram-retrieves-deleted-messages/168412/", "via": "", "real_tags": ["\u7f3a\u9677", "flaw", "telegram"]}, {"category": "", "categoryclass": "", "imagename": "0597edfbe199869eb9c25ec2baefe95a.jpeg", "infoid": 1072156, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u660e\u5c3c\u963f\u6ce2\u5229\u65af\uff08WCCO\uff09\u2014\u2014\u660e\u5c3c\u82cf\u8fbe\u5dde\u4f17\u8bae\u5458\u4f0a\u5c14\u6c57\u00b7\u5965\u9a6c\u5c14\u5468\u4e94\u63d0\u51fa\u4e86\u4e24\u9879\u200b\u200b\u6cd5\u6848\uff0c\u65e8\u5728\u521b\u5efa\u4e00\u9879\u8d44\u52a9\u8ba1\u5212\uff0c\u4e3a\u5730\u65b9\u6536\u5165\u8bd5\u70b9\u3001\u56fd\u5bb6\u4fdd\u969c\u6536\u5165\u8ba1\u5212\u63d0\u4f9b\u8d44\u91d1\uff0c\u5e76\u5efa\u7acb\u4e00\u79cd\u8861\u91cf\u5e78\u798f\u611f\u7684\u65b0\u7ecf\u6d4e\u6a21\u5f0f\u3002\u5965\u9a6c\u5c14\u6b63\u5f0f\u5f15\u5165\u4e86\u201c\u5411\u514b\u670d\u5bf9\u80dc\u5229\u7684\u62b5\u6297\uff08SUPPORT\uff09\u6cd5\u6848\u201d\u548c\u201c\u771f\u6b63\u8fdb\u5c55\u6307\u6807\uff08GPI\uff09\u6cd5\u6848\u201d\u7684\u4eba\u4eec\u53d1\u9001\u65e0\u6761\u4ef6\u4ed8\u6b3e\u3002 \u201c\u8d2b\u56f0\u662f\u4e00\u79cd\u653f\u7b56\u9009\u62e9\u3002\u957f\u671f\u4ee5\u6765\uff0c\u5f53\u6570\u767e\u4e07\u4eba\u65e0\u5bb6\u53ef\u5f52\u3001\u9965\u997f\u6216\u6ca1\u6709\u533b\u7597\u4fdd\u5065\u65f6\uff0c\u6211\u4eec\u4e00\u76f4\u4f18\u5148\u8003\u8651\u65e0\u4f11\u6b62\u7684\u589e\u957f\uff0c\u201d\u5965\u9a6c\u5c14\u8bf4\u3002 \u201c\u5927\u6d41\u884c\u66b4\u9732\u4e86\u8fd9\u4e9b\u4e0d\u5e73\u7b49\u3002\u4f5c\u4e3a\u4e00\u4e2a\u56fd\u5bb6\uff0c\u6211\u4eec\u6709\u80fd\u529b\u786e\u4fdd\u6bcf\u4e2a\u4eba\u7684\u57fa\u672c\u9700\u6c42\u5982\u98df\u7269\u3001\u4f4f\u623f\u548c\u533b\u7597\u4fdd\u5065\u5f97\u5230\u6ee1\u8db3\u3002\u201d\u6839\u636e\u5168\u56fd\u8bd5\u70b9\u8ba1\u5212\uff0c\u300a\u652f\u6301\u6cd5\u6848\u300b\u5c06\u91cd\u70b9\u5173\u6ce8\u6210\u4eba\u6bcf\u6708\u6700\u9ad8 1,200 \u7f8e\u5143\u548c\u513f\u7ae5\u6bcf\u6708 600 \u7f8e\u5143\u7684\u4fdd\u8bc1\u6536\u5165\u8ba1\u5212\u3002 GPI \u6cd5\u6848\u5c06\u63d0\u4f9b\u4e00\u79cd\u66ff\u4ee3\u7ecf\u6d4e\u6307\u6807\uff0c\u4ee5\u901a\u8fc7\u7eb3\u5165\u793e\u4f1a\u7ecf\u6d4e\u548c\u73af\u5883\u56e0\u7d20\u6765\u8865\u5145 GDP \u8ba1\u7b97\u5e76\u6539\u8fdb\u7ecf\u6d4e\u653f\u7b56\u3002 GPI \u6cd5\u6848\u7531\u4f17\u8bae\u5458 Jamaal Bowman\u3001Cori Bush\u3001Dwight Evans\u3001Pramila Jayapal \u548c Marie Newman \u5171\u540c\u53d1\u8d77\u3002\u652f\u6301\u6cd5\u6848\u7531\u540c\u4e00\u56e2\u4f53\u5171\u540c\u53d1\u8d77\uff0c\u5e76\u52a0\u5165\u4e86 Pramila Jayapal\u3002\u5982\u679c\u60a8\u901a\u8fc7\u672c\u6587\u4e2d\u7684\u63a8\u8350\u94fe\u63a5\u8d2d\u4e70\u5546\u54c1\uff0cMicrosoft \u548c\u5408\u4f5c\u4f19\u4f34\u53ef\u80fd\u4f1a\u83b7\u5f97\u8865\u507f\u3002\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00 \u6253\u5f00\u5916\u90e8\u7ad9\u70b9 \u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00\u5916\u90e8\u7ad9\u70b9", "note_en": "MINNEAPOLIS (WCCO) \u2013 Minnesota\u00a0Rep. Ilhan Omar introduced two bills Friday that are intended to create a grant program to fund local income pilots, a national guaranteed income program, and to establish a new economic model that measures well-being.\n     Omar formally introduced the Sending Unconditional Payments to People Overcoming Resistances to Triumph (SUPPORT) Act and the Genuine Progress Indicator (GPI) Act.\n  \u201cPoverty is a policy choice. For too long we have prioritized endless growth while millions are homeless, hungry or without healthcare,\u201d said Omar.\u00a0\u201cThe pandemic has laid bare these inequalities. We as a nation have the ability to make sure everyone has their basic needs like food, housing and healthcare met.\u201d\n  The SUPPORT Act will focus on the guaranteed income program of up to $1,200 per month for adults, and $600 for kids, following pilot programs across the nation.\u00a0 The GPI Act will provide an alternative economic metric to supplement GDP calculations and revamp economic policies by including socio-economic and environmental factors.\n  The GPI Act is cosponsored by Reps. Jamaal Bowman, Cori Bush, Dwight Evans, Pramila Jayapal, and Marie Newman. The SUPPORT Act is cosponsored by the same group with the addition of Pramila Jayapal.\n  Microsoft and partners may be compensated if you purchase something through recommended links in this article.\n                Opens in a new window  Opens an external site  Opens an external site in a new window", "posttime": "2021-08-09 01:58:34", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7f8e\u56fd,\u7acb\u6cd5\u8005,pilot,\u6cd5\u6848", "title": "\u7f8e\u56fd\u7acb\u6cd5\u8005\u63d0\u8bae\u4e00\u9879 25 \u4ebf\u7f8e\u5143\u7684\u8bd5\u70b9\u4fdd\u8bc1\u6536\u5165\u8ba1\u5212", "title_en": "US Lawmakers Propose a $2.5 Billion Pilot Guaranteed Income Program", "transed": 1, "url": "https://www.msn.com/en-us/money/news/rep-ilhan-omar-introduces-bills-that-aim-for-guaranteed-income/ar-AAMLboB", "via": "", "real_tags": ["\u7f8e\u56fd", "\u7acb\u6cd5\u8005", "pilot", "\u6cd5\u6848"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072154, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u559c\u6b22\u7684\u521b\u59cb\u539f\u5219\u4e4b\u4e00 \u9274\u4e8e Unix \u5bf9\u5927\u91cf\u53a8\u623f\u6c34\u69fd\u7a0b\u5e8f\u5e76\u4e0d\u964c\u751f\uff0c\u6211\u4eec\u4e2d\u95f4\u7684\u6124\u4e16\u5ac9\u4fd7\u8005\u53ef\u80fd\u4f1a\u5c06\u5176\u79f0\u4e3a\u795e\u8bdd\u800c\u4e0d\u662f\u539f\u5219\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6b63\u5728\u8fd9\u6837\u4e00\u4e2a\u7a0b\u5e8f\u4e2d\u5199\u8fd9\u7bc7\u6587\u7ae0\u3002 Unix \u7684\u7279\u70b9\u662f\u5b57\u8282\u6d41\u7684\u666e\u904d\u6027\u3002 Unix shell \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e00\u5143\u7ba1\u9053\u8fd0\u7b97\u7b26 |\uff0c\u5373\uff0c\u7ed9\u5b9a\u4e00\u4e9b\u8ba1\u7b97 a | b, \u6267\u884c a \u4f7f\u5176\u8f93\u51fa\u5f62\u6210 b \u7684\u8f93\u5165\u3002\u8fd9\u4e00\u539f\u5219\u4e3a\u6807\u51c6\u7684 Unix \u547d\u4ee4\u63d0\u4f9b\u4e86\u7b80\u6d01\u7684\u7ec4\u5408\uff0c\u5141\u8bb8\u6267\u884c shell\uff0c\u800c\u4e0d\u662f\u7a0b\u5e8f\u672c\u8eab\uff0c\u901a\u8fc7\u4e00\u4e2a\u7ec4\u5408\u7684 shell \u547d\u4ee4\u5e8f\u5217\u6765\u63a7\u5236\u6570\u636e\u6d41\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5b57\u8282\u6d41\u64cd\u4f5c\u7684\u539f\u7406\u662f\u6574\u4e2a\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 sed \u548c awk\uff09\u7684\u57fa\u7840\u3002 xargs \u548c tee \u548c parallel \u7b49\u5de5\u5177\u63d0\u4f9b\u4e86\u9ad8\u9636\u7ec4\u5408\u5668\uff0c\u4ee5\u8d85\u51fa\u7ba1\u9053\u64cd\u4f5c\u5458\u672c\u8eab\u80fd\u529b\u7684\u65b9\u5f0f\u4ece\u66f4\u591a\u7ba1\u9053\u6784\u5efa\u7ba1\u9053\u3002\u8ba9\u6211\u4eec\u8003\u8651\u5728\u8bf8\u5982\u6b64\u7c7b\u7684\u6d41\u6c34\u7ebf\u8ba1\u7b97\u4e2d\u8fd0\u884c\u826f\u597d\u7684\u7a0b\u5e8f\u7684\u4e00\u4e9b\u5c5e\u6027\uff0c\u4f7f\u7528 grep \u4f5c\u4e3a\u6b64\u7c7b\u7a0b\u5e8f\u7684\u539f\u578b\u3002\u5f53\u7136\uff0cgrep \u662f\u4e00\u79cd\u5177\u6709\u8fd1\u4e4e\u65e0\u4e0e\u4f26\u6bd4\u7684\u91cd\u8981\u6027\u7684\u5de5\u5177\uff0c\u5b83\u88ab\u8f7d\u5165 POSIX \u6807\u51c6\uff0c\u5e76\u4e14\u5b83\u7684\u4f18\u5316\u53ef\u80fd\u4e0e\u4efb\u4f55\u5176\u4ed6\u7a0b\u5e8f\u4e00\u6837\u5f7b\u5e95\u3002\u6211\u4eec\u7684\u7a0b\u5e8f\u53ef\u80fd\u4e0d\u662f grep\uff0c\u4f46\u5b83\u4eec\u53ef\u80fd\u9700\u8981\u6a21\u62df grep \u5982\u4f55\u7ba1\u7406\u5176\u8f93\u5165\u6d41\uff1a\u5b83\u9690\u85cf\u4e86\u8d44\u6e90\u64cd\u4f5c\u7684\u7ec6\u8282\u3002\u64cd\u4f5c\u7cfb\u7edf\u3001\u5176\u7cfb\u7edf\u5e93\u3001\u5f53\u524d\u4f7f\u7528\u7684\u5916\u58f3\u53ca\u5176\u5b9e\u73b0 |\u64cd\u4f5c\u5458\u9690\u85cf\u4e86\u8f93\u5165\u5982\u4f55\u5728\u6587\u4ef6\u4e4b\u95f4\u8fdb\u884c\u6279\u5904\u7406\u548c\u9988\u9001\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u9274\u4e8e\u8fd9\u4e9b\u7ec6\u8282\u662f\u4ece\u6211\u4eec\u8fd9\u91cc\u62bd\u8c61\u51fa\u6765\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u5047\u8bbe\u8f93\u5165\u5728\u5fc5\u8981\u65f6\u88ab\u7f13\u51b2\u548c\u5206\u5757\uff0c\u5e76\u4e14\u8fd9\u4e9b\u7f13\u51b2\u533a\u548c\u5757\u7684\u5904\u7406\u5f00\u9500\u5c3d\u53ef\u80fd\u5c0f\u3002\u7279\u522b\u662f\uff0c\u4ece\u8f93\u5165\u6d41\u8bfb\u53d6\u7684\u5b57\u8282\u7f13\u51b2\u533a\u5e94\u8be5\u53ea\u5728\u7a0b\u5e8f\u660e\u786e\u8bf7\u6c42\u65f6\u624d\u88ab\u590d\u5236\u548c\u4fdd\u7559\uff1a\u65e7\u7684\u8f93\u5165\u4e0d\u5e94\u8be5\u5728\u5185\u5b58\u4e2d\u5f98\u5f8a\uff0c\u56e0\u4e3a\u8be5\u8f93\u5165\u7684\u5927\u5c0f\u7406\u8bba\u4e0a\u662f\u65e0\u754c\u7684\u3002\u5b83\u61d2\u60f0\u5730\u6d88\u8017\u5176\u8f93\u5165\u3002\u5982\u679c\u6211\u544a\u8bc9 grep \u5728\u4e00\u4e2a 10 GB \u7684\u6587\u4ef6\u4e2d\u641c\u7d22\u4e00\u4e2a\u4e14\u4ec5\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4e32\uff0c\u5b83\u5e94\u8be5\u53ea\u6d88\u8017\u6ee1\u8db3\u6211\u7684\u8bf7\u6c42\u6240\u9700\u7684\u8f93\u5165\u91cf\u3002\u5982\u679c\u4ece\u6d41\u4e2d\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u8d85\u8fc7\u6240\u9700\u7684\u5b57\u8282\u6570\uff0c\u5219\u5728\u6027\u80fd\u65b9\u9762\u5e94\u8be5\u4e0e\u8bfb\u53d6\u5c3d\u53ef\u80fd\u5c11\u7684\u8f93\u5165\u6ca1\u6709\u533a\u522b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5bf9\u53ef\u89c2\u5bdf\u5230\u7684\u7a0b\u5e8f\u884c\u4e3a\u4ea7\u751f\u4efb\u4f55\u53d8\u5316\u3002\u5b83\u6e05\u7406\u5b83\u7684\u8d44\u6e90\u3002\u5982\u679c grep \u5411\u64cd\u4f5c\u7cfb\u7edf\u8bf7\u6c42\u8d44\u6e90\uff0c\u6216\u8005\u4ea7\u751f\u4e00\u4e9b\u5176\u4ed6\u8f85\u52a9\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u8d44\u6e90\u548c\u5b50\u8fdb\u7a0b\u5e94\u8be5\u88ab\u5feb\u901f\u53ef\u9760\u5730\u56de\u6536\uff0c\u5373\u4f7f\u9762\u5bf9\u4e0a\u6e38\u6216\u4e0b\u6e38\u7ba1\u9053\u6545\u969c\uff0c\u751a\u81f3\u53ea\u662f\u4e00\u4e2a\u7528\u6237\u4e0d\u8010\u70e6\u5730\u6572\u51fb Ctrl+C \u5e76\u53d1\u9001\u6570\u5341\u4e2aSIGKILL \u4fe1\u53f7\u3002 C \u7a0b\u5e8f\u64c5\u957f\u6ee1\u8db3\u8fd9\u4e9b\u6807\u51c6\u3002\u54c8\uff01\u53ea\u662f\u5728\u5f00\u73a9\u7b11\u3002 C\u7a0b\u5e8f\u53ef\u4ee5\u64c5\u957f\u6d41\u5f0f\u6570\u636e\u64cd\u4f5c\uff0c\u56e0\u4e3aC\u7f16\u7a0b\u5c06\u5176\u7ec6\u8282\u6258\u4ed8\u7ed9\u60a8\uff0c\u60a8\u53ef\u80fd\u662f\u64c5\u957f\u6d41\u5f0f\u6570\u636e\u64cd\u4f5c\u7684\u4eba\u3002\u5c3d\u7ba1 POSIX \u6807\u51c6\u63d0\u4f9b\u4e86\u67d0\u4e9b\u4fdd\u8bc1 POSIX \u6807\u51c6\u6307\u5b9a\u67d0\u4e9b\u8d44\u6e90\u2014\u2014\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u76ee\u5f55\u6d41\u3001\u6765\u81ea iconv() \u7684\u6d41\u8f6c\u6362\u5668\u548c\u6765\u81ea catopen \u7684\u6d88\u606f\u76ee\u5f55\u2014\u2014\u5728\u7a0b\u5e8f\u9000\u51fa\u65f6\u88ab\u653e\u5f03\u3002\u4f7f\u7528 exec \u7cfb\u5217\u51fd\u6570\u4ea7\u751f\u7684\u5b50\u8fdb\u7a0b\u901a\u5e38\u4e0d\u4f1a\u7ec8\u6b62\uff08\u9664\u975e\u7236\u8fdb\u7a0b\u6216\u76f8\u5173\u8fdb\u7a0b\u7ec4\u7279\u522b\u8bf7\u6c42\uff09\u3002\u5171\u4eab\u5185\u5b58\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u88ab\u653e\u5f03\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u662f\u5426\u6b63\u5728\u5f15\u7528\u5b83\u3002\u8fd9\u79cd\u79bb\u9898\u5df2\u7ecf\u8db3\u591f\u957f\u4e86\uff1b\u5982\u679c\u60a8\u771f\u7684\u5f88\u597d\u5947\uff0c\u8bf7\u9605\u8bfb\u6807\u51c6\u3002\u5173\u4e8e\u7a0b\u5e8f\u9000\u51fa\u65f6\u8d44\u6e90\u56de\u6536\u7684\u65b9\u5f0f\uff0c\u60a8\u4ecd\u7136\u8d1f\u8d23\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u7ba1\u7406\u8d44\u6e90\u3002\u4f60\u3001\u6807\u51c6\u8f93\u5165\u548c\u6807\u51c6\u8f93\u51fa\u4e4b\u95f4\u6ca1\u6709\u592a\u591a\u7684\u62bd\u8c61\u5c42\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u7684\u5e95\u5c42 FILE* \u7ed3\u6784\u53ef\u4ee5\u4e3a\u4f60\u505a\u4e00\u4e9b\u7f13\u5b58\uff0c\u5b83\u53ef\u80fd\u4f1a\uff0c\u4f46\u4f60\u603b\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 read(2) \u6216\u4e00\u4e9b\u4f4e\u7ea7\u522b\u7684\u4ee5\u6548\u7387\u4e3a\u91cd\u70b9\u7684\u6846\u67b6\uff0c\u5982 kqueue\u3001epoll\u3001libdispatch \u6216 io_uring\u3002\u4f7f\u7528\u66f4\u9ad8\u7ea7\u522b\u7684\u5783\u573e\u6536\u96c6\u8bed\u8a00\uff0c\u4e8b\u60c5\u53d8\u5f97\u6709\u70b9\u68d8\u624b\u3002\u9ad8\u7ea7\u8bed\u8a00\u6709\u8d23\u4efb\u5c06\u6211\u4eec\u4e0e C \u7684\u95ee\u9898\u9694\u79bb\u5f00\u6765\uff1a\u4e0e shell \u811a\u672c\u4e00\u6837\uff0c\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u7279\u522b\u4e86\u89e3\u5982\u4f55\u8bfb\u53d6\u6587\u4ef6\u3001\u5982\u4f55\u5206\u914d\u5185\u5b58\u6216\u5982\u4f55\u8f93\u5165\u88ab\u7f13\u51b2\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7a0b\u5e8f\uff0c\u5c24\u5176\u662f\u5783\u573e\u6536\u96c6\u8bed\u8a00\u64c5\u957f\u7684\u5feb\u901f\u800c\u80ae\u810f\u7684\u7a0b\u5e8f\uff0c\u8fd9\u4e9b\u7ec6\u8282\u65e0\u5173\u7d27\u8981\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u53d1\u73b0\u81ea\u5df1\u5904\u4e8e\u201c\u5927\u591a\u6570\u7a0b\u5e8f\u201d\u7684\u8303\u56f4\u4e4b\u5916\u65f6\uff0c\u60c5\u51b5\u53ef\u80fd\u4f1a\u4ee4\u4eba\u70e6\u607c\uff1a\u5f53\u60a8\u7684\u8f6f\u4ef6\u7684\u6b63\u786e\u6027\u53d6\u51b3\u4e8e\u7ec6\u8282\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u7684\u6027\u8d28\u4f1a\u5c06\u60a8\u4e0e\u8d44\u6e90\u7ba1\u7406\u51b3\u7b56\u9694\u79bb\u5f00\u6765\u6240\u8bf4\u7684\u8d44\u6e90\u7ba1\u7406\u3002\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u9762\u4e34\u7740\u4e00\u4e2a\u7279\u522b\u68d8\u624b\u7684\u8fa9\u8bc1\u6cd5\uff1a\u9ad8\u7ea7\u8bed\u8a00\u901a\u8fc7\u62bd\u8c61\u7ec6\u8282\u6765\u5e2e\u52a9\u7a0b\u5e8f\u5f00\u53d1\uff0c\u4f46\u662f\u5f53\u7a0b\u5e8f\u6b63\u786e\u6027\u76f4\u63a5\u53d6\u51b3\u4e8e\u8fd9\u4e9b\u62bd\u8c61\u7ec6\u8282\u7684\u5c5e\u6027\u65f6\uff0c\u4f8b\u5982\u7f16\u5199\u5904\u7406\u9519\u8bef\u6761\u4ef6\u7684\u4ee3\u7801\u65f6\uff0c\u5c31\u4f1a\u963b\u788d\u7a0b\u5e8f\u7684\u5f00\u53d1\u5728\u5b58\u5728\u8d44\u6e90\u538b\u529b\u7684\u60c5\u51b5\u4e0b\u7a33\u5065\u6216\u4fdd\u6301\u53ef\u9760\u3002\u5728\u53ef\u79fb\u690d shell \u811a\u672c\u4e2d\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u65f6\u9047\u5230\u7684\u56f0\u96be\u53ea\u662f\u6211\u4eec\u4e0d\u5728 shell \u4e2d\u7f16\u5199\u6240\u6709\u5185\u5bb9\u7684\u4f17\u591a\u539f\u56e0\u4e4b\u4e00\u3002\n\u81f3\u5c11\u5728\u7406\u8bba\u4e0a\uff0cHaskell \u7684\u58f0\u660e\u6027\u3001\u975e\u4e25\u683c\u8bc4\u4f30\u548c\u6b63\u786e\u6784\u9020\u54f2\u5b66\u4f7f\u5176\u6210\u4e3a\u7f16\u5199\u5728\u6d41\u7ba1\u9053\u4e2d\u8fd0\u884c\u826f\u597d\u7684\u4ee3\u7801\u7684\u6709\u5438\u5f15\u529b\u7684\u89e3\u51b3\u65b9\u6848\u3002\u7136\u800c\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u9047\u5230\u4e86\u4e09\u4e2a\u76f8\u4e92\u5173\u8054\u4f46\u53c8\u622a\u7136\u4e0d\u540c\u7684\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u4e0e\u4e0a\u9762\u6982\u8ff0\u7684\u7ba1\u7406\u826f\u597d\u7684\u8f93\u5165\u6d41\u7684\u5c5e\u6027\u8868\u73b0\u51fa\u5f88\u597d\u7684\u5bf9\u79f0\u6027\uff1a \u6d41\u95ee\u9898\uff1a\u6211\u4eec\u5982\u4f55\u7f16\u5199 Haskell \u4ee3\u7801\u6765\u5904\u7406\u6f5c\u5728\u7684\u65e0\u9650\u6570\u636e\u6d41\u6709\u9650\u7684\u5185\u5b58\uff1f\u61d2\u60f0\u7684 I/O \u95ee\u9898\uff1a\u9274\u4e8e Haskell \u7684\u975e\u4e25\u683c\u8bed\u4e49\uff0c\u6211\u4eec\u5982\u4f55\u61d2\u60f0\u6709\u6548\u5730\u6d88\u8d39\u6765\u81ea\u5916\u90e8\u4e16\u754c\u7684\u8f93\u5165\uff1f\u8d44\u6e90\u64cd\u4f5c\u95ee\u9898\uff1a\u9274\u4e8e\u6211\u4eec\u65e0\u6cd5\u76f4\u63a5\u63a7\u5236\u6570\u636e\u7684\u751f\u547d\u5468\u671f\uff0c\u6211\u4eec\u5982\u4f55\u786e\u4fdd\u6211\u4eec\u7684\u4ee3\u7801\u6b63\u786e\u7ba1\u7406\u548c\u653e\u5f03\u6602\u8d35\u7684\u8d44\u6e90\uff1f\u6211\u5c06\u8ba8\u8bba\u5982\u4f55\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f7f\u7528\u6d41\u751f\u6001\u7cfb\u7edf\u6765\u89e3\u51b3\u7b2c\u4e00\u70b9\uff0c\u6d41\u5b57\u8282\u4e32\u5e93\u662f\u7b2c\u4e8c\u70b9\uff0c\u800c\u8d44\u6e90\u5e93\u662f\u7b2c\u4e09\u70b9\u3002\u9274\u4e8e Haskell \u7684\u4e0d\u6b62\u4e00\u79cd\u65b9\u6cd5\u6765\u505a\u7684\u54f2\u5b66\uff0c\u5b58\u5728\u8bb8\u591a\u66ff\u4ee3\u7684\u751f\u6001\u7cfb\u7edf\u2014\u2014\u50cf\u7ba1\u9053\u3001\u7ba1\u9053\u5b57\u8282\u4e32\u3001streamly \u548c io-streams \u8fd9\u6837\u7684\u5e93\u90fd\u63d0\u4f9b\u4e86\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u5de5\u5177\u2014\u2014\u4f46\u6d41\u751f\u6001\u7cfb\u7edf\u662f\u6211\u6700\u719f\u6089\u7684\u4e00\u79cd\uff0c\u4e00\u79cd\u7528\u51fd\u6570\u7ec4\u5408\u6765\u8868\u8fbe\u7684\u666e\u904d\u53cb\u597d\u7684\u754c\u9762\u3002\u6d41\u548c\u6d41\u5b57\u8282\u4e32\u90fd\u7ecf\u8fc7\u5de7\u5999\u8bbe\u8ba1\u548c\u6df1\u601d\u719f\u8651\uff1b\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u63a2\u7d22\u4ed6\u4eec\u76f8\u5173\u7684\u8bbe\u8ba1\u51b3\u7b56\u548c\u7531\u6b64\u4ea7\u751f\u7684\u4e60\u8bed\u3002\u4f46\u662f\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e2a\u95ee\u9898\u7684\u6df1\u5ea6\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u8ba8\u8bba Haskell \u5982\u4f55\u8868\u793a\u5b57\u8282\u7f13\u51b2\u533a\u548c\u6570\u636e\u6d41\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u6807\u51c6\u516c\u5f0f\u4e2d\u7684\u9519\u8bef\u5982\u4f55\u4e3a\u6d41\u5b57\u8282\u4e32\u63d0\u4f9b\u5176\u5b58\u5728\u7684\u7406\u7531\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u719f\u6089 Haskell \u5b57\u7b26\u4e32\u7c7b\u578b\u548c\u60f0\u6027 I/O \u7684\u5371\u9669\uff0c\u8bf7\u968f\u610f\u8df3\u5230\u4e0b\u4e00\u8282\u3002 Haskell \u56e0\u5176\u8fc7\u591a\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u800c\u81ed\u540d\u662d\u8457\uff1aString\uff08\u56db\u5b57\u8282 Char \u503c\u7684\u60f0\u6027\u5217\u8868\uff09\uff1b\u4e25\u683c\u548c\u60f0\u6027\u6587\u672c\u503c\uff0c\u4ee5\u53ca\u4e25\u683c\u3001\u60f0\u6027\u548c\u77ed\u5b57\u8282\u4e32\u503c\u5b57\u8282\u4e32\u5305\u4e5f\u63d0\u4f9b\u4e86Data.ByteString.Char8\u548cData.ByteString.Char8.Lazy\uff0c\u4f46\u5b83\u4eec\u5b9e\u9645\u4e0a\u5728\u5185\u5b58\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u5e76\u63d0\u4f9b\u5904\u7406Char \u548c String \u503c\u800c\u4e0d\u662f Word8 \u548c [Word8]\uff0c\u524d\u8005\u53ef\u4ee5\u66f4\u81ea\u7136\uff0c\u53ea\u8981\u60a8\u77e5\u9053\u60a8\u7684\u8f93\u5165\u662f Latin-1 \u517c\u5bb9\u7684\u3002 .\u5c31\u672c\u6587\u800c\u8a00\uff0c\u6211\u4eec\u4e0d\u4f1a\u62c5\u5fc3 String \u6216 Text\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u5bf9\u5df2\u77e5\u4e3a\u6709\u6548 Unicode \u6570\u636e\u7684\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\u6211\u4eec\u7684\u6d41\u7ba1\u9053\u5bf9\u5b57\u8282\u8fdb\u884c\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f Unicode \u5b57\u7b26\u2014\u2014\u5982\u679c\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5728\u8fd9\u6837\u7684\u7ba1\u9053\u4e2d\u5bf9\u4e8c\u8fdb\u5236\u6570\u636e\u8fdb\u884c\u64cd\u4f5c\uff0c\u90a3\u4e48\u8bd5\u56fe\u5c06\u8fd9\u4e9b\u6570\u636e\u8868\u793a\u4e3a Unicode \u6587\u672c\u672c\u8d28\u4e0a\u662f\u9519\u8bef\u7684\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u53ea\u5173\u6ce8 Haskell \u7684\u5b57\u8282\u7f13\u51b2\u533a\u7c7b\u578b ByteString\u3002 Strict ByteStrings \u5f88\u5bb9\u6613\u7406\u89e3\uff1a\nmodule Data.ByteString where data ByteString -- strict = BS {-# UNPACK #-} !( ForeignPtr Word8) -- payload {-# UNPACK #-} \uff01 int\u2014\u2014\u957f\u5ea6 ByteString \u8868\u793a\u4e00\u4e2a\u5b57\u8282\u7f13\u51b2\u533a\u53ca\u5176\u76f8\u5173\u957f\u5ea6\uff1b\u5728\u8fd9\u65b9\u9762\u5b83\u7c7b\u4f3c\u4e8e Go \u7684 []byte \u6216 Rust \u7684 &amp;[u8] \uff08\u5c3d\u7ba1\u5b83\u8981\u8ddf\u8e2a\u7684\u6570\u636e\u5c11\u4e86\u4e00\u4e2a\uff0c\u56e0\u4e3a Rust \u548c Go \u7c7b\u578b\u63d0\u4f9b\u5bf9\u76f8\u5173\u5b57\u8282\u7f13\u51b2\u533a\u7684\u53ef\u53d8\u8bbf\u95ee\uff0c\u56e0\u6b64\u5fc5\u987b\u8ddf\u8e2a\u5176\u603b\u5bb9\u91cf\uff09 . ByteString \u503c\u53ef\u4ee5\u5305\u542b NUL \u5b57\u8282\uff0c\u6216\u8005\u5b9e\u9645\u4e0a\u4efb\u4f55\u5176\u4ed6 Word8 \u503c\u3002\u5982\u679c\u7ed9\u5b9a\u7684 ByteString \u8868\u793a\u4eba\u7c7b\u53ef\u8bfb\u7684\u6587\u672c\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 Data.Text.Encoding\uff08\u5bf9\u4e8e UTF-8/16/32\uff09\u6216\u7f16\u7801\u5e93\u5c06\u5176\u663e\u5f0f\u8f6c\u6362\u4e3a Text \u503c\u6216 String \u503c\uff1b\u8f6c\u6362\u5931\u8d25\u5e94\u8be5\u5728\u8fd9\u4e9b\u8c03\u7528\u70b9\u5904\u7406\uff0c\u5c3d\u7ba1\u6b63\u786e\u7684\u884c\u4e3a\u901a\u5e38\u662f\u629b\u51fa\u5f02\u5e38\u3002\u901a\u8fc7\u63d0\u53d6\u8be5 ForeignPtr Word8 \u5e76\u5c06\u5176\u89c6\u4e3a\u5b83\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\uff0c\u6b64\u8868\u793a\u8fd8\u5141\u8bb8\u5feb\u901f\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e3a C char* \u503c\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u901a\u8fc7\u4ece\u53e6\u4e00\u4e2a\u6e90\uff08\u5982\u53e6\u4e00\u4e2a ByteString \u6216\u4ece\u5957\u63a5\u5b57\uff09\u590d\u5236\u6765\u521b\u5efa ForeignPtr Word8\uff0c\u6216\u8005\u901a\u8fc7\u4f7f\u7528\u4e0d\u5b89\u5168\u7684 ByteString \u64cd\u4f5c\uff08\u8fd9\u53ef\u80fd\u4f1a\u7834\u574f\u5f15\u7528\u900f\u660e\u6027\uff0c\u4f46\u6709\u65f6\u5728\u6781\u4f4e\u7ea7\u522b\u7684\u4ee3\u7801\u4e2d\u662f\u5fc5\u8981\u7684\uff09\u800c\u4e0d\u8fdb\u884c\u590d\u5236\uff09\u3002\u652f\u6301 O(1) \u957f\u5ea6\u548c\u7d22\u5f15\u4ee5\u53ca O(n) \u8fde\u63a5\u7684\u5185\u5b58\u548c\u957f\u5ea6\u5bf9\u975e\u5e38\u7b80\u5355\u3002\u66f4\u6709\u8da3\u7684\u662f\u8fd9\u79cd\u7c7b\u578b\uff0c\u61d2\u60f0\u7684 ByteString\u3002\u4e3a\u4e86\u793a\u4f8b\u7684\u6e05\u6670\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e0e bytestring \u4e0d\u540c\u7684\u7c7b\u578b\u540d\u79f0\uff0c\u5b83\u5bf9\u60f0\u6027\u548c\u4e25\u683c\u53d8\u4f53\u90fd\u4f7f\u7528 ByteString \u540d\u79f0\uff0c\u901a\u8fc7\u6a21\u5757\u540d\u79f0\u6d88\u9664\u6b67\u4e49\uff08Data.ByteString \u8868\u793a\u4e25\u683c\uff0cData.ByteString.Lazy\u56e0\u4e3a\u61d2\uff09\u3002 module Data.ByteString.Lazy where import Data.ByteString \u9650\u5b9a\u4e3a\u4e25\u683c\u6570\u636e ByteString = Empty |\u5927\u5757{-#\u89e3\u5305#-}\uff01 Strict.ByteString ByteString -- ^ head chunk -- ^ lazy tail \u8fd9\u4e0d\u662f\u4e00\u4e2a\u4e25\u683c\u8bc4\u4f30\u7684\u7f13\u51b2\u533a\u548c\u957f\u5ea6\u5bf9\uff0c\u800c\u662f\u4e00\u4e2a\u60f0\u6027\u5217\u8868\uff0c\u7c7b\u4f3c\u4e8e\u6211\u4eec\u7528 [ByteString] \u8868\u793a\u5b83\u7684\u60c5\u51b5\uff1aEmpty \u662f\u50cf [] \u548c Chunk \u5c31\u50cf : \u64cd\u4f5c\u7b26\u3002\u552f\u4e00\u7684\u64cd\u4f5c\u533a\u522b\u662f\u7b2c\u4e00\u4e2a\u4e25\u683c\u7684 ByteString \u53c2\u6570\u88ab\u4e25\u683c\u8bc4\u4f30\uff0c\u8fd9\u7a0d\u5fae\u51cf\u5c11\u4e86\u5b83\u5728\u5185\u5b58\u4e2d\u7684\u5f00\u9500\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u60f0\u6027 ByteString \u8868\u793a\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\uff0c\u5e76\u4e0d\u4e25\u683c\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4f01\u4e1a\u7684\u91cd\u70b9\u662f\u8ba9 Haskell \u8fd0\u884c\u65f6\u7ba1\u7406\u4e0e\u6211\u4eec\u7684\u5b57\u8282\u7f13\u51b2\u533a\u60f0\u6027\u5217\u8868\u76f8\u5173\u7684\u60f0\u6027\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u91cd\u8981\uff1aGHC \u7684\u8bc4\u4f30\u5668\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5fae\u8c03\u7684\u5de5\u5177\uff0c\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u56e0\u6b64\u800c\u6539\u8fdb\u3002\u8fd9\u8ba9\u6211\u4eec\u60f3\u8c61\u4e00\u4e0b ByteStream.Lazy.readFile \u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a\u7ed9\u5b9a\u4e00\u4e9b\u5757\u5927\u5c0f N\uff0c\u8fd0\u884c\u65f6\u5c06\u4ece\u6e90\u8bfb\u53d6 N \u4e2a\u5b57\u8282\uff0c\u5c06\u5b83\u4eec\u653e\u5728 !ByteString \u53c2\u6570\u4e2d\u3002\u7136\u540e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c06\u662f\u4e00\u4e2a thunk\uff0c\u5982\u679c\u6c42\u503c\uff0c\u5c06\u8bfb\u53d6\u53e6\u4e00\u4e2a\u6700\u5927\u957f\u5ea6\u4e3a N \u7684\u5b57\u8282\u7f13\u51b2\u533a\u3002\u5982\u679c\u4ece\u4e0d\u6c42\u503c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u7684\u8c03\u7528\u4ee3\u7801\u53ea\u5bf9\u524d N \u4e2a\u5b57\u8282\u8fdb\u884c\u64cd\u4f5c\uff0c\u5219 Lazy\u3002 ByteString \u53c2\u6570\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u8bc4\u4f30\uff0c\u5e76\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u4ea7\u751f\u8bfb\u53d6\u66f4\u591a\u5b57\u8282\u7684\u5f00\u9500\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u6216\u591a\u6216\u5c11\u662f\u8be5\u529f\u80fd\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u7136\u800c\uff0c\u4ece\u78c1\u76d8\u61d2\u60f0\u5730\u8bfb\u53d6\u6587\u4ef6\u65f6\uff0c\u61d2\u60f0\u7684 ByteString \u503c\u4e0d\u80fd\u53ef\u9760\u5730\u5de5\u4f5c\u3002\u5b83\u8fdd\u53cd\u4e86\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u539f\u5219\uff1a\u4e00\u65e6\u8bfb\u53d6\u4e86\u4e00\u4e2a\u5757\uff0c\u8bfb\u53d6\u5176\u5d4c\u5165\u7684 ByteString \u9700\u8981\u8bc4\u4f30\u5b83\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u8fd9\u9700\u8981\u8fdb\u4e00\u6b65\u7684\u7cfb\u7edf\u8c03\u7528\u6765\u6267\u884c\u8fdb\u4e00\u6b65\u9700\u8981\u7684\u78c1\u76d8 I/O \u4ee5\u6784\u5efa\u53e6\u4e00\u4e2a\u5757\uff08\u6216\u8005\u4e00\u4e2a Empty\uff0c\u5982\u679c\u6211\u4eecre \u5728\u6587\u4ef6\u672b\u5c3e\uff09\u3002\u5982\u679c\u8fd9\u4e9b\u7cfb\u7edf\u8c03\u7528\u5f15\u7528\u5df2\u5173\u95ed\u7684\u5957\u63a5\u5b57\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u6211\u4eec\u5c06\u9047\u5230\u8fd0\u884c\u65f6\u5d29\u6e83\u3002\u5373\u4f7f openFile \u53d1\u751f\u5728 IO monad \u4e2d\uff0c\u751f\u6210\u7684 ByteString \u4e5f\u5c06 IO \u90aa\u6076\u5730\u9690\u85cf\u5728\u5176\u4e2d\uff0c\u5373\u4f7f\u4f20\u9012\u5230\u5b83\u5e94\u8be5\u662f\u7eaf\u7684\u4e0a\u4e0b\u6587\u65f6\u4e5f\u662f\u5982\u6b64\u3002\u6211\u5df2\u7ecf\u770b\u5230\u8fd9\u88ab\u79f0\u4e3a\u201c\u4f2a\u7eaf\u201d\uff1a\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u7eaf\u8ba1\u7b97\uff0c\u4f46\u5b83\u53ef\u80fd\u5bfc\u81f4 I/O \u53d1\u751f\u5728\u5176\u4ed6\u5730\u65b9\uff0c\u5373\u4f7f\u5b83\u6709\u6548\uff0c\u4e5f\u4e0d\u662f Haskell \u65b9\u5f0f\u3002 I/O \u592a\u91cd\u8981\u4e86\uff0c\u4e0d\u80fd\u9690\u5f0f\uff01\n\u8fd9\u4e00\u76f4\u662f\u4e00\u79cd\u975e\u5e38\u5197\u957f\u7684\u65b9\u5f0f\u6765\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5728\u5b58\u5728\u60f0\u6027 I/O \u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u57fa\u672c\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u6ee1\u8db3\u6211\u4eec\u7684\u6240\u6709\u6807\u51c6\uff1a\u4e25\u683c\u7684 ByteString \u88ab\u4e00\u6b21\u6027\u8bfb\u5165\u5185\u5b58\uff0c\u8fd9\u8fdd\u53cd\u4e86\u6211\u4eec\u5bf9\u60f0\u6027\u7684\u9700\u6c42\u548c\u6301\u7eed\u7684\u8d44\u6e90\u6d88\u8017\uff1b Lazy.ByteString \u8fdd\u53cd\u4e86\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u539f\u5219\uff0c\u9664\u975e\u60a8\u4f7f\u7528 Haskell \u5bf9\u7ebf\u6027\u7c7b\u578b\u7684\u5b9e\u9a8c\u6027\u652f\u6301\uff0c\u8fd9\u53ef\u4ee5\u9632\u6b62\u60f0\u6027\u5b57\u8282\u4e32\u8d85\u8fc7\u5176\u5173\u8054\u7684\u6587\u4ef6\u53e5\u67c4\uff08\u5c3d\u7ba1\u7ebf\u6027\u7c7b\u578b\u662f\u5c1a\u672a\u5e7f\u6cdb\u91c7\u7528\u7684\u524d\u6cbf\u7279\u6027\uff09\u3002\u73b0\u5728\uff0c\u8fd9\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u91cd\u8981\u7684\u3002\u60a8\u7684\u7a0b\u5e8f\u53ef\u80fd\u53ea\u5904\u7406\u5c0f\u6587\u4ef6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u6839\u672c\u4e0d\u9700\u8981\u60f0\u6027 I/O\uff1a\u60a8\u53ea\u9700\u5c06\u6587\u4ef6\u5185\u5bb9\u4f5c\u4e3a\u4e25\u683c\u7684 ByteString \u8bfb\u53d6\u5373\u53ef\u3002\u73b0\u5728\u7684\u8ba1\u7b97\u673a\u6709\u5f88\u591a\u5185\u5b58\u3002\u4f46\u662f Haskell \u662f\u4e00\u79cd\u61d2\u60f0\u7684\u8bed\u8a00\uff0c\u5b83\u64c5\u957f\u89e3\u51b3\u53ef\u4ee5\u61d2\u60f0\u5730\u63aa\u8f9e\u7684\u95ee\u9898\u3002\u5982\u679c\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\u662f\u60f0\u6027\u6d41\u5904\u7406\u7684\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u67d0\u79cd\u62bd\u8c61\uff0c\u53ef\u4ee5\u4ece\u5177\u6709\u6052\u5b9a\u5185\u5b58\u6d88\u8017\u3001\u6700\u5c11\u590d\u5236\u548c\u5b89\u5168\u3001\u786e\u5b9a\u6027\u8d44\u6e90\u6e05\u7406\u7684\u6570\u636e\u6e90\u4e2d\u60f0\u6027\u5730\u6d41\u5f0f\u4f20\u8f93\u5b57\u8282\u7f13\u51b2\u533a\u3002\u6d41\u3001\u6d41\u5b57\u8282\u4e32\u548c\u8d44\u6e90\u7684\u4e09\u91cd\u594f\u5904\u7406\u4e86\u8fd9\u4e00\u70b9\uff1a\u8ba9\u6211\u4eec\u770b\u4e00\u770b\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002 Stream \u7c7b\u578b Stream (Of a) mr \u8868\u793a\u80fd\u591f\u4ea7\u751f\u96f6\u4e2a\u6216\u591a\u4e2a a \u503c\u3001\u5728 m \u4e2d\u6267\u884c\u6548\u679c\u5e76\u8fd4\u56de\u6700\u7ec8 r \u7ed3\u679c\u7c7b\u578b\u7684\u6d41\u3002\u6211\u4eec\u53ef\u4ee5\u5728 Stream \u672c\u8eab\u7684\u5b9a\u4e49\u4e2d\u770b\u5230\u8fd9\u4e9b\u529f\u80fd\uff1a\u8fd9\u6837\u7684\u8ba1\u7b97\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u8ba1\u7b97\u8fc7\u7684 Step\uff0c\u5d4c\u5165\u4e00\u4e2a monadic Effect\uff0c\u6216\u8005\u7b80\u5355\u5730\u8fd4\u56de\u4e00\u4e2a\u7eaf\u503c\u3002 module Streaming where data Stream fmr = Step !(f ( Stream fmr)) -- \u4ea7\u751f\u4e00\u4e2a\u9879\u76ee\uff0c\u4ee5\u53ca\u4e00\u4e2a\u6d41\u7684\u5176\u4f59\u90e8\u5206\uff0c\u7531\u51fd\u5b50 f | \u5b9a\u4e49\u3002 Effect (m ( Stream fmr)) -- \u6267\u884c\u4e00\u4e9b\u5bfc\u81f4\u8fdb\u4e00\u6b65\u6d41\u7684\u4e00\u5143\u6548\u5e94 | return r -- \u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u8fd4\u56de\u4e00\u4e2a\u6700\u7ec8\u503c \u4f5c\u4e3a f \u7684\u503c\u6700\u5e38\u7528\u7684\u51fd\u5b50\u662f Of \u51fd\u5b50\uff0c\u5b83\u4e0e\u5143\u7ec4\u7c7b\u578b (,) \u76f8\u540c\uff0c\u4f46\u5b83\u7684\u5de6\u53c2\u6570\u662f\u4e25\u683c\u7684\uff0c\u518d\u6b21\u907f\u514d\u4e86\u5f53\u6211\u4eec\u77e5\u9053\u6240\u8ba8\u8bba\u7684\u503c\u5df2\u7ecf\u88ab\u8bc4\u4f30\u65f6\uff0c\u4e00\u4e2a\u60f0\u6027\u503c\u3002\n\u8fd0\u884c Stream \u7684\u5e38\u7528\u65b9\u6cd5\u662f\u8c03\u7528 Streaming.toList\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a Of-pair\uff0c\u5176\u4e2d\u5305\u542b\u751f\u6210\u7684 a \u503c\u548c\u6700\u7ec8 r \u7684\u5217\u8868\u3002\u8bf7\u6ce8\u610f\uff0cOf \u90e8\u5206\u5e94\u7528\u4e8e\u6d41\u4e2d\uff0c\u5176\u53c2\u6570 a \u662f\u6d41\u4ea7\u751f\u7684\u5143\u7d20\u7c7b\u578b\u3002 toList :: Monad m =&gt; Stream ( Of a) mr -&gt; m ( Of [a] r) \u8fd9\u91cc\u6ca1\u6709\u4efb\u4f55\u7279\u5b9a\u4e8e\u5b57\u8282\u4e32\u6216 I/O \u7684\u5185\u5bb9\uff0c\u8fd9\u610f\u5473\u7740 Stream \u9002\u7528\u4e8e\u5728\u4efb\u4f55 monad \u4e2d\u6784\u5efa\u6d41\u62bd\u8c61\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fIO\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cByteStream \u5173\u200b\u200b\u5fc3\u7684\u662f\u4fdd\u5b58\u5206\u5757\u7684 ByteString \u503c\uff0c\u800c\u4e0d\u662f Stream\uff1a\u6a21\u5757 Streaming.ByteString \u6570\u636e ByteStream mr = Empty r |\u5927\u5757{-#\u89e3\u5305#-}\uff01 ByteString ( ByteStream \u5148\u751f) | Go (m ( ByteStream mr)) \u60a8\u4f1a\u6ce8\u610f\u5230 ByteStream \u4e0e Lazy.ByteString \u76f8\u4f3c\uff0c\u4f46\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\u9996\u5148\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4e24\u4e2a\u7c7b\u578b\u53d8\u91cf m \u548c r\uff1am \u8868\u793a\u4e00\u4e2a monadic \u4e0a\u4e0b\u6587\uff0c\u4f7f\u7528 Go \u6784\u9020\u51fd\u6570\uff0c\u5206\u5757\u8bfb\u53d6\u53ef\u4ee5\u901a\u8fc7\u5b83\u6267\u884c\u526f\u4f5c\u7528\u3002\u8fd9\u4e2a Go \u6784\u9020\u51fd\u6570\u4e5f\u662f\u65b0\u7684\uff1b\u5b83\u660e\u786e\u8868\u793a\uff0c\u8bfb\u53d6\u66f4\u591a ByteString \u5757\u4f1a\u5bfc\u81f4\u526f\u4f5c\u7528\uff0c\u8fd9\u4e0e Lazy.ByteString \u4e0d\u540c\uff0c\u540e\u8005\u9690\u85cf\u4e86\u4ece\u78c1\u76d8\u8bfb\u53d6\u957f\u5b57\u7b26\u4e32\u65f6\u53ef\u80fd\u53d1\u751f\u6587\u4ef6 I/O \u7684\u4e8b\u5b9e\u3002\u901a\u8fc7\u4f7f\u7528 MonadResource \u6e05\u7406\u6587\u4ef6\u53e5\u67c4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u7cfb\u7edf\u6307\u793a\u4ece ByteString \u4e2d\u8bfb\u53d6 ByteString \u503c\u9700\u8981\u78c1\u76d8 I/O\uff0c\u5e76\u4e14\u5fc5\u987b\u6e05\u9664\u6587\u4ef6\u53e5\u67c4\u6216\u4e34\u65f6\u6570\u636e\u7684\u4efb\u4f55\u5730\u65b9\u7684 MonadResource \u7ea6\u675f\u7ebf\u7a0b\u3002\u6700\u540e\uff0cEmpty \u6784\u9020\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a r \u53c2\u6570\uff0c\u8868\u793a\u7ed9\u5b9a ByteStream \u8ba1\u7b97\u7684\u6700\u7ec8\u503c\uff08\u5982\u679c\u6709\uff09\u3002 ByteStream \u548c\u61d2\u60f0\u7684 ByteString \u4e4b\u95f4\u7684\u533a\u522b\u53ef\u80fd\u770b\u8d77\u6765\u5e76\u4e0d\u5927\uff0c\u4f46\u5b83\u4ee3\u8868\u4e86 Haskell \u975e\u5e38\u6df1\u523b\u7684\u4e00\u4e9b\u4e1c\u897f\uff1a\u901a\u5e38\uff0c\u6211\u4eec\u901a\u8fc7\u5c06\u8ba1\u7b97\u89c6\u4e3a\u6570\u636e\u6765\u83b7\u5f97\u8868\u8fbe\u80fd\u529b\u3002 ByteStream \u6709\u4e00\u4e2a Go \u6784\u9020\u51fd\u6570\uff0c\u5b83\u5141\u8bb8\u5d4c\u5165\u4efb\u610f m-actions\uff0c\u53ea\u8981\u5b83\u4eec\u8fd4\u56de\u8fdb\u4e00\u6b65\u7684 ByteStream\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u4f7f ByteStream \u80fd\u591f\u8868\u793a\u4efb\u4f55\u7c7b\u578b\u7684\u8ba1\u7b97\u3002\u5728\u7cfb\u7edf\u4ea7\u751f\u7684 ByteStream \u503c\u7684\u60c5\u51b5\u4e0b\uff0cm \u53ef\u4ee5\u662f IO\uff0c\u6216\u5b9e\u73b0 MonadIO \u7684 monad \u8f6c\u6362\u5668\uff0c\u6216\u5b9e\u73b0 Lift IO \u7684\u6548\u679c\u5806\u6808\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u63d0\u524d\u5b9a\u4e49\u7684 ByteStream\uff0c\u90a3\u4e48 m \u53ef\u4ee5\u662f Identity\u3002\u4e00\u4e2a\u6709\u8da3\u7684\u7ed3\u679c\u662f ByteStream \u7684 Show \u5b9e\u4f8b\uff0c\u5b83\u8981\u6c42 m \u53c2\u6570\u4e3a Identity \u5e76\u4e14 r \u8fd4\u56de\u7c7b\u578b\u4e3a ()\uff0c\u56e0\u4e3a Show \u7c7b\u578b\u7c7b\u65e0\u6cd5\u8bbf\u95ee\u6253\u5370\u8f93\u51fa\u6240\u9700\u7684 monadic \u4e0a\u4e0b\u6587\uff0c\u4f8b\u5982\uff0c\u9700\u8981 IO \u6765\u6267\u884c\u5176\u6548\u679c\u7684 ByteStream\u3002 \uff08\u8981\u6253\u5370\u8fd9\u6837\u7684 ByteStream\uff0c\u60a8\u9700\u8981\u5c06\u5b83\u4f20\u9012\u7ed9\u7c7b\u578b\u4e3a MonadIO m =&gt; ByteStream mr -&gt; mr \u7684 stdout \u6d88\u9664\u5668\uff0c\u5b83\u4f1a\u8bc4\u4f30\u8be5\u6d41\u7684\u6548\u679c\u5e76\u5c06\u5728\u6b64\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4efb\u4f55\u5757\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002\uff09\u6b64\u5916, ByteStream \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u8ba1\u7b97\uff0c\u5b83\u662f\u4e00\u4e2a monad \u8f6c\u6362\u5668\uff0c\u6839\u636e\u4e00\u4e9b\u7236 monad m \u8fdb\u884c\u53c2\u6570\u5316\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u4ee5\u610f\u60f3\u4e0d\u5230\u7684\u65b9\u5f0f\u4f7f\u7528\u5b83\uff0c\u4f8b\u5982\u6211\u4eec\u5feb\u901f\u800c\u80ae\u810f\u7684 Web \u670d\u52a1\u5668\u4e2d\u7684\u57fa\u672c monad\uff1a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6211\u4eec\u7684\u6548\u679c\u5806\u6808\u4e2d\u5fc3\u6709\u4e00\u4e2a ByteStream IO monad \u4f7f\u6211\u4eec\u80fd\u591f\u53d1\u9001\u5b57\u8282\u6d41\u4f7f\u7528 sendM \u51fd\u6570\u65ad\u5f00\u7f51\u7edc\u8fde\u63a5\u3002\u6211\u4eec\u5c06\u8bf7\u6c42\u503c\u7684\u5904\u7406\u5de5\u4f5c\u4ea4\u7ed9 Reader \u6548\u679c\uff0c\u72b6\u6001\u6548\u679c\u8d1f\u8d23\u5904\u7406 Response \u503c\uff0c\u4f46\u662f HTTP \u5904\u7406\u7a0b\u5e8f\u8981\u6267\u884c\u4efb\u4f55\u6709\u7528\u7684\u64cd\u4f5c\uff0c\u5b83\u5fc5\u987b\u80fd\u591f\u8bbf\u95ee\u5b57\u8282\u63a5\u6536\u5668\u3002\u4f7f\u7528 Lift (ByteStream IO) \u5141\u8bb8\u6211\u4eec\u8bbf\u95ee\u6b64\u7c7b\u529f\u80fd\uff0c\u800c\u65e0\u9700\u900f\u9732\u8fd9\u4e9b\u5b57\u8282\u6700\u7ec8\u4f20\u8f93\u7ed9\u7528\u6237\u7684\u65b9\u5f0f\uff08\u6211\u4eec\u53ea\u77e5\u9053\u5b83\u53d1\u751f\u5728 IO \u4e2d\uff0c\u5b9e\u9645\u4e0a\u6240\u6709\u7f51\u7edc\u6d3b\u52a8\u90fd\u5fc5\u987b\u8fd9\u6837\u505a\uff09\u3002\n\u68c0\u67e5\u6784\u9020 ByteStream \u503c\u7684\u65b9\u6cd5\u4f7f ByteString\u3001Stream \u548c ByteStream \u4e4b\u95f4\u7684\u5173\u7cfb\u66f4\u52a0\u6e05\u6670\uff1a -- \u7a7a ByteString \u53ef\u6cdb\u5316\u4e3a\u4efb\u4f55 m\uff0c\u4f46\u4e0d\u643a\u5e26\u4efb\u4f55\u503c -- \u5728\u5176\u8fd4\u56de\u7c7b\u578b\u4e2d\u3002 empty :: ByteStream m() -- \u5f53\u524d\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u5165\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u5b57\u8282\u6d41\uff0c -- \u4f7f\u7528&#39;MonadIO&#39;\u4ece\u8f93\u5165\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e2d\u5b9e\u9645\u8bfb\u53d6\u3002 stdin :: MonadIO m =&gt; ByteStream m () -- \u5982\u679c\u6211\u4eec\u5df2\u7ecf\u6709\u4e00\u4e2a\u4e25\u683c\u7684 ByteString\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 -- &#39;Chunk&#39;\uff08\u548c\u4e00\u4e2a &#39;Empty&#39; \u5c3e\u90e8\uff09\u6253\u5305\u5b83\u3002 fromStrict :: Strict.ByteString -&gt; ByteStream m () -- \u4ece\u61d2\u60f0\u7684 ByteStream \u8f6c\u6362\u4e3a ByteString \u662f -- \u6298\u53e0\u524d\u8005\uff0c\u66ff\u6362 &#39;Empty&#39; \u548c &#39;Chunk&#39; -- \u6784\u9020\u51fd\u6570\u4e0e ByteStream \u63d0\u4f9b\u7684\u6784\u9020\u51fd\u6570. fromLazy :: Lazy.ByteString -&gt; ByteStream m () -- \u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ByteStream \u89c6\u4e3a\u4e00\u79cd\u66f4\u6709\u6548\u7684 -- \u8868\u793a\u672a\u5206\u5757\u7684 Word8 \u503c\u7684\u6d41\uff0c\u6216\u5206\u5757\u7684\u4e25\u683c ByteString \u503c\u7684\u6d41\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u4fdd\u7559\u4e86\u8f93\u5165\u6d41\u7684 -- \u8fd4\u56de\u503c\u3002 pack :: Stream (Of Word8) mr -&gt; ByteStream mr fromStream :: Stream (Of Strict.ByteString) mr -&gt; ByteStream mr \u66f4\u6709\u8da3\u7684\u662f\u57fa\u672c\u7684\u6587\u4ef6\u8bfb\u53d6\u65b9\u6cd5\uff0creadFile\u3002\u6709\u8da3\u7684\u662f\uff0c\u8fd9\u662f\u6211\u4eec\u7b2c\u4e00\u6b21\u770b\u5230 MonadResource\uff0c\u4e00\u4e2a\u7531 resourcet \u5305\u63d0\u4f9b\u7684\u7c7b\u578b\u7c7b\u3002 MonadResource \u7c7b\u578b\u7c7b\u8868\u793a\u80fd\u591f\u7ba1\u7406\u5173\u952e\u8d44\u6e90\u751f\u547d\u5468\u671f\u7684 monad\uff0c\u5373\u4f7f\u5728......", "note_en": "One of my favorite founding principles    The cynics among us might refer to it as a myth rather than a principle, given that Unix is no stranger to massive, kitchen-sink programs. Indeed, I\u2019m writing this post in  such a program.   of Unix is the universality of streams of bytes. Unix shells give us a  monadic  pipeline operator  |, that, given some computation  a | b, executes  a so that its output forms the input to  b. This principle affords the  standard Unix commands succinct composition, allowing the executing shell, rather than the programs themselves, to control the flow of data through a composed sequence of shell commands. Indeed, the principle of byte stream manipulation serves as the foundation for entire entire programming languages like  sed and  awk. Tools like  xargs and  tee and  parallel provide higher-order combinators to construct pipelines from further pipelines in ways beyond the capabilities of the pipeline operator itself.\n Let\u2019s consider some properties of programs that work well in pipelined computations such as these, using  grep as the archetypal such program.  grep is, of course, a tool of near-unparalleled importance, being enshrined in the POSIX standard, and it\u2019s been optimized probably as  thoroughly as any other program. Our programs are probably not  grep, but they may need to emulate how  grep manages its input streams:\n It hides the details of resource manipulation. The operating system, its system libraries, the shell in current use, and the implementation of its  | operator hide the details of how input is batched and fed between files. Given that these details are abstracted from us, we should assume that input is buffered and chunked as necessary, and that these buffers and chunks are handled with as little overhead as possible. In particular, byte buffers read from an input stream should only be copied and retained if the program explicitly requests it: old input should never hang around in memory, given that the size of that input is theoretically unbounded.\n It consumes its input lazily. If I tell  grep to search a ten-gigabyte file for one and only one occurrence of a string, it should consume only as much input as is required to fulfill my request. If more bytes are read from a stream than needed, it should be indistinguishable, performance-wise, from reading as little input as is possible, and should produce no change in observable program behavior.\n It cleans up its resources. Should  grep request resources from the OS, or spawn some other helper process, these resources and subprocesses should be reclaimed quickly and reliably, even in the face of upstream or downstream pipeline failures, or even just a user impatiently hammering  Ctrl+C and sending dozens of  SIGKILL signals.\n C programs excel at fulfilling these criteria. Ha! Just kidding. C programs  can excel at streaming data manipulation, because C programming entrusts  you with its details, and you  might be someone who excels at streaming data manipulation. Though the POSIX standard provides certain guarantees    The POSIX standard  specifies that certain resources\u2014file descriptors, directory streams, stream converters from  iconv(), and message catalogs from  catopen\u2014are relinquished upon program exit. Child processes spawned with the  exec family of functions are usually not terminated (unless specifically requested by the parent process or an associated process group). Shared memory may or may not be relinquished, depending on whether other processes are referring to it. This digression is getting long enough as is; read the standard if you\u2019re really curious.   about the manner in which resources are reclaimed upon program exit, you are still responsible for managing resources during program execution. There aren\u2019t too many layers of abstraction between you,  stdin, and  stdout. Sure, if your underlying  FILE* struct can do some caching for you, it probably does, but you can always read directly with  read(2) or with some lower-level efficiency-focused framework like  kqueue,  epoll,  libdispatch, or  io_uring.\n With higher-level, garbage-collected languages, things become a good bit trickier. It is the responsibility of a higher-level language to insulate us from the concerns of C: as with shell scripts, we should have, in the common case, no particular knowledge of how files are read, how memory is allocated, or how input is buffered. For most programs, especially the quick-and-dirty ones at which garbage-collected languages excel, such details won\u2019t matter. But when you find yourself outside the realm of \u201cmost programs\u201d, the situation can prove vexing: the nature of a high-level language to isolate you from decisions made about resource management becomes a problem when the correctness of your software depends on the details of said resource management. We find ourselves confronted with a particularly tricky dialectic: high-level languages aid in the development of programs by abstracting away details, but hinder said development when program correctness depends directly on properties of these abstracted details, such as when writing code that handles error conditions robustly or remains reliable in the presence of resource pressure.    The difficulties encountered when addressing these concerns in portable shell scripts are just one of the many reasons we don\u2019t write everything in shell.\n Haskell\u2019s declarative nature, non-strict evaluation, and correct-by-construction philosophy makes it, at least in theory, an attractive solution for writing code that works well in streaming pipelines. In practice, however, we run into three interrelated but distinct problems, ones that display a nice symmetry with the properties of well-managed input streams outlined above:\n the  streaming problem: how do we write Haskell code that processes potentially-infinite data streams in a finite amount of memory?\n the  lazy I/O problem: given Haskell\u2019s non-strict semantics, how do we consume input from the outside world lazily and efficiently?\n the  resource manipulation problem: given that we have no direct control over the lifetime of data, how do we ensure that our code manages and relinquishes expensive resources correctly?\n I\u2019m going to discuss how to address these problems, using the  streaming ecosystem to address the first point, the  streaming-bytestring library the second, and the  resourcet library the third. Given Haskell\u2019s more-than-one-way-to-do-it philosophy, there exist many alternative ecosystems\u2014libraries like   conduit,   pipes-bytestring,   streamly, and   io-streams all provide tools to address these problems\u2014but the  streaming ecosystem is the one with which I am most familiar, and one with a generally friendly interface expressed with function composition. Both  streaming and  streaming-bytestring are cleverly designed and carefully thought through; I hope that this post serves as an exploration of their associated design decisions and resulting idioms. But to appreciate the depth of the problem, we have to start by discussing how Haskell represents byte buffers and streams of data, and how infelicities in their standard formulation provide  streaming-bytestring its raison d\u2019\u00eatre.\n  Feel free to skip to the next section if you\u2019re already familiar with Haskell string types and the perils of lazy I/O.\n Haskell is notorious for its plethora of string types:  String (a lazy list of four-byte  Char values); strict and lazy  Text values, and strict, lazy, and short  ByteString values    The  bytestring package also provides  Data.ByteString.Char8 and  Data.ByteString.Char8.Lazy, but these actually use the same type in-memory, and provide  APIs dealing in  Char and  String values rather than  Word8 and  [Word8], the former of which can be more natural as long as you know that your input is Latin-1 compatible.  . For the purposes of this article, we\u2019re not going to worry about  String or  Text, because both operate on values known to be valid Unicode data. Our streaming pipelines operate on bytes, not Unicode characters\u2014if, say, we want to be able to operate on binary data in such a pipeline, attempting to represent that data as Unicode text is inherently wrong. As such, we\u2019ll focus only on Haskell\u2019s byte buffer type,  ByteString. Strict  ByteStrings are pretty easy to understand:\n module  Data.ByteString  where     data  ByteString  -- strict    =  BS    {-# UNPACK #-}  !( ForeignPtr  Word8)  -- payload    {-# UNPACK #-}  ! Int  -- length\n ByteString represents a byte buffer and its associated length; in this it is similar to Go\u2019s  []byte or Rust\u2019s  &amp;[u8] (though it has one fewer datum to track, as the Rust and Go types offer mutable access to the associated byte buffer and thus must keep track of its total capacity).  ByteString values can contain  NUL bytes, or indeed any other  Word8 value. If a given  ByteString represents human-readable text, it must be converted to  Text values explicitly with  Data.Text.Encoding (for UTF-8/16/32) or  String values with the   encoding library; conversion failures should be handled at those callsites, though the correct behavior is often to throw an exception. This representation also allows for quick serialization and deserialization to C  char* values, by extracting that  ForeignPtr Word8 and treating it as the memory address that it is. Similarly, we can choose to create that  ForeignPtr Word8 by copying from another source (like another  ByteString or from a socket), or without copying by using unsafe  ByteString operations (which can break referential transparency, but are sometimes necessary in extremely low-level code).\n A memory and length pair, supporting O(1) length and indexing and O(n) concatenation, is pretty straightforward. More interesting is this type, the lazy  ByteString. For the sake of clarity of examples, we\u2019ll use a different type name than does  bytestring, which uses the  ByteString name for both lazy and strict variants, disambiguating via the module name ( Data.ByteString for strict, and  Data.ByteString.Lazy for lazy).\n module  Data.ByteString.Lazy  where     import  Data.ByteString  qualified  as  Strict     data  ByteString    =  Empty    |  Chunk  {-# UNPACK #-}  ! Strict.ByteString  ByteString    -- ^ head chunk -- ^ lazy tail\n Rather than being a strictly evaluated pair of buffer and length, this is a lazy list, similar to what we would have were we to represent it with  [ByteString]:  Empty is like  [] and  Chunk is like the  : operator. The only operative difference is that the first strict  ByteString parameter is evaluated strictly, which slightly reduces its overhead in memory. The second parameter, a lazy  ByteString representing the rest of the string, is  not strict, since the whole point of this enterprise is to let the Haskell runtime manage the laziness associated with our lazy list of byte buffers. This sounds like a great deal: GHC\u2019s evaluator is a finely-tuned instrument, and it\u2019s unlikely that we can improve thereupon.\n This lets us imagine how  ByteStream.Lazy.readFile would work: given some chunk size N, the runtime would read  N bytes from a source, placing them in the  !ByteString parameter. The second parameter would then be a thunk that, if evaluated, would read another byte buffer of maximum length  N. If that second parameter is never evaluated\u2014in other words, if our calling code operates only on the first  N bytes, the  Lazy.ByteString parameter will never be evaluated, and the overhead of reading further bytes is never incurred. This, indeed, is more-or-less how that function  is implemented.\n Yet lazy  ByteString values  don\u2019t work reliably when reading files lazily from disk. It violates the principle of deterministic resource cleanup: once a  Chunk is read, reading beyond its embedded  ByteString requires evaluating its second parameter, which entails further system calls to perform further needed disk I/O to build another  Chunk (or an  Empty if we\u2019re at the end of the file). Should those system calls reference a socket or file descriptor that has since been closed, we\u2019ll encounter a runtime crash. Even though  openFile takes place in the  IO monad, the resulting  ByteString has  IO hidden nefariously within, even when passed to contexts where it should be pure. I\u2019ve seen this referred to as \u201cpseudo-pure\u201d: it may look like a pure computation, but it can incur I/O happening somewhere else, which, even if it works, is not the Haskell way. I/O is too important to be left implicit!\n This has all been an exceptionally long-winded way to explain why no basic string type fulfills all our criteria in the presence of lazy I/O:\n A strict  ByteString is read all-at-once into memory, which violates both our need for laziness and constant resource consumption;\n Lazy.ByteString violates the princple of deterministic resource cleanup, unless you use Haskell\u2019s experimental support for linear types, which prevent lazy bytestrings from outliving their associated file handle (though linear types are a bleeding-edge feature that have yet to see widespread adoption).\n Now, this may not always matter. Your program may deal only in small files, in which case you don\u2019t need lazy I/O at all: you can just read file contents in as a strict  ByteString and you\u2019ll be okay. Computers have a  lot of memory nowadays. But Haskell is a lazy language, and it excels at problems that can be phrased lazily. Should our business logic be a matter of lazy stream processing, we need some sort of abstraction that can lazily stream byte buffers from a source of data with constant memory consumption, minimal copying, and safe, deterministic resource cleanup. The trifecta of  streaming,  streaming-bytestring, and  resourcet take care of this: let\u2019s take a look and see how it works.\n   The  Stream type  Stream (Of a) m r represents a stream capable of yielding zero or more  a values, performing effects in  m, and returning a final  r result type. We can see these capabilities in the definition of  Stream itself: such a computation can yield a computed  Step, embed a monadic  Effect, or simply  Return a pure value.\n module  Streaming  where     data  Stream f m r    =  Step  !(f ( Stream f m r))  -- yield an item, and the rest of a stream, defined by the functor f    |  Effect (m ( Stream f m r))  -- perform some monadic effect resulting in a further stream    |  Return r  -- do nothing and return a final value\n The most common functor used as the value of  f is the  Of functor, which is identical to the tuple type  (,), but strict in its left argument, again to avoid the overhead of a lazy value when we know that the value in question has already been evaluated.\n  The usual way to run a  Stream is to call  Streaming.toList, which returns an  Of-pair containing a list of yielded  a values and a final  r. Note that  Of is partially applied within the  Stream, with its parameter  a being the type of elements a stream yields.\n toList ::  Monad m  =&gt;  Stream ( Of a) m r  -&gt; m ( Of [a] r)\n There\u2019s nothing here specific to bytestrings or I/O, which means that  Stream is suitable for building streaming abstractions in any monad, not just  IO. In contrast,  ByteStream is concerned with holding chunked  ByteString values, not with  Stream:\n module  Streaming.ByteString     data  ByteStream m r    =  Empty r    |  Chunk  {-# UNPACK #-}  ! ByteString ( ByteStream m r)    |  Go (m ( ByteStream m r))\n You\u2019ll notice that  ByteStream is similar to  Lazy.ByteString, with a few differences. Firstly, it has access to two type variables  m and  r:  m represents a monadic context, with which chunked reads can perform side effects, using the  Go constructor. This  Go constructor is also new; it makes it explicit that reading further  ByteString chunks can cause side effects, unlike  Lazy.ByteString, which hid the fact that file I/O may occur when reading long strings from disk. By using  MonadResource to clean up file handles, we can indicate, with the type system, that reading  ByteString values out of a  ByteString entails disk I/O, and thread that  MonadResource constraint anywhere that file handles or ephemeral data must be cleaned up. Lastly, the  Empty constructor takes an  r argument, representing the final value, if any, of a given  ByteStream computation.\n The difference between  ByteStream and the lazy  ByteString might not seem seismic, but it represents something very profound about Haskell: often, we gain expressive power by treating  computations as data. The fact that  ByteStream has a  Go constructor, which allows embedding arbitrary  m-actions as long as they return a further  ByteStream, gives  ByteStream the ability to represent any kind of computation. In the case of  ByteStream values yielded from the system, that  m can be  IO, or a monad transformer implementing  MonadIO, or an effect stack implementing  Lift IO. But if we were dealing with a  ByteStream defined ahead of time, that  m can be  Identity.    An interesting consequence of this is the  Show instance for  ByteStream, which requires the  m parameter to be  Identity and the  r return type to be  (), because the  Show typeclass does not have access to the monadic context required to print out, say, a  ByteStream that needs  IO to perform its effects. (To print such a  ByteStream, you\u2019d pass it to the  stdout eliminator, of type  MonadIO m =&gt; ByteStream m r -&gt; m r, which evaluates that stream for its effects and prints to the console any chunks encountered while doing so.)\n Furthermore,  ByteStream isn\u2019t just a computation, it\u2019s a monad transformer, parameterized in terms of some parent monad  m. This means we can use it in unexpected ways, such as the base monad in our  quick-and-dirty web server: in that case, having a  ByteStream IO monad at the center of our effect stack gave us the capability to send streams of bytes down a network connection, using the  sendM function. We farmed out the handling of  Request values to the  Reader effect, and a  State effect took care of handling  Response values, but for an HTTP handler to do anything useful, it must have access to a sink of bytes. Using  Lift (ByteStream IO) allowed us access to such capabilities, without divulging the way in which these bytes are ultimately transmitted to the user (all we know is that it happens in  IO, as indeed all network activity must).\n  Examining the ways to construct  ByteStream values makes the relationship between  ByteString,  Stream, and  ByteStream clearer:\n -- An empty ByteString is generalizable to any m, but carries no value   -- in its return type.   empty ::  ByteStream m ()     -- The current program&#39;s standard input is itself a stream of bytes,   -- using &#39;MonadIO&#39; to actually read from the input&#39;s file descriptor.   stdin ::  MonadIO m  =&gt;  ByteStream m ()     -- If we already have a strict ByteString, we can package it up with   -- &#39;Chunk&#39; (and an &#39;Empty&#39; tail).   fromStrict ::  Strict.ByteString  -&gt;  ByteStream m ()     -- Converting from a lazy ByteStream to a ByteString is a matter of   -- folding over the former, replacing the &#39;Empty&#39; and &#39;Chunk&#39;   -- constructors with those provided by ByteStream.   fromLazy ::  Lazy.ByteString  -&gt;  ByteStream m ()     -- In general, we can see ByteStream as a more efficient   -- representation of a Stream of unchunked Word8 values, or a stream   -- of chunked, strict ByteString values. Note that these preserve the   -- return value of the input Stream.   pack  ::  Stream ( Of  Word8) m r  -&gt;  ByteStream m r   fromStream ::  Stream ( Of  Strict.ByteString) m r  -&gt;  ByteStream m r\n More interesting is the fundamental file-reading method,  readFile. It is interesting in that it is the first time we see  MonadResource, a typeclass provided by the  resourcet package.\n  The  MonadResource typeclass represents monads that are capable of managing the lifetime of critical resources, even in the\n......", "posttime": "2021-08-09 01:52:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bytestring,streaming", "title": "\u5bf9\u6d41\u5f0f ByteString \u7684\u9882\u6b4c", "title_en": "Ode to a Streaming ByteString", "transed": 1, "url": "https://blog.sumtypeofway.com/posts/ode-to-a-streaming-bytestream.html", "via": "", "real_tags": ["streaming"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072153, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0b\u8f7d PDF \u6458\u8981\uff1a\u5341\u591a\u5e74\u6765\uff0c\u6982\u7387\u6587\u672c\u751f\u6210\u5668\u4e00\u76f4\u88ab\u7528\u4e8e\u5236\u4f5c\u5047\u79d1\u5b66\u8bba\u6587\u3002\u8fd9\u79cd\u65e0\u610f\u4e49\u7684\u8bba\u6587\u5f88\u5bb9\u6613\u88ab\u4eba\u548c\u673a\u5668\u68c0\u6d4b\u5230\u3002\u73b0\u5728\uff0c\u66f4\u590d\u6742\u7684\u4eba\u5de5\u667a\u80fd\u751f\u6210\u6280\u672f\u53ef\u4ee5\u751f\u6210\u4e0e\u4eba\u7c7b\u65e0\u6cd5\u533a\u5206\u7684\u6587\u672c\uff0c\u5e76\u4e14\u5df2\u7ecf\u8bb0\u5f55\u4e86\u4ece\u51e0\u4e2a\u5173\u952e\u5b57\u751f\u6210\u79d1\u5b66\u6587\u672c\u7684\u8fc7\u7a0b\u3002\u6211\u4eec\u7684\u7814\u7a76\u5f15\u5165\u4e86\u6298\u78e8\u77ed\u8bed\u7684\u6982\u5ff5\uff1a\u7528\u610f\u60f3\u4e0d\u5230\u7684\u5947\u602a\u77ed\u8bed\u4ee3\u66ff\u65e2\u5b9a\u77ed\u8bed\uff0c\u4f8b\u5982\u201c\u5047\u5192\u610f\u8bc6\u201d\u800c\u4e0d\u662f\u201c\u4eba\u5de5\u667a\u80fd\u201d\u3002\u6211\u4eec\u68b3\u7406\u4e86\u6587\u732e\u4e2d\u7684\u6298\u78e8\u8bcd\u7ec4\uff0c\u5e76\u7814\u7a76\u4e86\u8fd9\u4e9b\u96c6\u4e2d\u5728\u4e00\u8d77\u7684\u77e5\u540d\u671f\u520a\u3002\u5047\u8bbe\u4f7f\u7528\u9ad8\u7ea7\u8bed\u8a00\u6a21\u578b\uff0c\u6211\u4eec\u5728\u8be5\u671f\u520a\u6700\u8fd1\u6587\u7ae0\u7684\u6458\u8981\u548c\u51e0\u4e2a\u63a7\u5236\u96c6\u4e0a\u8fd0\u884c\u4e86\u4e00\u4e2a\u68c0\u6d4b\u5668\u3002\u6210\u5bf9\u6bd4\u8f83\u63ed\u793a\u4e86\u671f\u520a\u4e2d\u6807\u8bb0\u4e3a\u201c\u5408\u6210\u201d\u7684\u6458\u8981\u96c6\u4e2d\u3002\u6211\u4eec\u8fd8\u5f3a\u8c03\u4e86\u5176\u64cd\u4f5c\u4e2d\u7684\u8fdd\u89c4\u884c\u4e3a\uff0c\u4f8b\u5982\u7f16\u8f91\u65f6\u95f4\u8868\u7684\u7a81\u7136\u53d8\u5316\u3002\u6211\u4eec\u901a\u8fc7\u5206\u6790\u51e0\u7bc7\u53ef\u7591\u7684\u6587\u7ae0\u6765\u8bc1\u5b9e\u6211\u4eec\u7684\u8c03\u67e5\u547c\u5401\uff0c\u5f3a\u8c03\u6709\u95ee\u9898\u7684\u7279\u5f81\uff1a\u6298\u78e8\u4eba\u7684\u5199\u4f5c\u98ce\u683c\uff0c\u5f15\u7528\u4e0d\u5b58\u5728\u7684\u6587\u732e\uff0c\u4ee5\u53ca\u672a\u7ecf\u627f\u8ba4\u7684\u56fe\u50cf\u91cd\u7528\u3002\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u4e00\u4e9b\u7f51\u7ad9\u63d0\u4f9b\u514d\u8d39\u91cd\u5199\u6587\u672c\uff0c\u751f\u6210\u5145\u6ee1\u6298\u78e8\u77ed\u8bed\u7684gobbledegook\u3002\u6211\u4eec\u76f8\u4fe1\u4e00\u4e9b\u4f5c\u8005\u4f7f\u7528\u91cd\u5199\u7684\u6587\u672c\u6765\u586b\u5145\u4ed6\u4eec\u7684\u624b\u7a3f\u3002\u6211\u4eec\u5e0c\u671b\u63d0\u9ad8\u5bf9\u5305\u542b\u6b64\u7c7b\u901a\u8fc7\uff08\u5dee\uff09\u540c\u884c\u8bc4\u5ba1\u7684\u53ef\u7591 AI \u751f\u6210\u6216\u91cd\u5199\u6587\u672c\u7684\u51fa\u7248\u7269\u7684\u8ba4\u8bc6\u3002\u5408\u6210\u6587\u672c\u7684\u6b3a\u9a97\u5a01\u80c1\u7740\u79d1\u5b66\u6587\u732e\u7684\u5b8c\u6574\u6027\u3002", "note_en": "Download PDF  Abstract: Probabilistic text generators have been used to produce fake scientificpapers for more than a decade. Such nonsensical papers are easily detected byboth human and machine. Now more complex AI-powered generation techniquesproduce texts indistinguishable from that of humans and the generation ofscientific texts from a few keywords has been documented. Our study introducesthe concept of tortured phrases: unexpected weird phrases in lieu ofestablished ones, such as &#39;counterfeit consciousness&#39; instead of &#39;artificialintelligence.&#39; We combed the literature for tortured phrases and study onereputable journal where these concentrated en masse. Hypothesising the use ofadvanced language models we ran a detector on the abstracts of recent articlesof this journal and on several control sets. The pairwise comparisons reveal aconcentration of abstracts flagged as &#39;synthetic&#39; in the journal. We alsohighlight irregularities in its operation, such as abrupt changes in editorialtimelines. We substantiate our call for investigation by analysing severalindividual dubious articles, stressing questionable features: tortured writingstyle, citation of non-existent literature, and unacknowledged image reuse.Surprisingly, some websites offer to rewrite texts for free, generatinggobbledegook full of tortured phrases. We believe some authors used rewrittentexts to pad their manuscripts. We wish to raise the awareness on publicationscontaining such questionable AI-generated or rewritten texts that passed (poor)peer review. Deception with synthetic texts threatens the integrity of thescientific literature.", "posttime": "2021-08-09 01:52:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u77ed\u8bed,phrases,\u6587\u672c", "title": "\u53d7\u6298\u78e8\u7684\u77ed\u8bed\uff1a\u79d1\u5b66\u4e2d\u51fa\u73b0\u7684\u4e00\u79cd\u53ef\u7591\u7684\u5199\u4f5c\u98ce\u683c", "title_en": "Tortured phrases: A dubious writing style emerging in science", "transed": 1, "url": "https://arxiv.org/abs/2107.06751", "via": "", "real_tags": ["\u77ed\u8bed", "phrases", "\u6587\u672c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072152, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Kawa \u662f\u4e00\u79cd\u8fd0\u884c\u5728 Java \u5e73\u53f0\u4e0a\u7684\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u65e8\u5728\u7ed3\u5408\uff1a\u52a8\u6001\u811a\u672c\u8bed\u8a00\u7684\u4f18\u70b9\uff08\u975e\u5197\u957f\u7684\u4ee3\u7801\uff0c\u66f4\u5c11\u7684\u6837\u677f\uff0c\u5feb\u901f\u548c\u5bb9\u6613\u542f\u52a8\uff0cREPL\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u6b65\uff09;\u5177\u6709\u4f20\u7edf\u7f16\u8bd1\u8bed\u8a00\u7684\u4f18\u70b9\uff08\u5feb\u901f\u6267\u884c\u3001\u9759\u6001\u9519\u8bef\u68c0\u6d4b\u3001\u6a21\u5757\u5316\u3001\u96f6\u5f00\u9500 Java \u5e73\u53f0\u96c6\u6210\uff09\u3002\u5b83\u662f Lisp \u7f16\u7a0b\u8bed\u8a00\u5bb6\u65cf\u4e2d\u5386\u53f2\u60a0\u4e45\u7684 Scheme \u8bed\u8a00\u7684\u6269\u5c55\u3002Kawa \u6709\u8bb8\u591a\u6709\u7528\u7684\u7279\u6027\u3002 Kawa \u4e5f\u662f\u5728 Java \u5e73\u53f0\u4e0a\u5b9e\u73b0\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u6709\u7528\u6846\u67b6\u3002\u5b83\u6709\u8bb8\u591a\u6709\u7528\u7684\u5b9e\u7528\u7a0b\u5e8f\u7c7b\u3002\u8bf4\u660e Kawa \u6559\u7a0b\u5f88\u6709\u7528\u3002\u867d\u7136\u5b83\u5f88\u4e0d\u5b8c\u6574\uff0c\u4f46\u5b83\u786e\u5b9e\u94fe\u63a5\u5230\u5176\u4ed6\u4e00\u4e9b\u66f4\u6df1\u5165\uff08\u4f46\u4e0d\u662f Kawa \u7279\u5b9a\u7684\uff09Scheme \u6559\u7a0b\u3002", "note_en": "Kawa is a general-purpose programming language that runs on the Java platform.It aims to combine:\n the benefits of dynamic scripting languages(non-verbose code with less boiler-plate, fast and easy start-up,a  REPL,no required compilation step); with\n the benefits of traditional compiled languages (fast execution, static error detection,modularity, zero-overhead Java platform integration).\n It is an extension of the long-established  Schemelanguage, which is in the Lisp family of programming languages.Kawa has many  useful features.\n Kawa is also a useful  framework for implementingother programming languages on the Java platform.It has many useful utility classes.\n  The  Kawa tutorial is useful to get stated.While it is woefully incomplete, it does link to some other more in-depth(but not Kawa-specific) Scheme tutorials.", "posttime": "2021-08-09 01:52:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ba1\u5212,scheme,\u7f16\u7a0b\u8bed\u8a00", "title": "Kawa \u8ba1\u5212\u8bed\u8a00", "title_en": "The Kawa Scheme Language", "transed": 1, "url": "http://www.gnu.org/software/kawa/index.html", "via": "", "real_tags": ["\u8ba1\u5212", "scheme", "\u7f16\u7a0b\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "422aac84e57c111631b59922316ea183.png", "infoid": 1072148, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u6211\u6765\u8bf4\uff0c\u7f51\u7edc\u4e0a\u6700\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u4e4b\u4e00\u662f\u5728\u6587\u672c\u8f93\u5165\u4e2d\u6253\u5b57\u5f88\u6162\u3002\u6211\u662f\u4e00\u4e2a\u76f8\u5f53\u5feb\u7684\u6253\u5b57\u5458\uff0c\u6240\u4ee5\u5373\u4f7f\u5728 &lt;textarea&gt; \u6216 &lt;input&gt; \u4e2d\u6709\u4e00\u70b9\u5ef6\u8fdf\uff0c\u6211\u90fd\u80fd\u611f\u89c9\u5230\u5b83\u8ba9\u6211\u6162\u4e0b\u6765\uff0c\u5b83\u8ba9\u6211\u53d1\u75af\u3002\u6211\u89c9\u5f97\u8fd9\u4e2a\u95ee\u9898\u7279\u522b\u70e6\u4eba\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u7b80\u5355\u7684\u6280\u5de7\u6765\u89e3\u51b3\u3002\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u6216\u793e\u4ea4\u5a92\u4f53\u5e94\u7528\u7a0b\u5e8f\u7684\u8f93\u5165\u901f\u5ea6\u6ca1\u6709\u7406\u7531\u5f88\u6162\uff0c\u9664\u975e\u7f51\u7edc\u5f00\u53d1\u4eba\u5458\u7ecf\u5e38\u91c7\u53d6\u5929\u771f\u7684\u65b9\u6cd5\uff0c\u8fd9\u5c31\u662f\u5ef6\u8fdf\u7684\u6765\u6e90\u3002\u8981\u4e86\u89e3\u8f93\u5165\u5ef6\u8fdf\u7684\u6765\u6e90\uff0c\u8ba9\u6211\u4eec\u4e3e\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u3002\u60f3\u8c61\u4e00\u4e2a\u7c7b\u4f3c Twitter \u7684 UI\uff0c\u5e26\u6709\u4e00\u4e2a\u6587\u672c\u5b57\u6bb5\u548c\u4e00\u4e2a\u201c\u5269\u4f59\u5b57\u7b26\u201d\u8ba1\u6570\u3002\u968f\u7740\u60a8\u952e\u5165\uff0c\u6570\u5b57\u9010\u6e10\u51cf\u5c11\u5230\u96f6\u3002\u8fd9\u662f\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50\u3002\u5982\u679c\u60a8\u6ca1\u6709\u6ce8\u610f\u5230\u8f93\u5165\u5ef6\u8fdf\uff0c\u90a3\u4e48\u771f\u7684\u5728\u952e\u76d8\u4e0a\u6df7\u642d\uff1a\u5929\u771f\u7684\u65b9\u6cd5\u7684\u95ee\u9898\u5728\u4e8e\uff0c\u76f8\u5bf9\u4e8e\u7528\u6237\u4ece\u201c\u5269\u4f59\u5b57\u7b26\u201d\u663e\u793a\u4e2d\u83b7\u5f97\u7684\u597d\u5904\u800c\u8a00\uff0c\u5b83\u901a\u5e38\u6700\u7ec8\u505a\u4e86\u592a\u591a\u7684\u5de5\u4f5c\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u66f4\u6539\u5168\u5c40\u72b6\u6001\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6574\u4e2a UI \u91cd\u65b0\u6e32\u67d3\uff08\u4f8b\u5982\uff0c\u5728\u4f18\u5316\u4e0d\u4f73\u7684 React \u5e94\u7528\u7a0b\u5e8f\u4e2d\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u7528\u6237\u952e\u5165\u65f6\uff0c\u6bcf\u6b21\u6309\u952e\u90fd\u4f1a\u5bfc\u81f4\u5b8c\u6574\u7684\u5168\u5c40\u91cd\u65b0\u6e32\u67d3\u3002\u53e6\u5916\uff0c\u56e0\u4e3a\u6211\u4eec\u76f4\u63a5\u76d1\u542c\u8f93\u5165\u4e8b\u4ef6\uff0c\u6240\u4ee5\u5b9e\u9645\u6309\u952e\u548c\u51fa\u73b0\u5728 &lt;textarea&gt; \u4e2d\u7684\u5b57\u7b26\u4e4b\u95f4\u4f1a\u6709\u5ef6\u8fdf\u3002\u56e0\u4e3a DOM \u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u5e76\u4e14\u56e0\u4e3a\u6211\u4eec\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u8fdb\u884c\u963b\u585e\u5de5\u4f5c\uff0c\u6240\u4ee5\u6d4f\u89c8\u5668\u5728\u5de5\u4f5c\u5b8c\u6210\u4e4b\u524d\u65e0\u6cd5\u5448\u73b0\u65b0\u8f93\u5165\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u660e\u663e\u7684\u6253\u5b57\u5ef6\u8fdf\uff0c\u4ece\u800c\u5bfc\u81f4\u7528\u6237\u611f\u5230\u6cae\u4e27\u3002\u6211\u5bf9\u6b64\u7c7b\u95ee\u9898\u7684\u9996\u9009\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 requestIdleCallback \u7b49\u5f85 UI \u7ebf\u7a0b\u7a7a\u95f2\uff0c\u7136\u540e\u518d\u8fd0\u884c\u963b\u585e\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u8fd9\u6837\u7684\u4e8b\u60c5\uff1a\n\u6211\u4eec\u4e0d\u4f1a\u7528\u4efb\u4f55\u6602\u8d35\u7684\u4e1c\u897f\u76f4\u63a5\u963b\u585e\u8f93\u5165\u4e8b\u4ef6\uff0c\u6240\u4ee5\u5728\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u548c\u770b\u5230\u8be5\u5b57\u7b26\u51fa\u73b0\u5728 &lt;textarea&gt; \u4e4b\u95f4\u4e0d\u5e94\u8be5\u6709\u5ef6\u8fdf\u3002\u6211\u4eec\u4e0d\u4f1a\u4e3a\u6bcf\u4e2a\u6309\u952e\u66f4\u65b0 UI\u3002 requestIdleCallback \u5c06\u5728\u7528\u6237\u5728\u8f93\u5165\u5b57\u7b26\u4e4b\u95f4\u6682\u505c\u65f6\u6279\u91cf\u66f4\u65b0 UI\u3002\u8fd9\u662f\u660e\u667a\u7684\uff0c\u56e0\u4e3a\u7528\u6237\u53ef\u80fd\u5e76\u4e0d\u5173\u5fc3\u201c\u5269\u4f59\u5b57\u7b26\u201d\u8ba1\u6570\u662f\u5426\u4e3a\u6bcf\u4e2a\u6309\u952e\u66f4\u65b0\u2014\u2014\u4ed6\u4eec\u7684\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6587\u672c\u5b57\u6bb5\u4e0a\uff0c\u800c\u4e0d\u662f\u5269\u4f59\u5b57\u7b26\u4e0a\u3002\u5728\u8f83\u6162\u7684\u673a\u5668\u4e0a\uff0c requestIdleCallback \u81ea\u7136\u4f1a\u6bd4\u5728\u8f83\u5feb\u7684\u673a\u5668\u4e0a\u6267\u884c\u66f4\u5c11\u7684\u6bcf\u6b21\u6309\u952e\u6279\u5904\u7406\u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u66f4\u5feb\u8bbe\u5907\u7684\u7528\u6237\u5c06\u53d7\u76ca\u4e8e\u66f4\u5feb\u66f4\u65b0\u7684 UI\uff0c\u4f46\u4e24\u4e2a\u7528\u6237\u90fd\u4e0d\u4f1a\u9047\u5230\u7cdf\u7cd5\u7684\u8f93\u5165\u54cd\u5e94\u3002\u8fd9\u662f\u4f18\u5316\u7248\u672c\u7684\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50\u3002\u968f\u610f\u5728\u952e\u76d8\u4e0a\u6df7\u642d\uff1a\u4f60\u4e0d\u5e94\u8be5\u770b\u5230\uff08\u5f88\u591a\uff09\u5ef6\u8fdf\uff01\u8fc7\u53bb\uff0c\u60a8\u53ef\u80fd\u4f7f\u7528\u8fc7\u8bf8\u5982 debounce \u4e4b\u7c7b\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u4f46\u662f\u6211\u559c\u6b22 requestIdleCallback \u56e0\u4e3a\u4e0a\u9762\u7b2c\u4e09\u70b9\uff1a\u5b83\u81ea\u7136\u9002\u5e94\u7528\u6237\u8bbe\u5907\u7684\u7279\u6027\uff0c\u800c\u4e0d\u662f\u5f3a\u8feb\u6211\u4eec\u9009\u62e9\u786c\u7f16\u7801\u5ef6\u8fdf\u3002\u6ce8\u610f\uff1a\u5728 web worker \u4e2d\u8fd0\u884c\u4f60\u7684\u72b6\u6001\u903b\u8f91\u4e5f\u662f\u907f\u514d\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u3002\u4f46\u662f\u7edd\u5927\u591a\u6570 Web \u5e94\u7528\u7a0b\u5e8f\u90fd\u4e0d\u662f\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6784\u5efa\u7684\uff0c\u56e0\u6b64\u6211\u53d1\u73b0 requestIdleCallback \u4f5c\u4e3a\u9644\u52a0\u89e3\u51b3\u65b9\u6848\u66f4\u597d\u3002\u516c\u5e73\u5730\u8bf4\uff0c\u8fd9\u79cd\u6280\u672f\u5e76\u975e\u4e07\u65e0\u4e00\u5931\u3002\u4e00\u4e9b UI \u786e\u5b9e\u9700\u8981\u7acb\u5373\u54cd\u5e94\u6bcf\u4e2a\u6309\u952e\uff1a\u4f8b\u5982\uff0c\u7981\u6b62\u67d0\u4e9b\u5b57\u7b26\u6216\u968f\u7740 &lt;textarea&gt; \u7684\u589e\u957f\u8c03\u6574\u5176\u5927\u5c0f\u3002 \uff08\u4e0d\u8fc7\uff0c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4f1a\u4f7f\u7528 requestAnimationFrame \u8fdb\u884c\u8282\u6d41\u3002\uff09\u6b64\u5916\uff0c\u5982\u679c\u67d0\u4e9b UI \u6b63\u5728\u6267\u884c\u7684\u5de5\u4f5c\u8db3\u591f\u5927\uff0c\u5373\u4f7f\u5728\u6279\u5904\u7406\u65f6\u4e5f\u53ef\u4ee5\u5bdf\u89c9\uff0c\u5b83\u4eec\u53ef\u80fd\u4ecd\u4f1a\u6ede\u540e\u3002 \uff08\u5728\u4e0a\u9762\u7684\u5b9e\u65f6\u793a\u4f8b\u4e2d\uff0c\u6211\u8bbe\u7f6e\u4e86 70 \u6beb\u79d2\u7684\u4eba\u4e3a\u5ef6\u8fdf\uff0c\u60a8\u4ecd\u7136\u53ef\u4ee5\u201c\u611f\u89c9\u5230\u201d\u4f18\u5316\u7248\u672c\u3002\uff09\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 requestIdleCallback \u8db3\u4ee5\u6446\u8131\u4efb\u4f55\u4e3b\u8981\u7684\u54cd\u5e94\u95ee\u9898\u3002\n\u5982\u679c\u60a8\u60f3\u5728\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u5bf9\u6b64\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6211\u5efa\u8bae\u60a8\u5c06 Chrome DevTools \u7f6e\u4e8e 6 \u500d CPU \u901f\u5ea6\u4e0b\uff0c\u7136\u540e\u5c3d\u53ef\u80fd\u5feb\u5730\u6572\u51fb\u952e\u76d8\u3002\u5728\u6ca1\u6709 JavaScript \u5904\u7406\u7a0b\u5e8f\u7684\u666e\u901a &lt;textarea&gt; \u6216 &lt;input&gt; \u4e0a\uff0c\u60a8\u4e0d\u4f1a\u770b\u5230\u4efb\u4f55\u5ef6\u8fdf\u3002\u800c\u5982\u679c\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u611f\u89c9\u7f13\u6162\uff0c\u90a3\u4e48\u4e5f\u8bb8\u662f\u65f6\u5019\u4f18\u5316\u60a8\u7684\u6587\u672c\u8f93\u5165\u4e86\uff01", "note_en": "For me, one of the most aggravating performance issues on the web is when it\u2019s slow to type into a text input. I\u2019m a fairly fast typist, so if there\u2019s even a tiny delay in a  &lt;textarea&gt; or  &lt;input&gt;, I can  feel it slowing me down, and it drives me nuts.\n I find this problem especially irksome because it\u2019s usually solvable with a few simple tricks. There\u2019s no reason for a chat app or a social media app to be slow to type into, except that web developers often take the na\u00efve approach, and that\u2019s where the delay comes from.\n To understand the source of input delays, let\u2019s take a concrete example. Imagine a Twitter-like UI with a text field and a \u201cremaining characters\u201d count. As you type, the number gradually decreases down to zero.\n    And here\u2019s a live example. Really mash on the keyboard if you don\u2019t notice the input delay:\n  The problem with the na\u00efve approach is that it usually ends up doing far too much work relative to the benefit that the user gets out of the \u201cremaining characters\u201d display. In the worst case, changing the global state could cause the entire UI to re-render (e.g. in a poorly-optimized React app), meaning that as the user types, every keypress causes a full global re-render.\n Also, because we are directly listening to the  input event, there will be a delay between the actual keypress and the character appearing in the  &lt;textarea&gt;. Because the DOM is single-threaded, and because we\u2019re doing blocking work on the main thread, the browser can\u2019t render the new input until that work finishes. This can lead to noticeable typing delays and therefore user frustration.\n My preferred solution to this kind of problem is to use   requestIdleCallback to wait for the UI thread to be idle before running the blocking code. For instance, something like this:\n   We are not directly blocking the  input event with anything expensive, so there shouldn\u2019t be a delay between typing a character and seeing that character appear in the  &lt;textarea&gt;.\n We are not updating the UI for every keypress.  requestIdleCallback will batch the UI updates when the user pauses between typing characters. This is sensible, because the user probably doesn\u2019t care if the \u201cremaining characters\u201d count updates for every single keypress \u2013 their attention is on the text field, not on the remaining characters.\n On a slower machine,  requestIdleCallback will naturally do fewer batches-per-keypress than on a faster machine. So a user on a faster device will have the benefit of a faster-updating UI, but neither user will experience poor input responsiveness.\n And here\u2019s a live example of the optimized version. Feel free to mash on the keyboard: you shouldn\u2019t see (much) of a delay!\n  In the past, you might have used something like  debouncing to solve this problem. But I like  requestIdleCallback because of the third point above: it naturally adapts to the characteristics of the user\u2019s device, rather than forcing us to choose a hardcoded delay.\n Note: Running your state logic in a web worker is also a way to avoid this problem. But the vast majority of web apps aren\u2019t architected this way, so I find  requestIdleCallback to be better as a bolt-on solution.\n To be fair, this technique isn\u2019t foolproof. Some UIs really need to respond immediately to every keypress: for instance, to disallow certain characters or resize the  &lt;textarea&gt; as it grows. (In those cases, though, I would  throttle with  requestAnimationFrame.) Also, some UIs may still lag if the work they\u2019re doing is large enough that it\u2019s perceptible even when batched. (In the live example above, I set an artificial delay of 70 milliseconds, which you can still \u201cfeel\u201d with the optimized version.) But for the most part, using  requestIdleCallback is enough to get rid of any major responsiveness issues.\n If you want to test this on your own website, I\u2019d recommend putting the Chrome DevTools at  6x CPU slowdown and then mashing the keyboard as fast as you can. On a vanilla  &lt;textarea&gt; or  &lt;input&gt; with no JavaScript handlers, you won\u2019t see any delay. Whereas if your own website feels sluggish, then maybe it\u2019s time to optimize your text inputs!", "posttime": "2021-08-09 01:50:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u672c,responsiveness", "title": "\u63d0\u9ad8\u6587\u672c\u8f93\u5165\u7684\u54cd\u5e94\u80fd\u529b", "title_en": "Improving Responsiveness in Text Inputs", "transed": 1, "url": "https://nolanlawson.com/2021/08/08/improving-responsiveness-in-text-inputs/", "via": "", "real_tags": ["\u6587\u672c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072147, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f5c\u4e3a\u4e00\u6b3e\u7814\u7a76\u578b\u8ba1\u7b97\u673a\uff0cEnzian \u4e13\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u8f6f\u4ef6\u7814\u7a76\u800c\u8bbe\u8ba1\uff0c\u5e76\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u3002 Enzian \u8282\u70b9\u62e5\u6709\u4e0e\u5927\u578b FPGA \u7d27\u5bc6\u8026\u5408\u7684\u5927\u578b\u670d\u52a1\u5668\u7ea7 CPU\uff0c\u4e24\u4fa7\u5177\u6709\u5145\u8db3\u7684\u4e3b\u5b58\u548c\u7f51\u7edc\u5e26\u5bbd\u3002\u6211\u4eec\u6784\u5efa Enzian \u662f\u4e3a\u4e86\u4e3a\u6211\u4eec\u7814\u7a76\u64cd\u4f5c\u7cfb\u7edf\u3001\u6570\u636e\u5e93\u3001\u786c\u4ef6\u52a0\u901f\u3001\u673a\u5668\u5b66\u4e60\u3001\u7f51\u7edc\u548c\u9ad8\u6027\u80fd\u8ba1\u7b97\u63d0\u4f9b\u4e00\u4e2a\u5e73\u53f0\uff0c\u800c\u4e14\u56e0\u4e3a\u90a3\u91cc\u6ca1\u6709\u4efb\u4f55\u53ef\u6bd4\u7684\u4e1c\u897f\uff0c\u5426\u5219\u6211\u4eec\u65e0\u6cd5\u638c\u63e1\u3002\u73b0\u5728\u5b83\u53ef\u4ee5\u5de5\u4f5c\u4e86\uff0c\u6211\u4eec\u60f3\u8ba9 Enzian \u7cfb\u7edf\u53ef\u4f9b\u5176\u4ed6\u7814\u7a76\u793e\u533a\u4f7f\u7528\u3002\u5982\u679c\u60a8\u60f3\u4e0e Enzian \u5408\u4f5c\uff0c\u6216\u8005\u60a8\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u4f7f\u5176\u66f4\u5e7f\u6cdb\u5730\u53ef\u7528\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\uff01", "note_en": "As a research computer, Enzian is designed for computer systems software research and deliberately over-engineered. Enzian node has a big server-class CPU closely coupled to a large FPGA, with ample main memory and network bandwidth on both sides.\n      We built Enzian to have a platform for our research into operating systems, databases, hardware acceleration, machine learning, networking, and high-performance computing, and because there was nothing comparable out there that we could get hold of otherwise.\n  Now that it works, we\u2019d like to make Enzian systems available to the rest of the research community. If you want to work with Enzian, or if you might be able to help us make it more widely available, please contact us!", "posttime": "2021-08-09 01:50:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,research,enzian", "title": "Enzian \u662f\u7531\u82cf\u9ece\u4e16\u8054\u90a6\u7406\u5de5\u5b66\u9662\u7cfb\u7edf\u7ec4\u5236\u9020\u7684\u7814\u7a76\u8ba1\u7b97\u673a", "title_en": "Enzian is a research computer built by the Systems Group at ETH Zurich", "transed": 1, "url": "http://enzian.systems/", "via": "", "real_tags": ["\u7814\u7a76", "research", "enzian"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072146, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u901a\u5e38\u4e0d\u505a\u7edd\u5bf9\u7684\u4e8b\u60c5\uff0c\u4f46\u6211\u73b0\u5728\u77e5\u9053\u4e00\u4ef6\u4e8b\u4ece\u6839\u672c\u4e0a\u662f\u6b63\u786e\u7684\uff1a\u6ca1\u6709\u4eba\u80fd\u9760\u81ea\u5df1\u6210\u4e3a\u4e00\u540d\u4f18\u79c0\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u3002\u4f46\u5728\u4e00\u4e2a\u4e00\u76f4\u4ee5\u8d85\u7ea7\u5de8\u661f\u5fcd\u8005\u3001\u72ec\u72fc\u3001\u81ea\u5b66\u5929\u624d\u7684\u795e\u8bdd\u800c\u81ea\u8c6a\u7684\u884c\u4e1a\u4e2d\uff0c\u4f18\u79c0\u7684\u5f00\u53d1\u4eba\u5458\u4f3c\u4e4e\u4e0d\u662f\u5929\u751f\u7684\u2014\u2014\u4ed6\u4eec\u4ece\u5730\u4e0b\u5d1b\u8d77\uff0c\u5b8c\u5168\u6210\u578b\u5e76\u4e0d\u65ad\u6d8c\u73b0PRs \u4ed6\u4eec\u7684\u9192\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u8fd8\u6ca1\u6709\u89c1\u8fc7\u4e00\u4e2a\u4eba\u80fd\u591f\u5728\u4e0d\u5411\u4ed6\u4eba\u5b66\u4e60\u7684\u60c5\u51b5\u4e0b\u6210\u529f\u6210\u957f\u4e3a\u4e00\u540d\u79f0\u804c\u7684\u5f00\u53d1\u4eba\u5458\u3002\u800c\u4e14\uff0c\u6211\u62c5\u5fc3\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u884c\u4e1a\uff0c\u6211\u4eec\u5e76\u4e0d\u7ecf\u5e38\u79ef\u6781\u8c08\u8bba\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6211\u4eec\u9700\u8981\u5176\u4ed6\u4eba\u5728\u5de5\u4f5c\u4e2d\u5e2e\u52a9\u6211\u4eec\u5b66\u4e60\u4e1c\u897f\uff0c\u5e76\u4e14\u6211\u4eec\u9700\u8981\u5728\u6211\u4eec\u7684\u5f00\u53d1\u548c\u5de5\u4f5c\u89c4\u5212\u8fc7\u7a0b\u4e2d\u4e3a\u8fd9\u79cd\u5b66\u4e60\u7559\u51fa\u7a7a\u95f4.\u5728\u201c\u4e13\u5bb6\u521d\u5b66\u8005\u7684\u5d1b\u8d77\u201d\u4e2d\uff0c\u6211\u6bcf\u9694\u51e0\u5e74\u91cd\u65b0\u9605\u8bfb\u4e00\u7bc7\u6587\u7ae0\uff0cErik \u8c08\u5230\u4e86\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u505c\u6b62\u5b66\u4e60\u3002\u4ed6\u7684\u57fa\u672c\u8bba\u70b9\u57fa\u4e8e\u5148\u524d\u5bf9\u6280\u80fd\u4e60\u5f97\u7684\u7814\u7a76\uff0c\u662f\u4eba\u4eec\u5f00\u59cb\u4e60\u5f97\u6280\u80fd\u7684\u901f\u5ea6\u975e\u5e38\u5feb\u3002\u4f46\u662f\uff0c\u5728\u5b66\u4e60\u8fc7\u7a0b\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u4ed6\u4eec\u4f1a\u505c\u6ede\u4e0d\u524d\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4f5c\u4e3a\u521d\u5b66\u8005\u5b66\u5230\u7684\u6280\u80fd\u5c06\u4f7f\u4ed6\u4eec\u6210\u4e3a\u4e13\u5bb6\u3002\u60f3\u4e00\u60f3\u80fd\u591f\u7f16\u5199\u6253\u5370\u5230\u7ec8\u7aef\u7684\u51fd\u6570\u4e0e\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u8fd4\u56de\u6587\u672c\u7684\u65b9\u6cd5\u7684\u7c7b\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u5c06\u6587\u672c\u4f20\u9012\u7ed9\u5176\u4ed6\u68c0\u67e5\u5df2\u5904\u7406\u8f93\u5165\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u524d\u7aef\u3002\u73b0\u5728\u5047\u8bbe\u8be5\u7c7b\u662f\u4e00\u4e2a\u5fc5\u987b\u6253\u5305\u624d\u80fd\u5728\u4e91\u4e2d\u5de5\u4f5c\u7684\u51fd\u6570\u3002\u800c\u4e14\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u5047\u8bbe\u8be5\u51fd\u6570\u5fc5\u987b\u5728\u4e00\u4e2a repo \u4e2d\u8fdb\u884c\u7248\u672c\u63a7\u5236\uff0c\u5176\u4e2d 5-6 \u4eba\u5b9a\u671f\u5408\u5e76\u4ee3\u7801\uff0c\u901a\u8fc7 CI/CD\uff0c\u5e76\u4e14\u662f\u8fd4\u56de\u67d0\u4e9b\u673a\u5668\u5b66\u4e60\u6a21\u578b\u8f93\u51fa\u7684\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u6709\u5ef6\u8fdf\u9650\u5236\u3002\u60a8\u53ef\u4ee5\u5f88\u5feb\u5730\u7528\u4efb\u4f55\u8bed\u8a00\u7f16\u5199\u6253\u5370\u8bed\u53e5\uff08\u5047\u8bbe\u60a8\u514b\u670d\u4e86\u5728\u672c\u5730\u673a\u5668\u4e0a\u5b89\u88c5\u5b83\u7684\u9ebb\u70e6\uff09\u3002\u4f46\u662f\u8981\u7406\u89e3\u5982\u4f55\u4ece\u6253\u5370\uff08\u201cHello World\u201d\uff09\u5230\u201c\u8fd9\u662f\u4e00\u4e2a\u4e3a\u60a8\u5b9e\u65f6\u8fdb\u884c\u673a\u5668\u5b66\u4e60\u9884\u6d4b\u7684\u5e94\u7528\u7a0b\u5e8f\u201d\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8ba9\u6211\u4eec\u56e2\u961f\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u5230\u90a3\u4e2a\u5730\u65b9\u5462\uff1f\u6211\u4eec\u5982\u4f55\u5e2e\u52a9\u5176\u4ed6\u4eba\u8d70\u51fa\u9ed1\u6697\u3001\u4ee4\u4eba\u6cae\u4e27\u7684\u5730\u65b9\uff0c\u5373\u4e13\u4e1a\u521d\u5b66\u8005\u7684\u5c40\u90e8\u6700\u4f4e\u70b9\uff0c\u8d8a\u8fc7\u7e41\u661f\uff0c\u8fdb\u5165\u4e91\u7aef\uff1f\u800c\u4e14\uff0c\u6211\u4eec\u5982\u4f55\u5e2e\u52a9\u81ea\u5df1\u6210\u4e3a\u66f4\u597d\u7684\u5f00\u53d1\u4eba\u5458\uff1f\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u60a8\u64c5\u957f\u7f16\u5199\u4ee3\u7801\u4f46\u4e0d\u64c5\u957f\u5ba1\u67e5\uff0c\u90a3\u4e48\u60a8\u5c06\u7f16\u5199\u5927\u91cf\u4ee3\u7801\u800c\u4e0d\u4f1a\u8fdb\u884c\u5927\u91cf\u5ba1\u67e5\uff0c\u56e0\u4e3a\u5bf9\u60a8\u7684\u5ba1\u67e5\u7684\u6700\u521d\u53cd\u9988\u5c06\u662f\u8d1f\u9762\u7684\u3002\u4f60\u5fc5\u987b\u514b\u670d\u5438\u542e\u7684\u5c40\u90e8\u6700\u5c0f\u503c\u3002\n\u2014 Vicki Boykis (@vboykis) 2021 \u5e74 7 \u6708 26 \u65e5 \u5728\u6211\u81ea\u5df1\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\uff0c\u6211\u6ce8\u610f\u5230\u5f00\u53d1\u4eba\u5458\u9700\u8981\u53d8\u5f97\u66f4\u597d\u7684\u4e09\u4ef6\u4e8b\uff1a\u8fd9\u662f\u6211\u6700\u8fd1\u53d1\u73b0\u7684\u5bf9\u6211\u4eec\u73b0\u5728\u79f0\u4e3a\u5fc3\u7406\u5b89\u5168\u7684\u73b0\u8c61\u7684\u6700\u4f73\u63cf\u8ff0\uff1a\u8fdd\u53cd\u76f4\u89c9\u4f46\u786e\u5b9e\u5982\u6b64\uff1a\u60a8\u5c06\u4e0e\u90a3\u4e9b\u8ba9\u60a8\u611f\u5230\u5f88\u81ea\u5728\u7684\u4eba\u4e00\u8d77\u505a\u6700\u806a\u660e\u7684\u5de5\u4f5c \u2014 jckbtchr (@jackbutcher) 2021 \u5e74 7 \u6708 18 \u65e5 \u7b80\u5355\u7684\u6545\u4e8b\u662f\uff0c\u5728\u826f\u597d\u3001\u9ad8\u6548\u7684\u8f6f\u4ef6\u73af\u5883\u4e2d\uff0c\u60a8\u6709\u6df7\u4e71\u7684\u7a7a\u95f4\u5411\u4e0a\u3002\u521d\u7ea7\u5f00\u53d1\u4eba\u5458\u4e2d\u65ad\u751f\u4ea7\uff0c\u4f7f\u516c\u53f8\u635f\u5931\u6570\u5343\u7f8e\u5143\uff0c\u8fd9\u662f\u5173\u4e8e\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u865a\u6784\u6545\u4e8b\u3002\u770b\u5230\u8fd9\u4e2a\u4e4b\u540e\uff0c\u4ed6\u5f00\u59cb\u628a\u684c\u5b50\u4e0a\u7684\u6240\u6709\u4e1c\u897f\u90fd\u653e\u5728\u4e00\u4e2a\u76d2\u5b50\u91cc\u3002\u9996\u5e2d\u6267\u884c\u5b98\u8d70\u5230\u4ed6\u9762\u524d\u8bf4\uff1a\u201c\u4f60\u8981\u53bb\u54ea\u91cc\uff1f\u201d \u201c\u6211\u53ea\u662f\u82b1\u4e86\u516c\u53f8\u8fd9\u4e48\u591a\u94b1\uff0c\u6211\u4ee5\u4e3a\u6211\u88ab\u89e3\u96c7\u4e86\u3002\u201d \u201c\u6211\u4eec\u53ea\u662f\u82b1\u4e86\u6570\u5343\u7f8e\u5143\u6765\u57f9\u8bad\u4f60\u3002\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u653e\u4f60\u8d70\uff1f\u201d\u8fd9\u662f\u53e6\u4e00\u672c\u771f\u5b9e\u7684\u4e66\uff0c\u6765\u81ea\u6211\u6b63\u5728\u9605\u8bfb\u7684\u4e00\u672c\u5f88\u68d2\u7684\u4e66\uff0cGerald Weinberg \u7684\u201c\u8ba1\u7b97\u673a\u7f16\u7a0b\u5fc3\u7406\u5b66\u201d\uff0c\u6211\u5f3a\u70c8\u9f13\u52b1\u6240\u6709\u4ece\u4e8b\u6216\u63a5\u8fd1\u5f00\u53d1\u5de5\u4f5c\u7684\u4eba\u9605\u8bfb\u8fd9\u672c\u4e66\uff0c\u56e0\u4e3a\u5b83\u89e3\u51b3\u4e86\u6211\u4eec\u601d\u8003\u65f6\u7684\u5927\u591a\u6570\u95ee\u9898\u6bcf\u5929\u8003\u8651\u7f16\u7a0b\u2014\u2014\u9879\u76ee\u89c4\u5212\u3001\u56e2\u961f\u7ed3\u6784\u548c\u969c\u788d\u7269\uff0c\u8fd8\u6709\u989d\u5916\u7684\u4ee4\u4eba\u5174\u594b\u7684\u8b66\u544a\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5df2\u7ecf\u5728 1971 \u5e74\u8ba8\u8bba\u8fc7\u5e76\u5199\u8fc7\u3002\n\u6211\u4e0d\u80fd\u518d\u5f3a\u70c8\u63a8\u8350\u300a\u8ba1\u7b97\u673a\u7f16\u7a0b\u5fc3\u7406\u5b66\u300b\u4e86\u3002\u5b83\u6db5\u76d6\u4e86\u6211\u4eec\u4eca\u5929\u5728\u5de5\u4e1a\u4e2d\u8c08\u8bba\u7684\u6bcf\u4e00\u4ef6\u4e8b\u3002\u5b83\u662f\u4ece 1971 \u5e74\u5f00\u59cb\u7684\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f\u5fc3\u7406\u5b89\u5168\u3002 pic.twitter.com/I0jltWWZwx \u2014 Vicki Boykis (@vboykis) 2021 \u5e74 8 \u6708 1 \u65e5\u8fd9\u4e2a\u8f76\u4e8b\u662f\u5173\u4e8e\u5f00\u53d1\u4eba\u5458\u6bd4\u5c14\u7684\uff0c\u4ed6\u6b63\u5728\u7814\u7a76\uff08\u8868\u9762\u4e0a\uff09\u5bfc\u5f39\u9632\u5fa1\u7cfb\u7edf\uff0c\u6307\u4ee4\u662f\u7528\u673a\u5668\u4ee3\u7801\u7f16\u5199\u7684\u3002\u4ed6\u5230\u4e86\u4e00\u4e2a\u4ed6\u8ba4\u4e3a\u4ed6\u60f3\u901a\u4e86\u7684\u5730\u6b65\uff0c\u4f46\u7531\u4e8e\u60a8\u53ef\u80fd\u9700\u8981\u5bf9\u5bfc\u5f39\u9632\u5fa1\u7cfb\u7edf\u8fdb\u884c\u7b2c\u4e8c\u6b21\u89c2\u5bdf\uff0c\u4ed6\u8ba9\u739b\u4e3d\u83b2\u68c0\u67e5\u4ed6\u7684\u4ee3\u7801\u3002\u90a3\u65f6\uff0c\u4ee3\u7801\u5ba1\u67e5\u4ecd\u5904\u4e8e\u521d\u671f\u9636\u6bb5\uff0c\u6e29\u4f2f\u683c\u5199\u9053\uff1a\u201c\u4ed6\u7684\u4ef7\u503c\u4f53\u7cfb\uff0c\u5728\u7f16\u7a0b\u65b9\u9762\uff0c\u8868\u660e\u79d8\u5bc6\u7684\u3001\u5360\u6709\u6027\u7684\u7f16\u7a0b\u662f\u4e0d\u597d\u7684\uff0c\u800c\u5f00\u653e\u7684\u3001\u5171\u4eab\u7684\u7f16\u7a0b\u662f\u597d\u7684\u3002\u53ef\u80fd\u5728\u4ed6\u7f16\u5199\u7684\u4ee3\u7801\u4e2d\u53d1\u73b0\u7684\u9519\u8bef\u2014\u2014\u8fd9\u91cc\u6ca1\u6709\u4f7f\u7528\u672f\u8bed\u201c\u4ed6\u7684\u4ee3\u7801\u201d\u2014\u2014\u53ea\u662f\u4e3a\u4e86\u672a\u6765\u7684\u6539\u8fdb\u800c\u8fdb\u884c\u8c03\u67e5\u7684\u4e8b\u5b9e\uff0c\u800c\u4e0d\u662f\u5bf9\u4ed6\u4e2a\u4eba\u7684\u653b\u51fb\u3002 \u201c\u739b\u4e3d\u83b2\u5728 13 \u884c\u4ee3\u7801\u4e2d\u53d1\u73b0\u4e86 17 \u4e2a\u9519\u8bef\u3002\u6bd4\u5c14\u6ca1\u6709\u751f\u6c14\uff0c\u800c\u662f\u56db\u5904\u8f6c\u8f6c\uff0c\u200b\u200b\u544a\u8bc9\u5927\u5bb6\u8fd9\u6bb5\u4ee3\u7801\u662f\u591a\u4e48\u4e0d\u53ef\u80fd\uff0c\u800c\u4e14\u5979\u53d1\u73b0\u4e86 17 \u4e2a\u9519\u8bef\u662f\u591a\u4e48\u6709\u8da3\u3002\u6b63\u5f53\u4ed6\u8fd9\u6837\u505a\u7684\u65f6\u5019\uff0c\u6709\u51e0\u4e2a\u4eba\u52a0\u5165\u4e86\u8fdb\u6765\uff0c\u56e0\u4e3a\u6b64\u65f6\u8fd9\u662f\u4e00\u4e2a\u6e38\u620f\uff0c\u5e76\u4e14\u53d1\u73b0\u4e86\u66f4\u591a\u7684\u9519\u8bef\u3002\u4e00\u4e2a\u53ef\u80fd\u4ee5\u6bd4\u5c14\u6307\u8d23\u739b\u4e3d\u83b2\u963b\u6b62\u4ed6\u6216\u6bd4\u5c14\u9690\u85cf\u4ed6\u7684\u4ee3\u7801\u800c\u7ed3\u675f\u7684\u573a\u666f\uff0c\u56e0\u4e3a\u4ed6\u8ba4\u4e3a\u5176\u4ed6\u4eba\u4f1a\u8ba4\u4e3a\u4ed6\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u7ed3\u679c\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u4e8b\u60c5\u662f\u516c\u5f00\u7684\u3002\u597d\u7684\u516c\u53f8\u4e3a\u9519\u8bef\u548c\u8349\u7a3f\u7559\u6709\u4f59\u5730\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5de5\u4f5c\u53ef\u4ee5\u9a6c\u864e\u3002\u76f8\u53cd\uff0c\u68c0\u67e5\u4e00\u6bb5\u4ee3\u7801\u7684\u4eba\u8d8a\u591a\uff08\u8fbe\u5230\u7279\u5b9a\u6570\u91cf n\uff0c\u5176\u4e2d\u66f4\u591a\u7684\u4ee3\u7801\u5ba1\u67e5\u5b9e\u9645\u4e0a\u5f00\u59cb\u6709\u5bb3\uff09\uff0c\u4ee3\u7801\u7684\u9632\u9519\u80fd\u529b\u5c31\u8d8a\u5f3a\u3002\u76f8\u53cd\uff0c\u4f18\u79c0\u7684\u56e2\u961f\u4f1a\u4e3a\u5f00\u53d1\u4eba\u5458\u7559\u4e0b\u4e00\u4e9b\u677e\u61c8\u7684\u7a7a\u95f4\u3002\u4ed6\u4eec\u77e5\u9053\u8fd9\u5c06\u9700\u8981\u4efb\u4f55\u5f00\u53d1\u4eba\u5458\uff0c\u65e0\u8bba\u5176\u6280\u80fd\u6c34\u5e73\u5982\u4f55\uff0c\u5165\u804c\u65f6\u95f4\u5982\u4f55\uff0c\u800c\u4e14\u6700\u7ec8\uff0c\u5f00\u53d1\u4eba\u5458\u90fd\u662f\u5177\u6709\u504f\u89c1\u548c\u4e0d\u540c\u6280\u80fd\u6c34\u5e73\u7684\u4ee3\u7801\u7684\u4eba\u3002\u5b9a\u671f\u5ba1\u67e5\u5f7c\u6b64\u4ee3\u7801\u7684\u56e2\u961f\u4f1a\u76f8\u4e92\u5347\u7ea7\u3002\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u4ed6\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4fdd\u62a4\u63aa\u65bd\uff1a\u8fd0\u884c\u624b\u518c\u800c\u4e0d\u662f\u624b\u52a8\u8f93\u5165\u3001\u6613\u4e8e\u56de\u6eda\u7684\u751f\u4ea7\u7cfb\u7edf\u3001\u968f\u65f6\u53ef\u4ee5\u56de\u7b54\u95ee\u9898\u7684\u56e2\u961f\u6210\u5458\u3001\u826f\u597d\u7684\u6587\u6863\uff0c\u5e76\u4e14\u4ed6\u4eec\u6709\u4eba\u5458\u90a3\u4e9b\u7ecf\u5386\u5165\u804c\u57f9\u8bad\u7684\u4eba\u5bf9\u76f8\u540c\u7684\u8fc7\u7a0b\u505a\u51fa\u4e86\u8d21\u732e\u3002\n\u4ed6\u4eec\u8fd8\u63d0\u62d4\u91cd\u89c6\u6240\u6709\u8fd9\u4e9b\u6280\u80fd\u7684\u4eba\uff1a\u8010\u5fc3\u3001\u6307\u5bfc\uff0c\u4ee5\u53ca\u8981\u6c42\u5353\u8d8a\u6280\u672f\u540c\u65f6\u627f\u8ba4\u5b9e\u73b0\u76ee\u6807\u6240\u9700\u6761\u4ef6\u7684\u4eba\u3002\u4f60\u63d0\u62d4\u7684\u4eba\u4f1a\u544a\u8bc9\u4f60\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u4f60\u5e0c\u671b\u7ec4\u7ec7\u7684\u5916\u89c2\uff0c\u6240\u4ee5\u91cd\u8981\u7684\u662f\u8981\u7a81\u51fa\u5206\u4eab\u8fd9\u4e9b\u4ef7\u503c\u89c2\u7684\u4eba\u5e76\u4e3a\u7ec4\u7ec7\u5b9a\u4e0b\u57fa\u8c03\u3002\u5728\u4e2d\u4e16\u7eaa\uff0c\u793e\u533a\u5728\u884c\u4e1a\u4e2d\u5c06\u6700\u4f73\u5b9e\u8df5\u4f20\u9012\u7ed9\u540e\u4ee3\u7684\u65b9\u5f0f\u662f\u901a\u8fc7\u5b66\u5f92\u5236\u3002\u5982\u679c\u4f60\u7684\u7236\u6bcd\u5e0c\u671b\u4f60\u5728 12 \u5c81\u5de6\u53f3\u6210\u4e3a\u4e00\u540d\u917f\u9152\u5e08\uff0c\u4f60\u4f1a\u6536\u62fe\u884c\u56ca\uff0c\u5728\u8461\u8404\u56ed\u91cc\u4f4f\u4e0a\u51e0\u5e74\uff08\u4e00\u4e2a\u8bf1\u4eba\u7684\u60f3\u6cd5\uff09\uff0c\u5728\u90a3\u91cc\u7ecf\u9a8c\u4e30\u5bcc\u7684\u917f\u9152\u5e08\u4f1a\u652f\u4ed8\u4f60\u7684\u4f4f\u623f\u548c\u4f4f\u5bbf\u8d39\u7528\u4ee5\u6362\u53d6\u4f60\u505a\u4e86\u6240\u6709\u7e41\u91cd\u7684\u5de5\u4f5c\uff0c\u6700\u7ec8\u4f1a\u5bfc\u81f4\u4f60\u5728\u4f60\u7684\u4ea4\u6613\u4e2d\u53d8\u5f97\u719f\u7ec3\u3002\u6ca1\u6709\u5b66\u4e60\u5982\u4f55\u6784\u5efa Docker \u5bb9\u5668\u6216\u5904\u7406\u751f\u4ea7\u4e2d\u65ad\u7684\u5b66\u5f92\u671f\u3002\u6211\u4eec\u4e2a\u4eba\u62e5\u6709\u7684\u53ea\u6709\u4e66\u7c4d\uff08\u5982\u679c\u5b83\u4eec\u80fd\u591f\u8ddf\u4e0a\u6280\u672f\u53d8\u5316\u7684\u901f\u5ea6\uff09\u548c\u4e92\u8054\u7f51\u8d44\u6e90\uff0c\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u6b63\u786e\u4e5f\u53ef\u80fd\u4e0d\u6b63\u786e\u3001\u8fc7\u65f6\u6216\u6536\u8d39\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u6cd5\u662f\u8ba9\u4e00\u4f4d\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u966a\u4f34\u5728\u8eab\u8fb9\uff0c\u4ed6\u81f3\u5c11\u53ef\u4ee5\u7ed9\u4f60\u4e00\u70b9\u65f6\u95f4\u3002\u901a\u5e38\uff0c\u8fd9\u5b8c\u5168\u662f\u5076\u7136\u53d1\u751f\u7684\uff0c\u6211\u5e0c\u671b\u6211\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\u6765\u4e13\u95e8\u4e3a\u4f60\u5b9e\u73b0\u5b83\uff0c\u4f46\u662f\u6211\u5171\u4e8b\u8fc7\u7684\u6240\u6709\u975e\u5e38\u597d\u7684\u4eba\uff0c\u6211\u5728\u6211\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u5b8c\u5168\u968f\u673a\u9047\u5230\u4e86\u4ed6\u4eec.\u4f46\u662f\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u544a\u8bc9\u60a8\u7ec4\u7ec7\u4e2d\u7684\u8fd9\u4e9b\u4eba\u662f\u8c01\uff0c\u5e76\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5c1d\u8bd5\u4e0e\u4ed6\u4eec\u5408\u4f5c\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u95ee\u5f88\u591a\u95ee\u9898\u624d\u80fd\u627e\u5230\u95ee\u9898\u7684\u6839\u6e90\uff0c\u901a\u5e38\u4ed6\u4eec\u4f1a\u516c\u5f00\u63d0\u95ee\uff0c\u4ee5\u4fbf\u5176\u4ed6\u4eba\u627e\u5230\u7b54\u6848\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u5f04\u6e05\u695a\u590d\u6742\u7cfb\u7edf\u7684\u5de5\u4f5c\u539f\u7406\u3002\u4f18\u79c0\u7684\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\u4f1a\u4ed4\u7ec6\u5ba1\u67e5 PR \u5e76\u63d0\u4f9b\u53cd\u9988\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u56de\u7b54\u95ee\u9898\u3002\u5f88\u96be\u5b9a\u4e49\u4e00\u4e2a\u4f18\u79c0\u7684\u5f00\u53d1\u4eba\u5458\u4f1a\u505a\u4ec0\u4e48\uff0c\u4f46\u4f60\u5f88\u53ef\u80fd\u77e5\u9053\u4f60\u7ec4\u7ec7\u4e2d\u8c01\u662f\u4f18\u79c0\u7684\u4eba\uff0c\u56e0\u4e3a\u4f60\u603b\u662f\u542c\u8bf4\u4ed6\u4eec\uff0c\u800c\u4e14\u56e0\u4e3a\u5982\u679c\u4f60\u6709\u95ee\u9898\uff0c\u4ed6\u4eec\u662f\u4f60\u7684\u7b2c\u4e00\u4e2a\u4eba\u60f3\u4e00\u60f3\u4ec0\u4e48\u65f6\u5019\u53bb\u5bfb\u6c42\u5e2e\u52a9\u3002\u4e00\u65e6\u4f60\u627e\u5230\u4ed6\u4eec\uff0c\u60f3\u529e\u6cd5\u9760\u8fd1\u4ed6\u4eec\u5e76\u5438\u6536\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u5f53\u4ed6\u4eec\u8bf4\u8bdd\u65f6\u503e\u542c\uff0c\u5e76\u89c2\u5bdf\u4ed6\u4eec\u5982\u4f55\u5ba1\u67e5\u4ee3\u7801\u3002\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u597d\u65b9\u6cd5\u662f\u8981\u6c42\u5728 PR \u8bc4\u8bba\u4e2d\u6807\u8bb0\u56e2\u961f\u3002\u5982\u679c\u60a8\u8fd8\u4e0d\u80fd\u8fdb\u884c\u4ee3\u7801\u5ba1\u67e5\uff0c\u8bf7\u5e2e\u52a9\u4ed6\u4eec\u7f16\u5199\u6587\u6863\u3002\u5982\u679c\u4f60\u80fd\u4ece\u4ed6\u4eec\u7684\u76d8\u5b50\u91cc\u62ff\u8d70\u4e00\u4ef6\u5c0f\u4e8b\uff0c\u4ed6\u4eec\u4e0b\u6b21\u4f1a\u611f\u8c22\u4f60\u7684\u5e2e\u52a9\u3002\u5982\u679c\u60a8\u81ea\u5df1\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\uff0c\u8bf7\u6ce8\u610f\uff0c\u6210\u4e3a\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u4e0d\u4ec5\u4ec5\u662f\u7f16\u5199\u826f\u597d\u3001\u6b63\u786e\u7684\u4ee3\u7801\u7684\u8d23\u4efb\uff0c\u5c3d\u7ba1\u8fd9\u672c\u8eab\u5c31\u662f\u4e00\u9879\u91cd\u5927\u800c\u91cd\u8981\u7684\u8d23\u4efb\u3002\u8fd9\u4e5f\u662f\u5728\u8bad\u7ec3\u5176\u4ed6\u4eba\u50cf\u4f60\u4e00\u6837\u5bcc\u6709\u6210\u6548\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u7ec4\u7ec7\u3001\u56e2\u961f\u548c\u9ad8\u7ea7\u4eba\u5458\u5728\u5e2e\u52a9\u4ed6\u4eba\u5347\u7ea7\u548c\u63d0\u9ad8\u751f\u4ea7\u529b\u65b9\u9762\u7684\u4f5c\u7528\u3002\u5728\u5f15\u5bfc\u6211\u4eec\u7684\u5b66\u4e60\u4e2d\uff0c\u6211\u4eec\u81ea\u5df1\u7684\u89d2\u8272\u662f\u4ec0\u4e48\uff1f\u5b66\u4e60\u5982\u4f55\u5728\u6b63\u786e\u7684\u65f6\u95f4\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u662f\u6210\u4e3a\u5f00\u53d1\u4eba\u5458\u7684\u57fa\u672c\u6280\u80fd\u4e4b\u4e00\u3002\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u9700\u8981\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u3001\u5927\u91cf\u8bd5\u9a8c\u548c\u52aa\u529b\uff0c\u5e76\u9700\u8981\u5927\u91cf\u4fee\u8865\u4e0d\u540c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u76f4\u5230\u95ee\u9898\u53d8\u5f97\u6709\u610f\u4e49\u4e3a\u6b62\u3002\u5c24\u5176\u662f\u4f5c\u4e3a\u4e00\u540d\u5927\u4e09\u5b66\u751f\uff0c\u63d0\u51fa\u597d\u7684\u95ee\u9898\u53ef\u80fd\u4f1a\u8ba9\u4eba\u671b\u800c\u751f\u754f\u3002\u6211\u6700\u8fd1\u610f\u8bc6\u5230\uff0c\u524d\u8f88\u5584\u4e8e\u63d0\u95ee\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u4ed6\u4eec\u5df2\u7ecf\u77e5\u9053\u81ea\u5df1\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002 \u201c\u6211\u662f\u4e00\u540d\u9ad8\u7ea7\u5f00\u53d1\u4eba\u5458\uff0c\u6211\u53ea\u662f\u67e5\u627e\u4e86\u5982\u4f55\u521b\u5efa NumPy \u6570\u7ec4\u7b49\u3002\u201d\u4f46\u6211\u521a\u521a\u4ece\u8fd9\u6761\u8bc4\u8bba\u4e2d\u610f\u8bc6\u5230\u4e00\u4e2a\u95ee\u9898\uff1a\u4f5c\u4e3a\u8d44\u6df1\u4eba\u58eb\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u4eec\u77e5\u9053\u6211\u4eec\u9700\u8981\u67e5\u627e\u4ec0\u4e48\u3002 https://t.co/KZT6nrWyaC pic.twitter.com/iZsQZIHzCl \u2014 Vicki Boykis (@vboykis) 2021 \u5e74 7 \u6708 29 \u65e5\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u53ef\u4ee5\u63d0\u51fa\u611a\u8822\u95ee\u9898\u7684\u73af\u5883\u5f88\u91cd\u8981\u3002\u6211\u89c1\u8fc7\u7684\u6700\u597d\u7684\u5904\u7406\u65b9\u6cd5\u4e4b\u4e00\u662f\u5728 Slack \u4e0a\u6709\u4e00\u4e2a#dumbquestions \u9891\u9053\u3002\u53e6\u4e00\u4e2a\u662f\u8ba9\u4f18\u79c0\u7684\u8d44\u6df1\u4eba\u58eb\u5728\u4f1a\u8bae\u4e0a\u63d0\u51fa\u770b\u4f3c\u7b80\u5355\u7684\u95ee\u9898\uff0c\u4ee5\u589e\u5f3a\u4ed6\u4eba\u7684\u80fd\u529b\u3002\u5982\u679c\u8fd9\u4e09\u4ef6\u4e8b\u5c31\u8fd9\u4e48\u7b80\u5355\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u6bcf\u5929\u90fd\u505a\u5462\uff1f\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u96c7\u4f63\u5927\u91cf\u7684\u521d\u7ea7\u4eba\u5458\u5e76\u57f9\u8bad\u4ed6\u4eec\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u521b\u9020\u4eba\u4eec\u53ef\u4ee5\u5b66\u4e60\u7684\u5730\u65b9\uff0c\u6211\u4eec\u4e3a\u4ec0\u4e48\u4e0d\u6559\u4eba\u4eec\u5982\u4f55\u63d0\u51fa\u597d\u95ee\u9898\uff1f\n\u4ee4\u4eba\u6cae\u4e27\u7684\u7b54\u6848\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5b8c\u5168\u4e0d\u53ef\u89c1\u7684\uff0c\u5e76\u4e14\u5728\u4efb\u4f55\u5355\u4e2a\u7279\u5b9a\u4ea7\u54c1\u6216\u516c\u53f8\u7684\u5e95\u7ebf\u4e2d\u51e0\u4e4e\u90fd\u4e0d\u660e\u663e\uff0c\u800c\u4e14\u51e0\u4e4e\u4e0d\u53ef\u80fd\u89e3\u91ca\u5b83\u4eec\uff0c\u56e0\u4e3a\u77e5\u8bc6\u5de5\u4f5c\u4ecd\u7136\u65e0\u6cd5\u8861\u91cf\u751f\u4ea7\u529b\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\u800c\u4e14\uff0c\u6b64\u5916\uff0c\u5728\u6267\u884c\u5c42\u9762\uff0c\u5f88\u96be\u544a\u8bc9\u90a3\u4e9b\u6307\u5bfc\u548c\u8fdb\u884c\u5185\u90e8\u57f9\u8bad\u7684\u56e2\u961f\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5\u57fa\u4e8e\u5185\u90e8\u6d41\u7a0b\u7684\u56e2\u961f\uff0c\u5e76\u5956\u52b1\u90a3\u4e9b\u6295\u5165\u5de5\u4f5c\u7684\u56e2\u961f\uff0c\u9664\u975e\u4f18\u79c0\u7684\u56e2\u961f\u662f\u8fd8\u64c5\u957f\u8425\u9500\u81ea\u5df1\uff0c\u5e76\u5728\u57f9\u8bad\u65f6\u5c3d\u5feb\u53d1\u5e03\u597d\u7684\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u6211\u575a\u4fe1\u5373\u4f7f\u5f00\u59cb\u8c08\u8bba\u4e8b\u7269\u5e76\u7ed9\u5b83\u4eec\u8d77\u540d\u5b57\u4e5f\u662f\u4e8b\u7269\u7684\u5f00\u59cb\uff0c\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u5206\u4eab\u8fd9\u4e2a\uff0c\u56e0\u4e3a\u6211\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u5c06\u5176\u89c6\u4e3a\u4ed6\u4eec\u7684\u4e00\u90e8\u5206\u65e5\u5e38\u5de5\u4f5c\u6d41\u7a0b\u3002", "note_en": "I don\u2019t usually deal in absolutes, but I now know this one thing to be fundamentally true: no one becomes a good software engineer by themselves. But in an industry that has always prided itself on the myth of the superstar ninja, the  lone wolf, the self-taught genius, it can seem like good developers are not born - they rise out of the ground, fully-formed and churning out PRs their wake.\n In my career so far, I haven\u2019t seen a single person who has been able to grow successfully as a competent developer without learning from others. And, I\u2019m concerned that, as an industry, we don\u2019t often actively talk about the fact that  we need other people at work to help us learn things, and that we need room for this learning in our development and work planning processes.\n In  \u201cRise of the Expert Beginner\u201d, an essay that I re-read every couple of years, Erik talks about how developers stop learning. His basic thesis, based on previous studies of skill acquisition, is that people start acquiring skills very quickly. But, at some point in the learning process, they get to a point where they stagnate because the skills that they learned as a beginner will carry them to being an expert.\n Think about the difference between being able to write functions that print out to your terminal versus creating a class with methods that return text to pass to other methods that checks for sanitized inputs, and then passes it to a front-end. Now imagine that that class is a  function that has to be packaged to work in the cloud. And, on top of that, imagine that the function has to be version-controlled in a repo where 5-6 people are regularly merging code, pass CI/CD, and  is part of a system that returns the outputs of some machine learning model with latency constraints.\n You can write print statements in any language pretty quickly (given that  you get over the hump of installing it on your local machine). But it takes a very long time to understand how to get from print(\u201cHello World\u201d) to \u201cHere\u2019s an app that is making machine learning predictions for you in real-time.\u201d\n So how do we get everyone on our teams to that place? How do we help others get out of the dark, frustrating place that is the local minima of suckiness that is the expert beginner, past the stars, and into the cloud? And, how can we help ourselves become better developers?\n I.e if you are good at writing code but not at reviewing it, you\u2019re gonna be writing a lot of code and not doing a lot of reviews since the initial feedback to your reviews will be negative. You have to overcome that local minima of suckiness.\n\u2014 Vicki Boykis (@vboykis)  July 26, 2021\n There are three things that I\u2019ve noticed in my own career that developers need to become better:\n   This is the best recent description I\u2019ve found of the phenomenon we now call psychological safety:\n Counterintuitive but true: You\u2019ll do your smartest work with people you\u2019re comfortable being dumb around\n\u2014 jckbtchr (@jackbutcher)  July 18, 2021\n  The simple story is that, in a good, productive software environment, you have the room to mess up. The apocryphal story about how this works is the one where the junior developer breaks production, costing the company thousands of dollars. After he sees this, he starts putting everything on his desk in a box. The CEO comes up to him and says, \u201cWhere are you going?\u201d \u201cI just cost the company so much money, I figured I was fired.\u201d \u201cWe just paid thousands of dollars to train you. Why would we let you go?\u201d\n Here\u2019s another real one one, from an amazing book I\u2019m reading, Gerald Weinberg\u2019s  \u201cThe Psychology of Computer Programming\u201d, which I strongly encourage everyone who works in or near development to read because it addresses most of the issues we think about when we think about programming on a daily basis - project planning, team structure, and blockers, with the additional mindblowing caveat that all of this was already discussed and written about in 1971.\n I cannot recommend The Psychology of Computer Programming any more strongly. It covers every single thing we talk about in industry today. It is from 1971. For example, here is psychological safety.  pic.twitter.com/I0jltWWZwx\n\u2014 Vicki Boykis (@vboykis)  August 1, 2021\n The anecdote is about a developer, Bill, who was working on (ostensibly) a missile defense system, with instructions written in machine code. He got to a point where he thought he figured it out, but since you probably need a second set of eyes on a missile defense system, he asked Marilyn to review his code.\n Code review was still in the nascent stages in those days, and Weinberg writes, \u201cHis value system, when it came to programming, dictated that secretive, possessive programming was bad and that open, shared programming was good. Errors that might be found in code he had written - not \u201chis code\u201d for the terminology was not used here - were simply facts to be exposed to investigation with an eye to future improvement, not attacks on his person. \u201c\n Marilyn found 17 bugs in the 13 lines of code. Instead of fuming, Bill\u2019s reaction was to go around and tell everyone how impossible this code was, and how hilarious it was that she had found 17 bugs. While he was doing that, a few people joined in, for at this point, it was a game, and found a few more bugs. A scenario that could have ended with Bill accusing Marilyn of blocking him or of Bill hiding his code because he thought others would think he was a bad developer ended up much better because things were out in the open.\n Good companies leave room for bugs and rough drafts. It doesn\u2019t mean that work can be sloppy. On the contrary, the more people that check a piece of code (up to a certain number n where more code reviews actually start to be detrimental), the more error-proof the code becomes. Good teams, instead, leave the developer room for some slack. They know it\u2019s going to take any developer, regardless of skill level, time to onboard, and that, ultimately, developers are humans with biases and different skill levels of code.\n Teams that review each other\u2019s code regularly level each other up.In the process, they also add safeguards: runbooks instead of manual entry, production systems with easy rollback, team members who are readily available to answer questions, good documentation, and they have people who go through onboarding contribute to the same process.\n They also promote people who value all of these skills: patience, mentorship, and people who demand technical excellence while acknowledging what it takes to get there. Who you promote will tell your org chart how you want the organization to look, so it\u2019s important to spotlight people who share these values and set the tone for the organization.\n  In the Middle Ages, the way that communities passed on best practices to future generations  in the trades was through apprenticeships. If your parents wanted you to be  a winemaker, around age 12, you\u2019d pack your bags off and go live in a vineyard for several years (a tantalizing idea), where a seasoned winemaker would pay for your housing and lodging in return for you doing all the gruntwork that would eventually lead to you becoming skilled in your trade.\n There is no apprenticeship for learning how to build Docker containers or dealing with prod outages. All we have at our own personal disposal are books (if they can keep up with how quickly tech changes) and internet resources which may or may not be correct, or out of date, or paywalled.\n The antidote to this is being around just one good senior person who can give you at least a little of their time. Usually, this happens entirely by chance, and I wish I had a good recipe for how to make it happen for you specifically, but all of the very good people I\u2019ve worked with, I\u2019ve come across them entirely randomly in my career.\n There is a way, though, to tell who those people are in your organization, and to try to work with them if at all possible. Good senior developers  ask lots of questions to get to the root of problems, and usually they ask them publicly so others can find out the answer. Good senior developers figure out how  complicated systems work. Good senior developers carefully review PRs and give feedback, and  they also answer questions. It\u2019s hard to define what a good developer does absolutely, but chances are you know who the good people in your organization are, because you\u2019re always hearing about them, and because, if you have a question, they\u2019re the first person you think about when going to for help.\n Once you find them, find ways to be near them and absorb their knowledge. Listen when they talk, and watch how they review code. One great way to do this is to ask to tag-team on PR reviews. If you\u2019re not at the point where you can do code reviews yet, help them write documentation. If you can take even one small thing off their plate, they\u2019ll be grateful for your help next time.\n If you, yourself are the good,senior person in this situation, be aware that being a good, senior person is a responsibility that is more than just writing good, correct code, although that in itself is a large, important responsibility. It\u2019s also training other people to be as productive as you are.\n  We\u2019ve so far talked about the role of the organization, the team, and senior-level people in helping others to level up and become productive. What is our own role in bootstrapping our learning?\n Learning how to ask the right questions at the right time is one of the fundamental skills of being a developer. Formulating the right question takes a lot of time, a lot of trial and effort, and a lot of tinkering with different solutions until the question even makes sense.\n Especially as a junior, it can be very daunting to ask good questions.Something I realized recently is that one of the reasons senior people are good at asking questions is that they already know the shape of their expertise.\n &#34;I&#39;m a senior developer and I just looked up how to create a NumPy array, etc.&#34; But there&#39;s a problem here that I just realized from this comment: As senior people we can do this because we know what we need to look up.  https://t.co/KZT6nrWyaC  pic.twitter.com/iZsQZIHzCl\n\u2014 Vicki Boykis (@vboykis)  July 29, 2021\n This is why an evnironment where it\u2019s ok to ask stupid questions is important. One of the best ways I\u2019ve seen of dealing with this is having a #dumbquestions channel on Slack. Another is having the Good Senior People ask seemingly simple questions in meetings to empower others.\n  If it\u2019s as easy as these three things, why don\u2019t we do all of them every day? Why don\u2019t we hire tons of junior people and train them up, why don\u2019t we create places where people can learn, and why don\u2019t we all teach people how to ask good questions?\n The depressing answer is that all of these are completely invisible and almost not evident at all in the bottom line of any single given product or company, and it\u2019s almost impossible to account for them since knowledge work is still impossible to measure productivity-wise. In most cases, they\u2019re a nice-to-have. And, additionally, at the executive level, it can be very hard to tell teams that mentor and do internal training from ones that don\u2019t based on internal process alone and reward the ones that are putting in the work, unless the good teams are also good at marketing themselves and ship good code just as quickly as they train.\n However, I\u2019m a firm believer that even starting to talk about things and giving them a name is the beginning of something, and so here I am sharing this, because I\u2019m hopeful that more people will think about it as part of their daily workflows.", "posttime": "2021-08-09 01:49:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5c40\u90e8,minima,\u4ee3\u7801", "title": "Suckiness \u7684\u5c40\u90e8\u6700\u5c0f\u503c", "title_en": "The Local Minima of Suckiness", "transed": 1, "url": "http://veekaybee.github.io/2021/08/05/local-minima-of-suckiness/", "via": "", "real_tags": ["\u5c40\u90e8", "minima", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "949004924e0a52f9cd492d71714a1a42.jpg", "infoid": 1072145, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d77\u602a\u5728\u5730\u7403\u4e0a\u5927\u591a\u6570\u822a\u6d77\u6587\u5316\u7684\u795e\u8bdd\u548c\u4f20\u8bf4\u4e2d\u626e\u6f14\u7740\u91cd\u8981\u7684\u89d2\u8272\uff0c\u5e76\u4e14\u62e5\u6709\u5982\u6b64\u9f13\u821e\u4eba\u5fc3\u7684\u6d77\u6d0b\u751f\u7269\u591a\u6837\u6027\uff0c\u4e0d\u96be\u770b\u51fa\u539f\u56e0\u3002\u4e0e\u9c7c\u7684\u9ad8\u7ea7\u7b56\u5c55\u4eba\u5965\u5229\u5f17\u00b7\u514b\u91cc\u95e8\u548c\u8f6f\u4f53\u52a8\u7269\u7684\u9ad8\u7ea7\u7b56\u5c55\u4eba\u4e54\u6069\u00b7\u963f\u5e03\u83b1\u7279\u4e00\u8d77\u63a2\u7d22\u6f5c\u4f0f\u5728\u535a\u7269\u9986\u6e7f\u85cf\u54c1\u4e2d\u7684\u6614\u65e5\u5947\u5999\u6d77\u602a\u80cc\u540e\u7684\u73b0\u5b9e\u7075\u611f\u3002\u6d77\u5996\u8d77\u6e90\u4e8e\u65af\u582a\u7684\u7eb3\u7ef4\u4e9a\u6c11\u95f4\u4f20\u8bf4\uff0c\u901a\u5e38\u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u5177\u6709\u653b\u51fb\u6027\u7684\u5934\u8db3\u7c7b\u751f\u7269\uff0c\u80fd\u591f\u6467\u6bc1\u6574\u8258\u8239\u5e76\u5c06\u6c34\u624b\u62d6\u5165\u5384\u8fd0\u3002\u4e54\u6069\u8bf4\uff1a\u201c\u4e16\u754c\u5404\u5730\u7684\u8bb8\u591a\u6587\u5316\u90fd\u6709\u5173\u4e8e\u6709\u89e6\u624b\u7684\u91ce\u517d\u9a9a\u6270\u6d77\u5458\u6216\u901a\u5e38\u8d77\u4e0d\u6765\u7684\u795e\u8bdd\u6216\u4f20\u8bf4\u3002\u201d\u5728\u53e4\u5e0c\u814a\uff0c\u4e9a\u91cc\u58eb\u591a\u5fb7\u548c\u666e\u6797\u5c3c\u5199\u8fc7\u5173\u4e8e teuthos\uff08\u9c7f\u9c7c\uff09\u7684\u6587\u7ae0\u3002\u6709\u5965\u5fb7\u8d5b\u4e2d\u7684 Scylla \u548c\u6765\u81ea\u52a0\u52d2\u6bd4\u6d77 (Lusca)\u3001\u65e5\u672c (Akkorokamui) \u548c\u65b0\u897f\u5170 (Te Wheke-a-Muturangi) \u7684\u7c7b\u4f3c\u795e\u8bdd\u3002\u4e54\u6069\u8bf4\uff1a\u201c\u9c7f\u9c7c\u548c\u7ae0\u9c7c\u786e\u5b9e\u662f\u4e0d\u5bfb\u5e38\u7684\u52a8\u7269\u3002\u4ed6\u4eec\u7684\u8eab\u4f53\u8ba1\u5212\u4e0e\u6211\u4eec\u5728\u6d77\u4e2d\u6240\u77e5\u7684\u4efb\u4f55\u5176\u4ed6\u4e8b\u7269\u90fd\u4e0d\u76f8\u4f3c\u3002\u5b83\u4eec\u5feb\u901f\u79fb\u52a8\uff0c\u5b83\u4eec\u7684\u8eab\u4f53\u3001\u624b\u81c2\u548c\u89e6\u624b\u79fb\u52a8\u7684\u65b9\u5f0f\u4f3c\u4e4e\u523a\u6fc0\u4e86\u6211\u4eec\u5bf9\u672a\u77e5\u4e8b\u7269\u7684\u6050\u60e7\u3002 \u201c\u6211\u8ba4\u4e3a\u5b83\u4eec\u662f\u5982\u6b64\u5947\u602a\u7684\u751f\u7269\uff0c\u4e00\u4e9b\u975e\u5e38\u5927\u7684\u7269\u79cd\u5f88\u5c11\u88ab\u770b\u5230\uff0c\u8fd9\u4f7f\u5f97\u5b83\u4eec\u5f88\u53ef\u80fd\u6210\u4e3a\u6d77\u5996\u548c\u5176\u4ed6\u6d77\u517d\u4f20\u8bf4\u7684\u8d77\u70b9\u3002\n\u201c\u6211\u4eec\u8ba4\u4e3a\u53d1\u751f\u7684\u4e8b\u60c5\u662f\uff0c\u5de8\u578b\u9c7f\u9c7c\u548c\u5927\u7ae0\u9c7c\u7684\u90e8\u5206\u6d88\u5316\u6216\u8150\u70c2\u7684\u9057\u9ab8\u88ab\u51b2\u4e0a\u6d77\u6ee9\uff0c\u4eba\u4eec\u5f00\u59cb\u731c\u6d4b\u5b83\u4eec\u53ef\u80fd\u662f\u4ec0\u4e48\u3002 \u201c\u5728\u632a\u5a01\uff0c\u6d77\u5996\u795e\u8bdd\u4e0d\u65ad\u53d1\u5c55\uff0c\u8fd9\u79cd\u88ab\u51b2\u6bc1\u7684\u6807\u672c\u88ab\u89e3\u91ca\u4e3a\u6765\u81ea\u4e0a\u5e1d\u6216\u9b54\u9b3c\u7684\u4fe1\u606f\uff0c\u6709\u65f6\u88ab\u79f0\u4e3a\u6d77\u5929\u4f7f\u3001\u6d77\u9b54\u9b3c\u6216\u6d77\u50e7\u3002\u201d\u4ed6\u8865\u5145\u8bf4\uff0c\u201c\u8fd9\u4e9b\u4e8b\u60c5\u662f\u5206\u5f00\u53d1\u751f\u7684\uff0c\u4e16\u754c\u5404\u5730\u7684\u4eba\u4eec\u63d0\u51fa\u4e86\u7c7b\u4f3c\u7684\u7b54\u6848\u548c\u795e\u8bdd\u2014\u2014\u8fd9\u662f\u795e\u8bdd\u5f62\u5f0f\u7684\u8d8b\u540c\u8fdb\u5316\u7684\u4e00\u4e2a\u6848\u4f8b\u3002\u201d\u5de8\u578b\u9c7f\u9c7c (Architeuthis dux) \u4e8e 1857 \u5e74\u9996\u6b21\u88ab\u897f\u65b9\u79d1\u5b66\u5206\u7c7b\uff0c\u79d1\u5b66\u5bb6\u4eec\u4ecd\u5728\u5fd9\u4e8e\u89e3\u5f00\u4ed6\u4eec\u7684\u5965\u79d8\u3002 \u201c\u547d\u540d\u548c\u5206\u7c7b\u4e00\u79cd\u65b0\u52a8\u7269\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb\uff0c\u201d\u4e54\u6069\u8bf4\u3002 \u201c\u6211\u4eec\u77e5\u9053\u5b83\u662f\u771f\u5b9e\u7684\uff0c\u800c\u4e0d\u662f\u4eba\u4eec\u60f3\u8c61\u4e2d\u7684\u795e\u8bdd\u4e2d\u7684\u91ce\u517d\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u53ea\u662f\u5f00\u59cb\u4e86\u89e3\u5b83\u4eec\u3002\u201d\u5de8\u578b\u9c7f\u9c7c\u751f\u6d3b\u5728\u4e16\u754c\u5404\u5730\u7684\u6e29\u5e26\u6c34\u57df\uff0c\u751f\u6d3b\u5728\u5730\u8868\u4ee5\u4e0b 200-1,400 \u7c73\u4e4b\u95f4\u3002\u4eba\u4eec\u8ba4\u4e3a\u96cc\u6027\u53ef\u4ee5\u957f\u5230 13 \u7c73\uff0c\u800c\u7a0d\u5c0f\u7684\u96c4\u6027\u53ef\u4ee5\u957f\u5230 10 \u7c73\u3002\u5de8\u578b\u9c7f\u9c7c\u4e0d\u6311\u98df\u2014\u2014\u5b83\u4eec\u6355\u98df\u9c7c\u7c7b\u548c\u7532\u58f3\u7c7b\u52a8\u7269\uff0c\u4e5f\u5403\u98df\u3002\u79d1\u5b66\u5bb6\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u81ea\u76f8\u6b8b\u6740\u7684\u8bc1\u636e\uff0c\u4f46\u83dc\u5355\u4e0a\u6ca1\u6709\u8239\u53ea\u7684\u8ff9\u8c61\u3002\n\u4ed6\u4eec\u6700\u5927\u7684\u9002\u5e94\u662f\u4ed6\u4eec\u7684\u5927\u773c\u775b\u3002\u5de8\u578b\u9c7f\u9c7c\u62e5\u6709\u5730\u7403\u4e0a\u6240\u6709\u751f\u7269\u7684\u7b2c\u4e8c\u5927\u773c\u775b\uff0c\u7528\u4e8e\u5e2e\u52a9\u63a2\u6d4b\u548c\u907f\u5f00\u62b9\u9999\u9cb8\uff0c\u62b9\u9999\u9cb8\u662f\u552f\u4e00\u5927\u5230\u8db3\u4ee5\u5728\u5b83\u4eec\u5b8c\u5168\u957f\u5927\u540e\u5403\u6389\u5de8\u578b\u9c7f\u9c7c\u7684\u6355\u98df\u8005\u3002\u867d\u7136\u5176\u4ed6\u4e00\u4e9b\u8f83\u5c0f\u7684\u9c7f\u9c7c\u79cd\u7c7b\u662f\u597d\u6597\u7684\u730e\u98df\u8005\uff0c\u4f46\u4eba\u4eec\u8ba4\u4e3a\u5de8\u578b\u9c7f\u9c7c\u5728\u8fdc\u79bb\u4eba\u7c7b\u63a5\u89e6\u7684\u6df1\u6e29\u5e26\u6c34\u57df\u8fc7\u7740\u5b64\u72ec\u7684\u751f\u6d3b\u3002\u636e\u4e54\u6069\u8bf4\uff0c\u201c\u5b83\u4eec\u53ef\u80fd\u65e0\u6cd5\u53d8\u5f97\u8db3\u591f\u5927\u4ee5\u51fb\u6c89\u4e00\u8258\u8239\uff0c\u4f46\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u8239\u7684\u5927\u5c0f\u3002\u201d &#39;\u5de8\u578b\u9c7f\u9c7c\u65e0\u6cd5\u5728\u5730\u8868\u83b7\u5f97\u5b83\u4eec\u6240\u9700\u7684\u6c27\u6c14\u3002\u56e0\u6b64\uff0c\u5f53\u4eba\u4eec\u786e\u5b9e\u5728\u5730\u8868\u9047\u5230\u6d3b\u4f53\u65f6\uff0c\u90a3\u662f\u56e0\u4e3a\u4ed6\u4eec\u538b\u529b\u5927\uff0c\u53ef\u80fd\u5feb\u8981\u6b7b\u4e86\u3002 \u201c\u6211\u4eec\u4ecd\u7136\u4e0d\u77e5\u9053\u5b83\u4eec\u662f\u5982\u4f55\u4ea4\u914d\u7684\uff0c\u5b83\u4eec\u80fd\u6d3b\u591a\u4e45\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u751f\u957f\u7684\u3002\u5b83\u4eec\u4ecd\u7136\u662f\u9ad8\u5ea6\u795e\u79d8\u7684\u91ce\u517d\uff0c\u4ee4\u4eba\u5174\u594b\u7684\u662f\u79d1\u5b66\u5bb6\u4ecd\u5728\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u3002\u4f5c\u4e3a\u4e16\u754c\u5404\u5730\u822a\u6d77\u6c11\u4fd7\u7684\u4e00\u4e2a\u7279\u5f81\uff0c\u62e5\u6709\u4eba\u5f62\u8eaf\u5e72\u548c\u86c7\u5f62\u5c3e\u5df4\u7684\u6d77\u5996\u548c\u4eba\u9c7c\u5df2\u7ecf\u5728\u5730\u56fe\u548c\u4eba\u7c7b\u60f3\u8c61\u7684\u89d2\u843d\u91cc\u8426\u7ed5\u4e86\u6570\u5343\u5e74\u3002\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u5728 18 \u4e16\u7eaa\uff0c\u4efb\u4f55\u4e58\u5750\u6728\u8239\u98de\u8d8a\u5730\u5e73\u7ebf\u7684\u4eba\u6bd4\u4eca\u5929\u81f3\u5c11\u6709\u65e0\u7ebf\u7535\u8054\u7cfb\u7684\u5b87\u822a\u5458\u66f4\u80fd\u4e0e\u5176\u4ed6\u4eba\u8131\u8282\u3002\u201d\n\u201c\u8fd9\u4e9b\u6c34\u624b\u6709\u65f6\u4f1a\u56e0\u4e3a\u4e0e\u5bb6\u91cc\u7684\u4eba\u6ca1\u6709\u63a5\u89e6\u800c\u65c5\u884c\u591a\u5e74\u3002\u4eba\u4eec\u5bf9\u4ed6\u4eec\u53ef\u80fd\u5728\u4e16\u754c\u53e6\u4e00\u7aef\u770b\u5230\u7684\u5947\u5999\u4e8b\u7269\u62b1\u6709\u5f88\u5927\u7684\u671f\u671b\u3002\u4ed6\u4eec\u7684\u6545\u4e8b\u975e\u5e38\u53d7\u6b22\u8fce\uff0c\u4ee5\u81f3\u4e8e\u65e5\u672c\u6709\u8fdb\u53d6\u5fc3\u7684\u5de5\u5320\u5728\u9690\u533f\u52a8\u7269\u6807\u672c\u65b9\u9762\u5efa\u7acb\u4e86\u84ec\u52c3\u53d1\u5c55\u7684\u8d38\u6613\u3002\u867d\u7136\u4eca\u5929\u6211\u4eec\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5b83\u4eec\u662f\u6076\u4f5c\u5267\u800c\u8ba4\u51fa\u521b\u9020\u6027\u52a8\u7269\u6807\u672c\u5265\u5236\u672f\u6216\u5de7\u5999\u5730\u5e72\u71e5\u6d77\u6d0b\u52a8\u7269\uff0c\u4f46\u7f8e\u4eba\u9c7c\u66fe\u7ecf\u662f\u597d\u5947\u5fc3\u548c\u72c2\u6b22\u8282\u6742\u800d\u7684\u79c1\u4eba\u6a71\u67dc\u7684\u73cd\u8d35\u7279\u5f81\u3002 Jenny Hanivers - \u53ef\u8ffd\u6eaf\u5230 1500 \u5e74\u4ee3 - \u662f\u4e00\u79cd\u5947\u5999\u7684\u6d77\u6d0b\u751f\u7269\uff0c\u7531\u9cd0\u9c7c\u6216 Rhinobatidae \u79d1\u7684\u9cd0\u9c7c\uff08\u4fd7\u79f0\u5409\u4ed6\u9c7c\uff09\u7684\u5e72\u71e5\u8eab\u4f53\u5236\u6210\u3002\u8fd9\u4e9b\u9c7c\u751f\u6d3b\u5728\u6d77\u5e95\uff0c\u867d\u7136\u5b83\u4eec\u8eab\u4f53\u7684\u524d\u7aef\u4f7f\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u9cd0\u9c7c\u6216\u9cd0\u9c7c\uff0c\u4f46\u8eab\u4f53\u7684\u5176\u4f59\u90e8\u5206\u66f4\u50cf\u9ca8\u9c7c\u3002\u5c3d\u7ba1\u97f3\u4e50\u540d\u79f0\uff08\u6307\u7684\u662f\u5b83\u4eec\u72ec\u7279\u7684\u4f53\u578b\uff09\uff0c\u5409\u4ed6\u9c7c\u4e0d\u4f1a\u4e3a\u6c34\u624b\u5531\u5c0f\u591c\u66f2\u3002\u8fd9\u79cd\u5e73\u9759\u7684\u5e95\u6816\u52a8\u7269\u5403\u65e0\u810a\u690e\u52a8\u7269\uff0c\u5728\u4e16\u754c\u5404\u5730\u7684\u6d45\u6d77\u4e2d\u90fd\u80fd\u627e\u5230\u3002\u6839\u636e\u5965\u5229\u5f17\u7684\u8bf4\u6cd5\uff0c\u5728\u5b83\u4eec\u7684\u4eb2\u621a\u2014\u2014\u5c04\u7ebf\u4e2d\u53ef\u4ee5\u770b\u5230\u4e0e\u8b66\u62a5\u5668\u884c\u4e3a\u6700\u76f8\u4f3c\u7684\u884c\u4e3a\u3002\u4ed6\u8bf4\uff1a\u201c\u4e00\u4e9b\u5c0f\u79cd\u7c7b\u7684\u9cd0\u9c7c\u559c\u6b22\u628a\u81ea\u5df1\u7684\u9f3b\u5b50\u4f38\u51fa\u6c34\u9762\uff0c\u6709\u65f6\u4f1a\u4ece\u6c34\u4e2d\u51fa\u73b0\u4e00\u4e2a\u5947\u602a\u7684\u50cf\u8138\u4e00\u6837\u7684\u5e7b\u5f71\u3002\u5b83\u4eec\u901a\u5e38\u662f\u6c34\u65cf\u7bb1\u7684\u7279\u5f81\uff0c\u6709\u4e9b\u7269\u79cd\u751a\u81f3\u4f1a\u8ba9\u4eba\u7c7b\u89e6\u6478\u5b83\u4eec\u3002 \u201c\u5982\u679c\u4f60\u770b\u4e00\u4e0b\u901a\u5e38\u4f4d\u4e8e\u6d77\u5e8a\u4e0a\u7684\u8eab\u4f53\u5e95\u90e8\uff0c\u4f60\u4f1a\u770b\u5230\u5b83\u4eec\u7528\u6765\u538b\u788e\u548c\u5403\u6389\u7532\u58f3\u7c7b\u52a8\u7269\u7684\u4e0b\u5df4\uff0c\u4ee5\u53ca\u6392\u51fa\u6c34\u7684\u547c\u5438\u5b54\u3002\u5f53\u5b83\u4eec\u5e72\u71e5\u6298\u53e0\u65f6\uff0c\u5c31\u4f1a\u9732\u51fa\u4e00\u5f20\u602a\u8bde\u7684\u8138\u3002\n\u8fd9\u4e9b\u52a8\u7269\u8fd8\u6709\u4e00\u4e2a\u5c16\u5c16\u7684\u9f3b\u5b50\u6216\u8bb2\u53f0\uff0c\u7c7b\u4f3c\u4e8e\u6559\u4f1a\u7684\u5e3d\u5b50\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3a\u6d77\u4e3b\u6559\u3002\u6d77\u86c7\u548c\u6d77\u9f99\u51fa\u73b0\u5728\u4e16\u754c\u5404\u5730\u53ef\u8ffd\u6eaf\u5230\u53e4\u4ee3\u7684\u6545\u4e8b\u4e2d\uff0c\u901a\u5e38\u88ab\u63cf\u7ed8\u6210\u5bf9\u6c34\u624b\u9020\u6210\u4e25\u91cd\u7834\u574f\u3002\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u6d77\u86c7\u795e\u8bdd\u53ef\u4ee5\u8ffd\u6eaf\u5230\u53e4\u4ee3\uff0c\u6211\u4eec\u751a\u81f3\u65e0\u6cd5\u8fa8\u522b\u3002\u201d \u201c\u5982\u679c\u6211\u4eec\u6b63\u5728\u5bfb\u627e\u4ea7\u751f\u8fd9\u4e9b\u6545\u4e8b\u7684\u81ea\u7136\u4e16\u754c\u7684\u5019\u9009\u4eba\uff0c\u90a3\u4e48\u7687\u5e26\u9c7c\u5c31\u4f4d\u5c45\u699c\u9996\u3002\u201d\u5965\u5229\u5f17\u8bf4\uff1a\u201c\u7687\u5e26\u9c7c\u771f\u7684\u662f\u4e00\u79cd\u975e\u5e38\u6f02\u4eae\u7684\u52a8\u7269\u2014\u2014\u957f\u8fbe\u516b\u7c73\uff0c\u957f\u7740\u4e00\u5f20\u9a6c\u4f3c\u7684\u8138\uff0c\u5934\u4e0a\u6709\u706b\u7ea2\u8272\u7684\u51a0\uff0c\u9ccd\u4e00\u76f4\u5ef6\u4f38\u5230\u660e\u4eae\u7684\u91d1\u5c5e\u94f6\u8272\u8eab\u4f53\u3002\u4f60\u8fd8\u60f3\u4ece\u6d77\u602a\u90a3\u91cc\u5f97\u5230\u4ec0\u4e48\uff1f\u4e16\u754c\u4e0a\u6700\u957f\u7684\u786c\u9aa8\u9c7c\uff0c\u5de8\u578b\u7687\u5e26\u9c7c (Regalecus glesne)\uff0c\u5df2\u88ab\u8bb0\u5f55\u53ef\u957f\u8fbe 8 \u7c73\u3002\u5b83\u5728\u4e16\u754c\u5404\u5730\u7684\u6e29\u5e26\u548c\u70ed\u5e26\u6c34\u57df\u5747\u6709\u53d1\u73b0\uff0c\u636e\u4fe1\u751f\u6d3b\u5728 200 \u81f3 1,000 \u7c73\u7684\u6df1\u5904\u3002\u4e0e\u6d77\u6d0b\u4e2d\u8bb8\u591a\u6700\u5927\u7684\u751f\u7269\u4e00\u6837\uff0c\u7687\u5e26\u9c7c\u5403\u6d6e\u6e38\u751f\u7269\u3002 \u201c\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u4ed6\u4eec\u6d6e\u51fa\u6c34\u9762\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u9047\u5230\u4e86\u9ebb\u70e6\u5e76\u9677\u5165\u56f0\u5883\uff0c\u201d\u5965\u5229\u5f17\u89e3\u91ca\u8bf4\u3002\n\u7687\u5e26\u9c7c\u901a\u5e38\u4ee5\u5782\u76f4\u6216\u6c34\u5e73\u59ff\u52bf\u6e38\u6cf3\uff0c\u5229\u7528\u8eab\u4f53\u7684\u5de6\u53f3\u8d77\u4f0f\u548c\u80cc\u9ccd\u6765\u4fdd\u6301\u5e73\u8861\u548c\u5411\u524d\u79fb\u52a8\u3002\u53ea\u6709\u5728\u6c34\u9762\uff0c\u5b83\u4eec\u5728\u547c\u5438\u56f0\u96be\u65f6\u624d\u4f1a\u4fa7\u8eab\u6e38\u6cf3\u3002 \u201c\u5b83\u4eec\u5728\u6c34\u9762\u4e0a\u4fa7\u8eab\u6e38\u6cf3\uff0c\u8fd9\u4e9b\u4ece\u5de6\u5230\u53f3\u7684\u8d77\u4f0f\u53d8\u6210\u4e86\u5782\u76f4\u7684\u8d77\u4f0f\uff0c\u521b\u9020\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u5947\u89c2\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u5b83\u4eec\u7684\u8eab\u4f53\u5377\u51fa\u6c34\u9762\u3002\u201d\u5c3d\u7ba1\u751f\u6d3b\u5728\u6df1\u6d77\u3001\u4ee5\u6d6e\u6e38\u751f\u7269\u4e3a\u98df\u7684\u7687\u5e26\u9c7c\u5bf9\u6c89\u6ca1\u8239\u53ea\u6216\u5403\u6389\u6c34\u624b\u6ca1\u6709\u5174\u8da3\uff0c\u4f46\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u5b83\u4eec\u662f\u6df1\u6d77\u5730\u9707\u548c\u6d77\u5578\u7684\u53ef\u9760\u9884\u62a5\u5668\uff0c\u5728\u5730\u9707\u4e8b\u4ef6\u53d1\u751f\u524d\u5c31\u5c06\u81ea\u5df1\u6401\u6d45\u3002\u5c3d\u7ba1\u8be5\u7406\u8bba\u5c1a\u672a\u5f97\u5230\u8bc1\u5b9e\uff0c\u4f46\u5965\u5229\u5f17\u8ba4\u4e3a\u5b58\u5728\u4e00\u4e9b\u6709\u8da3\u7684\u5047\u8bbe\u8054\u7cfb\u3002 \u201c\u5b83\u662f\u4e00\u79cd\u957f\u800c\u6241\u5e73\u7684\u5e26\u72b6\u52a8\u7269\uff0c\u5982\u679c\u4f60\u6709\u8fd9\u79cd\u4f53\u578b\uff0c\u5b83\u53ef\u80fd\u4f1a\u7279\u522b\u53d7\u5230\u538b\u529b\u6ce2\u7684\u5f71\u54cd\uff0c\u201d\u4ed6\u8bf4\u3002 &#39;\u6709\u76f8\u5f53\u591a\u7684\u731c\u60f3\uff0c\u4f46\u53ef\u80fd\u6709\u5176\u6838\u5fc3\u7684\u4e1c\u897f\u3002 \u201c\u6d77\u6d0b\uff0c\u5c24\u5176\u662f\u6df1\u6d77\uff0c\u662f\u5730\u7403\u4e0a\u63a2\u7d22\u6700\u5c11\u7684\u6816\u606f\u5730\u3002\u4e00\u76f4\u4ece\u90a3\u91cc\u4f20\u6765\u7684\u56fe\u50cf\u5411\u6211\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u771f\u6b63\u77e5\u9053\u7684\u5f88\u5c11\uff0c\u8fd8\u6709\u591a\u5c11\u60ca\u559c\u5728\u6df1\u6d77\u7b49\u7740\u6211\u4eec\u3002", "note_en": "Sea monsters have a prominent role in myths and legends of most seafaring cultures on Earth and with such inspiring  ocean biodiversity, it&#39;s not difficult to see why.\n  Join  Oliver Crimmen, Senior Curator of Fish, and  Jon Ablett, Senior Curator of Mollusca, as they explore the real-life inspiration behind fantastic sea monsters of yore that are lurking in the Museum&#39;s wet collections.\n  Originating in Scandinavian folklore, the kraken is usually depicted as an aggressive cephalopod-like creature capable of destroying entire ships and dragging sailors to their doom.\n  &#39;Many cultures around the world have a myth or legend about a tentacled beast bothering seamen or generally getting up to no good,&#39; Jon says.\n In ancient Greece, Aristotle and Pliny wrote about teuthos (squid). There&#39;s the Scylla in the Odyssey and similar myths from the Caribbean (Lusca), Japan (Akkorokamui) and New Zealand (Te Wheke-a-Muturangi).\n  Jon says, &#39;Squid and octopus really are unusual animals. Their body plan isn&#39;t similar to anything else that we know of in the sea. They move quickly and the way that their bodies, arms and tentacles move seem to stimulate something in our fear of the unknown.\n &#39;I think the fact that they are such odd creatures, with some very large species being very rarely seen, make it very likely that they could be the starting points for the kraken and other sea beast legends.\n &#39;What we think happened is that the partially digested or rotted remains of giant squid and large octopus were washing up on beaches and people were starting to guess what they might be.\n &#39;In Norway, the kraken myth grew and such washed-up specimens were interpreted as messages from God or the Devil, sometimes called sea angels, sea devils or sea monks.&#39;\n  He adds, &#39;These things happened separately and people around the world came up with similar answers and mythologies - a case of convergent evolution in myth form.&#39;\n  Giant squid ( Architeuthis dux) were first classified by Western science in 1857 and scientists are still busy unpacking their mysteries.\n &#39;Naming and classifying a new animal is only the beginning,&#39; Jon says. &#39;We knew it was real and not a mythical beast from people&#39;s imaginations, but we&#39;re still really just getting to know them.&#39;\n Found in temperate waters all over the world, giant squid live between 200-1,400 metres below the surface. Females are thought grow up to 13 metres and the slightly smaller males reach 10 metres.\n Giant squid aren&#39;t fussy eaters - they hunt fish and crustaceans and also scavenge. Scientists have found some evidence of cannibalism, but there&#39;s no sign of ships on the menu.\n Their greatest adaptation are their huge eyes. Giant squids have the second-largest eyes of any creature on Earth, \u00a0used to help detect and avoid sperm whales, which are the only predator large enough to eat giant squids when they are fully grown.\n While some other species of smaller squid are aggressive pack hunters, the giant squid is thought to lead a solitary life in deep, temperate water, far from human contact.\n  According to Jon, &#39;They probably can&#39;t get big enough to take down a ship, but then it depends on the size of your vessel.&#39;\n &#39;Giant squid can&#39;t get the oxygen they need at the surface. So when people do come across a live one at the surface, it&#39;s because they are stressed and probably dying.&#39;\n &#39;We still don&#39;t know how they mate, how long they live for, how they grow. They&#39;re still highly mysterious beasts and it&#39;s exciting that scientists are still answering these questions.&#39;\n  A feature of seafaring folklore around the world, sirens and merfolk with humanoid torsos and serpentine tails have haunted the corners of maps and human imagination for millennia.\n  Oliver says, &#39;Anybody travelling in a wooden ship over the horizon in the eighteenth century was more out of touch with the rest of humanity than today\u2019s astronauts who at least have radio contact.&#39;\n &#39;These sailors would sometimes be travelling for years out of contact with people at home. There were big expectations about the fantastic things they might have seen on the other side of the world.&#39;\n Their stories were so popular that enterprising craftspeople in Japan established a thriving trade in cryptozoological specimens.\n  Although today we may recognise creative taxidermy or artfully dried sea animals for the hoaxes they were, mermaids were once prized features of private cabinets of curiosity and carnival sideshows.\n  Jenny Hanivers - which date back to the 1500s - are fantastical sea creatures manufactured from the dried bodies of skates or rays from the family Rhinobatidae , commonly known as guitar fishes. These fishes live on the seabed, and while the front end of their bodies makes them look like rays or skates, the rest of the body is more like a shark.\n  Despite the musical name (which refers to their distinctive body shape), guitar fish don&#39;t serenade sailors. The placid, bottom-dwelling animals eat invertebrates and can be found all over the world in shallow seas.\n According to Oliver, the closest resemblance to siren-like behaviour is seen in their relatives, the rays. He says, &#39;Some small species of ray have endeared themselves to humans with their habit of poking their snouts up out of the water, which can sometimes create a strange face-like apparition emerging from the water. They are often features of aquaria where some species will even let humans touch them.\n &#39;If you look at the underside of the body, which is normally resting on the seabed, you will see the jaws they use to crush and eat crustaceans and the breathing apertures where water is expelled. When they are dried and folded, a kind of grotesque face is revealed.&#39;\n  The animals also have a pointed snout or rostrum, which resembles an ecclesiastical hat, which is why they were sometimes also called sea bishops.\n  Sea serpents and sea dragons appear in stories from all over the world dating back to antiquity, and are usually depicted creating havoc for sailors.\n  &#39;Sea serpent myths go back into antiquity to a point in time we can&#39;t even discern,&#39; Oliver says. &#39;If we are looking for candidates from the natural world that generated these tales, then the oarfish is at the top of the list.&#39;\n  Oliver says, &#39;The oarfish really is a fantastic looking animal - up to eight metres long, with a horse-like face, flame-red crest on its head and fin all the way down its bright, metallic silver body. What else do you want from a sea monster?&#39;\n  The world&#39;s longest bony fish, the giant oarfish ( Regalecus glesne),  has been documented growing up to eight meters in length.\n It is found worldwide in temperate and tropical waters and is thought to live at depths between 200 and 1,000 metres. Like many of the largest creatures in the sea, oarfish eat plankton.\n  &#39;Unfortunately, when they come to the surface, it means they are in trouble and stranding themselves,&#39; Oliver explains.\n  Oarfish usually swim in a vertical or horizontal position, using left and right undulations of their bodies and dorsal fins to balance and move forward. It is only at the surface, where they are struggling to breathe that they swim on their sides.\n &#39;Swimming on their sides at the surface, these left to right undulations become vertical undulations that create an interesting spectacle and can even cause their bodies to coil up out of the water.&#39;\n  Although deep-sea-dwelling, plankton-eating oarfish have no interest in sinking ships or consuming sailors, they are considered by some to be reliable predicators of deep-sea earthquakes and tsunamis, stranding themselves in numbers before seismic events.\n  While the theory remains unproven, Oliver believes there are some interesting hypothetical links. &#39;It&#39;s a long, flat, ribbon-shaped animal and if you have that kind of body shape, maybe it&#39;s going to be particularly affected by pressure waves,&#39; he says. &#39;There&#39;s quite a lot of conjecture, but there may be something at the heart of it.\n &#39;The sea, especially the deep sea, is the least explored habitat on Earth. Images coming back from there all the time are showing us just how little we really know and how many surprises are still waiting for us in the deep ocean.&#39;", "posttime": "2021-08-09 01:48:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u4eba\u9c7c,monsters,\u52a8\u7269", "title": "\u6d77\u602a\u53ca\u5176\u7075\u611f\u6765\u6e90\uff1a\u86c7\u3001\u7f8e\u4eba\u9c7c\u3001\u6d77\u5996\u7b49", "title_en": "Sea monsters and their inspiration: serpents, mermaids, the kraken and more", "transed": 1, "url": "https://www.nhm.ac.uk/discover/sea-monsters-inspiration-serpents-mermaids-the-kraken.html", "via": "", "real_tags": ["\u7f8e\u4eba\u9c7c", "monsters", "\u52a8\u7269"]}, {"category": "", "categoryclass": "", "imagename": "9f7d2389e187cdabe6f0dab242ec177b.png", "infoid": 1072142, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 Grapl\uff0c\u6211\u4eec\u76f8\u4fe1\u4e3a\u4e86\u6784\u5efa\u6700\u597d\u7684\u9632\u5fa1\u7cfb\u7edf\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3\u653b\u51fb\u8005\u7684\u884c\u4e3a\u3002\u4f5c\u4e3a\u8be5\u76ee\u6807\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6b63\u5728\u6295\u8d44\u8fdb\u653b\u6027\u5b89\u5168\u7814\u7a76\u3002\u7ee7\u7eed\u5173\u6ce8\u6211\u4eec\u7684\u535a\u5ba2\uff0c\u4e86\u89e3\u6709\u5173\u9ad8\u98ce\u9669\u6f0f\u6d1e\u3001\u6f0f\u6d1e\u5229\u7528\u548c\u9ad8\u7ea7\u5a01\u80c1\u7b56\u7565\u7684\u65b0\u7814\u7a76\u3002\u5728\u6b64\u5904\u67e5\u627e\u5df2\u53d1\u5e03\u7684 CVE-2021-3490 \u7684\u672c\u5730\u63d0\u6743 (LPE) \u6982\u5ff5\u8bc1\u660e\uff1ahttps://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490\u3002\u5b83\u9488\u5bf9 Ubuntu 20.10 (Groovy Gorilla) \u5185\u6838 5.8.0-25.26 \u5230 5.8.0-52.58\u3002\u548c Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17\u3002\u8fd9\u7bc7\u535a\u6587\u65e8\u5728\u4ece\u6f0f\u6d1e\u5229\u7528\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u8be6\u7ec6\u6982\u8ff0 eBPF\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\uff1a\u6211\u5bf9 eBPF \u4e00\u65e0\u6240\u77e5\u3002\u6211\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u4e00\u4e2a PoC \u4ee5\u53ca\u6211\u7684\u5f00\u53d1\u7ecf\u9a8c\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u5f00\u59cb\u4f7f\u7528 eBPF\u3002 Berkeley Packet Filter (BPF) \u6700\u521d\u662f\u4f5c\u4e3a\u5728\u5185\u6838\u4e2d\u6267\u884c\u6570\u636e\u5305\u8fc7\u6ee4\u7684\u4e00\u79cd\u65b9\u5f0f\u800c\u521b\u5efa\u7684\u3002\u5b83\u7684\u529f\u80fd\u540e\u6765\u88ab\u91cd\u65b0\u8bbe\u8ba1\u548c\u6269\u5c55\uff0c\u4ee5\u521b\u5efa\u6269\u5c55\u7684\u4f2f\u514b\u5229\u6570\u636e\u5305\u8fc7\u6ee4\u5668 (eBPF) [1]\u3002\u7b80\u800c\u8a00\u4e4b\uff0ceBPF \u4e3a\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u65e0\u9700\u7f16\u5199\u5185\u6838\u6a21\u5757\u5373\u53ef\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u4f7f\u7528 eBPF \u4e0e\u5185\u6838\u6a21\u5757\u76f8\u6bd4\u7684\u6240\u8c13\u597d\u5904\u662f\u6613\u7528\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5b89\u5168\u6027\u3002\u4e0e\u7eaf\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u901a\u8fc7\u76f4\u63a5\u5728\u5185\u6838\u4e2d\u6267\u884c\u67d0\u4e9b\u4efb\u52a1\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u6539\u8fdb\u3002 eBPF \u7a0b\u5e8f\u7528\u4e8e\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8ddf\u8e2a\u3001\u68c0\u6d4b\u3001\u6302\u94a9\u7cfb\u7edf\u8c03\u7528\u3001\u8c03\u8bd5\uff0c\u5f53\u7136\u8fd8\u6709\u6570\u636e\u5305\u6355\u83b7/\u8fc7\u6ee4\u3002 eBPF \u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u5de5\u5177\u94fe\uff08\u4f8b\u5982 BCC [18]\uff09\u7f16\u8bd1\u6210 eBPF \u5b57\u8282\u7801\u3002 eBPF VM \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6307\u4ee4\u96c6\uff0c\u8be5\u6307\u4ee4\u96c6\u4f7f\u7528 11 \u4e2a* 64 \u4f4d\u5bc4\u5b58\u5668\u3001\u4e00\u4e2a\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u4e00\u4e2a 512 \u5b57\u8282\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6808\u3002\u4e5d\u4e2a\u5bc4\u5b58\u5668\u662f\u901a\u7528\u8bfb\u5199\uff0c\u4e00\u4e2a\u662f\u53ea\u8bfb\u5806\u6808\u6307\u9488\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u9690\u5f0f\u7684 [2] \u3002\u6307\u4ee4\u96c6\u4e0e x86 \u7c7b\u4f3c\uff0c\u53ef\u5bf9 64 \u4f4d\u548c 32 \u4f4d\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\n*\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u4f7f\u7528\u4e86 12 \u4e2a\u5bc4\u5b58\u5668\uff0c\u4f46\u7b2c 12 \u4e2a\u5bc4\u5b58\u5668\u662f\u4e00\u4e2a\u8f85\u52a9\u5bc4\u5b58\u5668\uff0c\u4ec5\u7528\u4e8e\u6267\u884c ALU \u536b\u751f\u64cd\u4f5c [12]\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 bpf() [14] \u7cfb\u7edf\u8c03\u7528\u5c06\u5b57\u8282\u7801\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\uff0c\u5176\u4e2d eBPF \u9a8c\u8bc1\u5668\u5c06\u6267\u884c\u8bb8\u591a\u68c0\u67e5\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u5728\u5185\u6838\u4e2d\u201c\u5b89\u5168\u201d\u8fd0\u884c\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5f88\u5173\u952e\u2014\u2014eBPF \u4e3a\u975e\u7279\u6743\u7528\u6237\u516c\u5f00\u4e86\u4e00\u6761\u5728 ring0 \u4e2d\u6267\u884c\u7684\u8def\u5f84\u3002\u52a0\u8f7d\u7a0b\u5e8f\u540e\uff0c\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u5c06\u7a0b\u5e8f\u9644\u52a0\u5230\u201c\u6302\u94a9\u70b9\u201d\u3002\u6302\u94a9\u70b9\u662f\u5185\u6838\u4e2d\u53ef\u4ee5\u9644\u52a0 eBPF \u7a0b\u5e8f\u7684\u5730\u65b9 [5]\u3002 eBPF \u7a0b\u5e8f\u662f\u4e8b\u4ef6\u9a71\u52a8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5c06\u5728\u6302\u94a9\u70b9\u53d1\u751f\u67d0\u4e9b\u4e8b\u4ef6\u65f6\u6267\u884c\u3002\u7ecf\u5178\u7528\u4f8b\u662f\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u5957\u63a5\u5b57\uff0c\u5f53\u6570\u636e\u5199\u5165\u65f6\u7a0b\u5e8f\u5c06\u5728\u5957\u63a5\u5b57\u4e2d\u6267\u884c\u3002\u5982\u679c\u8bbe\u7f6e\u4e86 kconfig \u65cb\u94ae CONFIG_BPF_JIT\uff0c\u5219 eBPF \u7a0b\u5e8f\u5728\u9a8c\u8bc1\u548c\u52a0\u8f7d\u540e\u4f1a\u88ab JIT \u7f16\u8bd1\u4e3a\u539f\u751f\u6c47\u7f16\u6307\u4ee4\u3002\u5426\u5219\uff0c\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u5728 eBPF \u89e3\u91ca\u5668\u4e2d\u8fd0\u884c\uff0c\u8be5\u89e3\u91ca\u5668\u89e3\u7801\u5e76\u6267\u884c eBPF \u5b57\u8282\u7801\u6307\u4ee4\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u548c eBPF \u8f85\u52a9\u51fd\u6570\u4e0e\u5185\u6838\u4e2d\u8fd0\u884c\u7684 eBPF \u7a0b\u5e8f\u4ea4\u4e92\u5e76\u4ece\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u8fd9\u4e9b\u51fd\u6570\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u8bbf\u95ee\u3002 sysctl \u65cb\u94ae kernel.unprivileged_bpf_disabled \u51b3\u5b9a\u662f\u5426\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u8fd0\u884c eBPF \u7a0b\u5e8f\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u7528\u6237\u62e5\u6709\u7684\u5957\u63a5\u5b57\u3002\u5728\u8bb8\u591a Linux \u53d1\u884c\u7248\u4e2d\uff0c\u4f8b\u5982 Ubuntu\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528 unprivileged_bpf_disabled\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u66f4\u4ed4\u7ec6\u5730\u7814\u7a76 eBPF\uff0c\u56e0\u4e3a\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u662f\u4e00\u4e2a\u6210\u719f\u7684\u653b\u51fb\u9762\u3002\u6211\u5728\u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u4e0e\u5185\u6838\u4e2d\u7684 eBPF \u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2a eBPF \u7a0b\u5e8f\u7528\u6765\u76f8\u4e92\u4ea4\u4e92\u3002\u5b83\u4eec\u662f\u5177\u6709\u4efb\u610f\u6570\u636e\u7ed3\u6784\u7684\u901a\u7528\u952e/\u503c\u5b58\u50a8 [6]\u3002\u6709\u591a\u79cd\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5305\u62ec\uff1a\u6570\u7ec4\u3001\u961f\u5217\u548c\u5806\u6808\u3002\nkey_size - \u7528\u4e8e\u7d22\u5f15\u5143\u7d20\u7684\u952e\u7684\u5b57\u8282\u5927\u5c0f\uff08\u7528\u4e8e\u6570\u7ec4\u6620\u5c04\uff09 map_flags - \u63cf\u8ff0\u6620\u5c04\u7684\u7279\u6b8a\u7279\u6027\uff0c\u4f8b\u5982\u662f\u5426\u5e94\u8be5\u9884\u5148\u5206\u914d\u6574\u4e2a\u6620\u5c04\u5185\u5b58\u3002\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u547d\u4ee4\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u4ece\u7528\u6237\u7a7a\u95f4\u521b\u5efa\u548c\u66f4\u6539 eBPF \u6620\u5c04\uff0c\u4f7f\u7528 BPF_MAP_UPDATE_ELEM \u547d\u4ee4\u66f4\u65b0\uff0c\u5e76\u4f7f\u7528 BPF_MAP_LOOKUP_ELEM \u547d\u4ee4\u68c0\u7d22\u5176\u5185\u5bb9\u3002 eBPF \u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e76\u8c03\u7528 eBPF \u8f85\u52a9\u51fd\u6570\u6765\u8bbf\u95ee eBPF \u6620\u5c04\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u6307\u5411\u6620\u5c04\u4e2d\u503c\u7684\u6307\u9488\u3002\u6211\u7f16\u5199\u7684\u6f0f\u6d1e\u5229\u7528\u4e86 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5728\u6df1\u5165\u7814\u7a76\u6f0f\u6d1e\u4e4b\u524d\uff0c\u91cd\u8981\u7684\u662f\u7b80\u8981\u89e3\u91ca\u9a8c\u8bc1\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002\u9a8c\u8bc1\u5668\u9996\u5148\u6784\u5efa\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u56fe\u3002\u7136\u540e\uff0c\u5b83\u5c06\u901a\u8fc7\u6bcf\u4e2a\u53ef\u80fd\u7684\u63a7\u5236\u6d41\u6765\u9a8c\u8bc1\u6bcf\u6761\u6307\u4ee4\u662f\u5426\u6709\u6548\u4ee5\u53ca\u6240\u6709\u5185\u5b58\u8bbf\u95ee\u90fd\u662f\u5b89\u5168\u7684 [3]\u3002\u4e4b\u540e\uff0c\u5b83\u5c06\u5411\u7a0b\u5e8f\u6dfb\u52a0\u8fd0\u884c\u65f6\u68c0\u67e5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a ALU Sanitation\uff0c\u5c06\u8865\u4e01\u63d2\u5165 eBPF \u5b57\u8282\u7801\uff0c\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u6307\u9488\u8fd0\u7b97\u65f6\u4e0d\u4f1a\u8fdd\u53cd\u8fd0\u884c\u65f6\u5141\u8bb8\u7684\u5185\u5b58\u8303\u56f4 [4]\u3002\u4e0d\u80fd\u6267\u884c\u6307\u9488\u6bd4\u8f83\uff0c\u53ea\u80fd\u5411\u6307\u9488\u6dfb\u52a0\u6216\u51cf\u53bb\u6807\u91cf\u503c\u3002 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u6807\u91cf\u503c\u662f\u4efb\u4f55\u4e0d\u662f\u4ece\u6307\u9488\u6d3e\u751f\u7684\u503c\u3002\u9a8c\u8bc1\u5668\u8ddf\u8e2a\u54ea\u4e9b\u5bc4\u5b58\u5668\u5305\u542b\u6307\u9488\uff0c\u54ea\u4e9b\u5305\u542b\u6807\u91cf\u503c\u3002\u6307\u9488\u8fd0\u7b97\u4e0d\u80fd\u79bb\u5f00\u5730\u56fe\u7684\u201c\u5b89\u5168\u201d\u8fb9\u754c\u3002\u610f\u601d\u662f\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u9884\u5b9a\u4e49\u5730\u56fe\u5185\u5b58\u4e4b\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4e3a\u6b64\uff0c\u9a8c\u8bc1\u5668\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e0a\u9650\u548c\u4e0b\u9650\u3002\n\u6307\u9488\u4e0d\u80fd\u5b58\u50a8\u5728\u6620\u5c04\u4e2d\u6216\u5b58\u50a8\u4e3a\u8fd4\u56de\u503c\uff0c\u4ee5\u907f\u514d\u5185\u6838\u5730\u5740\u6cc4\u6f0f\u5230\u7528\u6237\u7a7a\u95f4\u3002\u9a8c\u8bc1\u5668\u4e3a\u6bcf\u4e2a\u53ef\u80fd\u7684\u6267\u884c\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8\u4ee5\u4e0b\u8fb9\u754c\u503c\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u8d8a\u754c\u5185\u5b58\u8bbf\u95ee\uff1a umin_value \uff0c umax_value \u5b58\u50a8\u88ab\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\u65f6\u7684\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c (64 bit) \u6574\u6570 smin_value \uff0c smax_value \u5728\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0864 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 u32_min_value , u32min_value \u5728\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 s32_min_value , s32_max_value \u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\uff0c\u5f53\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u3002 var_off \u5305\u542b\u6709\u5173\u5df2\u77e5\u5bc4\u5b58\u5668\u4f4d\u7684\u4fe1\u606f\u3002\u5b83\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3a tnum \u7684\u7ed3\u6784\u4e2d\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u4e24\u4e2a 64 \u4f4d\u5b57\u6bb5\uff1a mask \u548c value \u3002\u5728\u63a9\u7801\u4e2d\u8bbe\u7f6e\u7684\u6bcf\u4e00\u4f4d\u90fd\u610f\u5473\u7740\u8be5\u4f4d\u7684\u503c\u662f\u672a\u77e5\u7684\u3002\u672a\u8bbe\u7f6e\u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u5b83\u4eec\u7684\u771f\u5b9e\u503c\u5b58\u50a8\u5728 value \u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c var_off = {mask = 0x0; value = 0x1} \uff0c\u5bc4\u5b58\u5668\u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u5e76\u4e14\u5df2\u77e5\u5bc4\u5b58\u5668\u7684\u503c\u4e3a1\u3002\u5982\u679cvar_off = {mask = 0xFFFFFFFF00000000; value = 0x3} \u8868\u793a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\u4e3a 0x00000003\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\n\u8fd9\u4e9b\u8fb9\u754c\u7528\u4e8e\u76f8\u4e92\u66f4\u65b0\u3002\u7279\u522b\u662f\uff0c\u5982\u679c var_off \u6307\u793a\u5bc4\u5b58\u5668\u662f\u5df2\u77e5\u5e38\u6570\uff0c\u5219\u66f4\u65b0\u6700\u5c0f/\u6700\u5927\u754c\u9650\u4ee5\u53cd\u6620\u5df2\u77e5\u503c\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981\uff01 ALU Sanitation \u662f\u4e00\u9879\u529f\u80fd\uff0c\u7528\u4e8e\u8865\u5145\u9a8c\u8bc1\u5668\u7684\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u3002\u5982\u679c\u5bc4\u5b58\u5668\u7684\u503c\u5728\u8fd0\u884c\u65f6\u672a\u843d\u5728\u5176\u9884\u671f\u8303\u56f4\u5185\uff0c\u5219\u8be5\u60f3\u6cd5\u662f\u4e3a\u4e86\u9632\u6b62 OOB \u5185\u5b58\u8bbf\u95ee\u3002\u6dfb\u52a0\u6b64\u529f\u80fd\u662f\u4e3a\u4e86\u5e2e\u52a9\u51cf\u8f7b\u9a8c\u8bc1\u5668\u4e2d\u7684\u6f5c\u5728\u6f0f\u6d1e\u5e76\u9632\u6b62\u6295\u673a\u653b\u51fb\u3002\u5bf9\u4e8e\u6d89\u53ca\u6307\u9488\u548c\u6807\u91cf\u5bc4\u5b58\u5668\u7684\u6bcf\u4e2a\u7b97\u672f\u8fd0\u7b97\uff0c\u90fd\u4f1a\u8ba1\u7b97 alu_limit\u3002\u8fd9\u8868\u793a\u53ef\u4ee5\u6dfb\u52a0\u5230\u6307\u9488\u6216\u4ece\u6307\u9488\u4e2d\u51cf\u53bb\u7684\u6700\u5927\u7edd\u5bf9\u503c [4]\u3002\u5728\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e4b\u524d\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4fee\u8865\u5b57\u8282\u7801\uff1a *patch ++ = BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) \uff1b *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_SUB , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_NEG, BPF_REG_AX, 0); *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_ARSH, BPF_REG_AX, 63); *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_AND , BPF_REG_AX , off_reg ) ;\u6ce8\u610foff_reg \u4ee3\u8868\u88ab\u6dfb\u52a0\u5230\u6307\u9488\u5bc4\u5b58\u5668\u7684\u6807\u91cf\u5bc4\u5b58\u5668\uff0cBPF_REG_AUX \u4ee3\u8868\u8f85\u52a9\u5bc4\u5b58\u5668\u3002\u8fd0\u884c\u65f6 off_reg \u7684\u503c\u4ece alu_limit \u4e2d\u51cf\u53bb\u5e76\u5b58\u50a8\u5230 BPF_REG_AX \u4e2d\u3002\u5982\u679c off_reg &gt; alu_limit \uff0c\u5219\u8bbe\u7f6e BPF_REG_AX \u7684\u6700\u9ad8\u4f4d\uff08\u7b26\u53f7\u4f4d\uff09\u3002\u5982\u679c BPF_REG_AUX \u4e2d\u5b58\u50a8\u7684\u5dee\u503c\u4e3a\u6b63\uff0coff_reg \u4e3a\u8d1f\uff0c\u8868\u793a alu_limit \u548c\u5bc4\u5b58\u5668\u7684\u503c\u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 BPF_OR \u64cd\u4f5c\u5c06\u8bbe\u7f6e\u7b26\u53f7\u4f4d\u3002\nBPF_NEG \u64cd\u4f5c\u5c06\u5426\u5b9a\u7b26\u53f7\u4f4d\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u7b26\u53f7\u4f4d\uff0c\u5219\u4e3a 0\uff0c\u5426\u5219\u4e3a 1\u3002 BPF_ARSH \u64cd\u4f5c\u8fdb\u884c 63 \u4f4d\u7b97\u672f\u53f3\u79fb\u3002\u8fd9\u5c06\u7528\u5168 0 \u6216 1\uff08\u7b26\u53f7\u4f4d\u7684\u503c\uff09\u586b\u5145 BPF_REG_AX\u3002\u6839\u636e\u4e0a\u8ff0\u64cd\u4f5c\u7684\u7ed3\u679c\uff0cBPF_AND \u64cd\u4f5c\u8981\u4e48\u5c06 off_reg \u7f6e\u7a7a\uff0c\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c off_reg \u8d85\u8fc7 alu_limit \uff0c\u6216\u8005\u5982\u679c off_reg \u548c alu_limit \u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 off_reg \u7684\u503c\u5c06\u88ab\u66ff\u6362\u4e3a 0\uff0c\u4ece\u800c\u4f7f\u6307\u9488\u7b97\u672f\u8fd0\u7b97\u5f52\u96f6\u3002\u6700\u8fd1\u66f4\u65b0\u4e86 alu_limit \u7684\u8ba1\u7b97\u65b9\u5f0f [15]\u3002\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u5c1a\u672a\u91c7\u7528\u65b0\u7684\u5b9e\u73b0\u3002\u4e3a\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5c06\u6db5\u76d6\u4e24\u8005\uff0c\u5e76\u5728\u4e0b\u4e00\u8282\u4e2d\u91cd\u65b0\u8ba8\u8bba\u4e3a\u4ec0\u4e48\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d8\u5f97\u76f8\u5173\u3002 alu_limit \u7531\u6307\u9488\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u610f\u601d\u662f\uff0c\u5982\u679c\u6307\u9488\u5bc4\u5b58\u5668\u6307\u5411\u6620\u5c04\u7684\u5f00\u5934\uff0c\u5219\u51cf\u6cd5\u7684 alu_limit \u4e3a 0\uff0c\u52a0\u6cd5\u7684 alu_limit \u7b49\u4e8e\u6620\u5c04\u7684\u5927\u5c0f\uff08\u51cf 1\uff09\u3002 alu_limit \u968f\u6307\u9488\u5bc4\u5b58\u5668\u4e0a\u7684\u540e\u7eed\u64cd\u4f5c\u66f4\u65b0\u3002 alu_limit \u7531\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u662f\u5426\u5c06\u8fd0\u884c\u65f6\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u503c\u4e0e\u9a8c\u8bc1\u5668\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u671f\u95f4\u8ba1\u7b97\u7684\u5bc4\u5b58\u5668\u8fb9\u754c\u8fdb\u884c\u6bd4\u8f83\u3002\n\u6211\u5bf9 eBPF \u9a8c\u8bc1\u5668\u7684\u521d\u6b65\u4e86\u89e3\u6765\u81ea Manfred Paul \u8fd9\u7bc7\u51fa\u8272\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4ed6\u5bf9 CVE-2020-8835 \u7684\u5229\u7528\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u68c0\u67e5\u4e00\u4e0b\uff01\u56de\u60f3\u4e00\u4e0b\uff0ceBPF \u6307\u4ee4\u96c6\u53ef\u4ee5\u5bf9\u6574\u4e2a 64 \u4f4d\u5bc4\u5b58\u5668\u6216\u4ec5\u4f4e 32 \u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u9a8c\u8bc1\u5668\u8303\u56f4\u8ddf\u8e2a\u5305\u542b\u5bc4\u5b58\u5668\u4f4e 32 \u4f4d\u7684\u5355\u72ec\u8fb9\u754c\uff1a {u,s}32_{min,max}_value \u3002\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u8fb9\u754c\u3002\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u6709\u4e24\u4e2a\u8ddf\u8e2a\u529f\u80fd\uff0c\u4e00\u4e2a 64 \u4f4d\u548c\u4e00\u4e2a 32 \u4f4d\u8ba1\u6570\u5668\u90e8\u5206\u3002\u4e24\u8005\u90fd\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\u8c03\u7528 64 \u4f4d\u64cd\u4f5c\u3002 * /* \u8b66\u544a\uff1a\u6b64\u51fd\u6570\u5bf9 64 \u4f4d\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46 * \u5b9e\u9645\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5728 32 \u4f4d\u503c\u4e0a\u3002\u56e0\u6b64\uff0c*\u50cf\u4f4d\u79fb\u8fd9\u6837\u7684\u4e1c\u897f\u5728 32 \u4f4d\u60c5\u51b5\u4e0b\u9700\u8981\u989d\u5916\u68c0\u67e5\u3002*/ static int adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ... case BdPFst_AND - &gt;var_off = tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_and (dst_reg , &amp;src_reg ) ; scalar_min_max_and (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_OR : dst_reg - &gt;var_off = tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_or (dst_reg , &amp;src_reg ) ; scalar_min_max_or (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_XOR : dst_reg - &gt;var_off = tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_xor (dst_reg , &amp;src_reg ) ; scalar_min_max_xor (dst_reg , &amp;src_reg ) ;\u4f11\u606f ; ... } \u6f0f\u6d1e CVE-2021-3490 \u4f4d\u4e8e BPF_AND \u3001 BPF_OR \u548c BPF_XOR \u64cd\u4f5c\u7684 32 \u4f4d\u8ddf\u8e2a\u51fd\u6570\u4e2d\u3002\u6bcf\u4e2a\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b BPF_AND \u7684\u8fdd\u89c4\u4ee3\u7801\u7684\u6458\u5f55\uff1a static void scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_subreg_is_const (src_reg - &gt;var_off) bool dst_known = tnum_subreg_is_const (dst_reg - &gt;var_off); struct tnum var32_off = tnum_subreg (dst_reg - &gt;var_off) ; s32 smin_val = src_reg-&gt;s32_min_value; u32 umax_val = src_reg - &gt;u32_max_value \uff1b /* \u5047\u8bbe scalar64_min_max_and \u5c06\u88ab\u8c03\u7528\uff0c\u6240\u4ee5\u5b83\u5b89\u5168 * \u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002 */ \u5982\u679c (src_known &amp;&amp; dst_known ) \u8fd4\u56de\uff1b ... }\n\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6240\u793a\uff0c\u5982\u679c\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u8df3\u8fc7\u66f4\u65b0 32 \u4f4d\u8fb9\u754c\u3002\u8fd4\u56de\u4e0a\u9762\u7684\u6ce8\u91ca\u6307\u51fa\u8fd9\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a 64 \u4f4d\u5bf9\u5e94\u7269\u4f1a\u5904\u7406\u5b83\u3002\u6211\u4eec\u6765\u770b\u770b\uff1a static void scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known = tnum_is_const (dst_reg - &gt;var_off) ; s64 smin_val = src_reg-&gt;smin_value; u64 umin_val = src_reg - &gt;umin_value \uff1b if (src_known &amp;&amp; dst_known ) { __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;\u8fd4\u56de ; } ... } \u7684\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u679csrc_known \u548cdst_known \u4e3a\u771f\uff0c\u51fd\u6570__mark_reg_known \u4f1a\u88ab\u8c03\u7528\u3002\u4f60\u80fd\u53d1\u73b0\u95ee\u9898\u5417\uff1f\u5728 scalar32_min_max_and \u4e2d\uff0c _known \u53d8\u91cf\u662f\u4f7f\u7528 tnum_subreg_is_const \u8ba1\u7b97\u7684\u3002 64 \u4f4d\u5bf9\u5e94 scalar_min_max_and \u4f7f\u7528 tnum_is_const \u3002\u533a\u522b\u5728\u4e8e\uff0c\u5982\u679c\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u524d\u8005\u8fd4\u56de\u771f\uff0c\u800c\u540e\u8005\u4ec5\u5728\u6574\u4e2a 64 \u4f4d\u90fd\u662f\u5e38\u91cf\u65f6\u624d\u8fd4\u56de\u771f\u3002\u5982\u679c\u64cd\u4f5c\u6d89\u53ca\u4f4e 32 \u4f4d\u5df2\u77e5\u4f46\u9ad8 32 \u4f4d\u672a\u77e5\u7684\u5bc4\u5b58\u5668\uff0c\u5219\u8fdd\u53cd\u6ce8\u91ca\u4e2d\u6240\u8ff0\u7684\u5047\u8bbe\u3002\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\uff0c\u5728\u8fd4\u56de\u4e4b\u524d\uff0c\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4e09\u4e2a\u51fd\u6570\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\uff1a\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709 32 \u4f4d\u548c 64 \u4f4d\u5bf9\u5e94\u9879\u3002\u6211\u5c06\u53ea\u4ecb\u7ecd 32 \u4f4d\u60c5\u51b5\uff0c\u56e0\u4e3a\u90a3\u662f\u9519\u8bef\u5f71\u54cd\u7684\u5185\u5bb9\u3002\nstatic void __update_reg32_bounds (struct bpf_reg_state *reg) { struct tnum var32_off = tnum_subreg (reg-&gt;var_off); /* \u6700\u5c0f\u6709\u7b26\u53f7\u662f\u6700\u5927\uff08\u7b26\u53f7\u4f4d\uff09 | min(other bits) */ reg - &gt;s32_min_value = max_t (s32 , reg - &gt;s32_min_value , var32_off .value | (var32_off .mask &amp; S32_MIN ) ) ; /* \u6700\u5927\u6709\u7b26\u53f7\u662f\u6700\u5c0f\uff08\u7b26\u53f7\u4f4d\uff09 | max(other bits) */ reg - &gt;s32_max_value = min_t (s32 , reg - &gt;s32_max_value , var32_off .value | (var32_off .mask &amp; S32_MAX ) ) ; reg - &gt;u32_min_value = max_t (u32 , reg - &gt;u32_min_value , (u32 )var32_off .value ) ; reg - &gt;u32_max_value = min (reg - &gt;u32_max_value , (u32 ) (var32_off .value | var32_off .mask ) ) ;\u8bf7\u6ce8\u610f\uff0c\u6700\u5c0f\u503c\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5c0f\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5927\u8005\u4e3a\u51c6\u3002\u7c7b\u4f3c\u5730\uff0c\u6700\u5927\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5927\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5c0f\u8005\u4e3a\u51c6\u3002\u7136\u540e\uff0c\u5728 __reg32_deduce_bounds \u4e2d\u4f7f\u7528\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fb9\u754c\u76f8\u4e92\u66f4\u65b0\u3002 /* \u4f7f\u7528\u6709\u7b26\u53f7\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u6765\u901a\u77e5\u65e0\u7b26\u53f7\uff0c\u53cd\u4e4b\u4ea6\u7136 */ static void __reg32_deduce_bounds ( struct bpf_reg_state *reg ) { /* \u4ece\u6709\u7b26\u53f7\u7684\u8fb9\u754c\u4e2d\u5b66\u4e60\u7b26\u53f7\u3002 * \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u8de8\u8d8a\u7b26\u53f7\u8fb9\u754c\uff0c\u90a3\u4e48\u6709\u7b26\u53f7\u8fb9\u754c\u548c * \u65e0\u7b26\u53f7\u8fb9\u754c * \u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u751a\u81f3\u5728 * \u5426\u5b9a\u60c5\u51b5\u4e0b\u4e5f\u6709\u6548\uff0c\u4f8b\u5982 * -3 s&lt;= x s&lt;= -1 \u610f\u5473\u7740 0xf...fd u&lt;= x u&lt;= 0xf...ff\u3002 */ if (reg - &gt;s32_min_value &gt;= 0 || reg - &gt;s32_max_value &lt; 0 ) { reg - &gt;s32_min_value = reg - &gt;u32_min_value = max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value = reg - &gt;u32_max_value = min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;\u8fd4\u56de ; } ... } static void __reg_bound_offset (struct bpf_reg_state *reg) { struct tnum var64_off = tnum_intersect (reg - &gt;var_off , tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off = tnum_intersect (tnum_subreg (reg -&gt;var_off), tnum_range (reg -&gt;u32_min_value, reg -&gt;u32_max_value)); reg - &gt;var_off = tnum_or (tnum_clear_subreg (var64_off), var32_off); tnum_intersect \u63a5\u53d7\u4e24\u4e2a tnum \u5e76\u5c06\u4e24\u8005\u4f20\u8fbe\u7684\u77e5\u8bc6\u7ec4\u5408\u6210\u4e00\u4e2a tnum \u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u6f0f\u6d1e\u3002\n\u5047\u8bbe\u6211\u4eec\u6709\u6307\u4ee4 BPF_ALU64_REG(BPF_AND, R2, R3)\u3002\u8be5\u6307\u4ee4\u5bf9\u5bc4\u5b58\u5668 R2 \u548c R3 \u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 R2 \u4e2d\u3002 R2 \u6709 var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}\uff0c\u8868\u793a\u5df2\u77e5\u4f4e 32 \u4f4d\u503c\u4e3a 1\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\u56e0\u4e3a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u6240\u4ee5\u5b83\u7684 32 \u4f4d\u8fb9\u754c\u7b49\u4e8e\u8be5\u503c\u3002 R3 \u6709 var_off = {mask = 0x0; value = 0x100000002}\uff0c\u610f\u5473\u7740\u6574\u4e2a 64 \u4f4d\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u7b49\u4e8e 0x100000002\u3002\u5982 adjust_scalar_min_max_vals \u7247\u6bb5\u7684\u7b2c 12 \u884c\u6240\u793a\uff0c\u51fd\u6570 tnum_and \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u76ee\u6807\u5bc4\u5b58\u5668 R2 \u7684 var_off \u4e2d\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002 R3 \u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff1a\u9ad8 31 \u4f4d\u662f 0\uff0c\u7b2c 32 \u4f4d\u662f 1\u3002\u8fd9\u610f\u5473\u7740 R2 \u5269\u4e0b var_off = {mask = 0x100000000;\u503c = 0x0}\u3002\u8fd9\u662f\u56e0\u4e3a 2 &amp; 1 = 0\uff08\u5bf9\u4e8e\u4f4e 32 \u4f4d\uff09\uff0c\u5e76\u4e14\u9664\u4e86\u7b2c 32 \u4f4d\u4e4b\u5916\u7684\u6240\u6709\u4f4d\u90fd\u5c06\u88ab\u79f0\u4e3a 0\uff0c\u56e0\u4e3a R3 \u5728\u7b2c 32 \u4f4d\u4e2d\u6709\u4e00\u4e2a 1\u3002\u5728\u4e0b\u4e00\u884c\uff0c\u8c03\u7528 scalar32_min_max_and\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u4e14\u4e0d\u4f1a\u6539\u53d8\u8fb9\u754c\uff0c\u56e0\u4e3a\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002\u7136\u540e __update_reg32_bounds \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u8bbe\u7f6e u32_max_value = 0 \uff0c\u56e0\u4e3a var_off.value = 0 &lt; u32_max_value = 1 \u7684\u503c\u3002\u540c\u6837\uff0c\u5b83\u4f1a\u8bbe\u7f6e u32_min_value = 1 \u56e0\u4e3a var_off.value = 0 &lt; u32_min_value \u3002\u7b7e\u540d\u8fb9\u754c\u4e5f\u662f\u5982\u6b64\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7559\u4e0b\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 \uff01\n@@ - 7084 , 11 + 7084 , 10 @@ static void scalar32_min_max_and (struct bpf_reg_state *dst_reg , s32 smin_val = src_reg - &gt; s32_min_value ; u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u /* 3 src_max - u /* 3 2_reg_\u548c * 4 _ \u548c * 4 \u5c06\u5b89\u5168\u79f0\u4e3a\u5b89\u5168\u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002- */ - if (src_known &amp;&amp; dst_known ) + if (src_known &amp;&amp; dst_known ) { + __mark_reg32_known (dst_reg , var32_off .value ) ; return ; + } \u4e0a\u9762\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6e90\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u5728\u8fd4\u56de\u4e4b\u524d\u5728\u76ee\u6807\u5bc4\u5b58\u5668\u4e0a\u8c03\u7528 __mark_reg32_known\u3002 /* \u5c06\u5bc4\u5b58\u5668\u7684\u672a\u77e5\u90e8\u5206\uff08\u53d8\u91cf\u504f\u79fb\u91cf\u6216\u6807\u91cf * \u503c\uff09\u6807\u8bb0\u4e3a\u5df2\u77e5\u503c @imm\u3002 */ static void __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off = tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value = (s32 )imm ; reg - &gt; value.imm ; reg - &gt;s32_s3_s3_s32 .....", "note_en": "At  Grapl we believe that in order to build the best defensive system we need to deeply understand attacker behaviors. As part of that goal we&#39;re investing in offensive security research.  Keep up with our blog for new research on high risk vulnerabilities, exploitation, and advanced threat tactics.\n    Find the released local privilege escalation (LPE) Proof-of-Concept for  CVE-2021-3490 here:  https://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490. It targets Ubuntu 20.10 (Groovy Gorilla) kernels 5.8.0-25.26 through 5.8.0-52.58. and Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17.\n    This blog post is intended to give a detailed overview of eBPF from the perspective of an exploit developer. In this post, I cover:\n     I had no knowledge of eBPF going into this. My hope is that by sharing a PoC as well as my experience developing it, it can help others get started with eBPF exploitation.\n                  Berkeley Packet Filter (BPF) was initially created as a way to perform packet filtering in the kernel. Its capabilities were later redesigned and extended to create extended Berkeley Packet Filter (eBPF)  [1].\n    Put simply, eBPF provides a way for a user mode application to run code in the kernel without needing to write a kernel module.The purported benefits of using eBPF versus a kernel module are ease of use, stability, and security. There are also performance improvements gained by doing certain tasks directly in the kernel compared to a pure user mode program. eBPF programs are used to do a myriad of things such as: tracing, instrumentation, hooking system calls, debugging, and of course, packet capturing/filtering.\n    eBPF programs are written in a high level language and compiled into eBPF bytecode using a toolchain (such as  BCC   [18]). The eBPF VM uses a simple instruction set that uses eleven* 64-bit registers, a program counter, and a 512 byte fixed-size stack. Nine registers are general purpose read-write, one is a read-only stack pointer and the program counter is implicit  [2] . The instruction set is similar to x86, and operates on both 64 and 32 bit values.\n          *Technically, it uses   12 registers,  but the 12th register is an auxiliary register only used to perform ALU sanitation operations   [12].\n  A user mode application loads the bytecode into the kernel using the   bpf()    [14] syscall, where the eBPF verifier will perform a number of checks to ensure the program is \u201csafe\u201d to run in the kernel. This verification step is critical - eBPF exposes a path for unprivileged users to execute in ring0.\n    After the program is loaded, the user mode application attaches the program to a \u201chook point\u201d. A hook point is a place in the kernel where eBPF programs can be attached  [5]. eBPF programs are event driven, meaning the program will execute when certain events occur at the hook point. The classic use case is attaching an eBPF program to a socket, where the program will execute when data is written to it.\n    If the   kconfig knob   CONFIG_BPF_JIT is set, the eBPF program is JIT compiled into native assembly instructions after it is verified and loaded. Otherwise, when the program is executed it is run in the eBPF interpreter which decodes and executes the eBPF bytecode instructions.\n  User mode applications can interact with and get data from the eBPF program running in the kernel using eBPF maps and eBPF helper functions, which are accessed via the    bpf()  syscall.\n      The     sysctl   knob    kernel.unprivileged_bpf_disabled  determines whether unprivileged users are allowed to run eBPF programs. If it is not set, unprivileged users are allowed to attach an eBPF program to a socket that the user owns. In many Linux distributions, such as Ubuntu,    unprivileged_bpf_disabled  is not enabled by default. Because of this, I decided to look into eBPF more closely, as allowing unprivileged users to run code in the kernel is a ripe attack surface.\n    I mentioned above that user mode processes can interact with a eBPF program in the kernel using eBPF maps. They can also be used by multiple eBPF programs to interact with each other. They are a generic key/value store with an arbitrary data structure  [6]. There are various types of maps including: arrays, queues, and stacks.\n      key_size  - the size in bytes of the key used to index an element (used in array maps)\n   map_flags  - describes special characteristics of the map, such as if the entire map memory should be preallocated or not.\n eBPF maps can be created and altered from user space via the    bpf()  syscall using the    BPF_MAP_CREATE  command, updated using the    BPF_MAP_UPDATE_ELEM  command, and retrieve its contents using the    BPF_MAP_LOOKUP_ELEM  command. eBPF maps can accessed by eBPF programs using the file descriptor returned by    BPF_MAP_CREATE  and calling eBPF helper functions, which will return pointers to values within the map.\n      The exploit I wrote leverages a bug in the eBPF verifier. So before I delve into the vulnerability it is important to briefly explain the internals of the verifier.\n    The verifier starts by building a control flow graph of the program. Then, it will verify each instruction is valid and all memory accesses are safe through each possible flow of control  [3]. Afterwards, it will add in runtime checks to the program. This process, called  ALU Sanitation, inserts patches to the eBPF bytecode to ensure permitted memory ranges are not violated during runtime when performing pointer arithmetic  [4].\n      No pointer comparisons can be performed, and only scalar values can be added or subtracted to a pointer. A scalar value in the eBPF verifier is any value that is not derived from a pointer. The verifier keeps track of which registers contain pointers and which contain scalar values.\n Pointer arithmetic can not leave the \u201csafe\u201d bounds of a map. Meaning, the program can not access anything outside the predefined map memory. To do so, verifier keeps track of the upper and lower bounds of the values for each register.\n No pointers can be stored in maps or stored as a return value, in order to avoid leaking kernel addresses to user space.\n     The verifier stores the following bound values, for every register in each possible path of execution, to ensure there are no out-of-bound memory accesses:\n  umin_value ,    umax_value  store the min/max value of the register when interpreted as an unsigned (64 bit) integer\n smin_value ,   smax_value  store the min/max value of the register when interpreted as a signed (64 bit) integer.\n u32_min_value ,   u32min_value  store the min/max value of the register when interpreted as an unsigned (32 bit) integer.\n s32_min_value ,   s32_max_value  store the min/max value of the register when interpreted as a signed (32 bit) integer.\n var_off  contains information about the bits of the the register that are known. It is stored in a structure called    tnum  which contains two 64 bit fields:    mask  and    value . Every bit that is set in    mask  means the value of that bit is  unknown. The unset bits are known, and their true value are stored in    value . For example, if    var_off = {mask = 0x0; value = 0x1} , all bits of the register are known, and the register is known to have a value of 1. If    var_off = {mask = 0xFFFFFFFF00000000; value = 0x3}  it means that the lower 32 bits of the register are known to be 0x00000003 and the upper 32 bits are unknown.\n These bounds are used to update each other. In particular, if    var_off  indicates the register is a known constant, the min/max bounds are updated to reflect the known value. We will see why this is important later!\n      ALU Sanitation is a feature that was introduced to supplement the static range tracking of the verifier. The idea is to prevent OOB memory accesses if the value of registers do not fall within their expected range during runtime. This was added to help mitigate potential vulnerabilities in the verifier and protect against speculative attacks.\n  For every arithmetic operation that involves a pointer and a scalar register, an    alu_limit  is calculated. This represents the maximum absolute value that can be added to or subtracted from the pointer  [4]. Before each of these operations, the bytecode is patched with the following instructions:\n  *patch ++  =  BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) ; *patch ++  =  BPF_ALU64_REG ( BPF_SUB ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_REG ( BPF_OR ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_NEG ,  BPF_REG_AX ,  0 ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_ARSH ,  BPF_REG_AX ,  63 ) ; *patch ++  =  BPF_ALU64_REG ( BPF_AND ,  BPF_REG_AX , off_reg ) ;\n    Note that    off_reg  represents the scalar register being added to the pointer register, and    BPF_REG_AUX  represents the auxiliary register.\n      The value of    off_reg  at runtime is subtracted from    alu_limit  and stored into    BPF_REG_AX . If    off_reg &gt; alu_limit , the highest bit of    BPF_REG_AX  is set (the sign bit).\n If the difference stored in    BPF_REG_AUX  is positive and off_reg is negative, indicating that    alu_limit  and the register\u2019s value have opposing signs, the    BPF_OR  operation will set the sign bit.\n The    BPF_NEG  operation will negate the sign bit. If the sign bit is set, it will become 0, and if not, it will become 1.\n The    BPF_ARSH  operation does an arithmetic right shift of 63 bits. This fills    BPF_REG_AX  with either all 0s or 1s, the value of the sign bit.\n Depending on the result of the above operation, the    BPF_AND  operation will either null out    off_reg  or leave it unchanged.\n This means that if    off_reg  exceeds    alu_limit , or if    off_reg  and    alu_limit  have opposing signs, the value of    off_reg  will be replaced with 0, nulling the pointer arithmetic operation.\n        The way    alu_limit  is calculated was  recently updated  [15]. The new implementation may not have been adopted yet by some Linux distributions. For completeness, I will cover both, and revisit why the differences matter as they become relevant in the next sections.\n      The    alu_limit  is determined by the boundaries of the  pointer register. Meaning, if the pointer register points to the beginning of a map, the    alu_limit  for subtraction is 0, and the alu_limit for addition is equal to the size of the map (minus 1). The    alu_limit  is updated with subsequent operations on the pointer register.\n      The    alu_limit  is determined by the boundaries of the  offset register. Meaning if the value of the offset register at runtime is compared against the register\u2019s boundaries computed during the verifier\u2019s static range tracking.\n    My initial knowledge of the eBPF verifier came from this excellent   blog post  by Manfred Paul detailing his exploitation of CVE-2020-8835. I highly recommend checking it out!\n      Recall that the eBPF instruction set can operate on both the entire 64 bits of registers or just the lower 32 bits. For this reason, the verifier range tracking contains separate bounds for the lower 32 bits of a register:    {u,s}32_{min,max}_value .\n  These bounds are updated for every operation. Each operation has two tracking functions with a 64 bit and a 32 bit counter part. Both are called for a 64 bit operation in the function   adjust_scalar_min_max_vals  .\n  * /* WARNING: This function does calculations on 64-bit values, but * the actual execution may occur on 32-bit values. Therefore, * things like bitshifts need extra checks in the 32-bit case.*/ static int  adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ...  case  BPF_AND : dst_reg - &gt;var_off  =  tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_and (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_and (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_OR : dst_reg - &gt;var_off  =  tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_or (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_or (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_XOR : dst_reg - &gt;var_off  =  tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_xor (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_xor (dst_reg ,  &amp;src_reg ) ;  break ;  ... }\n    The bug,  CVE-2021-3490, is found in the 32 bit tracking function for    BPF_AND ,    BPF_OR , and    BPF_XOR  operations. It is the same in each of the functions.\n    Let\u2019s take a look at an excerpt of the  offending code for    BPF_AND :\n  static  void  scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_subreg_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_subreg_is_const (dst_reg - &gt;var_off ) ; struct tnum var32_off  =  tnum_subreg (dst_reg - &gt;var_off ) ; s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  /* Assuming scalar64_min_max_and will be called so its safe * to skip updating register for known 32-bit case. */  if  (src_known  &amp;&amp; dst_known )  return ; ... }\n    As shown in the code snippet above, if the lower 32 bits of both the source and destination register are known, the function skips updating the 32 bit bounds.\n    The comment above the return states that this is OK, because the  64 bit  counterpart will take care of it. Let\u2019s take a look:\n  static  void  scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_is_const (dst_reg - &gt;var_off ) ; s64 smin_val  = src_reg - &gt;smin_value ; u64 umin_val  = src_reg - &gt;umin_value ;  if  (src_known  &amp;&amp; dst_known )  {  __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;  return ;  }  ... }\n  Indeed, we can see if    src_known  and    dst_known  are true, the function    __mark_reg_known  will be called. Can you spot the problem?\n    In    scalar32_min_max_and , the    _known  variable is calculated using    tnum_subreg_is_const  . The 64 bit counterpart,    scalar_min_max_and , uses    tnum_is_const . The difference is that the former returns true if the the lower 32 bits of the register are known constants, and the latter returns true only if the entire 64 bits are constant. If the operation involves registers where the lower 32 bits are known but the upper 32 bits are unknown, the assumption stated in the comment is violated.\n    In the function    adjust_scalar_min_max_vals , before returning, the bounds of the destination register are updated a last time by calling the  following three functions:\n    Each of these functions have 32 and 64 bit counterparts. I\u2019ll just cover the 32 bit case, since that is what the bug affects.\n      static  void  __update_reg32_bounds ( struct bpf_reg_state *reg ) { struct tnum var32_off  =  tnum_subreg (reg - &gt;var_off ) ;  /* min signed is max(sign bit) | min(other bits) */ reg - &gt;s32_min_value  =  max_t (s32 , reg - &gt;s32_min_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MIN ) ) ;  /* max signed is min(sign bit) | max(other bits) */ reg - &gt;s32_max_value  =  min_t (s32 , reg - &gt;s32_max_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MAX ) ) ; reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;u32_min_value ,  (u32 )var32_off .value ) ; reg - &gt;u32_max_value  =  min (reg - &gt;u32_max_value ,  (u32 ) (var32_off .value  | var32_off .mask ) ) ; }\n    Notice that the min bounds set to either the current min or the known value of register, whichever is larger. Similarly, the max bounds are set either the current max, or the known value of the register, whichever is smaller.\n  Then, the signed and unsigned bounds are used to update each other in   __reg32_deduce_bounds  .\n  /* Uses signed min/max values to inform unsigned, and vice-versa */ static  void  __reg32_deduce_bounds ( struct bpf_reg_state *reg ) {  /* Learn sign from signed bounds. * If we cannot cross the sign boundary, then signed and * unsigned bounds * are the same, so combine. This works even in the * negative case, e.g. * -3 s&lt;= x s&lt;= -1 implies 0xf...fd u&lt;= x u&lt;= 0xf...ff. */  if  (reg - &gt;s32_min_value  &gt;=  0  || reg - &gt;s32_max_value  &lt;  0 )  { reg - &gt;s32_min_value  = reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value  = reg - &gt;u32_max_value  =  min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;  return ;  } ... }\n      static  void  __reg_bound_offset ( struct bpf_reg_state *reg ) { struct tnum var64_off  =  tnum_intersect (reg - &gt;var_off ,  tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off  =  tnum_intersect ( tnum_subreg (reg - &gt;var_off ) , tnum_range (reg - &gt;u32_min_value , reg - &gt;u32_max_value ) ) ; reg - &gt;var_off  =  tnum_or ( tnum_clear_subreg (var64_off ) , var32_off ) ; }\n    tnum_intersect  takes two    tnum s and combines the knowledge conveyed by both into a single    tnum .\n Let\u2019s go through the steps using an example so we can understand why this is a critical vulnerability.\n  Suppose we have the instruction   BPF_ALU64_REG(BPF_AND, R2, R3). This instruction performs an   AND operation on registers   R2 and   R3 and saves the results in   R2.\n  R2 has   var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}, meaning the lower 32 bits are known to have a value of 1, and the upper 32 bits are unknown. Because the lower 32 bits of the register are known, its 32bit bounds are equal to the value.\n R3 has   var_off = {mask = 0x0; value = 0x100000002}, meaning the entire 64 bits are known and equal to   0x100000002.\n   As shown on line 12 of the snippet of   adjust_scalar_min_max_vals, the function   tnum_and is called. This will perform an AND operation and save the results in var_off of the destination register,   R2. Recall, the lower 32 bits in both of the registers are known. All of the bits of R3 are known: the upper 31 bits of are 0, and the 32nd bit is 1. This means that    R2  is left with    var_off = {mask = 0x100000000; value = 0x0} . This is because 2 &amp; 1 = 0 (for the lower 32 bits), and all but the 32nd bit will be known to be 0, since    R3  has a 1 in the 32nd bit.\n On the next line,    scalar32_min_max_and  is called. We already know that this function will return immediately and make no changes to the bounds, because the lower 32 bits of both registers are known.\n Then    __update_reg32_bounds  is called. This will set    u32_max_value = 0 , because the value of    var_off.value = 0 &lt; u32_max_value = 1 . Similarly, it will set    u32_min_value = 1  because    var_off.value = 0 &lt; u32_min_value . The same goes for the signed bounds.\n Now we can see that in this case, we are left with a register where    {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 !\n      @@  - 7084 , 11  + 7084 , 10 @@  static  void  scalar32_min_max_and (struct bpf_reg_state  *dst_reg , s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  -  /* Assuming scalar64_min_max_and will be called so its safe- * to skip updating register for known 32-bit case.- */ -  if  (src_known  &amp;&amp; dst_known ) +  if  (src_known  &amp;&amp; dst_known )  { +  __mark_reg32_known (dst_reg , var32_off .value ) ;  return ; +  }\n    Above we can see that now,   __mark_reg32_known  is called on the destination register before returning if the lower 32 bits of the source and destination register are known constants.\n    /* Mark the unknown part of a register (variable offset or scalar * value) as known to have the value @imm.*/ static  void  __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off  =  tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value  =  (s32 )imm ; reg - &gt;s32_max_value  =  (s32 )imm\n......", "posttime": "2021-08-09 00:55:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,ebpf,pwning,bpf", "title": "\u4f7f\u7528 eBPF \u8fdb\u884c\u5185\u6838\u7834\u89e3\uff1a\u4e00\u4e2a\u7231\u60c5\u6545\u4e8b", "title_en": "Kernel Pwning with eBPF: A Love Story", "transed": 1, "url": "https://www.graplsecurity.com/post/kernel-pwning-with-ebpf-a-love-story", "via": "", "real_tags": ["\u7834\u89e3", "ebpf", "pwning", "bpf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072141, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Wildfire Games \u81ea\u8c6a\u5730\u5ba3\u5e03\u53d1\u5e03 0AD Alpha 25\uff1a\u201cYaun\u00e3\u201d\uff0c\u8fd9\u662f 0 AD \u7684\u7b2c 25 \u4e2a Alpha \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u6b3e\u514d\u8d39\u3001\u5f00\u6e90\u7684\u53e4\u4ee3\u6218\u4e89\u5b9e\u65f6\u6218\u7565\u6e38\u620f\u3002 Yaun\u00e3 \u662f\u53e4\u6ce2\u65af\u8bed\u4e2d\u7231\u5965\u5c3c\u4e9a\u4eba\uff08\u5e0c\u814a\u4eba\uff09\u7684\u8bcd\u3002\u8ba2\u5355\u91cd\u7ec4\u2014\u2014\u73a9\u5bb6\u73b0\u5728\u53ef\u4ee5\u5c06\u65b0\u8ba2\u5355\u63a8\u5230\u751f\u4ea7\u961f\u5217\u7684\u524d\u9762 0 AD \u662f\u514d\u8d39\u8f6f\u4ef6\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u514d\u8d39\u4e0b\u8f7d\u3001\u91cd\u65b0\u5206\u53d1\u3001\u4fee\u6539\u548c\u8d21\u732e\u5e94\u7528\u7a0b\u5e8f\uff1a\u7528\u4e8e\u4ee3\u7801\u7684 GNU \u516c\u5171\u8bb8\u53ef\u7248\u672c 2 (GPL v2) \u548c\u7528\u4e8e\u827a\u672f\u4f5c\u54c1\u7684\u77e5\u8bc6\u5171\u4eab\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 3.0 (CC-BY-SA 3.0) .\u5c3d\u7ba1\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e9b\u4eba\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u7269\u7406\u5a92\u4f53\u51fa\u552e 0 AD \u7684\u526f\u672c\uff0c\u4f46\u60a8\u59cb\u7ec8\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4ece\u5f00\u53d1\u4eba\u5458\u5904\u5b8c\u5168\u514d\u8d39\u4e0b\u8f7d 0 AD\u3002\u6ca1\u6709\u201c\u514d\u8d39\u589e\u503c\u201d\u6a21\u5f0f\uff0c\u6ca1\u6709\u6e38\u620f\u5185\u5e7f\u544a\uff0c\u6ca1\u6709\u6355\u83b7\u3002", "note_en": "Wildfire Games proudly announces the release of 0AD Alpha 25: \u201cYaun\u00e3,\u201d the twenty-fifth alpha version of 0 A.D., a free, open-source real-time strategy game of ancient warfare.\u00a0Yaun\u00e3 is an\u00a0old Persian word for Ionians (Greeks).\n     Order Restructuring \u2013 Players Can Now Push New Orders To The Front Of Their Production Queues\n   0 A.D. is free software. This means you are free to download, redistribute, modify and   contribute \u00a0to the application under the same licences: GNU Public Licence version 2 (GPL v2) for code and Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0) for artwork.\n Although you might find some people selling copies of 0 A.D., either over the internet or on physical media, you will always have the option to   download 0 A.D. \u00a0completely gratis, directly from the developers. No \u201cfreemium\u201d model, no in-game advertising, no catch.", "posttime": "2021-08-09 00:54:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ad,alpha", "title": "0 AD \u963f\u5c14\u6cd5 25\uff1aYaun\u0101", "title_en": "0 A.D. Alpha 25: Yaun\u0101", "transed": 1, "url": "https://play0ad.com/new-release-0-a-d-alpha-25-yauna/", "via": "", "real_tags": ["ad", "alpha"]}, {"category": "", "categoryclass": "", "imagename": "f1ac3d2c9a9eb77da56b61f928e0d7a6.png", "infoid": 1072140, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u62a5\u9053\uff0c\u652f\u4ed8\u670d\u52a1\u516c\u53f8 Xsolla \u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5\uff0c\u6839\u636e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\uff08\u901a\u8fc7 Game World Observer\uff09\uff0c\u8be5\u516c\u53f8\u4f4d\u4e8e\u4fc4\u7f57\u65af\u5f7c\u5c14\u59c6\u7684\u529e\u516c\u5ba4\u7684\u5458\u5de5\u88ab\u89e3\u96c7\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0cXsolla \u7684\u9996\u5e2d\u6267\u884c\u5b98\u517c\u521b\u59cb\u4eba Aleksandr Agapitov \u5411\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53d1\u9001\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u89e3\u91ca\u4e86\u8fd9\u4e00\u51b3\u5b9a\uff0c\u5e76\u900f\u9732\u4ed6\u4eec\u5df2\u88ab\u89e3\u96c7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u88ab\u6807\u8bb0\u4e3a\u201c\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u201d\u3002 \u201c\u60a8\u6536\u5230\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u56e0\u4e3a\u6211\u7684\u5927\u6570\u636e\u56e2\u961f\u5206\u6790\u4e86\u60a8\u5728 Jira\u3001Confluence\u3001Gmail\u3001\u804a\u5929\u3001\u6587\u6863\u3001\u4eea\u8868\u677f\u4e2d\u7684\u6d3b\u52a8\uff0c\u5e76\u5c06\u60a8\u6807\u8bb0\u4e3a\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u60a8\u8fdc\u7a0b\u5de5\u4f5c\u65f6\uff0c\u60a8\u5e76\u4e0d\u603b\u662f\u5728\u5de5\u4f5c\u573a\u6240\u3002 \u201c\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u53ef\u80fd\u4f1a\u611f\u5230\u9707\u60ca\uff0c\u4f46\u6211\u771f\u7684\u76f8\u4fe1 Xsolla \u4e0d\u9002\u5408\u4f60\u4eec\u3002 Nadia \u548c\u5979\u7684\u62a4\u7406\u56e2\u961f\u4e0e\u4e03\u5bb6\u9886\u5148\u7684\u4eba\u529b\u8d44\u6e90\u673a\u6784\u5408\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5e2e\u52a9\u60a8\u627e\u5230\u4e00\u4e2a\u597d\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u60a8\u8d5a\u5f97\u66f4\u591a\uff0c\u5de5\u4f5c\u66f4\u5c11\u3002 Sasha \u5c06\u5e2e\u52a9\u60a8\u83b7\u5f97\u63a8\u8350\uff0c\u5305\u62ec\u6211\u81ea\u5df1\u7684\u63a8\u8350\u3002 Natalia \u4f1a\u4e3a\u60a8\u89e3\u8bfb\u60a8\u7684\u6743\u5229\u3002 \u201c\u518d\u6b21\u611f\u8c22\u60a8\u7684\u8d21\u732e\u3002\u5982\u679c\u4f60\u60f3\u548c\u6211\u4fdd\u6301\u8054\u7cfb\uff0c\u8bf7\u7ed9\u6211\u5199\u4e00\u5c01\u957f\u4fe1\uff0c\u628a\u4f60\u6240\u6709\u7684\u89c2\u5bdf\u3001\u4e0d\u516c\u548c\u611f\u6fc0\u3002\u201d\u8fd9\u7acb\u5373\u5f15\u53d1\u4e86\u53ef\u9884\u89c1\u7684\u53cd\u5f39\uff1a\u65e0\u8bba\u662f\u88c1\u5458\u672c\u8eab\u8fd8\u662f\u7535\u5b50\u90ae\u4ef6\u7684\u8bed\u6c14\u3002\u636e ProPerm.ru \u79f0\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u8c03\u67e5\u5bfb\u627e\u6cc4\u9732\u7535\u5b50\u90ae\u4ef6\u7684\u5458\u5de5\u3002\u88c1\u5458\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u53ec\u5f00\u4e86\u4e00\u6b21\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u4ed6\u89e3\u91ca\u8bf4\uff0c\u5927\u89c4\u6a21\u88c1\u5458\u662f\u7531\u4e8e\u516c\u53f8\u5df2\u505c\u6b62\u663e\u793a 40% \u7684\u589e\u957f\u3002\u963f\u52a0\u76ae\u6258\u592b\u63d0\u4f9b\u4e86\u66f4\u591a\u7ec6\u8282\uff0c\u5305\u62ec\u4e0b\u5c97\u5458\u5de5\u603b\u6570\u53ef\u80fd\u5360\u516c\u53f8\u6240\u6709\u529e\u516c\u5ba4\u5458\u5de5\u603b\u6570\u7684 40%\u3002\n\u5728\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e4b\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u901a\u8fc7\u4e00\u6761\u63a8\u6587\u5f15\u53d1\u4e86\u8fdb\u4e00\u6b65\u7684\u4e89\u8bae\uff0c\u63a8\u6587\u5927\u81f4\u7ffb\u8bd1\u4e3a\u201c\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u5f00\uff0c\u6216\u8005\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u51fa\u53bb\u3002\u201d\u963f\u52a0\u76ae\u6258\u592b\u5728\u63a5\u53d7\u300a\u798f\u5e03\u65af\u4fc4\u7f57\u65af\u300b\u91c7\u8bbf\u65f6\u900f\u9732\uff0c\u5728\u4e0e\u7ecf\u7406\u8ba8\u8bba\u540e\uff0c60 \u540d\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53ef\u80fd\u4f1a\u7559\u5728\u516c\u53f8\uff0c\u800c\u88ab\u89e3\u96c7\u7684\u5458\u5de5\u5c06\u4fdd\u7559\u533b\u7597\u4fdd\u9669\uff0c\u5e76\u83b7\u5f97\u76f8\u5f53\u4e8e\u56db\u5230\u516d\u4e2a\u6708\u5de5\u8d44\u7684\u533b\u7597\u5de5\u8d44\u3002", "note_en": "Payment services company Xsolla has reportedly fired 150 of its employees, with workers in the company\u2019s office in Perm, Russia being terminated based on big data analysis of their activity (via  Game World Observer).\n Making the situation worse, Xsolla CEO and founder Aleksandr Agapitov sent an email to the affected employees explaining the decision, revealing that they had been let go because they had been tagged as \u201cunengaged and unproductive employees.\u201d\n   \u201cYou received this email because my big data team analyzed your activities in Jira, Confluence, Gmail, chats, documents, dashboards and tagged you as unengaged and unproductive employees. In other words, you were not always present at the workplace when you worked remotely.\n \u201cMany of you might be shocked, but I truly believe that Xsolla is not for you. Nadia and her care team partnered with seven leading HR agencies, as we will help you find a good place, where you will earn more and work even less. Sasha will help you get a recommendation, including the one from myself. And Natalia will read you your rights.\n \u201cOnce again, thank you for your contribution. If you want to stay in contact with me, please write me a long letter about all your observations, injustice, and gratitude.\u201d\n This prompted immediate and predictable backlash: both for the layoffs themselves and for the tone of the email. According to  ProPerm.ru, the company is investigating to find the employee who leaked the email.\n Following the layoffs, Agapitov held a press conference in which he explained that the mass layoffs were caused by the fact that the company has stopped showing 40% growth. Agapitov provided further details, including that the total number of laid-off employees could total 40% of the company\u2019s headcount across all of its offices.\n Following the press conference, Agapitov incited further controversy with a  Tweet that roughly translates to \u201cWork your fucking ass off or get your fucking ass out.\u201d\n Speaking with  Forbes Russia, Agapitov revealed that 60 of the affected employees might stay with the company following discussions with their managers, while those who have been let go will keep their medical insurance and receive medical pay equal to four to six monthly salaries.", "posttime": "2021-08-09 00:54:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u6570\u636e,\u6570\u636e\u5206\u6790,based,\u5458\u5de5", "title": "\u827e\u514b\u7d22\u62c9\u57fa\u4e8e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5", "title_en": "Xsolla fires 150 employees based on big data analysis of their activity", "transed": 1, "url": "https://www.mcvuk.com/business-news/xsolla-fires-150-employees-based-on-big-data-analysis-of-their-activity-many-of-you-might-be-shocked-but-i-truly-believe-that-xsolla-is-not-for-you/", "via": "", "real_tags": ["\u5927\u6570\u636e", "\u6570\u636e\u5206\u6790", "based", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "6d4fe6117029a98c7aa66fe2542b07c2.png", "infoid": 1072138, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u590f\u5b63\u7684\u4e09\u4f0f\u5929\u5df2\u7ecf\u5230\u6765\uff0c\u672c\u5468\u5e02\u573a\uff08\u80a1\u7968\u3001\u503a\u52a1\u3001\u5546\u54c1\u5e02\u573a\uff09\u51e0\u4e4e\u6ca1\u6709\u53d8\u52a8\uff0c\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u7684\u64b0\u7a3f\u4eba\u601d\u8003\u5982\u4f55\u5728\u80a1\u7968\u548c\u5546\u54c1\u5e02\u573a\u65e0\u7cbe\u6253\u91c7\u7684\u60c5\u51b5\u4e0b\u5ea6\u8fc7\u4ed6\u4eec\u7684\u4e00\u5929\u3002\u968f\u610f\u7684\u60f3\u6cd5\u6293\u4f4f\u4e86\u65e0\u804a\u7684\u65f6\u523b\u3002\u751a\u81f3\u300a\u91d1\u878d\u65f6\u62a5\u300b\u4e5f\u6682\u65f6\u7f29\u6c34\u4e86\uff1a\u672c\u5468\u6bcf\u5929 6 \u9875\uff0c\u4ece\u7ecf\u5178\u7684 12 \u9875\u51cf\u5c11\u4e86\u3002\u590f\u5929\u5230\u4e86\u3002\u5173\u4e8e\u5fb7\u56fd\u8d54\u507f\u7684\u4e89\u8bba\u4ecd\u5728\u7ee7\u7eed\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u82f1\u56fd\u548c\u6cd5\u56fd\u5df2\u7ecf\u6e05\u695a\uff0c\u5fb7\u56fd\u65e0\u6cd5\u5168\u989d\u652f\u4ed8\u3002 1921 \u5e74 8 \u6708 10 \u65e5\u5c31\u4e09\u4e2a\u6838\u5fc3\u95ee\u9898\u5c55\u5f00\u8c08\u5224\uff0c\u800c\u4e0d\u662f\u8fdd\u7ea6\uff1a\u5fb7\u56fd\u5411\u76ee\u524d\u5360\u9886\u5fb7\u56fd\u5730\u533a\u7684\u82f1\u56fd\u548c\u6cd5\u56fd\u58eb\u5175\u4ed8\u6b3e\u3001\u5b9e\u7269\uff08\u94a2\u3001\u7164\u3001\u6728\u6750\uff09\u8f6c\u79fb\u4ee3\u66ff\u5fb7\u56fd\u91d1\u9a6c\u514b\uff0c\u4ee5\u53ca\u627f\u62c5\u6218\u4e89\u503a\u52a1\u6b27\u6d32\u8f83\u5c0f\u7684\u56fd\u5bb6\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u5fb7\u56fd\u5728\u7b2c\u4e00\u200b\u200b\u6b21\u4e16\u754c\u5927\u6218\u540e\u4f7f\u7528\u4e24\u79cd\u5e73\u884c\u8d27\u5e01\uff1a\u91d1\u9a6c\u514b\u548c\u7eb8\u5e01\u3002\u51e1\u5c14\u8d5b\u6761\u7ea6\u89c4\u5b9a\u4ee5\u91d1\u9a6c\u514b\u652f\u4ed8\uff0c\u8fd9\u9020\u6210\u4e86\u4e25\u91cd\u7684\u8d22\u653f\u538b\u529b\u3002 1920 \u5e74\u4ee3\u7684\u5fb7\u56fd\u5f53\u7136\u88ab\u79f0\u4e3a\u9b4f\u739b\u5171\u548c\u56fd\uff0c\u5e76\u5c06\u5728 9 \u6708\u5f00\u59cb\u7ecf\u5386\u4e25\u91cd\u7684\u901a\u8d27\u81a8\u80c0\uff0c\u8fd9\u79cd\u901a\u8d27\u81a8\u80c0\u4f1a\u6301\u7eed\u4e24\u5e74\u76f4\u5230\u91d1\u878d\u5d29\u6e83\u3002\u7ebd\u7ea6\u7684\u4ea4\u6613\u5458\u60f3\u77e5\u9053\u4ec0\u4e48\u53ef\u80fd\u4f1a\u6539\u53d8\u5e02\u573a\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u7684\u7f16\u8f91\u4eec\u63a8\u6d4b\uff0c\u9ad8\u7a0e\u6536\u548c\u516c\u5171\u652f\u51fa\u6b63\u5728\u635f\u5bb3\u516c\u4f17\u5bf9\u62e5\u6709\u80a1\u7968\u7684\u770b\u6cd5\u3002\u4e0d\u65f6\u6709\u8db3\u591f\u52c7\u6562\u7684\u4eba\u5bf9\u4e0d\u53d7\u6b22\u8fce\u7684\u666e\u901a\u80a1\u53d1\u8868\u610f\u89c1\u3002\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\u5728 1911 \u5e74\u88ab\u62c6\u5206\u4e3a\u8fd1\u4e09\u6253\u516c\u53f8\uff0c\u672c\u6587\u5217\u51fa\u4e86\u6240\u6709\u524d\u6210\u5206\u7684\u4ef7\u683c\u3002\u5c3d\u7ba1\u8fc7\u53bb\u4e00\u5e74\u8270\u96be\uff0c\u4f46 1921 \u5e74\u5df2\u7ecf\u663e\u793a\u51fa\u77f3\u6cb9\u89e6\u5e95\u7684\u8ff9\u8c61\u3002\u4f5c\u8005\u5efa\u8bae\u7cbe\u660e\u7684\u6295\u8d44\u8005\u8d2d\u4e70\u6240\u6709\u8fd9\u4e9b\u80a1\u7968\u3002\u6bcf\u5bb6\u516c\u53f8\u7684\u4ea4\u6613\u4ef7\u683c\u90fd\u4f4e\u4e8e\u8d26\u9762\u4ef7\u503c\uff01\u5e02\u76c8\u7387\u4ecb\u4e8e 3 \u5230 5 \u4e4b\u95f4\u3002\u63d0\u9192\u4e00\u4e0b\uff0c\u65e0\u98ce\u9669\u503a\u5238\u7684\u6536\u76ca\u7387\u4e3a 5%\uff0c\u79ef\u6781\u9f13\u52b1\u6563\u6237\u6295\u8d44\u8005\u4e0d\u8981\u6301\u6709\u80a1\u7968\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u62a5\u7eb8\u4e0a\u5bf9\u666e\u901a\u80a1\u7684\u51b7\u6f20\u4f1a\u8ba9\u73b0\u4ee3\u6295\u8d44\u8005\u5782\u6d8e\u4e09\u5c3a\u3002\u5982\u679c\u4ece 1921 \u5e74\u5230\u73b0\u5728\uff0c\u4e70\u5165\u5e76\u6301\u6709\u9053\u743c\u65af\u6307\u6570\uff0c\u603b\u56de\u62a5\u5c06\u662f 500,000%\uff085,000 \u500d\uff09\uff01\u6839\u636e\u57c3\u514b\u68ee\u7f8e\u5b5a\u7684\u524d\u8eab\u65b0\u6cfd\u897f\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\uff08\u62c6\u5206\u8c03\u6574\u540e\u7684 0.04 \u7f8e\u5143\uff09\uff0c\u8d2d\u4e70\u548c\u6301\u6709 100 \u5e74\u5c06\u76f8\u5f53\u4e8e 800,000% \u7684\u56de\u62a5\uff088,000 \u500d\uff09\uff01\u81f4\u6211\u4eec\u7684\u8bfb\u8005\uff1a\u5982\u679c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u90a3\u4e48\u5728\u5f53\u65f6\u6295\u8d44\u4e8e\u5927\u76d8\u7684 100 \u7f8e\u5143\u4eca\u5929\u5c06\u4ef7\u503c 500,000 \u7f8e\u5143\uff01\u5728\u4eca\u5929\u7684\u6a21\u56e0\u80a1\u7968\u4e16\u754c\u4e2d\uff0c\u8fd9\u5982\u4f55\u6210\u4e3a\u5934\u6761\u65b0\u95fb\uff1f\n\u9605\u8bfb\u672c\u65f6\u4e8b\u901a\u8baf\u662f\u514d\u8d39\u7684\u3002\u5982\u679c\u60a8\u559c\u6b22\u5b83\uff0c\u8bf7\u5206\u4eab\u7ed9\u670b\u53cb\u6216\u901a\u8fc7 PayPal \u6350\u8d60\uff08\u4e0b\u9762\u7684\u6309\u94ae\uff09\u3002", "note_en": "Dog days of summer have arrived, bringing little to no movements in markets this week (equity, debt, commodity markets)\n  Writers at the FT ponder how to spend their day while equity and commodity markets vacillate listlessly. Random ideas captures the very moment of boredom. Even the Financial Times has temporarily shrunk: 6 pages per day this week down from the classic 12 pages. Summer has arrived.\n Wrangling over German reparations continues. Over the past year, it has become clear to Britain and France that Germany cannot pay in full. Instead of default, talks open on August 10, 1921 regarding three core issues: German payments to British and French soldiers currently occupying German regions, in kind (steel, coal, timber) transfers in lieu of German gold marks, and assumption of war debt of smaller European countries.\n Historical Fact: Germany operates two parallel currencies after WWI: the gold mark and paper mark. The Treaty of Versailles stipulates payment in gold marks, which is causing severe fiscal strain. The Germany of the 1920s is, of course, known as the Weimar Republic and will begin experiencing severe inflation in September that drags on for two years until financial implosion.\n Traders in New York wonder what might turn the market. The editors of the WSJ surmise that high taxation and public spending are harming public perception of owning equities.\n  Every now and then, someone brave enough offers their opinion on unpopular common stocks. Standard Oil was split into nearly three dozen companies in 1911, and this article lists the prices of all former constituents. Despite having a rough past year, 1921 has shown signs of an oil bottom. The writer recommends astute investors purchase shares in all of them. Every single company trades below book value! PE ratios range from 3 to 5. As a reminder, risk free bonds are yielding 5%, and retail investors are being actively encouraged not to own equities.\n  Historical Fact: The apathy in the papers regarding common stocks would make the modern day investor salivate. If one bought and held the Dow from 1921 to present, the total return would be 500,000% (5,000x)! Based on ExxonMobil\u2019s predecessor company Standard Oil of New Jersey ($0.04 split adjusted), buying and holding for 100 years would equate to an 800,000% return (8,000x)! To our readers: $100 invested in the broad market back then would be worth $500,000 today by doing  absolutely nothing! How\u2019s that for a headline in today\u2019s meme stock world?\n  Reading this newsletter is free. If you enjoy it, then please share to a friend or donate via PayPal (button below).", "posttime": "2021-08-09 00:53:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u534e\u5c14\u8857,\u91d1\u878d\u65f6\u62a5,ft,\u5fb7\u56fd", "title": "\u6211\u6bcf\u5468\u9605\u8bfb 100 \u5e74\u524d\u5230 1929 \u5e74\u7684\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u548c\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b", "title_en": "I'm reading the FT and WSJ from 100 years ago each week leading to 1929", "transed": 1, "url": "https://roaring20s.substack.com/p/august-8-1921", "via": "", "real_tags": ["\u534e\u5c14\u8857", "\u91d1\u878d\u65f6\u62a5", "ft", "\u5fb7\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "aea55b8bf17634e5a4a71fe2bfd67220.png", "infoid": 1072137, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u65e0\u8bba\u8c01\u91c7\u53d6\u8fd9\u79cd\u9884\u9632\u63aa\u65bd\uff0c\u90fd\u4f1a\u4f53\u9a8c\u5230\u4e50\u8da3\uff0c\u800c\u4e0d\u662f\u65f6\u4e0d\u65f6\u5730\u5931\u53bb\u4e09\u5206\u4e4b\u4e00\u6216\u56db\u540d\u4ea7\u8925\u70ed\u60a3\u8005\uff0c\u4f46\u53ef\u80fd\u53ea\u6709\u56db\u767e\u5206\u4e4b\u4e00\u201d\u6211\u7684\u670b\u53cb Doug McKenty\uff0c\u4ed6\u7684 Shift \u64ad\u5ba2\u521a\u521a\u88ab Mailchimp \u6682\u505c.\u4ed6\u5bf9\u4ed6\u6240\u8c13\u7684\u533b\u7597\u4fdd\u5065\u81ea\u7531\uff08\u9605\u8bfb\uff1a\u75ab\u82d7\u62a4\u7167\uff09\u7684\u58f0\u97f3\u8d8a\u6765\u8d8a\u76f4\u8a00\u4e0d\u8bb3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5173\u4e8e\u754c\u9650\u4e4b\u5916\u7684\u4e1c\u897f\u3002 Mailchimp \u662f\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u63d0\u4f9b\u5546\uff0c\u4ee5\u8fd9\u6837\u505a\u800c\u95fb\u540d\u3002\u60a8\u6709\u6548\u5730\u5411 Mailchimp \u4ed8\u8d39\uff0c\u4ee5\u7ba1\u7406\u60a8\u53ef\u4ee5\u6216\u4e0d\u80fd\u5bf9\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u8005\u8bf4\u7684\u8bdd\u3002\u60a8\u6b63\u5728\u4f7f\u7528\u4ed6\u4eec\u7684\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5728\u4ed6\u4eec\u770b\u6765\uff0c\u8fd9\u5c31\u662f\u8d4b\u4e88\u4ed6\u4eec\u6743\u5229\u548c\u9053\u5fb7\u6743\u5a01\u6765\u76d1\u63a7\u60a8\u4e0e\u60a8\u81ea\u5df1\u7684\u53d7\u4f17\u7684\u901a\u4fe1\u5185\u5bb9\u7684\u539f\u56e0\u3002\u5728\u6211\u7684\u4e66\u300a\u65e0\u61c8\u53ef\u51fb\uff1a\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u5e73\u53f0\u653b\u51fb\u3001\u53d6\u6d88\u6587\u5316\u548c\u5176\u4ed6\u5728\u7ebf\u707e\u96be\u300b\uff08\u7535\u5b50\u4e66\u7248\u672c\u73b0\u5df2\u514d\u8d39\u63d0\u4f9b\u4e00\u6bb5\u65f6\u95f4\uff09\u4e2d\uff0c\u6211\u7528\u4e86\u4e00\u6574\u7ae0\u6765\u8bb2\u8ff0\u5927\u578b\u79d1\u6280\u516c\u53f8\u7684\u9634\u8c0b\u8be1\u8ba1\u4ee5\u53ca\u4ed6\u4eec\u5982\u4f55\u8d85\u8d8a\u5728\u51b3\u5b9a\u4ec0\u4e48\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\uff0c\u4ec0\u4e48\u4e0d\u5728\u6216\u4e0d\u5e94\u8be5\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\u65f6\uff0c\u7406\u6027\u7684\u754c\u9650\u3002\u4efb\u4f55\u79d1\u6280\u516c\u53f8\u90fd\u4e0d\u5e94\u8be5\u6839\u636e\u4ed6\u4eec\u8ba4\u4e3a\u7528\u6237\u5728\u4ed6\u4eec\u81ea\u5df1\u7684\u5e73\u53f0\u4e0a\u505a\u4e86\u6216\u53ef\u80fd\u505a\u7684\u4e8b\u60c5\u6765\u6267\u884c\u4ed6\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u3002\u7136\u800c Twitter\u3001Facebook\u3001Patreon \u4ee5\u53ca\u8c01\u77e5\u9053\u8fd8\u6709\u8c01\u8fd9\u6837\u505a\u4e86\u3002\u50cf Mailchimp \u8fd9\u6837\u7684\u90ae\u4ef6\u516c\u53f8\u8fde\u89e3\u6790\u4ed6\u4eec\u4ed8\u8d39\u5ba2\u6237\u7684\u5185\u5bb9\u90fd\u6ca1\u6709\u4e1a\u52a1\uff0c\u66f4\u4e0d\u7528\u8bf4\u7c97\u7565\u5730\u5224\u65ad\u5b83\u662f\u5426\u662f\u9519\u8bef\u4fe1\u606f\u3002\u90ae\u4ef6\u63d0\u4f9b\u5546\u5e94\u8be5\u53ea\u5173\u5fc3\u4e24\u4ef6\u4e8b\u548c\u4e24\u4ef6\u4e8b\uff1a\u5c31\u662f\u8fd9\u6837\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u771f\u7684\u4e0d\u662f\u4ed6\u4eec\u7684\u4e8b\uff0c\u8ba4\u4e3a\u5b83\u662f\u81ea\u5927\u548c\u50b2\u6162\u7684\u9ad8\u5ea6\u3002\nPatreon \u7684\u9996\u5e2d\u6267\u884c\u5b98 Jack Conte \u63cf\u8ff0\u4e86\u4ed6\u4eec\u7684\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u5982\u4f55\u901a\u8fc7\u57fa\u4e8e\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u201d\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u6765\u6d88\u9664\u5c06\u67d0\u4eba\u7684\u5185\u5bb9\u8d27\u5e01\u5316\u7684\u51b3\u5b9a\u4e2d\u7684\u6240\u6709\u4e3b\u89c2\u56e0\u7d20\uff1a\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u662f\u5728\u56e2\u961f\u5ba1\u67e5\u5185\u5bb9\u65f6\u6d88\u9664\u4e2a\u4eba\u4ef7\u503c\u89c2\u548c\u4fe1\u5ff5.\u8fd9\u662f\u4e00\u79cd\u5b8c\u5168\u57fa\u4e8e\u53ef\u89c2\u5bdf\u4e8b\u5b9e\u7684\u5ba1\u67e5\u65b9\u6cd5\uff1a\u76f8\u673a\u770b\u5230\u4e86\u4ec0\u4e48\uff0c\u97f3\u9891\u8bbe\u5907\u8bb0\u5f55\u4e86\u4ec0\u4e48\u3002\u4e0d\u7ba1\u4f60\u7684\u610f\u56fe\u662f\u4ec0\u4e48\uff0c\u4f60\u7684\u52a8\u673a\uff0c\u4f60\u662f\u8c01\uff0c\u4f60\u7684\u8eab\u4efd\uff0c\u4f60\u7684\u610f\u8bc6\u5f62\u6001\u3002\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u53ea\u5173\u6ce8 Manifest Observable Behaviour\u3002\u6211\u4eec\u53d8\u5f97\u4e25\u8c28\u548c\u5177\u4f53\uff0c\u56e0\u4e3a\u6211\u4eec\u8c08\u8bba\u7684\u662f\u53d6\u6d88\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u3002\u5265\u593a\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u7684\u6743\u529b\u662f\u4e00\u9879\u53d1\u4eba\u6df1\u7701\u7684\u8d23\u4efb\u3002\u8fd9\u4e0d\u662f\u4e00\u65f6\u5174\u8d77\u7684\u4e8b\u60c5\u3002\u201d\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u4ec0\u4e48\uff1f\u8fd9\u5b9e\u9645\u4e0a\u542c\u8d77\u6765\u5f88\u50cf\u4e00\u9879\u6cd5\u5f8b\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u5b83\u5b8c\u5168\u662f\u7247\u9762\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u6b63\u5f53\u7a0b\u5e8f\u6216\u6cd5\u5f8b\u4fdd\u62a4\u7684\u8868\u8c61\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u7531\u4e00\u7fa4\u5e26\u7740\u9f3b\u73af\u548c\u4eba\u79f0\u4ee3\u8bcd\u60c5\u7eea\u7684\u7d2b\u53d1\u5343\u79a7\u4e00\u4ee3\u6267\u884c\u7684-\u6212\u6307\u3002\u5f53\u79d1\u6280\u516c\u53f8\u81ea\u884c\u4ef2\u88c1\u4ec0\u4e48\u662f\u9519\u8bef\u4fe1\u606f\u6216\u4e0d\u662f\u9519\u8bef\u4fe1\u606f\u65f6\uff0c\u6216\u8005\u6839\u636e\u53d1\u751f\u5728\u4ed6\u4eec\u81ea\u5df1\u5e73\u53f0\u4e4b\u5916\u7684\u4e8b\u4ef6\u91c7\u53d6\u884c\u52a8\u65f6\uff0c\u4ed6\u4eec\u6240\u505a\u7684\u6838\u5fc3\u662f\u5bf9\u56fd\u9645\u6cd5\u8fdb\u884c\u88c1\u51b3\u3002\u60a8\u771f\u7684\u5e0c\u671b\u60a8\u7684\u57df\u540d\u6ce8\u518c\u5546\u6216\u7f51\u7edc\u4e3b\u673a\u8fd9\u6837\u505a\u5417\uff1f\u8fd9\u4e9b\u516c\u53f8\u8ba4\u4e3a\u4ed6\u4eec\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf\u3002\u73b0\u5b9e\u662f\u5b83\u4eec\u662f\u7ba1\u9053\u3002 \u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u662f\u53e6\u4e00\u4e2a\u5b8c\u5168\u4e3b\u89c2\u7684\u6807\u8bed\uff0c\u88ab\u4f2a\u88c5\u6210\u5ba2\u89c2\u4e8b\u5b9e\u3002\u5982\u4eca\uff0c\u4e8b\u5b9e\u6838\u67e5\u66f4\u53ef\u80fd\u662f\u903b\u8f91\u8c2c\u8bef\uff0c\u800c\u73b0\u5b9e\u662f\uff0c\u5927\u591a\u6570\u4eba\u751a\u81f3\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u903b\u8f91\u8c2c\u8bef\u3002\u5f53\u7f8e\u8054\u793e\u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u7f8e\u56fd\u53c2\u8bae\u9662\u5173\u4e8e\u4f0a\u7ef4\u83cc\u7d20\u529f\u6548\u7684\u8bc1\u8bcd\u65f6\u58f0\u79f0\u201c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u4f0a\u7ef4\u83cc\u7d20\u662f\u5bf9\u6297 COVID \u7684\u2018\u795e\u836f\u2019\u201d\u5e76\u4e14\u4ed6\u4eec\u5c06\u5176\u6807\u8bb0\u4e3a\u865a\u5047\uff0c\u4ed6\u4eec\u72af\u4e0b\u4e86\u4e00\u4e2a\u903b\u8f91\u8c2c\u8bef\uff0c\u79f0\u4e3a\u201c\u8bc9\u8bf8\u65e0\u77e5\u201d \uff08\u6ca1\u6709\u8bc1\u636e\u4e0d\u662f\u7f3a\u5e2d\u7684\u8bc1\u636e\uff09\u3002\n\u7edd\u5927\u591a\u6570\u5173\u4e8e COVID-19 \u7684\u5a92\u4f53\u53d9\u8ff0\uff0c\u5173\u4e8e\u53e3\u7f69\u3001\u5c01\u9501\u3001\u4f0a\u7ef4\u83cc\u7d20\u3001HCQ \u4ee5\u53ca\u662f\u7684\u75ab\u82d7\uff0c\u90fd\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u4e94\u4e2a\u903b\u8f91\u8c2c\u8bef\uff1a \u8bc9\u8bf8\u6743\u5a01\uff1a\u4e13\u5bb6\u548c\u4e0d\u8d1f\u8d23\u4efb\u7684\u6280\u672f\u5b98\u50da\u6240\u8bf4\u7684\u5ba2\u89c2\u771f\u5b9e\u3002\u5982\u679c\u60a8\u4e0d\u540c\u610f\u4e13\u5bb6\u7684\u89c2\u70b9\uff0c\u90a3\u4e48\u60a8\u5c31\u662f\u5728\u8d28\u7591\u79d1\u5b66\u672c\u8eab\uff08\u5373\u4f7f\u662f\u90a3\u4e9b\u5728\u8d44\u52a9\u529f\u80fd\u83b7\u5f97\u6027\u7814\u7a76\u65b9\u9762\u975e\u5e38\u6295\u5165\u7684\u4eba\uff0c\u8fd9\u4e9b\u7814\u7a76\u5f88\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9a8c\u5ba4\u53d1\u5e03\u5bfc\u81f4\u5927\u6d41\u884c\uff09\u3002 Bandwagon\uff1a\u56e0\u4e3a\u5176\u4ed6\u4eba\u90fd\u76f8\u4fe1\u67d0\u4e8b\uff0c\u6240\u4ee5\u4f60\u4e5f\u6709\u9053\u5fb7\u4e49\u52a1\u53bb\u76f8\u4fe1\u5b83\u3002\u60a8\u9047\u5230\u6216\u8bfb\u5230\u7684\u4efb\u4f55\u4e0e\u5176\u4ed6\u4eba\u8ba4\u4e3a\u771f\u5b9e\u7684\u5185\u5bb9\u76f8\u77db\u76fe\u7684\u5185\u5bb9\u90fd\u662f\u201c\u9519\u8bef\u4fe1\u606f\u201d\u3002 Ad Hominem\uff1a\u6839\u672c\u4e0d\u662f\u4e89\u8bba\uff0c\u800c\u662f\u653b\u51fb\u3002 \u201cCovidiots\u201d\u3001\u201cDeniers\u201d\u8fd9\u4e9b\u4e0d\u662f\u7406\u6027\u7684\u53cd\u9a73\uff0c\u800c\u662f\u8bfd\u8c24\u3002\u4efb\u4f55\u4f7f\u7528\u5b83\u4eec\u7684\u4eba\u90fd\u4e0d\u662f\u5728\u8c08\u8bba\u8bdd\u8bed\uff0c\u800c\u662f\u5728\u504f\u6267\u548c\u504f\u89c1\u3002\u8fd9\u548c\u79cd\u65cf\u4e3b\u4e49\u4e00\u6837\u4e0d\u53ef\u539f\u8c05\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u8bb8\u591a\u4eba\u9762\u4e34\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u51fa\u4e8e\u5b8c\u5168\u6b63\u5f53\u7684\u7406\u7531\u6765\u5ba1\u89c6\u81ea\u5df1\u7684\u504f\u89c1\u548c\u7279\u6743\u7684\u6311\u6218\u3002\u4efb\u4f55\u5bf9\u6000\u7591\u8bba\u8005\u548c\u9006\u5411\u8005\u91c7\u53d6\u8fd9\u79cd\u5176\u4ed6\u65b9\u5f0f\u7684\u4eba\u90fd\u7f3a\u4e4f\u4e0e\u79cd\u65cf\u4e3b\u4e49\u8005\u540c\u7b49\u7a0b\u5ea6\u7684\u81ea\u6211\u610f\u8bc6\u548c\u540c\u7406\u5fc3\u3002\u8bc9\u8bf8\u60c5\u611f\uff1a\u4f01\u4e1a\u5a92\u4f53\u56e0\u6050\u60e7\u800c\u84ec\u52c3\u53d1\u5c55\u3002\u5173\u4e8e\u6124\u6012\u7684\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6bcf\u6b21 CNN \u8bf4\u201cDelta \u53d8\u4f53\u201d\u65f6\uff0c\u5b83\u90fd\u662f\u201c\u9ad8\u5ea6\u4f20\u67d3\u6027\u7684\u201d\u800c\u4e0d\u662f\u201c\u4e0d\u90a3\u4e48\u81f4\u547d\u201d\u3002\u5982\u679c\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u82f1\u56fd\uff08\u4ee5\u53ca\u5176\u4ed6\uff09\u6700\u8fd1\u7684\u6570\u636e\u8868\u660e Delta \u53d8\u4f53\u7684\u6b7b\u4ea1\u7387\u751a\u81f3\u4f4e\u4e8e\u5df2\u7ecf\u5f88\u4f4e\u7684 Alpha \u53d8\u4f53\uff0c\u4e0e\u5b63\u8282\u6027\u6d41\u611f\u57fa\u672c\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u80fd\u4f1a\u51b7\u9759\u4e0b\u6765\u3002\u6211\u4eec\u4e0d\u80fd\u6709\u90a3\u4e2a\u3002\u79fb\u52a8\u76ee\u6807\uff1a\u5728\u5927\u7ea6 18 \u4e2a\u6708\u5185\u4f7f\u66f2\u7ebf\u53d8\u5e73\u7684 15 \u5929\u53d8\u6210\u4e86#NoJabNoJob\u3002\u5982\u679c\u60a8\u5b8c\u5168\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u60a8\u4ecd\u7136\u5e94\u8be5\u6234\u4e0a\u53e3\u7f69\uff0c\u5a92\u4f53\u5df2\u7ecf\u51b3\u5b9a\u79cb\u5b63\u5c06\u53d1\u751f\u7b2c\u56db\u6ce2\u75ab\u60c5\uff0c\u771f\u6b63\u5177\u6709\u524d\u77bb\u6027\u7684\u601d\u60f3\u5bb6\u6b63\u5728\u4e3a\u6211\u4eec\u51c6\u5907\u597d\u5e94\u5bf9\u6c14\u5019\u5c01\u9501\u3002 \u201c\u6211\u4eec\u90fd\u5728\u4e00\u8d77\u201d\u53d8\u6210\u4e86\u82cf\u65af\u535a\u58eb\u5173\u4e8e\u65af\u5185\u5947\u7684\u6545\u4e8b\u3002\u6b64\u5916\uff0c\u82cf\u65af\u535a\u58eb\u88ab\u53d6\u6d88\u4e86\u3002\u6709\u4e9b\u4eba\u8ba4\u4e3a\u8fd9\u4e00\u5207\u90fd\u6ca1\u6709\u4e3b\u89c2\u6027\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6b63\u5982 Jack Conte \u6240\u505a\u7684\u90a3\u6837\uff0c\u5b58\u5728\u72ec\u7acb\u7684\u5ba2\u89c2\u771f\u7406\uff0c\u4f8b\u5982 Manifest Observable Behaviour\u3002\u6d88\u9664\u7ec6\u5fae\u5dee\u522b\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u76f8\u4e92\u77db\u76fe\u7684\u6570\u636e\u7684\u9886\u57df\u3002\u601d\u60f3\u6b63\u786e\u7684\u4eba\u90fd\u7406\u89e3\u771f\u7406\uff0c\u53ea\u6709\u601d\u60f3\u9519\u8bef\u7684\u4eba\u624d\u4f1a\u8d28\u7591\u5b83\u3002\n\u60a8\u6b63\u5728\u52aa\u529b\u7406\u89e3\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4eba\u5bf9\u75ab\u82d7\u72b9\u8c6b\u4e0d\u51b3\u3002 \u201c\u8ba9\u6211\u5e2e\u52a9\u4f60\u201d\u5927\u7ebf\u7a0b\uff1a\u60f3\u8c61\u4f60\u662f\u4e00\u4e2a\u6b63\u5e38\u4eba\u3002\u8fd9\u4e00\u5e74\u662f 2016 \u5e74\u3002\u65e0\u8bba\u5bf9\u9519\uff0c\u4f60\u76f8\u4fe1\u4f60\u5728\u5a92\u4f53\u4e0a\u770b\u5230\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u5b83\u76f8\u5f53\u6709\u8bf4\u670d\u529b\u5730\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u666e\u901a\u516c\u4f17\u53ef\u80fd\u53ea\u662f\u611f\u5230\u56f0\u60d1\u3001\u4e0d\u4fe1\u4efb\u548c\u72b9\u8c6b\uff0c\u800c\u4e0d\u662f\u6210\u4e3a\u9053\u5fb7\u4e0a\u5815\u843d\u7684\u602a\u7269\u3002\u6b64\u5916\uff0c\u5b83\u7ec6\u81f4\u5730\u5217\u4e3e\u4e86\u5b98\u65b9\u7ecf\u5178\u7684\u591a\u4e2a\u652f\u67f1\uff0c\u7ed3\u679c\u8bc1\u660e\u662f\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a\u7f3a\u5c11\u66f4\u597d\u7684\u8bcd\uff08\u9664\u975e\u8be5\u8bcd\u662f\u201c\u8c0e\u8a00\u201d\uff09\u3002\u6211\u4eec\u770b\u5230\u798f\u5947\u5728\u6444\u50cf\u673a\u505c\u6b62\u8f6c\u52a8\u7684\u90a3\u4e00\u523b\u6458\u4e0b\u4e86\u4ed6\u7684\u9762\u5177\u3002\u6211\u4eec\u770b\u5230 AOC \u5750\u5728\u4e00\u7fa4\u76f8\u5f53\u4eb2\u5bc6\u7684\u4eba\u7fa4\u4e2d\uff0c\u4e3a\u4e86\u62cd\u7167\u7684\u660e\u786e\u76ee\u7684\u800c\u6234\u4e0a\uff0c\u7136\u540e\u53c8\u8131\u4e0b\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u901a\u8fc7 Mailchimp \u5411\u81ea\u5df1\u7684\u8ba2\u9605\u8005\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5927\u58f0\u60f3\u77e5\u9053\u9762\u5177\u662f\u5426\u53ea\u4e0d\u8fc7\u662f\u8868\u6f14\u5267\u9662\uff0c\u90a3\u4e48\u60a8\u5c06\u88ab\u5173\u95ed\u3002\u8fd9\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u9879\u5982\u4f55\u5efa\u7acb\u52a8\u5458\uff08\u636e\u79f0\uff09\u5b9e\u73b0\u7fa4\u4f53\u514d\u75ab\u6240\u9700\u7684\u6700\u540e 20% \u5230 30% \u6240\u9700\u7684\u53ef\u4fe1\u5ea6\u548c\u516c\u4f17\u4fe1\u4efb\uff1f\u5b83\u6ca1\u6709\u3002\u4ece\u4f0a\u62c9\u514b\u7684\u5927\u89c4\u6a21\u6740\u4f24\u6027\u6b66\u5668\u6210\u4e3a\u201c\u8d2b\u6c11\u7a9f\u201d\u5230\u201c\u6b21\u8d37\u88ab\u904f\u5236\u201d\u5230\u201c\u51cf\u4ea7\u5c31\u50cf\u770b\u7740\u6cb9\u6f06\u53d8\u5e72\u201d\uff0c\u4efb\u4f55\u5728\u8fc7\u53bb 20 \u5e74\u91cc\u4e00\u76f4\u8ddf\u8e2a\u4e13\u5bb6\u5f53\u5c40\u8bb0\u5f55\u7684\u4eba\u90fd\u6709\u5408\u7406\u7684\u7406\u7531\u76f8\u4fe1\u4e13\u5bb6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u3002\u81f3\u5c11\u6ca1\u6709\u4efb\u4f55\u9884\u6d4b\u4ef7\u503c\u3002\u6211\u4e66\u4e2d\u7684\u53e6\u4e00\u7ae0\u63d0\u51fa\u4e86\u201c\u53bb\u5e73\u53f0\u5316\u662f\u5426\u6709\u6548\uff1f\u201d\u8fd9\u4e2a\u95ee\u9898\u3002\u7b80\u77ed\u7684\u56de\u7b54\u662f\uff1a\u6ca1\u6709\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6750\u6599\u7684\u6291\u5236\u4f1a\u653e\u5927\u5b83\u3002\u5982\u679c\u4f60\u60f3\u51cf\u5c11\u5173\u4e8e COVID \u7684\u4e0d\u5408\u903b\u8f91\u7684\u9634\u8c0b\u8bba\uff0c\u8bf7\u505c\u6b62\u5bf9\u4efb\u4f55\u4e0d\u662f\u76f2\u76ee\u6a21\u4eff\u798f\u5947\u7684\u4eba\u8fdb\u884c\u53bb\u5e73\u53f0\u5316\u3002\n\u771f\u6b63\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5168\u793e\u4f1a\u7684\u6279\u5224\u6027\u601d\u7ef4\u901f\u6210\u8bfe\u7a0b\uff0c\u800c\u4e0d\u662f\u4e0d\u65ad\u5730\u88ab\u529d\u963b\u548c\u544a\u8bc9\u4e0d\u8981\u601d\u8003\u4ec0\u4e48\u3002\u8fbe\u6c83\u65af\u56e2\u961f\uff0c\u540e\u671f\u5168\u7403\u5316\u7684\u6839\u6df1\u8482\u56fa\u7684\u7cbe\u82f1\u4eec\u8ba4\u4e3a\u6211\u4eec\u6b63\u5728\u8d70\u5411\u4e00\u4e2a\u7531\u4e13\u5bb6\u6280\u672f\u5b98\u50da\u7ba1\u7406\u7684\u4e16\u754c\u3002\u4f46\u4ed6\u4eec\u5e76\u6ca1\u6709\u53d6\u5f97\u4e00\u7cfb\u5217\u6210\u529f\uff0c\u800c\u4e14\u8fd9\u79cd\u516c\u5171\u653f\u7b56\u65b9\u6cd5\u53ef\u4ee5\u8bf4\u6ca1\u6709\u901a\u8fc7\u6700\u91cd\u8981\u7684\u8003\u9a8c\u3002\u6211\u4eec\u6b63\u671d\u7740\u4e00\u4e2a\u7531\u5f00\u6e90\u534f\u8bae\u548c\u667a\u80fd\u5408\u7ea6\u6240\u8868\u8fbe\u7684\u5171\u8bc6\u6cbb\u7406\u7684\u53bb\u4e2d\u5fc3\u5316\u4e16\u754c\u8fc8\u8fdb\u3002\u8fd9\u573a\u6218\u6597\u4e0d\u662f\u5173\u4e8e\u5de6\u6d3e\u4e0e\u53f3\u6d3e\u3001\u4fdd\u5b88\u6d3e\u4e0e\u81ea\u7531\u6d3e\u7684\u6597\u4e89\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u65b9\u90fd\u4f1a\u8ba9\u4f60\u76f8\u4fe1\u5185\u5bb9\u5b8c\u5168\u5206\u4e3a\u771f\u76f8\u548c\u9519\u8bef\u4fe1\u606f\u3002\u672a\u6765 20 \u5e74\u7684\u51b3\u5b9a\u6027\u5f20\u529b\u5c06\u5728\u6743\u529b\u4e0b\u653e\u4e0e\u5b98\u50da\u4e3b\u4e49\u3001\u5e73\u53f0\u4e0e\u534f\u8bae\u4ee5\u53ca\u6c11\u65cf\u56fd\u5bb6\u4e0e\u7f51\u7edc\u4e4b\u95f4\u3002\u81f3\u4e8e\u4eca\u5929\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f00\u573a\u767d\uff1f\u585e\u9ea6\u5c14\u7ef4\u65af\u8fc7\u7740\u60b2\u60e8\u7684\u751f\u6d3b\u3002\u8bf4\u670d\u5f53\u65f6\u7684\u533b\u7597\u673a\u6784\u5728\u8fdb\u884c\u5c38\u68c0\u540e\u548c\u5206\u5a29\u524d\u6d17\u624b\u53ef\u4ee5\u9632\u6b62\u201c\u5c38\u4f53\u9897\u7c92\u201d\u4ece\u5c38\u4f53\u4f20\u64ad\u5230\u6bcd\u4eb2\u548c\u65b0\u751f\u513f\u7684\u6597\u4e89\u88ab\u89c6\u4e3a\u5984\u60f3\u3002\u5f53\u7136\uff0c\u7f8e\u8054\u793e\u4f1a\u5c06\u5176\u201c\u4e8b\u5b9e\u68c0\u67e5\u201d\u4e3a\u5047\u3002 Politifact \u4f1a\u8bc4\u4ef7\u5b83\u201c\u7740\u706b\u7684\u88e4\u5b50\u201d\u3002\u6bd5\u7adf\uff0c\u6ca1\u6709\u7ec6\u83cc\u8fd9\u6837\u7684\u4e1c\u897f\u662f\u786e\u5b9a\u7684\u79d1\u5b66\u3002\u8511\u89c6\u548c\u5996\u9b54\u5316\u7684\u538b\u529b\u8ba9\u585e\u6885\u5c14\u7ef4\u65af\u5931\u53bb\u4e86\u5f88\u591a\u3002\u81ea 1857 \u5e74\u5f00\u59cb\u4ed6\u7684\u5199\u4f5c\u6d3b\u52a8\u4ee5\u5ba3\u4f20\u4ed6\u7684\u7406\u8bba\u76f4\u5230 1860 \u5e74\u4ed6\u7684\u300a\u75c5\u56e0\u5b66\u300b\u51fa\u7248\u4ee5\u6765\uff0c\u4ed6\u663e\u7136\u5728\u77ed\u77ed\u4e09\u5e74\u5185\u5c31\u8001\u4e86\u51e0\u5341\u5c81\u3002\u4ed6\u5b64\u72ec\u5730\u6b7b\u53bb\uff0c\u803b\u8fb1\u5730\u6b7b\u53bb\uff0c\u88ab\u4ed6\u7684\u533b\u5b66\u540c\u884c\u9001\u8fdb\u4e86\u7cbe\u795e\u75c5\u9662\u3002 Mark E. Jeftovic \u662f\u591a\u4f26\u591a\u7f51\u7edc\u670d\u52a1\u516c\u53f8easyDNS \u7684\u9996\u5e2d\u6267\u884c\u5b98\u3002\u8981\u5728\u60a8\u7684\u90ae\u7bb1\u4e2d\u63a5\u6536\u672a\u6765\u7684\u5e16\u5b50\uff0c\u8bf7\u52a0\u5165\u514d\u8d39\u7684 Bombthrower \u90ae\u4ef6\u5217\u8868\u3002\u8981\u5bf9\u51c6\u5907\u968f\u7740\u52a0\u5bc6\u6280\u672f\u7ee7\u7eed\u4e0a\u6da8\u800c\u5927\u83b7\u5168\u80dc\u7684\u516c\u53f8\u548c\u80a1\u7968\u8fdb\u884c\u4f18\u8d28\u7814\u7a76\uff0c\u8bf7\u5c1d\u8bd5\u6211\u4eec\u7684\u52a0\u5bc6\u8d27\u5e01\u8d44\u672c\u5bb6\u6295\u8d44\u7ec4\u5408\u8bd5\u7528\u4f18\u60e0\u3002", "note_en": "\u201cWhoever practices this prophylaxis will experience the pleasure, not from time to time to lose every third or fourth patient from puerperal fever, but perhaps lose only one in four hundred\u201d\n My friend  Doug McKenty, who does  The Shift podcast was just suspended by Mailchimp. He\u2019s been getting more vocal about what he calls healthcare freedom (read: vaccine passports), and something about that coloured outside the lines.\n Mailchimp, an email list provider, is known for doing this. You effectively pay Mailchimp to curate what you can or cannot say to your own email subscribers.\u00a0 You\u2019re using their mailservers, and in their mind that\u2019s what gives them the right and the moral authority to monitor  the content of your communications to your own audience.\n In my book  Unassailable: Protect Yourself From Deplatform Attacks, Cancel Culture and other Online Disasters (the e-book version has been  available for free for some time now) I devote an entire chapter to the machinations of the Big Tech and how they overstep the bounds of rationality when it comes to deciding what is within their purview and what isn\u2019t, or shouldn\u2019t be.\n No tech company should be enforcing their Terms of Service based on what they\u00a0 think their users have done or  might do off of their own platforms. Yet Twitter, Facebook, Patreon and who knows who else do that.\n A mailer company like Mailchimp has no business even parsing the content of their paying clients, let alone summarily judging whether it is misinformation or not. Mail providers should care about two things and two things only:\n  That\u2019s it. Beyond that it really isn\u2019t their business and it\u2019s the height of grandiosity and hubris to think that it is.\n Patreon\u2019s CEO Jack Conte  describes how their Trust and Safety Team remove all subjective elements from the decision to demonetize somebody\u2019s content by evaluating them based on \u201cManifest Observable Behaviour\u201d:\n \u201cManifest observable behavior is to remove personal values and beliefs when the team is reviewing content. It\u2019s a review method that\u2019s  entirely based on observable facts:  what has a camera seen,  what has an audio device recorded. It doesn\u2019t matter what your intentions are, your motivations, who you are, your identity, your ideology. The trust and safety team only looks at Manifest Observable Behaviour. We get rigorous and specific because we\u2019re talking about removing a person\u2019s income. The authority to take away a human being\u2019s income is a sobering responsibility. It is not something to be done on a whim.\u201d\n What does this process resemble? It actually sounds a lot like a legal proceeding, albeit one that\u2019s entirely one-sided, devoid of any semblance of due process or legal protection under the law, and probably carried out by teams of purple-haired Millennials with nose hoops and personal pronoun mood-rings.\n When tech companies take it upon themselves to arbitrate what is or isn\u2019t misinformation, or taking action based on events that occur outside of their own platforms what they are doing, at its core, is adjudicating international law. Do you really want your domain registrar or your web host doing that?\n These companies think they\u2019re the patricians of internet discourse. The reality is they\u2019re the plumbing.\n  \u201cFact Checks\u201d are another entirely subjective catch phrase dolled up to look like objective truth. These days a fact check is more likely to be a logical fallacy and the reality is, most people don\u2019t even know what logical fallacies  are.\n When the  Associated Press \u201cfact checked\u201d US Senate testimony on the efficacy of Ivermectin claiming  \u201cthere is no evidence that Ivermectin is a \u2018miracle drug\u2019 against COVID\u201d\u00a0and they labeled it  false, they committed a logical fallacy called \u201cappeal to ignorance\u201d (absence of evidence is not evidence of absence).\n The vast majority of all media narrative around COVID-19, on masks, lockdowns, Ivermectin, HCQ and yes, vaccines, can be categorized into  five logical fallacies:\n Appeal to Authority: whatever experts and unaccountable technocrats say is objectively true. If you disagree with the experts you are disputing science itself (even the ones who were neck deep in funding the gain-of-function research that quite possibly led to the lab release that caused the pandemic).\n Bandwagon: Because everybody else believes something, you have a moral obligation to believe it too. Anything you\u2019ve come across or read that contradicts what everybody else believes to be true is \u201cmisinformation\u201d.\n Ad Hominem: is not an argument at all, it\u2019s an attack. \u201cCovidiots\u201d, \u201cDeniers\u201d these are not rational counter-arguments, they\u2019re slurs. Anybody employing them is not\u00a0 engaging in discourse but rather bigotry and prejudice. This is as inexcusable as racism. Over the past few years many have been challenged to examine their own biases and privilege, in certain contexts for perfectly valid reasons. Anybody engaging in this type of othering toward skeptics and contrarians lacks self-awareness and empathy to the same degree as a racist.\n Appeal To Emotion: Corporate media thrives on fear. Social media platforms on anger. It\u2019s why every time CNN says \u201cDelta variant\u201d it is \u201chighly contagious\u201d instead of \u201cless fatal\u201d. If everybody knew that  recent data out of the UK (among others) indicates the Delta variant has a fatality rate that\u2019s even lower than the already quite low Alpha variant, basically the same as seasonal flu, then they may just calm down. And we can\u2019t have that.\n Moving the Goalposts: 15-days to flatten the curve became #NoJabNoJob in about 18 months. You\u2019re still supposed to wear a mask if you\u2019re fully vaccinated, the media has already decided that a fourth wave will occur in the fall and the really forward looking thinkers are gearing us up for climate lockdowns.\u00a0 \u201cWe\u2019re all in this together\u201d turned into that Dr. Seuss story about the Sneeches. Also, Dr Seuss got canceled.\n    There are those that believe there is no subjectivity involved in any of this. They think, as Jack Conte does, that there are standalone objective truths, like Manifest Observable Behaviour. Realms where nuance, uncertainty and conflicting data are banished. All right thinking people grok The Truth and only wrong thinking people dispute it.\n  You\u2019re struggling to understand why some people are vaccine hesitant. The \u201clet me help you\u201d megathread:\n Imagine you\u2019re a normal person. The year is 2016. Rightly or wrongly, you believe most of what you see in the media.\n   It lays out the case, fairly cogently, why the general public may just simply be confused, distrustful and hesitant as opposed to being morally reprobate monsters. Further, it enumerates, in painstaking detail, multiple pillars of official canon which turned out to be, misinformation, for lack of a better word (unless that word is  \u201clies\u201d).\n We see Fauci removing his mask the moment the cameras stop rolling. We see AOC sitting amongst a fairly close knit crowd put one on for the express purpose of a photo op and then take it off again. But if you send an email to your own subscribers via Mailchimp wondering out loud if masks are nothing more than performative theatre, you\u2019ll get shut down.\n How does any of this establish the credibility and public trust required to mobilize that last 20% to 30% needed to (purportedly) achieve herd immunity? It doesn\u2019t.\n From WMD in Iraq being a \u201cslum dunk\u201d through \u201cSubprime is Contained\u201d to \u201cTapering will be like watching paint dry\u201d, anybody who has actually been keeping track of the expert authorities track records  over the past 20 years has legitimate reason to believe that experts don\u2019t know anything. At least nothing of  predictive\u00a0value.\n Another chapter in  my book asks the question \u2018Does Deplatforming Even Work?\u2019 Short answer is: it doesn\u2019t. Over the long haul suppression of material amplifies it. If you want fewer unhinged conspiracy theories circulating about COVID, stop deplatforming anybody who isn\u2019t mindlessly parroting Fauci.\n What is really needed is a society-wide  crash course in critical thinking, and not to be incessantly hectored and told what  not\u00a0to think. The Davos crew, the entrenched elites of late stage globalism think we\u2019re headed toward a world managed by expert technocrats. But they haven\u2019t exactly put up a string of successes and this approach to public policy has arguably failed its most important test.\n We\u2019re headed toward a decentralized world governed by consensus as expressed through open source protocols and smart contracts. The battle is not about left vs right, conservative vs liberal where either side would have you believe that content cleanly bisects into Truth and Misinformation. The defining tension of the next 20 years will between decentralization vs bureaucracy, platforms vs protocols and nation states vs networks.\n As for the opening quote of today\u2019s piece? Semmelweis lived a tragic life. The  battle to convince the medical establishment of his day that  washing ones hands\u00a0 after performing an autopsy and before delivering a baby would prevent the spread of\u00a0 \u201ccadaverous particles\u201d from corpses to mothers and newborns was seen as delusional. Surely AP would have \u201cfact checked\u201d it as  false. Politifact would have rated it  \u201cpants on fire\u201d. After all, that there was no such thing as\u00a0 germs\u00a0was settled science.\n The stress of the scorn and demonization took a lot out of Semmelweis. He apparently aged the equivalent of decades in just three years since he commenced his writing campaign in 1857 promoting his theories until the publication of his Aetiology in 1860.\n  He died alone and in ignominy, having been committed to a mental institution by his medical peers.\n Mark E. Jeftovic is the CEO of the Toronto-based web services company  easyDNS. To receive future posts in your mailbox   join the free Bombthrower mailing list. To get premium research on companies and stocks that are poised to win big as crypto continues its ascent, try our\u00a0Crypto Capitalist Portfolio   trial offer.", "posttime": "2021-08-09 00:53:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bdd\u8bed,tech", "title": "\u5927\u79d1\u6280\u5e94\u8be5\u662f\u6c34\u7ba1\u5de5\uff0c\u800c\u4e0d\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf", "title_en": "Big Tech are supposed to be the plumbers, not patricians of internet discourse", "transed": 1, "url": "https://bombthrower.com/articles/when-dissent-is-misinformation-fallacies-become-facts/", "via": "", "real_tags": ["\u8bdd\u8bed", "tech"]}, {"category": "", "categoryclass": "", "imagename": "422f21ae7c1e866e7ca490d10b867485.jpeg", "infoid": 1072136, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u4f18\u6b65\u79d1\u6280\u516c\u53f8\u4e3a\u89e3\u51b3\u7531\u5927\u6d41\u884c\u5bfc\u81f4\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u95ee\u9898\u6295\u5165\u5de8\u8d44\u540e\uff0c\u53f8\u673a\u4eec\u91cd\u8fd4\u4f18\u6b65\u79d1\u6280\u516c\u53f8 UBER 2.81% \u548c Lyft LYFT 0.04%\u3002\u65b0\u6570\u636e\u663e\u793a\uff0c\u8fd9\u79cd\u8f6c\u53d8\u5e76\u672a\u5c06\u7968\u4ef7\u4ece\u5386\u53f2\u9ad8\u4f4d\u62c9\u4f4e\u3002\u6839\u636e\u5e02\u573a\u7814\u7a76\u516c\u53f8\u4e50\u5929\u60c5\u62a5\u7684\u6570\u636e\uff0c\u4f18\u6b65\u548c Lyft \u5728\u7f8e\u56fd\u7684\u5e73\u5747\u7968\u4ef7\u4ece 2 \u6708\u5230 7 \u6708\u9010\u6708\u4e0a\u6da8\uff0c\u6bcf\u6b21\u90fd\u521b\u4e0b\u65b0\u9ad8\u3002\u4e07\u6d88\u8d39\u8005\u3002\u867d\u7136 7 \u6708\u4efd\u7684\u5e73\u5747\u7968\u4ef7\u6bd4 6 \u6708\u4efd\u7565\u6709\u4e0a\u5347\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u4e0e\u5927\u6d41\u884c\u4e4b\u524d\u7684 2020 \u5e74 1 \u6708\u76f8\u6bd4\uff0c\u6d88\u8d39\u8005\u4e0a\u4e2a\u6708\u7684\u4e58\u8f66\u8d39\u7528\u589e\u52a0\u4e86 50% \u4ee5\u4e0a\u3002\u636e\u4e50\u5929\u79f0\uff0c\u8fd9\u662f\u81f3\u5c11\u4e09\u5e74\u6765\u7f8e\u56fd\u4eba\u4e3a\u4f18\u6b65\u548c Lyft \u652f\u4ed8\u7684\u8d39\u7528\u6700\u9ad8\u7684\u4e00\u6b21\u3002\u5c3d\u7ba1\u6700\u8fd1\u6709\u53f8\u673a\u6d8c\u5165\uff0c\u4f46\u516c\u53f8\u79f0\u8fd9\u662f\u7531\u6301\u7eed\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u63a8\u52a8\u7684\u5929\u4ef7\u3002\u4f18\u6b65\u5468\u4e09\u8868\u793a\uff0c\u4e0e\u524d\u4e00\u4e2a\u6708\u76f8\u6bd4\uff0c7 \u6708\u4efd\u6ce8\u518c\u7684\u53f8\u673a\u589e\u52a0\u4e86 30%\u3002 Lyft \u5468\u4e8c\u8868\u793a\uff0c\u4e0e\u524d\u4e09\u4e2a\u6708\u76f8\u6bd4\uff0c\u622a\u81f3 6 \u6708\u7684\u4e09\u4e2a\u6708\u671f\u95f4\u6ce8\u518c\u7684\u53f8\u673a\u589e\u52a0\u4e86 50%\u3002 \u201c\u6570\u636e\u5f88\u6e05\u695a\uff1a\u53f8\u673a\u4f9b\u5e94\u6ca1\u6709\u8ddf\u4e0a\u4e58\u5ba2\u9700\u6c42\u6fc0\u589e\u7684\u6b65\u4f10\uff0c\u5bfc\u81f4\u62fc\u8f66\u5e02\u573a\u5931\u53bb\u5e73\u8861\uff0c\u201dLyft \u53d1\u8a00\u4eba\u8868\u793a\uff0c\u5e76\u8865\u5145\u8bf4\u516c\u53f8\u5c06\u7ee7\u7eed\u6295\u8d44\u53f8\u673a\u6fc0\u52b1\u63aa\u65bd\uff0c\u4ee5\u7f13\u89e3\u77ed\u7f3a\u3002\u98d9\u5347\u7684\u4ef7\u683c\u5e76\u6ca1\u6709\u6291\u5236\u9884\u8ba2\uff0c\u8fd9\u53cd\u6620\u4e86\u53bb\u5e74\u5e7f\u6cdb\u7684\u5c01\u9501\u4f7f\u8bb8\u591a\u4eba\u7559\u5728\u5bb6\u4e2d\u540e\uff0c\u6d88\u8d39\u8005\u5bf9\u9ad8\u4ef7\u7684\u5bb9\u5fcd\u5ea6\u3002\u4f18\u6b65\u548c Lyft \u7684\u4e58\u8f66\u4e1a\u52a1\u5728\u7b2c\u4e8c\u5b63\u5ea6\u4ece\u53bb\u5e74\u7684\u4f4e\u70b9\u53cd\u5f39\uff0c\u7231\u8fea\u751f\u8d8b\u52bf\u7684\u6570\u636e\u663e\u793a\uff0c\u622a\u81f3 7 \u6708 19 \u65e5\u7684\u4e00\u5468\uff0c\u6d88\u8d39\u8005\u5728\u53eb\u8f66\u4e0a\u7684\u652f\u51fa\u4e0e\u53bb\u5e74\u540c\u671f\u76f8\u6bd4\u4ecd\u7136\u8f83\u9ad8\u3002\u52a0\u62ff\u5927\u7687\u5bb6\u94f6\u884c\u8d44\u672c\u5e02\u573a (RBC Capital Markets) \u5206\u6790\u5e08\u5e03\u62c9\u5fb7\u00b7\u57c3\u91cc\u514b\u68ee (Brad Erickson) \u8868\u793a\uff0cCovid-19 Delta \u53d8\u4f53\u201c\u53ef\u80fd\u4f1a\u518d\u6b21\u4f24\u5bb3\u4e00\u5207\uff0c\u4f46\u8fd9\u6b21\u53cd\u5f39\u7684\u901f\u5ea6\u4f1a\u5feb\u5f97\u591a\u201d\u3002 \u201c\u9884\u8ba2\u91cf\u4e0d\u4f1a\u4e0b\u964d 90%\u3002\u5b83\u4e0d\u4f1a\u63a5\u8fd1\u53bb\u5e74\u7684\u89c4\u6a21\uff0c\u201d\u4ed6\u8bf4\u3002\n\u4e24\u5bb6\u516c\u53f8\u90fd\u6ca1\u6709\u516c\u5f00\u62ab\u9732\u8fd1\u51e0\u4e2a\u6708\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u4e58\u8f66\u4ef7\u683c\u8868\u73b0\u3002\u4ed6\u4eec\u4e5f\u6ca1\u6709\u8bf4\u660e\u8fd8\u9700\u8981\u591a\u5c11\u53f8\u673a\u624d\u80fd\u6ee1\u8db3\u9700\u6c42\u3002\u4f46\u4f18\u6b65\u672c\u5468\u8868\u793a\uff0c\u5728\u5df2\u7ecf\u7ed3\u675f\u5931\u4e1a\u6551\u6d4e\u7684\u57ce\u5e02\u6216\u5dde\uff0c\u4ef7\u683c\u6b63\u5728\u6062\u590d\u5230\u75ab\u60c5\u524d\u7684\u6c34\u5e73\u3002\u9ad8\u7ba1\u4eec\u8868\u793a\uff0c\u8fd9\u79cd\u8f6c\u53d8\u4fc3\u4f7f\u66f4\u591a\u7684\u53f8\u673a\u5728\u8fc8\u963f\u5bc6\u3001\u4e9a\u7279\u5170\u5927\u548c\u4f11\u65af\u987f\u7b49\u57ce\u5e02\u4e3a\u4f18\u6b65\u5de5\u4f5c\uff0c\u7f13\u89e3\u4e86\u6301\u7eed\u7684\u52b3\u52a8\u529b\u77ed\u7f3a\u5e76\u6291\u5236\u4e86\u9ad8\u4ef7\u3002\u5728\u7ebd\u7ea6\u3001\u65e7\u91d1\u5c71\u548c\u6d1b\u6749\u77f6\u2014\u2014\u4f18\u6b65\u6700\u5927\u7684\u56fd\u5185\u5e02\u573a\u2014\u2014\u201c\u9700\u6c42\u7ee7\u7eed\u8d85\u8fc7\u4f9b\u5e94\uff0c\u4ef7\u683c\u548c\u7b49\u5f85\u65f6\u95f4\u4ecd\u9ad8\u4e8e\u6211\u4eec\u7684\u8212\u9002\u6c34\u5e73\uff0c\u201d\u9996\u5e2d\u6267\u884c\u5b98\u8fbe\u62c9\u00b7\u79d1\u65af\u7f57\u8428\u897f\u5468\u4e09\u5728\u516c\u53f8\u516c\u5e03\u5b63\u5ea6\u4e1a\u7ee9\u540e\u544a\u8bc9\u5206\u6790\u5e08\u3002\u4f18\u6b65\u53d1\u8a00\u4eba\u91cd\u7533\uff0c\u60c5\u51b5\u56e0\u57ce\u5e02\u800c\u5f02\u3002\u4ed6\u8bf4\uff0c\u5728\u4e00\u4e9b\u5730\u65b9\uff0c\u4ef7\u683c\u6b63\u9010\u6e10\u63a5\u8fd1\u5927\u6d41\u884c\u524d\u7684\u6c34\u5e73\uff0c\u800c\u5728\u53e6\u4e00\u4e9b\u5730\u65b9\uff0c\u4ef7\u683c\u7ee7\u7eed\u4fdd\u6301\u9ad8\u4f4d\u3002\u65e9\u671f\u8ff9\u8c61\u8868\u660e\uff0c\u968f\u7740 Lyft \u7ee7\u7eed\u5411\u53f8\u673a\u63d0\u4f9b\u5956\u91d1\u4ee5\u53ca\u5176\u4ed6\u5dde\u9010\u6b65\u53d6\u6d88\u5931\u4e1a\u6551\u6d4e\uff0c\u53f8\u673a\u77ed\u7f3a\u548c\u9ad8\u4ef7\u5c06\u5728\u4e0b\u4e2a\u6708\u672c\u5b63\u5ea6\u672b\u6d88\u9000\u3002\u4f18\u6b65\u8868\u793a\uff0c\u5b83\u5728 6 \u6708\u4efd\u8c03\u67e5\u7684 90,000 \u540d\u975e\u6d3b\u8dc3\u53f8\u673a\u4e2d\u6709 90% \u8868\u793a\u4ed6\u4eec\u8ba1\u5212\u5728 9 \u6708\u4e4b\u524d\u8fd4\u56de\u3002\u4f18\u6b65\u548c Lyft \u5728\u53f8\u673a\u6fc0\u52b1\u65b9\u9762\u7684\u652f\u51fa\u589e\u52a0\uff0c\u518d\u52a0\u4e0a\u5373\u5c06\u5230\u6765\u7684 Delta \u53d8\u4f53\u7684\u4e0d\u786e\u5b9a\u6027\uff0c\u5bfc\u81f4\u5b83\u4eec\u7684\u80a1\u7968\u5728\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u66b4\u8dcc\uff0c\u5c3d\u7ba1\u5b83\u4eec\u8d85\u8fc7\u4e86\u5206\u6790\u5e08\u5bf9\u7b2c\u4e8c\u5b63\u5ea6\u9700\u6c42\u7684\u9884\u6d4b\u3002\u4e24\u53ea\u80a1\u7968\u90fd\u4ece\u4e0a\u5468\u7684\u4f4e\u70b9\u56de\u5347\u3002\u52a0\u62ff\u5927\u7687\u5bb6\u94f6\u884c\u7684\u57c3\u91cc\u514b\u68ee\u5148\u751f\u8868\u793a\uff0c\u5728\u9700\u6c42\u9010\u6e10\u51cf\u5c11\u3001\u53f8\u673a\u518d\u6b21\u56de\u907f\u62fc\u8f66\u7684\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u201c\u8fd9\u5c06\u4f7f\u516c\u53f8\u521a\u521a\u5b8c\u6210\u7684\u5927\u91cf\u6295\u8d44\u53d8\u5f97\u65e0\u5173\u7d27\u8981\u201d\u3002\u4f18\u6b65\u548c Lyft \u6709\u80fd\u529b\u518d\u6b21\u6295\u5165\u8d44\u91d1\uff0c\u4f46\u8fd9\u5c06\u8f6c\u5316\u4e3a\u201c\u635f\u5931\u5927\u91cf\u8d44\u91d1\u201d\u3002 Lyft \u8868\u793a\uff0c\u5728\u7b2c\u4e8c\u5b63\u5ea6\u82b1\u8d39 5.72 \u4ebf\u7f8e\u5143\u540e\uff0c\u5176\u7b2c\u4e09\u5b63\u5ea6\u6536\u5165\u5c06\u53d7\u5230\u6253\u51fb\uff0c\u56e0\u4e3a\u5b83\u8ba1\u5212\u5728\u53f8\u673a\u6fc0\u52b1\u65b9\u9762\u6295\u5165\u66f4\u591a\u8d44\u91d1\u3002 Lyft \u9996\u5e2d\u8d22\u52a1\u5b98\u5e03\u8d56\u6069\u00b7\u7f57\u4f2f\u8328 (Brian Roberts) \u5468\u4e8c\u5bf9\u5206\u6790\u5e08\u8868\u793a\uff1a\u201c\u6211\u4eec\u5c06\u7ef4\u6301\u8f83\u9ad8\u7684\u4f9b\u5e94\u6295\u8d44\uff0c\u4ee5\u5e2e\u52a9\u964d\u4f4e\u4ef7\u683c\u3002\u201d\u7f57\u4f2f\u8328\u5148\u751f\u8bf4\uff0c\u4ed6\u8ba4\u4e3a\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u4ef7\u683c\u4e0d\u4f1a\u4fdd\u6301\u8fd9\u4e48\u9ad8\u3002\n\u4f18\u6b65\u5728\u7b2c\u4e8c\u5b63\u5ea6\u5728\u6fc0\u52b1\u63aa\u65bd\u4e0a\u7684\u652f\u51fa\u8d85\u8fc7\u4e86\u5206\u6790\u5e08\u7684\u9884\u671f\u3002\u8be5\u516c\u53f8\u8868\u793a\uff0c\u672c\u5b63\u5ea6\u4e0d\u6253\u7b97\u5728\u8fd9\u4e9b\u65b9\u9762\u6295\u5165\u66f4\u591a\u8d44\u91d1\uff0c\u56e0\u4e3a\u5c3d\u7ba1\u53d6\u6d88\u4e86\u6fc0\u52b1\u63aa\u65bd\uff0c\u4f46\u6700\u8fd1\u51e0\u5468\u5b83\u4e00\u76f4\u5728\u62db\u52df\u53f8\u673a\u3002\u60a8\u5982\u4f55\u5e94\u5bf9\u53f8\u673a\u77ed\u7f3a\u548c\u9ad8\u6602\u7684\u4ef7\u683c\uff1f\u52a0\u5165\u4e0b\u9762\u7684\u5bf9\u8bdd\u3002\u7531\u4e8e\u4f18\u6b65\u548c Lyft \u7740\u773c\u4e8e\u957f\u671f\u5229\u6da6\uff0c\u5206\u6790\u5e08\u8868\u793a\uff0c\u4e0e\u5927\u6d41\u884c\u524d\u7684\u6298\u6263\u7387\u76f8\u6bd4\uff0c\u6d88\u8d39\u8005\u5e94\u8be5\u671f\u671b\u4e3a\u6bcf\u6b21\u4e58\u8f66\u652f\u4ed8\u66f4\u591a\u8d39\u7528\u3002\u4f46\u5206\u6790\u5e08\u4e5f\u4e0d\u8ba4\u4e3a\u4ef7\u683c\u4f1a\u4fdd\u6301\u5728\u76ee\u524d\u7684\u9ad8\u5ea6\u3002\u7531\u4e8e\u6301\u7eed\u7684\u5956\u91d1\uff0c\u53f8\u673a\u7684\u6536\u5165\u521b\u4e0b\u5386\u53f2\u65b0\u9ad8\u3002\u4f18\u6b65\u8868\u793a\uff0c\u5176\u53f8\u673a\u5728\u5176\u6700\u7e41\u5fd9\u7684\u5e02\u573a\u6bcf\u5c0f\u65f6\u7684\u6536\u5165\u8d85\u8fc7 40 \u7f8e\u5143\u3002\u4f46\u662f\uff0c\u4e00\u65e6\u6fc0\u52b1\u63aa\u65bd\u6d88\u5931\uff0c\u8fd1\u671f\u7684\u6311\u6218\u662f\u7559\u4f4f\u4ed6\u4eec\u3002 Derrick Stanfield Kivoi \u5728\u8fc8\u963f\u5bc6\u7ecf\u8425\u7740\u4e00\u5bb6\u5c0f\u578b\u6570\u5b57\u8425\u9500\u4e1a\u52a1\uff0c\u5e76\u5728 Uber \u65c1\u8fb9\u9a7e\u9a76\u4e86\u51e0\u5e74\uff0c\u4ed6\u5728\u4e00\u5e74\u7684\u4e2d\u65ad\u540e\u4e8e\u4eca\u5e74\u518d\u6b21\u5f00\u8f66\uff0c\u56e0\u4e3a\u6fc0\u52b1\u63aa\u65bd\u592a\u597d\u4e86\uff0c\u65e0\u6cd5\u62d2\u7edd\u3002\u4ed6\u8bf4\uff0c\u4f18\u6b65\u4e3a\u4ed6\u63d0\u4f9b\u4e86 100 \u7f8e\u5143\u7684\u8fde\u7eed\u4e09\u8d9f\u884c\u7a0b\uff0c\u7136\u540e\u5728\u5de5\u4f5c\u65e5\u5b8c\u6210\u7684 40 \u8d9f\u884c\u7a0b\u4e2d\u83b7\u5f97 250 \u7f8e\u5143\u7684\u5956\u91d1\u3002\u6700\u8fd1\u51e0\u5468\u5956\u91d1\u9010\u6e10\u51cf\u5c11\u2014\u2014\u4f18\u6b65\u7684 250 \u7f8e\u5143\u5956\u91d1\u964d\u81f3 50 \u7f8e\u5143\u2014\u2014\u800c Kivoi \u5148\u751f\u5728\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u5173\u95ed\u4e86\u8be5\u5e94\u7528\u7a0b\u5e8f\u3002 \u201c\u4e00\u65e6\u6fc0\u52b1\u63aa\u65bd\u505c\u6b62\uff0c\u6211\u5c31\u4f1a\u505c\u6b62\uff0c\u201d\u4ed6\u8bf4\u3002\u4f18\u6b65\u548c Lyft \u6b63\u8bd5\u56fe\u89e3\u51b3\u96f6\u5de5\u52b3\u52a8\u529b\u4e0d\u65ad\u53d8\u5316\u7684\u95ee\u9898\u3002\u4f18\u6b65\u4e0a\u6708\u5e95\u5ba3\u5e03\u4e3a\u53f8\u673a\u63d0\u4f9b\u514d\u8d39\u5728\u7ebf\u8bed\u8a00\u8bfe\u7a0b\u3002\u5b83\u8fd8\u5f00\u59cb\u5411\u53f8\u673a\u663e\u793a\u4e58\u5ba2\u4e3a\u4e58\u8f66\u652f\u4ed8\u7684\u603b\u4f53\u8d39\u7528\uff0c\u800c\u4e0d\u662f\u53ea\u5411\u4ed6\u4eec\u663e\u793a\u7968\u4ef7\u90e8\u5206\u3002\nLyft \u4e0a\u4e2a\u6708\u8868\u793a\uff0c\u5b83\u6b63\u5728\u63a2\u7d22\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\uff0c\u4ee5\u524a\u51cf\u53f8\u673a\u6700\u5927\u7684\u5f00\u652f\u4e4b\u4e00\uff0c\u8fd9\u53ef\u80fd\u6d89\u53ca\u6c7d\u6cb9\u6216\u4fdd\u9669\u7684\u5927\u5e45\u6298\u6263\u6216\u5e2e\u52a9\u8d2d\u4e70\u8f66\u8f86\u3002", "note_en": "Drivers are returning to  Uber Technologies    UBER  2.81%  and  Lyft    LYFT  0.04%  after the companies  spent big on incentives to address a pandemic-driven labor shortage. That shift isn\u2019t bringing down fares from record highs, new data show.\n  The average Uber and Lyft fare in the U.S. rose month-to-month from February through July, touching new highs every time, according to data from Rakuten Intelligence, a market-research firm that based its analysis on e-receipts from more than one million consumers. While the average fare in July edged up slightly from June, it meant consumers paid over 50% more for a ride last month compared with January 2020, before the pandemic.\n  That\u2019s the most Americans have paid for Uber and Lyft rides in at least three years, according to Rakuten.\n  The sky-high prices, which the companies say are driven by the continuing labor shortage, come despite a recent influx of drivers. Uber said Wednesday that 30%  more drivers signed up in July compared with the month before. Lyft said Tuesday that 50% more drivers signed up in the three-month period that ended in June compared with the preceding three months.\n      \u201cThe data is clear: Driver supply has not kept pace with the surge of demand from riders, throwing the ride-share market out of balance,\u201d a Lyft spokeswoman said, adding that the company would continue to  invest in driver incentives to ease the shortage.\n    Soaring prices haven\u2019t crimped bookings, reflecting consumers\u2019 tolerance for high prices after widespread lockdowns kept many at home last year. Uber and Lyft\u2019s ride  business rebounded in the second quarter from the lows of last year, and data from Edison Trends show that consumer spending on ride-hailing remained elevated for the week ended July 19 compared with the same week a year earlier.\n  The Covid-19 Delta variant \u201cmight hurt everything again, but this time things will bounce back a lot faster,\u201d said Brad Erickson, an analyst at RBC Capital Markets who covers both companies. \u201cBookings aren\u2019t going to go down 90%. It\u2019s not going to be anywhere close to the magnitude of last year,\u201d he said.\n  Neither company has publicly disclosed how ride prices have fared nationwide in recent months. Nor have they said how many more drivers are needed to meet demand. But Uber said this week that prices were returning to pre-Covid levels in cities or states that had ended unemployment benefits. That shift pushed more drivers to work for Uber in cities like Miami, Atlanta and Houston, alleviating the continuing labor crunch and tempering high prices, executives said.\n  In New York, San Francisco and Los Angeles\u2014Uber\u2019s top domestic markets\u2014\u201cdemand continues to outplay supply, and prices and wait times remain above our comfort levels,\u201d Chief Executive Dara Khosrowshahi told analysts Wednesday after the company reported quarterly results.\n  An Uber spokesman reiterated that the situation varies city-by-city. In some, he said, prices are inching closer to pre-pandemic levels, while they continue to remain high in others.\n    Early signs point to the driver shortage and high prices abating at the end of the current quarter next month, as Lyft continues to offer bonuses to drivers and as other states phase out unemployment benefits. Uber said 90% of the 90,000 inactive drivers it surveyed in June indicated they planned to return by September.\n  Uber and Lyft\u2019s elevated spending on driver incentives, combined with the uncertainty around the looming Delta variant, sent their stocks tumbling earlier in the week even though they beat analysts\u2019 second-quarter demand projections. Both stocks recovered from their lows this past week.\n  In the extreme scenario that demand tapers off and drivers shun ride-share all over again, \u201cit will make a lot of this investment the companies have just done irrelevant,\u201d said RBC\u2019s Mr. Erickson. Uber and Lyft have the muscle to pump in the money again, but it\u2019ll translate to \u201ca lot of lost dollars.\u201d\n  Lyft said its third-quarter revenue would take a hit as it planned to spend more on driver incentives, after spending $572 million on them through the second quarter. \u201cWe are maintaining elevated supply investments to help lower prices,\u201d Lyft Chief Financial Officer Brian Roberts told analysts on Tuesday. Mr. Roberts said he didn\u2019t think prices would remain this high in the long run.\n  Uber spent more on incentives than analysts had expected in the second quarter. The company said it doesn\u2019t plan to spend significantly more on them in the current quarter because it has been acquiring drivers in recent weeks despite pulling back on incentives.\n  How are you responding to the driver shortages and high prices? Join the conversation below.\n  As Uber and Lyft eye long-term profits, analysts say consumers should expect to pay more per ride compared with the discounted rates before the pandemic. But analysts also don\u2019t think prices will stay at their current heights.\n  Drivers\u2019 earnings are at an all-time high, thanks to the continuing bonuses. Uber said its drivers are making more than $40 an hour in its busiest markets. But a near-term challenge is retaining them once the incentives go away.\n  Derrick Stanfield Kivoi, who runs a small digital marketing business in Miami and has driven for Uber on the side for several years, took to driving again this year after a year-long hiatus because the incentives were too good to turn down. Uber offered him $100 for three consecutive rides, he said, and then followed with a $250 bonus for 40 rides completed during the weekday.\n  The bonuses tapered off in recent weeks\u2014Uber\u2019s $250 bonus dropped to $50\u2014and Mr. Kivoi turned off the app earlier this week. \u201cAs soon as the incentives stop, I\u2019m stopping,\u201d he said.\n  Uber and Lyft are trying to address the shifting dynamics of gig labor. Uber announced free online language classes for drivers late last month. It also started showing drivers what passengers paid for a ride overall, instead of showing them only the fare portion.\n  Lyft said last month it was exploring a partnership to trim one of drivers\u2019 biggest expenses, which could involve sizable discounts on gas or insurance or help with buying vehicles.", "posttime": "2021-08-08 23:52:37", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "2020,\u7f8e\u56fd,\u4f18\u6b65,shows,\u53f8\u673a", "title": "\u5bf9\u8d85\u8fc7 100 \u4e07\u6d88\u8d39\u8005\u7684\u7535\u5b50\u6536\u636e\u7684\u5206\u6790\u8868\u660e\uff0c\u4e0e 2020 \u5e74 1 \u6708\u76f8\u6bd4\uff0c2021 \u5e74 7 \u6708\u7f8e\u56fd\u4f18\u6b65\u548c Lyft \u7684\u5e73\u5747\u7968\u4ef7\u9ad8\u51fa 50%", "title_en": "Analysis of e-receipts from 1M+ consumers shows that the average Uber and Lyft fares in the US were 50% higher in July 2021 compared with January 2020", "transed": 1, "url": "https://www.wsj.com/articles/uber-and-lyft-drivers-are-coming-back-but-prices-arent-falling-11628337601?mod=djemalertNEWS", "via": "", "real_tags": ["2020", "\u7f8e\u56fd", "\u4f18\u6b65", "shows", "\u53f8\u673a"]}]