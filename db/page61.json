[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073185, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5357\u4e54\u6cbb\u4e9a\u5dde\uff1b\u5357\u6851\u5a01\u5947\u7fa4\u5c9b\uff08\u82f1\u9551\uff09", "note_en": "South Georgia &amp; South Sandwich Islands  (GBP \u00a3)", "posttime": "2022-02-14 23:49:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u4e54\u6cbb\u4e9a\u5dde", "title": "Simula One\u2013Linux\u865a\u62df\u73b0\u5b9e\u8ba1\u7b97\u673a", "title_en": "Simula One \u2013 Linux VR Computer", "transed": 1, "url": "https://shop.simulavr.com/", "via": "", "real_tags": ["linux", "\u4e54\u6cbb\u4e9a\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073184, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "C\u8bed\u8a00\uff08C\uff0cC++\uff0cjava\uff09\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u662f\u51e0\u5341\u5e74\u6765\uff0c\u6ca1\u6709\u4ec0\u4e48\u6539\u53d8\u4e86\u4ed6\u4eec\u7684\u4e00\u4e9b\u63a7\u5236\u7ed3\u6784\u7684\u4e0d\u8db3\u4e4b\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0cFortran\u5df2\u7ecf\u8fdb\u5316\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u8ba9\u5b9e\u73b0\u4e00\u4e9b\u7b97\u6cd5\u66f4\u5bb9\u6613\u7684\u4e8b\u60c5\u3002\uff08\u662f\u7684\uff0cC\u8bed\u8a00\u4e2d\u6709\u4e00\u4e9b\u53d8\u901a\u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u6ca1\u6709\u90a3\u4e48\u4f18\u96c5\uff09\u3002\n\u5728\u7c7bC\u8bed\u8a00\u4e2d\uff0c\u4ece\u6df1\u5ea6\u5d4c\u5957\u7684\u5faa\u73af\u4e2d\u9000\u51fa\u5e76\u4e0d\u662f\u4e00\u4ef6\u5c0f\u4e8b\uff08\u4e0d\u4f7f\u7528goto\uff0c\u6240\u4ee5\u751a\u81f3\u4e0d\u8981\u53bb\u90a3\u91cc\uff09\u3002C\u4e2d\u7684break\u8bed\u53e5\u53ea\u5b58\u5728\u4e8e\u4e2d\u65ad\u6240\u5728\u7684\u5faa\u73af\u4e2d\u3002\u5982\u679c\u4e2d\u65ad\u51fa\u73b0\u5728\u5d4c\u5957\u5faa\u73af\u4e2d\uff0c\u5219\u4e2d\u65ad\u53ea\u4f1a\u79bb\u5f00\u5b83\u6240\u5728\u7684\u5faa\u73af\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2abreak\u8bed\u53e5\u53ef\u4ee5\u7a81\u7834\u591a\u4e2a\u5d4c\u5957\u7ea7\u522b\u3002\u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u5728C\u4e2d\uff1a\n\u7136\u800c\uff0cFortran\u5141\u8bb8\u547d\u540d\u5faa\u73af\uff0c\u56e0\u6b64\u9000\u51fa\u5d4c\u5957\u5faa\u73af\u4e0e\u547d\u540d\u8981\u9000\u51fa\u7684\u5faa\u73af\u4e00\u6837\u7b80\u5355\u3002\nC\u5728switch\u4e2d\u6ca1\u6709\u8303\u56f4\u2026\u597d\u5427\uff0c\u6240\u4ee5\u6709\u4e9b\u7f16\u8bd1\u5668\uff0c\u6bd4\u5982gnu C\uff0c\u63d0\u4f9b\u5b83\u4f5c\u4e3a\u6269\u5c55\uff0c\u4f46\u5b83\u4e0d\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002Fortran\u5141\u8bb8\u5b83\u4f5c\u4e3a\u6807\u51c6\u7684\u4e00\u90e8\u5206\u3002\n\u5982\u679c\u4f60\u5904\u7406\u6570\u7ec4\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u5728\u4e00\u79cd\u8bed\u8a00\u4e2d\u8fdb\u884c\u6570\u7ec4\u5207\u7247\u662f\u591a\u4e48\u91cd\u8981\u2014\u2014\u56e0\u4e3a\u5b83\u4f7f\u64cd\u4f5c\u6570\u7ec4\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5199\u5faa\u73af\u5462\uff1f\u4e0b\u9762\u662fFortran\u4e2d\u7684\u4e24\u4e2a\u6570\u7ec4\u58f0\u660e\u3002\n\u5f53\u4f7f\u7528\u4e0a\u9762\u7684\u5355\u4e2a\u8bed\u53e5\u6253\u5370\u65f6\uff0c2D\u4e2d\u7684\u6570\u7ec4\u53ef\u80fd\u4f1a\u5f88\u6df7\u4e71\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u5faa\u73af\u548c\u5207\u7247\uff0c\u4f7f\u4e8b\u60c5\u770b\u8d77\u6765\u66f4\u597d\u3002\u5faa\u73af\u63a7\u5236\u884c\uff0c\u5217\u90fd\u4f7f\u7528\u201c\uff1a\u201d\u7b26\u53f7\u5305\u542b\u3002\nFortran\u9ed8\u8ba4\u7d22\u5f15\u6570\u7ec4\u4e3a1\u3002\u4f46\u662f\uff0c\u60a8\u5e76\u4e0d\u5c40\u9650\u4e8e\u6b64\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u6570\u7ec4\u7684\u7d22\u5f15\u8303\u56f4\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\u4f7f\u8bed\u8a00\u66f4\u5bb9\u6613\u9002\u5e94\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u76f8\u53cd\u3002\n\u4e0d\u7ba1\u4eba\u4eec\u600e\u4e48\u8bf4\uff0c\u6302\u8d77else\u786e\u5b9e\u4f1a\u5728\u50cfC\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u5f15\u8d77\u95ee\u9898\u3002\u6240\u6709Fortran\u63a7\u5236\u7ed3\u6784\u90fd\u88ab\u7ec8\u6b62\u7684\u4e8b\u5b9e\u963b\u6b62\u4e86\u8fd9\u4e00\u70b9\u3002\u4e5f\u4e0d\u9700\u8981{and}\u6216\u7c7b\u4f3c\u7684\u7b26\u53f7\u6765\u8868\u793a\u63a7\u5236\u5757\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002\nFortran\u5f88\u9177\uff0c\u56e0\u4e3a\u5b83\u6613\u4e8e\u5b66\u4e60\uff0c\u5f88\u96be\u4ea7\u751f\u707e\u96be\u6027\u7684\u9519\u8bef\uff0c\u800c\u4e14\u5bf9\u4e8e\u6570\u503c\u8ba1\u7b97\u6765\u8bf4\uff0c\u53ef\u80fd\u6ca1\u6709\u66f4\u5feb\u7684\u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5b83\u53ef\u80fd\u7f3a\u4e4fC\u8bed\u8a00\u7684\u4e00\u4e9b\u4f4e\u7ea7\u529f\u80fd\uff0c\u4f46\u5e76\u975e\u6bcf\u79cd\u8bed\u8a00\u90fd\u5fc5\u987b\u5982\u6b64\u63a5\u8fd1\u7cfb\u7edf\u3002", "note_en": "C-like languages (C, C++, Java) can do many things, but over the decades nothing much has changed with the inadequacies of some of their control structures. Fortran on the other hand, has evolved. Here are some things that just make implementing some algorithms easier. (Yes there are work arounds in C, but they are not as elegant).\n  In C-like languages exiting from a deeply nested loop isn\u2019t exactly trivial (without the use of  goto, so don\u2019t even go there). A  break statement in C will only exist the loop the  break resides in. If the break appears inside a nested loop, the break only leaves the loop it is in. There is no single break statement in C that will break out of more than one level of nesting. It is possible to add an extra condition, for example in C:\n  Fortran however allows loops to be named, so exiting nested loops is as simple as naming the loop to be exited.\n   C doesn\u2019t do ranges in  switch\u2026 okay so some compilers, like gnu C offer it as an extension, but it\u2019s not part of the spec. Fortran allows it as part of the standard.\n   If you deal with arrays, you know how important it is to have array slicing in a language \u2013 because it makes manipulating arrays super easy. Why write loops when you don\u2019t have to? Here are two array declarations in Fortran.\n    Arrays in 2D can be messy when printed using the single statement above. It is possible to use a single loop, and slicing to make things look nicer. The loop controls the row, and the columns are all included using the \u201c:\u201d symbol.\n    Fortran by default indexes arrays at 1. But, you are not restricted to that, you can specify the index range of any array. Some examples are shown below:\n  Makes it much easier to bend a language to an algorithm, rather than the other way around.\n  Regardless of what people say, dangling  else does cause problems in languages like C. The fact that all Fortran control structures are terminated puts a stop to that. There is also no need for { and } or similar to signify the begin and end of a control block.\n  Fortran is cool because it is easy to learn, hard to make catastrophic errors with, and for numerical computation there is likely no faster language. Sure, it may lack some of the low-level features of C, but not every language has to be so close to the system.", "posttime": "2022-02-14 23:46:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,fortran,\u6570\u7ec4", "title": "\u4ec0\u4e48\u662fFortran\u8bed\u8a00\u6bd4C\u8bed\u8a00\u66f4\u597d", "title_en": "What Fortran does better than C-like languages", "transed": 1, "url": "https://craftofcoding.wordpress.com/2022/02/11/what-fortran-does-better-than-c-like-languages/", "via": "", "real_tags": ["\u8bed\u8a00", "fortran", "\u6570\u7ec4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Jump to navigation Jump to search Core War\u662f\u7531D.G.Jones\u548ca.K.Dewdney\u4e8e1984\u5e74\u5f00\u53d1\u7684\u4e00\u6b3e\u7f16\u7a0b\u6e38\u620f\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u6216\u591a\u4e2a\u4f5c\u6218\u7a0b\u5e8f\uff08\u79f0\u4e3a&#34\uff1b\u52c7\u58eb&#34\uff1b\uff09\u4e89\u593a\u865a\u62df\u8ba1\u7b97\u673a\u7684\u63a7\u5236\u6743\u3002\u8fd9\u4e9b\u4f5c\u6218\u7a0b\u5e8f\u662f\u7528\u4e00\u79cd\u53eb\u505aRedcode\u7684\u62bd\u8c61\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u3002\n\u5728\u6e38\u620f\u5f00\u59cb\u65f6\uff0c\u6bcf\u4e2a\u4f5c\u6218\u7a0b\u5e8f\u90fd\u88ab\u968f\u673a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u6bcf\u4e2a\u7a0b\u5e8f\u4f9d\u6b21\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002\u6e38\u620f\u7684\u76ee\u6807\u662f\u4f7f\u5bf9\u7acb\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u7ec8\u6b62\uff08\u5982\u679c\u5b83\u4eec\u6267\u884c\u65e0\u6548\u7684\u6307\u4ee4\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u8ba9\u83b7\u80dc\u7684\u7a0b\u5e8f\u5b8c\u5168\u638c\u63e1\u673a\u5668\u3002\n\u6700\u65e9\u53d1\u5e03\u7684\u7ea2\u7801\u7248\u672c\u53ea\u5b9a\u4e49\u4e86\u516b\u6761\u6307\u4ee4\u3002ICWS-86\u6807\u51c6\u5c06\u6570\u5b57\u589e\u52a0\u523010\uff0c\u800cICWS-88\u6807\u51c6\u5c06\u6570\u5b57\u589e\u52a0\u523011\u3002\u76ee\u524d\u4f7f\u7528\u76841994\u5e74\u6807\u51c6\u8349\u6848\u670916\u6761\u8bf4\u660e\u3002\u7136\u800c\uff0cRedcode\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u5bfb\u5740\u6a21\u5f0f\u548c\u6307\u4ee4\u4fee\u9970\u7b26\uff08\u4ece1994\u5e74\u7684\u6807\u51c6\u8349\u6848\u5f00\u59cb\uff09\uff0c\u8fd9\u4e9b\u4fee\u9970\u7b26\u5c06\u5b9e\u9645\u53ef\u80fd\u7684\u64cd\u4f5c\u6570\u589e\u52a0\u52307168\u3002Redcode\u6807\u51c6\u672a\u5b9a\u4e49\u5e95\u5c42\u6307\u4ee4\u8868\u793a\uff0c\u5e76\u4e14\u4e0d\u63d0\u4f9b\u7a0b\u5e8f\u8bbf\u95ee\u5b83\u7684\u65b9\u6cd5\u3002\u7b97\u672f\u8fd0\u7b97\u53ef\u4ee5\u5728\u6bcf\u6761\u6307\u4ee4\u4e2d\u5305\u542b\u7684\u4e24\u4e2a\u5730\u5740\u5b57\u6bb5\u4e0a\u8fdb\u884c\uff0c\u4f46\u6307\u4ee4\u4ee3\u7801\u672c\u8eab\u652f\u6301\u7684\u552f\u4e00\u64cd\u4f5c\u662f\u590d\u5236\u548c\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u3002\n\u6bcf\u4e2a\u7ea2\u7801\u6307\u4ee4\u53ea\u5360\u7528\u4e00\u4e2a\u5185\u5b58\u63d2\u69fd\uff0c\u6267\u884c\u5468\u671f\u6b63\u597d\u4e3a\u4e00\u4e2a\u5468\u671f\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u6307\u4ee4\u7684\u901f\u5ea6\u53d6\u51b3\u4e8e\u961f\u5217\u4e2d\u5176\u4ed6\u8fdb\u7a0b\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u5904\u7406\u65f6\u95f4\u662f\u5e73\u5747\u5206\u914d\u7684\u3002\n\u5185\u5b58\u4ee5\u4e00\u6761\u6307\u4ee4\u4e3a\u5355\u4f4d\u5bfb\u5740\u3002\u5185\u5b58\u7a7a\u95f4\uff08\u6216\u5185\u6838\uff09\u5927\u5c0f\u6709\u9650\uff0c\u4f46\u53ea\u4f7f\u7528\u76f8\u5bf9\u5bfb\u5740\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5730\u57400\u603b\u662f\u6307\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5730\u57401\u6307\u5b83\u540e\u9762\u7684\u6307\u4ee4\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6700\u5927\u5730\u5740\u503c\u8bbe\u7f6e\u4e3a\u6bd4\u5185\u5b58\u4f4d\u7f6e\u6570\u5c11\u4e00\u4e2a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u73af\u7ed5\u3002\u56e0\u6b64\uff0c\u5730\u5740\u548c\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f46\u7ea2\u7801\u7a0b\u5e8f\u4e0d\u53ef\u80fd\u786e\u5b9a\u4efb\u4f55\u7edd\u5bf9\u5730\u5740\u3002\u6ca1\u6709\u9047\u5230\u65e0\u6548\u6216\u8df3\u8f6c\u6307\u4ee4\u7684\u8fdb\u7a0b\u5c06\u7ee7\u7eed\u65e0\u4f11\u6b62\u5730\u6267\u884c\u8fde\u7eed\u7684\u6307\u4ee4\uff0c\u6700\u7ec8\u8fd4\u56de\u5230\u5b83\u5f00\u59cb\u7684\u6307\u4ee4\u3002\n\u7ea2\u7801\u6a21\u62df\u5668\u4e0d\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6307\u4ee4\u6307\u9488\uff0c\u800c\u662f\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u8fdb\u7a0b\u961f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u6a21\u62df\u5668\u5faa\u73af\u4f7f\u7528\u7684\u6570\u91cf\u53ef\u53d8\u7684\u6307\u4ee4\u6307\u9488\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528SPL\u6307\u4ee4\u5c06\u65b0\u8fdb\u7a0b\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884cDAT\u6307\u4ee4\u6216\u6267\u884c\u96f6\u9664\u65f6\u6b7b\u4ea1\u3002\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u5269\u4f59\u7684\u8fdb\u7a0b\u65f6\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u6b7b\u7684\u3002\nRedcode\u548cMARS\u67b6\u6784\u4e0d\u63d0\u4f9b\u8f93\u5165\u6216\u8f93\u51fa\u529f\u80fd\u3002\u6a21\u62df\u5668\u662f\u4e00\u4e2a\u5c01\u95ed\u7cfb\u7edf\uff0c\u552f\u4e00\u7684\u8f93\u5165\u662f\u5185\u5b58\u548c\u8fdb\u7a0b\u961f\u5217\u7684\u521d\u59cb\u503c\uff0c\u552f\u4e00\u7684\u8f93\u51fa\u662f\u6218\u6597\u7684\u7ed3\u679c\uff0c\u5373\u54ea\u4e9b\u7a0b\u5e8f\u6709\u5e78\u5b58\u7684\u8fdb\u7a0b\u3002\u5f53\u7136\uff0c\u5728\u6a21\u62df\u8fd0\u884c\u65f6\uff0c\u6a21\u62df\u5668\u4ecd\u7136\u5141\u8bb8\u5916\u90e8\u68c0\u67e5\u548c\u4fee\u6539\u5185\u5b58\u3002\n\u7ea2\u7801\u6709\u5f88\u591a\u7248\u672c\u3002A.K.\u675c\u5fb7\u5c3c[1]\u6240\u63cf\u8ff0\u7684\u6700\u65e9\u7248\u672c\u5728\u8bb8\u591a\u65b9\u9762\u4e0e\u56fd\u9645\u6838\u5fc3\u6218\u4e89\u534f\u4f1a\uff08International Core War Society\uff09\u540e\u6765\u5236\u5b9a\u7684\u6807\u51c6\u4e0d\u540c\uff0c\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u5c3d\u7ba1\u76f8\u5173\u3002\u5982\u4eca\u6700\u5e38\u7528\u7684\u7ea2\u7801\u5f62\u5f0f\u57fa\u4e8e1994\u5e74\u63d0\u4ea4\u7ed9ICWS\u7684\u4e00\u4efd\u6807\u51c6\u8349\u6848\uff0c\u8be5\u8349\u6848\u4ece\u672a\u88ab\u6b63\u5f0f\u63a5\u53d7\uff0c\u56e0\u4e3a\u5f53\u65f6ICWS\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5931\u6548\u3002\u7136\u800c\uff0c\u7ea2\u7801\u7684\u5f00\u53d1\u4ecd\u5728\u4ee5\u975e\u6b63\u5f0f\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u4e3b\u8981\u662f\u901a\u8fc7rec.games\u7b49\u5728\u7ebf\u8bba\u575b\u3002corewar[2]\u65b0\u95fb\u7ec4\u3002\n\u6218\u58eb\u901a\u5e38\u88ab\u5206\u4e3a\u8bb8\u591a\u5927\u7684\u7c7b\u522b\uff0c\u5c3d\u7ba1\u5b9e\u9645\u7684\u6218\u58eb\u901a\u5e38\u4f1a\u7ed3\u5408\u5176\u4e2d\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u884c\u4e3a\u3002\u4e09\u79cd\u5e38\u89c1\u7684\u7b56\u7565\uff08\u590d\u5236\u5668\u3001\u626b\u63cf\u4eea\u548c\u8f70\u70b8\u673a\uff09\u4e5f\u88ab\u79f0\u4e3a\u7eb8\u3001\u526a\u5200\u548c\u77f3\u5934\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u8457\u540d\u7684\u6e38\u4e50\u573a\u6e38\u620f\u4e2d\u5f7c\u6b64\u7684\u8868\u73b0\u63a5\u8fd1\u540c\u540d\u8005\u3002[3]\n\u590d\u5236\u5668\u5bf9\u81ea\u8eab\u8fdb\u884c\u91cd\u590d\u590d\u5236\u5e76\u5e76\u884c\u6267\u884c\uff0c\u6700\u7ec8\u7528\u5176\u4ee3\u7801\u7684\u526f\u672c\u586b\u5145\u6574\u4e2a\u5185\u6838\u3002\u590d\u5236\u8005\u5f88\u96be\u88ab\u6740\u6b7b\uff0c\u4f46\u901a\u5e38\u5f88\u96be\u6740\u6b7b\u5bf9\u624b\u3002\u56e0\u6b64\uff0c\u590d\u5236\u56e0\u5b50\u5f80\u5f80\u4f1a\u53d6\u5f97\u5f88\u591a\u8054\u7cfb\uff0c\u5c24\u5176\u662f\u4e0e\u5176\u4ed6\u590d\u5236\u56e0\u5b50\u76f8\u6bd4\u3002\n\u4e1d\u7ef8\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5feb\u901f\u590d\u5236\u4f53\uff0c\u4ee5Juha Pohjalainen\u7684\u300a\u4e1d\u7ef8\u6218\u58eb\u300b\u547d\u540d\u3002\u5927\u591a\u6570\u73b0\u4ee3\u590d\u5236\u5b50\u90fd\u662f\u8fd9\u79cd\u7c7b\u578b\u7684\u3002Silk Replicator\u4f7f\u7528\u5e76\u884c\u6267\u884c\uff0c\u7528\u4e00\u6761\u6307\u4ee4\u590d\u5236\u6574\u4e2a\u4ee3\u7801\uff0c\u5e76\u5728\u590d\u5236\u5b8c\u6210\u4e4b\u524d\u5f00\u59cb\u6267\u884c\u3002[5]\n\u626b\u63cf\u5668\u662f\u7528\u6765\u6253\u8d25\u590d\u5236\u8005\u7684\u3002\u626b\u63cf\u5668\u4e0d\u4f1a\u76f2\u76ee\u653b\u51fb\uff0c\u4f46\u4f1a\u5728\u53d1\u8d77\u76ee\u6807\u653b\u51fb\u4e4b\u524d\u5c1d\u8bd5\u5b9a\u4f4d\u654c\u4eba\u3002\u8fd9\u4f7f\u5f97\u5b83\u80fd\u66f4\u6709\u6548\u5730\u5bf9\u4ed8\u590d\u5236\u8005\u7b49\u96be\u4ee5\u6740\u6b7b\u7684\u5bf9\u624b\uff0c\u4f46\u4e5f\u4f7f\u5b83\u5bb9\u6613\u53d7\u5230\u8bf1\u9975\u7684\u653b\u51fb\u3002\u626b\u63cf\u4eea\u901a\u5e38\u7528SPL 0\u6307\u4ee4\u8f70\u70b8\u5185\u5b58\u3002\u8fd9\u4f1a\u5bfc\u81f4\u654c\u4eba\u521b\u5efa\u5927\u91cf\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u53ea\u4f1a\u521b\u5efa\u66f4\u591a\u8fdb\u7a0b\uff0c\u4ece\u800c\u964d\u4f4e\u6709\u7528\u8fdb\u7a0b\u7684\u901f\u5ea6\u3002\u5f53\u654c\u4eba\u53d8\u5f97\u5982\u6b64\u7f13\u6162\u4ee5\u81f3\u4e8e\u65e0\u6cd5\u505a\u4efb\u4f55\u6709\u7528\u7684\u4e8b\u60c5\u65f6\uff0cDAT\u6307\u4ee4\u4f1a\u8f70\u70b8\u5185\u5b58\u3002\u626b\u63cf\u5668\u901a\u5e38\u4e5f\u6bd4\u5176\u4ed6\u7c7b\u578b\u7684\u6218\u58eb\u66f4\u590d\u6742\uff0c\u56e0\u6b64\u66f4\u5927\u3001\u66f4\u8106\u5f31\u3002[6]\n\u4e00\u6b21\u6027\u626b\u63cf\u5668\u662f\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u626b\u63cf\u5668\uff0c\u5b83\u53ea\u626b\u63cf\u6838\u5fc3\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u76ee\u6807\uff0c\u7136\u540e\u6c38\u4e45\u5207\u6362\u5230\u653b\u51fb\u7b56\u7565\uff0c\u901a\u5e38\u662f\u6838\u5fc3\u6e05\u9664\u3002\u7f57\u4f0a\u00b7\u8303\u00b7\u91cc\u6069\uff08Roy van Rijn\uff09\u7684\u300a\u7c73\u5c14\u7c73\u767b\u300b\uff08Myrmidon[7]\uff09\u5c31\u662f\u4e00\u4e2a\u5355\u67aa\u5339\u9a6c\u7684\u4f8b\u5b50\u3002\n\u8f70\u70b8\u673a\u76f2\u76ee\u590d\u5236&#34\uff1b\u70b8\u5f39&#34\uff1b\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5728\u6838\u5fc3\uff0c\u5e0c\u671b\u51fb\u4e2d\u654c\u4eba\u3002\u70b8\u5f39\u901a\u5e38\u662fDAT\u6307\u4ee4\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6307\u4ee4\uff0c\u751a\u81f3\u591a\u6307\u4ee4\u70b8\u5f39\u3002\u8f70\u70b8\u673a\u53ef\u4ee5\u4f53\u79ef\u5c0f\u3001\u901f\u5ea6\u5feb\uff0c\u800c\u4e14\u6bd4\u626b\u63cf\u5bf9\u624b\u66f4\u6709\u4f18\u52bf\uff0c\u56e0\u4e3a\u70b8\u5f39\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u5730\u5206\u6563\u6ce8\u610f\u529b\u3002\u8f70\u70b8\u673a\u901a\u5e38\u4e0eimp\u87ba\u65cb\u673a\u7ed3\u5408\uff0c\u4ee5\u83b7\u5f97\u5bf9\u6297\u590d\u5236\u673a\u7684\u989d\u5916\u5f39\u6027\u3002\n\u5438\u8840\u9b3c\u8bd5\u56fe\u8ba9\u5b83\u7684\u5bf9\u624b#39\uff1bs\u8fdb\u7a0b\u8df3\u8f6c\u5230\u4e00\u6bb5\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\uff0c\u79f0\u4e3a&#34\uff1b\u5751&#34\uff1b\u3002\u5438\u8840\u9b3c\u53ef\u4ee5\u57fa\u4e8e\u8f70\u70b8\u673a\u6216\u626b\u63cf\u4eea\u3002\u5438\u8840\u9b3c\u7684\u4e00\u4e2a\u4e3b\u8981\u5f31\u70b9\u662f\uff0c\u4ed6\u4eec\u5f88\u5bb9\u6613\u53d7\u5230\u95f4\u63a5\u653b\u51fb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5fc5\u987b\u5c06\u6307\u5411\u4ee3\u7801\u7684\u6307\u9488\u5206\u6563\u5230\u6574\u4e2a\u6838\u5fc3\u3002\u4ed6\u4eec\u7684\u653b\u51fb\u901f\u5ea6\u4e5f\u5f88\u6162\uff0c\u56e0\u4e3a\u8fc7\u7a0b\u9700\u8981\u989d\u5916\u4e00\u8f6e\u624d\u80fd\u5230\u8fbe\u77ff\u5751\u3002\u4fdd\u5c14\u68ee\u7684\u300a\u6211\u7684\u978b\u9762\u300b\u5c31\u662f\u5438\u8840\u9b3c\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nImp\u662f\u4ee5A.K.\u675c\u5fb7\u5c3c\uff08A.K.Dewdney\uff09\u51fa\u7248\u7684\u7b2c\u4e00\u672c\u300a\u52c7\u58eb\u300b\uff08warrior\uff0cImp[9]\uff09\u547d\u540d\u7684\u3002A.K.\u675c\u5fb7\u5c3c\uff08A.K.Dewdney\uff09\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u5355\u6307\u4ee4\u79fb\u52a8\u52c7\u58eb\uff0c\u4e0d\u65ad\u5730\u5728\u5176\u6307\u4ee4\u6307\u9488\u4e4b\u524d\u590d\u5236\u5176\u552f\u4e00\u7684\u6307\u4ee4\u3002\u5c0f\u9b3c\u5f88\u96be\u88ab\u6740\u6b7b\uff0c\u4f46\u5728\u8fdb\u653b\u4e0a\u51e0\u4e4e\u6beb\u65e0\u7528\u5904\u3002\u5b83\u4eec\u7684\u7528\u9014\u5728\u4e8e\uff0c\u5b83\u4eec\u5f88\u5bb9\u6613\u5927\u91cf\u7e41\u6b96\uff0c\u5373\u4f7f\u5176\u4ed6\u6218\u58eb\u88ab\u6740\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u5b58\u6d3b\u4e0b\u6765\u3002\nimp\u73af\uff08\u6216imp\u87ba\u65cb\uff09\u7531\u56f4\u7ed5\u5806\u82af\u7b49\u95f4\u8ddd\u5206\u5e03\u7684imp\u7ec4\u6210\uff0c\u5e76\u4ea4\u66ff\u6267\u884c\u3002\u73af/\u87ba\u65cb\u7684\u6bcf\u4e2a\u81c2\u4e0a\u7684IMP\u5c06\u5176\u6307\u4ee4\u590d\u5236\u5230\u4e0b\u4e00\u4e2a\u81c2\u4e0a\uff0c\u7136\u540e\u7acb\u5373\u518d\u6b21\u6267\u884c\u3002\u73af\u548c\u87ba\u65cb\u6bd4\u7b80\u5355\u7684\u5c0f\u9b3c\u66f4\u96be\u6740\u6b7b\uff0c\u5b83\u4eec\u751a\u81f3\u6709\uff08\u5f88\u5c0f\uff09\u673a\u4f1a\u6740\u6b7b\u6ca1\u6709\u53d7\u5230\u4fdd\u62a4\u7684\u6218\u58eb\u3002imp\u73af\u6216\u87ba\u65cb\u4e2d\u7684\u81c2\u6570\u5fc5\u987b\u4e0e\u6838\u5fc3\u7684\u5927\u5c0f\u76f8\u5bf9\u6700\u4f73\u3002\n\u5feb\u901f\u626b\u63cf\u5668\u8bd5\u56fe\u901a\u8fc7\u5feb\u901f\u5c55\u5f00\u7684\u626b\u63cf\u73af\u5c3d\u65e9\u6293\u4f4f\u5bf9\u624b\u3002\u5feb\u901f\u626b\u63cf\u662f\u4e00\u79cd\u65e9\u671f\u7684\u6e38\u620f\u7b56\u7565\uff0c\u603b\u662f\u9700\u8981\u4e00\u4e9b\u5176\u4ed6\u7b56\u7565\u4f5c\u4e3a\u5907\u4efd\u3002\u5411\u6218\u58eb\u6dfb\u52a0\u5feb\u901f\u626b\u63cf\u7ec4\u4ef6\u53ef\u4ee5\u63d0\u9ad8\u5176\u5728\u5bf9\u6297\u5176\u4ed6\u5feb\u901f\u626b\u63cf\u8005\u7b49\u957f\u6218\u58eb\u65f6\u7684\u5f97\u5206\u3002\u7136\u800c\uff0c\u5c55\u5f00\u626b\u63cf\u53ea\u80fd\u9488\u5bf9\u6709\u9650\u6570\u91cf\u7684\u4f4d\u7f6e\uff0c\u4e0d\u592a\u53ef\u80fd\u6293\u4f4f\u4e00\u4e2a\u5c0f\u5bf9\u624b\u3002\n\u6838\u5fc3\u6e05\u9664\u6309\u987a\u5e8f\u8986\u76d6\u6838\u5fc3\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\uff0c\u6709\u65f6\u751a\u81f3\u5305\u62ec\u5176\u81ea\u8eab\u3002\u6838\u5fc3\u6e05\u9664\u4f5c\u4e3a\u72ec\u7acb\u6218\u58eb\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u901a\u5e38\u88ab\u8f70\u70b8\u673a\u548c\u626b\u63cf\u5668\u7528\u4f5c\u6700\u7ec8\u7b56\u7565\u3002\n\u6709\u4e86\u5bf9\u6838\u5fc3\u6218\u4e89\u7b56\u7565\u7684\u7406\u89e3\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u521b\u9020\u4e00\u4e2a\u6218\u58eb\u6765\u5b9e\u73b0\u7279\u5b9a\u7684\u76ee\u6807\u3002\u9769\u547d\u601d\u60f3\u65f6\u4e0d\u65f6\u51fa\u73b0\uff1b\u7136\u800c\uff0c\u5927\u591a\u6570\u65f6\u5019\uff0c\u7a0b\u5e8f\u5458\u7684\u7a0b\u5e8f\u90fd\u662f\u57fa\u4e8e\u5df2\u7ecf\u53d1\u5e03\u7684\u52c7\u58eb\u3002\u4f7f\u7528OptiMax\u6216core step optimizer\u5de5\u5177\u7b49\u4f18\u5316\u5668\uff0c\u53ef\u4ee5\u521b\u5efa\u66f4\u6709\u6548\u7684\u52c7\u58eb\u3002\n\u6218\u58eb\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9057\u4f20\u7b97\u6cd5\u6216\u9057\u4f20\u7f16\u7a0b\u751f\u6210\u3002\u96c6\u6210\u8fd9\u79cd\u8fdb\u5316\u6280\u672f\u7684\u7a0b\u5e8f\u79f0\u4e3a\u8fdb\u5316\u7a0b\u5e8f\u3002\u6838\u5fc3\u6218\u4e89\u793e\u533a\u5f15\u5165\u4e86\u51e0\u4e2a\u8fdb\u5316\u8005\uff0c\u4ed6\u4eec\u503e\u5411\u4e8e\u4e3a\u8f83\u5c0f\u7684\u6838\u5fc3\u73af\u5883\u751f\u6210\u6218\u58eb\u3002\u6700\u65b0\u6210\u529f\u7684\u8fdb\u5316\u8005\u662f\u03bcGP[10]\uff0c\u5b83\u4ea7\u751f\u4e86\u4e00\u4e9b\u6700\u6210\u529f\u7684\u7eb3\u7c73\u548c\u5fae\u578b\u6218\u58eb\u3002\u7136\u800c\uff0c\u8fdb\u5316\u7b56\u7565\u4ecd\u7136\u9700\u8981\u5728\u66f4\u5927\u7684\u6838\u5fc3\u73af\u5883\u4e2d\u8bc1\u660e\u5176\u6709\u6548\u6027\u3002[11]\n\u6838\u5fc3\u6218\u4e89\u7684\u7075\u611f\u6765\u81ea\u4e00\u4e2a\u540d\u4e3a\u201c\u722c\u884c\u8005\u201d\u7684\u81ea\u6211\u590d\u5236\u7a0b\u5e8f\u548c\u4e00\u4e2a\u540d\u4e3a\u201c\u6536\u5272\u8005\u201d\u7684\u540e\u7eed\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u9500\u6bc1\u4e86\u722c\u884c\u8005\u7684\u526f\u672c\u3002[12] \u722c\u884c\u52a8\u7269\u662f\u7531BBN\u7684\u9c8d\u52c3\u00b7\u6258\u9a6c\u65af\u521b\u4f5c\u7684\u3002[13] \u675c\u5fb7\u5c3c\u4e0d\u77e5\u9053\u530d\u5310\u690d\u7269\u548c\u6536\u5272\u8005\u7684\u8d77\u6e90\uff0c\u5e76\u5c06\u5176\u79f0\u4e3a\u6e90\u81ea\u8fbe\u5c14\u6587\u4ee5\u53ca\u8096\u8d6b\u548c\u80e1\u666e\u7684\u8815\u866b\u5b9e\u9a8c\u7684\u8c23\u8a00\u3002\u7136\u800c\uff0c1984\u5e74\u300a\u79d1\u5b66\u7f8e\u56fd\u4eba\u300b\u5173\u4e8e\u6838\u5fc3\u6218\u4e89\u7684\u6587\u7ae0[12]\u5f15\u7528\u4e861961\u5e74\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u7ef4\u514b\u591a\u00b7A\u00b7\u7ef4\u7d22\u8328\u57fa\u3001\u7f57\u4f2f\u7279\u00b7\u83ab\u91cc\u65af\u548c\u9053\u683c\u62c9\u65af\u00b7\u9ea6\u514b\u7f57\u4f0a\u73a9\u7684\u8fbe\u5c14\u6587\u6e38\u620f\u3002\u5355\u8bcd&#34\uff1b\u6838\u5fc3\u548c#34\uff1b\u8fd9\u4e2a\u540d\u5b57\u6765\u81ea\u78c1\u82af\u5b58\u50a8\u5668\uff0c\u4e00\u79cd\u8fc7\u65f6\u7684\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u6280\u672f\u3002\n1984\u5e743\u6708\uff0cD\u00b7G\u00b7\u743c\u65af\u548cA\u00b7K\u00b7\u675c\u5fb7\u5c3c\u5728\u300a\u6838\u5fc3\u6218\u4e89\u6307\u5357\u300b\u4e2d\u53d1\u8868\u4e86\u5bf9\u7ea2\u7801\u8bed\u8a00\u7684\u9996\u6b21\u63cf\u8ff0\u3002[1] 1984\u5e745\u6708\uff0c\u675c\u5fb7\u5c3c\u5728\u300a\u79d1\u5b66\u7f8e\u56fd\u4eba\u300b\u6742\u5fd7\u4e0a\u53d1\u8868\u6587\u7ae0\uff0c\u5411\u516c\u4f17\u4ecb\u7ecd\u4e86\u8fd9\u6b3e\u6e38\u620f\u3002\u675c\u5fb7\u5c3c\u5728&#34\uff1b\u7535\u8111\u5a31\u4e50&#34\uff1b1985\u5e743\u6708[14]\u548c1987\u5e741\u6708\u7684\u4e13\u680f\u6587\u7ae0\u3002[15]\n\u56fd\u9645\u6838\u5fc3\u6218\u4e89\u534f\u4f1a\uff08ICWS\uff09\u6210\u7acb\u4e8e1985\u5e74\uff0c\u6bd4\u675c\u5fb7\u5c3c39\u5c81\u665a\u4e86\u4e00\u5e74\uff1b\u8fd9\u662f\u4e00\u7bc7\u539f\u521b\u6587\u7ae0\u3002ICWS\u57281986\u5e74\u548c1988\u5e74\u53d1\u5e03\u4e86\u7ea2\u7801\u8bed\u8a00\u7684\u65b0\u6807\u51c6\uff0c\u5e76\u57281994\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u4ece\u672a\u6b63\u5f0f\u8bbe\u5b9a\u4e3a\u65b0\u6807\u51c6\u7684\u66f4\u65b0\u3002[16] \u5c3d\u7ba1\u5982\u6b64\uff0c1994\u5e74\u7684\u8349\u6848\u8fd8\u662f\u88ab\u666e\u904d\u91c7\u7eb3\u548c\u6269\u5c55\uff0c\u5e76\u5f62\u6210\u4e86\u4eca\u5929\u7ea2\u5b57\u4e8b\u5b9e\u6807\u51c6\u7684\u57fa\u7840\u3002ICWS\u7531\u9a6c\u514b\u00b7\u514b\u62c9\u514b\u68ee\uff081985-1987\uff09\u3001\u5a01\u5ec9\u00b7R\u00b7\u5df4\u514b\u5229\uff081987-1992\uff09\u548c\u4e54\u6069\u00b7\u7ebd\u66fc\uff081992-1992\uff09\u6267\u5bfc\uff1b\u76ee\u524dICWS\u5df2\u7ecf\u5931\u6548\u3002[17]\n0000\uff1a\u6dfb\u52a0\u3002AB#4\uff0c$30001:MOV\u3002F$2\uff0c@2 0002:JMP\u3002B$-2\uff0c$0 0003:DAT\u3002F#0\uff0c#0\n\u7ec4\u88c5ICWS-94\u578b\u7ea2\u8272\u4ee3\u7801\nRedcode\u662f\u6838\u5fc3\u6218\u4e89\u4e2d\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u7531\u4e00\u4e2a\u540d\u4e3a\u5185\u5b58\u9635\u5217\u7ea2\u7801\u6a21\u62df\u5668\uff08Memory Array Redcode Simulator\uff0c\u7b80\u79f0MARS\uff09\u7684\u865a\u62df\u673a\u6267\u884c\u3002\u7ea2\u7801\u7684\u8bbe\u8ba1\u677e\u6563\u5730\u57fa\u4e8e20\u4e16\u7eaa80\u5e74\u4ee3\u65e9\u671f\u7684\u5b9e\u9645CISC\u6c47\u7f16\u8bed\u8a00\uff0c\u4f46\u5305\u542b\u4e00\u4e9b\u5728\u5b9e\u9645\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u901a\u5e38\u627e\u4e0d\u5230\u7684\u7279\u6027\u3002\nRedcode\u548cMARS\u73af\u5883\u90fd\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u800c\u62bd\u8c61\u7684\u5e73\u53f0\uff0c\u800c\u4e0d\u9700\u8981\u5b9e\u9645\u8ba1\u7b97\u673a\u548c\u5904\u7406\u5668\u7684\u590d\u6742\u6027\u3002\u867d\u7136Redcode\u4e0e\u666e\u901a\u7684CISC\u6c47\u7f16\u8bed\u8a00\u7c7b\u4f3c\uff0c\u4f46\u76f8\u5bf9\u4e8e&#34\uff0c\u5b83\u76f8\u5f53\u7b80\u5355\uff1b\u96f7\u4e9a\u5c14&#34\uff1b\u6c47\u7f16\uff0c\u5e76\u4e14\u6ca1\u6709\u7edd\u5bf9\u5185\u5b58\u5bfb\u5740\n\u6700\u521d\u76848\u6761\u6307\u4ee4\u63cf\u8ff0\u5982\u4e0b\uff0c\u540e\u6765\u7684\u7248\u672c\u6dfb\u52a0\u4e86NOP\u3001\u4e58\u6cd5\u548c\u66f4\u590d\u6742\u7684\u6bd4\u8f83\u3002[18]\n\u64cd\u4f5c\u7801\u52a9\u8bb0\u7b26\u53c2\u6570\u64cd\u4f5c-------------------------0 DAT B\u521d\u59cb\u5316\u4f4d\u7f6e\u5230\u503cB\u30021 MOV A B\u5c06A\u79fb\u52a8\u5230\u4f4d\u7f6eB\u30022\u6dfb\u52a0A B\u5c06\u64cd\u4f5c\u6570A\u6dfb\u52a0\u5230\u4f4d\u7f6eB\u7684\u5185\u5bb9\u4e2d\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4f4d\u7f6eB\u30023 SUB A B\u5c06\u64cd\u4f5c\u6570A\u4ece\u4f4d\u7f6eB\u7684\u5185\u5bb9\u4e2d\u51cf\u53bb\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4f4d\u7f6eB\u30024JMP B\u8df3\u8f6c\u5230\u4f4d\u7f6eB\u30025 JMZ A B\u5982\u679c\u64cd\u4f5c\u6570A\u4e3a0\uff0c\u8df3\u8f6c\u5230\u4f4d\u7f6eB\uff1b\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6307\u4ee4\u30026 DJZ A B\u5c06\u4f4d\u7f6eA\u7684\u5185\u5bb9\u51cf\u5c111\u3002\u5982\u679c\u4f4d\u7f6eA\u73b0\u5728\u4fdd\u63010\uff0c\u8df3\u5230\u4f4d\u7f6eB\uff1b\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6307\u4ee4\u30027 CMP A B\u6bd4\u8f83\u64cd\u4f5c\u6570A\u548c\u64cd\u4f5c\u6570B\u3002\u5982\u679c\u5b83\u4eec\u4e0d\u76f8\u7b49\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4\uff1b\u5426\u5219\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\nICWS&#39\uff1b94\u6807\u51c6\u8349\u6848\u589e\u52a0\u4e86\u66f4\u591a\u5bfb\u5740\u6a21\u5f0f\uff0c\u4e3b\u8981\u7528\u4e8e\u5904\u7406A\u5b57\u6bb5\u95f4\u63a5\u5bfb\u5740\uff0c\u603b\u5171\u63d0\u4f9b\u4e868\u79cd\u5bfb\u5740\u6a21\u5f0f\uff1a\n#-\u7acb\u5373$-\u76f4\u63a5\uff08\u53ef\u7701\u7565$\uff09-A-field indirect@-B-field indirect{-A-field indirect with predecrement&lt\uff1b-B-field indirect with predecrement}-A-field indirect with postincrement&gt\uff1b-B-\u5e26\u540e\u589e\u91cf\u7684\u95f4\u63a5\u5b57\u6bb5\n\u51e0\u4f4d\u4f5c\u8005\u591a\u5e74\u6765\u4e00\u76f4\u5728\u5f00\u53d1\u8fd9\u6b3e\u6e38\u620f\u7684\u5b9e\u73b0\u3002\u8fd9\u6b3e\u6e38\u620f\u6709\u591a\u4e2a\u7248\u672c\uff0c\u53ef\u79fb\u690d\u5230\u591a\u4e2a\u5e73\u53f0\u3002\u4f8b\u5982\uff0cpMARS\u662f\u4e00\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u6e90\u4ee3\u7801\u4f4d\u4e8eSourceForge[20]\u6216\u57fa\u4e8eSDL\u7684SDL pMARS For Windows\u3002[21]\u6700\u8fd1\uff0c\u4e00\u4e2a\u5b8c\u5168\u57fa\u4e8e\u7f51\u7edc\u7684\u6a21\u62df\u5668\u88ab\u521b\u5efa\u51fa\u6765https://www.corewar.io/\u65e0\u9700\u4e0b\u8f7d\u4efb\u4f55\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5de5\u5177\u3002\n\u5728SooC\u953b\u70892000\u52302021\u5e74\u95f4\u5171\u4e0b\u8f7d\u4e8635000\u6b21PMAS\u3002[22]\n^a\u00b7b\u00b7\u743c\u65af\uff0cD\u00b7G\u3002\uff1b\u675c\u5fb7\u5c3c\uff0cA.K.\uff081984\u5e743\u6708\uff09&#34;\u6838\u5fc3\u6218\u4e89\u6307\u5357&#34\u3002\n^\u65fa\u6c99\uff0c\u660e\u5854\u4e54&#34;\u827a\u672f\u5165\u95e8&#39\uff1b88\uff1a\u7eb8-\u77f3-\u526a\u5200\u4e09\u90e8\u66f2&#34\u3002\n^\u6c83\u514b\uff0c\u5df4\u514b\u5229\uff1b\u7b49\u7b49\uff0c\u4e9a\u5386\u5c71\u5927\uff1b\u65bd\u5bc6\u7279\uff0c\u514b\u91cc\u65af\u8482\u5b89&#34;\u4e00\u79cd\u8fdb\u5316\u7684\u65b9\u6cd5\u4ea7\u751f\u4e86\u4eba\u7c7b\u7ade\u4e89\u7684Corewar\u9879\u76ee#34\uff1b\uff08PDF\uff09\u3002\n^\u8096\u8d6b\uff0cJ\u3002\uff1bHupp\uff0cJ.\uff081982\u5e743\u6708\uff09&#34;\u7b2c&#39\uff1b\u8815\u866b&#39\uff1b\u7a0b\u5e8f-\u65e9\u671f\u5206\u5e03\u5f0f\u8ba1\u7b97\u7ecf\u9a8c&#34\uff1b\u3002ACM\u7684\u901a\u8baf\u300225 (3): 172\u2013180.  \u5185\u653f\u90e8\uff1a10.1145/358453.358455\u3002S2CID 1639205\u3002\n^\u675c\u5fb7\u5c3c\uff0cA.K.\uff081985\u5e743\u6708\uff09&#34;\u75c5\u6bd2\u3001\u8815\u866b\u548c\u5176\u4ed6\u5bf9\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u5a01\u80c1\u7684\u6838\u5fc3\u6218\u4e89\u52a8\u7269\uff1b\u3002\u79d1\u5b66\u7f8e\u56fd\u4eba\u3002\n^\u675c\u5fb7\u5c3c\uff0cA.K.\uff081987\u5e741\u6708\uff09&#34;\u4e00\u4e2a\u540d\u4e3aMICE\u7684\u9879\u76ee\u5728\u7b2c\u4e00\u5c4a\u6838\u5fc3\u6218\u4e89\u9526\u6807\u8d5b\u4e0a\u4ee5\u5fae\u5f31\u4f18\u52bf\u53d6\u80dc&#34\uff1b\u3002\u79d1\u5b66\u7f8e\u56fd\u4eba\u3002\n^\u8fbe\u7c73\u6069\u00b7\u591a\u5229\u683c\u65af\uff1b\u9a6c\u514b\u8fbe\u52d2\u59c6\uff081995\u5e7411\u67088\u65e5\uff09&#34;1994\u5e74\u62df\u8bae\u6838\u5fc3\u6218\u4e89\u6807\u51c6\u7684\u6ce8\u91ca\u8349\u6848&#34\u3002", "note_en": "Jump to navigation  Jump to search  Core War is a 1984  programming game created by D. G. Jones and  A. K. Dewdney in which two or more battle programs (called &#34;warriors&#34;) compete for control of a  virtual computer. These battle programs are written in an abstract  assembly language called  Redcode.\n   At the beginning of a game, each battle program is loaded into memory at a random location, after which each program executes one instruction in turn. The goal of the game is to cause the processes of opposing programs to terminate (which happens if they execute an invalid instruction), leaving the victorious program in sole possession of the machine.\n The earliest published version of Redcode defined only eight instructions. The ICWS-86 standard increased the number to 10 while the ICWS-88 standard increased it to 11. The currently used 1994 draft standard has 16 instructions. However, Redcode supports a number of different  addressing modes and (starting from the 1994 draft standard) instruction modifiers which increase the actual number of operations possible to 7168. The Redcode standard leaves the underlying instruction representation undefined and provides no means for programs to access it. Arithmetic operations may be done on the two address fields contained in each instruction, but the only operations supported on the instruction codes themselves are copying and comparing for equality.\n Each Redcode instruction occupies exactly one memory slot and takes exactly one cycle to execute. The rate at which a process executes instructions, however, depends on the number of other processes in the queue, as processing time is shared equally.\n The memory is addressed in units of one instruction. The memory space (or  core) is of finite size, but only  relative addressing is used, that is, address  0 always refers to the currently executing instruction, address  1 to the instruction after it, and so on. The maximum address value is set to equal one less than the number of memory locations, and will wrap around if necessary. As a result, there is a one-to-one correspondence between addresses and memory locations, but it is impossible for a Redcode program to determine any absolute address. A process that encounters no invalid or jump instructions will continue executing successive instructions endlessly, eventually returning to the instruction where it started.\n Instead of a single  instruction pointer a Redcode simulator has a  process queue for each program containing a variable number of instruction pointers which the simulator cycles through. Each program starts with only one process, but new processes may be added to the queue using the  SPL instruction. A process dies when it executes a  DAT instruction or performs a division by zero. A program is considered dead when it has no more processes left.\n Redcode and the MARS architecture provide no input or output functions. The simulator is a closed system, with the only input being the initial values of the memory and the process queues, and the only output being the outcome of the battle, i.e., which programs had surviving processes. Of course, the simulator may still allow external inspection and modification of the memory while the simulation is running.\n  A number of versions of Redcode exist. The earliest version described by  A. K. Dewdney  [1] differs in many respects from the later standards established by the International Core War Society, and could be considered a different, albeit related, language. The form of Redcode most commonly used today is based on a draft standard submitted to the ICWS in 1994 that was never formally accepted, as the ICWS had become effectively defunct around that time. Development of Redcode, however, has continued in an informal manner, chiefly via online forums such as the  rec.games.corewar  [2]  newsgroup.\n  Warriors are commonly divided into a number of broad categories, although actual warriors may often combine the behavior of two or more of these. Three of the common strategies ( replicator,  scanner and  bomber) are also known as  paper, scissors and stone, since their performance against each other approximates that of their namesakes in the well-known playground game.  [3]\n A replicator makes repeated copies of itself and executes them in parallel, eventually filling the entire core with copies of its code. Replicators are hard to kill, but often have difficulty killing their opponents. Replicators therefore tend to score a lot of ties, particularly against other replicators.\n A  silk is a special type of very rapid replicator, named after  Silk Warrior  [4] by Juha Pohjalainen. Most modern replicators are of this type. Silk replicators use parallel execution to copy their entire code with one instruction, and begin execution of the copy before it is finished.  [5]\n A scanner is designed to beat replicators. A scanner does not attack blindly, but tries to locate its enemy before launching a targeted attack. This makes it more effective against hard-to-kill opponents like replicators, but also leaves it vulnerable to decoys. A scanner usually bombs memory with   SPL 0 instructions. This causes the enemy to create a huge number of processes which do nothing but create more processes, slowing down useful processes. When the enemy becomes so slow that it is unable to do anything useful, the memory is bombed with   DAT instructions. Scanners are also generally more complex, and therefore larger and more fragile, than other types of warriors.  [6]\n A  one-shot is a very simple scanner that only scans the core until it finds the first target, and then permanently switches to an attack strategy, usually a core clear.  Myrmidon  [7] by Roy van Rijn is an example of a oneshot.\n A bomber blindly copies a &#34;bomb&#34; at regular intervals in the core, hoping to hit the enemy. The bomb is often a   DAT instruction, although other instructions, or even multi-instruction bombs, may be used. A bomber can be small and fast, and they gain an extra edge over scanning opponents since the bombs also serve as convenient distractions. Bombers are often combined with imp spirals to gain extra resiliency against replicators.\n A vampire tries to make its opponent&#39;s processes jump into a piece of its own code called a &#34;pit&#34;. Vampires can be based on either bombers or scanners. A major weakness of vampires is that they can be easily attacked indirectly, since they must by necessity scatter pointers to their code all over the core. Their attacks are also slow, as it takes an extra round for the processes to reach the pit.  myVamp  [8] by Paulsson is an example of a vampire.\n Imps are named after the first ever published warrior,  Imp  [9] by  A. K. Dewdney, a trivial one-instruction mobile warrior that continually copies its sole instruction just ahead of its  instruction pointer. Imps are hard to kill but next to useless for offense. Their use lies in the fact that they can easily be spawned in large numbers, and may survive even if the rest of the warrior is killed.\n An  imp ring (or  imp spiral) consists of imps spaced at equal intervals around the core and executing alternately. The imps at each arm of the ring/spiral copy their instruction to the next arm, where it is immediately executed again. Rings and spirals are even harder to kill than simple imps, and they even have a (small) chance of killing warriors not protected against them. The number of arms in an imp ring or spiral must be  relatively prime with the size of the core.\n A quickscanner attempts to catch its opponent early by using a very fast unrolled scanning loop. Quickscanning is an early-game strategy, and always requires some other strategy as a backup. Adding a quickscanning component to a warrior can improve its score against long warriors such as other quickscanners. However, the unrolled scan can only target a limited number of locations, and is unlikely to catch a small opponent.\n A core clear sequentially overwrites every instruction in the core, sometimes even including itself. Core clears are not very common as stand-alone warriors, but are often used as an end-game strategy by bombers and scanners.\n  With an understanding of  Core War strategies, a programmer can create a warrior to achieve certain goals. Revolutionary ideas come once in a while; most of the time, however, programmers base their programs on already published warriors. Using optimizers such as OptiMax or core-step optimizer tools, a more effective warrior can be created.\n Warriors can also be generated by  genetic algorithms or  genetic programming. Programs that integrate this evolutionary technique are known as  evolvers. Several evolvers were introduced by the  Core War community and tend to focus on generating warriors for smaller core settings. The latest evolver with significant success was  \u03bcGP  [10] which produced some of the most successful nano and tiny warriors. Nevertheless, evolutionary strategy still needs to prove its effectiveness on larger core settings.  [11]\n  Core War was inspired by a  self-replicating program called  Creeper and a subsequent program called Reaper that destroyed copies of Creeper.  [12] Creeper was created by Bob Thomas at  BBN.  [13] Dewdney was not aware of the origin of Creeper and Reaper and refers to them as a rumor originating from  Darwin and the worm experiments of  Shoch and Hupp. The 1984   Scientific American article on  Core War  [12] nevertheless cites the game   Darwin, played by  Victor A. Vyssotsky,  Robert Morris, and  Douglas McIlroy at  Bell Labs in 1961. The word &#34;Core&#34; in the name comes from  magnetic-core memory, an obsolete  random-access memory technology.\n The first description of the Redcode language was published in March 1984, in  Core War Guidelines by D. G. Jones and  A. K. Dewdney.  [1] The game was introduced to the public in May 1984, in an article written by Dewdney in  Scientific American. Dewdney revisited  Core War in his &#34;Computer Recreations&#34; column in March 1985,  [14] and again in January 1987.  [15]\n The International Core Wars Society (ICWS) was founded in 1985, one year after Dewdney&#39;s original article. The ICWS published new standards for the Redcode language in 1986 and 1988, and proposed an update in 1994 that was never formally set as the new standard.  [16] Nonetheless, the 1994 draft was commonly adopted and extended, and forms the basis of the  de facto standard for Redcode today. The ICWS was directed by Mark Clarkson (1985\u20131987), William R. Buckley (1987\u20131992), and Jon Newman (1992\u2013); currently the ICWS is defunct.  [17]\n  0000 :  ADD . AB  #  4 ,  $  3  0001 :  MOV . F  $  2 ,  @  2  0002 :  JMP . B  $  - 2 ,  $  0  0003 :  DAT . F  #  0 ,  #  0\n Assembled ICWS-94 style Redcode\n Redcode is the  programming language used in  Core War. It is executed by a  virtual machine known as a  Memory Array Redcode Simulator, or  MARS. The design of Redcode is loosely based on actual  CISC  assembly languages of the early 1980s, but contains several features [   vague] not usually found in actual computer systems.\n Both Redcode and the MARS environment are designed to provide a simple and abstract platform without the complexity of actual computers and processors. Although Redcode is meant to resemble an ordinary CISC assembly language, it is quite simplified relative to &#34;real&#34; assembly, and has no absolute memory addressing\n The original 8 instructions are described as follows, later versions added NOP, multiply and more complex comparisons.  [18]\n OPcode Mnemonic Argument(s) Action ------- --------- ----- ----- ---------------------------------- 0 DAT B Initialize location to value B. 1 MOV A B Move A into location B. 2 ADD A B Add operand A to contents of location B and store result in location B. 3 SUB A B Subtract operand A from contents of location B and store result in location B. 4 JMP B Jump to location B. 5 JMZ A B If operand A is 0, jump to location B; otherwise continue with next instruction. 6 DJZ A B Decrement contents of location A by 1. If location A now holds 0, jump to location B; otherwise continue with next instruction. 7 CMP A B Compare operand A with operand B. If they are not equal, skip next instruction; otherwise execute next instruction.\n the ICWS &#39;94 standard draft added more addressing modes, mostly to deal with A-field indirection, to give a total of 8 address modes:\n # \u2014 immediate $ \u2014 direct (the $ may be omitted) * \u2014 A-field indirect @ \u2014 B-field indirect { \u2014 A-field indirect with predecrement &lt; \u2014 B-field indirect with predecrement } \u2014 A-field indirect with postincrement &gt; \u2014 B-field indirect with postincrement\n  Development of implementations of the game continued over the years by several authors. There are multiple versions of the game available,  [19]  ported for several platforms. For instance  pMARS which is  open source software with  source code on  SourceForge,  [20] or the  SDL based  SDL pMARS for Windows.  [21] Recently a fully web based simulator has been created  https://www.corewar.io/ removing the need to download any platform specific tooling.\n The common implementation pMars was downloaded over 35,000 times between 2000 and 2021 from  SourceForge.  [22]\n  ^     a     b   Jones, D. G.;  Dewdney, A. K. (March 1984).  &#34;Core War Guidelines&#34; .\n  ^    Wangsaw, Mintardjo.  &#34;Intro to Art in &#39;88: Paper - Stone - Scissors Trilogy&#34; .\n        ^    Vowk, Barkley; Wait, Alexander; Schmidt, Christian.  &#34;An Evolutionary Approach Generates Human Competitive Corewar Programs&#34;  (PDF) .\n  ^     Shoch, J.; Hupp, J. (March 1982). &#34;The &#39;Worm&#39; Programs - Early Experience with a Distributed Computation&#34;.   Communications of the ACM.  25 (3): 172\u2013180.  doi: 10.1145/358453.358455.  S2CID\u00a0 1639205.\n ^     Dewdney, A.\u00a0K. (March 1985).  &#34;A Core War bestiary of viruses, worms and other threats to computer memories&#34;.  Scientific American .\n ^     Dewdney, A.\u00a0K. (January 1987).  &#34;A program called MICE nibbles its way to victory at the first Core War tournament&#34;.  Scientific American .\n ^    Doligez, Damien; Durham, Mark (8 November 1995).  &#34;Annotated Draft of the Proposed 1994 Core War Standard&#34; .", "posttime": "2022-02-14 23:39:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6838\u5fc3,core,\u6307\u4ee4", "title": "\u6838\u5fc3\u6218\u4e89", "title_en": "Core War", "transed": 1, "url": "https://en.wikipedia.org/wiki/Core_War", "via": "", "real_tags": ["\u6838\u5fc3", "core", "\u6307\u4ee4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073182, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e741\u6708\uff0c\u6211\u53d1\u8868\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u63cf\u8ff0\u4e86\u4e00\u5bb6\u540d\u4e3aPixsy\u7684\u516c\u53f8\u5982\u4f55\u591a\u6b21\u5411\u6211\u53d1\u51fa\u6cd5\u5f8b\u5a01\u80c1\uff0c\u8bd5\u56fe\u8ba9\u6211\u652f\u4ed8600\u7f8e\u5143\u8d2d\u4e70\u6211\u4f7f\u7528\u8fc7\u7684\u521b\u610f\u5171\u4eab\u56fe\u50cf\u2026", "note_en": "In January, I published  an article describing how a company called Pixsy sent me repeated legal threats in a bid to get me to pay $600 for  a Creative Commons image  I\u2019d used\u2026", "posttime": "2022-02-14 23:38:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6cd5\u5f8b,letter,pixsy", "title": "\u4e00\u5c01\u81f4Pixsy\u9996\u5e2d\u6267\u884c\u5b98\u51ef\u6069\u00b7\u743c\u65af\u7684\u516c\u5f00\u4fe1\uff0c\u4ed6\u4e0d\u65ad\u5411\u6211\u53d1\u9001\u6cd5\u5f8b\u5a01\u80c1", "title_en": "An Open Letter to Pixsy CEO Kain Jones, Who Keeps Sending Me Legal Threats", "transed": 1, "url": "https://doctorow.medium.com/an-open-letter-to-pixsy-ceo-kain-jones-who-keeps-sending-me-legal-threats-5dfc54558f2c", "via": "", "real_tags": ["\u6cd5\u5f8b", "letter", "pixsy"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u600e\u4e48\u4e00\u56de\u4e8b\uff1f\u4e3a\u4ec0\u4e48\uff1f\u660e\u767d\u4e86\u5417\uff1f\u7528\u5b83\uff1f\u627e\u4eba\u5e2e\u5fd9\uff1f\u8d21\u732e\uff1f\u6700\u65b0\u7a33\u5b9a\u7248\u672c\uff1a2.0.5\u2014\u2014\u591c\u95f4\u7248\u672c\uff1a\u76ee\u524d\u4e0d\u53ef\u7528\u4e00\u4e2a\u65b0\u7684\u7f51\u9875\u6b63\u5728\u5236\u4f5c\u4e2d\u2014\u2014\u6709\u4e00\u4e2a\u65b0\u7684SikuliX\u6807\u5fd7\u3002\u3002\u3002\u8bbf\u95ee\u65b0\u95fb\u535a\u5ba2-\u4eab\u53d7\u2026\u5728\u56de\u65cf\u5370\u5ea6\u6587\u5316\u4e2d\uff1a\u770b\u5230\u548c\u7406\u89e3\u672a\u77e5\u4e8b\u7269\u7684\u80fd\u529b\u3002\uff08\u611f\u8c22\u5c55\u793aSikuli\u7684\u56fe\u7247\uff09Sikuli\u4e8e2009\u5e74\u7531\u5f20\u5b97\u7965\uff08Tsung Xiang Chang\uff09\u548cTom Yeh\uff08Tom Yeh\uff09\u5728\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7528\u6237\u754c\u9762\u8bbe\u8ba1\u5c0f\u7ec4\uff08User Interface Design Group\uff09\u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u7814\u7a76\u9879\u76ee\u542f\u52a8\u30022012\u5e74\uff0c\u4e24\u4eba\u90fd\u79bb\u5f00\u4e86Sikuli-X-1.0rc3\u9879\u76ee\uff0c\u5f53\u65f6\u6211\u51b3\u5b9a\u63a5\u7ba1\u5f00\u53d1\u548c\u652f\u6301\uff0c\u5e76\u5c06\u5176\u547d\u540d\u4e3aSikuliX\u3002SikuliX\u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u5728\u8fd0\u884cWindows\u3001Mac\u6216\u67d0\u4e9bLinux/Unix\u7684\u684c\u9762\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u5b83\u4f7f\u7528OpenCV\u652f\u6301\u7684\u56fe\u50cf\u8bc6\u522b\u6765\u8bc6\u522bGUI\u7ec4\u4ef6\u3002\u8fd9\u5728\u65e0\u6cd5\u8f7b\u677e\u8bbf\u95eeGUI\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u65b9\u4fbf\uff1b\u60a8\u60f3\u8981\u64cd\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u7684\u5185\u90e8\u4ee3\u7801\u6216\u6e90\u4ee3\u7801\u3002SikuliX\u652f\u6301\u4f5c\u4e3a\u811a\u672c\u8bed\u8a00\u2026\u2026\u60a8\u53ef\u4ee5\u5728Java\u7f16\u7a0b\u4e2d\u4f7f\u7528\u5b83\uff0c\u4e5f\u53ef\u4ee5\u5728\u4efb\u4f55\u652f\u6301Java\u7684\u7f16\u7a0b/\u811a\u672c\u8bed\u8a00\uff08Jython\u3001JRuby\u3001Scala\u3001Clojure\u7b49\uff09\u4e2d\u4f7f\u7528\u5b83\u3002\u5c3d\u7ba1SikuliX\u76ee\u524d\u5728\u4efb\u4f55\u79fb\u52a8\u8bbe\u5907\u4e0a\u90fd\u4e0d\u53ef\u7528\uff0c\u4f46\u5b83\u53ef\u4ee5\u4e0e\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u7684\u76f8\u5e94\u6a21\u62df\u5668\u4e00\u8d77\u4f7f\u7528\uff0c\u6216\u57fa\u4e8eVNC\u89e3\u51b3\u65b9\u6848\u3002\u57fa\u4e8eADB\uff08\u5b89\u5353\u8c03\u8bd5\u6865\uff09\u7684\u5b89\u5353\u8bbe\u5907\u89e3\u51b3\u65b9\u6848\u5904\u4e8e\u65e9\u671f\u5b9e\u9a8c\u9636\u6bb5\uff0c\u9664\u4e86\u5728\u5c4f\u5e55\u4e0a\u5b9a\u4f4d\u56fe\u50cf\u5916\uff0cSikuliX\u8fd8\u53ef\u4ee5\u8fd0\u884c\u9f20\u6807\u548c\u952e\u76d8\u4e0e\u8bc6\u522b\u7684GUI\u5143\u7d20\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u9002\u7528\u4e8e\u591a\u76d1\u89c6\u5668\u73af\u5883\uff0c\u751a\u81f3\u9002\u7528\u4e8e\u5177\u6709\u67d0\u4e9b\u9650\u5236\u7684\u8fdc\u7a0b\u7cfb\u7edf\u3002SikuliX\u9644\u5e26\u57fa\u672c\u6587\u672c\u8bc6\u522b\uff08OCR\uff09\uff0c\u53ef\u7528\u4e8e\u641c\u7d22\u56fe\u50cf\u4e2d\u7684\u6587\u672c\u3002\u6b64\u529f\u80fd\u7531Tesseract\u63d0\u4f9b\u52a8\u529b\u3002SikuliX\u662f\u4e00\u4e2aJava\u5e94\u7528\u7a0b\u5e8f\uff0c\u9002\u7528\u4e8eWindows\u3001macOS\u548c\u5927\u591a\u6570Linux/Unix\u7cfb\u7edf\u3002-\u56de\u5230\u9876\u7aef-\u4f60\u60f3\u81ea\u52a8\u5316\u4e00\u4e9b\u91cd\u590d\u7684\u4efb\u52a1\u3002\u3002\u3002\u800c\u4e14\u4f60\u624b\u5934\u6ca1\u6709\u8db3\u591f\u7684\u5de5\u5177\u3002\u60a8\u5e0c\u671b\u6d4b\u8bd5\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u3002\u60a8\u5e0c\u671b\u521b\u5efa\u4f7f\u7528\u6587\u6863\u6216\u57f9\u8bad\u6750\u6599\uff0c\u5e76\u5728\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u4e0a\u5b9e\u65f6\u8fd0\u884c\u3002\u60a8\u5df2\u7ecf\u6709\u4e86\u8fd9\u65b9\u9762\u7684\u5de5\u5177\u548c\u5de5\u4f5c\u6d41\u7a0b\uff0c\u4f46\u60a8\u5e0c\u671b\u6dfb\u52a0SikuliX\u7684\u7279\u5b9a\u529f\u80fd\uff0c\u4ee5\u589e\u5f3a\u60a8\u7684\u65b9\u6cd5\uff0c\u63d0\u9ad8\u6548\u7387\u548c\u7ed3\u679c\u3002\u4f7f\u7528SikuliX\u610f\u5473\u7740\u505a\u6240\u89c1\u5373\u6240\u5f97\uff1a\u4f60\u770b\u5230\u7684\u5c31\u662f\u4f60\u5199\u7684\uff1b-\uff09-\u56de\u5230\u9876\u90e8\u2014\u2014\u5728\u8003\u8651\u4f7f\u7528SikuliX\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u786e\u4fdd\u60a8\u6709\u4e00\u4e2a\u6709\u6548\u768464\u4f4dJava\u5b89\u88c5\uff08\u7248\u672c8\u6216\u66f4\u9ad8\u7248\u672c\uff09\u3002\u4f46\u5728\u4e0b\u8f7d\u548c\u6446\u5f04\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u9605\u8bfbQUICKSTART\u4e2d\u7684\u8840\u6dcb\u6dcb\u7684\u7ec6\u8282\u3002SikuliX\u53ef\u4eceSikuliX\u4e0b\u8f7d&#39\uff1bs Launchpad\u9875\u9762\uff0c\u6216\u8005\u4ece\u8fd9\u91cc\u8fd4\u56de\u5230\u9876\u90e8\uff0c\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u548c\u5efa\u8bae\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u9605\u8bfb\u4e86QUICKSTART\u3002\u5bf9\u4e8eSikuliX\uff0c\u6709\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u4f7f\u7528\u573a\u666f\uff1a\u4e00\u79cd\u662f\u57fa\u4e8e\u641c\u7d22\u56fe\u50cf\u548c\u4f7f\u7528\u9f20\u6807\u548c\u952e\u76d8\u64cd\u4f5cGUI\u5143\u7d20\u6765\u8bbe\u7f6e\u548c\u8fd0\u884c\u6216\u591a\u6216\u5c11\u590d\u6742\u7684SikuliX\u5de5\u4f5c\u6d41\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6240\u8c13\u7684SikuliX IDE\uff0c\u5b83\u4e3a\u7f16\u8f91\u548c\u8fd0\u884c\u811a\u672c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u652f\u6301\u3002\u5728\u811a\u672c\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5904\u7406\u540d\u4e3ayou name\u7684SikuliX\u811a\u672c\u3002sikuli\u662f\u5305\u542b\u811a\u672c\u6587\u4ef6\u548c\u5de5\u4f5c\u6d41\u6240\u9700\u56fe\u50cf\u7684\u6587\u4ef6\u5939\u3002\u53ef\u4ee5\u4eceSikuliX IDE\u4e2d\u8fd0\u884c\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u811a\u672c\u3002\u8981\u4e0a\u8def\uff0c\u4f60\u5e94\u8be5\u81f3\u5c11\u626b\u63cf\u4e00\u6b21\u6587\u6863\u3002\u5728\u6210\u719f\u7684IDE\u4e2d\uff08IntelliJ IDEA\u3001Eclipse\u3001NetBeans\u7b49\uff09\u548c/\u6216\u67d0\u4e2a\u6d4b\u8bd5\u73af\u5883\u4f7f\u7528\u53ef\u7528\u7684API&#39\u5c06SikuliX\u96c6\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5e93\uff1b\u5728\u4f7f\u7528Java\u6216\u57fa\u4e8eJava\u7684\u8bed\u8a00\uff08Jython\u3001JRuby\u3001Scala\u3001Clojure\u7b49\uff09\u7f16\u7a0b\u65f6\u3002\u5982\u679c\u60a8\u5728\u8fd9\u79cd\u4f7f\u7528\u573a\u666f\u4e2d\u5de5\u4f5c\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u81f3\u5c11\u626b\u63cf\u4e00\u6b21\u6587\u6863\uff0c\u5e76\u67e5\u770b\u6709\u5173\u5982\u4f55\u4f7f\u7528Java\u7684\u7279\u6b8a\u4fe1\u606f\u3002-\u56de\u5230\u9876\u7aef\u2014\u2014\u83b7\u5f97\u5e2e\u52a9\u7684\u7b2c\u4e00\u4e2a\u5730\u65b9\u662f\u53c2\u89c2SikuliX&#39\uff1bs\u542f\u52a8\u677f\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u5728\u7b54\u6848\u90e8\u5206\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c\u6216\u8005\u6d4f\u89c8\u4e00\u4e0b\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6709\u7528\u7684\u3002\u4f60\u53ef\u4ee5\u67e5\u770b\u5e38\u89c1\u95ee\u9898\u90e8\u5206\u3002\u5373\u4f7f\u662fBugs\u90e8\u5206\u4e5f\u53ef\u80fd\u4f1a\u9610\u660e\u60a8\u5f53\u524d\u7684\u95ee\u9898\u2026\u5373\u4f7f\u53ea\u662f\u95ee\u4e00\u4e0b\u8c37\u6b4c\uff0c\u4e5f\u53ef\u80fd\u4f1a\u4ece\u7f51\u4e0a\u5176\u4ed6\u5730\u65b9\u6cc4\u9732\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u83b7\u5f97\u5e2e\u52a9\u548c\u89c1\u89e3\u7684\u4fe1\u606f\u3002-\u56de\u5230\u9876\u90e8\u2014\u2014\u6e90\u4ee3\u7801\u548c\u5f00\u53d1\u57fa\u7840\u90fd\u5728GitHub\u4e0a\u3002\u6b22\u8fce\u60a8\u7684\u4efb\u4f55\u8d21\u732e\uff0c\u5e76\u9ad8\u5ea6\u8d5e\u8d4f\u3002\u4f7f\u7528\u4efb\u4f55\u53ef\u7528\u7684\u6e20\u9053\u8054\u7cfb\u3002\n-\u56de\u5230\u9876\u7aef-", "note_en": "What is it?  \u00a0\u00a0\u00a0   For what is it?  \u00a0\u00a0\u00a0   Get it?  \u00a0\u00a0\u00a0   Use it?  \u00a0\u00a0\u00a0   Get help?  \u00a0\u00a0\u00a0   Contribute?       Latest stable version:   2.0.5  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2014\u2014 \u00a0\u00a0\u00a0 Nightly builds:   currently not available       A new webpage is on the way \u00a0 -- \u00a0 having a new SikuliX logo     \u00a0\u00a0\u00a0\u00a0\t  ... visit the news blog - enjoy!      \u2026 in Huichol Indian culture: the power to see and understand things unknown.  (Thanks for the  picture showing a Sikuli)  Sikuli was started somewhen in 2009 as an open-source research project at the  User Interface Design Group at  MIT by Tsung-Hsiang Chang and Tom Yeh. Both left the project at Sikuli-X-1.0rc3 during 2012, when I decided to take over development and support and name it  SikuliX.      SikuliX automates anything you see on the screen of your desktop computer running Windows, Mac or some Linux/Unix. It uses  image recognition powered by OpenCV\u00a0to identify GUI components. This is handy in cases when there is no easy access to a GUI&#39;s internals or the source code of the application or web page you want to act on.   SikuliX supports as scripting languages   \u2026 and you can use it in Java programming and programming/scripting with any Java aware programming/scripting language (Jython, JRuby, Scala, Clojure, \u2026).  Though\u00a0 SikuliX\u00a0is currently not available on any mobile device, it can be used with the respective emulators on a desktop computer or based on VNC solutions. A solution for Android devices based on ADB (Android Debugging Bridge) is in an early experimental stage,  Besides locating images on a screen\u00a0 SikuliX\u00a0can run the mouse and the keyboard to interact with the identified GUI elements. This is available for multi monitor environments and even for remote systems\u00a0with some restrictions.   SikuliX\u00a0comes with basic text recognition (OCR) and can be used to search text in images. This feature is  powered by Tesseract.  SikuliX is a Java application, that works on Windows, macOS and most Linux/Unix systems.    \u2014 back to top \u2014     You want to automate some repetitive tasks in   ... and you do not have adequate tools at hand.  You want to test applications or web pages, that are under development.  You want to create usage documentation or training material, that run live on the addressed application or web page.   You already have tools and workflows for that, but you want to add the specific features of  SikuliX to enhance your approach and improve efficiency and outcome. Using  SikuliX means doing  WYSIWYS:  What You See Is What You Script ;-)   \u2014 back to top \u2014     Before thinking about using  SikuliX, you have to assure, that you have a valid 64-Bit Java installation (version 8 or later).    But before downloading and fiddling around,  it is highly recommended to   read about the gory details in QUICKSTART .    SikuliX can be downloaded from \u00a0  SikuliX&#39;s Launchpad page \u00a0or with a bit more information and advices \u00a0  from here   \u2014 back to top \u2014       In any case you should have   read through QUICKSTART .  With  SikuliX there are two rather distinct usage scenarios:    One sets up and runs more or less complex  SikuliX workflows based on searching images and acting on GUI elements with mouse and keyboard. For this one uses the so called  SikuliX  IDE, that brings some basic support for editing and running scripts. In the Scripting usage scenario, you handle  SikuliX scripts named you-name-it.sikuli, which are folders containing the script file and the images you need for the workflow. You either run the scripts from within the  SikuliX  IDE or from the command line.  To get on the road you should  at least once scan the docs.    In a mature IDE (IntelliJ IDEA, Eclipse, NetBeans, ...) and/or some testing environment one integrates  SikuliX as a feature library using the available API&#39;s while programming in Java or Java aware/based languages (Jython, JRuby, Scala, Clojure, ...). If you work in this usage scenario, then you should  at least once scan the docs and look out for special information on how to use with Java.   \u2014 back to top \u2014    The first place to get help is to visit  SikuliX&#39;s Launchpad page. You might ask a question in the Answers section or scan it for anything helpful. You might check the FAQ section. Even the Bugs section might shed light on your current problem. \u2026 and even  just asking Google, might reveal valuable information from elsewhere in the net.  More information on  how to get help and insights.    \u2014 back to top \u2014     The sources and hence the development base is on  GitHub.   Any contribution is welcome and highly appreciated. Use any of the available channels, to get in contact.\n  \u2014 back to top \u2014", "posttime": "2022-02-14 23:38:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u52a8\u5316,automate,sikulix", "title": "SikuliX\u2013\u81ea\u52a8\u5316\u60a8\u5728\u8ba1\u7b97\u673a\u663e\u793a\u5668\u4e0a\u770b\u5230\u7684\u5185\u5bb9", "title_en": "SikuliX \u2013 Automate what you see on a computer monitor", "transed": 1, "url": "http://sikulix.com", "via": "", "real_tags": ["\u81ea\u52a8\u5316", "automate", "sikulix"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073179, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u7ec8\u7aef\u89c2\u770b\u7ecf\u5178\u6d77\u7ef5\u5b9d\u5b9d\uff01\u611f\u8c22\u6bcf\u4e00\u4f4d\u4e3b\u6f14\u3001\u5206\u53c9\u3001\u64b0\u5199\u95ee\u9898\u3001\u8bf7\u6c42\u62c9\u62fd\u7684\u4eba\uff0c\u4ee5\u53caspongebob cli\u7684\u7528\u6237\uff01\n#Sudo\u4e0d\u662f&#39\uff1b\u53ea\u8981\u4f60&#39\uff1b\u6211\u4eec\u5728Rootgit\u514b\u9686\u4e2dhttps://github.com/trakBan/spongebob-cli.gitcd spongebob clichmod+x spongebob clisudo python\u5b89\u88c5\u7a0b\u5e8f\u3002py\u5b89\u88c5\n\u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff0c\u5b83\u5c06\u5217\u51fa\u6240\u6709\u7684\u5267\u96c6\uff0c\u5e76\u5141\u8bb8\u60a8\u64ad\u653e\u5b83\u4eec--\u4e0b\u8f7d|-d\uff0c\u7528\u6cd5\u2014\u2014\u4e0b\u8f7d{a number of a\u63d2\u66f2}\uff0c\u8fd9\u5c06\u5728\u8fd0\u884c\u547d\u4ee4\u7684\u76ee\u5f55\u4e0b\u4e0b\u8f7d\u8be5\u89c6\u9891--\u4e0b\u8f7d\u5168\u90e8|-da\uff0c\u7528\u6cd5\u2014\u2014\u4e0b\u8f7d\u5168\u90e8\uff0c\u8fd9\u5c06\u4e0b\u8f7d\u5b83\u522e\u4e0b\u7684\u6bcf\u4e00\u4e2a\u6d77\u7ef5\u5b9d\u5b9d\u89c6\u9891--binge |-b\uff0c\u7528\u6cd5\u6d77\u7ef5\u5b9d\u5b9dcli\u2014\u2014binge\uff0c\u8fd9\u662f\u7528\u6765\u5f00\u59cb\u7b2c\u4e00\u96c6\u5e76\u4e00\u76f4\u73a9\u5230\u6700\u540e\u4e00\u96c6\u7684--list |-l\uff0c\u7528\u6cd5--list\uff0c\u8fd9\u5c06\u5217\u51fa\u6240\u6709\u5267\u96c6\uff0c\u7136\u540e\u9000\u51fa\u8282\u76ee--list |-l\uff0c\u7528\u6cd5--list{number}\u8fd9\u5c06\u663e\u793a\u60a8\u63d0\u4f9b\u7684\u9650\u5236\u7684\u96c6\u6570--play |-p\u7528\u6cd5\u2014\u2014play{a number of a spice}\uff0c\u8fd9\u5c06\u64ad\u653e\u8be5\u63d2\u66f2\u800c\u4e0d\u5217\u51fa\u63d2\u66f2--random |-r\uff0c\u7528\u6cd5\u6d77\u7ef5\u5b9d\u5b9dcli\u2014\u2014random\uff0c\u8fd9\u5c06\u64ad\u653e\u4e00\u4e2a\u968f\u673a\u63d2\u66f2--help |-h\u7528\u6cd5--help\u8fd9\u5c06\u6253\u5370\u6bcf\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\u3002\n\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u4e86mpv\u548cyoutube dl\u3002\u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5youtube dl\u3002py\u6ca1\u6709\u6b63\u786e\u5b89\u88c5\n\u5982\u679c\u4f60\u6ca1\u6709&#39\uff1byoutube dl\u53ea\u6709\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u4f60\u7684\u3002zshrc\u6216\u3002\u7528bashrc\u641c\u7d22youtube dl\uff0c\u5e76\u5c06\u5176\u6307\u5411\u4f60\u7684\u53c9\u5b50\u3002", "note_en": "Watch classic spongebob from the terminal!Thanks to everyone that is starring, forking, writing issues, pull requesting and just users of spongebob-cli!\n       #Sudo isn&#39;t required as long as you&#39;re in Rootgit clone https://github.com/trakBan/spongebob-cli.git cd spongebob-clichmod +x spongebob-clisudo python setup.py install\n    If the programm was ran without arguments it will list all the episodes and it will let you play them. --download | -d, usage --download {a number of a episode}, This will download that video under a directory the command was run. --download-all | -da, usage --download-all, This will download every spongebob video it scrapes. --binge | -b , usage spongebob-cli --binge, This is used to start the first episode and play until the last episode. --list | -l, usage --list, this will list all the episodes and then exit the program. --list | -l, usage --list {number} this will show the number of episodes with the limit you provided. --play | -p usage --play {a number of a episode}, This will play the episode without listing the episodes. --random | -r, usage spongebob-cli --random, This will play a random episode. --help | -h usage --help this will print what each argument does.\n                   Check if you have mpv and youtube-dl installed. You can also install  youtube-dl through your package manager if  setup.py did not install it correctly\n If you don&#39;t have youtube-dl but a fork of it, make a alias in your .zshrc or .bashrc for youtube-dl and direct it to your fork.", "posttime": "2022-02-14 23:22:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cli,spongebob,\u7528\u6cd5", "title": "Spongebob CLI\u2013\u4ece\u7ec8\u7aef\u89c2\u770b\u7ecf\u5178\u6d77\u7ef5\u5b9d\u5b9d", "title_en": "Spongebob-CLI \u2013 Watch classic spongebob from the terminal", "transed": 1, "url": "https://github.com/trakBan/spongebob-cli", "via": "", "real_tags": ["cli", "spongebob", "\u7528\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073178, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u771f\u7684\u5f88\u559c\u6b22\u56f4\u68cb\u7f16\u7a0b\u8bed\u8a00\u3002\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b83\u65f6\uff0c\u5b83\u770b\u8d77\u6765\u6709\u70b9\u6ed1\u7a3d\uff0c\u4f46\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5f53\u4f60\u53d1\u73b0\u7f16\u5199\u670d\u52a1\u5668\u8f6f\u4ef6\u662f\u591a\u4e48\u65b9\u4fbf\u65f6\uff0c\u4f60\u4f1a\u89c9\u5f97\u201c\u554a\uff0c\u6211\u660e\u767d\u4e86\u201d\u2014\u2014\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u4f46\u5c31\u50cf\u5728\u4efb\u4f55\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u6709\u51e0\u4ef6\u4e8b\u771f\u7684\u5f88\u70e6\u4eba\u3002\nJava\u505a\u5f97\u5f88\u597d\u7684\u4e00\u4ef6\u4e8b\u662fJavadoc\u3002\u60a8\u53ef\u80fd\u559c\u6b22\uff0c\u4e5f\u53ef\u80fd\u4e0d\u559c\u6b22\u6587\u6863\u7684\u8bed\u6cd5\u6216\u5448\u73b0\u65b9\u5f0f\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u7279\u6027\u3002\u6bd4\u5982\u80fd\u591f\u663e\u5f0f\u5730\u8bb0\u5f55\u53c2\u6570\u3001\u8fd4\u56de\u503c\u548c\u53ef\u80fd\u4f1a\u88ab\u629b\u51fa\u7684\u5f02\u5e38\u3002\u5728\u8bb0\u5f55\u65b9\u6cd5\u65f6\uff0c\u60a8\u5e0c\u671b\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b83\u4e0e\u60a8\u5e94\u8be5\u5982\u4f55\u6d4b\u8bd5\u548c\u8bc4\u4f30\u4ee3\u7801\u6709\u5173\u3002\n\u7f16\u5199\u65b9\u6cd5\uff0c\u8bb0\u5f55\u53c2\u6570\u3001\u8fd4\u56de\u503c\u548c\u5f02\u5e38\uff0c\u4ee5\u53ca\u524d\u7f6e\u548c\u540e\u7f6e\u6761\u4ef6\u3002\u7136\u540e\uff0c\u5f53\u60a8\u7f16\u5199\u6d4b\u8bd5\u65f6\uff0c\u60a8\u6d4b\u8bd5\u7684\u662f\u6587\u6863\u4e2d\u627f\u8bfa\u7684\u5185\u5bb9\u3002\u4f60\u4e0d\u8003\u8651\u5b9e\u73b0\u2014\u2014\u4f60\u53ea\u4f7f\u7528Javadoc\u3002\u5982\u679c\u8fd9\u4e2a\u65b9\u6cd5\u7b26\u5408tin\u4e0a\u7684\u8bf4\u660e\uff0c\u5f88\u597d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7ee7\u7eed\u7f16\u5199\u6d4b\u8bd5\uff0c\u5728\u4e86\u89e3\u65b9\u6cd5\u5185\u90e8\u60c5\u51b5\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002\u4f46\u5982\u679c\u4f60\u4e0d\u80fd\u4fe1\u5b88\u627f\u8bfa\uff0c\u4f60\u5fc5\u987b\u5148\u56de\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u505a\u6cd5\u3002\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u8fd9\u4f1a\u63ed\u793a\u51fa\u4f60\u7684\u627f\u8bfa\u5e76\u4e0d\u603b\u662f\u4f60\u6240\u80fd\u5b9e\u73b0\u7684\u3002\u8fd4\u56de\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6216\u8005\u7ed9\u65b9\u6cd5\u8f93\u5165\u5f02\u5e38\u7684\u8f93\u5165\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8fd9\u5c24\u5176\u5bb9\u6613\u641e\u7838\u3002\n\u5bf9\u4e8e\u5e94\u8be5\u5982\u4f55\u5f7b\u5e95\u5730\u8bb0\u5f55\u548c\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6709\u4e0d\u540c\u7684\u601d\u60f3\u6d41\u6d3e\u3002\u6211\u7684\u76ee\u6807\u5f88\u7b80\u5355\uff1a\u7ed9\u5b9a\u6587\u6863\u548c\u6d4b\u8bd5\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u91cd\u65b0\u521b\u5efa\u6d4b\u8bd5\u4e2d\u7684\u4ee3\u7801\u3002\n\u5c06\u6587\u6863\u548c\u6d4b\u8bd5\u89c6\u4e3a\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u4f60\u5e94\u8be5\u80fd\u591f\u5220\u9664\u548c\u91cd\u65b0\u521b\u5efa\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6587\u6863\u548c\u6d4b\u8bd5\u3002\n\u6709\u6e05\u6670\u6807\u8bc6\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u7684\u6807\u8bb0\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u81ea\u52a8\u68c0\u67e5\u662f\u5426\u786e\u5b9e\u8bb0\u5f55\u4e86\u6240\u6709\u5e94\u8be5\u8bb0\u5f55\u7684\u5185\u5bb9\u3002\u8be5\u5de5\u5177\u53ef\u4ee5\u6307\u51fa\u60a8\u61d2\u60f0\u7684\u5730\u65b9\u3002\n\u6211\u4e0d\u559c\u6b22\u56f4\u68cb\u3002\u5f53\u60a8\u4e60\u60ef\u4e8e\u8ba9\u5de5\u5177\u5e2e\u52a9\u60a8\u4e86\u89e3\u81ea\u5df1\u7684\u9a6c\u864e\u4e4b\u5904\u65f6\uff0cGo\u6587\u6863\u6ce8\u91ca\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u5012\u9000\u3002\u60a8\u6ca1\u6709\u4efb\u4f55\u7528\u4e8e\u6307\u5b9a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u8bed\u6cd5\u3002\u800c\u4e14\u5bf9\u6ce8\u91ca\u7684\u8981\u6c42\u51e0\u4e4e\u6beb\u65e0\u7528\u5904\uff1a\u6ce8\u91ca\u5fc5\u987b\u4ee5\u51fd\u6570\u540d\u5f00\u5934\uff0c\u5e76\u4e14\u540d\u79f0\u540e\u81f3\u5c11\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u3002\u662f\u7684\uff0c\u56e0\u4e3a\u8fd9\u786e\u4fdd\u4e86\u5408\u7406\u7684\u8bc4\u8bba\uff0c\u5bf9\u5417\uff1f\n\u60a8\u5e94\u8be5\u8bb0\u5f55\u53c2\u6570\uff0c\u4f46\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u597d\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u7cbe\u786e\u5730\u5728\u6ce8\u91ca\u4e2d\u67e5\u627e\u53c2\u6570\u6587\u6863\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u597d\u7684\u65b9\u6cd5\u4ee5HTML\u6216\u5176\u4ed6\u683c\u5f0f\u5448\u73b0\u5b83\u3002\u4f5c\u4e3a\u6587\u6863\u7684\u4f7f\u7528\u8005\uff0c\u60a8\u6700\u7ec8\u4f1a\u626b\u63cf\u6587\u672c\u4e2d\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5fc5\u987b\u5411\u4e0b\u6d4f\u89c8\u51fd\u6570\u7b7e\u540d\u3002\n\u7531\u4e8e\u6ca1\u6709\u8bb0\u5f55\u53c2\u6570\u7684\u597d\u65b9\u6cd5\uff0c\u5f00\u53d1\u4eba\u5458\u5f80\u5f80\u4f1a\u5bf9\u6b64\u9a6c\u864e\u3002\u5305\u62ec\u6211\u81ea\u5df1\u3002\u9605\u8bfb\u6587\u6863\u4f1a\u5e26\u6765\u66f4\u5927\u7684\u8ba4\u77e5\u5f00\u9500\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u5c06\u67e5\u627e\u67d0\u4e9b\u5185\u5bb9\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u7cbe\u786e\u6027\u4e2d\u53d7\u76ca\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u4e0d\u5f97\u4e0d\u9605\u8bfb\u4ee3\u7801\uff0c\u56e0\u4e3a\u6587\u6863\u4e0d\u591f\u7cbe\u786e\u3002Java\u5b9e\u9645\u4e0a\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u6ca1\u53bb\u3002\n\u6700\u521d\u7684Go-linter\u7684\u7ef4\u62a4\u8005\u503e\u5411\u4e8e\u7ad9\u5728\u6ca1\u6709\u5e2e\u52a9\u7684\u4e00\u8fb9\u2014\u2014\u575a\u6301\u8ba4\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6709\u6548\u5b9e\u8df5\u5e94\u8be5\u4ea7\u751flinter\u8b66\u544a\u3002\u4f8b\u5982\uff0c\u5f53linter\u62b1\u6028\u516c\u5171\u51fd\u6570\u8fd4\u56de\u672a\u62a5\u544a\u7684\u7ed3\u6784\u65f6\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u505a\u662f\u6709\u6b63\u5f53\u7406\u7531\u7684\uff0c\u5e94\u8be5\u53ef\u4ee5\u5173\u95ed\u8b66\u544a\u3002\u4f46\u4efb\u4f55\u8fd9\u6837\u505a\u7684\u8bf7\u6c42\u90fd\u88ab\u62d2\u7edd\u4e86\u3002\n\u6211\u8bb0\u5f97\u770b\u5230\u7684\u4e00\u4e2a\u66f4\u8352\u8c2c\u7684\u5efa\u8bae\u662f\u201c\u597d\u5427\uff0c\u90a3\u5c31\u5ffd\u7565\u6389\u6797\u7279\u5bf9\u6b64\u7684\u62b1\u6028\u5427\u201d\u3002\n\u8fd9\u4e0d\u662f\u597d\u5de5\u5177\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u4e0d\u5f97\u4e0d\u5141\u8bb8\u751f\u6210\u4ea7\u751f\u8b66\u544a\u7684\u7248\u672c\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u88ab\u8b66\u544a\u6df9\u6ca1\uff0c\u770b\u4e0d\u5230\u4f60\u771f\u6b63\u5173\u5fc3\u7684\u90a3\u4e9b\u3002\u8fd8\u8bb0\u5f97Java\u4e2d\u5178\u578bMaven\u6784\u5efa\u7684\u8f93\u51fa\u5417\uff1f\u592a\u5435\u4e86\uff0c\u4f60\u6839\u672c\u770b\u4e0d\u5230\u6709\u65b0\u7684\u8b66\u544a\u51fa\u73b0\u3002\u56e0\u6b64\uff0c\u8b66\u544a\u53d8\u5f97\u6beb\u65e0\u7528\u5904\u3002\n\u4e0d\u542c\u53d6\u5f00\u53d1\u8005\u610f\u89c1\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f\u73b0\u5728\u6211\u4eec\u6709\u4e86\u597d\u51e0\u6839\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u7528\u4e00\u6839\u3002\u5fc5\u987b\u5b89\u88c5\u3001\u7406\u89e3\u548c\u7ba1\u7406\u3002\u867d\u7136\u4f60\u53ef\u80fd\u4f1a\u8038\u8038\u80a9\uff0c\u8bf4\u8fd9\u662f\u4ef6\u597d\u4e8b\uff0c\u4f46\u5982\u679c99%\u7684\u5f00\u53d1\u4eba\u5458\u90fd\u80fd\u8fbe\u6210\u4e00\u81f4\uff0c\u5e76\u4e14\u8fd9\u53ef\u4ee5\u6210\u4e3a\u6807\u51c6\u5de5\u5177\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u5c31\u66f4\u6709\u7528\u4e86\u3002\u5b83\u4e0d\u5fc5\u8981\u5730\u5206\u5272\u4e86Go\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\n\u867d\u7136\u6211\u4eec\u8ba8\u8bba\u7684\u662f\u788e\u7247\u5316\uff0c\u4f46Go\u5728\u65e5\u5fd7\u8bb0\u5f55\u65b9\u9762\u4e5f\u53ef\u4ee5\u4eceJava\u5b66\u4e60\u3002\u4e0d\u662f\u56e0\u4e3aJava\u505a\u7684\u6bcf\u4ef6\u4e8b\u90fd\u662f\u5bf9\u7684\uff0c\u800c\u662f\u56e0\u4e3aJava\u505a\u4e86\u5f88\u591a\u9519\u8bef\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u5b66\u4e60\u3002\n\u5f53\u65e5\u5fd7\u8bb0\u5f55\u6210\u4e3aJava1.4\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5df2\u7ecf\u5b58\u5728\u5927\u91cf\u65e5\u5fd7\u8bb0\u5f55\u6846\u67b6\u3002\u5176\u4e2d\u4e00\u4e9b\u76f8\u5f53\u53ef\u6015\u7684\u4e1c\u897f\u53c8\u5927\u53c8\u7b28\u53c8\u6162\u3002\u4f46\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u5173\u6ce8\u7684\u662f\u8fd9\u4e9b\u5de5\u5177\u4e2d\u7684\u4e00\u4e9b\uff0c\u5b83\u4eec\u5c06\u65e5\u5fd7\u6d88\u606f\u5448\u73b0\u5230\u78c1\u76d8\u3001\u7f51\u7edc\u6216\u63a7\u5236\u53f0\u4e0a\u3002\u4eba\u4eec\u9009\u62e9\u6846\u67b6\u662f\u57fa\u4e8e\u7f8e\u5b66\uff0c\u800c\u4e0d\u662f\u6280\u672f\u5408\u7406\u6027\u3002\n\u722a\u54c7\u4f10\u6728\u4e1a\u6700\u7ec8\u6210\u4e3a\u4e00\u573a\u5f7b\u5934\u5f7b\u5c3e\u7684\u707e\u96be\u3002\u8981\u60f3\u4ece\u6df7\u4e71\u4e2d\u6446\u8131\u51fa\u6765\uff0c\u9700\u8981\u505a\u5f88\u591a\u5de5\u4f5c\u3002\u662f\u7684\uff0cjava\u3002util\u3002\u4f10\u6728\u786e\u5b9e\u6709\u5f31\u70b9\u3002\u5806\u6808\u8ddf\u8e2a\u751f\u6210\u8fc7\u53bb\u5f88\u6162\uff0c\u4f46\u5f88\u5feb\u5c31\u4e0d\u518d\u662f\u95ee\u9898\u4e86\u3002\u5b83\u5e94\u8be5\u6709\u4e00\u4e2aAPI\uff0c\u5141\u8bb8\u60a8\u5c06\u63d2\u503c\u5ef6\u8fdf\u5230\u60a8\u77e5\u9053\u65e5\u5fd7\u6d88\u606f\u662f\u5426\u4f1a\u88ab\u8f93\u51fa\u65f6\u3002\u4f46\u5b83\u975e\u5e38\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u800c\u4e14\u5b83\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u8d77\u70b9\uff0c\u53ef\u4ee5\u4e3a\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u652f\u6301\u3002\n\u6240\u4ee5Go\u80af\u5b9a\u4ece\u4e2d\u5b66\u5230\u4e86\u4ec0\u4e48\uff1f\u4e0d\uff0cGo\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u5b66\u5230\u3002\u5185\u7f6e\u7684\u65e5\u5fd7\u8bb0\u5f55\u662f\u6700\u539f\u59cb\u7684\u3002\u5b83\u751a\u81f3\u6ca1\u6709\u65e5\u5fd7\u7ea7\u522b\u7684\u6982\u5ff5\u3002\u66f4\u4e0d\u7528\u8bf4\u4efb\u4f55\u6709\u7528\u7684\u7ed3\u6784\u4e86\u3002\u4e3a\u4ec0\u4e48\u8bbe\u8ba1\u4eba\u5458\u4e0d\u80fd\u5728\u5f00\u59cb\u4f7f\u7528\u65e5\u5fd7\u5305\u4e4b\u524d\uff0c\u82b1\u4e00\u4e24\u5929\u65f6\u95f4\u4e0e\u7ecf\u9a8c\u4e30\u5bcc\u7684Java\u7a0b\u5e8f\u5458\u4ea4\u8c08\uff0c\u5e76\u5c1d\u8bd5\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u65e5\u5fd7\u7684\u77e5\u8bc6\uff1f\u77e5\u8bc6\u662f\u5b58\u5728\u7684\u3002\u4ed6\u4eec\u53ea\u662f\u6ca1\u6709\u5229\u7528\u5b83\u3002\n\u7ed3\u679c\u5982\u4f55\uff1f\u6211\u4eec\u73b0\u5728\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65e5\u5fd7\u6846\u67b6\uff0c\u62bd\u8c61\u4e0d\u662f\u5f88\u597d\uff0c\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u767b\u5f55Go\uff0c\u800c\u4e14\u95ee\u9898\u4f3c\u4e4e\u6bcf\u5e74\u90fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u5927\u591a\u6570\u8bed\u8a00\u90fd\u6709strftime\uff083\uff09\u7684\u8bed\u6cd5\u53d8\u4f53\u3002\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u90fd\u77e5\u9053\u8fd9\u79cd\u8bed\u6cd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u9760\u8bb0\u5fc6\u4f60\u4e0d\u5fc5\u67e5\u3002\u90a3\u4e48\uff0c\u4f60\u5230\u5e95\u4e3a\u4ec0\u4e48\u8981\u53d1\u660e\u4e00\u79cd\u65b0\u7684\u65f6\u95f4\u683c\u5f0f\u8bed\u6cd5\uff0c\u8981\u6c42\u4f60\u8bb0\u4f4f\u4e00\u4e2a\u201c\u795e\u5947\u201d\u7684\u65f6\u95f4\u6233\uff0c\u5e76\u8bd5\u56fe\u8bb0\u4f4f\u5b83\u662f\u5426\u9075\u5faa\u4e86\u7f8e\u56fd\u4e0d\u5408\u7406\u7684\u6708/\u65e5\u987a\u5e8f\u7684\u505a\u6cd5\u3002\u4e0d\u8fc7\uff0c\u5b83\u6709\u4e00\u4e2a\u8865\u507f\u529f\u80fd\uff1a\u66f4\u5bb9\u6613\u5728\u5c0f\u6570\u79d2\u5185\u6307\u5b9a\u6240\u9700\u7684\u4f4d\u6570\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5e76\u6ca1\u6709\u964d\u4f4e\u8ba4\u77e5\u5f00\u9500\u3002", "note_en": "I really like the Go programming language. It looks a bit funny the first time you start using it, but after a while you get that \u201cahh, I see\u201d-feeling due when you discover how convenient it is when writing server software. But as in any language there are a few things that are really annoying.\n  One thing that Java did well was Javadoc. You may or may not like the syntax or how the documentation is rendered, but it had some important features. Like being able to explicitly document parameters, return values and exceptions that might get hurled at you. When documenting methods you want this because it ties into how you should be testing and evaluating the code.\n Write the method, document the parameters, return values and exceptions, along with the pre and post-conditions. Then, when you write the test, what you test against is what was promised in the documentation. You don\u2019t think about the implementation - you only use the Javadoc. If the method does what it says on the tin, great, then you can go on to writing the tests that operate with some knowledge of what goes on inside the method. But if you can\u2019t keep your promises, you have to go back and fix that first.\n This is a good practice. Some portion of the time, this will reveal that what you promise isn\u2019t always what you deliver. It is particularly easy to mess up what happens when you return or what happens if you feed a method unusual inputs.\n There are different schools of thought about how thoroughly you should document and test code. My goal for this is simple:  given the documentation and the tests you should be able to re-create the code under test.\n Think of the documentation and tests as a cast of your code. You should be able to delete and re-create the code with only the docs and the tests.\n Having markup that clearly identifies parameters, return values etc means you can automate checking that you have indeed documented everything you should document. The tooling can point out where you have been lazy.\n I\u2019m not fond of Go documentation conventions. When you are used to letting the tooling help you see where you have been sloppy, Go documentation comments are a big step back. You don\u2019t have any syntax for specifying parameters and return values. And the requirements for comments are pretty much useless: comments have to begin with the function name and have at least one more word after the name. Yeah, because that ensures sensible comments, right?\n You should be documenting the parameters, but there really isn\u2019t any good way to programmatically find parameter documentation in the comment with any precision. Which means there is no good way to render it in HTML or other formats. As a consumer of documentation you end up scanning blobs of text for parameters and return values while having to glance down at the function signature.\n Since there is no good way to document parameters developers tend to get sloppy about this. Myself included. Reading documentation carries a greater cognitive overhead which is paid by everyone who is going to look something up and who could benefit from precision. I often find myself having to read the code because the documentation is lacking in precision. Java actually got this right. Go didn\u2019t.\n  The maintainers of the original Go linter tended to be a bit on the unhelpful side - insisting that valid practices that were in widespread use should produce linter warnings. For instance when the linter complains about public functions that return unexported structs. In some cases there are valid reasons to do so and it should be possible to turn off the warning for that. But any requests to do that were just rejected.\n One of the more nonsensical suggestions I remember seeing was \u201cwell, then just ignore that the linter complains about this\u201d.\n That\u2019s not how good tooling works. If you have to allow builds that produce warnings, you will soon drown in warnings and you won\u2019t see the ones that you actually care about. Remember the output from a typical Maven build in Java? It was so noisy you\u2019d never spot a new warning turning up. So warnings became entirely useless.\n The result of not listening to developers? Rather than have one linter that everyone uses, now we have several. Which have to be installed, understood and managed. And while you may shrug and say this is a good thing, it would have been more useful to have a linter 99% of developers can agree on and which can be part of the standard tooling. It unnecessarily fragments how Go is used.\n   And while we are on the topic of fragmentation, Go could also have learned from Java when it comes to logging. Not because Java did everything right, but because Java did a lot of things wrong that we can learn from.\n When logging became part of the standard library in Java 1.4 there already existed a fauna of logging frameworks. Some of them rather beastly things that were big, clumsy and slow. But what most programmers focused on was the bits of these tools that rendered log messages onto disk, network or console. People chose frameworks based on aesthetics - not technical soundness.\n The Java logging landscape ended up as an unmitigated disaster. With a lot of work going into trying to abstract your way out of the mess. Yes,  java.util.logging did have weaknesses. Stack trace generation used to be slow, but that quickly stopped being a problem. And it should have had an API that allowed you to postpone interpolation to when you know if the log message will ever be output. But it was minimal, easy to understand and very easy to use and it was a better starting point for evolving something that could have ticked the boxes of most developers.\n So surely Go learned something from this? No. Go seems to have learnt nothing. The built-in logging is about as primitive as it gets. It doesn\u2019t even have the concept of log levels. Let alone any useful structure. Why couldn\u2019t the designers of this have spent a day or two talking to an experienced Java programmer and try to learn something about logging before embarking on the  log package? The knowledge existed. They just didn\u2019t tap into it.\n The result? We now have lots of different logging frameworks, the abstractions aren\u2019t very good, there is no  one way to do logging in Go, and the problem seems to get a little bit worse every year.\n   Most languages have some variant of the syntax of  strftime(3). Most programmers know how this syntax works. By heart. You don\u2019t have to look it up. Why on earth do you then have to invent a new syntax for time formats that requires you to memorize a \u201cmagic\u201d timestamp, and try to remember if it follows the broken US practice of illogical month/day ordering. It has one redeeming feature though: it is easier to specify how many digits you want in fractional seconds. But this wasn\u2019t a problem in need of fixing. And the solution didn\u2019t make the cognitive overhead any lower.", "posttime": "2022-02-14 23:18:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6446\u8131,annoyances,\u65e5\u5fd7", "title": "\u6446\u8131\u70e6\u607c", "title_en": "Go Annoyances", "transed": 1, "url": "https://borud.no/notes/2022/godoc/", "via": "", "real_tags": ["\u6446\u8131", "\u65e5\u5fd7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Sun\u7684Fishworks\u56e2\u961f\u7684\u5e03\u4f26\u4e39\u00b7\u683c\u96f7\u683c\uff08Brendan Gregg\uff09\u5728\u8bf1\u5bfc\u78c1\u76d8\u5ef6\u8fdf\u65b9\u9762\u6709\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u53d1\u73b0\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Brendan\u7684\u535a\u5ba2\uff1ahttp://blogs...", "note_en": "Brendan Gregg from Sun's Fishworks team makes an interesting discovery about inducing disk latency.  For more details, see Brendan's blog entry: http://blogs...", "posttime": "2022-02-14 23:18:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u786c\u76d8,rotational,brendan", "title": "\u5bf9\u65cb\u8f6c\u786c\u76d8\u5927\u558a\u5927\u53eb\u4f1a\u5f71\u54cd\u6027\u80fd\uff082008\uff09", "title_en": "Yelling at rotational hard disks perturbs performance (2008)", "transed": 1, "url": "https://www.youtube.com/watch?v=tDacjrSCeq4", "via": "", "real_tags": ["\u6027\u80fd", "\u786c\u76d8", "brendan"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec&#39\uff1b\u6211\u5c06\u7ee7\u7eed\u6211\u4eec\u7684\u65c5\u7a0b\uff0c\u5728\u74e6\u62c9\u7f16\u5199hello\uff0cworld\u7a0b\u5e8f\uff0c\u4f46\u8fd9\u6b21\u662fGTK\uff084\uff09\u5e93\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u540d\u4e3aHello\u7684\u65b0\u6587\u4ef6\u3002\u74e6\u62c9\u548c\u6885\u56e0\u3002\u74e6\u62c9\u3002\u662f\u7684\uff0c\u6211\u4eec\u7684\u8ba1\u5212\u662f\u4ece\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684\u7ed3\u5c3e\u7ee7\u7eed\uff0c\u7136\u540e\u4f7f\u7528GTK\u6162\u6162\u6784\u5efahello\uff0cworld\u7684\u5de5\u4f5c\u7248\u672c\u3002\n\u6253\u5f00\u8fd9\u4e2a\u65b0\u521b\u5efa\u7684main\u3002vala\u548ccopy\u7f16\u5199\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4e4b\u524d\u5728hello/main\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u540c\u3002\u74e6\u62c9\u6863\u6848\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cmain\uff08\uff09\u65b9\u6cd5\u3002\nint main\uff08string[]args\uff09{string name=&#39\uff1bworld&#39\uff1bvar hello=new hello\uff08name\uff09\uff1bhello.greet\uff08\uff09\uff1breturn 0\uff1b}\n\u63a5\u4e0b\u6765\uff0c\u6253\u5f00\u65b0\u521b\u5efa\u7684Hello\u3002vala\u548ccopy\u7f16\u5199\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4e4b\u524d\u5728hello/hello\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u540c\u3002\u74e6\u62c9\u6863\u6848\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5927\u5bb6\u597d\u3002\n\u516c\u5171\u7c7bHello{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}public void greet\uff08\uff09{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0c%s\\n&#34\uff1b\uff0cthis.name\uff09\uff1b}\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u901a\u8fc7Gtk\u6269\u5c55\u8fd9\u4e2aHello\u7c7b\u3002\u5e94\u7528\u7c7b\u5982\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u6b63\u5728\u521b\u5efaGTK\u5e94\u7528\u7a0b\u5e8f\uff01\u6b64\u6269\u5c55\u901a\u8fc7\uff1aoperator\u5b8c\u6210\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}public void greet\uff08\uff09{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0c%s\\n&#34\uff1b\uff0cthis.name\uff09\uff1b}\n\u6211\u4eec\u4e0d\u518d\u9700\u8981\u8fd9\u4e2agreet\uff08\uff09\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec&#39\uff1bWe\u2019\u6211\u4eec\u5bf9\u5728\u7a97\u53e3\uff08\u6216\u5e94\u7528\u7a0b\u5e8f\uff09\u800c\u4e0d\u662f\u7ec8\u7aef\u4e2d\u663e\u793ahello\uff0cworld\u611f\u5174\u8da3\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}\n\u6211\u4eec\u4e13\u95e8\u521b\u5efa\u4e86name\u53d8\u91cf\uff0c\u4ee5\u4fbf\u5728greet\uff08\uff09\u65b9\u6cd5\u4e2d\u6253\u5370\u5b83\u7684\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u6ca1\u6709greet\uff08\uff09\u65b9\u6cd5\uff0c\u6240\u4ee5\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u8ba4\u4e3a\u6211\u4eec\u73b0\u5728\u9700\u8981\u4efb\u4f55\u4e0ename\u53d8\u91cf\u5173\u8054\u7684\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u662f\u7684\uff0c\u6211\u4eec\u786e\u5b9e\u9700\u8981\u8fd9\u79cd\u516c\u5f00\u7684\u65b9\u6cd5\u3002\u90a3\u4e48\uff0c\u8ba9&#39\uff1bs\u6709\u7a7a\u7684public\u65b9\u6cd5\u4f9b\u8fdb\u4e00\u6b65\u4f7f\u7528\u3002\n\u6839\u636e\u6587\u6863\uff0c\u6211\u4eec\u9700\u8981\u4ece\u8fd9\u4e2a\u516c\u5171\u65b9\u6cd5\u8c03\u7528Object\uff08\uff09\u65b9\u6cd5\u3002\u8fd9\u4e2aObject\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u2014\u2014application_id\u3001\u53cd\u5411\u57df\u540d\u8868\u793a\u6cd5\u4e2d\u7684\u552f\u4e00\u5e94\u7528\u7a0b\u5e8fid\u6216RDN\uff0c\u4ee5\u53ca\u5e26\u6709\u5176\u4e2d\u4e00\u4e2a\u9884\u5b9a\u4e49\u503c\u548cApplicationFlags\u7684\u6807\u5fd7\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\u3002\u603b\u4e4b\uff0c\u4f60\u9700\u8981\u8f93\u5165\u8fd9\u6837\u7684\u5185\u5bb9\u3002\u5982\u679c\u60a8\u6709GitHub/GitLab\u5e10\u6237\uff0c\u8bf7\u6839\u636e\u60a8\u7684\u504f\u597d\u66f4\u6539\u5e94\u7528\u7a0b\u5e8fid\u7684\u503c\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\n\u6211\u4eec&#39\uff1b\u6211\u5c06\u5728\u5c06\u6765\u8ba8\u8bba\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684id\u548c\u6807\u5fd7\u3002\u73b0\u5728\uff0c\u60a8\u9700\u8981\u8f93\u5165\u4e00\u4e9b\u4e1c\u897f\uff0c\u4ee5\u4fbfGTK\u6b63\u786e\u521d\u59cb\u5316\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83&#39\uff1b\u5b83\u5c31\u50cf\u4e00\u4e2a\u6846\u67b6\uff0c\u5199\u4e0b\u8fd9\u4e2a\u548c\u90a3\u4e2a\uff0c\u8ba9\u6211\u4eec\u6b63\u786e\u5730\u8c03\u7528\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}void activate\uff08\uff09{}\nGtk\u4e2d\u5df2\u5b58\u5728\u6b64activate\uff08\uff09\u65b9\u6cd5\u3002\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u505a\u7684\u662f\uff0c\u4f7f\u7528override\u5173\u952e\u5b57\u91cd\u5199\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\u91cd\u5199void activate\uff08\uff09{}\n\u6211\u60f3\u4f60\u4e0d\u4f1a&#39\uff1b\u4e0d\u8981\u5fd8\u8bb0\u8bbf\u95ee\u4fee\u9970\u7b26\u7684\u89c4\u5219\u3002\u5728\u8fd9\u4e2aactivate\uff08\uff09\u65b9\u6cd5\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u5982\u4e0b\u6240\u793a&#39\uff1b\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u8981\u6c42\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\u53d7\u4fdd\u62a4\u7684\u8986\u76d6\u65e0\u6548\u6fc0\u6d3b\uff08\uff09{}\n\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6fc0\u6d3b\u5e94\u7528\u7a0b\u5e8f\u3002\u540c\u6837\uff0c\u60a8\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u611f\u5230\u56f0\u60d1\u3002\u4f46\u662f\uff0c\u8fd9\u662f\u60a8\u9700\u8981\u952e\u5165\u7684\u7c7b\u4f3c\u4e8e\u6846\u67b6\u7684\u5185\u5bb9\uff08\u6211\u77e5\u9053\u5e93\uff0c\u968f\u4fbf\u4ec0\u4e48\uff09\uff01\n\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u88ab\u6fc0\u6d3b\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u3002\u663e\u793a\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u600e\u4e48\u6837\uff1f\u90a3&#39\uff1b\u8fd9\u5c31\u662f\u4f60&#39\uff1b\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\uff0c\u5bf9\u5417\uff01\n\u5728\u8fd9\u4e2aactivate\uff08\uff09\u65b9\u6cd5\u4e2d\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\u3002\u5728GTK\u4e2d\uff0c\u7a97\u53e3\u662f\u5c0f\u90e8\u4ef6\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u6240\u6709\u56fe\u5f62\u7ec4\u4ef6\u90fd\u662f\u5c0f\u90e8\u4ef6\uff0c\u5305\u62ec\u83dc\u5355\u3001\u6309\u94ae\u3001\u6807\u7b7e\u3001\u590d\u9009\u6846\u3001\u5217\u8868\u7b49\u7b49\u3002\u8fd9\u4e9b\u90fd\u662fGTK\u4e2d\u7684\u5c0f\u90e8\u4ef6\uff0cGTK\u5bf9\u6bcf\u4e2a\u5c0f\u90e8\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u7c7b\uff01\n\u8ba9&#39\uff1bs\u4f7f\u7528ApplicationWindow\u7c7b\u521b\u5efa\u7a97\u53e3\u5c0f\u90e8\u4ef6\u3002\u8fd9\u4e2aApplicationWindow\u7c7b\u63a5\u53d7\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8fd9\u4e2a\u7c7b\uff0c\u6216\u8005\u8fd9\u4e2a\u7c7b\u672c\u8eab\u5c31\u662f\u90a3\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08\u8bb0\u4f4f\uff0c\u6211\u4eec\u6269\u5c55\u4e86Gtk.application\uff0c\u5c06Hello\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\uff09\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1b}\n\u6211\u4eec\u521a\u521a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e2a\u7a97\u53e3\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u7a97\u53e3\u5bf9\u8c61\u4e0a\u663e\u793a\uff08\uff09\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5728activate\uff08\uff09\u65b9\u6cd5\u6267\u884c\u65f6\u5b9e\u9645\u663e\u793a\u5b83\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.show\uff08\uff09\uff1b}\n\u8fd9\u662f\u6211\u4eec\u7684\u7b80\u5355\u7a97\u53e3\u5e94\u7528\u7a0b\u5e8f\uff01\u5728\u6211\u4eec\u7ee7\u7eed\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5728main\u4e2d\u505a\u4e00\u4e9b\u5c0f\u7684\u4fee\u6539\u3002vala\u4f5c\u4e3a\u5f53\u524d\u4ee3\u7801\uff0c\u521b\u5efaHello\u7c7b\u7684\u5b9e\u4f8b\u5e76\u8fd0\u884cgreet\uff08\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4e0d\u518d\u6709\u6548\u3002\nint main\uff08string[]args\uff09{string name=&#39\uff1bworld&#39\uff1bvar hello=new hello\uff08name\uff09\uff1b\u8fd4\u56de0\uff1b}\n\u6211\u4eec\u4e5f\u4e0d\u9700\u8981name\u53d8\u91cf\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002\n\u5728\u8fd9\u4e2ahello\u5bf9\u8c61\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u6253\u7535\u8bdd\u3002\u65b9\u6cd5\u6765\u5b9e\u9645\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u3002\u6b64\u65b9\u6cd5\u63a5\u53d7args\u4f5c\u4e3a\u53c2\u6570\u3002\n\u8fd9run\uff08\uff09\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u8be5\u6574\u6570\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u663e\u5f0f\u76840\u3002\n\u6211\u4ece\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u590d\u5236\u4e86\u8fd9\u4e2a\u547d\u4ee4\uff0c\u60a8\u77e5\u9053\u8fd9\u5c06\u6839\u636e\u6211\u4eec\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u5c06hello\uff0cworld\u6253\u5370\u4e3a\u8f93\u51fa\u3002\n\u8fd9\u662f\u6b63\u786e\u7684\uff01\u4f46\u662f\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u547d\u4ee4\u518d\u505a\u4e00\u6b21\u4fee\u6539\uff0c\u56e0\u4e3a\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u6b63\u5728\u4f7f\u7528GTK\u5e93\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u901a\u77e5Vala\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u4f7f\u7528--pkg\u6807\u5fd7\uff0c\u540e\u8ddf\u5e93\u540d\u6216gtk4\uff08GTK\u5e93\u7684\u5b89\u88c5\u540d\uff09\u3002\u628a\u6240\u6709\u8fd9\u4e9b\u653e\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u9700\u8981\u8fd0\u884c\u7684\u547d\u4ee4\u3002\n\u8fd0\u884c\u6b64\u547d\u4ee4\u540e\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u9ed8\u8ba4\u7684200x200\u7a97\u53e3\uff0c\u5176\u6807\u9898\u4e3a\u5e94\u7528\u7a0b\u5e8f\u540d\uff0c\u4f8b\u5982Hello\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u6240\u8bf4\u7684hello\uff0cworld\u8282\u76ee&#39\uff1b\u4f60\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u770b\u4e0d\u5230hello\uff0cworld\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6253\u5370hello\uff0cworld\u800c\u4e0d\u662fhello\u4f5c\u4e3a\u6807\u9898\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u5c5e\u6027\u503c\u6765\u5b9e\u73b0\u3002\u7a97\u53e3\u6709\u5f88\u591a\u5c5e\u6027\uff0c\u5305\u62ectitle\uff08\u7a97\u53e3\u7684\u6807\u9898\uff09\u3001default_width\uff08\u7a97\u53e3\u7684\u9ed8\u8ba4\u5bbd\u5ea6\uff09\u3001default_height\uff08\u7a97\u53e3\u7684\u9ed8\u8ba4\u9ad8\u5ea6\uff09\u7b49\u7b49\u3002\n\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u5c06\u628ahello\uff0cworld\u5206\u914d\u7ed9window&#39\uff1bs title\u548c300\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u5bbd\u5ea6\u548c\u9ed8\u8ba4\u9ad8\u5ea6\uff0c\u4ee5\u521b\u5efa\u5c3a\u5bf8\u4e3a300x300\u7684\u7a97\u53e3\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#height=300\uff1bwindow.default#width=300\uff1bwindow.show\uff08\uff09}\n\u8fd9\u662f\u4f7f\u7528GTK\u5e93\u7684hello\uff0cworld\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u3002\u6211\u4eec\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f&#39\uff1b\u8fd9\u662f\u7a97\u6237\u3002\n\u8981\u5728\u7a97\u53e3\u4e2d\u663e\u793a\u6587\u672c\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528Gtk\u521b\u5efa\u4e00\u4e2a\u6807\u7b7e\u5c0f\u90e8\u4ef6\u3002\u6807\u7b7e\u7c7b\uff0c\u5c31\u50cf\u6211\u4eec\u4f7f\u7528Gtk\u521b\u5efa\u7a97\u53e3\u4e00\u6837\u3002\u5e94\u7528\u7a0b\u5e8f\u7a97\u53e3\u7c7b\u3002\u5728\u521b\u5efa\u6807\u7b7e\u5c0f\u90e8\u4ef6\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f20\u9012\u6587\u672c\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662fhello\uff0cworld\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6807\u7b7e\u5df2\u521b\u5efa\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u5728\u7a97\u53e3\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u6807\u7b7e\uff0c\u4ee5\u4fbf\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528window\u7684set_child\uff08\uff09\u65b9\u6cd5\u5e76\u5c06label\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5b83\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u8fd0\u884c\u6b64\u7a0b\u5e8f\u5e94\u5728\u4e24\u4e2a\u7a97\u53e3&#39\uff1b\u6807\u9898\u548c\u7a97\u53e3&#39\uff1bs\u533a\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u6dfb\u52a0\u4e00\u4e2a\u6309\u94ae\uff0c\u4e0a\u9762\u4f1a\u6709hello\uff0cworld\u6587\u672c\u3002\u8981\u6dfb\u52a0\u6309\u94ae\u5c0f\u90e8\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528Gtk\u3002\u6309\u94ae\u7c7b\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u5bf9\u521b\u5efa\u7684\u6309\u94ae\u4f7f\u7528set_label\uff08\uff09\u65b9\u6cd5\u6765\u8bbe\u7f6e\u6309\u94ae\u7684\u6807\u7b7e\u6216\u6587\u672c\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u786e\u8ba4\u8f93\u51fa\u3002\u6211\u4eec\u73b0\u5728\u5e94\u8be5\u770b\u5230hello\uff0cworld\u6587\u672c\u4e0b\u9762\u7684\u6309\u94ae\uff08\u63d0\u793a\uff1a\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\u3002\n\u5b83\u6ca1\u6709\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u539f\u56e0\u662f\uff0c\u7a97\u53e3\u53ea\u80fd\u5bb9\u7eb3\u4e00\u4e2a\u5b50\u9879\u6216\u5c0f\u90e8\u4ef6\uff0c\u800c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6b63\u5728\u5c1d\u8bd5\u6dfb\u52a0\u4e24\u4e2a\u5c0f\u90e8\u4ef6\u2014\u2014\u6807\u7b7e\u548c\u6309\u94ae\u3002\u56e0\u6b64\uff0c\u7a97\u53e3\u5bf9\u8c61\u6301\u6709\u7b2c\u4e00\u4e2a\u4f20\u9012\u7684\u5c0f\u90e8\u4ef6\uff0c\u800c\u5ffd\u7565\u5176\u4ed6\u5c0f\u90e8\u4ef6\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5bb9\u5668\u5c0f\u90e8\u4ef6\u4f5c\u4e3a\u5bb9\u5668\uff0c\u5e76\u5bb9\u7eb3\u6211\u4eec\u60f3\u8981\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u5c0f\u90e8\u4ef6\u3002\u7136\u540e\u6211\u4eec&#39\uff1b\u6211\u5c06\u4f7f\u7528set_child\uff08\uff09\u65b9\u6cd5\u5c06\u6b64\u5bb9\u5668\u5c0f\u90e8\u4ef6\u8bbe\u7f6e\u4e3a\u7a97\u53e3\u7684\u5b50\u7a97\u53e3\u3002GTK\u4e2d\u6709\u5f88\u591a\u5bb9\u5668\u5c0f\u90e8\u4ef6\uff0c\u6bd4\u5982box\u3001table\u3001grid\u7b49\u7b49\u3002\n\u4e3a\u4e86\u6f14\u793a\u7684\u76ee\u7684\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u4f7f\u7528Gtk\u3002Grid\u521b\u5efa\u7f51\u683c\u5bb9\u5668\u5c0f\u90e8\u4ef6\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u3002\u65b9\u6cd5\u5c06\u5176\u4ed6\u5c0f\u90e8\u4ef6\u6dfb\u52a0\u6216\u6253\u5305\u5230\u7f51\u683c\u5bb9\u5668\u4e2d\u3002\u8fd9attach\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u6700\u540e\u4e24\u4e2a\u662f\u53ef\u9009\u7684\u2014\u2014\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\u5174\u8da3\u6dfb\u52a0\uff0c\u4ece\u5de6\u5f00\u59cb\u5217\u4e3a\u4f4d\u7f6e\uff0c\u4ece\u4e0a\u5f00\u59cb\u884c\u4e3a\u4f4d\u7f6e\u3002\u6700\u540e\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\u662f\u4ee5\u7a7a\u683c\u5f62\u5f0f\u8868\u793a\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u30021\u662f\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7684\u9ed8\u8ba4\u503c\uff08\u5982\u679c\u672a\u901a\u8fc7\uff09\u3002\n\u4e3a\u4e86\u5305\u88c5\u6807\u7b7e\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u8981\u5199\u4fe1\u4e86\u3002\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u628a\u6807\u7b7e\u5c0f\u90e8\u4ef6\u6253\u5305\u5728\u4ece\u5de6\u5230\u53f30\u548c\u4ece\u4e0a\u5230\u53f30\u7684\u4f4d\u7f6e\u3002\u662f\u7684\uff0c\u6805\u683c\u7684\u4f4d\u7f6e\u51e0\u4f55\u56fe\u5f62\u4ece\uff080\uff0c0\uff09\u5f00\u59cb\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u5bf9\u4e8ebutton\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u8981\u5199\u4fe1\u4e86\u3002\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u628a\u6309\u94ae\u5c0f\u90e8\u4ef6\u653e\u5728\u7b2c\u4e8c\u884c\u5de6\u8fb90\u548c\u4e0a\u97621\u7684\u4f4d\u7f6e\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6700\u540e\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u53d6\u6d88\u901a\u8bdd\u3002\u5c06\u6807\u7b7e\u548c\u6309\u94ae\u7684_child\uff08\uff09\u8bbe\u7f6e\u4e3a&#39\uff1b\u6211\u4eec\u5c06\u628a\u7f51\u683c\u8bbe\u7f6e\u4e3a\u5b50\u7a97\u53e3\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u5bf9\u8c61\uff08\u7f51\u683c\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u73b0\u5728\uff0c\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u5e94\u8be5\u663e\u793ahello\uff0cworld\u4e09\u6b21-\u6807\u9898\uff0c\u6587\u672c\u548cin\u6309\u94ae\u3002\n\u8fd9\u5f88\u597d\uff01\u8ba9&#39\uff1b\u5f53\u70b9\u51fb\u6309\u94ae\u65f6\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e0a\u6253\u5370hello\uff0cworld\u6587\u672c\uff01\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4fe1\u53f7\u7684\u6982\u5ff5\u3002\u6211\u4eec&#39\uff1b\u5f53\u6309\u94ae\u5b9e\u9645\u88ab\u70b9\u51fb\u65f6\uff0c\u6211\u4eec\u5c06\u6355\u6349\u6309\u94ae\u53d1\u51fa\u7684\u70b9\u51fb\u4fe1\u53f7\u3002\u6355\u6349\u4fe1\u53f7\u662f\u901a\u8fc7\u3002connect\uff08\uff09\u65b9\u6cd5\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5206\u6b65\u5199\u3002\n\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff0c\u5f53\u5355\u51fb\u6309\u94ae\u65f6\uff0c\u8fd0\u884cconnect\uff08\uff09\u65b9\u6cd5\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u3002\u8fd9\u4e2aconnect\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u533f\u540d\u65b9\u6cd5\u3002\n\u5728\u8fd9\u4e2a\u533f\u540d\u65b9\u6cd5\u4e2d\u7f16\u5199\u7684\u4efb\u4f55\u4ee3\u7801\u90fd\u5c06\u5728\u5355\u51fb\u6309\u94ae\u65f6\u6267\u884c\u3002\u5c31\u6211\u4eec\u800c\u8a00\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\u5174\u8da3\u5728\u70b9\u51fb\u6309\u94ae\u65f6\u6253\u5370hello\uff0cworld\u6587\u672c\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u628a\u8fd9\u4e09\u53e5\u8bdd\u5199\u5728\u95ee\u5019\u4e2d\u3002vala\u7a0b\u5e8f\u65c1\u8fb9\u7684\u6309\u94ae\u76f8\u5173\u4ee3\u7801\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u6309\u94ae\u70b9\u51fb\u3002\u8fde\u63a5\uff08\uff08\uff09=&gt\uff1b{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0cworld\\n&#34\uff1b\uff09\uff1b}\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u5bf9\u8c61\uff08\u7f51\u683c\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u540c\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u95ee\u5019\uff0c\u5728GTK\u7684\u4e16\u754c\u8ba1\u5212\u3002\u5199\u8fd9\u4e2a\u66f4\u5927\u7684hello\uff0cworld\u9879\u76ee\u7684\u60f3\u6cd5\u662f\u8ba9\u6211\u4eec\u5bf9\u4e00\u4e9b\u6982\u5ff5\u4e00\u77a5&#39\uff1b\u6211\u4eec\u5c06\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u4f7f\u7528\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u901a\u8fc7\u7ee7\u7eed\u5b66\u4e60\u66f4\u591a\u7684\u6982\u5ff5\u548c\u6280\u672f\u6765\u7f16\u5199\u8fd9\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u73a9\u5177\u5e94\u7528\u7a0b\u5e8f\u3002", "note_en": "We&#39;ll continue our journey with writing the hello, world program in Vala but this time with GTK(4) library.\n      Let&#39;s create two new files with name  Hello.vala and  main.vala. Yes, the plan is to continue from where we end in the  previous article and then slowly build the working version of hello, world using GTK.\n    Open this newly created  main.vala and  copy write the same code we wrote previously in  hello/main.vala file. In other words,  main() method.\n  int main(string[] args) { string name = &#39;world&#39;; var hello = new Hello(name); hello.greet(); return 0;}\n  Next, open that newly created  Hello.vala and  copy write the same code we wrote previously in  hello/Hello.vala file. In other words,  Hello class.\n  public class Hello { public string name; public Hello(string name) { this.name = name; } public void greet() { stdout.printf(&#34;hello, %s\\n&#34;, this.name); }}\n  Let&#39;s extend this  Hello class by   Gtk.Application class as we&#39;re now creating the GTK application! This  extending is done via  : operator.\n  public class Hello : Gtk.Application { public string name; public Hello(string name) { this.name = name; } public void greet() { stdout.printf(&#34;hello, %s\\n&#34;, this.name); }}\n  We do not needed this  greet() method anymore as we&#39;re interested in displaying the hello, world in window (or in application) and not in terminal!\n  public class Hello : Gtk.Application { public string name; public Hello(string name) { this.name = name; }}\n  We created the  name variable specially to print the value of it in  greet() method. As we do not have  greet() method now, I don&#39;t think we now need any code that is associated with  name variable. But, yes, we surely need that public method. So, let&#39;s have the empty public method for further usage.\n    As per documentation, we need to call the  Object() method from this public method. This  Object() method accepts two arguments -  application_id, unique  application id in reverse domain name notation or RDNS and   flags with one of the predefined values and   ApplicationFlags.FLAGS_NONE value in our case. All in all, you need to type something like this. If you have GitHub/GitLab account, change the value of  application_id based on your preference.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); }}\n  We&#39;ll talk about this  application_id and  flags in future. For now, you need to type couple of things for GTK to properly initialize and run the application.  It&#39;s like  framework, write this and that for us to call properly!\n    public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } void activate() { }}\n  This  activate() method already existing in  Gtk.Application and what we actually need to do is, to  override using  override keyword.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } override void activate() { }}\n  I assume you don&#39;t forget the rule about access modifiers. In this  activate() method case, we&#39;ll go with  protected access modifier as that&#39;s what we ask for us!\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { }}\n  And this method  activates the application. Again, it might possible that you get confused with this code. But, this is something you need to type as its like framework (I know library, whatever)!\n  If the application is activated, we need to do something. How about displaying an application widow? That&#39;s what you&#39;re suppose to do with desktop application, right!\n  Within this  activate() method, let&#39;s create a window. In GTK,  window is  widget. I mean everything that is a graphical component is widget including menu, button, label, checkbox, list, and so on. These all are widgets in GTK and GTK has separate class(es) for each of these widgets!\n  Let&#39;s create a  window widget using   ApplicationWindow class. This  ApplicationWindow class accepts the  application as the argument which is  this or class itself as that is the application (remember, we extend the  Gtk.Application to make  Hello as application).\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); }}\n  We just created the window for the application. We now need to invoke the  .show() method on this  window object to actually display it when  activate() method executes.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.show(); }}\n  This is our simple window application! Before we go further and run the application, we need to do some minor modifications in  main.vala as the current code create an instance of  Hello class and run the  greet() method which is not valid anymore.\n    int main(string[] args) { string name = &#39;world&#39;; var hello = new Hello(name); return 0;}\n  We also not need  name variable and also remove it as argument being passed while creating an instance.\n    On this  hello object, we need to call  .run() method to actually run the application instance. This method accepts  args as argument.\n    This  .run() method returns an integer that we can directly return instead of returning the explicit  0.\n          I copied this command from  previous article and you know that this will print the  hello, world as output based on code we wrote in those files.\n  This is correct! But, we need to do one more modification to this command as we&#39;re now using GTK library. We need to inform Vala compiler to use GTK library while compiling the programs using  --pkg flag followed by the library name or  gtk4 (installed name of the GTK library) in our case. Putting all these together, following is the command we need to run.\n      After running this command, you should see the default 200x200 window with title as application name e.g.  Hello. But, this is not the hello, world program as we&#39;re not seeing hello, world at any place within the application.\n  Let&#39;s print  hello, world instead of  Hello as title. This can be done via updating the  attribute value of  window widget.  window has many attributes including  title (for title of the window),  default_width (for default width of window),  default_height (for default height of window), and so on.\n  We&#39;re now going to assign  hello, world to  window&#39;s  title and  300 to both  default_width and  default_height to create 300x300 window in dimension.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; window.show(); }}\n        This is the first version of the hello, world program using GTK library. We can go further and display the hello, world text within application&#39;s window.\n  To display the text in window, we need to create a  label widget using  Gtk.Label class just like we created  window using  Gtk.ApplicationWindow class. While creating a  label widget, we need to pass the text which is  hello, world in our case.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.show(); }}\n  The label is created. We now need to add this label in  window to display on the screen. We can do it using  set_child() method of  window and passing  label as argument to it.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); window.show(); }}\n  Running this program should display the hello, world text on both window&#39;s title and window&#39;s area.\n      Let&#39;s even go further and add button that will have the hello, world text on it. To add a  button widget, we need to use  Gtk.Button class. Then we need use  set_label() method on created  button to set the label or the text of the  button.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.show(); }}\n    public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); window.show(); }}\n  Let&#39;s run this program to confirm the output. We should now see the button below the hello, world text (hint: it&#39;ll not work).\n      It is not working as expected and the reason is,  window can only hold one child or widget whereas we&#39;re trying to add two widgets -  label and  button. Because of this,  window object holding first passed widget and ignoring others. To resolve this problem, we need to use  container widget that act as container and hold as many widgets as we want. Then we&#39;ll set this container widget as child of  window using  set_child() method. There are many container widgets in GTK such as box, table, grid, and so on.\n  For the purpose of the demonstration, we&#39;re going to use  Gtk.Grid to create a  grid container widget.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); window.show(); }}\n  We can now use  .attach() method of grid widget to add or  pack the other widgets inside the  grid container. This  .attach() method accepts five arguments and last two being optional -  widget that we&#39;re interested to add,  column as position from left, and  row as position from top. Last two optional arguments are  width and  height in form of space. 1 is the default values to  height and  width if not passed.\n  To pack the  label, we&#39;re going to write  .attach(label, 0, 0). In other words, we&#39;re going to pack the  label widget at the position of 0 from left and 0 from top. Yes, the position geometry for the grid starts from (0, 0).\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); window.show(); }}\n  For  button, we&#39;re going to write  .attach(button, 0, 1). In other words, we&#39;re going to pack the  button widget at the position of 0 from the left and 1 from top means in second line.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.show(); }}\n  Finally, let&#39;s remove the call to  .set_child() for both  label and  button as we&#39;re going to set the  grid as child to  window.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.set_child(grid); window.show(); }}\n  Now, running this program should display hello, world thrice - title, text and in button.\n      This is good! Let&#39;s even go further and print the hello, world text in terminal when button is clicked! For this we need to use the concept of  signal. We&#39;re going to catch the  clicked signal emitted by  button when button is actually clicked. Catching the signal is done via  .connect() method. Let&#39;s write this in steps.\n              You can read this as, when  button is clicked, run the code written inside the  connect() method. This  connect() method accepts the anonymous method.\n    Whatever code you write within this anonymous method is going to be executed when button is clicked. In our case, we&#39;re interested to print the hello, world text when the button is clicked.\n      Let&#39;s put these three lines in our  Hello.vala program next to the  button related code.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); button.clicked.connect(() =&gt; { stdout.printf(&#34;hello, world\\n&#34;); }); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.set_child(grid); window.show(); }}\n        Again, this is ideally a hello, world program in GTK. The idea behind writing this bigger hello, world program is to give a glimpse of some concepts that we&#39;ll use in application development. That being said, in next article, we&#39;ll write the  trivial toy application by continue learning few more concepts and techniques.", "posttime": "2022-02-14 23:06:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gtk,\u65b9\u6cd5", "title": "\u4f60\u597d\uff0c\u74e6\u62c9\u7684GTK\u4e16\u754c", "title_en": "Hello, World in GTK with Vala", "transed": 1, "url": "https://chauhankiran.github.io/vala2.html", "via": "", "real_tags": ["gtk", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e2a\u7531\u79d1\u5b66\u5bb6\u7ec4\u6210\u7684\u56fd\u9645\u56e2\u961f\u5df2\u7ecf\u5236\u9020\u51fa\u4e00\u79cd\u5168\u7f16\u7ec7\u7684\u667a\u80fd\u7eba\u7ec7\u54c1\u663e\u793a\u5c4f\uff0c\u5b83\u96c6\u6210\u4e86\u6709\u6e90\u7535\u5b50\u3001\u4f20\u611f\u3001\u80fd\u91cf\u548c\u5149\u5b50\u529f\u80fd\u3002\u8fd9\u4e9b\u529f\u80fd\u76f4\u63a5\u5d4c\u5165\u5230\u7ea4\u7ef4\u548c\u7eb1\u7ebf\u4e2d\uff0c\u8fd9\u4e9b\u7ea4\u7ef4\u548c\u7eb1\u7ebf\u91c7\u7528\u57fa\u4e8e\u7eba\u7ec7\u7684\u5de5\u4e1a\u6d41\u7a0b\u5236\u9020\u3002\n\u7531\u5251\u6865\u5927\u5b66\u9886\u5bfc\u7684\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u4ed6\u4eec\u7684\u505a\u6cd5\u53ef\u80fd\u4f1a\u5bfc\u81f4\u542c\u8d77\u6765\u50cf\u79d1\u5e7b\u7535\u5f71\u7684\u5e94\u7528\uff1a\u7a97\u5e18\u4e5f\u662f\u7535\u89c6\u3001\u80fd\u91cf\u91c7\u96c6\u5730\u6bef\u3001\u4e92\u52a8\u5f0f\u3001\u81ea\u4f9b\u7535\u7684\u670d\u88c5\u548c\u7ec7\u7269\u3002\n\u8fd9\u662f\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b8c\u5168\u57fa\u4e8e\u7ea4\u7ef4\u7684\u5236\u9020\u65b9\u6cd5\u5c06\u53ef\u6269\u5c55\u7684\u5927\u9762\u79ef\u590d\u6742\u7cfb\u7edf\u96c6\u6210\u5230\u7eba\u7ec7\u54c1\u4e2d\u3002\u4ed6\u4eec\u7684\u7814\u7a76\u7ed3\u679c\u53d1\u8868\u5728\u300a\u81ea\u7136\u901a\u8baf\u300b\u6742\u5fd7\u4e0a\u3002\n\u5c3d\u7ba1\u667a\u80fd\u7eba\u7ec7\u54c1\u7684\u5f00\u53d1\u6700\u8fd1\u53d6\u5f97\u4e86\u8fdb\u5c55\uff0c\u4f46\u5176\u529f\u80fd\u3001\u5c3a\u5bf8\u548c\u5f62\u72b6\u4ecd\u53d7\u5230\u5f53\u524d\u5236\u9020\u5de5\u827a\u7684\u9650\u5236\u3002\n\u901a\u8fc7\u4f20\u7edf\u7684\u7eba\u7ec7\u6216\u9488\u7ec7\u5de5\u827a\u5c06\u7279\u6b8a\u7ea4\u7ef4\u878d\u5165\u7eba\u7ec7\u54c1\uff0c\u610f\u5473\u7740\u5b83\u4eec\u53ef\u4ee5\u878d\u5165\u65e5\u5e38\u7528\u54c1\u4e2d\uff0c\u8fd9\u5f00\u8f9f\u4e86\u4e00\u4e2a\u5de8\u5927\u7684\u6f5c\u5728\u5e94\u7528\u8303\u56f4\u3002\u7136\u800c\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u7ea4\u7ef4\u7684\u5236\u9020\u4e00\u76f4\u53d7\u5230\u5c3a\u5bf8\u9650\u5236\uff0c\u6216\u8005\u8be5\u6280\u672f\u4e0e\u7eba\u7ec7\u54c1\u548c\u7ec7\u9020\u5de5\u827a\u4e0d\u517c\u5bb9\u3002\n\u4e3a\u4e86\u4f7f\u8fd9\u9879\u6280\u672f\u4e0e\u7ec7\u9020\u517c\u5bb9\uff0c\u7814\u7a76\u4eba\u5458\u5728\u6bcf\u79cd\u7ea4\u7ef4\u7ec4\u4ef6\u4e0a\u6d82\u4e0a\u80fd\u591f\u627f\u53d7\u8db3\u591f\u62c9\u4f38\u7684\u6750\u6599\uff0c\u4ee5\u4fbf\u5b83\u4eec\u53ef\u4ee5\u7528\u4e8e\u7eba\u7ec7\u5236\u9020\u8bbe\u5907\u3002\u8be5\u56e2\u961f\u8fd8\u7f16\u7ec7\u4e86\u4e00\u4e9b\u57fa\u4e8e\u7ea4\u7ef4\u7684\u7ec4\u4ef6\uff0c\u4ee5\u63d0\u9ad8\u5176\u53ef\u9760\u6027\u548c\u8010\u7528\u6027\u3002\u6700\u540e\uff0c\u4ed6\u4eec\u4f7f\u7528\u5bfc\u7535\u7c98\u5408\u5242\u548c\u6fc0\u5149\u710a\u63a5\u6280\u672f\u5c06\u591a\u4e2a\u7ea4\u7ef4\u7ec4\u4ef6\u8fde\u63a5\u5728\u4e00\u8d77\u3002\n\u901a\u8fc7\u5c06\u8fd9\u4e9b\u6280\u672f\u7ed3\u5408\u8d77\u6765\uff0c\u4ed6\u4eec\u80fd\u591f\u901a\u8fc7\u6807\u51c6\u3001\u53ef\u6269\u5c55\u7684\u7eba\u7ec7\u5236\u9020\u5de5\u827a\u5c06\u591a\u79cd\u529f\u80fd\u6574\u5408\u5230\u4e00\u5927\u5757\u673a\u7ec7\u7269\u4e2d\u3002\n\u7531\u6b64\u4ea7\u751f\u7684\u7ec7\u7269\u53ef\u4ee5\u7528\u4f5c\u663e\u793a\u5668\uff0c\u76d1\u63a7\u5404\u79cd\u8f93\u5165\uff0c\u6216\u50a8\u5b58\u80fd\u91cf\u4f9b\u65e5\u540e\u4f7f\u7528\u3002\u8fd9\u79cd\u7ec7\u7269\u53ef\u4ee5\u68c0\u6d4b\u5c04\u9891\u4fe1\u53f7\u3001\u89e6\u89c9\u3001\u5149\u7ebf\u548c\u6e29\u5ea6\u3002\u5b83\u4e5f\u53ef\u4ee5\u5377\u8d77\uff0c\u56e0\u4e3a\u5b83\u662f\u7528\u5546\u4e1a\u7eba\u7ec7\u5236\u9020\u6280\u672f\u5236\u9020\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u6cd5\u5236\u9020\u5927\u5377\u7684\u529f\u80fd\u6027\u7ec7\u7269\u3002\n\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u4ed6\u4eec\u7684\u539f\u578b\u663e\u793a\u5668\u4e3a\u4e0b\u4e00\u4ee3\u7535\u5b50\u7eba\u7ec7\u54c1\u5728\u667a\u80fd\u8282\u80fd\u5efa\u7b51\u3001\u7269\u8054\u7f51\uff08IoT\uff09\u3001\u5206\u5e03\u5f0f\u4f20\u611f\u5668\u7f51\u7edc\u548c\u4ea4\u4e92\u5f0f\u663e\u793a\u5668\u7b49\u9886\u57df\u7684\u5e94\u7528\u94fa\u5e73\u4e86\u9053\u8def\uff0c\u8fd9\u4e9b\u5e94\u7528\u5728\u4e0e\u7ec7\u7269\u96c6\u6210\u65f6\u5177\u6709\u7075\u6d3b\u6027\u548c\u53ef\u7a7f\u6234\u6027\u3002\n\u5251\u6865\u5927\u5b66\u5de5\u7a0b\u7cfb\u7684\u91d1\u6b63\u6c11\u6559\u6388\uff08Jong min Kim\uff09\u8bf4\uff1a\u201c\u6211\u4eec\u7684\u65b9\u6cd5\u5efa\u7acb\u5728\u5fae\u7eb3\u7c73\u6280\u672f\u3001\u5148\u8fdb\u663e\u793a\u5668\u3001\u4f20\u611f\u5668\u3001\u80fd\u6e90\u548c\u6280\u672f\u7eba\u7ec7\u5236\u9020\u7684\u878d\u5408\u4e4b\u4e0a\u3002\u201d\u91d1\u6b63\u6c11\u6559\u6388\u4e0e\u8def\u6613\u5409\u00b7\u5965\u5947\u6f58\u8482\uff08Luigi Occhipinti\uff09\u535a\u58eb\u548c\u66fc\u5c3c\u4ec0\u00b7\u4e54\u74e6\u62c9\uff08Manish Chhowalla\uff09\u6559\u6388\u5171\u540c\u9886\u5bfc\u4e86\u8fd9\u9879\u7814\u7a76\u3002\u201c\u8fd9\u662f\u671d\u7740\u5728\u65e5\u5e38\u5e94\u7528\u4e2d\u5145\u5206\u5229\u7528\u53ef\u6301\u7eed\u3001\u65b9\u4fbf\u7684\u7535\u5b50\u7ea4\u7ef4\u548c\u7535\u5b50\u7eba\u7ec7\u54c1\u8fc8\u51fa\u7684\u4e00\u6b65\u3002\u8fd9\u53ea\u662f\u5f00\u59cb\u3002\u201d\n\u201c\u901a\u8fc7\u96c6\u6210\u57fa\u4e8e\u5149\u7ea4\u7684\u7535\u5b50\u3001\u5149\u5b50\u3001\u4f20\u611f\u548c\u80fd\u6e90\u529f\u80fd\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4e00\u79cd\u5168\u65b0\u7684\u667a\u80fd\u8bbe\u5907\u548c\u7cfb\u7edf\uff0c\u201d\u540c\u6837\u6765\u81ea\u5251\u6865\u5927\u5b66\u5de5\u7a0b\u7cfb\u7684Occhipinti\u8bf4\u3002\u201c\u901a\u8fc7\u5145\u5206\u53d1\u6325\u7eba\u7ec7\u5236\u9020\u4e1a\u7684\u6f5c\u529b\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u80fd\u770b\u5230\u667a\u80fd\u3001\u8282\u80fd\u7684\u7269\u8054\u7f51\u8bbe\u5907\uff0c\u5b83\u4eec\u53ef\u4ee5\u65e0\u7f1d\u96c6\u6210\u5230\u65e5\u5e38\u7528\u54c1\u548c\u8bb8\u591a\u5176\u4ed6\u884c\u4e1a\u5e94\u7528\u4e2d\u3002\u201d\n\u7814\u7a76\u4eba\u5458\u6b63\u5728\u4e0e\u6b27\u6d32\u5408\u4f5c\u8005\u5408\u4f5c\uff0c\u4f7f\u8fd9\u9879\u6280\u672f\u53ef\u6301\u7eed\u5e76\u53ef\u7528\u4e8e\u65e5\u5e38\u7269\u54c1\u3002\u4ed6\u4eec\u8fd8\u81f4\u529b\u4e8e\u5c06\u53ef\u6301\u7eed\u6750\u6599\u6574\u5408\u4e3a\u7ea4\u7ef4\u7ec4\u4ef6\uff0c\u63d0\u4f9b\u4e00\u79cd\u65b0\u7684\u80fd\u6e90\u7eba\u7ec7\u7cfb\u7edf\u3002\u4ed6\u4eec\u7684\u67d4\u6027\u548c\u529f\u80fd\u6027\u667a\u80fd\u7ec7\u7269\u6700\u7ec8\u53ef\u4ee5\u5236\u6210\u7535\u6c60\u3001\u8d85\u7ea7\u7535\u5bb9\u5668\u3001\u592a\u9633\u80fd\u7535\u6c60\u677f\u548c\u5176\u4ed6\u8bbe\u5907\u3002\n\u8fd9\u9879\u7814\u7a76\u90e8\u5206\u7531\u6b27\u76df\u59d4\u5458\u4f1a\u548c\u82f1\u56fd\u7814\u7a76\u4e0e\u521b\u65b0\u59d4\u5458\u4f1a\uff08UKRI\uff09\u4e0b\u5c5e\u7684\u5de5\u7a0b\u548c\u7269\u7406\u79d1\u5b66\u7814\u7a76\u59d4\u5458\u4f1a\uff08EPSRC\uff09\u8d44\u52a9\u3002\n\u53c2\u8003\u6587\u732e\uff1aH.W.Choi\u7b49\u4eba\uff0c\u201c\u7528\u4e8e\u5927\u89c4\u6a21\u667a\u80fd\u5bb6\u5c45\u548c\u7269\u8054\u7f51\u5e94\u7528\u7684\u5e26\u591a\u529f\u80fd\u5149\u7ea4\u8bbe\u5907\u7684\u667a\u80fd\u7eba\u7ec7\u7167\u660e/\u663e\u793a\u7cfb\u7edf\u3002\u201d\u300a\u81ea\u7136\u901a\u8baf\u300b\uff082022\u5e74\uff09\u3002\u5185\u653f\u90e8\uff1a10.1038/s41467-022-28459-6", "note_en": "An international team of scientists have produced a fully woven smart textile display that integrates active electronic, sensing, energy and photonic functions. The functions are embedded directly into the fibres and yarns, which are manufactured using textile-based industrial processes.\n The researchers, led by the University of Cambridge, say their approach could lead to applications that sound like sci-fi: curtains that are also TVs, energy-harvesting carpets, and interactive, self-powered clothing and fabrics.\n This is the first time that a scalable large-area complex system has been integrated into textiles using an entirely fibre-based manufacturing approach. Their  results are reported in the journal  Nature Communications.\n Despite recent progress in the development of smart textiles, their functionality, dimensions and shapes are limited by current manufacturing processes.\n Integrating specialised fibres into textiles through conventional weaving or knitting processes means they could be incorporated into everyday objects, which opens up a huge range of potential applications. However, to date, the manufacturing of these fibres has been size limited, or the technology has not been compatible with textiles and the weaving process.\n To make the technology compatible with weaving, the researchers coated each fibre component with materials that can withstand enough stretching so they can be used on textile manufacturing equipment. The team also braided some of the fibre-based components to improve their reliability and durability. Finally, they connected multiple fibre components together using conductive adhesives and laser welding techniques.\n Using these techniques together, they were able to incorporate multiple functionalities into a large piece of woven fabric with standard, scalable textile manufacturing processes.\n The resulting fabric can operate as a display, monitor various inputs, or store energy for later use. The fabric can detect radiofrequency signals, touch, light and temperature. It can also be rolled up, and because it\u2019s made using commercial textile manufacturing techniques, large rolls of functional fabric could be made this way.\n The researchers say their prototype display paves the way to next-generation e-textile applications in sectors such as smart and energy-efficient buildings that can generate and store their own energy, Internet of Things (IoT), distributed sensor networks and interactive displays that are flexible and wearable when integrated with fabrics.\n \u201cOur approach is built on the convergence of micro and nanotechnology, advanced displays, sensors, energy and technical textile manufacturing,\u201d said Professor Jong min Kim, from Cambridge\u2019s Department of Engineering, who co-led the research with Dr Luigi Occhipinti and Professor Manish Chhowalla. \u201cThis is a step towards the full exploitation of sustainable, convenient e-fibres and e-textiles in daily applications. And it\u2019s only the beginning.\u201d\n \u201cBy integrating fibre-based electronics, photonic, sensing and energy functionalities, we can achieve a whole new class of smart devices and systems,\u201d said Occhipinti, also from Cambridge\u2019s Department of Engineering. \u201cBy unleashing the full potential of textile manufacturing, we could soon see smart and energy-autonomous Internet of Things devices that are seamlessly integrated into everyday objects and many other sector applications.\u201d\n The researchers are working with European collaborators to make the technology sustainable and useable for everyday objects. They are also working to integrate sustainable materials as fibre components, providing a new class of energy textile systems. Their flexible and functional smart fabric could eventually be made into batteries, supercapacitors, solar panels and other devices.\n The research was funded in part by the European Commission and the Engineering and Physical Sciences Research Council (EPSRC), part of UK Research and Innovation (UKRI).\n Reference: H.W. Choi et al.  \u2018Smart textile lighting/display system with multifunctional fibre devices for large scale smart home and IoT applications.\u2019 Nature Communications (2022). DOI: 10.1038/s41467-022-28459-6", "posttime": "2022-02-14 23:00:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7ec7,display,\u7eba\u7ec7", "title": "46\u82f1\u5bf8\u7f16\u7ec7\u663e\u793a\u5c4f\uff0c\u96c6\u6210\u667a\u80fd\u4f20\u611f\u5668\u548c\u80fd\u91cf\u91c7\u96c6", "title_en": "46\u201d woven display with integrated smart sensors and energy harvesting", "transed": 1, "url": "https://www.cam.ac.uk/research/news/scientists-develop-fully-woven-smart-display", "via": "", "real_tags": ["\u7f16\u7ec7", "display", "\u7eba\u7ec7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073173, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u4eca\uff0cRacket\u5411\u7528\u6237\u627f\u8bfa\u4e86\u9762\u5411\u8bed\u8a00\u7684\u7f16\u7a0b\u3002\u4f46\u8fd9\u4e2a\u627f\u8bfa\u6709\u4e00\u4e2a\u9650\u5236\uff1a\u5982\u679c\u4f60\u60f3\u6784\u5efa\u4e00\u4e2a\u5b8f\u53ef\u6269\u5c55\u8bed\u8a00\uff0c\u4f60\u7684\u8bed\u8a00\u5fc5\u987b\u4f7f\u7528S\u8868\u8fbe\u5f0f\u3002\u8fd9\u79cd\u9650\u5236\u662f\u4e0d\u516c\u5e73\u7684\uff0c\u56e0\u4e3a\u544a\u8bc9\u7528\u6237\u201c\u4f60\u53ef\u4ee5\u6784\u5efa\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u53ef\u6269\u5c55\u8bed\u8a00\uff0c\u53ea\u8981\u5b83\u4f7f\u7528S\u8868\u8fbe\u5f0f\u201d\uff0c\u5c31\u50cf\u4ea8\u5229\u798f\u7279\u544a\u8bc9T\u578b\u8f66\u4e70\u5bb6\u201c\u4f60\u7684\u8f66\u53ef\u4ee5\u662f\u4f60\u60f3\u8981\u7684\u4efb\u4f55\u989c\u8272\uff0c\u53ea\u8981\u662f\u9ed1\u8272\u7684\u3002\u201d\u6211\u4eec\u60f3\u7528\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\u6765\u89e3\u9664\u8fd9\u4e2a\u9650\u5236\uff0c\u540c\u65f6\u501f\u6b64\u673a\u4f1a\u6539\u8fdbRacktin\u5411\u540e\u4e0d\u517c\u5bb9\u7684\u65b9\u5f0f\u3002\nRhombus\u662f\u4e00\u4e2a\u5728Racket\u5e73\u53f0\u4e0a\u6784\u5efa\u5b8f\u53ef\u6269\u5c55\u901a\u7528\u7f16\u7a0b\u8bed\u8a00\u7684\u5b9e\u9a8c\uff0c\u8be5\u8bed\u8a00\u4f7f\u7528\u4f20\u7edf\u7684\u8868\u9762\u8bed\u6cd5\u548c\u6539\u8fdb\u7684\u5e93\u3002\n\u6240\u8c13\u201c\u5b8f\u53ef\u6269\u5c55\u201d\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u83f1\u5f62\u7528\u6237\u5e94\u8be5\u80fd\u591f\u6269\u5c55\u83f1\u5f62\u7684\u8bed\u6cd5\uff0c\u5c31\u50cfRacket\u7528\u6237\u53ef\u4ee5\u6269\u5c55Racket\u7684\u8bed\u6cd5\u4e00\u6837\u3002\u590d\u6742\u7684\u8bed\u6cd5\u6269\u5c55\uff0c\u5982\u5bf9\u8c61\u548c\u7c7b\u7cfb\u7edf\u3001\u9759\u6001\u7c7b\u578b\u68c0\u67e5\u5668\u548c\u6a21\u5f0f\u5339\u914d\uff0c\u5e94\u8be5\u4f5c\u4e3a\u5e93\u6765\u5b9e\u73b0\uff0c\u540c\u65f6\u4ecd\u7136\u4e3a\u5176\u4ed6\u8bed\u8a00\u4e2d\u8fd9\u4e9b\u529f\u80fd\u7684\u7528\u6237\u63d0\u4f9b\u719f\u6089\u7684\u8868\u9762\u8bed\u6cd5\u3002\n\u6211\u4eec\u6240\u8bf4\u7684\u201c\u5e38\u89c4\u8868\u9762\u8bed\u6cd5\u201d\u662f\u6307\u5bf9\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u7684\u7528\u6237\u4ee5\u53ca\u719f\u6089\u57fa\u672c\u6570\u5b66\u7b26\u53f7\u7684\u65b0\u624b\u6765\u8bf4\u90fd\u662f\u5e38\u89c4\u7684\u3002\u8fd9\u5bfc\u81f4\u6211\u4eec\u9762\u4e34\u4ee5\u4e0b\u9650\u5236\uff1a\n\u51fd\u6570\u8c03\u7528\u88ab\u5199\u6210\u4e00\u4e2a\u51fd\u6570\u8868\u8fbe\u5f0f\uff0c\u540e\u8ddf\u4e00\u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u53c2\u6570\u5217\u8868\uff0c\u6bd4\u5982f\uff08x\uff0cy\uff0cz\uff09\n\u989d\u5916\u7684\u62ec\u53f7\u53ef\u4ee5\u81ea\u7531\u5730\u7528\u4e8e\u5206\u7ec4\u548c\u6d88\u9664\u6b67\u4e49\uff0c\u4f8b\u5982\uff081+2\uff09*3\uff0c\u800c\u4e0d\u5f15\u5165\u65b0\u7684\u7ed3\u6784\u6216\u8bed\u4e49\u3002\n\u53e5\u6cd5\u5f62\u5f0f\u662f\u901a\u8fc7\u90bb\u63a5\u800c\u4e0d\u662f\u4e25\u683c\u7684\u5c42\u6b21\u7ed3\u6784\u8fde\u63a5\u8d77\u6765\u7684\u3002\u4f8b\u5982do{}while\uff08\uff09\u548cx\uff0c\u5176\u4e2dy=z\u3002\u8fd9\u662f\u4e00\u79cd\u201c\u4e2d\u7f00\u201d\uff0c\u6bd4\u7b97\u672f\u66f4\u5e7f\u6cdb\u3002\n\u6240\u8c13\u201c\u6539\u8fdb\u7684\u5e93\u201d\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\u83f1\u5f62\u4e0d\u5e94\u8be5\u53d7\u5236\u4e8eRacket\u7684\u5411\u540e\u517c\u5bb9\u6027\u7ea6\u675f\u3002Rhombus\u5e94\u8be5\u53ef\u4ee5\u81ea\u7531\u521b\u65b0\uff0c\u4e3a\u5176\u4ed6\u8bed\u8a00\u4e2d\u8d8a\u6765\u8d8a\u5e38\u89c1\u7684\u529f\u80fd\u63d0\u4f9b\u65b0\u7684\u6807\u51c6\u5e93\uff0c\u4f8b\u5982genericcollections\u3001\u6d41\u5904\u7406\u548c\u5f02\u6b65\u7f16\u7a0b\u3002\n\u201c\u5728Racket\u5e73\u53f0\u4e4b\u4e0a\u201d\uff0c\u6211\u4eec\u7684\u610f\u601d\u662f\uff0c\u83f1\u5f62\u5e94\u8be5\u50cf\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u4e00\u6837\u662f\u4e00\u4e2a#lang\uff0c\u7528\u6237\u5e94\u8be5\u53ef\u4ee5\u5c06Hombus\u4ee3\u7801\u548c\u5e93\u4e0e\u666e\u901aRacket\u4ee3\u7801\u548c\u5e93\u8fdb\u884c\u65e0\u7f1d\u7ec4\u5408\u3002\u6211\u4eec\u73b0\u5728\u7684\u5904\u5883\n\u4e00\u4e9b\u8868\u9762\u8bed\u6cd5\u63d0\u6848\u5df2\u7ecf\u88ab\u5934\u8111\u98ce\u66b4\uff0c\u63d0\u6848\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\n\u7c7bC\u7684\u8868\u9762\u8bed\u6cd5\uff0c\u4f7f\u7528\u5927\u62ec\u53f7\u548c\u5206\u53f7**\u6765\u8868\u8fbe\u4e00\u822c\u7ed3\u6784\u3002\u6770\u4f0a\u7684C-\u8868\u60c5\u7b26\u5408\u8fd9\u4e00\u7c7b\u3002\n\u7c7b\u4f3cPython\u7684\u8868\u9762\u8bed\u6cd5\uff0c\u4f7f\u7528\u5192\u53f7\u548c\u7f29\u8fdb\u6765\u4f20\u8fbe\u4e00\u822c\u7ed3\u6784\u3002Jay\u7684lexprs\u548cMatthew\u7684\u704c\u6728\u4e1b\u516c\u8bc1\u5c31\u5c5e\u4e8e\u8fd9\u4e00\u7c7b\u3002\n\u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u8868\u9762\u8bed\u6cd5\u5e94\u8be5\u8d1f\u8d23\u591a\u5c11\u8bed\u6cd5\u5206\u7ec4\uff0c\u800c\u6709\u591a\u5c11\u5206\u7ec4\u53d6\u51b3\u4e8e\u5b8f\u7cfb\u7edf\u3002\u6709\u4e09\u79cd\u9009\u62e9\uff1a\nsurface\u8bed\u6cd5\u8d1f\u8d23\u6240\u6709\u5206\u7ec4\u3002\u8fd9\u6b63\u662f\u4f20\u7edf\u7684S\u8868\u8fbe\u5f0f\u6240\u5904\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u5f88\u591aLisp\u90fd\u653e\u677e\u4e86S\u8868\u8fbe\u5f0f\u5bf9\u4e00\u5207\u7684\u7ea6\u675f\uff0c\u8ba9\u5b8f\u521b\u5efa\u9690\u5f0f\u5206\u7ec4\uff0c\u8fd9\u5df2\u7ecf\u591f\u5c34\u5c2c\u7684\u4e86\u3002\u4f8b\u5982\uff0cClojure\u7684letform\u57fa\u4e8e\u90bb\u63a5\u6027\u9690\u5f0f\u5730\u5bf9\u7ed1\u5b9a\u8868\u8fbe\u5f0f\u5bf9\u5206\u7ec4\uff0c\u5982\uff08let[x1y2]\uff08+xy\uff09\uff09\u3002Racket\u7684\u5173\u952e\u5b57\u53c2\u6570\u662f\u653e\u677e\u6b64\u7ea6\u675f\u7684\u7c7b\u4f3c\u5b9e\u4f8b\u3002C\u8868\u8fbe\u5f0f\u503e\u5411\u4e8e\u4f7f\u7528\u5177\u6709\u6b64\u5c5e\u6027\u7684\u201c\u5e38\u89c4\u8868\u9762\u8bed\u6cd5\u201d\u3002\nsurface\u8bed\u6cd5\u4e0d\u8d1f\u8d23\u5206\u7ec4\u3002\u8fd9\u4f1a\u4ea7\u751f\u4e00\u79cd\u7c7b\u4f3cForth\u7684\u8bed\u6cd5\uff0c\u5176\u4e2d\u7a0b\u5e8f\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u53d1\u97f3\u5e8f\u5217\u3002\u8fd9\u4e0d\u7b26\u5408\u6211\u4eec\u7684\u201c\u5e38\u89c4\u8868\u9762\u8bed\u6cd5\u201d\u8981\u6c42\u3002\n\u8868\u9762\u8bed\u6cd5\u8d1f\u8d23\u4e00\u4e9b\u5206\u7ec4\uff0c\u4f46\u4e0d\u662f\u5168\u90e8\u3002\u8fd9\u8981\u6c42\u89e3\u6790\u5668\u7406\u89e3\u7a0b\u5e8f\u7684\u7ed1\u5b9a\u548c\u6269\u5c55\u5b8f\uff0c\u4ee5\u83b7\u5f97\u7a0b\u5e8f\u7ed3\u6784\u7684\u5b8c\u6574\u56fe\u7247\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5c06\u4ee4\u724c\u6d41\u7684\u89e3\u6790\u4e0e\u5b8f\u6269\u5c55\u4ea4\u7ec7\u5728\u4e00\u8d77\u79f0\u4e3aenforestation\uff0c\u5b83\u5141\u8bb8\u5b8f\u6269\u5c55\u4f20\u7edf\u8bed\u8a00\u7684\u8bed\u6cd5\u3002Honu\u7814\u7a76\u8bed\u8a00\u662f\u8fd9\u9879\u6280\u672f\u7684\u5148\u9a71\u3002\n\u6211\u4eec\u51b3\u5b9a\u91c7\u7528\u7c7b\u4f3cPython\u7684\u5e26Enforestation\u7684\u8868\u9762\u8bed\u6cd5\uff0c\u7279\u522b\u662f\u704c\u6728\u72b6\u7b26\u53f7\uff0c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u63a8\u8fdb\u5230\u4e0b\u4e00\u4e2a\u539f\u578b\u9636\u6bb5\u7684\u5efa\u8bae\u3002\u8fd9\u53ef\u80fd\u4e0d\u662f\u83f1\u5f62\u9879\u76ee\u7684\u6700\u7ec8\u65b9\u5411\uff0c\u4f46\u8fd9\u662f\u6211\u4eec\u76ee\u524d\u4f18\u5148\u8003\u8651\u7684\u65b9\u5411\u3002\u6211\u4eec\u662f\u57fa\u4e8e\u4ee5\u4e0b\u56e0\u7d20\u505a\u51fa\u8fd9\u4e00\u51b3\u5b9a\u7684\uff1a\n\u7f29\u8fdb\u654f\u611f\u5ea6a la Python\u7684\u4f18\u70b9\u662f\uff0c\u5c4f\u5e55\u4e0a\u7684\u53ef\u89c6\u5206\u7ec4\u4e0e\u89e3\u6790\u5206\u7ec4\u76f8\u5339\u914d\uff0c\u4f46\u5b83\u4e5f\u4e3a\u8fd0\u7b97\u7b26\u548c\u6807\u8bc6\u7b26\u9a71\u52a8\u7684\u4e0a\u4e0b\u6587\u654f\u611f\u89e3\u6790\u7559\u4e0b\u4e86\u5927\u91cf\u7a7a\u95f4\u3002\nMatthew\u5c1d\u8bd5\u4e86\u51e0\u6b21\u5b9e\u9a8c\uff0c\u53d1\u73b0Python\u98ce\u683c\u7684\u7b26\u53f7\u6700\u5bb9\u6613\u4f7f\u7528\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4ed6\u4e00\u76f4\u662fprimaryRhombus\u7684\u5b9e\u73b0\u8005\u3002\n\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u5bf9\u8868\u9762\u8bed\u6cd5\u505a\u51fa\u201c\u6b63\u786e\u201d\u7684\u51b3\u5b9a\u5e76\u4e0d\u662f\u6211\u4eec\u7684\u76ee\u6807\u3002\u6211\u4eec\u4ecd\u5904\u4e8e\u83f1\u5f62\u9879\u76ee\u7684\u539f\u578b\u9636\u6bb5\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u6307\u51fa\u8bbe\u8ba1\u9886\u57df\u7684\u9886\u57df\uff0c\u6df1\u5165\u4e86\u89e3\u672a\u6765\u7684\u6311\u6218\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8ba1\u5212\u4e0b\u4e00\u6b65\u56f4\u7ed5\u704c\u6728\u4e1b\u516c\u8bc1\u5efa\u7acb\u4e00\u79cd\u8bed\u8a00\u3002\u6211\u4eec\u4e0d\u76f8\u4fe1\u704c\u6728\u4e1b\u7b26\u53f7\u662f\u5b8c\u7f8e\u7684\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u76f8\u4fe1\uff0c\u901a\u8fc7\u4f7f\u7528\u704c\u6728\u7b26\u53f7\u6784\u5efa\u4e00\u79cd\u5de5\u4f5c\u7f16\u7a0b\u8bed\u8a00\u6240\u83b7\u5f97\u7684\u7406\u89e3\u5c06\u5e2e\u52a9\u6211\u4eec\u8fdb\u4e00\u6b65\u5b8c\u5584\u704c\u6728\u7b26\u53f7\u3002\u8fd9\u5bf9\u4e8e\u786e\u5b9a\u54ea\u4e9b\u8868\u9762\u8bed\u6cd5\u503c\u5f97\u63a2\u7d22\u4e5f\u81f3\u5173\u91cd\u8981\u3002\n\u8981\u6784\u5efa\u4e00\u95e8\u8bed\u8a00\uff0c\u6211\u4eec\u9700\u8981\u7f16\u5199\u5e93\u3002\u6211\u4eec\u53ef\u4ee5\u7814\u7a76\u7684\u56fe\u4e66\u9986\u5206\u4e3a\u4e24\u5927\u7c7b\uff1a\u901a\u7528\u56fe\u4e66\u9986\u548c\u4e13\u7528\u56fe\u4e66\u9986\u3002\u901a\u7528\u5e93\u662f\u5b9a\u4e49\u8bb8\u591a\u5176\u4ed6\u5e93\uff08\u5982\u7c7b\u7cfb\u7edf\u3001\u5e76\u53d1\u62bd\u8c61\u6216\u6cdb\u578b\u96c6\u5408\uff09\u7684API\u6240\u5fc5\u9700\u7684\u3002\u7279\u6b8a\u7528\u9014\u7684\u5e93\u7279\u5b9a\u4e8e\u4e00\u4e2a\u72ed\u7a84\uff08\u4f46\u5b9e\u9645\u6709\u7528\uff09\u7684\u9886\u57df\uff0c\u4f8b\u5982\u6587\u672c\u89e3\u6790\u6216\u5b9a\u7406\u8bc1\u660e\u3002\u7279\u6b8a\u7528\u9014\u5e93\u66f4\u5145\u5206\u5730\u5229\u7528\u4e86\u7279\u5b9a\u9886\u57df\u7684\u8bed\u8a00\uff0c\u56e0\u6b64\u5b83\u4eec\u5c06\u8ba9\u6211\u4eec\u5f88\u597d\u5730\u4e86\u89e3Strubbery\u6807\u8bb0\u6cd5\u4e0e\u590d\u6742DSL\u7684\u914d\u5408\u60c5\u51b5\u3002\n\u56fe\u4e66\u9986\u662f\u65b0\u7684\u83f1\u5f62\u8d21\u732e\u8005\u52a0\u5165\u7684\u7edd\u4f73\u573a\u6240\uff01\u6211\u4eec\u4ecd\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\uff0c\u56e0\u6b64\u63a2\u7d22\u540c\u4e00\u95ee\u9898\u9886\u57df\u7684\u591a\u79cd\u65b9\u6cd5\u662f\u6709\u4ef7\u503c\u7684\u3002\u6709\u5404\u79cd\u5404\u6837\u7684\u65b9\u5411\u9700\u8981\u63a2\u7d22\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u5df2\u7ecf\u5728\u4e0d\u540c\u7a0b\u5ea6\u4e0a\u8003\u8651\u7684\u4e00\u4e9b\u5efa\u8bae\uff0c\u4f46\u6211\u4eec\u9f13\u52b1\u66f4\u591a\u7684\u5efa\u8bae\u3002\n\u83f1\u5f62\u5e94\u8be5\u4e3a\u901a\u7528\u96c6\u5408\u63d0\u4f9b\u516c\u5171\u6570\u636e\u7ed3\u6784\uff0c\u4f8b\u5982\u5217\u8868\u3001\u96c6\u5408\u3001\u5730\u56fe\uff0c\u4ee5\u53ca\u7528\u4e8e\u5bf9\u4e0d\u540c\u79cd\u7c7b\u96c6\u5408\u8fdb\u884c\u62bd\u8c61\u7684\u5de5\u5177\u3002\u62c9\u514b\u7279\u7684\u5355\u6001\u6536\u96c6\u65b9\u5f0f\u4e00\u76f4\u662f\u4e00\u4e2a\u957f\u671f\u7684\u62b1\u6028\uff0c\u8fd9\u662f\u5c11\u6570\u51e0\u4e2a\u793e\u533a\u51e0\u4e4e\u666e\u904d\u540c\u610f\u9700\u8981\u6539\u8fdb\u7684\u9886\u57df\u4e4b\u4e00\u3002\nRhombus\u5e94\u8be5\u63d0\u4f9b\u66f4\u597d\u3001\u66f4\u7edf\u4e00\u7684\u7cfb\u7edf\u6765\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u7c7b\u578b\u548c\u63a5\u53e3\uff0c\u800c\u4e0d\u662fRacket\u5f53\u524d\u7684\u7ed3\u6784\u3001\u7c7b\u3001\u6cdb\u578b\u548c\u7ed3\u6784\u7c7b\u578b\u5c5e\u6027\u7684\u6df7\u4e71\u3002\u8fd9\u91cc\u6709\u5f88\u5927\u7684\u7a7a\u95f4\u6765\u5229\u7528\u704c\u6728\u4e1b\u7b26\u53f7\uff0c\u5c24\u5176\u662f\u5982\u679c\u6211\u4eec\u8981\u6784\u5efa\u67d0\u79cd\u70b9\u8f6c\u6362\u5668\u534f\u8bae\u4f9b\u5b8f\u4f7f\u7528\u7684\u8bdd\u3002\n\u6ce8\u91ca\u3001\u7c7b\u578b\u548c\u5951\u7ea6\u3002Racket\u7684\u8fd0\u884c\u65f6\u5951\u7ea6\u548cTyped Racket\u7684\u9759\u6001\u7c7b\u578b\u5904\u4e8e\u52a8\u6001\u9759\u6001\u6b63\u786e\u6027\u8c31\u7684\u4e24\u4e2a\u6781\u7aef\u3002\u83f1\u5f62\u80fd\u5426\u5360\u636e\u66f4\u65b9\u4fbf\u7528\u6237\u7684\u4e2d\u95f4\u5730\u5e26\uff1f\n\u591a\u8bed\u8a00\u6d82\u9e26\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u83f1\u5f62\u5e93\u548cRacket\u5e93\u80fd\u591f\u65e0\u7f1d\u5730\u4e92\u64cd\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cdScribble\u5230translatelibrary\u6587\u6863\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u4e0d\u540c\u7684\u8868\u9762\u8bed\u6cd5\u3002\u5728sourcedocumentation\u4e2d\uff0c\u8fd9\u91cc\u53ef\u80fd\u4e5f\u503c\u5f97\u63a2\u7d22\u3002", "note_en": "Today, Racket promises language-oriented programming to its users. Butthis promise has a constraint: if you want to build a macro-extensiblelanguage, your language has to use S-expressions. This constraint isunfairly limiting, as telling users \u201cyou can build any extensiblelanguage you want, as long as it uses S-expressions\u201d is akin to HenryFord telling Model-T buyers \u201cyour car can be any color you want, aslong as it\u2019s black.\u201d We\u2019d like to lift this limitation with a newprogramming language while taking this opportunity to improve Racketin backward-incompatible ways.\n  Rhombus is an experiment in building a  macro-extensiblegeneral-purpose programming language with  conventional surface syntaxand improved libraries on top of  the Racket platform.\n  By \u201cmacro-extensible,\u201d we mean that Rhombus users should be able toextend the syntax of Rhombus in much the same way that Racket userscan extend the syntax of Racket. Complex syntactic extensions such asobject and class systems, static type checkers, and pattern matchingshould be implemented as libraries while still providing a surfacesyntax familiar to users of these features in other languages.\n By \u201cconventional surface syntax,\u201d we mean conventional to both usersof widely-used programming languages as well as newcomers who arefamiliar with basic math notation. This leads us to the followingconstraints:\n Function calls are written as a function expression followed by aparenthesized comma-separated list of arguments, such as  f(x, y, z)\n Extra parentheses can be used freely to group things anddisambiguate, such as  (1 + 2) * 3, without introducing newstructures or semantics.\n  Syntactic forms are connected by adjacency rather than in a stricthierarchy. For example  do { } while ( ) and  x where y = z. Thisis a kind of \u201cinfix\u201d that is broader than just arithmetic.\n By \u201cimproved libraries,\u201d we mean that Rhombus should not be beholdento the backward compatibility constraints of Racket. Rhombus should befree to innovate in providing new standard libraries for features thatare becoming commonplace in other languages, such as genericcollections, stream processing, and asynchronous programming.\n By \u201con top of the Racket platform,\u201d we mean that Rhombus should be a #lang like any other, and it should be possible for users to combineRhombus code and libraries with ordinary Racket code and librariesseamlessly. Where we are now\n A few surface syntax proposals have been brainstormed, and theproposals fit into two broad categories:\n C-like surface syntaxes, which use  braces and semicolons**to convey general structure. Jay\u2019s C-expressionsfit this category.\n Python-like surface syntaxes, which use  colons and indentation to convey general structure. Jay\u2019s lexprs andMatthew\u2019s shrubbery notationfit this category.\n Separately, there\u2019s the question of how much syntactic grouping thesurface syntax should be responsible for versus how much grouping isleft up to the macro system. Three options are possible:\n The surface syntax is responsible for  all grouping. This is roughlywhere traditional S-expressions lie, and it\u2019s awkward enough thatmany Lisps relax the S-expressions-for-everything constraint andlet macros create implicit groupings. For example, Clojure\u2019s  letform implicitly groups binding-expression pairs based on adjacency,as in  (let [x 1 y 2] (+ x y)). Racket\u2019s keyword arguments are asimilar instance of relaxing this constraint. C-expressions are anattempt to have \u201cconventional surface syntax\u201d with this property.\n The surface syntax is responsible for  no grouping. This results ina Forth-like syntax where the program is just a flat sequence oftokens. This doesn\u2019t satisfy our \u201cconventional surface syntax\u201drequirement.\n The surface syntax is responsible for  some grouping, but not all.This requires that the parser understand the program\u2019s bindings andexpand macros to get a complete picture of a program\u2019s structure.Interleaving the parsing of a token stream with macro expansion inthis fashion is called enforestation, and it allows macros toextend the syntax of conventional languages. The Honu researchlanguage pioneered this technique.\n  We\u2019ve decided on a  Python-like surface syntax  withenforestation, specifically shrubbery notation, as the firstproposal to advance to the next prototyping stage. This may not be thefinal direction that the Rhombus project takes, but it\u2019s the directionwe\u2019re prioritizing for the time being. We made this decision based onthe following factors:\n Indentation sensitivity a la Python has the advantage that thevisual grouping on the screen matches grouping for parsing, but italso leaves plenty of room for operator- and identifier-drivencontext-sensitive parsing.\n Matthew tried several experiments and found Python-style notationmost straightforward to work with, and he\u2019s been the primaryRhombus implementor thus far.\n Making the \u201ccorrect\u201d decision about surface syntax isn\u2019t our goal atthis stage. We\u2019re still firmly in the prototyping phase of the Rhombusproject. Our goal is to stake out territory in the design space andget a deeper understanding of what challenges lie ahead. For thatreason,  we plan to build a language around shrubbery notationnext. We don\u2019t believe that shrubbery notation is perfect. Still, webelieve that the understanding gained from building a workingprogramming language with shrubbery notation will help us furtherrefine shrubbery notation. It will also be vital in determining whatother surface syntaxes are worth exploring.\n To build a language,  we need to write libraries. The libraries we canwork on fall into two broad categories: general-purpose andspecial-purpose. General-purpose libraries are necessary to define theAPIs of many other libraries, such as a class system, concurrencyabstractions, or generic collections. Special-purpose libraries arespecific to a narrow (but practically useful) domain, such as textparsing or theorem proving. Special purpose libraries leveragedomain-specific languages more heavily, so they\u2019ll give us a goodsense of how well shrubbery notation can cooperate with complex DSLs.\n Libraries are an excellent place for new Rhombus contributors to jumpin! We\u2019re still in the early stages, so exploring multiple approachesto the same problem domain is valuable. There\u2019s a wide variety ofdirections to explore. Below are some we\u2019re already considering tovarying degrees, but we encourage additional proposals.\n   Rhombus should provide common data structures for generic collections,such as lists, sets, maps, and the tools to abstract over differentkinds of collections. Racket\u2019s monomorphic approach to collections hasbeen a  long-standing complaint, and it\u2019s one of the few areas thecommunity almost universally agrees needs improvement.\n   Rhombus should provide a better, more unified system for defining newdata types and interfaces than Racket\u2019s current mishmash of structs,classes, generics, and structure type properties. There\u2019s a lot ofroom to leverage shrubbery notation here, especially if we were tobuild some sort of  dot transformer protocol for macros to use.\n  Annotations, types, and contracts. Racket\u2019s runtime contracts andTyped Racket\u2019s static types are at two extreme ends of thedynamic-static correctness spectrum. Can Rhombus occupy a moreuser-friendly middle ground?\n Multi-language Scribble. If we want Rhombus and Racket libraries tobe seamlessly interoperable, we need a way for Scribble to translatelibrary documentation for different surface syntaxes. In-sourcedocumentation might be worth exploring here too.", "posttime": "2022-02-14 22:55:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u72b6\u6001,rhombus,\u8bed\u6cd5", "title": "\u83f1\u5f62\u72b6\u6001\uff08\u7f16\u7a0b\u8bed\u8a00\uff09", "title_en": "State of Rhombus (programming language)", "transed": 1, "url": "https://github.com/racket/rhombus-prototype/blob/master/resources/state-of-rhombus.md", "via": "", "real_tags": ["\u7f16\u7a0b", "\u72b6\u6001", "rhombus", "\u8bed\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Pocket\u662fMozilla\u7684\u4e00\u6b3e\u4ea7\u54c1\uff0c\u662f\u60a8\u7684\u5bb6\uff0c\u662f\u60a8\u5728\u7f51\u7edc\u4e0a\u83b7\u53d6\u7cbe\u5f69\u5185\u5bb9\u7684\u6307\u5357\u3002Pocket\u53ef\u4ee5\u8ba9\u4f60\u5728\u7f51\u4e0a\u7684\u4efb\u4f55\u5730\u65b9\u4fdd\u5b58\u4e1c\u897f\uff0c\u5e76\u4ece\u6211\u4eec\u7684\u7f16\u8f91\u90a3\u91cc\u627e\u5230\u4e0b\u4e00\u6b65\u9605\u8bfb\u7684\u5efa\u8bae\u3002\u5f53\u4f60\u4f7f\u7528Pocket\u65f6\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u79c1\u4eba\u4e14\u5b89\u5168\u7684\u5e10\u6237\u8bbf\u95ee\u4fdd\u5b58\u7684\u6587\u7ae0\u548c\u89c6\u9891\uff0c\u5e76\u5728\u7535\u8111\u6216\u79fb\u52a8\u8bbe\u5907\u4e0a\u9605\u8bfb\u6216\u89c2\u770b\u3002\nPocket\u81ea2017\u5e74\u4ee5\u6765\u4e00\u76f4\u662fMozilla\u7cfb\u5217\u4ea7\u54c1\u7684\u4e00\u90e8\u5206\uff0c\u622a\u81f3\u4eca\u5e74\uff0c\u6211\u4eec\u4e00\u76f4\u4fdd\u6301\u4e00\u4e2a\u72ec\u7acb\u7684\u8d26\u6237\u7cfb\u7edf\u3002\u6211\u4eec\u73b0\u5728\u5c06\u6240\u6709\u5e10\u6237\u8fc1\u79fb\u5230\u4f7f\u7528Firefox\u5e10\u6237\u3002\nPocket\u4ee5\u524d\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u548c\u5bc6\u7801\u767b\u5f55\uff0c\u73b0\u5728\u6b63\u5728\u5c06\u6240\u6709\u5e10\u6237\u8fc1\u79fb\u5230\u4f7f\u7528Firefox\u5e10\u6237\u3002Mozilla\u7684\u4ea7\u54c1\u4f7f\u7528Firefox\u5e10\u6237\u4f5c\u4e3a\u4e00\u4e2a\u96c6\u4e2d\u4e14\u5b89\u5168\u7684\u5e10\u6237\u7cfb\u7edf\u3002\u901a\u8fc7\u8fd9\u79cd\u8fc1\u79fb\uff0cPocket\u5145\u5206\u5229\u7528\u4e86\u8be5\u7cfb\u7edf\u63d0\u4f9b\u7684\u8bb8\u591a\u597d\u5904\u3002\n\u901a\u8fc7\u8fd9\u6b21\u8fc1\u79fb\uff0c\u6211\u4eec\u91c7\u7528\u4e86\u7531Mozilla\u5b89\u5168\u4e13\u5bb6\u5f00\u53d1\u7684\u66f4\u5b89\u5168\u7684\u5e10\u6237\u7cfb\u7edf\u3002\u8fd9\u4e0d\u4ec5\u4f1a\u4f7fPocket\u66f4\u52a0\u5b89\u5168\uff0c\u8fd8\u5141\u8bb8\u60a8\u9009\u62e9\u589e\u5f3a\u7684\u5b89\u5168\u529f\u80fd\uff0c\u5982\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\uff082FA\uff09\u548c\u5e10\u6237\u6062\u590d\u5bc6\u94a5\uff0c\u4ee5\u4f7f\u60a8\u7684\u5e10\u6237\u66f4\u52a0\u5b89\u5168\u3002\n\u9664\u4e86\u589e\u5f3a\u7684\u5b89\u5168\u6027\uff0c\u540c\u4e00\u4e2aFirefox\u5e10\u6237\u8fd8\u53ef\u4ee5\u7528\u4e8eMozilla\u7684\u5176\u4ed6\u4ea7\u54c1\uff0c\u5305\u62ecFirefox\u3001Mozilla VPN\u7b49\u3002\n\u6ce8\u518cPocket\u7684\u65b0\u7528\u6237\u5c06\u88ab\u63d0\u793a\u521b\u5efa\u65b0\u7684Firefox\u5e10\u6237\u6216\u4f7f\u7528\u5176\u73b0\u6709\u5e10\u6237\u5f00\u59cb\u4f7f\u7528\u3002\nPocket\u7684\u73b0\u6709\u7528\u6237\u5c06\u5728\u4e0b\u6b21\u767b\u5f55\u65f6\u88ab\u8981\u6c42\u8fc1\u79fb\u5176\u5e10\u6237\u3002\u5c4a\u65f6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u9009\u62e9\u521b\u5efa\u65b0\u7684Firefox\u5e10\u6237\u6216\u4f7f\u7528\u73b0\u6709\u5e10\u6237\u3002\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u8df3\u8fc7\u8fc1\u79fb\u6b65\u9aa4\u3002\n\u6211\u4eec\u8981\u6c42\u6240\u6709\u73b0\u6709\u7528\u6237\u5c3d\u65e9\u8fc1\u79fb\u4ed6\u4eec\u7684\u5e10\u6237\u3002\u8fc1\u79fb\u7684\u6700\u540e\u671f\u9650\u662f2022\u5e746\u670830\u65e5\u3002\u5728\u6b64\u65e5\u671f\u4e4b\u540e\uff0cPocket\u7528\u6237\u9700\u8981\u8fc1\u79fb\u5230Firefox\u5e10\u6237\u624d\u80fd\u767b\u5f55\u5e76\u8bbf\u95ee\u4ed6\u4eec\u7684\u5217\u8868\u3002\n\u9664\u4e86\u66f4\u6539\u767b\u5f55Pocket\u7684\u65b9\u5f0f\u5916\uff0c\u8fd9\u4e0d\u4f1a\u5f71\u54cd\u60a8\u4fdd\u5b58\u7684\u7269\u54c1\u3002\u5bf9\u4e8ePocket Premium\u8ba2\u6237\uff0c\u8fc1\u79fb\u60a8\u7684\u5e10\u6237\u4e0d\u4f1a\u5f71\u54cd\u60a8\u7684\u8ba2\u9605\u3002\n\u6253\u5f00Pocket\u7684\u767b\u5f55\u9875\u9762\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u767b\u5f55\uff0c\u53ea\u9700\u6ce8\u9500\u5373\u53ef\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\u3002\n\u767b\u5f55\u53e3\u888b\u3002\u4e4b\u540e\uff0c\u60a8\u5c06\u770b\u5230\u4e00\u6761\u6d88\u606f\uff0c\u5176\u4e2d\u5305\u542b\u8fc1\u79fb\u5e10\u6237\u7684\u8bf4\u660e\u3002\n\u9009\u62e9\u201c\u662f\u201d\u7ee7\u7eed\uff0c\u7136\u540e\u9009\u62e9\u201c\u7ee7\u7eed\u201d\uff08\u5982\u679c\u9009\u62e9\u201c\u5426\u201d\uff0c\u4e0b\u6b21\u767b\u5f55\u65f6\u5c06\u63d0\u793a\u60a8\u8fdb\u884c\u8fc1\u79fb\uff09\u3002\n\u60a8\u5c06\u88ab\u91cd\u5b9a\u5411\u5230\u60a8\u7684Pocket\u5e10\u6237\u3002\u4ece\u73b0\u5728\u8d77\uff0c\u53ea\u9700\u4f7f\u7528Firefox\u5e10\u6237\u767b\u5f55Pocket\u5373\u53ef\u3002\n\u4f60\u548cFirefox\u662f\u4ec0\u4e48\u5173\u7cfb\uff1fPocket\u662fMozilla\u7cfb\u5217\u4ea7\u54c1\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u4ea7\u54c1\u90fd\u901a\u8fc7Firefox\u5e10\u6237\u8fde\u63a5\u3002\n\u6211\u9700\u8981\u5207\u6362\u5230Firefox\u6d4f\u89c8\u5668\u624d\u80fd\u7ee7\u7eed\u4f7f\u7528Pocket\u5417\uff1f\u867d\u7136Pocket\u73b0\u5728\u9700\u8981Firefox\u5e10\u6237\u624d\u80fd\u6ce8\u518c\u6216\u767b\u5f55\uff0c\u4f46\u60a8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u9996\u9009web\u6d4f\u89c8\u5668\u8bbf\u95eePocket\u3002\u6211\u4eec\u9488\u5bf9\u8bb8\u591a\u6d41\u884c\u6d4f\u89c8\u5668\u7684\u6d4f\u89c8\u5668\u6269\u5c55\uff0c\u4ee5\u53ca\u9488\u5bf9iOS\u548cAndroid\u7684\u5e94\u7528\u7a0b\u5e8f\u4e5f\u5c06\u7ee7\u7eed\u63d0\u4f9b\u3002\n\u6211\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2aFirefox\u8d26\u6237\u548c\u4e00\u4e2aPocket\u8d26\u6237\u3002\u6211\u9700\u8981\u505a\u4ec0\u4e48\u6765\u8fc1\u79fb\u6211\u7684\u5e10\u6237\uff1f\n\u8981\u8fc1\u79fb\u60a8\u7684\u5e10\u6237\uff0c\u8bf7\u4f7f\u7528Firefox\u5e10\u6237\u767b\u5f55Pocket\u3002\u7136\u540e\uff0c\u60a8\u7684Pocket\u5e10\u6237\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5c06\u66f4\u6539\u4e3a\u60a8\u7528\u4e8eFirefox\u5e10\u6237\u7684\u5730\u5740\u3002\n\u5982\u679c\u6211\u5728\u622a\u6b62\u65e5\u671f\u524d\u4e0d\u8fc1\u79fb\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f2022\u5e746\u670830\u65e5\u4e4b\u540e\uff0c\u4e0b\u6b21\u5c1d\u8bd5\u8bbf\u95eePocket\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u7ad9\u65f6\uff0c\u60a8\u5c06\u88ab\u8981\u6c42\u8fc1\u79fb\u60a8\u7684\u5e10\u6237\u3002\u5728\u5b8c\u6210\u8fc1\u79fb\u4e4b\u524d\uff0c\u60a8\u5c06\u65e0\u6cd5\u7ee7\u7eed\u4f7f\u7528\u60a8\u7684\u5e10\u6237\u3002\n\u8fc1\u79fb\u5230Firefox\u8d26\u6237\u4f1a\u4ea7\u751f\u4efb\u4f55\u8d39\u7528\u5417\uff1f\u6ce8\u518cPocket\u65e0\u9700\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\uff0c\u5c06\u73b0\u6709Pocket\u5e10\u6237\u8fc1\u79fb\u5230Firefox\u5e10\u6237\u4e5f\u65e0\u9700\u652f\u4ed8\u4efb\u4f55\u8d39\u7528\u3002\n\u6211\u8ba2\u9605\u4e86Pocket Premium\u3002\u6211\u9700\u8981\u8fc1\u79fb\u5417\uff1f\u6240\u6709Pocket\u7528\u6237\u90fd\u88ab\u8981\u6c42\u8fc1\u79fb\u4ed6\u4eec\u7684\u5e10\u6237\u3002\u5982\u679c\u60a8\u8ba2\u9605Pocket Premium\uff0c\u5c06\u4e0d\u4f1a\u5f71\u54cd\u60a8\u7684\u8ba2\u9605\u6216\u53ef\u7528\u529f\u80fd\u3002\n\u8fd9\u4e00\u53d8\u5316\u5982\u4f55\u5f71\u54cd\u6211\u7684\u9690\u79c1\uff1fPocket\u662fMozilla\u7cfb\u5217\u4ea7\u54c1\u7684\u4e00\u90e8\u5206\u3002\u901a\u8fc7\u4f7f\u7528Firefox\u5e10\u6237\u8bbf\u95eePocket\uff0c\u60a8\u7684\u5e10\u6237\u5c06\u9075\u5b88Mozilla\u548cPocket\u7684\u670d\u52a1\u6761\u6b3e\u548c\u9690\u79c1\u653f\u7b56\u3002\u8981\u4e86\u89e3\u5982\u4f55\u7ba1\u7406Firefox\u5e10\u6237\u53ca\u5176\u76f8\u5173\u6570\u636e\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002\n\u6211\u518d\u4e5f\u4e0d\u60f3\u7528\u53e3\u888b\u4e86\u3002\u6211\u8be5\u600e\u4e48\u529e\uff1f\u5982\u679c\u60a8\u4e0d\u60f3\u518d\u4f7f\u7528Pocket\uff0c\u53ef\u4ee5\u5355\u51fb\u6b64\u5904\u5bfc\u51fa\u60a8\u7684\u5e10\u6237\u6570\u636e\uff08\u53ef\u9009\uff09\u5e76\u8bbf\u95ee\u6b64\u5904\u7684\u5e10\u6237\u5220\u9664\u9875\u9762\u3002\n\u6211\u53ef\u4ee5\u5728\u4e0d\u5220\u9664Firefox\u5e10\u6237\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u6211\u7684Pocket\u5e10\u6237\u5417\uff1f\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u5220\u9664\u4f60\u7684Pocket\u5e10\u6237\u800c\u4e0d\u5f71\u54cd\u4f60\u7684Firefox\u5e10\u6237\u3002\u8981\u66f4\u6539\u6216\u5220\u9664\u60a8\u7684Pocket\u5e10\u6237\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002\n\u5728\u5220\u9664\u60a8\u7684\u5e10\u6237\u4e4b\u524d\uff0c\u6211\u4eec\u5efa\u8bae\u5bfc\u51fa\u60a8\u7684\u6570\u636e\u3002\u5220\u9664\u5e10\u6237\u662f\u6c38\u4e45\u6027\u7684\uff0c\u65e0\u6cd5\u64a4\u6d88\u3002\n\u5982\u4f55\u5728\u4e0e\u5e10\u6237\u76f8\u5173\u7684\u95ee\u9898\u4e0a\u83b7\u5f97\u5e2e\u52a9\uff1f\u5982\u679c\u60a8\u6709\u5173\u4e8ePocket\u5e10\u6237\u7684\u95ee\u9898\uff0c\u5982\u5bc6\u7801\u91cd\u7f6e\u3001\u5408\u5e76\u4e24\u4e2aPocket\u5e10\u6237\u6216\u5176\u4ed6\u95ee\u9898\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u8054\u7cfbPocket Support\u3002\n\u5982\u679c\u60a8\u5bf9Firefox\u5e10\u6237\u6709\u4efb\u4f55\u7591\u95ee\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u8bbf\u95eeFirefox\u7684\u5e2e\u52a9\u4e2d\u5fc3\u6216\u5728\u652f\u6301\u8bba\u575b\u4e0a\u63d0\u95ee\u3002\n\u6211\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u8fd9\u91cc\u6ca1\u6709\u56de\u7b54\u3002\u6211\u600e\u4e48\u8054\u7cfb\uff1f\u5355\u51fb\u6b64\u5904\u8054\u7cfbPocket Support\uff0c\u6211\u4eec\u5c06\u5f88\u4e50\u610f\u4e3a\u60a8\u63d0\u4f9b\u5e2e\u52a9\u3002", "note_en": "Pocket, a product from  Mozilla, is your home and guide for great content around the Web. Pocket lets you save things from anywhere on the Web and find suggestions from our editors for what to read next. When you use Pocket, you can access saved articles and videos in a private and secure account, and read or watch on your computer or mobile device.\n Pocket has been part of the Mozilla family of products since 2017, and up to this year, we\u2019ve maintained a separate account system. We\u2019re now migrating all accounts to use  Firefox accounts instead.\n   Pocket, which previously allowed users to log in with their email address and password, is migrating all accounts to use  Firefox accounts instead. Products from Mozilla use Firefox accounts as a centralized and secure account system. With this migration, Pocket is taking advantage of the many benefits that this system has to offer.\n With this migration, we\u2019re adopting a more secure account system developed by security experts at Mozilla. Not only will this make Pocket more secure, but it allows you to opt-in to enhanced security functionality, like two-factor authentication (2FA) and account recovery keys, to make your account even more secure.\n In addition to enhanced security, the same Firefox account can also be used for other products from Mozilla, including  Firefox,  Mozilla VPN and more.\n  New users signing up for Pocket will be prompted to create a new Firefox account or use their existing account to get started.\n Existing users of Pocket will be asked to migrate their account the next time they log in. At that time, they\u2019ll have the option to create a new Firefox account or use an existing account. They can also skip the migration step for a limited time.\n We\u2019re requesting all existing users to migrate their accounts at their earliest convenience. The deadline for migrating is  June 30th, 2022. After this date, Pocket users will be required to migrate to a Firefox account in order to login and access their list.\n Aside from changing how you log in to Pocket, this does not affect your saved items. For Pocket Premium subscribers, migrating your account will not impact your subscription.\n  Open  Pocket\u2019s Login page. If you\u2019re already logged in, simply log out to be redirected to the Login page.\n Log into Pocket. Afterwards, you\u2019ll see a message with instructions for migrating your account.\n Select  Yes to proceed then select  Continue (If you select  No, you will be prompted to migrate the next time you log in).\n You\u2019ll be redirected to your Pocket account. From now on, simply use your Firefox account to log into Pocket.\n  What is your relationship with Firefox?  Pocket is part of the  Mozilla family of products, which are all connected via Firefox accounts.\n Do I need to switch to the Firefox browser to keep using Pocket?  While Pocket now requires a Firefox account to sign up or log in, you can continue using your preferred web browser to access Pocket. Our browser extensions for many popular browsers and apps for iOS and Android will continue to be available as well.\n I already have a Firefox account and a Pocket account. What do I need to do to migrate my account?\n    To migrate your account, log in to Pocket using your Firefox account. Then, your Pocket account email address will change to the address you\u2019re using for your Firefox account.\n What happens if I don\u2019t migrate by the deadline?  After  June 30th, 2022 you\u2019ll be required to migrate your account the next time you attempt to access Pocket\u2019s app or website. You will not be able to proceed to your account until you complete the migration.\n Is there any cost associated with this migration to Firefox accounts?  There is no cost to sign up for Pocket, and there is no cost to migrate your existing Pocket account to a Firefox account.\n I have a subscription to Pocket Premium. Do I need to migrate? All Pocket users are being asked to migrate their account. If you subscribe to  Pocket Premium, there will be no impact on your subscription or the available features.\n How does this change impact my privacy?  It doesn\u2019t. Pocket is a part of the Mozilla family of products. By using a Firefox account to access Pocket, your account is subject to Mozilla and Pocket\u2019s terms of service and privacy policies. To learn how to manage your Firefox account and the data associated with it,  click here.\n I no longer want to use Pocket. What should I do? If you no longer wish to use Pocket, you can  click here to export your account data (optional) and access the account deletion page  here.\n  Can I delete my Pocket account without deleting my Firefox account? Yes, you can delete your Pocket account without impacting your Firefox account. In order to make changes or delete your Pocket account,  click here.\n Before deleting your account, we recommend  exporting your data. Deleting an account is permanent and cannot be undone.\n How can I get help with an account-related issue? If you have a question regarding your Pocket account, such as password reset, merging two Pocket accounts, or another issue,  click here to contact Pocket Support.\n If you have a question regarding your Firefox account,  click here to visit Firefox\u2019s help center or  ask a question in the support forum.\n I have a question that isn\u2019t answered here. How can I get in touch?  Click here to contact Pocket Support, and we\u2019ll be glad to help you.", "posttime": "2022-02-14 22:50:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "firefox,migration,\u5e10\u6237", "title": "\u8896\u73cd\u8fc1\u79fb\u5230Firefox\u5e10\u6237", "title_en": "Pocket migration to Firefox accounts", "transed": 1, "url": "https://support.mozilla.org/en-US/kb/pocket-firefox-account-migration", "via": "", "real_tags": ["firefox", "migration", "\u5e10\u6237"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073170, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5728\u9a8c\u8bc1\u60a8\u7684\u8bf7\u6c42\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002", "note_en": "Please wait while your request is being verified...", "posttime": "2022-02-14 22:45:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,\u7f16\u5199,lisp,\u9a8c\u8bc1", "title": "\uff08\u5982\u4f55\u7528Python\u7f16\u5199\uff08Lisp\uff09\u89e3\u91ca\u5668\uff09", "title_en": "(How to Write a (Lisp) Interpreter (In Python))", "transed": 1, "url": "https://norvig.com/lispy.html", "via": "", "real_tags": ["python", "\u7f16\u5199", "lisp", "\u9a8c\u8bc1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073169, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d77\u519b\uff1a\u201c\u5e78\u798f\u662f\u7ed9\u611a\u8822\u7684\u4eba\u7684\u3002\u201d\u8fd9\u662f\u6211\u7ecf\u5e38\u542c\u5230\u7684\u806a\u660e\u8fc7\u4eba\u7684\u62b1\u6028\u3002\u4ed6\u4eec\u8ba4\u4e3a\u53ea\u6709\u611a\u8822\u6216\u61d2\u60f0\u7684\u4eba\u624d\u80fd\u5feb\u4e50\u3002\u4f01\u4e1a\u5bb6\u4f1a\u8bf4\uff1a\u201c\u6211\u4e0d\u60f3\u5feb\u4e50\uff0c\u56e0\u4e3a\u6211\u60f3\u6210\u529f\u3002\u201d\u4ed6\u4eec\u62c5\u5fc3\uff0c\u5982\u679c\u4ed6\u4eec\u592a\u9ad8\u5174\u4e86\uff0c\u5c31\u4f1a\u5931\u53bb\u6b32\u671b\uff0c\u4e0d\u518d\u52aa\u529b\u5de5\u4f5c\u3002\n\u548c\u5176\u4ed6\u4e8b\u60c5\u4e00\u6837\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u8d8a\u806a\u660e\uff0c\u4f60\u5c31\u8d8a\u80fd\u770b\u5230\u65e5\u5e38\u751f\u6d3b\u80cc\u540e\u7684\u8f7b\u677e\u6216\u5b89\u5168\u3002\u4f60\u4eec\u770b\u5230\u4e86\u6240\u6709\u7684\u98ce\u9669\u548c\u8d1f\u9762\u5f71\u54cd\uff0c\u4ee5\u53ca\u7b49\u5f85\u7740\u6211\u4eec\u7684\u707e\u96be\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u8bb8\u591a\u88ab\u63cf\u8ff0\u4e3a\u5bf9\u4f60\u6216\u793e\u4f1a\u6709\u76ca\u7684\u4e8b\u60c5\u80cc\u540e\u7684\u6124\u4e16\u5ac9\u4fd7\u548c\u64cd\u7eb5\u3002\u4f60\u53d8\u5f97\u6124\u4e16\u5ac9\u4fd7\uff0c\u4f60\u901a\u8fc7\u6124\u4e16\u5ac9\u4fd7\u6765\u8868\u8fbe\u4f60\u7684\u667a\u6167\u3002\u975e\u5e38\u806a\u660e\u7684\u4eba\u7ecf\u5e38\u7528\u7eaf\u7cb9\u6124\u4e16\u5ac9\u4fd7\u7684\u89c2\u5bdf\u6765\u4ea4\u6d41\u3002\n\u4e0d\u60f3\u5feb\u4e50\u4e5f\u6ca1\u5173\u7cfb\u3002\u4f46\u6211\u4eec\u5c06\u63a2\u7d22\u4f60\u662f\u5426\u80fd\u5728\u4e0d\u663e\u8457\u964d\u4f4e\u52a8\u529b\u6216\u667a\u529b\u7684\u60c5\u51b5\u4e0b\u589e\u52a0\u5e78\u798f\u611f\u3002\n\u8ba9\u6211\u4eec\u6765\u770b\u7b2c\u4e00\u4e2a\u53cd\u5bf9\u610f\u89c1\uff1a\u201c\u6211\u4e0d\u9ad8\u5174\uff0c\u56e0\u4e3a\u6211\u5f88\u806a\u660e\u3002\u201d\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u6b63\u786e\u7684\u3002\u4f60\u4e0d\u5feb\u4e50\u7684\u90e8\u5206\u539f\u56e0\u662f\u4f60\u77e5\u9053\u548c\u7406\u89e3\u7684\u592a\u591a\u3002\u4f60\u63a5\u89e6\u592a\u591a\u4e86\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u4f60\u4e0d\u80fd\u5feb\u4e50\u5e76\u4fdd\u7559\u4f60\u7684\u667a\u6167\u3002\n\u4f46\u4e0d\u8981\u5012\u9000\uff1a\u4f60\u4e0d\u806a\u660e\u662f\u56e0\u4e3a\u4f60\u4e0d\u5feb\u4e50\uff1b\u4f60\u4e0d\u5feb\u4e50\u662f\u56e0\u4e3a\u4f60\u806a\u660e\u3002\u4f60\u53ef\u4ee5\u5feb\u4e50\u800c\u806a\u660e\uff0c\u53ea\u662f\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c\u3002\u597d\u6d88\u606f\u662f\uff0c\u806a\u660e\u4eba\u5584\u4e8e\u53d1\u73b0\u771f\u76f8\u3002\u4f60\u8d8a\u6df1\u5165\u6316\u6398\u67d0\u4e9b\u6df1\u523b\u7684\u771f\u7406\uff0c\u4f60\u5c31\u4f1a\u53d8\u5f97\u8d8a\u81ea\u7531\u3001\u8d8a\u548c\u5e73\u3002\u548c\u5e73\u4f1a\u5e26\u6765\u5e78\u798f\u3002\n\u5982\u679c\u4f60\u8fd9\u4e48\u806a\u660e\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5f00\u5fc3\uff1f\u6211\u7edd\u5bf9\u76f8\u4fe1\u8fd9\u662f\u771f\u7684\u3002\u5728\u6211\u4eec\u7684\u793e\u4f1a\u4e2d\uff0c\u7cbe\u795e\u9ad8\u5ea6\u6d3b\u8dc3\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\uff0c\u4f60\u51e0\u4e4e\u53ef\u4ee5\u7528\u5b83\u6765\u6362\u53d6\u4efb\u4f55\u4e1c\u897f\u3002\u5982\u679c\u4f60\u806a\u660e\uff0c\u4f60\u5c31\u53ef\u4ee5\u77e5\u9053\u5982\u4f55\u5728\u57fa\u56e0\u7ea6\u675f\u4e0b\u4fdd\u6301\u5065\u5eb7\uff0c\u5982\u4f55\u5728\u73af\u5883\u7ea6\u675f\u4e0b\u81f4\u5bcc\u3002\n\u5982\u679c\u4f60\u806a\u660e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728\u751f\u7406\u9650\u5236\u4e0b\u627e\u5230\u5feb\u4e50\u7684\u65b9\u6cd5\u3002\u4f46\u4f60\u7684\u751f\u7406\u9650\u5236\u6bd4\u4f60\u60f3\u8c61\u7684\u8981\u5927\u5f97\u591a\u3002\n\u5982\u679c\u4f60\u66fe\u7ecf\u559d\u9189\uff0c\u6216\u8005\u901a\u8fc7\u670d\u7528\u8ff7\u5e7b\u836f\uff0c\u6216\u8005\u901a\u8fc7\u51a5\u60f3\u3001\u547c\u5438\u6216\u5176\u4ed6\u50ac\u7720\u6280\u672f\uff0c\u6539\u53d8\u4e86\u4f60\u7684\u7cbe\u795e\u72b6\u6001\uff0c\u90a3\u4e48\u4f60\u5df2\u7ecf\u7ecf\u5386\u4e86\u77ed\u6682\u7684\u5feb\u4e50\u65f6\u523b\uff0c\u800c\u4e0d\u662f\u4f60\u5728\u4e00\u5929\u4e2d\u7684\u611f\u89c9\u3002\n\u5f53\u7136\uff0c\u5176\u4e2d\u4e00\u4e9b\u662f\u865a\u5047\u7684\u3001\u5feb\u4e50\u9a71\u52a8\u7684\u5e78\u798f\u3002\u4f46\u8fd9\u662f\u4e8b\u5b9e\uff1b\u5426\u5219\uff0c\u4f60\u5c31\u4e0d\u4f1a\u60f3\u8981\u90a3\u79cd\u72b6\u6001\u3002\n\u5b9e\u73b0\u8fd9\u4e9b\u77ed\u6682\u7684\u5e78\u798f\u72b6\u6001\u53ef\u4ee5\u5411\u4f60\u5c55\u793a\u4f60\u7684\u8303\u56f4\u6709\u591a\u5927\uff0c\u8fd9\u4e2a\u8303\u56f4\u53ef\u80fd\u76f8\u5f53\u5927\u3002\n\u4f60\u662f\u5982\u4f55\u8ba9\u81ea\u5df1\u6c38\u8fdc\u671d\u7740\u8fd9\u4e2a\u65b9\u5411\u524d\u8fdb\u7684\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u8ba9\u4f60\u7684\u5934\u8111\u5c48\u670d\u548c\u6c89\u9ed8\u6765\u9020\u8bbf\u5b83\u7684\uff1f", "note_en": "Naval: \u201cHappiness is for stupid people.\u201d That\u2019s a common complaint I hear from smart overachievers. They think only dumb or lazy people can be happy. Entrepreneurs will say, \u201cI don\u2019t want to be happy because I want to be successful.\u201d They worry that if they get too happy they\u2019ll lose their desire and won\u2019t work hard anymore.\n  Like everything else, there is some truth to this. Generally, the more intelligent you are, the more you can see behind the fa\u00e7ade of everyday life being easy or safe. You see all the risks and downsides\u2014the calamities that await us. You see the cynicism and manipulation behind so many things portrayed as being good for you or society. You become cynical, and you signal your intelligence through cynicism. Very smart people often communicate in purely cynical observations.\n It\u2019s OK to not want to be happy. But we\u2019re going to explore whether you can increase your happiness without significantly lowering your drive or intellect.\n Let\u2019s take the first objection: \u201cI\u2019m not happy because I\u2019m smart.\u201d This is partially true. You are unhappy partially because you know and understand too much. You\u2019ve been exposed to too much. But that doesn\u2019t mean that you can\u2019t be happy and retain your intelligence.\n  But don\u2019t get it backwards: You\u2019re not smart because you\u2019re unhappy; you\u2019re unhappy because you\u2019re smart. You can be happy and smart\u2014it\u2019s just going to take more work. The good news is, smart people are good at figuring out the truth. The more you dig into certain deep truths, the freer and more peaceful you will become. That peace will lead to happiness.\n If you\u2019re so smart, why aren\u2019t you happy? I absolutely believe that is true. The beauty of being mentally high functioning in our society is that you can trade it for almost anything. If you\u2019re smart, you can figure out how to be healthy within your genetic constraints and how to be wealthy within your environmental constraints.\n If you\u2019re smart, you can figure out how to be happy within your biological constraints. But your biological constraints are a lot larger than you might think.\n  If you\u2019ve ever gotten drunk or achieved an altered state of mind on psychedelic drugs or through meditation, breathing or other hypnotic techniques, you have experienced brief moments of happiness beyond what you feel on a typical day.\n Of course, some of this is a fake, pleasure-driven happiness. But there\u2019s truth to it; otherwise, you wouldn\u2019t desire that state.\n Achieving these brief states of happiness can show you how dynamic your range is\u2014and that range can be quite large.\n How do you nudge yourself in that direction on a perpetual basis, as opposed to visiting it by stunning your mind into submission and silence?", "posttime": "2022-02-14 22:43:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u5fc3,aren,\u6124\u4e16\u5ac9\u4fd7", "title": "\u5982\u679c\u4f60\u8fd9\u4e48\u806a\u660e\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5f00\u5fc3\uff1f", "title_en": "If you\u2019re so smart, why aren\u2019t you happy?", "transed": 1, "url": "https://nav.al/smart", "via": "", "real_tags": ["\u5f00\u5fc3", "aren", "\u6124\u4e16\u5ac9\u4fd7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073168, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5728\u9a8c\u8bc1\u60a8\u7684\u8bf7\u6c42\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002", "note_en": "Please wait while your request is being verified...", "posttime": "2022-02-14 22:42:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6708\u7403,identification,\u9a8c\u8bc1", "title": "\u5bf9\u5373\u5c06\u649e\u51fb\u6708\u7403\u7269\u4f53\u7684\u6b63\u786e\u8bc6\u522b", "title_en": "Corrected identification of object about to hit the moon", "transed": 1, "url": "https://www.projectpluto.com/temp/correct.htm", "via": "", "real_tags": ["\u6708\u7403", "\u9a8c\u8bc1"]}]