[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1075171, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u4e00\u6b3e5\u4e2a\u5b57\u6bcd\u7684\u6587\u5b57\u6e38\u620f\u975e\u5e38\u6d41\u884c\u3002\u6d4f\u89c8\u4e00\u4e0b\u6e90\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u5b9e\u73b0\u5141\u8bb8\u731c\u6d4b\u5b57\u5178\u548c\u7b54\u6848\u5217\u8868\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u9009\u62e9\u3002\n\u79d8\u5bc6\u5355\u8bcd\u7684\u5217\u8868\u5c31\u5728\u4ee3\u7801\u4e2d\uff0c\u8fd9\u4e2a\u5355\u8bcd\u662f\u6839\u636e\u7528\u6237\u7684\u672c\u5730\u65e5\u671f\u9009\u62e9\u7684\u3002\n\u7b2c\u4e00\u70b9\u5f88\u806a\u660e\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e0d\u9700\u8981\u6bcf\u5929\u66f4\u65b0\u540e\u7aef\uff08\u6216\u8005\u540e\u7aef\u6709\u903b\u8f91\uff09\uff0c\u5b83\u4f1a\u5728\u5348\u591c\u4e3a\u6bcf\u4e2a\u7528\u6237\u81ea\u52a8\u5207\u6362\uff0c\u800c\u4e0d\u662f\u6839\u636e\u670d\u52a1\u5668\u7684\u5348\u591c\u968f\u673a\u5207\u6362\u3002\n\u53e6\u5916\u4e24\u4e2a\u8ba9\u6211\u5403\u60ca\u3002\u6211\u5e0c\u671b\u81f3\u5c11\u6709\u4e00\u4e9b\u7b80\u5355\u7684\u7279\u5b9a\u9886\u57df\u7684\u538b\u7f29\u3002\u6b64\u5916\uff0c\u6211\u5e0c\u671b\u7b54\u6848\u5217\u8868\u53ea\u662f\u5b57\u5178\u4e2d\u7684\u6307\u9488\uff0c\u800c\u4e0d\u662f\u5355\u72ec\u7684\u5217\u8868\uff08\u6bcf\u6b21\u63d0\u4ea4\u5355\u8bcd\u65f6\u90fd\u9700\u8981\u9a8c\u8bc1\u4ee3\u7801\u68c0\u67e5\u4e24\u4e2a\u5217\u8868\uff09\u3002\n\u6211\u60f3\u6211\u5c06\u5982\u4f55\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u5e76\u4ece\u90a3\u91cc\u5f00\u59cb\u601d\u8003\u5982\u4f55\u4f18\u5316\u5b83\u3002\u4e00\u7bc7\u5173\u4e8e\u5c06\u5b57\u5178\u538b\u7f29\u5230\u9002\u5408\u4e00\u4e2a\u6e38\u620f\u673a\u7684\u5e16\u5b50\uff0c\u7136\u540e\u706b\u4e0a\u6d47\u6cb9\uff0c\u6700\u7ec8\u6211\u5d29\u6e83\u4e86\u3002\u6211\u82b1\u4e86\u4e00\u5929\u7684\u65f6\u95f4\u5c1d\u8bd5\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u4ee5\u4e0b\u662f\u6211\u7684\u53d1\u73b0\u3002\u652f\u6301\u8fd9\u9879\u7814\u7a76\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f\u5f00\u6e90\u7684\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u67e5\u770b\u3002\n\u6ce8\u610f\uff1a\u5bf9\u4e8e\u8fd9\u4e2a\u5206\u6790\uff0c\u6211\u4f7f\u7528\u7684\u662f\u539f\u59cb\u5355\u8bcd\u7684\u6863\u6848\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u5b57\u5178\u548c\u7b54\u6848\u90fd\u53d1\u751f\u4e86\u53d8\u5316\u3002\u6211\u8ba4\u4e3a\u4efb\u4f55\u6539\u53d8\u90fd\u4e0d\u4f1a\u5bf9\u8fd9\u4e00\u5206\u6790\u4ea7\u751f\u592a\u5927\u5f71\u54cd\u3002\u5bf9\u4e8e\u6240\u6709\u7684\u901a\u7528\u538b\u7f29\uff0c\u6211\u4f7f\u7528\u7684\u662fzstd\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u9ad8\u8d28\u91cf\u7684\u538b\u7f29\u673a\u3002\n\u6211\u7684\u8981\u6c42\u5f88\u7b80\u5355\u3002\u6211\u5c06\u5047\u8bbe\u4e00\u4e2a\u6d4f\u89c8\u5668\u76ee\u6807\uff0c\u6211\u5c06\u770b\u770b\u5982\u4f55\u6700\u597d\u5730\u5728\u90a3\u91cc\u83b7\u53d6\u6570\u636e\u3002\u6211\u5c06\u5047\u8bbe\u6211\u53ef\u4ee5\u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5e76\u4e14\u6211\u8fd8\u5c06\u4f30\u8ba1\u89e3\u7801\u5668\u7684\u5927\u5c0f\uff0c\u4ee5\u786e\u4fdd\u6211\u4e0d\u53ea\u662f\u5c06\u6570\u636e\u79fb\u52a8\u5230\u89e3\u7801\u5668\u4e2d\u3002\u7136\u800c\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u4e0d\u662f\u6211\u7684\u4efb\u4f55\u89e3\u51b3\u65b9\u6848\u7684\u95ee\u9898\u3002\n\u7531\u4e8eWASM\u5f00\u9500\u548cRust\u9519\u8bef\u5904\u7406\u5f00\u9500\uff0c\u6d4b\u91cf\u4ee3\u7801\u5927\u5c0f\u975e\u5e38\u56f0\u96be\u3002\u4e3a\u4e86\u5bf9\u6b64\u8fdb\u884c\u89c4\u8303\u5316\uff0c\u6211\u5c06\u91c7\u7528\u6700\u5c0f\u5b9e\u73b0\u7684\u4ee3\u7801\u5927\u5c0f\uff08\u4f4d\u56fe\u4e3a1347\uff09\u202fB\uff09 \u5e76\u51cf\u53bb\u5728\u6ca1\u6709\u6050\u614c\u53ef\u80fd\u6027\u7684\u60c5\u51b5\u4e0b\u5b9e\u65bd\u65f6\u7684\u5927\u5c0f\u5dee\u5f02\uff08234\u202fB\uff09 \u3002\u8fd9\u610f\u5473\u7740\u672c\u6587\u4e2d\u770b\u5230\u7684\u4ee3\u7801\u5927\u5c0f\u5c06\u6bd4\u5b9e\u9645\u538b\u7f29\u5927\u5c0f\u5c0f1113b\u3002\u8fd9\u5e94\u8be5\u5927\u81f4\u8bf4\u660e\u57fa\u7840\u8bbe\u65bd\u7684\u5f00\u9500\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u6709\u610f\u4e49\u7684\uff0c\u56e0\u4e3a\u9664\u975e\u60a8\u5728WASM\u4e2d\u53ea\u5b9e\u73b0\u8fd9\u4e00\u4e2a\u51fd\u6570\uff0c\u5426\u5219\u60a8\u5c06\u4e0d\u5f97\u4e0d\u652f\u4ed8\u8fd9\u4e00\u6210\u672c\uff0c\u800c\u4e14\u8fd9\u5e76\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u7279\u5b9a\u4e8e\u57df\u7684\u6570\u636e\u3002\u6211\u4e5f\u4e0d\u60f3\u7528\u201c\u4e0d\u5b89\u5168\u201d\u6765\u5b9e\u73b0\u6bcf\u4e00\u4e2a\uff0c\u4ee5\u907f\u514d\u5207\u7247\u8fb9\u754c\u68c0\u67e5\u5e26\u6765\u7684\u6050\u614c\u3002\u8fd9\u4e0d\u662f\u5f88\u79d1\u5b66\uff0c\u4e3b\u8981\u662f\u786e\u4fdd\u6ca1\u6709\u5b9e\u73b0\u4f1a\u5bfc\u81f4\u5de8\u5927\u7684\u4ee3\u7801\u91cf\u3002\n\u6211\u8fd8\u60f3\u786e\u4fdd\u7f16\u7801\u5bf9\u4e8e\u4ea4\u4e92\u4f7f\u7528\u662f\u53ef\u884c\u7684\u3002\u6211\u7684\u76ee\u6807\u662f50\u202f\u5973\u58eb\u5728100\u53f7\u623f\u95f4\u91cc\u7559\u4e86\u5f88\u591a\u7a7a\u95f4\u202fms\u662f\u5176\u4ed6\u5de5\u4f5c\u7684\u95e8\u69db\u3002\u5b9e\u9645\u4e0a\uff0c\u5bf9\u4e8e\u6211\u7684\u4efb\u4f55\u89e3\u51b3\u65b9\u6848\u6765\u8bf4\uff0c\u8fd9\u90fd\u4e0d\u662f\u4e00\u4e2a\u6570\u91cf\u7ea7\u7684\u95ee\u9898\u3002\u672c\u6587\u4e2d\u7684\u6240\u6709\u65f6\u95f4\u90fd\u662f\u901a\u8fc7\u8ba1\u7b97\u5e73\u5747\u65f6\u95f4\uff0c\u5728AMD5950X\u4e0a\u4ee5\u968f\u673a\u987a\u5e8f\u68c0\u67e5\u6240\u6709\u53ef\u80fd\u7684\u6709\u6548\u6216\u65e0\u6548\u5355\u8bcd\u3002\u8fd9\u5e76\u4e0d\u7279\u522b\u79d1\u5b66\uff0c\u56e0\u4e3a\u5206\u652f\u9884\u6d4b\u5668\u5c06\u5f88\u5feb\u5b66\u4f1a\u603b\u662f\u8bf4\u662f\u6216\u5426\uff0c\u5e76\u4e14\u8ba1\u65f6\u53ea\u8fd0\u884c\u4e86\u4e00\u6b21\uff0c\u4f46\u7531\u4e8e\u6211\u76ee\u524d\u8fd8\u6ca1\u6709\u8fbe\u5230\u65f6\u95f4\u8981\u6c42\uff0c\u8fd9\u4f3c\u4e4e\u5e76\u4e0d\u91cd\u8981\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u6700\u7b80\u5355\u7684\u9009\u9879\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u8fd9\u573a\u6bd4\u8d5b\u670912\u573a\u202f\u5b57\u5178\u91cc\u6709972\u4e2a\u5355\u8bcd\uff0c2315\u4e2a\u7b54\u6848\uff0c10\u4e2a\u5355\u8bcd\u202f657\u4e2a\u53ef\u731c\u5355\u8bcd\u3002\u5728\u6e38\u620f\u4e2d\uff0c\u8fd9\u4e9b\u662fJSON\u7f16\u7801\u5728\u4e24\u4e2a\u5355\u72ec\u7684\u5217\u8868\u4e2d\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u4e9b\u6709\u591a\u5927\u3002\u5bf9\u4e8e\u201c\u4e24\u8005\u201d\uff0c\u6211\u91c7\u7528\u4e86\u6700\u597d\u7684\u60c5\u51b5\uff0c\u5373\u7b80\u5355\u5730\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u800c\u4e0d\u662f\u5728\u5b83\u4eec\u4e4b\u95f4\u6362\u884c\u3002\n\u8bf4\u5b9e\u8bdd\u3002\u4e0d\u523025\u202f\u5982\u4eca\uff0c\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u7684KiB\u5df2\u7ecf\u4e0d\u591a\u4e86\u3002\u4f46\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u80fd\u505a\u5f97\u591a\u597d\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8bd5\u7740\u628a\u5355\u8bcd\u653e\u5728\u4e00\u4e2a\u5217\u8868\u4e2d\u3002\u8fd9\u5e94\u8be5\u5141\u8bb8\u66f4\u597d\u7684\u538b\u7f29\uff0c\u56e0\u4e3a\u6240\u6709\u5355\u8bcd\u90fd\u662f\u6309\u987a\u5e8f\u6392\u5217\u7684\uff0c\u800c\u4e0d\u662f\u7b54\u6848\u7684\u968f\u673a\u987a\u5e8f\u3002\uff08\u8bf7\u6ce8\u610f\uff0c\u7b54\u6848\u4ec5\u9650\u4e8e\u2153 \u800c\u5b8c\u6574\u7684\u5b57\u5178\u538b\u7f29\u5230\u51e0\u4e4e\u2155. \u6211\u8ba4\u4e3a\u8fd9\u5176\u4e2d\u5f88\u5927\u4e00\u90e8\u5206\u662f\u4e0d\u53ef\u9884\u6d4b\u7684\u987a\u5e8f\u3002\uff09\u7136\u800c\uff0c\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4e5f\u653e\u5f03\u4e86JSON\u7f16\u7801\u3002\u6211\u53ea\u662f\u628a\u6240\u67095\u4e2a\u5b57\u6bcd\u7684\u5355\u8bcd\u8fde\u5728\u4e00\u8d77\u3002\u8fd9\u4e3a\u6211\u8282\u7701\u4e86\u4e09\u4e2a\u5b57\u7b26\uff08&#34\uff1b\uff0c&#34\uff1b\uff09\u5728\u6bcf\u4e00\u4e2a\u5c5e\u4e8e\u215c \u8282\u7701\uff08\u5c3d\u7ba1\u8fd9\u4e9b\u5b57\u7b26\u53ef\u80fd\u538b\u7f29\u5f97\u5f88\u597d\uff09\u3002\n\u81f3\u4e8e\u67e5\u627e\uff0c\u6211\u6b63\u5728\u8fdb\u884c\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u6ca1\u6709\u5fc5\u8981\u8fbe\u5230\u6211\u7684\u6027\u80fd\u76ee\u6807\uff0c\u4f46\u53ef\u4ee5\u663e\u8457\u52a0\u5feb\u6211\u7684\u5168\u9762\u6d4b\u8bd5\u3002\u53e6\u5916\uff0c\u589e\u52a0\u7684\u4ee3\u7801\u5927\u5c0f\u5f88\u5c0f\u3002\n\u867d\u7136\u6211\u4eec\u7684\u5c3a\u5bf8\u56e0\u5220\u9664JSON\u800c\u663e\u8457\u4e0b\u964d\uff0c\u4f46\u538b\u7f29\u6548\u679c\u53d8\u5dee\uff0c\u6700\u7ec8\u8282\u7701\u4e86\u4e0d\u52302%\u3002\u5982\u679c\u6bcf\u4e2a\u7b54\u6848\u589e\u52a02\u4e2a\u5b57\u8282\u4ee5\u91cd\u65b0\u83b7\u5f97\u7b54\u6848\u5217\u8868\uff0c\u5219\u57fa\u672c\u4e0a\u662f\u6536\u652f\u5e73\u8861\u3002\n\u6ce8\u610f\uff1a\u4e00\u4e2a\u6709\u8da3\u7684\u4f18\u5316\u662f\u9650\u5236\u7b54\u6848\u7684\u9009\u62e9\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u75282\u4e2a\u5b57\u8282\u6765\u9009\u62e9\u4efb\u610f\u7b54\u6848\uff0c\u53ea\u9700\u89811\u4e2a\u5b57\u8282\uff08\u751a\u81f3\u66f4\u5c11\uff09\u3002\u8bbe\u8ba1\u4e00\u4e2a\u4eba\u7c7b\u65e0\u6cd5\u8f7b\u6613\u5229\u7528\u7684\u65b9\u6848\u6765\u504f\u5411\u4ed6\u4eec\u7684\u9009\u62e9\uff0c\u5c3d\u7ba1\u5b83\u4f1a\u4f7f\u4e00\u4e9b\u7b54\u6848\u53d8\u5f97\u4e0d\u53ef\u80fd\uff0c\u8fd9\u5e94\u8be5\u662f\u76f8\u5f53\u5bb9\u6613\u7684\u3002\n\u7b2c\u4e00\u4ef6\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\u662f\uff0c\u6240\u6709\u7684\u5355\u8bcd\u90fd\u53ea\u4f7f\u7528a-z\u8303\u56f4\u5185\u7684\u5b57\u6bcd\u3002\u6211\u4eec\u4e0d\u9700\u8981\u6bcf\u4e2a\u5b57\u7b26\u82b1\u8d39\u4e00\u4e2a\u5b8c\u6574\u5b57\u8282\u3002\u6211\u4eec\u53ea\u9700\u8981log_2\uff0826\uff09=\u6bcf\u4e2a\u5b57\u7b264.7\u4f4d\uff0c\u6216\u6bcf\u4e2a\u5b5723.5\u4f4d\u3002\u6211\u5c06\u5ffd\u7565\u534a\u4f4d\uff0c\u4f7f\u752824\u4f4d\uff0c\u6216\u6bcf\u4e2a\u5b573\u5b57\u8282\u3002\n\u903b\u8f91\u5f88\u7b80\u5355\u3002\u4e0d\u5b58\u50a8\u5355\u8bcd\u672c\u8eab\uff0c\u800c\u662f\u5c06\u5355\u8bcd\u7d22\u5f15\u5b58\u50a8\u5728\u53ef\u80fd\u7684\u5355\u8bcd\u5217\u8868\u4e2d\u3002\u4f8b\u5982aaaaa\u662f0\uff0czzzzz\u662f26^5-1\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\nfn\u7d22\u5f15\uff08\u5355\u8bcd\uff1a[u8\uff1b5]\uff09-&gt\uff1bu32{let mut i:u32=0\uff1b\u5bf9\u4e8e\u5355\u8bcd{debug#u assert\uff01\uff08b&#39\uff1ba&#39\uff1b.=b&#39\uff1bz&#39\uff1b\uff09\u4e2d\u7684c\u3002\u5305\u542b\uff08&amp\uff1bc\uff09\uff09\uff1bi*=26\uff1bi+=\uff08c-b&#39\uff1ba&#39\uff1b\uff09\u5982u32\uff1b}i}\n\u6211\u4eec\u5f97\u5230\u4e86\u2157 \u6211\u4eec\u671f\u5f85\u7684\u5c3a\u5bf8\u5dee\u5f02\uff0c\u4f46\u662fzstd\u5b8c\u5168\u6ca1\u6709\u627e\u5230\u4efb\u4f55\u56fe\u6848\uff01\u538b\u7f29\u7684\u5927\u5c0f\u5b9e\u9645\u4e0a\u6bd4\u4ee5\u524d\u5927\uff0c\u5728\u9ed8\u8ba4\u7684zstd\u8bbe\u7f6e\u4e0b\uff0c\u5b83\u6839\u672c\u4e0d\u538b\u7f29\u3002\u8fd9\u662f\u4ee4\u4eba\u60ca\u8bb6\u7684\uff0c\u56e0\u4e3a\u901a\u5e38\u6bcf\u4e2a\u5355\u8bcd\u7684\u5f00\u5934\u90fd\u67093\u4e2a\u5b57\u8282\u7684\u91cd\u590d\uff0c\u4f46\u6211\u731czstd\u6ca1\u6709\u6ce8\u610f\u5230\u8fd9\u4e00\u70b9\u3002gzip\u4e5f\u5728\u6323\u624e\uff0c\u4f46\u4f50\u592b\u5229\u786e\u5b9e\u8bbe\u6cd5\u5c06\u5176\u538b\u7f29\u523034.314\u202f\u57fa\u5e03\u3002\u4ecd\u7136\u6bd4\u8ba9\u538b\u7f29\u5668\u76f4\u63a5\u770b\u5230ASCII\u7801\u8981\u5927\u5f97\u591a\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15\u4e2d\u7684\u524d2\u4e2a\u5b57\u7b26\uff0c\u5e76\u5c06\u5269\u4f59\u76843\u4e2a\u5b57\u7b26\u538b\u7f29\u62102\u4e2a\u5b57\u8282\uff0c\u800c\u4e0d\u662f\u5c06\u6bcf\u4e2a\u5355\u8bcd\u5b58\u50a8\u57283\u4e2a\u5b57\u8282\u4e2d\u3002\u8fd9\u6837\u6bcf\u4e2a\u5b57\u53ef\u4ee5\u8282\u77011\u5b57\u8282\uff0c\u4f46\u4f1a\u5360\u7528\u7d22\u5f15\u7a7a\u95f4\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6700\u5e38\u89c1\u7684\u4e24\u4e2a\u5b57\u6bcd\u524d\u7f00\u201cco\u201d\u53ea\u6709220\u4e2a\u5355\u8bcd\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5728\u7d22\u5f15\u4e2d\u6bcf\u4e2a\u524d\u7f00\u53ea\u9700\u8981\u4e00\u4e2a\u5b57\u8282\uff0c\u6216\u800526^2=676\u5b57\u8282\u3002\n\u8fd9\u6bd4\u4ee5\u524d\u5c0f\u5f97\u591a\uff0c\u52a0\u4e0a\u538b\u7f29\u4f3c\u4e4e\u627e\u5230\u4e86\u66f4\u591a\u7684\u6a21\u5f0f\uff0c\u4f46\u901f\u5ea6\u660e\u663e\u8f83\u6162\u3002\u6709\u4e24\u4e2a\u4e3b\u8981\u539f\u56e0\u3002\n\u6211\u4eec\u628a\u7d22\u5f15\u4e2d\u7684\u503c\u52a0\u8d77\u6765\u3002\u8fd9\u5bf9\u7a7a\u95f4\u6709\u5229\uff0c\u4f46\u5bf9\u901f\u5ea6\u4e0d\u5229\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u9884\u5904\u7406\u8fc7\u7a0b\u6765\u89e3\u51b3\uff0c\u4ee5\u4fbf\u5728\u8fdb\u884c\u67e5\u627e\u4e4b\u524d\u89e3\u6790\u62a5\u4ef7\u3002\n\u6211\u6ca1\u6709\u8d39\u5fc3\u5bf9\u8fd9\u4e9b\u503c\u8fdb\u884c\u4e8c\u8fdb\u5236\u641c\u7d22\u3002\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u5bf9\u6700\u591a220\u4e2a\u6761\u76ee\u6709\u5e2e\u52a9\uff0c\u4f46\u4e5f\u8bb8\u4f1a\u6709\u5e2e\u52a9\u3002\n\u5982\u679c\u4e0d\u662f\u5b58\u50a8\u7d22\u5f15\uff0c\u800c\u662f\u4e3a\u6bcf\u4e2a\u53ef\u80fd\u7684\u5355\u8bcd\u5b58\u50a8\u4e00\u4f4d\u5462\u3002\u5982\u679c\u662f\u5141\u8bb8\u7684\u5355\u8bcd\uff0c\u5219\u4e3a1\uff0c\u5426\u5219\u4e3a0\u3002\u8fd9\u5c06\u9700\u898126^5\u4f4d\uff0c\u5e76\u5e94\u63d0\u4f9b\u975e\u5e38\u5feb\u901f\u7684\u67e5\u627e\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u903b\u8f91\u5c06\u5355\u8bcd\u8f6c\u6362\u4e3a\u7d22\u5f15\uff0c\u7136\u540e\u53ea\u9700\u68c0\u67e5\u8868\u4e2d\u7684\u8be5\u4f4d\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u5982\u679c\u4f60\u5728\u670d\u52a1\u5668\u4e0a\u6258\u7ba1\u6570\u636e\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002\u901a\u7528\u538b\u7f29\u4e5f\u505a\u4e86\u4e00\u4e2a\u4f1f\u5927\u7684\u5de5\u4f5c\uff0c\u4f7f\u8fd9\u4e2a\u9009\u9879\u76f8\u5f53\u5c0f\u7684\u7535\u7ebf\u3002\n\u53e6\u4e00\u79cd\u9009\u62e9\u662f\uff0c\u6211\u4eec\u4e0d\u5b58\u50a8\u5355\u8bcd\uff0c\u53ea\u5b58\u50a8\u524d\u4e00\u4e2a\u5355\u8bcd\u7684\u66f4\u6539\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5728\u6392\u5e8f\u5217\u8868\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u51e0\u4e4e\u603b\u662f\u76f8\u540c\u7684\uff0c\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u901a\u5e38\u662f\u76f8\u540c\u7684\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6211\u51b3\u5b9a\u8fd9\u6837\u505a\u7684\u65b9\u5f0f\u662f\u5c06\u5dee\u5f02\u5b58\u50a8\u5728\u7d22\u5f15\u4e2d\u3002\u8fd9\u5f88\u6709\u6548\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5217\u4e3e\u53ef\u80fd\u7684\u5355\u8bcd\u3002\u5176\u4ed6\u9009\u9879\u5305\u62ec\u8ba1\u6570\u4e0d\u5339\u914d\u7684\u5b57\u7b26\u6570\uff0c\u7136\u540e\u662f\u66ff\u6362\u5b57\u7b26\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5355\u8bcd\u4e4b\u95f4\u7684\u8ddd\u79bb\u5dee\u5f02\u5f88\u5927\u3002\u4ece\u201ccharr\u201d\u3001\u201cchars\u201d\u548c\u201cchart\u201d\u7b49\u76f8\u90bb\u5355\u8bcd\u5230\u201cxerus\u201d\u548c\u201cxoana\u201d\u7b49164\u4e2a\u9065\u8fdc\u7684\u5355\u8bcd\u202f068\u4e2a\u53ef\u80fd\u7684\u5355\u8bcd\uff01\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u898117.4\u4f4d\u6765\u5b58\u50a8\u8ddd\u79bb\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5927\u591a\u6570\u95f4\u9699\u8f83\u5c0f\uff0c\u56e0\u6b64\u4f7f\u7528\u53ef\u53d8\u957f\u5ea6\u7f16\u7801\u6700\u6709\u610f\u4e49\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u53d8\u91cf\u7f16\u7801\uff0c\u5176\u4e2d\u9876\u90e8\u7684\u4f4d\u96c6\u610f\u5473\u7740\u8981\u6dfb\u52a0\u66f4\u591a\u5b57\u8282\u3002\u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\uff0c3\u4e2a\u5b57\u8282\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e8621\u4e2a\u53ef\u7528\u4f4d\uff0c\u8db3\u4ee5\u586b\u8865\u6211\u4eec\u6700\u5927\u7684\u7a7a\u767d\u3002\n\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5f88\u6162\uff0c\u56e0\u4e3a\u5b83\u4f1a\u987a\u5e8f\u626b\u63cf\u6240\u6709\u5355\u8bcd\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u65e0\u6cd5\u5728\u53ef\u53d8\u957f\u5ea6\u7f16\u7801\u4e2d\u641c\u7d22\uff0c\u9700\u8981\u5c06\u6240\u6709\u4ee5\u524d\u7684\u503c\u76f8\u52a0\u624d\u80fd\u627e\u5230\u5f53\u524d\u7d22\u5f15\u3002\u7136\u800c\uff0c10\u5c81\u65f6\u202f\u00b5s\u4ecd\u5728\u6211\u4eec\u7684\u76ee\u6807\u65f6\u95f4\u5185\u3002\u8fd9\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u5ba2\u6237\u673a\u4e0a\u6784\u5efa2\u4e2a\u751a\u81f33\u4e2a\u5b57\u7b26\u7684\u524d\u7f00\u7d22\u5f15\u6765\u8f7b\u677e\u6539\u8fdb\uff0c\u6216\u8005\u5ba2\u6237\u673a\u53ef\u4ee5\u53ea\u6784\u5efa\u4e00\u4e2a\u4f4d\u56fe\u3002\n\u56de\u60f3\u8d77\u6765\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u8fd9\u57fa\u672c\u4e0a\u4e0e\u4e4b\u524d\u7684\u60f3\u6cd5\u76f8\u540c\uff0c\u53ea\u662f\u6211\u5728\u524d\u9762\u63d2\u5165\u4e86\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u7684\u8df3\u8f6c\u8868\u3002\u8fd9\u4f1a\u52a0\u5feb\u67e5\u627e\u901f\u5ea6\uff0c\u56e0\u4e3a\u60a8\u4e0d\u9700\u8981\u626b\u63cf\u4e4b\u524d\u7684\u6bcf\u4e2a\u5355\u8bcd\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u5b83\u4e5f\u4f1a\u66f4\u5c0f\uff0c\u56e0\u4e3a\u6211\u4e0d\u5fc5\u5728\u5217\u8868\u4e2d\u5305\u542b\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4f46\u662f\u56e0\u4e3a\u6211\u5728\u8fdb\u884c\u589e\u91cf\u7f16\u7801\uff0c\u6240\u4ee5\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u3002\u5de5\u5177\u548c\u5de5\u5177\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e0eaken\u548c\u5de5\u5177\u4e4b\u95f4\u7684\u8ddd\u79bb\u76f8\u540c\u3002\n\u6ce8\u610f\uff1a\u8fd9\u4e0eAlexander Pruss\u5728Game Boy\u5b9e\u73b0\u4e2d\u4f7f\u7528\u7684\u65b9\u6cd5\u57fa\u672c\u76f8\u540c\u3002\u5728\u6e38\u620f\u673a\u4e0a\uff0c\u63d0\u524d\u5efa\u7acb\u7d22\u5f15\u800c\u4e0d\u662f\u4f7f\u7528\u6709\u4ef7\u503c\u7684RAM\u53ef\u80fd\u662f\u6709\u76ca\u7684\u3002\n\u901f\u5ea6\u663e\u8457\u52a0\u5feb\uff0c\u5927\u7ea6\u5feb20\u500d\u3002\u8fd9\u5f88\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u4f60\u4e0d\u9700\u8981\u5e73\u5747\u626b\u63cf\u4e00\u534a\u7684\u5355\u8bcd\uff0c\u53ea\u9700\u8981\u626b\u63cf\u4e00\u534a\u9996\u5b57\u6bcd\u76f8\u540c\u7684\u5355\u8bcd\u3002\u6211\u5047\u8bbe\u8fd9\u4e0d\u5b8c\u5168\u662f26\u500d\uff0c\u56e0\u4e3a\u5b57\u6bcd\u5206\u5e03\u4e0d\u5747\u3002\n\u8fd9\u5c31\u662f\u6211\u5f00\u59cb\u8fd9\u4e2a\u9879\u76ee\u7684\u539f\u56e0\u3002\u6211\u4ee5\u4e3a\u6211\u53ef\u4ee5\u7528\u5e03\u5362\u59c6\u8fc7\u6ee4\u5668\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u7136\u800c\uff0c\u8ba1\u7b97\u7ed3\u679c\u8868\u660e\u8fd9\u4e0d\u592a\u53ef\u80fd\u3002\u6211\u8fd8\u662f\u505a\u4e86\u5b9e\u9a8c\uff0c\u8bc1\u5b9e\u4e86\u6211\u7684\u6000\u7591\u3002\u4e3a\u4e86\u907f\u514d\u8bef\u62a5\uff0c\u6211\u9700\u8981\u4f7f\u7528\u00bcMiB\u8fc7\u6ee4\u5668\u3002\u901a\u8fc7\u8c03\u6574\u4e00\u4e9b\u5e38\u6570\u6765\u8fc7\u5ea6\u62df\u5408\u6570\u636e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7a0d\u5fae\u964d\u4f4e\uff0c\u4f46\u4f3c\u4e4e\u5f88\u96be\u627e\u5230\u8db3\u591f\u5c0f\u7684\u8fc7\u6ee4\u5668\u6765\u6709\u6548\u5730\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002\n\u8fc7\u6ee4\u5668\u7684\u4e00\u4e2a\u56fa\u6709\u7f3a\u70b9\u662f\u65e0\u6cd5\u8fed\u4ee3\u6761\u76ee\u3002\u8fd9\u610f\u5473\u7740\u60a8\u4e0d\u80fd\u5c06\u7b54\u6848\u4f5c\u4e3a16\u4f4d\u7d22\u5f15\u53d1\u9001\u5230\u6709\u6548\u7684\u5355\u8bcd\u5217\u8868\u4e2d\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u5b8c\u6574\u768424\u4f4d\u53ef\u80fd\u7684\u5355\u8bcd\u7d22\u5f15\u3002\u7136\u800c\uff0c\u5373\u4f7f\u4f60\u60f3\u5b58\u50a8\u4e00\u5e74\u7684\u7b54\u6848\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u5c0f\u7684\u989d\u5916\u6210\u672c\uff08\u53ea\u6709365\u4e2a\u989d\u5916\u5b57\u8282\uff09\u3002\n\u6211\u4ecd\u7136\u8ba4\u4e3a\u8fd9\u4e2a\u60f3\u6cd5\u6709\u4ef7\u503c\uff0c\u5373\u4f7f\u5b83\u4e0d\u7b26\u5408\u6211\u7684\u76ee\u6807\uff0c\u5373\u5728\u5408\u7406\u7684\u8303\u56f4\u5185\u6ca1\u6709\u8bef\u62a5\u3002\u5982\u679c\u4f60\u80fd\u5728\u9700\u6c42\u4e0a\u505a\u51fa\u59a5\u534f\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u300216\u5c81\u202fKiB\u8fc7\u6ee4\u5668\uff0c\u4f60\u53ef\u4ee5\u5f97\u52301:127\u7684\u5047\u9633\u6027\u7387\uff0c8\u202fKiB\u4f60\u53ef\u4ee5\u5f97\u52301:11\u3002\u5982\u679c\u76ee\u6807\u662f\u9632\u6b62\u56e0\u62fc\u5199\u9519\u8bef\u800c\u610f\u5916\u63d0\u4ea4\uff0c\u907f\u514d\u4eba\u4eec\u4ec5\u4ec5\u731c\u6d4b\u201caeiou\u201d\u662f\u4ed6\u4eec\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff0c\u90a3\u4e48\u8fd9\u4e9b\u53ef\u80fd\u662f\u5408\u7406\u7684\u6743\u8861\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u5355\u8bcd\u8868\u4e0a\u90fd\u5145\u6ee1\u4e86\u50cf\u201cabcee\u201d\u8fd9\u6837\u7684\u5947\u602a\u5355\u8bcd\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u6ca1\u6709\u4eba\u4f1a\u6ce8\u610f\u5230\u4e00\u4e9b\u8bef\u62a5\u3002\n\u5b83\u975e\u5e38\u5feb\uff08\u6211\u672c\u53ef\u4ee5\u4f7f\u7528\u66f4\u5feb\u7684\u6563\u5217\uff09\uff0c\u4f46\u5982\u679c\u4f60\u4e0d\u60f3\u51fa\u73b0\u8bef\u62a5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u597d\u3002\n\u6700\u597d\u7684\u65b9\u6cd5\u662f\u572815\u5c81\u65f6\u8fdb\u884c\u589e\u91cf\u7f16\u7801\u202f\u538b\u7f29\u540e\u7684KiB\u3002\u4e0e25\u5c81\u65f6\u7684\u7b80\u5355\u65b9\u6cd5\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u663e\u8457\u7684\u964d\u4f4e\u202f\u57fa\u5e03\u3002\u5f53\u7136\uff0c\u4e0e\u5728JavaScript\u4e2d\u5d4c\u5165\u5217\u8868\u548c\u4f7f\u7528\u5b57\u5178\u68c0\u67e5\u6210\u5458\u8eab\u4efd\u7684\u7b80\u5355\u6027\u76f8\u6bd4\uff0c\u5f88\u5bb9\u6613\u8ba4\u4e3a\u8fd9\u4e0d\u662f\u4e00\u4e2a\u503c\u5f97\u4f18\u5316\u7684\u65b9\u6cd5\u3002\u5305\u62ec\uff08\u731c\u6d4b\uff08\uff09\uff09| |\u7b54\u6848\u3002\u5305\u62ec\uff08\u731c\u6d4b\uff09\u3002", "note_en": "Posted   A certain  5-letter word game has gotten really popular recently. A peek at the source shows an interesting choice for implementing the dictionary of allowed guesses and the answer list.\n The list of secret words is just sitting in the code, the word is picked based on the user\u2019s local date.\n The first point is clever. It means that they don\u2019t need to update the backend every day (or have logic on the backend) and it automatically switches at midnight for each user, not some random time of day based on the server\u2019s midnight.\n The other two surprised me. I would have expected at least some simple domain-specific compression. Also, I would have expected the answers list to just be pointers into the dictionary, rather than a separate list (which requires the validation code to check both lists every time you submit a word).\n I thought to myself how I would implement this, and from there started wondering about how to optimize it.  A post about compressing the dictionary to fit on a Game Boy then added fuel to the fire, and eventually I cracked. I spend a fun day trying different things, and here are my findings.  All the code backing this study is open source and can be viewed here.\n Note: For this analysis I am using  this archive of the original Wordle. The dictionary and answers have changed over time. I don\u2019t expect any changes to make much difference to this analysis. For all general-purpose compression I am using  zstd since it is a very high quality compressor.\n  My requirements are pretty simple. I\u2019ll assume a browser target, and I\u2019m going to see how best to get the data there. I\u2019m going to assume I can send binary data, and I\u2019ll also approximate decoder size to ensure that I am not just moving data into the decoder. However, in practice, this wasn\u2019t an issue for any of my solutions.\n Measuring code size it is very difficult due to WASM overhead and Rust error handling overhead. To normalize for this I will be taking the code size of the smallest implementation ( bitmap at 1347\u202fB) and subtract the difference in size of the same when implemented with no possibility of panic (234\u202fB). This means that the code sizes seen in this post will be 1113 B less than the actual compressed size. This should roughly account for the overhead of the Rust panic infrastructure. I think this makes sense because unless you are implementing just this one function in WASM you will have to pay this cost anyway, and this isn\u2019t storing any domain-specific data. I also didn\u2019t feel like implementing each one with unsafe to avoid the chance of panic due to slice bounds checking. This is not very scientific and mostly makes sure that no implementation results in a huge code size.\n I also want to ensure that the encoding is feasible for interactive use. I\u2019ll target 50\u202fms to leave lots of room in the 100\u202fms threshold for other work. In practice this isn\u2019t an issue for any of my solutions by a couple orders of magnitude. All times in this article were taken by counting the average time to check all possible valid or invalid words in a random order on an AMD 5950X. This is not particularly scientific because the branch predictor will quickly learn to always say yes or no and the timings were just run once but since I am so far under my time requirement it doesn\u2019t seem important.\n  First, let\u2019s see how the simplest options will work. The game has 12\u202f972 words in the dictionary, 2315 answers, and 10\u202f657 guessable words. In the game these are JSON encoded in two separate lists. Let\u2019s see how big these are. For the \u201cboth\u201d I took the best-case scenario of simply concatenating them with not even a newline between them.\n  Let\u2019s be honest. Less than 25\u202fKiB for your app data is not much these days. But let\u2019s see how much better we can do.\n  First, let\u2019s try putting the words into a single list. This should allow for better compression because all the words are in order, not the randomized order for the answers. (Notice that the answers only compressed down to \u2153 of their size whereas the full dictionary compressed down to almost \u2155. I assume that a lot of this is the unpredictable ordering.) However, at the same time, I\u2019m also dropping the JSON encoding. I\u2019m just concatenating all the 5-letter words. This saves me three characters ( &#34;,&#34;) on every entry which is a \u215c savings (although these characters likely compress very well).\n As for lookup, I\u2019m doing a binary search. It isn\u2019t necessary to hit my performance target but significantly speeds up my exhaustive testing. Plus the added code size is tiny.\n   While our size dropped significantly from removing the JSON the compression became less effective and we ended up saving less than 2%. If you add on 2 bytes per answer to regain the answer list you basically break even.\n Note: An interesting optimization would be to restrict answers selection so that instead of 2 bytes to select an arbitrary answer you only use 1 byte (or even less). It should be fairly easy to devise a scheme that humans couldn\u2019t easily use to bias their choice even though it would make some answer orders impossible.\n  The first obvious thing is that all the words only use letters in the  a-z range. We don\u2019t need to spend a full byte per character. We only need  log_2(26) = 4.7 bits per character, or 23.5 bits per word. I\u2019ll ignore the half a bit and use 24 bits, or 3 bytes per word.\n The logic is quite simple. Instead of storing the word itself you store the index of the word in the list of possible words. For example  aaaaa is  0 and  zzzzz is  26^5 - 1. The code is below:\n fn  index ( word :  [ u8 ;  5 ])  -&gt;  u32  {\t let  mut  i :  u32  =  0 ;\t for  c  in  word  {\t\t debug_assert! (( b &#39;a&#39; ..= b &#39;z&#39; ) .contains ( &amp; c ));\t\t i  *=  26 ;\t\t i  +=  ( c  -  b &#39;a&#39; )  as  u32 ;\t }\t i }\n    We get the \u2157 size difference we were expecting, however zstd completely fails to find any patterns! The compressed size is actually larger than before, and on the default zstd setting it doesn\u2019t compress at all. This is surprising because typically there is repetition 3 bytes apart at the start of every word, but I guess zstd doesn\u2019t notice that.  gzip also struggles but   zopfli does manage to crunch it down to 34.314\u202fKiB. Still significantly larger than letting the compressor see the ASCII directly.\n  Instead of storing each word in 3 bytes we can use the first 2 characters in an index and compress the remaining 3 characters into 2 bytes. This saves us 1 byte per word but takes up space on the index.\n Luckily the most common 2-letter prefix \u201cco\u201d only has 220 words, this means that we only need one byte per prefix in our index or  26^2 = 676 bytes.\n   This is much smaller than before plus the compression seems to find more patterns, but it is significantly slower. There are two main reasons.\n We sum up the values in the index. This is good for space but bad for speed. This could be fixed with a pre-processing pass to resolve the offers before doing the lookups.\n  I didn\u2019t bother implementing a binary search for the values. I didn\u2019t think it would help for a max of 220 entries, but maybe it would.\n  What if instead of storing the indexes we stored one bit for every possible word.  1 if it is an allowed word and a  0 otherwise. This will require  26^5 bits and should give very fast lookups.\n We can use the same logic for converting the word into an index then just check that bit in the table.\n   This method is incredibly fast, a great option if you were hosting the data on a server. The general-purpose compression also does a great job making this option quite small on the wire.\n  Another option is that instead of storing the words, we just store the change from the previous word. This takes advantage that in the sorted list the first character is almost always the same, the second character is usually the same, and so on. The way I decided to do this was by storing the difference in indexes. This works well because we can enumerate the possible words. Other options would be including a count for the number of characters that don\u2019t match, then the replacement characters.\n Unfortunately, the distance between words varies wildly. From adjacent words like \u201ccharr\u201d, \u201cchars\u201d and \u201cchart\u201d to distant words like \u201cxerus\u201d and \u201cxoana\u201d which are 164\u202f068 possible words apart! That means we will need 17.4 bits to store the distance. However, since most gaps are smaller it makes the most sense to use a variable-length encoding.\n In this case, I use a simple varint encoding where the top bit set means that there are more bytes to add on. In this system, 3 bytes gives us 21 usable bits which is large enough for our largest gap.\n   This solution is slow because it sequentially scans all the words until it finds a match. This is because we can\u2019t seek in the variable-length encoding, and you need to sum all previous values to find the current index. However, at 10\u202f\u00b5s it is still well within our target time. This could also be improved easily by building a 2 or even 3 character prefix index on the client, or the client could just construct a  bitmap.\n  This was an idea that in retrospect doesn\u2019t make much sense. It was basically the same as the previous idea except that I inserted a jump-table for the first letter at the front. This speeds up lookup as you don\u2019t need to scan every earlier word. However, I thought that it would also be smaller because I didn\u2019t have to include the first letter in the list, however since I was doing delta encoding it doesn\u2019t make a difference. The distance between  taken and  tools is the same as the distance between  aken and  ools.\n Note: This is basically the same approach that  Alexander Pruss used for his Game Boy implementation. On the Game Boy it is likely beneficial to build the index up front instead of using valuable RAM.\n    The speed-up is significant, about 20x faster. This makes sense because instead of scanning half of all words on average, you only need to scan half of the words with the same first letter. I\u2019ll assume this isn\u2019t exactly 26x due to unequal letter distribution.\n  This is the reason why I started the project. I thought I would be able to over-fit a bloom filter to the problem. However, doing the math showed that this was unlikely. I experimented anyway and confirmed my suspicion. To get no false-positives I needed to use a \u00bcMiB filter. This could maybe be reduced slightly by jigging some constants to over-fit the data, but it seemed very unlikely that a small enough filter could be found to be an efficient approach.\n One intrinsic downside of the filter is that you can\u2019t iterate the entries. This means that you can\u2019t ship your answers as a 16-bit index into the valid-word list, you need to use a full 24-bit possible-word index. However, even if you want to store a year of answers it is a small extra cost (only 365 extra bytes).\n I still think this idea has value even if it doesn\u2019t fit my goal of no false positives at a reasonable size. If you can compromise on requirements it could be a good choice. With a 16\u202fKiB filter, you can get 1:127 false positive rate, with 8\u202fKiB you can get 1:11. If the goal is to prevent accidental submits from typos and avoid people just guessing \u201caeiou\u201d as their first word then these may be reasonable tradeoffs. The word list is full of strange words like \u201cabcee\u201d anyway, so I don\u2019t think anyone will notice a couple false-positives.\n   It is very fast (and I could have used a faster hash) but if you want no false-positives this approach isn\u2019t great.\n  The best approach was  Delta Encoding at 15\u202fKiB after compression. This is a significant reduction over the simple approach at 25\u202fKiB. Of course, it is easy to argue that this isn\u2019t a worthwhile optimization compared to the simplicity of embedding the list in the JavaScript and checking membership using   dictionary . includes ( guess ())  ||  answers . includes ( guess ).", "posttime": "2022-03-02 22:46:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b57\u5178,dictionary,\u5355\u8bcd", "title": "\u5b57\u5178\u538b\u7f29", "title_en": "Dictionary Compression", "transed": 1, "url": "https://kevincox.ca/2022/03/01/dictionary-compression/", "via": "", "real_tags": ["\u5b57\u5178", "\u5355\u8bcd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075170, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u4eca\u5929\u8bbf\u95ee\u8fc7MDN\u7f51\u7ad9\uff0c\u4f60\u53ef\u80fd\u4f1a\u6ce8\u610f\u5230\u5b83\u770b\u8d77\u6765\u5f88\u4e0d\u4e00\u6837\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4e0d\u540c\u3002\u8ba9\u6211\u4eec\u89e3\u91ca\u4e00\u4e0b\uff01\nMDN\u5728\u517616\u5e74\u7684\u5386\u53f2\u4e2d\u7ecf\u5386\u4e86\u8bb8\u591a\u53d8\u5316\uff0c\u4ece\u6700\u521d\u7684wiki\u5230\u6700\u8fd1\u7531GitHub\u652f\u6301\u7684\u9759\u6001\u7ad9\u70b9\u7684\u8fc1\u79fb\u3002\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0cMDN\u5b9e\u73b0\u4e86\u6709\u673a\u589e\u957f\uff0c\u6709\u8d85\u8fc745000\u540d\u8d21\u732e\u8005\u548c\u4f17\u591a\u7684\u5f00\u53d1\u4eba\u5458\u548c\u8bbe\u8ba1\u5e08\u3002\u6beb\u4e0d\u5947\u602a\uff0c\u6574\u4e2a\u7f51\u7ad9\u7684\u7528\u6237\u4f53\u9a8c\u53d8\u5f97\u6709\u4e9b\u4e0d\u4e00\u81f4\u3002\n2021\u5e74\u5e74\u4e2d\uff0c\u6211\u4eec\u5f00\u59cb\u8003\u8651\u5bf9MDN\u7684\u8bbe\u8ba1\u8fdb\u884c\u73b0\u4ee3\u5316\uff0c\u521b\u5efa\u4e00\u4e2a\u5e72\u51c0\u3001\u5438\u5f15\u4eba\u7684\u7f51\u7ad9\uff0c\u4f7f\u6d4f\u89c844000\u7bc7\u6587\u7ae0\u5c3d\u53ef\u80fd\u5bb9\u6613\u3002\u6211\u4eec\u5e0c\u671b\u4e3a\u7528\u6237\u521b\u9020\u4e00\u79cd\u66f4\u5168\u9762\u7684\u4f53\u9a8c\uff0c\u91cd\u70b9\u662f\u63d0\u9ad8\u5bfc\u822a\u80fd\u529b\uff0c\u5e76\u5728\u6240\u6709\u9875\u9762\u4e0a\u63d0\u4f9b\u901a\u7528\u7684\u5916\u89c2\u548c\u611f\u89c9\u3002\nMDN\u793e\u533a\u662f\u6211\u4eec\u7684\u5185\u5bb9\u8d28\u91cf\u9ad8\u3001\u503c\u5f97\u4fe1\u8d56\u7684\u539f\u56e0\u3002MDN\u7684\u5185\u5bb9\u662f\u7ecf\u8fc7\u4ed4\u7ec6\u5ba1\u67e5\u3001\u8ba8\u8bba\u7684\uff0c\u662f\u7684\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u662f\u6709\u4e89\u8bae\u7684\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u5185\u5bb9\u3001\u5efa\u8bae\u66f4\u6539\u6216\u4fee\u590d\u9519\u8bef\u6765\u4e3aMDN\u505a\u51fa\u8d21\u732e\u3002\n\u6211\u4eec\u60f3\u611f\u8c22\u548c\u5e86\u795d\u6211\u4eec\u7684\u793e\u533a\uff0c\u6211\u4eec\u7684\u4e3b\u9875\u662f\u8fd9\u6837\u505a\u7684\u5b8c\u7f8e\u573a\u6240\u3002\n\u65b0\u4e3b\u9875\u7684\u6784\u5efa\u91cd\u70b9\u662f\u793e\u533a\u548c\u7b80\u5355\u6027\u7684\u6838\u5fc3\u6982\u5ff5\u3002\u6211\u4eec\u5c06\u6539\u8fdb\u540e\u7684\u641c\u7d22\u4f5c\u4e3a\u9875\u9762\u7684\u4e2d\u5fc3\u5143\u7d20\uff0c\u540c\u65f6\u5411\u7528\u6237\u5c55\u793a\u6700\u65b0\u548c\u9605\u8bfb\u6700\u591a\u7684\u6587\u7ae0\u3002\n\u6211\u4eec\u8fd8\u5c06\u5c55\u793a\u5bf9GitHub\u5185\u5bb9\u56de\u8d2d\u7684\u6700\u65b0\u8d21\u732e\uff0c\u5e76\u6dfb\u52a0\u4e86\u4e00\u4e2a\u8d21\u732e\u8005\u805a\u5149\u706f\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecdMDN\u8d21\u732e\u8005\u3002\n\u81ea\u4eceMDN\u7684\u6838\u5fc3\u5185\u5bb9\u5c55\u793a\u83b7\u5f97\u5168\u9762\u7684\u8bbe\u8ba1\u5ba1\u67e5\u4ee5\u6765\uff0c\u5df2\u7ecf\u8fc7\u53bb\u4e86\u51e0\u5e74\u2014\u2014\u4e8b\u5b9e\u4e0a\u662f\u4e94\u5e74\u3002\u5728\u90a3\u4e9b\u5e74\u91cc\uff0cMDN\u7684\u5185\u5bb9\u53d1\u751f\u4e86\u6f14\u53d8\u548c\u53d8\u5316\uff0c\u6709\u4e86\u65b0\u7684\u5185\u5bb9\u7ed3\u6784\u65b9\u5f0f\u3001\u65b0\u7684\u6587\u6863\u6784\u5efa\u548c\u7f16\u5199\u65b9\u5f0f\uff0c\u4ee5\u53ca\u65b0\u7684\u8d21\u732e\u8005\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6587\u6863\u7684\u5916\u89c2\u4e0e\u4e66\u5199\u65b9\u5f0f\u8d8a\u6765\u8d8a\u4e0d\u4e00\u81f4\u3002\n\u867d\u7136\u4f60\u4e0d\u4f1a\u770b\u5230\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u6587\u6863\u662f\u4ec0\u4e48\uff0c\u4f46\u4f60\u4f1a\u53d1\u73b0\uff0cMDN\u4e0a\u7684\u5927\u591a\u6570\u89c6\u89c9\u5143\u7d20\u786e\u5b9e\u53d7\u5230\u4e86\u559c\u7231\u548c\u5173\u6ce8\uff0c\u4e3a\u6211\u4eec\u7684\u6587\u6863\u521b\u5efa\u4e86\u4e00\u4e2a\u66f4\u52a0\u8fde\u8d2f\u7684\u89c6\u56fe\u3002\u8fd9\u4e00\u91cd\u65b0\u8bbe\u8ba1\u4e3aMDN\u63d0\u4f9b\u4e86\u5e94\u6709\u7684\u5185\u5bb9\uff0c\u5176\u7279\u70b9\u662f\uff1a\n\u6211\u4eec\u5c24\u5176\u4e3a\u4e00\u4e9b\u7ec6\u5fae\u7684\u6539\u8fdb\u548c\u4fbf\u5229\u611f\u5230\u81ea\u8c6a\u3002\u4f8b\u5982\uff0c\u9875\u9762\u5bfc\u822a\u59cb\u7ec8\u5904\u4e8e\u89c6\u56fe\u4e2d\uff0c\u4ee5\u4fbf\u5728\u6eda\u52a8\u65f6\u663e\u793a\u60a8\u5728\u9875\u9762\u4e2d\u7684\u4f4d\u7f6e\uff1a\n\u6211\u4eec\u8fd8\u91cd\u65b0\u5ba1\u89c6\u4e86\u6d4f\u89c8\u5668\u517c\u5bb9\u6027\u6570\u636e\u7684\u663e\u793a\u65b9\u5f0f\uff0c\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u4e00\u76ee\u4e86\u7136\u7684\u6d4f\u89c8\u5668\u652f\u6301\u3002\u6240\u4ee5\u4f60\u4e0d\u5fc5\u628a\u7248\u672c\u53f7\u8bb0\u5728\u8111\u5b50\u91cc\uff0c\u6211\u4eec\u66f4\u52a0\u5f3a\u8c03\u6d4f\u89c8\u5668\u529f\u80fd\u7684\u662f\u4e0e\u5426\u56fe\u6807\uff0c\u53ef\u4ee5\u9009\u62e9\u67e5\u770b\u4f60\u671f\u671b\u4ece\u6211\u4eec\u7684\u6d4f\u89c8\u5668\u517c\u5bb9\u6027\u6570\u636e\u4e2d\u83b7\u5f97\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u6211\u4eec\u8ba4\u4e3a\u4f60\u5e94\u8be5\u53bb\u770b\u770b\u3002\n\u6211\u4eec\u4e0d\u4f1a\u5c31\u6b64\u6b62\u6b65\u3002\u6211\u4eec\u6240\u505a\u7684\u5de5\u4f5c\u610f\u4e49\u6df1\u8fdc\uff0c\u6211\u4eec\u4ecd\u6709\u5f88\u591a\u673a\u4f1a\u6539\u8fdb\u6211\u4eec\u6b63\u5728\u8fd0\u8f93\u7684\u8bbe\u8ba1\u3002\n\u5f53\u6211\u4eec\u5f00\u59cb\u91cd\u65b0\u8bbe\u8ba1MDN\u5e76\u5c06\u5176\u6269\u5c55\u5230WebDocs\u4e4b\u5916\u65f6\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u73b0\u5728\u4e5f\u662f\u65f6\u5019\u63a8\u51fa\u4e00\u4e2a\u65b0\u5fbd\u6807\u4e86\u3002\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u73b0\u4ee3\u4e14\u6613\u4e8e\u5b9a\u5236\u7684\u6807\u5fd7\uff0c\u65e2\u80fd\u4ee3\u8868MDN\u7684\u4eca\u5929\uff0c\u53c8\u80fd\u52a0\u5f3a\u5176\u6807\u8bc6\uff0c\u4f7f\u5176\u4e0eMozilla\u5f53\u524d\u7684\u54c1\u724c\u4fdd\u6301\u4e00\u81f4\u3002\n\u6211\u4eec\u4e0e\u54c1\u724c\u4e13\u5bb6Luc Doucedame\u5bc6\u5207\u5408\u4f5c\uff0c\u5c06\u6211\u4eec\u7684\u9009\u9879\u7f29\u5c0f\u5230\u516b\u4e2a\u53ef\u80fd\u7684\u5fbd\u6807\uff0c\u5e76\u5411\u6211\u4eec\u7684\u7528\u6237\u793e\u533a\u53d1\u51fa\u7535\u8bdd\uff0c\u5e2e\u52a9\u6211\u4eec\u9009\u62e9\u5e76\u9080\u8bf7\u4eba\u4eec\u6295\u7968\u9009\u51fa\u4ed6\u4eec\u6700\u559c\u6b22\u7684\u5fbd\u6807\u3002\u6211\u4eec\u5728\u77ed\u77ed\u4e09\u5929\u5185\u6536\u5230\u4e86\u8d85\u8fc710000\u5f20\u9009\u7968\uff0c\u5f88\u9ad8\u5174\u4e0e\u5927\u5bb6\u5206\u4eab\u201cMDN\u4eba\u6c11\u7684\u9009\u62e9\u201d\n\u83b7\u80dc\u8005\u662f\u9009\u98794\uff0c\u8fd9\u662f\u4e00\u4e2a\u7528\u4e0b\u5212\u7ebf\u8868\u793a\u4ee3\u7801\u7f16\u5199\u8fc7\u7a0b\u7684M\u5b57\u6bcd\u7ec4\u5408\u3002\u975e\u5e38\u611f\u8c22\u6240\u6709\u6295\u7968\u7684\u4eba\uff01\n\u8fd1\u5e74\u6765\uff0c\u5bf9\u4e8e\u4f5c\u8005\u6765\u8bf4\uff0cMDN\u5185\u5bb9\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u6bd4\u5982\u4ecewiki\u8f6c\u79fb\u5230Git\uff0c\u4ee5\u53ca\u4eceHTML\u8f6c\u6362\u5230Markdown\u3002\u8fd9\u5bf9\u8d21\u732e\u8005\u6765\u8bf4\u662f\u4e00\u4e2a\u798f\u97f3\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u5f3a\u5927\u3001\u66f4\u719f\u6089\u7684\u5de5\u5177\u6765\u521b\u5efa\u66f4\u7ed3\u6784\u5316\u3001\u66f4\u4e00\u81f4\u7684\u5185\u5bb9\u3002\n\u6709\u4e86\u66f4\u597d\u7684\u5de5\u5177\uff0c\u6211\u4eec\u7ec8\u4e8e\u80fd\u591f\u4e3a\u8bfb\u8005\u5e26\u6765\u66f4\u660e\u663e\u3001\u66f4\u7cfb\u7edf\u7684\u597d\u5904\u3002\u4f8b\u5982\uff0c\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u53ef\u80fd\u901a\u8fc7\u81ea\u5df1\u559c\u6b22\u7684\u641c\u7d22\u5f15\u64ce\u5bfc\u822aMDN\uff0c\u800c\u4e0d\u662fMDN\u81ea\u5df1\u7684\u7f51\u7ad9\u5bfc\u822a\u3002\u6211\u4eec\u660e\u767d\u4e86\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u7ef4\u57fa\u4f7f\u5f97\u5927\u578b\u5185\u5bb9\u67b6\u6784\u5de5\u4f5c\u53d8\u5f97\u4e0d\u5207\u5b9e\u9645\u3002\u4f46\u6211\u4eec\u73b0\u5728\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u63a5\u8fd1\u4e8e\u5728\u7f51\u7ad9\u8303\u56f4\u5185\u6539\u8fdb\u7ed3\u6784\u548c\u5bfc\u822a\u3002\n\u5c55\u671b\u672a\u6765\uff0c\u6211\u4eec\u6709\u96c4\u5fc3\u52c3\u52c3\u7684\u8ba1\u5212\uff0c\u5229\u7528\u6211\u4eec\u7684\u65b0\u5de5\u5177\u6765\u63a2\u7d22\u6539\u8fdb\u7684\u5bfc\u822a\u3001\u751f\u6210\u7684\u6807\u51c6\u5316\u548c\u652f\u6301\u6458\u8981\uff0c\u5e76\u5c06MDN\u6587\u6863\u5d4c\u5165\u5f00\u53d1\u4eba\u5458\u6700\u9700\u8981\u7684\u5730\u65b9\uff1a\u5728\u4ed6\u4eec\u7684IDE\u3001\u6d4f\u89c8\u5668\u5de5\u5177\u7b49\u4e2d\u3002\nMDN\u4f5c\u4e3a\u4e00\u4e2a\u503c\u5f97\u4fe1\u8d56\u7684\u4e2d\u5fc3\u8d44\u6e90\uff0c\u63d0\u4f9b\u6709\u5173\u6807\u51c6\u3001\u89c4\u8303\u3001\u5de5\u5177\u7684\u4fe1\u606f\uff0c\u4ee5\u53ca\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458\u521b\u5efa\u7f51\u7ad9\u6240\u9700\u7684\u4e00\u5207\u4fe1\u606f\uff0c\u5df2\u7ecf\u8d62\u5f97\u4e86\u58f0\u8a89\u30022015\u5e74\uff0c\u6211\u4eec\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u5b66\u4e60\u9886\u57df\uff0c\u63a2\u7d22\u4e86\u8d85\u8d8a\u4e2d\u5fc3\u8d44\u6e90\u7684\u9014\u5f84\uff0c\u76ee\u7684\u662f\u4e3a\u5e38\u89c4MDN\u53c2\u8003\u548c\u6307\u5bfc\u6750\u6599\u63d0\u4f9b\u6709\u7528\u7684\u5bf9\u5e94\u7269\u3002\n2020\u5e74\uff0c\u6211\u4eec\u4e3a\u5176\u6dfb\u52a0\u4e86\u7b2c\u4e00\u6761\u524d\u7aef\u5f00\u53d1\u4eba\u5458\u5b66\u4e60\u8def\u5f84\u3002\u6211\u4eec\u770b\u5230\u4e86\u7528\u6237\u7684\u5927\u91cf\u5174\u8da3\u548c\u53c2\u4e0e\uff0c\u5b66\u4e60\u9886\u57df\u76ee\u524d\u5360MDN\u6bcf\u6708\u7f51\u7edc\u6d41\u91cf\u768410%\u3002\u8fd9\u8ba9\u6211\u4eec\u8d70\u4e0a\u4e86\u4e00\u6761\u9053\u8def\uff0c\u770b\u770b\u6211\u4eec\u80fd\u5728\u8fd9\u4e00\u9886\u57df\u4e3a\u6211\u4eec\u7684\u793e\u533a\u505a\u4e9b\u4ec0\u4e48\u3002\n\u53bb\u5e74\uff0c\u6211\u4eec\u5bf9\u7528\u6237\u8fdb\u884c\u4e86\u8c03\u67e5\uff0c\u8be2\u95ee\u4ed6\u4eec\u5e0c\u671b\u4eceMDN\u4f53\u9a8c\u4e2d\u83b7\u5f97\u4ec0\u4e48\u3002\u6700\u53d7\u6b22\u8fce\u7684\u529f\u80fd\u5305\u62ec\u901a\u77e5\u3001\u6587\u7ae0\u96c6\u548cMDN\u4e0a\u7684\u79bb\u7ebf\u4f53\u9a8c\u3002\u6211\u4eec\u770b\u5230\u7684\u603b\u4f53\u4e3b\u9898\u662f\uff0c\u7528\u6237\u5e0c\u671b\u80fd\u591f\u4ee5\u4e00\u79cd\u9002\u5408\u4ed6\u4eec\u7684\u65b9\u5f0f\u7ec4\u7ec7MDN\u7684\u5de8\u5927\u5e93\u3002\n\u6211\u4eec\u4e00\u76f4\u5728\u5bfb\u627e\u6ee1\u8db3\u7528\u6237\u9700\u6c42\u7684\u65b9\u6cd5\uff0c\u65e0\u8bba\u662f\u901a\u8fc7MDN\u7684\u514d\u8d39\u7f51\u7edc\u6587\u6863\u8fd8\u662f\u4e2a\u6027\u5316\u529f\u80fd\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4eec\u5c06\u6839\u636e\u5e0c\u671b\u5b9a\u5236\u5176MDN\u4f53\u9a8c\u7684web\u5f00\u53d1\u4eba\u5458\u7684\u53cd\u9988\uff0c\u6269\u5c55MDN\uff0c\u4ee5\u5305\u62ec\u4e00\u9879\u9ad8\u7ea7\u8ba2\u9605\u670d\u52a1\u3002\u8bf7\u7ee7\u7eed\u5173\u6ce8\u6709\u5173MDN Plus\u7684\u66f4\u591a\u4fe1\u606f\u3002\n\u6211\u4eec\u611f\u8c22\u6570\u5343\u4eba\u6295\u7968\u652f\u6301\u65b0\u6807\u5fd7\uff0c\u4ee5\u53ca\u81ea\u6211\u4eec\u5f00\u59cb\u8fd9\u6bb5\u65c5\u7a0b\u4ee5\u6765\u53c2\u4e0e\u65e9\u671f\u6d4b\u8bd5\u9636\u6bb5\u7684\u6240\u6709\u4eba\u3002\u6b64\u5916\uff0c\u975e\u5e38\u611f\u8c22\u6211\u4eec\u6765\u81eaOpen Web Docs\u7684\u5408\u4f5c\u4f19\u4f34\uff0c\u4ed6\u4eec\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5173\u4e8e\u91cd\u65b0\u8bbe\u8ba1\u7684\u5b9d\u8d35\u53cd\u9988\uff0c\u5e76\u7ee7\u7eed\u6bcf\u5929\u4e3aMDN\u5185\u5bb9\u505a\u51fa\u8d21\u732e\u3002\u591a\u4e8f\u4e86\u4f60\u4eec\uff0c\u6211\u4eec\u624d\u80fd\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u6295\u8d44\uff0c\u8fdb\u4e00\u6b65\u6539\u5584MDN\u7684\u4f53\u9a8c\u3002", "note_en": "If you\u2019ve accessed the MDN website today, you probably noticed that it looks quite different. We hope it\u2019s a good different. Let us explain!\n MDN has undergone many changes in its sixteen-year history from its early beginning as a wiki to the recent migration of a static site backed by GitHub. During that time MDN grew organically, with over 45,000 contributors and numerous developers and designers. It\u2019s no surprise that the user experience became somewhat inconsistent throughout the website.\n In mid-2021 we started to think about modernizing MDN\u2019s design, to create a clean and inviting website that makes navigating our 44,000 articles as easy as possible. We wanted to create a more holistic experience for our users, with an emphasis on improved navigability and a universal look and feel across all our pages.\n  The MDN community is the reason our content can be counted on to be both high quality and trustworthy. MDN content is scrutinized, discussed, and yes, in some cases argued about. Anyone can contribute to MDN, either by writing content, suggesting changes or fixing bugs.\n We wanted to acknowledge and celebrate our awesome community and our homepage is the perfect place to do so.\n The new homepage was built with a focus on the core concepts of community and simplicity. We made an improved search a central element on the page, while also showing users a selection of the newest and most-read articles.\n We will also show the most recent contributions to our GitHub content repo and added a contributor spotlight where we will highlight MDN contributors.\n   It\u2019s been years\u2014  five of them, in fact \u2014since MDN\u2019s core content presentation has received a comprehensive design review. In those years, MDN\u2019s content has evolved and changed, with new   ways of structuring content , new ways to   build  and   write docs , and new   contributors . Over time, the documentation\u2019s look and feel had become increasingly disconnected from the way it\u2019s read and written.\n While you won\u2019t see a dizzying reinvention of what documentation is, you\u2019ll find that most visual elements on MDN did get love and attention, creating a more coherent view of our docs. This redesign gives MDN content its due, featuring:\n    We\u2019re especially proud of some subtle improvements and conveniences. For example, in-page navigation is always in view to show you where you are in the page as you scroll:\n  We\u2019re also revisiting the way browser compatibility data appears, with better at-a-glance browser support. So you don\u2019t have to keep version numbers in your head, we\u2019ve put more emphasis on   yes  and   no  iconography for browser capabilities, with the option to view the detailed information you\u2019ve come to expect from   our browser compatibility data . We think you should check it out.\n And we\u2019re not stopping there. The work we\u2019ve done is far-reaching and there are still many opportunities to polish and improve on the design we\u2019re shipping.\n  As we began working on both the redesign and expanding MDN beyond WebDocs we realized it was also time for a new logo. We wanted a modern and easily customizable logo that would represent what MDN is today while also strengthening its identity and making it consistent with Mozilla\u2019s current brand.\n We worked closely with branding specialist   Luc Doucedame , narrowed down our options to eight potential logos and put out a call to our community of users to help us choose and invited folks to vote on their favorite. We received over 10,000 votes in just three days and are happy to share with you \u201cthe MDN people\u2019s choice.\u201d\n  The winner was Option 4, an M monogram using underscore to convey the process of writing code. Many thanks to everyone who voted!\n     In recent years, MDN content has grown more sophisticated for authors, such as moving from a wiki to Git and converting from HTML to Markdown. This has been a boon to contributors, who can use more powerful and familiar tools to create more structured and consistent content.\n With better tools in place, we\u2019re finally in a position to build more visible and systematic benefits to readers. For example, many of you probably navigate MDN via your favorite search engine, rather than MDN\u2019s own site navigation. We get it. Historically, a wiki made large content architecture efforts impractical. But we\u2019re now closer than ever to making site-wide improvements to structure and navigation.\n Looking forward, we have ambitious plans to take advantage of our new tools to explore improved navigation, generated standardization and support summarizes, and embedding MDN documentation in the places where developers need it most: in their IDE, browser tools, and more.\n  MDN has built a reputation as a trusted and central resource for information about standards, codes, tools, and everything you need as a developer to create websites. In 2015, we explored ways to be more than a central resource through creating a   Learning Area , with the aim of providing a useful counterpart to the regular MDN reference and guide material.\n In 2020, we added the first   Front-end developer learning pathway  to it.\u00a0 We saw a lot of interest and engagement from users, the learning area currently being responsible for 10% of MDN\u2019s monthly web traffic. This started us on a path to see what more we can do in this area for our community.\n Last year we surveyed users and asked them what they wanted out of their MDN experience. The top requested features included notifications, article collections and an offline experience on MDN. The overall theme we saw was that users wanted to be able to organize MDN\u2019s vast library in a way that worked for them.\n We are always looking for ways to meet our users\u2019 needs whether it\u2019s through MDN\u2019s free web documentation or personalized features. In the coming months, we\u2019ll be expanding MDN to include a premium subscription service based on the feedback we received from web developers who want to customize their MDN experience. Stay tuned for more information on MDN Plus.\n   We appreciate the thousands of people who voted for the new logo as well as everyone who participated in the early beta testing phase since we started this journey. Also, many thanks to our partners from the   Open Web Docs , who gave us valuable feedback on the redesign and continue to make daily contributions to MDN content. Thanks to you all we could make this a reality and we will continue to invest in improving even further the experience on MDN.", "posttime": "2022-03-02 22:41:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,mdn", "title": "MDN\u91cd\u65b0\u8bbe\u8ba1", "title_en": "MDN Redesign", "transed": 1, "url": "https://hacks.mozilla.org/2022/03/a-new-year-a-new-mdn/", "via": "", "real_tags": ["\u8bbe\u8ba1", "mdn"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075169, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u534e\u4e3aM-Pencil\uff08\u7b2c\u4e8c\u4ee3\uff09\u4e0e\u534e\u4e3aMateBook E\u548c\u67d0\u4e9b\u534e\u4e3a\u5e73\u677f\u7535\u8111\u517c\u5bb9\n\u672c\u4ea7\u54c1\u4e0d\u662f\u533b\u7597\u5668\u68b0\uff0c\u4e0d\u5177\u6709\u4efb\u4f55\u6cbb\u7597\u529f\u80fd\u3002\u534e\u4e3a\u5168\u666f\n\u534e\u4e3a\u5168\u5c4f\u663e\u793a\u662f\u4e1a\u5185\u5e38\u89c1\u7684\u6982\u5ff5\uff0c\u901a\u5e38\u6307\u7684\u662f\u7a84\u5c4f\u5e55\n\u6570\u636e\u6765\u81ea\u534e\u4e3a\u5b9e\u9a8c\u5ba4\u3002\u5c4f\u5e55\u4e0e\u673a\u8eab\u7684\u6bd4\u7387\u662f\u901a\u8fc7\u6bd4\u8f83\u5c4f\u5e55\u7684\u6d3b\u52a8\u72b6\u6001\u6765\u8ba1\u7b97\u7684\n\u8bb0\u4e8b\u672c\u652f\u6301\u81f3\u5c1126\u6beb\u79d2\u7684\u4f4e\u5ef6\u8fdf\u3002\u6570\u636e\u6765\u81ea\u534e\u4e3a\u5b9e\u9a8c\u5ba4\u3002\u5b9e\u9645\u6548\u679c\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\n\u53ea\u6709\u8fd0\u884cHarmonyOS 2\uff08\u6216\u66f4\u9ad8\u7248\u672c\uff09\u7684\u67d0\u4e9b\u534e\u4e3a\u5e73\u677f\u7535\u8111\u548c\u534e\u4e3a\u624b\u673a\u624d\u652f\u6301\u8be5\u529f\u80fd\n\u53ea\u6709\u8fd0\u884cHarmonyOS 2\uff08\u6216\u66f4\u9ad8\u7248\u672c\uff09\u7684\u67d0\u4e9b\u534e\u4e3a\u5e73\u677f\u7535\u8111\u548c\u67d0\u4e9b\n\u6765\u81ea\u534e\u4e3a\u79fb\u52a8\u670d\u52a1\u7684\u6570\u636e\u3002\u53ef\u7528\u7684\u670d\u52a1\u53ef\u80fd\u56e0\u56fd\u5bb6/\u5730\u533a\u800c\u5f02\u3002\u4e00\u4e9b\n\u6765\u81ea\u534e\u4e3a\u79fb\u52a8\u670d\u52a1\u7684\u6570\u636e\u3002\u53ef\u7528\u7684\u670d\u52a1\u53ef\u80fd\u56e0\u56fd\u5bb6/\u5730\u533a\u800c\u5f02\u3002\u4e00\u4e9b\n\u652f\u630137\u79cd\u8bed\u8a00\u7684\u7ebf\u4e0b\u7ffb\u8bd1\uff0c40\u79cd\u8bed\u8a00\u7684\u5728\u7ebf\u7ffb\u8bd1\u3002\u53ef\u63d0\u4f9b\u7684\u670d\u52a1\u53ef\u80fd\n\u8be5\u529f\u80fd\u7531\u81ea\u4e3b\u7814\u53d1\u7684\u534e\u4e3aWi-Fi 6+\u82af\u7247\u7ec4\u652f\u6301\uff0c\u9700\u8981\u534e\u4e3a\u8def\u7531\u5668\n\u6765\u81ea\u534e\u4e3a\u5b9e\u9a8c\u5ba4\u7684\u6570\u636e\u3002\u6d4b\u8bd5\u6761\u4ef6\uff1a\u80cc\u5149\u548cWi-Fi\u5173\u95ed\uff0c\u4fdd\u6301\u9ed8\u8ba4\u5237\u65b0\u7387\u3002\n\u6765\u81ea\u534e\u4e3a\u5b9e\u9a8c\u5ba4\u7684\u6570\u636e\u3002\u6d4b\u8bd5\u6761\u4ef6\uff1a\u80cc\u5149\u548cWi-Fi\u5173\u95ed\uff0c\u4fdd\u6301\u9ed8\u8ba4\u5237\u65b0\u7387\u3002\n\u6765\u81ea\u534e\u4e3a\u5b9e\u9a8c\u5ba4\u7684\u6570\u636e\u3002\u6d4b\u8bd5\u6761\u4ef6\uff1a\u80cc\u5149\u548cWi-Fi\u5173\u95ed\uff0c\u4fdd\u6301\u9ed8\u8ba4\u5237\u65b0\u7387\u3002", "note_en": "HUAWEI M-Pencil (2nd generation) is compatible with HUAWEI MateBook E and certain HUAWEI tablets\r running HarmonyOS 2 (or later).\r  This feature is only supported when using with certain HUAWEI phones running EMUI 12 (or later),\r or certain HUAWEI laptops running PC Manager 12.0 (or later).\n  This product is not a medical device and does not have any therapeutic functions. HUAWEI FullView\r display\r is a common concept in the industry, usually referring to a screen with narrow bezels and high\r screen-to-body ratio.\n  HUAWEI FullView display is a common concept in the industry, usually referring to a screen with narrow\r bezels and high screen-to-body ratio. HUAWEI MatePad Paper adopts a rounded corner design, and when\r measured as a standard rectangular display, its diagonal length is 10.3 inches. Actual size of the\r screen may vary depending on configuration and manufacturing processes.\n  Data comes from Huawei labs. The screen-to-body ratio is calculated by comparing the screen active\r area to the front panel area of the device. Actual measurements may vary.\n      Minimum 26 ms low latency is supported by Notepad. Data comes from Huawei labs. Actual effect may vary\r according to different handwriting apps.\n          The feature is only supported by certain Huawei tablets and Huawei mobile phones running HarmonyOS 2 (or\r later), with devices under the same HUAWEI ID. Actual adaptation of the feature may vary depending on\r different markets.\n  The feature is only supported by certain Huawei tablets running HarmonyOS 2 (or later), and certain\r Huawei PCs running PC Manager 12.0 (or later). If you have any questions about this feature, its\r limitations, or device models that support it, please contact Huawei Customer Service. The\r resolution of the PC or tablet is automatically adapted and optimized for the best possible display.\r Actual adaptation of the feature may vary depending on different markets.\n  Data from HUAWEI Mobile Service. Available services may vary depending on your country/region. Some\r resources may need to be purchased separately.\n  Data from HUAWEI Mobile Service. Available services may vary depending on your country/region. Some\r resources may need to be purchased separately.\n  Supporting 37 languages offline translation, and 40 languages online translation. Available services may\r vary depending on your country/region. Actual experience may vary.\n  This feature is supported by self-developed Huawei Wi-Fi 6+ chipset and requires Huawei routers\r (purchased separately) that support Wi-Fi 6+.\n  Data from Huawei labs. Test condition: backlight and Wi-Fi turned off, maintain default refresh rate.\r The result may vary depending on the product, volume, audio source, product settings, environment\r interference, and usage habits.\n  Data from Huawei labs. Test condition: backlight and Wi-Fi turned off, maintain default refresh rate.\r The result may vary depending on the product, volume, audio source, product settings, environment\r interference, and usage habits.\n  Data from Huawei labs. Test condition: backlight and Wi-Fi turned off, maintain default refresh rate.\r The result may vary depending on the product, volume, audio source, product settings, environment\r interference, and usage habits.", "posttime": "2022-03-02 22:38:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,matepad,\u534e\u4e3a", "title": "\u534e\u4e3aMatePad Paper\u2013eInk\u5e73\u677f\u7535\u8111", "title_en": "Huawei MatePad Paper \u2013 eInk Tablet", "transed": 1, "url": "https://consumer.huawei.com/en/tablets/matepad-paper/", "via": "", "real_tags": ["\u7535\u8111", "matepad", "\u534e\u4e3a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075167, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d4f\u89c8\u5668\u4e2d\u7684\u79c1\u4eba\u865a\u62df\u4e09\u7ef4\u7a7a\u95f4", "note_en": "Private, virtual 3D spaces in your browser", "posttime": "2022-03-02 22:34:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "mozilla,\u865a\u62df", "title": "Mozilla\u4e2d\u5fc3", "title_en": "Mozilla Hubs", "transed": 1, "url": "https://hubs.mozilla.com/", "via": "", "real_tags": ["mozilla", "\u865a\u62df"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075166, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u7684\u4f53\u80b2\u8054\u8d5b\u662f\u5efa\u7acb\u5728\u8bb8\u591a\u7403\u8ff7\u8ba4\u4e3a\u7406\u6240\u5f53\u7136\u7684\u3001\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u88ab\u89c6\u4e3a\u795e\u5723\u7684\u51e0\u4e2a\u5047\u8bbe\u4e4b\u4e0a\u7684\u3002\u5176\u4e2d\u4e00\u4e9b\u5047\u8bbe\u662f\uff1a\u8054\u76df\u5fc5\u987b\u516c\u5e73\u548c\u5e73\u8861\u3002\u8054\u76df\u7684\u89c4\u6a21\u5fc5\u987b\u76f8\u4f3c\uff0c\u5982\u679c\u4e0d\u662f\u76f8\u540c\u7684\u8bdd\u3002\u8054\u76df\u5fc5\u987b\u9075\u5faa\u540c\u6837\u7684\u89c4\u5219\u3002\u7403\u961f\u5fc5\u987b\u4e0e\u8054\u76df\u5185\u7684\u5176\u4ed6\u7403\u961f\u8fdb\u884c\u5927\u91cf\u6bd4\u8d5b\uff0c\u5982\u679c\u4e0d\u662f\u5168\u90e8\u6bd4\u8d5b\u7684\u8bdd\u3002\u6240\u6709\u7684\u6e38\u620f\u90fd\u5e94\u8be5\u6709\u540c\u7b49\u7684\u4ef7\u503c\u3002\n\u8fd9\u4e9b\u5047\u8bbe\uff0c\u4ee5\u53ca\u5176\u4ed6\u5047\u8bbe\uff0c\u521b\u9020\u4e86\u7f8e\u56fd\u4f53\u80b2\u7684\u666f\u89c2\u3002\u4f46\u4f60\u53ef\u4ee5\u5728\u4fdd\u6301\u4e00\u4e2a\u4ee4\u4eba\u4fe1\u670d\u7684\u8054\u76df\u7684\u540c\u65f6\uff0c\u8fdd\u53cd\u8bb8\u591a\uff08\u5982\u679c\u4e0d\u662f\u5168\u90e8\u7684\u8bdd\uff09\u8fd9\u4e9b\u5047\u8bbe\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u66f4\u516c\u5e73\uff0c\u5e76\u5e26\u6765\u66f4\u4ee4\u4eba\u5174\u594b\u7684\u7ed3\u679c\u7684\u4f18\u8d28\u4ea7\u54c1\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u8bd5\u56fe\u6253\u7834\u76ee\u524d\u7f8e\u56fd\u804c\u4e1a\u68d2\u7403\u5927\u8054\u76df\u7684\u7ed3\u6784\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f53\u7cfb\uff0c\u8ba9\u7403\u8ff7\u548c\u7403\u961f\u90fd\u80fd\u62e5\u6709\u4e00\u4e2a\u66f4\u516c\u5e73\u3001\u66f4\u6fc0\u52a8\u4eba\u5fc3\u3001\u66f4\u4ee4\u4eba\u4fe1\u670d\u7684\u6700\u7ec8\u4ea7\u54c1\u3002\u6211\u5c06\u63d0\u51fa\u7684\u4e00\u4e9b\u89c4\u5219\u4fee\u6539\u662f\u5197\u957f\u7684\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u4eec\u90fd\u4e0d\u662f\u5f88\u590d\u6742\u3002\u6211\u76f8\u4fe1\u4efb\u4f55\u7403\u8ff7\u90fd\u80fd\u591f\u8f7b\u677e\u5730\u7406\u89e3\u548c\u7406\u89e3\u6700\u7ec8\u4ea7\u54c1\uff0c\u5c31\u50cf\u4ed6\u4eec\u7406\u89e3\u548c\u7406\u89e3\u5f53\u524d\u7684\u5927\u8054\u76df\u4ea7\u54c1\u4e00\u6837\u3002\n\u6211\u60f3\u5f3a\u8c03\u7684\u662f\uff0c\u6211\u63d0\u51fa\u7684\u4efb\u4f55\u89c4\u5219\u90fd\u4e0d\u4f1a\u6539\u53d8\u68d2\u7403\u6bd4\u8d5b\u3002\u8fd9\u4e9b\u89c4\u5219\u90fd\u4e0d\u4f1a\u5f71\u54cd\u7403\u548c\u6253\u51fb\u3001\u5b89\u6253\u3001\u9632\u5b88\u6216\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002DH\u662f\u4e0d\u76f8\u5173\u7684\uff0c\u6bd4\u5982\u79fb\u52a8\u3001\u673a\u5668\u4ebaump\u3001\u7ed8\u56fe\u548c\u5373\u65f6\u56de\u653e\u3002\u6211\u63d0\u8bae\u7684\u89c4\u5219\u5b8c\u5168\u9650\u4e8e\u8054\u76df\u7684\u6574\u4f53\u7ed3\u6784\u3002\u8c01\u6253\u8c01\uff0c\u8c01\u6253\u5b63\u540e\u8d5b\uff0c\u4ee5\u53ca\u8bf8\u5982\u6b64\u7c7b\u7684\u4e8b\u60c5\u3002\n\u4e3a\u4e86\u5f62\u6210\u4e00\u4e2a\u65b0\u7684\u7ed3\u6784\uff0c\u6211\u4eec\u5fc5\u987b\u62c6\u9664\u73b0\u6709\u7684\u7ed3\u6784\u3002\u7f8e\u56fd\u8054\u8d5b\u53ca\u5176\u76f8\u5e94\u7684\u4e09\u4e2a\u5206\u533a\u5c06\u4e0d\u590d\u5b58\u5728\u3002\u56fd\u5bb6\u8054\u76df\u53ca\u5176\u76f8\u5e94\u7684\u4e09\u4e2a\u5206\u90e8\u4e5f\u4e0d\u4f1a\u3002\u6211\u4eec\u73b0\u5728\u5269\u4e0b30\u4e2a\u72ec\u7acb\u7684\u56e2\u961f\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7f8e\u56fd\u4f53\u80b2\u8054\u76df\u6709\u4e24\u4e2a\u76f8\u5f53\u91cd\u8981\u7684\u5047\u8bbe\u3002\u9996\u5148\uff0c\u6bcf\u652f\u7403\u961f\u90fd\u5fc5\u987b\u5728\u8054\u76df\u4e2d\u3002\u8fd9\u662f\u6211\u5c06\u575a\u6301\u7684\u5047\u8bbe\u3002\u7b2c\u4e8c\uff0c\u6bcf\u652f\u7403\u961f\u53ea\u80fd\u53c2\u52a0\u4e00\u4e2a\u8054\u8d5b\u3002\u597d\u5427\uff0c\u6211\u7684\u89c4\u5219\u80af\u5b9a\u4f1a\u629b\u5f03\u7b2c\u4e8c\u70b9\u3002\n\u4e0e\u7f8e\u56fd\u8054\u8d5b\u548c\u56fd\u5bb6\u8054\u8d5b\u4e0d\u540c\uff0c\u5c06\u6709\u6807\u51c6\u8054\u8d5b\u548c\u51a0\u519b\u8054\u8d5b\u3002\u4e0d\uff0c\u6211\u6ca1\u6709\u5ac1\u7ed9\u8fd9\u4e9b\u540d\u5b57\u3002\u4f60\u60f3\u600e\u4e48\u8bf4\u5c31\u600e\u4e48\u8bf4\u3002\u8fd9\u4e2a\u540d\u5b57\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4e0e\u5168\u5c40\u65e0\u5173\u3002\n\u6807\u51c6\u8054\u8d5b\u5c06\u5305\u542b\u6240\u670930\u652f\u7403\u961f\u3002\u51a0\u519b\u8054\u8d5b\u5c06\u4f1a\u66f4\u52a0\u590d\u6742\u3002\u5728\u6211\u8fdb\u5165\u7ec6\u8282\u4e4b\u524d\uff0c\u6211\u60f3\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6b27\u51a0\u610f\u5473\u7740\u4ec0\u4e48\uff1a\n\u672c\u8d5b\u5b63\u51a0\u519b\u8054\u8d5b\u6bd4\u8d5b\u5c06\u6709\u66f4\u591a\u6709\u4ef7\u503c\u7684\u7535\u89c6\u65f6\u6bb5\u548c\u65e5\u671f\u3002\n\u804c\u4e1a\u8fd0\u52a8\u5458\u5f97\u5230\u7684\u62a5\u916c\u975e\u5e38\u9ad8\uff0c\u5728\u804c\u4e1a\u4f53\u80b2\u7279\u8bb8\u7ecf\u8425\u7684\u8d39\u7528\u4e2d\uff0c\u4ed6\u4eec\u5360\u4e86\u5f88\u5927\u4e00\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5f53\u4e00\u652f\u7403\u961f\u5728\u67d0\u4e2a\u8d5b\u5b63\u8868\u73b0\u4e0d\u4f73\u65f6\uff0c\u7403\u961f\u5c06\u9762\u4e34\u901a\u8fc7\u51bb\u7ed3\u652f\u51fa\u548c/\u6216\u4ea4\u6613\u73b0\u6709\u5408\u540c\u6765\u51cf\u5c11\u635f\u5931\u7684\u5f3a\u70c8\u800c\u6301\u4e45\u7684\u6fc0\u52b1\u3002\u7136\u540e\uff0c\u5f53\u56e2\u961f\u6709\u671b\u518d\u6b21\u8868\u73b0\u826f\u597d\u65f6\uff0c\u652f\u51fa\u53ef\u80fd\u4f1a\u589e\u52a0\uff0c\u4ee5\u652f\u6301\u9884\u671f\u7684\u7ee9\u6548\u53d8\u5316\u3002\u8fd9\u662f\u5bf9\u6bd4\u8d5b\u73af\u5883\u7684\u5408\u4e4e\u903b\u8f91\u548c\u7406\u6027\u7684\u56de\u5e94\uff0c\u5c24\u5176\u662f\u5728\u50cf\u7f8e\u56fd\u804c\u4e1a\u68d2\u7403\u5927\u8054\u76df\u8fd9\u6837\u7684\u8054\u76df\u4e2d\uff0c\u9664\u4e86\u8fd9\u79cd\u91d1\u94b1\u6fc0\u52b1\u4e4b\u5916\uff0c\u9009\u79c0\u6743\u8fd8\u4e0e\u80dc\u8d1f\u8bb0\u5f55\u6302\u94a9\u3002\u56e0\u6b64\uff0c\u4e00\u652f\u7403\u961f\u4e0d\u4ec5\u53ef\u4ee5\u901a\u8fc7\u521b\u9020\u52a3\u8d28\u4ea7\u54c1\u6765\u8282\u7701\u8d44\u91d1\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u589e\u52a0\u4f18\u79c0\u548c\u4f4e\u6210\u672c\u7403\u5458\u7684\u6570\u91cf\u6765\u5956\u52b1\u4ed6\u4eec\u3002\n\u51a0\u519b\u8054\u8d5b\u7684\u5f62\u5f0f\u65e8\u5728\u901a\u8fc7\u60e9\u7f5a\u957f\u671f\u8868\u73b0\u4e0d\u4f73\u7684\u7403\u961f\u6765\u963b\u6b62\u8fd9\u79cd\u884c\u4e3a\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u51a0\u519b\u8054\u8d5b\u4ee3\u8868\u4e86\u6240\u6709\u7403\u961f\uff0c\u81f3\u5c11\u5728\u6bd4\u8d5b\u7ed3\u679c\u65b9\u9762\uff0c\u4ed6\u4eec\u8bd5\u56fe\u5728\u8fc7\u53bb\u4e94\u4e2a\u8d5b\u5b63\u4e2d\u83b7\u80dc\u3002\n\u5c31\u662f\u8fd9\u6837\u3002\u5982\u679c\u4f60\u8d62\u4e8684\u573a\u6bd4\u8d5b\uff0c\u4f60\u5c31\u6709\u4e00\u4e2a\u8d44\u683c\u8d5b\u8d5b\u5b63\u3002\u5982\u679c\u4f60\u5728\u4e09\u5206\u4e4b\u4e8c\u6216\u4e94\u5206\u4e4b\u4e09\u7684\u8d5b\u5b63\u4e2d\u8d62\u5f9784\u573a\u6bd4\u8d5b\uff0c\u4f60\u5c31\u8fdb\u5165\u4e86\u3002\n\u4f8b\u5982\uff0c\u4ece2011\u5e74\u52302014\u5e74\uff0c\u963f\u7ae5\u6728\u961f\u5206\u522b\u8d62\u5f97\u4e8656\u573a\u300155\u573a\u300151\u573a\u548c70\u573a\u6bd4\u8d5b\u30022015\u5e74\uff0c\u963f\u7ae5\u6728\u961f\u8d62\u5f97\u4e8686\u573a\u6bd4\u8d5b\uff0c\u8fd9\u8db3\u4ee5\u5728\u827e\u5c14\u5916\u5361\u8d62\u5f97\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4ed6\u4eec\u5728\u90a3\u91cc\u51fb\u8d25\u4e86\u6d0b\u57fa\u961f\u3002\u6d0b\u57fa\u961f\u5728\u8fd9\u4e94\u4e2a\u8d5b\u5b63\u4e2d\u5206\u522b\u8d62\u4e8697\u573a\u300195\u573a\u300185\u573a\u300184\u573a\u548c87\u573a\u3002\n\u57282011\u5e74\u52302014\u5e74\u7684\u8d5b\u5b63\u4e2d\uff0c\u963f\u7ae5\u6728\u961f\u7684\u5766\u514b\u5c06\u57282015\u5e74\u7684\u51a0\u519b\u8054\u8d5b\u4e2d\u6dd8\u6c70\u4ed6\u4eec\u3002\u540c\u65f6\uff0c\u6d0b\u57fa\u961f\u662f\u51a0\u519b\u8054\u8d5b\u7684\u7edd\u5bf9\u6210\u5458\u3002\u6211\u8fd8\u6ca1\u6709\u89e3\u91ca\u51a0\u519b\u8054\u8d5b\u7684\u786e\u5207\u597d\u5904\uff0c\u4f46\u6211\u53ea\u60f3\u8bf4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u963b\u6b62\u50cf2015\u5e74\u963f\u65af\u7279\u7f57\u65af\u8fd9\u6837\u7684\u7403\u961f\u8f7b\u677e\u8fdb\u5165\u5b63\u540e\u8d5b\u3002\u6b64\u5916\uff0c2016\u5e74\u7684\u963f\u7ae5\u6728\u961f\u4e5f\u4e0d\u4f1a\u53c2\u52a0\u51a0\u519b\u8054\u8d5b\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e00\u76f4\u5728\u56e0\u5766\u514b\u800c\u53d7\u5230\u60e9\u7f5a\u3002\u7136\u800c\uff0c\u7531\u4e8e\u963f\u7ae5\u6728\u961f\u57282016\u5e74\u8d62\u5f97\u4e8684\u573a\u6bd4\u8d5b\uff0c\u8fde\u7eed\u4e24\u4e2a\u8d5b\u5b63\u83b7\u5f97\u8d44\u683c\u8d5b\uff0c2017\u5e74\u7684\u963f\u7ae5\u6728\u961f\u5c06\u6210\u4e3a\u51a0\u519b\u8054\u8d5b\u7684\u6210\u5458\u3002\u57282018, 2019, 2020\u30012021, 2022\u548c2023\u65f6\uff0c\u6bcf\u4e00\u4e2a\u963f\u65af\u7279\u7f57\u65af\u56e2\u961f\u90fd\u4f1a\u8fd9\u6837\u505a\u3002\n\u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u5373\u4f7f\u592a\u7a7a\u4eba\u4eca\u5929\u5f00\u59cb\u5766\u514b\uff0c\u4e8b\u5b9e\u4e0a\u4ed6\u4eec\u8bd5\u56fe\u57282015\u52302021\u4e4b\u95f4\u83b7\u80dc\u4f1a\u5728\u672a\u6765\u51e0\u4e2a\u8d5b\u5b63\u5e26\u6765\u597d\u5904\u3002\u4f8b\u5982\uff0c\u8db3\u591f\u957f\u7684\u65f6\u95f4\u8ba9\u56e2\u961f\u91cd\u65b0\u88c5\u5907\u3002\u6216\u8005\u7b49\u5f85\u4e0d\u5e78\u6216\u4e0d\u5e78\u7684\u5b63\u8282\u3002\u4f46\u4e00\u65e6\u8fd9\u79cd\u7ed3\u8f6c\u6548\u5e94\u5931\u6548\uff0c\u8f93\u7403\u7684\u7403\u961f\u5c06\u53d7\u5230\u60e9\u7f5a\uff0c\u8f93\u7403\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u60e9\u7f5a\u5c06\u7ee7\u7eed\u4e0b\u53bb\u3002\u6700\u591a\u4e24\u5b63\u3002\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u6fc0\u52b1\u90a3\u4e9b\u5373\u5c06\u8d62\u5f9784\u573a\u6bd4\u8d5b\u7684\u7403\u961f\u82b1\u66f4\u591a\u7684\u94b1\u548c\u8d44\u6e90\u53bb\u8d62\u5f97\u6bd4\u8d5b\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u7559\u5728\u51a0\u519b\u8054\u8d5b\u4e2d\uff0c\u5e76\u4ece\u4e2d\u53d7\u76ca\u3002\u589e\u52a0\u7684\u6fc0\u52b1\u5c06\u6709\u671b\u521b\u9020\u4e00\u4e2a\u66f4\u5177\u7ade\u4e89\u529b\u7684\u8054\u8d5b\uff0c\u8fd9\u5c06\u53cd\u8fc7\u6765\u4e3a\u8fd9\u9879\u8fd0\u52a8\u7684\u7403\u8ff7\u5e26\u6765\u66f4\u591a\u4e50\u8da3\u3002\n\u4ec5\u4ec5\u4ece\u8fd9\u4e9b\u89c4\u5219\u6765\u770b\uff0c\u53ef\u80fd\u65e0\u6cd5\u7acb\u5373\u770b\u51fa\u6709\u591a\u5c11\u7403\u961f\u5c06\u8fdb\u5165\u51a0\u519b\u8054\u8d5b\u3002\u4ece2010\u5e74\u52302022\u5e74\uff0c\u51a0\u519b\u8054\u8d5b\u4e2d\u5206\u522b\u670916\u652f\u300117\u652f\u300111\u652f\u300114\u652f\u300115\u652f\u300115\u652f\u300118\u652f\u300116\u652f\u300112\u652f\u300116\u652f\u300113\u652f\u548c14\u652f\u7403\u961f\u3002\u6240\u4ee5\uff0c\u5728\u516b\u4e2a\u8d5b\u5b63\u4e2d\uff0c\u81f3\u5c11\u6709\u4e00\u534a\u7684\u7403\u961f\u53c2\u52a0\u4e86\u51a0\u519b\u8054\u8d5b\uff0c\u5e73\u5747\u6bcf\u4e2a\u8d5b\u5b6314.9\u652f\u7403\u961f\u3002\n\u6bcf\u4e2a\u961f\u90fd\u5728\u6807\u51c6\u8054\u8d5b\u4e2d\u3002\u53ea\u6709\u5408\u683c\u7684\u7403\u961f\u624d\u80fd\u8fdb\u5165\u51a0\u519b\u8054\u8d5b\u3002\u4f60\u53ef\u80fd\u5728\u60f3\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\u3002\u4e0b\u9762\u662f\u65b9\u6cd5\u3002\n\u4efb\u4f55\u5728\u5468\u4e00\u3001\u5468\u4e8c\u6216\u5468\u4e09\u5f00\u59cb\u7684\u7cfb\u5217\u8d5b\u90fd\u662f\u6807\u51c6\u7684\u8054\u8d5b\u7cfb\u5217\u8d5b\u3002\u4efb\u4f55\u5728\u5468\u4e94\u3001\u5468\u516d\u6216\u5468\u65e5\u7ed3\u675f\u7684\u7cfb\u5217\u8d5b\u90fd\u662f\u51a0\u519b\u8054\u8d5b\u7cfb\u5217\u8d5b\u3002\u8fd9\u610f\u5473\u7740\u5468\u56db\u7684\u6bd4\u8d5b\u662f\u4e00\u5f20\u5916\u5361\uff0c\u6709\u65f6\u662f\u5de5\u4f5c\u65e5\u7684\u6bd4\u8d5b\uff0c\u6709\u65f6\u662f\u5468\u672b\u7684\u6bd4\u8d5b\u3002\u4ece\u8fc7\u53bb\u51e0\u4e2a\u8d5b\u5b63\u6765\u770b\uff0c\u7403\u961f\u5e73\u5747\u5468\u672b\u6bd4\u8d5b97.07\u573a\uff0c\u800c\u5de5\u4f5c\u65e5\u6bd4\u8d5b64.92\u573a\u3002\u5982\u679c\u8fd9\u4e9b\u89c4\u5219\u5f97\u5230\u5b9e\u65bd\uff0c\u4f60\u53ef\u4ee5\u786e\u5b9a97\u573a\u51a0\u519b\u8054\u8d5b\u6bd4\u8d5b\u4e0e65\u573a\u6807\u51c6\u6bd4\u8d5b\u7684\u5bf9\u6bd4\u3002\n\u6240\u6709\u7403\u961f\u90fd\u5c06\u53c2\u52a0\u6807\u51c6\u8054\u8d5b\u548c\u51a0\u519b\u8054\u8d5b\u7684\u6240\u6709\u6bd4\u8d5b\uff0c\u56e0\u6b64\u6240\u6709\u7403\u961f\u4ecd\u5c06\u53c2\u52a0162\u573a\u6bd4\u8d5b\u3002\u7136\u800c\uff0c\u51a0\u519b\u8054\u8d5b\u7684\u6210\u5458\u53ef\u4ee5\u4ece\u4ed6\u4eec\u7684\u5730\u4f4d\u4e2d\u83b7\u76ca\uff0c\u800c\u975e\u6210\u5458\u53ea\u4f1a\u5728\u5e74\u5e95\u7684\u8054\u8d5b\u79ef\u5206\u699c\u4e0a\u83b7\u5f97\u80dc\u8d1f\u3002\n\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u7403\u961f\u6bcf\u5468\u90fd\u4f1a\u5728\u6bcf\u4e2a\u8054\u8d5b\u4e2d\u6253\u591a\u573a\u6bd4\u8d5b\u3002\u6709\u65f62\uff0c\u6709\u65f64\uff0c\u6bcf\u4e2a\u8054\u8d5b\u3002\u56e0\u4e3a\u4ed6\u4eec\u662f\u4e0d\u540c\u7684\u8054\u8d5b\uff0c\u6240\u4ee5\u4ed6\u4eec\u7684\u6392\u540d\u5404\u4e0d\u76f8\u540c\u3002\u8fd9\u5bf9\u7403\u961f\u548c\u7403\u8ff7\u6765\u8bf4\u90fd\u662f\u975e\u5e38\u6709\u8da3\u7684\u5730\u65b9\u3002\n\u9996\u5148\uff0c\u6211\u5c06\u9648\u8ff0\u663e\u800c\u6613\u89c1\u7684\u4e8b\u5b9e\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5468\u672b\u6e38\u620f\u6bd4\u5e73\u65e5\u6e38\u620f\u66f4\u6709\u4ef7\u503c\u3002\u4ed6\u4eec\u4e5f\u6709\u81ea\u5df1\u7684\u65f6\u95f4\u8868\uff0c\u6709\u81ea\u5df1\u7684\u6392\u540d\u3002\u7403\u961f\u7684\u76ee\u6807\u662f\u5728\u5468\u672b\u628a\u4f53\u80b2\u573a\u6324\u5f97\u6ee1\u6ee1\u7684\uff0c\u7403\u5458\u548c\u7403\u8ff7\u90fd\u77e5\u9053\u6bd4\u8d5b\u66f4\u6709\u4ef7\u503c\u3002\u8fd9\u53ef\u4ee5\u589e\u52a0\u7403\u8ff7\u7684\u53c2\u4e0e\u5ea6\uff0c\u8ba9\u4e3a\u7403\u961f\u52a0\u6cb9\u66f4\u6709\u8da3\u3002\n\u6b64\u5916\uff0c\u7531\u4e8e\u5468\u672b\u6bd4\u8d5b\u7684\u4ef7\u503c\u66f4\u9ad8\uff0c\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u5806\u53e0\u4f60\u7684\u9635\u5bb9\uff0c\u4ee5\u4fbf\u4f60\u6700\u597d\u7684\u6295\u624b\u5728\u5468\u672b\u6295\u7403\uff0c\u4f60\u6700\u597d\u7684\u51fb\u7403\u624b\u5728\u5468\u672b\u51fb\u7403\uff0c\u7b49\u7b49\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a\u540c\u65f6\u8fdb\u884c\u7684\u3001\u77ed\u5f97\u591a\u7684\u8d5b\u5b63\uff0c\u5982\u679c\u4e00\u652f\u7403\u961f\u5728\u4e00\u4e2a\u8054\u8d5b\u4e2d\u8d77\u6b65\u4e0d\u987a\u5229\uff0c\u4ed6\u4eec\u53ef\u4ee5\u628a\u6ce8\u610f\u529b\u8f6c\u79fb\u5230\u5bf9\u65b9\u8eab\u4e0a\u3002\n\u4f8b\u5982\uff0c\u5047\u8bbe\u4e00\u652f\u7403\u961f\u5728\u524d10\u4e2a\u5de5\u4f5c\u65e5\u7684\u6bd4\u8d5b\u4e2d\u8d62\u4e868\u573a\uff0c\u4f46\u5728\u524d10\u4e2a\u5468\u672b\u7684\u6bd4\u8d5b\u4e2d\u8f93\u4e867\u573a\u3002\u4e5f\u8bb8\u4ed6\u4eec\u53ef\u4ee5\u628a\u6ce8\u610f\u529b\u8f6c\u79fb\u5230\u5de5\u4f5c\u65e5\u7684\u6bd4\u8d5b\u4e0a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u628a\u9996\u53d1\u6295\u624b\u5b89\u6392\u5728\u672c\u5468\u800c\u4e0d\u662f\u5468\u672b\u6295\u7403\uff0c\u5728\u6807\u51c6\u8054\u8d5b\u5b9e\u529b\u7684\u57fa\u7840\u4e0a\u52a0\u500d\u52aa\u529b\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u5165\u5b63\u540e\u8d5b\u3002\n\u5f53\u4f60\u4e3a\u7403\u961f\u63d0\u4f9b\u66f4\u591a\u8fdb\u5165\u5b63\u540e\u8d5b\u7684\u9014\u5f84\u65f6\uff0c\u4f60\u5c31\u589e\u52a0\u4e86\u7403\u8ff7\u4eec\u5728\u6574\u4e2a\u8d5b\u5b63\u90fd\u53ef\u4ee5\u5173\u6ce8\u7684\u5174\u8da3\u5c42\u6b21\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u53c2\u4e0e\u8fdb\u6765\uff0c\u8ba9\u66f4\u591a\u7684\u4eba\u89c2\u770b\u548c\u89c2\u770b\u6bd4\u8d5b\uff0c\u8ba9\u7403\u8ff7\u4eec\u6574\u4f53\u5174\u594b\u4e0d\u5df2\u3002\n\u4f60\u53ef\u80fd\u60f3\u77e5\u9053\u5982\u4f55\u4ece\u4e24\u4e2a\u8054\u8d5b\u4e2d\u6311\u9009\u5b63\u540e\u8d5b\u7403\u961f\u3002\u8fd9\u4e5f\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff0c\u5c3d\u7ba1\u53ef\u80fd\u662f\u53cc\u8054\u8d5b\u8d5b\u5b63\u4e2d\u6700\u590d\u6742\u7684\u65b9\u9762\u3002\n\u5f53\u7136\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u53ef\u80fd\u5bf9\u8fd9\u4ef6\u4e8b\u6709\u81ea\u5df1\u7684\u770b\u6cd5\u3002\u4f46\u662f\uff0c\u5047\u8bbe\u6211\u4eec\u4fdd\u6301MLB\u76ee\u524d\u768410\u652f\u5b63\u540e\u8d5b\u7403\u961f\u6a21\u5f0f\uff0c\u6211\u5efa\u8bae\u5982\u4e0b\uff1a\n\u4f60\u6709\u4e09\u4e2a\u6392\u540d\u3002\u9996\u5148\u662f\u51a0\u519b\u8054\u8d5b\uff0c\u7b2c\u4e8c\u662f\u6807\u51c6\u8054\u8d5b\uff0c\u7b2c\u4e09\u662f\u51a0\u519b\u8054\u8d5b\u548c\u6807\u51c6\u8054\u8d5b\u7684\u603b\u51a0\u519b\u3002\n\u4e24\u652f\u603b\u51a0\u519b\u6570\u6700\u9ad8\u7684\u7403\u961f\u4ee5\u524d\u4e24\u540d\u79cd\u5b50\u8fdb\u5165\u5b63\u540e\u8d5b\u3002\u5982\u679c\u4f60\u8d62\u5f97\u6700\u591a\u7684\u6bd4\u8d5b\uff0c\u4f60\u5c31\u80fd\u8fdb\u5165\u5b63\u540e\u8d5b\u3002\n\u63a5\u4e0b\u6765\uff0c\u4f60\u8981\u770b\u51a0\u519b\u8054\u8d5b\u4e2d\u5269\u4e0b\u7684\u524d\u516d\u540d\u7403\u961f\u3002\u8fd9\u516d\u652f\u7403\u961f\u4e2d\u6392\u540d\u5012\u6570\u7b2c\u4e8c\u7684\u7403\u961f\u5fc5\u987b\u6253\u5916\u5361\u624d\u80fd\u664b\u7ea7\u3002\n\u6700\u540e\uff0c\u4ece\u6807\u51c6\u8054\u8d5b\u4e2d\u9009\u51fa\u5269\u4e0b\u7684\u524d2\u540d\u7403\u961f\u3002\u8fd9\u4e24\u652f\u7403\u961f\u5fc5\u987b\u5728\u5916\u5361\u6bd4\u8d5b\u4e2d\u4e0e\u51a0\u519b\u8054\u8d5b\u4e2d\u6392\u540d\u6700\u4f4e\u7684\u4e24\u540d\u7403\u5458\u7ade\u4e89\u3002\n\u6211\u5df2\u7ecf\u4ece2017, 2018, 2019\u548c2021\u83b7\u53d6\u6570\u636e\u3002\u8fc7\u53bb\u4e94\u5e74\uff0c\u4e0d\u5305\u62ec\u7f29\u77ed\u76842020\u8d5b\u5b63\u3002\u5728\u8fd9\u4e9b\u8d5b\u5b63\u4e2d\uff0c59\u652f\u7403\u961f\u83b7\u5f97\u4e86\u6b27\u51a0\u8d44\u683c\uff0c61\u652f\u7403\u961f\u6ca1\u6709\u3002\u572859\u652f\u83b7\u5f97\u6b27\u51a0\u8d44\u683c\u7684\u7403\u961f\u4e2d\uff0c\u73b0\u5b9e\u751f\u6d3b\u4e2d\u670926\u652f\u7403\u961f\u8fdb\u5165\u4e86\u5b63\u540e\u8d5b\u3002\u5728\u6211\u4e0a\u9762\u6982\u8ff0\u7684\u9009\u62e9\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u6570\u5b57\u8df3\u5230\u4e8633\u3002\u8fd156%\u7684\u51a0\u519b\u8054\u8d5b\u7403\u961f\u5c06\u8fdb\u5165\u5b63\u540e\u8d5b\u3002\n\u73b0\u5728\u770b\u770b61\u652f\u6ca1\u6709\u53c2\u52a0\u51a0\u519b\u8054\u8d5b\u7684\u7403\u961f\uff0c\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\uff0c\u8fd9\u4e9b\u7403\u961f\u4e2d\u670914\u652f\u8fdb\u5165\u4e86\u5b63\u540e\u8d5b\uff0c\u800c\u6839\u636e\u6211\u4e0a\u9762\u6982\u8ff0\u7684\u89c4\u5219\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e0b\u964d\u5230\u4e867\u652f\u3002\n\u56e0\u6b64\uff0c\u6839\u636e\u8fd9\u4e9b\u89c4\u5219\uff0c\u5e73\u5747\u6bcf\u4e2a\u8d5b\u5b63\u67091.75\u652f\u7403\u961f\u53d7\u5230\u5904\u7f5a\uff0c\u4ed6\u4eec\u7684\u5904\u7f5a\u662f\u5931\u53bb\u5b63\u540e\u8d5b\u7684\u4f4d\u7f6e\u3002\u6b64\u5916\uff0c\u6ca1\u6709\u53c2\u52a0\u6b27\u51a0\u8054\u8d5b\u7684\u7403\u961f\u53ea\u80fd\u572810\u652f\u7403\u961f\u7684\u5b63\u540e\u8d5b\u4e2d\u83b7\u5f974\u4e2a\u540d\u989d\uff0c\u867d\u7136\u5176\u4e2d\u4e24\u4e2a\u540d\u989d\u662f\u5b63\u540e\u8d5b\u7684\u5934\u53f7\u79cd\u5b50\uff0c\u4f46\u5176\u4ed6\u4e24\u4e2a\u540d\u989d\u4fdd\u8bc1\u662f\u5916\u5361\u540d\u989d\u3002\n\u6211\u63d0\u8bae\u5bf9\u7f8e\u56fd\u804c\u4e1a\u68d2\u7403\u5927\u8054\u76df\u7684\u7ed3\u6784\u8fdb\u884c\u4e00\u6b21\u5f7b\u5e95\u7684\u6539\u9769\uff1a\u53d6\u6d88\u56fd\u5bb6\u548c\u7f8e\u56fd\u8054\u8d5b\uff0c\u4ee3\u4e4b\u4ee5\u6b27\u6d32\u51a0\u519b\u8054\u8d5b\u548c\u6807\u51c6\u8054\u8d5b\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u53cc\u8054\u8d5b\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7403\u961f\u90fd\u5728\u4e24\u4e2a\u8054\u8d5b\u4e2d\u6bd4\u8d5b\uff0c\u4f46\u53ea\u6709\u5408\u683c\u7684\u51a0\u519b\u8054\u8d5b\u6210\u5458\u624d\u80fd\u83b7\u5f97\u8be5\u8054\u8d5b\u7684\u597d\u5904\u3002\u4e3b\u8981\u7684\u597d\u5904\u662f\u5927\u5927\u589e\u52a0\u4e86\u8fdb\u5165\u5b63\u540e\u8d5b\u7684\u673a\u4f1a\uff0c\u540c\u65f6\u5927\u5927\u63d0\u9ad8\u4e86\u907f\u514d\u6bd4\u8d5b\u4e2d\u51fa\u73b0\u901a\u914d\u7b26\u7684\u51e0\u7387\u3002\n\u8fd9\u79cd\u53cc\u8054\u8d5b\u7ed3\u6784\u4e3a\u7403\u961f\u63d0\u4f9b\u4e86\u66f4\u591a\u8fdb\u5165\u5b63\u540e\u8d5b\u7684\u9014\u5f84\uff0c\u5e76\u901a\u8fc7\u786e\u4fdd\u6bcf\u4e2a\u8d5b\u5b63\u81f3\u5c1184\u573a\u80dc\u5229\u6765\u4fdd\u6301\u4ed6\u4eec\u5728\u51a0\u519b\u8054\u8d5b\u4e2d\u7684\u5730\u4f4d\u3002\u56e0\u6b64\uff0c\u9677\u5165\u53ef\u6015\u7684\u201c\u597d\u5230\u8db3\u4ee5\u8d62\u5f97\u6bd4\u8d5b\u8bb0\u5f55\uff0c\u4f46\u4e0d\u8db3\u4ee5\u8fdb\u5165\u5b63\u540e\u8d5b\u201d\u7684\u7403\u961f\uff0c\u4f1a\u56e0\u4e3a\u4ed6\u4eec\u8bd5\u56fe\u7ec4\u5efa\u4e00\u652f\u83b7\u80dc\u7684\u7403\u961f\u800c\u5b9a\u671f\u83b7\u5f97\u5956\u52b1\uff0c\u540c\u65f6\u4e5f\u4f1a\u6291\u5236\u7403\u961f\u957f\u65f6\u95f4\u8fdc\u79bb\u5931\u8d25\u7684\u7403\u961f\u3002\u4e00\u4e24\u4e2a\u8d5b\u5b63\u7684\u5237\u65b0\u53ef\u80fd\u88ab\u8ba4\u4e3a\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u4f46\u4e09\u4e2a\u4ee5\u4e0a\u7684\u8d5b\u5b63\u5c06\u91cd\u65b0\u8bbe\u5b9a\u4ed6\u4eec\u7684\u51a0\u519b\u8054\u8d5b\u5730\u4f4d\uff0c\u5e76\u521b\u9020\u4e00\u4e2a\u8270\u82e6\u7684\u6218\u6597\uff0c\u4f7f\u5b63\u540e\u8d5b\u5728\u91cd\u5efa\u7684\u53e6\u4e00\u7aef\u3002\n\u8fd9\u662f\u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u7684\u4e00\u7cfb\u5217\u6587\u7ae0\u548c\u6587\u7ae0\u7684\u7b2c\u4e00\u90e8\u5206\u3002\u5230\u5e95\u6709\u591a\u5c11\u90e8\u5206\u53ef\u80fd\u6700\u7ec8\u4f1a\u6210\u4e3a\u672a\u77e5\u7684\uff0c\u8fd9\u53d6\u51b3\u4e8e\u6027\u60c5\u3002\u6211\u5c06\u4ea4\u53c9\u94fe\u63a5\u6bcf\u4e2a\u65b0\u7684\u90e8\u5206\uff0c\u4f46\u8fd9\u5c06\u4ecd\u7136\u662f\u4e3b\u8981\u6765\u6e90\u3002", "note_en": "American sports leagues are built upon several assumptions which many fans take for granted, and in many cases regard as sacred. Some of these assumptions are: The leagues have to be fair and balanced. The leagues have to be of similar size, if not identical size. Leagues must follow the same rules. Teams must play a large number of games against other teams within their league, if not all of their games. All games played should have equal value.\n These assumptions, among others, have created the landscape of American sports. But you can violate many if not all of these assumptions while maintaining a compelling league. One which may, in fact, be more fair and lead to a superior product with more exciting outcomes. Here, I will try to dismantle the current structure of major league baseball and create a new system whereby both fans and teams may have a more equitable, exciting, and compelling end product. Some of the rule changes I will propose are wordy, but I would argue none of them are very complicated. I believe any fan would be able to easily follow and understand the end product just as well as they follow and understand the current major league product.\n I want to stress that none of the rules I will be proposing will change the game of baseball. None of these rules will impact balls and strikes, base hits, defense, or anything else. The DH is irrelevant, as are shifting, robo umps, drafting, and instant replay. The rules I am proposing are entirely limited to the overall STRUCTURE of the league. Who plays who, who makes the postseason, and things of that nature.\n   In order to form a new structure, we must demolish the existing structure. The American League and its three corresponding divisions will no longer exist. Neither will the National League and its three corresponding divisions. We are now left with 30 independent teams.\n American sports leagues, up to this point, have had two pretty significant assumptions. First, every team must be in a league. Which is an assumption that I will maintain. Second, every team can only be in one league. Well, my rules will most certainly cast aside that second point.\n Rather than an American League and a National League, there will be a Standard League and a Champions League. No, I am not married to these names. You can refer to them however you\u2019d like. The name is largely irrelevant in the grand scheme of things.\n The Standard League will contain all 30 teams. The Champions League will be a little more complicated. Before I get into the details, I want to briefly cover what the Champions League will  mean:\n Champions League games will have more valuable TV time slots and dates during the season.\n    Professional athletes get paid very large sums of money, and they represent a large fraction of the expenses of a professional sports franchise. As such, when a team is not expected to perform well in a given season, the team faces a strong and persistent incentive to cut their losses via freezing spending and/or trading away existing contracts. Then, when the team is expected to perform well again, spending may increase to support the expected change in performance. This is a logical and rational response to the game environment, especially in a league like Major League Baseball which, in addition to this monetary incentive, also ties draft picks to the win/loss record. So, not only can a team save money by creating an inferior product, but they can be rewarded with increasing numbers of superior and low cost player talent.\n The Champions League format aims to deter this behavior by punishing teams who underperform for a long period of time. In other words, the Champions League represents all of the teams that have, at least in terms of game results,  tried to win over the prior five seasons.\n    That is it. If you win 84 games, you have a qualifying season. If you win 84 games in two out of three or three out of five seasons, you\u2019re in.\n So, for example, from 2011 to 2014 the Astros won 56, 55, 51, and 70 games respectively. In 2015, the Astros won 86 games, which was sufficient to win a slot in the AL Wild Card, where they defeated the Yankees. The Yankees had won 97, 95, 85, 84, and 87 wins in each of those five seasons, respectively.\n The Astros tanking during the 2011 through 2014 seasons would have eliminated them from the Champions League for this 2015 season. Meanwhile, the Yankees were definite members of the Champions league. I have not yet explained the exact benefit of the Champions League, but suffice it to say, the goal is to stop teams like the 2015 Astros from having an easy ride into the postseason. Furthermore, the 2016 Astros would have not been in the Champions League, either, as a result of their ongoing punishment for tanking. However, because the Astros won 84 games in 2016 giving them two qualified seasons in a row, the 2017 Astros would have indeed been members of the Champions League. As would each Astros team in 2018, 2019, 2020, 2021, 2022 and 2023.\n As you see, even if the Astros began tanking today, the fact that they had tried to win between 2015 and 2021 would carry a benefit for several seasons into the future. Long enough for a team to retool, for example. Or to wait out unlucky or unfortunate seasons. But once that carry over effect has expired, a losing team will be punished, and the longer they lose, the more the punishment will carry over. To a maximum of two seasons.\n The goal is to incentivize teams who are on the cusp of 84 wins to spend more money and resources winning games so they stay in the Champions League and keep the benefits thereof. The increased incentive will hopefully create a more competitive league, which will in turn be more fun for the fans of the sport.\n   It might not be immediately obvious how many teams will be in the Champions League merely by looking at these rules. From 2010 through 2022 you have 16, 17, 11, 14, 15, 17, 15, 18, 16, 12, 16, 13, and 14 teams in the Champions League, respectively. So, in eight of the seasons you have at least half of the teams in the Champions League, an average of 14.9 teams per season.\n   Every team is in the Standard League. Only qualified teams are in the Champions League. You may be thinking how this could work. Here is how.\n Any series that  begins on a Monday, Tuesday, or Wednesday is a Standard League series. Any Series that  ends on a Friday, Saturday, or Sunday is a Champion\u2019s League series. This means that Thursday games are a wild card, where sometimes it is a weekday game and sometimes it is a weekend game. Judging by past seasons, teams average 97.07 weekend games versus 64.92 weekday games. If these rules were implemented, you could set a firm 97 Champion League games versus 65 Standard games.\n All teams will play all games in both the Standard League and the Champions League, so all teams will still play 162 games. However, members of the Champions League get to benefit from their status, while non-members merely gain the wins and losses in their combined league standings at the end of the year.\n This means that every week every team will play multiple games in each league. Sometimes 2, sometimes 4, per league. Since they are different leagues, they each have different standings. This is where things can get very fun for both the team and the fans.\n First, I will state the obvious. Under this format, weekend games are simply more valuable than weekday games. They also fall into their own schedule, with their own standings. Teams can aim to pack the stadiums full on the weekend, with both the players and fans knowing the games are worth more. This could increase fan engagement, and make rooting for teams more fun.\n Also, since weekend games are worth more, you can try to stack your lineup such that your best pitchers pitch on the weekend, your best hitters hit on the weekend, etc. On the flip side, since there are in effect two simultaneous, much shorter seasons going on, if a team gets off to a rough start in one league, they can shift their focus to the other.\n For example, say a team wins 8 of their first 10 weekday games but loses 7 of their first 10 weekend games. Perhaps they could shift their focus to weekday games, where they could stack their starting pitchers to pitch during the week instead of on the weekend, doubling down on their Standard League strength and powering their way to a postseason berth in that manner.\n When you give teams more ways to make the postseason, you add layers of intrigue that fans can follow throughout the course of the season, keeping more people engaged, more people watching and attending games, and overall fan excitement high.\n  You may be wondering how you select postseason teams from two leagues. This is, again, relatively simple, although perhaps the most involved aspect of the dual league season.\n Of course, there are many ways you can go about doing this, and you may have your own opinion on the matter. But, assuming we keep with MLB\u2019s current 10 postseason team format, I propose the following:\n You have three standings. First, the Champion\u2019s League, second the Standard League, and third is the combined win total between both Champions League and the Standard league.\n The two teams with the highest combined win total enter the postseason with the top two seeds. If you win the most games, you make the postseason.\n Next, you take the remaining top 6 qualified teams in the Champions League. The bottom 2 teams of these six must play a wild card game to advance.\n Finally, you take the remaining top 2 teams from the Standard League. These two teams must compete with the two lowest members of the Champions League in wild card games.\n   I have taken data from 2017, 2018, 2019, and 2021. The past five years, excluding the shortened 2020 season. Of these seasons, 59 teams have qualified for the Champions League while 61 have not. Of the 59 teams that have qualified for the Champions League, in real life 26 of the teams have made the postseason. In the selection process I have outlined above, this jumps to 33. Nearly 56% of the Champions League teams would have made the postseason.\n Now looking at the 61 teams that were not in the Champions League, in real life 14 of these teams made the postseason, whereas under the rules I have outlined above this number drops to 7.\n  So, with these rules, on average, 1.75 teams are penalized per season, and their penalty is losing their position in the postseason. Furthermore, teams that are not in the Champions League only have access to four slots in the 10 team postseason, and while two of those slots are top seeds in the postseason, the other two are guaranteed wild card slots.\n   I propose a radical change to the structure of Major League Baseball: getting rid of the National and American league and replacing them with the Champions League and the Standard League. This would be a dual league structure, where every team plays games in both leagues, but only qualified members of the Champions League get to gain the benefits of that league. The primary benefit being a dramatically increased chance to make the postseason, along with significantly better odds to avoid the wildcard play in game.\n This dual league structure gives teams more ways to make the postseason, and a strong incentive to maintain their status within the Champions League by ensuring a minimum of 84 wins every season. As a result, teams that are stuck in the dreaded \u201cgood enough to have a winning record, but not good enough to make the postseason\u201d are regularly rewarded for their attempts to make a winning team, while at the same time providing a disincentive to push teams away teams from tanking for prolonged periods of time. One or two seasons to refresh might be deemed acceptable, but 3+ seasons would reset their Champions League status and create an uphill battle to make the postseason on the other end of their rebuild.\n  This is part I of a series of articles and essays on this topic. How many parts there may end up being is unknown, and subject to temperament. I will cross link each new part, however this will remain the primary source.", "posttime": "2022-03-02 22:28:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63d0\u8bae,baseball,\u7403\u961f", "title": "\u4e00\u4e2a\u75af\u72c2\u7684\u68d2\u7403\u63d0\u8bae\uff1a\u53cc\u8054\u8d5b\u91cd\u7ec4", "title_en": "An insane baseball proposal: Dual league restructuring", "transed": 1, "url": "https://www.xstats.org/articles/2022/2/28/the-most-insane-out-of-the-box-baseball-proposal-dual-league-restructuring", "via": "", "real_tags": ["\u63d0\u8bae", "baseball", "\u7403\u961f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075165, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u4f60\u662f\u4e00\u540d\u521d\u521b\u516c\u53f8\u521b\u59cb\u4eba\u65f6\uff0c\u7ed9\u81ea\u5df1\u591a\u5c11\u94b1\u7684\u95ee\u9898\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u7b80\u5355\u3002\n\u5bf9\u4e8e\u4e2a\u4eba\u7406\u8d22\u5de5\u5177Praxeo\u7684\u521b\u59cb\u4eba\u6770\u592b\u00b7\u52a0\u5fb7\u7eb3\uff08Jeff Gardner\uff09\u6765\u8bf4\uff0c\u4e00\u5f00\u59cb\u641e\u6e05\u695a\u4ec0\u4e48\u662f\u201c\u5408\u7406\u7684\u201d\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u201c\u6211\u5728\u7f51\u4e0a\u641c\u7d22\u7684\u4e00\u5207\u4f3c\u4e4e\u90fd\u8fc7\u65f6\u4e86\uff0c\u6216\u8005\u662f\u5bf9\u65e7\u91d1\u5c7120\u4f4d\u521b\u59cb\u4eba\u7684\u72c2\u5984\uff0c\u201d\u610f\u5927\u5229\u4f26\u5df4\u7b2c\u7684\u52a0\u5fb7\u7eb3\u89e3\u91ca\u8bf4\u3002\n\u201c\u6211\u77e5\u9053\u6211\u5f97\u62ff\u85aa\u6c34\uff08\u6211\u6709\u4e09\u4e2a\u5b69\u5b50\uff0c\u6240\u4ee5\u5403\u62c9\u9762\u771f\u7684\u4e0d\u662f\u4e00\u4e2a\u9009\u62e9\uff09\u3002\u6700\u540e\uff0c\u6211\u53ea\u662f\u8ba9\u5176\u4ed6\u4e00\u4e9b\u521b\u59cb\u4eba\u670b\u53cb\u548c\u4e00\u4e9b\u6295\u8d44\u8005\u63d0\u51fa\u4e00\u4e2a\u5927\u81f4\u7684\u60f3\u6cd5\uff0c\u4ece\u6211\u4e0a\u4e00\u4e2a\u5168\u804c\u5458\u5de5\u7684\u89d2\u8272\u4e2d\u7ed9\u81ea\u5df1\u964d\u4e86\u4e00\u4e2a\u5065\u5eb7\u7684\u85aa\u6c34\uff0c\u5e76\u79f0\u8fd9\u5f88\u597d\u3002\u201d\n\u52a0\u5fb7\u7eb3\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u4f4d\u4f9d\u8d56\u540c\u884c\u5efa\u8bae\u7684\u521b\u59cb\u4eba\uff0c\u8fd8\u6709\u4e00\u70b9\u968f\u673a\u5e94\u53d8\u3002\n\u6570\u636e\u53ef\u89c6\u5316\u5e73\u53f0Graphic\u7684\u521b\u59cb\u4eba\u5b89\u5fb7\u70c8\u00b7\u7ef4\u5c3c\u8328\u57fa\uff08Andrey Vinitsky\uff09\u8bf4\uff0c\u4ed6\u4ece\u5176\u4ed6\u521b\u59cb\u4eba\u548c\u6295\u8d44\u8005\u90a3\u91cc\u5f97\u5230\u7684\u5173\u4e8e\u5de5\u8d44\u7684\u5efa\u8bae\u662f\u201c\u7ed9\u81ea\u5df1\u8db3\u591f\u7684\u94b1\uff0c\u4e0d\u8981\u53bb\u60f3\u94b1\u201d\n\u201c\u4f46\u8fd9\u6709\u70b9\u8fdd\u53cd\u76f4\u89c9\uff0c\u201d\u7ef4\u5c3c\u8328\u57fa\u8865\u5145\u9053\u3002\u201c\u6211\u7684\u610f\u601d\u662f\uff0c\u8fd9\u662f\u591a\u5c11\uff1f\u6bd4\u5982\uff0c\u6807\u51c6\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u5f88\u96be\u5f04\u6e05\u695a\u3002\u201d\n\u4e3a\u4e86\u627e\u51fa\u521b\u59cb\u4eba\u7684\u201c\u6807\u51c6\u201d\u85aa\u916c\u662f\u591a\u5c11\uff0c\u6b27\u6d32\u79cd\u5b50\u671f\u98ce\u6295Seedcamp\u6536\u96c6\u4e86185\u540d\u521b\u59cb\u4eba\u4ece\u79cd\u5b50\u671f\u524d\u5230A\u7cfb\u5217\u516c\u53f8\u7684\u85aa\u916c\u6570\u636e\u3002\u53d7\u8bbf\u8005\u6765\u81ea\u82f1\u56fd\u3001\u6b27\u6d32\u548c\u5317\u7f8e\u3002\nSeedcamp\u7684\u4eba\u624d\u7ecf\u7406\u4e9a\u5386\u514b\u65af\u00b7\u5218\u6613\u65af\uff08Alex Lewis\uff09\u8bf4\uff1a\u201c\u6211\u4eec\u5e0c\u671b\u521b\u5efa\u4e00\u4e2a\u65e0\u504f\u89c1\u7684\u540c\u884c\u6570\u636e\u96c6\uff0c\u5e2e\u52a9\u521b\u4e1a\u8005\u5c06\u81ea\u5df1\u4e0e\u5176\u4ed6\u521b\u4e1a\u8005\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd9\u6837\uff0c\u5f53\u4ed6\u4eec\u53bb\u6295\u8d44\u8005\u90a3\u91cc\u65f6\uff0c\u5c31\u50cf\u5458\u5de5\u5728\u8c08\u5224\u52a0\u85aa\u65f6\u4e00\u6837\uff0c\u4ed6\u4eec\u53ef\u4ee5\u589e\u5f3a\u81ea\u5df1\u7684\u5730\u4f4d\u3002\u201d\u3002\n\u201c\u8fd9\u9879\u8c03\u67e5\u5bf9\u4e8e\u6311\u6218\u5173\u4e8e\u521b\u4e1a\u8005\u8eab\u4efd\u7684\u53e4\u8001\u795e\u8bdd\u4e5f\u5f88\u91cd\u8981\u3002\u521b\u4e1a\u8005\u5fc5\u987b\u77e5\u9053\uff0c\u5982\u679c\u4ed6\u4eec\u80fd\u591f\u7b79\u96c6\u8d44\u91d1\uff0c\u4ed6\u4eec\u4e5f\u53ef\u4ee5\u4e3a\u81ea\u5df1\u652f\u4ed8\u4e00\u4efd\u4f53\u9762\u7684\u85aa\u6c34\uff0c\u5728\u5b9e\u73b0\u68a6\u60f3\u7684\u540c\u65f6\u751f\u6d3b\uff0c\u800c\u4e0d\u7ba1\u80cc\u666f\u6216\u4e2a\u4eba\u60c5\u51b5\u5982\u4f55\u3002\u201d\n\u6b63\u5982\u53ef\u4ee5\u9884\u6599\u7684\u90a3\u6837\uff0c\u968f\u7740\u516c\u53f8\u7ee7\u7eed\u7b79\u96c6\u66f4\u591a\u8d44\u91d1\uff0c\u521b\u59cb\u4eba\u7684\u5de5\u8d44\u4e5f\u4f1a\u589e\u52a0\u3002\n\u6839\u636e\u8fd9\u7ec4\u6570\u636e\uff0c\u4ece\u79cd\u5b50\u671f\u5230\u79cd\u5b50\u671f\u7684\u5de5\u8d44\u589e\u957f\u4e8628%\u3002\u4ece\u79cd\u5b50\u5230A\u7cfb\u5217\uff0c\u5b83\u4eec\u589e\u957f\u4e8635%\u3002\nSeedcamp\u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u5408\u4f19\u4eba\u96f7\u4ec0\u739b\u00b7\u7d22\u5965\u5c3c\uff08Reshma Sohoni\uff09\u8868\u793a\uff0c\u4f5c\u4e3a\u4e00\u540d\u6295\u8d44\u8005\uff0c\u5979\u671f\u671b\u770b\u5230\u7684\u201c\u6700\u5b89\u5168\u201d\u7684\u85aa\u6c34\u5728\u79cd\u5b50\u671f\u4e0d\u523010\u4e07\u6b27\u5143\uff0c\u79cd\u5b50\u671f\u4e0d\u523010\u4e07\u6b27\u5143\u6216\u7565\u9ad8\u4e8e10\u4e07\u6b27\u5143\uff0c\u7136\u540e\u5728A\u7cfb\u5217\u4e2d\u4e0d\u523015\u4e07\u6b27\u5143\u3002\u4efb\u4f55\u9ad8\u4e8e\u8fd9\u4e00\u6c34\u5e73\u7684\u90fd\u662f\u201c\u5371\u9669\u4fe1\u53f7\u201d\n\u7136\u800c\uff0c\u67cf\u6797\u4e00\u4f4d\u4e13\u6ce8\u4e8e\u4f01\u4e1a\u5bb6\u7684\u9ad8\u7ba1\u6559\u7ec3\u6731\u5229\u53f6\u65af\u00b7\u5df4\u8d6b\u66fc\uff08Julius Bachmann\uff09\u8868\u793a\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u521b\u59cb\u4eba\u6765\u8bf4\uff0c\u85aa\u916c\u968f\u7740\u516c\u53f8\u53d1\u5c55\u800c\u589e\u957f\u7684\u60f3\u6cd5\u5e76\u4e0d\u603b\u662f\u73b0\u5b9e\u3002\n\u8bb8\u591a\u521b\u59cb\u4eba\u5c48\u4ece\u4e8e\u4e00\u79cd\u7531\u6765\u5df2\u4e45\u7684\u8bf4\u6cd5\uff0c\u5373\u5f53\u4f60\u521b\u529e\u4e00\u5bb6\u516c\u53f8\u65f6\uff0c\u4f60\u4ec0\u4e48\u4e5f\u8d5a\u4e0d\u5230\uff0c\u7136\u540e\u6700\u7ec8\u4f1a\u6709\u4e00\u4e2a\u201c\u5927\u7684\u3001\u5927\u7684\u6295\u7968\u7387\u201d\u3002\u8fd9\u79cd\u8bf4\u6cd5\u6709\u65f6\u662f\u7531\u62c5\u5fc3\u81ea\u5df1\u5e95\u7ebf\u7684\u6295\u8d44\u8005\u63a8\u52a8\u7684\n\u5df4\u8d6b\u66fc\u8bf4\uff1a\u201c\u521b\u59cb\u4eba\u8fc7\u4e8e\u5173\u6ce8\u62c9\u9762\u7684\u76c8\u5229\u80fd\u529b\u2014\u2014\u8fd9\u4e2a\u8bcd\u7684\u57fa\u672c\u610f\u601d\u662f\u2018\u5982\u679c\u4f60\u53ea\u5403\u62c9\u9762\uff0c\u57fa\u672c\u4e0a\u4e0d\u7167\u987e\u81ea\u5df1\uff0c\u8fd9\u5bb6\u516c\u53f8\u80fd\u76c8\u5229\u5417\uff1f\u2019\u201d\u3002\u201c\u4f46\u8fd9\u79cd\u5fc3\u6001\u662f\u4e0d\u53ef\u6301\u7eed\u7684\u3002\u201d\n\u5728\u80a1\u6743\u65b9\u9762\uff0c\u968f\u7740\u516c\u53f8\u8fde\u7eed\u51e0\u8f6e\u878d\u8d44\uff0c\u5355\u4e2a\u521b\u59cb\u4eba\u7684\u80a1\u4efd\u4f1a\u51cf\u5c11\u3002\u5728pre-seed\uff0c\u521b\u59cb\u4eba\u6743\u76ca\u7ea6\u4e3a38.65%\u3002\u8fd9\u4e00\u6bd4\u4f8b\u5728\u79cd\u5b50\u9636\u6bb5\u4e0b\u964d\u4e869%\u81f327.18%\uff0c\u7136\u540e\u5728A\u7cfb\u5217\u4e2d\u53c8\u4e0b\u964d\u4e869%\u81f318.52%\uff08\u521b\u59cb\u4eba\u5f80\u5f80\u4f1a\u5728\u6bcf\u8f6e\u4e2d\u653e\u5f0320-25%\u7684\u80a1\u6743\uff09\n\u7d22\u5965\u5c3c\u8868\u793a\uff0c\u867d\u7136\u5979\u4f1a\u9f13\u52b1\u65e9\u671f\u521b\u4e1a\u8005\u6301\u6709\u76f8\u5f53\u4e00\u90e8\u5206\u80a1\u6743\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u201c\u975e\u5e38\u6709\u5229\u53ef\u56fe\u201d\uff0c\u4f46\u5979\u201c\u5b81\u613f\u521b\u4e1a\u8005\u83b7\u5f97\u5065\u5eb7\u7684\u85aa\u916c\uff0c\u4e5f\u4e0d\u613f\u5728\u516c\u53f8\u8d70\u5411IPO\u7684\u8fc7\u7a0b\u4e2d\u8fc7\u65e9\u5730\u53d1\u884c\u80a1\u6743\u201d\n\u5979\u8865\u5145\u8bf4\uff1a\u201c\u6700\u7ec8\uff0c\u4e00\u4efd\u4f53\u9762\u7684\u85aa\u6c34\u53ef\u4ee5\u8ba9\u4f60\u4e13\u6ce8\u4e8e\u5de5\u4f5c\uff0c\u517b\u5bb6\u7cca\u53e3\uff0c\u7167\u987e\u597d\u751f\u6d3b\u7684\u57fa\u672c\u9762\u3002\u201d\u3002\n\u7d22\u5965\u5c3c\u8ba4\u4e3a\u8fd9\u4e0e\u751f\u6d3b\u6210\u672c\u6709\u5173\u3002\u4f8b\u5982\uff0c\u5728\u4f26\u6566\uff0c\u82f1\u56fd\u5927\u90e8\u5206\u521b\u4e1a\u6d3b\u52a8\u90fd\u96c6\u4e2d\u5728\u90a3\u91cc\uff0c\u751f\u6d3b\u6210\u672c\u975e\u5e38\u9ad8\uff0c\u56e0\u6b64\u521b\u59cb\u4eba\u5f80\u5f80\u4f1a\u7ed9\u81ea\u5df1\u652f\u4ed8\u66f4\u591a\u3002\n\u7136\u800c\uff0c\u5728\u6377\u514b\u5171\u548c\u56fd\u6216\u6469\u5c14\u591a\u74e6\u7b49\u6210\u672c\u8f83\u4f4e\u56fd\u5bb6\u7684\u521b\u59cb\u4eba\u53ef\u80fd\u4e0d\u9700\u8981\u4e3a\u81ea\u5df1\u652f\u4ed8\u90a3\u4e48\u591a\u3002\n\u201c\u8fd9\u4e5f\u4e0e\u521b\u59cb\u4eba\u7684\u5207\u5165\u70b9\u6709\u5173\u3002\u4f8b\u5982\uff0c\u6211\u8ba4\u4e3a\u82f1\u56fd\u7684\u4e00\u4e9b\u521b\u59cb\u4eba\u6709\u5546\u4e1a\u80cc\u666f\u2014\u2014\u4e5f\u8bb8\u662f\u5728\u5927\u94f6\u884c\uff0c\u4ed6\u4eec\u4e60\u60ef\u4e8e\u85aa\u916c\u66f4\u9ad8\u2014\u2014\u56e0\u6b64\u4ed6\u4eec\u4f1a\u7ed9\u81ea\u5df1\u652f\u4ed8\u66f4\u591a\u3002\u201d\nSohoni\u8865\u5145\u8bf4\uff0c\u7f8e\u56fd\u98ce\u6295\u5728\u6b27\u6d32\u7684\u65e5\u76ca\u589e\u591a\u5bf9\u521b\u59cb\u4eba\u85aa\u916c\u4ea7\u751f\u4e86\u79ef\u6781\u5f71\u54cd\u3002\n\u5355\u72ec\u521b\u59cb\u4eba\u7684\u6536\u5165\u8fdc\u8fdc\u9ad8\u4e8e\u5728pre-seed\u4e0e\u8054\u5408\u521b\u59cb\u4eba\u5408\u4f5c\u7684\u521b\u59cb\u4eba\u3002\u7136\u800c\uff0c\u5728seed\uff0c\u5355\u72ec\u521b\u59cb\u4eba\u7684\u6536\u5165\u8fdc\u8fdc\u4f4e\u4e8e\u6709\u4e24\u5230\u4e09\u540d\u8054\u5408\u521b\u59cb\u4eba\u7684\u516c\u53f8\u3002\n\u5728A\u7cfb\u5217\u4e2d\uff0c\u5355\u72ec\u521b\u59cb\u4eba\u7684\u5e73\u5747\u5de5\u8d44\u4e0e\u6709\u4e24\u540d\u8054\u5408\u521b\u59cb\u4eba\u7684\u516c\u53f8\u7684\u5de5\u8d44\u5dee\u522b\u4e0d\u5927\u3002\n\u516c\u5e73\u663e\u793a\u51fa\u4e00\u79cd\u66f4\u7b26\u5408\u903b\u8f91\u7684\u8d8b\u52bf\u3002solo\u521b\u59cb\u4eba\u5728pre seed\u548cseed\u6301\u6709\u6700\u9ad8\u91d1\u989d\u7684\u80a1\u6743\uff0c\u7136\u540e\u5728A\u7cfb\u5217\u4e2d\u5b9e\u73b0\u5e73\u8861\u3002\n\u867d\u7136\u5728\u56fe\u8868\u7684\u672b\u5c3e\uff0c\u516c\u53f8\u6536\u5165\u548c\u521b\u59cb\u4eba\u7684\u5e73\u5747\u5de5\u8d44\u4e4b\u95f4\u5b58\u5728\u7740\u660e\u663e\u7684\u76f8\u5173\u6027\uff0c\u4f46\u4e24\u8005\u4e4b\u95f4\u7684\u5dee\u5f02\u662f\u5de8\u5927\u7684\u3002\n\u5728\u9884\u9009\u548cA\u7cfb\u5217\u4e4b\u95f4\uff0c\u5f53\u51c6\u5907\u589e\u52a0\u6536\u5165\u65f6\uff0c\u5de5\u8d44\u7684\u6bd4\u4f8b\u589e\u957f\u5f88\u4f4e\uff08\u5c3d\u7ba1\u8fd9\u4e0d\u5305\u62ec\u5956\u91d1\u6216\u80a1\u606f\u652f\u4ed8\u7b49\u73b0\u91d1\u6fc0\u52b1\uff09\n\u7d22\u970d\u5c3c\u8ba4\u4e3a\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u8fd9\u662f\u521b\u59cb\u4eba\u7684\u201c\u65e9\u671f\u6536\u5165\u201d\u3002\n\u201c\u5728\u79cd\u5b50\u671f\u6216\u79cd\u5b50\u671f\u4e4b\u524d\uff0c\u4f60\u8fd8\u6ca1\u6709\u771f\u6b63\u8fbe\u5230\u8d44\u672c\u7684\u7a33\u5b9a\u72b6\u6001\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4f60\u5728\u91cd\u590d\u6027\u7684\u57fa\u7840\u4e0a\u8d5a\u7684\u94b1\u2014\u2014\u4f46\u524d12-18\u4e2a\u6708\u662f\u5982\u6b64\u4e0d\u7a33\u5b9a\u7684\u65f6\u671f\u3002\u201d\n\u5979\u8865\u5145\u8bf4\uff0c\u5728\u8fd9\u4e9b\u9636\u6bb5\uff0c\u521b\u59cb\u4eba\u201c\u70ed\u8877\u4e8e\u5b9e\u73b0\u6536\u5165\u7684\u6301\u7eed\u589e\u957f\u201d\uff0c\u5e76\u503e\u5411\u4e8e\u66f4\u52a0\u8c28\u614e\u5730\u5bf9\u5f85\u4ed6\u4eec\u7684\u6295\u8d44\u3002\"\n\u5458\u5de5\u7684\u5e73\u5747\u4eba\u6570\u4f3c\u4e4e\u5bf9\u521b\u59cb\u4eba\u7684\u5de5\u8d44\u4e5f\u6ca1\u6709\u592a\u5927\u5f71\u54cd\u3002\n\u56fe\u8868\u663e\u793a\uff0c\u867d\u7136\u5458\u5de5\u4eba\u6570\u8f83\u591a\u7684\u521b\u59cb\u4eba\u7684\u5de5\u8d44\u666e\u904d\u4e0a\u6da8\uff0c\u4f46\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u521b\u59cb\u4eba\u5728\u8bbe\u5b9a\u5de5\u8d44\u65f6\u53ef\u4ee5\u4f7f\u7528\u7684\u53ef\u9760\u6307\u6807\u3002\n\u7d22\u5965\u5c3c\u8bf4\uff0c\u521b\u59cb\u4eba\u548c\u5458\u5de5\u7684\u5de5\u8d44\u901a\u5e38\u4e0d\u76f8\u5173\u3002\u201c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u521b\u59cb\u4eba\u53ef\u80fd\u4f1a\u7ed9\u5458\u5de5\u53d1\u5de5\u8d44\uff0c\u4f46\u4e0d\u4f1a\u7ed9\u81ea\u5df1\u53d1\u5de5\u8d44\uff0c\u56e0\u4e3a\u4ed6\u4eec\u62e5\u6709\u80a1\u6743\u3002\u201d\n\u5df4\u8d6b\u66fc\u8bf4\uff0c\u8bbe\u5b9a\u521b\u59cb\u4eba\u85aa\u916c\u6807\u51c6\u5f88\u56f0\u96be\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u521b\u59cb\u4eba\u90fd\u6709\u4e0d\u540c\u7684\u9700\u6c42\u3002\n\u201c\u5982\u679c\u4f60\u662f\u4e00\u4e2a20\u591a\u5c81\u7684\u5e74\u8f7b\u4eba\uff0c\u521a\u521a\u4ece\u5927\u5b66\u6bd5\u4e1a\uff0c\u5f00\u4e86\u4e00\u5bb6\u516c\u53f8\uff0c\u5e76\u4e14\u4f4f\u5728\u4e00\u5957\u516c\u5bd3\u91cc\uff0c\u6536\u51652500\u6b27\u5143\uff0c\u90a3\u5c31\u884c\u4e86\u3002\u4f46\u5982\u679c\u4f6055\u5c81\uff0c\u6b63\u5728\u507f\u8fd8\u62b5\u62bc\u8d37\u6b3e\uff0c\u6709\u4e09\u4e2a\u5b69\u5b50\uff0c\u60c5\u51b5\u5c31\u5b8c\u5168\u4e0d\u540c\u4e86\u3002\u201d\nBachmann\u8bf4\uff1a\u201c\u5728\u521b\u4e1a\u9886\u57df\u8c08\u8bba\u5b89\u5168\u7684\u6536\u5165\u6c34\u5e73\u5386\u6765\u662f\u7981\u5fcc\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4f60\u6ca1\u6709\u52a8\u529b\u53bb\u5b9e\u73b0\u8fdc\u5927\u68a6\u60f3\uff0c\u521b\u5efa\u5c3d\u53ef\u80fd\u6700\u5927\u7684\u516c\u53f8\u3002\u201d\u3002\n\u201c\u5982\u679c\u6211\u4eec\u521b\u9020\u7684\u521b\u59cb\u4eba\u5728\u7ed3\u6784\u4e0a\u4e0d\u8212\u670d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6ca1\u6709\u521b\u9020\u4e00\u4e2a\u53ef\u6301\u7eed\u7684\u751f\u6001\u7cfb\u7edf\u3002\u201d\n\u201c\u4f46\u95ee\u9898\u662f\uff0c\u5982\u679c\u6211\u4eec\u521b\u9020\u7684\u521b\u4e1a\u8005\u5728\u7ed3\u6784\u4e0a\u4e0d\u8212\u670d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u4e0d\u80fd\u521b\u9020\u4e00\u4e2a\u53ef\u6301\u7eed\u7684\u751f\u6001\u7cfb\u7edf\u3002\u56e0\u4e3a\u8fd9\u6837\u4e00\u6765\uff0c\u4eba\u4eec\u5c31\u4e0d\u60f3\u6210\u4e3a\u91cd\u590d\u521b\u4e1a\u8005\u3002\u201d\n\u7136\u800c\uff0c\u5df4\u8d6b\u66fc\u5bf9Z\u4ee3\u521b\u59cb\u4eba\u62b1\u6709\u5e0c\u671b\u3002\u4ed6\u4e0e\u8bb8\u591a\u4e0d\u613f\u5728\u62e5\u6709\u826f\u597d\u3001\u7a33\u5b9a\u7684\u751f\u6d3b\u65b9\u5f0f\u4e0a\u59a5\u534f\u7684\u4eba\u8fdb\u884c\u4e86\u4ea4\u8c08\uff0c\u4ed6\u4eec\u6b63\u5728\u62b5\u5236\u98ce\u6295\u3002\n\u4ed6\u4eec\u8fdb\u6765\u8bf4\uff1a\u201c\u6211\u5f00\u8fd9\u5bb6\u516c\u53f8\u4e0d\u662f\u4e3a\u4e86\u53d1\u8d22\uff0c\u4f46\u5982\u679c\u4f60\u60f3\u8ba9\u6211\u997f\uff0c\u5c31\u9650\u5236\u6211\u7684\u5de5\u8d44\uff0c\u90a3\u6211\u4eec\u5c31\u5b8c\u4e86\u3002\u201d\u3002\u6211\u8ba4\u4e3a\u672a\u6765\u6295\u8d44\u8005\u548c\u521b\u59cb\u4eba\u4e4b\u95f4\u4f1a\u8d8a\u6765\u8d8a\u591a\u5730\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\"\nMiriam\u662fSifted\u7684\u5fb7\u56fd\u8bb0\u8005\u3002\u5979\u8fd8\u62a5\u9053\u4e86\u300a\u5de5\u4f5c\u7684\u672a\u6765\u300b\u3001\u5408\u8457\u8005\u7b5b\u9009\u4e86TED\u7684\u521b\u4e1a\u751f\u6d3b\u65f6\u4e8b\u901a\u8baf\uff0c\u4ee5\u53ca@mparts\u7684\u63a8\u6587_", "note_en": "When you\u2019re a startup founder, the question of how much to pay yourself is not always straightforward.\n  For Jeff Gardner, founder of personal finance tool Praxeo, figuring out what was \u201creasonable\u201d was nigh on impossible in the beginning.\n  \u201cEverything I searched for online seemed either out of date or wildly biassed towards the 20-something founder in San Francisco,\u201d explains Gardner, who is based in Lombardy, Italy.\n   \u201cI knew I\u2019d have to take a salary (I have three kids so living on ramen isn\u2019t really an option). In the end, I just asked a bunch of other founder friends and a few investors to get a ballpark idea, gave myself a healthy pay cut from my last full time role as an employee, and called it good.\u201d\n  Gardner isn\u2019t the only founder to have relied on advice from peers, plus a bit of winging it.\n  Andrey Vinitsky, founder of Graphy, a data visualisation platform, said the advice he received from other founders and investors about salaries was to \u201c pay yourself just enough to not think about money.\u201d\n   \u201cBut that \u2019s kind of counterintuitive,\u201d adds Vinitsky. \u201cI mean, how much is that? Like, what\u2019s the standard? It was so hard for us to figure it out.\u201d\n   To find out what could be the \u201cstandard\u201d compensation for founders, Seedcamp, the European seed-stage VC, collected data of the salaries of 185 founders from pre-seed to Series A companies. The respondents interviewed are based in the UK, Europe and North America.\n  \u201c We wanted to create an unbiased peer data set to help founders benchmark themselves against other founders so that when going to investors, like an employee would when negotiating a salary increase, they can empower their position,\u201d says Alex Lewis, talent manager at Seedcamp.\n   \u201cThis survey is also important for challenging old myths about what it is to be an entrepreneur. It\u2019s important for founders to know that if they can fundraise, they can also pay themselves a decent salary to live off while building their dreams, regardless of background or individual circumstances.\u201d\n        As can be expected, founder salaries increase as their company goes on to raise more funding.\n  Based on this data set, salaries from pre-seed to seed increase by 28%. From seed to Series A, they increase by 35%.\n  Reshma Sohoni, cofounder and partner of Seedcamp, says that the \u201csafest\u201d salaries she would expect to see as an investor would be under \u20ac100k at pre-seed, \u20ac100k or just over at seed, and then north of \u20ac150k at Series A. Anything above that would be a \u201cred flag.\u201d\n  However, the idea that salary increases with company stage isn\u2019t always the reality for some founders, says Julius Bachmann, an executive coach based in Berlin focused on entrepreneurs.\n  Many founders succumb to the age-old narrative \u2014 which is sometimes pushed by investors concerned about their bottom line \u2014 that when you start a company, you earn nothing and then eventually have a \u201cbig, big turnout.\u201d\n  \u201cFounders are too focused on ramen profitability \u2014 a term which basically means \u2018can this company be profitable if you only eat ramen, and basically not look after yourself?,\u201d says Bachmann. \u201cBut it\u2019s not the kind of mindset that is sustainable.\u201d\n     Regarding equity,\u00a0 a single founder\u2019s shares decrease as their company raises consecutive rounds of funding. At pre-seed, founder equity is approximately 38.65%. This decreases by 9% at seed to 27.18%, and then another 9% at Series A to 18.52% (founders tend to give away 20-25% of their equity per round.)\n  Sohoni says that while she would encourage early-stage founders to hold onto a good portion of equity as it can be \u201cincredibly lucrative\u201d down the line, she\u2019d \u201crather founders get a healthy salary, rather than equity release too early in the company\u2019s journey towards IPO.\u201d\n  \u201cIn the end, a decent salary allows you to focus on work, support your family, and take care of the fundamentals in your life,\u201d she adds.\n    Sohoni thinks this is relative to the cost of living. In London, for example, where much of the UK\u2019s startup activity is concentrated, the cost of living is very high so founders tend to pay themselves more.\n  A founder in cheaper countries like the Czech Republic or Moldova, however, might not need to pay themselves as much.\n  \u201cIt\u2019s also to do with the founder\u2019s entry point. I think some of the founders in the UK, for example, have a business background \u2014 perhaps in big banks where they\u2019re used to the compensation being higher \u2014 so they would pay themselves more.\u201d\n  Sohoni adds that the increasing presence of US VCs in Europe has had a positive impact on founder compensation.\n          Solo founders earn significantly more than founders with cofounders at pre-seed. Yet at seed, solo founders earn significantly less than companies with two or three cofounders.\n    At Series A, average solo founder salaries differ only slightly from salaries from companies with two cofounders.\n    Equity shows a more logical trend. The solo founder holds the highest amount of equity at pre-seed and seed, which then balances out at Series A.\n    While there is an evident correlation between company revenue and average founder salary at the end of the chart, the variance between this is huge.\n     Between pre-seed and Series A, the proportionate increase of salary when prepared to increase in revenue is low (though this doesn\u2019t factor in cash incentives such as bonuses or dividend payments.)\n  Sohoni thinks that this is largely to do with the fact that this is \u201cearly revenue\u201d for founders.\n  \u201cAt pre-seed or seed, you haven\u2019t really reached a steady state of capital yet. Over time, you can see the amount you\u2019re making on a recurring basis \u2014 but the first 12-18 months are such an unstable time period.\u201d\n  She adds that founders are, at these stages, \u201ckeen to deliver continued growth of revenue\u201d and tend to be more cautious with what they spend money on.\u201d\n    The average number of employees didn\u2019t seem to impact founder salaries too much either.\n  The graph shows that, while there is a general increase in salary for founders with more employees, it doesn\u2019t appear to be a reliable metric for founders to use when setting salaries.\n  Sohoni says that founder and employee salaries are often not correlated. \u201cIn some cases, founders might pay employees, but not pay themselves since they have equity.\u201d\n   Setting a standard for founder compensation is difficult, says Bachmann, as every founder will have different needs.\n  \u201cIf you\u2019re a 20-something that has recently graduated from university and has started a company \u2014 and is living in a flat share\u00a0 and earning \u20ac2,500, that works. But if you\u2019re 55 and you\u2019re paying down a mortgage and you have three kids, that\u2019s a very different situation.\u201d\n    \u201cTalking about a safe level of income in the startup scene has traditionally been taboo, because it alludes to you not being motivated to dream big and create the biggest company possible,\u201d says Bachmann.\n  \u201cIf we\u2019re creating founders who are structurally uncomfortable, then we\u2019re not creating a sustainable ecosystem.\u201d\n \u201cBut the thing is, if we\u2019re creating founders who are structurally uncomfortable, then we\u2019re not creating a sustainable ecosystem. Because then people don\u2019t want to be repeat founders.\u201d\n  Bachmann has hope, however, for Gen Z founders. He\u2019s spoken to many who are not willing to compromise on having a good, stable lifestyle and are pushing back against VCs.\n  \u201cThey\u2019re coming in and saying \u201cI\u2019m not starting this company to be rich, but if you\u2019re trying to limit my salary because you want me to be hungry, then we\u2019re done. And I think that\u2019s going to come up more and more between investors and founders in the future.\u201d\n  Miriam is Sifted\u2019s Germany correspondent. She also covers future of work, coauthors\u00a0  Sifted\u2019s Startup Life newsletter , and tweets from\u00a0 @mparts_", "posttime": "2022-03-02 22:20:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u59cb\u4eba,data", "title": "\u521b\u59cb\u4eba\u7ed9\u81ea\u5df1\u591a\u5c11\u94b1\uff1f\u6b27\u6d32\u6570\u636e\u96c6", "title_en": "How much do founders pay themselves? A European data set", "transed": 1, "url": "https://sifted.eu/articles/startup-founders-salary/", "via": "", "real_tags": ["\u521b\u59cb\u4eba", "data"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075164, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5929\uff0c\u6211\u90fd\u4f1a\u770b\u5230\u4eba\u4eec\u4f7f\u7528Javascript\u6765\u505a\u4e00\u4e9b\u65e7HTML\u9ed8\u8ba4\u652f\u6301\u7684\u4e8b\u60c5\uff1bCSS\u3002\u90a3&#39\uff1b\u8fd9\u901a\u5e38\u662f\u4e2a\u574f\u4e3b\u610f\u2014\u2014\u5b83&#39\uff1b\u5b83\u7684\u901f\u5ea6\u8981\u6162\u5f97\u591a\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u52a0\u8f7d\u540e\u5185\u5bb9\u5728\u9875\u9762\u4e0a\u8df3\u8f6c\uff0c\u5e76\u4e3a\u6d4f\u89c8\u5668\u7cdf\u7cd5\u7684\u7528\u6237\u7834\u574f\u7f51\u7ad9\u3002\u6211\u51b3\u5fc3\u505a\u5f97\u66f4\u597d\uff0c\u5728\u6ca1\u6709\u4efb\u4f55\u5ba2\u6237\u7aefJavascript\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u4e86\u8fd9\u4e2a\u767b\u5f55\u9875\u548c\u535a\u5ba2\u3002\n\u4e00\u8def\u4e0a\uff0c\u6211\u53d1\u73b0CSS\u80fd\u63d0\u4f9b\u591a\u5c11\u529f\u80fd\uff0c\u6211&#39\uff1bI\u2019\u6211\u5f88\u4e50\u610f\u4eca\u5929\u4e0e\u5927\u5bb6\u5206\u4eab\u5176\u4e2d\u7684\u4e00\u4e9b\u3002\u6211\u77e5\u9053\u5f88\u591a\u4eba\u90fd\u6709\u70b9\u5bb3\u6015CSS\uff0c\u5e76\u4e14\u8ba4\u4e3a\u5b83\u662f\u9ed1\u9b54\u6cd5\uff0c\u6240\u4ee5\u6211\u8d62\u4e86&#39\uff1b\u4e0d\u8981\u7ed9\u4f60\u770b\u592a\u590d\u6742\u7684\u4e1c\u897f\u3002\u76f8\u53cd\uff0c\u6211&#39\uff1b\u6211\u53ea\u60f3\u4e13\u6ce8\u4e8e\u7b80\u5355\u7684\u6280\u672f\u548c\u88ab\u5ffd\u7565\u7684\u7279\u6027\u2014\u2014\u8fd9\u4e9b\u4e1c\u897f\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u878d\u5165\u5230\u4f60\u81ea\u5df1\u7684\u7f51\u7ad9\u4e2d\u3002\n\u60a8\u53ef\u80fd\u77e5\u9053\u53ef\u4ee5\u4f7f\u7528CSS\u8bbe\u7f6eHTML\u5143\u7d20\u7684\u52a8\u753b\u3002\u7136\u800c\uff0c\u4f60\u77e5\u9053\u5417\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u4e3aSVG\u8bbe\u7f6e\u52a8\u753b\uff1f\u6211\u6700\u559c\u6b22\u7684\u6280\u672f\u4e4b\u4e00\u662f\u5c06stroke dasharray\u5c5e\u6027\u8bbe\u7f6e\u4e3a\u9ad8\u503c\uff0c\u7136\u540e\u8bbe\u7f6estroke dashoffset\u52a8\u753b\u3002\u8fd9\u5bfc\u81f4\u8def\u5f84\u4e3a&#39\uff1b\u7ed8\u5236&#39\uff1b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6216\u8005\u4e00\u6761\u7ebf\u6cbf\u7740\u4e00\u6761\u8def\u5f84\u79fb\u52a8\uff0c\u5c31\u50cf\u5728\u4e00\u4e9b\u70df\u82b1\u7684\u52a8\u753b\u4e2d\uff1a\nsvg{:20em\uff1b\uff1a100%\uff1b\uff1a\u6697\u7070\u8272\uff1b\uff1a2em\uff1b}svg:global\uff08*\uff09{\uff1a\u65e0\u9650\uff1b\uff1a\u7ebf\u6027\uff1b\uff1a10s\uff1b\u586b\u5145\uff1a\u900f\u660e\uff1b\u7b14\u5212\u7ebf\u6761\u5e3d\uff1a\u5706\u5f62\uff1b\u7b14\u5212\u7ebf\u6761\u8fde\u63a5\uff1a\u5706\u5f62\uff1b}\u3002\u98de\u884c{stroke:gold\uff1bstroke-:2\uff1bstroke-dasharray:10100\uff1bstroke-dashoffset:10\uff1b\uff1a\u98de\u884c\uff1b\uff1a\u653e\u677e\uff1b}@\u5173\u952e\u5e27\u98de\u884c{stroke dashoffset:10\uff1b}21%\uff0c{stroke dashoffset:-80\uff1b}\u3002\u7206\u70b8{\u586b\u5145\uff1a\u6a59\u8272\uff1b\uff1a0.8\uff1b\uff1a\u6a21\u7cca\uff081px\uff09\uff1b\uff1a\u4e2d\u5fc3\uff1b\uff1a\u7206\u70b8\uff1b}@\u5173\u952e\u5e27\u7206\u70b8{\uff0c19%{\uff1a\u6bd4\u4f8b\uff080\uff09\uff1b}20%{\uff1a\u6bd4\u4f8b\uff081.5\uff09\uff1b}22%{\uff1a\u6807\u5ea6\uff080.5\uff09\uff1b}23%{\uff1a\u6807\u5ea6\uff080.8\uff09\uff1b}25%{\uff1a\u6807\u5ea6\uff080.2\uff09\uff1b}26%{\uff1a\u6807\u5ea6\uff080.4\uff09\uff1b}35%\uff0c{:scale\uff080\uff09\uff1b}\u3002trail{stroke-:2\uff1bstroke dasharray:11051050\uff1b\uff1atrail\uff1b\uff1aease out\uff1b}@\u5173\u952e\u5e27\u8f68\u8ff9{\uff0c20%{stroke-:3\uff1bstroke dashoffset:80\uff1b}100%\uff0c{stroke-:0.5\uff1bstroke dashoffset:-150\uff1b}\n\u5173\u4e8e\u5982\u4f55\u4f7f\u7528CSS\u521b\u5efa\u52a8\u753b\u56fe\u8868\u7684\u53e6\u4e00\u4e2a\u66f4\u9ad8\u7ea7\u7684\u793a\u4f8b\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u767b\u5f55\u9875\uff01\u201c\u5982\u4f55\u5de5\u4f5c\u201d\u90e8\u5206\u5305\u542b\u8be6\u7ec6\u7684\u52a8\u753b\u3002\u5982\u679c\u4f60\u60f3\u4ece\u4e2d\u590d\u5236\uff0cLexoral\u5728GitHub\u4e0a\u662f\u5f00\u6e90\u7684\u3002\n\u5236\u4f5c\u8fd9\u6837\u7684\u52a8\u753b\u80af\u5b9a\u6bd4\u7b80\u5355\u7684\u89c6\u9891\u66f4\u590d\u6742\u3002\u5982\u679c\u4f60\u80fd\u8d85\u8d8a\u590d\u6742\u6027\uff0c\u4f60\u4f1a\u53d1\u73b0&#39\uff1b\u9009\u62e9\u52a8\u753bSVG\u6709\u5f88\u591a\u539f\u56e0\uff1a\n\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8eCSS\u52a8\u753b\u7684\u77e5\u8bc6\uff0c\u6211\u5efa\u8bae\u4f60\u4eceMDN\u6307\u5357\u5f00\u59cb\u3002\u8981\u521b\u5efaSVG\uff0c\u53ef\u4ee5\u4f7f\u7528\u50cfInkscape\u8fd9\u6837\u7684\u53ef\u89c6\u5316\u7f16\u8f91\u5668\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u50cf\u8fd9\u6837\u66f4\u9762\u5411\u5f00\u53d1\u4eba\u5458\u7684\u5de5\u5177\u3002\u901a\u5e38\u662f&#39\uff1b\u624b\u5de5\u7f16\u5199SVG\u6807\u8bb0\u66f4\u5bb9\u6613\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cMDN\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u53c2\u8003\u9875\u9762\u3002\n\u4f60\u60f3\u8981\u4e00\u4e2a\u4fa7\u8fb9\u5bfc\u822a\u680f\uff0c\u5f53\u5b83&#39\uff1b\u5b83\u4e0d\u5728\u4f7f\u7528\u4e2d\u3002\u628a\u811a\u672c\u6587\u4ef6\u6536\u8d77\u6765\uff0c\u6211\u4eec&#39\uff1b\u6211\u6709CSS\u3002\u6211\u4eec&#39\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u4f7f\u7528transform\u5c06\u5176\u79fb\u51fa\u5c4f\u5e55\uff0c\u7136\u540e\u5728\u7528\u6237\u5c06\u9f20\u6807\u60ac\u505c\u5728\u5143\u7d20\u4e0a\u65f6\u8986\u76d6\u5b83\u3002\u91cd\u8981\u7684\u662f\uff0c\u5f53\u60a8\u4f7f\u7528Tab\u952e\u9009\u62e9\u83dc\u5355\u4e2d\u7684\u4e00\u4e2a\u94fe\u63a5\u65f6\uff0c\u6211\u4eec\u4e5f\u5e94\u8be5\u663e\u793a\u83dc\u5355\u2014\u2014\u8fd9\u662f\u4fdd\u6301\u7f51\u7ad9\u53ef\u8bbf\u95ee\u6027\u7684\u91cd\u8981\u4e00\u6b65\uff1a\n\u9009\u98791\u9009\u98792\u9009\u98793\u9009\u98794\u2190 \u60ac\u505c\uff08\u6216\u4f7f\u7528\u6807\u7b7e\uff09\u3002\u5bb9\u5668{hidden\uff1b\uff1arelative\uff1b\uff1a15em\uff1b\uff1a25em\uff1b\uff1aauto\uff1b\uff1a0.2em\u7eaf\u9ed1\u8272\uff1b}{:flex\uff1b\uff1acolumn\uff1b\uff1aabsolute\uff1b\uff1a100%\uff1b\uff1a1em\uff1b\uff1a\u5929\u84dd\uff1b\uff1atranslateX\uff081em\uff09\uff1b\uff1a0.2s transform\uff1b}\uff1a\u60ac\u505c\uff0c\u7126\u70b9\u5728{translateX\uff08100%\uff09\uff1b}{pre\uff1b\uff1ablack\uff1b}{:2em\uff1b\uff1acenter\uff1b}\n\u8fd9\u4e2a\u4f8b\u5b50\u53ea\u662f\u5728CSS\u4e2d\u5de7\u5999\u5730\u4f7f\u7528\u4e86\u4f2a\u7c7b\u3002\u60a8\u53ef\u80fd\u8df3\u8fc7\u4e86\u8be5\u94fe\u63a5\uff0c\u4f46\u8bf7\u8fd4\u56de\u5e76\u5355\u51fb\u5b83\u3002\u5373\u4f7f\u4f60\u8ba4\u4e3a\u81ea\u5df1\u5bf9CSS\u4e86\u5982\u6307\u638c\uff0c\u4e5f\u53ef\u4ee5\u70b9\u51fb\u5b83\u5e76\u9605\u8bfb\u4e0b\u9762\u7684\u4f2a\u7c7b\u5217\u8868\u3002\u770b\u770b\u6709\u591a\u5c11\u3002\u60f3\u60f3\u4f60\u53ef\u4ee5\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002\n\u5b83&#39\uff1b\u5b83\u592a\u5bb9\u6613\u770b\u5230\uff1a\u60ac\u505c\u5e76\u5047\u8bbe\u5b83&#39\uff1b\u8fd9\u53ea\u662f\u4e3a\u8d85\u94fe\u63a5\u8bbe\u8ba1\u6837\u5f0f\u3002\u6211\u4eec&#39\uff1b\u6211\u521a\u521a\u770b\u5230\u5b83\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u4fa7\u8fb9\u680f\uff0c\u4f46\u5728\u8fd9\u91cc&#39\uff1b\u8fd8\u67099\u79cd\u4f7f\u7528\u65b9\u6cd5\uff1a\n\u5236\u4f5c&#39\uff1b\u62d2\u7edd\u997c\u5e72&#39\uff1b\u5f53\u4eba\u4eec\u8bd5\u56fe\u70b9\u51fb\u6309\u94ae\u65f6\uff0c\u6309\u94ae\u4f1a\u79fb\u5f00\n\u6700\u540e\u4e00\u4e2a\u662f\u4e2a\u7b11\u8bdd\u3002\u8bf7\u4e0d\u8981&#39\uff1b\u6211\u4e0d\u80fd\u90a3\u6837\u505a\u3002\u6211&#39\uff1b\u6211\u662f\u8ba4\u771f\u7684\u3002\u5982\u679c\u4f60\u90a3\u6837\u505a\uff0c\u6211\u62d2\u7edd\u627f\u62c5\u8d23\u4efb\u3002\u8bf7\n\u5176\u4e2d\u4e00\u4e9b\u60f3\u6cd5\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u6fc0\u6d3b\u60ac\u505c\u6548\u679c\u2014\u2014\u5982\u679c\u4f60\u6bcf\u6b21\u5728\u94fe\u63a5\u4e0a\u6ed1\u52a8\u9f20\u6807\u65f6\uff0c\u5f39\u51fa\u7a97\u53e3\u906e\u4f4f\u4e86\u534a\u4e2a\u5c4f\u5e55\uff0c\u90a3\u4e48\u4f7f\u7528\u7ef4\u57fa\u767e\u79d1\u662f\u76f8\u5f53\u56f0\u96be\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u4e0d\u5f97\u4e0d\u9000\u56de\u5230\u4f7f\u7528Javascript\uff0c\u4f46\u8bf7\u5148\u5c1d\u8bd5transition delay\u5c5e\u6027\u3002\nPSA\uff1a\u4f4d\u7f6e\uff1a\u7c98\u6027\uff1b\u73b0\u5728\u5df2\u7ecf\u5b58\u5728\u4e86\u3002\u8bf7\u505c\u6b62\u7528Javascript\u91cd\u65b0\u5b9e\u73b0\u5b83\u3002\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u6211&#39\uff1b\u6211\u8981\u8bf4\u7684\u662f\u8fd9\u6837\u4e00\u4e2a\u57fa\u672c\u7279\u5f81\u3002\u5982\u679c\u662f&#39\uff1b\u662f\u4f60\uff0c\u8df3\u5230\u4e0b\u4e00\u8282\u3002\n\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u4e0d\u77e5\u9053\u6211&#39\uff1b\u6211\u8bf4\u7684\u662f\uff0c\u800c\u4e14\u611f\u89c9\u5f88\u81ea\u6211\u610f\u8bc6\u3002\u5f53\u4f60\u60f3\u8981\u4e00\u4e2aHTML\u5143\u7d20\u5728\u6eda\u52a8\u9875\u9762\u65f6\u5411\u4e0b\u79fb\u52a8\u65f6\uff0c\u4f60\u53ef\u4ee5\u7528\u7b80\u5355\u7684CSS\u6765\u5b9e\u73b0\uff01\u4e0d\u4ec5\u5982\u6b64\uff0c\u5b83\u5b9e\u9645\u4e0a\u6bd4Javascript\u7248\u672c\u5de5\u4f5c\u5f97\u66f4\u597d\uff1a\n\u5411\u4e0b\u6eda\u52a8\u9875\u9762\uff0c\u89c2\u770b\u84dd\u8272\u65b9\u5757\ud83e\udc56     \u84dd\u8272\u65b9\u5757\u8ddf\u968f\u4f60\u6eda\u52a8\u8fc7\u53bb\uff0c\u5982\u679c\u4f60\u5411\u4e0a\u6eda\u52a8\uff0c\u5b83\u4f1a\u56de\u5230\u539f\u6765\u7684\u4f4d\u7f6e\u3002\u6eda\u52a8\u6761{25em\uff1b\uff1a10em\uff1b\uff1aauto\uff1b\uff1a1em\uff1b\uff1a0.2em\u7eaf\u9ed1\u8272\uff1b\uff1aauto\uff1b}{:5em\uff1b}\u3002\u6b63\u65b9\u5f62{5em\uff1b\uff1a5em\uff1b\uff1alightskyblue\uff1b\uff1aauto\uff1b\uff1asticky\uff1b\uff1a2em\uff1b}\n\u8bf7\u6ce8\u610f\uff0c\u5f53\u4f60\u5411\u4e0b\u6eda\u52a8\u65f6\uff0c\u84dd\u8272\u65b9\u5757\u59cb\u7ec8\u5904\u4e8e\u5b8c\u5168\u76f8\u540c\u7684\u4f4d\u7f6e\u3002\u5b83&#39\uff1b\u5f53\u6709\u4eba\u8bd5\u56feDIY\u4ed6\u4eec\u7684\u7c98\u6027\u5b9a\u4f4d\u65f6\uff0c\u5f88\u5bb9\u6613\u5224\u65ad\uff0c\u56e0\u4e3a\u6eda\u52a8\u65f6\u5143\u7d20\u603b\u662f\u843d\u540e\u4e00\u5e27\u3002\u5411\u4e0b\u6eda\u52a8\u7684\u901f\u5ea6\u8d8a\u5feb\uff0c\u5c4f\u5e55\u5c31\u4f1a\u8d8a\u9ad8\u3002\u7136\u540e\uff0c\u5f53\u4f60\u505c\u6b62\u6eda\u52a8\u65f6\uff0c\u5b83\u4f1a\u8df3\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\n\u7c98\u6027\u5b9a\u4f4d\u662f\u76f8\u5bf9\u5b9a\u4f4d\u548c\u56fa\u5b9a\u5b9a\u4f4d\u7684\u7ed3\u5408\u3002\u5b83&#39\uff1b\u5b83\u4e3b\u8981\u7528\u4e8e\u5bfc\u822a\u83dc\u5355\uff0c\u5f53\u4f60\u5411\u4e0b\u6eda\u52a8\u9875\u9762\u65f6\uff0c\u5b83\u4f1a\u8ddf\u968f\u4f60\u3002\u5b83&#39\uff1b\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u5927\u7684\u6a2a\u5411\u5c4f\u5e55\u4e0a\u89c2\u770b\uff0c\u5b83\u4e5f\u4f1a\u51fa\u73b0\u5728\u8fd9\u4e2a\u9875\u9762\u4e0a\u3002\u53f3\u8fb9\u7684\u9762\u677f\u4e0a\u6709\u6211\u7684\u8138\uff0c\u4f7f\u7528\u4e86\u7c98\u6027\u5b9a\u4f4d\uff0c\u610f\u601d\u662f\u6211&#39\uff1b\u5f53\u4f60\u8bfb\u6211\u7684\u535a\u5ba2\u65f6\uff0c\u6211\u603b\u662f\u76ef\u7740\u4f60\u770b\u3002\n\u8981\u4f7f\u7528\u7c98\u6027\u5b9a\u4f4d\uff0c\u9996\u5148\u9700\u8981\u8bbe\u7f6eposition:sticky\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e9b\uff08\u901a\u5e38\u53ea\u6709\u4e00\u4e2a\uff09\u9876\u90e8\u3001\u53f3\u4fa7\u3001\u5e95\u90e8\u548c\u5de6\u4fa7\u7684\u8ddd\u79bb\u3002\u5f53\u5143\u7d20\u5728\u5c4f\u5e55\u4e0a\u6eda\u52a8\u8d85\u8fc7\u8be5\u4f4d\u7f6e\u65f6\uff0c\u5b83\u4f1a\u5207\u6362\u5230\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u5e76\u5f00\u59cb\u8ddf\u968f\u60a8\u3002\u5982\u679c\u4f60\u5411\u540e\u6eda\u52a8\uff0c\u5b83\u4f1a\u56de\u5230\u539f\u6765\u7684\u4f4d\u7f6e\u5e76\u4fdd\u6301\u4e0d\u53d8\u3002\u4ed6\u4eec\u6ca1\u6709&#39\uff1b\u7136\u800c\uff0c\u6211\u4e0d\u4f1a\u6c38\u8fdc\u8ddf\u968f\u4f60\u2014\u2014\u4e00\u4e2a\u7c98\u6027\u5143\u7d20\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u5b83\u6240\u5305\u542b\u7684\u5143\u7d20\u3002\n\u5b83&#39\uff1b\u8fd9\u6709\u70b9\u96be\u7406\u89e3\uff0c\u4f46\u6211&#39\uff1bd\u5efa\u8bae\u901a\u8bfb\u6709\u5173position\u5c5e\u6027\u7684MDN\u6587\u7ae0\u3002\u6211\u4e00\u76f4\u5728\u4f7f\u7528position\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u5b83&#39\uff1bIt\u2019\u5145\u5206\u4e86\u89e3\u6240\u6709\u53ef\u80fd\u7684\u4ef7\u503c\u89c2\u53ca\u5176\u4f5c\u7528\u662f\u503c\u5f97\u7684\u3002\n\u624b\u98ce\u7434\u83dc\u5355\u901a\u5e38\u7528\u4e8e\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u6807\u9898\u5217\u8868\uff0c\u6bcf\u4e2a\u6807\u9898\u90fd\u53ef\u4ee5\u5c55\u5f00\u4ee5\u663e\u793a\u5176\u4e2d\u7684\u5185\u5bb9\u3002\u8fd9\u662f\u6211\u544a\u8bc9\u4f60HTML+CSS\u7684\u4e00\u4e2a\u57fa\u672c\u7279\u6027\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4f46\u662f&lt\uff1b\u7ec6\u8282&gt\uff1b\u5b58\u5728\uff1a\n\u56e0\u4e3a\u5b83\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u53ef\u4ee5\u6269\u5f20\u548c\u6536\u7f29\uff0c\u5c31\u50cf\u624b\u98ce\u7434\u4e00\u6837\u3002\u5982\u679c\u4f60\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u624b\u98ce\u7434\u662f\u4ec0\u4e48\uff0c\u60f3\u8c61\u4e00\u4e0b\u4e00\u53ea\u53ef\u7231\u7684\u6bdb\u8338\u8338\u7684\u732b\u3002\u4f60\u8fd8\u662f\u8d62\u4e86&#39\uff1b\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\uff0c\u4f46\u81f3\u5c11\u4f60&#39\uff1b\u6211\u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u800c\u611f\u89c9\u66f4\u597d\u3002\n\u4e0d\uff0c\u9664\u975e\u4f60&#39\uff1b\u6211\u4eec\u6b63\u5728\u8bbe\u8ba1MySpace\u4e2a\u4eba\u8d44\u6599\u3002\u8fd9\u4e2a&lt\uff1b\u7ec6\u8282&gt\uff1b\u5143\u7d20\u5f88\u9177\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u6211&#39\uff1b\u6211\u5728\u4e0b\u9762\u7684\u9875\u9762\u4e0a\u4f7f\u7528\u5b83\uff0c\u663e\u793a\u6bcf\u4e2a\u793a\u4f8b\u7684\u4ee3\u7801\uff01\n&gt\uff1b\u5143\u7d20\u5f88\u9177\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u6211&#39\uff1b\u6211\u5728\u7528\n&gt\uff1b\u5143\u7d20\u5f88\u9177\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u6211&#39\uff1b\u6211\u5728\u7528\n&lt\uff1bdiv class=&#34\uff1b\u96c6\u88c5\u7bb1&#34&gt\uff1b\u5e38\u89c1\u95ee\u9898\u89e3\u7b54\u4e3a\u4ec0\u4e48\u5b83\u88ab\u79f0\u4e3a\u624b\u98ce\u7434\u83dc\u5355\uff1f\u56e0\u4e3a\u5b83\u7684\u6bcf\u4e00\u90e8\u5206\u90fd\u53ef\u4ee5\u6269\u5f20\u548c\u6536\u7f29\uff0c\u5c31\u50cf\u624b\u98ce\u7434\u4e00\u6837\u3002\u5982\u679c\u4f60\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u624b\u98ce\u7434\u662f\u4ec0\u4e48\uff0c\u60f3\u8c61\u4e00\u4e0b\u4e00\u53ea\u53ef\u7231\u7684\u6bdb\u8338\u8338\u7684\u732b\u3002\u4f60\u8fd8\u662f\u8d62\u4e86&#39\uff1b\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\uff0c\u4f46\u81f3\u5c11\u4f60&#39\uff1b\u6211\u4f1a\u56e0\u4e3a\u4e0d\u77e5\u9053\u800c\u611f\u89c9\u66f4\u597d\u3002\u55ef\uff1f\u5475\u5475\u3002\u5982\u679c\u6211\u7528\u624b\u98ce\u7434\u83dc\u5355\u4f1a\u8ba9\u6211\u9177\u5417\uff1f\u4e0d\uff0c\u9664\u975e\u4f60&#39\uff1b\u6211\u4eec\u6b63\u5728\u8bbe\u8ba1MySpace\u4e2a\u4eba\u8d44\u6599\u3002{&#34\uff1b&#34\uff1b}&lt/\u4ee3\u7801&gt\uff1b\u5143\u7d20\u5f88\u9177\uff0c\u4f60\u53ef\u4ee5\u7528\u5b83\u505a\u5f88\u591a\u4e8b\u60c5\u3002\u6211&#39\uff1b\u6211\u5728\u4e0b\u9762\u7684\u9875\u9762\u4e0a\u4f7f\u7528\u5b83\uff0c\u663e\u793a\u6bcf\u4e2a\u793a\u4f8b\u7684\u4ee3\u7801\u3002\u5bb9\u5668{1em 2em\uff1b\uff1a0.2em\u7eaf\u9ed1\u8272\uff1b\uff1a2em\uff1b}{:0.1em\u7eaf\u9ed1\u8272\uff1b\uff1a1em\uff1b\uff1a1em\uff1b\uff1a1em\uff1b\uff1a1em\uff1b}{:1.2em\uff1b\uff1a\u6307\u9488\uff1b}\n\u5b83&#39\uff1b\u4f7f\u7528\u624b\u98ce\u7434\u83dc\u5355\u5e76\u4e0d\u603b\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u56e0\u4e3a\u5b83\u4eec\u6709\u5f88\u591a\u53ef\u7528\u6027\u95ee\u9898\u3002\u7136\u800c\uff0c&lt\uff1b\u7ec6\u8282&gt\uff1b\u5f53\u4f60\u60f3\u5bf9\u7528\u6237\u9690\u85cf\u4e00\u4e9b\u5185\u5bb9\u65f6\uff0c\u5143\u7d20\u975e\u5e38\u6709\u7528\uff0c\u5c24\u5176\u662f\u5f53\u5b83&#39\uff1b\u5b83\u5f88\u957f\uff0c\u5927\u591a\u6570\u7528\u6237\u90fd\u8d62\u4e86&#39\uff1b\u6211\u4e0d\u60f3\u770b\u3002\u4f8b\u5982\uff0c\u6211\u4f7f\u7528\u4e86\u4e0a\u9762\u7684\u4e00\u4e2a\u6765\u9690\u85cf\u793a\u4f8b\u7684\u6e90\u4ee3\u7801\u3002\n\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u60a8\u4e0d\u786e\u5b9a\u662f\u5426\u8981\u4f7f\u7528\u8be6\u7ec6\u4fe1\u606f\u5143\u7d20\uff0c\u8bf7\u5c1d\u8bd5\u9605\u8bfbNHS\u670d\u52a1\u624b\u518c\u3002\u4ed6\u4eec&#39\uff1b\u6211\u505a\u4e86\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u591a\u7684\u53ef\u7528\u6027\u6d4b\u8bd5\uff0c\u5e76\u4e14\u6709\u4e00\u4e9b\u5408\u9002\u7684\u6307\u5bfc\u539f\u5219\u6765\u8bf4\u660e\u4f55\u65f6\u8fdb\u884c\u53ef\u7528\u6027\u6d4b\u8bd5\uff1b\u5b83\u9002\u5408\u4f7f\u7528\u3002\n\u7eafCSS\u65b9\u6cd5\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\uff0c\u5728\u6ca1\u6709Javascript\u7684\u60c5\u51b5\u4e0b\uff0c\u7ec6\u8282\u5f88\u96be\u52a8\u753b\u5316\u3002\u5b83&#39\uff1b\u53ea\u8981\u77e5\u9053\u76d2\u5b50\u6253\u5f00\u65f6\u7684\u9ad8\u5ea6\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u201ctransition\u201d\u8bbe\u7f6e\u76d2\u5b50\u6253\u5f00\u7684\u52a8\u753b\u3002\u76ee\u524d\uff0c\u6d4f\u89c8\u5668\u6ca1\u6709&#39\uff1bt\u672c\u673a\u4e0d\u652f\u6301\u4e3a\u5173\u95ed\u7684\u5143\u7d20\u8bbe\u7f6e\u52a8\u753b\uff0c\u56e0\u6b64&#39\uff1b\u6211\u4eec\u5fc5\u987b\u6062\u590d\u5230Javascript\u6216\u81ea\u5b9a\u4e49\u7684\u8f93\u5165/\u8f93\u51fa\u52a8\u753b\u3002\n\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u7f51\u7ad9\u4e0a\u4f7f\u7528\u5b8c\u5168\u529f\u80fd\u6027\u7684\u6697\u6a21\u5f0f\uff0c\u800c\u4e0d\u9700\u8981\u4efb\u4f55Javascript\u3001cookie\u6216\u5355\u72ec\u7684URL\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u6d4f\u89c8\u5668\u4e2d\u3002\u79d8\u5bc6\u6210\u5206\u662f\uff1achecked\u2014\u2014\u4e00\u4e2a\u53ea\u5339\u914d\u9009\u4e2d\u590d\u9009\u6846\u7684CSS\u9009\u62e9\u5668\u3002\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1a\n\u9ed1\u6697\u6a21\u5f0f\u8fd9\u662f\u6211\u7684\u7f51\u7ad9\uff0c\u6211\u628a\u6211\u7684\u6587\u5b57\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u3002\u6211\u73b0\u5728\u5df2\u7ecf\u7528\u5b8c\u4e86\u6211\u6240\u6709\u7684\u6587\u672c\u9884\u7b97\uff0c\u4e00\u4e2a\u4e5f\u6ca1\u6709\u4e86\uff0c\u518d\u89c1\u3002\n\u8fd9\u662f\u6211\u7684\u7f51\u7ad9\uff0c\u6211\u628a\u6211\u7684\u6587\u5b57\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u3002\u6211\u73b0\u5728\u6709\n\u8fd9\u662f\u6211\u7684\u7f51\u7ad9\uff0c\u6211\u628a\u6211\u7684\u6587\u5b57\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u3002\u6211\u73b0\u5728\u6709\n\u9ed1\u6697\u6a21\u5f0f\u6211\u7684\u7f51\u7ad9\u8fd9\u662f\u4e00\u4e9b\u6587\u5b57\u8fd9\u662f\u6211\u7684\u7f51\u7ad9\uff0c\u6211\u628a\u6211\u7684\u6587\u5b57\u3002\u6211\u5e0c\u671b\u4f60\u559c\u6b22\u3002\u6211\u73b0\u5728\u5df2\u7ecf\u7528\u5b8c\u4e86\u6211\u6240\u6709\u7684\u6587\u672c\u9884\u7b97\uff0c\u4e00\u4e2a\u4e5f\u6ca1\u6709\u4e86\uff0c\u518d\u89c1\u3002\u5bb9\u5668{\uff1a\u76f8\u5bf9\uff1b\uff1a0.2em\u7eaf\u9ed1\u8272\uff1b\uff1a25em\uff1b\uff1a\u81ea\u52a8\uff1b}\u3002\u4e3b\u4f53{:1em\uff1b}\uff0c{\uff1a\u7edd\u5bf9\uff1b\uff1a0.5em\uff1b\uff1a0.5em\uff1b\uff1a2em\uff1b}{:1.2em\uff1b}\u3002\u6807\u9898{:0\uff1b}#exampleCheckbox:checked{whitesmoke\uff1b}#exampleCheckbox:checked~{:whitesmoke\uff1b}#exampleCheckbox:checked~\u3002\u8eab\u4f53{\uff1a\u6df1\u7070\u8272\uff1b\uff1a\u767d\u70df\uff1b}\n\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u66f4\u901a\u7528\u7684\u6280\u672f\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u8ba9\u7528\u6237\u5728\u4e00\u4e2a\u5143\u7d20\u7684\u4e24\u4e2a\u4e0d\u540c\u7248\u672c\u6216\u4e24\u79cd\u4e0d\u540c\u6837\u5f0f\u4e4b\u95f4\u5207\u6362\u3002\u4f8b\u5982\uff0c\u6211\u5728\u4e0a\u4e00\u7bc7\u535a\u6587\u4e2d\u4f7f\u7528\u5b83\u5728\u4e0d\u540c\u7248\u672c\u7684\u4ee3\u7801\u7247\u6bb5\u4e4b\u95f4\u5207\u6362\u3002\n\u8bc0\u7a8d\u662f\u5c06\uff1achecked\u4f2a\u7c7b\u4e0e~sibling combinator\u7ec4\u5408\u3002\u50cfp~A\u8fd9\u6837\u7684CSS\u89c4\u5219\u9002\u7528\u4e8e\u6240\u6709&lt\uff1ba&gt\uff1b\u5177\u6709&lt\uff1bp&gt\uff1b\u5143\u7d20\u5728HTML\u6587\u6863\u4e2d\u4f4d\u4e8e\u5b83\u4eec\u4e4b\u524d\u3002\n\u5b9e\u9645\u4f7f\u7528\u7684\u89c4\u5219\u662f#exampleCheckbox:checked~\u3002body-\u4ec5\u5f53\u9009\u4e2d\u590d\u9009\u6846\u65f6\uff0c\u624d\u4f1a\u5c06\u67d0\u4e9b\u6837\u5f0f\u5e94\u7528\u4e8ebody\u7c7b\u3002\u7531\u4e8e\u53d7\u5f71\u54cd\u7684\u5143\u7d20\u5fc5\u987b\u662f\u540e\u7eed\u7684\u5144\u5f1f\uff0c\u6211\u4eec\u53ef\u4ee5&#39\uff1bt\u5728body\u5143\u7d20\u4e2d\u653e\u7f6e\u6697\u6a21\u5f0f\u590d\u9009\u6846\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u5176\u653e\u5728body\u5143\u7d20\u4e4b\u524d\uff0c\u7136\u540e\u4f7f\u7528position:absolute\u5c06\u5176\u653e\u5728\u5185\u90e8\u3002\n\u8fd9\u4e0d\u662f&#39\uff1b\u8fd9\u4e5f\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u73a9\u5177\u7684\u4f8b\u5b50\u3002\u6d4f\u89c8\u5668\u5c06\u81ea\u52a8\u8bb0\u4f4f\u590d\u9009\u6846\u72b6\u6001\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u4fdd\u5b58\u7528\u6237&#39\uff1bs\u5bf9\u514d\u8d39\u7684\u504f\u597d-\u5c1d\u8bd5\u52fe\u9009\u6846\u5e76\u5237\u65b0\u6b64\u9875\u9762\uff01\u4f7f\u7528\u590d\u9009\u6846\u8fdb\u884c\u6837\u5f0f\u8bbe\u7f6e\u975e\u5e38\u6709\u7528\uff0c\u800c\u4e14\u6bd4\u5b9a\u5236\u7684Javascript\u89e3\u51b3\u65b9\u6848\u66f4\u6613\u4e8e\u8bbf\u95ee\u3002\n\u5b83&#39\uff1b\u5b66\u4e60HTML/CSS\u7684\u6765\u9f99\u53bb\u8109\u8ba9\u4eba\u671b\u800c\u751f\u754f\u3002\u5f53\u4f60\u786e\u5207\u5730\u77e5\u9053\u81ea\u5df1\u60f3\u8981\u5b83\u505a\u4ec0\u4e48\uff0c\u4f46\u5374\u80fd&#39\uff1b\u6211\u4e0d\u77e5\u9053\u600e\u4e48\u544a\u8bc9\u7535\u8111\u3002\u7136\u800c\uff0c\u5b83&#39\uff1b\u73b0\u5728\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5bb9\u6613\u8ba9\u7f51\u7ad9\u770b\u8d77\u6765\u5f88\u68d2\u3002CSS\u5df2\u7ecf\u6709\u4e8620\u5e74\u7684\u53d1\u5c55\u5386\u53f2\uff0c\u5e76\u4e14\u5145\u6ee1\u4e86\u8ba9\u751f\u6d3b\u66f4\u8f7b\u677e\u7684\u65b0\u529f\u80fd\u3002\u5982\u679c\u4f60\u60f3\u8fdb\u4e00\u6b65\u9605\u8bfb\uff0c\u8bf7\u67e5\u770b\uff1a\n\u6211&#39\uff1b\u6211\u63d0\u5230\u7684\u8fd9\u4e9b\u6280\u672f\u90fd\u662f\u76f8\u5f53\u65b0\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u4f60\u9700\u8981\u652f\u6301Internet Explorer\uff0c\u8fd9\u4e9b\u6280\u672f\u53ef\u80fd\u4e0d\u662f&#39\uff1b\u8fd9\u4e0d\u662f\u7ed9\u4f60\u7684\u3002\u4f8b\u5982\uff0cposition:sticky and:focus inthearen&#39\uff1bI&#39\uff1b\u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u6d4f\u89c8\u5668\u51e0\u4e4e100%\u652f\u6301\uff01\n\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u60f3\u6211&#39\uff1b\u6211\u5df2\u7ecf\u5c55\u793a\u4e86\u5f53\u4f60\u771f\u6b63\u4f38\u5c55\u81ea\u5df1\u65f6\uff0cCSS\u7684\u5f3a\u5927\u529f\u80fd\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u91cd\u70b9\u7edd\u4e0d\u662f\u8ba9\u4f60\u53ea\u590d\u5236\u6211\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u968f\u610f\u8fd9\u4e48\u505a\u3002\u76f8\u53cd\uff0c\u5b83&#39\uff1b\u8ba9\u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e00\u4e9b\u5173\u4e8e\u8be5\u8bed\u8a00\u66f4\u6709\u7528\u90e8\u5206\u7684\u6307\u5bfc\uff0c\u5e76\u9f13\u52b1\u60a8\u63a2\u7d22web\u5f00\u53d1\u7684\u66f4\u57fa\u672c\u90e8\u5206\u3002", "note_en": "Every day, I see people use Javascript to do things that are supported by default in good old HTML &amp; CSS. That&#39;s usually a bad idea - it&#39;s much slower, can cause content to jump around the page after loading,  and breaks your site for people with crappy browsers. I was determined to do better, and built this landing page and blog without  any client-side Javascript.\n  Along the way, I discovered just how much CSS has to offer, and I&#39;d love to share some of that with you today. I know a lot of people are a bit scared of CSS, and see it as black magic, so I won&#39;t be showing you anything too complicated. Instead, I&#39;m just going to focus on simple techniques and overlooked features - things you could easily incorporate into your own sites.\n    You probably know that you can animate HTML elements with CSS. However, did you know that you can  also animate SVGs, in exactly the same way? One of my favourite techniques is setting the  stroke-dasharray property to a high value, then animating  stroke-dashoffset. That results in the path being &#39;drawn&#39; over time, or a line moving along a path, like in this animation of some fireworks:\n  svg {  :  20em;  :  100%;  : darkslategrey;  :  2em; } svg : global(*) {  : infinite;  : linear;  :  10s; fill: transparent; stroke-linecap: round; stroke-linejoin: round; }  .flight { stroke: gold; stroke- :  2; stroke-dasharray:  10  100; stroke-dashoffset:  10;  : flight;  : ease-in; }  @keyframes flight {   { stroke-dashoffset:  10; }  21%,   { stroke-dashoffset: - 80; } }  .explosion { fill: orangered;  :  0.8;  :  blur( 1px);  : center;  : explosion; }  @keyframes explosion {  ,  19% {  :  scale( 0); }  20% {  :  scale( 1.5); }  22% {  :  scale( 0.5); }  23% {  :  scale( 0.8); }  25% {  :  scale( 0.2); }  26% {  :  scale( 0.4); }  35%,   {  :  scale( 0); } }  .trail { stroke- :  2; stroke-dasharray:  1  10  5  10  10  5  30  150;  : trail;  : ease-out; }  @keyframes trail {  ,  20% { stroke- :  3; stroke-dashoffset:  80; }  100%,   { stroke- :  0.5; stroke-dashoffset: - 150; } }\n  For another, more advanced example of how you can create animated diagrams with CSS, check out our landing page! The  How it Works section contains a detailed animation. If you want to copy from it, Lexoral is  open-source on GitHub.\n  Creating an animation like that is certainly more complicated than a simple video. If you can look past the complexity, there&#39;s plenty of reasons to prefer an animated SVG:\n    If you want to learn more about CSS animations, I can recommend starting with  the MDN guide. To create the SVGs, either use a visual editor like  Inkscape, or a more dev-oriented tool like  this one. Often it&#39;s easier to just write the SVG markup by hand, in which case  MDN has a great reference page.\n    You want a side navigation bar that hides when it&#39;s not in use. Put away that script file, we&#39;ve got CSS for this. We&#39;ll use  transform to move it off-screen by default, then override that when the user hovers over the element. Importantly, we should also show the menu when you use the  Tab key to select one of the links in the menu - an important step towards keeping our site accessible:\n  Option 1   Option 2   Option 3   Option 4     \u2190 Hover   (or use tab)      .container {  : hidden;  : relative;  :  15em;  :  25em;  : auto;  :  0.2em solid black; }   {  : flex;  : column;  : absolute;  :  100%;  :  1em;  : skyblue;  :  translateX( 1em);  :  0.2s transform; }   :hover,   :focus-within {  :  translateX( 100%); }   {  : pre;  : black; }   {  :  2em;  : center; }\n  This example is just clever use of  pseudo-classes in CSS. You probably skipped that link, but go back and click it. Even if you think you know everything about CSS, click it and read down that list pseudo-classes. Look how many there are. Think about how you could use them.\n  It&#39;s too easy to see  :hover and assume it&#39;s just for styling hyperlinks. We&#39;ve just seen it used to create a sidebar, but here&#39;s 9 more ways you could use it:\n  Making the &#39;Reject Cookies&#39; button move out of the way when people try to click it\n  That last one was a joke. Please don&#39;t do that. I&#39;m serious. I refuse to take responsibility if you do that. Please.\n  A few of those ideas would need a delay before the hover effect activated - it would be quite hard to use Wikipedia if a popup obscured half the screen every time you moused over a link. You might have to fall back to using Javascript in that case, but try the  transition-delay property first.\n    PSA:  position: sticky; exists now. Please stop reimplementing it with Javascript. Some of you are confused why I&#39;m mentioning such a basic feature. If that&#39;s you, skip to the next section.\n  Some of you have no idea what I&#39;m talking about, and are feeling pretty self-concious. When you want an HTML element to move down the page as you scroll, you can do that with plain CSS! Not only that, it actually works way better than a Javascript version:\n  Scroll down the page   And watch the blue square \ud83e\udc56     The blue square follows you   As you scroll past it   And if you scroll back up   It goes back where it was      .scroller {  :  25em;  :  10em;  : auto;  :  1em;  :  0.2em solid black;  : auto; }   {  :  5em; }  .square {  :  5em;  :  5em;  : lightskyblue;  : auto;  : sticky;  :  2em; }\n  Notice how when you scroll down, the blue square is always in exactly the same position. It&#39;s easy to tell when someone has tried to DIY their sticky positioning, because the element always lags one frame behind when scrolling. The faster you scroll down, the higher up the screen it would be. Then, when you stop scrolling, it jumps to the correct position.\n  Sticky positioning is a combination of  relative and  fixed positioning. It&#39;s mostly used for navigation menus that should follow you as you scroll down the page. It&#39;s used on this page too, if you are viewing it on a large landscape screen. The panel to the right with my face on it uses  sticky positioning, meaning I&#39;m always staring at you as you read my blogs.\n  To use sticky positioning, first you need to set  position: sticky and provide distances for some (usually only one) of  top,  right,  bottom, and  left. When the element is scrolled past that position on the screen, it swaps to  fixed positioning, and starts following you. If you scroll back, it returns to its original position and stays there. They don&#39;t follow you forever though - a sticky element will never move outside of its containing element.\n  It&#39;s a little difficult to wrap your head around, but I&#39;d recommend reading through the  MDN article on the position attribute. I use  position all the time, so I think it&#39;s worth having a good understanding of all the possible values and what they do.\n    Accordion Menus are commonly used for FAQs, where you have a list of headers and each one can be expanded to show the content inside. This is another case of me telling you about a fairly basic feature of HTML+CSS, but  &lt;details&gt; exists:\n  Because each part of it can expand and contract, like in an accordion. If you don&#39;t know what an accordion is, just imagine a cute fluffy cat. You still won&#39;t know what it is, but at least you&#39;ll feel better about not knowing.\n              No, not unless you&#39;re designing a MySpace profile. The  &lt;details&gt; element is cool though, and you can use that for a lot of things. I&#39;m using it on this page right below here, to show the code for each example!\n     &gt; element is cool though, and you can use that for a lot of things. I&#39;m using\n                                                                                                                                                                                                                                                               &gt; element is cool though, and you can use that for a lot of things. I&#39;m using\n                                                                                                                         &lt;div  class= &#34;container&#34;&gt;   FAQ      Why is it called an accordion menu?      Because each part of it can expand and contract, like in an accordion. If you don&#39;t know what an accordion is, just imagine a cute fluffy cat. You still won&#39;t know what it is, but at least you&#39;ll feel better about not knowing.         Huh?     Huh.        If I use an accordion menu will it make me cool?      No, not unless you&#39;re designing a MySpace profile. The  {&#34; &#34;}&lt;/code &gt; element is cool though, and you can use that for a lot of things. I&#39;m using it on this page right below here, to show the code for each example!         .container {  :  1em  2em;  :  0.2em solid black;  :  2em; }   {  :  0.1em solid black;  :  1em;  :  1em;  :  1em; }   {  :  1.2em;  : pointer; }\n  It&#39;s  not always a good idea to use accordion menus due to them having a lot of usability issues. However, the  &lt;details&gt; element is super useful when you want to hide some content from the user, especially if it&#39;s very long and most users won&#39;t want to read it. For example, I used one just above here to hide the source code for the example.\n  If you&#39;re not sure whether to use a details element, try reading the  NHS service manual for it. They&#39;ve done way more usability testing than you ever will, and have some decent guidelines for when it&#39;s appropriate to use.\n  One downside of a pure-CSS approach here is that  details is tricky to animate without Javascript. It&#39;s possible to animate the box opening using  transition, as long as you know the height of the box when open. Currently, browsers don&#39;t natively support animating the element being closed, so you&#39;ll have to restort to Javascript or  a custom in/out animation.\n    You can have an entirely functional dark mode on your website without any Javascript, cookies, or separate URLs - all in the browser. The secret ingredient is  :checked - a CSS selector that only matches  checked checkboxes. You might be able to see where this is going:\n  Dark Mode  This is my website where I put my text. I hope you like it. I have now used up my entire text budget and I have none left, goodbye.\n     This is my website where I put my text. I hope you like it. I have now\n                                                                                                                                                                                                                                                                                        This is my website where I put my text. I hope you like it. I have now\n                                                                                                                                                                                                                                            Dark Mode     My Website   This is some text    This is my website where I put my text. I hope you like it. I have now used up my entire text budget and I have none left, goodbye.         .container {  : relative;  :  0.2em solid black;  :  25em;  : auto; }  .body {  :  1em; }  ,   {  : absolute;  :  0.5em;  :  0.5em;  :  2em; }   {  :  1.2em; }  .title {  :  0; }  #exampleCheckbox :checked {  : whitesmoke; }  #exampleCheckbox :checked ~   {  : whitesmoke; }  #exampleCheckbox :checked ~  .body {  : darkslategrey;  : whitesmoke; }\n  This is actually a more general technique, which works any time you want to let the user toggle between two different versions of an element, or two different styles. For example, I used it in  my last blog post to toggle between different versions of a code snippet.\n  The trick is to combine the  :checked pseudo-class with the  ~ sibling combinator. A CSS rule like  p ~ a applies to all  &lt;a&gt; elements that have a  &lt;p&gt; element sibling before them in the HTML document.\n  The actual rule used is  #exampleCheckbox:checked ~ .body - which applies some styles to the body class  only when the checkbox is checked. Since the affected element must be a subsequent sibling, we can&#39;t put the dark mode checkbox inside the body element. Instead, we put it before the body element, then use  position: absolute to position it inside.\n  This isn&#39;t just a toy example either. The browser will automatically remember the checkbox state, meaning you can save the user&#39;s preference for free - try ticking the box and refreshing this page! Using checkboxes for styling is incredibly useful, and is much simpler to make accessible than a custom-built Javascript solution.\n    It&#39;s daunting to learn the ins-and-outs of HTML/CSS. It can be frustrating when you know exactly what you want it to do but can&#39;t figure out how to tell the computer. However, it&#39;s easier now than ever before to make websites look great. CSS has had 20 years worth of development, and is full of new features to make life easier. If you want some further reading, check out:\n    Some of the things I&#39;ve mentioned are  reasonably new, meaning that if you need to support Internet Explorer, these techniques probably aren&#39;t for you. For example,  position: sticky and  :focus-within aren&#39;t supported in any version of IE. Hopefully you can forget that Internet Explorer ever existed, in which case everything I&#39;ve used here has close to 100% support in browsers!\n  Anyway, I think I&#39;ve shown how powerful of a tool CSS can be when you really stretch yourself. The point of this post was never for you to just copy my example code, though you should feel free to do so. Instead, it&#39;s to give you some pointers towards the more useful parts of the language, and encourage you to explore what the more basic parts of web dev have on offer.", "posttime": "2022-03-02 22:12:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,don", "title": "\u4e0d\u9700\u8981JavaScript\u7684\u4e1c\u897f", "title_en": "Things you don't need JavaScript for", "transed": 1, "url": "https://lexoral.com/blog/you-dont-need-js/", "via": "", "real_tags": ["java", "don"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075163, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u7b2c\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u662fC++\uff0c\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u90fd\u5728Windows\u4e2d\u4f7f\u7528VisualStudio Express\u3002\u5f53\u6211\u4e0d\u5f97\u4e0d\u8c03\u8bd5\u67d0\u4e2a\u4e1c\u897f\u65f6\uff0c\u6211\u4f1a\u70b9\u51fb\u884c\u53f7\u8bbe\u7f6e\u65ad\u70b9\uff0c\u7136\u540e\u6309F5\u3002\u4e5f\u8bb8\u6211\u4f1a\u7ed9\u624b\u8868\u7a97\u53e3\u6dfb\u52a0\u4e00\u4e9b\u53d8\u91cf\uff0c\u7136\u540e\u6309\u51e0\u6b21F\u952e\u3002\u6700\u8fd1\uff0c\u6211\u6362\u4e86\u5de5\u4f5c\uff0c\u73b0\u5728\u4e3b\u8981\u662f\u7528C\u8bed\u8a00\u5f00\u53d1\u56fa\u4ef6\u3002\u81ea\u4ece7\u5e74\u524d\u6211\u6539\u7528Linux\u548cVim\u4ee5\u6765\uff0c\u6211\u9700\u8981\u66f4\u65b0\u6211\u7684\u8c03\u8bd5\u5de5\u4f5c\u6d41\u7a0b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6ca1\u6709\u627e\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u6559\u7a0b\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u53ef\u4ee5\u81ea\u5df1\u5199\u4e00\u4e2a\u3002\n\u5728\u8fc7\u53bb\u76845\u5e74\u91cc\uff0c\u6211\u4e3b\u8981\u4f7f\u7528Python\uff0c\u6211\u771f\u7684\u5f88\u559c\u6b22Python\u4e2d\u7684bug\u3002\u60a8\u53ea\u9700\u5728\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u653e\u5165\u4e00\u4e2abreakpoint\uff08\uff09\u51fd\u6570\u8c03\u7528\uff0c\u5e76\u5c06\u5176\u590d\u5236\u5230\u7a0b\u5e8f\u4e2d\u3002\u6211\u60f3\u770b\u770b\u6211\u5728C\u8bed\u8a00\u4e2d\u79bb\u8fd9\u6709\u591a\u8fd1\u3002\u7531\u4e8eC\u8bed\u8a00\u4e0d\u662f\u4e00\u79cd\u89e3\u91ca\u8bed\u8a00\uff0c\u6211\u7684\u5e0c\u671b\u5e76\u6ca1\u6709\u90a3\u4e48\u9ad8\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728C\u8bed\u8a00\u4e2d\u8c03\u8bd5\u662f\u76f8\u5f53\u8212\u670d\u7684\u3002\u4f5c\u4e3a\u5956\u52b1\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528GDBNOW\u53ea\u8c03\u8bd5C\u548cC++\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528RIST\u3001Nim\uff0c\u4ee5\u53ca\u53ef\u80fd\u5c0a\u91cdC-ABI\u7684\u4efb\u4f55\u8bed\u8a00\uff08\u6211\u4e0d\u77e5\u9053\u8fd9\u662f\u4e8b\u5b9e\uff09\u3002\n//\u8282\u76ee\u3002c#\u5305\u62ec&lt\uff1b\u65af\u7279\u8fea\u5965\u3002h&gt#\u5305\u62ec&lt\uff1bstdlib\u3002h&gt#\u5305\u62ec&lt\uff1b\u65f6\u95f4h&gt\uff1b\u65e0\u6548\u6253\u5370\u4ea7\u54c1\uff08int a\uff0cint b\uff09{int product=a*b\uff1bprintf\uff08&#34\uff1b\u4ea7\u54c1\uff1a%d\\n&#34\uff1b\u4ea7\u54c1\uff09\uff1b}\u65e0\u6548\u7684print_\u53c2\u6570\uff08intargc\uff0cchar**argv\uff09{for\uff08inti=1\uff1bi&lt\uff1bargc\uff1bi++\uff09{printf\uff08&#34\uff1b%s&#34\uff1b\uff0cargv[i]\uff09}printf\uff08&#34\uff1b\\n&#34\uff1b\uff09}int main\uff08int argc\uff0cchar**argv\uff09{print_\u53c2\u6570\uff08argc\uff0cargv\uff09\uff1bsrand\uff08time\uff08NULL\uff09\uff09\uff1bfor\uff08int i=0\uff1bi&lt\uff1b10\uff1bi++\uff09{print_\u4e58\u79ef\uff08rand\uff08\uff09\uff0crand\uff08\uff09\uff09\uff1b}\u8fd4\u56de0\uff1b}\n\u8981\u8c03\u8bd5\u7a0b\u5e8f\uff0c\u5fc5\u987b\u5305\u542b\u8c03\u8bd5\u7b26\u53f7\u3002\u4f7f\u7528gcc\u7f16\u8bd1\u65f6\u6dfb\u52a0\u8c03\u8bd5\u7b26\u53f7\u6dfb\u52a0-g\u6807\u5fd7\u3002\u8ba9\u6211\u4eec\u6765\u7f16\u8bd1\u8fd9\u4e2a\u7a0b\u5e8f\uff1a\n\u8fd9\u5c06\u4f7f\u6211\u4eec\u8fdb\u5165\u4e00\u4e2arepl\u3002\u8981\u8fd0\u884c\u7a0b\u5e8f\uff0c\u76f4\u5230\u5b83\u8fbe\u5230\u4e3b\u529f\u80fd\uff0c\u8bf7\u952e\u5165start\u3002\u73b0\u5728\u6709\u4e86\u5178\u578b\u7684\u8c03\u8bd5\u5668\u64cd\u4f5c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728repl\u4e2d\u952e\u5165\u5b83\u4eec\u6765\u6267\u884c\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165n\uff08\u5f53\u7136\u4f60\u4e5f\u5fc5\u987b\u6309Returns\uff09\u8fdb\u5165\u4e0b\u4e00\u884c\uff0cs\u8fdb\u5165\u5f53\u524d\u51fd\u6570\u8c03\u7528\uff0cr\u8fd0\u884c\u76f4\u5230\u5230\u8fbe\u4e00\u4e2a\u65ad\u70b9\uff0c\u7b49\u7b49\u3002\u8bbe\u7f6e\u65ad\u70b9\uff0c\u952e\u5165b&lt\uff1b\u751f\u4ea7\u7ebf&gt\uff1b\u4f55\u5904&lt\uff1b\u751f\u4ea7\u7ebf&gt\uff1b\u662f\u4f60\u8981\u7684\u7535\u8bdd\u53f7\u7801\u3002\u5982\u679c\u9879\u76ee\u5305\u542b\u591a\u4e2a\u6587\u4ef6\uff0c\u5219\u5fc5\u987b\u952e\u5165b&lt\uff1b\u6587\u4ef6\u540d&gt\uff1b\uff1a&\u4e66\u4fe1\u7535\u62a5\uff1b\u751f\u4ea7\u7ebf&gt\uff1b\u7136\u800c\uff0c&lt\uff1b\u6587\u4ef6\u540d&gt\uff1b\u4e0d\u9700\u8981\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u8def\u5f84\uff0c\u53ea\u9700\u8981\u540d\u79f0\u5c31\u8db3\u591f\u4e86\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0cgdb\u5141\u8bb8\u5236\u8868\u7b26\u5b8c\u6210\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4e3a\u8fd9\u6837\u7684\u51fd\u6570\u8bbe\u7f6e\u65ad\u70b9&lt\uff1bfunctionname&gt\uff1b\u3002\n\u8981\u67e5\u770b\u53d8\u91cf\u7684\u4e0a\u4e0b\u6587\uff0c\u5982\u679c\u5728\u7b2c6\u884c\u65ad\u5f00\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u4e8ep\u7684p\u4e58\u79ef\u3002\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u8ba1\u7b97\u51e0\u4e4e\u4efb\u610f\u7684c\u8868\u8fbe\u5f0f\uff0c\u4f8b\u5982pproduct*5\u3002\n\u4f46\u8fd9\u4ecd\u7136\u4e0d\u597d\uff0c\u73b0\u5728\u6211\u4eec\u5fc5\u987b\u5728\u91cd\u65b0\u542f\u52a8\u8c03\u8bd5\u4f1a\u8bdd\u65f6\u53cd\u590d\u8f93\u5165\u6240\u6709\u65ad\u70b9\u3002\u4f46\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1agdb\u811a\u672c\u3002\u5982\u679c\u4f7f\u7528-x\u9009\u9879\u8c03\u7528gdb\uff0c\u53ef\u4ee5\u5411\u5b83\u4f20\u9012\u4e00\u4e2a\u5305\u542bgdb\u547d\u4ee4\u7684\u6587\u4ef6\uff0c\u8be5\u547d\u4ee4\u5e94\u8be5\u6267\u884c\u3002\n\u73b0\u5728\u6211\u4eec\u7684\u65ad\u70b9\u88ab\u5b58\u50a8\u4e86\u3002\u4f46\u8fd8\u6709\u66f4\u591a\u3002\u901a\u5e38\u6211\u60f3\u68c0\u67e5\u4e00\u4e9b\u53d8\u91cf\uff0c\u6211\u5bf9\u8fd0\u884c\u7a0b\u5e8f\u4e0d\u592a\u611f\u5174\u8da3\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u5e0c\u671b\u770b\u5230productvariable\u7684\u503c\uff0c\u5bf9\u4e8e\u6240\u6709\u5faa\u73af\uff0c\u800c\u4e0d\u5173\u5fc3\u5176\u4f59\u7684\uff1a\n\u73b0\u5728\uff0cgdb\u5c06\u5feb\u901f\u6253\u5370\u51fa\u6240\u6709\u8fed\u4ee3\u7684\u4ea7\u54c1\u4ef7\u503c\uff0c\u7136\u540e\u518d\u6b21\u9000\u51fa\u3002\u65ad\u70b9\u540e\u7684commands\u8bed\u53e5\u5c06\u5728\u547d\u4e2d\u65ad\u70b9\u540e\u6267\u884c\u6240\u6709\u5305\u542b\u7684\u547d\u4ee4\u3002\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\uff0cc\u8868\u793a\u7ee7\u7eed\uff0c\u5e76\u5c06\u7ee7\u7eed\u7a0b\u5e8f\u6d41\uff0c\u76f4\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u88ab\u51fb\u4e2d\u3002\u4e00\u65e6\u4e0a\u6b21\u51fb\u4e2d\u65ad\u70b9\uff0cgdb\u5c06\u901a\u8fc7--batch\u53c2\u6570\u7ed3\u675f\u6267\u884c\u3002\n\u53e6\u4e00\u4e2a\u5f88\u9177\u7684\u4f8b\u5b50\uff1a\u4e0d\u7ba1\u51fa\u4e8e\u4ec0\u4e48\u539f\u56e0\uff0c\u6211\u4eec\u53ea\u5728\u7b2c\u4e09\u6b21\u8c03\u7528print_product\uff08\uff09\u65f6\u624d\u5bf9\u4ea7\u54c1\u7684\u4ef7\u503c\u611f\u5174\u8da3\u3002\uff08\u8fd9\u5f53\u7136\u5f88\u611a\u8822\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u6253\u5370\u51fa\u6765\uff0c\u4f46\u5728\u73b0\u5b9e\u8c03\u8bd5\u4e2d\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff09\nset$n=0b 6\u5982\u679c$n==3 printf&#34\uff0c\u5219\u547d\u4ee4set$n=$n+1\uff1b\u4ea7\u54c1\u662f\uff1a%d\\n&#34\uff1b\uff0c\u4ea7\u54c1\u540d\u79f0\uff1ac endendrun\n\u6b63\u5982\u60a8\u6240\u89c1\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf$n\uff0c\u5e76\u4f7f\u7528\u5b83\u8fdb\u884c\u8ba1\u6570\uff0c\u5e76\u5728\u7b2c\u4e09\u8f6e\u6253\u5370\u51fa\u6211\u4eec\u6240\u9700\u7684\u4fe1\u606f\u3002\u7b2c\u4e09\u8f6e\u7ed3\u675f\u540e\uff0c\u591a\u4e8f\u4e86--batch\uff0cgdb\u81ea\u52a8\u9000\u51fa\u3002\u8981\u66f4\u5168\u9762\u5730\u4e86\u89e3gdb\u7684\u811a\u672c\u529f\u80fd\uff0c\u6211\u63a8\u8350adacore\u6559\u7a0b\u3002com\uff1a\u7b2c\u4e00\u90e8\u5206\u548c\u7b2c\u4e8c\u90e8\u5206\u3002\n\u6709\u4e00\u4e2a\u811a\u672c\uff0c\u5982\u679c\u5b58\u5728\uff0cgdb\u5c06\u59cb\u7ec8\u9690\u5f0f\u52a0\u8f7d\uff1a~/\u3002GDBInit\u60a8\u53ef\u4ee5\u5c06\u7ecf\u5e38\u4f7f\u7528\u7684\u51fd\u6570\u6216\u914d\u7f6e\u653e\u5728\u5176\u4e2d\u3002\u6211\u7684\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\u5c06\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u8bbe\u7f6e\u4e3a0\uff0c\u5c06\u9632\u6b62gdb\u5206\u9875\u957f\u8f93\u51fa\uff0c\u7b2c\u4e09\u884c\u4f7fgdb\u7f8e\u5316\u8f93\u51fa\uff0c\u6700\u540e\u4e00\u884c\u9632\u6b62\u5b83\u8be2\u95ee\u6211\u4eec\u662f\u5426\u771f\u7684\u60f3\u9000\u51fa\u3002\n\u8fd9\u5c31\u662f\u6211\u6240\u62e5\u6709\u7684\u3002\u603b\u7684\u6765\u8bf4\uff0c\u6211\u5bf9\u5b83\u7684\u529b\u91cf\u548c\u7075\u6d3b\u6027\u5f88\u6ee1\u610f\u3002\u8fd9\u53ef\u80fd\u6bd4\u5728anIDE\u4e2d\u653e\u7f6e\u4e00\u4e2a\u65ad\u70b9\u8981\u591a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u4f46\u4f60\u53ef\u4ee5\u4ece\u4e2d\u5f97\u5230\u66f4\u591a\u3002\u6b64\u5916\uff0c\u5728IDE\u4e2d\uff0c\u6211\u603b\u662f\u53d1\u73b0\u7528\u53c2\u6570\u8c03\u7528\u8c03\u8bd5\u5668\u662f\u4e0d\u5408\u9002\u7684\uff0c\u56e0\u4e3a\u60a8\u5fc5\u987b\u627e\u5230\u6b63\u786e\u7684\u9009\u9879\u5bf9\u8bdd\u6846\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5b83\u4eec\u9644\u52a0\u5230debuggerinvocation\uff1a\n\u6b64\u5916\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u8c03\u8bd5\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u542f\u52a8\u5176\u4ed6\u7a0b\u5e8f\uff0c\u4f60\u53ef\u4ee5\u628a\u6240\u6709\u8fd9\u4e9b\u653e\u5728\u4e00\u4e2abash\u811a\u672c\u4e2d\u3002\n\u5f53\u7136\uff0c\u5173\u4e8egdb\u8fd8\u6709\u5f88\u591a\u9700\u8981\u4e86\u89e3\u7684\uff0c\u800c\u8fd9\u53ea\u662f\u4e00\u4e2a\u4ecb\u7ecd\u3002", "note_en": "My first programming language was C++ and for a long time, I was using VisualStudio Express in Windows. When I had to debug something, I would click on theline number to set a breakpoint and press F5. Maybe I\u2019d add some variables tothe watch window, and press some F-keys a couple of times. Recently, I switchedjobs and I\u2019m now mostly developing firmware in C. Since I switched to usingLinux and Vim ~7 years ago, I needed to update my debugging workflow. Iactually didn\u2019t find a neat tutorial that covers the whole picture, so Ifigured I could write one myself.\n During the last 5 years, I mostly worked with Python, and I really likedebugging in Python. You\u2019d just put a  breakpoint() function call into yourcode somewhere and repl into the program. I wanted to see how close I get tothat in C. As C is not an interpreted language, my hopes weren\u2019t that high, butit turns out debugging in C is quite comfortable. As a bonus, you can use GDBnot only to debug C and C++, but also Rust, Nim, and probably any language thatrespects the C-ABI (althoug I don\u2019t know this for a fact).\n   // program.c #include  &lt;stdio.h&gt; #include  &lt;stdlib.h&gt; #include  &lt;time.h&gt;  void  print_product ( int  a ,  int  b )  {  int  product  =  a  *  b ;  printf ( &#34;Product: %d \\n &#34; ,  product ); } void  print_arguments ( int  argc ,  char  ** argv )  {  for  ( int  i  =  1 ;  i  &lt;  argc ;  i ++ )  {  printf ( &#34;%s &#34; ,  argv [ i ]);  }  printf ( &#34; \\n &#34; ); } int  main ( int  argc ,  char  ** argv )  {  print_arguments ( argc ,  argv );  srand ( time ( NULL ));  for  ( int  i  =  0 ;  i  &lt;  10 ;  i ++ )  {  print_product ( rand (),  rand ());  }  return  0 ; }\n To debug the program, it\u2019s important that it contains debugging symbols. Toadd debugging symbols when compiling with gcc add the  -g flag. So let\u2019scompile this program:\n    this will launch us into a repl. Torun the program until it hits the main function, type  start. Now you have thetypical debugger actions that you can execute by typing them into the repl. Youcan go to the next line by entering  n (of course you have to press returntoo),  s to step into the current function call,  r to run until you hit abreakpoint, and  some more. Toset a breakpoint, type  b &lt;line&gt; where  &lt;line&gt; is the line number you wantit in. If your project consists of multiple files, you\u2019ll have to type  b &lt;filename&gt;:&lt;line&gt; however,  &lt;filename&gt; does not need to be a complete path,just the name is enough. Btw, gdb allows for tab completion. Alternatively you canset a breakpoint to a function like this  b &lt;functionname&gt;.\n To see the context of a variable, we can use  p like  p product if we breakat line 6. But we can also evaluate nearly arbitrary c expressions e.g.  pproduct * 5.\n  This is still not nice though, now we\u2019d have to enter all breakpoints over andover again, when we restart the debugging session. But there is away out of this: gdb scripts. If you invoke gdb with the -x option, you canpass it a file containing gdb commands, that it should execute.\n    And now our breakpoints are stored. But there is more to it. Typically I wantto check some variables, and I\u2019m not very interested in running the programfurther than that. Let\u2019s say, we wanted to see the value of the productvariable, for all loops, and dont care about the rest:\n    Now gdb will quickly print out the value of  product for all iterations, andexit again. A  commands statement after a breakpoint will execute allcontained commands once a breakpoint is hit. The last command, the  c means continue and will resume the program flow until the next breakpoint is hit,once the breakpoint was hit the last time, gdb will end execution thanks to the --batch parameter.\n Another cool example: let\u2019s say, for whatever reason, we are interested in thevalue of  product only during the third call of  print_product(). (Which isof course silly, since the program prints it anyway, but in real worlddebugging, a situation like this might arise)\n set $n = 0b 6commands set $n = $n + 1 if $n == 3 printf &#34;Product is: %d\\n&#34;, product else c endendrun\n As you can see we define a variable  $n and use it to count up, and print ourrequired information in the third round. After the third round, gdb quitsautomatically thanks to  --batch. For a more complete tour through gdb\u2019sscripting capabilities, I recommend the tutorial on adacore.com:  part 1 and part 2.\n  There is a script, that gdb will always implicitly load if it exists: ~/.gdbinitYou can put functions you use often in there, or configuration. Mine looks likethis:\n  Setting width and height to 0, will prevent gdb from paging long outputs, thethird line makes gdb prettify the output, and the last line prevents it fromasking if we really want to quit.\n  This is largely what I have. In general, I\u2019m quite happy with the power andflexibility. It might be a little more work than placing a breakpoint in anIDE, but you get so much more out of it. Also, in IDEs I always found itannoying to call the debugger with arguments, because you\u2019d have to find theright options dialog. Here you can simply append them to the debuggerinvocation:\n  Also, if you require a more complex setup for debugging, e.g. because you haveto start other programs too, you can put all of that together in a bash script.\n Of course, there is much more to know about gdb, and this is barely anintroduction.", "posttime": "2022-03-02 22:08:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gdb,debugging", "title": "\u7528GDB\u8c03\u8bd5", "title_en": "Debugging with GDB", "transed": 1, "url": "https://felix-knorr.net/blog/using_gdb_directly.html", "via": "", "real_tags": ["gdb", "debugging"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075162, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Flow\u5bf9\u9875\u9762\u5e03\u5c40\u4f7f\u7528\u591a\u7ebf\u7a0b\u5904\u7406\u2014\u2014\u591a\u4e2a\u9875\u9762\u5143\u7d20\u540c\u65f6\u5b9a\u4f4d\u3002Flow\u76f4\u63a5\u5728GPU\u4e0a\u7ed8\u5236HTML\u5143\u7d20\u2014\u2014\u8fd9\u5927\u5927\u63d0\u9ad8\u4e86\u6e32\u67d3\u6027\u80fd\uff0c\u5e76\u6709\u52a9\u4e8e\u8282\u7701CPU\u4ee5\u66f4\u5feb\u5730\u6267\u884cJavaScript\u3002\n\u53ea\u6709GPU\u7528\u4e8e\u6e32\u67d3\u3002\u8fd9\u4f7f\u5f97\u56fe\u5f62\u66f4\u4e30\u5bcc\uff0c\u5360\u7528\u7684\u5185\u5b58\u66f4\u5c11\u3002\nFlow\u7684\u5f00\u53d1\u662f\u4e3a\u4e86\u5e94\u5bf9GPU\u548c\u591a\u6838\u5904\u7406\u5668\u5728\u6d88\u8d39\u7535\u5b50\u4ea7\u54c1\u548c\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e2d\u7684\u666e\u53ca\u3002\u5b83\u7684\u6027\u80fd\u4f1a\u968f\u7740CPU\u548c\uff1bGPU\u5185\u6838\u589e\u52a0\u3002\n\u9488\u5bf9Android\u3001macOS\u3001Linux\u548cWindows\u7684\u684c\u9762\u5f00\u53d1\u6784\u5efa\u652f\u6301\u975e\u76ee\u6807\u5185\u5bb9\u5f00\u53d1\u3002Flow\u5185\u7f6e\u4e86\u7528\u4e8e\u76ee\u6807\u8c03\u8bd5\u7684\u5de5\u5177\uff0c\u4ee5\u53ca\u7528\u4e8e\u4ea7\u54c1\u8d28\u91cf\u4fdd\u8bc1\u6d4b\u8bd5\u7684Selenium WebDriver\u652f\u6301\u3002\nFlow\u4e0e\u5e73\u53f0\u7684\u5a92\u4f53\u64ad\u653e\u5668\u96c6\u6210\uff0c\u5e76\u5305\u542b\u4e00\u4e2a\u793a\u4f8bGStreamer\u96c6\u6210\uff0c\u63d0\u4f9b\u4e86\u5728UI\u4e2d\u96c6\u6210\u89c6\u9891\u7684\u5feb\u901f\u9014\u5f84\u3002NPAPI\u63d2\u4ef6\u652f\u6301\u63d0\u4f9b\u4e0e\u5b9a\u5236\u5e73\u53f0\u529f\u80fd\u7684\u96c6\u6210\u3002\n\u5728GPU HTML&amp\uff1b\u4e0a100%\u5448\u73b0\u5904\u7406\u5668\u53ef\u7528\u5185\u6838\u7684\u5e03\u5c40\u6027\u80fd\uff1bCSS3\u56fe\u5f62\u5a92\u4f53\u811a\u672c\u548c\u5b58\u50a8\n\u7f51\u7edc\u5de5\u4f5c\u8005\uff1bWeb Sockets NPAPI\u63d2\u4ef6\u652f\u6301\u5e73\u53f0\u8d44\u6e90\u9700\u6c42\u5185\u5bb9\u5f00\u53d1\u5b9a\u671f\u66f4\u65b0\n\u5982\u9700\u5b9a\u671f\u66f4\u65b0\u6211\u4eec\u7684\u8fdb\u5ea6\uff0c\u8bf7\u5728Twitter\u4e0a\u5173\u6ce8\u6211\u4eec\u3002\u82e5\u8981\u8ba8\u8bba\u60a8\u7684\u9879\u76ee\u8981\u6c42\u5e76\u4e86\u89e3\u66f4\u591a\u5173\u4e8eFlow\u7684\u4fe1\u606f\uff0c\u8bf7\u53d1\u7535\u5b50\u90ae\u4ef6\u7ed9\u6211\u4eec\u3002", "note_en": "Flow uses multithreading for page layout \u2013 multiple page elements are positioned concurrently. Flow draws HTML elements directly on the GPU \u2013 this dramatically improves rendering performance and helps keep the CPU free for faster JavaScript execution.\n Only the GPU is used for rendering. This enables richer graphics and uses less memory.\n Flow was developed in response to both GPUs and multicore processors becoming commonplace in consumer electronics products and embedded systems. Its performance automatically scales as the number of CPU &amp; GPU cores increases.\n Desktop development builds for Android, macOS, Linux and Windows enable off-target content development. Flow has built in tools for on-target debugging and Selenium WebDriver support for product quality assurance testing.\n Flow integrates with the platform\u2019s media player and includes a sample GStreamer integration providing a fast route to integrate video within the UI. NPAPI plugin support offers integration with custom platform features.\n   Layout performance that scales with the processor\u2019s available cores   100% rendering on the GPU   HTML &amp; CSS3   Graphics   Media   Scripting and Storage\n Web Workers &amp; Web Sockets   NPAPI plugin support   Platform   Resource Requirements   Content Development   Regular Updates\n  For regular updates on our progress, please follow us on   Twitter .\u00a0  T o discuss your project requirements and find out more about Flow, please  email us.", "posttime": "2022-03-02 22:06:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d4f\u89c8\u5668,flow,\u96c6\u6210", "title": "\u6d41\u6d4f\u89c8\u5668\uff1a\u6d41\u4f7fHTML\u66f4\u5feb", "title_en": "Flow Browser: Flow makes HTML faster", "transed": 1, "url": "https://www.ekioh.com/flow-browser/", "via": "", "real_tags": ["\u6d4f\u89c8\u5668", "flow", "\u96c6\u6210"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075160, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u628a\u8fd9\u4ef6\u4e8b\u653e\u5728\u524d\u9762\u3002\u6211&#39\uff1b\u6211\u662f\u4e00\u540d\u6210\u529f\u7684\u5b66\u8005\u3002\u6211\u6709\u5b66\u672f\u754c\u6700\u597d\u7684\u5de5\u4f5c\u4e4b\u4e00\uff08\u9a6c\u514b\u65af\u00b7\u666e\u6717\u514b\u5bfc\u6f14\uff09\u3002\u6211&#39\uff1b\u6211\u80fd\u548c\u4f18\u79c0\u7684\u540c\u4e8b\u548c\u5b66\u751f\u4e00\u8d77\u505a\u6211\u5173\u5fc3\u7684\u5de5\u4f5c\uff0c\u800c\u4e14\u5b83&#39\uff1b\u5b83\u5f97\u5230\u4e86\u6211\u6240\u5728\u793e\u533a\u7684\u8ba4\u53ef\u3002\u6211&#39\uff1b\u6211\u662f\u767d\u4eba\uff0c\u7537\u6027\uff0c\u5f02\u6027\u604b\u3002\u6211\u662f\u7531\u53d7\u8fc7\u6559\u80b2\u3001\u6709\u7231\u5fc3\u7684\u7236\u6bcd\u629a\u517b\u957f\u5927\u7684\uff0c\u4ed6\u4eec\u4e0d\u5bcc\u6709\uff0c\u4f46\u4e0d\u8d2b\u7a77\u3002\u6211&#39\uff1b\u6211\u7edd\u5bf9\u6709\u7279\u6743\u3002\u751f\u6d3b\u7ed9\u4e86\u6211\u4e00\u4e2a\u6210\u529f\u7684\u673a\u4f1a\u3002\n\u6211\u5b66\u672f\u751f\u6daf\u7684\u6bcf\u4e00\u6b65\u90fd\u906d\u5230\u4e86\u62d2\u7edd\u3002\u6211&#39\uff1b\u6211\u5728\u8fd9\u65b9\u9762\u5e76\u4e0d\u5c11\u89c1\u3002\u90a3\u4e3a\u4ec0\u4e48\u8981\u5199\u5462\uff1f\u901a\u5f80\u5b66\u4e1a\u6210\u529f\u7684\u9053\u8def\u5145\u6ee1\u4e86\u969c\u788d\uff0c\u5f53\u4f60\u9047\u5230\u969c\u788d\u65f6\uff0c\u4f60\u4f1a\u611f\u5230\u65e0\u6cd5\u903e\u8d8a\u3002\u4e5f\u8bb8\u6211\u7684\u6545\u4e8b\u7ed9\u4e86\u4eba\u4eec\u4e00\u7ebf\u5e0c\u671b\uff0c\u5e2e\u52a9\u4ed6\u4eec\u5728\u5931\u8d25\u4e2d\u7ee7\u7eed\u524d\u884c\u3002\u5b66\u672f\u751f\u6d3b\u662f\u503c\u5f97\u7684\u3002\n\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u6211\u5728\u505a\u4ec0\u4e48\u3002\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u6211\u611f\u5174\u8da3\u7684\u662f\u4ec0\u4e48\u3002\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u5b66\u4e60\u3002\u6211\u4e0d\u662f&#39\uff1b\u6211\u8fd8\u4e0d\u591f\u6210\u719f\u3002\u518d\u52a0\u4e0a\u5564\u9152\u548c\u81ea\u7531\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5409\u7965\u7684\u5f00\u59cb\u3002\u6211\u521a\u521a\u901a\u8fc7\u4e86\u7b2c\u4e00\u5e74\u7684\u7269\u7406\uff0c\u7b2c\u4e8c\u5e74\u7684\u5fae\u79ef\u5206\u4e5f\u4e0d\u53ca\u683c\u3002\u540e\u6765\u6211\u5076\u7136\u53d1\u73b0\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u3002\u6211\u4e3a\u4e4b\u503e\u5012\u3002\u6211\u559c\u6b22\u3002\u4ed6\u5f88\u64c5\u957f\u3002\u4f46\u90a3&#39\uff1b\u8fd9\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u3002\n\u6211\u8f6c\u5b66\u4e86\u8363\u8a89\u8ba1\u7b97\u673a\u79d1\u5b66\u4e13\u4e1a\uff0c\u53d1\u73b0\u4e86\u5bf9\u8ba1\u7b97\u673a\u89c6\u89c9\u7684\u70ed\u7231\uff0c\u5e76\u4ee5\u4e00\u7b49\u5b66\u4f4d\u6bd5\u4e1a\u3002\u6211\u7684\u68a6\u60f3\u5f88\u660e\u786e\u2014\u2014\u7528\u4eba\u5de5\u667a\u80fd\u505a\u57fa\u7840\u7814\u7a76\u3002\u8fd9\u610f\u5473\u7740\u83b7\u5f97\u535a\u58eb\u5b66\u4f4d\u3002\n\u6211\u7533\u8bf7\u4e86\u5341\u51e0\u6240\u5b66\u6821\u3002\u6709\u4e9b\u662f\u89e6\u624b\u53ef\u53ca\u7684\uff0c\u6bd4\u5982\u65af\u5766\u798f\u5927\u5b66\u3002\u5176\u4ed6\u4eba\u89c9\u5f97\u8fd9\u662f\u6bd4\u8f83\u5b89\u5168\u7684\u8d4c\u6ce8\uff0c\u6bd4\u5982\u591a\u4f26\u591a\u5927\u5b66\u3002\u7ed3\u679c\u5982\u4f55\uff1f100%\u62d2\u7edd\u3002\u5f53\u6211\u6700\u540e\u7684\u5e0c\u671b\u6765\u81ea\u591a\u4f26\u591a\u65f6\uff0c\u6211\u8bb0\u5f97\u6211\u54ed\u4e86\u3002\u6211\u65e9\u671f\u7684\u9519\u8bef\u51b3\u5b9a\u4e86\u6211\u7684\u547d\u8fd0\u3002CS\u7684\u4e00\u7b49\u6210\u7ee9\u4e3a&#39\uff1b\u8fd9\u4e0d\u8db3\u4ee5\u62b9\u53bb\u6211\u5934\u4e24\u5e74\u5e73\u5eb8\u7684\u6c61\u70b9\u3002\n\u6211\u51b3\u5b9a\u8fdb\u5165\u4e00\u4e2a\u597d\u7684\u535a\u58eb\u8bfe\u7a0b\u7684\u552f\u4e00\u9014\u5f84\u662f\u83b7\u5f97\u7855\u58eb\u5b66\u4f4d\uff1bs\u5b66\u4f4d\u3002\u5b83\u5fc5\u987b\u662f\u539f\u59cb\u7684\uff0c\u6765\u81ea\u6700\u597d\u7684\u5730\u65b9\u3002\u56e0\u6b64\uff0c\u6211\u5728\u65e7\u91d1\u5c71\u6e7e\u533a\u7684\u4e00\u5bb6\u516c\u53f8\u627e\u5230\u4e86\u4e00\u4efd\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7684\u5de5\u4f5c\uff0c\u8be5\u516c\u53f8\u662f\u65af\u5766\u798f\u8363\u8a89\u5408\u4f5c\u9879\u76ee\u7684\u4e00\u90e8\u5206\u3002\u516c\u53f8\u4ed8\u94b1\u8ba9\u6211\u505a\u6211\u7684\u4e3b\u4eba&#39\uff1b\u8fd9\u662f\u517c\u804c\u3002\n\u6211\u5728\u665a\u4e0a\u548c\u5468\u672b\u5de5\u4f5c\u3002\u6211\u786e\u4fdd\u505a\u5f97\u5f88\u597d\u3002\u901a\u8fc7\u83b7\u5f97A+\u6210\u7ee9\uff0c\u6211\u7684\u5e73\u5747\u7ee9\u70b9\u4e3a4.3\u5206\uff08\u6ee1\u52064\u5206\uff09\u3002\u6211\u4e5f\u5f88\u559c\u6b22\u3002\u5173\u4e8e\u5b83\u7684\u4e00\u5207\u3002\n\u5728\u65af\u5766\u798f\u5927\u5b66\u7684\u6279\u51c6\u4e0b\uff0c\u6211\u7533\u8bf7\u4e86\u5927\u6982\u516b\u4e2a\u535a\u58eb\u9879\u76ee\u3002\u8fd9\u6b21\u7ed3\u679c\u5982\u4f55\uff1f100%\u63a5\u53d7\u3002\n\u6211\u9009\u62e9\u4e86\u8036\u9c81\uff0c\u8fd9\u5c31\u50cf\u8fdb\u5165\u4e86\u4e00\u4e2a\u65b0\u4e16\u754c\u3002\u800c\u6211&#39\uff1b\u6211\u7684\u7236\u6bcd\u662f\u79fb\u6c11\uff0c\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u77e5\u9053\u7f8e\u56fd\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u3002\u5e38\u6625\u85e4\u8054\u76df\u5e76\u4e0d\u5728\u6211\u4eec\u7684\u5173\u6ce8\u8303\u56f4\u4e4b\u5185\u3002\u6211\u5728\u8036\u9c81\u5927\u5b66\u9047\u5230\u7684\u4eba\u4f3c\u4e4e\u4ee5\u4e00\u79cd\u5176\u4ed6\u4eba\u6240\u6ca1\u6709\u7684\u65b9\u5f0f\u7406\u89e3\u8fd9\u4e2a\u4e16\u754c\u53ca\u5176\u673a\u9047&#39\uff1bt\u3001 \u4ed6\u4eec\u76f8\u4fe1\u81ea\u5df1\u6709\u80fd\u529b\u50cf\u6211\u4e00\u6837\u5851\u9020\u8fd9\u4e2a\u4e16\u754c&#39\uff1b\u6211\u4ece\u6ca1\u89c1\u8fc7\u3002\u6211\u5728\u8036\u9c81\u7684\u6559\u80b2\u8fdc\u8fdc\u8d85\u51fa\u4e86\u5b66\u672f\u9886\u57df\u3002\n\u4f5c\u4e3a\u4e00\u540d\u7814\u7a76\u751f\uff0c\u6211\u7533\u8bf7\u4e86\u8457\u540d\u7684\u8d6b\u5179\u5956\u5b66\u91d1\u3002\u6211\u88ab\u9080\u8bf7\u5230\u4e00\u5bb6\u9152\u5e97\u7684\u623f\u95f4\u4e0e\u4e00\u4f4d\u5e38\u6625\u85e4\u76df\u6821\u7684\u7ec5\u58eb\u9762\u8c08\u3002\u4ed6\u95ee\u4e86\u6211\u4e00\u4e9b\u95ee\u9898\u6765\u6d4b\u8bd5\u6211\u7684\u77e5\u8bc6\u548c\u667a\u529b\u2014\u2014\u8c37\u6b4c\u73b0\u5728\u4ee5\u8fd9\u79cd\u9762\u8bd5\u95ee\u9898\u800c\u95fb\u540d\u3002\u4ed6\u8fd8\u5220\u9664\u4e86\u4ed6&#39\uff1b\u6211\u5728\u5f69\u8679\u5c4b\u89c1\u8fc7\u9762\u3002\u6211\u610f\u8bc6\u5230\u4ed6\u5728\u6d4b\u8bd5\u6211\u7684\u793e\u4f1a\u8840\u7edf\u3002\u6211\u8ba4\u8bc6\u8c01\uff1f\u6211\u5c5e\u4e8e\u54ea\u4e2a\u9636\u7ea7\uff1f\u5f53\u4ed6\u95ee\u8d77\u6211\u7684\u5bb6\u4eba\u65f6\uff0c\u6211\u5b8c\u5168\u4f4e\u4f30\u4e86\u4ed6\u4eec\u3002\u6211\u6ca1\u6709&#39\uff1bI don\u2019\u6211\u6ca1\u6709\u63d0\u5230\u6211\u7684\u7956\u7236\u662f\u56fd\u738b\u4e54\u6cbb\u516d\u4e16\u7684\u5353\u522b\u6797\uff0c\u4e5f\u6ca1\u6709\u63d0\u5230\u6211\u7684\u6bcd\u4eb2\u5728\u5168\u82f1\u56fd\u7684\u73ed\u7ea7\u91cc\u90fd\u662f\u7b2c\u4e00\u540d\u3002\u4f5c\u4e3a\u4e00\u4e2a\u65e0\u540d\u5c0f\u5352\uff0c\u6211\u5c06\u51ed\u501f\u81ea\u5df1\u7684\u4f18\u70b9\u83b7\u5f97\u8fd9\u4e2a\u5956\u9879\uff0c\u5426\u5219\u6211\u5c31\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u4f1a\u660e\u767d\u7684\u3002\n\u6240\u4ee5\u6211\u7533\u8bf7\u4e86NASA\u5956\u5b66\u91d1\uff0c\u6211\u5f97\u5230\u4e86\u3002\u5b83\u8ba9\u6211\u5f97\u4ee5\u5728NASA\u827e\u59c6\u65af\u7814\u7a76\u4e2d\u5fc3\u5ea6\u8fc7\u6691\u5047\uff0c\u7ed9\u6211\u7684\u85aa\u6c34\u6bd4\u666e\u901a\u7684\u7814\u7a76\u751f\u5956\u5b66\u91d1\u8fd8\u8981\u9ad8\u3002\u592a\u68d2\u4e86\uff0c\u4f46\u5b83&#39\uff1b\u8fd9\u4e5f\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u3002\n\u6211\u4e00\u5b9a\u53d1\u4e8625\u4efd\u6559\u5e08\u804c\u4f4d\u7684\u7533\u8bf7\u3002\u7ed3\u679c100%\u62d2\u7edd\u3002\u6ca1\u6709\u91c7\u8bbf\u3002\u8fde\u4e00\u4e1d\u5174\u8da3\u90fd\u6ca1\u6709\u3002\n\u6211\u6709\u4e00\u4efd\u535a\u58eb\u540e\u7684\u5de5\u4f5c\u3002\u6240\u4ee5\uff0c\u6211\u63a5\u53d7\u4e86\u3002\u8fd9\u662f\u5728\u591a\u4f26\u591a\u5927\u5b66\uff0c\u4ed6\u4eec\u628a\u5b83\u53d8\u6210\u4e00\u4e2a\u975e\u4efb\u671f\u8f68\u9053\u6559\u5e08\u804c\u4f4d\u3002\u5f53\u6211\u544a\u8bc9\u4ed6\u4eec\u51e0\u5e74\u524d\u4ed6\u4eec\u62d2\u7edd\u4e86\u6211\u7684\u535a\u58eb\u8bfe\u7a0b\u65f6\uff0c\u4ed6\u4eec\u611f\u5230\u975e\u5e38\u5c34\u5c2c\u548c\u62b1\u6b49\u3002\u8fc7\u53bb\u7684\u3002\u9519\u5728\u6211\u800c\u4e0d\u662f\u4ed6\u4eec\u3002\n\u591a\u4f26\u591a\u5f88\u68d2\uff0c\u6211\u7684\u987e\u95ee\u827e\u4f26\u00b7\u6770\u666e\u68ee\u662f\u6700\u597d\u7684\u3002\u90a3&#39\uff1b\u8fd9\u4e5f\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u3002\n\u5728\u591a\u4f26\u591a\u4e4b\u540e\uff0c\u6211\u642c\u5230\u4e86\u65bd\u4e50PARC\uff0c\u8fd9\u662f\u4e00\u4efd\u7406\u60f3\u7684\u5de5\u4f5c\u3002\u4f46\u6211\u7684\u76ee\u5149\u603b\u662f\u653e\u5728\u83b7\u5f97\u6559\u804c\u5458\u5de5\u7684\u804c\u4f4d\u4e0a\uff0c\u6211\u628a\u81ea\u5df1\u5728PARC\u7684\u65f6\u95f4\u5f53\u6210\u4e86\u7ec8\u8eab\u6559\u804c\u3002\u6211\u7ef4\u62a4\u6211\u7684\u51fa\u7248\u7269\uff0c\u4e0e\u5b9e\u4e60\u5b66\u751f\u4e00\u8d77\u5de5\u4f5c\uff0c\u5e76\u4fdd\u6301\u53ef\u89c1\u72b6\u6001\u3002\n\u5e15\u6d1b\u963f\u5c14\u6258\u7814\u7a76\u4e2d\u5fc3\u5c06\u91cd\u70b9\u4ece\u57fa\u7840\u7814\u7a76\u8f6c\u79fb\u5230\u66f4\u5177\u5e94\u7528\u6027\u3001\u81ea\u4e0a\u800c\u4e0b\u7684\u7814\u7a76\uff0c\u4f46\u8fd9&#39\uff1b\u8fd9\u662f\u53e6\u4e00\u4e2a\u6545\u4e8b\u3002\u6240\u4ee5\uff0c\u6211\u5f00\u59cb\u5bfb\u627e\u4e00\u4e2a\u6559\u5e08\u804c\u4f4d\u3002\u6211\u91c7\u8bbf\u4e86\u5e03\u6717\uff0c\u975e\u5e38\u559c\u6b22\u8fd9\u4e2a\u5730\u65b9\u3002\u6559\u5e08\u4eba\u6570\u867d\u5c11\uff0c\u4f46\u5f88\u4f18\u79c0\u3002\u8fd9\u6240\u5b66\u6821\u5927\u5c0f\u5408\u9002\u3002\u8d28\u91cf\u5f88\u9ad8\uff0c\u4f46\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u5e38\u6625\u85e4\u8054\u76df\u90a3\u79cd\u62e5\u6709\u4e16\u754c\u7684\u611f\u89c9\u3002\n\u4e3b\u5e2d\u6253\u7535\u8bdd\u7ed9\u6211\uff0c\u544a\u8bc9\u6211\uff0c\u4ed6\u4eec\u6253\u7b97\u7ed9\u6211\u4e00\u4efd\u62c5\u4efb\u52a9\u7406\u6559\u6388\u7684\u5de5\u4f5c\uff0c\u4efb\u671f\u5f88\u77ed\u3002\u6211\u5728\u6708\u7403\u4e0a\u3002\u4e00\u4e2a\u68a6\u60f3\u7ec8\u4e8e\u5b9e\u73b0\u4e86\u3002\n\u76f4\u5230\u51e0\u5929\u540e\u4ed6\u6253\u7535\u8bdd\u8bf4\u4ed6\u975e\u5e38\u62b1\u6b49\uff0c\u4ed6\u4eec\u4e0d\u80fd&#39\uff1bI don\u2019\u6211\u7ec8\u7a76\u4e0d\u4f1a\u7ed9\u6211\u62a5\u4ef7\u3002\u53c8\u4e00\u6b21\u5931\u8d25\u3002\n\u6211\u7559\u5728\u4e86\u5e15\u6d1b\u963f\u5c14\u6258\u7814\u7a76\u4e2d\u5fc3\uff0c\u5e76\u8ba4\u4e3a\u6211\u4f1a\u8ba9\u5b83\u53d1\u6325\u4f5c\u7528\u3002\u51e0\u5e74\u540e\uff0c\u5e03\u6717&#39\uff1b\u4e3b\u5e2d\u5199\u4fe1\u8bf4\u4ed6\u4eec\u4ecd\u7136\u5bf9\u6211\u611f\u5174\u8da3\uff0c\u60f3\u77e5\u9053\u6211\u662f\u5426&#39\uff1b\u6211\u4f1a\u6765\u9762\u8bd5\u7684\u3002\u6211\u8bf4\u4e0d\uff0c\u6211\u5728\u65bd\u4e50\u5f88\u5f00\u5fc3\u3002\u4ed6\u8bf4&#34\uff1b\u90a3\u5c31\u6765\u770b\u770b\uff0c\u770b\u770b\u670b\u53cb\u3002\u6ca1\u4ec0\u4e48\u6b63\u5f0f\u7684&#34;\u6240\u4ee5\uff0c\u6211\u505a\u5230\u4e86\uff0c\u975e\u5e38\u68d2\u3002\n\u8fd9\u4e00\u6b21\uff0c\u4ed6\u4eec\u7ed9\u4e86\u6211\u4e00\u4e2a\u7ec8\u8eab\u526f\u6559\u6388\u7684\u804c\u4f4d\u3002\u5f53\u7136\uff0c\u6211\u82b1\u4e86\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u624d\u5b8c\u6210\uff0c\u56e0\u4e3a\u6211\u5fc5\u987b\u7ecf\u5386\u4efb\u671f\u8fc7\u7a0b\u3002\u6211\u77e5\u9053\u5b83\u53ef\u80fd\u4f1a\u518d\u6b21\u5931\u8d25\uff0c\u4f46\u8fd9\u6b21\u5b83\u6ca1\u6709&#39\uff1bT\n\u4e0e\u521b\u529e\u4e00\u5bb6\u516c\u53f8\u76f8\u6bd4\uff0c\u4e4b\u524d\u6240\u6709\u7684\u62d2\u7edd\u90fd\u662f\u676f\u6c34\u8f66\u85aa\u3002\u4f5c\u4e3a\u4e00\u540d\u5b66\u8005\uff0c\u6211\u6240\u6709\u7684\u7ecf\u9a8c\u5728\u98ce\u9669\u6295\u8d44\u9886\u57df\u6beb\u65e0\u4ef7\u503c\u3002\u6211\u6ca1\u6709\u8bb0\u5f55\u3002\u4e5f\u8bb8\u5728\u62d2\u7edd\u65b9\u9762\uff0c\u552f\u4e00\u6bd4\u5b66\u672f\u754c\u66f4\u6b8b\u9177\u7684\u4e16\u754c\u662f\u98ce\u9669\u6295\u8d44\u3002\u4e00\u8fde\u4e32\u7684\u62d2\u7edd\u4e0d\u662f&#39\uff1b\u6211\u4e0d\u662f\u7279\u522b\u65b0\u5947\u6216\u6709\u8da3\uff0c\u4e5f\u8bb8\u53ea\u6709\u4e00\u4e2a\u30022010\u5e74\uff0c\u5f53\u4e9a\u9a6c\u900a\u6210\u4e3a&#34\uff1b\u5c0f&#34\uff1b\u8be5\u516c\u53f8\u7ea6\u670933000\u540d\u5458\u5de5\u3002\u6211\u5411\u4ed6\u4eec\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u76f4\u63a5\u4ece\u56fe\u50cf\u4e2d\u4f30\u7b973D\u4f53\u578b\u7684\u60f3\u6cd5\uff0c\u5e76\u7528\u5b83\u6765\u5e2e\u52a9\u4eba\u4eec\u627e\u5230\u5408\u9002\u5c3a\u5bf8\u7684\u8863\u670d\u3002\u4ed6\u4eec\u53c2\u52a0\u4e86\u4f1a\u8bae\uff0c\u4f46\u8ba9\u6211\u8d70\u5f00\uff0c\u5efa\u7acb\u4e00\u4e2a\u771f\u6b63\u7684\u516c\u53f8\u3002\u6240\u4ee5\uff0c\u6211\u60f3\u51fa\u4e86\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4e03\u5e74\u540e\uff0c\u8fd9\u5bb6\u540d\u4e3aBody Labs\u7684\u516c\u53f8\u88ab\u4e9a\u9a6c\u900a\u6536\u8d2d\u3002\n\u6211\u559c\u6b22\u5e03\u6717\uff0c\u4ece\u672a\u60f3\u8fc7\u8981\u79bb\u5f00\u3002\u4f46\u6709\u4e00\u6b21\u88ab\u62d2\u7edd\u771f\u7684\u8ba9\u6211\u5fc3\u70e6\u30022009\u5e74\uff0c\u6211\u548c\u4e00\u4f4d\u540c\u4e8b\u5411\u7f8e\u56fd\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1\u4f1a\u63d0\u4ea4\u4e86\u4e00\u4efd\u63d0\u6848\uff0c\u63d0\u8bae\u5f00\u53d1\u4e00\u79cd\u5168\u65b0\u7684\u56db\u7ef4\u4eba\u4f53\u626b\u63cf\u6280\u672f\u3002\u5b83\u53ef\u4ee5\u9ad8\u7cbe\u5ea6\u5730\u6355\u6349\u8fd0\u52a8\u4e2d\u7684\u4eba\u4f53\u5f62\u72b6\u3002\u8fd9\u9879\u63d0\u8bae\u5f97\u5230\u4e86\u9ad8\u5ea6\u8bc4\u4ef7\u3002\u8bc4\u8bba\u8005\u4eec\u79f0\u8d5e\u4e86\u5b83\u80cc\u540e\u7684\u79d1\u5b66\u6027\u548c\u56e2\u961f\u7684\u7ecf\u9a8c\u3002\u4f46\u4ed6\u4eec\u62d2\u7edd\u4e86\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u80fd&#39\uff1b\u6211\u65e0\u6cd5\u60f3\u8c61\u4e16\u754c\u4e3a\u4ec0\u4e48\u9700\u89814D\u4eba\u4f53\u626b\u63cf\u4eea\u3002\u5f53\u7136\uff0c\u6211\u4eec\u8be6\u7ec6\u89e3\u91ca\u4e86\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u6ca1\u6709&#39\uff1b\u6211\u65e0\u6cd5\u8bf4\u670d\u4ed6\u4eec\u3002\n\u6211\u5f00\u59cb\u5e7b\u60f3\u4e00\u4e2a\u4e16\u754c\uff0c\u5728\u8fd9\u4e2a\u4e16\u754c\u4e0a\uff0c\u6709\u4eba\u4f1a\u7ed9\u6211\u7814\u7a76\u8d44\u91d1\uff0c\u7136\u540e\u76f8\u4fe1\u6211\u4f1a\u660e\u667a\u5730\u4f7f\u7528\u5b83\u3002\u6211\u60f3\u8d77\u4e86\u7ea6\u7ff0\u00b7\u5f00\u666e\u52d2\uff081571-1630\uff09\uff0c\u4ed6\u662f\u7531\u4e00\u4f4d\u738b\u5b50\u8d44\u52a9\u7684\u3002\u6709\u65f6\u4ed6\u53ef\u80fd\u4f1a\u88ab\u8981\u6c42\u4f7f\u7528\u661f\u661f\u6765\u9884\u6d4b\u5a5a\u793c\u6216\u6218\u6597\u7684\u5409\u7965\u65e5\u671f\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u4ed6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u610f\u613f\u8fdb\u884c\u79d1\u5b66\u7814\u7a76\u3002\n\u7136\u540e\u9a6c\u514b\u65af\u00b7\u666e\u6717\u514b\u6253\u7535\u8bdd\u6765\u3002\u73b0\u4ee3\u7248\u7684\u738b\u5b50\u3002\u4e8e\u662f\uff0c\u6211\u642c\u5230\u4e86T\u00fcbingen\uff0c\u5f00\u666e\u52d2\u7814\u7a76\u5e76\u8c03\u8bd5\u4e86\u6211\u76844D\u8eab\u4f53\u626b\u63cf\u4eea\uff0c\u7ed3\u679c\u8bc1\u660e\u5b83\u975e\u5e38\u6709\u7528\u3002\n\u56de\u987e\u8fc7\u53bb\uff0c\u5f00\u666e\u52d2\u7684\u5b66\u672f\u754c\u5e76\u6ca1\u6709\u592a\u5927\u7684\u4e0d\u540c\uff1b\u662f\u65f6\u5019\u4e86\u3002\u5728\u56fe\u5bbe\u6839\u5b66\u4e60\u540e\uff0c\u4ed6\u7684\u6559\u6388\u4eec\u8ba4\u4e3a\u4ed6\u4e0d\u591f\u806a\u660e\uff0c\u65e0\u6cd5\u83b7\u5f97\u6559\u5e08\u804c\u4f4d\u3002\u4ed6\u5728\u88ab\u62d2\u7edd\u540e\u6d3b\u4e86\u4e0b\u6765\uff0c\u505a\u5f97\u5f88\u597d\uff0c\u975e\u5e38\u611f\u8c22\u3002\n\u6210\u529f\u548c\u5931\u8d25\u662f\u79d1\u5b66\u7684\u963f\u5c14\u6cd5\u548c\u6b27\u7c73\u8304\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u6bcf\u4e00\u6b21\u6210\u529f\u90fd\u662f\u4ece\u5931\u8d25\u5f00\u59cb\u7684\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u8270\u96be\u7684\u6545\u4e8b\u3002\u6211&#39\uff1b\u6211\u975e\u5e38\u5e78\u8fd0\uff0c\u6211\u77e5\u9053\uff0c\u6211&#39\uff1b\u6211\u5f88\u611f\u6fc0\u3002\u8bb8\u591a\u4eba\u5728\u5b66\u672f\u754c\u53d6\u5f97\u6210\u529f\u7684\u51e0\u7387\u8981\u5927\u5f97\u591a\u3002\u6211&#39\uff1b\u6211\u5e76\u4e0d\u7279\u522b\u3002\u6211&#39\uff1b\u6211\u53ea\u662f\u4e0b\u5b9a\u51b3\u5fc3\u4e86\u3002", "note_en": "Let&#39;s get this out of the way up front. I&#39;m a successful academic. I have one of the best jobs in academia (Max Planck director). I&#39;ve been able to do work that I care about, with great colleagues and students, and it&#39;s been recognized by my community.\u00a0 I&#39;m white, male, and straight. I was raised by educated, caring, parents who were not rich, but not poor. I&#39;m definitely privileged. Life gave me a good shot at success right out of the gate.\n   Every step of my academic career has met with rejection. I&#39;m not unusual in this. So why write about it? The road to academic success is full of barriers and when you hit them, they can feel insurmountable. Maybe my stories give a glimmer of hope that helps someone continue through failure. The academic life is worth it.\n    I didn&#39;t know what the hell I was doing. I didn&#39;t know what interested me. I didn&#39;t know how to study. I wasn&#39;t mature enough. Add beer and freedom to this and it wasn\u2019t an auspicious start. I barely passed first year physics and\u00a0I failed second year calculus. Then I discovered computer science, by accident. I fell head over heels for it. Loved it. Was good at it. But that&#39;s another story.\n  I switched my major to the Honours Computer Science program, discovered a love for computer vision,\u00a0and graduated with a First Class degree. My dream was clear -- do basic research in AI.\u00a0 This meant getting a PhD.\n  I applied to maybe a dozen schools.\u00a0Some were a reach, like Stanford. Others felt like a relatively safe bet, like the University of Toronto.\u00a0 The result? 100% rejection. When the letter came from Toronto, my last hope, I remember crying. My early mistakes sealed my fate. Straight first class grades in CS weren&#39;t enough to wipe out the stain of my first two years of mediocrity.\n    I decided that the only way to get into a good PhD program was to get a Master&#39;s degree. It had to be pristine and from the best place. So, I got a job as a software engineer in the Bay Area at a company that was part of the Stanford Honors Co-Op program. The company paid\u00a0for me to do my Master&#39;s part time.\n  I worked nights and weekends. I made sure to do well. I earned an GPA of 4.3 out of 4 by getting A+ grades. I also loved it. Everything about it.\n  With the Stanford seal of approval, I applied to maybe eight\u00a0PhD programs.\u00a0 The result this time? 100% acceptance.\n    I chose Yale and it was like entering a new world. While I&#39;d had a good upbringing, my parents were immigrants and didn&#39;t know how the US worked. The Ivy League was not on our radar. The people I met at Yale\u00a0seemed to understand the world and its opportunities in\u00a0a way that other people didn&#39;t. They had a confidence in their ability to shape that world like I&#39;d never seen. My Yale education went far beyond the academic.\n  As a graduate student, I applied for the prestigious Hertz Fellowship. I was invited to an interview in a hotel room with a very Ivy-Leaguey gentleman. He asked me questions to test my knowledge and intelligence -- the kind of interview questions that Google is now famous for. He also dropped names of famous people who he&#39;d met at the Rainbow Room. I realized that he was testing my social pedigree. Who did I know? To what class did I belong?\u00a0When he asked about my family, I totally underplayed them. I didn&#39;t mention that my\u00a0grandfather was chaplin to King George VI\u00a0or that my mother finished first in her class in all of England. I was going to get this on my own merits, as a nobody, or I wasn&#39;t going to get it.\n    So I applied for a NASA Fellowship, which I got. It allowed me to spend summers at the NASA Ames Research Center and paid me more than a normal graduate student stipend. It was awesome, but it&#39;s also another story.\n    I must have sent out 25 applications for faculty positions. Result 100% rejection. No interviews. Not even a whiff of interest.\n    I had one post doc offer. So, I took it. It was at the University of Toronto and they turned it into a non-tenure track faculty position. When I told them that they had rejected me for the PhD program years before, they were quite embarrassed and apologetic. Bygones. The fault was with me and not them.\n  Toronto was great and my advisor, Allan Jepson, was the best.\u00a0 That&#39;s\u00a0also another story.\n  There were still no tenure track faculty jobs on the horizon so after Toronto I moved to Xerox PARC, which was a dream job. But my eye was always on getting a faculty position and I treated my time at PARC as though I was in a tenure-track job. I maintained my publications, worked with student interns, and stayed visible.\n    PARC shifted its focus from basic research to more applied, top down, research, but that&#39;s another story. So,\u00a0I started looking for a faculty position. I interviewed with Brown and really loved the place. The faculty was small but excellent.\u00a0 The school was the right size. The quality was high but it didn&#39;t have that Ivy League sense that it owned the world.\n  The chair called me and told me that they were going to make me an offer as an assistant professor with a short tenure clock.\u00a0I was over the moon. A dream finally come true.\n  Until he called a few days later to say that he was terribly sorry and that they couldn&#39;t make me an offer after all.\u00a0 \u00a0Another failure.\n    I stayed at PARC and figured that I would make it work.\u00a0A couple of years later Brown&#39;s chair wrote saying that they were still interested in me and wondered if I&#39;d come and interview. I said no, that I was happy enough at Xerox. He said, &#34;Well just come for a visit, see some friends. Nothing formal.&#34;\u00a0 So, I did, and it was great.\n  This time they made me an offer\u00a0as an associate professor with tenure. Of course, it took months to finalize as I had to go through the tenure process. I knew it could fall through again but this time it didn&#39;t.\n    All the previous rejections were a drop in the bucket compared with starting a company. All my experience as an academic counted for nothing in the world of venture financing. I had no track record. Maybe the only world more brutal than academia in terms of rejection is venture capital. The litany of rejections isn&#39;t particularly novel or interesting except for maybe one. In 2010, I used some Brown connections to get a meeting with Amazon when it as a &#34;small&#34; company of about 33,000 employees. I pitched them an idea about estimating 3D body shape directly from images and using this to help people find the right size clothing. They took the meeting but told me to go away and build a real company. So, I figured out how to do that and seven years later that company, Body Labs, was acquired by Amazon.\n    I loved Brown and was never tempted to leave. But one rejection really bothered me. In 2009, a colleague and I wrote a proposal to the NSF to create a completely new technology for four-dimensional human body scanning. It would enable\u00a0the 3D capture of the human body shape in motion with high precision. The proposal was highly rated.\u00a0 The reviewers praised the science behind it and the experience of the team. But they rejected it because they couldn&#39;t imagine why the world needed a 4D body scanner. Of course, we explained the many applications in detail but it didn&#39;t convince them.\n  I started fantasizing about a world in which someone would give me research funding and then just trust me to use it wisely. I thought of Johannas Kepler (1571-1630)\u00a0who was funded by a prince. Every now and then he might be called upon to use the stars to predict an auspicious date for a wedding or a battle\u00a0but, other than that, he could do his science as he saw fit.\n  Then Max Planck called. The modern version of a prince. So, I moved to T\u00fcbingen, the same town where Kepler studied and commissioned my 4D body scanner, which turned out to be very useful.\n    Looking back, academia\u00a0was\u00a0not so different in Kepler&#39;s time. After studying in T\u00fcbingen, his professors thought that he was\u00a0not clever enough to be offered\u00a0a faculty position. He survived the rejection and did just fine for himself, thank you very much.\n  Success and failure are the alpha and omega of science. For me, every success began with failure. But, this is not a story of hardship. I&#39;m extremely\u00a0fortunate, I know it, and I&#39;m thankful. Many people succeed in academia against much bigger odds.\u00a0I&#39;m not special. I&#39;m\u00a0just determined.", "posttime": "2022-03-02 19:53:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u62d2\u7edd,success,\u83b7\u5f97", "title": "\u6210\u529f\u4e4b\u8def\u662f\u7531\u62d2\u7edd\u4fe1\u94fa\u5c31\u7684", "title_en": "The Road to Success Is Paved with Rejection Letters", "transed": 1, "url": "https://perceiving-systems.blog/en/news/the-road-to-success-is-paved-with-rejection-letters", "via": "", "real_tags": ["\u62d2\u7edd", "success", "\u83b7\u5f97"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075159, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u6709\u52a9\u4e8e\u5185\u5bb9\u548c\uff1b\u4fe1\u606f\n\u4e00\u822c\u5e2e\u52a9\u4e2d\u5fc3\u7ecf\u9a8c", "note_en": "This help content &amp; information\n General Help Center experience", "posttime": "2022-03-02 19:16:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u5730\u56fe,maps,\u4e2d\u5fc3", "title": "\u8c37\u6b4c\u5730\u56fe\u88ab\u7528\u6765\u534f\u8c03\u4e4c\u514b\u5170\u7684\u7a7a\u88ad", "title_en": "Google Maps is used to coordinate air strikes in Ukraine", "transed": 1, "url": "https://support.google.com/maps/thread/152812942/please-delete-all-new-places-since-the-start-of-war-23th-of-february-save-ukrainian-civilians-from?hl=en", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u5730\u56fe", "maps", "\u4e2d\u5fc3"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075157, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u6863\u63cf\u8ff0\u4e86Go 1.18\u4e2d\u901a\u8fc7\u5b57\u5178\u548cGCShape\u6a21\u677f\u7684\u6cdb\u578b\u5b9e\u73b0\u3002\u5b83\u63d0\u4f9b\u4e86\u6bd4Gcshape\u8bbe\u8ba1\u6587\u6863\u4e2d\u63cf\u8ff0\u7684\u66f4\u5177\u4f53\u548c\u6700\u65b0\u7684\u4fe1\u606f\n\u6cdb\u578b\u7684\u7f16\u8bd1\u5668\u5b9e\u73b0\uff08\u5728\u7c7b\u578b\u68c0\u67e5\u4e4b\u540e\uff09\u4e3b\u8981\u5173\u6ce8\u4e8e\u521b\u5efa\u6cdb\u578b\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5316\uff0c\u8fd9\u4e9b\u51fd\u6570\u548c\u65b9\u6cd5\u5c06\u4f7f\u7528\u5177\u6709\u5177\u4f53\u7c7b\u578b\u7684\u53c2\u6570\u6267\u884c\u3002\u4e3a\u4e86\u907f\u514d\u4e3a\u5177\u6709\u4e0d\u540c\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u6bcf\u6b21\u8c03\u7528\u521b\u5efa\u4e0d\u540c\u7684\u51fd\u6570\u5b9e\u4f8b\u5316\uff08\u8fd9\u5c06\u662f\u7eaf\u7cb9\u7684\u6a21\u677f\u5316\uff09\uff0c\u6211\u4eec\u5728\u6bcf\u6b21\u8c03\u7528\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u65f6\u90fd\u4f1a\u4f20\u9012\u4e00\u4e2a\u5b57\u5178\u3002\u5b57\u5178\u63d0\u4f9b\u4e86\u6709\u5173\u7c7b\u578b\u53c2\u6570\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5141\u8bb8\u5355\u4e2a\u51fd\u6570\u5b9e\u4f8b\u5316\u4e3a\u8bb8\u591a\u4e0d\u540c\u7684\u7c7b\u578b\u53c2\u6570\u6b63\u786e\u8fd0\u884c\u3002\n\u7136\u800c\uff0c\u4e3a\u4e86\u5b9e\u73b0\u7684\u7b80\u5355\u6027\uff08\u548c\u6027\u80fd\uff09\uff0c\u5bf9\u4e8e\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u6ca1\u6709\u5355\u4e00\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7f16\u8bd1\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5728\u5177\u6709\u76f8\u540cgcshape\u7684\u7c7b\u578b\u53c2\u6570\u96c6\u4e4b\u95f4\u5171\u4eab\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5316\u3002\ngcshape\uff08\u6216gcshape grouping\uff09\u662f\u4e00\u7ec4\u7c7b\u578b\uff0c\u5f53\u6307\u5b9a\u4e3a\u7c7b\u578b\u53c2\u6570\u4e4b\u4e00\u65f6\uff0c\u8fd9\u4e9b\u7c7b\u578b\u5728\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\u53ef\u4ee5\u5171\u4eab\u901a\u7528\u51fd\u6570/\u65b9\u6cd5\u7684\u76f8\u540c\u5b9e\u4f8b\u5316\u3002\u56e0\u6b64\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5177\u6709\u5355\u4e2a\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u51fd\u6570\uff0c\u5bf9\u4e8e\u540c\u4e00gcshape\u5206\u7ec4\u4e2d\u7684\u6240\u6709\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u51fd\u6570\u5b9e\u4f8b\u5316\u3002\u7c7b\u4f3c\u5730\uff0c\u5bf9\u4e8e\u5177\u6709\u5355\u4e2a\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u7c7b\u578b\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u540c\u4e00gcshape\u5206\u7ec4\u4e2d\u7684\u6240\u6709\u7c7b\u578b\u53c2\u6570\uff08\u6cdb\u578b\u7c7b\u578b\uff09\u8fdb\u884c\u4e00\u6b21\u5b9e\u4f8b\u5316\u3002gcshape\u7c7b\u578b\u662f\u6211\u4eec\u5728\u6b64\u7c7b\u5b9e\u4f8b\u5316\u7684\u5b9e\u73b0\u4e2d\u4f7f\u7528\u7684\u7279\u5b9a\u7c7b\u578b\uff0c\u7528\u4e8e\u586b\u5145gcshape\u5206\u7ec4\u7684\u6240\u6709\u7c7b\u578b\u3002\n\u6211\u4eec\u76ee\u524d\u6b63\u5728\u4ee5\u4e00\u79cd\u76f8\u5f53\u7ec6\u7c92\u5ea6\u7684\u65b9\u5f0f\u5b9e\u73b0gcshapes\u3002\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u5177\u4f53\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u57fa\u7840\u7c7b\u578b\u6216\u5b83\u4eec\u90fd\u662f\u6307\u9488\u7c7b\u578b\u65f6\uff0c\u5b83\u4eec\u624d\u5904\u4e8e\u76f8\u540c\u7684gcshape\u5206\u7ec4\u4e2d\u3002\u6211\u4eec\u6709\u610f\u5b9a\u4e49gcshapes\uff0c\u8fd9\u6837\u5c31\u4e0d\u9700\u8981\u5728\u5b57\u5178\u4e2d\u5305\u542b\u4efb\u4f55\u8fd0\u7b97\u7b26\u65b9\u6cd5\uff08\u4f8b\u5982\uff0c\u4e3a\u6307\u5b9a\u7c7b\u578barg\u5b9e\u73b0\u201c+\u201d\u8fd0\u7b97\u7b26\uff09\u3002\u7279\u522b\u662f\uff0c\u672c\u8d28\u4e0a\u4e0d\u540c\u7684\u5185\u7f6e\u7c7b\u578b\uff08\u5982int\u548cfloat64\uff09\u7edd\u4e0d\u662f\u540c\u4e00\u4e2a\u5f62\u72b6\u3002\u5373\u4f7f\u662fint16\u548cint32\u4e5f\u6709\u4e0d\u540c\u7684\u64cd\u4f5c\uff08\u5c24\u5176\u662f\u5de6\u79fb\u4f4d\u548c\u53f3\u79fb\u4f4d\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u628a\u5b83\u4eec\u653e\u5728\u540c\u4e00\u4e2a\u5f62\u72b6\u4e2d\u3002\u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u5e0c\u671bgcshape\u4e2d\u7684\u6240\u6709\u7c7b\u578b\u59cb\u7ec8\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5b9e\u73b0\u5185\u7f6e\u65b9\u6cd5\uff08\u4f8b\u5982make/new/len\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u540c\u4e00\u4e2agcshape\u4e2d\u5305\u542b\u4e00\u4e9b\u5bc6\u5207\u76f8\u5173\u7684\u5185\u7f6e\u7c7b\u578b\uff08\u5982uint\u548cuintptr\uff09\uff0c\u4f46\u76ee\u524d\u8fd8\u6ca1\u6709\u8fd9\u6837\u505a\u3002\u6211\u4eec\u76ee\u524d\u7684\u7ec6\u7c92\u5ea6gcshape\u5df2\u7ecf\u6697\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u6211\u4eec\u4e5f\u603b\u662f\u5e0c\u671b\u754c\u9762\u7c7b\u578b\u4e0e\u975e\u754c\u9762\u7c7b\u578b\u5904\u4e8e\u4e0d\u540c\u7684gcshape\u4e2d\uff08\u5373\u4f7f\u975e\u754c\u9762\u7c7b\u578b\u4e0e\u754c\u9762\u7c7b\u578b\u5177\u6709\u76f8\u540c\u7684\u53cc\u573a\u7ed3\u6784\uff09\u3002\u63a5\u53e3\u7c7b\u578b\u5728\u8c03\u7528\u65b9\u6cd5\u7b49\u65b9\u9762\u4e0e\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u884c\u4e3a\u975e\u5e38\u4e0d\u540c\u3002\n\u76ee\u524d\uff0c\u6211\u4eec\u6839\u636e\u57fa\u7840\u7c7b\u578b\u7684\u552f\u4e00\u5b57\u7b26\u4e32\u8868\u793a\uff08\u5728types.LinkString\u4e2d\u5b9e\u73b0\uff09\u6765\u547d\u540d\u6bcf\u4e2agcshape\u7c7b\u578b\u3002\u6211\u4eec\u5c06\u6240\u6709\u5f62\u72b6\u7c7b\u578b\u653e\u5165\u4e00\u4e2a\u72ec\u7279\u7684\u5185\u7f6e\u5305\u201cgo.shape\u201d\u3002\u51fa\u4e8e\u5b9e\u73b0\u539f\u56e0\uff08\u8bf7\u53c2\u89c1\u4e0b\u4e00\u8282\uff09\uff0c\u6211\u4eec\u78b0\u5de7\u5728gcshape\u7c7b\u578b\u7684\u540d\u79f0\u4e2d\u5305\u542b\u4e86\u7c7b\u578b\u53c2\u6570\u5217\u8868\u4e2dgcshape\u53c2\u6570\u7684\u7d22\u5f15\u3002\u56e0\u6b64\uff0c\u57fa\u7840\u7c7b\u578b\u4e3a\u201cstring\u201d\u7684\u7c7b\u578b\u5c06\u5bf9\u5e94\u4e8e\u540d\u4e3a\u201cgo.shape.string_0\u201d\u6216\u201cgo.shape.string_1\u201d\u7684gcshape\u7c7b\u578b\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u8be5\u7c7b\u578b\u662f\u7528\u4f5c\u6cdb\u578b\u51fd\u6570\u6216\u7c7b\u578b\u7684\u7b2c\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\u8fd8\u662f\u7b2c\u4e8c\u4e2a\u7c7b\u578b\u53c2\u6570\u3002\u6240\u6709\u6307\u9488\u7c7b\u578b\u90fd\u662f\u4ee5\u5355\u4e2a\u793a\u4f8b\u7c7b\u578b*uint8\u547d\u540d\u7684\uff0c\u56e0\u6b64\u6307\u9488\u5f62\u72b6\u7684gcshapes\u540d\u79f0\u4e3ago\u3002\u5f62\u72b6*\u5feb\u53bb\u3002\u5f62\u72b6*uint8_1\u7b49\u3002\n\u6211\u4eec\u5c06\u4e00\u7ec4\u7279\u5b9a\u5f62\u72b6\u7c7b\u578b\u53c2\u6570\u7684\u6cdb\u578b\u51fd\u6570\u6216\u65b9\u6cd5\u7684\u5b9e\u4f8b\u5316\u79f0\u4e3a\u5f62\u72b6\u5b9e\u4f8b\u5316\u3002\n\u6bcf\u4e2a\u5b57\u5178\u90fd\u662f\u5728\u7f16\u8bd1\u65f6\u9759\u6001\u5b9a\u4e49\u7684\u3002\u5b57\u5178\u5bf9\u5e94\u4e8e\u7a0b\u5e8f\u4e2d\u7684\u8c03\u7528\u7ad9\u70b9\uff0c\u5176\u4e2d\u4f7f\u7528\u4e00\u7ec4\u7279\u5b9a\u7684\u5177\u4f53\u7c7b\u578b\u53c2\u6570\u8c03\u7528\u7279\u5b9a\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u3002\u65e0\u8bba\u662f\u4ece\u975e\u6cdb\u578b\u51fd\u6570\u8fd8\u662f\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u8c03\u7528\uff0c\u6bcf\u5f53\u8c03\u7528\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u65f6\u90fd\u9700\u8981\u5b57\u5178\u3002\u5b57\u5178\u5f53\u524d\u4ee5\u88ab\u8c03\u7528\u7684\u5b8c\u5168\u9650\u5b9a\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u540d\u548c\u5177\u4f53\u7c7b\u578b\u53c2\u6570\u7684\u540d\u79f0\u547d\u540d\u3002\u4e3b\u8981\u6709\u4e24\u4e2a\u5b57\u5178\u540d\u793a\u4f8b\u3002\u3002dict.Map[int\uff0cbool]\u548cmain\u3002\u3002dict.mapCons[int\uff0cbool]\u3002\u5e94\u7528\uff09\u3002\u8fd9\u4e9b\u662f\u8c03\u7528\u6216\u5f15\u7528main\u6240\u9700\u7684\u8bcd\u5178\u3002\u6620\u5c04[int\uff0cbool]\uff08\uff09\u548crcvr\u3002Apply\uff08\uff09\uff0c\u5176\u4e2drcvr\u5177\u6709main\u7c7b\u578b\u3002mapCons[int\uff0cbool]\u3002\u5b57\u5178\u5305\u542b\u4f7f\u7528\u8fd9\u4e9b\u5177\u4f53\u7c7b\u578b\u53c2\u6570\u6267\u884c\u57fa\u4e8egcshape\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u5b9e\u4f8b\u5316\u6240\u9700\u7684\u4fe1\u606f\u3002\u5177\u6709\u76f8\u540c\u540d\u79f0\u7684\u8bcd\u5178\u88ab\u5b8c\u5168\u6d88\u9664\u91cd\u590d\uff08\u901a\u8fc7\u7f16\u8bd1\u5668\u548c\u94fe\u63a5\u5668\u7684\u67d0\u79cd\u7ec4\u5408\uff09\u3002\n\u901a\u8fc7\u5206\u6790\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u5f62\u72b6\u5b9e\u4f8b\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u6536\u96c6\u6709\u5173\u5b57\u5178\u9884\u671f\u683c\u5f0f\u7684\u4fe1\u606f\u3002\u6211\u4eec\u5206\u6790\u4e00\u4e2a\u5b9e\u4f8b\u5316\uff0c\u800c\u4e0d\u662f\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u672c\u8eab\uff0c\u56e0\u4e3a\u6240\u9700\u7684\u5b57\u5178\u6761\u76ee\u53ef\u80fd\u53d6\u51b3\u4e8e\u5f62\u72b6\u53c2\u6570\u2014\u2014\u5c24\u5176\u662f\u5f62\u72b6\u53c2\u6570\u662f\u5426\u662f\u63a5\u53e3\u7c7b\u578b\u3002\u91cd\u8981\u7684\u662f\uff0c\u5b9e\u4f8b\u5316\u5df2\u7ecf\u201c\u8f6c\u6362\u201d\u5230\u6240\u6709\u9690\u5f0f\u63a5\u53e3\u8f6c\u6362\uff08oconvidace\uff09\u90fd\u663e\u5f0f\u7684\u7a0b\u5ea6\u3002\u663e\u5f0f\u6216\u9690\u5f0f\u63a5\u53e3\u8f6c\u6362\uff08\u5c24\u5176\u662f\u8f6c\u6362\u4e3a\u975e\u7a7a\u63a5\u53e3\uff09\u53ef\u80fd\u9700\u8981\u5b57\u5178\u4e2d\u7684\u989d\u5916\u6761\u76ee\u3002\n\u4e3a\u4e86\u521b\u5efa\u5b57\u5178\u6761\u76ee\uff0c\u6211\u4eec\u901a\u5e38\u9700\u8981\u7528\u4e0e\u5b57\u5178\u5173\u8054\u7684\u5b9e\u9645\u7c7b\u578b\u53c2\u6570\u66ff\u6362\u5f62\u72b6\u7c7b\u578b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u591a\u4e2a\u7c7b\u578b\u53c2\u6570\u6070\u597d\u5177\u6709\u76f8\u540c\u7684\u5f62\u72b6\uff08\u4f8b\u5982\uff0c\u5b83\u4eec\u90fd\u662f\u6307\u9488\u7c7b\u578b\uff09\uff0c\u5f62\u72b6\u7c7b\u578b\u53c2\u6570\u4e5f\u5fc5\u987b\u662f\u5b8c\u5168\u53ef\u533a\u5206\u7684\u3002\u56e0\u6b64\uff0c\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u5c06type\u53c2\u6570\u7684\u7d22\u5f15\u6dfb\u52a0\u5230shape\u7c7b\u578b\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b8c\u5168\u6b63\u786e\u5730\u533a\u5206\u4e0d\u540c\u7684\u7c7b\u578b\u53c2\u6570\u3002\n\u6240\u6709\uff08\u6216\u6240\u9700\uff09\u6d3e\u751f\u7c7b\u578b\u7684\u5217\u8868\uff0c\u8fd9\u4e9b\u6d3e\u751f\u7c7b\u578b\u51fa\u73b0\u5728\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u4e2d\uff0c\u6216\u4ee5\u67d0\u79cd\u65b9\u5f0f\u9690\u5f0f\u51fa\u73b0\u5728\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u4e2d\uff0c\u7528\u5177\u4f53\u7684\u7c7b\u578b\u53c2\u6570\u66ff\u6362\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ece\u51fd\u6570/\u65b9\u6cd5\u7684\u7c7b\u578b\u53c2\u6570\uff08\u4f8b\u5982.*T\u3001[]T\u3001map[K\u3001V]\u7b49\uff09\u4e2d\u5177\u4f53\u6d3e\u751f\u5e76\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5728\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u4e2d\u4f7f\u7528\u7684\u5177\u4f53\u7c7b\u578b\u5217\u8868\u3002\n\u76ee\u524d\uff0c\u6211\u4eec\u5728\u9700\u8981\u8868\u8fbe\u5f0f\u7684\u8fd0\u884c\u65f6\u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u6d3e\u751f\u7c7b\u578b\u3002\u8fd9\u4e9b\u60c5\u51b5\u5305\u62ec\u5230\u7a7a\u63a5\u53e3\u7684\u663e\u5f0f\u6216\u9690\u5f0f\u8f6c\u6362\uff0c\u4ee5\u53ca\u7c7b\u578b\u65ad\u8a00\u548c\u7c7b\u578b\u5f00\u5173\uff0c\u5176\u4e2d\u6e90\u503c\u7684\u7c7b\u578b\u662f\u7a7a\u63a5\u53e3\u3002\n\u5728\u8fd0\u884c\u65f6\uff0c\u8c03\u8bd5\u5668\u8fd8\u4f7f\u7528\u6d3e\u751f\u7c7b\u578b\u548c\u7c7b\u578b\u53c2\u6570\u9879\u6765\u786e\u5b9a\u53c2\u6570\u548c\u5c40\u90e8\u53d8\u91cf\u7684\u5177\u4f53\u7c7b\u578b\u3002\u5728\u7f16\u8bd1\u65f6\uff0c\u6709\u5173\u7c7b\u578b\u53c2\u6570\u548c\u6d3e\u751f\u7c7b\u578b\u5b57\u5178\u9879\u7684\u4fe1\u606f\u5c06\u4e0eDWARF\u4fe1\u606f\u4e00\u8d77\u53d1\u51fa\u3002\u5bf9\u4e8e\u5177\u6709\u53c2\u6570\u5316\u7c7b\u578b\u7684\u6bcf\u4e2a\u53c2\u6570\u6216\u5c40\u90e8\u53d8\u91cf\uff0cDWARF\u4fe1\u606f\u8fd8\u6307\u793a\u5c06\u5305\u542b\u53c2\u6570\u6216\u53d8\u91cf\u5177\u4f53\u7c7b\u578b\u7684\u5b57\u5178\u6761\u76ee\u3002\n\u6240\u6709\u5b50\u5b57\u5178\u7684\u5217\u8868\uff1a\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u5185\u90e8\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u8c03\u7528\u9700\u8981\u4e00\u4e2a\u5b50\u5b57\u5178\uff0c\u5176\u4e2d\u5185\u90e8\u8c03\u7528\u7684\u7c7b\u578b\u53c2\u6570\u53d6\u51b3\u4e8e\u5916\u90e8\u51fd\u6570\u7684\u7c7b\u578b\u53c2\u6570\u3002\u5bf9\u4e8e\u5f15\u7528\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u51fd\u6570/\u65b9\u6cd5\u503c\u548c\u65b9\u6cd5\u8868\u8fbe\u5f0f\uff0c\u540c\u6837\u9700\u8981\u5b50\u5b57\u5178\u3002\n\u5b50\u5b57\u5178\u6761\u76ee\u6307\u5411\u4f7f\u7528\u6240\u9700\u7c7b\u578b\u53c2\u6570\u6267\u884c\u88ab\u8c03\u7528\u51fd\u6570/\u65b9\u6cd5\u6240\u9700\u7684\u666e\u901a\u9876\u7ea7\u5b57\u5178\uff0c\u4f7f\u7528\u5916\u90e8\u51fd\u6570\u5b57\u5178\u7684\u7c7b\u578b\u53c2\u6570\u8fdb\u884c\u66ff\u6362\u3002\n\u4ece\u7c7b\u578b\u53c2\u6570\u6216\u6d3e\u751f\u7c7b\u578b\u8f6c\u6362\u4e3a\u7279\u5b9a\u975e\u7a7a\u63a5\u53e3\u6240\u9700\u7684\u4efb\u4f55\u7279\u5b9aITAB\u3002\u76ee\u524d\uff0c\u6211\u4eec\u4f7f\u7528\u5b57\u5178\u6d3e\u751f\u7684ITAB\u4e3b\u8981\u6709\u56db\u79cd\u60c5\u51b5\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0citab\u90fd\u5fc5\u987b\u6765\u81ea\u5b57\u5178\uff0c\u56e0\u4e3a\u5b83\u53d6\u51b3\u4e8e\u5f53\u524d\u51fd\u6570\u7684\u7c7b\u578b\u53c2\u6570\u3002\u7528\u4e8e\u4ece\u975e\u63a5\u53e3\u7c7b\u578b\u5230\u975e\u7a7a\u63a5\u53e3\u7684\u6240\u6709\u663e\u5f0f\u6216\u9690\u5f0fOConvidace\u8c03\u7528\u3002itab\u7528\u4e8e\u521b\u5efa\u76ee\u6807\u63a5\u53e3\u3002\n\u5bf9\u4e8e\u7c7b\u578b\u53c2\u6570\u7684\u6240\u6709\u65b9\u6cd5\u8c03\u7528\uff08\u5fc5\u987b\u662f\u7c7b\u578b\u53c2\u6570\u7ed1\u5b9a\u4e2d\u7684\u65b9\u6cd5\uff09\u3002\u6b64\u65b9\u6cd5\u8c03\u7528\u4f5c\u4e3a\u63a5\u6536\u65b9\u5230\u7c7b\u578b\u7ed1\u5b9a\u63a5\u53e3\u7684\u8f6c\u6362\u6765\u5b9e\u73b0\uff0c\u56e0\u6b64\u5904\u7406\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u9690\u5f0foconvidace\u8c03\u7528\u3002\n\u7528\u4e8e\u4ece\u975e\u7a7a\u63a5\u53e3\u5230\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u6240\u6709\u7c7b\u578b\u65ad\u8a00\u3002\u9700\u8981itab\u6765\u5b9e\u73b0\u7c7b\u578b\u65ad\u8a00\u3002\n\u5bf9\u4e8e\u6d89\u53ca\u4ece\u7c7b\u578b\u53c2\u6570\u6d3e\u751f\u7684\u975e\u63a5\u53e3\u7c7b\u578b\u7684\u7c7b\u578b\u5207\u6362\u60c5\u51b5\uff0c\u5176\u4e2d\u6253\u5f00\u7684\u503c\u5177\u6709\u975e\u7a7a\u63a5\u53e3\u7c7b\u578b\u3002\u4e0e\u7c7b\u578b\u65ad\u8a00\u4e00\u6837\uff0c\u9700\u8981itab\u6765\u5b9e\u73b0\u7c7b\u578b\u5207\u6362\u3002\n\u6211\u4eec\u5df2\u7ecf\u51b3\u5b9a\uff0c\u5f15\u7528\u6cdb\u578b\u503c/\u7c7b\u578b\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u4e2d\u7684\u95ed\u5305\u5e94\u8be5\u4f7f\u7528\u4e0e\u5176\u5305\u542b\u7684\u51fd\u6570/\u65b9\u6cd5\u76f8\u540c\u7684\u5b57\u5178\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u5b9e\u4f8b\u5316\u51fd\u6570/\u65b9\u6cd5\u7684\u5b57\u5178\u5e94\u8be5\u5305\u62ec\u5b83\u6240\u5305\u542b\u7684\u95ed\u5305\u7684\u6240\u6709\u4e3b\u4f53\u6240\u9700\u7684\u6240\u6709\u6761\u76ee\u3002\n\u5f53\u524d\u5b9e\u73b0\u53ef\u80fd\u6709\u91cd\u590d\u7684\u5b50\u8bcd\u5178\u6761\u76ee\u548c/\u6216\u91cd\u590d\u7684itab\u6761\u76ee\u3002\u901a\u8fc7\u5728\u5b9e\u73b0\u8fc7\u7a0b\u4e2d\u591a\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u8fd9\u4e9b\u6761\u76ee\u663e\u7136\u53ef\u4ee5\u6d88\u9664\u91cd\u590d\u5e76\u5171\u4eab\u3002\u5bf9\u4e8e\u4e00\u4e9b\u4e0d\u5bfb\u5e38\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u8fd8\u6709\u4e00\u4e9b\u672a\u4f7f\u7528\u7684\u5b57\u5178\u6761\u76ee\u53ef\u4ee5\u4f18\u5316\u6389\u3002\n\u6211\u4eec\u9009\u62e9\u5728\u7f16\u8bd1\u65f6\u8ba1\u7b97\u6240\u6709\u5b57\u5178\u548c\u5b50\u5b57\u5178\uff0c\u8fd9\u786e\u5b9e\u610f\u5473\u7740\u6709\u4e9b\u7a0b\u5e8f\u65e0\u6cd5\u8fd0\u884c\u3002\u5bf9\u4e8e\u5177\u6709\u7279\u5b9a\u5177\u4f53\u7c7b\u578b\u7684\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u6bcf\u4e2a\u53ef\u80fd\u5b9e\u4f8b\u5316\uff0c\u6211\u4eec\u5fc5\u987b\u6709\u4e00\u4e2a\u5b57\u5178\u3002\u56e0\u4e3a\u6211\u4eec\u8981\u6c42\u6240\u6709\u5b57\u5178\u90fd\u5728\u7f16\u8bd1\u65f6\u9759\u6001\u521b\u5efa\uff0c\u6240\u4ee5\u5fc5\u987b\u6709\u4e00\u7ec4\u6709\u9650\u7684\u5df2\u77e5\u7c7b\u578b\u7528\u4e8e\u521b\u5efa\u51fd\u6570/\u65b9\u6cd5\u5b9e\u4f8b\u5316\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u65e0\u6cd5\u5904\u7406\u901a\u8fc7\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u9012\u5f52\u53ef\u4ee5\u521b\u5efa\u65e0\u9650\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\uff08\u901a\u5e38\u901a\u8fc7\u91cd\u590d\u5d4c\u5957\u6cdb\u578b\u7c7b\u578b\uff09\u7684\u7a0b\u5e8f\u3002\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u89c1\u7b2c48018\u671f\u3002\u8fd9\u4e9b\u7c7b\u578b\u7684\u7a0b\u5e8f\u901a\u5e38\u88ab\u79f0\u4e3a\u975e\u5355\u6001\u7a0b\u5e8f\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u5728\u8fd0\u884c\u65f6\u52a8\u6001\u521b\u5efa\u5b57\u5178\uff08\u4ee5\u53ca\u6cdb\u578b\u7c7b\u578b\u7684\u5b9e\u4f8b\u5316\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u80fd\u80fd\u591f\u5904\u7406\u8fd9\u4e9b\u4e0d\u53ef\u5355\u6001\u4ee3\u7801\u7684\u60c5\u51b5\u3002\n\u4e3a\u4e00\u7ec4\u7279\u5b9a\u7684gcshape\u7c7b\u578b\u53c2\u6570\u521b\u5efa\u6cdb\u578b\u51fd\u6570\u6216\u6cdb\u578b\u7c7b\u578b\u65b9\u6cd5\u7684\u7f16\u8bd1\u65f6\u5b9e\u4f8b\u5316\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u6709\u65f6\u5c06\u8fd9\u79cd\u5b9e\u4f8b\u5316\u79f0\u4e3a\u5f62\u72b6\u5b9e\u4f8b\u5316\u3002\u6211\u4eec\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u786e\u5b9a\u9700\u8981\u521b\u5efa\u54ea\u4e9b\u5f62\u72b6\u5b9e\u4f8b\u5316\uff0c\u5982\u4e0b\u9762\u7684\u201c\u8c03\u7528\u6cdb\u578b\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u7f16\u8bd1\u5668\u5904\u7406\u201d\u4e2d\u6240\u8ff0\u3002\u7ed9\u5b9a\u4e00\u7ec4gcshape\u7c7b\u578b\u53c2\u6570\uff0c\u6211\u4eec\u901a\u8fc7\u5728\u51fd\u6570/\u65b9\u6cd5\u4f53\u548c\u5934\u4e2d\u7528shape\u7c7b\u578b\u53c2\u6570\u66ff\u6362\u76f8\u5e94\u7684\u7c7b\u578b\u53c2\u6570\u6765\u521b\u5efa\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u6216\u65b9\u6cd5\u3002\u51fd\u6570\u4f53\u5305\u62ec\u51fd\u6570\u4e2d\u5305\u542b\u7684\u4efb\u4f55\u95ed\u5305\u3002\n\u5728\u66ff\u6362\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8fd8\u201c\u53d8\u6362\u201d\u4efb\u4f55\u76f8\u5173\u8282\u70b9\u3002\u65e7\u7684typechecker\uff08typecheck\u5305\uff09\u4e0d\u4ec5\u786e\u5b9a\u4e86\u51fd\u6570\u6216\u58f0\u660e\u4e2d\u6bcf\u4e2a\u8282\u70b9\u7684\u7c7b\u578b\uff0c\u8fd8\u5bf9\u4ee3\u7801\u8fdb\u884c\u4e86\u5404\u79cd\u8f6c\u6362\uff0c\u901a\u5e38\u8f6c\u6362\u4e3a\u66f4\u5177\u4f53\u7684\u8282\u70b9\u64cd\u4f5c\uff0c\u8fd8\u4e3a\u4efb\u4f55\u9690\u5f0f\u64cd\u4f5c\uff08\u5982\u8f6c\u6362\uff09\u751f\u6210\u663e\u5f0f\u8282\u70b9\u3002\u5728\u77e5\u9053\u64cd\u4f5c\u6570\u7684\u786e\u5207\u7c7b\u578b\u4e4b\u524d\uff0c\u901a\u5e38\u65e0\u6cd5\u8fdb\u884c\u8fd9\u4e9b\u8f6c\u6362\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4f1a\u5728\u70b9\u5934\u8fc7\u7a0b\u4e2d\u5ef6\u8fdf\u5c06\u8fd9\u4e9b\u8f6c\u6362\u5e94\u7528\u4e8e\u6cdb\u578b\u51fd\u6570\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5728\u8fdb\u884c\u7c7b\u578b\u66ff\u6362\u4ee5\u521b\u5efa\u5b9e\u4f8b\u5316\u65f6\u5e94\u7528\u8f6c\u6362\u3002\u5176\u4e2d\u8bb8\u591a\u8f6c\u6362\u5305\u62ec\u6dfb\u52a0\u9690\u5f0fOConvidace\u8282\u70b9\u3002\u5728\u786e\u5b9a\u5b9e\u4f8b\u5316\u7684\u5b57\u5178\u683c\u5f0f\u4e4b\u524d\uff0c\u663e\u5f0f\u8868\u793a\u6240\u6709OConvidace\u8282\u70b9\u975e\u5e38\u91cd\u8981\u3002\n\u5728\u521b\u5efa\u5b9e\u4f8b\u5316\u7684\u51fd\u6570/\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u8fd8\u4f1a\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a\u5b57\u5178\u53c2\u6570\u201c.dict\u201d\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u751a\u81f3\u5728\u65b9\u6cd5\u63a5\u6536\u8005\u4e4b\u524d\u3002\n\u6211\u4eec\u6709\u4e00\u4e2a\u5728\u8fd9\u4e2a\u5305\u7f16\u8bd1\u671f\u95f4\u5df2\u7ecf\u521b\u5efa\u7684\u5f62\u72b6\u5b9e\u4f8b\u5316\u7684\u54c8\u5e0c\u8868\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u91cd\u590d\u521b\u5efa\u76f8\u540c\u7684\u5b9e\u4f8b\u5316\u3002\u9664\u4e86\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u672c\u8eab\uff0c\u6211\u4eec\u8fd8\u4fdd\u5b58\u4e86\u4e0b\u9762\u63cf\u8ff0\u7684\u5b57\u5178\u4f20\u9012\u6240\u9700\u7684\u4e00\u4e9b\u989d\u5916\u4fe1\u606f\u3002\u8fd9\u5305\u62ec\u4e0e\u5b9e\u4f8b\u5316\u76f8\u5173\u8054\u7684\u5b57\u5178\u7684\u683c\u5f0f\uff0c\u4ee5\u53ca\u53ea\u80fd\u4ece\u6cdb\u578b\u51fd\u6570\uff08\u4f8b\u5982\u7c7b\u578b\u53c2\u6570\u7684\u8fb9\u754c\uff09\u8bbf\u95ee\u6216\u5f88\u96be\u76f4\u63a5\u4ece\u5b9e\u4f8b\u5316\u4f53\u8bbf\u95ee\u7684\u5176\u4ed6\u4fe1\u606f\u3002\u6211\u4eec\u8ba1\u7b97\u8fd9\u4e9b\u989d\u5916\u7684\u4fe1\u606f\uff08\u5b57\u5178\u683c\u5f0f\u7b49\uff09\uff0c\u4f5c\u4e3a\u521b\u5efa\u5b9e\u4f8b\u5316\u7684\u6700\u540e\u4e00\u6b65\u3002\n\u5728\u7f16\u8bd1\u5668\u4e2d\uff0c\u6cdb\u578b\u548c\u5b9e\u4f8b\u5316\u51fd\u6570\u548c\u65b9\u6cd5\u7684\u547d\u540d\u5982\u4e0b\uff1a\n\u6cdb\u578b\u65b9\u6cd5-\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u4f7f\u7528\u7684\u5e26\u6709\u7c7b\u578b\u53c2\u6570\u7684\u63a5\u6536\u5668\u7c7b\u578b\uff0c\u4ee5\u53ca\u65b9\u6cd5\u540d\u79f0\uff0c\u4f8b\u5982\uff08*value[T]\uff09\u3002\u8bbe\u7f6e\uff08\u63d0\u9192\u4e00\u4e0b\uff0c\u9664\u4e86\u63a5\u6536\u65b9\u7c7b\u578b\u7684\u7c7b\u578b\u53c2\u6570\u5916\uff0c\u65b9\u6cd5\u4e0d\u80fd\u6709\u4efb\u4f55\u989d\u5916\u7684\u7c7b\u578b\u53c2\u6570\u3002\uff09\n\u5b9e\u4f8b\u5316\u65b9\u6cd5\u2014\u2014\u5e26\u6709\u7c7b\u578b\u53c2\u6570\u7684\u63a5\u6536\u65b9\u7c7b\u578b\u548c\u65b9\u6cd5\u540d\u79f0\uff0c\u4f8b\u5982\uff08*value[int]\uff09\u3002\u8bbe\u7f6e\u6216\uff08*\u503c[go.shape.string_0]\uff09\u3002\u8bbe\u7f6e\n\u76ee\u524d\uff0c\u7531\u4e8e\u7f16\u8bd1\u5668\u4ec5\u4f7f\u7528\u5b57\u5178\uff08\u4ece\u4e0d\u4f7f\u7528\u7eaf\u6a21\u677f\uff09\uff0c\u56e0\u6b64\u901a\u5e38\u51fa\u73b0\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7684\u552f\u4e00\u51fd\u6570\u540d\u662f\u7531\u5f62\u72b6\u7c7b\u578b\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u548c\u65b9\u6cd5\u3002\u5982\u679c\u6240\u9700\u7684Itab\u5fc5\u987b\u5305\u542b\u5bf9\u8fd9\u4e9b\u5b8c\u5168\u5b9e\u4f8b\u5316\u65b9\u6cd5\u7684\u5f15\u7528\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b\u7531\u5177\u4f53\u7c7b\u578b\u5b9e\u4f8b\u5316\u7684\u65b9\u6cd5\uff08\u8bf7\u53c2\u9605\u4e0b\u9762\u7684&#34\uff1bItab\u5b57\u5178\u5305\u88c5\u5668&#34\uff1b\u90e8\u5206\uff09\n\u5b57\u5178\u7684\u547d\u540d\u7c7b\u4f3c\u4e8e\u76f8\u5173\u7684\u5b9e\u4f8b\u5316\u51fd\u6570\u6216\u65b9\u6cd5\uff0c\u4f46\u5e26\u6709\u201c.dict\u201d\u524d\u7f00\u3002\u4f8b\u5982\uff1a\u3002dict.Max[float64]\u548c\u3002\u6307\u4ee4\uff08*\u503c[int]\uff09\u3002\u6536\u5230\u5b57\u5178\u603b\u662f\u4e3a\u4e00\u7ec4\u5177\u4f53\u7684\u7c7b\u578b\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u5b57\u5178\u540d\u79f0\u4e2d\u4ece\u6765\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u53c2\u6570\u6216\u5f62\u72b6\u7c7b\u578b\u3002\n\u5b9e\u4f8b\u5316\u7684\u51fd\u6570\u548c\u65b9\u6cd5\u540d\u4e2d\u5305\u542b\u7684\u5177\u4f53\u7c7b\u578b\u540d\uff0c\u4ee5\u53ca\u5b57\u5178\u540d\uff0c\u90fd\u662f\u5b8c\u5168\u6307\u5b9a\u7684\uff08\u5305\u62ec\u5305\u540d\uff0c\u5982\u679c\u4e0d\u662f\u5185\u7f6e\u5305\u7684\u8bdd\uff09\u3002\u56e0\u6b64\uff0c\u5b9e\u4f8b\u5316\u51fd\u6570\u3001\u5b9e\u4f8b\u5316\u65b9\u6cd5\u548c\u5b57\u5178\u540d\u79f0\u662f\u552f\u4e00\u6307\u5b9a\u7684\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5728\u4efb\u4f55\u5305\u4e2d\u6309\u9700\u751f\u6210\uff0c\u94fe\u63a5\u5668\u5c06\u81ea\u52a8\u6d88\u9664\u540c\u4e00\u51fd\u6570\u3001\u65b9\u6cd5\u6216\u5b57\u5178\u7684\u591a\u4e2a\u5b9e\u4f8b\u7684\u91cd\u590d\u3002\n\u5bf9\u4e8e\u6cdb\u578b\u51fd\u6570\u6216\u6cdb\u578b\u7c7b\u578b\u65b9\u6cd5\u7684\u76f4\u63a5\u8c03\u7528\uff0c\u7f16\u8bd1\u5668\u5728\u8c03\u7528\u9002\u5f53\u7684\u5f62\u72b6\u5b9e\u4f8b\u5316\u65f6\u4f1a\u81ea\u52a8\u6dfb\u52a0\u989d\u5916\u7684\u521d\u59cb\u53c2\u6570\uff0c\u8fd9\u662f\u5fc5\u9700\u7684\u5b57\u5178\u3002\u8be5\u5b57\u5178\u53ef\u4ee5\u662f\u5bf9\u9759\u6001\u5b57\u5178\uff08\u5982\u679c\u5177\u4f53\u7c7b\u578b\u662f\u9759\u6001\u5df2\u77e5\u7684\uff09\u7684\u5f15\u7528\uff0c\u4e5f\u53ef\u4ee5\u662f\u5bf9\u5305\u542b\u51fd\u6570\u5b57\u5178\u7684\u5b50\u5b57\u5178\u7684\u5f15\u7528\u3002\u5982\u679c\u521b\u5efa\u4e86\u51fd\u6570\u503c\u3001\u65b9\u6cd5\u503c\u6216\u65b9\u6cd5\u8868\u8fbe\u5f0f\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c06\u81ea\u52a8\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\uff0c\u5728\u8c03\u7528\u51fd\u6570\u6216\u65b9\u6cd5\u503c\u6216\u65b9\u6cd5\u8868\u8fbe\u5f0f\u65f6\uff0c\u4f7f\u7528\u6b63\u786e\u7684\u5b57\u5178\u8c03\u7528\u76f8\u5e94\u7684\u5f62\u72b6\u5b9e\u4f8b\u5316\u3002\u5728\u751f\u6210\u5b8c\u5168\u5b9e\u4f8b\u5316\u6cdb\u578b\u7c7b\u578b\u7684itab\u7684\u6bcf\u4e2a\u6761\u76ee\u65f6\uff0c\u9700\u8981\u4e00\u4e2a\u7c7b\u4f3c\u7684\u95ed\u5305\u5305\u88c5\u5668\uff0c\u56e0\u4e3aitab\u6761\u76ee\u5fc5\u987b\u662f\u4e00\u4e2a\u63a5\u53d7\u9002\u5f53\u7684\u63a5\u6536\u65b9\u548c\u5176\u4ed6\u53c2\u6570\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u5b57\u5178\u3002\nTypes2 typechecker\uff08\u65b0\uff09-Types2 typechecker\u662f\u4e00\u79cd\u65b0\u7684typechecker\uff0c\u53ef\u4ee5\u5b8c\u6210\u901a\u7528\u7a0b\u5e8f\u7684\u9a8c\u8bc1\u548c\u7c7b\u578b\u68c0\u67e5\u3002\u5b83\u88ab\u7f16\u5199\u4e3a\u72ec\u7acb\u4e8e\u7f16\u8bd1\u5668\u7684\u5176\u4f59\u90e8\u5206\uff0c\u5e76\u4ee5\u4e00\u7ec4\u6620\u5c04\u7684\u5f62\u5f0f\u5c06\u5176\u8ba1\u7b97\u7684\u7c7b\u578b\u68c0\u67e5\u4fe1\u606f\u4f20\u9012\u7ed9\u7f16\u8bd1\u5668\u7684\u5176\u4f59\u90e8\u5206\u3002\n\u8282\u70b9\u901a\u884c\u8bc1\uff08\u9884\u5148\u5b58\u5728\uff0c\u4f46\u5b8c\u5168\u91cd\u5199\u4ee5\u4f7f\u7528type2 typechecker\u4fe1\u606f\uff09\u2014\u2014\u8282\u70b9\u901a\u884c\u8bc1\u521b\u5efair\u3002\u5f53\u524d\u5305\u4e2d\u6240\u6709\u51fd\u6570/\u65b9\u6cd5\u7684\u8282\u70b9\u8868\u793a\u5f62\u5f0f\u3002\u6211\u4eec\u4e3a\u6cdb\u578b\u548c\u975e\u6cdb\u578b\u51fd\u6570\u521b\u5efa\u8282\u70b9\u8868\u793a\u3002\u6211\u4eec\u4f7f\u7528\u6765\u81eatypes2 typechecker\u7684\u4fe1\u606f\u6765\u8bbe\u7f6e\u6bcf\u4e2a\u8282\u70b9\u7684\u7c7b\u578b\u3002\u6cdb\u578b\u51fd\u6570\u4e2d\u7684\u5404\u79cd\u8282\u70b9\u53ef\u80fd\u5177\u6709\u4f9d\u8d56\u4e8e\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u3002\u5bf9\u4e8e\u975e\u6cdb\u578b\u51fd\u6570\uff0c\u6211\u4eec\u8fdb\u884c\u4e0e\u65e7\u7684typechecker\u76f8\u5173\u7684\u5e38\u89c4\u8f6c\u6362\uff0c\u5982\u4e0a\u6240\u8ff0\u3002\u6211\u4eec\u4e0d\u4f1a\u5bf9\u6cdb\u578b\u51fd\u6570\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u4e3a\u8bb8\u591a\u8f6c\u6362\u90fd\u4f9d\u8d56\u4e8e\u5177\u4f53\u7684\u7c7b\u578b\u4fe1\u606f\u3002\n\u5728\u70b9\u5934\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u6e90\u4ee3\u7801\u4e2d\u5df2\u7ecf\u5b58\u5728\u7684\u6bcf\u4e2a\u5b8c\u5168\u5b9e\u4f8b\u5316\u7684\u975e\u63a5\u53e3\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u4efb\u4f55\u51fd\u6570\uff08\u6cdb\u578b\u6216\u975e\u6cdb\u578b\uff09\u90fd\u53ef\u80fd\u78b0\u5de7\u6307\u5b9a\u201cList[int]\u201d\u7c7b\u578b\u7684\u53d8\u91cf\u3002\u6211\u4eec\u5728\u5bfc\u5165\u6240\u9700\u7684\u51fd\u6570\u4f53\u65f6\u4e5f\u4f1a\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff08\u8981\u4e48\u56e0\u4e3a\u5b83\u662f\u5c06\u88ab\u5b9e\u4f8b\u5316\u7684\u901a\u7528\u51fd\u6570\uff0c\u8981\u4e48\u56e0\u4e3a\u5b83\u662f\u5185\u8054\u6240\u9700\u7684\uff09\u3002\n\u53ef\u5bfc\u51fa\u6cdb\u578b\u51fd\u6570\u7684\u4e3b\u4f53\u59cb\u7ec8\u662f\u5bfc\u51fa\u7684\uff0c\u56e0\u4e3a\u5bfc\u51fa\u7684\u6cdb\u578b\u51fd\u6570\u53ef\u80fd\u4f1a\u88ab\u8c03\u7528\uff0c\u56e0\u6b64\u9700\u8981\u5728\u5f15\u7528\u5b83\u7684\u4efb\u4f55\u5176\u4ed6\u5305\u4e2d\u5b9e\u4f8b\u5316\u3002\u7c7b\u4f3c\u5730\uff0c\u53ef\u5bfc\u51fa\u6cdb\u578b\u7c7b\u578b\u7684\u65b9\u6cd5\u4f53\u4e5f\u603b\u662f\u5bfc\u51fa\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5728\u5b9e\u4f8b\u5316\u6cdb\u578b\u7c7b\u578b\u65f6\u5b9e\u4f8b\u5316\u8fd9\u4e9b\u65b9\u6cd5\u3002\u5982\u679c\u672a\u62a5\u544a\u7684\u6cdb\u578b\u51fd\u6570\u548c\u7c7b\u578b\u88ab\u53ef\u5185\u8054\u51fd\u6570\u5f15\u7528\uff0c\u5219\u53ef\u80fd\u9700\u8981\u5bfc\u51fa\u5b83\u4eec\uff08\u8bf7\u53c2\u89c1crawler.go\uff09\n\u626b\u63cf\u4f20\u9012\uff08\u65b0\uff09-\u4f20\u9012\u6240\u6709\u975e\u6cdb\u578b\u51fd\u6570\u548c\u5b9e\u4f8b\u5316\u51fd\u6570\uff0c\u4ee5\u67e5\u627e\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u5f15\u7528\u3002\u5728\u4efb\u4f55\u8fd9\u6837\u7684\u5f15\u7528\u4e2d\uff0c\u5b83\u90fd\u4f1a\u521b\u5efa\u6240\u9700\u7684\u5f62\u72b6\u5b9e\u4f8b\u5316\uff08\u5982\u679c\u5728\u5f53\u524d\u7f16\u8bd1\u671f\u95f4\u5c1a\u672a\u521b\u5efa\uff09\uff0c\u5e76\u5c06\u5f15\u7528\u8f6c\u6362\u4e3a\u4f7f\u7528\u5f62\u72b6\u5b9e\u4f8b\u5316\u5e76\u4f20\u9012\u5230\u76f8\u5e94\u7684\u5b57\u5178\u4e2d\u3002\u626b\u63cf\u8fc7\u7a0b\u4f1a\u5728\u6240\u6709\u65b0\u521b\u5efa\u7684\u5b9e\u4f8b\u5316\u51fd\u6570/\u65b9\u6cd5\u4e0a\u91cd\u590d\u6267\u884c\uff0c\u76f4\u5230\u4e0d\u518d\u521b\u5efa\u5b9e\u4f8b\u5316\u4e3a\u6b62\u3002\n\u5728\u626b\u63cf\u8fc7\u7a0b\u7684\u6bcf\u6b21\u8fed\u4ee3\u5f00\u59cb\u65f6\uff0c\u6211\u4eec\u4e3a\u6bcf\u4e2a\u5b8c\u5168\u5b9e\u4f8b\u5316\u7684\u7c7b\u578b\u521b\u5efa\u6240\u9700\u7684\u6240\u6709\u5b9e\u4f8b\u5316\u65b9\u6cd5\u548c\u5b57\u5178\uff0c\u8fd9\u4e9b\u7c7b\u578b\u662f\u81ea\u626b\u63cf\u8fc7\u7a0b\u7684\u6700\u540e\u4e00\u6b21\u8fed\u4ee3\uff08\u6216\u8005\u5728\u626b\u63cf\u8fc7\u7a0b\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u4ece\u8282\u70b9\u8fc7\u7a0b\uff09\u4ee5\u6765\u770b\u5230\u7684\u3002\u8fd9\u786e\u4fdd\u4e86\u5728\u521b\u5efa\u8fd0\u884c\u65f6\u7c7b\u578b\u63cf\u8ff0\u7b26\u548cITAB\uff08\u5305\u62ec\u5b57\u5178\u4e2d\u6240\u9700\u7684ITAB\uff09\u65f6\uff0c\u6240\u9700\u7684\u65b9\u6cd5\u5b9e\u4f8b\u5316\u53ef\u7528\u3002\n\u5bf9\u4e8e\u6b63\u5728\u626b\u63cf\u7684\u51fd\u6570\u4e2d\u5bf9\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u6bcf\u4e2a\u5f15\u7528\uff0c\u6211\u4eec\u786e\u5b9a\u7c7b\u578b\u53c2\u6570\u7684GC\u5f62\u72b6\u3002\u5982\u679c\u6211\u4eec\u8fd8\u6ca1\u6709\u7528\u8fd9\u4e9b\u5f62\u72b6\u53c2\u6570\u521b\u5efa\u6240\u9700\u7684\u5b9e\u4f8b\u5316\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362\u6cdb\u578b\u51fd\u6570\u5934\u548c\u51fd\u6570\u4f53\u4e0a\u7684\u7c7b\u578b\u6765\u521b\u5efa\u5b9e\u4f8b\u5316\u3002\u6cdb\u578b\u51fd\u6570\u53ef\u80fd\u6765\u81ea\u53e6\u4e00\u4e2a\u5305\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u5bfc\u5165\u5b83\u7684\u51fd\u6570\u4f53\u3002\u4e00\u65e6\u6211\u4eec\u521b\u5efa\u4e86\u5b9e\u4f8b\u5316\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u786e\u5b9a\u5173\u8054\u5b57\u5178\u7684\u683c\u5f0f\u3002\u6211\u4eec\u7528\u8c03\u7528\uff08\u53ef\u80fd\u5728\u95ed\u5305\u4e2d\uff09\u66ff\u6362\u5bf9\u6cdb\u578b\u51fd\u6570/\u65b9\u6cd5\u7684\u5f15\u7528\uff0c\u7528\u6240\u9700\u7684\u5b57\u5178\u53c2\u6570\u8c03\u7528\u6240\u9700\u7684\u5b9e\u4f8b\u5316\u3002\u5982\u679c\u5f15\u7528\u4f4d\u4e8e\u975e\u6cdb\u578b\u51fd\u6570\u4e2d\uff0c\u90a3\u4e48\u6240\u9700\u7684dictionary\u53c2\u6570\u5c06\u662f\u9876\u7ea7\u9759\u6001dictionary\u3002\u5982\u679c\u5f15\u7528\u5728\u5f62\u72b6\u5b9e\u4f8b\u5316\u4e2d\uff0c\u90a3\u4e48dictionary\u53c2\u6570\u5c06\u662f\u5305\u542b\u51fd\u6570\u7684dictionary\u4e2d\u7684\u5b50dictionary\u6761\u76ee\u3002\u6211\u4eec\u6839\u636e\u9700\u8981\u4f7f\u7528\u5b57\u5178\u683c\u5f0f\u4fe1\u606f\u8ba1\u7b97\u9876\u7ea7\u5b57\u5178\uff08\u4ee5\u53ca\u5b83\u4eec\u6240\u9700\u7684\u6240\u6709\u5b50\u5b57\u5178\uff0c\u9012\u5f52\uff09\u3002\n\u4e0e\u8282\u70b9\u4f20\u9012\u4e00\u6837\uff0c\u6211\u4eec\u8bb0\u5f55\u521b\u5efa\u7684\u4efb\u4f55\u65b0\u7684\u5b8c\u5168\u5b9e\u4f8b\u5316\u7684\u975e\u63a5\u53e3\u7c7b\u578b\u3002\u5728\u626b\u63cf\u8fc7\u7a0b\u4e2d\uff0c\u7531\u4e8e\u7c7b\u578b\u66ff\u6362\uff0c\u5c06\u521b\u5efa\u6b64\u7c7b\u578b\u3002\u901a\u5e38\uff0c\u5b83\u5c06\u7528\u4e8e\u6d3e\u751f\u7c7b\u578b\u7684\u5b57\u5178\u6761\u76ee\u3002\u5982\u679c\u6211\u4eec\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f7f\u7528\u7eaf\u6a21\u677f\uff0c\u90a3\u4e48\u5728\u7eaf\u6a21\u677f\u51fd\u6570\uff08\u6ca1\u6709\u5b57\u5178\uff09\u4e2d\u521b\u5efa\u5177\u4f53\u7c7b\u578b\u65f6\u4e5f\u4f1a\u53d1\u751f\u7c7b\u4f3c\u7684\u60c5\u51b5\u3002\n\u5b57\u5178\u4f20\u9012\uff08new\uff09\u2014\u2014\u4f20\u9012\u6240\u6709\u5b9e\u4f8b\u5316\u51fd\u6570/\u65b9\u6cd5\uff0c\u8f6c\u6362\u9700\u8981\u5b57\u5178\u6761\u76ee\u7684\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u5305\u62ec\u5bf9\u7c7b\u578b\u53c2\u6570\u7ed1\u5b9a\u7684\u65b9\u6cd5\u7684\u8c03\u7528\u3001\u53c2\u6570\u5316\u7c7b\u578b\u5230\u63a5\u53e3\u7684\u8f6c\u6362\uff0c\u4ee5\u53ca\u53c2\u6570\u5316\u7c7b\u578b\u4e0a\u7684\u7c7b\u578b\u65ad\u8a00\u548c\u7c7b\u578b\u5f00\u5173\u3002\u8fd9\n......", "note_en": "This document describes the implementation of generics via dictionaries andgcshape stenciling in Go 1.18. It provides more concrete and up-to-dateinformation than described in the  Gcshape design document\n The compiler implementation of generics (after typechecking) focuses mainly on creating instantiations of generic functions and methods that will execute with arguments that have concrete types. In order to avoid creating a different function instantiation for each invocation of a generic function/method with distinct type arguments (which would be pure stenciling), we pass a  dictionary along with every call to a generic function/method. The  dictionary provides relevant information about the type arguments that allows a single function instantiation to run correctly for many distinct type arguments.\n However, for simplicity (and performance) of implementation, we do not have a single compilation of a generic function/method for all possible type arguments. Instead, we share an instantiation of a generic function/method among sets of type arguments that have the same gcshape.\n  A  gcshape (or  gcshape grouping) is a collection of types that can all share the same instantiation of a generic function/method in our implementation when specified as one of the type arguments. So, for example, in the case of a generic function with a single type parameter, we only need one function instantiation for all type arguments in the same  gcshape grouping. Similarly, for a method of a generic type with a single type parameter, we only need one instantiation for all type arguments (of the generic type) in the same gcshape grouping. A  gcshape type is a specific type that we use in the implementation in such an instantiation to fill in for all types of the gcshape grouping.\n We are currently implementing gcshapes in a fairly fine-grained manner. Two concrete types are in the same gcshape grouping if and only if they have the same underlying type or they are both pointer types. We are intentionally defining gcshapes such that we don\u2019t ever need to include any operator methods (e.g. the implementation of the \u201c+\u201d operator for a specified type arg) in a dictionary. In particular, fundamentally different built-in types such as  int and  float64 are never in the same gcshape. Even  int16 and  int32 have distinct operations (notably left and right shift), so we don\u2019t put them in the same gcshape. Similarly, we intend that all types in a gcshape will always implement builtin methods (such as  make /  new /  len ) in the same way. We could include some very closely related built-in types (such as  uint and  uintptr) in the same gcshape, but are not currently doing that. This is already implied by our current fine-grain gcshapes, but we also always want an interface type to be in a different gcshape from a non-interface type (even if the non-interface type has the same two-field structure as an interface type). Interface types behave very differently from non-interface types in terms of calling methods, etc.\n We currently name each gcshape type based on the unique string representation (as implemented in  types.LinkString) of its underlying type. We put all shape types in a unique builtin-package \u201c go.shape\u201d. For implementation reasons (see next section), we happen to include in the name of a gcshape type the index of the gcshape argument in the type parameter list. So, a type with underlying type \u201cstring\u201d would correspond to a gcshape type named \u201c go.shape.string_0\u201d or \u201c go.shape.string_1\u201d, depending on whether the type is used as the first or second type argument of a generic function or type. All pointer types are named after a single example type  *uint8, so the names of gcshapes for pointer shapes are  go.shape.*uint8_0,  go.shape.*uint8_1, etc.\n We refer to an instantiation of a generic function or method for a specific set of shape type arguments as a  shape instantiation.\n  Each dictionary is statically defined at compile-time. A dictionary corresponds to a call site in a program where a specific generic function/method is called with a specific set of concrete type arguments. A dictionary is needed whenever a generic function/method is called, regardless if called from a non-generic or generic function/method. A dictionary is currently named after the fully-qualified generic function/method name being called and the names of the concrete type arguments. Two example dictionary names are  main..dict.Map[int,bool] and  main..dict.mapCons[int,bool].Apply). These are the dictionaries needed for a call or reference to  main.Map[int, bool]() and  rcvr.Apply(), where  rcvr has type  main.mapCons[int, bool]. The dictionary contains the information needed to execute a gcshape-based instantiation of that generic function/method with those concrete type arguments. Dictionaries with the same name are fully de-duped (by some combination of the compiler and the linker).\n We can gather information on the expected format of a dictionary by analyzing the shape instantiation of a generic function/method. We analyze an instantiation, instead of the generic function/method itself, because the required dictionary entries can depend on the shape arguments - notably whether a shape argument is an interface type or not. It is important that the instantiation has been \u201ctransformed\u201d enough that all implicit interface conversions ( OCONVIFACE) have been made explicit. Explicit or implicit interface conversions (in particular, conversions to non-empty interfaces) may require an extra entry in the dictionary.\n In order to create the dictionary entries, we often need to substitute the shape type arguments with the real type arguments associated with the dictionary. The shape type arguments must therefore be fully distinguishable, even if several of the type arguments happen to have the same shape (e.g. they are both pointer types). Therefore, as mentioned above, we actually add the index of the type parameter to the shape type, so that different type arguments can be fully distinguished correctly.\n  The list of all (or needed) derived types, which appear in or are implicit in some way in the generic function/method, substituted with the concrete type arguments. That is, the list of concrete types that are specifically derived from the type parameters of the function/method (e.g.  *T,  []T,  map[K, V], etc) and used in some way in the generic function/method.\n We currently use the derived types for several cases where we need the runtime type of an expression. These cases include explicit or implicit conversions to an empty interface, and type assertions and type switches, where the type of the source value is an empty interface.\n The derived type and type argument entries are also used at run time by the debugger to determine the concrete type of arguments and local variables. At compile time, information about the type argument and derived type dictionary entries is emitted with the DWARF info. For each argument or local variable that has a parameterized type, the DWARF info also indicates the dictionary entry that will contain the concrete type of the argument or variable.\n The list of all sub-dictionaries: A sub-dictionary is needed for a generic function/method call inside a generic function/method, where the type arguments of the inner call depend on the type parameters of the outer function. Sub-dictionaries are similarly needed for function/method values and method expressions that refer to generic functions/methods.\n A sub-dictionary entry points to the normal top-level dictionary that is needed to execute the called function/method with the required type arguments, as substituted using the type arguments of the dictionary of the outer function.\n Any specific itabs needed for conversion to a specific non-empty interface from a type param or derived type. There are currently four main cases where we use dictionary-derived itabs. In all cases, the itab must come from the dictionary, since it depends on the type arguments of the current function. For all explicit or implicit  OCONVIFACE calls from a non-interface type to a non-empty interface. The itab is used to create the destination interface.\n For all method calls on a type parameter (which must be to a method in the type parameter\u2019s bound). This method call is implemented as a conversion of the receiver to the type bound interface, and hence is handled similarly to an implicit  OCONVIFACE call.\n For all type assertions from a non-empty interface to a non-interface type. The itab is needed to implement the type assertion.\n For type switch cases that involve a non-interface type derived from the type params, where the value being switched on has a non-empty interface type. As with type assertions, the itab is needed to implement the type switch.\n We have decided that closures in generic functions/methods that reference generic values/types should use the same dictionary as their containing function/method. Therefore, a dictionary for an instantiated function/method should include all the entries needed for all bodies of the closures it contains as well.\n The current implementation may have duplicate subdictionary entries and/or duplicate itab entries. The entries can clearly be deduplicated and shared with a bit more work in the implementation. For some unusual cases, there may also be some unused dictionary entries that could be optimized away.\n  Our choice to compute all dictionaries and sub-dictionaries at compile time does mean that there are some programs that we cannot run. We must have a dictionary for each possible instantiation of a generic function/method with specific concrete types. Because we require all dictionaries to be created statically at compile-time, there must be a finite, known set of types that are used for creating function/method instantiations. Therefore, we cannot handle programs that, via recursion of generic functions/methods, can create an unbounded number of distinct types (typically by repeated nesting of a generic type). A typical example is shown in  issue #48018. These types of programs are often called  non-monomorphisable. If we could create dictionaries (and instantiations of generic types) dynamically at run-time, then we might be able to handle some of these cases of non-monomorphisable code.\n  A compile-time instantiation of a generic function or method of a generic type is created for a specific set of gcshape type arguments. As mentioned above, we sometimes call such an instantiation a  shape instantiation. We determine on-the-fly during compilation which shape instantiations need to be created, as described below in \u201cCompiler processing for calls to generic functions and methods\u201d. Given a set of gcshape type arguments, we create an instantiated function or method by substituting the shape type arguments for the corresponding type parameters throughout the function/method body and header. The function body includes any closures contained in the function.\n During the substitution, we also \u201ctransform\u201d any relevant nodes. The old typechecker (the  typecheck package) not only determined the type of every node in a function or declaration, but also did a variety of transformations of the code, usually to a more specific node operation, but also to make explicit nodes for any implicit operations (such as conversions). These transformations often cannot be done until the exact type of the operands are known. So, we delay applying these transformations to generic functions during the noding process. Instead, we apply the transforms while doing the type substitution to create an instantiation. A number of these transformations include adding implicit  OCONVIFACE nodes. It is important that all  OCONVIFACE nodes are represented explicitly before determining the dictionary format of the instantiation.\n When creating an instantiated function/method, we also automatically add a dictionary parameter \u201c.dict\u201d as the first parameter, preceding even the method receiver.\n We have a hash table of shape instantiations that have already been created during this package compilation, so we do not need to create the same instantiation repeatedly. Along with the instantiated function itself, we also save some extra information that is needed for the dictionary pass described below. This includes the format of the dictionary associated with the instantiation and other information that is only accessible from the generic function (such as the bounds of the type params) or is hard to access directly from the instantiation body. We compute this extra information (dictionary format, etc.) as the final step of creating an instantiation.\n  In the compiler, the naming of generic and instantiated functions and methods is as follows:\n generic method - the receiver type with the type parameter that is used in the method definition, and the method name, such as  (*value[T]).Set. (As a reminder, a method cannot have any extra type parameters besides the type parameters of its receiver type.)\n instantiated method - the receiver type with the type argument, and the method name, such as  (*value[int]).Set or  (*value[go.shape.string_0]).Set.\n Currently, because the compiler is using only dictionaries (never pure stenciling), the only function names that typically appear in the executable are the function and methods instantiated by shape types. Some methods instantiated by concrete types can appear if there are required itabs that must include references to these fully-instantiated methods (see the &#34;Itab dictionary wrappers&#34; section just below)\n Dictionaries are named similarly to the associated instantiated function or method, but with \u201c.dict\u201d preprended. So, examples include:  .dict.Max[float64] and  .dict.(*value[int]).get . A dictionary is always defined for a concrete set of types, so there are never any type params or shape types in a dictionary name.\n The concrete type names that are included in instantiated function and method names, as well as dictionary names, are fully-specified (including the package name, if not the builtin package). Therefore, the instantiated function, instantiated method, and dictionary names are uniquely specified. Therefore, they can be generated on demand in any package, as needed, and multiple instances of the same function, method, or dictionary will automatically be de-duplicated by the linker.\n  For direct calls of generic functions or methods of generic types, the compiler automatically adds an extra initial argument, which is the required dictionary, when calling the appropriate shape instantiation. That dictionary may be either a reference to a static dictionary (if the concrete types are statically known) or to a sub-dictionary of the containing function\u2019s dictionary. If a function value, method value, or method expression is created, then the compiler will automatically create a closure that calls the appropriate shape instantiation with the correct dictionary when the function or method value or method expression is called. A similar closure wrapper is needed when generating each entry of the itab of a fully-instantiated generic type, since an itab entry must be a function that takes the appropriate receiver and other arguments, but no dictionary.\n   Types2 typechecker (new) - the types2-typechecker is a new typechecker which can do complete validation and typechecking of generic programs. It is written to be independent of the rest of the compiler, and passes the typechecking information that it computes to the rest of the compiler in a set of maps.\n Noder pass (pre-existing, but completely rewritten to use the type2 typechecker information) - the noder pass creates the ir.Node representation of all functions/methods in the current package. We create node representations for both generic and non-generic functions. We use information from the types2-typechecker to set the type of each Node. Various nodes in generic functions may have types that depend on the type parameters. For non-generic functions, we do the normal transformations associated with the old typechecker, as mentioned above. We do not do the transformations for generic functions, since many of the transformations are dependent on concrete type information.\n During noding, we record each fully-instantiated non-interface type that already exists in the source code. For example, any function (generic or non-generic) might happen to specify a variable of type \u2018 List[int]\u2019. We do the same thing when importing a needed function body (either because it is a generic function that will be instantiated or because it is needed for inlining).\n The body of an exportable generic function is always exported, since an exported generic function may be called and hence need to be instantiated in any other package in which it is referenced. Similarly, the bodies of the methods of an exportable generic type are also always exported, since we need to instantiate these methods whenever the generic type is instantiated. Unexported generic functions and types may need to be exported if they are referenced by an inlinable function (see  crawler.go)\n Scan pass (new) - a pass over all non-generic functions and instantiated functions that looks for references to generic functions/methods. At any such reference, it creates the required shape instantiation (if not yet created during the current compilation) and transforms the reference to use the shape instantiation and pass in the appropriate dictionary. The scan pass is executed repeatedly over all newly created instantiated functions/methods, until there are no more instantiations that have been created.\n At the beginning of each iteration of the scan pass, we create all the instantiated methods and dictionaries needed for each fully-instantiated type that has been seen since the last iteration of the scan pass (or from the noder pass, in the case of the first iteration of the scan pass). This ensures that the required method instantiations will be available when creating runtime type descriptors and itabs, including the itabs needed in dictionaries.\n For each reference to a generic function/method in a function being scanned, we determine the GC shapes of the type arguments. If we haven\u2019t already created the needed instantiation with those shape arguments, we create the instantiation by doing a substitution of types on the generic function header and body. The generic function may be from another package, in which case we need to import its function body. Once we have created the instantiation, we can then determine the format of the associated dictionary. We replace the reference to the generic function/method with a call (possibly in a closure) to the required instantiation with the required dictionary argument. If the reference is in a non-generic function, then the required dictionary argument will be a top-level static dictionary. If the reference is in a shape instantiation, then the dictionary argument will be a sub-dictionary entry from the dictionary of the containing function. We compute top-level dictionaries (and all their required sub-dictionaries, recursively) on demand as needed using the dictionary format information.\n As with the noder pass, we record any new fully-instantiated non-interface type that is created. In the case of the scan pass, this type will be created because of type substitution. Typically, it will be for dictionary entries for derived types. If we were doing pure stenciling in some cases, then it would happen analogously when creating the concrete types in a purely stenciled function (no dictionaries).\n Dictionary pass (new) - a pass over all instantiated functions/methods that transforms operations that require a dictionary entry. These operations include calls to a method of a type parameter\u2019s bound, conversion of a parameterized type to an interface, and type assertions and type switches on a parameterized type. This\n......", "posttime": "2022-03-02 05:02:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b9e\u73b0,generics,\u7c7b\u578b", "title": "Go 1.18\u4e2d\u5982\u4f55\u5b9e\u73b0\u6cdb\u578b", "title_en": "How generics are implemented in Go 1.18", "transed": 1, "url": "https://github.com/golang/proposal/blob/master/design/generics-implementation-dictionaries-go1.18.md", "via": "", "real_tags": ["\u5b9e\u73b0", "generics", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075156, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u533b\u5b66\u4e13\u5bb6\u4eec\u53d1\u8868\u4e86\u4e00\u6279\u7cdf\u7cd5\u7684\u65b0\u95fb\u6587\u7ae0\uff0c\u9519\u8bef\u5730\u5ba3\u79f0\u53d8\u8d28\u7684\u4e2d\u9910\u6b8b\u6e23\u5bfc\u81f4\u4e00\u540d\u9752\u5c11\u5e74\u5728\u6570\u5c0f\u65f6\u5185\u611f\u67d3\u4e86\u5371\u53ca\u751f\u547d\u7684\u75be\u75c5\uff0c\u5bfc\u81f4\u4ed6\u819d\u76d6\u4ee5\u4e0b\u7684\u53cc\u817f\u548c\u5168\u90e810\u4e2a\u624b\u6307\u7684\u90e8\u5206\u88ab\u622a\u80a2\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u540d19\u5c81\u7684\u7537\u6027\u56e0\u8840\u6db2\u611f\u67d3\u4e00\u79cd\u5bfc\u81f4\u8111\u819c\u708e\u7403\u83cc\u75be\u75c5\u7684\u7ec6\u83cc\u800c\u60a3\u4e0a\u4e86\u7f55\u89c1\u4e14\u6781\u5176\u4e25\u91cd\u7684\u5e76\u53d1\u75c7\u3002\u8fd9\u79cd\u88ab\u79f0\u4e3a\u8111\u819c\u708e\u5948\u745f\u83cc\u7684\u7ec6\u83cc\u4e0d\u662f\u98df\u6e90\u6027\u7684\uff0c\u5176\u6f5c\u4f0f\u671f\u8d85\u8fc7\u51e0\u4e2a\u5c0f\u65f6\u3002\n\u8111\u819c\u708e\u5948\u745f\u83cc\u65e0\u5bb3\u5730\u5728\u5927\u7ea610%\u7684\u4eba\u7684\u9f3b\u5b50\u548c\u5589\u5499\u4e2d\u7e41\u6b96\u3002\u5b83\u901a\u8fc7\u975e\u5e38\u5bc6\u5207\u7684\u63a5\u89e6\u548c\u76f4\u63a5\u4ea4\u6362\u553e\u6db2\u4f20\u64ad\uff0c\u5982\u54b3\u55fd\u3001\u4eb2\u543b\u548c\u4f4f\u5728\u5bbf\u820d\u7b49\u8fd1\u8ddd\u79bb\u73af\u5883\u4e2d\u3002\u8003\u8651\u5230\u7fa4\u4f53\u73af\u5883\u4e2d\u7684\u98ce\u9669\uff0c\u8bb8\u591a\u5b66\u9662\u548c\u5927\u5b66\u8981\u6c42\u5b66\u751f\u5728\u5165\u5b66\u524d\u63a5\u79cd\u8111\u819c\u708e\u7403\u83cc\u75ab\u82d7\u3002\u7136\u800c\uff0c\u4ece\u672a\u6709\u8fc7\u8111\u819c\u708e\u5948\u745f\u83cc\u901a\u8fc7\u98df\u7269\u4f20\u64ad\u7684\u8bb0\u5f55\u75c5\u4f8b\u3002\n\u4f46\u4f60\u53ef\u80fd\u6ca1\u6709\u4ece\u5927\u91cf\u7684\u65b0\u95fb\u6587\u7ae0\u4e2d\u5f97\u5230\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u6587\u7ae0\u4f20\u64ad\u4e86\u4e00\u4e2a\u4ee4\u4eba\u62c5\u5fe7\u7684\u5efa\u8bae\uff0c\u5373\u5982\u679c\u4f60\u6562\u5403\u4e00\u53e3\uff0c\u6f5c\u4f0f\u5728\u51b0\u7bb1\u540e\u9762\u7684\u88ab\u9057\u5fd8\u7684\u5916\u5356\u53ef\u80fd\u4f1a\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u6740\u6b7b\u4f60\u3002\u8fd9\u4e2a\u9519\u8bef\u7684\u8b66\u544a\u5f88\u53ef\u80fd\u662f\u7531YouTuber Bernard Hsu\uff08\u88ab\u79f0\u4e3aChubbyemu\uff09\u6240\u653e\u5927\u7684\uff0c\u4ed6\u53d1\u5e03\u4e86\u4e00\u7bc7\u5173\u4e8e\u6b64\u6848\u7684\u957f\u7bc7\u620f\u5267\u5316\u62a5\u9053\uff0c\u88ab\u6d4f\u89c8\u4e86150\u4e07\u6b21&#34;\u6211\u4e0d&#39\uff1bDon\u2019\u6211\u4e0d\u60f3\u8ba9\u4efb\u4f55\u4eba\u5bb3\u6015\u98df\u7269\u6216\u5269\u83dc\uff0c&#34\uff1b\u4ed6\u4e00\u5f00\u59cb\u8bf4\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u6848\u5b50\u79f0\u4e3a&#34\uff1b\u5947\u602a\u7684\u4e8b\u6545&#34;\n\u771f\u6b63\u7684\u4e8b\u6545\u662f\u56e0\u4e3a\u8bef\u8bfb\u4e86\u8fd9\u540d\u7537\u5b50\u7684\u75c5\u5386&#39\uff1b\u4e00\u5e74\u591a\u524d\u53d1\u8868\u5728\u300a\u65b0\u82f1\u683c\u5170\u533b\u5b66\u6742\u5fd7\u300b\u4e0a\u7684\u4e00\u7bc7\u6587\u7ae0\u3002NEJM\u5b9a\u671f\u5728\u9898\u4e3a&#34\uff1b\u9a6c\u8428\u8bf8\u585e\u5dde\u603b\u533b\u9662\u7684\u75c5\u4f8b\u8bb0\u5f55&#34; \u51fa\u4e8e\u6559\u80b2\u76ee\u7684\uff0c\u8fd9\u4e9b\u8bb0\u5f55\u4ee5\u89e3\u91ca\u7684\u65b9\u5f0f\u5448\u73b0\u4e86\u4e0d\u5bfb\u5e38\u6216\u4ee4\u4eba\u8d39\u89e3\u7684\u533b\u7597\u6848\u4f8b\u3002\u8fd9\u4e9b\u6587\u7ae0\u603b\u662f\u5217\u51fa\u5982\u4f55\u5904\u7406\u7279\u5b9a\u75c5\u4f8b\uff0c\u4ece\u60a3\u8005\u7b2c\u4e00\u6b21\u5411\u533b\u751f\u4ecb\u7ecd\u60c5\u51b5\u548c\u4ed6\u4eec\u63d0\u4f9b\u7684\u75c5\u53f2\u5f00\u59cb\uff0c\u7136\u540e\u7ecf\u5386\u4e3b\u6cbb\u533b\u751f\u6240\u505a\u7684\u6d4b\u8bd5\u3001\u6b65\u9aa4\u548c\u51b3\u5b9a\u3002\u6587\u7ae0\u7684\u7ed3\u5c3e\u662f\u533b\u751f&#39\uff1b\u6700\u7ec8\u8bca\u65ad\u3001\u6cbb\u7597\u548c\u60a3\u8005#39\uff1b\u8fd9\u5c31\u662f\u7ed3\u679c\u3002\n\u57282021\u5e743\u6708\u7684\u75c5\u4f8b\u8bb0\u5f55\u4e2d\uff0c\u4e00\u540d19\u5c81\u7537\u6027\u56e0\u4f11\u514b\u3001\u591a\u5668\u5b98\u8870\u7aed\u548c\u76ae\u75b9\u8fdb\u5165\u513f\u79d1ICU\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f00\u5934\u63cf\u8ff0\u4e86\u533b\u751f\u4eec\u6b63\u5728\u5bf9\u9752\u5c11\u5e74\u8fdb\u884c\u6b63\u5e38\u7684\u68c0\u67e5#39\uff1b\u4ed6\u6709\u75c5\u53f2\uff0c\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u4ed6\u66fe\u62a5\u544a\u5403\u4e86#34\uff1b\u7c73\u996d\u3001\u9e21\u8089\u548c\u9910\u9986\u5269\u996d&#34\uff1b\u5728\u91cd\u75c7\u76d1\u62a4\u5ba4\u7740\u9646\u524d\u5927\u7ea620\u5c0f\u65f6\u3002\u4ed6\u62a5\u544a\u996d\u540e\u6076\u5fc3\u3001\u5455\u5410\u548c\u8179\u75db\uff0c\u8fd9\u53ef\u80fd\u4e0e\u5269\u996d\u6709\u5173\u3002\u4f46\u8fd9\u4e9b\u75c7\u72b6\u4e4b\u540e\u4f1a\u51fa\u73b0\u5bd2\u6218\u3001\u5168\u8eab\u65e0\u529b\u3001\u9010\u6e10\u6076\u5316\u7684\u5f25\u6f2b\u6027\u808c\u8089\u75bc\u75db\u3001\u80f8\u75db\u3001\u547c\u5438\u77ed\u4fc3\u3001\u5934\u75db\u3001\u9888\u90e8\u50f5\u786c\u548c\u89c6\u529b\u6a21\u7cca\u3002\u75c5\u53f2\u8fd8\u6307\u51fa\uff0c\u60a3\u8005\u7684\u4e00\u4f4d\u670b\u53cb\u4e5f\u5403\u4e86\u88ab\u8bfd\u8c24\u7684\u5269\u83dc\uff0c\u4e0d\u4e45\u540e\u5455\u5410\uff0c\u4f46\u968f\u540e\u611f\u89c9\u826f\u597d\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u63a5\u7740\u63d0\u5230\u4e86\u8fd9\u4e2a\u9752\u5c11\u5e74\u7684\u5176\u4ed6\u65b9\u9762#39\uff1b\u4f8b\u5982\uff0c\u4ed6\u6bcf\u5468\u62bd\u4e24\u5305\u70df\uff0c\u6bcf\u5929\u62bd\u5927\u9ebb\uff0c\u6d88\u9063\u65f6\u4f7f\u7528\u9547\u54b3\u836f\u548c\u6297\u7ec4\u80fa\u836f\uff0c\u5c0f\u65f6\u5019\u6709\u95f4\u6b47\u6027\u8033\u90e8\u611f\u67d3\u3002\u4ed6\u4f4f\u5728\u65b0\u82f1\u683c\u5170\u5317\u90e8\uff0c\u4f46\u5728\u751f\u75c5\u524d\u7684\u51e0\u5929\u91cc\uff0c\u4ed6\u4e00\u76f4\u548c\u4e00\u4e2a\u670b\u53cb\u4f4f\u5728\u4e00\u8d77\uff0c\u53c2\u89c2\u4e86\u6d77\u6ee9\u548c\u4e00\u4e2a\u97f3\u4e50\u573a\u6240\u3002\n\u8fd9\u7bc7\u6587\u7ae0\u518d\u4e5f\u6ca1\u6709\u63d0\u5230\u5269\u83dc\uff0c\u56e0\u4e3a\u98df\u7269\u4e0d\u662f&#39\uff1b\u4e0e\u4ed6\u7684\u75c5\u65e0\u5173\u3002\u6839\u636e\u6587\u7ae0&#39\uff1b\u4f5c\u8005\uff1a\u9a6c\u8428\u8bf8\u585e\u5dde\u603b\u533b\u9662\u4e34\u5e8a\u5fae\u751f\u7269\u5b66\u5b9e\u9a8c\u5ba4\u7f16\u8f91\u517c\u4e3b\u4efb\u57c3\u91cc\u514b\u00b7\u7f57\u68ee\u4f2f\u683c\u3002\n\u5728\u63a5\u53d7\u300a\u6ce2\u58eb\u987f\u73af\u7403\u62a5\u300b\u91c7\u8bbf\u65f6\uff0c\u7f57\u68ee\u4f2f\u683c\u535a\u58eb\u5bf9\u65b0\u95fb\u62a5\u9053\u5c06\u8fd9\u540d\u9752\u5c11\u5e74\u4e0e#39\uff1b\u5269\u4e0b\u7684\u98df\u7269\u4e5f\u662f\u5982\u6b64\u3002\n&#34;\u8fd9\u4e0e\u8fd9\u4e2a\u75c5\u4eba\u5b8c\u5168\u65e0\u5173#39\uff1b#34\uff1b\u7f57\u68ee\u535a\u683c\u8bf4\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u8be5\u75c5\u4f8b\u7684\u533b\u751f\u4ece\u672a\u60f3\u8fc7\u53d8\u8d28\u7684\u98df\u7269\u4f1a\u5bfc\u81f4\u75be\u75c5&#34;\u4ee4\u4eba\u9707\u60ca\u7684\u662f\uff0c\u8fd9\u5c31\u662f\u533b\u5b66\u865a\u5047\u4fe1\u606f\u5982\u6b64\u5bb9\u6613\u4f20\u64ad\u7684\u539f\u56e0\u3002\u3002\u3002\u6709\u592a\u591a\u7684\u5a92\u4f53\u62a5\u9053\u4e86\u8fd9\u4ef6\u4e8b&#34;\nWilliam Schaffner\u535a\u58eb\u662f\u8303\u5fb7\u5821\u5927\u5b66\u533b\u5b66\u4e2d\u5fc3\u4f20\u67d3\u75c5\u5b66\u6559\u6388\u548c\u56fd\u5bb6\u4f20\u67d3\u75c5\u57fa\u91d1\u4f1a\u7684\u533b\u5b66\u4e3b\u4efb\u300234;\u533b\u5b66\u6587\u732e\u4e2d\u7edd\u5bf9\u6ca1\u6709\u8fd9\u79cd\u7ec6\u83cc\u901a\u8fc7\u98df\u7269\u4f20\u64ad\u7684\u5386\u53f2\uff1b\u4ed6\u8bf4&#34;\u5b83&#39\uff1b\u8fd9\u662f\u80e1\u8bf4\u516b\u9053&#34;\nUNC\u4f20\u67d3\u75c5\u4e13\u5bb6\u7ea6\u745f\u592b\u00b7\u9093\u80af\uff08Joseph Duncan\uff09\u5728\u300a\u6bcf\u65e5\u5065\u5eb7\u300b\uff08Daily Health\uff09\u7684\u4e00\u7bc7\u63ed\u9732\u771f\u76f8\u7684\u6587\u7ae0\u4e2d\u8fd8\u6307\u51fa\uff0c\u4ece\u6765\u6ca1\u6709\u8bb0\u5f55\u8fc7\u98df\u6e90\u6027\u8111\u819c\u708e\u5948\u745f\u83cc\u75c5\u4f8b\u3002\u9093\u80af\u535a\u58eb\u63a8\u6d4b\uff0c\u8fd9\u540d\u60a3\u8005\u53ef\u80fd\u6709\u4e24\u4e2a\u95ee\u9898\u2014\u2014\u9752\u5c11\u5e74\u53ef\u80fd\u56e0\u5403\u5269\u7684\u98df\u7269\u548c\u8111\u819c\u708e\u5948\u745f\u83cc\u611f\u67d3\u800c\u77ed\u6682\u60a3\u75c5\u3002\u4f46\u662f\uff0c\u6700\u7ec8\u5bfc\u81f4\u4ed6\u622a\u80a2\u7684\u4e25\u91cd\u60c5\u51b5\u662f#34\uff1b\u4e8b\u5b9e\u8bc1\u660e\u4e0e\u98df\u7269\u65e0\u5173&#34;\n\u5728\u91cd\u75c7\u76d1\u62a4\u75c5\u623f\uff0c\u8fd9\u540d\u9752\u5c11\u5e74\u88ab\u8bca\u65ad\u4e3a\u8111\u819c\u708e\u7403\u83cc\u8840\u75c7\u5f15\u8d77\u7684\u66b4\u53d1\u6027\u7d2b\u765c\u3002\u8fd9\u662f\u8111\u819c\u708e\u5948\u745f\u83cc\u8840\u6db2\u611f\u67d3\u7684\u4e00\u79cd\u7f55\u89c1\u800c\u4e25\u91cd\u7684\u5e76\u53d1\u75c7\uff0c\u5c3d\u7ba1\u5b83\u53ef\u80fd\u7531\u5176\u4ed6\u7ec6\u83cc\u5f15\u8d77\u3002\u8fd9\u79cd\u75be\u75c5\u6e90\u4e8e\u5bf9\u5168\u8eab\u611f\u67d3\u7684\u4e0d\u9002\u5e94\u6027\u708e\u75c7\u53cd\u5e94\uff0c\u5bfc\u81f4\u5168\u8eab\u5f62\u6210\u8840\u6813\uff0c\u76ae\u80a4\u8840\u7ba1\u584c\u9677\uff0c\u7ec4\u7ec7\u6b7b\u4ea1\u3002\u8fd9\u540d\u9752\u5c11\u5e74\u5728\u91cd\u75c7\u76d1\u62a4\u5ba4\u5f85\u4e86\u8fd1\u4e00\u4e2a\u6708\uff0c\u7ecf\u5386\u4e86\u8bb8\u591a\u5e76\u53d1\u75c7\u3002\u4ed6\u8fdb\u884c\u4e86\u63d2\u7ba1\uff0c\u5e76\u77ed\u6682\u5b89\u88c5\u4e86\u8d77\u640f\u5668\u3002\u4ed6\u7684\u80f3\u818a\u548c\u817f\u4e0a\u6709\u7ec4\u7ec7\u6b7b\u4ea1\u548c\u574f\u75bd\uff0c\u5bfc\u81f4\u819d\u76d6\u4ee5\u4e0b\u7684\u53cc\u817f\u4ee5\u53ca\u5168\u90e810\u4e2a\u624b\u6307\u7684\u90e8\u5206\u622a\u80a2\u3002\n\u533b\u751f\u4eec\u5728\u7ed3\u675f\u4ed6\u4eec\u7684\u75c5\u4f8b\u8bb0\u5f55\u65f6\u6307\u51fa\u4ed6\u6ca1\u6709&#39\uff1b\u4ed6\u63a5\u79cd\u4e86\u6700\u65b0\u7684\u8111\u819c\u708e\u7403\u83cc\u75ab\u82d7\u3002\u7136\u800c\uff0c\u4ed6\u51fa\u9662\u540e\u6062\u590d\u4e86\u5668\u5b98\u529f\u80fd&#34;\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4ece\u975e\u5e38\u4e25\u91cd\u548c\u6025\u6027\u7684\u8111\u819c\u708e\u7403\u83cc\u6027\u7d2b\u765c\u66b4\u53d1\u6027\u53d1\u4f5c\u4e2d\u6062\u590d\u5f97\u76f8\u5bf9\u8f83\u597d\uff0c&#34\uff1b\u4ed6\u4eec\u5f97\u51fa\u7ed3\u8bba\u3002", "note_en": "Medical experts are calling out a rotten batch of news articles that wrongly claimed spoiled leftover Chinese food caused a teen to develop a life-threatening infection within hours, which led to the amputation of both his legs below the knees and parts of all 10 of his fingers.\n In reality, the 19-year-old male suffered a rare and extremely severe complication from a blood infection with a bacterium that causes meningococcal disease. The bacterium\u2014known as  Neisseria meningitidis\u2014is  not foodborne, and its incubation period is longer than just a few hours.\n N.\u00a0meningitidis harmlessly colonize the noses and throats of about 10 percent of people. It spreads through very close contact and directly swapping saliva, such as through coughing, kissing, and living in close quarters, like dormitories. Given the risk in group settings, many colleges and universities require students to get meningococcal vaccines before attending. Still, there has never been a documented case of  N. meningitidis spreading via food.\n But you might not have gotten that idea from the  numerous news  articles that spread the  alarming suggestion that the forgotten takeout lurking in the back of our refrigerators could kill you in a matter of hours if you dared take a bite. The fallacious warning was likely amplified by YouTuber Bernard Hsu, known as Chubbyemu, who posted  a lengthy dramatization of the case that has been viewed 1.5 million times. &#34;I don&#39;t intend to scare anyone about food or leftovers,&#34; he said at the beginning, before calling the case a &#34;freak accident.&#34;\n The real accident came from misreading a  case record of the man&#39;s condition, which was published more than a year ago in The New England Journal of Medicine. NEJM regularly features articles in a series titled &#34;Case Records of the Massachusetts General Hospital.&#34; The records present unusual or puzzling medical cases in an explanatory way for educational purposes. The articles always lay out how a particular case was handled, starting with how a patient first presented to doctors and what medical history they provided, then going through the tests, steps, and decisions the attending doctors took. The articles end with the doctors&#39; final diagnosis, treatment, and the patient&#39;s outcome.\n     In the March 2021 case record, a 19-year-old male was admitted to a pediatric intensive care unit because of shock, multiple organ failure, and a rash. The outset of the article described doctors doing their normal run-through of the teen&#39;s medical history, noting incidentally that he had reported eating &#34;rice, chicken, and lo mein leftovers from a restaurant meal&#34; about 20 hours before landing in intensive care. He reported nausea, vomiting, and abdominal pain after the meal, which could have been linked to the leftovers. But those symptoms were followed up by chills, generalized weakness, progressively worsening diffuse muscle pain, chest pain, shortness of breath, headache, neck stiffness, and blurry vision. The medical history also noted that a friend of the patient had also eaten the maligned leftovers and vomited shortly afterward but then felt fine.\n The article went on to note other bits of the teen&#39;s history, such as that he smoked two packs of cigarettes a week, smoked marijuana daily, used a cough-suppressant and antihistamine recreationally, and had intermittent ear infections as a child. He lived in northern New England, but in the days preceding his illness, he had been staying with a friend and visited the beach and a music venue.\n The article never mentioned the leftovers again\u2014because the food wasn&#39;t linked to his illness. The lo mein was simply a red herring that the doctors dismissed, according to the article&#39;s editor and director of the clinical microbiology laboratory at Massachusetts General Hospital, Eric Rosenberg.\n In an interview with  the Boston Globe, Dr. Rosenberg expressed his surprise and disappointment that news stories had linked the teen&#39;s case to leftover food.\n &#34;It was completely irrelevant to this patient&#39;s presentation,&#34; Rosenberg said, adding that the doctors on the case never thought that spoiled food caused the illness. &#34;It was horrifying that this is how medical disinformation can be so easily disseminated... There were more media outlets than I can count who picked up on this and were reporting on it.&#34;\n     Dr. William Schaffner, a professor of infectious diseases at Vanderbilt University Medical Center and medical director of the National Foundation for Infectious Diseases, echoed his sentiment to the Globe. &#34;There\u2019s absolutely no history in the medical literature of this kind of bacteria being transmitted by food,&#34; he said. &#34;It&#39;s baloney.&#34;\n In  a debunking article by Everyday Health, UNC infectious disease expert Joseph Duncan also noted that there has never been a documented case of foodborne  N. meningitidis. Dr. Duncan speculated that the patient could have had two problems\u2014the teenager could have been sickened briefly by the leftovers and the  N. meningitidis infection. But, ultimately, the serious condition that led to his amputation &#34;actually turned out to be unrelated to the food.&#34;\n In the intensive care unit, the teen was diagnosed with purpura fulminans due to meningococcemia. This is a rare and severe complication to a blood infection by  N. meningitidis, though it can be caused by other bacteria. The condition stems from a maladaptive inflammatory response to a systemic infection, which causes blood clots to form throughout the body, blood vessels in the skin to collapse, and tissue to die. The teen spent nearly a month in intensive care and experienced many complications. He was intubated and briefly had a pacemaker. He had tissue death and gangrene on his arms and legs, which resulted in amputations of both legs below the knees as well as parts of all 10 fingers.\n The doctors ended their case record by noting that he wasn&#39;t up to date on his meningococcal vaccine. However, he regained organ function after he was discharged from the hospital. &#34;Overall, he had a relatively good recovery from what was a very severe and acute presentation of meningococcal purpura fulminans,&#34; they concluded.", "posttime": "2022-03-02 00:49:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "leftovers,\u98df\u7269", "title": "\u4e0d\uff0c\u6b8b\u7fb9\u5269\u996d\u5e76\u6ca1\u6709\u5bfc\u81f4\u9752\u5c11\u5e74\u81f4\u547d\u7684\u611f\u67d3\u548c\u622a\u80a2", "title_en": "No, bad leftovers didn\u2019t cause teen\u2019s life-threatening infection, amputations", "transed": 1, "url": "https://arstechnica.com/science/2022/02/experts-skewer-media-reports-blaming-life-threatening-infection-on-bad-lo-mein/", "via": "", "real_tags": ["leftovers", "\u98df\u7269"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075155, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Fiber Scheduler\u652f\u6301Ruby\u4e2d\u7684\u5f02\u6b65\u7f16\u7a0b\u3002\u8be5\u529f\u80fd\u662fRuby 3.0\u7684\u4e00\u5927\u65b0\u589e\u529f\u80fd\uff0c\u4e5f\u662fawesome async gem\u7684\u6838\u5fc3\u7ec4\u4ef6\u4e4b\u4e00\u3002\u6700\u68d2\u7684\u662f\u4f60\u6ca1\u6709&#39\uff1b\u6211\u4eec\u4e0d\u9700\u8981\u4e00\u4e2a\u5b8c\u6574\u7684\u6846\u67b6\u6765\u5f00\u59cb\uff01\u5b83&#39\uff1b\u4f7f\u7528\u4e00\u4e2a\u72ec\u7acb\u7684\u5149\u7ea4\u8c03\u5ea6\u5668\uff0c\u53ea\u9700\u51e0\u4e2a\u5185\u7f6e\u7684Ruby\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u5f02\u6b65\u7f16\u7a0b\u7684\u597d\u5904\u3002\n\u8bed\u8a00\u4e2d\u5185\u7f6e\u7684\u4e00\u7ec4\u7528\u4e8e\u963b\u6b62\u64cd\u4f5c\u7684\u94a9\u5b50\u3002\u94a9\u5b50\u5b9e\u73b0\u88ab\u59d4\u6258\u7ed9\u5149\u7ea4\u3002\u8c03\u5ea6\u7a0b\u5e8f\u5bf9\u8c61\u3002\n\u5b9e\u73b0\u5f02\u6b65\u884c\u4e3a\u3002\u8fd9\u662f\u4e00\u4e2a\u9700\u8981\u7a0b\u5e8f\u5458\u663e\u5f0f\u8bbe\u7f6e\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3aRuby\u4e0d\u63d0\u4f9b\u9ed8\u8ba4\u7684\u5149\u7ea4\u8c03\u5ea6\u5668\u5b9e\u73b0\u3002\n\u975e\u5e38\u611f\u8c22\u585e\u7f2a\u5c14\u00b7\u5a01\u5ec9\u59c6\u65af\uff01\u4ed6&#39\uff1bs\u662f\u4e00\u4f4dRuby\u6838\u5fc3\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u5728\u8bed\u8a00\u4e2d\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86\u5149\u7ea4\u8c03\u5ea6\u5668\u529f\u80fd\u3002\n\u5149\u7ea4\u8c03\u5ea6\u5668\u63a5\u53e3\u662f\u4e00\u7ec4\u7528\u4e8e\u963b\u585e\u64cd\u4f5c\u7684\u6302\u94a9\u3002\u5b83\u5141\u8bb8\u5728\u53d1\u751f\u963b\u585e\u64cd\u4f5c\u65f6\u63d2\u5165\u5f02\u6b65\u884c\u4e3a\u3002\u8fd9\u4e9b\u6302\u94a9\u662f\u7528Fiber:\uff1aSchedulerInterface\u7c7b\u8bb0\u5f55\u7684\u3002\n\u94a9\u5b50\u662f\u4f4e\u7ea7\u7684\u3002\u8fd9\u4f1a\u4ea7\u751f\u5c11\u91cf\u7684\u94a9\u5b50\uff0c\u6bcf\u4e2a\u94a9\u5b50\u5904\u7406\u8bb8\u591a\u9ad8\u7ea7\u65b9\u6cd5\u7684\u884c\u4e3a\u3002\u4f8b\u5982\uff0c#address_resolve\u94a9\u5b50\u8d1f\u8d23\u5904\u7406\u5927\u7ea620\u79cd\u65b9\u6cd5\u3002\n\u94a9\u5b50\u53ea\u6709\u5728\u6709\u7ea4\u7ef4\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u8d77\u4f5c\u7528\u3002\u8c03\u5ea6\u5668\u5bf9\u8c61\u5df2\u8bbe\u7f6e\uff0c\u6302\u94a9&#39\uff1b\u5b9e\u73b0\u88ab\u59d4\u6258\u7ed9\u8be5\u5bf9\u8c61\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u663e\u793a\u5982\u4f55\u5b9e\u73b0\u5185\u6838#sleep hook\u7684\u793a\u4f8b\u3002\u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u94a9\u5b50\u90fd\u662f\u7528C\u7f16\u5199\u7684\uff0c\u4f46\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86Ruby\u4f2a\u4ee3\u7801\u3002\n\u5982\u679c\u662f\u7ea4\u7ef4\u3002\u8c03\u5ea6\u7a0b\u5e8f\u5bf9\u8c61\u5df2\u8bbe\u7f6e\u2013\u8fd0\u884c\u5176#\u5185\u6838_sleep\u65b9\u6cd5#\u5185\u6838_sleep\u5e94\u8be5\u5f02\u6b65\u8fd0\u884csleep\u3002\n\u5426\u5219\uff0c\u6267\u884c\u5e38\u89c4\u7684\u540c\u6b65_\u7761\u7720\uff0c\u5c06\u963b\u6b62\u5f53\u524d\u7ebf\u7a0b\uff0c\u76f4\u5230\u7761\u7720\u5b8c\u6210\u3002\n\u6982\u5ff5&#34\uff1b\u963b\u585e\u64cd\u4f5c&#34\uff1b\u5df2\u7ecf\u63d0\u8fc7\u597d\u51e0\u6b21\u4e86\uff0c\u4f46\u8fd9\u5230\u5e95\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u963b\u585e\u64cd\u4f5c\u662fRuby\u8fdb\u7a0b\uff08\u66f4\u5177\u4f53\u5730\u8bf4\uff1a\u5f53\u524d\u7ebf\u7a0b\uff09\u7b49\u5f85\u7684\u4efb\u4f55\u64cd\u4f5c\u3002\u963b\u585e\u64cd\u4f5c\u7684\u66f4\u5177\u63cf\u8ff0\u6027\u7684\u540d\u79f0\u662f&#34\uff1b\u7b49\u5f85\u64cd\u4f5c&#34\uff1b\u3002\n\u4f5c\u4e3a\u53cd\u4f8b\uff0c\u4ee5\u4e0b\u4ee3\u7801\u6bb5\u9700\u8981\u4e00\u6bb5\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\uff0c\u4f46\u4e0d\u5305\u542b\u963b\u585e\u64cd\u4f5c\uff1a\n\u5982\u679c[0,1]\uff0cdef fibonacci\uff08n\uff09\u8fd4\u56den\u3002\u5305\u62ecn\u6590\u6ce2\u90a3\u5951\uff08n-1\uff09+fibonacci\uff08n-2\uff09endfibonacci\uff08100\uff09\n\u83b7\u5f97\u6590\u6ce2\u90a3\u5951\uff08100\uff09\u7684\u7ed3\u679c\u9700\u8981\u5f88\u591a\u7b49\u5f85\uff0c\u4f46\u5b83&#39\uff1b\u4ed6\u53ea\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458&#39\uff1b\u7b49\u7740\u5462\uff01Ruby\u89e3\u91ca\u5668\u4e00\u76f4\u5728\u5de5\u4f5c\uff0c\u5728\u540e\u53f0\u5904\u7406\u6570\u5b57\u3002\u6734\u7d20\u7684\u6590\u6ce2\u90a3\u5951\u5b9e\u73b0\u4e0d\u5305\u542b\u963b\u585e\u64cd\u4f5c\u3002\n\u5f00\u53d1\u5173\u4e8e\u963b\u585e\u64cd\u4f5c\u662f\u4ec0\u4e48\uff08\u6216\u4e0d\u662f\u4ec0\u4e48\uff09\u7684\u76f4\u89c9\u662f\u6709\u597d\u5904\u7684\uff0c\u56e0\u4e3a\u5f02\u6b65\u7f16\u7a0b\u7684\u5168\u90e8\u76ee\u7684\u662f\u540c\u65f6\u7b49\u5f85\u591a\u4e2a\u963b\u585e\u64cd\u4f5c\u3002\n\u5982\u679c\u60f3\u5728Ruby\u4e2d\u542f\u7528\u5f02\u6b65\u884c\u4e3a\uff0c\u9700\u8981\u4e3a\u5f53\u524d\u7ebf\u7a0b\u8bbe\u7f6e\u4e00\u4e2aFiber Scheduler\u5bf9\u8c61\u3002\u90a3&#39\uff1b\u5149\u7ea4\u5df2\u7ecf\u7528\u5b8c\u4e86\u3002\u8bbe\u7f6e_\u8c03\u5ea6\u7a0b\u5e8f\uff08\u8c03\u5ea6\u7a0b\u5e8f\uff09\u65b9\u6cd5\u3002\u8be5\u5b9e\u73b0\u901a\u5e38\u662f\u4e00\u4e2a\u5b9a\u4e49\u4e86\u6240\u6709Fiber:\uff1aSchedulerInterface\u65b9\u6cd5\u7684\u7c7b\u3002\nRuby\u4e0d\u63d0\u4f9b\u9ed8\u8ba4\u7684Fiber Scheduler\u7c7b\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u53ef\u7528\u4e8e\u6b64\u76ee\u7684\u7684\u5bf9\u8c61\u3002\u8fd9\u4f3c\u4e4e\u5f88\u4e0d\u5bfb\u5e38\uff0c\u4f46\u4e0d\u5c06\u5149\u7ea4\u8c03\u5ea6\u5668\u5b9e\u73b0\u5305\u542b\u5728\u8bed\u8a00\u4e2d\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u957f\u671f\u51b3\u5b9a\u3002\u5b83&#39\uff1b\u6700\u597d\u628a\u8fd9\u4e2a\u76f8\u5bf9\u5feb\u901f\u53d1\u5c55\u7684\u95ee\u9898\u653e\u5728\u6838\u5fc3Ruby\u4e4b\u5916\u3002\n\u4ece\u5934\u5f00\u59cb\u7f16\u5199Fiber Scheduler\u7c7b\u662f\u4e00\u9879\u590d\u6742\u7684\u4efb\u52a1\uff0c\u56e0\u6b64\u5b83&#39\uff1b\u5efa\u8bae\u4f7f\u7528\u73b0\u6709\u7684\u89e3\u51b3\u65b9\u6848\u3002\u53ef\u5728Fibre Scheduler list\u9879\u76ee\u4e2d\u627e\u5230\u5b9e\u65bd\u5217\u8868\u3002\n\u6240\u6709\u793a\u4f8b\u90fd\u4f7f\u7528Ruby 3.1\u548cfiber_scheduler gem\u4e2d\u7684FiberScheduler\u7c7b\uff0c\u8be5\u7c7b\u7531\u60a8\u81ea\u5df1\u7ef4\u62a4\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u793a\u4f8b\u6765\u8bf4\uff0c\u8fd9\u4e2agem\u5e76\u4e0d\u662f\u4e00\u4e2a\u786c\u4f9d\u8d56\u9879\uff0c\u56e0\u4e3a\u5982\u679c\u5bf9FiberScheduler\u7684\u5f15\u7528\u88ab\u53e6\u4e00\u4e2aFiber Scheduler\u7c7b\u66ff\u6362\uff0c\u4e0b\u9762\u7684\u6bcf\u4e2a\u4ee3\u7801\u6bb5\u90fd\u5e94\u8be5\u4ecd\u7136\u6709\u6548\u3002\n\u4e0a\u9762\u7684\u4ee3\u7801\u521b\u5efa\u4e86\u4e24\u4e2a\u5149\u7ea4\uff0c\u6bcf\u4e2a\u5149\u7ea4\u53d1\u51fa\u4e00\u4e2aHTTP\u8bf7\u6c42\u3002\u8bf7\u6c42\u5e76\u884c\u8fd0\u884c\uff0c\u6574\u4e2a\u7a0b\u5e8f\u57282\u79d2\u5185\u5b8c\u6210\u3002\n\u5728\u5f53\u524d\u7ebf\u7a0b\u4e2d\u8bbe\u7f6e\u542f\u7528\u5149\u7ea4\u7684\u5149\u7ea4\u8c03\u5ea6\u7a0b\u5e8f\u3002\u5b89\u6392\u65b9\u6cd5\u5de5\u4f5c\uff0c\u5149\u7ea4\u5f02\u6b65\u5de5\u4f5c\u3002\n\u8be5\u793a\u4f8b\u4ec5\u4f7f\u7528\u6807\u51c6\u7684Ruby\u65b9\u6cd5\uff0c\u5305\u62ec\u5149\u7ea4\u548c\u5149\u7ea4\u3002\u8bbe\u7f6e\u8c03\u5ea6\u7a0b\u5e8f\u548c\u5149\u7ea4\u3002\u81eaRuby 3.0\u4ee5\u6765\uff0c\u65e5\u7a0b\u5b89\u6392\u4e00\u76f4\u53ef\u7528\u3002\n\u8981\u6c42&#34\uff1b\u5149\u7ea4\u8c03\u5ea6&#34\uff1b\u8981\u6c42&#34\uff1bhttparty&#34\uff1b\u8981\u6c42&#34\uff1b\u6253\u5f00uri&#34\uff1b\u8981\u6c42&#34\uff1bredis\u548c#34\uff1b\u8981\u6c42&#34\uff1b\u7eed\u96c6&#34\uff1bDB=\u7eed\u96c6\u3002\u535a\u58eb\u540e\u7eed\u96c6\u3002\u6269\u5c55\uff08\uff1afiber_concurrency\uff09\u5149\u7ea4\u3002\u8bbe\u7f6e\u8c03\u5ea6\u7a0b\u5e8f\uff08FiberScheduler.new\uff09\u5149\u7ea4\u3002\u8ba1\u5212\u505aURI\u3002\u5f00\u653e\u5f0f\uff08&#34\uff1bhttps://httpbin.org/delay/2 &#34;) \u672b\u7aef\u7ea4\u7ef4\u3002\u8ba1\u5212\u4e0d\u8981\u4f7f\u7528\u4efb\u4f55HTTP\u5e93HTTParty\u3002\u83b7\u5f97\uff08&#34\uff1bhttps://httpbin.org/delay/2 &#34;) \u672b\u7aef\u7ea4\u7ef4\u3002schedule do#\u9002\u7528\u4e8e\u4efb\u4f55TCP\u534f\u8bae\u5e93Redis\u3002\u521a\u51fa\u73b0\u7684blpop\uff08&#34\uff1babc123&#34\uff1b2\uff09\u7aef\u5149\u7ea4\u3002\u8ba1\u5212\u8fdb\u884c\u6570\u636e\u5e93\u67e5\u8be2\u3002\u8fd0\u884c\uff08&#34\uff1b\u9009\u62e9pg#U\u7761\u7720\uff082\uff09&#34\uff1b\uff09\u672b\u7aef\u7ea4\u7ef4\u3002\u5b89\u6392\u7761\u77202\u4e2a\u6708\u3002\u8ba1\u5212\u6267\u884c#\u8fd0\u884c\u7cfb\u7edf\u547d\u4ee4'sleep 2'\u7ed3\u675f\n\u5982\u679c\u6211\u4eec\u6309\u987a\u5e8f\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u5927\u7ea6\u9700\u898112\u79d2\u624d\u80fd\u5b8c\u6210\u3002\u4f46\u7531\u4e8e\u8fd9\u4e9b\u64cd\u4f5c\u5e76\u884c\u8fd0\u884c\uff0c\u603b\u8fd0\u884c\u65f6\u95f4\u4ec5\u4e3a2\u79d2\u591a\u3002\n\u4f60&#39\uff1b\u6211\u4eec\u4e0d\u5c40\u9650\u4e8e\u53d1\u51faHTTP\u8bf7\u6c42\u3002\u4efb\u4f55&#39\uff1bs\u5185\u7f6e\u5728Ruby\u4e2d\u6216\u7531\u5916\u90e8gem\u5b9e\u73b0\uff01\n\u5728\u7f29\u653e\u793a\u4f8b\u4e2d\u9009\u62e9\u4e86sleep\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u7684\u5f00\u9500\u5f88\u4f4e\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u7f51\u7edc\u8bf7\u6c42\uff0c\u6267\u884c\u65f6\u95f4\u4f1a\u66f4\u957f\uff0c\u56e0\u4e3a\u9700\u8981\u5efa\u7acb\u6570\u5343\u4e2a\u8fde\u63a5\u548c\u6267\u884cSSL\u63e1\u624b\u7b49\u5f00\u9500\u3002\n\u5f02\u6b65\u7f16\u7a0b\u7684\u4e3b\u8981\u597d\u5904\u4e4b\u4e00\u662f\u540c\u65f6\u7b49\u5f85\u8bb8\u591a\u963b\u585e\u64cd\u4f5c\u3002\u968f\u7740\u963b\u585e\u64cd\u4f5c\u6570\u91cf\u7684\u589e\u52a0\uff0c\u597d\u5904\u4e5f\u4f1a\u589e\u52a0\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5b83&#39\uff1b\u5b83\u975e\u5e38\u5bb9\u6613\u8fd0\u884c\u5927\u91cf\u5149\u7ea4\u3002\nRuby\u53ea\u9700\u8981\u4e00\u4e2a\u5149\u7ea4\u8c03\u5ea6\u5668\u548c\u4e24\u4e2a\u5185\u7f6e\u65b9\u6cd5\u5c31\u53ef\u4ee5\u5f02\u6b65\u5de5\u4f5c\u2014\u2014\u4e0d\u9700\u8981\u6846\u67b6\uff01\n\u5b83&#39\uff1b\u8fd9\u5f88\u5bb9\u6613\u505a\u5230\u3002\u9009\u62e9\u5149\u7ea4\u8c03\u5ea6\u5668\u5b9e\u73b0\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\uff1a\n\u7ea4\u7ef4set_scheduler\uff08\u8c03\u5ea6\u7a0b\u5e8f\uff09\u4e3a\u5f53\u524d\u7ebf\u7a0b\u8bbe\u7f6e\u5149\u7ea4\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u4f7f\u963b\u585e\u64cd\u4f5c\u8868\u73b0\u4e3a\u5f02\u6b65\u3002\n\u4e00\u65e6\u5f00\u59cb\u8fd0\u884c\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u5c06\u4efb\u4f55\u4ee3\u7801\u5c01\u88c5\u5728\u5149\u7ea4\u4e2d\u6765\u5b9e\u73b0\u5f02\u6b65\u3002\u8ba1\u5212\u5757\u3002\n\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6574\u4e2a\u5e93\u90fd\u53ef\u4ee5\u8f7b\u677e\u5730\u8f6c\u6362\u4e3a\u5f02\u6b65\uff0c\u800c\u4e14\u51e0\u4e4e\u4e0d\u9700\u8981\u6bd4\u8fd9\u91cc\u663e\u793a\u7684\u66f4\u5927\u7684\u5de5\u4f5c\u91cf\u3002\n\u5f02\u6b65\u7f16\u7a0b\u7684\u6700\u5927\u597d\u5904\u662f\u5e76\u884c\u5316\u963b\u585e/\u7b49\u5f85\u64cd\u4f5c\uff0c\u4ee5\u51cf\u5c11\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u3002\u8fd9\u901a\u5e38\u4f1a\u8f6c\u5316\u4e3a\u5728\u5355\u4e2aCPU\u4e0a\u8fd0\u884c\u66f4\u591a\u64cd\u4f5c\uff0c\u6216\u8005\u66f4\u597d\u5730\u4f7f\u7528web\u670d\u52a1\u5668\u5904\u7406\u66f4\u591a\u8bf7\u6c42\u3002", "note_en": "Fiber Scheduler enables asynchronous programming in Ruby. The feature was one of the big additions to Ruby 3.0, and is one of the core components of  the awesome async gem.  The best part is that you don&#39;t need a whole framework to get started!  It&#39;s possible to achieve the benefits of asynchronous programming using a standalone Fiber Scheduler with just a couple of  built-in Ruby methods.\n    A set of hooks for blocking operations built into the language. Hook implementations are delegated to the  Fiber.scheduler object.\n    Implements the asynchronous behavior. This is an object that needs to be explicitly set by the programmer, as Ruby does not provide a default Fiber Scheduler implementation.\n  Big thanks to Samuel Williams! He&#39;s a Ruby core developer who designed and implemented the Fiber Scheduler feature into the language.\n    Fiber Scheduler interface is a set of hooks for blocking operations. It allows for inserting asynchronous behavior when a blocking operation occurs. These hooks are documented with  Fiber::SchedulerInterface class.\n    Hooks are  low-level. This results in a small number of hooks, with each hook handling the behavior of many  high-level methods. For example, the  #address_resolve hook is responsible for handling around 20 methods.\n  Hooks work only if  Fiber.scheduler object is set, and hooks&#39; implementation is delegated to that object.\n    Let&#39;s look at the example showing how  Kernel#sleep hook could be implemented. In practice all hooks are coded in C, but for clarity Ruby pseudocode is used here.\n      If a  Fiber.scheduler object is set \u2013 run its  #kernel_sleep method.  #kernel_sleep should run  sleep asynchronously.\n  Otherwise, perform a regular  synchronous_sleep that will block the current thread until  sleep is done.\n      The concept &#34;blocking operation&#34; was mentioned a couple times already, but what does it really mean?  A blocking operation is any operation where a Ruby process (more specifically: current thread) ends up waiting. A more descriptive name for blocking operations would be  &#34;waiting operations&#34;.\n      As a counterexample, the following snippet takes a while to finish, but  does not contain blocking operations:\n  def  fibonacci(n)  return n  if [ 0,  1].include? n fibonacci(n -  1) + fibonacci(n -  2) endfibonacci( 100)\n  Getting the result of  fibonacci(100) requires a lot of waiting, but it&#39;s only a  programmer that&#39;s waiting! The whole time Ruby interpreter is working, crunching the numbers in the background. A naive fibonacci implementation does not contain blocking operations.\n  It pays off to develop an intuition on what a blocking operation is (and is not), as  the whole point of asynchronous programming is to wait on multiple blocking operations at the same time.\n      If you want to enable the asynchronous behavior in Ruby, you need to set a Fiber Scheduler object for the current thread. That&#39;s done with the  Fiber.set_scheduler(scheduler) method. The implementation is commonly a class with all the  Fiber::SchedulerInterface methods defined.\n  Ruby does not provide a default Fiber Scheduler class, nor an object that could be used for that purpose. It seems unusual, but not including the Fiber Scheduler implementation with the language is actually a good  long-term decision. It&#39;s best to leave this relatively  fast-evolving concern outside the core Ruby.\n  Writing a Fiber Scheduler class from scratch is a complex task, so it&#39;s recommended to use an existing solution. The list of implementations can be found at  Fiber Scheduler List project.\n      All examples use Ruby 3.1 and  FiberScheduler class from the  fiber_scheduler gem, which is maintained by yours truly. This gem is  not a hard dependency for the examples, as every snippet below should still work if references to  FiberScheduler are replaced with another Fiber Scheduler class.\n        The above code is creating two fibers, each making an HTTP request. The requests run in parallel and the whole program finishes in 2 seconds.\n  Sets a Fiber Scheduler in the current thread which enables  Fiber.schedule method to work, and fibers to behave asynchronously.\n  The example uses only standard Ruby methods \u2013 both  Fiber.set_scheduler and  Fiber.schedule have been available since Ruby 3.0.\n      require  &#34; fiber_scheduler &#34; require  &#34; httparty &#34; require  &#34; open-uri &#34; require  &#34; redis &#34; require  &#34; sequel &#34; DB =  Sequel.postgres Sequel.extension( : fiber_concurrency) Fiber.set_scheduler( FiberScheduler.new) Fiber.schedule  do  URI.open( &#34; https://httpbin.org/delay/2 &#34;) end Fiber.schedule  do  # Use any HTTP library  HTTParty.get( &#34; https://httpbin.org/delay/2 &#34;) end Fiber.schedule  do  # Works with any TCP protocol library  Redis.new.blpop( &#34; abc123 &#34;,  2) end Fiber.schedule  do  # Make database queries  DB.run( &#34; SELECT pg_sleep(2) &#34;) end Fiber.schedule  do sleep  2 end Fiber.schedule  do  # Run system commands  ` sleep 2 ` end\n  If we ran this program sequentially it would take about 12 seconds to finish. But as the operations run in parallel, the total running time is just over 2 seconds.\n  You&#39;re not constrained to making just HTTP requests.  Any blocking operation that&#39;s built into Ruby or implemented by an external gem works!\n          The  sleep method was chosen for the scaling example due to its low overhead. If we used network requests the execution time would be longer because of the overhead of setting up thousands of connections and performing SSL handshakes etc.\n  One of the main benefits of asynchronous programming is waiting on many blocking operations at the same time.  The benefits increase as the number of blocking operations grows. Luckily, it&#39;s super easy to run large numbers of fibers.\n    Ruby can work asynchronously with just a Fiber Scheduler and a couple  built-in methods \u2013 no frameworks are required!\n  It&#39;s easy to make it work. Choose a  Fiber Scheduler implementation, and then use these methods:\n  Fiber.set_scheduler(scheduler) sets a Fiber Scheduler for the current thread, enables blocking operations to behave async.\n  Once you get it going, you can  make any code asynchronous by wrapping it in a  Fiber.schedule block.\n    Whole libraries can easily be converted to async with this approach, and it rarely takes more effort than shown here.\n  The big benefit of asynchronous programming is parallelizing blocking/waiting operations to reduce the program running time. This often translates into running more operations on a single CPU, or even better, handling more requests with your web server.", "posttime": "2022-03-01 22:27:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ruby,\u5149\u7ea4,fiber", "title": "Ruby\u5149\u7ea4\u8c03\u5ea6\u5668", "title_en": "Ruby Fiber Scheduler", "transed": 1, "url": "https://brunosutic.com/blog/ruby-fiber-scheduler", "via": "", "real_tags": ["ruby", "\u5149\u7ea4", "fiber"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1075154, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "HPKE\u662fRFC 9180\u4e2d\u63cf\u8ff0\u6df7\u5408\u516c\u94a5\u52a0\u5bc6\u65b9\u6848\u7684CFRG\u3002\u8fd9\u672c\u4e66\u662f\u7531\u6211\u7684Cryspen\u8054\u5408\u521b\u59cb\u4ebaKarthikeyan Bhargavan\u548c\u4ed6\u7684\u4e00\u540d\u535a\u58eb\u751fBenjamin Lipp\u5408\u8457\u7684\uff0c\u4f5c\u4e3a\u4ed6\u5728Inria\u7814\u7a76\u7684\u4e00\u90e8\u5206\u3002\n\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u5c06\u7b80\u8981\u6982\u8ff0\u8be5\u89c4\u8303\uff0c\u5e76\u63cf\u8ff0\u4e00\u4e9b\u7528\u4f8b\u3002\n\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8eHPKE\u548cRFC\u8fc7\u7a0b\u80cc\u540e\u7684\u5b89\u5168\u8bc1\u660e\uff0cBenjamin\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u5b83\u7684\u4f18\u79c0\u535a\u5ba2\u6587\u7ae0\u3002\n\u6df7\u5408\u516c\u94a5\u52a0\u5bc6\uff08Hybrid Public Key Encryption\uff0c\u7b80\u79f0HPKE\uff09\u662f\u4e00\u79cdcyrptographic\u673a\u5236\uff0c\u5141\u8bb8\u5c06\u6709\u6548\u8d1f\u8f7d\u52a0\u5bc6\u4e3a\u516c\u94a5\u3002\u5b83\u88ab\u79f0\u4e3a\u201c\u6df7\u5408\u201d\uff0c\u56e0\u4e3a\u6709\u6548\u8f7d\u8377\u662f\u7528\u5bf9\u79f0\u65b9\u6848\u52a0\u5bc6\u7684\u3002\u7136\u540e\u5c06\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u4e3a\u63a5\u6536\u65b9\u516c\u94a5\u3002HPKE\u6807\u51c6\u5b9a\u4e49\u4e86\u4e00\u4e9b\u57fa\u672c\u8bbe\u7f6e\u7684\u81ea\u7136\u6269\u5c55\uff0c\u5141\u8bb8\u53d1\u9001\u65b9\u5bf9\u81ea\u5df1\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\n\u81ea20\u4e16\u7eaa90\u5e74\u4ee3\u521d\u4ee5\u6765\uff0c\u5728PGP\u6216SMIME\u7b49\u534f\u8bae\u4e2d\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4e86\u6df7\u5408\u516c\u94a5\u52a0\u5bc6\u3002\u867d\u7136\u8fd9\u4e24\u4e2a\u534f\u8bae\u9002\u7528\u4e8e\u975e\u5e38\u7279\u5b9a\u7684\u7528\u4f8b\uff0c\u4f46ECIES\u4e2d\u63cf\u8ff0\u4e86\u66f4\u901a\u7528\u7684\u6df7\u5408\u52a0\u5bc6\u7248\u672c\u3002ECIES\u662f\u5f53\u4eca\u8bb8\u591a\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u3002\u4f8b\u5982\uff0c\u5728iOS\u8bbe\u5907\u4e0a\u7684\u5b89\u5168enclave\u4e2d\u5b58\u50a8\u5bc6\u94a5\u4f7f\u7528ECIES\u3002\u5bf9\u4e8e\u6df7\u5408\u5bc6\u7801\u7cfb\u7edf\u7684\u66f4\u6df1\u5165\u7684\u89e3\u91ca\u548c\u5386\u53f2\uff0c\u6211\u5efa\u8bae\u9605\u8bfb\u514b\u91cc\u65af\u6258\u5f17\u00b7\u4f0d\u5fb7\u7684\u535a\u5ba2\u6587\u7ae0\u3002\n\u7136\u800c\uff0c\u6ca1\u6709\u5173\u4e8e\u6df7\u5408\u516c\u94a5\u52a0\u5bc6\u548c\u73b0\u4ee3\u539f\u8bed\u7684\u4e00\u822c\u63cf\u8ff0\u3002HPKE\u6807\u51c6\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u751a\u81f3\u5728RFC\u6700\u7ec8\u786e\u5b9a\u4e4b\u524d\uff0c\u5b83\u5c31\u88ab\u7528\u4e8eECH\u3001MLS\u3001ODOH\u548cPPM\u7684\u89c4\u8303\u4e2d\u3002\u8fd9\u8868\u660e\u5bf9HPKE\u7684\u9700\u6c42\u5f88\u9ad8\u3002\nHPKE\u6709\u56db\u79cd\u4e0d\u540c\u7684\u64cd\u4f5c\u6a21\u5f0f\uff1aBase\u3001Auth\u3001PSK\u3001AuthPSK\u3002\u5728\u8fd9\u7bc7\u535a\u6587\u4e2d\uff0c\u6211\u4eec\u53ea\u63cf\u8ff0\u4e86\u4e24\u79cd\u6700\u5e38\u7528\u7684\u6a21\u5f0fBase\u548cAuth\u3002\n\u57fa\u672c\u6a21\u5f0f\u662fHPKE\u6700\u5e38\u89c1\u7684\u7528\u4f8b\uff0c\u5176\u4e2d\u6709\u6548\u8d1f\u8f7d\u88ab\u52a0\u5bc6\u4e3a\u516c\u94a5\u3002\u6240\u6709\u5176\u4ed6\u6a21\u5f0f\u90fd\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\nAuthPSK\u4f7f\u7528\u53d1\u9001\u65b9\u7684\u79c1\u94a5\u4ee5\u53ca\u9884\u5171\u4eab\u7684\u9ad8\u71b5\u5bc6\u94a5\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\n\u4e0b\u56fe\u63cf\u8ff0\u4e86\u52a0\u5bc6\u5230\u516c\u94a5\u7684\u4e00\u822c\u6d41\u7a0b\u3002\u8fd9\u662fHPKE\u4e2d\u7684\u57fa\u672c\u6a21\u5f0f\u3002\u8fd9\u662f\u6df7\u5408\u5bc6\u7801\u7cfb\u7edf\u6700\u57fa\u672c\u7684\u5e94\u7528\u3002Alex\u4eceSasha\u90a3\u91cc\u77e5\u9053\u516c\u94a5\uff0c\u60f3\u5411\u4ed6\u4eec\u53d1\u9001\u4e00\u4e9b\u6570\u636e\u3002Shasha\u7684\u516c\u94a5\u7528\u4e8e\u52a0\u5bc6\u7528\u4e8e\u52a0\u5bc6\u6570\u636e\u7684\u5171\u4eab\u5bc6\u94a5\u3002\u52a0\u5bc6\u7684\u5171\u4eab\u5bc6\u94a5\u4ee5\u53ca\u52a0\u5bc6\u7684\u6570\u636e\u88ab\u53d1\u9001\u7ed9Sasha\uff0cSasha\u53ef\u4ee5\u7528\u76f8\u5e94\u7684\u79c1\u94a5\u68c0\u7d22\u5171\u4eab\u5bc6\u94a5\u3002\n\u6709\u65f6\uff0c\u5bf9\u6570\u636e\u7684\u53d1\u9001\u8005\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u662f\u6709\u7528\u7684\u6216\u5fc5\u8981\u7684\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5b83\u4ee3\u8868HPKE Auth\u6a21\u5f0f\u3002\u8eab\u4efd\u9a8c\u8bc1\u662f\u901a\u8fc7\u6df7\u5408\u53d1\u9001\u65b9\u7684\u79c1\u94a5\u6765\u5b9e\u73b0\u7684\uff0c\u8fd9\u6837\u63a5\u6536\u65b9\u53ea\u6709\u5728\u4ed6\u4eec\u4e3a\u53d1\u9001\u65b9\u4f7f\u7528\u7684\u516c\u94a5\u4e0e\u4f7f\u7528\u7684\u79c1\u94a5\u5bf9\u5e94\u65f6\u624d\u4f1a\u68c0\u7d22\u5230\u6b63\u786e\u7684\u5171\u4eab\u5bc6\u94a5\u3002\nHPKE\u672c\u8d28\u4e0a\u662f\u6807\u51c6\u5316\u5982\u4f55\u4f7f\u7528\u5bc6\u94a5\u5c01\u88c5\u673a\u5236\uff08KEM\uff09\u8fdb\u884c\u6df7\u5408\u52a0\u5bc6\u3002HPKE\u4e2d\u7684\u53d1\u9001\u65b9\u4f7f\u7528KEM\u751f\u6210\u5171\u4eab\u5bc6\u94a5\u548c\u5c01\u88c5\u3002\u7136\u540e\u5728AEAD\u4e2d\u4f7f\u7528\u5171\u4eab\u79d8\u5bc6\uff08\u5728\u901a\u8fc7\u5bc6\u94a5\u8c03\u5ea6\u8fd0\u884c\u5b83\u4e4b\u540e\uff09\uff0c\u4ee5\u52a0\u5bc6\u6709\u6548\u8d1f\u8f7d\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6240\u6709HPKE\u7528\u4f8b\u90fd\u53ea\u5229\u7528HPKE\u7684\u5355\u6b21API\u3002\u4e3a\u4e86\u5c06\u6709\u6548\u8f7d\u8377\u52a0\u5bc6\u4e3a\u516c\u94a5\uff0c\u53d1\u9001\u65b9\u9700\u8981\u63d0\u4f9b\u63a5\u6536\u65b9\u7684\u516c\u94a5pkR\u3001\u4e00\u4e9b\u4fe1\u606f\u4fe1\u606f\u548c\u9644\u52a0\u6570\u636e\uff0c\u4ee5\u5c06\u52a0\u5bc6\u7ed1\u5b9a\u5230\u7279\u5b9a\u4e0a\u4e0b\u6587\uff0c\u4ee5\u53ca\u6709\u6548\u8f7d\u8377pt\u3002HPKE\u8fd4\u56de\u53d1\u9001\u7ed9\u63a5\u6536\u5668\u7684\u5bc6\u6587ct\u548c\u5c01\u88c5enc\u3002\n\u4f7f\u7528\u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f\u65f6\uff0c\u8fd8\u9700\u8981\u53d1\u9001\u65b9\u7684\u79c1\u94a5sk\u3002\n\u63a5\u6536\u5668\u5c06\u5c01\u88c5enc\u548c\u5bc6\u6587ct\u4e0e\u5176\u79c1\u94a5\u4e00\u8d77\u83b7\u53d6\u6709\u6548\u8f7d\u8377\u3002\n\u4f7f\u7528\u8eab\u4efd\u9a8c\u8bc1\u6a21\u5f0f\u65f6\uff0c\u8fd8\u9700\u8981\u53d1\u9001\u65b9\u7684\u516c\u94a5pkS\u3002\nHPKE\u5141\u8bb8\u4f7f\u7528\u540c\u4e00\u5171\u4eab\u5bc6\u94a5\u8fdb\u884c\u591a\u6b21\u52a0\u5bc6\u3002\u5982\u679c\u4ece\u53d1\u9001\u65b9\u5411\u63a5\u6536\u65b9\u53d1\u9001\u591a\u6761\u6d88\u606f\uff0c\u8fd9\u662f\u6709\u5229\u7684\u3002\u4e3a\u6b64\uff0cHPKE\u751f\u6210\u4e00\u4e2a\u5141\u8bb8\u52a0\u5bc6\uff08\u548c\u89e3\u5bc6\uff09\u591a\u6761\u6d88\u606f\u7684\u4e0a\u4e0b\u6587\u3002\n\u8bf7\u6ce8\u610f\uff0cHPKE\u6bd4AEAD RFC\u66f4\u8fdb\u4e00\u6b65\uff0c\u7b80\u5316\u4e86API\u3002\u6d88\u8d39\u8005\u53ea\u9700\u8981\u63d0\u4f9b\u6709\u6548\u8d1f\u8f7d\u548c\uff08\u53ef\u80fd\u662f\u7a7a\u7684\uff09\u9644\u52a0\u6570\u636e\u3002HPKE\u8d1f\u8d23\u5411AEAD\u63d0\u4f9b\u552f\u4e00\u7684nonce\uff0c\u5982\u679c\u5bf9\u4e0a\u4e0b\u6587\u6267\u884c\u4e86\u6700\u5927\u6570\u91cf\u7684\u52a0\u5bc6\uff0c\u5219\u4f1a\u5931\u8d25\uff0c\u5c24\u5176\u662f\u5982\u679cnonce\u4f1a\u6ea2\u51fa\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u5efa\u7acb\u989d\u5916\u7684\u5171\u4eab\u673a\u5bc6\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7HPKE\u5bfc\u51fa\u5668\u63a5\u53e3\u5b9e\u73b0\u3002API\u4e0e\u4e0a\u8ff0\u5bc6\u5c01\u548c\u5f00\u542f\u529f\u80fd\u7c7b\u4f3c\uff0c\u4f46\u4e0d\u9700\u8981\u6709\u6548\u8f7d\u8377\u6216\u989d\u5916\u6570\u636e\u3002\u76f8\u53cd\uff0c\u6211\u5fc5\u987b\u63d0\u4f9b\u5bfc\u51fa\u8005\u7684\u4e0a\u4e0b\u6587\u548c\u5bfc\u51fa\u79d8\u5bc6\u7684\u957f\u5ea6\u3002\n\u6211\u4eec\u6ca1\u6709\u4e3aHPKE\u53d1\u660e\u65b0\u7684\u7528\u4f8b\uff0c\u800c\u662f\u63cf\u8ff0\u4e86HPKE\u5982\u4f55\u5728MLS\u548cECH\u4e2d\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4eec\u53cd\u6620\u4e86\u6df7\u5408\u516c\u94a5\u52a0\u5bc6\u7684\u5e38\u89c1\u7528\u9014\u3002\nMLS\uff08Message Layer Security\uff09\u662fIETF\u7684\u4e00\u4efd\u8349\u6848\uff0c\u5b83\u6807\u51c6\u5316\u4e86\u4e00\u79cd\u65b0\u7684\u6709\u6548\u52a0\u5bc6\u5206\u7ec4\u53c2\u4e0e\u8005\u4e4b\u95f4\u6d88\u606f\u7684\u65b9\u6cd5\u3002\u5b83\u65e8\u5728\u89e3\u51b3\u5373\u65f6\u901a\u8baf\u4e2d\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u95ee\u9898\u3002HPKE\u662f\u4e00\u4e2a\u6838\u5fc3\u6784\u5efa\u5757\u3002\u4e3a\u4e86\u5c06\u6d88\u606f\u52a0\u5bc6\u5230\u534f\u8bae\u4e2d\u7684\u7279\u5b9a\u5b9e\u4f53\uff0cMLS\u4f7f\u7528HPKET\u5c06\u6d88\u606f\u52a0\u5bc6\u5230\u7279\u5b9a\u516c\u94a5\u3002\nECH\uff08Encrypted Client Hello\uff09\u662fTLS\uff08\u4f20\u8f93\u5c42\u5b89\u5168\uff09\u4e2d\u7684\u4e00\u79cd\u673a\u5236\uff0c\u7528\u4e8e\u5728\u670d\u52a1\u5668\u516c\u94a5\u4e0b\u52a0\u5bc6ClientHello\u6d88\u606f\u3002ECH\u8349\u6848\u4e2d\u7684\u63cf\u8ff0\u4e0e\u4e0a\u8ff0HPKEA\u7684\u57fa\u672c\u6a21\u5f0f\u76f4\u63a5\u5bf9\u5e94\u3002\u8fd9\u4f7f\u5f97TLS\u8fde\u63a5\u53d8\u5f97\u66f4\u79c1\u5bc6\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u4f1a\u6cc4\u9732\u6709\u5173\u8fde\u63a5\u7684\u4fe1\u606f\uff0c\u5c24\u5176\u662f\u5ba2\u6237\u7aef\u5e0c\u671b\u8fde\u63a5\u5230\u7684\u786e\u5207\u670d\u52a1\u5668\u3002\n\u4e3a\u4e86\u66f4\u597d\u5730\u7406\u89e3HPKE\u7684\u4fe1\u606f\u6d41\u548c\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u5728\u4e0b\u9762\u653e\u4e86\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6f14\u793a\u6765\u6f14\u793aHPKE\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\n\u53d1\u9001\u65b9\u4ece\u63a5\u6536\u65b9\u68c0\u7d22\u5728\u7b2c\u4e00\u6b65\u4e2d\u751f\u6210\u7684\u516c\u94a5\u3002\n\u53d1\u9001\u65b9\u4f7f\u7528HPKE\u52a0\u5bc6\u6709\u6548\u8f7d\u8377\u4ee5\u53ca\u63a5\u6536\u65b9\u516c\u94a5\u4e2d\u7684\u4fe1\u606f\u548c\u9644\u52a0\u6570\u636e\u3002\n\u5355\u51fb\u201cHPKE Open\u201d\u65f6\uff0c\u63a5\u6536\u65b9\u4f7f\u7528\u79c1\u94a5\u68c0\u7d22\u5171\u4eab\u5bc6\u94a5\u5e76\u89e3\u5bc6\u5bc6\u6587\u3002\u201c\u4fe1\u606f\u201d\u548c\u201c\u9644\u52a0\u6570\u636e\u201d\u4e0e\u53d1\u9001\u65b9\u8f93\u5165\u7684\u4fe1\u606f\u76f8\u540c\u3002\n\u8be5\u6f14\u793a\u662f\u7528hacspec\uff08Rust\u7684\u5b50\u96c6\uff09\u7f16\u5199\u7684\uff0c\u5e26\u6709WASM\u524d\u7aef\u3002\u8bf7\u7ee7\u7eed\u5173\u6ce8\u540e\u7eed\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u6df1\u5165\u4e86\u89e3\u8fd9\u4e2a\u5b9e\u73b0\u7684\u7ec6\u8282\u3002\nHPKE\u662f\u4e00\u4e2a\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684\u65b0\u5de5\u5177\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u51b3\u5bc6\u94a5\u5206\u53d1\u95ee\u9898\uff08\u53c2\u89c1MLS\u7528\u4f8b\uff09\uff0c\u5e76\u589e\u52a0\u73b0\u6709\u534f\u8bae\u7684\u9690\u79c1\uff08\u53c2\u89c1ECH\u7528\u4f8b\uff09\u3002\n\u6211\u7684\u516c\u53f8Cryspen\u4e3a\u4f7f\u7528HPKE\u4ee5\u53caHPKE\u548c\u5176\u4ed6\u534f\u8bae\u7684\u9ad8\u4fdd\u8bc1\u5b9e\u73b0\u63d0\u4f9b\u652f\u6301\u3002\u8054\u7cfb\u4ee5\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\u3002", "note_en": "HPKE is a  CFRG in  RFC 9180 that describes a scheme for hybrid public key encryption.It is co-authored by my  Cryspen co-founder  Karthikeyan Bhargavan and one ofhis PhD students  Benjamin Lipp as part of his research at  Inria.\n This blog post will give a brief overview of the specification and describes some use cases.\n If you want to learn more about the security proofs behind HPKE and the RFC process,Benjamin wrote an  excellent blog post about it.\n Hybrid Public Key Encryption, or short HPKE, is a cyrptographic mechanism thatallows encrypting payload to a public key.It is called \u201chybrid\u201d because the payload is encrypted with a symmetric scheme.The symmetric key is then encrypted to the receivers public key.The  HPKE standard defines a number of natural extensions to the basic settingthat allow the sender to authenticate themselves.\n  Hybrid public key encryption has been used in different ways since the early 1990s in protocols such as  PGP or  SMIME.While these two protocols are for a very specific use case a more general version of hybrid encryption is described in  ECIES. ECIES is part of many systems nowadays. Storing keys in the secure enclave on an iOS device for example uses  ECIES.For a deeper explanation and history of hybrid crypto systems I recommend reading Christopher Wood\u2019s blog post.\n However, there\u2019s no general description of hybrid public key encryption with modern primitives.The  HPKE standard solves this issue.Even before the RFC is finalised it is used in specifications for  ECH,  MLS,  ODOH, and  PPM.This shows the high demand for  HPKE.\n HPKE has four distinct modes of operation: Base, Auth, PSK, AuthPSK.In this blog post we only describe the two most commonly used modes Base and Auth.\n  The  Base mode is the most common use case for HPKE where payload is encryptedto a public key.All other modes are authenticated in different ways.\n AuthPSK uses the sender\u2019s private key as well as a pre-shared, high-entropy, key for authentication\n  The following figure depicts the general flow of encrypting to a public key.This is the Base mode in HPKE.This is the most basic application of hybrid crypto systems.Alex knows the public key from Sasha and wants to send some  Data to them.Shasha\u2019s public key is used to encrypt a shared secret, which is used to encryptthe  Data.The encrypted shared secret as well as the encrypted data is sent to Sasha, whocan retrieve the shared secret with their corresponding private key.\n   Sometimes it is useful or necessary to authenticate the sender of the data.This is depicted in the figure below and represents the HPKE Auth mode.The authentication is achieved by mixing in the sender\u2019s private key such thatthe receiver will only retrieve the correct shared secret if the public keythey use for the sender corresponds to the used private key.\n   HPKE is essentially standardising how to use  Key Encapsulation Mechanisms (KEM)for hybrid encryption.The sender in  HPKE uses a KEM to generate the shared secret as well as theencapsulation.The shared secret is then used in an  AEAD (after running it through a key schedule)in order to encrypt a payload.\n All HPKE use cases so far only take advantage of the single-shot APIs from HPKE.In order to encrypt a payload to a public key the sender needs to provide thereceiver\u2019s public key  pkR, some information  info and additional data  aad to bind the encryptionto a certain context, as well as the payload  pt.HPKE returns the cipher text  ct as well as the encapsulation  enc that are both sent tothe receiver.\n  When using the Auth mode the sender\u2019s private key  sk is needed in addition.\n The receiver takes the encapsulation  enc and cipher text  ct together with theirprivate key to retrieve the payload.\n  When using the Auth mode the sender\u2019s public key  pkS is needed in addition.\n  HPKE allows multiple encryptions with the same shared secret.This is favourable if multiple messages are sent from the sender to the receiver.To this end HPKE generates a context that allows encrypting (and decrypting) multiplemessages.\n  Note that HPKE goes a step further than the  AEAD RFC and simplifies the API.The consumer only needs to provide the payload and (potentially empty) additionaldata.HPKE takes care of providing unique nonces to the AEAD and fails if the maximumnumber of encryptions with the context have been performed \u2014 in particular ifthe nonce would overflow.\n   In some scenarios applications need to establish additional shared secrets.This can be achieved with the HPKE exporter interface.The API is similar to the  Seal and  Open functions above but don\u2019t requirea payload or additional data.Instead an  exporter_context and the length of the exported secret  L have tobe provided.\n   Instead of inventing new use cases for HPKE we describe how HPKE is used in  MLSand  ECH as they reflect common uses of hybrid public key encryption.\n  MLS (Message Layer Security) is an IETF draft that standardises a new way of efficiently encrypting messagesbetween participants in groups.It aims to solve the problem of end-to-end encryption in instant messaging. HPKE is a core building block.In order to encrypt a message to a specific entity in the protocol,  MLS uses  HPKEto encrypt the message to the specific public key.\n  ECH (Encrypted Client Hello) is a mechanism in  TLS (Transport Layer Security)for encrypting a ClientHello message under a server public key.This description from the  ECH draft corresponds directly to the Base mode of  HPKEas described above.This allows  TLS connections to become more private because they don\u2019t leakinformation about the connection, in particular the exact server the client wantsto connect to.\n  In order to better understand the message flow and working of HPKE we put togetheran interactive demo below to demonstrate how HPKE works.\n  The sender retrieves the public key from the receiver that has been generated in the first step.\n The sender uses HPKE to encrypt the payload together with the info and additional data to the receiver\u2019s public key.\n When clicking \u201cHPKE Open\u201d the receiver uses the private key to retrieve the shared secret and decrypt the ciphertext.The \u201cInfo\u201d and \u201cAdditional Data\u201d are the same as entered on the sender\u2019s side.\n  The demo is written in  hacspec (a subset of Rust) with a  WASM frontend.Please stay tuned for a follow-up blog post diving into the details of this implementation.\n  HPKE is a simple, but very powerful new tool that allows to efficiently solvekey distribution problems (see the MLS use case) as well as increase privacyin existing protocols (see the ECH use case).\n My company  Cryspen offers support for using  HPKE as well as high assurance implementationsof HPKE and other protocols. Get in touch for more information.", "posttime": "2022-03-01 22:20:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6df7\u5408,hybrid,hpke", "title": "TL\uff1bDR\u2013\u6df7\u5408\u516c\u94a5\u52a0\u5bc6", "title_en": "TL;DR \u2013 Hybrid Public Key Encryption", "transed": 1, "url": "https://www.franziskuskiefer.de/p/tldr-hybrid-public-key-encryption/", "via": "", "real_tags": ["\u6df7\u5408", "hybrid", "hpke"]}]