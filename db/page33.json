[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1072933, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53d1\u5e03\uff1a\u4eca\u5929\uff0c\u6211\u60f3\u5c31\u6211\u4eec\u6700\u8fd1\u5728Datadog\u4e0a\u53d1\u5e03\u7684\u4e00\u4e9b\u65b0\u7684\u8bc4\u6d4b\u529f\u80fd\u5206\u4eab\u4e00\u4e9b\u60f3\u6cd5\u3002\u6211\u5c06\u89e3\u91ca\u4ed6\u4eec\u505a\u4ec0\u4e48\uff0c\u5982\u4f55\u5de5\u4f5c\uff0c\u4ee5\u53ca\u54ea\u4e9bGo 1.18\u6350\u6b3e\u662f\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u987a\u5229\u8fdb\u884c\u3002\n\u8ba9\u6211\u4eec\u4ece\u6700\u7ec8\u7ed3\u679c\u5f00\u59cb\u3002\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a100\u6beb\u79d2\u7684\u8ddf\u8e2a\uff0c\u5176\u4e2d10\u6beb\u79d2\u7528\u4e8e\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u4f4690\u6beb\u79d2\u4ecd\u7136\u65e0\u6cd5\u89e3\u91ca\u3002\n\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u65f6\uff0c\u901a\u5e38\u9700\u8981\u7814\u7a76\u4ee3\u7801\u4ee5\u5bfb\u627e\u7ebf\u7d22\u3002\u4f60\u5fd8\u4e86\u4e00\u4e9b\u8ffd\u8e2a\u4eea\u5668\u4e86\u5417\uff1f\u662f\u65f6\u5019\u6dfb\u52a0\u3001\u91cd\u65b0\u90e8\u7f72\u5e76\u7b49\u5f85\u4e86\u3002\u6216\u8005\u4f60\u9700\u8981\u4f18\u5316\u4f60\u7684\u56f4\u68cb\u4ee3\u7801\uff1f\u5982\u679c\u662f\uff0c\u600e\u4e48\u505a\uff1f\n\u8fd9\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u662f\u53ef\u7ba1\u7406\u7684\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u2014\u2014\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5206\u6790\u6570\u636e\u6765\u586b\u8865\u7a7a\u767d\u3002\u8fd9\u6b63\u662f\u6211\u4eec\u65b0\u7684\u4ee3\u7801\u70ed\u70b9\u529f\u80fd\u6240\u505a\u7684\u3002\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u7684\u8bf7\u6c42\u5360\u7528\u4e8690\u6beb\u79d2\u7684CPU\u65f6\u95f4\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5f3a\u7684\u4fe1\u53f7\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u6392\u9664\u975eCPU\u6d3b\u52a8\uff0c\u5982\u672a\u6307\u4ee4\u7684\u670d\u52a1\u8c03\u7528\u3001\u4e92\u65a5\u51b2\u7a81\u3001\u901a\u9053\u7b49\u5f85\u3001\u7761\u7720\u7b49\u3002\n\u66f4\u68d2\u7684\u662f\uff0c\u5f53\u70b9\u51fb\u201c\u67e5\u770b\u914d\u7f6e\u6587\u4ef6\u201d\u6309\u94ae\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728CPU\u65f6\u95f4\u4e0a\u67e5\u770b\u6bcf\u4e2a\u8bf7\u6c42\u7684\u706b\u7130\u56fe\u3002\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u90fd\u82b1\u5728\u4e86JSON\u7f16\u7801\u4e0a\u3002\n\u7531\u4e8e\u6211\u4eec\u7684HTTP\u5904\u7406\u51fd\u6570\u6ca1\u6709\u51fa\u73b0\u5728\u5806\u6808\u8ddf\u8e2a\u4e2d\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u95f4\u63a5\u63a8\u65ad\uff0c\u8fd9\u9879\u5de5\u4f5c\u662f\u5728\u5904\u7406\u8bf7\u6c42\u7684goroutine\u751f\u6210\u7684\u540e\u53f0goroutine\u4e2d\u5b8c\u6210\u7684\u3002\n\u9664\u4e86\u4f7f\u7528\u6982\u8981\u6587\u4ef6\u5206\u89e3\u8ddf\u8e2a\u4fe1\u606f\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u505a\u76f8\u53cd\u7684\u4e8b\u60c5\uff0c\u6309\u7aef\u70b9\u5206\u89e3\u6982\u8981\u6587\u4ef6\u7684CPU\u65f6\u95f4\uff0c\u5982\u4e0b\u6240\u793a\u3002\u590d\u9009\u6846\u53ef\u7528\u4e8e\u6309\u7aef\u70b9\u8fc7\u6ee4\u914d\u7f6e\u6587\u4ef6\u3002\n\u4e3a\u4e86\u66f4\u5bb9\u6613\u7406\u89e3\u968f\u65f6\u95f4\u7684\u53d8\u5316\uff0c\u4f8b\u5982\u90e8\u7f72\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u6570\u636e\u7ed8\u5236\u6210\u56fe\u8868\u3002\n\u8fd9\u4e9b\u529f\u80fd\u5efa\u7acb\u5728\u4e00\u4e2a\u540d\u4e3approf\u6807\u7b7e\u7684\u73b0\u6709Go\u529f\u80fd\u4e4b\u4e0a\uff0c\u8be5\u529f\u80fd\u5141\u8bb8\u6211\u4eec\u5c06\u4efb\u610f\u952e/\u503c\u5bf9\u9644\u52a0\u5230\u5f53\u524d\u8fd0\u884c\u7684goroutine\u3002\u5f53\u751f\u6210\u65b0\u7684goroutine\u65f6\uff0c\u8fd9\u4e9b\u6807\u7b7e\u4f1a\u81ea\u52a8\u7ee7\u627f\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u8986\u76d6\u5230\u4ee3\u7801\u7684\u6240\u6709\u89d2\u843d\u3002\u5173\u952e\u7684\u662f\uff0c\u8fd9\u4e9b\u6807\u7b7e\u4e5f\u96c6\u6210\u5230\u4e86CPU\u6863\u6848\u5668\u4e2d\uff0c\u56e0\u6b64\u5b83\u4eec\u4f1a\u81ea\u52a8\u51fa\u73b0\u5728\u5b83\u751f\u6210\u7684CPU\u6863\u6848\u4e2d\u3002\n\u56e0\u6b64\uff0c\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff0c\u6211\u4eec\u4fee\u6539\u4e86dd trace go\u5e93\u4e2d\u7684\u8ddf\u8e2a\u4ee3\u7801\uff0c\u4ee5\u4fbf\u5728\u521b\u5efa\u65b0\u7684span\u65f6\u81ea\u52a8\u5e94\u7528\u8bf8\u5982span id\u548c\u7aef\u70b9\u4e4b\u7c7b\u7684\u6807\u7b7e\u3002\u6b64\u5916\uff0c\u5f53\u8de8\u5ea6\u5b8c\u6210\u65f6\uff0c\u6211\u4eec\u4f1a\u6ce8\u610f\u79fb\u9664\u6807\u7b7e\u3002\u8fd9\u79cd\u5b9e\u73b0\u7684\u7b80\u5316\u793a\u4f8b\u5982\u4e0b\u6240\u793a\uff1a\nfunc StartSpan\uff08ctx context.context\uff0c\u7aef\u70b9\u5b57\u7b26\u4e32\uff09*span{span:=&span{id:rand.Uint64\uff08\uff09\uff0crestoreCX:ctx}\u6807\u7b7e\uff1a=pprof\u3002\u6807\u7b7e\uff08&#34\uff1bspan#u id&#34\uff1b\uff0cfmt.Sprintf\uff08&#34\uff1b%d&#34\uff1b\uff0cspan.id\uff09\uff0c&#34\uff1b\u7ec8\u70b9&#34\uff1b\uff0c\u7ec8\u70b9\uff0c\uff09pprof\u3002SetGoroutineLabels\uff08pprof.WithLabels\uff08ctx\uff0clabels\uff09\uff09\u8fd4\u56despan}type span\u7ed3\u6784{id uint64 restoreCtx context.context}func\uff08s*span\uff09Finish\uff08\uff09{pprof.SetGoroutineLabels\uff08s.restoreCtx\uff09}\n\u6211\u4eec\u7684\u5b9e\u9645\u5b9e\u73b0\u7a0d\u5fae\u590d\u6742\u4e00\u4e9b\uff0c\u8fd8\u964d\u4f4e\u4e86\u6cc4\u9732PII\uff08\u4e2a\u4eba\u8eab\u4efd\u4fe1\u606f\uff09\u7684\u98ce\u9669\u3002\u5b83\u4f1a\u81ea\u52a8\u8986\u76d6contrib\u5305\u4e2d\u7684HTTP\u548cgRPC\u5305\u88c5\uff0c\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u5b9e\u73b0\u7684\u4efb\u4f55\u81ea\u5b9a\u4e49\u8ddf\u8e2a\u3002\n\u4e00\u65e6\u6211\u4eec\u7684\u540e\u7aef\u63a5\u6536\u5230\u8ddf\u8e2a\u548c\u5206\u6790\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u6267\u884c\u4e3a\u672c\u6587\u524d\u9762\u5c55\u793a\u7684\u529f\u80fd\u63d0\u4f9b\u52a8\u529b\u6240\u9700\u7684\u67e5\u627e\u3002\n\u4f5c\u4e3a\u5b9e\u73b0\u8fd9\u4e9b\u65b0\u7279\u6027\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u505a\u4e86\u5f88\u591a\u6d4b\u8bd5\uff0c\u5305\u62ec\u5355\u5143\u6d4b\u8bd5\u3001\u5fae\u89c2\u57fa\u51c6\u6d4b\u8bd5\u3001\u5b8f\u89c2\u57fa\u51c6\u6d4b\u8bd5\u7b49\u7b49\u3002\u6b63\u5982\u6240\u6599\uff0c\u8fd9\u5728\u6211\u4eec\u7684\u4ee3\u7801\u4e2d\u66b4\u9732\u4e86\u95ee\u9898\uff0c\u5e76\u5141\u8bb8\u6211\u4eec\u5feb\u901f\u4fee\u590d\u5b83\u4eec\u3002\n\u7a0d\u5fae\u51fa\u4e4e\u610f\u6599\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u5728Go\u8fd0\u884c\u65f6\u4e2d\u53d1\u73b0\u4e86\u51e0\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u5f71\u54cd\u4e86pprof\u6807\u7b7e\u7684\u51c6\u786e\u6027\uff0c\u4ee5\u53ca\u603b\u4f53\u4e0a\u7684CPU\u914d\u7f6e\u3002\u597d\u6d88\u606f\u662f\uff0c\u5728\u793e\u533a\u7684\u5e2e\u52a9\u4e0b\uff0cGo\u7ef4\u62a4\u4eba\u5458\u548c\u6211\u4eec\u8fd9\u8fb9\u7684\u8d21\u732e\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u95ee\u9898\u90fd\u5728\u5373\u5c06\u53d1\u5e03\u7684Go 1.18\u7248\u672c\u4e2d\u5f97\u5230\u4e86\u89e3\u51b3\u3002\n\u5982\u679c\u60a8\u5bf9\u8fd9\u65b9\u9762\u7684\u5168\u90e8\u7ec6\u8282\u611f\u5174\u8da3\uff0c\u8bf7\u67e5\u770b\u9644\u5e26\u7684\u5e16\u5b50\uff1aGo 1.18\u4e2d\u7684\u8bc4\u6d4b\u6539\u8fdb\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u9664\u975e\u4f60\u4f7f\u7528\u5927\u91cfcgo\uff0c\u5426\u5219Go 1.17\u4e2d\u7684\u65b0\u529f\u80fd\u5e94\u8be5\u5df2\u7ecf\u975e\u5e38\u9002\u5408\u4f60\u4e86\u3002\n\u6211\u76ee\u524d\u6b63\u5728\u5bfb\u627e\u5bf9\u8fd9\u4e9b\u65b0\u529f\u80fd\u611f\u5174\u8da3\u7684\u4eba\uff0c\u4ee5\u4fbf\u83b7\u5f97\u53cd\u9988\u3002\n\u65e0\u8bba\u4f60\u662f\u73b0\u6709\u5ba2\u6237\u8fd8\u662f\u6f5c\u5728\u5ba2\u6237\uff0c\u53ea\u8981\u7ed9\u6211\u53d1\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u8bbe\u7f6e30\u5206\u949f\u7684\u7f29\u653e\u3002\u4e3a\u4e86\u8ba9\u4ea4\u6613\u66f4\u751c\u871c\uff0c\u6211\u4e5f\u5f88\u4e50\u610f\u56de\u7b54\u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898\uff1a\uff09\u3002\n\u5982\u679c\u60f3\u5feb\u901f\u5165\u95e8\uff0c\u53ea\u9700\u5c06\u4e0b\u9762\u7684\u4ee3\u7801\u590d\u5236\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5373\u53ef\u3002\n\u6b64\u5916\uff0c\u60a8\u8fd8\u53ef\u4ee5\u67e5\u770b\u8fd9\u4e2a\u5b8c\u6574\u5de5\u4f5c\u7684dd trace go\u6f14\u793a\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u663e\u793a\u4e86\u4e00\u4e2a\u5305\u62ecHTTP\u548cPostgreSQL\u7684\u96c6\u6210\u3002\n\u5305\u4e3b\u8981\u5bfc\u5165\uff08&#34\uff1btime&#34\uff1b&#34\uff1bgopkg.in/DataDog/dd trace go.v1/ddtrace/tracer&#34\uff1b&#34\uff1bgopkg.in/DataDog/dd trace go.v1/profiler&#34\uff1b\uff09func main\uff08\uff09{const\uff08env=&#34\uff1bdev&#34\uff1bservice=&#34\uff1bexample&#34\uff1bversion=&#34\uff1b0.1&#34\uff1b\uff09tracer.Start\uff08tracer.WithEnv\uff08env\uff09\u3001tracer.WithService\uff08service\uff09\u3001tracer.WithService\uff08version\uff09\u3001tracer.withprofilercodehospots\uff08true\uff09\u3001tracer.WithProfilerEndpoints\uff08true\uff09\u3001defer\uff08\uff09\uff09tracer.Stop err:=profiler.Start\uff08profiler.with\u670d\u52a1\uff08service\uff09\uff0cprofiler\u3002WithEnv\uff08env\uff09\uff0c\u63a2\u67e5\u5668\u3002WithVersion\uff08version\uff09\uff0c//\u5728\u6240\u6709\u8303\u56f4\u5185\uff0c100%\u7684\u65f6\u95f4\u5185\u542f\u7528CPU\u5206\u6790\u4ee5\u6355\u83b7\u70ed\u70b9\u4fe1\u606f//\u7684\u529f\u80fd\u3002\u76ee\u524d\u9ed8\u8ba4\u503c\u4e3a25%\uff0c\u4f46\u5728//\u4e0b\u4e00\u4e2add trace go\u53d1\u884c\u7248\u4e2d\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u63a2\u67e5\u5668\u3002CPUDuration\uff0860*time.s\uff09\uff0c\u5206\u6790\u5668\u3002WithPeriod\uff0860*\u65f6\u95f4\u79d2\uff09\uff0c\u5982\u679c\u51fa\u9519\u65e0{panic\uff08err\uff09}\u5ef6\u8fdf\u5206\u6790\u5668\u3002\u505c\u6b62\uff08\uff09/&lt\uff1b\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801&gt\uff1b}\n--Felix Geisend\u00f6rfer\u901a\u8fc7RSS\u6216\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u6b64\u535a\u5ba2\uff0c\u6216\u901a\u8fc7Twitter\u4ece\u6211\u90a3\u91cc\u83b7\u53d6\u5c0f\u7684\u66f4\u65b0\u3002", "note_en": "Published:   Today I\u2019d like to share a few thoughts on a few new  profiling features we recently shipped at Datadog. I\u2019ll explain what they do, how they work, and which Go 1.18 contributions were needed in order for things to work well.\n  Let\u2019s start with the end result. Imagine you have a 100ms trace where 10ms are spent on a database query, but 90ms remain unexplained.\n  When this happens, you usually need to study your code for clues. Did you forget some tracing instrumentation? Time to add it, redeploy and wait. Or perhaps you need to optimize your Go code? If yes, how?\n This workflow is manageable, but it turns out there is a better way \u2013 we can use profiling data to fill in the gaps. And that\u2019s exactly what our new  Code Hotspots feature does. As you can see below, our request used 90ms On-CPU time. This is a strong signal that lets us rule out Off-CPU activity such as uninstrumented service calls, mutex contentions, channel waits, sleeping, etc.\n  Even better, when clicking the \u201cView Profile\u201d button, we can view this On-CPU time as a per-request flame graph. Here we can see that our time was spent on JSON encoding.\n  And since our HTTP handler functions don\u2019t show up in the stack traces, we can also indirectly infer that this work was done in a background goroutine spawned by the goroutine handling the request.\n In addition to breaking down tracing information using profiling, we can also do the opposite and break down a profile\u2019s  CPU Time by Endpoint as shown below. The checkboxes can be used to filter the profile by endpoint.\n  And to make it easier to understand changes over time, e.g. after a deployment, we can graph this data.\n   The features are built on-top of an existing Go feature called  pprof labels which allows us to attach arbitrary key/value pairs to the currently running goroutine. These labels are automatically inherited when a new goroutine is spawned, so they reach into all corners of your code. Crucially these labels are also integrated into the CPU profiler, so they automatically end up in the CPU profiles it produces.\n So to implement this feature, we modified the tracing code in our  dd-trace-go library to automatically apply labels such as  span id and  endpoint whenever a new span is created. Additionally we take care of removing the labels when the span is finished. A simplified example of this implementation can be seen below:\n func  StartSpan(ctx context.Context, endpoint  string)  *span {\tspan  :=  &amp;span{id: rand. Uint64(), restoreCtx: ctx}\tlabels  := pprof. Labels(\t\t &#34;span_id&#34;, fmt. Sprintf( &#34;%d&#34;, span.id),\t\t &#34;endpoint&#34;, endpoint,\t)\tpprof. SetGoroutineLabels(pprof. WithLabels(ctx, labels))\t return span} type span  struct {\tid  uint64\trestoreCtx context.Context} func (s  *span)  Finish() {\tpprof. SetGoroutineLabels(s.restoreCtx)}\n Our actual implementation is a bit more complex and also reduces the risk of leaking PII (Personally Identifiable Information). It automatically covers the HTTP and gRPC wrappers in our contrib package, as well as any custom traces your application may implement.\n Once our backend receives the tracing and profiling information, we\u2019re able to perform the lookups needed to power the features showcased earlier in this post.\n  As part of implementing these new features, we did a lot of testing, including unit tests, micro-benchmarks, macro-benchmarks and more. As expected, this surfaced problems in our code and allowed us to quickly fix them.\n Somewhat less expected, we also discovered several issues in the Go runtime that were impacting the accuracy of pprof labels, as well as CPU profiling in general. The good news is that with the help of the community, the Go maintainers and contributions from our end \u2013 all of these issues have been fixed in the upcoming Go 1.18 release.\n If you\u2019re interested in the full details on this, check out the companion post:  Profiling Improvements in Go 1.18.\n That being said, unless you use a lot of cgo, the new features should already work great for you in Go 1.17.\n  I\u2019m currently looking for people who are interested in taking these new features for a spin in order to get feedback.\n It doesn\u2019t matter if you\u2019re an existing or potential customer, just  send me an email and we can set up a 30 min zoom. To sweeten the deal, I\u2019m also happy to answer general Go profiling questions along the way :).\n  If you want to get started quickly, you can simply copy the code below into your application.\n Additionally you can check out this fully working  dd-trace-go-demo application that shows an integration including HTTP and PostgreSQL.\n package main import (\t &#34;time&#34;\t &#34;gopkg.in/DataDog/dd-trace-go.v1/ddtrace/tracer&#34;\t &#34;gopkg.in/DataDog/dd-trace-go.v1/profiler&#34;) func  main() {\t const (\t\tenv =  &#34;dev&#34;\t\tservice =  &#34;example&#34;\t\tversion =  &#34;0.1&#34;\t)\ttracer. Start(\t\ttracer. WithEnv(env),\t\ttracer. WithService(service),\t\ttracer. WithServiceVersion(version),\t\ttracer. WithProfilerCodeHotspots( true),\t\ttracer. WithProfilerEndpoints( true),\t)\t defer tracer. Stop()\terr  := profiler. Start(\t\tprofiler. WithService(service),\t\tprofiler. WithEnv(env),\t\tprofiler. WithVersion(version),\t\t // Enables CPU profiling 100% of the time to capture hotspot information \t\t // for all spans. Default is 25% right now, but this might change in the \t\t // next dd-trace-go release. \t\tprofiler. CPUDuration( 60 *time.Second),\t\tprofiler. WithPeriod( 60 *time.Second),\t)\t if err  !=  nil {\t\t panic(err)\t}\t defer profiler. Stop()\t // &lt;your application code&gt; }\n -- Felix Geisend\u00f6rfer Subscribe to this blog via  RSS or  E-Mail or get small updates from me via  Twitter.", "posttime": "2022-02-13 18:48:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8ddf\u8e2a,profiling,\u529f\u80fd", "title": "\u5c06Go\u5206\u6790\u4e0e\u8ddf\u8e2a\u8fde\u63a5\u8d77\u6765", "title_en": "Connecting Go Profiling with Tracing", "transed": 1, "url": "https://felixge.de/2022/02/11/connecting-go-profiling-with-tracing/", "via": "", "real_tags": ["\u8ddf\u8e2a", "profiling", "\u529f\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072932, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u6211\u4eec\u7684\u5ba2\u6237&#39\uff1b\u4fdd\u62a4\uff0c\u82f9\u679c\u6ca1\u6709&#39\uff1b\u5728\u8c03\u67e5\u5b8c\u6210\u3001\u8865\u4e01\u6216\u53d1\u5e03\u53ef\u7528\u4e4b\u524d\uff0c\u4e0d\u8981\u62ab\u9732\u3001\u8ba8\u8bba\u6216\u786e\u8ba4\u5b89\u5168\u95ee\u9898\u3002\u82f9\u679c\u5b89\u5168\u66f4\u65b0\u9875\u9762\u4e0a\u5217\u51fa\u4e86\u6700\u65b0\u7248\u672c\u3002\n\u9002\u7528\u4e8e\uff1aiPhone 6s\u53ca\u66f4\u9ad8\u7248\u672c\u3001iPad Pro\uff08\u6240\u6709\u578b\u53f7\uff09\u3001iPad Air 2\u53ca\u66f4\u9ad8\u7248\u672c\u3001iPad\u7b2c\u4e94\u4ee3\u53ca\u66f4\u9ad8\u7248\u672c\u3001iPad mini 4\u53ca\u66f4\u9ad8\u7248\u672c\u548ciPod touch\uff08\u7b2c\u4e03\u4ee3\uff09\n\u5f71\u54cd\uff1a\u5904\u7406\u6076\u610f\u5236\u4f5c\u7684web\u5185\u5bb9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6267\u884c\u4efb\u610f\u4ee3\u7801\u3002\u82f9\u679c\u77e5\u9053\u4e00\u4efd\u62a5\u544a\u79f0\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u5df2\u88ab\u79ef\u6781\u5229\u7528\u3002\n\u6709\u5173\u975e\u82f9\u679c\u5236\u9020\u7684\u4ea7\u54c1\u6216\u975e\u82f9\u679c\u63a7\u5236\u6216\u6d4b\u8bd5\u7684\u72ec\u7acb\u7f51\u7ad9\u7684\u4fe1\u606f\u672a\u7ecf\u63a8\u8350\u6216\u8ba4\u53ef\u3002\u82f9\u679c\u5bf9\u7b2c\u4e09\u65b9\u7f51\u7ad9\u6216\u4ea7\u54c1\u7684\u9009\u62e9\u3001\u6027\u80fd\u6216\u4f7f\u7528\u4e0d\u627f\u62c5\u4efb\u4f55\u8d23\u4efb\u3002\u82f9\u679c\u4e0d\u5bf9\u7b2c\u4e09\u65b9\u7f51\u7ad9\u7684\u51c6\u786e\u6027\u6216\u53ef\u9760\u6027\u505a\u51fa\u4efb\u4f55\u58f0\u660e\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8054\u7cfb\u4f9b\u5e94\u5546\u3002", "note_en": "For our customers&#39; protection, Apple doesn&#39;t disclose, discuss, or confirm security issues until an investigation has occurred and patches or releases are available. Recent releases are listed on the\u00a0 Apple security updates\u00a0page.\n    Available for: iPhone 6s and later, iPad Pro (all models), iPad Air 2 and later, iPad 5th generation and later, iPad mini 4 and later, and iPod touch (7th generation)\n Impact: Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited.\n  Information about products not manufactured by Apple, or independent websites not controlled or tested by Apple, is provided without recommendation or endorsement. Apple assumes no responsibility with regard to the selection, performance, or use of third-party websites or products. Apple makes no representations regarding third-party website accuracy or reliability.  Contact the vendor for additional information.", "posttime": "2022-02-13 18:47:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ios,\u5b89\u5168,content,\u82f9\u679c", "title": "\u5173\u4e8eiOS 15.3.1\u548ciPadOS 15.3.1\u7684\u5b89\u5168\u5185\u5bb9", "title_en": "About the security content of iOS 15.3.1 and iPadOS 15.3.1", "transed": 1, "url": "https://support.apple.com/en-us/HT213093", "via": "", "real_tags": ["ios", "\u5b89\u5168", "content", "\u82f9\u679c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072930, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f51\u7edc\u5fc5\u987b\u4e3a\u5404\u79cd\u89c4\u6a21\u7684\u7528\u6237\u3001\u5e7f\u544a\u5546\u548c\u51fa\u7248\u5546\u670d\u52a1\u2014\u2014\u4f46\u7528\u6237\u4f18\u5148\u3002\u7406\u7531\u5f88\u5145\u5206\uff1a\u8d8a\u6765\u8d8a\u591a\u7684\u4eba\u4f7f\u7528\u4e92\u8054\u7f51\u6765\u6ee1\u8db3\u66f4\u591a\u7684\u65e5\u5e38\u9700\u6c42\u3002\u4ed6\u4eec\u4e0d\u60f3\u4e8b\u540e\u518d\u8003\u8651\u9690\u79c1\u95ee\u9898\uff1b\u4ed6\u4eec\u60f3\u8981\u8bbe\u8ba1\u9690\u79c1\u3002\n\u7406\u89e3\u8fd9\u4e00\u70b9\u662f\u6211\u4eec\u601d\u8003\u5982\u4f55\u6784\u5efa\u8c37\u6b4c\u5206\u6790\u7684\u6838\u5fc3\uff0c\u8c37\u6b4c\u5206\u6790\u662f\u4e00\u5957\u65e5\u5e38\u5de5\u5177\uff0c\u5e2e\u52a9\u5546\u4e1a\u3001\u516c\u5171\u548c\u975e\u8425\u5229\u90e8\u95e8\u7684\u7ec4\u7ec7\u4e86\u89e3\u8bbf\u95ee\u8005\u5982\u4f55\u4f7f\u7528\u4ed6\u4eec\u7684\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u7edd\u4e0d\u662f\u901a\u8fc7\u8bc6\u522b\u4e2a\u4eba\u6216\u8de8\u7f51\u7ad9\u6216\u5e94\u7528\u7a0b\u5e8f\u8ddf\u8e2a\u4ed6\u4eec\u3002\n\u7531\u4e8e\u8fd9\u4e9b\u7ec4\u7ec7\u4e2d\u7684\u4e00\u4e9b\u6700\u8fd1\u9762\u4e34\u7740\u5206\u6790\u670d\u52a1\u662f\u5426\u80fd\u4e0e\u7528\u6237\u9690\u79c1\u548c\u4e2a\u4eba\u6570\u636e\u56fd\u9645\u4f20\u8f93\u89c4\u5219\u517c\u5bb9\u7684\u95ee\u9898\uff0c\u6211\u4eec\u60f3\u89e3\u91ca\u4e00\u4e0b\u8c37\u6b4c\u5206\u6790\u505a\u4e86\u4ec0\u4e48\uff0c\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u5b83\u6ca1\u6709\u505a\u4ec0\u4e48\u3002\n\u4e8b\u5b9e\uff1a\u8c37\u6b4c\u5206\u6790\uff08Google Analytics\uff09\u662f\u4e00\u9879\u7531\u7ec4\u7ec7\u4f7f\u7528\u7684\u670d\u52a1\uff0c\u7528\u4e8e\u4e86\u89e3\u5176\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u4ece\u800c\u4f7f\u5176\u66f4\u597d\u5730\u5de5\u4f5c\u3002\u5b83\u4e0d\u4f1a\u5728\u4e92\u8054\u7f51\u4e0a\u8ffd\u8e2a\u4eba\u6216\u5206\u6790\u4eba\u3002\n\u8c37\u6b4c\u5206\u6790\u65e0\u6cd5\u7528\u4e8e\u8ffd\u8e2a\u7f51\u7edc\u6216\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u7528\u6237\u3002\u5b83\u4e0d\u4f1a\u521b\u5efa\u7528\u6237\u914d\u7f6e\u6587\u4ef6\u3002\nGoogle Analytics\u5e2e\u52a9\u5e94\u7528\u7a0b\u5e8f\u548c\u7f51\u7ad9\u7684\u6240\u6709\u8005\u4e86\u89e3\u4ed6\u4eec\u7684\u7528\u6237\u5982\u4f55\u53c2\u4e0e\u4ed6\u4eec\u7684\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\uff08\u5e76\u4e14\u4ec5\u9650\u4e8e\u4ed6\u4eec\u7684\u7f51\u7ad9\u6216\u5e94\u7528\u7a0b\u5e8f\uff09\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u4e86\u89e3\u5728\u7ebf\u62a5\u7eb8\u7684\u54ea\u4e9b\u90e8\u5206\u8bfb\u8005\u6700\u591a\uff0c\u6216\u8005\u8d2d\u7269\u8f66\u88ab\u7f51\u4e0a\u5546\u5e97\u629b\u5f03\u7684\u9891\u7387\u3002\u8fd9\u6709\u52a9\u4e8e\u4ed6\u4eec\u901a\u8fc7\u66f4\u597d\u5730\u4e86\u89e3\u54ea\u4e9b\u6709\u6548\u6216\u54ea\u4e9b\u65e0\u6548\u6765\u6539\u5584\u5ba2\u6237\u4f53\u9a8c\u3002\n\u8fd9\u7c7b\u4fe1\u606f\u8fd8\u5305\u62ec\u6240\u7528\u8bbe\u5907\u6216\u6d4f\u89c8\u5668\u7684\u7c7b\u578b\uff1b\u8bbf\u95ee\u8005\u5728\u5176\u7f51\u7ad9\u6216\u5e94\u7528\u4e0a\u7684\u5e73\u5747\u82b1\u8d39\u65f6\u95f4\uff1b\u6216\u8005\u5927\u6982\u662f\u4ed6\u4eec\u7684\u8bbf\u5ba2\u6765\u81ea\u4e16\u754c\u7684\u54ea\u4e2a\u5730\u65b9\u3002\u8fd9\u4e9b\u6570\u636e\u70b9\u4ece\u672a\u7528\u4e8e\u8bc6\u522b\u8bbf\u5ba2\u6216\u8c37\u6b4c\u5206\u6790\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u4eba\u3002\nGoogle Analytics\u7981\u6b62\u7528\u6237\u4e0a\u4f20\u53ef\u80fd\u88abGoogle\u7528\u6765\u8bc6\u522b\u67d0\u4eba\u7684\u4fe1\u606f\u3002\u6211\u4eec\u4e3a\u5ba2\u6237\u63d0\u4f9b\u6570\u636e\u5220\u9664\u5de5\u5177\uff0c\u5e2e\u52a9\u4ed6\u4eec\u5728\u65e0\u610f\u4e2d\u5220\u9664\u670d\u52a1\u5668\u4e0a\u7684\u6570\u636e\u3002\n\u7ec4\u7ec7\u4f7f\u7528\u8c37\u6b4c\u5206\u6790\u662f\u56e0\u4e3a\u4ed6\u4eec\u9009\u62e9\u8fd9\u6837\u505a\u3002\u4ed6\u4eec\uff0c\u800c\u4e0d\u662f\u8c37\u6b4c\uff0c\u63a7\u5236\u7740\u6536\u96c6\u4ec0\u4e48\u6837\u7684\u6570\u636e\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u8fd9\u4e9b\u6570\u636e\u3002\n\u4ed6\u4eec\u4fdd\u7559\u4f7f\u7528Google Analytics\u6536\u96c6\u7684\u6570\u636e\u7684\u6240\u6709\u6743\uff0cGoogle\u53ea\u6309\u7167\u4ed6\u4eec\u7684\u6307\u793a\u5b58\u50a8\u548c\u5904\u7406\u8fd9\u4e9b\u6570\u636e\u2014\u2014\u4f8b\u5982\uff0c\u5411\u4ed6\u4eec\u63d0\u4f9b\u5173\u4e8e\u8bbf\u95ee\u8005\u5982\u4f55\u4f7f\u7528\u5176\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u62a5\u544a\u3002\n\u8fd9\u4e9b\u7ec4\u7ec7\u53ef\u4ee5\u5355\u72ec\u9009\u62e9\u4e0e\u8c37\u6b4c\u5171\u4eab\u5176\u5206\u6790\u6570\u636e\uff0c\u4ee5\u5b9e\u73b0\u6280\u672f\u652f\u6301\u3001\u57fa\u51c6\u6d4b\u8bd5\u548c\u9500\u552e\u652f\u6301\u7b49\u7279\u5b9a\u76ee\u7684\u4e4b\u4e00\u3002\n\u7ec4\u7ec7\u5fc5\u987b\u91c7\u53d6\u660e\u786e\u884c\u52a8\uff0c\u5141\u8bb8\u8c37\u6b4c\u4f7f\u7528\u5176\u5206\u6790\u6570\u636e\u6765\u6539\u8fdb\u6216\u521b\u5efa\u65b0\u7684\u4ea7\u54c1\u548c\u670d\u52a1\u3002\u8fd9\u4e9b\u8bbe\u7f6e\u5b8c\u5168\u662f\u53ef\u9009\u7684\uff0c\u9700\u8981\u660e\u786e\u7684\u9009\u62e9\u52a0\u5165\u3002\n\u4e8b\u5b9e\uff1aGoogle Analytics\u901a\u8fc7\u4e3a\u5ba2\u6237\u63d0\u4f9b\u4e00\u7cfb\u5217\u63a7\u5236\u548c\u8d44\u6e90\uff0c\u5e2e\u52a9\u4ed6\u4eec\u5b9e\u73b0\u6cd5\u89c4\u9075\u4ece\u6027\u3002\n\u5f53\u7ec4\u7ec7\u4f7f\u7528\u8c37\u6b4c\u5206\u6790\u4ece\u4ed6\u4eec\u7684\u7f51\u7ad9\u6216\u5e94\u7528\u7a0b\u5e8f\u6536\u96c6\u6570\u636e\u65f6\uff0c\u4ed6\u4eec\u4f1a\u63a7\u5236\u8fd9\u4e9b\u6570\u636e\u3002\u4f8b\u5982\uff0c\u4ed6\u4eec\uff1a\u53ef\u4ee5\u5728\u5176\u7f51\u7ad9\u4e0a\u542f\u7528IP\u533f\u540d\uff08\u6216IP\u5c4f\u853d\uff09\uff0c\u8fd9\u610f\u5473\u7740\u6c38\u8fdc\u4e0d\u4f1a\u5904\u7406\u6216\u8bb0\u5f55\u5b8c\u6574\u7684IP\u5730\u5740\u3002\n\u53ef\u4ee5\u9009\u62e9Analytics\u5b58\u50a8\u7528\u6237\u7ea7\u548c\u4e8b\u4ef6\u7ea7\u6570\u636e\u7684\u65f6\u95f4\uff0c\u7136\u540e\u518d\u5c06\u5176\u4eceAnalytics\u5e10\u6237\u548c\u8c37\u6b4c\u670d\u52a1\u5668\u4e2d\u81ea\u52a8\u5220\u9664\u3002\n\u53ef\u4ee5\u901a\u8fc7\u63d0\u4ea4\u5220\u9664\u8bf7\u6c42\u4ece\u5206\u6790\u670d\u52a1\u5668\u4e2d\u5220\u9664\u6570\u636e\uff0c\u5305\u62ec\u901a\u8fc7\u7528\u6237\u5220\u9664API\u3001\u7528\u6237\u6d4f\u89c8\u5668\u62a5\u544a\u6216\u7528\u6237\u63a2\u7d22\u6280\u672f\u4ece\u5206\u6790\u5e10\u6237\u4e2d\u5220\u9664\u5355\u4e2a\u7528\u6237\u7684\u6570\u636e\u3002\n\u8c37\u6b4c\u751f\u4ea7\u7684\u4ea7\u54c1\u548c\u529f\u80fd\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u5b89\u5168\u7684\uff0c\u5728\u8bbe\u8ba1\u4e0a\u662f\u79c1\u6709\u7684\uff0c\u5e76\u8ba9\u7528\u6237\u63a7\u5236\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u63d0\u4f9b\u4e00\u4e2a\u6d4f\u89c8\u5668\u63d2\u4ef6\uff0c\u5141\u8bb8\u7528\u6237\u5728\u4ed6\u4eec\u8bbf\u95ee\u7684\u4efb\u4f55\u7f51\u7ad9\u4e0a\u7981\u7528Google Analytics\u7684\u6d4b\u91cf\u529f\u80fd\u3002\n\u9664\u4e86\u63d0\u4f9b\u5f3a\u5927\u7684\u9ed8\u8ba4\u4fdd\u62a4\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u4e3a\u4eba\u4eec\u63d0\u4f9b\u53ef\u8bbf\u95ee\u3001\u76f4\u89c2\u548c\u6709\u7528\u7684\u63a7\u5236\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u80fd\u591f\u505a\u51fa\u9002\u5408\u81ea\u5df1\u7684\u9009\u62e9\u3002\u4f8b\u5982\uff0c\u8bbf\u95ee\u8005\u53ef\u4ee5\u9009\u62e9\u4ed6\u4eec\u8bbf\u95ee\u7684\u7f51\u7ad9\u662f\u5426\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5206\u6790cookie\uff0c\u6216\u8005\u963b\u6b62\u6240\u6709\u6216\u90e8\u5206\u7f51\u7ad9\u4e0a\u7684\u6240\u6709cookie\u3002\n\u6b64\u5916\uff0c\u7ec4\u7ec7\u8fd8\u9700\u8981\u5411\u8bbf\u95ee\u8005\u53d1\u51fa\u9002\u5f53\u7684\u901a\u77e5\uff0c\u544a\u77e5\u4ed6\u4eec\u4f7f\u7528\u7684\u8c37\u6b4c\u5206\u6790\u7684\u5b9e\u73b0\u548c\u529f\u80fd\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u6570\u636e\u662f\u5426\u53ef\u4ee5\u8fde\u63a5\u5230\u4ed6\u4eec\u62e5\u6709\u7684\u5173\u4e8e\u4ed6\u4eec\u7684\u5176\u4ed6\u6570\u636e\u3002\n\u6839\u636e\u5176\u6240\u5728\u56fd\u5bb6\u7684\u9002\u7528\u6cd5\u5f8b\u8981\u6c42\uff0c\u8fd9\u4e9b\u5ba2\u6237\u6bcf\u6b21\u8bbf\u95ee\u90fd\u5fc5\u987b\u83b7\u5f97\u7528\u6237\u7684\u540c\u610f\u3002\n\u4e8b\u5b9e\uff1a\u8c37\u6b4c\u5206\u6790\u4e0d\u80fd\u7528\u4e8e\u5411\u4eba\u4eec\u5c55\u793a\u57fa\u4e8e\u5065\u5eb7\u3001\u79cd\u65cf\u3001\u6027\u53d6\u5411\u7b49\u654f\u611f\u4fe1\u606f\u7684\u5e7f\u544a\u3002\n\u8c37\u6b4c\u5206\u6790\u6839\u672c\u4e0d\u63d0\u4f9b\u5e7f\u544a\u670d\u52a1\u3002\u5b83\u662f\u4e00\u4e2a\u7f51\u7edc\u548c\u5e94\u7528\u5206\u6790\u5de5\u5177\u3002\uff08\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u9605\u8bfb\u5168\u90e8\u5185\u5bb9\u3002\uff09\n\u4e00\u4e9b\u7ec4\u7ec7\u786e\u5b9e\u4f1a\u5229\u7528\u901a\u8fc7\u8c37\u6b4c\u5206\u6790\u83b7\u5f97\u7684\u5173\u4e8e\u81ea\u5df1\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u89c1\u89e3\uff0c\u4e3a\u81ea\u5df1\u7684\u5e7f\u544a\u6d3b\u52a8\u63d0\u4f9b\u4fe1\u606f\u3002\n\u5982\u679c\u4e00\u5bb6\u4f01\u4e1a\u4e5f\u4f7f\u7528\u8c37\u6b4c\u7684\u5e7f\u544a\u5e73\u53f0\uff0c\u90a3\u4e48\u5b83\u5fc5\u987b\u4e25\u683c\u9075\u5b88\u8c37\u6b4c\u7684\u5e7f\u544a\u6307\u5357\uff0c\u9632\u6b62\u4f7f\u7528\u654f\u611f\u4fe1\u606f\u6765\u4e2a\u6027\u5316\u5e7f\u544a\u2014\u2014\u6bd4\u5982\u5065\u5eb7\u3001\u79cd\u65cf\u3001\u5b97\u6559\u6216\u6027\u53d6\u5411\u3002\u6211\u4eec\u7edd\u4e0d\u5141\u8bb8\u654f\u611f\u4fe1\u606f\u7528\u4e8e\u4e2a\u6027\u5316\u5e7f\u544a\u3002\u8fd9\u662f\u7edd\u5bf9\u7981\u6b62\u7684\u3002\n\u4e8b\u5b9e\uff1a\u4e00\u4e2a\u7ec4\u7ec7\u7684\u8c37\u6b4c\u5206\u6790\u6570\u636e\u53ea\u6709\u5728\u6ee1\u8db3\u7279\u5b9a\u548c\u4e25\u683c\u7684\u9690\u79c1\u6761\u4ef6\u65f6\u624d\u80fd\u4f20\u8f93\u3002\n\u8c37\u6b4c\u5206\u6790\uff08Google Analytics\uff09\u5728\u5168\u7403\uff08\u5305\u62ec\u7f8e\u56fd\uff09\u8fd0\u8425\u6570\u636e\u4e2d\u5fc3\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u670d\u52a1\u901f\u5ea6\u548c\u53ef\u9760\u6027\u3002\u5728\u5c06\u6570\u636e\u4f20\u8f93\u5230\u7f8e\u56fd\u7684\u4efb\u4f55\u670d\u52a1\u5668\u4e4b\u524d\uff0c\u6570\u636e\u4f1a\u5728\u672c\u5730\u670d\u52a1\u5668\u4e2d\u6536\u96c6\uff0c\u7528\u6237\u7684IP\u5730\u5740\u4f1a\u533f\u540d\uff08\u5f53\u5ba2\u6237\u542f\u7528\u8be5\u529f\u80fd\u65f6\uff09\u3002\nGDPR\u548c\u6b27\u6d32\u6cd5\u9662\u8868\u793a\uff0c\u53ea\u8981\u6ee1\u8db3\u6761\u4ef6\uff0c\u5c31\u53ef\u4ee5\u51fa\u4e8e\u8fd9\u79cd\u539f\u56e0\u5c06\u6570\u636e\u8f6c\u79fb\u5230\u6b27\u76df\u4e4b\u5916\u3002\n\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u6211\u4eec\u91c7\u53d6\u4e86\u8bb8\u591a\u63aa\u65bd\uff0c\u5305\u62ec\uff1a\u4f7f\u7528\u6b27\u76df\u6807\u51c6\u5408\u540c\u6761\u6b3e\u7b49\u6570\u636e\u4f20\u8f93\u534f\u8bae\uff0c\u8fd9\u4e9b\u534f\u8bae\u5df2\u88ab\u786e\u8ba4\u4e3a\u5411\u7f8e\u56fd\u4f20\u8f93\u6570\u636e\u7684\u6709\u6548\u673a\u5236\uff0c\u4ee5\u53ca\u4fdd\u6301\u6570\u636e\u5b89\u5168\u7684\u5176\u4ed6\u4fdd\u969c\u63aa\u65bd\uff1a\u884c\u4e1a\u9886\u5148\u7684\u6570\u636e\u52a0\u5bc6\uff0c\u6211\u4eec\u7684\u6570\u636e\u4e2d\u5fc3\u7684\u7269\u7406\u5b89\u5168\uff0c\u4ee5\u53ca\u5904\u7406\u653f\u5e9c\u7528\u6237\u4fe1\u606f\u8bf7\u6c42\u7684\u7a33\u5065\u653f\u7b56\u3002\n\u7ef4\u62a4\u56fd\u9645\u516c\u8ba4\u7684\u72ec\u7acb\u5b89\u5168\u6807\u51c6\uff0c\u5982ISO 27001\uff0c\u8be5\u6807\u51c6\u4e3a\u6211\u4eec\u7684\u7cfb\u7edf\u3001\u5e94\u7528\u7a0b\u5e8f\u3001\u4eba\u5458\u3001\u6280\u672f\u3001\u6d41\u7a0b\u548c\u6570\u636e\u4e2d\u5fc3\u63d0\u4f9b\u72ec\u7acb\u8ba4\u8bc1\u3002\n\u4e3a\u7f51\u7ad9\u6240\u6709\u8005\u63d0\u4f9b\u5e7f\u6cdb\u7684\u63a7\u5236\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u63a7\u5236\u6765\u786e\u4fdd\u7f51\u7ad9\u8bbf\u95ee\u8005\u6570\u636e\u7684\u5b89\u5168\u3002\n\u6211\u4eec\u7684\u57fa\u7840\u8bbe\u65bd\u548c\u52a0\u5bc6\u65e8\u5728\u4fdd\u62a4\u6570\u636e\uff0c\u5e76\u4fdd\u62a4\u5176\u514d\u53d7\u4efb\u4f55\u653f\u5e9c\u8bbf\u95ee\u3002\n\u6211\u4eec\u8fd8\u4f7f\u7528\u5f3a\u5927\u7684\u6280\u672f\u63aa\u65bd\uff08\u5982\u5e94\u7528\u5c42\u4f20\u8f93\u5b89\u5168\u548cHTTPS\u52a0\u5bc6\uff09\u6765\u9632\u6b62\u8c37\u6b4c\u57fa\u7840\u8bbe\u65bd\u5185\u90e8\u3001\u6570\u636e\u4e2d\u5fc3\u4e4b\u95f4\u4ee5\u53ca\u7528\u6237\u548c\u7f51\u7ad9\u4e4b\u95f4\u7684\u4f20\u8f93\u62e6\u622a\uff0c\u5305\u62ec\u4e16\u754c\u5404\u5730\u653f\u5e9c\u5f53\u5c40\u7684\u76d1\u89c6\u5c1d\u8bd5\u3002", "note_en": "The web has to work for users, advertisers, and publishers of all sizes \u2014 but users first. And with good reason: people are using the internet in larger numbers for more daily needs than ever. They don\u2019t want privacy as an afterthought; they want privacy by design.\n Understanding this is core to how we think about building  Google Analytics, a set of everyday tools that help organizations in the commercial, public, and nonprofit sectors understand how visitors use their sites and apps \u2014 but never by identifying individuals or tracking them across sites or apps.\n Because some of these organizations lately have faced questions about whether an analytics service can be compatible with user privacy and the rules for international transfers of personal data, we wanted to explain what Google Analytics does, and just as important, what it does not do.\n  Fact: Google Analytics is a service used by organizations to understand how their sites and apps are used, so that they can make them work better. It does not track people or profile people across the internet.\n Google Analytics cannot be used to track people across the web or apps. It does not create user profiles.\n Google Analytics helps owners of apps and websites understand how their users are engaging with their sites and apps (and only  their site or app). For example, it can help them understand which sections of an online newspaper have the most readers, or how often shopping carts are abandoned for an online store. This is what helps them improve the experience for their customers by better understanding what\u2019s working or not working.\n This kind of information also includes things like the type of device or browser used; how long, on average, visitors spend on their site or app; or roughly where in the world their visitors are coming from. These data points are never used to identify the visitor or anyone else in Google Analytics.\n Google Analytics customers are  prohibited from uploading information that could be used by Google to identify a person. We provide our customers with data deletion tools to help them promptly remove data from our servers if they inadvertently do so.\n  Organizations use Google Analytics because they choose to do so. They, not Google, control what data is collected and how it is used.\n They retain ownership of the data they collect using Google Analytics, and Google only stores and processes this data per their instructions \u2014 for example, to provide them with reports about how visitors use their sites and apps.\n These organizations can, separately, elect to share their Analytics data with Google for one of a few specific purposes, including technical support, benchmarking, and sales support.\n Organizations must take explicit action to allow Google to use their analytics data to improve or create new products and services. Such settings are entirely optional and require explicit opt-in.\n  Fact: Google Analytics helps customers with compliance by providing them with a range of controls and resources.\n When organizations use Google Analytics to collect data from their websites or apps, they  control that data. For example, they: Can enable  IP Anonymization (or IP masking) on their websites, meaning that full IP addresses are never processed or logged.\n  Can  select how long user-level and event-level data is stored by Analytics before it\u2019s scheduled for automatic deletion from the Analytics account and Google\u2019s servers.\n Can delete data from the Analytics servers by  submitting a request for its removal \u2014 including the ability to delete a single user\u2019s data from their Analytics account via the  User Deletion API, the  User Explorer report, or the  User Exploration technique.\n  Google makes products and features that are secure by default, private by design, and put users in control. That\u2019s why we have long offered a  browser add-on that enables users to disable measurement by Google Analytics on any site they visit.\n Along with providing strong default protections, we aim to give people accessible, intuitive and useful controls so they can make choices that are right for them. For example, visitors can choose if and how Analytics cookies are used by websites they visit, or block all cookies on all or some websites.\n In addition, organizations are required to give visitors proper notice about the implementations and features of Google Analytics that they use, and whether this data can be connected to other data they have about them.\n These customers are also required to obtain consent from users for each visit, as required by applicable laws in their country.\n  Fact: Google Analytics cannot be used to show advertisements to people based on sensitive information like health, ethnicity, sexual orientation, etc.\n Google Analytics does not serve ads at all. It is a web and app analytics tool. (You can read all about it  here.)\n Some organizations do use insights they\u2019ve garnered via Google Analytics about their own sites and apps to inform their own advertising campaigns.\n If a business also uses Google\u2019s advertising platforms, it\u2019s strictly required to follow Google\u2019s advertising guidelines preventing the use of sensitive information to personalize ads \u2014 like health, race, religion, or sexual orientation. We never allow sensitive information to be used for personalized advertising. It\u2019s simply off limits.\n  Fact: An organization\u2019s Google Analytics data can only be transferred when specific and rigorous privacy conditions are met.\n Google Analytics operates data centers globally, including in the United States, to maximize service speed and reliability. Before data is transferred to any servers in the United States, it is collected in local servers, where users\u2019 IP addresses are anonymized (when the feature is enabled by customers).\n The GDPR and European Court of Justice say that data can be transferred outside of the European Union for just this sort of reason, provided  conditions are met.\n In order to meet those conditions, we apply numerous measures, including: Using data transfer agreements like EU Standard Contractual Clauses, which have been affirmed as a valid mechanism for transferring data to the United States, together with additional safeguards that keep data secure: industry-leading  data encryption,  physical security in our data centers and robust  policies for handling government requests for user information.\n Maintaining widely recognized, internationally accepted independent security standards like  ISO 27001, which provides independent accreditation of our systems, applications, people, technology, processes and data centers.\n Offering website owners a  wide range of controls that they can use to keep their website visitors\u2019 data safe and secure.\n Our infrastructure and encryption is designed to protect data, and safeguard it from any government access.\n And we use robust technical measures (such as  Application Layer Transport Security and HTTPS encryption) to protect against interception in transit within Google\u2019s infrastructure, between data centers, and between users and websites, including surveillance attempts by government authorities around the world.", "posttime": "2022-02-13 18:39:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u5206\u6790,\u6570\u636e", "title": "\u5173\u4e8e\u8c37\u6b4c\u5206\u6790\u6570\u636e\u9690\u79c1\u7684\u4e00\u4e9b\u4e8b\u5b9e", "title_en": "Some facts about Google Analytics data privacy", "transed": 1, "url": "https://blog.google/around-the-globe/google-europe/google-analytics-facts/", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u5206\u6790", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072928, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u4e8e2014\u5e745\u670826\u65e5\uff0c\u66f4\u65b0\u4e8e2014\u5e748\u6708\u30012016\u5e742\u6708\u30012016\u5e746\u6708\u30012020\u5e746\u6708\u3002\u5728\u6e38\u620f\u4e2d\uff0c\u6211\u4eec\u7ecf\u5e38\u60f3\u627e\u5230\u4ece\u4e00\u4e2a\u5730\u70b9\u5230\u53e6\u4e00\u4e2a\u5730\u70b9\u7684\u8def\u5f84\u3002\u6211\u4eec\u4e0d\u4ec5\u5728\u52aa\u529b\u5bfb\u627e\u6700\u77ed\u7684\u8ddd\u79bb\uff1b\u6211\u4eec\u8fd8\u8981\u8003\u8651\u65c5\u884c\u65f6\u95f4\u3002\u79fb\u52a8blob\uff08\u8d77\u70b9\uff09\u548ccross\uff08\u7ec8\u70b9\uff09\u4ee5\u67e5\u770b\u6700\u77ed\u8def\u5f84\u3002\n\u4e3a\u4e86\u627e\u5230\u8fd9\u6761\u8def\u5f84\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u56fe\u641c\u7d22\u7b97\u6cd5\uff0c\u5f53\u5730\u56fe\u88ab\u8868\u793a\u4e3a\u4e00\u4e2a\u56fe\u65f6\uff0c\u8be5\u7b97\u6cd5\u5c31\u4f1a\u8d77\u4f5c\u7528\u3002A*\u662f\u56fe\u5f62\u641c\u7d22\u7684\u5e38\u7528\u9009\u62e9\u3002\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u662f\u6700\u7b80\u5355\u7684\u56fe\u641c\u7d22\u7b97\u6cd5\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u4ece\u8fd9\u91cc\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u9010\u6b65\u53d1\u5c55\u5230A*\u3002\n\u5b66\u4e60\u7b97\u6cd5\u65f6\u8981\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\u7406\u89e3\u6570\u636e\u3002\u8f93\u5165\u662f\u4ec0\u4e48\uff1f\u8f93\u51fa\u662f\u4ec0\u4e48\uff1f\n\u8f93\u5165\uff1a\u56fe\u5f62\u641c\u7d22\u7b97\u6cd5\uff0c\u5305\u62ecA*\uff0c\u4ee5\u201c\u56fe\u5f62\u201d\u4f5c\u4e3a\u8f93\u5165\u3002\u56fe\u662f\u4e00\u7ec4\u4f4d\u7f6e\uff08\u201c\u8282\u70b9\u201d\uff09\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u8fde\u63a5\uff08\u201c\u8fb9\u201d\uff09\u3002\u8fd9\u662f\u6211\u7ed9A*\u7684\u56fe\u8868\uff1a\nA*\u770b\u4e0d\u5230\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\u3002\u5b83\u53ea\u770b\u5230\u56fe\u8868\u3002\u5b83\u4e0d\u77e5\u9053\u67d0\u7269\u662f\u5ba4\u5185\u8fd8\u662f\u5ba4\u5916\uff0c\u6216\u8005\u662f\u623f\u95f4\u8fd8\u662f\u95e8\u53e3\uff0c\u6216\u8005\u4e00\u4e2a\u533a\u57df\u6709\u591a\u5927\u3002\u5b83\u53ea\u770b\u5230\u56fe\u8868\uff01\u5b83\u4e0d\u77e5\u9053\u8fd9\u5f20\u5730\u56fe\u548c\u5176\u4ed6\u5730\u56fe\u7684\u533a\u522b\u3002\n\u8f93\u51fa\uff1aA*\u627e\u5230\u7684\u8def\u5f84\u4e3a\u3002\u8fb9\u662f\u62bd\u8c61\u7684\u6570\u5b66\u6982\u5ff5\u3002A*\u4f1a\u544a\u8bc9\u4f60\u4ece\u4e00\u4e2a\u5730\u65b9\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u5730\u65b9\uff0c\u4f46\u4e0d\u4f1a\u544a\u8bc9\u4f60\u5982\u4f55\u79fb\u52a8\u3002\u8bb0\u4f4f\uff0c\u5b83\u5bf9\u623f\u95f4\u6216\u95e8\u4e00\u65e0\u6240\u77e5\uff1b\u5b83\u770b\u5230\u7684\u53ea\u662f\u56fe\u8868\u3002\u60a8\u5fc5\u987b\u786e\u5b9a\u7531*\u8fd4\u56de\u7684\u56fe\u5f62\u8fb9\u662f\u5426\u610f\u5473\u7740\u4ece\u4e00\u4e2a\u56fe\u5757\u79fb\u52a8\u5230\u53e6\u4e00\u4e2a\u56fe\u5757\uff0c\u6216\u662f\u76f4\u7ebf\u884c\u8d70\uff0c\u6216\u662f\u5f00\u95e8\uff0c\u6216\u662f\u6e38\u6cf3\uff0c\u6216\u662f\u6cbf\u7740\u5f2f\u66f2\u7684\u8def\u5f84\u8dd1\u6b65\u3002\n\u6743\u8861\uff1a\u5bf9\u4e8e\u4efb\u4f55\u7ed9\u5b9a\u7684\u6e38\u620f\u5730\u56fe\uff0c\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u5236\u4f5c\u4e00\u4e2a\u8def\u5f84\u67e5\u627e\u56fe\uff0c\u4ee5\u63d0\u4f9b\u7ed9*\u3002\u4e0a\u9762\u7684\u5730\u56fe\u5c06\u5927\u591a\u6570\u95e8\u53e3\u53d8\u6210\u4e86\u8282\u70b9\uff1b\u5982\u679c\u6211\u4eec\u6210\u529f\u4e86\u5462\uff1f\u5982\u679c\u6211\u4eec\u4f7f\u7528\uff1f\n\u5bfb\u8def\u56fe\u4e0d\u5fc5\u4e0e\u6e38\u620f\u5730\u56fe\u4f7f\u7528\u7684\u76f8\u540c\u3002\u7f51\u683c\u6e38\u620f\u5730\u56fe\u53ef\u4ee5\u4f7f\u7528\u975e\u7f51\u683c\u5bfb\u8def\u56fe\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002A*\u8fd0\u884c\u6700\u5feb\uff0c\u56fe\u5f62\u8282\u70b9\u6700\u5c11\uff1b\u7f51\u683c\u901a\u5e38\u66f4\u5bb9\u6613\u4f7f\u7528\uff0c\u4f46\u4f1a\u4ea7\u751f\u5927\u91cf\u8282\u70b9\u3002\u672c\u9875\u4ecb\u7ecdA*\u7b97\u6cd5\uff0c\u4f46\u4e0d\u5305\u62ec\u56fe\u5f62\u8bbe\u8ba1\uff1b\u6709\u5173\u56fe\u8868\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1\u6211\u7684\u53e6\u4e00\u9875[1]\u3002\u5bf9\u4e8e\u672c\u9875\u5176\u4f59\u90e8\u5206\u7684\u89e3\u91ca\uff0c\u6211\u5c06\u4f7f\u7528\u7f51\u683c\uff0c\u56e0\u4e3a\u66f4\u5bb9\u6613\u5c06\u6982\u5ff5\u53ef\u89c6\u5316\u3002\n\u6709\u5f88\u591a\u7b97\u6cd5\u5728\u56fe\u5f62\u4e0a\u8fd0\u884c\u3002\u6211\u5c06\u4ecb\u7ecd\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5728\u6240\u6709\u65b9\u5411\u4e0a\u90fd\u8fdb\u884c\u4e86\u540c\u7b49\u7684\u63a2\u7d22\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u7b97\u6cd5\uff0c\u4e0d\u4ec5\u9002\u7528\u4e8e\u5e38\u89c4\u8def\u5f84\u67e5\u627e\uff0c\u8fd8\u9002\u7528\u4e8e\u7a0b\u5e8f\u5730\u56fe\u751f\u6210\u3001\u6d41\u573a\u8def\u5f84\u67e5\u627e\u3001\u8ddd\u79bb\u5730\u56fe\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u5730\u56fe\u5206\u6790\u3002\nDijkstra\u7684\u7b97\u6cd5\uff08\u4e5f\u79f0\u4e3a\u7edf\u4e00\u6210\u672c\u641c\u7d22\uff09\u8ba9\u6211\u4eec\u53ef\u4ee5\u4f18\u5148\u9009\u62e9\u8981\u63a2\u7d22\u7684\u8def\u5f84\u3002\u4e0e\u5176\u5e73\u7b49\u5730\u63a2\u7d22\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\uff0c\u5b83\u66f4\u503e\u5411\u4e8e\u4f4e\u6210\u672c\u7684\u8def\u5f84\u3002\u6211\u4eec\u53ef\u4ee5\u5206\u914d\u66f4\u4f4e\u7684\u6210\u672c\u6765\u9f13\u52b1\u5728\u9053\u8def\u4e0a\u79fb\u52a8\uff0c\u66f4\u9ad8\u7684\u6210\u672c\u6765\u907f\u514d\u68ee\u6797\uff0c\u66f4\u9ad8\u7684\u6210\u672c\u6765\u963b\u6b62\u63a5\u8fd1\u654c\u4eba\uff0c\u7b49\u7b49\u3002\u5f53\u79fb\u52a8\u6210\u672c\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\nA*\u662f\u5bf9Dijkstra\u7b97\u6cd5\u7684\u4fee\u6539\uff0c\u8be5\u7b97\u6cd5\u9488\u5bf9\u5355\u4e2a\u76ee\u7684\u5730\u8fdb\u884c\u4e86\u4f18\u5316\u3002Dijkstra\u7b97\u6cd5\u53ef\u4ee5\u627e\u5230\u6240\u6709\u4f4d\u7f6e\u7684\u8def\u5f84\uff1bA*\u67e5\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\u6216\u51e0\u4e2a\u4f4d\u7f6e\u4e2d\u6700\u8fd1\u4f4d\u7f6e\u7684\u8def\u5f84\u3002\u5b83\u4f18\u5148\u8003\u8651\u90a3\u4e9b\u4f3c\u4e4e\u66f4\u63a5\u8fd1\u76ee\u6807\u7684\u8def\u5f84\u3002\n\u6211\u5c06\u4ece\u6700\u7b80\u5355\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u5f00\u59cb\uff0c\u4e00\u6b21\u6dfb\u52a0\u4e00\u4e2a\u529f\u80fd\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a*\u3002\n\u6240\u6709\u8fd9\u4e9b\u7b97\u6cd5\u7684\u5173\u952e\u601d\u60f3\u662f\uff0c\u6211\u4eec\u8ddf\u8e2a\u4e00\u4e2a\u79f0\u4e3a\u201c\u524d\u6cbf\u201d\u7684\u4e0d\u65ad\u6269\u5927\u7684\u73af\u3002\u5728\u7f51\u683c\u4e0a\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u6d2a\u6c34\u586b\u5145\u201d\uff0c\u4f46\u540c\u6837\u7684\u6280\u672f\u4e5f\u9002\u7528\u4e8e\u975e\u7f51\u683c\u3002\u542f\u52a8\u52a8\u753b\u4ee5\u67e5\u770b\u8fb9\u754c\u662f\u5982\u4f55\u6269\u5c55\u7684\u2192 \u00a0\u2192\n\u901a\u8fc7\u89c2\u5bdf\u5b83\u7684\u90bb\u5c45\u6765\u6269\u5c55\u5b83\u3002\u8df3\u8fc7\u5899\u58c1\u3002\u4efb\u4f55\u672a\u5230\u8fbe\u7684\u90bb\u5c45\uff0c\u6211\u4eec\u90fd\u4f1a\u6dfb\u52a0\u5230\u8fb9\u754c\u548c\u5230\u8fbe\u7684\u96c6\u5408\u4e2d\u2192 \u00a0 \u00a0.\n\u8ba9\u6211\u4eec\u8fd1\u8ddd\u79bb\u770b\u770b\u3002\u74f7\u7816\u6309\u6211\u4eec\u53c2\u89c2\u7684\u987a\u5e8f\u7f16\u53f7\u3002\u9010\u6b65\u67e5\u770b\u6269\u5c55\u8fc7\u7a0b\uff1a\n\u8fb9\u7586\u3002put\uff08start\uff09reach=set\uff08\uff09reach\u3002\u6dfb\u52a0\uff08\u5f00\u59cb\uff09\u800c\u4e0d\u662f\u8fb9\u754c\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u8868\u793a\u56fe\u5f62\u4e2d\u7684\u4e0b\u4e00\u4e2a\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u5982\u679c\u672a\u5230\u8fbe\u4e0b\u4e00\u4e2a\uff1a\u8fb9\u754c\u3002\u653e\uff08\u4e0b\u4e00\u4e2a\uff09\u5230\u3002\u6dfb\u52a0\uff08\u4e0b\u4e00\u6b65\uff09\n\u8fd9\u4e2a\u5faa\u73af\u662f\u672c\u9875\u4e0a\u56fe\u5f62\u641c\u7d22\u7b97\u6cd5\u7684\u7cbe\u9ad3\uff0c\u5305\u62ec*\u3002\u4f46\u662f\u6211\u4eec\u5982\u4f55\u627e\u5230\u6700\u77ed\u7684\u8def\u5f84\u5462\uff1f\u5faa\u73af\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6784\u6210\u8def\u5f84\uff1b\u5b83\u53ea\u544a\u8bc9\u6211\u4eec\u5982\u4f55\u53c2\u89c2\u5730\u56fe\u4e0a\u7684\u4e00\u5207\u3002\u8fd9\u662f\u56e0\u4e3a\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u7528\u9014\u8fdc\u8fdc\u4e0d\u6b62\u4e8e\u5bfb\u627e\u8def\u5f84\uff1b\u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u5c55\u793a\u5982\u4f55\u5c06\u5176\u7528\u4e8e\u5854\u9632\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u7528\u4e8e\u8ddd\u79bb\u8d34\u56fe\u3001\u7a0b\u5e8f\u8d34\u56fe\u751f\u6210\uff0c\u4ee5\u53ca\u5176\u4ed6\u8bb8\u591a\u4e8b\u60c5\u3002\u5728\u8fd9\u91cc\uff0c\u867d\u7136\u6211\u4eec\u5e0c\u671b\u4f7f\u7528\u5b83\u6765\u67e5\u627e\u8def\u5f84\uff0c\u4f46\u8ba9\u6211\u4eec\u4fee\u6539\u5faa\u73af\uff0c\u4ee5\u8ddf\u8e2a\u6bcf\u4e2a\u5230\u8fbe\u7684\u4f4d\u7f6e\u7684\u6765\u6e90\uff0c\u5e76\u5c06\u5230\u8fbe\u96c6\u91cd\u547d\u540d\u4e3acome_from table\uff08\u8868\u7684\u952e\u662f\u5230\u8fbe\u96c6\uff09\uff1a\n\u8fb9\u7586\u3002put\uff08\u5f00\u59cb\uff09comed_from=dict\uff08\uff09comed_from[start]=none\u800c\u975efront\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u8868\u793a\u56fe\u5f62\u4e2d\u7684\u4e0b\u4e00\u4e2a\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u5728\uff0c\u6765\u81ea\u8fb9\u5883\u3002put\uff08next\uff09come_from\uff08next\uff09=\u5f53\u524d\n\u73b0\u5728\u4ece\u6bcf\u4e2a\u5730\u70b9\u5230\u6211\u4eec\u6765\u7684\u5730\u65b9\u3002\u8fd9\u4e9b\u5c31\u50cf\u201c\u9762\u5305\u5c51\u201d\u3002\u5b83\u4eec\u8db3\u4ee5\u91cd\u5efa\u6574\u6761\u8def\u3002\u79fb\u52a8\u5341\u5b57\u67b6\uff0c\u67e5\u770b\u8ddf\u968f\u7bad\u5934\u5982\u4f55\u4e3a\u60a8\u63d0\u4f9b\u8fd4\u56de\u8d77\u59cb\u4f4d\u7f6e\u7684\u53cd\u5411\u8def\u5f84\u3002\n\u91cd\u5efa\u8def\u5f84\u7684\u4ee3\u7801\u5f88\u7b80\u5355\uff1a\u4ece\u76ee\u6807\u5230\u5f00\u59cb\uff0c\u6cbf\u7740\u7bad\u5934\u5411\u540e\u8d70\u3002\u8def\u5f84\u662f\u4e00\u7cfb\u5217\u8fb9\uff0c\u4f46\u901a\u5e38\u66f4\u5bb9\u6613\u5b58\u50a8\u8282\u70b9\uff1a\n\u5f53\u524d=\u76ee\u6807\u8def\u5f84=[]\u5f53\u524d\uff01=\u5f00\u59cb\uff1a\u8def\u5f84\u3002append\uff08current\uff09current=\u6765\u81ea[current]\u8def\u5f84\u3002\u9644\u52a0\uff08\u5f00\u59cb\uff09#\u53ef\u9009\u8def\u5f84\u3002\u53cd\u8f6c\uff08\uff09#\u53ef\u9009\n\u8fd9\u662f\u6700\u7b80\u5355\u7684\u5bfb\u8def\u7b97\u6cd5\u3002\u5b83\u4e0d\u4ec5\u9002\u7528\u4e8e\u5982\u56fe\u6240\u793a\u7684\u7f51\u683c\uff0c\u800c\u4e14\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684\u56fe\u5f62\u7ed3\u6784\u3002\u5728\u5730\u7262\u4e2d\uff0c\u56fe\u5f62\u4f4d\u7f6e\u53ef\u4ee5\u662f\u623f\u95f4\uff0c\u4e5f\u53ef\u4ee5\u662f\u623f\u95f4\u4e4b\u95f4\u7684\u95e8\u53e3\u3002\u5728platformer\u4e2d\uff0c\u56fe\u5f62\u4f4d\u7f6e\u53ef\u4ee5\u662f\u4f4d\u7f6e\u548c\u56fe\u5f62\u8fb9\u7f18\uff0c\u5305\u62ec\u53ef\u80fd\u7684\u52a8\u4f5c\uff0c\u5982\u5411\u5de6\u79fb\u52a8\u3001\u5411\u53f3\u79fb\u52a8\u3001\u5411\u4e0a\u8df3\u3001\u5411\u4e0b\u8df3\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u5c06\u56fe\u5f62\u89c6\u4e3a\u6539\u53d8\u72b6\u6001\u7684\u72b6\u6001\u548c\u52a8\u4f5c\u3002\u6211\u5728\u8fd9\u91cc\u5199\u4e86\u66f4\u591a\u5173\u4e8e\u5730\u56fe\u8868\u793a\u7684\u6587\u7ae0[2]\u3002\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u5c06\u7ee7\u7eed\u4f7f\u7528\u7f51\u683c\u793a\u4f8b\uff0c\u5e76\u63a2\u7d22\u4e3a\u4ec0\u4e48\u53ef\u80fd\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u7684\u53d8\u4f53\u3002\n\u6211\u4eec\u627e\u5230\u4e86\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u5230\u6240\u6709\u5176\u4ed6\u4f4d\u7f6e\u7684\u8def\u5f84\u3002\u901a\u5e38\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u6240\u6709\u7684\u8def\u5f84\uff1b\u6211\u4eec\u53ea\u9700\u8981\u4e00\u6761\u4ece\u4e00\u4e2a\u4f4d\u7f6e\u5230\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8def\u5f84\u3002\u4e00\u65e6\u627e\u5230\u76ee\u6807\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505c\u6b62\u6269\u5f20\u8fb9\u5883\u3002\u62d6\u52a8\u9f20\u6807\uff0c\u67e5\u770b\u8fb9\u7586\u5728\u5230\u8fbe\u76ee\u6807\u540e\u5982\u4f55\u505c\u6b62\u6269\u5f20\u3002\n\u8fb9\u7586\u3002put\uff08\u5f00\u59cb\uff09comed_from=dict\uff08\uff09comed_from[start]=none\u800c\u975efront\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u5982\u679c\u5f53\u524d==\u76ee\u6807\uff1a\u5728\u56fe\u4e2d\u4e3a\u4e0b\u4e00\u4e2a\u4e2d\u65ad\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u5728\uff0c\u6765\u81ea\u8fb9\u5883\u3002put\uff08next\uff09come_from\uff08next\uff09=\u5f53\u524d\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u5df2\u7ecf\u91c7\u53d6\u4e86\u540c\u6837\u7684\u201c\u6210\u672c\u201d\u63aa\u65bd\u3002\u5728\u67d0\u4e9b\u5bfb\u8def\u573a\u666f\u4e2d\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u79fb\u52a8\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u6210\u672c\u3002\u4f8b\u5982\uff0c\u5728\u6587\u660e\u4e2d\uff0c\u7a7f\u8d8a\u5e73\u539f\u6216\u6c99\u6f20\u53ef\u80fd\u9700\u89811\u4e2a\u79fb\u52a8\u70b9\uff0c\u4f46\u7a7f\u8d8a\u68ee\u6797\u6216\u4e18\u9675\u53ef\u80fd\u9700\u89815\u4e2a\u79fb\u52a8\u70b9\u3002\u5728\u9875\u9762\u9876\u90e8\u7684\u5730\u56fe\u4e0a\uff0c\u5728\u6c34\u4e2d\u884c\u8d70\u7684\u8d39\u7528\u662f\u5728\u8349\u5730\u4e0a\u884c\u8d70\u768410\u500d\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f\u7f51\u683c\u4e0a\u7684\u5bf9\u89d2\u7ebf\u79fb\u52a8\uff0c\u5176\u6210\u672c\u9ad8\u4e8e\u8f74\u5411\u79fb\u52a8\u3002\u6211\u4eec\u5e0c\u671b\u63a2\u8def\u8005\u8003\u8651\u5230\u8fd9\u4e9b\u6210\u672c\u3002\u8ba9\u6211\u4eec\u6bd4\u8f83\u4e00\u4e0b\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u6b65\u6570\u548c\u8ddd\u79bb\uff1a\n\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981Dijkstra\u7b97\u6cd5\uff08\u6216\u7edf\u4e00\u6210\u672c\u641c\u7d22\uff09\u3002\u5b83\u4e0e\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6709\u4f55\u4e0d\u540c\uff1f\u6211\u4eec\u9700\u8981\u8ddf\u8e2a\u79fb\u52a8\u6210\u672c\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u65b0\u53d8\u91cfcost_so_far\uff0c\u4ee5\u8ddf\u8e2a\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\u7684\u603b\u79fb\u52a8\u6210\u672c\u3002\u5728\u51b3\u5b9a\u5982\u4f55\u8bc4\u4f30\u5730\u70b9\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u79fb\u52a8\u6210\u672c\u8003\u8651\u5728\u5185\uff1b\u8ba9\u6211\u4eec\u628a\u961f\u5217\u53d8\u6210\u4f18\u5148\u961f\u5217\u3002\u4e0d\u592a\u660e\u663e\u7684\u662f\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u591a\u6b21\u8bbf\u95ee\u4e00\u4e2a\u5730\u70b9\uff0c\u82b1\u8d39\u4e0d\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7a0d\u5fae\u6539\u53d8\u4e00\u4e0b\u903b\u8f91\u3002\u5982\u679c\u4ece\u672a\u5230\u8fbe\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u6211\u4eec\u4e0d\u4f1a\u5411\u8fb9\u754c\u6dfb\u52a0\u4f4d\u7f6e\uff0c\u800c\u662f\u5728\u8be5\u4f4d\u7f6e\u7684\u65b0\u8def\u5f84\u4f18\u4e8e\u4e4b\u524d\u7684\u6700\u4f73\u8def\u5f84\u65f6\u6dfb\u52a0\u8be5\u4f4d\u7f6e\u3002\n\u8fb9\u7586=\u4f18\u5148\u961f\u5217\uff08\uff09\u8fb9\u7586\u3002put\uff08start\uff0c0\uff09come_from=dict\uff08\uff09cost_so_far=dict\uff08\uff09come_from[start]=Nonecost_so_far[start]=0\u800c\u4e0d\u662ffrontier\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u5982\u679c\u5f53\u524d==\u76ee\u6807\uff1a\u5728\u56fe\u4e2d\u4e3a\u4e0b\u4e00\u4e2a\u4e2d\u65ad\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u65b0\u6210\u672c=\u6210\u672c\u8fc4\u4eca\u4e3a\u6b62[\u5f53\u524d]+\u56fe\u8868\u3002\u6210\u672c\uff08\u5f53\u524d\u3001\u4e0b\u4e00\u4e2a\uff09\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u5728\u6210\u672c\u4e2d\uff0c\u5219\u5f53\u524d\u6216\u65b0\u6210\u672c&lt\uff1b\u6210\u672c\u8fc4\u4eca[\u4e0b\u4e00\u6b65]\uff1a\u6210\u672c\u8fc4\u4eca[\u4e0b\u4e00\u6b65]=\u65b0\u6210\u672c\u4f18\u5148\u7ea7=\u65b0\u6210\u672c\u524d\u6cbf\u3002put\uff08next\uff0cpriority\uff09\u6765\u81ea[next]=\u5f53\u524d\n\u4f7f\u7528\u4f18\u5148\u7ea7\u961f\u5217\u800c\u4e0d\u662f\u5e38\u89c4\u961f\u5217\u4f1a\u6539\u53d8\u8fb9\u754c\u6269\u5c55\u7684\u65b9\u5f0f\u3002\u8f6e\u5ed3\u7ebf\u662f\u89c2\u5bdf\u8fd9\u4e00\u70b9\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u542f\u52a8\u52a8\u753b\uff0c\u67e5\u770b\u8fb9\u754c\u5982\u4f55\u5728\u68ee\u6797\u4e2d\u7f13\u6162\u6269\u5c55\uff0c\u627e\u5230\u56f4\u7ed5\u4e2d\u5fc3\u68ee\u6797\u7684\u6700\u77ed\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u7a7f\u8fc7\u68ee\u6797\uff1a\n\u96641\u4ee5\u5916\u7684\u79fb\u52a8\u6210\u672c\u4f7f\u6211\u4eec\u80fd\u591f\u63a2\u7d22\u66f4\u6709\u8da3\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7f51\u683c\u3002\u5728\u9875\u9762\u9876\u90e8\u7684\u5730\u56fe\u4e2d\uff0c\u79fb\u52a8\u6210\u672c\u57fa\u4e8e\u623f\u95f4\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u79fb\u52a8\u6210\u672c\u4e5f\u53ef\u4ee5\u7528\u4e8e\u907f\u5f00\u6216\u9009\u62e9\u57fa\u4e8e\u63a5\u8fd1\u654c\u4eba\u6216\u76df\u53cb\u7684\u533a\u57df\u3002\n\u5b9e\u73b0\u8bf4\u660e\uff1a\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u9996\u5148\u8fd4\u56de\u6700\u4f4e\u503c\u3002\u5728\u5b9e\u73b0\u9875\u9762\u4e0a\uff0c\u6211\u7528Python\u663e\u793aPrimeRealQuey\uff0c\u4f7f\u7528HeAPQ\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\uff0c\u5728C++\u4e2d\u4f7f\u7528STD\uff1a\uff1aPrimRythyQueQue2\u88ab\u914d\u7f6e\u4e3a\u9996\u5148\u8fd4\u56de\u6700\u4f4e\u503c\u3002\u6b64\u5916\uff0cDijkstra\u7b97\u6cd5\u7684\u7248\u672c\u548c\u6211\u5728\u8fd9\u4e00\u9875\u4e0a\u5c55\u793a\u7684A*\u4e0e\u7b97\u6cd5\u6559\u79d1\u4e66\u4e2d\u7684\u4e0d\u540c\u3002\u5b83\u66f4\u63a5\u8fd1\u4e8e\u6240\u8c13\u7684\u7edf\u4e00\u6210\u672c\u641c\u7d22\u3002\u6211\u5728\u5b9e\u73b0\u9875\u9762\u4e0a\u63cf\u8ff0\u4e86\u8fd9\u4e9b\u5dee\u5f02\u3002\n\u901a\u8fc7\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u548cDijkstra\u7b97\u6cd5\uff0c\u524d\u6cbf\u5411\u5404\u4e2a\u65b9\u5411\u6269\u5c55\u3002\u5982\u679c\u4f60\u60f3\u627e\u5230\u4e00\u6761\u901a\u5f80\u6240\u6709\u5730\u70b9\u6216\u591a\u4e2a\u5730\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9009\u62e9\u3002\u7136\u800c\uff0c\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u53ea\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8def\u5f84\u3002\u8ba9\u6211\u4eec\u8ba9\u524d\u6cbf\u671d\u7740\u76ee\u6807\u6269\u5c55\uff0c\u800c\u4e0d\u662f\u5411\u5176\u4ed6\u65b9\u5411\u6269\u5c55\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u5b9a\u4e49\u4e00\u4e2a\u542f\u53d1\u5f0f\u51fd\u6570\uff0c\u544a\u8bc9\u6211\u4eec\u79bb\u76ee\u6807\u6709\u591a\u8fd1\uff1a\ndef\u542f\u53d1\u5f0f\uff08a\uff0cb\uff09\uff1a#\u6b63\u65b9\u5f62\u7f51\u683c\u4e0a\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u8fd4\u56deabs\uff08a.x-b.x\uff09+abs\uff08a.y-b.y\uff09\n\u5728Dijkstra\u7b97\u6cd5\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4ece\u8d77\u70b9\u5230\u4f18\u5148\u7ea7\u961f\u5217\u6392\u5e8f\u7684\u5b9e\u9645\u8ddd\u79bb\u3002\u76f8\u53cd\uff0c\u5728\u8d2a\u5a6a\u7684\u6700\u4f73\u4f18\u5148\u641c\u7d22\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u5230\u4f18\u5148\u7ea7\u961f\u5217\u6392\u5e8f\u76ee\u6807\u7684\u4f30\u8ba1\u8ddd\u79bb\u3002\u9996\u5148\u63a2\u7d22\u8ddd\u79bb\u76ee\u6807\u6700\u8fd1\u7684\u4f4d\u7f6e\u3002\u4ee3\u7801\u4f7f\u7528Dijkstra\u7b97\u6cd5\u4e2d\u7684\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u4f46\u8fc4\u4eca\u4e3a\u6b62\u6ca1\u6709\u6210\u672c\uff1a\n\u8fb9\u7586=\u4f18\u5148\u961f\u5217\uff08\uff09\u8fb9\u7586\u3002put\uff08start\uff0c0\uff09come_from=dict\uff08\uff09come_from[start]=none\u800c\u975efrontier\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u5982\u679c\u5f53\u524d==\u76ee\u6807\uff1a\u5728\u56fe\u4e2d\u4e3a\u4e0b\u4e00\u4e2a\u4e2d\u65ad\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u5728\uff0c\u6765\u81ea\uff1a\u4f18\u5148\u7ea7=\u542f\u53d1\u5f0f\uff08\u76ee\u6807\uff0c\u4e0b\u4e00\u4e2a\uff09\u8fb9\u754c\u3002put\uff08next\uff0cpriority\uff09\u6765\u81ea[next]=\u5f53\u524d\n\u8fd9\u4e9b\u8def\u5f84\u4e0d\u662f\u6700\u77ed\u7684\u3002\u56e0\u6b64\uff0c\u5f53\u6ca1\u6709\u592a\u591a\u969c\u788d\u7269\u65f6\uff0c\u8be5\u7b97\u6cd5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u4f46\u8def\u5f84\u6ca1\u6709\u90a3\u4e48\u597d\u3002\u6211\u4eec\u80fd\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\u5bf9\nDijkstra\u7684\u7b97\u6cd5\u53ef\u4ee5\u5f88\u597d\u5730\u627e\u5230\u6700\u77ed\u8def\u5f84\uff0c\u4f46\u5b83\u4f1a\u6d6a\u8d39\u65f6\u95f4\u53bb\u63a2\u7d22\u90a3\u4e9b\u6ca1\u6709\u524d\u9014\u7684\u65b9\u5411\u3002\u8d2a\u5a6a\u7684\u201c\u6700\u4f73\u4f18\u5148\u641c\u7d22\u201d\uff08Best First Search\uff09\u671d\u7740\u6709\u5e0c\u671b\u7684\u65b9\u5411\u63a2\u7d22\uff0c\u4f46\u5b83\u53ef\u80fd\u627e\u4e0d\u5230\u6700\u77ed\u7684\u8def\u5f84\u3002A*\u7b97\u6cd5\u4f7f\u7528\u4ece\u8d77\u70b9\u5230\u76ee\u6807\u7684\u5b9e\u9645\u8ddd\u79bb\u548c\u4f30\u8ba1\u8ddd\u79bb\u3002\n\u8fb9\u7586=\u4f18\u5148\u961f\u5217\uff08\uff09\u8fb9\u7586\u3002put\uff08start\uff0c0\uff09come_from=dict\uff08\uff09cost_so_far=dict\uff08\uff09come_from[start]=Nonecost_so_far[start]=0\u800c\u4e0d\u662ffrontier\u3002\u7a7a\uff08\uff09\uff1a\u5f53\u524d=\u524d\u6cbf\u3002get\uff08\uff09\u5982\u679c\u5f53\u524d==\u76ee\u6807\uff1a\u5728\u56fe\u4e2d\u4e3a\u4e0b\u4e00\u4e2a\u4e2d\u65ad\u3002\u90bb\u5c45\uff08\u5f53\u524d\uff09\uff1a\u65b0\u6210\u672c=\u6210\u672c\u8fc4\u4eca\u4e3a\u6b62[\u5f53\u524d]+\u56fe\u8868\u3002\u6210\u672c\uff08\u5f53\u524d\u3001\u4e0b\u4e00\u4e2a\uff09\u5982\u679c\u4e0b\u4e00\u4e2a\u4e0d\u5728\u6210\u672c\u4e2d\uff0c\u5219\u5f53\u524d\u6216\u65b0\u6210\u672c&lt\uff1bcost_so_far[\u4e0b\u4e00\u6b65]\uff1acost_so_far[\u4e0b\u4e00\u6b65]=\u65b0\u6210\u672c\u4f18\u5148\u7ea7=\u65b0\u6210\u672c+\u542f\u53d1\u5f0f\uff08\u76ee\u6807\uff0c\u4e0b\u4e00\u6b65\uff09\u524d\u6cbf\u3002put\uff08next\uff0cpriority\uff09\u6765\u81ea[next]=\u5f53\u524d\n\u6bd4\u8f83\u7b97\u6cd5\uff1aDijkstra\u7684\u7b97\u6cd5\u8ba1\u7b97\u4ece\u8d77\u70b9\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u3002\u8d2a\u5a6a\u7684\u6700\u4f73\u4f18\u5148\u641c\u7d22\u4f30\u8ba1\u5230\u76ee\u6807\u70b9\u7684\u8ddd\u79bb\u3002A*\u662f\u8fd9\u4e24\u4e2a\u8ddd\u79bb\u7684\u603b\u548c\u3002\n\u8bd5\u7740\u5728\u5899\u4e0a\u4e0d\u540c\u7684\u5730\u65b9\u5f00\u4e2a\u6d1e\u3002\u4f60\u4f1a\u53d1\u73b0\uff0c\u5f53\u8d2a\u5a6a\u7684Best First Search\u627e\u5230\u6b63\u786e\u7b54\u6848\u65f6\uff0cA*\u4e5f\u4f1a\u627e\u5230\u5b83\uff0c\u63a2\u7d22\u540c\u4e00\u4e2a\u533a\u57df\u3002\u5f53\u8d2a\u5a6a\u7684Best First\u641c\u7d22\u627e\u5230\u9519\u8bef\u7684\u7b54\u6848\uff08\u8def\u5f84\u66f4\u957f\uff09\u65f6\uff0cA*\u4f1a\u50cfDijkstra\u7684\u7b97\u6cd5\u4e00\u6837\u627e\u5230\u6b63\u786e\u7684\u7b54\u6848\uff0c\u4f46\u4ecd\u7136\u6bd4Dijkstra\u7684\u7b97\u6cd5\u63a2\u7d22\u5f97\u66f4\u5c11\u3002\nA*\u662f\u4e24\u4e2a\u4e16\u754c\u4e2d\u6700\u597d\u7684\u3002\u53ea\u8981\u542f\u53d1\u5f0f\u7b97\u6cd5\u4e0d\u4f1a\u9ad8\u4f30\u8ddd\u79bb\uff0cA*\u5c31\u4f1a\u50cfDijkstra\u7b97\u6cd5\u4e00\u6837\u627e\u5230\u4e00\u6761\u6700\u4f18\u8def\u5f84\u3002A*\u4f7f\u7528\u542f\u53d1\u5f0f\u5bf9\u8282\u70b9\u8fdb\u884c\u91cd\u65b0\u6392\u5e8f\uff0c\u4ee5\u4fbf\u66f4\u6709\u53ef\u80fd\u66f4\u5feb\u5730\u9047\u5230\u76ee\u6807\u8282\u70b9\u3002\n\u4f60\u51c6\u5907\u597d\u5b9e\u65bd\u4e86\u5417\uff1f\u8003\u8651\u4f7f\u7528\u73b0\u6709\u7684\u5e93\u3002\u5982\u679c\u4f60\u81ea\u5df1\u5b9e\u73b0\u5b83\uff0c\u6211\u6709\u540c\u4f34\u6307\u5357\uff0c\u5b83\u4e00\u6b65\u4e00\u6b65\u5730\u5c55\u793a\u5982\u4f55\u5728Python\u3001C++\u548cC\u8bed\u8a00\u4e2d\u5b9e\u73b0\u56fe\u3001\u961f\u5217\u548c\u5bfb\u8def\u7b97\u6cd5\u3002\n\u5982\u679c\u4f60\u60f3\u627e\u5230\u6240\u6709\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u6216Dijkstra\u7b97\u6cd5\u3002\u5982\u679c\u79fb\u52a8\u6210\u672c\u76f8\u540c\uff0c\u5219\u4f7f\u7528\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff1b\u5982\u679c\u79fb\u52a8\u6210\u672c\u4e0d\u540c\uff0c\u8bf7\u4f7f\u7528Dijkstra\u7b97\u6cd5\u3002\n\u5982\u679c\u4f60\u60f3\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8def\u5f84\uff0c\u6216\u8005\u51e0\u4e2a\u76ee\u6807\u4e2d\u6700\u8fd1\u7684\u4e00\u4e2a\uff0c\u4f7f\u7528\u8d2a\u5a6a\u7684\u6700\u4f73\u4f18\u5148\u641c\u7d22\u6216A*\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6211\u66f4\u559c\u6b22A\u3002\u5f53\u4f60\u60f3\u4f7f\u7528\u8d2a\u5a6a\u7684\u7b2c\u4e00\u6b21\u641c\u7d22\u65f6\uff0c\u8003\u8651\u4f7f\u7528\u4e00\u4e2a\u5e26\u6709\u201c\u4e0d\u5141\u8bb8\u201d\u7684\u542f\u53d1\u5f0f\u7b97\u6cd5* [3 ]\u3002\n\u6700\u4f18\u8def\u5f84\u5462\uff1f\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u548cDijkstra\u7b97\u6cd5\u4fdd\u8bc1\u5728\u7ed9\u5b9a\u8f93\u5165\u56fe\u7684\u60c5\u51b5\u4e0b\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\u8d2a\u5a6a\u7684\u6700\u597d\u7684\u7b2c\u4e00\u6b21\u641c\u7d22\u4e0d\u662f\u3002\u5982\u679c\u542f\u53d1\u5f0f\u6c38\u8fdc\u4e0d\u8d85\u8fc7\u771f\u5b9e\u8ddd\u79bb\uff0c\u5219A*\u4fdd\u8bc1\u627e\u5230\u6700\u77ed\u8def\u5f84\u3002\u968f\u7740\u542f\u53d1\u5f0f\u53d8\u5f97\u66f4\u5c0f\uff0cA*\u53d8\u6210\u4e86Dijkstra\u7b97\u6cd5\u3002\u968f\u7740\u542f\u53d1\u5f0f\u53d8\u5f97\u66f4\u5927\uff0cA*\u53d8\u6210\u8d2a\u5a6a\u7684\u6700\u4f73\u4f18\u5148\u641c\u7d22\u3002\n\u8868\u73b0\u5982\u4f55\uff1f\u6700\u597d\u7684\u529e\u6cd5\u662f\u6d88\u9664\u56fe\u8868\u4e2d\u4e0d\u5fc5\u8981\u7684\u4f4d\u7f6e\u3002\u5982\u679c\u4f7f\u7528\u7f51\u683c\uff0c\u8bf7\u53c2\u89c1\u6b64\u3002\u7f29\u5c0f\u56fe\u7684\u5927\u5c0f\u6709\u52a9\u4e8e\u6240\u6709\u7684\u56fe\u641c\u7d22\u7b97\u6cd5\u3002\u4e4b\u540e\uff0c\u4f7f\u7528\u6700\u7b80\u5355\u7684\u7b97\u6cd5\uff1b\u7b80\u5355\u7684\u961f\u5217\u8fd0\u884c\u5f97\u66f4\u5feb\u3002\u8d2a\u5a6a\u7684\u6700\u4f73\u4f18\u5148\u641c\u7d22\u901a\u5e38\u6bd4Dijkstra\u7b97\u6cd5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u4f46\u4e0d\u4f1a\u4ea7\u751f\u6700\u4f18\u8def\u5f84\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5bfb\u8def\u9700\u6c42\u6765\u8bf4\uff0cA*\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u9009\u62e9\u3002\n\u975e\u5730\u56fe\u5462\uff1f\u6211\u5728\u8fd9\u91cc\u5c55\u793a\u5730\u56fe\u662f\u56e0\u4e3a\u6211\u8ba4\u4e3a\u4f7f\u7528\u5730\u56fe\u66f4\u5bb9\u6613\u7406\u89e3\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u56fe\u5f62\u641c\u7d22\u7b97\u6cd5\u53ef\u4ee5\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684\u56fe\u5f62\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6e38\u620f\u5730\u56fe\uff0c\u6211\u8bd5\u56fe\u4ee5\u4e00\u79cd\u72ec\u7acb\u4e8e2d\u7f51\u683c\u7684\u65b9\u5f0f\u5448\u73b0\u7b97\u6cd5\u4ee3\u7801\u3002\u5730\u56fe\u4e0a\u7684\u79fb\u52a8\u6210\u672c\u53d8\u6210\u4e86\u56fe\u8fb9\u4e0a\u7684\u4efb\u610f\u6743\u91cd\u3002\u542f\u53d1\u5f0f\u7b97\u6cd5\u4e0d\u5bb9\u6613\u8f6c\u5316\u4e3a\u4efb\u610f\u7684\u5730\u56fe\uff1b\u4f60\u5fc5\u987b\u4e3a\u6bcf\u79cd\u7c7b\u578b\u7684\u56fe\u8bbe\u8ba1\u4e00\u4e2a\u542f\u53d1\u5f0f\u3002\u5bf9\u4e8e\u5e73\u9762\u5730\u56fe\uff0c\u8ddd\u79bb\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u7684\u3002\n\u6211\u5728\u8fd9\u91cc\u6709\u66f4\u591a\u5173\u4e8e\u5bfb\u8def\u7684\u6587\u7ae0[4]\u3002\u8bb0\u4f4f\uff0c\u56fe\u5f62\u641c\u7d22\u53ea\u662f\u4f60\u9700\u8981\u7684\u4e00\u90e8\u5206\u3002A*\u672c\u8eab\u4e0d\u4f1a\u5904\u7406\u8bf8\u5982\u534f\u540c\u79fb\u52a8\u3001\u79fb\u52a8\u969c\u788d\u7269\u3001\u5730\u56fe\u66f4\u6539\u3001\u5371\u9669\u533a\u57df\u8bc4\u4f30\u3001\u7f16\u961f\u3001\u8f6c\u5f2f\u534a\u5f84\u3001\u5bf9\u8c61\u5927\u5c0f\u3001\u52a8\u753b\u3001\u8def\u5f84\u5e73\u6ed1\u7b49\u95ee\u9898\u3002\n\u7248\u6743\u6240\u6709\u00a92022 Red Blob Games RSS\u6e90\u5f15\u7528\uff1aPatel\u3001Amit\u548c#34\uff1bA*\u7b97\u6cd5\u7b80\u4ecb&#34\uff1b\uff0c\u7ea2\u70b9\u6e38\u620f\uff0c2014\uff0chttps://www.redblobgames.com/pathfinding/a-star/introduction.html@\u6587\u7ae0{article\uff0cauthor={Patel\uff0cAmit}\uff0ctitle={A*\u7b97\u6cd5\u7b80\u4ecb}\uff0c\u5e74\u4efd={2014}\uff0c\u6ce8={https://www.redblobgames.com/pathfinding/a-star/introduction.html}}\n\u5728conrec\u7684\u5e2e\u52a9\u4e0b\u4e8e2014\u5e745\u670826\u65e5\u521b\u5efa\u3002js\uff1b\u65af\u5854\u62c9\u6587\u7684\u8349\u56fe\u7ed8\u5236\u753b\u7b14\u4e2d\u7684\u5730\u56fe\u7cbe\u7075\uff1b\u6700\u540e\u4fee\u6539\uff1a25 DEC 2021", "note_en": "Created 26 May 2014, updated Aug 2014, Feb 2016, Jun 2016, Jun 2020 In games we often want to find paths from one location to another. We\u2019re not only trying to find the shortest distance; we also want to take into account travel time. Move the blob    (start point) and cross    (end point) to see the shortest path.\n  To find this path we can use a  graph search algorithm, which works when the map is represented as a graph.  A* is a popular choice for graph search.  Breadth First Search is the simplest of the graph search algorithms, so let\u2019s start there, and we\u2019ll work our way up to A*.\n The first thing to do when studying an algorithm is to understand the  data. What is the input? What is the output?\n Input: Graph search algorithms, including A*, take a \u201cgraph\u201d as input. A graph is a set of  locations   (\u201cnodes\u201d) and the  connections   (\u201cedges\u201d) between them. Here\u2019s the graph I gave to A*:\n  A* doesn\u2019t see anything else. It only sees the graph. It doesn\u2019t know whether something is indoors or outdoors, or if it\u2019s a room or a doorway, or how big an area is.  It only sees the graph! It doesn\u2019t know the difference between this map and  .\n Output: The path found by A* is  . The edges are abstract mathematical concepts. A* will tell you to move from one location to another  but it won\u2019t tell you how. Remember that it doesn\u2019t know anything about rooms or doors; all it sees is the graph. You\u2019ll have to decide whether a graph edge returned by A* means moving from tile to tile or walking in a straight line or opening a door or swimming or running along a curved path.\n Tradeoffs: For any given game map, there are many different ways of making a pathfinding graph to give to A*. The above map makes most doorways into nodes; what if we made  ? What if we used  ?\n  The pathfinding graph doesn\u2019t have to be the same as what your game map uses. A grid game map can use a non-grid pathfinding graph, or vice versa. A* runs fastest with the fewest graph nodes; grids are often easier to work with but result in lots of nodes. This page covers the A* algorithm but not graph design; see  my other page [1] for more about graphs. For the explanations on the rest of the page,  I\u2019m going to use grids because it\u2019s easier to visualize the concepts.\n There are lots of algorithms that run on graphs. I\u2019m going to cover these:\n Breadth First Search explores equally in all directions. This is an incredibly useful algorithm, not only for regular path finding, but also for procedural map generation, flow field pathfinding, distance maps, and other types of map analysis.\n Dijkstra\u2019s Algorithm (also called Uniform Cost Search) lets us prioritize which paths to explore. Instead of exploring all possible paths equally, it favors lower cost paths. We can assign lower costs to encourage moving on roads, higher costs to avoid forests, higher costs to discourage going near enemies, and more. When movement costs vary, we use this instead of Breadth First Search.\n A* is a modification of Dijkstra\u2019s Algorithm that is optimized for a single destination. Dijkstra\u2019s Algorithm can find paths to all locations; A* finds paths to one location, or the closest of several locations. It prioritizes paths that seem to be leading closer to a goal.\n I\u2019ll start with the simplest, Breadth First Search, and add one feature at a time to turn it into A*.\n The key idea for all of these algorithms is that we keep track of an expanding ring called the  frontier. On a grid, this process is sometimes called \u201cflood fill\u201d, but the same technique also works for non-grids.  Start the animation to see how the frontier expands  \u00a0\u2192 \u00a0\u2192\n   Expand it by looking at its  neighbors\u00a0  \u00a0\u00a0  \u00a0\u00a0  \u00a0\u00a0. Skip walls. Any unreached neighbors we add to  both the  frontier and the  reached set \u00a0 \u00a0\u2192 \u00a0 \u00a0.\n Let\u2019s see this up close. The tile are numbered in the order we visit them.  Step through to see the expansion process:\n   frontier = Queue()frontier.put(start   )reached = set()reached.add(start)while not frontier.empty(): current = frontier.get() for next in graph.neighbors(current): if next not in reached: frontier.put(next) reached.add(next)\n This loop is the essence of the graph search algorithms on this page, including A*. But how do we find the shortest path? The loop doesn\u2019t actually construct the paths; it only tells us how to visit everything on the map. That\u2019s because Breadth First Search can be used for a lot more than just finding paths; in  this article I show how it\u2019s used for tower defense, but it can also be used for distance maps, procedural map generation, and lots of other things. Here though we want to use it for finding paths, so let\u2019s modify the loop to keep track of  where we came from for every location that\u2019s been reached, and rename the  reached set to a  came_from table (the keys of the table are the reached set):\n frontier = Queue()frontier.put(start   ) came_from = dict() came_from[start] =  Nonewhile not frontier.empty(): current = frontier.get() for next in graph.neighbors(current): if next not in  came_from: frontier.put(next)  came_from[next] =  current\n Now  came_from for each location points to the place where we came from. These are like \u201cbreadcrumbs\u201d. They\u2019re enough to reconstruct the entire path. Move the cross    to see how following the arrows gives you a reverse path back to the start position.\n  The code to reconstruct paths is simple:  follow the arrows backwards  from the goal  to the start. A path is a  sequence of edges, but often it\u2019s easier to store the nodes:\n current = goal   path = []while current != start:    path.append(current) current = came_from[current]path.append(start) # optionalpath.reverse() # optional\n That\u2019s the simplest pathfinding algorithm. It works not only on grids as shown here but on any sort of graph structure. In a dungeon, graph locations could be rooms and graph edges the doorways between them. In a platformer, graph locations could be locations and graph edges the possible actions such as move left, move right, jump up, jump down. In general, think of the graph as states and actions that change state. I have more written about map representation  here [2]. In the rest of the article I\u2019ll continue using examples with grids, and explore why you might use variants of breadth first search.\n We\u2019ve found paths from  one location to  all other locations. Often we don\u2019t need all the paths; we only need a path from one location to  one other location. We can stop expanding the frontier as soon as we\u2019ve found our goal. Drag the    around see how the frontier stops expanding as soon as it reaches the goal.\n   frontier = Queue()frontier.put(start   )came_from = dict()came_from[start] = Nonewhile not frontier.empty(): current = frontier.get()  if current == goal:      break  for next in graph.neighbors(current): if next not in came_from: frontier.put(next) came_from[next] = current\n So far we\u2019ve made step have the same \u201ccost\u201d. In some pathfinding scenarios there are different costs for different types of movement. For example in Civilization, moving through plains or desert might cost 1 move-point but moving through forest or hills might cost 5 move-points. In the map at the top of the page, walking through water cost 10 times as much as walking through grass. Another example is diagonal movement on a grid that costs more than axial movement. We\u2019d like the pathfinder to take these costs into account. Let\u2019s compare the  number of steps from the start with the  distance from the start:\n  For this we want  Dijkstra\u2019s Algorithm (or Uniform Cost Search). How does it differ from Breadth First Search? We need to track movement costs, so let\u2019s add a new variable,  cost_so_far, to keep track of the total movement cost from the start location. We want to take the movement costs into account when deciding how to evaluate locations; let\u2019s turn our queue into a priority queue. Less obviously, we may end up visiting a location multiple times, with different costs, so we need to alter the logic a little bit. Instead of adding a location to the frontier if the location has never been reached, we\u2019ll add it if the new path to the location is better than the best previous path.\n frontier =  PriorityQueue()frontier.put(start , 0)came_from = dict()cost_so_far = dict()came_from[start] = Nonecost_so_far[start] = 0while not frontier.empty(): current = frontier.get() if current == goal: break for next in graph.neighbors(current):  new_cost = cost_so_far[current] + graph.cost(current, next)  if next not in cost_so_far or new_cost &lt; cost_so_far[next]: cost_so_far[next] =  new_cost  priority = new_cost frontier.put(next , priority) came_from[next] = current\n Using a priority queue instead of a regular queue  changes the way the frontier expands. Contour lines are one way to see this.  Start the animation to see how the frontier expands more slowly through the forests, finding the shortest path around the central forest instead of through it:\n  Movement costs other than 1 allow us to explore more interesting graphs, not only grids. In the map at the top of the page, movement costs were based on the distance from room to room. Movement costs can also be used to avoid or prefer areas based on proximity to enemies or allies.\n Implementation notes: We want this priority queue to return the  lowest value first. On the implementation page I show  PriorityQueue\u00a0  in Python using  heapq to return the lowest value first and also  in C++ using  std::priority_queue configured to return the lowest value first. Also, the version of Dijkstra\u2019s Algorithm and A* I present on this page differs from what\u2019s in algorithms textbooks. It\u2019s much closer to what\u2019s called Uniform Cost Search. I describe the differences  on the implementation page.\n With Breadth First Search and Dijkstra\u2019s Algorithm, the frontier expands in all directions. This is a reasonable choice if you\u2019re trying to find a path to all locations or to many locations. However, a common case is to find a path to only one location. Let\u2019s make the frontier expand towards the goal more than it expands in other directions. First, we\u2019ll define a  heuristic function that tells us how close we are to the goal:\n def heuristic(a, b): # Manhattan distance on a square grid return abs(a.x - b.x) + abs(a.y - b.y)\n In Dijkstra\u2019s Algorithm we used the actual distance from the  start for the priority queue ordering. Here instead, in  Greedy Best First Search, we\u2019ll use the estimated distance to the  goal for the priority queue ordering. The location closest to the goal will be explored first. The code uses the priority queue from Dijkstra\u2019s Algorithm but without  cost_so_far:\n frontier = PriorityQueue()frontier.put(start, 0)came_from = dict()came_from[start] = Nonewhile not frontier.empty(): current = frontier.get() if current == goal: break for next in graph.neighbors(current): if next not in came_from:  priority = heuristic(goal, next) frontier.put(next, priority) came_from[next] = current\n     Those paths aren\u2019t the shortest. So this algorithm runs  faster when there aren\u2019t a lot of obstacles, but the paths aren\u2019t as  good. Can we fix this? Yes!\n Dijkstra\u2019s Algorithm works well to find the shortest path, but it wastes time exploring in directions that aren\u2019t promising. Greedy Best First Search explores in promising directions but it may not find the shortest path. The A* algorithm uses  both the actual distance from the start and the estimated distance to the goal.\n  frontier = PriorityQueue()frontier.put(start, 0)came_from = dict()cost_so_far = dict()came_from[start] = Nonecost_so_far[start] = 0while not frontier.empty(): current = frontier.get() if current == goal: break for next in graph.neighbors(current): new_cost = cost_so_far[current] + graph.cost(current, next) if next not in cost_so_far or new_cost &lt; cost_so_far[next]: cost_so_far[next] = new_cost priority = new_cost  + heuristic(goal, next) frontier.put(next, priority) came_from[next] = current\n Compare the algorithms: Dijkstra\u2019s Algorithm calculates the distance from the start point. Greedy Best-First Search estimates the distance to the goal point. A* is using the sum of those two distances.\n  Try opening a hole in the wall in various places. You\u2019ll find that when Greedy Best-First Search finds the right answer, A* finds it too, exploring the same area. When Greedy Best-First Search finds the wrong answer (longer path), A* finds the right answer, like Dijkstra\u2019s Algorithm does, but still explores less than Dijkstra\u2019s Algorithm does.\n A* is the best of both worlds. As long as the heuristic does not overestimate distances, A* finds an optimal path, like Dijkstra\u2019s Algorithm does. A* uses the heuristic to reorder the nodes so that it\u2019s  more likely that the goal node will be encountered sooner.\n Are you ready to implement this? Consider using an existing library. If you\u2019re implementing it yourself, I have  companion guide that shows step by step how to implement graphs, queues, and pathfinding algorithms in Python, C++, and C#.\n  If you want to find paths from or to  all all locations, use Breadth First Search or Dijkstra\u2019s Algorithm. Use Breadth First Search if movement costs are all the same; use Dijkstra\u2019s Algorithm if movement costs vary.\n If you want to find paths to  one location, or the closest of several goals, use Greedy Best First Search or A*. Prefer A* in most cases. When you\u2019re tempted to use Greedy Best First Search, consider using A* with an  \u201cinadmissible\u201d heuristic [3].\n What about optimal paths? Breadth First Search and Dijkstra\u2019s Algorithm are guaranteed to find the shortest path given the input graph. Greedy Best First Search is not. A* is guaranteed to find the shortest path if the heuristic is never larger than the true distance. As the heuristic becomes smaller, A* turns into Dijkstra\u2019s Algorithm. As the heuristic becomes larger, A* turns into Greedy Best First Search.\n What about performance? The best thing to do is to eliminate unnecessary locations in your graph. If using a grid,  see this. Reducing the size of the graph helps all the graph search algorithms. After that, use the simplest algorithm you can; simpler queues run faster. Greedy Best First Search typically runs faster than Dijkstra\u2019s Algorithm but doesn\u2019t produce optimal paths. A* is a good choice for most pathfinding needs.\n What about non-maps? I show maps here because I think it\u2019s easier to understand how the algorithms work by using a map. However, these graph search algorithms can be used on any sort of graph, not only game maps, and I\u2019ve tried to present the algorithm code in a way that\u2019s independent of 2d grids. Movement costs on the maps become arbitrary weights on graph edges. The heuristics don\u2019t translate as easily to arbitrary maps; you have to design a heuristic for each type of graph. For planar maps, distances are a good choice, so that\u2019s what I\u2019ve used here.\n I have lots more written about pathfinding  here [4]. Keep in mind that graph search is only one part of what you will need. A* doesn\u2019t itself handle things like cooperative movement, moving obstacles, map changes, evaluation of dangerous areas, formations, turn radius, object sizes, animation, path smoothing, or lots of other topics.\n  Copyright \u00a9 2022  Red Blob Games      RSS Feed Citations:Patel, Amit, &#34;Introduction to the A* Algorithm&#34;, Red Blob Games, 2014, https://www.redblobgames.com/pathfinding/a-star/introduction.html@article{article, author = {Patel, Amit}, title = {Introduction to the A* Algorithm}, year = {2014}, note = {https://www.redblobgames.com/pathfinding/a-star/introduction.html}}\n Created 26 May 2014 with the help of  conrec.js; map sprites from StarRaven\u2019s  Sketchy Cartography Brushes; \u00a0Last modified: 25 Dec 2021", "posttime": "2022-02-13 18:27:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,introduction", "title": "A*\u7b97\u6cd5\u7b80\u4ecb\uff082014\uff09", "title_en": "Introduction to the A* Algorithm (2014)", "transed": 1, "url": "https://www.redblobgames.com/pathfinding/a-star/introduction.html", "via": "", "real_tags": ["\u7b97\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072927, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u901a\u8fc7\u4e3a\u60a8\u5904\u7406\u8282\u70b9VM\u4e0a\u4e0b\u6587\u7684\u8bbe\u7f6e\uff0c\u8be5\u8f6f\u4ef6\u5305\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u8bbe\u7f6eweb\u7ec4\u4ef6\u7684\u670d\u52a1\u5668\u7aef\u5448\u73b0\u3002\n\u4e00\u4e2a\u5168\u5c40\u6ce8\u518cHappy DOM\u7684\u5b9e\u7528\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u5728\u8282\u70b9\u73af\u5883\u4e2d\u4f7f\u7528Happy DOM\u8fdb\u884c\u6d4b\u8bd5\u3002", "note_en": "This package makes it easier to setup servering side rendering of web components by handling the setup of the Node  VM Context for you.\n   A utility that registers Happy DOM globally, which makes it possible to use Happy DOM for testing in a Node environment.", "posttime": "2022-02-13 18:27:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "dom,\u8282\u70b9", "title": "Happy DOM\uff1a\u53ef\u4ee5\u5728\u670d\u52a1\u5668\u7aef\u5448\u73b0web\u7ec4\u4ef6\u7684jsdom\u66ff\u4ee3\u65b9\u6848", "title_en": "Happy-DOM: a jsdom alternative that can server side render web components", "transed": 1, "url": "https://github.com/capricorn86/happy-dom", "via": "", "real_tags": ["dom", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072926, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u82f1\u56fd\u536b\u751f\u5b89\u5168\u5c40\uff08UK Health Security Agency\uff09\u4e3a\u82f1\u683c\u5170\u63d0\u4f9b\u7684\u6700\u65b0\u6570\u636e\uff0c\u5341\u5e74\u6765\uff0c\u5f02\u6027\u604b\u8005\u4e2d\u65b0\u8bca\u65ad\u7684\u827e\u6ecb\u75c5\u75c5\u6bd2\u6570\u91cf\u9996\u6b21\u9ad8\u4e8e\u7537\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u8005\u3002\n2020\u5e74\uff0c\u82f1\u56fd\u65b0\u8bca\u65ad\u7684\u827e\u6ecb\u75c5\u6bd2\u611f\u67d3\u8005\u4e2d\u6709\u4e00\u534a\u662f\u5f02\u6027\u604b\u8005\uff0849%\uff09\uff0c\u800c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u6bd4\u4f8b\u4e3a45%\u3002\n\u8fd9\u662f\u56e0\u4e3a\u4eca\u5929\u5f00\u59cb\u7684\u5168\u56fd\u827e\u6ecb\u75c5\u6bd2\u68c0\u6d4b\u5468\u63d0\u4f9b\u4e86\u514d\u8d39\u7684\u827e\u6ecb\u75c5\u6bd2\u68c0\u6d4b\u8bd5\u5242\u76d2\u3002\u9f13\u52b1\u4efb\u4f55\u6027\u6d3b\u8dc3\u7684\u4eba\u68c0\u6d4b\u5e76\u4e86\u89e3\u81ea\u5df1\u7684HIV\u72b6\u51b5\u3002\n\u5c3d\u7ba12019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u6d41\u884c\uff0c\u4f46\u68c0\u6d4b\u7ed3\u679c\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u8fd9\u4e00\u6d88\u606f\u7a81\u663e\u4e86\u56fd\u5185\u827e\u6ecb\u75c5\u6bd2\u6d41\u884c\u7684\u53d8\u5316\u30022020\u5e74\uff0c\u5f02\u6027\u604b\u8005\u901a\u8fc7\u6027\u5065\u5eb7\u670d\u52a1\u8fdb\u884c\u7684\u827e\u6ecb\u75c5\u6bd2\u68c0\u6d4b\u4e0b\u964d\u4e86\u4e09\u5206\u4e4b\u4e00\uff0833%\uff09\uff0c\u800c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u68c0\u6d4b\u4e0b\u964d\u4e867%\u3002\u8fd9\u4f7f\u5f97\u5f02\u6027\u604b\u8005\u4e2d\u8d85\u8fc7\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u8bca\u65ad\u4eba\u6570\u66f4\u52a0\u663e\u8457\u3002\n\u5f02\u6027\u604b\u8005\u88ab\u8bca\u65ad\u665a\u7684\u53ef\u80fd\u6027\u4e5f\u5927\u5f97\u591a\uff0c\u8fd9\u610f\u5473\u7740\u514d\u75ab\u7cfb\u7edf\u5df2\u7ecf\u5f00\u59cb\u53d7\u5230\u635f\u5bb3\u30022020\u5e74\uff0c\u8d85\u8fc7\u4e00\u534a\uff0851%\uff09\u7684\u5973\u6027\u300155%\u7684\u5f02\u6027\u604b\u7537\u6027\u548c66%\u768465\u5c81\u53ca\u4ee5\u4e0a\u88ab\u8bca\u65ad\u4e3aHIV\u611f\u67d3\u8005\u662f\u5728\u665a\u671f\u8bca\u65ad\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u6bd4\u4f8b\u53ea\u670929%\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u4ed6\u4eec\u76f8\u4fe1\u81ea\u5df1\u6ca1\u6709\u611f\u67d3\u827e\u6ecb\u75c5\u6bd2\u7684\u98ce\u9669\uff0c\u8fd9\u4e00\u70b9\u5f80\u5f80\u5f97\u5230\u533b\u7597\u4e13\u4e1a\u4eba\u5458\u7684\u652f\u6301\u3002\n\u6770\u57fa\u662f\u4e00\u540d\u611f\u67d3\u827e\u6ecb\u75c5\u6bd2\u7684\u5f02\u6027\u604b\u5973\u6027\uff0c\u5979\u8bf4\uff1a&#39\uff1b\u6211\u4e0d\u4ec5\u6ca1\u60f3\u8fc7\u6211\u80fd\u611f\u67d3\u827e\u6ecb\u75c5\uff0c\u6211\u7684\u533b\u751f\u4e5f\u6ca1\u6709\u3002\u5728\u6211\u68c0\u6d4b\u5448\u9633\u6027\u4e4b\u524d\uff0c\u6211\u4e0d\u77e5\u9053\u5973\u6027\u4f1a\u611f\u67d3HIV\u3002\u5982\u679c\u4f60\u66fe\u7ecf\u6709\u8fc7\u6027\u884c\u4e3a\uff0c\u4f60\u5e94\u8be5\u5b9a\u671f\u8fdb\u884c\u6d4b\u8bd5\uff0c\u53ea\u9700\u8981\u4e00\u6b21\u4e0d\u53d7\u4fdd\u62a4\u7684\u6d4b\u8bd5\u3002\u4e86\u89e3\u81ea\u5df1\u7684\u8eab\u4efd\u5bf9\u4f60\u548c\u4f60\u751f\u6d3b\u4e2d\u7684\u5176\u4ed6\u4eba\u90fd\u662f\u6700\u597d\u7684\u3002\n&#39;\u6700\u8fd1\u7684\u53d1\u5c55\u610f\u5473\u7740HIV\u68c0\u6d4b\u662f\u514d\u8d39\u3001\u5feb\u901f\u548c\u7b80\u5355\u7684\uff0cHIV\u6cbb\u7597\u5728\u63a7\u5236\u75c5\u6bd2\u65b9\u9762\u662f\u6709\u6548\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u53ef\u4ee5&#39\uff1b\u4e0d\u8981\u628a\u75c5\u6bd2\u4f20\u67d3\u7ed9\u522b\u4eba\u3002HIV\u53ef\u4ee5\u5f71\u54cd\u4efb\u4f55\u4eba\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u8fdb\u884c\u68c0\u6d4b&#39;\n\u76f8\u5bf9\u4e8e\u4eba\u53e3\u89c4\u6a21\u800c\u8a00\uff0c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u4ecd\u7136\u66f4\u5bb9\u6613\u53d7\u5230\u827e\u6ecb\u75c5\u6bd2\u7684\u5f71\u54cd\uff0c\u4f46\u9488\u5bf9\u8fd9\u4e00\u7fa4\u4f53\u7684\u6709\u9488\u5bf9\u6027\u7684\u5e72\u9884\u63aa\u65bd\u5df2\u7ecf\u5bfc\u81f4\u4e86\u8fd9\u4e00\u6d41\u884c\u75c5\u7684\u91cd\u5927\u6210\u529f\u6848\u4f8b\u4e4b\u4e00\u30022014\u5e74\uff0c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u4e2d\u65b0\u7684\u827e\u6ecb\u75c5\u6bd2\u8bca\u65ad\u5f00\u59cb\u4e0b\u964d\uff0c\u6b64\u540e\u6bcf\u5e74\u90fd\u5728\u4e0b\u964d\uff0c2014\u5e74\u81f32020\u5e74\u95f4\u4e0b\u964d\u4e8670%\u3002\u8fd9\u79cd\u4e0b\u964d\u5728\u767d\u4eba\u548c\u4f26\u6566\u4eba\u4e2d\u6700\u4e3a\u660e\u663e\u3002\n\u7537\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u786e\u8bca\u7387\u4e0b\u964d\u662f\u56e0\u4e3a\u8d8a\u6765\u8d8a\u591a\u7684HIV\u9884\u9632\u836f\u7247\u5236\u5242\u548c\u6709\u9488\u5bf9\u6027\u5730\u63a8\u5e7f\u5e38\u89c4HIV\u68c0\u6d4b\uff0c\u7136\u540e\u8fc5\u901f\u5f00\u59cb\u5bf9\u786e\u8bca\u8005\u8fdb\u884cHIV\u6cbb\u7597\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4f1a\u66f4\u5feb\u5730\u53d7\u5230\u75c5\u6bd2\u6291\u5236\uff0c\u65e0\u6cd5\u4f20\u64adHIV\u3002\n\u6211\u4eec\u5e0c\u671b\uff0c\u901a\u8fc7\u63d0\u9ad8\u8ba4\u8bc6\u3001\u589e\u52a0\u6d4b\u8bd5\u548c\u66f4\u597d\u5730\u4e3a\u5f02\u6027\u604b\u8005\u63d0\u4f9b\u51c6\u5907\uff0c\u8fd9\u53ef\u4ee5\u5728\u66f4\u5e7f\u6cdb\u7684\u4eba\u7fa4\u4e2d\u63a8\u5e7f\u3002\u6211\u4eec\u8981\u4f20\u8fbe\u7684\u4fe1\u606f\u662f\uff0c\u827e\u6ecb\u75c5\u6bd2\u53ef\u4ee5\u5f71\u54cd\u4efb\u4f55\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u9700\u8981\u77e5\u9053\u5982\u4f55\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u827e\u6ecb\u75c5\u6bd2\u611f\u67d3\u2014\u2014\u65e0\u8bba\u6027\u522b\u3001\u79cd\u65cf\u6216\u5e74\u9f84\u3002\n\u589e\u52a0HIV\u68c0\u6d4b\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a\u636e\u4f30\u8ba1\uff0c\u82f1\u56fd\u67095%\u7684HIV\u611f\u67d3\u8005\uff084660\u4eba\uff09\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bf9\u4ed6\u4eec\u7684\u5065\u5eb7\u4ea7\u751f\u4e0d\u5229\u5f71\u54cd\uff0c\u5e76\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4f20\u64adHIV\u3002\u82f1\u56fd\u7684\u76ee\u6807\u662f\u52302030\u5e74\u7ed3\u675f\u65b0\u7684\u827e\u6ecb\u75c5\u6bd2\u75c5\u4f8b\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u8981\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u5c31\u5fc5\u987b\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u6bcf\u4e00\u6b21\u827e\u6ecb\u75c5\u6bd2\u68c0\u6d4b\u673a\u4f1a\u3002\n\u5728\u5168\u56fdHIV\u68c0\u6d4b\u5468\u671f\u95f4\uff0c\u4f60\u53ef\u4ee5\u5728\u5bb6\u91cc\u8ba2\u8d2d\u514d\u8d39\u7684HIV\u68c0\u6d4b\u8bd5\u5242\u76d2\uff0c\u4e5f\u53ef\u4ee5\u53bb\u5f53\u5730\u7684\u6027\u5065\u5eb7\u8bca\u6240\u3002\n\u536b\u751f\u548c\u793e\u4f1a\u4fdd\u969c\u90e8\u957f\u8428\u5409\u5fb7\u00b7\u8d3e\u7ef4\u5fb7\u8bf4&#39\uff1b\u7531\u4e8e\u68c0\u6d4b\u548cPrEP\u7684\u5e38\u89c4\u8c03\u8bd5\uff0c\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u7537\u6027\u7684\u827e\u6ecb\u75c5\u6bd2\u8bca\u65ad\u7387\u8fdb\u4e00\u6b65\u4e0b\u964d\uff0c\u8fd9\u662f\u975e\u5e38\u7f8e\u5999\u7684\uff0c\u4f46\u6211\u4eec\u5fc5\u987b\u786e\u4fdd\u8fd9\u4e00\u8d8b\u52bf\u5728\u6240\u6709\u7fa4\u4f53\u4e2d\u90fd\u5f97\u5230\u53cd\u6620\u3002\n&#39;\u6211\u81f4\u529b\u4e8e\u6211\u4eec\u7684\u76ee\u6807\uff0c\u5373\u52302030\u5e74\u4e0d\u518d\u6709\u65b0\u7684\u827e\u6ecb\u75c5\u6bd2\u4f20\u64ad\uff0c\u4f46\u6211\u4eec\u65e0\u6cd5\u5355\u72ec\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u6211\u4eec\u90fd\u6709\u81ea\u5df1\u7684\u8d23\u4efb\u2014\u2014\u827e\u6ecb\u75c5\u6bd2\u68c0\u6d4b\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u662f\u514d\u8d39\u548c\u4fdd\u5bc6\u7684\uff0c\u4e86\u89e3\u81ea\u5df1\u7684\u72b6\u51b5\u5c06\u4f7f\u4f60\u80fd\u591f\u83b7\u5f97\u9002\u5f53\u7684\u9884\u9632\u6216\u6cbb\u7597&#39;\n\u536b\u751f\u9879\u76ee\u8d1f\u8d23\u4ebaTaku Mukiwa\u8bf4\uff1a&#39\uff1b\u5341\u5e74\u6765\uff0c\u88ab\u8bca\u65ad\u611f\u67d3\u827e\u6ecb\u75c5\u6bd2\u7684\u5f02\u6027\u604b\u8005\u9996\u6b21\u8d85\u8fc7\u7537\u540c\u6027\u604b\u548c\u53cc\u6027\u604b\u8005\u3002\u5f02\u6027\u604b\u8005\u57282019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u7b5b\u67e5\u4e2d\u53d1\u73b0HIV\u68c0\u6d4b\u7684\u4e0b\u964d\u5e45\u5ea6\u66f4\u5927\uff0c\u8bca\u65ad\u7684\u53ef\u80fd\u6027\u66f4\u5927\u3002\n&#39;\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9700\u8981\u770b\u5230\u66f4\u591a\u7684\u5f02\u6027\u604b\u8005\u63a5\u53d7\u68c0\u6d4b\uff0c\u4ee5\u907f\u514d\u957f\u671f\u611f\u67d3\u672a\u786e\u8bca\u7684\u827e\u6ecb\u75c5\u6bd2\u3002\u8fd9\u5bf9\u4ed6\u4eec\u81ea\u5df1\u7684\u5065\u5eb7\u4ee5\u53ca\u963b\u6b62\u827e\u6ecb\u75c5\u6bd2\u4f20\u64ad\u7684\u52aa\u529b\u90fd\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u7edd\u5927\u591a\u6570\u4eba\u90fd\u662f\u4ece\u4e0d\u77e5\u9053\u81ea\u5df1\u611f\u67d3\u4e86\u827e\u6ecb\u75c5\u6bd2\u7684\u4eba\u90a3\u91cc\u611f\u67d3\u7684&#39;\nKate Folkard\u662f\u82f1\u56fd\u536b\u751f\u5b89\u5168\u5c40HIV\u90e8\u95e8\u7684\u4e34\u65f6\u526f\u4e3b\u4efb\uff0c\u8bf4\uff1a\u201c\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u4e0d\u5e73\u7b49\u95ee\u9898\uff0c\u627e\u5230\u521b\u9020\u6027\u7684\u65b9\u6cd5\u6765\u51cf\u5c11\u6240\u6709\u4eba\u7fa4\u4e2d\u7684\u4f20\u64ad\u3002\u8981\u7ed3\u675f\u827e\u6ecb\u75c5\u6bd2\u4f20\u64ad\uff0c\u6211\u4eec\u9700\u8981\u53ca\u65e9\u8bca\u65ad\uff0c\u53ca\u65f6\u5f00\u59cb\u6cbb\u7597\uff0c\u5e76\u652f\u6301\u4eba\u4eec\u7ee7\u7eed\u6cbb\u7597\u3002\u53ca\u65e9\u68c0\u6d4b\u827e\u6ecb\u75c5\u6bd2\u53ef\u4ee5\u8ba9\u6709\u6548\u7684\u6cbb\u7597\u66f4\u65e9\u5f00\u59cb\uff0c\u800c\u88ab\u8bca\u65ad\u7684\u4eba\u53ef\u4ee5\u671f\u5f85o\u6709\u6b63\u5e38\u7684\u9884\u671f\u5bff\u547d\u3002\n&#39;\u6b64\u5916\uff0c\u827e\u6ecb\u75c5\u6bd2\u643a\u5e26\u8005\u5982\u679c\u63a5\u53d7\u6cbb\u7597\u5e76\u4fdd\u6301\u4e0d\u53ef\u68c0\u6d4b\u7684\u75c5\u6bd2\u6c34\u5e73\uff0c\u5c31\u4e0d\u80fd\u901a\u8fc7\u827e\u6ecb\u75c5\u6bd2\uff0c\u5373\u4e0d\u53ef\u68c0\u6d4b=\u4e0d\u53ef\u4f20\u64ad\uff08U=U\uff09\u3002\u6211\u4eec\u9f13\u52b1\u6bcf\u4e2a\u4eba\u63a5\u53d7\u514d\u8d39\u68c0\u6d4b\uff0c\u53ea\u6709\u4e86\u89e3\u81ea\u5df1\u7684HIV\u72b6\u51b5\uff0c\u4f60\u624d\u80fd\u6709\u6743\u91c7\u53d6\u884c\u52a8\u3002\u901a\u8fc7\u300a\u827e\u6ecb\u75c5\u6bd2\u884c\u52a8\u8ba1\u5212\u300b\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u4e0e\u6574\u4e2a\u536b\u751f\u7cfb\u7edf\u7684\u5408\u4f5c\u4f19\u4f34\u5408\u4f5c\uff0c\u4ee5\u5b9e\u73b0\u52302030\u5e74\u7ed3\u675f\u827e\u6ecb\u75c5\u6bd2\u4f20\u64ad\u7684\u76ee\u6807&#39;\n\u7248\u6743\u6240\u67092022\u00a9Terrence Higgins Trust\u662f\u82f1\u683c\u5170\u548c\u5a01\u5c14\u58eb\u6ce8\u518c\u7684\u6148\u5584\u673a\u6784\uff08\u6ce8\u518c\u53f7288527\uff09\u516c\u53f8\u6ce8\u518c\u53f7\u30021778149\u53f7\u548c\u82cf\u683c\u5170\u6ce8\u518c\u6148\u5584\u673a\u6784\uff08\u6ce8\u518c\u53f7SC039986\uff09\u3002\u6ce8\u518c\u529e\u4e8b\u5904\uff1a437&amp\uff1b\u4f26\u6566\u5580\u91cc\u591a\u5c3c\u4e9a\u8def439\u53f7\uff0cN7 9BG\u3002", "note_en": "For the first time in a decade, the number of new HIV diagnoses among heterosexuals is higher than for gay and bisexual men, according to new figures for England from the UK Health Security Agency.\n Half of all new HIV diagnoses were in heterosexuals (49%) in England in 2020, compared to 45% in gay and bisexual men.\n This comes as  free HIV test kits are made available for National HIV Testing Week, which launches today. Anyone who\u2019s sexually active is encouraged to test and know their HIV status.\n The news highlights the changing shape of the domestic HIV epidemic despite a drop in testing caused by the COVID-19 pandemic. HIV testing by sexual health services among heterosexuals during 2020 fell by a third (33%), compared to a 7% decrease among gay and bisexual men. This makes the number of diagnoses among heterosexuals passing gay and bisexual men even more significant.\n Heterosexuals were also far more likely to be diagnosed late, meaning damage to the immune system has already begun. More than half (51%) of women, 55% of heterosexual men and 66% of those aged 65 and over diagnosed with HIV in 2020 were diagnosed at a late stage. This compares to just 29% of gay and bisexual men. This is likely driven by a belief that they are not at risk of HIV, which is often reinforced by healthcare professionals.\n Jackie, a heterosexual woman living with HIV, said: &#39;Not only did I never consider I could be living with HIV, neither did my doctor. I had no idea that women could get HIV until I tested positive. If you have ever been sexually active you should test regularly, it only takes once unprotected. Knowing your status is best for you and everyone else in your life.\n &#39;Recent developments mean HIV testing is free, quick and easy and HIV treatment is effective at controlling the virus and means I can&#39;t pass on the virus to anyone else. HIV can affect anyone, so everyone should test.&#39;\n Gay and bisexual men are still more impacted by HIV relative to population size, but targeted interventions for this group have led to one of the big success stories of the epidemic. New HIV diagnoses among gay and bisexual men began to fall in 2014 and that has continued every year since, with a fall of 70% between 2014 and 2020. The drop is most pronounced among white men and among those living in London.\n The fall in diagnoses among gay and bisexual men is a result of the growing availability of HIV prevention pill  PrEP and targeted promotion of routine HIV testing followed by the rapid initiation of HIV treatment for those diagnosed, meaning they are more quickly virally suppressed and cannot pass on HIV.\n We hope that, with greater awareness, increased testing and better access to PrEP for heterosexuals, this can be replicated across the wider population. Our message is that HIV can affect anyone and everyone needs to know how to protect themselves against HIV \u2013 regardless of sexuality, gender, ethnicity or age.\n Increased HIV testing is crucial, because an estimated 5% of people living with HIV in the UK (4,660) are unaware, which can adversely affect their health and means they may pass HIV on. The UK is aiming to end new HIV cases by 2030, which is why maximising every opportunity for HIV testing is necessary for achieving that aim.\n You can order a  free HIV test kit to do at home during National HIV Testing Week, or you can visit your local sexual health clinic.\n Health and Social Care Secretary Sajid Javid said: &#39;It is fantastic to see the diagnosis rate of HIV fall further among gay and bisexual men as a result of testing and the routine commissioning of PrEP, but we must make sure this trend is reflected in all groups.\n &#39;I am committed to our goal of no new HIV transmissions by 2030, but we cannot achieve it alone. We all have a part to play \u2013 HIV testing is free and confidential for everyone, and knowing your status will allow you to access appropriate prevention or treatment.&#39;\n Taku Mukiwa, Head of Health Programmes, said: &#39;For the first time in a decade there are more heterosexuals than gay and bisexual men being diagnosed with HIV. Heterosexuals also saw a far steeper drop in testing for HIV during COVID-19 lockdown and are far more likely to be diagnosed late.\n &#39;That\u2019s why we need to see more heterosexuals getting tested to avoid anyone living with undiagnosed HIV for a long time. This is important for their own health as well as for efforts to stop HIV being passed on as the vast majority of people get HIV from someone who is unaware they have it.&#39;\n Kate Folkard, Interim Deputy Director of the HIV Division at the UK Health Security Agency, said: \u201cWe must address inequalities and find creative ways to achieve a reduction in transmission across all populations. To end HIV transmission, we need to diagnose people early, start treatment promptly and support people to continue with their treatment. Detecting HIV early allows effective treatment to start sooner and people diagnosed can expect to have a normal life expectancy.\n &#39;In addition, people living with HIV who are treated and maintain an undetectable level of virus cannot pass HIV, known as Undetectable = Untransmittable (U=U). We encourage everyone to take up the offer of a free test, only by knowing your HIV status can you be empowered to take action. Through the HIV Action Plan, we will continue to work together with our partners across the health system to reach our goal of ending HIV transmission by 2030.&#39;\n    Copyright 2022 \u00a9 Terrence Higgins Trust is a registered charity in England and Wales (reg. no. 288527) Company reg. no. 1778149 and a registered charity in Scotland (reg. no. SC039986). Registered office: 437 &amp; 439 Caledonian Road, London, N7 9BG.", "posttime": "2022-02-13 18:23:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "hiv,\u827e\u6ecb\u75c5\u6bd2", "title": "\u5341\u5e74\u6765\uff0c\u5f02\u6027\u604bHIV\u8bca\u65ad\u9996\u6b21\u8d85\u8fc7\u7537\u540c\u6027\u604b", "title_en": "Heterosexual HIV diagnoses overtake those in gay men for first time in a decade", "transed": 1, "url": "https://www.tht.org.uk/news/heterosexual-hiv-diagnoses-overtake-those-gay-men-first-time-decade", "via": "", "real_tags": ["hiv", "\u827e\u6ecb\u75c5\u6bd2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072925, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Universal Viewer\u662f\u4e00\u4e2a\u793e\u533a\u5f00\u53d1\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5176\u4f7f\u547d\u662f\u5e2e\u52a9\u60a8\u4e0e\u4e16\u754c\u5171\u4eab\u60a8\u7684\u5185\u5bb9", "note_en": "The Universal Viewer is a community-developed open source project on a mission to help you share your content with the world", "posttime": "2022-02-13 18:22:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u4ef6,universal,\u5171\u4eab", "title": "\u6587\u4ef6\u7ba1\u7406\u5668", "title_en": "Universal Viewer", "transed": 1, "url": "https://universalviewer.io/", "via": "", "real_tags": ["\u6587\u4ef6", "universal", "\u5171\u4eab"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072924, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u767d\u624b\u8d77\u5bb6\u5efa\u9020\u4e00\u5ea7\u65b0\u57ce\u65f6\uff0c\u5510&#39\uff1bt\u89c4\u5212\u9ad8\u5c42\u5efa\u7b51\u3001\u590d\u6742\u7684\u9ad8\u901f\u516c\u8def\u7acb\u4ea4\u548c\u5730\u4e0b\u516c\u5171\u4ea4\u901a\u7ebf\u8def\u3002\u4ece\u5438\u5f15\u4eba\u4eec\u6765\u5230\u4f60\u7684\u65b0\u57ce\u9547\u7684\u5efa\u7b51\u3001\u9053\u8def\u548c\u505c\u8f66\u573a\u5f00\u59cb\u3002\n\u82b1\u8d392-3\u500d\u7684\u65f6\u95f4\u548c\u91d1\u94b1\u6765\u62c6\u9664\u548c\u91cd\u5efa\u57fa\u7840\u8bbe\u65bd\uff0c\u4ee5\u652f\u6301\u57ce\u9547\u7684\u53d1\u5c55\n\u82b120\u500d\u7684\u65f6\u95f4\u548c\u91d1\u94b1\u6765\u5efa\u8bbe\u4e00\u5ea7\u80fd\u591f\u652f\u6301\u6570\u5343\u4eba\u7e41\u8363\u793e\u533a\u7684\u57ce\u5e02\uff0c\u4f46\u6ca1\u6709\u4eba\u5230\u573a\n\u5510&#39\uff1b\u6211\u4e0d\u5728\u4e4e\u5b83\u8d62\u4e86&#39\uff1b\u5982\u679c\u4f60\u8fbe\u5230Facebook\u7684\u6d3b\u52a8\u6c34\u5e73\uff0c\u4f60\u5c31\u4e0d\u4f1a\u5de5\u4f5c\u3002\u8fd9\u79cd\u7a0b\u5ea6\u7684\u6d3b\u52a8\u51e0\u4e4e\u4e0d\u4f1a\u5728\u4e00\u591c\u4e4b\u95f4\u51fa\u73b0\u3002\n\u5b83\u8ba9\u4f60\u53ef\u4ee5\u82b1\u66f4\u591a\u7684\u65f6\u95f4\uff08\u5929\u771f\u5730\uff09\u5efa\u7acb\u66f4\u591a\u7684\u65b0\u60f3\u6cd5\u3002\u4f60\u5efa\u7acb\u7684\u8d8a\u591a\uff0c\u5176\u4e2d\u4e00\u4e2a\u60f3\u6cd5\u5c31\u8d8a\u6709\u53ef\u80fd\u83b7\u5f97\u6210\u529f\u3002\n\u6240\u4ee5\u628a\u5b83\u653e\u5728\u5de8\u77f3\u4e0a\u3002\u4f7f\u7528\u6613\u4e8e\u5b9e\u73b0\u7684\u7b97\u6cd5\u3002\u907f\u514d\u590d\u6742\u7684\u5de5\u4f5c\u6d41\uff0c\u5982\u6d88\u606f\u961f\u5217\u548c\u670d\u52a1\u603b\u7ebf\u3002\n\u67e5\u770b\u6d3b\u52a8\u65e5\u5fd7\u3002\u8861\u91cf\u7ee9\u6548\u3002\u53ea\u6709\u5f53\u4f60&#39\uff1b\u4fee\u590dbug\u548c\u6dfb\u52a0\u529f\u80fd\u7684\u65f6\u95f4\u6bd4\u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u7684\u65f6\u95f4\u8981\u5c11#39\uff1b\u8ba9it\u90e8\u95e8\u80fd\u591f\u5b8c\u6210\u8ba1\u7b97\u6210\u672c\u9ad8\u6602\u7684\u6d41\u7a0b\uff0c\u548c/\u6216\u5f53\u8fd9\u4e9b\u6d41\u7a0b\u6210\u4e3a\u4f01\u4e1a\u6210\u529f\u7684\u5173\u952e\u8def\u5f84\u65f6\uff0c\u5373&#39\uff1b\u5f53\u4f60\u6295\u5165\u65f6\u95f4\u548c\u91d1\u94b1\u6765\u589e\u52a0\u590d\u6742\u6027\u548c\u652f\u6301\u4e0d\u65ad\u589e\u957f\u7684\u9700\u6c42\u65f6\u3002", "note_en": "When building a new town from scratch, don&#39;t plan for hi-rise buildings, complex freeway interchanges and underground mass transit lines. Start with the buildings and roads and parking lots that will attract people to your new town.\n  Spending 2x-3x the initial investment of time and money to demolish and rebuild infrastructure to support the town as it grows\n Spending 20x the minimal investment of time and money to build a city that could support a thriving community of thousands, but nobody shows up\n   Don&#39;t care that it won&#39;t work if you achieve Facebook-activity-level scale. That level of activity almost never shows up overnight.\n   It freed you up to spend more time building more new ideas (na\u00efvely). The more you build, the more likely one of those ideas is to find success.\n So put it in the monolith. Use algorithms that are easy to implement. Avoid complex workflows like message queues service busses.\n Watch activity logs. Measure performance. When,   and only when you&#39;re spending less time fixing bugs and adding features than you are on holding the application&#39;s hand so that it can finish the computationally-expensive processes, and/or when those processes become critical-path to the success of your business, that&#39;s when you invest time and money in them to add complexity and support the increased demand.", "posttime": "2022-02-13 18:21:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u5929\u771f,design,\u65f6\u95f4", "title": "\u5929\u771f\u5730\u8bbe\u8ba1", "title_en": "Design Naively", "transed": 1, "url": "https://adamtuttle.codes/blog/2022/design-naively/", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u5929\u771f", "design", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072923, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f26\u6566\uff0c2\u670811\u65e5\uff08\u8def\u900f\u793e\uff09-\u51fa\u552e\u6770\u514b\u00b7\u591a\u5c14\u897f\uff08Jack Dorsey&#39\uff09NFT\u7684\u5e73\u53f0\uff1b\u8be5\u516c\u53f8\u521b\u59cb\u4eba\u79f0\uff0c\u8be5\u516c\u53f8\u7b2c\u4e00\u6761\u4ef7\u503c290\u4e07\u7f8e\u5143\u7684\u63a8\u6587\u6682\u505c\u4e86\u5927\u591a\u6570\u4ea4\u6613\uff0c\u56e0\u4e3a\u4eba\u4eec\u51fa\u552e\u7684\u5185\u5bb9\u4e2d\u5305\u542b\u4e0d\u5c5e\u4e8e\u81ea\u5df1\u7684\u4ee3\u5e01\uff0c\u79f0\u4e4b\u4e3aa&#34\uff1b\u57fa\u672c\u95ee\u9898&#34\uff1b\u5728\u5feb\u901f\u589e\u957f\u7684\u6570\u5b57\u8d44\u4ea7\u5e02\u573a\u3002\nNFTS\u7684\u9500\u552e\uff0c\u6216\u4e0d\u53ef\u66ff\u4ee3\u7684\u4ee3\u5e01\uff0c\u57282021\u98d9\u5347\u5230250\u4ebf\u7f8e\u5143\u5de6\u53f3\uff0c\u8fd9\u8ba9\u8bb8\u591a\u4eba\u611f\u5230\u56f0\u60d1\uff0c\u4e3a\u4ec0\u4e48\u8981\u82b1\u8fd9\u4e48\u591a\u94b1\u5728\u90a3\u4e9b\u6ca1\u6709\u5b9e\u4f53\u5b58\u5728\u7684\u9879\u76ee\u4e0a\uff0c\u54ea\u4e9b\u4eba\u53ef\u4ee5\u514d\u8d39\u5728\u7ebf\u89c2\u770b\u3002\nNFT\u662f\u8bb0\u5f55\u6570\u5b57\u6587\u4ef6\uff08\u5982\u56fe\u50cf\u3001\u89c6\u9891\u6216\u6587\u672c\uff09\u6240\u6709\u6743\u7684\u52a0\u5bc6\u8d44\u4ea7\u3002\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u521b\u9020\uff0c\u6216&#34\uff1b\u9020\u5e01\u5382\uff1b\uff0cNFT\uff0c\u5e76\u4e14\u4ee4\u724c\u7684\u6240\u6709\u6743\u901a\u5e38\u4e0d\u4f1a\u6388\u4e88\u57fa\u7840\u9879\u7684\u6240\u6709\u6743\u3002\u9605\u8bfb\u66f4\u591a\n\u603b\u90e8\u4f4d\u4e8e\u7f8e\u56fd\u7684Cent\u5728\u51fa\u552e\u524dTwitter\u9996\u5e2d\u6267\u884c\u5b9839\uff1bs\u53bb\u5e743\u6708\u4ee5NFT\u7684\u8eab\u4efd\u53d1\u63a8\u7279\u3002\u4f46\u8be5\u516c\u53f8\u9996\u5e2d\u6267\u884c\u5b98\u517c\u8054\u5408\u521b\u59cb\u4eba\u5361\u6885\u4f26\u00b7\u8d6b\u8d3e\u9f50\uff08Cameron Hejazi\uff09\u544a\u8bc9\u8def\u900f\u793e\uff0c\u622a\u81f32\u67086\u65e5\uff0c\u8be5\u516c\u53f8\u5df2\u505c\u6b62\u5141\u8bb8\u4e70\u5356\u3002\n&#34;\u90a3\u91cc&#39\uff1b\u8fd9\u662f\u4e00\u7cfb\u5217\u57fa\u672c\u4e0a\u4e0d\u5e94\u8be5\u53d1\u751f\u7684\u6d3b\u52a8&#39\uff1b\u4e0d\u53ef\u80fd\u53d1\u751f\u2014\u2014\u6bd4\u5982\uff0c\u6cd5\u5f8b\u4e0a&#34\uff1b\u8d6b\u8d3e\u9f50\u8bf4\u3002\n\u800c\u5206\u5e02\u573a&#34\uff1b\u8d1d\u5854\u3002\u520634\u5c81\uff1b\u6682\u505c\u4e86NFT\u9500\u552e\uff0c\u8be5\u90e8\u5206\u4e13\u95e8\u7528\u4e8e\u9500\u552e\u63a8\u7279\u7684NFT\uff0c\u79f0\u4e3a&#34\uff1b\u8d35\u91cd\u7269\u54c1\uff1b\uff0c\u4ecd\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002\nHejazi\u5f3a\u8c03\u4e86\u4e09\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a\u51fa\u552e\u672a\u7ecf\u6388\u6743\u7684\u5176\u4ed6NFT\u526f\u672c\u7684\u4eba\uff0c\u5236\u9020\u4e0d\u5c5e\u4e8e\u4ed6\u4eec\u7684\u5185\u5bb9\u7684NFT\u7684\u4eba\uff0c\u4ee5\u53ca\u51fa\u552e\u7c7b\u4f3c\u8bc1\u5238\u7684NFT\u96c6\u7684\u4eba\u3002\n\u4ed6\u8bf4\u8fd9\u4e9b\u95ee\u9898\u662f&#34\uff1b\u7316\u7357&#34\uff1b\uff0c\u4e0e\u7528\u6237&#34\uff1b\u9020\u5047\u548c\u9020\u5047\u4ee5\u53ca\u9020\u5047\u6570\u5b57\u8d44\u4ea7&#34\uff1b\u3002\n&#34;\u5b83\u4e00\u76f4\u5728\u53d1\u751f\u3002\u6211\u4eec\u4f1a\u7981\u6b62\u8fdd\u89c4\u8d26\u6237\uff0c\u4f46\u5c31\u50cf\u6211\u4eec&#39\uff1b\u6211\u4eec\u5728\u73a9\u6253\u9f39\u9f20\u7684\u6e38\u620f\u3002\u3002\u3002\u6bcf\u6b21\u6211\u4eec\u7981\u6b62\u4e00\u4e2a\uff0c\u5c31\u4f1a\u51fa\u73b0\u53e6\u4e00\u4e2a\uff0c\u6216\u8005\u8fd8\u4f1a\u51fa\u73b0\u4e09\u4e2a&#34;\n\u968f\u7740\u5404\u5927\u54c1\u724c\u7eb7\u7eb7\u52a0\u5165\u5230\u6240\u8c13\u7684&#34\uff1bmetaverse&#34\uff1b\uff0c\u6216\u8005Web3\u3002\u53ef\u53e3\u53ef\u4e50\uff08Coca-Cola\uff09\u548c\u5962\u4f88\u54c1\u724c\u53e4\u9a70\uff08Gucci\uff09\u90fd\u662f\u9500\u552eNFT\u7684\u516c\u53f8\u4e4b\u4e00\uff0c\u800cYouTube\u5219\u8868\u793a\u5c06\u63a2\u7d22NFT\u529f\u80fd\u3002\n15\u4e07\u7528\u6237\u548c\u6536\u5165#34\uff1b\u4ee5\u767e\u4e07\u8ba1&#34\uff1b\uff0cHejazi\u8868\u793a\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u5c0f\u7684NFT\u5e73\u53f0\uff0c\u6574\u4e2a\u884c\u4e1a\u90fd\u5b58\u5728\u5047\u5192\u548c\u975e\u6cd5\u5185\u5bb9\u7684\u95ee\u9898\u3002\n\u6700\u5927\u7684NFT\u5e02\u573aOpenSea\u5728\u5176\u6700\u65b0\u4e00\u8f6e\u98ce\u9669\u878d\u8d44\u540e\u4f30\u503c\u4e3a133\u4ebf\u7f8e\u5143\uff0c\u4e0a\u4e2a\u6708\u8868\u793a\uff0c\u5728\u5176\u5e73\u53f0\u4e0a\u514d\u8d39\u5236\u4f5c\u7684NFT\u4e2d\uff0c\u8d85\u8fc780%\u662f&#34\uff1b\u527d\u7a83\u4f5c\u54c1\u3001\u5047\u85cf\u54c1\u548c\u5783\u573e\u90ae\u4ef6&#34\uff1b\u3002\nOpenSea\u5728\u63a8\u7279\u5e16\u5b50\u4e2d\u8868\u793a\uff0c\u8be5\u516c\u53f8\u66fe\u8bd5\u56fe\u9650\u5236\u7528\u6237\u53ef\u4ee5\u514d\u8d39\u521b\u5efa\u7684NFT\u6570\u91cf\uff0c\u4f46\u5728\u7528\u6237\u7684\u5f3a\u70c8\u53cd\u5bf9\u4e0b\uff0c\u8be5\u516c\u53f8\u63a8\u7ffb\u4e86\u8fd9\u4e00\u51b3\u5b9a\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u5b83\u662f&#34\uff1b\u901a\u8fc7\u4e00\u7cfb\u5217\u89e3\u51b3\u65b9\u6848&#34\uff1b\u963b\u6b62&#34\uff1b\u574f\u6f14\u5458&#34\uff1b\u540c\u65f6\u652f\u6301\u521b\u4f5c\u8005\u3002\n&#34;\u4f7f\u7528\u527d\u7a83\u5185\u5bb9\u9500\u552eNFT\u662f\u8fdd\u53cd\u6211\u4eec\u7684\u653f\u7b56\u7684\uff1b\u4e00\u4f4dOpenSea\u53d1\u8a00\u4eba\u8bf4\u3002\n&#34;\u6211\u4eec\u65e5\u4ee5\u7ee7\u591c\u5730\u5de5\u4f5c\uff0c\u63a8\u51fa\u4ea7\u54c1\uff0c\u589e\u52a0\u529f\u80fd\uff0c\u6539\u8fdb\u6d41\u7a0b\uff0c\u4ee5\u6ee1\u8db3\u5f53\u524d\u7684\u9700\u6c42&#34;\n\u5bf9\u8bb8\u591aNFT\u7231\u597d\u8005\u6765\u8bf4\uff0c\u533a\u5757\u94fe\u6280\u672f\u7684\u5206\u6563\u6027\u5f88\u6709\u5438\u5f15\u529b\uff0c\u5141\u8bb8\u7528\u6237\u5728\u6ca1\u6709\u4e2d\u592e\u673a\u6784\u63a7\u5236\u6d3b\u52a8\u7684\u60c5\u51b5\u4e0b\u521b\u5efa\u548c\u4ea4\u6613\u6570\u5b57\u8d44\u4ea7\u3002\n\u4f46Hejazi\u8868\u793a\uff0c\u4ed6\u7684\u516c\u53f8\u70ed\u8877\u4e8e\u4fdd\u62a4\u5185\u5bb9\u521b\u4f5c\u8005\uff0c\u5728\u63a2\u7d22\u5206\u6563\u89e3\u51b3\u65b9\u6848\u4e4b\u524d\uff0c\u53ef\u80fd\u4f1a\u5f15\u5165\u96c6\u4e2d\u63a7\u5236\u4f5c\u4e3a\u77ed\u671f\u63aa\u65bd\uff0c\u4ee5\u91cd\u65b0\u5f00\u653e\u5e02\u573a\u3002\n\u5728\u591a\u897fNFT\u9500\u552e\u4e4b\u540e\uff0c\u68ee\u7279\u5f00\u59cb\u4e86\u89e3NFT\u5e02\u573a\u7684\u60c5\u51b5\u3002", "note_en": "LONDON, Feb 11 (Reuters) - The platform which sold an NFT of Jack Dorsey&#39;s first tweet for $2.9 million has halted most transactions because people were selling tokens of content that did not belong to them, its founder said, calling this a &#34;fundamental problem&#34; in the fast-growing digital assets market.\n Sales of NFTs, or non-fungible tokens, soared to around  $25 billion in 2021, leaving many baffled as to why so much money is being spent on items that do not physically exist and which anyone can view online for free.\n NFTs are crypto assets that record the ownership of a digital file such as an image, video or text. Anyone can create, or &#34;mint&#34;, an NFT, and ownership of the token does not usually confer ownership of the underlying item.   read more\n   The U.S.-based Cent executed one of the first known million-dollar NFT sales when it sold the former  Twitter CEO&#39;s tweet as an NFT last March. But as of Feb. 6, it has stopped allowing buying and selling, CEO and co-founder Cameron Hejazi told Reuters.\n &#34;There&#39;s a spectrum of activity that is happening that basically shouldn&#39;t be happening - like, legally&#34; Hejazi said.\n While the Cent marketplace &#34;beta.cent.co&#34; has paused NFT sales, the part specifically for selling NFTs of tweets, which is called &#34;Valuables&#34;, is still active.\n Hejazi highlighted three main problems: people selling unauthorised copies of other NFTs, people making NFTs of content which does not belong to them, and people selling sets of NFTs which resemble a security.\n He said these issues were &#34;rampant&#34;, with users &#34;minting and minting and minting counterfeit digital assets&#34;.\n &#34;It kept happening. We would ban offending accounts but it was like we&#39;re playing a game of whack-a-mole... Every time we would ban one, another one would come up, or three more would come up.&#34;\n  Such problems may come into greater focus as major brands join the rush towards the so-called &#34;metaverse&#34;, or  Web3. Coca-Cola  (KO.N) and luxury brand Gucci are among companies to have sold NFTs, while  YouTube said it will explore NFT features.\n While Cent, with 150,000 users and revenue &#34;in the millions&#34;, is a relatively small NFT platform, Hejazi said the issue of fake and illegal content exists across the industry.\n  The biggest NFT marketplace, OpenSea, valued at $13.3 billion after its latest round of venture funding,  said last month more than 80% of the NFTs minted for free on its platform were &#34;plagiarized works, fake collections and spam&#34;.\n OpenSea tried limiting the number of NFTs a user could mint for free, but then reversed this decision following a backlash from users, the company said in a Twitter thread, adding that it was &#34;working through a number of solutions&#34; to deter &#34;bad actors&#34; while supporting creators.\n &#34;It is against our policy to sell NFTs using plagiarized content,&#34; an OpenSea spokesperson said.\n &#34;We are working around the clock to ship products, add features, and refine our processes to meet the moment.&#34;\n To many NFT-enthusiasts, the decentralised nature of  blockchain technology is appealing, allowing users to create and trade digital assets without a central authority controlling the activity.\n But Hejazi said his company was keen on protecting content-creators, and may introduce centralised controls as a short-term measure in order to re-open the marketplace, before exploring decentralised solutions.\n It was after the Dorsey NFT sale that Cent started to get a sense of what was going on in NFT markets.", "posttime": "2022-02-13 18:17:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u527d\u7a83,marketplace,nft", "title": "NFT\u5e02\u573a\u5173\u95ed\uff0c\u7406\u7531\u662f\u201c\u7316\u7357\u201d\u7684\u5047\u8d27\u3001\u527d\u7a83\u95ee\u9898", "title_en": "NFT marketplace shuts, citing 'rampant' fakes, plagiarism problem", "transed": 1, "url": "https://www.reuters.com/business/finance/nft-marketplace-shuts-citing-rampant-fakes-plagiarism-problem-2022-02-11/", "via": "", "real_tags": ["\u527d\u7a83", "nft"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072922, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u60f3\u771f\u6b63\u64c5\u957f\u67d0\u4ef6\u4e8b\uff0c\u4f60\u5c31\u8981\u5c3d\u53ef\u80fd\u9891\u7e41\u5730\u505a\uff0c\u5c3d\u53ef\u80fd\u957f\u65f6\u95f4\u5730\u505a\uff0c\u4e00\u70b9\u4e00\u70b9\u5730\u53d6\u5f97\u8fdb\u5c55\uff0c\u76f4\u5230\u8fbe\u5230\u4f60\u60f3\u8981\u7684\u7ed3\u679c\u3002\u8bad\u7ec3\u4eba\u5de5\u667a\u80fd\u6a21\u578b\u5e76\u6ca1\u6709\u592a\u5927\u7684\u4e0d\u540c\uff0c\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u79d1\u6280\u5de8\u5934\u7d22\u5c3c\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u90e8\u95e8\u7684\u4e00\u4e2a\u56e2\u961f\u5728Gran Turismo\u6559\u5176\u4ee3\u7406\u4ebaSophy\u6210\u4e3a\u4e16\u754c\u4e0a\u901f\u5ea6\u6700\u5feb\u7684\u4eba\u7684\u65b9\u5f0f\u3002\u548c\u4eba\u7c7b\u4e00\u6837\uff0c\u7d22\u83f2\u5728GT\u7684\u8868\u73b0\u8d8a\u597d\uff0c\u5b83\u5c31\u8d8a\u662f\u4e00\u4e2a\u6df7\u86cb\u3002\nSophy\u662fPlayStation\u4eba\u7d22\u5c3c\uff08Sony\uff09\u548cGran Turismo\u5f00\u53d1\u8005Polyphony Digital\u7684\u5408\u4f5c\u9879\u76ee\u3002\uff08\u201c\u90a3\u4e48phy\u201d-\u660e\u767d\u4e86\u5417\uff1f\uff09Sophy\u771f\u7684\u5f88\u5feb\uff0c\u4f46\u4e0d\u50cf\u9a6c\u91cc\u5965\u5361\u4e01\u8f66\u4e2d\u7684\u201cAI\u201d\uff0c\u5b83\u4e0d\u5feb\u662f\u56e0\u4e3a\u5b83\u4f5c\u5f0a\u3002\u5b83\u7684\u6e38\u620f\u89c4\u5219\u4e0e\u4eba\u7c7b\u73a9\u5bb6\u76f8\u540c\uff0c\u4f7f\u7528\u7684\u5de5\u5177\u4e5f\u76f8\u540c\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u901a\u8fc7\u5728\u7d22\u5c3c\u4e91\u8ba1\u7b97\u7684PS4\u7f51\u7edc\u4e0a\u8fd0\u884c\u6570\u5343\u6b21\u800c\u53d8\u5f97\u4f18\u79c0\uff0c\u540c\u65f6\u6839\u636e\u5176\u884c\u4e3a\u7684\u7ed3\u679c\u5f97\u5230\u79ef\u6781\u6216\u6d88\u6781\u7684\u5f3a\u5316\u3002\nSophy\u7684\u6280\u80fd\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d1\u5c55\uff0c\u6b63\u5982\u4f60\u5728\u4e0b\u9762\u5d4c\u5165\u7684\u89c6\u9891\u5236\u4f5c\u4e2d\u6240\u770b\u5230\u7684\u90a3\u6837\u3002\u6211\u5411\u4f60\u4fdd\u8bc1\uff0c\u8fd9\u771f\u7684\u5f88\u6709\u8da3\u3002\u5982\u679c\u4f60\u548c\u6211\u4e00\u6837\uff0c\u6bcf\u5f53\u6709\u4eba\u5728\u8033\u8fb9\u63d0\u5230\u201c\u4eba\u5de5\u667a\u80fd\u201d\u6216\u201c\u673a\u5668\u5b66\u4e60\u201d\u8fd9\u4e2a\u8bcd\u65f6\uff0c\u4f60\u7684\u773c\u775b\u5c31\u4f1a\u53d8\u5f97\u5446\u6ede\uff0c\u4f60\u4f1a\u611f\u5230\u5934\u6655\u3002\u4f46\u7d22\u83f2\u7684\u6848\u4f8b\u771f\u7684\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u662f\u5982\u4f55\u53d1\u5c55\u5230\u4eca\u5929\u7684\u3002\n\u4f8b\u5982\uff0cPolyphony Digital\u7684\u4e00\u4f4d\u5de5\u7a0b\u5e08\u8bf4\uff0c\u7d22\u5c3c\u4eba\u5de5\u667a\u80fd\u56e2\u961f\u7b2c\u4e00\u6b21\u628aSophy\u5e26\u5230\u5de5\u4f5c\u5ba4\u4e0e\u771f\u4eba\u6bd4\u8d5b\u65f6\uff0c\u867d\u7136\u901f\u5ea6\u5f88\u5feb\uff0c\u4f46\u786e\u5b9e\u5f88\u6df7\u4e71\u3002\u5b83\u4e0d\u80fd\u76f4\u7ebf\u884c\u9a76\u3002\n\u7136\u540e\uff0c\u5b83\u53c8\u56de\u5230\u4e86\u7ed8\u56fe\u677f\u4e0a\uff0c\u53d1\u5c55\u6838\u5fc3\u7ade\u4e89\u529b\uff0c\u76f4\u5230\u5b83\u6bd4\u4e16\u754c\u9876\u7ea7FIA Gran Turismo\u9526\u6807\u8d5b\u9009\u624b\u66f4\u5feb\uff0c\u5c3d\u7ba1\u53ea\u662f\u5728\u70ed\u8eab\u5708\u3002\u7814\u7a76\u4eba\u5458\u5c06Sophy\u5e26\u56de\u590d\u8c03\uff0c\u5e76\u8ba9\u4e00\u4e2a\u7531\u56db\u8f86Sophy\u63a7\u5236\u7684\u6c7d\u8f66\u7ec4\u6210\u7684\u56e2\u961f\u4e0e\u56db\u540d\u4e13\u4e1a\u7684\u4eba\u7c7b\u9a7e\u9a76\u5458\u8fdb\u884c\u5bf9\u51b3\u3002\u7d22\u83f2\u961f\u5728\u4e09\u573a\u6bd4\u8d5b\u4e2d\u7684\u4e24\u573a\u6bd4\u8d5b\u4e2d\u83b7\u5f97\u7b2c\u4e00\u540d\uff0c\u4f46\u603b\u4f53\u5f97\u5206\u4f4e\u4e8e\u8eab\u4f53\u6e29\u6696\u7684\u961f\u4f0d\uff0c\u56e0\u6b64\u653e\u5f03\u4e86\u6bd4\u8d5b\u3002\n\u95ee\u9898\u662f\uff0c\u7d22\u83f2\u5b66\u4f1a\u4e86\u5982\u4f55\u5feb\u901f\u9a7e\u9a76\uff0c\u4f46\u5b83\u4e0d\u77e5\u9053\u5982\u4f55\u5feb\u901f\u9a7e\u9a76\u800c\u4e0d\u50cf\u4e2a\u5341\u8db3\u7684\u50bb\u74dc\u3002\u7d22\u5c3c\u4eba\u5de5\u667a\u80fd\uff08Sony AI\uff09\u8463\u4e8b\u517c\u9879\u76ee\u8d1f\u8d23\u4eba\u5f7c\u5f97\u00b7\u6c83\u5c14\u66fc\uff08Peter Wurman\uff09\u8bf4\uff1a\u201c\u6211\u8ba4\u4e3a\u6211\u4eec\u90fd\u4f4e\u4f30\u4e86\u6b63\u786e\u5bf9\u5f85\u4f53\u80b2\u9053\u5fb7\u7684\u96be\u5ea6\uff0c[\u6559Sophy]\u5728\u9762\u5bf9\u7ade\u4e89\u5bf9\u624b\u65f6\u4e0d\u8981\u8fc7\u4e8e\u5484\u903c\u4eba\u6216\u8fc7\u4e8e\u80c6\u5c0f\u3002\u201d\u5207\u6362\u5230Sophy\u5728\u9f99\u5f84\u6d77\u6ee8\u7684\u7b2c\u4e00\u4e2a\u5f2f\u9053\u4e0a\uff0c\u4e00\u5bf9\u5bf9\u624b\u5239\u8f66\u592a\u8fdf\uff0c\u5728\u8d5b\u9053\u4e0a\u7528\u53cc\u8f6e\u6ed1\u884c\u7684\u7247\u6bb5\u3002\n\u4e00\u65e6\u7d22\u83f2\u4e0d\u518d\u505a\u90a3\u4e9b\u8ba9\u5b83\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5\u7684\u4e8b\u60c5\uff0c\u5b83\u5728\u4ea4\u901a\u4e2d\u7684\u901f\u5ea6\u51e0\u4e4e\u548c\u5b83\u72ec\u81ea\u4f7f\u7528\u6ca5\u9752\u65f6\u4e00\u6837\u5feb\u3002\u4ece\u8fd9\u79cd\u65b0\u53d1\u73b0\u7684\u8d85\u4eba\u76f4\u89c9\u4e2d\uff0c\u5b83\u6240\u4f7f\u7528\u7684\u4e00\u4e9b\u975e\u5e38\u89c4\u6280\u672f\u53d8\u5f97\u663e\u800c\u6613\u89c1\u3002Gran Turismo\u5236\u4f5c\u4eba\u517c\u590d\u8c03\u6570\u5b57\u603b\u76d1\u5c71\u5185\u548c\u5f18\uff08Kazunori Yamauchi\uff09\u4ecb\u7ecd\u4e86Sophy\u5728GTPlanet\u4e0a\u72ec\u7279\u9a7e\u9a76\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\u201c\u6211\u662f\u4e00\u540d\u8d5b\u8f66\u624b\uff0c\u5b66\u4f1a\u4e86\u5982\u4f55\u5feb\u901f\u9a7e\u9a76\u7684\u6280\u5de7\uff0c\u6bd4\u5982\u6162\u8fdb\u5feb\u51fa\uff0c\u201dGran Turismo\u7684\u521b\u59cb\u4eba\u5c71\u5185\u548c\u5f18\uff08Kazunori Yamauchi\uff09\u8bf4\u3002\u201cGran Turismo Sophy\u4e0d\u662f\u8fd9\u6837\u5b66\u4e60\u7684\u3002\u6211\u8ba4\u4e3aSophy\u8fdb\u5165\u4e16\u754c\u540e\uff0c\u5173\u4e8e\u9a7e\u9a76\u7684\u6559\u79d1\u4e66\u5c06\u4e0d\u5f97\u4e0d\u6539\u53d8\u3002\u4f8b\u5982\uff0c\u5f53Sophy\u8fdb\u5165\u5f2f\u9053\u65f6\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f1a\u8f6c\u5f2f\u5e76\u5239\u8f66\u3002\u901a\u5e38\uff0c\u5f53\u4f60\u8fdb\u5165\u5f2f\u9053\u65f6\uff0c\u8d1f\u8f7d\u53ea\u5728\u4e24\u4e2a\u524d\u8f6e\u80ce\u4e0a\uff0c\u4f46Sophy\u7684\u8d1f\u8f7d\u5728\u4e09\u4e2a\u8f6e\u80ce\u4e0a\uff1a\u4e24\u4e2a\u5728\u524d\u8f6e\u80ce\u4e0ant\u548c\u4e00\u4e2a\u5728\u540e\u9762\u3002\u5b83\u5141\u8bb8\u6c7d\u8f66\u5728\u8f6c\u5f2f\u65f6\u53d1\u751f\u65ad\u88c2\uff0c\u800c\u6309\u7167\u60ef\u4f8b\uff0c\u4eba\u7c7b\u662f\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u6700\u7ec8\u4f1a\u53d1\u751f\u7684\u662f\uff0c\u5b83\u6b63\u5728\u5feb\u901f\u8fdb\u5165\uff0c\u5feb\u901f\u79bb\u5f00\u3002\"\n\u6211\u8ba4\u4e3a\uff0c\u5728Gran Turismo\u4e2d\uff0cSophy\u7684\u4e00\u4e9b\u6280\u5de7\u53ef\u80fd\u4e0d\u4f1a\u5728\u4e00\u8f86\u771f\u6b63\u7684\u6c7d\u8f66\u4e0a\u5f97\u5230\u5f88\u597d\u7684\u6548\u679c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0cSophy\u5bf9\u8fd9\u9879\u8fd0\u52a8\u7684\u7406\u89e3\u548c\u7406\u5ff5\u4e0e\u4e16\u754c\u4e0a\u6700\u597d\u7684\u7403\u5458\u4e0d\u540c\uff0c\u56e0\u6b64\uff0c\u4ed6\u8bb0\u5f55\u7684\u5708\u6570\u6bd4\u4ed6\u4eec\u5feb\u534a\u79d2\u52301.5\u79d2\u3002\u4f8b\u5982\uff0c\u5b83\u5728\u9f99\u5f84\u81ed\u540d\u662d\u8457\u7684\u201c\u6b7b\u4ea1\u5947\u5361\u201d\u4e0a\u7a7f\u9488\u7684\u65b9\u5f0f\uff0c\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u7cbe\u786e\u6027\u548c\u52c7\u6c14\u2014\u2014\u9664\u4e86\u4e16\u754c\u4e0a\u6700\u597d\u7684\u8f66\u624b\u4e4b\u5916\uff0c\u5176\u4ed6\u8f66\u624b\u90fd\u80fd\u505a\u5230\u2014\u2014\u5373\u4f7f\u662f\u4ed6\u4eec\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u59cb\u7ec8\u5982\u4e00\u5730\u6210\u529f\u3002\n\u636e\u63a8\u6d4b\uff0c\u590d\u8c03\u6570\u5b57\u5c06\u5728\u53d1\u5e03\u540e\u7684\u66f4\u65b0\u4e2d\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5c06Sophy\u5e26\u5230Gran Turismo 7\u4e0a\u2014\u2014\u4e0d\u4ec5\u4f5c\u4e3a\u7ade\u4e89\u5bf9\u624b\uff0c\u8fd8\u53ef\u80fd\u4f5c\u4e3a\u4e00\u540d\u9a7e\u9a76\u6559\u7ec3\u3002\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u8ba4\u4e3aGT7\u53ef\u4ee5\u4f7f\u7528\u5177\u6709\u5feb\u901f\u53cc\u624b\u548c\u4f53\u9762\u8d5b\u8f66\u7684\u4eba\u5de5\u667a\u80fd\uff0c\u56e0\u4e3a\u8fd9\u662fGT\u7684\u8ba1\u7b97\u673a\u63a7\u5236\u5bf9\u624b\u4ece\u672a\u62e5\u6709\u8fc7\u7684\u4e1c\u897f\u3002\u6211\u4f1a\u5f88\u9ad8\u5174\u6709\u4e00\u4e2a\u6de1\u5316\u7248\uff0c\u53ea\u662f\u666e\u901a\u7684\u5feb\u901f\uff1b\u5c06galaxy brain fast\u7248\u672c\u7559\u7ed9\u4e13\u4e1a\u4eba\u58eb\u3002", "note_en": "If you want to be really good at something, you pretty much do it as frequently as possible for as long as possible, making headway little by little until you achieve the desired result. Training an artificial intelligence model isn\u2019t terribly different, and that\u2019s basically how a team at Sony AI \u2014 the tech giant\u2019s research division \u2014 taught its agent   Sophy to be the fastest in the world at  Gran Turismo. Also much like humans, the better Sophy got at  GT, the more it was kind of a jerk about it.\n  Sophy is a collaboration between Sony \u2014 the PlayStation people \u2014 and Polyphony Digital, the developers of  Gran Turismo. ( \u201cSo-phy\u201d \u2014 get it?) Sophy is really fast, but unlike, say, the \u201cAI\u201d in  Mario Kart, it\u2019s not fast because it cheats. It plays by the same rules as human players, with the same tools. The difference is it learned to be good by running thousands of times on a network of PS4s in Sony\u2019s cloud, while being reinforced positively or negatively depending on the outcomes of its behaviors.\n Sophy\u2019s skill developed over time, as you can see in the fascinating making-of video embedded below. And I promise you, it really is interesting. If you\u2019re anything like me, your eyes glaze over and you feel a head cold coming on whenever somebody mentions the words \u201cAI\u201d or \u201cmachine learning\u201d within earshot, but Sophy\u2019s case is really intriguing because of  how it got  where it got.\n  For example, one engineer at Polyphony Digital says that when the Sony AI team first brought Sophy to the studio to race against real people, it was occasionally quick but really messy. It couldn\u2019t drive in a straight line.\n      Then it went back to the drawing board to develop core competencies, until it became faster than the world\u2019s top   FIA Gran Turismo Championship players, albeit  only on hot laps. The researchers brought Sophy back to Polyphony and pitted a team of four Sophy-controlled cars against four expert human drivers. The Sophy team took first place in two of the three, but totaled fewer points overall than the warm-bodied contingent and dropped the set.\n The trouble is that Sophy learned how to be fast, but it didn\u2019t know how to be fast without driving like a complete jackass. \u201cI think we all underestimated how hard it would be to get the sportsmanship side of it right,\u201d Peter Wurman, director and project lead at Sony AI said, \u201cand [teach Sophy] to do that without being overly aggressive or overly timid in the face of competitors.\u201d Cut to a clip of Sophy punting a pair of rivals braking  way too late into the first chicane at Dragon Trail Seaside.\n   Once Sophy   stopped doing things that made it look bad, it was almost as rapid in traffic as when it had the asphalt all to itself. Out of this newfound superhuman intuition, a few unconventional techniques it was employing became apparent.  Gran Turismo producer and Polyphony Digital chief Kazunori Yamauchi shed light on one example of Sophy\u2019s unique driving with   GTPlanet:\n \u201cI am a racer and learned techniques on how to drive fast, like slow-in-fast-out,\u201d Gran Turismo creator Kazunori Yamauchi said. \u201cGran Turismo Sophy does not learn that way. I think that after Sophy launches into the world, the textbooks about driving will have to be changed. For example, when Sophy goes into a curve it actually turns and brakes. Usually, when you go into a curve, the load is only on the two front tires, but Sophy has the load on three tires: two in the front and one in the rear as well. It allows the car to break as it is turning and is not something human beings would be able to do, conventionally. What ultimately happens is that it is driving fast-in, fast-out.\u201d\n  I\u2019d hedge that some of Sophy\u2019s tricks that work in  Gran Turismo likely wouldn\u2019t pan out as well in an actual car. Nevertheless, Sophy is playing the game with a deeper understanding and a different philosophy than the best players in the world, and recording laps anywhere from half a second to 1.5 seconds faster than them as a result of it. The way it threads the needle at Dragon Trail\u2019s infamous \u201cdeath chicane,\u201d for example, requires a level of precision and bravery all but the best drivers in the world could muster \u2014 and even they likely wouldn\u2019t pull it off as consistently.\n   Supposedly Polyphony Digital will bring Sophy to    Gran Turismo 7 in some fashion in a post-launch update \u2014 not just as a competitor but also, potentially, a driving coach. Personally, I think  GT7 could use an AI with fast hands and decent racecraft, because that\u2019s something  GT\u2019s computer-controlled adversaries have never had. I\u2019d be happy enough with a watered-down version that\u2019s just ordinary quick though; leave the galaxy-brain fast version to the professionals.", "posttime": "2022-02-13 18:15:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,trained,sophy", "title": "\u7d22\u5c3c\u628a\u4eba\u5de5\u667a\u80fd\u8bad\u7ec3\u5f97\u5982\u6b64\u64c5\u957fGran Turismo\uff0c\u4ee5\u81f3\u4e8e\u5b83\u5f00\u59cb\u50cf\u4e2a\u6df7\u86cb\u4e00\u6837\u5f00\u8f66", "title_en": "Sony Trained an AI to Be So Good at Gran Turismo It Started Driving Like a Jerk", "transed": 1, "url": "https://jalopnik.com/sony-trained-an-ai-to-be-so-good-at-gran-turismo-it-sta-1848516258", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "trained", "sophy"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072921, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Firefox\uff1a\u88abMozilla\u63d2\u4ef6\u56e2\u961f\u62d2\u7edd\u3002\u539f\u56e0\u662f\u6211\u6ca1\u6709\u63d0\u4f9b\u4e0ehsluv-0.1.0\u8d77\u6e90\u7684\u786e\u5207\u94fe\u63a5\u3002uBO\u4f7f\u7528min.js\u5e93\u6765\u5b9e\u73b0\u6697\u4e3b\u9898\uff08uBO&#39\uff1bs About page\u786e\u5b9e\u5f52\u529f\u4e8e\u5e93\u7684\u4f5c\u8005\uff09\u30021.41.2\u4e2d\u6dfb\u52a0\u4e86\u81ea\u8ff0\u6587\u4ef6\uff0c\u4ee5\u62ab\u9732\u8be5\u5e93\u7684\u786e\u5207\u6765\u6e90\u3002\n\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u4e2a\u65b0\u8bbe\u7f6e\u7528\u4e8e\u63a7\u5236uBO\u5728\u5176\u6574\u4e2a\u7528\u6237\u754c\u9762\u4e2d\u4f7f\u7528\u7684\u5f3a\u8c03\u8272\uff1a\n\u5728&#34\uff1b\u8fc7\u6ee4\u5217\u8868&#34\uff1b\u7a97\u683c\uff0c\u4ee5\u63a7\u5236uBO\u662f\u5426\u5e94\u5728\u53d6\u6d88\u6302\u8d77\u7684\u7f51\u7edc\u6d3b\u52a8\u4e4b\u524d\u7b49\u5f85\u52a0\u8f7d\u6240\u6709\u7b5b\u9009\u5668\u5217\u8868\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5728\u6d4f\u89c8\u5668\u542f\u52a8\u65f6\uff0cuBO\u4f1a\u5728\u53d6\u6d88\u6302\u8d77\u7f51\u7edc\u6d3b\u52a8\u4e4b\u524d\u7b49\u5f85\u52a0\u8f7d\u6240\u6709\u7b5b\u9009\u5217\u8868\uff0c\u4ee5\u786e\u4fdd\u5728\u542f\u52a8\u65f6\u6b63\u786e\u7b5b\u9009\u7f51\u9875\u3002\n\u65b0\u8bbe\u7f6e\u5141\u8bb8\u5728\u542f\u52a8\u65f6\u9009\u62e9\u9000\u51fa\u7f51\u7edc\u6d3b\u52a8\u6682\u505c\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5141\u8bb8\u5728\u4e0d\u7b49\u5f85\u8fc7\u6ee4\u5668\u5217\u8868\u5b8c\u5168\u52a0\u8f7d\u7684\u60c5\u51b5\u4e0b\u52a0\u8f7d\u7f51\u9875\uff0c\u5f53\u7136\u4ee3\u4ef7\u662f\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u8fc7\u6ee4\u8fd9\u4e9b\u7f51\u9875\u3002", "note_en": "Firefox: Rejected by Mozilla Add-ons Team. The reason is that I did not provide an exact link to the origin of the  hsluv-0.1.0.min.js library used by uBO to implement dark theme (uBO&#39;s  About page does credit the author of the library). A  README has been added to 1.41.2 to disclose the exact origin of the library.\n          In addition, there is a new setting to control the accent color used by uBO throughout its user interface:\n     A new setting in  &#34;Filter lists&#34; pane to control whether uBO should wait for all filter lists to be loaded before unsuspending network activity.\n  By default, at browser launch uBO waits for all filter lists to be loaded before unsuspending network activity so as to ensure web pages are properly filtered at launch.\n The new setting allows to opt out of network activity suspension at launch, i.e. allowing web pages to load without waiting for filter lists to be fully loaded, of course at the cost of potentially not filtering properly those web pages.", "posttime": "2022-02-13 18:14:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ublock,ubo", "title": "uBlock Origin 1.41", "title_en": "uBlock Origin 1.41", "transed": 1, "url": "https://github.com/gorhill/uBlock/releases/tag/1.41.0", "via": "", "real_tags": ["ublock", "ubo"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072919, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2016\u5e74\uff0c\u6211\u4eec\u63a8\u51fa\u4e86AlphaGo\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u53e4\u8001\u7684\u56f4\u68cb\u6e38\u620f\u4e2d\u51fb\u8d25\u4eba\u7c7b\u7684\u4eba\u5de5\u667a\u80fd\u9879\u76ee\u3002\u5b83\u7684\u7ee7\u4efb\u8005AlphaZero\u548cMuZero\u90fd\u4ee3\u8868\u7740\u5728\u8ffd\u6c42\u901a\u7528\u7b97\u6cd5\u65b9\u9762\u8fc8\u51fa\u4e86\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u7528\u66f4\u5c11\u7684\u9884\u5b9a\u4e49\u77e5\u8bc6\u638c\u63e1\u4e86\u66f4\u591a\u7684\u6e38\u620f\u3002\u4f8b\u5982\uff0c\u7a46\u6cfd\u7f57\u5728\u4e0d\u9700\u8981\u88ab\u544a\u77e5\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u5c31\u638c\u63e1\u4e86\u56fd\u9645\u8c61\u68cb\u3001\u56f4\u68cb\u3001Shogi\u548cAtari\u3002\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u7279\u5de5\u4e00\u76f4\u4e13\u6ce8\u4e8e\u89e3\u51b3\u6e38\u620f\u3002\u73b0\u5728\uff0c\u4e3a\u4e86\u8ffd\u6c42DeepMind\u89e3\u51b3\u667a\u80fd\u95ee\u9898\u7684\u4f7f\u547d\uff0cMuZero\u901a\u8fc7\u4f18\u5316YouTube\u4e0a\u7684\u89c6\u9891\uff0c\u5411\u638c\u63e1\u73b0\u5b9e\u4e16\u754c\u4efb\u52a1\u8fc8\u51fa\u4e86\u7b2c\u4e00\u6b65\u3002\n\u5728\u4eca\u5929\u53d1\u5e03\u7684\u4e00\u4efd\u9884\u5370\u672c\u4e2d\uff0c\u6211\u4eec\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6211\u4eec\u4e0eYouTube\u7684\u5408\u4f5c\uff0c\u4ee5\u63a2\u7d22MuZero\u6539\u5584\u89c6\u9891\u538b\u7f29\u7684\u6f5c\u529b\u3002\u5206\u6790\u5bb6\u9884\u6d4b\u6d41\u5a92\u4f53\u89c6\u9891\u5c06\u53602021\u4e92\u8054\u7f51\u6d41\u91cf\u7684\u7edd\u5927\u90e8\u5206\u3002\u968f\u7740CVID2019\u51a0\u72b6\u75c5\u6bd2\u75be\u75c5\u7684\u6d41\u884c\u548c\u672a\u6765\u4e92\u8054\u7f51\u6d41\u91cf\u7684\u589e\u957f\uff0c\u89c6\u9891\u538b\u7f29\u662f\u4e00\u4e2a\u65e5\u76ca\u91cd\u8981\u7684\u95ee\u9898\uff0c\u4e5f\u662f\u5e94\u7528\u5f3a\u5316\u5b66\u4e60\uff08RL\uff09\u6765\u6539\u5584\u6311\u6218\u6027\u9886\u57df\u7684\u6700\u65b0\u9886\u57df\u7684\u81ea\u7136\u9886\u57df\u3002\u81ea\u4eceYouTube\u7684\u4e00\u90e8\u5206\u5b9e\u65f6\u6d41\u91cf\u6295\u5165\u751f\u4ea7\u4ee5\u6765\uff0c\u6211\u4eec\u5df2\u7ecf\u5c55\u793a\u4e86\u4e00\u7ec4\u5927\u578b\u3001\u591a\u6837\u5316\u7684\u89c6\u9891\u7684\u5e73\u5747\u6bd4\u7279\u7387\u964d\u4f4e\u4e864%\u3002\n\u5927\u591a\u6570\u5728\u7ebf\u89c6\u9891\u90fd\u4f9d\u8d56\u4e00\u4e2a\u540d\u4e3a\u7f16\u89e3\u7801\u5668\u7684\u7a0b\u5e8f\u6765\u538b\u7f29\u6216\u7f16\u7801\u89c6\u9891\u6e90\uff0c\u901a\u8fc7\u4e92\u8054\u7f51\u5c06\u5176\u4f20\u8f93\u7ed9\u89c2\u770b\u8005\uff0c\u7136\u540e\u89e3\u538b\u7f29\u6216\u89e3\u7801\u64ad\u653e\u3002\u8fd9\u4e9b\u7f16\u89e3\u7801\u5668\u4e3a\u89c6\u9891\u4e2d\u7684\u6bcf\u4e00\u5e27\u505a\u51fa\u591a\u4e2a\u51b3\u7b56\u3002\u51e0\u5341\u5e74\u7684\u624b\u5de5\u5de5\u7a0b\u5df2\u7ecf\u7528\u4e8e\u4f18\u5316\u8fd9\u4e9b\u7f16\u89e3\u7801\u5668\uff0c\u8fd9\u4e9b\u7f16\u89e3\u7801\u5668\u8d1f\u8d23\u5b9e\u73b0\u73b0\u5728\u4e92\u8054\u7f51\u4e0a\u53ef\u80fd\u7684\u8bb8\u591a\u89c6\u9891\u4f53\u9a8c\uff0c\u5305\u62ec\u89c6\u9891\u70b9\u64ad\u3001\u89c6\u9891\u901a\u8bdd\u3001\u89c6\u9891\u6e38\u620f\u548c\u865a\u62df\u73b0\u5b9e\u3002\u7136\u800c\uff0c\u7531\u4e8eRL\u7279\u522b\u9002\u5408\u4e8e\u7f16\u89e3\u7801\u5668\u4e2d\u7684\u987a\u5e8f\u51b3\u7b56\u95ee\u9898\uff0c\u6211\u4eec\u6b63\u5728\u63a2\u7d22\u5b66\u4e60RL\u7684\u7b97\u6cd5\u53ef\u4ee5\u5982\u4f55\u63d0\u4f9b\u5e2e\u52a9\u3002\n\u6211\u4eec\u6700\u521d\u7684\u91cd\u70b9\u662fVP9\u7f16\u89e3\u7801\u5668\uff08\u7279\u522b\u662f\u5f00\u6e90\u7248\u672clibvpx\uff09\uff0c\u56e0\u4e3a\u5b83\u88abYouTube\u548c\u5176\u4ed6\u6d41\u5a92\u4f53\u670d\u52a1\u5e7f\u6cdb\u4f7f\u7528\u3002\u4e0e\u5176\u4ed6\u7f16\u89e3\u7801\u5668\u4e00\u6837\uff0c\u4f7f\u7528VP9\u7684\u670d\u52a1\u63d0\u4f9b\u5546\u9700\u8981\u8003\u8651\u6bd4\u7279\u7387\u2014\u2014\u53d1\u9001\u89c6\u9891\u6bcf\u5e27\u6240\u9700\u76841\u548c0\u7684\u6570\u91cf\u3002\u6bd4\u7279\u7387\u662f\u670d\u52a1\u548c\u5b58\u50a8\u89c6\u9891\u6240\u9700\u7684\u8ba1\u7b97\u91cf\u548c\u5e26\u5bbd\u7684\u4e3b\u8981\u51b3\u5b9a\u56e0\u7d20\uff0c\u5b83\u5f71\u54cd\u4ece\u52a0\u8f7d\u89c6\u9891\u6240\u9700\u7684\u65f6\u95f4\u5230\u89c6\u9891\u7684\u5206\u8fa8\u7387\u3001\u7f13\u51b2\u548c\u6570\u636e\u4f7f\u7528\u7b49\u5404\u4e2a\u65b9\u9762\u3002\n\u5728VP9\u4e2d\uff0c\u901a\u8fc7\u901f\u7387\u63a7\u5236\u6a21\u5757\u4e2d\u7684\u91cf\u5316\u53c2\u6570\uff08QP\uff09\u6700\u76f4\u63a5\u5730\u4f18\u5316\u6bd4\u7279\u7387\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5e27\uff0c\u6b64\u53c2\u6570\u786e\u5b9a\u8981\u5e94\u7528\u7684\u538b\u7f29\u7ea7\u522b\u3002\u7ed9\u5b9a\u4e00\u4e2a\u76ee\u6807\u6bd4\u7279\u7387\uff0c\u89c6\u9891\u5e27\u7684QP\u5c06\u6309\u987a\u5e8f\u51b3\u5b9a\uff0c\u4ee5\u6700\u5927\u5316\u6574\u4f53\u89c6\u9891\u8d28\u91cf\u3002\u76f4\u89c2\u5730\u8bf4\uff0c\u5e94\u8be5\u4e3a\u590d\u6742\u573a\u666f\u5206\u914d\u8f83\u9ad8\u7684\u6bd4\u7279\u7387\uff08\u8f83\u4f4e\u7684QP\uff09\uff0c\u4e3a\u9759\u6001\u573a\u666f\u5206\u914d\u8f83\u4f4e\u7684\u6bd4\u7279\u7387\uff08\u8f83\u9ad8\u7684QP\uff09\u3002QP\u9009\u62e9\u7b97\u6cd5\u89e3\u91ca\u89c6\u9891\u5e27\u7684QP\u503c\u5982\u4f55\u5f71\u54cd\u5176\u4f59\u89c6\u9891\u5e27\u7684\u6bd4\u7279\u7387\u5206\u914d\u548c\u6574\u4f53\u89c6\u9891\u8d28\u91cf\u3002RL\u5728\u89e3\u51b3\u8fd9\u6837\u4e00\u4e2a\u8fde\u7eed\u7684\u51b3\u7b56\u95ee\u9898\u65f6\u5c24\u5176\u6709\u7528\u3002\nMuZero\u901a\u8fc7\u5c06\u641c\u7d22\u80fd\u529b\u4e0e\u5b66\u4e60\u73af\u5883\u6a21\u578b\u548c\u76f8\u5e94\u8ba1\u5212\u7684\u80fd\u529b\u76f8\u7ed3\u5408\uff0c\u5728\u5404\u79cd\u4efb\u52a1\u4e2d\u5b9e\u73b0\u8d85\u4eba\u7684\u6027\u80fd\u3002\u8fd9\u5728\u5927\u578b\u7ec4\u5408\u52a8\u4f5c\u7a7a\u95f4\u4e2d\u5c24\u5176\u6709\u6548\uff0c\u4f7f\u5176\u6210\u4e3a\u89c6\u9891\u538b\u7f29\u4e2d\u901f\u7387\u63a7\u5236\u95ee\u9898\u7684\u7406\u60f3\u5019\u9009\u89e3\u51b3\u65b9\u6848\u3002\u7136\u800c\uff0c\u8981\u8ba9MuZero\u5728\u8fd9\u4e2a\u73b0\u5b9e\u4e16\u754c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u5de5\u4f5c\uff0c\u9700\u8981\u89e3\u51b3\u4e00\u7ec4\u5168\u65b0\u7684\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u4e0a\u4f20\u5230YouTube\u7b49\u5e73\u53f0\u7684\u4e00\u7ec4\u89c6\u9891\u5728\u5185\u5bb9\u548c\u8d28\u91cf\u4e0a\u5404\u4e0d\u76f8\u540c\uff0c\u4efb\u4f55\u4ee3\u7406\u90fd\u9700\u8981\u5bf9\u6240\u6709\u89c6\u9891\u8fdb\u884c\u6982\u62ec\uff0c\u5305\u62ec\u90e8\u7f72\u540e\u7684\u5168\u65b0\u89c6\u9891\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u68cb\u76d8\u6e38\u620f\u5f80\u5f80\u53ea\u6709\u4e00\u4e2a\u5df2\u77e5\u7684\u73af\u5883\u3002\u8bb8\u591a\u5176\u4ed6\u6307\u6807\u548c\u7ea6\u675f\u4f1a\u5f71\u54cd\u6700\u7ec8\u7528\u6237\u4f53\u9a8c\u548c\u6bd4\u7279\u7387\u8282\u7701\uff0c\u4f8b\u5982PSNR\uff08\u5cf0\u503c\u4fe1\u566a\u6bd4\uff09\u548c\u6bd4\u7279\u7387\u7ea6\u675f\u3002\n\u4e3a\u4e86\u5229\u7528MuZero\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u79cd\u79f0\u4e3a\u201c\u81ea\u6211\u7ade\u4e89\u201d\u7684\u673a\u5236\uff0c\u901a\u8fc7\u6bd4\u8f83\u4ee3\u7406\u7684\u5f53\u524d\u6027\u80fd\u548c\u5386\u53f2\u6027\u80fd\uff0c\u5c06\u89c6\u9891\u538b\u7f29\u7684\u590d\u6742\u76ee\u6807\u8f6c\u6362\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u8d62\u5bb6/\u8f93\u5bb6\u4fe1\u53f7\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u5c06\u4e00\u7ec4\u4e30\u5bcc\u7684\u7f16\u89e3\u7801\u5668\u8981\u6c42\u8f6c\u6362\u4e3a\u4e00\u4e2a\u7b80\u5355\u7684\u4fe1\u53f7\uff0c\u8be5\u4fe1\u53f7\u53ef\u4ee5\u7531\u6211\u4eec\u7684\u4ee3\u7406\u8fdb\u884c\u4f18\u5316\u3002\n\u901a\u8fc7\u5b66\u4e60\u89c6\u9891\u7f16\u7801\u7684\u52a8\u6001\u5e76\u786e\u5b9a\u5982\u4f55\u6700\u597d\u5730\u5206\u914d\u6bd4\u7279\uff0c\u6211\u4eec\u7684MuZero\u901f\u7387\u63a7\u5236\u5668\uff08MuZero RC\uff09\u80fd\u591f\u5728\u4e0d\u964d\u4f4e\u8d28\u91cf\u7684\u60c5\u51b5\u4e0b\u964d\u4f4e\u6bd4\u7279\u7387\u3002QP\u9009\u62e9\u53ea\u662f\u7f16\u7801\u8fc7\u7a0b\u4e2d\u4f17\u591a\u7f16\u7801\u51b3\u7b56\u4e4b\u4e00\u3002\u867d\u7136\u51e0\u5341\u5e74\u7684\u7814\u7a76\u548c\u5de5\u7a0b\u5df2\u7ecf\u4ea7\u751f\u4e86\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u4f46\u6211\u4eec\u8bbe\u60f3\u4e86\u4e00\u79cd\u80fd\u591f\u81ea\u52a8\u5b66\u4e60\u505a\u51fa\u8fd9\u4e9b\u7f16\u7801\u51b3\u7b56\u4ee5\u83b7\u5f97\u6700\u4f73\u7387\u5931\u771f\u6743\u8861\u7684\u7b97\u6cd5\u3002\n\u9664\u4e86\u89c6\u9891\u538b\u7f29\uff0c\u5728\u7814\u7a76\u73af\u5883\u4e4b\u5916\u5e94\u7528MuZero\u7684\u7b2c\u4e00\u6b65\u662f\u6211\u4eec\u7684RL\u4ee3\u7406\u5982\u4f55\u89e3\u51b3\u73b0\u5b9e\u95ee\u9898\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u901a\u8fc7\u521b\u5efa\u5177\u6709\u4e00\u7cfb\u5217\u65b0\u529f\u80fd\u7684\u4ee3\u7406\u6765\u6539\u8fdb\u8de8\u9886\u57df\u7684\u4ea7\u54c1\uff0c\u6211\u4eec\u53ef\u4ee5\u5e2e\u52a9\u5404\u79cd\u8ba1\u7b97\u673a\u7cfb\u7edf\u53d8\u5f97\u66f4\u5feb\u3001\u66f4\u4e0d\u5bc6\u96c6\u3001\u66f4\u81ea\u52a8\u5316\u3002\u6211\u4eec\u7684\u957f\u671f\u613f\u666f\u662f\u5f00\u53d1\u4e00\u79cd\u5355\u4e00\u7b97\u6cd5\uff0c\u80fd\u591f\u5728\u4e0d\u540c\u9886\u57df\u4f18\u5316\u6570\u5343\u4e2a\u771f\u5b9e\u4e16\u754c\u7684\u7cfb\u7edf\u3002\n\u4e0e\u64b0\u7a3f\u4eba\u5408\u4f5c\u5b8c\u6210\u7684\u5de5\u4f5c\uff1a\u987e\u627f\u6770\u3001\u5b89\u4e1c\u00b7\u70ed\u5c14\u8bfa\u592b\u3001\u963f\u83ab\u5c14\u00b7\u66fc\u8fbe\u6069\u3001\u739b\u4e3d\u8d1d\u601d\u00b7\u52b3\u8d6b\u3001\u738b\u5999\u68ee\u3001\u859b\u82b1\u62c9\u3001\u5c1a\u6587\u8fea\u3001\u5f6d\u5fb7\u745e\u514b\u3001\u96f7\u5185\u00b7\u514b\u52b3\u65af\u3001\u6c5f\u6e05\u6c49\u3001\u9648\u6210\u3001\u97e9\u666f\u5b81\u3001\u9648\u5b89\u742a\u3001\u4e39\u5c3c\u5c14\u00b7J\u00b7\u66fc\u79d1\u7ef4\u8328\u3001\u6731\u5229\u5b89\u00b7\u65bd\u91cc\u7279\u7ef4\u6cfd\u3001\u6258\u9a6c\u65af\u00b7\u4f11\u4f2f\u7279\u3001\u5965\u5229\u5965\u00b7\u7ef4\u4e9a\u5c14\u65af\u3001\u6770\u514b\u900a\u00b7\u5e03\u7f57\u8c22\u3001\u8482\u83ab\u897f\u00b7\u66fc\u3001\u7f57\u4f2f\u7279\u00b7\u8463\u3001\uff0c\u53f2\u8482\u592b\u00b7\u52a0\u592b\u5c3c", "note_en": "In 2016, we introduced  AlphaGo, the first artificial intelligence program to defeat humans at the ancient game of Go. Its successors,  AlphaZero and then  MuZero, each represented a significant step forward in the pursuit of general-purpose algorithms, mastering a greater number of games with even less predefined knowledge. MuZero, for example, mastered Chess, Go, Shogi, and Atari without needing to be told the rules. But so far these agents have focused on solving games. Now, in pursuit of DeepMind\u2019s mission to solve intelligence, MuZero has taken a first step towards mastering a real-world task by optimising video on YouTube.\n  In a  preprint published today, we detail our collaboration with YouTube to explore the potential for MuZero to improve video compression.  Analysts predicted that streaming video will have accounted for the vast majority of internet traffic in 2021. With video surging during the COVID-19 pandemic and the total amount of internet traffic expected to grow in the future, video compression is an increasingly important problem \u2014 and a natural area to apply Reinforcement Learning (RL) to improve upon the state of the art in a challenging domain. Since launching to production on a portion of YouTube\u2019s live traffic, we\u2019ve demonstrated an average 4% bitrate reduction across a large, diverse set of videos.\n  Most online videos rely on a program called a codec to compress or encode the video at its source, transmit it over the internet to the viewer, and then decompress or decode it for playback. These codecs make multiple decisions for each frame in a video. Decades of hand engineering have gone into optimising these codecs, which are responsible for many of the video experiences now possible on the internet, including video on demand, video calls, video games, and virtual reality. However, because RL is particularly well-suited to sequential decision-making problems like those in codecs, we\u2019re exploring how an RL-learned algorithm can help.\n  Our initial focus is on the VP9 codec (specifically the open source version  libvpx), since it\u2019s widely used by YouTube and other streaming services. As with other codecs, service providers using VP9 need to think about bitrate \u2014 the number of ones and zeros required to send each frame of a video. Bitrate is a major determinant in how much compute and bandwidth is required to serve and store videos, affecting everything from how long a video takes to load to its resolution, buffering, and data usage.\n      In VP9, bitrate is optimised most directly through the Quantisation Parameter (QP) in the rate control module. For each frame, this parameter determines the level of compression to apply. Given a target bitrate, QPs for video frames are decided sequentially to maximize overall video quality. Intuitively, higher bitrates (lower QP) should be allocated for complex scenes and lower bitrates (higher QP) should be allocated for static scenes. The QP selection algorithm reasons how the QP value of a video frame affects the bitrate allocation of the rest of the video frames and the overall video quality. RL is especially helpful in solving such a sequential decision-making problem.\n      MuZero achieves superhuman performance across various tasks by combining the power of search with its ability to learn a model of the environment and plan accordingly. This works especially well in large, combinatorial action spaces, making it an ideal candidate solution for the problem of rate control in video compression. However, to get MuZero to work on this real-world application requires solving a whole new set of problems. For instance, the set of videos uploaded to platforms like YouTube varies in content and quality, and any agent needs to generalise across videos, including completely new videos after deployment. By comparison, board games tend to have a single known environment. Many other metrics and constraints affect the final user experience and bitrate savings, such as the PSNR (Peak Signal-to-Noise Ratio) and bitrate constraint.\n  To address these challenges with MuZero, we create a mechanism called self-competition, which converts the complex objective of video compression into a simple WIN/LOSS signal by comparing the agent\u2019s current performance against its historical performance. This allows us to convert a rich set of codec requirements into a simple signal that can be optimised by our agent.\n            By learning the dynamics of video encoding and determining how best to allocate bits, our MuZero Rate-Controller (MuZero-RC) is able to reduce bitrate without quality degradation. QP selection is just one of numerous encoding decisions in the encoding process. While decades of research and engineering have resulted in efficient algorithms, we envision a single algorithm that can automatically learn to make these encoding decisions to obtain the optimal rate-distortion tradeoff.\n  Beyond video compression, this first step in applying MuZero beyond research environments serves as an example of how our RL agents can solve real-world problems. By creating agents equipped with a range of new abilities to improve products across domains, we can help various computer systems become faster, less intensive, and more automated. Our long-term vision is to develop a single algorithm capable of optimising thousands of real-world systems across a variety of domains.\n       Work done as a collaboration with contributors: Chenjie Gu, Anton Zhernov, Amol Mandhane, Maribeth Rauh, Miaosen Wang, Flora Xue, Wendy Shang, Derek Pang, Rene Claus, Ching-Han Chiang, Cheng Chen, Jingning Han, Angie Chen, Daniel J. Mankowitz, Julian Schrittwieser, Thomas Hubert, Oriol Vinyals, Jackson Broshear, Timothy Mann, Robert Tung, Steve Gaffney", "posttime": "2022-02-13 18:09:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,step,\u89c6\u9891", "title": "MuZero\u7814\u7a76\u73b0\u5b9e\u4e16\u754c\u7684\u7b2c\u4e00\u6b65", "title_en": "MuZero\u2019s first step from research into the real world", "transed": 1, "url": "https://deepmind.com/blog/article/MuZeros-first-step-from-research-into-the-real-world", "via": "", "real_tags": ["\u7814\u7a76", "step", "\u89c6\u9891"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072917, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u868a\u5b50\u8ffd\u8e2a\u6c14\u5473\uff0c\u5b9a\u4f4d\u5bbf\u4e3b\uff0c\u5e76\u5728\u89c6\u89c9\u4e0a\u5bfb\u627e\u914d\u5076\u3002\u98df\u7269\u8d44\u6e90\uff08\u5982\u82b1\u6735\u6216\u6e29\u8840\u5bbf\u4e3b\uff09\u7684\u989c\u8272\u53ef\u7531\u53ef\u89c1\u5149\u8c31\u7684\u957f\u6ce2\uff08\u4eba\u7c7b\u4e3a\u7eff\u8272\u5230\u7ea2\u8272\uff09\u63a7\u5236\uff0c\u53ef\u80fd\u5bf9\u7269\u4f53\u8bc6\u522b\u548c\u5b9a\u4f4d\u5f88\u91cd\u8981\u3002\u7136\u800c\uff0c\u4eba\u4eec\u5bf9\u5438\u5f15\u868a\u5b50\u7684\u989c\u8272\u4ee5\u53ca\u6c14\u5473\u5982\u4f55\u5f71\u54cd\u868a\u5b50\u7684\u89c6\u89c9\u641c\u7d22\u884c\u4e3a\u77e5\u4e4b\u751a\u5c11\u3002\u4e00\u9879\u7531\u534e\u76db\u987f\u5927\u5b66\u9886\u5bfc\u7684\u65b0\u7814\u7a76\u8868\u660e\uff0c\u5728\u68c0\u6d4b\u5230\u547c\u51fa\u7684\u6c14\u4f53\u540e\uff0c\u9ec4\u70ed\u75c5\u868a\u5b50\uff08E\u868aEaseTi\uff09\u4f1a\u98de\u5411\u7279\u5b9a\u7684\u989c\u8272\uff0c\u5305\u62ec\u7ea2\u8272\u3001\u6a59\u8272\u3001\u9ed1\u8272\u548c\u9752\u8272\uff0c\u4f46\u5b83\u4eec\u5ffd\u7565\u4e86\u5176\u4ed6\u989c\u8272\uff0c\u5982\u7eff\u8272\u3001\u7d2b\u8272\u3001\u84dd\u8272\u548c\u767d\u8272\u3002\n\u534e\u76db\u987f\u5927\u5b66\u7684\u751f\u7269\u7cfb\u7814\u7a76\u5458Jeffrey Riffell\u6559\u6388\u8bf4\uff1a\u201c\u868a\u5b50\u4f3c\u4e4e\u7528\u6c14\u5473\u6765\u8fa8\u522b\u9644\u8fd1\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u4e3b\u4eba\u54ac\u4e1c\u897f\u3002\u201d\n\u201c\u5f53\u5b83\u4eec\u95fb\u5230\u7279\u5b9a\u7684\u5316\u5408\u7269\u65f6\uff0c\u6bd4\u5982\u6211\u4eec\u547c\u5438\u4e2d\u7684\u4e8c\u6c27\u5316\u78b3\uff0c\u8fd9\u79cd\u6c14\u5473\u4f1a\u523a\u6fc0\u773c\u775b\u626b\u63cf\u4e0e\u6f5c\u5728\u5bbf\u4e3b\u76f8\u5173\u7684\u7279\u5b9a\u989c\u8272\u548c\u5176\u4ed6\u89c6\u89c9\u6a21\u5f0f\uff0c\u5e76\u671d\u5b83\u4eec\u9760\u8fd1\u3002\u201d\n\u5728\u65b0\u7684\u5b9e\u9a8c\u4e2d\uff0c\u91cc\u5f17\u5c14\u6559\u6388\u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u8ffd\u8e2a\u4e86\u96cc\u6027\u57c3\u53ca\u4f0a\u868a\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u89c6\u89c9\u548c\u6c14\u5473\u63d0\u793a\u4e0b\u7684\u884c\u4e3a\u3002\n\u548c\u6240\u6709\u868a\u5b50\u4e00\u6837\uff0c\u53ea\u6709\u96cc\u6027\u868a\u5b50\u624d\u4f1a\u5438\u8840\uff0c\u57c3\u53ca\u4f0a\u868a\u53ee\u54ac\u4f1a\u4f20\u64ad\u767b\u9769\u70ed\u3001\u9ec4\u70ed\u75c5\u3001\u57fa\u5b54\u80af\u96c5\u548c\u5be8\u5361\u3002\n\u7814\u7a76\u4eba\u5458\u5728\u5fae\u578b\u8bd5\u9a8c\u5ba4\u4e2d\u8ffd\u8e2a\u868a\u5b50\u4e2a\u4f53\uff0c\u5411\u5176\u4e2d\u55b7\u6d12\u7279\u5b9a\u6c14\u5473\uff0c\u5e76\u5448\u73b0\u4e0d\u540c\u7c7b\u578b\u7684\u89c6\u89c9\u6a21\u5f0f\uff0c\u5982\u5f69\u8272\u6591\u70b9\u6216\u7f8e\u5473\u7684\u4eba\u624b\u3002\n\u5728\u6ca1\u6709\u4efb\u4f55\u6c14\u5473\u523a\u6fc0\u7684\u60c5\u51b5\u4e0b\uff0c\u868a\u5b50\u57fa\u672c\u4e0a\u5ffd\u7565\u4e86\u623f\u95f4\u5e95\u90e8\u7684\u4e00\u4e2a\u70b9\uff0c\u4e0d\u7ba1\u989c\u8272\u5982\u4f55\u3002\n\u5c06\u4e8c\u6c27\u5316\u78b3\u55b7\u5165\u5ba4\u5185\u540e\uff0c\u868a\u5b50\u7ee7\u7eed\u5ffd\u7565\u7eff\u8272\u3001\u84dd\u8272\u6216\u7d2b\u8272\u7684\u5706\u70b9\u3002\u4f46\u5982\u679c\u5706\u70b9\u662f\u7ea2\u8272\u3001\u6a59\u8272\u3001\u9ed1\u8272\u6216\u9752\u8272\uff0c\u868a\u5b50\u5c31\u4f1a\u671d\u5b83\u98de\u53bb\u3002\n\u4eba\u7c7b\u95fb\u4e0d\u5230\u4e8c\u6c27\u5316\u78b3\uff0c\u8fd9\u662f\u6211\u4eec\u548c\u5176\u4ed6\u52a8\u7269\u6bcf\u6b21\u547c\u51fa\u7684\u6c14\u4f53\u3002\u868a\u5b50\u53ef\u4ee5\u3002\n\u8fc7\u53bb\u7684\u7814\u7a76\u8868\u660e\uff0c\u95fb\u5230\u4e8c\u6c27\u5316\u78b3\u4f1a\u63d0\u9ad8\u96cc\u868a\u5b50\u7684\u6d3b\u52a8\u6c34\u5e73\u2014\u2014\u641c\u7d22\u5b83\u4eec\u5468\u56f4\u7684\u7a7a\u95f4\uff0c\u53ef\u80fd\u662f\u5bfb\u627e\u5bbf\u4e3b\u3002\n\u5f69\u8272\u6591\u70b9\u5b9e\u9a8c\u663e\u793a\uff0c\u5728\u95fb\u5230\u4e8c\u6c27\u5316\u78b3\u540e\uff0c\u8fd9\u4e9b\u868a\u5b50\u7684\u773c\u775b\u66f4\u559c\u6b22\u89c6\u89c9\u5149\u8c31\u4e2d\u7684\u67d0\u4e9b\u6ce2\u957f\u3002\u8fd9\u4e0e\u4eba\u7c7b\u95fb\u5230\u597d\u4e1c\u897f\u65f6\u53ef\u80fd\u53d1\u751f\u7684\u60c5\u51b5\u7c7b\u4f3c\u3002\n\u201c\u60f3\u8c61\u4f60\u5728\u4eba\u884c\u9053\u4e0a\uff0c\u95fb\u5230\u4e86\u9985\u997c\u76ae\u548c\u8089\u6842\u7684\u5473\u9053\uff0c\u201d\u91cc\u5f17\u5c14\u6559\u6388\u8bf4\u3002\n\u201c\u8fd9\u53ef\u80fd\u662f\u9644\u8fd1\u6709\u9762\u5305\u5e97\u7684\u8ff9\u8c61\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f00\u59cb\u56db\u5904\u5bfb\u627e\u3002\u201d\n\u201c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5f00\u59cb\u4e86\u89e3\u868a\u5b50\u5728\u95fb\u5230\u81ea\u5df1\u7248\u672c\u7684\u9762\u5305\u5e97\u540e\u5bfb\u627e\u7684\u89c6\u89c9\u5143\u7d20\u3002\u201d\n\u5927\u591a\u6570\u4eba\u90fd\u6709\u771f\u6b63\u7684\u8272\u89c9\uff1a\u6211\u4eec\u770b\u5230\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u662f\u4e0d\u540c\u7684\u989c\u8272\uff1a\u4f8b\u5982\uff0c650\u7eb3\u7c73\u7684\u5149\u663e\u793a\u4e3a\u7ea2\u8272\uff0c\u800c450\u7eb3\u7c73\u7684\u5149\u663e\u793a\u4e3a\u84dd\u8272\u3002\n\u79d1\u5b66\u5bb6\u4eec\u4e0d\u77e5\u9053\u868a\u5b50\u611f\u77e5\u989c\u8272\u7684\u65b9\u5f0f\u662f\u5426\u4e0e\u6211\u4eec\u7684\u773c\u775b\u76f8\u540c\u3002\n\u4f46\u868a\u5b50\u95fb\u5230\u4e8c\u6c27\u5316\u78b3\u540e\u559c\u6b22\u7684\u5927\u591a\u6570\u989c\u8272\u2014\u2014\u6a59\u8272\u3001\u7ea2\u8272\u548c\u9ed1\u8272\u2014\u2014\u5bf9\u5e94\u4e8e\u66f4\u957f\u6ce2\u957f\u7684\u5149\u3002\n\u65e0\u8bba\u80a4\u8272\u5982\u4f55\uff0c\u4eba\u7c7b\u76ae\u80a4\u4e5f\u4f1a\u53d1\u51fa\u7ea2\u6a59\u8303\u56f4\u5185\u7684\u957f\u6ce2\u4fe1\u53f7\u3002\n\u5f53\u7814\u7a76\u4eba\u5458\u7528\u4eba\u7c7b\u76ae\u80a4\u8272\u7d20\u6c89\u7740\u5361\u7247\uff08\u6216\u7814\u7a76\u4eba\u5458\u7684\u5f92\u624b\uff09\u91cd\u590d\u5ba4\u5185\u5b9e\u9a8c\u65f6\uff0c\u53ea\u6709\u5728\u5411\u5ba4\u5185\u55b7\u6d12\u4e8c\u6c27\u5316\u78b3\u540e\uff0c\u868a\u5b50\u624d\u4f1a\u518d\u6b21\u98de\u5411\u89c6\u89c9\u523a\u6fc0\u7269\u3002\n\u5982\u679c\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u6ee4\u5149\u7247\u53bb\u9664\u957f\u6ce2\u4fe1\u53f7\uff0c\u6216\u8005\u8ba9\u7814\u7a76\u4eba\u5458\u6234\u4e0a\u7eff\u8272\u624b\u5957\uff0c\u90a3\u4e48\u4e8c\u6c27\u5316\u78b3\u5f15\u53d1\u7684\u868a\u5b50\u5c31\u4e0d\u4f1a\u518d\u5411\u523a\u6fc0\u7269\u98de\u53bb\u3002\n\u57fa\u56e0\u51b3\u5b9a\u4e86\u8fd9\u4e9b\u96cc\u6027\u52a8\u7269\u5bf9\u7ea2\u6a59\u8272\u7684\u504f\u597d\u3002\u5728\u6d4b\u8bd5\u7bb1\u4e2d\uff0c\u643a\u5e26\u4e86\u80fd\u95fb\u5230\u4e8c\u6c27\u5316\u78b3\u7684\u57fa\u56e0\u7a81\u53d8\u526f\u672c\u7684\u868a\u5b50\u4e0d\u518d\u8868\u73b0\u51fa\u989c\u8272\u504f\u597d\u3002\n\u53e6\u4e00\u79cd\u53d8\u5f02\u868a\u5b50\u5728\u6709\u4e8c\u6c27\u5316\u78b3\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u66f4\u52a0\u8272\u76f2\uff0c\u5b83\u4eec\u7684\u89c6\u529b\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u56e0\u6b64\u65e0\u6cd5\u518d\u770b\u5230\u957f\u6ce2\u7684\u5149\u3002\n\u201c\u8fd9\u4e9b\u5b9e\u9a8c\u5c55\u793a\u4e86\u868a\u5b50\u5bfb\u627e\u5bbf\u4e3b\u7684\u7b2c\u4e00\u6b65\uff0c\u201d\u91cc\u5f17\u5c14\u6559\u6388\u8bf4\u3002\nD.\u963f\u9686\u7d22\u00b7\u5723\u963f\u5c14\u8d1d\u6258\u7b49\u4eba\uff0c2022\u5e74\u3002\u4eba\u7c7b\u76ae\u80a4\u548c\u868a\u5b50\u53ef\u89c1\u5149\u8c31\u7684\u89c6\u89c9\u504f\u597d\u7684\u55c5\u89c9\u95e8\u63a7\u3002\u7eb3\u7279\u516c\u793e13555\uff1b\u5185\u653f\u90e8\uff1a10.1038/s41467-022-28195-x", "note_en": "Mosquitoes track odors, locate hosts, and find mates visually. The color of a food resource, such as a flower or warm-blooded host, can be dominated by long wavelengths of the visible light spectrum (green to red for humans) and is likely important for object recognition and localization. However, little is known about the hues that attract mosquitoes or how odor affects mosquito visual search behaviors. A new University of Washington-led study shows that after detecting a telltale gas that we exhale,  yellow fever mosquitoes ( Aedes aegypti) fly toward specific colors, including red, orange, black and cyan, but they ignore other colors, such as green, purple, blue and white.\n  \u201cMosquitoes appear to use odors to help them distinguish what is nearby, like a host to bite,\u201d said  Professor Jeffrey Riffell, a researcher in the Department of Biology at the University of Washington.\n \u201cWhen they smell specific compounds, like carbon dioxide from our breath, that scent stimulates the eyes to scan for specific colors and other visual patterns, which are associated with a potential host, and head to them.\u201d\n In the new experiments, Professor Riffell and his colleagues tracked behavior of female Aedes aegypti, when presented with different types of visual and scent cues.\n Like all mosquito species, only females drink blood, and bites from Aedes aegypti can transmit dengue, yellow fever, chikungunya and Zika.\n The researchers tracked individual mosquitoes in miniature test chambers, into which they sprayed specific odors and presented different types of visual patterns \u2014 such as a colored dot or a tasty human hand.\n Without any odor stimulus, mosquitoes largely ignored a dot at the bottom of the chamber, regardless of color.\n After a spritz of carbon dioxide into the chamber, mosquitos continued to ignore the dot if it was green, blue or purple in color. But if the dot was red, orange, black or cyan, mosquitoes would fly toward it.\n Humans can\u2019t smell carbon dioxide, which is the gas we and other animals exhale with each breath. Mosquitoes can.\n Past research showed that smelling carbon dioxide boosts female mosquitoes\u2019 activity level \u2014 searching the space around them, presumably for a host.\n The colored-dot experiments revealed that after smelling carbon dioxide, these mosquitoes\u2019 eyes prefer certain wavelengths in the visual spectrum. It\u2019s similar to what might happen when humans smell something good.\n \u201cImagine you\u2019re on a sidewalk and you smell pie crust and cinnamon,\u201d Professor Riffell said.\n \u201cThat\u2019s probably a sign that there\u2019s a bakery nearby, and you might start looking around for it.\u201d\n \u201cHere, we started to learn what visual elements that mosquitoes are looking for after smelling their own version of a bakery.\u201d\n Most humans have true color vision: We see different wavelengths of light as distinct colors: 650 nm shows up as red, while 450 nm wavelengths look blue, for example.\n The scientists do not know whether mosquitoes perceive colors the same way that our eyes do.\n But most of the colors the mosquitoes prefer after smelling carbon dioxide \u2014 orange, red and black \u2014 correspond to longer wavelengths of light.\n Human skin, regardless of pigmentation, also gives off a long-wavelength signal in the red-orange range.\n When the study authors repeated the chamber experiments with human skintone pigmentation cards \u2014 or a researcher\u2019s bare hand \u2014 mosquitoes again flew toward the visual stimulus only after carbon dioxide was sprayed into the chamber.\n If the researchers used filters to remove long-wavelength signals, or had the researcher wear a green-colored glove, then carbon dioxide-primed mosquitoes no longer flew toward the stimulus.\n Genes determine the preference of these females for red-orange colors. Mosquitoes with a mutant copy of a gene needed to smell carbon dioxide no longer showed a color preference in the test chamber.\n Another strain of mutant mosquitoes, with a change related to vision so they could no longer see long wavelengths of light, were more color-blind in the presence of carbon dioxide.\n \u201cThese experiments lay out the first steps mosquitoes use to find hosts,\u201d Professor Riffell said.\n   D. Alonso San Alberto  et al. 2022. The olfactory gating of visual preferences to human skin and visible spectra in mosquitoes.  Nat Commun 13, 555; doi: 10.1038/s41467-022-28195-x", "posttime": "2022-02-13 18:02:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u663e\u793a,attracted,\u868a\u5b50", "title": "\u6700\u65b0\u7814\u7a76\u663e\u793a\uff0c\u868a\u5b50\u4f1a\u88ab\u7279\u5b9a\u7684\u989c\u8272\u6240\u5438\u5f15", "title_en": "Mosquitoes Are Attracted to Specific Colors, New Study Shows", "transed": 1, "url": "http://www.sci-news.com/biology/mosquito-visible-spectra-10525.html", "via": "", "real_tags": ["\u663e\u793a", "attracted", "\u868a\u5b50"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072916, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u4e0b\u53485\u70b917\u5206\uff0c\u6b63\u5f53\u6211\u7ed3\u675f\u4e00\u5929\u7684\u5de5\u4f5c\u65f6\uff0c\u6211\u7684\u7ecf\u7406\u6253\u7535\u8bdd\u7ed9\u6211\u8bf4\uff1a\n&lt\uff1b\u7ecf\u7406&gt\uff1b\uff1a\u55e8\uff0c\u6770\u91cc\u7c73-\u6211\u4eec\u6709\u4e00\u4e2a&lt\uff1b\u5176\u4ed6\u56e2\u961f&gt\uff1b\u7968\u8bc1-\u5347\u7ea7\u81f3&lt\uff1b\u9886\u5bfc\u8005&gt&\u4e66\u4fe1\u7535\u62a5\uff1b\u9886\u5bfc\u8005&gt\uff1b\uff0c\u7b49\u7b49&lt\uff1b\u6821\u957f&gt\uff1b\u4e5f\u5728\u5c1d\u8bd5\u63d0\u4f9b\u5efa\u8bae\u3002\u5982\u679c\u9700\u8981\u8bca\u65ad\uff0c\u60a8\u4eca\u665a\u6709\u7a7a\u5417&\u4e66\u4fe1\u7535\u62a5\uff1b\u540c\u4e8b&gt\uff1b\u6b63\u5728\u901a\u8bdd\u4e2d\n\u6ca1\u6709\u4e49\u52a1\uff1b\u53ea\u662f\u60f3\u770b\u770b\u6211\u6709\u4ec0\u4e48\u7a7a\u3002\u6211\u5f88\u5feb\u5c31\u60f3\u597d\u4e86\u2014\u2014\u4eca\u665a\u6211\u6ca1\u6709\u4efb\u4f55\u8ba1\u5212\uff0c\u65e5\u7a0b\u4e0a\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u7684\u5b89\u6392\u3002\u4e3a\u4ec0\u4e48\u4e0d\u5462\uff1f\u5982\u679c\u6211\u80fd\u5e2e\u5fd9\u7684\u8bdd\uff0c\u961f\u91cc\u7684\u5176\u4ed6\u4eba\u5c31\u4e0d\u9700\u8981\u4e86\uff0c\u4eca\u665a\u6211\u4e5f\u6ca1\u6709\u66f4\u597d\u7684\u4e8b\u60c5\u8981\u505a\u3002\n\u6211\u4e0e\u540c\u4e8b\u540c\u6b65\uff0c\u7136\u540e\u52a0\u5165\u4e86\u524d\u7ebf\u6280\u672f\u56e2\u961f\u6b63\u5728\u8fdb\u884c\u6545\u969c\u6392\u9664\u7684\u6865\u63a5\u7ebf\u3002\n\u4e0a\u5468\uff0c\u6211\u548c\u51e0\u4e2a\u548c\u6211\u4e00\u8d77\u5de5\u4f5c\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u804a\u5929\uff0c\u6211\u8bb0\u5f97\u6211\u5206\u4eab\u4e86\u6211\u7684\u89c2\u70b9\uff0c\u6700\u6709\u8da3\u7684\u95ee\u9898\u4e0d\u662f\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u5d29\u6e83\u3002\u603b\u7684\u6765\u8bf4\uff0c\u5d29\u6e83\uff08\u901a\u5e38\u751f\u6210\u6838\u5fc3\u8f6c\u50a8\uff09\u5f88\u5bb9\u6613\u8c03\u8bd5\u3002\u771f\u6b63\u9669\u6076\u7684\u95ee\u9898\u66f4\u50cf\u662f\u6a21\u7cca\u7684\u8910\u5316\u3002\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u89e6\u53d1\u4f60\u7684\u5065\u5eb7\u76d1\u6d4b\u6216\u8b66\u62a5\u3002\u6240\u6709\u7684\u5408\u6210\u7528\u6237\u4e8b\u52a1\u90fd\u53ef\u4ee5\u5de5\u4f5c\u3002\u65e5\u5fd7\u4e2d\u6ca1\u6709\u9519\u8bef\u3002\u4f46\u5e94\u7528\u7a0b\u5e8f\u4e2d\u901a\u5e38\u5728\u51e0\u79d2\u949f\u5185\u5b8c\u6210\u7684\u4e00\u4e2a\u7279\u5b9a\u529f\u80fd\u6216\u6a21\u5757\u7a81\u7136\u5f00\u59cb\u9700\u898110\u5206\u949f\u624d\u80fd\u5b8c\u6210\u3002\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u5355\u4e2aSQL\u67e5\u8be2\u7a81\u7136\u5f00\u59cb\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u6765\u5b8c\u6210\uff0c\u8fd9\u4ee4\u4eba\u8d39\u89e3\u3002\u6bcf\u5f53\u60a8\u81ea\u5df1\u8fd0\u884cSQL\u65f6\uff0c\u5b83\u90fd\u4f1a\u5728\u51e0\u79d2\u949f\u5185\u5b8c\u6210\u3002\u7136\u800c\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u6570\u636e\u5e93\u8fde\u63a5\u5806\u79ef\u5982\u5c71\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4e0d\u76f8\u5173\u7684\u90e8\u5206\u5f00\u59cb\u5ef6\u8fdf\u83b7\u53d6\u65b0\u7684\u8fde\u63a5\u2026\u2026\u6ca1\u6709\u4ec0\u4e48\u4e8b\u60c5\u4f1a\u4e00\u76f4\u5931\u8d25\uff0c\u4f46\u6700\u7ec8\u7528\u6237\u4ecd\u7136\u65e0\u6cd5\u4f7f\u7528\u67d0\u4e9b\u4e1c\u897f\u3002\u4e00\u4e9b\u5de5\u4f5c\u961f\u5217\u4e2d\u5f00\u59cb\u51fa\u73b0\u4e0d\u7965\u7684\u79ef\u538b\uff0c\u5982\u679c\u4e0d\u5c3d\u5feb\u5904\u7406\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u66f4\u5927\u7684\u95ee\u9898\u3002\u4f60\u770b\u5230\u8d27\u8fd0\u706b\u8f66\u6b63\u671d\u4f60\u5f00\u6765\u2026\u3002\u6781\u5176\u7f13\u6162\u4e14\u4e0d\u53ef\u907f\u514d\u3002\n\u8fd9\u548c\u6211\u4eca\u5929\u9047\u5230\u7684\u60c5\u51b5\u5f88\u76f8\u4f3c\u3002\u6211\u9047\u5230\u7684\u6280\u672f\u56e2\u961f\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\u7684\u4e00\u90e8\u5206\u4e2d\u4f7f\u7528PostgreSQL\u4f5c\u4e3a\u6570\u636e\u5b58\u50a8\u3002\u4ed6\u4eec\u5728\u4e16\u754c\u5404\u5730\u90e8\u7f72\u4e86\u8bb8\u591a\u6b64\u5e94\u7528\u7a0b\u5e8f\u3002\u4eca\u5929\u4e0a\u5348\uff0c\u5728\u4e00\u4e2a\u5730\u7406\u4f4d\u7f6e\uff0c\u4ed6\u4eec\u5bf9PostgreSQL\u6570\u636e\u5e93\u8fdb\u884c\u4e86\u4e00\u6b21\u91cd\u5927\u7684\u7248\u672c\u5347\u7ea7\uff0c\u5347\u7ea7\u5230\u4e86\u7248\u672c11\u3002\u5347\u7ea7\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5f00\u59cb\u51fa\u73b0\u95ee\u9898\u3002\n\u5f53\u6211\u52a0\u5165\u7535\u8bdd\u65f6\uff0c\u8c03\u67e5\u5c0f\u7ec4\u5df2\u7ecf\u6df1\u5165\u8c03\u67e5\u4e86\u51e0\u4e2a\u5c0f\u65f6\u3002\u4ed6\u4eec\u77e5\u9053\u5e94\u7528\u7a0b\u5e8f\u7684\u54ea\u4e2a\u90e8\u5206\u53d7\u5230\u4e86\u5f71\u54cd\u3002\u4ed6\u4eec\u77e5\u9053\u8fd9\u4e2a\u6a21\u5757\u6267\u884c\u7684\u4e00\u4e2a\u7279\u5b9aSQL\u6709\u95ee\u9898\u3002\u6709\u4e00\u4e2a\u201c\u8282\u6d41\u9600\u201d\u53ef\u4ee5\u7528\u6765\u51cf\u6162\u6216\u6682\u505c\u8fd9\u4e2a\u7279\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u6a21\u5757\uff0c\u6240\u4ee5\u4ed6\u4eec\u6682\u65f6\u5173\u95ed\u8be5\u6a21\u5757\u4ee5\u9632\u6b62\u5bf9\u6570\u636e\u5e93\u9020\u6210\u4e0d\u5229\u5f71\u54cd\u2014\u2014\u9664\u975e\u6211\u4eec\u6b63\u5728\u79ef\u6781\u6392\u9664\u6545\u969c\u3002\u5f53\u6a21\u5757\u88ab\u542f\u7528\u65f6\uff0cPostgreSQL\u89c6\u56fepg_stat_\u6d3b\u52a8\u663e\u793a\u6570\u767e\u4e2a\u8fde\u63a5\u5c06\u540c\u65f6\u8fd0\u884c\u6b64SQL\u3002\u89c6\u56fe\u4e2d\u6ca1\u6709\u660e\u663e\u7684\u7b49\u5f85\u4e8b\u4ef6\uff0c\u8fd9\u610f\u5473\u7740SQL\u5728CPU\u4e0a\u5904\u4e8e\u6d3b\u52a8\u72b6\u6001\u3002\u7cfb\u7edfCPU\u5229\u7528\u7387\u98d9\u5347\u81f3100%\u5de6\u53f3\uff0c\u56e0\u6b64\u5f88\u660e\u663e\uff0c\u8fd9\u4e0d\u662f\u672a\u5b89\u88c5\u4eea\u5668\u7684CPU\u7b49\u5f85\u95ee\u9898\u3002\n\u67e5\u8be2\u672c\u8eab\u5b9e\u9645\u4e0a\u76f8\u5f53\u7b80\u5355\u2014\u2014\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u4e00\u4e2a\u5305\u542b1\u52301000\u4e2a\u5143\u7d20\u7684\u52a8\u6001in\u5217\u8868\u3002\u5f88\u5e38\u89c1\u7684\u6a21\u5f0f\u3002\u8fd9\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u9632\u6b62\u8ba1\u7b97\u673a\u548c\u4eba\u7c7b\u8f7b\u677e\u5730\u5c06\u76f8\u5173\u67e5\u8be2\u5206\u7ec4\u5728\u4e00\u8d77\u3002\u4f8b\u5982\uff0cpg_stat_statements\u89c6\u56fe\u5c06\u6709\u51e0\u767e\u4e2a\u4e0d\u540c\u7684\u6761\u76ee\uff0c\u6bcf\u4e2a\u6761\u76ee\u90fd\u6709\u4e0d\u540c\u6570\u91cf\u7684in-list\u5143\u7d20\u3002\u4f46\u8be5\u67e5\u8be2\u53ea\u5bf9\u4e00\u4e2a\u8868\u8fdb\u884c\u64cd\u4f5c\uff0c\u9664\u4e86in\u5217\u8868\uff08\u4e00\u4e2a&#39\uff1b&lt\uff1b=&#39\uff1b\u8fd0\u7b97\u7b26\uff09\u4e4b\u5916\uff0c\u53ea\u6709\u4e00\u4e2a\u8fc7\u6ee4\u5668\u3002\n\u4ece\uff08&#39\uff1bfirst1&#39\uff1b1\uff09\uff0c\uff08&#39\uff1bsecond1&#39\uff1b2\uff09\uff0c\u2026\uff09\u4e2d\u7684\uff08\u6587\u672c#\u52171\uff0c\u6570\u5b57#\u52173\uff09\u8868\u683c\u4e2d\u9009\u62e9*\u65f6\u95f4\u6233_col1&lt\uff1b=\uff1a1.\n\u5c31\u8fd9\u4e9b\uff01\u6613\u4e8e\u7406\u89e3\u7684\u6839\u636epg_\u5173\u7cfb_size\uff08\uff09\uff0c\u8be5\u8868\u4e3a845GB\u3002\u5b58\u5728\u4e24\u4e2a\u4e0e\u5f53\u524d\u67e5\u8be2\u76f8\u5173\u7684\u7d22\u5f15\uff1a\u4e00\u4e2a\u662f229GB\u7684btree\u201cindex1\u201d\uff08text_col1\uff0ctext_col2\uff09\uff0c\u53e6\u4e00\u4e2a\u662f206GB\u7684btree\u201cindex2\u201d\uff08numeric_col1\uff0cnumeric_col2\uff0cnumeric_col3\uff0ctimestamp_col1\uff09\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e8c\u4e2a\u7d22\u5f15\u4e2d\u7684\u6700\u540e\u4e24\u5217\u5728\u67e5\u8be2\u4e2d\u88ab\u5f15\u7528\u3002\n\u6700\u660e\u663e\u7684\u7406\u8bba\u662f\u89c4\u5212\u8005\u63d0\u51fa\u4e86\u4e00\u4e2a\u7cdf\u7cd5\u7684\u6267\u884c\u8ba1\u5212\u3002\u4efb\u4f55\u5173\u7cfb\u6570\u636e\u5e93\u7684\u4e3b\u8981\u7248\u672c\u5347\u7ea7\u90fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\u4e3b\u8981\u7248\u672c\u662f\u5f53\u4f60\u5bf9\u89c4\u5212\u5668\u3001\u4f18\u5316\u5668\u3001\u6210\u672c\u8ba1\u7b97\u7b97\u6cd5\u7b49\u8fdb\u884c\u6240\u6709\u8c03\u6574\u548c\u6539\u8fdb\u65f6\u3002\u4f60\u7684\u5927\u591a\u6570\u67e5\u8be2\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\uff0c\u8981\u4e48\u53d8\u5f97\u66f4\u5feb\u3002\u4f46\u5f88\u81ea\u7136\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e24\u6b21\u5012\u9000\u3002\u53ea\u9700\u8981\u4e00\u4e2a\u4eba\u5c31\u80fd\u6bc1\u4e86\u4f60\u7684\u5de5\u4f5c\u65e5\u2026\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5f53\u6211\u4eec\u4ecepsql\u6267\u884c\u67e5\u8be2\u65f6\uff0c\u5b83\u5728\u51e0\u6beb\u79d2\u5185\u8fd4\u56de\u2014\u2014\u8fd9\u662f\u6211\u4eec\u9884\u671f\u7684\u826f\u597d\u6027\u80fd\u3002\u6211\u4eec\u8fd8\u8fde\u63a5\u5230\u53e6\u4e00\u4e2a\u5730\u7406\u4f4d\u7f6e\u4e0d\u540c\u7684\u90e8\u7f72\uff08\u4ecd\u7136\u4f7f\u7528\u8f83\u65e7\u7684PostgreSQL\u4e3b\u7248\u672c\uff09\uff0c\u5e76\u9a8c\u8bc1\u4e86\u76f8\u540c\u7684\u6267\u884c\u65f6\u95f4\u548c\u6267\u884c\u8ba1\u5212\u3002\u5f53\u6211\u52a0\u5165\u8fd9\u4e2a\u8c03\u7528\u65f6\uff0c\u6709\u4eba\u63d0\u51fa\u8fd9\u6837\u4e00\u79cd\u7406\u8bba\uff1a\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u51c6\u5907\u597d\u7684\u8bed\u53e5\uff0c\u53ef\u80fd\u5728\u5347\u7ea7\u4e4b\u540e\uff0c\u5e94\u7528\u7a0b\u5e8f\u5728\u66f4\u65b0\u7684\u7edf\u8ba1\u6570\u636e\u51c6\u5907\u5c31\u7eea\u4e4b\u524d\uff0c\u5df2\u7ecf\u5c06\u51c6\u5907\u597d\u7684\u8bed\u53e5\u4e0e\u7cdf\u7cd5\u7684\u8ba1\u5212\u8fde\u63a5\u5e76\u7f13\u5b58\u8d77\u6765\u3002\n\u65c1\u6ce8\uff1a\u6211\u76f8\u4fe1\u672c\u6587\u7684\u6240\u6709\u4f18\u79c0\u8bfb\u8005\u90fd\u77e5\u9053\uff0c\u5728PostgreSQL\u4e2d\uff0c\u5bf9\u8c61\u7edf\u8ba1\u4fe1\u606f\u4f1a\u968f\u7740\u4e3b\u8981\u7248\u672c\u7684\u5347\u7ea7\u800c\u91cd\u7f6e\uff01\u542f\u52a8\u65b0\u7684\u4e3b\u8981\u7248\u672c\u540e\uff0c\u60a8\u9700\u8981\u8fd0\u884cANALYZE\u6765\u66f4\u65b0\u7edf\u8ba1\u4fe1\u606f\uff01\n\u56e0\u6b64\uff0c\u8be5\u56e2\u961f\u6b63\u51c6\u5907\u4f7f\u7528\u6700\u8fd1\u5347\u7ea7\u7684\u6570\u636e\u5e93\u5728\u5730\u7406\u4f4d\u7f6e\u4e0a\u542f\u52a8\u5e94\u7528\u670d\u52a1\u5668\u7ec4\u7684\u6eda\u52a8\u91cd\u542f\u3002\u4ed6\u4eec\u9a8c\u8bc1\u4e86\u6570\u636e\u5e93\u5177\u6709\u6700\u65b0\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5e76\u5e0c\u671b\u786e\u4fdd\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5668\u80fd\u591f\u4ee5\u6700\u4f73\u7684\u6267\u884c\u8ba1\u5212\u83b7\u5f97\u65b0\u7684\u6570\u636e\u5e93\u8fde\u63a5\u3002\n\u6211\u4ed4\u7ec6\u542c\u7740\uff0c\u4f46\u6211\u610f\u8bc6\u5230\u6ca1\u6709\u592a\u591a\u8bc1\u636e\u8868\u660e\u8fd9\u4f1a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff08\u5c3d\u7ba1\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u731c\u6d4b\uff09\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4e00\u76f4\u5728\u9605\u8bfb\u7f5a\u5355\u8bb0\u5f55\uff0c\u5e76\u4ea4\u53c9\u68c0\u67e5\u56f4\u7ed5\u6d4b\u8bd5\u6267\u884c\u8ba1\u5212\u6240\u505a\u7684\u5de5\u4f5c\u3002\n\u4e0e\u5176\u4ed6\u4e00\u4e9b\u5173\u7cfb\u6570\u636e\u5e93\u4e0d\u540c\uff0cPostgreSQL\u5bf9\u8fd0\u884c\u65f6\u4f7f\u7528\u7684\u6267\u884c\u8ba1\u5212\u6ca1\u6709\u591a\u5c11\u53ef\u89c1\u6027\u3002\u6709\u4e00\u4e2aauto_explain\u53ef\u4ee5\u8bb0\u5f55SQL\u7684\u5b9e\u9645\u8ba1\u5212\uff0c\u8be5\u8ba1\u5212\u5728\u8fd0\u884c\u65f6\u8d85\u8fc7\u67d0\u4e2a\u9608\u503c\u65f6\u6210\u529f\u5b8c\u6210\u3002pg_stat_activity\u89c6\u56fe\u5728PostgreSQL 14\u4e2d\u6dfb\u52a0\u4e86\u67e5\u8be2id\uff0c\u6211\u5e0c\u671b\u6709\u4e00\u5929\u4f1a\u6709\u4e00\u4e2a\u8ba1\u5212id\u2014\u2014\u4f46\u8fd9\u9879\u5de5\u4f5c\u8fd8\u6ca1\u6709\u5b8c\u6210\u3002\u5728pg_stat_\u6d3b\u52a8\u548cEXPLAIN\u8f93\u51fa\u4e2d\u90fd\u6709\u4e00\u4e2a\u8ba1\u5212\u6563\u5217\uff0c\u56e0\u6b64\u5f88\u96be\u77e5\u9053\u5e94\u7528\u670d\u52a1\u5668\u5f53\u524d\u6267\u884c\u7684\u67e5\u8be2\u662f\u5426\u4e0e\u60a8\u521a\u624d\u5728psql\u4e2d\u8fd0\u884c\u7684\u67e5\u8be2\u5177\u6709\u76f8\u540c\u7684\u8ba1\u5212\u2014\u2014\u5373\u4f7f\u662f\u7531\u4e8e\u5bb9\u91cf\u539f\u56e0\u800c\u65e0\u6cd5\u8bb0\u5f55\u7684\u4f4e\u5ef6\u8fdf\u3001\u9ad8\u9891\u7387\u67e5\u8be2\u3002\u5f53\u7136\uff0c\u52a8\u6001\u5217\u8868\u53ef\u80fd\u4ecd\u7136\u4f1a\u5bf9\u8fd9\u4e00\u70b9\u4ea7\u751f\u5f71\u54cd\uff0c\u4f46\u6211\u4e0d\u77e5\u9053\u6709\u54ea\u79cd\u5173\u7cfb\u6570\u636e\u5e93\u6709\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\uff08\u7f16\u8f91\uff1a2022\u5e742\u670810\u65e5\uff1aJoshua\u7559\u4e0b\u4e86\u4e00\u6761\u8bc4\u8bba\uff0c\u63d0\u9192\u6211Cybertec\u548c\u94c3\u6728\u5e7f\u4fe1\u7684pg_show_\u6269\u5c55\u8ba1\u5212\u3002\u5728\u6211\u7b2c\u4e00\u6b21\u5199\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u6ca1\u6709\u63d0\u5230\u8fd9\u4e00\u70b9\u662f\u4e00\u4e2a\u758f\u5ffd\uff0c\u6211\u5f88\u9ad8\u5174Joshua\u63d0\u5230\u4e86\u5b83\u3002\u6211\u4ee5\u524d\u770b\u8fc7\u8fd9\u4e2a\u6269\u5c55\uff0c\u4f46\u8fd8\u6ca1\u6709\u673a\u4f1a\u5b89\u88c5\u5e76\u8bd5\u7528\u3002\u4f60\u53ef\u4ee5\u786e\u5b9a\u5b83\u4e0d\u662fw\u4f18\u5148\u8003\u8651\u4ed4\u7ec6\u89c2\u5bdf\uff01\uff09\n\u6211\u77e5\u9053\u7684\u4e0b\u4e00\u4e2a\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528pg_stat_\u8bed\u53e5\u4f5c\u4e3a\u67d0\u79cd\u4ee3\u7406\u3002\u6211\u8bf7\u56e2\u961f\u4e2d\u7684\u4e00\u4f4dDBA\u8fd0\u884c\u4ee5\u4e0b\u67e5\u8be2\uff1a\nsubstr | calls | total | time | mean | time | stddev | u time | blks | rows------------------------------------------------------+----------------------------+---------------------------------\u9009\u62e9*\u4ece\u8868\u683cwhe | 57 | 21904.791707 | 384.294591350877 1249.553887634356 | 2444\u30c324\u9009\u62e9*\u4ece\u8868\u683cwhe 1243 12420875.1330768;|u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9*\u4ece\u4ece\u8868\u9009\u62e9\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u4ece\u4ece\u4ece\u4ece\u8868\u9009\u62e9\u4ece\u8868\u9009\u62e9\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u8868\u9009\u62e9\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece\u4ece124; 12767.352093 |120.446717858491 | 293.357452072648 | 1756 | 24\u4ece\u8868\u683cwhe | 51 | 12442.307684 | 243.96681733333 | 530.104152533396 | 2077 | 22\u4e2d\u9009\u62e9*\u3002\u3002\u3002\u89e3\u91ca\u5206\u6790\u8be6\u7ec6\u5185\u5bb9| 1 | 23.031251 | 23.031251 | 0 | 241 | 0\u4ece\u8868\u683cwhe | 2 | 11.987225 | 5.9936125 | 0.7968815 | 46 | 2\u4ece\u8868\u683cwhe | 1 | 6.697005 | 6.697005 1240 1246 1246 1246 1246 1240 1246 1246 1246 1246 1246 1246 1246 1246 1246 1246 1240\uff09\u4e2d\u9009\u62e91240\n\u6211\u8ba9\u4ed6\u4eec\u5728\u53e6\u4e00\u4e2a\u4ecd\u5728\u8fd0\u884c\u8f83\u65e7\u7684PostgreSQL\u4e3b\u8981\u7248\u672c\u7684\u5730\u7406\u4f4d\u7f6e\u4e0a\u8fd0\u884c\u76f8\u540c\u7684\u67e5\u8be2\u3002\u5f53\u7136\uff0c\u5176\u4ed6\u5730\u7406\u4f4d\u7f6e\u663e\u793a\u7684\u8c03\u7528\u8ba1\u6570\u8981\u9ad8\u5f97\u591a\uff0c\u56e0\u4e3a\u6b64\u67e5\u8be2\u663e\u793a\u81ea\u4e0a\u6b21\u6570\u636e\u5e93\u91cd\u65b0\u542f\u52a8\u4ee5\u6765\u7684\u7d2f\u8ba1\u603b\u6570\uff0c\u5f53\u7136\uff0c\u95ee\u9898\u6570\u636e\u5e93\u662f\u5728\u5347\u7ea7\u8fc7\u7a0b\u4e2d\u91cd\u65b0\u542f\u52a8\u7684\u3002\n\u6211\u6ce8\u610f\u5230\u7684\u7b2c\u4e00\u4ef6\u4e8b\u662f\uff0c\u8fd9\u4e24\u4e2a\u5730\u533a\u4e4b\u95f4\u7684\u884c\u4e0e\u5757\u7684\u6bd4\u7387\u5b8c\u5168\u4e0d\u540c\u2014\u2014\u826f\u597d\u7684\u5730\u7406\u4f4d\u7f6e\u6709\u66f4\u591a\u7684\u884c\u3002\u8fd9\u662f\u5426\u610f\u5473\u7740\u4f7f\u7528\u4e86\u4e0d\u540c\u7684\u6267\u884c\u8ba1\u5212\uff1f\u7136\u540e\u6211\u610f\u8bc6\u5230\u6211\u5728\u89e3\u91ca\u6211\u81ea\u5df1\u7684\u95ee\u9898\u65f6\u72af\u4e86\u4e00\u4e2a\u9519\u8bef\uff1b\u6211\u62a5\u544a\u7684\u662f\u201c\u6bcf\u6b21\u547c\u53eb\u7684\u5757\u6570\u201d\uff0c\u4f46\u6211\u62a5\u544a\u7684\u662f\u201c\u6240\u6709\u547c\u53eb\u7684\u603b\u884c\u6570\u201d\u3002\u5728\u6211\u5f04\u660e\u767d\u4e86\u8fd9\u4e00\u70b9\u4e4b\u540e\uff0c\u6211\u610f\u8bc6\u5230\uff0c\u597d\u7684\u5730\u7406\u4f4d\u7f6e\u548c\u574f\u7684\u5730\u7406\u4f4d\u7f6e\u4e4b\u95f4\u7684\u6570\u5b57\u5b9e\u9645\u4e0a\u4f3c\u4e4e\u6ca1\u6709\u663e\u8457\u7684\u5dee\u5f02\u3002\u5f53\u6211\u4eec\u5728psql\u63d0\u793a\u7b26\u4e0b\u8fd0\u884c\u95ee\u9898\u67e5\u8be2\u65f6\uff0c\u6267\u884c\u8ba1\u5212\u548c\u6267\u884c\u65f6\u95f4\u4e5f\u662f\u5982\u6b64\u2014\u2014\u5728\u597d\u7684\u548c\u574f\u7684\u5730\u7406\u4f4d\u7f6e\u4e0a\uff0c\u5b83\u4eec\u90fd\u662f\u76f8\u540c\u7684\u201c\u597d\u201d\u503c\u3002\n\u8868\u4e0a\u7684\u4f4d\u56fe\u5806\u626b\u63cf\uff08\u6210\u672c=3791.09..80234213.68\u884c=6713\u5bbd\u5ea6=273\uff09\uff08\u5b9e\u9645\u65f6\u95f4=74.911..74.953\u884c=0\u5faa\u73af=1\uff09\u8f93\u51fa\uff1a&lt\uff1b\u6240\u6709\u680f\u76ee&gt\uff1b\u91cd\u65b0\u68c0\u67e5\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09\u6216\u3002\u3002\u3002\u6216\u8005\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e8c\u4e2a1&#39\uff1b\uff1a\uff1atext\uff09\u8fc7\u6ee4\u5668\uff1a\uff08\uff08timestamp_col1&lt\uff1b=&#39\uff1b2022-02-09 00:00:00&#39\uff1b\uff1a\uff1a\u4e0d\u5e26\u65f6\u533a\u7684\u65f6\u95f4\u6233\uff09\u548c\uff08\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09\u548c\u3002\u3002\u3002\u548c\uff08numeric_col3=&#39\uff1b2&#39\uff1b\uff1a\uff1anumeric\uff09\uff09-&gt\uff1bBitmapOr\uff08\u6210\u672c=3791.09..3791.09\u884c=212565\u5bbd\u5ea6=0\uff09\uff08\u5b9e\u9645\u65f6\u95f4=74.905..74.946\u884c=0\u5faa\u73af=1\uff09&gt\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..38.65\u884c=2261\u5bbd\u5ea6=0\uff09\uff08\u5b9e\u9645\u65f6\u95f4=0.026..0.026\u884c=0\u5faa\u73af=1\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09->\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..38.65\u884c=2261\u5bbd\u5ea6=0\uff09\uff08\u5b9e\u9645\u65f6\u95f4=0.446..0.446\u884c=0\u5faa\u73af=1\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e8c\u4e2a1&#39\uff1b\uff1a\uff1a\u6587\u672c\uff09->\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..38.65\u884c=2261\u5bbd\u5ea6=0\uff09\uff08\u5b9e\u9645\u65f6\u95f4=0.447..0.447\u884c=0\u5faa\u73af=1\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e09\u6761\uff1a\uff08\u6587\u672c\uff09\n\u5728\u542c\u7535\u8bdd\u65f6\uff0c\u6211\u542c\u5230\u6709\u4eba\u63d0\u5230\uff0c\u7531\u4e8e\u8bed\u53e5\u8d85\u65f6\u8bbe\u7f6e\u4e3a2\u5206\u949f\u5de6\u53f3\uff0c\u67e5\u8be2\u8d85\u65f6\u3002\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u5373pg_stat_\u8bed\u53e5\u6570\u636e\u662f\u5426\u53ea\u662f\u56e0\u4e3a\u51fa\u9519\u800c\u6ca1\u6709\u53cd\u6620\u957f\u671f\u8fd0\u884c\u7684\u67e5\u8be2\u3002\u6211\u8ba4\u4e3a\u4e8b\u5b9e\u5c31\u662f\u8fd9\u6837\u3002\u4f46\u8fd9\u5f15\u51fa\u4e86\u53e6\u4e00\u4e2a\u60f3\u6cd5\u2014\u2014\u6211\u95ee\u6709\u6743\u8bbf\u95eePostgreSQL\u65e5\u5fd7\u6587\u4ef6\u7684\u4eba\u662f\u5426\u53ef\u4ee5\u8ba1\u7b97\u4ed6\u4eec\u770b\u5230\u8d85\u65f6\u9519\u8bef\u7684\u901f\u7387\u3002\uff08\u9519\u8bef\u662fUSE\u65b9\u6cd5\u548cRED\u65b9\u6cd5\u7684\u5e38\u89c1\u201cE\u201d\uff01\u9700\u8981\u5bc6\u5207\u5173\u6ce8\uff01\uff09\u8fd9\u8fdb\u4e00\u6b65\u8bc1\u5b9e\u4e86\u95ee\u9898\u662f\u4ece\u5347\u7ea7\u5f00\u59cb\u7684\uff0c\u5728\u5176\u4ed6\u5730\u533a\u4e0d\u5b58\u5728\uff0c\u4f46\u5728\u5176\u4ed6\u5f88\u591a\u5730\u533a\u4e0d\u5b58\u5728\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5f00\u59cb\u611f\u5230\u6709\u70b9\u62c5\u5fc3\u3002\u5982\u679c\u4e0d\u662f\u8ba1\u5212\u53d8\u66f4\uff0c\u90a3\u4f1a\u662f\u4ec0\u4e48\uff1f\u786c\u4ef6\u95ee\u9898\uff0c\u6bd4\u5982CPU\u8fd0\u884c\u9891\u7387\u4e0d\u6b63\u786e\uff1f\uff08\u4ee5\u524d\u89c1\u8fc7\u3002\uff09Linux\u5185\u6838\u6df1\u5904\u6709\u4e00\u4e9b\u96be\u4ee5\u53d1\u73b0\u7684bug\uff1f\uff08\u6211\u4e5f\u770b\u8fc7\uff0c\u6211\u4e0d\u559c\u6b22\u3002\uff09\u6211\u7684\u961f\u53cb\u5df2\u7ecf\u505a\u4e86\u4e00\u6b21\u5feb\u901f\u800c\u7cdf\u7cd5\u7684\u8868\u6f14\uff0c\u6293\u5230\u4e86\u4e00\u5f20\u622a\u56fe\uff0c\u4f46\u6211\u51b3\u5b9a\u52a0\u5927\u8d4c\u6ce8\u3002\u6211\u4eec\u6709\u81ea\u5df1\u7684\u811a\u672c\uff0c\u975e\u5e38\u7c7b\u4f3c\u4e8e\u5854\u5185\u5c14\u00b7\u6ce2\u5fb7\u7684run_xcpu\u3002\u5728\u4ed6\u7684\u623f\u95f4\u91cc\u3002\u5de5\u5177\u6536\u85cf\u3002\u5b83\u4f7f\u7528perf\u5bf9\u8fd0\u884c\u8fdb\u7a0b\u4e2d\u7684\u5806\u6808\u6267\u884c\u4f4e\u9891\u3001\u4fdd\u5b88\u7684\u91c7\u6837\u3002\u5b83\u5728\u540e\u53f0\u6301\u7eed\u8fd0\u884c\uff0c\u5c06\u6570\u636e\u4fdd\u7559\u4e00\u5468\uff0c\u5e76\u53ef\u4ee5\u5b89\u5168\u8fd0\u884c\u6570\u6708\u3002\u5373\u4f7f\u662f\u5728\u4e00\u4e2a\u6709\u51e0\u5341\u4e2a\u5185\u6838\u7684\u8d1f\u8f7d\u5f88\u91cd\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u5b83\u4e5f\u4e0d\u4f1a\u7528\u592a\u591a\u7684\u6587\u4ef6\u6216\u592a\u591a\u7684\u5b57\u8282\u6765\u538b\u5012\u7cfb\u7edf\u3002\u5c31\u50cf\u5854\u5185\u5c14\u7684\u5267\u672c\u4e00\u6837\uff0c\u5b83\u7684\u8bbe\u8ba1\u76ee\u7684\u662f\u5728\u751f\u4ea7\u4e2d\u5b89\u5168\u4f7f\u7528\u3002\u6211\u4eec\u6273\u52a8\u5f00\u5173\uff0c\u5f00\u59cb\u5206\u6790CPU\uff0c\u6570\u636e\u5e93\u7684CPU\u4e3a100%\u3002\n\u5927\u7ea610\u5206\u949f\u540e\uff0c\u6211\u751f\u6210\u4e86\u4e00\u4e2a\u706b\u7130\u56fe\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u770b\u5230\u7684\uff1a\n\u5f53\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u574f\u7cfb\u7edf\u4e0a\u7684CPU\u914d\u7f6e\u6587\u4ef6\u65f6\uff0c\u6211\u8ba4\u4e3a\u5b83\u4e0d\u4f1a\u6709\u591a\u5927\u5e2e\u52a9\u3002\u8c03\u7528\u5806\u6808\u57fa\u672c\u4e0a\u7b26\u5408\u6211\u4eec\u5728\u4e0a\u9762\u770b\u5230\u7684\u6267\u884c\u8ba1\u5212\uff0c\u5728\u6211\u4eec\u7684\u6d4b\u8bd5\u4e2d\u8868\u73b0\u826f\u597d\uff01Executor_Run\u6b63\u5728\u8c03\u7528ExecScan\uff08\u5bf9\u5e94\u4e8e\u201c\u4f4d\u56fe\u5806\u626b\u63cf\u201d\uff09\uff0c\u540e\u8005\u53c8\u5728\u8c03\u7528BitmapIndexScan\u3002\u6211\u77e5\u9053\u7ecf\u5178\u7684\u7d22\u5f15\u626b\u63cf\u548cseqscan\u901f\u5ea6\u5f88\u6162\uff08\u7528session GUCs\u6d4b\u8bd5\uff09\uff0c\u4f46\u8fd9\u4e24\u79cd\u60c5\u51b5\u5728\u8fd9\u91cc\u90fd\u6ca1\u6709\u53d1\u751f\u3002\u5b83\u663e\u7136\u5728\u8fdb\u884c\u4f4d\u56fe\u626b\u63cf\u3002\u8fd9\u53ea\u662f\u8bc1\u5b9e\u4e86\u6211\u7684\u62c5\u5fe7\uff0c\u5373\u6211\u4eec\u7684\u95ee\u9898\u4e0d\u662f\u4e00\u4e2a\u574f\u8ba1\u5212\u3002\n\u4e3a\u4e86\u8fdb\u884c\u6bd4\u8f83\uff0c\u6211\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u811a\u672c\uff0c\u5e76\u5728good geography\u4e2d\u4e3a\u8f83\u65e7\u7684PostgreSQL\u6570\u636e\u5e93\u751f\u6210\u4e86\u706b\u7130\u56fe\u3002\u6211\u7a81\u51fa\u663e\u793a\u4e86ExecScan\u51fd\u6570\u7684\u51fa\u73b0\u3002\u4e0b\u9762\u662f\u5b83\u7684\u6837\u5b50\uff1a\n\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\u6837\u672c\u6570\u3002\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u662f\u4ee5\u76f8\u540c\u7684\u9891\u7387\u91c7\u96c6\u6837\u672c\uff0c\u6301\u7eed\u65f6\u95f4\u5927\u81f4\u76f8\u540c\uff0810\u5206\u949f\uff09\u2014\u2014\u56e0\u6b64\u6837\u672c\u8ba1\u6570\u7684\u5dee\u5f02\u5b9e\u9645\u4e0a\u53cd\u6620\u4e86CPU\u65f6\u95f4\u7684\u5dee\u5f02\u3002\u6211\u4eec\u5728\u5065\u5eb7\u7cfb\u7edf\u4e0a\u770b\u5230\u7684\u4e00\u5207\u53ef\u80fd\u4ecd\u7136\u5b58\u5728\u4e8e\u4e0d\u5065\u5eb7\u7cfb\u7edf\u7684\u67d0\u4e2a\u5730\u65b9\u2026\u3002\u4f46\u5b83\u592a\u5c0f\u4e86\uff0c\u4f60\u770b\u4e0d\u89c1\uff0c\u56e0\u4e3a\u5b83\u53ea\u662f\u51e0\u4e2a\u6570\u636e\u70b9\uff0c\u800c\u4e00\u4e2a\u7cdf\u7cd5\u7684\u67e5\u8be2\u4ea7\u751f\u768440\u4e07\u4e2a\u6570\u636e\u70b9\u6b63\u5728\u6d88\u8017CPU\u3002\n\u73b0\u5728\u6211\u5fc3\u60f3\uff0c\u8fd9\u4e2a\u95ee\u9898\u67e5\u8be2\u4e00\u5b9a\u5728\u5065\u5eb7\u7cfb\u7edf\u7684\u67d0\u4e2a\u5730\u65b9\u8fd0\u884c\u3002\u8c03\u7528\u5806\u6808\u53ef\u80fd\u4e0e\u8f83\u65e7\u7684PostgreSQL\u4e3b\u7248\u672c\u6709\u5fae\u5c0f\u7684\u5dee\u5f02\uff0c\u4f46\u6211\u6562\u6253\u8d4c\u5b83\u5c06\u5927\u81f4\u76f8\u540c\u3002\u6211\u4ece\u8fd9\u4e9bExecScan\u8282\u70b9\u5f00\u59cb\uff0c\u67e5\u770b\u4e86\u5806\u6808\u4e2d\u663e\u793a\u6700\u4f4e\u7684\u8282\u70b9\u3002\u6ca1\u8fc7\u591a\u4e45\u6211\u5c31\u627e\u5230\u4e86\u5b83\u2014\u2014\u8fd9\u662f\u552f\u4e00\u4e00\u4e2a\u4e4b\u524d\u6ca1\u6709\u67d0\u79cd\u6392\u5e8f\u6216\u5faa\u73af\u7684\uff1a\n\u5f53\u6211\u653e\u5927\u8fd9\u4e2a\u8282\u70b9\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u4e9b\u6211\u4e0d\u592a\u7406\u89e3\u7684\u4e1c\u897f\u3002\u5b83\u770b\u8d77\u6765\u51e0\u4e4e\u548c\u6211\u4e0d\u5065\u5eb7\u7684\u7cfb\u7edf\u4e00\u6a21\u4e00\u6837\u2014\u2014\u6211\u5f88\u81ea\u4fe1\u6211\u7684\u95ee\u9898\u5c31\u5728\u90a3\u91cc\u2014\u2014\u4f46\u8fd8\u6709\u66f4\u591a\u3002\u6211\u770b\u5230\u4e86\u51fd\u6570MultiExecBitmapAnd\uff0c\u4f46\u53ea\u670923\u4e2a\u6837\u672c\u3002\u8fd8\u6709\u8fd9\u4e2a\u51fd\u6570MultiExecBitmapOr\u548c63\u4e2a\u6837\u672c\u3002\u7c7b\u4f3c\u7684\u6267\u884c\u8ba1\u5212\u975e\u5e38\u63a5\u8fd1\u5bfc\u81f4\u95ee\u9898\u7684\u6267\u884c\u8ba1\u5212\u3002\n\u73b0\u5728\u6211\u662fOak Table Network\u7684\u5fe0\u5b9e\u7c89\u4e1d\uff0c\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u4ed6\u4eec\u56fa\u6267\u5730\u5021\u5bfc\u91c7\u7528\u57fa\u4e8e\u8bc1\u636e\u3001\u79d1\u5b66\u548c\u7cfb\u7edf\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u6570\u636e\u5e93\u95ee\u9898\u3002\uff08\u4f60\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u591a\u4e48\u666e\u904d\uff0c\u201c\u627e\u51fa\u8c01\u542c\u8d77\u6765\u6700\u806a\u660e/\u58f0\u97f3\u6700\u5927\uff0c\u8ba9\u4ed6\u4eec\u731c\u6d4b\uff0c\u76f4\u5230\u95ee\u9898\u6d88\u5931\u2026\u2026\u201d\u4f46\u5766\u7387\u5730\u8bf4\uff0c\u867d\u7136\u6211\u4f1a\u4ece\u8fd9\u79cd\u6709\u6761\u4e0d\u7d0a\u7684\u65b9\u6cd5\u4e2d\u6324\u51fa\u6700\u540e\u4e00\u6ef4\uff0c\u5bf9\u4e8e\u68d8\u624b\u7684\u95ee\u9898\uff0c\u8bca\u65ad\u6570\u636e\u901a\u5e38\u662f\u4e0d\u53ef\u7528\u7684\uff0c\u5728\u89e3\u51b3\u65b9\u6848\u660e\u786e\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u4ece\u4e00\u4e2a\u6b65\u9aa4\u5230\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u8fdb\u884c\u6f14\u7ece\u3002\u8fd9\u4f3c\u4e4e\u662f\u5176\u4e2d\u4e00\u79cd\u60c5\u51b5\u3002\u6211\u6458\u4e0b\u8033\u673a\uff0c\u79bb\u5f00\u684c\u5b50\u3002\u8d70\u4e86\u4e00\u4f1a\u513f\uff0c\u8bd5\u56fe\u8df3\u51fa\u6846\u6846\u601d\u8003\u3002\n\u6211\u5728\u60f3\uff0c\u201c\u6211\u60f3\u77e5\u9053\u8fd9\u4e9b\u662f\u5426\u76f8\u5173\uff1f\u201d\u6211\u5728bad flame\u56fe\u4e0a\u641c\u7d22\u4e86MultiExecBitmapOr\u2014\u2014\u77a7\uff0c\u5b83\u5c31\u5728\u90a3\u91cc\u2014\u2014\u53ea\u6709366\u4e2a\u6837\u672c\uff0c\u574fSQL\u65c1\u8fb9\u6709\u4e00\u6761\u770b\u4e0d\u89c1\u7684\u5c0f\u7ec6\u6761\u3002\u5927\u7ea6\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u91cd\u65b0\u8bbf\u95ee\u4e86good SQL\u8bed\u53e5\u7684\u6267\u884c\u8ba1\u5212\uff0c\u6211\u6ce8\u610f\u5230\u4e86\u4e00\u4ef6\u91cd\u8981\u7684\u4e8b\u60c5\uff1a\u6709\u4e00\u4e2a\u540d\u4e3a\u201cBitmapOr\u201d\u7684\u8ba1\u5212\u8282\u70b9\u3002\u5f53\u6211\u67e5\u770b\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u7684FlameGraph\u65f6\uff0c\u8fd9\u4e2a\u60f3\u6cd5\u53d8\u5f97\u8d8a\u6765\u8d8a\u5bb9\u6613\u7406\u89e3\uff1a\u201c\u6211\u60f3\u77e5\u9053\u8fd9\u4e2a\u597d\u7684SQL\u8ba1\u5212\u662f\u5426\u771f\u7684\u4e0e\u6211\u5728\u5065\u5eb7\u7cfb\u7edf\u4e0a\u770b\u5230\u7684\u5806\u6808\u5bf9\u5e94\uff1f\u8fd9\u4e2a\u597d\u7684SQL\u8ba1\u5212\u662f\u5426\u4e0d\u662f\u6740\u6b7bCPU\u7684\u8ba1\u5212\uff1f\u201d\n\u662f\u65f6\u5019\u5b66\u4e60\u4e00\u4e9b\u5173\u4e8ePostgreSQL\u7684\u65b0\u77e5\u8bc6\u4e86\uff01\u201cBitmapOr\u201d\u548c\u201cBitmapAnd\u201d\u7684\u786e\u5207\u533a\u522b\u662f\u4ec0\u4e48\uff1f\u4e3a\u4ec0\u4e48\u540e\u8005\u4f1a\u8c0b\u6740\u6211\u7684CPU\uff1f\uff01\u6211\u9996\u5148\u641c\u7d22\u4e86PostgreSQL\u6587\u6863\uff0c\u627e\u5230\u4e86\u4e00\u4e24\u5904\uff0c\u4f46\u6ca1\u6709\u7279\u522b\u6709\u7528\u7684\u5730\u65b9\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c1d\u8bd5\u4e86\u8c37\u6b4c\uff0c\u8fd9\u8ba9\u6211\u5728PG\u82a5\u672b\u7f51\u7ad9\u4e0a\u770b\u5230\u4e86\u4e00\u4e2a\u5c0f\u5e7f\u544a\u3002\u6211\u8d8a\u6765\u8d8a\u81ea\u4fe1\uff0c\u6211\u7684CPU\u914d\u7f6e\u6587\u4ef6\u53ef\u80fd\u662f\u4e00\u4e2a\u7cdf\u7cd5\u8ba1\u5212\u7684\u786e\u51ff\u8bc1\u636e\u3002\u6700\u540e\uff0c\u6211\u8df3\u8f6c\u5230GitHub\uff0c\u5feb\u901f\u641c\u7d22\u4e86PostgreSQL\u4ee3\u7801\u5e93\u3002\u6d4f\u89c8\u4e86\u4e00\u4e9b\u8bc4\u8bba\u548c\u4ee3\u7801\u70b9\u51fb\u3002\u6211\u73b0\u5728\u786e\u4fe1\uff0c\u6765\u81ea\u574f\u6570\u636e\u5e93\u7684flame\u56fe\u4e0a\u7684\u8c03\u7528\u5806\u6808\u53cd\u6620\u4e86\u4e0e\u6211\u4eec\u81ea\u5df1\u8fd0\u884c\u67e5\u8be2\u65f6\u5f97\u5230\u7684\u4e0d\u540c\u7684\u8ba1\u5212\u3002\n\u8be5\u67e5\u8be2\u6709\u4e00\u4e2a\u5305\u542b\u4e00\u7cfb\u5217OR\u6761\u4ef6\u7684in\u5217\u8868\u3002\u4f46\u5b83\u8fd8\u6709\u53e6\u4e00\u4e2a\u8fc7\u6ee4\u5668\u2014\u2014\u7531AND\u6761\u4ef6\u8fde\u63a5\uff1a\u65f6\u95f4\u6233\u3002\u6211\u60f3\uff0c\u5982\u679c\u89c4\u5212\u8005\u5e0c\u671b\u65e5\u671f\u8fc7\u6ee4\u5668\u7684\u57fa\u6570\u66f4\u4f4e\uff0c\u5b83\u53ef\u80fd\u4f1a\u5c1d\u8bd5\u4ece\u7d22\u5f15\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u6784\u5efa\u4f4d\u56fe\uff0c\u5e76\u66f4\u6539\u6211\u7684\u6267\u884c\u8ba1\u5212\u3002\u6211\u5c1d\u8bd5\u91cd\u65b0\u8fd0\u884c\u67e5\u8be2\uff0c\u7b80\u5355\u5730\u5c06\u5e74\u4efd\u4ece2022\u66f4\u6539\u4e3a2021\u3002\n\u67e5\u8be2\u2026\u6ca1\u6709\u2026\u8fd4\u56de\u3002\u6211\u7b49\u4e8610\u79d2\u202630\u79d2\u20261\u5206\u949f\u3002\u6211\u5c3d\u91cf\u4e0d\u663e\u5f97\u6fc0\u52a8\u6216\u662f\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5728\u6865\u724c\u4e0a\u968f\u610f\u53d1\u8868\u4e86\u4e00\u6761\u8bc4\u8bba\uff0c\u8bf4\u6211\u5df2\u7ecf\u66f4\u6539\u4e86\u65e5\u671f\uff0c\u6211\u7684\u67e5\u8be2\u4ecd\u5728\u8fd0\u884c\u3002\n\u7ecf\u8fc7\u6570\u5c0f\u65f6\u7684\u6545\u969c\u6392\u9664\uff0c\u6211\u4eec\u53ef\u80fd\u6700\u7ec8\u590d\u5236\u4e86\u4e00\u4e2a\u9519\u8bef\u7684\u6267\u884c\u8ba1\u5212\u3002\u51e0\u5206\u949f\u540e\uff0c\u67e5\u8be2\u4ecd\u5728\u8fd0\u884c\u3002\u6211\u672c\u80fd\u5730\u8f93\u5165\u4e86EXPLAIN ANALYZE\uff0c\u6211\u5728\u7b49\u5f85\u5b83\u5b8c\u6210\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u628a\u8ba1\u5212\u53d1\u5e03\u5230\u7f5a\u5355\u4e0a\u3002\u6211\u7684\u7ecf\u7406\u6307\u51fa\uff0c\u6211\u53ef\u4ee5\u9a6c\u4e0a\u53bb\u89e3\u91ca\u5e76\u5f97\u5230\u8ba1\u5212\u3002\u5f53\u7136\uff0c\u6211\u4e3a\u4ec0\u4e48\u6ca1\u60f3\u5230\u5462\uff01\uff08\u522b\u90a3\u6837\u770b\u7740\u6211\u3002\u6211\u77e5\u9053\u4f60\u6709\u65f6\u4e5f\u4f1a\u5fd8\u8bb0\u4e00\u4e9b\u663e\u800c\u6613\u89c1\u7684\u4e8b\u60c5\u3002\uff09\n\u8868\u4e0a\u7684\u4f4d\u56fe\u5806\u626b\u63cf\uff08\u6210\u672c=50887511.91..3195672174.06\u884c=73035\u5bbd\u5ea6=24\uff09\u91cd\u65b0\u68c0\u67e5\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09\u6216\u3002\u3002\u3002\u6216\u8005\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e8c\u4e2a1&#39\uff1b\uff1a\uff1atext\uff09\u548c\uff08timestamp_col1&lt\uff1b=&#39\uff1b2021-02-09 00:00:00&#39\uff1b\uff1a\uff1a\u4e0d\u5e26\u65f6\u533a\u7684\u65f6\u95f4\u6233\uff09\u8fc7\u6ee4\u5668\uff1a\uff08\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09\u548c\uff08\u6570\u5b573=&#39\uff1b1&#39\uff1b\uff1a\uff1a\u6570\u5b57\uff09\u6216\u3002\u3002\u3002\u6216\u8005\uff08\uff08text#col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e8c\u4e2a1&#39\uff1b\uff1a\uff1a\u6587\u672c\uff09\u548c\uff08\u6570\u5b573=&#39\uff1b2&#39\uff1b\uff1a\uff1a\u6570\u5b57\uff09\uff09-&gt\uff1bBitmapAnd\uff08\u6210\u672c=50887511.91..50887511.91\u884c=418910\u5bbd\u5ea6=0\uff09->\uff1bBitmapOr\uff08\u6210\u672c=13320.96..13320.96\u884c=513729\u5bbd\u5ea6=0\uff09->\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..36.56\u884c=2114\u5bbd\u5ea6=0\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e00\u540d\uff1a\u6587\u672c\uff09->\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..36.56\u884c=2114\u5bbd\u5ea6=0\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e8c\u4e2a1&#39\uff1b\uff1a\uff1a\u6587\u672c\uff09->\uff1bindex1\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..36.56\u884c=2114\u5bbd\u5ea6=0\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08\uff08text_col1\uff09\uff1a\uff1atext=&#39\uff1b\u7b2c\u4e09\u6761\uff1a\u6587\u672c\uff09->\uff1bindex2\u4e0a\u7684\u4f4d\u56fe\u7d22\u5f15\u626b\u63cf\uff08\u6210\u672c=0.00..50874172.44\u884c=2597695782\u5bbd\u5ea6=0\uff09\u7d22\u5f15\u6761\u4ef6\uff1a\uff08timestamp_col1&lt\uff1b=&#39\uff1b2021-02-09 00:00:00&#39\uff1b\uff1a\uff1a\u4e0d\u5e26\u65f6\u533a\u7684\u65f6\u95f4\u6233\uff09\uff08493\u884c\uff09\n\u6211\u662f\u5426\u770b\u5230\u4f4d\u56fe\u548c\u5e73\u9762\u8282\u70b9\uff1f\u662f\u5417\uff1f\u6211\u4ece\u6765\u6ca1\u6709\u8fd9\u4e48\u9ad8\u5174\u770b\u5230BitmapAnd\u6267\u884c\u8282\u70b9\uff01\u4e8b\u5b9e\u4e0a\uff0c\u6211\u7684\u67e5\u8be2\u4ece\u672a\u5b8c\u6210\uff0c\u518d\u52a0\u4e0a\u8fd9\u4e2a\u6267\u884c\u8ba1\u5212\u548cCPU\u914d\u7f6e\u6587\u4ef6\u2014\u2014\u5728\u6211\u770b\u6765\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e86\u95ee\u9898\u6839\u6e90\u7684\u786e\u51ff\u8bc1\u636e\u3002\n\u7b2c\u4e00\uff1aPostgreSQL\uff0c\u6211\u4eb2\u7231\u7684\uff0c\u6211\u53ef\u7231\u7684\u5173\u7cfb\u670b\u53cb\uff0c\u4f60\u5728\u60f3\u4ec0\u4e48\uff1f\uff01\u8fd9\u662f\u4e00\u4e2a\u56db\u5217206GB\u7d22\u5f15\uff0c\u5176\u4e2d\u53ea\u6709\u7b2c\u4e09\u5217\u548c\u7b2c\u56db\u5217\u5728SQL\u4e2d\u3002\u8fd9\u4e0d\u662f\u70b9\u9009\u62e9\uff0c\u751a\u81f3\u4e0d\u662f\u8303\u56f4\u9009\u62e9\u3002\u60a8\u5fc5\u987b\u626b\u63cf\u6240\u6709206GB\u5185\u5b58\u624d\u80fd\u751f\u6210\u6b64\u4f4d\u56fe\uff0c\u5176\u4e2d\u53ea\u5305\u542b\u51e0\u4e2a\u6761\u76ee\u3002\u4f60\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5bf9\u6211\uff1f\n\u66f4\u91cd\u8981\u7684\u662f\uff1a\u6211\u4eec\u8fd8\u6ca1\u6709\u89e3\u51b3\u65b9\u6848\u3002\u6211\u4eec\u8fd8\u5728\u4e0b\u7ebf\u3002\u6240\u4ee5\u2026\u56de\u53bb\u5de5\u4f5c\u5427\u3002\n\u9057\u61be\u7684\u662f\uff0cPostgreSQL\u4e2d\u7684\u9009\u9879\u975e\u5e38\u6709\u9650\u3002\u8fd9\u4e2a\u6570\u636e\u5e93\u6ca1\u6709pg_\u63d0\u793a_\u8ba1\u5212\u3002\u6211\u5bf9\u6df7\u5408\u4f1a\u8bdd\u7ea7\u522b\u96c6\u8bed\u53e5\u548c\u8fde\u63a5\u6c60\u6709\u70b9\u6000\u7591\u3002\u6211\u559c\u6b22\u8fd9\u6837\u4e00\u4e2a\u6280\u5de7\uff1a\u5c06SQL\u5c01\u88c5\u5728SQL\uff08\u4e0d\u662fPL/pgSQL\uff09\u51fd\u6570\u4e2d\uff0c\u5e76\u5728\u51fd\u6570defini\u4e0a\u4f7f\u7528SET\u5c5e\u6027\n......", "note_en": "It was 5:17pm today, just as I was wrapping up work for the day, and my manager pinged me with the following chat:\n &lt;manager&gt;: Hi Jeremy - we have a &lt;other team&gt; ticket - escalated to &lt;leader&gt;, &lt;leader&gt;, etc. &lt;principal&gt; is on trying to advise as well. Are you available this evening if needed for diagnostics? &lt;coworker&gt; is on the call now\n No obligation; just checking in to see what my availability is. Quickly thinking it over \u2013 I didn\u2019t have any plans tonight, nothing in particular on my agenda. Why not? If I can help then someone else on the team won\u2019t have to, and I don\u2019t have anything better to do tonight.\n  I synced up with my coworker and then joined the bridge line where the front line tech team was troubleshooting.\n Last week I was chatting with a few software engineers who I work with, and I remember sharing my opinion that the most interesting problems are not obvious ones likes crashes. In the grand scheme of things, crashes (usually generating a core dump) are rather easy to debug. The truly sinister problems are more like vague brown-outs. They never trigger your health monitoring or alarming. All your synthetic user transactions work. There are no errors in the logs. But one particular function or module of your application that usually completes in a few seconds suddenly starts taking 10 minutes to finish. This might be caused by, perhaps, a single SQL query that suddenly and inexplicably starts taking longer to complete. Whenever you run the SQL yourself, it completes in seconds. Yet you can see the pile-up of database connections, and unrelated parts of the application start experiencing delays acquiring new connections themselves\u2026 and nothing quite fails all the way, yet something isn\u2019t working for your end users. An ominous backlog starts building up in some work queue which threatens much bigger problems if it\u2019s not dealt with soon. You see the freight train coming straight towards you\u2026. tortuously slow and unavoidable.\n  This was similar to the situation I walked into today. The tech team that I met uses PostgreSQL as a data store in one part of their application architecture. They have many deployments of this application around the world. This morning, in one geography, they performed a major version upgrade of a PostgreSQL database to version 11. After the upgrade, one part of the application started experiencing problems.\n By the time I joined the call, the team was already several hours deep in the investigation. They knew which part of the application was impacted. They knew that one specific SQL executed by this module was having problems. There was a \u201cthrottle\u201d that could be used to slow down or pause this particular application module, so they temporarily turned off the module to prevent adverse impact to the database \u2013 except when we were actively troubleshooting. When the module was enabled, the PostgreSQL view   pg_stat_activity showed that hundreds of connections would concurrently run this SQL. There were no wait events evident in the view, which meant that the SQL was active on the CPU. The system CPU utilization spiked to around 100% so it was pretty obvious this wasn\u2019t a matter of some un-instrumented off-CPU wait.\n The query itself was actually rather simple \u2013 with one little gotcha: a dynamic in-list containing between one and a thousand elements. Pretty common pattern. It\u2019s fun because it prevents both computers and humans from easily grouping together related queries. For example, the  pg_stat_statements view will have several hundred different entries, each with a different number of in-list elements. But the query operated on a single table and only had one filter in addition to the in-list (a  &#39;&lt;=&#39; operator).\n  SELECT * FROM table WHERE (text_col1, numeric_col3) IN ((&#39;first1&#39;,1),(&#39;second1&#39;,2), ... ) AND timestamp_col1 &lt;= :1\n That\u2019s all! Simple! According to  pg_relation_size() the table was 845GB. Two indexes exist which are relevant for the query at hand: a 229GB btree \u201cindex1\u201d on (text_col1, text_col2) and a 206GB btree \u201cindex2\u201d on (numeric_col1, numeric_col2, numeric_col3, timestamp_col1). It\u2019s important to note that the final two columns in this second index are referenced in the query.\n The most obvious theory was a bad execution plan coming from the planner. This is expected with major version upgrades of any relational database. Major versions are when you get all the tweaks and improvements to the planner, optimizer, costing algorithms, etc. Most of your queries either stay the same or get faster. But naturally, there might be a regression or two. And it only takes one to ruin your weeknight\u2026.\n Nonetheless, when we executed the query from  psql it returned in a few milliseconds \u2013 the good performance we expected. We also connected to another deployment in a different geography (still using the older major version of PostgreSQL) and verified the same execution time and execution plan. As I joined the call, the theory was being proposed that the application used prepared statements and perhaps after the upgrade the application had connected and cached its prepared statements with bad plans before updated statistics were ready.\n Side note: I\u2019m sure all the brilliant readers of this article already know that in PostgreSQL, object statistics are reset with major version upgrades! You need to run ANALYZE to update your statistics after starting the new major version!\n Accordingly, the team was just about to start a rolling restart of the application server fleet in the geography with the recently upgraded database. They verified that the database had up-to-date statistics and they wanted to be sure that the application servers would get fresh database connections with the best possible execution plans.\n I listened closely, but I was aware that there wasn\u2019t much evidence this would fix the issue (although it was a very good guess). In the meantime, I kept reading the ticket history and cross-checking the work that had been done around testing executions plans.\n Unlike some other relational databases, PostgreSQL does not give much visibility into execution plans used at runtime. There\u2019s   auto_explain which can log actual plans for SQL that successfully completes with a runtime above some threshold. The  pg_stat_activity view added  query_id in PostgreSQL 14, and I\u2019m hopeful that a  plan_id might come someday \u2013 but the work hasn\u2019t been done yet. With a plan hash in both  pg_stat_activity and in the  EXPLAIN output, it would be trivial to know whether the query that your app server is currently executing has the same plan as the query you just ran in  psql \u2013 even with low latency, high frequency queries that you couldn\u2019t log due to volume. Of course dynamic in-lists might still throw a wrench into this, but I don\u2019t know of any relational databases that have a great solution for that yet.\n (Edit 10-Feb-2022: Joshua left a comment reminding me about  Cybertec and Hironobu Suzuki\u2019s extension pg_show_plans. It was an oversight not to mention it when I first wrote this article and I\u2019m glad Joshua mentioned it. I\u2019d seen the extension before but hadn\u2019t yet had a chance to install this and try it out. You can be sure that it\u2019s now a priority to take a closer look!)\n The next best solution I know is using   pg_stat_statements as a proxy of sorts. I asked a DBA on the team to run the following query:\n   substr | calls | total_time | mean_time | stddev_time | blks | rows-------------------------+-------+------------------+------------------+------------------+------+------ select * from table whe | 57 | 21904.791707 | 384.294591350877 | 759.553887634356 | 2444 | 24 select * from table whe | 2383 | 20875.809368 | 8.76030607133866 | 39.355973386603 | 2610 | 10 select * from table whe | 98 | 14309.699707 | 146.01734394898 | 396.703422675129 | 1846 | 10 select * from table whe | 78 | 14282.730893 | 183.111934525641 | 430.76318896177 | 1769 | 43 select * from table whe | 41 | 14053.415115 | 342.766222317073 | 848.723086074263 | 2893 | 28 select * from table whe | 106 | 12767.352093 | 120.446717858491 | 293.357452072648 | 1756 | 24 select * from table whe | 51 | 12442.307684 | 243.966817333333 | 530.104152533396 | 2077 | 22... explain analyze verbose | 1 | 23.031251 | 23.031251 | 0 | 241 | 0 select * from table whe | 2 | 11.987225 | 5.9936125 | 0.7968815 | 46 | 2 select * from table whe | 1 | 6.697005 | 6.697005 | 0 | 3026 | 1 select * from table whe | 1 | 6.032849 | 6.032849 | 0 | 2704 | 0(315 rows)\n I asked them to run the same query in the other geography that was still running the older major version of PostgreSQL. Naturally, the other geography showed a much higher call count \u2013 because this query is showing cumulative totals since the last database restart, and of course the problem database was restarted as part of the upgrade.\n The first thing I noticed was that the ratio of rows to blocks between the two regions was radically different \u2013 the good geography had a lot more rows. Could that mean a different execution plan was being used? Then I realized that I\u2019d just made a mistake in interpreting the my own query; I was reporting \u201cblocks per call\u201d but I was reporting \u201ctotal rows for all calls\u201d. After I figured that out, I realized that the numbers between the good and bad geographies actually didn\u2019t seem remarkably different. The same was true for the execution plans and the execution time when we ran the problem queries at a  psql prompt \u2013 they were the same \u201cgood\u201d values in both the good and bad geographies.\n  Bitmap Heap Scan on table (cost=3791.09..80234213.68 rows=6713 width=273) (actual time=74.911..74.953 rows=0 loops=1) Output: &lt;all columns&gt; Recheck Cond: (((text_col1)::text = &#39;first1&#39;::text) OR ... OR ((text_col1)::text = &#39;second1&#39;::text)) Filter: ((timestamp_col1 &lt;= &#39;2022-02-09 00:00:00&#39;::timestamp without time zone) AND ((((text_col1)::text = &#39;first1&#39;::text) AND ... AND (numeric_col3 = &#39;2&#39;::numeric)))) -&gt; BitmapOr (cost=3791.09..3791.09 rows=212565 width=0) (actual time=74.905..74.946 rows=0 loops=1) -&gt; Bitmap Index Scan on index1 (cost=0.00..38.65 rows=2261 width=0) (actual time=0.026..0.026 rows=0 loops=1) Index Cond: ((text_col1)::text = &#39;first1&#39;::text) -&gt; Bitmap Index Scan on index1 (cost=0.00..38.65 rows=2261 width=0) (actual time=0.446..0.446 rows=0 loops=1) Index Cond: ((text_col1)::text = &#39;second1&#39;::text) -&gt; Bitmap Index Scan on index1 (cost=0.00..38.65 rows=2261 width=0) (actual time=0.447..0.447 rows=0 loops=1) Index Cond: ((text_col1)::text = &#39;third1&#39;::text)\n Listening on the call, I heard someone mention that queries were timing out due to a  statement_timeout setting around 2 minutes. This led to some question about whether the  pg_stat_statements data simply didn\u2019t reflect the long-running queries because they were erroring out. I think this actually was the case. But it led to another idea \u2013 I asked if someone who had access to the PostgreSQL log file could calculate the rate at which they were seeing timeout errors. (Errors are the common \u2018E\u2019 of both the USE method and the RED method! Something to watch closely!) This gave further confirmation that the issue started with the upgrade and didn\u2019t exist in the other region, but not a lot else.\n At this point, I started to feel a little worried. If it wasn\u2019t a plan change, then what could it be? Hardware problem like a defective CPU running at an incorrect frequency? (Seen that before.) Some hard-to-find bug deep in the bowels of the Linux kernel? (Seen those too and I don\u2019t like them.) My teammate had already done a quick-and-dirty run of perf and grabbed a screenshot, but I decided to up the ante. We have a script of our own which is very similar to Tanel Poder\u2019s  run_xcpu.sh in his 0x.tools collection. It uses perf to perform low-frequency, conservative sampling of stacks from running processes. It runs continually in the background, retains data for one week, and can be left safely running for months. Even on a heavily loaded server with dozens and dozens of cores, it won\u2019t overwhelm the system with too many files or too many bytes. Like Tanel\u2019s script, it\u2019s designed to be safely used in production. We flipped the switch and started profiling the CPU with the database at 100% CPU.\n After about 10 minutes, I generated a flame graph. Here\u2019s what we saw:\n  When I first looked at the CPU profile on the bad system, I didn\u2019t think it would help much. The call stack basically matches the execution plan we saw above, which was performing well in our tests! Executor_Run is calling ExecScan (corresponds to \u201cBitmap Heap Scan\u201d) which in turn is calling the BitmapIndexScan. I knew that the classic index scan and seqscan were slow (tested with session GUCs), but it really didn\u2019t look like either of those was happening here. It\u2019s clearly doing the bitmap scan. This is only confirming my fears that our problem is not a bad plan.\n For comparison, I used the same script and generated a flame graph for the older PostgreSQL database in the good geography. I highlighted occurrences of the ExecScan function. Here\u2019s what that looked like:\n  The first thing to notice here is the sample count. Remember that both of these were gathering samples at the same frequencies for about the same duration (10 minutes) \u2013 so the difference in sample count actually reflects a difference in CPU time. Everything we see on the healthy system probably still exists somewhere on the unhealthy system\u2026. but it\u2019s so tiny you can\u2019t see it, because it\u2019s just a few data points compared with 400 thousand data points coming from one bad query that\u2019s killing the CPU.\n Now I thought to myself, this problem query must be running somewhere on the healthy system. The call stack might have tiny differences on the older major version of PostgreSQL \u2013 but I bet it\u2019s going to be roughly the same. I started with those ExecScan nodes and looked at the ones that appeared lowest in the stack. It didn\u2019t take me long to find it \u2013 it\u2019s the only one that\u2019s not preceded by some kind of sort or loop:\n  When I zoomed in on this node, I noticed something that I didn\u2019t quite understand. It looked almost identical to my unhealthy system \u2013 and I was pretty confident that my query was in there \u2013 yet there was a bit more. I saw the function MultiExecBitmapAnd but only with a mere 23 samples. And there was this function MultiExecBitmapOr alongside with 63 samples. A similar execution plan that is very close to the one which is causing problems.\n  Now I\u2019m a big fan of the Oak Table Network, one reason being their dogged advocacy for taking an evidence-based, scientific and methodical approach to database problem solving. (You\u2019d be shocked how common the approach is of \u201cfind whoever sounds the smartest/loudest and let them make guesses until the problem goes away\u2026\u201d) But frankly, while I will squeeze every last drop out of the methodical approach, with tricky problems the diagnostics data is often unavailable which you\u2019d need for deductively following one step to the next until the solution is evident. This seemed like one of those situations. I took off my headset and stepped away from the desk. Walked a little and tried to think outside the box.\n I was thinking, \u201cI wonder if these are related?\u201d I did a search on the bad flame graph for MultiExecBitmapOr \u2013 lo and behold it was there \u2013 with a mere 366 samples, a tiny invisible sliver next to the bad SQL. It was around this time when I re-visited the execution plan for the good SQL statement and I noticed something important: there was a plan node called \u201cBitmapOr\u201d. As I looked at the flamegraphs from both systems, the idea is becoming more plausable: \u201cI wonder if this good SQL plan actually corresponds with the stacks I\u2019m seeing on the healthy system? and if this good SQL plan is NOT the plan that\u2019s killing the CPU?\u201d\n It was time to learn something new about PostgreSQL! What is the exact difference between \u201cBitmapOr\u201d and \u201cBitmapAnd\u201d and why is the latter murdering my CPU?! I started with a search of the PostgreSQL documentation, which turned up one or two hits but nothing especially useful. Next I tried google, which led me to  a little blurb on the PgMustard site. My confidence was growing that my CPU profile might be a smoking gun for a bad plan. Finally I jumped over to GitHub and did a quick search of the PostgreSQL code base. Skimmed over some comments and code hits. I\u2019m confident now that the call stack on the flame graph from the bad database reflects a different plan than what we\u2019re getting when we run the query ourselves.\n  The query had an in-list with a bunch of OR conditions. But it also had one other filter \u2013 joined by an AND condition: the timestamp. I thought that just maybe if the planner expected lower cardinality out of that date filter, it might try to pull that data from an index and build a bitmap and change my execution plan. I tried re-running the query, simply changing the year from 2022 to 2021.\n The query \u2026 did \u2026 not \u2026 return. I waited ten seconds\u2026 30 seconds\u2026 1 minute. Trying not to sound excited or anything, I made a casual off-hand comment on the bridge line that I\u2019d changed the date and my query was still running.\n After hours of troubleshooting this production brown-out situation, we might have finally reproduced a culprit bad execution plan. After a few minutes the query was still running. I had reflexively typed  EXPLAIN ANALYZE and I was waiting for it to complete so that I could post the plan to the ticket. My manager pointed out that I could just run  EXPLAIN and get the plan right away. OF COURSE WHY DIDN\u2019T I THINK OF THAT!  (Don\u2019t look at me like that. I know you forget obvious stuff sometimes too.)\n  Bitmap Heap Scan on table (cost=50887511.91..3195672174.06 rows=73035 width=24) Recheck Cond: ((((text_col1)::text = &#39;first1&#39;::text) OR ... ...OR ((text_col1)::text = &#39;second1&#39;::text)) AND (timestamp_col1 &lt;= &#39;2021-02-09 00:00:00&#39;::timestamp without time zone)) Filter: ((((text_col1)::text = &#39;first1&#39;::text) AND (numeric_col3 = &#39;1&#39;::numeric)) OR ... ...OR (((text_col1)::text = &#39;second1&#39;::text) AND (numeric_col3 = &#39;2&#39;::numeric))) -&gt; BitmapAnd (cost=50887511.91..50887511.91 rows=418910 width=0) -&gt; BitmapOr (cost=13320.96..13320.96 rows=513729 width=0) -&gt; Bitmap Index Scan on index1 (cost=0.00..36.56 rows=2114 width=0) Index Cond: ((text_col1)::text = &#39;first1&#39;::text) -&gt; Bitmap Index Scan on index1 (cost=0.00..36.56 rows=2114 width=0) Index Cond: ((text_col1)::text = &#39;second1&#39;::text) -&gt; Bitmap Index Scan on index1 (cost=0.00..36.56 rows=2114 width=0) Index Cond: ((text_col1)::text = &#39;third1&#39;::text) -&gt; Bitmap Index Scan on index2 (cost=0.00..50874172.44 rows=2597695782 width=0) Index Cond: (timestamp_col1 &lt;= &#39;2021-02-09 00:00:00&#39;::timestamp without time zone)(493 rows)\n Do I see a BitmapAnd plan node? Do I? I\u2019ve never been so happy to see a BitmapAnd execution node! The fact that my query never completed, combined with this execution plan and the CPU profile \u2013 in my opinion we now had conclusive evidence for the problem\u2019s root cause.\n First: PostgreSQL, my dear, my lovely relational friend, WHAT ARE YOU THINKING?! This is a 206GB index on four columns, of which only the third and fourth are in our SQL. This is not a point select or even a range select. You must scan all 206GB of memory to build this bitmap \u2013 containing just a few entries. WHY would you do this to me?\n  More importantly: We don\u2019t yet have a fix. We\u2019re still down. So\u2026 back to work.\n Sadly, the options in PostgreSQL are very limited. This particular database does not have pg_hint_plan. I\u2019m a little leery about mixing session-level  SET statements and connection pools. There\u2019s a trick I like where you wrap a SQL in a SQL (not PL/pgSQL) function and use SET attributes on the function defini\n......", "posttime": "2022-02-13 17:54:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgresql", "title": "\u4ee4\u4eba\u6bdb\u9aa8\u609a\u7136\u7684PostgreSQL\u4e8b\u4ef6", "title_en": "A Hairy PostgreSQL Incident", "transed": 1, "url": "https://ardentperf.com/2022/02/10/a-hairy-postgresql-incident/", "via": "", "real_tags": []}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072915, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e0a\u6b21\u53d1\u5e03\u978b\u5b50\u626b\u63cf\u5e16\u5b50\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\uff0c\u53c8\u6709\u4e00\u53cc\u8fd0\u52a8\u978b\u521a\u5230\uff0c\u6240\u4ee5\u6211\u89c9\u5f97\u662f\u65f6\u5019\u518d\u5199\u4e00\u53cc\u4e86\u3002\u8fd9\u4e00\u6b21\u7684\u91cd\u70b9\u662f\u770b\u662f\u5426\u6709\u53ef\u80fd\u5728\u201c\u978b\u5e26\u201d\u9884\u7b97\uff08\u65e0\u803b\u7684\u53cc\u5173\u8bed\uff09\u4e0a\u5236\u4f5c\u4e00\u4e2a\u4ea4\u53c9\u6781\u5316\u626b\u63cf\u4ead\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u4ea4\u53c9\u504f\u632f\u6444\u5f71\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u7528\u4e8e\u4ece\u56fe\u50cf\u4e2d\u8fc7\u6ee4\u955c\u9762\u53cd\u5c04\u7684\u6355\u83b7\u6280\u672f\u3002\u4ece\u56fe\u50cf\u4e2d\u79fb\u9664\u955c\u9762\u53cd\u5c04\u5149\u53cd\u5f39\u540e\uff0c\u60a8\u5c06\u83b7\u5f97\u5e73\u5766\u7684\u6f2b\u53cd\u5c04\u989c\u8272\uff0c\u8fd9\u975e\u5e38\u9002\u54083D\u6a21\u578b\u7684\u7eb9\u7406\u548c\u91cd\u65b0\u7167\u660e\u3002\n\u626b\u63cf\u978b\u5b50\u6700\u5177\u6311\u6218\u6027\u7684\u4e00\u4e2a\u65b9\u9762\u662f\u627e\u51fa\u5982\u4f55\u6682\u505c\u5b83\uff0c\u4ee5\u4fbf\u6355\u6349\u6bcf\u4e2a\u89d2\u5ea6\u3002\u8fd9\u53ef\u80fd\u4f1a\u88ab\u8bc1\u660e\u662f\u76f8\u5f53\u56f0\u96be\u7684\uff0c\u4f46\u901a\u8fc7\u6700\u8fd1\u53d1\u73b0\u7684\u4e00\u79cd\u6280\u672f\uff0c\u6211\u79f0\u4e4b\u4e3a\u201c\u8499\u9762\u6df7\u5408\u201d\uff0c\u4f60\u53ef\u4ee5\u5b8c\u5168\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u3002\u5f53\u6211\u8bf4\u201c\u8499\u7248\u6df7\u5408\u201d\u65f6\uff0c\u6211\u6307\u7684\u662f\u4e00\u79cd\u6280\u672f\uff0c\u4f60\u53ef\u4ee5\u5728Agisoft\u4e2d\u4f7f\u7528\u5dee\u5f02\u8499\u7248\u6765\u6b3a\u9a97\u8f6f\u4ef6\uff0c\u4f7f\u5176\u76f8\u4fe1\u5728\u4e00\u4e2a\u8fde\u7eed\u8bbe\u7f6e\u4e2d\u6355\u83b7\u4e86\u4e24\u6b21\u626b\u63cf\u3002\u56e0\u6b64\uff0c\u6df7\u5408\u626b\u63cf\u53ef\u4ee5\u5728\u7f51\u683c\u8ba1\u7b97\u9636\u6bb5\u8fdb\u884c\uff0c\u800c\u4e0d\u662f\u5728ZBrush\u4e2d\u5c06\u591a\u4e2a\u626b\u63cf\u6df7\u5408\u5728\u4e00\u8d77\u7684\u66ff\u4ee3\u65b9\u6cd5\u2014\u2014\u6211\u5c06\u8fdb\u4e00\u6b65\u8be6\u7ec6\u89e3\u91ca\u3002\n\u5982\u56fe\uff08\u53f3\uff09\u6240\u793a\uff0c\u6211\u7684\u8bbe\u7f6e\u975e\u5e38\u57fa\u672c\uff1b\u4e00\u4e2a\u54d1\u5149\u9ed1\u8272\u80cc\u666f\uff08\u6ca1\u6709\u71a8\u6597\u6765\u5904\u7406\u90a3\u4e9b\u4ee4\u4eba\u9707\u60ca\u7684\u6298\u75d5\uff09\u3001\u4e00\u4e2a\u8f6c\u76d8\u548c\u51e0\u4e2aspeedlite\u95ea\u5149\u706f\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u6298\u75d5\uff0c\u4f46\u9ed1\u8272\u80cc\u666f\u6548\u679c\u975e\u5e38\u597d\u2014\u2014\u5c24\u5176\u662f\u5728\u4f7f\u7528\u504f\u632f\u6ee4\u5149\u7247\u65f6\uff0c\u5b83\u5f88\u597d\u5730\u6d88\u9664\u4e86\u6298\u75d5\u533a\u57df\u7684\u6240\u6709\u5149\u53cd\u5f39\u3002\u6211\u7684\u5149\u6e90\u662f\u4e24\u4e2aSpeedLite\uff0c\u5b83\u4eec\u4e0e\u76f8\u673a\u621045\u5ea6\u89d2\u6307\u5411\u5185\u90e8\uff0c\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u6761\u504f\u632f\u51dd\u80f6\u5e26\uff0c\u8d34\u5728\u524d\u9762\u3002\n\u5728\u5904\u7406\u65f6\uff0c\u6211\u4f7f\u7528Lightroom\u5bf9\u56fe\u50cf\u8fdb\u884c\u6279\u5904\u7406\u548c\u989c\u8272\u6821\u6b63\u3002\u7136\u540e\uff0c\u6211\u5728Agisoft\u4e2d\u751f\u6210\u4e86\u4e00\u7ec4\u9762\u5177\uff0c\u5728\u5904\u7406\u9636\u6bb5\u5e2e\u52a9\u9694\u79bb\u5bf9\u8c61\u3002\u54d1\u5149\u9ed1\u8272\u7684\u80cc\u666f\u8ba9\u6211\u80fd\u591f\u751f\u6210\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u5dee\u5f02\u906e\u7f69\uff0c\u8fd9\u610f\u5473\u7740\u6211\u53ef\u4ee5\u5728\u626b\u63cf\u8fc7\u7a0b\u4e2d\u5c0f\u5fc3\u5730\u7ffb\u8f6c\u978b\u5b50\uff0c\u4f46\u4f1a\u6b3a\u9a97\u8f6f\u4ef6\uff0c\u8ba9\u5b83\u8ba4\u4e3a\u76f8\u673a\u7684\u4f4d\u7f6e\u5df2\u7ecf\u6539\u53d8\u4e86\uff0c\u4ece\u800c\u4ea7\u751f\u6211\u4e4b\u524d\u63d0\u5230\u7684\u201c\u906e\u7f69\u6df7\u5408\u201d\u6548\u679c\u3002\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\uff0c\u6211\u80fd\u591f\u79fb\u52a8\u978b\u5b50\uff0c\u5728\u591a\u4e2a\u8f74\u4e0a\u8986\u76d6\uff0c\u7136\u540e\u5728Agisoft\u4e2d\u5c06\u5b83\u4eec\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u6211\u786e\u5b9e\u9700\u8981\u5728AfterEffects\u4e2d\u505a\u4e00\u4e9b\u9762\u819c\u6e05\u7406\u5de5\u4f5c\uff0c\u82b1\u4e86\u5927\u7ea610\u5206\u949f\uff0c\u4f46\u5f53\u6211\u5728Agisoft\u4e2d\u770b\u5230\u4e24\u4e2a\u5b8c\u5168\u5782\u76f4\u7684\u6444\u50cf\u5934\u5bf9\u9f50\u73af\u65f6\uff0c\u6211\u7edd\u5bf9\u611f\u89c9\u50cf\u662f\u5c24\u91cc\u5361\u65f6\u523b\u4e4b\u4e00\u3002\n\u81ea\u4ece\u505a\u4e86\u8fd9\u9879\u6d4b\u8bd5\u540e\uff0c\u6211\u4e86\u89e3\u5230\u8f6c\u76d8\u7684\u8bbe\u7f6e\u53ef\u80fd\u662f\u76f8\u5f53\u624b\u5de5\u548c\u4e4f\u5473\u7684\uff0c\u4f46\u6709\u4e00\u4e9b\u4e8b\u60c5\u53ef\u4ee5\u5e2e\u52a9\u52a0\u5feb\u901f\u5ea6\u3002\u4f8b\u5982\uff0c\u5728\u76f8\u673a\u4e0a\u4f7f\u7528\u95f4\u9694\u8ba1\u53ef\u4ee5\u8ba9\u751f\u6d3b\u66f4\u8f7b\u677e\u3002\u6b64\u5916\uff0c\u4e00\u4e2a\u7535\u52a8\u8f6c\u53f0\u4e5f\u5f88\u6709\u610f\u4e49\uff0c\u5c3d\u7ba1\u6211\u53ea\u662f\u5728\u770b\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\u624d\u60f3\u5230\u8fd9\u4e00\u70b9\uff0c\u5f53\u65f6\u6211\u8737\u7f29\u5728\u8f6c\u53f0\u4e0a\uff0c\u7b49\u5f85\u6bcf5\u79d2\u542f\u52a8\u4e00\u6b21\u6444\u50cf\u5934\u3002\u4e0b\u9762\u662f\u6211\u4e4b\u524d\u4e00\u6b21\u6d4b\u8bd5\u62cd\u6444\u7684\u89c6\u9891\uff08\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5728\u6700\u540e\u4e00\u6b21\u626b\u63cf\u4e2d\uff0c\u5ef6\u65f6\u5931\u8d25\u4e86\uff0c\u8fd9\u662f\u5728\u591c\u95f4\u62cd\u6444\u7684\uff0c\u4ee5\u5e2e\u52a9\u63a7\u5236\u7167\u660e\u6761\u4ef6\uff09\u3002\n\u5728\u91cd\u5efa\u8bad\u7ec3\u5668\u65f6\uff0c\u6211\u51b3\u5b9a\u907f\u514d\u7528\u6240\u6709\u5355\u72ec\u7684\u7ebf\u91cd\u65b0\u5851\u9020\u9488\u7ec7\u8868\u9762\uff0c\u56e0\u4e3a\u8fd9\u8981\u4e48\u9700\u8981\u4e00\u4e9b\u975e\u5e38\u806a\u660e\u7684\u5efa\u6a21\u6280\u5de7\uff0c\u8981\u4e48\u9700\u8981\u4e00\u4e2a\u4eba\u6709\u5f88\u591a\u7a7a\u95f2\u65f6\u95f4\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u5728ZBrush\u4e2d\u91cd\u5851\u4e86\u57fa\u672c\u5f62\u72b6\uff0c\u5e76\u4ece\u6f2b\u53cd\u5c04\u7eb9\u7406\u4e2d\u63d0\u53d6\u4e86\u9ad8\u9891\u7ec6\u8282\uff0c\u8fd9\u7ed9\u4eba\u4ee5\u9488\u7ec7\u8868\u9762\u7684\u9519\u89c9\u3002\n\u8be5\u6a21\u578b\u7531\u5341\u4e2a\u4e0d\u540c\u7684\u90e8\u5206\u7ec4\u6210\uff0c\u6240\u6709\u90e8\u5206\u90fd\u5e26\u6709\u652f\u6301PBR\u5de5\u4f5c\u6d41\u7684\u6781\u5316\u7eb9\u7406\u8d34\u56fe\uff0c\u56e0\u6b64\u53ef\u4ee5\u8f7b\u677e\u5730\u5728Maya\u4e2d\u91cd\u65b0\u7ed8\u5236\u548c\u6e32\u67d3\u5b83\u4eec\u3002\u9664\u4e86\u5728Photoshop\u4e2d\u4f7f\u7528\u5404\u79cd\u5e73\u94fa\u56fe\u6848\u5236\u4f5c\u7684\u978b\u5e26\u5916\uff0c\u6240\u6709\u7eb9\u7406\u6e05\u7406\u90fd\u662f\u5728Mari\u4e2d\u5b8c\u6210\u7684\u3002\u6211\u5728\u53d8\u5f62\u8c03\u8272\u677f\u4e2d\u4f7f\u7528\u5145\u6c14\u5de5\u5177\u5728ZBrush\u4e2d\u5e94\u7528\u7684\u6a61\u80f6\u978b\u5e95\u4e0a\u4e3a\u5fbd\u6807\u5370\u8bb0\u521b\u5efa\u4e86Alpha\u3002\u4e3a\u4e86\u5728\u978b\u5e95\u4e0a\u91cd\u5efa\u66f2\u7ebf\u5f62\u72b6\uff0c\u6211\u5fc5\u987b\u4fdd\u6301\u62d3\u6251\u7ed3\u6784\u76f8\u5f53\u5e72\u51c0\uff0c\u4ee5\u4fbf\u4fdd\u7559\u5f62\u72b6\u5e76\u4ece\u539f\u59cb\u626b\u63cf\u6570\u636e\u4e2d\u53bb\u9664\u4efb\u4f55\u566a\u58f0\u3002\n\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0c\u6211\u4e00\u76f4\u5728\u52aa\u529b\u6539\u8fdb\u62cd\u6444\u6444\u5f71\u6d4b\u91cf\u65f6\u7684\u8868\u9762\u7ec6\u8282\u6355\u6349\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u7814\u7a76\u4e00\u4e9b\u5149\u5ea6\u6280\u672f\u3002\u6211\u6700\u8fd1\u4e00\u76f4\u5728\u5b66\u4e60Substance Designer\uff0c\u8fd9\u662f\u4e00\u6b3e\u5f88\u68d2\u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u521b\u5efa\u7a0b\u5e8f\u7eb9\u7406\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u652f\u63013D\u626b\u63cf\u548c\u5149\u5ea6\u5b66\u5de5\u4f5c\u6d41\u7684\u795e\u5947\u5de5\u5177\u3002\n\u6211\u7684\u7b2c\u4e00\u4e2a\u6d4b\u8bd5\u662f\u5c1d\u8bd5\u4f7f\u7528\u540c\u4e00\u4e3b\u9898\u7684\u504f\u632f\u548c\u975e\u504f\u632f\u7167\u7247\u4e4b\u95f4\u7684\u5dee\u5f02\u6df7\u5408\uff0c\u4ece\u56fe\u50cf\u4e2d\u63d0\u53d6\u955c\u9762\u53cd\u5c04\u4fe1\u606f\u3002\u4ece\u56fe\uff08\u53f3\uff09\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u4f3c\u4e4e\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\u4e0b\u4e00\u6b65\u662f\u4ece\u57f9\u8bad\u5e08\u7684\u5404\u4e2a\u89d2\u5ea6\u8ba1\u7b97\u955c\u9762\u53cd\u5c04\u5dee\u5f02\uff0c\u5e76\u5c06\u8fd9\u4e9b\u56fe\u50cf\u91cd\u65b0\u6295\u5f71\u5230Agisoft\u4e2d\u7684\u7f51\u683c\u4e0a\uff0c\u4ee5\u67e5\u770b\u5b83\u4eec\u7ed3\u5408\u5f97\u6709\u591a\u597d\u3002\u4e0d\u8fc7\uff0c\u6211\u5f88\u597d\u5947\u8fd9\u662f\u5426\u771f\u7684\u6709\u6548\uff0c\u56e0\u4e3a\u955c\u9762\u53cd\u5c04\u53ef\u80fd\u4f1a\u6839\u636e\u8868\u9762\u7684\u6750\u8d28\u548c\u89c2\u5bdf\u89d2\u5ea6\u800c\u6709\u6240\u4e0d\u540c\u3002\n\u5728\u6211\u7684\u6700\u7ec8\u6559\u7ec3\u6a21\u578b\u7684\u6e32\u67d3\u4e2d\uff0c\u8868\u9762\u7ec6\u8282\u770b\u8d77\u6765\u76f8\u5f53\u4e0d\u9519\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u662f\u5b8c\u5168\u7cbe\u786e\u5230\u6700\u521d\u7684\u978b\u5b50\u3002\u5f53\u524d\u66f2\u9762\u7ec6\u8282\u5df2\u4f7f\u7528\u201c\u6f2b\u53cd\u5c04\u51f9\u51f8\u201d\u65b9\u6cd5\u8fd1\u4f3c\uff0c\u8be5\u65b9\u6cd5\u4f7f\u7528\u7eb9\u7406\u4e2d\u7684RGB\u6570\u636e\u5728\u6a21\u578b\u66f2\u9762\u4e0a\u521b\u5efa\u7cbe\u7ec6\u7ec6\u8282\u3002\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u51c6\u786e\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u7eb9\u7406\u4e2d\u8f83\u6697\u7684\u503c\u6765\u8d1f\u7f6e\u6362\u66f2\u9762\uff0c\u800c\u4f7f\u7528\u8f83\u4eae\u7684\u503c\u6765\u6b63\u7f6e\u6362\u66f2\u9762\uff0c\u5e76\u4e14\u8fd9\u5e76\u4e0d\u603b\u662f\u7ed9\u51fa\u6b63\u786e\u7684\u7ed3\u679c\u3002\u76ae\u80a4\u6bdb\u5b54\u548c\u9762\u90e8\u80e1\u832c\u662f\u8fd9\u4e00\u95ee\u9898\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u4e24\u8005\u7684\u989c\u8272\u90fd\u8f83\u6df1\uff0c\u4f46\u4e00\u4e2a\u9700\u8981\u6b63\u4f4d\u79fb\uff0c\u53e6\u4e00\u4e2a\u9700\u8981\u8d1f\u4f4d\u79fb\u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u7684\u7b2c\u4e8c\u4e2a\u5149\u5ea6\u6d4b\u8bd5\u662f\u4ece\u7167\u7247\u4e2d\u63d0\u53d6\u9ad8\u5ea6\uff08\u6216\u6df1\u5ea6\uff09\u4fe1\u606f\uff0c\u4ee5\u521b\u5efa\u7b26\u5408\u771f\u5b9e\u751f\u6d3b\u7684\u8868\u9762\u7ec6\u8282\u3002\u4e3a\u6b64\uff0c\u6211\u4f7f\u7528\u591a\u5411\u5149\u6e90\u62cd\u6444\u4e86\u4e00\u7ec4\u56fe\u50cf\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u52a0\u8f7d\u5230Substance Designer\u4e2d\uff0c\u4ee5\u8ba1\u7b97\u6574\u4e2a\u978b\u5b50\u7684\u6b63\u5e38\u503c\uff0c\u7136\u540e\u5c06\u5176\u8f6c\u6362\u4e3ahight\u5730\u56fe\u3002\n\u5982\u679c\u67e5\u770b\u6e32\u67d3\u7684gif\uff0c\u60a8\u53ef\u4ee5\u5728\u7c98\u571f\u64e6\u62ed\u8fc7\u7a0b\u4e2d\u770b\u5230\uff0c\u767d\u8272\u8bb0\u53f7\u7565\u5fae\u7a81\u51fa\u6a21\u578b\u7684\u8868\u9762\uff0c\u800c\u8fd9\u4e0d\u662f\u5b83\u5728\u539f\u59cb\u56fe\u50cf\u4e0a\u7684\u5916\u89c2\u3002\u5982\u679c\u6211\u4f7f\u7528\u5728Substance Designer\u4e2d\u63d0\u53d6\u7684\u9ad8\u5ea6\u56fe\uff0c\u6211\u5e94\u8be5\u80fd\u591f\u5f97\u5230\u4e0e\u539f\u59cb\u9ad8\u5ea6\u4e00\u81f4\u7684\u4f4d\u79fb\u3002\n\u4e3a\u4e86\u8fdb\u4e00\u6b65\u8fdb\u884c\u8fd9\u4e2a\u5b9e\u9a8c\uff0c\u4e0e\u955c\u9762\u53cd\u5c04\u63d0\u53d6\u7c7b\u4f3c\uff0c\u6211\u60f3\u4ece\u978b\u5b50\u7684\u591a\u4e2a\u89d2\u5ea6\u521b\u5efa\u9ad8\u5ea6\u8d34\u56fe\uff0c\u5e0c\u671b\u6211\u53ef\u4ee5\u4f7f\u7528Agisoft\u4e2d\u7684\u7eb9\u7406\u6295\u5f71\u5de5\u5177\u5c06\u8fd9\u4e9b\u9ad8\u5ea6\u8d34\u56fe\u6df7\u5408\u5230\u6a21\u578b\u66f2\u9762\u4e0a\u3002\u7406\u8bba\u4e0a\uff0c\u8fd9\u4e2a\u9ad8\u5ea6\u8d34\u56fe\u53ef\u4ee5\u4f5c\u4e3aZBrush\u4e2d\u7684\u7f6e\u6362\u6765\u5e94\u7528\uff0c\u4ece\u800c\u5728\u9ad8\u591a\u8fb9\u5f62\u6a21\u578b\u4e2d\u83b7\u5f97\u66f4\u7cbe\u786e\u7684\u8868\u9762\u7ec6\u8282\u3002\u5982\u679c\u6211\u80fd\u8ba9\u8fd9\u4e00\u5207\u987a\u5229\u8fdb\u884c\uff0c\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4f1a\u628a\u7ed3\u679c\u53d1\u5e03\u5728\u6211\u7684\u535a\u5ba2\u4e0a\u3002\u6240\u4ee5\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u611f\u5174\u8da3\u7684\u4eba\uff0c\u8bf7\u968f\u610f\u8ba2\u9605\u5e76\u89c2\u770b\u8fd9\u4e2a\u7a7a\u95f4\uff01\nEy Adam\u975e\u5e38\u611f\u8c22\u4f60\u5206\u4eab\u4f60\u7684\u77e5\u8bc6\u3002\u4f60\u7684\u5de5\u4f5c\u6d41\u7a0b\u5f88\u68d2\uff0c\u6700\u7ec8\u7ed3\u679c\u4e5f\u662f\u5982\u6b64\u3002\u606d\u559c\u4f60\u7684\u6210\u7ee9\uff01\uff01\uff01\u6211\u60f3\u77e5\u9053\u66f4\u591a\u5173\u4e8e\u4f60\u7684\u65b9\u6cd5\uff0c\u6211\u60f3\u77e5\u9053\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u978b\u7684\u5185\u90e8\u90e8\u5206\u2026\u4f60\u662f\u5426\u56e0\u4e3a\u5c01\u95ed\u533a\u57df\u800c\u5728\u8be5\u90e8\u5206\u6709\u6591\u70b9\u533a\u57df\u6216\u8868\u9762\u5b54\uff1f\u2026\u63d0\u524d\u611f\u8c22\uff0c\u518d\u6b21\u795d\u8d3a\u3002\n\u7ee7\u7eed\u5199\u4e0b\u53bb\uff0c\u6211\u662f\u8bf4\u217c\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u60ca\u4eba\u7684\u7f51\u7ad9\u9700\u8981\u66f4\u591a\u7684\u5173\u6ce8\u3002\u6211\u53ef\u80fd\u4f1a\u518d\u6b21\u56de\u5230\u96f7\u4e9a\u217e \u901a\u8fc7\u66f4\u591a\uff0c\u8c22\u8c22\u4f60\u7684\u4fe1\u606f\uff01\n\u55e8\uff0c\u4e9a\u5f53\uff0c\u4f60\u7684\u76f8\u673a\u7528\u7684\u662f\u5706\u504f\u632f\u6ee4\u5149\u7247\u5417\uff1f\u6211\u5728\u8d2d\u4e70\u4e00\u4e2a\u7c7b\u4f3c\u7684\u8bbe\u7f6e\u8fc7\u7a0b\u4e2d\uff0c\u6240\u4ee5\u4efb\u4f55\u4fe1\u606f\u5c06\u4e0d\u80dc\u611f\u6fc0\u3002\u8c22\u8c22\uff0c\u6770\u91cc\u7c73\n\u8fd9\u662f\u4e86\u4e0d\u8d77\u7684\u5de5\u4f5c\uff0c\u4e9a\u5f53\u3002\u6211\u4ece\u6ca1\u60f3\u8fc7\u7528\u8fd9\u79cd\u65b9\u6cd5\u626b\u63cf\u7269\u4f53\u3002\u6211\u6700\u8fd1\u5f00\u59cb\u4f7f\u7528\u5c3c\u5eb7D3300\u8fdb\u884c\u6444\u5f71\u6d4b\u91cf\uff0c\u6548\u679c\u975e\u5e38\u597d\u3002\u6211\u5f00\u59cb\u4e86\u6211\u7684\u7b2c\u4e00\u4e2a\u9879\u76ee\uff0c\u626b\u63cf\u6211\u7684\u81ea\u884c\u8f66\u5934\u76d4\uff08\u5728\u7528\u5a74\u513f\u7c89\u63b8\u8fc7\u4e4b\u540e\uff09\uff0c\u7ed3\u679c\u975e\u5e38\u5b8c\u7f8e\uff0c\u53ea\u662f\u9700\u8981\u91cd\u65b0\u7f29\u653e\u5b83\u4ee5\u9002\u5e94\u73b0\u5b9e\u4e16\u754c\u7684\u89c4\u6a21\u2026\u2026\u6211\u4ece\u4f60\u7684\u5de5\u4f5c\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\n\u55e8\uff0c\u4e9a\u5f53\uff0c\u771f\u7684\u5f88\u9177\uff01\u548c\u5176\u4ed6\u4eba\u4e00\u6837\uff0c\u6211\u6b63\u5728\u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2a\u626b\u63cf\u8bbe\u7f6e\uff0c\u53ea\u662f\u60f3\u77e5\u9053\u5b83\u4eec\u4f7f\u7528\u4e86\u4ec0\u4e48\u7c7b\u578b\u7684SpeedLite\u548c\u8fc7\u6ee4\u5668\uff1f\n\u6211\u5bf9\u7269\u8d28\u8bbe\u8ba1\u5e08\u8fd8\u6bd4\u8f83\u964c\u751f\u3002\u4f60\u662f\u5982\u4f55\u4ece\u591a\u5f20\u56fe\u50cf\u4e2d\u8ba1\u7b97\u51fa\u6b63\u5e38\u503c\u7684\u3002\u6211\u4e0d\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u5982\u6709\u4efb\u4f55\u5efa\u8bae\uff0c\u5c06\u4e0d\u80dc\u611f\u6fc0\u3002\n\u6211\u4e5f\u5728\u5c1d\u8bd5\u91cd\u73b0\u8fd9\u4e00\u70b9\uff0c\u5f88\u597d\u5947\u6211\u662f\u5426\u4e5f\u80fd\u5728\u6211\u7684\u76f8\u673a\u955c\u5934\u4e0a\u4f7f\u7528\u540c\u6837\u7684\u7ebf\u504f\u632f\u80f6\u7247\uff1f\u8fd8\u662f\u4e00\u5b9a\u8981\u7528\u5706\u6781\u5316\u80f6\u7247\uff1f\u81f3\u4e8e\u955c\u5934\uff0c\u4f60\u662f\u752835\u6beb\u7c73\u7684\u5168\u753b\u5e45\u4f20\u611f\u5668\u62cd\u6444\u7684\u5417\uff1f\n\u6211\u4e0d\u77e5\u9053\u4f60\u662f\u4ece\u54ea\u91cc\u5f97\u5230\u4fe1\u606f\u7684\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8bdd\u9898\u3002\u6211\u9700\u8981\u82b1\u4e00\u4e9b\u65f6\u95f4\u5b66\u4e60\u66f4\u591a\u6216\u7406\u89e3\u66f4\u591a\u3002\u611f\u8c22\u60a8\u63d0\u4f9b\u7684\u5b9d\u8d35\u4fe1\u606f\u6211\u6b63\u5728\u4e3a\u6211\u7684\u4efb\u52a1\u5bfb\u627e\u8fd9\u4e9b\u4fe1\u606f\u3002\n\u592a\u68d2\u4e86\uff01\u6211\u4e00\u76f4\u5728\u9976\u6709\u5174\u8da3\u5730\u9605\u8bfb\u4f60\u7684\u535a\u5ba2\u3002\u6211\u5f97\u5230\u4e86\u5149\u7684\u504f\u632f\uff0c\u5e76\u628a\u5b83\u4eec\u5e26\u5230\u4e86substance designer\u4e2d\uff0c\u4f46\u6211\u89c9\u5f97\u6211\u9519\u8fc7\u4e86\u4e00\u4e2a\u6b65\u9aa4\uff0c\u6211\u8bd5\u56fe\u5f04\u6e05\u695a\u4ece\u8fd9\u91cc\u5230photoscan\u4e2d\u4f7f\u7528\u4e86\u4ec0\u4e48\u8f93\u51fa\u3002\u60a8\u662f\u4ec5\u4ec5\u4f7f\u7528\u8f93\u51fa\u7684\u5e73\u9762\u56fe\u50cf\u6765\u83b7\u5f97\u66f4\u597d\u76843d\u6548\u679c\uff0c\u8fd8\u662f\u5c06substance designer\u4e2d\u7684\u6cd5\u7ebf\u548c\u9ad8\u5ea6\u6570\u636e\u4e0eagisoft\u751f\u6210\u76843d\u6a21\u578b\u7ed3\u5408\u8d77\u6765\uff1f\n\u4f60\u597d\u6211\u521a\u521a\u5f00\u59cb\u63a2\u7d22\u6444\u5f71\u6d4b\u91cf\u5b66\uff0c\u6211\u53d1\u73b0\u4f60\u7684\u535a\u5ba2\u975e\u5e38\u5b9d\u8d35\u3002\u8c22\u8c22\u5206\u4eab\u4f60\u7684\u77e5\u8bc6\u3002\u6211\u6709\u4e00\u4e2a\u95ee\u9898\u3002\u6211\u5df2\u7ecf\u8003\u8651\u8fc7\u4e3a\u6211\u7684\u5149\u6e90\u4e70\u4e00\u4e2a\u504f\u632f\u6ee4\u5149\u7247\uff0c\u4f46\u662f\u6ee4\u5149\u7247\u7684\u7a0b\u5ea6\u4e0d\u540c\u30020\u5ea6\u300145\u5ea6\u3001135\u5ea6\u7b49\u3002\u60a8\u5728SpeedLite\u4e0a\u4f7f\u7528\u4e86\u4ec0\u4e48\u7a0b\u5ea6\u7684\u8fc7\u6ee4\u5668\uff1f\n\u55e8\uff0c\u4e9a\u5f53\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u8f93\u51fa\u4ecd\u7136\u662f\u4e00\u4e2a\u7531\u6a21\u578b\u5236\u4f5c\u7684\u5417\uff1f\u4e0d\u662f\u73b0\u5b9e\u6355\u6349\uff1f\n\u4f60\u597d\uff01\u6211\u53eb\u514b\u6587\u3002\u6211\u628a\u5b83\u6df7\u5408\u5728Agisoft\u9762\u819c\u91cc\u3002\u6211\u6d4b\u8bd5\u4e86\u597d\u51e0\u6b21\u90fd\u6ca1\u6709\u6210\u529f\u3002\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u95ee\u9898\u3002\u6211\u53ef\u4ee5\u5411\u4f60\u5b66\u4e60\u3002\u6211\u5b66\u4e86\u4e00\u5e74\u6444\u5f71\u6d4b\u91cf\u5b66\uff0c\u4f46\u5bf9\u6444\u5f71\u6d4b\u91cf\u77e5\u4e4b\u751a\u5c11\u3002\u5e0c\u671b\u5411\u4f60\u5b66\u4e60\u3002\n\u4f60\u662f\u5982\u4f55\u6b3a\u9a97agisoft\uff0c\u4f7f\u5176\u8ba4\u4e3a\u4f60\u6709\u4e0d\u540c\u7684\u76f8\u673a\u89d2\u5ea6\u7684\uff1f-\u6211\u5728\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u65f6\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\u3002", "note_en": "It\u2019s been a while since my last shoe scanning post, and another pair of trainers just arrived, so it felt like a good time to write another one.\u00a0 The focus this time was to see if it is possible to make a cross polarised scanning booth on a \u2018shoe string\u2019 budget (shameless pun intended). For those who are not familiar with cross polarised photography, it is a capture technique used to filter specular reflectance from an image. With specular light bounce removed from an image you are left with \u00a0 flat diffuse colour, which is well suited for texturing and relighting 3D models.\n  One of the challenging aspects of scanning a shoe is figuring out how to suspend it in order to capture every angle. This can prove to be quite difficult, but with a recently discovered technique that I am calling \u2018masked blending\u2019, you can avoid this altogether. When I say \u2018masked blending\u2019 I am referring to a technique where you can use difference masking in Agisoft to\u00a0trick the software into believing two scans\u00a0were\u00a0captured in one continuous setup. So blending the scans can happen during the mesh calculation stage rather than the alternate approach of hacking multiple scans together in ZBrush \u2013 I will explain in more detail further down.\n As you can see in the image (right), my set up is pretty basic; a matte black backdrop (minus an iron for those shocking creases), a turntable and a couple of speedlite flashes. Despite all the creases, the black backdrop worked really well \u2013 especially when using the polarised filter, which did a great job of removing all light bounce across the creased areas.\u00a0My light source was two speedlites pointed inwards at a 45 degree angle from the camera, each with a strip of polarising gel taped over the front.\n When processing I used Lightroom for batching and colour correcting the images. I then generated a set of masks in Agisoft which helped isolate the subject during the processing stage. The matte black backdrop allowed me to generate a pretty good difference\u00a0mask and meant I could carefully flip the shoe mid way through the scan, but trick the software into thinking the\u00a0camera position had been changed instead, and therefore creating the\u00a0\u2018masked blending\u2019 effect that I mentioned earlier. Using this technique I was able to move the shoe and get coverage on multiple axis, and then combine them all together in Agisoft. I did have to do some mask cleanup work in AfterEffects, which took 10 minutes or so, but once I saw those two perfectly perpendicular rings of camera alignment in Agisoft, it definitely felt like one of those eureka moments.\n Since doing this test I have learned that turntable setups can be fairly manual and tedious, but there are a few things you can do to help speed things up. For example, using an intervalometer on your camera can make life easier. Also, a motorised turntable would make a lot of sense too, although I only thought about that after watching back a time-lapse of me hunching over the turntable waiting for the camera to fire every 5 seconds. See below a video of one of my earlier test shoots (worth noting that the time-lapse failed during the final scan, which was captured at night to help control lighting conditions).\n    When rebuilding the trainer I decided to avoid remodelling the knitted surface with all the individual threading, as this would either require some very clever modelling tricks, or a person with a lot of spare time on their hands. Instead I remodelled the basic forms in ZBrush, and extracted\u00a0high frequency details from the diffuse texture which gave the illusion of a knitted surface.\n The model is made up of ten \u00a0different parts, all with polarised texture maps that support a  PBR workflow, so they can be easily relit and rendered in Maya. All texture cleanup was done in Mari, apart from the laces which were created using various tiled patterns in Photoshop. I created alphas for the logo imprints on the rubber sole that were applied in ZBrush using the inflate tool, in the deformation palette. To recreate the curvy shapes on the sole I had to keep the topology fairly clean in order to retain the forms and remove any noise from the original scanned data.\n For a while now I have wateded to improve my surface detail capture when shooting for photogrammetry, so I decided to look into some photometric techniques. I have recently been learning Substance Designer, which is a great piece of software that creates procedural textures, but also has some amazing tools that support 3D scanning and photometric workflows.\n My first test was to try extracting specular information\u00a0from an image\u00a0using difference blending between polarised and non-polarised photos of the same subject. As you can see from the image (right) it seems to be working pretty well. The next step would be to calculate the\u00a0specular difference from various angles of the trainer and re-project those images onto the mesh in Agisoft to see how well it combines them together. I\u2019m curious as to whether this will actually work though, because specular reflections can vary depending on the material of the\u00a0surface, and the angle it is being viewed from.\n  The surface details in the renders of my final trainer model appear to be pretty good, however they are not totally accurate to the original shoe. The current surface details have been approximated using a \u2018bump from diffuse\u2019 approach, which uses RGB\u00a0data in the texture to create fine details on the surface of the model. This approach is not accurate as it uses darker values in the texture to negatively displace the surface and lighter values for positive displacement, and this doesn\u2019t always give you the correct result. Skin pores and facial stubble are a good example of this issue as both are darker in colour, however one requires a positive displacement and the other a negative.\n To solve this problem, my second photometric  test was to extract height (or depth) information from a photograph to create surface details accurate to real life. I did this by capturing a set of images using multi-directional light sources, then loading them into Substance Designer to calculate normal values across the shoe, which was then converted into a hight map.\n If you look at the rendered gif you can see during the clay wipe that the white tick is slightly protruding the surface of the model, which is not how it looks on the original. If I were to use the height map extracted in Substance Designer I should be able to get a displacement true to the original.\n  To take this experiment further, similar to the specular extraction, I would like to create height maps from multiple angles of the shoe, and hopefully I can blend these height maps together across\u00a0the model surface using the texture projection tool in Agisoft. In theory this height map could then be applied as a displacement in ZBrush to get much more accurate surface details across the high poly model. If I manage to get all this working, I will no doubt post the results on my blog. So for those of you who are interested, feel free to subscribe and watch this space!\n  Ey Adam, thanks a lot for share your konwledge. Your workflow is awesome and the final result too. Congratulations for the result!!! I would to know more about your method, and i would like to know how did you solved the internal part of the shoe\u2026 Do you had blochy areas or surface holes in that part because of the oclussion areas?\u2026 Thanks in advance and congrats one moretime.\n \u054fpot on with this write-up, I rea\u217cly think this amazing site  needs a great deal mor\u0435 attention. I\u2019ll probably be back again to rea\u217e through more,  thanks for the info!\n Hi Adam, are you using a circular polarized filter for your camera?  I\u2019m in the process of buying a similar setup so any info would be appreciated. Thanks,  Jeremy\n This is amazing work, Adam. I never thought to try something like this for scanning objects. I recently started using a Nikon D3300 for Photogrammetry and it works so well. I started my first project scanning my bike helmet (after dusting it with baby powder) and the results were PERFECT, except having to rescale it to fit the real world scale\u2026 I am learning so much from your work\n Hi Adam, really cool result! like others I\u2019m trying to create a scanning setup and was just wondering what type of speedlites and filters were used on them?\n I am relatively new to substance designer. How did you go about calculating the normal\u2019s from multiple images. I have no idea where to start. Any advice would be greatly appreciated.\n I\u2019m also trying to recreate this, and was curious to know if I can use the same linear polarized film over my camera lens also? Or does it have to be a circular polarized film? As for the lens, were you shooting on a 35mm equivalent on a full frame sensor?\n I\u2019m not sure where you are getting your information,  but good topic. I needs to spend some time learning much more or understanding more.  Thanks for excellent information I was looking for this information for my mission.\n Amazing work! been reading through your blog with great interest. I get the polarization of lighting and bringing those into substance designer but feel like I\u2019m missing a step I\u2019m trying to figure out what output is used from here into photoscan. Do you just use the outputted flat images to make a better 3d result or do you somehow combine the normals and height data in substance designer with the 3d model agisoft produces?\n Hi. I\u2019ve just begun exploring photogrammetry and I\u2019m finding your blog invaluable. Thanks for sharing you knowledge. I\u2019ve one question. I\u2019ve looked into buying a polarising filter for my light source but the filter sheets come in different degrees. 0, 45, 135 degrees, etc. What degree of filter did you used on your speedlites?\n  Hi Adam, so the final output is still a made by modelling? not reality capture?\n Hello there! My name is Kvein. I mixed it in Agisoft Mask. I tested it several times without success. I don\u2019t know what the problem is. I can learn from you. I have studied photogrammetry for a year, but I know very little about photogrammetry. Hope to learn from you.\n How did you tricked agisoft into thinking that you had different camera angles?  \u2013 I have some problems when doing this method.", "posttime": "2022-02-13 17:49:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9884\u7b97,polarised", "title": "\u978b\u5e26\u9884\u7b97\u7684\u4ea4\u53c9\u6781\u5316\u626b\u63cf\uff082017\u5e74\uff09", "title_en": "Cross Polarised Scanning on a Shoe String Budget (2017)", "transed": 1, "url": "https://adamspring.co.uk/2017/12/17/cross-polarised-scanning-shoe-string-photogrammetry/", "via": "", "real_tags": ["\u9884\u7b97", "polarised"]}]