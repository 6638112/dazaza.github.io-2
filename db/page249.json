[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1033293, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f00\u53d1\u8005\u4f7f\u7528\u7684\u4ee3\u7801\u6258\u7ba1\u670d\u52a1GitHub.com\u7684\u5168\u90e8\u6e90\u4ee3\u7801\u521a\u521a\u6cc4\u9732\u7ed9\u516c\u4f17\u3002\n\u5728\u4e00\u6b21\u5bf9GitHub DMCA\u5b98\u65b9\u5b58\u50a8\u5e93\u7684\u53ef\u7591\u63d0\u4ea4\u4e2d\uff0c\u4e00\u4e2a\u8eab\u4efd\u4e0d\u660e\u7684\u4eba\u4e0a\u4f20\u4e86\u673a\u5bc6\u6e90\u4ee3\u7801\uff0c\u5229\u7528GitHub\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e00\u4e2a\u6f0f\u6d1e\u5192\u5145\u4e86\u7eb3\u7279\u00b7\u5f17\u91cc\u5fb7\u66fc(Nat Friedman)\u3002\n\u4f5c\u4e3a\u5f00\u6e90\u7684\u6838\u5fc3\uff0cGitHub\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u56e0\u5bf9\u5176\u6e90\u4ee3\u7801\u4fdd\u5bc6\u800c\u53d7\u5230\u6279\u8bc4\u3002\u8be5\u5e73\u53f0\u6258\u7ba1\u7740\u6570\u767e\u4e07\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6279\u8bc4\u4eba\u58eb\u79f0GitHub\u7684\u7acb\u573a\u6709\u4e9b\u865a\u4f2a\u3002\n\u7136\u800c\uff0c\u8fd9\u5f15\u53d1\u4e86\u4eba\u4eec\u5bf9GitHub\u6e90\u4ee3\u7801\u5b89\u5168\u6027\u7684\u8d28\u7591\uff0c\u4ee5\u53ca\u5982\u679cGitHub\u786e\u5b9e\u8ba1\u5212\u516c\u5f00\u53d1\u5e03\u6e90\u4ee3\u7801\uff0cGitHub\u662f\u5426\u4f1a\u6709\u4ec0\u4e48\u635f\u5931\u3002\n\u4e00\u4e9b\u4eba\u62c5\u5fc3\u8fd9\u4f1a\u635f\u5bb3GitHub\u7684\u6574\u4f53\u5b89\u5168\uff0c\u8fd9\u53ef\u80fd\u662f\u771f\u7684\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5c01\u95ed\u6e90\u4ee3\u7801\u5e94\u7528\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u662f\u9ed8\u9ed8\u65e0\u95fb\u7684\u3002\u8fd9\u610f\u5473\u7740\u6e90\u4ee3\u7801\u662f\u9690\u85cf\u7684\uff0c\u76ee\u7684\u662f\u9690\u85cf\u5b89\u5168\u98ce\u9669\u3002\n\u81ea2018\u5e74\u5fae\u8f6f\u6536\u8d2dGitHub\u4ee5\u6765\uff0c\u5fae\u8f6f\u4e00\u518d\u5f3a\u8c03\u4ed6\u4eec\u5bf9\u5f00\u6e90\u7684\u70ed\u7231\u3002\u6211\u4eec\u4ece\u53cd\u590d\u7684\u5546\u4e1a\u5e7f\u544a\u4e2d\u770b\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e9b\u5e7f\u544a\u7684\u76ee\u7684\u662f\u8ba9\u5fae\u8f6f\u8d70\u5728\u5f00\u6e90\u5f00\u53d1\u7684\u524d\u6cbf\u3002\n\u4e00\u4e9b\u7528\u6237\uff0c\u5982Drew DeVault\uff0c\u6697\u793a\u5fae\u8f6f\u6b63\u8bd5\u56fe\u96c6\u4e2d\u5f00\u6e90\u3002\u901a\u8fc7\u5c01\u95ed\u6e90\u4ee3\u7801\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5bf9Git\u7684\u4e13\u6709\u6269\u5c55\uff0cGitHub\u88ab\u89c6\u4e3a\u4e00\u4e2a\u8bd5\u56fe\u5305\u542b\u5f00\u6e90\u7684\u5e73\u53f0\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u4f8b\u5b50\u662fGitHub\u79bb\u7ebf\u4e24\u4e2a\u5c0f\u65f6\uff0c\u5bfc\u81f4\u6570\u5343\u4e2a\u5f00\u6e90\u9879\u76ee\u65e0\u6cd5\u8bbf\u95ee\u548c\u4f7f\u7528\u3002\n\u4e5f\u8bb8GitHub\u665a\u4e8612\u5e74\u624d\u5411\u516c\u4f17\u516c\u5e03\u4ed6\u4eec\u7684\u6e90\u4ee3\u7801\uff1b\u4e5f\u8bb8\u8fd9\u6b63\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\u3002\u4f60\u8ba4\u4e3a\u5982\u4f55\uff1f", "note_en": "The entire source code for the code hosting service used by developers,  GitHub.com, has just been leaked to the public.\n In a suspicious  commit to the  official GitHub DMCA repository, an unknown individual uploaded the confidential source code, impersonating Nat Friedman using a bug in GitHub&#39;s application.\n At the heart of open-source, GitHub has long been criticised for keeping its source code private. The platform hosts millions of open-source projects, and critics say GitHub&#39;s position is somewhat hypocritical.\n However, this raises questions around the security of GitHub&#39;s source code, and whether or not GitHub have anything to lose, if they do plan to release the source code in a public setting.\n Some worry this will damage the overall security of GitHub, and this may be true. Commonly, closed-source applications perform &#34;security by obscurity&#34;. This means the source code is hidden, with the intention of concealing security risks.\n Since Microsoft&#39;s  acquisition of GitHub in 2018, Microsoft have repeatedly emphasised their &#34;love&#34; for open-source. We have seen this through repeated commercial advertisements, which aim to place Microsoft at the forefront of open-source development.\n Some users, such as Drew DeVault, suggest Microsoft is attempting to  centralise open-source. Through closed-source applications, and proprietary extensions to Git, GitHub is seen as a platform that tries to  contain open-source. An example of this is when  GitHub went offline for two hours, leaving thousands of open-source projects inaccessible and unusable.\n  Perhaps GitHub as 12 years late in finally revealing their source code to the public; and maybe this is just what we need.  What do you think?", "posttime": "2020-11-05 20:15:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,github,\u6e90\u4ee3\u7801,source", "title": "GitHub\u6e90\u4ee3\u7801\u6cc4\u9732", "title_en": "GitHub Source Code Leak", "transed": 1, "url": "https://resynth1943.net/articles/github-source-code-leak/", "via": "", "real_tags": ["\u4ee3\u7801", "github", "\u6e90\u4ee3\u7801", "source"]}, {"category": "", "categoryclass": "", "imagename": "fd89d343a489237db4bd95ab98b134e8.jpg", "infoid": 1033292, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u89c2\u70b9\u753b\u5eca-3\u56fe\u7247\u8bb8\u591a\u884c\u4e1a\u4f7f\u7528\u70ed\u91cf\u5bc6\u96c6\u7684\u8fc7\u7a0b\uff0c\u901a\u5e38\u9700\u8981\u71c3\u70e7\u5316\u77f3\u71c3\u6599\uff0c\u4f46\u4e00\u79cd\u4ee4\u4eba\u60ca\u8bb6\u7684\u7eff\u8272\u71c3\u6599\u66ff\u4ee3\u54c1\u6b63\u5728\u4ee5\u91d1\u5c5e\u7c89\u672b\u7684\u5f62\u5f0f\u51fa\u73b0\u3002\u78e8\u5f97\u5f88\u7ec6\u7684\u5ec9\u4ef7\u94c1\u7c89\u5728\u9ad8\u6e29\u4e0b\u5f88\u5bb9\u6613\u71c3\u70e7\uff0c\u5728\u4e0d\u6392\u653e\u78b3\u7684\u8fc7\u7a0b\u4e2d\u91ca\u653e\u80fd\u91cf\uff0c\u5e76\u4ea7\u751f\u5bb9\u6613\u6536\u96c6\u7684\u94c1\u9508\u6216\u6c27\u5316\u94c1\u4f5c\u4e3a\u5176\u552f\u4e00\u7684\u6392\u653e\u7269\u3002\n\u5982\u679c\u71c3\u70e7\u91d1\u5c5e\u7c89\u672b\u4f5c\u4e3a\u71c3\u6599\u542c\u8d77\u6765\u5f88\u5947\u602a\uff0c\u90a3\u4e48\u4e0b\u4e00\u6b65\u7684\u8fc7\u7a0b\u5c06\u66f4\u52a0\u4ee4\u4eba\u60ca\u8bb6\u3002\u4f7f\u7528\u7535\u529b\uff0c\u94c1\u9508\u53ef\u4ee5\u76f4\u63a5\u518d\u751f\u6210\u94c1\u7c89\uff0c\u5982\u679c\u4f60\u4f7f\u7528\u592a\u9633\u80fd\u3001\u98ce\u80fd\u6216\u5176\u4ed6\u96f6\u78b3\u53d1\u7535\u7cfb\u7edf\uff0c\u4f60\u6700\u7ec8\u4f1a\u5f97\u5230\u4e00\u4e2a\u5b8c\u5168\u65e0\u78b3\u7684\u5faa\u73af\u3002\u94c1\u4f5c\u4e3a\u71c3\u70e7\u8fc7\u7a0b\u4e2d\u7684\u4e00\u79cd\u6e05\u6d01\u7535\u6c60\uff0c\u901a\u8fc7\u5305\u62ec\u7535\u89e3\u5728\u5185\u7684\u591a\u79cd\u65b9\u6cd5\u4e4b\u4e00\u5145\u7535\uff0c\u5e76\u5728\u706b\u7130\u548c\u70ed\u91cf\u4e2d\u653e\u7535\u3002\n\u6700\u8fd1\uff0c\u8377\u5170\u7684Swinkels Family Brewers\u6210\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u5bb6\u5c06\u8fd9\u4e00\u5de5\u827a\u6295\u5165\u5de5\u4e1a\u89c4\u6a21\u7684\u4f01\u4e1a\u3002\u8be5\u516c\u53f8\u4e00\u76f4\u5728\u4e0e\u91d1\u5c5e\u7535\u529b\u8054\u76df(Metal Power Consortium)\u548c\u5fb7\u514b\u8428\u65af\u5927\u5b66\u57c3\u56e0\u970d\u6e29\u5206\u6821(TU Eindhoven)\u7684\u7814\u7a76\u4eba\u5458\u5408\u4f5c\uff0c\u5728\u5176\u5df4\u4f10\u5229\u4e9a\u5564\u9152\u5382\u5b89\u88c5\u5faa\u73af\u94c1\u71c3\u6599\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u80fd\u591f\u63d0\u4f9b\u6bcf\u5e74\u7ea61500\u4e07\u676f\u5564\u9152\u6240\u9700\u7684\u6240\u6709\u70ed\u91cf\u3002\n\u7687\u5bb6Swinkels Family Brewers\u7684\u9996\u5e2d\u6267\u884c\u5b98Peer Swinkels\u8bf4\uff1a\u201c\u6211\u4eec\u975e\u5e38\u81ea\u8c6a\u80fd\u6210\u4e3a\u7b2c\u4e00\u5bb6\u5728\u5de5\u4e1a\u89c4\u6a21\u4e0a\u6d4b\u8bd5\u8fd9\u79cd\u65b0\u71c3\u6599\u7684\u516c\u53f8\uff0c\u4ee5\u5e2e\u52a9\u52a0\u901f\u80fd\u6e90\u8f6c\u578b\uff0c\u201dRoyal Swinkels Family Brewers\u7684\u9996\u5e2d\u6267\u884c\u5b98\u4f69\u5c14\u00b7\u65af\u6e29\u514b\u65af(Peer Swinkels)\u8bf4\u3002\u201c\u4f5c\u4e3a\u4e00\u5bb6\u5bb6\u65cf\u4f01\u4e1a\uff0c\u6211\u4eec\u6295\u8d44\u4e8e\u53ef\u6301\u7eed\u5faa\u73af\u7ecf\u6d4e\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u4e16\u4ee3\u800c\u4e0d\u662f\u6309\u5e74\u9650\u601d\u8003\u7684\u3002\u6211\u4eec\u5728\u4e0e\u91d1\u5c5e\u7535\u529b\u8054\u76df\u7684\u5408\u4f5c\u4e2d\uff0c\u5c06\u8fd9\u79cd\u601d\u7ef4\u65b9\u5f0f\u4e0e\u9ad8\u8d28\u91cf\u7684\u77e5\u8bc6\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u901a\u8fc7\u8fd9\u9879\u521b\u65b0\u6280\u672f\uff0c\u6211\u4eec\u5e0c\u671b\u51cf\u5c11\u917f\u9020\u8fc7\u7a0b\u5bf9\u5316\u77f3\u71c3\u6599\u7684\u4f9d\u8d56\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u5728\u8fd9\u9879\u521b\u65b0\u4e0a\u6295\u5165\u8d44\u91d1\u3002\u201c\u3002\n\u4f5c\u4e3a\u4e00\u79cd\u53ef\u71c3\u70e7\u7684\u6e05\u6d01\u80fd\u6e90\u5b58\u50a8\u4ecb\u8d28\uff0c\u94c1\u7c89\u7684\u4f18\u70b9\u5305\u62ec\uff1a\u5b83\u4fbf\u5b9c\u800c\u4e30\u5bcc\uff1b\u5b83\u6613\u4e8e\u8fd0\u8f93\uff0c\u5177\u6709\u826f\u597d\u7684\u80fd\u91cf\u5bc6\u5ea6\uff1b\u5b83\u7684\u71c3\u70e7\u6e29\u5ea6\u9ad8\u8fbe1800\u6444\u6c0f\u5ea6(3272\u534e\u6c0f\u5ea6)\uff1b\u4ee5\u53ca(\u4f8b\u5982\uff0c\u4e0e\u6c22\u6c14\u4e0d\u540c)\u5b83\u4e0d\u9700\u8981\u4f4e\u6e29\u51b7\u5374\uff0c\u4e5f\u4e0d\u4f1a\u5728\u957f\u65f6\u95f4\u7684\u50a8\u5b58\u4e2d\u635f\u5931\u4efb\u4f55\u80fd\u91cf\u3002\n\u8be5\u7cfb\u7edf\u7684\u5f80\u8fd4\u80fd\u91cf\u5faa\u73af\u6548\u7387\u53d6\u51b3\u4e8e\u518d\u751f\u8fc7\u7a0b\u4e2d\u5c06\u80fd\u91cf\u8f93\u5165\u5230\u94c1\u4e2d\u7684\u8fc7\u7a0b\u3002\u6839\u636e\u8fd9\u7bc72018\u5e74\u7684\u8bba\u6587\uff0c\u9ad8\u6548\u7684\u6c27\u5316\u94c1\u7535\u89e3\u53ef\u4ee5\u5c06\u9ad8\u8fbe80%\u7684\u8f93\u5165\u80fd\u91cf\u50a8\u5b58\u5728\u94c1\u71c3\u6599\u4e2d-\u8fd9\u4e2a\u6570\u5b57\u4e0e\u4f60\u7528\u73b0\u4ee3\u6c22\u6c14\u5206\u79bb\u5f97\u5230\u7684\u6570\u5b57\u76f8\u4f3c\u3002\n\u8fd9\u9879\u6280\u672f\u8fd8\u6709\u66f4\u5b8f\u5927\u7684\u8ba1\u5212\uff0c\u4e0d\u4ec5\u4ec5\u662f\u542f\u52a8\u5355\u72ec\u7684\u5de5\u4e1a\u5e94\u7528\uff0c\u751a\u81f3\u662f\u4e3b\u8981\u8f93\u51fa\u70ed\u91cf\u7684\u5e94\u7528\u3002\nTU Eindhoven\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u53d1\u5c55\u91d1\u5c5e\u71c3\u6599\u7684\u7ec4\u7ec7\uff0c\u8be5\u7ec4\u7ec7\u7684\u5b66\u751f\u56e2\u961fSolid\u8d1f\u8d23\u4ebaChan Botter\u8bf4\uff1a\u201c\u6211\u4eec\u4e3a\u8fd9\u4e2a\u5de8\u5927\u7684\u91cc\u7a0b\u7891\u611f\u5230\u81ea\u8c6a\uff0c\u4f46\u6211\u4eec\u4e5f\u5c55\u671b\u4e86\u672a\u6765\u3002\u201d\u4ed6\u8bf4\uff1a\u201c\u76ee\u524d\u5df2\u7ecf\u6709\u4e00\u4e2a\u540e\u7eed\u9879\u76ee\uff0c\u76ee\u6807\u662f\u5b9e\u73b01\u5146\u74e6\u7684\u7cfb\u7edf\uff0c\u6211\u4eec\u8fd8\u81f4\u529b\u4e8e\u7cfb\u7edf\u7684\u6280\u672f\u6539\u8fdb\u3002\u6211\u4eec\u8fd8\u8ba1\u5212\u57282024\u5e74\u5efa\u6210\u4e00\u4e2a10\u5146\u74e6\u7684\u7cfb\u7edf\u3002\u6211\u4eec\u7684\u96c4\u5fc3\u58ee\u5fd7\u662f\u52302030\u5e74\u5c06\u9996\u6279\u71c3\u7164\u7535\u5382\u8f6c\u53d8\u4e3a\u53ef\u6301\u7eed\u7684\u94c1\u71c3\u6599\u5de5\u5382\u3002\u201c\n\u6839\u636e\u8fd9\u7bc72018\u5e74\u7684\u8bba\u6587\uff0c\u4f7f\u7528\u8fd9\u79cd\u5faa\u73af\u8fc7\u7a0b\u53d1\u7535\u53ef\u80fd\u4f1a\u63a5\u8fd140%\u5de6\u53f3\u7684\u7406\u8bba\u6548\u7387\u3002\u751f\u4ea7\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u7136\u540e\u4ee5\u4f4e\u6548\u7684\u6c7d\u8f6e\u673a\u53d1\u7535\u8fc7\u7a0b\u4e22\u5f0360%\u7684\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u8fd9\u770b\u8d77\u6765\u53ef\u80fd\u6709\u70b9\u5947\u602a\uff0c\u4f46\u8fd9\u6700\u7ec8\u53ef\u80fd\u6210\u4e3a\u4e00\u79cd\u7075\u6d3b\u4e14\u7ecf\u6d4e\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u6355\u83b7\u3001\u5206\u914d\u751a\u81f3\u51fa\u53e3\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u8fd9\u4e9b\u80fd\u6e90\u662f\u5728\u4e0d\u65b9\u4fbf\u7684\u65f6\u5019\u4ea7\u751f\u7684\uff0c\u5f53\u65f6\u6ca1\u6709\u76f4\u63a5\u9001\u5165\u7535\u7f51\u7684\u9700\u6c42\u3002\n\u901a\u8fc7\u73b0\u6709\u7684\u53d1\u7535\u57fa\u7840\u8bbe\u65bd\u8fd0\u884c\u94c1\u7c89\uff0c\u53ef\u80fd\u53ea\u662f\u9700\u8981\u6539\u88c5\u4ee5\u5904\u7406\u4e0d\u540c\u7684\u71c3\u70e7\u8fc7\u7a0b\uff0c\u8fd9\u5c06\u5b9e\u73b0\u4e00\u4e2a\u975e\u5e38\u6e05\u6d01\u3001\u4f46\u5bf9\u8d1f\u8377\u654f\u611f\u7684\u7535\u7f51\uff0c\u8be5\u7535\u7f51\u53ef\u4ee5\u5229\u7528\u4ece\u4e0a\u8ff0\u6e05\u6d01\u3001\u53ef\u518d\u751f\u80fd\u6e90\u518d\u751f\u4f5c\u4e1a\u6216\u4efb\u4f55\u6570\u91cf\u7684\u5de5\u4e1a\u5236\u9020\u4f5c\u4e1a\u4e2d\u7528\u5361\u8f66\u8fd0\u6765\u7684\u5bb9\u6613\u50a8\u5b58\u7684\u539f\u6750\u6599\u3002\n\u5f53\u7136\uff0c\u7ecf\u6d4e\u5b66\u6700\u7ec8\u5c06\u51b3\u5b9a\u8fd9\u4e00\u60f3\u6cd5\u4f1a\u8d70\u591a\u8fdc\uff0c\u800c\u5728\u76ee\u524d\u7684\u65e9\u671f\u9636\u6bb5\uff0c\u8fd9\u4e00\u70b9\u4ecd\u7136\u5b58\u5728\u7591\u95ee\u3002\u4f46\u8fd9\u4e00\u60f3\u6cd5\u770b\u8d77\u6765\u80af\u5b9a\u6bd4\u6c22\u6c14\u3001\u62bd\u6c34\u84c4\u80fd\u3001\u7535\u6c60\u6216\u52a8\u80fd\u50a8\u5b58\u6709\u4e00\u4e9b\u4f18\u52bf\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u4f7f\u7528\u5b83\u7684\u76ee\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u5c06\u5bc6\u5207\u5173\u6ce8\u3002\n\u67e5\u770b\u56fe\u5e93-3\u5f20\u56fe\u7247", "note_en": "View gallery - 3 images   Many industries use heat-intensive processes that generally require the burning of fossil fuels, but a surprising  green fuel alternative is emerging in the form of metal powders. Ground very fine, cheap iron powder burns readily at high temperatures, releasing energy as it oxidizes in a process that emits no carbon and produces easily collectable rust, or iron oxide, as its only emission.\n If burning metal powder as fuel sounds strange, the next part of the process will be even more surprising. That rust can be regenerated straight back into iron powder with the application of electricity, and if you do this using solar, wind or other zero-carbon power generation systems, you end up with a totally carbon-free cycle. The iron acts as a kind of clean battery for combustion processes, charging up via one of a number of means including electrolysis, and discharging in flames and heat.\n Recently, Swinkels Family Brewers in the Netherlands has become the first business in the world to put this process to work at an industrial scale. The company has been working with the Metal Power Consortium and researchers at TU Eindhoven to install a cyclical iron fuel system at its Brewery Bavaria that&#39;s capable of providing all the heat necessary for some 15 million glasses of beer a year.\n \u201cWe are enormously proud to be the first company to test this new fuel on an industrial scale in order to help accelerate the energy transition,\u201d said Peer Swinkels, CEO of Royal Swinkels Family Brewers. \u201cAs a family business, we invest in a sustainable and circular economy because we think in terms of generations, not years. We combine this way of thinking with high-quality knowledge in the collaboration with the Metal Power Consortium. Through this innovative technology, we want to make our brewing process less dependent on fossil fuels. We will continue to invest in this innovation.\u201d\n  As a burnable clean energy storage medium, iron powder&#39;s advantages include the fact that it&#39;s cheap and abundant, the fact that it&#39;s easy to transport and has a good energy density, its high burning temperature of up to 1,800 \u00b0C (3,272 \u00b0F), and the fact that (unlike hydrogen, for example) it doesn&#39;t need to be cryogenically cooled, or lose any energy during long periods of storage.\n The round-trip energy cycle efficiency of this system is dependent on the processes used to put the energy into the iron in the regeneration process. High-efficiency electrolysis of iron oxide can store as much as 80 percent of your input energy in the iron fuel, according to  this 2018 paper \u2013 a figure similar to what you get with  modern hydrogen splitting.\n There are bigger plans for this technology than just firing up individual industrial applications \u2013 or even just applications where the main output is heat.\n \u201cWhile we\u2019re proud of this huge milestone, we also look at the future,\u201d says Chan Botter, who leads  student team SOLID at TU Eindhoven, a group dedicated to the advancement of metal fuels. \u201cThere\u2019s already a follow-up project which aims to realize a 1-MW system in which we also work on the technical improvement of the system. We\u2019re also making plans for a 10-MW system that should be ready in 2024. Our ambition is to convert the first coal-fired power plants into sustainable iron fuel plants by 2030.\u201d\n  Using this kind of cyclical process to generate electricity could approach a theoretical efficiency around 40 percent, again according to  this 2018 paper. It might seem a little odd to generate renewable energy, then toss 60 percent of it out in the form of inefficient steam turbine generation processes, but this could end up being a flexible and cost-effective way to capture, distribute and even export renewable energy that&#39;s generated at inconvenient times when there&#39;s no demand for it to be fed directly into the grid.\n Running iron powder through existing power generation infrastructure, which may simply need retro-fitting to deal with a different combustion process, would enable a very clean, yet load-responsive power grid that could operate on an easily-stored stash of raw material trucked in either from clean, renewable energy regeneration operations as described above, or from any number of industrial manufacturing operations.\n Economics will eventually determine how far this idea gets, of course, and that remains in question at this early stage. But the idea certainly seems to have some advantages over hydrogen, pumped hydro, batteries or kinetic energy storage, depending on what you&#39;re using it for, and it&#39;s an interesting idea we&#39;ll be keeping an eye on.\n   View gallery - 3 images", "posttime": "2020-11-05 20:14:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5564\u9152\u5382,brewery,\u71c3\u6599", "title": "\u8377\u5170\u5564\u9152\u5382\u71c3\u70e7\u94c1\u4f5c\u4e3a\u4e00\u79cd\u6e05\u6d01\u3001\u53ef\u56de\u6536\u7684\u71c3\u6599", "title_en": "Dutch brewery burns iron as a clean, recyclable fuel", "transed": 1, "url": "https://newatlas.com/energy/bavarian-brewery-carbon-free-renewable-iron-fuel/", "via": "", "real_tags": ["\u5564\u9152\u5382", "brewery", "\u71c3\u6599"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033291, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b2c\u4e00\u4e2a\u4e5f\u662f\u552f\u4e00\u4e00\u4e2a\u7528\u4e8eWindows\u3001WebAssembly\u3001iOS\u3001MacOS\u3001Android\u548cLinux\u7684\u5355\u4ee3\u7801\u5e93\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\u5e73\u53f0\u3002\n\u552f\u4e00\u7684\u5f00\u6e90\u5e73\u53f0\uff0c\u7528\u4e8e\u521b\u5efa\u771f\u6b63\u7684\u5355\u6e90\u3001\u591a\u5e73\u53f0\u5e94\u7528\u7a0b\u5e8f\u3002\u8de8\u672c\u5730\u79fb\u52a8\u3001Web\u548c\u684c\u9762\u91cd\u752899%\u7684\u4e1a\u52a1\u903b\u8f91\u548c\u7528\u6237\u754c\u9762\u5c42\u3002\n\u4fdd\u6301\u5bf9\u50cf\u7d20\u53bb\u5411\u7684\u5b8c\u7f8e\u63a7\u5236\uff0c\u540c\u65f6\u53ef\u4ee5\u9009\u62e9\u5f00\u53d1\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u6216\u81ea\u5b9a\u4e49\u7684\u5e94\u7528\u7a0b\u5e8f\u5916\u89c2\u3002\n\u5bf9C#\u548cXAML\u7684\u719f\u6089\u548c\u4e30\u5bcc\uff0c\u4ee5\u53ca\u70ed\u91cd\u65b0\u52a0\u8f7d\u3001\u70ed\u91cd\u65b0\u542f\u52a8\u3001\u7f16\u8f91\u548c\u7ee7\u7eed\u7b49\u5de5\u4f5c\u6548\u7387\u7684\u63d0\u5347\u3002", "note_en": "The first and only UI Platform for single-codebase applications for Windows, WebAssembly, iOS, macOS, Android and Linux\n  The only open source-platform for creating true single-source, multi-platform applications. Reuse 99% of the business logic and UI layer across native mobile, web and desktop.\n  Maintain   pixel-perfect control over where pixels go while having a   choice of developing platform-specific or custom look and feel of your application.\n  Familiarity and richness of C# and XAML combined with productivity boosts of hot reload, hot restart, edit and continue and more.", "posttime": "2020-11-05 20:14:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,android,webassembly,windows,linux", "title": "Uno\uff1a\u9002\u7528\u4e8eWindows\u3001WebAssembly\u3001iOS\u3001MacOS\u3001Android\u548cLinux\u7684\u5355\u4ee3\u7801\u5e93", "title_en": "Uno: Single-Codebase for Windows, WebAssembly, iOS, macOS, Android and Linux", "transed": 1, "url": "https://platform.uno/", "via": "", "real_tags": ["\u4ee3\u7801", "android", "windows", "linux"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033290, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53d7\u5230\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u7684\u516c\u53f8\u5f80\u5f80\u9762\u4e34\u53cc\u91cd\u5a01\u80c1\uff1a\u5373\u4f7f\u4ed6\u4eec\u907f\u514d\u652f\u4ed8\u8d4e\u91d1\uff0c\u5e76\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u6062\u590d\uff0c\u5927\u7ea6\u4e00\u534a\u7684\u65f6\u95f4\u91cc\uff0c\u653b\u51fb\u8005\u4e5f\u5a01\u80c1\u8981\u516c\u5e03\u654f\u611f\u7684\u88ab\u76d7\u6570\u636e\uff0c\u9664\u975e\u53d7\u5bb3\u8005\u4e3a\u5220\u9664\u6570\u636e\u7684\u627f\u8bfa\u4e70\u5355\u3002\u6487\u5f00\u53d7\u5bb3\u8005\u53ef\u80fd\u5bf9\u653b\u51fb\u8005\u5b9e\u9645\u4e0a\u4f1a\u9500\u6bc1\u88ab\u76d7\u6570\u636e\u7684\u771f\u5b9e\u9884\u671f\u4e0d\u8c08\uff0c\u65b0\u7684\u7814\u7a76\u8868\u660e\uff0c\u76f8\u5f53\u6570\u91cf\u7684\u786e\u5b9e\u4ed8\u94b1\u7684\u53d7\u5bb3\u8005\u53ef\u80fd\u4f1a\u770b\u5230\u90e8\u5206\u6216\u5168\u90e8\u88ab\u76d7\u6570\u636e\u88ab\u516c\u5e03\u3002\nCoveware\u662f\u4e00\u5bb6\u4e13\u95e8\u5e2e\u52a9\u516c\u53f8\u4ece\u52d2\u7d22\u8f6f\u4ef6\u653b\u51fb\u4e2d\u6062\u590d\u7684\u516c\u53f8\uff0c\u8be5\u516c\u53f8\u4eca\u5929\u53d1\u5e03\u4e86\u4e00\u4efd\u62a5\u544a\uff0c\u5f97\u51fa\u4e86\u8fd9\u4e00\u53d1\u73b0\u3002Coveware\u8868\u793a\uff0c\u73b0\u5728\u51e0\u4e4e\u4e00\u534a\u7684\u52d2\u7d22\u8f6f\u4ef6\u6848\u4f8b\u90fd\u5305\u62ec\u91ca\u653e\u6cc4\u9732\u6570\u636e\u7684\u5a01\u80c1\u3002\n\u62a5\u544a\u6307\u51fa\uff1a\u201c\u4ee5\u524d\uff0c\u5f53\u52d2\u7d22\u8f6f\u4ef6\u7684\u53d7\u5bb3\u8005\u6709\u8db3\u591f\u7684\u5907\u4efd\u65f6\uff0c\u4ed6\u4eec\u53ea\u4f1a\u6062\u590d\u5e76\u7ee7\u7eed\u751f\u6d3b\uff1b\u751a\u81f3\u6ca1\u6709\u7406\u7531\u4e0e\u5a01\u80c1\u884c\u4e3a\u8005\u63a5\u89e6\u3002\u201d\u73b0\u5728\uff0c\u5f53\u5a01\u80c1\u53c2\u4e0e\u8005\u7a83\u53d6\u6570\u636e\u65f6\uff0c\u62e5\u6709\u5b8c\u5168\u53ef\u6062\u590d\u5907\u4efd\u7684\u516c\u53f8\u901a\u5e38\u4f1a\u88ab\u8feb\u81f3\u5c11\u4e0e\u5a01\u80c1\u53c2\u4e0e\u8005\u63a5\u89e6\uff0c\u4ee5\u786e\u5b9a\u7a83\u53d6\u4e86\u54ea\u4e9b\u6570\u636e\u3002\nCoveware\u8868\u793a\uff0c\u5b83\u770b\u5230\u4e86\u5927\u91cf\u8bc1\u636e\u8868\u660e\uff0c\u53d7\u5bb3\u8005\u5728\u4ed8\u8d39\u5220\u9664\u6570\u636e\u540e\uff0c\u770b\u5230\u90e8\u5206\u6216\u5168\u90e8\u88ab\u76d7\u6570\u636e\u88ab\u516c\u5e03\uff1b\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u6570\u636e\u751a\u81f3\u5728\u53d7\u5bb3\u8005\u6709\u673a\u4f1a\u8c08\u5224\u6570\u636e\u5220\u9664\u534f\u8bae\u4e4b\u524d\u5c31\u88ab\u516c\u5e03\u5728\u7f51\u4e0a\u3002\n\u201c\u4e0e\u534f\u5546\u89e3\u5bc6\u5bc6\u94a5\u4e0d\u540c\uff0c\u9690\u85cf\u88ab\u76d7\u6570\u636e\u7684\u534f\u5546\u6ca1\u6709\u6709\u9650\u7684\u7ec8\u70b9\uff0c\u201d\u8be5\u62a5\u544a\u7ee7\u7eed\u8bf4\u9053\u3002\u201c\u53d7\u5bb3\u4eba\u4e00\u65e6\u6536\u5230\u89e3\u5bc6\u5bc6\u94a5\uff0c\u5c31\u4e0d\u80fd\u5e26\u8d70\uff0c\u4e5f\u4e0d\u4f1a\u968f\u65f6\u95f4\u9000\u5316\u3002\u6709\u4e86\u88ab\u76d7\u7684\u6570\u636e\uff0c\u5a01\u80c1\u884c\u4e3a\u4eba\u53ef\u4ee5\u5728\u672a\u6765\u7684\u4efb\u4f55\u65f6\u5019\u56de\u6765\u8981\u6c42\u7b2c\u4e8c\u6b21\u4ed8\u6b3e\u3002\u4ee5\u5f80\u7684\u8bb0\u5f55\u592a\u77ed\uff0c\u800c\u4e14\u5df2\u7ecf\u5728\u6536\u96c6\u6709\u9009\u62e9\u5730\u8fdd\u7ea6\u7684\u8bc1\u636e\u3002\u201c\u3002\n\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5b83\u5efa\u8bae\u5ba2\u6237\u6c38\u8fdc\u4e0d\u8981\u652f\u4ed8\u6570\u636e\u5220\u9664\u8d4e\u91d1\uff0c\u800c\u662f\u8058\u8bf7\u79f0\u804c\u7684\u9690\u79c1\u5f8b\u5e08\uff0c\u5bf9\u54ea\u4e9b\u6570\u636e\u88ab\u76d7\u8fdb\u884c\u8c03\u67e5\uff0c\u5e76\u6839\u636e\u5f8b\u5e08\u548c\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u6cc4\u9732\u901a\u77e5\u6cd5\u7684\u5efa\u8bae\u901a\u77e5\u4efb\u4f55\u53d7\u5f71\u54cd\u7684\u5ba2\u6237\u3002\n\u7535\u8111\u5b89\u5168\u516c\u53f8Emsisoft\u7684\u9996\u5e2d\u6280\u672f\u5b98\u6cd5\u6bd4\u5b89\u00b7\u6c83\u8428\u5c14(Fabian Wosar)\u8868\u793a\uff0c\u52d2\u7d22\u8f6f\u4ef6\u53d7\u5bb3\u8005\u5728\u8bd5\u56fe\u963b\u6b62\u516c\u4f17\u4e86\u89e3\u5165\u4fb5\u4e8b\u4ef6\u65f6\uff0c\u5f80\u5f80\u9ed8\u8bb8\u6570\u636e\u53d1\u5e03\u52d2\u7d22\u8981\u6c42\u3002\n\u201c\u516c\u53f8\u4e0d\u5e0c\u671b\u8fd9\u4e9b\u6570\u636e\u88ab\u8f6c\u50a8\u6216\u51fa\u552e\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u5e0c\u671b\u5a01\u80c1\u884c\u4e3a\u4eba\u5220\u9664\u6570\u636e\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u4ece\u6cd5\u5f8b\u89d2\u5ea6\u770b\uff0c\u4ed6\u4eec\u662f\u5426\u5220\u9664\u6570\u636e\u5e76\u4e0d\u91cd\u8981\u3002\u6570\u636e\u5728\u88ab\u6e17\u51fa\u7684\u65f6\u5019\u5c31\u4e22\u5931\u4e86\u3002\u201c\nWosar\u8bf4\uff0c\u652f\u4ed8\u6570\u5b57\u5bc6\u94a5\u6765\u89e3\u9501\u88ab\u6076\u610f\u8f6f\u4ef6\u52a0\u5bc6\u7684\u670d\u52a1\u5668\u548c\u684c\u9762\u7cfb\u7edf\u7684\u52d2\u7d22\u8f6f\u4ef6\u53d7\u5bb3\u8005\u4e5f\u4f9d\u8d56\u4e8e\u5e0c\u671b\uff0c\u56e0\u4e3a\u89e3\u5bc6\u5bc6\u94a5\u65e0\u6cd5\u89e3\u9501\u90e8\u5206\u6216\u6240\u6709\u53d7\u611f\u67d3\u7684\u673a\u5668\u7684\u60c5\u51b5\u4e5f\u5e76\u4e0d\u5c11\u89c1\u3002\n\u201c\u5f53\u4f60\u67e5\u770b\u5927\u91cf\u8d4e\u91d1\u7eb8\u6761\u65f6\uff0c\u4f60\u5b9e\u9645\u4e0a\u53ef\u4ee5\u770b\u5230\u56e2\u4f53\u975e\u5e38\u76f4\u63a5\u5730\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ed6\u4eec\u7684\u77ed\u4fe1\u5185\u5bb9\u5927\u81f4\u662f\u8fd9\u6837\u7684\uff1a\u662f\u7684\uff0c\u4f60\u73b0\u5728\u5b8c\u86cb\u4e86\u3002\u4f46\u5982\u679c\u4f60\u4ed8\u94b1\u7ed9\u6211\u4eec\uff0c\u4e00\u5207\u90fd\u53ef\u4ee5\u56de\u5230\u6211\u4eec\u4e0a\u4f60\u4e4b\u524d\u7684\u72b6\u6001\u3002", "note_en": "Companies hit by ransomware often face a dual threat: Even if they avoid paying the ransom and can restore things from scratch, about half the time the attackers also threaten to release sensitive stolen data unless the victim pays for a promise to have the data deleted. Leaving aside the notion that victims might have any real expectation the attackers will actually destroy the stolen data, new research suggests a fair number of victims who do pay up may see some or all of the stolen data published anyway.\n  The findings come in  a report today from  Coveware, a company that specializes in helping firms recover from ransomware attacks. Coveware says nearly half of all ransomware cases now include the threat to release exfiltrated data.\n \u201cPreviously, when a victim of ransomware had adequate backups, they would just restore and go on with life; there was zero reason to even engage with the threat actor,\u201d the report observes. \u201cNow, when a threat actor steals data, a company with perfectly restorable backups is often compelled to at least engage with the threat actor to determine what data was taken.\u201d\n Coveware said it has seen ample evidence of victims seeing some or all of their stolen data published after paying to have it deleted; in other cases, the data gets published online before the victim is even given a chance to negotiate a data deletion agreement.\n \u201cUnlike negotiating for a decryption key, negotiating for the suppression of stolen data has no finite end,\u201d the report continues. \u201cOnce a victim receives a decryption key, it can\u2019t be taken away and does not degrade with time. With stolen data, a threat actor can return for a second payment at any point in the future. The track records are too short and evidence that defaults are selectively occurring is already collecting.\u201d\n  The company said it advises clients never to pay a data deletion ransom, but rather to engage competent privacy attorneys, perform an investigation into what data was stolen, and notify any affected customers according to the advice of counsel and application data breach notification laws.\n Fabian Wosar, chief technology officer at computer security firm  Emsisoft, said ransomware victims often acquiesce to data publication extortion demands when they are trying to prevent the public from learning about the breach.\n \u201cThe company doesn\u2019t want the data to be dumped or sold. So they pay for it hoping the threat actor deletes the data. Technically speaking, whether they delete the data or not doesn\u2019t matter from a legal point of view. The data was lost at the point when it was exfiltrated.\u201d\n Ransomware victims who pay for a digital key to unlock servers and desktop systems encrypted by the malware also are relying on hope, Wosar said, because it\u2019s also not uncommon that a decryption key fails to unlock some or all of the infected machines.\n \u201cWhen you look at a lot of ransom notes, you can actually see groups address this very directly and have texts that say stuff along the lines of, Yeah, you are fucked now. But if you pay us, everything can go back to before we fucked you.&#39;\u201d", "posttime": "2020-11-05 20:13:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u88ab\u76d7,delete,\u6570\u636e", "title": "\u4e3a\u4ec0\u4e48\u4e3a\u5220\u9664\u88ab\u76d7\u6570\u636e\u4ed8\u8d39\u662f\u4ef6\u75af\u72c2\u7684\u4e8b", "title_en": "Why Paying to Delete Stolen Data Is Bonkers", "transed": 1, "url": "https://krebsonsecurity.com/2020/11/why-paying-to-delete-stolen-data-is-bonkers/", "via": "", "real_tags": ["\u88ab\u76d7", "delete", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033289, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u768418\u4e2a\u6708\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u8111\u6d77\u4e2d\u65ad\u65ad\u7eed\u7eed\u5730\u73a9\u5f04\u7740\u4e00\u4e2a\u7406\u8bba\u4e0a\u7684\u60f3\u6cd5\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u5b8c\u5168\u5927\u58f0\u5730\u8868\u8fbe\u51fa\u6765\u3002\u5b83\u6d89\u53ca\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6240\u6709\u6743\u8bed\u4e49(OS)\u6216\u79fb\u52a8\u8bed\u4e49\u7684\u6982\u5ff5\u3002\u4ece\u6839\u672c\u4e0a\u8bf4\uff0c\u672c\u6587\u662f\u5bf9\u8fd9\u4e00\u6982\u5ff5\u7684\u6279\u5224\uff0c\u5e76\u6307\u51fa\u8fd9\u4e00\u6982\u5ff5\u662f\u4f20\u7edf\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e8c\u5143\u6027\uff0c\u4f46\u9002\u7528\u4e8e\u4e0d\u540c\u7684\u9886\u57df\u3002\n\u672c\u6587\u4e2d\u4f7f\u7528\u7684\u672f\u8bed\u5b9a\u4e49\u7684\u4e00\u822c\u5217\u8868\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6df7\u6dc6\u3002\n(\u6570\u636e)\u7c7b\u578b\u662f\u4e00\u4e2a\u503c\u7684\u5c5e\u6027\uff0c\u5b83\u7f16\u7801\u6709\u5173\u5982\u4f55\u5bf9\u6570\u636e\u503c\u8fdb\u884c\u64cd\u4f5c\u7684\u4fe1\u606f\u3002\n\u81ea\u6709\u4ef7\u503c\u662f\u4e00\u79cd\u5c5e\u4e8e\u4ef7\u503c\u6240\u6709\u6743\u7b49\u7ea7\u7684\u4ef7\u503c\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u662f\u7531\u4ee3\u7406\u4eba\u7ba1\u7406\u7684\u3002\n\u8303\u4f8b\u662f\u4e00\u79cd\u5bf9\u7f16\u7a0b\u8bed\u8a00\u7ed3\u6784\u6a21\u578b\u8fdb\u884c\u5206\u7c7b\u7684\u65b9\u6cd5\uff1b\u8303\u4f8b\u662f\u4e00\u79cd\u89e3\u91ca\u6a21\u578b\u3002\n\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b(OOP)--\u901a\u5e38\u901a\u8fc7\u5c06\u6570\u636e\u548c\u4ee3\u7801\u8026\u5408\u5230\u5355\u4e2a\u5355\u5143\u4e2d\uff0c\u56f4\u7ed5\u5bf9\u8c61\u7684\u552f\u4e00\u6982\u5ff5\u6784\u5efa\u7a0b\u5e8f\u7684\u8303\u4f8b\u3002\n\u5c3d\u7ba1Alan Kay 1\u521b\u9020\u7684\u672f\u8bed\u7684\u539f\u59cb\u6982\u5ff5\u4ece\u672a\u6309\u7167\u4ed6\u7684\u610f\u56fe\u4f7f\u7528\uff0c\u4f46\u672f\u8bed\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b(OOP)\u901a\u5e38\u88ab\u7406\u89e3\u4e3a\u4e00\u79cd\u56f4\u7ed5\u5bf9\u8c61\u6982\u5ff5\u6784\u5efa\u7a0b\u5e8f\u7684\u8303\u4f8b\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u5c06\u6570\u636e\u548c\u4ee3\u7801\u8026\u5408\u5230\u5355\u4e2a\u5355\u5143\u4e2d\u6765\u5b9e\u73b0\u7684\u3002\u8bb8\u591a\u8bed\u8a00\u652f\u6301\u591a\u79cd\u8303\u5f0f\uff0c\u5305\u62ec\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8303\u5f0f\u7684\u65b9\u9762\uff0c\u4f46\u6211\u5c06\u5b83\u4eec\u5f52\u7c7b\u4e3a\u591a\u8303\u5f0f\uff0c\u800c\u4e0d\u53ea\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u3002\n\u5927\u591a\u6570\u8bed\u8a00\u6309\u7167Simula\u4f20\u7edf\u5b9e\u73b0\u5bf9\u8c61\u548c\u7c7b\uff1b\u5927\u591a\u6570\u8457\u540d\u7684OOP\u8bed\u8a00\u901a\u8fc7\u5728\u7c7b\u5b9a\u4e49\u4e2d\u5b9a\u4e49\u65b9\u6cd5(\u6210\u5458\u51fd\u6570)\u6765\u5b9e\u73b0\u7c7b\u4f3c\u7684\u5f62\u5f0f\u3002\u4f20\u7edf\u4e0a\uff0cJava\u7b49\u8bed\u8a00\u53ef\u4ee5\u5355\u72ec\u5f52\u7c7b\u4e3a\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\u3002\n\u5927\u591a\u6570\u4f20\u7edf\u7684OOP\u8bed\u8a00\u90fd\u57fa\u4e8e\u7ee7\u627f\u7684\u6982\u5ff5\uff0c\u7ee7\u627f\u662f\u4e00\u79cd\u4ece\u53e6\u4e00\u4e2a\u7c7b\u6570\u636e\u7c7b\u578b\u6d3e\u751f\u7c7b\u6570\u636e\u7c7b\u578b\u5e76\u4fdd\u7559\u7c7b\u4f3c\u4fe1\u606f\u7684\u673a\u5236\u3002\u5927\u591a\u6570\u4eba\u901a\u5e38\u8ba4\u4e3a\u7ee7\u627f\u662f\u5b50\u7c7b\u578b\u548c\u901a\u8fc7\u865a\u62df\u65b9\u6cd5\u8868(Vtable)\u8fdb\u884c\u52a8\u6001\u8c03\u5ea6\u7684\u7ec4\u5408\u3002\u8fd9\u5f15\u53d1\u4e86\u5f88\u591a\u8ba8\u8bba\uff0c\u5982\u679c\u4e00\u79cd\u8bed\u8a00\u4e0d\u652f\u6301\u7ee7\u627f2\uff0c\u90a3\u4e48\u5b83\u662f\u5426\u53ef\u4ee5\u88ab\u79f0\u4e3a\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u3002\n\u6700\u8fd1\uff0c\u7ee7\u627f\u5df2\u7ecf\u4e0d\u518d\u6d41\u884c\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u7ec4\u62103\u3002\u8fd9\u4e3b\u8981\u662f\u7531\u4e8e\u5c06\u7c7b\u7b26\u5408\u4e25\u683c(\u5355\u4e00)\u4ee3\u7406\u5c42\u6b21\u7ed3\u6784\u7684\u95ee\u9898\uff0c\u800c\u5b9e\u9645\u4e0a\uff0c\u4e8b\u7269\u53ef\u4ee5\u5c5e\u4e8e\u8bb8\u591a(\u5982\u679c\u4e0d\u662f\u65e0\u9650\u7684)\u7c7b\u522b\u548c\u5c42\u6b21\u7ed3\u6784\uff0c\u4ee5\u53ca\u6211\u5c06\u5728\u6574\u7bc7\u6587\u7ae0\u4e2d\u8ba8\u8bba\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\u3002\n\u5bf9OOP 4 5 6 6 7 8 9\u6709\u5f88\u591a\u6279\u8bc4\uff0c\u4f46\u6211\u4e00\u822c\u7684\u6279\u8bc4\u662f\uff0c\u5b83\u628a\u91cd\u70b9\u4ece\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u8f6c\u79fb\u5230\u8bd5\u56fe\u89e3\u51b3\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u95ee\u9898\uff0c\u800c\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u662f\u7a0b\u5e8f\u672c\u8d28\u7684\u6838\u5fc3\u3002\n\u7531\u4e8e\u5bf9\u8c61\u672c\u8eab\u88ab\u89c6\u4e3a\u5177\u6709\u884c\u4e3a(\u800c\u4e0d\u4ec5\u4ec5\u662f\u7c7b\u578b\u5c5e\u6027)\uff0c\u56e0\u6b64\u5b83\u4eec\u5b9e\u9645\u4e0a\u88ab\u89c6\u4e3a\u7a0b\u5e8f\u4e2d\u7684\u4ee3\u7406\u3002\u8fd9\u79cd\u601d\u7ef4\u6a21\u5f0f\u6709\u5f88\u591a\u7ed3\u8bba\uff0c\u5176\u4e2d\u5f88\u591a\u90fd\u4f1a\u5f15\u53d1\u95ee\u9898\u3002\n\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u662f\u4e00\u79cd\u88ab\u8bef\u89e3\u548c\u8bef\u7528\u7684\u4e9a\u91cc\u58eb\u591a\u5fb7\u5f62\u800c\u4e0a\u5b66\uff0c\u9002\u7528\u4e8e\u5b83\u4ece\u672a\u6253\u7b97\u5efa\u6a21\u7684\u9886\u57df\u3002\n\u6211\u8fd9\u6837\u8bf4\u7684\u610f\u601d\u662f\uff0c\u4eba\u4e3a\u5730\u5c06\u6570\u636e\u548c\u7c7b\u578b\u4e4b\u95f4\u7684\u4efb\u4f55/\u6240\u6709\u5173\u7cfb\u90fd\u9075\u5faa\u4eba\u4e3a\u7684\u4ee3\u7406\u5c42\u6b21\u7ed3\u6784\uff0c\u662f\u5929\u771f-\u4e9a\u91cc\u58eb\u591a\u5fb7\u5f0f\u5f62\u800c\u4e0a\u5b66\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u7531\u4e8e\u7f16\u7a0b\u5bf9\u8c61\u4e2d\u6ca1\u6709\u5b9e\u9645\u7684\u4ee3\u7406\uff0c\u8fd9\u662f\u4e00\u4e2a\u90e8\u5206\u8c2c\u8bef\u3002\u5f53\u7a0b\u5e8f\u8bd5\u56fe\u4f7f\u5176\u5177\u6709\u7279\u5b9a\u7684\u7ed3\u6784\u65f6\uff0c\u5982\u679c\u5b83\u4e0d\u662f\u81ea\u7136\u7684\uff0c\u90a3\u4e48\u7a0b\u5e8f\u4e2d\u6ca1\u6709\u7ed3\u6784\u6bd4\u7cdf\u7cd5\u7684\u7ed3\u6784\u66f4\u6709\u7528\u3002\n\u5411\u7c7b/\u5bf9\u8c61\u6dfb\u52a0\u65b9\u6cd5\u7684\u6982\u5ff5\u5df2\u88ab\u8bc1\u660e\u5bf9\u8bb8\u591a\u4eba\u5f88\u6709\u7528\u3002\u771f\u6b63\u7684\u95ee\u9898\u662f\uff1a\n\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u6211\u6562\u6253\u8d4c\uff0c\u5728\u5f3a\u8c03\u7ee7\u627f\u800c\u4e0d\u662f\u7ec4\u5408\u7684\u8bed\u8a00(\u5982C++\u6216Java)\u4e2d\uff0c\u65b9\u6cd5\u88ab\u89c6\u4e3a\u5c06\u51fd\u6570/\u8fc7\u7a0b\u4e0e\u6570\u636e\u8bb0\u5f55\u5206\u7c7b\u548c\u5173\u8054\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u91c7\u7528\u8fd9\u79cd\u65b9\u6cd5\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\n\u5141\u8bb8\u5c06\u65b9\u6cd5\u4f5c\u4e3a\u4ee5\u4e3b\u8c13\u5bbe\u8bed\u65b9\u5f0f\u7f16\u5199\u8c03\u7528\u7684\u8bed\u6cd5\u7cd6\u7684\u5f62\u5f0f\uff0c\u4f8b\u5982foo_do_thing(x\uff0cy)vs x.do_thing(Y)\u3002\n\u6839\u636e\u7ecf\u9a8c\uff0c\u6211\u53d1\u73b0\u957f\u671f\u4f7f\u7528\u201c\u9762\u5411\u5bf9\u8c61\u201d\u8bed\u8a00\u7684\u7528\u6237\u6700\u7ec8\u5f00\u59cb\u4e3b\u8981\u4f7f\u7528\u524d\u4e24\u79cd\u65b9\u6cd5\u6765\u5904\u7406\u65b9\u6cd5\u3002\n\u6211\u4e0d\u4f1a\u6df1\u5165\u8ba8\u8bbaOOP\u7684\u5176\u4ed6\u4e3b\u8981\u65b9\u9762\uff0c\u5982\u5c01\u88c5\u3001\u672c\u5730\u4fdd\u7559\u3001\u591a\u6001\u5f62\u5f0f\u7b49\uff0c\u56e0\u4e3a\u5206\u5c42\u6027\u8d28\u662f\u672c\u6587\u5173\u6ce8\u7684\u57fa\u672c\u65b9\u9762\u3002\u4ee3\u7406\u7684(\u7ebf\u6027)\u5c42\u7ea7\u662f\u4e3b\u8981\u95ee\u9898\u3002\u4eba\u4eec\u4e4b\u6240\u4ee5\u4e3b\u5f20\u7ec4\u5408\u800c\u4e0d\u662f\u7ee7\u627f\uff0c\u662f\u56e0\u4e3a\u5b83\u4f7f\u8fd9\u79cd\u7ebf\u6027\u5c42\u6b21\u53d8\u5f97\u6241\u5e73\uff0c\u964d\u4f4e\u4e86\u5b83\u7684\u5f71\u54cd\u3002\u5b83\u662f\u4ece\u540d\u4e49\u7c7b\u578b\u5230\u7ed3\u6784\u7c7b\u578b\u7684\u8fc7\u6e21\uff0c\u66f4\u7075\u6d3b\uff0c\u56e0\u4e3a\u8bb8\u591a\u6570\u636e\u7ed3\u6784\u548c\u95ee\u9898\u5177\u6709\u975e\u7ebf\u6027\u6027\u8d28\uff0c\u8fd9\u662f\u7ebf\u6027\u65b9\u6cd5\u65e0\u6cd5\u5904\u7406\u7684\u3002\u5f53\u8bd5\u56fe\u575a\u6301\u4e25\u683c\u7684\u5c42\u6b21\u7ed3\u6784\u7c7b\u578b\u7cfb\u7edf\u65b9\u6cd5\u65f6\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u8bb8\u591a\u95ee\u9898\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5927\u591a\u6570\u95ee\u9898\u6765\u8bf4\uff0c\u6570\u636e\u66f4\u591a\u7684\u662f\u56fe\u5f62(\u975e\u7ebf\u6027)\uff0c\u800c\u4e0d\u662f\u6811\u5f62(\u7ebf\u6027)\u3002\u8fd9\u79cd\u4e25\u683c\u7684\u5c42\u6b21\u7ed3\u6784\u4e5f\u53d1\u751f\u5728\u5bf9\u8c61\u7ea7\u522b\u7684\u5c01\u88c5\u4e2d\uff0c\u5373\u6d88\u606f/\u5f15\u7528\u7684\u4e25\u683c\u5c42\u6b21\u7ed3\u6784\uff1b\u8fd9\u79cd\u5c42\u6b21\u7ed3\u6784\u6027\u8d28\u6e90\u4e8e\u6982\u5ff5\u4ee3\u7406\u672c\u8eab\uff0c\u7ee7\u627f\u4e0d\u662f\u6839\u672c\u539f\u56e0\u3002\n\u6ce8\uff1a\u7ee7\u627f\u5e76\u4e0d\u5168\u662f\u574f\u4e8b\uff0c\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u786e\u5b9e\u6709\u5f88\u591a\u5b9e\u9645\u7528\u9014\uff0c\u4f46\u5728\u4f7f\u7528\u5b83\u4eec\u4e4b\u524d\u5fc5\u987b\u77e5\u9053\u8fd9\u4e9b\u6210\u672c\uff0c\u5c31\u50cf\u4f7f\u7528\u4efb\u4f55\u5de5\u5177\u4e00\u6837\u3002\n\u6ce8\uff1a\u7ebf\u6027\u5173\u7cfb\u4e0e\u6570\u636e\u7ed3\u6784\u672c\u8eab\u6709\u5173\uff0c\u800c\u4e0e\u7b97\u6cd5\u65e0\u5173\u3002\nC++11\u5f15\u5165\u4e86\u79fb\u52a8\u8bed\u4e49\u6216\u6240\u6709\u6743\u8bed\u4e49(OS)\u7684\u6982\u5ff5\uff0c\u8fd9\u662f\u4e00\u79cd\u901a\u8fc7\u590d\u5236\u6784\u9020\u51fd\u6570\u6700\u5c0f\u5316\u6570\u636e\u590d\u5236\u7684\u65b9\u6cd5\u3002\u5b83\u5229\u7528\u589e\u52a0\u7684r\u503c\u5f15\u7528(T&amp\uff1b&amp\uff1b)\u6982\u5ff5\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u7136\u800c\uff0c\u8fd9\u4e2a\u6982\u5ff5\u5f00\u59cb\u88ab\u7528\u4e8e\u8fdc\u8fdc\u8d85\u51fa\u5176\u57fa\u672c\u76ee\u7684\u7684\u7528\u9014\u3002\u8fd9\u4e2a\u6982\u5ff5\u589e\u52a0\u4e86\u201c\u79fb\u52a8\u201d\u5bf9\u8c61\u800c\u4e0d\u662f\u201c\u590d\u5236\u201d\u5bf9\u8c61\u7684\u9ad8\u7ea7\u62bd\u8c61\u3002\u4ece\u7269\u7406\u4e0a\u8bb2\uff0c\u8ba1\u7b97\u673a\u53ea\u4f1a\u590d\u5236\uff0c\u8fd9\u79cd\u9ad8\u5c42\u6b21\u7684\u62bd\u8c61\uff0c\u628a\u5bf9\u8c61\u5f53\u4f5c\u201c\u771f\u5b9e\u7684\u5bf9\u8c61\u201d\u6765\u5bf9\u5f85\uff0c\u8fd9\u5e76\u4e0d\u662f\u5b9e\u9645\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u5c06\u5b83\u4eec\u89c6\u4e3a\u201c\u771f\u5b9e\u5bf9\u8c61\u201d\u4e5f\u662f\u4e00\u4e2a\u8303\u7574\u9519\u8bef\uff0c\u56e0\u4e3a\u201c\u771f\u5b9e\u5bf9\u8c61\u201d\u548c\u201c\u7f16\u7a0b\u5bf9\u8c61\u201d\u5728\u672c\u4f53\u8bba\u4e0a\u51e0\u4e4e\u6ca1\u6709\u8054\u7cfb\u3002\u5f53\u4e00\u4e2a\u503c\u6216\u5bf9\u8c61\u88ab\u201c\u79fb\u52a8\u201d\u65f6\uff0c\u8fd9\u610f\u5473\u7740\u8be5\u5bf9\u8c61\u7684\u8d44\u6e90\u7684\u8d23\u4efb\u5df2\u7ecf\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5bf9\u8c61\u6216\u73af\u5883\u4e3b\u4f53\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u6743/\u79fb\u52a8\u8bed\u4e49\u57fa\u672c\u4e0a\u662f\u57fa\u4e8e\u8ddf\u8e2a\u503c\u4f7f\u7528\u60c5\u51b5\u7684\u503c\u7684\u804c\u8d23\u3002\n\u5728\u8fd9\u79cd\u4ee3\u7406\u6a21\u5f0f\u4e0b\uff0c\u4ee3\u7406\u7684\u7ade\u6280\u573a\u53ef\u4ee5\u91c7\u53d6\u591a\u79cd\u5f62\u5f0f\uff0c\u5982\u533a\u5757\u3001\u7a0b\u5e8f\u4e3b\u4f53\u6216\u805a\u5408\u4ef7\u503c\u3002\u56e0\u6b64\uff0c\u4e00\u4e9b\u62e5\u6709\u4ef7\u503c\u7684\u4eba\u8fd8\u62e5\u6709\u5176\u4ed6\u4ef7\u503c\uff0c\u56e0\u6b64\u4ef7\u503c\u53ef\u80fd\u5177\u6709\u4ee3\u7406\u6027\u3002\n\u5982\u679c\u6211\u4eec\u628a\u6240\u6709\u6743\u8bed\u4e49\u5b66\u79f0\u4e3a\u4e00\u79cd\u8303\u5f0f\uff0c\u90a3\u5c31\u662f\u4ee5\u4e00\u79cd\u5c42\u6b21\u5206\u660e\u7684\u65b9\u5f0f\u56f4\u7ed5\u4ef7\u503c\u7684\u8d23\u4efb\u8fdb\u884c\u5b9a\u4f4d\uff0c\u628a\u91cd\u70b9\u4ece\u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\u8f6c\u79fb\u5230\u8fd9\u4e2a\u8d23\u4efb\u4f53\u7cfb\u4e0a\u3002\n\u8d23\u4efb\u548c\u6240\u6709\u6743\u7684\u6982\u5ff5\u4e0e\u73b0\u5b9e\u4e16\u754c\u7684\u5bf9\u5e94\u6982\u5ff5\u76f8\u4f3c\uff0c\u56e0\u4e3a\u62e5\u6709\u67d0\u79cd\u4e1c\u897f\u610f\u5473\u7740\u5bf9\u5b83\u62e5\u6709\u72ec\u5bb6\u4f7f\u7528\u548c\u5168\u90e8\u8d23\u4efb\u3002\nRust\u662f\u4e00\u79cd\u591a\u8303\u4f8b\u7f16\u7a0b\u8bed\u8a00\uff0c\u4f46\u5176\u6838\u5fc3\u662f\u4e00\u79cd\u9762\u5411\u6240\u6709\u6743\u7684\u8bed\u8a00\u3002\u94c1\u9508\u4e2d\u7684\u6bcf\u4e00\u6837\u4e1c\u897f\u90fd\u6709\u4e00\u4e2a\u201c\u6240\u6709\u6743\u201d\u548c\u4e0e\u4e4b\u76f8\u5173\u7684\u751f\u547d\u5468\u671f\u7684\u6982\u5ff5\u3002Ruust\u7684\u8bbe\u8ba1\u521d\u8877\u662f\u8981\u9996\u5148\u505a\u5230\u201c\u5b89\u5168\u201d\uff0c\u5c24\u5176\u662f\u5728\u5e76\u53d1\u6027\u65b9\u9762\u3002Rust\u5728\u7406\u5ff5\u548c\u98ce\u683c\u4e0a\u6e90\u81eaC++\u5bb6\u65cf\uff0c\u4f46\u4f7f\u7528\u4e86\u66f4\u52a0\u4fa7\u91cd\u4e8e\u9650\u5b9a\u7b26\u7684\u58f0\u660e\u8bed\u6cd5\u548c\u6765\u81eaML\u5bb6\u65cf\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u8bb8\u591a\u6982\u5ff5\u3002\n\u7406\u8bba\u4e0a\uff0c\u751f\u547d\u5468\u671f\u4e0e\u6240\u6709\u6743\u662f\u6b63\u4ea4\u7684\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u4eec\u901a\u5e38\u662f\u5185\u5728\u8026\u5408\u7684\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4e0d\u4f1a\u8ba8\u8bba\u57fa\u4e8e\u5bf9\u8c61\u7684\u751f\u5b58\u671f\u95ee\u9898\u3002\n\u4e0b\u9762\u7684Rust\u4ee3\u7801\u53ef\u4ee5\u7528\u6765\u6f14\u793a\u4e0d\u540c\u6355\u83b7\u5bf9\u8c61(\u5982let\u8bed\u53e5)\u4e4b\u95f4\u7684\u8d23\u4efb\u8f6c\u79fb\uff1a\nPub struct foo{value\uff1ai32\uff0c}fn main(){let foo=foo{value\uff1a123}\uff1blet bar=foo\uff1b//`foo`\u7684\u8d23\u4efb\u8f6c\u79fb\u5230`bar`println\uff01(&#34\uff1b{}&#34\uff1b\uff0cfoo.value)\uff1b//\u9519\u8bef\uff1a\u4f7f\u7528\u79fb\u52a8\u503c\uff1a`foo.value`println\uff01(&#34\uff1b{}&#34\uff1b\uff0cbar.value)\uff1b}\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cRuust\u662f\u4e00\u79cd\u4e0d\u53ef\u53d8\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528mut\u5b9e\u73b0\u53ef\u53d8\u6027\u3002\u4e0d\u53d8\u6027\u5bf9\u903b\u8f91\u7684\u6570\u5b66\u8bc1\u660e\u6709\u5f88\u5927\u5e2e\u52a9\uff0c\u56e0\u4e3a\u4e8b\u7269\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u201c\u6241\u5e73\u5316\u201d\uff0c\u7136\u800c\u51e0\u4e4e\u6240\u6709\u7684\u8ba1\u7b97\u673a\u4ece\u6839\u672c\u4e0a\u90fd\u662f\u53ef\u53d8\u7684\u4e1c\u897f\uff0c\u5373\u4f7f\u4e0d\u53d8\u6027\u7684\u62bd\u8c61\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5de5\u5177\u3002\u56e0\u6b64\uff0c\u6240\u6709\u6743\u8bed\u4e49\u7cfb\u7edf\u9700\u8981\u66f4\u591a\u7684\u89c4\u5219\u6765\u8003\u8651\u53ef\u53d8\u6027\uff0c\u5373\u901a\u8fc7\u5f15\u7528\u6dfb\u52a0\u201c\u501f\u7528\u201d\u7684\u6982\u5ff5\u3002\u501f\u7528\u68c0\u67e5\u5668\u7684\u4e00\u822c\u89c4\u5219\u5982\u4e0b\uff1a\n\u5728\u4f7f\u7528Rust(\u6216\u5728C++11\u4e2d\u5145\u5206\u5229\u7528\u8bed\u4e49)\u65f6\uff0c\u5927\u591a\u6570\u4eba\u4f1a\u5b9a\u671f\u4e0e\u501f\u9605\u68c0\u67e5\u5668(\u7279\u522b\u662f\u65b0\u624b\u6216\u5728\u4e0d\u540c\u8bed\u8a00\u4e4b\u95f4\u4ea4\u6362\u7684\u4eba)\u8fdb\u884c\u7ade\u4e89\u3002\u5f88\u591a\u4eba\u5df2\u7ecf\u627e\u5230\u4e86\u51cf\u5c11\u8fd9\u4e9b\u95ee\u9898\u7684\u65b9\u6cd5\uff1a\n\u4fdd\u6301\u5c0f\u5757\uff0c\u5c0f\u7ed3\u6784\uff0c\u7b49\u7b49--\u8fd9\u5c31\u7f29\u5c0f\u4e86\u4ee3\u7406\u7684\u8303\u56f4\uff0c\u4ece\u800c\u51cf\u5c11\u4e86\u5b83\u5fc5\u987b\u627f\u62c5\u7684\u8d23\u4efb\u3002\n\u6700\u5c0f\u5316\u7ed3\u6784\u4e2d\u7684\u81ea\u5f15\u7528\uff0c\u5373\u5f88\u96be\u4f7f\u7528\u5f15\u7528\u5b9e\u73b0\u7c7b\u4f3c\u56fe\u7684\u6570\u636e\u7ed3\u6784\u3002\n\u672c\u8d28\u4e0a\uff0c\u6240\u6709\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4ee5\u67d0\u79cd\u5f62\u5f0f(\u5982\u679c\u4e0d\u662f\u5b8c\u5168\u7684\u8bdd)\u7ed5\u8fc7\u4e86\u501f\u5165\u68c0\u67e5\u5668\uff0c\u7279\u522b\u662f\u7d22\u5f15/\u53e5\u67c4\u7684\u4f7f\u7528\u3002\u524d\u4e09\u79cd\u65b9\u6cd5\u662f\u6241\u5e73\u5316(\u7ebf\u6027)\u8d23\u4efb\u5c42\u6b21\u3002\n\u6ce8\uff1a\u6240\u6709\u6743\u8bed\u4e49\u786e\u5b9e\u6709\u5f88\u591a\u5b9e\u9645\u7528\u4f8b\uff0c\u53ef\u4ee5\u7528\u6765\u8bc1\u660e\u8bb8\u591a\u95ee\u9898\u7684\u5b89\u5168\u6027\uff0c\u7279\u522b\u662f\u51cf\u5c11\u7a0b\u5e8f\u4e2d\u7684\u6f0f\u6d1e\u3002\u8fd9\u5c31\u662fMozilla\u5f00\u53d1Rust\u7684\u4e3b\u8981\u76ee\u7684\u3002\u901a\u8fc7\u6c99\u7bb1\u3001\u6570\u636e\u7ade\u4e89\u3001\u7f51\u7edc\u548c\u5176\u4ed6\u5e76\u53d1\u95ee\u9898\uff0cWeb\u6d4f\u89c8\u5668\u9700\u8981\u662f\u975e\u5e38\u5b89\u5168\u7684\u7a0b\u5e8f\u3002\u5f53\u6d89\u53ca\u5230\u7a0b\u5e8f\u7684\u5b89\u5168\u6027\u548c\u5065\u58ee\u6027\u65f6\uff0c\u80fd\u591f\u5728\u7f16\u8bd1\u65f6\u8bc1\u660e\u67d0\u4e9b\u4e8b\u60c5\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\u7136\u800c\uff0c\u6b63\u5982\u6211\u5df2\u7ecf\u8bf4\u8fc7\u7684\uff0c\u7531\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u7ebf\u6027\u6027\u8d28\uff0c\u5982\u679c\u4e0d\u8bc9\u8bf8\u4e0d\u5b89\u5168\u6216\u5b8c\u5168\u7ed5\u8fc7\u501f\u5165\u68c0\u67e5\u5668\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\uff0c\u5b83\u65e0\u6cd5\u89e3\u51b3\u4e00\u7cfb\u5217\u5176\u4ed6\u95ee\u9898\u3002\n\u6240\u6709\u6743\u8bed\u4e49\u662f\u4eff\u5c04\u5b50\u7ed3\u6784\u7c7b\u578b\u7cfb\u7edf1112\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4eec\u57fa\u672c\u4e0a\u7531\u7ebf\u6027\u903b\u8f91\u63cf\u8ff0\uff0c\u5e76\u89e3\u91ca\u4e86\u4e3a\u4ec0\u4e48\u5b83\u96be\u4ee5\u8868\u8fbe\u975e\u7ebf\u6027\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u6240\u6709\u6743\u8bed\u4e49\u548c\u501f\u7528\u68c0\u67e5\u5668\u57fa\u672c\u4e0a\u662f\u7ebf\u6027\u6811(\u5c42\u6b21\u7ed3\u6784)\uff0c\u800c\u4e0d\u662f\u5176\u5e95\u5c42\u5f62\u5f0f\u903b\u8f91\u6240\u63cf\u8ff0\u7684\u975e\u7ebf\u6027\u56fe\u3002\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u8bb8\u591a\u6570\u636e\u7ed3\u6784\u548c\u95ee\u9898\u57fa\u672c\u4e0a\u90fd\u662f\u975e\u7ebf\u6027\u7684\uff0c\u800c\u7ebf\u6027\u65b9\u6cd5\u65e0\u6cd5\u5904\u7406\u8fd9\u4e9b\u95ee\u9898\u3002\n\u5728\u5f15\u5165\u79fb\u52a8\u8bed\u4e49\u7684C++11\u4e2d\uff0cSTL\u5305\u542b\u4e86\u201c\u667a\u80fd\u6307\u9488\u201d\u7684\u6982\u5ff5\uff0c\u6bcf\u4e2a\u6307\u9488\u90fd\u6709\u4e0d\u540c\u7684\u5b50\u7ed3\u6784\u903b\u8f91\u3002\n\u5982\u679c\u60a8\u60f3\u66f4\u591a\u5730\u4e86\u89e3\u5e94\u7528\u4e8eRust\u8bed\u8a00\u7684\u6240\u6709\u6743\u8bed\u4e49\u7684\u57fa\u672c\u903b\u8f91\uff0c\u6211\u63a8\u8350\u9605\u8bfb\u8fd9\u7bc7\u4f7f\u7528\u5f62\u5f0f\u5316\u6570\u5b66\u89e3\u91ca\u8be5\u903b\u8f91\u7684\u6587\u7ae0\uff1aOxide\uff1athe Essence of Rust(arxiv\uff1a1903.00982)\u3002\n\u5728\u9762\u5411\u5bf9\u8c61\u7684\u60c5\u51b5\u4e0b\uff0c\u503c/\u5bf9\u8c61\u662f\u4ee3\u7406\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7406\u662f\u5bf9\u5176\u8d1f\u8d23\u7684\u4efb\u4f55\u4e1c\u897f(\u4f8b\u5982\uff0c\u53e6\u4e00\u4e2a\u5bf9\u8c61\u3001\u51fd\u6570\u3001\u5757\u7b49)\u3002\u4e24\u8005\u90fd\u6709\u975e\u5e38\u4e25\u683c\u548c\u5355\u4e00\u7684\u7ebf\u6027\u503c\u5c42\u6b21\u7ed3\u6784\u3002\n\u4e24\u8005\u5728\u672c\u8d28\u4e0a\u90fd\u662f\u5355\u4e00\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u5904\u7406\u7684\u662f\u5355\u4e00\u5f62\u5f0f\u7684\u4ef7\u503c\uff0c\u800c\u4e0d\u662f\u4e00\u7ec4\u4ef7\u503c\u3002\u5b83\u4eec(\u4f20\u7edf\u4e0a)\u90fd\u662f\u975e\u5e38\u5c42\u6b21\u5206\u660e\u7684\uff0c\u5e76\u4e14\u628a\u91cd\u70b9\u653e\u5728\u7cfb\u7edf\u4f5c\u4e3a\u63a7\u5236\u8fc7\u7a0b\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u800c\u4e0d\u662f\u6307\u5bfc\u8fc7\u7a0b\u7684\u7b97\u6cd5\u3002\u5bf9\u8c61\u548c\u62e5\u6709\u503c\u57fa\u672c\u4e0a\u662f\u201c\u540d\u8bcd\u201d\uff0c\u4f46\u7a0b\u5e8f\u662f\u201c\u52a8\u8bcd\u201d\u3002\n\u5904\u7406\u5947\u5f02\u503c\u53ef\u80fd\u975e\u5e38\u6709\u7528\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u4e1c\u897f\u90fd\u662f\u503c\u3002\u6709\u4e9b\u4e1c\u897f\u57fa\u672c\u4e0a\u662f\u201c\u975e\u503c\u201d\u7684\uff0c\u4f8b\u5982\u6307\u4ee4/\u63a7\u5236\u6d41/\u58f0\u660e\u3002\u8fd9\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u7684\u6574\u4f53\u4e16\u754c\u89c2\uff0c\u5373\u4e00\u5207\u90fd\u5fc5\u987b\u662fX(\u6216\u4ea7\u751fX)\u3002\n\u6240\u6709\u6743\u8bed\u4e49\u4e0e\u7ec8\u751f\u8bed\u4e49\u662f\u5206\u5f00\u7684\uff0c\u4f46\u5b83\u4eec\u90fd\u9700\u8981\u5728\u66f4\u590d\u6742\u7684\u95ee\u9898\u4e2d\u6709\u7528\uff0c\u800c\u4e14\u901a\u5e38\u662f\u8026\u5408\u7684\uff1b\u8fd9\u81ea\u7136\u662f\u56e0\u4e3a\u57fa\u4e8e\u5355\u503c\u7684\u6027\u8d28\u3002\n\u4ece\u8fd9\u4e9b\u6587\u7ae0\u4e2d\uff0c\u8bb8\u591a\u5176\u4ed6\u4eba\u8ba4\u4e3a\uff0c\u50cfRust\u8fd9\u6837\u7684\u8bed\u8a00\u53ef\u4ee5\u89e3\u51b3\u8bb8\u591a\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u91ca\u653e\u540e\u4f7f\u7528\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u4e00\u5b9a\u662f\u771f\u7684\u3002\u6240\u6709\u6743\u8bed\u4e49\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u91ca\u653e\u540e\u4f7f\u7528\uff0c\u8fd9\u662f\u6b63\u786e\u7684\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u89e3\u51b3\u5927\u90e8\u5206\u95ee\u9898\u3002\u5373\u4f7f\u50cf\u91ca\u653e\u540e\u4f7f\u7528\u8fd9\u6837\u7684\u4e8b\u60c5\u662f\u5b89\u5168/\u5185\u5b58\u9519\u8bef\uff0c\u5b83\u4eec\u901a\u5e38\u4e5f\u662f\u53e6\u4e00\u4e2a\u66f4\u5927\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u800c\u4e0d\u662f\u5b83\u672c\u8eab\u5c31\u662f\u6839\u672c\u539f\u56e0\u3002\n\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u8bb8\u591a\u4eba\u4f1a\u95ee\u4e00\u4ef6\u4e8b\uff1a\u201c\u5982\u679c\u6240\u6709\u6743\u8bed\u4e49\u4e0d\u597d\uff0c\u4f60\u5efa\u8bae\u7528\u4ec0\u4e48\u6765\u66ff\u4ee3\u5462\uff1f\u201d\n\u901a\u5e38\uff0c\u5927\u591a\u6570\u56f0\u96be\u95ee\u9898\u4e0d\u80fd\u5728\u7f16\u8bd1\u65f6\u89e3\u51b3\uff1b\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u5728\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\u6dfb\u52a0\u8d8a\u6765\u8d8a\u591a\u7684\u6982\u5ff5\u4e0d\u4f1a\u6709\u4efb\u4f55\u5e2e\u52a9\uff0c\u9664\u975e\u589e\u52a0\u989d\u5916\u7684\u6210\u672c\u3002\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6240\u6709\u6743\u8bed\u4e49\u4e0d\u597d\uff0c\u4f46\u4e0d\u80fd\u89e3\u51b3\u8be5\u9886\u57df\u7684\u8bb8\u591a\u95ee\u9898\u3002\n\u8bb8\u591a\u4e0e\u8d23\u4efb\u76f8\u5173\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u901a\u8fc7\u7a0b\u5e8f\u4e2d\u7684\u201c\u5b50\u7cfb\u7edf\u201d\u5f62\u5f0f\u5f97\u5230\u66f4\u597d\u7684\u89e3\u51b3\uff0c\u8fd9\u4e9b\u201c\u5b50\u7cfb\u7edf\u201d\u5904\u7406\u4e00\u7ec4\u201c\u4e8b\u7269\u201d\uff0c\u5e76\u7ed9\u51fa\u201c\u4e8b\u7269\u201d\u7684\u53e5\u67c4\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5f15\u7528\u3002\u8fd9\u4e0e\u8bb8\u591a\u4eba\u5df2\u7ecf\u4f7f\u7528\u7684\u901a\u8fc7\u4f7f\u7528\u7d22\u5f15/\u53e5\u67c4\u7ed5\u8fc7\u501f\u5165\u68c0\u67e5\u5668\u7684\u65b9\u6cd5\u6709\u5173\u3002\u53e5\u67c4\u53ef\u4ee5\u5305\u542b\u6bd4\u5355\u6570\u591a\u5f97\u591a\u7684\u4fe1\u606f\u3002\u4e00\u79cd\u5e38\u89c1\u7684\u65b9\u6cd5\u662f\u5c06\u4e16\u4ee3\u53f7\u4e0e\u7d22\u5f15\u4e00\u8d77\u5b58\u50a8\u5728\u53e5\u67c4\u4e2d\u3002\u5982\u679c\u4e00\u4ee3\u6b7b\u4e86\uff0c\u4f46\u662f\u8981\u6c42\u4f7f\u7528\u53e5\u67c4\uff0c\u90a3\u4e48\u5b50\u7cfb\u7edf\u53ef\u4ee5\u53d1\u51fa\u4e00\u4e2a\u865a\u62df\u7684\u524d\u54e8\u6570\u503c\u5e76\u62a5\u544a\u4e00\u4e2a\u9519\u8bef\u3002\n\u5176\u4ed6\u65b9\u6cd5\u662f\u9996\u5148\u51cf\u5c11\u5bf9\u8d23\u4efb\u7684\u9700\u6c42\u3002\u901a\u8fc7\u4fdd\u6301\u6570\u636e\u7ed3\u6784POD\u7684\u53ef\u590d\u5236\u6027\u548c\u96f6\u503c\u7684\u5b9e\u7528\u6027\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u6539\u53d8\u601d\u8003\u624b\u5934\u95ee\u9898\u7684\u65b9\u5f0f\u5e76\u7b80\u5316\u4ee3\u7801\u3002\u5b83\u66f4\u5f3a\u8c03\u6570\u636e\u548c\u7b97\u6cd5\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u548c\u7c7b\u578b\u4e4b\u95f4\u7684\u5173\u7cfb\u3002\n\u6240\u6709\u6743\u8bed\u4e49\u662f\u4e00\u79cd\u4ee5\u5c42\u6b21\u5316\u7684\u65b9\u5f0f\u5904\u7406\u503c\u7684\u8d23\u4efb\u7684\u65b9\u5f0f\uff0c\u5b83\u4ee5\u5c42\u6b21\u5316\u7684\u65b9\u5f0f\u56f4\u7ed5\u503c\u7684\u8d23\u4efb\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u5bfc\u81f4\u4e86\u8d23\u4efb\u7684(\u7ebf\u6027)\u4ef7\u503c\u5c42\u6b21\u7ed3\u6784\uff0c\u5176\u4e2d\u5de5\u7a0b\u5e08\u5bf9\u4ef7\u503c\u8d1f\u8d23\u3002\u6240\u6709\u6743\u8bed\u4e49\u7684\u95ee\u9898\u4e0e\u4f20\u7edf\u7684\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1(OOP)\u5177\u6709\u76f8\u540c\u7684\u7ed3\u6784\u6027\u95ee\u9898\uff0c\u8fd9\u5bfc\u81f4\u4e86\u884c\u4e3a\u7684(\u7ebf\u6027)\u503c\u5c42\u6b21\u7ed3\u6784\uff0c\u5176\u4e2d\u503c\u5145\u5f53\u4ee3\u7406\u3002\n\u6240\u6709\u6743\u8bed\u4e49\u5bf9\u4e8e\u67d0\u4e9b\u95ee\u9898\u6765\u8bf4\u662f\u4e00\u4e2a\u6709\u7528\u7684\u5de5\u5177\uff0c\u4f46\u7531\u4e8e\u5176\u5185\u5728\u7684\u7ebf\u6027\u903b\u8f91\uff0c\u5b83\u4eec\u4e0d\u80fd\u7528\u6765\u8868\u8fbe\u975e\u7ebf\u6027\u95ee\u9898\uff0c\u8fd9\u4f7f\u5f97\u4eba\u4eec\u8bd5\u56fe\u5b8c\u5168\u7ed5\u8fc7\u8fd9\u4e2a\u6982\u5ff5\u3002\n\u201c\u6211\u8ba4\u4e3a\u7269\u4f53\u5c31\u50cf\u7f51\u7edc\u4e0a\u7684\u751f\u7269\u7ec6\u80de\u548c/\u6216\u5355\u72ec\u7684\u8ba1\u7b97\u673a\uff0c\u53ea\u80fd\u901a\u8fc7\u6d88\u606f\u8fdb\u884c\u4ea4\u6d41(\u6240\u4ee5\u6d88\u606f\u4f20\u9012\u4e00\u5f00\u59cb\u5c31\u662f\u8fd9\u6837--\u82b1\u4e86\u4e00\u6bb5\u65f6\u95f4\u624d\u77e5\u9053\u5982\u4f55\u7528\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u9ad8\u6548\u5730\u4f20\u9012\u6d88\u606f\uff0c\u4f7f\u4e4b\u53d8\u5f97\u6709\u7528)\u3002\u201d--\u827e\u4f26\u00b7\u51ef\uff0c2003\u5e74\uff0chttp://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en\u21a9\ufe0e\u3002\nGo\u7f16\u7a0b\u8bed\u8a00\u4e0d\u652f\u6301\u7ee7\u627f\u3002\u7136\u800c\uff0c\u6839\u636e\u6211\u7684\u5b9a\u4e49\uff0cGo\u662f\u4e00\u79cd\u9762\u5411\u5bf9\u8c61\u7684\u8bed\u8a00\uff0c\u4f46\u5b83\u662f\u56f4\u7ed5(\u9690\u5f0f)\u63a5\u53e3(\u7c7b\u578b\u7c7b\u6216\u7ed3\u6784\u7c7b\u578b\u7684\u4e00\u79cd\u5f62\u5f0f)\u8bbe\u8ba1\u7684\uff0c\u4f5c\u4e3a\u7ec4\u6210\u5bf9\u8c61\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u65b9\u6cd5\u53ef\u4ee5\u5e94\u7528\u4e8e\u4efb\u4f55\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff1b\u800c\u4e0d\u4ec5\u4ec5\u662f\u8bb0\u5f55\u7c7b\u578b\u3002\u21a9\ufe0e\u3002\n\u4eba\u4eec\u4e60\u60ef\u4e8e\u7ed5\u8fc7\u501f\u5165\u68c0\u67e5\u5668\u6765\u51cf\u5c11\u4e89\u6267\uff0c\u8fd9\u610f\u5473\u7740\u4eba\u4eec\u521a\u521a\u627e\u5230\u4e86\u4e00\u79cd\u65b9\u6cd5\u6765\u5e94\u5bf9\u5b83\u65bd\u52a0\u7684\u9650\u5236\u3002\u21a9\ufe0e\u3002\n\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u5df2\u7ecf\u88ab\u5f00\u53d1\u51fa\u6765\u4e86\uff0c\u6211\u610f\u5916\u5730\u91cd\u65b0\u53d1\u73b0\u4e86\u5b50\u7ed3\u6784\u7c7b\u578b\u7cfb\u7edf\u548c\u7ebf\u6027\u903b\u8f91\uff0c\u5e76\u6709\u4e86\u81ea\u5df1\u7684\u672f\u8bed\u3002\u4f46\u662f\uff0c\u5b83\u66f4\u9002\u7528\u4e8e\u66f4\u5e38\u7528\u7684\u672f\u8bed\u3002\u21a9\ufe0e", "note_en": "I have been toying with a theoretical idea for the past 18 months off-and-on in my head and I have not fully articulated it aloud yet. It is regarding the concept of  Ownership Semantics (OS) or  Move Semantics in programming languages. Fundamentally this article is a criticism of the concept and states that the concept is a duality of traditional OOP but applied to a different area.\n  A general list of definitions of terminology used within this article in order to minimize confusion.\n A  (Data) Type is an attribute of a value which encodes information about how the data value can be operated upon\n    An  Owned-Value is a value which belongs to a hierarchy of value ownership, which implies it is governed by an  agent\n   A  Paradigm is a way of classifying models of structure of programming languages; a  Paradigm is a  model of interpretation\n Object Orient(at)ed Programming (OOP) - A paradigm of structuring a program around the sole concept of  Objects, commonly through coupling data and code into a single unit.\n  Though the original conception of the term coined by Alan Kay  1 was never used as he intended it to be, the term  Object Orient(at)ed Programming (OOP) has been commonly understood to be a paradigm of structuring a program around the concept of  Objects, commonly through coupling data and code into a single unit. Many languages support multiple paradigms, including aspects for the OOP paradigm, but I would class those as multiparadigm rather than being  solely an OOP language.\n Most languages implement  Objects and  Classes in the Simula tradition; most of the notable OOP languages have a similar form by defining methods (member functions) within the class definition. Traditionally languages such as Java can be classed as  solely an OOP language.\n Most traditional OOP languages are based around the concept of  inheritance, a mechanism of deriving a class data type from another class data type and retaining similar information. Most people generally view inheritance as a combination of  subtyping and  dynamic dispatch through  virtual method tables (vtables). This has lead to many discussions asking whether a language can be called as OOP if it does not support inheritance  2.\n In recent times,  inheritance has been falling out of fashion in favour of  composition  3. This is mostly due to the issue of conforming a  class to a strict (singular) hierarchy of agency when in reality, things can belong to many (if not infinite) categories and hierarchies, as well as another aspect which I will be discussing throughout this article.\n There are many criticisms of OOP  4  5  6  7  8  9 but my general criticism is that by placing emphasis on trying to solve problem in the type system, it shifts focus from the data structures and algorithms,  the core of what a program fundamentally is.\n Since objects themselves are being treated  as if they have behaviour (not just type properties), they are effectively being treated as if they were  agents in the program. This mental model has many conclusions, many of which cause issues.\n  Object orientated programming is a form of misinterpreted and misapplied Aristotelian Metaphysics applied to a domain it was never meant to model\n What I mean by this statement is that  artificially conforming any/all relationships between data and types to an artificial hierarchy of  agency is a form of na\u00efve-Aristotelian metaphysics. Since there is no actual  agency in the programming objects, it is a partial fallacy. When trying to conform a program to have a particular structure when it does not naturally, the absence of a structure in a program is more useful than a bad structure.\n  The concept of adding methods to classes/objects has proven useful to many. The real questions are:\n  For most people, I am going to bet that methods, in languages with an emphasis on inheritance rather than composition (such as C++ or Java), are treated as a way of categorizing and associating functions/procedures with a data record. There are a few reasons for this approach:\n Allowing methods as a form of syntactic sugar for writing calls in a  subject verb object manner e.g.  foo_do_thing(x, y) vs  x.do_thing(y)\n From experience, I have found that long time users of \u201cOOP\u201d languages eventually start treating methods primarily in the first two approaches.\n I will not go into depth about the other main aspects of OOP such as encapsulation, local retention, forms of polymorphism, etc, as the hierarchical nature is the fundamental aspect of focus for this article. The (linear) hierarchy of agency is the main problem. The reason why people argue for  composition over inheritance is that it flattens this linear hierarchy, reducing its effect. It is the transition from  nominal typing to  structural typing, which is more flexible because many data structures and problems have a  non-linear nature to them, which  linear approaches  cannot handle. When trying to adhere to the the strict hierarchical type system approaches, it leads to numerous issues because data is more commonly graph-like (non-linear) than tree-like (linear) for most problems. This strict hierarchy does occur with encapsulation at the object level too, a strict hierarchy of messages/references; this hierarchical nature arises from the concept agency itself, inheritance is not the root cause.\n n.b. Inheritance is not all bad and does have many real life practical uses, but these costs must be known before using them, like with any tool.\n n.b. The linearity is with regards to the data structures themselves and not the algorithms.\n  C++11 introduced the concept of  move semantics or  ownership semantics (OS), a way to minimize the copying of data through copy constructors. It utilizes the added concept of r-value references ( T &amp;&amp;) as a means to do this. However, the concept began to be used for a lot more than its basic purpose. The concept adds the high level abstraction of \u201cmoving\u201d objects rather than \u201ccopying\u201d objects. Physically, a computer only ever copies and this high level abstraction, to treat objects  as if they were \u201creal objects\u201d, is not what actually happens. It is also a  category error to treat them as \u201creal objects\u201d since \u201creal objects\u201d and \u201cprogramming objects\u201d have little connection with each other ontologically. When a value or object is \u201cmoved\u201d, this means is that the  responsibilities of the resources of that object have been transferred to another object or environment\u2014 agents. In this case, ownership/move semantics is fundamentally based around the  responsibilities of values by tracking value usage.\n In this model of agency, the arena of agency can take on many forms, such as blocks, procedure bodies, or aggregate values. Therefore some  owned-values also  own other values, and thus a value could have agency.\n If we were to call Ownership Semantics a paradigm, it would be the orientation around the  responsibility of values in a hierarchical fashion, placing emphasis on this system of responsibility, shifting focus from data structures and algorithms.\n The concept of  responsibility and  ownership is similar to the real world counter parts in that to own something means to have exclusive use and full responsibility over it.\n Rust is a multi-paradigm programming language but at its core is an Ownership-Orientated language. Everything in Rust has a concept of  \u201cownership\u201d and  lifetime associated with it. Rust is designed around trying to be first and foremost \u201csafe\u201d, especially with regards to concurrency. Rust derives from the C++ family in terms of philosophy and style, but uses a more  qualifier-focused declaration syntax and many concepts from functional languages from the  ML family.\n Lifetimes are theoretically orthogonal to  ownership but in practical, they usually are intrinsically coupled. I will not discuss the problems with object-based lifetimes in this article.\n The following Rust code can be used to demonstrate this responsibility transfer between different capturing things such as  let statements:\n pub struct Foo {\tvalue: i32,}fn main() {\tlet foo = Foo{value: 123};\tlet bar = foo; // the responsibility of `foo` is transferred to `bar`\tprintln!(&#34;{}&#34;, foo.value); // error: use of moved value: `foo.value`\tprintln!(&#34;{}&#34;, bar.value);}\n Rust is an immutable-by-default language, with the option to opt into mutability with  mut. Immutability helps a lot with mathematical proofs for logic since things things can be \u201cflattened\u201d quite easily, however virtually all computers are fundamentally mutable things, even if the abstraction of immutability is a useful tool. As a result, the ownership semantics system requires a few more rules to take into account mutability, by adding the concept of \u201cborrowing\u201d through references. The general rules for the borrow checker are:\n  When using Rust (or move semantics to their full extent in C++11), most people will fight the borrow checker regularly  10 (especially newcomers to the language or people swapping between different languages). Many people have found approaches to reduce these issues:\n Keep blocks small, structs small, etc\u2014this reduces the size of the arena of agency and thus reduces the amount of responsibility it must take care of\n Minimize self references in structs, i.e. graph-like data structures are difficult to implement using references\n Essentially, all of these approaches are bypassing the borrow checker in some form (if not entirely), especially the use of indices/handles. The first three approaches are to flatten the (linear) responsibility hierarchy.\n n.b. Ownership semantics do have many practical use cases, and can be used to prove the safety of numerous problems, especially reducing vulnerabilities in programs. This is the main purpose why Rust was developed at Mozilla. Web browsers need to be very  safe programs, through sandboxing, data races, networking, and other concurrency issues. Being able to prove certain things at compile time is a very useful thing when it comes to safety and robustness of a program. However, as I have stated that because of the linear nature of OS, it cannot solve a whole range of other problems without resorting to  unsafe or another way of bypassing the borrow checker entirely.\n  Ownership semantics are a form of an  affine substructural type system  11  12 which means that they are fundamentally described by a  linear logic, and explains why it struggles to express  non-linear problems. Therefore ownership semantics and the borrow checker are fundamentally a linear tree (hierarchy) and not a non-linear graph, as described by its underlying formal logic. Many data structures and problems in real life are fundamentally  non-linear, of which  linear approaches  cannot handle.\n In C++11 with introduction of move semantics, the STL includes the concept of \u201csmart pointers\u201d, each with different substructural logic.\n  If you would like to learn more about the fundamental logic of the ownership semantics applied to the Rust language, I recommend reading this paper explaining the logic using formal mathematics:  Oxide: The Essence of Rust (arXiv:1903.00982).\n    In the the OOP case, the value/object is the agent. In the OS case, the agent is whatever has responsibility for it (e.g. another object, function, block, etc). Both have linear value hierarchies which are quite strict and singular.\n  Both are singular in nature in that they deal with singular forms of values rather than groups of values. They are both (traditionally) very hierarchical, and place emphasis on the system as a way to control the processes rather than the algorithms directing the processes. Objects and Owned-Values are fundamentally \u201cnouns\u201d, but programs are \u201cverbs\u201d.\n Dealing with singular values can be very useful, but not everything is a value. Some things are fundamentally \u201cnon-values\u201d e.g. instructions/control-flow/declarations. It is a similar holistic world-view as OOP where everything must be X(, or produce X).\n Ownership Semantics are separate from  Lifetime Semantics, but they are both required to be useful in more complex problems, and are usually coupled; naturally because of the singular-value-based nature.\n   From these articles, many others have argued that languages like Rust would solve many of these problems, such as   use-after-free. However this may not be necessarily true. It is correct that ownership semantics would solve  some problems that cause things like  use-after-free but that does not mean it will solve most of them. Even if things like  use-after-free are security/memory bugs, they are usually a symptom of another larger problem than it itself being the root cause.\n  One thing many people will ask whilst reading this article is \u201cif Ownership Semantics are bad, what do you propose as a replacement?\u201d\n In general, most hard problems cannot be solved at compile time; because of this, adding more and more concepts to the type system of the language will not help without adding extra costs. This does not mean ownership semantics is bad but not a solution for many problems in that domain.\n A lot of the problems related to responsibility are better solved with forms of \u201csubsystems\u201d within programs which handle groups of \u201cthings\u201d and give out  handles of the \u201cthing\u201d instead of a direct reference. This is related to the approach many people use already to bypass the borrow checker through using indices/handles. Handles can contain a lot more information than a singular number. A common approach is to store a generation number alongside the index in the handle. If a generation has died, but the handle is asked to be used, the subsystem can give out a dummy sentinel value and report an error.\n Other approaches are to reduce the need for responsibility in the first place. By keeping data structures  POD, trivially copyable, and the zero value of it useful, can help you change the way you think about the problem at hand and simplify code. It places more emphasis on the data and algorithms themselves rather than the relationships between objects and types.\n    Ownership semantics are a way to handle the responsibility of values in a hierarchical fashion Orientation around responsibility of values in a hierarchical fashion. This results in a (linear) value hierarchy of responsibility, where agents are responsible for values. The issues of ownership semantics parallel the same structural issues that Traditional-OOP has which results in a (linear) value hierarchy of behaviour, where the values act as agents.\n Ownership semantics can be a useful tool for certain problems, but due to their underlying linear logic, they  cannot be use to express  non-linear problems which resorts people to try and bypass the concept entirely.\n \u201cI thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning \u2013 it took a while to see how to do messaging in a programming language efficiently enough to be useful).\u201d - Alan Kay, 2003  http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en  \u21a9\ufe0e\n The  Go programming language does not support inheritance. However under my definition, Go is an OOP language but is designed around (implicit)  interfaces (a form of  type-classes or  structural typing) as a way to compose objects, and methods can be applied to any user defined type; not just record types.  \u21a9\ufe0e\n        Getting used bypassing the borrow checker to reduce fighting implies people have just found a way to cope with the constraints it imposes.  \u21a9\ufe0e\n Whilst writing this article, I did not realize that this was already developed, and I accidentally rediscovered substructural type systems and linear logic, and had my own terminology for it. However, it is more appropriate to the more commonly used terminology.  \u21a9\ufe0e", "posttime": "2020-11-05 20:13:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u4e49\u5b66,flaw,\u5bf9\u8c61", "title": "\u6240\u6709\u6743\u8bed\u4e49\u5b66\u7684\u81f4\u547d\u7f3a\u9677", "title_en": "The Fatal Flaw of Ownership Semantics", "transed": 1, "url": "http://www.gingerbill.org/article/2020/06/21/the-ownership-semantics-flaw/", "via": "", "real_tags": ["\u8bed\u4e49\u5b66", "flaw", "\u5bf9\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "e849366036aef3ba55efd605de539c70.jpeg", "infoid": 1033288, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fc8\u963f\u5bc6\u5927\u5b66\u58f0\u79f0\u4ed6\u4eec\u6ca1\u6709\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6765\u6050\u5413\u5b66\u751f\u6297\u8bae\u8005\u3002\u6211\u4eec\u6709\u8bc1\u636e\u8bc1\u660e\u4ed6\u4eec\u5728\u6492\u8c0e\u3002\n\u8fc8\u963f\u5bc6\u5927\u5b66(University Of Miami)\u7684\u5b66\u751f\u4eec\u5728\u5f97\u77e5\u6821\u8b66\u5229\u7528\u8bc6\u522b\u6280\u672f\u7784\u51c6\u5e76\u6050\u5413\u6297\u8bae\u653f\u5e9c\u5bf9\u65b0\u51a0\u80ba\u708e\u5b89\u5168\u9632\u8303\u63aa\u65bd\u4e0d\u8db3\u7684\u5b66\u751f\u540e\u611f\u5230\u6124\u6012\u3002\u4e0a\u4e2a\u6708\uff0c\u8be5\u6821\u5b66\u751f\u4f1a\u9662\u957f\u628a\u4e00\u7fa4\u5b66\u751f\u53eb\u5230\u4ed6\u7684\u529e\u516c\u5ba4\uff0c\u65a5\u8d23\u4ed6\u4eec\u5728\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u7206\u53d1\u671f\u95f4\uff0c\u4e0e\u6559\u804c\u5458\u5de5\u4e00\u8d77\u8eba\u5728\u9662\u5b50\u91cc\uff0c\u4ee5\u201c\u672a\u7ecf\u6279\u51c6\u201d\u7684\u65b9\u5f0f\u4e3e\u884c\u6297\u8bae\u6d3b\u52a8\uff0c\u8981\u6c42\u63d0\u4f9b\u66f4\u591a\u4fdd\u62a4\u63aa\u65bd\u3002\u5f53\u4e00\u540d\u5b66\u751f\u8be2\u95ee\u88ab\u53eb\u5230\u9662\u957f\u529e\u516c\u5ba4\u7684\u4eba\u7684\u540d\u5355\u662f\u5982\u4f55\u6574\u7406\u51fa\u6765\u7684\u65f6\uff0c\u9662\u957f\u544a\u8bc9\u4ed6\u4eec\uff0c\u4ed6\u4eec\u7684\u8eab\u4efd\u662f\u901a\u8fc7\u9762\u90e8\u8bc6\u522b\u6280\u672f\u8bc6\u522b\u51fa\u6765\u7684\u3002\n\u662f\u7684\uff0c\u6628\u5929\uff0c\u4e3a\u672a\u6765\u800c\u6218\u4e86\u89e3\u5230\u8fc8\u963f\u5bc6\u5927\u5b66\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u65ad\u7136\u5426\u8ba4\u8be5\u6821\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u3002\u4ee5\u4e0b\u662f\u8be5\u5927\u5b66\u4f20\u64ad\u4e0e\u516c\u5171\u5173\u7cfb\u6267\u884c\u4e3b\u4efb\u53d1\u51fa\u7684\u58f0\u660e\u622a\u56fe\uff1a\n\u4f46\u201c\u4e3a\u672a\u6765\u800c\u6218\u201d(Fight For The Future)\u63ed\u9732\u7684\u516c\u5f00\u6587\u4ef6\u663e\u793a\uff0c\u8fd9\u6240\u5927\u5b66\u51e0\u4e4e\u80af\u5b9a\u662f\u5728\u6492\u8c0e\u3002\u5c31\u5728\u4e0a\u5468\uff0c\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u8b66\u5bdf\u5c40\u957f\u8fd8\u516c\u5f00\u5439\u5618\u8be5\u5927\u5b66\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u76d1\u63a7\u7cfb\u7edf\u3002\u5728\u63a5\u53d7\u8fc8\u963f\u5bc6\u5927\u5b66\u6821\u56ed\u6742\u5fd7\u91c7\u8bbf\u65f6\uff0c\u5927\u536b\u00b7\u91cc\u97e6\u7f57\u8bf4\uff1a\n\u901a\u8fc7\u4f5b\u7f57\u91cc\u8fbe\u5dde\u6267\u6cd5\u90e8\u95e8\u7684\u9762\u90e8\u8bc6\u522b\u8f6f\u4ef6\uff0c\u201c\u6211\u4eec\u80fd\u591f[\u8f7b\u677e\u5730]\u8fa8\u8ba4\u5e76\u902e\u6355\u4ed6\u201d\u3002\u201c\u6211\u4eec\u5df2\u7ecf(\u53d1\u73b0)\u4e86\u4e00\u4e9b\u8fd9\u6837\u7684\u574f\u4eba\u3002\u201d\n\u91cc\u97e6\u7f57\u5c40\u957f\u7684\u7b80\u5386\u53ef\u4ee5\u5728\u8fc8\u963f\u5bc6\u5927\u5b66\u7684\u7f51\u7ad9\u4e0a\u770b\u5230\uff0c\u4ed6\u8bf4\u4ed6\u76d1\u7763\u4e86\u8be5\u5927\u5b66\u6444\u50cf\u5934\u7cfb\u7edf\u7684\u521b\u5efa\uff0c\u8be5\u7cfb\u7edf\u5305\u62ec\u9762\u90e8\u8bc6\u522b\u3002\u70b9\u51fb\u6b64\u5904\u67e5\u770b\u622a\u56fe\uff1a\n\u7136\u800c\uff0c\u5f53\u8bb0\u8005\u8054\u7cfb\u8fc8\u963f\u5bc6\u5927\u5b66\u8bf7\u5176\u7f6e\u8bc4\u65f6\uff0c\u4ed6\u4eec\u5f97\u5230\u7684\u56de\u5e94\u5374\u4e0d\u7b26\uff1a\u201c\u8fc8\u963f\u5bc6\u5927\u5b66\u4e0d\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6280\u672f\u3002\u201d\n\u8fc8\u963f\u5bc6\u5927\u5b66(University Of Miami)\u7814\u7a76\u751f\u3001\u8fc8\u963f\u5bc6\u5927\u5b66\u5458\u5de5\u5b66\u751f\u8054\u76df(UMESA)\u6210\u5458\u9a6c\u5c14\u65af\u00b7\u8d39\u5c14\u5357\u5fb7\u65af(Mars Fernandez)\u8bf4\uff1a\u201c\u9762\u90e8\u8bc6\u522b\u80fd\u88ab\u7528\u6765\u4f20\u5524\u6211\u548c\u5176\u4ed6\u5b66\u751f\u8868\u8fbe\u5bf9\u6211\u4eec\u5b66\u6821\u5904\u7406\u81f4\u547d\u75c5\u6bd2\u548c\u7ecf\u6d4e\u5371\u673a\u7684\u4e0d\u6ee1\uff0c\u8fd9\u4ee4\u4eba\u4e0d\u5b89\u3002\u4ed6\u4eec\u73b0\u5728\u5426\u8ba4\u4e86\uff0c\u4f46\u5c31\u5728\u4e0a\u5468\uff0c\u4e00\u672c\u6821\u56ed\u6742\u5fd7\u63f4\u5f15UMPD\u8b66\u5bdf\u5c40\u957f\u91cc\u97e6\u7f57\u7684\u8bdd\u8bf4\uff0c\u4ed6\u4f7f\u7528\u4e86\u9762\u90e8\u8bc6\u522b\u3002\u4ed6\u4eec\u672c\u53ef\u4ee5\u8be2\u95ee\u5206\u5305\u5de5\u3001\u6559\u804c\u5458\u5de5\u548c\u5b66\u751f\u5de5\u4f5c\u8005\u6211\u4eec\u600e\u4e48\u6837\u4e86\uff0c\u9700\u8981\u4ec0\u4e48\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u4f7f\u7528\u5148\u8fdb\u7684\u6280\u672f\u6765\u8b66\u544a\u6211\u4eec\uff0c\u4e0d\u8981\u201c\u6b63\u786e\u5730\u201d\u6297\u8bae\uff0c\u5c31\u597d\u50cf\u4ed6\u4eec\u4ece\u6765\u90fd\u4e0d\u4f1a\u542c\u4e00\u6837\u3002\n\u8fc8\u963f\u5bc6\u5927\u5b66(University Of Miami)\u672c\u79d1\u751f\u3001UMESA\u6210\u5458\u57c3\u65af\u7279\u73ed\u00b7\u4f0d\u5fb7(Esteban Wood)\u8865\u5145\u9053\uff1a\u201c\u6211\u8ba4\u4e3a\u6821\u56ed\u6267\u6cd5\u90e8\u95e8\u7684\u4efb\u52a1\u662f\u8bc6\u522b\u548c\u5e73\u6297\u8bae\u8005\uff0c\u8fd9\u662f\u4e00\u4ef6\u4ee4\u4eba\u9057\u61be\u7684\u4e8b\u60c5\u3002\u201d\u201c\u9ad8\u7b49\u9662\u6821\u5e94\u8be5\u6b22\u8fce\u5f02\u89c1\u4eba\u58eb\uff0c\u800c\u4e0d\u662f\u6050\u5413\u5f02\u89c1\u4eba\u58eb\u3002\u542c\u8bf4\u6821\u56ed\u9886\u5bfc\u5c42\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6280\u672f\uff0c\u4ee4\u4eba\u6df1\u611f\u4e0d\u5b89\u3002\n\u5927\u536b\u00b7\u91cc\u97e6\u7f57(David Rivero)\u5728\u8fc8\u963f\u5bc6\u8b66\u5bdf\u5c40\u5de5\u4f5c\u4e8626\u5e74\uff0c\u4e4b\u540e\u62c5\u4efb\u8fc8\u963f\u5bc6\u5927\u5b66(University Of Miami)\u8b66\u5bdf\u5c40\u957f\u3002\u4eca\u5e74\u590f\u5929\uff0c\u8be5\u8b66\u5bdf\u5c40\u56e0\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6280\u672f\u8bc6\u522b\u9ed1\u4eba\u751f\u547d\u4e5f\u662f\u6297\u8bae\u8005\u800c\u53d7\u5230\u4eba\u6743\u4e13\u5bb6\u548c\u6d3b\u52a8\u4eba\u58eb\u7684\u4e25\u5389\u6279\u8bc4\u3002\n\u6839\u636eBanFacialRecognition.com/Campus\u7684\u8ba1\u5206\u5361\uff0c\u8fc8\u963f\u5bc6\u5927\u5b66\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u5c06\u662f\u9006\u52bf\u800c\u4e3a\u3002\u4ece\u54c8\u4f5b\u5230\u9ebb\u7701\u7406\u5de5\u5b66\u9662\uff0c\u7f8e\u56fd\u670960\u591a\u6240\u5927\u5b66\u8868\u793a\uff0c\u4ed6\u4eec\u4e0d\u6253\u7b97\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6280\u672f\uff0c\u8fd9\u9879\u6280\u672f\u88ab\u4e13\u5bb6\u5e7f\u6cdb\u8c34\u8d23\u4e3a\u4fb5\u5165\u6027\u7684\u3001\u65e0\u6548\u7684\uff0c\u5e76\u53d7\u5230\u7cfb\u7edf\u6027\u79cd\u65cf\u548c\u6027\u522b\u504f\u89c1\u7684\u56f0\u6270\u3002\n\u652f\u6301\u5b66\u751f\u79ef\u6781\u5206\u5b50\u7684\u6570\u5b57\u6743\u5229\u7ec4\u7ec7Fight for the Future\u7684\u7ec4\u7ec7\u8005\u8389\u5a05\u00b7\u970d\u5170\u5fb7(Lia Holland)\u8bf4\uff1a\u201c\u770b\u8d77\u6765\u8fc8\u963f\u5bc6\u5927\u5b66\u80af\u5b9a\u662f\u5728\u5229\u7528\u9762\u90e8\u8bc6\u522b\u6765\u653b\u51fb\u548c\u6050\u5413\u6b63\u5728\u884c\u4f7f\u7b2c\u4e00\u4fee\u6b63\u6848\u6743\u5229\u7684\u5b66\u751f\u3002\u201d(\u5979/\u5979)\u662f\u6570\u5b57\u6743\u5229\u7ec4\u7ec7\u201c\u4e89\u53d6\u672a\u6765\u201d(Fight For The Future)\u7684\u7ec4\u7ec7\u8005\uff0c\u76ee\u524d\u652f\u6301\u5b66\u751f\u79ef\u6781\u5206\u5b50\u3002\u201c\u5982\u679c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\uff0c\u90a3\u4e48\u4ed6\u4eec\u9700\u8981\u544a\u8bc9\u8b66\u5bdf\u5c40\u957f\u505c\u6b62\u58f0\u79f0\u4ed6\u4eec\u4f7f\u7528\u8fd9\u9879\u6280\u672f\uff0c\u5e76\u5728\u6821\u56ed\u5185\u5b8c\u5168\u7981\u6b62\u9762\u90e8\u8bc6\u522b\u3002\u201d\u4ee5\u52a0\u5dde\u5927\u5b66\u6d1b\u6749\u77f6\u5206\u6821(UCLA)\u7b49\u5176\u4ed6\u6821\u56ed\u4ee5\u53ca\u6ce2\u7279\u5170\u3001\u65e7\u91d1\u5c71\u548c\u6ce2\u58eb\u987f\u7b49\u57ce\u5e02\u4e3a\u699c\u6837\uff0c\u6e05\u6670\u5730\u7ef4\u62a4\u5b66\u751f\u3001\u6559\u804c\u5458\u5de5\u548c\u6559\u804c\u5458\u5de5\u7684\u6743\u5229\u3002\n\u8fc8\u963f\u5bc6\u5927\u5b66\u5458\u5de5\u5b66\u751f\u8054\u76df(UMESA)\u7684\u5b66\u751f\u53ef\u4ee5\u901a\u8fc7lia@fightforthefuture.org\u63a5\u53d7\u9762\u8bd5\u3002\u4e3a\u672a\u6765\u800c\u6218\u4e5f\u53ef\u4ee5\u53d1\u8868\u8bc4\u8bba\u3002", "note_en": "The University of Miami claims they didn\u2019t use facial recognition to intimidate student protesters. We have proof they\u2019re lying.\n  Students at University of Miami  are outraged after learning that university police used recognition technology to target and intimidate students protesting the administration\u2019s insufficient COVID-19 safety precautions. Last month, the Dean of Students called a group of students into his office to reprimand them for protesting in an \u201cunapproved\u201d manner by laying in a courtyard alongside faculty and staff to demand greater protections during the COVID-19 pandemic. When a student asked how the list of those called to the Dean\u2019s office had been assembled, the Dean told them that they had been identified using facial recognition technology.\n Yes terday,  Fight for the Future learned that a University of Miami spokesperson is flat out denying that the school uses facial recognition. Here\u2019s a screenshot of the statement sent by the university\u2019s Executive Director of Communications and Public Relations:\n  But publicly available documents uncovered by Fight for the Future show that the university is almost certainly lying. The UM Chief of Police has openly bragged about the University\u2019s use of facial recognition surveillance as recently as last week. In  an interview with the University of Miami\u2019s campus magazine, David Rivero said:\n \u201cWe were able to [easily] identify and arrest him\u201d through the Florida Department of Law Enforcement\u2019s facial recognition software. \u201cWe\u2019ve [detected] a few bad guys that way.\u201d\n Chief Rivero\u2019s resume, available through the   University of Miami website , states that he has overseen the creation of the University\u2019s camera system and that that system includes facial recognition. See a screenshot here:\n  Yet when reporters reached out to the university for comment, they were met with a response that doesn\u2019t line up: \u201cThe University of Miami does not utilize facial recognition technology.\u201d\n  Mars Fernandez (she/they), graduate student at University of Miami and member of the University of Miami Employee Student Alliance (UMESA), said, \u201cIt\u2019s disturbing that facial recognition can be used to summon me and other students for expressing discontent at our university\u2019s handling of a deadly virus and economic crisis. They deny it now, but just last week UMPD Police Chief Rivero is quoted in a campus magazine as using facial recognition. They could have asked subcontracted workers, faculty workers, and student workers how we are and what we need. Instead it appears they use advanced technology to warn us about protesting \u201ccorrectly,\u201d as if they ever would have listened.\u201d\n \u201cI think it\u2019s a shame that campus law enforcement was tasked with identifying peaceful protesters,\u201d  added Esteban Wood (he/him), undergraduate student at University of Miami and also a member of UMESA. \u201cInstitutions of higher learning should welcome dissent, not intimidate dissenters. It\u2019s deeply troubling to hear that campus leadership uses facial recognition technology.\u201d\n David Rivero was with the Miami Police Department for 26 years before taking the role of Chief of Police for the University of Miami. This police department has sustained heavy criticism from human rights experts and activists for  using facial recognition technology to identify Black Lives Matter protesters this summer.\n According to the scorecard at  BanFacialRecognition.com/Campus, any use of Facial Recognition by the University of Miami would be a move against the tide. Over 60 campuses in the US, from Harvard to MIT, have stated that they do not plan to use facial recognition, technology that has been widely condemned by experts as invasive, ineffective, and plagued by systemic racial and gender bias.\n \u201cIt sure seems like the University of Miami is using facial recognition to target and intimidate students who are exercising their First Amendment rights,\u201d  said Lia Holland (she/her), an organizer with digital rights group Fight for the Future who is supporting student activists. \u201cIf that\u2019s not the case, then they need to tell their Chief of Police to stop claiming they use this technology and ban facial recognition from their campus entirely. Be crystal clear and stand up for the rights of students, staff, and faculty alike, following the lead of other campuses like UCLA, and cities like Portland, San Francisco, and Boston.\u201d\n Students with the University of Miami Employee Student Alliance (UMESA) are available for interviews via  lia@fightforthefuture.org. Fight for the Future is also available to comment.", "posttime": "2020-11-05 20:12:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u5b66,\u6050\u5413,facial,\u5b66\u751f", "title": "\u8fc8\u963f\u5bc6\u5927\u5b66\u4f7f\u7528\u9762\u90e8\u8bc6\u522b\u6765\u6050\u5413\u6297\u8bae\u8005", "title_en": "U of Miami uses facial recognition to intimidate protestors", "transed": 1, "url": "https://fightfortheftr.medium.com/the-university-of-miami-claims-they-didnt-use-facial-recognition-to-intimidate-student-protesters-9a4f4b334dda", "via": "", "real_tags": ["\u5927\u5b66", "\u6050\u5413", "facial", "\u5b66\u751f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033286, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u5c1d\u8bd5\u4f7f\u7528typedef\uff01Try.typedes.com\u73b0\u6709\u7684\u5de5\u5177(Protobuf\u3001Thrift)\u7f3a\u4e4f\u4ee3\u6570\u7ed3\u6784\uff0c\u5728\u66f4\u6709\u539f\u5219\u7684\u8bbe\u7f6e(\u5982\u8bc1\u660e\u52a9\u624b\u6216\u7eaf\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00)\u4e2d\u4f7f\u7528\u65f6\u53ef\u80fd\u4f1a\u5f15\u8d77\u6469\u64e6\u3002\n\u8fd9\u4e2a\u9879\u76ee\u5373\u5c06\u6295\u5165\u4f7f\u7528\u3002\u6211\u4eec\u6b63\u5728\u52aa\u529b\u63d0\u4f9b\u6587\u6863\u3001\u5de5\u5177\u548c\u76ee\u6807\u8bed\u8a00\u652f\u6301\u3002\n\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6211\u4eec\u8bbe\u60f3\u7684\u662f\u4e00\u4e2a\u5185\u5bb9\u53ef\u5bfb\u5740\u7684\u7c7b\u578b\u5e93\uff0c\u53ef\u4ee5\u5728\u6240\u6709\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\uff0c\u751a\u81f3\u53ef\u4ee5\u5728\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u4f7f\u7528\u3002\n\u6216\u8005\u5728giHub/typedef\u4e0a\u67e5\u770b\u6211\u4eec\u7684\u4ee3\u7801\u3002\u5728\u63a8\u7279\u4e0a\u5173\u6ce8@statebox\uff0c\u968f\u65f6\u5173\u6ce8\u6700\u65b0\u6d88\u606f\u3002", "note_en": "You can try typedefs in your browser!   try.typedefs.com  Existing tools ( protobuf,  thrift) lack algebraic structure and may cause friction when used in more principled settings such as  proof assistants or  purely functional programming languages.\n   This project is close to being usable. We are working hard on documentation, tooling and target language support.\n In the long term, we envision a content addressable repository of types, usable in all programming languages and beyond.\n   Or check out our code on  github/typedefs. Follow   @statebox on twitter to stay up to date.", "posttime": "2020-11-05 20:12:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "typedefs", "title": "Typedefs", "title_en": "Typedefs", "transed": 1, "url": "https://typedefs.com/", "via": "", "real_tags": ["typedefs"]}, {"category": "", "categoryclass": "", "imagename": "1ebaed220f298ad954b6b1831048724c.png", "infoid": 1033285, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2017\u5e74\uff0c\u6211\u4eec\u63a8\u51fa\u4e86Amazon MQ-\u9762\u5411Apache ActiveMQ\u7684\u6258\u7ba1\u6d88\u606f\u4ee3\u7406\u670d\u52a1\uff0c\u8fd9\u662f\u4e00\u4e2a\u6d41\u884c\u7684\u5f00\u6e90\u6d88\u606f\u4ee3\u7406\uff0c\u901f\u5ea6\u5feb\uff0c\u529f\u80fd\u4e30\u5bcc\u3002\u5b83\u63d0\u4f9b\u961f\u5217\u548c\u4e3b\u9898\u3001\u6301\u4e45\u548c\u975e\u6301\u4e45\u8ba2\u9605\u3001\u57fa\u4e8e\u63a8\u9001\u548c\u57fa\u4e8e\u6295\u7968\u7684\u6d88\u606f\u4f20\u9012\u4ee5\u53ca\u8fc7\u6ee4\u3002\u501f\u52a9Amazon MQ\uff0c\u6211\u4eec\u901a\u8fc7\u5ba2\u6237\u53cd\u9988\u589e\u5f3a\u4e86\u8bb8\u591a\u65b0\u529f\u80fd\uff0c\u4ee5\u63d0\u9ad8\u9ad8\u53ef\u6269\u5c55\u6027\u548c\u53ef\u7528\u6027\uff0c\u4f8b\u5982\u5782\u76f4\u6269\u5c55\u548c\u5177\u670999.9%\u670d\u52a1\u7ea7\u522b\u534f\u8bae(SLA)\u7684\u541e\u5410\u91cf\u4f18\u5316\u6d88\u606f\u4ee3\u7406\uff0c\u4ee5\u652f\u6301LDAP\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\uff0c\u5e76\u5728\u7f8e\u56fd\u5546\u4e1a\u533a\u6784\u5efa\u5408\u89c4\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982HIPAA\u3001ISO/PCI DSS\u3001SOC\u548cFIPS 140-2\u9a8c\u8bc1\u7684\u7ec8\u7aef\u3002\n\u4e0d\u4ec5\u662fActiveMQ\uff0cRabbitMQ\u4e5f\u662f\u6700\u6d41\u884c\u7684\u5f00\u6e90\u6d88\u606f\u4ee3\u7406\u4e4b\u4e00\uff0c\u4e5f\u662f\u5927\u5b97\u5546\u54c1\u4ea4\u6613\u548c\u8ba2\u5355\u5904\u7406\u8f6f\u4ef6\u7b49\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u7684\u5173\u952e\u7ec4\u4ef6\u3002\u4e00\u4e9b\u5ba2\u6237\u9009\u62e9RabbitMQ\u662f\u56e0\u4e3a\u5b83\u7684\u529f\u80fd\u4e30\u5bcc\u3001\u6d3b\u8dc3\u7684\u793e\u533a\u652f\u6301\u4ee5\u53ca\u5e7f\u6cdb\u7684\u652f\u6301\u5ba2\u6237\u7aef\u548c\u6846\u67b6\u3002\u4f46\u662f\uff0cRabbitMQ\u6d88\u606f\u4ee3\u7406\u9700\u8981\u5728\u521b\u5efa\u548c\u4fee\u8865\u590d\u6742\u96c6\u7fa4\u90e8\u7f72\u6240\u9700\u7684\u4e13\u4e1a\u77e5\u8bc6\u65b9\u9762\u8fdb\u884c\u5927\u91cf\u6295\u8d44\u3002\u90a3\u4e9b\u613f\u610f\u66f4\u6362\u7ecf\u7eaa\u4eba\u5e76\u8f6c\u5411\u6258\u7ba1\u670d\u52a1\u7684\u516c\u53f8\uff0c\u4e0d\u5f97\u4e0d\u82b1\u8d39\u6570\u5468\u65f6\u95f4\u6765\u66f4\u6362\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u4eca\u5929\uff0c\u6211\u4eec\u63a8\u51fa\u4e86Amazon MQ for RabbitMQ\uff0c\u8fd9\u662f\u4e00\u9879\u6258\u7ba1\u6d88\u606f\u670d\u52a1\uff0c\u53ef\u4ee5\u964d\u4f4e\u7ba1\u7406RabbitMQ\u6d88\u606f\u4ee3\u7406\u7684\u516c\u53f8\u7684\u8fd0\u8425\u5f00\u9500\u3002\u6570\u4ee5\u5343\u8ba1\u7684\u5ba2\u6237\u5df2\u7ecf\u4f7f\u7528Amazon MQ\u6765\u964d\u4f4e\u5176\u6d88\u606f\u4f20\u9012\u57fa\u7840\u8bbe\u65bd\u7684\u8fd0\u8425\u5f00\u9500\u3002\u901a\u8fc7\u6dfb\u52a0RabbitMQ\u6765\u6269\u5c55Amazon MQ\u5e94\u7528\u7a0b\u5e8f\u517c\u5bb9\u6027\uff0c\u4f7f\u66f4\u591a\u516c\u53f8\u4ece\u90e8\u7f72\u3001\u6269\u5c55\u548c\u64cd\u4f5c\u6d88\u606f\u4ee3\u7406\u7684\u590d\u6742\u6027\u4e2d\u89e3\u8131\u51fa\u6765\u3002\n\u60a8\u53ef\u4ee5\u7ee7\u7eed\u4f7f\u7528\u9996\u9009\u4ee3\u7406\uff0c\u5e76\u62e5\u6709\u7ecf\u6d4e\u9ad8\u6548\u7684\u53ef\u6269\u5c55\u62a5\u6587\u4f20\u9001\u529f\u80fd\uff0c\u540c\u65f6\u964d\u4f4e\u8fd0\u8425\u5f00\u9500\u3002Amazon MQ\u7ba1\u7406\u8bbe\u7f6e\u5355\u4e2a\u6d88\u606f\u4ee3\u7406\u548c\u7fa4\u96c6\u6d88\u606f\u4ee3\u7406\u6240\u6d89\u53ca\u7684\u5de5\u4f5c\uff1a\u4ece\u914d\u7f6e\u57fa\u7840\u8bbe\u65bd\u5bb9\u91cf\u5230\u5b89\u88c5\u6d88\u606f\u4f20\u9012\u8f6f\u4ef6\u3002\u4e00\u65e6\u542f\u52a8\u5e76\u8fd0\u884c\uff0cAmazon MQ\u5c31\u4f1a\u5904\u7406\u8bf8\u5982\u4fee\u8865\u64cd\u4f5c\u7cfb\u7edf\u548c\u6d88\u606f\u4f20\u9012\u8f6f\u4ef6\u7b49\u7ba1\u7406\u4efb\u52a1\u3002\nAmazon MQ for RabbitMQ-\u5f00\u59cb\u521b\u5efa\u65b0\u7684RabbitMQ\u6d88\u606f\u4ee3\u7406\uff0c\u60a8\u53ef\u4ee5\u5355\u51fbAmazon MQ\u63a7\u5236\u53f0\u4e2d\u7684Get Started\u6309\u94ae\uff0c\u7136\u540e\u9009\u62e9\u4ee3\u7406\u5f15\u64ce\uff0cActiveMQ\u6216RabbitMQ\u63d0\u4f9b\u5bf9AMQP 0.9.1\u534f\u8bae\u7684\u672c\u5730\u652f\u6301\uff0c\u5e76\u4e3a\u5404\u79cd\u5e73\u53f0(\u5305\u62ecRuby\u3001Python\u3001Node.js\u3001.NET\u7b49)\u63d0\u4f9b\u5ba2\u6237\u7aef\u5e93\u3002\n\u4e0b\u4e00\u6b65\uff0c\u9009\u62e9RabbitMQ\u7684\u90e8\u7f72\u6a21\u5f0f\u3002\u5355\u4ee3\u7406\u90e8\u7f72\u5c06\u5728\u4e00\u4e2a\u53ef\u7528\u533a\u4e2d\u6709\u4e00\u4e2a\u4ee3\u7406\u5b9e\u4f8b\uff0c\u96c6\u7fa4\u90e8\u7f72\u5c06\u6709\u4e00\u4e2a\u7531\u4e09\u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u903b\u8f91\u5206\u7ec4\uff0c\u6bcf\u4e2a\u8282\u70b9\u5171\u4eab\u4e00\u4e2a\u5206\u5e03\u5f0f\u72b6\u6001\u3001\u7528\u6237\u548c\u961f\u5217\u3002\u5728\u7fa4\u96c6\u90e8\u7f72\u4e2d\uff0c\u6570\u636e\u8de8\u591a\u4e2a\u53ef\u7528\u533a\u5197\u4f59\u5b58\u50a8\uff0c\u4ee5\u63d0\u4f9b\u6d88\u606f\u6301\u4e45\u6027\u3002\nRabbitMQ\u96c6\u7fa4\u652f\u6301\u4f20\u7edf\u7684\u961f\u5217\u955c\u50cf\uff0c\u9002\u7528\u4e8e\u9700\u8981\u9ad8\u53ef\u7528\u6027\u7684\u7528\u4f8b\u3002\u955c\u50cf\u961f\u5217\u8de8\u591a\u4e2a\u8282\u70b9\u590d\u5236\u6d88\u606f\u3002\u5982\u679c\u6258\u7ba1\u961f\u5217\u7684\u4e3b\u8282\u70b9\u51fa\u73b0\u6545\u969c\uff0c\u955c\u50cf\u8282\u70b9\u5c06\u5347\u7ea7\u5230\u4e3b\u8282\u70b9\uff0c\u4ece\u800c\u5b9e\u73b0\u4e0d\u95f4\u65ad\u7684\u53ef\u7528\u6027\u3002\n\u5728\u4e0b\u4e00\u6b65\u4e2d\uff0c\u8f93\u5165\u4ee3\u7406\u540d\u79f0\u5e76\u9009\u62e9\u5b9e\u4f8b\u7c7b\u578b\u3002\u5bf9\u4e8e\u5177\u6709\u5355\u5b9e\u4f8b\u4ee3\u7406\u90e8\u7f72\u7684Free Tier\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9mq.t3.Micro\u8fdb\u884c\u57fa\u672c\u8bc4\u4f30\u3002\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801\u4ee5\u8bbf\u95eeRabbitMQ Web\u63a7\u5236\u53f0\u3002\n\u5bf9\u4e8e\u5176\u4ed6\u8bbe\u7f6e\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9\u4ee3\u7406\u5f15\u64ce\u7248\u672c\uff0c\u542f\u7528CloudWatch\u65e5\u5fd7\u4ee5\u5c06\u4ee3\u7406\u65e5\u5fd7\u53d1\u5e03\u5230Amazon CloudWatch\uff0c\u5e76\u5c06\u8bbf\u95ee\u7c7b\u578b\u8bbe\u7f6e\u4e3a\u865a\u62df\u79c1\u6709\u4e91(VPC)\u5916\u90e8\u6216\u4ec5\u5728VPC\u5185\u3002\u5982\u679c\u60a8\u9009\u62e9\u79c1\u6709\u8bbf\u95ee\uff0c\u60a8\u53ef\u4ee5\u5206\u914dvPC/\u5b50\u7f51\u4ee5\u9644\u52a0\u60a8\u7684EC2\u5b9e\u4f8b\u548c\u5b89\u5168\u7ec4\uff0c\u4ee5\u5b9a\u4e49\u6388\u6743\u6765\u81ea\u9700\u8981\u8bbf\u95ee\u60a8\u7684Broker\u5b9e\u4f8b\u7684\u6240\u6709EC2\u5b9e\u4f8b\u548c\u8bbe\u5907\u7684\u8fde\u63a5\u7684\u89c4\u5219\u3002\n\u5355\u51fbNext(\u4e0b\u4e00\u6b65)\u5e76\u68c0\u67e5\u60a8\u7684\u8bbe\u7f6e\uff0c\u7136\u540e\u5355\u51fbCreate Broker(\u521b\u5efa\u4ee3\u7406)\u6309\u94ae\uff0c\u60a8\u7684\u4ee3\u7406\u5c06\u57285-10\u5206\u949f\u5185\u521b\u5efa\u5b8c\u6bd5\u5e76\u53ef\u4f9b\u4f7f\u7528\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684AWS\u547d\u4ee4\u884c\u754c\u9762(CLI)\u547d\u4ee4\u4e3a\u7fa4\u96c6\u90e8\u7f72\u521b\u5efaRabbitMQ\u4ee3\u7406\uff1a\n$AWS MQ Create-Broker--Broker-name myRabbitCluster\\\r--\u90e8\u7f72\u6a21\u5f0fCLUSTER_MULTI_AZ\\\r--\u5f15\u64ce\u578bRabbitmq\\\r--\u5f15\u64ce-\u7248\u672c3.8.6\\\r--\u4e3b\u673a\u5b9e\u4f8b\u7c7b\u578bmq.m5.Large\\\r--\u516c\u5f00\u8bbf\u95ee\\\r--\u7528\u6237ConsoleAccess=true\uff0c\u7528\u6237\u540d=admin\uff0c\u5bc6\u7801=str0nGpass@#\uff0c\u7ec4=admin\u3002\n\u521b\u5efa\u65b0\u4ee3\u7406\u540e\uff0c\u60a8\u7528\u6765\u8bbf\u95ee\u4ee3\u7406\u7684Web\u63a7\u5236\u53f0URL\u548c\u7aef\u70b9\u53ea\u9700\u5355\u51fb\u4e00\u4e0b\u5373\u53ef\u8bbf\u95ee\uff1a\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u63d0\u4f9b\u7684\u94fe\u63a5\u8bbf\u95eeRabbitMQ Web\u63a7\u5236\u53f0\u3002\u6211\u53ea\u662f\u4f7f\u7528Pika Python\u5ba2\u6237\u7aef\u6d4b\u8bd5\u4e86\u8fd9\u4e2a\u4ee3\u7406\uff1a\n\u4ee3\u7406\u5c06\u5b9e\u4f8b\u3001\u4e3b\u9898\u548c\u961f\u5217\u6307\u6807\u53d1\u5e03\u5230CloudWatch\u3002\u8981\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u9605\u8bfbAmazon MQ for Rabbit MQ\u5f00\u53d1\u4eba\u5458\u6307\u5357\u3002\n\u73b0\u5728\u5c31\u6709\uff01Amazon MQ for RabbitMQ\u73b0\u5df2\u63a8\u51fa\uff0c\u60a8\u53ef\u4ee5\u5728Amazon MQ\u5f53\u524d\u6240\u5728\u7684\u6240\u6709\u5730\u533a\u5f00\u59cb\u4f7f\u7528\u5b83\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4ea7\u54c1\u9875\u9762\u3001\u5b9a\u4ef7\u548c\u3002\u8bf7\u5728Amazon MQ\u7684AWS\u8bba\u575b\u6216\u901a\u8fc7AWS\u652f\u6301\u6216\u60a8\u7684\u5ba2\u6237\u56e2\u961f\u5411\u6211\u4eec\u53d1\u9001\u53cd\u9988\u3002", "note_en": "In 2017, we  launched  Amazon MQ \u2013 a managed message broker service for  Apache ActiveMQ, a popular open-source message broker that is fast and feature-rich. It offers queues and topics, durable and non-durable subscriptions, push-based and poll-based messaging, and filtering. With Amazon MQ, we have enhanced lots of new features by customer feedback to improve high scalability and availability such as  vertical scaling and  throughput-optimized message brokers with   99.9% Service Level Agreement (SLA), to support   LDAP Authentication and Authorization, and to build compliant applications such as   HIPAA,  ISO/PCI DSS,  SOC, and  FIPS 140-2 validated endpoints in US Commercial Regions.\n  Not only ActiveMQ, but  RabbitMQ is also one of the most popular open source message brokers and a critical component of distributed applications, like commodities trading and order processing software. Some customers choose RabbitMQ for its feature richness, active community support, and broad range of supported clients and frameworks. However, RabbitMQ message brokers require significant investment in the expertise needed for creating and patching complex clustered deployments. Companies willing to change to a different broker, and to migrate to a managed service, had to invest weeks in changing their application.\n  Today, we are launching  Amazon MQ for RabbitMQ, a managed messaging service that reduces the operational overhead for companies managing RabbitMQ message brokers. Thousands of customers have already used Amazon MQ to reduce the operational overhead for their messaging infrastructure. Expanding Amazon MQ application compatibility by adding RabbitMQ frees more companies from the complexity of deploying, scaling, and operating message brokers.\n  You can continue to use your preferred broker and have cost-efficient scalable messaging capacity with reduced operational overhead. Amazon MQ manages the work involved in setting up both individual and clustered message brokers: from provisioning the infrastructure capacity to installing the messaging software. Once it is up and running, Amazon MQ handles administrative tasks such as patching the operating system and messaging software.\n  Amazon MQ for RabbitMQ \u2013 Getting Started  To create new RabbitMQ message brokers, you can click the  Get started button in  Amazon MQ console and select a broker engine, either ActiveMQ or RabbitMQ that offers native support for the AMQP 0.9.1 protocol with client libraries for a variety of platforms, including Ruby, Python, Node.js, .NET, and more.\n    In the next step, select a deployment mode of RabbitMQ. Single-broker deployment will have one broker instance in one Availability Zone, Cluster deployment will have a logical grouping of three nodes, each sharing a distributed state, users, and queues. In a cluster deployment, data is stored redundantly across multiple Availability Zones to provide message durability.\n  RabbitMQ clusters support classic queue mirroring for use cases that require high availability. Mirrored queues replicate messages across multiple nodes. If the main node that hosts a queue fails, a mirror node is promoted to the main node, resulting in uninterrupted availability.\n    In the next step, enter a Broker name and choose the instance type. You can select  mq.t3.micro for basic evaluations eligible for the  Free Tier with a single-instance broker deployment. Enter  Username and  Password to access RabbitMQ web console.\n    For your additional setting, you can choose a broker engine version, enable CloudWatch Logs to publish the broker\u2019s logs to  Amazon CloudWatch, and set the access type to outside  Virtual Private Cloud (VPC) or only within VPC. If you select Private access, you can assign VPC/Subnet(s) to attach your EC2 instances and Security group(s) to define the rules that authorize connections from all EC2 instances and devices that require access to your broker instance.\n    Click  Next and review your setting and click  Create broker button, which your broker will be created and ready to use in 5-10 minutes.\n    You can create a RabbitMQ broker via a simple command of  AWS Command Line Interface (CLI) for the cluster deployment:\n  $ aws mq create-broker --broker-name myRabbitCluster \\\r --deployment-mode CLUSTER_MULTI_AZ \\\r --engine-type rabbitmq \\\r --engine-version 3.8.6 \\\r --host-instance-type mq.m5.large \\ \r --publicly-accessible \\\r --users ConsoleAccess=true,Username=admin,Password=str0nGpass@#,Groups=admin\n  Once your new broker was created, the web console URL and endpoints that you use to access your broker are all available at a click:\n    You can access the RabbitMQ web console at the link provided. I simply tested this broker using the  Pika Python client:\n    The broker publishes instance, topic, and queue metrics to CloudWatch. To learn more, read the  Amazon MQ for Rabbit MQ Developer Guide.\n  Available Now!   Amazon MQ for RabbitMQ is available now and you can start using it in all regions Amazon MQ is currently available in. For more information, refer to the  product page, its  pricing, and  . Please send us feedback either in the  AWS forum for Amazon MQ or through AWS support, or your account team.", "posttime": "2020-11-05 20:12:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,\u4e9a\u9a6c\u900a,\u6d88\u606f,launches,\u4ee3\u7406", "title": "\u4e9a\u9a6c\u900a\u63a8\u51fa\u65b0\u7684RabbitMQ\u6d88\u606f\u4e2d\u4ecb\u670d\u52a1", "title_en": "Amazon Launches New RabbitMQ Message Broker Service", "transed": 1, "url": "https://aws.amazon.com/blogs/aws/amazon-mq-update-new-rabbitmq-message-broker-service/", "via": "", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u6d88\u606f", "launches", "\u4ee3\u7406"]}, {"category": "", "categoryclass": "", "imagename": "f1a12f91084d2eaea2a83841a48f07f8.jpg", "infoid": 1033284, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u9879\u9488\u5bf924\u540d\u60a3\u6709\u4e25\u91cd\u6291\u90c1\u75c7\u7684\u6210\u5e74\u4eba\u7684\u65b0\u7814\u7a76\u53d1\u73b0\uff0c\u4e24\u5242\u8ff7\u5e7b\u7269\u8d28\u88f8\u76d6\u83c7\u7d20\u914d\u5408\u652f\u6301\u6027\u5fc3\u7406\u6cbb\u7597\uff0c\u53ef\u8fc5\u901f\u5927\u5e45\u51cf\u8f7b\u6291\u90c1\u75c7\u72b6\u3002\u5927\u591a\u6570\u53c2\u4e0e\u8005\u90fd\u6709\u6539\u5584\uff0c\u5728\u56db\u5468\u7684\u968f\u8bbf\u4e2d\u6709\u4e00\u534a\u7684\u4eba\u53d6\u5f97\u4e86\u7f13\u89e3\u3002\u88f8\u76d6\u83c7\u7d20\u662f\u4e00\u79cd\u5728\u6240\u8c13\u7684\u201c\u795e\u5947\u8611\u83c7\u201d\u4e2d\u53d1\u73b0\u7684\u5316\u5408\u7269\u3002\u5b83\u4f1a\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\u4ea7\u751f\u89c6\u89c9\u548c\u542c\u89c9\u5e7b\u89c9\uff0c\u4ee5\u53ca\u610f\u8bc6\u7684\u6df1\u523b\u53d8\u5316\u3002\u8fd9\u4e00\u53d1\u73b0\u53d1\u8868\u572811\u67084\u65e5\u7684\u300a\u7f8e\u56fd\u533b\u5b66\u4f1a\u7cbe\u795e\u75c5\u5b66\u300b\u6742\u5fd7\u4e0a\u3002\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u7684\u5408\u8457\u8005\u827e\u4f26\u00b7\u6234\u7ef4\u65af(Alan Davis)\u8bf4\uff1a\u201c\u6211\u4eec\u770b\u5230\u7684\u6548\u679c\u6bd4\u5e02\u573a\u4e0a\u4f20\u7edf\u6297\u6291\u90c1\u836f\u7684\u4e34\u5e8a\u8bd5\u9a8c\u663e\u793a\u7684\u8981\u5927\u56db\u500d\u3002\u201d\u6b63\u5982\u8fd9\u7bc7\u8bba\u6587\u6240\u89e3\u91ca\u7684\u90a3\u6837\uff0c\u201c\u8fd9\u9879\u7814\u7a76\u4e2d\u62a5\u544a\u7684\u6548\u5e94\u5927\u5c0f\u5927\u7ea6\u662f\u5fc3\u7406\u6cbb\u7597\u4e2d\u53d1\u73b0\u7684\u6548\u5e94\u5927\u5c0f\u76842.5\u500d\uff0c\u6bd4\u5fc3\u7406\u836f\u7406\u5b66\u6291\u90c1\u75c7\u6cbb\u7597\u7814\u7a76\u4e2d\u53d1\u73b0\u7684\u6548\u5e94\u5927\u5c0f\u59274\u500d\u4ee5\u4e0a\u3002\u201d\u6234\u7ef4\u65af\u8bf4\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u5176\u4ed6\u6291\u90c1\u75c7\u6cbb\u7597\u65b9\u6cd5\u9700\u8981\u51e0\u5468\u6216\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u624d\u80fd\u594f\u6548\uff0c\u800c\u4e14\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u826f\u5f71\u54cd\uff0c\u5982\u679c\u8fd9\u4e9b\u53d1\u73b0\u5728\u672a\u6765\u7684\u4e34\u5e8a\u8bd5\u9a8c\u4e2d\u7ad9\u5f97\u4f4f\u811a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u6539\u53d8\u6e38\u620f\u89c4\u5219\u3002\u4e0e\u4f20\u7edf\u7684\u6297\u6291\u90c1\u836f\u7269\u76f8\u6bd4\uff0c\u88f8\u76d6\u83c7\u7d20\u7684\u526f\u4f5c\u7528\u66f4\u4e3a\u6709\u9650\u3002\u8fd9\u4e9b\u75c7\u72b6\u5305\u62ec\u8f7b\u5ea6\u5230\u4e2d\u5ea6\u5934\u75db\uff0c\u4ee5\u53ca\u6cbb\u7597\u671f\u95f4\u7684\u201c\u6311\u6218\u6027\u60c5\u7eea\u201d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u6297\u6291\u90c1\u836f\u7269\u6709\u66f4\u6df1\u8fdc\u7684\u526f\u4f5c\u7528\u3002\u8fd9\u4e9b\u75c7\u72b6\u5305\u62ec\u81ea\u6740\u5ff5\u5934\u3001\u6027\u6b32\u4e0b\u964d\u548c\u4f53\u91cd\u589e\u52a0\u3002\u6b64\u5916\uff0c\u88f8\u76d6\u83c7\u7d20\u6cbb\u7597\u53ea\u9700\u4e00\u6b21\u6216\u4e24\u6b21\u7ed9\u836f\u5373\u53ef\u89c1\u6548\u3002\u8fd9\u662f\u4e0e\u901a\u5e38\u9700\u8981\u6bcf\u65e5\u670d\u7528\u7684\u5e38\u7528\u6297\u6291\u90c1\u836f\u76f8\u6bd4\u7684\u53e6\u4e00\u4e2a\u4f18\u52bf\u3002\u5728\u8fd9\u9879\u65b0\u7684\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u62db\u52df\u4e8624\u540d\u6709\u957f\u671f\u6291\u90c1\u75c7\u53f2\u7684\u4eba\u3002\u5927\u591a\u6570\u53c2\u4e0e\u8005\u5728\u53c2\u52a0\u8fd9\u9879\u7814\u7a76\u4e4b\u524d\u90fd\u7ecf\u5386\u4e86\u5927\u7ea6\u4e24\u5e74\u7684\u75c7\u72b6\u3002\u53c2\u4e0e\u8005\u5728\u7814\u7a76\u4eba\u5458\u7684\u76d1\u7763\u4e0b\uff0c\u63a5\u53d7\u4e86\u4e24\u6b215\u5c0f\u65f6\u7684\u88f8\u76d6\u83c7\u7d20\u6cbb\u7597\u3002\u53c2\u4e0e\u8005\u7684\u5e73\u5747\u5e74\u9f84\u4e3a39\u5c81\u3002\u5176\u4e2d16\u4eba\u662f\u5973\u6027\u300222\u540d\u88ab\u786e\u8ba4\u4e3a\u767d\u4eba\uff0c\u4e00\u540d\u88ab\u786e\u8ba4\u4e3a\u4e9a\u6d32\u4eba\uff0c\u4e00\u540d\u88ab\u786e\u8ba4\u4e3a\u975e\u88d4\u7f8e\u56fd\u4eba\u3002\u5728\u7814\u7a76\u4e4b\u524d\uff0c\u53c2\u4e0e\u8005\u5fc5\u987b\u9010\u6e10\u51cf\u5c11\u4efb\u4f55\u6297\u6291\u90c1\u836f\u7269\u3002\u4ed6\u4eec\u5728\u79c1\u4eba\u533b\u751f\u7684\u5e2e\u52a9\u4e0b\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4ee5\u786e\u4fdd\u5b89\u5168\u5730\u63a5\u89e6\u5230\u8fd9\u79cd\u5b9e\u9a8c\u6027\u7684\u6cbb\u7597\u65b9\u6cd5\u3002\u6cbb\u7597\u5305\u62ec\u7531\u4e24\u540d\u76d1\u6d4b\u5458\u7ed9\u4e88\u4e24\u5242\u88f8\u76d6\u83c7\u7d20\uff0c\u4ed6\u4eec\u63d0\u4f9b\u6307\u5bfc\u548c\u5b89\u6170\u3002\u8fd9\u4e9b\u5242\u91cf\u57282017\u5e748\u6708\u81f32019\u5e744\u6708\u4e4b\u95f4\u76f8\u9694\u4e24\u5468\u670d\u7528\u3002\u6bcf\u6b21\u6cbb\u7597\u6301\u7eed\u7ea65\u4e2a\u5c0f\u65f6\u3002\u53c2\u4e0e\u8005\u8eba\u5728\u6c99\u53d1\u4e0a\uff0c\u6234\u7740\u773c\u7f69\uff0c\u6234\u7740\u64ad\u653e\u97f3\u4e50\u7684\u8033\u673a\uff0c\u5728\u76d1\u89c6\u5668\u9762\u524d\u3002\u6240\u6709\u53c2\u4e0e\u8005\u5728\u6ce8\u518c\u65f6\u90fd\u5b8c\u6210\u4e86GRID-\u6c49\u5bc6\u5c14\u987f\u6291\u90c1\u91cf\u8868(GRID-Hamilton Depression Scale)\u3002\u4ed6\u4eec\u5728\u6cbb\u7597\u7ed3\u675f\u540e\u7684\u4e00\u5468\u548c\u56db\u5468\u4e5f\u505a\u4e86\u540c\u6837\u7684\u8bc4\u4f30\u3002\u5f97\u5206\u572824\u6216\u66f4\u9ad8\u7684\u4eba\u8868\u793a\u4e25\u91cd\u6291\u90c1\u300217-23\u5206\u8868\u793a\u4e2d\u5ea6\u6291\u90c1\uff0c8-16\u5206\u8868\u793a\u8f7b\u5ea6\u6291\u90c1\uff0c7\u5206\u6216\u66f4\u4f4e\u8868\u793a\u65e0\u6291\u90c1\u3002\u5728\u6ce8\u518c\u65f6\uff0c\u53c2\u4e0e\u8005\u7684\u5e73\u5747\u6291\u90c1\u91cf\u8868\u8bc4\u5206\u4e3a23\u5206\u3002\u4f46\u5728\u6cbb\u7597\u540e\u4e00\u5468\u548c\u56db\u5468\uff0c\u4ed6\u4eec\u7684\u5e73\u5747\u6291\u90c1\u91cf\u8868\u5f97\u5206\u4e3a8\u5206\u3002\u6cbb\u7597\u540e\uff0c\u5927\u591a\u6570\u53c2\u4e0e\u8005\u7684\u75c7\u72b6\u90fd\u6709\u4e86\u5b9e\u8d28\u6027\u7684\u6539\u5584\u3002\u540c\u6837\uff0c\u5728\u4e3a\u671f\u56db\u5468\u7684\u968f\u8bbf\u4e2d\uff0c\u51e0\u4e4e\u4e00\u534a\u7684\u4eba\u4ece\u6291\u90c1\u4e2d\u5f97\u5230\u7f13\u89e3\u3002\u572824\u540d\u53c2\u4e0e\u8005\u4e2d\uff0c67%\u7684\u4eba\u5728\u4e00\u5468\u7684\u968f\u8bbf\u4e2d\u6291\u90c1\u75c7\u72b6\u51cf\u5c11\u4e8650%\u4ee5\u4e0a\uff0c\u56db\u5468\u7684\u968f\u8bbf\u4e2d\u670971%\u7684\u4eba\u8868\u73b0\u51fa\u6291\u90c1\u75c7\u72b6\u7684\u51cf\u5c11\u3002\u603b\u4f53\u800c\u8a00\uff0c\u6cbb\u7597\u540e\u56db\u5468\uff0c54%\u7684\u53c2\u4e0e\u8005\u88ab\u8ba4\u4e3a\u662f\u7f13\u89e3\u671f\uff0c\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e0d\u518d\u6709\u6291\u90c1\u7684\u8d44\u683c\u3002\u4e0e\u53e6\u4e00\u79cd\u6700\u8fd1\u88ab\u53d1\u73b0\u53ef\u4ee5\u7f13\u89e3\u6291\u90c1\u7684\u7cbe\u795e\u6d3b\u6027\u7269\u8d28\u6c2f\u80fa\u916e\u76f8\u6bd4\uff0c\u88f8\u76d6\u83c7\u7d20\u6709\u51e0\u4e2a\u4f18\u70b9\u3002\u88f8\u76d6\u83c7\u7d20\u7684\u6297\u6291\u90c1\u4f5c\u7528\u4f3c\u4e4e\u6301\u7eed\u65f6\u95f4\u66f4\u957f\u3002\u88f8\u76d6\u83c7\u7d20\u4e0e\u6c2f\u80fa\u916e\u76f8\u6bd4\uff0c\u6210\u763e\u548c\u4e0d\u826f\u53cd\u5e94\u7684\u53ef\u80fd\u6027\u4e5f\u66f4\u4f4e\u3002\u7814\u7a76\u4eba\u5458\u8bf4\uff0c\u4ed6\u4eec\u5c06\u5728\u7814\u7a76\u7ed3\u675f\u540e\u5bf9\u53c2\u4e0e\u8005\u8fdb\u884c\u4e3a\u671f\u4e00\u5e74\u7684\u8ddf\u8e2a\u8c03\u67e5\uff0c\u770b\u770b\u88f8\u76d6\u83c7\u7d20\u6cbb\u7597\u7684\u6297\u6291\u90c1\u6548\u679c\u80fd\u6301\u7eed\u591a\u4e45\u3002\u4ed6\u4eec\u5c06\u5728\u4ee5\u540e\u7684\u51fa\u7248\u7269\u4e2d\u62a5\u544a\u8fd9\u4e9b\u65b0\u53d1\u73b0\u30022016\u5e74\uff0c\u7ea6\u7ff0\u00b7\u970d\u666e\u91d1\u65af\u533b\u5b66\u9662\u7684\u7814\u7a76\u4eba\u5458\u9996\u6b21\u62a5\u9053\uff0c\u5728\u5fc3\u7406\u652f\u6301\u7684\u6761\u4ef6\u4e0b\u4f7f\u7528\u88f8\u76d6\u83c7\u7d20\u6cbb\u7597\uff0c\u663e\u8457\u7f13\u89e3\u4e86\u88ab\u8bca\u65ad\u4e3a\u4e25\u91cd\u5a01\u80c1\u751f\u547d\u7684\u764c\u75c7\u60a3\u8005\u7684\u751f\u5b58\u6027\u7126\u8651\u548c\u6291\u90c1\u3002\u6839\u636e\u7f8e\u56fd\u56fd\u5bb6\u5fc3\u7406\u5065\u5eb7\u7814\u7a76\u6240(National Institute Of Mental Health)\u7684\u6570\u636e\uff0c\u7f8e\u56fd\u6709\u8d85\u8fc71700\u4e07\u4eba\uff0c\u5168\u4e16\u754c\u67093\u4ebf\u4eba\u7ecf\u5386\u8fc7\u4e25\u91cd\u7684\u6291\u90c1\u75c7\u3002\u4f01\u4e1a\u5bb6\u517c\u6148\u5584\u5bb6\u8482\u59c6\u00b7\u8d39\u91cc\u65af(Tim Ferriss)\u652f\u6301\u8fd9\u9879\u7814\u7a76\u7684\u7b79\u8d44\u6d3b\u52a8\u3002\u4ed6\u8bf4\uff1a\u201c\u6211\u76f8\u4fe1\u8fd9\u9879\u7814\u7a76\u662f\u533b\u5b66\u4e0a\u6279\u51c6\u88f8\u76d6\u83c7\u7d20\u6cbb\u7597\u6291\u90c1\u75c7\u7684\u4e00\u4e2a\u6781\u5176\u91cd\u8981\u7684\u6982\u5ff5\u8bc1\u660e\uff0c\u6211\u4e2a\u4eba\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u5728\u4e0e\u8fd9\u79cd\u75be\u75c5\u4f5c\u6597\u4e89\u3002\u201d\u201c\u6211\u4eec\u5982\u4f55\u89e3\u91ca\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u9ea6\u683c\u5c3c", "note_en": "A  new study of 24 adults with major depression finds that two doses of the psychedelic substance psilocybin, given with supportive psychotherapy, produced rapid and large reductions in depressive symptoms. Most of the participants showed improvement, and half achieved remission at the four-week follow-up.    Psilocybin is a compound found in so-called \u201cmagic mushrooms.\u201d It produces visual and auditory hallucinations, and profound changes in consciousness, over a period of several hours. The findings appeared on November 4 in\u00a0  JAMA Psychiatry.  \u201cThe magnitude of the effect we saw was about four times larger than what clinical trials have shown for traditional antidepressants on the market,\u201d said co-author  Alan Davis of Johns Hopkins University. As the paper explains, \u201cthe effect sizes reported in this study were approximately 2.5 times greater than the effect sizes found in psychotherapy, and more than 4 times greater than the effect sizes found in psycho-pharmacological depression treatment studies.\u201d    \u201cBecause most other depression treatments take weeks or months to work and may have undesirable effects, this could be a game changer if these findings hold up\u201d in future clinical trials,\u201d Davis said. And compared to traditional antidepressants, the side effects of psilocybin are more limited. These include mild-to-moderate headaches, and \u201cchallenging emotions\u201d during the sessions. Antidepressant medications, on the other hand, have more far-reaching side effects. These include  suicidal ideation, decrease in sexual drive, and weight gain. Furthermore, the effectiveness of psilocybin  therapy appears after only one or two administrations. This represents another advantage over commonly used antidepressants, which typically require daily administration.  For the new study, the researchers recruited 24 people with a long-term history of depression. Most of the participants had experienced symptoms for about two years before enrolling in the study.     The participants underwent two five-hour psilocybin sessions, under the supervision of the researchers. The average age of participants was 39. Sixteen were women. Twenty-two identified as white, one identified as Asian, and one identified as African American. Participants had to taper off any antidepressants prior to the study. They did so with the help of their personal physician, to ensure safe exposure to this experimental treatment. Treatment consisted of two psilocybin doses given by two monitors who provided guidance and reassurance. The doses were given two weeks apart, between August 2017 and April 2019. Each treatment session lasted about five hours. The participants lay on a couch wearing eyeshades and headphones that played music, in the presence of the monitors.  All participants completed the  GRID-Hamilton Depression Rating Scale upon enrollment. They also did this same assessment at one and four weeks following completion of their treatment. A score of 24 or more indicates severe depression. A score of 17-23 means moderate depression, 8-16 mild depression, and 7 or less no depression. At enrollment, participants had an average depression scale rating of 23. But at one week and four weeks after treatment, they had an average depression scale score of 8. After treatment, most participants showed a substantial decrease in their symptoms. Likewise, almost half were in remission from depression at the four-week follow-up. For the entire group of 24 participants, 67% showed a more than 50% reduction in depression symptoms at the one-week follow-up, and 71% at the four-week follow-up. Overall, four weeks post-treatment, 54% of participants were considered in remission, meaning they no longer qualified as being depressed. Compared to ketamine, another psychoactive substance that has  recently been found to alleviate depression, psilocybin has several advantages. The antidepressant effects of psilocybin seem to last longer. Psilocybin also has a lower potential for addiction and adverse events than ketamine.  The researchers say they will follow the participants for a year after the study to see how long the antidepressant effects of the psilocybin treatment last. They will report these new findings in a later publication. In 2016, Johns Hopkins Medicine researchers first reported that treatment with psilocybin under psychologically supported conditions significantly relieved existential anxiety and depression in people with a\u00a0 life-threatening cancer diagnosis. According to the National Institute of Mental Health, more than 17 million people in the U.S., and 300 million people worldwide, have experienced major  depression. Entrepreneur and philanthropist  Tim Ferriss supported the funding campaign for this study. \u201cI believe this study to be a critically important proof of concept for the medical approval of psilocybin for treatment of depression, a condition I have personally struggled with for decades,\u201d he said. \u201cHow do we explain the incredible magnitude and durability of effects? Treatment research with moderate to high doses of psychedelics may uncover entirely new paradigms for understanding and improving mood and mind,\u201d Ferriss said.  Study: \u201c Effects of Psilocybin-Assisted Therapy on Major Depressive Disorder: A Randomized Clinical Trial\u201c  Authors: Alan K. Davis, Frederick S. Barrett, Darrick G. May, Mary P. Cosimano, Nathan D. Sepeda, Matthew W. Johnson, Patrick H. Finan, and Roland R. Griffiths  Published in:   JAMA Psychiatry  Publication date: November 4, 2020  DOI: doi:10.1001/jamapsychiatry.2020.3285  Photo: by\u00a0 James Bak\u00a0via  Unsplash  For a weekly summary of the latest psychology news, subscribe to our  Psych News Weekly newsletter.", "posttime": "2020-11-05 20:11:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7814\u7a76,finds,\u6cbb\u7597", "title": "\u4e00\u9879\u65b0\u7684\u7814\u7a76\u53d1\u73b0\u88f8\u76d6\u83c7\u7d20\u80fd\u663e\u8457\u4e14\u8fc5\u901f\u5730\u7f13\u89e3\u6291\u90c1\u75c7", "title_en": "New study finds psilocybin greatly and quickly relieves depression", "transed": 1, "url": "https://www.psychnewsdaily.com/new-study-psilocybin-magic-mushrooms-relieves-depression/", "via": "", "real_tags": ["\u7814\u7a76", "finds", "\u6cbb\u7597"]}, {"category": "", "categoryclass": "", "imagename": "c13477f6896e3f061f40791358604777.png", "infoid": 1033283, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Singulity\u662f\u4e00\u4e2a\u5f00\u6e90\u5bb9\u5668\u5e73\u53f0\uff0c\u65e8\u5728\u7b80\u5355\u3001\u5feb\u901f\u548c\u5b89\u5168\u3002\u5947\u70b9\u9488\u5bf9\u4e13\u6ce8\u4e8e\u8ba1\u7b97\u7684\u4f01\u4e1a\u548cHPC\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u4e86\u4f18\u5316\uff0c\u5141\u8bb8\u4e0d\u53d7\u4fe1\u4efb\u7684\u7528\u6237\u5728\u53ef\u4fe1\u4efb\u65b9\u5f0f\u4e2d\u8fd0\u884c\u4e0d\u53d7\u4fe1\u4efb\u7684\u5bb9\u5668\u3002\n\u7cfb\u7edf\u7ba1\u7406\u5458\u53ef\u4ee5\u5728\u7ba1\u7406\u5458\u6307\u5357\u4e2d\u4e86\u89e3\u5982\u4f55\u914d\u7f6e\u5947\u70b9\uff0c\u5e76\u83b7\u5f97\u5176\u4f53\u7cfb\u7ed3\u6784\u548c\u5b89\u5168\u529f\u80fd\u7684\u6982\u8ff0\u3002\n\u793e\u533a\u7684\u8d21\u732e\u603b\u662f\u53d7\u5230\u6781\u5927\u7684\u8d5e\u8d4f\u3002\u8981\u5f00\u59cb\u5f00\u53d1\u5947\u70b9\uff0c\u8bf7\u67e5\u770b\u6295\u7a3f\u6307\u5357\u3002\n\u5e93\u5c14\u7b56\u00b7GM\uff0cSochat V\uff0cBauer MW(2017)\u5947\u70b9\uff1a\u8ba1\u7b97\u79fb\u52a8\u6027\u7684\u79d1\u5b66\u5bb9\u5668\u3002PLOS One 12(5)\uff1ae0177459\u3002Https://doi.org/10.1371/journal.pone.0177459\u3002\n\u8fd9\u662f\u4e00\u4e2a\u6240\u6709\u7248\u672c\u7684DOI\u3002\u70b9\u51fbZenodo\u94fe\u63a5\uff0c\u83b7\u53d6\u7279\u5b9a\u7248\u672c\u5947\u70b9\u7684DOI\u3002\n\u9664\u975e\u53e6\u6709\u8bf4\u660e\uff0c\u672c\u9879\u76ee\u662f\u6839\u636e\u8bb8\u53ef\u6587\u4ef6\u4e2d\u76843\u6761BSD\u8bb8\u53ef\u8fdb\u884c\u8bb8\u53ef\u7684\u3002", "note_en": "Singularity is an open source container platform designed to be simple, fast,and secure. Singularity is optimized for compute focused enterprise and HPCworkloads, allowing untrusted users to run untrusted containers in a trustedway.\n    System administrators can learn how to configure Singularity, and get anoverview of its architecture and security features in the  administratorguide.\n   Community contributions are always greatly appreciated. To start developingSingularity, check out the  guidelines for contributing.\n      Kurtzer GM, Sochat V, Bauer MW (2017) Singularity: Scientific containers for mobility of compute. PLoS ONE 12(5): e0177459. https://doi.org/10.1371/journal.pone.0177459\n    This is an &#39;all versions&#39; DOI. Follow the link to Zenodo to obtain a DOI specificto a particular version of Singularity.\n  Unless otherwise noted, this project is licensed under a 3-clause BSD licensefound in the  license file.", "posttime": "2020-11-05 20:11:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u5bb9\u5668,open,\u5947\u70b9", "title": "\u5947\u70b9--\u4e00\u4e2a\u5f00\u6e90\u7684\u7b80\u5355\u3001\u5feb\u901f\u3001\u5b89\u5168\u7684\u5bb9\u5668\u5e73\u53f0", "title_en": "Singularity \u2013 an open source simple, fast, and secure container platform", "transed": 1, "url": "https://github.com/hpcng/singularity", "via": "", "real_tags": ["\u5f00\u6e90", "\u5bb9\u5668", "open", "\u5947\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033281, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ba1\u7406\u7a0b\u5e8f\u5185\u5b58\u81ea\u7701(HVMI)\u4f9d\u8d56\u4e8e\u5206\u6790\u5185\u5b58\u8bbf\u95ee\u4ee5\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u5408\u6cd5\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5206\u6790\u65e7\u7684\u5b58\u50a8\u503c\u548c\u65b0\u5b58\u50a8\u7684\u503c\uff0cHVMI\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u5141\u8bb8\u4fee\u6539\u3002\u7136\u800c\uff0c\u8fd9\u5e26\u6765\u4e86\u9700\u8981\u5bf9\u4fee\u6539\u53d7\u4fdd\u62a4\u5185\u5b58\u7684\u6bcf\u6761\u6307\u4ee4\u8fdb\u884c\u6df1\u5165\u5206\u6790\u7684\u590d\u6742\u6027\u3002\u4e0eRISC\u4f53\u7cfb\u7ed3\u6784\u4e0d\u540c\uff0cx86\u6709\u5927\u91cf\u7684\u6307\u4ee4\u53ef\u4ee5\u901a\u8fc7\u590d\u6742\u7684\u8bfb-\u4fee\u6539-\u5199(RMW)\u65b9\u5f0f\u8bbf\u95ee\u5b58\u50a8\u5668\uff0c\u5e76\u4f7f\u7528\u590d\u6742\u7684\u5bfb\u5740\u65b9\u6848\u3002\u4e3a\u4e86\u7b80\u5316\u6307\u4ee4\u89e3\u7801\u548c\u5206\u6790\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u4e13\u7528\u7684x86\u6307\u4ee4\u89e3\u7801\u5668\uff0c\u80fd\u591f\u63d0\u4f9b\u5b8c\u6574\u7684\u6307\u4ee4\u4fe1\u606f\uff0c\u4ece\u800c\u51cf\u8f7b\u4e86HVMI\u6a21\u5757\u5bf9x86\u6307\u4ee4\u683c\u5f0f\u7684\u9700\u8981\u3002\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u4e00\u4e9bbddisasm\u5185\u90e8\u673a\u5236\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u5b83\uff0c\u540c\u65f6\u5f3a\u8c03\u4e3a\u4ec0\u4e48\u5b83\u662fHVMI\u7684\u5173\u952e\u90e8\u5206\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5c06\u4ecb\u7ecdx86\u6307\u4ee4\u7f16\u7801\u7684\u4e00\u4e9b\u7279\u6b8a\u6027\u3002\u4e3b\u8981\u7684bddisasm\u9879\u76ee\u4f4d\u4e8e\u6b64\u5904\uff0c\u53ef\u4ee5\u5728\u6b64\u5904\u8bbf\u95ee\u6587\u6863\u3002\nBddisasm\u662f\u4e00\u4e2a\u7528C\u7f16\u5199\u7684\u72ec\u7acb\u5e93\uff0c\u4f7f\u7528\u4e00\u4e9bPython\u751f\u6210\u5185\u90e8\u89e3\u7801\u8868\u3002\u8be5\u5e93\u6784\u5efa\u5f97\u5f88\u5feb\uff0c\u540c\u65f6\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u5173\u4e8e\u5df2\u89e3\u7801\u6307\u4ee4\u7684\u4fe1\u606f-\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5176\u4ed6\u4f7f\u7528bddisasm\u7684\u9879\u76ee\u53ef\u4ee5\u4f9d\u8d56\u5b83\u6765\u63d0\u4f9b\u5173\u4e8e\u6307\u4ee4\u7684\u5b8c\u6574\u800c\u51c6\u786e\u7684\u4fe1\u606f\u3002\u5728\u8003\u8651\u5176\u4ed6\u89e3\u7801\u5e93\u65f6\uff0c\u53ea\u6709\u4e00\u4e9b\u529f\u80fd\u76f8\u4f3c\uff1a\nIntel Xed\u662f\u7531Intel\u7f16\u5199\u548c\u7ef4\u62a4\u7684\uff0c\u56e0\u6b64\u4ee5\u67d0\u79cd\u65b9\u5f0f\u4f7f\u5176\u6210\u4e3a\u6807\u51c6\u7684x86\u89e3\u7801\u5668\uff1b\u867d\u7136\u5b83\u4e0d\u662f\u6700\u5feb\u7684\uff0c\u4f46\u5b83\u63d0\u4f9b\u4e86\u5173\u4e8e\u89e3\u7801\u6307\u4ee4\u7684\u4e30\u5bcc\u4fe1\u606f\uff1b\nZydis\uff0c\u5c31\u529f\u80fd\u800c\u8a00\u53ef\u4ee5\u4e0eXed\u76f8\u5ab2\u7f8e\uff0c\u800c\u4e14\u8f7b\u91cf\u7ea7(\u7136\u800c\uff0c\u5728\u5185\u90e8\u521b\u5efabddisasm\u65f6\uff0cZydis\u8fd8\u4e0d\u5b58\u5728)\uff1b\n\u7528\u5176\u4ed6\u8bed\u8a00(\u5982Rust\u6216C#)\u7f16\u5199\u7684\u5176\u4ed6\u89e3\u7801\u5668\u6216\u53cd\u6c47\u7f16\u7a0b\u5e8f(\u53ea\u63d0\u4f9b\u6307\u4ee4\u7684\u6587\u672c\u8f93\u51fa\uff0c\u800c\u4e0d\u63d0\u4f9b\u5b9e\u9645\u89e3\u7801\u7684\u6307\u4ee4\u4fe1\u606f)\u4e0d\u88ab\u8003\u8651\u3002\u8003\u8651\u5230\u5f53\u65f6Xed\u548cCapstone\u4f3c\u4e4e\u5f88\u96be\u5408\u4f5c\uff0c\u6211\u4eec\u51b3\u5b9a\u521b\u5efa\u81ea\u5df1\u7684\u8f7b\u91cf\u7ea7\u89e3\u7801\u5668\uff0c\u8003\u8651\u5230\u4ee5\u4e0b\u76ee\u6807\uff1a\n\u8f7b\u91cf\u7ea7-\u5b8c\u5168\u7528C\u8bed\u8a00\u7f16\u5199\uff0c\u6ca1\u6709\u5916\u90e8\u4f9d\u8d56\uff0c\u6ca1\u6709\u5206\u914d\u5185\u5b58\uff0c\u8bbe\u8ba1\u4e0a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff1b\n\u901f\u5ea6--\u867d\u7136\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u6307\u4ee4\u4fe1\u606f\u7684\u89e3\u7801\u5668\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u8ba4\u4e3a\u901f\u5ea6\u662f\u4e00\u4e2a\u91cd\u8981\u56e0\u7d20\uff1b\n\u5f39\u6027-\u89e3\u7801\u5668\u5e94\u8be5\u80fd\u591f\u5904\u7406\u5404\u79cd\u683c\u5f0f\u9519\u8bef\u7684\u6307\u4ee4\uff0c\u4ee5\u53ca\u5305\u542b\u5197\u4f59\u524d\u7f00\u6216\u975e\u5178\u578b\u7f16\u7801\u7684\u6709\u6548\u6307\u4ee4\uff1b\n\u5b8c\u6574-\u89e3\u7801\u5668\u5fc5\u987b\u652f\u6301\u6240\u6709\u73b0\u6709\u7684x86\u6307\u4ee4\uff0c\u5305\u62ecAVX\uff1b\u6b64\u5916\uff0c\u6269\u5c55\u5bf9\u65b0\u6307\u4ee4\u7684\u652f\u6301\u5e94\u8be5\u5c3d\u53ef\u80fd\u7b80\u5355\uff1b\n\u6613\u4e8e\u4f7f\u7528-\u5355\u5934\u6587\u4ef6\uff0c\u5355API\u5e93\uff0c\u5b83\u63d0\u4f9b\u4e86\u8f93\u51fa\u89e3\u7801\u6307\u4ee4\u4e2d\u6240\u6709\u53ef\u80fd\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u9700\u8981\u8c03\u7528\u989d\u5916\u7684\u51fd\u6570\u6765\u4ece\u89e3\u7801\u6307\u4ee4\u4e2d\u63d0\u53d6\u4fe1\u606f\uff1b\n\u6211\u4eec\u4e0d\u4f1a\u5bf9bddisasm\u548c\u5176\u4ed6\u89e3\u7801\u5e93\u8fdb\u884c\u6bd4\u8f83\uff0c\u6211\u4eec\u5c06\u628a\u8fd9\u7bc7\u535a\u5ba2\u7684\u91cd\u70b9\u653e\u5728\u5982\u4f55\u4f7f\u7528bddisasm\u4ee5\u53ca\u5b83\u5728HVMI\u4e2d\u7684\u7528\u5904\u3002\n\u4f7f\u7528\u89e3\u7801\u5e93\u5f88\u5bb9\u6613\uff1a\u5305\u62ecbddisasm.h\u5934\u6587\u4ef6\uff0c\u94fe\u63a5\u5230bddisasm.lib(Windows)\u6216libbddisasm.a(Linux)\uff0c\u7136\u540e\u8c03\u7528\u89e3\u7801API\uff01Bddisasm\u4f7f\u7528\u5355\u4e00API\u89e3\u7801\u65b9\u6848\uff0c\u5176\u4e2dNdDecode API\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6709\u5173\u6307\u4ee4\u7684\u6240\u6709\u53ef\u80fd\u4fe1\u606f\u7684\u8f93\u51faINSTRUX\u7ed3\u6784\u3002INSTRUX\u7ed3\u6784\u4e2d\u552f\u4e00\u6ca1\u6709\u5305\u62ec\u7684\u662f\u6307\u4ee4\u7684\u6587\u672c\u53cd\u6c47\u7f16\uff0c\u5b83\u5fc5\u987b\u4f7f\u7528NdToText API\u5355\u72ec\u751f\u6210\u3002\u5178\u578b\u7684\u4f7f\u7528\u573a\u666f\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n#INCLUDE&#34\uff1bbddisasm/bddisasm.h&#34\uff1bint main(){INSTRUX ix\uff1bunsign char ins[2]={0x33\uff0c0xC0}\uff1bNDSTATUS Status\uff1bStatus=NdDecodeEx(&amp\uff1bix\uff0cins\uff0csizeof(Ins)\uff0cND_CODE_64\uff0cND_DATA_64)\uff1b\u5982\u679c(\uff01ND_SUCCESS(\u72b6\u6001)){printf(&#34\uff1b\u89e3\u7801\u5931\u8d25\uff0c\u9519\u8bef0x%08x\uff01\\n&#34\uff1b\uff0c\u72b6\u6001)\uff1breturn-1\uff1b}printf(&#34\uff1b\u89e3\u7801\u7684\u6307\u4ee4\u957f\u5ea6\u4e3a%d\uff01\\n&#34\uff1b\uff0cix\u3002\u957f\u5ea6)\uff1b}\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8f93\u51faINSTRUX ix\u7ed3\u6784\u5c06\u5305\u542b\u6709\u5173\u5df2\u89e3\u7801\u6307\u4ee4\u7684\u6240\u6709\u4fe1\u606f\u3002\u6709\u5173\u60a8\u53ef\u4ee5\u627e\u5230\u7684\u4fe1\u606f\u7c7b\u578b\u7684\u7efc\u5408\u5217\u8868\uff1a\n\u91cd\u590d\u89e3\u7801\u7684\u524d\u7f00\u4fe1\u606f\uff0c\u4f8b\u5982\u6307\u4ee4\u662f\u5426\u4f7f\u7528\u9501\u5b9a\uff0c\u662f\u5426\u542f\u7528xAcquisition/xRelease\u6216\u8ddf\u8e2aCET\uff1b\n\u957f\u5ea6\u4fe1\u606f\uff0c\u5305\u62ec\u5173\u4e8e\u6307\u4ee4\u672c\u8eab\u548c\u6307\u4ee4\u7684\u4e0d\u540c\u5b57\u6bb5\u7684\u4fe1\u606f\uff0c\u4f8b\u5982\u7acb\u5373\u5b57\u6bb5\u6216\u79fb\u4f4d\uff1b\n\u5173\u4e8e\u6307\u4ee4\u7684\u6bcf\u4e2a\u6784\u6210\u5b57\u6bb5\u7684\u504f\u79fb\u91cf\u4fe1\u606f(\u6307\u4ee4\u4e2d\u6bcf\u4e2a\u5b57\u6bb5\u7684\u4f4d\u7f6e)\uff1b\nCPUID\u7279\u5f81\u6807\u5fd7\uff0c\u5176\u6307\u793a\u5fc5\u987b\u67e5\u8be2\u7684\u53f6\u548c\u5b50\u53f6\uff0c\u4ee5\u53ca\u6307\u793a\u5bf9\u8be5\u7279\u5b9a\u6307\u4ee4\u7684\u652f\u6301\u7684\u5bc4\u5b58\u5668\u548c\u4f4d\uff1b\n\u64cd\u4f5c\u6570\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\u64cd\u4f5c\u6570\u7c7b\u578b\u3001\u5927\u5c0f\u3001\u8bbf\u95ee(\u8bfb\u3001\u6761\u4ef6\u8bfb\u3001\u5199\u3001\u6761\u4ef6\u5199)\u548c\u8be6\u7ec6\u4fe1\u606f\uff1b\n\u5168\u5185\u5b58\u64cd\u4f5c\u6570\u8be6\u7ec6\u4fe1\u606f\uff1a\u6bb5\u3001\u57fa\u6570\u3001\u7d22\u5f15\u3001\u5c0f\u6570\u4f4d\u6570\u3001\u538b\u7f29\u4f4d\u79fb\u3001\u5806\u6808\u3001\u5b57\u7b26\u4e32\u3001\u4f4d\u5e93\u3001VSIB\u7b49)\uff1b\n\u5173\u4e8e\u5982\u4f55\u4eceINSTRUX\u4e2d\u63d0\u53d6\u4e0d\u540c\u7c7b\u578b\u7684\u4fe1\u606f\u7684\u4f8b\u5b50\u53ef\u4ee5\u5728\u5b98\u65b9\u6587\u6863\u9875\u9762\u4e0a\u627e\u5230\u3002\n\u4f7f\u7528NdToText\u51fd\u6570\uff0c\u53ef\u4ee5\u5c06\u89e3\u7801\u7684INSTRUX\u8f6c\u6362\u4e3a\u53ef\u4ee5\u6253\u5370\u7684\u6587\u672c\u53cd\u6c47\u7f16\u3002NdToText\u51fd\u6570\u4ec5\u652f\u6301\u82f1\u7279\u5c14\u98ce\u683c\u7684\u8bed\u6cd5\uff0c\u56e0\u6b64\u4ee5\u4e0b\u6307\u4ee433C0\u5c06\u88ab\u89e3\u7801\u4e3aXOR eax\uff0ceax\uff0c\u800c4833C0\u5c06\u88ab\u89e3\u7801\u4e3aXOR rax\uff0crax\u3002NdToText\u51fd\u6570\u7684\u5178\u578b\u7528\u6cd5\u662f\uff1a\n//\u4e3a\u8be5\u6307\u4ee4\u521b\u5efa\u6587\u672c\u53cd\u6c47\u7f16\u3002\u5b57\u7b26\u6587\u672c[ND_MIN_BUF_SIZE]\uff1bNdToText(&amp\uff1bix\uff0c0\uff0csizeof(Text)\uff0ctext)\uff1bprintf(&#34\uff1b\u8bf4\u660e\uff1a%s\\n&#34\uff1b\uff0ctext)\uff1b\n\u5206\u6d41\u662fHVMI\u6280\u672f\u7684\u5173\u952e\u90e8\u5206\u3002\u5982\u524d\u6240\u8ff0\uff0c\u89e3\u7801\u548c\u5206\u6790\u6307\u4ee4\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3aHVMI\u5904\u7406\u7684\u7edd\u5927\u591a\u6570\u4e8b\u4ef6\u90fd\u8fdd\u53cd\u4e86EPT(\u5185\u5b58\u5f15\u7528\u6307\u4ee4)\u3002\n\u5f53EPT\u8fdd\u89c4\u53d1\u751f\u65f6\uff0cHVMI\u505a\u7684\u7b2c\u4e00\u4ef6\u4e8b\u5c31\u662f\u5bf9\u8fdd\u89c4\u6307\u4ee4\u8fdb\u884c\u89e3\u7801\u3002\u7531\u4e8e\u8bbf\u95ee\u5ba2\u6237\u5185\u5b58\u901a\u5e38\u5f88\u6162(\u56e0\u4e3a\u5b83\u6d89\u53ca\u5c06\u5ba2\u6237\u7ebf\u6027\u5730\u5740\u8f6c\u6362\u4e3a\u5ba2\u6237\u7269\u7406\u5730\u5740\uff0c\u5e76\u6620\u5c04\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u7269\u7406\u9875\u9762-\u9875\u8868\u548c\u5b9e\u9645\u9875\u9762)\uff0c\u56e0\u6b64\u4e00\u65e6\u6307\u4ee4\u88ab\u89e3\u7801\uff0c\u5b83\u5c31\u4f1a\u88ab\u5185\u90e8\u7f13\u5b58\u3002\u6765\u81ea\u540c\u4e00\u6307\u4ee4\u6307\u9488\u7684\u540e\u7eed\u8bbf\u95ee\u5c06\u4ea7\u751f\u5df2\u89e3\u7801\u7684\u9ad8\u901f\u7f13\u5b58\u6307\u4ee4\uff0c\u4ece\u800c\u52a0\u901f\u8fd9\u4e00\u8fc7\u7a0b(\u5f53\u7136\uff0c\u9ad8\u901f\u7f13\u5b58\u6307\u4ee4\u8fd8\u610f\u5473\u7740\u5fc5\u987b\u76d1\u89c6\u5305\u542b\u5b83\u4eec\u7684\u9875\u7684\u4fee\u6539\uff0c\u4ee5\u4fbf\u5728\u6307\u4ee4\u88ab\u4fee\u6539\u65f6\u4f7f\u9ad8\u901f\u7f13\u5b58\u65e0\u6548)\u3002\n\u4e00\u65e6\u6307\u4ee4\u88ab\u89e3\u7801\uff0cHVMI\u5c06\u5bf9\u5176\u8fdb\u884c\u5256\u6790\uff0c\u4ee5\u786e\u5b9a\u6240\u8bbf\u95ee\u7684\u6bcf\u4e2a\u5b58\u50a8\u5668\u4f4d\u7f6e\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u4e00\u6761\u6307\u4ee4\u53ef\u4ee5\u76f4\u63a5\u6216\u95f4\u63a5\u8bbf\u95ee\u591a\u4e2a\u5185\u5b58\u4f4d\u7f6e\uff0c\u5728\u5141\u8bb8\u6307\u4ee4\u7ee7\u7eed\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u5206\u6790\u6bcf\u6b21\u8bbf\u95ee\u3002\u56e0\u4e3abddisasm\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u64cd\u4f5c\u6570\u4fe1\u606f(\u5305\u62ec\u9690\u5f0f\u64cd\u4f5c\u6570)\uff0c\u6240\u4ee5HVMI\u57fa\u672c\u4e0a\u4f1a\u904d\u5386\u6240\u6709\u6307\u4ee4\u64cd\u4f5c\u6570\uff0c\u5e76\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a\u5185\u5b58\u3002\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u5b58\u64cd\u4f5c\u6570\uff0c\u5b83\u5c06\u786e\u4fdd\u5b83\u8bbf\u95ee\u4e0d\u53d7HVMI\u76d1\u89c6\u7684\u5185\u5b58\u533a\u57df\u3002\u8bbf\u95ee\u591a\u4e2a\u5730\u5740\u7684\u6307\u4ee4\u793a\u4f8b\u53ef\u80fd\u5305\u62ec\uff1a\n\u8c03\u7528[mem]-\u5b83\u8bfb\u53d6[mem]\u64cd\u4f5c\u6570\uff0c\u5e76\u5199\u5165\u5806\u6808\uff1b\u5982\u679c\u542f\u7528\u4e86CET\u5f71\u5b50\u5806\u6808\uff0c\u5b83\u8fd8\u53ef\u4ee5\u8bbf\u95ee\u5f71\u5b50\u5806\u6808\uff1b\n\u4f7f\u7528VSIB\u5bfb\u5740\u7684AVX\u6307\u4ee4-\u591a\u4e2a\u5730\u5740\u53ef\u7531VSIB\u64cd\u4f5c\u6570\u8bbf\u95ee\uff0c\u4f8b\u5982[rax+xmm0*8]\uff1b\n\u8fd8\u6709\u4e00\u4e9b\u4e8b\u4ef6(\u4e3b\u8981\u662f\u5f02\u6b65\u4e8b\u4ef6)\u53ef\u80fd\u4f1a\u5bfc\u81f4EPT\u51b2\u7a81\uff0c\u5373\u4f7f\u5f53\u524d\u6307\u4ee4\u4e0d\u6267\u884c\u4efb\u4f55\u7c7b\u578b\u7684\u5185\u5b58\u8bbf\u95ee\u4e5f\u662f\u5982\u6b64\uff1b\u6b64\u7c7b\u4e8b\u4ef6\u5305\u62ec\uff1a\n\u53d1\u9001\u4e2d\u65ad\u6216\u5f02\u5e38\uff0c\u8be5\u4e2d\u65ad\u6216\u5f02\u5e38\u5c06\u8bfb\u53d6\u4e2d\u65ad\u63cf\u8ff0\u7b26\u8868(IDT)\uff0c\u5e76\u5c06\u4e2d\u65ad\u5e27\u5199\u5165\u5806\u6808\uff1b\n\u4f5c\u4e3a\u4efb\u52a1\u5207\u6362\u6216\u4e2d\u65ad\u4f20\u9001\u7684\u4e00\u90e8\u5206\u7684\u4efb\u52a1\u72b6\u6001\u6bb5(TSS)\u5185\u7684\u8bbf\u95ee\uff1b\n\u9875\u8868\u5185\u7684\u8bbf\u95ee\uff0c\u4f5c\u4e3a\u9875\u9762\u904d\u5386\u7684\u4e00\u90e8\u5206(\u5c3d\u7ba1\u8fd9\u4e9b\u8bbf\u95ee\u662f\u4f7f\u7528VMCS EPT\u8fdd\u89c4\u9000\u51fa\u8d44\u683c\u5185\u7684\u4e13\u7528\u4f4d\u660e\u786e\u8868\u793a\u7684)\uff1b\n\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e8b\u4ef6\u4e0d\u5305\u62ec\u5728INSTRUX\u7ed3\u6784\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u5728\u6b63\u5e38\u6307\u4ee4\u6267\u884c\u671f\u95f4\u4ee5\u5f02\u6b65\u65b9\u5f0f\u53d1\u751f\u3002\n\u4e00\u65e6\u9519\u8bef\u6307\u4ee4\u88ab\u89e3\u7801\uff0cIntrocore\u5185\u90e8\u7684\u591a\u4e2a\u6a21\u5757\u5c31\u4f1a\u5bf9\u5176\u8fdb\u884c\u5206\u6790\uff0c\u4ee5\u786e\u5b9a\u5b83\u662f\u5426\u4e3a\u5408\u6cd5\u4fee\u6539(\u8fd9\u4e0e\u63d0\u53d6\u7684\u5176\u4ed6\u7c7b\u578b\u7684\u4fe1\u606f\u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982\u6307\u4ee4\u5c5e\u4e8e\u54ea\u4e2a\u6a21\u5757)\u3002\u5178\u578b\u7684\u9a8c\u8bc1\u662f\u5c06\u65e7\u5185\u5b58\u503c\u4e0e\u5373\u5c06\u5b58\u50a8\u7684\u65b0\u503c\u8fdb\u884c\u6bd4\u8f83-\u5982\u679c\u5b83\u4eec\u76f8\u540c\uff0c\u5219\u5141\u8bb8\u6307\u4ee4\u6267\u884c\u901a\u5e38\u662f\u5b89\u5168\u7684\u3002\u63d0\u53d6\u65e7\u503c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u6307\u4ee4\u8fdb\u884c\u7b80\u5355\u7684\u6a21\u62df\u6765\u5b8c\u6210-\u56e0\u4e3abddisasm\u5df2\u7ecf\u63d0\u4f9b\u4e86\u6240\u6709\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f8\u5f53\u5bb9\u6613\u5730\u8ba1\u7b97\u51fa\u65b0\u503c(\u800c\u4e14\u7531\u4e8e\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5168\u9762\u7684\u6a21\u62df\uff0c\u6240\u4ee5\u5728\u8fd9\u4e00\u70b9\u4e0a\u4e0d\u9700\u8981\u8fdb\u884c\u68c0\u67e5)\u3002\n\u5bf9\u8bbf\u95ee\u5185\u5b58\u7684\u6307\u4ee4\u6267\u884c\u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u4efb\u52a1\u662f\u8ba1\u7b97\u663e\u5f0f\u5185\u5b58\u64cd\u4f5c\u6570\u8bbf\u95ee\u7684\u5ba2\u6237\u7ebf\u6027\u5730\u5740\u3002\u5bf9\u4e8e\u5178\u578b\u7684modrm\u7f16\u7801\u5185\u5b58\u64cd\u4f5c\u6570\uff0c\u8ba1\u7b97\u8be5\u503c\u6240\u9700\u7684\u6b65\u9aa4\u5305\u62ec\uff1a\n\u67e5\u8be2\u6bb5\u5bc4\u5b58\u5668\uff0c\u5e76\u83b7\u53d6\u5bfb\u5740\u4e2d\u4f7f\u7528\u7684\u6bb5\u7684\u57fa\u5740\uff1b\u6240\u5f97\u5230\u7684\u7ebf\u6027\u5730\u5740\u53ef\u4ee5\u88ab\u521d\u59cb\u5316\u4e3a\u8be5\u6bb5\u57fa\u503c\uff0c\u6216\u8005\u4e0d\u4f7f\u7528\u6bb5\u76840\uff1b\n\u5982\u679c\u5185\u5b58\u64cd\u4f5c\u6570\u662f\u76f4\u63a5\u7684(\u4f8b\u5982\u5728A01111111111111111\u4e2d\uff0c\u5176\u89e3\u7801\u4e3aMOVAL\uff0c\u5b57\u8282PTR[0x11111111111111])\uff0c\u5219\u53ef\u4ee5\u5c06\u5730\u5740\u6dfb\u52a0\u5230\u7ebf\u6027\u5730\u5740\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u8fdb\u4e00\u6b65\u5904\u7406\uff1b\n\u5982\u679c\u5185\u5b58\u64cd\u4f5c\u6570\u4f7f\u7528\u57fa\u5740\u5bc4\u5b58\u5668\uff0c\u5219\u5c06\u5176\u503c\u4e0e\u7ebf\u6027\u5730\u5740\u76f8\u52a0\uff1b\n\u5982\u679c\u5185\u5b58\u64cd\u4f5c\u6570\u4f7f\u7528\u7d22\u5f15\u5bc4\u5b58\u5668\uff0c\u5219\u5bf9\u5176\u8fdb\u884c\u7f29\u653e\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ebf\u6027\u5730\u5740\uff1b\n\u5982\u679c\u5185\u5b58\u64cd\u4f5c\u662fRIP\u76f8\u5173\u7684\uff0c\u5219\u6dfb\u52a0\u5f53\u524d\u6307\u4ee4\u7684\u957f\u5ea6\uff0c\u540e\u8ddf\u5f53\u524dRIP\uff1b\n\u5982\u679c\u5185\u5b58\u64cd\u4f5c\u6570\u4f7f\u7528\u4f4d\u57fa\u5bfb\u5740(BT\u3001BTS\u3001BTR\u3001BTC\u6307\u4ee4)\uff0c\u5219\u8ba1\u7b97\u6e90\u64cd\u4f5c\u6570\u7684\u4f4d\u504f\u79fb\u91cf\uff0c\u5e76\u5c06\u5176\u4e0e\u7ed3\u679c\u7ebf\u6027\u5730\u5740\u76f8\u52a0\uff1b\n\u5982\u679c\u64cd\u4f5c\u662f\u5806\u6808\u63a8\u9001\uff0c\u5219\u4ece\u5f97\u5230\u7684\u7ebf\u6027\u5730\u5740\u51cf\u53bb\u5806\u6808\u64cd\u4f5c\u7684\u5927\u5c0f\uff1b\n\u4e0a\u9762\u5217\u51fa\u7684\u6b65\u9aa4\u5c06\u4ea7\u751f\u6307\u4ee4\u64cd\u4f5c\u6570\u4f7f\u7528\u7684\u7ebf\u6027\u5730\u5740\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u8fdb\u4e00\u6b65\u5904\u7406\u4ee5\u63d0\u53d6\u66f4\u591a\u4fe1\u606f\u3002\nBddisasm\u662f\u4ee5\u53ef\u6269\u5c55\u7684\u65b9\u5f0f\u521b\u5efa\u7684\uff0c\u8fd9\u4f7f\u5f97\u6dfb\u52a0\u65b0\u6307\u4ee4\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\uff0c\u53ea\u8981\u5b83\u4eec\u4e0d\u4f7f\u7528\u65b0\u7684\u7f16\u7801\u65b9\u6848\u6216\u65b0\u7684\u5bc4\u5b58\u5668\u3002\u8bf4\u660e\u6570\u636e\u5e93\u5305\u542b\u5728bddisasm repo\u7684isagenerator/Instructions\u9879\u76ee\u5185\u7684\u51e0\u4e2a.dat\u6587\u4ef6\u4e2d\u3002\u867d\u7136\u81ea\u8ff0\u6587\u4ef6\u4e2d\u5df2\u7ecf\u63d0\u4f9b\u4e86\u5173\u4e8e\u8be5\u9879\u76ee\u7684\u8db3\u591f\u4fe1\u606f\uff0c\u4f46\u6211\u4eec\u5c06\u53ea\u6f14\u793a\u5982\u4f55\u5411bddisasm\u6dfb\u52a0\u65b0\u7684\u8bf4\u660e\u3002\n\u8ba9\u6211\u4eec\u9996\u5148\u9009\u62e9\u4e00\u4e2a\u5f53\u524d\u6ca1\u6709\u88ab\u4efb\u4f55\u6307\u4ee40F04\u4f7f\u7528\u7684\u7f16\u7801(\u5c3d\u7ba1\u5e94\u8be5\u6ce8\u610f\uff0c\u5b83\u662f\u7531LoadAll\u5728286\u4e0a\u4f7f\u7528\u7684)\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u89e3\u7801\u6b64\u6307\u4ee4\uff0c\u6211\u4eec\u5c06\u770b\u5230bddisasm\u5931\u8d25\uff1a\n\u67e5\u770bdisasmstatus.h\u5185\u90e8\uff0c\u6211\u4eec\u770b\u5230\u9519\u8bef\u4ee3\u78010x80000002\u8868\u793aND_STATUS_INVALID_ENCODING-\u56e0\u6b64\u6ca1\u6709\u6709\u6548\u7684\u7f16\u7801\uff0c\u8fd9\u5f88\u597d\uff0c\u56e0\u4e3a\u6211\u4eec\u60f3\u521b\u5efa\u81ea\u5df1\u7684\u7f16\u7801\u3002\n\u73b0\u5728\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u8981\u521b\u5efa\u7684\u6307\u4ee4\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u6a21\u7f16\u7801\u6307\u4ee4\uff0c\u6709\u4e24\u4e2a\u64cd\u4f5c\u6570-\u7b2c\u4e00\u4e2a\u662f\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u7b2c\u4e8c\u4e2a\u662f\u901a\u7528\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u3002\u8ba9\u6211\u4eec\u5c06\u6b64\u6307\u4ee4\u79f0\u4e3aBDDISASM\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u51e0\u79cd\u53ef\u80fd\u7684\u5f62\u5f0f\uff1a\n\u5982\u524d\u6240\u8ff0\uff0c\u8be5\u6307\u4ee4\u7684\u64cd\u4f5c\u7801\u5c06\u662f(\u5f53\u524d\u672a\u5206\u914d\u7684)0F04\u3002\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5c06\u662f16\u4f4d\u300132\u4f4d\u621664\u4f4d\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u64cd\u4f5c\u6570\u5927\u5c0f\u3002\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u5c06\u662f16\u300132\u621664\u4f4d\u901a\u7528\u5bc4\u5b58\u5668\u6216\u5185\u5b58\u4f4d\u7f6e\uff0c\u5177\u4f53\u53d6\u51b3\u4e8emodrm.mod\u548c\u64cd\u4f5c\u6570\u5927\u5c0f\u3002\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u8bfb\u5199\u7684\uff0c\u800c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u662f\u53ea\u8bfb\u7684\u3002\u6ca1\u6709\u9690\u5f0f\u64cd\u4f5c\u6570\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728TABLE_0F.dat\u4e2d\u63cf\u8ff0\u57fa\u672c\u6307\u4ee4\uff1a\n\u7b2c\u4e8c\u4e2a\u5143\u7d20GV\u8868\u793a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u4ee5modrm.reg(G)\u7f16\u7801\u7684\u901a\u7528\u5bc4\u5b58\u5668\uff0c\u5176\u5927\u5c0f\u53d6\u51b3\u4e8e\u64cd\u4f5c\u6570\u5927\u5c0f(V)\uff0c\u5927\u5c0f\u4e3a16\u300132\u621664\u4f4d\uff1b\n\u7b2c\u4e09\u4e2a\u5143\u7d20ev\u8868\u793a\u7b2c\u4e8c\u64cd\u4f5c\u6570\u662f\u4ee5modrm.rm(E)\u7f16\u7801\u7684\u901a\u7528\u5bc4\u5b58\u5668\u6216\u5b58\u50a8\u5668\uff0c\u5176\u5927\u5c0f\u53d6\u51b3\u4e8e\u64cd\u4f5c\u6570\u5927\u5c0f(V)\uff0c\u5927\u5c0f\u4e3a16\u300132\u621664\u4f4d\uff1b\n\u4e0b\u4e00\u4e2a\u5143\u7d20\u63cf\u8ff0\u6307\u4ee4\u8bbf\u95ee\u7684\u9690\u5f0f\u64cd\u4f5c\u6570\uff1b\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u6307\u5b9a\u4e3anil\uff1b\n\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u6700\u91cd\u8981\u7684\uff0c\u5b83\u63cf\u8ff0\u4e86\u7f16\u7801\uff1b\u5b83\u5217\u4e3e\u4e86\u6240\u6709\u64cd\u4f5c\u7801\u5b57\u8282-0F\u548c04\uff0c\u540e\u8ddf/r\uff0c\u8868\u660e\u6307\u4ee4\u4f7f\u7528modrm\u7f16\u7801\uff1b\n\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u6bcf\u4e2a\u6307\u4ee4\u64cd\u4f5c\u6570\u7684\u8bbf\u95ee\u6620\u5c04\uff0c\u5e76\u4f7f\u7528\u5173\u952e\u5b57w\uff1a\u6307\u5b9a\u3002\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u662f\u8bfb\u5199(RW)\uff0c\u800c\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u6570\u662f\u8bfb(R)\u3002\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u5728VisualStudio\u4e2d\u6784\u5efaisagenerator\u9879\u76ee\uff0c\u6216\u8005\u8fd0\u884cmake\uff0c\u7136\u540e\u91cd\u5efabddisasm\u5e93\u548cdisasmtool\u6765\u91cd\u5efa\u89e3\u7801\u6811\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u518d\u6b21\u5c1d\u8bd5\u5bf9\u6307\u4ee4\u8fdb\u884c\u89e3\u7801\uff1a\n\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u9519\u8bef\uff1a0x80000001\uff0c\u8868\u793aND_STATUS_BUFFER_TOO_SMALL-\u8fd9\u8868\u660e\u5b58\u5728\u7528\u4e8e\u6b64\u7f16\u7801\u7684\u6709\u6548\u6307\u4ee4\uff0c\u4f46\u6211\u4eec\u6ca1\u6709\u63d0\u4f9b\u8db3\u591f\u7684\u5b57\u8282\u6765\u89e3\u7801\u5b83\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u6307\u5b9a\u4e86\u64cd\u4f5c\u7801\uff0c\u800c\u6ca1\u6709modrm\u5b57\u8282\u3002\u8ba9\u6211\u4eec\u518d\u8bd5\u4e00\u6b21\uff0c\u8fd9\u6b21\u4e5f\u4f7f\u7528modrm\u5b57\u8282\uff1a\n\u5982\u60a8\u6240\u89c1\uff0c\u6307\u4ee4\u5df2\u88ab\u6210\u529f\u89e3\u7801\uff01\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u7801\u4f1a\u4ea7\u751f\u9884\u671f\u7684\u6307\u4ee4\uff1a\nC\uff1a\\&gt\uff1bdisasm-b64-h 0F0400660F0400480F0400670F0400F30F04000000000000000000 0f0400 BDDISASM eax\uff0c\u53cc\u5b57PTR[rax]0000000000000003 660f0400 BDDISASM ax\uff0cword PTr[rax]0000000000000007 480f0400 BDDISASM rax\uff0cqword PTR[rax]000000000000000B 670f0400 BDDISASM eax\uff0cdword PTR[eax]000000000000000F f30f0400 BAX\u3002\n\u5982\u679c\u6211\u4eec\u613f\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u6307\u5bfc\u4e2d\u6dfb\u52a0\u66f4\u591a\u7684\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5047\u8bbe\u6307\u4ee4\u4fee\u6539\u4e86\u6807\u5fd7-\u5b83\u603b\u662f\u8bbe\u7f6e\u8fdb\u4f4d\u6807\u5fd7(CF)\u3002\u4e3a\u4e86\u6307\u5b9a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u6307\u793a\u6307\u4ee4\u4f7f\u7528\u9690\u5f0f\u64cd\u4f5c\u6570fv\uff0c\u5b83\u4ee3\u8868\u6807\u5fd7\u5bc4\u5b58\u5668\uff0c\u7136\u540e\u6211\u4eec\u5fc5\u987b\u4f7f\u7528f\uff1a\u5173\u952e\u5b57\u544a\u8bc9\u5b83\u5b83\u4fee\u6539\u4e86\u54ea\u4e9b\u6807\u5fd7\uff1a\nC\uff1a\\&gt\uff1bDisasm-b64-h 0F0400-exi0000000000000000 0f0400 BDDISASM eax\uff0c\u53cc\u5b57PTR[rax]DSIZE\uff1a32\uff0cASIZE\uff1a64\uff0cVlen\uff1a-ISA Set\uff1aUNKNOWN\uff0cINS CAT\uff1aUNKNOWN\uff0cCET TRACKED\uff1a\u65e0\u6807\u5fd7\u8bbf\u95eeCF\uff1a1\uff0c\u6709\u6548\u6a21\u5f0fR0\uff1aYES\uff0cR1\uff1aYES\uff0cR2\uff1aYES\uff0cR3\uff1aYES REAL\uff1aYES\uff0cV8086\uff1aYES\uff0cPROT\uff1aYES\uff0cCOMPAT\uff1aYES\uff0cVMX OFF\uff1aYES\u6709\u6548\u524d\u7f00rep\uff1ano\uff0cREPcc\uff1ano\uff0clock\uff1ano\uff0cHLE\uff1ano\uff0c\u4ec5XACQUIRE\uff1ano\uff0c\u4ec5XRELEASE\uff1ano BND\uff1ano\uff0cBHINT\uff1ano\uff0cDNT\uff1ano Operand\uff1a0\uff0cACC\uff1aRW\uff0cType\uff1aRegister\uff0cSize\uff1a4\uff0cRawSize\uff1a4\uff0cEnding\uff1aR\uff0cRegType\uff1aGeneral Purpose\uff0cRegSize\uff1a4\uff0cRegID\uff1a0\uff0cRegCount\uff1a1 Operand\uff1a1\u3002\u539f\u59cb\u5927\u5c0f\uff1a4\uff0c\u7f16\u7801\uff1as\uff0cRegType\uff1a\u6807\u5fd7\uff0cRegSize\uff1a4\uff0cRegID\uff1a0\uff0cRegCount\uff1a1\u3002\n\u60a8\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6807\u5fd7\u8bbf\u95ee\u90e8\u5206\u4e2d\u5217\u51fa\u4e86CF\uff1a1\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u59cb\u7ec8\u8bbe\u7f6e\u4e3a1\u3002\u6807\u5fd7\u7684\u5176\u4ed6\u53ef\u80fd\u503c\u5305\u62ecm(\u8868\u793a\u6839\u636e\u7ed3\u679c\u4fee\u6539\u6807\u5fd7)\u30010(\u8868\u793a\u6807\u5fd7\u5df2\u6e05\u9664)\u3001t(\u8868\u793a\u6807\u5fd7\u5df2\u6d4b\u8bd5)\u548cu(\u8868\u793a\u6807\u5fd7\u672a\u5b9a\u4e49)\u3002\u6807\u5fd7\u8bbf\u95ee\u90e8\u5206\u4e2d\u7f3a\u5931\u7684\u6807\u5fd7\u6839\u672c\u4e0d\u4f1a\u88ab\u89e6\u53ca\u3002\n\u6700\u540e\uff0c\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u5728\u5904\u7406\u6307\u4ee4\u7f16\u7801\u65f6\u4e00\u4e9b\u4e0d\u592a\u4e3a\u4eba\u6240\u77e5\u7684\u60c5\u51b5\u3002\u5f53\u7136\uff0c\u6240\u6709\u8fd9\u4e9b\u4fe1\u606f\u90fd\u6709\u6587\u6863\u8bb0\u5f55\uff0c\u4f46\u5728SDM\u4e2d\u67e5\u627e\u8fd9\u4e9b\u4fe1\u606f\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\uff0c\u56e0\u6b64\u4ee5\u4e0b\u662f\u6700\u76f8\u5173\u4fe1\u606f\u7684\u5feb\u901f\u5217\u8868\uff1a\n\u53ef\u4ee5\u5bf9\u770b\u4f3c\u6709\u6548\u7684\u6307\u4ee4\u8fdb\u884c\u7f16\u7801\uff0c\u8fd9\u4e9b\u6307\u4ee4\u7684\u957f\u5ea6\u8d85\u8fc715\u5b57\u8282\u7684\u6700\u5927\u9650\u5236\uff0c\u4f46CPU\u65e0\u8bba\u5982\u4f55\u90fd\u4f1a\u5728\u8fd9\u4e9b\u6307\u4ee4\u4e0a\u751f\u6210#GP\uff1b\nREX\u524d\u7f00\u5fc5\u987b\u59cb\u7ec8\u662f\u64cd\u4f5c\u7801\u5b57\u8282\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u5c06\u88ab\u5ffd\u7565\uff1a48F333C0\u5c06\u89e3\u7801\u4e3aXOR eax\uff0ceax\uff0c\u800c\u4e0d\u662fXOR rax\uff0crax\uff0c\u56e0\u4e3aF3\u524d\u7f00\u5728REX 48\u524d\u7f00\u4e4b\u540e\uff1b\n\u5982\u679c\u6307\u4ee4\u4e2d\u540c\u65f6\u5b58\u5728F2\u548cF3\u524d\u7f00\uff0c\u5219CPU\u5c06\u8003\u8651\u6700\u540e\u51fa\u73b0\u7684\u524d\u7f00\uff1aF2F2F2F3A6\u5c06\u89e3\u7801\u4e3aREPZ cmpsb\uff0c\u56e0\u4e3aF3\u662f\u6700\u540e\u51fa\u73b0\u7684\u524d\u7f00\uff0c\u5e76\u4e14\u6240\u6709\u7684F2\u524d\u7f00\u90fd\u5c06\u88ab\u5ffd\u7565\uff1b\n\u540c\u6837\uff0c\u8003\u8651\u6700\u540e\u51fa\u73b0\u7684\u6bb5\u524d\u7f00\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u572864\u4f4d\u6a21\u5f0f\u4e0b\uff0c\u53ea\u63a5\u53d7fs\u548cgs\u8986\u76d6\uff1a65642e2e3300\u5c06\u572832\u4f4d\u6a21\u5f0f\u4e0b\u89e3\u7801\u4e3aXOR eax\uff0cdword PTR cs\uff1a[EAX]\uff0c\u4f46\u572864\u4f4d\u6a21\u5f0f\u4e0b\uff0c\u5b83\u5c06\u89e3\u7801\u4e3axor eax\uff0cdword PTR fs\uff1a[rax]\uff1b\n\u88ab\u5ffd\u7565\u548c\u5197\u4f59\u7684\u524d\u7f00\u662f\u6307\u4ee4\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u88ab\u8ba1\u5165\u6307\u4ee4\u957f\u5ea6\uff1aF2F2F2F2F2F2F2F2F2F2F2F2F2F290\u4f5c\u4e3aNOP\u88ab\u89e3\u7801\u548c\u6267\u884c\uff0c\u4f46\u662f\u518d\u589e\u52a0\u4e00\u4e2aF2\u524d\u7f00\u5c06\u4f7f\u6307\u4ee416\u5b57\u8282\u957f\uff0c\u4ece\u800c\u4ea7\u751f#GP\uff0c\u5e76\u5bfc\u81f4\u89e3\u7801\u9519\u8bef\uff1b\nRSP\u4e0d\u80fd\u7528\u4f5cSIB\u5bfb\u5740\u7684\u7d22\u5f15\uff0c\u5b83\u5c06\u88ab\u5ffd\u7565\uff1a3304E0\u5c06\u89e3\u7801\u4e3aXOR eax\uff0cdword PTR[rax]\u800c\u4e0d\u662fxor eax\uff0cdword ptr[rax+rsp*8]\uff1b\n\u572864\u4f4d\u6a21\u5f0f\u4e0b\u4f7f\u7528modrm.mod==0(\u5185\u5b58)\u548cmodrm.rm==5(RBP)\u65f6\uff0c\u5c06\u4f7f\u7528RIP\u76f8\u5bf9\u5bfb\u5740\u800c\u4e0d\u662f\u76f4\u63a5\u5bfb\u5740\uff1b\u4f46\u662f\uff0c\u901a\u8fc7\u4f7f\u7528\u5e26\u6709modrm.mod==0(\u5185\u5b58)\u3001modrm.rm==4(RSP\u3001SIB)\u3001SIB.base==5(RBP)\u548cSIB.index==4(RSP)\u7684SIB\u5bfb\u5740\uff0c\u5373\u4f7f\u4f7f\u7528SIB\u5bfb\u5740\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5bfb\u5740\u5230\u7edd\u5bf932\u4f4d\u5730\u5740\u3002\n\u572864\u4f4d\u6a21\u5f0f\u4e0b\uff0c\u5806\u6808\u64cd\u4f5c\u9ed8\u8ba4\u4f7f\u752864\u4f4d\u64cd\u4f5c\u6570(\u5373\u4f7f\u6ca1\u6709REX.W\u524d\u7f00)\uff1b\u7136\u800c\uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u752832\u4f4d\u64cd\u4f5c\u6570\u7f16\u7801PUSH/POP\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5c3d\u7ba1\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u752816\u4f4d\u64cd\u4f5c\u6570\u7f16\u7801PUSH/POP\uff1a6650\u5373\u4f7f\u572864\u4f4d\u6a21\u5f0f\u4e0b\u4e5f\u5c06\u89e3\u7801\u4e3aPUSH AX\uff0c\u65e0\u6cd5\u7f16\u7801PUSH EAX\uff1b\n\u572864\u4f4d\u6a21\u5f0f\u4e0b\uff0c\u5728Intel CPU\u4e0a\uff0c\u95f4\u63a5\u5206\u652f\u603b\u662f\u4f7f\u752864\u4f4d\u64cd\u4f5c\u6570\uff1aFF20\u300148FF20\u300166FF20\u90fd\u5c06\u572864\u4f4d\u6a21\u5f0f\u4e0b\u89e3\u7801\u4e3aJMP qword PTR[rax]\uff1b\n\u79fb\u5165/\u79fb\u51fa\u63a7\u5236/\u8c03\u8bd5\u5bc4\u5b58\u5668\u5c06\u59cb\u7ec8\u4f7f\u7528modrm.mod==3\uff0c\u5373\u4f7f\u5b9e\u9645modrm.mod\u4e3a0\u30011\u62162\uff1a0F2000\u5c06\u89e3\u7801\u4e3amov rax\uff0cCR0\uff0c\u800c\u4e0d\u662fmov[rax]\uff0ccr0\uff1b\n\u79fb\u5165/\u79fb\u51famodrm.mod==1\u6216modrm.mod==2\u7684\u63a7\u5236/\u8c03\u8bd5\u5bc4\u5b58\u5668(\u5e26\u4f4d\u79fb)\uff0c\u5c06\u5ffd\u7565\u4f4d\u79fb\uff1a0F2040\u5c06\u89e3\u7801\u4e3amov rax\uff0cCR0\uff0c\u5373\u4f7f\u6b63\u5e38\u60c5\u51b5\u4e0bmodrm.mod==1\u9700\u89811\u4e2a\u5b57\u8282\u7684\u4f4d\u79fb\uff1b\n\u5728AMD\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e26mov cr\u6307\u4ee4\u7684\u9501\u5b9a\u524d\u7f00F0\u6765\u8bbf\u95eecr8\u5bc4\u5b58\u5668\uff1aF00F22C0\u89e3\u7801\u4e3amov cr8\uff0ceax\uff1b\n\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u4e00\u4e2a\u5168\u9762\u7684\u3001\u7f16\u5199\u826f\u597d\u7684\u6307\u4ee4\u89e3\u7801\u5668\u5982\u4f55\u5728\u5904\u7406\u6307\u4ee4\u65f6\u6781\u5927\u5730\u6539\u5584\u5f00\u53d1\u4eba\u5458\u7684\u751f\u6d3b\u3002\u5f53\u7136\uff0cbddisasm\u662fHVMI\u7684\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u90e8\u5206\uff0c\u56e0\u4e3a\u5f88\u591a\u81ea\u7701\u903b\u8f91\u90fd\u56f4\u7ed5\u7740\u5206\u6790\u6307\u4ee4\uff0c\u5e76\u4e14\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u7b80\u5355\u3001\u5feb\u901f\u548c\u51c6\u786e\u7684\u89e3\u7801\u5668\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4ece\u800c\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u4ee3\u7801\u8d28\u91cf\u3002\n\u6211\u4eec\u5c06\u5728\u672a\u6765\u7684\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\u770b\u5230bddisasm\u5982\u4f55\u5e2e\u52a9\u521b\u5efa\u7b80\u5355\u7684\u6307\u4ee4\u6a21\u62df\u5668\uff0c\u5c4a\u65f6\u6211\u4eec\u5c06\u6df1\u5165\u7814\u7a76\u53e6\u4e00\u4e2a\u91cd\u8981\u7684\u9879\u76ee-BitDefender Shellcode Emulator-bdshemu\u3002", "note_en": "Hypervisor Memory Introspection (HVMI) relies on analyzing memory accesses in order to determine whether they are legitimate or not. For example, by analyzing the old memory value and the newly stored value, HVMI can decide whether to allow the modification or not. This, however, introduces the complication of needing to do an in-depth analysis of each instruction that modifies protected memory. Unlike a RISC architecture, x86 has a large number of instructions that may access memory in a complicated, read-modify-write (RMW) manner, and using complicated addressing schemes.In order to simplify instruction decoding and analysis, a dedicated x86 instruction decoder has been created, capable of providing full instruction information, and thus alleviating the HVMI module from needing to know x86 instructions format. This blog post will detail some bddisasm internals, how to work with it, while highlighting why it is a critical part of HVMI. In addition, we will go through some particularities of x86 instruction encoding. The main bddisasm project is located  here, and the documentation can be accessed  here.\n  bddisasm is a standalone library, written in C, with some Python used for internal decoder-tables generation. The library is built to be fast, while providing as much information about the decoded instructions as possible - this is important, because other projects using bddisasm can rely on it to provide complete and accurate information about instructions. When considering other decoding libraries, there are only some which are similar in features:\n Intel Xed, which is written and maintained by Intel, thus somehow making it the standard x86 decoder; while not the fastest, it provides rich information about the decoded instructions;\n    ZyDis, which is comparable to Xed as far as features go, and lightweight (however, when bddisasm was created internally, ZyDis did not exist yet);\n Other decoders written in other languages, such as Rust or C#, or disassembler (which only provide a textual output of the instruction, without providing actual decoded instruction information) were not considered. Given that Xed and Capstone seemed rather difficult to work with at that time, we decided to create a lightweight decoder of our own, with the following objectives in mind:\n Lightweight - written entirely in C, with no external dependencies, no memory allocated, and thread-safe by design;\n  Fast - while we needed a decoder capable of providing as much information as possible about instructions, we still considered speed an important factor;\n  Resilient - the decoder should be able to handle all kinds of malformed instructions, as well as valid instructions containing redundant prefixes, or encodings which are not typical;\n  Complete - the decoder must support all existing x86 instructions, including AVX; moreover, extending the support to new instructions should be as simple as possible;\n  Easy to work with - single-header file, single-API library, which provides all possible information in the output decoded instruction, without the need to call additional functions in order to extract information from the decoded instruction;\n We will not get into a comparison between bddisasm and other decoding libraries, and we will keep the focus of this blog post on how to work with bddisasm and how useful it is in HVMI.\n  Working with the decoding library is easy: include the  bddisasm.h header file, link with the  bddisasm.lib (Windows) or  libbddisasm.a (Linux), and call the decoding API! bddisasm uses a single-API decoding scheme, where the  NdDecode APIs provide an output  INSTRUX structure containing all the possible information about the instruction. The only thing not included in the  INSTRUX structure is the textual disassembly of the instruction, which has to be generated separately using the  NdToText API. A typical usage scenario might be the following:\n #include &#34;bddisasm/bddisasm.h&#34; int  main () {  INSTRUX  ix ;  unsigned  char  ins [ 2 ]  =  {  0x33 ,  0xC0  };  NDSTATUS  status ;  status  =  NdDecodeEx ( &amp; ix ,  ins ,  sizeof ( ins ),  ND_CODE_64 ,  ND_DATA_64 );  if  ( ! ND_SUCCESS ( status ))  {  printf ( &#34;Decoding failed with error 0x%08x! \\n &#34; ,  status );  return  - 1 ;  }  printf ( &#34;Decoded instruction with length %d! \\n &#34; ,  ix . Length ); }\n  Note that the output  INSTRUX ix structure will contain  all the information about the decoded instruction. A comprehensive list about what kind of information you can find:\n Decoded prefix information, such as whether the instruction uses lock, is repeated, is xacquire/xrelease enabled or CET tracked;\n  Length information, including about the instruction itself and different fields of the instruction, such as immediate fields or displacement;\n  Offset information about each constituent field of the instruction (position of each field inside the instruction);\n            CPUID feature flag, which indicates the leaf and subleaf that must be queried, together with the register and bit which indicates support for that particular instruction;\n          Operand information, including: operand type, size, access (read, conditional read, write, conditional write) and details;\n  Full memory operand details: segment, base, index, scale, compressed displacement, stack, string, bitbase, VSIB, etc.);\n Examples on how different kind if info can be extracted from  INSTRUX can be found on the  official documentation page.\n  Using the  NdToText function, one can convert a decoded  INSTRUX to a textual disassembly that can be printed. The  NdToText function only supports Intel style syntax, so the following instruction  33C0 would be decoded as  XOR eax, eax, and  4833C0 would be decoded as  XOR rax, rax. Typical usage of the  NdToText function is:\n // Create the text disassembly for this instruction.  char  text [ ND_MIN_BUF_SIZE ];  NdToText ( &amp; ix ,  0 ,  sizeof ( text ),  text );  printf ( &#34;Instruction: %s \\n &#34; ,  text );\n  bddisasm is a critical part of the HVMI technology. As mentioned, decoding and analyzing instructions is important, since the vast majority of events HVMI is dealing with are EPT violations (memory-referencing instructions).\n One of the first things HVMI does when an EPT violation takes place is to decode the offending instruction. Since accessing guest memory is usually slow (as it involves translating the guest linear address to a guest physical address, and mapping each physical page in the process - both page-tables and the actual page), once an instruction is decoded, it gets cached internally. Subsequent accesses from the same instruction pointer would yield an already decoded, cached instruction, thus speeding up this process (of course, caching instructions also implies that the pages containing them have to be monitored for modifications, in order to invalidate the cache if an instruction is modified).\n Once the instruction has been decoded, HVMI will dissect it in order to determine each memory location accessed. This is important, because one instruction may directly, or indirectly, access multiple memory locations, and we have to analyze each access before allowing the instruction to continue. Since bddisasm provides full operand information (including implicit operands), HVMI will basically iterate through all the instruction operands, and check if they\u2019re memory. For each memory operand, it would then make sure that it accesses a region of memory that is not monitored by HVMI. Examples of instructions that access multiple addresses might include:\n CALL [mem] - it reads the  [mem] operand, and it writes the stack; it may also access the shadow stack, if CET Shadow Stack is enabled;\n    AVX instruction using VSIB addressing - multiple addresses may be accessed by a VSIB operand such as  [rax+xmm0*8];\n There are also some events (mostly asynchronous) which may cause EPT violations, even if the current instruction does not do any kind of memory access; such events include:\n Delivery of interrupts or exceptions, which will read the Interrupt Descriptor Table (IDT), and will write the interrupt frame on the stack;\n    Access inside the Task State Segment (TSS) as part of a task switch or interrupt delivery;\n  Accesses inside page-tables, as part of page-walks (although these are distinctively indicated using a dedicated bit inside the VMCS EPT violation exit qualification);\n These types of events are not included in the  INSTRUX structure, as they may occur in an asynchronous manner, during normal instruction execution.\n Once the faulting instruction has been decoded, it gets analyzed by multiple modules inside Introcore, in order to determine whether it is a legitimate modification (this is used together with other kinds of information extracted, such as what module the instruction belongs to). A typical validation is comparing the old memory value with the new value that is about to be stored - if they are the same, it is generally safe to allow the instruction to execute. Extracting the old value can be done by doing a simple emulation of the instruction - since bddisasm already provides all the necessary information, the new value can be computed fairly easy (and since this is not a full-blown emulation, there\u2019s no need to do checks at this point).\n Another common task done to instructions which access memory is to compute the guest linear address accessed by an explicit memory operand. For a typical modrm encoded memory operand, steps needed in order to compute this value include:\n Querying the segment registers, and fetching the base of the segment used in the addressing; the resulting linear address can be initialized to this segment-base value, or 0, of no segment is used;\n  If the memory operand is direct (such as in  A01111111111111111, which decodes to  MOV al, byte ptr [0x1111111111111111]), the address can be added to the linear address, and no further processing is needed;\n  If the memory operand uses a base register, add its value to the linear address;\n  If the memory operand uses an index register, scale it and add it to the linear address;\n    If the memory oprand is RIP-relative, add the length of the current instruction, followed by the current RIP;\n  If the memory operand uses bitbase addressing ( BT,  BTS,  BTR,  BTC instructions), compute the bit offset from the source operand, and add it to the resulting linear address;\n  If the operation is a stack push, subtract the size of the stack operation from the resulting linear address;\n The steps listed above will yield the linear address used by the instruction operand, which can be further processed to extract more information.\n  bddisasm has been created in an extensible way, making the addition of new instructions trivial, as long as they don\u2019t use a new encoding scheme, or new registers. The instructions database is contained in several  .dat files located inside the  isagenerator/instructions project of the bddisasm repo. While sufficient information about this project is already provided in the  readme, we will only show a quick demonstration about adding new instructions to bddisasm.\n Let\u2019s first pick up an encoding that is not currently used by any instruction -  0F04 (although it should be noted that it was used on 286 by  LOADALL). If we try to decode this instruction, we will see that bddisasm fails:\n  Looking inside  disasmstatus.h, we see that error code  0x80000002 means  ND_STATUS_INVALID_ENCODING - so there is no valid encoding for it, which is good, since we want to create our own.\n Let\u2019s now assume that the instruction we want to create is a simple, modrm encoded instruction, with two operands - the first one is a general purpose register, while the second one is either general purpose register, or memory. Let\u2019s call this instruction  BDDISASM, and let\u2019s see a couple of possible forms:\n  As already mentioned, the opcode for this instruction will be (the currently unassigned)  0F04. The first operand will be a 16, 32 or 64 bit general purpose register, depending on operand size. The second operand will be a 16, 32 or 64 bit general purpose register or memory location, depending on modrm.mod and operand size. The first operand is read-write, while the second one is only read. There are no implicit operands. We can now describe the basic instruction in  table_0F.dat:\n   The second element,  Gv, indicates that the first operand is a general purpose register encoded in modrm.reg ( G), and is 16, 32 or 64 bit in size, depending on operand size ( v);\n  The third element,  Ev, indicates that the second operand is a general purpose register or memory encoded in modrm.rm ( E), and is 16, 32 or 64 bit in size, depending on operand size ( v);\n  The next element describes the implicit operands accessed by the instruction; since we have none, we specify  nil;\n  The next element is the most important, and it describes the encoding; it enumerates all the opcode bytes -  0F and  04, followed by  /r, indicating that the instruction uses modrm encoding;\n  The last element is the access map for each instruction operand, and is specified using the keyword  w:. The first operand is read-write ( RW), while the second one is read ( R).\n Let\u2019s now rebuild the decoding tree by building the  isagenerator project in VisualStudio, or by running  make, followed by rebuilding the  bddisasm library and the  disasmtool. Let\u2019s now try to decode the instruction again:\n  We now get a different error:  0x80000001 which means  ND_STATUS_BUFFER_TOO_SMALL - this indicates that there is a valid instruction for this encoding, but we didn\u2019t supply enough bytes to decode it. Indeed, we did not, as we only specified the opcode, without the modrm byte. Let\u2019s try again, using the modrm byte as well this time:\n  As you can see, the instruction has been successfully decoded! Playing with different encodings yield the expected instruction:\n C:\\&gt;disasm -b64 -h 0F0400660F0400480F0400670F0400F30F04000000000000000000 0f0400 BDDISASM eax, dword ptr [rax]0000000000000003 660f0400 BDDISASM ax, word ptr [rax]0000000000000007 480f0400 BDDISASM rax, qword ptr [rax]000000000000000B 670f0400 BDDISASM eax, dword ptr [eax]000000000000000F f30f0400 BDDISASM eax, dword ptr [rax]\n If we want, we can add more information to our instruction. For example, we can now assume that the instruction modifies the flags - it always sets the carry-flag ( CF). In order to specify this, we have to first indicate that the instruction uses the implicit operand  Fv, which stands for the flags register, and then we have to tell it what flags it modifies, using the  f: keyword:\n   C:\\&gt;disasm -b64 -h 0F0400 -exi0000000000000000 0f0400 BDDISASM eax, dword ptr [rax] DSIZE: 32, ASIZE: 64, VLEN: - ISA Set: UNKNOWN, Ins cat: UNKNOWN, CET tracked: no FLAGS access CF: 1, Valid modes R0: yes, R1: yes, R2: yes, R3: yes Real: yes, V8086: yes, Prot: yes, Compat: yes, Long: yes SMM on: yes, SMM off: yes, SGX on: yes, SGX off: yes, TSX on: yes, TSX off: yes VMXRoot: yes, VMXNonRoot: yes, VMXRoot SEAM: yes, VMXNonRoot SEAM: yes, VMX off: yes Valid prefixes REP: no, REPcc: no, LOCK: no HLE: no, XACQUIRE only: no, XRELEASE only: no BND: no, BHINT: no, DNT: no Operand: 0, Acc: RW, Type: Register, Size: 4, RawSize: 4, Encoding: R, RegType: General Purpose, RegSize: 4, RegId: 0, RegCount: 1 Operand: 1, Acc: R-, Type: Memory, Size: 4, RawSize: 4, Encoding: M, Segment: 3, Base: 0, Operand: 2, Acc: -W, Type: Register, Size: 4, RawSize: 4, Encoding: S, RegType: Flags, RegSize: 4, RegId: 0, RegCount: 1\n You can see that in the  FLAGS access section,  CF: 1 is listed, meaning that it is always set to  1. Other possible values for flags include  m, which means that the flag is modified according to the result,  0, which means that the flag is cleared,  t which means the flag is tested, and  u, which means the flag is undefined. Flags which are missing from the  FLAGS access section are not touched at all.\n  Finally, let\u2019s discuss some not-so-well-known cases when dealing with instruction encodings. Of course, all of them are documented, but finding this information in the SDM can take some time, so here is a quick list of the most relevant ones:\n It is possible to encode seemingly valid instructions which are longer than the maximum limit of 15 bytes, but the CPU would generate #GP on them anyway;\n  The REX prefix must always be the last byte before the opcode bytes, otherwise it\u2019s ignored:  48F333C0 will decode to  xor eax, eax, NOT  xor rax, rax, because  F3 prefix comes after the REX  48 prefix;\n  If both  F2 and  F3 prefixes are present in an instruction, the CPU will consider the last occurring prefix:  F2F2F2F3A6 will decode to  repz cmpsb, since  F3 is the last occurring prefix, and all of the  F2 prefixes will be ignored ;\n  Likewise, the last occurring segment prefix is considered, but note that in 64 bit mode, only  fs and  gs overrides are accepted:  65642e2e3300 will decode to  xor eax, dword ptr cs:[eax] in 32 bit mode, but it will decode to  xor eax, dword ptr fs:[rax] in 64 bit mode;\n  Ignored and redundant prefixes are part of the instruction, so they are counted to the instruction length:  F2F2F2F2F2F2F2F2F2F2F2F2F2F290 is decoded &amp; executed as a  NOP, but adding one more  F2 prefix will make the instruction 16 bytes long, thus generating a #GP, and causing a decode error;\n  RSP cannot be used as an index with SIB addressing, and it will be ignored:  3304E0 will decode to  xor eax, dword ptr [rax] instead of  xor eax, dword ptr [rax+rsp*8];\n  When using  modrm.mod == 0 (memory) and  modrm.rm == 5 (rbp) in 64 bit mode, RIP relative addressing is used instead of direct addressing; however, by using SIB addressing with  modrm.mod == 0 (memory),  modrm.rm == 4 (rsp, SIB),  SIB.base == 5 (rbp), and  SIB.index == 4 (rsp), one ca still do direct addressing to an absolute 32 bit address even in 64 bit mode:  33042544444444 will decode to  xor eax, dword ptr [0x44444444];\n  In 64 bit mode, stack operations use 64 bit operands by default (even without REX.W prefix); however, this means that encoding a PUSH/POP with a 32 bit operand is impossible, although you can still encode PUSH/POP with 16 bit operands:  6650 will decode to  push ax even in 64 bit mode, with no way to encode  push eax;\n  In 64 bit mode, on Intel CPUs, indirect branches always use 64 bit operands:  FF20,  48FF20,  66FF20 will all decode to  jmp qword ptr [rax] in 64 bit mode;\n  Moves to/from control/debug registers will always use modrm.mod == 3, even if the actual modrm.mod is 0, 1 or 2:  0F2000 will decode to  mov rax, cr0, not  mov [rax], cr0;\n  Moves to/from control/debug registers with modrm.mod == 1 or modrm.mod == 2 (with displacement), will ignore the displacement:  0F2040 will decode to  mov rax, cr0, even if normally modrm.mod == 1 would require a 1 byte displacement;\n  On AMD, one can use the  LOCK prefix  F0 with  mov cr instruction to access the cr8 registers:  F00F22C0 decodes to  mov cr8, eax;\n  We presented in this blog-post how a comprehensive, well written instruction decoder can greatly improve the life of a developer when working with instructions. Surely, bddisasm is a very important part of HVMI, as much of the introspection logic revolves around analyzing instructions, and having the option of doing this with a simple, fast and accurate decoder greately improves code quality.\n We will see in a future blog-post how bddisasm can also help create simple instruction emulators, when we will dig into another important project - the Bitdefender Shellcode Emulator - bdshemu.", "posttime": "2020-11-05 20:10:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,\u6c47\u7f16,\u7a0b\u5e8f,bitdefender,\u6307\u4ee4", "title": "Bddisasm\uff1aBitDefender x86\u53cd\u6c47\u7f16\u7a0b\u5e8f", "title_en": "Bddisasm: The Bitdefender x86 Disassembler", "transed": 1, "url": "https://hvmi.github.io/blog/2020/11/04/bddisasm.html", "via": "", "real_tags": ["\u7f16\u7a0b", "\u6c47\u7f16", "\u7a0b\u5e8f", "\u6307\u4ee4"]}, {"category": "", "categoryclass": "", "imagename": "75570ac22da8e65c8779e6efddcf4579.png", "infoid": 1033280, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7406\u8bba\u4e0a\uff0cIPv6\u662f\u89e3\u51b3\u5f88\u591a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5305\u62ec\u4e0d\u65ad\u7f29\u5c0f\u7684IPv4\u5730\u5740\u7a7a\u95f4\u3002IPv6\u662f1997\u5e74\u7684\u8349\u6848(\uff01)\uff0c\u5e76\u4e8e2017\u5e74\u6210\u4e3a\u771f\u6b63\u7684\u4e92\u8054\u7f51\u6807\u51c6\u3002\u5766\u7387\u5730\u8bf4\uff0c\u5b83\u53ea\u662f\u5728\u6ca1\u6709\u8db3\u591f\u597d\u5904\u7684\u60c5\u51b5\u4e0b\u589e\u52a0\u4e86\u592a\u591a\u9ebb\u70e6\u7684\u4e8b\u60c5\u4e4b\u4e00\u3002\n\u597d\u5427\uff0c\u662f\u7684\uff0cIPV6\u7684\u5730\u5740\u7a7a\u95f4\u5f88\u5927\u3002IPV4\u4f7f\u752832\u4f4d\u5730\u5740\uff0c\u603b\u5171\u67094,294,967,296\u4e2a\u5730\u5740\u3002IPV6\u4f7f\u7528128\u4f4d\u5730\u5740\uff0c\u8fd9\u610f\u5473\u7740\u2026\u3002340,282,366,920,938,463,463,374,607,431,768,211,456\u5730\u5740\u30021\u6574\u4e2av4\u7a7a\u95f4\u53ef\u4ee5\u653e\u5165v6\u7a7a\u95f4$7.922816251426434\\x 10^{28}$\u30022\u5206\u914d\u7ed9\u4eba\u7684\u9ed8\u8ba4\u5730\u5740\u4e3aa/64\uff0c\u8fd9\u610f\u5473\u7740\u524d\u4e00\u534a\u7684\u5730\u5740\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u6574\u4e2a\u540e\u534a\u90e8\u5206\u662f\u7f51\u7edc\u552f\u4e00\u7684\u90e8\u5206\uff0c\u8fd9\u610f\u5473\u7740\u5927\u591a\u6570\u4eba\u5728\u5bb6\u91cc\u670918,446,744,073,709,551,616\u4e2a\u5730\u5740\u53ef\u4ee5\u73a9\u30023\u4e0ev4\u76f8\u6bd4\uff0c\u5728v4\u4e2d\uff0c\u5927\u591a\u6570\u7f51\u7edc\u90fd\u5728/24\u5de6\u53f3\uff0c\u8fd9\u610f\u5473\u7740\u524d\u4e09\u4e2a\u5206\u7ec4\u662f\u56fa\u5b9a\u7684\uff0c\u60a8\u5f97\u5230\u7684\u662f\u2026\u3002254\u4e2a\u5730\u5740\u3002\u53e6\u5916\uff0c\u5728\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6807\u51c6/64\u5206\u914d\u53ef\u4ee5\u518d\u6b21\u5c06\u6574\u4e2av4\u5730\u5740\u7a7a\u95f4\u653e\u5165\u5176\u5185\u90e84,294,967,296\u6b21\u3002(\u662f\u7684\uff0c\u8fd9\u662fIPv4\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5730\u5740\u6570\u91cf\u3002\u8fd9\u5c31\u662f\u5f53\u4f60\u5c06\u4e00\u4e2a\u6743\u529b\u9664\u4ee5\u4e00\u534a\u7684\u6743\u529b\u65f6\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u3002)\u3002\n\u8003\u8651\u5230\u5927\u591a\u6570\u9ad8\u7ea7\u7ba1\u7406\u673a\u6784\u5df2\u7ecf\u7528\u5b8c\u4e86\u5730\u5740\uff0cIPv4\u5730\u5740\u662f\u7a00\u758f\u7684\uff0c\u4f46\u662f\u56e0\u4e3aCIDR\u548cNAT\u662f\u4e00\u79cd\u4e1c\u897f\uff0c\u6211\u4eec\u771f\u7684\u5df2\u7ecf\u5f00\u59cb\u538b\u7f29\u6211\u4eec\u7684\u4f7f\u7528\u4e86\u3002\u6211\u7684\u6574\u4e2a\u623f\u5b50\u670960\u591a\u4e2aIP\uff0c\u5360\u636e\u4e86\u2026\u30022\uff0c\u6839\u636e\u4e16\u754c\u5176\u4ed6\u5730\u533a\u7684\u8bf4\u6cd5\u3002\n\u4eba\u4eec\u6279\u8bc4IPv4\u7684\u4e00\u4ef6\u4e8b\u662f\u5206\u914d\u592a\u7cdf\u7cd5\u4e86\u3002\u4f8b\u5982\uff0c\u4efb\u4f55\u4ee5127\u5f00\u5934\u7684\u5730\u5740\u90fd\u662f\u672c\u5730\u4e3b\u673a\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\u662f127.0.0.1\uff0c\u4f46\u4ece127.0.0.0\u5230127.255.255.255\u7684\u4efb\u4f55\u5730\u5740\u90fd\u610f\u5473\u7740\u5b8c\u5168\u76f8\u540c\u7684\u4e1c\u897f\u3002\u90a3\u5c31\u662f16,777,216\u4e2a\u5730\u5740\uff0c\u5b57\u9762\u4e0a\u90fd\u662f\u672c\u5730\u4e3b\u673a\u5730\u5740\u3002\u6309\u6570\u5b57\u8ba1\u7b97\uff0c\u5730\u5740\u7a7a\u95f4\u76840.39%\uff0c\u4f46\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\n\u540c\u6837\uff0c\u4efb\u4f55\u4ee50\u5f00\u5934\u7684\u5730\u5740\u5b9e\u9645\u4e0a\u90fd\u662f\u201c\u5f53\u524d\u7f51\u7edc\u201d(\u4ec5\u4f5c\u4e3a\u6e90\u5730\u5740\u6709\u6548)\uff0c\u4e5f\u5c31\u662f\u53e6\u59161600\u4e07\u4e2a\u5730\u5740\u3002\n\u79c1\u6709\u7f51\u7edc\u8fd8\u6709\u591a\u4e2a\u5730\u5740\u5757\uff0c10.0.0.0/8\u3001172.16.0.0/12\u548c192.168.0.0/16\uff0c\u603b\u5171\u670917,891,328\u4e2a\u5730\u5740\u3002\n\u662f\u7684\uff0c\u4e0eIPV6\u76f8\u6bd4\uff0cIPV6\u662f\u66f4\u597d\u7684\u2026\u3002\u5728\u7406\u8bba\u4e0a\u3002\u53ea\u6709\u4e00\u4e2a\u73af\u56de\u5730\u5740\uff0c\uff1a\uff1a1\u3002\u540c\u65f6\u2026\u3002FC00\uff1a\uff1a/7(26\uff0c58,455,991,569,831,745,807,614,120,560,689,152\u5730\u5740)\u662f\u79c1\u6709\u5730\u5740\u7a7a\u95f4(\u7a0d\u540e\u5c06\u8be6\u7ec6\u4ecb\u7ecd)\uff0cFE80\uff1a\uff1a/10(332,306,998,946,228,968,225,951,765,070,086,144\u5730\u5740\u662f\u672c\u5730\u5730\u5740\u7a7a\u95f4\uff0cFF00\uff1a\uff1a/8(1,329,227,995,784,915,872,903,807,060,280,344,576\u5730\u5740\u3002)\u3002\u662f\u7ec4\u64ad\u3002\u662f\u7684\uff0c\u4f60\u770b\u5230\u4e00\u79cd\u91cd\u590d\u51fa\u73b0\u7684\u6a21\u5f0f\u5417\uff1f\u5c3d\u7ba1\u6574\u4e2a\u201c\u7279\u6b8a\u201d\u5730\u5740\u5206\u914d\u6070\u597d\u5360\u6574\u4e2aIPV6\u5730\u5740\u7a7a\u95f4\u76841.271\uff0c\u4f46\u6211\u4eec\u4ecd\u7136\u5728\u5206\u914d\u5927\u91cf\u7684\u5730\u5740\u3002\u5386\u53f2\u4f1a\u91cd\u6f14\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u8fd9\u4e00\u70b9\u3002\n\u6211\u627f\u8ba4\uff0cIPV6\u4e2d\u7684\u591a\u64ad\u662f\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a\u5730\u5740\u4e2d\u7684\u4e00\u4e9b\u4f4d\u662f\u7279\u6b8a\u6807\u5fd7\uff0c\u800c\u4e14\u4e00\u79cd\u5f62\u5f0f\u7684\u591a\u64ad\u5b9e\u9645\u4e0a\u5305\u62ec\u54cd\u5e94\u8282\u70b9\u7684\u5730\u5740\uff0c\u6240\u4ee5\u5b83\u4e0d\u53ea\u662f\u4e00\u4e2a\u4efb\u610f\u6570\u5b57\uff0c\u800c\u662f\u2026\u3002\u5f97\u4e86\u5427\uff0c\u6709\u8fd9\u4e48\u5927\u7684\u7a7a\u95f4\uff0c\u8fd9\u6709\u70b9\u4e0d\u5fc5\u8981\u3002\n\u6211\u4eec\u90fd\u77e5\u9053IPV4\u5730\u5740\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff0c\u5bf9\u5427\uff1f0-255\u8303\u56f4\u5185\u7684\u56db\u4e2a\u70b9\u5206\u5341\u8fdb\u5236\u5206\u7ec4\u3002\u4f8b\u5982\uff0c192.168.5.225\u3002IPv6\u4f7f\u7528\u516b\u4e2a\u5206\u7ec4\uff0c\u6bcf\u7ec4\u56db\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u7528\u5192\u53f7\u5206\u9694\u3002\u4f8b\u5982\uff0c2607:f0d0:1002:0051:0000:0000:0000:0004.That\u2019s\u2026\u3002\u975e\u5e38\u4e0d\u597d\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u51e0\u6761\u7f29\u5199\u89c4\u5219\u3002\u53ef\u4ee5\u5220\u9664\u7ec4\u524d\u7684\u4efb\u4f55\u96f6\uff0c\u7ed3\u679c\u662f\uff1a2607\uff1af0d0\uff1a1002\uff1a51\uff1a0\uff1a0\uff1a0\uff1a4\u3002\u7531\u4e8e\u8fd9\u4ecd\u7136\u662f\u91cd\u590d\u7684\uff0c\u60a8\u53ef\u4ee5\u7528\u7a7a\u7684\uff1a2607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a4\u66ff\u6362\u4e00\u4e2a\u5305\u542b\u591a\u7ec4\u5168\u96f6\u7684\u5e8f\u5217\u3002\u4e3a\u4e86\u8bb0\u5f55\uff0c\u8fd9\u5c31\u662f\u73af\u56de\u5730\u5740\u4e3a\uff1a\uff1a1\u7684\u539f\u56e0\u3002\u5b8c\u6574\u5730\u5740\u4e3a0000\u3002\u800c\u4e14\u6bd4IPv4\u5730\u5740\u66f4\u96be\u8bf4\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u6b64\u5730\u5740\u8fdd\u53cd\u4e86url\u89c4\u8303\uff0c\u56e0\u4e3a\uff1a\u5b57\u7b26\u4e13\u95e8\u7528\u4e8e\u5c06\u4e3b\u673a\u90e8\u5206(\u4f8b\u5982\uff0cgoogle.com)\u4e0e\u8981\u8fde\u63a5\u7684\u7aef\u53e3(\u5047\u8bbe\u662f\u975e\u6807\u51c6\u7684)\u5206\u5f00\u3002\u4f8b\u5982\uff0c\u6211\u53ef\u4ee5\u901a\u8fc7http://192.168.5.43:9091.See\u5230\u8fbe\u6211\u7684Torrent\u5ba2\u6237\u7aef\uff1a\u90a3\u91cc\uff1f\u56e0\u4e3a\u4f20\u8f93\u4fa6\u542c\u7684\u662f\u7aef\u53e39091\uff0c\u800c\u4e0d\u662f\u7aef\u53e380\u3002\u6211\u4eec\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1f\u597d\u7684\uff0c\u901a\u8fc7\u81ea\u7136\u5730\u518d\u6b21\u65ad\u5f00\u5b83\u3002\u8981\u8fde\u63a5\u5230\u539f\u59cb\u7684IPV6\u5730\u5740\uff0c\u4f60\u628a\u5b83\u5305\u5728\u65b9\u62ec\u53f7\u91cc\u3002\u8981\u76f4\u63a5\u8fde\u63a5\u52302607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a4\uff0c\u90a3\u662fhttp://[2607:f0d0:1002:51\uff1a\uff1a4]/\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u4ef6\u4e8b\uff1f\uff01\n\u597d\u5427\uff0c\u8bda\u7136\uff0c\u81ea\u4ece\u2026\u4ee5\u6765\uff0cIPV6\u6709\u70b9\u4f9d\u8d56\u4e8e\u57df\u540d\u7cfb\u7edf\u3002\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u90fd\u4f7f\u7528dns\uff0c\u5f53\u7136\uff0c\u5b9e\u9645\u540d\u79f0\u6bd432\u4f4d\u5341\u516d\u8fdb\u5236\u6570\u5b57\u66f4\u5bb9\u6613\u8bb0\u4f4f\uff0c\u4f46dns\u5e76\u4e0d\u795e\u5947\u3002\u9664\u975e\u4f60\u6709\u81ea\u5df1\u7684dns\u670d\u52a1\u5668(\u5b9e\u9645\u4e0a\u6ca1\u6709\u90a3\u4e48\u96be)\uff0c\u5426\u5219\u4f60\u4ecd\u7136\u9700\u8981\u624b\u52a8\u8f93\u5165\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6709pfense\u6765\u7ba1\u7406\u4f60\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2a\u9759\u6001dhcp\u79df\u7ea6\u90fd\u4f1a\u5728dns\u4e2d\u6ce8\u518c\uff0c\u4f46\u5b83\u5fc5\u987b\u5360\u7528dhcp\u79df\u7ea6\u3002\u5982\u679c\u8fd9\u4e2a\u8bbe\u5907\u4e0d\u80fd\u2026\uff0c\u90a3\u4e48\u4f60\u8fd8\u662f\u9700\u8981\u624b\u52a8\u8f93\u5165\u5730\u5740\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6709pfense\u6765\u7ba1\u7406\u4f60\u7684\u7f51\u7edc\uff0c\u6bcf\u4e2a\u9759\u6001\u7684dhcp\u79df\u7ea6\u90fd\u4f1a\u5728dns\u4e2d\u6ce8\u518c\uff0c\u4f46\u5b83\u5fc5\u987b\u5360\u7528dhcp\u79df\u7ea6\u3002\u5982\u679c\u8fd9\u4e2a\u8bbe\u5907\u4e0d\u80fdpfense\u3002\u597d\u5427\uff0c\u6211\u5e0c\u671b\u4f60\u4e0d\u4ecb\u610f\u624b\u52a8\u6253\u51fa\u6765\u8fde\u63a5\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u914d\u7f6e\u5b83\u4e86\u3002\n\u66f4\u68d2\u7684\u662f\uff0crDNS.rDNS\uff0c\u6216\u53cd\u5411DNS\uff0c\u662f\u4f7f\u7528\u5728PTR\u8bb0\u5f55\u4e2d\u8fd4\u56de\u76f8\u5173\u4e3b\u673a\u540d\u7684IP\u5730\u5740\u6267\u884c\u7684DNS\u67e5\u8be2\u3002\u4f8b\u5982\uff0cgoogle.com\u89e3\u6790\u5230\u7684IPv4,216.58.192.142\uff0c\u53ef\u4ee5\u88ab\u67e5\u8be2\u4e3a142.192.58.216.in-addr.arpa\u4ee5\u83b7\u5f97\u5b83\u7684\u201c\u771f\u5b9e\u201d\u540d\u79f0\uff0c\u8fd9\u662ford36s01-in-f142.1e100.net\u7684PTR\u8bb0\u5f55\u3002\u524d\u9762\u6709in-addr.arpa\u3002\u5b83\u662f\u5411\u540e\u7684\uff0c\u56e0\u4e3aDNS\u7684\u5206\u5c42\u6027\u8d28\uff0c\u5b83\u4ece\u53f3\u5230\u5de6\u8fd0\u884c\uff0c\u4e0eIP\u76f8\u53cd\u3002\u5f53\u7136\uff0c\u8fd8\u6709\u7528\u4e8eIPv6\u7684RDNS\uff1a\n$Dig-x 2607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a4\uff1b&lt\uff1b&lt\uff1b&gt\uff1bdig9.11.3-1ubuntu1.12-Ubuntu&lt\uff1b&lt\uff1b&gt\uff1b-x 2607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a4\uff1b\uff1b\u5168\u5c40\u9009\u9879\uff1a+cmd\uff1b\uff1b\u5f97\u5230\u7b54\u6848\uff1a\uff1b\uff1b-&gt\uff1b&gt\uff1bHeader&lt\uff1b&lt\uff1bOPT PSEUDOSECTION\uff1a\uff1bEDNS\uff1a\u7248\u672c\uff1a0\uff0c\u6807\u5fd7\uff1a\uff1bUDP\uff1a65494\uff1b\uff1b\u95ee\u9898SECTION\uff1a\uff1b4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.5.0.0.2.0.0.1.0.d.0.f.7.0.6.2.ip6.arpa.\u3002\u5728Ptr\uff1b\u4e2d\uff1b\u56de\u7b54SECTION:4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.5.0.0.2.0.0.1.0.d.0.f.7.0.6.2.ip6.arpa.\u30023600in PTR 4000.0000.0000.0000.1500.2001.0d0f.7062.ip6.static.sl-reverse.com.\uff1b\uff1b\u67e5\u8be2\u65f6\u95f4\uff1a731\u6beb\u79d2\uff1b\u670d\u52a1\u5668\uff1a127.0.0.53#53(127.0.0.53)\uff1b\uff1b\u65f6\u95f4\uff1a\u7f8e\u56fd\u4e1c\u90e8\u65f6\u95f42020\u5e748\u670830\u65e500\uff1a52\uff1a50\uff1b\u6d88\u606f\u5927\u5c0f\u63a5\u6536\uff1a180\u3002\n\u8fd9\u592a\u75af\u72c2\u4e86\u3002IPV6RDNS TLD\u53ea\u6709ip6.arpa\uff0c\u800cIP\u90e8\u5206\u662f\u2026\u3002\u6bcf\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u6570\u5b57\uff0c\u98a0\u5012\u8fc7\u6765\u3002\nIPv6\u7684\u6838\u5fc3\u652f\u67f1\u4e4b\u4e00\u662f\u5927\u591a\u6570\u6d41\u91cf\u7684\u5904\u7406\u5e94\u8be5\u53d1\u751f\u5728\u7aef\u70b9-\u8def\u7531\u5668\u9664\u4e86\u8bfb\u53d6\u548c\u8f6c\u53d1\u4e4b\u5916\u4e0d\u505a\u592a\u591a\u7684\u5de5\u4f5c\uff0c\u5b9e\u9645\u7684\u6570\u636e\u5904\u7406\u5f88\u5c11\u3002IPv6\u62a5\u5934\u867d\u7136\u6bd4\u8f83\u5e9e\u5927(\u56e0\u4e3a\u5de8\u5927\u7684\u5730\u5740)\uff0c\u4f46\u4e5f\u7b80\u5355\u5f97\u591a\u3002\u56fa\u5b9a\u7684\u7248\u672c\u4ee3\u7801(6)\uff0c\u6d41\u91cf\u7c7b\u522b(DiffServ+ECN)\uff0c\u6d41\u6807\u7b7e\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u968f\u673a\u503c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5c5e\u4e8e\u76f8\u540c\u903b\u8f91\u8fde\u63a5\u7684\u6570\u636e\u5305\u3001\u957f\u5ea6\u3001\u4e0b\u4e00\u4e2a\u62a5\u5934\u7c7b\u578b\u548cTTL\u6765\u8bf4\u90fd\u662f\u6052\u5b9a\u4e0d\u53d8\u7684\u3002\u5b83\u662f\u4e00\u4e2a\u56fa\u5b9a\u7684\u7248\u672c\u4ee3\u7801(6)\u3001\u6d41\u91cf\u7c7b\u522b(DiffServ+ECN)\u3001\u6d41\u6807\u7b7e(Flow Label)\uff0c\u5bf9\u4e8e\u5c5e\u4e8e\u76f8\u540c\u903b\u8f91\u8fde\u63a5\u3001\u957f\u5ea6\u3001\u4e0b\u4e00\u4e2a\u62a5\u5934\u7c7b\u578b\u548cTTL\u7684\u6bcf\u4e2a\u6570\u636e\u5305\u6765\u8bf4\uff0c\u8be5\u503c\u662f\u6052\u5b9a\u7684\u3002\u663e\u7136)\u3002\u5c31\u662f\u8fd9\u6837\u3002IPv4\u62a5\u5934\u5305\u542b13\u4e2a\u5b57\u6bb5\u5916\u52a0\u53ef\u9009\u90e8\u5206\uff0c\u800cIPv6\u62a5\u5934\u5305\u542b\u5e73\u97628\u3002\u5f53\u7136\uff0c\u60a8\u5b9e\u9645\u4e0a\u53ef\u80fd\u9700\u8981\u5176\u4ed6\u7ec6\u8282\uff0c\u8fd9\u5c31\u662f\u4e0b\u4e00\u4e2a\u62a5\u5934\u5b57\u6bb5\u7684\u7528\u6b66\u4e4b\u5730\u3002IPv6\u4e0d\u662f\u5c06\u5404\u79cd\u9009\u9879\u6253\u5305\u5230\u6807\u51c6\u7684\u5168\u5c40\u62a5\u5934\u4e2d\uff0c\u800c\u662f\u4f7f\u7528\u9644\u52a0\u7684\u62a5\u5934\u6269\u5c55\uff0c\u8fd9\u4e9b\u6269\u5c55\u53ef\u4ee5\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u9644\u52a0\u4ee5\u63d0\u4f9b\u4fe1\u606f\uff0c\u6bd4\u5982\u7528\u4e8e\u5206\u6bb5\u6216IPsec\u30024Next Header\u5b57\u6bb5\u4e2d\u7684\u503c\u6807\u8bc6\u4e0b\u4e00\u6b65\u7684\u5185\u5bb9\uff0c\u8be5\u884c\u4e2d\u7684\u6700\u540e\u4e00\u4e2aHeader\u5c06\u4f7f\u7528\u8be5\u5b57\u6bb5\u6307\u793a\u5305\u542b\u7684\u534f\u8bae\uff0c\u53ef\u4ee5\u662fTCP\u3001UDP\u6216\u5176\u4ed6\u534f\u8bae\u3002\n\u6211\u7684\u610f\u601d\u662f\uff0c\u51e0\u4e4e\u6bcf\u4e2a\u8bbe\u5907\u90fd\u4f7f\u7528\u4ee5\u592a\u7f51\uff0c\u4ee5\u592a\u7f51\u6709\u5e27\u6821\u9a8c\u5e8f\u5217\uff0cudp\u6709\u6821\u9a8c\u548c\u9009\u9879\uff0ctcp\u6709\u5fc5\u9700\u7684\u6821\u9a8c\u548c\u2026\u3002\u5982\u679c\u6211\u4eec\u60f3\u8981\u7b80\u5355\u5730\u5904\u7406\u6570\u636e\u5305\uff0c\u4e22\u5f03\u603b\u548c\u3002\u786e\u5b9e\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8fd9\u662f\u6709\u610f\u4e49\u7684\u3002\u5373\u4f7f\u6ca1\u6709\u8fd9\u4e2a\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u5927\u591a\u6570\u7a0b\u5e8f\u90fd\u6709\u4e24\u4e2a\u6821\u9a8c\u548c\uff1a\u5e27\u4f20\u8f93\u65f6\u7684\u4ee5\u592a\u7f51FCS\n\u6700\u540e\u4e00\u70b9\u662f\uff0c\u8fd9\u4e5f\u7ed9\u53e6\u4e00\u4e2a\u534f\u8bae\u5e26\u6765\u4e86\u53d8\u5316\uff1aUDP\u3002\u5728IPv4\u4e2d\uff0cUDP\u6821\u9a8c\u548c\u5b57\u6bb5\u53ef\u4ee5(\u901a\u5e38\u4e5f\u4f1a)\u7559\u7a7a\u4e3a\u5168\u96f6\uff0c\u8fd9\u610f\u5473\u7740\u201c\u6ca1\u6709\u6821\u9a8c\u548c\u201d\u3002\u5728IPv6\u4e2d\uff0c\u8fd9\u73b0\u5728\u662f\u4e0d\u5141\u8bb8\u7684\uff0c\u5e76\u4e14\u4ecd\u7136\u4f1a\u5bf9\u5168\u96f6\u6821\u9a8c\u548c\u8fdb\u884c\u2026\u68c0\u67e5\u3002\u7136\u540e\u53d1\u73b0\u65e0\u6548\u3002\u6240\u6709IPv6\u4e0a\u7684UDP\u6570\u636e\u5305\u90fd\u5fc5\u987b\u8ba1\u7b97\u6709\u6548\u7684\u6821\u9a8c\u548c\u3002\n\u56e0\u6b64\uff0c\u8bbe\u5907\u4e4b\u95f4\u7684\u6bcf\u6761\u94fe\u8def\u90fd\u6709MTU(\u6700\u5927\u4f20\u8f93\u5355\u4f4d)\u3002\u5bf9\u4e8e\u666e\u901a\u7684\u4ee5\u592a\u7f51\u94fe\u8def\uff0c\u51cf\u53bb\u5e27\u5f00\u9500\uff0c\u8fd9\u662f1500\u5b57\u8282\u3002\u5982\u679c\u60a8\u7684\u8bbe\u5907\u652f\u6301\u5de8\u578b\u5e27\uff0c\u5219\u63a5\u8fd19000\u5b57\u8282\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u94fe\u8def\u90fd\u662f\u76f8\u7b49\u7684\u3002\u6709\u4e9b\u8bbe\u5907\u53ef\u80fd\u4e00\u7aef\u5177\u6709\u9ad8MTU\u94fe\u8def\uff0c\u800c\u53e6\u4e00\u7aef\u5177\u6709\u8f83\u4f4e\u7684MTU\u94fe\u8def\u3002\u4f8b\u5982\uff0c\u6211\u7684\u8def\u7531\u5668\u53ef\u80fd\u5728\u5185\u90e8\u652f\u6301\u5de8\u578b\u5e27\uff0c\u4f46\u5e7f\u57df\u7f51\u7aef\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u6709\u788e\u7247\u3002\n\u5982\u679c\u8def\u7531\u5668\u7531\u4e8eMTU\u5dee\u5f02\u800c\u65e0\u6cd5\u8f6c\u53d1\u5e27\uff0c\u5219\u5728\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u5c06\u4f7f\u7528IPv4\u62a5\u5934\u7684More Fragments\u6807\u5fd7\u548c\u7247\u6bb5\u504f\u79fb\u91cf\u5b57\u6bb5\u5c06\u6570\u636e\u5305\u5206\u6210\u591a\u4e2a\u5757\uff0c\u5e76\u5c06\u6570\u636e\u5305\u5206\u6210\u591a\u4e2a\u5e27\u9010\u4e2a\u53d1\u9001\uff0c\u53e6\u4e00\u7aef\u53ef\u4ee5\u91cd\u65b0\u7ec4\u88c5\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u8bf4\u7684\u662f\u201c\u5982\u679c\u5141\u8bb8\u201d\u3002IPv4\u62a5\u5934\u4e2d\u6709\u4e00\u4e2a\u201c\u4e0d\u8981\u5206\u7247\u201d\u6807\u5fd7\uff0c\u5982\u679c\u53d1\u9001\u8bbe\u5907\u8bbe\u7f6e\u4e86\u8be5\u6807\u5fd7\uff0c\u5219\u4e0d\u80fd\u652f\u6301\u8fd9\u79cd\u5927\u5c0f\u7684\u6570\u636e\u5305\u7684\u8def\u7531\u5668\u5c06\u53d1\u56deICMP\u201cPacket Too Large\u201d(\u6570\u636e\u5305\u592a\u5927)\u6d88\u606f\uff0c\u8be5\u6d88\u606f\u4f1a\u5f39\u56de\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5728\u53d1\u9001\u6570\u636e\u65f6\uff0c\u60a8\u552f\u4e00\u5173\u5fc3\u7684MTU\u662f\u60a8\u76f4\u63a5\u8fde\u63a5\u7684\u8bbe\u5907\u7684MTU\uff1b\u4f60\u81ea\u5df1\u7684\u94fe\u63a5\u3002\nIPv6\u4e0d\u5141\u8bb8\u8fd9\u6837\u505a\u3002\u4e2d\u95f4\u8def\u7531\u5668\u4e0d\u5141\u8bb8\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5\uff0c\u800c\u662f\u4f1a\u53d1\u56deICMP\u9519\u8bef\u3002\u5982\u679c\u60a8\u8981\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5(\u8fd9\u4e5f\u662f\u975e\u5e38\u4e0d\u9f13\u52b1\u7684)\uff0c\u5219\u53d1\u9001\u8bbe\u5907\u53ef\u4ee5\u6dfb\u52a0\u5206\u6bb5\u62a5\u5934\u6269\u5c55\u3002\u56e0\u6b64\uff0c\u8981\u4e48\u6839\u672c\u4e0d\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5\uff0c\u8981\u4e48\u4ece\u59cb\u53d1\u8bbe\u5907\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5\u3002IPv6\u8fd8\u5e0c\u671b\u53d1\u9001\u8005\u901a\u8fc7\u5b9e\u9645\u4fa6\u542cICMP\u6570\u636e\u5305\u592a\u5927\u7684\u6d88\u606f\u6765\u6267\u884c\u8def\u5f84MTU\u53d1\u73b0\uff0c\u8be5\u6d88\u606f\u5305\u542b\u8be5\u8282\u70b9\u7684MTU\u3002\u56e0\u6b64\uff0cIPv6\u8fd8\u5e0c\u671b\u53d1\u9001\u8005\u6267\u884c\u8def\u5f84MTU\u53d1\u73b0\uff0c\u65b9\u6cd5\u662f\u5b9e\u9645\u4fa6\u542c\u5305\u542b\u8be5\u8282\u70b9MTU\u7684ICMP\u6570\u636e\u5305\u592a\u5927\u7684\u6d88\u606f\u3002\u56e0\u6b64\uff0cIPv6\u4e0d\u5141\u8bb8\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5\uff0c\u800c\u662f\u5c06\u5176\u53d1\u56deICMP\u9519\u8bef\u3002\u5982\u679c\u60a8\u8981\u5bf9\u6570\u636e\u5305\u8fdb\u884c\u5206\u6bb5(\u8fd9\u4e5f\u662f\u975e\u5e38\u4e0d\u9f13\u52b1\u7684)\uff0c\u5219\u53d1\u9001\u8bbe\u5907\u53ef\u4ee5\u6dfb\u52a0\u5206\u6bb5\u62a5\u5934\u6269\u5c55\u3002\u4e0d\u8981\u8d85\u8fc7IPv6\u7684\u6700\u5c0fMTU\uff0c\u53731280\u5b57\u8282\u3002\n\u5982\u679c\u4f60\u4e86\u89e3\u6211\uff0c\u4f60\u5c31\u77e5\u9053\u6211\u603b\u662f\u8bf4\uff0c\u8ba1\u7b97\u673a\u7f51\u7edc\u662f\u4e00\u4e2a\u5947\u8ff9\uff0c\u53ea\u6709\u901a\u8fc7\u80f6\u5e26\u3001\u5de5\u7a0b\u5e08\u7684\u7948\u7977\u548c\u611a\u8822\u7684\u8fd0\u6c14\u624d\u80fd\u7ef4\u7cfb\u5728\u4e00\u8d77\u3002\u6ca1\u6709\u4ec0\u4e48\u6bd4\u5c06IPv6\u5f15\u5165\u7f51\u7edc\u66f4\u6b63\u786e\u7684\u4e86\uff0c\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e2d\uff0c\u51e0\u4e4e\u6bcf\u4e2a\u4e0e\u6211\u4ea4\u8c08\u7684\u4eba\u90fd\u5728\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u9009\u62e9\u7684\u6240\u6709\u4e1c\u897f\u4e0a\u5f7b\u5e95\u7981\u7528\u4e86IPv6-\u8fd9\u592a\u4ee4\u4eba\u5934\u75bc\u4e86\uff0c\u4e0d\u5f97\u4e0d\u5904\u7406\u6240\u6709\u8fd9\u4e9b-\u5982\u679c\u5b83\u88ab\u542f\u7528\uff0c90%\u7684\u65b0\u7f51\u7edc\u95ee\u9898\u53d8\u6210\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u8bbe\u5907\u73b0\u5728\u6b63\u5728\u505a\u4f60\u4ece\u672a\u60f3\u8fc7\u7684\u610f\u60f3\u4e0d\u5230\u7684IPv6\u4e8b\u60c5\u3002\u8fd9\u662f\u4e00\u4e2a\u4ee4\u4eba\u5934\u75bc\u7684\u95ee\u9898\uff0c\u5982\u679c\u5b83\u88ab\u542f\u7528\uff0c90%\u7684\u65b0\u7f51\u7edc\u95ee\u9898\u53d8\u6210\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u8bbe\u5907\u73b0\u5728\u6b63\u5728\u505a\u4f60\u4ece\u672a\u60f3\u8fc7\u7684\u610f\u60f3\u4e0d\u5230\u7684IPv6\u4e8b\u60c5\u3002\n\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u5982\u679c\u4f60\u60f3\u7528IPv6\u8fd0\u884c\u7f51\u7edc\uff0c\u4f60\u53ef\u80fd\u4e0d\u5f97\u4e0d\u540c\u65f6\u8fd0\u884c4\u548c6\uff0c\u56e0\u4e3aIPv4\u4ecd\u7136\u5f88\u5f3a\u5927\u3002\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u6d89\u53ca\u7279\u5b9a\u4e3b\u673a\u6216\u7f51\u7edc\u7684\u6bcf\u6761\u9632\u706b\u5899\u89c4\u5219\uff0c\u4f60\u90fd\u9700\u8981\u4e24\u6761\uff1a\u4e00\u6761\u7528\u4e8eIPv4\u5757\uff0c\u53e6\u4e00\u6761\u7528\u4e8eIPv6\u5757\u3002\u5982\u679c\u4f60\u6539\u53d8\u4e86\u4e00\u4e2a\uff0c\u800c\u5fd8\u8bb0\u4e86\u53e6\u4e00\u4e2a\uff0c\u90a3\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u5f53\u4f60\u5f97\u5230\u4e00\u4e2aIP\u5730\u5740\u540e\uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u53ef\u4ee5\u5728\u5168\u7403\u8303\u56f4\u5185\u8fdb\u884c\u8def\u7531\u4e86--\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4ece\u4efb\u4f55\u5730\u65b9\u8bbf\u95ee\u5b83\uff0c\u5c31\u50cf\u597d\u83b1\u575e\u5f0f\u7684\u90a3\u6837\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u8981\u79c1\u6709\u7f51\u7edc\uff0c\u6709\u4e00\u4e2a\u524d\u7f00\uff1a\u4ecefc00\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\u5230fdff\uff1affff\uff1affff(fc00\uff1a\uff1a/7)\u4e4b\u95f4\u7684\u4efb\u4f55\u5185\u5bb9\u90fd\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u7f51\u7edc\u4e0d\u53ef\u8def\u7531\u7684\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u91cc\u5141\u8bb8\u60a8\u4fee\u6539\u7684\u7b2c\u4e00\u4f4d\u5e94\u8be5\u59cb\u7ec8\u662f1\uff0c\u8fd9\u610f\u5473\u7740\u60a8\u5b9e\u9645\u7684rfc\u517c\u5bb9\u8303\u56f4\u662ffd00\uff1a\uff1a/8\uff0c\u5373fd00\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\uff1a0000\u5230fdff\uff1affff\uff1afff\u3002\u5730\u5740\u7684\u4e00\u534a\uff0c\u4f46\u4ecd\u7136\u5f88\u591a\u3002\u662f\u7684\uff0c\u5b9e\u9645\u7684\u89c4\u8303\u66f4\u590d\u6742\uff0c\u5e76\u4e14\u5728\u201c\u7f51\u7edc\u201d\u533a\u57df\u5b9a\u4e49\u4e86\u51e0\u4e2a\u90e8\u5206\uff0c\u4f46\u662f\u2026\u3002\u597d\u5427\uff0c\u4f60\u660e\u767d\u6211\u7684\u610f\u601d\u4e86\u3002\n\u6240\u4ee5\u73b0\u5728\u7684\u95ee\u9898\u662f\uff1a\u5047\u8bbe\u4f60\u5df2\u7ecf\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u4f60\u5982\u4f55\u5c06\u6570\u636e\u5305\u8def\u7531\u5230\u8fd9\u4e9b\u79c1\u6709IP\uff1f\u7b54\u6848\u662f\u7f51\u7edc\u5730\u5740\u524d\u7f00\u8f6c\u6362\u3002\u7b49\u5f85\u2026\u3002\u4ec0\u4e48\uff1f\n\u662f\u3002NAT\u662f\u4e00\u79cdIPv4\u534f\u8bae\u3002NPT\u662f\u4e00\u79cdIPv6\u6280\u672f\u3002\u4f7f\u7528IPv4\uff0c\u4f60\u53ef\u4ee5\u626b\u63cf\u4fe1\u606f\u5305\uff0c\u5982\u679c\u5b83\u4eec\u7b26\u5408\u4e00\u5b9a\u7684\u6807\u51c6(\u6bd4\u5982\uff0c\u53bb\u5f80\u5df2\u77e5\u5730\u5740\uff0c\u6bd4\u5982\u4f60\u7684\u5e7f\u57df\u7f51\u5730\u5740)\uff0c\u5c31\u7528\u4e00\u4e2a\u65b0\u7684\u5730\u5740\u4ea4\u6362\u76ee\u7684\u5730(\u6216\u6e90)\u5730\u5740\u3002\u8fd9\u5c31\u662f\u6211\u5bf9\u6211\u7684\u6240\u6709\u670d\u52a1\u53ea\u4f7f\u7528\u4e00\u4e2aIP\u7684\u65b9\u5f0f\uff1a\u76ee\u7684\u5730\u7aef\u53e3\u51b3\u5b9a\u4f60\u7684\u8bf7\u6c42\u88ab\u8def\u7531\u5230\u54ea\u4e2a\u670d\u52a1\u5668\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u6240\u6709\u672a\u77e5\u7684\u6d41\u91cf\u90fd\u4f1a\u88ab\u4e22\u5f03\uff0c\u6211\u5bf9\u5176\u6709NAT\u89c4\u5219\u7684\u6d41\u91cf\u4e5f\u4f1a\u88ab\u5141\u8bb8\u901a\u8fc7\u9632\u706b\u5899\u3002\u8fd9\u662f\u4e00\u4e2a\u201c\u9ed8\u8ba4\u4e22\u5f03\u7cfb\u7edf\u201d(Default Drop System)\u3002\u8fd9\u662f\u4e00\u4e2a\u201c\u9ed8\u8ba4\u4e22\u5f03\u7cfb\u7edf\u201d(Default Drop System)\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u6240\u6709\u672a\u77e5\u7684\u6d41\u91cf\u90fd\u4f1a\u88ab\u4e22\u5f03\uff0c\u800c\u6211\u5bf9\u5176\u6709NAT\u89c4\u5219\u7684\u6d41\u91cf\u4e5f\u4f1a\u88ab\u5141\u8bb8\u901a\u8fc7\u9632\u706b\u5899\u3002\n\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u5728\u79c1\u6709\u5730\u5740fd2c\uff1aa7c6\uff1a2aae\uff1aef93\uff1a\uff1a41\u4e0a\u6709\u4e00\u4e2a\u4e3b\u673a\uff0c\u7136\u540e\u6211\u53ef\u4ee5\u4e3a\u6dfb\u52a0\u4e00\u4e2anpt\u89c4\u5219\uff0c\u5c06fd2c\uff1aa7c6\uff1a2aae\uff1aef93\uff1a\uff1a\u8f6c\u6362\u4e3a2607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f1\uff1a1\u7684\u6620\u5c04\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u662f\u53cc\u5411\u7684\uff0c\u5165\u7ad9\u548c\u51fa\u7ad9\u90fd\u5c06\u88ab\u8f6c\u6362\u3002\n\u4e3a\u6b64\uff0c\u6211\u53ef\u4ee5(\u4e5f\u8bb8\u4f7f\u7528aaaa\u8bb0\u5f55)\u5c06\u670d\u52a1\u5668\u7684\u516c\u5171IP\u901a\u544a\u4e3a2607\uff1af0d0\uff1a1002\uff1a51\uff1a\uff1a41\uff0c\u5f53\u6570\u636e\u5305\u4ee5\u2026\u683c\u5f0f\u4f20\u5165\u65f6\u3002\n\u8fd9\u4e0d\u4ec5\u610f\u5473\u7740\u6211\u66b4\u9732\u4e86\u6211\u7684\u6574\u4e2a\u7f51\u7edc\uff0c\u800c\u4e14\u6211\u9700\u8981\u4e3a\u6bcf\u4e2a\u4e0d\u540c\u7684\u76ee\u7684\u5730\u63d0\u4f9b\u4e0d\u540c\u7684IP\uff0c\u6b64\u5916\uff0c\u6211\u8fd8\u4f1a\u6cc4\u9732\u6211\u7684\u7f51\u7edc\u7684\u5185\u90e8\u7ed3\u6784\uff01\u4f60\u53ef\u80fd\u4e0d\u77e5\u9053\u524d\u7f00\uff0c\u4f46\u4f60\u4f1a\u77e5\u9053\u786e\u5207\u7684\u5b50\u7f51\u5730\u5740\uff0c\u56e0\u4e3a\u6211\u53ea\u7ffb\u8bd1\u4e00\u4e2a\u524d\u7f00\uff01\n\u90a3\u4e2a\u201c\u4e0d\u540c\u7684IP\u201d\u4f4d\u542c\u8d77\u6765\u53ef\u80fd\u6709\u70b9\u2026\u3002\u55ef\uff0c\u90a3\u4e48\u8bf7\u8bb0\u4f4f\uff0c\u5bf9\u4e8e\u6211\u8fd0\u884c\u7684\u4e00\u4e9b\u7cfb\u7edf(\u6bd4\u5982\u8fd9\u4e2a\u535a\u5ba2\uff0c\u4f7f\u7528NNTP)\uff0c\u7aef\u53e3\u53f7\u672c\u8eab\u5c31\u51b3\u5b9a\u4e86\u76ee\u7684\u5730\uff0c\u4f60\u751a\u81f3\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u76f8\u540c\u7684\u57df\u540d\u8fdb\u884c\u8ba1\u6570\u3002\u4f7f\u7528NPT\uff0c\u4f60\u65e0\u6cd5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u5fc5\u987b\u6709\u4e00\u4e2a\u989d\u5916\u7684\u8bbe\u5907\uff0c\u5982\u7b2c7\u5c42\u4ee3\u7406(\u5982HAProxy)\u6765\u63a5\u6536\u6240\u6709\u5185\u5bb9\u5e76\u5c06\u5176\u53d1\u9001\u5230\u6b63\u786e\u7684\u76ee\u7684\u5730\uff0c\u8fd9\u610f\u5473\u7740\u6211\u9700\u8981\u4e00\u53f0\u4e13\u7528\u4e3b\u673a\u6765\u505aIPv4 NAT\u672c\u6765\u5c31\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5\uff01\n\u800c\u4e14\u60c5\u51b5\u4f1a\u53d8\u5f97\u66f4\u597d\u3002\u8bb0\u4f4f\uff0c\u8fd9\u5c06\u4f1a\u76f2\u76ee\u5730\u4ea4\u6362\u524d\u7f00\u3002\u8fc7\u53bb\u7684\u65e5\u5b50\u662f\u201c\u53ea\u6709\u6211\u663e\u5f0f\u5730\u4e3a\u5176\u521b\u5efa\u89c4\u5219\u7684\u6d41\u91cf\u624d\u80fd\u8fdb\u5165\u201d\u3002\u73b0\u5728\uff0c\u53ea\u9700\u6dfb\u52a0\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5c31\u53ef\u4ee5\u9ed8\u8ba4\u5730\u66b4\u9732\u60a8\u7684\u6574\u4e2a\u7f51\u7edc\uff01\u73b0\u5728\uff0c\u60a8\u9700\u8981\u9632\u706b\u5899\u89c4\u5219\u6765\u62e6\u622a\u60a8\u4e0d\u60f3\u8981\u7684\u5185\u5bb9\uff0c\u5e76\u6dfb\u52a0\u663e\u5f0f\u5141\u8bb8\uff0c\u8fd9\u4e00\u6b21\u662f\u624b\u52a8\u4f5c\u4e3a\u989d\u5916\u7684\u6b65\u9aa4\u3002\u8fd9\u66f4\u50cf\u662f\u4e00\u79cd\u201c\u9ed8\u8ba4\u901a\u8fc7\u201d\u8def\u7531--\u9664\u975e\u6211\u544a\u8bc9\u60a8\u4e0d\u8981\u8fd9\u6837\u505a\uff0c\u5426\u5219\u5c31\u8ba9\u5b83\u901a\u8fc7\u3002\u73b0\u5728\uff0c\u5927\u591a\u6570\u9632\u706b\u5899\u90fd\u662f\u8fd9\u6837\u505a\u7684\u3002\u5982\u679c\u67d0\u4e2a\u4e1c\u897f\u6ca1\u6709NAT\u89c4\u5219\uff0c\u90a3\u4e48\u5373\u4f7f\u5b83\u88ab\u5141\u8bb8\u901a\u8fc7\uff0c\u5b83\u5b9e\u9645\u4e0a\u4e5f\u4e0d\u77e5\u9053\u8def\u7531\u5230\u54ea\u91cc\u3002\u6709\u4e86\u300a\u4e0d\u6269\u6563\u6838\u6b66\u5668\u6761\u7ea6\u300b\uff0c\u4f60\u5c31\u6ca1\u6709\u4e86\u90a3\u5c42\u5b89\u5168\u5c42\uff0c\u9632\u706b\u5899\u662f\u5916\u90e8\u4e16\u754c\u548c\u4f60\u7684\u7f51\u7edc\u4e4b\u95f4\u552f\u4e00\u7684\u4e1c\u897f\u3002\n\u5982\u679c\u4f60\u8fd8\u8bb0\u5f97\u5173\u4e8eIPv6\u7684\u4e00\u4ef6\u4e8b\uff0c\u90a3\u5c31\u662f\u8fd9\u4ef6\u4e8b\u3002\u6b63\u786e\u7684\u3002\u8fd9\u5c31\u662f\u6211\u6682\u65f6\u4e0d\u4f1a\u5f00\u59cb\u8fd0\u884cIPv6\u7f51\u7edc\u7684\u539f\u56e0\u3002\n\u4f46\u6211\u8fd8\u6ca1\u505a\u5b8c\uff0c\u6574\u4e2a\u5b9e\u8df5\u90fd\u662f\u2026\u3002PfSense\u624b\u518c\u751a\u81f3\u8bf4\uff0c\u6211\u521a\u624d\u8bf4\u7684\u53ef\u80fd\u4e5f\u4e0d\u80fd\u6b63\u786e\u5de5\u4f5c\uff0c\u6240\u4ee5\uff0c\u4e0d\u9519\uff0c\u4f46\u540c\u65f6\uff0cipv6\u7684\u5168\u90e8\u8981\u70b9\u662f\u6240\u6709\u8282\u70b9\u90fd\u662f\u5168\u7403\u53ef\u8def\u7531\u7684\uff0c\u4f60\u4e0d\u9700\u8981\u7279\u6b8a\u7684\u79c1\u6709\u5730\u5740\u7a7a\u95f4\u6216\u4efb\u4f55\u7c7b\u578b\u7684\u8f6c\u6362\uff0c\u5b83\u5c31\u53ef\u4ee5\u5de5\u4f5c\u3002\u5982\u679c\u4f60\u60f3\uff0c\u54c8\uff0c\u9690\u79c1\uff0c\u8fd9\u5c31\u662f\u9632\u706b\u5899\u7684\u7528\u9014\u3002\u8fd9\u5c31\u662f\u2026\u3002\u597d\u7684\uff0c\u8bf4\u771f\u7684\uff0c\u8fd9\u5c31\u50cf\u662f\u4e00\u7fa4\u4e0d\u77e5\u9053\u6280\u672f\u5e94\u8be5\u5982\u4f55\u5de5\u4f5c\u7684\u4eba\u88ab\u8981\u6c42\u8bbe\u8ba1\u4e00\u79cd\u6280\u672f\u6587\u76f2\u53ef\u4ee5\u771f\u6b63\u7406\u89e3\u548c\u6d41\u5229\u4f7f\u7528\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u6709\u2026\u3002\u8fd9\u4e2a\u3002\u5c31\u50cf\u73b0\u5728\uff0cIETF\u5728\u5199RFC\u65f6\u662f\u4e0d\u662f\u770b\u4e86\u4e00\u4e9b\u7f51\u7edc\u72af\u7f6a\u7535\u5f71\uff1f\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u7684\u6bcf\u53f0\u8ba1\u7b97\u673a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u90fd\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u9664\u975e\u4f60\u7279\u522b\u9632\u706b\u5899\u3002\u6211\u77e5\u9053\u5373\u4f7f\u662f\u5728IPv4\u4e2d\uff0c\u4e8b\u60c5\u4e5f\u662f\u8fd9\u6837\u8fd0\u4f5c\u7684\uff0c\u76f4\u5230\u4f60\u8bbe\u7f6e\u4e86\u4e00\u4e2a\u5b50\u7f51\u8fb9\u754c\uff0c\u4f46\u5728V6\u4e2d\uff0c\u5b83\u8981\u4e48\u662f\u9632\u706b\u5899\uff0c\u8981\u4e48\u662f\u6ca1\u6709\u4fdd\u62a4\u3002\u4ece\u6280\u672f\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u79cd\u7aef\u5230\u7aef\u7684\u7126\u70b9\u6027\u8d28\u771f\u7684\u662f\u8003\u8651\u4e0d\u5468\u3002\u800c\u4e14\uff0c\u6b63\u5982\u6570\u636e\u663e\u793a\u7684\u90a3\u6837\uff0c\u90a3\u4e9b\u79ef\u6781\u4f7f\u7528IPv6\u7684\u8bbe\u5907\u3002\u4ece\u201c\u53ea\u662f\u5de5\u4f5c\u201d\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u662f\u4e0d\u9519\u7684\uff0c\u4f46\u5c31\u50cf\u6700\u8fd1\u7684\u8bb8\u591a\u4e8b\u60c5\u4e00\u6837\uff0c\u201c\u597d\u7684\uff0c\u5b83\u9700\u8981\u65e0\u7f1d\u5de5\u4f5c\u201d\u8fd9\u4e00\u65b9\u9762\u4e0e\u201c\u5b9e\u9645\u6709\u7528\u7684\u529f\u80fd\u201d\u8fd9\u4e00\u65b9\u9762\u4e25\u91cd\u51b2\u7a81\u3002\n\u5ba2\u6237\u7aef\u4ece\u6e900.0.0.0\u5411\u5e7f\u64ad\u5730\u5740\u53d1\u9001\u4e00\u4e2aDHCPDISCOVER\u6570\u636e\u5305\u3002\n\u670d\u52a1\u5668\u5411\u5e7f\u64adIP(\u4f46\u76ee\u7684MAC)\u53d1\u9001\u4e00\u4e2aDHCPOFFER\uff0c\u5176\u4e2d\u5305\u542b\u63d0\u4f9b\u7684\u5ba2\u6237\u7aefIP\u3001\u5b50\u7f51\u63a9\u7801\u3001DNS\u670d\u52a1\u5668\u3001\u79df\u7528\u65f6\u95f4\u548c\u5176\u4ed6\u4fe1\u606f\u3002\n\u670d\u52a1\u5668\u53d1\u9001\u5e26\u6709\u63d0\u8bae\u4e2d\u76f8\u540c\u4fe1\u606f\u7684DHCPACK\uff0c\u4ece\u800c\u786e\u8ba4IP\u5206\u914d\u3002\n\u8fd9\u91cc\u7684DHCP\u8fd8\u5305\u62ec\u5927\u91cf\u7f16\u53f7\u9009\u9879\u5f62\u5f0f\u7684\u6570\u636e\uff0c\u4f46\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u7684\u503c\uff1a\n\u8fd8\u53ef\u4ee5\u53d1\u9001\u4e00\u4e9b\u989d\u5916\u7684\u503c\uff0c\u6bd4\u5982\u9ed8\u8ba4\u7684MTU(\u9009\u987926)\u3002\u6709254\u4e2a\u6709\u6548\u9009\u9879\uff0c0x00\u662f\u586b\u5145\uff0c0xff\u662f\u6d88\u606f\u7684\u7ed3\u5c3e\u3002\n\u5728\u77ed\u77ed\u56db\u4e2aUDP\u6d88\u606f\u4e2d\uff0c\u4e00\u53f0\u4e3b\u673a\u53ea\u9700\u5f00\u673a\u5c31\u53ef\u4ee5\u83b7\u5f97\u5b83\u53ef\u80fd\u9700\u8981\u7684\u51e0\u4e4e\u6bcf\u4e00\u4f4d\u4fe1\u606f\u3002\nDHCPv6\u2026\u3002\u4e0d\u662f\u5f88\u591a\u3002\u534f\u8bae\u4e00\u5206\u4e3a\u4e8c\uff0c\u8ba9\u6211\u4eec\u5148\u6765\u770b\u770bDHCPv6\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u56db\u6b65\u8fc7\u7a0b\uff1a\n\u5ba2\u6237\u7aef\u4ece\u5176\u672c\u5730\u94fe\u8def\u5411\u201cAll DHCP\u201d\u7ec4\u64ad\u5730\u5740ff02\uff1a\uff1a1\uff1a2\u53d1\u9001\u8bf7\u6c42\u3002\n\u4e00\u4e9b\u8fc7\u65f6\u7684\u9009\u9879\uff0c\u6bd4\u5982WINS\u670d\u52a1\u5668\u88ab\u79fb\u9664\u4e86\uff0c\u4f46\u662f\u4f60\u4f1a\u6ce8\u610f\u5230\u4e00\u4e9b\u4e1c\u897f\u5b8c\u5168\u4e22\u5931\u4e86\uff0c\u6bd4\u5982\u7f51\u7edc\u7f51\u5173\u3002\u540c\u6837\uff0cDHCP\u670d\u52a1\u5668\u53ea\u63d0\u4f9b\u5730\u5740\u7684\u672c\u5730\u90e8\u5206\uff0c\u5b83\u751a\u81f3\u4e0d\u63d0\u4f9b\u7f51\u7edc\u524d\u7f00\u3002\u4f46\u662f\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u4e1c\u897f\uff1aDHCP(V4)\u4f7f\u7528\u5ba2\u6237\u7aef\u7684MAC\u5730\u5740\u4f5c\u4e3a\u5b83\u7684\u6807\u8bc6\u7b26\uff0cIP\u88ab\u79df\u7ed9\u7279\u5b9a\u7684MAC\u3002DHCPv6\u4f7f\u7528\u4e00\u4e2aDHCP\u552f\u4e00\u6807\u8bc6\u7b26(DUID)\uff0c\u901a\u5e38\u662fMAC\u5730\u5740\uff0c\u8fd8\u6709\u5176\u4ed6\u4e1c\u897f\u3002DUID(Duid)\uff0c\u901a\u5e38\u662fMAC\u5730\u5740\u3002\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\uff1aDHCP(V4)\u4f7f\u7528\u5ba2\u6237\u7aef\u7684MAC\u5730\u5740\u4f5c\u4e3a\u5b83\u7684\u6807\u8bc6\u7b26\uff0cIP\u88ab\u79df\u7ed9\u7279\u5b9a\u7684MAC\u3002DHCPv6\u4f7f\u7528\u4e00\u4e2aDHCP\u552f\u4e00\u6807\u8bc6\u7b26(DUID)\uff0c\u901a\u5e38\u662fMAC\u5730\u5740\uff0c\u8fd8\u6709\u5176\u4ed6\u4e1c\u897f\u3002\u57fa\u4e8eUUID\u3002IP\u79df\u7ed9DUID\u800c\u4e0d\u662fMac\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\u5f88\u96be\u63d0\u524d\u9884\u8ba2\u3002\u6700\u7b80\u5355\u7684\u505a\u6cd5\u662f\u7b49\u5f85\u5ba2\u6237\u7aef\u83b7\u5f97\u79df\u7ea6\uff0c\u7136\u540e\u5c06\u5176\u5347\u7ea7\u4e3a\u9759\u6001\u5206\u914d\u3002\u54e6\uff0c\u5f53\u7136\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2aMAC+Time DUID\u7684\u793a\u4f8b\uff1a00-01-00-01-18-BA-30-56-D8-9D-67-C9-FA-33\u3002\u60a8\u6ce8\u610f\u5230\u8fd9\u91cc\u7684\u6a21\u5f0f\u4e86\u5417\u3002\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u521b\u9020\u4e86\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\uff0c\u8fd9\u662f\u6211\u5728\u8ba1\u7b97\u548c\u7f51\u7edc\u9886\u57df\u770b\u5230\u7684\u6700\u5177\u8bbd\u523a\u610f\u5473\u7684\u8f6c\u6298\u4e4b\u4e00\u3002\n\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u4e0d\u4f1a\u53d1\u751f\u3002\u53ea\u6709\u5728SLAAC/RA\u5141\u8bb8\u7684\u60c5\u51b5\u4e0b\u624d\u4f1a\u4f7f\u7528DHCP\u3002\u867d\u7136\u6211\u9a6c\u4e0a\u5c31\u4f1a\u8bb2\u5230SLAAC\uff0c\u4f46\u8ba9\u6211\u4eec\u6765\u8c08\u8c08\u90bb\u5c45\u53d1\u73b0\u534f\u8bae\u548c\u8def\u7531\u5668\u901a\u544a\u3002\n\u5f53\u4e00\u53f0\u652f\u6301IPv6\u7684\u4e3b\u673a\u52a0\u5165\u7f51\u7edc\u65f6\uff0c\u5b83\u5c06\u53d1\u9001\u8def\u7531\u5668\u8bf7\u6c42(\u55ef\uff0c\u6211\u5728\u8fd9\u91cc\u51e0\u6b21\u770b\u5230\u201cSolicate\u201d\u4f5c\u4e3a\u52a8\u8bcd\uff0c\u6211\u60f3\u6211\u627e\u5230\u4e86\u6bcf\u4e2a\u4eba\u6700\u559c\u6b22\u7684\u65b0\u5355\u8bcd)\u3002\u53ef\u8f6c\u53d1\u5e27\u7684\u53ef\u7528\u7684IPv6\u7f51\u5173\u5c06\u5b9a\u671f\u53d1\u9001\u8def\u7531\u5668\u901a\u544a\u6d88\u606f\uff0c\u6216\u8005\uff0c\u5982\u679c\u5b83\u4eec\u770b\u5230\u8bf7\u6c42\uff0c\u5c06\u7acb\u5373\u53d1\u51fa\u5e7f\u544a\u3002\n\u901a\u544a\u5305\u542bM\u548cO\u6807\u5fd7(\u7b49\u5f85)\u3001\u6700\u591a\u4e09\u4e2aDNS\u670d\u52a1\u5668\u3001\u4e00\u4e2a\u641c\u7d22\u5217\u8868(\u4e0eDHCP\u76f8\u540c)\u548c\u7f51\u7edc\u524d\u7f00\u3002\u901a\u544a\u5305\u542bM\u548cO\u6807\u5fd7(\u7b49\u5f85)\u3001\u6700\u591a\u4e09\u4e2aDNS\u670d\u52a1\u5668\u3001\u641c\u7d22\u5217\u8868(\u4e0eDHCP\u76f8\u540c)\u548c\u7f51\u7edc\u524d\u7f00\u3002\u901a\u544a\u8fd8\u5305\u542b\u8be5\u7279\u5b9a\u8def\u7531\u5668\u7684\u4f18\u5148\u7ea7(\u4f4e\u3001\u6b63\u5e38\u6216\u9ad8)\u4e4b\u4e00\u3002\u4e3a\u4ec0\u4e48\u53ea\u6709\u4e09\u4e2a\uff1f\u95ee\u5012\u6211\u4e86\u3002\u4e0d\uff0c\u5728\u540c\u4e00\u4f18\u5148\u7ea7\u4e0a\u6709\u591a\u4e2a\u8def\u7531\u5668\u901a\u5e38\u4e0d\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u3002\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u4e0a\u6709\u4e09\u4e2a\u4ee5\u4e0a\u7684\u7f51\u5173(\u56e0\u4e3a\u8fd9\u662f\u4f60\u73b0\u5728\u53ef\u4ee5\u505a\u7684\u4e8b\u60c5)\uff0c\u90a3\u5c31\u73a9\u5f97\u5f00\u5fc3\u3002\u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u6258\u7ba1\u7684\u548c\u5176\u4ed6\u6709\u72b6\u6001\u7684\u6807\u5fd7\u53ef\u4ee5\u66f4\u6df1\u5165\u5730\u63a7\u5236\u4e3b\u673a\u7684\u884c\u4e3a\u3002\u8fd8\u6709\u66f4\u591a\u5173\u4e8e\u524d\u7f00dat\u7684\u6807\u5fd7\u3002\n.", "note_en": "So this is just going to be a total rant.IPv6 is, in theory, a solution to many things, including the dwindling IPv4 address space.IPv6 was a draft in 1997(!), and became a real  Internet Standard in 2017.And, quite frankly, it\u2019s one of those things that just adds too much hassle for not enough benefit.\n  Okay, yes, IPv6\u2019s address space is   massive.IPv4 uses 32-bit addresses, allowing for 4,294,967,296 total addresses.IPv6 uses 128-bit addresses, meaning\u2026 340,282,366,920,938,463,463,374,607,431,768,211,456 addresses.  1The entire v4 space could fit into the v6 space $7.922816251426434 \\times 10^{28}$ times over.  2The default allocation to people, a  /64, meaning the first half of the addresses is fixed and the entire second half is the part unique to the network, means that most people have 18,446,744,073,709,551,616 addresses to play with at home.  3Compared to v4, where  most networks are around  /24, meaning the first three groupings are fixed, you get\u2026 254 addresses.Again, context, a standard  /64 allocation can,  again, fit the entire v4 address space inside itself 4,294,967,296 times. (Yes, that\u2019s the number of addresses  in the IPv4 address space. That\u2019s what happens when you divide a power by half of that power.)\n IPv4 addresses are, well, sparse, given that most high-level authorities have already run out of addresses, but because CIDR and NAT are a thing, we\u2019ve really started compacting down our usage. My entire house of easily over 60 IPs takes up\u2026 2, according to the rest of the world.\n  One thing that people have criticized IPv4 for is that the allocations are just horrible.For example,  anything starting with  127 is  localhost.normally this is  127.0.0.1, but anything from  127.0.0.0 to  127.255.255.255 all mean the  exact same thing.That\u2019s 16,777,216 addresses all  literally for  localhost.By numbers, 0.39% of the address space, but just keep this in mind.\n Similarly, anything starting with a  0, is effectively \u201ccurrent network\u201d (only valid as source), again, another 16 million addresses.\n There\u2019s also multiple blocks for private networks,  10.0.0.0/8,  172.16.0.0/12, and  192.168.0.0/16.In total, 17,891,328 addresses.\n Compared to IPv6, yes, IPv6 is much better\u2026 in theory.There\u2019s only  one loopback address,  ::1.At the same time\u2026  fc00::/7 (26,58,455,991,569,831,745,807,614,120,560,689,152 addresses) is the private address space (more on that later),  fe80::/10 (332,306,998,946,228,968,225,951,765,070,086,144 addresses) is the  local address space, and  ff00::/8 (1,329,227,995,784,915,872,903,807,060,280,344,576 addresses.) is multicast.yes, do you see a recurring pattern?Even though the entire \u201cspecial\u201d address assignments are exactly 1.271% of the entire IPv6 address space, we\u2019re still allocating  giant swathes of addresses.History repeats itself, you can see that  right here.\n And I will admit, that multicast in IPv6 is special since some bits in the address are special flags, and one form of multicast actually includes a response node\u2019s address, so it\u2019s not  just an arbitrary number, but\u2026 come on, that\u2019s a little uncalled for, having  that much space.\n  We all know what an IPv4 address looks like, right?Four dotted-decimal grouping in the range from 0\u2013255.For example,  192.168.5.225.IPv6 uses  eight groupings of four  hex digits, colon-separated.For example,  2607:f0d0:1002:0051:0000:0000:0000:0004.That\u2019s\u2026 very unweildy, so we have a few shortening rules.Any zeros that  lead the droup can be dropped, giving us this:  2607:f0d0:1002:51:0:0:0:4.And since  that is still repetitive, you can replace  exactly one sequence of  more than one group of all zeros with an empty:  2607:f0d0:1002:51::4.For the record this is why the loopback address is  ::1.The full address is  0000:0000:0000:0000:0000:0000:0000:0001.Even with those methods, they\u2019re still  much longer, harder to remember, and harder to even say than IPv4 addresses.\n  And remember that this address violates the URL spec, since the  : character is specifically to be used to separate the  host portion (e.g.,  google.com) from the  port to connect to (assuming nonstandard).As an example, I can reach my torrent client via  http://192.168.5.43:9091.See that  : there?Because Transmission listens on port 9091, not port 80.How do we fix this?Well, by breaking it again, naturally.To connect to a raw IPv6 address, you wrap it in square brackets.To connect to  2607:f0d0:1002:51::4 directly, that\u2019s  http://[2607:f0d0:1002:51::4]/ Why is this a thing?!.\n  okay, admittedly, IPv6 kinda relies on DNS since\u2026 just about everything uses DNS, and of course, actual names are more memorable than 32 hexadecimal digits, but DNS isn\u2019t magic.Unless you have your own DNS server (actually not that hard) that\u2019s configured, you\u2019re still manually typing addresses.Of course if you have, say, pfSense managing your network, every static DHCP lease will be registered in DNS, but it has to take a DHCP lease.And if this device doesn\u2019t\u2026 well, I hope you don\u2019t mind typing that out by hand to connect so you can configure it.\n Even better, rDNS.rDNS, or Reverse DNS, is where a DNS query is performed  with an IP address that returns the hostname associated, in a  PTR record.For example, the IPv4 that  google.com resolves to,  216.58.192.142, can be queried as  142.192.58.216.in-addr.arpa to get it\u2019s \u201creal\u201d name, a  PTR record for  ord36s01-in-f142.1e100.net.With  dig, specifying a  -x and then the IP will convert it to the correct format.And if you look close, the query name is the IP, backwards, with  in-addr.arpa at the front.It\u2019s backwards because of the hierarchical nature of DNS, which runs right to left, the opposite of IPs.Of course, there\u2019s also rDNS for IPv6:\n $ dig -x 2607:f0d0:1002:51::4; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1.12-Ubuntu &lt;&lt;&gt;&gt; -x 2607:f0d0:1002:51::4;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 22821;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1;; OPT PSEUDOSECTION:; EDNS: version: 0, flags:; udp: 65494;; QUESTION SECTION:;4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.5.0.0.2.0.0.1.0.d.0.f.7.0.6.2.ip6.arpa. IN PTR;; ANSWER SECTION:4.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.1.5.0.0.2.0.0.1.0.d.0.f.7.0.6.2.ip6.arpa. 3600 IN PTR 4000.0000.0000.0000.1500.2001.0d0f.7062.ip6.static.sl-reverse.com.;; Query time: 731 msec;; SERVER: 127.0.0.53#53(127.0.0.53);; WHEN: Sun Aug 30 00:52:50 EDT 2020;; MSG SIZE rcvd: 180\n That is   insane.The IPv6 rDNS  TLDis just  ip6.arpa, and the IP part is\u2026every single hex digit, reversed.\n   One of the core pillars of IPv6 is that most of the processing of traffic should happen at the endpoints \u2014 routers don\u2019t do much besides read, and forward, with very little actual data processing.The IPv6 header while being  gargantuan in comparison (because the giant addresses), is also much simpler.A fixed version code (6), the traffic class ( DiffServ+  ECN), a  flow label which is effectively a random value that\u2019s constant for every packet that\u2019s part of the same logical connection, length, type of next header, and a TTL (then addresses, obviously).That is  it.The IPv4 header contains 13 fields plus optional sections, and the IPv6 header contains a flat 8.Of course, you may actually need other details, and that\u2019s where the  next header field comes in.Instead of packing all sorts of options into the standard, global header, IPv6 uses additional header  extensions that can get tacked on one after another to provide that information, say for fragmentation or IPsec.  4The value in the next header field identifies what\u2019s going to come next, and the final header in the line will use this field to indicate the contained protocol, be it TCP, UDP, or something else.\n Also note there\u2019s no checksum anymore.I mean, just about every device uses Ethernet, which has a Frame Check Sequence (FCS), UDP has a checksum option, TCP has a required checksum\u2026If we want to simply packet processing, drop the sum.And really, it does make sense, in a way.Even without that one, that means that most programs have two checksums: the Ethernet FCS as the frame gets transmitted point to point, and the transport layer checksum, making sure the entire packet is still valid.Also, the IPv4 checksum also included the TTL (max number of hops in the path before the packet is dropped), meaning that at  every stop along the way, the checksum had to be recalculated.\n As a final point, this also does bring a change to another protocol: UDP.With IPv4, the UDP checksum field can (and often would) be left blank as all zeros, meaning \u201cno checksum\u201d.In IPv6, this is now disallowed, and a all zero checksum will still be checked\u2026 and then found invalid.All UDP packets over IPv6  must have a valid checksum calculated.\n  So every link between devices has an MTU, the Maximum Transmission Unit.For normal Ethernet links, minus the frame overhead, this is 1500 bytes.If your equipment supports jumbo frames, that\u2019s closer to 9000 bytes.Well not all links are equal.Some devices might have a high-MTU link on one end, and a lower MTU link on the other.For example, my router might support jumbo frames internally, but the WAN side doesn\u2019t allow that.To deal with, this, we have  fragmentation.\n If a router is unable to forward a frame due to MTU differences, it will, if allowed, split the packet into multiple chunks, using the More Fragments flag and the Fragment Offset field of the IPv4 header, and send the packet in multiple frames piece by piece, which the other end can reassemble.Note that I said \u201cif allowed.\u201dThere is a Don\u2019t Fragment flag in the IPv4 header, and if this is set by the sending device, a router that cannot support a packet of that size will send back an  ICMP\u201cpacket too big\u201d message which bounces back along the chain.Any node in the network path can perform this, meaning that for sending data, the only MTU you care about is the MTU of the device you\u2019re directly connected to; your own link.\n IPv6 does not allow this.Intermediate routers are  not allowed to fragment a packet, and instead will send back an ICMP error.If you\u2019re going to fragment a packet (which is also heavily discouraged), then the sending device can add a  Fragmentation header extension.So, either packets are not fragmented at all, or packets are fragmented from the originating device.IPv6 also expects senders to perform  Path MTU discovery, by actually listening to ICMP packet too big messages, which contains the MTU of that node.The sender is expected to read this, and then adjust accordingly, repeating this in a loop until the packet can pass just fine.Alternatively\u2026 don\u2019t exceed the IPv6 minimum MTU, 1280 bytes.\n  If you know me, you know I always say that computer networking is a miracle that only holds together by duct tape, prayers of engineers, and dumb luck.Nowhere does this hold true more than the introduction of IPv6 into a network, where just about everyone that I talk to has flat out disabled IPv6 on everything that gives them the option \u2014 it\u2019s just way too much headache to have to deal with it all, and if it\u2019s enabled, 90% of your new network problems become the fact that devices are now doing unexpected IPv6 things that you never thought of.\n but besides that point, if you want to run a network with IPv6, you\u2019re likely going to have to operate both 4 and 6 just because IPv4 is still going strong.So that means for every firewall rule that involves a specific host or network, you need two: one for the IPv4 block, and one for the IPv6 block.And heaven forbid if you change one and forget the other.\n  Does not exist.Generally when you get an IP address, that address will be globally routable \u2014 anyone can access it, from anywhere, Hollywood style.\n However, if you want a private network, there is  one prefix for that: anything from  fc00:0000:0000:0000:0000:0000:0000:0000 to  fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff ( fc00::/7) is considered non-routable for private networks. Technically the first bit here you\u2019re allowed to modify should  always be 1, meaning your  actually RFC compliant range is  fd00::/8, which is  fd00:0000:0000:0000:0000:0000:0000:0000 to  fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff.half the addresses, but still plenty.Yes, the actual spec is more complicated and defines a few parts in the \u201cnetwork\u201d area, but\u2026 well, you get the point.\n So here\u2019s the question: Say you\u2019ve done that.How do you route packets to these private IPs?The answer is Network  Address  Prefix Translation.Wait\u2026 what?\n Yes. NAT is an IPv4 thing. NPt is an IPv6 thing.With IPv4, you can scan for packets and, if they match certain criteria (say, going to a known address, like your WAN address, on a known port), swap the destination (or source) address with a new one.This is how I am using just  one IP for all my services: the destination port decides what server your request gets routed to.In this sense, all unknown traffic is dropped, and traffic that I have NAT rules for are also allowed pas the firewall.This is a \u201cdefault drop\u201d system.Nothing gets through unless I say so.\n  Say, for example, I have a host at the private address of  fd2c:a7c6:2aae:ef93::41.I could then add an NPt rule for to transform  fd2c:a7c6:2aae:ef93:: into  2607:f0d0:1002:51::.This is effectively a 1:1 mapping, meaning that it works both ways, both inbound and outbound will be translated.\n For this, I could then, say, advertise (with an  AAAA record, perhaps) the public IP of the server as  2607:f0d0:1002:51::41, and when the packet comes in\u2026\n  Which not  only means that I\u2019m exposing my  entire network, but I  need a different IP for every different destination, and, additionally, I\u2019m also giving away the internal structure of my network!You may not know the prefix but you\u2019ll know the  exact subnet address since I\u2019m   only translating a prefix!!!\n That \u201cdifferent IPs\u201d bit may sound a bit\u2026 duh, then remember that for some systems I run (like this blog, with NNTP), the  port number alone is what decides the destination, you could even still go to the  same domain name and it counts.With NPt, you  cannot do this, you\u2019d have to have an  additional device like a layer 7 proxy (like HAProxy) to take in everything and send it to the correct destination, meaning I need a dedicated host to do the thing that  IPv4 NAT  could already do natively!\n And  it gets better.Remember, this will  blindly just swap prefixes in and out.Gone are the days of \u201conly the traffic I explicitly create a rule for can get in\u201d.See, now, just adding that  one step will, be default, expose your  entire network!You now need firewall rules to block what you don\u2019t want and add explicit allows, this time manually as an additional step.This is more of a \u201cdefault pass\u201d routing \u2014 unless I tell you not to, let it through.Now, most firewalls do by default drop unknown traffic, but with NAT, if there\u2019s no NAT rule for something it literally has no clue where to route it even if it  is allowed through.With NPt, you don\u2019t have that layer of security, the firewall is the  only thing between the outside world, and your network.\n Really if you remember  one thing about IPv6, it\u2019s  this. right. here.And this  alone is the reason that for the time being I will  never start running IPv6 networks.\n But  I\u2019m not done yet.The entire practice is\u2026 just flat out discouraged.The pfSense manual even says that what I just said might also not work correctly, so,  nice, but also, the entire  point of IPv6 is that all nodes are globally routable, you don\u2019t  need special private address spaces or translation of any kind, it  just works.And if you want, hah,  privacy, that\u2019s what firewalls are for.It\u2019s\u2026 okay, seriously, it\u2019s like a group of people that have no clue how tech  should work were asked to design something that the tech-illiterate can actually understand and use fluently, and we have\u2026  this.Like, really now, was the IETF watching some cybercrime flicks as they wrote the RFC?Every computer just  by default accessible  anywhere in the world unless you  specifically firewall things?I get that even with IPv4 that\u2019s how things worked  until you set up a subnet boundary, but here, in v6, it\u2019s either a firewall or no protection.This whole \u201cend-to-end\u201d focus nature really feels poorly thought out, from a techie perspective.And, as data shows, the kind of devices that  do actively use IPv6 (mobile devices, mainly), are able to just zeroconf themselves perfectly, which is nice from a \u201cjust works\u201d perspective, but like many things recently, the \u201cwell it needs to work seamlessly\u201d side  seriously clashes with the \u201cactual useful functionality\u201d side.\n   Client sends out a  DHCPDISCOVER packet from a source of  0.0.0.0 to the broadcast address\n Server sends a  DHCPOFFER to broadcast IP (but destination MAC) with the offered client IP, subnet mask, DNS servers, lease time, and other information\n  Server sends a  DHCPACK with the same information in the offer, thus confirming the IP assignment\n DHCP here also includes a lot of data in the form of numbered options, but here\u2019s some common values:\n  Some additional values like the default MTU (option 26) can also be sent.There\u2019s 254 valid options, as  0x00 is padding and  0xff marks the end of the message.\n In just four UDP messages, a host just powering on can gain just about  every bit of information that it may need.\n DHCPv6\u2026 not so much.The protocol  is split in two, and let\u2019s go over DHCPv6 first.This is, again, a four step process:\n Client sends a  SOLICIT from its link-local to the \u201cAll DHCP\u201d multicast address,  ff02::1:2\n   Some obsolete options like WINS servers are removed, but you\u2019ll notice some things like the  network gateway are completely missing.Also the DHCP server just provides the local part of the address, it doesn\u2019t even give out the network prefix.But before we get into  that, here\u2019s something fun:DHCP(v4) uses the MAC address of the client as it\u2019s identifier, IPs are leased to a particular MAC.DHCPv6 uses a DHCP Unique Identifier (DUID), which is  usually the MAC address, with other things.There\u2019s four types: one for the MAC + timestamp, a unique enterprise number based DUID, just the MAC, and a UUID based one.IPs are leased out to  DUIDs not  MACs, and so it\u2019s actually  really difficult to make reservations ahead of time.The easiest course of action is to wait for the client to grab a lease, then upgrade that to a static assignment.Oh, and yes, of course, here\u2019s an example MAC + time DUID:  00-01-00-01-18-BA-30-56-D8-9D-67-C9-FA-33.Are you noticing a pattern here with IPv6?Everything is just getting long, unwieldy, and, in my opinion, creates needless complexity  in the interest of simplicity in one of the most ironic twists I\u2019ve seen in computing and networking.\n Also note that  this also doesn\u2019t happen by default either.DHCP will only be used  if SLAAC / RA permits.And while I\u2019ll get to SLAAC in a second, let\u2019s talk about the Neighbor DIscovery Protocol, and Router Advertisements.\n  When an IPv6 capable host joins a network, it will send out  Router Solicitation (hmm, I\u2019m seeing \u201csolicit\u201d as a verb here a few times, I think I found everyone\u2019s new favorite word) message.Available IPv6 gateways that can forward frames will periodically send out  Router Advertisement messages, or, if they see a solicitation, will immediately send out an advert.\n The advertisements contain the M and O flags (hold on), a lifetime for which the advert should be considered valid, up to three DNS servers, a search list (same as DHCP), and the network prefix.The advert also contains a priority, one of low, normal, or high, for that particular router.Why only three? Beats me.And no, it\u2019s  not usually a giid idea to have more than one router on the same priority level.If you have more than three gateways on a network (because  of course thats a thing you can do now), have fun.Anyways, the Managed and \u201cOther stateful\u201d flags control the behavior of hosts a bit more in-depth.There\u2019s even  more flags concerning the prefix dat\n......", "posttime": "2020-11-05 20:09:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f7b\u5934\u5f7b\u5c3e,total,\u5730\u5740", "title": "IPv6\u662f\u4e00\u573a\u5f7b\u5934\u5f7b\u5c3e\u7684\u5669\u68a6--\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48", "title_en": "IPv6 Is a Total Nightmare \u2013 This Is Why", "transed": 1, "url": "https://teknikaldomain.me/post/ipv6-is-a-total-nightmare/", "via": "", "real_tags": ["\u5f7b\u5934\u5f7b\u5c3e", "total", "\u5730\u5740"]}, {"category": "", "categoryclass": "", "imagename": "de56332b89439e9e99de10ee9e16a6db.png", "infoid": 1033279, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Compose for Desktop\u7b80\u5316\u5e76\u52a0\u901f\u4e86\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\u5f00\u53d1\uff0c\u5e76\u5141\u8bb8\u5728Android\u548c\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u5e7f\u6cdb\u7684\u7528\u6237\u754c\u9762\u4ee3\u7801\u5171\u4eab\u3002\u76ee\u524d\u5728\u963f\u5c14\u6cd5\u3002\n\u5173\u4e8eGitHub\u7684\u63a2\u7d22\u3002\nCompose for Desktop\u7b80\u5316\u5e76\u52a0\u901f\u4e86\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u7684\u7528\u6237\u754c\u9762\u5f00\u53d1\uff0c\u5e76\u5141\u8bb8\u5728Android\u548c\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u8fdb\u884c\u5e7f\u6cdb\u7684\u7528\u6237\u754c\u9762\u4ee3\u7801\u5171\u4eab\u3002\u76ee\u524d\u5728\u963f\u5c14\u6cd5\u3002\n\u5173\u4e8eGitHub\u7684\u63a2\u7d22\u3002\nCompose for Desktop\u4e3a\u4f7f\u7528Kotlin\u521b\u5efa\u7528\u6237\u754c\u9762\u63d0\u4f9b\u4e86\u4e00\u79cd\u58f0\u660e\u6027\u548c\u53cd\u5e94\u6027\u65b9\u6cd5\u3002\u7ec4\u5408\u53ef\u7ec4\u5408\u7684\u529f\u80fd\u6765\u6784\u5efa\u60a8\u7684\u7528\u6237\u754c\u9762\uff0c\u5e76\u4eab\u53d7\u6765\u81ea\u60a8\u7684IDE\u548c\u6784\u5efa\u7cfb\u7edf\u7684\u5b8c\u6574\u5de5\u5177\u652f\u6301-\u4e0d\u9700\u8981XML\u6216\u6a21\u677f\u8bed\u8a00\u3002\nCompose for Desktop\u4ee5JVM\u4e3a\u76ee\u6807\uff0c\u901a\u8fc7\u5229\u7528\u5f3a\u5927\u7684\u539f\u751fSkia\u56fe\u5f62\u5e93\uff0c\u5728\u6240\u6709\u4e3b\u8981\u684c\u9762\u5e73\u53f0(MacOS\u3001Windows\u548cLinux/x64)\u4e0a\u652f\u6301\u9ad8\u6027\u80fd\u3001\u786c\u4ef6\u52a0\u901f\u7684\u7528\u6237\u754c\u9762\u6e32\u67d3\u3002\n\u8bf7\u9605\u8bfb\u6211\u4eec\u7684\u6559\u7a0b\uff0c\u4e86\u89e3Compose for Desktop\u5fc5\u987b\u63d0\u4f9b\u7684\u529f\u80fd\u3002\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528Compose for Desktop\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u684c\u9762\u7528\u6237\u754c\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\n\u67e5\u770b\u6559\u7a0b\u3002\n\u4f7f\u7528Compose for Desktop\u548cAndroid\u663e\u793a\u6765\u81ea\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u56fe\u50cf\u7684\u56fe\u7247\u5e93\u793a\u4f8b\u3002\n\u6d4f\u89c8\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8bf7\u6ce8\u610f\uff0cCompose for Desktop\u76ee\u524d\u5904\u4e8e\u65e9\u671f\u7684Alpha\u5f00\u53d1\u9636\u6bb5\uff0c\u53ef\u80fd\u4e0d\u9002\u5408\u751f\u4ea7\u5e94\u7528\u7a0b\u5e8f\u3002\n\u8fd9\u4e2a\u8de8\u5e73\u53f0\u7684\u6587\u4ef6\u67e5\u770b\u5668\u5e94\u7528\u7a0b\u5e8f\u662f\u7528Compose for Desktop\u5f00\u53d1\u7684\u3002\u5b83\u663e\u793a\u4e86\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u5927\u591a\u6570\u5143\u7d20\uff1a", "note_en": "Compose for Desktop simplifies and accelerates UI development for desktop applications, and allows extensive UI code sharing between Android and desktop applications. Currently in alpha.\n Explore on GitHub\n Compose for Desktop simplifies and accelerates UI development for desktop applications, and allows extensive UI code sharing between Android and desktop applications. Currently in alpha.\n Explore on GitHub\n Compose for Desktop provides a declarative and reactive approach to creating user interfaces with Kotlin. Combine composable functions to build your user interface, and enjoy full tooling support from your IDE and build system \u2013 no XML or templating language required.\n Compose for Desktop targets the JVM, and supports high-performance, hardware-accelerated UI rendering on all major desktop platforms (macOS, Windows, and Linux/x64) by leveraging the powerful native  Skia graphics library.\n  Work through our tutorials to learn about the features Compose for Desktop has to offer.\n In this tutorial we will see how to create a simple desktop UI application using Compose for Desktop.\n View tutorial\n An example of an image gallery showing images from a remote server, using Compose for Desktop and Android.\n Explore app\n Please note that Compose for Desktop is currently in early alpha development stage and may not be fit for production applications.\n This cross-platform file viewer application is developed with Compose for Desktop. It manifests most elements typically found in a desktop application:", "posttime": "2020-11-05 20:07:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "jetbrains,\u7528\u6237\u754c\u9762", "title": "JetBrains\u8c31\u66f2", "title_en": "JetBrains Compose", "transed": 1, "url": "https://www.jetbrains.com/lp/compose/", "via": "", "real_tags": ["jetbrains", "\u7528\u6237\u754c\u9762"]}, {"category": "", "categoryclass": "", "imagename": "2516de75fadea703902389a6a1656c2c.jpeg", "infoid": 1033278, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662fKotlin\u8bbf\u8c08\u7684\u7b2c\u56db\u90e8\u5206\uff0c\u6211\u5728\u8fd9\u4e2a\u7cfb\u5217\u4e2d\u56de\u987e\u4e86Kotlin\u51fd\u6570\u548c\u4ee3\u7801\u7247\u6bb5\uff0c\u8fd9\u4e9b\u90fd\u662f\u6211\u5728\u51c6\u5907Android\u9762\u8bd5\u65f6\u7ecf\u5e38\u51fa\u73b0\u7684\u3002\u6211\u8fd8\u7f16\u5199\u4e86\u4e00\u4efd\u5c0f\u6284\uff0c\u6db5\u76d6\u4e86\u672c\u7cfb\u5217\u7684\u5168\u90e85\u4e2a\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u8bb8\u591a\u9762\u8bd5\u95ee\u9898\u90fd\u9700\u8981\u67d0\u79cd\u8fed\u4ee3\uff0c\u65e0\u8bba\u662f\u64cd\u4f5c\u8f93\u5165\u6570\u7ec4\u8fd8\u662f\u4f7f\u7528\u6620\u5c04\u6765\u5b58\u50a8\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u5e38\u89c1\u6570\u636e\u7ed3\u6784\u7684\u4e0d\u540c\u8fed\u4ee3\u65b9\u5f0f\u3002\nKotlin\u4e2d\u7684\u8303\u56f4\u662f\u7531\u8d77\u59cb\u503c\u3001\u7ec8\u6b62\u503c\u548c\u6b65\u957f\u5b9a\u4e49\u7684\u4e00\u7cfb\u5217\u503c\u3002\u6b65\u957f(\u5373\u4e24\u4e2a\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb)\u7684\u7f3a\u7701\u503c\u4e3a1\u3002\u60a8\u6700\u5e38\u9047\u5230\u7684\u6b65\u957f\u662fIntRange\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528long grange\u548cCharRange\u3002\nForEach()\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u6267\u884c\u7ed9\u5b9a\u7684\u64cd\u4f5c\u3002\u8fd9\u662f\u6211\u5728\u666e\u901a\u9879\u76ee\u4e2d\u6700\u5e38\u7528\u7684\u8fed\u4ee3\u65b9\u6cd5\uff0c\u4f46\u5728\u8bbf\u8c08\u4e2d\u4f7f\u7528\u7684\u9891\u7387\u4e0d\u9ad8\uff0c\u56e0\u4e3a1)\u5982\u679c\u5728\u8fed\u4ee3\u8bbf\u95ee\u96c6\u5408\u65f6\u8bd5\u56fe\u4fee\u6539\u96c6\u5408\uff0cforEach()\u5c06\u629b\u51faConcurrentModificationException\u5f02\u5e38\uff1b2)\u5f88\u591a\u9762\u8bd5\u95ee\u9898\u4e5f\u9700\u8981\u8003\u8651\u7d22\u5f15\u3002\nForEachIndexed()\u4e0eforEach()\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u60a8\u8fd8\u53ef\u4ee5\u8bbf\u95eelambda\u4e2d\u7684\u5143\u7d20\u7d22\u5f15\uff0c\u8fd9\u662f\u9762\u8bd5\u95ee\u9898\u4e2d\u7ecf\u5e38\u9700\u8981\u7684\u3002\n//\u4ee5\u5076\u6570\u7d22\u5f15\u6253\u5370\u5143\u7d20\u3002List.forEachIndexed{index\uff0cElement-&gt\uff1bif(index%2==0)println(&#34\uff1b$Element&#34\uff1b)}\u3002\n..\uff0c\u4e5f\u79f0\u4e3arangeTo()\uff0c\u53ef\u4ee5\u4ee5for(a..b\u4e2d\u7684i)\u7684\u5f62\u5f0f\u4f7f\u7528\u6765\u521b\u5efa\u7136\u540e\u8fed\u4ee3\u8303\u56f4\u3002\u8be5\u8303\u56f4\u5c06\u5305\u62ecstart(A)\u548cend(B)\u5143\u7d20\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u5e0c\u671b\u4f7f\u7528\u5b83\u6765\u8fed\u4ee3\u5217\u8868/\u6570\u7ec4\uff0c\u5219\u5e94\u8be5\u5c06\u5176\u5199\u4e3afor(i in 0..list.size-1)\u6216\u4f7f\u7528Until\u3002\u5c3d\u7ba1\u5b83\u6700\u5e38\u4e0eInt\u4e00\u8d77\u4f7f\u7528\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u8fed\u4ee3\u5b57\u7b26\u3002\n//\u4ecei=0\u5230i=100\u8fed\u4ee3\u6253\u5370(i in 0..100){println(I)}//\u4ecei=0\u8fed\u4ee3\u5230i=list.size-1 for(i in 0..list.size-1){println(list[i])}//\u8fed\u4ee3\u5e76\u6253\u5370&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b\uff0c&#39\uff1bd&#39\uff1bfor(i in&#39\uff1bd&#39\uff1bfor(i in&#\u3002..){println(I)}\nDownTo()\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e0e..\u7c7b\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6bcf\u6b21\u8fed\u4ee3\u90fd\u5411\u4e0b\u4e00\u6b65\u800c\u4e0d\u662f\u5411\u4e0a\u4e00\u6b65\u3002\n//\u4ecei=100\u5230i=0\u8fed\u4ee3\u6253\u5370(i in 100\u5411\u4e0b\u52300){println(I)}\u3002\n//(i in 1..8 step 2){println(I)}\u8fed\u4ee3\u6253\u53701\uff0c3\uff0c5\uff0c7 for(I In 8 Down To 1 Step 3){println(I)}\u3002\nUntil()\u5305\u62ec\u5f00\u59cb\u5143\u7d20\uff0c\u4f46\u4e0d\u5305\u62ec\u7ed3\u675f\u5143\u7d20\u3002\u8fd9\u662f\u6211\u9996\u9009\u7684\u904d\u5386\u96c6\u5408\u7d22\u5f15\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5982\u679c\u4f7f\u7528\u5217\u8868\u7684\u5927\u5c0f\u4f5c\u4e3a\u7ed3\u5c3e\uff0c\u5c31\u4e0d\u5fc5\u62c5\u5fc3\u7d22\u5f15\u8d85\u51fa\u754c\u9650\u3002\n//\u4ecei=0\u5230i=99\u8fed\u4ee3\u6253\u5370(i in 0\u5230100){println(I)}//\u8fed\u4ee3\u5e76\u6253\u5370\u5143\u7d20\u4ecei=0\u5230i=list.size-1 for(i in 0\u5230list.size){println(list[i])}\u3002\nINDEX\u8fd4\u56de\u8868\u793a\u96c6\u5408\u7684\u6709\u6548\u7d22\u5f15\u7684IntRange\uff0c\u5176\u4f7f\u7528\u65b9\u6cd5\u4e0eUntil()\u7c7b\u4f3c\u3002\nVal list=listof(&#39\uff1ba&#39\uff1b\uff0c&#39\uff1bb&#39\uff1b\uff0c&#39\uff1bc&#39\uff1b)println(list.index)//\u6253\u53700..2//\u8fed\u4ee3\u5e76\u6253\u5370(i in list.index){println(List[i])}\u4e2di=0\u5230i=2\u7684\u5143\u7d20\u3002\n\u8fd9\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u5728\u9762\u8bd5\u95ee\u9898\u4e2d\u5374\u7ecf\u5e38\u51fa\u73b0--\u7f51\u683c\u3001\u8ff7\u5bab\u3001\u56fe\u8868\u7b49\u7b49\u90fd\u53ef\u4ee5\u75282D\u6570\u7ec4\u6765\u8868\u793a\u3002\n\u4ee5\u4e0b\u662f\u6211\u4f7f\u7528Until\u8fed\u4ee3\u4e8c\u7ef4\u6570\u7ec4\u6216\u5217\u8868\u7684\u9996\u9009\u65b9\u6cd5\uff1a\nIf(grid.isEmpty())return for(i in 0 to grid.size){for(j in 0 in 0 to grid[0].size){println(grid[i][j])}}\u3002\nIf(grid.isEmpty())return for(i in grid.index){for(j in 0\uff0c\u76f4\u81f3Grid[0].size){println(grid[i][j])}}\u3002\n\u5730\u56fe\u5728\u9762\u8bd5\u95ee\u9898\u4e2d\u4e5f\u5f88\u5e38\u89c1\uff0c\u7279\u522b\u662f\u5f53\u5217\u8868\u4e0d\u591f\u65f6\uff0c\u5730\u56fe\u662f\u5b58\u50a8\u4fe1\u606f\u7684\u597d\u65b9\u6cd5\u3002\n\u5982\u679c\u9700\u8981\u904d\u5386\u952e-\u503c\u5bf9\uff0c\u53ef\u4ee5\u4f7f\u7528for\u5faa\u73af\u6216forEach\u5faa\u73af\u3002\u8fd9\u53d6\u51b3\u4e8e\u4e2a\u4eba\u559c\u597d\u3002\n//\u4f7f\u7528for\u5faa\u73affor((key\uff0cvalue)in map){println(&#34\uff1b$key=$value&#34\uff1b)}//\u4f7f\u7528forEach()map.forEach{(key\uff0cvalue)-&gt\uff1bprintln(&#34\uff1b$key=$value&#34\uff1b)}\u8fed\u4ee3\u6761\u76ee\u3002\n\u5982\u679c\u53ea\u9700\u8981\u904d\u5386\u8fd9\u4e9b\u952e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u952eval\u6765\u83b7\u53d6\u6620\u5c04\u4e2d\u7684\u4e00\u7ec4\u6240\u6709\u952e\uff0c\u5e76\u904d\u5386\u8fd9\u4e9b\u952e\u3002\n\u540c\u6837\uff0c\u5982\u679c\u53ea\u9700\u8981\u904d\u5386\u8fd9\u4e9b\u503c\uff0c\u503cval\u5c06\u8fd4\u56de\u4e00\u7ec4\u6620\u5c04\u4e2d\u7684\u6240\u6709\u503c\u3002\n\u5f53\u60a8\u5e0c\u671b\u6839\u636e\u5143\u7d20\u7684\u4f18\u5148\u7ea7\u5904\u7406\u5143\u7d20\u65f6\uff0cPriorityQueue\u975e\u5e38\u6709\u7528\u3002\u5b83\u4eec\u7ecf\u5e38\u7528\u5728\u8981\u6c42\u7b2cK\u4e2a\u6700\u5927\u503c\u3001\u7b2cK\u4e2a\u6700\u5c0f\u503c\u3001\u6700\u5927K\u4e2a\u9891\u7387\u7b49\u9762\u8bd5\u95ee\u9898\u4e2d\u3002\u6211\u5728\u7b2c1\u90e8\u5206\u4e2d\u66f4\u8be6\u7ec6\u5730\u8ba8\u8bba\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u4f46\u8fd9\u91cc\u63d0\u9192\u60a8\u8fed\u4ee3\u904d\u5386\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\nVal pq=PriorityQueue&lt\uff1bInt&gt\uff1b(listof(2\uff0c1\uff0c3))//pq\u5c06\u57283\u6b21\u8fed\u4ee3\u540e\u4e3a\u7a7a\uff0c\u800c(pq.isNotEmpty()){println(pq.pol())//\u6253\u53701\uff0c\u7136\u540e\u6253\u53702\uff0c\u7136\u540e\u6253\u53703}\u3002\n\u7b2c4\u90e8\u5206\u5230\u6b64\u4e3a\u6b62\uff01\u8fd9\u91cc\u7684\u94fe\u63a5\u518d\u6b21\u6db5\u76d6\u4e86\u6240\u67095\u4e2a\u90e8\u5206\u7684\u5c0f\u6284\u3002", "note_en": "This is Part 4 of Kotlin for Interviews, a series where I go over Kotlin functions and code snippets that came up often during my Android interview prep. also compiled a cheatsheet that covers all 5 parts of this series, which you can find  here.\n    Many interview problems require some kind of iteration, be it manipulating an input array or using a map to store information, so I\u2019ll go over different ways of iterating over some common data structures.\n  A  Range in Kotlin is a sequence of values defined by a start value, an end value, and a step. The step, or distance between two values, has a default value of 1. The one you\u2019ll encounter the most often is  IntRange, but you can use  LongRange and  CharRange as well.\n  forEach() performs the given action on each element in the collection. This is the iteration method I use most often in normal projects, but didn\u2019t use as often in interviews because 1)  forEach() will throw a  ConcurrentModificationException if you try to modify the collection while iterating through it, and 2) a lot of interview problems require taking the index into account as well.\n forEachIndexed() is like  forEach(), except you also have access to the element\u2019s index inside the lambda, which you often need in interview problems.\n // Print elements at even indices.  list.forEachIndexed { index, element -&gt;   if (index % 2 == 0) println(&#34;$element&#34;) }\n .., aka  rangeTo(), can be used in the form of  for(i in a..b) to create then iterate through a  Range. The range would include both the start ( a) and end ( b) elements, so if you want to use it to iterate through a list/array, you should either write it as  for (i in 0..list.size-1) or use  until instead. Even though it\u2019s most often used with  Ints, you can iterate over  Chars as well.\n // Iterate and print from i = 0 to i = 100  for (i in 0..100) { println(i) }  // Iterate from i = 0 to i = list.size-1  for (i in 0..list.size-1) { println(list[i]) }  // Iterate and print &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;  for (i in &#39;a&#39;..&#39;d&#39;) { println(i) }\n downTo() works like  .., except each iteration goes down a step rather than up one.\n // Iterate and print from i = 100 to i = 0  for (i in 100 downTo 0) { println(i) }\n  // Iterate and print 1, 3, 5, 7  for (i in 1..8 step 2) { println(i) }  // Iterate and print 8, 5, 2  for (i in 8 downTo 1 step 3) { println(i) }\n until() includes the start element, but not the end element. It\u2019s my preferred way of iterating through a collection\u2019s indices, because if you use the list\u2019s size as the end you don\u2019t have to worry about indices being out of bounds.\n // Iterate and print from i = 0 to i = 99  for (i in 0 until 100) { println(i) }  // Iterate and print elements from i = 0 to i = list.size-1  for (i in 0 until list.size) { println(list[i]) }\n indices returns an  IntRange representing a collection\u2019s valid indices, and can be used similarly to  until().\n val list = listOf(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;) println(list.indices)  // Prints 0..2  // Iterate and print elements from i = 0 to i = 2  for (i in list.indices) { println(list[i]) }\n    This is something you don\u2019t see that often in real projects, but appears all the time in interview problems \u2014 grids, mazes, graphs, and more may all be represented using a 2D array.\n Here\u2019s my preferred way to iterate through a 2D array or list using  until:\n if (grid.isEmpty()) return for (i in 0 until grid.size) {  for (j in 0 until grid[0].size) {  println(grid[i][j])  } }\n  if (grid.isEmpty()) return for (i in grid.indices) {  for (j in 0 until grid[0].size) {  println(grid[i][j])  } }\n  Maps are also common in interview problems, especially as a good way to store information when a list isn\u2019t enough.\n If you need to iterate through key-value pairs, you can either use a  for loop or a  forEach loop. This is up to personal preference.\n // Iterate through entries using a for-loop  for ((key, value) in map) {  println(&#34;$key = $value&#34;) }  // Iterate through entries using forEach()  map.forEach { (key, value) -&gt; println(&#34;$key = $value&#34;) }\n If you only need to iterate through the keys, you can use the  keys val to get a  Set of all the keys in the map, and iterate through those.\n  Similarly, if you only need to iterate through the values, the  values val will return a  Set of all the values in the map.\n   PriorityQueues are helpful for when you want elements to be processed based on their priority. They\u2019re often used in interview problems that ask for K-th largest, K-th smallest, top K frequent, etc. I covered them in more detail in Part 1, but here\u2019s a reminder of what iterating through one looks like.\n val pq = PriorityQueue&lt;Int&gt;(listOf(2, 1, 3))  // pq will be empty after 3 iterations  while(pq.isNotEmpty()) {  println(pq.poll())  // prints 1, then 2, then 3  }\n That\u2019s it for part 4! Here\u2019s the  link to the cheatsheet covering all 5 parts again.", "posttime": "2020-11-05 20:06:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u90e8\u5206,interviews", "title": "\u91c7\u8bbf\u7528\u67ef\u7279\u6797.\u7b2c4\u90e8\u5206\uff1a\u8fed\u4ee3", "title_en": "Kotlin for Interviews \u2013 Part 4: Iteration", "transed": 1, "url": "https://blog.kotlin-academy.com/kotlin-for-interviews-part-4-iteration-b176dee4f1ae", "via": "", "real_tags": ["\u90e8\u5206"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1033277, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52a0\u5165Slack\u4ee5\u83b7\u53d6\u5e2e\u52a9\u6216\u66f4\u591a\u4fe1\u606f", "note_en": "Join the Slack  for help or more info", "posttime": "2020-11-05 20:06:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u5199,scriptable,slack", "title": "\u722a\u5b50-\u53ef\u7f16\u5199\u811a\u672c\u7684\u8bed\u97f3/\u51dd\u89c6\u8f93\u5165", "title_en": "Talon \u2013 scriptable voice/gaze input", "transed": 1, "url": "https://talonvoice.com", "via": "", "real_tags": ["\u7f16\u5199", "slack"]}]