[{"category": "", "categoryclass": "", "imagename": "7f2f20740a8efafe21216c64c4081f20.png", "infoid": 1070272, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4e0d\u77e5\u4f55\u6545\u5bf9\u97f3\u9891\u5236\u4f5c\u611f\u5174\u8da3\uff0c\u4f46\u53ea\u662f\u4f5c\u4e3a\u6211\u7684\u7231\u597d\u3002\u6211\u7684\u4e3b\u8981\u5de5\u4f5c\u662f\u9886\u5bfc\u7814\u7a76\u8bbe\u65bd\u7684\u63a7\u5236\u7cfb\u7edf\u5b89\u88c5\u3002\u6240\u4ee5\u8fd9\u610f\u5473\u7740\u6211\u901a\u5e38\u4e0d\u60f3\u5728\u8bbe\u5907\u4e0a\u82b1\u5927\u94b1\u3002\u73b0\u5728\u6b63\u662f\u4ee5\u5408\u7406\u7684\u4ef7\u683c\u8d2d\u4e70\u4e00\u4e9b\u8001\u5f0f\u65e0\u7ebf\u97f3\u9891\u8bbe\u5907\u7684\u597d\u65f6\u673a\u3002\u539f\u56e0\u662f\u65e0\u7ebf\u9891\u6bb5\u53d1\u751f\u4e86\u53d8\u5316\uff08\u4fe1\u606f\uff09\uff0c\u4e4b\u524d\u514d\u8d39\u7684\u9891\u6bb5\u4e0d\u9002\u7528\u4e8e\u4e13\u4e1a\u97f3\u9891\u8bbe\u5907\u3002\u8fd9\u610f\u5473\u7740\u8bb8\u591a\u5236\u4f5c\u6b63\u5728\u653e\u5f03\u4ed6\u4eec\u7684\u4e1c\u897f\u6765\u8d2d\u4e70\u65b0\u7684\uff0c\u517c\u5bb9\u7684\u3002\u4f46\u5e76\u975e\u6240\u6709\u65e7\u4e1c\u897f\u90fd\u65e0\u7528\uff0c\u56e0\u4e3a\u5176\u4e2d\u4e00\u4e9b\u53ef\u4ee5\u91cd\u65b0\u7f16\u7a0b\u3002\u56e0\u4e3a\u5728\u6b27\u76df\u6709\u4ece 822 \u5230 830 Mhz \u7684\u7d27\u90bb\u7a97\u53e3\u3002\u8fd9\u4e2a\u7a97\u53e3\u5f88\u7a84\uff0c\u4f46\u81f3\u5c11\u5b83\u4e00\u76f4\u662f\u7a7a\u95f2\u7684\u3002\u53e6\u4e00\u4e2a\u9009\u62e9\u662f\u4f4e\u4e8e 700Mhz\uff0c\u4f46\u662f\u60a8\u53ef\u80fd\u4f1a\u4e0e\u672c\u200b\u200b\u5730\u7535\u89c6\u53d1\u5c04\u673a\u53d1\u751f\u51b2\u7a81\u3002\u6240\u4ee5\u6211\u9009\u62e9\u4e86\u7a84\u5e26\uff0c\u56e0\u4e3a\u6211\u4e0d\u6253\u7b97\u4e00\u6b21\u4f7f\u7528\u592a\u591a\u7684\u53d1\u5c04\u5668\u3002\u6211\u7684\u7535\u5f71\u5236\u4f5c\u8bbe\u5907\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u90fd\u6ca1\u6709\u65e0\u7ebf\u9886\u5939\u5f0f\u8033\u673a\uff0c\u6240\u4ee5\u7ecf\u8fc7\u4e00\u756a\u63a2\u7d22\uff0c\u6211\u9009\u62e9\u4e86\u5e26\u6709\u63a5\u6536\u5668 EK3041/EK3241 \u548c\u53d1\u5c04\u5668 SK 50 \u7684\u8001\u5f0f\u68ee\u6d77\u585e\u5c14 profi \u7cfb\u5217\u3002\u8bbe\u6cd5\u4ee5\u672c\u6765\u53ef\u4ee5\u4e70\u5230\u68ee\u6d77\u585e\u5c14 G3 \u7cfb\u5217\u7684\u4ef7\u683c\u4e70\u5230\u4e86\u51e0\u4e2a\u3002\u8fd9\u662fSennheiser\u6700\u57fa\u672c\u7684\u3002\u8fd9\u4e9b\u5df2\u7ecf\u5728\u6279\u51c6\u7684\u9891\u6bb5\u4e2d\uff0c\u6240\u4ee5\u4e0d\u7528\u62c5\u5fc3\u3002\u4f46\u6211\u4e5f\u4e70\u4e86\u975e\u5e38\u597d\u7684 SKM 3072-U \u65e0\u7ebf\u624b\u6301\u8bbe\u5907\u3002 SKM 3072-U \u5df2\u58f0\u660e\u5e26\u5bbd\u4e3a 798-830Mhz\u3002\u8fd9\u5c31\u662f\u786c\u4ef6\u53ef\u4ee5\u63d0\u4f9b\u7684\u5e26\u5bbd\uff0c\u65e0\u9700\u4efb\u4f55\u66f4\u6539\u3002\u6240\u4ee5\u6211\u671f\u5f85\u4ece\u81ea\u7531\u4e50\u961f\u4e2d\u6311\u9009\u6211\u9700\u8981\u7684 rigth Mhz \u4e0d\u4f1a\u6210\u4e3a\u95ee\u9898\u3002\u6211\u51e0\u4e4e\u4e0d\u77e5\u9053\uff0c\u9ea6\u514b\u98ce\u5df2\u7ecf\u5728\u9ea6\u514b\u98ce\u9891\u6bb5\u5185\u9884\u7f16\u7a0b\u4e86\u4e00\u7ec4\u9891\u7387\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u6211\u60f3\u8981\u7684\u5dee\u8ddd\u4e4b\u5916\u3002\u7528\u6237\u4e0d\u80fd\u66f4\u6539\u8fd9\u4e9b\u9891\u7387\u3002 ebay \u4e0a\u6709\u4e00\u4e2a\u4eba\u5728\u505a\u91cd\u65b0\u7f16\u7a0b\uff0c\u4f46\u8981 119 \u6b27\u5143\uff01\u8fd9\u5bf9\u4e8e\u5c06\u4e00\u4e9b\u7535\u7f06\u63d2\u5165\u9ea6\u514b\u98ce\u975e\u5e38\u91cd\u8981\u3002\u6211\u4ec0\u81f3\u8bd5\u56fe\u5411\u90a3\u5bb6\u4f19\u63d0\u51fa\u66f4\u4fbf\u5b9c\u7684\u4ef7\u683c\uff0c\u4f46\u88ab\u62d2\u7edd\u4e86\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u6211\u5f88\u597d\u5947\u662f\u5426\u53ef\u4ee5\u81ea\u5df1\u505a\u3002\u5982\u679c\u5b83\u4e0d\u4f1a\u592a\u590d\u6742\uff0c\u6211\u53ef\u80fd\u4f1a\u5f00\u59cb\u81ea\u5df1\u51fa\u552e\u91cd\u65b0\u7f16\u7a0b\u670d\u52a1......\u4ee5\u66f4\u5c11\u7684\u4ef7\u683c\uff08\u6076\u9b54\u822c\u7684\u7b11\u58f0\uff09\u3002\u5f88\u660e\u663e\uff0c\u9876\u90e8\u662f AF \u677f\uff0c\u8fd9\u5bf9\u76ee\u7684\u6765\u8bf4\u6ca1\u4ec0\u4e48\u610f\u601d\uff0c\u4f46\u4e0b\u9762\u662f LCD\u3001HF\u3001CPU \u548c\u5e26\u6709 6 \u4e2a\u89e6\u70b9\u7684\u63d2\u5ea7\u8fde\u63a5\u5668\uff01\u8fd9\u770b\u8d77\u6765\u5f88\u6709\u5e0c\u671b\uff0c\u56e0\u4e3a\u8fd9\u7edd\u5bf9\u662f\u7528\u4e8e\u91cd\u65b0\u7f16\u7a0b\u7684 IF\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u901a\u8fc7\u8fde\u63a5\u5230\u67d0\u79cd UART\uff0c\u6211\u53ef\u80fd\u80fd\u591f\u6539\u53d8\u9891\u7387\u3002\u6211\u68c0\u67e5\u4e86\u8d34\u7eb8\u4e0b\u7684 CPU \u7c7b\u578b\u53ca\u5176 PIC16C73A\u3002\u6570\u636e\u8868\u5f88\u5927\u4f46\u53ef\u7528\u3002\u5b83\u7684 UART \u786e\u5b9e\u8fde\u63a5\u5230 J1 \u8fde\u63a5\u5668\u4e0a\u7684\u5f15\u811a\u3002\u6211\u8bd5\u56fe\u5c06\u6211\u7684 USB \u8fde\u63a5\u5230 UART \u677f\u3002\u55ef\uff0c\u4ec0\u4e48\u90fd\u6ca1\u53d1\u751f\u3002\u6211\u505a\u4e86\u4e00\u4e9b\u66f4\u591a\u7684\u6d4b\u8bd5\uff0c\u770b\u770b\u6211\u662f\u5426\u80fd\u591f\u8ba9\u5b83\u8bf4\u8bdd\u3002\u5c31\u50cf\u5728\u901a\u7535\u65f6\u6309\u4e0b\u4e00\u4e9b\u6309\u94ae\uff0c\u6709\u65f6\u53ef\u4ee5\u4f7f\u67d0\u4e9b\u8bbe\u5907\u8fdb\u5165\u670d\u52a1\u6a21\u5f0f\u3002\u81f3\u5c11\u8fd9\u662f\u6211\u4ece\u7ecf\u5e38\u4f7f\u7528\u5b83\u7684\u5d4c\u5165\u5f0f\u5f00\u53d1\u8005\u90a3\u91cc\u5b66\u5230\u7684\u6280\u5de7\u3002\u901a\u5e38\u662f\u4e00\u4e9b\u5947\u602a\u7684\u6309\u94ae\u7ec4\u5408\u4ee5\u5947\u602a\u7684\u987a\u5e8f\u6309\u4e0b/\u4fdd\u6301\u3002\u4f46\u4ecd\u7136\u6ca1\u6709\u4efb\u4f55\u6210\u529f\u3002\u7ecf\u8fc7\u4e00\u4e9b\u6ca1\u6709\u7ed3\u679c\u7684\u5c1d\u8bd5\u540e\uff0c\u6211\u6709\u70b9\u7edd\u671b\uff0c\u4f46\u53ef\u4ee5\u5e2e\u52a9\u6211\u7684\u662f\u670d\u52a1\u624b\u518c\u3002\n\u5e76\u4e14\u56e0\u4e3a\u5b83\u53ea\u4e3a5 usd\u3002\u6211\u8f9e\u804c\u4e86\u3002\u786e\u5b9e\u5b83\u5145\u6ee1\u4e86\u8fd9\u4e48\u591a\u6709\u8da3\u7684\u4fe1\u606f\u3002 J1 \u771f\u6b63\u7528\u4e8e\u8bbe\u7f6e\u9891\u7387\u3002\u9891\u7387\u5b58\u50a8\u5728 EEPROM ST24C04M1 \u4e2d\uff0c\u5b83\u901a\u8fc7 I2C \u4e0e CPU \u901a\u4fe1\u3002\u8981\u5bf9\u5176\u8fdb\u884c\u7f16\u7a0b\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528\u5e26\u6709 9V bat \u8fde\u63a5\u5668\u7684 sennheiser \u63d2\u5934\u4f9b\u7535\uff0c\u7136\u540e\u518d\u4f7f\u7528\u53e6\u4e00\u4e2a\u63d2\u5934\u5c06 UART \u8fde\u63a5\u5230\u88c5\u6709 Win 3.1 \u6216\u66f4\u9ad8\u7248\u672c\u7684 PC\uff08\u8fd9\u5e94\u8be5\u4e0d\u662f\u95ee\u9898\uff09\u3002\u4f46\u6211\u6ca1\u6709\u7684\u662f\u6240\u6709\u8fd9\u4e9b\u9002\u914d\u5668\uff0c\u4e3b\u8981\u662f SePT.EXE\u3002\u77e5\u9053\u6ce2\u7279\u7387\u4ee5\u53ca\u5982\u4f55\u4e0eCPU\u4ea4\u8c08\u3002\u6216\u8005\u8ba9 CPU \u8bf4\u8bdd\u3002\u5982\u60a8\u6240\u89c1\uff0c\u8fd8\u6709 /RST \u548c WP \u5f15\u811a\u3002 /RST \u5e94\u8be5\u662f CPU \u7684\u590d\u4f4d\u5f15\u811a\uff0c\u56e0\u4e3a\u5b83\u8fde\u63a5\u5230 MCLR \u5f15\u811a\u3002 WP \u662f EEPROM \u7684 WriteProtect\uff0c\u901a\u5e38\u88ab\u62c9\u9ad8\uff0c\u5fc5\u987b\u63a5\u5730\u624d\u80fd\u5199\u5165\u5185\u5b58\u3002\u670d\u52a1\u624b\u518c\u6709\u5f88\u591a\u4fe1\u606f\uff0c\u4f46\u9057\u61be\u7684\u662f\u6ca1\u6709\u5173\u4e8e UART \u672c\u8eab\u7684\u4fe1\u606f\uff0c\u56e0\u4e3a\u8fd9\u662f\u7531 SePT.EXE \u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u7684\u3002\u5982\u679c\u6ca1\u6709\u5173\u4e8e\u5982\u4f55\u5f00\u59cb\u4e0e CPU \u901a\u4fe1\u7684\u4efb\u4f55\u7ec6\u8282\uff0c\u6211\u7684\u60f3\u6cd5\u5c31\u6ca1\u6709\u4e86\u3002\u4f46\u662f\uff0c\u975e\u5e38\u6709\u8da3\u7684\u662f\uff0c\u5f53\u9ea6\u514b\u98ce\u542f\u52a8\u65f6\uff0c\u5b83\u4f1a\u4ece EEPROM \u52a0\u8f7d\u9891\u7387\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u6211\u80fd\u591f\u8bfb\u53d6\u7136\u540e\u4fee\u6539 EEPROM\uff0c\u6211\u53ef\u4ee5\u66f4\u6539\u9891\u7387\u3002\u6b63\u786e\u7684\u65b9\u6cd5\u662f\u7531 CPU \u901a\u8fc7 UART\u3002\u4f46\u662f\u7531\u4e8e CPU \u4e0d\u5408\u4f5c\uff0c\u6211\u53ef\u4ee5\u5c1d\u8bd5\u76f4\u63a5\u8fde\u63a5\u5230 I2C \u5e76\u67e5\u770b\u4e8b\u60c5\u5982\u4f55\u5de5\u4f5c\uff0c\u751a\u81f3\u5c1d\u8bd5\u8f6c\u50a8 EEPROM \u5e76\u5bf9\u5176\u8fdb\u884c\u4fee\u6539\u3002\u552f\u4e00\u7684\u95ee\u9898\u662f\uff0c\u6211\u5bf9 EEPROM\u3001uCPU\u3001I2C \u7b49\u77e5\u4e4b\u751a\u5c11\uff0c\u4e0d\u662f\u771f\u7684\uff0c\u90a3\u662f\u4e50\u8da3\u7684\u4e00\u90e8\u5206\u3002\u6240\u4ee5\u7b2c\u4e8c\u5929\u6211\u501f\u7528\u4e86\u8fd9\u4e2a\u6f02\u4eae\u7684\u903b\u8f91\u5206\u6790\u4eea\uff0c\u7136\u540e\u5c06\u5b83\u8fde\u63a5\u5230 EEPROM \u5f15\u811a\u5e76\u8bb0\u5f55\u901a\u4fe1\u3002\u4e0b\u9762\u662f\u9ea6\u514b\u98ce\u901a\u7535\u540e\u7684\u901a\u8baf\u3002\n\u52300x3E\u7684ACK\u6570\u636e\u5199\u5165\uff1a\u53d60xE0 0xC8 0XF0 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d700 0x9F\u4e3a0x00 0\u00d700 0\u00d700 0\u00d700 0\u00d700\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0XF0 0\u00d700 0\u00d700 0\u00d700 0xFB\u7684\u624d\u80fd0\u00d700 0\u00d700 0\u00d700 0\u00d700 0\u00d790\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00\u4e3a0xBF 0\u00d700 0\u00d709 0\u00d700 0x9A\u6267\u884c0\u00d700 0\u00d700 0\u00d700 0\u00d700 0XF0\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0 0\u00d700\u662f0xAB\u4e3a0x00 0x0F 0x00 0xBD 0x0F 0x00 0x00 0x00 0x99 \u5199\u5165 0x3E \u786e\u8ba4\u6570\u636e\uff1a 0xE0 0x00 0xDA 0x00 0x09 0x00 0x00 0x9B 0xF0 0x0x0x0x\n\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0X0D\u4e3a0x00 0x9B\u4e3a0x00 0x7B 0xFA\u56de\u5e94\u4e3a0xBF 0\u00d700 0\u00d700 0\u00d709\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0XF0 0\u00d700 0\u00d700 0\u00d700 0xEF 0x0B\u4e2d0\u00d700 0\u00d700 0\u00d700\u503c\u4e3a0x2F\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0xBA\u4e3a0xFF 0x99\u4e3a0x00 0xFB\u7684\u624d\u80fd0xDF 0xFA\u56de\u5e940xF7\u4e3a0xBF\u4e3a0xFF\u5199\u5165\u52300x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0xBA\u4e3a0xFF 0x99\u4e3a0x00 0xFB\u7684\u624d\u80fd0xDF 0xFA\u56de\u5e940xF7\u4e3a0xBF\u4e3a0xFF\u5199\u5165\u52300x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0 0\u00d700 0\u00d737 0xFF\u76840xE3\u4e3a0x00 0x75 0x61\u4e3a0x1C 0xF7\u4e3a0xBF 0\u00d726\u5199\u51650x3E\u7684ACK\u6570\u636e\uff1a\u53d60xE0\u4e3a0x00 0xBA 0xFF\u76840x99 0x00 0xFB 0xDF 0xFA 0xF7 0xBF 0xFF", "note_en": "Im somehow interested in audio production, but only as my hobby. My main job is lead of control system installation in research facility. So that means I usually dont want to spend huge money on the equipement.\u00a0 And rigth about now is quite good time to get some old-ish wireless audio equipement for decent price. The reason is that there was change ( info) in wireless bands and bands that were free before are not avaliable for the professional audio eq. That means that lot of productions are ditching their stuff to buy new one, compatible. But not all the old stuff is useless as some of it can be reprogrammed. As there is tigth window from 822 to 830 Mhz in EU. This window is quite narrow, but at least it free all the time. Other option is to go below 700Mhz, but then you migth get into collision with local TV transmitter. So I settled for the narrow band since I dont plan to use too many transmitters at once.  My movie production gear was missing wireless lavaliers for long time, so after some exploration I settled on old sennheiser profi series with recievers EK3041/EK3241 and transmitters SK 50. Managed to get couple of them for price that would otherwise got me sennheiser G3 series. Which is the most basic from Sennheiser. These were already in the approved band so no worries. But I also bougth really nice SKM 3072-U wireless handheld.\n    The SKM 3072-U had stated bandwith 798-830Mhz. Thats the bandwidth that HW can provide without any changes. So I was expecting it will not be an issue to pick the rigth Mhz I need from the free band. Little did I know, that the mic has already pre-programmed set of frequencies within the band of the mic. And all of them were outside the gap I wanted. These frequencies cannot be changed by user.\n There is a guy on ebay who is doing the reprogramming but it costs 119 Euro! And thats quite a lot for pluggin some cable to microphone. I even tried to propose cheaper price to the guy, but was refused. Anyway I was curiouse if it would be possible to do it on my own. And if it won&#39;t be too complicated I migth start sell the repogramming service on my own... for less (diabolic laught).\n   Quite clearly on top is AF board, which is not much interesting for the purpouse but below is LCD, HF, CPU and socket connector with 6 contacts! That looks promising as this is definitely the IF that is used for reprogramming. The idea is that by connecting to some kind of UART I migth be able to change the frequencies.\n I checked the CPU type under the sticker and its  PIC16C73A. Datasheet is huge but avaliable.\n   And it has UART that is indeed connected to the pins on the J1 connector. I tried to connect my USB to UART board.\n Well, nothing happened. I did some more test to see if I would be able to make it talk. Like pushing some buttons when powering, which can sometime put some devices into service mode. At least thats the tricked I learned from embeded develepores which use this quite often. It is usualy some weird combination of buttons pushes/holds in weird order. But still without any success. After some attempts that were not fruitfull I was little bit despared, but what could help me is the Service Manual.\n And as it was only for 5 usd. I resigned and bougth it. And indeed its full of so much interesting information.\n  J1 is trully used for setting the frequencies. The frequencies are stored in EEPROM  ST24C04M1 which communicates with CPU over I2C.\n To program it you have to use sennheiser plug with 9V bat connector for powering, then another on top of it to connect  UART to the PC with Win 3.1 or higher (This should not be an issue). But what I dont have is all these adaptors and mainly the SePT.EXE. Which knows baudrate and how to talk with the CPU.\u00a0 Or lets say makes the CPU talk.\n  As you can see there is also /RST and WP pin. /RST should be reset pin for CPU as it connectes to the  MCLR pin. and WP is WriteProtect of EEPROM, whic is normaly pulled up and had to be grounded in order to write into the memory.\n  The Service manual has quite many information but unfortunatelly nothing about the UART itself as this is dealt by the SePT.EXE application. And without any specifics about how to start the communication with CPU I run out of ideas.\n  But, there is quite interesting thing that when the mic starts up, it loads the frequencies from the EEPROM. That means that If I would be able to read then modify the EEPROM, I can change the frequency. Correct way is by the CPU via UART. But since the CPU does not cooperate I could try hooking up to the I2C directly and see how things work and even try to dump the EEPROM and modify it. The only issue is, I dont know much about EEPROMs, uCPU, I2C etc. not really and thats part of the fun.\n  So next day I borrowed this beatiful logic analyzer anb conneted it to then EEPROM pins and recorder the communication. Below is communication after powering of mic.\n write to 0x3E ack data: 0xE0 0xC8 0xF0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n write to 0x3E ack data: 0xE0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\n                                         write to 0x3E ack data: 0xE0 0x00 0x00 0x00 0x00 0x00 0x9F 0x00 0x00 0x00 0x00 0x00\n write to 0x3E ack data: 0xE0 0x00 0xF0 0x00 0x00 0x00 0xFB 0x00 0x00 0x00 0x00 0x90\n write to 0x3E ack data: 0xE0 0x00 0xBF 0x00 0x09 0x00 0x9A 0x00 0x00 0x00 0x00 0xF0\n write to 0x3E ack data: 0xE0 0x00 0xAB 0x00 0x0F 0x00 0xBD 0x0F 0x00 0x00 0x00 0x99\n write to 0x3E ack data: 0xE0 0x00 0xDA 0x00 0x09 0x00 0x00 0x9B 0xF0 0x00 0x00 0xBF\n write to 0x3E ack data: 0xE0 0x00 0x0D 0x00 0x9B 0x00 0x7B 0xFA 0xBF 0x00 0x00 0x09\n write to 0x3E ack data: 0xE0 0x00 0xF0 0x00 0x00 0x00 0xEF 0x0B 0x00 0x00 0x00 0x2F\n            write to 0x3E ack data: 0xE0 0x00 0xBA 0xFF 0x99 0x00 0xFB 0xDF 0xFA 0xF7 0xBF 0xFF\n         write to 0x3E ack data: 0xE0 0x00 0xBA 0xFF 0x99 0x00 0xFB 0xDF 0xFA 0xF7 0xBF 0xFF\n   write to 0x3E ack data: 0xE0 0x00 0x37 0xFF 0xE3 0x00 0x75 0x61 0x1C 0xF7 0xBF 0x26\n         write to 0x3E ack data: 0xE0 0x00 0xBA 0xFF 0x99 0x00 0xFB 0xDF 0xFA 0xF7 0xBF 0xFF", "posttime": "2021-07-29 22:02:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u68ee\u6d77\u585e\u5c14,sennheiser,eeprom", "title": "\u91cd\u65b0\u7f16\u7a0b\u68ee\u6d77\u585e\u5c14\u9ea6\u514b\u98ce", "title_en": "Reprogramming a Sennheiser Microphone", "transed": 1, "url": "https://vgnotepad.blogspot.com/2021/04/reprogramming-old-sennheiser-skm-3072-u.html", "via": "", "real_tags": ["\u7f16\u7a0b", "\u68ee\u6d77\u585e\u5c14", "eeprom"]}, {"category": "", "categoryclass": "", "imagename": "e1f842e9ed61ee50a332c4e2bc5226c6.png", "infoid": 1070271, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 ZFS \u5feb\u7167\u7ba1\u7406\u7684\u57fa\u7840\u77e5\u8bc6\u4e2d\uff0c\u6211\u4eec\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u5feb\u7167\u548c\u514b\u9686\u4ece\u7ed9\u5b9a\u7684\u65f6\u95f4\u70b9\u8bbf\u95ee\u6570\u636e\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 ZFS \u5f15\u5bfc\u73af\u5883 (BE) \u5c06\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\u5f15\u5bfc\u5230\u4e0a\u4e00\u4e2a\u65f6\u95f4\u70b9\u3002\u5982\u679c\u60a8\u4e00\u76f4\u5728\u5173\u6ce8\u672c\u7cfb\u5217\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u53d1\u73b0\u521b\u5efa\u548c\u7ba1\u7406 OpenZFS \u5feb\u7167\u662f\u591a\u4e48\u5bb9\u6613\u3002\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u4f7f\u7528\u8fc7\u5feb\u7167\uff0c\u8bf7\u5c1d\u8bd5\u4e00\u4e0b\uff01\u6211\u4eec\u76f8\u4fe1\u4f60\u5f88\u5feb\u5c31\u4f1a\u60f3\u77e5\u9053\u6ca1\u6709\u4ed6\u4eec\u4f60\u662f\u5982\u4f55\u76f8\u5904\u7684\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528\u5feb\u7167\u5e76\u4e14\u4e0d\u662f\u79ef\u6781\u7684\u5feb\u7167\u4fee\u526a\u5668\uff0c\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\uff1a\u591a\u5c11\u5feb\u7167\u592a\u591a\u4e86\uff1f\u7531\u4e8e\u6ca1\u6709\u65e0\u9650\u5b58\u50a8\u5bb9\u91cf\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u60a8\u7684\u53ef\u7528\u78c1\u76d8\u7a7a\u95f4\u662f\u4e00\u4e2a\u660e\u663e\u7684\u9650\u5236\u56e0\u7d20\u3002\u4f46\u662f\u5feb\u7167\u4f1a\u5728\u4ec0\u4e48\u65f6\u5019\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff1f\u4e0e\u5176\u4ed6\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\uff0c\u4e00\u4e2a\u6216\u4e00\u5343\u4e2a\u5feb\u7167\u7684\u5b58\u5728\u5bf9\u6587\u4ef6\u7cfb\u7edf\u7684\u6027\u80fd\u6ca1\u6709\u5f71\u54cd\uff0c\u8bfb\u53d6\u548c\u5199\u5165\u6587\u4ef6\u7684\u6267\u884c\u65b9\u5f0f\u76f8\u540c\u3002\u4f46\u662f\uff0c\u7ba1\u7406\u64cd\u4f5c\uff08\u4f8b\u5982\u5217\u51fa\u548c\u5220\u9664\u5feb\u7167\uff09\u7684\u6027\u80fd\u53d7\u6bcf\u4e2a\u6570\u636e\u96c6\u4e2d\u5b58\u5728\u7684\u5feb\u7167\u6570\u91cf\u7684\u5f71\u54cd\u3002\u6709\u6570\u767e\u4e2a\u5feb\u7167\u53ef\u4ee5\u5417\uff1f\u5047\u8bbe\u6709\u8db3\u591f\u7684\u5b58\u50a8\u5bb9\u91cf\uff0c\u90a3\u4e48\u62e5\u6709\u6570\u5343\u6216\u6570\u4e07\u4e2a\u5feb\u7167\u5462\uff1f\u6839\u636e\u6211\u4eec\u7684\u7ecf\u9a8c\uff0c\u5728\u5217\u51fa\u3001\u521b\u5efa\u3001\u590d\u5236\u548c\u9500\u6bc1\u5feb\u7167\u65f6\uff0c\u6bcf\u4e2a\u6570\u636e\u96c6\u8d85\u8fc7 1000 \u4e2a\u5feb\u7167\u5f00\u59cb\u5bfc\u81f4\u4e25\u91cd\u7684\u6027\u80fd\u95ee\u9898\u3002\u6027\u80fd\u5f71\u54cd\u4e0e\u7cfb\u7edf\u4e0a\u7684\u5feb\u7167\u603b\u6570\u65e0\u5173\uff0c\u800c\u662f\u4e0e\u6bcf\u4e2a\u6570\u636e\u96c6\u4e0a\u7684\u5feb\u7167\u6570\u91cf\u76f8\u5173\u3002 100 \u4e2a\u6570\u636e\u96c6\u6bcf\u4e2a\u5305\u542b 100 \u4e2a\u5feb\u7167\u5c06\u4e0d\u4f1a\u5bf9\u5217\u8868\u6027\u80fd\u4ea7\u751f\u5f71\u54cd\uff0c\u800c\u5177\u6709 2000 \u4e2a\u5feb\u7167\u7684\u5355\u4e2a\u6570\u636e\u96c6\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u624d\u80fd\u8fd4\u56de\u5feb\u7167\u5217\u8868\u3002\u867d\u7136\u60a8\u53ef\u80fd\u6c38\u8fdc\u4e0d\u9700\u8981\u5b58\u50a8\u90a3\u4e48\u591a\u5feb\u7167\uff0c\u4f46\u60a8\u4ecd\u7136\u5e0c\u671b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u4ece\u5feb\u7167\u6d88\u8017\u7684\u7a7a\u95f4\u4e2d\u83b7\u5f97\u6700\u5927\u4ef7\u503c\u3002\u4e92\u8054\u7f51\u641c\u7d22\u4e0d\u4f1a\u7ed9\u51fa\u591a\u5c11\u5feb\u7167\u592a\u591a\u7684\u660e\u786e\u7b54\u6848\uff0c\u7b54\u6848\u8303\u56f4\u4ece\u201c\u4e0d\u8981\u62c5\u5fc3\u201d\u5230\u201c\u53d6\u51b3\u4e8e\u201d\u3002\u867d\u7136\u4e0d\u5c3d\u5982\u4eba\u610f\uff0c\u4f46\u95ee\u9898\u7684\u5173\u952e\u662f\u6ca1\u6709\u786e\u5b9a\u7684\u7b54\u6848\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u7684\u5b58\u50a8\u7cfb\u7edf\u548c\u6570\u636e\u4f7f\u7528\u60c5\u51b5\u4e0d\u540c\u3002\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u4e9b\u8981\u95ee\u81ea\u5df1\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u7b54\u6848\u5c06\u5e2e\u52a9\u60a8\u66f4\u597d\u5730\u4e86\u89e3\u5feb\u7167\u7684\u4f7f\u7528\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8be5\u4fe1\u606f\u6765\u786e\u5b9a\u9002\u5408\u60a8\u9700\u6c42\u7684\u5feb\u7167\u521b\u5efa\u548c\u4fee\u526a\u8ba1\u5212\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u53ef\u80fd\u5e76\u4e0d\u660e\u663e\uff0c\u4f46\u5bf9\u4e8e\u4e86\u89e3\u521b\u5efa\u5feb\u7167\u7684\u65f6\u95f4\u548c\u9891\u7387\u81f3\u5173\u91cd\u8981\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u60a8\u5e0c\u671b\u521b\u5efa\u91cd\u8981\u5e76\u63d0\u4f9b\u6700\u5927\u4ef7\u503c\u7684\u5feb\u7167\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u8003\u8651\u4e00\u4e2a Web \u670d\u52a1\u5668\uff0c\u5176\u4e2d\u7684\u5185\u5bb9\u4ec5\u5728\u6709\u65b0\u4ea7\u54c1\u53d1\u5e03\u6216\u73b0\u6709\u4ea7\u54c1\u7684\u65b0\u8f6f\u4ef6\u53d1\u5e03\u65f6\u624d\u4f1a\u66f4\u6539\uff0c\u6216\u8005 Web \u56e2\u961f\u4f1a\u5b9a\u671f\u626b\u63cf\u4ee5\u5237\u65b0\u548c\u6539\u8fdb\u5185\u5bb9\u3002\u5728\u5185\u5bb9\u66f4\u6539\u4e4b\u524d\u62cd\u6444\u5feb\u7167\u662f\u6709\u610f\u4e49\u7684\uff0c\u7f51\u7edc\u56e2\u961f\u53ef\u80fd\u5e0c\u671b\u5c06\u7f51\u7ad9\u4ee5\u524d\u7248\u672c\u7684\u5b58\u6863\u4fdd\u7559\u6570\u5e74\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5feb\u7167\u6570\u91cf\u6700\u5c11\uff0c\u5b58\u50a8\u65f6\u95f4\u957f\uff0c\u5e76\u4e14\u6839\u636e\u5185\u5bb9\u66f4\u6539\u7684\u6570\u91cf\uff0c\u5feb\u7167\u4e4b\u95f4\u53ef\u80fd\u5b58\u5728\u76f8\u5f53\u591a\u7684\u5dee\u5f02\u3002\n\u8fd9\u79cd\u60c5\u51b5\u4e0e\u5b58\u50a8\u8bb8\u591a\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u7684\u6587\u4ef6\u670d\u52a1\u5668\u751a\u81f3\u60a8\u6574\u5929\u5de5\u4f5c\u7684\u4e2a\u4eba\u5de5\u4f5c\u7ad9\u5b8c\u5168\u4e0d\u540c\u3002\u8fd9\u4e9b\u7528\u4f8b\u5f80\u5f80\u53d7\u76ca\u4e8e\u5b9a\u671f\u7684\u81ea\u52a8\u5feb\u7167\uff0c\u4f8b\u5982\u5728\u5de5\u4f5c\u65f6\u95f4\u5185\u6bcf 15\u300130 \u6216 60 \u5206\u949f\u4e00\u6b21\u3002\u8fd9\u4f1a\u5bfc\u81f4\u5927\u91cf\u5feb\u7167\u7684\u4ef7\u503c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u8fc5\u901f\u51cf\u5c11\u3002\u5f53\u7528\u6237\u5bf9\u6587\u4ef6\u8fdb\u884c\u66f4\u6539\u65f6\uff0c\u60a8\u5982\u4f55\u786e\u5b9a\u6587\u4ef6\u66f4\u6539\u7684\u503c\uff08\u4ee5\u53ca\u5feb\u7167\u7684\u9891\u7387\u548c\u4fdd\u7559\u5feb\u7167\u7684\u65f6\u95f4\uff09\uff1f\u5f53\u7136\uff0c\u8fd9\u53d6\u51b3\u4e8e\u3002\u5982\u679c\u7cfb\u7edf\u7ba1\u7406\u5458\u6b63\u5728\u5bf9\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u66f4\u6539\uff0c\u90a3\u4e48\u4fdd\u7559\u4ee5\u524d\u7684\u66f4\u6539\u975e\u5e38\u6709\u4ef7\u503c\uff0c\u81f3\u5c11\u5728\u66f4\u6539\u5f97\u5230\u9a8c\u8bc1\u4e4b\u524d\u662f\u8fd9\u6837\u3002\u5982\u679c\u7528\u6237\u6b63\u5728\u5bf9\u7535\u5b50\u8868\u683c\u8fdb\u884c\u66f4\u6539\uff0c\u5219\u5b9a\u671f\u5feb\u7167\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u6355\u83b7\u4ed6\u4eec\u5e0c\u671b\u91cd\u65b0\u6355\u83b7\u7684\u7279\u5b9a\u66f4\u6539\u3002\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u7528\u6237\u5728\u4f7f\u7528\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff1f\u8bb8\u591a\u73b0\u4ee3\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u90fd\u63d0\u4f9b\u4e86\u5185\u7f6e\u7684\u6587\u4ef6\u7248\u672c\u5386\u53f2\u8bb0\u5f55\u3002\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u4fee\u8ba2\u7cfb\u7edf\uff0c\u5e76\u88ab\u6559\u5bfc\u201c\u5c3d\u65e9\u5e76\u7ecf\u5e38\u63d0\u4ea4\u201d\u7684\u53e3\u5934\u7985\u3002\u8bb8\u591a\u4e1a\u52a1\u5e94\u7528\u7a0b\u5e8f\u5728\u7ebf\u8fd0\u884c\u6216\u6258\u7ba1\u5728\u5916\u90e8\u4e91\u4e2d\uff0c\u901a\u5e38\u63d0\u4f9b\u7248\u672c\u5386\u53f2\u8bb0\u5f55\u3002\u53ea\u6709\u60a8\u624d\u80fd\u4e86\u89e3\u60a8\u7684\u7528\u6237\u6b63\u5728\u4f7f\u7528\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ed6\u4eec\u662f\u5426\u6b63\u5728\u5229\u7528\u5185\u7f6e\u7684\u5386\u53f2/\u4fee\u8ba2\u7cfb\u7edf\uff0c\u4ee5\u53ca\u4ed6\u4eec\u662f\u5426\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u4fee\u8ba2\u5e94\u7528\u7a0b\u5e8f\u6216\u603b\u662f\u5fd8\u8bb0\u63d0\u4ea4\u6216\u4fdd\u5b58\u7248\u672c\u800c\u6253\u6270\u60a8\u8fdb\u884c\u6587\u4ef6\u6062\u590d.\u60a8\u8fd8\u77e5\u9053\u54ea\u4e9b\u7cfb\u7edf\u5728\u60a8\u7684\u63a7\u5236\u4e4b\u4e0b\uff0c\u54ea\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u8db3\u591f\u91cd\u8981\u4ee5\u4fdd\u8bc1\u4f7f\u7528 OpenZFS \u5feb\u7167\u4fdd\u7559\u4ee5\u524d\u7684\u7248\u672c\u3002\u5982\u679c\u60a8\u6709\u5927\u91cf\u5b58\u50a8\u5bb9\u91cf\uff0c\u5219\u5f52\u6863\u5feb\u7167\u7684\u6210\u672c\u4f1a\u5f88\u4f4e\u3002\u4f46\u662f\uff0c\u8ba1\u5212\u7684\u5feb\u7167\u786e\u5b9e\u4f1a\u589e\u52a0\u3002\u8003\u8651\u4e00\u4e0b\u6570\u5b66\uff1a\u6bcf\u5c0f\u65f6\u62cd\u6444 1 \u4e2a\u6570\u636e\u96c6\u5feb\u7167\u4f1a\u5bfc\u81f4\u6bcf\u5468 168 \u4e2a\u5feb\u7167\u2014\u2014\u6362\u53e5\u8bdd\u8bf4\uff0c\u6309\u7167\u8be5\u8ba1\u5212\u9700\u8981\u5927\u7ea6 6 \u5468\u624d\u80fd\u5b9e\u73b0\u6bcf\u4e2a\u6570\u636e\u96c6\u6027\u80fd\u8fbe\u5230 1000 \u591a\u4e2a\u5feb\u7167\u3002\u5bf9\u4e8e\u6b64\u793a\u4f8b\uff0c\u60a8\u9700\u8981\u8003\u8651\u662f\u5426\u6bcf\u5929\u6bcf\u5c0f\u65f6\u90fd\u9700\u8981\u4e00\u4e2a\u5feb\u7167\uff0c\u4ee5\u53ca\u4f55\u65f6\u5f00\u59cb\u4fee\u526a\u8f83\u65e7\u7684\u5feb\u7167\u3002\u95ee\u95ee\u81ea\u5df1\uff1a\u5728 3 \u4e2a\u6708\u524d\u7684\u4e0a\u5348 10:00 \u548c\u4e0a\u5348 11:00 \u4fdd\u7559\u6570\u636e\u96c6\u7684\u5feb\u7167\u662f\u5426\u6709\u4ef7\u503c\uff1f 1\u4e2a\u6708\u524d\uff1f\u4e0a\u661f\u671f\uff1f\u8fd9\u662f\u4e0a\u4e00\u4e2a\u95ee\u9898\u7684\u53e6\u4e00\u9762\u3002\u5982\u679c\u60a8\u4ece 5 \u5468\u524d\u5f00\u59cb\u5728\u4e0a\u5348 10:00 \u5220\u9664\u6587\u4ef6\u7cfb\u7edf\u7684\u5feb\u7167\uff0c\u8fd9\u4f1a\u6709\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u5417\uff1f\u5982\u679c\u6ca1\u6709\uff0c\u60a8\u9700\u8981\u56de\u6eaf\u591a\u8fdc\u624d\u80fd\u4fdd\u7559\u6709\u4ef7\u503c\u7684\u5feb\u7167\uff1f\n\u4e5f\u8bb8\u60a8\u7684\u5feb\u7167\u662f\u57fa\u4e8e\u6d3b\u52a8\u800c\u4e0d\u662f\u8ba1\u5212\u9a71\u52a8\u7684\uff1f\u5982\u679c\u662f\u8fd9\u6837\uff0c\u60a8\u8fd8\u9700\u8981\u8bbf\u95ee 3 \u4e2a pkg-updates \u524d\u7684\u6570\u636e\u5417\uff1f\u95ee\u95ee\u81ea\u5df1\uff1a\u5982\u679c\u67d0\u4e2a\u7279\u5b9a\u7248\u672c\u4e0d\u518d\u53ef\u7528\uff0c\u60a8\u5c06\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u548c\u7cbe\u529b\uff1f\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u60a8\u5e94\u8be5\u66f4\u597d\u5730\u4e86\u89e3\u54ea\u4e9b\u6570\u636e\u5bf9\u5feb\u7167\u5f88\u91cd\u8981\u4ee5\u53ca\u60a8\u5e0c\u671b\u6355\u83b7\u8be5\u6570\u636e\u7684\u9891\u7387\u3002\u63a5\u4e0b\u6765\uff0c\u60a8\u9700\u8981\u786e\u5b9a\u662f\u5426\u6709\u8db3\u591f\u7684\u5b58\u50a8\u5bb9\u91cf\u6765\u7ef4\u62a4\u6240\u9700\u6570\u91cf\u7684\u5feb\u7167\u3002\u5982\u679c\u5bb9\u91cf\u6210\u4e3a\u4e00\u4e2a\u95ee\u9898\uff0c\u60a8\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u503c\u5f97\u6dfb\u52a0\u66f4\u591a\u5bb9\u91cf\u6216\u91cd\u65b0\u8003\u8651\u60a8\u7684\u5feb\u7167\u4fee\u526a\u8ba1\u5212\u3002\u9996\u5148\u5217\u51fa\u6c60\u7684\u7a7a\u95f4\u5c5e\u6027 (-o)\u3002\u8fd9\u662f\u6211\u7684\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u7684\u5766\u514b\u6c60\u7684\u526a\u8f91\u793a\u4f8b\uff1a Zfs list -o space NAME AVAIL USED USEDSNAP USEDDS USEDREFRESERV USEDCHILD tank 270G 69.2G 0 88K 0 69.2G tank/ROOT 270G 44.4G 0 48K4mar 0/4RO tank 41.6G 18.7G 23.0G 0 0 tank/usr/home/dru 270G 4.34G 1.17G 3.17G 0 2.36M \u5df2\u7528\uff1a\u4f7f\u7528\u91cf\uff08\u4e0e\u4efb\u4f55\u6587\u4ef6\u7cfb\u7edf\u4e00\u6837\uff0cOpenZFS \u6027\u80fd\u5728\u63a5\u8fd1\u5bb9\u91cf\u65f6\u4f1a\u5f00\u59cb\u53d7\u5230\u5f71\u54cd\uff1b\u901a\u5e38\u60a8\u5e0c\u671b\u4fdd\u6301\u5728 80% \u4ee5\u4e0b\u6216\u8003\u8651\u5728\u7cfb\u7edf\u5f00\u59cb\u63a5\u8fd1 90% \u65f6\u589e\u52a0\u66f4\u591a\u5bb9\u91cf\uff09\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6b64\u7cfb\u7edf\u4e0a\u4ecd\u6709\u8db3\u591f\u7684\u5b58\u50a8\u5bb9\u91cf\u3002\u6709\u8da3\u7684\u662f\uff0cdru \u4e3b\u76ee\u5f55\u4e2d\u8d85\u8fc7 25% \u7684\u7a7a\u95f4\u88ab\u5feb\u7167\u4f7f\u7528\u3002\n\u5728\u5177\u6709\u8bb8\u591a\u5feb\u7167\u7684\u7cfb\u7edf\u4e0a\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u5217\u8868\u53ef\u4ee5\u5feb\u901f\u6d4f\u89c8\u54ea\u4e9b\u6587\u4ef6\u7cfb\u7edf\u6d88\u8017\u6700\u591a\u7684\u5feb\u7167\u7a7a\u95f4\uff0c\u4ee5\u53ca\u6307\u5b9a\u6c60\u4e0a\u4ecd\u6709\u591a\u5c11\u53ef\u7528\u5bb9\u91cf\u7684\u603b\u4f53\u89c6\u56fe\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06\u7279\u5b9a\u6570\u636e\u96c6\u5f52\u96f6\u3002\u8bf7\u6ce8\u610f\uff0c\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u662f zpool\uff08\u4e3a\u4e86\u67e5\u770b\u6c60\u4f7f\u7528\u60c5\u51b5\uff09\uff0c\u800c\u6b64\u547d\u4ee4\u4f7f\u7528 zfs\uff08\u56e0\u4e3a\u6211\u6b63\u5728\u5217\u51fa\u4e00\u4e2a\u6570\u636e\u96c6\uff09\u3002\u8fd9\u6b21\u6211\u5c06\u83b7\u5f97\u6211\u7684\u4e3b\u76ee\u5f55\u6570\u636e\u96c6\u7684 usedbysnapshots \u5c5e\u6027\uff1a\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u5feb\u7167\u4f7f\u7528\u7684\u7a7a\u95f4\u4e0e\u524d\u9762\u6e05\u5355\u4e2d\u770b\u5230\u7684 1.17G \u5339\u914d\u3002\u867d\u7136 usedbysnapshots \u5c5e\u6027\u7ed9\u51fa\u4e86\u5feb\u7167\u6d88\u8017\u4e86\u591a\u5c11\u7a7a\u95f4\uff0c\u4ee5\u53ca\u5982\u679c\u6570\u636e\u96c6\u4e2d\u7684\u6240\u6709\u5feb\u7167\u90fd\u88ab\u7834\u574f\u5c06\u91ca\u653e\u591a\u5c11\u7a7a\u95f4\u7684\u6982\u5ff5\uff0c\u5b83\u5e76\u4e0d\u8868\u793a\u5982\u679c\u60a8\u5f00\u59cb\uff0c\u60a8\u5c06\u83b7\u5f97\u591a\u5c11\u7a7a\u95f4\u53ea\u4fee\u526a\u4e00\u4e9b\u5feb\u7167\u3002\u7531\u4e8e\u5176 COW \u6027\u8d28\uff0cOpenZFS \u65e0\u6cd5\u91ca\u653e\u4ecd\u88ab\u5f15\u7528\u7684\u5757\u3002\u4f8b\u5982\uff0c\u6211\u5c06\u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u663e\u793a\u6211\u4e3b\u76ee\u5f55\u4e2d\u5feb\u7167\u7684 NAME\u3001WRITTEN\u3001REFER \u548c USED \u5217\uff08\u6309\u6b64\u987a\u5e8f\uff09\uff1a zfs list -t all -o name,written,refer,used | grep dru@ tank/usr/home/dru@test-backup 2.71G 2.71G 176M tank/usr/home/dru@homedir\u3002 176M 2.71G 12.6M tank/usr/home/dru@homedir-mod 18.5M 2.71G 18.1M \u5199\u5165\u5c5e\u6027\u5bf9\u4e8e\u7406\u89e3\u5feb\u7167\u589e\u957f\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u5b83\u8868\u793a\u81ea\u62cd\u6444\u5feb\u7167\u4ee5\u6765\u5199\u5165\u6570\u636e\u96c6\u7684\u5f15\u7528\u7a7a\u95f4\u91cf\u3002 used \u5217\u8868\u793a\u8be5\u5feb\u7167\u6709\u591a\u5c11\u6570\u636e\u662f\u552f\u4e00\u7684\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5982\u679c\u5220\u9664\u8be5\u7279\u5b9a\u5feb\u7167\uff0c\u5c06\u91ca\u653e\u591a\u5c11\u7a7a\u95f4\u3002\n\u6267\u884c\u8be6\u7ec6\u7684\u7a7a\u8fd0\u884c (-nv) \u5c06\u663e\u793a\u901a\u8fc7\u9500\u6bc1\u6307\u5b9a\u5feb\u7167\u5c06\u56de\u6536\u7684\u7a7a\u95f4\u91cf\u3002\u6570\u91cf\u5c06\u4e0e\u4e0a\u9762\u5217\u8868\u4e2d\u7684 used \u5217\u5339\u914d\uff1a zfs destroy -nv tank/usr/home/dru@test-backup \u5c06\u9500\u6bc1 tank/usr/home/dru@test-backup \u5c06\u56de\u6536 176M zfs destroy -nv tank/ usr/home/dru@homedir \u4f1a\u7834\u574f tank/usr/home/dru@homedir \u4f1a\u56de\u6536 12.6M zfs destroy -nv tank/usr/home/dru@homedir-mod \u4f1a\u7834\u574f tank/usr/home/dru@homedir-mod\u4f1a\u56de\u6536 18.1M \u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e ZFS \u7684\u4fe1\u606f\u5417\uff1f\u5728\u6211\u4eec\u7684\u7cfb\u5217\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u5199\u5173\u4e8e OpenZFS \u7684\u5f3a\u5927\u529f\u80fd\u3002\u4e86\u89e3\u54ea\u4e9b\u6570\u636e\u4ece\u5feb\u7167\u4e2d\u53d7\u76ca\u4ee5\u53ca\u4fdd\u7559\u5feb\u7167\u7684\u65f6\u95f4\u957f\u5ea6\u5c06\u6709\u52a9\u4e8e\u60a8\u5145\u5206\u5229\u7528 OpenZFS \u5feb\u7167\u3002\u5c06\u5feb\u7167\u4fee\u526a\u4e3a\u60a8\u9700\u8981\u7684\u5feb\u7167\u5c06\u4f7f\u60a8\u66f4\u5bb9\u6613\u627e\u5230\u8981\u6062\u590d\u7684\u6570\u636e\u3001\u8282\u7701\u78c1\u76d8\u5bb9\u91cf\u5e76\u9632\u6b62 OpenZFS \u7cfb\u7edf\u51fa\u73b0\u6027\u80fd\u74f6\u9888\u3002\u5728 Klara\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u56e2\u961f\u81f4\u529b\u4e8e\u5e2e\u52a9\u60a8\u5b8c\u6210 FreeBSD \u9879\u76ee\u3002\u65e0\u8bba\u60a8\u662f\u5728\u8ba1\u5212\u4e00\u4e2a FreeBSD \u9879\u76ee\uff0c\u8fd8\u662f\u5728\u4e00\u4e2a\u9879\u76ee\u4e2d\u95f4\u5e76\u9700\u8981\u4e00\u4e9b\u989d\u5916\u7684\u6d1e\u5bdf\u529b\uff0c\u6211\u4eec\u90fd\u5728\u8fd9\u91cc\u4e3a\u60a8\u63d0\u4f9b\u5e2e\u52a9\uff01", "note_en": "In\u00a0 Basics of ZFS Snapshot Management, we demonstrated how snapshots and clones can be used to access data from a given point in time. In this article, we\u2019ll learn how ZFS boot environments (BEs) are used to boot the operating system itself into a previous point in time.\n  If you have been following this series, you may have already discovered how easy it is to\u00a0 create and manage OpenZFS snapshots. If you haven\u2019t used snapshots yet, give them a try! We\u2019re confident you\u2019ll quickly wonder how you ever got along without them.\n If you\u2019re already using snapshots and aren\u2019t an aggressive snapshot pruner, you\u2019ve probably wondered: How many snapshots is too many? Since there\u2019s no such thing as infinite storage capacity, your available disk space is an obvious limiting factor. But at what point will snapshots result in a performance hit? Unlike other filesystems, the existence of one or one thousand snapshots has no impact on the performance of the filesystem, reading and writing files performs the same either way. However, the performance of administrative operations, like listing and deleting snapshots, are impacted by the number of snapshots that exist in each dataset. Is it OK to have hundreds of snapshots? Assuming sufficient storage capacity, what about having thousands or tens of thousands of snapshots? In our experience,\u00a0over 1000 snapshots per dataset starts to cause significant performance issues when listing, creating, replicating, and destroying snapshots. The performance impact is not related to the total number of snapshots on the system, but the snapshots on each dataset. A hundred datasets each with one hundred snapshots will see no performance impact on listing, while a single dataset with 2000 snapshots may take many seconds to return the list of snapshots. While you may never need to store that many snapshots, you still want to get the most value for the space snapshots consume over time.\n An internet search won\u2019t give a definitive answer to how many snapshots is too many, with answers ranging from \u201cdon\u2019t worry about it\u201d to \u201cit depends\u201d. While not satisfying, the crux of the matter is there is no definitive answer as everyone\u2019s storage system and data use is different.\n This article introduces some questions to ask yourself as the answers will help you better understand your snapshot use. You can then use that information to determine a snapshot creation and pruning schedule that fits your needs without introducing a performance hit.\n  The first question may not be obvious, but it is crucial to understanding when and how often it makes sense to create snapshots. Ideally, you want to create snapshots that matter and deliver the most value.\n As an example: consider a web server where the content changes only when there\u2019s a new product launch, or there is a new software release for an existing product, or the web team does its periodic sweep to refresh and improve content. It makes sense to take a snapshot before the content changes, the web team may want to keep an archive of previous versions of the website for several years. In this case, the number of snapshots is minimal, they are stored for a long time, and depending upon the amount of content changes, there may be quite a few differences between snapshots.\n This case is quite different from a file server which stores the home directories of many users or even a personal workstation that you work on all day. These use cases tend to benefit from automated snapshots on a regular schedule, say every 15, 30, or 60 minutes during work hours. This results in a lot of snapshots whose value tends to quickly diminish over time.\n When users are making changes to files, how do you determine the value (and hence how often to snapshot and how long to keep the snapshot) of file changes? Of course, it depends. If the system administrator is making changes to config files, there is great value in keeping previous changes, at least until the changes are validated. If a user is making changes to a spreadsheet, a periodic snapshot may or may not catch a specific change they wish to recapture.\n Which brings us to the question: which applications are users using? Many modern desktop applications and operating systems provide a built-in file version history. Most developers use a revision system and are taught the mantra \u201ccommit early and often\u201d. A lot of business applications operate online or are hosted in an external cloud, often providing a version history.\n Only you can understand what applications your users are using, if they are taking advantage of built-in history/revision systems, and if they are bugging you for file restores because they aren\u2019t using revisioning applications or keep forgetting to commit or save versions. You also know which systems are under your control and what type of data is important enough to warrant keeping previous versions using OpenZFS snapshots.\n  If you have lots of storage capacity, the cost of archiving snapshots can be low. However, scheduled snapshots do add up. Consider the math: taking 1 snapshot of a dataset every hour results in 168 snapshots per week\u2014in other words, it would take about 6 weeks on that schedule to achieve that 1000+ snapshots per dataset performance hit. For this example, one would want to consider if a snapshot was needed every hour of every day, as well as when to start pruning older snapshots.\n Ask yourself: is there value in keeping a snapshot of a dataset at 10:00 am and 11:00 am from 3 months ago? 1 month ago? Last week?\n  This is the other side of the previous question. Will it be a big deal if you delete that snapshot of the filesystem at 10:00 am from 5 weeks ago? If not, how far back do you need to go to still have snapshots of value?\n Perhaps your snapshots are activity-based rather than schedule-driven? If so, do you still need to access data from 3 pkg-updates ago?\n Ask yourself: how much will it cost you in time and effort if a specific revision is no longer available?\n  By now, you should have a better idea of what data is important to snapshot and how often you want to capture that data. Next, you\u2019ll want to determine if you have enough storage capacity to maintain the desired number of snapshots. If capacity becomes a concern, you can decide if it is worthwhile to add more capacity or to reconsider your snapshot pruning schedule.\n  Start by listing the\u00a0 space\u00a0property ( -o) of the pool. Here is a snipped example of the \u00a0tank\u00a0poolon my laptop:\n Zfs list -o space\rNAME AVAIL USED USEDSNAP USEDDS USEDREFRESERV USEDCHILD\rtank\t\t 270G 69.2G 0 88K 0 69.2G\rtank/ROOT\t 270G 44.4G 0 88K 0 44.4G\rtank/ROOT/mar26\t 270G 41.6G 18.7G 23.0G \t 0 0\rtank/usr/home/dru 270G 4.34G 1.17G 3.17G 0 2.36M\n  USED:\u00a0amount being used (as with any filesystem, OpenZFS performance will start to suffer when it gets close to capacity; typically you want to stay below 80% or consider adding more capacity as the system starts to approach 90%)\n In this example, there is still plenty of storage capacity on this system. It is interesting to note that over 25% of the space usage in\u00a0 dru\u2019s home directory is used by snapshots.\n On a system with many snapshots, this type of listing gives a quick glance of which filesystems are consuming the most snapshot space as well as an overall view of how much capacity is still available on the specified pool.\n You can also zero in on a particular dataset. Note that the last command was\u00a0 zpool\u00a0(in order to see pool usage) while this command uses\u00a0 zfs\u00a0(as I\u2019m listing a dataset). This time I\u2019ll\u00a0 get\u00a0the\u00a0 usedbysnapshots\u00a0property of my home directory dataset:\n  As expected, the space used by snapshots matches the\u00a0 1.17G\u00a0seen in the previous listing.\n While the\u00a0 usedbysnapshots\u00a0property gives an idea of how much space is consumed by snapshots, as well as how much space would be freed if all the snapshots in a dataset were destroyed, it does not indicate how much space you\u2019ll get back if you start pruning only some of the snapshots. Due to its COW nature, OpenZFS can\u2019t free blocks that are still being referred to.\n As an example, I\u2019ll create a listing that shows the NAME, WRITTEN, REFER, and USED columns (in that order) of just the snapshots in my home directory:\n zfs list -t all -o name,written,refer,used | grep dru@\rtank/usr/home/dru@test-backup\t 2.71G\t2.71G\t\t 176M\rtank/usr/home/dru@homedir. 176M\t2.71G\t\t12.6M\rtank/usr/home/dru@homedir-mod\t 18.5M\t2.71G\t\t18.1M\n The\u00a0 written\u00a0property is useful for understanding snapshot growth as it represents the amount of referenced space written to the dataset since that snapshot was taken. The\u00a0 used\u00a0column indicates how much of the data is unique to that snapshot; in other words, how much space will be freed if that particular snapshot is deleted.\n Performing a verbose dry-run ( -nv) will show the amount of space that would be reclaimed by destroying the specified snapshot. The amount will match the\u00a0 used\u00a0column seen in the listing above:\n zfs destroy -nv tank/usr/home/dru@test-backup\rwould destroy tank/usr/home/dru@test-backup\rwould reclaim 176M\rzfs destroy -nv tank/usr/home/dru@homedir\rwould destroy tank/usr/home/dru@homedir\rwould reclaim 12.6M\rzfs destroy -nv tank/usr/home/dru@homedir-mod\rwould destroy tank/usr/home/dru@homedir-mod\rwould reclaim 18.1M\n Want to learn more about ZFS? We consistently write about the awesome powers of OpenZFS in our article series.\n  Understanding which data benefits from being in a snapshot and how long it makes sense to keep snapshots will help you get the most out of OpenZFS snapshots. Pruning snapshots to just the ones you need will make it easier to find the data you want to restore, save disk capacity, and prevent performance bottlenecks on your OpenZFS system.\n At Klara, we have an entire team dedicated to helping you with your FreeBSD projects. Whether you\u2019re planning a FreeBSD project, or are in the middle of one and need a bit of extra insight, we\u2019re here to help!", "posttime": "2021-07-29 22:02:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "openzfs,\u5feb\u7167", "title": "\u8ba9\u6211\u4eec\u8c08\u8c08 OpenZFS \u5feb\u7167", "title_en": "Let\u2019s Talk OpenZFS Snapshots", "transed": 1, "url": "https://klarasystems.com/articles/lets-talk-openzfs-snapshots/", "via": "", "real_tags": ["openzfs", "\u5feb\u7167"]}, {"category": "", "categoryclass": "", "imagename": "434ebcd6b3084bcf45937befb9608a3d.png", "infoid": 1070270, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "morloc \u662f\u4e00\u79cd\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u5176\u4e2d\u7684\u51fd\u6570\u662f\u4ece\u5916\u56fd\u8bed\u8a00\u4e2d\u5bfc\u5165\u7684\uff0c\u5e76\u7edf\u4e00\u5728\u4e00\u4e2a\u901a\u7528\u7c7b\u578b\u7cfb\u7edf\u4e0b\u3002\u7f16\u8bd1\u5668\u751f\u6210\u8de8\u8bed\u8a00\u7ec4\u5408\u51fd\u6570\u6240\u9700\u7684\u4ee3\u7801\uff0c\u5e76\u6307\u5bfc\u6570\u636e\u9a8c\u8bc1\u3001\u7c7b\u578b/\u683c\u5f0f\u8f6c\u6362\u3001\u6570\u636e\u7f13\u5b58\u3001\u5206\u5e03\u5f0f\u8ba1\u7b97\u548c\u6587\u4ef6\u8bfb\u53d6/\u5199\u5165\u7b49\u65e5\u5e38\u4efb\u52a1\u7684\u81ea\u52a8\u5316\u3002\u6700\u7ec8\u76ee\u6807\u662f\u5c06 morloc \u5f00\u53d1\u6210\u4e00\u79cd\u67e5\u8be2\u8bed\u8a00\uff0c\u8be5\u8bed\u8a00\u4ece\u65e0\u9650\u7684\u51fd\u6570\u5e93\u548c\u51fd\u6570\u7ec4\u5408\u4e2d\u8fd4\u56de\u4f18\u5316\u7684\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u60f3\u76f4\u63a5\u4f7f\u7528\u4ee3\u7801\uff0c\u8bf7\u5b8c\u6210\u5b89\u88c5\u90e8\u5206\u4e2d\u7684\u6b65\u9aa4\uff0c\u7136\u540e\u8f6c\u5230 demo/01_sequence_analysis \u4e2d\u7684\u9879\u76ee\u3002\u8be5\u9879\u76ee\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u4e2d\uff0c\u5728 v1.0 \u53d1\u5e03\u4e4b\u524d\u6ca1\u6709\u7a33\u5b9a\u6027\u4fdd\u8bc1\u3002\u975e\u5e38\u6b22\u8fce\u62c9\u53d6\u8bf7\u6c42\u3001\u95ee\u9898\u62a5\u544a\u548c\u79c1\u4fe1\u3002 morloc \u8fd8\u4f9d\u8d56\u4e8e CPAN \u7684 JSON::XS perl \u6a21\u5757\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u5b89\u88c5\uff1a\u5bf9\u4e8e R \u652f\u6301\uff0c\u60a8\u9700\u8981\u4ece github \u5b89\u88c5 rmorlocinternals \u5e93\uff0c\u5728 R \u4f1a\u8bdd\u4e2d\uff0c\u8fd0\u884c\uff1a \u6700\u540e\uff0c\u5982\u679c\u60a8\u6b63\u5728\u4f7f\u7528vim\uff0c\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u5b89\u88c5 morloc \u8bed\u6cd5\u9ad8\u4eae\uff1a\u5c06\u5176\u7c98\u8d34\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff08\u4f8b\u5982\u201chello.loc\u201d\uff09\uff0c\u7136\u540e\u5b83\u53ef\u4ee5\u88ab\u5176\u4ed6 morloc \u6a21\u5757\u5bfc\u5165\u6216\u76f4\u63a5\u7f16\u8bd1\u6210\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5bfc\u51fa\u7684\u672f\u8bed\u90fd\u662f\u4e00\u4e2a\u5b50\u547d\u4ee4\u3002\n\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a\u201cnexus\u201d\u7684\u6587\u4ef6\u3002 nexus \u6587\u4ef6\u662f\u7528\u6237\u5c06\u4e0e\u4e4b\u4ea4\u4e92\u7684\u53ef\u6267\u884c\u811a\u672c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5b83\u662f\u552f\u4e00\u751f\u6210\u7684\u6587\u4ef6\u3002 import cppbase (fold, map, add, mul)export squareexport sumOfSquaressquare x = mul x xsumOfSquares xs = fold add 0 (map square xs) install \u547d\u4ee4\u4ecegithub repo \u514b\u9686cppbase repo \u5230\u672c\u5730\u76ee\u5f55~/.morloc/lib\u3002 morloc make -o nexus \u547d\u4ee4\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a nexus \u7684\u6587\u4ef6\uff0c\u5b83\u662f\u5bfc\u51fa\u51fd\u6570\u7684\u53ef\u6267\u884c\u63a5\u53e3\u3002 $ ./nexus -h \u5bfc\u51fa\u4ee5\u4e0b\u547d\u4ee4\uff1a square param 1: Num return: Num sumOfSquares param 1: [Num] return: Num fibplot \u51fd\u6570\u4f7f\u7528 C++ \u51fd\u6570\u8ba1\u7b97\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u5e76\u4f7f\u7528 R \u51fd\u6570\u7ed8\u5236\u5b83\u3002 R \u51fd\u6570 plotPDF \u662f\u4e00\u4e2a\u5b8c\u5168\u6b63\u5e38\u7684 R \u51fd\u6570\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6837\u677f\uff1a morloc \u7c7b\u578b\u7cfb\u7edf\u7684\u7b2c\u4e00\u7ea7\u57fa\u672c\u4e0a\u662f\u8de8\u8bed\u8a00\u6269\u5c55\u7684 System F\u3002\u4e00\u4e2a\u7ed9\u5b9a\u7684\u51fd\u6570\u5bf9\u4e8e\u5b83\u5b9e\u73b0\u7684\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u4e00\u4e2a\u901a\u7528\u7c7b\u578b\u548c\u4e00\u4e2a\u7279\u6b8a\u7c7b\u578b\u3002 map :: (a -&gt; b) -&gt; [a] -&gt; [b]map Cpp :: (a -&gt; b) -&gt; &quot;std::vector&lt;$1&gt;&quot; a -&gt; &quot;std::vector&lt;$1&gt;&quot; bmap Python3 :: (a -&gt; b) -&gt; list a -&gt; list b\n\u4e00\u822c\u7b7e\u540d\u770b\u8d77\u6765\u4e0e Haskell \u7b49\u4ef7\u7684\u51e0\u4e4e\u76f8\u540c\uff08\u9664\u4e86 morloc \u901a\u7528\u91cf\u5316\u76ee\u524d\u662f\u660e\u786e\u7684\uff09\u3002 C++ \u7684\u5217\u8868\u7c7b\u578b\u6784\u9020\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u201c\u7c7b\u578b\u6784\u9020\u51fd\u6570\u201d\uff0c\u56e0\u4e3a\u5b83\u4eec\u7528\u4e8e\u521b\u5efa\u8bed\u6cd5\u6b63\u786e\u7684 C++ \u7c7b\u578b\u5b57\u7b26\u4e32\u3002\u4f8b\u5982\uff0c\u5982\u679c\u7c7b\u578b\u53d8\u91cf ai \u88ab\u63a8\u65ad\u4e3a int\uff0c\u5219\u5728\u751f\u6210\u7684\u4ee3\u7801\u4e2d\u5c06\u4f7f\u7528 C++ \u7c7b\u578b std::vector&lt;int&gt;\u3002\u5728 python \u7c7b\u578b\u6784\u9020\u51fd\u6570\u5217\u8868\u4e2d\u4e5f\u4f1a\u53d1\u751f\u540c\u6837\u7684\u60c5\u51b5\uff0c\u9664\u4e86\u8fd9\u91cc\u751f\u6210\u76f8\u540c\u7684 Python \u7c7b\u578b\uff0c\u800c\u4e0d\u7ba1 a \u7684\u7c7b\u578b\u3002 import cppbase (fold, map, add, mul)export squareexport sumOfSquaressquare x = mul x xsumOfSquares xs = fold add 0 (map square xs) \u8fd9\u4e2a\u4f8b\u5b50\u65e0\u6cd5\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6ca1\u6709\u4efb\u4f55\u51fd\u6570\u88ab\u5bfc\u5165\u6216\u6765\u6e90\uff0c\u4f46\u5b83\u53ef\u4ee5\u88ab\u7c7b\u578b\u68c0\u67e5\uff1a\u6dfb\u52a0:: Num -&gt; Num -&gt; Numadd Cpp :: double -&gt; double -&gt; doublemul :: Num -&gt; Num -&gt; Nummul Cpp :: double -&gt; double -&gt; doublefold :: (b -&gt; a -&gt; b) - &gt; b -&gt; [a] -&gt; bfold Cpp :: (b -&gt; a -&gt; b) -&gt; b -&gt; &quot;std::vector&lt;$1&gt;&quot; a -&gt; bmap :: (a -&gt; b) -&gt; [a] -&gt; [b]map Cpp :: (a -&gt; b) -&gt; &quot;std::vector&lt;$1&gt;&quot; a -&gt; &quot;std::vector&lt;$1&gt;&quot; bsquare x = mul x xsumOfSquares xs = fold add 0 (map square xs) \u7c7b\u578b\u68c0\u67e5\u5668\u5c06\u7a0b\u5e8f\u7684\u6bcf\u4e2a\u5b50\u8868\u8fbe\u5f0f\u4e0e\u4e00\u7ec4\u7c7b\u578b\u76f8\u5173\u8054\u3002 mul \u4e2d\u7684\u7279\u5b9a\u7c7b\u578b\u4fe1\u606f\u8db3\u4ee5\u63a8\u65ad\u7a0b\u5e8f\u4e2d\u6bcf\u4e2a\u5176\u4ed6 C++ \u51fd\u6570\u7684\u5177\u4f53\u7c7b\u578b\u3002 sumOfSquares \u7684\u63a8\u65ad C++ \u7c7b\u578b\u662f mul \u7684\u5177\u4f53\u7c7b\u578b\u76ee\u524d\u88ab\u5199\u6210\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6b64\u51fd\u6570\u5e94\u63a5\u53d7\u4efb\u4f55\u6570\u5b57\uff08\u4f8b\u5982\uff0cint \u548c double\uff09\u3002\u6211\u6253\u7b97\u6700\u7ec8\u6dfb\u52a0\u8fd9\u4e2a\u529f\u80fd\uff0c\u4e5f\u8bb8\u662f\u4f7f\u7528 Haskell \u98ce\u683c\u7684\u7c7b\u578b\u7c7b\u7cfb\u7edf\u3002", "note_en": "morloc is a functional programming language where functions are imported fromforeign languages and unified under a common type system. The compilergenerates the code needed to compose functions across languages and also todirect automation of mundane tasks such as data validation, type/formatconversions, data caching, distributed computing, and file reading/writing. Theendgame is to develop  morloc into a query language that returns optimizedprograms from an infinite library of functions and compositions of functions.\n  If you want to get straight to playing with code, go through the steps in theinstallation section and then go to the project in  demo/01_sequence_analysis.\n  This project is under active development with no stability guarantees until thev1.0 release. Pull requests, issue reports, and private messages are verywelcome.\n    morloc also depends on the  JSON::XS perl module from CPAN, which can beinstalled as follows:\n    For R support, you need to install the  rmorlocinternals library from github,in an R session, run:\n      Last of all, if you are working in vim, you can install  morloc syntax highlighting as follows:\n     Paste this into a file (e.g. &#34;hello.loc&#34;) and then it can be imported by other morloc modules or directly compiled into a program where every exported termis a subcommand.\n  This will generate a single file named &#34;nexus&#34;. The nexus file is the executablescript that the user will interact with. For this simple example, it is theonly generated file.\n        import cppbase (fold, map, add, mul)export squareexport sumOfSquaressquare x = mul x xsumOfSquares xs = fold add 0 (map square xs)\n   The  install command clones the  cppbase repo from github repo into the local directory ~/.morloc/lib. The  morloc make -o nexus command will generate a file named nexus, which is an executable interface to the exported functions.\n  $ ./nexus -hThe following commands are exported: square param 1: Num return: Num sumOfSquares param 1: [Num] return: Num\n       The  fibplot function calculates Fibonacci numbers using a C++ function andplots it using an R function. The R function  plotPDF is a perfectly normal Rfunction with no extra boilerplate:\n   The first level of the  morloc type system is basically System F extendedacross languages. A given function will have a general type as well as aspecialized type for each language it is implemented in.\n  map :: (a -&gt; b) -&gt; [a] -&gt; [b]map Cpp :: (a -&gt; b) -&gt; &#34;std::vector&lt;$1&gt;&#34; a -&gt; &#34;std::vector&lt;$1&gt;&#34; bmap Python3 :: (a -&gt; b) -&gt; list a -&gt; list b\n The general signature looks almost the same as the Haskell equivalent (exceptthat  morloc universal quantification is currently explicit). The list typeconstructors for C++ are very literally &#34;type constructors&#34; in that they areused to create syntactically correct C++ type strings. If the type variable  ais inferred to be  int, for example, then the C++ type  std::vector&lt;int&gt; willbe used in the generated code. The same occurs in the python type constructors list, except here the same Python type is generated regardless of the type of a.\n  import cppbase (fold, map, add, mul)export squareexport sumOfSquaressquare x = mul x xsumOfSquares xs = fold add 0 (map square xs)\n This example cannot be compiled since none of the functions are imported orsourced, but it can be typechecked:\n  add :: Num -&gt; Num -&gt; Numadd Cpp :: double -&gt; double -&gt; doublemul :: Num -&gt; Num -&gt; Nummul Cpp :: double -&gt; double -&gt; doublefold :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; bfold Cpp :: (b -&gt; a -&gt; b) -&gt; b -&gt; &#34;std::vector&lt;$1&gt;&#34; a -&gt; bmap :: (a -&gt; b) -&gt; [a] -&gt; [b]map Cpp :: (a -&gt; b) -&gt; &#34;std::vector&lt;$1&gt;&#34; a -&gt; &#34;std::vector&lt;$1&gt;&#34; bsquare x = mul x xsumOfSquares xs = fold add 0 (map square xs)\n The typechecker associates each sub-expression of the program with a set oftypes. The specific type information in  mul is sufficient to infer concretetypes for every other C++ function in the program. The inferred C++ type of sumOfSquares is\n    The concrete type of  mul is currently written as a binary function ofdoubles. Ideally this function should accept any numbers (e.g., an  int and a double). I intend to add this functionallity eventually, perhaps with aHaskell-style typeclass system.", "posttime": "2021-07-29 22:02:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u901a\u7528,foreign,\u7c7b\u578b", "title": "Morloc\uff1a\u901a\u7528\u529f\u80fd\u7c7b\u578b\u7cfb\u7edf\u4e0b\u7edf\u4e00\u7684\u5916\u8bed", "title_en": "Morloc: Foreign languages unified under common functional type system", "transed": 1, "url": "https://github.com/morloc-project/morloc", "via": "", "real_tags": ["\u901a\u7528", "foreign", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070269, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL;DR\u2014\u2014\u5c1d\u8bd5\u5728\u8c37\u6b4c\u641c\u7d22 500 \u7f8e\u5143\u4ee5\u4e0b\u7684\u6700\u4f73\u81ea\u884c\u8f66\uff0c\u51e0\u4e4e\u6240\u6709\u7ed3\u679c\u90fd\u662f\u5783\u573e\u8bc4\u8bba\u7f51\u7ad9\uff0c\u5176\u4e2d\u5145\u65a5\u7740\u4e9a\u9a6c\u900a\u9644\u5c5e\u94fe\u63a5\u3002\u6700\u8fd1\uff0c\u6211\u51b3\u5b9a\u8981\u5b8c\u5168\u62e5\u62b1\u57ce\u5e02\u751f\u6d3b\u5e76\u8d2d\u4e70\u4e00\u8f86\u81ea\u884c\u8f66\u73af\u6e38\u7ebd\u7ea6\u3002\u6211\u4f4f\u5728\u66fc\u54c8\u987f\uff0c\u6240\u4ee5\u8fd9\u53ef\u4ee5\u8bf4\u4e0d\u662f\u6700\u806a\u660e\u7684\u4e3b\u610f\uff0c\u4f46\u662f\u563f\uff0c\u4efb\u4f55\u51cf\u5c11\u6211\u65e9\u4e0a\u901a\u52e4\u7684\u4e1c\u897f\u90fd\u662f\u6211\u4e66\u4e2d\u7684\u80dc\u5229\u3002\u9274\u4e8e\u8fd9\u5c06\u662f\u6211\u7684\u7b2c\u4e00\u8f86\u201c\u771f\u6b63\u7684\u201d\u81ea\u884c\u8f66\uff0c\u6211\u8ba4\u4e3a 500 \u7f8e\u5143\u662f\u4e00\u4e2a\u5408\u7406\u7684\u9884\u7b97\u3002\u6240\u4ee5\u5f88\u81ea\u7136\u5730\uff0c\u6211\u53bb\u8c37\u6b4c\u641c\u7d22\u201c500\u7f8e\u5143\u4ee5\u4e0b\u7684\u6700\u597d\u7684\u81ea\u884c\u8f66\u201d\u3002\u5ffd\u7565\u8d5e\u52a9\u5e7f\u544a\u7684\u9876\u884c\uff0c\u770b\u8d77\u6765\u8c37\u6b4c\u5df2\u7ecf\u5de7\u5999\u5730\u4e3a\u6211\u627e\u5230\u4e86\u4e00\u4e2a\u8bc4\u8bba\u7f51\u7ad9\uff08\u7cbe\u9009\u7247\u6bb5\u5757\uff09\u3002\u591a\u597d\uff01\u5f53\u7136\uff0c\u5b83\u5fc5\u987b\u662f\u4e00\u4e2a\u9ad8\u8d28\u91cf\u548c\u4fe1\u8a89\u826f\u597d\u7684\u7f51\u7ad9\uff0c\u5145\u6ee1\u4e86\u503c\u5f97\u4fe1\u8d56\u7684\u4fe1\u606f\u3002\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u7f51\u7ad9\u662f\u4f4d\u4e8e ArchitectureLab.net \u7684\u5728\u7ebf\u67b6\u6784\u201c\u6742\u5fd7\u201d\u3002\u4ed6\u4eec\u5c06\u81ea\u5df1\u63cf\u8ff0\u4e3a\u201c\u4e00\u4e2a\u7531\u4e13\u6ce8\u4e8e\u827a\u672f\u3001\u5efa\u7b51\u548c\u8bbe\u8ba1\u7684\u4eba\u7ec4\u6210\u7684\u5145\u6ee1\u6fc0\u60c5\u7684\u793e\u533a\uff0c\u4e3a\u4e16\u754c\u5404\u5730\u7684\u4e13\u4e1a\u4eba\u58eb\u63d0\u51fa\u7684\u6700\u975e\u51e1\u7684\u9879\u76ee\u63d0\u4f9b\u652f\u6301\u3002\u201d\u4e3a\u4ec0\u4e48\uff0c\u8bf7\u544a\u8bc9\uff0c\u4ed6\u4eec\u6b63\u5728\u5ba1\u67e5\u81ea\u884c\u8f66\uff1f\u4f60\u7684\u731c\u6d4b\u548c\u6211\u7684\u4e00\u6837\u597d\u3002\u4f46\u6211\u6562\u6253\u8d4c\uff0c\u8fd9\u4e0e\u4ed6\u4eec\u8bc4\u8bba\u7684\u6240\u6709\u81ea\u884c\u8f66\u90fd\u5728\u4e9a\u9a6c\u900a\u4e0a\u51fa\u552e\u5e76\u4e14\u6bcf\u4e2a\u94fe\u63a5\u90fd\u4f7f\u7528\u4e9a\u9a6c\u900a\u9644\u5c5e\u6807\u7b7e\u8fd9\u4e00\u4e8b\u5b9e\u6709\u5173\u3002\u5b83\u4e0e\u6574\u4e2a\u7f51\u7ad9\u4e0a\u7684\u5341\u51e0\u4e2a\u5e7f\u544a\uff08\u5176\u4e2d\u4e00\u4e9b\u662f\u81ea\u52a8\u64ad\u653e\u5e26\u58f0\u97f3\u7684\u89c6\u9891\uff09\u76f8\u5f97\u76ca\u5f70\u3002\u51fa\u4e8e\u597d\u5947\uff0c\u6211\u67e5\u770b\u4e86\u4ed6\u4eec\u7684 SimilarWeb \u9875\u9762\u4ee5\u4e86\u89e3\u4ed6\u4eec\u7684\u6d41\u91cf\u7edf\u8ba1\u6570\u636e\uff1a\u6bcf\u6708 237k \u8bbf\u95ee\u8005\uff01\u867d\u7136\u8fd9\u53ea\u662f\u6765\u81ea SimilarWeb \u7684\u4f30\u8ba1\uff0c\u4f46\u5f88\u53ef\u80fd ArchitectureLab.net \u6b63\u5728\u83b7\u5f97\u4e00\u4e9b\u4e25\u91cd\u7684\u6d41\u91cf\uff0c\u5176\u4e2d 85% \u6765\u81ea\u641c\u7d22\uff08\u611f\u8c22\uff0c\u8c37\u6b4c\uff01\uff09\u3002\u516c\u5e73\u5730\u8bf4\uff0c\u81f3\u5c11\u5185\u5bb9\u4f3c\u4e4e\u662f\u539f\u521b\u7684\uff0c\u57fa\u4e8e\u968f\u673a\u62bd\u53d6\u7684\u51e0\u53e5\u8bdd\u7684\u641c\u7d22\u3002\u8fd9\u7bc7\u8bc4\u8bba\u6587\u7ae0\u4ecd\u7136\u7f3a\u4e4f\u6df1\u5ea6\uff0c\u53ef\u4ee5\u6839\u636e\u4e9a\u9a6c\u900a\u4ea7\u54c1\u9875\u9762\u4e0a\u7684\u4fe1\u606f\u8f7b\u677e\u7f16\u5199\u3002\n\u5728\u7b2c\u4e00\u9875\u663e\u793a\u7684\u201c500 \u7f8e\u5143\u4ee5\u4e0b\u7684\u6700\u4f73\u81ea\u884c\u8f66\u201d\u7684\u7ed3\u679c\u4e2d\uff0c\u6211\u53d1\u73b0 10 \u4e2a\u7f51\u7ad9\u4e2d\u6709 8 \u4e2a\u4ec5\u4f7f\u7528\u9644\u5c5e\u94fe\u63a5\u5217\u51fa\u5728\u4e9a\u9a6c\u900a\u4e0a\u627e\u5230\u7684\u4ea7\u54c1\u3002\u4e9a\u9a6c\u900a\u5728\u5176\u76ee\u5f55\u4e2d\u9009\u62e9\u7684\u81ea\u884c\u8f66\u6709\u9650\uff0c\u8bb8\u591a\u4fe1\u8a89\u826f\u597d\u7684\u54c1\u724c\u5b8c\u5168\u88ab\u6392\u9664\u5728\u8fd9\u4e9b\u8bc4\u8bba\u7f51\u7ad9\u4e4b\u5916\u3002\u8c37\u6b4c\u8fd9\u6837\u7684\u641c\u7d22\u5de8\u5934\uff0c\u62e5\u6709\u5343\u5343\u4e07\u4e07\u7684\u806a\u660e\u624d\u667a\uff0c\u600e\u4e48\u4f1a\u5e2e\u6211\u627e\u5230\u597d\u4ea7\u54c1\u4e70\u5462\uff1f\u6211\u8ba4\u4e3a\u7b54\u6848\u662f\u56e0\u4e3a\u8fd9\u6837\u505a\u4e0d\u7b26\u5408\u4ed6\u4eec\u7684\u6700\u4f73\u5229\u76ca\u3002\u4ed6\u4eec\u559c\u6b22\u5927\u591a\u6570\u6d88\u8d39\u8005\u4f1a\u67e5\u770b\u8fd9\u4e9b\u8bc4\u8bba\uff0c\u70b9\u51fb\u8fdb\u5165\u4e9a\u9a6c\u900a\u5e76\u6beb\u4e0d\u72b9\u8c6b\u5730\u8fdb\u884c\u8d2d\u4e70\u3002\u4e0e\u8bb8\u591a\u5176\u4ed6\u79d1\u6280\u5de8\u5934\u4e00\u6837\uff0c\u8c37\u6b4c\u4ece\u4e0d\u77e5\u60c5\u7684\u7528\u6237\u7fa4\u4e2d\u53d7\u76ca\u3002\u6700\u540e\uff0c\u7ecf\u8fc7\u6570\u5468\u7684\u632b\u6298\u5c1d\u8bd5\u7814\u7a76\u81ea\u884c\u8f66\u540e\uff0c\u6211\u6700\u7ec8\u4ece\u5f53\u5730\u5546\u5e97\u8d2d\u4e70\u4e86\u4e00\u8f86\u4e8c\u624b\u81ea\u884c\u8f66\u3002\u8c37\u6b4c\u6700\u7ec8\u786e\u5b9e\u5728\u7814\u7a76\u8fc7\u7a0b\u4e2d\u6709\u6240\u5e2e\u52a9\uff0c\u4f46\u53ea\u6709\u5728\u7cbe\u5fc3\u8bbe\u8ba1\u6211\u7684\u641c\u7d22\u67e5\u8be2\u5e76\u7b5b\u9009\u4e86\u6570\u5341\u4e2a\u8e69\u811a\u7684\u8bc4\u8bba\u7f51\u7ad9\u4e4b\u540e\u3002\u5982\u679c\u60a8\u5bf9 DuckDuckGo \u7684\u6bd4\u8f83\u611f\u5230\u597d\u5947\uff0c\u90a3\u4e48\u7ed3\u679c\uff08\u53ef\u4ee5\u8bf4\uff09\u7a0d\u5fae\u597d\u4e00\u4e9b\u3002\u867d\u7136\u7b2c\u4e00\u4e2a\u7ed3\u679c\u4ecd\u7136\u662f\u4e9a\u9a6c\u900a\u9644\u5c5e\u8bc4\u8bba\u7f51\u7ad9\uff0c\u4f46\u6211\u786e\u5b9e\u5728\u5176\u4ed6\u7ed3\u679c\u4e2d\u770b\u5230\u4e86\u5176\u4ed6\u4e00\u4e9b\u66f4\u5927\u7684\u54c1\u724c\u3002\u6211\u5f88\u60f3\u542c\u542c\u4f60\u7684\u60f3\u6cd5\u3002\u8bf7\u968f\u65f6\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\u6216\u56de\u590d\u63a8\u6587\u3002", "note_en": "TL;DR -- Tried searching Google for best bicycles under $500 and nearly all results were spammy review sites riddled with Amazon affiliate links.\n Recently, I decided that I wanted to fully embrace city life and purchase a bike to ride around New York. I live in Manhattan so it\u2019s arguably not the brightest idea, but hey anything that cuts down my morning commute is a win in my book.\n Given this would be my first \u201creal\u201d bike, I figured $500 was a fair budget. So naturally, I went to Google and searched for \u201c best bicycles under $500.\u201d\n   Ignoring the top row of sponsored ads, it looks like Google has cleverly found a review site for me (featured snippets block). How nice! Surely it must be a high quality and reputable website, full of trustworthy information.\n First thing to note is that the website is an online architecture \u201cmagazine\u201d located at  ArchitectureLab.net. They describe themselves as a  \u201cpassion driven community of people specialized in art, architecture and design that feeds the world the most extraordinary projects brought forward by professionals around the globe.\u201d Why, pray tell, are they reviewing bicycles? Your guess is as good as mine. But I bet it has something to do with the fact that all of the bikes they review are sold on Amazon and that every link uses an Amazon affiliate tag. It goes quite well with the dozen or so ads plastered across the site (some of which are autoplaying videos with sound).\n   Out of curiosity, I took a look at their SimilarWeb page to get a sense of their traffic stats:\n  237k visitors per month! Granted it\u2019s just an estimate from SimilarWeb but still, it\u2019s very likely that ArchitectureLab.net is getting some serious traffic, of which 85% is from search (thanks, Google!). To be fair, at least the content seems to be original, based on a search of a few sentences pulled at random. This review post is still lacking in depth and could have been easily written based on the information found on the Amazon product page.\n  Of the results shown on the first page for \u2018best bicycles under $500\u2019 I found that  8 out of 10 websites only list products found on Amazon using affiliate links. Amazon has a limited selection of bikes in their catalog and many of the more reputable brands are completely left out of these review sites.\n How is it that a search giant like Google, with thousands of brilliant minds, can\u2019t help me find good products to buy? I think the answer is because it\u2019s not in their best interest to do so. They like that most consumers will look at these reviews, click through to Amazon and make their purchase with little hesitation. Google, like many of the other tech giants, benefits from an uninformed user base.\n In the end, after spending weeks of frustration trying to research bicycles, I wound up buying a used bike from a local shop. Google did end up being helpful in the research process but only after carefully crafting my search queries and sifting through dozens of crappy review sites.\n And if you\u2019re curious how DuckDuckGo compares,  the results were (arguably) slightly better. While the first result is still an Amazon affiliate review site, I did see some of the other, bigger brands mentioned on other results.\n I&#39;d love to hear your thoughts. Please feel free to\u00a0 email me\u00a0or  respondwith a Tweet.", "posttime": "2021-07-29 22:01:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,\u4e9a\u9a6c\u900a,\u8c37\u6b4c,google,\u641c\u7d22", "title": "\u4e9a\u9a6c\u900a\u6bc1\u4e86\u641c\u7d22\uff0c\u8c37\u6b4c\u4e5f\u5728\u5176\u4e2d", "title_en": "Amazon has ruined search and Google is in on it", "transed": 1, "url": "http://mdolon.com/essays/amazon-has-ruined-search-and-google-is-in-on-it", "via": "", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "\u8c37\u6b4c", "google", "\u641c\u7d22"]}, {"category": "", "categoryclass": "", "imagename": "3518ddd729ce9b529409cb6d943ca120.jpg", "infoid": 1070268, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5357\u975e\u5df2\u6210\u4e3a\u7b2c\u4e00\u4e2a\u6388\u4e88\u4e13\u5229\u7684\u56fd\u5bb6\uff0c\u8be5\u4e13\u5229\u5c06\u4eba\u5de5\u667a\u80fd\u547d\u540d\u4e3a\u5176\u53d1\u660e\u8005\uff0c\u5e76\u5c06\u4eba\u5de5\u667a\u80fd\u7684\u6240\u6709\u8005\u547d\u540d\u4e3a\u4e13\u5229\u6240\u6709\u8005\u3002\u8be5\u4e13\u5229\u7531\u8428\u91cc\u5927\u5b66\u6559\u6388\u745e\u5b89\u00b7\u963f\u535a\u7279 (Ryan Abbott) \u548c\u4ed6\u7684\u56e2\u961f\u83b7\u5f97\u4fdd\u62a4\uff0c\u4ed6\u4eec\u591a\u5e74\u6765\u4e00\u76f4\u4e0e\u4e16\u754c\u5404\u5730\u7684\u4e13\u5229\u5c40\u4e89\u8bba\u4e0d\u4f11\uff0c\u56e0\u4e3a\u4ed6\u4eec\u9700\u8981\u5c06\u4eba\u5de5\u667a\u80fd\u89c6\u4e3a\u53d1\u660e\u8005\u3002 Abbott \u4ee3\u8868 Stephen Thaler \u535a\u58eb\uff0c\u4ed6\u662f\u540d\u4e3a Dabus\uff08\u201c\u7edf\u4e00\u611f\u77e5\u7684\u81ea\u4e3b\u5f15\u5bfc\u88c5\u7f6e\u201d\uff09\u7684\u4eba\u5de5\u795e\u7ecf\u7cfb\u7edf\u7684\u521b\u9020\u8005\uff0cThaler \u58f0\u79f0\u8fd9\u662f\u63d0\u9ad8\u6293\u5730\u529b\u548c\u70ed\u4f20\u9012\u7684\u98df\u54c1\u5bb9\u5668\u7684\u552f\u4e00\u53d1\u660e\u8005\u3002\u81ea 2018 \u5e74\u4ee5\u6765\uff0c\u96c5\u57f9\u53ca\u5176\u56e2\u961f\u5df2\u5728\u82f1\u56fd\u3001\u6b27\u6d32\u548c\u7f8e\u56fd\u7b49\u5341\u591a\u4e2a\u53f8\u6cd5\u7ba1\u8f96\u533a\u63d0\u4ea4\u4e86\u5c06 Dabus \u5217\u4e3a\u53d1\u660e\u4eba\u7684\u4e13\u5229\u3002\u82f1\u683c\u5170\u548c\u5a01\u5c14\u58eb\u9ad8\u7b49\u6cd5\u9662\u53bb\u5e74\u7ad9\u5728\u82f1\u56fd\u77e5\u8bc6\u4ea7\u6743\u5c40\u7684\u4e00\u8fb9\uff0c\u62d2\u7edd\u4e86\u8fd9\u4e9b\u7533\u8bf7\uff0c\u627f\u8ba4\u867d\u7136 Dabus \u521b\u9020\u4e86\u8fd9\u4e9b\u53d1\u660e\uff0c\u4f46\u4e0d\u80fd\u4ee5\u5b83\u4e0d\u662f\u201c\u81ea\u7136\u4eba\u201d\u4e3a\u7531\u6388\u4e88\u4e13\u5229\u3002\u6b27\u6d32\u4e13\u5229\u5c40\u548c\u7f8e\u56fd\u4e13\u5229\u5546\u6807\u5c40\u4ee5\u540c\u6837\u7684\u7406\u7531\u53cd\u5bf9\uff0c\u96c5\u57f9\u7684\u56e2\u961f\u63d0\u51fa\u4e0a\u8bc9\u3002\u82f1\u56fd\u8428\u91cc\u5927\u5b66\u4ee5\u4eba\u4e3a\u672c AI \u7814\u7a76\u6240\u6240\u957f Adrian Hilton \u6559\u6388\u8868\u793a\uff0c\u4e16\u754c\u6b63\u5728\u201c\u4ece\u53d1\u660e\u5c5e\u4e8e\u4eba\u7c7b\u7684\u65f6\u4ee3\u8f6c\u53d8\u4e3a\u673a\u5668\u80fd\u591f\u5b9e\u73b0\u521b\u9020\u6027\u7684\u65f6\u4ee3\u3002\u6b65\u201d\u3002\u96c5\u57f9\u8ba4\u4e3a\uff0c\u73b0\u72b6\u4e0d\u518d\u9002\u5408\u76ee\u6807\uff0c\u53ef\u80fd\u4f1a\u4f7f\u4eba\u5de5\u667a\u80fd\u6295\u8d44\u9762\u4e34\u98ce\u9669\u3002\u4ed6\u5728\u63a5\u53d7\u300a\u6cf0\u6664\u58eb\u62a5\u300b\u91c7\u8bbf\u65f6\u8868\u793a\uff0c\u5c06\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u7684\u521b\u5efa\u8005\u547d\u540d\u4e3a\u53d1\u660e\u4eba\u5728\u6cd5\u5f8b\u4e0a\u662f\u6709\u98ce\u9669\u7684\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u4f1a\u5bf9\u4eba\u5de5\u667a\u80fd\u7684\u521b\u9020\u505a\u51fa\u5b9e\u8d28\u6027\u8d21\u732e\uff0c\u56e0\u6b64\u4f1a\u8fdd\u53cd\u4e13\u5229\u6cd5\u3002\u4ed6\u8fd8\u6307\u51fa\uff0c\u5728\u7814\u53d1\u4e2d\u8d8a\u6765\u8d8a\u591a\u5730\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6765\u53d1\u73b0\u65b0\u7684\u836f\u7269\u5316\u5408\u7269\u548c\u91cd\u65b0\u5229\u7528\u836f\u7269\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ed6\u8bf4\uff0c\u53ef\u80fd\u6709\u4e00\u9879\u53d1\u660e\u6709\u8d44\u683c\u83b7\u5f97\u4e13\u5229\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u4eba\u6709\u8d44\u683c\u6210\u4e3a\u53d1\u660e\u5bb6\uff0c\u5982\u679c\u8fd9\u610f\u5473\u7740\u4e13\u5229\u4e0d\u4f1a\u88ab\u6388\u4e88\uff0c\u5b83\u201c\u5bf9\u6295\u8d44\u4eba\u5de5\u667a\u80fd\u7684\u516c\u53f8\u8bf4\uff0c\u6bd4\u5982DeepMind\u3001\u897f\u95e8\u5b50\u6216\u8bfa\u534e\uff0c\u4f60\u4e0d\u80fd\u5728\u8fd9\u4e9b\u9886\u57df\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u201d\u3002\n\u5728\u8c08\u5230\u5357\u975e\u7684\u51b3\u5b9a\u65f6\uff0c\u4ed6\u544a\u8bc9\u666e\u6d1b\u65af\uff1a\u201c\u8fd9\u4e00\u7ed3\u679c\u4ee3\u8868\u4e86\u5bf9\u9f13\u52b1\u4eba\u4eec\u5236\u9020\u3001\u5f00\u53d1\u548c\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u4ee5\u4ea7\u751f\u5177\u6709\u793e\u4f1a\u4ef7\u503c\u7684\u521b\u65b0\u7684\u91cd\u8981\u6027\u7684\u7406\u89e3\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u6210\u4e3a\u4e16\u754c\u5176\u4ed6\u5730\u533a\u7684\u699c\u6837\uff0c\u56e0\u4e3a\u4e0d\u540c\u7684\u53f8\u6cd5\u7ba1\u8f96\u533a\u601d\u8003\u5982\u4f55\u6700\u597d\u5730\u9f13\u52b1\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u6765\u521b\u9020\u4eba\u7c7b\u5229\u76ca\u3002\u201d", "note_en": "South Africa has become the first country to award a patent that names an artificial intelligence\u00a0as its\u00a0inventor and the AI\u2019s owner as the\u00a0patent&#39;s owner.\n  The patent was secured\u00a0by University of Surrey professor Ryan Abbott and his\u00a0team, who have\u00a0been at odds with patent offices around the world for years over the need to recognise artificial intelligences as inventors.\n  Abbott was representing Dr Stephen Thaler, creator of an artificial neural system named Dabus (&#39;device for the autonomous bootstrapping of unified sentience&#39;), which Thaler claims is the sole inventor of a food container that improves grip and heat transfer.\n  Abbott and his team have filed patents listing Dabus as the inventor in more than ten jurisdictions\u00a0since 2018, including in the UK, Europe and the US. The High Court in England and Wales last year sided with the UK Intellectual Property Office in refusing the applications,\u00a0accepting that while Dabus created the inventions, it cannot be granted a patent on the grounds that it isn\u2019t a \u2018natural person\u2019. The European Patent Office and the US Patent and Trademark Office objected on the same grounds, with Abbott\u2019s team appealing.\n  Professor Adrian Hilton, director of the institute for people-centred AI\u00a0at the\u00a0University of Surrey in the UK, said\u00a0the world was\u00a0\u201cmoving\u00a0from an age in which invention was the preserve of people to an\u00a0era\u00a0where machines are capable of realising the inventive step\u201d.\n  Abbott\u00a0argues that the status quo is no longer fit for purpose and could put investment in AI at risk.  Speaking to The Times , he said that naming the creator of the AI system as the inventor was\u00a0legally risky, as they would not have substantially contributed to what the AI had created and would therefore be breaking patent law.\n  He also pointed to the increasing use of AI in R&amp;D to discover new drug compounds and repurpose drugs. In such cases, he said, there may an invention that qualifies for a patent but not a person who qualifies as an inventor and if that means that a patent won\u2019t be granted, it \u201csays to companies that are investing in AI, like DeepMind or Siemens or Novartis, you can\u2019t use AI in these areas\u201d.\n  Wecloming the South Africa decision, he told GLP: \u201cThis outcome represents an understanding of the importance of encouraging people to make, develop and use AI to generate socially valuable innovation. We hope it will serve as an example to the rest of the world as different jurisdictions think through how best to encourage the use of artificial intelligence to generate human benefits.\u201d", "posttime": "2021-07-29 22:01:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,\u53d1\u5e03,africa", "title": "\u5357\u975e\u53d1\u5e03\u4e16\u754c\u9996\u4e2a\u4e13\u5229\uff0c\u5c06\u4eba\u5de5\u667a\u80fd\u5217\u4e3a\u53d1\u660e\u4eba", "title_en": "South Africa issues world\u2019s first patent listing AI as inventor", "transed": 1, "url": "https://www.globallegalpost.com/news/south-africa-issues-worlds-first-patent-listing-ai-as-inventor-161068982", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "\u53d1\u5e03", "africa"]}, {"category": "", "categoryclass": "", "imagename": "f66f9665f11b8dbe6f7d830b4fe70830.png", "infoid": 1070267, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u5f00\u59cb\u5728\u632a\u5a01\u8bed\u7684 Google \u641c\u7d22\u4e2d\u770b\u5230\u5927\u91cf\u5783\u573e\u90ae\u4ef6\u3002\u6211\u4e0d\u662f\u5728\u8c08\u8bba\u4e00\u4e2a\u7cdf\u7cd5\u7684\u7ed3\u679c\uff0c\u90a3\u91cc\u548c\u90a3\u91cc\u7684\u6392\u540d\u90fd\u5f88\u7cdf\u7cd5\u3002\u4e0d\uff0c\u6211\u8bf4\u7684\u662f\u6700\u8fd1\u51e0\u5929\u6211\u8d8a\u6765\u8d8a\u6ce8\u610f\u5230\u7684\u5927\u89c4\u6a21\u5783\u573e\u90ae\u4ef6\u64cd\u4f5c\u3002\u592a\u7cdf\u7cd5\u4e86\uff0c\u6211\u786e\u4fe1\u8fd9\u4e2a\u5783\u573e\u90ae\u4ef6\u57df\u6b63\u5728\u4ece\u632a\u5a01\u7684\u6240\u6709 Google \u641c\u7d22\u6d41\u91cf\u4e2d\u5927\u91cf\u51cf\u5c11\u3002\u6211\u57fa\u672c\u4e0a\u53ef\u4ee5\u641c\u7d22\u4efb\u4f55\u5185\u5bb9\uff0c\u5e76\u4e14\u5f88\u6709\u53ef\u80fd\u5728\u524d\u51e0\u9875\u4e2d\u627e\u5230\u5b83\u3002\u4ed6\u4eec\u73b0\u5728\u4f7f\u7528\u7684\u57df\u540d\u662f\u4e39\u9ea6\u57df\u540d havfruen4220.dk\u3002 \uff08\u201cHavfruen\u201d\uff0c\u610f\u601d\u662f\u201c\u7f8e\u4eba\u9c7c\u201d\uff09\u6240\u4ee5\u6211\u627e\u5230\u4e86\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5b83\u6709\u4e00\u4e2a\u611a\u8822\u7684\u57df\u548c\u4e00\u4e2a\u611a\u8822\u7684\u56fe\u7247\uff0c\u53ef\u4ee5\u5728\u8c37\u6b4c\u641c\u7d22\u4e0a\u6392\u540d\u3002\u6211\u6709\u4e00\u4e9b\u4f8b\u5b50\u5417\uff1f\u6211\u80af\u5b9a\u4f1a\u3002\u641c\u7d22\u6211\u7684\u54c1\u724c\u4e4b\u4e00\uff1f\u662f\u7684\uff0c\u5783\u573e\u90ae\u4ef6\u7ad9\u70b9\u6392\u5728\u7b2c 10 \u4f4d\u3002\u632a\u5a01\uff08\u548c\u5176\u4ed6\u4e00\u4e9b\u56fd\u5bb6/\u5730\u533a\uff09\u7684\u5927\u578b IT \u54a8\u8be2\u516c\u53f8\uff1f 11. \u5f53\u5730\u62a5\u7eb8\uff1f\u7b2c 3 \u9875\u9876\u90e8\u3002\u8ba9\u6211\u4eec\u5c1d\u8bd5\u53e6\u4e00\u4e2a\u3002\u8ba9\u6211\u4eec\u8bd5\u8bd5\u201cREMA 1000\u201d\uff08\u632a\u5a01\u6700\u5927\u7684\u6742\u8d27\u8fde\u9501\u5e97\uff09\u3002\u679c\u7136\uff0c\u5728\u7b2c 5 \u9875\u7684\u9876\u90e8\uff0c\u6211\u4eec\u6709\u8fd9\u4e2a\uff1a\u8ba9\u6211\u4eec\u5c1d\u8bd5\u4e00\u4e9b\u5b8c\u5168\u4e0d\u540c\u548c\u968f\u673a\u7684\u4e1c\u897f\u3002\u4e5f\u8bb8\u4eba\u4eec\u6b63\u5728\u60f3\u77e5\u9053\u4e00\u4e9b\u4e8b\u60c5\u3002\u8ba9\u6211\u4eec\u8bd5\u8bd5\u201c\u591a\u4e45\u4e00\u6b21\u201d\uff0c\u8ba9 Google \u4e3a\u6211\u4eec\u6311\u9009\u4e00\u4e2a\u4e1c\u897f\u3002\n\u6240\u4ee5\u7b2c\u4e00\u4e2a\u5efa\u8bae\u7684\u7ed3\u679c\u662f\u632a\u5a01\u8bed\u201c\u4f60\u5e94\u8be5\u591a\u4e45\u6d17\u6fa1\u4e00\u6b21\u201d\u3002\u8ba9\u6211\u4eec\u8bd5\u8bd5\u5427\u3002\u632a\u5a01\u8bed\u4e2d\u7684\u201c\u5982\u4f55\u8ba1\u7b97\u767e\u5206\u6bd4\u201d\u600e\u4e48\u6837\uff08\u8c37\u6b4c\u5f00\u59cb\u8f93\u5165\u201cHvordan\u201d\u65f6\u7684\u9996\u8981\u5efa\u8bae\uff09\u201c\u82f9\u679c\u591a\u4e45\u66f4\u65b0\u4e00\u6b21 iOS\u201d\uff08\u201chvor ofte oppdaterer apple iOS\u201d\uff09\u600e\u4e48\u6837\uff1f\u6709\u5f88\u591a\u9875\u9762\u3002\u5b83\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4f3c\u4e4e\u662f\u6700\u8fd1\u51e0\u5929\u521b\u5efa\u7684\u76f8\u5bf9\u8f83\u65b0\u7684\u3002\u5149\u770b\u7ed3\u679c\uff0c\u6ca1\u6709\u591a\u5927\u610f\u4e49\u3002\u5b83\u662f\u4ece\u4e00\u5806\u4e0d\u540c\u7684\u5730\u65b9\u522e\u4e0b\u6765\u7684\u3002\u6709\u4e9b\u6765\u81ea Twitter\uff0c\u6709\u4e9b\u6765\u81ea\u65b0\u95fb\u7f51\u7ad9\uff0c\u6709\u4e9b\u6765\u81ea\u5176\u4ed6\u968f\u673a\u7f51\u7ad9\u3002\u5185\u5bb9\u4f3c\u4e4e\u6765\u81ea\u591a\u4e2a\u6765\u6e90\u3002\u8be5\u9875\u9762\u7531 Cloudflare \u63d0\u4f9b\u3002\u641c\u7d22\u786e\u5207\u7684\u5b57\u7b26\u4e32\u8868\u660e\u4f7f\u7528\u7684\u57df\u66f4\u591a\u3002\u4ed6\u4eec\u90fd\u4f7f\u7528\u9876\u7ea7\u57df\u540d .dk\u3002\u95ee\u9898\u662f\uff0c\u5982\u679c\u6211\u4eec\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u6211\u4eec\u5c31\u6ca1\u6709\u53ef\u7528\u7684\u5b9e\u9645\u5185\u5bb9\u3002\u8be5\u9875\u9762\u4f7f\u7528\u4f2a\u88c5\uff0c\u5e76\u4e14\u53ef\u80fd\u4ec5\u5728\u60a8\u4ece Google \u6293\u53d6\u5de5\u5177 IP \u8bbf\u95ee\u65f6\u624d\u663e\u793a\u5185\u5bb9\u3002\n\u5982\u679c\u6211\u901a\u8fc7\u66f4\u6539\u6211\u7684\u7528\u6237\u4ee3\u7406\u6765\u5047\u88c5\u662f Google\uff0c\u6211\u53ea\u4f1a\u5f97\u5230\u6211\u5411\u60a8\u5c55\u793a\u7684\u611a\u8822\u56fe\u50cf\u3002\u5982\u679c\u6211\u5220\u9664 GoogleBot \u7528\u6237\u4ee3\u7406\uff0c\u5219\u6709\u4e00\u4e2a\u533a\u522b\uff1a\u63d2\u5165\u7684 Javascript \u5c06\u7528\u6237\u91cd\u5b9a\u5411\u5230\u53e6\u4e00\u4e2a\u9875\u9762\uff1a\u5728\u7b2c\u4e00\u6b21\u91cd\u5b9a\u5411\u4e4b\u540e\uff0c\u8be5\u9875\u9762\u518d\u6b21\u5c06\u7528\u6237\u91cd\u5b9a\u5411\u5230\u5176\u4ed6\u8bc8\u9a97\u57df\u3002\u4e00\u4e9b\u5047\u65b0\u95fb\u7f51\u7ad9\u5047\u88c5\u662f\u632a\u5a01\u6700\u53d7\u6b22\u8fce\u7684\u65b0\u95fb\u7f51\u7ad9\u4e4b\u4e00\uff1b\u5176\u4ed6\u662f\u57fa\u672c\u7684\u201c\u60f3\u5728\u7f51\u4e0a\u5feb\u901f\u8d5a\u94b1\u201d\u7684\u7f51\u7ad9\u3002\u5047\u65b0\u95fb\u6587\u7ae0\u901a\u5e38\u7c7b\u4f3c\u4e8e\u201c\u8fd9\u4f4d\u632a\u5a01\u540d\u4eba\u63ed\u793a\u4e86\u4ed6\u662f\u5982\u4f55\u81f4\u5bcc\u7684\u201d\u3002\u5b83\u901a\u5e38\u4ee5\u67d0\u79cd\u52a0\u5bc6\u65b9\u6848\u7ed3\u675f\u3002\u8fd9\u4e9b\u9a97\u5c40\u5f88\u8001\uff0c\u4f46\u5b83\u4eec\u901a\u5e38\u6392\u540d\u4e0d\u4f73\u3002\u6211\u4ece\u6765\u6ca1\u6709\u89c1\u8fc7\u8fd9\u6837\u7684\u4e8b\u60c5\u3002\u5b83\u76ee\u524d\u662f\u632a\u5a01 Google \u641c\u7d22\u4e2d\u51e0\u4e4e\u6240\u6709\u5185\u5bb9\u7684\u6700\u4f73\u7ed3\u679c\u3002\u6211\u4eec\u53ef\u80fd\u90fd\u542c\u8bf4\u8fc7 Google \u7684\u6392\u540d\u5f88\u9760\u524d\uff0c\u800c\u4e14\u5f88\u96be\u9a97\u8fc7\u5b83\u3002\u6709\u4eba\u505a\u5230\u4e86\u3002\u6211\u4e0d\u4f1a\u5047\u88c5\u6211\u77e5\u9053\u4ed6\u4eec\u662f\u600e\u4e48\u505a\u5230\u7684\uff0c\u4f46\u6211\u60f3\u6211\u6709\u4e00\u4e9b\u60f3\u6cd5\u3002\u9996\u5148\uff0c\u6709\u65f6\u8c37\u6b4c\u641c\u7d22\u4e2d\u7684\u5185\u5bb9\u4f3c\u4e4e\u6709\u4e9b\u4e0d\u9519\uff0c\u6211\u81ea\u5df1\u5728\u641c\u7d22\u65f6\u591a\u6b21\u70b9\u51fb\u5b83\u3002\u5f53\u60a8\u5355\u51fb\u5b83\u65f6\uff0c\u5b83\u4f1a\u5c3d\u5176\u6240\u80fd\u963b\u6b62\u6d4f\u89c8\u5668\u5bfc\u822a\uff0c\u56e0\u6b64\u60a8\u65e0\u6cd5\u8fd4\u56de\u8c37\u6b4c\u3002\u5185\u5bb9\u4e5f\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u9a97\u5c40\uff0c\u4ee5\u81f3\u4e8e\u6211\u4e0d\u5f97\u4e0d\u9605\u8bfb\u5176\u4e2d\u7684\u4e00\u4e9b\u5185\u5bb9\u4ee5\u83b7\u5f97\u4e50\u8da3\u3002\u6211\u8ba4\u4e3a Google \u4f7f\u7528\u6709\u5173\u7528\u6237\u662f\u5426\u7ee7\u7eed\u68c0\u67e5\u8be5\u7279\u5b9a\u641c\u7d22\u67e5\u8be2\u7684\u66f4\u591a\u7ed3\u679c\u7684\u7edf\u8ba1\u4fe1\u606f\u6765\u786e\u5b9a\u8bbf\u95ee\u7684\u7ed3\u679c\u662f\u5426\u56de\u7b54\u4e86\u7528\u6237\u3002\n\u5f53\u7f51\u7ad9\u963b\u6b62\u60a8\u8fd4\u56de\u65f6\uff0cGoogle \u53ef\u80fd\u4f1a\u8ba4\u4e3a\u60a8\u627e\u5230\u4e86\u60a8\u8981\u627e\u7684\u4e1c\u897f\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u79ef\u6781\u4fe1\u53f7\u3002\u8fd9\u6837\uff0c\u8be5\u7f51\u7ad9\u5c06\u60a8\u7684\u6392\u540d\u66f4\u9ad8\u3002\u6211\u7ecf\u5e38\u5fd8\u8bb0\u6211\u7684\u786e\u5207\u641c\u7d22\u67e5\u8be2\uff0c\u56e0\u6b64\u5982\u679c\u6211\u88ab\u963b\u6b62\u8fd4\u56de\uff0c\u6211\u901a\u5e38\u4e0d\u4f1a\u518d\u6b21\u4f7f\u7528\u8be5\u786e\u5207\u77ed\u8bed\u8fdb\u884c\u641c\u7d22\u3002\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u672a\u77e5 IP \u548c\u901a\u7528\u7528\u6237\u4ee3\u7406\u5b9a\u671f\u6d4b\u8bd5\u7ad9\u70b9\uff0c\u4ee5\u68c0\u67e5\u7ad9\u70b9\u662f\u5426\u4e0d\u4ec5\u5411 Google \u663e\u793a\u5185\u5bb9\uff0c\u8fd8\u4e3a\u771f\u5b9e\u7528\u6237\u63d0\u4f9b\u4e86\u5b8c\u5168\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u8fd9\u6837\u5c31\u53ef\u4ee5\u963b\u6b62\u4e86\u3002\u53e6\u4e00\u4ef6\u4e8b\u662f\uff0c\u5f53\u4e00\u4e2a\u65b0\u57df\u50cf\u8fd9\u6837\u8d77\u98de\u65f6\uff0c\u8b66\u62a5\u53ef\u80fd\u4f1a\u54cd\u8d77\u3002 havfruen4220.dk \u57df\u57fa\u672c\u4e0a\u53ef\u4ee5\u663e\u793a\u4efb\u4f55\u5185\u5bb9\uff0c\u56e0\u6b64\u5982\u679c\u5b83\u662f\u76ee\u524d\u632a\u5a01 Google \u641c\u7d22\u4e2d\u663e\u793a\u6700\u591a\u7684\u57df\uff0c\u6211\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u5bf9 Google \u641c\u7d22\u4e0a\u7684\u57fa\u672c\u4e0a\u6240\u6709\u5185\u5bb9\u8fdb\u884c\u6392\u540d\uff0c\u60a8\u5c06\u5982\u4f55\u76c8\u5229\uff1f\u611f\u8c22\u60a8\u9605\u8bfb\u8fd9\u7bc7\u5947\u602a\u800c\u51cc\u4e71\u7684\u535a\u5ba2\u6587\u7ae0\u3002\u6211\u53ea\u662f\u60f3\u5206\u4eab\u8fd9\u79cd\u5947\u602a\u4e4b\u5904\u3002\u795d\u4f60\u6709\u7f8e\u597d\u7684\u4e00\u5929\uff01 \ud83d\ude0a", "note_en": "Recently I\u2019ve started seeing a lot of spam in Google Search in Norwegian. I\u2019m not talking about a bad result here and there that ranks terrible. No, I\u2019m talking about a large-scale spam operation that I\u2019ve noticed more and more in recent days.\n  It\u2019s so bad that I\u2019m convinced that this one spam domain is getting a large cut of all Google Search traffic in Norway. I can search for basically anything and find it in the first few pages with a very high probability.\n The domain they use right now is a danish one, havfruen4220.dk. (\u201cHavfruen\u201d, meaning \u201cthe mermaid\u201d)\n   So I found a site with a silly domain and a silly image that ranks for things on Google Search. Do I have some examples? I sure do.\n   A search for one of my brands? Yep, the spam site ranks as number 10. A large IT consultant firm in Norway(and some other countries)? Number 11. Local newspaper? Top of page 3.\n Let\u2019s try another one. Let\u2019s try \u201cREMA 1000\u201d (the largest grocery store chain in Norway). Sure enough, on top of page 5, we have this:\n  Let\u2019s try something completely different and random. Maybe something people are wondering about. Let\u2019s try \u201cHow often\u201d and let Google pick a thing for us.\n  So the first suggested result is \u201chow often should you shower\u201d in Norwegian. Let\u2019s try it.\n   What about \u201cHow to calculate percentage\u201d in Norwegian(Google\u2019s top suggestion for when starting typing \u201cHvordan\u201d)\n    What about \u201cHow often does apple update iOS\u201d(\u201chvor ofte oppdaterer apple iOS\u201d)?\n     There is a lot of pages. Most of them seem to be relatively new and created in the last few days.\n  Just by looking at the results, it doesn\u2019t make much sense. It\u2019s scraped from a bunch of different places. Something is from Twitter, something is from news sites, and something is from other random websites. Content seems to be combined from multiple sources. The page is served with Cloudflare.\n Searching for exact strings reveals that there are more domains used. All of them use the TLD .dk.\n The thing is, there is no actual content available to us if we visit the page. The page uses cloaking and probably only shows content if you\u2019re visiting from Google crawler IPs.\n If I pretend to be Google by changing my user agent I just get the silly image I showed you. If I remove the GoogleBot user agent there is one difference: Javascript is inserted that redirects the user to another page:\n   After the first redirect, that page redirects the user, again, to other scam domains. Some fake news sites pretend to be one of the most popular Norwegian news sites; others are basic \u201cwant to earn money fast online\u201d sites.\n     The fake news article is usually something like \u201cthis Norwegian celebrity reveals how he got rich\u201d. And it usually ends with some crypto scheme.\n These scams are old, but they usually don\u2019t rank well. I\u2019ve never seen anything like this. It\u2019s currently a top result for nearly anything on Google search in Norway.\n  We have all probably heard that Google\u2019s ranking is advanced and that it\u2019s pretty hard to fool it. Someone made it. I\u2019m not going to pretend I know how they did this, but I think I have some ideas.\n First of all, the content seems somewhat decent in google search at times, and I\u2019ve clicked it multiple times myself when searching for things. When you click it, it does what it can to block browser navigation so you can\u2019t return to google. The content is also so clearly a scam that I had to read some of it for fun.\n I think that Google uses stats on whether the user continued checking more results for that specific search query to determine if the visited result answered the user.\n When the website blocks you from going back, Google might think you found the thing you were looking for and use this as a positive signal. This way, the site ranks you even higher. I often forget my exact search query, so I usually don\u2019t search again with that exact phrase if I\u2019m blocked from going back.\n  The simple solution would be to test sites regularly with an unknown IP and common user agent to check that a site isn\u2019t just showing content to Google and gives real users something completely different. That would stop this.\n Another thing is that an alarm should probably go off when a new domain takes off like this. The havfruen4220.dk domain is shown for basically anything, so it wouldn\u2019t surprise me if it\u2019s the most shown domain in Google search in Norway right now.\n How would you make a profit if you could rank for basically everything on Google search?\n Thank\u2019s for reading this weird and messy blog post. I just wanted to share the weirdness. Have a great day! \ud83d\ude0a", "posttime": "2021-07-29 22:01:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google", "title": "\u7f8e\u4eba\u9c7c\u6b63\u5728\u632a\u5a01\u63a5\u7ba1\u8c37\u6b4c\u641c\u7d22", "title_en": "The mermaid is taking over Google search in Norway", "transed": 1, "url": "https://alexskra.com/blog/the-mermaid-is-taking-over-google-search-in-norway/", "via": "", "real_tags": ["\u8c37\u6b4c", "google"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070266, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL;DR\uff1a\u6211\u4fee\u6539\u4e86 DOSBox \u4ee5\u63d0\u53d6 Monkey Island PC-Speaker \u6b4c\u66f2\u7684\u9891\u7387/\u5ef6\u8fdf\u503c\u5bf9\u3002\u7136\u540e\u6211\u4f7f\u7528\u970d\u592b\u66fc\u538b\u7f29\u5c06\u6240\u6709\u97f3\u4e50\u538b\u7f29\u5230 ATtiny85\uff08512 \u5b57\u8282\u7684 RAM\uff0c8 KB \u7684\u95ea\u5b58\uff09\u4e2d\u3002\u4e00\u65e6\u6211\u505a\u5230\u4e86\uff0c\u6211\u5c31\u521b\u5efa\u4e86\u4e00\u4e2a\u5e26\u6709\u626c\u58f0\u5668\u7684\u5c0f\u7535\u8def - \u64ad\u653e\u97f3\u4e50......\u4f5c\u4e3a\u4e00\u4e2a\u7ed9\u6211\u4f84\u5973\u548c\u4f84\u5b50\u7684\u793c\u7269\uff1b\u7ecf\u8fc7\u4e00\u5e74\u591a\u7684\u9694\u79bb (COVID) \u540e\uff0c\u6211\u5c06\u5728\u4e0b\u5468\u89c1\u5230\u4ed6\uff01\u662f\u7684\uff0c\u4ed6\u4eec\u7684\u53d4\u53d4\u662f\u4e2a\u5f7b\u5934\u5f7b\u5c3e\u7684\u4e66\u5446\u5b50\u3002\u4ed6\u786e\u4fdd\u4ed6\u4eec\u957f\u5927\u540e\u9047\u5230\u4e86 Guybrush Threepwood :-)", "note_en": "TL;DR: I modified DOSBox to extract the frequency/delay value pairs of the Monkey Island PC-Speaker songs. I then used Huffman compression to squeeze all music inside an ATtiny85 ( 512  bytes of RAM, 8  KB of flash) Once I managed that, I then created a small circuit with a speaker - to play the music... ...as a gift for my nieces and nephews; whom I&#39;ll see next week after more than a year&#39;s isolation (COVID)!\n Yes, their uncle is a complete nerd. And he made sure they grew up meeting Guybrush Threepwood :-)", "posttime": "2021-07-29 22:00:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,island,\u538b\u7f29", "title": "\u7334\u5c9b\u7535\u8111\u97f3\u7bb1\u97f3\u4e50\u64ad\u653e\u5668", "title_en": "Monkey Island PC-speaker music player", "transed": 1, "url": "https://www.thanassis.space/monkeyisland.html", "via": "", "real_tags": ["\u7535\u8111", "island", "\u538b\u7f29"]}, {"category": "", "categoryclass": "", "imagename": "f02ee9afb5626ece69390ba8ef7c4b31.jpg", "infoid": 1070265, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ef4\u52a0\u65af\u73af\u7ebf\u96a7\u9053\u73b0\u5df2\u5f00\u653e\uff0c\u53f8\u673a\u5df2\u6536\u5230\u6709\u5173\u5982\u4f55\u4e0e\u4e58\u5ba2\u4ea4\u8c08\u7684\u4e25\u683c\u6307\u793a\u3002 The Boring Company \u6700\u8fd1\u5728\u62c9\u65af\u7ef4\u52a0\u65af\u4f1a\u8bae\u4e2d\u5fc3 (LVCC) \u5f00\u8bbe\u4e86\u96a7\u9053\uff0c\u96a7\u9053\u4f4d\u4e8e\u5730\u4e0b 40 \u82f1\u5c3a\uff0c\u957f 1.7 \u82f1\u91cc\u3002\u8be5\u7cfb\u7edf\u914d\u5907\u4e86\u4e13\u95e8\u6539\u88c5\u7684\u7279\u65af\u62c9\u8f66\u8f86\u7684\u53f8\u673a\uff0c\u8bbe\u6709\u4e09\u4e2a\u8f66\u7ad9\uff0c\u53ef\u5e2e\u52a9\u4e58\u5ba2\u66f4\u5feb\u5730\u7ed5\u8fc7\u5de8\u5927\u7684\u8bbe\u65bd\u3002\u4f5c\u4e3a\u57c3\u9686\u9a6c\u65af\u514b\u6709\u4e89\u8bae\u7684\u96a7\u9053\u52aa\u529b\u7684\u7b2c\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u4f8b\u5b50\uff0c\u8be5\u516c\u53f8\u975e\u5e38\u8ba4\u771f\u5730\u63a7\u5236\u56f4\u7ed5\u7cfb\u7edf\u7684\u53d9\u8ff0\u3002\u6b63\u5982 TechCrunch \u83b7\u5f97\u7684\u6587\u4ef6\u6240\u63ed\u793a\u7684\u90a3\u6837\uff0c\u65e0\u804a\u516c\u53f8\u751a\u81f3\u6307\u793a\u53f8\u673a\u5728\u4e0e\u4e58\u5ba2\u4e92\u52a8\u65f6\u9075\u5b88\u811a\u672c\u3002\u901a\u8fc7\u516c\u5171\u8bb0\u5f55\u6cd5\u62ab\u9732\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5305\u62ec\u53d1\u7ed9\u4e3a\u516c\u53f8\u5de5\u4f5c\u7684\u53f8\u673a\u7684\u201c\u9a91\u884c\u811a\u672c\u201d\u3002\u53f8\u673a\u88ab\u6307\u793a\u5c3d\u91cf\u51cf\u5c11\u8c08\u8bdd\uff0c\u5e76\u5728\u4e58\u5ba2\u8be2\u95ee\u65f6\u7ed9\u51fa\u5efa\u8bae\u7684\u56de\u5e94\u3002\u7279\u522b\u5173\u6ce8\u56de\u907f\u4e58\u5ba2\u5173\u4e8e\u7cfb\u7edf\u4e2d\u5c31\u4e1a\u548c\u4e8b\u6545\u7ec6\u8282\u7684\u95ee\u9898\u3002\u6587\u4ef6\u4e2d\u7684\u5c16\u9510\u5f15\u8ff0\u4f7f\u4eba\u53d1\u4eba\u6df1\u7701\u3002\u4e00\u4e2a\u90e8\u5206\u4e25\u5389\u5730\u6307\u793a\u53f8\u673a\u201c\u4f60\u7684\u76ee\u6807\u662f\u4e3a\u4e58\u5ba2\u63d0\u4f9b\u5b89\u5168\u7684\u4e58\u8f66\u4f53\u9a8c\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u65c5\u7a0b\u3002\u5c3d\u91cf\u51cf\u5c11\u8c08\u8bdd\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u9053\u8def\u201d\u53e6\u4e00\u90e8\u5206\u544a\u8bc9\u53f8\u673a\u5982\u679c\u4e58\u5ba2\u8be2\u95ee\u4ed6\u4eec\u591a\u957f\u65f6\u95f4\u6211\u5df2\u7ecf\u4e3a Loop \u5f00\u8f66\u4e86\uff0c\u56de\u7b54\u662f\u201c\u8db3\u591f\u957f\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u4e86\u89e3\u8fd9\u4e9b\u96a7\u9053\uff01\u201d\u8fd9\u662f\u4e00\u79cd\u660e\u663e\u7684\u56de\u907f\u6280\u672f\uff0c\u8db3\u4ee5\u88ab\u4e00\u4f4d\u7099\u624b\u53ef\u70ed\u7684\u4e2d\u5b66\u8bb0\u8005\u53d1\u73b0\uff0c\u4f46\u795d\u798f\u4ed6\u4eec\u90fd\u5c1d\u8bd5\u8fc7\u3002\u57c3\u9686\u00b7\u9a6c\u65af\u514b (Elon Musk) \u62e5\u6709 Boring Company\uff0c\u8fd1\u5e74\u6765\uff0c\u96a7\u9053\u4e00\u76f4\u662f\u8fd9\u4f4d\u795e\u79d8\u7684\u4ebf\u4e07\u5bcc\u7fc1\u7684\u5ba0\u513f\u3002\u8fd9\u4e2a\u6709\u4e89\u8bae\u7684\u4eba\u7269\u80af\u5b9a\u4f1a\u6210\u4e3a\u4e58\u5ba2\u7684\u4e00\u4e2a\u5174\u8da3\u70b9\uff0c\u5267\u672c\u6307\u793a\u53f8\u673a\u975e\u5e38\u5c0f\u5fc3\u5730\u5904\u7406\u8fd9\u4e2a\u8bdd\u9898\u3002\u5f53\u88ab\u95ee\u53ca\u9a6c\u65af\u514b\u662f\u4ec0\u4e48\u6837\u7684\u4eba\u65f6\uff0c\u53f8\u673a\u4eec\u88ab\u544a\u77e5\u201c\u4ed6\u771f\u68d2\uff01\u201d\u5728\u5bf9\u516c\u53f8\u521b\u59cb\u4eba\u9f13\u821e\u4eba\u5fc3\u548c\u6fc0\u52b1\u4eba\u5fc3\u7684\u54c1\u8d28\u55e4\u4e4b\u4ee5\u9f3b\u4e4b\u524d\u3002\u5bf9\u4e8e\u559c\u6b22\u4e3a\u9a6c\u65af\u514b\u5de5\u4f5c\u7684\u53f8\u673a\u662f\u5426\u5e94\u8be5\u5f97\u5230\u76f4\u622a\u4e86\u5f53\u7684\u56de\u7b54\u7684\u95ee\u9898\uff1a\u201c\u662f\u7684\uff0c\u4ed6\u662f\u4e00\u4f4d\u4f1f\u5927\u7684\u9886\u5bfc\u8005\uff01\u4ed6\u6fc0\u52b1\u6211\u4eec\u505a\u4f1f\u5927\u7684\u5de5\u4f5c\u3002\u201d\u90e8\u5206\u811a\u672c\u88ab\u7f16\u8f91\uff0c\u7279\u522b\u662f\u56f4\u7ed5\u5982\u4f55\u6307\u793a\u9a7e\u9a76\u5458\u56de\u7b54\u6709\u5173\u7279\u65af\u62c9\u81ea\u52a8\u9a7e\u9a76\u4eea\u6280\u672f\u7684\u95ee\u9898\u3002 Loop \u7cfb\u7edf\u4e0a\u4f7f\u7528\u7684\u8f66\u8f86\u5b9e\u9645\u4e0a\u88ab\u7981\u6b62\u4f7f\u7528\u9a7e\u9a76\u5458\u8f85\u52a9\u8bbe\u5907\uff0c\u514b\u62c9\u514b\u53bf\u6b63\u5f0f\u7981\u6b62\u5728\u8bbe\u65bd\u5185\u5916\u7684\u4efb\u4f55\u5730\u65b9\u4f7f\u7528\u5b83\u4eec\u3002\u751a\u81f3\u9700\u8981\u7981\u7528\u81ea\u52a8\u7d27\u6025\u5236\u52a8\u548c\u8f66\u9053\u4fdd\u6301\u7b49\u5e38\u89c1\u529f\u80fd\u3002\u53d1\u5e03\u4e2d\u7684\u5176\u4ed6\u6587\u4ef6\u6307\u51fa\uff0c\u6280\u672f\u4eba\u5458\u5c06\u8fdb\u884c\u65e5\u5e38\u68c0\u67e5\uff0c\u4ee5\u786e\u4fdd\u8fd9\u4e9b\u529f\u80fd\u672a\u88ab\u4f7f\u7528\u3002\u9a7e\u9a76\u8f85\u52a9\u8bbe\u5907\u7981\u4ee4\u610f\u5473\u7740\u53f8\u673a\u5728\u7a7f\u8fc7\u96a7\u9053\u65f6\u5b8c\u5168\u5904\u4e8e\u624b\u52a8\u63a7\u5236\u72b6\u6001\u3002\u867d\u7136 Boring \u516c\u53f8\u63d0\u51fa\u4e86\u4ee5\u9ad8\u8fbe 150 \u82f1\u91cc/\u5c0f\u65f6\u7684\u901f\u5ea6\u884c\u9a76\u7684\u81ea\u52a8\u8f66\u8f86\u7684\u7406\u60f3\u9009\u62e9\uff0c\u4f46 LVCC \u7cfb\u7edf\u7684\u8fd0\u884c\u901f\u5ea6\u8981\u4f4e\u5f97\u591a\u3002\u636e CNET \u4e0a\u4e2a\u6708\u62a5\u9053\uff0c\u6c7d\u8f66\u7684\u65f6\u901f\u9650\u5236\u4e3a 35 \u82f1\u91cc/\u5c0f\u65f6\u3002\u5982\u679c\u53f8\u673a\u88ab\u95ee\u53ca\u649e\u8f66\u6216\u201c\u4e8b\u6545\u201d\uff0c\u5982\u6587\u4ef6\u6240\u79f0\uff0c\u4ed6\u4eec\u4f1a\u88ab\u6307\u793a\u56de\u7b54\u201c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5b89\u5168\u7684\u7cfb\u7edf\uff0c\u6211\u4e0d\u786e\u5b9a\u3002\u4f60\u5fc5\u987b\u8054\u7cfb\u516c\u53f8\u3002\u201d\nTechCrunch \u7684\u6574\u7bc7\u6587\u7ae0\u975e\u5e38\u9002\u5408\u9605\u8bfb\uff0c\u5e76\u4e14\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u6587\u6863\u7684\u5185\u5bb9\uff0c\u6db5\u76d6\u4e86\u4ece Loop \u4e0a\u7684\u76d1\u63a7\u7cfb\u7edf\u5230\u5176\u4ed6\u6709\u5173\u53f8\u673a\u65e0\u89c6\u5b89\u5168\u6cd5\u89c4\u7684\u76f8\u5173\u95ee\u9898\u3002\u5373\u4f7f\u662f\u5b89\u5168\u5e26\u5408\u89c4\u6027\u548c\u96a7\u9053\u4e2d\u7684\u901f\u5ea6\u9650\u5236\u7b49\u57fa\u672c\u9879\u76ee\u4e5f\u4e00\u76f4\u662f\u514b\u62c9\u514b\u53bf\u5b98\u5458\u5173\u6ce8\u7684\u7126\u70b9\u3002\u9274\u4e8e\u8be5\u7cfb\u7edf\u624d\u521a\u521a\u5f00\u59cb\u8fd0\u884c\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u5146\u5934\u3002\u6211\u4eec\u5e0c\u671b\u770b\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\u6765\u81ea\u4e58\u5ba2\u7684\u89c6\u9891\uff0c\u8be5\u89c6\u9891\u8bd5\u56fe\u4ece\u53f8\u673a\u90a3\u91cc\u5f15\u51fa\u8fd9\u4e9b\u673a\u5668\u4eba\u7684\u3001\u811a\u672c\u5316\u7684\u54cd\u5e94\u3002\u8fd9\u79cd\u4f53\u9a8c\u53ef\u80fd\u7c7b\u4f3c\u4e8e\u5728\u89d2\u8272\u626e\u6f14\u6e38\u620f\u4e2d\u4e0e NPC \u4ea4\u8c08\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u8ba9\u53f8\u673a\u5728\u7a7f\u8d8a\u4f1a\u8bae\u4e2d\u5fc3\u7684\u4e24\u5206\u949f\u65c5\u7a0b\u4e2d\u591a\u6b21\u5bf9\u540c\u4e00\u95ee\u9898\u505a\u51fa\u76f8\u540c\u7684\u56de\u7b54\uff0c\u5219\u53ef\u4ee5\u52a0\u5206\u3002\u6240\u7f3a\u5c11\u7684\u53ea\u662f\u8ba9\u53f8\u673a\u5728\u8f6e\u73ed\u65f6\u80cc\u8bf5\u7684\u4e00\u4e2a\u6717\u6717\u4e0a\u53e3\u3001\u50cf\u90aa\u6559\u4e00\u6837\u7684\u5492\u8bed\u3002\u4e5f\u8bb8\u4ed6\u4eec\u53ef\u80fd\u559c\u6b22\u8fd9\u6837\u541f\u5531\uff1a\u201c\u6211\u4eec\u8d5e\u7f8e\u96a7\u9053\uff0c\u6211\u4eec\u8d5e\u7f8e\u7684\u96a7\u9053\u3002\u201d\u53ef\u4ee5\u5f88\u6709\u8da3\u3002", "note_en": "The Vegas Loop tunnels are now open, and drivers have been given strict instructions on how to talk to passengers.\n  The Boring Company recently opened its tunnels at the Las Vegas Convention Center (LVCC), sitting 40 feet underground and stretching 1.7 miles long. Staffed with drivers behind the wheel of specially modified Tesla vehicles, the system features three stations and helps passengers get around the huge facility more quickly. As the first live example of Elon Musk&#39;s controversial tunneling efforts, the company is serious about controlling the narrative around the system. The Boring Company has gone so far as to instruct drivers to stick to a script during interactions with passengers,  as revealed in documents obtained by  TechCrunch.\n Revealed via public records laws, the documents included a &#34;Ride Script&#34; issued to the drivers working for the company. Drivers are instructed to minimize conversation, and given recommended responses to use when queried by passengers. Particular focus is given to evading passenger questions around details of employment and accidents in the system.\n   Poignant quotes from the document make for sobering reading. One section sternly instructs drivers that &#34;Your goal is to provide a safe ride for the passengers, not an entertaining ride. Keep conversation to a minimum so you can focus on the road&#34; Another tells drivers to obfuscate if passengers ask about how long they&#39;ve driven for the Loop, by responding &#34;Long enough to know these tunnels pretty well!&#34; It&#39;s an evasive technique obvious enough to be spotted by a hot-shot middle school reporter, but bless them for trying all the same.\n   Elon Musk owns the Boring Company, and the tunnels have been somewhat of a pet project for the enigmatic billionaire in recent years. The controversial figure is sure to be a point of interest for passengers, and the script instructs drivers to handle this topic  very carefully . When asked what Musk is like, drivers are told to respond &#34;He&#39;s awesome!&#34; before prevaricating about the inspiring and motivating qualities of the company&#39;s founder. Questions over whether drivers like working for Musk should receive a squeaky-clean response: &#34;Yup, he&#39;s a great leader! He motivates us to do great work.&#34;\n Some of the script is redacted, notably around how drivers are instructed to respond to questions about Tesla&#39;s Autopilot technology. The vehicles used on the Loop system are in fact banned from using driver aids, with Clark County officially outlawing their use anywhere in and around the facility. Even common features like automatic emergency braking and lane keeping are required to be disabled. Other documents in the release state that daily checks will be made by technicians to ensure the features are not being used.\n The driving aids ban means that drivers are in full manual control when driving through the tunnels. While the Boring Company presented an ideal of automated vehicles driving at speeds of  up to 150 mph, the LVCC system runs at much lower speeds. Cars are limited to juts 35 mph  as reported by  CNET last month. If drivers are asked about crashes, or &#34;accidents,&#34; as the document terms them, they&#39;re instructed to respond \u201cIt\u2019s a very safe system, and I\u2019m not sure. You\u2019d have to reach out to the company.\u201d\n The full piece from  TechCrunch makes a great read, and goes into granular detail about the contents of the documents, covering everything from the monitoring systems on the Loop to other concerning issues around drivers ignoring safety regulations. Even basic items like seatbelt compliance and speed limits in the tunnels have been points of concern for Clark County officials. It bodes poorly given the system has only just begun operations.\n One thing we&#39;d love to see is a video from a passenger that attempts to elicit these robotic, scripted responses from drivers. The experience would probably be akin to talking with NPCs in a role-playing game. Bonus points if you can get the driver to respond identically to the same question multiple times in the two-minute journey across the convention center. All that&#39;s missing is a catchy, cult-like mantra for the drivers to recite on-shift. Perhaps they might like to chant thusly: &#34;We praise the Tunnels, the Tunnels we Praise.&#34; Could be fun.", "posttime": "2021-07-29 22:00:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "boring,\u53f8\u673a", "title": "\u811a\u672c\u65e0\u804a\u516c\u53f8\u53f8\u673a\u4e0d\u5f97\u4e0d\u80cc\u8bf5\u9a6c\u65af\u514b", "title_en": "The Script Boring Company Drivers Have to Recite About Musk", "transed": 1, "url": "https://www.thedrive.com/news/41741/hes-awesome-heres-the-script-boring-company-drivers-have-to-recite-about-musk", "via": "", "real_tags": ["boring", "\u53f8\u673a"]}, {"category": "", "categoryclass": "", "imagename": "3a6087af7bfc317fcd8672af1b7d5abf.png", "infoid": 1070264, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6b63\u5728\u53d1\u5e03 Triton 1.0\uff0c\u8fd9\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8e Python \u7684\u5f00\u6e90\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u4f7f\u6ca1\u6709 CUDA \u7ecf\u9a8c\u7684\u7814\u7a76\u4eba\u5458\u80fd\u591f\u7f16\u5199\u9ad8\u6548\u7684 GPU \u4ee3\u7801\u2014\u2014\u5927\u90e8\u5206\u65f6\u95f4\u4e0e\u4e13\u5bb6\u80fd\u591f\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u5f53\u3002 Triton \u4f7f\u5f97\u4ee5\u76f8\u5bf9\u8f83\u5c11\u7684\u52aa\u529b\u8fbe\u5230\u5cf0\u503c\u786c\u4ef6\u6027\u80fd\u6210\u4e3a\u53ef\u80fd\uff1b\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u7528\u4e0d\u5230 25 \u884c\u4ee3\u7801\u7f16\u5199\u4e0e cuBLAS \u6027\u80fd\u76f8\u5339\u914d\u7684 FP16 \u77e9\u9635\u4e58\u6cd5\u5185\u6838\u2014\u2014\u8fd9\u662f\u8bb8\u591a GPU \u7a0b\u5e8f\u5458\u65e0\u6cd5\u505a\u5230\u7684\u3002\u6211\u4eec\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u4f7f\u7528\u5b83\u6765\u751f\u6210\u6548\u7387\u6bd4\u540c\u7b49 Torch \u5b9e\u73b0\u9ad8 2 \u500d\u7684\u5185\u6838\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u4e0e\u793e\u533a\u5408\u4f5c\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u66f4\u5bb9\u6613\u4f7f\u7528 GPU \u7f16\u7a0b\u3002\u5728\u6df1\u5ea6\u5b66\u4e60\u9886\u57df\uff0c\u4e00\u822c\u90fd\u662f\u4f7f\u7528\u539f\u751f\u6846\u67b6\u7b97\u5b50\u7684\u7ec4\u5408\u6765\u5b9e\u73b0\u7684\u3002\u867d\u7136\u65b9\u4fbf\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u901a\u5e38\u9700\u8981\u521b\u5efa\uff08\u548c/\u6216\u79fb\u52a8\uff09\u8bb8\u591a\u4e34\u65f6\u5f20\u91cf\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5927\u89c4\u6a21\u635f\u5bb3\u795e\u7ecf\u7f51\u7edc\u7684\u6027\u80fd\u3002\u8fd9\u4e9b\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u7f16\u5199\u4e13\u95e8\u7684 GPU \u5185\u6838\u6765\u7f13\u89e3\uff0c\u4f46\u7531\u4e8e GPU \u7f16\u7a0b\u7684\u8bb8\u591a\u590d\u6742\u6027\uff0c\u8fd9\u6837\u505a\u53ef\u80fd\u4f1a\u975e\u5e38\u56f0\u96be\u3002\u800c\u4e14\uff0c\u5c3d\u7ba1\u6700\u8fd1\u51fa\u73b0\u4e86\u5404\u79cd\u7cfb\u7edf\u6765\u7b80\u5316\u6b64\u8fc7\u7a0b\uff0c\u4f46\u6211\u4eec\u53d1\u73b0\u5b83\u4eec\u8981\u4e48\u8fc7\u4e8e\u5197\u957f\uff0c\u8981\u4e48\u7f3a\u4e4f\u7075\u6d3b\u6027\uff0c\u8981\u4e48\u751f\u6210\u7684\u4ee3\u7801\u660e\u663e\u6162\u4e8e\u6211\u4eec\u624b\u52a8\u8c03\u6574\u7684\u57fa\u7ebf\u3002\u8fd9\u4fc3\u4f7f\u6211\u4eec\u6269\u5c55\u548c\u6539\u8fdb Triton\uff0c\u8fd9\u662f\u4e00\u79cd\u6700\u65b0\u7684\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\uff0c\u5176\u6700\u521d\u7684\u521b\u5efa\u8005\u73b0\u5728\u5728 OpenAI \u5de5\u4f5c\u3002\u73b0\u4ee3 GPU \u7684\u67b6\u6784\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u2014\u2014DRAM\u3001SRAM \u548c ALU\u2014\u2014\u5728\u4f18\u5316 CUDA \u4ee3\u7801\u65f6\u5fc5\u987b\u8003\u8651\u5230\u6bcf\u4e2a\u90e8\u5206\uff1a \u5fc5\u987b\u5c06\u6765\u81ea DRAM \u7684\u5185\u5b58\u4f20\u8f93\u5408\u5e76\u4e3a\u5927\u578b\u4e8b\u52a1\uff0c\u4ee5\u5229\u7528\u73b0\u4ee3\u5185\u5b58\u7684\u5927\u603b\u7ebf\u5bbd\u5ea6\u63a5\u53e3\u3002\u6570\u636e\u5fc5\u987b\u5728\u91cd\u65b0\u4f7f\u7528\u4e4b\u524d\u624b\u52a8\u5b58\u50a8\u5230 SRAM \u4e2d\uff0c\u5e76\u8fdb\u884c\u7ba1\u7406\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u68c0\u7d22\u65f6\u7684\u5171\u4eab\u5185\u5b58\u5e93\u51b2\u7a81\u3002\u8ba1\u7b97\u5fc5\u987b\u5728\u6d41\u5f0f\u591a\u5904\u7406\u5668 (SM) \u4e4b\u95f4\u548c\u5185\u90e8\u4ed4\u7ec6\u5206\u533a\u548c\u8c03\u5ea6\uff0c\u4ee5\u4fc3\u8fdb\u6307\u4ee4/\u7ebf\u7a0b\u7ea7\u5e76\u884c\u6027\u5e76\u5229\u7528\u4e13\u7528 ALU\uff08\u4f8b\u5982\uff0c\u5f20\u91cf\u6838\u5fc3\uff09\u3002\u5bf9\u6240\u6709\u8fd9\u4e9b\u56e0\u7d20\u8fdb\u884c\u63a8\u7406\u53ef\u80fd\u5177\u6709\u6311\u6218\u6027\uff0c\u5373\u4f7f\u5bf9\u4e8e\u5177\u6709\u591a\u5e74\u7ecf\u9a8c\u7684 CUDA \u7a0b\u5e8f\u5458\u4e5f\u662f\u5982\u6b64\u3002 Triton \u7684\u76ee\u7684\u662f\u5c06\u8fd9\u4e9b\u4f18\u5316\u5b8c\u5168\u81ea\u52a8\u5316\uff0c\u8ba9\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u66f4\u597d\u5730\u4e13\u6ce8\u4e8e\u5e76\u884c\u4ee3\u7801\u7684\u9ad8\u7ea7\u903b\u8f91\u3002 Triton \u65e8\u5728\u5e7f\u6cdb\u9002\u7528\uff0c\u56e0\u6b64\u4e0d\u4f1a\u81ea\u52a8\u5b89\u6392\u8de8 SM \u7684\u5de5\u4f5c\u2014\u2014\u5c06\u4e00\u4e9b\u91cd\u8981\u7684\u7b97\u6cd5\u8003\u8651\u56e0\u7d20\uff08\u4f8b\u5982\u5e73\u94fa\u3001SM \u95f4\u540c\u6b65\uff09\u7559\u7ed9\u5f00\u53d1\u4eba\u5458\u81ea\u884c\u51b3\u5b9a\u3002\n\u5728\u6240\u6709\u53ef\u7528\u7684\u9886\u57df\u7279\u5b9a\u8bed\u8a00\u548c JIT \u7f16\u8bd1\u5668\u4e2d\uff0cTriton \u53ef\u80fd\u4e0e Numba \u6700\u76f8\u4f3c\uff1a\u5185\u6838\u88ab\u5b9a\u4e49\u4e3a\u4fee\u9970\u7684 Python \u51fd\u6570\uff0c\u5e76\u5728\u6240\u8c13\u7684\u5b9e\u4f8b\u7f51\u683c\u4e0a\u4e0e\u4e0d\u540c\u7684\u7a0b\u5e8f ID \u540c\u65f6\u542f\u52a8\u3002\u4f46\u662f\uff0c\u5982\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6240\u793a\uff0c\u76f8\u4f3c\u4e4b\u5904\u4ec5\u6b62\u4e8e\u6b64\uff1aTriton \u901a\u8fc7\u5bf9\u5757\uff08\u7ef4\u6570\u4e3a 2 \u7684\u5e42\u7684\u5c0f\u6570\u7ec4\uff09\u7684\u64cd\u4f5c\u6765\u516c\u5f00\u5b9e\u4f8b\u5185\u5e76\u884c\u6027\uff0c\u800c\u4e0d\u662f\u5355\u6307\u4ee4\u591a\u7ebf\u7a0b (SIMT) \u6267\u884c\u6a21\u578b\u3002\u8fd9\u6837\u505a\u65f6\uff0cTriton \u6709\u6548\u5730\u62bd\u8c61\u51fa\u4e86\u4e0e CUDA \u7ebf\u7a0b\u5757\u5185\u7684\u5e76\u53d1\u76f8\u5173\u7684\u6240\u6709\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u5185\u5b58\u5408\u5e76\u3001\u5171\u4eab\u5185\u5b58\u540c\u6b65/\u51b2\u7a81\u3001\u5f20\u91cf\u6838\u5fc3\u8c03\u5ea6\uff09\u3002 BLOCK = 512# \u8fd9\u662f Numba \u4e2d\u7684 GPU \u5185\u6838\u3002# this# \u51fd\u6570\u7684\u4e0d\u540c\u5b9e\u4f8b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u3002@jitdef add(X, Y, Z, N): # \u5728 Numba/CUDA \u4e2d\uff0c\u6bcf\u4e2a\u5185\u6838 # \u5b9e\u4f8b\u672c\u8eab\u4f7f\u7528\u4e00\u4e2aSIMT \u6267\u884c # \u6a21\u578b\uff0c\u5176\u4e2d\u6307\u4ee4\u9488\u5bf9\u4e0d\u540c\u7684 threadIdx \u503c\u5e76\u884c\u6267\u884c # tid = threadIdx.x bid = blockIdx.x # \u6807\u91cf\u7d22\u5f15 idx = bid * BLOCK + tid if id &lt; N: # Numba \u4e2d\u6ca1\u6709\u6307\u9488\u3002 # Z,X,Y \u662f\u5bc6\u96c6\u5f20\u91cf Z[idx] = X[idx] + Y[idx]...grid = (ceil_div(N, BLOCK),)block = (BLOCK,)add[grid, block]( x, y, z, x.shape[0]) BLOCK = 512# \u8fd9\u662f Triton \u4e2d\u7684 GPU \u5185\u6838\u3002# this# \u51fd\u6570\u7684\u4e0d\u540c\u5b9e\u4f8b\u53ef\u4ee5\u5e76\u884c\u8fd0\u884c\u3002@jitdef add(X, Y, Z, N): # \u5728 Triton \u4e2d\uff0c\u6bcf\u4e2a\u5185\u6838\u5b9e\u4f8b # \u5728\u5355\u4e2a\u7ebf\u7a0b\u4e0a\u6267\u884c\u5757\u64cd\u4f5c\uff1a\u6ca1\u6709\u6784\u9020 # \u7c7b\u4f3c\u4e8e threadIdx pid = program_id(0) # \u7d22\u5f15\u5757 idx = pid * BLOCK + arange(BLOCK) mask = idx &lt; N # Triton \u4f7f\u7528\u6307\u9488\u7b97\u672f # \u800c\u4e0d\u662f\u7d22\u5f15\u8fd0\u7b97\u7b26 x = load(X + idx, mask=mask) y = load(Y + idx, mask=mask) store(Z + idx, x + y, mask=mask).. .grid = (ceil_div(N, BLOCK),)# no thread-blockadd[grid](x, y, z, x.shape[0]) \u867d\u7136\u8fd9\u5bf9\u4e8e\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\uff08\u5373\u5143\u7d20\u65b9\u5f0f\uff09\u53ef\u80fd\u4e0d\u662f\u7279\u522b\u6709\u7528) \u8ba1\u7b97\uff0c\u5b83\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u66f4\u590d\u6742\u7684 GPU \u7a0b\u5e8f\u7684\u5f00\u53d1\u3002\u4f8b\u5982\uff0c\u8003\u8651\u878d\u5408 softmax \u5185\u6838\uff08\u5982\u4e0b\uff09\u7684\u60c5\u51b5\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b9e\u4f8b\u6807\u51c6\u5316\u7ed9\u5b9a\u8f93\u5165\u5f20\u91cf $X \\in \\mathbb{R}^{M \\times N}$ \u7684\u4e0d\u540c\u884c\u3002\u8fd9\u79cd\u5e76\u884c\u5316\u7b56\u7565\u7684\u6807\u51c6 CUDA \u5b9e\u73b0\u53ef\u80fd\u96be\u4ee5\u7f16\u5199\uff0c\u9700\u8981\u7ebf\u7a0b\u4e4b\u95f4\u7684\u663e\u5f0f\u540c\u6b65\uff0c\u56e0\u4e3a\u5b83\u4eec\u540c\u65f6\u51cf\u5c11 $X$ \u7684\u540c\u4e00\u884c\u3002\u5927\u591a\u6570\u8fd9\u79cd\u590d\u6742\u6027\u5728 Triton \u4e2d\u6d88\u5931\u4e86\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5185\u6838\u5b9e\u4f8b\u52a0\u8f7d\u611f\u5174\u8da3\u7684\u884c\u5e76\u4f7f\u7528\u7c7b\u4f3c NumPy \u7684\u539f\u8bed\u6309\u987a\u5e8f\u5bf9\u5176\u8fdb\u884c\u89c4\u8303\u5316\u3002 import tritonimport triton.language as tl@triton.jitdef softmax(Y, stride_ym, stride_yn, X, stride_xm, stride_xn, M, N): # row index m = tl.program_id(0) # col indices # \u8fd9\u4e2a\u7279\u5b9a\u7684\u5185\u6838\u624d\u6709\u6548\u5bf9\u4e8e # \u5c11\u4e8e BLOCK_SIZE \u5217\u7684\u77e9\u9635 BLOCK_SIZE = 1024 n = tl.arange(0, BLOCK_SIZE) # \u6211\u4eec\u60f3\u8981\u52a0\u8f7d\u7684\u6240\u6709\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740 # \u53ef\u4ee5\u8ba1\u7b97\u5982\u4e0b X = X + m * stride_xm + n * stride_xn # \u52a0\u8f7d\u8f93\u5165\u6570\u636e\uff1b\u7528 0 x = tl.load(X, mask=n &lt; N, other=-float(&#39;inf&#39;)) \u586b\u5145\u8d8a\u754c\u5143\u7d20 # \u8ba1\u7b97\u6570\u503c\u7a33\u5b9a\u7684 softmax z = x - tl.max(x, axis =0) num = tl.exp(z) denom = tl.sum(num,axis=0) y = num / denom # \u5199\u56de YY = Y + m * stride_ym + n * stride_yn tl.store(Y, y , mask=n &lt; N)import torch# \u5206\u914d\u8f93\u5165/\u8f93\u51fa tensorsX = torch.normal(0, 1, size=(583, 931), device=&#39;cuda&#39;)Y = torch.empty_like(X)# SPMD \u542f\u52a8 gridgrid = (X.shape[0], )# \u5165\u961f GPU kernelsoftmax[grid](Y, Y.stride(0), Y.stride(1), X, X.stride(0), X.stride(1), X.shape[0] , X.shape[1]) \u8bf7\u6ce8\u610f\uff0cTriton JIT \u5c06 X \u548c Y \u89c6\u4e3a\u6307\u9488\u800c\u4e0d\u662f\u5f20\u91cf\uff1b\u6211\u4eec\u89c9\u5f97\u4fdd\u7559\u5bf9\u5185\u5b58\u8bbf\u95ee\u7684\u4f4e\u7ea7\u63a7\u5236\u5bf9\u4e8e\u5904\u7406\u66f4\u590d\u6742\u7684\u6570\u636e\u7ed3\u6784\uff08\u4f8b\u5982\uff0c\u5757\u7a00\u758f\u5f20\u91cf\uff09\u5f88\u91cd\u8981\u3002\n\u91cd\u8981\u7684\u662f\uff0csoftmax \u7684\u8fd9\u79cd\u7279\u6b8a\u5b9e\u73b0\u5728\u6574\u4e2a\u89c4\u8303\u5316\u8fc7\u7a0b\u4e2d\u5c06 $X$ \u7684\u884c\u4fdd\u7559\u5728 SRAM \u4e2d\uff0c\u8fd9\u5728\u9002\u7528\u65f6\u6700\u5927\u5316\u4e86\u6570\u636e\u91cd\u7528\uff08~&lt;32K \u5217\uff09\u3002\u8fd9\u4e0e PyTorch \u7684\u5185\u90e8 CUDA \u4ee3\u7801\u4e0d\u540c\uff0c\u540e\u8005\u4f7f\u7528\u4e34\u65f6\u5185\u5b58\u4f7f\u5176\u66f4\u901a\u7528\u4f46\u901f\u5ea6\u660e\u663e\u66f4\u6162\uff08\u5982\u4e0b\uff09\u3002\u8fd9\u91cc\u7684\u5e95\u7ebf\u4e0d\u662f Triton \u672c\u8d28\u4e0a\u66f4\u597d\uff0c\u800c\u662f\u5b83\u7b80\u5316\u4e86\u4e13\u7528\u5185\u6838\u7684\u5f00\u53d1\uff0c\u8fd9\u4e9b\u5185\u6838\u6bd4\u901a\u7528\u5e93\u4e2d\u7684\u5185\u6838\u5feb\u5f97\u591a\u3002 Torch (v1.9) JIT \u7684\u8f83\u4f4e\u6027\u80fd\u51f8\u663e\u4e86\u4ece\u9ad8\u7ea7\u5f20\u91cf\u64cd\u4f5c\u5e8f\u5217\u81ea\u52a8\u751f\u6210 CUDA \u4ee3\u7801\u7684\u96be\u5ea6\u3002 @torch.jit.scriptdef softmax(x): x_max = x.max(dim=1)[0] z = x - x_max[:, None] numerator = torch.exp(x) denominator = numerator.sum(dim= 1) return numerator / denominator[:, None] \u80fd\u591f\u4e3a\u5143\u7d20\u8fd0\u7b97\u548c\u5f52\u7ea6\u7f16\u5199\u878d\u5408\u5185\u6838\u5f88\u91cd\u8981\uff0c\u4f46\u8003\u8651\u5230\u795e\u7ecf\u7f51\u7edc\u4e2d\u77e9\u9635\u4e58\u6cd5\u4efb\u52a1\u7684\u91cd\u8981\u6027\uff0c\u8fd9\u8fd8\u4e0d\u591f\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0cTriton \u4e5f\u975e\u5e38\u9002\u5408\u8fd9\u4e9b\u5e94\u7528\uff0c\u53ea\u9700\u7ea6 25 \u884c Python \u4ee3\u7801\u5373\u53ef\u5b9e\u73b0\u6700\u4f73\u6027\u80fd\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728 CUDA \u4e2d\u5b9e\u73b0\u7c7b\u4f3c\u7684\u4e1c\u897f\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u7cbe\u529b\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u964d\u4f4e\u6027\u80fd\u3002 @triton.jitdef matmul(A, B, C, M, N, K, stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn, **META): # \u63d0\u53d6\u5143\u53c2\u6570 BLOCK_M, GROUP_M = META[&#39;BLOCK_M&#39;], META [&#39;GROUP_M&#39;] BLOCK_N = META[&#39;BLOCK_N&#39;] BLOCK_K = META[&#39;BLOCK_K&#39;] # \u7a0b\u5e8f\u7ec4\u5408\u5728\u4e00\u8d77\u4ee5\u63d0\u9ad8 L2 \u547d\u4e2d\u7387 _pid_m = tl.program_id(0) _pid_n = tl.program_id(1) pid_m = _pid_m // GROUP_M pid_n =\uff08_pid_n * GROUP_M\uff09+\uff08_pid_m\uff05GROUP_M\uff09\uff03RM\uff08\u5206\u522b\u5730\uff0cRN\uff09\u8868\u793a\u7528\u4e8e\u884c\u7684\u8303\u56f4\u7684\u7d22\u5f15\uff03\uff08\u76f8\u5e94\u7684\u680f\uff09C RM = pid_m * BLOCK_M + tl.arange\u7684\uff080\uff0c BLOCK_M) rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N) # rk \u8868\u793a A (resp. B) \u7684\u5217 # (resp. rows) \u7684\u7d22\u5f15\u8303\u56f4 (resp. B) rk = tl.arange(0, BLOCK_K) # the # A \u548c B \u7684\u7b2c\u4e00\u4e2a\u5757\u4e2d\u5143\u7d20\u7684\u5185\u5b58\u5730\u5740\u53ef\u4ee5\u4f7f\u7528 numpy \u98ce\u683c\u7684\u5e7f\u64ad\u8ba1\u7b97 A = A + (rm[:, None] * stride_am + rk[None, :] * stride_ak) B = B + (rk [:, None] * stride_bk + rn[None, :] * stride_bn) # \u521d\u59cb\u5316\u5e76\u8fed\u4ee3\u66f4\u65b0\u7d2f\u52a0\u5668 acc = tl.zeros((BLOCK_M, BLOCK _N), dtype=tl.float32) for k in range(K, 0, -BLOCK_K): a = tl.load(A) b = tl.load(B) # \u5757\u7ea7\u77e9\u9635\u4e58\u6cd5 acc += tl.dot( a, b) # \u9012\u589e\u6307\u9488\uff0c\u4ee5\u4fbf\u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u671f\u95f4\u52a0\u8f7d A \u548c B \u7684\u4e0b\u4e00\u4e2a\u5757 # A += BLOCK_K * stride_ak B += BLOCK_K * stride_bk # \u5982\u679c\u9700\u8981\uff0c\u878d\u5408\u6cc4\u6f0f\u7684 ReLU # acc = tl.where(acc &gt; = 0, acc, alpha * acc) # \u5199\u56de\u7ed3\u679c C = C + (rm[:, None] * stride_cm + rn[None, :] * stride_cn) mask = (rm[:, None] &lt; M) &amp; ( rn[None, :] &lt; N) tl.store(C, acc, mask=mask) \u624b\u5199\u77e9\u9635\u4e58\u6cd5\u5185\u6838\u7684\u4e00\u4e2a\u91cd\u8981\u4f18\u70b9\u662f\u5b83\u4eec\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u5b9a\u5236\u4ee5\u9002\u5e94\u5176\u8f93\u5165\u7684\u878d\u5408\u53d8\u6362\uff08\u4f8b\u5982\uff0c\u5207\u7247\uff09\u548c\u8f93\u51fa\uff08\u4f8b\u5982\uff0cLeaky ReLU\uff09\u3002\u5982\u679c\u6ca1\u6709\u50cf Triton \u8fd9\u6837\u7684\u7cfb\u7edf\uff0c\u5bf9\u4e8e\u6ca1\u6709\u7279\u6b8a GPU \u7f16\u7a0b\u4e13\u4e1a\u77e5\u8bc6\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u77e9\u9635\u4e58\u6cd5\u5185\u6838\u7684\u975e\u5e73\u51e1\u4fee\u6539\u5c06\u662f\u9065\u4e0d\u53ef\u53ca\u7684\u3002 Triton \u7684\u826f\u597d\u6027\u80fd\u6765\u81ea\u4e8e\u4ee5 Triton-IR \u4e3a\u4e2d\u5fc3\u7684\u6a21\u5757\u5316\u7cfb\u7edf\u67b6\u6784\uff0c\u8fd9\u662f\u4e00\u79cd\u57fa\u4e8e LLVM \u7684\u4e2d\u95f4\u8868\u793a\uff0c\u5176\u4e2d\u591a\u7ef4\u503c\u5757\u662f\u4e00\u7b49\u516c\u6c11\u3002\n@triton.jit \u88c5\u9970\u5668\u901a\u8fc7\u904d\u5386\u63d0\u4f9b\u7684 Python \u51fd\u6570\u7684\u62bd\u8c61\u8bed\u6cd5\u6811 (AST) \u6765\u5de5\u4f5c\uff0c\u4ee5\u4fbf\u4f7f\u7528\u5e38\u89c1\u7684 SSA \u6784\u9020\u7b97\u6cd5\u5373\u65f6\u751f\u6210 Triton-IR\u3002\u751f\u6210\u7684 IR \u4ee3\u7801\u968f\u540e\u7531\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u540e\u7aef\u8fdb\u884c\u7b80\u5316\u3001\u4f18\u5316\u548c\u81ea\u52a8\u5e76\u884c\u5316\uff0c\u7136\u540e\u518d\u8f6c\u6362\u4e3a\u9ad8\u8d28\u91cf\u7684 LLVM-IR\uff0c\u6700\u7ec8\u8f6c\u6362\u4e3a PTX\uff0c\u4ee5\u4fbf\u5728\u6700\u65b0\u7684 NVIDIA GPU \u4e0a\u6267\u884c\u3002\u76ee\u524d\u4e0d\u652f\u6301 CPU \u548c AMD GPU\uff0c\u4f46\u6211\u4eec\u6b22\u8fce\u65e8\u5728\u89e3\u51b3\u6b64\u9650\u5236\u7684\u793e\u533a\u8d21\u732e\u3002\u6211\u4eec\u53d1\u73b0\u901a\u8fc7 Triton-IR \u4f7f\u7528\u963b\u585e\u7684\u7a0b\u5e8f\u8868\u793a\u5141\u8bb8\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u81ea\u52a8\u6267\u884c\u5404\u79cd\u91cd\u8981\u7684\u7a0b\u5e8f\u4f18\u5316\u3002\u4f8b\u5982\uff0c\u6570\u636e\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u8ba1\u7b97\u5bc6\u96c6\u578b\u5757\u7ea7\u64cd\u4f5c\uff08\u4f8b\u5982\uff0ctl.dot\uff09\u7684\u64cd\u4f5c\u6570\u81ea\u52a8\u5b58\u50a8\u5230\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u5e76\u4f7f\u7528\u6807\u51c6\u6d3b\u6027\u5206\u6790\u6280\u672f\u8fdb\u884c\u5206\u914d/\u540c\u6b65\u3002\u53e6\u4e00\u65b9\u9762\uff0cTriton \u7a0b\u5e8f\u53ef\u4ee5\uff081\uff09\u901a\u8fc7\u540c\u65f6\u6267\u884c\u4e0d\u540c\u7684\u5185\u6838\u5b9e\u4f8b\u8de8 SM \u8fdb\u884c\u9ad8\u6548\u548c\u81ea\u52a8\u5e76\u884c\u5316\uff0c\u4ee5\u53ca\uff082\uff09\u901a\u8fc7\u5206\u6790\u6bcf\u4e2a\u5757\u7ea7\u64cd\u4f5c\u7684\u8fed\u4ee3\u7a7a\u95f4\u5e76\u5728\u4e0d\u540c\u7684 SIMD \u4e2d\u5bf9\u5176\u8fdb\u884c\u5145\u5206\u5206\u533a\u6765\u5728 SM \u5185\u8fdb\u884c\u5e76\u884c\u5316\u5355\u4f4d\uff0c\u5982\u4e0b\u56fe\u3002\u6211\u4eec\u6253\u7b97\u8ba9 Triton \u6210\u4e3a\u4e00\u4e2a\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\u3002\u968f\u610f\u5728 GitHub \u4e0a fork \u6211\u4eec\u7684\u5b58\u50a8\u5e93\uff01\u5982\u679c\u60a8\u6709\u5174\u8da3\u52a0\u5165\u6211\u4eec\u7684\u56e2\u961f\u5e76\u7814\u7a76 Triton \u548c GPU \u5185\u6838\uff0c\u6211\u4eec\u6b63\u5728\u62db\u8058\uff01 Yan, D.\u3001Wang, W. \u548c Chu, X.\uff082020 \u5e74 5 \u6708\uff09\u3002\u63ed\u79d8\u5f20\u91cf\u6838\u5fc3\u4ee5\u4f18\u5316\u534a\u7cbe\u5ea6\u77e9\u9635\u4e58\u6cd5\u3002\u5728 2020 \u5e74 IEEE \u56fd\u9645\u5e76\u884c\u548c\u5206\u5e03\u5f0f\u5904\u7406\u7814\u8ba8\u4f1a (IPDPS)\u3002 IEEE\u3002 Tillet, P.\u3001Kung, HT \u548c Cox, D.\uff082019 \u5e74 6 \u6708\uff09\u3002 Triton\uff1a\u4e00\u79cd\u7528\u4e8e\u5e73\u94fa\u795e\u7ecf\u7f51\u7edc\u8ba1\u7b97\u7684\u4e2d\u95f4\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u3002\u5728\u7b2c\u4e09\u5c4a ACM SIGPLAN \u673a\u5668\u5b66\u4e60\u548c\u7f16\u7a0b\u8bed\u8a00\u56fd\u9645\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\uff08\u7b2c 10-19 \u9875\uff09\u4e2d\u3002\nBraun, M.\u3001Buchwald, S.\u3001Hack, S.\u3001Lei\u00dfa, R.\u3001Mallon, C. \u548c Zwinkau, A.\uff082013 \u5e74 3 \u6708\uff09\u3002\u7b80\u5355\u9ad8\u6548\u7684\u9759\u6001\u5355\u8d4b\u503c\u5f62\u5f0f\u6784\u9020\u3002\u5728\u7f16\u8bd1\u5668\u6784\u5efa\u56fd\u9645\u4f1a\u8bae\u4e0a\uff08\u7b2c 102-122 \u9875\uff09\u3002\u65af\u666e\u6797\u683c\uff0c\u67cf\u6797\uff0c\u6d77\u5fb7\u5821\u3002", "note_en": "We&#39;re releasing Triton 1.0, an open-source Python-like programming language which enables researchers with no CUDA experience to write highly efficient GPU code\u2014most of the time on par with what an expert would be able to produce. Triton makes it possible to reach peak hardware performance with relatively little effort; for example, it can be used to write FP16 matrix multiplication kernels that match the performance of cuBLAS\u2014something that many GPU programmers can&#39;t do\u2014in under 25 lines of code. Our researchers have already used it to produce kernels that are up to 2x more efficient than equivalent Torch implementations, and we&#39;re excited to work with the community to make GPU programming more accessible to everyone.\n   in the field of Deep Learning are generally implemented using a combination of native framework operators. While convenient, this approach often requires the creation (and/or movement) of many temporary tensors, which can hurt the performance of neural networks at scale. These issues can be mitigated by writing specialized GPU kernels, but doing so can be surprisingly difficult due to the many intricacies of GPU programming.    And, although a variety of systems have recently emerged   to make this process easier, we have found them to be either too verbose, lack flexibility or generate code noticeably slower than our hand-tuned baselines. This has led us to extend and improve Triton , a recent language and compiler whose original creator now works at OpenAI.\n  The architecture of modern GPUs can be roughly divided into three major components\u2014DRAM, SRAM and ALUs\u2014each of which must be considered when optimizing CUDA code:\n Memory transfers from DRAM must be  coalesced into large transactions to leverage the large bus width of modern memory interfaces.\n Data must be manually stashed to SRAM prior to being re-used, and managed so as to minimize shared memory bank conflicts upon retrieval.\n Computations must be partitioned and scheduled carefully, both across and within Streaming Multiprocessors (SMs), so as to promote instruction/thread-level parallelism and leverage special-purpose ALUs (e.g., tensor cores).\n  Reasoning about all these factors can be challenging, even for seasoned CUDA programmers with many years of experience. The purpose of Triton is to fully automate these optimizations, so that developers can better focus on the high-level logic of their parallel code. Triton aims to be broadly applicable, and therefore does not automatically schedule work across SMs -- leaving some important algorithmic considerations (e.g. tiling, inter-SM synchronization) to the discretion of developers.\n    Out of all the Domain Specific Languages and JIT-compilers available, Triton is perhaps most similar to Numba: kernels are defined as decorated Python functions, and launched concurrently with different  program_id\u2019s on a grid of so-called  instances. However, as shown in the code snippet below, the resemblance stops there: Triton exposes intra-instance parallelism via operations on  blocks\u2014small arrays whose dimensions are powers of two\u2014rather than a Single Instruction, Multiple Thread (SIMT)  execution model. In doing so, Triton effectively abstracts away all the issues related to concurrency  within CUDA thread blocks (e.g., memory coalescing, shared memory synchronization/conflicts, tensor core scheduling).\n BLOCK = 512# This is a GPU kernel in Numba.# Different instances of this# function may run in parallel.@jitdef add(X, Y, Z, N): # In Numba/CUDA, each kernel # instance itself uses an SIMT execution # model, where instructions are executed in # parallel for different values of threadIdx tid = threadIdx.x bid = blockIdx.x # scalar index idx = bid * BLOCK + tid if id &lt; N: # There is no pointer in Numba. # Z,X,Y are dense tensors Z[idx] = X[idx] + Y[idx]...grid = (ceil_div(N, BLOCK),)block = (BLOCK,)add[grid, block](x, y, z, x.shape[0])\n BLOCK = 512# This is a GPU kernel in Triton.# Different instances of this# function may run in parallel.@jitdef add(X, Y, Z, N): # In Triton, each kernel instance # executes block operations on a # single thread: there is no construct # analogous to threadIdx pid = program_id(0) # block of indices idx = pid * BLOCK + arange(BLOCK) mask = idx &lt; N # Triton uses pointer arithmetics # rather than indexing operators x = load(X + idx, mask=mask) y = load(Y + idx, mask=mask) store(Z + idx, x + y, mask=mask)...grid = (ceil_div(N, BLOCK),)# no thread-blockadd[grid](x, y, z, x.shape[0])\n  While this may not be particularly helpful for embarrassingly parallel (i.e., element-wise) computations, it can greatly simplify the development of more complex GPU programs.\n Consider for example the case of a fused softmax kernel (below) in which each instance normalizes a different row of the given input tensor $X \\in \\mathbb{R}^{M \\times N}$. Standard CUDA implementations of this parallelization strategy can be challenging to write, requiring explicit synchronization between threads as they concurrently reduce the same row of $X$. Most of this complexity goes away with Triton, where each kernel instance loads the row of interest and normalizes it sequentially using NumPy-like primitives.\n import tritonimport triton.language as tl@triton.jitdef softmax(Y, stride_ym, stride_yn, X, stride_xm, stride_xn, M, N): # row index m = tl.program_id(0) # col indices # this specific kernel only works for matrices that # have less than BLOCK_SIZE columns BLOCK_SIZE = 1024 n = tl.arange(0, BLOCK_SIZE) # the memory address of all the elements # that we want to load can be computed as follows X = X + m * stride_xm + n * stride_xn # load input data; pad out-of-bounds elements with 0 x = tl.load(X, mask=n &lt; N, other=-float(&#39;inf&#39;)) # compute numerically-stable softmax z = x - tl.max(x, axis=0) num = tl.exp(z) denom = tl.sum(num, axis=0) y = num / denom # write back to Y Y = Y + m * stride_ym + n * stride_yn tl.store(Y, y, mask=n &lt; N)import torch# Allocate input/output tensorsX = torch.normal(0, 1, size=(583, 931), device=&#39;cuda&#39;)Y = torch.empty_like(X)# SPMD launch gridgrid = (X.shape[0], )# enqueue GPU kernelsoftmax[grid](Y, Y.stride(0), Y.stride(1), X, X.stride(0), X.stride(1), X.shape[0] , X.shape[1])\n  Note that the Triton JIT treats X and Y as  pointers rather than tensors; we felt like retaining low-level control of memory accesses was important to address more complex data structures (e.g., block-sparse tensors).\n Importantly, this particular implementation of softmax keeps the rows of $X$ in SRAM throughout the entire normalization process, which maximizes data reuse when applicable (~&lt;32K columns). This differs from PyTorch\u2019s internal CUDA code, whose use of temporary memory makes it more general but significantly slower (below). The bottom line here is not that Triton is inherently better, but that it simplifies the development of specialized kernels that can be much faster than those found in general-purpose libraries.\n   The lower performance of the Torch (v1.9) JIT highlights the difficulty of automatic CUDA code generation from sequences of high-level tensor operations.\n @torch.jit.scriptdef softmax(x): x_max = x.max(dim=1)[0] z = x - x_max[:, None] numerator = torch.exp(x) denominator = numerator.sum(dim=1) return numerator / denominator[:, None]\n   Being able to write fused kernels for element-wise operations and reductions is important, but not sufficient given the prominence of matrix multiplication tasks in neural networks. As it turns out, Triton also works very well for those, achieving peak performance with just ~25 lines of Python code. On the other hand, implementing something similar in CUDA would take  a lot more effort and would even be likely to achieve lower performance.\n @triton.jitdef matmul(A, B, C, M, N, K, stride_am, stride_ak, stride_bk, stride_bn, stride_cm, stride_cn, **META): # extract metaparameters BLOCK_M, GROUP_M = META[&#39;BLOCK_M&#39;], META[&#39;GROUP_M&#39;] BLOCK_N = META[&#39;BLOCK_N&#39;] BLOCK_K = META[&#39;BLOCK_K&#39;] # programs are grouped together to improve L2 hit rate _pid_m = tl.program_id(0) _pid_n = tl.program_id(1) pid_m = _pid_m // GROUP_M pid_n = (_pid_n * GROUP_M) + (_pid_m % GROUP_M) # rm (resp. rn) denotes a range of indices # for rows (resp. col) of C rm = pid_m * BLOCK_M + tl.arange(0, BLOCK_M) rn = pid_n * BLOCK_N + tl.arange(0, BLOCK_N) # rk denotes a range of indices for columns # (resp. rows) of A (resp. B) rk = tl.arange(0, BLOCK_K) # the memory addresses of elements in the first block of # A and B can be computed using numpy-style broadcasting A = A + (rm[:, None] * stride_am + rk[None, :] * stride_ak) B = B + (rk [:, None] * stride_bk + rn[None, :] * stride_bn) # initialize and iteratively update accumulator acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32) for k in range(K, 0, -BLOCK_K): a = tl.load(A) b = tl.load(B) # block level matrix multiplication acc += tl.dot(a, b) # increment pointers so that the next blocks of A and B # are loaded during the next iteration A += BLOCK_K * stride_ak B += BLOCK_K * stride_bk # fuse leaky ReLU if desired # acc = tl.where(acc &gt;= 0, acc, alpha * acc) # write back result C = C + (rm[:, None] * stride_cm + rn[None, :] * stride_cn) mask = (rm[:, None] &lt; M) &amp; (rn[None, :] &lt; N) tl.store(C, acc, mask=mask)\n  One important advantage of handwritten matrix multiplication kernels is that they can be customized as desired to accommodate fused transformations of their inputs (e.g., slicing) and outputs (e.g., Leaky ReLU). Without a system like Triton, non-trivial modifications of matrix multiplication kernels would be out-of-reach for developers without exceptional GPU programming expertise.\n    The good performance of Triton comes from a modular system architecture centered around Triton-IR, an LLVM-based intermediate representation in which multi-dimensional blocks of values are first-class citizens.\n  The  @triton.jit decorator works by walking the Abstract Syntax Tree (AST) of the provided Python function so as to generate Triton-IR on-the-fly using a common SSA construction algorithm.  The resulting IR code is then simplified, optimized and automatically parallelized by our compiler backend, before being converted into high-quality LLVM-IR\u2014and eventually PTX\u2014for execution on recent NVIDIA GPUs. CPUs and AMD GPUs are not supported at the moment, but we welcome community contributions aimed at addressing this limitation.\n  We have found that the use of blocked program representations via Triton-IR allows our compiler to automatically perform a wide variety of important program optimizations. For example, data can be automatically stashed to shared memory by looking at the operands of computationally intensive block-level operations (e.g.,  tl.dot)\u2014and allocated/synchronized using standard liveness analysis techniques.\n  On the other hand, Triton programs can be efficiently and automatically parallelized both (1) across SMs by executing different kernel instances concurrently, and (2) within SMs by analyzing the iteration space of each block-level operation and partitioning it adequately across different SIMD units, as shown below.\n   We intend for Triton to become a community-driven project. Feel free to fork our repository on  GitHub!\n If you\u2019re interested in joining our team and working on Triton &amp; GPU kernels,  we\u2019re hiring!\n  Yan, D., Wang, W., &amp; Chu, X. (2020, May).  Demystifying tensor cores to optimize half-precision matrix multiply. In  2020 IEEE International Parallel and Distributed Processing Symposium (IPDPS). IEEE.\n   Tillet, P., Kung, H. T., &amp; Cox, D. (2019, June).  Triton: an intermediate language and compiler for tiled neural network computations. In  Proceedings of the 3rd ACM SIGPLAN International Workshop on Machine Learning and Programming Languages (pp. 10-19).\n  Braun, M., Buchwald, S., Hack, S., Lei\u00dfa, R., Mallon, C., &amp; Zwinkau, A. (2013, March).  Simple and efficient construction of static single assignment form. In  International Conference on Compiler Construction (pp. 102-122). Springer, Berlin, Heidelberg.", "posttime": "2021-07-29 22:00:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u5f00\u6e90,\u795e\u7ecf\u7f51\u7edc,\u7f16\u7a0b,\u7528\u4e8e", "title": "Triton\uff1a\u7528\u4e8e\u795e\u7ecf\u7f51\u7edc\u7684\u5f00\u6e90 GPU \u7f16\u7a0b", "title_en": "Triton: Open-Source GPU Programming for Neural Networks", "transed": 1, "url": "https://www.openai.com/blog/triton/", "via": "", "real_tags": ["\u5f00\u6e90", "\u795e\u7ecf\u7f51\u7edc", "\u7f16\u7a0b", "\u7528\u4e8e"]}, {"category": "", "categoryclass": "", "imagename": "9894da14e366784fec9525c408f8a980.jpg", "infoid": 1070263, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fc7\u53bb\uff0c\u5982\u679c\u60a8\u60f3\u5c06\u60a8\u7684\u4fe1\u606f\u4f20\u8fbe\u7ed9\u7279\u5b9a\u7684\u4eba\u7fa4\uff0c\u60a8\u4f1a\u5728\u5e7f\u544a\u724c\u4e0a\u8d2d\u4e70\u5e7f\u544a\u7a7a\u95f4\uff0c\u8fd9\u4e9b\u4eba\u53ef\u80fd\u4f1a\u770b\u5230\u5b83\uff0c\u6216\u8005\u5728\u76ee\u6807\u5e02\u573a\u9605\u8bfb\u7684\u62a5\u7eb8\u7248\u5757\u4e2d\u8d2d\u4e70\u5e7f\u544a\u4f4d\u3002\u5728\u4e92\u8054\u7f51\u4e0a\u5728\u8d85\u5b9a\u5411\u5e7f\u544a\u4e4b\u524d\uff0c\u8fd9\u610f\u5473\u7740\u4e3a\u60a8\u7684\u4ea7\u54c1\u5bfb\u627e\u5728\u7ebf\u51fa\u7248\u7269\u6216\u5728\u641c\u7d22\u5f15\u64ce\u4e0a\u8d2d\u4e70\u7279\u5b9a\u7684\u76f8\u5173\u672f\u8bed\u3002\u5982\u679c\u60a8\u6253\u7b97\u63a8\u51fa\u65b0\u7684\u732b\u7cae\u7cfb\u5217\uff1f\u60a8\u5728 ModernCat.com \u4e0a\u6295\u653e\u5e7f\u544a\u6216\u652f\u4ed8\u201c\u732b\u7cae\u201d\u7684\u9876\u7ea7\u641c\u7d22\u5f15\u64ce\u7ed3\u679c\u3002\u968f\u7740\u7531\u4e2a\u4eba\u6570\u636e\u6536\u96c6\u63d0\u4f9b\u652f\u6301\u7684\u5e7f\u544a\u6280\u672f\u7684\u5174\u8d77\uff0c\u5e7f\u544a\u5546\u53ef\u4ee5\u901a\u8fc7\u5411\u5e7f\u544a\u6280\u672f\u516c\u53f8\u4ed8\u8d39\uff0c\u8ba9\u4ed6\u4eec\u5728\u89c2\u4f17\u6240\u5230\u4e4b\u5904\u5c55\u793a\u4ed6\u4eec\u7684\u5e7f\u544a\uff0c\u4ece\u800c\u63a5\u89e6\u5230\u7231\u732b\u4eba\u58eb\uff08\u6216\u4efb\u4f55\u76ee\u6807\u7fa4\u4f53\uff09\u3002\u4e5f\u8bb8\u60a8\u4f1a\u4e3a ModernCat.com \u652f\u4ed8\u9ad8\u4ef7\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u662f\u5728\u60a8\u4f7f\u7528 cookie \u8ddf\u8e2a\u5176\u4ed6\u7f51\u7ad9\u7684\u8bbf\u95ee\u8005\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u66f4\u4fbf\u5b9c\u5730\u901a\u8fc7\u8f83\u4f4e\u8d28\u91cf\u7684\u6e20\u9053\u63a5\u89e6\u5230\u76f8\u540c\u7684\u4eba\u3002\u8fd9\u79cd\u8de8\u7ad9\u70b9\u7684\u4fb5\u5165\u6027\u5b9a\u4f4d\u548c\u8ddf\u8e2a\u4eba\u5458\u7684\u7ed3\u679c\u662f\u9010\u5e95\u7ade\u4e89\u3002\u5e7f\u544a\u8d39\u7528\u5df2\u7ecf\u4ece\u7531\u77e5\u8bc6\u6e0a\u535a\u7684\u4f5c\u8005\u64b0\u5199\u7684\u5185\u5bb9\u7ecf\u8fc7\u5145\u5206\u7814\u7a76\u7684\u51fa\u7248\u7269\u8f6c\u79fb\u5230\u4f4e\u8d28\u91cf\u7684 SEO \u4f18\u5316\u7ad9\u70b9\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u5177\u6709\u91cd\u65b0\u5229\u7528\u7684\u6750\u6599\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u4ed8\u8d39\u5e7f\u544a\u5370\u8c61\u3002\u867d\u7136\u62a5\u7eb8\u8870\u843d\u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u4f46\u8fd9\u79cd\u52a8\u6001\u8f6c\u53d8\u662f\u4e00\u4e2a\u4e3b\u8981\u56e0\u7d20\u3002\u4e0e\u5176\u82b1\u94b1\u5728\u8c03\u67e5\u8bb0\u8005\u8eab\u4e0a\uff0c\u5236\u9020\u70b9\u51fb\u8bf1\u9975\u6765\u6539\u5199\u5176\u4ed6\u5730\u65b9\u6240\u505a\u7684\u7814\u7a76\uff0c\u8fd9\u5728\u7ecf\u6d4e\u4e0a\u66f4\u6709\u610f\u4e49\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u4ece\u5e7f\u544a\u6280\u672f\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6240\u6709\u7684\u5370\u8c61\u90fd\u662f\u4e00\u6837\u7684\u3002\u5982\u679c\u5e7f\u544a\u51fa\u73b0\u5728\u8bb0\u5f55\u7eb8\u4e0a\u6216\u70b9\u51fb\u8bf1\u9975\u7f51\u7ad9\u4e0a\uff0c\u5982\u679c\u5b83\u4eec\u63a5\u89e6\u5230\u7c7b\u4f3c\u7684\u53d7\u4f17\uff0c\u8fd9\u5e76\u4e0d\u91cd\u8981\u3002\u5e7f\u544a\u6d4f\u89c8\u91cf\u5df2\u7ecf\u6210\u4e3a\u4e00\u79cd\u5546\u54c1\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u5e7f\u544a\u8d44\u52a9\u7684\u5305\u62ec\u8bb8\u591a\u62a5\u7eb8\u5728\u5185\u7684\u7f51\u7ad9\uff0c\u4e89\u593a\u89c2\u70b9\u7684\u4ee3\u4ef7\u662f\u727a\u7272\u8d28\u91cf\u3002\u5207\u65ad\u5e7f\u544a\u6280\u672f\u76d1\u89c6\u6280\u672f\u3002\u5e7f\u544a\u6280\u672f\u7531\u4e2a\u4eba\u6570\u636e\u9a71\u52a8\uff0c\u4f46\u6709\u4e00\u4e9b\u4f8b\u5916\uff0c\u8fd9\u4e9b\u6570\u636e\u662f\u901a\u8fc7\u4f7f\u7528\u7b2c\u4e09\u65b9 cookie\u3001\u6307\u7eb9\u8bc6\u522b\u548c\u5176\u4ed6\u8ddf\u8e2a\u6280\u672f\u4ece\u5404\u4e2a\u53d1\u5e03\u5546\u7f51\u7ad9\u6536\u96c6\u7684\u3002\u53d1\u5e03\u5546\u5e94\u6d88\u9664\u6216\u4e25\u683c\u9650\u5236\u53ef\u4ee5\u5728\u5176\u7f51\u7ad9\u4e0a\u8fd0\u884c\u7684\u5e7f\u544a\u6280\u672f\u3002\u505c\u6b62\u4e3a\u8ddf\u8e2a\u516c\u53f8\u5c55\u793a\u5e7f\u544a\u63d0\u4f9b\u5e7f\u544a\u7a7a\u95f4\u3002\u5982\u679c\u65e0\u6cd5\u5728\u8ddf\u8e2a\u65b9\u9762\u9650\u5236\u5e7f\u544a\u7f51\u7edc\uff0c\u5219\u5220\u9664\u5b8c\u5168\u8ddf\u8e2a\u7528\u6237\u7684\u5e7f\u544a\u3002\u4e0d\u8fc7\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u653e\u5f03\u60a8\u7684\u5e7f\u544a\u6536\u5165\u3002\u867d\u7136\u5728\u7ebf\u5e7f\u544a\u7a7a\u95f4\u4f3c\u4e4e\u662f\u65e0\u9650\u7684\uff0c\u4f46\u4f18\u8d28\u5e7f\u544a\u7a7a\u95f4\u7684\u6570\u91cf\u975e\u5e38\u6709\u9650\u3002\u8f83\u5927\u7684\u53d1\u5e03\u5546\u53ef\u4ee5\u76f4\u63a5\u4e0e\u5e7f\u544a\u5546\u5408\u4f5c\uff0c\u79c1\u4e0b\u6295\u653e\u5e7f\u544a\uff0c\u8fd9\u901a\u5e38\u4f1a\u589e\u52a0\u4ed6\u4eec\u81ea\u5df1\u7684\u6536\u5165\u6b63\u5982\u7ebd\u7ea6\u65f6\u62a5\u6240\u505a\u7684\u90a3\u6837\u3002\u5bf9\u4e8e\u89c4\u6a21\u592a\u5c0f\u6216\u65e0\u6cd5\u8058\u8bf7\u9500\u552e\u4eba\u5458\u7684\u51fa\u7248\u5546\uff0c\u4ed6\u4eec\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5e7f\u544a\u7f51\u7edc\uff0c\u5728\u4e0d\u727a\u7272\u7528\u6237\u9690\u79c1\u6216\u4e3a\u4e86\u5e7f\u544a\u7f51\u7edc\u7684\u5229\u76ca\u800c\u7a83\u53d6\u53d7\u4f17\u6570\u636e\u7684\u60c5\u51b5\u4e0b\u6295\u653e\u5e7f\u544a\u3002\n\u4e3a\u4e2d\u5c0f\u578b\u53d1\u5e03\u5546\u63d0\u4f9b\u4e00\u79cd\u5728\u4e0d\u653e\u5f03\u5176\u9690\u79c1\u7684\u60c5\u51b5\u4e0b\u901a\u8fc7\u53d7\u4f17\u83b7\u5229\u7684\u65b9\u5f0f\u662f\u6211\u4eec\u5efa\u7acb EthicalAds \u7f51\u7edc\u7684\u539f\u56e0\u3002\u6709\u8bb8\u591a\u4ee5\u5f00\u53d1\u4eba\u5458\u4e3a\u4e2d\u5fc3\u7684\u7f51\u7ad9\u89c4\u6a21\u592a\u5c0f\u800c\u65e0\u6cd5\u76f4\u63a5\u9500\u552e\u5e7f\u544a\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u4e00\u4e2a\u4e0d\u4f1a\u635f\u5bb3\u60a8\u7684\u53d7\u4f17\u7684\u5e7f\u544a\u7f51\u7edc\uff0c\u52a0\u5165 EthicalAds \u5e76\u5e2e\u52a9\u4fdd\u62a4\u7f51\u7edc\u9690\u79c1\uff01", "note_en": "It used to be if you wanted to reach a particular group of people with your messageyou\u2019d buy ad space on a billboard where those people are likely to see itor buy an ad spot in a newspaper section that your target market reads.On the internet before hyper-targeted advertising,this meant finding an online publication for your productor buying up specific, relevant terms on search engines.If you plan to introduce a new line of cat food?You run an ad on  ModernCat.comor you pay to take the top search engine result for &#34;cat food&#34;.\n With the rise of ad tech powered by personal data collection,advertisers can reach cat lovers (or any targeted group)by paying ad tech companies to show their ads wherever the audience goes.Maybe you pay top dollar for ModernCat.com for a little while,but after you&#39;ve got cookies to track their visitors onto other sites,you can reach the same folks on lower quality channels more cheaply.\n  The result of this intrusive targeting and tracking people across sites is a race to the bottom.Advertising dollars have moved away from publications with well researched content written by knowledgeable authorsto low quality SEO optimized sites with re-purposed material developed to maximize paid ad impressions.While there are a lot of reasons for the fall of newspapers, this dynamic shift is a major factor.Instead of spending money on investigative reporters,it makes more economic sense to churn out clickbait that rephrases research done elsewhere.\n In essence, all impressions are the same from an ad tech perspective.It doesn&#39;t matter if ads appear on the paper of record or on a clickbait siteif they reach a similar audience.Ad views have become a commodity.For most ad-funded sites including many newspapers,the race for views comes at the cost of sacrificing quality.\n   Cut off ad tech surveillance technology. Ad tech is driven by personal data which, with some exceptions, is collected from individual publishers sites through the use of third-party cookies, fingerprinting, and other tracking technologies. Publishers should eliminate or severely restrict what ad tech can run on their site.\n Stop providing ad space for tracking companies to show ads. Where it isn&#39;t possible to restrict the ad network in terms of tracking, remove ads that track users completely.\n This doesn&#39;t mean giving up your ad revenue, though.While there seems to be unlimited ad space online there is a very limited amount of quality ad space.Larger publishers can work directly with advertisers to privately place ads often driving up their own revenue as the New York Times did.For publishers that are too small or unable to hire a sales force,they can find an ad network that will place ads without sacrificing user privacyor siphoning off their audience&#39;s data for the ad network&#39;s gain.\n Giving small and mid-size publishers a way to monetize their audience without giving up their privacyis the reason we built the EthicalAds network.There are lots of developer-focused sites that are too small to sell ads directly.If you&#39;re looking for an ad network that won&#39;t compromise your audience, join EthicalAds and help preserve privacy on the web!", "posttime": "2021-07-29 21:59:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5e7f\u544a,\u9ad8\u8d28\u91cf,ad", "title": "\u4fb5\u5165\u6027\u5e7f\u544a\u5b9a\u4f4d\u5bf9\u65b0\u95fb\u4e1a\u548c\u5176\u4ed6\u9ad8\u8d28\u91cf\u51fa\u7248\u5546\u4e0d\u5229", "title_en": "Invasive ad targeting is bad for journalism and other high-quality publishers", "transed": 1, "url": "https://www.ethicalads.io/blog/2021/05/how-invasive-ad-targeting-is-bad-for-journalism-and-other-high-quality-publishers/", "via": "", "real_tags": ["\u5e7f\u544a", "\u9ad8\u8d28\u91cf", "ad"]}, {"category": "", "categoryclass": "", "imagename": "d8ed0716c028f5fe25a36e0a6c2a4302.png", "infoid": 1070262, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ba9\u6211\u4eec\u56de\u5230 2006 \u5e74\u590f\u5929\u548c EC2 \u7684\u53d1\u5e03\u3002\u6211\u4eec\u4ece\u4e00\u79cd\u5b9e\u4f8b\u7c7b\u578b\uff08\u53e4\u8001\u7684 m1.small\uff09\u3001\u5b89\u5168\u7ec4\u548c\u53e4\u8001\u7684\u7f8e\u56fd\u4e1c\u90e8\uff08\u5f17\u5409\u5c3c\u4e9a\u5317\u90e8\uff09\u533a\u57df\u5f00\u59cb\u3002 EC2-Classic \u7f51\u7edc\u6a21\u578b\u662f\u6241\u5e73\u7684\uff0c\u5177\u6709\u5728\u542f\u52a8\u65f6\u5206\u914d\u7684\u516c\u5171 IP \u5730\u5740\u3002\u6211\u4eec\u7684\u521d\u59cb\u5ba2\u6237\u7acb\u5373\u770b\u5230\u4e86\u4ef7\u503c\uff0c\u5e76\u5f00\u59cb\u4ee5\u591a\u79cd\u4e0d\u540c\u65b9\u5f0f\u4f7f\u7528 EC2\u3002\u6211\u4eec\u6258\u7ba1\u4e86\u7f51\u7ad9\uff0c\u652f\u6301 Justin.TV \u7684\u53d1\u5e03\uff0c\u5e76\u5e2e\u52a9 Animoto \u5728\u4ed6\u4eec\u7684 Facebook \u5e94\u7528\u7a0b\u5e8f\u75c5\u6bd2\u5f0f\u4f20\u64ad\u65f6\u6269\u5c55\u5230\u5f53\u65f6\u60ca\u4eba\u7684 3400 \u4e2a\u5b9e\u4f8b\u3002 EC2 \u7684\u4e00\u4e9b\u65e9\u671f\u589e\u5f3a\u529f\u80fd\u4fa7\u91cd\u4e8e\u7f51\u7edc\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u5728 2008 \u5e74\u521d\u6dfb\u52a0\u4e86\u5f39\u6027 IP \u5730\u5740\uff0c\u4ee5\u4fbf\u5730\u5740\u53ef\u4ee5\u957f\u671f\u5b58\u5728\u5e76\u5728\u5fc5\u8981\u65f6\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u4e0e\u4e0d\u540c\u7684\u5b9e\u4f8b\u76f8\u5173\u8054\u3002\u4e4b\u540e\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86 Auto Scaling\u3001Load Balancing \u548c CloudWatch\uff0c\u4ee5\u5e2e\u52a9\u60a8\u6784\u5efa\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u65e9\u671f\u5ba2\u6237\u5e0c\u671b\u5c06\u4ed6\u4eec\u7684 EC2 \u5b9e\u4f8b\u8fde\u63a5\u5230\u4ed6\u4eec\u7684\u516c\u53f8\u7f51\u7edc\uff0c\u5bf9 IP \u5730\u5740\u8303\u56f4\u8fdb\u884c\u989d\u5916\u7684\u63a7\u5236\uff0c\u5e76\u6784\u5efa\u66f4\u590d\u6742\u7684\u7f51\u7edc\u62d3\u6251\u3002\u6211\u4eec\u5728 2009 \u5e74\u63a8\u51fa\u4e86 Amazon Virtual Private Cloud\uff0c\u5e76\u5728 2013 \u5e74\u901a\u8fc7 Virtual Private Clouds for Everyone \u4f7f VPC \u6a21\u578b\u57fa\u672c\u4e0a\u900f\u660e\u3002\u9000\u5f79 EC2-Classic EC2-Classic \u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u5f88\u597d\u7684\u670d\u52a1\uff0c\u4f46\u6211\u4eec\u5c06\u7ed9\u5b83\u4e00\u5757\u91d1\u8868\u548c\u5f53\u4e4b\u65e0\u6127\u7684\u9001\u522b\uff01\u8fd9\u7bc7\u6587\u7ae0\u5c06\u544a\u8bc9\u60a8\u9700\u8981\u4e86\u89e3\u4ec0\u4e48\u3001\u9700\u8981\u505a\u4ec0\u4e48\u4ee5\u53ca\u4f55\u65f6\u9700\u8981\u8fd9\u6837\u505a\u3002\u5728\u6211\u6df1\u5165\u7814\u7a76\u4e4b\u524d\uff0c\u8bf7\u653e\u5fc3\uff0c\u6211\u4eec\u5c06\u5c3d\u53ef\u80fd\u4f7f\u8fd9\u4e00\u5207\u987a\u5229\u4e14\u65e0\u4e2d\u65ad\u3002\u6211\u4eec\u4e0d\u6253\u7b97\u4e2d\u65ad\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u6211\u4eec\u4f1a\u4e3a\u60a8\u63d0\u4f9b\u5145\u8db3\u7684\u51c6\u5907\u65f6\u95f4\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8ba1\u5212\u3001\u6d4b\u8bd5\u548c\u6267\u884c\u8fc1\u79fb\u3002\u9664\u4e86\u8fd9\u7bc7\u535a\u6587\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u5de5\u5177\u3001\u6587\u6863\u548c\u4eba\u5458\uff0c\u5b83\u4eec\u90fd\u65e8\u5728\u63d0\u4f9b\u5e2e\u52a9\u3002\u65f6\u95f4 \u6211\u4eec\u5df2\u7ecf\u901a\u8fc7\u4ed6\u4eec\u7684\u5ba2\u6237\u56e2\u961f\u901a\u77e5\u5176\u4f59\u7684 EC2-Classic \u5ba2\u6237\uff0c\u5e76\u5c06\u5f88\u5feb\u5f00\u59cb\u5728 Personal Health Dashboard \u4e2d\u53d1\u5e03\u901a\u77e5\u3002\u4ee5\u4e0b\u662f\u60a8\u65e5\u5386\u7684\u91cd\u8981\u65e5\u671f\uff1a\n2013 \u5e74 12 \u6708 4 \u65e5\u4e4b\u540e\u521b\u5efa\u7684\u6240\u6709 AWS \u8d26\u6237\u90fd\u5df2\u7ecf\u662f VPC \u4e13\u7528\u7684\uff0c\u9664\u975e\u56e0\u652f\u6301\u8bf7\u6c42\u800c\u542f\u7528\u4e86 EC2-Classic\u3002 2021 \u5e74 10 \u6708 30 \u65e5\uff0c\u6211\u4eec\u5c06\u4e3a\u533a\u57df\u4e2d\u6ca1\u6709\u6d3b\u52a8 EC2-Classic \u8d44\u6e90\u7684 AWS \u8d26\u6237\u7981\u7528\u533a\u57df\u4e2d\u7684 EC2-Classic\uff0c\u5982\u4e0b\u6240\u5217\u3002\u6211\u4eec\u8fd8\u5c06\u505c\u6b62\u9500\u552e EC2-Classic \u7684 1 \u5e74\u548c 3 \u5e74\u9884\u7559\u5b9e\u4f8b\u3002\u6211\u4eec\u9884\u8ba1\u6240\u6709\u8fc1\u79fb\u5c06\u5728 2022 \u5e74 8 \u6708 15 \u65e5\u5b8c\u6210\uff0c\u4efb\u4f55 AWS \u8d26\u6237\u4e2d\u90fd\u4e0d\u5b58\u5728\u5269\u4f59\u7684 EC2-Classic \u8d44\u6e90\u3002\u540c\u6837\uff0c\u6211\u4eec\u4e0d\u6253\u7b97\u4e2d\u65ad\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5e76\u5c06\u5c3d\u6700\u5927\u52aa\u529b\u5e2e\u52a9\u60a8\u6ee1\u8db3\u8fd9\u4e9b\u65e5\u671f\u3002\u53d7\u5f71\u54cd\u7684\u8d44\u6e90 \u4e3a\u4e86\u4ece EC2-Classic \u5b8c\u5168\u8fc1\u79fb\u5230 VPC\uff0c\u60a8\u9700\u8981\u67e5\u627e\u3001\u68c0\u67e5\u548c\u8fc1\u79fb\u4ee5\u4e0b\u6240\u6709\u8d44\u6e90\uff1a \u5728\u51c6\u5907\u8fc1\u79fb\u65f6\uff0c\u8bf7\u52a1\u5fc5\u9605\u8bfb\u4ece EC2-Classic \u8fc1\u79fb\u5230 VPC\u3002\u60a8\u53ef\u80fd\u9700\u8981\u4e3a\u60a8\u7684\u8d26\u6237\u521b\u5efa\uff08\u6216\u91cd\u65b0\u521b\u5efa\uff0c\u5982\u679c\u60a8\u5220\u9664\u4e86\u5b83\uff09\u9ed8\u8ba4 VPC\u3002\u8981\u4e86\u89e3\u5982\u4f55\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u9605\u8bfb\u521b\u5efa\u9ed8\u8ba4 VPC\u3002\n\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u80fd\u591f\u4fee\u6539\u73b0\u6709\u8d44\u6e90\uff1b\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u60a8\u5c06\u9700\u8981\u5728 VPC \u4e2d\u521b\u5efa\u65b0\u7684\u7b49\u6548\u8d44\u6e90\u3002\u67e5\u627e EC2-Classic \u8d44\u6e90 \u4f7f\u7528 EC2 Classic Resource Finder \u811a\u672c\u67e5\u627e\u60a8\u8d26\u6237\u4e2d\u7684\u6240\u6709 EC2-Classic \u8d44\u6e90\u3002\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u5355\u4e2a AWS \u8d26\u6237\u4e2d\u8fd0\u884c\u5b83\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5305\u542b\u7684\u591a\u8d26\u6237\u5305\u88c5\u5668\u9488\u5bf9 AWS \u7ec4\u7ec7\u7684\u6bcf\u4e2a\u8d26\u6237\u8fd0\u884c\u5b83\u3002 Resource Finder \u8bbf\u95ee\u6bcf\u4e2a AWS \u533a\u57df\uff0c\u67e5\u627e\u7279\u5b9a\u8d44\u6e90\uff0c\u5e76\u751f\u6210\u4e00\u7ec4 CSV \u6587\u4ef6\u3002\u8fd9\u662f\u6211\u7684\u8fd0\u884c\u8f93\u51fa\u7684\u7b2c\u4e00\u90e8\u5206\uff1a\u811a\u672c\u9700\u8981\u51e0\u5206\u949f\u624d\u80fd\u8fd0\u884c\u3002\u6211\u68c0\u67e5\u4e86 CSV \u6587\u4ef6\u5217\u8868\u4ee5\u4e86\u89e3\u6211\u9700\u8981\u505a\u591a\u5c11\u5de5\u4f5c\uff1a \u539f\u6765\u6211\u6709\u4e00\u4e9b\u5df2\u505c\u6b62\u7684 OpsWorks \u5806\u6808\uff0c\u6211\u53ef\u4ee5\u8fc1\u79fb\u6216\u5220\u9664\u5b83\u4eec\uff1a \u8fc1\u79fb\u5de5\u5177 \u4ee5\u4e0b\u662f\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u8fc1\u79fb\u5de5\u5177\u7684\u6982\u8ff0\u8fc1\u79fb\u60a8\u7684 AWS \u8d44\u6e90\uff1aAWS \u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u670d\u52a1 \u2013 \u4f7f\u7528 AWS MGN \u5c06\u60a8\u7684\u5b9e\u4f8b\u548c\u6570\u636e\u5e93\u4ece EC2-Classic \u8fc1\u79fb\u5230 VPC\uff0c\u540c\u65f6\u5c06\u505c\u673a\u65f6\u95f4\u964d\u81f3\u6700\u4f4e\u3002\u6b64\u670d\u52a1\u4f7f\u7528\u5757\u7ea7\u590d\u5236\u5e76\u5728\u591a\u4e2a\u7248\u672c\u7684 Linux \u548c Windows \u4e0a\u8fd0\u884c\uff08\u9605\u8bfb\u5982\u4f55\u4f7f\u7528\u65b0\u7684 AWS \u5e94\u7528\u7a0b\u5e8f\u8fc1\u79fb\u670d\u52a1\u8fdb\u884c\u76f4\u63a5\u8fc1\u79fb\u8fc1\u79fb\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff09\u3002\u5bf9\u4e8e\u60a8\u8fc1\u79fb\u7684\u6bcf\u53f0\u670d\u52a1\u5668\uff0c\u524d 90 \u5929\u7684\u590d\u5236\u90fd\u662f\u514d\u8d39\u7684\uff1b\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 AWS \u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5b9a\u4ef7\u9875\u9762\u3002\u652f\u6301\u81ea\u52a8\u5316\u5de5\u4f5c\u6d41 \u2013 \u6b64\u5de5\u4f5c\u6d41\u652f\u6301\u7b80\u5355\u7684\u5b9e\u4f8b\u7ea7\u8fc1\u79fb\u3002\u5b83\u5c06\u6e90\u5b9e\u4f8b\u8f6c\u6362\u4e3a AMI\uff0c\u521b\u5efa\u5b89\u5168\u7ec4\u7684\u955c\u50cf\uff0c\u5e76\u5728\u76ee\u6807 VPC \u4e2d\u542f\u52a8\u65b0\u5b9e\u4f8b\u3002\n\u8fc1\u79fb\u7279\u5b9a\u533a\u57df\u5185\u7684\u6240\u6709\u8d44\u6e90\u540e\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u652f\u6301\u6848\u4f8b\u6765\u7981\u7528 EC2-Classic\u3002\u5982\u679c\u60a8\u60f3\u907f\u514d\u5728\u8be5\u533a\u57df\u610f\u5916\u521b\u5efa\u65b0\u7684 EC2-Classic \u8d44\u6e90\uff0c\u60a8\u53ef\u4ee5\u8fd9\u6837\u505a\uff0c\u4f46\u8fd9\u7edd\u5bf9\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u5728\u533a\u57df\u4e2d\u7981\u7528 EC2-Classic \u65e8\u5728\u6210\u4e3a\u5355\u5411\u95e8\uff0c\u4f46\u5982\u679c\u60a8\u8fd0\u884c\u5b83\uff0c\u7136\u540e\u53d1\u73b0\u9700\u8981\u4e3a\u533a\u57df\u91cd\u65b0\u542f\u7528 EC2-Classic\uff0c\u60a8\u53ef\u4ee5\u8054\u7cfb AWS Support\u3002\u8bf7\u52a1\u5fc5\u8fd0\u884c\u524d\u9762\u63d0\u5230\u7684\u8d44\u6e90\u67e5\u627e\u5668\uff0c\u5e76\u786e\u4fdd\u60a8\u6ca1\u6709\u7559\u4e0b\u4efb\u4f55\u8d44\u6e90\u3002\u5373\u4f7f\u5e10\u6237\u72b6\u6001\u5df2\u66f4\u6539\uff0c\u8fd9\u4e9b\u8d44\u6e90\u4ecd\u5c06\u7ee7\u7eed\u8fd0\u884c\u5e76\u4ea7\u751f\u8d39\u7528\u3002 IP \u5730\u5740\u8fc1\u79fb \u2013 \u5982\u679c\u60a8\u8981\u8fc1\u79fb EC2 \u5b9e\u4f8b\u4ee5\u53ca\u4e0e\u8be5\u5b9e\u4f8b\u5173\u8054\u7684\u4efb\u4f55\u5f39\u6027 IP \u5730\u5740\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 move-address-to-vpc\uff0c\u7136\u540e\u5c06\u5f39\u6027 IP \u9644\u52a0\u5230\u8fc1\u79fb\u7684\u5b9e\u4f8b\u3002\u8fd9\u5c06\u5141\u8bb8\u60a8\u7ee7\u7eed\u901a\u8fc7\u539f\u59cb DNS \u540d\u79f0\u5f15\u7528\u5b9e\u4f8b\u3002 Classic Load Balancer \u2013 \u5982\u679c\u60a8\u8ba1\u5212\u8fc1\u79fb Classic Load Balancer \u5e76\u9700\u8981\u4fdd\u7559\u539f\u59cb DNS \u540d\u79f0\uff0c\u8bf7\u8054\u7cfb AWS Support \u6216\u60a8\u7684 AWS \u5ba2\u6237\u56e2\u961f\u3002\u66f4\u65b0\u5b9e\u4f8b\u7c7b\u578b EC2-Classic \u4e2d\u53ef\u7528\u7684\u6240\u6709\u5b9e\u4f8b\u7c7b\u578b\u5728 VPC \u4e2d\u4e5f\u53ef\u7528\u3002\u4f46\u662f\uff0c\u8bb8\u591a\u8f83\u65b0\u7684\u5b9e\u4f8b\u7c7b\u578b\u4ec5\u5728 VPC \u4e2d\u53ef\u7528\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8003\u8651\u5c06\u66f4\u65b0\u4f5c\u4e3a\u6574\u4f53\u8fc1\u79fb\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u662f\u4e00\u5f20\u5e2e\u52a9\u60a8\u5165\u95e8\u7684\u5730\u56fe\uff1a\u4f9d\u9760\u6211\u4eec AWS Support \u7684\u540c\u4e8b\u968f\u65f6\u51c6\u5907\u5e2e\u52a9\u60a8\u8fc1\u79fb\u5230 VPC\u3002\u6211\u8fd8\u8ba1\u5212\u5728\u5176\u4ed6\u4fe1\u606f\u548c\u5176\u4ed6\u8fc1\u79fb\u8d44\u6e90\u53ef\u7528\u540e\u7acb\u5373\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\u3002", "note_en": "Let\u2019s go back to the summer of 2006 and the  launch of EC2. We started out with one instance type (the venerable   m1.small), security groups, and the venerable  US East (N. Virginia) Region. The  EC2-Classic network model was  flat, with public IP addresses that were assigned at launch time.\n  Our initial customers saw the value right away and started to put EC2 to use in many different ways. We hosted web sites,  supported the launch of Justin.TV, and  helped Animoto to scale to a then-amazing 3400 instances when their Facebook app went viral.\n  Some of the early enhancements to EC2 focused on networking. For example, we added  Elastic IP addresses in early 2008 so that addresses could be long-lived and associated with different instances over time if necessary. After that we added  Auto Scaling, Load Balancing, and CloudWatch to help you to build highly scalable applications.\n  Early customers wanted to connect their EC2 instances to their corporate networks, exercise additional control over IP address ranges, and to construct more sophisticated network topologies. We launched  Amazon Virtual Private Cloud in 2009, and in 2013 we made the VPC model essentially transparent with  Virtual Private Clouds for Everyone.\n  Retiring EC2-Classic  EC2-Classic has served us well, but we\u2019re going to give it a gold watch and a well-deserved sendoff! This post will tell you what you need to know, what you need to do, and when you need to do it.\n  Before I dive in, rest assured that we are going to make this as smooth and as non-disruptive as possible. We are not planning to disrupt any workloads and we are giving you plenty of lead time so that you can plan, test, and perform your migration. In addition to this blog post, we have tools, documentation, and people that are all designed to help.\n  Timing  We are already notifying the remaining EC2-Classic customers via their account teams, and will soon start to issue notices in the Personal Health Dashboard. Here are the important dates for your calendar:\n  All AWS accounts created after  December 4, 2013 are already VPC-only, unless EC2-Classic was enabled as a result of a support request.\n  On October 30, 2021 we will disable EC2-Classic in Regions for AWS accounts that have no active EC2-Classic resources in the Region, as listed below. We will also stop selling 1-year and 3-year Reserved Instances for EC2-Classic.\n  On  August 15, 2022 we expect all migrations to be complete, with no remaining EC2-Classic resources present in any AWS account.\n  Again, we don\u2019t plan to disrupt any workloads and will do our best to help you to meet these dates.\n  Affected Resources  In order to fully migrate from EC2-Classic to VPC, you need to find, examine, and migrate all of the following resources:\n    In preparation for your migration, be sure to read  Migrate from EC2-Classic to a VPC.\n  You may need to create (or re-create, if you deleted it) the default VPC for your account. To learn how to do this, read  Creating a Default VPC.\n  In some cases you will be able to modify the existing resources; in others you will need to create new and equivalent resources in a VPC.\n  Finding EC2-Classic Resources  Use the  EC2 Classic Resource Finder script to find all of the EC2-Classic resources in your account. You can run this directly in a single AWS account, or you can use the included  multi-account-wrapper to run it against each account of an AWS Organization. The Resource Finder visits each AWS Region, looks for specific resources, and generates a set of CSV files. Here\u2019s the first part of the output from my run:\n    The script takes a few minutes to run. I inspect the list of CSV files to get a sense of how much work I need to do:\n        Turns out that I have some stopped OpsWorks Stacks that I can either migrate or delete:\n    Migration Tools  Here\u2019s an overview of the migration tools that you can use to migrate your AWS resources:\n  AWS Application Migration Service \u2013 Use  AWS MGN to migrate your instances and your databases from EC2-Classic to VPC with minimal downtime. This service uses block-level replication and runs on multiple versions of Linux and Windows (read  How to Use the New AWS Application Migration Service for Lift-and-Shift Migrations to learn more). The first 90 days of replication are free for each server that you migrate; see the  AWS Application Service Pricing page for more information.\n  Support Automation Workflow \u2013 This workflow supports simple, instance-level migration. It converts the source instance to an AMI, creates mirrors of the security groups, and launches new instances in the destination VPC.\n  After you have migrated all of the resources within a particular region, you can disable EC2-Classic by creating a support case. You can do this if you want to avoid accidentally creating new EC2-Classic resources in the region, but it is definitely not required.\n  Disabling EC2-Classic in a region is intended to be a one-way door, but you can contact AWS Support if you run it and then find that you need to re-enable EC2-Classic for a region. Be sure to run the Resource Finder that mentioned earlier and make sure that you have not left any resources behind. These resources will continue to run and to accrue charges even after the account status has been changed.\n  IP Address Migration \u2013 If you are migrating an EC2 instance and any Elastic IP addresses associated with the instance, you can use  move-address-to-vpc then attach the Elastic IP to the migrated instance. This will allow you to continue to reference the instance by the original DNS name.\n  Classic Load Balancers \u2013 If you plan to migrate a Classic Load Balancer and need to preserve the original DNS names, please contact AWS Support or your AWS account team.\n  Updating Instance Types  All of the instance types that are available in EC2-Classic are also available in VPC. However, many newer instance types are available only in VPC, and you may want to consider an update as part of your overall migration plan. Here\u2019s a map to get you started:\n    Count on Us  My colleagues in AWS Support are ready to help you with your migration to VPC. I am also planning to update this post with additional information and other migration resources as soon as they become available.", "posttime": "2021-07-29 21:59:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "amazon,ec2,\u8fc1\u79fb", "title": "Amazon EC2-Classic \u5373\u5c06\u505c\u7528", "title_en": "Amazon EC2-Classic Is Retiring", "transed": 1, "url": "https://aws.amazon.com/blogs/aws/ec2-classic-is-retiring-heres-how-to-prepare/", "via": "", "real_tags": ["amazon", "ec2", "\u8fc1\u79fb"]}, {"category": "", "categoryclass": "", "imagename": "3fe28e363a17af3c9917fda3ee7b567a.png", "infoid": 1070261, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u80fd\u7528\u88ab\u76d7\u7684\u7b14\u8bb0\u672c\u7535\u8111\u505a\u4ec0\u4e48\uff1f\u4f60\u80fd\u8bbf\u95ee\u6211\u4eec\u7684\u5185\u90e8\u7f51\u7edc\u5417\uff1f\u8fd9\u662f\u5ba2\u6237\u6700\u8fd1\u60f3\u8981\u56de\u7b54\u7684\u95ee\u9898\u3002\u5267\u900f\u8b66\u62a5\uff1a\u662f\u7684\uff0c\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u3002\u8fd9\u7bc7\u535a\u6587\u5c06\u5e26\u60a8\u4e86\u89e3\u6211\u4eec\u5982\u4f55\u83b7\u53d6\u201c\u88ab\u76d7\u201d\u7684\u516c\u53f8\u7b14\u8bb0\u672c\u7535\u8111\u5e76\u5c06\u591a\u4e2a\u6f0f\u6d1e\u94fe\u63a5\u5728\u4e00\u8d77\u4ee5\u8fdb\u5165\u5ba2\u6237\u7684\u516c\u53f8\u7f51\u7edc\u3002\u6211\u4eec\u6536\u5230\u4e86\u4e00\u53f0\u9884\u914d\u7f6e\u4e86\u8be5\u7ec4\u7ec7\u6807\u51c6\u5b89\u5168\u5806\u6808\u7684\u8054\u60f3\u7b14\u8bb0\u672c\u7535\u8111\u3002\u6211\u4eec\u6ca1\u6709\u5f97\u5230\u5173\u4e8e\u8fd9\u53f0\u7b14\u8bb0\u672c\u7535\u8111\u7684\u4efb\u4f55\u4fe1\u606f\uff0c\u6ca1\u6709\u6d4b\u8bd5\u51ed\u636e\uff0c\u6ca1\u6709\u914d\u7f6e\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ec0\u4e48\u90fd\u6ca1\u6709\uff0c\u8fd9\u662f\u4e00\u4e2a 100% \u7684\u9ed1\u76d2\u6d4b\u8bd5\u3002\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u6765\u540e\uff0c\u6211\u4eec\u6253\u5f00\u4e86\u88c5\u8fd0\u7bb1\u5e76\u5f00\u59cb\u5de5\u4f5c\u3002\u5728\u6211\u4eec\u5bf9\u7b14\u8bb0\u672c\u7535\u8111\u8fdb\u884c\u8c03\u67e5\uff08BIOS \u8bbe\u7f6e\u3001\u6b63\u5e38\u542f\u52a8\u64cd\u4f5c\u3001\u786c\u4ef6\u8be6\u7ec6\u4fe1\u606f\u7b49\uff09\u4e4b\u540e\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u9075\u5faa\u4e86\u8bb8\u591a\u6700\u4f73\u5b9e\u8df5\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u8bb8\u591a\u5e38\u89c1\u653b\u51fb\u3002\u4f8b\u5982\uff1a \u00b7 \u4f7f\u7528 Microsoft \u7684 BitLocker \u5bf9 SSD \u8fdb\u884c\u5168\u76d8\u52a0\u5bc6 (FDE)\uff0c\u901a\u8fc7\u53ef\u4fe1\u5e73\u53f0\u6a21\u5757 (TPM) \u8fdb\u884c\u4fdd\u62a4 \u5728\u6ca1\u6709\u5176\u4ed6\u4efb\u4f55\u5de5\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u6700\u540e\u4e00\u70b9\uff0cTPM \u4fdd\u62a4\u7684 BitLocker\uff0c\u5c06\u6210\u4e3a\u6211\u4eec\u7684\u65b9\u6cd5\u4e4b\u4e00\u3002\u5176\u4e2d\u4e00\u4ef6\u4e8b\u6211\u4eec\u5728\u8fdb\u884c\u4fa6\u5bdf\u65f6\u770b\u5230\u7b14\u8bb0\u672c\u7535\u8111\u76f4\u63a5\u542f\u52a8\u5230 Windows 10 \u767b\u5f55\u5c4f\u5e55\u3002\u518d\u52a0\u4e0a BitLocker \u52a0\u5bc6\u610f\u5473\u7740\u9a71\u52a8\u5668\u89e3\u5bc6\u5bc6\u94a5\u4ec5\u4ece TPM \u4e2d\u63d0\u53d6\uff0c\u4e0d\u9700\u8981\u7528\u6237\u63d0\u4f9b PIN \u6216\u5bc6\u7801\uff0c\u8fd9\u662f BitLocker \u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002 Microsoft \u5efa\u8bae\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u63d0\u9ad8\u5b89\u5168\u6027\uff1a \u6709\u8db3\u591f\u65f6\u95f4\u7684\u6709\u9488\u5bf9\u6027\u7684\u653b\u51fb\uff1b\u8be5\u653b\u51fb\u8005\u5c06\u6253\u5f00\u5916\u58f3\u3001\u710a\u63a5\u5e76\u4f7f\u7528\u590d\u6742\u7684\u786c\u4ef6\u6216\u8f6f\u4ef6\u3002 \u2022 \u4f7f\u7528PIN \u4fdd\u62a4\u5668\u5c06\u9884\u542f\u52a8\u8eab\u4efd\u9a8c\u8bc1\u8bbe\u7f6e\u4e3aTPM\uff08\u4f7f\u7528\u590d\u6742\u7684\u5b57\u6bcd\u6570\u5b57PIN [\u589e\u5f3a\u578bPIN] \u4ee5\u5e2e\u52a9TPM \u53cd\u653b\u51fb\u7f13\u89e3\uff09\u3002\u6b63\u5982\u6211\u4eec\u5c06\u5411\u60a8\u5c55\u793a\u7684\uff0c\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u4e00\u4e2a\u9884\u5148\u88c5\u5907\u597d\u7684\u653b\u51fb\u8005\u53ef\u4ee5\u5728\u4e0d\u5230 30 \u5206\u949f\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u6574\u4e2a\u653b\u51fb\u94fe\uff0c\u65e0\u9700\u710a\u63a5\u3001\u7b80\u5355\u4e14\u76f8\u5bf9\u4fbf\u5b9c\u7684\u786c\u4ef6\u548c\u516c\u5f00\u53ef\u7528\u7684\u5de5\u5177\u3002\u4e00\u4e2a\u5c06\u5b83\u5b8c\u5168\u7f6e\u4e8e\u90aa\u6076\u5973\u4ec6\u9886\u57df\u7684\u8fc7\u7a0b\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u77e5\u9053\u7684\u4eba\u6765\u8bf4\uff0cTPM \u662f\u4e00\u79cd\u9ad8\u5ea6\u5b89\u5168\u4e14\u590d\u6742\u7684\u786c\u4ef6\uff0c\u5177\u6709\u5927\u91cf\u7684\u7be1\u6539\u68c0\u6d4b\u548c\u4fdd\u62a4\u3002\u76f4\u63a5\u653b\u51fb TPM \u4e0d\u592a\u53ef\u80fd\u5728\u6d4b\u8bd5\u65f6\u95f4\u5185\u53d6\u5f97\u6210\u679c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u67e5\u770b\u56f4\u7ed5 TPM \u7684\u4fe1\u4efb\u5173\u7cfb\u53ca\u5176\u4f9d\u8d56\u7684\u5185\u5bb9\u3002\u5b83\u662f\u4e0e\u4e3b\u677f\u4e0a\u5176\u4ed6\u7ec4\u4ef6\u4e0d\u540c\u7684\u72ec\u7acb\u82af\u7247\uff0c\u53ef\u80fd\u5bb9\u6613\u53d7\u5230\u5404\u79cd\u653b\u51fb\u3002\u6b64\u5904\u663e\u793a\u4e86\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u7279\u5b9a TPM\uff1a\u7814\u7a76\u7279\u5b9a TPM \u82af\u7247\u540e\u53d1\u73b0\u5b83\u4f7f\u7528\u4e32\u884c\u5916\u8bbe\u63a5\u53e3 (SPI) \u534f\u8bae\u4e0e CPU \u901a\u4fe1\uff1a\u5f53\u6211\u4eec\u53d1\u73b0\u7b14\u8bb0\u672c\u7535\u8111\u539f\u7406\u56fe\u4e2d\u63d0\u5230\u7684 TPM \u65f6\u8fdb\u4e00\u6b65\u652f\u6301\u8be5\u534f\u8bae\uff1aSPI \u662f\u4e00\u79cd\u901a\u4fe1\u534f\u8bae\u5bf9\u4e8e\u5d4c\u5165\u5f0f\u7cfb\u7edf\uff0c\u51e0\u4e4e\u5728\u6240\u6709\u786c\u4ef6\u4e2d\u90fd\u975e\u5e38\u666e\u904d\u3002\u7531\u4e8e\u5176\u7b80\u5355\u6027\uff0cSPI \u6ca1\u6709\u52a0\u5bc6\u9009\u9879\u3002\u4efb\u4f55\u52a0\u5bc6\u90fd\u5fc5\u987b\u7531\u8bbe\u5907\u672c\u8eab\u5904\u7406\u3002\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cBitLocker \u672a\u4f7f\u7528 TPM 2.0 \u6807\u51c6\u7684\u4efb\u4f55\u52a0\u5bc6\u901a\u4fe1\u529f\u80fd\uff0c\u8fd9\u610f\u5473\u7740\u6765\u81ea TPM \u7684\u4efb\u4f55\u6570\u636e\u90fd\u4ee5\u660e\u6587\u5f62\u5f0f\u51fa\u73b0\uff0c\u5305\u62ec Windows \u7684\u89e3\u5bc6\u5bc6\u94a5\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6\u8be5\u5bc6\u94a5\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u89e3\u5bc6\u9a71\u52a8\u5668\uff0c\u8bbf\u95ee VPN \u5ba2\u6237\u7aef\u914d\u7f6e\uff0c\u5e76\u53ef\u80fd\u8bbf\u95ee\u5185\u90e8\u7f51\u7edc\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7ed5\u8fc7 TPM \u7c7b\u4f3c\u4e8e\u5ffd\u7565\u8bfa\u514b\u65af\u5821\u800c\u4e13\u6ce8\u4e8e\u4ece\u5b83\u51fa\u6765\u7684\u4e0d\u90a3\u4e48\u88c5\u7532\u7684\u6c7d\u8f66\u3002\u4e3a\u4e86\u55c5\u63a2\u901a\u8fc7 SPI \u603b\u7ebf\u79fb\u52a8\u7684\u6570\u636e\uff0c\u6211\u4eec\u5fc5\u987b\u5c06\u5f15\u7ebf\u6216\u63a2\u9488\u8fde\u63a5\u5230 TPM \u4e0a\u7684\u5f15\u811a\uff08\u4e0a\u9762\u6807\u8bb0\u4e3a MOSI\u3001MISO\u3001CS \u548c CLK\uff09\u3002\u901a\u5e38\u8fd9\u5f88\u7b80\u5355\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b58\u5728\u5b9e\u9645\u95ee\u9898\u3002\u6b64 TPM \u91c7\u7528 VQFN32 \u5c01\u88c5\uff0c\u975e\u5e38\u5c0f\u3002 \u201c\u9500\u201d\u5b9e\u9645\u4e0a\u53ea\u6709 0.25 \u6beb\u7c73\u5bbd\uff0c\u95f4\u8ddd\u4e3a 0.5 \u6beb\u7c73\u3002\u8fd9\u4e9b\u201c\u5f15\u811a\u201d\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u5f15\u811a\uff0c\u5b83\u4eec\u5e73\u8d34\u5728\u82af\u7247\u58c1\u4e0a\uff0c\u56e0\u6b64\u5728\u7269\u7406\u4e0a\u4e0d\u53ef\u80fd\u8fde\u63a5\u4efb\u4f55\u7c7b\u578b\u7684\u5939\u5b50\u3002\u60a8\u53ef\u4ee5\u5c06\u201c\u98de\u7ebf\u201d\u710a\u63a5\u5230\u710a\u76d8\u4e0a\uff0c\u4f46\u8fd9\u5f88\u9ebb\u70e6\uff0c\u800c\u4e14\u5f80\u5f80\u662f\u4e00\u79cd\u7269\u7406\u4e0a\u975e\u5e38\u4e0d\u7a33\u5b9a\u7684\u8fde\u63a5\u3002\u6216\u8005\uff0c\u4e00\u79cd\u5e38\u89c1\u7684\u7b56\u7565\u662f\u653e\u7f6e\u4e32\u8054\u7535\u963b\u4ee5\u8fdb\u884c\u710a\u63a5\uff0c\u4f46\u5b83\u4eec\u540c\u6837\u5c0f\uff0c\u751a\u81f3\u66f4\u8106\u5f31\u3002\u8fd9\u5e76\u4e0d\u5bb9\u6613\u3002\u4f46\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u6211\u4eec\u8ba4\u4e3a\u53ef\u80fd\u6709\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002\u5f88\u591a\u65f6\u5019\uff0cSPI \u82af\u7247\u4e0e\u5176\u4ed6 SPI \u82af\u7247\u5171\u4eab\u76f8\u540c\u7684\u201c\u603b\u7ebf\u201d\u3002\u8fd9\u662f\u786c\u4ef6\u8bbe\u8ba1\u4eba\u5458\u7528\u6765\u7b80\u5316\u8fde\u63a5\u3001\u8282\u7701\u6210\u672c\u5e76\u4f7f\u6545\u969c\u6392\u9664/\u7f16\u7a0b\u66f4\u5bb9\u6613\u7684\u6280\u672f\u3002\u6211\u4eec\u5f00\u59cb\u5728\u6574\u4e2a\u7535\u8def\u677f\u4e0a\u5bfb\u627e\u53ef\u80fd\u4e0e TPM \u4f4d\u4e8e\u540c\u4e00\u603b\u7ebf\u4e0a\u7684\u4efb\u4f55\u5176\u4ed6\u82af\u7247\u3002\u4e5f\u8bb8\u4ed6\u4eec\u7684\u522b\u9488\u4f1a\u66f4\u5927\u66f4\u5bb9\u6613\u4f7f\u7528\u3002\u7ecf\u8fc7\u4e00\u4e9b\u63a2\u7d22\u548c\u67e5\u9605\u539f\u7406\u56fe\u540e\uff0c\u7ed3\u679c\u8bc1\u660e TPM \u4e0e\u53e6\u4e00\u4e2a\u82af\u7247\u5171\u4eab\u4e00\u4e2a SPI \u603b\u7ebf\uff0cCMOS \u82af\u7247\u80af\u5b9a\u6709\u66f4\u5927\u7684\u5f15\u811a\u3002\u4e8b\u5b9e\u4e0a\uff0cCMOS \u82af\u7247\u51e0\u4e4e\u662f\u6807\u51c6\u4e3b\u677f\u4e0a\u6700\u5927\u7684\u5f15\u811a\u5c3a\u5bf8\uff0c\u5b83\u662f SOP-8\uff08\u53c8\u540d SOIC-8\uff09\u3002\n\u8fd9\u662f\u7406\u60f3\u7684\u3002\u6211\u4eec\u7ee7\u7eed\u6839\u636e CMOS \u7684\u6570\u636e\u8868\u5c06\u6211\u4eec\u7684 Saleae \u903b\u8f91\u5206\u6790\u4eea\u8fde\u63a5\u5230\u5f15\u811a\uff1a\u4e00\u4e2a\u9884\u5148\u88c5\u5907\u7684\u653b\u51fb\u8005\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u5f00\u5934\u63d0\u5230\u7684\uff0c\u5c06\u4f7f\u7528 SOIC-8 \u5939\u5b50\u800c\u4e0d\u662f\u5355\u72ec\u7684\u63a2\u9488\u3002\u8be5\u526a\u8f91\u5c06\u4f7f\u8fde\u63a5\u5230\u82af\u7247\u53d8\u5f97\u975e\u5e38\u7b80\u5355\uff0c\u5e76\u5c06\u5b9e\u9645\u653b\u51fb\u65f6\u95f4\u7f29\u77ed\u51e0\u5206\u949f\u3002\u73b0\u5728\u63a2\u9488\u5df2\u8fde\u63a5\u597d\uff0c\u6211\u4eec\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111\u5e76\u8bb0\u5f55\u5728\u8ff9\u7ebf\u4e0a\u79fb\u52a8\u7684\u6bcf\u4e2a SPI \u5b57\u8282\u3002\u5728\u6570\u767e\u4e07\u6761\u6570\u636e\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u53d1\u9001\u4e86\u4e00\u4e2a BitLocker \u89e3\u5bc6\u5bc6\u94a5\uff0c\u73b0\u5728\u7684\u95ee\u9898\u662f\u627e\u5230\u5b83\u3002\u6211\u4eec\u4f7f\u7528 Henri Numi \u7684 bitlocker-spi-toolkit \u5c1d\u8bd5\u81ea\u52a8\u63d0\u53d6\u5bc6\u94a5\uff0c\u4f46\u5b83\u5728\u6211\u4eec\u7684\u6355\u83b7\u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002\u4e0b\u9762\u662f\u4ed6\u7684\u9ad8\u7ea7\u5206\u6790\u5668 (HLA) \u7684\u5c4f\u5e55\u622a\u56fe\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u4e00\u4e9b\u4e8b\u52a1\u88ab\u6b63\u786e\u89e3\u6790\uff0c\u800c\u6709\u4e9b\u5219\u6ca1\u6709\u3002\u6211\u4eec\u7684\u6355\u83b7\u6709\u4e9b\u4e0d\u540c\uff0cHLA \u65e0\u6cd5\u89e3\u91ca\u3002\u7ecf\u8fc7\u51e0\u5929\u7684\u6545\u969c\u6392\u9664\u3001\u6bd4\u8f83\u6355\u83b7\u548c\u62c9\u5934\u53d1\uff0c\u6211\u4eec\u7ec8\u4e8e\u53d1\u73b0\u5b83\u662f TPM \u547d\u4ee4\u6570\u636e\u5305\u7684\u4e0d\u540c\u4f4d\u63a9\u7801\u7684\u7ec4\u5408\u4ee5\u53ca\u7528\u4e8e\u67e5\u627e\u5bc6\u94a5\u7684\u4e0d\u540c\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u7ec4\u5408\u3002\u6211\u4eec\u63d0\u51fa\u4e86\u4fee\u590d\u8bf7\u6c42\uff0c\u73b0\u5728 bitlocker-spi-toolkit \u4e5f\u53ef\u4ee5\u89e3\u6790\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bf7\u6c42\u3002\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u90a3\u4e2a\uff0c\u77a7\uff0c\u94a5\u5319\u5c31\u5f39\u51fa\u6765\u4e86\u3002\u5b8c\u7f8e\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u89e3\u5bc6\u5bc6\u94a5\uff0c\u8ba9\u6211\u4eec\u89e3\u5bc6 SSD\uff0c\u770b\u770b\u6211\u4eec\u6709\u4ec0\u4e48\u3002\u6211\u4eec\u62c9\u51fa SSD\uff0c\u5c06\u5176\u5b89\u88c5\u5728\u9002\u914d\u5668\u4e2d\u5e76\u63d2\u5165\uff1a\u6211\u4eec\u5236\u4f5c\u4e86\u9a71\u52a8\u5668\u7684\u78c1\u76d8\u6620\u50cf\uff0c\u7136\u540e\u7ee7\u7eed\u64cd\u4f5c\u3002\u6709\u8da3\u7684\u662f\uff0c\u5728\u6574\u4e2a\u653b\u51fb\u94fe\u8fc7\u7a0b\u4e2d\uff0c\u8017\u65f6\u6700\u957f\u7684\u90e8\u5206\u53ea\u662f\u7b80\u5355\u5730\u590d\u5236\u4e86 256GB \u7684\u6587\u4ef6\u3002\u5728\u672c\u5730\u83b7\u5f97\u6620\u50cf\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Dislocker \u5de5\u5177\u96c6\u89e3\u5bc6\u9a71\u52a8\u5668\uff1a $ echo daa0ccb7312&lt;REDACTED&gt; | xxd -r -p &gt; ~/vmk$ mkdir ~/ssd ~/mounted$ sudo lostup -P /dev/loop6 /mnt/hgfs/ExternalSSD/ssd-dd.img $ sudo fdisk -l /dev/loop6 \u78c1\u76d8 /dev /loop6\uff1a238.47 GiB\uff0c256060514304 \u5b57\u8282\uff0c500118192 \u4e2a\u6247\u533a\u5355\u4f4d\uff1a1 * 512 = 512 \u5b57\u8282\u6247\u533a \u6247\u533a\u5927\u5c0f\uff08\u903b\u8f91/\u7269\u7406\uff09\uff1a512 \u5b57\u8282/512 \u5b57\u8282 I/O \u5927\u5c0f\uff08\u6700\u5c0f/\u6700\u4f73\uff09\uff1a512 \u5b57\u8282/\u78c1\u76d8\u6807\u7b7e\u7c7b\u578b\uff1aGPT\u78c1\u76d8\u6807\u8bc6\uff1aBD45F9A-F26D-41C9-8F1F-0F1EE74233\u8bbe\u5907\u5f00\u59cb\u7ed3\u675f\u6247\u533a\u5927\u5c0f\u7c7b\u578b\u7684/ dev / loop6p1 2048 1026047 1024000\u7ea7500M\u7684Windows\u6062\u590d\u73af\u5883\u7684/ dev / loop6p2 1026048 2050047 1024000 500M\u7535\u55b7\u7cfb\u7edf\u7684/ dev / loop6p3 2050048 2312191 262144 128M\u5fae\u8f6f\u4fdd\u7559 /dev/loop6p4 2312192 500117503 497805312 237.4G \u5fae\u8f6f\u57fa\u672c\u6570\u636e &lt;- bitlocker drive$ sudo dislocker-fuse -K ~/vmk /dev/loop6p4 -- ~/ssd$ sudo ntfs-3g ~/ss-file /mounted$ ls -al ~/mounted total 19156929 drwxrwxrwx 1 root root 8192 May 5 19:00 \u3002 drwxrwxrwt 17 root root 4096 Jun 15 09:43 .. drwxrwxrwx 1 root root 0 May 6 14:29 &#39;$Recycle.Bin&#39; drwxrwxrwx 1 root root 0 May 4 10:55 &#39;$WinREAgent &#39; -Decx17x r8 r8rwxrwx 2019 bootmgr -rwxrwxrwx 1 root root 1 Dec 7 2019 BOOTNXT lrwxrwxrwx 2 root root 15 May 4 11:18 &#39;Documents and Settings&#39; -&gt; ~/mounted/Users\n\u65e2\u7136\u6211\u4eec\u53ef\u4ee5\u79bb\u7ebf\u7eaf\u6587\u672c\u8bbf\u95ee\u5185\u5bb9\uff0c\u6211\u4eec\u5c31\u5f00\u59cb\u4e86\u63a0\u593a\u6570\u636e\u7684\u6807\u51c6\u6d41\u7a0b\u3002\u63d0\u53d6\u5bc6\u7801\u54c8\u5e0c\u3001\u7eaf\u6587\u672c\u6216\u7f16\u7801\u51ed\u636e\u3001\u66b4\u9732\u7684\u654f\u611f\u6587\u4ef6\u7b49\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u6709\u7528\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u4e5f\u6ca1\u6709\u5f97\u5230\u4efb\u4f55\u7c7b\u578b\u7684\u79bb\u7ebf\u51ed\u636e\uff0c\u8fd9\u5e94\u8be5\u4e0d\u8db3\u4e3a\u5947\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u662f\u5b9e\u9645\u5458\u5de5\u7684\u7b14\u8bb0\u672c\u7535\u8111\u51ed\u501f\u591a\u5e74\u7684\u6587\u4ef6\uff0c\u5b83\u662f\u4e13\u4e3a\u6b64\u6b21\u7279\u5b9a\u6d4b\u8bd5\u6253\u9020\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3002\u4f46\u662f\uff0c\u6211\u4eec\u786e\u5b9e\u627e\u5230\u4e86\u6b63\u5728\u4f7f\u7528\u7684 VPN \u5ba2\u6237\u7aef\uff1aPalo Alto \u7684 Global Protect (GP)\u3002 GP \u6709\u4e00\u4e2a\u6709\u8da3\u7684\u201c\u529f\u80fd\u201d\uff0c\u79f0\u4e3a\u9884\u767b\u5f55\u96a7\u9053\uff1a\u9884\u767b\u5f55\u662f\u4e00\u79cd\u5728\u7528\u6237\u767b\u5f55\u4e4b\u524d\u5efa\u7acb VPN \u96a7\u9053\u7684\u8fde\u63a5\u65b9\u6cd5\u3002\u9884\u767b\u5f55\u7684\u76ee\u7684\u662f\u9a8c\u8bc1\u7aef\u70b9\uff08\u800c\u4e0d\u662f\u7528\u6237\uff09\u5e76\u542f\u7528\u57df\u811a\u672c\u6216\u5176\u4ed6\u4efb\u52a1\u5728\u7aef\u70b9\u542f\u52a8\u540e\u7acb\u5373\u8fd0\u884c\u3002\u5bf9\u4e8e IT \u90e8\u95e8\u7ba1\u7406\u5176\u7aef\u70b9\u6765\u8bf4\uff0c\u8fd9\u542c\u8d77\u6765\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u529f\u80fd\u3002\u8fd9\u542c\u8d77\u6765\u4e5f\u662f\u4e00\u79cd\u5728\u4e0d\u77e5\u9053\u4efb\u4f55\u4eba\u7684\u51ed\u636e\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee VPN \u7684\u597d\u65b9\u6cd5\u3002\u7406\u8bba\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u542f\u52a8\u7b14\u8bb0\u672c\u7535\u8111\u7684\u540e\u95e8\u7248\u672c\uff0c\u4f8b\u5982\u4f7f\u7528\u7c98\u6ede\u952e\u540e\u95e8\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u8bbf\u95ee VPN \u96a7\u9053\u800c\u65e0\u9700\u4efb\u4f55\u51ed\u636e\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u4f46\u4e3a\u4e86\u901f\u5ea6\uff0c\u6211\u4eec\u51b3\u5b9a\u8d70\u865a\u62df\u5316\u8def\u7ebf\u3002\u7531\u4e8e\u6211\u4eec\u62e5\u6709\u5bf9\u6574\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u5305\u62ec\u91cd\u5199\u5185\u6838\u7ea7\u6076\u610f\u8f6f\u4ef6\u7684\u9a71\u52a8\u7a0b\u5e8f\u6587\u4ef6\u5230\u4ee3\u7406\u7279\u6743 DLL \u4ee5\u6dfb\u52a0\u5e10\u6237\u3002\u4e3a\u4e86\u65f6\u95f4\u548c\u6548\u7387\uff0c\u7c98\u6ede\u952e\u975e\u5e38\u9002\u5408\u8fd9\u79cd\u60c5\u51b5\uff0c\u5176\u8fc7\u7a0b\u5f88\u7b80\u5355\uff1a\u73b0\u5728\u6211\u4eec\u6709\u540e\u95e8\u8bbf\u95ee\uff0c\u6211\u4eec\u53ea\u9700\u8981\u542f\u52a8\u9a71\u52a8\u5668\u3002\u4e3a\u4e86\u5c06\u89e3\u5bc6\u540e\u7684 Windows \u6620\u50cf\u4f5c\u4e3a\u865a\u62df\u673a\u542f\u52a8\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49 VMDK \u6587\u4ef6\u3002\u8be5\u6587\u4ef6\u9700\u8981\u8bbe\u7f6e\u53c2\u6570\uff0c\u5e76\u5c06\u89e3\u5bc6\u540e\u7684BitLocker\u5206\u533a\u548c\u52a0\u5bc6\u955c\u50cf\u7684\u8d77\u59cb\u6247\u533a\u6620\u5c04\u5230\u76f8\u5e94\u7684VM\u5206\u533a\u3002\u751f\u6210\u7684 VMDK \u662f\uff1a# Disk DescriptorFileversion=1CID=19362586parentCID=ffffffffcreateType=&quot;partitionedDevice&quot;# Extent descriptionRW 63 FLAT &quot;ssd-dd.img&quot; 0RW 1985 FLAT &quot;ssd-dd.img&quot; 2048RW0&quot;ssd-dd.img&quot; 2048RW0 10220400d-ZFLATW100s img&quot; 1026048RW 262144 FLAT &quot;ssd-dd.img&quot; 2050048#\u8fd9\u662f\u52a0\u5bc6\u7684bitlocker\u9a71\u52a8\u5668\u6240\u5728\u7684\u7b2c4\u4e2a\u5206\u533aRW 497805312 FLAT &quot;dislocker2-file&quot; 0RW 655 ZERO RW 33 FLATd3ddbvr.imgtws 4&quot;ddb.adapterType=&quot;ide&quot;ddb.geometry. cylinders=&quot;16383&quot;ddb.geometry.heads=&quot;16&quot;ddb.geometry.sectors=&quot;63&quot;ddb.uuid.image=&quot;43e1e-5c24-46cc-bcec -daad3d500&quot;ddb.uuid.parent=&quot;00000000-0000-0000-0000-000000000000&quot;ddb.uuid.modification=&quot;8d285-ad86-4227-86d4-ec168b6b3&quot;dd0000000000000000000000000000 0000-000000000000&quot;ddb.geometry.biosCylinders=&quot;1024&quot;ddb.geometry.biosHeads=&quot;255&quot;ddb.geometry.biosSectors=&quot;63&quot; \u73b0\u5728\uff0c\u4f7f\u7528 VMDK \u548c\u7c98\u6ede\u952e\u540e\u95e8 Windows \u6620\u50cf\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u865a\u62df\u673a\uff0c\u542f\u52a8\u5b83\uff0c\u7136\u540e\u5728\u767b\u5f55\u5c4f\u5e55\u4e0a\u70b9\u51fb WINdows + U\u6069\u3002\n\u8fd9\u6b63\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002\u4e3a\u6b64\uff0c\u901a\u8fc7\u9644\u52a0\u5230\u8ba1\u7b97\u673a\u5e10\u6237\u7684\u8bc1\u4e66\u5bf9 VPN \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\u7531\u4e8e\u6bcf\u4e2a\u8ba1\u7b97\u673a\u5e10\u6237\u5728 Active Directory \u4e2d\u90fd\u5177\u6709\u975e\u5e38\u57fa\u672c\u7684\u6743\u9650\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u57df\u5185\u8fd0\u884c\u57fa\u672c\u7684 SMB \u547d\u4ee4\u3002\u6211\u4eec\u5411\u57df\u63a7\u5236\u5668\u67e5\u8be2\u7528\u6237\u3001\u7ec4\u3001\u7cfb\u7edf\u7b49\u5404\u7c7b\u57df\u4fe1\u606f\u3002\u6211\u4eec\u8fd8\u53ef\u4ee5\u5217\u51fa\u548c\u67e5\u770b\u5185\u90e8 SMB \u5171\u4eab\u4e0a\u7684\u6587\u4ef6\u5185\u5bb9\uff1a\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6b64\u8ba1\u7b97\u673a\u5e10\u6237\u7684\u8bbf\u95ee\u6743\u9650\u4f5c\u4e3a\u542f\u52a8\u5185\u90e8\u653b\u51fb\u548c\u6a2a\u5411\u5347\u7ea7\u3002\u4e3a\u4e86\u8bc1\u660e\u6211\u4eec\u62e5\u6709\u5bf9\u4e0d\u5e94\u8be5\u62e5\u6709\u7684\u670d\u52a1\u5668\u7684\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u6211\u4eec\u4ece\u4e0a\u9762\u9009\u62e9\u4e86\u5185\u90e8\u6587\u4ef6\u670d\u52a1\u5668\u3002\u6982\u5ff5\u8bc1\u660e\u662f\u5c06\u6587\u4ef6\u5199\u5165\u8be5\u670d\u52a1\u5668\u5e76\u5c06\u5176\u8bfb\u56de\u4ee5\u8bc1\u660e\u8bfb/\u5199\u8bbf\u95ee\u6743\u9650\u3002\u8fd9\u4e2a\u201c\u626b\u63cf\u5668\u201d\u5171\u4eab\u662f\u653b\u51fb\u8005\u7684\u7edd\u4f73\u9009\u62e9\uff0c\u4f5c\u4e3a\u5404\u79cd\u6280\u672f\u7684\u6c34\u5751\uff0c\u4f8b\u5982 LNK \u653b\u51fb\u3001\u6728\u9a6c PDF \u7b49\u3002\u6b64\u65f6\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u5bf9\u5185\u90e8\u7f51\u7edc\u7684\u8bbf\u95ee\u6743\u9650\u3001\u5bf9 Active Directory \u7684\u57fa\u672c\u6743\u9650\u4ee5\u53ca\u8bbf\u95ee\u5185\u90e8\u6587\u4ef6\u5171\u4eab\uff0c\u8db3\u4ee5\u5f00\u59cb\u5371\u5bb3\u654f\u611f\u7684\u516c\u53f8\u6570\u636e\u3002\u56de\u987e\u4e00\u4e0b\uff0c\u6211\u4eec\u62ff\u4e86\u4e00\u53f0\u9501\u5b9a\u7684 FDE \u7b14\u8bb0\u672c\u7535\u8111\uff0c\u55c5\u63a2\u4e86\u6765\u81ea TPM \u7684 BitLocker \u89e3\u5bc6\u5bc6\u94a5\uff0c\u540e\u95e8\u865a\u62df\u5316\u6620\u50cf\uff0c\u5e76\u4f7f\u7528\u5176 VPN \u81ea\u52a8\u8fde\u63a5\u529f\u80fd\u653b\u51fb\u5185\u90e8\u516c\u53f8\u7f51\u7edc\u3002\u8fd9\u662f\u4ece\u88ab\u76d7\u7b14\u8bb0\u672c\u7535\u8111\u5230\u5185\u90e8\u59a5\u534f\u7684\u4e00\u79cd\u65b9\u5f0f\u3002\u7279\u522b\u611f\u8c22\u4e4b\u524d\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u5e76\u5e2e\u52a9\u4f7f\u8fd9\u6b21\u653b\u51fb\u66f4\u52a0\u73b0\u5b9e\u3001\u5b9e\u7528\u548c\u66f4\u5feb\u7684\u7814\u7a76\u4eba\u5458\uff1a", "note_en": "What can you do with a stolen laptop? Can you get access to our internal network? That was the question a client wanted answered recently. Spoiler alert: Yes, yes you can. This post will walk you through how we took a \u201cstolen\u201d corporate laptop and chained several exploits together to get inside the client\u2019s corporate network.\n  We received a Lenovo laptop preconfigured with the standard security stack for this organization. We didn\u2019t get any information about this laptop, no test credentials, no configuration details, no nothing, it was a 100% blackbox test. Once the laptop came in, we opened the shipping box and got to work. After we did our reconnaissance of the laptop (BIOS settings, normal boot operation, hardware details, etc) we noted a lot of best practices were being followed, negating many common attacks. For example:\n       \u00b7\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 The SSD was full disk encrypted (FDE) using Microsoft\u2019s BitLocker, secured via Trusted Platform Module (TPM)\n With nothing else working, that last point, TPM secured BitLocker, was going to be our way in. One of the things we saw when doing recon was that the laptop boots directly to the Windows 10 Login screen. That, coupled with the BitLocker encryption means that the drive decryption key is being pulled only from the TPM, no user supplied PIN or password was needed which is the default for BitLocker.  Microsoft recommends increasing the security if:\n Targeted attack with plenty of time; this attacker will open the case, will solder, and will use sophisticated hardware or software.\n  \u2022\tPre-boot authentication set to TPM with a PIN protector (with a sophisticated alphanumeric PIN [enhanced pin] to help the TPM anti-hammering mitigation).\n As we\u2019ll show you, this isn\u2019t quite the case. A pre-equipped attacker can perform this entire attack chain in less than 30 minutes with no soldering, simple and relatively cheap hardware, and publicly available tools. A process that places it squarely into Evil-Maid territory.\n  For those that don\u2019t know, the TPM is a highly secure and sophisticated piece of hardware that has numerous tamper detections and protections in place. Attacking the TPM directly is very unlikely to bear fruit within the timeframe of testing. As a result, we must look at the trust relationships around the TPM and what it relies on. It is a distinct and separate chip from other components on the motherboard and may be susceptible to a variety of attacks. Our particular TPM in question is shown here:\n  Researching  that specific TPM chip revealed it communicates to the CPU using the Serial Peripheral Interface (SPI) protocol:\n  Which was further supported when we found the TPM mentioned in the laptop\u2019s schematics:\n  SPI is a communication protocol for embedded systems and is extremely common amongst virtually all hardware. Due to its simplicity, there is no encryption option for SPI. Any encryption must be handled by the devices themselves. At the time of this writing BitLocker does not utilize any encrypted communication features of the TPM 2.0 standard, which means any data coming out of the TPM is coming out in plaintext, including the decryption key for Windows. If we can grab that key, we should be able to decrypt the drive, get access to the VPN client config, and maybe get access to the internal network.\n Getting around the TPM in this manner is akin to ignoring Fort Knox and focusing on the not-so-armored car coming out of it.\n In order to sniff the data moving over the SPI bus, we must attach leads or probes to the pins (labeled above as MOSI, MISO, CS, and CLK) on the TPM. Normally that is simple but there is a practical problem in this case. This TPM is on a  VQFN32 footprint, which is very tiny. The \u201cpins\u201d are actually only 0.25mm wide and spaced 0.5mm apart. And those \u201cpins\u201d aren\u2019t actually pins, they are flat against the wall of the chip so it\u2019s physically impossible to attach any sort of clip. You could solder \u201cfly leads\u201d to the solder pads but that\u2019s a hassle and tends to be a very physically unstable connection. Alternatively a common tactic is to locate in-series resistors to solder to, but they were just as small, and even more fragile. This was not going to be easy.\n But before we got started we figured there might be another way. Many times SPI chips share the same \u201cbus\u201d with other SPI chips. It\u2019s a technique hardware designers use to make connections simpler, save on cost, and make troubleshooting/programming easier. We started looking throughout the board for any other chip that might be on the same bus as the TPM. Maybe their pins would be larger and easier to use. After some probing and consulting the schematics, it turned out that the TPM shared a SPI bus with a single other chip, the CMOS chip, which definitely had larger pins. In fact, the CMOS chip had just about the largest pin size you can find on standard motherboards, it was a SOP-8 (aka SOIC-8).\n  This was ideal. We proceeded to hook up our  Saleae logic analyzer to the pins according to the  CMOS\u2019s datasheet:\n   A pre-equipped attacker, like we mentioned at the beginning, would instead use a  SOIC-8 clip instead of individual probes. The clip would make it brain dead simple to connect to the chip and shave a couple minutes off a real-world attack.\n Now that the probes were hooked up, we booted the laptop and recorded every SPI byte moving over the traces. Somewhere in the millions of pieces of data was a BitLocker decryption key being sent, the problem was now finding it. We used Henri Numi\u2019s  bitlocker-spi-toolkit to try to extract the key automatically but it wasn\u2019t working on our capture. Below is a screenshot of his High Level Analyzer (HLA) in action, you can see that some transactions are being parsed correctly and some aren\u2019t. There was something different about our capture that the HLA couldn\u2019t account for.\n  After days of troubleshooting, comparing captures, and pulling hair, we finally figured out it was a combination of different bit masks for the TPM command packets as well as a different regex for finding the key. We made a  pull request for the fix and now the bitlocker-spi-toolkit can parse these types of requests as well. Once we had that, lo and behold, the key popped out.\n  Perfect, now that we have the decryption key, let\u2019s decrypt the SSD and see what we have. We pulled the SSD, mounted it in an adapter and plugged it in:\n  We made a disk image of the drive which we operated on moving forward. Interestingly, in the entire process of the attack chain the part that takes the longest is simply copying the 256GB of files. Once we had the image locally, we could use the  Dislocker toolset to decrypt the drive:\n $ echo daa0ccb7312&lt;REDACTED&gt; | xxd -r -p &gt; ~/vmk$ mkdir ~/ssd ~/mounted$ sudo losetup -P /dev/loop6 /mnt/hgfs/ExternalSSD/ssd-dd.img $ sudo fdisk -l /dev/loop6 Disk /dev/loop6: 238.47 GiB, 256060514304 bytes, 500118192 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: gpt Disk identifier: BD45F9A-F26D-41C9-8F1F-0F1EE74233 Device Start End Sectors Size Type /dev/loop6p1 2048 1026047 1024000 500M Windows recovery environment /dev/loop6p2 1026048 2050047 1024000 500M EFI System /dev/loop6p3 2050048 2312191 262144 128M Microsoft reserved /dev/loop6p4 2312192 500117503 497805312 237.4G Microsoft basic data &lt;- bitlocker drive$ sudo dislocker-fuse -K ~/vmk /dev/loop6p4 -- ~/ssd$ sudo ntfs-3g ~/ssd/dislocker-file ~/mounted$ ls -al ~/mounted total 19156929 drwxrwxrwx 1 root root 8192 May 5 19:00 . drwxrwxrwt 17 root root 4096 Jun 15 09:43 .. drwxrwxrwx 1 root root 0 May 6 14:29 &#39;$Recycle.Bin&#39; drwxrwxrwx 1 root root 0 May 4 10:55 &#39;$WinREAgent&#39; -rwxrwxrwx 1 root root 413738 Dec 7 2019 bootmgr -rwxrwxrwx 1 root root 1 Dec 7 2019 BOOTNXT lrwxrwxrwx 2 root root 15 May 4 11:18 &#39;Documents and Settings&#39; -&gt; ~/mounted/Users\n Now that we have offline plaintext access to the contents, we began our standard process for pillaging the data. Extracting password hashes, plaintext or encoded credentials, exposed sensitive files, etc. Unfortunately, nothing useful was found and we didn\u2019t get any offline credentials of any sort, which shouldn\u2019t be that surprising since this wasn\u2019t an actual employee\u2019s laptop with years of files, it was a purpose built laptop for this specific test. We did, however, find the VPN client in use:  Palo Alto\u2019s Global Protect (GP). GP has an interesting \u201cfeature\u201d called a  Pre-logon tunnel:\n Pre-logon is a connect method that establishes a VPN tunnel before a user logs in. The purpose of pre-logon is to authenticate the endpoint (not the user) and enable domain scripts or other tasks to run as soon as the endpoint powers on.\n That sounds like a really nice feature for an IT department to manage their endpoints. It also sounds like a great way to access the VPN without knowing anyone\u2019s credentials. In theory, if we could boot a backdoored version of the laptop, e.g. use  the sticky keys backdoor, we should be able to access the VPN tunnel without ever needing any credentials. In practice there are lots of ways to accomplish that but we decided to go the virtualization route in the interest of speed.\n Since we have write access to the entire file system, we could have done anything including rewriting driver files for kernel level malware to proxying privileged DLLs to just adding accounts. In the interest of time and efficiency, sticky keys is perfect for this scenario, whose process is simply:\n  Now that we have backdoor access, we just need to boot the drive. In order to boot the decrypted Windows image as a Virtual Machine, we first needed to create a custom VMDK file. This file needs to set up the parameters and map the start sectors of the decrypted BitLocker partition and encrypted image to the appropriate VM partitions. The resulting VMDK was:\n # Disk DescriptorFileversion=1CID=19362586parentCID=ffffffffcreateType=&#34;partitionedDevice&#34;# Extent descriptionRW 63 FLAT &#34;ssd-dd.img&#34; 0RW 1985 FLAT &#34;ssd-dd.img&#34; 2048RW 1024000 ZERORW 1024000 FLAT &#34;ssd-dd.img&#34; 1026048RW 262144 FLAT &#34;ssd-dd.img&#34; 2050048# This is the 4th partition where the encrypted bitlocker drive wasRW 497805312 FLAT &#34;dislocker2-file&#34; 0RW 655 ZERO RW 33 FLAT &#34;ssd-dd.img&#34; 63ddb.virtualHWVersion = &#34;4&#34;ddb.adapterType=&#34;ide&#34;ddb.geometry.cylinders=&#34;16383&#34;ddb.geometry.heads=&#34;16&#34;ddb.geometry.sectors=&#34;63&#34;ddb.uuid.image=&#34;43e1e-5c24-46cc-bcec-daad3d500&#34;ddb.uuid.parent=&#34;00000000-0000-0000-0000-000000000000&#34;ddb.uuid.modification=&#34;8d285-ad86-4227-86d4-ec168b6b3&#34;ddb.uuid.parentmodification=&#34;00000000-0000-0000-0000-000000000000&#34;ddb.geometry.biosCylinders=&#34;1024&#34;ddb.geometry.biosHeads=&#34;255&#34;ddb.geometry.biosSectors=&#34;63&#34;\n Now, with that VMDK and the sticky keys backdoored Windows image, we created the virtual machine, booted it, and hit WIndows + U at the login screen.\n  That\u2019s exactly what we wanted. For this to work, authentication to the VPN happens via a certificate attached to the computer account. Since every computer account has very basic privileges in Active Directory, we can run basic SMB commands within the domain. We queried the domain controller for various types of domain information such as users, groups, systems, etc. We could also list and view the contents of files on internal SMB shares:\n  We can also use this computer account\u2019s access as a platform for launching internal attacks and escalating laterally. To prove we had write access to a server that we shouldn\u2019t have, we chose the internal file server from above. The proof of concept was to write a file to that server and read it back to prove read/write access.\n  This \u201cScanner\u201d share is a great choice for an attacker as a watering hole for various techniques, e.g. LNK attacks, trojaned PDFs, etc. At this point we had gained access to the internal network, basic privileges on Active Directory, and access to internal file shares, more than enough to start compromising sensitive corporate data.\n  To recap, we took a locked down FDE laptop, sniffed the BitLocker decryption key coming out of the TPM, backdoored a virtualized image, and used its VPN auto-connect feature to attack the internal corporate network. That is one way to go from stolen laptop to internal compromise.\n  Special thanks for the researchers who shared their knowledge previously and helped make this attack more realistic, practical, and quicker:", "posttime": "2021-07-29 21:58:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u7b14\u8bb0\u672c\u7535\u8111,laptop,quot", "title": "\u4ece\u88ab\u76d7\u7684\u7b14\u8bb0\u672c\u7535\u8111\u5230\u516c\u53f8\u7f51\u7edc\u5185\u90e8", "title_en": "From stolen laptop to inside the company network", "transed": 1, "url": "https://dolosgroup.io/blog/2021/7/9/from-stolen-laptop-to-inside-the-company-network", "via": "", "real_tags": ["\u7535\u8111", "\u7b14\u8bb0\u672c\u7535\u8111", "laptop", "quot"]}, {"category": "", "categoryclass": "", "imagename": "7371b63b98290fa27865093cd1985ae9.jpg", "infoid": 1070260, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "git bisect \u547d\u4ee4\u53ef\u5e2e\u52a9\u60a8\u8bc6\u522b\u7834\u574f\u67d0\u4e9b\u5185\u5bb9\u7684\u8303\u56f4\u5185\u7684\u7b2c\u4e00\u4e2a\u63d0\u4ea4\u3002\u4f60\u7ed9\u5b83\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u548c\u4e00\u4e2a\u574f\u7684\u63d0\u4ea4\uff0c\u5b83\u4f1a\u5728\u4e24\u8005\u4e4b\u95f4\u505a\u4e00\u4e2a\u4e8c\u5206\u641c\u7d22\u6765\u627e\u5230\u7b2c\u4e00\u4e2a\u574f\u63d0\u4ea4\u3002\u5728\u6bcf\u4e00\u6b65\uff0c\u60a8\u90fd\u53ef\u4ee5\u6839\u636e\u5b83\u662f\u5426\u901a\u8fc7\u6d4b\u8bd5\u6765\u9009\u62e9 git bisect good \u6216 git bisect bad\uff0c\u8fd9\u5c06\u4f7f\u60a8\u5728\u8be5\u8303\u56f4\u5185\u7684\u5269\u4f59\u63d0\u4ea4\u4e2d\u9014\u5b8c\u6210\u3002\u6709\u51e0\u4e2a\u5173\u4e8e\u5728 Linux \u5185\u6838\u4e2d\u4f7f\u7528 git bisect \u7684\u6307\u5357\uff08\u4f8b\u5982\uff0cupstream\u3001Gentoo \u548c Ubuntu \u90fd\u6709\u4e00\u4e2a\uff09\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u4eec\u662f\u975e\u5e38\u8017\u65f6\u7684\u64cd\u4f5c\uff1b\u4ed6\u4eec\u90fd\u8bf4\u4e86\u8fd9\u6837\u7684\u8bdd\uff0c\u201c\u73b0\u5728\u6784\u5efa\u5185\u6838\uff0c\u91cd\u65b0\u542f\u52a8\u5b83\uff0c\u5e76\u6d4b\u8bd5\u5b83\uff0c\u7136\u540e\u6839\u636e\u5b83\u662f\u5426\u6709\u6548\u8f93\u5165 git bisect good \u6216 git bisect bad\u3002\u201d\u5bf9\u4e8e\u68d8\u624b\u7684\u786c\u4ef6\u517c\u5bb9\u6027\u9519\u8bef\uff0c\u8fd9\u53ef\u80fd\u662f\u60a8\u552f\u4e00\u7684\u9009\u62e9\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6b63\u5728\u6d4b\u8bd5\u6709\u5173\u5185\u6838\u884c\u4e3a\u7684\u67d0\u4e9b\u5185\u5bb9\uff0c\u8fd9\u5c06\u4e0d\u5fc5\u8981\u5730\u7f13\u6162\u4e14\u624b\u52a8\uff0c\u60a8\u53ef\u80fd\u4f1a\u60f3\u505a\u5176\u4ed6\u4e8b\u60c5\uff0c\u4f8b\u5982\u8bfb\u53d6\u63d0\u4ea4\u65e5\u5fd7\u3002\u524d\u51e0\u5929\u5728\u5de5\u4f5c\u4e2d\uff0c\u6709\u4eba\u62a5\u544a\u8bf4\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5728\u65b0\u865a\u62df\u673a\u4e2d\u4e0d\u518d\u5de5\u4f5c\u3002\u5728\u4f7f\u7528 strace \u8fdb\u884c\u4e00\u4e9b\u521d\u59cb\u8c03\u8bd5\u540e\uff0c\u6211\u4eec\u786e\u5b9a\u8be5\u7a0b\u5e8f\u6b63\u5728\u4ee5 0 \u7684\u79ef\u538b\u8c03\u7528 listen \u7cfb\u7edf\u8c03\u7528\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u5b83\u8868\u793a\u613f\u610f\u63a5\u53d7\u6700\u591a\u96f6\u4e2a\u8fde\u63a5\u3002\u6839\u636e\u89c4\u8303\uff0c\u5b83\u4e0d\u5e94\u8be5\u5de5\u4f5c\u2014\u2014\u4f46\u5b83\u786e\u5b9e\u5728\u4ed6\u4eec\u7684\u65e7\u865a\u62df\u673a\u4e0a\u5de5\u4f5c\u3002\u65b0\u7cfb\u7edf\u4e4b\u95f4\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\uff0c\u4f46\u503c\u5f97\u6ce8\u610f\u7684\u662f\u65b0 VM \u7684\u5185\u6838\u4e3a 4.9\uff0c\u65e7\u7684\u5185\u6838\u4e3a 4.1\u3002 \uff08\u53e6\u4e00\u4e2a\u662f\u5b83\u90e8\u7f72\u5728\u6211\u7684\u56e2\u961f\u8d1f\u8d23\u7684\u65b0\u4e91\u73af\u5883\u4e2d\uff0c\u6709\u4e00\u4e9b\u7f51\u7edc\u53d8\u5316\uff0c\u6240\u4ee5\u6211\u4eec\u60f3\u786e\u4fdd\u6211\u4eec\u6ca1\u6709\u7834\u574f\u4efb\u4f55\u4e1c\u897f\uff01\uff09\u6211\u5c1d\u8bd5\u901a\u8bfb git log --grep listen v4.1\u3002 .v4.9 net/\uff0c\u4f46\u5185\u5bb9\u592a\u591a\u4e86\uff0c\u6211\u4ec0\u4e48\u4e5f\u627e\u4e0d\u5230\u3002\u6240\u4ee5\u6211\u51b3\u5b9a\u770b\u770b\u4e8c\u5206\u662f\u5426\u53ef\u4ee5\u5e2e\u52a9\u6211\uff0c\u4f7f\u7528 git bisect run\uff0c\u5b83\u53ef\u4ee5\u5b9e\u73b0\u5168\u81ea\u52a8\u4e8c\u7b49\u5206\u3002\u6211\u5bf9\u91cd\u65b0\u542f\u52a8\u6211\u7684\u673a\u5668\u4ee5\u5bf9\u516b\u4e2a\u5185\u6838\u7248\u672c\u8fdb\u884c\u4e8c\u8fdb\u5236\u641c\u7d22\u5e76\u4e0d\u611f\u5230\u5174\u594b\uff0c\u4f46\u662f\u5982\u679c\u6211\u80fd\u8ba9\u5b83\u4ee5\u5176\u4ed6\u65b9\u5f0f\u8fd0\u884c\uff0c\u6211\u53ef\u4ee5\u8ba9\u5b83\u7ee7\u7eed\u8fd0\u884c\u3002\u5bf9\u4e8e\u666e\u901a\u7a0b\u5e8f\uff0c\u4f7f\u7528 git bisect run \u975e\u5e38\u5bb9\u6613\uff0c\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u8fd4\u56de\u6210\u529f (0) \u6216\u5931\u8d25 (1) \u7684\u547d\u4ee4\uff1a\u60a8\u901a\u5e38\u53ef\u4ee5\u6267\u884c\u8bf8\u5982 git bisect run make test \u4e4b\u7c7b\u7684\u64cd\u4f5c\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u5185\u6838\u56de\u5f52\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u547d\u4ee4\u6765\u5f15\u5bfc\u5185\u6838\u5e76\u8fd0\u884c\u4e00\u4e9b\u4ee3\u7801\u3002\u4e3a\u6b64\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 qemu \u865a\u62df\u673a\u8f6f\u4ef6\uff0c\u5b83\u6709\u4e24\u4e2a\u7279\u6027\u4f7f\u5b83\u7279\u522b\u9002\u5408\u4f5c\u4e3a\u8fd9\u6837\u7684\u547d\u4ee4\uff1a\u5b83\u53ef\u4ee5\u76f4\u63a5\u5f15\u5bfc Linux \u5185\u6838\uff0c\u800c\u4e0d\u662f\u5728\u786c\u76d8\u4e0a\u6a21\u62df\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u8fd0\u884c\u4e34\u65f6 VM\u5728\u5355\u4e2a\u547d\u4ee4\u884c\u4e2d\uff0c\u65e0\u9700\u4efb\u4f55\u989d\u5916\u8bbe\u7f6e\u3002\u6211\u4eec\u5c06\u4e3a\u81ea\u5df1\u6784\u5efa\u4e00\u4e2a\u5f88\u5c0f\u7684\u201cinitrd\u201d\uff08\u521d\u59cb RAM \u78c1\u76d8\uff09\uff0c\u5b83\u901a\u5e38\u7528\u4e8e\u52a0\u8f7d\u8db3\u591f\u7684\u9a71\u52a8\u7a0b\u5e8f\u4ee5\u8bbf\u95ee\u60a8\u7684\u786c\u76d8\u9a71\u52a8\u5668\u5e76\u5b8c\u5168\u542f\u52a8\u60a8\u7684\u7cfb\u7edf\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684 initrd \u5c06\u53ea\u5305\u542b\u6211\u4eec\u7684\u4e00\u4e2a\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5b83\u53ef\u80fd\u4f1a\u6253\u5370\u4e00\u6761\u6210\u529f\u6d88\u606f\uff0c\u5e76\u5173\u95ed\u7cfb\u7edf\u3002\u6211\u4eec\u65e0\u6cd5\u4ece qemu \u4e2d\u6709\u610f\u4e49\u5730\u83b7\u5f97\u8fd4\u56de\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u4ec5 grep \u5176\u8f93\u51fa\u4ee5\u83b7\u53d6\u6210\u529f\u6d88\u606f\u3002\u7b2c\u4e00\u6b65\u662f\u68c0\u67e5\u5185\u6838\u6e90\u4ee3\u7801\uff0c\u5982\u679c\u6211\u4eec\u8fd8\u6ca1\u6709\u5b83\u4eec\uff0c\u5e76\u6784\u5efa\u4e00\u4e2a\u5185\u6838\uff1a\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6807\u51c6\u8f93\u5165/\u8f93\u51fa\u4e0a\u4f7f\u7528 VM \u7684\u4e32\u884c\u63a7\u5236\u53f0\u4ee5\u6587\u672c\u6a21\u5f0f\u8fd0\u884c\u5b83\uff0c\u800c\u4e0d\u662f\u5c1d\u8bd5\u5f39\u51fa\u56fe\u5f62\u7a97\u53e3\uff0c\u5e76\u544a\u8bc9\u5185\u6838\u4f7f\u7528\u4e32\u884c\u7aef\u53e3\u8fdb\u884c\u63a7\u5236\u53f0\u8f93\u51fa\u3002\u5982\u679c\u60a8\u7684\u7cfb\u7edf\u652f\u6301\u5b83\uff0c\u60a8\u53ef\u4ee5\u6dfb\u52a0 -enable-kvm \u4ee5\u4f7f\u5176\u66f4\u5feb\uff0c\u5c3d\u7ba1\u7531\u4e8e\u6211\u4eec\u5e0c\u671b\u5728\u8fd0\u884c\u6d4b\u8bd5\u540e\u7acb\u5373\u5173\u95ed VM\uff0c\u56e0\u6b64\u5b83\u4e0d\u4f1a\u4ea7\u751f\u592a\u5927\u5dee\u5f02\uff082 \u79d2\u5bf9 4 \u79d2\uff09\u6211\u7684\u673a\u5668\uff09\u3002\u8fd9\u4f1a\u5f15\u8d77\u6050\u614c\uff0c\u56e0\u4e3a\u6211\u4eec\u65e2\u6ca1\u6709\u7ed9\u5185\u6838\u4e00\u4e2a\u6839\u6587\u4ef6\u7cfb\u7edf\uff0c\u4e5f\u6ca1\u6709\u7ed9\u5b83\u4e00\u4e2a\u6709\u6548\u7684 initrd\u3002 \uff08\u60a8\u53ef\u4ee5\u901a\u8fc7\u6309 Ctrl-A \u548c X \u6765\u7ec8\u6b62 VM\u3002\uff09\u6240\u4ee5\u8ba9\u6211\u4eec\u7528\u5355\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6 init \u7f16\u5199\u4e00\u4e2a initrd\u3002\u5b83\u9700\u8981\u5173\u95ed\u7cfb\u7edf\uff0c\u6240\u4ee5\u6211\u4eec\u56de\u5230\u6211\u4eec\u7684\u63d0\u793a\uff1a $ mkdir initrd $ cd initrd $ cat &gt; init.c &lt;&lt; EOF #include &lt;sys/reboot.h&gt; #include &lt;stdio.h&gt; #include &lt; unistd.h&gt; int main(void) { printf(&quot;Hello world!\\n&quot;);\u91cd\u542f\uff08RB_POWER_OFF\uff09\uff1b EOF\uff08\u662f\u7684\uff0c\u5173\u95ed\u7cfb\u7edf\u7684\u7cfb\u7edf\u8c03\u7528\u540d\u4e3a\u201crebo\u200b\u200bot\u201d\uff0c\u56e0\u4e3a\u7cfb\u7edf\u8c03\u7528\u5df2\u7ecf\u4f7f\u7528\u4e86\u201cshutdown\u201d\u8fd9\u4e2a\u540d\u79f0\u6765\u5173\u95ed\u5957\u63a5\u5b57\u3002\u6211\u731c\u65e9\u671f\u7684 UNIX \u8ba1\u7b97\u673a\u4e0d\u652f\u6301\u542f\u52a8\u786c\u4ef6\u65ad\u7535\u6765\u81ea\u8f6f\u4ef6\uff0c\u6240\u4ee5\u5173\u673a\u547d\u4ee4\u53ea\u4f1a\u505c\u6b62\u6240\u6709\u8fdb\u7a0b\uff0c\u540c\u6b65\u548c\u5378\u8f7d\u78c1\u76d8\uff0c\u5e76\u6253\u5370\u4e00\u6761\u6d88\u606f\uff0c\u8981\u6c42\u64cd\u4f5c\u5458\u5207\u65ad\u7535\u6e90\u3002\uff09\u9759\u6001\u7f16\u8bd1\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u6240\u4ee5\u5b83\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u628a\u5b83\u653e\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5f62\u5f0f\u4e2dinitrd\uff08\u4e00\u4e2a\u538b\u7f29\u7684 cpio \u6863\u6848\uff0c\u4e00\u79cd\u53e4\u8001\u4f46\u975e\u5e38\u7b80\u5355\u7684\u683c\u5f0f\uff0c\u5e26\u6709\u4e00\u4e2a\u5947\u602a\u7684\u547d\u4ee4\u884c\u5de5\u5177\uff09\u5e76\u786e\u4fdd\u5b83\u88ab\u547d\u540d\u4e3a init\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528 qemu \u542f\u52a8\u5b83\uff1a $ cd initrd $ cc -static -o init init\u3002 c $ \u56de\u58f0\u521d\u59cb\u5316 | cpio -H newc -o | gzip &gt; initrd.gz 1621 \u5757 $ cd .. $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz... [ 0.502593 ] ALSA \u8bbe\u5907\u5217\u8868\uff1a [0.502889]\u672a\u627e\u5230\u58f0\u5361\u3002 [0.503554]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5b58\u50a8\u5668\uff1a1088K\uff08ffffffff81f2f000  -  ffffffff8203f000\uff09[0.504262]\u5199\u4fdd\u62a4\u5185\u6838\u53ea\u8bfb\u6570\u636e\uff1a14336k [0.505004]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5b58\u50a8\u5668\uff1a1680K\uff08ffff88000185c000  -  ffff880001a00000\uff09[0.505855]\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5185\u6838\u5185\u5b58\uff1a1340K (ffff880001cb1000 - ffff880001e00000) \u4e16\u754c\u4f60\u597d\uff01 [1.089618] \u8f93\u5165\uff1aImExPS/2 \u901a\u7528\u8d44\u6e90\u7ba1\u7406\u5668\u9f20\u6807\u4f5c\u4e3a /devices/platform/i8042/serio1/input/input3 [1.092997] ACPI\uff1a\u51c6\u5907\u8fdb\u5165\u7cfb\u7edf\u7761\u7720\u72b6\u6001 S5 [1.094083] \u91cd\u542f\uff1a\u65ad\u7535\u5f88\u68d2\u3002\u6211\u4eec\u5df2\u7ecf\u6784\u5efa\u4e86\u81ea\u5df1\u7684\u5185\u6838\uff0c\u5411\u5b83\u4f20\u9012\u4e86\u4e00\u4e2a\u6d4b\u8bd5\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fd0\u884c\uff0c\u5e76\u5728\u9000\u51fa\u7684 qemu \u547d\u4ee4\u4e2d\u542f\u52a8\u5b83\u3002\u8fd9\u53d8\u6210\u4e86\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u7ed9 git bisect run \u7684\u4e1c\u897f\u3002\u73b0\u5728\u662f\u7f16\u5199\u5b9e\u9645\u6d4b\u8bd5\u7684\u65f6\u5019\u4e86\u3002\u8fd9\u662f\u6211\u6700\u7ec8\u8ffd\u8e2a\u6211\u7684\u9519\u8bef\u7684\u7ed3\u679c\uff1a\n#include &lt;sys/types.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/time.h&gt; #include &lt;sys/reboot.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;net/ if.h&gt; #include &lt;netinet/in.h&gt; #include &lt;netinet/tcp.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int main ( void ) { / * \u6211\u6b63\u5728\u8ffd\u8e2a\u7684\u95ee\u9898\u53ea\u6709\u5728\u7981\u7528 syncookies \u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u91cd\u73b0\u3002\u867d\u7136 initrd \u88ab\u89e3\u538b\u5230\u4e00\u4e2a\u53ef\u5199\u7684\u4e34\u65f6\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u4f46\u4ec0\u4e48\u90fd\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u5982\u679c\u6211\u9700\u8981 /proc\uff0c\u6211\u9700\u8981\u81ea\u5df1\u521b\u5efa\u548c\u6302\u8f7d\u5b83\u3002 */ if ( getpid () == 1 ) { mkdir (&quot;/proc&quot;); mount ( &quot;proc&quot; , &quot;/proc&quot; , &quot;proc&quot; , 0 , NULL ); char buf [] = &quot;0 \\n&quot; ; int fd = open ( &quot;/proc/sys/net/ipv4/tcp_syncookies&quot; , O_WRONLY );\u5199 ( fd , buf , 2 );\u5173\u95ed ( fd ); } int server = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ); /* \u6b64\u5916\uff0c\u867d\u7136\u5b58\u5728\u73af\u56de\u4ee5\u592a\u7f51\u8bbe\u5907\uff0c\u4f46\u5b83\u5e76\u672a\u542f\u7528\uff0c\u56e0\u6b64\u7f51\u7edc\u6d4b\u8bd5\u5c06\u4e0d\u8d77\u4f5c\u7528\u3002\u6b64\u4ee3\u7801\u7b49\u6548\u4e8e `ifconfig lo up`\u3002 */ struct ifreq ifreq = { . ifr_name = &quot;lo&quot; , }; ioctl ( server , SIOCGIFFLAGS , &amp; ifreq ); if ( ! ( ifreq . ifr_flags &amp; IFF_UP )) { ifreq . ifr_flags |= IFF_UP ; ioctl ( \u670d\u52a1\u5668 , SIOCSIFFLAGS , &amp; ifreq ); } struct sockaddr_in addr = { . sin_family = AF_INET , . sin_port = htons (54321), . sin_addr = { htonl ( INADDR_LOOPBACK )}, }; bind ( server , ( struct sockaddr * ) &amp; addr , sizeof ( addr ));\u542c\uff08\u670d\u52a1\u5668\uff0c0\uff09\uff1b int client = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP );\u7ed3\u6784\u65f6\u95f4\u8d85\u65f6 = { 3 , 0 }; setockopt ( \u5ba2\u6237\u7aef , SOL_SOCKET , SO_SNDTIMEO , &amp; timeout , sizeof ( timeout )); if ( connect ( client , ( struct sockaddr * ) &amp; addr , sizeof ( addr )) == 0 ) { printf ( &quot;Success \\n &quot;); } else { perror\uff08\u201c\u8fde\u63a5\u201d\uff09\uff1b } if ( getpid () == 1 ) { \u91cd\u542f( RB_POWER_OFF ); } \u8fd4\u56de 0 ;\u5927\u90e8\u5206\u5185\u5bb9\u7279\u5b9a\u4e8e\u6211\u5c1d\u8bd5\u6d4b\u8bd5\u7684\u5185\u5bb9\uff0c\u4f46\u60a8\u53ef\u80fd\u8fd8\u9700\u8981\u4ee3\u7801\u6765\u521b\u5efa\u548c\u6302\u8f7d /proc \u6216\u542f\u7528 lo\u3002\u6b64\u5916\uff0c\u6211\u5728 getpid() == 1 \u4e0a\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u6761\u4ef6\uff0c\u4ee5\u4fbf\u6211\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u6211\u7684\u4e3b\u673a\u7cfb\u7edf\u4e0a\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u5728\u90a3\u91cc\u5b83\u4e0d\u662f\u4ee5 root \u8eab\u4efd\u8fd0\u884c\uff0c\u5e76\u4e14\u6211\u4e0d\u5e0c\u671b\u5b83\u5173\u95ed\u4efb\u4f55\u7535\u6e90\u3002 \uff08\u6211\u5728 strace \u4e0b\u8fd0\u884c\u4e86\u51e0\u6b21\u4ee5\u786e\u4fdd\u5b83\u6309\u7167\u6211\u7684\u9884\u671f\u8fd0\u884c\uff0c\u800c\u4e14\u6211\u4e0d\u60f3\u8d39\u5fc3\u5728\u6211\u7684 initrd \u4e2d\u83b7\u53d6 strace\u3002\uff09\u6240\u4ee5\u6211\u9996\u5148\u786e\u4fdd\u8fd9\u53ef\u4ee5\u5728\u80a1\u7968\u5185\u6838\u4e0a\u91cd\u73b0\u672c\u8eab\uff0c\u4e0e\u6211\u7684\u5de5\u4f5c\u573a\u6240\u53ef\u80fd\u6dfb\u52a0\u7684\u4efb\u4f55\u914d\u7f6e\u9694\u79bb\uff1a $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success $ git checkout v4.1 $ make defconfig &amp;&amp; make -j8 $ qemu-system-x86_64 -nographic -append console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^SuccessSuccess \u9177\uff0c\u8fd9\u7edd\u5bf9\u662f\u8fd9\u4e9b\u7248\u672c\u4e4b\u95f4\u7684\u56de\u5f52\u3002 \uff08\u914d\u7f6e\u9009\u9879\u96c6\u4ece\u5185\u6838\u7248\u672c\u5230\u5185\u6838\u7248\u672c\u4e0d\u540c\uff0c\u56e0\u6b64\u5728\u5982\u6b64\u5e7f\u6cdb\u7684\u8303\u56f4\u5185\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u83b7\u53d6\u5f53\u524d\u5185\u6838\u7684\u9ed8\u8ba4\u914d\u7f6e - \u5982\u679c\u60a8\u9700\u8981\u81ea\u5b9a\u4e49\u914d\u7f6e\u9009\u9879\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u4e4b\u540e\u7f16\u8f91 .config\u8fd0\u884c make defconfig \u6216\u5176\u4ed6\u4e1c\u897f\u3002\uff09\u73b0\u5728\u8ba9 git bisect run \u505a\u5b83\u7684\u4e8b\u60c5\uff1a $ git bisect start $ git bisect bad v4.9 $ git bisect good v4.1 $ git bisect run sh -c &#39;make defconfig &amp;&amp; make -j8 &amp;&amp; qemu-system-x86_64 -nographic -append console=ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success&#39; \u5b83\u5f00\u59cb\u6253\u5370\u4e00\u5806\u6784\u5efa\u65e5\u5fd7\uff0c\u7136\u540e\u6211\u5f00\u59cb\u505a\u5176\u4ed6\u4e8b\u60c5\u3002\u5927\u7ea6\u534a\u5c0f\u65f6\u540e\uff08\u6211\u9884\u8ba1\u9700\u8981\u66f4\u957f\u65f6\u95f4\uff01\uff09\uff0c\u5b83\u6253\u5370\u51fa\u6765\uff1a\nef547f2ac16bd9d77a780a0e7c70857e69e8f23f\u662f\u7b2c\u4e00\u574fcommitcommit ef547f2ac16bd9d77a780a0e7c70857e69e8f23fAuthor\uff1a\u57c3\u91cc\u514bDumazet &lt;edumazet@google.com&gt;\u65e5\u671f\uff1a\u661f\u671f\u4e9410\u67082\u65e511\u70b943\u520637\u79d22015 -0700 TCP\uff1a\u5220\u9664max_qlen_log\u8be5\u63a7\u5236\u53d8\u91cf\u8bbe\u5b9a\u4e3a\u7b2c\u4e00\u542c\uff08FD\uff0c\u79ef\u538b\uff09\u547c\u53eb\uff0c\u4f46\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u8bd5\u56fe\u589e\u52a0\u6216\u51cf\u5c11\u79ef\u538b\uff0c\u5219\u4e0d\u4f1a\u66f4\u65b0\u3002\u5f53\u65f6\u76d1\u542c\u5668\u6709\u4e00\u4e2a\u4e0d\u53ef\u8c03\u6574\u5927\u5c0f\u7684\u54c8\u5e0c\u8868\u662f\u6709\u9053\u7406\u7684\u3002\u6b64\u5916\uff0c\u56db\u820d\u4e94\u5165\u5230 2 \u7684\u5e42\u4e5f\u4e0d\u662f\u5f88\u53cb\u597d\u3002\u7b7e\u5b57\u4eba\uff1aEric Dumazet &lt;edumazet@google.com&gt; \u7b7e\u5b57\u4eba\uff1aDavid S. Miller &lt;davem@davemloft.net&gt;$ git describe --contains ef547f2ac16bd9d77a780a0e7c70857e69e8f23fv4.412^1^1 2~2 \u770b\u8d77\u6765\u975e\u5e38\u76f8\u5173\u2014\u2014\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u79ef\u538b\u5de5\u4f5c\u3002\u67e5\u770b\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u53d1\u751f\u4e86\u4ec0\u4e48\uff1a\u5728\u5185\u6838 4.4 \u4e4b\u524d\uff0cbacklog \u53c2\u6570\u7684\u4e0a\u9650\u603b\u662f\u81f3\u5c11\u4e3a 8\uff0c\u5e76\u4e14\u8fd8\u4f1a\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a 2 \u7684\u5e42\u3002\u56e0\u6b64\uff0c\u5728\u8f83\u65e7\u7684\u5185\u6838\u4e0a\uff0clisten(fd, 0) \u53d8\u6210\u4e86 listen(fd, 8)\uff0c\u5c3d\u7ba1\u4f7f\u7528\u4e86\u9519\u8bef\u7684 listen()\uff0c\u4f46\u8be5\u7a0b\u5e8f\u4e4b\u524d\u4ecd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u8fd9\u4e2a\u63d0\u4ea4\u5b9e\u9645\u4e0a\u5728\u6211\u8bd5\u56fe\u9605\u8bfb\u7684 git \u65e5\u5fd7\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u4f46\u6211\u4e00\u5b9a\u5df2\u7ecf\u6eda\u52a8\u8fc7\u4e86\u5b83\u3002 git reflog \u663e\u793a git bisect \u5728\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\u7ecf\u5386\u4e86 16 \u6b21\u63d0\u4ea4\uff1a\u5b83\u5728\u7b2c 11 \u6b21\u5c1d\u8bd5\u65f6\u627e\u5230\u4e86\u8fd9\u4e2a\uff0c\u7136\u540e\u53c8\u82b1\u4e86 5 \u6b21\u63d0\u4ea4\u786e\u8ba4\u5728\u8fd9\u4e2a\u63d0\u4ea4\u4e4b\u524d\u7684\u6240\u6709\u63d0\u4ea4\u90fd\u662f\u597d\u7684\u3002\u6240\u4ee5\u6211\u5f88\u9ad8\u5174 git bisect run \u627e\u5230\u4e86\u8fd9\u4e2a\u63d0\u4ea4\uff0c\u6211\u7279\u522b\u9ad8\u5174\u5b83\u5728\u65e0\u4eba\u770b\u7ba1\u7684\u534a\u5c0f\u65f6\u5185\u627e\u5230\u4e86\u5b83\uff0c\u800c\u6211\u4e0d\u5fc5\u624b\u52a8\u7f16\u8bd1\u548c\u6d4b\u8bd5 16 \u4e2a\u5185\u6838\u3002", "note_en": "The  git bisect command helps you identify the first commit in a range that broke something. You give it a good commit and a bad one, and it will do a binary search between the two to find the first bad commit. At each step, you say either  git bisect good or  git bisect bad depending on whether it passes your test, and it will move you halfway through the remaining commits in the range.\n There are several guides for using git bisect with the Linux kernel (e.g.,  upstream,  Gentoo, and  Ubuntu all have one). Unfortunately, they&#39;re pretty time-intensive operations; they all say something to the effect of, &#34;now build the kernel, reboot into it, and test it, then type  git bisect good or  git bisect bad depending on whether it worked.&#34; For a tricky hardware compatibility bug, this might be your only option. But if you&#39;re testing something about the kernel&#39;s behavior, this is unnecessarily slow and manual, and you might be tempted to do something else, like read commit logs.\n At work a few days ago, someone reported that a certain application no longer worked in a new VM. After some initial debugging with  strace, we determined that the program was calling the  listen system call with a backlog of 0: that is, it was saying it was willing to accept up to zero connections. By the specification, it shouldn&#39;t work\u2014and yet it did work on their older VM. A few things were different between the new systems, but one notable one was that the new VM had kernel 4.9 and the old one kernel 4.1. (Another was that it was deployed in a new cloud environment that my team is responsible for, with some networking changes, so we wanted to ensure we had not broken anything!)\n I tried reading through  git log --grep listen v4.1..v4.9 net/, but there was entirely too much and I couldn&#39;t find anything. So I decided to see if bisection could help me, with the use of  git bisect run, which enables  fully automated bisecting. I wasn&#39;t excited about rebooting my machine to do a binary search across eight kernel releases, but if I could get it to run in some other way, I could just leave it running.\n For a normal program, it&#39;s pretty easy to use  git bisect run, which just wants a command that returns success (0) or failure (1): you can usually do something like  git bisect run make test. For a kernel regression, though, we&#39;ll need a command to boot the kernel and run some code. We can use the  qemu virtual machine software for this, which has two properties that make it particularly suitable as such a command: it can boot a Linux kernel directly, instead of emulating a bootloader on a hard disk, and it can run a temporary VM in a single command line without any additional setup.\n We&#39;ll build ourselves a tiny &#34;initrd&#34; (initial RAM disk), which is what&#39;s commonly used to load enough drivers to access your hard drive and completely boot your system. However, our initrd will just contain our one test program, which will possibly print a success message, and shut down the system. We can&#39;t meaningfully get a return value out of qemu, so we&#39;ll just grep its output for the success message.\n The first step is to check out the kernel sources, if we don&#39;t have them already, and build a kernel:\n      That is, run it in text mode with the VM&#39;s serial console on standard input/output instead of trying to pop up a graphical window, and tell the kernel to use the serial port for console output. If your system supports it, you can add  -enable-kvm to make it a faster, although since we want to shut down the VM immediately once we run our test, it doesn&#39;t make a huge difference (2 seconds vs. 4 on my machine).\n This will panic, because we gave the kernel neither a root filesystem nor a working initrd. (You can kill the VM by typing Ctrl-A and then X.) So let&#39;s write an initrd with a single binary,  init. It needs to shut down the system, so we get back to our prompt:\n $ mkdir initrd $  cd initrd $ cat &gt; init.c  &lt;&lt; EOF #include &lt;sys/reboot.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int main(void) {  printf(&#34;Hello world!\\n&#34;);  reboot(RB_POWER_OFF); } EOF\n (Yes, the system call for shutting down the system is named &#34; reboot&#34;, because the name &#34; shutdown&#34; was already used for the system call to close a socket. I guess early UNIX computers didn&#39;t support initiating a hardware poweroff from software, so the  shutdown  command would just stop all processes, sync and unmount disks, and print a message asking the operator to cut power.)\n Compile this program statically, so it&#39;s a single binary, put it in the particular form required for an initrd (a compressed cpio archive, an old but very simple format with a weird command-line tool) and make sure it&#39;s named  init, and then we can boot it up with qemu:\n $  cd initrd $ cc -static -o init init.c $  echo init  | cpio -H newc -o  | gzip &gt; initrd.gz 1621 blocks $  cd .. $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz... [ 0.502593 ] ALSA device list: [ 0.502889 ] No soundcards found. [ 0.503554 ] Freeing unused kernel memory: 1088K  (ffffffff81f2f000 - ffffffff8203f000 ) [ 0.504262 ] Write protecting the kernel  read-only data: 14336k [ 0.505004 ] Freeing unused kernel memory: 1680K  (ffff88000185c000 - ffff880001a00000 ) [ 0.505855 ] Freeing unused kernel memory: 1340K  (ffff880001cb1000 - ffff880001e00000 )Hello world! [ 1.089618 ] input: ImExPS/2 Generic Explorer Mouse as /devices/platform/i8042/serio1/input/input3 [ 1.092997 ] ACPI: Preparing to enter system sleep state S5 [ 1.094083 ] reboot: Power down\n Great. We&#39;ve built our own kernel, passed it a test binary to run, and got it booted in a qemu command that exits. This is turning into something we can pass to  git bisect run. Now it&#39;s time to write the actual test. Here&#39;s what I ultimately ended up with to track down my bug:\n #include &lt;sys/types.h&gt; #include &lt;sys/socket.h&gt; #include &lt;sys/time.h&gt; #include &lt;sys/reboot.h&gt; #include &lt;sys/ioctl.h&gt; #include &lt;net/if.h&gt; #include &lt;netinet/in.h&gt; #include &lt;netinet/tcp.h&gt; #include &lt;fcntl.h&gt; #include &lt;stdio.h&gt; #include &lt;unistd.h&gt; int  main ( void )  {  /* The problem I was tracing was only reproducible with syncookies  disabled. While the initrd gets unpacked into a writable temporary  filesystem, nothing exists yet, so if I need /proc, I need to create  and mount it myself. */  if  ( getpid ()  ==  1 )  {  mkdir ( &#34;/proc&#34; );  mount ( &#34;proc&#34; ,  &#34;/proc&#34; ,  &#34;proc&#34; ,  0 ,  NULL );  char  buf []  =  &#34;0 \\n &#34; ;  int  fd  =  open ( &#34;/proc/sys/net/ipv4/tcp_syncookies&#34; ,  O_WRONLY );  write ( fd ,  buf ,  2 );  close ( fd );  }  int  server  =  socket ( AF_INET ,  SOCK_STREAM ,  IPPROTO_TCP );  /* Also, while a loopback ethernet device exist, it&#39;s not  enabled, so network tests won&#39;t work. This code is equivalent  to `ifconfig lo up`. */  struct  ifreq  ifreq  =  {  . ifr_name  =  &#34;lo&#34; ,  };  ioctl ( server ,  SIOCGIFFLAGS ,  &amp; ifreq );  if  ( ! ( ifreq . ifr_flags  &amp;  IFF_UP ))  {  ifreq . ifr_flags  |=  IFF_UP ;  ioctl ( server ,  SIOCSIFFLAGS ,  &amp; ifreq );  }  struct  sockaddr_in  addr  =  {  . sin_family  =  AF_INET ,  . sin_port  =  htons ( 54321 ),  . sin_addr  =  { htonl ( INADDR_LOOPBACK )},  };  bind ( server ,  ( struct  sockaddr  * ) &amp; addr ,  sizeof ( addr ));  listen ( server ,  0 );  int  client  =  socket ( AF_INET ,  SOCK_STREAM ,  IPPROTO_TCP );  struct  timeval  timeout  =  { 3 ,  0 };  setsockopt ( client ,  SOL_SOCKET ,  SO_SNDTIMEO ,  &amp; timeout ,  sizeof ( timeout ));  if  ( connect ( client ,  ( struct  sockaddr  * ) &amp; addr ,  sizeof ( addr ))  ==  0 )  {  printf ( &#34;Success \\n &#34; );  }  else  {  perror ( &#34;connect&#34; );  }  if  ( getpid ()  ==  1 )  {  reboot ( RB_POWER_OFF );  }  return  0 ; }\n Most of it is specific to the thing I was trying to test, but you may also need the code to create and mount  /proc or to enable  lo. Also, I put a few things conditional on  getpid() == 1 so that I could safely test the program on my host system, where it wasn&#39;t running as root and where I didn&#39;t want it powering anything off. (I ran it a few times under  strace to make sure it was doing what I expected it to do, and I didn&#39;t want to bother with getting  strace inside my initrd.)\n So I first made sure this is reproducible on a stock kernel by itself, isolated from any config my workplace might add:\n $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz  | grep ^Success $ git checkout v4.1 $ make defconfig  &amp;&amp; make -j8 $ qemu-system-x86_64 -nographic -append  console =ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz  | grep ^SuccessSuccess\n Cool, it&#39;s definitely a regression somewhere between those versions. (The set of config options change from kernel version to kernel version, so across this wide of a range, the easiest thing is to just get the current kernel&#39;s default config - if you need custom config options, you might want to edit .config after running  make defconfig or something.) Now time to let  git bisect run do its thing:\n $ git bisect start $ git bisect bad v4.9 $ git bisect good v4.1 $ git bisect run sh -c  &#39;make defconfig &amp;&amp; make -j8 &amp;&amp; qemu-system-x86_64 -nographic -append console=ttyS0 -kernel arch/x86/boot/bzImage -initrd initrd/initrd.gz | grep ^Success&#39;\n It started printing a bunch of build logs and I went to work on something else. About half an hour later (I expected it to take longer!), it prints this out:\n ef547f2ac16bd9d77a780a0e7c70857e69e8f23f is the first bad commitcommit ef547f2ac16bd9d77a780a0e7c70857e69e8f23fAuthor: Eric Dumazet &lt;edumazet@google.com&gt;Date: Fri Oct 2 11:43:37 2015 -0700 tcp: remove max_qlen_log This control variable was set at first listen(fd, backlog) call, but not updated if application tried to increase or decrease backlog. It made sense at the time listener had a non resizeable hash table. Also rounding to powers of two was not very friendly. Signed-off-by: Eric Dumazet &lt;edumazet@google.com&gt; Signed-off-by: David S. Miller &lt;davem@davemloft.net&gt;$ git describe --contains ef547f2ac16bd9d77a780a0e7c70857e69e8f23fv4.4-rc1~141^2~238^2~2\n which looks awfully relevant\u2014it implies they were previously rounding off the backlog. Looking at commit, we can see what happened: before kernel 4.4,  the backlog argument was always capped to at least 8, and also rounded up to the next power of two. So  listen(fd, 0) was turning into  listen(fd, 8) on older kernels, and the program previously worked despite using  listen() incorrectly. This commit was actually somewhere in the  git log I was trying to read, but I must have scrolled past it.\n git reflog shows that  git bisect went through sixteen commits before settling on this one: it found this one on its 11th try, and then spent 5 more commits confirming that all the commits before this one were good. So I&#39;m glad  git bisect run found this commit, and I&#39;m especially glad it found it in half an hour unattended, without me having to manually compile and test sixteen kernels by hand.", "posttime": "2021-07-29 21:56:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "git,kernel,\u5185\u6838", "title": "\u4f7f\u7528 git bisect run (2018) \u5728\u534a\u5c0f\u65f6\u5185\u627e\u5230\u5185\u6838\u56de\u5f52", "title_en": "Finding a kernel regression in half an hour with git bisect run (2018)", "transed": 1, "url": "https://ldpreload.com/blog/git-bisect-run", "via": "", "real_tags": ["git", "kernel", "\u5185\u6838"]}, {"category": "", "categoryclass": "", "imagename": "8dbbc29b5c1bc33d6f69f35830e2744c.jpg", "infoid": 1070259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5b9e\u73b0\u5bf9\u7231\u56e0\u65af\u5766\u5e7f\u4e49\u76f8\u5bf9\u8bba\u7684\u9884\u6d4b\uff0c\u7814\u7a76\u4eba\u5458\u62a5\u544a\u4e86\u6709\u53f2\u4ee5\u6765\u7b2c\u4e00\u6b21\u8bb0\u5f55\u5230\u9ed1\u6d1e\u8fdc\u7aef\u7684 X \u5c04\u7ebf\u53d1\u5c04\u3002\u65af\u5766\u798f\u5927\u5b66\u7684\u5929\u4f53\u7269\u7406\u5b66\u5bb6\u4e39\u00b7\u5a01\u5c14\u91d1\u65af (Dan Wilkins) \u770b\u7740 X \u5c04\u7ebf\u4ece 8 \u4ebf\u5149\u5e74\u8fdc\u7684\u661f\u7cfb\u4e2d\u5fc3\u7684\u8d85\u5927\u8d28\u91cf\u9ed1\u6d1e\u5c04\u5165\u5b87\u5b99\uff0c\u53d1\u73b0\u4e86\u4e00\u79cd\u6709\u8da3\u7684\u6a21\u5f0f\u3002\u4ed6\u89c2\u5bdf\u5230\u4e00\u7cfb\u5217\u660e\u4eae\u7684 X \u5c04\u7ebf\u8000\u6591\u2014\u2014\u4ee4\u4eba\u5174\u594b\uff0c\u4f46\u5e76\u975e\u53f2\u65e0\u524d\u4f8b\u2014\u2014\u7136\u540e\uff0c\u671b\u8fdc\u955c\u8bb0\u5f55\u4e86\u4e00\u4e9b\u610f\u60f3\u4e0d\u5230\u7684\u4e1c\u897f\uff1a\u6bd4\u660e\u4eae\u7684\u8000\u6591\u66f4\u5c0f\u3001\u66f4\u665a\u3001\u201c\u989c\u8272\u201d\u4e0d\u540c\u7684\u989d\u5916 X \u5c04\u7ebf\u95ea\u5149\u3002", "note_en": "Fulfilling a prediction of Einstein\u2019s theory of general relativity, researchers report the first-ever recordings of X-ray emissions from the far side of a black hole.\n  Watching X-rays flung out into the universe by the supermassive black hole at the center of a galaxy 800 million light-years away, Stanford University astrophysicist  Dan Wilkins noticed an intriguing pattern. He observed a series of bright flares of X-rays \u2013 exciting, but not unprecedented \u2013 and then, the telescopes recorded something unexpected: additional flashes of X-rays that were smaller, later and of different \u201ccolors\u201d than the bright flares.", "posttime": "2021-07-29 21:55:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6765\u81ea,light,\u5c04\u7ebf", "title": "\u9996\u6b21\u63a2\u6d4b\u5230\u6765\u81ea\u9ed1\u6d1e\u540e\u9762\u7684\u5149", "title_en": "First detection of light from behind a black hole", "transed": 1, "url": "https://news.stanford.edu/2021/07/28/first-detection-light-behind-black-hole/", "via": "", "real_tags": ["\u6765\u81ea", "light", "\u5c04\u7ebf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1070258, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee3\u6570\u6548\u5e94\u4f3c\u4e4e\u662f\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u4e00\u79cd\u5723\u676f\u3002\u5f53\u6211\u5728\u8fd9\u91cc\u8bf4\u201c\u4ee3\u6570\u6548\u5e94\u201d\u65f6\uff0c\u6211\u7684\u610f\u601d\u662f\uff1a\u5c06\u4efb\u4f55\u6548\u5e94\u89c6\u4e3a\u7a0b\u5e8f\u4e2d\u7684\u503c\u6216\u7c7b\u578b\uff0c\u540c\u65f6\u8fd8\u6709\u4e00\u4e9b\u7b80\u5355\u7684\u8fd0\u7b97\uff08\u4ee3\u6570\uff09\u6765\u7ec4\u5408\u6548\u5e94\u3002\u8fd9\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f\u60f3\u5230\u7684\u4e24\u79cd\u8bed\u8a00\u662f Idris \u548c PureScript\u3002\u5f53\u60a8\u4f7f\u7528\u4ed6\u4eec\u7684\u6548\u679c\u652f\u6301\u8fdb\u884c\u7f16\u7a0b\u65f6\uff0c\u60a8\u7f16\u5199\u4e86 monadic \u4ee3\u7801\uff0c\u4f46\u672c\u8d28\u4e0a\u6709\u4e00\u4e2a\u60a8\u53ef\u4ee5\u4ece\u73af\u5883\u4e2d\u63d0\u53d6\u7684\u6548\u679c\u5217\u8868\uff1a\u65e5\u5fd7\u8bb0\u5f55\u3001\u72b6\u6001\u3001IO \u7b49\u3002\u6b64\u5916\uff0c\u60a8\u53ef\u4ee5\u9488\u5bf9\u4e00\u5806\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u53ea\u9700\u5047\u8bbe\u8fd9\u4e9b\u6548\u679c\u4f60\u9700\u8981\u7684\u5b58\u5728\uff0c\u5141\u8bb8\u6211\u4eec\u6839\u636e\u9700\u8981\u4efb\u610f\u589e\u52a0\u6548\u679c\u5806\u6808\u3002\u8fd9\u662f\u5f88\u4e0d\u9519\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u65e0\u6cd5\u5728 Haskell \u4e2d\u8bbf\u95ee\u8fd9\u4e9b\u5de5\u5177\u3002\u76f8\u53cd\uff0chaskellers \u901a\u5e38\u4f9d\u8d56\u4e8e mtl \u6216 Free Monads\u3002\u6211\u4eca\u5929\u8981\u5c55\u793a\u7684\u662f\u4e00\u4e2a\u63a5\u8fd1 Idris \u548c PureScript \u7684\u6548\u679c\u5e93\uff0c\u4f7f\u7528 van Laarhoven \u7f16\u7801\u7684 Free Monad\uff0c\u914d\u5907\u4e86\u4e00\u4e2a\u5f02\u6784\u5217\u8868 (HList) \u6548\u679c\u3002\u6211\u58f0\u79f0\u8fd9\u5177\u6709 Idris \u548c PureScript \u4e2d Effect \u5de5\u5177\u7684\u4e00\u4e9b\u597d\u5904\uff0c\u4e0e\u5e38\u89c4 Free Monads \u76f8\u540c\u7684\u8868\u73b0\u529b\uff0c\u6bd4 Church\u3001Fused \u6216 Oleg \u7f16\u7801\u66f4\u9ad8\u6548\u7684\u7f16\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u8981\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\u3002\u5168\u90e8\u5728\u5927\u7ea6 60 \u884c\u4ee3\u7801\u4e2d\u3002 -- |\u6211\u4eec\u4f7f\u7528\u663e\u5f0f\u7684 `liftVL` \u7ec4\u5408\u5668\u7528\u4e8e\u8bf4\u660e\u76ee\u7684\u3002-- \u5728\u5b9e\u9645\u4ee3\u7801\u4e2d\uff0c\u60a8\u5c06\u62e5\u6709\u81ea\u5df1\u7684\u7ec4\u5408\u5668\u3002-- \u53d1\u5e03 requestpostReq :: HasEffect \u6548\u679c Http =&gt; Url -&gt; RequestBody -&gt; FreeVL \u6548\u679c StatusCodepostReq url body = do resp &lt;- liftVL (\\http -&gt; put http url body) return (statusCode resp)-- \u53d6\u4efb\u610f\u81ea\u7531 monad \u5e76\u7528 loggingwithLog \u5305\u88c5\u5b83 :: HasEffect effects Logging =&gt; String -&gt; String -&gt; FreeVL effects a -&gt; FreeVL \u6548\u679c awithLog preMsg postMsg program = do liftVL (\\log -&gt; infoLogger log preMsg) a &lt;- program liftVL (\\log -&gt; infoLogger log postMsg) return a-- \u7528\u4e8e\u5b9a\u4e49\u89e3\u91ca\u5668\u7c7b\u578b\u7684\u5177\u4f53\u6548\u679c\u5217\u8868 MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: State &#39;: &#39;[] )--\u4f5c\u4e3a\u503c\u7684\u89e3\u91ca\u5668ioInterpreter :: Effects MyEffects IOioInterpreter = httpIO .: loggerIO .: randomIO .: stateIO .: EmptyEffect--\u5b9e\u9645\u8fd0\u884c\u6211\u4eec\u7684programmain :: IO ()main = interpret ioInterpreter (withLog &quot;POST!&quot; &quot;phew! made it!&quot; (postReq &quot;https://weirdcanada.com&quot; &quot;rare=cool&quot;) ) \u4e0a\u9762\u552f\u4e00\u7f3a\u5c11\u7684\u90e8\u5206\u662f\u6211\u4eec\u7684\u6548\u679c\uff08Http\u3001Logger \u7b49\uff09\u7684\u6837\u5b50\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a -- HTTP effectdata Http m = Http { get :: Url -&gt; m Response , put :: Url -&gt; RequestBody -&gt; m Response -- \u7b49\u7b49 }-- Logging effectdata Logging m = Logging { infoLogger :: String -&gt; m (), debugLogger :: String -&gt; m ()-- \u7b49\u7b49}\n\u8fd9\u7bc7\u6587\u7ae0\u7684\u5176\u4f59\u90e8\u5206\u662f\u7528\u8bc6\u5b57\u7684haskell\u5199\u7684\u3002\u6211\u9f13\u52b1\u60a8\u526a\u5207\u5e76\u7c98\u8d34\u6b64\u4ee3\u7801\u5e76\u81ea\u5df1\u73a9\uff01\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u6269\u5c55\u548c\u5bfc\u5165\uff01 &gt; {-# LANGUAGE DataKinds #-}&gt; {-# LANGUAGE FlexibleContexts #-}&gt; {-# LANGUAGE FlexibleInstances #-}&gt; {-# LANGUAGE GADTs #-}&gt; {-# LANGUAGE KindSignatures #-}&gt; {-# LANGUAGE MultiParamTypeClasses #-}&gt; {-# LANGUAGE PolyKinds #-}&gt; {-# LANGUAGE RankNTypes #-}&gt; {-# LANGUAGE TypeOperators #-}&gt; &gt; module Main where&gt; &gt; import Control.Arrow ((&amp;&amp;&amp;))&gt; import Control .Concurrent(threadDelay)&gt; import Control.Exception(catch)&gt; import Control.Lens((^.))&gt; import Data.ByteString.Lazy(ByteString)&gt; import Network.Wreq(get, post, Response, responseStatus, statusCode) &gt; \u5bfc\u5165 Network.HTTP.Client (HttpException(StatusCodeException))&gt; \u5bfc\u5165\u5408\u683c\u7684 Network.HTTP.Types.Status \u4f5c\u4e3a S&gt; \u5bfc\u5165 System.Random (randomIO) \u6211\u5411\u60a8\u63a8\u8350 Russell O&#39;Connor \u5728 van Laarhoven Free Monad \u4e0a\u7684\u7cbe\u5f69\u535a\u6587.\u8fd9\u662f\u4e00\u4e2a\u7b80\u77ed\u800c\u7b80\u6d01\u7684\u8bfb\u7269\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0cvan Laarhoven Free Monad \u4e0e\u666e\u901a\u5355\u5b50\u662f\u53cc\u91cd\u7684\u3002\u6211\u4eec\u4f7f\u7528\u4e58\u79ef\u800c\u4e0d\u662f\u4f7f\u7528 sum \u7c7b\u578b\u6765\u5bf9\u64cd\u4f5c\u8fdb\u884c\u5efa\u6a21\u3002 &gt; -- \u8f93\u5165\u522b\u540d\uff0c\u4f7f\u5b83\u770b\u8d77\u6765\u50cf\u771f\u6b63\u7684\u4ee3\u7801\u3002&gt; type Url = String&gt; type RequestBody = ByteString&gt; &gt; -- \u8001\u5f0f\u7684\u81ea\u7531\u5355\u5b50\u7f16\u7801&gt; data Free effect a = Pure a&gt; | Free (effect (Free effect a))&gt; &gt; -- \u793a\u4f8bhttp\u6548\u679c\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0c\u4f7f\u7528Strings\u8868\u793aurl\u548c\u54cd\u5e94&gt; data YeOldeHttp a = Get Url (Response ByteString -&gt; a)&gt; | Post Url RequestBody (Response ByteString -&gt; a)&gt; &gt; -- \u793a\u4f8b\u89e3\u91ca\u5668&gt; freeIOInterp :: Free YeOldeHttp a -&gt; IO a&gt; freeIOInterp (Pure a) = return a&gt; freeIOInterp (Free (Get url next)) = get url &gt; &gt;= freeIOInterp \u3002 next&gt; freeIOInterp (Free (Post url body next)) = post url body &gt;&gt;= freeIOInterp \u3002 next&gt; &gt; -- \u793a\u4f8b\u7ec4\u5408\u5668&gt; oldGet :: Url -&gt; Free YeOldeHttp (Response ByteString)&gt; oldGet url = Free (Get url Pure) \u7ed9\u5b9a\u4e00\u4e2a\u6548\u679c\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u4e2asum-type\uff08\u6bcf\u4e2a\u5206\u652f\u4e0d\u540c\u7684\u64cd\u4f5c\uff08\u4f8b\u5982Get , Put)) \u6211\u4eec\u53ef\u4ee5\u8bc1\u660e Free YeOldHttp a \u662f\u4e00\u4e2a monad\uff08\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 Gabriel \u7684\u535a\u5ba2\u6587\u7ae0\uff09\u5e76\u9488\u5bf9\u5b83\u7f16\u5199\u89e3\u91ca\u5668\uff0c\u4e3a\u5176\u63d0\u4f9b\u6b63\u786e\u7684\u8bed\u4e49\u3002 Free Monads \u7684\u91cd\u8981\u90e8\u5206\u662f\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e0d\u540c\u7684\u89e3\u91ca\u5668\uff0c\u6bcf\u4e2a\u89e3\u91ca\u5668\u90fd\u6709\u81ea\u5df1\u7684\u7279\u5b9a\u7528\u9014\uff08\u6d4b\u8bd5\u3001\u751f\u4ea7\u3001\u8c03\u8bd5\u7b49\uff09\u3002\u73b0\u5728\uff0cvan Laarhoven Free Monad \u662f\u4e00\u79cd\u4e0d\u540c\u7684\u7f16\u7801\uff0c\u9700\u8981\u60a8\u5c06\u6548\u679c\u8868\u793a\u4e3a\u4e58\u79ef\u800c\u4e0d\u662f\u603b\u548c\u3002\u4e0a\u9762\u7684\u4f8b\u5b50\u76f8\u5f53\u4e8e\uff1a &gt; -- (\u7b80\u5355) van Laarhoven Free Monad encoding&gt; newtype FreeVL1 effect a =&gt; FreeVL1 { runFreeVL1 :: forall m. Monad m =&gt; effect m -&gt; ma }&gt; &gt; -- \u4f8b\u5b50Http effect&gt; data NewHttp m =&gt; NewHttp { getNewHttp :: Url -&gt; m (Response ByteString)&gt; , postNewHttp :: Url -&gt; RequestBody -&gt; m (Response ByteString)&gt; }&gt; &gt; -- \u793a\u4f8b\u89e3\u91ca\u5668&gt; newHttpIO :: NewHttp IO&gt; newHttpIO = NewHttp { getNewHttp = get, postNewHttp = post }&gt; &gt; freeVL1IOInterpreter :: FreeVL1 NewHttp a -&gt; IO a&gt; freeVL1IOInterpreter program = runFreeVL1 program newHttpIO&gt; -- \u793a\u4f8b\u7ec4\u5408&gt; newGet :: Url -&gt; FreeVL1 NewHttp (Response ByteString)&gt; newGet url = FreeVL1 (\\httpEffects -&gt; getNewHttp httpEffects url)\nFreeVL1 \u7684\u597d\u5904\u5728\u4e8e\u5b83\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u8981\u89e3\u91ca\u7528 FreeVL1 NewHttp a \u7f16\u5199\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ea\u9700\u8981\u63d0\u4f9b NewHttp m \u7c7b\u578b\u7684\u503c\uff0c\u5982\u4e0a\u6240\u793a\u3002\u8fd9\u610f\u5473\u7740\u9488\u5bf9 FreeVL1 NewHttp a \u7f16\u5199\u7a0b\u5e8f\u5c06\u5177\u6709\u4e0e\u51fd\u6570\u7ec4\u5408\u6216 Reader monad \u76f8\u540c\u7684\u8fd0\u884c\u65f6\u6210\u672c\u3002\u5c06\u6b64\u4e0e Free \u7684\u5e38\u89c4\u7f16\u7801\u8fdb\u884c\u5bf9\u6bd4\uff0c\u540e\u8005\u5728\u7ed1\u5b9a\u4e0b\u6267\u884c\u5f97\u975e\u5e38\u7cdf\u7cd5\uff08\u5b83\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u82b1\u54e8\u7684\u64cd\u4f5c\u94fe\u8868\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 Church-encoding \u6765\u5927\u5e45\u6539\u5584\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u4e5f\u6709\u5176\u4ed6\u7684\u6743\u8861\u3002\u73b0\u5728\uff0c\u7b80\u5355\u7684 van Laarhoven \u7f16\u7801\u7684\u7f3a\u70b9\u662f\u6211\u4eec\u4e00\u6b21\u53ea\u6709\u4e00\u79cd\u6548\u679c\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u5982\u4f55\u6539\u8fdb\u5b83\uff01\u6211\u4eec\u73b0\u5728\u7684\u52a8\u673a\u662f\u521b\u5efa\u65b0\u7684\u6548\u679c\uff08\u4f8b\u5982\uff0c\u4e5f\u8bb8\u6211\u4eec\u60f3\u8981\u65e5\u5fd7\u3001\u968f\u673a\u6570\u7b49\uff0c\u800c\u4e0d\u662f\u4ec5\u4ec5 Http\uff09\u5e76\u5c06\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u3002\u5728\u4f20\u7edf\u7684 Free Monad \u7f16\u7801\u4e2d\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u8054\u4ea7\u54c1\uff08\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u535a\u5ba2\u6587\u7ae0\uff09\u3002\u7531\u4e8e\u6bcf\u4e2a effect \u90fd\u662f\u4e00\u4e2a Functor\uff0c\u800c Functors \u7684 Co-Products \u4ecd\u7136\u662f\u4e00\u4e2a Functor\uff0c\u8fd9\u5728\u6280\u672f\u4e0a\u662f\u53ef\u80fd\u7684\u3002\u7136\u800c\uff0c\u5b83\u4f7f\u5f97\u4ece\u5806\u6808\u4e2d\u63d0\u53d6\u6548\u679c\u4ee5\u53ca\u7f16\u5199\u548c\u7ec4\u5408\u89e3\u91ca\u5668\u53d8\u5f97\u975e\u5e38\u9ebb\u70e6\u3002\u5728 van Laarhoven \u7f16\u7801\u4e2d\uff0c\u6211\u4eec\u7684\u6548\u679c\u5df2\u7ecf\u662f\u4e00\u4e2a\u4ea7\u54c1\u7c7b\u578b\u4e86\u3002\u6211\u4eec\u60f3\u8981\u7684\u662f\u80fd\u591f\u4e3a\u6211\u4eec\u7684\u6548\u679c\u6dfb\u52a0\u66f4\u591a\u201c\u5b57\u6bb5\u201d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u6dfb\u52a0\u5b57\u6bb5 log :: String -&gt; m()\uff0c\u90a3\u51e0\u4e4e\u5c31\u50cf\u5728\u6211\u4eec\u7684\u6548\u679c\u5806\u6808\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u8bb0\u5f55\u5668\u4e00\u6837\uff01\u6dfb\u52a0\u5b57\u6bb5\u7684\u4e00\u79cd\u7b49\u6548\u65b9\u6cd5\u662f\u521b\u5efa\u4e00\u4e2a Heterogeneous \u6548\u679c\u5217\u8868\uff01\u5982\u679c\u6211\u4eec\u4e0d\u662f\u5c06\u6211\u4eec\u7684\u6548\u679c\u4ea7\u54c1\u201c\u76f8\u4e58\u201d\uff0c\u800c\u662f\u5c06\u5b83\u4eec\u9644\u52a0\u5230\u4e00\u4e2a\u5f02\u6784\u5217\u8868\u4e2d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u79cd\u6dfb\u52a0\u66f4\u591a\u6548\u679c\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e0e\u6dfb\u52a0\u66f4\u591a\u5b57\u6bb5\u662f\u540c\u6784\u7684\u3002\u8ba9\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u8fd9\u6837\u7684 HList \u5e76\u5c55\u793a\u5b83\u5982\u4f55\u4f7f\u6211\u4eec\u80fd\u591f\u6269\u5c55\u4ee5\u524d\u7684 van Laarhoven \u7f16\u7801\uff01 &gt; -- |\u6211\u4eec\u7684 HList of effects&gt; -- \u8bf7\u6ce8\u610f\uff0c\u6839\u636e van Laarhoven \u7f16\u7801\uff0c\u6211\u4eec\u7684\u6548\u679c\u662f\u53c2\u6570\u5316\u7684&gt; -- \u7531\u4e00\u4e2a monad m.&gt; data EffectStack a (m :: * -&gt; *) where&gt; EmptyEffect :: EffectStack &#39;[] m&gt; ConsEffect :: effect m -&gt; EffectStack \u6548\u679c m -&gt; EffectStack (effect &#39;: effects) m\nEffectStack \u73b0\u5728\u5305\u542b\u4e00\u4e2a\u4efb\u610f\u7684\u6548\u679c\u5217\u8868\uff0c\u6bcf\u4e2a\u6548\u679c\u7531 m \u53c2\u6570\u5316\u3002\u6211\u4eec\u73b0\u5728\u51c6\u5907\u5b9a\u4e49\u5806\u6808\u9a71\u52a8\u7684 van Laarhoven Free Monad\uff1a &gt; -- van Laarhoven Free Monad with Effect Stacks encoding&gt; newtype FreeVL effects a =&gt; FreeVL { runFreeVL :: forall m. Monad m =&gt; EffectStack effects m -&gt; ma }&gt; &gt; -- \u662f\u7684\uff0c\u5b83\u662f\u4e00\u4e2amonad&gt; instance Functor (FreeVL effects) where&gt; fmap f (FreeVL run) = FreeVL (fmap f .run)&gt; &gt; instance Applicative (FreeVL)\u6548\u679c) where&gt; pure a = FreeVL (const (pure a))&gt; (FreeVL fab) (FreeVL a) =&gt; FreeVL $ uncurry () \u3002 (fab &amp;&amp;&amp; a)&gt; &gt; instance Monad (FreeVL effects) where&gt; (FreeVL run) &gt;&gt;= f =&gt; FreeVL $ \\effects -&gt; run effects &gt;&gt;= \\a -&gt; runFreeVL (fa) effects &gt; -- \u89e3\u91ca\u4e00\u4e2avan Laarhoven Free Monad with Effect Stacks&gt; interperet :: Monad m&gt; =&gt; EffectStack effects m&gt; -&gt; FreeVL effects a&gt; -&gt; ma&gt; interperet interpreter program = runFreeVL program interpreter \u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u51c6\u5907\u597d\u4ee5\u6211\u4eec\u7684\u65b0\u5e7b\u60f3\u7f16\u5199\u7a0b\u5e8f\u514d\u8d39\u7684\u5355\u5b50\u3002\u6211\u4eec\u9700\u8981\u6784\u5efa\u5177\u6709\u4efb\u610f\u6548\u679c\u5806\u6808\u7684\u7a0b\u5e8f\uff0c\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u4ece EffectStack \u4e2d\u63d0\u53d6\u6548\u679c\u5e76\u4f7f\u7528\u5b83\u7684\u65b9\u6cd5\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u4e00\u70b9\uff0c\u6211\u4ece haskell-servant \u7684 Julian Arni \u90a3\u91cc\u501f\u7528\u4e86\u4e00\u4e2a\u6280\u5de7\uff08\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u4ed6\u7684\u4ee3\u7801\uff09\u3002\u672c\u8d28\u4e0a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff0c\u5b83\u80fd\u591f\u5728 EffectStack \u4e2d\u6293\u53d6 HList \u5e76\u641c\u7d22\u6211\u4eec\u60f3\u8981\u7684\u6548\u679c\uff0c\u7136\u540e\u8fd4\u56de\u5b83\u3002 &gt; -- \u5b9a\u4e49\u4e00\u4e2a\u7c7b\u578b\u7c7b\uff0c\u53ea\u6709\u5728\u6709\u67d0\u79cd\u6548\u679c\u65f6\u624d\u4f1a\u7f16\u8bd1&gt; -- \u5b58\u5728\u4e8e\u6808\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de\u3002&gt; class HasEffect (effects :: [((* -&gt; *) -&gt; *)]) (effect :: ((* -&gt; *) -&gt; *)) where&gt; getEffect :: EffectStack effects m -&gt; effect m&gt; &gt; -- \u8ba9\u6211\u4eec\u63d0\u4f9b\u4e00\u4e9b`HasEffect`\u7684\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u722c\u884cEffectStack\u770b&gt; -- \u5bf9\u4e8e\u5339\u914d\u7136\u540e\u8fd4\u56de\u7684\u6548\u679c\u3002&gt; &gt; -- \u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u5904\u7406\u6211\u4eec\u7684\u6548\u679c\u7c7b\u578b\u4e0e HList \u7684 &gt; -- \u5934\u90e8\u4e0d\u5339\u914d\u5e76\u8fdb\u4e00\u6b65\u9012\u5f52\u7684\u60c5\u51b5\u3002&gt; \u5b9e\u4f8b {-# OVERLAPPABLE #- }&gt; HasEffect effects effect =&gt; HasEffect (notIt &#39;: effects) effect where&gt; getEffect (ConsEffect _ effects) = getEffect effects&gt; &gt; -- \u8fd9\u4e2a\u5b9e\u4f8b\u5339\u914d\u6211\u4eec\u7684&#39;effect&#39;\u7c7b\u578b\u5339\u914dhead\u7684\u60c5\u51b5&gt; -- HList\u7684.\u7136\u540e\u6211\u4eec\u8fd4\u56de\u90a3\u4e2a\u6548\u679c\u3002&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect (effect &#39;: effects) effect where&gt; getEffect (ConsEffect effect _) = effect \u90a3\u4e9b\u7c7b\u578b\u7c7b\u53ef\u80fd\u4f1a\u8ba9\u4f60\u6709\u70b9\u60f3\u6b6a\u4e86\uff08\u4ed6\u4eec\u80af\u5b9a\u4f1a\u6b6a\u66f2\u6211\u7684\uff09 \uff0c\u4f46\u5982\u679c\u4f60\u81ea\u5df1\u5199\uff08\u6211\u9f13\u52b1\u4f60\u8fd9\u6837\u505a\uff09\uff0c\u4f60\u5c31\u4f1a\u638c\u63e1\u5b83\u7684\u7a8d\u95e8\u3002 \uff08PS - \u6211\u6c38\u8fdc\u611f\u8c22\u6731\u5229\u5b89\u7684\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u592a\u65b9\u4fbf\u4e86\uff01\uff09\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u9009\u62e9\u6548\u679c\u7684\u5de5\u5177\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u7f16\u5199\u7ec4\u5408\u5668\uff0c\u8ba9\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u4efb\u610f\u6548\u679c\u5806\u6808\u7f16\u5199\u7a0b\u5e8f\u3002 &gt; -- \u5c06\u64cd\u4f5c\u63d0\u5347\u5230 van Laarhoven Free Monad&gt;liftVL :: HasEffect \u6548\u679c\u6548\u679c&gt; -- ^ \u7ea6\u675f\u5f3a\u5236\u6211\u4eec\u7684\u6548\u679c\u5728\u6548\u679c\u5806\u6808\u4e2d&gt; =&gt; (forall m. effect m -&gt; ma)&gt; -- ^ \u65b9\u6cd5\u4ece\u6211\u4eec\u7684\u6548\u679c\u4e2d\u63d0\u53d6\u6211\u4eec\u7684\u64cd\u4f5c\u3002&gt; -&gt; FreeVL effects a&gt;liftVL getOp = FreeVL (\\effects -&gt; getOp (getEffect effects)) \u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u7528\u6237\u4ee3\u7801\u3002\u6211\u4eec\u5c06\u4ece\u5b9a\u4e49\u4e09\u4e2a\u6548\u679c\u5f00\u59cb\uff1a &gt; -- HTTP Effect&gt; data Http m =&gt; Http { getHttpEff :: Url -&gt; m (Either Int (Response ByteString))&gt; , postHttpEff :: Url -&gt; RequestBody -&gt; m (\u8981\u4e48 Int (Response ByteString))&gt; }&gt; &gt; -- Logging Effect&gt; data Logging m = Logging { logEff :: String -&gt; m () }&gt; &gt; -- \u968f\u673a\u6570\u6548\u5e94&gt; data Random m = Random { getRandEff :: m Int }&gt; &gt; -- suspend effect&gt; data Suspend m = Suspend { suspendEff :: Int -&gt; m () } \u73b0\u5728\u6765\u770b\u4e00\u4e9b\u4ee3\u7801\u3002\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u6548\u679c\u4e2d\u7684\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u7f16\u5199\u7ec4\u5408\u5b50\u3002 &gt; getHttp :: HasEffect \u6548\u679c Http&gt; =&gt; Url&gt; -&gt; FreeVL \u6548\u679c (Either Int (Response ByteString))&gt; getHttp url =liftVL (`getHttpEff` url)&gt; &gt; postHttp :: HasEffect \u6548\u679c Http&gt; =&gt; Url&gt; -&gt; RequestBody&gt; -&gt; FreeVL \u6548\u679c\uff08Either Int (Response ByteString))&gt; postHttp url body = liftVL (\\http -&gt; postHttpEff http url body)&gt; &gt; logMsg :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; FreeVL effects ()&gt; logMsg msg = LiftVL (`logEff` msg)&gt; &gt; getRand :: HasEffect \u6548\u679c\u968f\u673a&gt; =&gt; FreeVL \u6548\u679c Int&gt; getRand = LiftVL getRandEff&gt; &gt; \u6682\u505c :: HasEffect \u6548\u679c Suspend&gt; =&gt; Int&gt; -&gt; FreeVL \u6548\u679c ()&gt; \u6682\u505ci = liftVL (`suspendEff` i) \u6709\u4e86\u8fd9\u4e9b\u7ec4\u5408\u5668\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u7a0b\u5e8f\u4e86\uff01\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u53d1\u51fa\u4e00\u4e2a\u7f51\u7edc\u8bf7\u6c42\uff0c\u5982\u679c\u5931\u8d25\uff0c\u5219\u6682\u505c 100 \u6beb\u79d2\u5e76\u91cd\u8bd5\u3002\u5b83\u5c06\u91cd\u8bd5\u968f\u673a\u6b21\u6570\u3002\n&gt; repeatReq :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; )&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; repeatReq url = do&gt; numRetries &lt;- (flip mod 10) ) getRand&gt; eResponse &lt;- getHttp url&gt; go numRetries eResponse&gt; where&gt; go 0 r = return r&gt; go i _ = do&gt; eResponse &lt;- getHttp url&gt; case eResponse of&gt; r@(Right _) -&gt; return r&gt; l @(Left _) -&gt; suspend 100 &gt;&gt; go (i-1) eResponse &gt; withLog :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; String&gt; -&gt; FreeVL effects a&gt; -&gt; FreeVL effects a&gt; withLog preMsg postMsg program = do&gt; logMsg preMsg&gt; a &lt;- program&gt; logMsg postMsg&gt; return a \u6700\u540e\uff0c\u8ba9\u6211\u5411\u60a8\u5c55\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u6211\u4eec\u4e4b\u524d\u7684 repeatReq \u4ee3\u7801\u4e0e\u65e5\u5fd7\u8bb0\u5f55\u548c\u63d0\u4f9b url \u4e00\u8d77\u5305\u88c5\u6765\u7ec4\u5408\u4efb\u610f\u7a0b\u5e8f\u548c\u6548\u679c\u5806\u6808\u3002 &gt; -- \u8ba9\u6211\u4eec\u7ed3\u5408\u4e00\u4e9b\u7a0b\u5e8f&gt; program :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; , HasEffect effects Logging&gt; )&gt; =&gt; FreeVL effects (Either Int (Response ByteString))&gt; program = withLog &quot;\u8fd0\u884c\u8bf7\u6c42\uff01\u201d \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u5220\u9664\u8fd9\u4e9b\u7ea6\u675f\u4e4b\u4e00\uff08\u4f8b\u5982 Suspend\uff09\uff0c\u60a8\u5c06\u6536\u5230\u4e00\u4e2a\u7f16\u8bd1\u9519\u8bef\uff1a01.lhs:313:49:Could not deduce (HasEffect effects Suspend ) \u4ece\u4e0a\u4e0b\u6587\uff08HasEffect \u6548\u679c Http\u3001HasEffect \u6548\u679c\u968f\u673a\u3001HasEffect \u6548\u679c\u8bb0\u5f55\uff09\u4e2d\u4f7f\u7528 &#39;repeatReq&#39; \u4ea7\u751f\uff0c\u7531\u7a0b\u5e8f\u7684\u7c7b\u578b\u7b7e\u540d\u7ea6\u675f ::\uff08HasEffect \u6548\u679c Http\u3001HasEffect \u6548\u679c\u968f\u673a\u3001HasEffect \u6548\u679c\u8bb0\u5f55\uff09=&gt; FreeVL effects (Maybe (Response ByteString)) at 01.lhs:(308,14)-(312,57) \u5728 &#39;withLog&#39; \u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373 &#39;(repeatReq &quot;http://aaronlevin.ca&quot;)&#39; \u4e2d\u8868\u8fbe\uff1a withLog &quot;\u6b63\u5728\u8fd0\u884c\u7684\u8bf7\u6c42\uff01&quot; \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u5728 &#39;program&#39; \u7684\u7b49\u5f0f\u4e2d\uff1a program = withLog &quot;running request!&quot; \u201c\u5b8c\u6bd5\uff01\u201d (repeatReq &quot;http://aaronlevin.ca&quot;) \u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u4e00\u4e9b\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u63d0\u4f9b\u4e00\u4e9b\u89e3\u91ca\u5668\u3002\u6211\u4eec\u5c06\u63d0\u4f9b IO \u4e2d\u7684\u4e3b\u8981\u89e3\u91ca\u5668\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u7ec3\u4e60\u7559\u7ed9\u8bfb\u8005\u6765\u521b\u5efa\u4e00\u4e2a\u7eaf\u7cb9\u7684\u89e3\u91ca\u5668\u3002\n\u56de\u60f3\u4e00\u4e0b van Laarhoven Free Monad \u4e2d\u7684\u89e3\u91ca\u5668\u53ea\u662f\u4e00\u4e2a effect m \u7c7b\u578b\u7684\u503c\u3002\u540c\u6837\uff0c\u5728\u6548\u679c\u5806\u6808\u7248\u672c\u4e2d\uff0c\u5b83\u662f\u4e00\u4e2a EffectStack \u6548\u679c m \u7c7b\u578b\u7684\u503c\uff0c\u5b83\u53ea\u662f\u6211\u4eec\u6548\u679c\u7684 HList\u3002 &gt; -- \u4e00\u4e2a\u4f7f\u521b\u5efa HList \u5728\u8bed\u6cd5\u4e0a\u66f4\u597d\u7684\u7ec4\u5408\u5668\u3002&gt; (.:.) :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m&gt; effect .:. effects = ConsEffect effect effects&gt; infixr 4 .:.&gt; &gt; -- \u89e3\u91caIO\u4e2d\u7684http\u52a8\u4f5c&gt; handleExcep :: HttpException -&gt; Each Int a&gt; handleExcep (StatusCodeException status _ _) = Left (S.statusCode status)&gt; handleExcep _ =\u9519\u8bef\u201c\u672a\u5904\u7406\u7684 HttpException\u201d&gt; &gt; httpIO :: Http IO&gt; httpIO =&gt; Http { getHttpEff = \\req -&gt; (Right get req) `catch` (return .handleExcep)&gt; , postHttpEff = \\req body -&gt; (Right post req body) `catch` (return .handleExcep)&gt; }&gt; &gt; -- \u89e3\u91ca IO \u4e2d\u7684\u65e5\u5fd7\u64cd\u4f5c&gt; logIO :: Logging IO&gt; logIO = Logging { logEff = putStrLn }&gt; &gt; -- IO \u4e2d\u7684\u968f\u673a\u6570\u751f\u6210\u5668&gt; randIO :: Random IO&gt; randIO = Random { getRandEff = randomIO }&gt; &gt; -- \u5728IO\u4e2d\u6682\u505c&gt; suspendIO :: Suspend IO&gt; suspendIO = Suspend { suspendEff = threadDelay }&gt; &gt; -- \u6211\u4eec\u7684\u6548\u679c\u6808&gt; type MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: Suspend &#39;: &#39;[] )&gt; &gt; -- \u6211\u4eec\u7684\u89e3\u91ca\u5668&gt; ioInterpreter :: EffectStack MyEffects IO&gt; ioInterpreter = httpIO .:.\u65e5\u5fd7IO .:.\u968f\u673a\u6570 .:.\u6682\u505cIO .:. EmptyEffect \u5e0c\u671b\u73b0\u5728\u60a8\u5df2\u7ecf\u786e\u4fe1\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u6211\u4eec\u7684\u76ee\u6807\uff1a\u6211\u4eec\u53ef\u4ee5\u5728 Haskell \u4e2d\u9488\u5bf9\u6548\u679c\u8fdb\u884c\u7f16\u7a0b\uff0c\u5c31\u50cf\u6211\u4eec\u4f7f\u7528 Idris \u548c PureScript \u7f16\u7a0b\u7684\u540c\u5fd7\u4e00\u6837\uff08\u6211\u8bf4\u8fd9\u5b8c\u5168\u662f\u534a\u5f00\u73a9\u7b11\uff09\u3002\u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u4efb\u610f\u6548\u679c\u5806\u6808\u5e76\u4ee5\u6211\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u65b9\u5f0f\u7ec4\u5408\u89e3\u91ca\u5668\uff08\u53ea\u8981\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684 monad\uff09\u3002\u8c03\u67e5\u7a0b\u5e8f\u5206\u6790\u3002 van Laarhoven Free Monad \u53ea\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u4e3a\u5b83\u63d0\u4f9b\u4e00\u4e2a\u4e3a\u7a0b\u5e8f\u6216\u9759\u6001\u5206\u6790\u6784\u5efa\u7684\u6548\u679c\u5806\u6808\u5417\uff1f", "note_en": "Algebraic effects seem to be a sort of holy grail in functional programming. What I mean when I say \u201calgebraic effect\u201d here is: treating any effect like a value or type in your program, while also having some simple operations (an algebra) to combine effects.\n What does this look like practically? The two languages that come to mind are  Idris and  PureScript. When you program using their Effects support, you write monadic code, but essentially have a list of effects you can pull from the environment: logging, state, IO, etc. Further, you can program against a stack of effects, only assuming the ones you need are present, allowing us to arbitrarily grow that effect stack as needed. It\u2019s very nice.\n Unfortunately we don\u2019t have access to these tools in Haskell. Instead, haskellers usually rely on  mtl or  Free Monads.\n What I want to present today is an Effects library close to that of Idris and PureScript using the  van Laarhoven encoded Free Monad armed with a Heterogeneous List (HList) of effects. I claim this has some of the benefits of Effect tooling in Idris and PureScript, the same expressiveness of regular Free Monads, a more performant encoding than Church, Fused, or Oleg encodings, and only costs us a few extensions. All in about  60 lines of code.\n   -- | we use the explicit `liftVL` combinator for illustrative purposes.-- in real code you&#39;d have your own combinators.-- Make a post requestpostReq :: HasEffect effects Http =&gt; Url -&gt; RequestBody -&gt; FreeVL effects StatusCodepostReq url body = do resp &lt;- liftVL (\\http -&gt; put http url body) return (statusCode resp)-- take any arbitrary free monad and wrap it with loggingwithLog :: HasEffect effects Logging =&gt; String -&gt; String -&gt; FreeVL effects a -&gt; FreeVL effects awithLog preMsg postMsg program = do liftVL (\\log -&gt; infoLogger log preMsg) a &lt;- program liftVL (\\log -&gt; infoLogger log postMsg) return a-- a concrete list of effects used to define an interpretertype MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: State &#39;: &#39;[] )-- an interpreter as a valueioInterpreter :: Effects MyEffects IOioInterpreter = httpIO .: loggerIO .: randomIO .: stateIO .: EmptyEffect-- actually running our programmain :: IO ()main = interpret ioInterpreter (withLog &#34;POST!&#34; &#34;phew! made it!&#34; (postReq &#34;https://weirdcanada.com&#34; &#34;rare=cool&#34;) )\n The only part that\u2019s missing from the above is what our effects ( Http,  Logger, etc.) look like. Here is an example:\n -- the HTTP effectdata Http m = Http { get :: Url -&gt; m Response , put :: Url -&gt; RequestBody -&gt; m Response -- etc. }-- the Logging effectdata Logging m = Logging { infoLogger :: String -&gt; m (), debugLogger :: String -&gt; m ()-- etc.}\n The rest of this post is written in literate haskell. I encourage you to cut-and-paste this code and play with it yourself! To start, let\u2019s get some extensions and imports out of the way!\n &gt; {-# LANGUAGE DataKinds #-}&gt; {-# LANGUAGE FlexibleContexts #-}&gt; {-# LANGUAGE FlexibleInstances #-}&gt; {-# LANGUAGE GADTs #-}&gt; {-# LANGUAGE KindSignatures #-}&gt; {-# LANGUAGE MultiParamTypeClasses #-}&gt; {-# LANGUAGE PolyKinds #-}&gt; {-# LANGUAGE RankNTypes #-}&gt; {-# LANGUAGE TypeOperators #-}&gt; &gt; module Main where&gt; &gt; import Control.Arrow ((&amp;&amp;&amp;))&gt; import Control.Concurrent (threadDelay)&gt; import Control.Exception (catch)&gt; import Control.Lens ((^.))&gt; import Data.ByteString.Lazy (ByteString)&gt; import Network.Wreq (get, post, Response, responseStatus, statusCode)&gt; import Network.HTTP.Client (HttpException(StatusCodeException))&gt; import qualified Network.HTTP.Types.Status as S&gt; import System.Random (randomIO)\n  I refer you to Russell O&#39;Connor\u2019s great  blog post on the van Laarhoven Free Monad. It\u2019s a short and succinct read. In some sense, the van Laarhoven Free Monad is dual to the usual one; instead of using a  sum type to model operations we use a  product.\n  &gt; -- type aliases to make this look like real code.&gt; type Url = String&gt; type RequestBody = ByteString&gt; &gt; -- old-fashioned free monad encoding&gt; data Free effect a = Pure a&gt; | Free (effect (Free effect a))&gt; &gt; -- example http effect: using Strings to represent urls and responses for brevity&gt; data YeOldeHttp a = Get Url (Response ByteString -&gt; a)&gt; | Post Url RequestBody (Response ByteString -&gt; a)&gt; &gt; -- example interpreter&gt; freeIOInterp :: Free YeOldeHttp a -&gt; IO a&gt; freeIOInterp (Pure a) = return a&gt; freeIOInterp (Free (Get url next)) = get url &gt;&gt;= freeIOInterp . next&gt; freeIOInterp (Free (Post url body next)) = post url body &gt;&gt;= freeIOInterp . next&gt; &gt; -- example combinator&gt; oldGet :: Url -&gt; Free YeOldeHttp (Response ByteString)&gt; oldGet url = Free (Get url Pure)\n Given an effect, which is itself a sum-type (each branch a different operation (e.g.  Get,  Put)) we can show that  Free YeOldHttp a is a monad (see  Gabriel\u2019s blog post for more) and write interpreters against it, supplying it with the right semantics. The great part about Free Monads is that we can write different interpreters, each for their own specific use (testing, production, debugging, etc.).\n Now, the van Laarhoven Free Monad is a different encoding, and requires you to represent effects as  products instead of  sums. The above example is equivalent to:\n &gt; -- (simple) van Laarhoven Free Monad encoding&gt; newtype FreeVL1 effect a =&gt; FreeVL1 { runFreeVL1 :: forall m. Monad m =&gt; effect m -&gt; m a }&gt; &gt; -- example Http effect&gt; data NewHttp m =&gt; NewHttp { getNewHttp :: Url -&gt; m (Response ByteString)&gt; , postNewHttp :: Url -&gt; RequestBody -&gt; m (Response ByteString)&gt; }&gt; &gt; -- example interpreter&gt; newHttpIO :: NewHttp IO&gt; newHttpIO = NewHttp { getNewHttp = get, postNewHttp = post }&gt; &gt; freeVL1IOInterpreter :: FreeVL1 NewHttp a -&gt; IO a&gt; freeVL1IOInterpreter program = runFreeVL1 program newHttpIO&gt; &gt; -- example combinator&gt; newGet :: Url -&gt; FreeVL1 NewHttp (Response ByteString)&gt; newGet url = FreeVL1 (\\httpEffects -&gt; getNewHttp httpEffects url)\n The nice thing about  FreeVL1 is it\u2019s just a function. To  interpret a program written in  FreeVL1 NewHttp a requires us only to provide a value of type  NewHttp m as demonstrated above. This means that writing programs against  FreeVL1 NewHttp a will have the same runtime cost as function composition or the Reader monad. Contrast this to the regular encoding of  Free which performs horrendously under binds (it\u2019s basically a fancy linked list of operations). We can use the  Church-encoding to improve this substantially, but it has other trade offs as well.\n Now, the downside of the simple van Laarhoven encoding is that we only have one effect at a time. Let\u2019s see how we can improve that!\n  Our motivation now is to create new effects (for example, instead of just  Http perhaps we want logging, random numbers, etc.) and combine them. One way of doing this in the traditional Free Monad encoding is to use co-products (see blog post  here). Since each effect is a Functor, and Co-Products of Functors is still a Functor, this is technically possible. However, it makes pulling effects out of the stack and writing and combining interpreters finnicky.\n In the van Laarhoven encoding, our effect is already a product type. What we want is to be able to add more \u201cfields\u201d to our effect. For example, if we could add the field  log :: String -&gt; m (), that would be almost like adding a logger to our effect stack!\n An equivalent way of adding fields would be to create a Heterogeneous list of effects! If instead of \u201cmultiplying\u201d our effect products we appended them to a heterogeneous list, then we\u2019ve got a way to add more effects that is isomorphic to adding more fields.\n Let us design such an  HList and show how this empowers us to extend the previous van Laarhoven encoding!\n &gt; -- | our HList of effects&gt; -- note that as per the van Laarhoven encoding, our effects are parameterized&gt; -- by a monad m.&gt; data EffectStack a (m :: * -&gt; *) where&gt; EmptyEffect :: EffectStack &#39;[] m&gt; ConsEffect :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m\n EffectStack now contains an arbitrary list of effects, each one paramaterized by  m. We are now ready to define the stack-driven van Laarhoven Free Monad:\n &gt; -- van Laarhoven Free Monad with Effect Stacks encoding&gt; newtype FreeVL effects a =&gt; FreeVL { runFreeVL :: forall m. Monad m =&gt; EffectStack effects m -&gt; m a }&gt; &gt; -- Yes, it is a monad&gt; instance Functor (FreeVL effects) where&gt; fmap f (FreeVL run) = FreeVL (fmap f . run)&gt; &gt; instance Applicative (FreeVL effects) where&gt; pure a = FreeVL (const (pure a))&gt; (FreeVL fab) (FreeVL a) =&gt; FreeVL $ uncurry () . (fab &amp;&amp;&amp; a)&gt; &gt; instance Monad (FreeVL effects) where&gt; (FreeVL run) &gt;&gt;= f =&gt; FreeVL $ \\effects -&gt; run effects &gt;&gt;= \\a -&gt; runFreeVL (f a) effects\n  &gt; -- interpret a van Laarhoven Free Monad with Effect Stacks&gt; interperet :: Monad m&gt; =&gt; EffectStack effects m&gt; -&gt; FreeVL effects a&gt; -&gt; m a&gt; interperet interpreter program = runFreeVL program interpreter\n Unfortunately we are not quite ready to write programs in our new fancy Free Monad. We need to construct programs with arbitrary effect stacks, and for that, we need a way to pull an effect from  EffectStack and use it.\n To achieve this I borrowed a trick from Julian Arni of  haskell-servant (you can see his code  here). Essentially, we create a typeclass capable of crawling the HList in  EffectStack and search for the effect we want, and then return it.\n &gt; -- define a type class that will only compile if a certain effect is&gt; -- present in the stack, and if it is present, return it.&gt; class HasEffect (effects :: [((* -&gt; *) -&gt; *)]) (effect :: ((* -&gt; *) -&gt; *)) where&gt; getEffect :: EffectStack effects m -&gt; effect m&gt; &gt; -- Let&#39;s provide some instances of `HasEffect` that can crawl EffectStack looking&gt; -- for an effect that matches and then return it.&gt; &gt; -- this first instances handles the case where our effect type doesn&#39;t match the &gt; -- head of the HList and recurses further.&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect effects effect =&gt; HasEffect (notIt &#39;: effects) effect where&gt; getEffect (ConsEffect _ effects) = getEffect effects&gt; &gt; -- this instance matches the case where our &#39;effect&#39; type matches the head&gt; -- of the HList. we then return that effect.&gt; instance {-# OVERLAPPABLE #-}&gt; HasEffect (effect &#39;: effects) effect where&gt; getEffect (ConsEffect effect _) = effect\n Those typeclasses will likely bend your mind a little (they most certainly bent mine), but if you write it our yourself (which I encourage you to do) you kind of get the hang of it. (PS - I\u2019m forever grateful to Julian for this idea because it\u2019s so handy!)\n Now that we have tooling to pick our effects, we can start writing combinators that will allow us to write programs against an arbitrary effect stack.\n &gt; -- lift operations into the van Laarhoven Free Monad&gt; liftVL :: HasEffect effects effect&gt; -- ^ constraint enforcing that our effect is in the effect stack&gt; =&gt; (forall m. effect m -&gt; m a)&gt; -- ^ method to pull our operation from our effect.&gt; -&gt; FreeVL effects a&gt; liftVL getOp = FreeVL (\\effects -&gt; getOp (getEffect effects))\n  Let\u2019s write some user code. We\u2019ll start by defining three effects:\n &gt; -- HTTP Effect&gt; data Http m =&gt; Http { getHttpEff :: Url -&gt; m (Either Int (Response ByteString))&gt; , postHttpEff :: Url -&gt; RequestBody -&gt; m (Either Int (Response ByteString))&gt; }&gt; &gt; -- Logging Effect&gt; data Logging m = Logging { logEff :: String -&gt; m () }&gt; &gt; -- random number effect&gt; data Random m = Random { getRandEff :: m Int }&gt; &gt; -- suspend effect&gt; data Suspend m = Suspend { suspendEff :: Int -&gt; m () }\n Now for some code. Let\u2019s write combinators for each operator in each effect.\n &gt; getHttp :: HasEffect effects Http&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; getHttp url = liftVL (`getHttpEff` url)&gt; &gt; postHttp :: HasEffect effects Http&gt; =&gt; Url&gt; -&gt; RequestBody&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; postHttp url body = liftVL (\\http -&gt; postHttpEff http url body)&gt; &gt; logMsg :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; FreeVL effects ()&gt; logMsg msg = liftVL (`logEff` msg)&gt; &gt; getRand :: HasEffect effects Random&gt; =&gt; FreeVL effects Int&gt; getRand = liftVL getRandEff&gt; &gt; suspend :: HasEffect effects Suspend&gt; =&gt; Int&gt; -&gt; FreeVL effects ()&gt; suspend i = liftVL (`suspendEff` i)\n With these combinators we can write programs! Let\u2019s write a program that makes a web-request and if it fails, suspends for 100ms and retries. It will retry a random number of times.\n &gt; repeatReq :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; )&gt; =&gt; Url&gt; -&gt; FreeVL effects (Either Int (Response ByteString))&gt; repeatReq url = do&gt; numRetries &lt;- (flip mod 10) getRand&gt; eResponse &lt;- getHttp url&gt; go numRetries eResponse&gt; where&gt; go 0 r = return r&gt; go i _ = do&gt; eResponse &lt;- getHttp url&gt; case eResponse of&gt; r@(Right _) -&gt; return r&gt; l@(Left _) -&gt; suspend 100 &gt;&gt; go (i-1) eResponse\n  &gt; withLog :: HasEffect effects Logging&gt; =&gt; String&gt; -&gt; String&gt; -&gt; FreeVL effects a&gt; -&gt; FreeVL effects a&gt; withLog preMsg postMsg program = do&gt; logMsg preMsg&gt; a &lt;- program&gt; logMsg postMsg&gt; return a\n And finally, let me show you that we can combine arbitrary programs and effect stacks by wrapping our previous  repeatReq code with logging and supplying a url.\n &gt; -- let&#39;s combine some programs&gt; program :: ( HasEffect effects Http&gt; , HasEffect effects Random&gt; , HasEffect effects Suspend&gt; , HasEffect effects Logging&gt; )&gt; =&gt; FreeVL effects (Either Int (Response ByteString))&gt; program = withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;)\n Note that if you remove one of those constraints (like  Suspend for example), you will get a compile error:\n 01.lhs:313:49: Could not deduce (HasEffect effects Suspend) arising from a use of \u2018repeatReq\u2019 from the context (HasEffect effects Http, HasEffect effects Random, HasEffect effects Logging) bound by the type signature for program :: (HasEffect effects Http, HasEffect effects Random, HasEffect effects Logging) =&gt; FreeVL effects (Maybe (Response ByteString)) at 01.lhs:(308,14)-(312,57) In the third argument of \u2018withLog\u2019, namely \u2018(repeatReq &#34;http://aaronlevin.ca&#34;)\u2019 In the expression: withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;) In an equation for \u2018program\u2019: program = withLog &#34;running request!&#34; &#34;done!&#34; (repeatReq &#34;http://aaronlevin.ca&#34;)\n  Now that we\u2019ve written some programs, we need to supply some interpreters. We\u2019ll supply the main interpreter in  IO and leave it as an exercise to the reader to create a pure one.\n Recall that an interpreter in the van Laarhoven Free Monad is just a value of type  effect m. Similarly, in the effect stack version, it\u2019s a value of type  EffectStack effects m, which is just an HList of our effects.\n &gt; -- a combinator to make creating HLists syntactically nicer.&gt; (.:.) :: effect m -&gt; EffectStack effects m -&gt; EffectStack (effect &#39;: effects) m&gt; effect .:. effects = ConsEffect effect effects&gt; infixr 4 .:.&gt; &gt; -- interpret http actions in IO&gt; handleExcep :: HttpException -&gt; Either Int a&gt; handleExcep (StatusCodeException status _ _) = Left (S.statusCode status)&gt; handleExcep _ = error &#34;unhandled HttpException&#34;&gt; &gt; httpIO :: Http IO&gt; httpIO =&gt; Http { getHttpEff = \\req -&gt; (Right get req) `catch` (return . handleExcep)&gt; , postHttpEff = \\req body -&gt; (Right post req body) `catch` (return . handleExcep)&gt; }&gt; &gt; -- interpret logging actions in IO&gt; logIO :: Logging IO&gt; logIO = Logging { logEff = putStrLn }&gt; &gt; -- random number generator in IO&gt; randIO :: Random IO&gt; randIO = Random { getRandEff = randomIO }&gt; &gt; -- suspend in IO&gt; suspendIO :: Suspend IO&gt; suspendIO = Suspend { suspendEff = threadDelay }&gt; &gt; -- our effect stack&gt; type MyEffects = ( Http &#39;: Logging &#39;: Random &#39;: Suspend &#39;: &#39;[] )&gt; &gt; -- our interpreter&gt; ioInterpreter :: EffectStack MyEffects IO&gt; ioInterpreter = httpIO .:. logIO .:. randIO .:. suspendIO .:. EmptyEffect\n    Hopefully by now you\u2019ve been convinced that we\u2019ve achieved our goal: we can program against effects in Haskell just like our comrades programming with Idris and PureScript (I say this fully tongue-in-cheek). Further, we can provide arbitrary effect stacks and combine interpreters in whatever way we want (so long as they share the same monad).\n  investigate program analysis. The van Laarhoven Free Monad is just a function, but can we supply it with an effect stack built for program or static analysis?", "posttime": "2021-07-29 21:55:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "laarhoven,effects,gt", "title": "van Laarhoven Free Monad \u4e2d\u7684\u53ef\u6269\u5c55\u6548\u679c", "title_en": "Extensible Effects in the van Laarhoven Free Monad", "transed": 1, "url": "https://aaronlevin.ca/post/136494428283/extensible-effect-stacks-in-the-van-laarhoven-free", "via": "", "real_tags": ["laarhoven", "effects", "gt"]}]