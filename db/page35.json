[{"category": "", "categoryclass": "", "imagename": "f08056feb87c4ea04cc205365e49149c.jpg", "infoid": 1068455, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Linux\u5185\u6838\u7684\u6700\u65b0\u66f4\u65b0\u7248\u672c5.13\u5df2\u88ab\u91ca\u653e\uff0c\u652f\u6301Apple Silicon\u7cfb\u7edf\u7684M1\u3002\n  \u4ee5\u524d\u53ef\u4ee5\u4f5c\u4e3a\u516c\u5f00\u6d4b\u8bd5\u7684\u5019\u9009\u4eba\u63d0\u4f9b\u7684\uff0cLinux 5.13\u7684\u6700\u7ec8\u7248\u672c\u5df2\u88ab\u91ca\u653e\u3002 Linus Torvolds\u5468\u4e00\u5ba3\u5e03\uff0c\u6700\u65b0\u7248\u672c\u88ab\u79f0\u4e3a\u7248\u672c5\u7cfb\u5217\u7684\u66f4\u5927\u7248\u672c\u4e4b\u4e00\uff0c\u8d85\u8fc72,000\u591a\u4e2a\u5f00\u53d1\u4eba\u5458\u63d0\u51fa\u4e86\u8d85\u8fc716,000\u4e2a\u63d0\u4ea4\u3002\n \u5bf9\u4e8eMac\u7528\u6237\uff0c\u5185\u6838\u7684\u5bc6\u94a5\u662f\u652f\u6301\u591a\u4e2a\u57fa\u4e8eARM\u7684\u82af\u7247\uff0c\u8fd9\u4ee4\u4eba\u9057\u61be\u5730\u5305\u62ecM1\u3002\u56e0\u6b64\uff0c\u65b0\u5185\u6838\u80fd\u591f\u5728Apple Silicon\u786c\u4ef6\u4e0a\u81ea\u7136\u5730\u8fd0\u884c\uff0c\u5305\u62ecM1 Mac Mini\u548c24\u82f1\u5bf8IMAC\u3002\n \u867d\u7136\u5305\u62ec\u4f7f\u7528M1\u7684\u80fd\u529b\uff0c\u4f46Phoronix\u62a5\u544a\u90a3\u91cc\uff06\uff0339; s\u8fd8\u6709\u66f4\u591a\u7684\u5de5\u4f5c\u8981\u505a\uff0c\u5305\u62ec\u4e3a\u52a0\u901f\u56fe\u5f62\u6dfb\u52a0\u652f\u6301\u3002\u5176\u4ed6\u66f4\u6539\u5305\u62ec\u5404\u79cd\u66f4\u65b0\u7684\u9a71\u52a8\u7a0b\u5e8f\uff0c\u4f53\u7cfb\u7ed3\u6784\u548c\u6587\u4ef6\u7cfb\u7edf\u6539\u8fdb\uff0c\u5e76\u66f4\u6539\u5904\u7406\u5904\u7406\u548c\u5de5\u5177\u3002\n  Linux 5.13\u4e0d\u662f\u4e0eM1\u5408\u4f5c\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u3002 1\u6708\u4efd\uff0cCorellium\u7684\u5b89\u5168\u7814\u7a76\u4eba\u5458\u5c06\u4e00\u4e2a\u7248\u672c\u7684Ubuntu\u5411\u82af\u7247\u79fb\u690d\u5230\u82af\u7247\u4e2d\uff0c\u4e00\u4e2a\u8fc7\u7a0b\u9700\u8981\u8bb8\u591a\u89e3\u51b3\u65b9\u6cd5\u6765\u8fdb\u5165\uff0c\u90e8\u5206\u539f\u56e0\u662f\u82f9\u679c\uff06\uff0339;\u7f3a\u4e4f\u5173\u4e8e\u82af\u7247\u5982\u4f55\u8fd0\u884c\u7684\u6587\u6863\u3002\n \u5728\u6bcf\u5468AppleInsider\u64ad\u5ba2\u4e2d\u8ddf\u4e0aApple  - \u5e76\u6bcf\u5929\u4eceAppleInsider\u83b7\u5f97\u5feb\u901f\u65b0\u95fb\u66f4\u65b0\u3002\u521a\u8bf4\uff0c\uff06\uff0334;\u563f\uff0c\u897f\u91cc\uff0c\uff06\uff0334;\u5230\u60a8\u7684HomePod Mini\u5e76\u8be2\u95ee\u8fd9\u4e9b\u64ad\u5ba2\uff0c\u4ee5\u53ca\u6211\u4eec\u6700\u65b0\u7684HomeKit Insider Enisode\u3002\n \u5982\u679c\u60a8\u60f3\u8981\u4e00\u4e2a\u514d\u8d39\u7684\u4e3b\u8981AppleInsider\u64ad\u5ba2\u4f53\u9a8c\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u82f9\u679c\uff06\uff0339; s vodcasts\u5e94\u7528\u7a0b\u5e8f\u8ba2\u96055\u7f8e\u5143\uff0c\u6216\u8005\u901a\u8fc7Patreon\u6765\u652f\u6301AppleInsider Podcast\uff0c\u5982\u679c\u60a8\u559c\u6b22\u4efb\u4f55\u5176\u4ed6\u64ad\u5ba2\u64ad\u653e\u5668\u3002 \nAppleInsider\u5df2\u7ecf\u63d0\u4ea4\u4f19\u4f34\u5173\u7cfb\uff0c\u53ef\u4ee5\u901a\u8fc7\u8054\u76df\u94fe\u63a5\u8d2d\u4e70\u7684\u4ea7\u54c1\u57f9\u8bad\u59d4\u5458\u4f1a\u3002 \u8fd9\u4e9b\u4f19\u4f34\u5173\u7cfb\u4e0d\u4f1a\u5f71\u54cd\u6211\u4eec\u7684\u7f16\u8f91\u5185\u5bb9\u3002 ", "note_en": "The newest update of the Linux kernel, version 5.13, has been released with support for the  Apple Silicon system-on-chip, the M1.\n  Previously available in May as a  release candidate for public testing, the final version of Linux 5.13 has been released.  Announced by Linus Torvolds on Monday, the newest version is said to be one of the bigger releases in the version 5 range, with over 16 thousand commits made by over 2 thousand developers.\n For Mac users, the key addition to the kernel is support for a number of ARM-based chips, which crucially includes the  M1. The new kernel is therefore able to be run natively on Apple Silicon hardware, including the M1  Mac mini and the  24-inch iMac.\n While the ability to use M1 is included,  Phoronix  reports there&#39;s still more work to be done, including adding support for accelerated graphics. Other changes include a variety of updated drivers, architecture and file system improvements, and changes to process handling and tooling.\n  Linux 5.13 is not the first version of the operating system that works with the M1. In January,  security researchers at Corellium ported a version of Ubuntu to the chip, a process that required  many workarounds to get going, in part due to Apple&#39;s lack of documentation on how the chip functioned.\n Keep up with everything Apple in the weekly AppleInsider Podcast \u2014 and get a fast news update from AppleInsider Daily. Just say, &#34;Hey, Siri,&#34; to your HomePod mini and ask for these podcasts, and our latest HomeKit Insider episode too.\n If you want an ad-free main AppleInsider Podcast experience, you can support the AppleInsider podcast by subscribing for $5 per month  through Apple&#39;s Podcasts app, or  via Patreon if you prefer any other podcast player.\n    AppleInsider has affiliate partnerships and may earn commission on products purchased through affiliate links. These partnerships do not influence our editorial content.", "posttime": "2021-06-29 22:37:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,apple,m1,\u5305\u62ec", "title": "Apple\u7684M1\u73b0\u5728\u7531Linux\u5185\u6838\u652f\u63015.13\u7248 ", "title_en": "Apple's M1 now supported by Linux kernel in version 5.13", "transed": 1, "url": "https://appleinsider.com/articles/21/06/28/apples-m1-now-supported-by-linux-kernel-in-version-513", "via": "", "real_tags": ["linux", "apple", "m1", "\u5305\u62ec"]}, {"category": "", "categoryclass": "", "imagename": "1211ef5539351580076fa3c978d11d20.png", "infoid": 1068454, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Winix\u662fWaikato RISC\u67b6\u6784\u5fae\u5904\u7406\u5668\uff08WROMP\uff09\u7684\u6700\u5c0f\uff0c\u7231\u597d\u8005\uff0c\u6559\u80b2\u548cUNIX\u98ce\u683c\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002 \u5b83\u662f\u4e00\u4e2a\u5177\u6709\u53ef\u7528\u6027\u548c\u8868\u73b0\u7684\u6df7\u5408\u5185\u6838\u3002 Winix\u4e3b\u8981\u7531Minix1\u542f\u53d1\uff0c\u8fd9\u662f\u6211\u5728\u5927\u5b66\u65f6\u5b66\u5230\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002  Winix\u5305\u62ec\u5177\u6709\u6d41\u7a0b\u548c\u5185\u5b58\u7ba1\u7406\uff0c\u5185\u5b58\u6587\u4ef6\u7cfb\u7edf\uff0c\u5f02\u5e38\u63a7\u5236\u548c\u7528\u6237\u7a7a\u95f4Bourne shell\u7684\u5168\u529f\u80fd\u5185\u6838\uff0c\u5177\u6709\u4ea4\u4e92\u5f0f\u547d\u4ee4\u884c\u3002 \u662f\u7684\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u884c\u4e2d\u952e\u5165\u86c7\u6765\u73a9\u86c7  \u7c7b\u4f3c\u4e8eLinux Kbuild\uff0cWinix\u652f\u6301verbose\u9009\u9879\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06verbose\u8bbe\u7f6e\u4e3a1\u6765\u8c03\u8bd5makefile  \u8ffd\u8e2a\uff1a\uff06\uff0334; \u5728Bash\u4e2d\u952e\u5165Trace\u4ee5\u5728\u4e32\u884c\u7aef\u53e32\u4e2d\u6253\u5370\u6240\u6709SYSCALL ", "note_en": "Winix is a minimal, hobbyist, educational and UNIX-style Operating System for the Waikato RISC Architecture Microprocessor (WRAMP). It is a hybrid kernel with usability and performance in mind. Winix is mainly inspired by Minix1, which is the OS I learnt when I was in university.\n Winix includes full-featured kernel with process and memory management, in-memory file system, exception control and user space bourne shell with interactive command line. Yes, you can even play snake on it by typing  snake in the command line\n                             Similar to linux kbuild,  Winix supports verbose option, you can debug Makefile by setting verbose to 1\n    trace: &#34; type trace in bash to print all the syscalls in serial port 2", "posttime": "2021-06-29 22:36:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u64cd\u4f5c\u7cfb\u7edf,years,\u5177\u6709", "title": "\u6211\u82b1\u4e865\u5e74\u5199\u81ea\u5df1\u7684\u64cd\u4f5c\u7cfb\u7edf ", "title_en": "I spent 5 years writing my own operating system", "transed": 1, "url": "https://github.com/halfer53/winix", "via": "", "real_tags": ["\u64cd\u4f5c\u7cfb\u7edf", "years", "\u5177\u6709"]}, {"category": "", "categoryclass": "", "imagename": "32953c5ed60201da5c5c3f840297db63.jpg", "infoid": 1068453, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u5173\u4e8eCovid-19\u8d77\u6e90\u7684\u4e3b\u6d41\u53d9\u4e8b\u5206\u5f00\uff0c\u73b0\u5728\u662f\u65f6\u5019\u5c06\u5176\u5b83\u5e7f\u6cdb\u63a5\u53d7\u7684\u4e8b\u5b9e\u7f6e\u4e8e\u75c5\u6bd2 - \u4ee5\u53ca\u4ed6\u4eec\u7528\u4e8e\u5408\u7406\u7684\u7834\u574f\u6027\u63aa\u65bd - \u5728\u540c\u6837\u7684\u5ba1\u67e5\u4e0b ", "note_en": "As the mainstream narrative about the origin of COVID-19 falls apart, it\u2019s time to put other widely accepted facts about the virus\u2014and the devastating measures they were used to justify\u2014under the same scrutiny", "posttime": "2021-06-29 22:36:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75c5\u6bd2,questions,\u5206\u5f00", "title": "\u66f4\u65b0\u6709\u5173\u75c5\u6bd2\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u96be\u4ee5\u9762\u5bf9\u7684\u7b54\u6848 ", "title_en": "Renewed questions about the virus, and hard-to-face answers", "transed": 1, "url": "https://www.tabletmag.com/sections/news/articles/the-war-on-reality-gutentag", "via": "", "real_tags": ["\u75c5\u6bd2", "questions", "\u5206\u5f00"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068452, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9f50\u68ee\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff0c\u4ee3\u7801\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u5e76\u901a\u8fc7\u5176\u5185\u5bb9\u6765\u8bc6\u522b\u3002 \u8fd9\u8ba9\u6211\u4eec\u6062\u590d\u4e86\u7f16\u7a0b\u8bed\u8a00\u5982\u4f55\u5de5\u4f5c\u7684\u8bb8\u591a\u65b9\u9762\u3002 \u6211\u4eec\u7b80\u5316\u4e86CodeBase Management  -  Unison\u6ca1\u6709\u6784\u5efa\uff0c\u6ca1\u6709\u4f9d\u8d56\u6027\u51b2\u7a81\uff0c\u5e76\u91cd\u547d\u540d\u4e8b\u7269\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002 \u540c\u4e00\u6838\u5fc3\u601d\u60f3\u6784\u6210\u4e86\u8fd0\u884c\u65f6\u5f3a\u5927\u652f\u6301\u52a8\u6001\u4ee3\u7801\u90e8\u7f72\u7684\u8fd0\u884c\u65f6\u7684\u57fa\u7840\uff0c\u5141\u8bb8\u5355\u4e00\u534f\u5b9a\u7684\u7a0b\u5e8f\u6765\u63cf\u8ff0\u6574\u4e2a\u5f39\u6027\u5206\u5e03\u5f0f\u7cfb\u7edf\u3002  \u867d\u7136\u9f50\u58f0\u9f50\u58f0\u4ecd\u7136\u662f\u5b9e\u9a8c\u6027\u548c\u6b63\u5728\u8fdb\u884c\u7684\uff0c\u4f46\u6211\u4eec\u6b63\u5728\u5206\u4eab\u65e9\u671f\u7684Alpha\u53d1\u5e03\u60a8\u7684\u8bed\u8a00\u4f9b\u60a8\u6d4b\u8bd5\u3002 \u6211\u4eec\u5c06\u5728\u5f88\u5feb\u63a8\u51fa\u4e00\u822c\u63d0\u4f9b\u66f4\u65b0\u7684\u91ca\u653e\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u6b22\u8fce\u4efb\u4f55\u4eba\u5e2e\u52a9alpha\u6d4b\u8bd5\u3002 ", "note_en": "Unison\u2019s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management \u2014 Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems.\n Though a lot of the work on Unison is still experimental and ongoing, we\u2019re sharing an early alpha release of the language for you to test out. We\u2019ll make a more finished release generally available soon. In the meantime, anyone is welcome to  help with alpha testing.", "posttime": "2021-06-29 22:36:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u7f16\u7a0b,\u9f50\u58f0,alpha", "title": "\u9f50\u58f0\u7f16\u7a0b\u8bed\u8a00 ", "title_en": "Unison Programming Language", "transed": 1, "url": "https://www.unisonweb.org/", "via": "", "real_tags": ["\u7f16\u7a0b", "\u9f50\u58f0", "alpha"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068451, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81eaOO\u9769\u547d\u6572\u95e8\u4ee5\u6765\uff0c\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u6700\u5927\u7684\u6d77\u6d0b\u53d8\u5316\uff0c\u5176\u540d\u79f0\u662f\u5e76\u53d1\u3002\n \u8fd9\u7bc7\u6587\u7ae0\u51fa\u73b0\u57282005\u5e743\u670830\u65e5\uff0c30\uff083\uff09\u5c81\u7684Journal\u535a\u58eb\u4e2d\u51fa\u73b0\u5728Title\uff06\uff0334\u4e0b\u7684\u4e00\u4e2a\u5f88\u591aBriefer\u7248\u672c;\u5e76\u53d1\u9769\u547d\u548c\uff0334;\u57282005\u5e742\u670823\u65e5\uff0c23\uff082\uff09\u4e2d\u51fa\u73b0\u5728C / C ++\u7528\u6237\u671f\u520a\u4e2d\u3002\n \u66f4\u65b0\u6ce8\u610f\uff1aCPU\u8d8b\u52bf\u56fe\u4e0a\u6b21\u66f4\u65b0\u4e862009\u5e748\u6708\u4ee5\u5305\u62ec\u5f53\u524d\r\u6570\u636e\u5e76\u663e\u793a\u8d8b\u52bf\u7ee7\u7eed\u5982\u9884\u6d4b\u3002\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\r\u5305\u62ec\u6240\u6709\u6587\u672c\u4ecd\u7136\u662f2004\u5e7412\u6708\u9996\u6b21\u53d1\u5e03\u7684\u539f\u59cb\u6587\u672c\u3002\n   \u60a8\u7684\u514d\u8d39\u5348\u9910\u5c06\u5f88\u5feb\u7ed3\u675f\u3002\u4f60\u80fd\u4e3a\u8fd9\u4e2a\u505a\u4ec0\u4e48\uff1f\u4f60\u5728\u505a\u4ec0\u4e48\uff1f\n \u4e3b\u8981\u7684\u5904\u7406\u5668\u5236\u9020\u5546\u548c\u67b6\u6784\uff0c\u4eceIntel\u548cAMD\u5230SPARC\u548cPowerPC\uff0c\u5927\u591a\u6570\u4f20\u7edf\u65b9\u6cd5\u90fd\u8017\u5c3d\u4e86\u4fc3\u8fdbCPU\u6027\u80fd\u7684\u7a7a\u95f4\u3002\u4ed6\u4eec\u4ee3\u66ff\u9a7e\u9a76\u65f6\u949f\u901f\u5ea6\u548c\u76f4\u7ebf\u6307\u4ee4\u541e\u5410\u91cf\uff0c\u800c\u662f\u8f6c\u5411enmasse\u5230\u8d85\u7ebf\u7a0b\u548c\u591a\u6838\u67b6\u6784\u3002\u8fd9\u4e24\u4e2a\u529f\u80fd\u90fd\u5728\u4eca\u5929\u7684\u82af\u7247\u4e0a\u63d0\u4f9b;\u7279\u522b\u662f\uff0cMulticore\u53ef\u5728\u5f53\u524dPowerPC\u548cSPARC IV\u5904\u7406\u5668\u4e0a\u63d0\u4f9b\uff0c\u5e76\u4e8e2005\u5e74\u4ece\u82f1\u7279\u5c14\u548cAMD\u63a8\u51fa\u3002\u5b9e\u9645\u4e0a\uff0c2004\u5e74IN-STAT / MDR\u79cb\u5b63\u5904\u7406\u5668\u8bba\u575b\u7684\u5927\u4e3b\u9898\u662f\u591a\u6838\u8bbe\u5907\uff0c\u56e0\u4e3a\u8bb8\u591a\u516c\u53f8\u90fd\u663e\u793a\u4e86\u65b0\u7684\u6216\u66f4\u65b0\u7684\u591a\u6838\u5904\u7406\u5668\u3002\u56de\u987e\u4e00\u4e0b\uff0c\u5b83\u5e76\u4e0d\u5927\u90e8\u5206\u5ef6\u4f38\u52302004\u5e74\u591a\u591c\u7684\u5e74\u3002\n \u8fd9\u8ba9\u6211\u4eec\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u4e00\u4e2a\u57fa\u672c\u8f6c\u6298\u70b9\uff0c\u81f3\u5c11\u5728\u672a\u6765\u51e0\u5e74\u5185\uff0c\u9488\u5bf9\u901a\u7528\u684c\u9762\u8ba1\u7b97\u673a\u548c\u4f4e\u7aef\u670d\u52a1\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u6070\u597d\u5360\u9500\u552e\u7684\u8f6f\u4ef6\u7684\u5e7f\u6cdb\u5927\u90e8\u5206\u7f8e\u5143\u4ef7\u503c\uff09\u4eca\u5929\uff09\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u751f\u75c5\u63cf\u8ff0\u4e86\u786c\u4ef6\u7684\u53d8\u5316\u9762\uff0c\u4e3a\u4ec0\u4e48\u5b83\u7a81\u7136\u5bf9\u8f6f\u4ef6\u6709\u5173\uff0c\u5e76\u5177\u4f53\u5eb7\u5168\u9769\u547d\u5bf9\u60a8\u7684\u4e8b\u9879\u6709\u4f55\u91cd\u8981\uff0c\u5e76\u5c06\u6539\u53d8\u60a8\u5c06\u6765\u53ef\u80fd\u662f\u5728\u672a\u6765\u7f16\u5199\u8f6f\u4ef6\u7684\u65b9\u5f0f\u3002\n \u53ef\u4ee5\u8bf4\uff0c\u81ea\u7531\u5348\u9910\u5df2\u7ecf\u8fc7\u4e86\u4e00\u4e24\u5e74\u6216\u4e24\u4e2a\u4eba\uff0c\u624d\u521a\u521a\u521a\u521a\u6ce8\u610f\u5230\u3002 \n\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u73b0\u8c61\uff0c\u88ab\u79f0\u4e3aAndy Giveth\u548cBill Taketh\u79bb\u5f00\u3002\u65e0\u8bba\u5904\u7406\u5668\u5982\u4f55\u5feb\u901f\uff0c\u8f6f\u4ef6\u4e00\u76f4\u53d1\u73b0\u65b0\u7684\u8fdb\u98df\u989d\u5916\u901f\u5ea6\u7684\u65b9\u6cd5\u3002\u5c06CPU\u901f\u5ea6\u5236\u4f5c\u5341\u500d\uff0c\u8f6f\u4ef6\u901a\u5e38\u4f1a\u627e\u5230\u5341\u500d\u7684\u65f6\u95f4\uff08\u6216\u8005\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4f1a\u611f\u5230\u81ea\u7531\uff0c\u4ee5\u4fbf\u6709\u6548\u5730\u51cf\u5c11\u5341\u500d\uff09\u3002\u5927\u591a\u6570\u9636\u6bb5\u7684\u5e94\u7528\u7a0b\u5e8f\u5df2\u7ecf\u4eab\u53d7\u4e86\u51e0\u5341\u5e74\u7684\u81ea\u7531\u548c\u5b9a\u671f\u7684\u6027\u80fd\u63d0\u5347\uff0c\u5373\u4f7f\u6ca1\u6709\u53d1\u5e03\u65b0\u7248\u672c\u6216\u505a\u4efb\u4f55\u7279\u6b8a\u7684\u4e1c\u897f\uff0c\u56e0\u4e3aCPU\u5236\u9020\u5546\uff08\u4e3b\u8981\uff09\u548c\u5185\u5b58\u548c\u78c1\u76d8\u5236\u9020\u5546\uff08\u5176\u6b21\uff09\u53ef\u9760\u5730\u542f\u7528\u4e86\u66f4\u65b0\uff0c\u66f4\u65b0\u4e3b\u6d41\u7cfb\u7edf\u3002\u65f6\u949f\u901f\u5ea6\u662f\u552f\u4e00\u7684\u6027\u80fd\u8861\u91cf\u6807\u51c6\uff0c\u751a\u81f3\u5fc5\u7136\u662f\u4e00\u4e2a\u597d\u7684\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u6709\u76ca\u7684\u4eba\uff1a\u88ab\u4e60\u60ef\u770b\u5230500MHz\u7684CPU\u8ba9\u4f4d\u4e8e1GHz CPU\uff0c\u8ba9\u4f4d\u4e8e2GHz CPU\uff0c\u7b49\u7b49\u3002\u4eca\u5929\u5728\u4e3b\u6d41\u7535\u8111\u4e0a\u76843GHz\u8303\u56f4\u5185\u3002\n \u5173\u952e\u95ee\u9898\u662f\uff1a\u5b83\u4ec0\u4e48\u65f6\u5019\u7ed3\u675f\uff1f\u6bd5\u7adf\uff0c\u6469\u5c14\u4eba\u6cd5\u5f8b\u9884\u6d4b\u6307\u6570\u589e\u957f\uff0c\u5e76\u4e14\u5728\u8fbe\u5230\u786c\u7269\u8d28\u9650\u5236\u4e4b\u524d\uff0c\u660e\u663e\u7684\u6307\u6570\u589e\u957f\u65e0\u6cd5\u7ee7\u7eed;\u5149\u4e0d\u5f97\u4e0d\u53d8\u5f97\u66f4\u5feb\u3002\u589e\u957f\u6700\u7ec8\u5fc5\u987b\u51cf\u901f\u751a\u81f3\u7ed3\u675f\u3002 \uff08\u8b66\u544a\uff1a\u662f\u7684\uff0cMoores\u6cd5\u5219\u4e3b\u8981\u9002\u7528\u4e8e\u6676\u4f53\u7ba1\u5bc6\u5ea6\uff0c\u4f46\u5728\u949f\u8868\u901f\u5ea6\u7b49\u76f8\u5173\u9886\u57df\u53d1\u751f\u4e86\u540c\u6837\u7684\u6307\u6570\u589e\u957f\u3002\u5176\u4ed6\u7a7a\u95f4\u7684\u589e\u957f\u751a\u81f3\u66f4\u5feb\uff0c\u6700\u91cd\u8981\u7684\u662f\u6570\u636e\u5b58\u50a8\u7206\u70b8\uff0c\u4f46\u91cd\u8981\u8d8b\u52bf\u5c5e\u4e8e\u6570\u636e\u5b58\u50a8\u7206\u70b8\u5728\u4e0d\u540c\u7684\u6587\u7ae0\u4e2d\u3002\uff09\n \u5982\u679c\u60a8\u662f\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\uff0c\u53ef\u80fd\u5df2\u7ecf\u4e58\u5750\u514d\u8d39\u5348\u9910\u6d6a\u6f6e\u7684\u684c\u9762\u8ba1\u7b97\u673a\u6027\u80fd\u3002\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u662f\u5426\u4e3a\u67d0\u4e9b\u672c\u5730\u64cd\u4f5c\u754c\u9650\uff1f\u4e0d\u62c5\u5fc3\uff0c\u4f20\u7edf\uff08\u5982\u679c\u6000\u7591\uff09\u667a\u6167\u5c31\u4f1a\u53bb;\u660e\u5929\u5904\u7406\u5668\u5c06\u5177\u6709\u66f4\u591a\u7684\u541e\u5410\u91cf\uff0c\u65e0\u8bba\u5982\u4f55\uff0c\u4eca\u5929\u7684\u5e94\u7528\u7a0b\u5e8f\u8d8a\u6765\u8d8a\u9010\u6e10\u88abCPU\u541e\u5410\u91cf\u548c\u5185\u5b58\u901f\u5ea6\u4ee5\u5916\u7684\u56e0\u7d20\u75c9\u631b\uff08\u4f8b\u5982\uff0c\u5b83\u4eec\u901a\u5e38\u662fI / O\u7ed1\u5b9a\uff0c\u7f51\u7edc\u7ed1\u5b9a\uff0c\u6570\u636e\u5e93\u7ed1\u5b9a\uff09\u3002\u6b63\u786e\u7684\uff1f\n  \u597d\u6d88\u606f\u662f\uff0c\u5904\u7406\u5668\u5c06\u7ee7\u7eed\u53d8\u5f97\u66f4\u52a0\u5f3a\u5927\u3002\u574f\u6d88\u606f\u662f\uff0c\u81f3\u5c11\u5728\u77ed\u671f\u5185\uff0c\u589e\u957f\u5c06\u4e3b\u8981\u662f\u5728\u4e0d\u91c7\u53d6\u5927\u591a\u6570\u76ee\u524d\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u65b9\u5411\u524d\u5f80\u4ed6\u4eec\u4e60\u60ef\u7684\u81ea\u7531\u9a91\u884c\u3002\n \u5728\u8fc7\u53bb\u768430\u5e74\u4e2d\uff0cCPU\u8bbe\u8ba1\u5e08\u5728\u4e09\u4e2a\u4e3b\u8981\u9886\u57df\u53d6\u5f97\u4e86\u6027\u80fd\u63d0\u5347\uff0c\u5176\u4e2d\u524d\u4e24\u4e2a\u4e13\u6ce8\u4e8e\u76f4\u7ebf\u6267\u884c\u6d41\u7a0b\uff1a\n     \u589e\u52a0\u65f6\u949f\u901f\u5ea6\u662f\u5173\u4e8e\u83b7\u5f97\u66f4\u591a\u5468\u671f\u3002\u66f4\u5feb\u5730\u8fd0\u884cCPU\u6216\u66f4\u5c11\u76f4\u63a5\u610f\u5473\u7740\u66f4\u5feb\u5730\u6267\u884c\u76f8\u540c\u7684\u5de5\u4f5c\u3002\n \u4f18\u5316\u6267\u884c\u6d41\u7a0b\u662f\u5173\u4e8e\u6bcf\u5468\u671f\u6267\u884c\u66f4\u591a\u5de5\u4f5c\u3002\u4eca\u5929\u7684CPUS\u4f53\u80b2\u4e00\u4e9b\u66f4\u5f3a\u5927\u7684\u6307\u793a\uff0c\u5b83\u4eec\u6267\u884c\u4f18\u5316\uff0c\u4ece\u884c\u4eba\u5230\u5f02\u56fd\u60c5\u8c03\uff0c\u5305\u62ec\u6d41\u6c34\u7ebf\uff0c\u5206\u652f\u9884\u6d4b\uff0c\u5728\u540c\u4e00\u65f6\u949f\u5468\u671f\u4e2d\u6267\u884c\u591a\u4e2a\u6307\u4ee4\uff0c\u751a\u81f3\u91cd\u65b0\u6392\u5e8f\u6307\u4ee4\u6d41up-\u8ba2\u5355\u6267\u884c\u3002\u8fd9\u4e9b\u6280\u672f\u65e8\u5728\u4f7f\u6307\u4ee4\u66f4\u597d\u5730\u6d41\u52a8\u548c/\u6216\u66f4\u5feb\u5730\u6d41\u52a8\uff0c\u5e76\u901a\u8fc7\u51cf\u5c11\u5ef6\u8fdf\u5e76\u6700\u5927\u5316\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u6240\u5b8c\u6210\u7684\u5de5\u4f5c\u6765\u6324\u51fa\u6bcf\u4e2a\u65f6\u949f\u5468\u671f\u7684\u6700\u5927\u90e8\u5206\u5de5\u4f5c\u3002 \n\u82af\u7247\u8bbe\u8ba1\u4eba\u5458\u5728\u8fd9\u4e48\u5927\u7684\u538b\u529b\u4e0b\uff0c\u63d0\u4f9b\u4e86\u66f4\u5feb\u7684CPU\uff0c\u4ed6\u4eec\u4f1a\u5bfc\u81f4\u66f4\u6539\u7a0b\u5e8f\u7684\u542b\u4e49\uff0c\u5e76\u53ef\u80fd\u6253\u7834\u5b83\uff0c\u4ee5\u4fbf\u4f7f\u5176\u8fd0\u884c\u66f4\u5feb\n  \u5728\u9664\u6559\u5b66\u91cd\u65b0\u6392\u5e8f\u548c\u5185\u5b58\u6a21\u578b\u4e4b\u5916\uff1a\u8bf7\u6ce8\u610f\uff0c\u6211\u521a\u624d\u88ab\u79f0\u4e3a\u4f18\u5316\u7684\u4e00\u4e9b\u5b9e\u9645\u4e0a\u8fdc\u8fdc\u8d85\u8fc7\u4f18\u5316\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u4ee5\u6539\u53d8\u7a0b\u5e8f\u7684\u542b\u4e49\u5e76\u5bfc\u81f4\u53ef\u80fd\u7834\u574f\u5408\u7406\u7684\u7a0b\u5e8f\u5458\u671f\u671b\u7684\u53ef\u89c1\u6548\u679c\u3002\u8fd9\u662f\u663e\u7740\u7684\u3002 CPU\u8bbe\u8ba1\u5e08\u901a\u5e38\u662f\u660e\u667a\u7684\uff0c\u5e76\u4e14\u901a\u5e38\u4f1a\u4f24\u5bb3\u98de\u884c\u7684\u826f\u597d\u7684\u4eba\uff0c\u5e76\u4e14\u4e0d\u4f1a\u60f3\u5230\u901a\u5e38\u4f24\u5bb3\u4f60\u7684\u4ee3\u7801\u3002\u4f46\u8fd1\u5e74\u6765\uff0c\u4ed6\u4eec\u4e00\u76f4\u613f\u610f\u8ffd\u6c42\u79ef\u6781\u7684\u4f18\u5316\uff0c\u53ea\u662f\u4e3a\u4e86\u62e7\u51fa\u6bcf\u4e2a\u5468\u671f\u7684\u901f\u5ea6\uff0c\u751a\u81f3\u77e5\u9053\u8fd9\u4e9b\u6fc0\u8fdb\u91cd\u6392\u53ef\u4ee5\u5371\u53ca\u4ee3\u7801\u7684\u8bed\u4e49\u3002\u8fd9\u662f\u6d77\u5fb7\u5148\u751f\u7684\u5916\u8868\u5417\uff1f\u4e00\u70b9\u4e5f\u4e0d\u3002\u8fd9\u79cd\u610f\u613f\u53ea\u662f\u4e00\u4e2a\u660e\u786e\u7684\u6307\u6807\uff0c\u82af\u7247\u8bbe\u8ba1\u5e08\u9762\u4e34\u7684\u6781\u9650\u538b\u529b\uff0c\u65e8\u5728\u63d0\u4f9b\u66f4\u5feb\u7684CPU;\u5728\u8fd9\u4e48\u5927\u7684\u538b\u529b\u4e0b\uff0c\u4ed6\u4eec\u4f1a\u5192\u9669\u6539\u53d8\u7a0b\u5e8f\u7684\u542b\u4e49\uff0c\u5e76\u53ef\u80fd\u6253\u7834\u5b83\uff0c\u4ee5\u4fbf\u4f7f\u5176\u8fd0\u884c\u66f4\u5feb\u3002\u5728\u8fd9\u65b9\u9762\u7684\u4e24\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5b50\u662f\u7f16\u5199\u91cd\u65b0\u6392\u5e8f\u548c\u8bfb\u53d6\u91cd\u65b0\u6392\u5e8f\uff1a\u5141\u8bb8\u5904\u7406\u5668\u91cd\u65b0\u6392\u5e8f\u5199\u5165\u64cd\u4f5c\u5bf9\u6b64\u4ee4\u4eba\u60ca\u8bb6\u7684\u540e\u679c\uff0c\u5e76\u4e14\u6253\u7834\u4e86\u8bb8\u591a\u7a0b\u5e8f\u5458\u671f\u671b\uff0c\u8fd9\u901a\u5e38\u5fc5\u987b\u5173\u95ed\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5458\u592a\u96be\u4e86\u5728\u4efb\u610f\u5199\u5165\u91cd\u65b0\u6392\u5217\u7684\u60c5\u51b5\u4e0b\u6b63\u786e\u5730\u6b63\u786e\u5730\u4e86\u89e3\u5176\u8ba1\u5212\u7684\u610f\u4e49\u3002\u91cd\u65b0\u6392\u5e8f\u7684\u8bfb\u53d6\u64cd\u4f5c\u4e5f\u53ef\u4ee5\u4ea7\u751f\u60ca\u4eba\u7684\u53ef\u89c1\u6548\u679c\uff0c\u4f46\u662f\u8fd9\u66f4\u5e38\u89c1\u4e8e\u542f\u7528\uff0c\u56e0\u4e3a\u5b83\u5728\u7a0b\u5e8f\u5458\u4e0a\u4e0d\u592a\u52aa\u529b\uff0c\u4ee5\u53ca\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u548c\u64cd\u4f5c\u73af\u5883\u7684\u6027\u80fd\u8bbe\u8ba1\u4eba\u5458\u7684\u9700\u6c42\u59a5\u534f\uff0c\u5e76\u9009\u62e9\u66f4\u5927\u7684\u578b\u53f7\u7684\u6a21\u578b\u5728\u7a0b\u5e8f\u5458\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u88ab\u89c6\u4e3a\u8f83\u5c0f\u7684\u90aa\u6076\uff0c\u800c\u4e0d\u662f\u653e\u5f03\u4f18\u5316\u673a\u4f1a\u3002\n \u6700\u540e\uff0c\u589e\u52a0\u7247\u4e0a\u7f13\u5b58\u7684\u5927\u5c0f\u662f\u8fdc\u79bbRAM\u7684\u3002\u4e3b\u8981\u5185\u5b58\u6bd4CPU\u66f4\u6162\uff0c\u4f7f\u5f97\u5c06\u6570\u636e\u66f4\u8fd1\u4e8e\u5904\u7406\u5668\u548c\u8f83\u8fd1\u7684CPU\u6bd4\u5728\u6a21\u5177\u4e0a\u66f4\u8fd1\u5f97\u591a\u3002 On-Die\u7f13\u5b58\u5927\u5c0f\u5df2\u7ecf\u98d9\u5347\uff0c\u4eca\u5929\u5927\u591a\u6570\u4e3b\u8981\u82af\u7247\u4f9b\u5e94\u5546\u90fd\u4f1a\u9500\u552e\u60a8\u7684CPU\uff0c\u5177\u67092MB\uff0c\u66f4\u591a\u7684\u677f\u8f7dL2\u7f13\u5b58\u3002 \uff08\u5728\u8fd9\u4e09\u79cd\u4e3b\u8981\u7684\u5386\u53f2\u65b9\u6cd5\u4e2d\u63d0\u9ad8\u4e86CPU\u6027\u80fd\uff0c\u589e\u52a0\u4e86\u7f13\u5b58\u662f\u552f\u4e00\u4e00\u4e2a\u5c06\u5728\u8fd1\u671f\u7ee7\u7eed\u7684\u65b9\u6cd5\u3002\u7a0d\u540e\u4f1a\u66f4\u52a0\u5173\u4e8e\u7f13\u5b58\u7684\u91cd\u8981\u6027\u3002\uff09\n  \u5173\u4e8e\u8be5\u5217\u8868\u7684\u6839\u672c\u91cd\u8981\u7684\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u9886\u57df\u90fd\u662f\u5e76\u53d1 - \u4e0d\u53ef\u77e5\u7684\u3002\u4efb\u4f55\u8fd9\u4e9b\u533a\u57df\u7684\u52a0\u901f\u5c06\u76f4\u63a5\u5bfc\u81f4\u987a\u5e8f\uff08\u975e\u5e73\u884c\uff0c\u5355\u7ebf\u7a0b\uff0c\u5355\u7a0b\uff09\u5e94\u7528\u7a0b\u5e8f\u7684\u52a0\u901f\uff0c\u4ee5\u53ca\u4f7f\u7528\u5e76\u53d1\u6027\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd9\u662f\u91cd\u8981\u7684\uff0c\u56e0\u4e3a\u7edd\u5927\u591a\u6570\u4eca\u5929\u7684\u5e94\u7528\u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u51fa\u4e8e\u6076\u52a3\u7684\u539f\u56e0\uff0c\u5f0a\u75c5\u8fdb\u4e00\u6b65\u8fdb\u4e00\u6b65\u3002\n \u5f53\u7136\uff0c\u7f16\u5236\u8005\u5fc5\u987b\u8ddf\u4e0a;\u6709\u65f6\u60a8\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u9488\u5bf9\u7279\u5b9a\u7684\u6700\u4f4e\u9650\u5ea6\u7ea7\u522b\u7684CPU\uff0c\u4ee5\u4fbf\u53d7\u76ca\u4e8e\u65b0\u7684\u6307\u793a\uff08\u4f8b\u5982MMX\uff0cSSE\uff09\u548c\u4e00\u4e9b\u65b0\u7684CPU\u529f\u80fd\u548c\u7279\u6027\u3002\u4f46\u662f\uff0c\u751a\u81f3\u65e7\u5e94\u7528\u7a0b\u5e8f\u59cb\u7ec8\u5728\u4e0d\u88ab\u91cd\u65b0\u7f16\u8bd1\u7684\u60c5\u51b5\u4e0b\u59cb\u7ec8\u8fd0\u884c\u5927\u91cf\u7684FastEreven\uff0c\u4ee5\u5229\u7528\u6700\u65b0CPU\u63d0\u4f9b\u7684\u6240\u6709\u65b0\u6307\u4ee4\u548c\u529f\u80fd\u3002\n    CPU\u6027\u80fd\u589e\u957f\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u77e5\u5b83\u4e24\u5e74\u524d\u51fb\u4e2d\u4e86\u4e00\u5835\u5899\u3002\u5927\u591a\u6570\u4eba\u6700\u8fd1\u53ea\u5f00\u59cb\u6ce8\u610f\u5230\u3002\n \u60a8\u53ef\u4ee5\u83b7\u5f97\u5176\u4ed6\u82af\u7247\u7684\u7c7b\u4f3c\u56fe\u5f62\uff0c\u4f46\u6211\u5c06\u5728\u6b64\u5904\u4f7f\u7528\u82f1\u7279\u5c14\u6570\u636e\u3002\u56fe1\u901a\u8fc7\u65f6\u949f\u901f\u5ea6\u548c\u6676\u4f53\u7ba1\u6570\u6765\u56fe\u8868\u82f1\u7279\u5c14\u82af\u7247\u4ecb\u7ecd\u7684\u5386\u53f2\u3002\u81f3\u5c11\u73b0\u5728\uff0c\u6676\u4f53\u7ba1\u7684\u6570\u91cf\u7ee7\u7eed\u6500\u5347\u3002\u7136\u800c\uff0c\u65f6\u949f\u901f\u5ea6\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u6545\u4e8b\u3002 \n\u56fe1\uff1a\r\u82f1\u7279\u5c14CPU\u4ecb\u7ecd\uff08\u56fe2009\u5e748\u6708\u66f4\u65b0;\u6587\u672c\u539f\u521b\r2004\u5e7412\u6708\uff09\n    \u57282003\u5e74\u521d\uff0c\u60a8\u5c06\u6ce8\u610f\u5230\u4ee5\u524d\u8d8b\u52bf\u7684\u4ee4\u4eba\u4e0d\u5b89\u7684\u6025\u5267\u8f6c\u5411\u66f4\u5feb\u7684CPU\u65f6\u949f\u901f\u5ea6\u3002 IVE\u6dfb\u52a0\u7684\u7ebf\u6761\u4ee5\u6700\u5927\u65f6\u949f\u901f\u5ea6\u663e\u793a\u9650\u5236\u8d8b\u52bf;\u5982\u8584\u865a\u7ebf\u6240\u793a\uff0c\u4ee3\u66ff\u7ee7\u7eed\u524d\u4e00\u6761\u8def\u5f84\uff0c\u800c\u4e0d\u662f\u8584\u865a\u7ebf\u6240\u793a\u3002\u7531\u4e8e\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4f46\u51e0\u4e2a\u7269\u7406\u95ee\u9898\uff0c\u8f83\u9ad8\u7684\u65f6\u949f\u901f\u5ea6\u8d8a\u6765\u8d8a\u96be\u4ee5\u52aa\u529b\uff0c\u663e\u7740\u7684\u70ed\u91cf\uff08\u592a\u591a\u5e76\u4e14\u592a\u96be\u4ee5\u6d88\u6563\uff09\uff0c\u529f\u8017\uff08\u592a\u9ad8\uff09\u548c\u7535\u6d41\u6cc4\u6f0f\u95ee\u9898\u3002\n \u5feb\u901f\uff1a\u5f53\u524d\u5de5\u4f5c\u7ad9\u4e2dCPU\u4e0a\u7684\u65f6\u949f\u901f\u5ea6\u662f\u4ec0\u4e48\uff1f\u4f60\u572810GHz\u4e0a\u8fd0\u884c\u5417\uff1f\u5728\u82f1\u7279\u5c14\u7b79\u7801\u4e0a\uff0c\u6211\u4eec\u5f88\u4e45\u4ee5\u524d\u8fbe\u5230\u4e862GHz\uff082001\u5e748\u6708\uff09\uff0c\u5e76\u6839\u636e2003\u5e74\u4e4b\u524d\u7684CPU\u8d8b\u52bf\uff0c\u73b0\u5728\u57282005\u5e74\u521d\uff0c\u6211\u4eec\u5e94\u8be5\u62e5\u6709\u7b2c\u4e00\u4e2a10GHz Pentium-Family Chips\u3002\u5feb\u901f\u73af\u987e\u56db\u5468\uff0c\u55ef\uff0c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u6ca1\u6709\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u79cd\u7b79\u7801\u751a\u81f3\u5728\u5730\u5e73\u7ebf\u4e0a\u90fd\u6ca1\u6709\u597d\u4e3b\u610f\uff0c\u5f53\u6211\u4eec\u53ef\u80fd\u770b\u5230\u5b83\u4eec\u51fa\u73b0\u65f6\u90fd\u6ca1\u6709\u597d\u4e3b\u610f\u3002\n \u90a3\u4e48\uff0c\u90a3\u4e484GHz\u600e\u4e48\u6837\uff1f\u57283.4ghz alreadysurely 4ghz\u4e0d\u8fdc\u5904\uff1f\u5509\uff0c\u751a\u81f34GHz\u4f3c\u4e4e\u662f\u9065\u8fdc\u7684\u3002 2004\u5e74\u4e2d\u671f\uff0c\u6b63\u5982\u60a8\u6240\u77e5\uff0c\u82f1\u7279\u5c14\u9996\u5148\u5ef6\u8fdf\u4e86\u8ba1\u5212\u5f15\u51654GHz\u82af\u7247\uff0c\u76f4\u52302005\u5e74\uff0c\u7136\u540e\u57282004\u5e74\u79cb\u5b63\u5b8c\u5168\u629b\u5f03\u4e864GHz\u8ba1\u5212\u3002\u6839\u636e\u672c\u6587\uff0c\u82f1\u7279\u5c14\u8ba1\u5212\u57282005\u5e74\u521d\u5f00\u59cb\u8fdb\u4e00\u6b65\u5347\u81f33.73GHz\uff08\u5df2\u5305\u542b\u5728\u56fe1\u4e2d\u4f5c\u4e3a\u6700\u53f3\u4e0a\u5927\u70b9\uff09\uff0c\u4f46\u65f6\u949f\u7ade\u8d5b\u786e\u5b9e\u7ed3\u675f\uff0c\u81f3\u5c11\u73b0\u5728; Intels\u548c\u5927\u591a\u6570\u5904\u7406\u5668\u4f9b\u5e94\u5546\u7684\u672a\u6765\u5728\u5176\u4ed6\u5730\u65b9\u6210\u4e3a\u82af\u7247\u516c\u53f8\u79ef\u6781\u8ffd\u6c42\u76f8\u540c\u7684\u65b0\u7684\u591a\u6838\u65b9\u5411\u3002\n \u6709\u4e00\u5929\uff0c\u53ef\u80fd\u4f1a\u5728\u4e3b\u6d41\u684c\u9762\u673a\u4e0a\u770b\u52304GHz CPU\uff0c\u4f46\u5b83\u4e0d\u4f1a\u57282005\u5e74\u3002\u5f53\u7136\uff0c\u82f1\u7279\u5c14\u53ea\u6709\u5728\u52b3\u52a8\u529b\u7684\u901f\u5ea6\u4e0b\u8fd0\u884c\u7684\u82af\u7247\u7684\u6837\u54c1\uff0c\u624d\u80fd\u901a\u8fc7\u82f1\u52c7\u7684\u5de5\u4f5c\uff0c\u4f8b\u5982\u5b89\u88c5\u5b8c\u5168\u4e0d\u5207\u5b9e\u9645\u7684\u51b7\u5374\u8bbe\u5907\u3002\u60a8\u4e0d\u4f1a\u5f88\u5feb\u5728\u60a8\u7684\u529e\u516c\u5ba4\u5185\u4f7f\u7528\u90a3\u79cd\u51b7\u5374\u786c\u4ef6\uff0c\u5728\u5e73\u9762\u4e0a\u8ba1\u7b97\u65f6\uff0c\u8bf7\u5728\u5708\u5b50\u4e0a\u5b64\u7acb\u5728\u819d\u76d6\u4e0a\u3002\n  \u6ca1\u6709\u514d\u8d39\u5348\u9910\u7684\u4e1c\u897f\u3002 R. A. Heinlein\uff0c\u6708\u4eae\u662f\u4e00\u4e2a\u82db\u523b\u7684\u60c5\u5987\n \u8fd9\u662f\u5426\u5747\u8861\u4e86\u8fd9\u4e00\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6709\u8da3\u7684\u662f\uff0c\u4e00\u822c\u7b54\u6848\u4f3c\u4e4e\u662f\u6ca1\u6709\u3002\u5f53\u7136\uff0c\u5c31\u50cf\u6240\u6709\u6307\u6570\u8fdb\u5c55\u4e00\u6837\uff0cMoores\u6cd5\u5b9a\u5fc5\u987b\u7ed3\u675f\u4e00\u5929\uff0c\u4f46\u4f3c\u4e4e\u4f3c\u4e4e\u8fd8\u6709\u51e0\u5e74\u4e86\u3002\u5c3d\u7ba1\u82af\u7247\u5de5\u7a0b\u5e08\u906d\u9047\u4e86\u679c\u5b9e\u7684\u7389\u7c73\u679c\u5b9e\uff0c\u4f46\u6676\u4f53\u7ba1\u8ba1\u6570\u7ee7\u7eed\u7206\u70b8\uff0c\u4f3c\u4e4eCPU\u5c06\u7ee7\u7eed\u8ffd\u968fMoores Law Live\u541e\u5410\u91cf\u7684\u541e\u5410\u91cf\u8d85\u8fc7\u4e00\u5e74\u65f6\u95f4\u3002 \n\u56e0\u6b64\uff0c\u7ec4\u5408\u4e24\u4e2a3GHz\u6838\u5fc3\u7684\u53cc\u6838CPU\u5b9e\u9645\u4e0a\u63d0\u4f9b\u4e866GHz\u7684\u5904\u7406\u80fd\u529b\u3002\u6b63\u786e\u7684\uff1f\n \u9519\u8bef\u7684\u3002\u5373\u4f7f\u5728\u4e24\u4e2a\u7269\u7406\u5904\u7406\u5668\u4e0a\u8fd0\u884c\u7684\u4e24\u4e2a\u7ebf\u7a0b\u4e5f\u4e0d\u610f\u5473\u7740\u8fbe\u5230\u4e24\u500d\u6027\u80fd\u3002\u540c\u6837\uff0c\u5927\u591a\u6570\u591a\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5728\u53cc\u6838\u6846\u4e0a\u8fd0\u884c\u4e24\u500d\u3002\u5b83\u4eec\u5e94\u8be5\u6bd4\u5355\u6838CPU\u66f4\u5feb\u5730\u8fd0\u884c;\u6027\u80fd\u589e\u76ca\u53ea\u662f\u7ebf\u6027\uff0c\u5373\u6240\u6709\u7684\u3002\n \u4e3a\u4ec0\u4e48\u4e0d\uff1f\u9996\u5148\uff0c\u6838\u5fc3\u4e4b\u95f4\u5b58\u5728\u5f00\u9500\uff0c\u4ee5\u786e\u4fdd\u9ad8\u901f\u7f13\u5b58\u4e00\u81f4\u6027\uff08\u9ad8\u901f\u7f13\u5b58\u7684\u4e00\u81f4\u89c6\u56fe\uff0c\u4ee5\u53ca\u4e3b\u5b58\u50a8\u5668\uff09\u5e76\u6267\u884c\u5176\u4ed6\u63e1\u624b\u3002\u4eca\u5929\uff0c\u5373\u4f7f\u5bf9\u4e8e\u591a\u7ebf\u7a0b\u5e94\u7528\uff0c\u4e24\u79cd\u6216\u56db\u4e2a\u5904\u7406\u5668\u673a\u5668\u4e5f\u4e0d\u662f\u5355\u4e2aCPU\u7684\u4e24\u5230\u56db\u500d\u3002\u5373\u4f7f\u95ee\u9898\u6240\u8ba8\u8bba\u7684CPU\u5750\u5728\u540c\u4e00\u4e2a\u9ab0\u5b50\u4e0a\uff0c\u95ee\u9898\u4e5f\u5b58\u5728\u4e8e\u6b64\u76f8\u540c\u3002\n \u5176\u6b21\uff0c\u9664\u975e\u4e24\u4e2a\u6838\u5fc3\u6b63\u5728\u8fd0\u884c\u4e0d\u540c\u7684\u8fdb\u7a0b\uff0c\u6216\u8005\u5355\u4e2a\u8fc7\u7a0b\u7684\u4e0d\u540c\u7ebf\u7a0b\u662f\u5355\u72ec\u7684\u5355\u72ec\u8fd0\u884c\uff0c\u5426\u5219\u5355\u72ec\u8fd0\u884c\u4ee5\u72ec\u7acb\u8fd0\u884c\u5e76\u4e14\u51e0\u4e4e\u4ece\u4e0d\u7b49\u5f85\u5f7c\u6b64\uff0c\u4f46\u5b83\u4eec\u4e0d\u4f1a\u5f88\u597d\u5730\u5229\u7528\u3002 \uff08\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4f1a\u63a8\u6d4b\u4eca\u5929\u7684\u5355\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u5b9e\u9645\u4f7f\u7528\u7684\u5355\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\u5b9e\u9645\u4e0a\u53ef\u4ee5\u901a\u8fc7\u8fdb\u5165\u53cc\u6838\u82af\u7247\u6765\u5b9e\u9645\u4e0a\u770b\u5230\u5927\u591a\u6570\u7528\u6237\u7684\u6027\u80fd\u63d0\u5347\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u989d\u5916\u7684\u6838\u5fc3\u5b9e\u9645\u4e0a\u662f\u6709\u7528\u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u5b83\u6b63\u5728\u8fd0\u884c\u8bf8\u591a\u7528\u6237\u7cfb\u7edf\u7684\u5e7f\u544a\u8f6f\u4ef6\u548c\u95f4\u8c0d\u8f6f\u4ef6\uff0c\u5426\u5219\u5426\u5219\u7f29\u5c0f\u7528\u6237\u4eca\u5929\u7684\u5355\u4e2aCPU\u3002\u6211\u7559\u7ed9\u60a8\u6765\u51b3\u5b9a\u6dfb\u52a0CPU\u662f\u5426\u8fd0\u884c\u95f4\u8c0d\u8f6f\u4ef6\u662f\u8be5\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\uff09\n \u5982\u679c\u60a8\u6b63\u5728\u8fd0\u884c\u5355\u7ebf\u7a0b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5219\u5e94\u7528\u7a0b\u5e8f\u53ea\u80fd\u4f7f\u7528\u4e00\u4e2a\u6838\u5fc3\u3002\u5e94\u8be5\u6709\u4e00\u4e9b\u52a0\u901f\u4f5c\u4e3a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u5728\u5355\u72ec\u7684\u6838\u5fc3\u4e0a\u8fd0\u884c\uff0c\u4f46\u901a\u5e38\u64cd\u4f5c\u7cfb\u7edf\u65e0\u6cd5\u8fbe\u5230CPU\u7684\u6700\u5927\u5316\uff0c\u6240\u4ee5\u5176\u4e2d\u4e00\u4e2a\u6838\u5fc3\u5c06\u4e3b\u8981\u662f\u7a7a\u95f2\u7684\u3002 \uff08\u518d\u6b21\uff0c\u95f4\u8c0d\u8f6f\u4ef6\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u53ef\u4ee5\u5171\u4eabOSS\u6838\u5fc3\u3002\uff09\n  \u5173\u952e\u5dee\u5f02\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u6838\u5fc3\uff0c\u662f\uff0c\u81f3\u5c11\u662f\u4e0b\u4e00\u5bf9\u5904\u7406\u5668\u4ee3\u6765\u4ee5\u6839\u672c\u4e0d\u540c\u7684\u65b9\u5f0f\u5b8c\u6210\u6027\u80fd\u63d0\u5347\u3002\u5927\u591a\u6570\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u5c06\u4e0d\u518d\u53d7\u76ca\u4e8e\u81ea\u7531\u9a91\u884c\uff0c\u800c\u65e0\u9700\u91cd\u65b0\u8bbe\u8ba1\u3002\n \u5bf9\u4e8e\u8fd1\u671f\u672a\u6765\uff0c\u610f\u5473\u7740\u672a\u6765\u51e0\u5e74\uff0c\u65b0\u82af\u7247\u7684\u6027\u80fd\u6536\u76ca\u5c06\u88ab\u4e09\u79cd\u4e3b\u8981\u65b9\u6cd5\u63a8\u52a8\uff0c\u5176\u4e2d\u4e00\u4e2a\u4e0e\u8fc7\u53bb\u76f8\u540c\u3002\u8fd1\u671f\u672a\u6765\u6027\u80fd\u589e\u957f\u53f8\u673a\u662f\uff1a \nWarning: Can only detect less than 5000 characters\n\u4ece\u4eca\u5929\u5f00\u59cb\uff0c\u6027\u80fd\u5348\u9910\u4e0d\u518d\u662f\u514d\u8d39\u7684\u3002 \u5f53\u7136\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7ee7\u7eed\u9002\u7528\u7684\u7ee9\u6548\u589e\u957f\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u63a5\u6536\uff0c\u4e3b\u8981\u611f\u8c22\u9ad8\u901f\u7f13\u5b58\u5927\u5c0f\u6539\u8fdb\u3002 \u4f46\u662f\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53d7\u76ca\u4e8e\u65b0\u5904\u7406\u5668\u7684\u6301\u7eed\u6307\u6570\u541e\u5410\u91cf\u7684\u8fdb\u6b65\uff0c\u5219\u9700\u8981\u6210\u4e3a\u4e00\u6b3e\u5199\u6210\u826f\u597d\u7684\u5e76\u53d1\uff08\u901a\u5e38\u662f\u591a\u7ebf\u7a0b\uff09\u7684\u5e94\u7528\u7a0b\u5e8f\u3002 \u800c\u4e14\uff0c\u8fd9\u6bd4\u5b8c\u6210\u66f4\u5bb9\u6613\uff0c\u56e0\u4e3a\u5e76\u975e\u6240\u6709\u95ee\u9898\u90fd\u662f\u5e76\u884c\u5316\u7684\uff0c\u56e0\u4e3a\u5e76\u53d1\u7f16\u7a0b\u5f88\u96be\u3002  \u6211\u53ef\u4ee5\u542c\u5230\u6297\u8bae\u7684\u568e\u53eb\uff1a\u5e76\u53d1\uff1f \u90a3\u4e0d\u662f\u65b0\u95fb\uff01 \u4eba\u4eec\u5df2\u7ecf\u5728\u7f16\u5199\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u3002 \u8fd9\u662f\u771f\u7684\u3002 \u4e00\u5c0f\u90e8\u5206\u5f00\u53d1\u4eba\u5458\u3002  \u8bf7\u8bb0\u4f4f\uff0c\u4eba\u4eec\u572820\u4e16\u7eaa60\u5e74\u4ee3\u540e\u671f\u81f3\u5c11\u5728Simula\u7684\u65e5\u5b50\u4ee5\u6765\u4e00\u76f4\u5728\u505a\u9762\u5411\u5bf9\u8c61\u7684\u7f16\u7a0b\u3002 \u4f46Oo\u6ca1\u6709\u6210\u4e3a\u4e00\u573a\u9769\u547d  ...... ", "note_en": "The biggest sea change in software development since the OO revolution is knocking at the door, and its name is Concurrency.\n This article appeared in   Dr. Dobb&#39;s Journal, 30(3), March 2005. A much briefer version under the title  &#34;The Concurrency Revolution&#34; appeared in   C/C++ Users Journal, 23(2), February 2005.\n Update note: The CPU trends graph last updated August 2009 to include current \rdata and show the trend continues as predicted. The rest of this article \rincluding all text is still original as first posted here in December 2004.\n   Your free lunch will soon be over. What can you do about it? What  are you doing about it?\n The major processor manufacturers and architectures, from Intel and AMD to Sparc and PowerPC, have run out of room with most of their traditional approaches to boosting CPU performance. Instead of driving clock speeds and straight-line instruction throughput ever higher, they are instead turning  en masse to hyperthreading and multicore architectures. Both of these features are already available on chips today; in particular, multicore is available on current PowerPC and Sparc IV processors, and is coming in 2005 from Intel and AMD. Indeed, the big theme of the 2004 In-Stat/MDR Fall Processor Forum was multicore devices, as many companies showed new or updated multicore processors. Looking back, its not much of a stretch to call 2004 the year of multicore.\n And that puts us at a fundamental turning point in software development, at least for the next few years and for applications targeting general-purpose desktop computers and low-end servers (which happens to account for the vast bulk of the dollar value of software sold today). In this article, Ill describe the changing face of hardware, why it suddenly does matter to software, and how specifically the concurrency revolution matters to you and is going to change the way you will likely be writing software in the future.\n Arguably, the free lunch has already been over for a year or two, only were just now noticing.\n  Theres an interesting phenomenon thats known as Andy giveth, and Bill taketh away. No matter how fast processors get, software consistently finds new ways to eat up the extra speed. Make a CPU ten times as fast, and software will usually find ten times as much to do (or, in some cases, will feel at liberty to do it ten times less efficiently). Most classes of applications have enjoyed free and regular performance gains for several decades, even without releasing new versions or doing anything special, because the CPU manufacturers (primarily) and memory and disk manufacturers (secondarily) have reliably enabled ever-newer and ever-faster mainstream systems. Clock speed isnt the only measure of performance, or even necessarily a good one, but its an instructive one: Were used to seeing 500MHz CPUs give way to 1GHz CPUs give way to 2GHz CPUs, and so on. Today were in the 3GHz range on mainstream computers.\n The key question is: When will it end? After all, Moores Law predicts exponential growth, and clearly exponential growth cant continue forever before we reach hard physical limits; light isnt getting any faster. The growth must eventually slow down and even end. (Caveat: Yes, Moores Law applies principally to transistor densities, but the same kind of exponential growth has occurred in related areas such as clock speeds. Theres even faster growth in other spaces, most notably the data storage explosion, but that important trend belongs in a different article.)\n If youre a software developer, chances are that you have already been riding the free lunch wave of desktop computer performance. Is your applications performance borderline for some local operations? Not to worry, the conventional (if suspect) wisdom goes; tomorrows processors will have even more throughput, and anyway todays applications are increasingly throttled by factors other than CPU throughput and memory speed (e.g., theyre often I/O-bound, network-bound, database-bound). Right?\n  The good news is that processors are going to continue to become more powerful. The bad news is that, at least in the short term, the growth will come mostly in directions that do not take most current applications along for their customary free ride.\n Over the past 30 years, CPU designers have achieved performance gains in three main areas, the first two of which focus on straight-line execution flow:\n     Increasing clock speed is about getting more cycles. Running the CPU faster more or less directly means doing the same work faster.\n Optimizing execution flow is about doing more work per cycle. Todays CPUs sport some more powerful instructions, and they perform optimizations that range from the pedestrian to the exotic, including pipelining, branch prediction, executing multiple instructions in the same clock cycle(s), and even reordering the instruction stream for out-of-order execution. These techniques are all designed to make the instructions flow better and/or execute faster, and to squeeze the most work out of each clock cycle by reducing latency and maximizing the work accomplished per clock cycle.\n Chip designers are under so much pressure to deliver ever-faster CPUs that theyll risk changing the meaning of your program, and possibly break it, in order to make it run faster\n  Brief aside on instruction reordering and memory models: Note that some of what I just called optimizations are actually far more than optimizations, in that they can change the meaning of programs and cause visible effects that can break reasonable programmer expectations. This is significant. CPU designers are generally sane and well-adjusted folks who normally wouldnt hurt a fly, and wouldnt think of hurting your code normally. But in recent years they have been willing to pursue aggressive optimizations just to wring yet more speed out of each cycle, even knowing full well that these aggressive rearrangements could endanger the semantics of your code. Is this Mr. Hyde making an appearance? Not at all. That willingness is simply a clear indicator of the extreme pressure the chip designers face to deliver ever-faster CPUs; theyre under so much pressure that theyll risk changing the meaning of your program, and possibly break it, in order to make it run faster. Two noteworthy examples in this respect are write reordering and read reordering: Allowing a processor to reorder write operations has consequences that are so surprising, and break so many programmer expectations, that the feature generally has to be turned off because its too difficult for programmers to reason correctly about the meaning of their programs in the presence of arbitrary write reordering. Reordering read operations can also yield surprising visible effects, but that is more commonly left enabled anyway because it isnt quite as hard on programmers, and the demands for performance cause designers of operating systems and operating environments to compromise and choose models that place a greater burden on programmers because that is viewed as a lesser evil than giving up the optimization opportunities.\n Finally, increasing the size of on-chip cache is about staying away from RAM. Main memory continues to be so much slower than the CPU that it makes sense to put the data closer to the processorand you cant get much closer than being right on the die. On-die cache sizes have soared, and today most major chip vendors will sell you CPUs that have 2MB and more of on-board L2 cache. (Of these three major historical approaches to boosting CPU performance, increasing cache is the only one that will continue in the near term. Ill talk a little more about the importance of cache later on.)\n  A fundamentally important thing to recognize about this list is that all of these areas are concurrency-agnostic. Speedups in any of these areas will directly lead to speedups in sequential (nonparallel, single-threaded, single-process) applications, as well as applications that do make use of concurrency. Thats important, because the vast majority of todays applications are single-threaded, for good reasons that Ill get into further below.\n Of course, compilers have had to keep up; sometimes you need to recompile your application, and target a specific minimum level of CPU, in order to benefit from new instructions (e.g., MMX, SSE) and some new CPU features and characteristics. But, by and large, even old applications have always run significantly fastereven without being recompiled to take advantage of all the new instructions and features offered by the latest CPUs.\n    CPU performance growth as we have known it hit a wall two years ago. Most people have only recently started to notice.\n You can get similar graphs for other chips, but Im going to use Intel data here. Figure 1 graphs the history of Intel chip introductions by clock speed and number of transistors. The number of transistors continues to climb, at least for now. Clock speed, however, is a different story.\n   Figure 1: \r\tIntel CPU Introductions (graph updated August 2009; article text original \r\tfrom December 2004)\n    Around the beginning of 2003, youll note a disturbing sharp turn in the previous trend toward ever-faster CPU clock speeds. Ive added lines to show the limit trends in maximum clock speed; instead of continuing on the previous path, as indicated by the thin dotted line, there is a sharp flattening. It has become harder and harder to exploit higher clock speeds due to not just one but several physical issues, notably heat (too much of it and too hard to dissipate), power consumption (too high), and current leakage problems.\n Quick: Whats the clock speed on the CPU(s) in your current workstation? Are you running at 10GHz? On Intel chips, we reached 2GHz a long time ago (August 2001), and according to CPU trends before 2003, now in early 2005 we should have the first 10GHz Pentium-family chips. A quick look around shows that, well, actually, we dont. Whats more, such chips are not even on the horizonwe have no good idea at all about when we might see them appear.\n Well, then, what about 4GHz? Were at 3.4GHz alreadysurely 4GHz cant be far away? Alas, even 4GHz seems to be remote indeed. In mid-2004, as you probably know, Intel first delayed its planned introduction of a 4GHz chip until 2005, and then in fall 2004 it officially abandoned its 4GHz plans entirely. As of this writing, Intel is planning to ramp up a little further to 3.73GHz in early 2005 (already included in Figure 1 as the upper-right-most dot), but the clock race really is over, at least for now; Intels and most processor vendors future lies elsewhere as chip companies aggressively pursue the same new multicore directions.\n Well probably see 4GHz CPUs in our mainstream desktop machines someday, but it wont be in 2005. Sure, Intel has samples of their chips running at even higher speeds in the labbut only by heroic efforts, such as attaching hideously impractical quantities of cooling equipment. You wont have that kind of cooling hardware in your office any day soon, let alone on your lap while computing on the plane.\n  There aint no such thing as a free lunch. R. A. Heinlein,  The Moon Is a Harsh Mistress\n Does this mean Moores Law is over? Interestingly, the answer in general seems to be no. Of course, like all exponential progressions, Moores Law must end someday, but it does not seem to be in danger for a few more years yet. Despite the wall that chip engineers have hit in juicing up raw clock cycles, transistor counts continue to explode and it seems CPUs will continue to follow Moores Law-like throughput gains for some years to come.\n So a dual-core CPU that combines two 3GHz cores practically offers 6GHz of processing power. Right?\n Wrong. Even having two threads running on two physical processors doesnt mean getting two times the performance. Similarly, most multi-threaded applications wont run twice as fast on a dual-core box. They should run faster than on a single-core CPU; the performance gain just isnt linear, thats all.\n Why not? First, there is coordination overhead between the cores to ensure cache coherency (a consistent view of cache, and of main memory) and to perform other handshaking. Today, a two- or four-processor machine isnt really two or four times as fast as a single CPU even for multi-threaded applications. The problem remains essentially the same even when the CPUs in question sit on the same die.\n Second, unless the two cores are running different processes, or different threads of a single process that are well-written to run independently and almost never wait for each other, they wont be well utilized. (Despite this, I will speculate that todays single-threaded applications as actually used in the field could actually see a performance boost for most users by going to a dual-core chip, not because the extra core is actually doing anything useful, but because it is running the adware and spyware that infest many users systems and are otherwise slowing down the single CPU that user has today. I leave it up to you to decide whether adding a CPU to run your spyware is the best solution to that problem.)\n If youre running a single-threaded application, then the application can only make use of one core. There should be some speedup as the operating system and the application can run on separate cores, but typically the OS isnt going to be maxing out the CPU anyway so one of the cores will be mostly idle. (Again, the spyware can share the OSs core most of the time.)\n  The key difference, which is the heart of this article, is that the performance gains are going to be accomplished in fundamentally different ways for at least the next couple of processor generations. And most current applications will no longer benefit from the free ride without significant redesign.\n For the near-term future, meaning for the next few years, the performance gains in new chips will be fueled by three main approaches, only one of which is the same as in the past. The near-term future performance growth drivers are:\n     Hyperthreading is about running two or more threads in parallel inside a single CPU. Hyperthreaded CPUs are already available today, and they do allow some instructions to run in parallel. A limiting factor, however, is that although a hyper-threaded CPU has some extra hardware including extra registers, it still has just one cache, one integer math unit, one FPU, and in general just one each of most basic CPU features. Hyperthreading is sometimes cited as offering a 5% to 15% performance boost for reasonably well-written multi-threaded applications, or even as much as 40% under ideal conditions for carefully written multi-threaded applications. Thats good, but its hardly double, and it doesnt help single-threaded applications.\n Multicore is about running two or more actual CPUs on one chip. Some chips, including Sparc and PowerPC, have multicore versions available already. The initial Intel and AMD designs, both due in 2005, vary in their level of integration but are functionally similar. AMDs seems to have some initial performance design advantages, such as better integration of support functions on the same die, whereas Intels initial entry basically just glues together two Xeons on a single die. The performance gains should initially be about the same as having a true dual-CPU system (only the system will be cheaper because the motherboard doesnt have to have two sockets and associated glue chippery), which means something less than double the speed even in the ideal case, and just like today it will boost reasonably well-written multi-threaded applications. Not single-threaded ones.\n Finally, on-die cache sizes can be expected to continue to grow, at least in the near term. Of these three areas, only this one will broadly benefit most existing applications. The continuing growth in on-die cache sizes is an incredibly important and highly applicable benefit for many applications, simply because space is speed. Accessing main memory is expensive, and you really dont want to touch RAM if you can help it. On todays systems, a cache miss that goes out to main memory often costs 10 to 50 times as much getting the information from the cache; this, incidentally, continues to surprise people because we all think of memory as fast, and it is fast compared to disks and networks, but not compared to on-board cache which runs at faster speeds. If an applications working set fits into cache, were golden, and if it doesnt, were not. That is why increased cache sizes will save some existing applications and breathe life into them for a few more years without requiring significant redesign: As existing applications manipulate more and more data, and as they are incrementally updated to include more code for new features, performance-sensitive operations need to continue to fit into cache. As the Depression-era old-timers will be quick to remind you, Cache is king.\n (Aside: Heres an anecdote to demonstrate space is speed that recently hit my compiler team. The compiler uses the same source base for the 32-bit and 64-bit compilers; the code is just compiled as either a 32-bit process or a 64-bit one. The 64-bit compiler gained a great deal of baseline performance by running on a 64-bit CPU, principally because the 64-bit CPU had many more registers to work with and had other code performance features. All well and good. But what about data? Going to 64 bits didnt change the size of most of the data in memory, except that of course pointers in particular were now twice the size they were before. As it happens, our compiler uses pointers much more heavily in its internal data structures than most other kinds of applications ever would. Because pointers were now 8 bytes instead of 4 bytes, a pure data size increase, we saw a significant increase in the 64-bit compilers working set. That bigger working set caused a performance penalty that almost exactly offset the code execution performance increase wed gained from going to the faster processor with more registers. As of this writing, the 64-bit compiler runs at the same speed as the 32-bit compiler, even though the source base is the same for both and the 64-bit processor offers better raw processing throughput. Space is speed.)\n But cache is it. Hyperthreading and multicore CPUs will have nearly no impact on most current applications.\n So what does this change in the hardware mean for the way we write software? By now youve probably noticed the basic answer, so lets consider it and its consequences.\n  In the 1990s, we learned to grok objects. The revolution in mainstream software development from structured programming to object-oriented programming was the greatest such change in the past 20 years, and arguably in the past 30 years. There have been other changes, including the most recent (and genuinely interesting)  naissance of web services, but nothing that most of us have seen during our careers has been as fundamental and as far-reaching a change in the way we write software as the object revolution.\n  Starting today, the performance lunch isnt free any more. Sure, there will continue to be generally applicable performance gains that everyone can pick up, thanks mainly to cache size improvements. But if you want your application to benefit from the continued exponential throughput advances in new processors, it will need to be a well-written  concurrent (usually multithreaded) application. And thats easier said than done, because not all problems are inherently parallelizable and because concurrent programming is hard.\n I can hear the howls of protest: Concurrency? Thats not news! People are already writing concurrent applications. Thats true. Of a small fraction of developers.\n Remember that people have been doing object-oriented programming since at least the days of Simula in the late 1960s. But OO didnt become a revolution\n......", "posttime": "2021-06-29 22:35:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u514d\u8d39,\u8f6f\u4ef6,\u5348\u9910,lunch,cpu", "title": "\u514d\u8d39\u5348\u9910\u7ed3\u675f\uff1a\u5728\u8f6f\u4ef6\u4e2d\u5bf9\u5e76\u53d1\u7684\u6839\u672c\u8f6c\u5411\uff082005\uff09 ", "title_en": "The free lunch is over: a fundamental turn toward concurrency in software (2005)", "transed": 1, "url": "http://www.gotw.ca/publications/concurrency-ddj.htm", "via": "", "real_tags": ["\u514d\u8d39", "\u8f6f\u4ef6", "\u5348\u9910", "lunch", "cpu"]}, {"category": "", "categoryclass": "", "imagename": "77439563f3226e3623b6ec7772bd0d99.png", "infoid": 1068450, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83\u53ef\u4ee5\u5904\u7406MKDIR / RMDIR / LN\u7b49\u5e38\u89c4\u6587\u4ef6\u64cd\u4f5c\uff0c\u4f46\u5199\u5165FileSdoes\u4e0d\u5b58\u50a8\u4efb\u4f55\u6570\u636e\u3002\u4f46\u662f\uff0c\u6587\u4ef6\u5927\u5c0f\u4fdd\u5b58\uff0c\u56e0\u6b64\u4ece\u6587\u4ef6\u8bfb\u53d6\u7684\u8bfb\u53d6\u8868\u73b0\u7c7b\u4f3c\u4e8e/ dev / zot feed\u7684\u56fa\u5b9a\u5927\u5c0f\u3002\n \u5199\u4f5c\u548c\u8bfb\u6570\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u7b28\u86cb\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u7528\u4e8e\u4f7f\u7528\u9700\u8981\u76ee\u5f55\u7ed3\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u6027\u80fd\u3002\u5b9e\u73b0\u4e86arkernel\u6a21\u5757\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u7194\u4e1d\uff0c\u7edd\u5bf9\u6ca1\u6709\u4ece\u7528\u6237\u5230\u5185\u6838\u7a7a\u95f4\u7684\u5f00\u9500\u798f\u97f3\u5e94\u7528\u6570\u636e\uff0c\u540c\u65f6\u6267\u884c\u5199\u5165orread\u64cd\u4f5c\u3002\n   \uff03makemake -c /llib/modules/4.18.5/build m = / home / abi / lwnfs modulesmake [1]\uff1a\u8f93\u5165\u76ee\u5f55\uff06\uff0339; /usr/src/linux-headers-4.18.5&#39;\u6784\u5efa\u6a21\u5757\uff0c\u9636\u6bb52. ModPost 1 ModulesMake [1]\uff1a\u79bb\u5f00\u76ee\u5f55\uff06\uff0339; /usr/src/linux-headers-4.18.5&#39; #sinmod nullfs.ko\uff03mkdir / sinkhole\uff03mount -t nullfs none /\u6c61\u6c34\u5b54/ #mkdir / sinkhole / testdir\uff03touch / sinkhole / testdir / myfile\uff03echo foobar\uff06gt; / sinkhole / testdir / myfile\uff03ls -lah / sinkhole / testdir / myfile-rw-r  -  r-- 1\u6839root 0 11\u670820:17 / sinkhole / testdir / myfile\uff03cat / sinkhole / testdir / myfile #pv \uff06lt; / dev / zero\uff06gt; /sinkhole/testdir/myfile11.1gib 0:00:04 [3.85GIB / s] [\uff06lt; =\uff06gt; ]\uff03cat / sinkhole / testdir / myfile\uff03\n  \uff03dd if = / dev / zer = / nullfs / data bs = 1m count = 20\uff0320 + 0\u8bb0\u5f55\uff0320 + 0\u8bb0\u5f55\u6389\uff0320971520\u5b57\u8282\uff0821 MB\uff0c20 MIB\uff09\u590d\u5236\uff0c0.00392452 s\uff0c5.3 gb / s\uff03stat -c\uff05s / nullfs / data\uff0320971520\n \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e0d\u4f1a\u5c06\u4efb\u4f55\u5185\u5bb9\u590d\u5236\u5230\u7528\u6237\u7a7a\u95f4\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u96be\u9053;\u4f7f\u5b83\u8868\u73b0\u5f97\u50cf\u8bfb\u53d6/ dev / zero\uff1a\n \uff03dd if = / nullfs / data of = / tmp / realfile\uff0340960 + 0\u8bb0\u5f55\u5728\uff0340960 + 0\u8bb0\u5f55\uff0320971520\u5b57\u8282\uff0821 MB\uff0c20 MIB\uff09\u590d\u5236\uff0c0.0455288 S\uff0c461 MB / S\uff03Hexdump -C / TMP / REALFILE\uff0300000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................ |\n  \u6709\u53ef\u80fd\u4ece\u91ce\u5154\u4e2d\u6392\u9664\u53d1\u9001\u5230void\u7684\u67d0\u4e9b\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6587\u4ef6\u5339\u914d\uff06\uff0334; fstab\uff06\uff0334;\u5e94\u8be5\u4fdd\u5b58\u5728\u8bb0\u5fc6\u4e2d\uff0c\u4e00\u4e2a\u53ef\u4ee5\u7528\uff06\uff0334\u5750\u5728\u7ebd\u4f26\u5e03;\u5199=\uff06\uff0334;\u9009\u9879\u3002 \n\uff03mount -t nullfs none / sinkhole / -o write = fstab\uff03cp / etc / fstab / sinkhole / #wc -l / sinkhole / fstab 14 / sinkhole / fstab #cp / etc / passwd / sinkhole /\uff03wc -l / \u6c61\u6c34/\u901a\u8fc70 /\u6c61\u6c34/\u6bb5  \u53e6\u4e00\u79cd\u9009\u62e9\u662f\u4f7f\u7528sysfs\u754c\u9762\u6765\u66f4\u6539Fallude String\uff0c\u6a21\u5757\u5df2\u52a0\u8f7d\uff1a  \u8bf7\u8bb0\u4f4f\uff0c\u6587\u4ef6\u6570\u636e\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u6ca1\u6709\u5b8c\u6210\u8fb9\u754c\u68c0\u67e5\uff0c\u56e0\u6b64\u8fd9\u53ef\u80fd\u4f1a\u586b\u6ee1\u60a8\u7684RAM\uff0c\u4ee5\u9632\u60a8\u5c06BeeingNulled\u7684\u5927\u6587\u4ef6\u6392\u9664\u5728\u5185\u3002  -O mode =\u5728\u6302\u8f7d\u76ee\u5f55\u4e0a\u8bbe\u7f6e\u6743\u9650\uff08mount .. -o mode = 777\uff09-o uid =\u5728\u6302\u8f7d\u76ee\u5f55\u4e0a\u8bbe\u7f6euid\uff08mount .. -o uid = 1000\uff09-o gid =\u5728\u6302\u8f7d\u76ee\u5f55\u4e0a\u8bbe\u7f6egid\uff08\u6302\u8f7d\u3002 \u3002-o gid = 1000\uff09  \u7528\u771f\u5b9e\u7684\u66ff\u6362simple_statfs\u547c\u53eb\uff0c\u663e\u793a\u5728\u5185\u6838\u6a21\u5757\u8d1f\u8f7d\u671f\u95f4\u901a\u8fc7\u7684\u76ee\u5f55\u7684\u53ef\u7528\u7a7a\u95f4 ", "note_en": "It can handle regular file operations like mkdir/rmdir/ln but writing to filesdoes not store any data. The file size is however saved, so reading from thefiles behaves like reading from /dev/zero with a fixed size.\n Writing and reading is basically an NOOP, so it can be used for performancetesting with applications that require directory structures. Implemented askernel module, instead of using FUSE, there is absolutely no overhead forcopying application data from user to kernel space while performing write orread operations.\n   # makemake -C /lib/modules/4.18.5/build M=/home/abi/lwnfs modulesmake[1]: Entering directory &#39;/usr/src/linux-headers-4.18.5&#39; Building modules, stage 2. MODPOST 1 modulesmake[1]: Leaving directory &#39;/usr/src/linux-headers-4.18.5&#39;# insmod nullfs.ko # mkdir /sinkhole# mount -t nullfs none /sinkhole/# mkdir /sinkhole/testdir# touch /sinkhole/testdir/myfile# echo foobar &gt; /sinkhole/testdir/myfile# ls -lah /sinkhole/testdir/myfile-rw-r--r-- 1 root root 0 Nov 8 20:17 /sinkhole/testdir/myfile# cat /sinkhole/testdir/myfile# pv &lt; /dev/zero &gt; /sinkhole/testdir/myfile11.1GiB 0:00:04 [3.85GiB/s] [ &lt;=&gt; ] # cat /sinkhole/testdir/myfile#\n  # dd if=/dev/zero of=/nullfs/DATA bs=1M count=20# 20+0 records in# 20+0 records out# 20971520 bytes (21 MB, 20 MiB) copied, 0.00392452 s, 5.3 GB/s# stat -c%s /nullfs/DATA# 20971520\n Reading from the files does not copy anything to userspace and is an NOOP;makes it behave like reading from /dev/zero:\n # dd if=/nullfs/DATA of=/tmp/REALFILE# 40960+0 records in# 40960+0 records out# 20971520 bytes (21 MB, 20 MiB) copied, 0.0455288 s, 461 MB/s# hexdump -C /tmp/REALFILE# 00000000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 |................|\n  There is the possiblity to exclude certain files from beeing sent into the void.For example if the file matching &#34;fstab&#34; should be kept in memory, one can mountnullfs with the &#34;write=&#34; option.\n # mount -t nullfs none /sinkhole/ -o write=fstab# cp /etc/fstab /sinkhole/# wc -l /sinkhole/fstab 14 /sinkhole/fstab# cp /etc/passwd /sinkhole/# wc -l /sinkhole/passwd 0 /sinkhole/passwd\n Another option is using the sysfs interface to change the exclude stringafter the module has been loaded:\n  Keep in mind that file data is kept in memory and no boundary checks are done,so this might fill up your RAM in case you exclude big files from beeingnulled.\n       -o mode= set permissions on mount directory ( mount .. -o mode=777 ) -o uid= set uid on mount directory ( mount .. -o uid=1000 ) -o gid= set gid on mount directory ( mount .. -o gid=1000 )\n  replace simple_statfs call with real one, show free space of a directory thatcan be passed during kernel module load", "posttime": "2021-06-29 22:35:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u865a\u62df,virtual,sinkhole", "title": "nullfs\uff1a\u865a\u62df\u9ed1\u6d1e\u6587\u4ef6\u7cfb\u7edf\uff0c\u5176\u884c\u4e3a\u5982/ dev / null ", "title_en": "Nullfs: A virtual black hole file system that behaves like /dev/null", "transed": 1, "url": "https://github.com/abbbi/nullfsvfs", "via": "", "real_tags": ["\u865a\u62df", "virtual", "sinkhole"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068449, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020  \u5e10\u6237 ", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2021-06-29 22:35:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6270\u4e71,disrupt,\u521b\u9020", "title": "\u5de5\u7a0b\u5e08\u53ef\u4ee5\u6270\u4e71\u6c14\u5019\u53d8\u5316 ", "title_en": "Engineers can disrupt climate change", "transed": 1, "url": "https://spectrum.ieee.org/energy/renewables/engineers-you-can-disrupt-climate-change", "via": "", "real_tags": ["\u6270\u4e71", "disrupt", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068448, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8eYouTube\u662f\u4e3b\u5bfc\u7684\u89c6\u9891\u5e73\u53f0\uff0c\u56e0\u6b64\u5bf9\u5176\u7248\u6743\u58f0\u660e\u7cfb\u7edf\u5df2\u7ecf\u6709\u5f88\u591a\u3002\u5927\u591a\u6570\u4eba\u90fd\u4e0e\u5173\u4e8e\u6784\u6210\u516c\u5e73\u4f7f\u7528\u7684\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u5728\u7535\u5f71\u8bc4\u8bba\u4e2d\uff09\u3002 Google\u7684AI\u4e3b\u8981\u57f9\u8bad\uff0c\u4ee5\u8ba4\u8bc6\u5230\u60a8\u7684\u89c6\u9891\u4e2d\u5185\u5bb9\u7684\u5b58\u5728\u6216\u975e\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u60a8\u7684\u4f7f\u7528\u662f\u5426\u516c\u5e73\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\u53f8\u6cd5\u7ba1\u8f96\u533a\u4e4b\u95f4\u7684\u4e1c\u897f\uff09\u3002\u4f46\u662f\u6211\u5c06\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u662f\u66f4\u6e05\u6670\u7684\uff1a\u516c\u5171\u9886\u57df\u97f3\u4e50\u7684\u8868\u73b0\u3002\n \u867d\u7136\u65b0\u7684\u7ec4\u5408\u7269\u80af\u5b9a\u662f\u827a\u672f\u7684\u4f18\u70b9\uff0c\u4f46\u4e5f\u6709\u5f88\u591a\u6211\u4eec\u559c\u6b22\u8868\u6f14\u73b0\u6709\u7684\u53e4\u5178\u97f3\u4e50\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u7f8e\u56fd\uff0c\u5728\u516c\u5171\u9886\u57df\u6709\u5f88\u591a\u3002\u5815\u843d\u7684\u7248\u6743\u4f9d\u8d56\u4e8e\u8be5\u56fd\u7684\u754c\u9650\uff0c\u4f46\u51e0\u4e4e\u5728\u5341\u4e5d\u4e16\u7eaa\u548c\u65e9\u4e9b\u65f6\u5019\u53d1\u8868\u7684\u4e00\u5207\u90fd\u662f\u514d\u8d39\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002\n \u4e0d\u5e78\u7684\u662f\uff0c\u8c37\u6b4c\u4f3c\u4e4e\u4e0d\u77e5\u9053\u8fd9\u4e00\u4e8b\u5b9e\u3002\u6700\u8fd1\uff0c\u6211\u4e0a\u4f20\u4e86\u966a\u5ba1\u56e2\u5411youtube\u5236\u4f5c\u4e86\u5409\u5c14\u4f2f\u7279\u548c\u6c99\u5229\u6587\u7684\u5ba1\u5224\uff0c\u5b83\u7acb\u5373\u53d7\u5230\u56db\u4e2a\u7248\u6743\u7d22\u8d54\u7684\u547d\u4e2d\u3002\u6211\u53bb\u6bd4\u8d5b\u4ed6\u4eec - \u6211\u4ee5\u524d\u505a\u8fc7\u8fd9\u79cd\u4e8b\u60c5\uff0c\u59cb\u7ec8\u4e3a\u516c\u5171\u9886\u57df\u7684\u97f3\u4e50\u6210\u529f - \u4f46\u8fd9\u771f\u7684\u4e0d\u5e94\u8be5\u662f\u5fc5\u8981\u7684\u3002\u5ba1\u5224\u662f\u572819\u4e16\u7eaa70\u5e74\u4ee3\u53d1\u8868\u7684\u7b2c\u4e00\u6b21\u51fa\u7248\u3002\u5409\u5c14\u4f2f\u7279\u548c\u6c99\u5229\u6587\u5206\u522b\u4e8e1911\u5e74\u548c1900\u5e74\u53bb\u4e16\u3002\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u4e2a\u6b4c\u5267\u4e0d\u662f\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u7684\u7248\u6743\u3002\n \u5f53\u7136\uff0c\u867d\u7136\u97f3\u4e50\u80af\u5b9a\u5728\u516c\u5171\u9886\u57df\uff0c\u4f46\u65b0\u5f55\u97f3\u80af\u5b9a\u662f\u7248\u6743\u3002\u5982\u679c\u6211\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53d7\u7248\u6743\u4fdd\u62a4\u7684D'Oyly Carte\u516c\u53f8\u7684\u5ba1\u5224\uff0c\u6211\u4f1a\u671f\u5f85\u7248\u6743\u58f0\u660e - \u8fd9\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002\u4f46\u8fd9\u4e0d\u662f\u6211\u505a\u7684\uff01\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e0a\u4f20\u7684\u5f55\u97f3\u662f\u4e00\u4e2a\u5b8c\u5168\u65b0\u7684\uff08\u6211\u6d89\u53ca\u7684\u4eba\uff09\u3002\u4e5f\u8bb8\u5b83\u4e0e\u53e6\u4e00\u79cd\u8868\u73b0\u611f\u5230\u56f0\u60d1\uff1f\u4e0d\uff01 YouTube\u5c06\u56db\u4e2a\u90e8\u5206\u6807\u8bb0\u4e3a\u4f7f\u7528\u201c\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u201d\u6b4c\u66f2\u7684\u65cb\u5f8b - \u4f46\u6211\u6240\u8c13\u7684\u4fb5\u72af\u7684\u6240\u6709\u7ec4\u5408\u90fd\u53ea\u662f\u5ba1\u5224\u7684\u6570\u5b57\uff01\n \u6240\u4ee5AI\u5f88\u597d\u3002\u5b83\u6b63\u786e\u8bc6\u522b\u4e86\u6211\u4f7f\u7528\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u6211\u4f7f\u7528\u8c37\u6b4c\u7248\u6743\u7ec4\u6210\u6570\u636e\u5e93\u7684\u65cb\u5f8b\u4e0a\u4f20\u4e86\u65b0\u7684\u5f55\u97f3\u3002\u552f\u4e00\u7684\u95ee\u9898\u662f\u8fd9\u4e9b\u65cb\u5f8b\u5c1a\u672a\u5f97\u5230\u7248\u6743\u3002\n \u8c37\u6b4c\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\u5927\u6982\u3002\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u662f\u901a\u8fc7\u5236\u4f5c\u516c\u5171\u9886\u57df\u7684\u7ec4\u6210\u6570\u636e\u5e93\uff08\u4e00\u79cd\u7528\u4e8e\u653b\u51fb\u7248\u6743\u6807\u8bb0\u5668\u7684\u516c\u5171\u57df\u540d\u6807\u8bb0\uff09\uff0c\u4f46\u8fd9\u5c06\u662f\u4e00\u4e2a\u8270\u96be\u7684\u4e8b\u4e1a\u3002\u66f4\u7b80\u5355\u7684\u662f\u4ece\u8d21\u732e\u8005\u5230\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u7ec4\u5408\u6570\u636e\u5e93\u7684\u4e00\u4e9b\u6700\u5c0f\u4fe1\u606f\uff0c\u4f8b\u5982Composer\uff0c\u5e97\u4e3b\uff08\u9002\u7528\uff09\uff0c\u51fa\u7248\u65e5\u671f\u7b49\u3002\n \u5f53\u7136\uff0c\u8c37\u6b4c\u4e0d\u592a\u53ef\u80fd\u505a\u4efb\u4f55\u7c7b\u578b\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u771f\u6b63\u7684\u7406\u7531\u516c\u5e73\u5730\u5bf9\u5f85\u516c\u5171\u9886\u57df\u97f3\u4e50\u7684\u8868\u6f14\u8005\uff1a\u6211\u4eec\u65e0\u6cd5\u82cf\u56e0\u4e3a\u6211\u4eec\u5bf9\u6211\u4eec\u7684\u89c6\u9891\u8fdb\u884c\u4e86\u7248\u6743\u58f0\u660e\uff0c\u800c\u51fa\u7248\u5546\u53ef\u4ee5\u8d77\u8bc9\u7531\u4e8e\u7248\u6743\u4fb5\u6743\uff08\u5e76\u4e14\u8db3\u591f\u516c\u5e73\uff0c\u5f53\u4ed6\u4eec\u5b9e\u9645\u4e0a\u62e5\u6709\u7248\u6743\uff09\u3002\u56e0\u6b64\uff0c\u76f4\u523030\u5929\u7684\u4e0a\u8bc9\u671f\u9650\uff08\u4e0a\u8bc9\u5230\u7d22\u8d54\u4eba\uff01\uff09\u5230\u671f\uff0c\u4e00\u4e9b\u7248\u6743\u5de8\u9b54\u6b63\u5728\u8d5a\u94b1\uff0c\u4ece\u6211\u4eec\u7684\u65b0\u751f\u4ea7\u516c\u5171\u9886\u57df\u6b4c\u5267\u8fd0\u884c\u3002\u751a\u81f3\u66f4\u5177\u7248\u6743\u7684\u5de8\u9b54\u80af\u5b9a\u662f\u5728\u90a3\u91cc\u5236\u4f5c\u53ef\u80fd\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u91d1\u989d\uff0c\u4ed6\u4eec\u7edd\u5bf9\u4e0d\u62e5\u6709\u4e0d\u5bf9\u6b64\u7d22\u8d54\uff08\u6216\u8005\u4e0d\u77e5\u9053\u5982\u4f55\uff09\u7684\u4eba\u3002\u591a\u53ef\u60dc\u3002 ", "note_en": "Since YouTube is the dominant video platform, a lot has already been said about its copyright claims system. Most of that has had to do with questions about what constitutes fair use (in movie reviews, for instance). Google\u2019s AI is mostly trained to recognize the presence or non-presence of content in your video, not whether or not your use is fair (something that varies between jurisdictions, by the way). But what I\u2019m going to discuss here is much more clear-cut: the performance of public domain music.\n While there\u2019s certainly artistic merit in new compositions, there are also a lot of us who enjoy performing existing classical music. Luckily for us, there\u2019s lots of that in the public domain. The boundaries of what\u2019s fallen out of copyright depend on the country, but virtually everything published in the nineteenth century and earlier is free for everyone to use.\n Unfortunately, Google seems not to be aware of this fact. Recently, I uploaded a production of Gilbert and Sullivan\u2019s   Trial by Jury to YouTube, and it instantly got hit by four copyright claims. I went to go contest them \u2014 something I\u2019ve done before for this kind of thing, and always with success for public domain music \u2014 but that really shouldn\u2019t be necessary.  Trial was first published in the 1870s. Gilbert and Sullivan died in 1911 and 1900, respectively. As far as I know, this opera isn\u2019t under copyright anywhere in the world.\n Of course, while the music is definitely in the public domain, new recordings can definitely be under copyright. If I\u2019d uploaded a copyrighted D\u2019Oyly Carte Company performance of  Trial, I\u2019d expect a copyright claim \u2014 it\u2019d be totally justified. But that\u2019s not what I did! In fact, the recording I uploaded was an entirely new one (in which I was myself involved). Maybe it got confused with another performance? Nope! YouTube flagged four segments as  using the melody of \u201ccopyrighted\u201d songs \u2014 but all the compositions on which I had supposedly infringed were just numbers from  Trial!\n So the AI is good. It correctly identified what I was using, and that I\u2019d uploaded a new recording using a melodies from Google\u2019s database of copyrighted compositions. The only problem is that these melodies  aren\u2019t copyrighted.\n Could Google fix this? Probably. One way to do this could be by producing a database of public domain compositions (a sort of public domain flagger to face off against the copyright flagger), but this would be a difficult undertaking. Much simpler would be requiring some minimal information from contributors to the database of copyrighted compositions, such as composer, librettist (when applicable), publication date and so on.\n Of course, Google isn\u2019t likely to do anything of the sort, since they have no real reason to treat performers of public domain music fairly: we can\u2019t sue just because we got a copyright claim against our video, while publishers can sue for copyright infringement (and fair enough, when they actually hold a copyright). So, until the 30-day appeal period (appeals are to the claimant!) expires, some copyright troll is making money off of ads running on our new production of a public domain opera. And even more copyright trolls are definitely out there making what is likely a substantial amount of money off of stuff they definitely don\u2019t own from people who don\u2019t contest the claims (or don\u2019t know how to). What a shame.", "posttime": "2021-06-29 22:35:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u7248\u6743", "title": "\u4eb2\u7231\u7684\u8c37\u6b4c\uff1a\u5b58\u5728\u516c\u5171\u9886\u57df\u7684\u4f5c\u54c1 ", "title_en": "Dear Google: Public domain compositions exist", "transed": 1, "url": "https://blog.dbmiller.org/2021-06-28-dear-google-public-domain-compositions-exist", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u7248\u6743"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068447, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u535a\u5ba2\u6587\u7ae0\u4e2d\u6211\u4eec\uff06\uff0339; ll\u6db5\u76d6\u7cfb\u7edf\u5982\u4f55\u5f62\u6210\u96c6\u7fa4\uff0c\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u96c6\u7fa4\u4ee5\u53ca\u4ed6\u4eec\u7684\u804c\u8d23\u662f\u4ec0\u4e48\u3002\u6211\u4eec\uff06\uff0339; LL\u8fd8\u5448\u73b0\u4e86\u4e0d\u540c\u7684\u534f\u8bae\uff0c\u4ee5\u6ee1\u8db3\u4e0e\u4ed6\u4eec\u76f8\u5173\u7684\u5404\u79cd\u6743\u8861\u7684\u7fa4\u96c6\u7684\u9700\u6c42\u3002\n \u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u535a\u5ba2\u53d1\u8868\u4e00\u70b9\u66f4\u5b9e\u7528\uff0c\u6211\u4eec\u4e5f\u4f1a\u6df1\u5165\u4e86\u89e3\u4e86\u4f17\u8bae\u5458\u534f\u8bae\u4e4b\u4e00 - \u4ece\u6e38\u6cf3\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u4e2d\u7684\u4e00\u4e2a\u96b6\u5c5e\u534f\u8bae - \u4ece\u7406\u8bba\u4e0a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5728F\uff03\u4e2d\u5b9e\u73b0\u4e86\u793a\u4f8b\u3002\n  \u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u7fa4\u96c6\u5e94\u8be5\u7528\u4f5cA\uff06\uff0334;\u5355\u673a\uff06\uff0334\u7684\u5e7b\u89c9;\u5e76\u5c06\u5176\u514d\u4e8e\u4e0e - \u901a\u5e38\u52a8\u6001\u53d8\u5316 - \u4e92\u8054\u670d\u52a1\u5668\u7f51\u7edc\u7684\u6240\u6709\u590d\u6742\u6027\u5b89\u5168\u3002\n \u6b63\u5982\u4e8b\u5b9e\u8bc1\u660e\uff0c\u90a3\u91cc\u7684\u4e00\u7cfb\u5217\u534f\u8bae\u548c\u8d23\u4efb\u662f\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\u9700\u8981\u89e3\u51b3\u4ee5\u7ef4\u6301\u8fd9\u79cd\u5e7b\u89c9\u3002\u8d70\u4e0b\u81ea\u4e0b\u800c\u4e0a\uff0c\u8fd9\u91cc\u662f\u6211\u4eec\u96c6\u7fa4\u901a\u5e38\u9700\u8981\u77e5\u9053\u5982\u4f55\u56de\u7b54\u7684\u4e00\u4e9b\u95ee\u9898\uff1a\n \u5982\u4f55\u52a0\u5165\u7fa4\u96c6\uff1f\u901a\u5e38\uff0c\u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6211\u4eec\u60f3\u8981\u52a0\u5165\u7fa4\u96c6\u7684\u65b0\u670d\u52a1\u5668\u8282\u70b9\u65f6\uff0c\u5b83\u9700\u8981\u77e5\u9053\u5982\u4f55\u4e0e\u5df2\u6709\u7fa4\u96c6\u672c\u8eab\u7684\u4e00\u90e8\u5206\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\u901a\u4fe1\u3002\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u4fe1\u606f\uff1f\u5b83\uff06\uff0339;\u662f\u9700\u8981\u56de\u7b54\u7684\u95ee\u9898\uff1a\u6700\u7b80\u5355\u7684\u8bc0\u7a8d\u662f\u4e3a\u65b0\u670d\u52a1\u5f00\u59cb\u65f6\u63d0\u4f9b\u7684\u914d\u7f6e\u53c2\u6570\u63d0\u4f9b\u9759\u6001\u7684\u8054\u7cfb\u70b9\u5217\u8868\u3002\n \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u7b2c\u4e09\u65b9\u670d\u52a1\uff08\u5982\u6570\u636e\u5e93\uff0cScenul\uff0cetcd\u6216zookeeper\uff09\u7528\u4f5c\u8282\u70b9\u6ce8\u518c\u8868\u3002\u6211\u4eec\u7684\u96c6\u7fa4\u901a\u5e38\u4e0d\u4f1a\u751f\u6d3b\u5728\u771f\u7a7a\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5176\u4ed6\u5df2\u7ecf\u5efa\u7acb\u7684\u670d\u52a1\u4ee5\u83b7\u5f97\u4f18\u52bf\u3002\n \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4f4e\u5c42Kubernetes DNS\u670d\u52a1\u6216MDNS\u7684\u529f\u80fd - \u7279\u5b9a\u4e8e\u4e3b\u673a\u73af\u5883\uff0c\u4ee5\u52a8\u6001\u53d1\u73b0\u751f\u6d3b\u5728\u540c\u4e00\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\u3002 \n\u6211\u4eec\u5982\u4f55\u77e5\u9053\u5176\u4ed6\u8282\u70b9\u662f\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\uff1f\u8fd9\u662f\u6240\u8c13\u7684\u4f1a\u5458\u534f\u8bae\u7684\u533a\u57df\uff0c\u6211\u4eec\uff06\uff0339; ll\u7126\u70b9\u5728\u672c\u535a\u5ba2\u6587\u7ae0\u7684\u7b2c\u4e8c\u90e8\u5206\u3002\u5728\u52a8\u6001\u96c6\u7fa4\u4e2d\uff0c\u5b83\u901a\u5e38\u901a\u8fc7\u8ddf\u8e2a\u6d3b\u52a8\u53d1\u73b0\u7684\u8282\u70b9\u6765\u5b8c\u6210\uff0c\u7136\u540e\u5728\u8282\u70b9\u8fde\u63a5/\u79bb\u5f00\u7fa4\u96c6\u65f6\u66f4\u65b0\u548c\u95f2\u7f6e\u5b83\u4eec\u3002\u8fd9\u91cc\u7684\u8bb8\u591a\u51b3\u5b9a\u4f9d\u8d56\u4e8e\u90e8\u7f72\u65b9\u6848 - \u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u5185\u5f62\u6210\u7fa4\u96c6\u7684\u670d\u52a1\u5177\u6709\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u4ece\u4f8b\u5982eg\u3002\u79fb\u52a8\u8bbe\u5907\u7684\u7f51\u683c\u3002\u5728\u6258\u7ba1\u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u6258\u7ba1\u7684\u5e38\u89c1\u540e\u7aef\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u4fdd\u6301\u6709\u5173\u7fa4\u96c6\u72b6\u6001\u7684\u5b8c\u6574\u4fe1\u606f\u3002\u8fd9\u5c31\u662f\u6e38\u6cf3\u64cd\u4f5c\u7684\u534f\u8bae\u3002\n \u5176\u4ed6\u6210\u5458\u8d44\u683c\u534f\u8bae\uff08\u5982hyparview\uff09\u542f\u7528\u53ea\u80fd\u5728\u7fa4\u96c6\u4e2d\u6620\u50cf\u3002\u5982\u679c\u6211\u4eec\u7684\u7fa4\u96c6\u5728\u66f4\u9ad8\u7684\u5c3a\u5ea6\u4e0a\u64cd\u4f5c\u65f6\uff0c\u5219\u8fd9\u662f\u4f18\u9009\u7684\u3002\u6210\u5343\u4e0a\u4e07\u7684\u8282\u70b9\uff08\u901a\u5e38\u751f\u6d3b\u5728\u6570\u636e\u4e2d\u5fc3\u7684\u5927\u591a\u6570\u96c6\u7fa4\u670d\u52a1Don\uff06\uff0339; t\u8fbe\u5230\u51e0\u5341\u591a\u4e2a\u670d\u52a1\u5668\uff09\u3002\n \u6211\u4eec\u5982\u4f55\u5c06\u6d88\u606f\u4ece\u4e00\u4e2a\u8282\u70b9\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\uff1f\u8fd9\u901a\u5e38\u4e5f\u4e0e\u96b6\u5c5e\u534f\u8bae\u6709\u5173\u3002\u5927\u591a\u6570\u4ee5\u6570\u636e\u4e2d\u5fc3\u4e3a\u5bfc\u5411\u7684\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u5b88\u5047\u8bbe\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u8fde\u63a5\u5230\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\uff0c\u5f62\u6210\uff08\u6f5c\u5728\u5730\uff09\u5b8c\u5168\u8fde\u63a5\u7684\u7f51\u683c\u3002\n \u5728\u5176\u4ed6\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5230\u67d0\u4e9b\u8282\u70b9\u53ef\u80fd\u65e0\u6cd5\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9 - \u56e0\u4e3a\u7f51\u7edc\u7279\u5f81\u6f5c\u5728\u7684\u7f51\u7edc\u7279\u5f81\u3002\u867d\u7136\u5f53\u6211\u4eec\u8c08\u8bba\u7fa4\u96c6\u534f\u8bae\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u5ba2\u6237\u670d\u52a1\u5668\u67b6\u6784\uff0c\u4f46\u5e38\u5e38\u9700\u8981\u5e94\u7528\u66f4\u9ad8\u7ea7\u7684\u65b9\u6848\uff08\u5982\u6211\u4eec\u6240\u63d0\u5230\u7684\uff0c\uff06\uff0334;\u670d\u52a1\u5668\uff06\uff0334;\u672c\u8eab\u4e0d\u662f\u5355\u4e00\u7684\u5b9e\u4f53\uff09\u3002\n \u6211\u4eec\u5982\u4f55\u68c0\u6d4b\u5230\u6b7b\u533a\uff1f\u4e5f\u79f0\u4e3a\u5931\u8d25\u68c0\u6d4b\u3002\u8be5\u9886\u57df\u6700\u53e4\u8001\u7684\u77e5\u8bc6\u662f\u6bcf\u7acb\u5373\u5728\u9884\u671f\u8d85\u65f6\u8fb9\u754c\u5185\u7684Ping\ud83e\udc58ACK\u6d88\u606f\u7684\u7b80\u5355\u4ea4\u6362\uff0c\u6216\u8005\u53ea\u662f\u671f\u671b\u5728\u7ed9\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\u53d1\u9001\u5fc3\u8df3\u6d88\u606f\u3002\u5fc3\u8df3\u901a\u5e38\u76f4\u63a5\u8fdb\u5165\u8fd0\u8f93\u5c42\uff08\u5982TCP\uff09\uff0c\u6709\u65f6\u662f\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u80fd\u591f\u76f4\u63a5\u634e\u5e26\u5931\u8d25\u63a2\u6d4b\u5668\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u7684\u7f3a\u70b9\u662f\uff0c\u867d\u7136\u8fd0\u8f93\u5c42\u672c\u8eab\u662f\u54cd\u5e94\u7684 - \u56e0\u4e3a\u5b83\u901a\u5e38\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 - \u6211\u4eec\u7684\u5e94\u7528\u5c42\u5b9e\u9645\u4e0a\u4e0d\u662f\uff08\u4f8b\u5982\uff0c\u56e0\u4e3a\u5b83\u65e0\u9650\u671f\u5730\u6302\u8d77\u4e86\u50f5\u5316\u7684\u50f5\u5c40\uff09\u3002\u53e6\u4e00\u4ef6\u4e8b\u662f\u7f51\u7edc\u8fde\u63a5\u7684\u65f6\u95f4\u5931\u8d25\u5e76\u4e0d\u662f\u610f\u5473\u7740\uff0c\u90a3\u4e2a\u8282\u70b9\u8d62\u5f97\u4e86\uff06\uff0339; t\u8bd5\u7740\u91cd\u65b0\u542f\u52a8\u5e76\u7ee7\u7eed\u5de5\u4f5c\u3002\n \u66f4\u5e38\u89c1\u7684\u662f\uff0c\u4f1a\u5458\u534f\u8bae\u4fc3\u8fdb\u81ea\u5df1\u7684\u5fc3\u8df3\u7b97\u6cd5\u3002\u4ec0\u4e48\uff06\uff0339;\u5728\u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\uff0c\u7f3a\u5c11\u5fc3\u8df3\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\uff0c\u6211\u4eec\u7684\u8282\u70b9\u5df2\u7ecf\u6b7b\u4ea1\u3002\u5b83\u4e5f\u53ef\u80fd\u4e0d\u582a\u91cd\u8d1f\uff0c\u63d0\u4f9b\u5176\u4ed6\u4f20\u5165\u8bf7\u6c42\u3002\u50cfPhi Accuctuct Dector\u6216Lifeguard\u8fd9\u6837\u7684\u73b0\u4ee3\u7b97\u6cd5\uff08\u4e0a\u9762\u63d0\u5230\u7684\u6e38\u6cf3\u534f\u8bae\u7684\u6269\u5c55\uff09\u8003\u8651\u5230\u8fd9\u4e00\u884c\u4e3a\u3002\n \u8fd9\u4e9b\u662f\u6700\u57fa\u672c\u7684\u95ee\u9898\u9700\u8981\u77e5\u9053\u5982\u4f55\u56de\u7b54\u3002\u6211\u4eec\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u4efb\u4f55\u7fa4\u96c6\u7684\u7b2c0\u5c42\u3002\u672c\u535a\u5ba2\u6587\u7ae0\u7684\u4e3b\u8981\u90e8\u5206\u5c06\u6db5\u76d6\u5982\u4f55\u5b9e\u65bd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u534f\u8bae\u3002\u5728\u5b83\u4e4b\u4e0a\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u66f4\u9ad8\u7684\u7ea7\u522b\u529f\u80fd\uff0c\u65e8\u5728\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a \n\u6211\u4eec\u5982\u4f55\u68c0\u6d4b/\u54cd\u5e94\u5b9a\u671f\u7f51\u7edc\u5206\u533a\uff1f\u901a\u5e38\u88ab\u79f0\u4e3a\u5206\u88c2\u6027\u60c5\u666f\u7684\u95ee\u9898\u3002\u5b83\u6765\u81ea\u57fa\u672c\u89c2\u5bdf\uff0c\u5373\u5b83\uff06\uff0339;\u25a0\u4e0d\u53ef\u80fd\u5728\u7f51\u7edc\u8fb9\u754c\u4e2d\u533a\u5206\u6b7b\u533a\u3002\u5b83\u53ef\u4ee5\u5bfc\u81f4\u98ce\u9669\u975e\u5e38\u5371\u9669\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u5c06\u6211\u4eec\u7684\u96c6\u7fa4\u5206\u6210\u4e24\u4e2a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u76f8\u4fe1\uff0c\u5b83\uff06\uff0339;\u552f\u4e00\u4e00\u4e2a\u6d3b\u7740\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u751a\u81f3\u8150\u8d25\u3002\u6ca1\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6cbb\u7597\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e00\u4e9b\u7cfb\u7edf\uff08\u5982akka.net\u5206\u88c2\u5927\u8111resolvers\uff09\u6839\u636e\u6211\u4eec\u5173\u5fc3\u7684\u6743\u8861\u63d0\u4f9b\u4e0d\u540c\u7684\u7b56\u7565\u3002\n \u4e0d\u540c\u7684\u8282\u70b9\u5982\u4f55\u63a8\u7406\u548c\u51b3\u5b9a\u7fa4\u96c6\u4e2d\u7684\u72b6\u6001\uff1f\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u5728\u8d1f\u8d23\u6570\u636e\u7ba1\u7406\uff08\u5982\u5206\u5e03\u5f0f\u6570\u636e\u5e93\uff09\u7684\u7cfb\u7edf\u4e2d\u662f\u5e38\u89c1\u7684\u3002\u7531\u4e8e\u8282\u70b9\u5fc5\u987b\u80fd\u591f\u4e3a\u4f20\u5165\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u56e0\u6b64\u6709\u65f6\u5b83\u4eec\u53ef\u200b\u200b\u80fd\u4f1a\u9047\u5230\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u51b2\u7a81\u51b3\u7b56\u3002\u5728\u6ca1\u6709\u8fc7\u591a\u7684\u7ec6\u8282\u4e2d\uff0c\u4e24\u4e2a\u901a\u7528\u65b9\u6cd5\u4e24\u4e2a\u95ee\u9898\u662f\uff1a\u907f\u514d\u51b2\u7a81\uff0c\u8fd9\u901a\u5e38\u5047\u8bbe\u8282\u70b9\u5fc5\u987b\u5728\u63d0\u4ea4\u51b3\u7b56\u4e4b\u524d\u5efa\u7acb\u5173\u4e8e\u7cfb\u7edf\u72b6\u6001\u7684\u5171\u8bc6\u3002\u5b83\u901a\u5e38\u9700\u8981\u5efa\u7acb\uff08\u548c\u7ef4\u62a4\uff09\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u4e9b\u9886\u5bfc\u8005\uff0c\u901a\u8fc7\u4ef2\u88c1\u8282\u70b9\u6216\u4e24\u8005\u7ec4\u5408\u540c\u6b65\u3002\u8fd9\u662f\u7b4f\uff0cZAB\u6216Paxo\u7b49\u6d41\u884c\u534f\u8bae\u7684\u533a\u57df\u3002\n \u89e3\u51b3\u63a5\u53d7\u56fd\u5bb6\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u51fa\u73b0\u7684\u51b2\u7a81 - \u4e3b\u8981\u662f\u5728\u957f\u671f\u5ef6\u8fdf\u6216\u5468\u671f\u6027\u5730\u53d1\u751f\u7684\u6743\u8861\u6216\u5b9a\u671f\u65e0\u6cd5\u8bbf\u95ee\u7684\u670d\u52a1\u5668\u4e2d\u8fdb\u884c\u7684\u6743\u8861 - \u4f46\u662f\u4ee5\u8db3\u591f\u7684\u5143\u6570\u636e\u4e30\u5bcc\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u53ef\u4ee5\u5355\u72ec\u8fbe\u5230\u4e0e\u7ed3\u679c\u72b6\u6001\u7684\u76f8\u540c\u7ed3\u8bba\u5171\u8bc6\u3002\u8fd9\u662f\u4e00\u4e2a\u4e3b\u5bfc\u5730\u533a\u7684\u514d\u9664\u81ea\u7531\u590d\u5236\u6570\u636e\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u8bfb\u53d6eg\u3002\u5728\u8fd9\u91cc\u53d1\u5e03\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u3002\n \u5982\u4f55\u5c06\u8bf7\u6c42\u8def\u7531\u5230\u96c6\u7fa4\u5185\u90e8\u7684\u7ed9\u5b9a\u8d44\u6e90\uff1f\u6211\u4eec\u7684\u7cfb\u7edf\u72b6\u6001\u901a\u5e38\u7531\u591a\u79cd\u53ef\u5bfb\u5740\u5b9e\u4f53\u7ec4\u6210 - \u901a\u5e38\u590d\u5236\uff0c\u4ee5\u4fbf\u66f4\u9ad8\u7684\u53ef\u7528\u6027\u548c\u5f39\u6027\u3002\u7136\u800c\uff0c\u901a\u5e38\u6574\u4e2a\u72b6\u6001\u592a\u5927\uff0c\u65e0\u6cd5\u9002\u5408\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u5b83\u7ecf\u5e38\u52a8\u6001\u5730\u5728\u6574\u4e2a\u7fa4\u96c6\u4e2d\u5212\u5206\u3002\u73b0\u5728\u6073\u6c42\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u544a\u8bc9\uff0c\u54ea\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e9b\u865a\u62df\u952e\u6807\u8bc6\u7684\u5b9e\u4f53\uff1f\u5929\u771f\u7684\u65b9\u6cd5\u662f\u8be2\u95ee\u4e00\u4e9b\u8282\u70b9\u7684\u5b50\u96c6\u5e0c\u671b\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5c06\u6709\u6211\u4eec\u5e0c\u671b\u7684\u6570\u636e\u3002\u7ed9\u5b9a\u7fa4\u96c6\u7684N\u4e2a\u8282\u70b9\u548c\u5b9e\u4f53\u590d\u5236\u4e86R\u6b21\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u8c03\u7528\uff08n / r\uff09+1\u8282\u70b9\u540e\u5230\u8fbe\u6211\u4eec\u7684\u8d44\u6e90\u3002\n \u66f4\u5e38\u89c1\u7684\u65b9\u5f0f\u662f\u4fdd\u7559\u6ce8\u518c\u8868\uff0c\u8be5\u6ce8\u518c\u8868\u5177\u6709\u6709\u5173\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u5355\u4e2a\u5b9e\u4f53\u7684\u5f53\u524d\u672c\u5730\u5316\u7684\u4fe1\u606f\u3002\u7531\u4e8e\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u5c55\u793a\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u5728\u5b9e\u8df5\u4e2d\uff0c\u5728\u5206\u533a\u4e2d\u7ec4\u5408\u5e76\u5c06\u5b9e\u4f53\u5171\u540c\u5b9a\u4f4d\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u538b\u7f29\u4e86\u6ce8\u518c\u8868\u4ee5\u5b58\u50a8\u6709\u5173\u6574\u4e2a\u5206\u533a\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u5355\u4e2a\u5b9e\u4f53\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90ID\u662f\uff08PartitionD\uff0cEntityID\uff09\u7684\u590d\u5408\u952e\u3002\u8fd9\u662f\u5982\u4f55\u3002 akka.cluster.arding\u6216Riak\u6838\u5fc3\u4f5c\u54c1\u3002\u901a\u5e38\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7f13\u5b58\u4e00\u4e9b\u70ed\uff08\u5e38\u7528\uff09\u5206\u533a\u7684\u4e00\u4e9b\u5b50\u96c6\uff0c\u4ee5\u4fbf\u51cf\u5c11\u8be2\u95ee\u4e2d\u592e\u6ce8\u518c\u8868\u751a\u81f3\u6ce8\u518c\u8868\u672c\u8eab\u53ef\u4ee5\u662f\u590d\u5236\u7684\u5546\u5e97\u3002\n \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868 - \u6563\u5217\u6211\u4eec\u7684\u5b9e\u4f53\u5bc6\u94a5\uff0c\u7136\u540e\u6620\u5c04\u5230\u7279\u5b9a\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u8d1f\u8d23\u5c06\u5c5e\u4e8e\u5173\u952e\u7a7a\u95f4\u7684\u7279\u5b9a\u7a7a\u95f4\u5b50\u96c6\u7684\u8d44\u6e90\uff08\u6240\u6709\u53ef\u80fd\u7684\u54c8\u5e0c\u503c\u7684\u8303\u56f4\uff09\u3002\u6709\u65f6\u8fd9\u53ef\u80fd\u610f\u5473\u7740\uff0c\u9996\u5148\u5c1d\u8bd5\u6211\u4eec\u9519\u8fc7\u8282\u70b9\u3002\u56e0\u4e3a\u7fa4\u96c6\u72b6\u6001\u6b63\u5728\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u9700\u8981\u5e94\u7528\u66f4\u591a\u8df3\u8dc3\u3002 Microsoft Orleans\u548cCassandra\u4f7f\u7528\u8be5\u65b9\u6cd5\u662f\u6d41\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002\n \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u95ee\u8fc7\u6240\u6709\u7684\u95ee\u9898\uff0c\u90a3\u91cc\u6709\u5f88\u591a\u4e8b\u60c5\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u6211\u4eec\u7684\u7cfb\u7edf\u613f\u610f\u91c7\u53d6\u7684\u6743\u8861\u6765\u89e3\u51b3\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \n\u5728\u90a3\u91cc\uff06\uff0339;\u4eca\u5929\u7684\u673a\u4f1a\u5728\u672a\u6765\u505a\u51fa\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u7ae0\uff0c\u4eca\u5929\u6211\u4eec\uff06\uff0339; ll\u5b8c\u5168\u4e13\u6ce8\u4e8e\u6e38\u6cf3 - \u5728\u9886\u4e8b\u548c\u6301\u7eed\u51e0\u5e74\u4e2d\u7684\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u4e2d\u4f7f\u7528 - \u5982\u5b83\uff06\uff0339 ;\u5f88\u5bb9\u6613\u5b9e\u73b0\u826f\u597d\u7684\u5f00\u59cb\u3002\u4e3a\u4e86\u63d0\u9ad8\u5176\u5f39\u6027\uff0c\u51cf\u5c11\u5047\u9633\u6027\u6545\u969c\u68c0\u6d4b\uff0c\u7ed3\u8d26\u5173\u4e8e\u6551\u751f\u5458\u7684\u8c08\u5224 - \u4e00\u7cfb\u5217\u5173\u4e8e\u539f\u59cb\u6e38\u6cf3\u534f\u8bae\u7684\u6269\u5c55\u548c\u89c2\u5bdf\u3002\n   \u65b0\u8282\u70b9\u60f3\u8981\u52a0\u5165\u7fa4\u96c6 - \u5982\u4f55\u4f7f\u5176\u53d1\u751f\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u7fa4\u96c6\u4e2d\u901a\u77e5\u5173\u4e8e\u8be5\u4e8b\u4ef6\u7684\u5176\u4ed6\u8282\u70b9\uff1f\n  \u8282\u70b9\u7a81\u7136\u7ec8\u6b62\u6216\u8005\u65e0\u6cd5\u8fbe\u5230\u4efb\u4f55\u66f4\u957f\u3002\u5982\u4f55\u68c0\u6d4b\u5230\u5176\u4ed6\u4e8b\u5b9e\u7684\u4fe1\u606f\uff1f\n \u867d\u7136\u524d\u4e24\u79cd\u60c5\u51b5\u5f88\u5bb9\u6613\uff0c\u4f46\u6240\u6709\u7684\u590d\u6742\u6027\u90fd\u5e26\u6709\u7b2c\u4e09\u79cd\u60c5\u51b5\u3002\u6211\u4eec\u9700\u8981\u53d1\u73b0\u8282\u70b9\u662f\u5426\u65e0\u6cd5\u8fbe\u5230\uff0c\u4f46\u662f\uff06\uff0339; s\u8fd8\u4e0d\u591f - \u7531\u4e8e\u4e34\u65f6\u7f51\u7edc\u6545\u969c\u53ef\u80fd\u53d1\u751f\u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u5185\uff0c\u4ed6\u4eec\u901a\u5e38\u4f1a\u8fc5\u901f\u6108\u5408\u3002\u6211\u4eec\u4e0d\u60f3\u6050\u614c\u5e76\u5c06\u8282\u70b9\u6254\u51fa\u7fa4\u96c6\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u5206\u5f00\u7b2c\u4e8c\u4e2a\u4e2d\u8fbe\u5230\u5b83\u3002\u8fd9\u5c06\u5bfc\u81f4\u975e\u5e38\u6447\u6447\u6b32\u5760\u548c\u8106\u5f31\u7684\u96c6\u7fa4\u3002\n \u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u4e86\u5fc3\u8df3\u673a\u5236 - \u6bcf\u4e00\u4e2a\u73b0\u5728\uff0c\u7136\u540e\u6211\u4eec\u5c06ping\u6d88\u606f\u53d1\u9001\u5230\u5176\u4ed6\u968f\u673a\u8282\u70b9\u3002\u9884\u8ba1\u6b64\u8282\u70b9\u5c06\u5728\u9884\u671f\u8d85\u65f6\u4e4b\u524d\u7528ACK\u56de\u7b54\u3002\u7b80\u5355\u7684\u3002\n  \u73b0\u5728\uff0c\u5982\u679c\u8282\u70b9\u6ca1\u6709\u5728\u8d85\u65f6\u56de\u5e94\u7684\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u6b63\u5982\u6211\u4eec\u6240\u8bf4\uff0c\u6211\u4eec\u4e0d\u60f3\u8fc7\u5ea6\u53cd\u5e94\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u8981\u8003\u8651\u8fd9\u4e2a\u8282\u70b9\u5df2\u7ecf\u6b7b\u4e86\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u6000\u7591\u5e76\u544a\u77e5\u522b\u4eba\u6211\u4eec\u7684\u6000\u7591\u3002\u63a5\u6536\u5acc\u7591\u516b\u5366\u7684\u5176\u4ed6\u8282\u70b9\u9884\u8ba1\u5b83\u5c06\u5728\u6307\u5b9a\u7684\u8d85\u65f6\u4e2d\u786e\u8ba4 - \u5426\u5219\u4ed6\u4eec\u5c06\u8003\u8651\u4e00\u4e2a\u6076\u4f5c\u5267\uff0c\u5e76\u4ece\u5176\u7591\u4f3c\u5217\u8868\u4e2d\u5220\u9664\u8282\u70b9\u3002\n  \u73b0\u5728\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u786e\u8ba4 - \u4e3a\u4e86\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u9700\u8981\u5411\u522b\u4eba\u8be2\u95ee\u522b\u4eba\u8fdb\u884c\u9a8c\u8bc1\u3002\u6240\u4ee5\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u53e6\u4e00\u4e2a\u672a\u7ecf\u7528\u7684\u8282\u70b9\uff0c\u5e76\u8981\u6c42\u5b83\u4e3a\u6211\u4eec\u7684ping\u5acc\u7591\u4eba\uff08\u6b64\u8bf7\u6c42\u88ab\u79f0\u4e3aping-req\uff09\u3002\u73b0\u5728\uff0c\u5982\u679c\u8be5\u8c03\u89e3\u5458\u4ece\u5acc\u7591\u4eba\u90a3\u91cc\u6536\u5230ACK\uff0c\u6211\u4eec\u77e5\u9053\u8282\u70b9\u662f\u6d3b\u7740\u7684\uff0c\u53ea\u662f\u6211\u4eec\u7684\u7f51\u7edc\u8fde\u63a5\u88ab\u5207\u65ad\u4e86\u539f\u56e0\uff1a \n\u5728\u53e6\u4e00\u8fb9\uff0c\u5982\u679c\u6211\u4eec\u7684\u8c03\u89e3\u5458\u4e5f\u6ca1\u6709\u6536\u5230Ack\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e24\u53ea\u624b\u9a8c\u8bc1\uff0c\u8282\u70b9\u5bf9\u5927\u91cf\u65f6\u95f4\u6846\u67b6\u65e0\u54cd\u5e94 - \u56e0\u6b64\u5b83\u53ef\u4ee5\u786e\u8ba4\u4e3a\u6bcf\u4e2a\u4eba\u6b7b\u4ea1\u3002\n  \u5f53\u7136\u8fd9\u4e00\u70b9\u5e76\u4e0d\u610f\u5473\u7740\u8282\u70b9\u786e\u5b9e\u6b7b\u4e86 - \u4e00\u4e2a\u8f6c\u4e49\u673a\u5236\u662f\uff0c\u5982\u679c\u6000\u7591\u5c06\u83b7\u5f97\u5173\u4e8e\u81ea\u5df1\u7684\u53ef\u7591\u901a\u77e5\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5e7f\u64ad\u6d3b\u52a8\u6765\u8986\u76d6\u5b83\u3002\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u539f\u56e0\uff0c\u4e3a\u4ec0\u4e48\u6000\u7591\uff06\uff0339; t\u6309\u65f6\u56de\u5e94\uff1a\u5b83\u53ef\u80fd\u592a\u5360\u7528\uff08\u7531\u5176\u4ed6\u8bf7\u6c42\u7684\u79ef\u538b\u6216ev\u3002\u505c\u6b62 - \u4e16\u754c\u5783\u573e\u6536\u96c6\u7684\u5e95\u5c42VM\uff09\u3002\u4e5f\u53ef\u80fd\u53d1\u751f\uff0c\u6211\u4eec\u7684\u7f51\u7edc\u5206\u5f00\u4e86\u5206\u5f00\u7684\u96c6\u7fa4 - \u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u5206\u88c2\u6027\u3002\n \u6700\u7ec8\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1100\uff05\u53ef\u9760\u7684\u6545\u969c\u68c0\u6d4b\u3002\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u4ea4\u6613\u5408\u7406\u7684\u9519\u8bef\u5931\u8d25\u6bd4\uff0c\u6211\u4eec\u5982\u4f55\u8fc5\u901f\u5730\u68c0\u6d4b\u5230\u8282\u70b9\u4f5c\u4e3a\u6b7b\u4ea1 - \u901a\u5e38\u8fd9\u4e24\u4e2a\u76ee\u6807\u76f8\u4e92\u4e92\u76f8\u52aa\u529b\u3002\u5728\u6e38\u6cf3\u65b9\u9762\uff0c\u6211\u518d\u6b21\u5efa\u8bae\u67e5\u627e\u6551\u751f\u5458\uff0c\u8be5\u6551\u751f\u5458\u5730\u89e3\u51b3\u4e86\u4e00\u4e9b\u63d0\u5230\u7684\u65b9\u6848\u3002\u7136\u800c\uff0c\u6211\u4eec\uff06\uff0339; LL\u5728\u4e0b\u9762\u7684\u5b9e\u65bd\u4e2d\u6ca1\u6709\u6db5\u76d6\u5b83\uff0c\u4ee5\u4fdd\u6301\u7b80\u6d01\u3002\n  \u73b0\u5728\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5b9e\u9645\u5b9e\u65bd\u8be5\u534f\u8bae\u3002\u4e3a\u4e86\u8fd9\u6837\u505a\uff06\uff0339;\u91cd\u65b0\u5e94\u7528\u4e00\u4e9b\u7b80\u5316 - \u6211\u4eec\uff06\uff0339; ll\u8fd9\u6837\u505a\uff0c\u4f7f\u534f\u8bae\u66f4\u5bb9\u6613\u7406\u89e3\uff1a\n \u4e00\u822c\u6765\u8bf4\u8981\u5173\u8054\u7279\u5b9a\u8bf7\u6c42/\u54cd\u5e94\u6d88\u606f\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u67d0\u79cd\u5f62\u5f0f\u7684\u5e8f\u5217\u53f7\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u573a\u666f\uff0c\u5f53A\u5411B\u53d1\u9001Ping1\u8bf7\u6c42\u65f6\uff0c\u5176\u4e0eAck1\u54cd\u5e94\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u8005\u5c06\u53e6\u4e00\u4e2aPing2\u53d1\u9001\u5230B\u5e76\u63a5\u6536Ack1\u56de\u6765 - \u95ee\u9898\u662f\u5b83\u4e0d\u80fd\u544a\u8bc9\u8be5\u6d88\u606f\u7684\u95ee\u9898\u662f\u4e3a\u4e86\u786e\u8ba4\u8fd9\u6761\u6d88\u606f\u3002\u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u7f55\u89c1\uff0c\u4f46\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5982\u679c\u4e5f\u53ef\u80fd\u5bfc\u81f4\uff06\uff0334;\u590d\u6d3b\u548c\uff0334;\u6b7b\u4ea1\u8282\u70b9\u3002\n \u867d\u7136\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8fdb\u5165\u80a9\u80cc\u4e0a\u7684\u80a9\u5e26 - \u50cf\u7eb8\u5f20\u6697\u793a - \u6211\u4eec\u6bcf\u6b21\u90fd\u53ea\u662f\u516b\u5366\u6574\u4e2a\u4f1a\u5458\u56fd\u3002\u5b83\u4e0d\u662f\u6700\u4f18\u8d8a\u7684\u65b9\u5f0f\uff0c\u4f46\u5b83\uff06\uff0339; ll\u5de5\u4f5c\u8db3\u591f\u597d\u3002\n PS\uff1a\u907f\u514d\u4f7f\u7528\u6bcf\u4e2a\u516b\u5366\u53d1\u9001\u6574\u4e2a\u72b6\u6001\u7684\u5176\u4ed6\u65b9\u5f0f\u662f\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u6210\u5458\u8eab\u4efd\u89c6\u56fe\u7684\u4e00\u81f4\u54c8\u5e0c\uff0c\u5e76\u5c06\u8be5\u6563\u5217\u653e\u5728ping\u5185\u800c\u4e0d\u662f\u5b8c\u6574\u89c6\u56fe\u3002\u8fd9\u6837\u6211\u4eec\u7684ping\u5c31\u4f1a\u643a\u5e26\u54c8\u5e0c\u503c\uff0c\u8fd9\u662f\u54cd\u5e94\u8005\u53ef\u4ee5\u4e0e\u81ea\u5df1\u72b6\u6001\u7684\u54c8\u5e0c\u76f8\u6bd4\u3002\u53ea\u6709\u5f53\u54c8\u5e0c\u4e0d\u540c\uff08\u5927\u591a\u6570\u65f6\u95f4\u90fd\u6709\u5927\u90e8\u5206\u65f6\u95f4\u7684\u96c6\u7fa4\uff0c\u4ed6\u4eec\u5728\u4ed6\u4eec\u4e0d\u65f6\u7684\u65f6\u95f4\u548c\uff0339; t\uff09\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c06\u4f1a\u5458\u72b6\u6001\u653e\u5728Ack\u4e4b\u4e0a\u3002 \n\u6b64\u5904\u4f7f\u7528\u7684\u4ee3\u7801\u53ef\u5728\u672c\u53d1\u660e\u5458\u4e2d\u63d0\u4f9b\uff0c\u6211\u5efa\u8bae\u4f7f\u7528\uff0c\u5982\u6211\u4eec\uff06\uff0339; LL\u5728\u8fd9\u91cc\u4e0d\u6db5\u76d6\u6240\u6709\u5185\u5bb9\u3002\n  \u7531\u4e8e\u6211\u4eec\u4e0d\u60f3\u5904\u7406\u8282\u70b9\u5230\u8282\u70b9\u901a\u4fe1\u7684\u6240\u6709\u590d\u6742\u6027\uff0c\u6211\u4eec\uff06\uff0339; LL\u53ea\u662f\u5728\u62bd\u8c61\u4e4b\u4e0a\u6784\u5efa\u4e00\u4e2a\u6a21\u578b\uff0c\u8fd9\u5c06\u8ba9\u6211\u4eec\u8bc4\u4f30\u7b97\u6cd5\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u3002\u4ee5\u4e0b\u57fa\u672c\u5148\u51b3\u6761\u4ef6\u662f\uff1a\n \u4e00\u4e2a\u4f20\u8f93\u5c42\uff0c\u8ba9\u6211\u4eec\u5411\u53e6\u4e00\u4e2a\uff08\u53ef\u80fd\u8fdc\u7a0b\uff09\u7aef\u70b9\u53d1\u9001\u6d88\u606f\u3002\u6211\u4eec\u5e0c\u671b\u5904\u7406\u7ba1\u7406\u7f51\u7edc\u8fde\u63a5\u6216\u5e8f\u5217\u5316\u8be6\u7ec6\u4fe1\u606f\u3002\n \u53ef\u8bbf\u95ee\u7aef\u70b9\u540e\u9762\u7684\u4ee3\u7406\uff0c\u80fd\u591f\u4e3a\u591a\u4e2a\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u5e76\u4ee5\u7ebf\u7a0b\u5b89\u5168\u65b9\u5f0f\u66f4\u6539\u5176\u72b6\u6001\u3002\n \u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u6211\u5c06\u4f7f\u7528Akka.net/Kkling\u548c\u6a21\u62df\u6211\u4eec\u7684\u8282\u70b9\u4f7f\u7528\u751f\u6d3b\u5728\u540c\u4e00\u8fc7\u7a0b\u4e2d\u7684\u6f14\u5458\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u91c7\u7528\u5b83\u4ee5\u901a\u8fc7Akka.Remote\u8fde\u63a5\u7684\u4e0d\u540c\u6f14\u5458\u7cfb\u7edf\u3002\u6211\u4eec\u5c06\u6b64\u4f5c\u4e3a\u57f9\u8bad\u7ec3\u4e60 - \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u60a8\u60f3\u5728Akka\u4e2d\u4f7f\u7528\u7fa4\u96c6\uff0c\u60a8\u5df2\u7ecf\u5728Akka.Cluster\u9876\u90e8\u5efa\u7acb\u4e86\u6574\u4e2a\u751f\u6001\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u751f\u6001\u7cfb\u7edf\u90fd\u5728\u5904\u7406\u4f1a\u5458\u8d44\u683c - \u4ee5\u53ca\u5f15\u8a00\u4e2d\u63d0\u5230\u7684\u5176\u4ed6\u95ee\u9898 - \u9002\u5408\u60a8\u3002\n \u6211\u4eec\u7684\u6f14\u5458\u5c06\u901a\u8fc7\u63d0\u4f9b\u5b83\u7684\u521d\u59cb\u8054\u7cfb\u70b9\u5217\u8868\u6765\u521b\u5efa\uff1a\u8fd9\u4e9b\u662f\u5df2\u77e5\u4e3a\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\u7684\u7aef\u70b9\uff1a\n \u6253\u5f00akklinguse sys = system.create\uff06\uff0334;\u6e38\u6cf3\u7fa4\u548c\uff0334; \uff06lt; | configuration.parse config //\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5176\u4ed6//`b`\u662f\u751f\u6d3b\u5728\u5176\u4ed6\u8282\u70b9\u4e0a\u7684\u5176\u4ed6//\u6e38\u6cf3\u96c6\u7fa4\u6210\u5458\u7684\u6f14\u5458\u200b\u200brefs\u3002\u8ba9C =\u4ea7\u5375\u7cfb\u7edf\uff06\uff0334;\u8282\u70b9B\uff06\uff0334; \uff06lt; |\u9053\u5177\uff08\u6e38\u6cf3.Membership [A; B]\uff09 \n\u4e3a\u4e86\u521b\u5efa\u8be5\u6f14\u5458\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u52a0\u5165\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\uff06\uff0339; ll\u5c1d\u8bd5\u4ece\u63d0\u4f9b\u7684\u5217\u8868\u4e2d\u6311\u9009\u7aef\u70b9\uff08\u5b83\u5bf9\u5e94\u4e8eAkka.Cluster\u4e2d\u7684\u79cd\u5b50\u8282\u70b9\u5730\u5740\uff09\u5e76\u5411\u5b83\u4eec\u53d1\u9001\u52a0\u5165\u8bf7\u6c42\u3002\u5982\u679c\u7fa4\u96c6\u8282\u70b9\u6f14\u5458\u5c06\u63a5\u6536\u8fd9\u6837\u7684\u8bf7\u6c42\uff0c\u5219\uff06\uff0339; s\u4e49\u52a1\u901a\u8fc7\u5411\u6240\u6709\u7fa4\u96c6\u6210\u5458\u53d1\u9001\u52a0\u5165\u54cd\u5e94\uff08\u5305\u62ec\u8bf7\u6c42\u8005\uff09\u6765\u63a5\u53d7\u5b83\u3002\n \u5982\u679c\u52a0\u5165WORN\u548c\uff0339; T\u5230\u8fbe\uff0c\u4f8b\u5982\u3002\u56e0\u4e3a\u6211\u4eec\u9519\u8bef\u5730\u914d\u7f6e\u4e86\u6211\u4eec\u7684\u7fa4\u96c6\u548c\u5176\u4ed6\u7aef\u70b9\uff0c\u6240\u4ee5\u8fbe\u5230\u4e86\uff06\uff0339; t and\uff0339;\u6211\u4eec\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u5e76\u4ece\u5217\u8868\u4e2d\u5c1d\u8bd5\u53e6\u4e00\u4e2a\u8282\u70b9\u3002\u8fd9\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n \u8ba9\u6210\u5458\u8eab\u4efd\uff08\u79cd\u5b50\uff1a\u7aef\u70b9\u5217\u8868\uff09\uff08CTX\uff1aActor\uff06lt; _\uff06gt;\uff09=\u8bbe\u6001= {mylising = {endpoint = ctx.self} Active = set.empty\u5acc\u7591\u4eba= map.empty}\uff08* actor\u4ee3\u7801\u7684\u5176\u4f59\u90e8\u5206.. \u3002*\uff09\u8ba9REC\u52a0\u5165\u5dde\u53d6\u6d88=\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e|\u804c\u5de5[]  - \uff06gt;\u8fd4\u56de\u505c\u6b62//\u672a\u80fd\u52a0\u5165\u4efb\u4f55\u4f1a\u5458|\u804c\u5de5\uff08\u4e0b\u4e00\u4e2a::\u5269\u4e0b\uff09 - \uff06gt;\u4e0b\u4e00\u4e2a\uff06lt;\u52a0\u5165State.Myself\u8ba9Call\u53d6\u6d88= CTX.schedule Connectimeout CTX.Self\uff08\u5269\u4f59\u5269\u4f59\uff09\u8fd4\u56de\uff01\u52a0\u5165\u5dde\u53d6\u6d88|\u52a0\u5165\u516b\u5366 - \uff06gt; CANCEL.CANCEL\uff08\uff09//\u53d6\u6d88\u52a0\u5165\u8d85\u65f6\u8fd4\u56de\uff01\u6210\u4e3a\u5dde\u516b\u5366|\u5f53peer = statem.myself  - \uff06gt; //\u5efa\u7acb\u65b0\u7fa4\u96c6\u53d6\u6d88.Cancel\uff08\uff09//\u53d6\u6d88\u52a0\u5165\u8d85\u65f6\u8fd4\u56de\uff01\u6210\u4e3a\u5dde\uff08set.singleton state.myself\uff09| _  - \uff06gt;\u8fd4\u56de\u672a\u5904\u7406\u7684}\u5339\u914d\u79cd\u5b50| []  - \uff06gt;\u6210\u4e3a\u5dde\uff08set.singleton state.myself\uff09|\u79cd\u5b50::\u5269\u4e0b - \uff06gt;\u79cd\u5b50\uff06lt;\u52a0\u5165State.Myself\u8ba9Call = CTX.Schedule Connectimeout CTX.Self\uff08\u5269\u4f59\u5269\u4f59\uff09\u52a0\u5165\u5dde\u53d6\u6d88\n \u63a5\u6536\u5230\u52a0\u5165\u7684\u8bf7\u6c42Actor\u5c06\u81ea\u5df1\u89c6\u4e3a\u7fa4\u96c6\u7684\u64cd\u4f5c\u6210\u5458\uff0c\u51c6\u5907\u5de5\u4f5c\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u5b83\u5c06\u89e6\u53d1\u81ea\u8eab\uff0c\u4ee5\u5b9a\u671f\u68c0\u67e5\u5176\u4ed6\u4eba\u662f\u5426\u4fdd\u6301\u54cd\u5e94\uff1a\n \u8ba9\u5408\u5e76\u516b\u5366\u72b6\u6001= {youst active = state.active + gossip}\u8ba9berseready\u72b6\u6001gossip = ctx.schedule pinginterval ctx.self nextround |\uff06gt;\u5ffd\u7565\u5c31\u7eea\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09\n \u5982\u524d\u6240\u8ff0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u516b\u5366\u53ea\u662f\u4e00\u6574\u5957\u6d3b\u52a8\u96c6\u7fa4\u6210\u5458\uff0c\u800c\u51c6\u5907\u597d\u662f\u7528\u4e8e\u6807\u51c6\u7fa4\u96c6\u6d3b\u52a8\u7684\u6f14\u5458\u884c\u4e3a\uff1a\n \u8ba9Recrade State =\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4f7f\u7528//\u5176\u4ed6\u6d88\u606f\u5904\u7406\u7a0b\u5e8f| _  - \uff06gt;\u8fd4\u56de\u672a\u5904\u7406} \n\u7531\u4e8e\u6211\u4eec\u4ece\u8bf7\u6c42\u8005\u65b9\u9762\u8986\u76d6\u4e86\u52a0\u5165\u7a0b\u5e8f\uff0c\u56e0\u6b64\u4e3a\u64cd\u4f5c\u96c6\u7fa4\u6210\u5458\u63d0\u4f9b\u4e86\uff1a\n \u6bd4\u8d5b\uff01 ctx.receive |.\u52a0\u5165peer  - \uff06gt;\u8ba9Gossip = Set.Add Peer\u72b6\u6001\u3002Active Let Msg =\u52a0\u5165\u516b\u5366\u516b\u5366|\uff06gt; set.remove state.myself |\uff06gt; set.iter\uff08\u6709\u8da3\u7684peer  - \uff06gt; peer.endpoint\uff06lt; msg\uff09\u8fd4\u56de\uff01\u51c6\u5907\u5c31\u7eea{\u72b6\u6001\u4e0eactive = gossip} |\u52a0\u5165\u516b\u5366 - \uff06gt;\u8fd4\u56de\uff01\u51c6\u5907\u597d\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09//\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\n \u6b63\u5982\u6211\u4eec\u6240\u8bf4\uff0c\u4e00\u65e6\u65b0\u6210\u5458\u8bd5\u56fe\u52a0\u5165\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6211\u4eec\u7684\u6d3b\u52a8\u6210\u5458\u72b6\u6001\u66f4\u65b0\u5e76\u5c06\u5176\u6c47\u62a5\u5230\u52a0\u5165\u6d88\u606f\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u6210\u5458\uff0c\u56e0\u6b64\u5b83\u4eec\u4e5f\u53ef\u4ee5\u66f4\u65b0\u3002\n \u73b0\u5728\uff0c\u8ba9\uff06\uff0339; s\u8986\u76d6ping\u8fc7\u7a0b\u3002\u9996\u5148\uff0c\u6211\u4eec\u63d0\u5230\u6211\u4eec\u73b0\u5728\u60f3\u8981\u89e6\u53d1\u6211\u4eec\u7684\u4f1a\u5458\uff0c\u7136\u540e - \u5f53\u6211\u4eec\u8ba1\u5212\u6210\u6bd4\u8d5b\u4e2d\u7684Nextround\u4e8b\u4ef6\u65f6\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u3002\u73b0\u5728\u5b83\u5982\u4f55\u5de5\u4f5c\uff1f\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u968f\u673a - \u9664\u4e86\u5f53\u524d\u7684\u4e00\u4e2a\u6ca1\u6709\u7591\u4f3c\uff08\u5acc\u7591\u4eba\u662f\uff06\uff0339; t\u6309\u65f6\u56de\u590dping\u7684\u8282\u70b9\uff09 - \u5e76\u5411\u5b83\u53d1\u9001ping\u8bf7\u6c42\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u5b89\u6392\u4e86\u8be5\u8bf7\u6c42\u5b8c\u6210\u7684\u8d85\u65f6\uff1a\n \u8ba9\u9009\u62e9\u540c\u884c=\u5339\u914dset.count\u5bf9\u7b49\u4f530  - \uff06gt;\u6ca1\u6709|\u6570 - \uff06gt;\u8ba9idx = threadlocalrandom.current.next\u8ba1\u6570\u4e00\u4e9b\uff08SEQ.ITEM IDX\u5bf9\u7b49\u4f53\uff09\u8ba9\u5c31\u7eea\u72b6\u6001= ACTOR {\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e| nextround  - \uff06gt; ctx.schedule pinginterval ctx.self nextround |\uff06gt;\u5ffd\u7565\u8ba9\u5acc\u7591\u4eba= state.suspects |\uff06gt; Map.Toseq |\uff06Gt; seq.map fst |\uff06gt; set.ofseq\u8ba9\u522b\u4eba=\uff08set.remove state.myself state.active\uff09 - \u5acc\u7591\u4eba//\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u6210\u5458\uff0c\u9664\u4e86\u81ea\u6211\u800c\u4e0d\u662f\u6807\u8bb0\u4e3a\u6000\u7591\u5339\u914d\u9009\u62e9\u6ca1\u6709 - \uff06gt;\u8fd4\u56de\uff01\u5c31\u7eea\u72b6\u6001|\u4e00\u4e9b\u540c\u4f34 - \uff06gt; //\u5c06ping\u8bf7\u6c42\u53d1\u9001\u5230\u8be5\u5bf9\u7b49\u4f53\u548c\u8c03\u5ea6\u8d85\u65f6peer.endpoint\uff06lt; ping\uff08state.active\uff0cctx.self\uff09\u8ba9\u53d6\u6d88= ctx.schedule pingtimeout ctx.self\uff08pingtimeout peer\uff09\u8ba9skiplist = set.ofArray [|\u5dde\u3002\u540c\u4f34|]\u56de\u6765\uff01\u51c6\u5907{state with suspects = map.add peer\uff08\u53d6\u6d88\uff0cwaitpingack skiplist\uff09state.suspects} | ping\uff08\u516b\u5366\uff0c\u53d1\u4ef6\u4eba\uff09 - \uff06gt; //\u56de\u590d\u4f20\u5165ping ricking sender\uff06lt ;! Pingack\uff08\u5dde.MYSELF\uff0cState.active\uff09\u8fd4\u56de\uff01\u51c6\u5907\u597d\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09//\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f}\n \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684\u5acc\u7591\u4eba\u6620\u5c04\u6765\u8ddf\u8e2a\u8d85\u65f6\u53d6\u6d88\u548c\u8df3\u8fc7\u5217\u8868\u3002\u4ec0\u4e48\uff06\uff0339;\u8df3\u8fc7\u5217\u8868\uff1f\u6211\u4eec\u5f88\u5feb\u63a9\u76d6\u4e86\u3002\u6b63\u5982\u6211\u4eec\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5f53Pingack\uff06\uff0339; t\u51c6\u65f6\u5230\u8fbe\u65f6\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u53e6\u4e00\u4e2a\u6210\u5458\uff08\u968f\u610f\uff09\u5e76\u8981\u6c42\u5b83\u4f7f\u7528pingreq\u6d88\u606f\u6765\u4e3a\u6211\u4eec\u5ba1\u89c6\u6211\u4eec\u7684\u5acc\u7591\u4eba\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u8bd5\u56fe\u5728\u6211\u4eec\u7684\u6545\u969c\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u51cf\u8f7b\u5047\u5426\u5b9a\u7684\u98ce\u9669\uff1a\n \u8ba9\u51c6\u5907\u72b6\u6001=\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e| Pingreq\uff08\u5acc\u7591\u4eba\uff0c\u516b\u5366\uff0c\u53d1\u4ef6\u4eba\uff09 - \uff06gt;\u8ba9\u53d6\u6d88= ctx.schedule IndirectpingTimeout CTX.Self\uff08PingTimeout Suspect\uff09\u5acc\u7591\u6b21\u6570.EndPoint\uff06lt; ping\uff08state.active\uff0cctx.self\uff09\u9000\u8d27\uff01\u51c6\u5907{Merge Gossip\u5dde\u4e0e\u5acc\u7591\u4eba= map.add\u5acc\u7591\u4eba\uff08\u53d6\u6d88\uff0c\u7b49\u5f85\uff0c\u7b49\u5f85reqack\uff09state.suspects \n...... ", "note_en": "In this blog post we&#39;ll cover how systems form clusters, what clusters actually are and what are their responsibilities. We&#39;ll also present different protocols responsible to serve the needs of the clusters with a various tradeoffs associated with them.\n To make this blog post a bit more practical, we&#39;ll also go in depth of one of the membership protocols - known as under SWIM acronym - from theoretical standpoint up to example implementation in F#.\n  From a user perspective, cluster is supposed to serve as an illusion of a &#34;single machine&#34; and keep it  safe from all of complexity coming from communicating with - usually dynamically changing - network of interconnected servers.\n As it turns out, there&#39;s a multitude of protocols and responsibilities that services being a part of cluster need to solve to maintain that illusion. Going bottom-up, here are some of the questions our cluster usually needs to know how to answer for:\n How to join the cluster? Usually when we have a new server node, which we want to join to the cluster, it needs to know how to communicate with another node that&#39;s already part of the cluster itself. Where can it find that information? It&#39;s the question that needs to be answered: The simplest trick is to provide a static list of contact points as a configuration parameter provided at the start of new service.\n Another way is to use 3rd party service (like database,  Consul,  etcd or  ZooKeeper) to serve as a node registry. Our cluster usually doesn&#39;t live in vacuum, and sometimes we can reuse other already established services for our advantage.\n In some situations, we could leverage capabilities of lower layers - like  Kubernetes DNS service or  mDNS - that are specific to a host environment to dynamically discover other devices living in the same network.\n How do we know what other nodes are part of the cluster? This is area of so called membership protocols on which we&#39;ll focus in second part of this blog post. In dynamic clusters it&#39;s usually done by keeping track of a active discovered nodes, then updating and gossiping them once a node joins/leaves the cluster. A lot of decisions here depend on deployment scenario - services forming a cluster within the same datacenter have different characteristics from eg. meshes of mobile devices. In cases of common backend services hosted in the same datacenter, each node keeps a full information about the state of the cluster. This is how protocols like  SWIM operate.\n Other membership protocols (like  HyParView) enable to have only partial view on the cluster. This is preferable in cases when our cluster operates on much higher scale eg. thousands of nodes (usually most clustered services living in datacenters don&#39;t reach over dozens-to-hundreds of servers).\n How do we send messages from one node to another? This usually is also related to a membership protocol. Most datacenter-oriented systems can make conservative assumption that every node in the system can connect to every other node, forming (potentially) a fully connected mesh.\n In other scenarios, we need to take into account that some of the nodes may not be able to connect to others - because of the underlying network characteristics. While the most common case of that is client-server architecture, when we&#39;re talking about cluster protocols, often more advanced scenarios need to be applied (as we mentioned, &#34;server&#34; itself is not a single entity).\n How do we detect dead nodes? Also known as failure detection. The oldest known trick in that area is a simple exchange of PING \ud83e\udc58 ACK messages within expected timeout boundaries every now and then, or simply expecting every connection to send a heartbeat message within given time interval. Heartbeats are often implemented directly into transport layer (like TCP), sometimes we&#39;re able to piggyback failure detector directly on top of it. Downside of that solution is that while transport layer itself is responsive - because it&#39;s usually managed by underlying OS - our application layer could in fact be not (eg. because it hangs deadlocked indefinitely). Another thing is that temporal failure of network connection doesn&#39;t has to mean, that node won&#39;t try to restart it and continue to work.\n More often, membership protocols promote their own heartbeat algorithms. What&#39;s worth noticing here, missing heartbeat doesn&#39;t necessarily mean, that our node is dead. It could as well be overwhelmed with serving other incoming requests. Modern algorithms like  Phi accural failure dector or  Lifeguard (an extension to SWIM protocol mentioned above) take that behavior into account.\n These are the most basic questions cluster needs to know how to answer. We could call it a layer 0 of any cluster. The main part of this blog post will cover how to implement protocol addressing these issues. On top of it, there are many other higher level features, aiming to solve problems like:\n How can we detect/respond to periodic network partitions? A problem often known as  split-brain scenario. It comes from basic observation that  it&#39;s not possible to differentiate dead node from unresponsive one over network boundary. It can lead to very risky situations, like splitting our cluster in two, each one believing, it&#39;s the only one alive and causing data inconsistency or even corruption. There&#39;s no one simple cure for that, that&#39;s why some systems (like  Akka.NET split brain resolvers) offer different strategies depending on the tradeoffs, that we care for.\n How different nodes can reason and decide about the state in the cluster? This case is usually common in systems that are responsible for data management (like distributed databases). Since nodes must be able to serve incoming requests, sometimes they may possibly run into making conflicting decisions about the state of the system. Without going into too much details, two generic approaches two this problem are: Avoiding conflicts, which usually assumes that nodes must establish consensus about state of the system before committing to their decisions. It usually requires establishing (and maintaining) some leader among the nodes, synchronizing via quorum of nodes or combination of two. This is area of popular protocols such as  Raft,  ZAB or Paxos.\n Resolving conflicts which accepts the possibility of state conflict to appear - mostly as a tradeoff happening in face of long latencies or periodically unreachable servers - but enriches it with enough metadata so that all nodes individually can reach the same conclusion about the result state without need of consensus. This is a dominant area of Conflict Free Replicated Data Types, which you could read about eg. in a  blog post series published here.\n How to route requests to a given resource inside of cluster? The state of our system usually consists of multiple addressable entities - which are often replicated for higher availability and resiliency. However usually the entire state is too big to fit into any single node. For this reason it&#39;s often partitioned all over the cluster  dynamically. Now this begs a question: how to tell, which node contains an entity identified by some virtual key? Naive approach would be to ask some subset of nodes in hope that at least one of them will have a data we hope for. Given cluster of  N nodes and entity replicated  R times, we should be able to reach our resource after calling  (N/R)+1 nodes.\n More common way is to keep a registry having an information about current localization of every single entity in a system. Since this approach doesn&#39;t scale well, in practice we group and co-locate entities together within partitions and therefore compress the registry to store information about entire partition rather than individual entity. In this case resource ID is composite key of  (partitionID, entityID). This is how eg.  Akka.Cluster.Sharding or  riak core works. Frequently some subset of hot (frequently used) partitions may be cached on each node for to reduce asking central registry or even the registry itself may be a replicated store.\n We could also use  distributed hash tables - where our entity key is hashed and then mapped into specific node that is responsible for holding resources belonging to that specific subset of key space (a range of all possible hash values). Sometimes this may mean, that we miss node at first try eg. because cluster state is changing, and more hops need to apply.  Microsoft Orleans and Cassandra are popular solutions using that approach.\n As you can see, even though we didn&#39;t asked all questions, there&#39;s already a lot of things happening here and the same problems may be solved with different approaches depending on the tradeoffs our system is willing to take.\n While there&#39;s a chance to make a separate article about each of these in the future, today we&#39;ll focus solely on a  SWIM - used in systems such as Consul and hugely popularized over last few years - as it&#39;s easy to implement for a good start. To improve its resiliency and reduce false positive failure detection, checkout this talk about  Lifeguard - a set of extensions and observations about original SWIM protocol.\n   New node wants to join the cluster - how to make that happen and how to inform other nodes in the cluster about that event?\n  Node was abruptly terminated or cannot be reached any longer. How to detect that an inform others about the fact?\n While first two cases are pretty easy, all of the complexity comes with the third case. We need to discover if node cannot be reached, but that&#39;s not enough - since temporary network failures may happen even inside the same datacenter, they usually get healed fairly fast. We don&#39;t want to panic and throw the node out of the cluster just because we couldn&#39;t reach it in split second. This would lead to very shaky and fragile cluster.\n We&#39;ve already mentioned heartbeat mechanism - every now and then we&#39;re going to send a PING message to other random node. This node is expected to answer with ACK before expected timeout. Easy.\n  Now, what happens if node didn&#39;t respond under timeout? As we said, we don&#39;t want to overreact. So we don&#39;t consider this node dead yet. Instead we consider it to be  suspect and inform others about our suspicion. Other nodes that received suspect gossip expect it to be confirmed within specified timeout - otherwise they will consider it a hoax, and remove node from their suspected list.\n  Now all we need is confirmation - in order to do so, we need to ask someone else for verification. So we&#39;re going pick another unsuspected node and ask it to ping  suspect for us (this request is known as PING-REQ). Now if that mediator managed to receive ACK from the  suspect, we know that node is alive, just our network connection was severed for some reason:\n  On the other side, if our mediator didn&#39;t received ACK either, we now have two-hand verification that node is unresponsive for significant time frame - therefore it can be confirmed as dead to everyone.\n  Of course this doesn&#39;t mean that node is indeed dead - one escape mechanism is that if suspect will get a suspect notification about itself, it can override it by broadcasting alive message. There maybe different reasons, why  suspect didn&#39;t respond on time: it may be too occupied (either by backlog of other requests or eg. stop-the-world garbage collection of underlying VM). It may also happen, that our network have split the cluster apart - this phenomenon is known as a split-brain.\n Ultimately there&#39;s no way to ensure 100% reliable failure detection. We&#39;re just trading reasonable ratio of false failure and how quickly can we detect node as dead - usually these two goals work against each other. In terms of SWIM, I again recommend to lookup for  Lifeguard, which addresses some of the mentioned scenarios. However we&#39;ll not cover it in our implementation below to keep it succinct.\n  Now, we&#39;re going to actually implement that protocol. In order to do so we&#39;re going to apply some simplifications - we&#39;ll do so to make protocol easier to comprehend:\n In general to associate specific request/response messages, we should use some form of sequence numbers. This can result in scenario, when A sends PING1 request to B for which is responds with ACK1, some time later A sends another PING2 to B and receives ACK1 back - the problem was that it cannot tell which PING this message was acknowledgment for. This kind of situation is very rare, but not impossible. If may also lead to &#34;resurrecting&#34; dead nodes.\n While we&#39;re going to piggyback gossip on top of pings - like the paper suggests - we&#39;re simply  gossip entire membership state every time. It&#39;s not the most optimal way, but it&#39;ll work good enough.\n PS:  Other way of avoiding sending entire state with every gossip is to compute consistent hash of current node membership view and put that hash inside of ping instead of full view. This way our PING will carry just a hash value, which responder may compare with hash of its own state. Only if hashes differ (in clusters with small churn of nodes most of the time they don&#39;t), we&#39;re putting membership state on top of ACK.\n The code used here is available in  this gist, which I recommend to use, as we&#39;ll not cover everything here.\n  Since we don&#39;t want to deal with all complexities of node-to-node communication, we&#39;ll just build a model on top of abstractions, that will let us evaluate the algorithm without derailing into solving other problems. The basic prerequisites here are:\n A transport layer that will just let us send message to another (possibly remote)  endpoint. We don&#39;t want to deal with managing network connections or serialization details.\n An agent accessible behind the  endpoint, able to serve multiple requests and change its state in thread safe manner.\n For these reasons, I&#39;m going to use Akka.NET/Akkling and model our nodes using actors living in the same process. You can easily adopt it to different actor systems connected over Akka.Remote. We keep this as a training exercise - in practice if you want to use clusters in akka, you already have entire ecosystem built on top of Akka.Cluster, which handles membership - and other problems mentioned in introduction - for you.\n Our actor will be created by providing it an initial list of contact points: these are the endpoints known to be part of the cluster:\n open Akklinguse sys = System.create &#34;swim-cluster&#34; &lt;| Configuration.parse config// In this example `a` and `b` are actor refs for other // SWIM cluster members living on other nodes. let c = spawn sys &#34;node-b&#34; &lt;| props (Swim.membership [a; b])\n In order to create that actor first we need to deal with a joining process. The idea is that we&#39;ll try to pick endpoints from the provided list (it corresponds to seed node addresses in Akka.Cluster ) and send a  Join request to them. If cluster node actor will receive such request, it&#39;s obliged to accept it by sending  Joined response to ALL cluster members (including requester).\n In case when  Joined wouldn&#39;t arrive eg. because we misconfigured our cluster and other endpoint couldn&#39;t be reached, we wait for some time and try another node from the list. This could be represented as:\n let membership (seeds: Endpoint list) (ctx: Actor&lt;_&gt;) = let state = { Myself = { Endpoint = ctx.Self } Active = Set.empty Suspects = Map.empty } (* rest of the actor code... *) let rec joining state cancel = actor { match! ctx.Receive() with | JoinTimeout [] -&gt; return Stop // failed to join any members | JoinTimeout (next::remaining) -&gt; next &lt;! Join state.Myself let cancel = ctx.Schedule joinTimeout ctx.Self (JoinTimeout remaining) return! joining state cancel | Joined gossip -&gt; cancel.Cancel() // cancel join timeout return! becomeReady state gossip | Join peer when peer = state.Myself -&gt; // establish new cluster cancel.Cancel() // cancel join timeout return! becomeReady state (Set.singleton state.Myself) | _ -&gt; return Unhandled } match seeds with | [] -&gt; becomeReady state (Set.singleton state.Myself) | seed::remaining -&gt; seed &lt;! Join state.Myself let cancel = ctx.Schedule joinTimeout ctx.Self (JoinTimeout remaining) joining state cancel\n After receiving the  Joined request actor associates itself as a operating member of the cluster, ready to work. From now on it will trigger itself to periodically check if others remain responsive:\n let merge gossip state = { state with Active = state.Active + gossip }let becomeReady state gossip = ctx.Schedule pingInterval ctx.Self NextRound |&gt; ignore ready (merge gossip state)\n As mentioned before, in this case  gossip is just a full set of active cluster members, while  ready is actor behavior used for standard cluster activities:\n let rec ready state = actor { match! ctx.Receive() with // other message handlers | _ -&gt; return Unhandled}\n Since we covered joining procedure from requestor side, let&#39;s do that for operating cluster member as well:\n match! ctx.Receive with| Join peer -&gt; let gossip = Set.add peer state.Active let msg = Joined gossip gossip |&gt; Set.remove state.Myself |&gt; Set.iter (fun peer -&gt; peer.Endpoint &lt;! msg) return! ready { state with Active = gossip } | Joined gossip -&gt; return! ready (merge gossip state)// other handlers\n As we said, once new member tries to join, we simply update our active members state and gossip it to all other members in  Joined message, so they could update it as well.\n Now, let&#39;s cover pinging process. First we mentioned that we want to trigger our member every now and then - you could already see that when we scheduled  NextRound event in  becomeReady function. Now how it will work? We&#39;re going to pick one node at random - other than current one and not being suspected (suspects are nodes that didn&#39;t reply to pings on time) - and send a  Ping request to it. In the meantime we also schedule a timeout for that request to complete:\n let pick peers = match Set.count peers with | 0 -&gt; None | count -&gt; let idx = ThreadLocalRandom.Current.Next count Some (Seq.item idx peers) let ready state = actor { match! ctx.Receive() with | NextRound -&gt; ctx.Schedule pingInterval ctx.Self NextRound |&gt; ignore let suspects = state.Suspects |&gt; Map.toSeq |&gt; Seq.map fst |&gt; Set.ofSeq let others = (Set.remove state.Myself state.Active) - suspects // pick one member at random, other than self and not marked as suspected match pick others with | None -&gt; return! ready state | Some peer -&gt; // send Ping request to that peer and schedule timeout peer.Endpoint &lt;! Ping(state.Active, ctx.Self) let cancel = ctx.Schedule pingTimeout ctx.Self (PingTimeout peer) let skipList = Set.ofArray [| state.Myself; peer |] return! ready { state with Suspects = Map.add peer (cancel, WaitPingAck skipList) state.Suspects } | Ping (gossip, sender) -&gt; // reply to incoming ping right away sender &lt;! PingAck(state.Myself, state.Active) return! ready (merge gossip state) // other handlers}\n Here we&#39;re using our suspects map to keep track of timeout cancellation and skip list. What&#39;s a skip list? We&#39;ll cover it soon. As we mentioned, when  PingAck doesn&#39;t arrive on time, we&#39;re going to pick another member (at random) and ask it to ping our suspect for us using  PingReq message. This way we try to mitigate risk of false negatives in our failure detection algorithm:\n let ready state = actor { match! ctx.Receive() with | PingReq (suspect, gossip, sender) -&gt; let cancel = ctx.Schedule indirectPingTimeout ctx.Self (PingTimeout suspect) suspect.Endpoint &lt;! Ping(state.Active, ctx.Self) return! ready { merge gossip state with Suspects = Map.add suspect (cancel, WaitPingReqAck) state.Suspects\n......", "posttime": "2021-06-29 22:34:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u7fa4\u96c6,cluster,\u8282\u70b9", "title": "\u8ba9\u4f60\u7684\u7fa4\u96c6\u6e38\u6cf3\uff082020\uff09 ", "title_en": "Make your cluster SWIM (2020)", "transed": 1, "url": "https://bartoszsypytkowski.com/make-your-cluster-swim/", "via": "", "real_tags": ["2020", "\u7fa4\u96c6", "cluster", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068445, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6beb\u6df7\u5ba2\u6237\u7aef\u6709\u591a\u79cd\u8bed\u8a00\u3002\u5bf9\u4e8e\u7ffb\u8bd1\u8fc7\u7a0b\uff0c\u6211\u4eec\u6700\u8fd1\u4eceTransifex Online Platform\u79fb\u52a8\u5230WebLate\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u6211\u4eec\u7684\u7ffb\u8bd1\u5386\u53f2\uff0c\u63a8\u7406\u548c\u76ee\u524d\u7684\u65b9\u6cd5\u3002\n  \u5728\u6700\u540e\u4e00\u4e2a\u5feb\u7167\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u8c6a\u5730\u4ecb\u7ecd\u5373\u5c06\u5230\u6765\u76841.4.0 stablerelelease\u7684\u7b2c\u516d\u6b21\u5f00\u53d1\u5feb\u7167\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u5feb\u7167\u65e8\u5728\u6210\u4e3a\u6700\u540e\u4e00\u4e2a\u91ca\u653e\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5e76\u4e0e\u5176\u53d1\u5e03\u4e00\u6837\uff0c\u6211\u4eec\u6b63\u5728\u5f15\u51651.4.x\u7cfb\u5217\u7684Freature-Freeze\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u53ea\u6709\u9519\u8bef\u4fee\u590d\u5c06\u8fdb\u5165\u8fd9\u4e2a\u7cfb\u5217\u3002\n \u5728\u7406\u89e3\u91ca\u653e\u7684\u610f\u4e49\u4e4b\u540e\u662f\u5feb\u7167\u7248\u672c\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e0b\u8f7d\u7a7a\u95f4\u4e0b\u8f7d\u65b0\u7248\u672c\u3002\n      \u72ac\u6b4c\u662f\u7b2c\u4e00\u4e2a\u5728\u5341\u5e74\u524d\u5efa\u7acb\u771f\u6b63\u7684\u4f4e\u5ef6\u8fdf\u8bed\u97f3\u901a\u4fe1\u7684VoIP\u5e94\u7528\u7a0b\u5e8f\u3002\u4f46\u4f4e\u5ef6\u8fdf\u548c\u6e38\u620f\u4e0d\u662f\u5b83\u95ea\u8000\u7684\u552f\u4e00\u7528\u4f8b\u3002\n  \u6211\u4eec\u542c\u5230\u5f55\u5236\u64ad\u5ba2\u4e0e\u6211\u4eec\u7684\u591a\u901a\u9053\u97f3\u9891\u5f55\u97f3\u673a\uff0c\u5bfb\u6c42\u4e0e\u6211\u4eec\u7684\u4f4d\u7f6e\u97f3\u9891\u5728\u6e38\u620f\u4e2d\u5bfb\u6c42\u73b0\u5b9e\u4e3b\u4e49\u7684\u64ad\u653e\u5668\uff0cEve\u5728\u7ebf\u7403\u5458\u62e5\u6709\u8d85\u8fc7100\u591a\u4e2a\u540c\u6b65\u8bed\u97f3\u53c2\u4e0e\u8005\u7684\u5de8\u5927\u793e\u533a\uff08\u6211\u6253\u8d4c\u4ed6\u4eec\u719f\u6089\u6211\u4eec\u5e7f\u6cdb\u7684\u8bb8\u53ef\u7cfb\u7edf\ud83d\ude04 \uff09\uff0c\u7ade\u4e89\u56e2\u961f\u5821\u57922\u793e\u533a\u4f7f\u6211\u4eec\u6210\u4e3a\u4ed6\u4eec\u6240\u9700\u7684\u8bed\u97f3\u901a\u4fe1\u5e73\u53f0\uff0c\u7231\u597d\u65e0\u7ebf\u7535\u4f20\u8f93\u7528\u6237\uff0c\u4ee5\u53ca\u5404\u79cd\u5de5\u4f5c\u573a\u6240\u9002\u5e94\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u58f0\n  \u7ba1\u7406\u5458\u6b23\u8d4f\u80fd\u591f\u81ea\u6211\u4e3b\u6301\u5e76\u63a7\u5236\u6570\u636e\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\u7684\u816e\u817a\u3002\u6709\u4e9b\u4eba\u5229\u7528\u5e7f\u6cdb\u7684\u6743\u9650\u7cfb\u7edf\u8fdb\u884c\u590d\u6742\u573a\u666f\uff08\u4f8b\u5982\u5206\u9694\u4e24\u7ec4\uff0c\u4f46\u9886\u5bfc\u8005\u80fd\u591f\u4e0e\u4e24\u8005\u4ea4\u8c08\uff09\u3002\u6709\u4e9b\u4eba\u559c\u6b22\u4e3a\u4ed6\u4eec\u7684\u7528\u6237\u63d0\u4f9b\u5177\u6709\u4f7f\u7528\u670d\u52a1\u5668API\u7684\u811a\u672c\u6216\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u4e3b\u673a\u97f3\u4e50\u673a\u5668\u4eba\u7b49\u811a\u672c\u7684\u9644\u52a0\u529f\u80fd\u3002\u5177\u6709\u73b0\u6709\u7528\u6237\u6570\u636e\u5e93\u7684\u4eba\u901a\u5e38\u4f7f\u7528\u8eab\u4efd\u9a8c\u8bc1\u5668\u5141\u8bb8\u4f7f\u7528\u73b0\u6709\u5e10\u6237\u767b\u5f55\u6570\u636e\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\n    \u4e0d\u540c\u7684\u7528\u6237\u7ec4\u5bf9\u4e0d\u540c\u7684\u529f\u80fd\u611f\u5174\u8da3\uff0c\u56e0\u6b64\u6211\u4eec\u63cf\u8ff0\u4e86\u5bf9\u6bcf\u79cd\u7528\u6237\u7279\u5b9a\u7684\u4e00\u4e9b\u529f\u80fd\u3002 \n\u8981\u5f00\u59cb\u53ea\u9700\u4e0b\u8f7d\uff0c\u5b89\u88c5\u548c\u542f\u52a8\u561f\u561f\u58f0\u5e76\u8fde\u63a5\u5230\u516c\u5171\u670d\u52a1\u5668\uff0c\u6216\u8005\u60a8\u77e5\u9053\u7684\u7279\u5b9a\u4e00\u4e2a\u3002  \u901a\u8fc7ICE\u534f\u8bae\u6e20\u9053\u89c2\u4f17\u5ef6\u4f38 - \u5373\u4f7f\u6ca1\u6709\u76f4\u63a5\u7684ICE\u8bbf\u95ee\uff0c\u5982\u679cHOSTES\u63d0\u4f9bCVP\uff0c\u5219\u8f7b\u677e\u8bbe\u7f6e\u60a8\u7684\u9891\u9053\u67e5\u770b\u5668  \u5bf9\u4e8e\u914d\u7f6e\u9009\u9879\uff0c\u8bf7\u53c2\u9605Murmur.ini\u4ee5\u53ca\u6211\u4eec\u5173\u4e8e\u7b2c\u4e09\u65b9\u7ba1\u7406\u8f6f\u4ef6\uff0c\u811a\u672c\u548c\u673a\u5668\u4eba\u7684\u6587\u6863\u3002 ", "note_en": "The Mumble client is available in many languages. For the translation process we recently moved from the  Transifex online platform to  Weblate. In this post we describe our translation history, reasoning, and current approach.\n  Following the  last snapshot we proudly present our sixth development snapshot of the upcoming 1.4.0 stablerelease. Note that this snapshot is intended to be the last one before the final release and as such with its publication we are introducing afeature-freeze of the 1.4.x series. From now on only bug fixes will make it into this series.\n After having understood what it means for a release to be a  snapshot release (see below), you can download the new version from our   Downloadspage.\n      Mumble was the first VoIP application to establish true low latency voice communication over a decade ago. But low latency and gaming are not the only use cases it shines in.\n  We heard from users who record podcasts with our multi-channel audio recorder, players seeking realism with our positional audio in games, Eve Online players with huge communities of over 100 simultaneous voice participants (I bet they make good use of our extensive permission system \ud83d\ude04), the competitive Team Fortress 2 community making us their required voice communication platform, hobby radio transmission users, and a variety of workplaces adapting Mumble to fit their needs - be it on-head mobile devices or communicating across countries or into airplanes.\n  Administrators appreciate Mumble for being able to self host and have  control over data security and privacy. Some make use of the extensive permission system for complex scenarios (for example separating two groups but leaders being able to talk to both). Some love to provide their users with additional functionality with scripts making use of server APIs, or host music bots and the like that connect to the server. Those that have an existing user database often make use of authenticators to allow authenticating with existing account login data.\n    Different user groups are interested in different capabilities and so we describe some of the features specific to each kind of user.\n        To get started simply  download, install and start Mumble and connect to a public server, or a specific one you know of.\n    Extendible through Ice protocols\t\t\t Channel viewers - even without direct Ice access, if the hoster provides the CVP, easily set up your channel viewer of choice\n    For configuration options see  Murmur.ini and our documentation on third party administration software, scripts, and bots.", "posttime": "2021-06-29 22:34:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u9ad8\u8d28\u91cf,open,\u811a\u672c", "title": "\u5583\uff1a\u5f00\u6e90\uff0c\u4f4e\u5ef6\u8fdf\uff0c\u9ad8\u8d28\u91cf\u7684\u8bed\u97f3\u804a\u5929 ", "title_en": "Mumble: Open-Source, Low Latency, High Quality Voice Chat", "transed": 1, "url": "https://www.mumble.info/", "via": "", "real_tags": ["\u5f00\u6e90", "\u9ad8\u8d28\u91cf", "open", "\u811a\u672c"]}, {"category": "", "categoryclass": "", "imagename": "6135cca9843ba6e754c29dc083785da7.jpg", "infoid": 1068444, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e0\u6548\u7684\u7535\u5b50\u90ae\u4ef6\u51fa\u73b0\u95ee\u9898\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\u3002\u8ba2\u9605\u65f6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u60a8\u63d0\u4f9b\u7684\u4fe1\u606f\u5411\u60a8\u53d1\u9001\u8fd9\u4e9b\u65b0\u95fb\u7a3f\u3002\u60a8\u7684\u4fe1\u606f\u5c06\u6839\u636e\u6211\u4eec\u7684\u9690\u79c1\u58f0\u660e\u4f7f\u7528\u3002\n \u9e3d\u5b50\u9e3d\u53cb\u6b63\u8bd5\u56fe\u5236\u5b9a\u5927\u7ea65,000\u53ea\u9e1f\u7c7b\u5728\u4e00\u573a\u6bd4\u8d5b\u4e2d\u6d88\u5931\u5728\u4e00\u4e2a\u201c\u767e\u6155\u5927\u4e09\u89d2\u5f62\u201d\u4e2d\u6240\u8c13\u7684\u8fd9\u9879\u8fd0\u52a8\u7684\u6700\u7cdf\u7cd5\u7684\u65e5\u5b50\u4e4b\u4e00\u3002\n  \u4ece\u5f7c\u5f97\u5821\u5230\u4e1c\u5317\u5730\u533a\u7684\u6bd4\u8d5b\u952f9,000\u53ea\u9e3d\u5b50\u53c2\u4e0e\u901a\u5e38\u662f\u4e09\u5c0f\u65f6\u7684\u6bd4\u8d5b\uff0c\u4f46\u8d85\u8fc7\u4e00\u534a\u624d\u5230\u8fbe\u3002\n  \u5927\u6c14\u6761\u4ef6\u662f\u8fc4\u4eca\u4e3a\u6b62\u63d0\u51fa\u7684\u552f\u4e00\u89e3\u91ca\uff0c\u62a5\u9053\u4e86Teesside Live\u3002\n  \u9e3d\u5b50\u5728\u4ece\u5357\u65b9\u7684\u6bd4\u8d5b\u4e2d\u56de\u5230\u4e86\u4e1c\u514b\u5229\u592b\u5170\u7684\u56de\u5bb6\u3002\n  \u5728Skinnningrove\u7684\u9e3d\u820d\u4f30\u8ba1\u7684300\u53ea\u9e1f\u5728\u6bd4\u8d5b\u4e2d\u6d88\u5931\u4e86\uff0c\u9e3d\u5b50\u9e3d\u53cb\u8ba4\u4e3a\u53ef\u80fd\u662f\u7531\u4e8e\u602a\u707e\u5929\u6c14\u72b6\u51b5\u3002\n                             SkinnningRove Pigeon Fancier Richard Sayers\u5bf9\u4ed6\u7684\u793e\u4ea4\u5a92\u4f53\u6e20\u9053\u5206\u4eab\u4e86\u547c\u5401\uff0c\u6566\u4fc3\u4eba\u4eec\u5411\u4ed6\u4eec\u7559\u610f\uff0c\u5e76\u5728\u60a8\u7684\u82b1\u56ed\u91cc\u7684\u4e22\u5931\u7684\u8d5b\u9e3d\u9646\u5730\u5360\u636e\u4e86\u8be5\u600e\u4e48\u529e\u3002 \n\u8d5b\u8f66\u9e3d\u662f\u53ef\u8bc6\u522b\u7684\uff0c\u6807\u7b7e\u5468\u56f4\u7684\u6807\u7b7e\u3002\u5982\u679c\u4ed6\u4eec\u88ab\u5582\u517b\u548c\u6d47\u6c34\uff0c\u4ed6\u8bf4\uff0c\u75b2\u60eb\u7684\u5f52\u5de2\u9e1f\u6700\u7ec8\u4f1a\u56de\u5230\u4ed6\u4eec\u7684\u9e3d\u820d\u3002\n    \uff06\uff0334;\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u5468\u672b\u8d5b\u8f66\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5728\u82f1\u56fd\u7684\u897f\u5317\uff0c\uff06\uff0339;\u5728\u82f1\u56fd\u3002\u76ee\u524d\uff0c\u4eba\u4eec\u975e\u5e38\u4e0d\u786e\u5b9a\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4ecd\u7136\u5b58\u5728\u5f88\u591a\u5f88\u591a\uff0c\u5e76\u4e14\u5728\u884c\u52a8\u4e2d\u4ecd\u7136\u7f3a\u5c11\u5f88\u591a\u9e3d\u5b50\uff0c\u800c\uff0334;\u7406\u67e5\u5fb7\u8bf4\u3002\n  \uff06\uff0334;\u5f88\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u7531\u4e8e\u5927\u6c14\u4e2d\u7684\u4e1c\u897f - \u5c31\u50cf\u4e91\u4e0a\u65b9\u7684\u592a\u9633\u98ce\u66b4\u4e00\u6837\u3002\n  \uff06\uff0334;\u6211\u53ea\u662f\u60f3\u5411\u9047\u5230\u8d5b\u9e3d\u5582\u517b\uff0c\u6c34\u548c\u8ba9\u5b83\u4f11\u606f\u548c\u90a3\u91cc\u7684\u4efb\u4f55\u4eba\u63d0\u9ad8\u8ba4\u8bc6\uff0c\u5e76\u4e14\u5728\u51e0\u5929\u540e\u9e1f\u7c7b\u5c06\u5728\u9014\u4e2d\u8fbe\u523080\uff05\u7684\u673a\u4f1a\u3002\u6bcf\u53ea\u9e3d\u5b50\u90fd\u6709\u4e00\u4e2a\u8bc6\u522b\u6212\u6307\uff0c\u5176\u4e2d\u4ee3\u7801\u548c\u6570\u5b57\u3002\uff06\uff0334;\n  \uff06\uff0334;\u6211\u4eec\u9700\u8981\u6211\u4eec\u7684\u5c0f\u9e1f\u7c7b\u5728\u91cd\u5927\u51b2\u7a81\u4e2d\u6709\u52a9\u4e8e\u4ed6\u4eec\u633d\u6551\u4e861000\u591a\u4eba\u7684\u751f\u547d\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u505a\u6211\u4eec\u7684\u4e00\u70b9\u70b9\u6765\u5e2e\u52a9\u4ed6\u4eec\uff0c\uff06\uff0334;\u4ed6\u5728\u4ed6\u7684\u793e\u4ea4\u5a92\u4f53\u5e16\u5b50\u4e2d\u8bf4\u3002\n    \u4ed6\u5c06\u4ed6\u7684\u5f52\u5de2\u9e1f\u98de\u5230\u5144\u5f1f\u4eec\u7684\u5144\u5f1f\uff06amp;\u6765\u81eaSkinningrove\u7684\u513f\u5b50\u5728\u4e1c\u90e8\u514b\u5229\u592b\u5170\u8054\u90a6\u3002\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u4fdd\u6301\u9e1f\u7c7b\u5927\u7ea650\u5e74\u3002\n  \u4ed6\u8bf4\uff0c\u5927\u7ea6\u572830\uff05\u523040\uff05\u7684\u76ae\u80a4\u9e1f\u7c7b\u7f3a\u5931\uff0c\u5927\u7ea6300\u5c81\u7684\u9e1f\u7c7b\u3002\u5728\u4e1c\u65b9\u514b\u5229\u592b\u5170\u8054\u90a6\uff0c\u8be5\u6570\u5b57\u4f30\u8ba1\u4e3a1,000\u3002\u6a2a\u8de8\u4e1c\u5317\u90e8\uff0c\u4f30\u8ba1\u4ecb\u4e8e3,500\u548c5,500\u4e4b\u95f4\u3002 \n\u7406\u67e5\u5fb7\u8bf4\uff0c\u60e0\u7279\u6bd4\u9e3d\u53cb\u51ef\u5c14\u00b7\u675c\u683c\u62c9\u65af\u51ef\u5c14\u00b7\u675c\u683c\u62c9\u65af\u6709\u5f88\u591a\u5de5\u4f5c\u6765\u5e2e\u52a9\u62ef\u6551\u5931\u53bb\u7684\u9e1f\u7c7b\u3002  \u8fd8\u6709\u7f51\u7ad9\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u62a5\u544a\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u7684\u6742\u6563\u3002 ", "note_en": "Invalid Email Something went wrong, please try again later.   When you subscribe we will use the information you provide to send you these newsletters. Your information will be used in accordance with our Privacy Notice.\n Pigeon fanciers are trying to work out how around 5,000 birds have disappeared into a \u201cBermuda triangle\u201d in a single race in what is being called one of the worst days ever for the sport.\n  A race from Peterborough to the North East saw 9,000 pigeons taking part in what would normally be a three-hour competition but more than half have yet to arrive.\n  Atmospheric conditions are the only explanation that has been put forward so far,  reports Teesside Live.\n  The pigeons have vanished while making their way home to east Cleveland from a race down south.\n  An estimated 300 birds from lofts in Skinningrove alone have disappeared during the race which pigeon fanciers believe has possibly been due to freak weather conditions.\n                             Skinningrove pigeon fancier Richard Sayers shared an appeal on his social media channels urging people to look out for them and giving advice on what to do if a lost racing bird lands in your garden.\n  Racing pigeons are recognisable by the tags around their legs. If they are fed and watered, he says, the tired homing birds will eventually return to their lofts.\n    &#34;It&#39;s been a really bad weekend racing not just here in the North East, it&#39;s right across the UK. At present people are very unsure what has happened there are still lots and lots of pigeons still missing in action,&#34; said Richard.\n  &#34;A lot of people think this is due to something in the atmosphere - like a solar storm above the clouds.\n  &#34;I just wanted to raise awareness for anyone who comes across a racing pigeon to feed, water and let it rest and there&#39;s an 80% chance the birds will get on their way after a few days. Each pigeon has an identification ring on with a code and number.&#34;\n  &#34;We needed our little birds help in the major conflicts and they saved 1000s of lives, now we can do our little bit to help them,&#34; he said in his social media post.\n    He flies his homing birds as Sayers Bros &amp; son from Skinningrove in the East Cleveland Federation. The partnership has kept birds for around 50 years.\n  Roughly between 30% and 40% of the Skinningrove birds are missing, around 300 birds, he said. In the East Cleveland Federation the figure is estimated to be 1,000. Across the North East section, the estimate is between 3,500 and 5,500.\n  Whitby pigeon fancier Kyle Douglass, 20, does a lot of work to help rescue lost birds, said Richard.\n  There are also websites where people can report strays which can be found  here and  here.", "posttime": "2021-06-29 22:34:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9e3d\u5b50,pigeons,\u6bd4\u8d5b", "title": "\u8c1c\u56e2\u4f5c\u4e3a5k\u5f52\u5de2\u9e3d\u5b50\u53d8\u6210\u8584\u8584\u7684\u7a7a\u6c14 ", "title_en": "Mystery as 5k homing pigeons vanish into thin air", "transed": 1, "url": "https://www.walesonline.co.uk/news/uk-news/mystery-5000-homing-pigeons-birds-20907818", "via": "", "real_tags": ["\u9e3d\u5b50", "pigeons", "\u6bd4\u8d5b"]}, {"category": "", "categoryclass": "", "imagename": "14a5fbb20edbc32e5c5d925a11c3b914.png", "infoid": 1068443, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5341\u5e74\u6765\uff0c\u6211\u60f3\u8981\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u8ddf\u8e2a\u6211\u7684\u8f66\u5e93\u95e8\u662f\u5f00\u653e\u8fd8\u662f\u5173\u95ed\u3002\u6211\u4e8e2015\u5e74\u5f00\u59cb\u8fd9\u4e2a\u9879\u76ee\uff0c\u5b83\u786e\u5b9e\u786e\u5b9e\u662f\u6211\u9700\u8981\u7684\u3002\u8be5\u9879\u76ee\u6700\u7ec8\u53d8\u6210\u4e86\u6211\u6765\u8c03\u7528\u6211\u7684\u8c79\u5b50\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u8986\u76c6\u5b50PI\u7684\u7f51\u7edc\uff06\uff0339;\u5728\u6211\u7684\u8d22\u4ea7\u5468\u56f4\u6267\u884c\u5404\u79cd\u6709\u7528\u7684\u529f\u80fd\u3002\n  \uff06\uff0339; OHD\uff06\uff0339;\u76d1\u89c6\u8986\u76c6\u5b50PI\u4e0a\u6307\u5b9a\u7684GPIO\u5f15\u811a\uff0c\u5e76\u6839\u636e\u8fd9\u4e9b\u5f15\u811a\u7684\u72b6\u6001\u7684\u53d8\u5316\u8fdb\u884c\u54cd\u5e94\u3002\u5b83\u5c06\u7535\u5b50\u90ae\u4ef6\uff08\u6216\u77ed\u4fe1\uff09\u6d88\u606f\u53d1\u9001\u5230\u5176\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u6570\u5b57\u3002\n  2019\u5e7411\u6708\uff0c\u6211\u5c06PIR\u8fd0\u52a8\u63a2\u6d4b\u5668\u6dfb\u52a0\u5230\u6211\u7684\u524d\u5eca\u3002\u8ba9Ohdhandle\u76d1\u6d4b\u5176\u5730\u4f4d\u662f\u81ea\u7136\u7684\u3002\u5f53\u8be5\u8fd0\u52a8\u68c0\u6d4b\u5668\u8df3\u95f8\u65f6\uff0cOHD\u54cd\u94c3\u6211\u7684\u95e8\u94c3\u54cd\u4e86\u4e09\u6b21\uff0c\u7136\u540e\u5411\u5df2\u914d\u7f6e\u7684\u7535\u5b50\u90ae\u4ef6/\u77ed\u4fe1\u7f51\u5173\u53d1\u9001\u901a\u77e5\uff0c\u5e76\u4e14Zoneminder\u88ab\u544a\u77e5Torecord\u89c6\u9891\uff0c\u4ee5\u4fbf\u914d\u7f6e\u7684\u65f6\u95f4\u957f\u5ea6\u3002\n  PI\u662fB\u578b\u53f7B + B +\uff0c\u4ee5\u53caPINS DO\u7684\u793a\u610f\u56fe\u8be6\u7ec6\u4fe1\u606f.I\u8fd8\u6dfb\u52a0\u4e86\u5b9e\u65f6\u65f6\u949f\u6a21\u5757\u548c\u4e0d\u95f4\u65ad\u7535\u6e90\uff0c\u4ee5\u4fdd\u6301\u5176\u5728\u7ebf\u548c\u8c10\u3002 UPS\u662f\u4e00\u4e2a\u5e2612V\u5bc6\u5c01\u7535\u6c60\u7684\u5bb6\u7528\u5236\u4f5c\u4f5c\u4e1a\uff0c\u5c06DROK 12V\u4e3a5V\u964d\u538b\u8f6c\u6362\u5668\u4f9b\u7535\u3002\u8be5\u8f6c\u6362\u5668\u4e3aPI\u4f9b\u7535\u3002\u50cf\u51a0\u519b\u4e00\u6837\u5de5\u4f5c\u3002\n  \u6211\u91cd\u65b0\u4f7f\u7528\u4e86\u4e00\u4e2a\u5e73\u65b9\u7eff\u8272\u6309\u94ae\u5f00\u5173\uff0c\u6211\u5c06\u65e7\u7684PC\u76d2\u9500\u552e\u4e3a\u65c1\u8def\u6309\u94ae\u3002\u6b64\u6309\u94ae\u5177\u6709\u5185\u7f6eLED\uff0c\u5f53\u65c1\u8def\u556e\u5408\u65f6\u4eae\u8d77\u3002\u65c1\u8def\u51fd\u6570\u4f7f\u6211\u80fd\u591f\u8ba9\u8f66\u5e93\u95e8\u6253\u5f00\uff0c\u800c\u6211\u5728\u90a3\u91cc\u5de5\u4f5c\u800c\u6ca1\u6709\u5f97\u5230\u7684\u4eba\u3002\n  \u8f6f\u65c1\u8def\u529f\u80fd\u5141\u8bb8\u6211\u5728\u9700\u8981\u65f6\u8fc7\u5ea6\u4e58\u5750\u786c\u4ef6\u65c1\u8def\u4ea4\u6362\u673a\u7684\u72b6\u6001\u3002\u5f53\u8f6f\u65c1\u8def\u556e\u5408\u65f6\uff0c\u65c1\u8def\u6309\u94ae\uff06\uff0339; S LED\u95ea\u70c1\uff0c\u63d0\u9192\u6211\u542f\u7528\u8f6f\u65c1\u8def\u6a21\u5f0f\u3002\n  OHD\u4f7f\u7528Gmail\u4e0e\u5916\u90e8\u4e16\u754c\u6c9f\u901a\u3002\u6211\u4e3a\u6b64PI\u521b\u5efa\u4e86\u4e00\u4e2a\u5e10\u6237\uff0c\u5e76\u4e14\u5f53\u95e8\u6216\u7ed5\u8fc7\u5f00\u5173\u7684\u72b6\u6001\u65f6\uff0c\u5b83\u5c06\u7535\u5b50\u90ae\u4ef6\u53d1\u9001\u5230\u6307\u5b9a\u7684\u6536\u4ef6\u4eba\u5217\u8868\u3002\u901a\u8fc7\u4f7f\u7528Cell ServiceProvider\u7684SMS\u7f51\u5173\u5730\u5740\uff0cSMS\u4e5f\u53ef\u4ee5\u901a\u8fc7SMS\u53d1\u9001\u901a\u77e5\u3002\u6211\u662fverizon\uff0c\u6240\u4ee5OHD\u53d1\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u5230\uff06\uff0339; mycellnumber@vzwpix.com&#39;\u8fd9\u7b26\u5408\u77ed\u4fe1\u5e76\u5728\u6211\u7684\u624b\u673a\u4e0a\u663e\u793a\u4efb\u4f55\u5176\u4ed6\u6587\u5b57\u3002 \nOHD\u8fd8\u53ef\u4ee5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u63a5\u6536\u8bf4\u660e\u3002 \u6709\u65f6\u5019\u5927\u95e8\u6253\u5f00\u4e86\u5927\u591a\u6570\u4eba\uff0c\u90a3\u4e48\u8c01\u6ca1\u6709\u6309\u4e0b\u65c1\u8def\u6309\u94ae\u3002 \u5c31\u50cf\u6211\u4eec\u5728\u5965\u7279\u5c4b\u5de5\u4f5c\u7684\u5730\u677f\u627f\u5305\u5546\u4e00\u6837\u3002 \u6211\u4eec\u65e0\u6cd5\u8054\u7cfb\u5230\u4ed6\u4eec\uff0c\u4f46\u6211\u80fd\u591f\u9001\u4e00\u4e2a\uff06\uff0334;\u5b89\u9759\uff06\uff0334; \u6d88\u606f\u5230PI\uff06\uff0339; S Gmail\u5730\u5740\uff0c\u4ee5\u53caOHD\u68c0\u7d22\u5e76\u505c\u6b62\u53d1\u9001\uff06\uff0339;\u95e8\u6253\u5f00\uff06\uff0339; \u901a\u77e5\u3002 \u975e\u5e38\u4fbf\u5229\u3002 \u76ee\u524d\uff0c\u8fd9\u662fAonly\u547d\u4ee4OHD\u7684\u884c\u4e3a\u3002  \u6211\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6307\u793a\uff0c\u4ece\u4e00\u4e2a\u5168\u65b0\u7684pi\u5230\u4e00\u4e2a\u8fd0\u4f5c\u7684OHD\u7cfb\u7edf\u3002\u6b63\u5e38\u7684\u8b66\u544a\u9002\u7528\u3002 \u3002 \u3002 \u4f60\u7684\u65c5\u8d39\u53ef\u80fd\u4f1a\u6539\u53d8\u3002 ", "note_en": "For decades, I wanted a simple way to keep track of whether my garage door was open or closed. I started this project in 2015 and it does exactly what I need. The project eventually morphed into a component ofwhat I have come to call my PiNet, a network of Raspberry Pi&#39;s that perform various useful functions around my property.\n  &#39;ohd&#39; monitors specified GPIO pins on a Raspberry Pi and responds based on changes tothe status of those pins. It sends email (or SMS) messages to numbers in its config file.\n  In November of 2019 I added a PIR motion detector to my front porch. It was natural to let  ohdhandle the monitoring of its status. When that motion detector is tripped,  ohd rings my doorbell rings three times,then sends notification to the configured emails/SMS gateways, and  Zoneminder is told torecord video for the configured length of time.\n  The Pi is a 3 Model B+, and the  schematic diagram details which pins do what.I also added a real-time clock module and an Uninterruptable Power Supply to keep it online andon time. The UPS is a home-brew job with a 12V sealed battery that powers a DROK 12V to 5V buck converter.That converter powers the Pi. Works like a champ.\n  I re-used a square green pushbutton switch I salvaged off an old PC case as my ByPass button. This button has a built-in LED which lights up when the ByPass is engaged. The ByPass functionallows me to keep the garage door open while I&#39;m working in there without getting notifiedevery minute.\n  The Soft Bypass function allows me to over-ride the status of the hardware bypass switch when needed.When Soft Bypass is engaged, the bypass button&#39;s LED flashes to remind me Soft Bypass mode is enabled.\n  ohd uses Gmail to communicate with the outside world. I created an account just for this Pi,and it sends emails to a specified list of recipients when the status of the door or ByPass switchchanges. Notifications can also be sent by SMS by using the SMS gateway address of the cell serviceprovider. Mine is Verizon, and so  ohd sends an email to &#39; mycellnumber@vzwpix.com&#39;. That getstranslated to SMS and shows up on my phone like any other text.\n ohd also can receive instructions by email. There have been times when the door was opened bysomeone who then failed to press the bypass button. Like when we had flooring contractors working atour house. We could not reach them, but I was able to send a &#34;quiet&#34; message to the Pi&#39;s Gmail address,and ohd retrieved that and stopped sending &#39;door open&#39; notifications. Very handy. Currently this is theonly command  ohd acts on.\n I provided some  instructions to go from a brand new Pi to a functioning  ohd system.The normal caveats apply . . . your mileage may vary.", "posttime": "2021-06-29 22:33:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f66\u5e93,door,ohd", "title": "\u8f66\u5e93\u7531Monitor. ", "title_en": "Garage Door Monitor", "transed": 1, "url": "https://github.com/casspop/ohd", "via": "", "real_tags": ["\u8f66\u5e93", "door", "ohd"]}, {"category": "", "categoryclass": "", "imagename": "64d7b1d4d0f15747fe7db2e1e617292c.jpg", "infoid": 1068442, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u7535\u6c60\u662f\u5e94\u7528\u8bf8\u5982\u7535\u5b50PTYChogogation\u7684\u6210\u50cf\u6280\u672f\u7684\u7279\u522b\u6709\u5e0c\u671b\u7684\u533a\u57df\uff0c\u4f2f\u514b\u5229\u52a0\u5dde\u5927\u5b66\u7684\u7269\u7406\u5b66\u5bb6\u7f57\u6770\u6cd5\u9c81\u65af\u8868\u793a\uff0c\u4ed6\u4e5f\u6ca1\u6709\u53c2\u4e0e\u8be5\u7814\u7a76\u3002 \u201c\u6211\u4eec\u5982\u4f55\u5236\u4f5c\u7535\u6c60\u7684\u7ed3\u6784\uff0c\u201d\u4ed6\u95ee\u9053\uff0c\u201c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u5b58\u50a8\u5f88\u591a\u80fd\u91cf\uff0c\u4f46\u4ecd\u7136\u662f\u5b89\u5168\u7684\uff1f\u201d\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\uff0c\u7279\u522b\u662f\u5bf9\u4e8e\u4ece\u5316\u77f3\u71c3\u6599\u5230\u53ef\u518d\u751f\u80fd\u6e90\u7684\u8fc7\u6e21\uff0c\u5305\u62ec\u98ce\u548c\u592a\u9633\u80fd\u3002 \u201c\u6210\u50cf\u6280\u672f\u5bf9\u6539\u5584\u7535\u6c60\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u8be6\u7ec6\u7814\u7a76\u5316\u5b66\u53cd\u5e94\uff0c\u201d\u52d2\u72d7\u8bf4\u3002\n  \u4f46\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\u3002\u4e3a\u4e86\u4f7f\u7535\u5b50PTYChoguge\u5bfc\u81f4\u60a8\u7684\u624b\u673a\u6216\u7b14\u8bb0\u672c\u7535\u8111\u7684\u65b0\u7a81\u7834\uff0c\u5b83\u5fc5\u987b\u505a\u5f97\u4e0d\u4ec5\u4ec5\u662f\u62cd\u7167 - \u5fc5\u987b\u80fd\u591f\u7cbe\u786e\u5730\u5b9a\u4f4d\u5728\u6750\u6599\u4e2d\u7684\u5355\u4e2a\u539f\u5b50\u3002\u867d\u7136\u7814\u7a76\u4eba\u5458\u5728\u7406\u8bba\u4e0a\u8bc1\u660e\u4e86\u8be5\u6280\u672f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u5b83\u4eec\u5c1a\u672a\u8fdb\u884c\u5b9e\u9a8c\u793a\u8303\u3002 \u201c\u901a\u8fc7\u4efb\u4f55\u65b0\u6280\u672f\uff0c\u60a8\u7684\u7814\u7a76\u4eba\u5458\u603b\u662f\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u6765\u8bd5\u7528\u8fd9\u4e00\u70b9\uff0c\u770b\u770b\u5b83\u662f\u5426\u4e0e\u771f\u5b9e\u7684\uff0c\u5b9e\u7528\u7684\u7528\u9014\u662f\u771f\u5b9e\u7684\uff0c\u201dIBM Research-Almaden\u7684\u6750\u6599\u5206\u6790\u548c\u7279\u5f81\u4e3b\u7ecf\u7406Leslie Thompson\u8bf4\uff0c\u8c01\u6ca1\u6709\u53c2\u4e0e\u65b0\u7684\u7814\u7a76\u3002\n  \u201c\u5728\u4f60\u53d1\u660e\u4e00\u4e2a\u50cf\u9ad8\u5206\u8fa8\u7387\u663e\u5fae\u955c\u8fd9\u6837\u7684\u65b0\u5de5\u5177\u7684\u7a0b\u5ea6\u4e0a\uff0c\u6211\u7684\u610f\u8bc6\u662f\u4f60\u503e\u5411\u4e8e\u611f\u5230\u60ca\u8bb6[by]\u5b83\u9002\u7528\u4e8e\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u201d\u5486\u54ee\u6dfb\u52a0\u3002 \u201c\u4eba\u4eec\u4f1a\u770b\u770b\u6211\u4eec\u73b0\u5728\u751a\u81f3\u65e0\u6cd5\u60f3\u8c61\u7684\u4e8b\u60c5 - \u5e76\u89e3\u51b3\u6211\u4eec\u751a\u81f3\u4e0d\u786e\u5b9a\u7684\u95ee\u9898\u3002\u201d ", "note_en": "Behold the highest-resolution image of atoms ever seen. Cornell University researchers captured a sample from a crystal in three dimensions and magnified it 100 million times, doubling the resolution that  earned the same scientists a Guinness World Record in 2018. Their work could help develop materials for designing more powerful and efficient phones, computers and other electronics, as well as longer-lasting batteries.\n  The researchers  obtained the image using a technique called electron ptychography. It involves shooting a beam of electrons, about a billion of them per second, at a target material. The beam moves infinitesimally as the electrons are fired, so they hit the sample from slightly different angles each time\u2014sometimes they pass through cleanly, and other times they hit atoms and bounce around inside the sample on their way out. Cornell physicist David Muller, whose team conducted the recent study, likens the technique to playing dodgeball against opponents who are standing in the dark. The dodgeballs are electrons, and the targets are individual atoms. Though Muller cannot see the targets, he  can see where the \u201cdodgeballs\u201d end up, thanks to advanced detectors. Based on the speckle pattern generated by billions of electrons, machine-learning algorithms can calculate where the atoms were in the sample and what their shapes might be.\n  Previously, electron ptychography had only been used to image extremely flat samples: those merely one to a few atoms thick. The new study, published in  Science, now allows it to capture multiple layers tens to hundreds of atoms thick. That makes the technique much more relevant to materials scientists, who typically study the properties of samples with a thickness of about 30 to 50 nanometers. (That range is smaller than the length your fingernails grow in a minute but many times thicker than what electron ptychography could image in the past.) \u201cThey can actually look at stacks of atoms now, so it\u2019s amazing,\u201d says Andrew Maiden, an engineer at the University of Sheffield in England, who helped develop ptychography but was not involved with the new study. \u201cThe resolution is just staggering.\u201d\n  This marks an important advancement in the  world of electron microscopy. Invented in the early 1930s, standard electron microscopes made it possible to see objects such as polioviruses, which are smaller than the wavelengths of visible light. But electron microscopes had a limit: increasing their resolution required raising the energy of the electron beam\u2014and eventually the necessary energy would become so great that it would damage the sample. One way to avoid this problem was ptychography, which researchers developed in theory in the 1960s. But because of limitations in detectors and computational power, as well as the complex math required, it was decades before the technique was put into practice. Early versions only worked with visible light and x-rays, not the electron beams required to image atomic-size objects. Meanwhile scientists kept finding ways to improve electron microscopes, which worked so well that electron ptychography could not keep up. \u201cYou had to be a true believer in ptychography to be paying attention to it,\u201d Muller says.\n  It was only in the past several years that Muller and his team developed a detector good enough for electron ptychography to work experimentally. By 2018, they had figured out how to reconstruct two-dimensional samples with the technique, producing \u201cthe highest-resolution image by any method in the world,\u201d Muller says\u2014which won that Guinness World Record. And the researchers did so with a lower-energy wavelength than other methods, allowing them to better preserve their samples.\n  Thicker samples, however, presented multiple challenges. Instead of bouncing just once before detection, an electron wave ricochets around atoms in a three-dimensional sample. \u201cYou know where it ended up, but you don\u2019t know what path it took in the material,\u201d Muller says. This pinballing is called the \u201cmultiple scattering problem,\u201d and he and his team spent the past several years trying to solve it. With enough overlapping speckle patterns and computing power, they found they could work backward to determine which layout of atoms produced a given pattern. The researchers did so by fine-tuning a model until the speckle pattern it generated matched the experimentally produced one. Solving the multiple scattering problem is a major advancement, Muller says. Referring to the resolution his team\u2019s technique can capture for samples 300 atoms thick or smaller, he contends that \u201cwe can do better than anyone else, and we can do better than anyone else by factors of two to four.\u201d\n  Such high-resolution imaging techniques are essential for developing the next generation of electronic devices. For example, researchers are looking to move beyond silicon-based computer chips in search of more efficient semiconductors. To make this happen, engineers need to know what they are working with at an atomic level\u2014which means taking advantage of technologies such as electron ptychography. \u201cWe have these tools sitting there, waiting to help us optimize what will become the next generation of devices,\u201d says J. Murray Gibson, dean of the Florida A&amp;M University\u2013Florida State University College of Engineering, who was not involved in the new study. \u201cWithout these tools, we couldn\u2019t do it.\u201d\n  Batteries are a particularly promising area for applying imaging techniques such as electron ptychography, says Roger Falcone, a physicist at the University of California, Berkeley, who was also not involved with the research. \u201cHow do we make the structure of batteries,\u201d he asks, \u201csuch that they can store a lot of energy and yet still be safe?\u201d This is an essential question, especially for the transition from fossil fuels to renewable energies, including wind and solar. \u201cImaging technologies are very important to improving batteries because we can look at the chemical reactions in detail,\u201d Falcone says.\n  But there is still a long way to go. In order for electron ptychography to lead to a new breakthrough for your cell phone or laptop, it must do more than take a picture\u2014it has to be capable of precisely locating an individual atom in a material. Though the researchers demonstrated how the technique could do so theoretically, they have not yet performed an experimental demonstration. \u201cWith any new technique, it always takes a bit of time for your fellow researchers to try this out and see if it bears out into real, practical uses,\u201d says Leslie Thompson, former manager of materials analysis and characterization at IBM Research\u2013Almaden, who was not involved in the new study.\n  \u201cTo the extent that you invent a new tool like a high-resolution microscope, my sense is that you tend to be surprised [by] what problem it\u2019s applied to solve,\u201d Falcone adds. \u201cPeople will look at things that we can\u2019t even imagine now\u2014and solve a problem that we\u2019re not even sure we have yet.\u201d", "posttime": "2021-06-29 22:33:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u539f\u5b50,image,\u6280\u672f", "title": "\u539f\u5b50\u56fe\u50cf\u4e3a\u6700\u9ad8\u5206\u8fa8\u7387\u8bbe\u5b9a\u65b0\u7684\u8bb0\u5f55 ", "title_en": "Atomic image sets new record for highest resolution", "transed": 1, "url": "https://www.scientificamerican.com/article/see-the-highest-resolution-atomic-image-ever-captured/", "via": "", "real_tags": ["\u539f\u5b50", "image", "\u6280\u672f"]}, {"category": "", "categoryclass": "", "imagename": "1d05dd52a56d4612d0beb0c4b9351218.jpeg", "infoid": 1068441, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5965\u65af\u6c40\uff0c\u5fb7\u514b\u8428\u65af\u5dde - \u5f53\u6211\u4eec\u5411\u5730\u8868\u9a76\u5411\u4e86\u8def\u7ebf\uff0c\u90a3\u4e9b\u8ba9\u6211\u8bf4\u670d\u8fd9\u4e00\u70b9\u7684\u670b\u53cb\u5171\u540c\u5206\u4eab\u4e86\u4ed6\u5728\u5f53\u5929\u65e9\u4e9b\u65f6\u5019\u7684\u8c08\u8bdd\uff1a\uff06\uff0334;\u5f53\u6211\u8bf4\u6211\u4eec\u4eca\u665a\u5728\u7f8e\u6d32\u8d5b\u9053\u4e0a\u9a91\u81ea\u884c\u8f66\u65f6\uff0c\u9996\u5148\u8fc8\u514b\u95ee\u7684\u662f\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u8f6c\u5f2f\u5c31\u50cf\u7535\u89c6\u4e0a\u7684\u90a3\u6837\u9661\u5ced\u3002\u65f6\u95f4\u627e\u51fa\u6765\u3002\uff06\uff0334;\n \u6211\u4e0d\u8ddf\u968f\u9996\u5f0f1.\u6211\u4e0d\u5173\u5fc3NASCAR\u3002\u4f46\u6211\u4f4f\u5728\u5fb7\u514b\u8428\u65af\u5dde\u5965\u65af\u6c40\uff0c\u6211\u7ecf\u5e38\u9a91\u81ea\u884c\u8f66\u3002\u56e0\u6b64\uff0c\u5728\u7f8e\u6d32\u7684\u5de1\u56de\u8d5b\u4e2d\uff08Cota\uff09\u7684\u667a\u80fd\u6982\u5ff5 - \u5728\u5468\u4e8c\u665a\u4e0a\u9080\u8bf7\u5f53\u5730\u9a91\u81ea\u884c\u8f66\u8005\u9080\u8bf7\u5f53\u5730\u9a91\u81ea\u884c\u8f66\u8005\u5c1d\u8bd5\u4e24\u4e2a\u8f6e\u5b50\uff0c\u5176\u4e2d\u56db\u4e2a\u901a\u5e38\u6f2b\u6e38\u4f3c\u4e4e\u5f88\u9177\u3002\u5fb7\u514b\u8428\u65af\u5dde\u4e2d\u90e86\u6708\u665a\u4e0a\u751a\u81f3\u5728\u8003\u8651\u6e7f\u5ea6\u6216\u63a5\u8fd1\u6ca5\u9752\u4e4b\u524d\uff0c\u5373\u4f7f\u5728\u8003\u8651\u6e7f\u5ea6\u6216\u63a5\u8fd1\u6ca5\u9752\u4e4b\u524d\u4e5f\u5bb9\u6613\u8d85\u8fc790\u00b0F\u3002\u4f46\u662f\u6709\u4e9b\u5371\u5bb3\u53ef\u4ee5\u5728\u82b1\u5f0f\u6c7d\u8f66\u7535\u8def\u4e0a\u4f11\u95f2\u9a91\u884c\u5417\uff1f\u5728\u6211\u628a\u81ea\u884c\u8f66\u5e26\u5230\u67b6\u5b50\u4e4b\u524d\uff0c\u6211\u53ef\u4ee5\u54c1\u5c1dPostgameK\u00f6lsch\u3002\n \u7136\u540e\uff0c\u5f53\u7136\uff0c\u8f6c\u5f2f1.\u54c7\u3002\u5f88\u5feb\uff0c\u6211\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48Cota\uff06\uff0339; S\u5f00\u59cb\u9003\u8dd1\u53f2\u4e0a\u7684\u81ed\u540d\u662d\u7740\u3002\u5b83\u4e0d\u4f1a\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5\uff0c\u5f53\u4f60\u4ece\u89c2\u5bdf\u7532\u677f\u4e0a\u7aa5\u89c6\u65f6\uff0c\u4f46\u5728\u5730\u4e0a\uff0c\u8fd9\u662f3.4\u82f1\u91cc\u8f68\u9053\u5f00\u59cb\u65f6\u7684133\u82f1\u5c3a\u7684\u6500\u767b\u771f\u7684\u4e3a\u6bcf\u4e00\u4e2a\u819d\u76d6\u8bbe\u5b9a\u4e00\u4e2a\u97f3\u8c03\u3002\u90a3\u4e2a\u57fa\u8c03\uff1a\u79d1\u6258\u4f1a\u8e22\u4f60\u7684\u5c41\u80a1\u3002\n  \u8fd9\u6b3eF1\u7c89\u5f69\u58f0\u79f0\u6c7d\u8f66\u53ef\u4ee5\u8fbe\u5230\u5927\u7ea6110\u516c\u91cc/\u5c0f\u65f6\uff08\u301c70\u82f1\u91cc/\u5c0f\u65f6\uff09\u6500\u767b\u8fd9\u4ef6\u4e8b\uff0c\u6211\u4eec\u975e\u5e38\u6ca1\u6709\u5b9e\u73b0\u3002\u6211\u82b1\u4e86\u5927\u7ea6\u4e24\u5206\u949f\u3002\u800cF1\uff06\uff0339;\u6700\u9876\u7ea7\u53f8\u673a\u53ef\u4ee5\u5728\u51e0\u4e4e\u4e00\u5206\u949f\u534a\u7684\u819d\u76d6\u4e0a\u63a8\uff0c\u6211\u62b1\u6b49\u7684\u81ea\u6211\u5728\u4e00\u4e2a\u4e0d\u6b63\u5f53\u7684\u65f6\u95f4\u63a5\u8fd113\u5206\u949f\u3002 \uff08\u6211\u9a91\u7740\u4e94\u5e74\u524d\u8d2d\u4e70\u7684Motobecane Never Noir;\u90a3\u4e9b\u88c5\u4e0a\u9876Tri\u81ea\u884c\u8f66\u7684\u4eba\u53ef\u80fd\u66f4\u597d\u3002\uff09\n    \u4ecd\u7136\uff0c\u9a91\u81ea\u884c\u8f66\u4e4b\u591cAIN\uff06\uff0339;\u65e0\u7ade\u4e89\u3002 10\u7f8e\u5143\u7684\u5165\u53e3\u4ef7\u683c\u4e3a\u5404\u79cd\u5404\u6837\u7684\u9a91\u81ea\u884c\u8f66\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u975e\u5e38\u72ec\u7279\u7684\u9a91\u9a6c\u4f53\u9a8c\u3002\u4f60\uff06\uff0339; ll\u770b\u5230\u77ee\u5e8a\uff0c\u4ed6\u770b\u8d77\u6765\u6e05\u65b0\u7684\u8bad\u7ec3\u8f6e\u548c\u5176\u4ed6\u4eba\u8ba9\u4f60\u5600\u5495\u7740\u5173\u4e8e\u60f3\u8981\u9002\u5408\u4ed6\u4eec\u7684\u5e74\u9f84\u3002\u6211\u7684\u8def\u4e0a\u81ea\u884c\u8f66\u5728\u4e00\u4e2a\u5faa\u73af\u6d77\u4e0a\u5e76\u6ca1\u6709\u7f6e\u4e8e\u56fa\u5b9a\u9f7f\u8f6e\uff0c\u5367\u5f0f\u9a91\u884c\uff0c\u4e32\u8054\u81ea\u884c\u8f66\u548c\u4e00\u8f86\u9644\u7740\u7684\u90a3\u4e9b\u5a74\u513f\u62d6\u8f66\u7684\u81ea\u884c\u8f66\uff08\u53ea\u6709\u7275\u5f15\u67d0\u79cd\u730e\u72ac\uff09\u3002 COTA\u56e2\u961f\u5728\u4e00\u4e9b\u6377\u5f84\u4e2d\u5efa\u7acb\u4e86\u4e00\u4e9b\u6377\u5f84\uff0c\u4ed6\u4eec\u5e0c\u671b\u5728\u4e00\u4e24\u5c0f\u65f6\u6216\u4e24\u4e24\u6b21\u6500\u767b\u56db\u6b21\uff0c\u5e76\u4e14\u5145\u8db3\u7684\u4f11\u606f\u548c\u6c34\u7ad9\u5728\u6574\u4e2a\u8bfe\u7a0b\u4e2d\u90fd\u6709\u6218\u7565\u6027\u5730\u653e\u7f6e\u3002\n \u5728\u6700\u540e\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u63a5\u8fd1\u7ec5\u58eb\u4eec\u7684\u591c\u665a\uff0c\u9a7e\u9a76\u8bfe\u7a0b\u7b2c\u4e00\u624b\u8ba9\u6211\u5bf9\u90a3\u4e9b\u4ee5\u66f4\u9ad8\u901f\u5ea6\u505a\u7684\u4eba\u6765\u8bf4\u771f\u6b63\u7684\u6b23\u8d4f\u3002\u6211\u7684\u670b\u53cb\uff06\uff0339; strava\u5e94\u7528\u8bfb\u6570\u62a5\u9053\uff0c\u6211\u4eec\u8fbe\u5230\u7684\u6700\u5feb\u7684\u6b65\u4f10\u53ea\u662f\u8d85\u8fc740\u82f1\u91cc/\u5c0f\u65f6\uff0c\u4ece\u4e00\u4e2a\u6241\u5e73\u7684\u4f38\u5c55\u5ef6\u4f38\u5230\u531d\u65701\u7684\u531d\u65701\u8d85\u8fc740\u82f1\u91cc/\u5c0f\u65f6\u3002F1\u6c7d\u8f66\u63a8\u52a8200\u82f1\u91cc/\u5c0f\u65f6\u8bfe\u7a0b\uff0c\u4f46\u6211\u89c9\u5f97\u5c31\u50cf\u6211\u98de\u7fd4\u4e00\u6837\u3002\u5373\u4f7f\u5728\u90a3\u4e9b\u8f83\u6162\u7684\u901f\u5ea6\u4e0b\uff0c\u5b83\u82b1\u4e86\u6211\u4eec\u591a\u5708\u771f\u6b63\u8fbe\u5230\u50cf\u53d1\u593912\u7684\u8f6c\u5f2f\u7684\u60ac\u6302\u3002\u4ee5\u53ca\u5982\u4f55\u6bd4\u8d5b\u572815\u5c81\u7684\u4e8b\u60c5\u4e0a\u6bd4\u8d5b\u4e24\u4e09\u8f86\u8f66\u8d85\u51fa\u4e86\u6211;\u751a\u81f3\u5f88\u96be\u9002\u5e94\u8bb8\u591a\u7c7b\u4f3c\u771f\u6b63\u52a8\u91cf\u7684\u81ea\u884c\u8f66\u3002\n \u81ea\u4ece2017\u5e74\u4ee5\u6765\uff0c\u81ea\u884c\u8f66\u591c\u5df2\u7ecf\u5728\u8fd9\u91cc\u662f\u4e00\u4e2a\u4e3b\u9898\uff0c\u800c\u4e14\u751a\u81f3\u6210\u529f\u5730\u9a76\u8fc7\u4e86\u6700\u540e\u7684\u5927\u6d41\u884c\u3002\u5b83\u4e00\u76f4\u5728\u6bcf\u665a\u5438\u5f15\u51e0\u767e\u540d\u8f66\u624b\u7684\u539f\u56e0\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u548c\uff0339;\u4e0b\u5468\u6216\u8005\u57289\u6708\u7684\u67d0\u4e2a\u65f6\u5019\u5728\u5965\u65af\u6c40\u4e2d\uff0c\u77e5\u9053\u4f60\u4e0d\u7ecf\u5e38\u8fd9\u6837\u9a91\u884c\u7684\u673a\u4f1a\u3002\u5982\u679c\u4f60\u53bb\uff0c\u53ea\u8bb0\u5f97\u5728\u6700\u4f4e\u7684\u88c5\u5907\u4e2d\u5f00\u59cb\u591c\u665a\u3002 \n\u6211\u559c\u6b22\u4f60\u5982\u4f55\u968f\u4fbf\u5305\u62ec\u4e00\u4e2a\u5728\u90a3\u91cc\u72ec\u8f6e\u8f66\u4e0a\u4e00\u4e2a\u4eba\u7684\u7167\u7247\u3002 \u4ed6\u722c\u52301\u5c81\u5417\uff1f  \u662f\u4ed6\u505a\u7684\u3002 @austinunicycleschool\u4e0a\u7684ig\u5b9e\u9645\u4e0a\u6709\u51e0\u4e2a\u5355\u6027\u9a91\u5728\u9a91\u81ea\u884c\u8f66\u4e4b\u591c\u7684\u8f68\u9053\u4e0a\u3002 \u6211\u559c\u6b22\u4f60\u5982\u4f55\u968f\u4fbf\u5305\u62ec\u4e00\u4e2a\u5728\u90a3\u91cc\u72ec\u8f6e\u8f66\u4e0a\u4e00\u4e2a\u4eba\u7684\u7167\u7247\u3002 \u4ed6\u722c\u52301\u5c81\u5417\uff1f ", "note_en": "AUSTIN, Texas\u2014As we rolled our road bikes toward the entryway, the friend who convinced me to do this shared a conversation he had earlier in the day: &#34;When I said we were biking at Circuit of the Americas tonight, the first thing Mike asked was if that first turn is as steep as it looks on TV. Time to find out.&#34;\n I don&#39;t follow Formula 1. I don&#39;t follow NASCAR. But I do live in Austin, Texas, and I regularly ride a bike. So the concept of  Bike Night at the Circuit of the Americas\u00a0(COTA)\u2014an event series\u00a0where this famed US racetrack invites local cyclists out on Tuesday nights to try two wheels where four usually roam\u2014seemed cool enough. A June evening in Central Texas easily exceeds 90\u00b0 F, even before you consider humidity or proximity to asphalt. But what harm could some casual riding on a fancy car circuit do? I could taste the postgame K\u00f6lsch before l took my bike off the rack.\n Then, of course, came Turn 1.  Whoa. Quickly,\u00a0I learned why COTA&#39;s starting stunner lives in  racing infamy. It doesn&#39;t look that bad when you&#39;re peering down from the Observation Deck, but on the ground, this 133-foot climb at the start of the 3.4-mile track really sets a tone for every lap. That tone:\u00a0 COTA will kick your butt.\n  This F1 fansite claims that cars can get to around 110 km/h (~70 mph) climbing this thing, which we very much did\u00a0 not\u00a0achieve. It took me about two minutes. And while  F1&#39;s top drivers can push through a lap in almost a minute and a half, my sorry self had an unofficial time closer to 13 minutes. (I ride a  Motobecane Vent Noir I bought used five years ago; the guys who loaded up top-end tri bikes likely fared better.)\n    Still, Bike Night ain&#39;t no competition. An entry price of $10 brings out all sorts of cyclists for a pretty unique riding experience. You&#39;ll see peddlers who look fresh out of training wheels and others who make you murmur something about wanting to be that fit at their age. My road bike was not out of place in a sea of cycles that included fixed gears, recumbent rides, tandem bikes, and a bike with one of those baby trailers attached (only it\u00a0 definitely\u00a0carried a retriever of some sort). The COTA team builds in some shortcuts for those who would like to\u00a0 not\u00a0climb Turn 1 four times in an hour or two, and ample break and water stations are strategically placed throughout the course.\n By the final time that I approached the grandstands to turn in for the night, navigating the course firsthand had given me a genuine appreciation for those who do it at higher speeds. My friend&#39;s Strava app readings reported that the quickest pace we reached was\u00a0 just\u00a0over 40 mph, coming off the (literal, physical) high of Turn 1 through a flat stretch leading to Turn 5. F1 cars push 200 mph on this course, yet I felt like I was flying. It took us multiple laps to really get the hang of turns like the hairpin Turn 12, even at those slower speeds. And how pros race two or three cars wide on something like Turn 15 is beyond me; it felt hard to fit even that many bikes with anything resembling genuine momentum.\n Bike Night has been a staple around here since  2017, and the event even  successfully navigated the pandemic last fall. It has consistently attracted a few hundred riders every night for a reason. So, if you&#39;re in Austin next week or sometime this September, know you don&#39;t get the opportunity for a ride like this very often. If you go, just remember to start the night in your lowest gear available.\n  I like how you casually included a picture of a guy on a unicycle there. Did he climb turn 1?\n  Yes, he did. @austinunicycleschool on IG There are actually a few unicyclists who ride together around the track on Bike Night.    I like how you casually included a picture of a guy on a unicycle there. Did he climb turn 1?", "posttime": "2021-06-29 22:33:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "f1,cycling,\u81ea\u884c\u8f66", "title": "\u5728F1\u7684\u7f8e\u6d32\u7740\u540d\u8d5b\u9053\u4e0a\u5faa\u73af\u6216\u9a91\u81ea\u884c\u8f66 ", "title_en": "Circling\u2013or cycling\u2013the track at F1\u2019s famous Circuit of the Americas", "transed": 1, "url": "https://arstechnica.com/gaming/2021/06/circling-or-cycling-the-track-at-f1s-famous-circuit-of-the-americas/", "via": "", "real_tags": ["f1", "cycling", "\u81ea\u884c\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068440, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136Roblox\u6ca1\u6709\u6b63\u5f0f\u652f\u6301Linux\uff0c\u4f46\u8fd0\u884cWindows\u7a0b\u5e8f\u7684\u8461\u8404\u9152\u517c\u5bb9\u5c42\u53ef\u4ee5\u5728Linux\u4e0a\u8fd0\u884cRoblox\u64ad\u653e\u5668\u548cRoblox Studio\u3002\n \u8fd0\u884cRoblox\u8461\u8404\u9152\u9700\u8981\u8461\u8404\u91526.11\u6216\u66f4\u65b0\u7248\u672c\u3002\u622a\u81f32021\u5e746\u670819\u65e5\uff0c\u8fd9\u9700\u8981\u4f7f\u7528\u5f00\u53d1\u91ca\u653e\u3002 Wine 6.11\u662fArch Linux\u548cVoid Linux\u548cWinehq\u63d0\u4f9b\u7684Debian\uff0cFedora\u548cUbuntu\u7684\u5f00\u53d1\u7248\u672c\u63d0\u4f9b\u4e8c\u8fdb\u5236\u5305\u3002 [1]\n \u6709\u52a9\u4e8e\u5728Linux\u4e0a\u5b89\u88c5Roblox\uff0c\u53ef\u4ee5\u54a8\u8be2\u8461\u8404\u8349\u56feDiscord\u670d\u52a1\u5668\u3002\u7ec8\u7aef\u548c\u8f6f\u4ef6\u7f16\u8bd1\u7684\u4e00\u4e9b\u77e5\u8bc6\u7684\u7528\u6237\u5728\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u4e0d\u5e94\u6709\u5f88\u5927\u7684\u9ebb\u70e6\u3002\n   2012\u5e747\u670828\u65e5\uff0c\u7ea6\u7ff0\u00b7\u8c22\u5c14\u8328\u57fa\u786e\u8ba4\u4e86Linux\u4e0a\u7684Roblox\u7684\u8fdb\u5c55\u4e3a97\uff05\u3002 Shedletsky\u58f0\u79f0Linux\u7684\u95ee\u9898\u662f\u9a7e\u9a76\u5458\u652f\u6301\u5dee\u3002 Shedletsky\u7684\u53e6\u4e00\u4e2a\u535a\u5ba2\u5e16\u5b50\u58f0\u79f0\u4ed6\u4eec\u53ef\u4ee5\u5728Linux\u4e0a\u82b1\u51e0\u4e2a\u6708\uff0c\u6216\u8005\u4ed6\u4eec\u53ef\u4ee5\u5728\u9ad8\u5ea6\u8981\u6c42\u7684\u529f\u80fd\u4e0a\u5de5\u4f5c\u3002\n   \u5728RDC 2020 Q\uff06amp;\u4f1a\u8bae\u671f\u95f4\uff0c\u5b83\u786e\u8ba4\u76ee\u524d\u6ca1\u6709\u8ba1\u5212\u7531\u4e8e\u5176\u5c0f\u578b\u684c\u9762\u5e02\u573a\u4efd\u989d\u800c\u5bfc\u81f4Linux\u7684Roblox\u3002\u7136\u800c\uff0cArseny Kapoulkine\u8868\u793a\uff0c\u5982\u679c\uff06\uff0334; Linux\u5c06\u6709\u8ba1\u5212\u662f\u6e38\u620f\u73a9\u5bb6\uff06\uff0334\u7684\u9009\u62e9\u5e73\u53f0\u3002 [2] [3]\n roblox\u5df2\u7ecf\u591a\u6b21\u6d4b\u8bd5\u8fc7\uff0c\u6210\u529f\u76f4\u52302015\u5e74\u30022015\u5e745\u670815\u65e5\uff0cRoblox\u6536\u5230\u4e86A\uff06\uff0334;\u91d1\uff06\uff0334;\u8461\u8404\u9152\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u5e93\u4e2d\u7684\u8bc4\u7ea7\u3002 [4]\n \u4ece2015\u5e74\u52302021\u5e74\uff0c\u5728Linux\u4e0a\u8fd0\u884cRoblox\u64ad\u653e\u5668\uff0c\u56e0\u4e3a\u52a0\u5165\u6e38\u620f\u5bfc\u81f4\u4e86\u8fde\u63a5\u7684\u9519\u8bef\uff06\uff0334;\u8fd9\u4e2a\u6e38\u620f\u5df2\u5173\u95ed\u3002\uff06\uff0334; [5]\u8fd9\u662f\u539f\u672c\u5047\u8bbe\u662f\u7531\u4e8e\u53cd\u4f5c\u7528\u8f6f\u4ef6\uff0c\u4f46Kalen Alwardt\u540e\u6765\u8868\u793a\u8fd9\u4e2a\uff06\uff0334;\u4e0d\u662f\u95ee\u9898\u7684\u539f\u56e0\u3002\uff06\uff0334; [6] \n6\u670811\u65e5\uff0c2021\u5e746\u6708\uff0c\u7528\u6237\u540d\u79f0\u4e3aIMSLAPPY826\uff08Slappy826\uff030001\u4e0a\u7684Slappy826\uff030001\uff09\u4e3a\u8461\u8404\u9152\u521b\u5efa\u4e86\u4e00\u884c\u4fee\u8865\u7a0b\u5e8f\uff0c\u5141\u8bb8Roblox\u64ad\u653e\u5668\u5728GNU / Linux\u6216BSD\u7cfb\u7edf\u4e0a\u518d\u6b21\u5de5\u4f5c\u3002\u4fee\u8865\u7a0b\u5e8f\u5b9e\u73b0\u4e86zwfilterToken\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u6cbfNTFilterToken\u6cbfNTDLL\u5b9e\u73b0\u3002\u4fee\u8865\u7a0b\u5e8f\u5df2\u81f4\u529b\u4e8e\u8461\u8404\u9152\u5f00\u53d1\u6811[7]\u5e76\u5305\u542b\u5728\u8461\u8404\u91526.11\u4e2d\u3002 [8]\u7528\u6237Brinker\u53d1\u5e03\u4e86\u4e00\u79cd\u7528\u4e8e\u57fa\u4e8eArch\u7684Linux\u53d1\u884c\u7248\u7684\u9884\u4fee\u8865\u7248\uff0c\u800c\u7528\u6237robigan\u4e3a\u57fa\u4e8eDebian\u7684Distrs\u521b\u5efa\u4e86\u8865\u4e01\u3002\n   \u4f7f\u7528\u8461\u8404\u9152\u65f6\uff0c\u9f20\u6807\u5b58\u5728\u95ee\u9898\u3002\u4f7f\u7528\u4ee5\u4e0b\u8865\u4e01\u4ece\u6e90\u7248\u672c\u7ea0\u6b63\uff1a\n \u6765\u81eadba1a3c3bf5946cd7665c92f15e mon sep 17 00:00:00 2001\uff1abrinkervii\uff06lt; brinkervii@gmail.com& gt;\u65e5\u671f\uff1aSAT\uff0c12\u67082021 11:00:06 + 0200subject\uff1a[\u4fee\u8865\u7a0b\u5e8f2/2] Turbo Jank\u9f20\u6807\u4fee\u590d--- DLLS /winex11.drv/mouse.c | 4 +++ + 1\u6587\u4ef6\u5df2\u66f4\u6539\uff0c4\u4e2a\u63d2\u5165\uff08+\uff09Diff --git A / DLL / Winex11.drv / mous.cb / DLL / Winex11.drv / mous.Cindex 42Bac332664..0549C2D653B 100644  -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -  --- A / DLL / winex11.drv/mouse.c+++ b / dll / winex11.drv / mous.c @@ -648,6 +648,10 @\u9759\u6001void send_mouse_input\uff08hwnd hwnd\uff0cwindow\u7a97\u53e3\uff0c\u65e0\u7b26\u53f7int\u72b6\u6001\uff0cINPU IF\uff08\uff01HWND \uff09{+ if\uff08\u8f93\u5165 - \uff06gt; u.mi.dwflags\uff06amp; mouseventf_rightup\uff09{+ reset_clipping_window\uff08\uff09; +} + struct x11drv_thread_data * thread_data = x11drv_thread_data\uff08\uff09; hwnd clip_hwnd = thread_data-\uff06gt; clip_hwnd;  -  2.32.0\n Roblox Player\u548cRoblox Studio\u5982\u679c\u4f7f\u7528\u6b63\u786e\u7684\u7248\u672c\uff0c\u53ef\u4ee5\u50cf\u6b63\u5e38\u4e00\u6837\u542f\u52a8\u3002 Roblox Studio\u5728WineBB\u4e2d\u6709\u4e00\u4e2a\u91d1\u989d\u3002 [9]\n  Roblox FPS Unlocker\u4e5f\u517c\u5bb9\uff0c\u53ef\u7528\u4e8e\u8fbe\u5230\u66f4\u9ad8\u7684\u5e27\u3002\u9700\u8981\u8461\u8404\u6811\u4e1b\u3002\n \u8f6c\u5230\u63d0\u53d6\u7684\u6587\u4ef6\u5939\u7684\u76ee\u5f55\uff08\u8461\u8404\u9152\u4e2d\u7684Linux\u9a71\u52a8\u5668\u901a\u5e38\u662fZ\uff1a\\\uff09\n \u627e\u5230.exe\u6587\u4ef6\uff0c\u6253\u5f00\u8461\u8404\u9152\u8d44\u6e90\u7ba1\u7406\u5668\u3002\u5b83\u5e94\u8be5\u6700\u5c0f\u5316\u5230\u6258\u76d8 \n\u5728\u5f00\u59cb\u6307\u5bfc\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u53ef\u4ee5\u8fd0\u884c\u7ec8\u7aef\u547d\u4ee4\uff06\uff0334; vkcube\uff06\uff0334;\uff0c\u786e\u4fdd\u60a8\u62e5\u6709\u6240\u6709vulkan\u548cOpenGL\u9a71\u52a8\u7a0b\u5e8f\u3002\u9700\u8981\u8461\u8404\u8349\u56fe3.4.1\u6216\u4ee5\u4e0a\u3002\n \u6253\u5f00\uff06\uff0334; roblox fflag\u7f16\u8f91\u5668\uff06\uff0334; \uff08\u5982\u679cFFLAG\u7f16\u8f91\u8d62\u5f97\uff06\uff0339; T\u6253\u5f00\uff0c\u8bf7\u5c1d\u8bd5\u8fd0\u884cRoblox Studio\u4e00\u6b21\uff0c\u7136\u540e\u5b83\u5e94\u8be5\u5de5\u4f5c\u3002\uff09\n   \u4f7f\u7528vulkan\uff0c\u641c\u7d22\uff06\uff0334; vulkan\uff06\uff0334;\u5e76\u542f\u7528fflagdebuggraphicsprefervulkan\uff08GPU\u5fc5\u987b\u652f\u6301vulkan\uff0c\u5426\u5219\u4f7f\u7528Direct3D11\uff09\n   \u901a\u8fc7\u9f20\u6807\u79fb\u52a8\u7684\u4efb\u4f55\u5f62\u5f0f\u7684\u4f20\u8bb0\u76f8\u673a\uff08\u4f8b\u5982\u3002\u53f3\u952e\u5355\u51fb\uff0c\u6362\u6863\u9501\u548c\u7b2c\u4e00\u4eba\u79f0\uff09\u5c06\u5728\u7b2c\u4e00\u4eba\u79f0\u6eda\u52a8\u540e\u51bb\u7ed3\u9f20\u6807\uff0c\u901a\u8fc7\u6309SHIFT\uff0c\u53f3\u8f6c\u5207\u65ad\u6362\u6863\u9501\u5b9a - \u5355\u51fb\u3002\u53f3\u952e\u5355\u51fb\u5177\u6709\u7531\u8461\u8404\u67da\uff0c\u5e03\u5170\u7279\u7684\u7ef4\u62a4\u8005\u5236\u4f5c\u7684\u7ec3\u4e60\u4eba\u3002\u5b83\uff06\uff0339;\u5728\u8461\u8404\u8349\u56fe\u4e2d\u7684Arch Linux\u4e0a\u8f7d\u3002\n     Roblox Player\u53ef\u80fd\u6ca1\u6709\u5de5\u4f5c\u58f0\u97f3\uff08\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5b89\u88c532\u4f4d\u97f3\u9891\u5305\u6765\u4fee\u590d\uff0c\u4f8b\u5982\uff0carch\u4e0a\u7684lib32-libpulse\uff0clib32-Openal\uff09\n \u4f7f\u7528vulkan / OpenGL\u53ef\u80fd\u4f1a\u544a\u8bc9\u60a8\u9a71\u52a8\u7a0b\u5e8f\u8fc7\u65f6\uff0c\u8fd9\u662f\u901a\u8fc7\u5b89\u88c5vulkan\u6216OpenGL\u9a71\u52a8\u7a0b\u5e8f\u6765\u56fa\u5b9a\u7684\u3002\n \u6709\u65f6\uff0c\u5728\u94ec\u548c\u4e00\u4e9b\u5176\u4ed6\u57fa\u4e8e\u94ec\u7684\u6d4f\u89c8\u5668\u4e0a\uff0c\u4ece\u7f51\u7ad9\u4e0a\u73a9Roblox\u53ef\u80fd\u4f1a\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u94ec\u5b9e\u4f8b\uff0c\u8fd9\u662f\u5728Firefox\u4e0a\u53d1\u751f\u7684 \n\u4f7f\u7528\u8461\u8404\u9152\u8fd0\u884croblox\u5de5\u4f5c\u5ba4\u4e5f\u4e0d\u5b8c\u7f8e\uff0c\u4f60\u53ef\u4ee5\u9047\u5230\u4ee5\u4e0b\u9519\u8bef\uff1a  \u4f7f\u7528DirectX 11\u65f6\u95ea\u70c1\u7684\u9634\u5f71\uff0c\u9664\u975e\u5728Studio\u8bbe\u7f6e\u4e2d\u6253\u5f00EagerBulkexecution\u65f6  \u4f7f\u7528OpenGL\u65f6\uff0cPlugin Guis\u548c\u6700\u8fd1\u66f4\u65b0\u7684UI\u5143\u7d20\uff08\u5982\u5de5\u5177\u7bb1\uff0c\u6e38\u620f\u8bbe\u7f6e\u548c\u53d1\u5e03\u5230Roblox\u5c4f\u5e55\uff09\u4e0a\u53d1\u751f\u95ea\u70c1  \u6709\u65f6\u5728\u52a0\u5165\u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u6ede\u540e\u7a57\uff0c\u53ea\u80fd\u5728\u4e00\u4e2a\u65b9\u5411\u4e0a\u79fb\u52a8\u3002  \u5f53\u64ad\u653e\u5668\u79fb\u52a8\u65f6\u79fb\u52a8\u76f8\u673a\u65f6\uff0c\u9f20\u6807\u5c06\u5361\u4f4f\u76f8\u673a\uff08\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5feb\u901f\u53f3\u952e\u5355\u51fb\uff09  \u6709\u65f6\u4f60\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u7a97\u53e3\u8bf4\uff06\uff0334; robloxplayerbeta.exe\u9047\u5230\u4e86\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u5fc5\u987b\u5173\u95ed\uff01\uff06\uff0334; \u4fe1\u606f\u3002  \u2191\u4e0b\u8f7d\u3002 Winehq\u3002 2021\u5e746\u670819\u65e5\u7684\u539f\u4ef6\u5b58\u6863\u3002\u57282021\u5e746\u670819\u65e5\u68c0\u7d22\u3002 \n\u2191roblox\u9762\u677f| RDC2020\u3002 YouTube\u3002 Roblox\uff087\u670831\u65e5\uff0c2020\u5e74\uff09\u3002 \u57282021\u5e746\u670819\u65e5\u68c0\u7d22\u3002  \u2191Bloxy\u65b0\u95fb\uff087\u670826\u65e5\uff0c2020\u5e74\uff09\u3002 Twitter Post\u3002 \u63a8\u7279\u3002 2021\u5e743\u67081\u65e5\u4ece\u539f\u7248\u5b58\u6863\u30022021\u5e746\u670819\u65e5\u68c0\u7d22\u3002  \u2191\uff06\uff0334;\u60a8\u56e0\u610f\u5916\u7684\u5ba2\u6237\u884c\u4e3a\u800c\u88ab\u8e22\u3002 \uff08\u9519\u8bef\u4ee3\u7801\uff1a268\uff09\uff06\uff0334; \u5c1d\u8bd5\u52a0\u5165\u6e38\u620f\u540e\u7684\u6d88\u606f\u3002 GitHub\u3002 \u4ece2021\u5e741\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u30022021\u5e746\u670819\u65e5\u7684\u68c0\u7d22\u3002  \u2191Alwardt\uff0cKalen\uff082021\u5e746\u670814\u65e5\uff09\u3002 NTDLL\uff1a\u5bfc\u51fazwfiltertoken\uff08\uff09.. source.winehq.org\u3002 \u57282021\u5e746\u670819\u65e5\u68c0\u7d22\u3002  \u2191Julliard\uff0c\u4e9a\u5386\u5c71\u5927\u3002 \u8461\u8404\u9152\u5f00\u53d1\u72486.11\u73b0\u5df2\u4e0a\u5e02.. Winehq\u3002 \u57282021\u5e746\u670819\u65e5\u68c0\u7d22\u3002  \u2191roblox\u5de5\u4f5c\u5ba4\u3002 Winehq appdb\u3002 2021\u5e741\u670820\u65e5\u7684\u539f\u4ef6\u5b58\u6863\u30022021\u5e746\u670814\u65e5\u68c0\u7d22\u3002 ", "note_en": "While Roblox does not officially support  Linux, the  Wine compatibility layer for running Windows programs can run  Roblox Player and  Roblox Studio on Linux.\n Running Roblox with Wine requires Wine 6.11 or a more recent version. As of June 19, 2021, this requires using a development release. Wine 6.11 is available in Arch Linux and Void Linux and WineHQ provides binary packages for development releases for Debian, Fedora, and Ubuntu.  [1]\n For help installing Roblox on Linux, the  Grapejuice Discord server can be consulted. Users with some knowledge of the terminal and software compilation should not have much trouble with the install process.\n   On July 28, 2012, John Shedletsky confirmed that progress on Roblox on Linux was 97% complete. Shedletsky claimed that the problem with Linux is the poor driver support. Another blog post by Shedletsky claimed that they could spend months on Linux or they could work on a highly requested feature.\n   During the  RDC 2020 Q&amp;A session, it was confirmed that there were currently no plans to bring Roblox to Linux due to its small desktop market share. However,  Arseny Kapoulkine has said that there will be plans if &#34;Linux becomes the platform of choice for gamers&#34;.  [2]  [3]\n Roblox has been tested multiple times, with success until 2015. On May 15, 2015, Roblox received a &#34;Gold&#34; rating in the Wine App Database.  [4]\n From 2015 to 2021, it was not possible to run Roblox Player on Linux, as joining a game resulted in the connection being dropped with the error &#34;This game has shut down.&#34;  [5] This was originally assumed to be due to anti-cheat software, but Kalen Alwardt later stated this &#34;was not the cause of the issue.&#34;  [6]\n On June 11, 2021, a user by the name of ImSlappy826 (Slappy826#0001 on Discord) created a one-line patch for Wine that allowed the Roblox Player to work again on a GNU/Linux or BSD system. The patch implements the ZwFilterToken function, which was supposed to be implemented along  NtFilterToken, into ntdll. The patch has been committed to the Wine development tree  [7] and is included in Wine 6.11.  [8] User Brinker released a pre-patched version for Arch-based Linux distributions, while user robigan created a patch for Debian based distros.\n   There is an issue with the mouse when using Wine. Build from source with the following patch to correct it:\n From dba1a3c3bf5946cd766a439b7db4c8965c92f15e Mon Sep 17 00:00:00 2001From: BrinkerVII &lt;brinkervii@gmail.com&gt;Date: Sat, 12 Jun 2021 11:00:06 +0200Subject: [PATCH 2/2] Turbo jank mouse fix--- dlls/winex11.drv/mouse.c | 4 ++++ 1 file changed, 4 insertions(+)diff --git a/dlls/winex11.drv/mouse.c b/dlls/winex11.drv/mouse.cindex 42bac332664..0549c2d653b 100644--- a/dlls/winex11.drv/mouse.c+++ b/dlls/winex11.drv/mouse.c@@ -648,6 +648,10 @@ static void send_mouse_input( HWND hwnd, Window window, unsigned int state, INPU if (!hwnd) {+ if (input-&gt;u.mi.dwFlags &amp; MOUSEEVENTF_RIGHTUP) {+ reset_clipping_window();+ }+ struct x11drv_thread_data *thread_data = x11drv_thread_data(); HWND clip_hwnd = thread_data-&gt;clip_hwnd; -- 2.32.0\n Roblox Player and  Roblox Studio can be launched like normal if the correct version is used. Roblox Studio has a gold rating in winedb.  [9]\n  The  Roblox FPS Unlocker is also compatible and can be used to reach higher framerates. Requires  Grapejuice.\n Go to the directory of the extracted folder (Linux drive in Wine is usually Z:\\)\n Find the .exe file, open it through the Wine Explorer. It should minimize to tray\n   Before starting the guide, make sure you can run the terminal command &#34;vkcube&#34;, and make sure you have all Vulkan and OpenGL drivers. Requires  Grapejuice Version 3.4.1 or above.\n Open the &#34;Roblox FFlag editor&#34; (If the FFlag editor won&#39;t open, try running Roblox Studio once, and then it should work.)\n   To use Vulkan, search &#34;vulkan&#34; and enable FFlagDebugGraphicsPreferVulkan  (GPU must support Vulkan, otherwise use Direct3D11)\n   Any form of moving the ingame camera via the mouse (eg. Right-clicking, shift lock, and first person), will freeze the mouse in place after scrolling out in first person, toggling off the shift lock by pressing shift, and right-clicking. Right-clicking has a scuffy-ish patch made by the maintainer of  Grapejuice, Brinker. It&#39;s downloadable on Arch Linux at the  Grapejuice Discord.\n     Roblox Player might not have working sound (this may be fixed by installing 32-bit audio packages, e.g. lib32-alsa-plugins, lib32-libpulse, lib32-openal on Arch)\n Using Vulkan/OpenGL might tell you the drivers are outdated, this is fixable by installing your Vulkan or OpenGL drivers.\n Sometimes, on Chromium and some other Chromium-based browsers, playing Roblox from the website might open a new Chromium instance, this won&#39;t happen on Firefox\n Running Roblox Studio using Wine is also not perfect, and you can encounter the following bugs:\n Shadows flickering when using DirectX 11, unless EagerBulkExecution is turned on in the Studio settings\n  Flickering occurs on plugin GUIs and recently updated UI elements (such as Toolbox, Game Settings and Publish to Roblox screen for example) when using OpenGL\n  Sometimes after joining, you may get a  lag spike and can only move in one direction.\n   When moving your camera while the player is moving, your mouse will be stuck moving the camera (this can be fixed by right-clicking a few times quickly)\n Sometimes you can see a window saying &#34;RobloxPlayerBeta.exe has encountered a serious error and must close!&#34; message.\n  \u2191   Download.  WineHQ. Archived from  the original on June 19, 2021. Retrieved on June 19, 2021.\n \u2191   Roblox Panel | RDC2020.  YouTube. Roblox (July 31, 2020). Retrieved on June 19, 2021.\n \u2191   Bloxy News (July 26, 2020).  Twitter post.  Twitter. Archived from  the original on March 1, 2021. Retrieved on June 19, 2021.\n  \u2191   &#34;You have been kicked due to unexpected client behavior. (Error Code: 268)&#34; message after attempting to join a game.  GitHub. Archived from  the original on January 25, 2021. Retrieved on June 19, 2021.\n  \u2191  Alwardt, Kalen (June 14, 2021).  ntdll: Export ZwFilterToken()..  source.winehq.org. Retrieved on June 19, 2021.\n \u2191  Julliard, Alexandre.  The Wine development release 6.11 is now available..  WineHQ. Retrieved on June 19, 2021.\n \u2191   Roblox Studio.  WineHQ AppDB. Archived from  the original on January 20, 2021. Retrieved on June 14, 2021.", "posttime": "2021-06-29 22:32:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux", "title": "Roblox\u5728Linux\u4e0a\u6709\u6700\u8fd1\u7684\u8461\u8404\u91526.11 ", "title_en": "Roblox on Linux with recent Wine 6.11", "transed": 1, "url": "https://roblox.fandom.com/wiki/Roblox_on_Linux", "via": "", "real_tags": ["linux"]}]