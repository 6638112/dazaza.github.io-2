[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1028202, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5468\u524d\uff0c@rombik_su\u5728Twitter\u4e0a\u6307\u51fa\u4e86eBay\u4e0a\u4e00\u6b3e\u975e\u5e38\u4fbf\u5b9c\u7684FPGA\u52a0\u901f\u5361\u3002\u8be5\u7535\u8def\u677f\u5305\u542b\u4e00\u4e2a\u4e13\u6709\u7684Samtec\u677f\u5bf9\u677f\u8fde\u63a5\u5668\uff0c\u5f88\u53ef\u80fd\u627f\u8f7d\u7535\u6e90\u3001PCI Express\u548c\u8f85\u52a9\u4fe1\u53f7(JTAG\u3001IPMI\u5230BMC\u7b49)\u3001\u4e24\u4e2a\u9690\u85cf\u5728\u6563\u70ed\u7247\u4e0b\u9762\u7684QSFP\u6846\u67b6DDR3\u548c\u4e00\u4e2a\u5927\u578bFPGA\u3002\n\u6211\u5bf9\u6240\u6709\u4e0eFPGA\u76f8\u5173\u7684\u4e1c\u897f\u90fd\u5145\u6ee1\u70ed\u60c5\uff0c\u800c\u4e14\u51a0\u72b6\u75c5\u6bd2\u9501\u5b9a\u9650\u5236\u4e86\u6709\u8da3\u7684\u4e8b\u60c5\u7684\u6570\u91cf\uff0c\u6211\u51b3\u5b9a\u4e70\u4e0b\u8fd9\u5757\u7535\u8def\u677f\u3002\u8fd9\u79cd\u4f30\u4ef7\u5de5\u5177\u5f88\u5bb9\u6613\u5c31\u8981\u51e0\u5343\u7f8e\u5143\uff0c\u800c40\u7f8e\u5143\u662f\u975e\u5e38\u5212\u7b97\u7684\u3002\n\u5728\u7b49\u5f85\u8463\u4e8b\u4f1a\u5230\u6765\u7684\u540c\u65f6\uff0c\u6211\u505a\u4e86\u4e00\u4e9b\u521d\u6b65\u8c03\u67e5\u3002\u6613\u8da3\u4e0a\u7684\u63cf\u8ff0\u76f8\u5f53\u9690\u6666\u3002\u6e05\u5355\u7684\u6807\u9898\u5305\u62ec\u4e86\u9ed1\u677f\u4e0a\u6807\u7b7e\u4e0a\u7684\u6240\u6709\u6587\u5b57\uff0c\u5305\u62ec\u6307\u793a\u5f3a\u5236\u7a7a\u6c14\u901a\u8fc7\u9ed1\u677f\u7684\u65b9\u5411\u7684\u6807\u7b7e\u3002\n\u6700\u6709\u6210\u6548\u7684\u7ebf\u7d22\u4e4b\u4e00\u662f\u8463\u4e8b\u4f1a\u4e0a\u7684\u5fae\u8f6f\u6807\u7b7e\u3002\u51e0\u5e74\u524d\u5c31\u5e7f\u4e3a\u4eba\u77e5\u7684\u662f\uff0c\u5fae\u8f6f\u6b63\u5728\u4f7f\u7528FPGA\u52a0\u901fBing\u641c\u7d22\uff0c\u8fd9\u53ef\u80fd\u662f\u670d\u52a1\u5668\u4e2d\u4f7f\u7528\u7684\u4e3b\u677f\u4e4b\u4e00\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u5fae\u8f6f\u4f7f\u7528Altera(\u73b0\u5728\u7684Intel PSG)\uff0c\u800c\u4e14\u90a3\u662f\u51e0\u5e74\u524d\u7684\u4e8b\u4e86\uff0c\u5f88\u53ef\u80fd\u8be5\u5361\u5305\u542b\u4e00\u4e2aStratix V FPGA\u3002\nGoogle\u4e0a\u7684\u7b2c\u4e00\u4e2a\u94fe\u63a5(\u6216\u8005\u6211\u5e94\u8be5\u7528\u5fc5\u5e94\u5417\uff1fFPGA\u4f1a\u610f\u8bc6\u5230\u6211\u5728\u5bfb\u627e\u5173\u4e8e\u4ed6\u4eec\u7684\u4fe1\u606f\u5417\uff1f)\u3002\u5fae\u8f6fCatapult Stratix v&34\uff1b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u6982\u5ff5\u4e0a\u7c7b\u4f3c\u7684\u5361\u7247\uff0c\u4f46\u5e76\u4e0d\u5b8c\u5168\u76f8\u540c\u3002\n\u672c\u6587\u8fd8\u63d0\u5230\u4e86\u5e7f\u6cdb\u4f7f\u7528\u7684OpenCompute\u670d\u52a1\u5668\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u6709\u5173Samtec\u8fde\u63a5\u5668\u4e0a\u7684\u5f15\u811a\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u7531\u4e8eOpenCompute\u9879\u76ee\u6807\u51c6\u5316\u7684\u5939\u5c42\u5361\u683c\u5f0f\u7e41\u591a\uff0c\u800c\u4e14\u627e\u5230\u5339\u914d\u7684\u683c\u5f0f\u4e5f\u4e0d\u662f\u4e00\u4ef6\u5bb9\u6613\u7684\u4e8b\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5c06\u8fd9\u9879\u4efb\u52a1\u7559\u5f85\u4ee5\u540e\u5b8c\u6210\u3002\n\u8fdb\u4e00\u6b65\u6316\u6398\u641c\u7d22\u7ed3\u679c\uff0c\u6211\u8fd8\u80fd\u591f\u627e\u5230\u53e6\u4e00\u5f20\u5378\u4e0b\u6563\u70ed\u7247\u7684\u7535\u8def\u677f\u7167\u7247\u3002\n\u53bb\u6389\u4e86FPGA\u4e0a\u7684\u6807\u8bb0\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5b83\u662fStratix V\uff0c\u5e76\u4e14\u4ece\u4ee5\u524d\u7684\u6587\u6863\u4e2d\u9884\u8ba1\u4f1a\u6709\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4f8b\u5982\uff0c5\u4e2aDDR3\u82af\u7247\u7ec4\u5408\u62109\u4e2a\u82af\u7247\uff0c\u7528\u4e8e72\u4f4dDDR3\u6570\u636e\u5bbd\u5ea6)\u3002\n\u6211\u5728\u8fd9\u5f20\u56fe\u7247\u4e2d\u53d1\u73b0\u7684\u6709\u8da3\u4e4b\u5904\u662f\u53f3\u4e0a\u89d2\u6709\u4e00\u4e2a\u95ea\u5b58(Micron 25Q256)\uff0c\u8fd9\u610f\u5473\u7740FPGA\u7684\u6620\u50cf\u6700\u6709\u53ef\u80fd\u5b58\u50a8\u5728\u4e3b\u677f\u4e0a\uff0c\u800c\u4e0d\u662f\u5728\u542f\u52a8\u65f6\u901a\u8fc7\u8fde\u63a5\u5668\u4e0b\u8f7d\u3002\u4e5f\u6709\u53ef\u80fd\u662f\u901a\u8fc7\u534f\u8bae\u8fdb\u884c\u914d\u7f6e\uff0c\u5e76\u4e14\u53ea\u6709\u57fa\u672c\u6620\u50cf\u5b58\u50a8\u5728Flash\u4e2d\u3002\n\u7136\u540e\u6709\u4e00\u5929\uff0c\u8463\u4e8b\u4f1a\u7ec8\u4e8e\u6765\u4e86\u3002\u8fd9\u5757\u677f\u4e0e\u524d\u9762\u63d0\u5230\u7684\u6587\u7ae0\u4e2d\u7684\u63cf\u8ff0\u76f8\u7b26\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u662f\u65f6\u5019\u5f00\u59cb\u8bd5\u9a8c\u7535\u8def\u677f\u4e86\u3002FT232H\u4f3c\u4e4e\u7531USB\u603b\u7ebf\u7535\u538b\u4f9b\u7535\uff1aJ3\u7684\u5f15\u811a1\u8fde\u63a5\u5230FT232H\u7684\u5f15\u811a40(VREGIN)\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u51b3\u5b9a\u5148\u4eceUSB\u5f00\u59cb\u3002\u4f7f\u7528FT232H\u7684\u6570\u636e\u8868\uff0c\u5f88\u5bb9\u6613\u786e\u5b9a\u8fde\u63a5\u5668\u4e0a\u7684\u5f15\u811a\u5206\u914d\u3002\u6211\u4e0d\u60f3\u76f4\u63a5\u710a\u63a5\u5728\u8fde\u63a5\u5668\u5f15\u811a\u4e0a\uff0c\u56e0\u4e3a\u6211\u60f3\u5728\u5c06\u6765\u505a\u4e00\u6761\u5408\u9002\u7684\u7535\u7f06\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u53ef\u4ee5\u5f00\u59cb\u5c1d\u8bd5\u53cd\u5411\u5de5\u7a0b\u8fde\u63a5\u5668\u5f15\u811a\u3002\u6211\u8bbe\u6cd5\u627e\u51fa\u4e86\u4ee5\u4e0b\u8054\u7cfb\uff1a\n\u8f93\u5165\u7535\u6e90\uff1a\u6709\u51e0\u4e2a\u7ba1\u811a\u8fde\u63a5\u5230\u5927\u578bMOSFET\u7684\u6f0f\u6781\u3002\u6211\u8fd8\u5047\u8bbe\u7535\u5e73\u4e3a12V\uff0c\u56e0\u4e3aPCIe\u5361\u5f88\u5e38\u89c1\u3002\n\u8fde\u63a5\u5668\u9644\u8fd1\u670916\u5bf9\u4ea4\u6d41\u8026\u5408\u7535\u5bb9\u5668\u3002PCIe\u6807\u51c6\u8981\u6c42\u5728\u53d1\u9001\u7aef\u4f7f\u7528\u7535\u5bb9\u5668\uff0c\u56e0\u6b64\u6211\u5047\u8bbe\u8fd9\u662fPCIe_Tx\u3002\u7531\u4e8e\u4e0d\u77e5\u9053\u786e\u5207\u7684\u8f66\u9053\u7f16\u53f7\uff0c\u6211\u51b3\u5b9a\u7528\u5b57\u6bcd\u800c\u4e0d\u662f\u6570\u5b57\u6765\u5217\u4e3e\u5b83\u4eec\u3002\n\u4e00\u4e9b\u5f15\u811a\u8fde\u63a5\u5230\u8fde\u63a5\u5668\u4e0a\u65b9\u7684\u7535\u8def-\u6211\u5df2\u7ecf\u6ce8\u91ca\u4e86\u8fd9\u4e9b\u5f15\u811a\uff0c\u4f46\u73b0\u5728\u6211\u4e0d\u6e05\u695a\u7528\u9014\u662f\u4ec0\u4e48\u3002\u6211\u628a\u90a3\u4e9b\u5927\u5934\u9488\u6ce8\u91ca\u4e3aAUX\u3002\n\u6211\u5df2\u7ecf\u8fde\u63a5\u4e86Q12(FDMS0310AS)\u6f0f\u6781\u4fa7\u768412V\uff0c\u8fd9\u4e5f\u4e3aSamtec\u8fde\u63a5\u5668\u4e0a\u7684PU12\u548c+12V\u5f15\u811a\u4f9b\u7535\u3002\u7136\u800c\uff0c\u529f\u8017\u4ec5\u4e3a3 mA\uff0c\u5e76\u4e14MOSFET\u5904\u4e8e\u95ed\u5408\u72b6\u6001\u3002\n\u6211\u627e\u4e0d\u5230\u4efb\u4f55\u6709\u5173PU12(L536FCD)\u7684\u4fe1\u606f\u3002\u6211\u5047\u8bbe\u5b83\u662f\u4e00\u79cd\u9650\u6d41\u4fdd\u62a4\uff0c\u6d4b\u91cf\u901a\u8fc70.01\u6b27\u59c6\u5e76\u8054\u7535\u963b\u7684\u7535\u6d41\uff0c\u5e76\u63a7\u5236Q12\u7684\u6805\u6781\u5f15\u811a\u3002\n\u4e3a\u4e86\u4ece\u5b57\u9762\u4e0a\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u51b3\u5b9a\u4e5f\u5728Q12\u7684\u53e6\u4e00\u8fb9\u8fde\u63a512V\u3002\u8fd9\u4ea7\u751f\u4e86\u4e00\u4e9b\u7ed3\u679c\uff1a\u529f\u8017\u63d0\u9ad8\u5230695 mA\uff0c\u8fd9\u662f\u4eba\u4eec\u5bf9\u8fd9\u79cd\u7535\u8def\u677f\u7684\u9884\u671f\uff0cLED\u4e5f\u53d8\u4eae\u4e86\u3002\n\u5728\u7535\u8def\u7684\u5404\u4e2a\u70b9\u4e0a\uff0c\u6211\u8fd8\u53ef\u4ee5\u6d4b\u91cf\u4eba\u4eec\u671f\u671b\u5728\u8fd9\u6837\u7684\u7535\u8def\u4e2d\u627e\u5230\u7684\u6240\u6709\u7535\u538b\uff1a\n\u6563\u70ed\u7247\u8986\u76d6\u4e86\u7535\u8def\u677f\u9876\u4fa7\u7684\u5927\u90e8\u5206\uff0c\u5305\u62ec\u7528\u4e8eFPGA\u914d\u7f6e\u7684\u95ea\u5b58\u3002\u7136\u800c\uff0c\u4f7f\u7528\u793a\u6ce2\u5668\u63a2\u5934\u4ecd\u7136\u53ef\u4ee5\u5230\u8fbe\u5f15\u811a8\u548c9(\u5206\u522b\u4e3aDQ1\u548cDQ2)\u3002\n\u5728\u7535\u8def\u677f\u901a\u7535\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230FPGA\u5728\u5927\u7ea6\u4e00\u79d2\u949f\u5185\u7f16\u7a0b\u5b8c\u6210\u3002\u8fd9\u9ad8\u4e8ePCIe\u6807\u51c6\u8981\u6c42\u7684100\u6beb\u79d2/200\u6beb\u79d2\u7684\u9650\u5236\uff0c\u4f46\u5728\u6b64\u81ea\u5b9a\u4e49\u5916\u5f62\u56e0\u5b50\u4e2d\uff0c\u8be5\u503c\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\u677f\u4e0a\u7684LED\u4e5f\u7531FPGA\u9a71\u52a8\uff0c\u5e76\u4fdd\u6301\u4eae\u8d77\u4e00\u79d2\u949f\uff0c\u76f4\u5230FPGA\u672a\u88ab\u7f16\u7a0b\uff0c\u8fd9\u662fFPGA\u4ece\u5b58\u50a8\u5668\u914d\u7f6e\u7684\u53e6\u4e00\u4e2a\u6307\u793a\u3002\n\u7535\u8def\u677f\u4e0a\u7684\u53e6\u4e00\u4e2a\u5b58\u50a8\u5668\u662f\u4e00\u4e2a128Kbit\u7684\u5c0fEEPROM\uff0c\u5b83\u53ef\u80fd\u5b58\u50a8MAC\u5730\u5740\u3001\u5e8f\u5217\u53f7\u548c\u5176\u4ed6\u7c7b\u4f3c\u4fe1\u606f\u3002\n\u975e\u5e38\u6709\u8da3\u7684\u662f\uff0cSDA\u548cSCL\u7ebf\u8def\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u4ecd\u7136\u4fdd\u6301\u4f4e\u7535\u5e73\u3002\u53ef\u80fd\u6839\u672c\u4e0d\u4f7f\u7528EEPROM\uff0c\u6216\u8005\u7535\u8def\u7684\u67d0\u4e9b\u5176\u4ed6\u90e8\u5206\u6b63\u5728\u5c06EEPROM\u63a5\u53e3\u72b6\u6001\u673a\u4fdd\u6301\u5728\u590d\u4f4d\u72b6\u6001\u3002\n\u5728\u7535\u8def\u677f\u901a\u7535\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u53ef\u4ee5\u6d4b\u91cf\u8fde\u63a5\u5668\u5f15\u811a\u4e0a\u7684\u7535\u538b\u3002\u6b63\u5982\u9884\u671f\u7684\u90a3\u6837\uff0c\u572816\u5bf9\u5dee\u5206\u5bf9\u4e0a\uff0c\u6211\u53ef\u4ee5\u68c0\u6d4b\u5230PCIerReceiver\u7684\u504f\u7f6e\u7535\u538b\uff0c\u7ea6\u4e3a0.7V\u3002\n\u4e00\u4e9b\u8f85\u52a9\u5f15\u811a\u6709\u8f7b\u5fae\u7684\u504f\u7f6e\uff0c\u4f46\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u65c1\u8def\u7535\u963b\u548c\u5176\u4ed6\u7ec4\u4ef6\u9020\u6210\u7684\u3002\u8981\u5b8c\u5168\u4e86\u89e3\u8fd9\u4e9b\u522b\u9488\u7684\u7528\u9014\uff0c\u8fd8\u9700\u8981\u66f4\u591a\u7684\u8c03\u67e5\u3002\n\u63d2\u5165QSFP\u7535\u7f06\u53ea\u4f1a\u7565\u5fae\u589e\u52a0\u529f\u8017\u3002\u5f88\u660e\u663e\uff0c\u9ad8\u901f\u7535\u8def\u88ab\u7981\u7528\uff0c\u5f88\u53ef\u80fd\u662f\u56e0\u4e3a\u5185\u90e8\u5bc4\u5b58\u5668\u914d\u7f6e\uff0c\u4e5f\u4e0d\u592a\u53ef\u80fd\u662f\u56e0\u4e3a\u7535\u7f06\u4e0d\u517c\u5bb9\uff0c\u5373\u7535\u8def\u677f\u89e3\u6790EEPROM\u5e76\u4e14\u4e0d\u542f\u7528\u9ad8\u901f\u7535\u8def\u3002\n\u6211\u5df2\u7ecf\u63a2\u6d4b\u4e86\u6211\u8ba4\u4e3a\u662fDDR3\u7aef\u63a5\u7535\u963b\u7684\u4e1c\u897f(\u5728\u5e95\u90e8\uff0c\u5728\u9876\u90e8\u7b2c\u4e94\u4e2aDDR3\u7ec4\u4ef6\u7684\u53e6\u4e00\u4fa7)\uff0c\u6ca1\u6709\u89c2\u5bdf\u5230\u4efb\u4f55\u5f00\u5173\u6d3b\u52a8\u3002DDR3\u63a7\u5236\u5668\u4f3c\u4e4e\u4e00\u76f4\u5904\u4e8e\u91cd\u7f6e\u72b6\u6001\u3002\n\u7b2c\u4e00\u6b21\u8c03\u51fa\u8fc7\u7a0b\u76f8\u5f53\u6210\u529f\uff1b\u6211\u5df2\u7ecf\u8bbe\u6cd5\u6253\u5f00\u7535\u8def\u677f\u800c\u6ca1\u6709\u635f\u574f\u5b83\uff0c\u5e76\u5f04\u6e05\u695a\u4e86\u8fde\u63a5\u5668\u7684\u57fa\u672c\u5f15\u811a\u3002\n\u4e0b\u4e00\u6b65\uff0c\u6211\u8ba1\u5212\u8c03\u67e5OpenCompute\u7f51\u7ad9\uff0c\u5982\u679c\u5b58\u5728\u63cf\u8ff0\u8fde\u63a5\u5668\u5f15\u811a\u7684\u6587\u6863\u3002\u4ecd\u6709\u5f85\u786e\u5b9a\u7684\u662f\u53c2\u8003\u65f6\u949f\u548c\u6765\u81ea\u8fde\u63a5\u5668\u7684\u4f7f\u80fd\u4fe1\u53f7\u3002\n\u6700\u7ec8\uff0c\u6211\u8ba1\u5212\u751f\u4ea7\u4e00\u79cd\u5c0f\u578bPCB\uff0c\u53ef\u4ee5\u5c06\u8fd9\u5757\u7535\u8def\u677f\u63d2\u5165\u666e\u901a\u7684PCIe\u5361\u63d2\u69fd\u3002", "note_en": "A couple of weeks ago  @rombik_su in a  Twitterthread pointed out avery cheap FPGA accelerator card on eBay. The board contains a proprietarySamtec board-to-board connector, most likely carrying power, PCI Express, andauxiliary signals (JTAG, IPMI to BMC, ...), two QSFP cages, DDR3 and a largeFPGA, hidden under the heatsink.\n Being passionate about everything FPGA-related, and with Coronavirus lockdownlimiting the number of fun things to do, I decided to purchase the board. Anevaluation kit of this kind can easily cost thousands, and 40 USD is a realbargain.\n  While waiting for the board to arrive, I did some initial investigation. Thedescription on eBay is quite cryptic. The title of the listing included all thetext from the labels on the board, including the label &#34;AIRFLOW&#34; indicatingthe direction of the forced air through the board.\n One of the most fruitful clues was the label &#34;Microsoft&#34; on the board. It waswell-publicized a couple of years ago that Microsoft is using FPGAs toaccelerate Bing searches, and this might be one of the boards used in theservers.\n Remembering that Microsoft went with Altera (now Intel PSG) and that this wassome years back, it is most likely that the card contains a Stratix V FPGA.\n The  firstlinkon Google (or should I have used Bing? would the FPGAs be aware that I amlooking for information about them?) for &#34;microsoft catapult stratix v&#34;presented some conceptually similar cards, but not exactly the same.\n         The paper also mentions &#34;widely-used OpenCompute server&#34; which could give outsome information about the pinout on the Samtec connector. Since there arenumerous formats for mezzanine cards standardized by the OpenCompute project,and finding the matching one is not trivial, I decided to leave this task forlater.\n Further digging in the search results, I was also able to find  another photoof the board with the heatsink removed.\n The marking on the FPGA are removed, but we already know that it is a Stratix V,and some things were expected from previous documents, e.g. 5 DDR3 chips fora combined of 9 chips for 72-bit DDR3 data width).\n What I found interesting in this picture is a Flash memory (Micron 25Q256) inthe top right corner, which means that the image for the FPGA is most likelystored on the board and is not downloaded through the connector at the startup.It is also possible that  Configuration viaProtocolis used, and only the basic image is stored in the Flash.\n  Then one day, the board finally arrives. The board matches the descriptionin the previously-mentioned article.\n     At this point, it was time to start experimenting with the board. The FT232Hseems to be powered from the USB BUS voltage: pin 1 of J3 is connected to pin 40(VREGIN) of FT232H. This is why I decided to first start with the USB. With thedatasheet for FT232H it was trivial to determine the pin assignments on theconnector. I did not want to solder directly on the connector pins, as I wouldlike to make a proper cable in the future.\n     At this point I could start trying to reverse engineer the connector pinout. Imanaged to figure out the following connections:\n Input power: there are a couple of pins connected to the Drain of the large MOSFET. I also assume that the level is, as it is common for PCIe cards, 12V.\n There are 16 pairs of AC-coupling capacitors near the connector. PCIe standard mandates capacitors on the TX side, so I assume this is PCIE_TX. Not knowing the exact lane numbering, I decided to enumerate them with letters instead of numbers.\n  Some of the pins are connected to the circuit above the connector - I have annotated these pins, but right now I do not have a clear idea what is the purpose. I annotated those pins as AUX.\n   I have connected the 12V on the Drain side of the Q12 (FDMS0310AS), which hasalso energized the PU12 and +12V pins on the Samtec connector. However, thepower consumption was only 3 mA, and the MOSFET was left closed.\n I could not find any information about PU12 (L536FCD). I assume it is somekind of a current-limit protection, measuring the current through the 0.01 Ohmshunt resistor and controlling the Gate pin of Q12.\n To literally bypass this problem, I have decided to also connect 12 V on theother side of the Q12. This yielded some results; the power consumption raisedto 695 mA, which is what one would expect from such board, and the LEDs turnedon.\n  On various points in the circuit I could also measure all the voltages onewould expect to find in such a circuit:\n    The heatsink covers the large part of the top side of the board including theFlash memory for the FPGA configuration. One can, however, still reach the pins8 and 9 (DQ1 and DQ2, respectively) with an oscilloscope probe.\n After the power is applied to the board, we can observe that the FPGA getsprogrammed in roughly a second. This is above the 100 ms/200 ms limit requiredby the PCIe standard, but in this custom form factor the value might bedifferent.\n   LEDs on the board are also driven by the FPGA and remain lit for a second untilthe FPGA is not programmed, another indication that the FPGA gets configuredfrom the memory.\n  Another memory on the board is a small 128Kbit EEPROM, which probably stores MACaddresses, serial numbers, and other similar information.\n Quite interestingly, SDA and SCL lines remain stuck low after some time.Maybe the EEPROM is not used at all, or maybe there is some other partof the circuit is keeping the EEPROM interface state machine in a reset.\n    With the board powered on, I could measure the voltage on the connector pins.As expected, on 16 differential pairs I can sense a bias voltage of the PCIereceivers, around 0.7 V.\n Some of the AUX pins have a slight bias, but this is probably caused bypull-up resistors and other components. It would require more investigationto fully understand the purpose of these pins.\n    Plugging in a QSFP cable only marginally increases the power consumption.It is clear that the high-speed circuit is disabled, most likely becauseof an internal register configuration and less likely because the cableis &#34;not compatible&#34;, i.e. the board parses the EEPROM and it does not enablethe high-speed circuit.\n      I have probed what I presume are the DDR3 termination resistors (on the bottomside, on the other side of the 5th DDR3 component on the top) and observedno switching activity. It seems that the DDR3 controller is kept in reset.\n  The first bring-up session was quite successful; I have managed to turn on theboard without damaging it and figure out the basic pinout of the connector.\n For the next step, I plan to investigate the OpenCompute website if there existsa document that would describe the pinout of the connector. Still left to bedetermined are the reference clock and an enable signal from the connector.\n Eventually I plan to produce a small PCB that would allow plugging this boardin a normal PCIe card slot.", "posttime": "2020-10-12 07:08:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "stratix,accelerator,fpga", "title": "\u6613\u8da3\u7684Stratix V\u52a0\u901f\u5361", "title_en": "Stratix V accelerator card from eBay", "transed": 1, "url": "https://j-marjanovic.io/stratix-v-accelerator-card-from-ebay.html", "via": "", "real_tags": ["stratix", "fpga"]}, {"category": "", "categoryclass": "", "imagename": "badffd0ee0ede742cfdc2a2418b03e88.jpg", "infoid": 1028201, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7535\u5b50\u5730\u56fe\u662f\u4e00\u79cd\u5b9e\u65f6\u53ef\u89c6\u5316\uff0c\u663e\u793a\u4f60\u7684\u7535\u529b\u6765\u81ea\u54ea\u91cc\uff0c\u4ee5\u53ca\u4ea7\u751f\u7535\u529b\u65f6\u6392\u653e\u4e86\u591a\u5c11\u4e8c\u6c27\u5316\u78b3\u3002", "note_en": "electricityMap is a live visualization of where your electricity comes from and how much CO2 was emitted to produce it.", "posttime": "2020-10-12 07:08:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u529b,live", "title": "\u7535\u529b\u5730\u56fe-\u7535\u529b\u751f\u4ea7\u548c\u6d88\u8d39\u7684\u5b9e\u65f6CO\u2082\u6392\u653e\u91cf", "title_en": "ElectricityMap \u2013 Live CO\u2082 emissions of electricity production and consumption", "transed": 1, "url": "https://www.electricitymap.org/", "via": "", "real_tags": ["\u7535\u529b", "live"]}, {"category": "", "categoryclass": "", "imagename": "3e4ca616994c5a0d58dd3816aa40c564.jpeg", "infoid": 1028200, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u7ae0\u9c7c\u8001\u5e08\u8bb2\u8ff0\u4e86\u514b\u96f7\u683c\u00b7\u798f\u65af\u7279(Craig Foster)\u4e0e\u91ce\u751f\u7ae0\u9c7c\u5171\u5ea6\u7684\u90a3\u4e00\u5e74\u7684\u6545\u4e8b\u3002\u5b83\u662f\u7531\u6d77\u6d0b\u53d8\u5316\u9879\u76ee\u521b\u9020\u7684\uff0c\u5c55\u793a\u4e86\u5927\u975e\u6d32\u6d77\u6d0b\u4f11\u606f\u3002", "note_en": "My Octopus Teacher follows the story of the year Craig Foster spent with a wild octopus. It was created by the Sea Change Project and showcases the Great African Seaforest.", "posttime": "2020-10-12 07:08:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8001\u5e08,octopus,\u6d77\u6d0b", "title": "\u201c\u6211\u7684\u7ae0\u9c7c\u8001\u5e08\u201d\u7684\u5236\u4f5c", "title_en": "The Making of \u201cMy Octopus Teacher\u201c", "transed": 1, "url": "https://seachangeproject.exposure.co/the-making-of-my-octopus-teachernbsp?embed=true", "via": "", "real_tags": ["\u8001\u5e08", "octopus", "\u6d77\u6d0b"]}, {"category": "", "categoryclass": "", "imagename": "7d0680142eabb3a09328b33e41ec55d0.jpg", "infoid": 1028199, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u4e5f\u6709\u97f3\u9891\u683c\u5f0f\u3002\u73b0\u5728\u6536\u542c\uff0c\u6216\u901a\u8fc7\u60a8\u6700\u559c\u6b22\u7684\u64ad\u5ba2\u5e94\u7528\u7a0b\u5e8f\u8ba2\u9605\u201cHakai\u6742\u5fd7\u6709\u58f0\u7248\u201d\u3002\n\u636e\u8bf4\u5723\u9a6c\u4fee\u5c9b\u662f\u963f\u62c9\u65af\u52a0\u6700\u504f\u8fdc\u7684\u5730\u65b9\u3002\u5b83\u88ab\u56f0\u5728\u901a\u5f80\u897f\u4f2f\u5229\u4e9a\u7684\u767d\u4ee4\u6d77\u4e2d\uff0c\u8ddd\u79bb\u6700\u8fd1\u7684\u4eba\u7c7b\u4f4f\u533a\u6709300\u591a\u516c\u91cc\uff0c24\u5c0f\u65f6\u7684\u8239\u7a0b\u3002\u5b83\u770b\u8d77\u6765\u6070\u5982\u5176\u5206\u5730\u4ee4\u4eba\u671b\u800c\u751f\u754f\uff0c\u5c31\u50cf\u5b83\u4ece\u6d53\u96fe\u4e2d\u9732\u51fa\u7684\u6837\u5b50\uff0c\u5c31\u50cf\u4e00\u53ea\u9ed1\u6697\u7684\u7fc5\u8180\u5c55\u5f00\u4e86\u3002\u5f2f\u66f2\u7684\u3001\u6ca1\u6709\u6811\u6728\u7684\u5c71\u8109\u6324\u6ee1\u4e86\u5b83\u7684\u72ed\u957f\u571f\u5730\uff0c\u7a81\u7136\u5760\u5165\u60ac\u5d16\uff0c\u5728\u90a3\u91cc\u5b83\u4eec\u4e0e\u6d77\u6d6a\u76f8\u9047\u3002\u5723\u9a6c\u4fee\u5317\u9762\u5750\u843d\u7740\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u9669\u5cfb\u7684\u970d\u5c14\u5c9b\u3002\u4e00\u5ea7\u540d\u4e3a\u5c16\u5cf0\u7684\u77f3\u5934\u57ce\u5821\u5728\u5723\u9a6c\u4fee\u7684\u5357\u4fa7\u7ad9\u5c97\u3002\u8e0f\u4e0a\u8fd9\u7247\u88ab\u65e0\u8fb9\u65e0\u9645\u7684\u6d77\u6d0b\u5305\u56f4\u7684\u96f6\u661f\u571f\u5730\uff0c\u5c31\u50cf\u88ab\u4e00\u6735\u88ab\u6df9\u6ca1\u7684\u7f57\u76d8\u73ab\u7470\u4e2d\u5fc3\u7684\u65e0\u540d\u4e4b\u5730\u541e\u6ca1\u4e86\u4e00\u6837\u3002\n\u5f53\u6211\u51dd\u89c6\u7740\u5723\u9a6c\u4fee\u897f\u5317\u7aef\u7684\u4e00\u4e2a\u6d45\u5751\u65f6\uff0c\u6211\u7684\u5934\u6709\u70b9\u6655\u3002\u73b0\u5728\u662f2019\u5e747\u6708\u4e0b\u65ec\uff0c\u7a7a\u6c14\u4e2d\u5145\u65a5\u7740\u5c9b\u4e0a\u7279\u6709\u7684\u6b4c\u7530\u9f20\u7684\u53eb\u58f0\u3002\u91ce\u82b1\u548c\u68c9\u8349\u70b9\u7f00\u5728\u6211\u811a\u4e0b\u6d3c\u5730\u4e0a\u751f\u957f\u7684\u51bb\u571f\u5e26\u4e0a\uff0c\u4f46\u5927\u7ea6400\u5e74\u524d\uff0c\u5b83\u662f\u4e00\u5ea7\u623f\u5b50\uff0c\u6316\u5230\u4e00\u534a\u7684\u5730\u91cc\u4ee5\u62b5\u5fa1\u5927\u81ea\u7136\u7684\u4fb5\u88ad\u3002\u8fd9\u662f\u5c9b\u4e0a\u6700\u53e4\u8001\u7684\u4eba\u7c7b\u6807\u5fd7\uff0c\u4e5f\u662f\u8fd9\u91cc\u552f\u4e00\u53d1\u73b0\u7684\u53f2\u524d\u623f\u5c4b\u3002\u4e00\u6761\u957f\u7740\u5730\u8863\u7684\u9cb8\u9c7c\u988c\u9aa8\u6307\u5411\u5927\u6d77\uff0c\u8fd9\u662f\u73ab\u7470\u7684\u6b63\u5317\u65b9\u5411\u7684\u9488\u3002\n\u4e0e\u5c9b\u4e1c\u4fa7\u66f4\u591a\u6709\u5e87\u62a4\u7684\u6d77\u6e7e\u548c\u6d77\u6ee9\u76f8\u6bd4\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u76f8\u5bf9\u82db\u523b\u7684\u5b9a\u5c45\u4e4b\u5730\u3002\u66b4\u98ce\u96e8\u7ecf\u5e38\u4ee5\u516c\u6d77\u7684\u6700\u5927\u5a01\u529b\u731b\u70c8\u88ad\u51fb\u8fd9\u7247\u6d77\u5cb8\u3002\u572819\u4e16\u7eaa\u672b\u4fc4\u7f57\u65af\u4eba\u548c\u7f8e\u56fd\u4eba\u6355\u6740\u5317\u6781\u718a\u4e4b\u524d\uff0c\u8fd9\u91cc\u66fe\u7ecf\u6709\u591a\u8fbe300\u53ea\u5317\u6781\u718a\u5728\u8fd9\u91cc\u907f\u6691\u3002\u81ea2002\u5e74\u4ee5\u6765\u4e00\u76f4\u5728\u7fa4\u5c9b\u5de5\u4f5c\u7684\u8003\u53e4\u5b66\u5bb6\u4e39\u5c3c\u65af\u00b7\u683c\u91cc\u82ac(Dennis Griffin)\u8868\u793a\uff0c\u6709\u8bc1\u636e\u8868\u660e\uff0c\u5751\u5c4b\u7684\u5c45\u4f4f\u8005\u53ef\u80fd\u6709\u4e00\u4e2a\u591a\u5b63\u5ea6\u6ca1\u6709\u4f7f\u7528\u8fc7\u5b83\u3002\u5bf9\u8be5\u9057\u5740\u7684\u53d1\u6398\u7ed3\u679c\u8db3\u4ee5\u8868\u660e\uff0c\u56fe\u52d2\u6587\u5316\u7684\u4eba-\u73b0\u5728\u5c45\u4f4f\u5728\u963f\u62c9\u65af\u52a0\u897f\u5317\u6d77\u5cb8\u7684\u56e0\u7ebd\u7279\u4eba\u548c\u5c24\u666e\u4f0a\u514b\u4eba\u7684\u524d\u8eab-\u5efa\u9020\u4e86\u5b83\u3002\u4f46\u683c\u91cc\u82ac\u6ca1\u6709\u53d1\u73b0\u58c1\u7089\u7684\u8ff9\u8c61\uff0c\u53ea\u53d1\u73b0\u4e86\u4e00\u5c42\u8584\u8584\u7684\u6587\u7269\u3002\n\u6765\u81ea\u5357\u90e8\u963f\u7559\u7533\u7fa4\u5c9b\u548c\u666e\u91cc\u6bd4\u6d1b\u592b\u7fa4\u5c9b\u7684Unangan\u4eba\u6216Aleut\u4eba\u8bb2\u8ff0\u4e86\u4e00\u4e2a\u6545\u4e8b\uff0c\u4e00\u4e2a\u914b\u957f\u7684\u513f\u5b50\u5728\u666e\u91cc\u6bd4\u6d1b\u592b\u88ab\u5439\u51fa\u822a\u7ebf\u540e\u53d1\u73b0\u4e86\u5f53\u65f6\u65e0\u4eba\u5c45\u4f4f\u7684\u666e\u91cc\u6bd4\u6d1b\u592b\u3002\u4ed6\u5728\u90a3\u91cc\u8fc7\u51ac\uff0c\u7b2c\u4e8c\u5e74\u6625\u5929\u4e58\u76ae\u5212\u8247\u56de\u5bb6\u3002\u6765\u81ea\u5317\u90e8\u5723\u52b3\u4f26\u65af\u5c9b\u7684\u5c24\u666e\u4f0a\u514b\u4eba\u4e5f\u6709\u7c7b\u4f3c\u7684\u6545\u4e8b\uff0c\u4ed6\u4eec\u53d1\u73b0\u81ea\u5df1\u5728\u4e00\u4e2a\u964c\u751f\u7684\u5c9b\u5c7f\u4e0a\uff0c\u7b49\u5f85\u7740\u5728\u6d77\u51b0\u4e0a\u6b65\u884c\u56de\u5bb6\u7684\u673a\u4f1a\u3002\u683c\u91cc\u82ac\u8ba4\u4e3a\uff0c\u7c7b\u4f3c\u7684\u4e8b\u60c5\u53ef\u80fd\u5df2\u7ecf\u964d\u4e34\u5230\u4e86\u6316\u8fd9\u5ea7\u623f\u5b50\u7684\u4eba\u8eab\u4e0a\uff0c\u4ed6\u4eec\u5728\u7b49\u5f85\u79bb\u5f00\u7684\u673a\u4f1a\u65f6\u8eb2\u5728\u4e86\u8fd9\u91cc\u3002\u4e5f\u8bb8\u4ed6\u4eec\u6210\u529f\u4e86\uff0c\u4ed6\u7a0d\u540e\u4f1a\u544a\u8bc9\u6211\u7684\u3002\u6216\u8bb8\u4ed6\u4eec\u6ca1\u6709\uff1a\u201c\u4e00\u53ea\u5317\u6781\u718a\u53ef\u80fd\u4f1a\u5403\u5230\u5b83\u4eec\u3002\u201d\n\u5728\u5317\u7f8e\uff0c\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8352\u91ce\u662f\u4e00\u4e2a\u51e0\u4e4e\u6ca1\u6709\u4eba\u6d89\u8db3\u7684\u5730\u65b9\uff1b\u7f8e\u56fd\u5728\u6cd5\u5f8b\u4e0a\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u5bf9\u6700\u8fd1\u6b96\u6c11\u5386\u53f2\u7684\u4e00\u79cd\u6784\u5efa\u3002\u5728\u6b27\u6d32\u5165\u4fb5\u4e4b\u524d\uff0c\u571f\u8457\u4eba\u6c11\u5c45\u4f4f\u3001\u72e9\u730e\u548c\u7ba1\u7406\u7740\u6b27\u6d32\u5927\u9646\u7684\u5927\u90e8\u5206\u8352\u5730\u3002\u5723\u9a6c\u4fee\u7fa4\u5c9b\u4e8e1970\u5e74\u88ab\u6307\u5b9a\u4e3a\u6b63\u5f0f\u8352\u91ce\uff0c\u5e76\u4e8e1980\u5e74\u4f5c\u4e3a\u963f\u62c9\u65af\u52a0\u6d77\u6d0b\u56fd\u5bb6\u91ce\u751f\u52a8\u7269\u4fdd\u62a4\u533a\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u5c06\u4e3a\u5b83\u4eec\u63d0\u4f9b\u5f88\u591a\u4e1c\u897f\uff1a\u76db\u4ea7\u9c7c\u7c7b\u7684\u6de1\u6c34\u6e56\uff0c\u8bb8\u591a\u4e0e\u5927\u9646\u517b\u6b96\u7684\u690d\u7269\u76f8\u540c\u7684\u690d\u7269\uff0c\u5145\u8db3\u7684\u6d77\u9e1f\u548c\u6d77\u6d0b\u54fa\u4e73\u52a8\u7269\u53ef\u4f9b\u72e9\u730e\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5723\u9a6c\u4fee\u662f\u5982\u6b64\u9065\u8fdc\uff0c\u8fd9\u5ea7\u5b64\u96f6\u96f6\u7684\u77ff\u5751\u8868\u660e\uff0c\u5373\u4f7f\u662f\u963f\u62c9\u65af\u52a0\u7684\u822a\u6d77\u4e13\u5bb6\u571f\u8457\u4eba\u6c11\uff0c\u4e5f\u53ef\u80fd\u4ece\u6765\u90fd\u4e0d\u662f\u8fd9\u91cc\u7684\u5076\u7136\u8bbf\u5ba2\u3002\u5176\u4ed6\u7d27\u968f\u5176\u540e\u7684\u4eba\u662f\u5728\u91cd\u8981\u57fa\u7840\u8bbe\u65bd\u6216\u673a\u6784\u7684\u5e2e\u52a9\u4e0b\u62b5\u8fbe\u7684\u3002\u6ca1\u6709\u4e00\u4e2a\u4eba\u5446\u4e86\u5f88\u957f\u65f6\u95f4\u3002\n\u6211\u4e58\u5750\u4e00\u8258\u540d\u4e3aTi\u011dLax\u0302[tekh-lah]\u7684\u8239\u6765\u5230\u8fd9\u4e9b\u5c9b\u5c7f\uff0c\u4e0e\u79d1\u5b66\u5bb6\u4eec\u4e00\u8d77\u7814\u7a76\u5728\u7fa4\u5c9b\u60ac\u5d16\u4e0a\u7b51\u5de2\u7684\u6d77\u9e1f\u3002\u4f46\u6211\u4e5f\u60f3\u770b\u770b\u8eab\u5904\u4e00\u4e2a\u5982\u6b64\u5f7b\u5e95\u62d2\u7edd\u4eba\u7c7b\u5b58\u5728\u7684\u5730\u65b9\u662f\u4ec0\u4e48\u611f\u89c9\u3002\n\u5728\u8fd9\u4e00\u5929\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u63a2\u9669\u7684\u6700\u540e\u4e00\u5929\uff0c\u5f53\u79d1\u5b66\u5bb6\u4eec\u4e89\u5148\u6050\u540e\u5730\u6536\u96c6\u6570\u636e\uff0c\u5e76\u5728\u5c9b\u7684\u53e6\u4e00\u8fb9\u624e\u8425\u65f6\uff0c\u5751\u623f\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6bd4\u5927\u591a\u6570\u4eba\u66f4\u597d\u7684\u53cd\u6620\u3002\u6211\u628a\u81ea\u5df1\u653e\u5230\u6d3c\u5730\u91cc\uff0c\u626b\u89c6\u7740\u5927\u6d77\uff0c\u5728\u8fd9\u4e2a\u5f02\u5e38\u6674\u6717\u7684\u65e5\u5b50\u91cc\uff0c\u4e00\u6761\u6761\u9633\u5149\u5728\u82d4\u539f\u4e0a\u95ea\u70c1\u3002\u6211\u60f3\u8c61\u7740\u5b88\u5019\u7740\u51ac\u5929\u7684\u6d77\u51b0\uff0c\u7b49\u5f85\u7740\u5b83\u7684\u5230\u6765\u3002\u6211\u60f3\u8c61\u7740\u89c2\u5bdf\u5317\u6781\u718a\uff0c\u5e0c\u671b\u5b83\u4eec\u4e0d\u4f1a\u3002\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u77e5\u9053\uff0c\u5728\u6211\u767b\u4e0aTi\u011dLax\u0302\u4e4b\u524d\uff0c\u4e00\u4f4d\u9000\u4f11\u7684\u907f\u96be\u6240\u751f\u7269\u5b66\u5bb6\u66fe\u5bf9\u6211\u8bf4\u8fc7\u3002\u201c\u6211\u4f1a\u628a\u6211\u7684\u773c\u775b\u7741\u5f00\u3002\u5982\u679c\u4f60\u770b\u5230\u5916\u9762\u6709\u4ec0\u4e48\u53c8\u5927\u53c8\u767d\u7684\u4e1c\u897f\uff0c\u518d\u770b\u4e00\u773c\u3002\u201c\n\u8fd9\u4e9b\u5c9b\u5c7f\u66fe\u7ecf\u662f\u5c71\u8109\uff0c\u662f\u8fde\u63a5\u5317\u7f8e\u548c\u4e9a\u6d32\u7684\u8d1d\u6797\u8d3e\u6b21\u5927\u9646\u4e0a\u7684\u822a\u70b9\u3002\u7136\u540e\u6d77\u6d0b\u541e\u6ca1\u4e86\u5c71\u5cf0\u5468\u56f4\u7684\u9646\u5730\uff0c\u628a\u5b83\u4eec\u85cf\u5728\u539a\u539a\u7684\u590f\u5b63\u96fe\u4e2d\uff0c\u4f7f\u5b83\u4eec\u53d8\u5f97\u5b64\u72ec\u3002\u7531\u4e8e\u6ca1\u6709\u4eba\u5c45\u4f4f\u8db3\u591f\u957f\u7684\u65f6\u95f4\u6765\u4fdd\u5b58\u4ed6\u4eec\u7684\u5386\u53f2\uff0c\u4ed6\u4eec\u6210\u4e86\u90a3\u79cd\u53ef\u4ee5\u5e38\u5e74\u201c\u53d1\u73b0\u201d\u7684\u5730\u65b9\u3002\u4fc4\u7f57\u65af\u6d77\u519b\u4e2d\u5c09\u4f0a\u4e07\u00b7\u8f9b\u5fb7(Ivan Synd)\u5bf9\u5751\u623f\u4e00\u65e0\u6240\u77e5\uff0c\u4ed6\u8ba4\u4e3a\u81ea\u5df1\u662f1766\u5e74\u7b2c\u4e00\u4e2a\u53d1\u73b0\u6700\u5927\u5c9b\u5c7f\u7684\u4eba\u3002\u4ed6\u4ee5\u57fa\u7763\u6559\u4f7f\u5f92\u9a6c\u592a\u7684\u540d\u5b57\u7ed9\u5b83\u547d\u540d\u3002\u8a79\u59c6\u65af\u00b7\u5e93\u514b\u8239\u957f\u8ba4\u4e3a\u4ed6\u57281778\u5e74\u53d1\u73b0\u4e86\u5b83\uff0c\u5e76\u5c06\u5176\u547d\u540d\u4e3a\u6208\u5c14\u3002\u540e\u6765\u6765\u5230\u8fd9\u4e2a\u7fa4\u5c9b\u7684\u6355\u9cb8\u8005\u7b80\u5355\u5730\u79f0\u5b83\u4e3a\u201c\u718a\u5c9b\u201d\u3002\n\u5927\u7ea6\u57281809-1810\u5e74\u51ac\u5929\uff0c\u4e00\u961f\u4fc4\u56fd\u4eba\u548cUnangan\u4eba\u5728\u8fd9\u91cc\u624e\u8425\uff0c\u730e\u53d6\u718a\u7684\u76ae\u6bdb\u3002\u6839\u636e\u4f60\u54a8\u8be2\u7684\u6765\u6e90\uff0c\u8bb8\u591a\u4fc4\u7f57\u65af\u4eba\u6b7b\u4e8e\u574f\u8840\u75c5\uff0c\u800cUnangan\u4eba\u5e78\u5b58\u4e0b\u6765\uff0c\u6216\u8005\u5f53\u4ed6\u4eec\u4f9d\u8d56\u7684\u6d77\u6d0b\u54fa\u4e73\u52a8\u7269\u8d85\u51fa\u4e86\u4ed6\u4eec\u7684\u72e9\u730e\u8303\u56f4\uff0c\u6216\u8005\u6240\u6709\u4eba\u90fd\u53d7\u5230\u5317\u6781\u718a\u7684\u6298\u78e8\u800c\u4e0d\u5f97\u4e0d\u79bb\u5f00\u65f6\uff0c\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u6216\u5927\u90e8\u5206\u4eba\u6b7b\u4ea1\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u535a\u7269\u5b66\u5bb6\u4ea8\u5229\u00b7\u57c3\u5229\u5965\u7279(Henry Elliott)\u57281874\u5e74\u53c2\u89c2\u8fd9\u4e9b\u5c9b\u5c7f\u65f6\uff0c\u4ed6\u53d1\u73b0\u90a3\u91cc\u6324\u6ee1\u4e86\u68d5\u718a\u3002\u201c\u5224\u65ad\u4e00\u4e0b\u6211\u4eec\u5bf9\u53d1\u73b0\u6210\u767e\u4e0a\u5343\u53ea\u5927\u578b\u5317\u6781\u718a\u7684\u60ca\u8bb6\u5427\u2026\u3002\u61d2\u6d0b\u6d0b\u5730\u7761\u5728\u8349\u7a9d\u91cc\uff0c\u6216\u6316\u8349\u6216\u5176\u4ed6\u6839\uff0c\u50cf\u732a\u4e00\u6837\u5403\u4e1c\u897f\uff0c\u201c\u57c3\u5229\u5965\u7279\u5199\u9053\uff0c\u5c3d\u7ba1\u4ed6\u4f3c\u4e4e\u53d1\u73b0\u5b83\u4eec\u4e0e\u5176\u8bf4\u662f\u53ef\u6015\uff0c\u4e0d\u5982\u8bf4\u662f\u6709\u8da3\u548c\u7f8e\u5473\u3002\u5728\u4ed6\u7684\u961f\u4f0d\u6740\u4e86\u4e00\u4e9b\u4eba\u4e4b\u540e\uff0c\u4ed6\u6ce8\u610f\u5230\u725b\u6392\u201c\u8d28\u91cf\u5f88\u597d\u201d\u3002\n\u5373\u4f7f\u5728\u718a\u6d88\u5931\u4e4b\u540e\uff0c\u8fd9\u4e2a\u7fa4\u5c9b\u5bf9\u4eba\u4eec\u6765\u8bf4\u4ecd\u7136\u662f\u4e00\u4e2a\u8270\u96be\u7684\u5730\u65b9\u3002\u96fe\u662f\u65e0\u5c3d\u7684\uff1b\u5929\u6c14\u662f\u5973\u5996\u7684\uff1b\u4e0e\u4e16\u9694\u7edd\u7684\u662f\u6781\u7aef\u7684\u30021916\u5e74\uff0c\u5317\u6781\u52a8\u529b\u7eb5\u5e06\u8239\u201c\u5927\u718a\u53f7\u201d\u4e0e\u8584\u96fe\u76f8\u649e\uff0c\u5728\u9876\u5cf0\u6c89\u6ca1\u3002\u8239\u5458\u4eec\u7528\u6355\u9cb8\u8239\u5c06\u5927\u7ea620\u5428\u8865\u7ed9\u8fd0\u5230\u5723\u9a6c\u4fee\uff0c\u4ee5\u4fbf\u642d\u8d77\u8425\u5730\u7b49\u5f85\u6551\u63f4\u3002\u4e00\u4e2a\u53ebN.H.Bokum\u7684\u4eba\u8bbe\u6cd5\u7528\u96f6\u788e\u7684\u4e1c\u897f\u5efa\u9020\u4e86\u4e00\u79cd\u53d1\u5c04\u5668\uff0c\u4ed6\u6bcf\u665a\u90fd\u4f1a\u722c\u5230\u60ac\u5d16\u9876\u4e0a\u53d1\u51faSOS\u547c\u53eb\u3002\u4f46\u5728\u5f97\u51fa\u6f6e\u6e7f\u7684\u7a7a\u6c14\u5e72\u6270\u4e86\u5b83\u7684\u8fd0\u884c\u7684\u7ed3\u8bba\u540e\uff0c\u4ed6\u653e\u5f03\u4e86\u3002\u51e0\u4e2a\u661f\u671f\u8fc7\u53bb\u4e86\uff0c\u7537\u4eba\u4eec\u8d8a\u6765\u8d8a\u7126\u8e81\u4e0d\u5b89\uff0c\u5f53\u53a8\u5e08\u8bd5\u56fe\u5b9a\u91cf\u914d\u7ed9\u706b\u817f\u65f6\uff0c\u7537\u4eba\u4eec\u6325\u821e\u7740\u5200\u5b50\u5728\u706b\u817f\u4e0a\u6325\u821e\u7740\u5200\u5b50\u3002\u5982\u679c\u5b83\u4eec\u572818\u5929\u540e\u6ca1\u6709\u83b7\u6551\uff0c\u5927\u718a\u7684\u4e3b\u4eba\u7ea6\u7ff0\u00b7\u535a\u767b\u540e\u6765\u8bf4\uff0c\u8fd9\u79cd\u7edd\u671b\u5c06\u662f\u201c\u51ac\u5929\u5e26\u6765\u7684\u7b2c\u4e00\u6b21\u4f53\u9a8c\u201d\u3002\n\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u671f\u95f4\u9a7b\u624e\u5728\u5723\u9a6c\u4fee\u7684\u7f8e\u56fd\u519b\u4eba\u83b7\u5f97\u4e86\u5bf9\u8be5\u5c9b\u51ac\u5b63\u6781\u7aef\u6c14\u5019\u7684\u66f4\u5168\u9762\u7684\u91c7\u6837\u30021943\u5e74\uff0c\u7f8e\u56fd\u6d77\u5cb8\u8b66\u536b\u961f\u5728\u8be5\u5c9b\u897f\u5357\u6d77\u5cb8\u5efa\u7acb\u4e86\u4e00\u4e2a\u8fdc\u7a0b\u5bfc\u822a(Loran)\u7ad9\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u7f51\u7edc\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u7f51\u7edc\u501f\u52a9\u5b9a\u671f\u7684\u65e0\u7ebf\u7535\u6ce2\u8109\u51b2\u5e2e\u52a9\u6218\u6597\u673a\u548c\u519b\u8230\u5728\u592a\u5e73\u6d0b\u4e0a\u5b9a\u5411\u3002\u7f57\u5170\u7ad9\u7684\u79ef\u96ea\u6df1\u8fbe8\u7c73\u5de6\u53f3\uff0c\u201c\u98ce\u901f\u66b4\u96ea\u201d\u5e73\u5747\u6301\u7eed10\u5929\u3002\u6d77\u51b0\u4e00\u5e74\u4e2d\u6709\u5927\u7ea6\u4e03\u4e2a\u6708\u5305\u56f4\u7740\u8be5\u5c9b\u3002\u5f53\u4e00\u67b6\u98de\u673a\u5728\u4e00\u5e74\u4e2d\u6700\u51b7\u7684\u65f6\u5019\u628a\u90ae\u4ef6\u6295\u5230\u51e0\u516c\u91cc\u5916\u65f6\uff0c\u8fd9\u4e9b\u4eba\u4e0d\u5f97\u4e0d\u7ec4\u6210\u4e09\u4e2a\u673a\u7ec4\u4eba\u5458\uff0c\u8f6e\u6d41\u8f6e\u6d41\u53d6\u56de\u90ae\u4ef6\uff0c\u4e00\u8fb9\u8d70\u4e00\u8fb9\u62d6\u7740\u4e00\u8f86\u8f7d\u6709\u751f\u5b58\u7269\u8d44\u7684\u96ea\u6a47\u3002\n\u5176\u4ed6\u5b63\u8282\u4e5f\u597d\u4e0d\u5230\u54ea\u91cc\u53bb\u3002\u6709\u4e00\u5929\uff0c\u5c3d\u7ba1\u6d77\u9762\u98ce\u5e73\u6d6a\u9759\uff0c\u4f46\u4e94\u540d\u519b\u4eba\u5728\u4e00\u6b21\u4e58\u8239\u4efb\u52a1\u4e2d\u5931\u8e2a\u3002\u5927\u591a\u6570\u65f6\u5019\uff0c\u5c9b\u4e0a\u72c2\u98ce\u66b4\u96e8\uff0c\u628a\u51bb\u571f\u5e26\u53d8\u6210\u4e86\u201c\u6ce5\u6cde\u7684\u6d77\u6d0b\u201d\u3002\u4ec5\u4e3a\u7a7a\u95f4\u7ad9\u7684\u594e\u585e\u59c6\u5c0f\u5c4b\u5960\u5b9a\u5730\u57fa\u5c31\u82b1\u4e86600\u591a\u888b\u6c34\u6ce5\u3002\n\u6d77\u5cb8\u8b66\u536b\u961f\u62c5\u5fc3\uff0c\u5982\u679c\u8fd9\u4e9b\u4eba\u88ab\u5207\u65ad\u518d\u8865\u7ed9\uff0c\u4ed6\u4eec\u5728\u8fd9\u79cd\u6761\u4ef6\u4e0b\u4f1a\u600e\u4e48\u6837\uff0c1944\u5e74\uff0c\u4ed6\u4eec\u628a\u4e00\u7fa429\u5934\u9a6f\u9e7f\u5f15\u5165\u5723\u9a6c\u4fee\u4f5c\u4e3a\u98df\u7269\u50a8\u5907\u3002\u4f46\u662f\u6218\u4e89\u7ed3\u675f\u4e86\uff0c\u58eb\u5175\u4eec\u79bb\u5f00\u4e86\u3002\u6ca1\u6709\u6355\u98df\u8005\u7684\u9a6f\u9e7f\u6570\u91cf\u5448\u7206\u70b8\u5f0f\u589e\u957f\u3002\u52301963\u5e74\uff0c\u67096000\u4e2a\u3002\u5230\u4e861964\u5e74\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4eba\u90fd\u6d88\u5931\u4e86\u3002\n\u5982\u4eca\uff0c\u7f57\u5170\u7a7a\u95f4\u7ad9\u53ea\u4e0d\u8fc7\u662f\u4e00\u6839\u9ad8\u8038\u7684\u6746\u5b50\uff0c\u7531\u91d1\u5c5e\u7f06\u7d22\u951a\u5b9a\u5728\u6d77\u6ee9\u4e0a\u65b9\u7684\u60ac\u5d16\u4e0a\uff0c\u5468\u56f4\u73af\u7ed5\u7740\u4e00\u5927\u5806\u788e\u7247\u3002\n\u5728\u6211\u4eec\u4e3a\u671f\u4e00\u5468\u7684\u63a2\u9669\u7684\u7b2c\u4e94\u5929\uff0c\u6211\u4eec\u4e2d\u7684\u51e0\u4e2a\u4eba\u6cbf\u7740\u4e00\u6761\u8001\u8def\u7684\u4e0b\u5782\u9057\u8ff9\u6b65\u884c\u5230\u4e86\u73b0\u573a\u3002\u5728\u4ecd\u7136\u5c79\u7acb\u7684\u67f1\u5b50\u9644\u8fd1\uff0c\u7b2c\u4e8c\u4e2a\u5012\u4e0b\u4e86\uff0c\u7b2c\u4e09\u4e2a\u5012\u4e0b\u4e86\uff0c\u7b2c\u56db\u4e2a\u5012\u4e0b\u4e86\u3002\u6211\u53d1\u73b0\u594e\u585e\u59c6\u5c0f\u5c4b\u5730\u57fa\u7684\u65b9\u5f62\u6df7\u51dd\u571f\u67f1\u5b50\u3002\u4e00\u4e2a\u5395\u6240\u5b64\u96f6\u96f6\u5730\u8eba\u5728\u9633\u53f0\u4e0a\uff0c\u9a6c\u6876\u671d\u5411\u5185\u9646\u3002\u6211\u5728\u4e00\u4f4d\u540d\u53eb\u4e9a\u4f26\u00b7\u57fa\u7763\u7684\u751f\u7269\u9274\u5b9a\u5b66\u5bb6\u65c1\u8fb9\u505c\u4e86\u4e0b\u6765\uff0c\u4ed6\u6b63\u5728\u62cd\u6444\u4e00\u5806\u9508\u8ff9\u6591\u6591\u7684\u6876\u7684\u7167\u7247\uff0c\u8fd9\u4e9b\u6876\u53d1\u51fa\u5c16\u53eb\u58f0\uff0c\u6563\u53d1\u7740\u67f4\u6cb9\u7684\u6c14\u5473\u3002\u201c\u6211\u4eec\u5f88\u64c5\u957f\u5236\u9020\u5947\u5999\u7684\u4e1c\u897f\uff0c\u201d\u8fc7\u4e86\u4e00\u4f1a\u513f\u4ed6\u8bf4\u3002\u201c\u6211\u4eec\u5728\u62c6\u6bc1\u548c\u6e05\u7406\u5b83\u4eec\u65b9\u9762\u505a\u5f97\u5f88\u7cdf\u7cd5\u3002\u201d\n\u7136\u800c\uff0c\u51bb\u571f\u5e26\u4f3c\u4e4e\u6b63\u5728\u6162\u6162\u5730\u6536\u56de\u5927\u90e8\u5206\u7684\u571f\u5730\u3002\u9644\u5b50\u548c\u77ee\u67f3\u5728\u8def\u4e0a\u53d8\u5f97\u6d53\u5bc6\u800c\u677e\u8f6f\u3002\u82d4\u85d3\u548c\u5730\u8863\u7684\u624b\u6307\u538b\u5728\u7834\u788e\u7684\u91d1\u5c5e\u548c\u952f\u9f7f\u72b6\u7684\u80f6\u5408\u677f\u4e0a\uff0c\u628a\u5b83\u4eec\u62c9\u4e0b\u6765\u3002\n\u5728\u5176\u4ed6\u77ed\u6682\u5360\u9886\u7684\u5730\u65b9\uff0c\u60c5\u51b5\u4e5f\u662f\u5982\u6b64\u3002\u5730\u7403\u541e\u566c\u4e86\u5b63\u8282\u6027\u6355\u72d0\u8005\u53ef\u80fd\u5728\u5927\u8427\u6761\u4e4b\u524d\u5efa\u9020\u7684\u5012\u584c\u5c0f\u5c4b\u7684\u6a2a\u6881\u3002\u6d77\u6c34\u51b2\u8d70\u4e8620\u4e16\u7eaa50\u5e74\u4ee3\u6765\u8bbf\u7684\u79d1\u5b66\u5bb6\u5728\u6d77\u6ee9\u9644\u8fd1\u5efa\u9020\u7684\u4e00\u5ea7\u5c0f\u5c4b\u3002\u5f53\u6d77\u5cb8\u8b66\u536b\u961f\u57281916\u5e74\u8425\u6551\u5927\u718a\u53f7\u8239\u5458\u65f6\uff0c\u4ed6\u4eec\u7559\u4e0b\u4e86\u4e00\u5207\u3002\u8003\u53e4\u5b66\u5bb6\u683c\u91cc\u82ac\u57282018\u5e74\u53c2\u89c2\u8425\u5730\u73b0\u573a\u65f6\uff0c\u51e0\u4e4e\u6ca1\u6709\u53d1\u73b0\u7164\u70ad\uff0c\u53ea\u662f\u53d1\u73b0\u4e86\u96f6\u661f\u7684\u7164\u70ad\u3002\u6e14\u6c11\u548c\u519b\u4eba\u53ef\u80fd\u62a2\u52ab\u4e86\u4e00\u4e9b\uff0c\u4f46\u90a3\u4e9b\u592a\u8fc7\u5783\u573e\u800c\u65e0\u6cd5\u6253\u635e\u7684\u4e1c\u897f-\u53ef\u80fd\u662f\u7559\u58f0\u673a\u3001\u76f8\u673a\u3001\u9999\u69df-\u4f3c\u4e4e\u5df2\u7ecf\u88ab\u51b2\u8d70\u6216\u6e38\u5230\u4e86\u571f\u58e4\u4e2d\u3002\u6700\u540e\u4e00\u53ea\u6389\u961f\u7684\u9a6f\u9e7f\u662f\u4e00\u53ea\u5b64\u72ec\u7684\u8ddb\u884c\u7684\u96cc\u6027\u9a6f\u9e7f\uff0c\u572820\u4e16\u7eaa80\u5e74\u4ee3\u6d88\u5931\u4e86\u3002\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u91cc\uff0c\u9a6f\u9e7f\u7684\u5934\u9aa8\u4f7f\u8fd9\u4e2a\u5c9b\u76d0\u78b1\u5316\u3002\u73b0\u5728\uff0c\u5927\u591a\u6570\u4eba\u90fd\u8d70\u4e86\u3002\u6211\u770b\u5230\u7684\u4e3a\u6570\u4e0d\u591a\u7684\u51e0\u53ea\u88ab\u57cb\u5728\u9e7f\u89d2\u5c16\uff0c\u5c31\u50cf\u6df9\u6ca1\u5728\u4e0a\u5347\u7684\u7eff\u6c34\u4e2d\u4e00\u6837\u3002\n\u8fd9\u91cc\u7684\u751f\u547d\u91cd\u751f\uff0c\u91cd\u751f\uff0c\u9057\u5fd8\u3002\u4e0d\u662f\u65e0\u654c\u7684\u575a\u97e7\uff0c\u4f46\u575a\u5b9a\u800c\u575a\u5b9a\u3002\u5728\u970d\u5c14\u5c9b\u4e0a\uff0c\u6211\u770b\u5230\u4e00\u53ea\u9e23\u9e1f\u5728\u4e00\u5806\u53e4\u8001\u7684\u7535\u6c60\u91cc\u7b51\u5de2\u3002\u7ea2\u72d0\u5728\u7a7f\u8d8a\u6d77\u51b0\u540e\u53d6\u4ee3\u4e86\u5927\u90e8\u5206\u5723\u9a6c\u4fee\u539f\u751f\u7684\u5317\u6781\u72d0\u72f8\uff0c\u5728\u7f57\u5170\u5efa\u7b51\u5de5\u5730\u548c\u51e0\u5757\u6b8b\u9ab8\u4e0b\u6316\u6398\u4e86\u6d1e\u7a74\u3002\u7530\u9f20\u5531\u554a\u5531\u554a\u3002\n\u7b2c\u4e8c\u5929\u6e05\u6668\uff0c\u8fdc\u5904\u68ee\u6797\u4e2d\u71c3\u70e7\u7684\u91ce\u706b\u5439\u8d77\u7684\u70df\u96fe\u7b3c\u7f69\u7740\u660f\u6697\u7684\u706f\u5149\u548c\u4e4c\u4e91\u67d3\u6210\u7684\u6df1\u8910\u8272\u3002\u5f53\u6211\u8d70\u8fc7\u5723\u9a6c\u4fee\u5e73\u5766\u7684\u5357\u53f6\u65f6\uff0c\u6211\u53d1\u73b0\u4e86\u4e00\u4e2a\u5927\u800c\u767d\u7684\u4e1c\u897f\uff0c\u50f5\u4f4f\u4e86\uff0c\u772f\u7740\u773c\u775b\u3002\u767d\u8272\u5f00\u59cb\u79fb\u52a8\u3002\u53bb\u51b2\u523a\uff0c\u771f\u7684\u3002\u4e0d\u662f\u50cf\u8fd9\u4f4d\u9000\u4f11\u751f\u7269\u5b66\u5bb6\u6697\u793a\u7684\u90a3\u6837\u662f\u4e00\u53ea\u718a\uff0c\u800c\u662f\u4e24\u53ea\u6b65\u884c\u7684\u5929\u9e45\u3002\u4e09\u53ea\u5c0f\u5929\u9e45\u7d27\u968f\u5176\u540e\u3002\u5f53\u4ed6\u4eec\u8f6c\u5411\u6211\u65f6\uff0c\u6211\u53d1\u73b0\u4e00\u53ea\u6a59\u8272\u7684\u6d77\u8c5a\u5728\u4ed6\u4eec\u8eab\u540e\u7684\u8349\u5730\u4e0a\u95ea\u8fc7\uff1a\u4e00\u53ea\u7ea2\u8272\u7684\u72d0\u72f8\u3002\n\u5c0f\u5929\u9e45\u4f3c\u4e4e\u4e0d\u77e5\u9053\u4ed6\u4eec\u7684\u8ffd\u9010\u8005\uff0c\u4f46\u4ed6\u4eec\u7684\u8ffd\u8d76\u8005\u77e5\u9053\u6211\u3002\u5b83\u4ece\u8ffd\u9010\u4e2d\u8f6c\u5411\u51e0\u7c73\u5916\u7684\u5730\u65b9--\u51cc\u4e71\u4e0d\u582a\uff0c\u91d1\u8272\u7684\u773c\u775b\uff0c\u5c31\u50cf\u60ac\u5d16\u4e0a\u7684\u5730\u8863\u4e00\u6837\u6591\u9a73\u3002\u5b83\u843d\u5230\u4e00\u8fb9\uff0c\u5728\u5ca9\u77f3\u4e0a\u5962\u534e\u5730\u6469\u64e6\u4e86\u51e0\u5206\u949f\uff0c\u7136\u540e\u4ee5\u4e00\u79cd\u7740\u8ff7\u7684\u4e4b\u5b57\u5f62\u8df3\u8dc3\u800c\u53bb\uff0c\u8ba9\u6211\u54af\u54af\u5730\u7b11\u4e86\u8d77\u6765\u3002\u5b83\u8d70\u4e86\u4e4b\u540e\uff0c\u6211\u8dea\u4e0b\u6765\u95fb\u77f3\u5934\u7684\u5473\u9053\u3002\u95fb\u8d77\u6765\u50cf\u6ce5\u571f\u3002\u6211\u7528\u81ea\u5df1\u7684\u5934\u53d1\u6469\u64e6\u5b83\uff0c\u53ea\u662f\u4e3a\u4e86\u8bf4\u58f0\u201c\u563f\u201d\u3002\n\u5f53\u6211\u7ee7\u7eed\u4e0b\u53bb\u7684\u65f6\u5019\uff0c\u6211\u6ce8\u610f\u5230\u8fdc\u5904\u7684\u7269\u4f53\u5f80\u5f80\u770b\u8d77\u6765\u662f\u4e00\u56de\u4e8b\uff0c\u7136\u540e\u53c8\u5206\u89e3\u6210\u53e6\u4e00\u56de\u4e8b\u3002\u6f02\u6d41\u6728\u7684\u808b\u9aa8\u539f\u6765\u662f\u9cb8\u9c7c\u7684\u9aa8\u5934\u3002\u4e00\u5177\u8150\u70c2\u7684\u6d77\u8c61\u8eab\u4f53\u539f\u6765\u662f\u88ab\u6d77\u6d6a\u51fb\u6253\u7684\u6811\u6839\u7403\u3002\u6ca1\u6709\u6545\u4e8b\u7684\u4e0d\u592a\u53ef\u80fd\u7684\u6587\u7269-\u4e00\u67b6\u68af\u5b50\uff0c\u4e00\u4e2a\u91d1\u5c5e\u6d6e\u6865-\u5076\u5c14\u4f1a\u4ece\u5730\u9762\u4e0a\u51b2\u51fa\u6765\uff0c\u6211\u731c\u662f\u88ab\u66b4\u98ce\u96e8\u6c89\u79ef\u5230\u5185\u9646\u5f88\u8fdc\u7684\u5730\u65b9\u3002\u5f53\u6211\u95ed\u4e0a\u773c\u775b\u7684\u65f6\u5019\uff0c\u6211\u6709\u4e00\u79cd\u6a21\u7cca\u7684\u611f\u89c9\uff0c\u5c31\u50cf\u6d77\u6d6a\u4ece\u6211\u7684\u8eab\u4f53\u91cc\u6eda\u6eda\u800c\u8fc7\u3002\u201c\u7801\u5934\u5ca9\u77f3\u201d\uff0c\u7a0d\u540e\u6709\u4eba\u4f1a\u8fd9\u6837\u79f0\u547c\u5b83\uff1a\u5f53\u4f60\u5728\u8239\u4e0a\u5446\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u5927\u6d77\u5e26\u4e0a\u4e86\u4f60\u7684\u9646\u5730\uff0c\u9646\u5730\u5448\u73b0\u51fa\u4f60\u811a\u4e0b\u6c34\u7684\u5e7d\u7075\u8fd0\u52a8\u7684\u611f\u89c9\u3002\n\u6211\u7a81\u7136\u60f3\u5230\uff0c\u8981\u771f\u6b63\u5230\u8fbe\u5723\u9a6c\u592a\u798f\u97f3\uff0c\u4f60\u5fc5\u987b\u8ff7\u5931\u8db3\u591f\u7684\u65b9\u5411\uff0c\u624d\u80fd\u611f\u89c9\u5230\u4e24\u8005\u4e4b\u95f4\u7684\u754c\u9650\u3002\u8ff7\u5931\u4e86\u65b9\u5411\uff0c\u6211\u53ef\u4ee5\u611f\u89c9\u5230\u98ce\u666f\u662f\u6d41\u52a8\u7684\uff0c\u5c31\u50cf\u6839\u7403\u548c\u9cb8\u9aa8\u4e00\u6837\u575a\u5b9a\u5730\u53d8\u5f62-\u67d0\u79cd\u4e1c\u897f\u4ece\u5c71\u5230\u5c9b\u91cd\u5851\u4e86\u81ea\u5df1\uff0c\u6563\u843d\u5e76\u541e\u566c\u4e86\u90a3\u4e9b\u8def\u8fc7\u7684\u4eba\u7559\u4e0b\u7684\u75d5\u8ff9\u3002\n\u6211\u8ba4\u4e3a\u8fd9\u5ea7\u5c9b\u7684\u8fb9\u7f18\u6b63\u5728\u88ab\u4fb5\u8680\u3002\u65e7\u7167\u7247\u4e2d\u7684\u4e00\u4e9b\u60ac\u5d16\u5df2\u7ecf\u8131\u843d\u6216\u5f2f\u66f2\u6210\u6d77\u5806\u3002\u6211\u770b\u7740\u5916\u9762\u6e05\u6f88\u7684\u6c34\u9762\u4e0a\u7684\u51e0\u7f15\u592a\u9633\uff0c\u6df1\u8910\u8272\u7684\u5149\u7ebf\u89e6\u5230\u4e86\u767d\u4ee4\u6cb3\u5730\u677f\u4e0a\u9ed1\u8272\u7684\u6d77\u85fb\u57ab\u5b50\u3002\u6574\u4e2a\u4e16\u754c\u88ab\u6df9\u6ca1\u6216\u7c89\u788e\u6210\u9e45\u5375\u77f3\u3001\u6c99\u5b50\u548c\u6de4\u6ce5\uff0c\u5c31\u5728\u90a3\u91cc\u3002\u628a\u9646\u5730\u5d29\u89e3\u6210\u6d77\u6d0b\uff0c\u628a\u5730\u7403\u91cd\u65b0\u5206\u914d\u6210\u4e0d\u53ef\u77e5\u7684\u672a\u6765\u3002\u4e00\u4e2a\u8bb0\u4f4f\u6211\u4eec\u6bcf\u4e2a\u4eba\u90fd\u662f\u5982\u6b64\u77ed\u6682\u7684\u597d\u5730\u65b9\u3002\u6211\u4eec\u4ece\u672a\u7ad9\u7a33\u811a\u8ddf\u3002\n\u5f53\u6211\u628a\u624b\u638c\u6309\u5230\u5751\u623f\u7684\u5730\u677f\u4e0a\u65f6\uff0c\u98ce\u628a\u51e0\u7f15\u5934\u53d1\u4ece\u6211\u7684\u5f15\u64ce\u76d6\u4e0a\u5439\u5230\u4e86\u6211\u7684\u773c\u775b\u91cc\u3002\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u5b83\u611f\u89c9\u8db3\u591f\u575a\u56fa\u3002\u51e0\u4e2a\u4e16\u7eaa\u540e\uff0c\u5b83\u4ecd\u7136\u6e05\u6670\u53ef\u89c1\uff0c\u8fd9\u8ba9\u6211\u653e\u5fc3--\u8fd9\u662f\u4e00\u4e2a\u62b5\u5fa1\u8fd9\u4e2a\u5730\u65b9\u62d6\u66f3\u6c34\u6d41\u7684\u5c0f\u951a\u3002\u4f46\u6700\u7ec8\uff0c\u6211\u611f\u5230\u5bd2\u51b7\uff0c\u722c\u4e86\u51fa\u6765\u3002\u6211\u9700\u8981\u56de\u5230\u6211\u7684\u8425\u5730\uff0c\u5728Ti\u011dLax\u0302\u505c\u6cca\u7684\u5730\u65b9\u9644\u8fd1\uff1b\u6211\u4eec\u5c06\u5728\u65e9\u4e0a\u8bbe\u5b9a\u822a\u7ebf\uff0c\u5411\u5357\u8d8a\u8fc7\u767d\u4ee4\u6cb3\uff0c\u524d\u5f80\u5176\u4ed6\u5c9b\u5c7f\u548c\u673a\u573a\u3002\u4f46\u9996\u5148\uff0c\u6211\u7684\u76ee\u6807\u662f\u5728\u9646\u8def\u4e0a\u770b\u5230\u51e0\u516c\u91cc\u5916\u7684\u4e00\u6761\u9ad8\u5927\u7684\u7070\u8272\u9cb8\u9c7c\u80cc\uff0c\u81ea\u4ece\u6211\u4eec\u5230\u8fbe\u540e\uff0c\u6211\u5c31\u4e00\u76f4\u5728\u8239\u4e0a\u6b23\u8d4f\u5b83\u3002\n\u4eca\u5929\u65e9\u4e0a\u5212\u8fc7\u5c71\u4e18\u7684\u9633\u5149\u5df2\u7ecf\u892a\u8272\u4e86\u3002\u4e00\u5929\u4e0b\u5348\uff0c\u5f53\u6211\u6f2b\u6b65\u5728\u7535\u7eff\u7684\u8349\u5730\u4e0a\uff0c\u7136\u540e\u624b\u62c9\u624b\u5730\u722c\u4e0a\u4e00\u6761\u9661\u5ced\u7684\u8ddd\u9aa8\u5e26\u65f6\uff0c\u96fe\u5c31\u964d\u4e86\u4e0b\u6765\u3002\u6211\u7f6e\u8eab\u4e8e\u865a\u65e0\u4e4b\u4e2d\u3002\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u8ba8\u8bba\u6211\u72ec\u81ea\u6f2b\u6e38\u65f6\uff0c\u5176\u4e2d\u4e00\u4f4d\u751f\u7269\u5b66\u5bb6\u544a\u8bc9\u6211\uff0c\u96fe\u5728\u6ca1\u6709\u5f81\u5146\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u903c\u8fd1\uff1b\u5f53\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u65f6\uff0c\u6211\u4f1a\u9700\u8981\u4e00\u53f0GPS\u6765\u5e2e\u52a9\u6211\u627e\u5230\u56de\u6765\u7684\u8def\u3002\u6211\u7684\u8f66\u51fa\u4e86\u6545\u969c\uff0c\u6240\u4ee5\u6211\u6478\u4e86\u6478\uff0c\u628a\u5c71\u810a\u7684\u9661\u5ced\u4e0b\u5782\u7559\u5728\u4e86\u6211\u7684\u5de6\u8fb9\uff0c\u5bf9\u6211\u4e0d\u8bb0\u5f97\u4ece\u4e0b\u9762\u770b\u5230\u7684\u5e73\u5766\u548c\u5c71\u5cf0\u611f\u5230\u60ca\u8bb6\u3002\u6211\u5f00\u59cb\u6000\u7591\u6211\u662f\u4e0d\u662f\u4e0d\u5c0f\u5fc3\u8d70\u4e0b\u4e86\u5c71\u810a\u7f13\u7f13\u503e\u659c\u7684\u540e\u4fa7\uff0c\u800c\u4e0d\u662f\u8d70\u5230\u4e86\u5c71\u9876\u3002\u96fe\u8d8a\u6765\u8d8a\u6d53\uff0c\u76f4\u5230\u6211\u53ea\u80fd\u770b\u5230\u524d\u9762\u4e00\u4e24\u7c73\u3002\u53c8\u53d8\u539a\u4e86\uff0c\u76f4\u5230\u6211\u4e5f\u6d88\u5931\u4e86--\u5c31\u50cf\u6211\u5728\u4e0b\u9762\u8349\u4e1b\u4e2d\u7559\u4e0b\u7684\u90a3\u6761\u9ed1\u6697\u7684\u5c0f\u8def\u5f88\u5feb\u5c31\u4f1a\u88ab\u5b8c\u5168\u62b9\u53bb\u4e00\u6837\u3002\n\u7136\u540e\uff0c\u7a81\u7136\uff0c\u96fe\u6563\u4e86\uff0c\u4e0b\u5c71\u7684\u8def\u53d8\u5f97\u6e05\u6670\u8d77\u6765\u3002\u6211\u677e\u4e86\u4e00\u53e3\u6c14\uff0c\u7ed5\u56de\u5c71\u4e18\uff0c\u5728\u6700\u540e\u4e00\u5ea7\u5c71\u9876\u4e0a\uff0c\u770b\u5230\u4e86\u4e0b\u9762\u5b81\u9759\u6d77\u6e7e\u91cc\u7684Ti\u011dLax\u0302\u3002\u5f53\u6211\u5411\u5929\u7a7a\u4e3e\u8d77\u6211\u7684\u624b\u65f6\uff0c\u8239\u5439\u54cd\u4e86\u5b83\u7684\u96fe\u53f7\uff0c\u884c\u4e86\u4e00\u4e2a\u957f\u957f\u7684\u656c\u793c\u3002\n\u5f15\u7528\u672c\u6587\uff1a\u838e\u62c9\u00b7\u5409\u5c14\u66fc\u00b7\u7eb3\u6492\u5c3c\u5c14\u00b7\u6000\u5c14\u5fb7(Sarah Gilman Nathaniel Wilder)\u201c\u4eba\u7c7b\u65e0\u6cd5\u5f81\u670d\u7684\u5c9b\u5c7f\u201d(Hakai Magazine)\uff0c2020\u5e7410\u67086\u65e5\uff0c\u8bbf\u95ee\uff0c2020\u5e7410\u67088\u65e5\uff0chttps://www.hakaimagazine.com/features/the-island-humans-cant-conquer/.", "note_en": "This article is also available in audio format. Listen now,  , or subscribe to \u201cHakai Magazine Audio Edition\u201d through your favorite podcast app.\n  St. Matthew Island is said to be the most remote place in Alaska. Marooned in the Bering Sea halfway to Siberia, it is well over 300 kilometers and a 24-hour ship ride from the nearest human settlements. It looks fittingly forbidding, the way it emerges from its drape of fog like the dark spread of a wing. Curved, treeless mountains crowd its sliver of land, plunging in sudden cliffs where they meet the surf. To St. Matthew\u2019s north lies the smaller, more precipitous island of Hall. A castle of stone called Pinnacle stands guard off St. Matthew\u2019s southern flank. To set foot on this scatter of land surrounded by endless ocean is to feel yourself swallowed by the nowhere at the center of a drowned compass rose.\n My head swims a little as I peer into a shallow pit on St. Matthew\u2019s northwestern tip. It\u2019s late July in 2019, and the air buzzes with the chitters of the island\u2019s endemic singing voles. Wildflowers and cotton grass constellate the tundra that has grown over the depression at my feet, but around 400 years ago, it was a house, dug partway into the earth to keep out the elements. It\u2019s the oldest human sign on the island, the only prehistoric house ever found here. A lichen-crusted whale jawbone points downhill toward the sea, the rose\u2019s due-north needle.\n Compared with more sheltered bays and beaches on the island\u2019s eastern side, it would have been a relatively harsh place to settle. Storms regularly slam this coast with the full force of the open ocean. As many as 300 polar bears used to summer here, before Russians and Americans hunted them out in the late 1800s. Evidence suggests that the pit house\u2019s occupants likely didn\u2019t use it for more than a season, according to Dennis Griffin, an archaeologist who\u2019s worked on the archipelago since 2002. Excavations of the site have turned up enough to suggest that people of the Thule culture\u2014precursors to the Inuit and Yup\u2019ik who now inhabit Alaska\u2019s northwestern coasts\u2014built it. But Griffin has found no sign of a hearth, and only a thin layer of artifacts.\n  The Unangan, or Aleut, people from the Aleutian and Pribilof Islands to the south tell a story of the son of a chief who discovered the then uninhabited Pribilofs after he was blown off course. He overwintered there, and then returned home by kayak the following spring. The Yup\u2019ik from St. Lawrence Island to the north have a similar story, about hunters who found themselves on a strange island, where they waited for the opportunity to walk home over the sea ice. Griffin believes something similar may have befallen the people who dug this house, and they sheltered here while waiting for their chance to leave. Maybe they made it, he will tell me later. Or maybe they didn\u2019t: \u201cA polar bear could have gotten them.\u201d\n In North America, many people think of wilderness as a place mostly untouched by humans; the United States defines it this way in law. This idea is a construct of the recent colonial past. Before European invasion, Indigenous peoples lived in, hunted in, and managed most of the continent\u2019s wild lands. St. Matthew\u2019s archipelago, designated as official wilderness in 1970, and as part of the Alaska Maritime National Wildlife Refuge in 1980, would have had much to offer them, too: freshwater lakes teeming with fish, many of the same plants that mainland cultures ate, ample seabirds and marine mammals to hunt. And yet, because St. Matthew is so far-flung, the solitary pit house suggests that even Alaska\u2019s expert seafaring Indigenous peoples may never have been more than accidental visitors here. Others who\u2019ve followed have arrived with the help of significant infrastructure or institutions. None remained long.\n  I came to these islands aboard a ship called the  Ti\u011dlax\u0302 [TEKH-lah] to tag along with scientists studying the seabirds that nest on the archipelago\u2019s cliffs. But I also wanted to see what it felt like to be in a place that so thoroughly rejects human presence.\n On this, the last full day of our expedition, as the scientists rush to collect data and pack up camps on the other side of the island, the pit house seems a better vantage than most to reflect. I lower myself into the depression, scanning the sea, the bands of sunlight flickering across the tundra on this unusually clear day. I imagine watching for winter\u2019s sea ice, waiting for it to come. I imagine watching for polar bears, hoping they will not. You never know, a retired refuge biologist had said to me before I boarded the  Ti\u011dlax\u0302. \u201cI would keep my eyes out. If you see something big and white out there, look at it twice.\u201d\n  Once, these islands were mountains, waypoints on the subcontinent of Beringia that joined North America and Asia. Then the ocean swallowed the land around the peaks, hid them away in thick summer fogs, made them lonely. With no people resident long enough to keep their history, they became the sort of place where \u201cdiscovery\u201d could be perennial. Lieutenant Ivan Synd of the Russian navy, oblivious to the pit house, believed he was first to find the largest island, in 1766. He named it for the Christian apostle Matthew. Captain James Cook believed he discovered it in 1778, and called it Gore. The whalers who came upon the archipelago later called it, simply, \u201cthe Bear Islands.\u201d\n Around the winter of 1809\u20131810, a party of Russians and Unangans decamped here to hunt bears for fur. Depending on what source you consult, many of the Russians died of scurvy, while the Unangans survived, or some or most of the party perished when the sea mammals they relied on moved beyond the range of their hunts, or all were so tormented by polar bears that they had to leave. Indeed, when naturalist Henry Elliott visited the islands in 1874, he found them swarming with bruins. \u201cJudge our astonishment at finding hundreds of large polar bears \u2026 lazily sleeping in grassy hollows, or digging up grass and other roots, browsing like hogs,\u201d Elliott wrote, though he seemed to find them less terrifying than interesting and tasty. After his party killed some, he noted that the steaks were of \u201cexcellent quality.\u201d\n  Even after the bears were gone, the archipelago remained a difficult place for people. The fog was endless; the weather, a banshee; the isolation, extreme. In 1916, the Arctic power schooner  Great Bear ran afoul of the mists and wrecked on Pinnacle. The crew used whaleboats to move about 20 tonnes of supplies to St. Matthew to set up a camp and wait for help. A man named N. H. Bokum managed to build a sort of transmitter from odds and ends, and climbed each night to a clifftop to tap out SOS calls. But he gave up after concluding that the soggy air interfered with its operation. Growing restless as the weeks passed, men brandished knives over the ham when the cook tried to ration it. Had they not been rescued after 18 days,  Great Bear owner John Borden later said, this desperation would have been \u201cthe first taste of what the winter would have brought.\u201d\n US servicemen stationed on St. Matthew during the Second World War got a more thorough sampling of the island\u2019s winter extremes. In 1943, the US Coast Guard established a long-range navigation (Loran) site on the southwestern coast of the island, part of a network that helped fighter planes and warships orient on the Pacific with the help of regular pulses of radio waves. Snow at the Loran station drifted up to around eight meters deep, and \u201cblizzards of hurricane velocity\u201d lasted an average of 10 days. Sea ice surrounded the island for about seven months of the year. When a plane dropped the mail several kilometers away during the coldest time of year, the men had to form three crews and rotate in shifts just to retrieve it, dragging a toboggan of survival supplies as they went.\n The other seasons weren\u2019t much more hospitable. One day, five servicemen vanished on a boat errand, despite calm seas. Mostly, the island raged with wind and rain, turning the tundra to a \u201csea of mud.\u201d It took more than 600 bags of cement just to set foundations for the station\u2019s Quonset huts.\n The coast guard, worried how the men would fare in such conditions if they were cut off from resupply, introduced a herd of 29 reindeer to St. Matthew as a food stock in 1944. But the war ended, and the men left. The reindeer population, without predators, exploded. By 1963, there were 6,000. By 1964, nearly all were gone.\n   These days, the Loran station is little more than a towering pole anchored by metal cables to a bluff above the beach, surrounded by a wide fan of debris.\n On the fifth day of our week-long expedition, several of us walk the sagging remains of an old road to the site. Near the pole that still stands, a second has fallen, a third, a fourth. I find the square concrete pillars of the Quonset huts\u2019 foundations. A toilet lies alone on a rise, bowl facing inland. I pause next to a biometrician named Aaron Christ, as he shoots photos of a pile of rusting barrels that shriek with the scent of diesel. \u201cWe\u2019re great at building wondrous things,\u201d he says after a moment. \u201cWe\u2019re terrible at tearing them down and cleaning them up.\u201d\n  And yet, the tundra seems to be slowly reclaiming most of it. Monkshood and dwarf willow grow thick and spongy over the road. Moss and lichen finger over broken metal and jagged plywood, pulling them down.\n At other sites of brief occupation, it\u2019s the same. The earth consumes the beams of fallen cabins that seasonal fox trappers erected, likely before the Great Depression. The sea has swept away a hut that visiting scientists built near a beach in the 1950s. When the coast guard rescued the  Great Bear crew in 1916, they left everything behind. Griffin, the archaeologist, found little but scattered coal when he visited the site of the camp in 2018. Fishers and servicemen may have looted some, but what was too trashed for salvage\u2014perhaps the gramophone, the cameras, the bottles of champagne\u2014seems to have washed away or swum down into the soil. The last of the straggling reindeer, a lone, lame female, disappeared in the 1980s. For a long time, reindeer skulls salted the island. Now, most are gone. The few I see are buried to their antler tips, as if submerged in rising green water.\n Life here grows back, grows over, forgets. Not invincibly resilient, but determined and sure. On Hall Island, I see a songbird nesting in a cache of ancient batteries. And red foxes, having replaced most of St. Matthew\u2019s native Arctic foxes after crossing on sea ice, have dug dens beneath the Loran building sites and several pieces of debris. The voles sing and sing.\n    The next morning dawns dusky, light and clouds stained sepia by smoke blown from wildfires burning in distant forests. I spot something big and white as I walk across St. Matthew\u2019s flat southern lobe and freeze, squinting. The white begins to move. To sprint, really. Not a bear, as the retired biologist had hinted, but two swans on foot. Three cygnets trundle in their wake. As they turn toward me, I spot a flash of orange porpoising through the grass behind them: a red fox.\n The cygnets seem unaware of their pursuer, but their pursuer is aware of me. It veers from the chase to settle a couple of meters away\u2014scraggly, gold eyed, and mottled as the lichen on the cliffs. It drops to its side and rubs luxuriantly against a rock for a few minutes, then springs away in a possessed zigzag, leaving me giggling. After it\u2019s gone, I kneel to sniff the rock. It smells like dirt. I rub my own hair against it, just to say \u201chey.\u201d\n  As I continue on, I notice that objects in the distance often appear to be one thing, then resolve into another. Ribs of driftwood turn out to be whale bones. A putrid walrus carcass turns out to be the wave-pummeled rootball of a tree. Unlikely artifacts without stories\u2014a ladder, a metal pontoon\u2014occasionally jag from the ground, deposited far inland, I guess, by storms. When I close my eyes, I have the vague feeling that waves roll through my body. \u201cDock rock,\u201d someone will call this later: the sensation, after you have spent time on a ship, of the sea carried with you onto land, of land assuming the phantom motion of water beneath your feet.\n It occurs to me that to truly arrive on St. Matthew, you have to lose your bearings enough to feel the line between the two blur. Disoriented, I can sense the landscape as fluid, a shapeshifter as sure as the rootball and whale bones\u2014something that remakes itself from mountains to islands, that scatters and swallows signs left by those who pass across.\n I consider the island\u2019s eroding edges. Some cliffs in old photos have fallen away or buckled into sea stacks. I look at the few shafts of sun out on the clear water, sepia light touching dark mats of kelp on the Bering\u2019s floor. Whole worlds submerged or pulverized to cobble, sand, and silt, down there. A calving of land into sea, the redistribution of earth into unknowable futures. A good place to remember that we are each so brief. That we never stand on solid ground.\n  The wind whips strands of hair out of my hood and into my eyes as I press my palms into the floor of the pit house. It feels firm enough, for now. That it\u2019s still visible after a few centuries reassures me\u2014a small anchor against the dragging currents of this place. Eventually, though, I get cold and clamber out. I need to return to my camp near where the  Ti\u011dlax\u0302 waits at anchor ; we\u2019ll be setting course south back over the Bering toward other islands and airports in the morning. But first, I aim overland for a high, gray whaleback of ridge a few kilometers away that I have admired from the ship since our arrival.\n The sunlight that striped the hills this morning has faded. An afternoon fog descends as I meander over electric green grass, then climb, hand over hand, up a ribbon of steep talus. I top out into nothingness. One of the biologists had told me, when we first discussed my wandering alone, that the fog closes in without warning; that, when this happened, I would want a GPS to help me find my way back. Mine is malfunctioning, so I go by feel, keeping the steep drop of the ridge\u2019s face on my left, surprised by flats and peaks I don\u2019t remember seeing from below. I begin to wonder if I have accidentally gone down the ridge\u2019s gently sloping backside instead of walking its top. The fog thickens until I can see only a meter or two ahead. Thickens again, until I, too, vanish\u2014erased as completely as the dark tracery of path I left through the grass below soon will be.\n Then, abruptly, the fog breaks and the way down the mountain comes clear. Relieved, I weave back through the hills and, on the crest of the last, see the  Ti\u011dlax\u0302 in the placid bay below. The ship blows its foghorn in a long salute as I lift my hand to the sky.\n  Cite this Article: Sarah Gilman Nathaniel Wilder \u201cThe Island That Humans Can\u2019t Conquer,\u201d  Hakai Magazine, Oct 6, 2020, accessed October 8th, 2020,  https://www.hakaimagazine.com/features/the-island-humans-cant-conquer/.", "posttime": "2020-10-12 07:07:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5723\u9a6c,island,\u53d1\u73b0", "title": "\u636e\u8bf4\u5723\u9a6c\u4fee\u5c9b\u662f\u963f\u62c9\u65af\u52a0\u6700\u504f\u8fdc\u7684\u5730\u65b9", "title_en": "St. Matthew Island is said to be the most remote place in Alaska", "transed": 1, "url": "https://www.hakaimagazine.com/features/the-island-humans-cant-conquer/", "via": "", "real_tags": ["\u5723\u9a6c", "island", "\u53d1\u73b0"]}, {"category": "", "categoryclass": "", "imagename": "7c4007ff3146626590fe26010884cdd7.png", "infoid": 1028198, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9057\u61be\u7684\u662f\uff0c\u4eceSongShift v5.1.2\u5f00\u59cb\uff0c\u60a8\u5c06\u65e0\u6cd5\u518d\u521b\u5efa\u4eceSpotify\u5230\u5176\u4ed6\u97f3\u4e50\u670d\u52a1\u7684\u4f20\u8f93\u3002\u6211\u4eec\u77e5\u9053\u8fd9\u4f1a\u8ba9\u4f60\u4eec\u4e2d\u7684\u5f88\u591a\u4eba\u5931\u671b\u3002\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u4e0d\u5fc5\u8fd9\u4e48\u505a\u3002\nSpotify\u5f00\u53d1\u8005\u5e73\u53f0\u56e2\u961f\u8054\u7cfb\u4e86\u6211\u4eec\uff0c\u544a\u8bc9\u6211\u4eec\u6211\u4eec\u9700\u8981\u53d6\u6d88\u4ece\u4ed6\u4eec\u7684\u670d\u52a1\u8f6c\u79fb\u5230\u7ade\u4e89\u5bf9\u624b\u7684\u97f3\u4e50\u670d\u52a1\uff0c\u5426\u5219\u6211\u4eec\u7684API\u8bbf\u95ee\u6743\u9650\u5c31\u4f1a\u56e0\u4e3a\u8fdd\u53cdTOS\u800c\u88ab\u64a4\u9500\u3002\u867d\u7136\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u542c\u5230\u7684\u6d88\u606f\uff0c\u4f46\u6211\u4eec\u5c0a\u91cd\u4ed6\u4eec\u7684\u51b3\u5b9a\u3002\n\u4e3a\u4e86\u7ee7\u7eed\u4e3aSpotify\u63d0\u4f9b\u4e00\u5b9a\u7a0b\u5ea6\u7684\u652f\u6301\uff0c\u6211\u4eec\u4ecd\u5c06\u652f\u6301\u4ece\u5176\u4ed6\u670d\u52a1\u8f6c\u79fb\u5230Spotify\u3002\n\u6211\u4eec\u5c06\u7ee7\u7eed\u4e3aSongShift\u63a8\u51fa\u8ba1\u5212\u4e2d\u7684\u529f\u80fd\u3002\u4e00\u4e9b\u751f\u6d3b\u8d28\u91cf\u7684\u6539\u5584\uff0c\u4e00\u4e9b\u65b0\u7684\u652f\u6301\u670d\u52a1\uff0c\u4ee5\u53ca\u5176\u4ed6\u6700\u597d\u7684\u4e8b\u60c5\u90fd\u4f1a\u8ba9\u4eba\u5927\u5403\u4e00\u60ca\u3002\n*\u4efb\u4f55\u65b0\u529f\u80fd\u90fd\u5c06\u5177\u6709\u76f8\u540c\u7684\u9650\u5236\uff0c\u5373\u4e0d\u652f\u6301\u4eceSpotify\u8f6c\u51fa\u3002\n\u8fd9\u4e2a\u66f4\u65b0\u5bf9\u4f60\u4eec\u6240\u6709\u4eba\u6765\u8bf4\u90fd\u662f\u75db\u82e6\u7684\u3002\u6211\u4eec\u5e0c\u671b\u7ee7\u7eed\u5e2e\u52a9\u60a8\u89e3\u51b3\u6240\u6709\u5176\u4ed6\u97f3\u4e50\u4f20\u8f93\u9700\u6c42\u3002", "note_en": "Unfortunately, as of SongShift v5.1.2, you will no longer be able to create transfers from Spotify to another music service. We understand this will be a disappointment for a lot of you. We wish we didn&#39;t have to.\n  The Spotify Developer Platform Team reached out and let us know we&#39;d need to remove transferring from their service to a competing music service or have our API access revoked due to TOS violation. While this is not the news we wanted to hear, we respect their decision.\n  To continue to provide some level of support for Spotify, we&#39;ll still be supporting transferring from other services to Spotify.\n We will continue to roll out planned features for SongShift. Some quality of life improvements, some new supported services, and other things best left a surprise.\n *Any new features will have the same limitation of not supporting transfers out of Spotify.\n  This update is a painful one to push out to you all. We hope to continue to be of help with all your other music transferring needs.", "posttime": "2020-10-12 07:07:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f20\u8f93,spotify", "title": "\u5173\u4e8eSpotify\u4f20\u8f93\u7684\u8bf4\u660e", "title_en": "A Note about Spotify Transfers", "transed": 1, "url": "https://songshift.com/blog/spotify_transfers", "via": "", "real_tags": ["\u4f20\u8f93", "spotify"]}, {"category": "", "categoryclass": "", "imagename": "ce7f0349e3a4d24e55f0d73b7ce345f5.png", "infoid": 1028197, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u5e74\u524d\uff0c\u6211\u6709\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u63cf\u8ff0\u6211\u7231\u4e0a\u4e86\u94c1\u9508\u3002\u5f53\u7136\uff0c\u4e0e\u6280\u672f\u7684\u5173\u7cfb\u5c31\u50cf\u4efb\u4f55\u5176\u4ed6\u5173\u7cfb\u4e00\u6837\uff1a\u968f\u7740\u65b0\u9c9c\u611f\u548c\u8ff7\u604b\u9010\u6e10\u6d88\u9000\uff0c\u5b83\u53ef\u4ee5\u5efa\u7acb\u5728\u66f4\u957f\u671f\u7684\u57fa\u7840\u4e0a(\u901a\u5e38\u66f4\u73b0\u5b9e\u548c\u6e29\u548c)\uff0c\u4e5f\u53ef\u4ee5\u5f00\u59cb\u7834\u88c2\u3002\u6240\u4ee5\uff0c\u4eba\u4eec\u53ef\u80fd\u4f1a\u95ee\uff1a\u201c\u94c1\u9508\u201d\u5ea6\u5b8c\u871c\u6708\u540e\u600e\u4e48\u6837\uff1f\u901a\u8fc7\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u5e94\u8be5\u6307\u51fa\uff0c\u5927\u7ea6\u4e00\u5e74\u524d(\u4ee5\u53ca\u6211\u4e0e\u94c1\u9508\u5173\u7cfb\u7684\u4e00\u5e74)\uff0c\u6211\u4eec\u5f00\u59cb\u4e86\u6c27\u5316\u5242\u3002\u4e00\u65b9\u9762\uff0c\u8fd9\u4e2a\u540d\u5b57\u4e0d\u662f\u5076\u7136\u7684-\u6211\u4eec\u770b\u5230\u94c1\u9508\u5728\u6211\u4eec\u7684\u672a\u6765\u626e\u6f14\u7740\u91cd\u8981\u7684\u89d2\u8272\u3002\u4f46\u53e6\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5f00\u59cb\u8ba4\u771f\u6784\u5efa\uff0c\u6240\u4ee5\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6bd4\u65ad\u8a00\u66f4\u5c16\u9510\u7684\u95ee\u9898\uff1aRust\u5728\u4ece\u56fa\u4ef6\u5185\u90e8\u5ef6\u4f38\u5230\u865a\u62df\u673a\u7ba1\u7406\u7a0b\u5e8f\u548c\u63a7\u5236\u5e73\u9762\uff0c\u518d\u5230RESTAPI\u7684\u9ad8\u5ea6\u7684\u5806\u6808\u4e2d\u5e94\u8be5\u653e\u5728\u54ea\u91cc\uff1f\u4ece\u6c27\u5316\u7269\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u7b80\u77ed\u7684\u7b54\u6848\u662f\u94c1\u9508\u5df2\u7ecf\u88ab\u8bc1\u660e\u662f\u975e\u5e38\u5408\u9002\u7684-\u8001\u5b9e\u8bf4\uff0c\u975e\u5e38\u5408\u9002-\u6216\u591a\u6216\u5c11\u5730\u5728\u5806\u6808\u7684\u6240\u6709\u5c42\u4e0a\u90fd\u662f\u5982\u6b64\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u53ef\u4ee5\u671f\u5f85\u6765\u81eaOxide\u7684\u66f4\u591a\u3001\u66f4\u591a\u7684\u4e1c\u897f(\u6211\u4eec\u6253\u7b97\u6216\u591a\u6216\u5c11\u5730\u5f00\u6e90\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\u4e00\u5207)\uff0c\u4f46\u662f\u5bf9\u4e8e\u8303\u56f4\u7684\u4e00\u4e2a\u9884\u544a\u7247\uff0c\u4f60\u53ef\u4ee5\u5728Oxide\u5de5\u7a0b\u5e08\u7684\u5de5\u4f5c\u4e2d\u770b\u5230\uff1a\u53c2\u89c1Cliff\u7684\u535a\u5ba2\uff0cAdam\u548cDave\u5173\u4e8eDropshot\u7684\u8ba8\u8bba\uff0cJess\u5173\u4e8e\u5728Oxide\u4e2d\u4f7f\u7528Dropshot\u7684\u8ba8\u8bba\uff0cLaura\u5173\u4e8eRust\u5b8f\u7684\u8ba8\u8bba\uff0cSteve Klabnik\u5173\u4e8e\u4ed6\u52a0\u5165Oxide\u7684\u539f\u56e0\u3002(\u6487\u5f00\u5fc5\u5907\u6761\u4ef6\u4e0d\u8c08\uff1a\u6211\u4eec\u6b63\u5728\u62db\u8058\uff01)\u3002\u6240\u4ee5Rust\u5728Oxide\u4e0a\u8fdb\u5c55\u5f97\u975e\u5e38\u597d\uff0c\u4f46\u76ee\u524d\u6211\u60f3\u4e13\u6ce8\u4e8e\u66f4\u79c1\u4eba\u7684\u4e8b\u60c5-\u8fd9\u662f\u6211\u4e2a\u4eba\u559c\u6b22\u5728Rust\u4e2d\u5b9e\u73b0\u7684\u539f\u56e0\u3002\u8fd9\u4e9b\u90fd\u662f\u8303\u56f4\uff1a\u6709\u4e9b\u662f\u5fae\u5c0f\u4f46\u7f8e\u4e3d\u7684\u7ec6\u8282\uff0c\u8ba9\u6211\u6c89\u6d78\u5728\u5de5\u827a\u7684\u4e50\u8da3\u4e2d\uff1b\u6709\u4e9b\u662f\u66f4\u6df1\u523b\u7684\u529f\u80fd\uff0c\u4ee3\u8868\u4e86\u6700\u5148\u8fdb\u7684\u6280\u672f\uff1b\u8fd8\u6709\u4e00\u4e9b\u662f\u7531Rust\u793e\u533a\u5f00\u53d1\u7684\u8f6f\u4ef6\u5b9e\u4f53\uff0c\u9664\u4e86\u5de5\u4ef6\u672c\u8eab\uff0c\u8fd8\u6709\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u662f\u5b83\u4eec\u53cd\u6620\u4e86\u8c01\u4f1a\u88abRust\u5438\u5f15(\u4ee5\u53ca\u4e3a\u4ec0\u4e48)\u3002\u8fd8\u5e94\u8be5\u8bf4\uff0c\u6211\u7edd\u5bf9\u575a\u6301\u6211\u4e24\u5e74\u524d\u8bf4\u7684\u6bcf\u4e00\u53e5\u8bdd\uff1b\u8fd9\u4e0d\u662f\u4f5c\u4e3a\u5bf9\u8be5\u6e05\u5355\u7684\u66ff\u4ee3\uff0c\u800c\u662f\u5bf9\u5b83\u7684\u8865\u5145\u3002\u6700\u540e\uff0c\u8fd9\u4e2a\u5217\u8868\u975e\u5e38\u4e0d\u5b8c\u6574\uff1b\u5173\u4e8eRust\u6709\u5f88\u591a\u503c\u5f97\u559c\u7231\u7684\u5730\u65b9\uff0c\u8fd9\u4e0d\u5e94\u8be5\u88ab\u8ba4\u4e3a\u662f\u8be6\u5c3d\u7684\uff01\u5f53\u4e3a\u5d4c\u5165\u5f0f\u7cfb\u7edf\u8fdb\u884c\u5f00\u53d1\u65f6-\u5c24\u5176\u662f\u5bf9\u4e8e\u56f4\u7ed5\u7740\u6211\u4eec\u5728Oxid\u4e0a\u6784\u5efa\u7684\u670d\u52a1\u5668\u4e0a\u7684\u4e3b\u673aCPU\u7684\u5fae\u63a7\u5236\u5668\u8230\u961f-\u5185\u5b58\u7684\u4f7f\u7528\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0cC\u8bed\u8a00\u4e4b\u6240\u4ee5\u6700\u9002\u5408\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u5b83\u975e\u5e38\u7cbe\u7b80\uff1a\u9664\u4e86\u4f5c\u4e3a\u8bed\u8a00\u672c\u8eab\u7684\u53ef\u79fb\u690d\u6c47\u7f16\u5668\u4e4b\u5916\uff0c\u5b83\u57fa\u672c\u4e0a\u4ec0\u4e48\u90fd\u6ca1\u6709\u63d0\u4f9b\uff0c\u4ece\u800c\u907f\u514d\u4e86\u590d\u6742\u8fd0\u884c\u65f6\u7684\u9690\u542b\u5047\u8bbe(\u548c\u5468\u957f)\u3002\u4f46\u662f\uff0cC\u8bed\u8a00\u63d0\u4f9b\u7684\u4e1c\u897f\u6bd4\u6781\u7b80\u4e3b\u4e49\u66f4\u591a\u5730\u53cd\u6620\u4e86\u5386\u53f2\uff1b\u5b83\u4e0d\u662f\u4f18\u96c5\u7684\u4e1c\u897f\uff0c\u800c\u662f\u4e00\u79cd\u8003\u8651\u4e0d\u5468\u7684\u4e1c\u897f\uff0c\u8ba9\u90a3\u4e9b\u6784\u5efa\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u4eba\u81ea\u5df1\u6709\u6548\u5730\u6784\u5efa\u4e00\u5207-\u800c\u4e14\u7528\u4e00\u79cd\u51e0\u4e4e\u6ca1\u6709\u5e2e\u52a9\u4ed6\u4eec\u7f16\u5199\u6b63\u786e\u8f6f\u4ef6\u7684\u8bed\u8a00\u3002\u540c\u65f6\uff0c\u9ad8\u7ea7\u8bed\u8a00\u548c\u73af\u5883\u901a\u5e38\u662f\u56f4\u7ed5\u8d44\u6e90\u770b\u4f3c\u65e0\u9650\u7684\u73b0\u4ee3\u673a\u5668\u8bbe\u8ba1\u7684\uff0c\u529f\u80fd\u8fc7\u4e8e\u9f50\u5168\uff0c\u65e0\u6cd5\u9002\u5e94(\u6bd4\u65b9\u8bf4)\u6570\u4e07\u5b57\u8282\u6216\u5fae\u63a7\u5236\u5668(\u9ad8\u5ea6)\u53d7\u9650\u7684\u73af\u5883\u3002\u5373\u4f7f\u4eba\u4eec\u53ef\u4ee5\u8bf1\u4f7f\u8fd9\u4e9b\u5176\u4ed6\u8bed\u8a00\u8fdb\u5165\u5d4c\u5165\u5f0f\u7528\u4f8b\uff0c\u5b83\u901a\u5e38\u4e5f\u662f\u4f5c\u4e3a\u4e00\u79cd\u91cd\u65b0\u5b9e\u73b0\uff0c\u7ed9\u5f00\u53d1\u4eba\u5458\u7559\u4e0b\u4e86\u4e00\u4e2a\u4e0d\u4e00\u5b9a\u4ece\u5e95\u5c42\u8bed\u8a00\u7684\u5f00\u53d1\u4e2d\u83b7\u76ca\u7684\u5206\u53c9\u3002Rust\u91c7\u53d6\u4e86\u4e00\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff1a\u4e00\u4e2a\u4e30\u5bcc\u7684\u9ed8\u8ba4\u6807\u51c6\u5e93\uff0c\u4f46\u4e5f\u662f\u4e00\u79cd\u8ba9\u7a0b\u5e8f\u9009\u62e9\u9000\u51fa\u8be5\u6807\u51c6\u5e93\u7684\u4e00\u6d41\u673a\u5236\u3002\u901a\u8fc7\u5c06\u81ea\u5df1\u6807\u8bb0\u4e3ano_std\uff0c\u7a0b\u5e8f\u5c06\u81ea\u5df1\u9650\u5236\u5728libcore\u4e2d\u7684\u529f\u80fd\u3002\u53cd\u8fc7\u6765\uff0c\u8be5\u529f\u80fd\u4e0d\u505a\u4efb\u4f55\u7cfb\u7edf\u5047\u8bbe-\u5c24\u5176\u662f\u4e0d\u6267\u884c\u5806\u5206\u914d\u3002\u8fd9\u5bf9\u7cfb\u7edf\u6765\u8bf4\u5e76\u4e0d\u5bb9\u6613\uff1b\u5b83\u9700\u8981\u5f00\u53d1\u4eba\u5458\u7684\u975e\u51e1\u7eaa\u5f8b(\u4ed6\u4eec\u5fc5\u987b\u4e0d\u65ad\u533a\u5206\u6838\u5fc3\u529f\u80fd\u548c\u6807\u51c6\u529f\u80fd)\uff0c\u5e76\u5bf9\u5d4c\u5165\u5f0f\u8f6f\u4ef6\u7684\u9650\u5236\u6709\u5e7f\u6cdb\u7684\u540c\u60c5\u5fc3\u3002Rust\u517c\u5177\u8fd9\u4e24\u4e2a\u4f18\u70b9\uff0c\u5176\u7ed3\u679c\u662f\u4e0d\u540c\u5bfb\u5e38\u7684\uff1a\u4e00\u79cd\u5b89\u5168\u3001\u5f3a\u5927\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u5728\u5fae\u63a7\u5236\u5668\u9ad8\u5ea6\u53d7\u9650\u7684\u73af\u5883\u4e2d\u8fd0\u884c-\u5176\u4e8c\u8fdb\u5236\u4ee3\u7801\u4e0eC\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u4ee3\u7801\u4e00\u6837\u5c0f\u3002\u8fd9\u4f7f\u5f97no_std-\u6b63\u5982Cliff\u6240\u8bf4\u7684\u90a3\u6837-\u6210\u4e3aEmbedded Rust\u7684\u6740\u624b\u7ea7\u529f\u80fd\uff0c\u6ca1\u6709\u771f\u6b63\u7684\u4f18\u5148\u6216\u7c7b\u4f3c\u4e4b\u5904\u3002\u4e24\u5e74\u524d\uff0c\u6211\u63d0\u5230\u6211\u559c\u6b22Format\uff01\uff0c\u7279\u522b\u662f{\uff1a\uff1f}\u683c\u5f0f\u8bf4\u660e\u7b26\u3002\u6211\u82b1\u4e86\u66f4\u957f\u65f6\u95f4\u624d\u53d1\u73b0\u7684\u662f{\uff1a#\uff1f}\uff0c\u5b83\u683c\u5f0f\u5316\u4e86\u4e00\u4e2a\u7ed3\u6784\uff0c\u4f46\u4e5f\u7f8e\u5316\u4e86\u5b83(\u5373\uff0c\u4f7f\u7528\u6362\u884c\u7b26\u548c\u7f29\u8fdb)\u3002\u8fd9\u53ef\u4ee5\u4e0e{\uff1a#x}\u7ed3\u5408\u4ea7\u751f{\uff1a#x\uff1f}\uff0c\u5b83\u53ef\u4ee5\u6f02\u4eae\u5730\u6253\u5370\u5341\u516d\u8fdb\u5236\u7684\u7ed3\u6784\u3002\u56e0\u6b64\uff1a\u53d8\u6210\u8fd9\u6837\uff1a\u6b63\u5728\u8f6c\u50a8\u533a\u57df{daddr\uff1aSome(0x4db8\uff0c)\uff0cbase\uff1a0x10000\uff0c\u5927\u5c0f\uff1a0x8000\uff0cattr\uff1aRegionAttr{Read\uff1aTrue\uff0cWrite\uff1aFalse\uff0cExecute\uff1aTrue\uff0cDevice\uff1aFalse\uff0cDMA\uff1aFalse\uff0c}\uff0cTASK\uff1aTASK(0x0\uff0c)\uff0c}\u3002\n\u6211\u7684\u624b\u6307\u73b0\u5728\u6309De\u952e\u5165{\uff1a#x\uff1f}", "note_en": "Two years ago, I had a blog entry describing  falling in love with Rust. Of course, a relationship with a technology is like any other relationship: as novelty and infatuation wears off, it can get on a longer term (and often more realistic and subdued) footing \u2014 or it can begin to fray. So well one might ask: how is Rust after the honeymoon? By way of answering that, I should note that about a year ago (and a year into my relationship with Rust)  we started Oxide. On the one hand, the name was no accident \u2014 we saw Rust playing a large role in our future. But on the other, we hadn\u2019t yet started to build in earnest, so it was really more pointed question than assertion: where might Rust fit in a stack that stretches from the bowels of firmware through a hypervisor and control plane and into the lofty heights of REST APIs? The short answer from  an Oxide perspective is that Rust has proven to be a really good fit \u2014 remarkably good, honestly \u2014 at more or less all layers of the stack. You can expect much, much more to come from Oxide on this (we intend to open source more or less everything we\u2019re building), but for a teaser of the scope, you can see it in the work of Oxide engineers: see  Cliff\u2019s blog,  Adam and Dave\u2019s talk on Dropshot,  Jess on using Dropshot within Oxide,  Laura on Rust macros, and  Steve Klabnik on why he joined Oxide. (Requisite aside:  we\u2019re hiring!) So Rust is going really well for us at Oxide, but for the moment I want to focus on more personal things \u2014 reasons that I  personally have enjoyed implementing in Rust. These run the gamut: some are tiny but beautiful details that allow me to indulge in the pleasure of the craft; some are much more profound features that represent important advances in the state of the art; and some are bodies of software developed by the Rust community, notable as much for their reflection of who is attracted to Rust (and why) as for the artifacts themselves. It should also be said that I stand by absolutely everything  I said two years ago; this is not as a replacement for that list, but rather a supplement to it. Finally, this list is highly incomplete; there\u2019s a lot to love about Rust and this shouldn\u2019t be thought of as any way exhaustive!   When developing for embedded systems \u2014 and especially for the flotilla of microcontrollers that surround a host CPU on the kinds of servers we\u2019re building at Oxide \u2014 memory use is critical. Historically, C has been the best fit for these applications just because it so lean: by providing essentially nothing other than the portable assembler that is the language itself, it avoids the implicit assumptions (and girth) of a complicated runtime. But the nothing that C provides reflects history more than minimalism; it is not an elegant nothing, but rather an ill-considered nothing that leaves those who build embedded systems building effectively everything themselves \u2014 and in a language that does little to help them write correct software. Meanwhile, having been generally designed around modern machines with seemingly limitless resources, higher-level languages and environments are simply too full-featured to fit into (say) tens of kilobytes or into the (highly) constrained environment of a microcontroller. And even where one could cajole these other languages into the embedded use case, it has generally been as a reimplementation, leaving developers on a fork that isn\u2019t necessarily benefiting from development in the underlying language. Rust has taken a different approach: a rich, default standard library but  also a first-class mechanism for programs to opt out of that standard library. By marking themselves as  no_std, programs confine themselves to the functionality found in  libcore. This functionality, in turn, makes no system assumptions \u2014 and in particular, performs no heap allocations. This is not easy for a system to do; it requires extraordinary discipline by those developing it (who must constantly differentiate between core functionality and standard functionality) and a broad empathy with the constraints of embedded software. Rust is blessed with both, and the upshot is remarkable: a safe, powerful language that can operate in the highly constrained environment of a microcontroller \u2014 with binaries every bit as small as those generated by C. This makes  no_std \u2014 as  Cliff has called it \u2014 the killer feature of embedded Rust, without real precedence or analogue.   Two years ago, I mentioned that I love  format!, and in particular the  {:?} format specifier. What took me longer to discover was  {:#?}, which formats a structure but also pretty-prints it (i.e., with newlines and indentation). This can be coupled with  {:#x} to yield  {:#x?} which pretty-prints a structure  in hex. So this:  Becomes this: dumping Region { daddr: Some( 0x4db8, ), base: 0x10000, size: 0x8000, attr: RegionAttr { read: true, write: false, execute: true, device: false, dma: false, }, task: Task( 0x0, ),}\n My fingers now type  {:#x?} by default, and hot damn is it ever nice!   Okay, another small one: I love the Rust integer literal syntax! In hardware-facing systems, we are often expressing things in terms of masks that ultimately map to binary. It is beyond me why C thought to introduce octal and hexadecimal but not binary in their literal syntax; Rust addresses this gap with the same \u201c 0b\u201d prefix as found in  some non-standard C compiler extensions. Additionally, Rust allows for integer literals to be arbitrarily intra-delimited with an underscore character. Taken together, this allows for a mask consisting of bits 8 through 10 and bit 12 (say) to be expressed as  0b0000_1011_1000_0000 \u2014 which to me is clearer as to its intent and less error prone than (say)  0xb80 or  0b101110000000. And as long as we\u2019re on the subject of integer literals: I also love that the types (and the suffix that denotes a literal\u2019s type) explicitly encode bit width and signedness. Instead of dealing with the implicit signedness and width of  char,  short,  long and  long long, we have  u8,  u16,  u32,  u64, etc. Much clearer!   Debugging software \u2014 and more generally, the debuggability of software systems \u2014 is in my marrow; it may come as no surprise that one of the things that I personally have been working on is the debugger for a  de novo Rust operating system that we\u2019re developing. To be useful, debuggers need help from the compiler in the way of type information \u2014 but this information has been historically excruciating to extract, especially in production systems. (Or as  Robert phrased it concisely years ago: \u201cthe compiler is the enemy.\u201d) And while  DWARF is the  de facto standard, it is only as good as the compiler\u2019s willingness to supply it. Given how much debuggability can (sadly) lag development, I wasn\u2019t really sure what I would find with respect to Rust, but I have been delighted to discover thorough DWARF support. This is especially important for Rust because it (rightfully) makes extensive use of inlining; without DWARF support to make sense of this inlining, it can be hard to make any sense of the generated assembly. I have been able to use the DWARF information to build some pretty powerful Rust-based tooling \u2014 with much promise on the horizon. (You can see an early study for this work in  Tockilator.)   Lest I sound like I am heaping too much praise on DWARF, let me be clear that DWARF is historically acutely painful to deal with. The specification (to the degree that one can call it that) is an elaborate mess, and the format itself seems to go out of its way to inflict pain on those who would consume it. Fortunately, the  Gimli crate that consumes DWARF is really good, having made it easy to build DWARF-based tooling. (I have found that whenever I am frustrated with Gimli, I am, in fact, frustrated with some strange pedantry of DWARF \u2014 which Gimli rightfully refuses to paper over.) In addition to Gimli, I have also enjoyed using  Goblin to consume ELF. ELF \u2014 in stark contrast to DWARF \u2014 is tight and crisp (and the traditional C-based tooling for ELF is quite good), but it was nice nonetheless that Goblin makes it so easy to zing through an ELF binary.   Enums \u2014 that is, the \u201csum\u201d class of algebraic types \u2014 are core to Rust, and give it the beautiful error handling that I described falling in love with two years ago. Algebraic types allow much more than just beautiful error handling, e.g. Rust\u2019s ubiquitous   Option type, which allows for sentinel values to be eliminated from one\u2019s code \u2014 and with it some significant fraction of defects. But it\u2019s one thing to use these constructs, and another to begin to develop algebraic types for one\u2019s own code, and I have found the ability for enums to optionally bear data to be incredibly useful. In particular, when parsing a protocol, one is often taking a stream of bytes and turning it into one of several different kinds of things; it is really, really nice to have the type system guide how software should consume the protocol. For example, here\u2019s an enum that I defined when parsing data from ARM\u2019s  Embedded Trace Macrocell signal protocol: #[derive(Copy, Clone, Debug)]pub enum ETM3Header { BranchAddress { addr: u8, c: bool }, ASync, CycleCount, ISync, Trigger, OutOfOrder { tag: u8, size: u8 }, StoreFailed, ISyncCycleCount, OutOfOrderPlaceholder { a: bool, tag: u8 }, VMID, NormalData { a: bool, size: u8 }, Timestamp { r: bool }, DataSuppressed, Ignore, ValueNotTraced { a: bool }, ContextID, ExceptionExit, ExceptionEntry, PHeaderFormat1 { e: u8, n: u8 }, PHeaderFormat2 { e0: bool, e1: bool },}\n That variants can have wildly different types (and that some can bear data while others don\u2019t \u2014 and some can be structured, while others are tuples) allows for the type definition to closely match the specification, and helps higher-level software consume the protocol correctly.   In C, the  ternary operator allows for a terse conditional expression that can be used as an rvalue, e.g.:  This is equivalent to:  This construct is particularly valuable when not actually assigning to an lvalue, but when (for example) returning a value or passing a parameter. And indeed, I would estimate that a plurality \u2014 if not a majority \u2014 of my lifetime-use of the ternary operator has been in  arguments to printf. While Rust has no ternary operator  per se, it is  expression-oriented: statements have values. So the above example becomes:  That\u2019s a bit more verbose than its C equivalent (though I personally like its explicitness), but it really starts to shine when things can marginally more complicated: nested ternary operators get gnarly in C, but they are easy to follow as simple nested if-then-else statements in Rust. And (of course)  match is an expression as well \u2014 and I found that I often use  match where I would have used a ternary operator in C, with the added benefit that I am forced to deal with every case. As a concrete example, take this code that is printing a slice of little-endian bytes as an 8-bit, 16-bit, or 32-bit quantity depending on a  size parameter: print!(&#34;{:0width$x} &#34;, match size { 1 =&gt; line[i - offs] as u32, 2 =&gt; u16::from_le_bytes(slice.try_into().unwrap()) as u32, 4 =&gt; u32::from_le_bytes(slice.try_into().unwrap()) as u32, _ =&gt; { panic!(&#34;invalid size&#34;); } }, width = size * 2 );\n For me, this is all of the power of the ternary operator, but without its pitfalls! An interesting footnote on this: Rust once  had the C-like ternary operator,  but removed it, as the additional syntax  didn\u2019t carry its weight. This pruning in Rust\u2019s early days \u2014 the idea that syntax should carry its weight by bringing unique expressive power \u2014 has kept Rust from the fate of languages that suffered from debilitating addictions to new syntax and concomitant complexity overdose; when  there is more than one way to do it for absolutely everything, a language becomes so baroque as to become  write-only!   This is a small detail, but one that took me a little while to find. As I described in my blog entry two years ago, I have historically made heavy use of the C preprocessor. One (arcane) example of this is the   ## token concatenation operator, which I have needed only rarely \u2014 but found essential in those moments. (Here\u2019s a  concrete example.) As part of a macro that I was developing, I found that I needed the equivalent for Rust, and was delighted to find David Tolnay\u2019s  paste crate.  paste! was exactly what I needed \u2014 and more testament to both the singular power of Rust\u2019s macro system and David\u2019s knack for build singularly useful things with it!   A great strength of Rust is its safety \u2014 but something I  also appreciate about it is the escape hatch offered via   unsafe, whereby certain actions are permitted that are otherwise disallowed. It should go without saying that one should not use  unsafe without good reason \u2014 but such good reasons can and do exist, and I appreciate that Rust trusts the programmer enough to allow them to take their safety into their own hands. Speaking personally, most of my own uses of  unsafe have boiled down to accesses to register blocks on a microcontroller: on the one hand, unsafe because they dereference arbitrary memory \u2014 but on the other, safe by inspection. That said, the one time I had to write unsafe code that  actually felt dangerous (namely,  in dealing with an outrageously unsafe C library), I was definitely in a heightened state of alert! Indeed, my extreme caution around unsafe code reflects how much Rust has changed my disposition: after nearly three decades working in C, I thought I appreciated its level of unsafety, but the truth is I had just become numb to it; to implement in Rust is to eat the fruit from the tree of knowledge of unsafe programs \u2014 and to go back to unsafe code is to realize that you were naked all along!   When Steve Klabnik joined Oxide, we got not only an important new addition to the team, but a new platform as well: Steve is using Windows as his daily driver, in part because of his own personal dedication to keeping Rust multi-platform. While I\u2019m not sure that anything could drive me personally to use Windows (aside: MS-DOS robbed me of my childhood), I do strongly believe in platform heterogeneity. I love that Rust forces the programmer to really think about implicitly platform-specific issues: Rust refuses to paper over the cracks in computing\u2019s foundation for sake of expediency. If this can feel unnecessarily pedantic (can\u2019t I just have a timestamp?!), it is in multi-platform support where this shines: software that I wrote just\u2026 worked on Windows. (And where it didn\u2019t, it was despite Rust\u2019s best efforts: when a standard library gives you first-class support to abstract the path separator, you have no one to blame but yourself if you hard-code your own!) Making and keeping Rust multi-platform is hard work for everyone involved; but as someone who is currently writing Rust for multiple operating systems (Linux,  illumos and \u2014 thanks to Steve \u2014 Windows) and multiple ISAs (e.g., x86-64, ARM Thumb-2), I very much appreciate that this is valued by the Rust community!   In my original piece, I praised the error handling of Rust, and that is certainly truer than ever: I simply cannot imagine going back to a world without algebraic types for error handling. The challenge that remained was that there were  several conflicting crates building different error types and supporting routines, resulting in some confusion as to best practice. All of this left me \u2014 like many \u2014 simply rolling my own via  Box&lt;dyn Error&gt;, which works well enough, but it doesn\u2019t really help a thorny question: when an error emerges deep within a stack of composed software, where did it  actually come from? Enter David Tolnay (again!) and his handy   anyhow! crate, which pulls together best practices and ties that into the  improvements in the  std::error::Error trait to yield a crate that is powerful without being imposing. Now, when an error emerges from within a stack of software, we can get a crisp chain of causality, e.g.: readmem failed: A core architecture specific error occurredCaused by: 0: Failed to read register CSW at address 0x00000000 1: Didn&#39;t receive any answer during batch processing: [Read(AccessPort(0), 0)]\n And we can set  RUST_BACKTRACE to get a full backtrace where an error actually originates \u2014 which is especially useful when a failure emerges from a surprising place, like this one from a Drop implementation in  probe-rs: Stack backtrace: 0: probe_rs::probe::daplink::DAPLink::process_batch 1: probe_rs::probe::daplink::DAPLink::batch_add 2: ::read_register 3: probe_rs::architecture::arm::communication_interface::ArmCommunicationInterface::read_ap_register 4: probe_rs::architecture::arm::memory::adi_v5_memory_interface::ADIMemoryInterface::read_word_32 5: &lt;probe_rs::architecture::arm::memory::adi_v5_memory_interface::ADIMemoryInterface as probe_rs::memory::MemoryInterface&gt;::read_word_32 6: ::get_available_breakpoint_units 7: &lt;core::iter::adapters::ResultShunt&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next 8: &lt;alloc::vec::Vec as alloc::vec::SpecFromIter&gt;::from_iter 9: ::drop 10: core::ptr::drop_in_place 11: main 12: std::sys_common::backtrace::__rust_begin_short_backtrace 13: std::rt::lang_start::{{closure}} 14: core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once 15: main 16: __libc_start_main 17: _start) })\n  When writing software at the hardware/software interface, there is inevitably some degree of direct machine interaction that must be done via assembly. Historically, I have done this via  dedicated .s files \u2014 which are inconvenient, but explicit. Over the years, compilers added the capacity to drop assembly into C, but the verb here is apt: the resulting assembly was often dropped on its surrounding C like a Looney Tunes anvil, with the interface between the two often being ill-defined, compiler-dependent or both. Rust took this approach at first too, but it suffered from all of the historical problems of inline assembly \u2014 which in Rust\u2019s case meant being highly dependent on LLVM implementation details. This in turn meant that it was unlikely to ever become stabilized, which would relegate those who need inline assembly to forever be on nightly Rust. Fortunately, Amanieu d\u2019Antras took on this gritty problem, and landed  a new  asm! syntax. The new syntax is a pleasure to work with, and frankly Rust has now leapfrogged C in terms of ease and robustness of integrating inline assembly!   Okay, this is another tiny one, but meaningful for me and one that took me too long to discover. So first, something to know about me: I am an eighty column purist. For me, this has nothing to do with punchcards or whatnot, but rather with  type readability, which tends to result in 50-100 characters per line \u2014 and generally about 70 or so. (I would redirect rebuttals to your bookshelf, where most any line of most any page of most any book will show this to be more or less correct.) So I personally embrace the \u201chard 80\u2033, and have found that the rework that that can sometimes require results in more readable, better factored code. There is, however, one annoying exception to this: when programmatically printing a string that is itself long, one is left with much less horizontal real estate to work with! In C, this is a snap: string literals without intervening tokens are automatically concatenated, so the single literal can be made by multiple literals across multiple lines. But in Rust, string literals can span multiple lines (generally a feature!), so splitting the line will also embed the newline and any leading whitespace. e.g.: println!( &#34;...government of the {p}, by the {p}, for the {p}, shall not perish from the earth.&#34;, p = &#34;people&#34; );\n Results in a newline and some leading whitespace that represent the structure of the program, not the desired structure of the str\n......", "posttime": "2020-10-12 07:07:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u871c\u6708", "title": "\u871c\u6708\u540e\u7684\u9508\u8ff9", "title_en": "Rust After the Honeymoon", "transed": 1, "url": "http://dtrace.org/blogs/bmc/2020/10/11/rust-after-the-honeymoon/", "via": "", "real_tags": ["rust", "\u871c\u6708"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028196, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u597d\uff0c\u6b22\u8fce\u8bbf\u95ee\u6211\u4eec\u5728ISMIR 2020\u4e0a\u7684\u6559\u7a0b\u7f51\u7ad9\uff01\u6211\u4eec\u5f88\u9ad8\u5174\u60a8\u51b3\u5b9a\u52a0\u5165\u6211\u4eec\uff01\n\u5728\u672c\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u6307\u5bfc\u60a8\u4f7f\u7528\u73b0\u4ee3\u5f00\u6e90\u5de5\u5177\u548c\u6570\u636e\u96c6\u6765\u8fd0\u884c\u3001\u8bc4\u4f30\u3001\u7814\u7a76\u548c\u90e8\u7f72\u6e90\u5206\u79bb\u65b9\u6cd5\u3002\u6211\u4eec\u5c06\u7279\u522b\u5173\u6ce8\u97f3\u4e50\u6e90\u5206\u79bb\uff0c\u4f46\u6211\u4eec\u4f1a\u6ce8\u610f\u67d0\u4e9b\u65b9\u6cd5\u9002\u7528\u4e8e\u66f4\u5e7f\u6cdb\u7684\u6e90\u7c7b\u578b\u3002\n\u6709\u80fd\u529b\u5c31\u4f55\u65f6\u4ee5\u53ca\u5982\u4f55\u5c06\u6765\u6e90\u5206\u79bb\u7eb3\u5165\u81ea\u5df1\u7684\u5de5\u4f5c\u505a\u51fa\u660e\u667a\u7684\u51b3\u5b9a\uff0c\n\u4e00\u7ec4\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u5f00\u6e90\u5de5\u5177\uff0c\u5982\u679c\u60a8\u9009\u62e9\u5c06\u6e90\u4ee3\u7801\u5206\u79bb\u5408\u5e76\u5230\u60a8\u7684\u5de5\u4f5c\u4e2d\uff0c\u6216\u8005\u57f9\u8bad\u60a8\u81ea\u5df1\u7684\u6a21\u578b\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002\n\u9605\u8bfb\u5b8c\u672c\u6559\u7a0b\u540e\uff0c\u60a8\u5e94\u8be5\u5bf9\u5728\u5de5\u4f5c\u4e2d\u4f7f\u7528\u6e90\u5206\u79bb\u5f88\u6709\u4fe1\u5fc3\uff0c\u5e76\u4e14\u5e94\u8be5\u77e5\u9053\u9700\u8981\u4f7f\u7528\u54ea\u4e9b\u5de5\u5177\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u4e2a\u7f51\u7ad9\u80fd\u4e3a\u60a8\u4eca\u540e\u5728\u6e90\u4ee3\u7801\u5206\u79bb\u6280\u672f\u65b9\u9762\u7684\u5de5\u4f5c\u63d0\u4f9b\u53c2\u8003\u6307\u5357\u6216\u8d77\u70b9\u3002\n\u5355\u51fb\u9875\u9762\u53f3\u4e0b\u89d2\u7684\u6309\u94ae\u5f00\u59cb\u6d4f\u89c8\u6559\u7a0b\uff01", "note_en": "Hello and welcome to the website for our tutorial at  ISMIR 2020!We\u2019re excited that you\u2019ve decided to join us!\n In this tutorial, we will guide you through modern, open-source tooling and datasetsfor running, evaluating, researching, and deploying source separation approaches.We will pay special attention to musical source separation, though we will notewhere certain approaches are applicable to a wider array of source types.\n The ability to make an educated decision about when and how to incorporate sourceseparation into your own work,\n A set of well-tested, open-source tools that you can use if you do choose toincorporate source separation into your work, or train your own models.\n After you go through this tutorial, you should be confident about using sourceseparation in your work and you should know which tools to reach for. We hopethis website will serve as a reference guide or starting point for your futureendeavours with source separation technology.\n Click the button on the bottom right of the page to begin going through the tutorial!", "posttime": "2020-10-12 07:06:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,source,\u5206\u79bb", "title": "\u7528\u4e8e\u97f3\u4e50\u6e90\u5206\u79bb\u7684\u5f00\u6e90\u5de5\u5177\u548c\u6570\u636e", "title_en": "Open Source Tools and Data for Music Source Separation", "transed": 1, "url": "https://source-separation.github.io/tutorial/landing.html", "via": "", "real_tags": ["\u5f00\u6e90", "source", "\u5206\u79bb"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028195, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9274\u4e8eLinux5.9\u5373\u5c06\u53d1\u5e03\uff0c\u6211\u4eca\u5929\u7528cloc\u83b7\u5f97\u4e86\u4e00\u4e9b\u4e50\u8da3\uff0c\u770b\u770b\u8fd9\u4e2a\u5373\u5c06\u7ed3\u675f\u7684Linux5.9\u5185\u6838\u72b6\u6001\u7684\u5f53\u524d\u4ee3\u7801\u884c\u6570\u3002\r\u5728\u4eca\u5929\u7684Linux5.9Git\u4e2d\uff0c\u5185\u6838\u5927\u7ea6\u67092049\u4e07\u884c\u4ee3\u7801\uff0c\u53e6\u5916\u8fd8\u6709358\u4e07\u884c\u4ee3\u7801\u6ce8\u91ca\u548c372\u4e07\u884c\u7a7a\u767d\u884c\u3002\u6216\u8005\u8bf4\uff0cLinux5.9\u5927\u7ea6\u67092,781\u4e07\u884c\u4ee3\u7801\uff0c\u5206\u5e03\u5728\u5927\u7ea65.9\u4e07\u4e2a\u6e90\u6587\u4ef6\u4e2d\u3002\r69964\u4e2a\u6587\u672c\u6587\u4ef6\u3002\r69494\u4e2a\u552f\u4e00\u6587\u4ef6\u3002\u5df2\u5ffd\u756510737\u4e2a\u6587\u4ef6\u3002\r\rGithub.com/aldanial/cloc v1.82T=95.88s(618.0\u4e2a\u6587\u4ef6/\u79d2\uff0c290045.7\u7ebf/\u79d2)\r--\r\u8bed\u8a00\u6587\u4ef6\u7a7a\u767d\u6ce8\u91ca\u4ee3\u7801\r\u3002\rC 29198 2900014 2367000 14781314\rC/C++\u6807\u593421123 588426 1022774 4640918\r\u91cd\u65b0\u6784\u9020\u6587\u672c2685 135238 59051 369738\r\u7ec4\u4ef61275 45960 99012 225085\rJSON 287 0 0 165799\rYAML1089 18494 4966 83627\r\u4f2f\u6069\u58f3\u724c657 16823 11350 66043\r\u81f4\u753525929808 10864 44192\rSVG 59 118 1365 37555\rPERL 60 6686 4767 34393\rPython 123 5345 4804 27720\rYACC 9 695 354 4755\r\u91c7\u8d2d\u8ba2\u5355\u6863\u68485 791 918 3077\r\u6cd59 349 304 2130\rC++10 345 134 1993\r\u4f2f\u6069\u518d\u6b21\u58f3\u724c52 338 297\u3002\u4e00\u4e03\u4e94\u96f6\rAWK 10 139 116 1051\r\u6797\u57301 58 0 603\rNANT\u811a\u672c2 143 0 549\r\u9ec4\u74dc1 28 50 175\rWindows\u6a21\u5757\u5b9a\u4e492 15 0 109\rM4 1 15 1 95\rCSS 1 28 29 80\rXSLT 5 13 26 61\rVim\u811a\u672c%1%3%12%27\r\u7ea2\u5b9d\u77f31 4 0 25\rINI 1 1 0 6\rSED 1 2 5 5\r-\u3002\r\u603b\u6570\uff1a59260 3729879 3588199 20492875\r--\u3002\n(\u8bf7\u8bb0\u4f4f\uff0c\u5185\u6838\u6e90\u4ee3\u7801\u6811\u8fd8\u5177\u6709\u5404\u79cd\u5de5\u5177\u3001\u6784\u5efa\u7cfb\u7edf\u548c\u5927\u91cf\u6587\u6863\u7b49\uff0c\u8fd9\u4e9b\u6587\u6863\u53ef\u4ee5\u89e3\u91ca\u4e00\u4e9b\u539f\u672c\u770b\u8d77\u6765\u76f8\u5f53\u7279\u6b8a\u7684cloc\u6570\u636e\u3002)\r\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\uff0cAMDGPU\u5185\u6838\u56fe\u5f62\u9a71\u52a8\u7a0b\u5e8f\u5927\u7ea6\u6709200\u591a\u4e07\u884c\u4ee3\u7801\uff0c\u4f7f\u5176\u6210\u4e3a\u6700\u5927\u7684\u6811\u5185\u5185\u6838\u9a71\u52a8\u7a0b\u5e8f\u3002\u5728Linux5.9\u4e2d\uff0c\u5b83\u6709216\u4e07\u884c\u4ee3\u7801\uff0c\u53e6\u5916\u8fd8\u6709247k\u884c\u4ee3\u7801\u6ce8\u91ca\u548c109k\u7a7a\u884c\u2026\u2026\u3002\u6216\u591a\u8fbe251\u4e07\u884c\u4ee3\u7801\u662fAMD DRM\u9a71\u52a8\u7a0b\u5e8f\u4ee3\u7801\uff0c\u5305\u62ecAMDKFD\u3001POWERPLAY\u3001DC\u4ee5\u53ca\u6700\u7ec8\u6784\u6210\u8be5\u9a71\u52a8\u7a0b\u5e8f\u4e0a\u7684AMD RADEON\u652f\u6301\u7684\u6240\u6709\u5185\u6838\u4ee3\u7801(\u4f46\u4e0d\u662f\u8f83\u65e7\u7684RADEON DRM\u9a71\u52a8\u7a0b\u5e8f--\u8be5\u8f83\u65e7\u7684RADEON\u9a71\u52a8\u7a0b\u5e8f\u7684\u4ee3\u7801\u884c\u6570\u7ea6\u4e3a157K)\u3002\r\u5c3d\u7ba1\u5982\u5148\u524d\u6240\u8ff0\uff0c\u7531\u4e8eGPU\u5bc4\u5b58\u5668\u7b49\u7684\u81ea\u52a8\u751f\u6210\u7684\u5934\u6587\u4ef6\u7b49\u539f\u56e0\uff0c\u8bb8\u591aAMDGPU\u9a71\u52a8\u7a0b\u5e8f\u4ee3\u7801\u57fa\u6570\u5982\u6b64\u4e4b\u5927\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5728Linux 5.9 for AMDGPU\u4e2d\uff0c179\u4e07\u884c\u4ec5\u4ec5\u662f\u4e3b\u8981\u81ea\u52a8\u751f\u6210\u7684\u5934\u6587\u4ef6\u3002\u5728271\u4e07\u884c\u5b9e\u9645\u7684C\u4ee3\u7801\u4e2d\uff0c\u5b83\u6709366K\u884c\u3002\r1471\u4e2a\u6587\u672c\u6587\u4ef6\u3002\r1470\u4e2a\u72ec\u7279\u7684\u6587\u4ef6\u3002\u5ffd\u7565\u4e865\u4e2a\u6587\u4ef6\u3002\r\rGithub.com/aldanial/cloc v1.82T=6.85s(214.1\u4e2a\u6587\u4ef6/\u79d2\uff0c367938.0\u7ebf/\u79d2)\r-\r\u8bed\u8a00\u6587\u4ef6\u7a7a\u767d\u6ce8\u91ca\u4ee3\u7801\r\u3002\rC/C++\u6807\u9898927 39761 195391 1794207\rC501 68528 50377 366823\r\u5927\u4f1a3557 408 1909\r\u81f4\u753535 276 906 636\r-\r\u603b\u6570\uff1a1,466 109122 247082 2163575\u3002\n\u4e3a\u4e86\u8fdb\u884cGPU\u9a71\u52a8\u7a0b\u5e8f\u5927\u5c0f\u6bd4\u8f83\uff0c\u82f1\u7279\u5c14i915&34\uff1b\u5185\u6838\u9a71\u52a8\u7a0b\u5e8f\u5728Linux 5.9\u4e0a\u652f\u6301\u65e7\u7248i915\u663e\u5361\u81f3Gen12/Xe\u663e\u5361\uff0c\u4ee3\u7801\u884c\u6570\u4e3a209k\uff0c\u53e6\u5916\u8fd8\u670939.2k\u884c\u6ce8\u91ca\u548c48k\u7a7a\u884c\u3002\r529\u4e2a\u6587\u672c\u6587\u4ef6\u3002\r528\u4e2a\u552f\u4e00\u6587\u4ef6\u3002\u5df2\u5ffd\u75656\u4e2a\u6587\u4ef6\u3002\r\rGithub.com/aldanial/cloc v1.82T=0.72s(728.7\u4e2a\u6587\u4ef6/\u79d2\uff0c413015.9\u7ebf/\u79d2)\r-\r\u8bed\u8a00\u6587\u4ef6\u7a7a\u767d\u6ce8\u91ca\u4ee3\u7801\r\u3002\rC281 42116 31405 180728\rC/C++\u6807\u593423859207719 27974\r\u5236\u90202 23 29 260\r\u7ec4\u4ef62 28 94 114\r-\u3002--\r\u603b\u6570\uff1a523 48087 39247 209076\r-\u3002\n\u6216\u8005\uff0c\u5c31\u5f00\u6e90\u7684NVIDIA&#34\uff1bNouveau&34\uff1b\u9a71\u52a8\u7a0b\u5e8f\u800c\u8a00\uff0c\u5b83\u53ea\u6709149K\u884c\u4ee3\u7801\u300125.6K\u884c\u6ce8\u91ca\u548c19.9K\u884c\u7a7a\u767d\u3002\r\u5bf9\u4e8e\u90a3\u4e9b\u60f3\u77e5\u9053\u5f53\u524dAMDGPU\u5185\u6838\u9a71\u52a8\u7a0b\u5e8f\u7684\u5927\u5c0f\u4e0e\u4e3b\u7ebfLinux5.9\u5185\u6838\u7684\u6574\u4f53\u5927\u5c0f\u76f8\u5173\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e9b\u662f\u6700\u65b0\u7684\u6570\u5b57\u3002\u663e\u7136\uff0c\u8bf7\u8bb0\u4f4f\uff0c\u8fd9\u4e9b\u6307\u6807\u53ea\u662f\u9488\u5bf9\u5185\u6838\u7aef\u7684\uff0c\u800c\u4e0d\u662f\u9488\u5bf9\u7528\u6237\u7a7a\u95f4OpenGL/Vulkan\u548c\u8ba1\u7b97\u7ec4\u4ef6\u7684\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4e00\u65e6\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u5c0f\u65f6\u5185\u4f5c\u4e3a\u7a33\u5b9a\u7248\u672c\u53d1\u5e03\uff0c\u5c06\u4f1a\u6709\u5f88\u591a\u4f1f\u5927\u7684Linux5.9\u5185\u6838\u7279\u6027\u503c\u5f97\u4eab\u53d7\u3002", "note_en": "Given the impending release of  Linux 5.9, I was having some fun with  cloc today looking at the current lines of code count for this near-final Linux 5.9 kernel state.\r   As of today in Linux 5.9 Git, the kernel is about 20.49 million lines of code plus another 3.58 million lines of code comments and another 3.72 million blank lines. Or all in, Linux 5.9 comes in at roughly 27.81 million lines distributed among some fifty-nine thousand source files.\r  69964 text files.\r 69494 unique files. \r 10737 files ignored.\r\rgithub.com/AlDanial/cloc v 1.82 T=95.88 s (618.0 files/s, 290045.7 lines/s)\r------------------------------------------------------------------------------\rLanguage files blank comment code\r------------------------------------------------------------------------------\rC 29198 2900014 2367000 14781314\rC/C++ Header 21123 588426 1022774 4640918\rreStructuredText 2685 135238 59051 369738\rAssembly 1275 45960 99012 225085\rJSON 287 0 0 165799\rYAML 1089 18494 4966 83627\rBourne Shell 657 16823 11350 66043\rmake 2592 9808 10864 44192\rSVG 59 118 1365 37555\rPerl 60 6686 4767 34393\rPython 123 5345 4804 27720\ryacc 9 695 354 4755\rPO File 5 791 918 3077\rlex 9 349 304 2130\rC++ 10 345 134 1993\rBourne Again Shell 52 338 297 1750\rawk 10 139 116 1051\rGlade 1 58 0 603\rNAnt script 2 143 0 549\rCucumber 1 28 50 175\rWindows Module Definition 2 15 0 109\rm4 1 15 1 95\rCSS 1 28 29 80\rXSLT 5 13 26 61\rvim script 1 3 12 27\rRuby 1 4 0 25\rINI 1 1 0 6\rsed 1 2 5 5\r------------------------------------------------------------------------------\rSUM: 59260 3729879 3588199 20492875\r------------------------------------------------------------------------------\n  \r(Keep in mind the kernel source tree also has various tools, the build system, and plenty of documentation and the like that explains for some of the cloc data that may otherwise seem rather peculiar.)\r   For a while now the AMDGPU kernel graphics driver has been around 2+ million lines of code making it the largest in-tree kernel driver. With Linux 5.9, it comes in at 2.16 million lines of code plus another 247k lines of code comments and another 109k blank lines... Or up to 2.51 million lines of code is the AMD DRM driver code including AMDKFD, PowerPlay, DC, and all the kernel code ultimately making up the AMD Radeon support on that driver (but not the older Radeon DRM driver -- that older Radeon driver is at around 157k lines of code).\r   Though as reported previously, much of the AMDGPU driver code base is so large because of auto-generated header files for GPU registers, etc. In fact, 1.79 million lines as of Linux 5.9 for AMDGPU is simply header files that are predominantly auto-generated. It&#39;s 366k lines of the 2.71 million lines of code that is actual C code.\r  1471 text files.\r 1470 unique files. \r 5 files ignored.\r\rgithub.com/AlDanial/cloc v 1.82 T=6.85 s (214.1 files/s, 367938.0 lines/s)\r---------------------------------------------------------------------\rLanguage files blank comment code\r---------------------------------------------------------------------\rC/C++ Header 927 39761 195391 1794207\rC 501 68528 50377 366823\rAssembly 3 557 408 1909\rmake 35 276 906 636\r---------------------------------------------------------------------\rSUM: 1466 109122 247082 2163575\n  For GPU driver size comparison, the Intel &#34;i915&#34; kernel driver supporting form old i915 graphics through Gen12 / Xe Graphics with Linux 5.9 is at 209k lines of code with another 39.2k lines of comments and 48k blank lines.\r  529 text files.\r 528 unique files. \r 6 files ignored.\r\rgithub.com/AlDanial/cloc v 1.82 T=0.72 s (728.7 files/s, 413015.9 lines/s)\r----------------------------------------------------------------------\rLanguage files blank comment code\r----------------------------------------------------------------------\rC 281 42116 31405 180728\rC/C++ Header 238 5920 7719 27974\rmake 2 23 29 260\rAssembly 2 28 94 114\r----------------------------------------------------------------------\rSUM: 523 48087 39247 209076\r----------------------------------------------------------------------\n  Or in the case of the open-source NVIDIA &#34;Nouveau&#34; driver is just 149k lines of code, 25.6k lines of comments, and another 19.9k blank lines.\r   Those are the latest numbers for those wondering about the current size of the AMDGPU kernel driver in relation to the overall size of the mainline Linux 5.9 kernel. Obviously keep in mind these metrics are simply for the kernel side and not the user-space OpenGL/Vulkan and compute components.  In any case, there are  lots of great Linux 5.9 kernel features to enjoy once released as stable in the coming hours.", "posttime": "2020-10-12 07:06:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u7a0b\u5e8f,radeon,\u4ee3\u7801", "title": "AMD Radeon\u56fe\u5f62\u9a71\u52a8\u7a0b\u5e8f\u7ea6\u5360Linux\u5185\u6838\u768410.5%", "title_en": "The AMD Radeon Graphics Driver Makes Up Roughly 10.5% of the Linux Kernel", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Linux-5.9-AMDGPU-Stats", "via": "", "real_tags": ["linux", "\u7a0b\u5e8f", "radeon", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028194, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u56de\u5230\u201c\u7f16\u8bd1Lisp\u201d\u7cfb\u5217\u3002\u4e0a\u6b21\u6211\u4eec\u6dfb\u52a0\u4e86\u5bf9IF\u8868\u8fbe\u5f0f\u7684\u652f\u6301\u3002\u8fd9\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u5bf9\u57fa\u672c\u5806\u5206\u914d\u7684\u652f\u6301\u3002\n\u5806\u5206\u914d\u6709\u51e0\u79cd\u5f62\u5f0f\uff0c\u4f46\u6211\u4eec\u73b0\u5728\u5173\u5fc3\u7684\u662fcons\u539f\u8bed\u3002\u4e0e\u7f16\u8bd1\u5668\u4e2d\u7684AST_NEW_Pair\u975e\u5e38\u7c7b\u4f3c\uff0cconsout\u5e94\u8be5\uff1a\n\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u90a3\u4e00\u5bf9\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u67e5\u770b\u5b83\u7684\u6570\u636e\u4e86\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u73b0\u5728\u53ef\u80fd\u8fd8\u5e94\u8be5\u5b9e\u73b0CAR\u548cCDR\u539f\u59cb\u51fd\u6570\u3002\n\u4e3a\u4e86\u751f\u6210\u6253\u5305\u548c\u62c6\u5206\u5bf9\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u80fd\u5e94\u8be5\u77e5\u9053\u5b83\u4eec\u5728\u5185\u5b58\u4e2d\u662f\u5982\u4f55\u5e03\u5c40\u7684\u3002\nPair\u5305\u542b\u4e24\u4e2a\u5e76\u6392\u7684\u5143\u7d20-\u6709\u70b9\u50cf\u4e00\u4e2a\u4e24\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u7b2c\u4e00\u4e2a\u5143\u7d20(Pair[0])\u662f\u6c7d\u8f66\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20(Pair[1])\u662fCDR\u3002\n\u672a\u6807\u8bb0\u7684\u6307\u9488\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u800c\u6807\u8bb0\u6307\u9488\u6709\u4e00\u4e9b\u989d\u5916\u4fe1\u606f(kPairTag==1)\uff0c\u6211\u4eec\u9700\u8981\u83b7\u53d6ridof\u6765\u68c0\u67e5\u8fd9\u4e9b\u5143\u7d20\u3002\u5982\u679c\u4e0d\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u4ece\u6307\u9488\u540e\u9762\u7684\u4e00\u4e2a\u5b57\u8282\u5f00\u59cb\u8bfb\u53d6\uff0c\u4e5f\u5c31\u662f\u5728\u8f66\u4e2d\u95f4\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u8fd9\u4f1a\u7ed9\u6211\u4eec\u63d0\u4f9b\u9519\u8bef\u7684\u6570\u636e\u3002\n\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u66f4\u5177\u4f53\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u914d\u5bf9\u5206\u914d\u4e3a0x10000\u3002\u6211\u4eec\u7684\u6c7d\u8f66\u4f4d\u4e8e*(0x10000)(\u4f7f\u7528C\u8868\u793a\u6cd5)\uff0cCDR\u4f4d\u4e8e*(0x10000+kWordSize)\u3002\u672c\u4f8b\u4e2d\u7684\u6807\u8bb0\u6307\u9488\u4e3a0x10001\uff0ckWordSize\u4e3a8\u3002\n\u65e0\u8bba\u4f55\u65f6\u9700\u8981\u65b0\u5bf9\u8c61\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u8c03\u7528malloc\u3002\u8fd9\u5e26\u6765\u4e86\u4e00\u7cfb\u5217\u95ee\u9898\uff0c\u7279\u522b\u662fmalloc\u505a\u4e86\u5f88\u591a\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9700\u8981\u7684\u5185\u90e8\u8bb0\u8d26\u5de5\u4f5c\uff0c\u5e76\u4e14\u6ca1\u6709\u597d\u7684\u65b9\u6cd5\u6765\u8ddf\u8e2a\u6211\u4eec\u5206\u914d\u4e86\u54ea\u4e9b\u5185\u5b58\u5e76\u4e14\u9700\u8981\u5783\u573e\u6536\u96c6(\u6211\u4eec\u7a0d\u540e\u4f1a\u5904\u7406)\u3002\u5b83\u8fd8\u6709\u4e00\u4e2a\u4e0d\u5e78\u7684\u5c5e\u6027\uff0c\u9700\u8981C\u51fd\u6570\u8c03\u7528\u57fa\u7840\u8bbe\u65bd\uff0c\u8fd9\u662f\u6211\u4eec\u8fd8\u6ca1\u6709\u7684\u3002\n\u76f8\u53cd\uff0c\u6211\u4eec\u8981\u505a\u7684\u662f\u5728\u8fdb\u7a0b\u5f00\u59cb\u65f6\u5206\u914d\u4e00\u5927\u5757\u5185\u5b58\u3002\u90a3\u5c06\u662f\u6211\u4eec\u7684\u4e00\u5927\u5806\u3002\u7136\u540e\uff0c\u4e3a\u4e86\u8ddf\u8e2a\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u4e86\u54ea\u4e9b\u5185\u5b58\uff0c\u6211\u4eec\u5c06\u5728\u6bcf\u6b21\u5206\u914d\u65f6\u649e\u51fb\u6307\u9488\u3002\u56e0\u6b64\uff0c\u5728\u6211\u4eec\u5206\u914d\u4e00\u5bf9\u4e4b\u524d\uff0c\u5806\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u7a7a\u5355\u5143\u683c\u4e0d\u4e00\u5b9a\u662f\u7a7a\u7684\uff0c\u4f46\u5b83\u4eec\u662f\u672a\u4f7f\u7528\u7684\uff0c\u5e76\u4e14\u5b83\u4eec\u4e0e\u6570\u636e\u6709\u5173\u3002\n\u6ce8\u610f\u5806\u6307\u9488\u662f\u5982\u4f55\u79fb\u52a8\u52302\u4e2a\u5b57\u4e0a\u7684\uff0c\u800c\u6210\u5bf9\u6307\u9488\u662f\u8fd4\u56de\u7684cons\u5355\u5143\u683c\u3002\u867d\u7136\u6211\u4eec\u5c06\u6807\u8bb0\u6210\u5bf9\u6307\u9488\uff0c\u4f46\u4e3a\u4e86\u5728\u56fe\u4e2d\u6e05\u6670\u8d77\u89c1\uff0c\u6211\u5c06\u5176\u6307\u5411\u6c7d\u8f66\u7684\u5f00\u5934\u3002\n\u4e3a\u4e86\u9996\u5148\u83b7\u5f97\u8fd9\u4e00\u5927\u5757\u5185\u5b58\uff0c\u6211\u4eec\u5c06\u8ba9\u5916\u90e8C\u4ee3\u7801(\u73b0\u5728\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6d4b\u8bd5\u5904\u7406\u7a0b\u5e8f)\u8c03\u7528malloc\u3002\n\u60a8\u53ef\u80fd\u5728\u60f3\uff0c\u5f53\u5185\u5b58\u7528\u5b8c\u65f6\uff0c\u6211\u4eec\u8be5\u600e\u4e48\u529e\u3002\u5728\u672c\u7cfb\u5217\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u5c06\u62e5\u6709\u4e00\u4e2a\u5783\u573e\u6536\u96c6\u5668\uff0c\u5b83\u53ef\u4ee5\u4e3a\u6211\u4eec\u56de\u6536\u4e00\u4e9b\u7a7a\u95f4\u3002\u4e0d\u8fc7\uff0c\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u2026\u3002\u6ca1\u4ec0\u4e48\u3002\u6ca1\u9519\uff0c\u6211\u4eec\u751a\u81f3\u4e0d\u4f1a\u5f15\u53d1\u67d0\u79cd\u201c\u5185\u5b58\u4e0d\u8db3\u201d\u9519\u8bef\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u9519\u8bef\u62a5\u544a\u529f\u80fd\uff01\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u4f7f\u7528Valgrind\u548cAddressSaniizer\u7b49\u5de5\u5177\u6765\u786e\u4fdd\u6ca1\u6709\u8d85\u51fa\u5206\u914d\u7684\u7f13\u51b2\u533a\u3002\n\u4e3a\u4e86\u5feb\u901f\u65b9\u4fbf\u5730\u4ece\u90a3\u4e48\u5927\u7684\u7f13\u51b2\u533a\u8fdb\u884c\u5206\u914d\uff0c\u6211\u4eec\u5c06\u5806\u6307\u9488\u4fdd\u5b58\u5728\u4e00\u4e2a\u5bc4\u5b58\u5668\u4e2d\u3002\u6211\u4eec\u7684\u7f16\u8bd1\u5668\u53d1\u51fa\u4f7f\u7528RBP\u3001RSP\u548cRIX\u7684\u6307\u4ee4\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u53e6\u4e00\u4e2a\u6307\u4ee4\u3002Ghuloum\u4f7f\u7528RSI\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u5c06\u4f7f\u7528\u5b83\u3002\n\u4e3a\u4e86\u9996\u5148\u83b7\u5f97RSI\u4e2d\u7684\u5806\u6307\u9488\uff0c\u6211\u4eec\u5fc5\u987b\u4ece\u5916\u90e8C\u4ee3\u7801\u6355\u83b7\u5b83\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4fee\u6539\u51fd\u6570prologue\u5411\u5165\u53e3\u70b9\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\u3002\n\u8fd8\u8bb0\u5f97JitFunction\u5417\uff1f\u8fd9\u5c31\u662fC\u4ee3\u7801\u7528\u6765\u7406\u89e3\u5982\u4f55\u8c03\u7528\u6211\u4eec\u7684mmap-ed\u51fd\u6570\u7684\u5730\u65b9\u3002\u6211\u4eec\u9700\u8981\u5148\u4fee\u6539\u8fd9\u4e2a\u3002\n\u73b0\u5728\u9700\u8981\u63a5\u53d7\u4e00\u4e2a\u65b0\u53c2\u6570-\u6307\u5411\u5806\u7684\u6307\u9488\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684kFunctionPrologue\u9700\u8981\u5728\u8c03\u7528\u7ea6\u5b9a\u4e2d\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u5bc4\u5b58\u5668\u4e2d\u83b7\u53d6\u8be5\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u5b89\u5168\u7684\u5730\u65b9\u3002\u8fd9\u4e2a\u5bc4\u5b58\u5668\u662fRDI\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u51fa\u4e00\u4e2amov rsi\uff0crdi\u6765\u5b58\u50a8\u6211\u4eec\u7684\u5806\u6307\u9488\u3002\n\u73b0\u5728\uff0c\u5bf9\u4e8eLisp\u5165\u53e3\u70b9\u7684\u751f\u5b58\u671f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u540d\u79f0RSI\u6765\u5f15\u7528\u5806\u5e76\u76f8\u5e94\u5730\u4fee\u6539\u5b83\u3002\u6211\u4eec\u5c06\u4fdd\u6301\u4e00\u4e2a\u5185\u90e8\u7ea6\u5b9a\uff0c\u5373RSI\u59cb\u7ec8\u6307\u5411\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u5185\u5b58\u5757\u3002\n\u60f3\u8981\u5206\u914d\u5185\u5b58\u5417\uff1f\u5c06\u5f53\u524d\u5806\u6307\u9488\u590d\u5236\u5230rax\u4e2d\uff0c\u5e76\u4f7f\u7528add rsi\uff0callocationSize\u66f4\u65b0\u5806\u6307\u9488\u3002\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u7528\u4e8e\u5728\u5bc4\u5b58\u5668\u4e4b\u95f4\u79fb\u52a8\u6570\u636e\u7684\u65b0\u7ed3\u6784\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u6709\u70b9\u60ca\u8bb6\u6211\u4eec\u73b0\u5728\u8fd8\u4e0d\u9700\u8981\u90a3\u4e2a\u3002\n\u60f3\u628a\u4f60\u7684\u8f66\u548cCDR\u653e\u5728\u4f60\u7684\u65b0\u8f66\u91cc\u5417\uff1f\u5206\u522b\u5199\u5165rax\u7684\u504f\u79fb\u91cf0\u548ckWordSize\u3002\u6211\u4eec\u5c06\u91cd\u7528\u6211\u4eec\u7684\u95f4\u63a5\u5b58\u50a8\u6307\u4ee4\u3002\n\u8981\u6807\u8bb0\u60a8\u7684\u6307\u9488\u5417\uff1f\u6dfb\u52a0rax\uff0c\u6807\u7b7e\u6216\u6216rax\uff0c\u6807\u7b7e\u3002\u8fd9\u4e24\u6761\u6307\u4ee4\u662f\u7b49\u4ef7\u7684\uff0c\u56e0\u4e3a\u5806\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u4e09\u4e2a\u53ef\u6807\u8bb0\u4f4d\u90fd\u5c06\u4e3a\u96f6\u3002\n\u8fd9\u79cd\u5355\u8bcd\u5bf9\u9f50\u73b0\u5728\u5f88\u5bb9\u6613\u7ef4\u62a4\uff0c\u56e0\u4e3a\u6240\u6709\u5bf9\u7684\u5927\u5c0f\u90fd\u662f16\uff0c\u662f8\u7684\u500d\u6570\u3002\u7a0d\u540e\uff0c\u5f53\u6211\u4eec\u6dfb\u52a0\u7b26\u53f7\u3001\u5b57\u7b26\u4e32\u548c\u5176\u4ed6\u5305\u542b\u975e\u5bf9\u8c61\u6570\u636e\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u5728\u5206\u914d\u4e4b\u95f4\u63d2\u5165\u586b\u5145\u4ee5\u4fdd\u6301\u5bf9\u9f50\u4e0d\u53d8\u3002\n\u4e00\u65e6\u6211\u4eec\u5206\u914d\u4e86\u5bf9\uff0c\u9664\u975e\u6211\u4eec\u4e5f\u80fd\u6233\u5230\u5b83\u4eec\u7684\u5143\u7d20\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u4ec0\u4e48\u7528\u4e86\u3002\n\u8981\u5b9e\u73b0CAR\uff0c\u6211\u4eec\u5c06\u4ece\u6307\u9488\u4e2d\u5220\u9664\u6807\u8bb0\uff0c\u5e76\u4ece\u5bc4\u5b58\u5668\u6307\u5411\u7684\u5185\u5b58\u4e2d\u8bfb\u53d6\uff1aMOV rax\uff0c[ptr+car-tag]\u3002\u4f60\u4e5f\u53ef\u4ee5\u7528subrax\uff0ctag\uff0c\u7136\u540e\u662fmov\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u60f3\u597d\u4e86\u95ee\u9898\u7684\u62bd\u8c61\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u5c31\u5e94\u8be5\u7f16\u5199\u4e00\u4e9b\u4ee3\u7801\u3002\nINT COMPILE_CALL(Buffer*buf\uff0cASTNode*Callable\uff0cASTNode*args\uff0cWORD STACK_INDEX\uff0cEnv*varenv){if(AST_IS_Symbol(Callable)){//...\u3002If(AST_Symbol_Matches(Callable\uff0c&#34\uff1bcons&#34\uff1b)){return build_cons(buf\uff0c/*car=*/operand1(Args)\uff0c/*cdr=*/operand2(Args)\uff0cstack_index\uff0cvarenv)\uff1b}//...}}\u3002\n\u6211\u4eec\u771f\u7684\u4e0d\u9700\u8981\u4e3acons\u6dfb\u52a0\u4e00\u4e2a\u5168\u65b0\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u6211\u4eec\u6ca1\u6709\u5bf9\u53c2\u6570\u6216\u4efb\u4f55\u4e1c\u897f\u8fdb\u884c\u7ed3\u6784\u9012\u5f52\uff0c\u4f46\u662fCompile_callust\u53d8\u5f97\u8d8a\u6765\u8d8a\u5927\uff0c\u8fd9\u6709\u52a9\u4e8e\u4f7f\u5b83\u53d8\u5f97\u66f4\u5c0f\u3002\nCOMPILE_CONS\u4e0e\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u51e0\u4e4e\u5b8c\u5168\u76f8\u540c\u3002\u6211\u5c06RSI\u62c9\u5230\u4e86kHeapPointer\u4e2d\uff0c\u8fd9\u6837\u6211\u4eec\u4ee5\u540e\u5c31\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u66f4\u6539\u5b83\u3002\nConst\u5bc4\u5b58\u5668kHeapPointer=kRsi\uff1bint\u7f16\u8bd1_cons(buffer*buf\uff0cASTNode*car\uff0cASTNode*cdr\uff0cint stack_index\uff0cenv*varenv){//\u7f16\u8bd1\u5e76\u5b58\u50a8car_(build_expr(buf\uff0ccar\uff0cstack_index\uff0cvarenv))\uff1bemit_store_reg_direct(buf\uff0c/*dst=*/ind(kHeapPointer\uff0ckCarOffset)\uff0c/*src=*/kRax)\uff1b//\u7f16\u8bd1\u5e76\u5b58\u50a8Cdr_(Compile_expr(buf\uff0ccdr\uff0cstack_index\uff0cvarenv))\uff1bemit_store_reg_direct(buf\uff0c/*dst=*/ind(kHeapPointer\uff0ckCdrOffset)\uff0c/*src=*/kRax)\uff1b//\u5728rax\u4e2d\u5b58\u50a8\u5e26\u6807\u7b7e\u7684\u6307\u9488emit_mov_reg_reg(buf\uff0c/*dst=*/krax\uff0c/*src=*/kHeapPointer)\uff1bemit_or_reg_imm8(buf\uff0c/*dst=*/kRax\uff0ckPairTag)\uff1b//\u649e\u51fb\u5806\u6307\u9488emit_add_reg_imm32(buf\uff0c/*dst=*/kHeapPointer\uff0ckPairSize)\uff1b\u8fd4\u56de0\uff1b}\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5373\u4f7f\u6211\u4eec\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u7f16\u8bd1\u4e24\u4e2a\u8868\u8fbe\u5f0f\uff0c\u6211\u4eec\u4e5f\u4e0d\u9700\u8981\u8f6c\u50a8STACK_INDEX\u6216\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u4e0d\u662f\u5728\u5806\u6808\u4e0a\u5b58\u50a8\u7ed3\u679c\uff0c\u800c\u662f\u5728\u5bf9\u4e2d\u5b58\u50a8\u7ed3\u679c\u3002\nVoid emit_mov_reg_reg(buffer*buf\uff0cRegister dst\uff0cRegister src){buffer_write8(buf\uff0ckRexPrefix)\uff1bbuffer_write8(buf\uff0c0x89)\uff1bbuffer_write8(buf\uff0c0xc0+src*8+dst)\uff1b}\u3002\n\u597d\u7684\uff0c\u8fd9\u5c31\u662f\u7f3a\u70b9\u3002\u8ba9\u6211\u4eec\u5b9e\u73b0CAR\u548cCDR\u3002\u8fd9\u4e9b\u90fd\u662f\u975e\u5e38\u7b80\u77ed\u7684\u5b9e\u73b0\uff1a\nINT COMPILE_CALL(Buffer*buf\uff0cASTNode*Callable\uff0cASTNode*args\uff0cWORD STACK_INDEX\uff0cEnv*varenv){if(AST_IS_Symbol(Callable)){//...\u3002If(AST_Symbol_Matches(Callable\uff0c&#34\uff1bcar&#34\uff1b)){_(COMPILE_EXPR(buf\uff0coperand1(Args)\uff0cSTACK_INDEX\uff0cvarenv))\uff1bemit_load_reg_direct(buf\uff0c/*dst=*/kRax\uff0c/*src=*/Ind(kRax\uff0ckCarOffset-kPairTag))\uff1breturn 0\uff1b}if(AST_Symbol_Matches(Callable\uff0c&#34\uff1bCdr&#34\uff1b)){_(Compile_expr(buf\uff0coperand1(Args)\uff0cstack_index\uff0cvarenv))\uff1bemit_load_reg_direct(buf\uff0c/*dst=*/kRax\uff0c/*src=*/ind(kRax\uff0ckCdrOffset-kPairTag))\uff1b\u8fd4\u56de0\uff1b}//...}}\u3002\n\u5c31\u8fd9\u6837\u3002\u8fd9\u5c31\u662f\u6574\u4e2a\u5b9e\u73b0\uff01\u73b0\u5728\u6211\u4eec\u6709\u4e86\u8fd9\u4e9b\u6784\u5efa\u5757\uff0c\u6dfb\u52a0\u65b0\u529f\u80fd\u5e76\u4e0d\u662f\u90a3\u4e48\u56f0\u96be\uff0c\u8fd9\u662f\u4e00\u4ef6\u5f88\u597d\u7684\u4e8b\u60c5\u3002\n\u6211\u5df2\u7ecf\u4e3a\u8fd9\u4e2a\u5b9e\u73b0\u7f16\u5199\u4e86\u51e0\u4e2a\u6d4b\u8bd5\u3002\u4e3a\u4e86\u4f7f\u6d4b\u8bd5\u53d8\u5f97\u8f7b\u677e\uff0c\u6211\u8fd8\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u7c7b\u578b\u7684\u6d4b\u8bd5\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u4f20\u9012\u6d4b\u8bd5\u4e00\u4e2a\u7f13\u51b2\u533a\u548c\u4e00\u4e2a\u5806\u3002\u6211\u5c06\u5176\u547d\u540d\u4e3a-\u7b49\u5f85\u5b83-runheap_test\u3002\n\u4e0d\u7ba1\u600e\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u6211\u4eec\u53ef\u4ee5\u5206\u914d\u5bf9\u7684\u6d4b\u8bd5\u3002\u4e3a\u4e86\u5168\u9762\u6d4b\u8bd5\u5b83\uff0c\u6211\u6dfb\u52a0\u4e86\u4e00\u4e9b\u7528\u4e8e\u68c0\u67e5\u5bf9\u8c61\u5185\u90e8\u7684\u5e2e\u52a9\u5668\uff1aOBJECT_Pair_Car\u548cOBJECT_Pair_Cdr\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ef\u80fd\u4e0e\u76f8\u5e94\u7684AST\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u4e0d\u4e00\u5b9a\u76f8\u540c\u3002\u6211\u8ba4\u4e3a\uff0cC\u7f16\u8bd1\u5668\u53ef\u4ee5\u5047\u8bbe\u5bf9\u7ed3\u6784\u5143\u7d20\u91cd\u65b0\u6392\u5e8f\u3002\nTest build_cons(buffer*buf\uff0cuword*heap){ASTNode*node=Reader_Read(&#34\uff1b(Cons 1 2)&#34\uff1b)\uff1bint Compile_Result=COMPILE_ENTRY(buf\uff0cnode)\uff1bASSERT_EQ(COMPILE_RESULT\uff0c0)\uff1b//clang-\u8981\u6c42\u7684\u683c\u5f0f\u5173\u95ed\u5b57\u8282[]={//mov rax\uff0c0x2 0x48\uff0c0xc7\uff0c0xc0\uff0c0x04\uff0c0x00\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi]\uff0crax 0x48\uff0c0x89\uff0c0x46\uff0c0x00\uff0c//mov rax\uff0c0x4 0x48\uff0c0xc7\uff0c0xc0\uff0c0x08\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi+kWordSize]\uff0crax 0x48\uff0c0x89\uff0c0x46\uff0c0x08\uff0c//mov rax\uff0cRSI 0x48\uff0c0x89\uff0c0xf0\uff0c//rax\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi+kWordSize]\uff0crax 0x48\uff0c0x89\uff0c0x08\uff0c//mov rax\uff0cRSI 0x48\uff0c0x89\uff0c0xf0\uff0c//rax\u3002KPairTag 0x48\uff0c0x83\uff0c0xc8\uff0c0x01\uff0c//\u6dfb\u52a0RSI\uff0c2*kWordSize 0x48\uff0c0x81\uff0c0xc6\uff0c0x10\uff0c0x00\uff0c0x00\uff0c0x00\uff0c}\uff1b//clang-format on Expect_ENTRY_CONTAINS_CODE(BUF\uff0cEXPECTED)\uff1bBUFFER_MAKE_EXECUTABLE(BUF)\uff1buWORD RESULT=TESTING_EXECUTE_ENTRY(BUF\uff0cHEAP)\uff1bASSERT(OBJECT_IS_Pair(RESULT))\uff1bASSERT_EQ_FMT(OBJECT_ENCODE_INTEGER(1)\uff0cOBJECT_Pair_CAR(RESULT)\uff0c&#34\uff1b)\uff1bASSERT_EQ_FMT(OBJECT_ENCODE_INTEGER(2)\uff0cOBJECT_Pair_CDR(RESULT)\uff0c&#34\uff1b0x%lx&#34\uff1b)\uff1bAST_HEAP_FREE(\u8282\u70b9)\uff1bPASS()\uff1b}\u3002\n\u8fd9\u662f\u4e00\u4e2a\u9605\u8bfb\u4e00\u5bf9\u6c7d\u8f66\u7684\u6d4b\u8bd5\u3002CDR\u7684\u6d4b\u8bd5\u662f\u5982\u6b64\u76f8\u4f3c\uff0c\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u5305\u62ec\u5b83\u3002\nTest COMPILE_CAR(buffer*buf\uff0cuword*heap){ASTNode*node=Reader_Read(&#34\uff1b(CAR(Cons 1 2))&#34\uff1b)\uff1bint COMPILE_RESULT=COMPILE_ENTRY(buf\uff0cnode)\uff1bASSERT_EQ(COMPILE_RESULT\uff0c0)\uff1b//clang-\u8981\u6c42\u7684\u683c\u5f0f\u5173\u95ed\u5b57\u8282[]={//mov rax\uff0c0x2 0x48\uff0c0xc7\uff0c0xc0\uff0c0x04\uff0c0x00\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi]\uff0crax 0x48\uff0c0x89\uff0c0x46\uff0c0x00\uff0c//mov rax\uff0c0x4 0x48\uff0c0xc7\uff0c0xc0\uff0c0x08\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi+kWordSize]\uff0crax 0x48\uff0c0x89\uff0c0x46\uff0c0x08\uff0c//mov rax\uff0cRSI 0x48\uff0c0x89\uff0c0xf0\uff0c//rax\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov[rsi+kWordSize]\uff0crax 0x48\uff0c0x89\uff0c0x08\uff0c//mov rax\uff0cRSI 0x48\uff0c0x89\uff0c0xf0\uff0c//rax\u3002KPairTag 0x48\uff0c0x83\uff0c0xc8\uff0c0x01\uff0c//\u6dfb\u52a0RSI\uff0c2*kWordSize 0x48\uff0c0x81\uff0c0xc6\uff0c0x10\uff0c0x00\uff0c0x00\uff0c0x00\uff0c//mov rax\uff0c[rax-1]0x48\uff0c0x8b\uff0c0x40\uff0c0xff\uff0c}\uff1b//clang-format on Expect_ENTRY_CONTAINS_CODE(BUF\uff0cEXPECTED)\uff1bBUFFER_MAKE_EXECUTABLE(BUF)\uff1buWORD RESULT=TESTING_EXECUTE_ENTRY(BUF\uff0cHEAP)\uff1bASSERT_EQ_FMT(OBJECT_ENCODE_INTEGER(1)\uff0cRESULT\uff0c&#34\uff1b0x%lx&#34\uff1b)\uff1bAST_HEAP_FREE(\u8282\u70b9)\uff1bPASS()\uff1b}\u3002\n\u6211\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6ca1\u6709\u8ba8\u8bba\u53ef\u53d8\u957f\u5ea6\u7684\u5bf9\u8c61\uff0c\u56e0\u4e3a\u6211\u60f3\u91cd\u70b9\u4ecb\u7ecd\u5206\u914d\u548c\u67e5\u770b\u5df2\u5206\u914d\u6570\u636e\u7ed3\u6784\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u4e0b\u4e00\u6b21\uff0c\u6211\u4eec\u5c06\u6dfb\u52a0\u7b26\u53f7\u548c\u5b57\u7b26\u4e32\u3002", "note_en": "Welcome back to the \u201cCompiling a Lisp\u201d series. Last time we added support for if expressions. This time we\u2019re going add support for basic heap allocation.\n Heap allocation comes in a couple of forms, but the one we care about right nowis the  cons primitive. Much like  AST_new_pair in the compiler,  consshould:\n  Once we have that pair, we\u2019ll want to poke at its data. This means we shouldprobably also implement  car and  cdr primitive functions today.\n  In order to generate code for packing and pulling apart pairs, we shouldprobably know how they are laid out in memory.\n Pairs contain two elements, side by side \u2014 kind of like a two-element array.The first element ( pair[0]) is the  car and the second one ( pair[1]) isthe  cdr.\n  The untagged pointer points to the address of the first element, and the taggedpointer has some extra information ( kPairTag ==  1) that we need to get ridof to inspect the elements. If we don\u2019t, we\u2019ll try and read from one byte afterthe pointer, somewhere in the middle of the  car. This will give us bad data.\n To make things more concrete, imagine our pair is allocated at  0x10000. Our car lives at  *(0x10000) (using C notation) and our  cdr lives at *(0x10000 + kWordSize). The tagged pointer in this case would be  0x10001and  kWordSize is 8.\n  We  could make a call to  malloc whenever we need a new object. This has acouple of downfalls, notably that  malloc does a lot of internal bookkeepingthat we really don\u2019t need, and that there\u2019s no good way to keep track of whatmemory we have allocated and needs garbage collecting (which we\u2019ll handlelater). It also has the unfortunate property of requiring C functional callinfrastructure, which we don\u2019t have yet.\n What we\u2019re going to do instead is allocate a big slab of memory at thebeginning of our process. That will be our heap. Then, to keep track of whatmemory we have used so far, we\u2019re going to bump the pointer every time weallocate. So here\u2019s what the heap looks like before we allocate a pair:\n  The empty cells aren\u2019t necessarily empty, but they are unused and they aregarbage data.\n   Notice how the  heap pointer has been moved over 2 words, and the  pairpointer is the returned cons cell. Although we\u2019ll tag the  pair pointer, I ampointing it at the beginning of the  car for clarity in the diagram.\n In order to get this big slab of memory in the first place, we\u2019ll have theoutside C code (right now, that\u2019s our test handler) call  malloc.\n You\u2019re probably wondering what we\u2019re going to do when we run out of memory. Atsome point in this series we\u2019ll have a garbage collector that can reclaim somespace for us. Right now, though, we\u2019re just going to do \u2026 nothing. That\u2019sright, we won\u2019t even raise some kind of \u201cout of memory\u201d error. Remember, wedon\u2019t yet have error reporting facilities! Instead, we\u2019ll use tools likeValgrind and AddressSanitizer to make sure we\u2019re not overrunning our allocatedbuffer.\n  In order to make allocation from that big buffer fast and easy, we\u2019re going tokeep the heap pointer in a register. Our compiler emits instructions that use rbp,  rsp, and  rax, so we\u2019ll have to pick another one. Ghuloum uses  rsi,so we\u2019ll use that as well.\n In order to get the heap pointer in  rsi in the first place, we\u2019ll have tocapture it from the outside C code. To do this, we\u2019ll add a parameter to our entrypoint by modifying the function prologue.\n Remember  JitFunction? This is what the C code uses to understand how to callour  mmap-ed function. We\u2019re going to need to modify this first.\n  That\u2019s going to need to take a new parameter now \u2014 a pointer to the heap.This means that our  kFunctionPrologue will need to expect that in the firstparameter register in the calling convention, and store it somewhere safe. Thisregister is  rdi, so we can emit a  mov rsi, rdi to store our heap pointeraway.\n Now, for the lifetime of the Lisp entrypoint, we can refer to the heap by thename  rsi and modify it accordingly. We\u2019ll keep an internal convention that rsi  always points to the next available chunk of memory.\n Want to allocate memory? Copy the current heap pointer into  rax and updatethe heap pointer with  add rsi, AllocationSize. We\u2019ll need to add a newinstruction for moving data between registers. Honestly, I am kind of surprisedwe haven\u2019t needed that yet.\n Want to store your  car and  cdr in your new pair? Write to offset  0 and kWordSize of  rax, respectively. We\u2019ll reuse our indirect store instruction.\n Want to tag your pointer?  add rax, Tag or  or rax, Tag. These twoinstructions are equivalent because all the three taggable bits in a heapobject will be zero.\n This word-alignment is easy to maintain now because all pairs will be size16, which is a multiple of 8. Later on, when we add symbols and strings andother data types that have non-object data in them, we\u2019ll have to insertpadding between allocations to keep the alignment invariant.\n Once we have pairs allocated, it\u2019s kind of useless unless we can also poke attheir elements.\n To implement  car, we\u2019ll remove the tag from the pointer and read from thememory pointed to by the register:  mov rax, [Ptr+Car-Tag]. You can also dothis with a  sub rax, Tag and then a  mov.\n   Now that we\u2019ve gotten our minds around the abstract solution to the problem, weshould write some code.\n  int  Compile_call ( Buffer  * buf ,  ASTNode  * callable ,  ASTNode  * args ,  word  stack_index ,  Env  * varenv )  {  if  ( AST_is_symbol ( callable ))  {  // ...  if  ( AST_symbol_matches ( callable ,  &#34;cons&#34; ))  {  return  Compile_cons ( buf ,  /*car=*/ operand1 ( args ),  /*cdr=*/ operand2 ( args ),  stack_index ,  varenv );  }  // ...  } }\n We don\u2019t  really need to add a whole new function for  cons since we\u2019re notdoing structural recursion on the parameters or anything, but  Compile_calljust keeps getting bigger and this helps keep it smaller.\n Compile_cons is pretty much exactly what I described above. I pulled out rsi into  kHeapPointer so that we can change it later if we need to.\n const  Register  kHeapPointer  =  kRsi ; int  Compile_cons ( Buffer  * buf ,  ASTNode  * car ,  ASTNode  * cdr ,  int  stack_index ,  Env  * varenv )  {  // Compile and store car  _ ( Compile_expr ( buf ,  car ,  stack_index ,  varenv ));  Emit_store_reg_indirect ( buf ,  /*dst=*/ Ind ( kHeapPointer ,  kCarOffset ),  /*src=*/ kRax );  // Compile and store cdr  _ ( Compile_expr ( buf ,  cdr ,  stack_index ,  varenv ));  Emit_store_reg_indirect ( buf ,  /*dst=*/ Ind ( kHeapPointer ,  kCdrOffset ),  /*src=*/ kRax );  // Store tagged pointer in rax  Emit_mov_reg_reg ( buf ,  /*dst=*/ kRax ,  /*src=*/ kHeapPointer );  Emit_or_reg_imm8 ( buf ,  /*dst=*/ kRax ,  kPairTag );  // Bump the heap pointer  Emit_add_reg_imm32 ( buf ,  /*dst=*/ kHeapPointer ,  kPairSize );  return  0 ; }\n Note that even though we\u2019re compiling two expressions one right after another,we don\u2019t need to bump  stack_index or anything. This is because we\u2019re storingthe results not on the stack but in the pair.\n  void  Emit_mov_reg_reg ( Buffer  * buf ,  Register  dst ,  Register  src )  {  Buffer_write8 ( buf ,  kRexPrefix );  Buffer_write8 ( buf ,  0x89 );  Buffer_write8 ( buf ,  0xc0  +  src  *  8  +  dst ); }\n Alright, that\u2019s  cons. Let\u2019s implement  car and  cdr. These areextraordinarily short implementations:\n int  Compile_call ( Buffer  * buf ,  ASTNode  * callable ,  ASTNode  * args ,  word  stack_index ,  Env  * varenv )  {  if  ( AST_is_symbol ( callable ))  {  // ...  if  ( AST_symbol_matches ( callable ,  &#34;car&#34; ))  {  _ ( Compile_expr ( buf ,  operand1 ( args ),  stack_index ,  varenv ));  Emit_load_reg_indirect ( buf ,  /*dst=*/ kRax ,  /*src=*/ Ind ( kRax ,  kCarOffset  -  kPairTag ));  return  0 ;  }  if  ( AST_symbol_matches ( callable ,  &#34;cdr&#34; ))  {  _ ( Compile_expr ( buf ,  operand1 ( args ),  stack_index ,  varenv ));  Emit_load_reg_indirect ( buf ,  /*dst=*/ kRax ,  /*src=*/ Ind ( kRax ,  kCdrOffset  -  kPairTag ));  return  0 ;  }  // ...  } }\n  That\u2019s it. That\u2019s the whole implementation! It\u2019s kind of nice that now we havethese building blocks, adding new features is not so hard.\n  I\u2019ve written a couple of tests for this implementation. In order to make thistesting painless, I\u2019ve also added a new type of test harness that passes thetests a buffer  and a heap. I call it \u2014 wait for it \u2014  RUN_HEAP_TEST.\n Anyway, here\u2019s a test that we can allocate pairs. To fully test it, I\u2019ve addedsome helpers for poking at object internals:  Object_pair_car and Object_pair_cdr. Note that these may be the same as but are not necessarilythe same as the corresponding AST functions. The C compiler couldhypothetically re-order struct elements, I think.\n TEST  compile_cons ( Buffer  * buf ,  uword  * heap )  {  ASTNode  * node  =  Reader_read ( &#34;(cons 1 2)&#34; );  int  compile_result  =  Compile_entry ( buf ,  node );  ASSERT_EQ ( compile_result ,  0 );  // clang-format off  byte  expected []  =  {  // mov rax, 0x2  0x48 ,  0xc7 ,  0xc0 ,  0x04 ,  0x00 ,  0x00 ,  0x00 ,  // mov [rsi], rax  0x48 ,  0x89 ,  0x46 ,  0x00 ,  // mov rax, 0x4  0x48 ,  0xc7 ,  0xc0 ,  0x08 ,  0x00 ,  0x00 ,  0x00 ,  // mov [rsi+kWordSize], rax  0x48 ,  0x89 ,  0x46 ,  0x08 ,  // mov rax, rsi  0x48 ,  0x89 ,  0xf0 ,  // or rax, kPairTag  0x48 ,  0x83 ,  0xc8 ,  0x01 ,  // add rsi, 2*kWordSize  0x48 ,  0x81 ,  0xc6 ,  0x10 ,  0x00 ,  0x00 ,  0x00 ,  };  // clang-format on  EXPECT_ENTRY_CONTAINS_CODE ( buf ,  expected );  Buffer_make_executable ( buf );  uword  result  =  Testing_execute_entry ( buf ,  heap );  ASSERT ( Object_is_pair ( result ));  ASSERT_EQ_FMT ( Object_encode_integer ( 1 ),  Object_pair_car ( result ),  &#34;0x%lx&#34; );  ASSERT_EQ_FMT ( Object_encode_integer ( 2 ),  Object_pair_cdr ( result ),  &#34;0x%lx&#34; );  AST_heap_free ( node );  PASS (); }\n Here\u2019s a test for reading the  car of a pair. The test for  cdr is so similarI will not include it here.\n TEST  compile_car ( Buffer  * buf ,  uword  * heap )  {  ASTNode  * node  =  Reader_read ( &#34;(car (cons 1 2))&#34; );  int  compile_result  =  Compile_entry ( buf ,  node );  ASSERT_EQ ( compile_result ,  0 );  // clang-format off  byte  expected []  =  {  // mov rax, 0x2  0x48 ,  0xc7 ,  0xc0 ,  0x04 ,  0x00 ,  0x00 ,  0x00 ,  // mov [rsi], rax  0x48 ,  0x89 ,  0x46 ,  0x00 ,  // mov rax, 0x4  0x48 ,  0xc7 ,  0xc0 ,  0x08 ,  0x00 ,  0x00 ,  0x00 ,  // mov [rsi+kWordSize], rax  0x48 ,  0x89 ,  0x46 ,  0x08 ,  // mov rax, rsi  0x48 ,  0x89 ,  0xf0 ,  // or rax, kPairTag  0x48 ,  0x83 ,  0xc8 ,  0x01 ,  // add rsi, 2*kWordSize  0x48 ,  0x81 ,  0xc6 ,  0x10 ,  0x00 ,  0x00 ,  0x00 ,  // mov rax, [rax-1]  0x48 ,  0x8b ,  0x40 ,  0xff ,  };  // clang-format on  EXPECT_ENTRY_CONTAINS_CODE ( buf ,  expected );  Buffer_make_executable ( buf );  uword  result  =  Testing_execute_entry ( buf ,  heap );  ASSERT_EQ_FMT ( Object_encode_integer ( 1 ),  result ,  &#34;0x%lx&#34; );  AST_heap_free ( node );  PASS (); }\n  I didn\u2019t cover variable-length objects in this post because I wanted to focuson the basics of allocating and poking at allocated data structures. Next time,we\u2019ll add symbols and strings.", "posttime": "2020-10-12 07:05:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,lisp,buf", "title": "\u5c06Lisp\u7f16\u8bd1\u4e3ax86-64\uff1a\u5806\u5206\u914d", "title_en": "Compiling a Lisp to x86-64: Heap allocation", "transed": 1, "url": "https://bernsteinbear.com/blog/compiling-a-lisp-9/", "via": "", "real_tags": ["\u7f16\u8bd1", "lisp", "buf"]}, {"category": "", "categoryclass": "", "imagename": "912a092b25697a324d72b1cd05ceae1a.png", "infoid": 1028193, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6811\u4e0e\u94fe\u8868\u76f8\u4f3c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u7531\u8282\u70b9\u548c\u94fe\u63a5\u7ec4\u6210\u7684\u3002\u4e0d\u8fc7\uff0c\u4e24\u8005\u4e4b\u95f4\u80af\u5b9a\u6709\u4e00\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002\u8ba9\u6211\u4eec\u6765\u627e\u51fa\u662f\u4ec0\u4e48\u4f7f\u6811\u6210\u4e3a\u6811\u3002\n\u5728\u6211\u4e4b\u524d\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u8ba8\u8bba\u4e86\u6570\u7ec4\u548c\u94fe\u8868\u3002\u6570\u7ec4\u548c\u94fe\u8868\u662f\u975e\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u3002\u5b83\u4eec\u53ea\u80fd\u88ab\u987a\u5e8f\u904d\u5386\u3002\u6811\u6709\u4e00\u70b9\u4e0d\u540c\u3002\u5b83\u4eec\u662f\u975e\u975e\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u3002\u975e\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u4e0d\u50cf\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u90a3\u6837\u662f\u6309\u987a\u5e8f\u7ec4\u7ec7\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u975e\u987a\u5e8f\u904d\u5386\u624d\u662f\u6709\u610f\u4e49\u7684\u3002\n\u4e0d\u8fc7\uff0c\u522b\u62c5\u5fc3\u3002\u8fd9\u7bc7\u6587\u7ae0\u4e0d\u4f1a\u5173\u6ce8\u6811\u6728\u7684\u7a7f\u8d8a\u3002\u76f8\u53cd\uff0c\u8ba9\u6211\u4eec\u786e\u4fdd\u77e5\u9053\u4ec0\u4e48\u662f\u6811\u3002\n\u7236\u8282\u70b9\uff1a\u8fde\u63a5\u5230\u8f83\u4f4e\u7ea7\u522b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8282\u70b9(\u5b50\u8282\u70b9)\u7684\u8282\u70b9\u3002\n\u4f7f\u7528\u4e0a\u56fe\uff0c\u8ba9\u6211\u4eec\u590d\u4e60\u4e00\u4e0b\u6211\u4eec\u521a\u521a\u5b66\u5230\u7684\u4e00\u4e9b\u672f\u8bed\u3002A\u662fR oot\u8282\u70b9\u3002A\u4e5f\u662f\u5b50\u8282\u70b9B\u3001C\u548cD\u7684\u7236\u8282\u70b9\u3002C\u662f\u5b50\u8282\u70b9B\u3001C\u548cD\u7684\u7236\u8282\u70b9\u3002\u8282\u70b9B\u3001C\u548cD\u5171\u4eab\u76f8\u540c\u7684\u7236\u8282\u70b9A\u3002\u8fd9\u4f7f\u5b83\u4eec\u6210\u4e3a\u5144\u5f1f\u8282\u70b9\u3002\u8282\u70b9E\u548cF\u4e5f\u662f\u5144\u5f1f\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6709\u8282\u70b9C\u4f5c\u4e3a\u7236\u8282\u70b9\u3002\u6700\u540e\uff0c\u8282\u70b9B\u3001D\u3001E\u3001E\u3001C\u548cD\u5171\u4eab\u76f8\u540c\u7684\u7236\u8282\u70b9A\u3002\u8fd9\u4f7f\u5b83\u4eec\u6210\u4e3a\u5144\u5f1f\u8282\u70b9\u3002\u5b83\u4eec\u662f\u5144\u5f1f\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6709\u8282\u70b9C\u4f5c\u4e3a\u7236\u8282\u70b9\u3002\u6700\u540e\uff0c\u8282\u70b9B\u3001\u8282\u70b9C\u3001\u8282\u70b9D\u548c\u8282\u70b9F\u5171\u4eab\u76f8\u540c\u7684\u7236\u8282\u70b9A\u3002\u8fd9\u4f7f\u5f97\u5b83\u4eec\u6210\u4e3a\u5144\u5f1f\u8282\u70b9\u3002\u5b83\u4eec\u662f\u5144\u5f1f\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6709\u8282\u70b9C\u4f5c\u4e3a\u7236\u8282\u70b9\u3002\u6700\u540e\uff0c\u8282\u70b9B\u3001\u8282\u70b9C\u3001\u8282\u70b9D\u548c\u8282\u70b9F\u5171\u4eab\u76f8\u540c\u7684\u7236\u8282\u70b9A\u3002\u8fd9\u4f7f\u5f97\u5b83\u4eec\u6210\u4e3a\u5144\u5f1f\u8282\u70b9\u3002\u5b83\u4eec\u662f\u5144\u5f1f\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u90fd\u6709\u8282\u70b9C\u4f5c\u4e3a\u7236\u8282\u70b9\u3002\u548cF\u662f\u53f6\u8282\u70b9\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u4efb\u4f55\u5b50\u8282\u70b9\u3002\n\u8fd9\u91cc\u6709\u51e0\u4e2a\u66f4\u5173\u952e\u7684\u672f\u8bed\uff0c\u5b83\u4eec\u5bf9\u8c08\u8bba\u6811\u6728\u5f88\u6709\u5e2e\u52a9\u3002\n\u5b50\u6811\uff1a\u5b50\u6811\u662f\u4e3b\u6811\u7684\u4e00\u90e8\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u6811\u4e2d\u6311\u9009\u4e00\u4e2a\u8282\u70b9\u3002\u8be5\u8282\u70b9\u548c\u5b83\u4e0b\u9762\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u5b50\u6811\u3002\n\u6df1\u5ea6\uff1a\u8ba1\u7b97\u4e00\u4e2a\u8282\u70b9\u5230\u6839\u8282\u70b9\u7684\u8ddd\u79bb\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u7136\u540e\u8ba1\u7b97\u67d0\u4e2a\u8282\u70b9\u548c\u6839\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u7684\u8fb9\u6570\u3002\n\u9ad8\u5ea6\uff1a\u4ece\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u3002\u8ba1\u7b97\u8be5\u8282\u70b9\u4e0e\u5176\u8ddd\u79bb\u6700\u8fdc\u7684\u53f6\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u7684\u8fb9\u6570\u3002\u8fd9\u5c31\u662f\u9ad8\u5ea6\u3002\n\u4e0a\u56fe\u663e\u793a\u4e86\u4e0d\u540c\u8282\u70b9\u7684\u6df1\u5ea6\u548c\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u5708\u51fa\u7684\u90e8\u5206\u4ee3\u8868\u4e00\u4e2a\u4e0d\u540c\u7684\u5b50\u6811\u3002\u603b\u5171\u6709\u516d\u4e2a\u4e0d\u540c\u7684\u5b50\u6811\u3002\n\u8fd9\u7bc7\u5e16\u5b50\u4e0d\u4f1a\u6d89\u53ca\u592a\u591a\u5173\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6811\u7684\u7ec6\u8282\u3002\u4f46\u662f\uff0c\u81f3\u5c11\u719f\u6089\u4e00\u4e9b\u5e38\u7528\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6811\u4ecd\u7136\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\n\u597d\u7684\uff0c\u8ba9\u6211\u4eec\u81f3\u5c11\u8ba8\u8bba\u4e00\u4e0bN\u5143\u6811\u3002\u6211\u7b80\u5355\u5730\u628aN\u770b\u4f5c\u63cf\u8ff0\u6709\u6700\u591a\u5b69\u5b50\u7684\u7236\u8282\u70b9\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u770b\u7b2c\u4e00\u4e2a\u6570\u5b57\u3002A\u8282\u70b9\u6709\u6700\u591a\u7684\u5b69\u5b50\u3002\u4f46\u662f\uff0c\u5b83\u67093\u3002N\u662f3\u3002\u8fd9\u5c31\u662f3\u5143\u6811\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u6ca1\u6709\u7279\u522b\u7684\u4e00\u4e2a\u8282\u70b9\u6709\u6700\u591a\u7684\u5b69\u5b50\u3002\u4f46\u662f\uff0c\u6211\u4eec\u6765\u770b\u770b\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u4f46\u662f\uff0c\u6ca1\u6709\u4e00\u4e2a\u7279\u522b\u7684\u8282\u70b9\u6709\u6700\u591a\u7684\u5b69\u5b50\u3002\u4f46\u662f\uff0c\u8fd9\u5c31\u662f\u4e00\u4e2a\u4e09\u53c9\u6811\u3002\u8ba9\u6211\u4eec\u6765\u770b\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u4f46\u662f\uff0c\u6ca1\u6709\u4e00\u4e2a\u7279\u522b\u7684\u8282\u70b9\u6709\u6700\u591a\u7684\u5b69\u5b50\u3002\u4f46\u662f\uff0c\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u6700\u591a\u7684\u5b50\u8282\u70b9\u662f2\u3002N\u662f2\u3002\u8fd9\u4f7f\u5f97\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\u6216\u8005\u66f4\u901a\u4fd7\u5730\u8bf4\uff0c\u5b83\u662f\u4e00\u68f5\u4e8c\u53c9\u6811\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u77e5\u9053\u6811\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u91cc\u4f7f\u7528\u7684\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u6811\u7ed3\u6784\u7ed9\u4f60\uff1a\u6587\u4ef6\u5939\u3002\u662f\u7684\uff0c\u6709\u70b9\u5934\u8111\u53d1\u70ed\uff0c\u5bf9\u5417\uff1f\uff01\u5f53\u4f60\u4e0a\u4e0b\u5bfc\u822a\u76ee\u5f55\u65f6\uff0c\u5728\u67d0\u4e9b\u65b9\u9762\u4f60\u662f\u5728\u904d\u5386\u6811\u7ed3\u6784\u3002\u6240\u4ee5\uff0c\u4e0b\u6b21\u4f60\u5728\u6d3e\u5bf9\u4e0a\uff0c\u4e00\u5b9a\u8981\u544a\u8bc9\u4f60\u7684\u670b\u53cb\uff0c\u4f60\u7ecf\u5e38\u904d\u5386\u6811\u7ed3\u6784\u3002\u4ed6\u4eec\u4f1a\u8ba4\u4e3a\u4f60\u975e\u5e38\u806a\u660e\u3002\n\u6216\u8005\u8fd9\u4e2a\u600e\u4e48\u6837\uff1f\u6211\u6700\u8fd1\u4e00\u76f4\u5728\u5b66\u4e60Reaction\uff0c\u6240\u4ee5\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u5f53\u6211\u5f97\u77e5DOM\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6811\u7ed3\u6784\u65f6\uff0c\u6211\u975e\u5e38\u60ca\u8bb6\u3002\n\u6587\u6863\u5bf9\u8c61\u6a21\u578b\u6a21\u578b(DOM)\u662f\u4e00\u4e2a\u8de8\u5e73\u53f0\u548c\u72ec\u7acb\u4e8e\u8bed\u8a00\u7684\u63a5\u53e3\uff0c\u5b83\u5c06XML\u6216HTML\u6587\u6863\u89c6\u4e3a\u6811\u5f62\u7ed3\u6784\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u4ee3\u8868\u6587\u6863\u4e00\u90e8\u5206\u7684\u5bf9\u8c61\u3002\n\u81ea\u5df1\u6316\u6398\u4e00\u4e0b\u5427(\u6211\u81f3\u5c11\u5f97\u8bf4\u4e00\u53e5\u53cc\u5173\u8bed\uff0c\u62b1\u6b49)\u3002\u201c\u6211\u60f3\u4f60\u4f1a\u53d1\u73b0\uff0c\u5728\u7f16\u7a0b\u7684\u5927\u4e16\u754c\u91cc\uff0c\u6211\u4eec\u5468\u56f4\u5230\u5904\u90fd\u662f\u6811\uff01\u201d", "note_en": "Trees are similar to linked lists in that they are made up of nodes and links.\u00a0 There are certainly some differences between the two though.\u00a0 Let\u2019s find out what makes a tree a tree.\n  In my previous post I discussed\u00a0 arrays and linked lists.\u00a0 Arrays and linked lists are\u00a0 linear data structures.\u00a0 They are only able to be traversed sequentially.\u00a0 Trees are a bit different.\u00a0 They are\u00a0 non-linear data structures.\u00a0 Non-linear data structures are not organized sequentially like linear data structures are, so it only makes sense that they have to be traversed non-sequentially.\n Don\u2019t worry though.\u00a0 This post will not focus on the traversal of trees.\u00a0 Instead, let us make sure that we know what a tree is.\n   Parent Node:\u00a0 A node which is connected to one or more nodes on the lower level (Child Nodes)\n  Using the above figure, let\u2019s go over some of these terms that we have just learned.\u00a0\u00a0 A is the  r oot node.\u00a0\u00a0 A is also the\u00a0 parent node to\u00a0 child nodes\u00a0 B,\u00a0 C, and\u00a0 D.\u00a0 Node\u00a0 C is a\u00a0 parent node to\u00a0 child nodes\u00a0 E\u00a0and\u00a0 F.\u00a0 Nodes\u00a0 B,\u00a0 C, and\u00a0 D share the same\u00a0 parent node\u00a0 A.\u00a0 This makes them\u00a0 sibling nodes.\u00a0 The same is true for nodes\u00a0 E and\u00a0 F.\u00a0 They are sibling nodes because they both have node\u00a0 C as a parent.\u00a0 Finally, nodes\u00a0 B,\u00a0 D,\u00a0 E, and  F are  leaf nodes as they do not have any  child nodes.\n  Here are a few more key terms that are helpful for when talking about trees.\n Sub-tree:\u00a0 A sub-tree is a section of the main tree.\u00a0 Pick a node from a tree.\u00a0 That node and all of the nodes below it is a sub-tree.\n Depth:\u00a0 The distance that a node is from the root node.\u00a0 The easiest way to find the depth is to start at the root node and then count the number of edges that exist between a certain node and the root.\n Height:\u00a0 Start at a node.\u00a0 Count the number of edges that exist between the node and its furthest removed leaf node.\u00a0 This is the height.\n  The figure above shows the  depths and  heights for the different nodes.\u00a0 Each circled section represents a different  sub-tree.\u00a0 There are a total of six different  sub-trees.\n  This post isn\u2019t going to go into too much detail about the different types of trees.\u00a0 However, it is still a good idea to at least become familiar with some different types of trees that are commonly used.\n  Ok, let\u2019s at least talk about N-ary Trees for a bit.\u00a0 Think of\u00a0 N simply as the number that describes the parent node with the most children.\u00a0 For example, look at the first figure.\u00a0 Node\u00a0 A has the most children.\u00a0 It has\u00a0 3.\u00a0  N is  3. \u00a0That makes it a  3-ary tree.\u00a0 Let\u2019s go the next figure.\u00a0 There isn\u2019t any one node in particular that has the most children.\u00a0  BUT, the most children that any one node has is\u00a0 2.\u00a0  N is  2.\u00a0 This makes it a  2-ary tree.\u00a0 Or more commonly known as\u00a0 a\u00a0 Binary Tree.\n  At this point, you are probably wondering where trees are actually used.\u00a0 Here is a tree structure for you:\u00a0 folders.\u00a0 That\u2019s right, kind of mind blowing right?!\u00a0 When you navigate up and down through directories you are in some respects traversing a tree structure.\u00a0 So, next time you are at a party, be sure to tell your friends that you traverse tree structures on the regular.\u00a0 They will think you are wicked smart.\n Or how about this one.\u00a0 I have recently been learning about React, so you can be sure that I was pretty surprised when I learned that the  DOM is, in fact, a tree structure.\n The\u00a0 Document Object Model\u00a0( DOM) is a cross-platform and language-independent interface that treats an XML or HTML document as a tree-structure wherein each node is an object representing a part of the document.\u201d\n Do some digging yourself (I had to do at least one pun, sorry).\u00a0 I think you will find that trees are all around us in the great big world of programming!", "posttime": "2020-10-12 07:05:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6811\u6728,speak,\u8282\u70b9", "title": "\u6211\u4ee3\u8868\u6811\u6728\u8bf4\u8bdd", "title_en": "I Speak for the Trees", "transed": 1, "url": "https://www.danielleskosky.com/i-speak-for-the-trees/", "via": "", "real_tags": ["\u6811\u6728", "speak", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "ce65c382b5edeba4dde3fd0ffcd76cfe.jpg", "infoid": 1028192, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u7b7e\u540d\u4eba\u652f\u6301\u5f3a\u52a0\u5bc6\uff0c\u8fd9\u5728\u4fdd\u62a4\u4e2a\u4eba\u6570\u636e\u3001\u9690\u79c1\u3001\u77e5\u8bc6\u4ea7\u6743\u3001\u5546\u4e1a\u79d8\u5bc6\u548c\u7f51\u7edc\u5b89\u5168\u65b9\u9762\u53d1\u6325\u7740\u81f3\u5173\u91cd\u8981\u7684\u4f5c\u7528\u3002\u6b63\u5982\u8054\u5408\u56fd\u4eba\u6743\u7406\u4e8b\u4f1a2017\u5e74\u51b3\u8bae[1]\u6240\u8ff0\uff0c\u5b83\u4e5f\u662f\u4e13\u5236\u56fd\u5bb6\u4fdd\u62a4\u8bb0\u8005\u3001\u4eba\u6743\u634d\u536b\u8005\u548c\u5176\u4ed6\u5f31\u52bf\u7fa4\u4f53\u7684\u4e00\u4e2a\u91cd\u8981\u76ee\u7684\u3002\u52a0\u5bc6\u662f\u6570\u5b57\u4e16\u754c\u4fe1\u4efb\u7684\u5b58\u4ea1\u4e4b\u951a\uff0c\u6211\u4eec\u4e0d\u652f\u6301\u4f1a\u5b9e\u8d28\u6027\u524a\u5f31\u6216\u9650\u5236\u5b89\u5168\u7cfb\u7edf\u7684\u9002\u5f97\u5176\u53cd\u548c\u5371\u9669\u7684\u65b9\u6cd5\u3002\n\u7136\u800c\uff0c\u52a0\u5bc6\u6280\u672f\u7684\u7279\u5b9a\u5b9e\u65bd\u5bf9\u516c\u5171\u5b89\u5168\u6784\u6210\u4e86\u91cd\u5927\u6311\u6218\uff0c\u5305\u62ec\u5bf9\u6211\u4eec\u793e\u4f1a\u4e2d\u9ad8\u5ea6\u8106\u5f31\u7684\u6210\u5458\uff0c\u5982\u6027\u5265\u524a\u513f\u7ae5\u3002\u6211\u4eec\u6566\u4fc3\u4e1a\u754c\u89e3\u51b3\u6211\u4eec\u7684\u4e25\u91cd\u5173\u5207\uff0c\u56e0\u4e3a\u52a0\u5bc6\u7684\u5e94\u7528\u65b9\u5f0f\u5b8c\u5168\u6392\u9664\u4e86\u4efb\u4f55\u5408\u6cd5\u83b7\u53d6\u5185\u5bb9\u7684\u673a\u4f1a\u3002\u6211\u4eec\u547c\u5401\u79d1\u6280\u516c\u53f8\u4e0e\u653f\u5e9c\u5408\u4f5c\uff0c\u91c7\u53d6\u4ee5\u4e0b\u6b65\u9aa4\uff0c\u91cd\u70b9\u662f\u5408\u7406\u7684\u3001\u6280\u672f\u4e0a\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\uff1a\n\u5728\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u5d4c\u5165\u516c\u4f17\u5b89\u5168\uff0c\u4ece\u800c\u4f7f\u516c\u53f8\u80fd\u591f\u5728\u4e0d\u964d\u4f4e\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u6709\u6548\u5730\u6253\u51fb\u975e\u6cd5\u5185\u5bb9\u548c\u6d3b\u52a8\uff0c\u5e76\u4fc3\u8fdb\u5bf9\u7f6a\u884c\u7684\u8c03\u67e5\u548c\u8d77\u8bc9\uff0c\u5e76\u4fdd\u62a4\u5f31\u52bf\u7fa4\u4f53\uff1b\n\u4f7f\u6267\u6cd5\u90e8\u95e8\u80fd\u591f\u4ee5\u53ef\u8bfb\u548c\u53ef\u7528\u7684\u683c\u5f0f\u83b7\u53d6\u5185\u5bb9\uff0c\u5176\u4e2d\u6388\u6743\u662f\u5408\u6cd5\u53d1\u51fa\u7684\uff0c\u662f\u5fc5\u8981\u7684\u548c\u76f8\u79f0\u7684\uff0c\u5e76\u53d7\u5230\u5f3a\u6709\u529b\u7684\u4fdd\u969c\u548c\u76d1\u7763\uff1b\u4ee5\u53ca\u3002\n\u53c2\u4e0e\u4e0e\u653f\u5e9c\u548c\u5176\u4ed6\u5229\u76ca\u76f8\u5173\u8005\u7684\u534f\u5546\uff0c\u4ee5\u5b9e\u8d28\u6027\u548c\u771f\u6b63\u5f71\u54cd\u8bbe\u8ba1\u51b3\u7b56\u7684\u65b9\u5f0f\u4fc3\u8fdb\u5408\u6cd5\u8bbf\u95ee\u3002\n\u6267\u6cd5\u90e8\u95e8\u6709\u8d23\u4efb\u901a\u8fc7\u8c03\u67e5\u548c\u8d77\u8bc9\u72af\u7f6a\u5e76\u4fdd\u62a4\u5f31\u52bf\u7fa4\u4f53\u6765\u4fdd\u62a4\u516c\u6c11\u3002\u79d1\u6280\u516c\u53f8\u4e5f\u6709\u8d23\u4efb\uff0c\u5e76\u4e3a\u5176\u7528\u6237\u5236\u5b9a\u670d\u52a1\u6761\u6b3e\uff0c\u6388\u6743\u4ed6\u4eec\u91c7\u53d6\u884c\u52a8\u4fdd\u62a4\u516c\u4f17\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u65e0\u6cd5\u5408\u6cd5\u8bbf\u95ee\u901a\u4fe1\u5185\u5bb9\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u76f4\u63a5\u5f71\u54cd\u5230\u8fd9\u4e9b\u8d23\u4efb\uff0c\u5728\u4e24\u4e2a\u65b9\u9762\u7ed9\u516c\u5171\u5b89\u5168\u5e26\u6765\u4e25\u91cd\u98ce\u9669\uff1a\n\u901a\u8fc7\u4e25\u91cd\u7834\u574f\u516c\u53f8\u81ea\u8eab\u8bc6\u522b\u548c\u5e94\u5bf9\u8fdd\u53cd\u670d\u52a1\u6761\u6b3e\u7684\u80fd\u529b\u3002\u8fd9\u5305\u62ec\u5e94\u5bf9\u5176\u5e73\u53f0\u4e0a\u6700\u4e25\u91cd\u7684\u975e\u6cd5\u5185\u5bb9\u548c\u6d3b\u52a8\uff0c\u5305\u62ec\u513f\u7ae5\u6027\u5265\u524a\u548c\u8650\u5f85\u3001\u66b4\u529b\u72af\u7f6a\u3001\u6050\u6016\u4e3b\u4e49\u5ba3\u4f20\u548c\u88ad\u51fb\u7b56\u5212\uff1b\u4ee5\u53ca\u3002\n\u7981\u6b62\u6267\u6cd5\u673a\u6784\u5728\u5fc5\u8981\u548c\u9002\u5f53\u7684\u6709\u9650\u60c5\u51b5\u4e0b\u83b7\u53d6\u5185\u5bb9\uff0c\u4ee5\u8c03\u67e5\u4e25\u91cd\u72af\u7f6a\u548c\u4fdd\u62a4\u56fd\u5bb6\u5b89\u5168\uff0c\u53ea\u8981\u6709\u5408\u6cd5\u7684\u6743\u529b\u8fd9\u6837\u505a\u3002\n\u5bf9\u8fd9\u4e9b\u98ce\u9669\u7684\u62c5\u5fe7\u56e0\u63d0\u8bae\u5728\u4e3b\u8981\u901a\u8baf\u670d\u52a1\u4e2d\u5e94\u7528\u7aef\u5230\u7aef\u52a0\u5bc6\u800c\u6210\u4e3a\u4eba\u4eec\u5173\u6ce8\u7684\u7126\u70b9\u3002\u8054\u5408\u56fd\u513f\u7ae5\u57fa\u91d1\u4f1a\u4f30\u8ba1\uff0c\u4e09\u5206\u4e4b\u4e00\u7684\u4e92\u8054\u7f51\u7528\u6237\u662f\u513f\u7ae5\u3002WeProtect\u5168\u7403\u8054\u76df-\u4e00\u4e2a\u753198\u4e2a\u56fd\u5bb6\u3001\u5168\u7403\u79d1\u6280\u884c\u4e1a39\u5bb6\u6700\u5927\u516c\u53f8\u548c41\u4e2a\u9886\u5148\u7684\u6c11\u95f4\u793e\u4f1a\u7ec4\u7ec7\u7ec4\u6210\u7684\u8054\u76df-\u5728\u51762019\u5e74\u5168\u7403\u5a01\u80c1\u8bc4\u4f30\u4e2d\u660e\u786e\u5217\u51fa\u4e86\u65e0\u6cd5\u8bbf\u95ee\u7684\u52a0\u5bc6\u670d\u52a1\u5bf9\u5728\u7ebf\u513f\u7ae5\u6784\u6210\u7684\u98ce\u9669\u7684\u4e25\u91cd\u6027\uff1a\u201c\u516c\u4f17\u53ef\u8bbf\u95ee\u7684\u793e\u4ea4\u5a92\u4f53\u548c\u901a\u4fe1\u5e73\u53f0\u4ecd\u7136\u662f\u5728\u7f51\u4e0a\u4f1a\u89c1\u548c\u57f9\u517b\u513f\u7ae5\u7684\u6700\u5e38\u89c1\u65b9\u6cd5\u30022018\u5e74\uff0c\u5728\u5168\u74031840\u4e07\u4efdCSAM[\u63d0\u4ea4\u7ed9\u7f8e\u56fd\u56fd\u5bb6\u5931\u8e2a\u548c\u88ab\u5265\u524a\u513f\u7ae5\u4e2d\u5fc3(NCMEC)\u7684\u513f\u7ae5\u6027\u8650\u5f85\u6750\u6599]\u62a5\u544a\u4e2d\uff0cFacebook Messenger\u8d1f\u8d23\u4e86\u8fd11200\u4e07\u4efd\u3002\u5982\u679c\u9ed8\u8ba4\u5b9e\u65bd\u7aef\u5230\u7aef\u52a0\u5bc6\uff0c\u8fd9\u4e9b\u62a5\u544a\u53ef\u80fd\u4f1a\u6d88\u5931\uff0c\u56e0\u4e3a\u5f53\u524d\u7528\u4e8e\u68c0\u6d4bCSAM[\u513f\u7ae5\u6027\u8650\u5f85\u6750\u6599]\u7684\u5de5\u5177\u5728\u7aef\u5230\u7aef\u52a0\u5bc6\u73af\u5883\u4e2d\u4e0d\u8d77\u4f5c\u7528\u3002\u201c[2]2019\u5e7410\u67083\u65e5\uff0cNCMEC\u5c31\u6b64\u95ee\u9898\u53d1\u8868\u4e86\u4e00\u4efd\u58f0\u660e\uff0c\u58f0\u660e\u79f0\uff1a\u201d\u5982\u679c\u5b9e\u65bd\u7aef\u5230\u7aef\u52a0\u5bc6\u800c\u6ca1\u6709\u4fdd\u62a4\u513f\u7ae5\u7684\u89e3\u51b3\u65b9\u6848\uff0cNCMEC\u4f30\u8ba1\u5176CyberTipline\u62a5\u544a\u7684\u4e00\u534a\u4ee5\u4e0a\u5c06\u6d88\u5931\u3002\u201c[3]2019\u5e7412\u670811\u65e5\uff0c\u7f8e\u56fd\u548c\u6b27\u76df(EU)\u53d1\u8868\u8054\u5408\u58f0\u660e\u660e\u786e\u8868\u793a\uff0c\u867d\u7136\u52a0\u5bc6\u5bf9\u4e8e\u4fdd\u62a4\u7f51\u7edc\u5b89\u5168\u548c\u9690\u79c1\u5f88\u91cd\u8981\uff1a\u201c\u6050\u6016\u5206\u5b50\u548c\u5176\u4ed6\u72af\u7f6a\u5206\u5b50--\u5305\u62ec\u90a3\u4e9b\u4ece\u4e8b\u7f51\u7edc\u513f\u7ae5\u6027\u5265\u524a\u7684\u4eba--\u4f7f\u7528\u514d\u641c\u67e5\u4ee4\u52a0\u5bc6\uff0c\u635f\u5bb3\u4e86\u6267\u6cd5\u673a\u6784\u4fdd\u62a4\u53d7\u5bb3\u8005\u548c\u5e7f\u5927\u516c\u4f17\u7684\u80fd\u529b\u3002\u201d[4]\u3002\n\u9274\u4e8e\u8fd9\u4e9b\u5a01\u80c1\uff0c\u5404\u56fd\u653f\u5e9c\u548c\u56fd\u9645\u673a\u6784\u8d8a\u6765\u8d8a\u4e00\u81f4\u5730\u8ba4\u4e3a\uff0c\u5fc5\u987b\u91c7\u53d6\u884c\u52a8\uff1a\u5c3d\u7ba1\u52a0\u5bc6\u81f3\u5173\u91cd\u8981\uff0c\u9690\u79c1\u548c\u7f51\u7edc\u5b89\u5168\u5fc5\u987b\u5f97\u5230\u4fdd\u62a4\uff0c\u4f46\u8fd9\u4e0d\u5e94\u4ee5\u5b8c\u5168\u963b\u6b62\u6267\u6cd5\u548c\u79d1\u6280\u884c\u4e1a\u672c\u8eab\u80fd\u591f\u5bf9\u6700\u4e25\u91cd\u7684\u5728\u7ebf\u975e\u6cd5\u5185\u5bb9\u548c\u6d3b\u52a8\u91c7\u53d6\u884c\u52a8\u4e3a\u4ee3\u4ef7\u3002\n2019\u5e747\u6708\uff0c\u82f1\u56fd\u3001\u7f8e\u56fd\u3001\u6fb3\u5927\u5229\u4e9a\u3001\u65b0\u897f\u5170\u548c\u52a0\u62ff\u5927\u653f\u5e9c\u53d1\u8868\u4e86\u4e00\u4efd\u516c\u62a5\uff0c\u5f97\u51fa\u7ed3\u8bba\uff1a\u201c\u79d1\u6280\u516c\u53f8\u5728\u5176\u52a0\u5bc6\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u8bbe\u8ba1\u4e2d\u5e94\u5305\u62ec\u673a\u5236\uff0c\u4f7f\u653f\u5e9c\u5728\u62e5\u6709\u9002\u5f53\u7684\u6cd5\u5f8b\u6743\u5a01\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u4ee5\u53ef\u8bfb\u548c\u53ef\u7528\u7684\u683c\u5f0f\u83b7\u53d6\u6570\u636e\u3002\u8fd9\u4e9b\u516c\u53f8\u8fd8\u5e94\u5728\u5176\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u5d4c\u5165\u7528\u6237\u7684\u5b89\u5168\uff0c\u4f7f\u5b83\u4eec\u80fd\u591f\u5bf9\u975e\u6cd5\u5185\u5bb9\u91c7\u53d6\u884c\u52a8\u3002\u201c[5]2019\u5e7410\u67088\u65e5\uff0c\u6b27\u76df\u7406\u4e8b\u4f1a\u901a\u8fc7\u4e86\u5176\u5173\u4e8e\u6253\u51fb\u513f\u7ae5\u6027\u8650\u5f85\u7684\u7ed3\u8bba\uff0c\u58f0\u660e\uff1a\u201d\u7406\u4e8b\u4f1a\u6566\u4fc3\u8be5\u884c\u4e1a\u786e\u4fdd\u6267\u6cd5\u90e8\u95e8\u548c\u5176\u4ed6\u4e3b\u7ba1\u5f53\u5c40\u5408\u6cd5\u83b7\u53d6\u6570\u5b57\u8bc1\u636e\uff0c\u5305\u62ec\u5728\u52a0\u5bc6\u6216\u6258\u7ba1\u5728\u4f4d\u4e8e\u56fd\u5916\u7684IT\u670d\u52a1\u5668\u4e0a\u65f6\uff0c\u4e0d\u7981\u6b62\u6216\u524a\u5f31\u52a0\u5bc6\uff0c\u5e76\u5145\u5206\u5c0a\u91cd\u7b26\u5408\u9002\u7528\u6cd5\u5f8b\u7684\u9690\u79c1\u548c\u516c\u5e73\u5ba1\u5224\u4fdd\u969c\u3002\u201c[6]\u3002\nWeProtect\u5168\u7403\u8054\u76df\u3001NCMEC\u548c\u6765\u81ea\u4e16\u754c\u5404\u5730\u7684100\u591a\u4e2a\u513f\u7ae5\u4fdd\u62a4\u7ec4\u7ec7\u548c\u4e13\u5bb6\u7ec4\u6210\u7684\u8054\u76df\u90fd\u547c\u5401\u91c7\u53d6\u884c\u52a8\uff0c\u786e\u4fdd\u63d0\u9ad8\u9690\u79c1\u7684\u63aa\u65bd-\u5305\u62ec\u7aef\u5230\u7aef\u52a0\u5bc6-\u4e0d\u5e94\u4ee5\u727a\u7272\u513f\u7ae5\u5b89\u5168\u4e3a\u4ee3\u4ef7[7]\u3002\n\u6211\u4eec\u81f4\u529b\u4e8e\u4e0e\u4e1a\u754c\u5408\u4f5c\uff0c\u5236\u5b9a\u5408\u7406\u7684\u5efa\u8bae\uff0c\u4f7f\u79d1\u6280\u516c\u53f8\u548c\u653f\u5e9c\u80fd\u591f\u4fdd\u62a4\u516c\u4f17\u53ca\u5176\u9690\u79c1\uff0c\u634d\u536b\u7f51\u7edc\u5b89\u5168\u548c\u4eba\u6743\uff0c\u5e76\u652f\u6301\u6280\u672f\u521b\u65b0\u3002\u867d\u7136\u8fd9\u4efd\u58f0\u660e\u4fa7\u91cd\u4e8e\u7aef\u5230\u7aef\u52a0\u5bc6\u5e26\u6765\u7684\u6311\u6218\uff0c\u4f46\u8fd9\u4e00\u627f\u8bfa\u9002\u7528\u4e8e\u5404\u79cd\u53ef\u7528\u7684\u52a0\u5bc6\u670d\u52a1\uff0c\u5305\u62ec\u8bbe\u5907\u52a0\u5bc6\u3001\u81ea\u5b9a\u4e49\u52a0\u5bc6\u5e94\u7528\u7a0b\u5e8f\u548c\u8de8\u96c6\u6210\u5e73\u53f0\u7684\u52a0\u5bc6\u3002\u6211\u4eec\u91cd\u7533\uff0c\u968f\u7740\u6280\u672f\u53d8\u5316\u548c\u5168\u7403\u4e92\u8054\u7f51\u6807\u51c6\u7684\u53d1\u5c55\uff0c\u6570\u636e\u4fdd\u62a4\u3001\u5c0a\u91cd\u9690\u79c1\u4ee5\u53ca\u52a0\u5bc6\u7684\u91cd\u8981\u6027\u4ecd\u7136\u662f\u6bcf\u4e2a\u5dde\u6cd5\u5f8b\u6846\u67b6\u7684\u524d\u6cbf\u3002\u6211\u4eec\u8d28\u7591\u5728\u4e0d\u635f\u5bb3\u9690\u79c1\u6216\u7f51\u7edc\u5b89\u5168\u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u80fd\u4fdd\u62a4\u516c\u5171\u5b89\u5168\u7684\u65ad\u8a00\u3002\u6211\u4eec\u575a\u4fe1\u4fdd\u62a4\u8fd9\u4e9b\u91cd\u8981\u4ef7\u503c\u89c2\u7684\u65b9\u6cd5\u90fd\u662f\u53ef\u80fd\u7684\uff0c\u5e76\u52aa\u529b\u4e0e\u4e1a\u754c\u5408\u4f5c\uff0c\u5171\u540c\u5236\u5b9a\u51fa\u53cc\u65b9\u90fd\u80fd\u8fbe\u6210\u4e00\u81f4\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u5b89\u5fb7\u9c81\u00b7\u5229\u7279\u5c14\u8bae\u5458\u9601\u4e0b\uff0c\u53f8\u6cd5\u90e8\u957f\u3001GCSB\u90e8\u957f\u3001NZSIS\u90e8\u957f", "note_en": "We, the undersigned, support strong encryption, which plays a crucial role in protecting personal data, privacy, intellectual property, trade secrets and cyber security.\u00a0 It also serves a vital purpose in repressive states to protect journalists, human rights defenders and other vulnerable people, as stated in the 2017 resolution of the UN Human Rights Council [1].\u00a0 Encryption is an existential anchor of trust in the digital world and we do not support counter-productive and dangerous approaches that would materially weaken or limit security systems.\n Particular implementations of encryption technology, however, pose significant challenges to public safety, including to highly vulnerable members of our societies like sexually exploited children. We urge industry to address our serious concerns where encryption is applied in a way that wholly precludes any legal access to content.\u00a0 We call on technology companies to work with governments to take the following steps, focused on reasonable, technically feasible solutions:\n Embed the safety of the public in system designs, thereby enabling companies to act against illegal content and activity effectively with no reduction to safety, and facilitating the investigation and prosecution of offences and safeguarding the vulnerable;\n  Enable law enforcement access to content in a readable and usable format where an authorisation is lawfully issued, is necessary and proportionate, and is subject to strong safeguards and oversight; and\n  Engage in consultation with governments and other stakeholders to facilitate legal access in a way that is substantive and genuinely influences design decisions.\n  Law enforcement has a responsibility to protect citizens by investigating and prosecuting crime and safeguarding the vulnerable. Technology companies also have responsibilities and put in place terms of service for their users that provide them authority to act to protect the public.\u00a0 End-to-end encryption that precludes lawful access to the content of communications in any circumstances directly impacts these responsibilities, creating severe risks to public safety in two ways:\n By severely undermining a company\u2019s own ability to identify and respond to violations of their terms of service. This includes responding to the most serious illegal content and activity on its platform, including child sexual exploitation and abuse, violent crime, terrorist propaganda and attack planning; and\n  By precluding the ability of law enforcement agencies to access content in limited circumstances where necessary and proportionate to investigate serious crimes and protect national security, where there is lawful authority to do so.\n Concern about these risks has been brought into sharp focus by proposals to apply end-to-end encryption across major messaging services.\u00a0 UNICEF estimates that one in three internet users is a child.\u00a0 The WePROTECT Global Alliance \u2013 a coalition of 98 countries, 39 of the largest companies in the global technology industry, and 41 leading civil society organisations \u2013 set out clearly the severity of the risks posed to children online by inaccessible encrypted services in its 2019 Global Threat Assessment: \u201cPublicly-accessible social media and communications platforms remain the most common methods for meeting and grooming children online. In 2018, Facebook Messenger was responsible for nearly 12\u00a0million of the 18.4\u00a0million worldwide reports of CSAM [child sexual abuse material to the US National Center for Missing and Exploited Children (NCMEC)]. These reports risk disappearing if end-to-end encryption is implemented by default, since current tools used to detect CSAM [child sexual abuse material] do not work in end-to-end encrypted environments.\u201d [2]\u00a0 On 3 October 2019 NCMEC published a statement on this issue, stating that: \u201cIf end-to-end encryption is implemented without a solution in place to safeguard children, NCMEC estimates that more than half of its CyberTipline reports will vanish.\u201d [3]\u00a0 And on 11 December 2019, the United States and European Union (EU) issued a joint statement making clear that while encryption is important for protecting cyber security and privacy: \u201cthe use of warrant-proof encryption by terrorists and other criminals \u2013 including those who engage in online child sexual exploitation \u2013 compromises the ability of law enforcement agencies to protect victims and the public at large.\u201d [4]\n  In light of these threats, there is increasing consensus across governments and international institutions that action must be taken: while encryption is vital and privacy and cyber security must be protected, that should not come at the expense of wholly precluding law enforcement, and the tech industry itself, from being able to act against the most serious illegal content and activity online.\n In July 2019, the governments of the United Kingdom, United States, Australia, New Zealand and Canada issued a communique, concluding that: \u201ctech companies should include mechanisms in the design of their encrypted products and services whereby governments, acting with appropriate legal authority, can gain access to data in a readable and usable format. Those companies should also embed the safety of their users in their system designs, enabling them to take action against illegal content.\u201d [5]\u00a0 On 8 October 2019, the Council of the EU adopted its conclusions on combating child sexual abuse, stating: \u201cThe Council urges the industry to ensure lawful access for law enforcement and other competent authorities to digital evidence, including when encrypted or hosted on IT servers located abroad, without prohibiting or weakening encryption and in full respect of privacy and fair trial guarantees consistent with applicable law.\u201d [6]\n The WePROTECT Global Alliance, NCMEC and a coalition of more than 100 child protection organisations and experts from around the world have all called for action to ensure that measures to increase privacy \u2013 including end-to-end encryption \u2013 should not come at the expense of children\u2019s safety [7].\n  We are committed to working with industry to develop reasonable proposals that will allow technology companies and governments to protect the public and their privacy, defend cyber security and human rights and support technological innovation.\u00a0 While this statement focuses on the challenges posed by end-to-end encryption, that commitment applies across the range of encrypted services available, including device encryption, custom encrypted applications and encryption across integrated platforms.\u00a0 We reiterate that data protection, respect for privacy and the importance of encryption as technology changes and global Internet standards are developed remain at the forefront of each state\u2019s legal framework.\u00a0 However, we challenge the assertion that public safety cannot be protected without compromising privacy or cyber security.\u00a0 We strongly believe that approaches protecting each of these important values are possible and strive to work with industry to collaborate on mutually agreeable solutions.\n     Hon Andrew Little MP, Minister of Justice, Minister Responsible for the GCSB, Minister Responsible for the NZSIS", "posttime": "2020-10-12 07:05:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u56fd\u9645,international,\u52a0\u5bc6", "title": "\u7f8e\u56fd\u53f8\u6cd5\u90e8-\u56fd\u9645\u58f0\u660e\uff1a\u7aef\u5230\u7aef\u52a0\u5bc6\u548c\u516c\u5171\u5b89\u5168", "title_en": "DOJ \u2013 International Statement: End-to-End Encryption and Public Safety", "transed": 1, "url": "https://www.justice.gov/opa/pr/international-statement-end-end-encryption-and-public-safety", "via": "", "real_tags": ["\u7f8e\u56fd", "\u56fd\u9645", "\u52a0\u5bc6"]}, {"category": "", "categoryclass": "", "imagename": "472cdc15f9e9c1a7872de5f9122af5f2.png", "infoid": 1028190, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5929\u524d\uff0c\u6211\u6709\u4e00\u4e2a\u60f3\u6cd5\uff0c\u60f3\u51fa\u4e00\u4e2a\u611a\u8822\u7684\u5c0f\u54c1\uff0c\u6211\u8981\u628a\u5b83\u53d1\u5e03\u5230TikTok\u4e0a\u3002\u6211\u82b1\u4e86\u5927\u7ea65-10\u5206\u949f\u7684\u65f6\u95f4\u5728\u6ca1\u6709\u5267\u672c\u6216\u8ba1\u5212\u7684\u60c5\u51b5\u4e0b\u62cd\u6444\u4e86\u5b83\uff0c\u5e76\u5c06\u5176\u53d1\u5e03\u5230\u4e86\u6211\u7684TikTok\u548c\u6211\u7684Twitter\u4e0a\u3002\u6211\u4e0a\u5e8a\u7761\u89c9\u4e86\uff0c\u65e9\u4e0a\u88ab\u670b\u53cb\u548c\u719f\u4eba\u53d1\u6765\u7684\u6d88\u606f\u5435\u9192\u4e86\uff0c\u8bf4\u6211\u7a81\u7136\u767b\u4e0a\u4e86Reddit\u7684\u5934\u7248\u3002\n\u6211\u5bf9\u8fc5\u901f\u8d70\u7ea2\u611f\u5230\u5174\u594b\uff0c\u6700\u521d\u4e5f\u5f88\u9ad8\u5174\u4eba\u4eec\u559c\u6b22\u6211\u7684\u611a\u8822\u7684\u5c0f\u89c6\u9891\uff0c\u4f46\u5f53\u7136\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u7a81\u7136\u5728\u6570\u767e\u4e07\u4eba\u9762\u524d\u9732\u51fa\u8138\u548c\u8eab\u4f53\u7684\u5973\u4eba\uff0c\u8fd9\u79cd\u611f\u89c9\u5f88\u5feb\u5c31\u6d88\u5931\u4e86\u3002\n\u8fd9\u6bb5\u89c6\u9891\u88ab\u5206\u4eab\u5230\u4e86\u4e00\u4e2a\u8282\u76ee\u5e7d\u9ed8\u7684\u5b50\u7f16\u8f91\u7f51\u7ad9\u4e0a(\u6ca1\u6709\u7f72\u540d\u6211\u53ef\u80fd\u4f1a\u52a0\u4e0a)\uff0c\u4f46\u6211\u7684\u70e6\u607c\u548c\u6050\u60e7\u5e76\u4e0d\u662f\u56e0\u4e3a\u9519\u8fc7\u4e86\u5f71\u54cd\u529b\u6216\u4e92\u8054\u7f51\u70b9\u6570\uff0c\u800c\u662f\u56e0\u4e3a\u5f53\u5b83\u53d1\u5e03\u5230\u65b0\u7684\u5e73\u53f0\u4e0a\u65f6\uff0c\u6211\u5931\u53bb\u4e86\u5220\u9664\u5e16\u5b50\u3001\u5220\u9664\u8bc4\u8bba\u6216\u5c4f\u853d\u8bc4\u8bba\u8005\u7684\u80fd\u529b\u3002\n\u8fd9\u5bf9\u6211\u4e2a\u4eba\u6709\u4ec0\u4e48\u5f71\u54cd\uff1f\u5f53\u8fd9\u6bb5\u89c6\u9891\u5728\u7f51\u4e0a\u75af\u4f20\u65f6\uff0c\u6211\u611f\u89c9\u81ea\u5df1\u50cf\u730e\u7269\uff0c\u65e0\u6cd5\u96c6\u4e2d\u6ce8\u610f\u529b\u3002\u6211\u77e5\u9053\u4eba\u4eec\u6b63\u5728\u89c2\u5bdf\u3001\u8bc4\u5224\uff0c\u53ef\u80fd\u8fd8\u8bd5\u56fe\u5728\u4e92\u8054\u7f51\u4e0a\u7684\u5176\u4ed6\u5730\u65b9\u627e\u5230\u6211\uff0c\u5b9e\u65f6\u9a9a\u6270\u6211\u3002\u6211\u5f00\u59cb\u6536\u5230\u4eba\u4eec\u8bd5\u56fe\u767b\u5f55\u6211\u7684\u4e92\u8054\u7f51\u8d26\u6237\u7684\u901a\u77e5\u3002\u6211\u75282FA\u9501\u4f4f\u4e86\u6240\u6709\u4e1c\u897f(\u53cd\u6b63\u6211\u5e94\u8be5\u67092FA\u7684)\u3002\u6211\u8fc7\u53bb\u7684\u7ecf\u5386\u8ba9\u6211\u505a\u597d\u4e86\u6700\u574f\u7684\u6253\u7b97\uff0c\u5e76\u89c9\u5f97\u62b1\u6700\u597d\u7684\u5e0c\u671b\u662f\u611a\u8822\u7684\u3002\n\u6211\u62a5\u9053\u4e86\u6240\u6709\u53ef\u6015\u7684\u8bc4\u8bba(\u548c\u670b\u53cb\u4eec\u4e00\u6837)\uff0c\u4f46\u5927\u7ea624\u5c0f\u65f6\u540e\uff0c\u51e0\u4e4e\u6ca1\u6709\u4e00\u4e2a\u8bc4\u8bba\u88ab\u5220\u9664\u3002\u6211\u8054\u7cfb\u4e86subreddit\u7684\u7248\u4e3b\uff0c\u5e76\u53d1\u51fa\u4e86\u547c\u5401\u3002\n\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u5728Reddit\u4e0a\u53d1\u5e16\uff0c\u6211\u5bf9\u8fd9\u91cc\u7684\u6e29\u548c\u6709\u70b9\u5931\u671b\u3002\u663e\u7136\uff0c\u6709\u9488\u5bf9\u6211\u7684\u4ee4\u4eba\u538c\u6076\u7684\u6027\u8bc4\u8bba\uff0c\u4e0e\u89c6\u9891\u5185\u5bb9\u6216\u8282\u76ee\u5e7d\u9ed8\u65e0\u5173\uff0c\u4ece\u611a\u8822\u7684(\u201c\u80f8\u90e8\u201d)\u5230\u66f4\u9ebb\u70e6\u7684-\u5305\u62ec\u4eba\u4eec\u5f15\u5bfc\u4eba\u4eec\u5230\u6211\u7684\u793e\u4ea4\u5a92\u4f53\u4e0a\u66f4\u597d\u5730\u4e86\u89e3\u6211\u7684\u8eab\u4f53\u90e8\u4f4d\u548c\u5173\u4e8e\u6211\u7684\u66b4\u529b\u56fe\u50cf\u3002\u5728\u8fc7\u53bb\u768424\u5c0f\u65f6\u91cc\uff0c\u6211\u4e00\u76f4\u5728\u62a5\u9053\u6240\u6709\u8fd9\u4e9b\u8bc4\u8bba\uff0c\u5176\u4e2d\u5f88\u5c11\u6709\u88ab\u5220\u9664\u7684\u3002\n\u6211\u5e0c\u671b\u4f60\u80fd\u5bf9\u7f13\u548c\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc4\u8bba\u66f4\u52a0\u8b66\u60d5\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u4e3a\u79d1\u6280\u884c\u4e1a\u7684\u5973\u6027\u521b\u9020\u4e00\u4e2a\u975e\u5e38\u53cb\u597d\u7684\u73af\u5883\u3002\u8fd9\u4e2a\u4ee3\u8a00\u4eba\u4e0d\u662f\u201c\u751f\u5b58\u8282\u76ee\u5e7d\u9ed8\u201d\uff0c\u6211\u4e2a\u4eba\u6b63\u5728\u770b\u5230\u548c\u9605\u8bfb\u8fd9\u4e9b\u5173\u4e8e\u6211\u8eab\u4f53\u7684\u6027\u7231\u8bc4\u8bba(\u6210\u5343\u4e0a\u4e07\u7684\u5176\u4ed6\u4eba\u4e5f\u662f\u5982\u6b64\uff0c\u5305\u62ec\u6211\u7684\u670b\u53cb\u3001\u4f34\u4fa3\u3001\u719f\u4eba\u548c\u540c\u4e8b)\u3002\n\u5982\u679c\u4f60\u6709\u5174\u8da3\u6210\u4e3a\u4e00\u4e2a\u66f4\u53d7\u6b22\u8fce\u7684\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u6211\u4f1a\u611f\u5230\u8212\u670d\u5730\u5f20\u8d34\u6211\u7684\u5185\u5bb9\uff0c\u6211\u4f1a\u6566\u4fc3\u4f60\u6dfb\u52a0\u4e00\u4e2a\u5173\u4e8e\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc4\u8bba\u7684\u65b0\u7684\u5b50\u89c4\u5219\u3002\u6b64\u5916\uff0c\u5982\u679c\u5973\u6027\u662f\u75c5\u6bd2\u5f0f\u5e16\u5b50\u7684\u4e3b\u9898\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bc4\u8bba\u548c\u884c\u4e3a\u5e94\u8be5\u662f\u610f\u6599\u4e4b\u4e2d\u7684\uff0c\u5e76\u88ab\u627c\u6740\u5728\u4e0d\u53ef\u63a5\u53d7\u7684\u840c\u82bd\u72b6\u6001\u3002\n\u6211\u5e76\u6ca1\u6709\u671f\u5f85\u592a\u591a\uff0c\u4f46\u7b2c\u4e8c\u5929\u6211\u6536\u5230\u4e86\u56de\u590d\uff0c\u8fd9\u57fa\u672c\u4e0a\u662f\u6211\u6240\u80fd\u671f\u5f85\u7684\u6700\u597d\u7684\u7ed3\u679c\u3002\u6211\u975e\u5e38\u611f\u8c22\u4f60\u7684\u56de\u5e94\uff0c\u5e76\u5e0c\u671b\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u518d\u53d1\u751f\u5728\u8fd9\u8258\u6f5c\u8247\u4e0a\uff0c\u4f46\u5f53\u7136\u8fd8\u6709\u6210\u5343\u4e0a\u4e07\u7684\u5176\u4ed6\u6f5c\u8247/\u793e\u533a\u548c\u5176\u4ed6\u5973\u6027\u5728\u7f51\u4e0a\u53d1\u5e03\u5185\u5bb9\u3002\n\u9996\u5148\uff0c\u6211\u60f3\u4e3a\u8fd9\u91cc\u53d1\u751f\u7684\u4e8b\u60c5\u9053\u6b49\uff0c\u8fd9\u662f\u4e25\u91cd\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u6211\u4eec\u771f\u7684\u641e\u7838\u4e86\u8fd9\u4ef6\u4e8b\uff0c\u56e0\u4e3a\u8e0f\u677f\u5e94\u8be5\u65e9\u70b9\u9501\u5b9a\u3002\u6211\u5df2\u7ecf\u5220\u9664\u4e86\u5927\u90e8\u5206(\u5982\u679c\u4e0d\u662f\u5168\u90e8)\u4ee4\u4eba\u4e0d\u5feb\u7684\u8bc4\u8bba\uff0c\u6700\u6076\u52a3\u7684\u8fdd\u89c4\u8005\u5df2\u88ab\u6c38\u4e45\u7981\u6b62\u3002\n\u6211\u4eec\u80af\u5b9a\u4f1a\u8c03\u6574\u6211\u4eec\u7684\u89c4\u5219\uff0c\u7981\u6b62\u4efb\u4f55\u5f62\u5f0f\u7684\u8272\u60c5\u8bc4\u8bba\uff0c\u56e0\u4e3a\u4efb\u4f55\u50cf\u8fd9\u6837\u7684\u884c\u4e3a\u90fd\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\uff0c\u6211\u5f88\u62b1\u6b49\u6211\u4eec\u4e4b\u524d\u6ca1\u6709\u66f4\u660e\u786e\u7684\u89c4\u5219\u3002\n\u6211\u4eec\u8fd8\u5c06\u7814\u7a76\u62db\u52df\u66f4\u591a\u7684MOD\uff0c\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u7ba1\u7406\u8fd9\u6837\u7684\u60c5\u51b5\u3002\n\u6211\u4eec\u4f1a\u5c3d\u6211\u4eec\u6240\u80fd\u63d0\u4f9b\u5e2e\u52a9\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u5bf9\u52b2\u7684\u5730\u65b9\uff0c\u8bf7\u4e0d\u8981\u72b9\u8c6b\u7ed9\u6211\u4eec\u56de\u4fe1\u3002\n\u6211\u76f8\u4fe1\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u5bf9\u6b64\u6709\u60f3\u6cd5\uff0c\u6211\u4f1a\u8bd5\u7740\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\n\u662f\u7684\uff0c\u4f60\u662f\u5bf9\u7684\u3002\u8fd8\u6709\u4e00\u4e9b\u771f\u6b63\u7684\u201c\u6279\u8bc4\u201d\u8d34\u51fa\u6765\uff0c\u6211\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u7f6e\u4e4b\u4e0d\u7406\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\uff1a\u201c\u5f53\u5979\u5f00\u59cb/\u6682\u505c\u62cd\u6444\u65f6\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u5979\u7684\u624b\u5728\u79fb\u52a8\u201d\u3002\u4f60\u8bf4\u5f97\u5bf9\uff01\u6211\u5bf9\u4e00\u4e2a\u611a\u8822\u7684TikTok\u7684\u89c6\u9891\u7f16\u8f91\u6280\u80fd\uff0c\u6211\u4e0d\u77e5\u9053\u4f1a\u50cf\u75c5\u6bd2\u4e00\u6837\u8d70\u7ea2\uff0c\u8fd9\u662f\u4e00\u4e2a\u5408\u7406\u7684\u6279\u8bc4\u3002\n\u4f46\u662f\uff0c\u6279\u8bc4\u62cd\u6444\u8fc7\u7a0b\u548c\u8ba8\u8bba\u6211\u4e2a\u4eba\u7684\u5e16\u5b50\u4e4b\u95f4\u6709\u5de8\u5927\u7684\u533a\u522b-\u6240\u6709\u5173\u4e8e\u6211\u7684\u58f0\u97f3\u5bf9\u8fa9\u8bba\u6211\u7684\u4e73\u623f\u5c3a\u5bf8\u6709\u591a\u4e48\u607c\u4eba(\u4ee5\u53ca\u5f15\u5bfc\u4eba\u4eec\u53bb\u770b\u6211\u7684\u793e\u4ea4\u5a92\u4f53\u4ee5\u89e3\u51b3\u8fd9\u573a\u8fa9\u8bba)\u3002\u4e0d\u7ba1\u4f60\u8ba4\u4e3a\u8fd9\u4e9b\u6279\u8bc4\u6709\u6ca1\u6709\u9053\u7406\uff0c\u6211\u60f3\u6211\u4eec\u90fd\u540c\u610f\u8fd9\u4f1a\u8ba9\u4eba\u611f\u5230\u4e0d\u5b89\u5168\u3002\n\u6b63\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u6211\u81ea\u5df1\u6ca1\u6709\u5728Reddit\u4e0a\u53d1\u5e03\u8fd9\u6bb5\u89c6\u9891\u3002\u6211\u53d1\u73b0\u5bf9\u4e8e\u5973\u6027\u548cPOC\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u6709\u6bd2\u7684\u5730\u65b9\u3002Reddit\u4e0a\u6709\u4e00\u4e9b\u5730\u65b9\u5141\u8bb8\u751a\u81f3\u9f13\u52b1\u8fd9\u79cd\u8bc4\u8bba(\u53c2\u89c1\u6240\u6709NSFW\u548c\u6709\u4e89\u8bae\u7684Subreddits)\uff0c\u4f46\u4e00\u4e2a\u5141\u8bb8\u8fd9\u6837\u505a\u7684\u8282\u76ee\u5e7d\u9ed8\u5b50Reddit\u53ea\u662f\u5ef6\u7eed\u4e86\u8fd9\u4e2a\u884c\u4e1a\u8ba9\u5973\u6027\u611f\u5230\u4e0d\u53d7\u6b22\u8fce\u7684\u8d8b\u52bf\u3002\n\u867d\u7136\u4e00\u5f00\u59cb\uff0c\u5ffd\u7565\u90a3\u4e9b\u4ec7\u6068\u8005\u4f3c\u4e4e\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u60f3\u6cd5\uff0c\u53ef\u4ee5\u8bf4\uff0c\u9996\u5148\uff0c\u5982\u679c\u6ca1\u6709\u4eba\u8bfb\u5230\u6700\u7cdf\u7cd5\u7684\u8bc4\u8bba\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u62a5\u9053\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u6240\u4ee5\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\u5176\u6b21\uff0c\u4e00\u573a\u5f00\u59cb\u65f6\u6e29\u548c\u7684\u8ba8\u8bba\u53ef\u80fd\u4f1a\u5347\u7ea7\u4e3a\u6253\u67b6\u3001\u6709\u7ec4\u7ec7\u7684\u6253\u72d7\u6216\u5a01\u80c1\u3002\u4e0d\u77e5\u9053\u8fd9\u4ef6\u4e8b\u6b63\u5728\u53d1\u751f\u53ef\u80fd\u662f\u5371\u9669\u7684\u3002\n\u5f53\u6211\u4e0a\u5927\u5b66\u7684\u65f6\u5019\uff0c\u6709\u4e24\u4e2a\u533f\u540d\u7559\u8a00\u677f(YAKYAK\u548cACB)\uff0c\u5728\u90a3\u91cc\u5b66\u751f\u4eec\u9664\u4e86\u9a9a\u6270\u5b66\u6821\u91cc\u7684\u4e2a\u522b\u5973\u5b69(\u4e0d\u662f\u6211\uff0c\u56e0\u4e3a\u6211\u4e0d\u53d7\u6b22\u8fce)\u4e4b\u5916\uff0c\u8fd8\u4f1a\u53d1\u5e03\u53ef\u6015\u7684\u79cd\u65cf\u4e3b\u4e49\u548c\u6027\u522b\u6b67\u89c6\u7684\u4e1c\u897f\u3002\u5c24\u5176\u4ee4\u6211\u9707\u60ca\u7684\u662f\uff0c\u8fd9\u662f\u5728\u4e00\u6240\u5e38\u6625\u85e4\u76df\u6821\uff0c\u5728\u90a3\u91cc\uff0c\u8fd9\u4e9b\u5b69\u5b50\u4e2d\u7684\u5927\u591a\u6570\u90fd\u88ab\u201c\u826f\u597d\u201d\u5730\u629a\u517b\u957f\u5927\uff0c\u5e76\u5c06\u7ee7\u7eed\u521b\u529e\u516c\u53f8\uff0c\u8fdb\u5165\u6700\u597d\u7684\u7814\u7a76\u751f\u8bfe\u7a0b\uff0c\u6210\u4e3a\u6211\u4eec\u4e16\u754c\u7684\u201c\u672a\u6765\u9886\u5bfc\u8005\u201d\u3002\u6211\u76f8\u4fe1\u8fd9\u4e9b\u5b69\u5b50\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u4e0d\u4f1a\u5f53\u9762\u8bf4\u8fd9\u4e9b\u8bdd\uff0c\u4f46\u662f\u533f\u540d\u4f1a\u7ed9\u4f60\u4e00\u79cd\u5947\u602a\u7684\u529b\u91cf\uff0c\u8ba9\u4f60\u6709\u4e00\u79cd\u5947\u602a\u7684\u6b32\u671b\u53bb\u8bf4\u4e00\u4e9b\u6709\u5bb3\u7684\u4e1c\u897f\u3002\n\u6211\u8ba4\u4e3a\u4eba\u4eec\u6025\u4e8e\u5c06\u8fd9\u4e9b\u5de8\u9b54\u65a5\u4e3a\u201c\u4e92\u8054\u7f51\u4e0a\u7684\u6e23\u6ed3\u201d\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u9519\u8bef\u7684\u3002\u6211\u60f3\u6bd4\u90a3\u79bb\u5bb6\u8fd1\u5f97\u591a\u3002\u6211\u60f3\u4ed6\u4eec\u662f\u5e38\u6625\u85e4\u76df\u6821\u7684\u6bd5\u4e1a\u751f\uff0c\u662fSF\u7684\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u540c\u4e8b\uff0c\u4e5f\u662f\u548c\u6211\u4e00\u8d77\u4e58\u5750\u5730\u94c1\u7684\u4eba\u3002\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u771f\u6b63\u8fc7\u7740\u6b63\u5e38\u751f\u6d3b\u7684\u666e\u901a\u4eba\uff0c\u4f46\u5728\u533f\u540d\u7684\u9762\u7eb1\u4e0b\u5728\u7f51\u4e0a\u53d1\u6cc4\u4e00\u4e9b\u5185\u5fc3\u7684\u6124\u6012\u3002\n\u6b64\u5916\uff0c\u6211\u8ba4\u4e3a\u5c06\u4ed6\u4eec\u65a5\u4e3a\u5931\u8d25\u7684\u539f\u56e0\u6216\u201c\u53ea\u662f\u5de8\u9b54\u201d\u4f1a\u5c06\u95ee\u9898\u964d\u81f3\u6700\u4f4e\uff0c\u5e76\u4e3a\u4ed6\u4eec\u7684\u884c\u4e3a\u63d0\u4f9b\u501f\u53e3\u3002\n\u6211\u77e5\u9053\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u8fd8\u5728\u60f3\u4ec0\u4e48\u3002\u201c\u6211\u540c\u610f\u8fd9\u5f88\u7cdf\u7cd5\uff0c\u4f46\u5f53\u4f60\u628a\u81ea\u5df1\u653e\u5230\u4e92\u8054\u7f51\u4e0a\u65f6\uff0c\u8fd9\u5e94\u8be5\u662f\u610f\u6599\u4e4b\u4e2d\u7684\u3002\u201d\n\u6211\u8ba4\u4e3a\u8fd9\u662f\u80e1\u8bf4\u516b\u9053\u3002\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u5973\u4eba\u6bcf\u6b21\u628a\u81ea\u5df1\u653e\u5230\u7f51\u4e0a\u90fd\u8981\u671f\u5f85\u88ab\u9a9a\u6270\u5462\uff1f\n\u5982\u679c\u4e0d\u77e5\u4f55\u6545\uff0c\u4f60\u5df2\u7ecf\u8d70\u5230\u4e86\u8fd9\u4e00\u6b65\uff0c\u56e0\u4e3a\u4f60\u4ee5\u524d\u66fe\u5728\u533f\u540d\u7684\u5b89\u5168\u6761\u4ef6\u4e0b\u53d1\u8868\u8fc7\u4ee4\u4eba\u4e0d\u5feb\u7684\u8bc4\u8bba\uff0c\u6211\u6566\u4fc3\u4f60\u8003\u8651\u4e00\u4e0b\u4f60\u7684\u8bdd\uff0c\u4ee5\u53ca\u4f60\u662f\u5982\u4f55\u4e3a\u4e0d\u5b89\u5168\u7684\u793e\u533a\u505a\u51fa\u8d21\u732e\u7684\u3002\n\u5e73\u53f0\u548c\u5b83\u4eec\u7684\u7248\u4e3b\u53ef\u4ee5\u4e0d\u518d\u5bf9\u8fd9\u7c7b\u884c\u4e3a\u7741\u4e00\u53ea\u773c\u95ed\u4e00\u53ea\u773c\u3002\u73b0\u5728\u662f\u65f6\u5019\u82b1\u8d39\u4e00\u4e9b\u8d44\u6e90\uff0c\u5236\u5b9a\u660e\u786e\u7684\u89c4\u5219\uff0c\u5e76\u6267\u884c\u5b83\u4eec\u4e86\u3002\u5982\u679c\u8d85\u8fc7\u4e00\u534a\u7684\u4eba\u5728\u4f60\u7684\u5e73\u53f0\u4e0a\u611f\u5230\u4e0d\u5b89\u5168\uff0c\u4f60\u7684\u5e95\u7ebf\u5c06\u65e0\u5173\u7d27\u8981\u3002\n\u6211\u60f3\u6211\u4eec\u90fd\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u5f53\u6211\u4eec\u770b\u5230\u8fd9\u79cd\u884c\u4e3a\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5927\u58f0\u547c\u558a\u5e76\u62a5\u544a\u5b83\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u6211\u4eec\u53ef\u4ee5\u8981\u6c42\u5e76\u671f\u671b\u6211\u4eec\u7684\u793e\u533a\u88ab\u8981\u6c42\u8fbe\u5230\u66f4\u9ad8\u7684\u6807\u51c6\u3002\u6211\u547c\u5401\u4f60\u4eec\u6240\u6709\u4eba\u90fd\u770b\u5230\u5e76\u62a5\u544a\u8fd9\u4e9b\u4e8b\u60c5\u3002\u867d\u7136\u91c7\u53d6\u884c\u52a8\u7684\u8d23\u4efb\u5728\u6211\u4eec\u8eab\u4e0a\u5e76\u4e0d\u7406\u60f3\uff0c\u4f46\u5982\u679c\u6211\u4eec\u770b\u5230\u5b83\u800c\u4e0d\u62a5\u544a\uff0c\u4ec0\u4e48\u90fd\u4e0d\u4f1a\u6539\u53d8\u3002\n\u4e5f\u8bb8\u6709\u4e00\u5929\uff0c\u4e00\u4e2a\u5973\u4eba\u53ef\u4ee5\u6beb\u65e0\u754f\u60e7\u5730\u5728\u4e92\u8054\u7f51\u4e0a\u53d1\u5e03\u4e00\u6bb5\u611a\u8822\u7684\u89c6\u9891\u3002", "note_en": "A few days ago I had an idea for a silly skit that I would post on TikTok. I spent about 5-10 minutes filming it with no script or plan and posted it on  my TikTok and my  Twitter. I went to bed and in the morning was awoken to messages from my friends and acquaintances that I was suddenly on the front page of Reddit.\n  I was excited about going viral and initially happy that people were liking my silly little video, but of course, as a woman with her face and body suddenly in front of millions of people, that faded quickly.\n The video was shared on a programming humor subreddit (without attribution I might add), but my annoyance and fear wasn\u2019t in the missed clout or internet points, but it was that I lost control of being able to delete the post, delete comments, or block commenters when it was posted on a new platform.\n   And how did this impact me personally? While the video was going viral, I felt like prey and couldn\u2019t focus. I knew people were watching, judging, possibly trying to find me elsewhere on the internet to harass me in real-time. I started getting notifications people were trying to log in to my internet accounts. I locked everything down with 2FA (which I should have had anyway). My past experiences have primed me to expect the worse and feel foolish to hope for the best.\n  I reported all of the terrible comments (as did friends) but ~24 hours later, almost none of them had been removed. I reached out to the moderators of the subreddit with an appeal.\n This is my first time being posted on Reddit, and I\u2019m a bit disappointed by the moderation here. There are clearly disgusting sexual comments directed at me and unrelated to the video content or programming humor ranging from the stupid (\u201cboobs\u201d) to the more troublesome - including people directing people to go to my social media to get a better look at my body parts and violent imagery about me. All of these comments I have been reporting over the past 24 hours and very few of them have been removed.\n  I would hope you can be more vigilant about moderating these types of comments because it does not create a very welcoming environment for women in tech. The sub isn\u2019t SexistProgrammerHumor and I am personally seeing and reading these sexualized comments about my body (as are thousands of other people including my friends, partner, acquaintances, and coworkers).\n  I would urge you to please add a new sub rule about these types of comments if you are interested in being a more welcoming place where I would feel comfortable posting my content. Also if a woman is the subject of a viral post, these types of comments and behavior should be expected and nipped in the bud as unacceptable.\n I wasn\u2019t expecting much but the next day I received a response which was basically the best I could have hoped for. I do appreciate the response, and here\u2019s to hoping this doesn\u2019t happen on this sub again, but of course there are thousands of other subs/communities online and other women posting content still out there.\n First I\u2019d like to apologize for what happened here, this is seriously unacceptable and we really screwed up moderating this as the tread should\u2019ve been locked way earlier. I\u2019ve removed most if not all of the offending comments and the most egregious offenders have been permanently banned.\n  We\u2019re definitely going to adjust our rules to ban sexualized comments of any kind, since again any behaviour like this is unacceptable and I\u2019m sorry we didn\u2019t have clearer rules for this earlier.\n  We\u2019re also going to look into enlisting more mods, to help us better manage situations like this.\n  We\u2019re here to help in any way we can, so please don\u2019t hesitate to write back if anything else is going wrong.\n I\u2019m sure some of you have thoughts about this and I will try to address them.\n  Yes, you are correct. And there were some actual \u201ccriticisms\u201d posted that I was able to brush off easily. One example: \u201cYou can see her hand move when she is starting/pausing the filming\u201d. And you\u2019re right! My video editing skills for a silly TikTok I didn\u2019t know was going to go viral were sub-par and this is a valid criticism.\n But there\u2019s a huge difference between a critique of the filming process and threads discussing me personally - everything about how annoying my voice is to debating my breast size (and directing people to go look at my social media to settle the debate). Whether you think these constitute valid criticisms or not, I think we can agree it will make people feel unsafe.\n I didn\u2019t post the video on Reddit myself for this exact reason. I find it to be a pretty toxic place for women and POC. There are places on Reddit where this commentary is allowed and even encouraged (see all the NSFW and controversial subreddits), but a programming humor subreddit allowing this is just continuing the trend of making women feel unwelcome in this industry.\n  While at first, it seems like a solid idea to ignore the haters, so to speak, first of all, if no one is reading the worst comments, we\u2019re not reporting these things so nothing will ever change. Secondly, a discussion that starts as mild can escalate to doxxing, organized dogpiling, or threats. Not knowing that this is happening could be dangerous.\n  When I was in college there were 2 anonymous message boards (YikYak and ACB) where students would post terribly racist and sexist things in addition to harassing individual girls at the school (not me because I wasn\u2019t popular). It\u2019s especially alarming to me that this was at an Ivy League school where most of these kids were raised \u201cwell\u201d and would continue to go on to start companies, go to the best graduate programs, and be the \u201cfuture leaders\u201d of our world. And I\u2019m sure most of these kids would have NEVER said any of those things in person, but being anonymous gives you a strange power and a weird desire to say harmful things.\n I think people rush to dismiss these trolls as \u201cthe scum of the internet incels\u201d, but I think that this is wrong. I think it\u2019s way closer to home than that. I think they are Ivy League grads, fellow software engineers in SF, and people I ride the subway with. Normal people who really live normal lives in real life, but take out some internal rage online under the veil of anonymity.\n Further, I think dismissing them as lost causes or \u201cjust trolls\u201d minimizes the problem and gives an excuse for their behavior.\n I know what some of you are still thinking. \u201cI agree that it\u2019s bad, but when you put yourself out there on the internet, this should be expected\u201d\n I think this is bullshit. Why should a woman have to expect to be harassed every time she puts herself out there online?\n If somehow, you\u2019ve made it this far as someone who has posted a nasty comment under the safety of anonymity before, I urge you to consider your words and how you are contributing to unsafe communities.\n Platforms and their moderators can stop turning a blind eye to this type of behavior. It\u2019s time to spend some resources, set clear rules, and enforce them. Your bottom line won\u2019t matter if more than half of the human race feels unsafe on your platform.\n I think we can all do better. We can call out and report this behavior as unacceptable when we see it. We can ask for and expect our communities to be held to a higher standard. I call on all of you to see and report these things. While it is not ideal that the onus is on us to take action, if we see it and don\u2019t report it, nothing will ever change.\n Maybe one day a woman will be able to post a silly video on the internet without fear.", "posttime": "2020-10-12 07:04:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5973\u6027,woman,\u8bc4\u8bba", "title": "\u4ee5\u79d1\u6280\u5973\u6027\u7684\u8eab\u4efd\u8d70\u7ea2", "title_en": "Going Viral as a Woman in Tech", "transed": 1, "url": "https://www.emilykager.com/writing/2020/10/08/virality.html", "via": "", "real_tags": ["\u5973\u6027", "woman", "\u8bc4\u8bba"]}, {"category": "", "categoryclass": "", "imagename": "2b732fa342e166552128b57bc9a85a49.png", "infoid": 1028188, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u4e2a\u77ed\u7bc7\u5c0f\u8bf4\uff0c\u8bb2\u8ff0\u4e86\u6211\u5982\u4f55\u5c06Airtable\u6863\u6848\u8f6c\u5316\u4e3a920\u4e07\u7f8e\u5143\u7684\u9644\u5e26\u6536\u5165\u3002\u5766\u7387\u5730\u8bf4\uff0c\u5f53\u6211\u63a8\u51fa\u7684\u65f6\u5019\uff0c\u6211\u751a\u81f3\u6ca1\u6709\u60f3\u5230\u5b83\u4f1a\u8d85\u8fc71000\u7f8e\u5143\u3002\u8fd9\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6\uff0c\u4f46\u6211\u60f3\u6211\u5df2\u7ecf\u60f3\u51fa\u4e86\u4e00\u4e9b\u5f88\u7ba1\u7528\u7684\u529e\u6cd5\u3002\n\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u7684\u4e94\u6708\uff0c\u6211\u770b\u5230\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u636e\u5236\u4f5c\u5b83\u7684\u4eba\u8bf4\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u4efd\u53ef\u7a7a\u8fd0\u7684\u6587\u4ef6\uff0c\u4e0a\u9762\u6709\u589e\u957f\u6218\u7565\uff0c\u4ef7\u503c\u7ea63\u5343\u7f8e\u5143\u3002\n\u4e0d\u4e45\u4e4b\u540e\uff0c\u6211\u7ec4\u88c5\u4e86\u6211\u7684\u7b2c\u4e00\u4e2aAirtable\u6587\u4ef6\u7248\u672c\uff0c\u5176\u4e2d\u5305\u542b\u5404\u79cd\u8f6c\u6362\u7b56\u7565\uff0c\u4ee5\u5e2e\u52a9SaaS\u516c\u53f8\u83b7\u5f97\u66f4\u591a\u5ba2\u6237\u548c\u6536\u5165\u3002\n\u8fd9\u4e9b\u4fe1\u606f\u90e8\u5206\u6765\u81ea\u7ecf\u9a8c\uff0c\u90e8\u5206\u6765\u81ea\u4e8e\u770b\u5230\u5176\u4ed6\u4eba\u5728\u8fd9\u4e9b\u7b56\u7565\u4e2d\u53d6\u5f97\u6210\u529f\u3002\u4f60\u770b\uff0c\u6211\u767d\u5929\u662f\u8f6c\u6362\u7387\u987e\u95ee\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u53ef\u4ee5\u628a\u8fd9\u4e9b\u77e5\u8bc6\u6253\u5305\u6210\u4ea7\u54c1\u51fa\u552e\u3002\n\u597d\u4e86\uff0c\u7b80\u5355\u7684\u90e8\u5206\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002\u8fd9\u6b21\u53c8\u662f\u4ec0\u4e48\uff1f\u6ca1\u6709\u89c2\u4f17\u6211\u600e\u4e48\u5356\u5462\uff1f\n\u56e0\u4e3a\u6211\u5df2\u7ecf\u662fWebflow\u7684\u5ba2\u6237\uff0c\u5e76\u4e14\u719f\u6089\u6211\u7684\u65b9\u5f0f\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5efa\u7acb\u4e00\u4e2a\u5feb\u901f\u767b\u5f55\u9875\u9762\u3002\n\u592a\u591a\u4e86\u4ee5\u81f3\u4e8e\u6211\u628a\u5b83\u5f7b\u5e95\u6bc1\u4e86\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u5b83\u7684\u6837\u5b50\uff1a\n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u6539\u8fdb\u4e86\u767b\u5f55\u9875\u9762\uff0c\u4f7f\u4e4b\u6210\u4e3a\u4eca\u5929\u7684\u6837\u5b50\uff0c\u4f46\u5173\u952e\u662f\u5b83\u9700\u8981\u5c3d\u5feb\u5b8c\u6210\u3002\u6211\u7684\u76ee\u6807\u662f\u5c3d\u5feb\u9a8c\u8bc1\u6211\u81ea\u5df1\u7684\u60f3\u6cd5\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u5728\u521b\u4f5c\u4e4b\u524d\u9a8c\u8bc1\u4e00\u4e2a\u60f3\u6cd5\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u5df2\u7ecf\u6709\u5ba2\u6237\u6765\u627e\u6211\u8fdb\u884c\u8f6c\u6362\u5ba1\u8ba1\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u9879\u9700\u6c42\u5f88\u9ad8\u7684\u670d\u52a1\uff0c\u56e0\u6b64\u5b83\u4f5c\u4e3a\u4e00\u79cd\u4ea7\u54c1\u81ea\u7136\u4f1a\u505a\u5f97\u5f88\u597d\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u9664\u4e86\u77e5\u9053\u6709\u4eba\u6765\u627e\u6211\u63d0\u4f9b\u670d\u52a1\u5916\uff0c\u6211\u6ca1\u6709\u6267\u884c\u4efb\u4f55\u5176\u4ed6\u9a8c\u8bc1\u3002\n\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4e0d\u60f3\u8bd5\u7740\u5356\u51e0\u672c\u6765\u786e\u4fdd\u6211\u7684\u9884\u611f\u662f\u6b63\u786e\u7684\u3002\n\u56e0\u4e3a\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u627e\u5230\u4efb\u4f55\u5ba2\u6237\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u91c7\u7528\u72ec\u7acb\u9ed1\u5ba2\u7684\u53e4\u8001\u53e3\u5934\u7985\uff1a\u201c\u516c\u5f00\u6784\u5efa\u201d(&#34\uff1bbuild in public&34\uff1b)\u3002\n\u5f53\u65f6\uff0c\u6211\u7684Twitter\u8d26\u6237\u5927\u7ea6\u6709390\u540d\u7c89\u4e1d\u3002\u6ca1\u6709\uff0c\u6211\u5728\u63a8\u7279\u4e0a\u4e00\u70b9\u4e5f\u4e0d\u6d3b\u8dc3\u3002\n\u540c\u65f6\uff0c\u6211\u4e3a\u72ec\u7acb\u9ed1\u5ba2\u6dfb\u52a0\u4e86Swipe\u529f\u80fd\u3002\u5728\u56de\u590d\u5e16\u5b50\u7684\u540c\u65f6\uff0c\u5f00\u59cb\u5728\u8fd9\u91cc\u548c\u90a3\u91cc\u63d2\u5165\u5b83\uff0c\u53ea\u662f\u4e00\u822c\u5730\u8bd5\u7740\u53d8\u5f97\u6709\u7528\u3002\n\u6211\u8fd8\u52a0\u5165\u4e86IndieLog.com\uff0c\u5728\u90a3\u91cc\u6211\u5f00\u59cb\u4e86\u6211\u7684\u65c5\u7a0b\u3002\u4e8b\u5b9e\u4e0a\uff0c\u76f4\u52308\u6708\u4efd\u6211\u624d\u5206\u4eab\u4e86\u592a\u591a\u5173\u4e8eSwipe\u7684\u5185\u5bb9\u3002\n\u6211\u5df2\u7ecf\u7528\u8c37\u6b4c\u57df\u540d\u6ce8\u518c\u4e86swpe.page\u3002\u5b83\u7684\u4ef7\u683c\u662f36\u7f8e\u5143/\u5e74\u2026\u2026\u3002\u4e0d\u662f\u6700\u4fbf\u5b9c\u7684\uff0c\u4f46\u6211\u5f88\u559c\u6b22\u8fd9\u4e2a\u540d\u5b57\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c\u5728\u8fc7\u53bb\u7684\u65e5\u5b50\u91cc\uff0c\u8425\u9500\u4eba\u5458\u901a\u5e38\u4f1a\u6709\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u91cc\u9762\u5b58\u653e\u7740\u4ee5\u524d\u6d3b\u52a8\u4e2d\u4f7f\u7528\u7684\u8425\u9500\u60f3\u6cd5\uff0c\u5982\u679c\u4f60\u60f3\u77e5\u9053\uff0c\u90a3\u662f\u4e00\u4e2a\u5237\u5361\u6587\u4ef6\u3002\u4ed6\u4eec\u4f1a\u4ed4\u7ec6\u68c0\u67e5\u6587\u4ef6\uff0c\u6311\u51fa\u4e00\u4e9b\u6709\u6548\u7684\u4e1c\u897f\uff0c\u7136\u540e\u518d\u8bd5\u4e00\u6b21\u3002\n\u6211\u8ba4\u4e3a\u8fd9\u662f\u5408\u9002\u7684\uff0c\u56e0\u4e3a\u6211\u7684\u4ea7\u54c1\u7531\u4f60\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u7f51\u7ad9\u4e0a\u5b9e\u65bd\u7684\u60f3\u6cd5\u7ec4\u6210\u3002\n\u4e00\u4f4d\u670b\u53cb\u540e\u6765\u544a\u8bc9\u6211\uff0c\u8c37\u6b4c\u4f1a\u91cd\u65b0\u8bc4\u4f30\u5373\u5c06\u5230\u671f\u7684\u57df\u540d\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u8fd8\u4f1a\u63d0\u9ad8\u4ef7\u683c\u3002\u6211\u731c\u6210\u672c\u53ef\u80fd\u9ad8\u8fbe400\u7f8e\u5143\u3002\u4e0d\u7ba1\u662f\u4e0d\u662f\u771f\u7684\uff0c\u6211\u4e0d\u60f3\u5192\u8fd9\u4e2a\u9669\uff0c\u6240\u4ee5\u6211\u7eed\u8ba2\u4e86\u6211\u7684\u57df\u540d4\u5e74(\u5728\u6211\u5df2\u7ecf\u505a\u4e86\u4e00\u4e9b\u9500\u552e\u4e4b\u540e)\u3002\u5982\u679c\u4f60\u662f\u4ece\u8c37\u6b4c\u57df\u540d\u8d2d\u4e70\u7684\u8bdd\uff0c\u6211\u53ea\u662f\u9700\u8981\u8003\u8651\u4e00\u4e0b\uff01\n\u7b2c\u4e00\u4e2a\u987e\u5ba2\u5728\u767b\u5f55\u9875\u9762\u5b8c\u5168\u662f\u5783\u573e\u7684\u65f6\u5019\u4e70\u4e86\u4e00\u4efd\u5237\u56de\u3002\u6211\u8bbe\u6cd5\u5199\u4e86\u4e00\u4e9b\u5173\u4e8e\u72ec\u7acb\u9ed1\u5ba2\u7684\u7efc\u5408\u6587\u7ae0\u3002\u6709\u4eba\u559c\u6b22\u6211\u5199\u7684\u4e1c\u897f\uff0c\u67e5\u770b\u4e86\u6211\u7684\u4e2a\u4eba\u8d44\u6599\uff0c\u4e70\u4e86\u7b2c\u4e00\u672c\u3002\n\u6211\u5f88\u5f00\u5fc3\uff01\u5728\u4e00\u6b21\u5ba1\u8ba1\u4e2d\u8d5a3000\u7f8e\u5143\u662f\u4e00\u56de\u4e8b\uff0c\u4ece\u4e00\u4ef6\u4ea7\u54c1\u4e2d\u83b7\u5f9787\u7f8e\u5143\u662f\u5b8c\u5168\u4e0d\u540c\u7684\u611f\u89c9\u3002\u4f60\u5fc5\u987b\u4eb2\u8eab\u4f53\u9a8c\u624d\u80fd\u77e5\u9053\u6211\u5728\u8bf4\u4ec0\u4e48\u3002\n\u5f53\u6211\u5728\u5c3d\u53ef\u80fd\u591a\u7684\u5730\u65b9\u8c08\u8bba\u6211\u7684\u4ea7\u54c1\u65f6\uff0c\u6709\u4eba\u544a\u8bc9\u6211\uff0c\u4ed6\u4eec\u8bd5\u56fe\u8d2d\u4e70\u4e00\u4efd\u62f7\u8d1d\uff0c\u4f46\u6211\u7684\u7f51\u7ad9\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\u3002\n\u6211\u4ee5\u6700\u5feb\u7684\u901f\u5ea6\u51b2\u8fc7\u53bb\u770b\u770b\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\u3002\u539f\u6765\uff0c\u6211\u6ca1\u6709WWW\u5230\u975eWWW\u91cd\u5b9a\u5411\u8bbe\u7f6e\uff0c\u6240\u4ee5\u8fd9\u4e2a\u4eba\u65e0\u6cd5\u5230\u8fbe\u529f\u80fd\u7ad9\u70b9\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4e00\u4fee\u590d\u91cd\u5b9a\u5411\uff0c\u90a3\u4e2a\u4eba\u5c31\u4e70\u4e86\u7b2c\u4e8c\u4efdSwipe\u3002\n\u522b\u62c5\u5fc3\uff0c\u6211\u4e0d\u4f1a\u4e00\u4e00\u4ecb\u7ecd\u6211\u662f\u5982\u4f55\u83b7\u5f97\u6bcf\u4e00\u7b14\u4ea4\u6613\u7684\u3002\u4e0d\u8fc7\uff0c\u6211\u60f3\u6211\u5e94\u8be5\u5148\u8c08\u4e00\u8c08\u3002\n\u7b2c\u4e09\u6b21\u62cd\u5356\u6765\u81eaIndieLog.com\u521b\u59cb\u4eba\u8fbe\u8499\u00b7\u9648(Damon Chen)\u3002\u770b\u5230\u6211\u662f\u5982\u4f55\u5728IndieLog\u4e0a\u4e0a\u4f20\u89c6\u9891\u7684\uff0cDamon\u6ce8\u610f\u5230\u4e86\u8fd9\u4e2a\u4ea7\u54c1\uff0c\u5e76\u8d2d\u4e70\u4e86\u4e00\u4efd\u62f7\u8d1d\u3002\u4eca\u5929\uff0c\u6211\u4f1a\u628a\u8fbe\u8499\u89c6\u4e3a\u4eb2\u5bc6\u7684\u670b\u53cb\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u8fc7Twitter DM\u5f7c\u6b64\u4e86\u89e3\u4e86\u5f88\u591a\u3002\n\u4e0b\u4e00\u6279\u9500\u552e\u6765\u81ea\u4e00\u4e2a\u5de8\u5927\u7684IndieHacker\u5e16\u5b50\uff0c\u5728\u90a3\u91cc\u6211\u63d0\u51fa\u514d\u8d39\u6d4f\u89c8\u201c\u4eba\u7269\u201d\u7684\u7f51\u7ad9\uff0c\u5e76\u5f55\u5236\u4e00\u6bb5\u7b2c\u4e00\u5370\u8c61\u89c6\u9891\u3002\n\u8fd9\u4e2a\u5e16\u5b50\u975e\u5e38\u53d7\u6b22\u8fce\uff0c\u6211\u6700\u7ec8\u5f55\u5236\u4e86100\u591a\u4e2a\u89c6\u9891\u3002\u6211\u82b1\u4e863\u5929\u65f6\u95f4\uff01\n\u5c11\u6570\u770b\u8fc7\u6211\u7684\u89c6\u9891\u7684\u4eba\u4e5f\u8ba4\u4e3a\u503c\u5f97\u8d2d\u4e70\u5237\u5361\u3002\n\u968f\u7740\u9500\u552e\u52bf\u5934\u5f00\u59cb\u56de\u5347\uff0c\u6211\u770b\u5230\u4e86\u4e00\u7ebf\u5e0c\u671b\uff0c\u5e76\u8ba4\u4e3a\u901a\u8fc7\u9002\u5f53\u7684\u52aa\u529b\uff0c\u6211\u6700\u7ec8\u53ef\u4ee5\u6269\u5927\u89c4\u6a21\u3002\n\u63a5\u4e0b\u6765\u7684\u4e00\u6b21\u9500\u552e\u662f\u901a\u8fc7\u4e00\u4f4d\u670b\u53cb\u8fdb\u884c\u7684\uff0c\u4ed6\u4e5f\u662f\u6211\u65e9\u671f\u7684\u8001\u677f\u3002\u4ed6\u4eec\u770b\u5230\u4e86\u5237\u5361\u7684\u4ef7\u503c\uff0c\u5e76\u62ff\u8d77\u4e86\u5b83\u3002\n\u9500\u552e#9\u662f\u4e00\u5c01\u51b7\u51b0\u51b0\u7684\u5916\u5c55\u7535\u5b50\u90ae\u4ef6\u3002\u53d1\u9001\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u5c31\u5b8c\u6210\u4e86\u4e00\u7b14\u4ea4\u6613\u3002\u6211\u6b63\u5728\u7b49\u5f85\u518d\u6b21\u6d4b\u8bd5\u8fd9\u4e00\u7b56\u7565\uff0c\u4ee5\u786e\u4fdd\u5b83\u662f\u53ef\u590d\u5236\u7684\u3002\n\u5982\u679c\u4f60\u7b97\u4e86\u4e00\u4e0b\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u6b3e\u4ea7\u54c1\u8d5a\u4e86783\u7f8e\u5143\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u5bf9\u4e8e\u4e00\u4e2a\u6ca1\u6709\u53d7\u4f17\u7684\u65b0\u4ea7\u54c1\u6765\u8bf4\uff0c\u4e5f\u4e0d\u662f\u4ec0\u4e48\u90fd\u6ca1\u6709\u3002\n\u6211\u5f88\u7d27\u5f20\uff0c\u4f46\u5728\u8fbe\u8499\u7684\u9f13\u52b1\u4e0b\uff0c\u6211\u51b3\u5b9a\u5728\u201c\u4ea7\u54c1\u730e\u4eba\u201d\u4e0a\u5206\u4eab\u5237\u5361\u529f\u80fd\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5927\u5927\u6539\u8fdb\u4e86\u6211\u7684\u767b\u5f55\u9875\u9762\u3002\u6211\u4ed4\u7ec6\u68c0\u67e5\u4e86\u6211\u81ea\u5df1\u7684\u4ea7\u54c1\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u68c0\u67e5\u6e05\u5355\uff0c\u5bf9\u6211\u7f51\u7ad9\u7684\u5404\u4e2a\u90e8\u5206\u8fdb\u884c\u4e86\u6cbb\u7597\u3002\n\u4ece\u6587\u6848\u5230\u5934\u6761\uff0c\u793e\u4f1a\u8bc1\u660e\uff0c\u9500\u552e\u4fe1\u51fd\uff0c\u7a00\u7f3a\u6027\uff0c\u7d27\u8feb\u6027--\u5b83\u4eec\u90fd\u5728\u90a3\u91cc\u3002\n\u4e3a\u4e86\u7ed9\u4ea7\u54c1\u589e\u52a0\u4e00\u4e9b\u523a\u6fc0\uff0c\u6211\u5f55\u5236\u4e86\u4e00\u6bb5\u89c6\u9891\uff0c\u4ecb\u7ecd\u4e86\u516b\u6298\u7684\u6298\u6263\u3002\n\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u6574\u4e2a\u542f\u52a8\u8fc7\u7a0b\u7684\u4fe1\u606f\uff0c\u6211\u6b63\u5728\u5199\u4e00\u672c\u7535\u5b50\u4e66\uff0c\u5b83\u8be6\u7ec6\u8bf4\u660e\u4e86\u6574\u4e2a\u8fc7\u7a0b\uff0c\u63d0\u4f9b\u4e86\u4f8b\u5b50\uff0c\u5e76\u5c55\u793a\u4e86\u5982\u4f55\u4e00\u6b65\u4e00\u6b65\u5730\u505a\u540c\u6837\u7684\u4e8b\u60c5\u3002\n\u8fd9\u672c\u7535\u5b50\u4e66\u5217\u51fa\u4e86\u6240\u6709\u7684\u7ec6\u8282\uff0c\u5305\u62ec\u6211\u4e3a\u4e86\u8fbe\u52307.45%\u7684\u9500\u552e\u8f6c\u5316\u7387\u6240\u505a\u7684\u9875\u9762\u4f18\u5316\u3002\u5c31\u5feb\u5b8c\u5de5\u4e86\u3002\u6211\u4f1a\u628a5\u4efd\u8d60\u9001\u7ed9\u6211\u90ae\u5bc4\u540d\u5355\u4e0a\u7684\u4e00\u4e2a\u4eba\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u8fd8\u6ca1\u6709(\u8fd9\u7bc7\u6587\u7ae0\u9876\u90e8\u548c\u4e0b\u65b9\u7684\u7535\u5b50\u90ae\u7bb1)\uff0c\u8bf7\u6ce8\u518c\u3002\n\u7b80\u800c\u8a00\u4e4b\uff0c\u53d1\u5e03\u4f1a\u8fdb\u884c\u5f97\u975e\u5e38\u987a\u5229\uff0c\u6bd4\u9884\u671f\u7684\u8981\u597d\u5f97\u591a\u3002\u6211\u6700\u521d\u7684\u76ee\u6807\u662f1000\u7f8e\u5143\u7684\u9500\u552e\u989d\uff0c\u8fd9\u662f\u6700\u597d\u7684\u60c5\u51b5\uff0c\u4f46\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u91cc\uff0c\u8fd9\u6b3e\u4ea7\u54c1\u5356\u51fa\u4e86\u8fd15000\u7f8e\u5143\u7684\u4ef7\u503c\u3002Product Hunt\u7684\u4e00\u6761\u540e\u7eed\u63a8\u6587\u53c8\u4ea7\u751f\u4e867000\u7b14\u9500\u552e\u989d\u3002\u8bf4\u6211\u5f88\u5f00\u5fc3\u662f\u8f7b\u63cf\u6de1\u5199\u7684\uff01\n\u5728\u6210\u529f\u53d1\u5e03\u540e\uff0c\u6211\u83b7\u5f97\u4e86\u5927\u7ea6100\u540d\u65b0\u7684Twitter\u8ffd\u968f\u8005\u3002\u4e0d\u662f\u8bf4\u6211\u6570\u7684\u662f...\u3002\u8001\u5b9e\u8bf4\uff0c\u6211\u5e76\u4e0d\u5173\u5fc3\u63a8\u7279\u4e0a\u7684\u5173\u6ce8\u8005\u6570\u91cf\uff0c\u6211\u53ea\u60f3\u62a5\u544a\u4e00\u4e0b\u5f71\u54cd\u3002\n\u4e3a\u4e86\u4fdd\u6301\u52bf\u5934\uff0c\u6211\u6210\u7acb\u4e86\u51e0\u4e2a\u65b0\u7684\u5206\u652f\u673a\u6784(\u4ed6\u4eec\u770b\u5230\u6211\u7684\u4ea7\u54c1\u505a\u5f97\u5f88\u597d\uff0c\u60f3\u548c\u6211\u4e00\u8d77\u5356)\u3002\u6211\u7684\u8054\u8425\u516c\u53f8\u5e26\u6765\u4e86\u66f4\u591a\u7684\u9500\u552e\u989d\u3002\u603b\u5171\u5927\u7ea68\u4e2a\u3002\n\u6211\u4e5f\u5f00\u59cb\u5728\u63a8\u7279\u4e0a\u8c08\u8bba\u53d1\u5e03\u672c\u8eab\uff0c\u8fd9\u4f3c\u4e4e\u4ea7\u751f\u4e86\u4e00\u4e9b\u5174\u8da3\u548c\u989d\u5916\u7684\u9500\u552e\u3002\n\u5173\u4e8e\u6211\u7b2c\u4e00\u6b21\u652f\u4ed8GumRoad\u7684\u6700\u65b0\u63a8\u6587\u6709\u5927\u91cf\u7684\u53c2\u4e0e\uff0c\u4e2a\u4eba\u8d44\u6599\u70b9\u51fb\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u4e00\u4e24\u7b14\u4ea4\u6613\u3002\n\u5f53\u7136\uff0c\u6bcf\u5f53\u4e00\u6761\u63a8\u6587\u770b\u8d77\u6765\u8d8a\u6765\u8d8a\u6709\u6d3b\u529b\u65f6\uff0c\u6211\u90fd\u4f1a\u628a\u5b83\u56fa\u5b9a\u5728\u6211\u7684\u4e2a\u4eba\u8d44\u6599\u4e0a\uff0c\u4ee5\u786e\u4fdd\u6bcf\u4e2a\u4eba\u90fd\u80fd\u770b\u5230\u5b83\u3002\n\u6211\u7684\u5237\u5361\u8ba1\u5212\u5f88\u5927\uff0c\u800c\u6211\u624d\u521a\u521a\u5f00\u59cb\u3002\u5c55\u671b\u672a\u6765\uff0c\u6211\u5e0c\u671b\u4e0e\u7ec8\u8eab\u4ea4\u6613\u516c\u53f8\u5408\u4f5c\uff0c\u5411\u66f4\u5e7f\u6cdb\u7684\u53d7\u4f17\u63a8\u51fa\u4ea7\u54c1\u3002\u7531\u4e8e\u6211\u6ca1\u6709\u8ffd\u968f\u8005\uff0c\u751a\u81f3\u6ca1\u6709\u90ae\u4ef6\u5217\u8868\uff0c\u6211\u60f3\u6211\u5b81\u613f\u5411\u5176\u4ed6\u4eba\u7684\u89c2\u4f17\u63a8\u51fa\u3002\n\u5728\u63a8\u5e7fSwipe\u7684\u540c\u65f6\uff0c\u6211\u8fd8\u8ba1\u5212\u5b8c\u6210\u6211\u7684\u53e6\u5916\u4e24\u4e2a\u4ea7\u54c1\uff1aSwipe Growth\u548cSwipe Sell-\u4e00\u4e2a\u7528\u4e8e\u7535\u5b50\u5546\u52a1\u6218\u7565\uff0c\u53e6\u4e00\u4e2a\u7528\u4e8e\u589e\u957f\u6218\u7565\u3002\u5982\u679c\u4f60\u5bf9\u4efb\u4f55\u4e00\u4e2a\u90fd\u6709\u5174\u8da3\uff0c\u8bf7\u8df3\u5230\u90ae\u4ef6\u5217\u8868\u4e0a\u6216\u5728Twitter\u4e0aDM\u7ed9\u6211\u3002\n\u5c31\u9500\u552e\u800c\u8a00\uff0c\u76ee\u524d\u60c5\u51b5\u5df2\u7ecf\u653e\u7f13\u3002\u6211\u4ecd\u7136\u5f97\u52301-2\u9500\u552e\u6bcf\u5929157\u7f8e\u5143\u7684\u6807\u7b7e\uff0c\u4f46\u5f88\u5feb\u7b2c\u4e8c\u5c42\u5c06\u552e\u7f44\uff0c\u4ea7\u54c1\u5c06\u4e0a\u5347\u5230187\u7f8e\u5143\u3002\u6211\u4e0d\u77e5\u9053\u8fd9\u4f1a\u5bf9\u7688\u4f9d\u8005\u9020\u6210\u4ec0\u4e48\u5f71\u54cd\uff0c\u4f46\u6211\u5e0c\u671b\u4e0d\u8981\u592a\u620f\u5267\u5316\u3002\u5982\u679c\u4f60\u8003\u8651\u4e00\u4e0b\u5ba1\u8ba1\u7684\u8d39\u7528\uff0c\u90a3\u4ecd\u7136\u662f\u4e00\u7b14\u4e0d\u5c0f\u7684\u6570\u76ee\u3002\n\u5efa\u9020\u4e00\u4e9b\u4f60\u559c\u6b22\u6216\u4e86\u89e3\u5f88\u591a\u7684\u4e1c\u897f\u3002\u5f53\u4f60\u611f\u89c9\u6ca1\u6709\u4efb\u4f55\u8fdb\u6b65\u65f6\uff0c\u8fd9\u4f1a\u5e2e\u52a9\u4f60\u4fdd\u6301\u52a8\u529b\u3002\n\u4ece\u7b2c\u4e00\u5929\u5f00\u59cb\u516c\u5f00\u5efa\u8bbe\u3002\u5efa\u7acb\u4e00\u4e2a\u7f51\u7ad9/\u535a\u5ba2/\u4efb\u4f55\u4e1c\u897f\uff0c\u7136\u540e\u5728\u4e0a\u9762\u8d34\u4e0a\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u6536\u96c6\u7bb1\u3002\u5c31\u50cf\u6211\u5728\u8fd9\u91cc\u505a\u7684\u4e00\u6837\u3002\u4f60\u7684\u76ee\u6807\u5e94\u8be5\u662f\u4ece\u7b2c\u4e00\u5929\u8d77\u5c31\u5c3d\u53ef\u80fd\u591a\u5730\u5206\u4eab\u4f60\u7684\u60f3\u6cd5\uff0c\u5e76\u5728\u5b83\u5f62\u6210\u65f6\u8bb0\u5f55\u4e0b\u6765\u3002\n\u4f5c\u4e3a\u516c\u5171\u5efa\u8bbe\u7684\u4e00\u90e8\u5206\uff0c\u5f00\u59cb\u6bcf\u5929\u81f3\u5c11\u53d18\u6b21\u5173\u4e8e\u4f60\u7684\u9879\u76ee\u548c\u76f8\u5173\u6982\u5ff5/\u4e3b\u9898\u7684\u63a8\u7279\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8fd9\u770b\u8d77\u6765\u4f3c\u4e4e\u5f88\u591a\uff0c\u4f46\u6700\u7ec8\u4f60\u4e0d\u9700\u8981\u601d\u8003\u5c31\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u662f\u7684\uff0c\u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\uff0c\u5b83\u4e0d\u662f\u5b8c\u5168\u5173\u952e\u7684\uff0c\u4f46\u4f1a\u6709\u5f88\u5927\u5e2e\u52a9\uff01\u5982\u679c\u4f60\u5df2\u7ecf\u5728\u63a8\u7279\u4e0a\u6709\u4e86\u8ffd\u968f\u8005\uff0c\u90a3\u5c31\u592a\u68d2\u4e86\uff01\n\u5f00\u59cb\u5728\u76f8\u5173\u7f51\u7ad9\u4e0a\u5171\u4eab\u3002\u5f53\u4f60\u5728\u516c\u5171\u573a\u5408\u5efa\u7acb\u548c\u53d1\u5e03\u63a8\u7279\u65f6\uff0c\u5f00\u59cb\u5728\u4e0e\u4f60\u7684\u4ea7\u54c1\u76f8\u5173\u7684\u7f51\u7ad9\u4e0a\u5206\u4eab\u4f60\u7684\u5185\u5bb9\u3001\u5b66\u4e60\u77e5\u8bc6\u6216\u53d1\u73b0\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u5b83\u662f\u72ec\u7acb\u9ed1\u5ba2\u3002\n\u5f00\u59cb\u4e0eTwitter DM\u4e2d\u7684\u4eba\u8054\u7cfb\u3002\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u72af\u4e00\u4e2a\u5de8\u5927\u7684\u9519\u8bef--\u4ed6\u4eec\u5728\u7f51\u7ad9\u4e0a\u4e92\u52a8\uff0c\u7136\u540e\u5c31\u5230\u6b64\u4e3a\u6b62\u4e86\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5f53\u4f60\u5728\u4e92\u52a8\u5e76\u6ce8\u610f\u5230\u6709\u4eba\u4ee5\u79ef\u6781\u7684\u65b9\u5f0f\u8bc4\u8bba\u4f60\u7684\u4e8b\u60c5\u65f6\uff0c\u5728Twitter\u4e0a\u8054\u7cfb\u4ed6\u4eec\uff0c\u5e76\u5f00\u59cb\u5bf9\u8bdd\u3002\u4e86\u89e3\u4ed6\u4eec\uff0c\u4e86\u89e3\u4ed6\u4eec\u7684\u5de5\u4f5c\uff0c\u4e86\u89e3\u4ed6\u4eec\u7684\u52a8\u529b\u3002\u4fdd\u6301\u771f\u8bda\u7684\u597d\u5947\u5fc3\u3002\u6211\u4eec\u7684\u76ee\u6807\u4e0d\u662f\u63a8\u9500\u4f60\u7684\u4e1c\u897f\u3002\u4f60\u53ea\u662f\u60f3\u5efa\u7acb\u8054\u7cfb\uff0c\u5e0c\u671b\u662f\u53cb\u8c0a\u3002\u6211\u7528\u8fd9\u79cd\u65b9\u5f0f\u5728\u63a8\u7279\u4e0a\u4ea4\u4e86\u5f88\u591a\u670b\u53cb\u3002\n\u5982\u679c/\u5f53\u542f\u52a8Product Hunt\u65f6\uff0c\u8bf7\u8054\u7cfb\u60a8\u7684\u6240\u6709\u8054\u7cfb\u4eba\uff0c\u5e76\u5728\u60a8\u5f00\u59cb\u4e4b\u524d\u8ba9\u4ed6\u4eec\u77e5\u9053\u3002\u8bf7\u6c42\u4ed6\u4eec\u7684\u652f\u6301\u3002\u4ed6\u4eec\u6700\u521d\u7684\u652f\u6301\u5c06\u5bf9\u60a8\u7684\u53d1\u5e03\u4ea7\u751f\u5de8\u5927\u7684\u5f71\u54cd\u3002\u7a0d\u540e\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u8d28\u91cf\u5c06\u51b3\u5b9a\u5b83\u662f\u5982\u4f55\u7ed3\u675f\u7684\u3002\n\u786e\u4fdd\u60a8\u7684\u767b\u5f55\u9875\u9762\u5904\u4e8e\u6700\u4f73\u72b6\u6001\u3002\u6211\u4f1a\u521b\u5efa\u53e6\u4e00\u4e2a\u5e16\u5b50\uff0c\u8be6\u7ec6\u89e3\u91ca\u4f60\u9700\u8981\u7684\u4e00\u5207\u3002\u6ce8\u518c\u7535\u5b50\u90ae\u4ef6\u66f4\u65b0\u5373\u53ef\u83b7\u5f97\u8be5\u5e16\u5b50\u3002\n\u7b49\u5230\u4f60\u6709\u4e86\u793e\u4f1a\u8bc1\u660e--\u4e00\u4e24\u4efd\u5ba2\u6237\u8bc1\u660e--\u518d\u53d1\u5e03\u3002\u8fd9\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff01\n\u5f53\u5728PH\u4e0a\u63a8\u51fa\u65f6\uff0c\u8003\u8651\u63d0\u4f9b\u7ec8\u8eab\u4f18\u60e0\u6216\u81f3\u5c11\u6bcf\u5e74\u4e00\u6b21\u7684\u6298\u6263\uff0c\u8fd9\u5c06\u6bd4\u4f60\u5728\u63a8\u51fa\u540e\u63d0\u4f9b\u7684\u4efb\u4f55\u4e1c\u897f\u90fd\u8981\u597d\u3002\u9f13\u52b1\u4eba\u4eec\u73b0\u5728\u5c31\u8d2d\u4e70\u3002\n\u5982\u679c\u60a8\u613f\u610f\uff0c\u53ef\u4ee5\u5c06\u4ea4\u6613\u9650\u5236\u572824\u5c0f\u65f6\u5185-\u589e\u52a0\u7684\u7d27\u8feb\u6027\u53ef\u80fd\u975e\u5e38\u6709\u76ca\u3002\u5982\u679c\u60a8\u613f\u610f\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u5176\u4ed6\u8fc7\u671f\u95f4\u9694\u548c\u8ba1\u65f6\u5668\u3002\n\u5728\u53d1\u5e03\u8fc7\u7a0b\u4e2d\u4fdd\u6301\u6d3b\u8dc3\uff0c\u56de\u7b54\u95ee\u9898\uff0c\u56de\u590d\u63a8\u6587\uff0c\u5728\u4f60\u80fd\u60f3\u5230\u7684\u4efb\u4f55\u5730\u65b9\u53d1\u5e16\u3002\u56de\u590d\u6240\u6709\u8bc4\u8bba\uff0c\u7279\u522b\u662f\u5173\u4e8e\u201c\u4ea7\u54c1\u730e\u5934\u201d\u7684\u8bc4\u8bba\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u589e\u52a0\u53c2\u4e0e\u5ea6\uff0c\u5e76\u5e2e\u52a9\u60a8\u7684\u7269\u54c1\u4fdd\u6301\u5728\u66f4\u9ad8\u7684\u4f4d\u7f6e\u3002\n\u8003\u8651\u4e3e\u529e\u4e00\u573a\u63a8\u7279\u5927\u8d5b\uff0c\u4f60\u53ef\u4ee5\u5728\u63a8\u7279\u4e0a\u514d\u8d39\u8d60\u9001\u51e0\u4efd\u4f60\u7684\u4ea7\u54c1\uff0c\u4ee5\u6362\u53d6\u8f6c\u53d1\u3002\u8fd9\u53ef\u4ee5\u5e2e\u52a9\u66f4\u5feb\u5730\u4f20\u64ad\u4fe1\u606f\u3002\n\u8bd5\u8bd5\u51b7\u6de1\u7684\u5916\u5c55--\u6548\u679c\u6bd4\u5927\u591a\u6570\u4eba\u60f3\u8c61\u7684\u8981\u597d\u5f97\u591a\u3002\u6211\u5728Swipe\u6587\u4ef6\u4e2d\u6982\u8ff0\u4e86\u4e00\u4e2a\u7b56\u7565\uff0c\u4f46\u7a0d\u540e\u6211\u4e5f\u4f1a\u5728\u535a\u5ba2\u4e2d\u4ecb\u7ecd\u5b83\u3002\n\u4e0d\u8981\u4e3a\u6269\u5927\u53d7\u4f17\u800c\u62c5\u5fc3\u592a\u591a\u3002\u6211\u7684\u610f\u601d\u662f\u8fd9\u4f1a\u6709\u5e2e\u52a9\uff0c\u4f46\u771f\u6b63\u7684\u4eba\u9645\u5173\u7cfb\u8981\u5f3a\u5927\u5f97\u591a\u3002\u6211\u8bd5\u56fe\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u4e0eDMS\u4e2d\u7684\u4eba\u4ea4\u8c08\uff0c\u800c\u4e0d\u662f\u62c5\u5fc3\u8ffd\u968f\u8005\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u7528uBlock\u5c4f\u853d\u4e86\u81ea\u5df1\u7684\u8ffd\u968f\u8005\u6570\u91cf\uff0c\u4e0d\u77e5\u9053\u67d0\u4eba\u62e5\u6709\u4ec0\u4e48\u865a\u8363\u5730\u4f4d\uff0c\u611f\u89c9\u597d\u591a\u4e86\u3002\u53ea\u8981\u548c\u4eba\u4eec\u4ea4\u8c08\uff0c\u4e86\u89e3\u4ed6\u4eec\u5c31\u884c\u4e86\u3002\n\u5982\u679c\u4f60\u559c\u6b22\u8bfb\u8fd9\u7bc7\u6587\u7ae0\uff0c\u53ef\u4ee5\u8003\u8651\u8ddf\u6211\u4e00\u8d77\u8d70\u3002\u6211\u5c06\u5206\u4eab\u6211\u6240\u6709\u7684\u53d1\u73b0\uff0c\u6211\u6240\u505a\u7684\u4e00\u5207\uff0c\u7ed3\u679c(\u597d\u7684\u6216\u574f\u7684)\u3002\u6211\u7684\u76ee\u6807\u662f\u5c06\u8fd9\u4e00\u5207\u516c\u4e4b\u4e8e\u4f17\uff0c\u8fd9\u6837\u6bcf\u4e2a\u4eba\u90fd\u6709\u673a\u4f1a\u5728\u5e55\u540e\u8fbe\u5230\u9876\u5cf0\uff0c\u770b\u5230\u6574\u4e2a\u8fc7\u7a0b\u3002\u611f\u8c22\u60a8\u7684\u9605\u8bfb!", "note_en": "This is a short story of how I turned an Airtable file into $9.2k in side income. Just to be honest up front, I\u00a0did not expect it to even pass $1k when I launched. It&#39;s a bit of a surprise, but I\u00a0think I\u00a0figured out a few things that worked well.\n    Earlier this year in May, I saw something interesting. I stumbled across an airtable file with growth strategies that sold ~3k worth according to the person who made it.\n   Some time shortly after, I assembled my first version of an airtable file that contained various conversion strategies to help SaaS companies get more customers and revenue.\n The info came part from experience and part from seeing others succeed with some of these strategies. You see, I am conversion rate consultant by day, so I figured I could package some of this knowledge and sell it as a product.\n Ok, so the easy part was done. Now what? How do I sell without an audience?\n  Since I was already a customer of Webflow and knew my way around, I decided to put up a quick landing page.\n  So much so that I completely gutted it. You can see what it looked like here:\n  Over time I refined the landing page into what it is today, but the point is that it needed to be done quickly. My goal was to validate my own idea as quickly as possible.\n  Normally you validate an idea BEFORE you create something. But, since I already had customers who came to me for conversion audits, I figured this was a service in high demand, so it would naturally do well as a product.\n In short, I performed no other validation aside from knowing people come to me for a service.\n However, this doesn&#39;t mean I didn&#39;t want to try and sell a few copies to make sure my hunch was right.\n Since I had no idea how to find any customers, I decided to take up the old indie hacker mantra: &#34;build in public&#34;.\n  At the time, my twitter account had about 390 followers. Nope, I was not active on Twitter at all.\n  At the same time, I added Swipe to Indie Hackers. Started plugging it here and there while answering posts and just generally trying to be useful.\n   I also joined IndieLog.com where I started vlogging my journey. I actually did not share much about Swipe until August.\n   I\u00a0used Google Domains to register swipe.page. It was going for $36/year ... not the cheapest but I\u00a0loved the name. In case you are wondering, a &#34;swipe file&#34;\u00a0is something marketers used to have in the olden days where they would literally have a folder with marketing ideas used in previous campaigns. They&#39;d go through the file and pick out something that has worked and try it again.\n I\u00a0thought this would be appropriate considering my product consisted of ideas you can implement on your own website.\n A friend later told me that Google &#34;re-evaluates&#34; expiring domains and raises prices in some cases. I\u00a0guess the cost could go up to as much as $400. True or not, I didn&#39;t want to risk it so I\u00a0renewed my domain for 4 years (after I&#39;ve already made some sales).\u00a0Just something to think about if you are buying from Google Domains!\n   The first customer purchased a copy of Swipe back when the landing page was total junk. I managed to write some comprehensive article on Indie Hackers. Someone liked what I wrote, checked out my profile and bought the first copy.\n  I was pretty happy! It&#39;s one thing to make $3k on an audit, and a totally different feeling getting $87 from a product. You have to experience it to know what I&#39;m talking about.\n  While talking about my product in as many places as I could, someone told me they tried to purchase a copy but my website was not working.\n I rushed as quickly as I could to see what was happening. It turns out, I didn&#39;t have www to non-www redirect setup so the person could not get to the functional site.\n Luckily, as soon as I fixed the redirect, that person bought the 2nd copy of Swipe.\n  Don&#39;t worry, I won&#39;t go into how I got every sale one by one... but I thought I&#39;d cover the first handful.\n The 3rd sale came from the founder of  IndieLog.com Damon Chen. Seeing how I was uploading videos on IndieLog, Damon noticed the product and purchased a copy. Today, I would consider Damon a close friend as we&#39;ve gotten to know each other a lot over Twitter DMs.\n  The next batch of sales came from a huge IndieHacker thread where I offered to glance at people&#39;s websites for free and record a first impression video.\n  The thread was received so well that I ended up recording over 100 videos. It took me 3 days!\n   A handful of people who saw my videos also decided it was worth buying Swipe.\n As the momentum for sales started picking up, I saw a glimmer of hope, and thought that with appropriate effort I could eventually scale it up.\n  One of the next sales came through a friend who was also my boss early on. They saw value in Swipe and picked it up.\n Sale #9 was a cold outreach email. One email sent, one sale made. I am waiting to test this strategy again to make sure it is replicable.\n  If you did the math, by now the product made $783. Peanuts to most, but not nothing for a new product with no audience.\n I was very nervous, but with Damon&#39;s encouragement, decided to share Swipe on Product Hunt.\n At this point, I refined my landing page significantly.  I went through my own product and used it as a checklist to apply treatment to various parts of my website.\n From copy to headlines, social proof, sales letter, scarcity, urgency \u2014 it was all there.\n To add some excitement to the product, I recorded a video where I introduced a 20% OFF discount.\n  If you are curious to read more about the entire launch process, I am writing an ebook that spells out the entire process, provides examples and shows how you can do the same STEP\u00a0BY\u00a0STEP.\n  This ebook spells out all of the details including the page optimizations I made to get to 7.45% sale conversion rate. It is almost finished. I&#39;m going to give away 5 copies to a random person on my mailing list, so sign up if you haven&#39;t (email box at the top and below this article).\n  In short, the launch went really well, much better than expected. I set my initial goal to $1k sales as a best case scenario, but in the following few days the product sold almost $5,000 worth. A followup tweet from Product Hunt generated another 7 sales. \u00a0To say that I was happy is an understatement!\n  After the successful launch, I gained about 100 new Twitter followers. Not that I was counting... I\u00a0honestly don&#39;t care about Twitter follower numbers, just wanted to report the effects.\n To keep the momentum going, I set up a few new affiliates (who saw that my product did well and wanted to sell it with me). My affiliates brought in more sales. About 8 in total.\n I also started tweeting about the launch itself, and that seems to have generated some interest and additional sales.\n The most recent tweet about my first Gumroad payout had a ton of engagement, profile clicks, and I think lead to a sale or two.\n  Of course, any time a tweet seems to pick up steam, I pin it to my profile to make sure everyone sees it.\n  My plans for Swipe are pretty big and I am just getting started. Going forward, I am looking to partner with lifetime deal companies to launch to wider audiences. Since I don&#39;t have a following or even a mailing list, I figured I&#39;d rather launch to other people&#39;s audiences.\n   While promoting Swipe, I also plan to finish my other 2 products: Swipe Grow, and Swipe Sell \u2014 one for ecommerce strategies and one for growth strategies. If you have any interest in either, hop on the mailing list or DM\u00a0me on Twitter.\n In terms of sales, things have slowed down for now. I am still getting 1-2 sales per day at $157 price tag, but soon the 2nd tier will sell out and the product will go up to $187. I don&#39;t know what that will do to conversions but I hope nothing too dramatic. If you consider the cost of an audit, it&#39;s still a great deal.\n  Build something you enjoy, or know a lot about. This will help you stay motivated when it feels like you are not making any progress.\n Start building in public from day 1. Put up a website / blog / whatever, and slap an email collection box on it. Just like I did here. Your goal should be to share as much as possible about your idea from day 1, and document it as it gets built.\n As part of building in public, start tweeting about your project and related concepts / topics at least 8 times a day. For most, this will seem like a lot, but eventually you will be fine doing it without thinking. Yes, you can skip this step, it is not totally crucial but it will help a lot! If you already have a Twitter following, great!\n Start sharing on relevant sites. While you build in public and tweet, start sharing your content, learnings or findings on sites relevant to your product. For me it was IndieHackers.\n Start connecting with people in Twitter DMs. Most people make a huge mistake - they interact on sites, and leave it at that. Instead, while you are interacting and notice someone comment on your things in a positive way, reach out to them on Twitter and strike up a conversation. Get to know them, their work, what drives them. Be genuinely curious. The goal is not to pitch your stuff. You just want to make connections and hopefully friendships. I made many friends this way on Twitter.\n If / when launching on Product Hunt, reach out to all of your contacts and let them know right before you do it. Ask for their support. The initial push from their support is going to make a HUGE difference in your launch. Later on, as the day goes, your product&#39;s quality will determine how it finishes.\n Make sure your landing page is in tip top shape. I will create another post explaining everything you need to have, in detail. Sign up for email updates to get that post.\n Wait to launch until you have social proof - a customer testimonial or two. This makes a big difference!\n When launching on PH, consider offering a lifetime deal or at least an annual discount that will be better than anything you offer after the launch. Give people an incentive to buy now.\n Make the deal limited to 24 hours if you want \u2014 the added urgency can be highly beneficial. You can play around with other expiration intervals and timers if you like.\n Stay active during the launch, answer questions, reply to tweets, post everywhere you can think of. Respond to all comments, especially on Product Hunt as that creates engagement and helps your listing stay up higher.\n Consider holding a Twitter contest where you give away a few copies to your product for free for a retweet. This can help spread the word faster.\n  Try cold outreach - it works a lot better than most think. I outlined a strategy in the Swipe file, but I will also blog about it later.\n  Don&#39;t worry about growing an audience too much. I\u00a0mean it helps, but genuine human connections are much more powerful. I try to spend more time talking to people in\u00a0DMs than I do on worrying about followers. In fact, I\u00a0blocked my own follower numbers with uBlock and feel much better not knowing what vanity status someone posses. Just talk to people and get to know them.\n  If you enjoyed reading this, consider following me on my journey. I\u00a0will share all of my findings, everything I&#39;ve done, the results (good or bad). My goal is to make all of this public so everyone has a chance to peak behind the curtains and see the entire process. Thank you for reading!", "posttime": "2020-10-12 07:02:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9644\u5e26,side,\u4ea7\u54c1", "title": "\u4ece\u4e00\u5f20\u98de\u673a\u5230920\u4e07\u7f8e\u5143\u7684\u9644\u5e26\u6536\u5165", "title_en": "From an Airtable to $9.2k in Side Income", "transed": 1, "url": "https://www.swipe.page/p/from-an-airtable-to-10k-in-side-income", "via": "", "real_tags": ["\u9644\u5e26", "side", "\u4ea7\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "1497c468b49408673e261e152126bdde.jpg", "infoid": 1028187, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u5c0f\u7684\u6c14\u6ce1\u53ef\u4ee5\u89e3\u51b3\u5927\u95ee\u9898\u3002\u76f4\u5f84\u7ea61-50\u5fae\u7c73\u7684\u5fae\u6ce1\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002\u5b83\u4eec\u7528\u4e8e\u836f\u7269\u8f93\u9001\u3001\u819c\u6e05\u6d17\u3001\u751f\u7269\u819c\u63a7\u5236\u548c\u6c34\u5904\u7406\u3002\u5b83\u4eec\u5df2\u7ecf\u4f5c\u4e3a\u81f4\u52a8\u5668\u5e94\u7528\u4e8e\u5fae\u6d41\u63a7\u6df7\u5408\u3001\u55b7\u58a8\u6253\u5370\u548c\u903b\u8f91\u7535\u8def\u7684\u82af\u7247\u5b9e\u9a8c\u5ba4\u8bbe\u5907\uff0c\u4ee5\u53ca\u5149\u7535\u5b50\u5149\u523b\u548c\u5149\u5b66\u8c10\u632f\u5668\u3002\u4ed6\u4eec\u5728\u751f\u7269\u533b\u5b66\u6210\u50cf\u548cDNA\u6355\u83b7\u548c\u64cd\u7eb5\u7b49\u5e94\u7528\u9886\u57df\u505a\u51fa\u4e86\u5de8\u5927\u8d21\u732e\u3002\u9274\u4e8e\u5fae\u6ce1\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u5df2\u7ecf\u5f00\u53d1\u4e86\u8bb8\u591a\u4ea7\u751f\u5fae\u6ce1\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u5c06\u7a7a\u6c14\u6eb6\u89e3\u4e3a\u6db2\u4f53\u7684\u6c14\u6d41\u538b\u7f29\u65b9\u6cd5\uff0c\u5728\u6c34\u4e2d\u8bf1\u5bfc\u6c14\u6ce1\u7684\u8d85\u58f0\u6ce2\uff0c\u4ee5\u53ca\u66b4\u9732\u6d78\u6ce1\u5728\u6db2\u4f53\u4e2d\u7684\u57fa\u8d28\u7684\u6fc0\u5149\u8109\u51b2\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6c14\u6ce1\u5f80\u5f80\u662f\u968f\u673a\u5206\u6563\u5728\u6db2\u4f53\u4e2d\u7684\uff0c\u800c\u4e14\u76f8\u5f53\u4e0d\u7a33\u5b9a\u3002\n\u65af\u6e29\u672c\u7406\u5de5\u5927\u5b66\u5e73\u79fb\u539f\u5b50\u6750\u6599\u4e2d\u5fc3\u7684\u6559\u6388\u517c\u521b\u59cb\u4e3b\u4efb\u8d3e\u5b9d\u534e\u8868\u793a\uff0c\u5bf9\u4e8e\u9700\u8981\u7cbe\u786e\u7684\u6c14\u6ce1\u4f4d\u7f6e\u548c\u5927\u5c0f\uff0c\u4ee5\u53ca\u9ad8\u7a33\u5b9a\u6027\u7684\u5e94\u7528-\u4f8b\u5982\uff0c\u5728\u6210\u50cf\u548c\u6355\u83b7\u7b49\u5149\u5b50\u5e94\u7528\u4e2d-\u5728\u7cbe\u786e\u4f4d\u7f6e\u521b\u5efa\u4f53\u79ef\u3001\u66f2\u7387\u548c\u7a33\u5b9a\u6027\u53ef\u63a7\u7684\u6c14\u6ce1\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u8d3e\u5b9d\u534e\u89e3\u91ca\u8bf4\uff0c\u4e3a\u4e86\u96c6\u6210\u5230\u751f\u7269\u6216\u5149\u5b50\u5e73\u53f0\u4e2d\uff0c\u4f7f\u7528\u4e0e\u5f53\u524d\u52a0\u5de5\u6280\u672f\u517c\u5bb9\u7684\u6280\u672f\u5236\u9020\u826f\u597d\u63a7\u5236\u548c\u7a33\u5b9a\u7684\u5fae\u6c14\u6ce1\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002\n\u8d3e\u8dc3\u4ead\u548c\u6765\u81ea\u65af\u6e29\u672c\u7406\u5de5\u5927\u5b66\u7684\u540c\u4e8b\u6700\u8fd1\u4e0e\u65b0\u52a0\u5761\u56fd\u7acb\u5927\u5b66\u3001\u7f57\u683c\u65af\u5927\u5b66\u3001\u58a8\u5c14\u672c\u5927\u5b66\u548c\u83ab\u7eb3\u4ec0\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u5408\u4f5c\uff0c\u5f00\u53d1\u4e86\u4e00\u79cd\u4f7f\u7528\u6fc0\u5149\u8109\u51b2\u5728\u73bb\u7483\u8868\u9762\u4ea7\u751f\u7cbe\u786e\u63a7\u5236\u7684\u77f3\u58a8\u70ef\u5fae\u6ce1\u7684\u65b9\u6cd5\u3002\u4ed6\u4eec\u7684\u62a5\u544a\u53d1\u8868\u5728\u540c\u884c\u8bc4\u8bae\u7684\u5f00\u653e\u83b7\u53d6\u671f\u520a\u201c\u9ad8\u7ea7\u5149\u5b50\u5b66\u201d\u4e0a\u3002\n\u8be5\u5c0f\u7ec4\u4f7f\u7528\u4e86\u77f3\u58a8\u70ef\u6c27\u5316\u7269\u6750\u6599\uff0c\u5b83\u7531\u88c5\u9970\u6709\u6c27\u5b98\u80fd\u56e2\u7684\u77f3\u58a8\u70ef\u8584\u819c\u7ec4\u6210\u3002\u6c14\u4f53\u4e0d\u80fd\u7a7f\u900f\u6c27\u5316\u77f3\u58a8\u70ef\u6750\u6599\uff0c\u56e0\u6b64\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u6fc0\u5149\u5c40\u90e8\u7167\u5c04\u6c27\u5316\u77f3\u58a8\u70ef\u8584\u819c\uff0c\u4ea7\u751f\u6c14\u4f53\u5c01\u88c5\u5728\u8584\u819c\u5185\uff0c\u5f62\u6210\u5fae\u6ce1\u72b6\u7684\u6c14\u7403\u3002\u65af\u6e29\u672c\u5927\u5b66\u9ad8\u7ea7\u7814\u7a76\u5458\u3001\u8fd9\u7bc7\u8bba\u6587\u7684\u7b2c\u4e00\u4f5c\u8005\u97e9\u6797\u89e3\u91ca\u8bf4\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6fc0\u5149\u53ef\u4ee5\u5f88\u597d\u5730\u63a7\u5236\u5fae\u6ce1\u7684\u4f4d\u7f6e\uff0c\u5e76\u53ef\u4ee5\u968f\u610f\u521b\u5efa\u548c\u6d88\u9664\u5fae\u6ce1\u3002\u540c\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\u7167\u5c04\u9762\u79ef\u548c\u7167\u5c04\u529f\u7387\u6765\u63a7\u5236\u6c14\u4f53\u7684\u91cf\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u5b9e\u73b0\u9ad8\u7cbe\u5ea6\u3002\n\u8fd9\u79cd\u9ad8\u8d28\u91cf\u7684\u6c14\u6ce1\u53ef\u7528\u4e8e\u9ad8\u7cbe\u5ea6\u8981\u6c42\u7684\u5148\u8fdb\u5149\u7535\u548c\u5fae\u673a\u68b0\u5668\u4ef6\u3002\n\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u6c27\u5316\u77f3\u58a8\u70ef\u8584\u819c\u7684\u9ad8\u5ea6\u5747\u5300\u6027\u4ea7\u751f\u4e86\u5177\u6709\u5b8c\u7f8e\u7403\u9762\u66f2\u7387\u7684\u5fae\u6ce1\uff0c\u53ef\u4ee5\u7528\u4f5c\u51f9\u9762\u53cd\u5c04\u900f\u955c\u3002\u4f5c\u4e3a\u5c55\u793a\uff0c\u4ed6\u4eec\u4f7f\u7528\u51f9\u9762\u53cd\u5c04\u900f\u955c\u6765\u805a\u7126\u5149\u7ebf\u3002\u7814\u7a76\u5c0f\u7ec4\u62a5\u544a\u8bf4\uff0c\u8fd9\u79cd\u955c\u5934\u5448\u73b0\u51fa\u975e\u5e38\u597d\u7684\u9ad8\u8d28\u91cf\u7126\u70b9\uff0c\u53ef\u4ee5\u4f5c\u4e3a\u663e\u5fae\u6210\u50cf\u7684\u5149\u6e90\u3002\n\u6797\u89e3\u91ca\u8bf4\uff0c\u53cd\u5c04\u955c\u8fd8\u80fd\u591f\u5c06\u4e0d\u540c\u6ce2\u957f\u7684\u5149\u805a\u7126\u5728\u540c\u4e00\u7126\u70b9\u4e0a\uff0c\u800c\u4e0d\u4f1a\u51fa\u73b0\u8272\u5dee\u3002\u8be5\u56e2\u961f\u5c55\u793a\u4e86\u8d85\u5bbd\u5e26\u767d\u5149\u7684\u805a\u7126\uff0c\u8986\u76d6\u4e86\u53ef\u89c1\u5149\u5230\u8fd1\u7ea2\u5916\u8303\u56f4\uff0c\u5e76\u5177\u6709\u540c\u6837\u7684\u9ad8\u6027\u80fd\uff0c\u8fd9\u5728\u7d27\u51d1\u578b\u663e\u5fae\u955c\u548c\u5149\u8c31\u5b66\u4e2d\u7279\u522b\u6709\u7528\u3002\n\u8d3e\u8dc3\u4ead\u8868\u793a\uff0c\u8fd9\u9879\u7814\u7a76\u63d0\u4f9b\u4e86\u4e00\u79cd\u9014\u5f84\uff0c\u53ef\u4ee5\u968f\u610f\u4ea7\u751f\u9ad8\u5ea6\u53ef\u63a7\u7684\u5fae\u6ce1\uff0c\u5e76\u5c06\u5fae\u6ce1\u6574\u5408\u4e3a\u5fae\u578b\u82af\u7247\u5b9e\u9a8c\u5ba4\u8bbe\u5907\u7684\u52a8\u6001\u548c\u9ad8\u7cbe\u5ea6\u7eb3\u7c73\u5149\u5b50\u7ec4\u4ef6\uff0c\u4ee5\u53ca\u5728\u9ad8\u5206\u8fa8\u7387\u5149\u8c31\u5b66\u548c\u533b\u5b66\u6210\u50cf\u65b9\u9762\u7684\u5e7f\u6cdb\u6f5c\u5728\u5e94\u7528\u3002\u66f4\u591a\u4fe1\u606f\uff1a\u97e9\u6797\u7b49\u4eba\uff0c\u57fa\u4e8e\u77f3\u58a8\u70ef\u5fae\u6ce1\u7684\u8fd1\u4e4e\u5b8c\u7f8e\u7684\u5fae\u900f\u955c\uff0c\u9ad8\u7ea7\u5149\u5b50\u5b66(2020)\u3002DOI\uff1a10.1117/1.AP.2.5.055001\n\u5f15\u7528\uff1a\u77f3\u58a8\u70ef\u5fae\u6ce1\u5236\u9020\u5b8c\u7f8e\u955c\u7247(2020\u5e74\uff0c10\u67089\u65e5)\uff0c\u4ecehttps://phys.org/news/2020-10-graphene-microbubbles-lenses.html\u68c0\u7d22\u3002\n\u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e3a\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u7684\u76ee\u7684\u800c\u8fdb\u884c\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u63d0\u4f9b\u7684\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "Tiny bubbles can solve large problems. Microbubbles\u2014around 1-50 micrometers in diameter\u2014have widespread applications. They&#39;re used for drug delivery, membrane cleaning, biofilm control, and water treatment. They&#39;ve been applied as actuators in lab-on-a-chip devices for microfluidic mixing, ink-jet printing, and logic circuitry, and in photonics lithography and optical resonators. And they&#39;ve contributed remarkably to biomedical imaging and applications like DNA trapping and manipulation.    Given the broad range of applications for microbubbles, many methods for generating them have been developed, including air stream compression to dissolve air into liquid, ultrasound to induce bubbles in water, and laser pulses to expose substrates immersed in liquids. However, these bubbles tend to be randomly dispersed in liquid and rather unstable.\n  According to Baohua Jia, professor and founding director of the Centre for Translational Atomaterials at Swinburne University of Technology, &#34;For applications requiring precise bubble position and size, as well as high stability\u2014for example, in photonic applications like imaging and trapping\u2014creation of bubbles at accurate positions with controllable volume, curvature, and stability is essential.&#34; Jia explains that, for integration into biological or photonic platforms, it is highly desirable to have well controlled and stable microbubbles fabricated using a technique compatible with current processing technologies.\n    Jia and fellow researchers from Swinburne University of Technology recently teamed up with researchers from National University of Singapore, Rutgers University, University of Melbourne, and Monash University, to develop a method to generate precisely controlled graphene microbubbles on a glass surface using laser pulses. Their report is published in the peer-reviewed, open-access journal,  Advanced Photonics.\n   The group used graphene oxide materials, which consist of graphene film decorated with oxygen functional groups. Gases cannot penetrate through graphene oxide materials, so the researchers used laser to locally irradiate the graphene oxide film to generate gases to be encapsulated inside the film to form microbubbles\u2014like balloons. Han Lin, Senior Research Fellow at Swinburne University and first author on the paper, explains, &#34;In this way, the positions of the microbubbles can be well controlled by the laser, and the microbubbles can be created and eliminated at will. In the meantime, the amount of gases can be controlled by the irradiating area and irradiating power. Therefore, high precision can be achieved.&#34;\n    Such a high-quality bubble can be used for advanced optoelectronic and micromechanical devices with high precision requirements.\n  The researchers found that the high uniformity of the graphene oxide films creates microbubbles with a perfect spherical curvature that can be used as concave reflective lenses. As a showcase, they used the concave reflective lenses to focus light. The team reports that the lens presents a high-quality focal spot in a very good shape and can be used as light source for microscopic imaging.\n  Lin explains that the reflective lenses are also able to focus light at different wavelengths at the same focal point without chromatic aberration. The team demonstrates the focusing of a ultrabroadband white light, covering visible to near-infrared range, with the same high performance, which is particularly useful in compact microscopy and spectroscopy.\n  Jia remarks that the research provides &#34;a pathway for generating highly controlled microbubbles at will and integration of   microbubbles as dynamic and high precision nanophotonic components for miniaturized lab-on-a-chip devices, along with broad potential applications in high resolution spectroscopy and medical imaging.&#34;        More information:\t\t\t\t\t\t\t\t\t\t\t\tHan Lin et al, Near-perfect microlenses based on graphene microbubbles,  Advanced Photonics (2020).  DOI: 10.1117/1.AP.2.5.055001\n     Citation: Graphene microbubbles make perfect lenses (2020, October 9) retrieved 11 October 2020 from https://phys.org/news/2020-10-graphene-microbubbles-lenses.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2020-10-12 07:02:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u70ef\u5fae\u6ce1,microbubbles,\u6c14\u6ce1", "title": "\u77f3\u58a8\u70ef\u5fae\u6ce1\u6784\u6210\u5b8c\u7f8e\u7684\u900f\u955c", "title_en": "Graphene microbubbles make perfect lenses", "transed": 1, "url": "https://phys.org/news/2020-10-graphene-microbubbles-lenses.html", "via": "", "real_tags": ["\u70ef\u5fae\u6ce1", "\u6c14\u6ce1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1028186, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u95e8\u95f4\u6b47\u8bfe\u7a0b\u7684\u76ee\u7684\u662f\u5728\u4e24\u5468\u5185\u5c06\u5b66\u751f\u4ece\u53ef\u80fd\u5bf9\u6251\u514b\u4e00\u65e0\u6240\u77e5\u7684\u65b0\u624b\u5e26\u5230\u9ad8\u4e8e\u5e73\u5747\u6c34\u5e73\u7684\u73a9\u5bb6\u3002\u672c\u8bfe\u7a0b\u5c06\u5229\u7528\u624b\u52bf\u4f8b\u5b50\u548c\u5e38\u89c1\u6251\u514b\u60c5\u51b5\u7684\u8ba8\u8bba\u6765\u5b66\u4e60\u6e38\u620f\u7684\u57fa\u672c\u539f\u7406\u3002\u5c06\u6db5\u76d6\u6251\u514b\u7684\u6570\u5b66\u3001\u7ec4\u5408\u548c\u535a\u5f08\u8bba\u65b9\u9762\uff0c\u5e76\u63d0\u4f9b\u6bcf\u4e2a\u6982\u5ff5\u7684\u5b9e\u9645\u4f8b\u5b50\u3002\u8bb2\u5ea7\u5c06\u96c6\u4e2d\u5728\u5fb7\u514b\u8428\u65af\u5dde\u7684\u6838\u5fc3\u6982\u5ff5\u4e3e\u884c\uff0c\u91cd\u70b9\u662f\u73b0\u91d1\u6e38\u620f\u3002\u6bd4\u8d5b\u7684\u5177\u4f53\u6982\u5ff5\u5c06\u5728\u63a5\u8fd1\u5c3e\u58f0\u65f6\u6db5\u76d6\u30022005\u5e74WSOP\u4e3b\u8981\u6d3b\u52a8\u4e9a\u519b\u53f2\u8482\u592b\u00b7\u4e39\u5357\u66fc(Steve Dannenmann)\u5c06\u6709\u4e00\u573a\u5ba2\u5ea7\u8bb2\u5ea7\uff0c\u4ed6\u7684\u73b0\u573a\u9526\u6807\u8d5b\u5956\u91d1\u8d85\u8fc7400\u4e07\u7f8e\u5143\u3002\u8bfe\u7a0b\u7684\u9ad8\u6f6e\u662f\u5728\u4f11\u4f1a\u7ed3\u675f\u65f6\u5728\u6559\u7ec3\u5bb6\u91cc\u4e3e\u884c\u7684\u6251\u514b\u9526\u6807\u8d5b\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002\n\u8981\u5728\u89c2\u770b\u65f6\u67e5\u770b\u5d4c\u5165\u7684\u89c6\u9891\u526a\u8f91\uff0c\u8bf7\u5728\u770b\u5230\u5360\u4f4d\u7b26\u65f6\u5355\u51fb\u201cI\u201d\u3002", "note_en": "This intersession course aims to take students from novices who may know nothing about poker to above average players, in two weeks. The course will utilize hand examples and discussions of common poker situations to study the fundamentals of the game. The math, combinatoric, and game-theoretical aspects of poker will be covered, with practical examples of every concept. Lectures will focus on core concepts in Texas Hold `em, with an emphasis on cash games. Tournament-specific concepts will be covered towards the end. There will be a guest lecture by 2005 WSOP Main Event runner up  Steve Dannenmann, whose live tournament winnings exceed $4 million. The course culminated with a poker tournament at the instructor\u2019s home at the end of intersession.\n          To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n          To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n     To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n     To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n     To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n     To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n       To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.\n         To see the embedded video clips while watching, click on the \u201ci\u201d when you see the placeholder.", "posttime": "2020-10-12 07:02:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6251\u514b,hopkins", "title": "\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u6251\u514b\u8bfe\u7a0b", "title_en": "Johns Hopkins Poker Course", "transed": 1, "url": "https://hopkinspokercourse.com/", "via": "", "real_tags": ["\u6251\u514b", "hopkins"]}]