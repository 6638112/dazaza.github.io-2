[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1074378, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u4e0a\u4e0b\u6587\uff1a\u4e0a\u5468\u5728\u4eba\u5de5\u667a\u80fd\u4e2d\u5305\u62ec\u4e86\u4e00\u4efd\u6bcf\u5468\u4eba\u5de5\u667a\u80fd\u65b0\u95fb\u6458\u8981\u7684\u65f6\u4e8b\u901a\u8baf\u3001\u4e00\u4e2a\u62a5\u9053\u8d5b\u4e49\u5fb7\u65b0\u95fb\u7684\u64ad\u5ba2\uff0c\u4ee5\u53ca\u8bc4\u8bba\u8fd9\u6761\u65b0\u95fb\u7684\u793e\u8bba\u3002\u5982\u679c\u4f60\u8ba2\u9605\uff0c\u6211\u4eec\u4f1a\u5f88\u9ad8\u5174\u7684\uff01\nTLDR\uff1a\u5728OpenAI Cheif\u79d1\u5b66\u5bb6Ilya Sutskever\u5728\u63a8\u7279\u4e0a\u8868\u793a\u5927\u578b\u795e\u7ecf\u7f51\u7edc\u53ef\u80fd\u201c\u7a0d\u5fae\u6709\u610f\u8bc6\u201d\u4e4b\u540e\uff0cAI\u63a8\u7279\u548c\u5176\u4ed6\u5730\u65b9\u5f15\u53d1\u4e86\u4e00\u573a\u6fc0\u70c8\u7684\u8fa9\u8bba\u3002\u867d\u7136\u8fa9\u8bba\u662f\u5065\u5eb7\u7684\uff0c\u4f46\u5b83\u4eec\u5ffd\u7565\u4e86\u66f4\u5e7f\u6cdb\u7684\u4e00\u70b9\uff0c\u5373\u8d1f\u8d23\u4efb\u7684\u79d1\u5b66\u4f20\u64ad\u7684\u5fc5\u8981\u6027\u3002\u8fd9\u6761\u957f\u8fbe\u4e00\u5468\u7684\u63a8\u6587\u5df2\u7ecf\u88ab\u8bb8\u591a\u6d41\u884csci\u6587\u7ae0\u5f15\u7528\u4e3a\u4eba\u5de5\u667a\u80fd\u6b63\u5728\u53d8\u5f97\u201c\u6709\u610f\u8bc6\u201d\u7684\u8bc1\u636e\uff0c\u9274\u4e8e\u8428\u8328\u57fa\u5728OpenAI\u4e2d\u7684\u89d2\u8272\uff0c\u8fd9\u4e00\u7275\u5f3a\u7684\u8bf4\u6cd5\u5c06\u8bef\u5bfc\u8bb8\u591a\u4eba\u3002\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u62e5\u6709\u5927\u91cf\u5a92\u4f53\u8ffd\u968f\u8005\u7684\u7814\u7a76\u4eba\u5458\uff0c\u6709\u8d23\u4efb\u51c6\u786e\u5730\u544a\u77e5\u516c\u4f17\uff0c\u6216\u8005\u81f3\u5c11\u907f\u514d\u8bef\u5bfc\u516c\u4f17\u3002\n\u4e0a\u5468\u4e09\uff0cOpenAI\u9996\u5e2d\u79d1\u5b66\u5bb6Ilya Sutskever\u53d1\u5e03\u4e86\u4e0a\u8ff0\u63a8\u6587\uff0c\u5b83\u7acb\u5373\u6210\u4e3a\u70ed\u95e8\u8bdd\u9898\u3002\u8bb8\u591a\u4eba\u5de5\u667a\u80fd\u4e13\u5bb6\u52a0\u5165\u4e86\u201c\u5f53\u524d\u4eba\u5de5\u667a\u80fd\u662f\u5426\u6709\u610f\u8bc6\uff1f\u201d\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u91cc\u8fdb\u884c\u4e86\u8fa9\u8bba\u3002\u8bb8\u591a\u4eba\u9a73\u65a5\u4e86\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u8ba4\u4e3a\u5f53\u524d\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u7684\u5c40\u9650\u6027\u53ca\u5176\u4f7f\u7528\u7684\u975e\u5b9e\u4f53\u5316\u65b9\u5f0f\u963b\u6b62\u4e86\u6b64\u7c7b\u7b97\u6cd5\u88ab\u8ba4\u4e3a\u662f\u201c\u6709\u610f\u8bc6\u7684\u201d\n\u9274\u4e8e\u8fd9\u4e9b\u8d1f\u9762\u53cd\u5e94\uff0cOpenAI\u9996\u5e2d\u6267\u884c\u5b98\u5c71\u59c6\u00b7\u5965\u5c14\u7279\u66fc\u4e3a\u8428\u8328\u514b\u7684\u8bf4\u6cd5\u8fdb\u884c\u4e86\u8fa9\u62a4\uff0c\u4f46\u540c\u65f6\u5411\u6240\u6709\u4eba\u4fdd\u8bc1\uff0c\u4ed6\u8ba4\u4e3aGPT-3\uff0c\u751a\u81f3GPT-4\u4e0d\u4f1a\u201c\u4ee5\u4efb\u4f55\u65b9\u5f0f\u4f7f\u7528\u8fd9\u4e2a\u8bcd\u201d\uff1a\n\u5f15\u7528Sutskever\u7684\u63a8\u6587\uff0c\u8bb8\u591a\u5a92\u4f53\u5f00\u59cb\u7528\u4ee5\u4e0b\u6807\u9898\u62a5\u9053\u8fd9\u4e00\u4e3b\u5f20\uff1a\n\u503c\u5f97\u8d5e\u626c\u7684\u662f\uff0c\u5927\u591a\u6570\u6587\u7ae0\u786e\u5b9e\u5f15\u7528\u4e86\u7814\u7a76\u4eba\u5458\u7684\u8bdd\uff0c\u4ed6\u4eec\u9a73\u65a5\u4e86\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u5e76\u907f\u514d\u8bf4\u4eba\u5de5\u667a\u80fd\u662f\u6709\u610f\u8bc6\u7684\uff0c\u53ea\u662f\u56e0\u4e3a\u8428\u8328\u514b\u5f17\u53d1\u4e86\u63a8\u7279\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u6761\u63a8\u6587\u6240\u4ea7\u751f\u7684\u7092\u4f5c\u662f\u8a00\u8fc7\u5176\u5b9e\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u4e0d\u77e5\u60c5\u7684\u516c\u4f17\u83b7\u5f97\u4e86\u4eba\u5de5\u667a\u80fd\u53ef\u80fd\u5177\u6709\u67d0\u79cd\u610f\u8bc6\u7684\u9519\u8bef\u5370\u8c61\uff0c\u8fd9\u4e00\u70b9\u4e5f\u4e0d\u8db3\u4e3a\u5947\u3002\n\u9664\u4e86\u76f4\u63a5\u8fa9\u8bba\u548c\u5a92\u4f53\u62a5\u9053\u5916\uff0c\u8bb8\u591a\u4e13\u5bb6\u5bf9\u793e\u533a\u7684\u53cd\u5e94\u8fdb\u884c\u4e86\u8bc4\u8bba\u3002Bender\u6559\u6388\u5728\u8fd9\u65b9\u9762\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u601d\u8def\uff08\u6211\u4eec\u5efa\u8bae\u8bfb\u8005\u67e5\u770b\u6574\u4e2a\u601d\u8def\uff09\uff1a\n\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u53cd\u5e94\u90fd\u90a3\u4e48\u4e25\u91cd\u3002\u4eba\u5de5\u667a\u80fd\u63a8\u7279\uff08AI Twitter\uff09\u5728\u5236\u4f5c\u6a21\u56e0\u65b9\u9762\u8fdb\u884c\u4e86\u4e00\u5929\u7684\u52aa\u529b\uff0c\u5bf9\u6700\u521d\u7684\u63a8\u7279\u548c\u968f\u540e\u7684\u4e89\u8bae\u90fd\u8fdb\u884c\u4e86\u53d6\u7b11\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\u4e13\u5bb6\u4eec\u57fa\u672c\u4e0a\u540c\u610f\uff0c\u76ee\u524d\u7684\u4eba\u5de5\u667a\u80fd\u5f62\u5f0f\u5728\u4efb\u4f55\u610f\u4e49\u4e0a\u90fd\u662f\u65e0\u610f\u8bc6\u7684\u3002\u867d\u7136\u5df2\u7ecf\u6709\u5f88\u591a\u5173\u4e8e\u201c\u8ba1\u7b97\u610f\u8bc6\u201d\u7684\u7814\u7a76\uff0c\u6216\u8005\u4e00\u4e9b\u53ef\u80fd\u88ab\u8ba4\u4e3a\u662f\u6709\u610f\u8bc6\u7684\u4e1c\u897f\u662f\u5982\u4f55\u901a\u8fc7\u8ba1\u7b97\u673a\u5b9e\u73b0\u7684\uff0c\u4f46\u8fd9\u4e9b\u7814\u7a76\u90fd\u662f\u975e\u5e38\u521d\u6b65\u7684\uff0c\u6ca1\u6709\u63d0\u4f9b\u4efb\u4f55\u5173\u4e8e\u5efa\u9020\u201c\u6709\u610f\u8bc6\u201d\u673a\u5668\u7684\u5177\u4f53\u8ba1\u5212\u3002\u73b0\u5b9e\u662f\uff0c\u6211\u4eec\u5bf9\u610f\u8bc6\u6ca1\u6709\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u63a5\u53d7\u7684\u5b9a\u4e49\uff0c\u66f4\u4e0d\u7528\u8bf4\u7406\u89e3\u4e86\u3002\u58f0\u79f0\u6211\u4eec\u5df2\u7ecf\u5728\u8ba1\u7b97\u673a\u4e0a\u590d\u5236\u4e86\u8fd9\u6837\u4e00\u4e2a\u6a21\u7cca\u7684\u6982\u5ff5\uff0c\u5145\u5176\u91cf\u4e5f\u4e0d\u592a\u53ef\u80fd\u3002\u8bda\u7136\uff0c\u5982\u679c\u8fd8\u89c4\u5b9a\u4e86\u610f\u8bc6\u7684\u7279\u5b9a\u5b9a\u4e49\uff0c\u8fd9\u79cd\u8bf4\u6cd5\u4e5f\u53ef\u80fd\u662f\u5408\u7406\u7684\u3002\nSutskever\u7684\u63a8\u6587\u88ab\u201c\u65ad\u7ae0\u53d6\u4e49\u201d\u4ee5\u4ea7\u751f\u7092\u4f5c\uff0c\u6b63\u662f\u8fd9\u79cd\u7092\u4f5c\u5f15\u53d1\u4e86\u8fa9\u8bba\u3002Twitter\u4e0d\u662f\u8fdb\u884c\u7ec6\u5fae\u8ba8\u8bba\u7684\u5730\u65b9\uff0c\u4e00\u6761\u63a8\u6587\u4e0d\u53ef\u80fd\u4f20\u8fbe\u51fa\u5e73\u8861\u3001\u6df1\u601d\u719f\u8651\u7684\u4eba\u5de5\u667a\u80fd\u610f\u8bc6\u6240\u9700\u7684\u6240\u6709\u7ec6\u8282\u3002\u6b64\u5916\uff0c\u770b\u770bSutskever\u8fc7\u53bb\u7684\u63a8\u6587\uff0c\u5f88\u660e\u663e\uff0c\u5b83\u4eec\u4e0d\u662f\u4e25\u8083\u7684\u5ba3\u8a00\uff0c\u800c\u662f\u96f6\u6563\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u60f3\u6cd5\u672c\u8eab\u662f\u5b8c\u5168\u6b63\u786e\u7684\u3002\u7136\u800c\uff0c\u9274\u4e8eSutskever\u5728OpenAI\u4e2d\u7684\u7a81\u51fa\u5730\u4f4d\uff0c\u8fd9\u6761\u63a8\u6587\u7684\u4e25\u91cd\u6027\u88ab\u5938\u5927\uff0c\u4ee5\u5efa\u7acb\u6709\u610f\u8bc6\u4eba\u5de5\u667a\u80fd\u7684\u7092\u4f5c\uff0c\u8fd9\u8feb\u4f7f\u5176\u4ed6\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u8c34\u8d23\u5e76\u6f84\u6e05\u5f53\u524d\u7684\u4eba\u5de5\u667a\u80fd\u6ca1\u6709\u610f\u8bc6\u3002\u8fd9\u573a\u8fa9\u8bba\u8ba9\u516c\u4f17\u66f4\u591a\u5730\u5173\u6ce8\u4e86\u6574\u4e2a\u8003\u9a8c\uff0c\u6216\u8bb8\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u5b83\u8fdb\u4e00\u6b65\u653e\u5927\u4e86\u6700\u521d\u7684\u63a8\u6587\u3002\n\u8fd9\u4e00\u4e8b\u4ef6\u7a81\u663e\u4e86\u5bf9\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u8fdb\u884c\u66f4\u8d1f\u8d23\u4efb\u6c9f\u901a\u7684\u5fc5\u8981\u6027\u3002\u4eba\u5de5\u667a\u80fd\u4f5c\u4e3a\u4e00\u4e2a\u6280\u672f\u9886\u57df\u5bf9\u7092\u4f5c\u5e76\u4e0d\u964c\u751f\uff0c\u6211\u4eec\u8fc7\u53bb\u66fe\u8ba4\u4e3a\uff0c\u8be5\u9886\u57df\u7f3a\u4e4f\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u66f4\u7ec6\u81f4\u3001\u66f4\u51b7\u9759\u7684\u6c9f\u901a\u3002\u95ee\u9898\u4e0d\u662fSutskever\u7684\u968f\u610f\u63a8\u6587\uff1b\u95ee\u9898\u662f\uff0c\u4e00\u4e2a\u4e0d\u719f\u6089\u4eba\u5de5\u667a\u80fd\u7684\u4eba\u5f88\u5bb9\u6613\u5c31\u56e0\u4e3a\u4e00\u4f4d\u8457\u540d\u7684\u7814\u7a76\u4eba\u5458\u5728\u63a8\u7279\u4e0a\u53d1\u8868\u4e86\u4e00\u4e2a\u6e29\u548c\u7684\u731c\u6d4b\u800c\u76f8\u4fe1\u4e86\u4e00\u4e9b\u4e0d\u771f\u5b9e\u7684\u4e1c\u897f\u3002\u8fd9\u4e00\u5207\u90fd\u6709\u52a9\u4e8e\u5728\u516c\u4f17\u4e2d\u5efa\u7acb\u5bf9\u4eba\u5de5\u667a\u80fd\u7cfb\u7edf\u7684\u4e0d\u5408\u7406\u671f\u671b\uff0c\u8fdb\u800c\u8bef\u5bfc\u516c\u4f17\u60c5\u7eea\u3001\u6d41\u884c\u6587\u5316\u548c\u516c\u5171\u653f\u7b56\u3002\u6b63\u5982\u4fd7\u8bdd\u6240\u8bf4\uff1a\u62e5\u6709\u5f3a\u5927\u7684\uff08\u516c\u5171\u5173\u7cfb\uff09\u6743\u529b\uff0c\u5c31\u610f\u5473\u7740\u5de8\u5927\u7684\uff08\u516c\u5171\u4f20\u64ad\uff09\u8d23\u4efb\u3002\u6211\u4eec\u5e0c\u671b\u66f4\u591a\u7684\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u8ba4\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u8d1f\u8d23\u4efb\u5730\u53d1\u63a8\u7279\u3002", "note_en": "Quick bit of context: Last Week in AI includes a newsletter with  weekly digests of AI news, a  podcast covering said news, and  editorials commenting on this news. We\u2019d love it if you subscribed!\n     TLDR: After OpenAI Cheif Scientist Ilya Sutskever tweeted that large neural nets may be \u201cslightly conscious,\u201d a torrent of debate ensued on AI Twitter and elsewhere. While debates are healthy, they miss the broader point about the need for responsible science communication. The week-old tweet has already been quoted by many pop-sci articles as evidence that AI is becoming \u201cconscious,\u201d a far-fetched claim that will mislead many, given Sutskever\u2019s role at OpenAI. AI researchers, especially ones that have large media followings, have a responsibility to accurately inform the public, or at least refrain from misleading them.\n   Last Wednesday, Ilya Sutskever, Chief Scientist at OpenAI, sent out the above Tweet, and it instantly became a hot topic. Many AI experts joined the \u201cis current AI conscious?\u201d debate in the days that followed. Many rebuked the claim and argued that the limitations of current neural network architectures and the disembodied way they\u2019re used prevent such algorithms from ever being considered \u201cconscious.\u201d\n       In view of the negative responses, Sam Altman, CEO of OpenAI, defended Sutskever\u2019s claim, but at the same time reassured everyone that he does not think GPT-3, or even GPT-4, will be conscious \u201cin any way we use the word\u201d:\n   Quoting Sutskever\u2019s tweet, many media outlets began running articles covering the claim with headlines like:\n  To their credit, most articles did quote from researchers who rebuked the claim and refrained from saying that AI is conscious just because Sutskever tweeted so. Still, the hype that this single tweet generated is overblown, and it is not at all surprising if an uninformed member of the public receives the misguided impression that AI probably has some form of consciousness.\n On top of the direct debate and the media coverage, many experts gave commentary on the community response. Professor Bender has a great thread on this (we recommend readers to check out the whole thread):\n    But not all responses were as serious. AI Twitter had a field day making memes that poke fun at both the original Tweet and the controversy that followed. Some examples below:\n        Experts largely agree that current forms of AI are not conscious, in any sense of the word. While there have been  many studies on \u201ccomputational consciousness,\u201d or how something that might be considered conscious can be realized with computers, these studies are very preliminary and do not offer anything close to a concrete plan on building \u201cconscious\u201d machines. The reality is that we don\u2019t have a widely accepted definition, let alone understanding, of  consciousness. Claiming that we have already replicated such a nebulous concept with computers seems improbable at best. Granted, the claim could also be reasonable, if a particular definition of consciousness was specified as well.\n Sutskever\u2019s tweet was \u201ctaken out of context\u201d to generate hype, and it is this hype that triggered the debate. Twitter is not the place for nuanced discussion and a single tweet cannot possibly convey all the details necessary for a balanced, well-thought-out take on the consciousness of AI. Moreover, looking at Sutskever\u2019s past tweets, it is clear that they are not serious proclamations but rather scattered thoughts, which by themselves are totally fine. However, given Sutskever\u2019s prominent position at OpenAI, the seriousness of this particular tweet was blown out of proportions to build the hype of conscious AIs, which pressured other AI researchers to rebuke and clarify that current AIs are not conscious. This debate gave more public attention to the whole ordeal, and, perhaps ironically, helped amplify the original tweet even more.\n This event highlights the need for more responsible communication for AI research. AI as a technological field is no stranger to  hype, and we have  argued in the past that the field lacks more nuanced, level-headed communication by AI researchers. The problem isn\u2019t Sutskever\u2019s off-handed tweet; the problem is someone not familiar with AI becoming easily convinced of something that is not true, just because a famous researcher tweeted a mild speculation. This all helps to build unreasonable expectations of AI systems in the public, which in turn will misguide public sentiments, popular culture, and public policy.  As the clich\u00e9 goes: with great (public relations) power, comes great (public communications) responsibility. We hope more AI researchers recognize this and tweet responsibly.", "posttime": "2022-02-21 06:24:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u7f51\u7edc,\u4eba\u5de5\u667a\u80fd,nets", "title": "\u795e\u7ecf\u7f51\u7edc\u6ca1\u6709\u201c\u8f7b\u5fae\u7684\u610f\u8bc6\u201d\uff0c\u4eba\u5de5\u667a\u80fd\u516c\u5173\u53ef\u4ee5\u7528\u8f83\u5c11\u7684\u7092\u4f5c\u6765\u5b9e\u73b0", "title_en": "Neural nets are not \u201cslightly conscious,\u201d and AI PR can do with less hype", "transed": 1, "url": "https://lastweekin.ai/p/conscious-ai", "via": "", "real_tags": ["\u795e\u7ecf\u7f51\u7edc", "\u4eba\u5de5\u667a\u80fd", "nets"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074377, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2018\u5e74\uff0c\u6211\u5728\u5370\u5ea6\u53e4\u5409\u62c9\u7279\u90a6\u7684\u963f\u5357\u5fb7\u63a2\u671b\u5bb6\u4eba\uff0c\u89c1\u5230\u4e86\u6211\u4eec\u7684\u90bb\u5c45\u5df4\u62c9\u7279\u62dc\u00b7\u5e15\u7279\u5c14\uff0c\u4ed6\u662f\u5f53\u5730\u4e00\u6240\u5927\u5b66\u7684\u753b\u5bb6\u548c\u827a\u672f\u6559\u6388\u3002\u8fd9\u4e9b\u5e73\u9762\u8bbe\u8ba1\u7814\u7a76\u6765\u81ea\u4ed6\u7684\u6863\u6848\uff0c\u4ed6\u5f88\u60f3\u5e26\u6211\u4eec\u53c2\u89c2\u4ed6\u7684\u5de5\u4f5c\u5ba4\uff0c\u5e76\u8ba9\u6211\u4eec\u8bb0\u5f55\u4e0b\u6765\u3002\u6ca1\u6709\u4eba\u77e5\u9053\u8c01\u662fU.M.\u5e15\u7279\u5c14\uff0c\u90a3\u4e2a\u753b\u8fd9\u4e9b\u753b\u7684\u5b66\u751f\uff0c\u5728\u4e92\u8054\u7f51\u4e0a\u6211\u627e\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u5c31\u66f4\u6709\u8da3\u4e86\u2014\u2014\u6709\u591a\u5c11\u540d\u4e0d\u89c1\u7ecf\u4f20\u7684\u827a\u672f\u5bb6\u548c\u4ed6\u4eec\u6570\u4e0d\u6e05\u7684\u4f5c\u54c1\u5728\u65f6\u95f4\u7684\u4e59\u919a\u4e2d\u6d88\u5931\u4e86\uff0c\u4ece\u6765\u6ca1\u6709\u88ab\u53e6\u4e00\u4e2a\u4eba\u770b\u5230\u8fc7\uff1f\n1950&#39;\u53e4\u5409\u62c9\u7279\u90a6\u4f4d\u4e8e\u963f\u5357\u5fb7\u5c0f\u9547\uff0c\u6781\u5ea6\u8d2b\u56f0\u3001\u6b20\u53d1\u8fbe\uff0c\u4e0e\u897f\u65b9\u4e16\u754c\u6ca1\u6709\u771f\u6b63\u7684\u8054\u7cfb\u2014\u2014\u4e13\u4e1a\u56fe\u5f62\u8bbe\u8ba1\u7684\u6982\u5ff5\u95fb\u6240\u672a\u95fb\u3002\nU.M.Patel\u5728\u80af\u5c3c\u4e9a\u5185\u7f57\u6bd5\u7684RTCEA\u5b66\u9662\u5b66\u4e60\uff0c\u57fa\u4e8e\u8bba\u6587\u4e0a\u7684\u5b66\u9662\u5370\u7ae0\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5e15\u7279\u5c14\u6781\u6709\u53ef\u80fd\u4ece\u53e4\u5409\u62c9\u7279\u90a6\u7a7f\u8d8a\u963f\u62c9\u4f2f\u6d77\uff0c\u83b7\u5f97\u5927\u5b66\u6559\u80b2\u3002\n\u6c34\u5f69\u753b\u7684\u8d28\u91cf\u548c\u8010\u5149\u6027\u975e\u5e38\u51fa\u8272\uff0c\u4fdd\u5b58\u8fd9\u4e9b\u4f5c\u54c1\u7684\u6863\u6848\u8fc7\u7a0b\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u3002\n\u4ed6\u7684\u4f5c\u54c1\u591a\u624d\u591a\u827a\u2014\u2014\u5e73\u9762\u8bbe\u8ba1\u3001\u5de5\u4e1a\u8bbe\u8ba1\u3001\u5efa\u7b51\u89c4\u5212\u3001\u8272\u5f69\u7406\u8bba\u3001\u827a\u672f\u4e3b\u9898\u3001\u900f\u89c6\u7814\u7a76\u7b49\u3002", "note_en": "I was visiting my family in Anand, Gujarat (India) in 2018 and got to meet our neighbor, Bharatbhai Patel, who is a painter and a professor of Arts at a local college. These graphic design studies are from his archives and he was eager to give us a tour of his studio and allowed us to document them. No one knows who U.M. Patel, the student who made these drawings and there is nothing on the internet that I could find. That makes it even more interesting - how many unknown artists and their uncountable works have been lost in the ether of time, never to be seen by another human, ever?\n  1950&#39;s in the small town of  Anand, Gujarat was extremely impoverished, under developed and had no real connection to the western world - and the concept of professional Graphics Design was unheard of.\n U.M. Patel studied at the  RTCEA college in Nairobi, Kenya based on the college stamp on the papers. That means, Mr. Patel had most likely sailed across the Arabian Sea from Gujarat to obtain a university education.\n  Watercolor quality and lightfastness is exceptional and the archival process used to preserve these works is impressive.\n The versatility of his works - graphic design, industrial design, architectural plans, color theory, artistic motifs, perspective studies, etc.", "posttime": "2022-02-21 06:23:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u8bbe\u8ba1,\u53e4\u5409\u62c9\u7279\u90a6,studies,\u4f5c\u54c1", "title": "20\u4e16\u7eaa50\u5e74\u4ee3\u53e4\u5409\u62c9\u7279\u90a6\u8bbe\u8ba1\u5e08\u7684\u5e73\u9762\u7814\u7a76\uff082020\u5e74\uff09", "title_en": "1950's Graphic Studies from a Gujarati Designer (2020)", "transed": 1, "url": "https://neil.computer/notes/1950s-graphic-design-studies-from-a-gujarati-designer/", "via": "", "real_tags": ["2020", "\u8bbe\u8ba1", "\u53e4\u5409\u62c9\u7279\u90a6", "studies", "\u4f5c\u54c1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074374, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728JavaScript/TypeScript\u4e2d\u7ba1\u7406\u952e\u76d8\u5feb\u6377\u952e\u771f\u662f\u4e00\u4ef6\u7cdf\u7cd5\u7684\u4e8b\u60c5\u3002\u8ba9&#39\uff1b\u5047\u8bbe\u4f60\u6709\u4ee5\u4e0b\u5feb\u6377\u952e\uff08\u5047\u8bbe\u4f60\u5728macOS\u4e0a\uff09\uff1a\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{if\uff08event.metaKey&amp\uff1b\uff01event.altKey&amp\uff1b\uff01event.ctrlKey&amp\uff1b\uff01event.shiftKey&amp\uff1b&amp\uff1bevent.code===&amp#34\uff1bKeyL&amp#34\uff1b\uff09{doThingA\uff08\uff09\uff1b}if\uff08event.metaKey&amp\uff1bevent.ctrlKey&amp\uff1bevent.altKey&amp\uff1bevent.shiftKey&amp\uff1bevent.code===&amp\uff1b34\uff1bKeyL&amp\uff1b34\uff1b\uff09{doThingB\uff08\uff09\uff1b}if\uff08event.metaKey&amp\uff1bevent.ctrlKey&amp\uff1bevent.shiftKey&amp\uff1bevent.altKey&amp\uff1bevent.code===&amp\uff1b34\uff1bKeyL&amp\uff1b34\uff1b\uff09{doThingC\uff08\uff09\uff1b}}\uff09\uff1b\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{if\uff08event.metaKey&amp\uff1b\uff01event.altKey&amp\uff1b&amp\uff1b&amp\uff1bevent.code===&amp#34\uff1bKeyL&amp#34\uff1b\uff09{if\uff08event.ctrlKey\uff09{if\uff08event.shiftKey\uff09{doThingC\uff08\uff09\uff1b}else{doThingB\uff08\uff09\uff1b}else{doThingA\uff08\uff09\uff1b}}}\uff09\uff1b\n\u56e0\u6b64\uff0c\u4f60\u7684\u5f00\u7bb1\u5373\u7528\u7684\u9009\u62e9\u662f\u8ba9\u5b83\u53d8\u5f97\u6df7\u4e71\u6216\u5197\u957f\u3002\u597d\u6d88\u606f\uff01\u7ed3\u679c\u662f&#39\uff1b\u7b2c\u4e09\u4e2a\u9009\u9879\uff1a\u4f4d\u6807\u5fd7\u3002\n\u6211\u9700\u8981\u5728\u4e00\u4e2a\u8f85\u52a9\u9879\u76eeI&#39\uff1b\u6211\u6b63\u5728\u5de5\u4f5c\uff0c\u6240\u4ee5\u6211\u7528\u4f4d\u6807\u5fd7\u5b9e\u73b0\u4e86\u81ea\u5df1\u7684\u5c0f\u952e\u76d8\u5feb\u6377\u952e\u5e93\u3002\u6211\u5c0a\u656c\u7684\u540c\u4e8b\u9a6c\u7279\u00b7\u6885\u5e0c\u59c6\uff08Matt Mayhem\uff0c\u9970\u6f14\u574f\u9634\u5f71\uff0c\u6ca1\u6709\u660e\u65e5\u7537\u5b69\u7684\u540d\u58f0\uff09\u6b63\u5728\u5ba1\u67e5\u6211\u7684\u62c9\u8f66\u8bf7\u6c42\uff0c\u60f3\u77e5\u9053\u6240\u6709\u7684&amp\uff1b\u548c|\u64cd\u4f5c\u5458\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e2a\u5e16\u5b50\u5b58\u5728\u7684\u539f\u56e0\u3002\n\u5728\u6df1\u5165\u7814\u7a76\u4f4d\u79fb\u4f4d\u3001\u4f4d\u6807\u5fd7\u548c\u4f4d\u8fd0\u7b97\u7b26\u4e4b\u524d\uff0c\u8ba9&#39\uff1bLet\u2019\u6211\u4eec\u90fd\u8df3\u4e0a\u5c0f\u8f66\u53bb\u4e8c\u8fdb\u5236\u4ea4\u53c9\u70b9\uff0c\u8c08\u8c08\u57fa\u6570\u4e3a2\u7684\u6570\u5b57\u3002\n\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u90fd\u5728\u4ee510\u4e3a\u57fa\u6570\uff08\u6216\u5341\u8fdb\u5236\uff09\u7684\u5b87\u5b99\u4e2d\u5de5\u4f5c\uff0c\u6211&#39\uff1b\u6211\u61d2\u5f97\u89e3\u91ca\uff0c\u6240\u4ee5\u6211&#39\uff1b\u6211\u4f1a\u8ba9\u522b\u4eba\u505a\u7684\u3002\u4e8c\u8fdb\u5236\u6570\u75282\u8fdb\u5236\u8868\u793a\uff0c\u8fd9\u53ea\u662f\u4e00\u79cd\u82b1\u54e8\u7684\u8bf4\u6cd5\uff0c\u8868\u793a\u5b83\u53ea\u4f7f\u7528\u4e24\u4e2a\u7b26\u53f7\uff1a0\u548c1\u3002\n\u6211&#39\uff1b\u6211\u5c06\u4ea4\u66ff\u4f7f\u752810\u8fdb\u5236\u548c\u5341\u8fdb\u5236\uff0c\u4f46\u5b83\u4eec\u6307\u7684\u662f\u540c\u4e00\u4ef6\u4e8b\u3002\n\u4e8c\u8fdb\u5236\u8ba1\u6570\u6709\u70b9\u5947\u602a\uff0c\u6240\u4ee5\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u8c08\u8c08\u8fd9\u79cd\u5947\u602a\u3002\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u4f7f\u7528JavaScript&#39\uff1bs parseInt\uff08\uff09\u51fd\u6570\u4ee5\u83b7\u53d6\u4e8c\u8fdb\u5236\u6570\u7684\u5341\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e8c\u8fdb\u5236\u6570\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u57fa\u6570\u3002\u8981\u83b7\u5f97\u5341\u8fdb\u5236\u503c\uff0cI&#39\uff1bm\u4f7f\u7528\u57fa\u6570\u4e3a2\uff08\u5bf9\u4e8e\u57fa\u6570\u4e3a2\u7684\u6570\u5b57\u7cfb\u7edf\uff09\u3002\n\u5982\u679c\u4f60\u731c\u5230\u4e865\uff0c\u7ed9\u81ea\u5df1\u4e70\u676f\u996e\u6599\u5427\uff01\u5982\u679c\u4f60\u89c9\u5f97101=5\u542c\u8d77\u6765\u50cf\u80e1\u8bf4\u516b\u9053\uff0c\u8bf7\u5bb9\u5fcd\u6211\u3002\u4ece\u53f3\u5230\u5de6\u8ba1\u7b97\u4e8c\u8fdb\u5236\u6570\u3002\u4ece\u53f3\u5411\u5de6\u79fb\u52a8\u65f6\uff0c\u8be5\u4f4d\u7684\u5341\u8fdb\u5236\u8868\u793a\u4e3a\uff1a\n\u627e\u5230\u6bcf\u4e00\u4f4d\u7684\u5341\u8fdb\u5236\u503c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u76f8\u52a0\u3002\u6240\u4ee5\u8fd9\u91cc&#39\uff1b\u8fd9\u5c31\u662f\u628a101\u53d8\u62105\u7684\u65b9\u6cd5\uff1a\n\u6700\u53f3\u8fb9\u7684\u90a3\u4e00\u5217\u4ee3\u8868\u6bcf\u4e00\u4f4d\u7684\u5341\u8fdb\u5236\u503c\u3002\u56e0\u4e3a\u7b2c0\u4f4d\u548c\u7b2c2\u4f4d\u662f1\uff0c\u6240\u4ee5\u5c061\u4e58\u4ee52\u2070 \uff081\uff09\u548c2\u00b2\uff084\uff09\uff0c\u5c06\u5b83\u4eec\u76f8\u52a0\u5f97\u52305\u3002\nJavaScript\u4f7f\u752832\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8fdb\u884c\u9010\u4f4d\u64cd\u4f5c\u3002\u8fd9\u610f\u5473\u7740\u4efb\u4f55\u5728\u5f15\u64ce\u76d6\u4e0b\u65cb\u8f6c\u7684\u4f4d\u90fd\u4f1a\u5bf9\u4e8c\u8fdb\u5236\u6570\u8fdb\u884c\u64cd\u4f5c\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u6211\u53ef\u4ee5\u4e3a\u4f60\u8282\u7701\u4e00\u4e9b\u8ba1\u7b97\u65f6\u95f4\uff0c\u5e76\u5411\u4f60\u4fdd\u8bc1\u8fd9\u4e2a\u6570\u5b57\u662f32x1\u3002\u6bcf\u4e2a1\u4ee3\u8868\u4e00\u4e2a\u4f4d\uff0c\u5373&#34\uff1b32\u4f4d&#34\uff1b\u6765\u81ea\u300232\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7684\u6700\u5c0f\u503c\u4e3a-2147483648\uff0c\u6700\u5927\u503c\u4e3a2147483647\u3002\u4f46\u5982\u679c\u4f60\u8981\u8fd0\u884c\u8fd9\u4e2a\uff1a\n\u5b83\u6ce8\u9500\u4e864294967295\u3002\u4f60\u600e\u4e48\u80fd\u4e00\u76f4\u52304294967295\uff1f\u90a3&#39\uff1b\u8fd9\u5f88\u7b80\u5355\uff0c\u7b2c\u4e00\u4f4d\u662f&#34\uff1b\u7b26\u53f7\u4f4d&#34\uff1b\uff08\u4ee5\u53ca\u6700\u9ad8\u6709\u6548\u4f4d\uff09\uff0c\u56e0\u6b64\u5c06\u5176\u7ffb\u8f6c\u4e3a1\u4f1a\u4f7f\u6570\u5b57\u65e0\u7b26\u53f7\u3002\u81ea\u4ece\u6211\u4eec&#39\uff1b\u6211\u4eec\u4e0d\u518d\u5904\u7406\u8d1f\u6570\u4e86\uff0c\u6211\u4eec\u53ea\u662f\u628a\u6240\u6709\u7684\u6570\u636e\u90fd\u52a0\u4e0a2147483648\u3002\u6700\u5c0f\u503c-2147483648\u53d8\u4e3a0\uff0c\u6700\u5927\u503c2147483647\u53d8\u4e3a4294967295\u3002\n\u65e2\u7136\u4f60\u5bf9\u4e8c\u8fdb\u5236\u6570\u6709\u4e86\u66f4\u597d\u7684\u7406\u89e3\uff08\u5e0c\u671b\u5982\u6b64\uff09\uff0c\u90a3\u5c31\u8ba9&#39\uff1bs\u5173\u4e8e\u4f4d\u79fb\u4f4d\u548c\u4f4d\u6807\u5fd7\u7684\u8bf4\u5531\u3002\n\u6211\u4eec\u9700\u8981\u5c06\u56db\u4e2a\u4fee\u6539\u952e\u8868\u793a\u4e3a\u4f4d\u6807\u5fd7\u3002\u6211&#39\uff1b\u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u6253\u5b57\u811a\u672c\uff0c\u6240\u4ee5\u6211&#39\uff1b\u6211\u5c06\u4f7f\u7528\u679a\u4e3e\u3002\u6211&#39\uff1b\u6211\u4e5f\u4f7f\u7528Electron\uff0c\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ea\u5728macOS\u4e0a\u8fd0\u884c\uff0c\u6240\u4ee5\u6211&#39\uff1b\u6211\u5c06\u7528macOS\u672f\u8bed\u6765\u8868\u793a\u6bcf\u4e2a\u4fee\u9970\u8bed\u3002\n\u679a\u4e3eMod{Command=1&lt\uff1b&lt\uff1b1\uff0c//2\u5728base-10\u63a7\u4ef6\u4e2d=1&lt\uff1b&lt\uff1b2\uff0c//4\u5728base-10\u9009\u9879\u4e2d=1&lt\uff1b&lt\uff1b3\uff0c//8\u5728base-10\u4e2dShift=1&lt\uff1b&lt\uff1b4\uff0c//16\u5728base-10}\n\u5de6\u79fb\u4f4d\u8fd0\u7b97\u7b26\uff08&lt\uff1b&lt\uff1b\uff09\u5c06\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\u5411\u5de6\u79fb\u4f4d\u6307\u5b9a\u4f4d\u6570\u3002\u5411\u5de6\u79fb\u4f4d\u7684\u591a\u4f59\u4f4d\u5c06\u88ab\u4e22\u5f03\u3002\u96f6\u4f4d\u4ece\u53f3\u8fb9\u79fb\u5165\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u8981\u6ce8\u9500\u5b83\u4eec\u7684base-2\u8868\u793a\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4fee\u9970\u7b26\uff0c\u8fd9\u91cc&#39\uff1b\u8fd9\u5c31\u662f\u6211\u4eec&#39\uff1bd\u5f97\u5230\uff1a\n\u6bd4\u5982parseInt\uff08\uff09\u3001JavaScript&#39\uff1b\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u53ef\u9009\u7684\u57fa\u6570\u53c2\u6570\uff0c\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u57fa\u6570\u3002\n\u60a8\u53ef\u4ee5\u770b\u52300\u7684\u6570\u91cf\u76f4\u63a5\u5bf9\u5e94\u4e8e&lt&\u4e66\u4fe1\u7535\u62a5\uff1bMod enum\u4e2d\u7684\u8fd0\u7b97\u7b26\u3002\n\u90a3\u53c8\u600e\u6837&#39\uff1b\u8fd9\u4e00\u5207\u7684\u610f\u4e49\u662f\u4ec0\u4e48\uff1f\u597d\u5427\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5207\u6362\u523010\u5792\u4e00\u5206\u949f\u3002\u4f60\u9700\u8981\u68c0\u67e5\u591a\u4e2a\u6b63\u786e\u6216\u9519\u8bef\u7684\u6761\u4ef6\u3002\u4f7f\u7528\u4f4d\u6807\u5fd7\u7684\u597d\u5904\u662f\uff0c\u8fd9\u4e9bMod\u503c\u7684\u4efb\u4f55\u7ec4\u5408\u90fd\u4e0d\u4f1a\u7b49\u4e8e\u540c\u4e00\u4e2a\u6570\u5b57\uff1a\n\u6e05\u5355\u8fd8\u5728\u7ee7\u7eed\uff08\u76f8\u4fe1\u6211\uff09\u3002\u8fd9\u4e9b\u6807\u5fd7\u7684\u6bcf\u4e2a\u53ef\u80fd\u7ec4\u5408\u90fd\u4e0d\u4f1a\u4e0e\u53e6\u4e00\u4e2a\u7ec4\u5408\u91cd\u53e0\u3002\u4f8b\u5982\uff0c\u4f60&#39\uff1b\u6211\u6c38\u8fdc\u4e0d\u4f1a\u9047\u5230\u503c\u53ef\u80fd\u662f\uff08Mod.Command+Mod.Option\uff09\u6216\uff08Mod.Option+Mod.Shift\uff09\u7684\u95ee\u9898\u3002\n\u90a3\u91cc&#39\uff1b\u8fd9\u5b9e\u9645\u4e0a\u662f\u6211\u4eec\u7684\u6bd4\u7279\u6570\u95ee\u9898&#39\uff1b\u91cd\u65b0\u8f6c\u6362\uff08\u53731\u30012\u30013\u548c4\uff09\uff0c\u4f46\u6211\u4eec&#39\uff1b\u6211\u7a0d\u540e\u518d\u8c08\u3002\n\u73b0\u5728\u6211\u4eec&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u8bbe\u7f6e\u597d\u4e86\u4fee\u6539\u5668\uff0c\u8ba9&#39\uff1b\u4e0b\u9762\u4ecb\u7ecd\u5982\u4f55\u5c06\u5b83\u4eec\u4e0e\u4f4d\u8fd0\u7b97\u7b26\u4e00\u8d77\u4f7f\u7528\u3002\n\u6211&#39\uff1b\u6211\u53ea\u5173\u5fc3AND\uff0cOR\uff0cAND\u8fd0\u7b97\u7b26\uff0c\u800c\u4e0d\u662f\u6211\u7684\u76ee\u7684\uff0c\u4f46\u5982\u679c\u60a8\u9700\u8981\u7684\u8bdd\uff0cXOR\u662f\u5b58\u5728\u7684\u3002\u4f4d\u8fd0\u7b97\u7b26\u53ef\u4ee5\u7528\u771f\u503c\u8868\u6765\u63cf\u8ff0\u3002\u5982\u679c\u4f60\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u60f3\u70b9\u51fb\u8fd9\u91cc\u7684\u94fe\u63a5&#39\uff1b\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u77ed\u7684\u6982\u8ff0\uff1a\n\u771f\u503c\u8868\u662f\u6570\u5b66\u4e2d\u7528\u6765\u8fdb\u884c\u903b\u8f91\u8fd0\u7b97\u7684\u6570\u5b66\u8868\u3002\u5b83\u5305\u62ec\u5e03\u5c14\u4ee3\u6570\u6216\u5e03\u5c14\u51fd\u6570\u3002\u5b83\u4e3b\u8981\u7528\u4e8e\u6839\u636e\u8f93\u5165\u503c\u786e\u5b9a\u590d\u5408\u8bed\u53e5\u662f\u771f\u662f\u5047\u3002\n\u94fe\u63a5\u7ad9\u70b9\u4e0a\u7684\u771f\u76f8\u8868\u6709\u70b9\u96be\u4ee5\u638c\u63e1\uff0c\u6240\u4ee5\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u8fd0\u7b97\u7b26\u68c0\u67e5\u771f\u503c\u8868&#39\uff1b\u6211\u4eec\u5173\u5fc3\u7684\u662f\u3002\n\u5047\u8bbe\u6709\u4e24\u4f4da\u548cb\u3002and\u4f4d\u8fd0\u7b97\u7b26\u7684\u771f\u503c\u8868\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\u5c060\u66ff\u6362\u4e3afalse\uff0c\u5c061\u66ff\u6362\u4e3atrue\uff0c\u5e76\u5c06&amp\uff1b\u4e3a&amp&amp\uff1b\uff0c\u5b83\u5c06\u6620\u5c04\u5230\uff1a\n\u5b89\u6170\u65e5\u5fd7\uff08\u5047\u548c\u5047\uff09\uff1b//\u5047\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\u5047\u4e0e\u771f\uff09\uff1b//\u5047\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\u771f\u4e0e\u5047\uff09\uff1b//\u5047\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\u771f\u4e0e\u771f\uff09\uff1b//\u7b26\u5408\u4e8b\u5b9e\u7684\n\u5982\u679c\u5c060\u66ff\u6362\u4e3afalse\uff0c\u5c061\u66ff\u6362\u4e3atrue\uff0c\u5c06|\u66ff\u6362\u4e3a| |\uff0c\u5b83\u5c06\u6620\u5c04\u5230\uff1a\n\u5b89\u6170\u65e5\u5fd7\uff08\u5047| |\u5047\uff09\uff1b//\u5047\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\u5047| |\u771f\uff09\uff1b//trueconsole\u3002\u65e5\u5fd7\uff08\u771f| |\u5047\uff09\uff1b//trueconsole\u3002\u65e5\u5fd7\uff08\u771f| |\u771f\uff09\uff1b//\u7b26\u5408\u4e8b\u5b9e\u7684\n\u6240\u4ee5\u6211\u4eec\u6709\u4e00\u4e2aMod bit flag enum\u548c\u4e00\u4e9b\u64cd\u4f5c\u7b26\uff0c\u53ef\u4ee5\u7528\u6765\u8c03\u6574\u4f4d\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5c06\u5176\u5e94\u7528\u4e8e\u952e\u76d8\u5feb\u6377\u952e\u3002\n\u76ee\u524d\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u4ee5\u540e\u5c06\u53ea\u5173\u6ce8\u4fee\u9970\u7b26\uff0c\u5e76\u62c5\u5fc3\u975e\u4fee\u9970\u7b26\u952e\uff08\u4f8b\u5982\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7b26\u53f7\uff09\u3002\u8ba9&#39\uff1bs\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aareKeysDown\u7684\u51fd\u6570\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u4e2a\u4e8b\u4ef6\u548c\u4e00\u4e2a\u7ec4\u5408\u53c2\u6570\u3002\u4e8b\u4ef6\u662f\u4e00\u4e2a\u952e\u76d8\u4e8b\u4ef6\uff0c\u7ec4\u5408\u662f\u4e00\u4e2a\u4e0e\u6211\u4eec\u7684\u4f4d\u6807\u5fd7\u76f8\u5bf9\u5e94\u7684\u6570\u5b57\u3002\n\u5c31\u6240\u9700\u7684\u529f\u80fd\u800c\u8a00\uff0c\u6211\u4eec\u5e0c\u671b\u68c0\u67e5\u7279\u5b9a\u7684\u6309\u952e\u7ec4\u5408\u662f\u5426\u5df2\u5173\u95ed\u3002\u5b83&#39\uff1bIt\u2019\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u5f53\u4e14\u4ec5\u5f53\u90a3\u4e9b\u7cbe\u786e\u7684\u952e\u88ab\u6309\u4e0b\u65f6\uff0c\u51fd\u6570\u624d\u4f1a\u8fd4\u56detrue\u3002\u56e0\u6b64\uff0c\u5982\u679c\u547d\u4ee4\u952e\u5173\u95ed\uff0careKeysDown\uff08\u4e8b\u4ef6\uff0cMod.Command\uff09\u5c06\u8fd4\u56detrue\uff0c\u5982\u679cCommand+Control\u5173\u95ed\uff0c\u5219\u8fd4\u56defalse\u3002\n\u51fd\u6570areKeysDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{let keyCode=combo\uff1bif\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod.Command\uff09{if\uff08\uff01event.metaKey\uff09{return false\uff1b}else{keyCode=keyCode&amp\uff1b~Mod.Command\uff1b}else{if\uff08event.metaKey\uff09{return false\uff1b}}/\u3002\u3002\u3002\u5176\u4f59\u7684Mod\u5904\u7406\u7a0b\u5e8f\u2026//\u5f53\u6211\u4eec\u6dfb\u52a0\u975e\u4fee\u6539\u952e\u65f6\uff0c\u8fd9\u5c06\u53d1\u751f\u53d8\u5316\uff1areturn keyCode===0\uff1b}\n\u5728macOS\u4e0a\uff0c\u4e8b\u4ef6\u3002metaKey\u8868\u793a\u547d\u4ee4\u952e\uff08\u2318) \u4e8b\u4ef6\u5df2\u7ecf\u7ed3\u675f\u3002altKey\u8868\u793a\u9009\u9879\u952e\uff08\u2325) \u4e8b\u4ef6\u5df2\u7ecf\u7ed3\u675f\u3002ctrlKey\u8868\u793a\u63a7\u5236\u952e\uff08\u2303) \u8fd9\u4ef6\u4e8b\u5df2\u7ecf\u7ed3\u675f\u4e86\u3002shiftKey\u8868\u793aShift\u952e\u5df2\u6309\u4e0b\u3002\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{//\u5982\u679cevent.metaKey=true\uff0c\u5219\u6ce8\u9500true\uff0c\u5176\u4ed6\u4fee\u9970\u7b26\u4e3afalse\uff0c//\u5e76\u4e14\u6ca1\u6709\u6309\u4e0b\u5176\u4ed6\u952e\uff1aconsole.log\uff08areKeysDown\uff08event\uff0cMod.Command\uff09\uff09\uff1b}\uff1b\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u8c08\u8c08\u3002\u5728\u7b2c\u4e00\u884c\u4e2d\uff0c\u6211\u521b\u5efa\u4e86\u4e00\u4e2a\u5c40\u90e8\u53d8\u91cfkeyCode\uff0c\u5b83\u88ab\u8d4b\u4e88combo\u7684\u503c\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u6211\u4eec\u4e00\u6b65\u4e00\u6b65\u5730\u901a\u8fc7\u6bcf\u4e2a\u4fee\u9970\u7b26\uff0c\u6e05\u9664\u952e\u7801\u4e2d\u7684\u4f4d\u6807\u5fd7\uff0c\u76f4\u5230\u6211\u4eec\u5230\u8fbe\u51fd\u6570\u7684\u5e95\u90e8\u3002\u53bb\u6389\u6240\u6709Mod\u6807\u5fd7\u540e\uff0c\u60a8&#39\uff1bre left\u952e\u4ee3\u7801\u4ee3\u8868\u6309\u4e0b\u7684\u5b57\u6bcd\u6216\u6570\u5b57\u3002\n\u597d\u6781\u4e86\u6211\u4eec&#39\uff1b\u6211\u4eec\u9047\u5230\u4e86\u7b2c\u4e00\u4e2a\u4f4d\u8fd0\u7b97\u7b26AND\u3002\u90a3\u4e48\u8fd9\u6761\u7ebf\u5728\u505a\u4ec0\u4e48\uff1f\u597d\u5427\uff0c\u6839\u636eMDN\u6587\u6863\u4e2d\u5173\u4e8e\u548c\u64cd\u4f5c\u5458\u7684\u63cf\u8ff0\uff1a\n\u6309\u4f4dAND\u8fd0\u7b97\u7b26\uff08&amp\uff1b\uff09\u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u5e94\u4f4d\u5747\u4e3a1\u7684\u6bcf\u4e2a\u4f4d\u4f4d\u7f6e\u8fd4\u56de1\u3002\n\u5e38\u6570a=5\uff1b//000000000000000000101\u5e38\u6570b=3\uff1b//00000000000000000000000011//\uff1b\u5728\u4e24\u4e2a\u503c\u4e2d\u90fd\u662f1\u3002\ue822/a&b0000000000000000000000001//\u8fd9\u5c31\u662f\u5b83\u53ea\u6ce8\u95001\u7684\u539f\u56e0^\nconst combo=Mod\u3002\u547d\u4ee4\uff1b//00000000000000000000000010 const compare=combo&amp\uff1b\u6469\u767b\u6d3e\u9752\u5e74\u547d\u4ee4\uff1b//00000000000000000000000000000010//\u8fd9\u8f6c\u6362\u4e3a\uff1a//if 00000000000000000000000010/==00000000000000000000000000000010//\u8fd9\u662f\u771f\u7684\uff01\u6240\u4ee5\u6211\u4eec\u77e5\u9053\u547d\u4ee4\u4fee\u6539\u5668\u88ab\u6309\u4e0b\u4e86\u3002\u5982\u679c\uff08compare==Mod.Command\uff09{/\u2026}\n\u5982\u679c\uff08\uff08\u7ec4\u5408\u548c\u4fee\u6539\u547d\u4ee4\uff09==Mod\u3002\u547d\u4ee4\uff09{if\uff08\uff01event.metaKey\uff09{return false\uff1b}else{keyCode=keyCode&amp\uff1b~Mod.Command\uff1b}\nif\uff08\uff01event.metaKey\uff09\u8bed\u53e5\u975e\u5e38\u660e\u663e\u3002\u5982\u679c\u6211\u4eec&#39\uff1b\u91cd\u65b0\u68c0\u67e5\u547d\u4ee4\u4fee\u9970\u7b26\uff0c\u5b83\u4e0d\u662f&#39\uff1bt\u6309\u4e0b\uff0c\u51fd\u6570\u8fd4\u56defalse\u3002\u53e6\u4e00\u4e2a\u662f\u4e8b\u60c5\u53d8\u5f97\u8f9b\u8fa3\u7684\u5730\u65b9\u3002\u6211&#39\uff1bm\u4f7f\u7528AND\u548cNOT\u8fd0\u7b97\u7b26\u6e05\u9664Mod\u3002\u6765\u81eakeyCode\u7684\u547d\u4ee4\u3002\n\u8fbe\u592b\u90a3\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u5bf9\u4e8e32\u4f4d\u6574\u6570\uff0c\u5b83\u5c06\u6240\u6709\u76841\u53d8\u62100\uff0c0\u53d8\u62101\u3002\n\u4f46\u662f\u7b49\u4e00\u4e0b\uff0c\u4e0d\u662f\u5417&#39\uff1b\u8fd9\u96be\u9053\u4e0d\u610f\u5473\u7740\u5728\u6211\u4eec\u4e0d\u8fd9\u4e48\u505a\u4e4b\u540e\uff0c\u5b83\u7684\u4ef7\u503c\u5c06\u662f\u5de8\u5927\u7684\u5417\uff1f\u4f60\u662f\u5bf9\u7684\uff0c\u4f46\u662f\u4e0d\u8981&#39\uff1b\u4e0d\u8981\u5fd8\u8bb0\u8fd9\u662f\u4e00\u4e2a\u4e24\u6b65\u64cd\u4f5c\uff1a\nconst combo=Mod\u3002\u547d\u4ee4\uff1b//00000000000000000000000010 const not=~Mod\u3002\u547d\u4ee4\uff1b//11111111111111111111101\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\uff08\u7ec4\u5408\u548c\u975e\u7ec4\u5408\uff09\u3002toString\uff082\uff09\uff09\uff1b//00000000000000000000000000/^Don&#39\uff1b\u522b\u5fd8\u4e86\u8fd8\u6709\uff01\n\u6309\u4f4dAND\u8fd0\u7b97\u7b26\uff08&amp\uff1b\uff09\u5728\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u5e94\u4f4d\u5747\u4e3a1\u7684\u6bcf\u4e2a\u4f4d\u4f4d\u7f6e\u8fd4\u56de1\u3002\n\u7ec4\u5408\u4e2d\u6ca1\u6709\u4f4d\u7f6e\uff0c\u4e5f\u6ca1\u6709\u4e24\u4e2a\u4f4d\u90fd\u4e3a1\u7684\u53d8\u91cf\uff0c\u56e0\u6b64\u5176\u8f93\u51fa\u4e3a0\u3002\u6700\u540e\u4e00\u6761else\u8bed\u53e5\u5f3a\u5236\u8981\u6c42\u5f53\u4e14\u4ec5\u5f53\u6309\u4e0b\u6307\u5b9a\u7684\u786e\u5207\u7ec4\u5408\u65f6\u51fd\u6570\u8fd4\u56detrue\u3002\u5982\u679c\u4f60&#39\uff1b\u91cd\u65b0\u68c0\u67e5\u56fd\u9632\u90e8\u3002\u63a7\u4ef6\u5173\u95ed\u4e14\u7528\u6237\u6309\u4e0bControl+Command\u65f6\uff0c\u51fd\u6570\u8fd4\u56defalse\u3002\n\u51fd\u6570areKeyDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{let keyCode=combo\uff1bif\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod.Command\uff09{/\u2026}\u5426\u5219//Command\u952e\u88ab\u6309\u4e0b\uff0c\u4f46\u6211\u4eec&#39\uff1b\u91cd\u65b0\u663e\u5f0f\u68c0\u67e5//if _not u down\uff0c\u56e0\u6b64\u6211\u4eec\u8fd4\u56defalse:if\uff08event.metaKey\uff09{return false\uff1b}}/\u3002\u3002\u3002\u5176\u4f59\u7684Mod\u5904\u7406\u7a0b\u5e8f\u2026//\u5f53\u6211\u4eec\u6dfb\u52a0\u975e\u4fee\u6539\u952e\u65f6\uff0c\u8fd9\u5c06\u53d1\u751f\u53d8\u5316\uff1areturn keyCode===0\uff1b}\n\u8fd9\u4e00\u5207\u90fd\u5f88\u597d\uff0c\u4f46\u4e0d\u662f\u5f88\u6709\u7528\u3002\u5982\u4f55\u68c0\u67e5\u591a\u4e2a\u4fee\u6539\u5668\uff1f\u6211&#39\uff1b\u6211\u5f88\u9ad8\u5174\u4f60\u8fd9\u4e48\u95ee\uff01\n\u8ba9&#39\uff1bs\u5728areKeysDown\u51fd\u6570\u4e2d\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u4fee\u9970\u7b26if\u8bed\u53e5\uff0c\u7528\u4e8e\u68c0\u67e5\u63a7\u5236\uff1a\n\u51fd\u6570areKeysDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{let keyCode=combo\uff1bif\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod.Command\uff09{if\uff08\uff01event.metaKey\uff09{return false\uff1b}else{keyCode=keyCode&amp\uff1b~Mod.Command\uff1b}else{if\uff08event.metaKey\uff09{return false\uff1b}\u5982\u679c\uff08\uff08\u7ec4\u5408\u548c\u6a21\u5757\u63a7\u5236\uff09==Mod\u3002\u63a7\u4ef6\uff09{if\uff08\uff01event.ctrlKey\uff09{return false\uff1b}else{keyCode=keyCode&amp\uff1b~Mod.Control\uff1b}else{if\uff08event.ctrlKey\uff09{return false\uff1b}}/\u3002\u3002\u3002\u5176\u4f59\u7684Mod\u5904\u7406\u7a0b\u5e8f\u2026//\u5f53\u6211\u4eec\u6dfb\u52a0\u975e\u4fee\u6539\u952e\u65f6\uff0c\u8fd9\u5c06\u53d1\u751f\u53d8\u5316\uff1areturn keyCode===0\uff1b}\n\u4e3a\u4e86\u68c0\u67e5\u591a\u4e2a\u4fee\u9970\u7b26\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u7ed9\u51fa\u6700\u540e\u4e00\u4e2a\u6309\u4f4d\u8fd0\u7b97\u7b26\uff1aOR\u3002\u6211\u4eec\u7684\u51fd\u6570\u8c03\u7528\u5982\u4e0b\u6240\u793a\uff1a\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{//\u5982\u679cevent.metaKey=true\uff0cevent.ctrlKey=true\uff0c\u5219\u6ce8\u9500true\uff0c//\u5176\u4ed6\u4fee\u9970\u7b26\u4e3afalse\uff0c\u5e76\u4e14\u6ca1\u6709\u6309\u4e0b\u5176\u4ed6\u952e\uff1aconsole.log\uff08areKeysDown\uff08event\uff0cMod.Command | Mod.Control\uff09\uff09\uff1b}\uff1b\n\u6309\u4f4dOR\u8fd0\u7b97\u7b26\uff08|\uff09\u5728\u5176\u4e2d\u4e00\u4e2a\u6216\u4e24\u4e2a\u64cd\u4f5c\u6570\u7684\u5bf9\u5e94\u4f4d\u4e3a1\u7684\u6bcf\u4e2a\u4f4d\u4f4d\u7f6e\u8fd4\u56de1\u3002\n\u5e38\u6570a=5\uff1b//000000000000000000101\u5e38\u6570b=3\uff1b//00000000000000000000000011//\u8fd9\u4e9b\u662f1\u62160^^^\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08a | b\uff09\uff1b//000000000000000000000000111//\u6240\u4ee5\u5b83\u628a\u5b83\u4eec\u90fd\u53d8\u6210\u4e861^^^\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{//\u5982\u679cevent.metaKey=true\uff0cevent.ctrlKey=true\uff0c\u5219\u6ce8\u9500true\uff0c//\u5176\u4ed6\u4fee\u9970\u7b26\u4e3afalse\uff0c\u5e76\u4e14\u6ca1\u6709\u6309\u4e0b\u5176\u4ed6\u952e\uff1aconsole.log\uff08areKeysDown\uff08event\uff0cMod.Command | Mod.Control\uff09\uff09\uff1b}\uff1b\u51fd\u6570areKeysDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14{//Mod.Command=00000000000000000000000000000010//Mod.Control=000000000000000000000000000000100//combo=000000000000000000000000000000110//\u5982\u679c\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod Command\uff09\uff0c\u5219\u5c06\u4efb\u610f\u6570\u5b57\u4e2d\u7684\u4f4d\u8bbe\u7f6e\u4e3a1^^^{//Mod.Command=00000000000000000000000010//combo=000000000000000000000000110//combo&amp\uff1bMod.Command=00000000000000000000000000000010//Mod.Command_u\u548cu00000000000000000010//==00000000000000000000000010\uff1f//\u662f\u7684\uff01\u6240\u4ee5\u6211\u4eec\u77e5\u9053Mod.Command\u5728com\u4e2dbo\u53c2\u6570}\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{console.log\uff08areKeysDown\uff08\u4e8b\u4ef6\uff0cMod.Command | Mod.Control\uff09\uff09\uff1b}\uff1b\u51fd\u6570areKeysDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{//Mod.Command=00000000000000000000000000000010//Mod.Control=000000000000000000000000000000100//combo=000000000000000000000000110//\u5c06\u4efb\u610f\u6570\u5b57\u4e2d\u76841\u4f4d\u8bbe\u7f6e\u4e3a1^^^\u8ba9keyCode=combo\uff1b\u5982\u679c\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod\u3002Command\uff09{//\u53c2\u89c1\u524d\u9762\u7684\u793a\u4f8b\uff08\u6211\u4eec\u77e5\u9053\u5b83\u662f\u771f\u7684\uff09\u2026\u5982\u679c\uff08\uff01event.metaKey\uff09{return false\uff1b}else{/~Mod.Command=11111111111111111111111101//keyCode\u4ecd\u7136\u662fcombo=000000000000000000000000110 keyCode=keyCode&amp\uff1b~Mod.Command\uff1b//000000000000000000000000100//\u4e24\u4e2a\u6570\u5b57\u4e2d\u7684\u552f\u4e00\u4f4d\u4f4d\u7f6e\uff0c\u503c\u4e3a1^}else{/\u2026}\u5982\u679c\uff08\uff08\u7ec4\u5408\u548c\u6a21\u5757\u63a7\u5236\uff09==Mod\u3002\uff08\u63a7\u5236\uff09{//Mod.Control=000000000000000000000000100//combo=000000000000000000000000110//combo&amp\uff1bMod.Control=000000000000000000000000000000100//\u53ea\u6709\u547d\u4ee4_\u548cuCombo\u4e3a1\u7684\u4f4d\u7f6e^//\u5982\u679c\uff08\uff01event.ctrlKey\uff09{return false\uff1b}\u5426\u5219{//~Mod.Control=111111111111111111111111011//keyCode=combo w/o Mod.Command=000000000000000000000000000000100 keyCode=keyCode&amp\uff1b~Mod.Control\uff1b//00000000000000000000000000000000000000}//keyCode\u73b0\u5728\u662f0\uff0c\u6240\u4ee5\u6211\u4eec\u8fd4\u56detrue\uff01return keyCode==0\uff1b}\n\u56e0\u6b64&#39\uff1b\u8fd9\u5c31\u662f\u6211\u4eec\u5904\u7406\u591a\u4e2a\u4fee\u9970\u8bed\u7684\u65b9\u5f0f\u3002\u4f46\u8fd9\u4ecd\u7136\u6ca1\u6709&#39\uff1b\u6211\u4eec\u65e0\u6cd5\u83b7\u5f97\u6240\u9700\u7684\u6240\u6709\u529f\u80fd\u3002\u5b57\u6bcd\u3001\u6570\u5b57\u3001\u7bad\u5934\u952e\u7b49\u5462\u3002\uff1f\u8ba9&#39\uff1b\u63a5\u4e0b\u6765\u6211\u4eec\u6765\u62a5\u9053\u3002\n\u8fd9\u5c31\u662f\u4e8b\u60c5\u5f00\u59cb\u53d8\u5f97\u6709\u70b9\u68d8\u624b\u7684\u5730\u65b9\u3002KeyboardEvent\u7684keyCode\u5c5e\u6027\u5df2\u88ab\u5f03\u7528\u4e00\u6bb5\u65f6\u95f4\uff0c\u4e0d\u518d\u63a8\u8350\u4f7f\u7528\u3002\n\u4e0d\u63a8\u8350\u4f7f\u7528\u7684\u952e\u76d8\u4e8b\u4ef6\u3002keyCode\u53ea\u8bfb\u5c5e\u6027\u8868\u793a\u4e0e\u7cfb\u7edf\u548c\u5b9e\u73b0\u76f8\u5173\u7684\u6570\u5b57\u4ee3\u7801\uff0c\u7528\u4e8e\u6807\u8bc6\u6309\u952e\u7684\u672a\u4fee\u6539\u503c\u3002\n\u5b83&#39\uff1b\u56e0\u4e3a\u5b83\u662f&#39\uff1bs\u662f\u4e00\u4e2a\u6570\u5b57\uff0c\u6240\u4ee5\u5b57\u6bcda\u7684\u952e\u7801\u662f65\u3002\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u53ef\u4ee5\u68c0\u67e5\u662f\u5426\u6309\u4e0b\u4e86Command+A\uff1a\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{//\u5982\u679c\u6309\u4e86&#34\uff1bA&#34\uff1b\u5219\u6ce8\u950065\u6b21\uff1aconsole.log\uff08event.keyCode\uff09\uff1b//\u5982\u679c\u6309\u4e86event.metaKey=true\u548c&#34\uff1bA&#34\uff1b\u5219\u6ce8\u9500true\uff08\u4ec5\u5f53\u6309\u4e0b\u8fd9\u4e9b\u952e\u65f6\uff09\uff1aconsole.log\uff08areKeysDown\uff08event\uff0cMod.Command | 65\uff09\uff09\uff1b\n\u6211\u60f3\u4e0d\u8d5e\u6210\u7684\u4e3b\u8981\u539f\u56e0\u662f\u56fd\u9645\u952e\u76d8\u5e03\u5c40\u7684\u95ee\u9898\u3002MDN\u5efa\u8bae\u60a8\u4f7f\u7528KeyboardEvent\u3002\u4ee3\u7801\uff0c\u8fd9\u5f88\u597d\uff0c\u4f46\u5b83\u53ea\u9700\u8981\u4e00\u70b9\u989d\u5916\u7684\u5de5\u4f5c\u3002\n\u6211\u7528\u6bcf\u4e2a\u975e\u4fee\u9970\u952e\u521b\u5efa\u4e86\u4e00\u4e2a\u679a\u4e3e\uff0c\u4ee5\u4f7fareKeysDown\u51fd\u6570\u66f4\u5177\u53ef\u8bfb\u6027\u3002\u5982\u679ckeyCode\u5c5e\u6027\u4e0d\u662f&#39\uff1bt\u4e0d\u63a8\u8350\uff0c\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a\n\u679a\u4e3e\u952e{LetterA=65\uff0cLetterB=66\uff0cLetterC=67\uff0cLetterD=68\uff0c//\u2026\u2026\u7b49\u7b49\u2026\u2026}\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{console.log\uff08areKeysDown\uff08\u4e8b\u4ef6\uff0cMod.Command | Key.LetterA\uff09\uff09\uff1b}\uff1b\u51fd\u6570areKeyDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{let keyCode=combo\uff1bif\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod.Command\uff09{/..keyCode=keyCode&amp\uff1b~Mod.Command\uff1b//keyCode=65=Key.letta/../\u4e8b\u4ef6keyCode=65=Key\u3002LetterA=keyCode\uff0c\u6240\u4ee5\u6211\u4eec\u8fd4\u56detrue:return\u4e8b\u4ef6\u3002keyCode===keyCode\uff1b}\n\u679a\u4e3e\u952e{LetterA=1\uff0cLetterB\uff0cLetterC\uff0cLetterD\uff0c//\u2026\u2026\u7b49\u7b49\u2026\u2026}\n\u6211\u4ece1\u5f00\u59cb\uff0c\u800c\u4e0d\u662f0\uff0c\u56e0\u4e3a0\u5c06\u662f\u6e05\u9664\u6240\u6709\u4fee\u9970\u7b26\u7684\u7ed3\u679c\u3002\u6ca1\u6709\u529e\u6cd5\u533a\u5206&#34\uff1b\u53ea\u6309\u4e0b\u4fee\u6539\u5668&#34\uff1b\u548c&#34\uff1b\u4e00\u4e9b\u4fee\u9970\u8bed\u52a0\u4e0a\u5b57\u6bcdA\u88ab\u6309\u4e0b&#34\uff1b\u3002\n\u73b0\u5728\u6211\u4eec\u53ea\u9700\u8981\u4e00\u4e2a\u8868\u6765\u5c06\u5bc6\u94a5\u679a\u4e3e\u6620\u5c04\u5230\u76f8\u5e94\u7684KeyboardEvent\u3002\u4ee3\u7801\u503c\uff1a\nconst codeByKeyTable:\u8bb0\u5f55&lt\uff1b\u952e\uff0c\u5b57\u7b26\u4e32&gt\uff1b={[Key.LetterA]\uff1a&#34\uff1bKey.LetterB]\uff1a&#34\uff1bKey&#34\uff1b[Key.LetterC]\uff1a&#34\uff1bKey&#34\uff1b[Key.LetterD]\uff1a&#34\uff1bKeyD&#34\uff1b/\u2026\u7b49\u7b49\u3002}\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{//Logs out&#34\uff1bKeyA&#34\uff1b\u5f53\u60a8\u6309\u4e0b\u5b57\u6bcd&#34\uff1bA&#34\uff1b\uff1aconsole.log\uff08event.code\uff09\uff1b}\uff1b\n\u5982\u679c\u4f60&#39\uff1b\u4f60\u60f3\u77e5\u9053\u6211\u4e3a\u4ec0\u4e48\u7528KeyboardEvent\u3002\u4ee3\u7801\u800c\u4e0d\u662f\u952e\u76d8\u4e8b\u4ef6\u3002\u94a5\u5319\uff0c\u5b83&#39\uff1b\u8fd9\u662f\u56e0\u4e3a\u952e\u76d8\u4e8b\u4ef6\u3002Code\u8fd4\u56de\u7684\u503c\u4e0d\u662f&#39\uff1bt\u6839\u636e\u952e\u76d8\u5e03\u5c40\u6216\u4fee\u6539\u952e\u7684\u72b6\u6001\u8fdb\u884c\u66f4\u6539\u3002\u952e\u76d8\u4e8b\u4ef6\u3002\u952e\u6839\u636e\u4fee\u6539\u952e\u7684\u72b6\u6001\u8fd4\u56de\u4e0d\u540c\u7684\u503c\uff0c\u8fd9\u5c06\u5927\u5927\u7834\u574f\u6211\u4eec\u6240\u6709\u7684\u4ee3\u7801\u3002\n\u6587\u4ef6addEventListener\uff08&#34\uff1bkeydown&#34\uff1b\uff0c\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff09=&gt\uff1b{console.log\uff08areKeysDown\uff08\u4e8b\u4ef6\uff0cMod.Command | Key.LetterA\uff09\uff09\uff1b}\uff1b\u51fd\u6570areKeyDown\uff08\u4e8b\u4ef6\uff1aKeyboardEvent\uff0ccombo:number\uff09\uff1a\u5e03\u5c14\u503c{let keyCode=combo\uff1bif\uff08\uff08combo&amp\uff1bMod.Command\uff09==Mod.Command\uff09{/\u2026keyCode=keyCode&amp\uff1bMod.Comma\n......", "note_en": "Managing keyboard shortcuts in JavaScript/TypeScript is a real shitshow.Let&#39;s say you have the following keyboard shortcuts (assuming you&#39;re on macOS):\n   document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  if  ( event .metaKey  &amp;&amp;  !event .altKey  &amp;&amp;  !event .ctrlKey  &amp;&amp;  !event .shiftKey  &amp;&amp; event .code  ===  &#34;KeyL&#34;  )  {  doThingA ( ) ;  }  if  ( event .metaKey  &amp;&amp; event .ctrlKey  &amp;&amp;  !event .altKey  &amp;&amp;  !event .shiftKey  &amp;&amp; event .code  ===  &#34;KeyL&#34;  )  {  doThingB ( ) ;  }  if  ( event .metaKey  &amp;&amp; event .ctrlKey  &amp;&amp; event .shiftKey  &amp;&amp;  !event .altKey  &amp;&amp; event .code  ===  &#34;KeyL&#34;  )  {  doThingC ( ) ;  } } ) ;\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  if  (event .metaKey  &amp;&amp;  !event .altKey  &amp;&amp; event .code  ===  &#34;KeyL&#34; )  {  if  (event .ctrlKey )  {  if  (event .shiftKey )  {  doThingC ( ) ;  }  else  {  doThingB ( ) ;  }  }  else  {  doThingA ( ) ;  }  } } ) ;\n So your choices out-of-the-box are to make it confusing or make it verbose.Good news! It turns out there&#39;s a third option: bit flags.\n I needed to add quite a few keyboard shortcuts to a side project I&#39;m working on, so I implemented my own little keyboard shortcut library using bit flags.My esteemed colleague, Matt Mayhem (of  Bad Shadows and  No Tomorrow Boys fame),was reviewing my pull request and wanted to know what the hell was going on with all the  &amp; and  | operators, so that is why this post exists.\n Before I dig into bit shifting, bit flags, and bitwise operators, let&#39;s all hop on the trolley to Binary Junction to talk about base-2 numbers.\n  Most of us operate in the  base-10 (or  decimal) universe, which I&#39;m too lazy to explain, so  I&#39;ll let someone else do it. Binary numbers are expressed in the  base-2 numeral system, which is just a fancy way of saying it only uses two symbols:  0 and  1.\n I&#39;ll be using the terms  base-10 and  decimal interchangeably, but they refer to the same thing.\n Counting in binary is a little weird, so let&#39;s talk about that weirdness.We&#39;re going to use JavaScript&#39;s   parseInt() function to get the decimal representation of a binary number.The first argument is the binary number string and the second is the radix. To get the decimal value, I&#39;m using a radix of  2 (for base- 2 number system).\n   If you guessed  5, buy yourself a drink! If  101 =  5 sounds like bullshit to you, bear with me.You count binary from  right to left. As you move from right to left, the decimal representation of that bit is:\n  You find the decimal value for each bit and add them all up. So here&#39;s how you turn  101 into  5:\n  That right-most column represents the decimal value of each bit.Since the 0th and 2nd bits are  1, you multiply  1 by 2\u2070 ( 1) and 2\u00b2 ( 4) respectively and add them up to get  5.\n JavaScript uses  32-bit signed integers for bitwise operations.That means that any bit-twiddling under the hood operates on binary numbers that look like this:\n  I can save you some time spent counting and assure you that there are 32x  1s in that number.Each  1 represents a bit, which is where &#34;32-bit&#34; comes from.A 32-bit  signed integer has a minimum value of  -2147483648 and a maximum value of  2147483647.But if you were to run this:\n  It logs out  4294967295. How the hell can you get all the way up to  4294967295?Well that&#39;s easy, the very first bit is the &#34;sign bit&#34; (and the  most significant bit), so flipping it to  1 makes the number  unsigned.Since we&#39;re no longer dealing with negative numbers, we just shimmy everything over by  2147483648.The minimum of  -2147483648 becomes  0, and the maximum of  2147483647 becomes  4294967295.\n   Now that you have a better understanding of binary numbers (hopefully), let&#39;s rap about bit shifting and bit flags.\n  We need to represent the four modifier keys as bit flags. I&#39;m using TypeScript here, so I&#39;m going to use an  enum.I&#39;m also using Electron and this application only runs on macOS, so I&#39;m going to represent each modifier in the macOS parlance.\n enum Mod  { Command  =  1  &lt;&lt;  1 ,  // 2 in base-10 Control  =  1  &lt;&lt;  2 ,  // 4 in base-10 Option  =  1  &lt;&lt;  3 ,  // 8 in base-10 Shift  =  1  &lt;&lt;  4 ,  // 16 in base-10 }\n  The left shift operator ( &lt;&lt;) shifts the first operand the specified number of bits to the left.Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.\n So if we were to log out each of those modifiers in their base-2 representation, here&#39;s what we&#39;d get:\n  Like  parseInt(), JavaScript&#39;s  toString() function cantake an optional radix argument that converts the number to the specified base.\n You can see that the number of  0s directly corresponds to the number to the right of the  &lt;&lt; operator in the  Mod enum.\n So what&#39;s the point of all this? Well, let&#39;s switch to base-10 for a minute. You need to check for multiple true or false conditions.The nice thing about using bit flags is any combination of those  Mod values will never add up to the same number:\n  The list goes on (just trust me). Each possible combination of those flags will never overlap with another combination.For example, you&#39;ll never run into an issue where the value could be either ( Mod.Command +  Mod.Option) or( Mod.Option +  Mod.Shift).\n There&#39;s actually an issue with the amount of bits we&#39;re shifting (i.e.  1,  2,  3, and  4),but we&#39;ll cover that later.\n Now that we&#39;ve got our modifiers set up, let&#39;s cover how to use them with bitwise operators.\n   I&#39;m only concerned with the  AND,  OR, and  NOT operators for my purposes, but  XOR is there if you need it.Bitwise operators can be described by something called a  truth table.If you don&#39;t feel like clicking through on that link, here&#39;s a quick rundown:\n A truth table is a mathematical table used to carry out logical operations in Maths.It includes boolean algebra or boolean functions.It is primarily used to determine whether a compound statement is true or false based on the input values.\n The truth table on the linked site is a bit difficult to grasp, so let&#39;s go through the truth table for each operator we&#39;re concerned with.\n Assuming you have two bits a and b. The truth table for the  AND bitwise operator looks like this:\n  If you swapped out  0 for  false,  1 for true, and  &amp; for  &amp;&amp;, it would map to:\n console . log ( false  &amp;&amp;  false ) ;  // falseconsole . log ( false  &amp;&amp;  true ) ;  // falseconsole . log ( true  &amp;&amp;  false ) ;  // falseconsole . log ( true  &amp;&amp;  true ) ;  // true\n   If you swapped out  0 for  false,  1 for true, and  | for  ||, it would map to:\n console . log ( false  ||  false ) ;  // falseconsole . log ( false  ||  true ) ;  // trueconsole . log ( true  ||  false ) ;  // trueconsole . log ( true  ||  true ) ;  // true\n   So we have a  Mod bit flag enum and some operators we can use to shimmy bits around.Let&#39;s apply that to keyboard shortcuts.\n  For the time being, we&#39;re going to focus exclusively on modifiers and worry about non-modifier keys (e.g. letters, numbers, symbols) later.Let&#39;s create a function called  areKeysDown with an  event and a  combo argument.The  event is a   KeyboardEvent and the  combo is a number that corresponds to our bit flags.\n As far as desired functionality goes, we want to check if a specific combination of keys are down.It&#39;s important to note that the function returns  true if and only if those  exact keys are down.So  areKeysDown(event, Mod.Command) returns  true if the  Command key is down, but  false if  Command +  Control is down.\n  function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  if  ( !event .metaKey )  {  return  false ;  }  else  { keyCode  = keyCode  &amp;  ~Mod .Command ;  }  }  else  {  if  (event .metaKey )  {  return  false ;  }  }  // ... rest of Mod handlers ...  // This will change when we add non-modifier keys:  return keyCode  ===  0 ; }\n On macOS,  event.metaKey indicates the  Command key ( \u2318) is down, event.altKey indicates the  Option key ( \u2325) is down, event.ctrlKey indicates the  Control key ( \u2303) is down,and  event.shiftKey indicates the  Shift key is down.\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  // Logs out true if event.metaKey = true, other modifiers are false,  // and no other keys are pressed:  console . log ( areKeysDown (event , Mod .Command ) ) ; } ) ;\n Let&#39;s talk this out. On the very first line I create a local variable,  keyCode which is assigned the value of  combo.The idea is that we step through each modifier and clear the bit flag from the  keyCode until we get down to the bottom of the function.After getting rid of all the  Mod flags, you&#39;re left with the  keyCode which represents the letter or number that was pressed.\n   Hooray! We&#39;ve encountered our first bitwise operator, the  AND. So what is this line doing?Well, according to the  MDN documentation for the AND operator:\n The bitwise AND operator ( &amp;) returns a  1 in each bit position for which the corresponding bits of both operands are  1s.\n  const a  =  5 ;  // 00000000000000000000000000000101 const b  =  3 ;  // 00000000000000000000000000000011 // Only bit that&#39;s a 1 in both values ^console . log (a  &amp; b ) ;  // 00000000000000000000000000000001 // Which is why it only logs out 1 ^\n  const combo  = Mod .Command ;  // 00000000000000000000000000000010 const compare  = combo  &amp; Mod .Command ;  // 00000000000000000000000000000010 // This translates to: // if 00000000000000000000000000000010 // == 00000000000000000000000000000010 // Which is true! So we know the Command modifier was pressed. if  (compare  === Mod .Command )  {  // ... }\n  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  if  ( !event .metaKey )  {  return  false ;  }  else  { keyCode  = keyCode  &amp;  ~Mod .Command ;  } }\n The  if (!event.metaKey) statement is pretty obvious. If we&#39;re checking for the  Command modifier, and it isn&#39;t pressed, the function returns  false.The  else is where things get spicy. I&#39;m using the  AND plus the  NOT operator to clear  Mod.Command from  keyCode.\n   Dafuq does that mean? Well for a 32-bit integer, it turns all the  1s to  0s and  0s to  1s.\n  But hang on a second, wouldn&#39;t that mean the value would be huge after we NOT it?You are correct, but don&#39;t forget that this is a two-step operation:\n const combo  = Mod .Command ;  // 00000000000000000000000000000010 const not  =  ~Mod .Command ;  // 11111111111111111111111111111101 console . log ( (combo  &amp; not ) . toString ( 2 ) ) ;  // 00000000000000000000000000000000 // ^ Don&#39;t forget about the AND!\n  The bitwise AND operator ( &amp;) returns a  1 in each bit position forwhich the corresponding bits of both operands are  1s.\n There are  no positions in the  combo and  not variables in which both bits are  1, so the output of that is  0.The final  else statement enforces the requirement that the function return  true if and only if  the exact combo specified is pressed.If you&#39;re checking if  Mod.Control is down and the user is pressing  Control +  Command, the function returns  false.\n function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  // ...  }  else  {  // The Command key is depressed, but we&#39;re explicitly checking  // if it is _not_ down, so we return false:  if  (event .metaKey )  {  return  false ;  }  }  // ... rest of Mod handlers ...  // This will change when we add non-modifier keys:  return keyCode  ===  0 ; }\n So this is all well and good, but not very useful. How do you check for multiple modifiers?I&#39;m glad you asked!\n  Let&#39;s add a second modifier  if statement to our  areKeysDown function that checks for  Control:\n function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  if  ( !event .metaKey )  {  return  false ;  }  else  { keyCode  = keyCode  &amp;  ~Mod .Command ;  }  }  else  {  if  (event .metaKey )  {  return  false ;  }  }  if  ( (combo  &amp; Mod .Control )  === Mod .Control )  {  if  ( !event .ctrlKey )  {  return  false ;  }  else  { keyCode  = keyCode  &amp;  ~Mod .Control ;  }  }  else  {  if  (event .ctrlKey )  {  return  false ;  }  }  // ... rest of Mod handlers ...  // This will change when we add non-modifier keys:  return keyCode  ===  0 ; }\n  In order to check for multiple modifiers, we&#39;re going to bring out the final bitwise operator:  OR.So our function call looks like this:\n document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  // Logs out true if event.metaKey = true, event.ctrlKey = true,  // other modifiers are false, and no other keys are pressed:  console . log ( areKeysDown (event , Mod .Command  | Mod .Control ) ) ; } ) ;\n  The bitwise OR operator ( |) returns a  1 in each bit position for which thecorresponding bits of either or both operands are  1s.\n  const a  =  5 ;  // 00000000000000000000000000000101 const b  =  3 ;  // 00000000000000000000000000000011 // These are either 1 or 0 ^^^console . log (a  | b ) ;  // 00000000000000000000000000000111 // So it turns them all into 1s ^^^\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  // Logs out true if event.metaKey = true, event.ctrlKey = true,  // other modifiers are false, and no other keys are pressed:  console . log ( areKeysDown (event , Mod .Command  | Mod .Control ) ) ; } ) ; function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  // Mod.Command = 00000000000000000000000000000010  // Mod.Control = 00000000000000000000000000000100  // combo = 00000000000000000000000000000110  // Set bits with a 1 in either number to 1 ^^  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  // Mod.Command = 00000000000000000000000000000010  // combo = 00000000000000000000000000000110  // combo &amp; Mod.Command = 00000000000000000000000000000010  // Only position where Mod.Command _and_ combo is 1 ^  // Does 00000000000000000000000000000010  // == 00000000000000000000000000000010?  // Yep! So we know that Mod.Command is in the combo argument  } }\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  console . log ( areKeysDown (event , Mod .Command  | Mod .Control ) ) ; } ) ; function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  // Mod.Command = 00000000000000000000000000000010  // Mod.Control = 00000000000000000000000000000100  // combo = 00000000000000000000000000000110  // Set bits with a 1 in either number to 1 ^^  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  // See previous example (we know it&#39;s true)...  if  ( !event .metaKey )  {  return  false ;  }  else  {  // ~Mod.Command = 11111111111111111111111111111101  // keyCode is still combo which = 00000000000000000000000000000110 keyCode  = keyCode  &amp;  ~Mod .Command ;  // 00000000000000000000000000000100  // Only bit position in both numbers with value of 1 ^  }  }  else  {  // ...  }  if  ( (combo  &amp; Mod .Control )  === Mod .Control )  {  // Mod.Control = 00000000000000000000000000000100  // combo = 00000000000000000000000000000110  // combo &amp; Mod.Control = 00000000000000000000000000000100  // Only position where command _and_ combo is 1 ^  // Does 00000000000000000000000000000100  // == 00000000000000000000000000000100?  // Yep! So we know that Mod.Control is in the combo argument  if  ( !event .ctrlKey )  {  return  false ;  }  else  {  // ~Mod.Control = 11111111111111111111111111111011  // keyCode = combo w/o Mod.Command = 00000000000000000000000000000100 keyCode  = keyCode  &amp;  ~Mod .Control ;  // 00000000000000000000000000000000  }  }  // The keyCode is now 0, so we return true!  return keyCode  ===  0 ; }\n So that&#39;s how we handle multiple modifiers. But that  still doesn&#39;t get us all the functionality we need.What about letters, numbers, arrow keys, etc.? Let&#39;s cover that next.\n  This is where things start to get a little hairy.The  KeyboardEvent has a  keyCode property that has been deprecated for a while and is no longer recommended.\n  The deprecated  KeyboardEvent.keyCode read-only property represents a system andimplementation dependent numerical code identifying the unmodified value of the pressed key.\n It&#39;s handy for bit flags because it&#39;s a number, so the letter  A has a  keyCode of  65.You could check if  Command +  A is pressed by doing this:\n document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  // Logs out 65 if &#34;A&#34; is pressed:  console . log (event .keyCode ) ;  // Logs out true if event.metaKey = true and &#34;A&#34; is pressed  // (and only if those keys are pressed):  console . log ( areKeysDown (event , Mod .Command  |  65 ) ) ; } ) ;\n I imagine the primary reason for the deprecation was due to issues with international keyboard layouts.MDN recommends you use   KeyboardEvent.codeinstead, which is fine, but it just requires a little extra work.\n I created an  enum with each non-modifier key to make the  areKeysDown function more readable.If the  keyCode property  wasn&#39;t deprecated, that would look something like this:\n enum Key  { LetterA  =  65 , LetterB  =  66 , LetterC  =  67 , LetterD  =  68 ,  // ... and so on ... }\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  console . log ( areKeysDown (event , Mod .Command  | Key .LetterA ) ) ; } ) ; function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  // ... keyCode  = keyCode  &amp;  ~Mod .Command ;  // keyCode = 65 = Key.LetterA  // ...  }  // event.keyCode = 65 = Key.LetterA = keyCode, so we return true:  return event .keyCode  === keyCode ; }\n  enum Key  { LetterA  =  1 , LetterB , LetterC , LetterD ,  // ... and so on ... }\n I started at  1 instead of  0, because  0 would be the result of clearing all the modifiers.There would be no way to differentiate between &#34;only modifiers are pressed&#34; and &#34;some modifiers plus the letter  A was pressed&#34;.\n Now we just need a table to map the  Key enum to the corresponding  KeyboardEvent.code values:\n const codeByKeyTable : Record &lt;Key ,  string &gt;  =  {  [Key .LetterA ] :  &#34;KeyA&#34; ,  [Key .LetterB ] :  &#34;KeyB&#34; ,  [Key .LetterC ] :  &#34;KeyC&#34; ,  [Key .LetterD ] :  &#34;KeyD&#34; ,  // ... and so on ... }\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  // Logs out &#34;KeyA&#34; when you press the letter &#34;A&#34;:  console . log (event .code ) ; } ) ;\n If you&#39;re wondering why I used  KeyboardEvent.code instead of  KeyboardEvent.key, it&#39;s because  KeyboardEvent.codereturns a value that  isn&#39;t altered by keyboard layout or the state of the modifier keys. KeyboardEvent.key returns a different value depending on the state of the modifier keys, which wouldpretty much break all our code.\n  document . addEventListener ( &#34;keydown&#34; ,  (event : KeyboardEvent )  =&gt;  {  console . log ( areKeysDown (event , Mod .Command  | Key .LetterA ) ) ; } ) ; function  areKeysDown (event : KeyboardEvent , combo :  number ) :  boolean  {  let keyCode  = combo ;  if  ( (combo  &amp; Mod .Command )  === Mod .Command )  {  // ... keyCode  = keyCode  &amp;  ~Mod .Comma\n......", "posttime": "2022-02-21 05:50:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u952e\u76d8,bitwisdom,mod", "title": "\u4ece\u952e\u76d8\u5feb\u6377\u952e\u4e2d\u83b7\u5f97\u667a\u6167", "title_en": "Gaining Bitwisdom from Keyboard Shortcuts", "transed": 1, "url": "https://mikerourke.dev/blog/bitwisdom-keyboard-shortcuts/", "via": "", "real_tags": ["\u952e\u76d8", "bitwisdom", "mod"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074373, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u2764\ufe0f \u5728\u8fd9\u91cc\u67e5\u770bLambda\u5e76\u6ce8\u518c\u4ed6\u4eec\u7684GPU\u4e91\uff1ahttps://lambdalabs.com/papers\ud83d\udcdd #NVIDIA\u7684\u8bba\u6587\u201c\u5177\u6709\u591a\u5206\u8fa8\u7387\u7684\u5373\u65f6\u795e\u7ecf\u56fe\u5f62\u539f\u8bed\u3002\u3002\u3002", "note_en": "\u2764\ufe0f Check out Lambda here and sign up for their GPU Cloud: https://lambdalabs.com/papers\ud83d\udcdd #NVIDIA's paper \"Instant Neural Graphics Primitives with a Multires...", "posttime": "2022-02-21 05:50:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nvidia,\u4eba\u5de5\u667a\u80fd,ai,\u56fe\u5f62", "title": "\u82f1\u4f1f\u8fbe\u7684\u65b0\u4eba\u5de5\u667a\u80fd\uff1a\u5373\u65f6\u795e\u7ecf\u56fe\u5f62", "title_en": "Nvidia\u2019s New AI: Instant Neural Graphics", "transed": 1, "url": "https://www.youtube.com/watch?v=j8tMk-GE8hY", "via": "", "real_tags": ["nvidia", "\u4eba\u5de5\u667a\u80fd", "ai", "\u56fe\u5f62"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074372, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u5173winit\u8303\u56f4\u4e4b\u5916\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u9605wiki\u4e2d\u5176\u4ed6\u677f\u6761\u7bb1\u63d0\u4f9b\u7684\u7f3a\u5931\u529f\u80fd\u3002\nWinit\u662f\u4e00\u4e2a\u7a97\u53e3\u521b\u5efa\u548c\u7ba1\u7406\u5e93\u3002\u5b83\u53ef\u4ee5\u521b\u5efa\u7a97\u53e3\uff0c\u5e76\u5141\u8bb8\u60a8\u5904\u7406\u7a97\u53e3\u751f\u6210\u7684\u4e8b\u4ef6\uff08\u4f8b\u5982\uff1a\u6b63\u5728\u8c03\u6574\u5927\u5c0f\u7684\u7a97\u53e3\u3001\u6b63\u5728\u6309\u4e0b\u7684\u952e\u3001\u9f20\u6807\u79fb\u52a8\u7b49\uff09\u3002\nWinit\u88ab\u8bbe\u8ba1\u6210\u4e00\u4e2a\u5e93\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u5e95\u5c42\u7816\u5757\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u5728\u7a97\u53e3\u4e0a\u663e\u793a\u67d0\u4e9b\u5185\u5bb9\uff0c\u60a8\u9700\u8981\u4f7f\u7528winit\u6216\u5176\u4ed6\u5e93\u63d0\u4f9b\u7684\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684getter\u3002\n\u4f7f\u7528winit:{event:\uff1a{event\uff0cWindowEvent}\uff0cevent_loop:\uff1a{ControlFlow\uff0cEventLoop}\uff0cwindow:\uff1aWindowBuilder\uff0c}\uff1bfn main\uff08\uff09{let event_loop=EventLoop:\uff1anew\uff08\uff09\uff1blet window=WindowBuilder:\uff1anew\uff08\uff09.build\uff08&amp\uff1bevent_loop\uff09.unwrap\uff08\uff09\uff1bevent_loop.run\uff08\u79fb\u52a8|\u4e8b\u4ef6\uff0cuu\uff0c\u63a7\u5236_flow |{*\u63a7\u5236_flow=ControlFlow:\uff1aWait\uff1b\u5339\u914d\u4e8b\u4ef6{event:\uff1aWindowEvent:WindowEvent:\uff1aCloseRequested\uff0cwindow id\uff0c}\u5982\u679cwindow id==window id==window gt*control_flow=ControlFlow:\uff1aExit\uff0c=&gt\uff1b(), } });}\n\u5728web\u5e73\u53f0\u4e0a\uff0cWinit\u7a97\u53e3\u7531&lt\uff1b\u5e06\u5e03&gt\uff1b\u8981\u7d20\u60a8\u53ef\u4ee5\u5411Winit\u63d0\u4f9b&lt\uff1b\u5e06\u5e03&gt\uff1b\u5143\u7d20\uff0c\u6216\u8ba9Winitcreate\u521b\u5efa\u4e00\u4e2a&lt\uff1b\u5e06\u5e03&gt\uff1b\u5143\u7d20\uff0c\u7136\u540e\u60a8\u53ef\u4ee5\u81ea\u5df1\u68c0\u7d22\u5e76\u5c06\u5176\u63d2\u5165DOM\u3002\n\u4f8b\u5982\uff0c\u4f7f\u7528Winit\u548cWebAssembly\u7684\u793a\u4f8b\u4ee3\u7801\uff0c\u8bf7\u67e5\u770bweb\u793a\u4f8b\u3002\u6709\u5173\u5728WebAssembly\u4e0a\u4f7f\u7528Rust\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Rust and WebAssembly\u624b\u518c\u3002\n\u8be5\u5e93\u4f7f\u7528ndk rs\u677f\u6761\u7bb1\uff0c\u6709\u5173\u66f4\u591a\u6587\u6863\uff0c\u8bf7\u53c2\u9605\u8be5repo\u3002\nndk_glue\u7248\u672c\u9700\u8981\u4e0ewinit\u4f7f\u7528\u7684\u7248\u672c\u5339\u914d\u3002\u5426\u5219\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u6b63\u786e\u542f\u52a8\uff0c\u56e0\u4e3andk#U\u80f6\u6c34&#39\uff1b\u7531\u4e8e\u7248\u672c\u4e0d\u5339\u914d\uff0cs\u7684\u5185\u90e8NativeActivity\u9759\u6001\u4e0d\u76f8\u540c\u3002", "note_en": "For features  outside the scope of winit, see  Missing features provided by other crates in the wiki.\n     Winit is a window creation and management library. It can create windows and lets you handleevents (for example: the window being resized, a key being pressed, a mouse movement, etc.)produced by window.\n Winit is designed to be a low-level brick in a hierarchy of libraries. Consequently, in order toshow something on the window you need to use the platform-specific getters provided by winit, oranother library.\n use winit ::{ event ::{Event, WindowEvent}, event_loop ::{ControlFlow, EventLoop}, window ::WindowBuilder,}; fn  main() {  let event_loop  = EventLoop :: new();  let window  = WindowBuilder :: new(). build( &amp;event_loop). unwrap(); event_loop. run( move  |event, _, control_flow | {  *control_flow  = ControlFlow ::Wait;  match event { Event ::WindowEvent { event: WindowEvent ::CloseRequested, window_id, }  if window_id  == window. id()  =&gt;  *control_flow  = ControlFlow ::Exit, _  =&gt; (), } });}\n        On the web platform, a Winit window is backed by a  &lt;canvas&gt; element. You caneither  provide Winit with a  &lt;canvas&gt; element, or  let Winitcreate a  &lt;canvas&gt; element which you can then retrieve andinsert it into the DOM yourself.\n For example code using Winit with WebAssembly, check out the  web example. Forinformation on using Rust on WebAssembly, check out the  Rust and WebAssemblybook.\n  This library makes use of the  ndk-rs crates, refer to that repo for more documentation.\n The  ndk_glue version needs to match the version used by  winit. Otherwise, the application will not start correctly as  ndk_glue&#39;s internal NativeActivity static is not the same due to version mismatch.", "posttime": "2022-02-21 05:48:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u5904\u7406,window,winit", "title": "Winit\u2013\u7eaf\u9508\u73bb\u7483\u7a97\u5904\u7406\u5e93", "title_en": "Winit \u2013 Window handling library in pure Rust", "transed": 1, "url": "https://github.com/rust-windowing/winit", "via": "", "real_tags": ["rust", "\u5904\u7406", "window", "winit"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074371, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "GamesBeat Summit 2022\u5c06\u4e8e4\u670826\u65e5\u81f328\u65e5\u56de\u5f52\uff0c\u5c4a\u65f6\u5c06\u4e3e\u529e\u5176\u6700\u5927\u7684\u6e38\u620f\u9886\u8896\u6d3b\u52a8\u3002\u5728\u8fd9\u91cc\u9884\u5b9a\u5ea7\u4f4d\uff01\nNvidia\u9996\u5e2d\u6267\u884c\u5b98Jensen Huang\u6ca1\u6709\u5b9e\u73b0\u4ed6\u6536\u8d2dARM 800\u4ebf\u7f8e\u5143\u7684\u68a6\u60f3\u3002\u76d1\u7ba1\u673a\u6784\u63a8\u8fdf\u4e86\u4ea4\u6613\uff0c\u9ec4\u5728\u201c\u7aed\u5c3d\u5168\u529b\u201d\u540e\u53d6\u6d88\u4e86\u4ea4\u6613\n\u4f46\u4ed6\u7684\u516c\u53f8\u4ecd\u5728\u53d1\u5c55\u58ee\u5927\u3002\u82f1\u4f1f\u8fbe\u516c\u5e03\u622a\u81f31\u670830\u65e5\u7684\u7b2c\u56db\u8d22\u5b63\u8425\u6536\u4e3a76.4\u4ebf\u7f8e\u5143\uff0c\u540c\u6bd4\u589e\u957f53%\u3002\u6e38\u620f\u3001\u6570\u636e\u4e2d\u5fc3\u548c\u4e13\u4e1a\u53ef\u89c6\u5316\u5e02\u573a\u5e73\u53f0\u5747\u5b9e\u73b0\u4e86\u521b\u7eaa\u5f55\u7684\u5b63\u5ea6\u548c\u5e74\u5ea6\u6536\u5165\u3002\n\u8fd9\u8868\u660e\uff0c\u8be5\u516c\u53f8\u6709\u5f88\u5927\u7684\u5e7f\u5ea6\uff0c\u56e0\u4e3a\u5b83\u77e5\u9053\u5728Arm\u4ea4\u6613\u5d29\u6e83\u540e\u4f1a\u505a\u4ec0\u4e48\u3002\u9ec4\u8bf4\uff0c\u4ed6\u5bf9\u81ea\u5df1\u7684\u4e09\u82af\u7247\u6218\u7565\u2014\u2014Omniverse\u3001metaverse\u548c\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u2014\u2014\u5bc4\u4e88\u539a\u671b\u3002\u5728\u516c\u53f8\u672c\u5468\u53d1\u5e03\u76c8\u5229\u62a5\u544a\u540e\uff0c\u6211\u6709\u5f88\u77ed\u7684\u65f6\u95f4\u91c7\u8bbf\u4e86\u9ec4\u3002\nVentureBeat\uff1a\u4f60\u7684\u540e\u7f6e\u7b56\u7565\u662f\u4ec0\u4e48\uff1f\u9274\u4e8e\uff08Arm\u4ea4\u6613\u88ab\u53d6\u6d88\uff09\uff0c\u4f60\u5fc5\u987b\u4f20\u8fbe\u4f60\u7684\u6218\u7565\u65b9\u5411\u5417\uff1f\n\u9ec4\u5ef6\u68ee\uff1a\u6ca1\u4ec0\u4e48\u3002\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\u548cArm\u7684\u7ed3\u5408\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u53ef\u80fd\u6765\u81ea\u7ec4\u5408\u7684\u7b56\u7565\u90fd\u4ece\u672a\u88ab\u63d0\u53ca\u3002\u6240\u4ee5\u6211\u4eec\u7684\u7b56\u7565\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002\u6211\u4eec\u4e3a\u4efb\u4f55\u6709\u4e2d\u592e\u5904\u7406\u5668\u7684\u5730\u65b9\u8fdb\u884c\u52a0\u901f\u8ba1\u7b97\u3002\u6211\u4eec\u5c06\u5728x86\u4e0a\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u6211\u4eec\u4f1a\u8fd9\u6837\u505a\u7684\uff0c\u6211\u4eec\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u624b\u81c2\u3002\u6211\u4eec\u6709\u4e00\u5927\u5806ARM CPU\u548c\u6b63\u5728\u5f00\u53d1\u7684\u7247\u4e0a\u7cfb\u7edf\uff08SoC\uff09\u3002\u6211\u4eec\u662f\u72c2\u70ed\u8005\u3002\u6211\u4eec\u90fd\u8fd9\u4e48\u505a\u3002\u6211\u4eec\u62e5\u670920\u5e74\u7684Arm\u77e5\u8bc6\u4ea7\u6743\u8bb8\u53ef\u8bc1\u3002\u6211\u4eec\u5c06\u7ee7\u7eed\u5229\u7528\u6240\u6709\u8fd9\u4e9b\u548c\u6240\u6709\u5e02\u573a\u3002\u5c31\u8fd9\u6837\u3002\u7ee7\u7eed\u6784\u5efaCPU\uff08\u56fe\u5f62\u5904\u7406\u5355\u5143\uff09GPU\u548cDPU\uff08\u6570\u636e\u5904\u7406\u5355\u5143\uff09\u3002\n\u8fd9\u5c31\u662f\u4f60\u7684\u4e09\u82af\u7247\u7b56\u7565\uff1f\u4f60\u4f1a\u8003\u8651RISC-V\u73b0\u5728\u624b\u81c2\u4ea4\u6613\u6ca1\u6709\u53d1\u751f\u5417\uff1f\n\u9ec4\uff1a\u6211\u4eec\u4f7f\u7528RISC-V\u3002\u6211\u4eec\u662fGPU\u4e2d\u7684RISC-V\u7528\u6237\u3002\u6211\u4eec\u5728\u51e0\u4e2a\u9886\u57df\u4f7f\u7528\u5b83\u3002\u5bf9\u4e8e\u7cfb\u7edf\u63a7\u5236\u5668\uff0cBluefield GPU\u5185\u90e8\u6709\u4e00\u4e2aRISC-V\u52a0\u901f\u5f15\u64ce\uff0c\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\uff0c\u8fd8\u6709\u4e00\u4e2a\u53ef\u7f16\u7a0b\u5f15\u64ce\u3002\u6211\u4eec\u5728\u5408\u7406\u7684\u65f6\u5019\u4f7f\u7528RISC-V\u3002\u6211\u4eec\u5728\u5408\u7406\u7684\u65f6\u5019\u4f7f\u7528\u624b\u81c2\u3002\u6211\u4eec\u5728\u6709\u610f\u4e49\u7684\u65f6\u5019\u4f7f\u7528x86\u3002\nVB\uff1a\u4f60\u662f\u5982\u4f55\u770b\u5f85metaverse\u7684\u8fdb\u5c55\u7684\uff1f\u4f3c\u4e4e\u6bcf\u4e2a\u4eba\u90fd\u5bf9\u5143\u5b87\u5b99\u66f4\u611f\u5174\u8da3\uff0c\u800c\u5168\u5b87\u5b99\u603b\u662f\u5bf9\u8bdd\u7684\u4e00\u90e8\u5206\u3002\n\u9ec4\uff1a\u8ba9\u6211\u770b\u770b\u3002Omniverse for enterprise\u6b63\u5728\u5168\u7403\u7ea6700\u5bb6\u4e0d\u540c\u7684\u516c\u53f8\u8fdb\u884c\u8bd5\u7528\u548c\u6d4b\u8bd5\u3002\u6211\u4eec\u5df2\u7ecf\u7b7e\u8ba2\u4e86\u4e00\u4e9b\u4e3b\u8981\u7684\u8bb8\u53ef\u8bc1\u3002\u6240\u4ee5\u6211\u4eec\u7684\u6570\u5b57\u6709\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5f00\u59cb\u3002\u4eba\u4eec\u7528\u5b83\u505a\u5404\u79cd\u5404\u6837\u7684\u4e8b\u60c5\u3002\u4ed6\u4eec\u7528\u5b83\u6765\u8fde\u63a5\u8bbe\u8ba1\u5e08\u548c\u521b\u4f5c\u8005\u3002\u4ed6\u4eec\u7528\u5b83\u6765\u6a21\u62df\u7269\u6d41\u4ed3\u5e93\uff0c\u6a21\u62df\u5de5\u5382\u3002\u4ed6\u4eec\u7528\u5b83\u6765\u751f\u6210\u5408\u6210\u6570\u636e\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u7269\u7406\u4e0a\u51c6\u786e\u5730\u6a21\u62df\u4f20\u611f\u5668\u3002\u4f60\u53ef\u4ee5\u7528\u5b83\u6765\u6a21\u62df\u8bad\u7ec3\u4eba\u5de5\u667a\u80fd\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u662f\u4ece\u6fc0\u5149\u96f7\u8fbe\u3001\u96f7\u8fbe\uff0c\u5f53\u7136\u8fd8\u6709\u6444\u50cf\u5934\u6536\u96c6\u7684\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u5c06\u5176\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7684\u6a21\u62df\u90e8\u5206\u3002\u4f5c\u4e3a\u53d1\u5e03\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u60a8\u9700\u8981\u9a8c\u8bc1\u8f6f\u4ef6\u3002\u60a8\u53ef\u4ee5\u5c06Omniverse\u5e94\u7528\u4e8e\u673a\u5668\u4eba\u6280\u672f\u5e94\u7528\u7a0b\u5e8f\u9a8c\u8bc1\u6d41\u7a0b\u4e2d\u3002\u4eba\u4eec\u4e5f\u5728\u7528\u5b83\u6765\u5236\u4f5c\u6570\u5b57\u53cc\u80de\u80ce\u3002\nVB\uff1a\u4f60\u4f1a\u6210\u4e3a\u6700\u5927\u7684\u6570\u7801\u5b6a\u751f\u5144\u5f1f\uff0c\u5bf9\u5417\uff1f[Nvidia\u8ba1\u5212\u5236\u4f5c\u4e00\u4e2a\u5730\u7403\u7684\u6570\u5b57\u5b6a\u751f\u4f53\uff0c\u4f5c\u4e3a\u5176\u201c\u5730\u74032\u53f7\u201d\u6a21\u62df\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u6a21\u62df\u5c06\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u548c\u4e16\u754c\u4e0a\u6700\u5feb\u7684\u8d85\u7ea7\u8ba1\u7b97\u673a\u6765\u6a21\u62df\u6c14\u5019\u53d8\u5316\uff0c\u5e76\u9884\u6d4b\u672a\u6765\u51e0\u5341\u5e74\u5730\u7403\u6c14\u5019\u53ef\u80fd\u5982\u4f55\u53d8\u5316]\u3002\n\u9ec4\uff1a\u6211\u4eec\u6b63\u5728\u5efa\u9020\u6216\u786e\u5b9a\u5efa\u7b51\u7684\u8303\u56f4\uff0c\u5e76\u5efa\u9020\u6700\u7ec8\u7684\u6570\u5b57\u5b6a\u751f\u5144\u5f1f\u3002\nVB\uff1a\u4f60\u89c9\u5f97\u6211\u4eec\u4e5f\u5728\u8d70\u5411\u4e00\u4e2a\u5f00\u653e\u7684\u5143\u5b87\u5b99\u5417\uff1f\u76f8\u5bf9\u4e8e\u4e00\u5806\u6709\u56f4\u5899\u7684\u82b1\u56ed\uff0c\u5b83\u662f\u5426\u8db3\u591f\u5f00\u653e\uff1f\n\u9ec4\uff1a\u6211\u771f\u7684\u5e0c\u671b\u5b83\u662f\u5f00\u653e\u7684\uff0c\u800c\u4e14\u6211\u8ba4\u4e3a\u5b83\u5c06\u4ee5\u901a\u7528\u573a\u666f\u63cf\u8ff0\uff08USD\uff09\u5f00\u653e\u3002\u6b63\u5982\u4f60\u4eec\u6240\u77e5\uff0c\u6211\u4eec\u662f\u5f53\u4eca\u7f8e\u5143\u6700\u5927\u7684\u8d21\u732e\u8005\u4e4b\u4e00\uff0c\u4e5f\u662f\u4e3b\u8981\u7684\u8d21\u732e\u8005\u3002\u5b83\u662f\u76ae\u514b\u65af\u53d1\u660e\u7684\u3002\u5b83\u88ab\u8bb8\u591a\u4e0d\u540c\u7684\u5f00\u53d1\u8005\u91c7\u7528\u3002Adobe\u91c7\u7528\u4e86\u5b83\uff0c\u6211\u4eec\u5df2\u7ecf\u6709\u5f88\u591a\u4eba\u91c7\u7528\u4e86\u5b83\u3002\u6211\u5e0c\u671b\u6bcf\u4e2a\u4eba\u90fd\u80fd\u4f7f\u7528USD\uff0c\u7136\u540e\u5b83\u57fa\u672c\u4e0a\u4f1a\u6210\u4e3ametaverse\u7684HTML\u3002\nVB\uff1a\u60a8\u5bf9\u6c7d\u8f66\u90e8\u95e8\u7684\u4fe1\u5fc3\u6c34\u5e73\u5982\u4f55\uff1f\u6211\u4eec\u5728\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u65b9\u9762\u7684\u8fdb\u5c55\u5982\u4f55\uff1f\u5927\u6d41\u884c\u8fc7\u540e\uff0c\u4f60\u89c9\u5f97\u6211\u4eec\u6b63\u5728\u56de\u5230\u6b63\u8f68\u5417\uff1f\n\u9ec4\uff1a\u6211\u76f8\u4fe1\u5168\u4e16\u754c\u90fd\u4f1a\u6709\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u3002\u5b83\u4eec\u90fd\u6709\u81ea\u5df1\u7684\u64cd\u4f5c\u57df\u3002\u5176\u4e2d\u4e00\u4e9b\u5c31\u5728\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u4ed3\u5e93\u7684\u8303\u56f4\u5185\u3002\u4ed6\u4eec\u79f0\u4e4b\u4e3aAMR\uff0c\u81ea\u52a8\u79fb\u52a8\u673a\u5668\u4eba\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u653e\u5728\u6709\u56f4\u5899\u7684\u5de5\u5382\u91cc\uff0c\u8fd9\u6837\u5b83\u4eec\u5c31\u53ef\u4ee5\u628a\u8d27\u7269\u548c\u5b58\u8d27\u56db\u5904\u8f6c\u79fb\u3002\u4f60\u53ef\u4ee5\u5728\u6700\u540e\u4e00\u82f1\u91cc\u8fd0\u9001\u8d27\u7269\uff0c\u6bd4\u5982Neuro\u548c\u5176\u4ed6\u516c\u53f8\u3002\u6240\u6709\u8fd9\u4e9b\u4f1f\u5927\u7684\u516c\u53f8\u90fd\u5728\u505a\u6700\u540e\u4e00\u82f1\u91cc\u7684\u4ea4\u4ed8\u3002\u53ea\u8981\u4f60\u4e0d\u8fc7\u5206\u627f\u8bfa\uff0c\u6240\u6709\u8fd9\u4e9b\u5e94\u7528\u90fd\u662f\u53ef\u884c\u7684\u3002\n\u6211\u8ba4\u4e3a\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u5c06\u4f1a\u6709\u6210\u5343\u4e0a\u4e07\u7684\u5e94\u7528\uff0c\u8fd9\u662f\u80af\u5b9a\u7684\u3002\u4eca\u5e74\u5c06\u662f\u6211\u4eec\u81ea\u4e3b\u9a7e\u9a76\u7684\u8f6c\u6298\u4e4b\u5e74\u3002\u4eca\u5e74\u5bf9\u6211\u4eec\u6765\u8bf4\u5c06\u662f\u91cd\u8981\u7684\u4e00\u5e74\u3002\u7136\u540e\u660e\u5e74\uff0c\u660e\u5e74\u4f1a\u66f4\u5927\u3002\u52302025\u5e74\uff0c\u6211\u4eec\u5c06\u90e8\u7f72\u81ea\u5df1\u7684for\u8f6f\u4ef6\uff0c\u4e0e\u6c7d\u8f66\u516c\u53f8\u5206\u4eab\u6536\u5165\u3002\n\u56e0\u6b64\uff0c\u5982\u679c\u8bb8\u53ef\u8bc1\u662f10000\u7f8e\u5143\uff0c\u6211\u4eec\u5404\u5360\u4e00\u534a\u3002\u5982\u679c\u8ba2\u9605\u57fa\u6570\u4e3a\u6bcf\u67081000\u7f8e\u5143\u6216100\u7f8e\u5143\uff0c\u6211\u4eec\u5404\u5360\u4e00\u534a\u3002\u6211\u60f3\u6211\u73b0\u5728\u975e\u5e38\u786e\u5b9a\uff0c\u81ea\u52a8\u9a7e\u9a76\u6c7d\u8f66\u5c06\u6210\u4e3a\u6211\u4eec\u6700\u5927\u7684\u4e1a\u52a1\u4e4b\u4e00\u3002\nGamesBeat&#39\uff1bs\u5728\u62a5\u9053\u6e38\u620f\u884c\u4e1a\u65f6\u7684\u4fe1\u6761\u662f&#34\uff1b\u6fc0\u60c5\u4e0e\u5546\u4e1a\u76f8\u9047\u7684\u5730\u65b9&#34; \u8fd9\u662f\u4ec0\u4e48\u610f\u601d\uff1f\u6211\u4eec\u60f3\u544a\u8bc9\u4f60\u65b0\u95fb\u5bf9\u4f60\u6709\u591a\u91cd\u8981\u2014\u2014\u4e0d\u4ec5\u4ec5\u662f\u4f5c\u4e3a\u6e38\u620f\u5de5\u4f5c\u5ba4\u7684\u51b3\u7b56\u8005\uff0c\u8fd8\u662f\u6e38\u620f\u8ff7\u3002\u65e0\u8bba\u60a8\u662f\u9605\u8bfb\u6211\u4eec\u7684\u6587\u7ae0\u3001\u6536\u542c\u6211\u4eec\u7684\u64ad\u5ba2\uff0c\u8fd8\u662f\u89c2\u770b\u6211\u4eec\u7684\u89c6\u9891\uff0cGamesBeat\u90fd\u5c06\u5e2e\u52a9\u60a8\u4e86\u89e3\u8fd9\u4e2a\u884c\u4e1a\uff0c\u5e76\u4eab\u53d7\u53c2\u4e0e\u5176\u4e2d\u7684\u4e50\u8da3\u3002\u4e86\u89e3\u66f4\u591a", "note_en": "GamesBeat Summit 2022 returns with its largest event for leaders in gaming on April 26-28th.\u00a0Reserve your spot  here!\n Nvidia CEO Jensen Huang didn\u2019t get to fulfill his dream of  acquiring Arm for $80 billion. Regulators held the deal up and Huang called off the deal after \u201cgiving it our best shot.\u201d\n But his company is still going strong.  Nvidia\u00a0reported revenues of $7.64 billion for its fourth fiscal quarter ended January 30, up 53% from a year earlier. Gaming, datacenter, and professional visualization market platforms each achieved record revenue for the quarter and year.\n  That shows the company has a lot of breadth as it figures out what it will do in the wake of the Arm deals collapse. And Huang said he has high hopes for his three-chip strategy, the Omniverse, the metaverse, and self-driving cars. I had a short time to interview Huang after the company reporting earnings this week.\n    VentureBeat: What is your post-Arm strategy? Do you have to communicate your strategic direction in light of [the Arm deal being called off]?\n Jensen Huang: Not really anything. Because we never finished combining with Arm. So any strategies that would have come from the combination were never talked about. And so our strategy is exactly the same. We do accelerated computing for wherever there are (central processing units) CPUs. And so we\u2019ll do that for x86. And we\u2019ll do we do that for Arm. We have a whole bunch of ARM CPUs, and system-on-chips (SoCs) in development. And we\u2019re enthusiasts. We do all that. We have a 20-year license to Arm\u2019s intellectual property. And we\u2019ll continue to take advantage of all that and all the markets. And that\u2019s about it. Keep building CPUs, (graphics processing units) GPUs, and DPUs (data processing units).\n VB: So it\u2019s your three-chip strategy? Would you consider RISC-V now that the Arm deal is not happening?\n Huang: We use RISC-V. We\u2019re RISC-V users inside our GPUs. We use it in several areas. For system controllers, inside the Bluefield GPU, there is a RISC-V acceleration engine, if you will, a programmable engine. And we use RISC-V when when it makes sense. We use Arm when it makes sense. We use x86 when it makes sense.\n VB: And how are you viewing progress on the metaverse? It seems like everybody\u2019s a lot more excited about the  metaverse, and the Omniverse is always part of that conversation.\n Huang: Let\u2019s see. Omniverse for enterprise is being trialed and being tested in about 700 or so different companies around the world. We have entered into some major licenses already. And so our numbers are off to a great start. People are using it for all kinds of things. They\u2019re using it for connecting designers and creators. They\u2019re using it to simulate logistics warehouses, simulate factories. They\u2019re using it for synthetic data generation because we simulate sensors physically and accurately. You could use it for simulating data for training AIs that are collected from LiDAR, radars, and of course cameras. And so they\u2019re using it for simulation part of the software development process. You need to validate software as part of the part of the release process. And you can put Omniverse in the flow of robotics application validation. People are using it for digital twins, too.\n  VB: You\u2019re going to make the biggest digital twin of all, right? [Nvidia plans to make a digital twin of the Earth as part of its Earth 2 simulation, which will use AI and the world\u2019s fastest supercomputers to simulate climate change and predict how the planet\u2019s climate could change over decades].\n Huang: We\u2019re off building or scoping out the architecture and building the ultimate digital twin.\n VB: And do you feel like we\u2019re also heading towards an open metaverse? Will it be sufficiently open as opposed to a bunch of walled gardens?\n Huang: I really do hope it\u2019s open and I think it will be open with Universal Scene Description (USD). As you know, we\u2019re one of the largest contributors, the primary contributor, to USD today. And it was invented by Pixar. It\u2019s been adopted by so many different content developers. Adobe adopted it, and we have gotten a lot of people to adopt it. I\u2019m hoping that everybody will go to USD and then it will be become essentially the HTML of the metaverse.\n VB: What is your confidence level in the automotive division and how we are moving forward with self-driving cars? Do you feel like we are getting back on track after the pandemic?\n Huang: I am certain that we will have autonomous vehicles all over the world. They all have their operating domains. And some of that is just within the boundaries of a very large warehouse. They call them AMRs, autonomous moving robots. You could have them inside walled factories, and so they could be moving goods and inventory around. You could be delivering goods across the last mile, like Neuro and others. All these great companies that are doing last-mile delivery. All of those applications are very doable, so long as you don\u2019t over promise.\n And I think there will be thousands an thousands of applications of autonomous vehicles, and it\u2019s a sure thing. This year is going to be the inflection year for us on autonomous driving. This will be a big year for us. And then next year, it\u2019ll be even bigger next year. And in 2025, that\u2019s when we deploy our own for software where we do revenue sharing with the car companies.\n And so if the license was $10,000, we shared 50-50. If it\u2019s a subscription base of $1,000 or $100 a month, we share 50-50. I think I\u2019m pretty certain now that autonomous vehicles will be one of our largest businesses.\n GamesBeat&#39;s creed when covering the game industry is &#34;where passion meets business.&#34; What does this mean? We want to tell you how the news matters to you -- not just as a decision-maker at a game studio, but also as a fan of games. Whether you read our articles, listen to our podcasts, or watch our videos, GamesBeat will help you learn about the industry and enjoy engaging with it.  Learn More", "posttime": "2022-02-21 05:03:49", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "nvidia,\u62bc\u6ce8", "title": "\u91c7\u8bbfNVIDIA\u9996\u5e2d\u6267\u884c\u5b98Jensen Huang\u5bf9\u8be5\u516c\u53f8\u7684\u6218\u7565\u5931\u8d25\u540e\uff0c\u624b\u81c2\u51fa\u4ef7\uff0c\u5965\u59c6\u5c3c\u7ef4\u5c14\u7684\u8fdb\u5c55\uff0c\u5e76\u62bc\u6ce8\u81ea\u9a7e\u8f66", "title_en": "Interview with Nvidia CEO Jensen Huang on the company's strategy after its failed Arm bid, Omniverse's progress, and its bet on self-driving cars", "transed": 1, "url": "https://venturebeat.com/2022/02/20/jensen-huang-interview-nvidias-post-arm-strategy-omniverse-and-self-driving-cars/", "via": "", "real_tags": ["nvidia", "\u62bc\u6ce8"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074370, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u673a\u5668\u5b66\u4e60\u7684\u9ec4\u91d1\u6cd5\u5219\u4e4b\u4e00\u662f\u5c06\u6570\u636e\u96c6\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u4e86\u89e3\u5982\u4f55\u7ed5\u8fc7\u6700\u5e38\u89c1\u7684\u8b66\u544a\uff01\n\u6211\u4eec\u8fd9\u6837\u505a\u7684\u539f\u56e0\u5f88\u7b80\u5355\u3002\u5982\u679c\u6211\u4eec\u4e0d\u5c06\u6570\u636e\u5206\u6210\u4e0d\u540c\u7684\u96c6\u5408\uff0c\u6a21\u578b\u5c06\u6839\u636e\u8bad\u7ec3\u671f\u95f4\u770b\u5230\u7684\u76f8\u540c\u6570\u636e\u8fdb\u884c\u8bc4\u4f30\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u8fc7\u5ea6\u88c5\u4fee\u3002\n\u6211\u4eec\u5c06\u6570\u636e\u96c6\u968f\u673a\u5206\u6210\u4e09\u4e2a\u5b50\u96c6\uff0c\u79f0\u4e3a\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u62c6\u5206\u53ef\u4ee5\u662f60/20/20\u621670/20/10\u6216\u4efb\u4f55\u5176\u4ed6\u60a8\u60f3\u8981\u7684\u6bd4\u7387\u3002\n\u5982\u679c\u6211\u4eec\u5bf9\u7ed3\u679c\u4e0d\u6ee1\u610f\uff0c\u6211\u4eec\u53ef\u4ee5\u66f4\u6539\u8d85\u53c2\u6570\u6216\u9009\u62e9\u53e6\u4e00\u4e2a\u6a21\u578b\uff0c\u7136\u540e\u518d\u6b21\u8f6c\u5230\u6b65\u9aa42\n\u6700\u540e\uff0c\u4e00\u65e6\u6211\u4eec\u5bf9\u9a8c\u8bc1\u96c6\u7684\u7ed3\u679c\u6ee1\u610f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u6d4b\u8bd5\u96c6\u4e0a\u8bc4\u4f30\u6211\u4eec\u7684\u6a21\u578b\u3002\n\u5982\u679c\u6211\u4eec\u5bf9\u7ed3\u679c\u611f\u5230\u6ee1\u610f\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u518d\u6b21\u5728\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u4e0a\u8bad\u7ec3\u6211\u4eec\u7684\u6a21\u578b\uff0c\u5e76\u4f7f\u7528\u6211\u4eec\u6700\u540e\u5bfc\u51fa\u7684\u8d85\u53c2\u6570\u3002\n\u6211\u4eec\u53ef\u4ee5\u5728\u6d4b\u8bd5\u96c6\u4e0a\u518d\u6b21\u8bc4\u4f30\u6a21\u578b\u7684\u51c6\u786e\u6027\uff0c\u5982\u679c\u6211\u4eec\u613f\u610f\uff0c\u53ef\u4ee5\u90e8\u7f72\u6a21\u578b\u3002\n\u5927\u591a\u6570ML\u6846\u67b6\u4e3a\u6570\u636e\u96c6\u7684\u968f\u673a\u8bad\u7ec3/\u6d4b\u8bd5\u5206\u5272\u63d0\u4f9b\u4e86\u5185\u7f6e\u65b9\u6cd5\u3002\u6700\u8457\u540d\u7684\u4f8b\u5b50\u662fscikit learn\u7684train_test_split\u51fd\u6570\u3002\n\u662f\u7684\uff0c\u8fd9\u53ef\u80fd\u662f\u4e2a\u95ee\u9898\u3002\u5bf9\u4e8e\u975e\u5e38\u5c0f\u7684\u6570\u636e\u96c6\uff0c\u6d4b\u8bd5\u96c6\u5c06\u975e\u5e38\u5c0f\uff0c\u56e0\u6b64\u5355\u4e2a\u9519\u8bef\u9884\u6d4b\u5bf9\u6d4b\u8bd5\u7cbe\u5ea6\u6709\u5f88\u5927\u5f71\u54cd\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u8fd9\u4e2a\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u79f0\u4e3a\u4ea4\u53c9\u9a8c\u8bc1\u3002\u6211\u4eec\u57fa\u672c\u4e0a\u521b\u5efa\u4e86\u6570\u636e\u96c6\u7684\u5206\u533a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u6211\u4eec\u603b\u662f\u62ff\u51fa\u4e00\u5957\u6d4b\u8bd5\u6570\u636e\uff0c\u5e76\u4f7f\u7528\u6240\u6709\u5176\u4ed6\u6570\u636e\u8fdb\u884c\u57f9\u8bad\u3002\u6700\u540e\uff0c\u6211\u4eec\u6536\u96c6\u5e76\u5e73\u5747\u6d4b\u8bd5\u96c6\u7684\u6240\u6709\u7ed3\u679c\u3002\u6211\u4eec\u57fa\u672c\u4e0a\u8bad\u7ec3\u4e86k\u4e2a\u6a21\u578b\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e2a\u6280\u5de7\u83b7\u5f97\u4e86\u5728\u5b8c\u6574\u6570\u636e\u96c6\u4e0a\u8bc4\u4f30\u6a21\u578b\u7684\u7edf\u8ba1\u6570\u636e\uff08\u56e0\u4e3a\u6bcf\u4e2a\u6837\u672c\u90fd\u662fk\u4e2a\u6d4b\u8bd5\u96c6\u7684\u4e00\u90e8\u5206\uff09\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u5728\u6700\u8fd1\u7684\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u4e2d\u51e0\u4e4e\u6ca1\u6709\u4f7f\u7528\uff0c\u56e0\u4e3a\u8bad\u7ec3\u4e00\u4e2ak\u578b\u7684\u65f6\u95f4\u975e\u5e38\u6602\u8d35\u3002\n\u968f\u7740\u6df1\u5ea6\u5b66\u4e60\u7684\u5174\u8d77\u548c\u6570\u636e\u96c6\u89c4\u6a21\u7684\u5927\u5e45\u589e\u52a0\uff0c\u5bf9\u4ea4\u53c9\u9a8c\u8bc1\u6216\u5355\u72ec\u9a8c\u8bc1\u96c6\u7b49\u6280\u672f\u7684\u9700\u6c42\u5df2\u7ecf\u51cf\u5c11\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\u5b9e\u9a8c\u975e\u5e38\u6602\u8d35\uff0c\u800c\u4e14\u9700\u8981\u5f88\u957f\u65f6\u95f4\u3002\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u7531\u4e8e\u5927\u6570\u636e\u96c6\u548c\u5927\u591a\u6570\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u7684\u6027\u8d28\uff0c\u6a21\u578b\u53d7\u8fc7\u5ea6\u62df\u5408\u7684\u5f71\u54cd\u8f83\u5c0f\u3002\n\u8fc7\u5ea6\u62df\u5408\u4ecd\u7136\u662f\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u4f46\u662f\uff0c\u5bf910\u4e2a\u7279\u5f81\u768450\u4e2a\u6837\u672c\u8fdb\u884c\u8fc7\u62df\u5408\u6bd4\u5bf9\u767e\u4e07\u50cf\u7d20\u7684100k\u56fe\u50cf\u8fdb\u884c\u8fc7\u62df\u5408\u8981\u5feb\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8bf4\uff0c\u7814\u7a76\u4eba\u5458\u548c\u4ece\u4e1a\u8005\u53d8\u5f97\u61d2\u60f0/\u908b\u9062\u3002\u5982\u679c\u80fd\u770b\u5230\u6700\u8fd1\u7684\u4efb\u4f55\u4e00\u7bc7\u8bba\u6587\u518d\u6b21\u7814\u7a76\u8fd9\u79cd\u6548\u5e94\uff0c\u90a3\u5c06\u662f\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u4f8b\u5982\uff0c\u53ef\u80fd\u662f\u8fc7\u53bb\u51e0\u5e74\uff0c\u7814\u7a76\u4eba\u5458\u5728ImageNet\u7684\u6d4b\u8bd5\u96c6\u4e0a\u8fc7\u5ea6\u62df\u5408\u4e86\u4ed6\u4eec\u7684\u6a21\u578b\uff0c\u56e0\u4e3a\u4e00\u76f4\u5728\u52aa\u529b\u6539\u8fdb\u5b83\uff0c\u4f7f\u4e4b\u6210\u4e3a\u6700\u5148\u8fdb\u7684\u6280\u672f\u3002\n\u5929\u771f\u7684\u662f\uff0c\u53ef\u4ee5\u624b\u52a8\u5c06\u6570\u636e\u96c6\u5206\u6210\u4e09\u4e2a\u5757\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u4eba\u7c7b\u662f\u975e\u5e38\u6709\u504f\u89c1\u7684\uff0c\u8fd9\u79cd\u504f\u89c1\u4f1a\u88ab\u5f15\u5165\u5230\u4e09\u4e2a\u96c6\u5408\u4e2d\u3002\n\u5728\u5b66\u672f\u754c\uff0c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u5e94\u8be5\u968f\u673a\u6311\u9009\u5b83\u4eec\u3002\u968f\u673a\u5206\u6210\u4e09\u7ec4\u53ef\u4ee5\u4fdd\u8bc1\u6240\u6709\u4e09\u7ec4\u9075\u5faa\u76f8\u540c\u7684\u7edf\u8ba1\u5206\u5e03\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u56e0\u4e3aML\u662f\u5173\u4e8e\u7edf\u8ba1\u7684\u3002\n\u4ece\u5b8c\u5168\u4e0d\u540c\u7684\u5206\u5e03\u4e2d\u5bfc\u51fa\u8fd9\u4e09\u4e2a\u96c6\u5408\u4f1a\u4ea7\u751f\u4e00\u4e9b\u4e0d\u60f3\u8981\u7684\u7ed3\u679c\u3002\u5982\u679c\u6211\u4eec\u60f3\u7528\u732b\u7684\u56fe\u7247\u8bad\u7ec3\u4e00\u4e2a\u6a21\u578b\u6765\u5bf9\u82b1\u8fdb\u884c\u5206\u7c7b\uff0c\u90a3\u4e48\u5b83\u6ca1\u6709\u591a\u5927\u4ef7\u503c\u3002\n\u7136\u800c\uff0c\u968f\u673a\u5206\u5272\u7684\u57fa\u672c\u5047\u8bbe\u662f\uff0c\u521d\u59cb\u6570\u636e\u96c6\u5df2\u7ecf\u4e0e\u6211\u4eec\u60f3\u8981\u89e3\u51b3\u7684\u95ee\u9898\u7684\u7edf\u8ba1\u5206\u5e03\u76f8\u5339\u914d\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5bf9\u4e8e\u81ea\u52a8\u9a7e\u9a76\u7b49\u95ee\u9898\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u6570\u636e\u96c6\u6db5\u76d6\u4e86\u5404\u79cd\u57ce\u5e02\u3001\u5929\u6c14\u6761\u4ef6\u3001\u8f66\u8f86\u3001\u4e00\u5e74\u56db\u5b63\u3001\u7279\u6b8a\u60c5\u51b5\u7b49\u3002\n\u6b63\u5982\u4f60\u53ef\u80fd\u8ba4\u4e3a\u7684\u90a3\u6837\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5b9e\u9645\u4e0a\u5e76\u4e0d\u9002\u7528\u4e8e\u5927\u591a\u6570\u5b9e\u9645\u7684\u6df1\u5ea6\u5b66\u4e60\u5e94\u7528\u3002\u6bcf\u5f53\u6211\u4eec\u5728\u4e00\u4e2a\u4e0d\u53d7\u63a7\u5236\u7684\u73af\u5883\u4e2d\u4f7f\u7528\u4f20\u611f\u5668\u6536\u96c6\u6570\u636e\u65f6\uff0c\u6211\u4eec\u53ef\u80fd\u65e0\u6cd5\u83b7\u5f97\u6240\u9700\u7684\u6570\u636e\u5206\u5e03\u3002\n\u4f46\u8fd9\u5f88\u7cdf\u7cd5\u3002\u5982\u679c\u6211\u65e0\u6cd5\u6536\u96c6\u6211\u8bd5\u56fe\u89e3\u51b3\u7684\u95ee\u9898\u7684\u4ee3\u8868\u6027\u6570\u636e\u96c6\uff0c\u6211\u8be5\u600e\u4e48\u529e\uff1f\n\u4f60\u8981\u5bfb\u627e\u7684\u662f\u5173\u4e8e\u53d1\u73b0\u548c\u5904\u7406\u9886\u57df\u5dee\u8ddd\u3001\u5206\u5e03\u53d8\u5316\u6216\u6570\u636e\u6f02\u79fb\u7684\u7814\u7a76\u9886\u57df\u3002\u6240\u6709\u8fd9\u4e9b\u672f\u8bed\u90fd\u6709\u81ea\u5df1\u7684\u5177\u4f53\u5b9a\u4e49\u3002\u6211\u5728\u8fd9\u91cc\u5217\u51fa\u4e86\u5b83\u4eec\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u8f7b\u677e\u5730\u641c\u7d22\u76f8\u5173\u95ee\u9898\u3002\n\u5bf9\u4e8e\u57df\uff0c\u6211\u4eec\u6307\u7684\u662f\u6570\u636e\u57df\uff0c\u5373\u6211\u4eec\u4f7f\u7528\u7684\u6570\u636e\u7684\u6765\u6e90\u548c\u7c7b\u578b\u3002\u6709\u4e09\u79cd\u524d\u8fdb\u7684\u65b9\u5f0f\uff1a\n\u5728\u673a\u5668\u5b66\u4e60\u4e2d\uff0c\u5f53\u6211\u4eec\u7684\u6a21\u578b\u5fc5\u987b\u5728\u65b0\u8f93\u5165\u6570\u636e\u6765\u81ea\u4e0e\u8bad\u7ec3\u6570\u636e\u4e0d\u540c\u7684\u5206\u5e03\u7684\u60c5\u51b5\u4e0b\u8868\u73b0\u826f\u597d\u65f6\uff0c\u6211\u4eec\u6307\u7684\u662f\u5206\u5e03\u5916\u3002\u56de\u5230\u6211\u4eec\u4e4b\u524d\u7684\u81ea\u52a8\u9a7e\u9a76\u793a\u4f8b\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u53ea\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u6674\u6717\u5929\u6c14\u4e0b\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u5728\u6b27\u6d32\u8fdb\u884c\u9884\u6d4b\u662f\u4e0d\u5408\u7406\u7684\u3002\n\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u4f20\u611f\u5668\u6536\u96c6\u6570\u636e\uff0c\u6211\u4eec\u8fd8\u53ef\u80fd\u6709\u5173\u4e8e\u6bcf\u4e2a\u6837\u672c\u6765\u6e90\u7684\u9644\u52a0\u4fe1\u606f\uff08\u6837\u672c\u53ef\u4ee5\u662f\u56fe\u50cf\u3001\u6fc0\u5149\u96f7\u8fbe\u5e27\u3001\u89c6\u9891\u7b49\uff09\u3002\n\u60a8\u5f88\u53ef\u80fd\u8fc7\u5ea6\u62df\u5408\u4e86\u9a8c\u8bc1\u96c6\u7684\u6a21\u578b\uff0c\u6216\u8005\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u975e\u5e38\u4e0d\u540c\u3002\u4f46\u662f\u600e\u4e48\u505a\u5462\uff1f\n\u60a8\u53ef\u80fd\u591a\u6b21\u53cd\u590d\u8c03\u6574\u53c2\u6570\uff0c\u4ee5\u6324\u51fa\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u53ef\u4ee5\u4ea7\u751f\u7684\u6700\u540e\u4e00\u70b9\u7cbe\u5ea6\u3002\u9a8c\u8bc1\u96c6\u4e0d\u518d\u6ee1\u8db3\u5176\u76ee\u7684\u3002\u6b64\u65f6\uff0c\u60a8\u5e94\u8be5\u653e\u677e\u4e00\u4e9b\u8d85\u53c2\u6570\u6216\u5f15\u5165\u6b63\u5219\u5316\u65b9\u6cd5\u3002\n\u5728\u5bfc\u51fa\u6700\u7ec8\u7684\u8d85\u53c2\u6570\u540e\uff0c\u6211\u60f3\u5728\u53d1\u8d27\u524d\u5728\u5b8c\u6574\u7684\u6570\u636e\u96c6\uff08\u8bad\u7ec3+\u9a8c\u8bc1+\u6d4b\u8bd5\uff09\u4e0a\u91cd\u65b0\u8bad\u7ec3\u6211\u7684\u6a21\u578b\n\u4e0d\uff0c\u4e0d\u8981\u8fd9\u6837\u505a\u3002hyperparameters\u5df2\u7ecf\u9488\u5bf9train\uff08\u6216\u8005train+\u9a8c\u8bc1\uff09\u96c6\u8fdb\u884c\u4e86\u8c03\u6574\uff0c\u5f53\u7528\u4e8e\u5b8c\u6574\u6570\u636e\u96c6\u65f6\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u6d4b\u8bd5\u96c6\u4e0d\u518d\u5b58\u5728\uff0c\u60a8\u5c06\u65e0\u6cd5\u518d\u56de\u7b54\u6a21\u578b\u7684\u5b9e\u9645\u6027\u80fd\u6709\u591a\u597d\u7684\u95ee\u9898\u3002\n\u6211\u6709\u4e00\u4e2a\u89c6\u9891\u6570\u636e\u96c6\uff0c\u60f3\u628a\u5e27\u968f\u673a\u5206\u6210\u8bad\u7ec3\u96c6\u3001\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\n\u7531\u4e8e\u89c6\u9891\u5e27\u5f88\u53ef\u80fd\u9ad8\u5ea6\u76f8\u5173\uff08\u4f8b\u5982\uff0c\u76f8\u90bb\u7684\u4e24\u5e27\u770b\u8d77\u6765\u51e0\u4e4e\u76f8\u540c\uff09\uff0c\u8fd9\u662f\u4e00\u4e2a\u574f\u4e3b\u610f\u3002\u8fd9\u4e0e\u6211\u4eec\u6839\u636e\u8bad\u7ec3\u6570\u636e\u8bc4\u4f30\u6a21\u578b\u51e0\u4e4e\u662f\u4e00\u6837\u7684\u3002\u76f8\u53cd\uff0c\u60a8\u5e94\u8be5\u5c06\u6570\u636e\u96c6\u62c6\u5206\u4e3a\u591a\u4e2a\u89c6\u9891\uff08\u4f8b\u5982\uff0c\u89c6\u98911\u30013\u30015\u7528\u4e8e\u57f9\u8bad\uff0c\u89c6\u98912\u30014\u7528\u4e8e\u9a8c\u8bc1\uff09\u3002\u60a8\u53ef\u4ee5\u518d\u6b21\u4f7f\u7528\u968f\u673a\u5217\u8f66\u6d4b\u8bd5\u62c6\u5206\uff0c\u4f46\u8fd9\u6b21\u662f\u5728\u89c6\u9891\u7ea7\u522b\u800c\u4e0d\u662f\u5e27\u7ea7\u522b\u3002", "note_en": "One of the golden rules in machine learning is to split your dataset into train, validation, and test set. Learn how to bypass the most common caveats!\n The reason we do that is very simple. If we would not split the data into different sets the model would be evaluated on the same data it has seen during training. We therefore could run into problems such as overfitting without even knowing it.\n      We split the dataset  randomly into three subsets called the  train,  validation, and  test set. Splits could be 60/20/20 or 70/20/10 or any other ratio you desire.\n   If we are not happy with the results we can change the hyperparameters or pick another model and  go again to step 2\n Finally, once we\u2019re happy with the results on the  validation set we can evaluate our model on the  test set.\n If we\u2019re happy with the results we can now again train our model on the  train and  validation set combined using last the hyperparameters we derived.\n We can again evaluate the model accuracy on the  test set and if we\u2019re happy deploy the model.\n Most ML frameworks provide built-in methods for random train/ test splits of a dataset. The most well-known example is the  train_test_split function of scikit-learn.\n   Yes, this could be a problem. With very small datasets the test set will be tiny and therefore a single wrong prediction has a strong impact on the test accuracy. Fortunately, there is a way to work around this problem.\n The solution to this problem is called  cross-validation. We essentially create partitions of our dataset as shown in the image below. We always hold out a set for testing and use all the other data for training. Finally, we gather and average all the results from the testing sets. We essentially trained k models and using this trick managed to get statistics of evaluating the model on the full dataset (as every sample has been part of one of the k test sets).\n  This approach is barely used in recent deep learning methods as it\u2019s super expensive to train a model k times.\n With the rise of deep learning and the massive increase in dataset sizes, the need for techniques such as cross-validation or having a separate validation set has diminished. One reason for this is that experiments are very expensive and take a long time. Another one is that due to the large datasets and nature of most deep learning methods the models got less affected by overfitting.\n Overfitting is still a problem in deep learning. But overfitting to 50 samples with 10 features happens faster than overfitting to 100k images with millions of pixels\n One could argue that researchers and practitioners got lazy/ sloppy. It would be interesting to see any recent paper investigating such effects again. For example, it could be that researchers in the past years have heavily overfitted their models to the test set of ImageNet as there has been an ongoing struggle to improve it and become state-of-the-art.\n   Naively, one could just manually split the dataset into three chunks. The problem with this approach is that we humans are very biased and this bias would get introduced into the three sets.\n In academia, we learn that we should pick them randomly. A random split into the three sets guarantees that all three sets follow the same statistical distribution. And that\u2019s what we want since ML is all about statistics.\n Deriving the three sets from completely different distributions would yield some unwanted results. There is not much value in training a model on pictures of cats if we want to use it to classify flowers.\n  However, the underlying assumption of a random split is that the initial dataset already matches the statistical distribution of the problem we want to solve. That would mean that for problems such as autonomous driving the assumption is that our dataset covers all sorts of cities, weather conditions, vehicles, seasons of the year, special situations, etc.\n As you might think this assumption is actually not valid for most practical deep learning applications. Whenever we collect data using sensors in an uncontrolled environment we might not have the desired data distribution.\n But that\u2019s bad. What am I supposed to do if I\u2019m not able to collect a representative dataset of the problem I try to solve?\n What you\u2019re looking for is the research area around finding and dealing with  domain gaps,  distributional shifts, or  data drift. All these terms have their own specific definition. I\u2019m listing them here so you can search for the relevant problems easily.\n With a  domain, we refer to the data domain, as the source and type of the data we use. There are three ways to move forward:\n    In machine learning, we refer to out-of-distribution whenever our model has to perform well in a situation where the new input data is from a different distribution than the training data. Going back to our autonomous driving example from before, we could say that for a model that has only been trained on sunny California weather, doing predictions in Europe is out of distribution.\n  Since we collected the data using different sensors we also might have additional information about the source for each of the samples (a sample could be an image, lidar frame, video, etc.).\n       You very likely overfitted your model to the validation set or validation and test set are very different. But how?\n You likely did several iterations of tweaking the parameters to squeeze out the last bit of accuracy your model can yield on the validation set. The validation set is no longer fulfilling its purpose. At this point, you should relax some of your hyperparameters or introduce regularization methods.\n After deriving my final hyperparameters I want to retrain my model on the full dataset (train + validation + test) before shipping\n No, don\u2019t do this. The hyperparameters have been tuned for the train (or maybe the train + validation) set and might yield a different result when used for the full dataset. Furthermore, you won\u2019t be able to answer the question anymore of how good your model really performs as the test set no longer exists.\n I have a video dataset and want to split the frames randomly into train, validation, and test set\n Since video frames are very likely highly correlated (e.g. two frames next to each other almost look the same) this is a bad idea. It\u2019s almost the same as if we would evaluate the model on the training data. Instead, you should split the dataset across videos (e.g. videos 1,3,5 are used for training and video 2,4 for validation). You can again use a random train test split but this time on the video level instead of the frame level.", "posttime": "2022-02-21 04:48:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6df1\u5ea6\u5b66\u4e60,\u6df1\u5ea6,test,\u6570\u636e", "title": "\u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u8bad\u7ec3\u6d4b\u8bd5", "title_en": "Train Test Split in Deep Learning", "transed": 1, "url": "https://www.lightly.ai/post/train-test-split-in-deep-learning", "via": "", "real_tags": ["\u6df1\u5ea6\u5b66\u4e60", "\u6df1\u5ea6", "test", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074369, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Ta4j\u662f\u4e00\u4e2a\u7528\u4e8e\u6280\u672f\u5206\u6790\u7684\u5f00\u6e90Java\u5e93\u3002\u5b83\u63d0\u4f9b\u4e86\u521b\u5efa\u3001\u8bc4\u4f30\u548c\u6267\u884c\u4ea4\u6613\u7b56\u7565\u7684\u57fa\u672c\u7ec4\u4ef6\u3002\n\u6cf0\u59ec\u9675\u4f4d\u4e8e\u9a6c\u6587\u4e2d\u5fc3\u3002\u60a8\u53ea\u9700\u5728pom\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4f9d\u8d56\u9879\u3002xml\u6587\u4ef6\u3002\n\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5411pom\u6dfb\u52a0\u4ee5\u4e0b\u4f9d\u8d56\u9879\uff0c\u4ecemaven\u4e2d\u592e\u5b58\u50a8\u5e93\u4e0b\u8f7d\u793a\u4f8b\u4ee3\u7801\u3002xml:\n\u7ef4\u57fa\u662f\u5b66\u4e60\u6cf0\u59ec\u9675\u7684\u6700\u4f73\u573a\u6240\u3002\u6709\u5173\u66f4\u8be6\u7ec6\u7684\u95ee\u9898\uff0c\u8bf7\u4f7f\u7528\u95ee\u9898\u8ffd\u8e2a\u5668\u3002", "note_en": "Ta4j is an open source Java library for  technical analysis. It provides the basic components for creation, evaluation and execution of trading strategies.\n     Ta4j is available on  Maven Central. You just have to add the following dependency in your  pom.xml file.\n      You can also download   example code from the maven central repository by adding the following dependency to your pom.xml:\n   The  wiki is the best place to start learning about ta4j. For more detailed questions, please use the  issues tracker.", "posttime": "2022-02-21 04:46:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,\u6280\u672f,library,pom", "title": "\u7528\u4e8e\u6280\u672f\u5206\u6790\u7684Java\u5e93", "title_en": "A Java library for technical analysis", "transed": 1, "url": "https://github.com/ta4j/ta4j", "via": "", "real_tags": ["java", "\u6280\u672f", "library", "pom"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074368, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728ISSCC 2022\u5927\u4f1a\u4e0a\uff0c\u82f1\u7279\u5c14\u5206\u4eab\u4e86\u5176\u65b0\u7684\u6bd4\u7279\u5e01\u91c7\u77ff\u5bcc\u77ffASIC\u7684\u6df1\u5165\u7ec6\u8282\uff0c\u5e76\u6982\u8ff0\u4e86\u5b83\u5982\u4f55\u5c06300\u4e2a\u8fd9\u79cd\u5c0f\u578b\u8282\u80fd\u82af\u7247\u878d\u5408\u5230\u4e00\u4e2a\u5f3a\u5927\u76843600W\u91c7\u77ff\u673a\u4e2d\uff0c\u4ee5\u9ad8\u8fbe40 THash/s\u7684\u6027\u80fd\u6311\u6218Bitmain\u548cMicroBT\u5e02\u573a\u4e0a\u7684\u6700\u4f73\u4ea7\u54c1\u3002\u6211\u4eec\u9996\u5148\u53d1\u73b0\u4e86\u82f1\u7279\u5c14&#39\uff1b\u5728ISSCC 2022\u5e74\u4f1a\u8bae\u4e0a\uff0cs Bonanza\u77ff\u4e1a\u6709\u9650\u516c\u53f8\u5c06ASICs\u5217\u5165\u5c55\u793a\u540d\u5355\uff0c\u4ee5\u4e0b\u4fe1\u606f\u6765\u81ea\u8be5\u6d3b\u52a8\u7684\u5c55\u793a\u3002\u672c\u8d44\u6599\u6db5\u76d6\u7b2c\u4e00\u4ee3\u82f1\u7279\u5c14&39\uff1b\u5fae\u8f6f\u7684\u91c7\u77ff\u82af\u7247BMZ1\uff0c\u4f46\u8be5\u516c\u53f8\u5df2\u7ecf\u8fdb\u5165\u7b2c\u4e8c\u4ee3#39\uff1b\u5bcc\u77ff39\u53f7\uff1bASIC\u88ab\u79f0\u4e3aBMZ2\uff0c\u5b83\u73b0\u5728\u5411\u5ba2\u6237\u63d0\u4f9b\u3002\u516c\u53f8\u6d88\u606f\u4f20\u51fa\u540e&#39\uff1b\u82f1\u7279\u5c14\u6700\u7ec8\u6b63\u5f0f\u627f\u8ba4\u4e86\u5176\u533a\u5757\u94fe/\u6bd4\u7279\u5e01\u7845\u8ba1\u5212\uff0c\u5e76\u900f\u9732\u5176\u5df2\u7ecf\u62e5\u6709\u591a\u4e2a\u7b2c\u4e8c\u4ee3\u82af\u7247\u7684\u5927\u5ba2\u6237\u3002\u8fd9\u5305\u62ecBLOCK\uff08\u7531Twitter fame\u7684\u9996\u5e2d\u6267\u884c\u5b98\u6770\u514b\u00b7\u591a\u5c14\u897f\u638c\u8235\uff09\u3001Argo\u533a\u5757\u94fe\u548cGRIID\u57fa\u7840\u8bbe\u65bd\u3002\u82f1\u7279\u5c14\u6ca1\u6709&#39\uff1bt\u8fd8\u6ca1\u6709\u5206\u4eab\u7b2c\u4e8c\u4ee3\u82af\u7247\u548c\u7cfb\u7edf\u7684\u7ec6\u8282\uff0c\u4f46\u6211\u4eec\u77e5\u9053\u5b83\u4eec\u662fBMZ1 ASIC\u7684\u884d\u751f\u4ea7\u54c1\uff0c\u5982\u4e0b\u6240\u793a\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230BMZ1\u82af\u7247\u5728\u5176\u76f8\u5f53\u5c0f\u76847 x 7.5\u6beb\u7c73\u66b4\u9732\u82af\u7247FCLGA\u5c01\u88c5\uff08132\u4e2a\u7403\uff09\u3002\u4f5c\u4e3a\u4f60&#39\uff1b\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d300\u4e2a\u82af\u7247\u4e3a\u7cfb\u7edf\u4f9b\u7535\u3002\u6bcf\u4e2a\u82af\u7247\u5c3a\u5bf8\u4e3a4.14 x 3.42mm\uff0c\u603b\u5171\u670914.16mm^2\u7684\u7845\uff0c\u56e0\u6b64\u8fd9\u4e9b\u662f\u76f8\u5bf9\u8f83\u5c0f\u7684\u7845\u6761\u3002\u66f4\u5c0f\u7684\u82af\u7247\u5c3a\u5bf8\u63d0\u9ad8\u4e86\u4ea7\u91cf\uff0c\u5e76\u6700\u5927\u9650\u5ea6\u5730\u5229\u7528\u4e86\u6676\u5706\u9762\u79ef\uff08\u6bcf\u4e2a\u6676\u5706\u591a\u8fbe4000\u4e2a\u82af\u7247\uff09\uff0c\u4ece\u800c\u6709\u52a9\u4e8e\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u751f\u4ea7\u80fd\u529b\uff08\u5c3d\u7ba1\u5b83\u786e\u5b9e\u9700\u8981\u66f4\u591a\u7684\u6676\u5706\u5207\u5272/\u5c01\u88c5\u80fd\u529b\uff09\u3002\u82f1\u7279\u5c14\u79f0\u8fd9\u4e9b\u662f7nm ASIC\uff0c\u4f46\u6ca1\u6709&#39\uff1bt\u6307\u5b9a\u8fd9\u662f\u5426\u662f\u5b83\u81ea\u5df1\u7684#39\uff1b\u82f1\u7279\u5c147\u548c39\uff1b\u6700\u521d\u76847nm\u5c06\u6d41\u7a0b\u8282\u70b9\u91cd\u547d\u540d\u4e3a&#39\uff1b\u82f1\u7279\u5c144,39\uff1b\u6216\u53f0\u79ef\u7535&#39\uff1b7nm\u5de5\u827a\u3002\u6bcf\u4e2aBonanza Mine ASIC\u6709258\u4e2a\u6316\u6398\u5f15\u64ce\uff0c\u6bcf\u4e2a\u5f15\u64ce\u8ba1\u7b97\u5e76\u884cSHA256\u53cc\u54c8\u5e0c\u3002\u8fd9\u4e9b\u5f15\u64ce\u5360\u636e\u4e8690%\u7684\u82af\u7247\u9762\u79ef\uff0c\u5e76\u4ee5\u82f1\u7279\u5c14\u6240\u79f0\u7684&#39\uff1b\u8d85\u4f4e&#39\uff1b\u7535\u538b355mV\u3002\u7f29\u5c0f\u5230\u7cfb\u7edf\u4e2d\u7684300\u4e2a\u82af\u7247\uff0c\u6709&#39\uff1b\u603b\u5171\u67094248mm^2\u7684\u7845\uff0c\u4ee53600W\u7684\u529f\u8017\u63d0\u4f9b\u9ad8\u8fbe40\u6b21/\u79d2\u7684\u901f\u5ea6\u3002\u6bcf\u4e2aASIC\u572875\u6444\u6c0f\u5ea6\u4e0b\u4ee51.35\u52301.6 GHz\u7684\u9891\u7387\u5de5\u4f5c\uff0c\u6bcf\u4e2aASIC\u5e73\u5747\u6d88\u80177.5\u74e6\uff0c\u540c\u65f6\u8fbe\u5230137 Ghash/s\u3002\u5728355mV\u4e0b\u8fbe\u523055 J/THash/s\u3002\n\u82f1\u7279\u5c14\u5728\u6bcf\u4e2a\u6563\u5217\u677f\u4e0a\u768475\u4e2aBonanza Mine ASIC\u4e0a\u710a\u63a5\uff0c\u6392\u5217\u572825\u4e2a\u6df1\u7535\u538b\u5806\u6808\u4e2d\uff0c\u5806\u6808\u7535\u538b\u76f8\u8fde\u3002\u6563\u5217\u677f\u8fd8\u5305\u542b\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\uff0c\u7528\u4e8e\u7ba1\u7406\u901a\u7535\u548c\u70ed/\u5806\u6808\u7535\u538b\u76d1\u63a7\u300210MB/s UART\u4e32\u884c\u94fe\u8def\u5728\u82af\u7247\u548c\u4f4d\u4e8e\u6574\u4e2a\u7cfb\u7edf\u9876\u90e8\u7684\u63a7\u5236\u5355\u5143\u4e4b\u95f4\u4ea4\u6362\u6570\u636e\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6574\u4e2a\u7cfb\u7edf\u7684\u6846\u56fe\u548c\u56fe\u50cf\u3002\u56db\u5757\u6563\u5217\u677f\u5782\u76f4\u653e\u7f6e\u5728\u4e00\u4e2a\u5355\u5143\u4e2d\uff0c\u5e26\u6709\u56db\u4e2a\u98ce\u6247\uff0c\u53ef\u4fdd\u6301\u7cfb\u7edf\u51b7\u5374\u3002\u63a7\u5236\u5355\u5143\u4f4d\u4e8e\u8bbe\u5907\u9876\u90e8\uff0c\u5305\u542b\u4e00\u4e2a\u57fa\u4e8eIntel FPGA\u7684\u7cfb\u7edf\u63a7\u5236\u5668\u548c\u4e00\u4e2aArm Cortex\u5185\u6838\uff0c\u8be5\u5185\u6838\u8fd0\u884c\u6316\u6398\u5b88\u62a4\u8fdb\u7a0b\u5e76\u5728300\u4e2a\u82af\u7247\u4e4b\u95f4\u5206\u914d\u5de5\u4f5c\u3002ARM\u5185\u6838\u8fd8\u8c03\u6574\u82af\u7247\u4e0a\u7684PLL\uff0c\u4ee5\u63a7\u5236\u82af\u7247\u9891\u7387\uff0c\u5e76\u9a8c\u8bc1ASIC&#39\uff1b\u6563\u5217\u7ed3\u679c\u3002\u6b63\u5982\u60a8\u6240\u6599\uff0c\u8be5\u88c5\u7f6e\u8fd8\u5177\u6709\u4ee5\u592a\u7f51\u8fde\u63a5\uff0c\u53ef\u4e0e\u66f4\u5927\u7684\u91c7\u77ff\u6c60\u8fdb\u884c\u901a\u4fe1\u3002\u8be5\u7cfb\u7edf\u8fd8\u5177\u6709\u53ef\u7f16\u7a0b\u7535\u6e90\u3002\n\u5982\u4e0a\u6240\u793a\uff0c\u8be5\u7cfb\u7edf\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u529f\u7387/\u70ed\u6a21\u5f0f\u4e0b\u8fd0\u884c\uff0c\u5982\u8282\u80fd\u3001\u5e73\u8861\u548c\u9ad8\u6027\u80fd\uff0c\u4ee5\u5b9a\u5236\u4f7f\u7528\u6a21\u5f0f\uff0c\u4ece\u800c\u4ea7\u751f54\u523060 J/THash\u7684\u4efb\u4f55\u529f\u7387\u3002\u82f1\u7279\u5c14\u7528\u7b2c\u4e00\u4ee3Bonanza\u77ff\u5c71\u82af\u7247\u6784\u5efa\u4e86\u4e0a\u8ff0\u7cfb\u7edf\u3002\u7136\u800c\uff0c\u82f1\u7279\u5c14&#39\uff1bs\u7684\u7b2c\u4e8c\u4ee3\u82af\u7247\u663e\u7136\u53ef\u4ee5\u7528\u4e8e\u51e0\u79cd\u914d\u7f6e\uff1aGRIID\u548c#39\uff1b\u8c37\u6b4c\u4e0e\u82f1\u7279\u5c14\u7684\u4f9b\u5e94\u534f\u8bae\u4e2d\u6709\u5927\u91cf\u7684\u5bc6\u6587\u6765\u4fdd\u62a4\u654f\u611f\u4fe1\u606f\uff0c\u4f46\u4e5f\u5927\u91cf\u5f15\u7528\u4e86\u82f1\u7279\u5c14&#39\uff1b\u53c2\u8003\u8bbe\u8ba1\u8d44\u6599\u3002\u8fd9\u4e9b\u662f\u4e00\u7cfb\u5217\u6587\u6863\uff0c\u5ba2\u6237\u5728\u5c06Bonanza\u77ff\u5c71\u82af\u7247\u96c6\u6210\u5230\u81ea\u5df1\u7684\u5b9a\u5236\u7cfb\u7edf\u65f6\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u6587\u6863\u4f5c\u4e3a\u6307\u5bfc\u3002\u8fd9\u610f\u5473\u7740\u82f1\u7279\u5c14\u5c06\u5411\u5176\u90e8\u5206\u5ba2\u6237\u4f9b\u5e94\u7845\uff0c\u7136\u540e\u8fd9\u4e9b\u5ba2\u6237\u5c06\u521b\u5efa\u81ea\u5df1\u7684\u7cfb\u7edf\u3002\u8fd9\u4e5f\u4e0e\u6770\u514b\u00b7\u591a\u5c14\u897f\uff08Jack Dorsey#39\uff1b\u4ed6\u8bf4\uff0c\u8fd9\u5c06\u521b\u9020\u4e00\u4e2a&#34\uff1b\u6bd4\u7279\u5e01\u6316\u6398\u7cfb\u7edf\u57fa\u4e8e\u5b9a\u5236\u7845\u82af\u7247\uff0c\u9762\u5411\u5168\u7403\u4e2a\u4eba\u548c\u4f01\u4e1a\u5f00\u653e\u6e90\u4ee3\u7801&#34; \u5f53\u7136\uff0c\u82f1\u7279\u5c14\u4e5f\u53ef\u4ee5\u5236\u9020\u5b8c\u6574\u7684\u91c7\u77ff\u7cfb\u7edf\uff0c\u5e76\u901a\u8fc7\u5408\u4f5c\u4f19\u4f34\u5c06\u5176\u63a8\u5411\u5e02\u573a\uff0c\u4f46\u6211\u4eec&#39\uff1bWe\u2019\u6211\u4eec\u8fd8\u5f97\u7b49\u7740\u8fdb\u4e00\u6b65\u4e86\u89e3\u5b83\u7684\u4e0a\u5e02\u7b56\u7565\u3002\u82f1\u7279\u5c14&#39\uff1bs\u7684\u7b2c\u4e00\u4ee3Bonanza\u77ff\u82af\u7247\u4e3a\u5176\u7b2c\u4e8c\u4ee3Bonanza\u77ff\u82af\u7247\u8bbe\u5b9a\u4e86\u4e00\u4e2a\u5145\u6ee1\u5e0c\u671b\u7684\u57fa\u8c03\uff0c\u8fd9\u4e9b\u82af\u7247\u5df2\u7ecf\u5728\u5411\u5ba2\u6237\u63a8\u51fa\u3002\u7136\u800c\uff0c\u5173\u4e8e\u7b2c\u4e8c\u4ee3\u82af\u7247\u7684\u6280\u672f\u7ec6\u8282\uff0c\u5982\u6027\u80fd\u3001\u6548\u7387\u3001\u5b9a\u4ef7\u3001\u529f\u8017\u3001\u5de5\u827a\u8282\u70b9\u3001\u4f7f\u7528\u7684\u94f8\u9020\u5382\u7b49\uff0c\u4ecd\u6709\u5f88\u591a\u672a\u77e5\u56e0\u7d20\u3002\u6211\u4eec\u4e5f\u4e0d&#39\uff1b\u6211\u4e0d\u4e86\u89e3\u8fd9\u5bb6\u516c\u53f8&#39\uff1bs\u5bf9\u5176\u672a\u6765\u8def\u7ebf\u56fe\u7684\u8ba1\u5212\u3002\u82f1\u7279\u5c14\u5c06\u4e8e\u672c\u5468\u665a\u4e9b\u65f6\u5019\u5728ISSCC\u4e3e\u884c\u95ee\u7b54\u4f1a\u8bae\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u5728\u4f1a\u8bae\u7ed3\u675f\u540e\u7ee7\u7eed\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u3002", "note_en": "At ISSCC 2022, Intel shared the deep-dive details of its new Bitcoin-mining Bonanza Mine ASICs and outlined how it melds 300 of these tiny power-efficient chips into a powerful 3,600W miner that challenges the best on the market from Bitmain and MicroBT with up to 40 THash/s of performance.  We  first discovered Intel&#39;s Bonanza Mine ASICs in a listing for a presentation at the  ISSCC 2022 conference, and the information below comes from the presentations at the event. This material covers the first generation of Intel&#39;s mining chips, known as BMZ1, but the company has already moved on to its\u00a0 second-gen &#39;Bonanza Mine&#39; ASIC, known as BMZ2, that it is now making available to customers.  After news of the company&#39;s efforts came to light,  Intel finally officially acknowledged its blockchain/Bitcoin silicon program, divulging that it already has several large customers for the second-gen chips. That includes BLOCK (helmed by CEO Jack Dorsey of Twitter fame), Argo Blockchain, and GRIID Infrastructure.  Intel hasn&#39;t shared details of the second-gen chips and systems yet, but we do know they are derivatives of the BMZ1 ASICs shown below.\n   Here we can see the BMZ1 chip in its rather small 7 x 7.5mm exposed-die FCLGA package (132 balls). As you&#39;ll see below, 300 of these chips power the system.   Each chip die measures 4.14 x 3.42mm, for a total of 14.16mm^2 of silicon, so these are comparatively small slivers of silicon. The smaller die size improves yield and maximizes wafer area usage (up to 4,000 die per wafer), thus helping maximize production capacity (though it does require more wafer dicing/packaging capacity).\u00a0Intel says these are 7nm ASICs, but doesn&#39;t specify if that is its own &#39;Intel 7,&#39; the original 7nm before it renamed the process node to &#39;Intel 4,&#39; or TSMC&#39;s 7nm process.  Each Bonanza Mine ASIC has 258 mining engines, and each engine computes parallel SHA256 double hashes. These engines comprise 90% of the die area and operate at what Intel characterizes as an &#39;ultra-low&#39; voltage of 355mV.  Zooming out to the 300 chips in the system, there&#39;s a total of 4,248mm^2 of silicon that delivers up to 40TH/s at 3600W of power consumption. Each ASIC operates at 1.35 to 1.6 GHz at 75C, consuming an average of 7.5W apiece while hitting up to 137 Ghash/s. That works out to 55 J/THash/s at 355mV.\n   Intel solders on 75 Bonanza Mine ASICs per hash board, arranged in 25-deep voltage stacks with ganged stack-voltages. The hash board also houses a microcontroller that manages power-on and thermal/stack-voltage monitoring. A 10MB/s UART serial link shuffles data between the chips and the control unit that sits atop the full system.\n    Here we can see both the block diagram and images of the full system. Four hash boards are placed vertically into a single unit with four fans that keep the system cool.  The control unit sits atop the device, housing an Intel-FPGA-based system controller and an Arm Cortex core that runs the mining daemon and distributes the work among the 300 chips. The ARM core also adjusts the on-die PLLs to control chip frequencies and verify the ASICs&#39; hash results. As you would expect, the unit also has an Ethernet connection to communicate with a larger mining pool. The system also has a programmable power supply.\n  As shown above, the system can operate in different power/thermal profiles, like Power-Saving, Balanced, and High-Performance, to tailor the usage profile, thus yielding anywhere from 54 to 60 J/THash.  Intel built the system described above from the first-gen Bonanza Mine chips. However, Intel&#39;s second-gen chips can obviously be used in several configurations: GRIID&#39;s\u00a0 supply agreement with Intel\u00a0has plenty of redactions to protect sensitive information, but it also heavily references Intel&#39;s Reference Design Materials. These are a series of documents that customers use as guidance when integrating the Bonanza Mine chips into their own custom systems.  This implies that Intel will supply the silicon to some of its customers, who will then create their own systems. This also meshes well with Jack Dorsey&#39;s plans for BLOCK, which\u00a0 he says\u00a0will create a\u00a0&#34;bitcoin mining system based on custom silicon and open source for individuals and businesses worldwide.&#34; Of course, Intel could also manufacture complete mining systems and bring them to market through partners, but we&#39;ll have to wait to learn more about its go-to-market strategy.  Intel&#39;s first-gen Bonanza Mine chip sets a promising tone for its second-gen Bonanza Mine chips that are already working their way out to customers. However, there are still plenty of unknowns about the technical details of the second-gen chips, like performance, efficiency, pricing, power consumption, the process node, foundry used, and so on. We also don&#39;t know the company&#39;s plans for its future roadmap.  Intel has a question and answer session scheduled at ISSCC for later in the week, and we&#39;ll follow up with more information after.", "posttime": "2022-02-21 04:45:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u82f1\u7279\u5c14,\u82af\u7247,\u6bd4\u7279\u5e01,\u5f00\u91c7,details", "title": "\u82f1\u7279\u5c14\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5176\u6bd4\u7279\u5e01\u5f00\u91c7\u201cBonanza Mine\u201d\u82af\u7247\u548c\u7cfb\u7edf", "title_en": "Intel Details Its Bitcoin-Mining 'Bonanza Mine' Chips and Systems", "transed": 1, "url": "https://www.tomshardware.com/news/intel-details-its-bitcoin-mining-bonanza-mine-chips-and-systems", "via": "", "real_tags": ["\u82f1\u7279\u5c14", "\u82af\u7247", "\u6bd4\u7279\u5e01", "\u5f00\u91c7", "details"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074367, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bd4\u7279\u5e01\u53d1\u660e\u8005\u7684\u7279\u5f81\u662f\u4ec0\u4e48\uff1f\u90a3\u4e2a\u4eba\u5c31\u662f\u4e2d\u672c\u806a\u3002\n\u8ba9\u6211\u4eec\u7528\u4e00\u4e2a\u65b0\u7684\u540d\u5b57\u6765\u547d\u540dSatoshi\uff0c\u4ee5\u4fbf\u5c3d\u53ef\u80fd\u5c11\u5730\u504f\u8892Satoshi\u3002\nX\u5fc5\u987b\u7cbe\u901aC++\uff0c\u56e0\u4e3aSatoshi\u5728C++\u4e2d\u7f16\u5199\u4e86\u6bd4\u7279\u5e01\u6e90\u4ee3\u7801\u3002\nX\u53ef\u80fd\u57282009\u5e741\u670810\u65e5\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u8303\u52aa\u4f0a\u65af\uff0c\u56e0\u4e3a\u4f50\u85e4\u5728\u8fd9\u4e2a\u65f6\u95f4\u548c\u5730\u70b9\u900f\u9732\u4e86\u4e00\u4e2aIP\u5730\u5740\uff0c\u800c\u4f50\u85e4\u901a\u5e38\u5728\u4fc4\u7f57\u65af\u4f7f\u7528\u4ee3\u7406\uff0c\u8fd9\u4f7f\u5f97\u8303\u52aa\u4f0a\u65af\u7684\u6cc4\u5bc6\u53ef\u80fd\u662f\u65e0\u610f\u7684\u3001\u771f\u5b9e\u7684\u3002\nX\u53ef\u80fd\u4f1a\u4f7f\u7528\u8bf8\u5982\u201c\u6570\u91cf\u7ea7\u201d\u548c\u201c\u8840\u8165\u201d\u4e4b\u7c7b\u7684\u77ed\u8bed\uff0c\u56e0\u4e3a\u4f50\u85e4\u662f\u8fd9\u6837\u505a\u7684\u3002\nX\u53ef\u80fd\u662f\u201c\u4e13\u6a2a\u7684\u201d\uff0c\u56e0\u4e3a\u4e0e\u4f50\u85e4\u4e00\u8d77\u5de5\u4f5c\u7684\u4eba\u5c31\u662f\u8fd9\u6837\u63cf\u8ff0\u4ed6\u7684\u3002\nX\u57282007\u5e74\u80af\u5b9a\u6709\u65f6\u95f4\u5199\u6bd4\u7279\u5e01\uff0c\u56e0\u4e3aSatoshi\u5c31\u662f\u5728\u90a3\u65f6\u5199\u7684\u3002", "note_en": "What are the characteristics of the person who invented Bitcoin? The person who  is Satoshi Nakamoto.\n  Let\u2019s use a new name for the pseudonym Satoshi in order to consider the person who  is Satoshi with as little bias as possible.\n  X must have proficiency in C++, because Satoshi wrote the Bitcoin source code in C++.\n  X probably was in Van Nuys, California on 2009\u201301\u201310, because Satoshi revealed an IP address at this place and time, and Satoshi typically used a proxy in Russia, which makes the Van Nuys leak probably inadvertent and genuine.\n    X might use phrases like \u201corder of magnitude\u201d and \u201cbloody\u201d, because Satoshi did.\n   X might be \u201cbossy\u201d, because that\u2019s how people who worked with Satoshi described him.\n X must have had time to write Bitcoin in 2007, because that\u2019s when Satoshi did.", "posttime": "2022-02-21 04:44:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "paypal,specific,satoshi", "title": "Satoshi\u548cPayPal\u8054\u5408\u521b\u59cb\u4eba\u4e4b\u95f4\u7684\u9ad8\u5ea6\u7279\u5b9a\u7684\u5171\u540c\u70b9", "title_en": "Highly specific commonalities between Satoshi and Co-Founder of PayPal", "transed": 1, "url": "https://medium.com/@sahil50/satoshi-nakamoto-is-x-1a5f5fb09f1", "via": "", "real_tags": ["paypal", "specific", "satoshi"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074366, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e24\u4f4d\u72ec\u7acb\u6d88\u606f\u4eba\u58eb\u8868\u793a\uff0c\u5fae\u8f6f\u5df2\u7ecf\u5f00\u59cb\u6216\u5373\u5c06\u5f00\u59cb\u5f00\u53d1Windows 12\u3002\u96f7\u5fb7\u8499\u5fb7\u76ee\u524d\u6b63\u5728\u8c03\u52a8\u4eba\u5458\uff0c\u51c6\u5907\u56e2\u961f\u5f00\u59cbWindows 12\u5f00\u53d1\u3002\u6b64\u6b21\u5de5\u4f5c\u573a\u6240\u91cd\u7ec4\u53d1\u751f\u5728Windows 11\u63a8\u51fa\u4ee5\u6765\u6700\u91cd\u8981\u7684\u66f4\u65b0\u53d1\u5e03\u51e0\u5929\u540e\u3002\n\u5fae\u8f6fMVP Swift on Security\u4eca\u5929\u5728\u63a8\u7279\u4e0a\u8868\u793a\uff0c\u5fae\u8f6f\u7684\u4e00\u4f4d\u6d88\u606f\u4eba\u58eb\u544a\u8bc9\u4ed6\uff0c&#34\uff1bWindows 12\u5df2\u7ecf\u5728\u5f00\u53d1\u4e2d\uff0c\u5b83&#39\uff1b\u8fd9\u5c06\u9700\u8981\u4e24\u4e2a\u80ce\u538b\u76d1\u6d4b\u7cfb\u7edf&#34;  \u5fb7\u514b\u83ab\u5fb7\u3002de\u58f0\u79f0\u81ea\u5df1\u4e5f\u542c\u8bf4\u8fc7\u5fae\u8f6f\u7684Windows 12\u5f00\u53d1\u3002\u7136\u800c\uff0c\u7b2c\u4e8c\u4f4d\u72ec\u7acb\u6d88\u606f\u4eba\u58eb\u8868\u793a\uff0cWindows 12\u5c06\u4ece\u4e0b\u4e2a\u6708\u5f00\u59cb\u5f00\u53d1\uff0c\u56e0\u4e3a\u5fae\u8f6f\u4ecd\u5728\u4e3a\u8be5\u9879\u76ee\u7ec4\u5efa\u56e2\u961f\u3002\n\u5728&#34\uff1b\u4e24\u4e2a\u80ce\u538b\u76d1\u6d4b\u7cfb\u7edf&#34\uff1b\u7ec6\u8282\u65b9\u9762\uff0c\u6211\u4eec\u7684\u966a\u5ba1\u56e2\u6709\u5206\u6b67\u3002\u5b89\u5168\u65b9\u9762\u7684\u65af\u5a01\u592b\u7279\u4e0d\u662f&#39\uff1b\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u90fd\u4e0d\u662f\u4e00\u4e2a\u5f88\u5e7d\u9ed8\u7684\u8bf4\u6cd5\uff0c\u4f46\u5fb7\u514b\u83ab\u5fb7\u8bf4\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b11\u8bdd\u3002\u7ffb\u5f00\u6211\u4eec\u4e4b\u524d\u5bf9Windows\u548c\u5b89\u5168\u6027\u7684\u62a5\u9053\uff0c\u6211\u4eec\u8ba4\u4e3aSwift on security\u53ef\u80fd\u662f\u5728\u8c08\u8bbaWindows 12\u9700\u8981TPM\u548c\u7247\u4e0a\u786c\u4ef6\uff0c\u5982Microsoft Proputo\u5904\u7406\u5668\u548c/\u6216AMD\u5e73\u53f0\u5b89\u5168\u5904\u7406\u5668\u3002\n&#34;Ryzen 6000\u5305\u62ec\u65b0\u7684Microsoft Proputo security\u534f\u5904\u7406\u5668\uff0c\u5b83\u589e\u52a0\u4e86\u66f4\u591a\u529f\u80fd\u548c&#34\uff1bXbox\u7c7b\u548c#34\uff1b\u9664\u4e86AMD\u548c#39\uff1b\u73b0\u6709\u7684\u5e73\u53f0\u5b89\u5168\u5904\u7406\u5668\uff08PSP\uff09\u548c#34\uff1bAMD\u89e3\u91ca\u9053&#34;PSP\u4ecd\u7136\u63a7\u5236\u7528\u4e8e\u5b89\u5168\u5f15\u5bfc\u7684\u56fa\u4ef6\u8eab\u4efd\u9a8c\u8bc1\u3001\u8fd0\u884c\u65f6\u7684\u6620\u5c04I/O\uff0c\u4ee5\u53ca\u7528\u4e8e\u5b89\u5168\u76ee\u7684\u7684\u52a0\u5bc6\u5f15\u64ce\u3002Puropon\u5904\u7406\u5668\u5c06\u63d0\u4f9bfTPM\u529f\u80fd\u548c\u5176\u4ed6\u64cd\u4f5c\u7cfb\u7edf\u5bfc\u5411\u7684\u529f\u80fd&#34;\nWindows 10\u5927\u6982\u662f2015\u5e74\u53d1\u5e03\u7684Windows\u64cd\u4f5c\u7cfb\u7edf\u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\u3002\u5f88\u9ad8\u5174\u77e5\u9053\uff0c\u6211\u4eec\u5c06\u6709\u4e00\u4e2a\u8f83\u957f\u7684\u7a33\u5b9a\u671f\uff0c\u6bcf\u534a\u5e74\u4ea4\u66ff\u8fdb\u884c\u4e00\u6b21\u5f15\u64ce\u76d6\u4e0b\u7684\u529f\u80fd\u66f4\u65b0\uff0c\u5e76\u4eceWindows 8\u4e2d\u62ef\u6551\u4e86\u6211\u4eec\u3002\u7136\u800c\uff0cWindows 11\u7684\u53d1\u5e03\u548c\u53d1\u5e03\u7c97\u66b4\u5730\u5c06\u6211\u4eec\u4ece\u4ee4\u4eba\u6ee1\u610f\u7684\u8d77\u4f0f\u7684\u64cd\u4f5c\u7cfb\u7edf\u8fdb\u7a0b\u4e2d\u5524\u9192\u3002\n\u636e\u8bf4Windows 11\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u53d8\u5316\u7684\u89c4\u6a21\u9700\u8981\u5b83\u3002\u4e00\u4e9b\u6700\u91cd\u8981\u7684\u9884\u544a\u6027\u53d8\u5316\u5305\u62ec\u4e00\u4e2a\u6539\u8fdb\u7684\u4efb\u52a1\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u8fd9\u5c06\u4f7fPC\u673a\u5728\u82f1\u7279\u5c14&#39\uff1bs\u6df7\u5408\u67b6\u6784Alder Lake\u5904\u7406\u5668\u6210\u4e3a\u4e3b\u6d41\u3002\u6b64\u5916\uff0c\u4eba\u4eec\u975e\u5e38\u91cd\u89c6\u7cfb\u7edf\u5b89\u5168\u3002\u4e3b\u8981\u662f\u5728\u8fd9\u4e2a\u796d\u575b\u4e0a\uff0c\u5fae\u8f6f\u6709\u8db3\u591f\u7684\u4fe1\u5fc3\u727a\u7272\u4e86\u8bb8\u591a\u53ef\u7528\u7684\u8001\u4e00\u4ee3CPU\uff08\u82f1\u7279\u5c14\u5361\u6bd4\u6e56\u6216\u8001\u4e00\u4ee3\uff0cAMD Ryzen 1000\u6216\u8001\u4e00\u4ee3\uff09\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0cWindows 11\u6ca1\u6709&#39\uff1bt\u4f3c\u4e4e\u5438\u5f15\u4e86\u4e2a\u4eba\u7535\u8111\u7528\u6237\u7684\u5fc3\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5bf9\u4e2a\u4eba\u7535\u8111\u5e02\u573a\u72c2\u70ed\u8005\u7684\u611f\u53d7\u3002\u7136\u800c\uff0cWindows\u6709\u4e00\u4e2a\u4f20\u8bf4\u4e2d\u7684\u597d\u7248\u672c\u2014\u2014\u7834\u574f\u6027\u7248\u672c\u5468\u671f\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u4ee5\u53ca\u53ef\u80fd\u6765\u81ea\u7cfb\u7edf\u548c\u7ec4\u4ef6\u5236\u9020\u5546\u63a8\u52a8\u786c\u4ef6\u5347\u7ea7\u7684\u538b\u529b\uff0c\u53ef\u80fd\u662f\u5fae\u8f6f\u4f3c\u4e4e\u91cd\u65b0\u56de\u5230\u5e38\u89c4\u4e3b\u8981Windows\u7248\u672c\u66f4\u65b0\u8f68\u9053\u7684\u539f\u56e0\u3002\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u5373\u4f7f\u6709\u4e24\u4e2a\u72ec\u7acb\u7684\u6d88\u606f\u6765\u6e90\u652f\u6301Windows 12\u7684\u5f00\u53d1\uff0c\u6211\u4eec\u4ecd\u7136\u8ba4\u4e3a\u8fd9\u6761\u65b0\u95fb\u9700\u8981\u4e00\u4e9b\u76d0\u3002\n\u8003\u8651\u5230W11\u80af\u5b9a\u4e0d\u662f\u6ca1\u6709\u5b83&#39\uff1b\u6211\u548c\u6211\u59bb\u5b50\u90fd\u6709\u95ee\u9898\uff1bs\u7684PC\u6ca1\u6709\u95ee\u9898\uff0c\u6211\u60f3\u6211\u4eec\u4f1a\u9519\u8fc7W11\uff0c\u7b49\u5f85W12\u3002\n\u56de\u590d", "note_en": "Two independent sources have  said that Microsoft has either started or is on the verge of beginning the development of Windows 12. Redmond is currently shifting personnel around, readying teams to start Windows 12 development. The workplace reshuffling takes place just days after delivering the  most significant update to Windows 11 since its introduction.\n  Microsoft MVP  Swift on Security tweeted today that a source at Microsoft had told him, &#34;Windows 12 is already under development, and it&#39;s going to require two TPMs.&#34;  Deskmodder.de claims it too heard about Windows 12 development at Microsoft. However, this second independent source says that Windows 12 will only be in development starting from next month, as Microsoft is still building teams for the project.\n  On the &#34;Two TPMs&#34; detail, we have a split jury. Swift on Security isn&#39;t a heavy humor account by any means, but Deskmodder says that this reference is just a joke. Digging through our previous coverage of Windows and security, we think Swift on Security may be talking about Windows 12 requiring both a TPM and on-chip hardware like the  Microsoft Pluton Processor and or AMD Platform Security Processor.\n   &#34;Ryzen 6000 includes the new Microsoft Pluton security co-processor, which adds more functionality and &#34;Xbox-class&#34; security in addition to AMD&#39;s existing Platform Security Processor (PSP),&#34; explained AMD. &#34;The PSP still controls firmware authentication for secure boot, mapped I/O during runtime, and a cryptographic engine for security purposes. The Pluton processor steps in for fTPM functionality and additional OS-directed features.&#34;\n  Windows 10 was presumably the last version of the Windows OS when released back in 2015. It was pleasant to know that we would have an extended period of stability, with biannually alternating under-the-hood and feature updates from the OS that saved us from Windows 8. However, the announcement and  launch of Windows 11 rudely awoke us from our contented undulating OS progress.\n  The story goes that Windows 11 was somehow necessary as the scale of the change demanded it. Some of the most significant heralded changes included a revamped task scheduler, which would make PCs more efficient with Intel&#39;s hybrid architecture  Alder Lake processors becoming mainstream. Furthermore, there was a lot of emphasis on system security. It was mainly on this altar that Microsoft felt confident enough to  sacrifice many serviceable older-gen CPUs (Intel Kaby Lake or older, AMD Ryzen 1000 or older).\n So far, Windows 11 doesn&#39;t seem to have caught the hearts and minds of PC users - this is how we feel from the enthusiast side of the PC market. However, Windows has a fabled good version \u2013 destructive version cycle. For this reason, as well as perhaps pressure from systems and component makers to promote hardware upgrades, might be why Microsoft seems to be getting back on the regular major Windows version update track.\n Last but not least, even with two independent sources behind these rumors of Windows 12 development, we still think the news requires some salt.\n      Given that W11 is certainly not without it&#39;s problems and that W10, on both mine and my wife&#39;s PCs, is problem free, I think we will give W11 a miss and wait for W12.\n   Reply", "posttime": "2022-02-21 04:41:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,windows,\u62a5\u9053,reportedly", "title": "\u636e\u62a5\u9053\uff0cWindows 12\u5f00\u53d1\u5c06\u4e8e\u4e0b\u6708\u6b63\u5f0f\u542f\u52a8", "title_en": "Windows 12 Development Reportedly Begins in Earnest Next Month", "transed": 1, "url": "https://www.tomshardware.com/news/windows-12-developement-earnest-next-month", "via": "", "real_tags": ["\u5f00\u53d1", "windows", "\u62a5\u9053"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074365, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1969\u5e745\u6708\u7684\u4e00\u4e2a\u6e29\u6696\u7684\u591c\u665a\uff0c\u4e00\u7fa4\u4ee4\u4eba\u656c\u754f\u7684\u8d4c\u5f92\u56f4\u7740\u610f\u5927\u5229\u91cc\u7ef4\u57c3\u62c9\u4e00\u5f20\u7834\u65e7\u7684\u8f6e\u76d8\u8d4c\u684c\u3002\n\u4e2d\u5fc3\u7ad9\u7740\u4e00\u4f4d38\u5c81\u7684\u7626\u957f\u7684\u533b\u5b66\u6559\u6388\uff0c\u7a7f\u7740\u76b1\u5df4\u5df4\u7684\u897f\u88c5\u3002\u4ed6\u521a\u521a\u4e0b\u4e8610\u4e07\u7f8e\u5143\u7684\u8d4c\u6ce8\uff082019\u5e74\u4e3a71.5\u4e07\u7f8e\u5143\uff09\uff0c\u8d4c\u4e00\u5708\u3002\u5f53\u8e72\u4e0b\u7684\u4eba\u6253\u5f00\u767d\u8272\u5c0f\u7403\u65f6\uff0c\u623f\u95f4\u91cc\u4e00\u7247\u5bc2\u9759\u3002\u4ed6\u4e0d\u53ef\u80fd\u8fd9\u4e48\u5e78\u8fd0\u5427\uff1f\n\u4f46\u662fRichard Jarecki\u535a\u58eb\u5e76\u6ca1\u6709\u628a\u5b83\u7559\u7ed9\u673a\u4f1a\u3002\u4ed6\u82b1\u4e86\u6570\u5343\u4e2a\u5c0f\u65f6\u8bbe\u8ba1\u4e86\u4e00\u79cd\u5de7\u5999\u7684\u5236\u80dc\u65b9\u6cd5\uff0c\u5f88\u5feb\u4ed6\u5c31\u83b7\u5f97\u4e86\u76f8\u5f53\u4e8e80\u591a\u4e07\u7f8e\u5143\u7684\u73b0\u4ee3\u5956\u91d1\u3002\n\u7406\u67e5\u5fb7\u00b7\u8d3e\u96f7\u57fa1931\u5e74\u51fa\u751f\u4e8e\u5fb7\u56fd\u65af\u7279\u5ef7\u7684\u4e00\u4e2a\u72b9\u592a\u5bb6\u5ead\uff0c\u88ab\u63a8\u5165\u4e00\u4e2a\u6df7\u4e71\u7684\u4e16\u754c\u3002\n\u5fb7\u56fd\u6b63\u5904\u4e8e\u7ecf\u6d4e\u56f0\u96be\u7684\u9635\u75db\u4e4b\u4e2d\uff0c\u7eb3\u7cb9\u515a\u6b63\u901a\u8fc7\u4e00\u4e2a\u53cd\u72b9\u592a\u4e3b\u4e49\u7eb2\u9886\u83b7\u5f97\u652f\u6301\uff0c\u8be5\u7eb2\u9886\u5c06\u8be5\u56fd\u7684\u5f0a\u75c5\u5f52\u548e\u4e8e\u72b9\u592a\u516c\u6c11\u3002\u8d3e\u96f7\u57fa\u7684\u7236\u6bcd\u662f\u76ae\u80a4\u79d1\u533b\u751f\uff0c\u4e5f\u662f\u822a\u8fd0\u4e1a\u7684\u5973\u7ee7\u627f\u4eba\uff0c\u4ed6\u4eec\u7684\u6240\u6709\u8d22\u4ea7\u90fd\u9010\u6e10\u88ab\u5265\u593a\u3002\u4e8c\u6218\u5f00\u59cb\u65f6\uff0c\u4ed6\u4eec\u9762\u4e34\u62d8\u7559\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u751f\u6d3b\u9003\u5230\u4e86\u7f8e\u56fd\u3002\n\u5728\u65b0\u6cfd\u897f\u5dde\uff0c\u5e74\u8f7b\u7684\u8d3e\u96f7\u57fa\u5728\u62c9\u7c73\u3001\u65af\u5361\u7279\u548c\u6865\u724c\u7b49\u6e38\u620f\u4e2d\u627e\u5230\u4e86\u6170\u85c9\uff0c\u5e76\u4ece\u670b\u53cb\u90a3\u91cc\u201c\u4e60\u60ef\u6027\u5730\u8d62\u94b1\u201d\u4e2d\u83b7\u5f97\u4e86\u6781\u5927\u7684\u4e50\u8da3\u3002\u4ed6\u6709\u4e00\u4e2a\u806a\u660e\u7684\u5934\u8111\uff0c\u80fd\u591f\u8bb0\u4f4f\u6570\u5b57\u548c\u7edf\u8ba1\u6570\u636e\uff0c\u56e0\u6b64\u4ed6\u53bb\u5b66\u4e60\u533b\u5b66\u2014\u2014\u8fd9\u662f\u4e00\u9879\u4ee4\u4ed6\u7236\u4eb2\u9ad8\u5174\u7684\u5d07\u9ad8\u8ffd\u6c42\u3002\n\u4f5c\u4e3a50\u5e74\u4ee3\u7684\u4e00\u540d\u5e74\u8f7b\u4eba\uff0c\u8d3e\u96f7\u57fa\u83b7\u5f97\u4e86\u4e16\u754c\u9876\u5c16\u533b\u5b66\u7814\u7a76\u4eba\u5458\u7684\u58f0\u8a89\u3002\n\u4f46\u4ed6\u9690\u85cf\u7740\u4e00\u4e2a\u79d8\u5bc6\uff1a\u4ed6\u771f\u6b63\u7684\u6fc0\u60c5\u5728\u4e8e\u9ed1\u6697\u3001\u53d1\u9709\u7684\u8d4c\u573a\u5927\u5385\u3002\n\u5927\u7ea6\u57281960\u5e74\u7684\u67d0\u4e2a\u65f6\u5019\uff0c\u8d3e\u96f7\u57fa\u5bf9\u8f6e\u76d8\u8d4c\u4ea7\u751f\u4e86\u75f4\u8ff7\u3002\u8f6e\u76d8\u8d4c\u662f\u4e00\u79cd\u6e38\u620f\uff0c\u4e00\u4e2a\u5c0f\u7403\u7ed5\u7740\u4e00\u4e2a\u968f\u673a\u7f16\u53f7\u7684\u591a\u8272\u8f6e\u5b50\u65cb\u8f6c\uff0c\u73a9\u5bb6\u4e0b\u6ce8\u4e8e\u5b83\u5c06\u843d\u5728\u54ea\u91cc\u3002\n\u867d\u7136\u8f6e\u76d8\u8d4c\u88ab\u8bb8\u591a\u4eba\u8ba4\u4e3a\u7eaf\u7cb9\u662f\u4e00\u79cd\u673a\u4f1a\u6e38\u620f\uff0c\u4f46\u8d3e\u96f7\u57fa\u786e\u4fe1\u5b83\u53ef\u4ee5\u88ab\u201c\u51fb\u8d25\u201d\n\u4ed6\u6ce8\u610f\u5230\uff0c\u6bcf\u5929\u665a\u4e0a\u7ed3\u675f\u65f6\uff0c\u8d4c\u573a\u90fd\u4f1a\u7528\u65b0\u7684\u8f6e\u76d8\u6765\u66ff\u6362\u7eb8\u724c\u548c\u9ab0\u5b50\u2014\u2014\u4f46\u6602\u8d35\u7684\u8f6e\u76d8\u8d4c\u8f6e\u76d8\u6ca1\u6709\u88ab\u78b0\u8fc7\uff0c\u800c\u4e14\u5728\u88ab\u66ff\u6362\u4e4b\u524d\u901a\u5e38\u4f1a\u4f7f\u7528\u51e0\u5341\u5e74\u3002\n\u548c\u5176\u4ed6\u673a\u5668\u4e00\u6837\uff0c\u8fd9\u4e9b\u8f6e\u5b50\u4e5f\u4f1a\u78e8\u635f\u3002Jarecki\u5f00\u59cb\u6000\u7591\u5fae\u5c0f\u7684\u7f3a\u9677\u2014\u2014\u788e\u5c51\u3001\u51f9\u75d5\u3001\u5212\u75d5\u3001\u4e0d\u5e73\u6574\u7684\u8868\u9762\u2014\u2014\u53ef\u80fd\u4f1a\u5bfc\u81f4\u67d0\u4e9b\u8f66\u8f6e\u6bd4\u968f\u673a\u6027\u89c4\u5b9a\u7684\u66f4\u9891\u7e41\u5730\u843d\u5728\u7279\u5b9a\u7684\u6570\u5b57\u4e0a\u3002\n\u533b\u751f\u5468\u672b\u5728\u624b\u672f\u53f0\u548c\u8f6e\u76d8\u8d4c\u53f0\u4e4b\u95f4\u6765\u56de\u5954\u6ce2\uff0c\u624b\u52a8\u8bb0\u5f55\u6210\u5343\u4e0a\u4e07\u6b21\u65cb\u8f6c\uff0c\u5e76\u5206\u6790\u6570\u636e\u4e2d\u7684\u7edf\u8ba1\u5f02\u5e38\u3002\n1969\u5e74\uff0c\u4ed6\u544a\u8bc9\u300a\u6089\u5c3c\u5148\u9a71\u6668\u62a5\u300b\uff1a\u201c\u6211\uff08\u4e00\u76f4\u5728\u8bd5\u9a8c\uff09\uff0c\u76f4\u5230\u6211\u6839\u636e\u4e4b\u524d\u7684\u83b7\u5956\u6570\u5b57\u5927\u81f4\u52fe\u52d2\u51fa\u4e00\u4e2a\u7cfb\u7edf\u7684\u8f6e\u5ed3\u3002\u201d\u3002\u201c\u5982\u679c1\u53f7\u30012\u53f7\u548c3\u53f7\u5728\u6700\u540e3\u8f6e\u4e2d\u83b7\u80dc\uff0c\u6211\u53ef\u4ee5\u786e\u5b9a\u4e0b\u4e00\u8f6e\u6700\u6709\u53ef\u80fd\u83b7\u80dc\u7684\u662f\u4ec0\u4e48\u3002\u201d\n\u8d3e\u96f7\u57fa\u7684\u65b9\u6cd5\u5e76\u4e0d\u65b0\u9c9c\uff1a\u7ea6\u745f\u592b\u00b7\u8d3e\u683c\u5c14\u88ab\u8ba4\u4e3a\u662f\u6240\u8c13\u201c\u504f\u5411\u8f66\u8f6e\u201d\u6218\u7565\u7684\u201c\u5148\u9a71\u201d\uff0c\u572819\u4e16\u7eaa80\u5e74\u4ee3\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8d62\u5f97\u4e86\u5de8\u989d\u8d44\u91d1\u30021947\u5e74\uff0c\u7814\u7a76\u4eba\u5458\u963f\u5c14\u4f2f\u7279\u00b7\u5e0c\u5e03\u65af\uff08Albert Hibbs\uff09\u548c\u7f57\u4f0a\u00b7\u6c83\u5c14\u798f\u5fb7\uff08Roy Walford\uff09\u535a\u58eb\uff08Dr.Roy Walford\uff09\u5229\u7528\u8fd9\u4e00\u6280\u672f\u8d2d\u4e70\u4e86\u4e00\u8258\u6e38\u8247\uff0c\u9a76\u5411\u52a0\u52d2\u6bd4\u6d77\u7684\u65e5\u843d\u3002\u8fd8\u6709\u8d6b\u5c14\u7a46\u7279\u00b7\u4f2f\u6797\uff08Helmut Berlin\uff09\uff0c\u4e00\u4f4d\u524d\u8f66\u5e8a\u64cd\u4f5c\u5458\uff0c\u4ed6\u57281950\u5e74\u96c7\u4f63\u4e86\u4e00\u961f\u5bc6\u53cb\u6765\u8ddf\u8e2a\u8f66\u8f6e\uff0c\u5e76\u4ee542\u4e07\u7f8e\u5143\u9003\u8d70\u3002\n\u4f46\u5bf9\u8d3e\u96f7\u57fa\u6765\u8bf4\uff0c\u8fd9\u4e0e\u94b1\u65e0\u5173\uff1a\u4ed6\u60f3\u5b8c\u5584\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u91cd\u590d\u4e00\u904d\uff0c\u7136\u540e\u201c\u6572\u6253\u201d\u65b9\u5411\u76d8\u3002\u8fd9\u662f\u4e00\u4e2a\u4eba\u6218\u80dc\u673a\u5668\u7684\u95ee\u9898\u3002\n\u5728\u6536\u96c6\u4e86\u6570\u6708\u7684\u6570\u636e\u540e\uff0c\u4ed6\u51d1\u8db3\u4e86100\u7f8e\u5143\uff08\u4ed6\u5728\u96e8\u5929\u7684\u79ef\u84c4\uff09\uff0c\u53bb\u4e86\u8d4c\u573a\u3002\u4ed6\u4ece\u672a\u8d4c\u535a\u8fc7\u2014\u2014\u5c3d\u7ba1\u4ed6\u76f8\u4fe1\u81ea\u5df1\u7684\u7814\u7a76\uff0c\u4f46\u4ed6\u77e5\u9053\u81ea\u5df1\u4ecd\u7136\u9762\u4e34\u7740\u201c\u673a\u4f1a\u7684\u56e0\u7d20\u201d\n\u5728\u51e0\u4e2a\u5c0f\u65f6\u5185\uff0c\u4ed6\u628a100\u7f8e\u5143\u53d8\u6210\u4e865000\u7f8e\u5143\uff08\u4eca\u5929\u5927\u7ea641000\u7f8e\u5143\uff09\u3002\u901a\u8fc7\u8fd9\u79cd\u9a8c\u8bc1\uff0c\u4ed6\u8f6c\u5411\u4e86\u66f4\u9ad8\u7684\u8d4c\u6ce8\u3002\n\u572860\u5e74\u4ee3\u4e2d\u671f\uff0cJaRiki\u79fb\u5c45\u5fb7\u56fd\uff0c\u5728\u6d77\u5fb7\u5821\u5927\u5b66\u653b\u8bfb\u7535\u6cf3\u548c\u6cd5\u533b\u5b66\u3002\n\u4ed6\u6700\u8fd1\u56e0\u5728\u56fd\u9645\u533b\u5b66\u5408\u4f5c\u65b9\u9762\u7684\u5de5\u4f5c\u800c\u83b7\u5f97\u4e86\u4e00\u9879\u4eab\u6709\u76db\u8a89\u7684\u548c\u5e73\u5956\uff08\u5168\u4e16\u754c\u4ec5\u6709\u768412\u9879\u548c\u5e73\u5956\u4e4b\u4e00\uff09\uff0c\u5e76\u56e0\u6b64\u8fdb\u5165\u4e86\u4e00\u4e2a\u7531\u533b\u751f\u548c\u79d1\u5b66\u5bb6\u7ec4\u6210\u7684\u7cbe\u82f1\u7fa4\u4f53\u3002\n\u6b27\u6d32\u8f6e\u76d8\u8d4c\u8f6e\u76d8\u8d4c\u7684\u8d54\u7387\u6bd4\u7f8e\u56fd\u8f6e\u76d8\u8d4c\u8f6e\u76d8\u8d4c\u7684\u8d54\u7387\u9ad8\uff1a\u4ed6\u4eec\u670937\u4e2a\u8f6e\u76d8\u8d4c\u69fd\uff0c\u800c\u4e0d\u662f38\u4e2a\u8f6e\u76d8\u8d4c\u69fd\uff0c\u8fd9\u4f7f\u8d4c\u573a\u5bf9\u73a9\u5bb6\u7684\u4f18\u52bf\u4ece5.26%\u964d\u81f32.7%\u3002\u800c\u4e14\uff0c\u6b63\u5982\u8d3e\u96f7\u57fa\u4f1a\u53d1\u73b0\u7684\u90a3\u6837\uff0c\u5b83\u4eec\u53ea\u662f\u4ed6\u90a3\u79cd\u7c7b\u578b\u7684\u673a\u5668\u2014\u2014\u9648\u65e7\u3001\u7b80\u964b\uff0c\u800c\u4e14\u5145\u6ee1\u4e86\u7269\u7406\u7f3a\u9677\u3002\n\u4ed6\u548c\u59bb\u5b50\u5361\u7f57\u5c14\u5728\u6b27\u6d32\u5404\u5730\u7684\u8d4c\u573a\u91cc\u641c\u5bfb\u4e86\u51e0\u5341\u4e2a\u8f6e\u5b50\uff0c\u4ece\u8499\u7279\u5361\u6d1b\uff08\u6469\u7eb3\u54e5\uff09\u3001\u8fea\u51af\u00b7\u83b1\u73ed\u65af\uff08\u6cd5\u56fd\uff09\u5230\u5df4\u767b\u00b7\u5df4\u767b\uff08\u5fb7\u56fd\uff09\u3002\u4e24\u4eba\u62db\u52df\u4e86\u4e00\u4e2a\u75318\u540d\u201c\u8ba1\u65f6\u5458\u201d\u7ec4\u6210\u7684\u56e2\u961f\uff0c\u4ed6\u4eec\u5728\u8fd9\u4e9b\u573a\u9986\u5f20\u8d34\u5e16\u5b50\uff0c\u6709\u65f6\u5728\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u8bb0\u5f55\u591a\u8fbe20000\u6b21\u65cb\u8f6c\u3002\n\u5728\u786e\u5b9a\u54ea\u4e9b\u8f66\u8f6e\u5b58\u5728\u504f\u5dee\u540e\uff0c\u4ed6\u4ece\u4e00\u4f4d\u745e\u58eb\u91d1\u878d\u5bb6\u90a3\u91cc\u83b7\u5f97\u4e862.5\u4e07\u82f1\u9551\u7684\u8d37\u6b3e\uff0c\u5e76\u82b1\u4e866\u4e2a\u6708\u65f6\u95f4\u5766\u7387\u5730\u4e25\u683c\u6267\u884c\u4ed6\u7684\u7b56\u7565\u3002\u5230\u6bd4\u8d5b\u7ed3\u675f\u65f6\uff0c\u4ed6\u51c0\u8d5a\u4e8662.5\u4e07\u82f1\u9551\uff08\u4eca\u5929\u5927\u7ea6670\u4e07\u7f8e\u5143\uff09\u3002\n\u4ece\u582a\u8428\u65af\u5230\u6fb3\u5927\u5229\u4e9a\uff0c\u8d3e\u96f7\u57fa\u7684\u80dc\u5229\u6210\u4e3a\u4e16\u754c\u5404\u5730\u62a5\u7eb8\u7684\u5934\u6761\u65b0\u95fb\u3002\u6bcf\u4e2a\u4eba\u90fd\u60f3\u77e5\u9053\u4ed6\u7684\u201c\u79d8\u5bc6\u201d\u2014\u2014\u4f46\u4ed6\u77e5\u9053\uff0c\u5982\u679c\u4ed6\u60f3\u590d\u5236\u8fd9\u4e00\u58ee\u4e3e\uff0c\u5c31\u5fc5\u987b\u9690\u85cf\u81ea\u5df1\u771f\u6b63\u7684\u65b9\u6cd5\u8bba\u3002\n\u56e0\u6b64\uff0c\u4ed6\u4e3a\u5a92\u4f53\u7f16\u9020\u4e86\u4e00\u4e2a\u201c\u5947\u5e7b\u6545\u4e8b\u201d\uff1a\u4ed6\u6bcf\u5929\u7edf\u8ba1\u8f6e\u76d8\u8d4c\u7684\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u4fe1\u606f\u8f93\u5165Atlas\u8d85\u7ea7\u8ba1\u7b97\u673a\uff0c\u8be5\u8ba1\u7b97\u673a\u544a\u8bc9\u4ed6\u9009\u62e9\u54ea\u4e2a\u6570\u5b57\u3002\n\u5f53\u65f6\uff0c\u8d4c\u535a\u5386\u53f2\u5b66\u5bb6\u62c9\u585e\u5c14\u00b7\u5df4\u6069\u54c8\u7279\uff08Russell Barnhart\uff09\u5728\u300a\u6253\u65b9\u5411\u76d8\u300b\u4e00\u4e66\u4e2d\u5199\u9053\uff0c\u201c\u8ba1\u7b97\u673a\u88ab\u89c6\u4e3a\u6765\u81ea\u5916\u592a\u7a7a\u7684\u751f\u7269\u2026\u2026\u51e0\u4e4e\u6ca1\u6709\u4eba\uff0c\u5305\u62ec\u8d4c\u573a\u7ecf\u7406\uff0c\u5177\u5907\u804c\u4e1a\u8d44\u683c\u6765\u533a\u5206\u795e\u8bdd\u548c\u73b0\u5b9e\u3002\u201d\n\u5728\u8fd9\u4e00\u6280\u672f\u8be1\u8ba1\u7684\u80cc\u540e\uff0c\u8d3e\u96f7\u57fa\u7ee7\u7eed\u5173\u6ce8\u6709\u504f\u89c1\u7684\u8868\u683c\u2014\u2014\u5e76\u4e3a\u4ed6\u7684\u4e0b\u4e00\u4e2a\u91cd\u5927\u4e3e\u63aa\u505a\u597d\u51c6\u5907\u3002\n\u8d3e\u96f7\u57fa\u73b0\u91d1\u5145\u88d5\uff0c\u5728\u5730\u4e2d\u6d77\u6cbf\u5cb8\u5bcc\u4e3d\u5802\u7687\u7684\u610f\u5927\u5229\u8d4c\u573a\u5723\u96f7\u83ab\u9644\u8fd1\u8d2d\u4e70\u4e86\u4e00\u5957\u8c6a\u534e\u516c\u5bd3\u3002\n\u901a\u8fc7\u4ed4\u7ec6\u89c2\u5bdf\uff0c\u4ed6\u53d1\u73b0\u4e00\u5f20\u684c\u5b50\u7684\u843d\u5730\u4e60\u60ef\u6bd4\u5e73\u5e38\u591a\u5f97\u591a\u2014\u2014\u8fd9\u662f\u201c\u7403\u4e0e\u8f6e\u5b50\u4e0d\u65ad\u6469\u64e6\u201d\u7684\u7ed3\u679c\n1968\u5e74\u7684\u4e00\u4e2a\u6625\u591c\uff0c\u4ed6\u5f00\u7740\u4ed6\u7684\u767d\u8272\u52b3\u65af\u83b1\u65af\uff08Rolls-Royce\uff09\u6765\u5230\u8d4c\u573a\uff0c\u5728\u4e09\u5929\u591a\u7684\u65f6\u95f4\u91cc\uff0c\u4ed6\u8d62\u5f97\u4e864.8\u4e07\u7f8e\u5143\uff08\u4eca\u5929\u662f36\u4e07\u7f8e\u5143\uff09\u3002\n\u516b\u4e2a\u6708\u540e\uff0c\u4ed6\u56de\u6765\u4e86\uff0c\u5728\u4e00\u4e2a\u5468\u672b\u8d62\u5f97\u4e8619.2\u4e07\u7f8e\u5143\uff0814\u4e07\u7f8e\u5143\uff09\uff0c\u5e76\u5728\u4e00\u4e2a\u665a\u4e0a\u4e24\u6b21\u7528\u4e24\u4e2a\u4e0d\u540c\u7684\u8f6e\u5b50\u6253\u7834\u4e86\u94f6\u884c\uff08\u8017\u5c3d\u4e86\u8d4c\u573a\u7684\u624b\u5934\u73b0\u91d1\uff09\u3002\u7531\u4e8e\u6fd2\u4e34\u7834\u4ea7\uff0c\u8d4c\u573a\u8001\u677f\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u4ee5\u201c\u592a\u597d\u201d\u4e3a\u7531\uff0c\u5411\u8d3e\u96f7\u57fa\u53d1\u51fa15\u5929\u7684\u7981\u4ee4\n\u7981\u4ee4\u89e3\u9664\u7684\u90a3\u5929\u665a\u4e0a\uff0c\u8d3e\u96f7\u57fa\u56de\u6765\u4e86\uff0c\u53c8\u8d62\u4e8610\u4e07\u7f8e\u5143\uff08\u540871.7\u4e07\u7f8e\u5143\uff09\u2014\u2014\u8fd9\u4e48\u591a\u94b1\uff0c\u8d4c\u573a\u4e0d\u5f97\u4e0d\u7ed9\u4ed6\u4e00\u5f20\u671f\u7968\u3002\n\u5f53\u8d3e\u96f7\u57fa\u51fa\u73b0\u5728\u4e00\u5bb6\u8d4c\u573a\u65f6\uff0c\u5927\u6279\u4eba\u7fa4\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u89c1\u8bc1\u8fd9\u4f4d\u5927\u5e08\u7684\u5de5\u4f5c\u3002\u8bb8\u591a\u4eba\u4f1a\u6a21\u4eff\u4ed6\u7684\u4e00\u4e3e\u4e00\u52a8\uff0c\u5728\u76f8\u540c\u7684\u6570\u5b57\u4e0a\u4e0b\u5c0f\u8d4c\u6ce8\u3002\n\u4e3a\u4e86\u6253\u8d25\u8d3e\u96f7\u57fa\uff0c\u8d4c\u573a\u8001\u677f\u6bcf\u5929\u665a\u4e0a\u90fd\u5728\u4e0d\u540c\u7684\u5730\u65b9\u91cd\u65b0\u5b89\u6392\u4ed6\u6700\u559c\u6b22\u7684\u8f6e\u76d8\u8d4c\u3002\u4f46\u662f\u8fd9\u4f4d\u6559\u6388\u77e5\u9053\u6728\u5934\u4e0a\u7684\u6bcf\u4e00\u6761\u7eb9\u7406\u2014\u2014\u6bcf\u4e00\u4e2a\u88c2\u7eb9\u3001\u5212\u75d5\u548c\u53d8\u8272\u2014\u2014\u4ed6\u603b\u662f\u628a\u5b83\u4eec\u6316\u51fa\u6765\u3002\n\u201c\u4ed6\u5bf9\u6b27\u6d32\u7684\u6bcf\u5bb6\u8d4c\u573a\u90fd\u662f\u4e00\u4e2a\u5a01\u80c1\uff0c\u201d\u8d4c\u573a\u8001\u677f\u62c9\u5fb7\u62c9\u5148\u751f\u544a\u8bc9\u300a\u6089\u5c3c\u5148\u9a71\u6668\u62a5\u300b\u3002\u201c\u6211\u4e0d\u77e5\u9053\u4ed6\u5230\u5e95\u662f\u600e\u4e48\u505a\u5230\u7684\uff0c\u4f46\u5982\u679c\u4ed6\u518d\u4e5f\u4e0d\u56de\u5230\u6211\u7684\u8d4c\u573a\uff0c\u6211\u5c06\u662f\u4e00\u4e2a\u975e\u5e38\u5feb\u4e50\u7684\u4eba\u3002\u201d\n\u201c\u5982\u679c\u8d4c\u573a\u7ecf\u7406\u4e0d\u60f3\u8f93\uff0c\u201d\u8d3e\u96f7\u57fa\u53cd\u9a73\u9053\uff0c\u201c\u4ed6\u4eec\u5e94\u8be5\u5356\u852c\u83dc\u3002\u201d\n\u6700\u540e\uff0c\u96f7\u83ab\u4ee524\u7f8e\u5143\u7684\u4ef7\u683c\u628a\u623f\u5b50\u6362\u6210\u4e86\u8f6e\u76d8\u8d4c\u3002\u4ed6\u4eec\u653e\u5f03\u4e86\uff0c\u8fd9\u662f\u963b\u6b62\u4ed6\u4eec\u89c1\u8fc7\u7684\u6700\u597d\u7403\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u5728\u8d3e\u96f7\u57fa\u7edf\u6cbb\u540e\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u8d4c\u573a\u6295\u5165\u5de8\u8d44\u76d1\u63a7\u5176\u8f6e\u76d8\u8d4c\u684c\u7684\u7f3a\u9677\uff0c\u5e76\u5efa\u9020\u4e0d\u592a\u5bb9\u6613\u4ea7\u751f\u504f\u5dee\u7684\u8f6e\u5b50\u3002\u5982\u4eca\uff0c\u5927\u591a\u6570\u8f66\u8f6e\u90fd\u5df2\u7ecf\u6570\u5b57\u5316\uff0c\u7531\u6709\u5229\u4e8e\u623f\u5b50\u7684\u7f16\u7a0b\u7b97\u6cd5\u8fd0\u884c\u3002\n\u636e\u62a5\u9053\uff0c\u8d3e\u96f7\u8328\u57fa\u57281964\u5e74\u81f31969\u5e74\u95f4\u5728\u6709\u504f\u8f6e\u76d8\u8d4c\u684c\u4e0a\u4e0b\u4e8612.5\u4e07\u7f8e\u5143\uff08\u4eca\u5929\u4e3a80\u4e07\u7f8e\u5143\uff09\u7684\u5de8\u989d\u8d4c\u6ce8\u3002\n\u610f\u5927\u5229\u62a5\u7eb8\u300a\u610f\u5927\u5229\u65e5\u62a5\u300b\u79f0\u4ed6\u4e3a\u201c\u4e16\u754c\u4e0a\u6700\u6210\u529f\u7684\u8f6e\u76d8\u8d4c\u9009\u624b\u201d\u2014\u2014\u4e00\u4f4d\u201c\u770b\u8d77\u6765\u4e0d\u50cf\u8d4c\u5f92\u201d\u7684\u82a6\u82c7\u5b66\u8005\u4ed6\u66fe\u88ab\u8ba4\u4e3a\u662f\u6821\u56ed\u91cc\u7684\u201c\u4e66\u5446\u5b50\u201d\uff0c\u540e\u6765\u6210\u4e86\u201c\u5927\u5b66\u91cc\u6bcf\u4e2a\u5b66\u751f\u7684\u82f1\u96c4\u201d\n1973\u5e74\uff0c\u8d3e\u96f7\u57fa\u5c06\u5bb6\u4eba\u642c\u56de\u65b0\u6cfd\u897f\u5dde\uff0c\u5728\u90a3\u91cc\u4ed6\u5f00\u59cb\u4e86\u5546\u54c1\u7ecf\u7eaa\u4eba\u7684\u65b0\u804c\u4e1a\u3002\u5728\u4ebf\u4e07\u5bcc\u7fc1\u54e5\u54e5\u7684\u5e2e\u52a9\u4e0b\uff0c\u4ed6\u7684\u8d22\u5bcc\u7ffb\u4e8610\u500d\u3002\u4ed6\u8fd8\u628a\u81ea\u5df1\u5bf9\u6e38\u620f\u7684\u7231\u597d\u4f20\u7ed9\u4e86\u513f\u5b50\uff0c\u513f\u5b509\u5c81\u65f6\u6210\u4e3a\u5386\u53f2\u4e0a\u6700\u5e74\u8f7b\u7684\u56fd\u9645\u8c61\u68cb\u5927\u5e08\u3002\n\u6709\u65f6\uff0c\u8d4c\u573a\u8001\u677f\u4f1a\u6253\u7535\u8bdd\u5411\u4ed6\u63d0\u51fa\u5408\u4f5c\u610f\u5411\uff0c\u4f46\u4ed6\u4ece\u672a\u4e0a\u94a9\uff1a\u201c\u4ed6\uff08\u559c\u6b22\uff09\u4ece\u8d4c\u573a\u62ff\u94b1\uff0c\u201d\u4ed6\u7684\u59bb\u5b50\u5361\u7f57\u5c14\u544a\u8bc9\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\uff0c\u201c\u800c\u4e0d\u662f\u7ed9\u4ed6\u4eec\u3002\u201d\n90\u5e74\u4ee3\u521d\uff0c\u8d3e\u96f7\u57fa\u538c\u5026\u4e86\u5927\u897f\u6d0b\u57ce\uff0c\u642c\u5230\u4e86\u9a6c\u5c3c\u62c9\uff0c\u90a3\u91cc\u6709\u7740\u7e41\u8363\uff08\u76d1\u7ba1\u677e\u6563\uff09\u7684\u8d4c\u535a\u573a\u6240\u3002\u4ed6\u4e00\u76f4\u7559\u5728\u90a3\u91cc\uff0c\u76f4\u52302018\u5e74\u53bb\u4e16\uff0c\u4eab\u5e7487\u5c81\u3002\n\u4ed6\u8eb2\u5728\u4e00\u4e2a\u7199\u7199\u6518\u6518\u7684\u8d4c\u573a\u89d2\u843d\u91cc\uff0c\u5468\u56f4\u662f\u9713\u8679\u706f\u548c\u8001\u864e\u673a\uff0c\u4ed6\u4e0b\u4e86\u6700\u540e\u4e00\u6b21\u8d4c\u6ce8\u3002\u8f6e\u5b50\u8f6c\u4e86\u53c8\u8f6c\u3002\u5c31\u50cf\u4ee5\u524d\u5f88\u591a\u6b21\u4e00\u6837\uff0c\u8fd9\u4e2a\u767d\u8272\u7684\u5c0f\u7403\u843d\u5728\u4e86\u4ed6\u7684\u53f7\u7801\u4e0a\u3002", "note_en": "On a warm night in May of 1969, a throng of awestruck gamblers crowded around a well-worn roulette table in the Italian Riviera.\n At the center stood a gangly 38-year-old medical professor in a rumpled suit. He\u2019d just placed a $100,000 bet ($715,000 in 2019 dollars) on a single spin of the wheel. As the croupier unleashed the little white ball, the room went silent.  He couldn\u2019t possibly be this lucky\u2026 could he?\n But Dr. Richard Jarecki wasn\u2019t leaving it up to chance. He\u2019d spent thousands of hours devising an ingenious method of winning \u2014 and it would soon net him the modern equivalent of more than $8,000,000.\n   Born in 1931 to a Jewish family in Stettin, Germany, Richard Jarecki was thrust into a world in chaos.\n Germany was in the throes of economic hardship, and the Nazi Party was gaining support with an anti-Semitic platform that blamed the country\u2019s ills on Jewish citizens. Jarecki\u2019s parents, a dermatologist and a shipping industry heiress, were gradually stripped of everything they had. Facing internment at the onset of WWII, they fled to America for a better life.\n  In New Jersey, the young Jarecki found solace in games like rummy, skat, and bridge, and took great pleasure in \u201chabitually winning money\u201d from friends. Gifted with a brilliant mind that could retain numbers and statistics, he went to study medicine \u2014 a noble pursuit that pleased his father.\n As a young man in the \u201850s, Jarecki gained a reputation as one of the world\u2019s  foremost medical researchers.\n But he harbored a secret: His true passion lay in the dark, musty halls of casinos.\n   Sometime around 1960, Jarecki developed an obsession with roulette, a game where a little ball is  spun around a randomly numbered, multi-colored wheel and the player places bets on where it will land.\n Though roulette was considered by many to be purely a game of chance, Jarecki was convinced that it could be \u201cbeat.\u201d\n He noticed that at the end of each night, casinos would replace cards and dice with fresh sets \u2014 but the expensive roulette wheels went untouched and often stayed in service for decades before being replaced.\n Like any other machine, these wheels acquired wear and tear. Jarecki began to suspect that tiny defects \u2014 chips, dents, scratches, unlevel surfaces \u2014 might cause certain wheels to land on certain numbers more frequently than randomocity prescribed.\n  The doctor spent weekends commuting between the operating table and the roulette table, manually recording thousands upon thousands of spins, and analyzing the data for statistical abnormalities.\n \u201cI [experimented] until I had a rough outline of a system based on the previous winning numbers,\u201d he told the   Sydney Morning Herald in 1969. \u201cIf numbers 1, 2, and 3 won the last 3 rounds, [I could determine] what was most likely to win the next 3.\u201d\n Jarecki\u2019s approach wasn\u2019t new:  Joseph Jagger, thought to be the \u201cpioneer\u201d of the so-called \u201cbiased wheel\u201d strategy, had won hefty sums this way in the 1880s. In 1947, researchers  Albert Hibbs and Dr. Roy Walford used the technique to buy a yacht and sail off into the Caribbean sunset. Then, there was  Helmut Berlin, an ex-lathe operator who, in 1950, hired a team of cronies to track wheels and made off with $420,000.\n But for Jarecki, it wasn\u2019t about the money: He wanted to  perfect the system, repeat it, and \u201cbeat\u201d the wheel. It was a matter of man triumphing over machine.\n After months of collecting data, he scraped together $100 (his rainy day savings) and hit the casino. He\u2019d never gambled \u2014 and though he trusted his research, he knew he was still up against \u201cthe element of chance.\u201d\n In a matter of hours, he flipped his $100 into $5,000 (~$41,000 today). And with this validation, he turned to much higher stakes.\n   In the mid-60s, Jarecki moved to Germany and took up a post at the University of Heidelberg to study  electrophoresis and forensic medicine.\n He\u2019d recently won a highly prestigious peace prize (one of only 12 awarded worldwide) for his work on international cooperation in medicine, and, as a result, had gained entry into an elite group of doctors and scientists.\n   European roulette wheels offered better odds than American wheels: They had 37 slots instead of 38, reducing the casino\u2019s edge over the player from 5.26% to  2.7%. And, as Jarecki would discover, they were just his type of machine \u2014 old, janky, and full of physical defects.\n With his wife, Carol, he scouted dozens of wheels at casinos around Europe, from Monte Carlo (Monaco), to Divonne-les-Bains (France), to Baden-Baden (Germany). The pair recruited a team of 8 \u201cclockers\u201d who posted up at these venues, sometimes recording as many as 20,000 spins over a month-long period.\n  After establishing which wheels were biased, he secured a \u00a325,000 loan from a Swiss financier and spent 6 months candidly exacting his strategy. By the end of the run, he\u2019d netted  \u00a3625,000 (roughly $6,700,000 today).\n Jarecki\u2019s victories made headlines in newspapers all over the world, from Kansas to Australia. Everyone wanted his \u201csecret\u201d \u2014 but he knew that if he wanted to replicate the feat, he\u2019d have to conceal his true methodology.\n  So, he concocted a \u201cfanciful tale\u201d for the press: He tallied roulette outcomes daily, then fed the information into an Atlas supercomputer, which told him which numbers to pick.\n At the time, wrote gambling historian, Russell Barnhart, in   Beating the Wheel, \u201cComputers were looked upon as creatures from outer space\u2026 Few persons, including casino managers, were vocationally qualified to distinguish myth from reality.\u201d\n Hiding behind this technological ruse, Jarecki continued to keep tabs on biased tables \u2014 and prepare for his next big move.\n   Flush with cash, Jarecki purchased a luxury apartment near San Remo, a palatial Italian casino on the shores of the Mediterranean.\n Through studious observation, he identified a table that had a habit of landing on #33 far more than usual \u2014 a  result of the \u201cconstant friction of the ball against the wheel.\u201d\n On a spring night in 1968, he drove his white Rolls Royce to the gambling den and, over  3 days, proceeded to win $48,000 ($360,000 today).\n Eight months later he returned, winning $192,000 ($1,400,000) in a single weekend, and breaking the bank (depleting the casino\u2019s on-hand cash) at two different wheels  twice in one night. Teetering on bankruptcy, the casino owner had no option but to issue Jarecki a  15-day ban\u2026 for \u201cbeing too good.\u201d\n  The night the ban was lifted, Jarecki returned and  won another $100,000 ($717,000) \u2014 so much money that the casino had to give him a promissory note.\n When Jarecki showed up to a casino, large crowds would gather to witness the master at work. Many would mirror his every move, placing small bets on the same numbers.\n In a bid to outfox Jarecki, casino owners rearranged his favorite roulette wheels in different spots every night. But the professor knew every vein in the wood \u2014 \u00a0every nic, crack, scratch, and discoloration \u2014 and he always ferreted them out.\n \u201cHe is a menace to every casino in Europe,\u201d casino owner, Signor Lardera,  told the  Sydney Morning Herald. \u201cI don\u2019t know how he does it exactly, but if he never returned to my casino I would be a very happy man.\u201d\n \u201cIf the casino directors don\u2019t like to lose,\u201d  retorted Jarecki, \u201cthey should sell vegetables.\u201d\n Eventually, San Remo gave up and replaced all 24 of its roulette wheels at a steep cost to the house. It was, they ceded, the only way to stop the best player they\u2019d ever seen.   In the decades following Jarecki\u2019s dominance, casinos invested heavily in monitoring their roulette tables for defects and building wheels  less prone to bias. Today, most wheels have gone digital, run by algorithms programmed to favor the house.\n   All told, Jarecki made a reported $1,250,000 ($8,000,000 today) placing hefty bets on biased roulette tables between 1964 and 1969.\n The Italian newspaper  Il Giorno called him \u201cThe world\u2019s most successful roulette player\u201d \u2014 a reedy academic who \u201c[didn\u2019t] look like a gambler.\u201d Once deemed to be an \u201cegghead\u201d on campus, he  became \u201cthe hero of every student at his university.\u201d\n  In 1973, Jarecki moved his family back to New Jersey, where he started a new career as a commodities broker. With the help of his  billionaire brother, he multiplied his fortune 10 times over. He also passed down his penchant for games to his son, who, at the  age of 9, became the youngest chess master in history.\n On occasion, casino owners would call him with partnership offers, but he never took the bait: \u201cHe [liked] to take money from the casinos,\u201d his wife, Carol,  told  TheNew York Times, \u201cnot give it to them.\u201d\n In the early \u201890s, Jarecki grew tired of Atlantic City and relocated to Manila, home to a flourishing (and loosely regulated) gambling scene. He remained there until his death in 2018, at the age of 87.\n Tucked in the corner of a bustling gambling hall, surrounded by neon lights and slot machines, he wagered his final bet. The wheel spun round and round. Like so many times before, the little white ball landed on his  number.", "posttime": "2022-02-21 04:33:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8f6e\u76d8,beat,\u8d3e\u96f7\u57fa", "title": "\u6253\u8d25\u8f6e\u76d8\u8d4c\u7684\u6559\u6388", "title_en": "The professor who beat roulette", "transed": 1, "url": "https://thehustle.co/professor-who-beat-roulette/", "via": "", "real_tags": ["\u8f6e\u76d8", "beat", "\u8d3e\u96f7\u57fa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074364, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f2f\u514b\u5e0c\u5c14\u54c8\u6492\u97e6\u516c\u53f8\uff08Berkshire Hathaway Inc.\uff09\u7684\u4ebf\u4e07\u5bcc\u7fc1\u526f\u8463\u4e8b\u957f\u3001\u6c83\u4f26\u00b7\u5df4\u83f2\u7279\uff08Warren Buffett\uff09\u7684\u5546\u4e1a\u4f19\u4f34\u8292\u683c\u8bf4\uff0c\u82ac\u514b\u65d7\u4e0b\u8d1d\u83b1\u5fb7\u516c\u53f8\uff08BlackRock Inc.\uff09\u8fd0\u8425\u7684\u6307\u6570\u57fa\u91d1\u7684\u5174\u8d77\uff0c\u5bfc\u81f4\u4e86\u5f71\u54cd\u4f01\u4e1a\u51b3\u7b56\u7684\u6743\u529b\u7684\u201c\u5de8\u5927\u8f6c\u79fb\u201d\u3002\u4ed6\u8bf4\uff0c\u8fd9\u79cd\u8f6c\u53d8\u5c06\u201c\u6539\u53d8\u4e16\u754c\u201d\uff0c\u800c\u4e0d\u662f\u53d8\u5f97\u66f4\u597d\u3002\n\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u5c06\u5411\u60a8\u6536\u53d6$+\u7a0e\uff08\u5982\u679c\u9002\u7528\uff09\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u5728\u5ba2\u6237\u4e2d\u5fc3\u6216\u81f4\u7535\u5ba2\u6237\u670d\u52a1\u90e8\u66f4\u6539\u8d26\u5355\u504f\u597d\u3002\u5982\u679c\u8d39\u7387\u6216\u6761\u6b3e\u53d1\u751f\u4efb\u4f55\u53d8\u5316\uff0c\u60a8\u5c06\u63d0\u524d\u6536\u5230\u901a\u77e5\u3002\u60a8\u53ef\u4ee5\u968f\u65f6\u81f4\u7535\u5ba2\u670d\u53d6\u6d88\u8ba2\u9605\u3002", "note_en": "Mr. Munger, the billionaire vice chairman of Berkshire Hathaway Inc. and Warren Buffett\u2019s  business partner, said the rise of index funds like those run by Mr. Fink\u2019s BlackRock Inc. has resulted in an \u201cenormous transfer\u201d of the power to sway corporate decision making. That shift will \u201cchange the world,\u201d he said, and not for the better.\n  You will be charged $  + tax (if applicable) for The Wall Street Journal. You may change your billing preferences at any time in the Customer Center or call  Customer Service. You will be notified in advance of any changes in rate or terms. You may cancel your subscription at anytime by calling  Customer Service.", "posttime": "2022-02-21 04:32:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8292\u683c,munger", "title": "\u67e5\u7406\u00b7\u8292\u683c\uff08Charlie Munger\uff09\u9884\u8ba1\u6307\u6570\u57fa\u91d1\u4f1a\u6539\u53d8\u4e16\u754c\u2014\u2014\u4f46\u4e0d\u662f\u4ee5\u4e00\u79cd\u597d\u7684\u65b9\u5f0f", "title_en": "Charlie Munger expects index funds to change the world \u2013 and not in a good way", "transed": 1, "url": "https://www.wsj.com/articles/charlie-munger-expects-index-funds-to-change-the-worldand-not-in-a-good-way-11645055334", "via": "", "real_tags": ["\u8292\u683c", "munger"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074363, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6bcf\u5468\u90fd\u4f1a\u91cd\u8bfb\u4e00\u7bc7\u6211\u6700\u559c\u6b22\u7684\u5173\u4e8e\u751f\u6d3b\u5efa\u8bae\u7684\u6587\u7ae0\u2014\u2014\u6bcf\u5468\u4e00\u7bc7\u3002\u5b83\u4e4b\u6240\u4ee5\u6709\u7528\uff0c\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u539f\u56e0\uff1a\n\u6700\u597d\u7684\u6587\u7ae0\u6709\u8db3\u591f\u591a\u7684\u6709\u7528\u7684\u5efa\u8bae\uff0c\u6211\u6bcf\u6b21\u8bfb\u5b83\u4eec\u90fd\u4f1a\u53d1\u73b0\u65b0\u7684\u6709\u8da3\u7684\u5730\u65b9\u3002\n\u8bb8\u591a\u597d\u7684\u5efa\u8bae\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u4f46\u5f88\u96be\u5b9e\u65bd\u3002\u56e0\u6b64\uff0c\u4e3a\u4e86\u4ece\u4e2d\u83b7\u5f97\u6700\u5927\u7684\u597d\u5904\uff0c\u4f60\u5e94\u8be5\u627e\u5230\u6700\u80fd\u5f15\u8d77\u4f60\u5171\u9e23\u7684\u7248\u672c\uff0c\u7136\u540e\u7ecf\u5e38\u91cd\u8bfb\uff0c\u8ba9\u81ea\u5df1\u4fdd\u6301\u6b63\u8f68\u3002\n\u6211\u6536\u96c6\u4e86\u6211\u6700\u559c\u6b22\u7684\u6587\u7ae0\uff0c\u5728\u4e0b\u9762\u91cd\u8bfb\u3002\u6211\u4f1a\u4e0d\u65ad\u66f4\u65b0\u8fd9\u7bc7\u6587\u7ae0\uff0c\u56e0\u4e3a\u6211\u53d1\u73b0\u4e86\u66f4\u591a\u4f18\u79c0\u7684\u6587\u7ae0\uff0c\u6211\u6b22\u8fce\u5176\u4ed6\u7684\u8d21\u732e\uff0c\u8bf7\u5728\u8bc4\u8bba\u4e2d\u63d0\u51fa\u4f60\u81ea\u5df1\u7684\u6700\u7231\uff01\n\u6709\u4e86\u5b69\u5b50\uff0c\u6211\u5b66\u4f1a\u4e86\u5982\u4f55\u5c06\u8fde\u7eed\u7684\u65f6\u95f4\u8f6c\u5316\u4e3a\u79bb\u6563\u7684\u65f6\u95f4\u3002\u4f60\u53ea\u670952\u4e2a\u5468\u672b\u548c\u4f602\u5c81\u7684\u5b69\u5b50\u5728\u4e00\u8d77\u3002\u5982\u679c\u5723\u8bde\u9b54\u6cd5\u6301\u7eed\u65f6\u95f4\u4ece3\u5c81\u523010\u5c81\uff0c\u4f60\u53ea\u80fd\u770b\u4f60\u7684\u5b69\u5b50\u7ecf\u53868\u6b21\u3002\u867d\u7136\u4e0d\u53ef\u80fd\u8bf4\u4ec0\u4e48\u662f\u5927\u91cf\u6216\u5c11\u91cf\u7684\u8fde\u7eed\u91cf\uff0c\u6bd4\u5982\u65f6\u95f4\uff0c\u4f468\u5e76\u4e0d\u662f\u5f88\u591a\u3002\u5982\u679c\u4f60\u6709\u4e00\u628a8\u4e2a\u82b1\u751f\uff0c\u6216\u8005\u4e00\u4e2a\u4e66\u67b6\u4e0a\u67098\u672c\u4e66\u53ef\u4f9b\u9009\u62e9\uff0c\u90a3\u4e48\u65e0\u8bba\u4f60\u7684\u5bff\u547d\u5982\u4f55\uff0c\u6570\u91cf\u80af\u5b9a\u662f\u6709\u9650\u7684\u3002\n\u8fd9\u5bf9\u6211\u6765\u8bf4\u5f88\u91cd\u8981\u3002\u8fd9\u610f\u5473\u7740\u201c\u751f\u547d\u5bf9\u4e8ex\u6765\u8bf4\u592a\u77ed\u201d\u8fd9\u79cd\u5f62\u5f0f\u7684\u8bba\u70b9\u6709\u5f88\u5927\u7684\u5f71\u54cd\u529b\u3002\u8bf4\u751f\u547d\u592a\u77ed\u6682\uff0c\u4e0d\u9002\u5408\u505a\u67d0\u4e8b\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u4fee\u8f9e\u3002\u5b83\u4e0d\u4ec5\u4ec5\u662f\u70e6\u4eba\u7684\u540c\u4e49\u8bcd\u3002\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u8ba4\u4e3a\u751f\u547d\u5bf9\u4e8e\u67d0\u4ef6\u4e8b\u6765\u8bf4\u592a\u77ed\uff0c\u4f60\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u6d88\u9664\u5b83\u3002\n\u5f53\u6211\u95ee\u81ea\u5df1\uff0c\u6211\u53d1\u73b0\u751f\u547d\u5bf9\u4e8e\u4ec0\u4e48\u6765\u8bf4\u592a\u77ed\u4e86\uff0c\u8111\u6d77\u4e2d\u95ea\u73b0\u7684\u8bcd\u662f\u201c\u80e1\u8bf4\u201d\u6211\u610f\u8bc6\u5230\u8fd9\u4e2a\u7b54\u6848\u6709\u4e9b\u91cd\u590d\u3002\u8fd9\u51e0\u4e4e\u662f\u80e1\u8bf4\u516b\u9053\u7684\u5b9a\u4e49\uff0c\u5b83\u662f\u751f\u547d\u77ed\u6682\u7684\u4e1c\u897f\u3002\u7136\u800c\uff0c\u5e9f\u8bdd\u786e\u5b9e\u6709\u4e00\u4e2a\u72ec\u7279\u7684\u7279\u5f81\u3002\u8fd9\u6709\u70b9\u5047\u3002\u8fd9\u662f\u7ecf\u9a8c\u7684\u5783\u573e\u98df\u54c1\u3002[1]\n\u5982\u679c\u4f60\u95ee\u81ea\u5df1\u4f60\u82b1\u4e86\u591a\u5c11\u65f6\u95f4\u5728\u8fd9\u4e0a\u9762\uff0c\u90a3\u662f\u80e1\u8bf4\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053\u7b54\u6848\u4e86\u3002\u4e0d\u5fc5\u8981\u7684\u4f1a\u8bae\u3001\u6beb\u65e0\u610f\u4e49\u7684\u4e89\u7aef\u3001\u5b98\u50da\u4e3b\u4e49\u3001\u88c5\u8154\u4f5c\u52bf\u3001\u5904\u7406\u4ed6\u4eba\u7684\u9519\u8bef\u3001\u4ea4\u901a\u5835\u585e\u3001\u4ee4\u4eba\u4e0a\u763e\u4f46\u6beb\u65e0\u56de\u62a5\u7684\u6d88\u9063\u3002\n\u6211\u53d1\u73b0\uff0c\u9664\u975e\u6211\u4fdd\u6301\u8b66\u60d5\uff0c\u5426\u5219\u6211\u751f\u6d3b\u4e2d\u7684\u80e1\u8bf4\u516b\u9053\u53ea\u4f1a\u8d8a\u6765\u8d8a\u591a\u3002\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u91cd\u8bfb\u300a\u751f\u547d\u77ed\u6682\u300b\u4f1a\u8ba9\u6211\u5927\u5403\u4e00\u60ca\uff0c\u5f04\u6e05\u695a\u4ec0\u4e48\u624d\u662f\u771f\u6b63\u91cd\u8981\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u8ba9\u80e1\u8bf4\u516b\u9053\u7684\u6c34\u5e73\u4e0b\u964d\u3002\n\u5fb7\u91cc\u514b\u00b7\u897f\u5f17\u65af\uff0c\u6ca1\u6709\u901f\u5ea6\u9650\u5236\uff0c\u4ed6\u5728\u4e00\u4e2a\u4e0b\u5348\u5b66\u4e60\u4e86\u4e00\u5b66\u671f\u7684\u97f3\u4e50\u7406\u8bba\uff1a\n\u4e0d\u5230\u4e00\u5206\u949f\uff0c\u4ed6\u5c31\u5f00\u59cb\u76d8\u95ee\u6211\u3002\u201c\u5982\u679c\u4e94\u548c\u5f26\u548c\u4e03\u53f7\u8c03\u6709\u4e09\u4e2a\u97f3\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u4e03\u53f7\u8c03\u4e5f\u6709\u4e09\u4e2a\u97f3\u3002\u54ea\u4e00\u4e2a\uff1f\u201d\n\u201c\u5bf9\uff01\u8fd9\u662f\u4e00\u4e2a\u66ff\u4ee3\u548c\u5f26\u3002\u4efb\u4f55\u4e00\u4e2a7\u53f7\u5e73\u548c\u5f26\u90fd\u53ef\u4ee5\u7528\u53e6\u4e00\u4e2a7\u53f7\u5e73\u548c\u5f26\u6765\u66ff\u4ee3\uff0c\u8fd9\u4e2a7\u53f7\u5e73\u548c\u5f26\u5171\u4eab\u540c\u4e00\u4e2a\u4e09\u97f3\u3002\u6240\u4ee5\uff0c\u5728\u8fd9\u4e2a\u56fe\u8868\u4e2d\uff0c\u4f60\u53ef\u4ee5\u91cd\u65b0\u534f\u8c03\u6240\u6709\u548c\u5f26\u3002\u5f00\u59cb\u3002\u201d\n\u8282\u594f\u5f88\u5feb\uff0c\u6211\u5f88\u559c\u6b22\u3002\u6700\u540e\uff0c\u6709\u4eba\u5728\u6311\u6218\u6211\u2014\u2014\u628a\u6211\u538b\u5728\u5934\u4e0a\u2014\u2014\u9f13\u52b1\u5e76\u671f\u5f85\u6211\u5c3d\u5feb\u632f\u4f5c\u8d77\u6765\u3002\u6211\u5b66\u5f97\u592a\u5feb\u4e86\uff0c\u611f\u89c9\u5c31\u50cf\u73a9\u7535\u5b50\u6e38\u620f\u65f6\u7684\u80be\u4e0a\u817a\u7d20\u6fc0\u589e\u3002\u4ed6\u628a\u6240\u6709\u4e8b\u5b9e\u90fd\u629b\u7ed9\u6211\uff0c\u8ba9\u6211\u8bc1\u660e\u6211\u660e\u767d\u4e86\u3002\n\u90a3\u5929\u65e9\u4e0a\u6211\u4eec\u4e0a\u4e86\u4e09\u4e2a\u5c0f\u65f6\u7684\u8bfe\uff0c\u4ed6\u6559\u4e86\u6211\u6574\u6574\u4e00\u5b66\u671f\u4f2f\u514b\u5229\u7684\u548c\u58f0\u8bfe\u7a0b\u3002\n\u8fd9\u662f\u8ba9\u4f60\u53d8\u5f97\u4e0d\u8010\u70e6\u7684\u4e3b\u8981\u542f\u793a\u4e4b\u4e00\u3002\u6bcf\u6b21\u6211\u91cd\u8bfb\u5b83\uff0c\u6211\u90fd\u4f1a\u60f3\u5230\u81f3\u5c11\u4e00\u4ef6\u4e8b\uff0c\u6211\u4f1a\u65e0\u7f18\u65e0\u6545\u5730\u7ed9\u81ea\u5df1\u8bbe\u7f6e\u9650\u901f\uff01\n\u5c71\u59c6\u00b7\u5965\u7279\u66fc\uff0c\u600e\u6837\u624d\u80fd\u6210\u529f\u3002\u5c71\u59c6\u53ef\u80fd\u6bd4\u8fd9\u4e2a\u661f\u7403\u4e0a\u7684\u4efb\u4f55\u4eba\u90fd\u66f4\u4ed4\u7ec6\u5730\u89c2\u5bdf\u5230\u4e86\u66f4\u591a\u6210\u529f\u4eba\u58eb\uff0c\u800c\u8fd9\u4e2a\u5efa\u8bae\u6b63\u5982\u4f60\u6240\u671f\u5f85\u7684\u90a3\u6837\u597d\u3002\n\u82b1\u66f4\u591a\u65f6\u95f4\u601d\u8003\u5e94\u8be5\u5173\u6ce8\u4ec0\u4e48\uff0c\u51e0\u4e4e\u6211\u89c1\u8fc7\u7684\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u53d7\u76ca\u532a\u6d45\u3002\u505a\u6b63\u786e\u7684\u4e8b\u60c5\u6bd4\u957f\u65f6\u95f4\u5de5\u4f5c\u8981\u91cd\u8981\u5f97\u591a\u3002\u5927\u591a\u6570\u4eba\u628a\u5927\u90e8\u5206\u65f6\u95f4\u6d6a\u8d39\u5728\u65e0\u5173\u7d27\u8981\u7684\u4e8b\u60c5\u4e0a\u3002\n\u4e00\u65e6\u4f60\u60f3\u597d\u4e86\u8be5\u505a\u4ec0\u4e48\uff0c\u5c31\u8981\u6beb\u4e0d\u72b9\u8c6b\u5730\u8fc5\u901f\u5b8c\u6210\u4f60\u7684\u4e00\u5c0f\u90e8\u5206\u4f18\u5148\u4e8b\u9879\u3002\u6211\u8fd8\u6ca1\u6709\u9047\u5230\u8fc7\u4e00\u4e2a\u884c\u52a8\u8fdf\u7f13\u3001\u975e\u5e38\u6210\u529f\u7684\u4eba\u3002\n\u51e0\u4e4e\u603b\u662f\uff0c\u90a3\u4e9b\u8bf4\u201c\u6211\u4f1a\u4e00\u76f4\u575a\u6301\u4e0b\u53bb\uff0c\u76f4\u5230\u6210\u529f\uff0c\u4e0d\u7ba1\u6709\u4ec0\u4e48\u6311\u6218\uff0c\u6211\u90fd\u4f1a\u627e\u5230\u7b54\u6848\u201d\u7684\u4eba\uff0c\u4ed6\u4eec\u662f\u8ba4\u771f\u7684\uff0c\u4f1a\u7ee7\u7eed\u53d6\u5f97\u6210\u529f\u3002\u4ed6\u4eec\u6709\u8db3\u591f\u957f\u7684\u6bc5\u529b\uff0c\u7ed9\u81ea\u5df1\u4e00\u4e2a\u597d\u8fd0\u7684\u673a\u4f1a\u3002\n&amp\uff1bmldr\u8981\u60f3\u4efb\u6027\uff0c\u4f60\u5fc5\u987b\u4e50\u89c2\uff0c\u5e0c\u671b\u8fd9\u662f\u4e00\u79cd\u53ef\u4ee5\u901a\u8fc7\u5b9e\u8df5\u6539\u5584\u7684\u6027\u683c\u7279\u5f81\u3002\u6211\u4ece\u672a\u89c1\u8fc7\u4e00\u4e2a\u975e\u5e38\u6210\u529f\u7684\u60b2\u89c2\u4e3b\u4e49\u8005\u3002\nR\u00b7W\u00b7\u54c8\u660e\uff0c\u4f60\u548c\u4f60\u7684\u7814\u7a76\u3002\u54c8\u660e\u89c2\u5bdf\u5230\u7684\u4f1f\u5927\u79d1\u5b66\u5bb6\u51e0\u4e4e\u548c\u5c71\u59c6\u00b7\u5965\u7279\u66fc\u89c2\u5bdf\u5230\u7684\u4e00\u6837\u591a\u3002\u4ed6\u5f97\u51fa\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u7ed3\u8bba\uff1a\n\u8d77\u521d\uff0c\u6211\u95ee\u5316\u5b66\u4e2d\u7684\u91cd\u8981\u95ee\u9898\u662f\u4ec0\u4e48\uff0c\u7136\u540e\u95ee\u4ed6\u4eec\u6b63\u5728\u7814\u7a76\u54ea\u4e9b\u91cd\u8981\u95ee\u9898\uff0c\u6216\u8005\u53ef\u80fd\u5bfc\u81f4\u91cd\u8981\u7ed3\u679c\u7684\u95ee\u9898\u3002\u4e00\u5929\uff0c\u6211\u95ee\uff1a\u201c\u5982\u679c\u4ed6\u4eec\u6b63\u5728\u505a\u7684\u4e8b\u60c5\u4e0d\u91cd\u8981\uff0c\u4e5f\u4e0d\u592a\u53ef\u80fd\u5bfc\u81f4\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u8981\u505a\u8fd9\u4e9b\u4e8b\u60c5\uff1f\u201d\u4e4b\u540e\u6211\u4e0d\u5f97\u4e0d\u548c\u5de5\u7a0b\u5e08\u4eec\u4e00\u8d77\u5403\u996d\uff01\n\u5927\u7ea6\u56db\u4e2a\u6708\u540e\uff0c\u6211\u7684\u670b\u53cb\u5728\u5927\u5385\u91cc\u62e6\u4f4f\u6211\uff0c\u8bf4\u6211\u7684\u95ee\u9898\u56f0\u6270\u4e86\u4ed6\u3002\u4ed6\u6574\u4e2a\u590f\u5929\u90fd\u5728\u601d\u8003\u4ed6\u6240\u5728\u9886\u57df\u7684\u91cd\u8981\u95ee\u9898\uff0c\u867d\u7136\u6ca1\u6709\u6539\u53d8\u4ed6\u7684\u7814\u7a76\uff0c\u4f46\u4ed6\u8ba4\u4e3a\u8fd9\u662f\u975e\u5e38\u503c\u5f97\u7684\u3002\u6211\u8c22\u4e86\u4ed6\uff0c\u7ee7\u7eed\u8d70\u3002\u51e0\u5468\u540e\uff0c\u6211\u6ce8\u610f\u5230\u4ed6\u88ab\u4efb\u547d\u4e3a\u90e8\u95e8\u8d1f\u8d23\u4eba\u3002\u8bb8\u591a\u5e74\u540e\uff0c\u4ed6\u6210\u4e3a\u7f8e\u56fd\u56fd\u5bb6\u5de5\u7a0b\u9662\u9662\u58eb\u3002\u4e00\u4e2a\u80fd\u542c\u5230\u8fd9\u4e2a\u95ee\u9898\u7684\u4eba\u63a5\u7740\u505a\u4e86\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u800c\u636e\u6211\u6240\u77e5\uff0c\u6240\u6709\u5176\u4ed6\u4eba\u90fd\u6ca1\u6709\u505a\u4efb\u4f55\u503c\u5f97\u516c\u4f17\u5173\u6ce8\u7684\u4e8b\u60c5\u3002\n&amp\uff1bmldr\u4e00\u4e9b\u4eba\u5728\u5de5\u4f5c\u65f6\u5f00\u95e8\uff0c\u6e05\u695a\u5730\u770b\u5230\u8def\u8fc7\u7684\u4eba\uff0c\u800c\u53e6\u4e00\u4e9b\u4eba\u5219\u5c0f\u5fc3\u5730\u4fdd\u62a4\u81ea\u5df1\u4e0d\u53d7\u6253\u6270\u3002\u90a3\u4e9b\u5f00\u95e8\u7684\u4eba\u6bcf\u5929\u5b8c\u6210\u7684\u5de5\u4f5c\u66f4\u5c11\uff0c\u4f46\u90a3\u4e9b\u5173\u95e8\u7684\u4eba\u5f80\u5f80\u4e0d\u77e5\u9053\u8be5\u505a\u4ec0\u4e48\uff0c\u4e5f\u4e0d\u5bb9\u6613\u542c\u5230\u4ed6\u4eec\u201c\u6e05\u5355\u201d\u95ee\u9898\u4e2d\u7f3a\u5931\u90e8\u5206\u7684\u7ebf\u7d22\u3002\u6211\u65e0\u6cd5\u8bc1\u660e\u655e\u5f00\u7684\u5927\u95e8\u4f1a\u4ea7\u751f\u5f00\u653e\u7684\u601d\u60f3\uff0c\u6216\u8005\u53cd\u8fc7\u6765\u3002\u6211\u53ea\u80fd\u89c2\u5bdf\u5230\u8fd9\u79cd\u76f8\u5173\u6027\u3002\u6211\u6000\u7591\u8fd9\u4e24\u8005\u90fd\u4f1a\u52a0\u5f3a\u5f7c\u6b64\uff0c\u4e00\u6247\u6253\u5f00\u7684\u95e8\u6bd4\u4e00\u6247\u5173\u95ed\u7684\u95e8\u66f4\u6709\u53ef\u80fd\u5bfc\u81f4\u4f60\u548c\u91cd\u8981\u7684\u95ee\u9898\u3002\n\u6211\u82b1\u4e86\u5f88\u591a\u5e74\u624d\u6ce8\u610f\u5230\u53e6\u4e00\u4e2a\u7279\u70b9\uff0c\u90a3\u5c31\u662f\u5bb9\u5fcd\u6b67\u4e49\u7684\u80fd\u529b\u3002\u5927\u591a\u6570\u4eba\u60f3\u76f8\u4fe1\u4ed6\u4eec\u6240\u5b66\u5230\u7684\u662f\u4e8b\u5b9e\uff1a\u6709\u5c11\u6570\u4eba\u5bf9\u4e00\u5207\u90fd\u6301\u6000\u7591\u6001\u5ea6\u3002\u5982\u679c\u4f60\u76f8\u4fe1\u7684\u592a\u591a\uff0c\u90a3\u4e48\u4f60\u5c31\u4e0d\u592a\u53ef\u80fd\u627e\u5230\u6539\u53d8\u4e00\u4e2a\u9886\u57df\u7684\u5168\u65b0\u89c6\u89d2\uff0c\u5982\u679c\u4f60\u6000\u7591\u7684\u592a\u591a\uff0c\u4f60\u5c31\u6839\u672c\u505a\u4e0d\u5230\u4ec0\u4e48\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5e73\u8861\uff0c\u5728\u76f8\u4fe1\u4f60\u6240\u5b66\u7684\u540c\u65f6\u53c8\u6000\u7591\u4e8b\u7269\u3002\u4f1f\u5927\u7684\u8fdb\u6b65\u901a\u5e38\u9700\u8981\u6539\u53d8\u89c2\u70b9\uff0c\u4f7f\u4e4b\u8d85\u8d8a\u8be5\u9886\u57df\u7684\u6807\u51c6\u89c2\u70b9\u3002\n\u5f53\u4f60\u5b66\u4e60\u4e1c\u897f\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4ece\u591a\u65b9\u9762\u601d\u8003\u548c\u5ba1\u89c6\u5b83\u4eec\u3002\u901a\u8fc7\u591a\u79cd\u65b9\u5f0f\u5c06\u5b83\u4eec\u4e0e\u4f60\u5df2\u7ecf\u77e5\u9053\u7684\u8054\u7cfb\u8d77\u6765\uff1bmldr\u3002\u60a8\u53ef\u4ee5\u7a0d\u540e\u5728\u5f02\u5e38\u60c5\u51b5\u4e0b\u68c0\u7d22\u5b83\u4eec\u3002\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u624d\u610f\u8bc6\u5230\uff0c\u6bcf\u6b21\u6211\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\uff0c\u6211\u90fd\u5e94\u8be5\u5728\u4e0a\u9762\u6302\u4e0a\u201c\u94a9\u5b50\u201d\u3002\u8fd9\u662f\u989d\u5916\u52aa\u529b\u7684\u53e6\u4e00\u9762\uff0c\u66f4\u6df1\u5165\u7684\u7814\u7a76\uff0c\u66f4\u6df1\u5165\u7684\u63a2\u7d22\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4f1f\u5927\u79d1\u5b66\u5bb6\u7684\u7279\u5f81\u3002\n\u54c8\u660e\u662f\uff08a\uff09\u4e00\u4f4d\u4f1f\u5927\u7684\u79d1\u5b66\u5bb6\u672c\u4eba\uff0c\uff08b\uff09\u5bf9\u4ec0\u4e48\u4f7f\u4ed6\u4eba\u4f1f\u5927\u611f\u5230\u597d\u5947\u548c\u6df1\u601d\u719f\u8651\uff0c\u4ee5\u53ca\uff08c\uff09\u5bf9\u4ed6\u7684\u89c2\u5bdf\uff08\u4f3c\u4e4e\uff09\u8bda\u5b9e\u548c\u5f00\u653e\u7684\u4e0d\u5bfb\u5e38\u7ec4\u5408\u3002\n\u533f\u540d\uff0c\u6210\u4e3a\u4e00\u540d\u9b54\u672f\u5e08\uff0c\u8bb2\u8ff0\u5982\u4f55\u6210\u4e3a\u4e00\u4e2a\u4f60\u73b0\u5728\u7684\u81ea\u5df1\u4f1a\u89c9\u5f97\u4e0d\u53ef\u601d\u8bae\u7684\u4eba\uff1a\n\u8fd9\u4e2a\u63cf\u8ff0\u5927\u7ea6\u6709\u4e94\u516d\u9875\u957f\uff0c\u5f53\u65f6\uff0c\u5b83\u662f\u4e00\u79cd\u7edd\u671b\u7684\u6e34\u671b\u7684\u8868\u73b0\uff0c\u6e34\u671b\u6210\u4e3a\u4e00\u4e2a\u4e0d\u5728\u6211\u8eab\u8fb9\u7684\u4eba\uff0c\u4e00\u4e2a\u611f\u5230\u81ea\u7531\u548c\u88ab\u5173\u5fc3\u7684\u4eba\u3002\u5f53\u65f6\u6211\u8ba4\u4e3a\u8fd9\u79cd\u63cf\u8ff0\u57fa\u672c\u4e0a\u662f\u4e0d\u53ef\u80fd\u7684\uff1b\u6211\u7684\u751f\u6d3b\u5728\u73b0\u5b9e\u4e2d\u4ece\u672a\u5982\u6b64\u7cbe\u5f69\u3002\n\u5feb\u8fdb\u5927\u7ea6\u4e03\u5341\u5e74\uff0c\u5f53\u6211\u628a\u65e7\u7b14\u8bb0\u672c\u548c\u65e5\u8bb0\u4ece\u4e00\u4e2a\u5c18\u571f\u98de\u626c\u7684\u5b58\u50a8\u70b9\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u5b58\u50a8\u70b9\u65f6\uff0c\u6211\u91cd\u65b0\u53d1\u73b0\u4e86\u8fd9\u79cd\u63cf\u8ff0\u3002\u5f53\u6211\u901a\u8bfb\u5b83\u65f6\uff0c\u6211\u53d1\u73b0\u6211\u5728\u63cf\u8ff0\u4e2d\u6240\u505a\u768490%\u7684\u9648\u8ff0\u662f\u771f\u5b9e\u7684\uff08\u6216\u7cbe\u795e\u4e0a\u662f\u771f\u5b9e\u7684\uff09&amp\uff1b\u5c3d\u7ba1\u81ea\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u4ee5\u6765\uff0c\u6211\u7684\u751f\u6d3b\u53d1\u751f\u4e86\u79cd\u79cd\u53d8\u5316\uff0c\u4f46\u5bf9\u6211\u6765\u8bf4\uff0c\u6211\u57fa\u672c\u4e0a\u5df2\u7ecf\u6210\u4e3a\u4e86\u4e00\u4e2a\u6211\u5341\u51e0\u5c81\u65f6\u68a6\u60f3\u8fc7\u7684\u4eba\uff0c\u8fd9\u8ba9\u6211\u96be\u4ee5\u7f6e\u4fe1\u3002\n\u7136\u540e\u662f\u8428\u7eb3\u5766\u00b7\u4e01\u8fbe\u3002\u4f5c\u4e3a\u4e00\u540d\u6765\u81ea\u52a0\u5c14\u5404\u7b54\u7684\u5370\u5ea6\u89c6\u89c9\u827a\u672f\u5bb6\uff0c\u4ed6\u53c2\u52a0\u6bd4\u8d5b\u7684\u7b2c\u4e00\u5e74\u751a\u81f3\u6ca1\u6709\u8fdb\u5165\u51b3\u8d5b\uff0c\u7b2c\u4e8c\u5e74\u4ed6\u4ee5\u4e00\u79cd\u6253\u7834\u4e86\u6bd4\u8d5b\u4e2d\u201c\u597d\u4f5c\u54c1\u201d\u7684\u516d\u6761\u9690\u542b\u89c4\u5219\u7684\u98ce\u683c\u6392\u540d\u7b2c\u4e8c&amp\uff1bmldr\u4ed6\u6765\u7684\u7b2c\u4e09\u5e74\uff0c\u4ed6\u8d62\u5f97\u4e86\u6574\u4e2a\u6bd4\u8d5b\uff0c\u6bd4\u7b2c\u4e8c\u540d\u7684\u4e0b\u4e00\u4f4d\u827a\u672f\u5bb6\u8d62\u5f97\u4e86\u5927\u7ea610%\u7684\u603b\u79ef\u5206\u3002\n&amp\uff1bmldr\u8ba9\u6211\u56f0\u60d1\u7684\u662f\uff0c\u6211\u4e0d\u77e5\u9053\u4ed6\u662f\u600e\u4e48\u505a\u5230\u7684\u3002\u6bd4\u5982\uff0c\u6211\u6ca1\u6709\u4efb\u4f55\u5173\u4e8e\u4ed6\u662f\u5982\u4f55\u5728\u6211\u4eec\u6240\u6709\u4eba\u90fd\u6709\u7684\u65f6\u95f4\u6846\u67b6\u5185\u521b\u4f5c\u8fd9\u9996\u66f2\u5b50\u7684\u5fc3\u667a\u6a21\u578b\uff1b\u4ed6\u662f\u5982\u4f55\u60f3\u51fa\u3001\u8bbe\u8ba1\u3001\u5b9e\u8df5\u7684\u3002\u5c3d\u7ba1\u4ed6\u6392\u5728\u7b2c\u4e00\u4f4d\uff0c\u6211\u6392\u5728\u7b2c\u4e94\u4f4d\uff0c\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c\u6211\u4eec\u90fd\u5b58\u5728\u4e8e\u201c\u4eba\u4f53\u5f69\u7ed8\u80fd\u529b\u201d\u7684\u7b49\u7ea7\u4e0a\uff0c\u4f46\u6240\u9700\u7684\u6280\u80fd\u4f3c\u4e4e\u5b8c\u5168\u4e0d\u540c\u3002\n\u4ed6\u4eec\u5efa\u8bae\u7684\u7ec3\u4e60\u5bf9\u4e8e\u6bcf\u5468\uff08\u6216\u6bcf\u6708\u6216\u6bcf\u5e74\uff09\u7684\u590d\u4e60\u6765\u8bf4\u662f\u975e\u5e38\u6709\u7528\u7684\u6d3b\u52a8\u3002\u5f3a\u70c8\u63a8\u8350\uff01\nDan Luu\uff0c\u7b2c95\u767e\u5206\u4f4d\u4e0d\u662f\u5f88\u597d\u3002\u901a\u8fc7\u63d0\u9192\u4f60\uff08\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff09\u5728\u67d0\u4ef6\u4e8b\u4e0a\u53d6\u5f97\u5de8\u5927\u8fdb\u6b65\u662f\u591a\u4e48\u5bb9\u6613\uff0c\u8fd9\u5bf9\u4e8e\u57f9\u517b\u81ea\u6211\u63d0\u5347\u7684\u5fc3\u6001\u975e\u5e38\u6709\u7528\uff1a\n\u8fbe\u523095%\u5e76\u4e0d\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u56e0\u4e3a\u8fd9\u5e76\u4e0d\u96be\u505a\u5230\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u6211\u6700\u53ef\u7b11\u7684\u60f3\u6cd5\u4e4b\u4e00\u3002\u5982\u679c\u8d64\u88f8\u88f8\u5730\u8bf4\u51fa\u6765\uff0c\u8fd9\u542c\u4e0a\u53bb\u662f\u7cbe\u82f1\u4e3b\u4e49\u7684\uff0c\u90a3\u4e5f\u65e0\u6d4e\u4e8e\u4e8b\u3002\u4f46\u6211\u8ba4\u4e3a\u6070\u6070\u76f8\u53cd\uff1a\u5927\u591a\u6570\u4eba\u53ef\u4ee5\uff08\u76f8\u5bf9\u5730\uff09\u5728\u5927\u591a\u6570\u4e8b\u60c5\u4e0a\u53d8\u5f97\u5f88\u597d\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5f53\u6211\u8bf495%-ile\u65f6\uff0c\u6211\u7684\u610f\u601d\u662f95%-ile\u5728\u53c2\u4e0e\u7684\u4eba\u4e2d\uff0c\u800c\u4e0d\u662f\u6240\u6709\u4eba\u4e2d\uff08\u5bf9\u4e8e\u8bb8\u591a\u6d3b\u52a8\u6765\u8bf4\uff0c\u4ec5\u4ec5\u505a\u5b83\u5c31\u53ef\u4ee5\u4f7f\u4f60\u5728\u6240\u6709\u4eba\u4e2d\u90fd\u8fbe\u523099%-ile\u6216\u66f4\u9ad8\uff09\u3002\u6211\u4e5f\u4e0d\u662f\u6307\u90a3\u4e9b\u7ecf\u5e38\u7ec3\u4e60\u7684\u4eba\u4e2d95%\u7684\u4eba\u3002\u201c\u4e00\u4e2a\u5947\u602a\u7684\u628a\u620f\u201d\u662f\uff0c\u5bf9\u4e8e\u5f88\u591a\u6d3b\u52a8\u6765\u8bf4\uff0c\u5728\u7ec3\u4e60\u7684\u4eba\u4e2d\uff0c\u5927\u7ea610%\u7684\u4eba\u4f1a\u8ba9\u4f60\u5728\u53c2\u4e0e\u7684\u4eba\u4e2d\uff0c\u5927\u7ea690%\u621699%\u7684\u4eba\u3002\n\u8fd9\u4e0d\u662f\u6bcf\u5468\u7684\u8bc4\u8bba\u6750\u6599\uff0c\u4f46\u6211\u4e5f\u5f88\u6b23\u8d4f\u5173\u4e8e\u4e39\u5176\u4ed6\u6700\u53ef\u7b11\u60f3\u6cd5\u7684\u5956\u52b1\u90e8\u5206\u3002", "note_en": "I start each of my  weekly reviews by re-reading one of my favorite essays of life advice\u2014a different one each week. It\u2019s useful for a few different reasons:\n The best essays are dense enough with useful advice that I find new interesting bits every time I read them.\n Much good advice is  easy to understand, but hard to implement. So to get the most benefit from it, you should find whatever version of it most resonates you and then  re-read it frequently to keep yourself on track.\n I\u2019ve collected my favorite essays for re-reading below. I\u2019ll keep this updated as I find more great essays, and I\u2019d welcome other contributions\u2014please suggest your own favorites in the comments!\n    Having kids showed me how to convert a continuous quantity, time, into discrete quantities. You only get 52 weekends with your 2 year old. If Christmas-as-magic lasts from say ages 3 to 10, you only get to watch your child experience it 8 times. And while it\u2019s impossible to say what is a lot or a little of a continuous quantity like time, 8 is not a lot of something. If you had a handful of 8 peanuts, or a shelf of 8 books to choose from, the quantity would definitely seem limited, no matter what your lifespan was.\n  It has for me. It means arguments of the form \u201cLife is too short for x\u201d have great force. It\u2019s not just a figure of speech to say that life is too short for something. It\u2019s not just a synonym for annoying. If you find yourself thinking that life is too short for something, you should try to eliminate it if you can.\n When I ask myself what I\u2019ve found life is too short for, the word that pops into my head is \u201cbullshit.\u201d I realize that answer is somewhat tautological. It\u2019s almost the definition of bullshit that it\u2019s the stuff that life is too short for. And yet bullshit does have a distinctive character. There\u2019s something fake about it. It\u2019s the junk food of experience. [1]\n If you ask yourself what you spend your time on that\u2019s bullshit, you probably already know the answer. Unnecessary meetings, pointless disputes, bureaucracy, posturing, dealing with other people\u2019s mistakes, traffic jams, addictive but unrewarding pastimes.\n I\u2019ve found that unless I\u2019m vigilant, the amount of bullshit in my life only ever increases. Rereading  Life is Short every so often gives me a kick in the pants to figure out what  really matters and how to get the bullshit levels back down.\n  Derek Sivers,  There is no speed limit, in which he learns a semester\u2019s worth of music theory in an afternoon:\n Within a minute, he started quizzing me. \u201cIf the 5-chord with the flat-7 has that tri-tone, then so does another flat-7 chord. Which one?\u201d\n  \u201cRight! So that\u2019s a substitute chord. Any flat-7 chord can be substituted with the other flat-7 that shares the same tri-tone. So reharmonize all the chords you can in this chart. Go.\u201d\n The pace was intense, and I loved it. Finally, someone was challenging me \u2014 keeping me in over my head \u2014 encouraging and expecting me to pull myself up quickly. I was learning so fast, it felt like the adrenaline rush you get while playing a video game. He tossed every fact at me and made me prove that I got it.\n In our three-hour lesson that morning, he taught me a full semester of Berklee\u2019s harmony courses.\n This was one of the major inspirations for  Be impatient. Every time I reread it, I think of at least one thing where I\u2019m setting myself a speed limit for no reason!\n  Sam Altman,  How To Be Successful. Sam might have observed more successful people more closely than anyone else on the planet, and the advice is as good as you\u2019d expect.\n Almost everyone I\u2019ve ever met would be well-served by spending more time thinking about what to focus on. It is much more important to work on the right thing than it is to work many hours. Most people waste most of their time on stuff that doesn\u2019t matter.\n Once you have figured out what to do, be unstoppable about getting your small handful of priorities accomplished quickly. I have yet to meet a slow-moving person who is very successful.\n  Almost always, the people who say \u201cI am going to keep going until this works, and no matter what the challenges are I\u2019m going to figure them out\u201d, and mean it, go on to succeed. They are persistent long enough to give themselves a chance for luck to go their way.\n &amp;mldr To be willful, you have to be optimistic\u2014hopefully this is a personality trait that can be improved with practice. I have never met a very successful pessimistic person.\n   R. W. Hamming,  You and your research. Hamming observed almost as many great scientists as Sam Altman did founders. He had some interesting conclusions:\n At first I asked what were the important problems in chemistry, then what important problems they were working on, or problems that might lead to important results. One day I asked, \u201cif what they were working on was not important, and was not likely to lead to important things, they why were they working on them?\u201d After that I had to eat with the engineers!\n About four months later, my friend stopped me in the hall and remarked that my question had bothered him. He had spent the summer thinking about the important problems in his area, and while had had not changed his research he thought it was well worth the effort. I thanked him and kept walking. A few weeks later I noticed that he was made head of the department. Many years later he became a member of the National Academy of Engineering. The one person who could hear the question went on to do important things and all the others\u2014so far as I know\u2014did not do anything worth public attention.\n &amp;mldr Some people work with their doors open in clear view of those who pass by, while others carefully protect themselves from interruptions. Those with the door open get less work done each day, but those with their door closed tend not know what to work on, nor are they apt to hear the clues to the missing piece to one of their \u201clist\u201d problems. I cannot prove that the open door produces the open mind, or the other way around. I only can observe the correlation. I suspect that each reinforces the other, that an open door will more likely lead you and important problems than will a closed door.\n  There is another trait that took me many years to notice, and that is the ability to tolerate ambiguity. Most people want to believe what they learn is the truth: there are a few people who doubt everything. If you believe too much then you are not likely to find the essentially new view that transforms a field, and if you doubt too much you will not be able to do much at all. It is a fine balance between believing what you learn and at the same time doubting things. Great steps forward usually involve a change of viewpoint to outside the standard ones in the field.\n While you are leaning things you need to think about them and examine them from many sides. By connecting them in many ways with what you already know&amp;mldr. you can later retrieve them in unusual situations. It took me a long time to realize that each time I learned something I should put \u201chooks\u201d on it. This is another face of the extra effort, the studying more deeply, the going the extra mile, that seems to be characteristic of great scientists.\n Hamming is an unusual combination of (a) a great scientist himself, (b) curious and thoughtful about what makes others great, and (c) honest and open about his observations (it seems).\n  Anonymous,  Becoming a Magician\u2014on how to become a person that your current self would perceive as magical:\n The description was about five or six handwritten pages long, and at the time, it was a manifestation of desperate longing to be somewhere other than where I was, someone who felt free and cared for. At the time I saw that description as basically an impossibility; my life could never be so amazing in reality.\n Fast forward about seven or ten years and I rediscovered the description when I was moving old notebooks and journals from one dusty storage spot to another. As I read through it, I discovered that 90% of the statements I had made in that description were true (or true in spirit). &amp;mldr It was incredible to me, despite all the changes that had happened in my life since when I wrote the passage, that I had basically become the person whose life I had dreamed of living as a teenager.\n  And then came Sanatan Dinda. An Indian visual artist from Kolkata, he didn\u2019t even make the finals the first year he competed, and the next year he placed second with a style that broke half a dozen of the implicit rules of \u2018good artwork\u2019 at the competition. &amp;mldr [T]he third year he came he won the entire competition by something like ten percent of the total awarded points over the next artist in second place.\n &amp;mldr The thing that confused me though was this \u2013 I could not work out how he did it. Like, I had zero mental model of how he created that piece in the same timeframe we all had; how he came up with it, designed it, practiced it. Even though he placed first and I placed fifth and logically we both existed on a scale of \u2018competence at bodypainting\u2019 it seemed like the skills required were completely different.\n The exercise they suggest is a really useful activity for weekly (or monthly or yearly) reviews. Highly recommended!\n  Dan Luu,  95th percentile isn\u2019t that good. Great for cultivating self-improvement mindset by reminding you how easy (in some sense) it is to make huge improvements at something:\n Reaching 95%-ile isn\u2019t very impressive because it\u2019s not that hard to do. I think this is one of my most ridiculable ideas. It doesn\u2019t help that, when stated nakedly, that sounds elitist. But I think it\u2019s just the opposite: most people can become (relatively) good at most things.\n Note that when I say 95%-ile, I mean 95%-ile among people who participate, not all people (for many activities, just doing it at all makes you 99%-ile or above across all people). I\u2019m also not referring to 95%-ile among people who practice regularly. The \u201cone weird trick\u201d is that, for a lot of activities, being something like 10%-ile among people who practice can make you something like 90%-ile or 99%-ile among people who participate.\n It\u2019s not weekly review material, but I also appreciate the bonus section on Dan\u2019s other most ridiculable ideas.", "posttime": "2022-02-21 04:25:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u751f\u6d3b,essays,\u65f6\u95f4", "title": "\u6211\u6700\u559c\u6b22\u7684\u751f\u6d3b\u5efa\u8bae\u6563\u6587\uff082020\uff09", "title_en": "My favorite essays of life advice (2020)", "transed": 1, "url": "https://www.benkuhn.net/weeklyessays/", "via": "", "real_tags": ["2020", "\u751f\u6d3b", "essays", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074362, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\uff0c\u81f3\u5c11\u5728\u4e16\u754c\u4e0a\u8f83\u5bcc\u88d5\u7684\u5730\u533a\uff0c\u90fd\u719f\u6089\u8d2d\u4e70\u3001\u62e5\u6709\u548c\u4e22\u5f03\u592a\u591a\u4e1c\u897f\u7684\u611f\u89c9\u3002\u6211\u4eec\u53ef\u80fd\u5bf9\u6b64\u611f\u5230\u6709\u70b9\u5185\u759a\u3002\u6211\u4eec\u751a\u81f3\u53ef\u80fd\u8bd5\u7740\u505a\u70b9\u4ec0\u4e48\uff0c\u629b\u5f03\u5851\u6599\u5438\u7ba1\uff0c\u4fdd\u7559\u4e00\u4e2a\u8d2d\u7269\u7528\u7684\u624b\u63d0\u888b\uff0c\u5e76\u52aa\u529b\u5c06\u56de\u6536\u7269\u5206\u79bb\u51fa\u6765\u3002\n\u6211\u4eec\u4e5f\u53ef\u80fd\u610f\u8bc6\u5230\u8fd9\u8fd8\u4e0d\u591f\u3002\u4e3a\u4e86\u6ee1\u8db3\u6211\u4eec\u7684\u7269\u8d28\u9700\u6c42\uff0c\u4eba\u7c7b\u73b0\u5728\u6bcf\u5e74\u4f7f\u7528\u5927\u7ea61000\u4ebf\u5428\u7684\u7269\u8d28\u3002\u5176\u4e2d90%\u4ee5\u4e0a\u662f\u4ece\u5730\u7403\u8868\u9762\u5f00\u91c7\u3001\u94bb\u63a2\u548c\u5207\u5272\u7684\u539f\u59cb\u6750\u6599\u3002\u5176\u4e2d\u53ea\u6709300\u4ebf\u5428\u662f\u6c38\u4e45\u6027\u7684\u3002\u5176\u4f59\u7684\u5219\u4f5c\u4e3a\u71c3\u6599\u71c3\u70e7\u6216\u5feb\u901f\u4f7f\u7528\u5e76\u4e22\u5f03\u2014\u2014\u6bcf\u4e00\u9636\u6bb5\u90fd\u4f1a\u6c61\u67d3\u571f\u5730\u3001\u6c34\u548c\u7a7a\u6c14\uff0c\u9020\u6210\u6c14\u5019\u53d8\u5316\u7684\u6e29\u5ba4\u6c14\u4f53\u6392\u653e\u3002\n\u6211\u4eec\u80fd\u505a\u5f97\u66f4\u597d\u5417\uff1f\u201c\u5faa\u73af\u201d\u7ecf\u6d4e\u7684\u6982\u5ff5\u5df2\u7ecf\u5b58\u5728\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5728\u8fd9\u79cd\u7ecf\u6d4e\u4e2d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u4e1c\u897f\u90fd\u88ab\u91cd\u65b0\u5229\u7528\uff0c\u5e9f\u7269\u5e76\u4e0d\u771f\u6b63\u5b58\u5728\u3002\u5b83\u4eec\u901a\u5e38\u88ab\u89c6\u4e3a\u6a21\u7cca\u7684\u4e4c\u6258\u90a6\u4e3b\u4e49\uff0c\u4f46\u5c31\u5728\u6700\u8fd1\uff0c\u57fa\u8c03\u53d1\u751f\u4e86\u53d8\u5316\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u56e0\u4e3a\u6211\u4eec\u521a\u521a\u610f\u8bc6\u5230\u6211\u4eec\u5bf9\u5730\u7403\u7684\u5f71\u54cd\u4e4b\u5927\uff0c\u4ee5\u53ca\u5b83\u7ed9\u6211\u4eec\u5e26\u6765\u7684\u9ebb\u70e6\u3002\u8fd9\u4e5f\u662f\u56e0\u4e3a\u6211\u4eec\u8d8a\u6765\u8d8a\u6709\u60f3\u6cd5\u548c\u6280\u672f\uff0c\u4f7f\u6211\u4eec\u81ea\u5df1\u548c\u6211\u4eec\u7684\u6d88\u8d39\u6a21\u5f0f\u4e0d\u4ec5\u5bf9\u5730\u7403\u4e0d\u90a3\u4e48\u574f\uff0c\u751a\u81f3\u53ef\u80fd\u5bf9\u5730\u7403\u6709\u76ca\u3002\u4e00\u79cd\u66f4\u52a0\u5faa\u73af\u3001\u53ef\u6301\u7eed\u7684\u65b9\u5f0f\u6765\u6ee1\u8db3\u6211\u4eec\u7684\u7269\u8d28\u9700\u6c42\u5f53\u7136\u662f\u53ef\u80fd\u7684\u3002\u4f46\u8fd9\u53ea\u9700\u8981\u5f7b\u5e95\u91cd\u65b0\u8bbe\u60f3\u6211\u4eec\u7684\u751f\u6d3b\u65b9\u5f0f\u3002", "note_en": "MANY of us, at least in richer parts of the world, are familiar with the feeling of buying, owning and discarding too much stuff. We probably feel a bit guilty about it. We may even have tried to do something about it, ditching the plastic straws, keeping a tote bag for the shopping and diligently separating out the recycling.\n We might also be aware that this isn\u2019t enough. To fulfil our material wants, humanity now uses some 100 billion tonnes of stuff every year. More than 90 per cent of it is virgin material that is mined, drilled and hacked from the planet\u2019s surface. Only 30 billion tonnes of it makes anything of permanence. The rest is burned as fuel or used fleetingly and discarded \u2013 at each stage polluting land, water and air and creating climate-changing greenhouse gas emissions.\n Can we do better? Ideas of \u201ccircular\u201d economies, in which pretty much everything is reused and waste doesn\u2019t really exist, have been around for a while. They are usually dismissed as woolly utopianism, but just lately the tone has been changing. That isn\u2019t just because of our late-dawning realisation of the scale of our impact on the planet and the trouble it is storing up for us. It is also because we increasingly have the ideas and the technologies to make ourselves and our consumption patterns not just less bad for the planet, but perhaps even beneficial for it. A more circular, sustainable way of satisfying our material wants is certainly possible. But it will require nothing less than a complete reimagining of the way we live our lives.", "posttime": "2022-02-21 04:25:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ec8\u7ed3,grand,\u5730\u7403", "title": "\u5e9f\u7269\u7684\u7ec8\u7ed3\uff1a\u5efa\u8bbe\u771f\u6b63\u5faa\u73af\u7ecf\u6d4e\u7684\u5b8f\u4f1f\u8ba1\u5212", "title_en": "The end of waste: The grand plan to build a truly circular economy", "transed": 1, "url": "https://www.newscientist.com/article/mg25333730-800-the-end-of-waste-the-grand-plan-to-build-a-truly-circular-economy/", "via": "", "real_tags": ["\u7ec8\u7ed3", "grand", "\u5730\u7403"]}]