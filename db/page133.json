[{"category": "", "categoryclass": "", "imagename": "1d15c69b3c21dfaa901abbc0ec57d5d7.jpg", "infoid": 1072067, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Retain.ai \u662f\u4e00\u4e2a\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u8de8\u56e2\u961f\u3001\u6d41\u7a0b\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba2\u6237\u53c2\u4e0e\u89c6\u56fe\u7684\u5e73\u53f0\uff0c\u5728\u7531 Emergence Capital \u7275\u5934\u7684\u4e00\u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2300 \u4e07\u7f8e\u5143\uff0cBaseline Ventures\u3001Upside Partnership \u548c Afore Capital \u53c2\u4e0e\u5176\u4e2d\u3002\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98\u57c3\u91cc\u514b\u00b7\u5207\u5c14\u8bfa\u592b (Eric Chernoff) \u8868\u793a\uff0c\u65b0\u8d44\u91d1\u5c06\u7528\u4e8e\u652f\u6301\u589e\u957f\uff0c\u5230 2021 \u5e74\u5e95\uff0cRetain.ai \u7684\u5458\u5de5\u4eba\u6570\u5c06\u589e\u52a0\u4e00\u500d\u4ee5\u4e0a\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u8be5\u8f6e\u878d\u8d44\u4f7f\u8be5\u516c\u53f8\u7684\u603b\u878d\u8d44\u989d\u8d85\u8fc7 2700 \u4e07\u7f8e\u5143\u3002\u968f\u7740\u516c\u53f8\u7684\u53d1\u5c55\uff0c\u4ed6\u4eec\u53ef\u80fd\u5f88\u96be\u4e86\u89e3\u5176\u6240\u6709\u90e8\u95e8\u5982\u4f55\u4e3a\u5ba2\u6237\u63d0\u4f9b\u670d\u52a1\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u9519\u8bef\u7684\u5ba2\u6237\u8eab\u4e0a\u6295\u5165\u8fc7\u591a\u7684\u7cbe\u529b\uff0c\u800c\u5bf9\u6b63\u786e\u7684\u5ba2\u6237\u6295\u5165\u7684\u8d44\u91d1\u4e0d\u8db3\u3002\u4f8b\u5982\uff0c\u4e0d\u4ed8\u6b3e\u7684\u5ba2\u6237\u53ef\u80fd\u4f1a\u5360\u7528\u4ea7\u54c1\u3001\u5de5\u7a0b\u3001\u8425\u9500\u548c\u5176\u4ed6\u56e2\u961f\u7684\u5927\u90e8\u5206\u65f6\u95f4\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6536\u96c6\u5ba2\u6237\u53c2\u4e0e\u5206\u6790\u6240\u9700\u7684\u6570\u636e\u901a\u5e38\u9700\u8981\u8017\u65f6\u7684\u3001\u7279\u5b9a\u4e8e\u5e10\u6237\u7684\u65f6\u95f4\u8868\u3001\u6d41\u7a0b\u548c\u65f6\u95f4\u7814\u7a76\uff0c\u6216\u8005\u4f7f\u7528\u6765\u81ea\u4e0d\u540c\u8bb0\u5f55\u6765\u6e90\u7684\u6570\u636e\u8fdb\u884c\u5206\u6790\u3002 Retain.ai \u65e8\u5728\u901a\u8fc7\u63d0\u4f9b\u5ba2\u6237\u6570\u636e\u7684\u7ec6\u5206\u6765\u81ea\u52a8\u5316\u6d41\u7a0b\u3002\u8be5\u5e73\u53f0\u4e0e\u57fa\u4e8e\u6d4f\u89c8\u5668\u7684\u5e94\u7528\u7a0b\u5e8f\u4e00\u8d77\u521b\u5efa\u5ba2\u6237\u53c2\u4e0e\u7684\u56fe\u7247\uff0c\u4e3a\u9762\u5411\u5ba2\u6237\u7684\u56e2\u961f\u548c\u7ecf\u7406\u63d0\u4f9b\u5185\u90e8\u6d41\u7a0b\u6548\u7387\u7684\u8861\u91cf\u6807\u51c6\u3002 \u201cRetain \u7684 [\u5f15\u64ce] \u63d0\u4f9b\u4e86\u4e00\u4e2a\u53ef\u9760\u3001\u7075\u6d3b\u7684\u7cfb\u7edf\uff0c\u7528\u4e8e\u8bc6\u522b\u548c\u5206\u4eab\u63a8\u52a8\u5ba2\u6237\u4fdd\u7559\u548c\u6536\u5165\u7684\u4e60\u60ef\uff0c\u201d\u524d LiveRamp \u5458\u5de5 Chernoff \u4e8e 2020 \u5e74\u4e0e Vlad Shulman \u5171\u540c\u521b\u7acb\u4e86 Retain.ai\uff0c\u4ed6\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u544a\u8bc9 VentureBeat\u3002 \u201c\u5ba2\u6237\u751f\u547d\u5468\u671f\u4e2d\u7684\u6bcf\u4f4d\u5458\u5de5\u90fd\u503c\u5f97\u62e5\u6709\u4e00\u4e2a\u7531\u6bcf\u6708\u6570\u5341\u4ebf\u4e2a\u6570\u636e\u70b9\u63d0\u4f9b\u652f\u6301\u7684\u526f\u9a7e\u9a76\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u5efa\u8bae\uff0c\u4f8b\u5982\u2018\u76f8\u5bf9\u4e8e\u589e\u957f 3 \u500d\u7684\u5e10\u6237\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u60a8\u53ef\u4ee5\u505a\u66f4\u591a\u9002\u7528\u4e8e\u5176\u4ed6\u5e10\u6237\u7684\u4e8b\u60c5\u3002 &#39;\u901a\u8fc7 Retain \u4f5c\u4e3a\u526f\u9a7e\u9a76\uff0c\u7ec4\u7ec7\u53ef\u4ee5\u5728\u6574\u4e2a\u56e2\u961f\u548c\u6d41\u7a0b\u4e2d\u4f20\u64ad\u6700\u4f73\u4e60\u60ef\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u80fd\u66f4\u597d\u5730\u5b8c\u6210\u5de5\u4f5c\u3002\u201d\u5728\u8bbe\u7f6e\u65f6\uff0c\u4f7f\u7528 Retain \u7684\u7ba1\u7406\u5458\u4f1a\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\u3001\u7f51\u9875\u548c\u5c5e\u6027\u7684\u201c\u5141\u8bb8\u5217\u8868\u201d\uff0c\u4ee5\u6355\u83b7\u6570\u636e\u548c\u6d41\u7a0b\u5de5\u4f5c\u6d41\u3002\u7528\u6237\u4e0b\u8f7d\u6d4f\u89c8\u5668\u6269\u5c55\uff0cRetain \u4f1a\u6536\u96c6\u8be6\u7ec6\u7684\u4f1a\u8bdd\u6570\u636e\uff0c\u5305\u62ec\u9875\u9762 URL\u3001\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u3001\u9875\u9762\u5c5e\u6027\u3001\u8fdb\u7a0b\u7c7b\u522b\u7b49\u3002\u8be5\u5e73\u53f0\u901a\u8fc7\u53ef\u89c6\u5316\u548c\u6458\u8981\u5c06\u8fd9\u4e9b\u6570\u636e\u8f6c\u6362\u4e3a\u53ef\u64cd\u4f5c\u7684\u4fe1\u606f\uff0c\u4e3a\u6574\u4e2a\u516c\u53f8\u7684\u5ba2\u6237\u3001\u56e2\u961f\u548c\u5e94\u7528\u7a0b\u5e8f\u4ea4\u4e92\u63d0\u4f9b\u771f\u5b9e\u6765\u6e90\u3002 Chernoff \u8868\u793a\uff0cRetain \u5e73\u53f0\u53ef\u4ee5\u56de\u7b54\u4e0e\u5ba2\u6237\u652f\u51fa\u76f8\u5173\u7684\u6295\u8d44\u56de\u62a5\u95ee\u9898\uff0c\u8fd9\u4e9b\u95ee\u9898\u53ef\u7528\u4e8e\u4e3a\u5ba2\u6237\u6210\u529f\u521b\u5efa\u65b0\u7684\u6536\u5165\u4e2d\u5fc3\u3002 Chernoff \u8bf4\uff0c\u56e0\u4e3a Retain \u53ef\u4ee5\u5728\u5408\u540c\u7ea6\u5b9a\u7684\u65f6\u95f4\u4e4b\u5916\u6355\u83b7\u4e2a\u4eba\u8d26\u6237\u7684\u53c2\u4e0e\u65f6\u95f4\uff0c\u516c\u53f8\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u8ffd\u52a0\u9500\u552e\u670d\u52a1\u5408\u540c\u3002 Retain \u8fd8\u63d0\u4f9b\u5bf9\u5ba2\u6237\u5173\u7cfb\u7684\u53ef\u89c1\u6027\uff0c\u4f5c\u4e3a\u6d41\u5931\u7684\u9884\u8b66\u4fe1\u53f7\u3002\u54c1\u724c\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u201c\u5173\u7cfb\u8bb0\u5206\u5361\u201d\uff0c\u4f7f\u4ed6\u4eec\u80fd\u591f\u76d1\u63a7\u5ba2\u6237\u4e92\u52a8\u5e76\u5728\u5fc5\u8981\u65f6\u7ea0\u6b63\u8def\u7ebf\u3002\n\u201c[Retain \u5e2e\u52a9] \u516c\u53f8\u901a\u8fc7\u5bf9\u5728\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\u4e3a\u5ba2\u6237\u670d\u52a1\u7684\u52aa\u529b[\u548c]\u6d3b\u52a8\u7684\u6d1e\u5bdf\u6765\u4e86\u89e3\u670d\u52a1\u5ba2\u6237\u7684\u603b\u4f53\u6210\u672c\uff0c\u201dChernoff \u7ee7\u7eed\u8bf4\u9053\u3002 \u201c[\u5927\u591a\u6570] \u9886\u5bfc\u8005\u90fd\u5728\u52aa\u529b\u4e13\u6ce8\u4e8e\u6700\u9ad8\u4ef7\u503c\u7684\u6d41\u7a0b\u548c\u5ba2\u6237\uff0c\u4f46\u4e0d\u77e5\u9053\u5982\u4f55\u8865\u6551\u8fd9\u79cd\u60c5\u51b5\u2026\u2026\u51ed\u501f\u6211\u4eec\u5728\u6570\u636e\u8fde\u63a5\u65b9\u9762\u7684\u80cc\u666f\uff0c\u6211\u4eec\u770b\u5230\u4e86\u5e94\u7528\u4e0e\u5e7f\u544a\u6280\u672f\u76f8\u5173\u7684\u76f8\u540c\u6280\u672f\u7684\u673a\u4f1a\u2026\u2026\u6765\u5e2e\u52a9\u516c\u53f8\u66f4\u597d\u5730\u4e86\u89e3\u4ed6\u4eec\u5bf9\u7279\u5b9a\u5ba2\u6237\u6210\u529f\u7684\u6295\u8d44\u662f\u5426\u6709\u76ca\u4e8e\u4ed6\u4eec\u7684\u5e95\u7ebf\u3002\u201d\u603b\u90e8\u4f4d\u4e8e\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u65e7\u91d1\u5c71\u7684 Retain \u62e5\u6709 20 \u540d\u5458\u5de5\uff0c\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5176\u8f6f\u4ef6\u73b0\u5df2\u88ab\u5305\u62ec\u8c37\u6b4c\u3001\u5c3c\u5c14\u68ee\u548c Salesforce \u5728\u5185\u7684\u5341\u591a\u5bb6\u8d22\u5bcc 500 \u5f3a\u516c\u53f8\u7684\u6570\u5343\u540d\u7528\u6237\u6240\u4f7f\u7528\u3002\u636e\u62a5\u9053\uff0c\u5728\u8fc7\u53bb 12 \u4e2a\u6708\u4e2d\uff0c\u5e74\u5ea6\u7ecf\u5e38\u6027\u6536\u5165\u589e\u957f\u4e86 8 \u500d\uff0c\u800c Retain \u73b0\u6709\u5ba2\u6237\u7684\u589e\u957f\u5e73\u5747\u589e\u957f\u4e86 36 \u500d\u3002 \u201c\u6211\u7684\u76ee\u200b\u200b\u6807\u662f\u8ba9 Retain \u6210\u4e3a\u4e0b\u4e00\u4ee3\u5ba2\u6237\u4f53\u9a8c\u6570\u636e\uff0c\u5e76\u53d6\u4ee3\u6240\u6709\u62fc\u63a5\u5728\u4e00\u8d77\u7684\u81ea\u6211\u62a5\u544a\u6570\u636e\u548c\u8017\u65f6\u7684\u54a8\u8be2...... [\u5bf9\u4e8e\u6211\u4eec\u7684\u5ba2\u6237\uff0c\u6211\u4eec] \u5c06\u6bcf\u5e74\u82b1\u8d39\u5728\u7e41\u7410\u7684 23,000 \u5c0f\u65f6\u901a\u8fc7\u63d0\u9ad8\u4e0e\u9ad8\u4ef7\u503c\u5ba2\u6237\u7684\u53c2\u4e0e\u5ea6\u548c\u7559\u5b58\u7387\uff0c\u6700\u5927\u9650\u5ea6\u5730\u63d0\u9ad8\u9762\u5411\u5ba2\u6237\u7684\u53c2\u4e0e\u5ea6\u7684\u5185\u90e8\u6d41\u7a0b [\u540c\u65f6] \u5c06\u6536\u5165\u589e\u957f 25%\uff0c\u201d\u5207\u5c14\u8bfa\u592b\u8bf4\u3002 \u201c\u968f\u7740\u4f01\u4e1a\u91c7\u7528\u968f\u65f6\u968f\u5730\u5de5\u4f5c\u548c\u6df7\u5408\u6a21\u5f0f\uff0c[\u6211\u4eec] \u76f8\u4fe1\u516c\u53f8\u4e2d\u7684\u6bcf\u4e2a\u4eba\u90fd\u4e0e\u4ed6\u4eec\u7684\u5ba2\u6237\u548c\u56e2\u961f\u4fdd\u6301\u7740\u8fdc\u8ddd\u79bb\u5173\u7cfb\u3002\u56e0\u6b64\uff0c\u4f01\u4e1a\u9700\u8981\u53ef\u89c1\u6027\uff0c\u5e76\u786e\u4fdd\u6ca1\u6709\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u5bb9\u6613\u51fa\u73b0\u6f0f\u6d1e\u3002\u201d VentureBeat \u7684\u4f7f\u547d\u662f\u6210\u4e3a\u6280\u672f\u51b3\u7b56\u8005\u7684\u6570\u5b57\u57ce\u9547\u5e7f\u573a\uff0c\u4ee5\u83b7\u53d6\u6709\u5173\u53d8\u9769\u6027\u6280\u672f\u548c\u4ea4\u6613\u7684\u77e5\u8bc6\u3002\u6211\u4eec\u7684\u7f51\u7ad9\u63d0\u4f9b\u6709\u5173\u6570\u636e\u6280\u672f\u548c\u7b56\u7565\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u4ee5\u6307\u5bfc\u60a8\u9886\u5bfc\u60a8\u7684\u7ec4\u7ec7\u3002\u6211\u4eec\u9080\u8bf7\u60a8\u6210\u4e3a\u6211\u4eec\u793e\u533a\u7684\u4e00\u5458\uff0c\u4ee5\u8bbf\u95ee\uff1a\u5c01\u95ed\u7684\u601d\u60f3\u9886\u8896\u5185\u5bb9\u548c\u6211\u4eec\u73cd\u8d35\u6d3b\u52a8\u7684\u6298\u6263\uff0c\u4f8b\u5982 Transform 2021\uff1a\u4e86\u89e3\u66f4\u591a \u6210\u4e3a\u4f1a\u5458", "note_en": "Retain.ai, a platform that gives enterprises a view of  customer engagement across teams, processes, and apps, has raised $23 million in a funding round led by Emergence Capital, with participation from Baseline Ventures, Upside Partnership, and Afore Capital. The new funding will be used to support growth and more than double Retain.ai\u2019s workforce by the end of 2021, cofounder and CEO Eric Chernoff said. This round brings the company\u2019s total raised to more than $27 million to date.\n As companies grow, it can become difficult for them to understand how all of their divisions are  servicing customers. This can lead to investing too much effort in the wrong customers and not investing enough with the right customers. For example, customers that aren\u2019t paying can take up the most time from product, engineering, marketing, and other teams. Unfortunately, gathering the data needed for customer engagement analysis usually requires time-consuming, account-specific timesheets, process and time studies, or analyses using data from disparate sources of record.\n  Retain.ai aims to automate the process by providing a breakdown of customer data. The platform works with browser-based apps to create a picture of customer engagement, providing customer-facing teams and managers measurements of internal process efficiency.\n \u201cRetain\u2019s [engine] delivers a trusted, flexible system for identifying and sharing the habits that drive customer retention and revenue,\u201d Chernoff, a former LiveRamp employee who cofounded Retain.ai with Vlad Shulman in 2020, told VentureBeat via email. \u201cEvery employee across the customer lifecycle deserves a copilot, powered by billions of monthly  data points, that can provide recommendations such as \u2018relative to accounts that grow 3 times, we noticed you could be doing more of the things that work for other accounts.\u2019 With Retain as that copilot, organizations can propagate the best habits across entire teams and processes, making everyone better at their job.\u201d\n  At setup, admins using Retain build an \u201callow list\u201d of apps, web pages, and attributes to capture data and process workflows. Users download a browser extension and Retain collects detailed session data, including page URLs, start and end times, page attributes, process categories, and more. The platform converts this data into actionable information via visualizations and summarizations, providing a source of truth for customer, team, and app interactions across a company.\n According to Chernoff, the Retain platform can answer questions about return on investment relative to customer spend, which can be used to create new revenue centers for customer success. Because Retain can capture engagement time on individual accounts, outside of contracted time, companies can leverage this to upsell service contracts, Chernoff says.\n Retain also provides visibility into customer relationships to act as an early warning sign for churn. Brands can use it to create \u201crelationship scorecards\u201d that enable them to monitor customer interactions and course-correct if necessary.\n  \u201c[Retain helps] companies to understand overall cost-to-serve customers through insights on efforts [and] activities that go into serving customers throughout their lifecycle,\u201d Chernoff continued. \u201c[Most] leaders are struggling to focus on the highest value processes and customers and don\u2019t know how to remedy the situation \u2026 With our background in data connectivity, we saw an opportunity to apply the same techniques associated with adtech \u2026 to help companies better understand whether or not their investment in a particular customer\u2019s success was beneficial to their bottom line.\u201d\n San Francisco, California-based Retain, which has 20 employees, says its software is now being used by thousands of users across over a dozen Fortune 500 companies, including Google, Nielsen, and Salesforce. Annual recurring revenue is reportedly up 8 times over the last 12 months, and growth at Retain\u2019s current clients is averaging a 36 times uptick.\n \u201cMy goal is for Retain to be the next generation of customer experience data and replace all the spliced-together self-reporting data and time-consuming consulting \u2026 [For our clients, we\u2019re] returning the 23,000 hours per year spent on cumbersome internal processes to maximize customer-facing engagement [while] growing revenue 25% by boosting engagement with high-value customers and increasing retention,\u201d Chernoff said. \u201cWith enterprises adopting work-from-anywhere and hybrid models, [we] believe that everyone at a company is in a long-distance relationship with their customers and team. As a result, enterprises need visibility and to ensure nothing falls through the cracks more than ever.\u201d\n VentureBeat&#39;s mission is to be a digital town square for technical decision-makers to gain knowledge about transformative technology and transact.Our site delivers essential information on data technologies and strategies to guide you as you lead your organizations. We invite you to become a member of our community, to access: gated thought-leader content and discounted access to our prized events, such as   Transform 2021: Learn More\n Become a member", "posttime": "2021-08-08 12:51:55", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,\u63d0\u4f9b,led,\u5ba2\u6237", "title": "Retain.ai \u662f\u4e00\u9879\u4e3a\u4f01\u4e1a\u63d0\u4f9b\u8de8\u56e2\u961f\u3001\u6d41\u7a0b\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba2\u6237\u53c2\u4e0e\u89c6\u56fe\u7684\u670d\u52a1\uff0c\u5728 Emergence Capital \u9886\u6295\u7684 A \u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2300 \u4e07\u7f8e\u5143", "title_en": "Retain.ai, a service that gives enterprises a view of customer engagement across teams, processes, and apps, raises $23M Series A led by Emergence Capital", "transed": 1, "url": "https://venturebeat.com/2021/08/05/customer-engagement-analytics-startup-retain-ai-nabs-23m/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u63d0\u4f9b", "led", "\u5ba2\u6237"]}, {"category": "", "categoryclass": "", "imagename": "cbb2a3c393b6c35891c233ac03571b01.png", "infoid": 1072066, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u2013 Smile CDR Inc. (Smile CDR) \u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u591a\u4f26\u591a\u7684\u5065\u5eb7\u6570\u636e\u5b58\u50a8\u548c\u96c6\u6210\u516c\u53f8\uff0c\u5b83\u5ba3\u5e03\u5df2\u5728\u7531\u4f4d\u4e8e\u897f\u96c5\u56fe\u7684\u5bb6\u65cf\u529e\u516c\u5ba4 30 North Group \u548c UPMC Enterprises \u7275\u5934\u7684 A \u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2000 \u4e07\u7f8e\u5143\u3002 \u2013 Smile CDR \u6210\u7acb\u4e8e 2016 \u5e74\uff0c\u63d0\u4f9b\u4e00\u5957\u670d\u52a1\uff0c\u4f7f\u536b\u751f\u7cfb\u7edf\u3001\u4ed8\u6b3e\u4eba\u548c\u533b\u9662\u80fd\u591f\u5feb\u901f\u3001\u5b89\u5168\u5730\u6ee1\u8db3\u7f8e\u56fd\u536b\u751f\u4fe1\u606f\u4e92\u64cd\u4f5c\u6027\u6807\u51c6\u3002 Smile CDR \u7684\u6570\u636e\u548c\u96c6\u6210\u5e73\u53f0\u5305\u62ec\u4e00\u4e2a\u5b8c\u6574\u7684\u4e34\u5e8a\u6570\u636e\u5b58\u50a8\u5e93 (CDR)\uff0c\u5b83\u56f4\u7ed5\u5065\u5eb7\u4e03\u7ea7 (HL7\u00ae) \u5feb\u901f\u533b\u7597\u4e92\u64cd\u4f5c\u6027\u8d44\u6e90 (FHIR\u00ae) \u6807\u51c6\u6784\u5efa\uff0c\u7528\u4e8e\u5b58\u50a8\u5065\u5eb7\u8bb0\u5f55\u5e76\u652f\u6301\u6240\u6709 FHIR \u8d44\u6e90\u3002\u81ea 2019 \u5e74\u4ee5\u6765\uff0cSmile CDR \u5b9e\u73b0\u4e86\u5feb\u901f\u589e\u957f\uff0c\u5458\u5de5\u5e74\u589e\u957f\u7387\u4e3a 400%\uff0c\u7531\u516c\u53f8\u6838\u5fc3 FHIR \u4ea7\u54c1\u7684\u6536\u5165\u6709\u673a\u63a8\u52a8\u3002\u9664\u4e86\u7f8e\u6d32\u3001\u6b27\u6d32\u3001\u4e2d\u4e1c\u548c\u975e\u6d32\u548c\u4e9a\u592a\u5730\u533a\u8d85\u8fc7 15 \u4e2a\u56fd\u5bb6/\u5730\u533a\u7684\u5ba2\u6237\u4e4b\u5916\uff0c\u8be5\u516c\u53f8\u8fd8\u4e0e\u7f8e\u56fd\u8d85\u8fc7 23 \u5bb6\u652f\u4ed8\u65b9\u5408\u4f5c\uff0c\u5176\u4e2d\u5305\u62ec 10 \u5bb6\u6700\u5927\u7684\u4fdd\u9669\u516c\u53f8\u548c\u5065\u5eb7\u8ba1\u5212\u4e2d\u7684\u4e09\u5bb6\u3002", "note_en": "\u2013  Smile CDR Inc. (Smile CDR), a Toronto-based health data storage and integration company, announced it has raised $20 million in Series A funding led by 30 North Group, a Seattle-based family office, and UPMC Enterprises.\n \u2013 Founded in 2016, Smile CDR offers a suite of services that allow health systems, payers and hospitals to meet U.S. health information interoperability standards rapidly and securely. Smile CDR\u2019s data and integration platform includes a complete clinical data repository (CDR) built around the Health Level Seven (HL7\u00ae) Fast Healthcare Interoperability Resources (FHIR\u00ae) standard used for storing health records and supports all FHIR Resources.\n            Since 2019, Smile CDR has seen rapid growth with a 400% year-over-year employee growth rate fueled organically by revenues from the company\u2019s core FHIR offering. The company partners with more than 23 payers across the U.S., including three of the 10 largest insurers and health plans, in addition to customers in more than 15 countries across the Americas, EMEA and APAC.", "posttime": "2021-08-08 12:51:40", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,cdr,group", "title": "\u603b\u90e8\u4f4d\u4e8e\u591a\u4f26\u591a\u7684 Smile CDR \u63d0\u4f9b\u5065\u5eb7\u548c\u4e34\u5e8a\u6570\u636e\u4e92\u64cd\u4f5c\u6027\u8f6f\u4ef6\uff0c\u5728 A \u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86 2000 \u4e07\u7f8e\u5143\uff0c\u7531 30 North Group \u548c UPMC Enterprises \u9886\u6295", "title_en": "Toronto-based Smile CDR, which offers software for health and clinical data interoperability, raises $20M Series A led by 30 North Group and UPMC Enterprises", "transed": 1, "url": "https://hitconsultant.net/2021/08/06/smile-cdr-fhir-data-platform-funding/", "via": "", "real_tags": ["\u8f6f\u4ef6", "cdr", "group"]}, {"category": "", "categoryclass": "", "imagename": "7cf484ceeae6bc7fc2161eddc603cd15.jpg", "infoid": 1072065, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u672c\u7cfb\u5217\u7684\u7b2c 2 \u96c6\u4e2d\uff0c\u6211\u6ce8\u610f\u5230\u6211\u7528\u6765\u7f16\u5199 Postgres \u51fd\u6570\u7684\u8bed\u8a00\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u7c7b\u578b\u7cfb\u7edf\u3002\u6211\u82b1\u4e86\u4e00\u6bb5\u65f6\u95f4\u624d\u7406\u89e3\u7c7b\u578b\u5728 Postgres \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u8bb0\u5f55\u96c6\u5e76\u53ef\u4ee5\u4e0e\u8868\u548c\u7269\u5316\u89c6\u56fe\u4ea4\u4e92\u3002\u521b\u5efa\u51fd\u6570 notes_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de setof \u6ce8\u91ca\u4f5c\u4e3a $$ begin return query select * from annotation where userid = concat(&#39;acct:&#39;, _userid) and groupid = _groupid;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5df2\u7ecf\u5b9a\u4e49\u4e86\u7ba1\u7406\u8fd4\u56de\u96c6\u7684\u7c7b\u578b\uff1a\u5b83\u662f\u6ce8\u91ca\u8868\u7684\u6a21\u5f0f\u3002\u8be5\u51fd\u6570\u8fd4\u56de\u5339\u914d\u7528\u6237 ID \u548c\u7ec4 ID \u7684\u8bb0\u5f55\u3002\u6211\u73b0\u5728\u53ef\u4ee5\u627e\u5230\u6211\u6700\u8fd1\u6ce8\u91ca\u7684\u6587\u6863\u7684 URL\u3002\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u51fd\u6570\u7684\u53c2\u6570\u4ee5\u4e0b\u5212\u7ebf\u4e3a\u524d\u7f00\u3002\u8fd9\u662f\u56e0\u4e3a\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u53d8\u91cf\u53ef\u80fd\u4e0e\u8868\u4e2d\u7684\u5217\u540d\u51b2\u7a81\u3002\u7531\u4e8e\u6211\u4eec\u7684\u5217\u540d\u90fd\u6ca1\u6709\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u65b9\u4fbf\u7684\u533a\u5206\u7b26\u3002\u5047\u8bbe\u51fd\u6570\u7684\u7b7e\u540d\u6539\u4e3a\uff1a \u9519\u8bef\uff1a\u5217\u5f15\u7528\u201cuserid\u201d\u4e0d\u660e\u786e\u7b2c 2 \u884c\uff1a\u5176\u4e2d userid = concat(&#39;acct:&#39;, userid) ^ DETAIL\uff1a\u5b83\u53ef\u4ee5\u5f15\u7528 PL/pgSQL \u53d8\u91cf\u6216\u8868\u5217\u3002\u8be5\u8868\u5177\u6709\u4e0e\u5176\u540c\u540d\u53d8\u91cf\u51b2\u7a81\u7684 userid \u548c groupid \u5217\u3002\u6240\u4ee5\u5bf9\u4e8e\u7ed3\u5408\u53d8\u91cf\u548c\u6570\u636e\u5e93\u503c\u7684\u51fd\u6570\uff0c\u6211\u7528\u4e0b\u5212\u7ebf\u4f5c\u4e3a\u53d8\u91cf\u540d\u7684\u524d\u7f00\u3002\n\u53ef\u4ee5\u5728\u4efb\u4f55 SQL SELECT \u4e0a\u4e0b\u6587\u4e2d\u8c03\u7528\u8fd4\u56de\u96c6\u5408\u7684\u51fd\u6570\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e0a\u4e0b\u6587\u662f psql\uff0cPostgres \u5f3a\u5927\u4e14\u591a\u624d\u591a\u827a\u7684 REPL\uff08\u8bfb\u53d6-\u8bc4\u4f30-\u6253\u5370\u5faa\u73af\uff09\u3002\u5bf9\u4e8e\u4e0d\u540c\u4e0a\u4e0b\u6587\u7684\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u5728\u7269\u5316\u89c6\u56fe\u4e2d\u7f13\u5b58\u51fd\u6570\u7684\u7ed3\u679c\u96c6\u3002\u4f7f\u7528\u6570\u636e\u521b\u5efa\u7269\u5316\u89c6\u56fe public_notes_for_judell as ( select * from notes_for_user_in_group(&#39;judell@hypothes.is&#39;, &#39;__world__&#39;) order by created desc )\uff1b\u89c6\u56fe\u7684\u7c7b\u578b\u662f\u9690\u5f0f\u6ce8\u89e3\uff1b\u5b83\u7684\u6a21\u5f0f\u4e0e\u4e0a\u9762\u663e\u793a\u7684\u6a21\u5f0f\u76f8\u5339\u914d\uff1b\u4ece\u89c6\u56fe\u4e2d\u9009\u62e9 target_uri \u76f8\u5f53\u4e8e\u4ece\u51fd\u6570 notes_for_user_in_group \u8fd4\u56de\u7684 setof \u6ce8\u91ca\u4e2d\u9009\u62e9 target_uri\u3002\u867d\u7136\u5b83\u663e\u793a\u5f97\u66f4\u5feb\uff01\u6bcf\u6b21\u9009\u62e9\u51fd\u6570\u7684\u7ed3\u679c\u96c6\u65f6\uff0c\u90fd\u5fc5\u987b\u8fd0\u884c\u5305\u88c5\u67e5\u8be2\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u7684\u7279\u5b9a\u793a\u4f8b\u3002\u521b\u5efa\u89c6\u56fe\u6240\u9700\u7684\u65f6\u95f4\u76f8\u540c\u3002\u4f46\u662f\u4e00\u65e6\u5b8c\u6210\uff0c\u60a8\u5c31\u53ef\u4ee5\u5728\u51e0\u6beb\u79d2\u5185\u9009\u62e9\u5176\u5185\u5bb9\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u901a\u8fc7\u62a5\u544a\u6bcf\u4e2a\u6ce8\u91ca\u6587\u6863\u7684\u6ce8\u91ca\u8ba1\u6570\u6765\u4f18\u5316 notes_for_user_in_group\u3002\u521b\u5efa\u51fd\u6570 annotated_docs_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de\u8868 ( count bigint, userid text, groupid text, url text ) as $$ begin return query select count(n.*) as anno_count, n.userid, n.groupid, n .target_uri from notes_for_user_in_group(_userid, _groupid) n group by n.userid, n.groupid, n.target_uri order by anno_count desc;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u8be5\u51fd\u6570\u4e0d\u8fd4\u56de\u67d0\u4e2a\u547d\u540d\u7c7b\u578b\u7684\u96c6\u5408\uff0c\u800c\u662f\u8fd4\u56de\u4e00\u4e2a\u533f\u540d\u8868\u3002\u6211\u5c06\u96c6\u5408\u8fd4\u56de\u51fd\u6570\u8c03\u7528 notes_for_user_in_group \u522b\u540d\u4e3a n \u5e76\u4f7f\u7528\u522b\u540d\u6765\u9650\u5b9a\u6240\u9009\u5217\u7684\u540d\u79f0\u3002\u8fd9\u907f\u514d\u4e86\u53e6\u4e00\u4e2a\u547d\u540d\u51b2\u7a81\u3002\u5982\u679c\u5728\u51fd\u6570\u4f53\u4e2d\u5199\u5165 userid \u800c\u4e0d\u662f n.userid \u7136\u540e\u8c03\u7528\u5b83\uff0cPostgres \u518d\u6b21\u62b1\u6028\u51b2\u7a81\u3002\n\u9519\u8bef\uff1a\u5217\u5f15\u7528\u201cuserid\u201d\u4e0d\u660e\u786e\u7b2c 3 \u884c\uff1auserid\uff0c^ \u8be6\u7ec6\u4fe1\u606f\uff1a\u5b83\u53ef\u4ee5\u5f15\u7528 PL/pgSQL \u53d8\u91cf\u6216\u8868\u5217\u3002\u8ba1\u6570 |\u7528\u6237\u540d |\u7ec4\u540d | target_uri -------+---------------------------------------- ---- 516 | jdell@hypothes.is | __\u4e16\u754c__ | http://shakespeare.mit.edu/macbeth/full.html 73 | jdell@hypothes.is | __\u4e16\u754c__ | https://www.independent.co.uk/news/world/asia/india-floods-bangladesh-nepal-deaths-millions-homeless-latest-news-updates-a7919006.html 51 | jdell@hypothes.is | __\u4e16\u754c__ | https://www.usatoday.com/story/news/nation-now/2017/06/16/coconut-oil-isnt-healthy-its-never-been-healthy/402719001/ \u521b\u5efa\u7269\u5316\u89c6\u56fe url_counts_for_public_notes_by_judell as ( select *\u6765\u81ea annotated_docs_for_user_in_group( &#39;judell@hypothes.is&#39;, &#39;__world__&#39; ) ) \u548c\u6570\u636e\uff1b\u5f53\u60a8\u5728 psql \u4e2d\u4f7f\u7528 \\d \u547d\u4ee4\u8be2\u95ee\u8be5\u89c6\u56fe\u7684\u5b9a\u4e49\u65f6\uff1a Column |\u7c7b\u578b ---------+-------- \u8ba1\u6570 | bigint \u7528\u6237\u540d |\u6587\u672c\u7ec4ID |\u6587\u5b57\u7f51\u5740 | text \u5e55\u540e Postgres \u4ece\u51fd\u6570\u8fd4\u56de\u7684\u533f\u540d\u8868\u4e2d\u521b\u5efa\u4e86\u8fd9\u4e2a\u5b9a\u4e49\u3002\u8981\u4fee\u6539\u51fd\u6570\u4ee5\u4f7f\u5176\u4f7f\u7528\u547d\u540d\u7c7b\u578b\uff0c\u8bf7\u9996\u5148\u521b\u5efa\u7c7b\u578b\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5728\u51fd\u6570\u4e2d\u4f7f\u7528\u8be5\u547d\u540d\u7c7b\u578b\u3002\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u91cd\u65b0\u5b9a\u4e49\u51fd\u6570\uff0c\u56e0\u6b64\u9996\u5148\u5c06\u5176\u5220\u9664\u3002\u9519\u8bef\uff1a\u65e0\u6cd5\u5220\u9664\u51fd\u6570 annotated_docs_for_user_in_group(text,text) \u56e0\u4e3a\u5176\u4ed6\u5bf9\u8c61\u4f9d\u8d56\u4e8e\u5b83\u8be6\u7ec6\u4fe1\u606f\uff1a\u7269\u5316\u89c6\u56fe url_counts_for_public_notes_by_judell \u4f9d\u8d56\u4e8e\u51fd\u6570 annotated_docs_for_user_in_group(text,text) \u63d0\u793a\uff1a\u4f7f\u7528 DROP ... CASCADE \u4e5f\u5220\u9664\u4f9d\u8d56\u5bf9\u8c61\u3002\u5f53\u51fd\u6570\u7684\u7b7e\u540d\u66f4\u6539\u65f6\uff0c\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u4f9d\u8d56\u4e8e\u51fd\u6570\u7684\u89c6\u56fe\u3002\u6211\u5c06\u5728\u4ee5\u540e\u7684\u5173\u4e8e\u96c6\u5408\u8fd4\u56de\u51fd\u6570\u7684\u4e00\u96c6\u4e2d\u8be6\u7ec6\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e9b\u51fd\u6570\u5c06\u5176\u7ed3\u679c\u52a8\u6001\u7f13\u5b58\u5728\u7269\u5316\u89c6\u56fe\u4e2d\u3002\u73b0\u5728\uff0c\u7531\u4e8e\u6211\u4eec\u521a\u521a\u521b\u5efa\u7684\u89c6\u56fe\u662f\u4e00\u4e2a\u4eba\u4e3a\u7684\u4e00\u6b21\u6027\u89c6\u56fe\uff0c\u53ea\u9700\u6309\u7167 Postgres \u7684\u5efa\u8bae\u4f7f\u7528 CASCADE \u5c06\u5176\u4e0e\u51fd\u6570\u4e00\u8d77\u5220\u9664\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u8fd4\u56de setof annotated_docs_for_user_in_group \u800c\u4e0d\u662f\u533f\u540d\u8868\u7684\u51fd\u6570\u7248\u672c(...) create function annotated_docs_for_user_in_group( _userid text, _groupid text) \u8fd4\u56de setof annotated_docs_for_user_in_group as $$ begin return query select count(n.*) as anno_count, n.userid, n.groupid, n.target_uri from notes_for_user_in_group(_userid, _groupid) n group by n.userid, n.groupid, n.target_uri order by anno_count desc;\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u7ed3\u679c\u4e0e\u4e0a\u8ff0\u76f8\u540c\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\u5462\uff1f\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4e0d\u4f1a\u3002\u58f0\u660e\u7c7b\u578b\u662f\u989d\u5916\u7684\u5f00\u9500\u3002\u5c31\u50cf\u89c6\u56fe\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u51fd\u6570\u4e00\u6837\uff0c\u51fd\u6570\u4e5f\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u7c7b\u578b\u3002\u8981\u4e86\u89e3\u4e3a\u4ec0\u4e48\u60a8\u53ef\u80fd\u4e0d\u60f3\u8981\u8fd9\u6837\u7684\u4f9d\u8d56\u5173\u7cfb\uff0c\u5047\u8bbe\u6211\u4eec\u8fd8\u60f3\u8ddf\u8e2a\u6bcf\u4e2a URL \u7684\u6700\u65b0\u6ce8\u91ca\u3002\u521b\u5efa\u7c7b\u578b annotated_docs_for_user_in_group as ( count bigint, userid text, groupid text, url text, most_recent_note timestamp );\n\u9519\u8bef\uff1a\u65e0\u6cd5\u5220\u9664\u7c7b\u578b annotated_docs_for_user_in_group \u56e0\u4e3a\u5176\u4ed6\u5bf9\u8c61\u4f9d\u8d56\u4e8e\u5b83\u8be6\u7ec6\u4fe1\u606f\uff1a\u51fd\u6570 annotated_docs_for_user_in_group(text,text,text) \u4f9d\u8d56\u4e8e\u7c7b\u578b annotated_docs_for_user_in_group \u63d0\u793a\uff1a\u4f7f\u7528 DROP ... CASCADE \u4e5f\u5220\u9664\u4f9d\u8d56\u5bf9\u8c61\u3002\u8981\u91cd\u65b0\u5b9a\u4e49\u7c7b\u578b\uff0c\u60a8\u5fc5\u987b\u8fdb\u884c\u7ea7\u8054\u5220\u9664\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa\u4f9d\u8d56\u4e8e\u7c7b\u578b\u7684\u51fd\u6570\u3002\u5982\u679c\u8fd9\u4e9b\u89c6\u56fe\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u4f9d\u8d56\u4e8e\u5220\u9664\u7684\u51fd\u6570\uff0c\u5219\u5220\u9664\u4e5f\u4f1a\u7ea7\u8054\u5230\u5b83\u4eec\uff0c\u5e76\u4e14\u5b83\u4eec\u4e5f\u5fc5\u987b\u91cd\u65b0\u521b\u5efa\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u7ecf\u5e38\u7f16\u5199\u8fd4\u56de table(...) \u800c\u4e0d\u662f setof TYPE \u7684\u51fd\u6570\u3002\u5728\u52a8\u6001\u8bed\u8a00\u4e2d\uff0c\u4f7f\u7528\u65e0\u7c7b\u578b\u7684\u503c\u5305\u5f88\u65b9\u4fbf\uff1b\u6211\u53d1\u73b0\u5728 Postgres \u4e2d\u7f16\u5199\u51fd\u6570\u65f6\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u662f\uff0c\u6709\u65f6\u58f0\u660e\u548c\u4f7f\u7528\u7c7b\u578b\u5f88\u6709\u7528\u3002\u6839\u636e\u6211\u76ee\u524d\u7684\u7ecf\u9a8c\uff0c\u5f53\u60a8\u53d1\u73b0\u81ea\u5df1\u5728\u51e0\u4e2a\u76f8\u5173\u51fd\u6570\u4e2d\u7f16\u5199\u76f8\u540c\u7684\u8fd4\u56de\u8868\uff08...\uff09\u8bed\u53e5\u65f6\uff0c\u5728 Postgres \u4e2d\u8fd9\u6837\u505a\u662f\u6700\u6709\u610f\u4e49\u7684\u3002\u5047\u8bbe\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06 annotated_docs_for_user_in_group \u7684\u7ed3\u679c\u7ec4\u5408\u5230\u4e00\u7ec4\u7528\u6237\u4e2d\u3002\u521b\u5efa\u51fd\u6570 annotated_docs_for_users_in_group(_userids text[], _groupid text) \u8fd4\u56de setof annotated_docs_for_user_in_group as $$ begin return query with userids as ( select unnest(_userids) as userid ) select a.* from userids u join annotated_docs_for_user_group) a.userid = concat(&#39;acct:&#39;, u.userid);\u7ed3\u5c3e; $$ \u8bed\u8a00 plpgsql;\u8fd9\u4e2a\u65b0\u51fd\u6570\u4f7f\u7528 SQL WITH \u5b50\u53e5\u521b\u5efa\u4e00\u4e2a\u516c\u7528\u8868\u8868\u8fbe\u5f0f (CTE)\uff0c\u8be5\u8868\u8fbe\u5f0f\u5c06\u5165\u7ad9\u7684 userid \u6570\u7ec4\u8f6c\u6362\u4e3a\u4e00\u4e2a\u4e34\u65f6\u7684\u7c7b\u4f3c\u8868\u7684\u5bf9\u8c61\uff0c\u540d\u4e3a userids\uff0c\u6bcf\u884c\u4e00\u4e2a userid\u3002\u65b0\u51fd\u6570\u7684\u5305\u88c5 SQL \u7136\u540e\u5c06\u8be5 CTE \u8fde\u63a5\u5230\u4ece annotated_docs_for_user_in_group \u8fd4\u56de\u7684\u96c6\u5408\u5e76\u8fd4\u56de\u8fde\u63a5\u7ed3\u679c\u3002 \uff08\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u5faa\u73af\u53d8\u91cf\u5e76\u904d\u5386\u6570\u7ec4\u4ee5\u7d2f\u79ef\u7ed3\u679c\uff0c\u4ee5\u66f4\u7a0b\u5e8f\u5316\u7684\u65b9\u5f0f\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u65e9\u5148\u6211\u4f7f\u7528\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u4f46\u5728 Postgres \u51fd\u6570\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6211\u5f00\u59cb\u66f4\u559c\u6b22\u66f4\u7eaf\u7cb9\u7684\u7c7b\u4f3c SQL \u7684\u65b9\u6cd5\u9762\u5411\u96c6\u5408\u7684\u98ce\u683c\u3002\uff09\u5728\u4e24\u4e2a\u51fd\u6570\u4e4b\u95f4\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u7c7b\u578b\u4f7f\u5b83\u4eec\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u9605\u8bfb\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5c06\u5b83\u4eec\u5f7c\u6b64\u8054\u7cfb\u8d77\u6765\uff0c\u5e76\u4e0e\u4ece\u5b83\u4eec\u884d\u751f\u7684\u6240\u6709\u89c2\u70b9\u8054\u7cfb\u8d77\u6765\u3002\u5982\u679c\u6211\u51b3\u5b9a\u5c06 most_recent_note \u6dfb\u52a0\u5230\u7c7b\u578b\u4e2d\uff0cPostgres \u5c06\u8981\u6c42\u6211\u8c03\u6574\u6240\u6709\u4f9d\u8d56\u7684\u51fd\u6570\u548c\u89c6\u56fe\uff0c\u4ee5\u4fbf\u4fdd\u6301\u4e00\u81f4\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u81f3\u5173\u91cd\u8981\u7684\u4fdd\u8bc1\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u5728\u672a\u6765\u7684\u4e00\u96c6\u4e2d\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b83\u662f\u9ad8\u7ea7\u7f13\u5b58\u673a\u5236\u7684\u5173\u952e\u63a8\u52a8\u8005\u3002", "note_en": "In  episode 2 of this series I noted that the languages in which I\u2019m writing Postgres functions share a common type system. It took me a while to understand how types work in the context of Postgres functions that can return sets of records and can interact with tables and materialized views.\n  create function notes_for_user_in_group(\r _userid text, \r _groupid text)\rreturns setof annotation as $$\r begin\r return query \r select * from annotation\r where userid = concat(&#39;acct:&#39;, _userid)\r and groupid = _groupid;\r end;\r$$ language plpgsql;\n In this case the type that governs the returned set has already been defined: it\u2019s the schema for the  annotation table.\n  The function returns records matching a  userid and  groupid. I can now find the URLs of documents most recently annotated by me.\n    You might wonder why the function\u2019s parameters are prefixed with underscores. That\u2019s because variables used in functions can conflict with names of columns in tables. Since none of our column names begin with underscore, it\u2019s a handy differentiator. Suppose the function\u2019s signature were instead:\n   ERROR: column reference &#34;userid&#34; is ambiguous\rLINE 2: where userid = concat(&#39;acct:&#39;, userid)\r ^\rDETAIL: It could refer to either a PL/pgSQL variable or a table column.\n The table has  userid and  groupid columns that conflict with their eponymous variables. So for functions that combine variables and database values I prefix variable names with underscore.\n Set-returning functions can be called in any SQL SELECT context. In the example above that context is  psql, Postgres\u2019 powerful and multi-talented REPL (read-eval-print loop). For an example of a different context, let\u2019s cache the function\u2019s result set in a materialized view.\n create materialized view public_notes_for_judell as (\r select\r *\r from notes_for_user_in_group(&#39;judell@hypothes.is&#39;, &#39;__world__&#39;)\r order by created desc\r) with data;\n   The view\u2019s type is implicitly  annotation; its schema matches the one shown above; selecting  target_uri from the view is equivalent to selecting  target_uri from the  setof annotation returned from the function  notes_for_user_in_group.\n    It shows up a lot faster though! Every time you select the function\u2019s result set, the wrapped query has to run. For this particular example that can take a few seconds. It costs the same amount of time to create the view. But once that\u2019s done you can select its contents in milliseconds.\n Now let\u2019s define a function that refines  notes_for_user_in_group by reporting the count of notes for each annotated document.\n create function annotated_docs_for_user_in_group(\r _userid text, \r _groupid text)\rreturns table (\r count bigint,\r userid text,\r groupid text,\r url text\r) as $$\r begin\r return query\r select\r count(n.*) as anno_count,\r n.userid,\r n.groupid,\r n.target_uri\r from notes_for_user_in_group(_userid, _groupid) n\r group by n.userid, n.groupid, n.target_uri \r order by anno_count desc;\r end;\r$$ language plpgsql;\n Instead of returning a  setof some named type, this function returns an anonymous table. I\u2019ve aliased the set-returning function call  notes_for_user_in_group as  n and used the alias to qualify the names of selected columns. That avoids another naming conflict. If you write  userid instead of  n.userid in the body of the function and then call it, Postgres again complains about a conflict.\n ERROR: column reference &#34;userid&#34; is ambiguous\rLINE 3: userid,\r ^\rDETAIL: It could refer to either a PL/pgSQL variable or a table column.\n    count | userid | groupid | target_uri\r-------+---------------------------------------------\r 516 | judell@hypothes.is | __world__ | http://shakespeare.mit.edu/macbeth/full.html\r 73 | judell@hypothes.is | __world__ | https://www.independent.co.uk/news/world/asia/india-floods-bangladesh-nepal-deaths-millions-homeless-latest-news-updates-a7919006.html\r 51 | judell@hypothes.is | __world__ | https://www.usatoday.com/story/news/nation-now/2017/06/16/coconut-oil-isnt-healthy-its-never-been-healthy/402719001/\n  create materialized view url_counts_for_public_notes_by_judell as (\r select \r *\r from annotated_docs_for_user_in_group(\r &#39;judell@hypothes.is&#39;,\r &#39;__world__&#39;\r )\r) with data;\n   When you ask for the definition of that view using the  \\d command in  psql:\n   Column | Type \r---------+--------\r count | bigint\r userid | text\r groupid | text\r url | text\n Behind the scenes Postgres has created this definition from the anonymous table returned by the function.\n To revise the function so that it uses a named type, first create the type.\n    Now we can use that named type in the function. Since we\u2019re redefining the function, first drop it.\n   ERROR: cannot drop function annotated_docs_for_user_in_group(text,text) because other objects depend on it\rDETAIL: materialized view url_counts_for_public_notes_by_judell depends on function annotated_docs_for_user_in_group(text,text)\rHINT: Use DROP ... CASCADE to drop the dependent objects too.\n A view that depends on a function must be recreated when the function\u2019s signature changes. I\u2019ll say more about this in a future episode on set-returning functions that dynamically cache their results in materialized views. For now, since the view we just created is a contrived throwaway, just drop it along with the function by using  CASCADE as Postgres recommends.\n    Now we can recreate a version of the function that returns  setof annotated_docs_for_user_in_group instead of an anonymous  table(...)\n create function annotated_docs_for_user_in_group(\r _userid text, \r _groupid text)\rreturns setof annotated_docs_for_user_in_group as $$\r begin\r return query\r select\r count(n.*) as anno_count,\r n.userid,\r n.groupid,\r n.target_uri\r from notes_for_user_in_group(_userid, _groupid) n\r group by n.userid, n.groupid, n.target_uri \r order by anno_count desc;\r end;\r$$ language plpgsql;\n The results are the same as above. So why do it this way? In many cases I don\u2019t. It\u2019s extra overhead to declare a type. And just as a view can depend on a function, a function can depend on a type. To see why you might not want such dependencies, suppose we want to also track the most recent note for each URL.\n create type annotated_docs_for_user_in_group as (\r count bigint,\r userid text,\r groupid text,\r url text,\r most_recent_note timestamp\r);\n    ERROR: cannot drop type annotated_docs_for_user_in_group because other objects depend on it \rDETAIL: function annotated_docs_for_user_in_group(text,text,text) depends on type annotated_docs_for_user_in_group \rHINT: Use DROP ... CASCADE to drop the dependent objects too.\n To redefine the type you have to do a cascading drop and then recreate functions that depend on the type. If any of those views depend on dropped functions, the drop cascades to them as well and they also must be recreated. That\u2019s why I often write functions that return  table(...) rather than  setof TYPE. In dynamic languages it\u2019s convenient to work with untyped bags of values; I find the same to be true when writing functions in Postgres.\n Sometimes, though, it\u2019s useful to declare and use types. In my experience so far it makes most sense to do that in Postgres when you find yourself writing the same  returns table(...) statement in several related functions. Let\u2019s say we want a function that combines the results of  annotated_docs_for_user_in_group for some set of users.\n create function annotated_docs_for_users_in_group(_userids text[], _groupid text)\r returns setof annotated_docs_for_user_in_group as $$\r begin\r return query \r with userids as (\r select unnest(_userids) as userid\r )\r select \r a.*\r from userids u\r join annotated_docs_for_user_in_group(u.userid, _groupid) a\r on a.userid = concat(&#39;acct:&#39;, u.userid);\r end;\r$$ language plpgsql;\n This new function uses the SQL WITH clause to create a common table expression (CTE) that converts an inbound array of userids into a transient table-like object, named  userids, with one userid per row. The new function\u2019s wrapped SQL then joins that CTE to the set returned from  annotated_docs_for_user_in_group and returns the joined result.\n (You can alternatively do this in a more procedural way by creating a loop variable and marching through the array to accumulate results. Early on I used that approach but in the context of Postgres functions I\u2019ve come to prefer the more purely SQL-like set-oriented style.)\n Sharing a common type between the two functions makes them simpler to write and easier to read. More importantly it connects them to one another and to all views derived from them. If I do decide to add  most_recent_note to the type, Postgres will require me to adjust all depending functions and views so things remain consistent. That can be a crucial guarantee, and as we\u2019ll see in a future episode it\u2019s a key enabler of an advanced caching mechanism.", "posttime": "2021-08-08 12:50:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "postgres,\u51fd\u6570", "title": "\u4f7f\u7528 Postgres \u7c7b\u578b", "title_en": "Working with Postgres Types", "transed": 1, "url": "https://blog.jonudell.net/2021/07/27/working-with-postgres-types/", "via": "", "real_tags": ["postgres", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "3d929c57c8191d10d1ec3ea9db2c62ca.png", "infoid": 1072064, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eca\u5929\u8bfb\u4e86\u4e00\u4e9b\u5173\u4e8e\u4e00\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u8ba1\u5212\u5b9e\u65bd\u4e00\u4e2a\u65b0\u7cfb\u7edf\u6765\u81ea\u52a8\u68c0\u6d4b\u548c\u62a5\u544a\u7528\u6237\u7167\u7247\u4e2d\u7684 CSAM \u7684\u6587\u7ae0\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u5728 12 \u9875\u6280\u672f\u6458\u8981\u4e2d\u63cf\u8ff0\u7684\u7cfb\u7edf\u4f3c\u4e4e\u8bbe\u8ba1\u5f97\u5f88\u597d\uff0c\u5e76\u4e14\u53ef\u80fd\u5c3d\u53ef\u80fd\u63a5\u8fd1\u771f\u6b63\u7684\u9690\u79c1\uff0c\u540c\u65f6\u4ecd\u7136\u5141\u8bb8\u5185\u5bb9\u76d1\u89c6\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u5f53\u6211\u542c\u5230\u5173\u4e8e\u7aef\u5230\u7aef\u52a0\u5bc6\u7684\u4f8b\u5916\u60c5\u51b5\u65f6\uff0c\u6211\u5fc3\u4e2d\u7684\u9ed1\u5ba2\u4e0d\u7981\u611f\u5230\u6709\u70b9\u60ca\u614c\uff08\u5e76\u4e0d\u662f\u8bf4\u4ed6\u4eec\u7684\u7167\u7247\u5b58\u50a8\u88ab\u5ba3\u4f20\u4e3a\u7aef\u5230\u7aef\u52a0\u5bc6\u5f00\u59cb\uff09\u4e0e\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u6280\u672f\u6982\u8ff0\u786e\u5b9e\u8bf4\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u7528\u6237\u8bbe\u5907\u968f\u673a\u751f\u6210\u7684 - \u9608\u503c\u53ef\u7834\u89e3 - \u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff09\u3002\u56e0\u6b64\uff0c\u6211\u6765\u200b\u200b\u5230\u8fd9\u91cc\u6982\u8ff0\u6211\u8ba4\u4e3a\u5bf9\u8be5\u7cfb\u7edf\u7684\u5bc6\u7801\u5f3a\u5ea6/\u9690\u79c1\u4fdd\u8bc1\u6700\u73b0\u5b9e\u7684\u653b\u51fb\uff0c\u5e76\uff08\u5e0c\u671b\uff09\u4e86\u89e3\u6211\u4e3a\u4ec0\u4e48\u9519\u4e86\u6216\u6211\u5ffd\u7565\u4e86\u4ec0\u4e48\u3002\u5047\u8bbe\u8fd9\u5bb6\u516c\u53f8\u66fe\u7ecf\u906d\u53d7\u8fc7\u6570\u636e\u6cc4\u9732\uff1a\u8fd9\u79cd\u60c5\u51b5\u5f00\u59cb\u65f6\u4e0d\u592a\u53ef\u80fd\u53d1\u751f\uff0c\u4f46\u5e76\u975e\u95fb\u6240\u672a\u95fb\u3002\u7531\u4e8e\u8fd9\u6b21\u6570\u636e\u6cc4\u9732\uff0c\u8bb8\u591a\u7528\u6237\u7684\u7167\u7247\uff08\u52a0\u5bc6\u683c\u5f0f\uff09\u88ab\u6cc4\u9732\u3002\u5982\u679c\u771f\u6b63\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u5230\u4f4d\uff0c\u8fd9\u4e0d\u4f1a\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u9690\u79c1\u95ee\u9898\uff0c\u56e0\u4e3a\u6240\u6709\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u53ea\u6709\u6700\u7ec8\u7528\u6237\u8bbe\u5907\u77e5\u9053\u7684\u5bc6\u94a5\u8fdb\u884c\u52a0\u5bc6\uff0c\u56e0\u6b64\u5b9e\u9645\u4e0a\u4efb\u4f55\u4eba\u90fd\u65e0\u6cd5\u89e3\u5bc6\u4e92\u8054\u7f51\u3002\u7136\u800c\uff0c\u5728\u8fd9\u4e2a\u65b0\u7cfb\u7edf\u4e2d\uff0c\u6211\u7684\u7406\u89e3\u662f\u7167\u7247\uff0c\u6216\u8005\u81f3\u5c11\u662f\u5b83\u4eec\u7684\u89c6\u89c9\u884d\u751f\u7269\uff08\u6211\u627e\u4e0d\u5230\u5b9a\u4e49\uff0c\u867d\u7136\u6211\u5047\u8bbe\u5b83\u7c7b\u4f3c\u4e8e\u7f29\u7565\u56fe\uff09\u88ab\u52a0\u5bc6\u4e24\u6b21\uff0c\u5916\u5c42\u88ab\u52a0\u5bc6\u901a\u8fc7\u4ece\u7167\u7247\u7684 NeuralHash \u6d3e\u751f\u7684\u5bc6\u94a5\u3002 NeuralHash \u88ab\u63cf\u8ff0\u4e3a\u4e00\u79cd\u6563\u5217\u7b97\u6cd5\uff0c\u80fd\u591f\u4e3a\u540c\u4e00\u56fe\u50cf\u63d0\u4f9b\u76f8\u540c\u7684\u6563\u5217\uff0c\u5373\u4f7f\u8be5\u56fe\u50cf\u7ecf\u8fc7\u88c1\u526a\u3001\u8c03\u6574\u5927\u5c0f\u3001\u989c\u8272\u8c03\u6574\u3001\u538b\u7f29\u7b49\u3002\u6563\u5217\u7684\u4e3b\u8981\u76ee\u7684\u662f\u786e\u4fdd\u76f8\u540c\u548c\u89c6\u89c9\u4e0a\u76f8\u4f3c\u7684\u56fe\u50cf\u4ea7\u751f\u76f8\u540c\u7684\u54c8\u5e0c\u503c\uff0c\u800c\u5f7c\u6b64\u4e0d\u540c\u7684\u56fe\u50cf\u4ea7\u751f\u4e0d\u540c\u7684\u54c8\u5e0c\u503c\u3002\u4f8b\u5982\uff0c\u7ecf\u8fc7\u8f7b\u5fae\u88c1\u526a\u6216\u8c03\u6574\u5927\u5c0f\u7684\u56fe\u50cf\u5e94\u88ab\u89c6\u4e3a\u4e0e\u5176\u539f\u59cb\u56fe\u50cf\u76f8\u540c\u5e76\u5177\u6709\u76f8\u540c\u7684\u54c8\u5e0c\u503c\u3002\u8fd9\u5728\u7406\u8bba\u4e0a\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u7528\u6237\u62cd\u6444\u7684\u6240\u6709\uff08\u53ef\u80fd\u662f\u552f\u4e00\u7684\uff09\u7167\u7247\u90fd\u5c06\u4f7f\u7528\u5f3a\u5927\u7684\u3001\u72ec\u7279\u7684\u79d8\u5bc6\u8fdb\u884c\u52a0\u5bc6\uff0c\u4ee5\u786e\u4fdd\u5b83\u4eec\u7684\u79c1\u5bc6\u6027\u548c\u5b89\u5168\u6027\u3002\n\u4f46\u662f\uff0c\u5f53\u7528\u6237\u5b58\u50a8\u4e0d\u552f\u4e00\u7684\u7167\u7247\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4f8b\u5982\u4e00\u4e2a\u6d41\u884c\u7f51\u7ad9\u7684\u622a\u56fe\uff0c\u4e00\u4e2a\u5728\u4e92\u8054\u7f51\u4e0a\u6d41\u4f20\u7684\u6a21\u56e0\u7b49\u7b49\uff1f\u5982\u4f55\u963b\u6b62\u653b\u51fb\u8005\u751f\u6210\u6d41\u884c\u6a21\u56e0\u7684 NeuralHash\uff0c\u5bfc\u51fa\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u6cc4\u9732\u7684\u6570\u636e\u76f4\u5230\u6210\u529f\u89e3\u5bc6\u6761\u76ee\uff0c\u4ece\u800c\u9a8c\u8bc1\u7279\u5b9a\u7528\u6237\u4e91\u7167\u7247\u5e93\u4e2d\u7684\u5185\u5bb9\uff0c\u5e76\u964d\u4f4e\u4ed6\u4eec\u7684\u9690\u79c1\u7ea7\u522b\uff1f\u6216\u8005\uff0c\u518d\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5047\u8bbe\u653b\u51fb\u8005\u559c\u6b22\u82f9\u679c\uff0c\u5e76\u4e14\u771f\u7684\u975e\u5e38\u60f3\u627e\u5230\u82f9\u679c\u7684\u7167\u7247\u3002\u662f\u4ec0\u4e48\u963b\u6b62\u4ed6\u4eec\u8ba9 AI \u751f\u6210\u51e0\u767e\u4e07\u5f20\u82f9\u679c\u7167\u7247\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u54c8\u5e0c\u5904\u7406\uff0c\u83b7\u53d6\u5bc6\u94a5\uff0c\u7136\u540e\u66b4\u529b\u7834\u89e3\u53ef\u80fd\u5f88\u5927\u7684\u6cc4\u6f0f\uff0c\u76f4\u5230\u627e\u5230\u5339\u914d\u9879\uff1f\u4e00\u4e2a\u82f9\u679c\u4e0d\u53ef\u80fd\u6709\u90a3\u4e48\u591a\u6392\u5217\uff0c\u5bf9\u5427\uff1f\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u60a8\u4e0d\u4f1a\u627e\u5230\u6240\u6709\u7684\u82f9\u679c\u7167\u7247\uff0c\u4f46\u6211\u8ba4\u4e3a\u60a8\u81f3\u5c11\u80fd\u591f\u83b7\u5f97\u4e00\u4e9b\u53ef\u89e3\u5bc6\u7684\u5339\u914d\u9879\u3002\u8be5\u516c\u53f8\u672c\u8eab\u751a\u81f3\u5728\u5176\u4e00\u7bc7\u8bba\u6587\u4e2d\u900f\u9732\uff0c\u5728\u5339\u914d\u65f6\u51fa\u73b0\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u975e\u96f6\uff0c\u56e0\u6b64\u4ed6\u4eec\u5f15\u5165\u4e86\u9608\u503c\u79d8\u5bc6\u5171\u4eab\uff08\u5373\u9700\u8981\u5bf9\u5176\u201c\u5df2\u77e5\u9519\u8bef\u201d\u8fdb\u884c\u591a\u6b21\u5339\u914d\u201c\u5728\u5176\u5185\u90e8\u52a0\u5bc6\u7ea7\u522b\u88ab\u7834\u574f\u4e4b\u524d\u6570\u636e\u5e93......\u63a5\u4e0b\u6765\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\uff09\uff0c\u4ee5\u5c06\u8bef\u62a5\u7684\u53ef\u80fd\u6027\u964d\u4f4e\u5230\u4e07\u4ebf\u5206\u4e4b\u4e00\u3002\u5bf9\u6211\u800c\u8a00\uff0c\u7ed9\u5b9a\u7684\u7167\u7247\u58f0\u97f3\u5728\u53ef\u66b4\u529b\u7834\u89e3\u8303\u56f4\u5185\uff0c\u4efb\u4f55\u51fa\u73b0\u8bef\u62a5\u5339\u914d\u7684\u53ef\u80fd\u6027\u90fd\u5927\u5927\u4f4e\u4e8e\u4e07\u5206\u4e4b\u4e00\uff0c\u5c24\u5176\u662f\u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053\u8981\u67e5\u627e\u7684\u7167\u7247\u7c7b\u578b\u3002\u6700\u540e\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u9608\u503c\u52a0\u5bc6\u7684\u5185\u5c42\uff0c\u5b83\u57fa\u672c\u4e0a\u8981\u6c42\u5728\u6784\u5efa\u89e3\u5bc6\u5185\u5c42\u7684\u5bc6\u94a5\u4e4b\u524d\u5148\u89e3\u5bc6\u591a\u5f20\u7167\u7247\u7684\u5916\u5c42\u3002\u4f46\u662f\u518d\u4e00\u6b21\uff0c\u6839\u636e\u9608\u503c\u5927\u5c0f\uff08\u5fc5\u987b\u975e\u5e38\u4f4e\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5c0f\u4e8e\u67d0\u4eba\u53ef\u80fd\u62e5\u6709\u7684\u5b9e\u9645 CSAM \u6570\u91cf\uff09\uff0c\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e00\u4e2a\u5927\u969c\u788d\uff1a\u60a8\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u4f8b\u5982\uff0c\u5728\u6574\u4e2a\u4e91\u7167\u7247\u5b58\u50a8\u5e93\u4e2d\u5b58\u50a8\u4e86 10 \u4e2a\u5e38\u89c1\u6a21\u56e0\u7684\u7528\u6237\uff0c\u73b0\u5728\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u8be5\u5bc6\u94a5\u3002\u6839\u636e\u8be5\u8bba\u6587\uff0c\u5728\u7b2c\u4e00\u5c42\u52a0\u5bc6\u4e2d\uff0c\u7528\u6237\u7684\u6240\u6709\u7167\u7247\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u94a5\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u6211\u770b\u5230\u4e86\u8be5\u7cfb\u7edf\u5728\u53d1\u751f\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u65f6\u7684\u5b89\u5168\u548c\u9690\u79c1\u4fdd\u8bc1\uff0c\u4e3b\u8981\u95ee\u9898\u662f\uff1aNeuralHash\u3002\u5982\u679c NeuralHash \u5177\u6709\u8db3\u591f\u9ad8\u7684\u8bef\u62a5\u7387\uff0c\u5e76\u4e14\u53ef\u4ee5\u8fdb\u884c\u9006\u5411\u5de5\u7a0b\u6216\u6cc4\u9732\u6216\u516c\u5f00\uff08\u5982\u679c\u5c1a\u672a\u516c\u5f00\uff09\uff0c\u90a3\u4e48\u8fd9\u5bb6\u5927\u578b\u79d1\u6280\u516c\u53f8\u80fd\u5426\u771f\u6b63\u4fdd\u8bc1\u5176\u7528\u6237\u7684\u79c1\u4eba\u7167\u7247\u5c06\u65e0\u6761\u4ef6\u4fdd\u7559\u79c1\u4eba\u7684\uff0c\u53ea\u8981\u4ed6\u4eec\u4e0d\u662f CSAM\uff1f\u6211\u5ffd\u7565\u4e86\u54ea\u4e9b\u52a0\u5bc6\u4fdd\u62a4\uff0c\u4f7f\u6211\u4e0a\u9762\u63cf\u8ff0\u7684\u653b\u51fb\u53d8\u5f97\u4e0d\u53ef\u80fd\uff1f\u6211\u9519\u8fc7\u4e86\u4ec0\u4e48\uff1f\u4f60\u770b\u5230\u4efb\u4f55\u5176\u4ed6\u6f5c\u5728\u7684\u7f3a\u9677\u5417\uff1f\u66f4\u65b0\uff1a\u6211\u4e0d\u786e\u5b9a\u662f\u5426\u53ef\u4ee5\u63a5\u53d7\u6216\u4e0d\u5177\u4f53\u547d\u540d\u516c\u53f8\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u8c28\u614e\u884c\u4e8b\uff0c\u4e0d\u8fd9\u6837\u505a\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u786e\u5b9e\u770b\u5230\u4e00\u4e9b\u8bc4\u8bba\u8981\u6c42\u63d0\u4f9b\u6765\u6e90\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u3002\u6211\u5e0c\u671b\u8fd9\u6709\u5e2e\u52a9\uff01", "note_en": "I was doing some reading today about a major tech company planning to implement a new system for automatically detecting and reporting CSAM in users&#39; photos. Overall, the system as described in their 12-page technical summary seems to be designed quite well, and may be as close as you can get to true privacy, while still allowing for content surveillance.\n That being said, the hacker in me can&#39;t help but feel a little alarmed when it hears about exceptions to what could otherwise be end-to-end encryption (not that their photo storage is advertised as end-to-end encrypted to begin with, however their technical overview does say that all of the photos are encrypted with a\u2014 threshold breakable\u2014key randomly generated by the user&#39;s device). Therefore, I came here to outline what I see as the most realistic attack on the cryptographic strength/privacy guarantees of this system, and to (hopefully) learn why I am wrong or what I have overlooked.\n  Let&#39;s say that this company ever suffers a data breach: an unlikely situation to begin with, but not unheard of. As a result of this data breach, many users&#39; photos (in encrypted format) are leaked. If true end-to-end encryption were in place, this would not be a major privacy concern, as all photos would be encrypted with a key known only to the end users&#39; devices, and therefore would not be realistically decryptable by anyone on the internet.\n In this new system, however, it is my understanding that photos, or at least their  visual derivatives (which I could not find a definition for though  I&#39;m assuming is similar to thumbnails), are encrypted twice, with the outer layer being encrypted by a key derived from the NeuralHash of the photo.\n NeuralHash is described as a hashing algorithm capable of providing the same hash for the same image, even after that image has undergone cropping, resizing, color adjustments, compression, etc.\n  The main purpose of the hash is to ensure that identical and visually similar images result in the same hash, and images that are different from one another result in different hashes. For example, an image that has been slightly cropped or resized should be considered identical to its original and have the same hash.\n This is great in theory, because it means that all (presumably unique) photos taken by users will be encrypted with strong, unique secrets, keeping them private and secure.\n But, what happens when a user stores a photo that isn&#39;t unique? For example a screenshot from a popular website, a meme circulating the internet, etc.? What&#39;s to stop an attacker from generating a NeuralHash of popular memes, deriving a key, then bruteforcing the leaked data until it successfully decrypts an entry, thus verifying the contents within a specific user&#39;s cloud photo library, and degrading their level of privacy?\n Or, for another example, let&#39;s say the attacker  loves apples, and really, really wants to find photos of apples. What&#39;s to stop them from having an AI generate a few million photos of an apple, hashing them, deriving keys, and then bruteforcing the presumably large leak until it finds a match? There can&#39;t be  that many permutations of an apple, can there? Like sure, you&#39;re not going to find all of the apple photos, but I would think that you&#39;d be able to at least get  some decryptable matches.\n This company itself even reveals in one of its papers that there is a non-zero chance of false positives when it comes to matches, and that they&#39;ve therefore introduced threshold secret sharing (i.e. needing to have multiple matches to their &#34;known-bad&#34; database before their inner level of encryption can be broken... more on that next), to reduce the chance of false positives down to one in a trillion. A significantly less than a one in a trillion chance of having a false positive match on any, given photo sounds within bruteforceable range to me, especially if you already know what type of photo you&#39;re looking for.\n On a final note, there is an inner layer of threshold encryption which basically requires that the outer layers of multiple photos be decrypted before the key to decrypt the inner layer can be constructed. But once again, depending on the threshold size (which must be quite low, as it needs to be less than a realistic amount of CSAM that someone could have), it doesn&#39;t seem like a large obstacle: you just need to find a user who has, say, ten common memes stored in their entire cloud photo storage library, and you&#39;ve now constructed that key. According to the paper, that same key is used across  all of a user&#39;s photos for that first layer of encryption.\n At the end of the day, I see the security and privacy guarantees of this system in the event of a data breach hanging onto one, main thing: the NeuralHash.\n If the NeuralHash has a high-enough false positive rate, and can be reverse engineered or gets leaked or is made public (if it isn&#39;t already), then can this major tech company truly guarantee its users that their private photos will unconditionally remain private, as long as they&#39;re not CSAM? What cryptographic protections have I overlooked, that make an attack like the one I described above impossible? What am I missing? Do you see any other potential flaws?\n  Update: I was not sure if it were considered acceptable or not to specifically name the company, so I decided to err on the side of caution and not do so. That being said, I did see a few comments asking for the source, so  here it is. I hope this helps!", "posttime": "2021-08-08 12:50:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,apple,csam,\u7167\u7247", "title": "Apple \u7684\u65b0 CSAM \u4fdd\u62a4\u63aa\u65bd\u53ef\u80fd\u4f1a\u4f7f iCloud \u7167\u7247\u53d8\u5f97\u53ef\u66b4\u529b\u7834\u89e3", "title_en": "Apple's New CSAM Protections May Make iCloud Photos Bruteforceable", "transed": 1, "url": "https://crypto.stackexchange.com/questions/93423/how-unique-is-a-neuralhash", "via": "", "real_tags": ["\u7834\u89e3", "apple", "csam", "\u7167\u7247"]}, {"category": "", "categoryclass": "", "imagename": "3091a8bc82c4b4fe5de7d661c8e1aabc.png", "infoid": 1072063, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bb8\u591a\u6700\u8fd1\u7684\u534f\u8bae\uff08\u4f8b\u5982\u52a0\u5bc6 DNS \u548c HTTPS\uff09\u5bf9 Web \u67b6\u6784\u7684\u5173\u952e\u90e8\u5206\u8fdb\u884c\u52a0\u5bc6\uff0c\u5426\u5219\u7a83\u542c\u8005\u53ef\u80fd\u4f1a\u5229\u7528\u8fd9\u4e9b\u90e8\u5206\u6765\u63a8\u65ad\u7528\u6237\u7684\u6570\u636e\u3002\u4f46\u52a0\u5bc6\u4e0d\u4e00\u5b9a\u80fd\u4fdd\u8bc1\u9690\u79c1\uff0c\u5c24\u5176\u662f\u5728\u5143\u6570\u636e\u65b9\u9762\u3002 DNS-over-HTTPS (DoH) \u6216\u52a0\u5bc6\u670d\u52a1\u5668\u540d\u79f0\u6307\u793a (ESNI) \u7b49\u65b0\u5174\u6807\u51c6\u53ef\u4ee5\u4fdd\u62a4 DNS \u67e5\u8be2\u548c TLS SNI \u6269\u5c55\u7684\u5185\u5bb9\u3002\u4f46\u662f\uff0c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b\u6e90\u81ea\u7528\u6237\u8bbe\u5907\u7684\u6d41\u91cf\u4e0a\u7684\u76ee\u6807 IP \u5730\u5740\u6765\u786e\u5b9a\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u54ea\u4e9b\u7f51\u7ad9\uff0c\u8fd9\u4e9b IP \u5730\u5740\u4f5c\u4e3a TLS \u63e1\u624b\u7684 ClientHello \u7684\u4e00\u90e8\u5206\u53ef\u89c1\u3002\u8be5\u5143\u6570\u636e\u53ef\u4ee5\u88ab\u591a\u4e2a\u4ee3\u7406\u5229\u7528\u548c\u8d27\u5e01\u5316\uff0c\u4ee5\u5206\u6790\u548c\u5b9a\u4f4d\u7528\u6237\u8fdb\u884c\u5e7f\u544a\u3002\u6211\u4eec\u5728\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u8fdb\u884c\u4e86\u4e00\u9879\u6d4b\u91cf\u7814\u7a76\uff0c\u4ee5\u4e86\u89e3\u653b\u51fb\u8005\u662f\u5426\u53ef\u4ee5\u4ec5\u4f7f\u7528\u6765\u81ea\u7528\u6237\u8bbe\u5907\u7684\u4e00\u7ec4 IP \u5730\u5740\u63a8\u65ad\u51fa\u7528\u6237\u5c1d\u8bd5\u8fde\u63a5\u7684\u7f51\u7ad9\u3002\u6211\u4eec\u4f7f\u7528\u57fa\u4e8e Chromium \u6784\u5efa\u7684\u9ad8\u5ea6\u53ef\u914d\u7f6e\u7684\u7f51\u7edc\u722c\u866b MIDA\uff0c\u5bf9\u53c2\u4e0e\u5448\u73b0 Alexa \u524d 100 \u4e07\u4e2d\u6700\u53d7\u6b22\u8fce\u7f51\u7ad9\u7684\u6240\u6709\u57df\u6267\u884c DNS \u89e3\u6790\u3002\u7531\u4e8e\u5728\u8bf7\u6c42\u7f51\u7ad9\u65f6\u6267\u884c\u7684\u5b50\u67e5\u8be2\uff0c\u6211\u4eec\u8fd8\u8003\u8651\u4e86\u4ece\u4e0d\u540c Web \u670d\u52a1\u5668\u52a0\u8f7d\u7684\u51e0\u4e2a\u8d44\u6e90\u3002\u8054\u7cfb\u7684\u6240\u6709\u8fd9\u4e9b IP \u7684\u96c6\u5408\u79f0\u4e3a\u7f51\u7ad9\u7684\u9875\u9762\u52a0\u8f7d\u6307\u7eb9 (PLF)\u3002\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u4e2a\u5bf9\u624b\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u65e8\u5728\u901a\u8fc7\u6536\u96c6\u5404\u79cd\u5019\u9009\u57df\u7684\u6b63\u5411\u6620\u5c04\u6765\u6062\u590d\u57df\u4fe1\u606f\uff0c\u7136\u540e\u4f7f\u7528\u7b54\u6848\u6765\u63a8\u65ad\u7ed9\u5b9a IP \u7684\u53cd\u5411\u6620\u5c04\u3002\n\u56fe 2 \u2014 PLF \u5982\u4f55\u89e3\u91ca\u5728 Web \u8bf7\u6c42\u7684\u4e00\u90e8\u5206\u4e0a\u52a0\u8f7d\u7684\u591a\u4e2a\u8d44\u6e90\u7684\u56fe\u5f62\u8868\u793a\u3002\u514d\u8d23\u58f0\u660e\uff1a\u4ee5\u4e0a\u7f51\u7ad9\u4ec5\u7528\u4f5c\u793a\u4f8b\u3002\u5bf9\u4e8e\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u4e2a IP \u5730\u5740\uff0c\u6211\u4eec\u8ba1\u7b97\u4e86\u6620\u5c04\u5230\u5b83\u7684\u57df\u6570\u91cf\u4f5c\u4e3a\u5176\u533f\u540d\u96c6\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u5c0f\u90e8\u5206 IP \u5730\u5740 (47.6%) \u5bf9\u5e94\u4e8e\u5355\u4e2a\u57df\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u57df\uff0c\u653b\u51fb\u8005\u77e5\u9053\u7528\u6237\u53ef\u80fd\u67e5\u627e\u7684\u6f5c\u5728\u5730\u5740\u96c6\u5e76\u80fd\u591f\u5bf9\u5176\u6267\u884c\u524d\u5411\u67e5\u627e\uff0c\u52a0\u5bc6 DNS \u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002\u5927\u7ea6 20% \u7684\u8bf7\u6c42\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u552f\u4e00\u6807\u8bc6\uff1b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cs (XHR) \u4e0d\u592a\u53ef\u80fd\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00\u7684 IP \u5730\u5740\uff0c\u800c\u6837\u5f0f\u8868\u548c\u56fe\u50cf\u66f4\u6709\u53ef\u80fd\u3002\u56fe 3 \u2014 \u6b64\u56fe\u5c06\u751f\u6210\u7684\u533f\u540d\u96c6\u7684\u6570\u91cf\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5927\u5c0f\uff0c\u8868\u660e\u51e0\u4e4e\u4e00\u534a\u7684\u533f\u540d\u96c6\u7684\u5927\u5c0f\u4e3a 1\uff0c\u56e0\u6b64\u53ef\u4ee5\u552f\u4e00\u5730\u6620\u5c04\u5230\u7f51\u7ad9\u3002\u6211\u4eec\u6570\u636e\u96c6\u4e2d\u5927\u7ea6 68% \u7684 IP \u662f\u5355\u4e2a\u7ad9\u70b9\u72ec\u6709\u7684\uff0c\u603b\u5171\u6709 402,524 (42.6%) \u4e2a\u7ad9\u70b9\u4f7f\u7528\u81f3\u5c11\u4e00\u79cd\u8d44\u6e90\uff0c\u5176\u57df\u6620\u5c04\u5230\u7ad9\u70b9\u552f\u4e00 IP \u5730\u5740\u3002\u5927\u591a\u6570\u7f51\u7ad9 (95.7%) \u90fd\u6709\u552f\u4e00\u7684 PLF\uff0c\u8fd9\u8868\u660e\u5b58\u5728\u4ec5\u4ece\u6240\u8054\u7cfb\u7684 IP \u5730\u5740\u5217\u8868\u4e2d\u8bc6\u522b\u51fa\u7528\u6237\u6b63\u5728\u8bbf\u95ee\u8be5\u7f51\u7ad9\u7684\u98ce\u9669\u3002\u56fe 4 - \u5982\u4f55\u5c06\u9875\u9762\u52a0\u8f7d\u6307\u7eb9\u7528\u4f5c\u7b7e\u540d\uff0c\u901a\u8fc7\u7b80\u5355\u5730\u67e5\u770b IP \u5730\u5740\u6765\u8bc6\u522b\u8bf7\u6c42\u7684\u7f51\u9875\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u5728 Web \u6d4f\u89c8\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0cDNS \u548c SNI \u9690\u79c1\u5bf9\u77e5\u9053\u7528\u6237\u53ef\u80fd\u8bbf\u95ee\u7684\u4e00\u7ec4\u5408\u7406\u7ad9\u70b9\uff08\u5373\u4f7f\u8be5\u7ec4\u975e\u5e38\u5927\uff09\u5e76\u4e14\u6267\u884c\u524d\u5411\u67e5\u627e\u4ee5\u63a8\u65ad\u7684\u5bf9\u624b\u63d0\u4f9b\u4e86\u6709\u9650\u7684\u4fdd\u62a4\u4e0e\u7ed9\u5b9a IP \u5730\u5740\u5173\u8054\u7684\u57df\u540d\u548c\u7ad9\u70b9\u3002\n\u771f\u5b9e\u4e16\u754c\u7684\u63a8\u7406\u4e0e\u6211\u4eec\u7684\u5c01\u95ed\u4e16\u754c\u5047\u8bbe\u7565\u6709\u4e0d\u540c\uff0c\u56e0\u4e3a\u5bf9\u624b\u53ef\u4ee5\u4f7f\u7528\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u96c6\u3002\u5728\u6211\u4eec\u7684\u7814\u7a76\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u72ec\u4e00\u65e0\u4e8c\u7684 PLF \u7b7e\u540d\u5b9e\u9645\u4e0a\u53ef\u80fd\u5c5e\u4e8e\u4e24\u4e2a\u4e0d\u540c\u7684\u7f51\u7ad9\uff1b\u8fd9\u662f\u4e50\u89c2\u7684\uff0c\u4f46\u6211\u4eec\u5df2\u7ecf\u786e\u5b9a\u4e86\u6620\u5c04\u5230\u552f\u4e00\u57df\u7684 IP \u5730\u5740\uff0c\u8fd9\u4e9b IP \u5730\u5740\u53ef\u80fd\u7528\u4e8e\u552f\u4e00\u5730\u914d\u7f6e\u7f51\u7ad9\u3002\u6211\u4eec\u786e\u5b9e\u53d1\u73b0\u5185\u5bb9\u5206\u53d1\u7f51\u7edc (CDN) \u901a\u8fc7\u5c06\u66f4\u591a\u57df\u5408\u5e76\u5230\u540c\u4e00 IP \u5730\u5740\u6765\u63d0\u4f9b\u989d\u5916\u4fdd\u62a4\u7684\u91cd\u8981\u673a\u4f1a\u3002 HTTP/2 \u8fde\u63a5\u5408\u5e76\u53ef\u4ee5\u6291\u5236\u6765\u81ea\u9875\u9762\u52a0\u8f7d\u8ddf\u8e2a\u7684\u8fde\u63a5\u5e76\u6709\u52a9\u4e8e\u6539\u5584\u7528\u6237\u9690\u79c1\u3002\u8981\u4e86\u89e3\u6709\u5173\u6211\u4eec\u5de5\u4f5c\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u89c2\u770b\u6211\u4eec\u5728 2019 \u5e74\u5e94\u7528\u7f51\u7edc\u7814\u7a76\u7814\u8ba8\u4f1a\u4e0a\u7684\u6f14\u8bb2\u3002 Simran Patil \u662f\u4f0a\u5229\u8bfa\u4f0a\u5927\u5b66\u5384\u5df4\u7eb3\u9999\u69df\u5206\u6821\u8ba1\u7b97\u673a\u5de5\u7a0b\u4e13\u4e1a\u7684\u7855\u58eb\u751f\u3002\u5979\u662f\u7531\u4f0a\u5229\u8bfa\u4f0a\u5dde\u5b89\u5168\u548c\u9690\u79c1\u7814\u7a76\u4e2d\u5fc3\u7684\u987e\u95ee Nikita Borisov \u6559\u6388\u9886\u5bfc\u7684 Hatswitch \u7814\u7a76\u5c0f\u7ec4\u7684\u6210\u5458\u3002", "note_en": "A number of recent protocols such as Encrypted DNS and HTTPS encrypt critical parts of the web architecture, which can otherwise be exploited by eavesdroppers to infer users\u2019 data. But encryption may not necessarily guarantee privacy, especially when it comes to metadata.\n Emerging standards such as DNS-over-HTTPS (DoH) or Encrypted Server Name Indication (ESNI) can protect the content of both DNS queries and the TLS SNI extensions. However, it might still be possible to determine which websites users are visiting by simply looking at the destination IP addresses on the traffic originating from users\u2019 devices, which are visible as a part of the ClientHello of the TLS Handshake.\n This metadata can be exploited and monetized by several agents to profile and target the user for advertising.\n   We, at the University of Illinois, did a measurement study to understand whether an adversary can deduce the websites a user is trying to connect to, using a set of IP addresses originating from the user\u2019s device alone.\n Using a highly configurable web crawler built on top of Chromium called MIDA, we performed DNS resolution on all domains involved in rendering the most popular websites listed in the Alexa Top 1 Million.\n   We also accounted for several resources that get loaded from different web servers due to the sub-queries performed when a website is requested. The set of all these IPs contacted is referred to as the Page Load Fingerprint (PLF) of the website.\n We adopted the model of an adversary who aims to recover domain information by collecting forward mappings of various candidate domains, and then using the answers to infer the reverse mapping of a given IP.\n  Figure 2 \u2014 A graphical representation of how a PLF accounts for the several resources loaded on part of a web request. Disclaimer: The above website is used just as an example.\n  For each IP address in our dataset we calculated the number of domains that map to it as its anonymity set.\n A slight minority of the IP addresses in our data set (47.6%) correspond to a single domain. For these domains, where the adversary knows the set of potential addresses a user may look up and is able to perform forward lookups on them, encrypted DNS provides little to no benefit. About 20% of the requests are uniquely identifying in this way; notably,  s (XHRs) are less likely to map to site-unique IP addresses whereas stylesheets and images are more likely.\n  Figure 3 \u2014 This graph maps the number of anonymity sets generated to their sizes indicating that almost half the anonymity sets are of size 1 and thus, can be uniquely mapped to a website.\n Around 68% of the IPs in our data set are unique to a single site, and a total of 402,524 (42.6%) sites use at least one resource whose domain maps to a site-unique IP address. The majority of websites (95.7%) have a unique PLF, suggesting there is a risk of identifying that a user is visiting the site solely from a list of contacted IP addresses.\n  Figure 4 \u2014\u00a0How a page load fingerprint can be used as a signature to identify the webpage that was requested by simply looking at the IP addresses.\n We thus conclude that, in the context of web browsing, DNS and SNI privacy offers limited protection against an adversary who knows a plausible set of sites a user might visit (even if the set is quite large), and who performs forward lookups to infer the domain names and sites associated with given IP addresses.\n The real-world inference will be slightly different from our closed-world assumption because a wider dataset will be available to the adversary. It can happen that a PLF signature that might seem unique in our study can actually belong to two different websites; it\u2019s optimistic but we have identified IP addresses that have mappings to unique domains and these can potentially be used to uniquely profile websites.\n We do identify a significant opportunity for content distribution networks (CDNs) to offer additional protection by coalescing more domains onto the same IP address. HTTP/2 connection coalescing can suppress connections from the page load trace and contribute to improved user privacy.\n To learn more about our work watch our presentation at the  Applied Networking Research Workshop 2019.\n  Simran Patil is a Masters student in Computer Engineering at the University of Illinois at Urbana-Champaign. She is a part of the Hatswitch research group led by her advisor, Prof. Nikita Borisov, at Security and Privacy Research at Illinois.", "posttime": "2021-08-08 12:50:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5730\u5740,ip", "title": "\u60a8\u53ef\u4ee5\u4ece IP \u5730\u5740\u4e2d\u5b66\u5230\u4ec0\u4e48\uff1f (2019)", "title_en": "What can you learn from an IP address? (2019)", "transed": 1, "url": "https://blog.apnic.net/2019/08/23/what-can-you-learn-from-an-ip-address/", "via": "", "real_tags": ["\u5730\u5740", "ip"]}]