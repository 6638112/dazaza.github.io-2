[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073853, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83&#39\uff1b\u6211\u4eec\u5f88\u5c11\u6709\u673a\u4f1a\u770b\u5230\u771f\u5b9e\u7684\u3001\u786c\u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u8868\u660e\uff0c\u5728\u7f51\u4e0a\u521b\u5efa\u5185\u5bb9\u7684\u4eba\u7684\u53e3\u888b\u91cc\u5230\u5e95\u6709\u591a\u5c11\u94b1\u30022021\u7684\u5927\u62bd\u6410\u63d0\u4f9b\u4e86\u9519\u5931\u826f\u673a\u300210\u67086\u65e5\uff0c\u4e00\u540d\u533f\u540d\u9ed1\u5ba2\u57284chan\u4e0a\u53d1\u5e03\u4e86\u4e00\u4e2a125GB\u7684torrent\u94fe\u63a5\uff0c\u5176\u4e2d\u5305\u542b\u652f\u4ed8\u62a5\u544a\u548c\u6e90\u4ee3\u7801\u3002\u5f53\u5929\u665a\u4e9b\u65f6\u5019\uff0cTwitch\u786e\u8ba4\u4e86\u6cc4\u6f0f\u7684\u771f\u5b9e\u6027\uff0c\u5e76\u5c06\u5176\u5f52\u548e\u4e8e\u201c\u670d\u52a1\u5668\u914d\u7f6e\u66f4\u6539\u201d\u3002\u8fd9\u4e00\u4e8b\u4ef6\u51e0\u4e4e\u7acb\u5373\u88ab\u65b0\u95fb\u754c\u62a5\u9053\u3002\u6709\u521d\u6b65\u7684\u5206\u6790\uff0c\u4e00\u70b9\u70b9\u5c0f\u5c0f\u7684\u4e8b\u5b9e\u548c\u5bf9\u8d85\u7ea7\u660e\u661f\u5f69\u5e26\u7684\u652f\u4ed8\u6392\u540d\u7684\u6124\u6012\u3002\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u8fd9\u4e9b\u6587\u7ae0\u90fd\u4e0d\u591f\u6df1\u5165\u3002\u95f2\u804a\u5982\u98ce\u800c\u81f3\uff0c\u521b\u4f5c\u8005\u6536\u5165\u7684\u8bdd\u9898\u2014\u2014\u540c\u6837\u2014\u2014\u5e76\u6ca1\u6709\u88ab\u8bc1\u660e\u662f\u68d8\u624b\u7684\u3002\u5728\u6211\u770b\u6765\uff0c\u6211\u4eec\u4f3c\u4e4e\u96c6\u4f53\u6000\u5ff5\u68ee\u6797\n\u6b27\u7f8e\u56fd\u5bb6\u7684\u5b98\u65b9\u6700\u4f4e\u5de5\u8d44\u4e3a\u6bcf\u5e741.5\u4e07\u7f8e\u5143\u62161.3\u4e07\u6b27\u5143\u3002\u8fd9\u4e2a\u6570\u5b57\u4e0d\u73b0\u5b9e\uff0c\u4e0d\u8db3\u4ee5\u8ba9\u5168\u7403\u5927\u591a\u6570\u53d1\u8fbe\u7ecf\u6d4e\u4f53\u5ea6\u8fc7\u4e00\u5e74\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u8fd8\u662f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u6709\u7528\u7684\u6307\u6807\u6765\u8ba1\u7b97\u804c\u4e1a\u751f\u5b58\u80fd\u529b\u7684\u6700\u4f4e\u95e8\u69db\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u521b\u4f5c\u8005\u53ef\u80fd\u4f1a\u5f97\u5230\u8d5e\u52a9\u4eba\u3001\u8d5e\u52a9\u5546\u548c\u5e73\u53f0\u4e4b\u5916\u7684\u76f8\u5173\u4ea4\u6613\u7684\u8865\u8d34\u3002\n\u4e0b\u9762\u662f\u6211\u4eec\u81ea\u5df1\u7684\u7b2c\u4e00\u624b\u5206\u6790\uff0c\u7531\u6211\u5728DNR\u6210\u5458Sam Shaftoe\u7684\u6280\u672f\u652f\u6301\u4e0b\u8fdb\u884c\u30022021\u5e741\u6708\uff0cTwitk\u5439\u5618\u4e86989\u4e07\u4e2a\u521b\u5efa\u8005\u8d26\u6237\u7684\u57fa\u7840\uff0c\u6216\u8005\u6d3b\u8dc3\u7684\u6d41\u7ebf\u578b\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u6bcf\u5e74\u5236\u4f5c\u7684\u5185\u5bb9\u63a5\u8fd110\u4ebf\u5c0f\u65f6\u3002\u7136\u800c\uff0c\u622a\u81f3\u4e5d\u6708\uff0c\u53ea\u6709\u5927\u7ea611.600\u6761\u62bd\u6410\u6d41\u7ebf\u57282021\u7684\u8f68\u9053\u4e0a\u83b7\u5f97\u6700\u4f4e\u5de5\u8d44\u3002\u767e\u5206\u4e4b\u4e00\u767e\u6211\u4eec\u8bf4\u7684\u662f0.117%\u7684\u6d3b\u52a8\u62d6\u7f06\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u8fd8\u4e0d\u591f\u4e0d\u7965\u7684\u8bdd\uff0c\u90a3\u4e48\u603b\u6536\u5165\u5305\u62ec\u6d17\u94b1\u56e2\u4f19\u4f7f\u7528\u7684\u4ef7\u503c\u81f3\u5c111000\u4e07\u7f8e\u5143\u7684\u88ab\u76d7\u4fe1\u7528\u5361\u3002\n\u6b63\u5982\u5927\u591a\u6570\u5f00\u53d1\u6027\u793e\u4ea4\u5e73\u53f0\u6240\u505a\u7684\u90a3\u6837\uff0c\u4e9a\u9a6c\u900a\u65d7\u4e0b\u7684Twitch\u6295\u5165\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8d44\u6e90\uff0c\u63a8\u52a8\u4e86\u767e\u6155\u5927\u7684\u589e\u957f\u3002\u4e3a\u4e86\u5efa\u9020\u4ed6\u4eec\u68a6\u5e7b\u57ce\u5821\u7684\u62a4\u57ce\u6cb3\uff0cTwitch\u5c06\u4ee5\u6bcf\u5c0f\u65f6250\u7f8e\u5143\uff08\u7ea6\u4e3a\u4e0a\u8ff0\u6700\u4f4e\u5de5\u8d44\u768435\u500d\uff09\u7684\u4ef7\u683c\u8d3f\u8d42\u4e00\u4e9b\u77e5\u540d\u827a\u672f\u5bb6\uff0c\u5e76\u5728\u5c0f\u8d39\u3001\u66ff\u8865\u548c\u5e7f\u544a\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u989d\u5916\u5956\u52b1\uff0c\u4ee5\u6362\u53d6\u5b9a\u671f\u5728\u5e73\u53f0\u4e0a\u64ad\u653e\u6d41\u5a92\u4f53\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u4eec\u901a\u8fc7\u6210\u529f\u7684\u6d41\u5a92\u4f53\u804c\u4e1a\u83b7\u5f97\u4e86\u62a5\u916c\u3002\u4e50\u9ad8\uff08LEGO\uff09\u59d4\u6258\u8fdb\u884c\u76842019\u5e74\u7684\u4e00\u9879\u5e7f\u4e3a\u5ba3\u4f20\u7684\u8c03\u67e5\u663e\u793a\uff0c\u4f5c\u4e3aYouTube\u3001\u6709\u5f71\u54cd\u529b\u7684\u4eba\u6216\u6d41\u6c13\uff0c\u73b0\u5728\u662f\u4e2d\u5b66\u751f\u6700\u6e34\u671b\u7684\u5de5\u4f5c\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8b66\u7b1b\u6b4c\u66f2\u7b56\u7565\u8d77\u5230\u4e86\u4f5c\u7528\u3002\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b\uff0c\u5f71\u54cd\u529b\u5c31\u4f1a\u968f\u4e4b\u800c\u6765\u3002\u9274\u4e8e\u5e7f\u6cdb\u7684\u793e\u4ea4\u5a92\u4f53\u5173\u6ce8\u5ea6\u548c\u6d41\u5a92\u4f53\u6536\u5165\u4e4b\u95f4\u4f3c\u4e4e\u6ca1\u6709\u76f8\u5173\u6027\uff0cTwitch\u7b49\u5e73\u53f0\u5b9e\u9645\u4e0a\u9700\u8981\u5c06\u6d41\u5a92\u4f53\u76f4\u64ad\u4f5c\u4e3a\u4e00\u79cd\u751f\u6d3b\u65b9\u5f0f\u6765\u8fdb\u5165\u7ade\u4e89\u73af\u5883\u3002\u4f20\u7edf\u667a\u6167\u5efa\u8bae\u4f60\u6d41&#34\uff1b\u6bcf\u54683-5\u5929&#34\uff1b\uff0c\u76f8\u5f53\u4e8e\u4e00\u4efd\u517c\u804c\u5de5\u4f5c\u7684\u76f8\u5e94\u52aa\u529b\uff0c\u5e0c\u671b\u5728\u5e73\u53f0\u4e0a\u671d\u7740\u53ef\u6301\u7eed\u7684\u804c\u4e1a\u53d1\u5c55\u3002\u8fd9\u4e2a\u4e92\u8054\u7f51\u68a6\u60f3\u5df2\u7ecf\u5356\u7ed9\u4e86\u6709\u62b1\u8d1f\u7684\u521b\u4f5c\u8005\u3001\u4ed6\u4eec\u7684\u8ffd\u968f\u8005\u548c\u5e7f\u544a\u5546\u3002\n\u5f53\u8003\u8651\u5230\u4e00\u751f\u7684\u521b\u9020\u529b\u65f6\uff0c\u4e00\u8def\u4e0a\u540e\u9000\u4e00\u6b65\uff0c\u53cd\u601d\u4e00\u4e0b\u4f60\u5728\u722c\u8c01\u7684\u5c71\u662f\u503c\u5f97\u7684\u3002\u629b\u5f00\u6570\u5b57\u4e0d\u8c08\uff0c\u6211\u5e0c\u671b\u6211\u80fd\u8bf4\u670d\u4f60\u5728\u5934\u8111\u4e2d\u51c6\u786e\u5730\u5c06\u8f9b\u52e4\u5de5\u4f5c\u7684\u666e\u901a\u6d41\u5149\u6f14\u5458\u7684\u804c\u4e1a\u5e0c\u671b\u5206\u7c7b\u2014\u2014\u5f88\u597d\u5730\u5f52\u5165\u5f69\u7968\u9886\u57df\u3002\u8fd9\u4e9b\u95ee\u9898\u662f\u7cfb\u7edf\u6027\u548c\u56fa\u6709\u7684\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5373\u4f7f\u652f\u51fa\u589e\u52a010\u500d\u4e5f\u4e0d\u4f1a\u663e\u8457\u6269\u5927\u57fa\u6570\u3002\u5c3d\u7ba1\u90a3\u4e9b\u53ea\u521b\u9020\u5185\u5bb9\u7684\u521b\u9020\u8005\u4eec\u5bf9\u521b\u9020\u5185\u5bb9\u63d0\u51fa\u4e86\u5927\u91cf\u5efa\u8bae\uff0c\u4f46\u6240\u8c13\u7684\u201c\u521b\u9020\u8005\u7ecf\u6d4e\u201d\u4ecd\u7136\u662f\u4e00\u4e2a\u6a21\u7cca\u7684\u6982\u5ff5\uff0c\u7b3c\u7f69\u5728\u5e7f\u544a\u4e1a\u4f4e\u6c89\u7684\u547c\u565c\u58f0\u4e2d\u3002\n\u8fd9\u4e9b\u201c\u521b\u9020\u8005\u201d\u5230\u5e95\u662f\u8c01\uff1f\u6839\u636e\u6211\u81ea\u5df1\u7684\u7814\u7a76\u4f30\u8ba1\uff0c\u521b\u4f5c\u8005\u7ecf\u6d4e\u53ef\u80fd\u5305\u62ec\u5168\u74035000-6000\u4e07\u201c\u6709\u62b1\u8d1f\u201d\u7684\u5185\u5bb9\u521b\u4f5c\u8005\u3002\u6211&#39\uff1b\u6211\u5c06\u8fd9\u4e9b\u7c97\u7565\u7684\u6570\u5b57\u57fa\u4e8e\u968f\u673a\u62bd\u6837\u7684\u5173\u6ce8\u8005\u8ba1\u6570\u3001\u53d1\u5e03\u9891\u7387\uff0c\u5e76\u5c06\u4e24\u8005\u4e0e\u5404\u5927\u5e73\u53f0\u8d26\u6237\u7684\u4f30\u8ba1\u6536\u5165\u76f8\u5173\u8054\u3002\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u4eba\u901a\u8fc7\u53d1\u5e03\u5e38\u89c4\u5185\u5bb9\u81f3\u5c11\u80fd\u8d5a\u5230\u4e00\u4e9b\u94b1\u3002\u4ed6\u4eec\u5305\u62ec\u666e\u901a\u7684\u6709\u5f71\u54cd\u529b\u7684\u4eba\u3001\u6709\u5f71\u54cd\u529b\u7684\u4eba\u3001\u6709\u6d3b\u529b\u7684\u4eba\u3001\u6e38\u620f\u73a9\u5bb6\u3001\u827a\u672f\u5bb6\u3001\u8868\u6f14\u8005\u3001\u97f3\u4e50\u5236\u4f5c\u4eba\u3001DJ\uff0c\u4ee5\u53ca\u6240\u6709\u521b\u610f\u9886\u57df\u7684\u7cbe\u795e\u53d8\u6001\u7684\u4e50\u624b\u3002\u5728\u8fd95000-6000\u4e07\u201c\u6709\u62b1\u8d1f\u201d\u7684\u521b\u4f5c\u8005\u4e2d\uff0c\u6709&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u7531\u5927\u7ea6100\u4e07\u540d\u201c\u4e13\u4e1a\u4eba\u58eb\u201d\u7ec4\u6210\u7684\u8d2b\u7620\u9636\u5c42\u2014\u2014\u4ed6\u4eec\u8bbe\u6cd5\u4ece\u793e\u4ea4\u5e73\u53f0\u6324\u51fa\u81f3\u5c11\u6700\u4f4e\u5de5\u8d44\u3002\n\u6211&#39\uff1b\u6211\u4e5f\u662f\u4e00\u4e2a\u201c\u521b\u9020\u8005\u201d\u3002\u6211\u6bcf\u5929\u90fd\u521b\u4f5c\u97f3\u4e50\uff0c\u5e76\u4e14\u5df2\u7ecf\u505a\u4e86\u5927\u534a\u8f88\u5b50\u4e86\u3002\u6211\u8ba4\u771f\u8003\u8651\u521b\u4f5c\u8005\u7684\u5229\u76ca\u3002\u8ffd\u6c42\u81ea\u5df1\u7684\u521b\u4f5c\u9053\u8def\u548c\u6210\u4e3a\u68cb\u5b50\u662f\u6709\u533a\u522b\u7684\u3002\u867d\u7136\u6211\u8ba4\u4e3a\u4e00\u4e2a\u666e\u901a\u521b\u9020\u8005\u7684\u5174\u8da3\u4e3b\u8981\u4e0d\u662f\u7ecf\u6d4e\u4e0a\u7684\uff0c\u4f46\u4e86\u89e3\u8fd9\u79cd\u533a\u522b\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5b83&#39\uff1b\u8fd9\u548c&#39\uff1b\u5b83\u88ab\u544a\u77e5\u5e76\u88ab\u51fa\u552e\u2014\u2014\u800c\u4e0d\u662f\u5728\u8d85\u8fc750%\u7684\u751f\u4ea7\u5e74\u9f84\u5e74\u8f7b\u4eba\u5e0c\u671b&#34\uff1b\u521b\u5efa\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9&#34\uff1b\u4f5c\u4e3a\u4ed6\u4eec\u7684\u751f\u8ba1\u3002Twitch\u7684\u6570\u636e\u8868\u660e\u2014\u2014\u8bc1\u660e\u2014\u2014\u5728\u5b8f\u89c2\u5c42\u9762\u4e0a\uff0c\u8fd9\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u3002\n\u521b\u610f\u4eba\u5458\u5c06\u81ea\u5df1\u7684\u624b\u827a\u585e\u8fdb\u5e73\u53f0\u5b9a\u4e49\u7684\u884c\u4e3a\u9884\u8bbe\u4e2d\u6240\u4ea7\u751f\u7684\u96c6\u4f53\u673a\u4f1a\u6210\u672c\u662f\u75af\u72c2\u7684\u3002\u6570\u5341\u4ebf\u5c0f\u65f6\u52aa\u529b\u7684\u771f\u6b63\u53d7\u76ca\u8005\u662f\u4e00\u4e2a\u53ef\u9884\u6d4b\u7684\u5265\u524a\u5f27\u7ebf\u2014\u2014\u4ea4\u6613\u65e9\u671f\u7684\u4eba\u60c5\u548c\u4eba\u4e3a\u7684\u5956\u52b1\u6765\u5438\u5f15\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u4e2a\u5e73\u53f0\u51fa\u73b0\u4e4b\u524d\u5bf9\u8868\u6f14\u8005\u65bd\u52a0\u66f4\u5927\u7684\u538b\u529b\u3002\n\u4eba\u4eec\u603b\u662f\u628a\u5927\u91cf\u7684\u9752\u6625\u6295\u5165\u5230\u8ffd\u6c42\u6b7b\u80e1\u540c\u7684\u804c\u4e1a\u9009\u62e9\u4e0a\u3002\u4f46\u6211\u4eec\u6709\u7406\u7531\u8fd9\u6837\u505a\uff0c\u5e76\u5c06\u6211\u4eec\u7684\u521b\u9020\u529b\u5f15\u5411\u66f4\u597d\u7684\u76ee\u6807\u3002\u6211\u4eec\u9700\u8981\u521b\u9020\u66f4\u591a\u6211\u4eec\u81ea\u5df1\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u73a9\u66f4\u591a\u6211\u4eec\u81ea\u5df1\u7684\u6e38\u620f\u3002\u53ea\u6709\u5230\u90a3\u65f6\uff0c\u7528\u6211\u4eec\u8fd9\u4f4d\u5782\u5934\u4e27\u6c14\u7684\u670b\u53cb\u7684\u8bdd\u8bf4\uff0c\u201c[\u2026]\u4eba\u4eec\u624d\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u8ba9\u4e92\u8054\u7f51\u518d\u6b21\u53d8\u5f97\u6709\u7528\u201d\u3002", "note_en": "It&#39;s rare that we get an opportunity to see real, hard numbers on how much money ends up in the pockets of those who create content online. The Great Twitch Leak of 2021 provided the perfect missed opportunity. On October 6, an anonymous hacker posted a 125GB torrent link on 4chan containing payout reports and source code. Later that day, Twitch confirmed the authenticity of the leak and blamed it on a \u201cserver configuration change\u201d. The incident got picked up by the news cycle almost immediately. There was preliminary analysis, a trickle of bite-sized facts and outrage about the payout rankings of superstar streamers. As usual, none of the articles went deep enough. The chatter breezed on and the topic of creators\u2019 incomes \u2014 again \u2014 did not prove sticky. To me, it seemed that we collectively missed the forest for the trees\n  An official Euro-american minimum wage works out to an annual figure of 15,000 US Dollars, or 13,000 Euro. This number is unrealistic and insufficient to make it through a year in most advanced economies of the globe. Nevertheless, it serves as a useful proxy to calculate a bare minimum threshold of vocational viability. On top of it, creators might be subsidized by patrons, sponsorships and related deals that occur outside of platforms.\n   What follows is our own, firsthand analysis, carried out by me and with technical support from fellow DNR member Sam Shaftoe. In January 2021, Twitch boasted a base of 9.89 million creator accounts, or active streamers. Collectively, they were producing close to a billion hours of annual content. Yet as of September, only about 11.600 Twitch streamers were on track to earn the minimum wage in 2021. Percent-wise we\u2019re talking about the 0.117% of active streamers. If that didn\u2019t sound ominous enough, the total earnings included at least ten million dollars worth of stolen credit cards used by money laundering rings.\n  As most exploitative social platforms do, Amazon-owned Twitch has invested incredible resources into bellowsing growth. To build their fantasy castle\u2019s moat, Twitch would bribe select, established artists at $250/hour (about 35x of said minimum wage) in additional incentives on top of tips, subs and ads in exchange for streaming regularly on the platform. In other words, they got paid for LARPing a successful streaming career. These siren-song tactics work, as the well-publicized 2019 survey commissioned by LEGO revealed that being a youtuber, influencer or streamer is now the most-desired job among middle-school kids. With enough effort, clout follows. Seeing that there seems to be no correlation between broad social media following and streaming earnings, platforms like Twitch effectively require adopting livestreaming as a lifestyle to enter the playing field. Conventional wisdom recommends that you stream &#34;between 3-5 days a week&#34;, amounting to the commensurate effort of a part time job in hopes of progressing toward a sustainable career on the platform. This internet dream has been sold to aspiring creators, their followers and advertisers alike.\n  When considering a lifetime of creativity, it\u2019s worth taking a step back along the way and reflecting on whose mountain you\u2019re climbing. Numbers aside, I hope I convinced you to mentally categorize the average hard-working streamer\u2019s career hopes accurately \u2014 well into the lottery ticket territory. The problems are systemic and inherent. In this model, even a 10x increase in payouts would not broaden the base significantly. Despite the barrage of advice about creating content from creators who only create content about creating content, the so-called \u201ccreator economy\u201d remains a nebulous concept shrouded in the vape-pen haze of advertising industry grunts.\n  Who are these \u201ccreators\u201d, exactly? According to my own research estimates, the creator economy could encompass 50-60 million \u201caspiring\u201d content creators worldwide. I&#39;m basing these broad-brush numbers on random-sampling follower counts, posting frequency and correlating both to estimated incomes for accounts across major platforms. These are people who earn at least some amount of money from posting regular content in the broadest sense. They include plain influencers, clout chasers, van-lifers, gamers, artists, performers, music producers, DJs, and psychopathic LARPers of all creative fields. Out of these 50-60 million \u201caspiring\u201d creators, there&#39;s a hair-thin strata of around 1 million \u201cprofessionals\u201d -those who manage to squeeze out at least that minimum wage from social platforms.\n  I&#39;m also a \u201ccreator\u201d. I create music every day and have been doing that for well over half of my life. I take the interest of creators earnestly. There\u2019s a difference between pursuing your own creative path and being a pawn. And while I\u2019d argue that an average creator\u2019s interests are not primarily financial, knowing the distinction is crucial. It&#39;s not the same story that&#39;s being told and sold \u2014 not when over 50% of young productive-age people are hoping to &#34;create social media content&#34; as their livelihood. The Twitch data shows - proves - that on macro level, this is never going to happen.\n  The collective opportunity costs incurred by creatives shoehorning their craft into presets of platform-defined behaviors are insane. The true beneficiaries of billions of hours of effort are flying a predictable arc of exploitation - trading early favors and artificial payout boosts to attract, then squeezing the performers harder down the line until the next platform comes around.\n  People have always invested incredible amounts of their youth into pursuing dead-end career choices. But we deserve to do so for the right reasons and to channel our creativity towards better goals. We need to create more of our own infrastructure, and play more of our own games. Only then, in the words of our fishpilled friend, \u201c[\u2026] people will find a way to make the internet useful again\u201d.", "posttime": "2022-02-17 15:06:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ecf\u6d4e\u5b66,twitch,bullshit,\u5e73\u53f0", "title": "Twitch\u521b\u9020\u8005\u53ef\u6015\u7684\u80e1\u8bf4\u516b\u9053\u7ecf\u6d4e\u5b66", "title_en": "The Dire, Bullshit Economics of Twitch Creators", "transed": 1, "url": "https://donotresearch.net/posts/the-dire-bullshit-economics-of-twitch-creators/", "via": "", "real_tags": ["\u7ecf\u6d4e\u5b66", "twitch", "bullshit", "\u5e73\u53f0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073852, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e09\u5e74\u91cc\uff0c\u6211\u628a\u4e00\u534a\u7684\u5de5\u4f5c\u65f6\u95f4\u82b1\u5728\u548c\u5e73\u53f7\u9879\u76ee\u4e0a\u3002\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8f7b\u91cf\u7ea7\u5373\u65f6\uff08JIT\uff09\u7f16\u8bd1\u5668\uff0c\u4ee5\u53ca\u8be5\u9879\u76ee&#39\uff1bs\u57fa\u77f3\u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e\u673a\u5668\u7684\u4e2d\u7ea7\u4e2d\u95f4\u8868\u793a\uff08MIR\uff09\u3002\u6709\u5173\u8be5\u9879\u76ee\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6211\u4e4b\u524d\u5173\u4e8eRed Hat Developer\u7684\u6587\u7ae0\uff1a\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5728MIR\u9879\u76ee\u4e0a\u7684\u5de5\u4f5c\u91cd\u70b9\u662f\u5236\u4f5c\u4e00\u4e2a\u5feb\u901f\u7684JIT\u7f16\u8bd1\u5668\uff0c\u4e3a\u51e0\u4e2a\u4e3b\u8981\u76ee\u6807\u751f\u6210\u5408\u9002\u7684\u673a\u5668\u4ee3\u7801\uff1ax86-64 Linux\u548cmacOS\u3001AARC64\u3001s390x\u3001riscv64 Linux\u548cppc64 big-and little-endian Linux\u3002\n\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u9879\u76ee\u662f\u4e00\u4e2a\u65b9\u6cd5JIT\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u7528\u4e8e\u9759\u6001\u7c7b\u578b\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982C\uff0c\u8fd9\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u3002\u6211\u4eec&#39\uff1b\u6211\u5f00\u53d1\u4e86\u4e00\u4e2a\u57fa\u4e8eC-to-MIR\u7f16\u8bd1\u5668\u7684C\u8bed\u8a00JIT\u3002\nMIR\u9879\u76ee\u7684\u6700\u521d\u76ee\u6807\u662f\u5b9e\u73b0\u66f4\u597d\u7684Ruby JIT\u7f16\u8bd1\u5668\u3002\uff08\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u5173\u6ce8\u7684\u662fCRuby\uff0c\u9ed8\u8ba4\u7684Ruby\u89e3\u91ca\u5668\uff0c\u5b83\u662f\u7528C\u7f16\u5199\u7684\u3002\uff09Ruby\u662f\u4e00\u79cd\u975e\u5e38\u52a8\u6001\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u975e\u5e38\u7075\u6d3b\uff0c\u751a\u81f3\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u6574\u6570\u7684\u52a0\u53f7\u65b9\u6cd5\u3002\n\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u6027\u80fd\uff0c\u60a8\u9700\u8981\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\uff0c\u4ece\u6267\u884c\u4e2d\u505a\u51fa\u5404\u79cd\u5047\u8bbe\uff0c\u5e76\u6839\u636e\u8fd9\u4e9b\u5047\u8bbe\u751f\u6210\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u7ed9\u5b9a\u65b9\u6cd5\u4e2d\u7684\u7ed9\u5b9a\u52a0\u53f7\u8fd0\u7b97\u53ea\u6709\u6574\u6570\u64cd\u4f5c\u6570\u3002\u60a8\u53ef\u4ee5\u5047\u8bbe\u60c5\u51b5\u59cb\u7ec8\u5982\u6b64\uff0c\u5e76\u751f\u6210\u4ec5\u9002\u7528\u4e8e\u6574\u6570\u64cd\u4f5c\u6570\u7684\u4e13\u7528\u52a0\u53f7\u8fd0\u7b97\u4ee3\u7801\u3002\n\u4f60\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\u6765\u4fdd\u8bc1\u4f60\u7684\u5047\u8bbe\u6210\u7acb\uff0c\u6bd4\u5982\u5b9e\u65bd\u5047\u8bbe\u68c0\u67e5\u6216\u4fdd\u62a4\uff0c\u6216\u8005\u8bc1\u660e\u5728\u7ed9\u5b9a\u7684\u6267\u884c\u8def\u5f84\u4e0a\uff0c\u5047\u8bbe\u603b\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u8b66\u536b\u53d1\u73b0\u8fd9\u4e2a\u5047\u8bbe\u662f\u9519\u8bef\u7684\uff0c\u4f60\u9700\u8981\u5207\u6362\u5230\u9002\u7528\u4e8e\u4efb\u4f55\u60c5\u51b5\u7684\u4ee3\u7801\u3002\u5728JIT\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4ece\u4e13\u7528\u4ee3\u7801\u5207\u6362\u5230\u901a\u7528\u6848\u4f8b\u4ee3\u7801\u7684\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e3a\u53bb\u4f18\u5316\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211&#39\uff1b\u6211\u5c06\u8ba8\u8bba\u6211\u8ba1\u5212\u5982\u4f55\u652f\u6301\u5728MIR\u4e2d\u751f\u6210\u4e13\u95e8\u7684\u3001\u975e\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u5728MIR\u9879\u76ee\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u54ea\u4e9b\u652f\u6301\u3002\n\u6ce8\uff1a\u5927\u591a\u6570JIT\u4e13\u95e8\u9488\u5bf9\u7279\u5b9a\u8bed\u8a00\uff1a\u6709&#39\uff1b\u4f8b\u5982\uff0cs V8\u4ee3\u8868JavaScript\uff0cluajit\u4ee3\u8868Lua\uff0cPHP\u4ee3\u8868PHP\u7684PHP JIT\u3002\u6211\u66f4\u611f\u5174\u8da3\u7684\u662f\u8bed\u8a00\u65e0\u5173\u6027\u652f\u6301\uff0c\u4ee5\u4fc3\u8fdb\u4e0d\u540c\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u5728JIT\u4e2d\u5b9e\u73b0\u4e13\u95e8\u5316\u548c\u53bb\u4f18\u5316\u3002\uff08\u6709\u5173JIT\u7f16\u8bd1\u5668\u4e2d\u53bb\u4f18\u5316\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605JIT\u7f16\u8bd1\u5668\u5982\u4f55\u5728OpenJDK\u4e2d\u63d0\u9ad8Java\u6027\u80fd\u3002\uff09\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u80fd\u591f\u5177\u4f53\u4e86\u89e3MIR\u7f16\u8bd1\u5668\u4e2d\u7684\u4e13\u95e8\u5316\u548c\u53bb\u4f18\u5316\uff0c\u6211\u5c06\u5728CRuby\u5b9e\u73b0\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u865a\u62df\u673a\uff08VM\uff09\u6307\u4ee4plus\u7684\u7b80\u5316\u4ee3\u7801\uff1a\n\u5982\u679c\uff08\u56fa\u5b9a\u8d44\u4ea7\uff09&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cINTEGER_refined_OP_FLAG\uff09\uff09{res=rb_fix_PLUS_fix\uff08recv\uff0cobj\uff09\uff1b}\u5426\u5219\uff0c\u5982\u679c\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09&amp&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cFLOAT_refined_OP_FLAG\uff09\uff09{res=db2num\uff08RFLOAT_\u503c\uff08recv\uff09+RFLOAT_\u503c\uff08obj\uff09\uff09}\u5426\u5219\u5982\u679c\uff08\u7279\u6b8a\u5e38\u6570P\uff08recv\uff09| |\u7279\u6b8a\u5e38\u6570P\uff08obj\uff09\uff09{\u2026}\u5426\u5219\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cFloat&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cFloat&amp&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cFLOAT_refined_OP_FLAG\uff09\uff09{\u2026}\u5426\u5219\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cString&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cString&amp&amp\uff1b\u57fa\u672c_OP_undefined_P\uff08BOP_PLUS\uff0cSTRING_refined_OP_FLAG\uff09\uff09{\u2026}\u5426\u5219\uff0c\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cArray&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cArray&amp&amp\uff1b\u57fa\u672c_OP_undefined_P\uff08BOP_PLUS\uff0c\u6570\u7ec4_refined_OP_FLAG\uff09\uff09{\u2026}else{..//object recv\u5b9e\u73b0+\u7684\u65b9\u6cd5\u8c03\u7528}\n\u90a3\u4e48\uff0c\u4ec0\u4e48&#39\uff1b\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\uff1f\u9996\u5148\uff0c\u4ee3\u7801\u68c0\u67e5\u64cd\u4f5c\u6570\u662f\u5426\u4e3a\u56fa\u5b9a\u6570\uff0c\u6574\u6570\u7684\u52a0\u53f7\u65b9\u6cd5\u662f\u5426\u672a\u91cd\u65b0\u5b9a\u4e49\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ee3\u7801\u5c06\u5bf9\u56fa\u5b9a\u6570\u5b57\u6267\u884c\u52a0\u53f7\u64cd\u4f5c\u3002\u5426\u5219\uff0c\u5b83\u4f1a\u5bf9\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u548c\u6570\u7ec4\u8fdb\u884c\u7c7b\u4f3c\u7684\u68c0\u67e5\u3002\u6700\u540e\uff0c\u5b83\u4e3a\u5bf9\u8c61recv\u8c03\u7528Ruby\u65b9\u6cd5implementing+\u3002\nCRuby\u4e2d\u7684Fixed numbers\uff08\u6216FixNum\uff09\u662f\u76ee\u6807\u673a\u5668\u53ef\u4ee5\u6709\u6548\u652f\u6301\u7684\u6574\u6570\u5b50\u96c6\u3002\u8f83\u5927\u7684\u6570\u5b57\u8868\u793a\u4e3aGMP\u5e93\u5b9e\u73b0\u7684\u591a\u7cbe\u5ea6\u6570\u5b57\u3002\nCRuby\u4e2d\u7684\u6240\u6709\u503c\u90fd\u7531\u4e00\u4e2a\u673a\u5668\u5b57\u8868\u793a\u5e76\u6807\u8bb0\u3002\u4f8b\u5982\uff0cfixnum\u603b\u662f\u67091\u4f5c\u4e3a\u5355\u8bcd\u7684\u6700\u4f4e\u6709\u6548\u4f4d\uff0c\u800c\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u603b\u662f\u6709\u4e09\u4e2a\uff08\u6216\u4e24\u4e2a\uff0c\u572832\u4f4d\u76ee\u6807\u4e0a\uff09\u96f6\u6700\u4f4e\u6709\u6548\u4f4d\u3002\u56e0\u6b64\uff0c\u5b8fFIXNUM_2_P\u7684\u5b9e\u73b0\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a\n\u5982\u679c\u7701\u7565\u68c0\u67e5\u6ea2\u51fa\u7684\u4ee3\u7801\uff0cfixnum plus\u64cd\u4f5c\u5982\u4e0b\u6240\u793a\uff1a\n\u6ce8\u610f\uff1a\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7b80\u5316\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u5c06\u5ffd\u7565\u5bf9plus\u64cd\u4f5c\u91cd\u65b0\u5b9a\u4e49\u7684\u68c0\u67e5\uff0c\u4f8b\u5982\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u8c03\u7528\u5b8fBASIC_OP_undefined_P\u3002\n\u5047\u8bbe\u6211\u4eec&#39\uff1b\u6211\u68c0\u67e5\u4e86\u4e00\u4e2a\u7279\u5b9a\u52a0\u53f7\u8fd0\u7b97\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\uff0c\u53d1\u73b0\u5b83\u4eec\u4e00\u76f4\u90fd\u662f\u56fa\u5b9a\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u4e4d\u4e00\u770b\uff0c\u6211\u4eec\u4f3c\u4e4e\u6ca1\u6709&#39\uff1bt\u6539\u8fdb\u4ee3\u7801\uff0c\u56e0\u4e3a\u68c0\u67e5\uff08FIXNUM_2_P\uff09\u4ecd\u7136\u5b58\u5728\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u770b\u4e00\u7cfb\u5217\u7684\u52a0\u53f7\u8fd0\u7b97\uff0cv1+v2+v3+v4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\uff1a\n\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08v1\uff0cv2\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08v1\uff0cv2\uff09\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08res\uff0cv3\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08res\uff0cv3\uff09\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08res\uff0cv4\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08res\uff0cv4\uff09\n\u667a\u80fd\u7f16\u8bd1\u5668\u53ef\u4ee5\u5220\u9664\u6700\u540e\u4e24\u4e2aFIXNUM_2_P\u68c0\u67e5\u3002\u4e0d\u5e78\u7684\u662f\uff0cGCC\u548cClang\u90fd\u4e0d\u80fd\u786e\u5b9ares\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u603b\u662f1\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u5e94\u8be5\u5220\u9664\u6700\u540e\u4e24\u4e2aFIXNUM_2_P\u68c0\u67e5\u3002GCC\u548c#39\uff1b\u968f\u7740Ranger\u9879\u76ee\u7684\u5168\u9762\u5b9e\u65bd\uff0c\u672a\u6765\u7684\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5982\u679c\u503c\u662f\u7531\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6210\u5458\uff08type\u548cvalue\uff09\u7684\u7ed3\u6784\u8868\u793a\u7684\uff0c\u90a3\u4e48GCC/LLVM\u73b0\u5728\u751a\u81f3\u53ef\u4ee5\u627e\u51fa\u5b83\u4eec\u7684\u7c7b\u578b\u5e76\u5220\u9664\u6700\u540e\u4e24\u4e2a\u68c0\u67e5\u3002\uff09\n\u5373\u4f7f\u4e0d\u5220\u9664\u5197\u4f59\u68c0\u67e5\uff0c\u6267\u884c\u8fd9\u79cd\u4e13\u7528\u4ee3\u7801\u4e5f\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u6210\u529f\u5730\u8fdb\u884c\u5176\u4ed6\u4f18\u5316\uff0c\u4f8b\u5982\u5220\u9664\u5197\u4f59\u52a0\u8f7d\u548c\u5b58\u50a8\u3002\u90a3&#39\uff1b\u56e0\u4e3a\u8fd9\u6837\u7684\u4ee3\u7801\u5f62\u6210\u4e86\u79f0\u4e3a\u6269\u5c55\u57fa\u672c\u5757\uff08EBB\uff09\u7684\u7279\u5b9a\u533a\u57df\uff0c\u800c\u4f18\u5316\u7f16\u8bd1\u5668\u5728\u8fd9\u6837\u7684\u533a\u57df\u4e0a\u5de5\u4f5c\u5f97\u7279\u522b\u597d\u3002\u8fd9\u6837\u7684\u4ee3\u7801\u8fd8\u5177\u6709\u66f4\u597d\u7684\u4ee3\u7801\u5c40\u90e8\u6027\u548c\u5206\u652f\u9884\u6d4b\u3002\n\u5728\u56fa\u5b9a\u6570\u5b57\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u7531general_case\u6807\u8bb0\u7684\u4ee3\u7801\uff1f\u6709\u4e09\u79cd\u53ef\u80fd\u6027\uff1a\nJIT\u7f16\u8bd1\u5668\u8c03\u7528\uff0c\u5220\u9664\u4e3aRuby\u65b9\u6cd5\u751f\u6210\u7684\u4e13\u7528\u4ee3\u7801\uff0c\u7136\u540e\u4e3a\u65b9\u6cd5VM\u6307\u4ee4\u751f\u6210\u5e76\u4f7f\u7528\u901a\u7528\u4ee3\u7801\u3002\n\u8f6c\u5230\u4e00\u4e2a\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u5305\u542b\u65b9\u6cd5VM\u6307\u4ee4\u7684\u6240\u6709\u7c7b\u578b\u6848\u4f8b\u7684\u6240\u6709\u4ee3\u7801\u3002\n\u7531\u4e8e\u5207\u6362\u5230CRuby\u4e2d\u7684\u89e3\u91ca\u5668\u975e\u5e38\u6602\u8d35\uff0c\u56e0\u6b64\u6700\u597d\u5728\u751f\u6210\u4e13\u7528\u4ee3\u7801\u7684\u540c\u65f6\u751f\u6210\u901a\u7528\u6848\u4f8b\u4ee3\u7801\uff0c\u4ee5\u53ca\u5728\u8b66\u536b\u5931\u8d25\u65f6\u4ece\u4e13\u7528\u4ee3\u7801\u8f6c\u5230\u901a\u7528\u4ee3\u7801\u3002\u5728\u5bf9\u4e00\u822c\u6848\u4f8b\u4ee3\u7801\u6267\u884c\u4e86\u51e0\u6b21gotos\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f53\u524d\u6982\u8981\u4fe1\u606f\u91cd\u5efa\u6574\u4e2a\u65b9\u6cd5\u3002\nMIR-JIT\u7f16\u8bd1\u5668\u5e76\u4e0d\u6bd4GCC\u6216Clang\u66f4\u806a\u660e\uff0c\u5b83\u9047\u5230\u4e86\u76f8\u540c\u7684\u95ee\u9898\uff0c\u5373\u5220\u9664\u5bf9\u6807\u8bb0\u503c\u7684\u5197\u4f59\u68c0\u67e5\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u8ba1\u5212\u5f15\u5165\u7a0b\u5e8f\u53d8\u91cf\u548cMIR\u6307\u4ee4\u7684\u5c5e\u6027\uff0c\u4ee5\u53ca\u4f7f\u7528\u5c5e\u6027\u7684\u5185\u7f6eC\u51fd\u6570\uff1a\n\u6ce8\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0cI&#39\uff1b\u6211\u5c06\u8df3\u8fc7\u5bf9MIR\u7ea7\u522b\u7684\u8d22\u4ea7\u652f\u6301\u7684\u63cf\u8ff0\u3002\n\u5c5e\u6027\u662f\u6574\u6570\u5e38\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528_builtin_prop_set\u5728\u7ed9\u5b9a\u7684\u6267\u884c\u70b9\u4e3a\u7a0b\u5e8f\u53d8\u91cf\u5206\u914d\u5c5e\u6027\u3002\u5c5e\u6027\u901a\u8fc7\u53d8\u91cf\u8d4b\u503c\u4f20\u64ad\u5230\u5176\u4ed6\u7a0b\u5e8f\u53d8\u91cf\u3002\n\u5f53\u6211\u4eec\u65e0\u6cd5\u8ba1\u7b97\u7a0b\u5e8f\u53d8\u91cf\u5728\u7ed9\u5b9a\u6267\u884c\u70b9\u7684\u5c5e\u6027\u65f6\uff0c\u8be5\u53d8\u91cf\u5728\u8be5\u70b9\u7684\u5c5e\u6027\u4e3a\u96f6\u3002\u96f6\u5c5e\u6027\u662f\u672a\u77e5\u5c5e\u6027\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u63cf\u8ff0\u7a0b\u5e8f\u53d8\u91cf\u7c7b\u578b\u7684\u5c5e\u6027\u7684\u65b0\u5185\u7f6e\u8c03\u7528\u6765\u6ce8\u91caplus\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u679a\u4e3e\u5c5e\u6027{unknown=0\uff0cinttype\uff0cflotype\uff0c\u2026}\uff1b\u5982\u679c\uff08uuu builtin_prop_cond\uff08FIXNUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cintype\uff0cobj\uff0cintype\uff09\uff09{res=rb_fix_plus_fix\uff08recv\uff0cobj\uff09\uff1buuu builtin_prop_set\uff08res\uff0cintype\uff09}\u5982\u679c\uff08uuuuu builtin_prop cond_cond\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cflotype\uff0cobj\uff0cflotype\uff09\uff09res=db2num__\u5185\u7f6e\u9053\u5177\u5957\u88c5\uff08res\uff0cflotype\uff09\uff1b]else{\u2026//\u4e3a\u5bf9\u8c61recv\u5b9e\u73b0\u7684\u65b9\u6cd5+\u8c03\u7528}\n\u5982\u679c\uff08recv.prop==inttype&amp\uff1bobj.prop==inttype | | |\uff08recv.prop==unknown&amp\uff1bobj.prop==unknown\uff09&amp&amp\uff1bFIXNUM_2_P\uff08recv\uff0cobj\uff09\uff09{res=rb_fix\\u plus_fix\uff08recv\uff0cobj\uff09\uff1bres.prop=intype\uff1b}\u5426\u5219\u5982\u679c\uff08_\u5185\u7f6e_\u5c5e\u6027\u6761\u4ef6\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cflotype\uff0cobj\uff0cflotype\uff09\uff09res=db2num\uff08RFLOAT_\u503c\uff08recv\uff09+RFLOAT_\u503c\uff08obj\uff09\uff09__\u5185\u7f6e\u9053\u5177\u5957\u88c5\uff08res\uff0cflotype\uff09\uff1b]else{\u2026//\u4e3a\u5bf9\u8c61recv\u5b9e\u73b0\u7684\u65b9\u6cd5+\u8c03\u7528}\n\u56e0\u4e3a\u6211\u4eec\u5728\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u4e2d\u603b\u662f\u77e5\u9053\u5c5e\u6027\uff0c\u6240\u4ee5\u6240\u6709\u5c5e\u6027\u7684\u8d4b\u503c\u548c\u6bd4\u8f83\u90fd\u4f1a\u5728\u6700\u7ec8\u4ee3\u7801\u4e2d\u6d88\u5931\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0recv\u548cobj\u90fd\u5177\u6709inttype\u5c5e\u6027\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u4ee3\u7801\u5c06\u662f\uff1a\n\u5982\u679c\u6211\u4eec\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u53d1\u73b0recv\u548cobj\u90fd\u5177\u6709\u5c5e\u6027flotype\uff0c\u5219\u6700\u7ec8\u4ee3\u7801\u5c06\u4e3a\uff1a\n\u5982\u679crecv\u548cobj\u7684\u503c\u7684\u5c5e\u6027\u4e3a\u96f6\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u4e0e\u6ce8\u91ca\u4e4b\u524d\u76f8\u540c\u7684\u539f\u59cb\u4ee3\u7801\u3002\u5982\u679crecv\u6216obj\u53ea\u6709\u4e00\u4e2a\u5c5e\u6027\u4e3a\u96f6\uff0c\u90a3\u4e48\u5728\u6700\u540e\u7684else\u90e8\u5206\u4e2d\u53ea\u6709\u4ee3\u7801\u3002\n\u8003\u8651\u4e0a\u9762\u8ba8\u8bba\u7684\u5206\u6790\u4e4b\u540e\u7684\u4ee3\u7801\u3002\u5206\u6790\u540e\uff0c\u7528\u5c5e\u6027\u6ce8\u91ca\u7684\u7c7b\u4f3c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\uff08\uff01uuuu\u5185\u7f6e\u5c5e\u6027\u6761\u4ef6\uff08FIXNUM_u2_up\uff08v1\uff0cv2\uff09\uff0cv1\uff0cintype\uff0cv2\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08v1\uff0cv2\uff09__\u5185\u7f6e\u9053\u5177\uff08res\u3001inttype\uff09\uff1b\u5982\u679c\uff08\uff01__\u5185\u7f6e_prop_cond\uff08FIXNUM_2_P\uff08res\uff0cv3\uff09\uff0cres\uff0cintype\uff0cv3\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08res\uff0cv3\uff09__\u5185\u7f6e\u9053\u5177\uff08res\u3001inttype\uff09\uff1b\u5982\u679c\uff08\uff01__\u5185\u7f6e_prop_cond\uff08FIXNUM_2_P\uff08res\uff0cv4\uff09\uff0cres\uff0cintype\uff0cv4\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08res\uff0cv4\uff09__\u5185\u7f6e\u5c5e\u6027\u96c6\uff08res\uff0cinttype\uff09\uff1b\u3002\u3002\u3002\n\u73b0\u5728\u5f88\u5bb9\u6613\u627e\u5230\u5e76\u4f20\u64ad\u4e0a\u9762\u6269\u5c55\u7684\u57fa\u672c\u5757\u7684\u7a0b\u5e8f\u53d8\u91cf\u5c5e\u6027\u3002\u5bf9\u4e8eMIR\u5bc4\u5b58\u5668\u4e2d\u7684\u53d8\u91cf\uff0c\u5c5e\u6027\u5206\u6790\u5f88\u7b80\u5355\uff0c\u800c\u5bf9\u4e8e\u7531MIR\u5185\u5b58\u64cd\u4f5c\u6570\u8868\u793a\u7684\u53d8\u91cf\uff0c\u5219\u9700\u8981\u66f4\u590d\u6742\u7684\u5206\u6790\u70b9\u3002\n\u6ce8\u610f\uff1a\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u7701\u7565\u4e86\u5982\u4f55\u8fdb\u884c\u5206\u6790\u7684\u63cf\u8ff0\uff0c\u5c24\u5176\u662f\u5f53\u4ee3\u7801\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u65f6\u3002\n\u5982\u679c\u5728\u6211\u4eec\u524d\u9762\u770b\u5230\u7684Ruby\u4ee3\u7801v1+v2+v3+v4\u4e2d\uff0c\u4e00\u534a\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u53d8\u91cf\u90fd\u6709fixnum\u503c\uff0c\u53e6\u4e00\u534a\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u53d8\u91cf\u90fd\u6709\u6d6e\u70b9\u6570\u503c\uff0c\u90a3\u4e48\u57fa\u4e8e\u5206\u6790\u7684\u4e13\u95e8\u5316\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8fd9\u662f\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u4e2d\u591a\u6001\u51fd\u6570\u7684\u5e38\u89c1\u60c5\u51b5\u3002\n\u6211\u4eec\u53ea\u80fd\u4e3a\u5176\u4e2d\u4e00\u534a\u7684\u6848\u4f8b\u751f\u6210\u4e13\u95e8\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u53e6\u4e00\u534a\u7684\u6848\u4f8b\u53d1\u751f\u65f6\u8fdb\u884c\u53bb\u4f18\u5316\u3002\u6216\u8005\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u751f\u6210\u5e76\u4f7f\u7528\u4e00\u822c\u6848\u4f8b\u4ee3\u7801\u3002\u5982\u679c\u5bf9\u67d0\u4e2a\u5c0f\u51fd\u6570\u7684\u7279\u5b9a\u8c03\u7528\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5177\u6709\u7279\u5b9a\u7684\u7c7b\u578b\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee3\u7801\u5185\u8054\u6765\u6539\u8fdb\u751f\u6210\u7684\u4ee3\u7801\u3002\u90a3&#39\uff1b\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\uff08BBV\uff09\u3002\n\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u5047\u8bbe\u6211\u4eec\u6709\u4e0d\u540c\u7684\u8def\u5f84\u6765\u5230\u8fbe\u4ee3\u7801\u7684\u4e00\u4e2a\u57fa\u672c\u5757\uff08\u6bd4\u5982\u901a\u8fc7\u5bf9\u51fd\u6570\u7684\u4e0d\u540c\u8c03\u7528\uff09\uff0c\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u6709\u7279\u5b9a\u7c7b\u578b\uff08\u5c5e\u6027\uff09\u7684\u53d8\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u514b\u9686\u57fa\u672c\u5757\uff0c\u5e76\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u751f\u6210\u4e0d\u540c\u7248\u672c\u7684\u4e13\u7528\u4ee3\u7801\uff0c\u5982\u56fe1\u6240\u793a\uff08\u8bf7\u6ce8\u610f\uff0c\u57fa\u672c\u5757\u8868\u793a\u4e3aBB\uff09\u3002\n\u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7684\u57fa\u672c\u5757\u7248\u672c\u53ef\u4ee5\u63a8\u65ad\u51fa\u8f93\u51fa\u53d8\u91cf\u503c\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6211\u4eec\u793a\u4f8b\u4e2d\u7684res\u503c\u3002\u8fd9\u53cd\u8fc7\u6765\u4f1a\u5bfc\u81f4\u751f\u6210\u4e0d\u540c\u7248\u672c\u7684\u540e\u7eed\u57fa\u672c\u5757\u3002\n\u5982\u679c\u6211\u4eec\u4e0d&#39\uff1b\u5982\u679c\u4e0d\u9650\u5236\u57fa\u672c\u5757\u7248\u672c\u7684\u6570\u91cf\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u7684\u7ec4\u5408\u7206\u70b8\u3002\u5b9e\u9645\u4e0a\uff0c\u53ea\u751f\u6210\u4e00\u4e2a\u57fa\u672c\u5757\u7684\u51e0\u4e2a\u7248\u672c\uff0c\u5176\u4e2d\u4e00\u4e2a\u57fa\u672c\u5757\u7248\u672c\u59cb\u7ec8\u7528\u4e8e\u672a\u77e5\u7c7b\u578b\uff08\u96f6\u5c5e\u6027\uff09\u3002\n\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u57fa\u672c\u5757\u7248\u672c\u3002\u5b83\u53ef\u4ee5\u7528\u6e34\u671b\u7684\u65b9\u5f0f\u6216\u61d2\u60f0\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u3002\u5728\u6e34\u671b\u7b56\u7565\u4e2d\uff0c\u5f53\u6211\u4eec\u4e3a\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u521b\u5efa\u540e\u7eed\u57fa\u672c\u5757\u7684\u7248\u672c\uff0c\u5e76\u4e3a\u5b83\u4eec\u751f\u6210\u4ee3\u7801\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u4e00\u6b21\u751f\u6210\u6574\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u3002\n\u5728\u60f0\u6027\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u53ea\u5728\u5f00\u59cb\u6267\u884c\u57fa\u672c\u5757\u7248\u672c\u65f6\u624d\u4e3a\u8be5\u7248\u672c\u751f\u6210\u4ee3\u7801\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e3a\u7a0b\u5e8f\u4e2d\u5b9e\u9645\u6267\u884c\u7684\u65b9\u6cd5\u57fa\u672c\u5757\u751f\u6210\u4ee3\u7801\u3002\u663e\u7136\uff0c\u61d2\u60f0\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4f1a\u51cf\u5c11\u751f\u6210\u7684\u4ee3\u7801\uff0c\u901a\u5e38\u4e5f\u4f1a\u51cf\u5c11\u7f16\u8bd1\u65f6\u95f4\u3002\uff08\u5982\u679c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8fd9\u4e24\u79cd\u7b56\u7565\u4e3a\u76f8\u540c\u6570\u91cf\u7684\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u4ee3\u7801\uff0c\u60f0\u6027\u4ee3\u7801\u7f16\u8bd1\u53ef\u80fd\u9700\u8981\u66f4\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5355\u72ec\u7684\u57fa\u672c\u5757\u4ee3\u7801\u751f\u6210\u90fd\u9700\u8981\u66f4\u591a\u65f6\u95f4\u8fdb\u884c\u6570\u636e\u521d\u59cb\u5316\u548c\u6700\u7ec8\u786e\u5b9a\u3002\uff09\n\u5982\u524d\u4e00\u8282\u6240\u8ff0\uff0c\u4e0e\u57fa\u4e8e\u5206\u6790\u7684\u4e13\u95e8\u4ee3\u7801\u751f\u6210\u76f8\u6bd4\uff0clazy basic\u5757\u7248\u672c\u63a7\u5236\u6709\u51e0\u4e2a\u4f18\u70b9\uff1a\n\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u9700\u8981\u4e3a\u6240\u6709BBs\u751f\u6210\u673a\u5668\u4ee3\u7801\uff0c\u5f53\u53ea\u6709JIT\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u5438\u5f15\u529b\uff1b\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u3002\n\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u9700\u8981\u7279\u522b\u5b9e\u65bd\u53bb\u4f18\u5316\u3002\u5b83\u662f\u901a\u8fc7BB\u7248\u672c\u63a7\u5236\u81ea\u52a8\u5b8c\u6210\u7684\u3002\n\u8bb8\u591a\u65b9\u6cd5JIT\u53ea\u4e3a\u6267\u884c\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u9608\u503c\u7684\u65b9\u6cd5\u751f\u6210\u4ee3\u7801\u3002\u4ec5\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5207\u6362\u6267\u884c\u3002\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u5f88\u5c11\u88ab\u8c03\u7528\uff0c\u4f46\u6709\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u5faa\u73af\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6cd5\u5c31\u4e0d\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u5207\u6362\u5230\u65b0\u7684\u65b9\u6cd5\u4ee3\u7801\u79f0\u4e3a\u5806\u6808\u66ff\u6362\uff08OSR\uff09\u3002\u61d2\u60f0\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4e0d\u9700\u8981OSR\u7684\u7279\u6b8a\u5b9e\u73b0\uff1b\u8fd9\u662f\u81ea\u52a8\u5b8c\u6210\u7684\u3002\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4f1a\u5bfc\u81f4\u4ee3\u7801\u5927\u5c0f\u6fc0\u589e\u3002\u5b9e\u9645\u4e0a\uff0c\u7248\u672c\u7684\u5e73\u5747\u6570\u91cf\u975e\u5e38\u5c11\u3002\u6839\u636eMaxime Chevalier Boisvert\u548cMarc Feely\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u5927\u7ea695%\u7684\u57fa\u672c\u5757\u5728\u4e00\u7ec4JavaScript\u57fa\u51c6\u4e0a\u53ea\u6709\u4e00\u4e2a\u7248\u672c\uff08\u53c2\u89c1\u901a\u8fc7\u5ef6\u8fdf\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u5220\u9664\u7b80\u5355\u6709\u6548\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u3002\n\u5728\u5f15\u5bfcx86-64 C-to-MIR\u7f16\u8bd1\u5668\uff08\u5927\u7ea630000\u884cC\u4ee3\u7801\uff09\u65f6\uff0c\u751f\u6210\u7684\u57fa\u672c\u5757\u7248\u672c\u4ec5\u5360\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u7684\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u6240\u6709\u57fa\u672c\u5757\u768451%\uff0829131\u4e2d\u670914737\u4e2a\uff09\uff0c\u4ec5\u5360\u7f16\u8bd1\u5668\u6240\u6709\u57fa\u672c\u5757\u768418%\uff0881799\u4e2d\u670914737\u4e2a\uff09\uff0c\u5982\u56fe2\u6240\u793a\u3002\n\u6beb\u4e0d\u5947\u602a\uff0c\u6211\u9996\u5148\u5f00\u59cb\u4e3aMIR\u9879\u76ee\u5b9e\u65bdlazy basic\u5757\u7248\u672c\u63a7\u5236\u3002\nMIR\u9879\u76ee\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1fMIR\u51fd\u6570\u7684\u6240\u6709\u8c03\u7528\u90fd\u662f\u95f4\u63a5\u7684\uff0c\u901a\u8fc7\u540d\u4e3athunks\u7684\u8fd0\u884c\u65f6\u751f\u6210\u7684\u5c0f\u4ee3\u7801\u6bb5\u5b9e\u73b0\uff0cthunks\u901a\u5e38\u7531\u4e00\u6761\u6216\u4e24\u6761\u673a\u5668\u6307\u4ee4\u7ec4\u6210\u3002Thunks\u7528\u4e8e\u8f7b\u677e\u66f4\u6539\u4efb\u4f55MIR\u529f\u80fd\u7684\u673a\u5668\u4ee3\u7801\uff1b\u4f8b\u5982\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e13\u7528\u673a\u5668\u4ee3\u7801\u8f6c\u6362\u4e3a\u975e\u4f18\u5316\u4ee3\u7801\u3002\nMIR\u5df2\u7ecf\u6709\u4e86\u4e00\u79cd\u60f0\u6027\u51fd\u6570\u4ee3\u7801\u751f\u6210\u673a\u5236\uff0c\u5b83\u4e5f\u901a\u8fc7thunks\u5b9e\u73b0\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u51fd\u6570thunk\u90fd\u91cd\u5b9a\u5411\u5230\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\u3002\u5f53\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff0cMIR\u4ee3\u7801\u751f\u6210\u5668\u4f18\u5316\u51fd\u6570\u5e76\u4e3a\u5176\u751f\u6210\u673a\u5668\u4ee3\u7801\uff1b\u7136\u540e\u5c06\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u751f\u6210\u7684\u673a\u5668\u4ee3\u7801\uff0c\u5e76\u4ece\u751f\u6210\u7684\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\uff0c\u5982\u56fe3\u6240\u793a\u3002\n\u5f53\u6211\u4eec\u4f7f\u7528\u5ef6\u8fdf\u5757\u7248\u672c\u63a7\u5236\u65f6\uff0c\u51fd\u6570thunk\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5230\u7279\u5b9a\u5730\u5740\u7684\u5207\u6362\uff0c\u8be5\u5730\u5740\u53d6\u51b3\u4e8e\u57fa\u672c\u5757\u5f00\u5934\u7684\u7a0b\u5e8f\u53d8\u91cf\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u8be5\u5f00\u5173\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u4e3a\u57fa\u4e8e\u8868\u7684\u5f00\u5173\u3002\u4efb\u4f55\u5f00\u5173\u7684\u6548\u7387\u90fd\u4f4e\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\u4f7f\u7528\u51e0\u4e2a\u7b80\u5355\u7684\u8df3\u8f6cthunk\u6765\u4ee3\u66ff\u5f00\u5173\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u652f\u6301\u51fd\u6570\u4e0e\u5176thunk\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u5173\u7cfb\u3002\u8fd9\u662f\u56e0\u4e3aMIR\u4e2d\u7684\u51fd\u6570\u7531\u5176thunk\u5730\u5740\u8868\u793a\uff0c\u51fd\u6570\u662f\u53ef\u4ee5\u8d4b\u503c\u548c\u6bd4\u8f83\u7684\u4e00\u7ea7\u503c\u3002\n\u7528\u4e8e\u5ef6\u8fdf\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u7684\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u57fa\u672c\u5757\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\u6216\u8be5\u7248\u672c\u7684\u5df2\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u51fd\u6570\u8c03\u7528\u8fd8\u901a\u8fc7\u4e00\u4e9b\u5bc4\u5b58\u5668\u4f20\u9012\u8c03\u7528\u53c2\u6570\u5c5e\u6027\u7684\u6807\u8bc6\u7b26\uff0c\u6839\u636e\u6240\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e0d\u662f\u88ab\u8c03\u7528\u51fd\u6570\u4fdd\u5b58\u7684\u3002\n\u6700\u521d\uff0c\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\uff0c\u8be5\u751f\u6210\u5668\u5728\u7279\u6b8a\u6a21\u5f0f\u4e0b\u5de5\u4f5c\u3002\u5b83\u53ea\u4f18\u5316\u529f\u80fd\uff0c\u4f46\u4e0d\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u76f8\u53cd\uff0c\u5b83\u521b\u5efa\u4e86\u51fd\u6570\u7684\u4e00\u4e2a\u7248\u672c#39\uff1bs\u7b2c\u4e00\u4e2a\u57fa\u672c\u5757\uff0c\u5c06\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\uff0c\u5e76\u8c03\u7528\u5b83\u3002\u4e0b\u4e00\u4e2a\u8c03\u7528\u4f1a\u5728\u9700\u8981\u65b0\u7684\u57fa\u672c\u5757\u7248\u672c\u65f6\u4fee\u6539\u51fd\u6570thunk\u3002\u56fe4\u8bf4\u660e\u4e86\u5f53\u57fa\u672c\u5757\u7248\u672c\u7684\u6570\u91cf\u9650\u5236\u4e3a\u4e09\u4e2a\u65f6\uff0c\u51fd\u6570thunk\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\n\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\u5904\u7406MIR\u5c5e\u6027\u6307\u4ee4\uff0c\u4f18\u5316\u7ed9\u5b9a\u5c5e\u6027\u7684\u4ee3\u7801\uff0c\u5e76\u751f\u6210\u57fa\u672c\u5757\u7684\u673a\u5668\u4ee3\u7801\u3002\u5b83\u67e5\u627e\u5728\u5f53\u524d\u57fa\u672c\u5757\u672b\u5c3e\u5177\u6709\u5c5e\u6027\u7684\u540e\u7eed\u57fa\u672c\u5757\uff0c\u5e76\u5c06\u8be5\u57fa\u672c\u5757\u672b\u5c3e\u7684\u8df3\u8f6c\u6dfb\u52a0\u5230\u540e\u7eed\u57fa\u672c\u5757\u7684\u673a\u5668\u4ee3\u7801\u4e2d\u3002\n\u5982\u679c\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\u53ef\u4ee5&#39\uff1b\u627e\u4e0d\u5230\u57fa\u672c\u5757\u7684\u57fa\u672c\u5757\u7248\u672c&#39\uff1b\u5b83\u521b\u9020\u4e86\u4ed6\u4eec\u7684\u7ee7\u4efb\u8005\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u91cd\u51fb\u3002\u751f\u6210\u5668\u5c06\u8df3\u8f6c\u6dfb\u52a0\u5230\u5f53\u524d\u57fa\u672c\u5757\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u672b\u5c3e\u7684\u65b0thunks\uff0c\u5e76\u4ece\u5f53\u524d\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u3002\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u8df3\u8fc7\u57fa\u672c\u5757\u7248\u672c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u57fa\u672c\u5757\u91cd\u51fb\u5b8c\u6210\u3002\u5728\u539f\u59cb\u7684\u57fa\u672c\u5757\u7248\u672c\u4e2d\uff0c\u51fa\u73b0&#39\uff1bs\u4e00\u4e2a\u95f4\u63a5\u8df3\u8f6c\u6216MIR switch\u6307\u4ee4\uff0c\u5176\u4e2d\u591a\u4e2acase\u5177\u6709\u76f8\u540c\u7684\u76ee\u6807\u6807\u7b7e\u3002\nMIR\u9879\u76ee\u4e2d\u7684\u61d2\u60f0\u57fa\u672c\u5757\u751f\u6210\u662f\u53d7\u6700\u8fd1\u7684Shopify YJIT for CRuby\u7684\u542f\u53d1\u3002\u4f46\u4e24\u8005\u4e4b\u95f4\u6709\u91cd\u8981\u533a\u522b\uff1a\nYJIT\u662f\u4e00\u79cd\u4e13\u95e8\u7684CRuby JIT\uff0c\u800cMIR\u662f\u4e00\u79cd\u901a\u7528\u7684JIT\uff0c\u53ef\u4ee5\u7528\u4e8e\u4e0d\u540c\u8bed\u8a00\u7684JIT\u5b9e\u73b0\u3002\nYJIT\u57fa\u672c\u5757\u662fCRuby VM\u6307\u4ee4\u57fa\u672c\u5757\uff0c\u800cMIR\u57fa\u672c\u5757\u662f\u673a\u5668\u6307\u4ee4\u7ea7\u57fa\u672c\u5757\u3002\nYJIT\u4e0d\u4f1a\u5bf9\u57fa\u672c\u5757\u7248\u672c\u8fdb\u884c\u4efb\u4f55\u4f18\u5316\u3002MIR\u751f\u6210\u5668\u9996\u5148\u4f18\u5316\u6574\u4e2a\u529f\u80fd\uff0c\u7136\u540e\u4f18\u5316\u5355\u4e2a\u57fa\u672c\u5757\u7248\u672c\u3002\nYJIT\u4ec5\u652f\u6301x86-64\u4ee3\u7801\u751f\u6210\u3002MIR\u652f\u6301x86-64\u3001AARC64\u3001ppc64\u3001s390\u548c64\u4f4dRISCV\u3002\n\u4f5c\u4e3a\u4f60&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u4f7f\u7528\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u7684\u4ee3\u7801\u6bd4\u4e3a\u6574\u4e2a\u51fd\u6570\u751f\u6210\u7684\u4ee3\u7801\u5305\u542b\u66f4\u591a\u7684\u8df3\u8f6c\u3002\u4f46\u6211\u6ca1\u6709\u53d1\u73b0x86-64\u673a\u5668\u4e0a\u7684\u6027\u80fd\u4e0e\u6211\u7528\u4e8eMIR\u548cC-to-MIR\u7f16\u8bd1\u5668\u7684\u57fa\u51c6\u6d4b\u8bd5\u6709\u4efb\u4f55\u5dee\u5f02\uff08\u53ea\u662f\u4e00\u4e9b\u566a\u97f3\uff09\u3002\u6211\u7684\u731c\u6d4b\u662f\uff0c\u5728\u73b0\u4ee3\u5904\u7406\u5668\u4e0a\uff0c\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u7684\u6210\u672c\u53ef\u80fd\u5f88\u4f4e\uff0c\u56e0\u4e3a\u5b83\u4eec\u5177\u6709\u590d\u6742\u7684\u5206\u652f\u9884\u6d4b\u5355\u5143\uff0c\u4efb\u4f55\u989d\u5916\u7684\u6210\u672c\u90fd\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u57fa\u672c\u5757\u7248\u672c\u4ea7\u751f\u7684\u66f4\u597d\u7684\u4ee3\u7801\u5c40\u90e8\u6027\u6765\u8865\u507f\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211&#39\uff1b\u6211\u5df2\u7ecf\u63cf\u8ff0\u4e86\u652f\u6301\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u65b9\u6cd5JIT\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002\u60f0\u6027\u57fa\u672c\u5757\u4ee3\u7801\u751f\u6210\u53ef\u80fd\u662f\u5b9e\u73b0\u8ddf\u8e2aJIT\u7684\u4e00\u4e2a\u6b65\u9aa4\u3002\n\u8ddf\u8e2aJIT\u8bb0\u5f55\u901a\u5e38\u5728\u70ed\u5faa\u73af\u4e2d\u6267\u884c\u7684VM\u6307\u4ee4\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u4e3a\u5b83\u4eec\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u56fe6\u5de6\u4fa7\u7684\u65b9\u6846\u56fe\u663e\u793a\u4e86\u4e00\u4e2a\u5faa\u73af\u6267\u884c\u7684\u793a\u4f8b\uff0c\u6700\u9891\u7e41\u6267\u884c\u7684\u5757\u4e2d\u586b\u5145\u4e86dar\n......", "note_en": "For the past three years, I have spent half of my work time on the  MIR project. The goal is to create a universal lightweight Just-in-Time (JIT) compiler, and the project&#39;s cornerstone is a machine-independent  medium-level intermediate representation (MIR). For more about the project, see my previous articles on Red Hat Developer:\n  So far, my work on the MIR project has focused on making a fast JIT compiler that generates decent machine code for a few major targets: x86-64 Linux and macOS, aarch64, s390x, riscv64 Linux, and ppc64 big- and little-endian Linux.\n The project in its current state is a method JIT compiler that can be effectively used for statically typed programming languages such as  C, which is the most widely used statically typed language. We&#39;ve developed a C-language JIT based on the C-to-MIR  compiler.\n The original goal for the MIR project was to implement a better  Ruby JIT compiler. (Specifically, I&#39;m focusing on CRuby, the default Ruby interpreter, which is  written in C.)  Ruby is a  very dynamic programming language\u2014it is so flexible that you can even redefine the plus method for integer numbers.\n To achieve better performance for dynamic programming languages, you need to follow program execution, make various assumptions from the execution, and generate code based on those assumptions. For example, you might find that a given plus operation in a given method has only integer operands. You can assume that this will always be the case and generate  specialized plus operation code working only for integer operands.\n You need to use different techniques to guarantee that your assumptions hold, such as implementing assumption checks or guards, or proving that on a given execution path the assumption is always true. If the guards find that the assumption is wrong, you need to switch to code that can work for any case. The process of switching from specialized code to general case code is frequently called  deoptimization in the JIT context.\n In this article, I&#39;ll discuss how I plan to support the generation of specialized and deoptimized code in MIR, and what support has already been implemented in the MIR project.\n Note: Most JITs are specialized for specific languages: There&#39;s  V8 for  JavaScript, for instance, or  luajit for Lua and  PHP JIT for  PHP.\u00a0 I am more interested in  language agnostic support to facilitate the implementation of specialization and deoptimization in JITs for different dynamic programming languages. (See  How the JIT compiler boosts Java performance in OpenJDK for more about\u00a0deoptimization in a JIT compiler.)\n  So that we can look specifically at specialization and deoptimization in the MIR compiler, I will use the following simplified code for the virtual machine (VM) instruction  plus in the CRuby implementation:\n if (FIXNUM_2_P(recv, obj) &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, INTEGER_REDEFINED_OP_FLAG)) { res = rb_fix_plus_fix(recv, obj); } else if (FLONUM_2_P(recv, obj) &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, FLOAT_REDEFINED_OP_FLAG)) { res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); } else if (SPECIAL_CONST_P(recv) || SPECIAL_CONST_P(obj)) { ... } else if (RBASIC_CLASS(recv) == rb_cFloat &amp;&amp; RBASIC_CLASS(obj) == rb_cFloat &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, FLOAT_REDEFINED_OP_FLAG)) { ... } else if (RBASIC_CLASS(recv) == rb_cString &amp;&amp; RBASIC_CLASS(obj) == rb_cString &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, STRING_REDEFINED_OP_FLAG)) { ... } else if (RBASIC_CLASS(recv) == rb_cArray &amp;&amp; RBASIC_CLASS(obj) == rb_cArray &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, ARRAY_REDEFINED_OP_FLAG)) { ... } else { .. // call of method implementing + for object recv }\n So, what&#39;s happening here? First, the code checks that operands are fixed numbers and that the plus method for integers is not redefined. If that is the case, the code implements the  plus operation for fixed numbers. Otherwise, it makes analogous checks for floating point numbers, strings, and arrays. At the end, it calls the Ruby method implementing  + for the object  recv.\n Fixed numbers (or  fixnums) in CRuby are a subset of integers that can be efficiently supported by the target machine. Bigger numbers are represented as multi-precision numbers implemented by the  GMP library.\n All values in CRuby are represented by a machine word and  tagged. For example, a fixnum always has 1 as the least significant bit of the word and a pointer to an object always has three (or two, on 32-bit targets) zero-least significant bits. So the macro  FIXNUM_2_P is implemented as the following code:\n  And the fixnum  plus operation looks like this, if we omit the code for checking overflow:\n  Note: For further simplicity, in the next sections I will ignore checks for redefinition of the  plus operation, such as the invocations of the macro  BASIC_OP_UNREDEFINED_P in the above example.\n  Assume that we&#39;ve checked the operand types of a particular  plus operation and found so far that they have always been fixed numbers. In that case, we could generate the following:\n  At first glance, it seems we didn&#39;t improve the code because the check ( FIXNUM_2_P) is still present. But if we look at a sequence of several plus operations,  v1 + v2 + v3 + v4, we&#39;ll have:\n if (!FIXNUM_2_P(v1, v2)) goto general_case; res = rb_fix_plus_fix(v1, v2) if (!FIXNUM_2_P(res, v3)) goto general_case; res = rb_fix_plus_fix(res, v3) if (!FIXNUM_2_P(res, v4)) goto general_case; res = rb_fix_plus_fix(res, v4)\n A smart compiler could remove the last two  FIXNUM_2_P checks. Unfortunately, neither GCC nor Clang can figure out that  res always has 1 as the least significant bit. Therefore, these compilers do not know the last two  FIXNUM_2_P checks should be removed. GCC&#39;s situation might change in the future with the full implementation of  Project Ranger. (By the way, if the values were represented by a structure with two members,  type and  value, GCC/LLVM even now could figure out their types and remove the last two checks.)\n  Even without removing the redundant checks, executing such specialized code is beneficial because compilers can successfully do other optimizations, such as removing redundant loads and stores. That&#39;s because such code forms specific regions called  extended basic blocks (EBBs), and optimizing compilers work particularly well on such regions. Code like this also has much better code locality and branch prediction.\n  How might we implement the code labeled by  general_case in the fixed number example? There are three possibilities:\n A JIT compiler call to remove the specialized code generated for the Ruby method, then generate and use general code for the method VM instructions.\n  A  goto to a particular location containing all code for all type cases of the method VM instructions.\n As switching to the interpreter in CRuby is very expensive, it might be better to generate general case code at the same time as specialized code, along with  gotos to the general code from the specialized code when the guards fail. After several executions of the  gotos to the general case code, we could rebuild the entire method with the current profile info.\n  The MIR JIT compiler is not smarter than GCC or Clang, and it encounters the same problem of removing redundant checks for tagged values. To solve the problem, I am planning to introduce  properties for program variables and MIR instructions, along with built-in C functions working with properties:\n  Note: For brevity, I&#39;ll skip over a description of property support on the MIR level.\n Properties are integer constants. We can use  __builtin_prop_set to assign properties to program variables at a given execution point. Properties are propagated to other program variables through variable assignments.\n When we cannot calculate the property of a program variable at a given execution point, the variable gets the  zero property at that point. A zero property is an unknown property.\n We can annotate  plus code with the new built-in calls for properties describing program variable types as follows:\n enum prop { unknown = 0, inttype, flotype, ... }; if (__builtin_prop_cond (FIXNUM_2_P(recv, obj), recv, intype, obj, intype)) { res = rb_fix_plus_fix(recv, obj); __builtin_prop_set (res, inttype) } else if (__builtin_prop_cond (FLONUM_2_P(recv, obj), recv, flotype, obj, flotype)) res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); __builtin_prop_set (res, flotype); } else { ... // call of method implemented + for object recv }\n  if (recv.prop == intype &amp;&amp; obj.prop == inttype || (recv.prop == unknown &amp;&amp; obj.prop == unknown) &amp;&amp; FIXNUM_2_P(recv, obj)) { res = rb_fix_plus_fix(recv, obj); res.prop = intype; } else if (__builtin_prop_cond (FLONUM_2_P(recv, obj), recv, flotype, obj, flotype)) res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); __builtin_prop_set (res, flotype); } else { ... // call of method implemented + for object recv }\n Because we always know properties during code generation,  all assignments and comparisons of properties will go away in the final code. For example, if we figure out that  recv and  obj both have the property  inttype, the final code will be:\n  If we figure out during analysis that  recv and  obj both have the property  flotype, the final code will be:\n  If the properties of values of  recv and  obj are zero, we will have the original code as before the annotation. If only one property of  recv or  obj is zero, we will have only the code in the final  else part.\n Consider the code after the profiling discussed above. The analogous code annotated with properties after profiling will look like this:\n if (!__builtin_prop_cond (FIXNUM_2_P(v1, v2), v1, intype, v2, intype)) goto general_case;res = rb_fix_plus_fix(v1, v2);__builtin_prop_set (res, inttype);if (!__builtin_prop_cond (FIXNUM_2_P(res, v3), res, intype, v3, intype)) goto general_case;res = rb_fix_plus_fix(res, v3);__builtin_prop_set (res, inttype);if (!__builtin_prop_cond (FIXNUM_2_P(res, v4), res, intype, v4, intype)) goto general_case;res = rb_fix_plus_fix(res, v4);__builtin_prop_set (res, inttype);...\n It is now pretty easy to find and propagate properties of program variables for the extended basic block above. Property analysis is trivial for variables in MIR registers, while for variables represented by MIR memory operands it requires a more complex point-to analysis.\n   Note: For brevity, I am omitting a description of how to do the profiling, especially when code is executed in more than one thread.\n  What would happen for specialization based on profiling if, in the Ruby code  v1 + v2 + v3 + v4 that we looked at earlier, all variables in half of all cases had fixnum values and in the other half had floating point number values? This is a common situation for a polymorphic function in dynamic programming languages.\n We could generate specialized code only for one half of the cases and do the deoptimization when a case from the other half occurred. Or we might generate and use only general case code. If a particular call to some small function had specific type values in the majority of cases, we could improve the generated code by using code inlining. That&#39;s a complicated solution, however. A simpler approach to solve the problem is  basic block versioning (BBV).\n How does basic block versioning work? Suppose we have different paths to reach a basic block of our code (by different calls to a function, say), and on these different paths we have specific types (properties) of variables. We can clone the basic block and generate different versions of specialized code for different types of variables, as illustrated in Figure 1 (note that basic blocks are denoted as BB).\n  Creating a specialized basic block version can deduce types of outgoing variable values, like the value of  res in our example. This in turn can result in the generation of different versions of successor basic blocks.\n You can probably guess that if we don&#39;t constrain the number of basic block versions, a combinatorial explosion of different versions might arise. In practice, only a few versions of one basic block are generated, where one basic block version is always used for unknown types (zero properties).\n  There are two ways to generate basic block versions. It can be done in an  eager way or in a  lazy way. In the eager strategy, when we generate code for a basic block version, we also create versions of successor basic blocks and generate code for them, and so on. In other words, we generate code for the whole method at once.\n In the lazy strategy, we generate code for a basic block version only when we start execution of that version. This means that we generate code for method basic blocks that are actually executed in the program. Obviously, lazy basic block versioning results in less generated code and, usually, less compilation time. (If we need to generate code for the same number of basic block versions with both strategies, lazy code compilation would probably require more time because of more time spent for data initialization and finalization for each separate basic block code generation.)\n  When compared to specialized code generation based on profiling, as described in the previous section, lazy basic block versioning has several advantages:\n We don&#39;t need to generate machine code for all BBs, which can be attractive when only a small part of the JIT&#39;ed program is executed.\n  We don&#39;t need to do special implementation of deoptimization. It is automatically done through BB versioning.\n  Many method JITs generate code only for methods that were executed a number of times greater than some threshold. The execution is switched only at function calls. Such an approach does not work well if a method is called rarely but has a very long-running loop. Switching to new method code during method execution is called  on-stack replacement (OSR). Lazy basic block versioning does not require a special implementation of OSR; it is done automatically.\n One might think that basic block versioning results in an explosion in code size. In practice, the average number of versions is quite small. About 95 percent of basic blocks had only one version on a set of JavaScript benchmarks, according to a paper by Maxime Chevalier-Boisvert and Marc Feely (see  Simple and Effective Type Check Removal through Lazy Basic Block Versioning).\n When bootstrapping the x86-64 C-to-MIR compiler, which is about 30,000 lines of C code, the number of generated basic block versions is only 51 percent of all basic blocks of the compiler functions executed at least once (14,737 out of 29,131) and only 18 percent (14,737 out of 81,799) of all basic blocks of the compiler, as you can see in Figure 2.\n  It should come as no surprise that I started to implement lazy basic block versioning first for the MIR project.\n  How is lazy basic block versioning implemented for the MIR project? All calls of MIR functions are indirect and implemented through small runtime-generated code snippets called  thunks, which usually consist of one or two machine instructions. Thunks are used to easily change machine code for any MIR function; for instance, we need this for switching specialized machine code to deoptimized code.\n MIR already has a  lazy function code generation mechanism, which is also implemented through thunks. At the start of program execution, all function thunks redirect to the machine code generator. When a function is called for the first time, the MIR code generator optimizes the function and generates machine code for it; the function thunk is then redirected to the generated machine code and execution continues from the generated code, as shown in Figure 3.\n  When we use lazy block versioning, the function thunk implements a switch to a specific address that depends on the properties of program variables at the beginning of the basic block. The switch can be implemented in various ways\u2014as a table-based switch, for instance. Any switch is less efficient than just the one jump instruction used previously. Still, we cannot use several simple jump thunks for one function instead of the switch, as we need to support a one-to-one relation between a function and its thunk. That is because a function in MIR is represented by its thunk address, and functions are first-class values that can be assigned and compared.\n The function thunk for lazy basic block versioning redirects to a machine code generator of a basic block version or to already-generated machine code of that version. A function call also passes an identifier of the properties of call arguments through some register that is not saved by a called function according to the application binary interface (ABI) used.\n Initially, a function thunk redirects to a machine code generator, which works in a special mode. It only optimizes the function but does not generate machine code. Instead, it creates a version of the function&#39;s first basic block, redirects the function thunk to the basic block version generator, and calls it. The next calls modify the function thunk whenever a new basic block version is necessary. Figure 4 illustrates how the function thunk changes when the limit for the number of basic block versions is three.\n  The basic block version generator processes MIR property instructions optimizing code for the given properties, and generates machine code for the basic block. It finds successor basic blocks with properties at the end of the current basic block and adds jumps at the end of that basic block to the machine code of its successors.\n If the basic block version generator can&#39;t find basic block versions of a basic block&#39;s successors, it creates them, along with their thunks. The generator adds jumps to the new thunks at the end of the machine code of the current basic block version and continues execution from the machine code of the current version. In rare cases, jumps through basic block versions can still be done through basic block thunks. This happens when, in the original basic block version, there&#39;s an indirect jump or MIR switch instruction with more than one case having the same target label.\n   Lazy basic block generation in the MIR project was inspired by the recent  Shopify YJIT for CRuby. But there are important differences between the two:\n YJIT is a specialized CRuby JIT, whereas MIR is a universal JIT and can be used for JIT implementations of different languages.\n  A YJIT basic block is a CRuby VM instruction basic block, whereas a MIR basic block is a machine-instruction-level basic block.\n  YJIT does not do any optimization of basic block versions. The MIR generator optimizes the whole function first and individual basic block versions later.\n  YJIT only supports x86-64 code generation. MIR supports x86-64, aarch64, ppc64, s390, and 64-bit RISCV.\n As you&#39;ve seen, code generated with basic block versions contains more jumps than generated code for the entire function. But I did not find any performance difference on x86-64 machines (just some noise) with the  benchmarks I use for the MIR and the C-to-MIR compilers. My guess is that direct jump instructions are probably low cost on modern processors, with their sophisticated branch prediction units, and any additional cost is compensated by better code locality produced by using basic block versions.\n  So far, I&#39;ve described approaches to support the implementation of method JITs for dynamic programming languages. Lazy basic block code generation could be one step towards implementing a  tracing JIT.\n A tracing JIT records VM instructions that are usually executed in a hot loop, optimizes them, and generates machine code for them. The block diagram on the left side of Figure 6 shows an example of a loop execution, with the most frequently executed blocks filled with a dar\n......", "posttime": "2022-02-17 14:53:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u7f16\u8bd1,\u7f16\u8bd1\u5668,specialization", "title": "MIR\u8f7b\u91cf\u7ea7JIT\u7f16\u8bd1\u5668\u7684\u4ee3\u7801\u4e13\u95e8\u5316", "title_en": "Code specialization for the MIR lightweight JIT compiler", "transed": 1, "url": "https://developers.redhat.com/articles/2022/02/16/code-specialization-mir-lightweight-jit-compiler", "via": "", "real_tags": ["\u4ee3\u7801", "\u7f16\u8bd1", "\u7f16\u8bd1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073851, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u91cf\u5b50\u8ba1\u7b97\u7ed9\u5de5\u4e1a\u5e26\u6765\u9769\u547d\u6027\u53d8\u9769\u3001\u89e3\u51b3\u4eba\u7c7b\u6700\u590d\u6742\u95ee\u9898\u7684\u60ca\u4eba\u524d\u666f\uff0c\u6b63\u65e5\u76ca\u6210\u4e3a\u5b66\u672f\u754c\u3001\u5546\u4e1a\u754c\u548c\u653f\u5e9c\u7684\u5171\u8bc6\u3002\u4f46\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5bf9\u6211\u4eec\u4eca\u5929\u6240\u5904\u7684\u4f4d\u7f6e\u548c\u6211\u4eec\u5e0c\u671b\u660e\u5929\u6240\u5904\u7684\u4f4d\u7f6e\u4e4b\u95f4\u7684\u8ddd\u79bb\u7684\u6b23\u8d4f\u3002\n\u8981\u8de8\u8d8a\u8fd9\u6bb5\u8ddd\u79bb\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u9009\u62e9\uff1a\u56f4\u7ed5\u5c16\u7aef\u91cf\u5b50\u8ba1\u7b97\u673a\u8d44\u6e90\u5efa\u9020\u62a4\u57ce\u6cb3\u548c\u56f4\u5899\uff0c\u6216\u8005\u5efa\u9020\u6865\u6881\uff0c\u5728\u4eba\u4eec\u6240\u5728\u7684\u5730\u65b9\u4e0e\u4ed6\u4eec\u89c1\u9762\uff0c\u5c06\u91cf\u5b50\u8ba1\u7b97\u6539\u53d8\u4e16\u754c\u7684\u6f5c\u529b\u5e26\u7ed9\u5c3d\u53ef\u80fd\u591a\u7684\u4eba\u3002\u5728IonQ\uff0c\u6211\u4eec\u575a\u4fe1\uff0c\u8981\u786e\u4fdd\u6240\u6709\u60f3\u8981\u5728\u6211\u4eec\u65b0\u5174\u9886\u57df\u63d0\u5347\u6700\u5148\u8fdb\u6c34\u5e73\u7684\u4eba\u90fd\u6709\u80fd\u529b\u4f7f\u7528\u6700\u9002\u5408\u81ea\u5df1\u9700\u6c42\u7684\u5de5\u5177\uff0c\u8bbf\u95ee\u4f18\u79c0\u7684\u786c\u4ef6\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u6253\u7834\u8303\u5f0f\u7684quantum\u5e94\u7528\u7a0b\u5e8f\u5f88\u53ef\u80fd\u6765\u81ea\u8f66\u5e93\u91cc\u7684\u4e00\u4e2a\u5b69\u5b50\uff0c\u5c31\u50cf\u6765\u81ea\u4f01\u4e1a\u7814\u7a76\u56ed\u4e00\u6837\u3002\n\u5c31\u5728\u51e0\u5e74\u524d\uff0c\u91cf\u5b50\u8ba1\u7b97\u673a\u53ea\u6709\u4e24\u4e09\u4e2a\u91cf\u5b50\u4f4d\uff0c\u800c\u8fd9\u4e9b\u673a\u5668\u7684\u7a0b\u5e8f\u662f\u7531\u7269\u7406\u5b66\u7814\u7a76\u751f\u5728\u4e00\u6240\u5927\u5b66\u5927\u697c\u5730\u4e0b\u5ba4\u7684\u5b9e\u9a8c\u5ba4\u91cc\u7cbe\u5fc3\u7f16\u5236\u7684\u3002\u7f16\u7a0b\u8fd9\u4e9b\u8bbe\u5907\u7684\u552f\u4e00\u5de5\u5177\u662f\u62fc\u51d1\u8d77\u6765\u7684\u4ee3\u7801\uff0c\u7531\u4e00\u4e2a\u7814\u7a76\u751f\u4f20\u7ed9\u53e6\u4e00\u4e2a\u7814\u7a76\u751f\uff0c\u8fd9\u4e9b\u4ee3\u7801\u4ecd\u7136\u628a\u8fd9\u4e9b\u8bbe\u5907\u66f4\u591a\u5730\u89c6\u4e3a\u7269\u7406\u5b9e\u9a8c\uff0c\u800c\u4e0d\u662f\u8ba1\u7b97\u5de5\u5177\u3002\n\u4f46\u4eca\u5929\uff0c\u968f\u7740\u6570\u5341\u4e2a\u91cf\u5b50\u6bd4\u7279\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u5efa\u9020\uff0c\u6570\u767e\u751a\u81f3\u6570\u5343\u4e2a\u91cf\u5b50\u6bd4\u7279\u7684\u7cfb\u7edf\u5373\u5c06\u95ee\u4e16\uff0c\u91cf\u5b50\u8ba1\u7b97\u673a\u7f16\u7a0b\u7684\u590d\u6742\u6027\u9700\u8981\u4e00\u79cd\u66f4\u7ed3\u6784\u5316\u7684\u65b9\u6cd5\u3002\u8fd9\u5bfc\u81f4\u4e86\u5927\u91cf\u91cf\u5b50\u7f16\u7a0b\u6846\u67b6\u548c\u8bed\u8a00\u7684\u8bde\u751f\uff0c\u4ece\u5fae\u8f6f\u7684Q#\u7b49\u6210\u719f\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5230IBM\u7684Qiskit\u7b49Python\u6846\u67b6\uff0c\u518d\u5230QASM\u7b49\u57fa\u672c\u6c47\u7f16\u8bed\u8a00\u3002\n\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8f6f\u4ef6\u5305\u5728\u81ea\u5df1\u7684\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u6a21\u62df\uff0c\u4f46\u771f\u6b63\u7684\u4ef7\u503c\u5728\u4e8e\u4f7f\u7528\u8fd9\u4e9b\u8bed\u8a00\u5728\u5b9e\u9645\u7684\u91cf\u5b50\u786c\u4ef6\u4e0a\u8fd0\u884c\u91cf\u5b50\u7a0b\u5e8f\u3002\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5f88\u9ad8\u5174\u5730\u5ba3\u5e03\uff0c\u968f\u7740ProjectQ\u52a0\u5165\u5230\u6211\u4eec\u652f\u6301\u7684\u5e93\u4e2d\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u6bcf\u4e2a\u4e3b\u8981\u7684quantum\u6846\u67b6\u548c\u8bed\u8a00\u8bbf\u95eeIonQ\u786c\u4ef6\u3002\u4e3a\u4e86\u5e86\u795d\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u91cf\u5b50\u7a0b\u5e8f\u2014\u2014\u91cf\u5b50\u7248\u7684\u201cHello World\u201d\u7a0b\u5e8f\u2014\u2014\u201cHello Many Worlds\u201d\uff0c\u5982\u679c\u4f60\u613f\u610f\u7684\u8bdd\u2014\u2014\u5728\u4e03\u4e2a\u5e73\u53f0\u4e0a\u5b9e\u73b0\u4e86IonQ quantum\u8ba1\u7b97\u673a\u4e0a\u7684\u8fdc\u7a0b\u6267\u884c\u3002\n\u5229\u7528\u91cf\u5b50\u8ba1\u7b97\u7684\u529b\u91cf\uff0c\u65e0\u8bba\u4f60\u4f7f\u7528\u4ec0\u4e48\u4e91\u3001\u8bed\u8a00\u6216SDK\u3002\n\u5f00\u59cb\u9605\u8bfb\u6587\u6863\n\u6211\u4eec\u8981\u5199\u7684\u57fa\u672c\u91cf\u5b50\u7a0b\u5e8f\u5f88\u7b80\u5355\u3002\u5b83\u5728\u4e24\u4e2a\u91cf\u5b50\u4f4d\u4e4b\u95f4\u4ea7\u751f\u4e00\u4e2a\u5b8c\u5168\u7ea0\u7f20\u6001\uff0c\u7136\u540e\u6d4b\u91cf\u8fd9\u4e2a\u6001\u3002\u8fd9\u79cd\u72b6\u6001\u6709\u65f6\u88ab\u79f0\u4e3a\u949f\u6001\uff0c\u6216\u949f\u5bf9\uff0c\u4ee5\u7269\u7406\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u65af\u56fe\u5c14\u7279\u00b7\u8d1d\u5c14\u7684\u540d\u5b57\u547d\u540d\u3002\n\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u6d4b\u91cf\u7ed3\u679c\u5e94\u8be5\u7ed9\u51fa\u4e24\u4e2a\u91cf\u5b50\u4f4d\u76840\u6216\u4e24\u4e2a\u91cf\u5b50\u4f4d\u76841\uff0c\u6570\u91cf\u76f8\u7b49\u3002\u5f53\u8fd0\u884c\u8fd9\u4e9b\u65f6\uff0c\u6211\u4eec\u5c06\u80fd\u591f\u5206\u8fa8\u51fa\u6211\u4eec\u662f\u5728\u771f\u6b63\u7684\u786c\u4ef6\u4e0a\u8fd0\u884c\u7684\uff0c\u56e0\u4e3a\u8fd9\u5e76\u4e0d\u603b\u662f\u6211\u4eec\u5f97\u5230\u7684\uff01\u8fd9\u4e9b\u9519\u8bef\u662f\u76ee\u524d\u9650\u5236\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u56e0\u7d20\uff0c\u4f46\u901a\u8fc7\u91cf\u5b50\u9519\u8bef\u6821\u6b63\u514b\u670d\u8fd9\u4e00\u95ee\u9898\u7684\u7b2c\u4e00\u6b65\u5df2\u7ecf\u5f00\u59cb\u3002\nIBM\u7684Qiskit\u662f\u6700\u65e9\u7684\u91cf\u5b50\u8ba1\u7b97\u673a\u7f16\u7a0b\u6846\u67b6\u4e4b\u4e00\u3002\u5b83\u63d0\u4f9b\u4e86\u7528python\u7f16\u5199\u91cf\u5b50\u7a0b\u5e8f\u7684\u5f3a\u5927\u5de5\u5177\uff0c\u4ee5\u53ca\u7528\u4e8e\u4f7f\u7528\u91cf\u5b50\u786c\u4ef6\u3001\u8fd0\u884c\u901a\u7528\u7b97\u6cd5\u7b49\u7684\u5404\u79cd\u9644\u52a0\u5305\u3002Qiskit\u6709\u5927\u91cf\u5b66\u4e60\u91cf\u5b50\u8ba1\u7b97\u7684\u6559\u6750\uff0c\u5305\u62ec\u4e00\u6574\u672c\u6559\u79d1\u4e66\uff0c\u8fd9\u662f\u91cf\u5b50\u521d\u5b66\u8005\u5f00\u59cb\u5b66\u4e60\u8fd9\u4e2a\u9886\u57df\u7684\u597d\u5730\u65b9\u3002\n\u4f7f\u7528\u6211\u4eec\u6700\u8fd1\u5ba3\u5e03\u7684\u4e0eGoogle Cloud Marketplace\u7684\u96c6\u6210\uff0cQiskit\u53ef\u4ee5\u7528\u6765\u8fd0\u884c\u9488\u5bf9IonQ\u88ab\u56f0\u79bb\u5b50\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u91cf\u5b50\u7a0b\u5e8f\u3002\u5982\u679c\u60a8\u5c1a\u672a\u6ce8\u518c\uff0c\u8fd9\u4e9b\u8bf4\u660e\u5c06\u5f15\u5bfc\u60a8\u5b8c\u6210\u8be5\u8fc7\u7a0b\uff0c\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u83b7\u5f97\u8bbf\u95eeIonQ\u670d\u52a1\u4ee5\u8fd0\u884cquantum\u7a0b\u5e8f\u7684API\u5bc6\u94a5\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u6b64API\u5bc6\u94a5\u79f0\u4e3aAPI_\u5bc6\u94a5\u2014\u2014\u5982\u679c\u60a8\u6309\u7167\u672c\u6307\u5357\u8fdb\u884c\u64cd\u4f5c\uff0c\u8bf7\u786e\u4fdd\u4f7f\u7528\u771f\u6b63\u7684\u5bc6\u94a5\u66ff\u6362\u5b83\uff0c\u5426\u5219\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u8fd0\u884c\uff01\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u91cf\u5b50\u7535\u8def\uff0c\u521b\u5efa\u4e00\u4e2a\u7ea0\u7f20\u949f\u5f62\u5bf9\uff0c\u5e76\u5728Qiskit\u4e2d\u6d4b\u91cf\u5b83\u2014\u2014\u5728\u5f00\u59cb\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5b89\u88c5Qiskit\u548cQiskit_ionq python\u5305\u3002\n\u4eceqiskit import QuantumCircuit#\u521b\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u949f\u5f62\u72b6\u6001\u3002qc=\u91cf\u5b50\u7535\u8def\uff082\uff0c2\uff09#2\u4e2a\u91cf\u5b50\u4f4d\uff0c2\u4e2a\u6bd4\u7279SQC\u3002h\uff080\uff09qc\u3002cx\uff080\uff0c1\uff09#\u6d4b\u91cf\u5e76\u5c06\u7ed3\u679c\u653e\u5165\u4e24\u4f4d\u3002qc\u3002\u6d4b\u91cf\uff08[0,1]\uff0c[0,1]\uff09#\u663e\u793a\u7535\u8def\u3002\u6253\u5370\uff08qc\uff09\n\u250c\u2500\u2500\u2500\u2510 \u250c\u2500\u2510 \u95ee\u98980\uff1a\u2524 H\u251c\u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510\u95ee\u98981\uff1a\u2500\u2500\u2500\u2500\u2500\u2524 \u5341\u3001\u251c\u2500\u256b\u2500\u2524M\u251c \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518c:2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550 0 1\n\u8981\u5728IonQ Quantum\u5904\u7406\u5355\u5143\uff08\u7b80\u79f0QPU\uff09\u4e0a\u8fd0\u884c\u6b64\u7535\u8def\uff0c\u9996\u5148\u9700\u8981\u4eceIonQ\u63d0\u4f9b\u7a0b\u5e8f\u83b7\u53d6QPU\u540e\u7aef\uff1a\n\u7136\u540e\uff0c\u53d1\u9001\u4f5c\u4e1a\u4ee5\u5728\u91cf\u5b50\u4f4d\u4e0a\u8fd0\u884c\uff0c\u5e76\u7b49\u5f85\u4f5c\u4e1a\u4eceIonQ\u670d\u52a1\u4e0a\u7684\u4f5c\u4e1a\u961f\u5217\u4e2d\u8fd0\u884c\u3002\n\u6765\u81eaqiskit\u3002\u63d0\u4f9b\u8005\u3002jobstatus\u5bfc\u5165jobstatus\u5bfc\u5165\u65f6\u95f4#\u63d0\u4ea4\u4f5c\u4e1a\u4ee5\u4f9b\u6267\u884c\u3002qpu_job=qpu\u3002\u8fd0\u884c\uff08qc\uff0c\u653e\u70ae\u6b21\u6570=1000\uff09#\u68c0\u67e5\u5de5\u4f5c\u662f\u5426\u5b8c\u6210\u3002\u800cqpu_\u5de5\u4f5c\u3002status\uff08\uff09\u4e0d\u662fJobStatus\u3002\u5b8c\u6210\uff1a\u6253\u5370\uff08&#34\uff1b\u4f5c\u4e1a\u72b6\u6001\u4e3a&#34\uff1b\uff0cqpu#u Job.status\uff08\uff09\uff09\u65f6\u95f4\u3002\u7761\u89c9\uff0860\uff09#\u559d\u676f\u5496\u5561\uff01\u8fd9\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4\u3002\u6253\u5370\uff08&#34\uff1b\u4f5c\u4e1a\u72b6\u6001\u4e3a&#34\uff1b\uff0cqpu#u Job.status\uff08\uff09\uff09\u6253\u5370\uff08qpu#u Job.get#u counts\uff08\uff09\uff09\nJob status\u5c31\u662fJobStatus\u3002QUEUEDJob\u72b6\u6001\u662fJobStatus\u3002QUEUEDJob\u72b6\u6001\u662fJobStatus\u3002\u5b8c\u6210{&#39\uff1b00&#39\uff1b\uff1a513\uff0c&#39\uff1b01&#39\uff1b\uff1a6\uff0c&#39\uff1b10&#39\uff1b\uff1a4\uff0c&#39\uff1b11&#39\uff1b\uff1a477}\n\u6211\u4eec\u7684\u7406\u60f3\u7ed3\u679c\u662f00:512\uff0c11:512\u3002\u6211\u4eec\u5f97\u5230\u7684\u7ed3\u679c\u57fa\u672c\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u6240\u8bf4\u7684\uff0c\u7531\u4e8e\u5728\u771f\u5b9e\u786c\u4ef6\u4e0a\u8fd0\u884c\u65f6\u4ea7\u751f\u7684\u8ba1\u7b97\u566a\u97f3\uff0c\u5b83\u4eec\u5e76\u4e0d\u90fd\u662f\u6b63\u786e\u7684\u3002\n\u5fae\u8f6f\u5728\u7f16\u5199\u81ea\u5df1\u7684\u7f16\u7a0b\u8bed\u8a00\u65b9\u9762\u6709\u7740\u60a0\u4e45\u7684\u5386\u53f2\uff0c\u4ed6\u4eec\u5728quantum\u4e0a\u5ef6\u7eed\u4e86\u8fd9\u6bb5\u5386\u53f2\u3002\u4ed6\u4eec\u63d0\u4f9b\u7684\u8fd0\u884c\u91cf\u5b50\u8ba1\u7b97\u7684\u670d\u52a1\u662f\u4e00\u79cd\u5b8c\u6574\u7684\u8bed\u8a00\uff0c\u79f0\u4e3aQ#\u3002\n\u4f7f\u7528Q#\uff0c\u4efb\u4f55\u5728\u5fae\u8f6f\u4e91\u670d\u52a1Azure Quantum\u4e0a\u62e5\u6709\u5e10\u6237\u7684\u4eba\u90fd\u53ef\u4ee5\u4e0eIonQ\u7684Quantum\u8ba1\u7b97\u673a\u7ade\u4e89\u3002\u6709\u5173Azure Quantum\u7684\u5165\u95e8\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4ee5\u4e0b\u8bf4\u660e\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u4e86Azure Quantum\u5e10\u6237\u548cQuantum\u5de5\u4f5c\u533a\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u5b9e\u9645\u7684\u91cf\u5b50\u7a0b\u5e8f\u3002Q#\u662f\u7528\u7c7b\u4f3cC\u7684\u65b9\u8a00\u5199\u7684\uff0c\u4efb\u4f55\u5199C#\u6216\u7c7b\u4f3c\u8bed\u8a00\u7684\u4eba\u90fd\u5e94\u8be5\u5f88\u719f\u6089\uff1a\n\u540d\u79f0\u7a7a\u95f4Bell{open Microsoft.Quantum.infrant\uff1bopen Microsoft.Quantum.Measurement\uff1boperation MeasureEntanglement\uff08\uff09\uff1a\u7ed3\u679c[]{use qubits=Qubit[2]\uff1bH\uff08qubits[0]\uff09\uff1bCNOT\uff08qubits[0]\uff0cqubits[1]\uff09\uff1breturn multi\uff08qubits\uff09\uff1b}\n\u5c06\u5176\u4fdd\u5b58\u5728\u540d\u4e3aOperation\u7684\u6587\u4ef6\u4e2d\u3002qs\uff0c\u7136\u540e\u5728\u540c\u4e00\u4e2a\u76ee\u5f55\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2aPython\u6587\u4ef6\u6765\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u3002\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528Azure\u7684az\u547d\u4ee4\u884c\u754c\u9762\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u2014\u2014\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0a\u9762\u7684\u94fe\u63a5\u6307\u5357\u2014\u2014\u4f46\u6211\u4eec\u53d1\u73b0\uff0c\u51fa\u4e8e\u6f14\u793a\u76ee\u7684\uff0c\u4f7f\u7528python\u66f4\u5bb9\u6613\u8bbe\u7f6e\u3002\n\u5bfc\u5165qsharp\u5bfc\u5165qsharp\u3002Azure\u6765\u81eaBell import MeasureEntanglementqsharp\u3002\u851a\u84dd\u8272\u7684\u8fde\u63a5\uff08resourceId=&#34\uff1b\u91cf\u5b50\u8d44\u6e90\u7684\u540d\u79f0&#34\uff1b\uff0c\u4f4d\u7f6e=&#34\uff1b\u7f8e\u56fd\u4e1c\u90e8&#34\uff1b\uff09qsharp\u3002\u851a\u84dd\u8272\u7684\u76ee\u6807\uff08&#34\uff1bionq.qpu&#34\uff1b\uff09\u7ed3\u679c=qsharp\u3002\u851a\u84dd\u8272\u7684\u6267\u884c\uff08MeasureEntanglement\uff0cshots=1000\uff0cjobName=&#34\uff1bBell&#34\uff1b\uff09\u6253\u5370\uff08\u7ed3\u679c\uff09\n{\u2018[0, 0]\u2019: 0.50, \u2018[1, 1]\u2019: 0.48, \u2018[0, 1]\u2019: 0.02}\n\u8bf7\u6ce8\u610f\uff0c\u4e0e\u524d\u4e00\u4e2a\u793a\u4f8b\u4e0d\u540c\uff0c\u5b83\u4eec\u662f\u4f5c\u4e3a\u6d4b\u91cf\u6982\u7387\u76f4\u65b9\u56fe\u8fd4\u56de\u7684\uff1b\u6bcf\u4e00\u4e2a\u5dde\u76841000\u6b21\u6ce8\u5c04\u4e2d\u7684\u767e\u5206\u6bd4\u3002\u8fd9\u662f\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u8868\u793a\u91cf\u5b50\u7535\u8def\u8f93\u51fa\u7684\u65b9\u5f0f\u3002\nBraket\u662f\u4e9a\u9a6c\u900a\u7684\u91cf\u5b50\u8ba1\u7b97\u670d\u52a1\uff0c\u5305\u62ec\u4e00\u4e2a\u57fa\u4e8epython\u7684SDK\uff0c\u7528\u4e8e\u521b\u5efa\u548c\u63d0\u4ea4\u91cf\u5b50\u7a0b\u5e8f\u3002\u8981\u5728Braket\u4e0a\u8fd0\u884c\u4f5c\u4e1a\uff0c\u60a8\u9700\u8981\u5728\u4e0a\u5b89\u88c5AWS\u5e10\u6237\uff0c\u5e76\u5df2\u5b89\u88c5Amazon Braket sdk\u3002\u6b64\u5916\uff0c\u60a8\u8fd8\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2as3\u5b58\u50a8\u6876\u6765\u5b58\u50a8\u7ed3\u679c\u3002\u5728\u6211\u4eec\u5b8c\u6574\u7684Braket\u6307\u5357\u4e2d\u6709\u66f4\u591a\u7684Braket\u8bbe\u7f6e\u7ec6\u8282\u3002\n\u5b83\u6253\u5370\u51fa\u4e86\u6211\u4eec\u540c\u6837\u53cb\u597d\u7684\u5c0f\u91cf\u5b50\u7535\u8def\u2014\u2014\u5c3d\u7ba1\u8fd9\u91cc\u7684\u683c\u5f0f\u4e0d\u540c\uff0c\u4f46\u7535\u8def\u662f\u4e00\u6837\u7684\uff01\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u83b7\u53d6ionq\u8bbe\u5907\u5e76\u8bbe\u7f6eS3\u5b58\u50a8\u6876\u4fe1\u606f\uff1a\n\u8bbe\u5907=AwsDevice\uff08&#34\uff1barn:aws:braket:\uff1a\uff1a\u8bbe\u5907/qpu/ionq/ionQdevice&#34\uff1b\uff09#\u8f93\u5165\u60a8\u4e4b\u524d\u521b\u5efa\u7684S3 bucket\u7684\u540d\u79f0my_bucket=&#34\uff1b\u4e9a\u9a6c\u900abraket\u4f60\u7684\u6876\u540d&#34\uff1b#bucketmy_\u524d\u7f00\u7684\u540d\u79f0=&#34\uff1b\u4f60\u7684\u6587\u4ef6\u5939\u540d&#34\uff1b#buckets3_\u6587\u4ef6\u5939\u4e2d\u6587\u4ef6\u5939\u7684\u540d\u79f0=\uff08my_bucket\uff0cmy_\u524d\u7f00\uff09\nCirq\u662f\u4e00\u4e2a\u5f00\u6e90Python\u6846\u67b6\uff0c\u7531\u8c37\u6b4c\u7684\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\uff0c\u7528\u4e8e\u91cf\u5b50\u7f16\u7a0b\u3002\u4f7f\u7528\u6211\u4eec\u6700\u8fd1\u5ba3\u5e03\u7684\u4e0eGoogle Cloud Marketplace\u7684\u96c6\u6210\uff0cCirq\u53ef\u4ee5\u7528\u6765\u8fd0\u884c\u9488\u5bf9IonQ\u88ab\u56f0\u79bb\u5b50\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u91cf\u5b50\u7a0b\u5e8f\u3002\u7531\u4e8eCirq\u662f\u7531\u8c37\u6b4c\u5f00\u53d1\u7684\uff0c\u8fd9\u5f53\u7136\u662f\u5728GCM\u4e0a\u8fd0\u884c\u7684\u6700\u5177\u534f\u540c\u6027\u7684\u65b9\u5f0f\u3002\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u8bf4\u660e\u5f00\u59cb\u4f7f\u7528GCM\uff0c\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u83b7\u53d6\u8bbf\u95eeIonQ\u670d\u52a1\u7684API\u5bc6\u94a5\u3002\u540c\u6837\uff0c\u6211\u4eec\u5728\u4e0b\u9762\u5c06\u6b64API\u5bc6\u94a5\u79f0\u4e3aAPI_\u5bc6\u94a5\uff0c\u4f46\u5982\u679c\u60a8\u9075\u5faa\u672c\u6307\u5357\uff0c\u8bf7\u52a1\u5fc5\u7528\u771f\u6b63\u7684\u5bc6\u94a5\u66ff\u6362\u5b83\uff01\n\u518d\u4e00\u6b21\uff0c\u6211\u4eec&#39\uff1b\u6211\u9996\u5148\u4e3a\u6211\u4eec\u7684\u949f\u5bf9\u521b\u5efa\u7535\u8def\u5e76\u6253\u5370\u5b83\uff0c\u8fd9\u4f1a\u751f\u6210\u53e6\u4e00\u4e2a\u6f02\u4eae\u7684ascii\u56fe\uff1a\n0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500M\uff08&#39\uff1bb&#39\uff1b\uff09\u2500\u2500\u2500 \u2502 \u25021: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u5341\u3001\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u8981\u5728IonQ\u786c\u4ef6\u4e0a\u8fd0\u884c\uff0c\u8bf7\u521b\u5efa\u4e00\u4e2aIonQ\u3002\u670d\u52a1\u5bf9\u8c61\uff0c\u4f7f\u7528API\u5bc6\u94a5\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u9488\u5bf9\u670d\u52a1\u8fd0\u884c\uff1a\n\u8fdb\u53e3cirq\u3002ionq as ionq#\u521b\u5efa\u4e00\u4e2aionq\u3002\u670d\u52a1\u5bf9\u8c61\u3002\u670d\u52a1=ionq\u3002\u670d\u52a1\uff08api_key=api_key\uff09#\u9488\u5bf9\u8be5\u670d\u52a1\u8fd0\u884c\u7a0b\u5e8f\u3002\u7ed3\u679c=\u670d\u52a1\u3002\u8fd0\u884c\uff08\u7535\u8def=\u8d28\u91cf\u63a7\u5236\uff0c\u91cd\u590d\u6b21\u6570=1000\uff0c\u76ee\u6807=&#39\uff1bqpu&#39\uff1b\uff09#ru\u7684\u8fd4\u56de\u5bf9\u8c61\u662fcirq\u3002\u7ed3\u679c\u5bf9\u8c61\u4ece\u8fd9\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5f97\u5230\u7ed3\u679c\u7684\u76f4\u65b9\u56fe\u3002\u76f4\u65b9\u56fe=\u7ed3\u679c\u3002\u76f4\u65b9\u56fe\uff08\u952e=&#39\uff1bb&#39\uff1b\uff09\u6253\u5370\uff08f&#39\uff1b\u76f4\u65b9\u56fe\uff1a{Histogram}&#39\uff1b\uff09\n\u8fd9\u91cc\u6211\u4eec\u770b\u5230\u4e86\u91cf\u5b50\u8bed\u8a00\u548cSDK\u4e2d\u53e6\u4e00\u79cd\u5e38\u89c1\u7684\u8f93\u51fa\u6a21\u5f0f\uff1a\u6211\u4eec\u7684\u4f4d\u5b57\u7b26\u4e32\u4ee5\u6574\u6570\u683c\u5f0f\u8868\u793a\uff0c\u5176\u4e2d11\u8868\u793a\u4e3a3\uff0c10\u8868\u793a\u4e3a2\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\nPennylane\u4e0e\u4e4b\u524d\u7684\u6846\u67b6\u6709\u4e9b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u5173\u6ce8\u91cf\u5b50\u673a\u5668\u5b66\u4e60\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u57fa\u672c\u7684\u7535\u8def\u5408\u6210\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u4e00\u4e2a\u949f\u5f62\u5bf9\uff0c\u5c31\u50cf\u524d\u9762\u7684\u4f8b\u5b50\u4e00\u6837\u3002\n\u9996\u5148\uff0c\u4f7f\u7528\u7ec8\u7aef\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aIONQ_API_KEY\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5e76\u4f7f\u7528\u60a8\u7684API\u5bc6\u94a5\u2014\u2014\u5982\u679c\u60a8\u6b63\u5728\u6d4f\u89c8\uff0cCirq\u548cQiskit\u793a\u4f8b\u5c06\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u5982\u4f55\u83b7\u53d6\u5bc6\u94a5\u3002\n\u4e00\u65e6\u6211\u4eec\u5728\u73af\u5883\u4e2d\u8bbe\u7f6e\u4e86api\u5bc6\u94a5\uff0c\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u5c06\u521b\u5efa\u5e76\u8fd0\u884c\u6211\u4eec\u7684Bell\u5bf9\u3002\n\u5bfc\u5165\u96c6\u5408\u5c06pennylane\u4f5c\u4e3aqmlfrom pennylane_ionq import optsdev=qml\u5bfc\u5165\u3002\u8bbe\u5907\uff08&#34\uff1bionq.qpu&#34\uff1b\uff0c\u8fde\u7ebf=2\uff0c\u653e\u70ae=1000\uff09@qml\u3002qnode\uff08dev\uff09def circuit\uff08\uff09\uff1aqml\u3002\u963f\u8fbe\u739b\uff08\u5bfc\u7ebf=0\uff09qml\u3002CNOT\uff08\u8fde\u7ebf=[0\uff0c1]\uff09\u8fd4\u56deqml\u3002probs\uff08wires=[0,1]\uff09results=\u96c6\u5408\u3002\u8ba1\u6570\u5668\uff08dict\uff09\u679a\u4e3e\uff08circuit\uff08\uff09\u3002\u6253\u5370\uff08\u7ed3\u679c\uff09\nProjectQ\u662f\u4e00\u4e2a\u5f00\u6e90\u91cf\u5b50\u7f16\u7a0b\u6846\u67b6\uff0c\u7531\u82cf\u9ece\u4e16ETH\u5f00\u53d1\u3002\u8fd9\u4e2a\u6846\u67b6\u6709\u4e00\u4e2a\u5f88\u9177\u7684\u5730\u65b9\uff0c\u90a3\u5c31\u662f\u5b83\u6709\u8bb8\u591a\u5bf9\u4eff\u771f\u6709\u7528\u7684\u4f18\u5316\uff1a\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6a21\u62df\u91cf\u5b50\u7cfb\u7edf\u65f6\u6a21\u4eff\u5927\u578b\u9884\u8a00\u673a\u7684\u52a8\u4f5c\uff0c\u800c\u4e0d\u9700\u8981\u5c06\u5b83\u4eec\u7f16\u8bd1\u6210\u4f4e\u7ea7\u95e8\u3002\u66f4\u591a\u5173\u4e8eProjectQ\u548cIonQ\u5165\u95e8\u7684\u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\n\u50cf\u6211\u4eec\u7684\u5176\u4ed6SDK\u4e00\u6837\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u548c\u6d4b\u91cf\u949f\u5f62\u5bf9\u3002\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5f15\u64ce\uff0c\u4f7f\u7528api\u5bc6\u94a5\u5728IonQ\u786c\u4ef6\u4e0a\u6267\u884c\u7535\u8def\uff1a\n\u5bfc\u5165\u9879\u76eeQ\u3002\u8bbe\u7f6e\u3002\u4eceprojectq\u5bfc\u5165\u4e3b\u5f15\u64ce\u4eceprojectq\u5bfc\u5165\u3002\u540e\u7aef\u5bfc\u5165IonQBackend#\u8bbe\u7f6e\u4f60\u7684IonQ API tokentoken=API#\u5bc6\u94a5#\u521b\u5efa\u548cIonQ\u540e\u7aef\u4ee5\u53ca\u76f8\u5e94\u7684\u7f16\u8bd1\u5668\uff1adevice=&#39\uff1bionq_qpu\u548c#39\uff1bbackend=IonQBackend\uff08verbose=True\uff0ctoken=token\uff0cdevice=device\uff0cnum_runs=1000\uff0c\uff09compilers=projectq\u3002\u8bbe\u7f6e\u3002ionq\u3002\u83b7\u53d6\u5f15\u64ce\u5217\u8868\uff08\u4ee4\u724c=\u4ee4\u724c\uff0c\u8bbe\u5907=\u8bbe\u5907\uff0c\uff09#\u521b\u5efa\u4e3b\u5f15\u64ce\uff1a\u5f15\u64ce=\u4e3b\u5f15\u64ce\uff08\u540e\u7aef\uff0c\u5f15\u64ce\u5217\u8868=\u7f16\u8bd1\u5668\uff09\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u5bf9\u949f\u3002ProjectQ\u4f7f\u7528\u7ba1\u9053\u64cd\u4f5c\u7b26\u201c|\u201d\u5c06\u95e8\u5e94\u7528\u4e8e\u91cf\u5b50\u4f4d\u3002\n\u6765\u81eaprojectq\u3002ops import All\uff0cH\uff0cCNOT\uff0cMeasure#\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u7528ProjectQ enginedef bell_state\uff08eng\uff09\u5e94\u7528\u4e00\u4e2abell\u72b6\u6001\uff1a#\u5206\u914d\u4e24\u4e2a\u91cf\u5b50\u4f4dcircuit=eng.Allocate_qreg\uff082\uff09q0\uff0cq1=circuit#\u521b\u5efa\u4e00\u4e2abell\u5bf9\u5e76\u6d4b\u91cf\u5b83\u3002H | q0 CNOT |\uff08q0\uff0cq1\uff09All\uff08Measure\uff09| circuit#flushing\u5c06\u7535\u8def\u63d0\u4ea4\u7ed9IonQ&#39\uff1bs API eng.flush\uff08\uff09#\u73b0\u5728\uff0c\u8fd4\u56de\u4f5c\u4e1a\u7ed3\u679creturn eng.backend\u3002\u83b7\u53d6_\u6982\u7387\uff08\u7535\u8def\uff09#\u5c06\u949f\u5f62\u72b6\u6001\u7535\u8def\u5e94\u7528\u4e8e\u6211\u4eec\u7684\u5f15\u64ceprobs=\u949f\u5f62\u72b6\u6001\uff08\u5f15\u64ce\uff09\u6253\u5370\uff08probs\uff09\nPytket\u662f\u5251\u6865\u91cf\u5b50\u8ba1\u7b97\u516c\u53f8\uff08Cambridge quantum Computing\uff09\u5f00\u53d1\u7684\u7528\u4e8e\u91cf\u5b50\u7f16\u7a0b\u7684python\u5de5\u5177\u5305\uff0c\u662f\u5176\u66f4\u5927\u7684tket\u5de5\u5177\u94fe\u7684\u6269\u5c55\u3002\n\u4e00\u65e6\u6211\u4eec\u7684\u7535\u8def\u5efa\u6210\uff0c\u6240\u6709\u8fd9\u4e9b&#39\uff1b\u5de6\u8fb9\u662f\u521b\u5efa\u4e00\u4e2a\u540e\u7aef\uff0c\u4e3a\u540e\u7aef\u7f16\u8bd1\u7535\u8def\uff0c\u7136\u540e\u8fd0\u884c\u5b83\u3002\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cXACC\u662f\u4e00\u4e2a\u6df7\u5408\u91cf\u5b50/\u7ecf\u5178\u4f53\u7cfb\u7ed3\u6784\u7684\u6846\u67b6\u3002XACC\u7531\u6a61\u6811\u5cad\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u7684\u4e00\u4e2a\u56e2\u961f\u751f\u4ea7\uff0c\u5e76\u652f\u6301\u5927\u91cf\u7f16\u8bd1\u5668\u3001\u6a21\u62df\u5668\u548c\u91cf\u5b50\u786c\u4ef6\u3002\u8ba9\u6211\u4eec\u7528\u5b83\u6765\u521b\u5efa\u6211\u4eec\u73b0\u5728\u719f\u6089\u7684\u949f\u5bf9\u3002\n\u5bfc\u5165xaccionq=xacc\u3002getAccelerator\uff08&#39\uff1bionq:qpu&#39\uff1b\uff09\u7f16\u8bd1\u5668=xacc\u3002getCompiler\uff08&#34\uff1bxasm&#34\uff1b\uff09ir=\u7f16\u8bd1\u5668\u3002\u7f16\u8bd1\uff08r&#34\uff1b&#34\uff1b&#34\uff1b#qpu__;void hellobell\uff08qbit q\uff09{H\uff08q[0]\uff09\uff1bCX\uff08q[0]\uff0cq[1]\uff09\uff1b\u5ea6\u91cf\uff08q[0]\uff09\uff1b\u5ea6\u91cf\uff08q[1]\uff09&#34;&#34;&#34;, ionq\uff09buffer=xacc\u3002qalloc\uff082\uff09r=ionq\u3002\u6267\u884c\uff08buffer\uff0cir.getComposite\uff08&#34\uff1bhellobell&#34\uff1b\uff09\u7ed3\u679c=\u7f13\u51b2\u533a\u3002getMeasurementCounts\uff08\uff09\u6253\u5370\uff08\u7ed3\u679c\uff09\n\u8fd9\u5c31\u662f\u4e03\u4e2a\u91cf\u5b50SDK\uff08\u548c\u4e09\u4e2a\u4e91\u63d0\u4f9b\u5546\uff09\u7684\u4e03\u79cd\u201c\u4f60\u597d\uff0c\u8bb8\u591a\u4e16\u754c\u201d\u7684\u65b9\u5f0f\uff01\n\u6211\u4eec\u5f88\u81ea\u8c6a\u80fd\u591f\u63d0\u4f9b\u5bf9\u6240\u6709\u8fd9\u4e9b\u5de5\u5177\u7684\u786c\u4ef6\u8bbf\u95ee\u2014\u2014\u65e0\u8bba\u4f60\u60f3\u4f7f\u7528\u4ec0\u4e48\u5de5\u5177\u6765\u5b9e\u73b0\u91cf\u5b50\u8ba1\u7b97\u7684\u4e0b\u4e00\u4e2a\u91cd\u5927\u7a81\u7834\uff0c\u4f60\u90fd\u53ef\u4ee5\u5c06\u5b83\u4eec\u4e0eIonQ\u786c\u4ef6\u4e00\u8d77\u4f7f\u7528\u3002\n\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u60a8\u5bf9\u4f7f\u7528\u81ea\u5df1\u7684\u5de5\u5177\u4e0eAPI\u8fdb\u884c\u4ea4\u4e92\u611f\u5174\u8da3\uff0c\u5b8c\u6574\u7684API\u53c2\u8003\u8d44\u6599\u5c06\u8be6\u7ec6\u4ecb\u7ecdHTTP\u8c13\u8bcd\u548c\u7aef\u70b9\u3001\u9884\u671f\u7684\u54cd\u5e94\u683c\u5f0f\uff0c\u4ee5\u53ca\u672c\u6307\u5357\u4e2d\u672a\u6d89\u53ca\u7684\u5176\u4ed6\u529f\u80fd\u3002\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u6211\u4eec\u4e5f\u5f88\u4e50\u610f\u63d0\u4f9b\u5e2e\u52a9\u2014\u2014\u4f7f\u7528\u6211\u4eec\u7684\u8054\u7cfb\u65b9\u5f0f\u3001twitter\u6216\u652f\u6301\u4e2d\u5fc3\u8054\u7cfb\u6211\u4eec\u3002\n\u6b64\u5916\uff0c\u5982\u679c\u4f60\u6b63\u5728\u5efa\u8bbe\u5de5\u5177\u548c\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u5728\u5b66\u672f\u673a\u6784\uff0c\u8003\u8651\u7533\u8bf7\u81ea\u7531\u65f6\u95f4\u5728\u6211\u4eec\u7684\u7cfb\u7edf\u901a\u8fc7\u6211\u4eec\u7684\u7814\u7a76\u4fe1\u8d37\u8ba1\u5212\u3002\n\u6211\u4eec\u8fd8\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u6863\u548c\u6307\u5357\u9875\u9762\uff0c\u5176\u4e2d\u5305\u542b\u4e00\u6b65\u4e00\u6b65\u7684\u5feb\u901f\u5165\u95e8\u6307\u5357\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528\u4e0a\u8ff0\u8bed\u8a00\u548cSDK\u8fdb\u884c\u8bbe\u7f6e\uff0c\u8fd8\u6709\u4e00\u4e2a\u6700\u4f73\u5b9e\u8df5\u9875\u9762\u63d0\u4f9b\u4e86\u5145\u5206\u5229\u7528\u6211\u4eec\u7684\u79bb\u5b50\u7cfb\u7edf\u7684\u8be6\u7ec6\u8bf4\u660e\uff0c\u6211\u4eec\u7684\u652f\u6301\u4e2d\u5fc3\u968f\u65f6\u53ef\u4ee5\u5e2e\u52a9\u60a8\u89e3\u51b3\u4efb\u4f55\u53ef\u80fd\u9047\u5230\u7684\u95ee\u9898\u3002\n\u5229\u7528\u91cf\u5b50\u8ba1\u7b97\u7684\u529b\u91cf\uff0c\u65e0\u8bba\u4f60\u4f7f\u7528\u4ec0\u4e48\u4e91\u3001\u8bed\u8a00\u6216SDK\u3002\n\u5f00\u59cb\u9605\u8bfb\u6587\u6863", "note_en": "The incredible promise of quantum computing\u2014to revolutionize industry, to tackle humanity\u2019s most complex problems\u2014is increasingly a point of consensus across academia, commerce, and government. But so, too, is the appreciation of the distance between where we are today and where we aspire to be tomorrow.\n  To cross that distance, we have a choice: to build moats and walls around cutting-edge quantum computer resources, or to build bridges, to meet people where they are, to bring the world-changing potential of quantum computing to as many people as possible. At IonQ, we believe strongly in making sure that everyone that wants to work on advancing the state-of-the-art in our emerging field has the ability to access great hardware, using whatever tools they find best suited to their needs. We believe the paradigm-shattering quantum app is as likely to come from a kid in a garage as it is from a corporate research park.\n  Just a few years ago, quantum computers only had two or three qubits, and programs for these machines were lovingly hand-crafted by physics graduate students in a lab in the basement of a university building. The only tools available to program these were patched-together code, handed down from grad student to grad student, that still treated these devices more as physics experiments than computational tools.\n  But today, as quantum computers with dozens of qubits are being built, and systems with hundreds or even thousands of qubits are on the horizon, the complexity of programming a quantum computer requires a more structured approach. This has led to the birth of a large number of quantum programming frameworks and languages, ranging from fully-fledged programming languages like Microsoft\u2019s Q#, to Python frameworks like IBM\u2019s Qiskit, to basic assembly languages like QASM.\n  Anyone can use these software packages to run simulations from their own computer, but the real value comes in using these languages to run quantum programs on actual quantum hardware.\n  To that end, we\u2019re happy to announce that, with the addition of ProjectQ to our supported libraries, you can now access IonQ hardware using every major quantum framework and language. In celebration, here\u2019s a basic quantum program the quantum version of a \u201cHello World\u201d program \u2014 a \u201dHello Many Worlds,\u201d if you will \u2014in seven of the platforms that enable remote execution on IonQ quantum computers.\n  Harness the power of trapped-ion quantum computing, no matter what cloud, language or SDK you use.\n  Get started  Read the docs\n    The basic quantum program we\u2019ll write is simple. It creates a fully-entangled state between two qubits, and then measures this state. This state is sometimes called a   Bell State, or  Bell Pair, after physicist John Stewart Bell.\n  The measurement results for this program should give us 0 for both qubits or 1 for both qubits, in equal amounts. When running these, we\u2019ll be able to tell that we\u2019re running on real hardware because that\u2019s not always what we get! These errors are what currently limit quantum computers, but the first steps to overcome this with quantum error correction have already begun.\n    IBM\u2019s  Qiskit was one of the first frameworks for programming quantum computers. It provides robust tools for writing quantum programs in python, as well as a variety of additional packages for working with quantum hardware, running common algorithms, and more. Qiskit has a large body of educational materials for learning quantum computing, including an entire  textbook that is a great place for quantum beginners to start learning about this field.\n  Qiskit can be used to run quantum programs against IonQ\u2019s trapped ion quantum computers using our recently announced integration with  Google Cloud Marketplace. If you haven\u2019t signed up yet,  these instructions will walk you through that process, and  this guide will help you obtain an API key for accessing the IonQ service to run quantum programs. We call this API key  API_KEY below \u2014 if you\u2019re following along with this guide, be sure to replace that with a real key, or the programs won\u2019t run!\n  First let\u2019s create the quantum circuit that creates an entangled Bell pair and measures it in Qiskit \u2014 you\u2019ll need the  qiskit and  qiskit_ionq python packages installed before you begin.\n  from qiskit import QuantumCircuit# Create a basic Bell State.qc = QuantumCircuit(2, 2) # 2 qubits, 2 bitsqc.h(0)qc.cx(0, 1)# Measure and put the result into the two bits.qc.measure([0, 1], [0, 1])# Display circuit.print(qc)\n    \u250c\u2500\u2500\u2500\u2510 \u250c\u2500\u2510 q_0: \u2524 H \u251c\u2500\u2500\u25a0\u2500\u2500\u2524M\u251c\u2500\u2500\u2500 \u2514\u2500\u2500\u2500\u2518\u250c\u2500\u2534\u2500\u2510\u2514\u2565\u2518\u250c\u2500\u2510q_1: \u2500\u2500\u2500\u2500\u2500\u2524 X \u251c\u2500\u256b\u2500\u2524M\u251c \u2514\u2500\u2500\u2500\u2518 \u2551 \u2514\u2565\u2518c: 2/\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2569\u2550 0 1\n  To run this circuit on an IonQ Quantum Processing Unit ( QPU for short), you need to first get the QPU backend from the IonQ Provider:\n    Then one sends the job to run on the qubit and waits for the job to be run from the queue of jobs on the IonQ service.\n  from qiskit.providers.jobstatus import JobStatusimport time# Submit the job for execution.qpu_job = qpu.run(qc, shots=1000)# Check if the job is done.while qpu_job.status() is not JobStatus.DONE:print(&#34;Job status is&#34;, qpu_job.status() )time.sleep(60)# Grab a coffee! This can take up to a few minutes.print(&#34;Job status is&#34;, qpu_job.status() )print(qpu_job.get_counts())\n  Job status is JobStatus.QUEUEDJob status is JobStatus.QUEUEDJob status is JobStatus.DONE{&#39;00&#39;: 513, &#39;01&#39;: 6, &#39;10&#39;: 4, &#39;11&#39;: 477}\n      Our ideal outcome is 00: 512, 11: 512. The results we got are mostly correct, but like we said earlier, they\u2019re not all correct because of the computational noise that comes from running on real hardware.\n    Microsoft has a long history of writing their own programming languages, a history they\u2019ve continued with quantum. Their offering for running quantum computations comes is in the form of an entire language, called Q#.\n  Using Q#, anyone with an account on Microsoft\u2019s cloud service  Azure Quantum can run against IonQ\u2019s quantum computers. See  these instructions for getting started on Azure Quantum. In this example we assume that you\u2019ve already set up an Azure Quantum account and quantum workspace.\n  First let\u2019s write the actual quantum program. Q# is written in a C-like dialect that should look familiar to anyone that\u2019s written C# or similar:\n  namespace Bell { open Microsoft.Quantum.Intrinsic; open Microsoft.Quantum.Measurement; operation MeasureEntanglement() : Result[] { use qubits = Qubit[2]; H(qubits[0]); CNOT(qubits[0], qubits[1]); return MultiM(qubits); }}\n  Save this in a file called  Operation.qs and then in the same directory, create a Python file to run this program. You can also use Azure\u2019s  az command line interface to do this \u2014 see the above-linked guide for more details \u2014 but we find using python a little easier to set up for demo purposes.\n  import qsharpimport qsharp.azurefrom Bell import MeasureEntanglementqsharp.azure.connect( resourceId=&#34;the name of your quantum resource&#34;, location=&#34;East US&#34;,)qsharp.azure.target(&#34;ionq.qpu&#34;)result = qsharp.azure.execute(MeasureEntanglement, shots=1000, jobName=&#34;Bell&#34;)print(result)\n  {\u2018[0, 0]\u2019: 0.50, \u2018[1, 1]\u2019: 0.48, \u2018[0, 1]\u2019: 0.02}\n  Note that unlike the previous example, these are returned as a histogram of measurement  probabilities; the percentage of our 1000 shots that ended up as each state. This is the other common way you\u2019ll see quantum circuit output represented.\n    Braket is Amazon\u2019s quantum computing service, which includes a python-based SDK for creating and submitting quantum programs. To run a job on Braket you will need an AWS account on, and have  installed the Amazon braket sdk. Additionally, you\u2019ll need to have set up an s3 bucket to store your results. There are more Braket setup details in  our full Braket guide.\n      Which prints out our same friendly little quantum circuit\u00a0\u2014\u00a0even though the formatting is different here, the circuit is the same!\n    Now let\u2019s get the ionq device and setup the our S3 bucket information:\n  device = AwsDevice(&#34;arn:aws:braket:::device/qpu/ionq/ionQdevice&#34;)# Enter the name of S3 bucket you created earliermy_bucket = &#34;amazon-braket-Your-Bucket-Name&#34; # the name of the bucketmy_prefix = &#34;Your-Folder-Name&#34; # the name of the folder in the buckets3_folder = (my_bucket, my_prefix)\n          Cirq is an open source Python framework for quantum programming developed by a team at Google. Cirq can be used to run quantum programs against IonQ\u2019s trapped ion quantum computers using our recently announced integration with Google Cloud Marketplace. And since Cirq is developed by Google, this is of course, the most synergistic way to run on GCM.\n  You can use  these instructions to get started on GCM, and  this guide will help you obtain an API key for accessing the IonQ service. Again, we call this API key  API_KEY below, but if you\u2019re following along with this guide, be sure to replace that with a real key!\n  Again, we&#39;ll start by first creating the circuit for our Bell pair and printing it, which produces another nice ascii diagram:\n    0: \u2500\u2500\u2500H\u2500\u2500\u2500@\u2500\u2500\u2500M(&#39;b&#39;)\u2500\u2500\u2500 \u2502 \u25021: \u2500\u2500\u2500\u2500\u2500\u2500\u2500X\u2500\u2500\u2500M\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    To run on IonQ hardware, create a  ionq.Service object, authenticate with your API key, and run against the  Service:\n  import cirq.ionq as ionq# Create a ionq.Service object.service = ionq.Service(api_key=API_KEY)# Run a program against the service.result = service.run(circuit=qc, repetitions=1000, target=&#39;qpu&#39;)# The return object of the ru is a cirq.Result object.# From this object you can get a histogram of results.histogram = result.histogram(key=&#39;b&#39;)print(f&#39;Histogram: {histogram}&#39;)\n    Here we see another common output pattern in quantum languages and SDKs: our bitstrings are represented in their integer format, where  11 is represented as  3,  10 as  2, and so-on.\n    Pennylane is a bit different from the previous frameworks, as it\u2019s primarily focused on quantum machine learning, not just basic circuit synthesis. Still, we can use it in a form that allows us to create a Bell pair like in the previous examples.\n  Start by using a terminal to create an environment variable called  IONQ_API_KEY with your API key \u2014 if you\u2019re skimming around, the Cirq and Qiskit examples explain in more detail how to get a key.\n  Once we\u2019ve set our api key in the environment, the following short snippet of code creates and runs our Bell pair.\n  import collectionsimport pennylane as qmlfrom pennylane_ionq import opsdev = qml.device(&#34;ionq.qpu&#34;, wires=2, shots=1000)@qml.qnode(dev)def circuit(): qml.Hadamard(wires=0) qml.CNOT(wires=[0, 1]) return qml.probs(wires=[0, 1])results = collections.Counter(dict(enumerate(circuit().tolist())))print(results)\n      ProjectQ is an open source quantum programming framework developed out of ETH Zurich. One cool thing about this framework is that it has many optimizations useful for  emulation: that is, mimicking the action of large  oracles in simulating quantum systems without needing to compile these to low level gates. More details on getting started with ProjectQ and IonQ  can be found here.\n  Like our other SDKs, we can also use it to create and measure a Bell pair.\n  First we need to create an  engine for executing circuits on IonQ hardware using our api key:\n  import projectq.setups.ionqfrom projectq import MainEnginefrom projectq.backends import IonQBackend# Set your IonQ API tokentoken = API_KEY# Create and IonQ backend and respective compilers:device = &#39;ionq_qpu&#39;backend = IonQBackend( verbose=True, token=token, device=device, num_runs=1000,)compilers = projectq.setups.ionq.get_engine_list( token=token, device=device,)# Create the main engine:engine = MainEngine(backend, engine_list=compilers)\n  Now let\u2019s create our Bell pair. ProjectQ uses the pipe operator `|` to apply gates to qubits.\n  from projectq.ops import All, H, CNOT, Measure# Define a function to apply a bell state using a ProjectQ enginedef bell_state(eng): # Allocate two qubits circuit = eng.allocate_qureg(2) q0, q1 = circuit # Create a Bell pair and measure it. H | q0 CNOT | (q0, q1) All(Measure) | circuit # flushing submits the circuit to IonQ&#39;s API eng.flush() # Now, return the job results return eng.backend.get_probabilities(circuit)# Apply the bell state circuit to our engineprobs = bell_state(engine)print(probs)\n        Pytket is a python toolkit for quantum programming developed by Cambridge Quantum Computing, an extension of their larger tket toolchain.\n        Once we have our circuit built, all that&#39;s left is to create a backend, compile the circuit for the backend, and then running it.\n        Last but not least,  XACC is a framework for hybrid quantum / classical architectures. XACC was produced by a team at Oak Ridge National Lab, and has support for a large number of compilers, simulators, and quantum hardware. Let\u2019s use it to create our now-familiar Bell pair.\n  import xaccionq = xacc.getAccelerator(&#39;ionq:qpu&#39;)compiler = xacc.getCompiler(&#34;xasm&#34;)ir = compiler.compile(r&#34;&#34;&#34;__qpu__ void hellobell(qbit q) { H(q[0]); CX(q[0], q[1]); Measure(q[0]); Measure(q[1]);} &#34;&#34;&#34;, ionq)buffer = xacc.qalloc(2)r = ionq.execute(buffer, ir.getComposite(&#34;hellobell&#34;))results = buffer.getMeasurementCounts()print(results)\n        There you have it, seven ways to say \u201cHello Many Worlds\u201d across seven quantum SDKs (and three cloud providers)!\n  We\u2019re proud to be able to provide hardware access to all of them \u2014 no matter what tools you want to use to come up with the next great breakthrough in quantum computing, you can use them with IonQ hardware.\n  If you&#39;re interested in working on your own tools to interact with the API, the full  API Reference has details on HTTP verbs and endpoints, expected response formats, and other features not covered in this guide. We\u2019d also be happy to help if and when you run into any issues \u2014 reach out to us using  our contact form, our  twitter, or the  support center.\n  Also, if you\u2019re building tools and work as part of work at an academic institution, consider applying for free time on our systems through our  research credits program.\n  We also have a full  docs and guides page with step-by-step quickstart guides that go into more detail about getting set up with the above languages and SDKs, and a  best practices page provides detailed instructions for getting the most out of our trapped-ion systems, and our  support center is always available to help you solve any problems you might run into.\n  Harness the power of trapped-ion quantum computing, no matter what cloud, language or SDK you use.\n  Get started  Read the docs", "posttime": "2022-02-17 14:42:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91cf\u5b50,quantum", "title": "\u4f60\u597d\uff0c\u4e03\u79cd\u91cf\u5b50\u8bed\u8a00\u4e2d\u7684\u8bb8\u591a\u4e16\u754c\uff082021\u5e74\uff09", "title_en": "Hello Many Worlds in Seven Quantum Languages (2021)", "transed": 1, "url": "https://ionq.com/posts/june-24-2021-hello-many-worlds", "via": "", "real_tags": ["\u91cf\u5b50", "quantum"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073849, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u4e2aSaaS\u5e94\u7528\u90fd\u9700\u8981\u6743\u9650\u548cRBAC\u3002\u4e3a\u4ec0\u4e48\u4e0d&#39\uff1b\u6211\u4eec\u6ca1\u6709\u6807\u51c6\u7684\u5f00\u53d1\u8005API\u6765\u8fdb\u884c\u6388\u6743\u5417\uff1f\u56e0\u4e3a\u6388\u6743\u662f\u6bd4\u5927\u591a\u6570\u5176\u4ed6\u5f00\u53d1\u4eba\u5458API\u66f4\u96be\u7684\u67b6\u6784\u6311\u6218\u3002\n\u8ba1\u8d39\u3001\u6d88\u606f\u4f20\u9012\u548c\u8eab\u4efd\u9a8c\u8bc1\u7684API\u53ef\u4ee5\u5b8c\u5168\u57fa\u4e8eSaaS\uff0c\u4f46\u6388\u6743\u662f\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u7684\u5173\u952e\u8def\u5f84\u3002\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u50cf\u5e93\u4e00\u6837\u8f7b\u91cf\u7ea7\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u8fd4\u56de\u7ed3\u679c\u3002\u540c\u65f6\uff0c\u5b83\u9700\u8981\u63d0\u4f9b\u57fa\u4e8e\u4e91\u7684\u5f00\u53d1\u8005API\u7684\u63a7\u5236\u5e73\u9762\u4f18\u52bf\u3002\n\u5f88\u96be\u76f8\u4fe1\uff0c\u57282022\u5e74\uff0c\u6bcf\u4e00\u6b3eSaaS\u5e94\u7528\u7a0b\u5e8f\u90fd\u5fc5\u987b\u91cd\u65b0\u53d1\u660e\u8fd9\u4e2a\u8f6e\u5b50\u3002\u6211\u4eec\u6210\u7acbAserto\u662f\u4e3a\u4e86\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u5e76\u6210\u4e3a\u6743\u5a01\u7684\u6388\u6743\u5f00\u53d1\u8005API\u3002\n\u4eca\u5929\uff0c\u6211\u4eec\u5411\u6240\u6709\u5e0c\u671b\u4ece\u4e00\u5f00\u59cb\u5c31\u6b63\u786e\u6784\u5efa\u6743\u9650\u548cRBAC\u7684\u5f00\u53d1\u4eba\u5458\u655e\u5f00\u5927\u95e8\u3002\u6211\u4eec\u8fd8\u6b22\u8fce\u90a3\u4e9b\u5e0c\u671b\u7528\u4e00\u4e2a\u575a\u5982\u78d0\u77f3\u7684\u3001\u5b89\u5168\u7684\u9ed8\u8ba4\u6388\u6743\u670d\u52a1\u53d6\u4ee3\u73b0\u6709\u7684\u81ea\u4e3b\u89e3\u51b3\u65b9\u6848\u7684\u56e2\u961f\uff0c\u8be5\u670d\u52a1\u5c06\u968f\u7740\u4ed6\u4eec\u7684\u6210\u529f\u800c\u6269\u5c55\u3002\n\u4e00\u4e2a\u7ed3\u5408\u4e86\u5e93\u548c\u670d\u52a1\u7684\u6700\u4f73\u5143\u7d20\u7684\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5728\u5e94\u7528\u7a0b\u5e8f\u65c1\u8fb9\u8fdb\u884c\u6388\u6743\uff0c\u6216\u8005\u5982\u6211\u4eec\u6240\u8bf4\u7684\u201c\u5728\u8fb9\u7f18\u201d\u3002\u540c\u65f6\uff0c\u5b83\u9700\u8981\u96c6\u4e2d\u7ba1\u7406\u6388\u6743\u51b3\u7b56\u4e2d\u4f7f\u7528\u7684\u5de5\u4ef6\u3002Aserto authorizer\u6253\u5305\u4e3adocker\u5bb9\u5668\uff0c\u60a8\u53ef\u4ee5\u5728\u73af\u5883\u4e2d\u4f5c\u4e3asidecar\u6216\u5fae\u670d\u52a1\u8fd0\u884c\u3002\u5b83\u5c06\u7b56\u7565\u548c\u7528\u6237\u5c5e\u6027\u4ece\u63a7\u5236\u5e73\u9762\u540c\u6b65\u5230\u8fb9\u7f18\u3002\u5b83\u8fd8\u5c06\u51b3\u7b56\u65e5\u5fd7\u4ece\u8fb9\u7f18\u8f6c\u53d1\u56de\u63a7\u5236\u5e73\u9762\u3002\n\u4e3a\u4e86\u4fbf\u4e8e\u5165\u95e8\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6258\u7ba1\u6388\u6743\u7a0b\u5e8f\uff0c\u5b83\u652f\u6301\u4e0e\u8fb9\u7f18\u6388\u6743\u7a0b\u5e8f\u76f8\u540c\u7684API\u3002\u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\u6784\u5efa\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u4f1a\u9047\u5230\u8fb9\u7f18\u6388\u6743\u4eba\u3002\n\u5f53\u8fdb\u5165\u751f\u4ea7\u9636\u6bb5\u65f6\uff0c\u60a8\u53ef\u4ee5\u5c06edge authorizer\u90e8\u7f72\u4e3a\u4e0e\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u5728\u540c\u4e00\u4e2apod\u4e2d\u7684\u4fa7\u8f66\u3002\u975ekubernetes\u5546\u5e97\u53ef\u4ee5\u5c06\u5176\u90e8\u7f72\u4e3aVPC\u4e2d\u7684\u5fae\u670d\u52a1\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u5e94\u7528\u7a0b\u5e8f\u548c\u8fb9\u7f18\u6388\u6743\u7a0b\u5e8f\u4e4b\u95f4\u7684\u5ef6\u8fdf\u90fd\u5f88\u4f4e\uff0c\u53ef\u7528\u6027\u4e5f\u5f88\u9ad8\u3002\n\u6211\u4eec&#39\uff1b\u6211\u66fe\u53c2\u4e0e\u8fc7OpenStack\u3001Cloud Foundry\u548cKubernetes\u7b49\u5f00\u6e90\u9879\u76ee\uff0c\u56e0\u6b64\u6211\u4eec\u77e5\u9053\u4f5c\u4e3a\u751f\u6001\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u6240\u5e26\u6765\u7684\u529b\u91cf\u3002Aserto\u4ee5\u5f00\u653e\u653f\u7b56\u4ee3\u7406\u9879\u76ee\u4e3a\u57fa\u7840\uff0c\u8be5\u9879\u76ee\u53bb\u5e74\u901a\u8fc7\u4e86\u6bd5\u4e1a\u91cc\u7a0b\u7891\u3002OPA\u7528\u4e8e\u57fa\u7840\u8bbe\u65bd\u9879\u76ee\uff0c\u5982gatekeeper\u548cconftest\u3002OPA\u793e\u533a\u5df2\u7ecf\u53d1\u5c55\u5230\u4e16\u754c\u5404\u5730\u7684\u6570\u5343\u540d\u5de5\u7a0b\u5e08\uff0c\u8de8\u8d8a\u4e86\u8bb8\u591a\u6280\u672f\u516c\u53f8\u3002\n\u57fa\u4e8eOPA\u7684\u6784\u5efa\u610f\u5473\u7740\u6211\u4eec\u7684\u5ba2\u6237\u4f7f\u7528\u4e00\u4e2a\u5f00\u6e90\u5f15\u64ce\u548c\u7b56\u7565\u8bed\u8a00\uff0c\u8fd9\u5728\u5176\u4ed6\u7528\u4f8b\u4e2d\u5df2\u7ecf\u88ab\u91c7\u7528\u3002\u5b83\u8fd8\u51cf\u5c11\u4e86\u5bf9\u4f9b\u5e94\u5546\u9501\u5b9a\u7684\u62c5\u5fe7\uff0c\u56e0\u4e3a\u5ba2\u6237\u53ef\u4ee5\u66f4\u6362\u4f9b\u5e94\u5546\u6216\u9009\u62e9\u76f4\u63a5\u5728\u5f00\u6e90\u9879\u76ee\u4e0a\u6784\u5efa\u3002\nOPA\u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u5f15\u64ce\uff0c\u4f46\u5176\u653f\u7b56\u7684\u539f\u751f\u6253\u5305\u683c\u5f0f\u662f\u4e00\u4e2a\u969c\u788d\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7f3a\u4e4f\u73b0\u4ee3\u5305\u88c5\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u4e9b\u5173\u952e\u5143\u7d20\uff0c\u5982\u56fe\u50cf\u6807\u8bb0\u3001\u7248\u672c\u63a7\u5236\u548c\u7b7e\u540d\u3002\u963f\u745f\u6258\u91c7\u7528\u4e86\u719f\u6089\u7684&#34\uff1bdocker\u548c#34\uff1b\u5de5\u4f5c\u6d41\uff0c\u5e76\u5c06\u8fd9\u4e9b\u529f\u80fd\u5f15\u5165OPA\u7b56\u7565\u3002\nAserto\u5efa\u7acb\u5728\u5f00\u653e\u5f0f\u96c6\u88c5\u7bb1\u5021\u8bae\uff08OCI\uff09\u548cSigstore\u751f\u6001\u7cfb\u7edf\u7684\u57fa\u7840\u4e0a\u3002\u6211\u4eec\u5df2\u7ecf\u521b\u5efa\u4e86policy CLI\u548cOpen policy Registry\uff0c\u4f5c\u4e3a\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u7684100%\u5f00\u6e90\u5de5\u5177\uff0c\u65e0\u8bba\u4ed6\u4eec\u7684OPA\u4f7f\u7528\u60c5\u51b5\u5982\u4f55\u3002\n\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u4e4b\u95f4\u7684\u5173\u7cfb\u5f88\u91cd\u8981\u3002Aserto\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u8eab\u4efd\u63d0\u4f9b\u8005\u6765\u9a8c\u8bc1\u7528\u6237\u3002Aserto\u4f1a\u5728IDP\u505c\u6b62\u7684\u5730\u65b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u4ece\u800c\u4f7f\u6574\u4e2a\u7528\u6237\u4e0a\u4e0b\u6587\u53ef\u7528\u4e8e\u6388\u6743\u7b56\u7565\u3002\n\u6211\u4eec\u5141\u8bb8\u60a8\u5c06IDP\u540c\u6b65\u5230Aserto\u7684\u76ee\u5f55\uff0c\u5e76\u81ea\u52a8\u5c06\u4efb\u4f55\u5c5e\u6027\u66f4\u6539\u4eceIDP\u4f20\u9001\u5230\u8fb9\u7f18\u3002Aserto\u76ee\u5f55\u8fd8\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u89d2\u8272\u548c\u5c5e\u6027\u6765\u6269\u5145IDP\u5c5e\u6027\u3002\n\u4e0d\u518d\u9700\u8981\u5728\u8bbf\u95ee\u4ee4\u724c\u4e2d\u5d4c\u5165\u9759\u6001\u6743\u9650\uff0c\u8fd9\u662f\u4e0d\u5b89\u5168\u4e14\u7b28\u62d9\u7684\u3002\u6216\u8005\u5bf9\u5e94\u7528\u7a0b\u5e8f\u8bf7\u6c42\u5173\u952e\u8def\u5f84\u4e2d\u7684\u8eab\u4efd\u63d0\u4f9b\u8005/\u76ee\u5f55\u8fdb\u884cHTTP\u8c03\u7528\u3002Aserto\u5728\u8fb9\u7f18\u7f13\u5b58\u6574\u4e2a\u7528\u6237\u4e0a\u4e0b\u6587\uff0c\u8ba9\u60a8\u7684\u7b56\u7565\u4ee5\u4f4e\u5ef6\u8fdf\u548c100%\u53ef\u7528\u6027\u8bbf\u95ee\u5b9e\u65f6\u6570\u636e\u3002\nAserto\u76ee\u524d\u652f\u6301Auth0\u548cOkta\u5f00\u7bb1\u5373\u7528\uff0c\u6211\u4eec\u7684IDP\u63d2\u4ef6SDK\u53ef\u4ee5\u8f7b\u677e\u6dfb\u52a0\u5bf9\u5176\u4ed6\u4eba\u7684\u652f\u6301\uff0c\u5305\u62ec\u60a8\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49IDP\u3002\n\u5728\u4f01\u4e1a\u7ea7\u6388\u6743\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u51b3\u7b56\u90fd\u9700\u8981\u89e3\u91ca\u3002\u51b3\u7b56\u65e5\u5fd7\u5fc5\u987b\u5305\u62ec\u7b56\u7565\u3001\u7528\u6237\u5c5e\u6027\u548c\u5bf9\u6bcf\u4e2a\u51b3\u7b56\u6709\u8d21\u732e\u7684\u8d44\u6e90\u6570\u636e\u3002Aserto\u4e3a\u6bcf\u4e2a\u6388\u6743\u51b3\u7b56\u63d0\u4f9b\u5b8c\u6574\u7684\u5ba1\u6838\u8ddf\u8e2a\u3002\u5b83\u5141\u8bb8\u4f60\u6d41\u5f0f\u4f20\u8f93\u6216\u4e0b\u8f7d\u51b3\u7b56\u65e5\u5fd7\uff0c\u5e76\u5c06\u5b83\u4eec\u8f93\u5165\u4f60\u6700\u559c\u6b22\u7684\u65e5\u5fd7\u5206\u6790\u7cfb\u7edf\uff0c\u5982ELK\u6216Splunk\u3002\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0c\u4efb\u4f55\u5f00\u53d1\u4eba\u5458API\u90fd\u9700\u8981\u6613\u4e8e\u5b66\u4e60\u5e76\u878d\u5165\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002Aserto\u662f\u5408\u540c\u7b2c\u4e00\uff0c\u4e3a\u5e95\u5c42\u5f00\u53d1\u8005\u63d0\u4f9bREST\u548cgRPC API\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u4e3a\u5404\u79cd\u8bed\u8a00\u548c\u6846\u67b6\uff08\u5305\u62ecExpress\uff09\u63d0\u4f9b\u4e86\u60ef\u7528\u7684SDK\u3002js\uff0cReact\uff0cPython\uff0cFlask\u3002\u7f51\uff0c\u7136\u540e\u5f00\u59cb\u3002\u65e0\u8bba\u60a8\u4f7f\u7528\u6211\u4eec\u7684\u4e2d\u95f4\u4ef6\u8fd8\u662fAPI\u4ee3\u7801\uff0cAserto\u90fd\u5f88\u5bb9\u6613\u96c6\u6210\u3002\n\u540c\u6837\u91cd\u8981\u7684\u662f\uff0c\u653f\u7b56\u8bed\u8a00\u9700\u8981\u4f7f\u7b80\u5355\u7684\u4e8b\u60c5\u53d8\u5f97\u5bb9\u6613\uff0c\u4f46\u4e5f\u8981\u8db3\u591f\u7075\u6d3b\uff0c\u4f7f\u4efb\u4f55\u60c5\u51b5\u90fd\u6210\u4e3a\u53ef\u80fd\u3002Rego\u662f\u4e00\u79cd\u901a\u7528\u7684\u7b56\u7565\u8bed\u8a00\uff0c\u4f46\u4e5f\u5e26\u6765\u4e86\u5b66\u4e60\u66f2\u7ebf\u3002\u6211\u4eec\u5df2\u7ecf\u4e3aRBAC\u548cABAC\u98ce\u683c\u7684\u6388\u6743\u7b56\u7565\u5b9a\u4e49\u4e86\u901a\u7528\u6a21\u5f0f\uff0c\u56e0\u6b64\u60a8\u6709\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8d77\u70b9\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u5168\u9762\u7684\u6587\u6863\u3001\u5feb\u901f\u5165\u95e8\u3001\u793a\u4f8b\u548c\u53ef\u6267\u884c\u7684API\u6587\u6863\uff0c\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06Aserto\u96c6\u6210\u5230\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\n\u5e26\u963f\u745f\u6258\u51fa\u53bb\u8f6c\u8f6c\uff0c\u6ce8\u518c\u4e00\u4e2a\u514d\u8d39\u5e10\u6237\uff0c\u6216\u8005\u5728\u6211\u4eec\u7684\u6e38\u4e50\u573a\u4e0a\u8f6c\u4e00\u5708\uff01\u52a0\u5165\u6211\u4eec\u7684Slack\u793e\u533a\uff0c\u83b7\u5f97\u652f\u6301\u5e76\u63d0\u51fa\u95ee\u9898\uff0c\u5e76\u5c31\u5982\u4f55\u4f7fAserto\u9002\u5408\u60a8\u7684\u7528\u4f8b\u5411\u6211\u4eec\u63d0\u4f9b\u4efb\u4f55\u53cd\u9988\u3002", "note_en": "Every SaaS app needs permissions and RBAC. Why don&#39;t we have a standard developer API for authorization? Because authorization is a much harder  architectural challenge than most other developer APIs.\n APIs for billing, messaging, and authentication can be entirely SaaS based, but authorization is in the critical path of every application request. A viable solution has to be as lightweight as a library, returning results in milliseconds. At the same time, it needs to provide the control-plane benefits of cloud-based developer APIs.\n It\u2019s hard to believe that in 2022, every SaaS app still has to reinvent this wheel. We founded Aserto to fill this void and become the definitive developer API for authorization.\n Today we\u2019re opening our doors to any developer that wants to build permissions and RBAC correctly from the start. We also welcome teams that want to replace their existing home-grown solution with a rock-solid, secure-by-default authorization service that scales with their success.\n   A solution that combines the best elements of a  library and a service requires authorization to be done right next to the application, or as we say, \u201cat the edge\u201d. At the same time, it needs to centrally manage the artifacts used in authorization decisions. The Aserto authorizer is packaged as a docker container that you run as a sidecar or microservice in your environment.\u00a0 It syncs policies and user attributes from the control plane to the edge. It also forwards decision logs from the edge back to the control plane.\n To make it easy to get started, we provide a hosted authorizer that supports the same APIs as the edge authorizer. That way, you can build your application without having to worry about standing up an edge authorizer.\n  When it comes time to roll into production, you can deploy the edge authorizer as a sidecar running in the same pod as your application. Non-kubernetes shops can deploy it as a microservice in your VPC. In both cases, you get low-latency and high availability between your application and the edge authorizer.\n   We&#39;ve worked on open source projects such as OpenStack, Cloud Foundry, and Kubernetes, so we know the power that comes from being part of an ecosystem. Aserto builds on the  Open Policy Agent project, which passed its graduation milestone last year. OPA is used by infrastructure projects such as  gatekeeper and  conftest. The OPA community has grown to thousands of engineers across the world, and spans many  technology companies.\n Building on OPA means our  customers use an open source engine and  policy language that are already adopted across other use-cases. It also reduces vendor lock-in concerns, since customers can switch vendors or choose to build directly on the open source project.\n  OPA is a great engine, but its native packaging format for policies is a tarball. This means it lacks some of the critical elements of a modern packaging solution, such as image tagging, versioning, and signing. Aserto adopts the familiar &#34;docker&#34; workflow and brings these features to OPA policies.\n Aserto builds on the shoulders of the  Open Container Initiative (OCI) and  Sigstore ecosystems. We\u2019ve created the  policy CLI and the  Open Policy Registry as 100% open source tools that anyone can use, regardless of their OPA use-case.\n  The relationship between authentication and authorization is an important one. Aserto assumes that you have an identity provider that authenticates the user. Aserto picks up where your IDP leaves off, making the entire user context available to your authorization policy.\n We allow you to sync your IDP(s) to Aserto\u2019s directory, and automatically deliver any attribute changes from your IDP to the edge. The Aserto directory can also augment IDP attributes with roles and properties that are specific to your application.\n No longer do you have to embed static permissions in an access token, which is  insecure and clunky. Or make an HTTP call to your identity provider / directory in the critical path of the application request. Aserto caches the entire user context at the edge, giving your policies access to real-time data at low latency and 100% availability.\n Aserto currently supports Auth0 and Okta out of the box, and our IDP plugin SDK makes it easy to add support for others, including your own custom IDP.\n   In enterprise-grade authorization systems, every decision needs to be explainable. Decision logs must include the policy, user attributes, and resource data that contributed to every decision. Aserto provides full audit trails for every authorization decision. It allows you to stream or download decision logs, and ingest them into your favorite log analytics system, such as ELK or Splunk.\n   Last but not least, any developer API needs to be easy to learn and incorporate into your application. Aserto is contract-first, providing  REST and gRPC APIs for down-to-the-metal developers. On top of these, we provide idiomatic  SDKs for various languages and frameworks, including Express.js, React, Python, Flask, .NET, and Go. Whether you use our middleware or code to the APIs, Aserto is easy to integrate.\n  Just as importantly, the policy language needs to make the simple things easy, yet flexible enough to make any scenario possible.  Rego is a general-purpose policy language, but brings with it a learning curve. We\u2019ve defined common patterns for RBAC- and ABAC-style authorization policies, so you have a good starting point.\n Finally, we have comprehensive  documentation, quickstarts, samples, and executable  API docs that make it easy to integrate Aserto into your application.\n   To take Aserto out for a spin,  sign up for a free account, or give our  playground a whirl! Join our  Slack community to get support and ask questions, and provide us with any feedback on how to make Aserto fit your use-case.", "posttime": "2022-02-17 14:36:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u7528\u4e8e,developer,\u6388\u6743", "title": "Aserto\uff1a\u7528\u4e8e\u6743\u9650\u548cRBAC\u7684\u5f00\u53d1\u4eba\u5458API", "title_en": "Aserto: Developer API for permissions and RBAC", "transed": 1, "url": "https://www.aserto.com/blog/aserto-the-developer-api-for-permissions-and-rbac-is-open-to-all", "via": "", "real_tags": ["\u5f00\u53d1", "\u7528\u4e8e", "developer", "\u6388\u6743"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073848, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u591a\u6570\u56fe\u7406\u8bba\u5bb6\u90fd\u4f1a\u540c\u610f\uff0c\u5728\u73b0\u6709\u7684\u5927\u91cf\u56fe\u4e2d\uff0c\u53ea\u6709\u5c11\u6570\u56fe\u88ab\u8ba4\u4e3a\u662f\u771f\u6b63\u6709\u8da3\u7684\u3002\n\u8fd9\u4e2a\u56fe\u5f62\u5c4b\u9879\u76ee\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u53ef\u884c\u7684\u5b9a\u4e49&#39\uff1b\u6709\u8da3&#39\uff1b\u5e76\u63d0\u4f9b\u7b26\u5408\u6b64\u5b9a\u4e49\u7684\u53ef\u641c\u7d22\u56fe\u5f62\u6570\u636e\u5e93\u3002\u6211\u4eec\u8fd8\u5141\u8bb8\u7528\u6237\u6dfb\u52a0\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u5176\u4ed6\u56fe\u5f62\u3002\u4e3a\u4e86\u907f\u514d\u6ee5\u7528\uff0c\u53ea\u6709\u6ce8\u518c\u7528\u6237\u624d\u80fd\u6dfb\u52a0\u65b0\u56fe\u5f62\u3002\n\u6211\u4eec\u8fd8\u60f3\u4f5c\u4e3a\u56fe\u8868\u5217\u8868\uff08\u53ef\u4ee5\u4e0b\u8f7d\u591a\u79cd\u683c\u5f0f\uff09\u548c\u56fe\u8868\u751f\u6210\u5668\u7684\u5b58\u50a8\u5e93\u3002\nG.Brinkmann\uff0cK.Coolsaet\uff0cJ.Goedgebeur\uff0cH.M\u00e9lot\uff0c\u300a\u56fe\u5f62\u4e4b\u5bb6\uff1a\u6709\u8da3\u56fe\u5f62\u7684\u6570\u636e\u5e93\u300b\uff0c\u79bb\u6563\u5e94\u7528\u6570\u5b66\uff0c161\uff081-2\uff09\uff1a311-3142013\uff08\u5185\u653f\u90e8\uff09\u3002\u53ef\u5728http://hog.grinvin.org\n2020-07-09\uff1a\u73b0\u5728\u53ef\u4ee5\u7528\u7ed9\u5b9a\u7684graph6\u5b57\u7b26\u4e32\u641c\u7d22\u56fe\u5f62\uff08\u800c\u4e0d\u5fc5\u4ece\u6587\u4ef6\u4e0a\u4f20\uff09\u3002", "note_en": "Most graph theorists will agree that among the vast number of graphs that exist there are only a few that can be considered really  interesting.\n It is the aim of this House of Graphs project to find a workable definition of &#39;interesting&#39; and provide a  searchable database of graphs that conform to this definition. We also allow users to add additional graphs which they find interesting. In order to avoid abuse, only  registered users can add new graphs.\n  We would also like to serve as a repository for lists of graphs (which can be downloaded in several formats) and graph generators.\n   G. Brinkmann, K. Coolsaet, J. Goedgebeur, H. M\u00e9lot, House of Graphs: a database of interesting graphs, Discrete Applied Mathematics, 161(1-2):311-314, 2013 ( DOI). Available at http://hog.grinvin.org\n  2020-07-09: It is now possible to  search for a graph with a given graph6 string (rather than having to upload it from a file).", "posttime": "2022-02-17 14:34:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fe\u5f62,house", "title": "\u56fe\u5f62\u4e4b\u5bb6", "title_en": "The House of Graphs", "transed": 1, "url": "https://hog.grinvin.org/", "via": "", "real_tags": ["\u56fe\u5f62", "house"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073847, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ecb\u7ecd1 SSH\u7684\u5bc6\u7801&amp\uff1bGit\uff08Beta\uff09\uff0c\u6240\u6709SSH\u5bc6\u94a5\u7684\u552f\u4e00\u771f\u5b9e\u6765\u6e90\u3002\u4f7f\u75281Password\uff0c\u60a8\u53ef\u4ee5\uff1a\nSSH\u4ee3\u7406\u4e0e\u73b0\u6709\u7684SSH\u5ba2\u6237\u7aef\u4e00\u8d77\u5de5\u4f5c\uff0c\u5e76\u5145\u5f53\u5b83\u4eec\u7684\u5bc6\u94a5\u63d0\u4f9b\u8005\u3002\u5728SSH\u5de5\u4f5c\u6d41\u4e2d\u4f7f\u7528\u5bc6\u94a5\uff0c\u6bd4\u5982\u5728\u4f7f\u7528Git\u5c06\u4ee3\u7801\u7b7e\u5165\u6e90\u4ee3\u7801\u7ba1\u7406\u65f6\uff0c\u6216\u8005\u5728\u767b\u5f55\u865a\u62df\u673a\u65f6\u3002\n1Password\u5c06\u6240\u6709SSH\u5bc6\u94a5\u5b58\u50a8\u5728\u5b89\u5168\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u540e\uff0c\u5141\u8bb8\u60a8\u5728\u9700\u8981\u65f6\u8bbf\u95ee\u5bc6\u94a5\uff0c\u800cSSH\u5bc6\u94a5\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f001Password\u3002\n\u5728\u4f60\u5f00\u59cb\u4e4b\u524d\uff0c\u4f60&#39\uff1b\u6211\u9700\u8981\u5b89\u88c5\u9002\u7528\u4e8eMac\u3001Linux\u6216Windows\u76841Password 8\u684c\u9762\u5e94\u7528\u7684\u6d4b\u8bd5\u7248\u3002\n\u7136\u540e\uff0c\u9009\u62e9\u52a0\u5165SSH\u6d4b\u8bd5\u7248\uff0c\u60a8&#39\uff1bI\u2019\u6211\u9700\u8981\u7f16\u8f911\u5bc6\u78018\u8bbe\u7f6e\u3002json\u6587\u4ef6\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a\n\u5982\u679c\u5b89\u88c5\u4e86jq\uff0c\u53ef\u4ee5\u4f7f\u7528\u6b64\u901f\u8bb0\u81ea\u52a8\u4ee5\u6b63\u786e\u7684\u683c\u5f0f\u6dfb\u52a0\u8bbe\u7f6e\uff1a\njq&#39&#34;\u8d1d\u5854\u3002\u5618\u3002\u5df2\u542f\u7528&#34\uff1b=\u6b63\u786e&#39$HOME/Library/Group\\Containers/2BUA8C4S2C\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u30021\u5bc6\u7801/\u5e93/\u5e94\u7528\u7a0b\u5e8f\\\u652f\u6301/1\u5bc6\u7801/\u6570\u636e/\u8bbe\u7f6e/\u8bbe\u7f6e\u3002json&gt\uff1b\u8bbe\u7f6e\u3002json\u3002tmp&amp&amp\uff1bchmod 600\u8bbe\u7f6e\u3002json\u3002tmp&amp&amp\uff1bmv\u8bbe\u7f6e\u3002json\u3002tmp$HOME/Library/Group\\Containers/2BUA8C4S2C\u3002\u901a\u7528\u57df\u540d\u683c\u5f0f\u30021\u5bc6\u7801/\u5e93/\u5e94\u7528\u7a0b\u5e8f\\\u652f\u6301/1\u5bc6\u7801/\u6570\u636e/\u8bbe\u7f6e/\u8bbe\u7f6e\u3002json\n\u5982\u679c\u4f60&#39\uff1b\u624b\u52a8\u91cd\u65b0\u7f16\u8f91JSON\u6587\u4ef6\uff0c\u786e\u4fdd\u5b83&#39\uff1b\u5728\u4fdd\u5b58\u4e4b\u524d\uff0cJSON\u4ecd\u7136\u6709\u6548\u3002\uff08\u770b\u7740\u4f60\uff0c\u6f0f\u6389\u4e86\u9017\u53f7\u3002\uff09\n\u5982\u679c\u5b89\u88c5\u4e86jq\uff0c\u53ef\u4ee5\u4f7f\u7528\u6b64\u901f\u8bb0\u81ea\u52a8\u4ee5\u6b63\u786e\u7684\u683c\u5f0f\u6dfb\u52a0\u8bbe\u7f6e\uff1a\njq&#39&#34;\u8d1d\u5854\u3002\u5618\u3002\u5df2\u542f\u7528&#34\uff1b=\u6b63\u786e&#39$HOME/\u3002\u914d\u7f6e/1\u5bc6\u7801/\u8bbe\u7f6e/\u8bbe\u7f6e\u3002json&gt\uff1b\u8bbe\u7f6e\u3002json\u3002tmp&amp&amp\uff1bchmod 600\u8bbe\u7f6e\u3002json\u3002tmp&amp&amp\uff1bmv\u8bbe\u7f6e\u3002json\u3002tmp$HOME/\u3002\u914d\u7f6e/1\u5bc6\u7801/\u8bbe\u7f6e/\u8bbe\u7f6e\u3002json\n\u5982\u679c\u4f60&#39\uff1b\u624b\u52a8\u91cd\u65b0\u7f16\u8f91JSON\u6587\u4ef6\uff0c\u786e\u4fdd\u5b83&#39\uff1b\u5728\u4fdd\u5b58\u4e4b\u524d\uff0cJSON\u4ecd\u7136\u6709\u6548\u3002\uff08\u770b\u7740\u4f60\uff0c\u6f0f\u6389\u4e86\u9017\u53f7\u3002\uff09\n\u7f16\u8f91JSON\u6587\u4ef6\u65f6\uff0c\u8bf7\u786e\u4fdd\u5b83&#39\uff1b\u5728\u4fdd\u5b58\u4e4b\u524d\uff0cJSON\u4ecd\u7136\u6709\u6548\u3002\uff08\u770b\u7740\u4f60\uff0c\u6f0f\u6389\u4e86\u9017\u53f7\u3002\uff09\n\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u751f\u6210\u548c\u586b\u5145SSH\u5bc6\u94a5\uff0c\u60a8&#39\uff1b\u6211\u8fd8\u9700\u8981\u5b89\u88c51Password\u6269\u5c55\u7684\u6d4b\u8bd5\u7248\u3002\n\u7136\u540e\uff0c\u8981\u5728\u6269\u5c55\u4e2d\u6253\u5f00SSH\u6d4b\u8bd5\u7248\uff0c\u53f3\u952e\u5355\u51fb\u6d4f\u89c8\u5668\u4e2d\u76841\u5bc6\u7801\u56fe\u6807&#39\uff1b\u5355\u51fb\u5de5\u5177\u680f\u5e76\u9009\u62e9\u8bbe\u7f6e\u3002\u5728\u5f00\u53d1\u8005\u90e8\u5206\uff0c\u6253\u5f00SSH\u6d4b\u8bd5\u7248\u3002\n\u4e86\u89e3\u5982\u4f55\u751f\u6210\u548c\u5bfc\u5165SSH\u5bc6\u94a5\uff0c\u4ee5\u53ca\u5982\u679c\u9700\u8981\u5171\u4eab\u516c\u94a5\uff0c\u5982\u4f55\u590d\u5236\u6216\u4e0b\u8f7d\u516c\u94a5\u3002\n\u4e86\u89e3\u5982\u4f55\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u75281Password\u5728\u60a8\u559c\u7231\u7684Git\u6216\u4e91\u5e73\u53f0\u4e0a\u586b\u5145\u516c\u94a5\u3002\n\u4e86\u89e3\u5982\u4f55\u4e3a\u7279\u5b9a\u4e3b\u673a\u914d\u7f6e1Passwrd SSH\u4ee3\u7406\uff0c\u4ee5\u53ca\u5982\u4f55\u907f\u514dOpenSSH\u670d\u52a1\u5668\u7684\u901f\u7387\u9650\u5236\u3002\n\u4e86\u89e31Password SSH\u4ee3\u7406\u7684\u6388\u6743\u6a21\u578b\u3001\u4e0eOpenSSH\u4ee3\u7406\u7684\u533a\u522b\uff0c\u4ee5\u53ca\u4ec0\u4e48&#39\uff1b\u5b83\u4fdd\u5b58\u5728\u5f53\u5730\u7684\u4ed3\u5e93\u91cc\u3002", "note_en": "Introducing 1Password for SSH &amp; Git (Beta), the single source of truth for all your SSH keys. With 1Password, you can:\n  The SSH agent works with your existing SSH clients and acts as their key provider.Use your keys in your SSH workflows, like when you work with Git to check code into source control, or when you log in to virtual machines.\n 1Password stores all your SSH keys behind secure end-to-end encryption, allowing you to access your keys when you need them without your SSH keys ever leaving 1Password.\n   Before you get started, you&#39;ll need to install a beta release of the 1Password 8 desktop app for  Mac,  Linux, or  Windows.\n Then, to opt in to the SSH beta, you&#39;ll need to edit the 1Password 8  settings.json file to add the following setting:\n  If you have   jq installed, you can use this shorthand to automatically add the setting in the correct format:\n jq  &#39;.&#34;beta.ssh.enabled&#34; = true&#39;   $HOME /Library/Group \\  Containers/2BUA8C4S2C.com.1password/Library/Application \\  Support/1Password/Data/settings/settings.json  &gt;  settings.json.tmp  &amp;&amp;   chmod   600  settings.json.tmp  &amp;&amp;   mv  settings.json.tmp  $HOME /Library/Group \\  Containers/2BUA8C4S2C.com.1password/Library/Application \\  Support/1Password/Data/settings/settings.json\n If you&#39;re editing the JSON file manually, make sure it&#39;s still valid JSON before you save it. (Looking at you, missing comma.)\n If you have   jq installed, you can use this shorthand to automatically add the setting in the correct format:\n jq  &#39;.&#34;beta.ssh.enabled&#34; = true&#39;   $HOME /.config/1Password/settings/settings.json  &gt;  settings.json.tmp  &amp;&amp;   chmod   600  settings.json.tmp  &amp;&amp;   mv  settings.json.tmp  $HOME /.config/1Password/settings/settings.json\n If you&#39;re editing the JSON file manually, make sure it&#39;s still valid JSON before saving it. (Looking at you, missing comma.)\n When editing the JSON file, make sure it&#39;s still valid JSON before saving it. (Looking at you, missing comma.)\n   To generate and fill SSH keys in your browser, you&#39;ll also need to  install a beta release of the 1Password extension.\n Then, to turn on the SSH beta in the extension, right-click the 1Password icon in your browser&#39;s toolbar and choose Settings. In the Developer section, turn on the SSH beta.\n      Learn how to generate and import SSH keys, and how to copy or download your public key if you need to share it.\n  Learn how to use 1Password in your browser to fill your public keys on your favourite Git or cloud platforms.\n  Learn how to configure the 1Passwrd SSH agent for specific hosts and how to avoid rate limits with OpenSSH servers.\n     Learn about the authorization model for the 1Password SSH agent, differences from the OpenSSH agent, and what&#39;s kept in local storage.", "posttime": "2022-02-17 14:31:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,git,ssh", "title": "1 SSH\u548cGit\u7684\u5bc6\u7801\uff08\u6d4b\u8bd5\u7248\uff09", "title_en": "1Password for SSH and Git (Beta)", "transed": 1, "url": "https://developer.1password.com/docs/ssh/", "via": "", "real_tags": ["\u5bc6\u7801", "git", "ssh"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073846, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e00\u7bc7\u53ef\u7231\u7684\u8001\u535a\u6587\u300a\u4f60\u7684\u529f\u80fd\u662f\u4ec0\u4e48\u989c\u8272\u300b\uff08WCIYF\uff09\u3002\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8bfb\u8fc7\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8bf7\u4e0d\u8981\u8bfb\u8fd9\u7bc7\u3002\n\u65e2\u7136\u4f60\u5728\u8fd9\u91cc\uff0c\u4f60\u5e94\u8be5\u7406\u89e3\u90a3\u7bc7\u6587\u7ae0\u4e2d\u63cf\u8ff0\u7684\u6709\u8272\u51fd\u6570\u95ee\u9898\u3002\u6211\u60f3\u63a2\u8ba8\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u5c06beyondasync\u95ee\u9898\u6982\u62ec\u5316\u7684\uff0c\u4ee5\u53ca\u5b83\u662f\u5982\u4f55\u4e0e\u5907\u53d7\u54c0\u53f9\u7684monad\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u3002\n\u9605\u8bfb\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u4f60\u5e76\u4e0d\u9700\u8981\u77e5\u9053\u4ec0\u4e48\u662f\u5355\u5b50\uff0c\u4f46\u4f60\u5e94\u8be5\u7406\u89e3\u94fe\u63a5\u6587\u7ae0\u4e2d\u63cf\u8ff0\u7684\u6709\u8272\u51fd\u6570\u95ee\u9898\u3002\n\u6982\u62ec\u4e00\u4e0bWCIYF:Red\u51fd\u6570\u662f\u5f02\u6b65\u51fd\u6570\u3002\u5982\u679c\u9700\u8981\u66f4\u65b0\u84dd\u8272\uff08\u540c\u6b65\uff09\u51fd\u6570\u4ee5\u8c03\u7528\u7ea2\u8272\u51fd\u6570\uff0c\u5219\u9700\u8981\u5c06\u84dd\u8272\u51fd\u6570\u66f4\u6539\u4e3a\u7ea2\u8272\uff0c\u8fd9\u53cd\u8fc7\u6765\u4f1a\u5bfc\u81f4\u7ea2\u8272\u6269\u6563\u3002\u800c\u4e14\uff0c\u8c03\u7528\u7ea2\u8272\u51fd\u6570\u66f4\u75db\u82e6\u3002\u6211\u4e3b\u8981\u5173\u6ce8\u7684\u662f\u53d1\u7ea2\u7684\u6269\u6563\uff0c\u4f46\u6211\u4eec\u4e5f\u4f1a\u8ba8\u8bba\u75bc\u75db\u3002\n\u4f5c\u8005\u63d0\u5230\u627f\u8bfa\u662f\u4e00\u79cd\u7f13\u89e3\u63aa\u65bd\uff0c\u4f46\u6700\u7ec8\u51b3\u5b9a\u4f7f\u7528\u7ebf\u7a0b\uff08\u7eff\u8272\u6216os\uff09\u662f\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u627f\u8bfa\u662f\u5355\u5b50\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\u4f7f\u7528\u5b83\u4eec\u662f\u75db\u82e6\u7684\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u503c\u5f97\u7684\uff1a\u4f60\u5e94\u8be5\u54ac\u7d27\u7259\u5173\uff0c\u628a\u6240\u6709\u4e1c\u897f\u90fd\u67d3\u6210\u7ea2\u8272\u3002\u5f53\u6240\u6709\u4e1c\u897f\u90fd\u662f\u7ea2\u8272\u65f6\uff0c\u4f60\u4e0d\u5fc5\u8003\u8651\u989c\u8272\uff0c\u95ee\u9898\u5c31\u6d88\u5931\u4e86\u3002\n\u6211\u5c06\u7ed9\u51fa\u201c\u7ea2\u8272\u51fd\u6570\u201d\u7684\u51e0\u4e2a\u66ff\u4ee3\u5b9a\u4e49\uff0c\u6211\u4eec\u5c06\u6709\u5927\u81f4\u76f8\u540c\u7684\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6848\u5c06\u59cb\u7ec8\u662f\u4e00\u4e9b\u5355\u5b50\u3002\nWCIYF\u6700\u5927\u7684\u542f\u793a\u662f\u201c\u7ea2\u8272\u51fd\u6570\u662f\u5f02\u6b65\u51fd\u6570\u201d\u3002\u76f8\u53cd\uff0c\u8003\u8651\u629b\u51fa\u5f02\u5e38\u7684\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u90a3\u4e9b\u201c\u7ea2\u8272\u201d\u5417\uff1f\u5982\u679c\u60a8\u6709\u4e00\u4e2a\u4e0d\u629b\u51fa\uff08\u84dd\u8272\uff09\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u7f16\u8f91\u4ee5\u8c03\u7528\u629b\u51fa\u7684\u51fd\u6570\uff0c\u90a3\u4e48\u60a8\u7684\u51fd\u6570\u4e5f\u5c06\u6210\u4e3a\u629b\u51fa\u7684\u51fd\u6570\uff0c\u9664\u975e\u60a8\u80fd\u591f\u5904\u7406\u5f02\u5e38\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u6709\u65f6\u4f60\u53ef\u4ee5\u5904\u7406\u5f02\u5e38\uff0c\u6709\u65f6\u4f60\u4e0d\u80fd\uff0c\u6240\u4ee5\u53ea\u6709\u5f53\u4f60\u4e0d\u80fd\u5904\u7406\u5f02\u5e38\u65f6\uff0c\u7ea2\u8272\u624d\u4f1a\u589e\u52a0\u3002\u6355\u83b7\u5f02\u5e38\u7c7b\u4f3c\u4e8e\u7b49\u5f85\u627f\u8bfa\uff0c\u8ba9\u4ee3\u7801\u5904\u7406\u5f02\u5e38\u6bd4\u7b49\u5f85\u627f\u8bfa\u66f4\u5408\u7406\u3002\u7136\u800c\uff0c\u8ba9\u6211\u4eec\u5173\u6ce8\u4e00\u4e0b\u6211\u4eec\u65e0\u6cd5\u5904\u7406\u5f02\u5e38\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u7ea2\u8272\u786e\u5b9e\u50cf\u5f02\u6b65\u60c5\u51b5\u4e00\u6837\u6269\u6563\u3002\n\u65c1\u6ce8\uff1a\u50cfJava\u8fd9\u6837\u7684\u4e00\u4e9b\u8bed\u8a00\u5df2\u7ecf\u68c0\u67e5\u4e86\u5f02\u5e38\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u786e\u5b9e\u9700\u8981\u66f4\u65b0\u65b9\u6cd5\u7b7e\u540d\uff0c\u5e76\u901a\u8fc7\u58f0\u660e\u629b\u51fa\u5f02\u5e38\u6765\u663e\u5f0f\u5730\u5c06bluefunction\u66f4\u6539\u4e3a\u7ea2\u8272\u3002\u8fd9\u66f4\u9002\u5408\u5f02\u6b65\u60c5\u51b5\uff0c\u56e0\u4e3a\u5b58\u5728\u5b9e\u9645\u7684\uff08\u673a\u68b0\u7684\uff09\u4ee3\u7801\u66f4\u6539\u3002\u5728\u672a\u68c0\u67e5\u7684\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684\u75db\u82e6\u90fd\u843d\u5728\u4e86\u88ab\u5bfb\u547c\u7684\u4eba\u8eab\u4e0a\uff0c\u56e0\u4e3a\u5728\u8fd0\u884c\u65f6\u629b\u51fa\u4e86\u65b0\u7684\u5f02\u5e38\u3002\n\u4f8b\u5916\u5c06\u5feb\u4e50\u7684\u9053\u8def\u4e0e\u60b2\u4f24\u7684\u9053\u8def\u5206\u5f00\uff0c\u5c06\u5178\u578b\u7684\u9053\u8def\u4e0e\u975e\u5178\u578b\u7684\u9053\u8def\u5206\u5f00\uff0c\u5c06\u5e73\u51e1\u7684\u9053\u8def\u4e0e\u4f8b\u5916\u7684\u9053\u8def\u5206\u5f00\u3002\u5b83\u4eec\u6709\u81ea\u5df1\u7684\u63a7\u5236\u6d41\u673a\u5236\u4f5c\u4e3a\u5b9e\u73b0\u7ec6\u82821\u3002\n\u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848\uff0c\u8bb8\u591a\u8bed\u8a00\u6216\u5e93\u4e5f\u5b9a\u4e49\u4e86\u4e00\u79cd\u7c7b\u578b&lt\uff1bSomeErrorType\uff0cDesiredType&gt\uff1b\uff0c\u53ef\u4ee5\u6307\u5b9a\u51fd\u6570\u8fd4\u56de\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\u3002\u4f60\u5fc5\u987b\u9009\u62e9\u4f60\u559c\u6b22\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u4e0e\u672c\u6587\u65e0\u5173\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u8bf4\u6211\u4eec\u9009\u62e9\u4e86\u201cSomeErrorType\u201d\u3002\nWCIYF\u5c06\u627f\u8bfa\u89e3\u91ca\u4e3a\u5c06\u56de\u8c03/\u9519\u8bef\u8fd4\u56de\u7684\u6982\u5ff5\u5177\u4f53\u5316\u3002\u540c\u6837\u5730\uff0c\u4e5f\u4e0d\u662f&lt\uff1bSomeErrorType\uff0c*&gt\uff1b\u5177\u4f53\u5316\u5178\u578b/\u975e\u5178\u578b\u7ed3\u679c\u7684\u6982\u5ff5\u3002\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u51fd\u6570\u73b0\u5728\u90fd\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u63a7\u5236\u6d41\u7684\u503c\uff0c\u800c\u503c\u5f80\u5f80\u6bd4\u884c\u4e3a\u66f4\u5bb9\u6613\u63a8\u7406\u3002\n\u65c1\u6ce8\uff1a\u5728\u6211\u6240\u89c1\u8fc7\u7684\u6bcf\u4e00\u79cd\u8bed\u8a00\u4e2d\uff0c\u627f\u8bfa/\u672a\u6765\u90fd\u6709\u4e00\u4e2a\u6210\u529f\u548c\u5931\u8d25\u7684\u6848\u4f8b\u3002\u6240\u4ee5\u5b83\u672c\u8d28\u4e0a\u8981\u4e48\u662f\u5185\u7f6e\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u56e0\u4e3a\u6709\u5f02\u5e38\u7684\u8bed\u8a00\u901a\u5e38\u65e0\u6cd5\u4fdd\u8bc1\u5f02\u5e38\u4e0d\u4f1a\u53d1\u751f\u3002\u8fd9\u611f\u89c9\u5f88\u50cf\u4efb\u4f55\u4e1c\u897f\u90fd\u53ef\u4ee5\u4e3a\u7a7a\u7684\u8bed\u8a00\u3002\u6211\u4f1a\u5bf9\u4e00\u79cd\u5f3a\u5236\u4f7f\u7528\u53ef\u9009\u7684\u8bed\u8a00\u611f\u5174\u8da3\uff0c\u800c\u4e0d\u662f\u5141\u8bb8null\u5f02\u5e38\u3002\u4e5f\u8bb8\u662f\u54c8\u65af\u514b\u5c14\u5e72\u7684\uff1f\uff01\nWCIYF\u6709\u70b9\u627f\u8ba4\u627f\u8bfa\u6bd4\u64a4\u56de\u627f\u8bfa\u75db\u82e6\uff0c\u4f46\u4e5f\u4e0d\u4ee5\u4e3a\u7136\u5730\u8ba4\u4e3a\u5b83\u4eec\u662f\u534a\u4e2a\u89e3\u51b3\u65b9\u6848\u3002\u6211\u53ea\u60f3\u6307\u51fa\u4e00\u4e9b\u8bed\u8a00\u6709for\u8868\u8fbe\u5f0f\uff08\u4f8b\u5982Scala\uff09\u6216do\u8868\u793a\u6cd5\uff08\u4f8b\u5982Haskell\uff09\uff0c\u8fd9\u8fdb\u4e00\u6b65\u51cf\u8f7b\u4e86\u75db\u82e62\u3002\u4e00\u4e2a\u7c97\u7565\u7684\u4f8b\u5b50\uff1a\n\u8fd9\u662f\u4e00\u4e9b\u865a\u6784\u7684\u4ee3\u7801\uff0c\u7528\u4e8e\u4ece\u7528\u6237id\u5f02\u6b65\u83b7\u53d6\u7528\u6237\uff0c\u7136\u540e\u901a\u8fc7id\u83b7\u53d6\u4ed6\u4eec\u7684\u6240\u6709\u670b\u53cb\u3002\u8bf7\u5141\u8bb8\u6211\u5728\u6240\u6709\u503c\u4e4b\u540e\u4f7f\u7528\u6307\u5b9a\u7684\u7c7b\u578b\uff08typescript\u6837\u5f0f\uff09\u91cd\u590d\u4ee3\u7801\uff1a\ndef getFriends\uff08\u7528\u6237ID\uff09\uff1a\u627f\u8bfa&lt\uff1b\u7528\u6237[]&gt\uff1b=\u5bf9\u4e8e{user:user&lt\uff1b-asyncGetUser\uff08userId\uff09\uff1aPromise&lt\uff1buser&gt\uff1bfriends:user[]&lt\uff1b-user.friends.traverse\uff08asyncGetUser\uff09\uff1aPromise&lt\uff1buser[]&gt\uff1b}\u4ea4\u670b\u53cb\n\u8bf7\u6ce8\u610f&lt\uff1b-\u65e0\u8bba\u4ec0\u4e48\u65f6\u5019\uff0c\u53ea\u8981\u6743\u5229\u662f\u627f\u8bfa\uff0c\u6211\u4eec\u5c31\u6c38\u8fdc\u62e5\u6709\u5b83&lt\uff1bT&gt\uff1b\u3002\u8fd8\u8981\u6ce8\u610f\u627f\u8bfa\u7684\u6fc0\u589e\uff0cgetFriends\u4f1a\u8fd4\u56de\u4e00\u4e2a\u627f\u8bfa\uff0c\u56e0\u4e3aasyncGetUser\u4f1a\u3002traverse\u662fmap\u548cPromise\u7684\u7ed3\u5408\u3002\u6240\u6709\u7684\uff0c\u5e76\u4e14\u5b83\u505a\u4e86\u552f\u4e00\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u6709\u610f\u4e49\u7684\u4e8b\u60c5\u3002\n\u73b0\u5728\uff0c\u5047\u8bbe\u6211\u4eec\u6709syncGetUser\uff0c\u5b83\u8fd4\u56de&lt\uff1bSomeErrorType\uff0c\u7528\u6237&gt\uff1b\u3002\u4ee3\u7801\u76f8\u540c\uff0c\u4f46\u7c7b\u578b\u4e0d\u540c\uff1a\u8981\u4e48&lt\uff1bSomeErrorType\uff0cT&gt\uff1b\u53d6\u4ee3\u627f\u8bfa&lt\uff1bT&gt\u3002\ndef getFriends\uff08userId\uff09\uff1a\u8981\u4e48&lt\uff1bSomeErrorType\uff0c\u7528\u6237[]&gt\uff1b=\u5bf9\u4e8e{user:user&lt\uff1b-syncGetUser\uff08userId\uff09\uff1a\u6216\u8005&lt\uff1bSomeErrorType\uff0c\u7528\u6237&gt\uff1bfriends:user[]&lt\uff1b-user.friendIds.traverse\uff08asyncGetUser\uff09\uff1a\u6216\u8005&lt\uff1bSomeErrorType\uff0c\u7528\u6237[]&gt\uff1b}\u4ea4\u670b\u53cb\n\u6211\u5c06\u4ece\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50\u5f00\u59cb\uff1a\u5728\u67d0\u4e9b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u5355\u9875\u5e94\u7528\u7a0b\u5e8f\uff0c\u5176\u4e2d\u7684\u5fae\u670d\u52a1\u90fd\u5728\u8fdb\u884chttp\u8c03\u7528\uff0c\u5728\u6d4f\u89c8\u5668\u4e4b\u95f4\u548c\u670d\u52a1\u4e4b\u95f4\u53d1\u9001json\u3002\u5728\u6240\u6709\u65e5\u5fd7\u8bed\u53e5\u4e2d\u90fd\u5305\u542b\u4e00\u4e2a\u6bcf\u4e2a\u8bf7\u6c42\u7684\u201c\u76f8\u5173id\u201d\uff0c\u8fd9\u5f88\u597d\u3002\u4e3a\u4e86\u4f7f\u5176\u6b63\u5e38\u5de5\u4f5c\uff0c\u65e0\u8bba\u4f55\u65f6\u767b\u5f55\uff0c\u90fd\u9700\u8981\u63d0\u4f9b\u6b63\u786e\u7684id\u3002\u5b83\u8fd8\u9700\u8981\u5728\u60a8\u5bf9\u53e6\u4e00\u4e2a\u670d\u52a1\u8fdb\u884chttp\u8c03\u7528\u65f6\u53ef\u7528\u3002\u5047\u8bbe\u201c\u7ea2\u8272\u51fd\u6570\u201d\u662f\u9700\u8981\u77e5\u9053\u76f8\u5173id\u7684\u51fd\u6570\u3002\u9274\u4e8e\u6211\u4eec\u9700\u8981\u7528\u4e8e\u65e5\u5fd7\u8bb0\u5f55\u548chttp\u8c03\u7528\u7684id\uff0c\u6211\u4eec\u9884\u8ba1\u7ea2\u8272\u4f1a\u8fc5\u901f\u6269\u6563\u5230\u51e0\u4e4e\u6240\u6709\u5730\u65b9\u3002\n\u7136\u800c\uff0c\u56de\u60f3\u4e00\u4e0b\uff0c\u6211\u4eec\u80fd\u591f\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a\u66f4\u597d\u5730\u4ee3\u8868\u6211\u4eec\u9700\u6c42\u7684\u503c\u6765\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u503c\uff0c\u8be5\u503c\u8868\u793a\u201c\u5bf9\u76f8\u5173id\u7684\u9700\u6c42\u201d\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5373\u3002\ndef getFriends\uff08userId\uff09\uff1aCorrelationId=&gt\uff1bUser[]=\u5bf9\u4e8e{User:User&lt\uff1b-syncGetUser\uff08userId\uff09\uff1aCorrelationId=&gt\uff1b\u7528\u6237\u670b\u53cb\uff1aUser[]&lt\uff1b-User.friendIds.traverse\uff08asyncGetUser\uff09\uff1aCorrelationId=&gt\uff1bUser[]}\u751f\u6210\u670b\u53cb\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4e0d\u5904\u7406\u76f8\u5173Id\uff08\u5b83\u4e5f\u4e0d\u5904\u7406\u5f02\u6b65\u6027\u6216\u9519\u8bef\uff09\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u4e09\u6b21\u7f16\u5199\u4e86\u57fa\u672c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u8ba9\u6211\u4eec\u628a\u4e0d\u540c\u7684\u90e8\u5206\u4f5c\u4e3a\u53d8\u91cf\uff1a\ndef getFriends&lt\uff1bF:Monad&gt\uff1b\uff08userId\uff09\uff1aF&lt\uff1b\u7528\u6237[]&gt\uff1b=\u5bf9\u4e8e{user:user&lt\uff1b-syncGetUser\uff08userId\uff09\uff1aF&lt\uff1buser&gt\uff1bfriends:user[]&lt\uff1b-user.friends.traverse\uff08asyncGetUser\uff09\uff1aF&lt\uff1buser[]&gt\uff1b}\u4ea4\u670b\u53cb\n\u5728\u8fd9\u91cc\uff0c\u6211\u7684\u65b9\u6cd5\u7531F\u53c2\u6570\u5316\uff0c\u4f46\u6709\u4e00\u4e2a\u9650\u5236\uff0c\u5373F\u662fmonad 4\uff08F:monad\uff09\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u66ff\u6362F&lt*&gt\uff1b\u5e26\u7740\u627f\u8bfa&lt*&gt\uff1b\uff0c\u8981\u4e48&lt\uff1bSomeErrorType\uff0c*&gt\uff1b\uff0c\u6216CorrelationId=&gt\uff1b*\u3002\uff08\u5728*\u5904\uff0c\u4f60\u5fc5\u987b\u66ff\u6362\u4f60\u771f\u6b63\u5173\u5fc3\u7684\u7c7b\u578b\uff09\u3002\n\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u7ec4\u5408\u4e1c\u897f\uff0c\u6240\u4ee5F\u53ef\u4ee5\u662fCorrelationId=&gt\uff1b\u627f\u8bfa&lt*&gt\uff1b\u5982\u679cgetUser\u9700\u8981\u4e00\u4e2aCorrelationId\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u662f\u5f02\u6b65\u7684\u3002\n\u8bb8\u591a\u8bed\u8a00\u90fd\u6709\u6cdb\u578b\u7c7b\u578b\u3002\u4ee5\u9635\u5217\u4e3a\u4f8b&lt\uff1bInt&gt\uff1b\uff0c\u6211\u5c06\u6570\u7ec4\u79f0\u4e3a\u5916\u90e8\uff0cInt\u79f0\u4e3a\u5185\u90e8\u3002\u901a\u5e38\uff0c\u4e00\u79cd\u8bed\u8a00\u4f1a\u8ba9\u4f60\u5728\u4e00\u4e2a\u53d8\u91cf\u6570\u7ec4\u4e2d\u521b\u5efa\u5185\u90e8\u53d8\u91cf&lt\uff1bT&gt\uff1b\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4f46\u6211\u4e0d\u77e5\u9053\u4e5f\u4e0d\u5728\u4e4e\u91cc\u9762\u662f\u4ec0\u4e48\u3002\u80fd\u591f\u5728\u5916\u90e8\u8bbe\u7f6e\u53d8\u91cf\u7684\u60c5\u51b5\u4e0d\u592a\u5e38\u89c1\u3002F&lt\uff1bInt&gt\uff1b\u6709\u70b9\u5947\u602a\uff0c\u4f60\u771f\u7684\u4e0d\u77e5\u9053\u5b83\u662f\u4ec0\u4e48\uff0c\u53ea\u6709\u4e00\u4e2a\u5efa\u8bae\u4e0eInt\u6709\u5173\u3002\u7136\u800c\uff0c\u8fd9\u6b63\u662f\u6211\u4eec\u4e09\u4e2a\u4f8b\u5b505\u4e2d\u7684\u53d8\u5316\u3002\n\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2aCorrelationId\uff0c\u4f46\u76f8\u540c\u7684\u6a21\u5f0f\u53ef\u4ee5\u7528\u4e8e\u60a8\u9700\u8981\u7684\u5176\u4ed6\u4e8b\u60c5\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u60f3\u663e\u5f0f\u4f20\u9012\u3002\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u8fde\u63a5\u3001\u7528\u6237\u4f1a\u8bddID\u3001\u7528\u6237\u6388\u6743\u4fe1\u606f\u3002\u4efb\u4f55\u65f6\u5019\u4f60\u60f3\u8981\u4e00\u4e9b\u53ef\u7528\u7684\u4e1c\u897f\uff0c\u4f46\u5e76\u4e0d\u771f\u7684\u60f3\u628a\u5b83\u4f20\u7ed9\u522b\u4eba\u3002\n\u4e00\u53ea\u866b\u5b50\u8fdb\u6765\u4e86\u3002\u7528\u6237\u754c\u9762\u4e2d\u7684\u6570\u5b57\u6709\u8bef\u3002\u6211\u7684\u56e2\u961f\u8d1f\u8d23\u7684\u540e\u7aef\u5b9e\u9645\u4e0a\u53ea\u662f\u8c03\u7528\u5176\u4ed6\u56e2\u961f\u8d1f\u8d23\u7684\u5176\u4ed6API\u3002\u6211\u4eec\u9996\u5148\u8981\u770b\u7684\u662f\u6211\u4eec\u5bf9\u8fd9\u4e9b\u5916\u90e8API\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\uff08\u6bd5\u7adf\uff0c\u5982\u679c\u662f\u4e0a\u6e38\u9519\u8bef\uff0c\u6211\u4eec\u5e0c\u671b\u5c3d\u5feb\u63a8\u5378\u8d23\u4efb\uff09\u3002\u73b0\u5728\uff0c\u7531\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211\u4eec\u4e0d\u60f3\u8bb0\u5f55\u6240\u6709\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5916\u90e8API\u8c03\u7528\uff0c\u6211\u4eec\u90fd\u4f1a\u8fd4\u56de\u5b8c\u6574\u7684\u8bf7\u6c42/\u54cd\u5e94\uff0c\u4ee5\u53ca\u6211\u4eec\u60f3\u8981\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u81f3\u5c11\uff0c\u5728QA\u73af\u5883\u4e2d\u3002\n\u5728\u8fd9\u91cc\uff0cDiagnosticData\u662f\u8bf7\u6c42/\u54cd\u5e94\u6216\u6211\u4eec\u5e0c\u671b\u8fd4\u56de\u4ee5\u5e2e\u52a9\u8bca\u65ad\u95ee\u9898\u7684\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\u3002\u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5141\u8bb8\u591a\u4e2a\u4e1c\u897f\u8fd4\u56de\u3002\u7136\u540e\u8fd4\u56de\u6d4f\u89c8\u5668\u7684json\u5c06\u59cb\u7ec8\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5b83\u5c06\u5305\u542b\u4e00\u4e2a\u989d\u5916\u7684\u5b57\u6bb5\uff0c\u5e76\u5728\u54cd\u5e94\u4e2d\u5e8f\u5217\u5316diagnosticData\u3002\n\u5e0c\u671b\u4efb\u4f55\u505aQA\u7684\u4eba\u90fd\u80fd\u4ece\u6d4f\u89c8\u5668\u4e2d\u7684\u5f00\u53d1\u5de5\u5177\u4e2d\u590d\u5236json\uff0c\u4efb\u4f55\u9519\u8bef\u8bb0\u5f55\u90fd\u4f1a\u5305\u62ec\u6211\u4eec\u6240\u505a\u7684\u6240\u6709API\u8c03\u7528\u3002\u901a\u5e38\uff0c\u8fd9\u5c31\u8db3\u4ee5\u786e\u5b9a\u54ea\u4e2a\u56e2\u961f\u9700\u8981\u91c7\u53d6\u884c\u52a8\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cF\u662f[DiagnosticData[]\uff0c*]\uff0c\u5b83\u7684\u6269\u6563\u6b63\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5411\u63a7\u5236\u5668\u63d0\u4f9b\u989d\u5916\u7684\u6570\u636e\u3002\n\u4e0d\u53ef\u5426\u8ba4\uff0c\u84dd\u8272\u7684\u529f\u80fd\u66f4\u597d\u3002getUser\u7684\u6700\u4f73\u7b7e\u540d\u662f\n\u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u5207\u5b9e\u53ef\u884c\u7684\uff1a\u60a8\u901a\u5e38\u8fd8\u6709\u5176\u4ed6\u8d2f\u7a7f\u5404\u9886\u57df\u7684\u95ee\u9898\uff1a\u8d44\u6e90\u4f7f\u7528\u3001\u9519\u8bef\u5904\u7406\u3001\u4ee3\u7801\u6e05\u6d01\u5ea6\u3001\u76d1\u63a7\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u8fd4\u56de\uff1a\n\u60a8\u4e3a\u81ea\u5df1\u63d0\u4f9b\u4e86\u5f88\u5927\u7684\u7075\u6d3b\u6027\uff0c\u53ef\u4ee5\u4e0d\u5b8c\u5168\u8fd4\u56de\u7528\u6237\u3002\u6211\u4eec\u770b\u5230\u4e86\u4e0d\u540c\u7684\u4f8b\u5b50\uff0c\u5176\u4e2d\u6211\u4eec\u6ca1\u6709\u5b8c\u5168\u8fd4\u56de\u7528\u6237\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u6839\u636e\u4e0a\u4e0b\u6587\u6539\u53d8F\uff0c\u53ea\u8fd4\u56de\u751f\u4ea7\u4e4b\u5916\u7684\u989d\u5916\u6570\u636e\uff0c\u6216\u8005\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u662f\u540c\u6b65\u7684\uff0c\u4f46\u5728\u5b9e\u9645\u8fd0\u884c\u65f6\u662f\u5f02\u6b65\u7684\u3002\n\u4e0d\uff0c\u4e0d\u662f\u771f\u7684\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u6211\u8ba4\u4e3a\u8003\u8651\u5f69\u8272\u51fd\u6570\u548c\u5355\u5b50\u5f88\u6709\u8da3\uff0c\u4f46\u5927\u591a\u6570\u8bed\u8a00\u4e0d\u652f\u6301\u8fd9\u4e9b\u4f7f\u5176\u5b9e\u7528\u7684\u529f\u80fd\u3002\u800c\u4e14\uff0c\u7528\u8fd9\u6837\u7684\u7f16\u7801\u5f88\u96be\u8ba9\u4f60\u7684\u6574\u4e2a\u56e2\u961f\uff08\u5305\u62ec\u672a\u6765\u7684\u961f\u53cb\uff09\u53c2\u4e0e\u8fdb\u6765\u3002\u6240\u4ee5\u4e0d\u8981\u771f\u7684\u8fd9\u4e48\u505a\u3002\n\u6211\u8ba4\u4e3a\u63a7\u5236\u6d41\u65b9\u9762\u4e3b\u8981\u662f\u4ee5\u76f8\u5f53\u5927\u7684\u6982\u5ff5\u4ee3\u4ef7\u8ba9\u4ee3\u7801\u4e0d\u90a3\u4e48\u5197\u957f\u3002\u00a0 \u21a9\ufe0e\n\u5f53\u7136\uff0cjavascript\u6709\u5f02\u6b65/\u7b49\u5f85\u8bed\u6cd5\u3002\u6211\u5f88\u597d\u5947\u8fd9\u662f\u5426\u7b49\u540c\u4e8efor expressions/do\u7b26\u53f7\uff0c\u5e76\u4e14\uff08\u7406\u8bba\u4e0a\uff09\u53ef\u4ee5\u7528\u4e8emonad\u800c\u4e0d\u662fPromise\u3002\u00a0 \u21a9\ufe0e\n\u8fd8\u6709\u5176\u4ed6\u65b9\u6cd5\u53ef\u4ee5\u907f\u514d\u663e\u5f0f\u4f20\u9012\u53c2\u6570\uff0c\u4f46\u8fd9\u53ea\u662f\u4e3a\u4e86\u4e3e\u4f8b\u3002\u00a0 \u21a9\ufe0e\n\u5b83\u5fc5\u987b\u662f\u5355\u5b50\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5355\u5b50\u6765\u8868\u793a\u3002\u00a0 \u21a9\ufe0e\n\u652f\u6301\u8be5\u529f\u80fd\u7684\u8bed\u8a00\u79f0\u4e4b\u4e3a\u201c\u9ad8\u7ea7\u7c7b\u578b\u201d\u3002\u00a0 \u21a9\ufe0e", "note_en": "There\u2019s a lovely old blog post   What Color is Your Function ( WCIYF).If you haven\u2019t read that, please do so instead of reading this one.\n Since you are here, you should understand the  colored function problem described in that post. I\u2019d like to explore how that problem generalized beyondasync concerns and how it connects to the much bemoaned  monad.\n You don\u2019t really need to know what a monad is to start reading this post, but you  should understand the colored function problem described in the linked post.\n  To recap  WCIYF: Red functions are the async ones. If a blue (synchronous) function needsto be updated to call a red one, the blue one needs to be changed to red, which in turn, causes a  proliferation of redness. Also, the red functionsare more painful to call. I\u2019ll mostly be concerned with the  proliferation of redness, but we\u2019ll discuss the pain as well.\n The author mentions Promises as a mitigation, but ultimately decides using threads (green or os) is a better solution.\n  Promises are an example of a monad. There  is pain in using them, but I\u2019llargue it is worth it: you should just bite the bullet and make everything red.When everything is red, you don\u2019t have to think about color, and the problemgoes away.\n I\u2019ll give a few alternative definitions of \u201cred function\u201d, we willhave roughly the same problem, and the solution will always be some monad.\n  The big reveal in  WCIYF is that \u201cRed functions are asynchronous ones\u201d. Consider instead, functions that throw exceptions.Could we consider those \u201cred\u201d? If you have a function that does not throw (blue) and you need to edit it to call a function that throws, then your functionwill also become one that throws,  unless you are able to handle the exception. In practice, there will be times where you can handle the exception and timesthat you can\u2019t, so the redness really only  proliferates when you can\u2019t handle the exception. Catching an exception is the analogue waiting on a promise,and it\u2019s much more reasonable to have code that handles exceptions than code that waits on promises. Nevertheless, let\u2019s focus on the case where we are  not ableto handle the exceptions and so the redness does proliferate like the async case.\n Side note: some languages like Java have  checked exceptions, in this case you really do need to update you method signatures and explicitly change your bluefunction to red by declaring that the exception is thrown. This fits a bit better with the async case since there are actual (mechanical) code changes.In the unchecked case, all the pain falls on whoever is getting paged because of new exceptions being thrown at runtime.\n  Exceptions separate the happy path from the sad path, the typical from the atypical, the unexceptional from the exceptional.They come with their own control flow mechanism as an implementation detail  1.\n As an alternative, many languages or libraries define a type  Either&lt;SomeErrorType, DesiredType&gt;,where you can specify that your function returns one of two things. You have tochoose your preferred error type, which doesn\u2019t matter for this article, so let\u2019sjust say we have chosen \u201c SomeErrorType\u201d.\n WCIYF explains promises as  reifying the concept of passing a callback/errorback. Likewise,  Either&lt;SomeErrorType, *&gt; reifies the concept of typical/atypical outcomes.In both cases, your function now returns a  value that represents the control flow, and  values tend to be easier to reason about than behaviors.\n  Side note: In every language I\u2019ve seen, a Promise/Future has a success and failure case built in. So it essentially has  Either built into it. I  thinkthis is because languages that have exceptions often have no way of guaranteeing that an exception  won\u2019t happen. This feels a lot like languages where anything could be null. I\u2019d be interested in a language that forces the use of  Optional,  Either instead of allowing for  null,  exceptions. Maybe Haskell does this?!\n  WCIYF sort of admits that promises are less painful than callbacks, but also pooh-poohs them as being a half solution. I just want to point outthat some languages have  for expressions (e.g. Scala) or  do notation (e.g. Haskell), which further lessens the pain  2. A rough example:\n  That\u2019s some made up code to asynchronously get a user from their id and then get all their friends by id. Allow me to repeat the code with thetypes specified (typescript style) after all the values:\n def getFriends (userId ) :  Promise&lt;User []&gt;  =  for  { user :  User  &lt;-  asyncGetUser ( userId ) :  Promise&lt;User&gt; friends :  User []  &lt;- user .friendIds .traverse (asyncGetUser ) :  Promise&lt;User []&gt;  }  yield friends\n Notice how on the left of the  &lt;- we always have  T whenever the right is  Promise&lt;T&gt;. Also notice the  proliferatation of the  Promise,  getFriends returns a  Promise because asyncGetUser does.  .traverse is a a combination of   map and   Promise.all, and it does the only thing that makes sense for this code.\n Now instead, suppose we have  syncGetUser which returns  Either&lt;SomeErrorType, User&gt;. The code is the same, except the types:  Either&lt;SomeErrorType, T&gt; replaces  Promise&lt;T&gt; .\n def getFriends (userId ) :  Either&lt;SomeErrorType ,  User []&gt;  =  for  { user :  User  &lt;-  syncGetUser ( userId ) :  Either&lt;SomeErrorType ,  User &gt; friends :  User []  &lt;- user .friendIds .traverse (asyncGetUser ) :  Either&lt;SomeErrorType ,  User []&gt;  }  yield friends\n    I\u2019ll start with a concrete example: For some context, suppose you have a single page app with micro-services all making http calls sending json to and from the browser and between services.It\u2019s nice to have a per-request \u201ccorrelation id\u201d that is included in all the log statements. In order for this to work, the correct id needs to be availablewhenever you log something. It also needs to be available whenever you make and http call to another service. So let\u2019s say \u201cred functions\u201d are functions that need to know the correlation id. Given thatwe need the id for logging and http calls we expect the redness to quickly proliferate almost everywhere.\n   Recall however, that we were able to solve our other problems be returning a value that better represents our needs. So, in this case,we need to return a value that represents \u201cthe need for a correlation id\u201d. For this, we can use a function, i.e.\n     def getFriends (userId ) :  CorrelationId  =&gt;  User []  =  for  { user :  User  &lt;-  syncGetUser ( userId ) :  CorrelationId  =&gt;  User friends :  User []  &lt;- user .friendIds .traverse (asyncGetUser ) :  CorrelationId  =&gt;  User []  }  yield friends\n Note that this code doesn\u2019t deal with the correlation Id. (It also didn\u2019t deal with asynchronicity, or errors).\n  Now that we\u2019ve written essentially the same code three times, let\u2019s pull out the different part as a variable:\n def getFriends &lt;F :  Monad&gt; ( userId ) :  F&lt;User []&gt;  =  for  { user :  User  &lt;-  syncGetUser ( userId ) :  F&lt;User&gt; friends :  User []  &lt;- user .friendIds .traverse (asyncGetUser ) :  F&lt;User []&gt;  }  yield friends\n Here my method is parameterized by  F with the restriction that  F is a monad  4 ( F: Monad). You can get all the previous examplesby replacing  F&lt;*&gt; with  Promise&lt;*&gt;,  Either&lt;SomeErrorType, *&gt;, or  CorrelationId =&gt; *. (The  * being the spot where you have to substitute the type you  actually care about).\n We can even combine things, so  F could be  CorrelationId =&gt; Promise&lt;*&gt; if  getUser needed a  CorrelationId  and we wanted it to be async.\n  Many languages have generic types. Take  Array&lt;Int&gt;, I\u2019ll refer to  Array as the  outside and  Int as the  inside. Often a language willlet you make the inside a variable  Array&lt;T&gt; is an array, but I don\u2019t know or care what is inside it. It\u2019s less common to be able to put a variable on the  outside. F&lt;Int&gt; is a bit odd, you don\u2019t really have any idea what it is, there\u2019s only a suggestion that is has something to do with  Int. Nevertheless, that is preciselythe thing that changes across our three examples  5.\n  In our example we needed a  CorrelationId, but the same pattern can be used for other things you need, but don\u2019t really want to explicitly pass. For example,database connections, user session ids, user authorization info. Any time you want something available but don\u2019t really want to pass it around.\n  A bug comes in. A number is wrong in the UI. The backend that  my team is responsible for really just calls other APIs that other teams are responsible for.The first thing we\u2019d want to look atis the request and response we made to these external APIs (after all, we wantto pass the blame as quickly as possible if it\u2019s an upstream error). Now, forvarious reasons we didn\u2019t want to log all the requests and responses. So,for every external API call, we returned the full request/response in additionto whatever we wanted to. At least, in QA environments.\n   Here,  DiagnosticData is the request/response or anything else we want to also return to help diagnose issues. It\u2019s an array because we need to allow for multiple things coming back.Then the json coming back to the browser would always be an object and it would contain one extra field with the  diagnosticData serialized in the response.\n The hope would be that anyone doing QA could copy the json from the dev tools in the browser and any bug ticket would include all of theAPI calls we made. Often that\u2019s enough to figure out which team needs to take action.\n In this case  F is  [DiagnosticData[], *] and it  proliferates precisely because we need to bubble up the extra data to the controller.\n  There\u2019s no denying that the blue functions are nicer. The best signature for  getUser is\n  But that is not always practical: You often have other  cross cutting concerns: resource usage, error handling, code cleanliness, monitoring.So if, instead, you return:\n  You are giving yourself a lot of flexibility to not exactly return a  User. We saw different examples where we did not exactly return a  User. You can even vary  F based on context, only return extra data outside of production, or be synchronous  6 in unit tests but async when actually running.\n  No, not really. I mean, I think it was fun to think about colored functions and monads, but most languages don\u2019t support these features that make this practical. Also, it\u2019s going to be hard to get your whole team (including future teammates) on board with coding like this. So  don\u2019t actually do this.\n I think the control flow aspect mostly makes code a bit less verbose at a fairly large conceptual expense.\u00a0 \u21a9\ufe0e\n javascript, of course, has  async/await syntax. I\u2019m curious if that is equivalent to for expressions/do notation and could (in theory) be used for monads other than  Promise.\u00a0 \u21a9\ufe0e\n There are other ways to avoid passing the parameter explicitly, but this is just for the sake of example.\u00a0 \u21a9\ufe0e\n It needs to be a monad so we can use the  for expression.\u00a0 \u21a9\ufe0e\n Languages that do support that feature would call it \u201cHigher kinded types\u201d.\u00a0 \u21a9\ufe0e", "posttime": "2022-02-17 14:23:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5355\u5b50,color,\u627f\u8bfa", "title": "\u4f60\u7684\u5355\u5b50\u662f\u4ec0\u4e48\u989c\u8272\u7684", "title_en": "What Color Is Your Monad", "transed": 1, "url": "https://patrickthebold.github.io/posts/what-color-is-your-monad/", "via": "", "real_tags": ["\u5355\u5b50", "color", "\u627f\u8bfa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073845, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u4f4f\u5728\u7ebd\u7ea6\uff0c\u5f00\u7740\u4e00\u8f86\u54cd\u4eae\u7684\u8f66\uff0c\u4f60\u53ef\u80fd\u4f1a\u6536\u5230\u6765\u81ea\u7ebd\u7ea6\u5e02\u7684\u901a\u77e5#39\uff1bs\u73af\u5883\u4fdd\u62a4\u90e8\u544a\u8bc9\u4f60\u4f60\u7684\u8f66\u592a\u5435\u4e86\u3002\u4e0d\u662f\u56e0\u4e3a\u8b66\u5bdf\u6293\u5230\u4e86\u4f60\u5435\u95f9\u7684\u8f66\uff0c\u800c\u662f\u56e0\u4e3a\u7535\u8111\u6293\u5230\u4e86\u3002\n\u6b64\u5185\u5bb9\u662f\u4eceFacebook\u5bfc\u5165\u7684\u3002\u4f60\u53ef\u4ee5\u5728\u4ed6\u4eec\u7684\u7f51\u7ad9\u4e0a\u627e\u5230\u5176\u4ed6\u683c\u5f0f\u7684\u76f8\u540c\u5185\u5bb9\uff0c\u6216\u8005\u4f60\u53ef\u4ee5\u627e\u5230\u66f4\u591a\u4fe1\u606f\u3002\n\u5468\u4e00\uff0c\u4e00\u4e2a\u540d\u4e3a\u201c\u964d\u4f4e\u56fd\u4f1a\u201d\u7684\u9875\u9762\u5728Facebook\u4e0a\u53d1\u5e03\u4e86\u4e00\u5f20\u6765\u81ea\u7ebd\u7ea6\u5e02\u73af\u4fdd\u5c40\u7684\u5b98\u65b9\u547d\u4ee4\u7684\u7167\u7247\uff0c\u8be5\u7167\u7247\u9488\u5bf9\u7684\u662f\u4e00\u8f86\u53ef\u80fd\u58f0\u97f3\u592a\u5927\u7684\u5b9d\u9a6cM3\u3002\u901a\u77e5\u5185\u5bb9\u5982\u4e0b\uff1a\n\u6211\u4e4b\u6240\u4ee5\u5199\u4fe1\u7ed9\u4f60\uff0c\u662f\u56e0\u4e3a\u4f60\u7684\u8f66\u8f86\u88ab\u8ba4\u5b9a\u6709\u4e00\u4e2a\u6d88\u58f0\u5668\u4e0d\u7b26\u5408\u300a\u8f66\u8f86\u548c\u4ea4\u901a\u6cd5\u300b\u7b2c386\u8282\u7684\u89c4\u5b9a\uff0c\u8be5\u8282\u7981\u6b62\u673a\u52a8\u8f66\u53d1\u51fa\u8fc7\u5927\u566a\u97f3\u3002\u60a8\u7684\u8f66\u8f86\u88ab\u6444\u50cf\u5934\u8bb0\u5f55\u4e0b\u6765\uff0c\u6444\u50cf\u5934\u4f1a\u5bf9\u8f66\u8f86\u548c\u8f66\u724c\u8fdb\u884c\u62cd\u7167\u3002\u6b64\u5916\uff0c\u5f53\u8f66\u8f86\u63a5\u8fd1\u5e76\u901a\u8fc7\u6444\u50cf\u5934\u65f6\uff0c\u58f0\u97f3\u8ba1\u4f1a\u8bb0\u5f55\u5206\u8d1d\u6c34\u5e73\u3002\n\u8be5\u547d\u4ee4\u8fd8\u8981\u6c42\u8f66\u4e3b\u5c06\u8f66\u5f00\u5230DEP-a\u6c61\u6c34\u5904\u7406\u5382\u6307\u5b9a\u7684\u5730\u70b9\u8fdb\u884c\u68c0\u67e5\u3002\u51fa\u73b0\u4e86\uff0c\u4f60&#39\uff1b\u6211\u4eec\u5c06\u6709\u673a\u4f1a\u4fee\u597d\u6c7d\u8f66\uff0c\u4ee5\u907f\u514d\u50cf\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u90a3\u6837\u7684\u7f5a\u6b3e#39\uff1bs&#34\uff1b\u4fee\u597d\u5b83&#34\uff1b\u7968\u52a1\u7cfb\u7edf\u3002\u8be5\u6587\u4ef6\u8fd8\u544a\u77e5\u4e1a\u4e3b\uff0c\u5982\u679c\u4ed6\u4eec\u672a\u80fd\u5230\u573a\uff0c\u5c06\u9762\u4e34\u6700\u9ad8875\u7f8e\u5143\u7684\u7f5a\u6b3e\uff0c\u4ee5\u53ca\u7ee7\u7eed\u65e0\u89c6\u4f20\u7968\u7684\u989d\u5916\u7f5a\u6b3e\u3002\n\u7ebd\u7ea6\u5e02\u73af\u4fdd\u5c40\u53d1\u8a00\u4eba\u5411Road&amp\uff1b\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8ddf\u8e2a\u8be5\u7cfb\u7edf\u662f\u4e00\u4e2a\u5c0f\u578b\u8bd5\u70b9\u9879\u76ee\u7684\u4e00\u90e8\u5206&#39\uff1b\u81ea2021\u5e749\u6708\u4ee5\u6765\u4e00\u76f4\u5728\u8fd0\u884c\u3002\u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u6765\u770b\uff0c\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u5f88\u50cf\u4e00\u4e2a\u6d4b\u901f\u6444\u50cf\u5934\uff0c\u5b83\u4f1a\u81ea\u52a8\u8bb0\u5f55\u8fdd\u89c4\u884c\u4e3a\uff0c\u5e76\u901a\u8fc7\u9605\u8bfb\u4f60\u7684\u8f66\u724c\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\u7ed9\u4f60\u3002\u8fd9\u4e2a\u65b0\u7cfb\u7edf\u53d6\u4ee3\u4e86\u901f\u5ea6\u67aa\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u7cbe\u5fc3\u5e03\u7f6e\u7684\u58f0\u97f3\u8ba1\u6765\u8bb0\u5f55\u9053\u8def\u4e0a\u7684\u5206\u8d1d\u6c34\u5e73\uff0c\u5e76\u4f7f\u7528\u6444\u50cf\u5934\u5c06\u5176\u4e0e\u8f66\u724c\u5339\u914d\u3002\n\u73af\u4fdd\u90e8\u544a\u8bc9\u6211\u4eec\uff0c\u8fd9\u9879\u65b0\u8ba1\u5212\u4e0e\u5dde\u957f\u51ef\u897f\u00b7\u970d\u5f7b\u5c14\u65e0\u5173\uff1b\u4ed6\u6700\u8fd1\u5728\u7ebd\u7ea6\u91c7\u53d6\u884c\u52a8\u63a7\u5236\u566a\u97f3\u6c61\u67d3\u30022021\u5e749\u6708\uff0c\u5979\u7b7e\u7f72\u4e86\u300a\u7761\u7720\u6cd5\u6848\u300b\uff0c\u5c06\u8be5\u5dde\u7684\u6392\u6c14\u566a\u97f3\u7f5a\u6b3e\u4ece\u76ee\u524d\u7684\u5168\u56fd\u6700\u9ad8\u7684150\u7f8e\u5143\u52301000\u7f8e\u5143\u3002\n\u636e\u8be5\u90e8\u95e8\u79f0\uff0c\u8be5\u9879\u76ee\u5c06\u4e8e6\u670830\u65e5\u91cd\u65b0\u8bc4\u4f30\uff1b\u6211\u4eec\u5f88\u53ef\u80fd\u8981\u4e48\u6269\u5927\u89c4\u6a21\uff0c\u8981\u4e48\u505c\u6b62\u4f7f\u7528\u3002\u6211\u4eec&#39\uff1b\u5230\u65f6\u5019\u6211\u4e00\u5b9a\u4f1a\u8ddf\u8fdb\u8c03\u67e5\u3002\n\u6b64\u5185\u5bb9\u7531\u7b2c\u4e09\u65b9\u521b\u5efa\u548c\u7ef4\u62a4\uff0c\u5e76\u5bfc\u5165\u5230\u6b64\u9875\u9762\u4ee5\u5e2e\u52a9\u7528\u6237\u63d0\u4f9b\u5176\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u3002\u4f60\u53ef\u80fd\u4f1a\u5728piano\u4e0a\u627e\u5230\u66f4\u591a\u5173\u4e8e\u8fd9\u4e2a\u548c\u7c7b\u4f3c\u5185\u5bb9\u7684\u4fe1\u606f\u3002\u6728\u536b\u4e00", "note_en": "If you live in New York and drive a loud car, you could receive a notice from the city&#39;s Department of Environmental Protection telling you your car is too loud. Not because a police officer caught your noisy car, but because a computer did.\n This content is imported from Facebook. You may be able to find the same content in another format, or you may be able to find more information, at their web site.\n  A photo of an official order from the New York City DEP was published to Facebook by a page called  Lowered Congress on Monday, directed at a BMW M3 that may have been a bit too loud. The notice reads as follows:\n I am writing to you because your vehicle has been identified as having a muffler that is not in compliance with Section 386 of the Vehicle and Traffic Law, which prohibits excessive noise from motor vehicles. Your vehicle was recorded by a camera that takes a pictures of the vehicle and the license plate. In addition, a sound meter records the decibel level as the vehicle approaches and passes the camera.\n The order goes on to tell the owner to bring their car to a location specified by the DEP\u2014a sewage treatment plant, to be precise\u2014for inspection. Show up, and you&#39;ll have the opportunity to get the car fixed to avoid a fine\u2014much like California&#39;s &#34;fix-it&#34; ticket system. The document also informs the owner that if they fail to show up, they could face a maximum fine of $875, plus additional fines for continuing to ignore the summons.\n A New York City DEP spokesman confirmed to  Road &amp; Track via email the system is part of a small pilot program that&#39;s been running since September 2021. From the description above, it sounds like it works much like a speed camera that automatically records a violation and sends it to you in the mail by reading your license plate. Instead of a speed gun, this new system uses a strategically placed sound meter to record decibel levels on the road, matching it to a license plate using a camera.\n The DEP tells us this new program is unrelated to Governor Kathy Hochul&#39;s recent initiative to curb noise pollution in New York. In September 2021 she signed  the SLEEP bill into law, raising fines for exhaust noise violation in the state from $150 to $1000\u2014currently the highest in the nation.\n The program will be reevaluated on June 30, according to the DEP. From there it&#39;ll likely either be expanded or taken out of commission. We&#39;ll be sure to follow up then to find out.\n   This content is created and maintained by a third party, and imported onto this page to help users provide their email addresses. You may be able to find more information about this and similar content at piano.io", "posttime": "2022-02-17 14:21:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6444\u50cf\u5934,cameras", "title": "\u7ebd\u7ea6\u6b63\u5728\u4f7f\u7528\u5e26\u9ea6\u514b\u98ce\u7684\u6444\u50cf\u5934\u6765\u8bb0\u5f55\u54cd\u4eae\u7684\u6c7d\u8f66", "title_en": "New York is using cameras with microphones to ticket loud cars", "transed": 1, "url": "https://www.roadandtrack.com/news/a39105913/new-york-automated-sound-tickets/", "via": "", "real_tags": ["\u6444\u50cf\u5934", "cameras"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073844, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211&#39\uff1b\u81ea\u4ece25\u5e74\u524d\u6211\u5341\u51e0\u5c81\u5f00\u59cb\u5b66\u4e60\u7f16\u7a0b\u4ee5\u6765\uff0c\u6211\u4e00\u76f4\u5bf9\u6e38\u620f\u7f16\u7a0b\u611f\u5174\u8da3\n\u5f53\u7136\uff0c\u6211\u6ca1\u6709&#39\uff1b\u9664\u4e86\u975e\u5e38\u57fa\u672c\u7684\u6e38\u620f\u4e4b\u5916\uff0c\u6211\u5f53\u65f6\u54ea\u513f\u4e5f\u53bb\u4e0d\u4e86\u3002\u6211\u7528BASIC\u7f16\u5199\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u62cd\u6444UFO\u7c7b\u578b\u7684\u6e38\u620f\uff08\u540e\u6765\u79fb\u690d\u5230C\uff09\u3002\u5b83\u53ea\u6709\u4e00\u4e2aUFO\u5728\u5c4f\u5e55\u4e0a\u5de6\u53f3\u79fb\u52a8\uff0c\u4f60\u53ef\u4ee5\u671d\u5b83\u5f00\u67aa\u3002\u6e38\u620f\u4e2d\u6700\u5927\u7684\u95ee\u9898\u662f\uff1a\u5f53\u5b50\u5f39\u53d1\u5c04\u65f6\uff0cUFO\u4f1a\u505c\u6b62\u79fb\u52a8\uff0c\u5c31\u50cf\u6211\u6ca1\u6709\u505a\u7684\u90a3\u6837&#39\uff1b\u6211\u4e0d\u77e5\u9053\u80cc\u666f\u5904\u7406\u7684\u6982\u5ff5\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u573a\u6bd4\u8d5b\u5f88\u5bb9\u6613\u8d62\u3002\n\u5728\u63a5\u4e0b\u6765\u768415-20\u5e74\u91cc\uff0c\u6211\u6ca1\u6709&#39\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4eec\u6ca1\u6709\u53d6\u5f97\u591a\u5927\u8fdb\u5c55\u3002\u5f53\u7136\uff0c\u6211\u5b66\u4f1a\u4e86\u540e\u53f0\u5904\u7406\uff0c\u4f46\u6e38\u620f\u6ca1\u6709&#39\uff1b\u522b\u518d\u590d\u6742\u4e86\u3002\u6e38\u620f\u7f16\u7801\u5f88\u96be\u3002\n\u8fc7\u53bb5-10\u5e74\uff0c\u6211\u4eec&#39\uff1b\u6211\u6709\u5f88\u591a\u5de5\u5177\u6765\u7b80\u5316\u6e38\u620f\u7f16\u7a0b\u3002\u865a\u5e7b\u548c\u7edf\u4e00\u662f\u884c\u4e1a\u6807\u51c6\uff0c\u6208\u591a\u6b63\u5728\u8d76\u8d85\u5b83\u4eec\u3002\u5236\u4f5c\u6e38\u620f\u7a81\u7136\u53d8\u5f97\u66f4\u5bb9\u6613\u4e86\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5de5\u5177\u4e3a\u4f60\u4eec\u505a\u4e86\u5f88\u591a\u7e41\u91cd\u7684\u5de5\u4f5c\u3002\u5173\u5361\u8bbe\u8ba1\u3001\u7269\u7406\u3001\u78b0\u649e\u68c0\u6d4b\u3001\u64ad\u653e\u5668\u52a8\u753b\u2014\u2014\u6211\u4eec\u7528\u4ee3\u7801\u505a\u7684\u5f88\u591a\u4e8b\u60c5\u73b0\u5728\u90fd\u53ef\u4ee5\u901a\u8fc7\u5de5\u5177\u6765\u5b8c\u6210\u3002\n\u4e0d\u4ec5\u5982\u6b64\uff0c\u8fd9\u4e9b\u6e38\u620f\u5e73\u53f0\u8fd8\u9644\u5e26\u4e86\u8bb8\u591a\u9884\u5148\u6784\u5efa\u7684\u793a\u4f8b\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u548c\u4f7f\u7528\u3002\u751a\u81f3Godot\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u68d2\u76843d\u5c04\u51fb\u6f14\u793a\uff1a\nUnity\u662f\u8fd9\u91cc\u7684\u9876\u7ea7\u73a9\u5bb6\u2014\u2014\u4f60\u53ef\u4ee5\u4e3a\u4efb\u4f55\u4f60\u60f3\u5236\u4f5c\u7684\u6e38\u620f\u8d2d\u4e70\u5b8c\u6574\u7684\u9aa8\u67b6\u2014\u2014\u6240\u6709\u4ee3\u7801\u90fd\u4e3a\u4f60\u5b8c\u6210\uff0c\u53ea\u9700\u6839\u636e\u4f60\u81ea\u5df1\u7684\u7528\u4f8b\u8fdb\u884c\u8c03\u6574\u3002\n\u6211\u81ea\u5df1\u5df2\u7ecf\u653e\u5f03\u4e8620\u591a\u4e2a\u6e38\u620f\uff0c\u4ecePhaserJs\u5230Unity\u518d\u5230Godot\u3002\n\u6d4f\u89c8\u5728\u7ebf\u8bba\u575b\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u6211&#39\uff1b\u6211\u5e76\u4e0d\u5b64\u5355\u3002\u5927\u591a\u6570\u4eba\u4ece\u4e0d\u5b8c\u6210\u6e38\u620f\u3002\u6211&#39\uff1b\u6211\u5df2\u7ecf\u770b\u5230\u4e86\u6f02\u4eae\u7684\u6f14\u793a\uff0c\u5f00\u53d1\u4eba\u5458\u82b1\u4e86\u591a\u5e74\u65f6\u95f4\u5f00\u53d1\uff0c\u7136\u540e\u5c31\u653e\u5f03\u4e86\u3002\u6211\u95ee\u4e00\u4e2a\u4eba\uff0c\u4ed6\u4ec0\u4e48\u65f6\u5019\u7ed9\u6211\u53d1\u4e86\u4ed6\u6700\u540e\u4e00\u573a\u6bd4\u8d5b\u7684\u6587\u4ef6\uff08\u5728\u8c37\u6b4c\u786c\u76d8\u4e0a\uff0c\u6ca1\u6709\u5c11\uff09\uff1a&#34\uff1b\u8fd9\u592a\u68d2\u4e86\uff01\u4e3a\u4ec0\u4e48\u4e0d&#39\uff1b\u4f60\u4e0d\u80fd\u91ca\u653e\u5b83\u5417\uff1f\u81f3\u5c11\u628a\u5b83\u653e\u5728Github\u4e0a&#34;\n\u5728\u53d1\u73b0\u6208\u591a\u4e4b\u524d\uff0c\u6211\u4e0e\u56e2\u7ed3\u594b\u6597\u4e86\u5f88\u957f\u65f6\u95f4\u3002Godot\u975e\u5e38\u68d2\uff0c\u5f88\u5bb9\u6613\u5165\u95e8\uff08\u81f3\u5c11\u57282d\u6e38\u620f\u4e2d\u662f\u5982\u6b64\uff09\u3002\n\u8fd9\u91cc&#39\uff1b\u8fd9\u5c31\u662f\u6211\u5728\u81ea\u5df1\u7684\u65c5\u7a0b\u4e2d\u53d1\u73b0\u7684\uff1a\u65e0\u8bba\u5de5\u5177\u8ba9\u590d\u6742\u7684\u4e8b\u60c5\u53d8\u5f97\u591a\u4e48\u7b80\u5355\uff0c\u7b80\u5355\u7684\u4e8b\u5b9e\u662f\uff1a\u6e38\u620f\u7f16\u7a0b\u4ecd\u7136\u9700\u8981\u5927\u91cf\u7684\u5de5\u4f5c\n\u5373\u4f7f\u662f\u8bbe\u8ba1\u548c\u5b8c\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u6c34\u5e73\u662f\u5428\u7684\u5de5\u4f5c\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u6c38\u65e0\u6b62\u5883\u7684\u5de5\u4f5c\u3002\n\u6211\u53ea\u7528\u4e86\u4e00\u4e2a\u6708\u7684\u65f6\u95f4\u5c31\u5728\u6e38\u620f\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u673a\u5236\u2014\u2014\u73a9\u5bb6\u6295\u63b7\u624b\u69b4\u5f39\uff0c\u654c\u4eba\u53ef\u4ee5\u5c06\u5176\u51fb\u9000\u3002\nc\uff09 \u6211\u5728\u6208\u591a\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e2d\u53d1\u73b0\u4e86\u5f88\u591a\u95ee\u9898\u2014\u2014\u4f60\u53ea\u80fd\u901a\u8fc7\u5b9e\u8df5\u6765\u5b66\u4e60\n\u4f46\u662f\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u654c\u4eba\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4f60\u9700\u8981\u591a\u4e2a\u654c\u4eba\uff0c\u4ed6\u4eec\u6709\u81ea\u5df1\u7684\u602a\u7656/\u653b\u51fb\u3001\u786c\u5e01\u3001\u73af\u5883\u5371\u5bb3\uff08\u5982\u5c16\u5cf0\uff09\u3001\u89c6\u5dee\uff08\u79fb\u52a8\u80cc\u666f\uff09\u7b49\n\u6211\u6700\u5927\u7684\u6050\u60e7\u662f\u2014\u2014\u8bbe\u8ba1\u4e00\u4e2a\u5b8c\u6574\u7684\u5173\u5361\u5c31\u50cf\u4e00\u573a\u5669\u68a6\uff1b\u4e5f\u8bb8\u662f\u56e0\u4e3a\u6211&#39\uff1b\u6211\u4ee5\u524d\u4ece\u6765\u6ca1\u505a\u8fc7\uff0c\u4e5f\u8bb8\u662f\u56e0\u4e3a\u6211\u7684\u8bbe\u8ba1\u6280\u80fd\u592a\u5dee\u4e86\u3002\n\u5f53\u6211\u770b\u5230\u4ec5\u4ec5\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684\u5173\u5361\u9700\u8981\u505a\u591a\u5c11\u5de5\u4f5c\u65f6\uff0c\u6211\u80fd\u7406\u89e3\u4eba\u4eec\u5982\u4f55\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u6e38\u620f\u4e0a\u82b1\u8d39\u6570\u6708/\u6570\u5e74\u7684\u65f6\u95f4\uff0c\u53ea\u662f\u4e3a\u4e86\u653e\u5f03\u5b83\u3002\n\u6240\u4ee5\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5b66\u4e60\u6208\u591a\u7684\u602a\u7656\u548c\u602a\u7656\uff08\u5728\u90a3\u4e4b\u524d\uff0c\u8fd8\u6709Unity\uff09\u3002\u4f46\u95ee\u9898\u662f\uff1a\u8fd9\u4e9b\u6280\u80fd\u4e0d\u662f&#39\uff1b\u4e0d\u80fd\u8f6c\u8ba9\u3002\n\u6211\u8fd8\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u5b66\u4e60AWS\uff08\u8fd8\u5728\u5b66\u4e60\u548c\u54ed\u6ce3\u3002\u5b66\u4e60AWS\u65f6\u54ed\u6ce3\u6b63\u5e38\u5417\uff1f\uff09\u3002\n\u5b83&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u4e11\u964b\u602a\u7269\uff0c\u6709\u51e0\u5341\u4e2a\u5173\u952e\u8bcd\uff08\u6d41\u884c\u8bed\uff1f\uff09\u3002\u4f60\u82b1\u4e866\u4e2a\u6708\u7684\u65f6\u95f4\u901a\u8fc7AWS\u8003\u8bd5\uff0c\u4f60\u6240\u5b66\u5230\u7684\u5c31\u662fAWS\u7684\u5de5\u4f5c\u539f\u7406\u3002\n\u9664\u4e86\u2014\u2014\u5176\u4e2d\u4e00\u4e9b\u6280\u80fd\u8f6c\u79fb\u3002IAM\u53ef\u80fd\u662fAWS\u7279\u5b9a\u7684\u5de5\u5177\uff0c\u4f46Azure\u3001GCP\u548c\u5176\u4ed6\u6240\u6709\u5e73\u53f0\u90fd\u6709\u7c7b\u4f3c\u7684\u5de5\u5177\uff0c\u800c\u4e14\u8fd9\u4e9b\u6982\u5ff5\u4f1a\u8f6c\u79fb\u3002\n\u6211\u5df2\u7ecf\u7ba1\u7406\u8fc7Linux\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u4f7f\u7528EC2\u670d\u52a1\u5668\u4e0d\u662f&#39\uff1b\u6ca1\u6709\u90a3\u4e48\u5927\u7684\u5b66\u4e60\u66f2\u7ebf\u3002\n\u56e0\u6b64\uff0c\u5c3d\u7ba1AWS\u6709\u4e00\u4e2a\u9661\u5ced\u7684\u5b66\u4e60\u66f2\u7ebf\uff0c\u4f46\u8fd9\u4e9b\u6280\u80fd\u53ef\u4ee5\u5728\u5176\u4ed6\u5730\u65b9\u4f7f\u7528\u3002\n\u4f60\u4f1a\u5b66\u5230Godot\u5982\u4f55\u5904\u7406\u7269\u7406\u7269\u4f53\u4e0e\u73a9\u5bb6\u7269\u4f53\u78b0\u649e\u7684\u602a\u7656\uff0c\u5b83\u4e0d\u4f1a&#39\uff1b\u6211\u4e00\u70b9\u4e5f\u5e2e\u4e0d\u4e86\u4f60\u3002\u53cd\u4e4b\u4ea6\u7136\u3002\n\u6b64\u5916\uff0c\u6e38\u620f\u884c\u4e1a\u975e\u5e38\u5265\u524a\u6027\u548c\u4f4e\u6536\u5165\uff0c\u56e0\u6b64\u5b83&#39\uff1b\u8fd9\u5e76\u4e0d\u662f\u8bf4\u4f60\u5728\u5b66\u4ec0\u4e48&#34\uff1b\u9700\u6c42\u91cf#34\uff1b\u6280\u80fd\u3002\u4f60\u7684\u65e0\u804a\u7a0b\u5e8f\u5458\u7ef4\u62a4\u4e00\u4e2a10\u5e74\u524d\u7528vanilla Js\u7f16\u5199\u7684Java\u5e94\u7528\u7a0b\u5e8f\u6bd4\u5927\u591a\u6570\u6e38\u620f\u7a0b\u5e8f\u5458\u8d5a\u5f97\u591a\u3002\n\u5b83\u4e0d\u662f&#39\uff1b\u5bf9\u4e8e\u72ec\u7acb\u5f00\u53d1\u8005\u6765\u8bf4\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u2014\u2014\u5927\u591a\u6570\u72ec\u7acb\u6e38\u620f\uff08\u6211\u624b\u5934\u4e0a\u6ca1\u6709\u4efb\u4f55\u7edf\u8ba1\u6570\u636e\uff0c\u53ea\u662f\u6839\u636e\u4e0e\u5176\u4ed6\u5f00\u53d1\u8005\u4ea4\u8c08\u7684\u611f\u89c9\uff09\u5f88\u5c11\u80fd\u8d5a\u5230\u8db3\u591f\u7684\u94b1\u6765\u8bc1\u660e\u4ed6\u4eec\u6e38\u620f\u8d44\u4ea7\u7684\u6210\u672c\uff0c\u66f4\u4e0d\u7528\u8bf4\u4ed6\u4eec\u81ea\u5df1\u7684\u7f16\u7801\u65f6\u95f4\u4e86\u3002\n\u4e0e\u597d\u83b1\u575e\u4e00\u6837\uff0c\u6e38\u620f\u4e1a\u4e5f\u662f\u4e00\u4e2a\u70ed\u95e8\u884c\u4e1a\uff0c\u5c11\u6570\u51e0\u5bb6\u5927\u73a9\u5bb6\u83b7\u5f97\u4e8690%\u523095%\u7684\u5229\u6da6\uff0c\u800c\u5927\u591a\u6570\u5176\u4ed6\u73a9\u5bb6\u51e0\u4e4e\u65e0\u6cd5\u751f\u5b58\u3002\n\u4f5c\u4e3a\u4e00\u540d\u6e38\u620f\u7a0b\u5e8f\u5458\uff0c\u4f60\u5fc5\u987b\u4e86\u89e3\u827a\u672f\u3001\u97f3\u4e50\u3001\u4eba\u5de5\u667a\u80fd\u3001\u5173\u5361\u8bbe\u8ba1\u3001\u5bf9\u8bdd\u3001\u6545\u4e8b\u7b49\u7b49\u3002\n\u5f53\u7136\uff0c\u4f60\u53ef\u4ee5\u5916\u5305\u6216\u8d2d\u4e70\u827a\u672f\u54c1\uff08\u8fd9\u91cc\u6709\u51e0\u5341\u79cd\u514d\u8d39\u8d44\u6e90\uff09\u3002\u5b83&#39\uff1b\u5b83\u4e0d\u50cf\u5927\u591a\u6570\u6e38\u620f\u90fd\u6709\u5f88\u591aa&#34\uff1b\u6545\u4e8b&#34\uff1b\u3002\n\u89c6\u9891\u6e38\u620f\u6545\u4e8b\u793a\u4f8b\uff1a\u90aa\u6076\u7684\u53e4\u5df4\u660e\u63a5\u7ba1\u4e86\u653f\u6743\uff0c\u800c\u4e0d\u662f\u5bf9\u6297\u9009\u4e3e\uff0c\u62ff\u7740\u8fd9\u628a\u673a\u5173\u67aa\u6740\u4e86\u6240\u6709\u4eba\uff08\u4ece\u6211\u4eec\u542c\u5230\u7684\u60c5\u51b5\u6765\u770b\uff0c\u8fd9\u53ef\u80fd\u5c31\u662f\u7f8e\u56fd\u7684\u60c5\u51b5\uff09\u3002\n\u4f46\u4f5c\u4e3a\u5f00\u53d1\u4eba\u5458\uff0c\u60a8\u4ecd\u7136\u9700\u8981\u4e86\u89e3\u8fd9\u4e9b\u65b9\u9762\u7684\u57fa\u7840\u77e5\u8bc6\u3002\u5373\u4f7f\u4f60\u6700\u7ec8\u8d2d\u4e70\u4e86\u827a\u672f/\u97f3\u4e50\uff0c\u4f60\u4e5f\u9700\u8981\u4e86\u89e3\u5b83\u5728\u4f60\u7684\u6e38\u620f\u7c7b\u578b\u4e2d\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\u3002\n\u7279\u522b\u662f\u5bf9\u4e8e\u72ec\u7acb\u5f00\u53d1\u8005\u6765\u8bf4\uff0c\u4f60\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u4ee3\u7801\u7334\u5b50\u3002\u4f60\u5fc5\u987b\u5bf9\u6bcf\u4ef6\u4e8b\u90fd\u6709\u6240\u4e86\u89e3\u3002\u5373\u4f7f\u662f\u5728\u4f20\u7edf\u6e38\u620f\u4e2d\uff0c\u5927\u591a\u6570\u5f00\u53d1\u8005\u4f3c\u4e4e\u4e5f\u6bd4\u4ed6\u4eec\u72ed\u7a84\u7684\u7f16\u7801\u9886\u57df\u4e86\u89e3\u66f4\u591a\uff08\u53ea\u662f\u6211\u4ece\u91c7\u8bbf\u7b49\u4e2d\u5f97\u5230\u7684\u5370\u8c61\uff09\u3002\n\u5f69\u8679\u7684\u5c3d\u5934\u6ca1\u6709\u5b9d\u85cf\uff1a\u4f60\u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u5c55\u793a\u7684\u60c5\u51b5\u4e0b\u5ea6\u8fc7\u6570\u5e74\n\u5b83&#39\uff1bIt\u2019\u5f88\u5bb9\u6613\u5931\u53bb\u4fe1\u5fc3\u800c\u653e\u5f03\u3002\u6216\u8005\u6362\u4e00\u4e2a\u4e0d\u540c\u7684\u6e38\u620f\u3001\u4e0d\u540c\u7684\u5f15\u64ce\u3001\u5c1d\u8bd5\u53e6\u4e00\u4e2a\u5e93\u7b49\u7b49\n\u8fd9\u5c31\u662f\u6e38\u620f\u7f16\u7a0b\u7684\u6b8b\u9177\u4e8b\u5b9e\uff1a\u6700\u65b0\u7684\u6280\u672f\u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u548c\u987a\u5229\uff0c\u4f46\u5b83&#39\uff1b\u8fd8\u6709\u5f88\u591a\u5de5\u4f5c\u8981\u505a\uff0c\u800c\u4e14&#39\uff1bIt\u2019\u5f88\u5bb9\u6613\u5e7b\u706d\u5e76\u653e\u5f03\u3002", "note_en": "I&#39;ve been interested in games programming since I started learning programming as a teenager more than 25 years ago (gasp!)\n   Of course, I didn&#39;t get anywhere at the time, beyond very basic games. I wrote a simple  Shoot the UFO type game in BASIC (later ported to C). All it had was a UFO moving left and right across the screen, and you could shoot a bullet at it. The biggest problem in the game: The UFO would stop moving as the bullet was fired, as I didn&#39;t know the concept of background processing. Which meant the game was stupidly easy to win.\n And for the next 15-20 years, I didn&#39;t make much progress beyond that. Sure, I learnt background processing, but the games didn&#39;t get any more complex. Game coding was hard.\n   Last 5-10 years, we&#39;ve had a bunch of tools to make games programming easy. Unreal and Unity are industry standards, Godot is racing to catch up with them. It suddenly became easier to make games, as these tools did a lot of the heavy lifting for you. Level design, physics, collision detection, player animation \u2013 a lot of the things we did with code can now be done by the tools.\n Not only that, these gaming platforms come with a lot of prebuilt examples you can just copy and use. Even Godot comes with an awesome 3d shooter demo:\n  Unity is the top player here\u2013 you can buy full skeletons for whatever game you want to make\u2013 all the code done for you, just tweak for your own use case.\n    I myself have abandoned 2 dozen games, in platforms ranging from PhaserJs to Unity to Godot.\n Browsing online forums, it looks like I&#39;m not alone. Most people never finish games. I&#39;ve seen beautiful demos, that developers spent multi-years working on and then just abandoned. I asked one guy when he sent me the files to his last game (on Google drive, no less): &#34;This is awesome! Why don&#39;t you release it? At least put it on Github?&#34;\n  I struggled with Unity for a long time before discovering Godot. Godot is awesome, it is very easy to get started with (at least for 2d games).\n Here&#39;s what I found in my own journey: No matter how easy the tools make complex things the simple truth is:  Games programming is still a lot of work\n Even designing and completing a whole level is tons of work. Even worse,  it looks like never ending work.\n It took me just a month to get a simple mechanism in my game working\u2013 the player throws a grenade and the enemy can kick it back.\n     c) I found a lot of gotchas in how Godot works\u2013 things you only learn by doing\n  But still\u2013 this is just one enemy. Ideally, you need multiple enemies with their own quirks/attacks, coins, environmental hazards (like spikes), parallax (moving backgrounds) etc\n And my biggest fear\u2013 designing a whole level just seems like a nightmare; maybe because I&#39;ve never done it before, maybe cause my design skills suck.\n When I looked at how much work there is just to create one simple level, I can understand how people can spend months/years on a simple game, just to abandon it.\n  So I spent a lot of time learning the quirks and gotchas of Godot (and before that, Unity). Here is the problem though: these skills aren&#39;t transferable.\n   I also spent some time learning about AWS(and still learning and crying.  Is it normal to cry when learning &#39;bout Aws?).\n It&#39;s a huge ugly monster with dozens of keywords (buzzwords?). You spend 6 months passing an AWS exam, and all you have learnt is how AWS works.\n Except\u2013 some of these skills transfer. IAM might be an AWS specific tool, but similar tools exist for Azure, GCP and every other platform, and the concepts will transfer.\n I had already managed Linux servers, so working with EC2 servers wasn&#39;t that big a learning curve.\n So even though AWS has a steep learning curve, those skills can be used elsewhere.\n  You learn the quirks of how Godot handles a physics object colliding with a player object, it doesn&#39;t help you at all in Unity. And vice versa.\n Plus, the gaming industry is very exploitative and low paying, so it&#39;s not like you are learning any &#34;in demand&#34; skills. Your boring programmer maintaining a 10 year old Java app written with vanilla Js earns more than most game programmers.\n And it isn&#39;t any better for indie devs\u2013 most indie games (I don&#39;t have any statistics on hand, just my feeling based on talking to other devs) rarely make enough money to even justify the cost of their game assets, let alone their own coding time.\n Gaming, like Hollywood, is a hit-driven industry, where a few big players take in 90-95% of the profits, while most others barely survive.\n  To be a games programmer you have to know about art, music, AI, level design, dialogue, story, just to mention a few.\n Sure you can outsource or buy art (and there are dozens of free resources). And it&#39;s not like most games have much of a &#34;story&#34;.\n Sample video game story:  Evil gubbamint has taken over, rather than fighting elections, take this machine gun and kill everyone (which might be how things work in America, from what we hear).\n But you as the developer still need to know the basics of these. Even if you end up buying art/music, you need to understand how it works in your genre of gaming.\n Especially for an indie dev\u2013 you are more than just a code monkey. You will have to know a  bit of everything. \u00a0And even in traditional gaming, most developers seem to know more than their narrow field of coding (just my impression from interviews etc).\n   There is no treasure at the end of this rainbow: You can spend years with nothing to show for it\n It&#39;s easy to lose heart and just quit. Or move to a different game, different engine, try another library etc\n And that is the harsh truth of game programming:  Recent technologies have made the process much easier and smoother, but it&#39;s still a lot of work, and it&#39;s very easy to become disillusioned and give up.", "posttime": "2022-02-17 14:15:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "programming,\u6e38\u620f,\u7f16\u7a0b,truth", "title": "\u89c6\u9891\u6e38\u620f\u7f16\u7a0b\u7684\u6b8b\u9177\u4e8b\u5b9e", "title_en": "The harsh truth of video games programming", "transed": 1, "url": "https://new.pythonforengineers.com/blog/the-harsh-truth/", "via": "", "real_tags": ["\u6e38\u620f", "\u7f16\u7a0b", "truth"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073843, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528\u78c1\u7ea6\u675f\u7684\u6838\u805a\u53d8\uff0c\u7279\u522b\u662f\u5728\u6258\u5361\u9a6c\u514b\u914d\u7f6e\u4e2d\uff0c\u662f\u5b9e\u73b0\u53ef\u6301\u7eed\u80fd\u6e90\u7684\u4e00\u6761\u6709\u5e0c\u671b\u7684\u9014\u5f84\u3002\u4e00\u4e2a\u6838\u5fc3\u6311\u6218\u662f\u5728\u6258\u5361\u9a6c\u514b\u5bb9\u5668\u5185\u5f62\u6210\u5e76\u7ef4\u6301\u9ad8\u6e29\u7b49\u79bb\u5b50\u4f53\u3002\u8fd9\u5c31\u9700\u8981\u4f7f\u7528\u78c1\u6027\u6267\u884c\u5668\u7ebf\u5708\u8fdb\u884c\u9ad8\u7ef4\u3001\u9ad8\u9891\u3001\u95ed\u73af\u63a7\u5236\uff0c\u7531\u4e8e\u5404\u79cd\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\u7684\u4e0d\u540c\u8981\u6c42\uff0c\u8fd9\u4e00\u70b9\u66f4\u52a0\u590d\u6742\u3002\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u79cd\u4ee5\u524d\u672a\u63cf\u8ff0\u7684\u6258\u5361\u9a6c\u514b\u78c1\u63a7\u5236\u5668\u8bbe\u8ba1\u4f53\u7cfb\u7ed3\u6784\uff0c\u8be5\u4f53\u7cfb\u7ed3\u6784\u53ef\u4ee5\u81ea\u4e3b\u5b66\u4e60\u63a7\u5236\u5168\u5957\u63a7\u5236\u7ebf\u5708\u3002\u8be5\u4f53\u7cfb\u7ed3\u6784\u5728\u6ee1\u8db3\u7269\u7406\u548c\u64cd\u4f5c\u7ea6\u675f\u7684\u540c\u65f6\uff0c\u6ee1\u8db3\u4e86\u9ad8\u7ea7\u522b\u89c4\u5b9a\u7684\u63a7\u5236\u76ee\u6807\u3002\u8fd9\u79cd\u65b9\u6cd5\u5728\u95ee\u9898\u89c4\u8303\u4e2d\u5177\u6709\u524d\u6240\u672a\u6709\u7684\u7075\u6d3b\u6027\u548c\u901a\u7528\u6027\uff0c\u5e76\u663e\u8457\u51cf\u5c11\u4e86\u751f\u4ea7\u65b0\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\u7684\u8bbe\u8ba1\u5de5\u4f5c\u91cf\u3002\u6211\u4eec\u6210\u529f\u5730\u5728\u6258\u5361\u9a6c\u514b\u914d\u7f6e\u53d8\u91cf1\u30012\u4e0a\u751f\u4ea7\u548c\u63a7\u5236\u4e86\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\uff0c\u5305\u62ec\u7ec6\u957f\u7684\u5e38\u89c4\u5f62\u72b6\uff0c\u4ee5\u53ca\u9ad8\u7ea7\u914d\u7f6e\uff0c\u5982\u8d1f\u4e09\u89d2\u5f62\u548c\u201c\u96ea\u82b1\u201d\u914d\u7f6e\u3002\u6211\u4eec\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e86\u5bf9\u8fd9\u4e9b\u914d\u7f6e\u7684\u4f4d\u7f6e\u3001\u7535\u6d41\u548c\u5f62\u72b6\u7684\u7cbe\u786e\u8ddf\u8e2a\u3002\u6211\u4eec\u8fd8\u5c55\u793a\u4e86TCV\u4e0a\u7684\u6301\u7eed\u201c\u6db2\u6ef4\u201d\uff0c\u5176\u4e2d\u4e24\u4e2a\u5355\u72ec\u7684\u7b49\u79bb\u5b50\u4f53\u540c\u65f6\u7ef4\u6301\u5728\u8840\u7ba1\u5185\u3002\u8fd9\u4ee3\u8868\u4e86\u6258\u5361\u9a6c\u514b\u53cd\u9988\u63a7\u5236\u7684\u4e00\u4e2a\u663e\u8457\u8fdb\u6b65\uff0c\u663e\u793a\u4e86\u5f3a\u5316\u5b66\u4e60\u52a0\u901f\u805a\u53d8\u9886\u57df\u7814\u7a76\u7684\u6f5c\u529b\uff0c\u662f\u5f3a\u5316\u5b66\u4e60\u5e94\u7528\u5230\u7684\u6700\u5177\u6311\u6218\u6027\u7684\u73b0\u5b9e\u7cfb\u7edf\u4e4b\u4e00\u3002\n\u6258\u5361\u9a6c\u514b\u662f\u7528\u4e8e\u6838\u805a\u53d8\u7814\u7a76\u7684\u73af\u5f62\u88c5\u7f6e\uff0c\u662f\u4ea7\u751f\u53ef\u6301\u7eed\u7535\u529b\u7684\u4e3b\u8981\u5019\u9009\u88c5\u7f6e\u3002\u4e00\u4e2a\u4e3b\u8981\u7684\u7814\u7a76\u65b9\u5411\u662f\u7814\u7a76\u5c06\u7b49\u79bb\u5b50\u4f53\u5206\u5e03\u5851\u9020\u6210\u4e0d\u540c\u914d\u7f6e3\u30014\u30015\u7684\u6548\u679c\uff0c\u4ee5\u4f18\u5316\u7a33\u5b9a\u6027\u3001\u9650\u5236\u548c\u80fd\u91cf\u6d88\u8017\uff0c\u7279\u522b\u662f\u4e3a\u7b2c\u4e00\u6b21\u71c3\u70e7\u7b49\u79bb\u5b50\u4f53\u5b9e\u9a8cITER\u63d0\u4f9b\u4fe1\u606f\u3002\u5c06\u6bcf\u4e2a\u914d\u7f6e\u9650\u5236\u5728\u6258\u5361\u9a6c\u514b\u5185\u9700\u8981\u8bbe\u8ba1\u4e00\u4e2a\u53cd\u9988\u63a7\u5236\u5668\uff0c\u8be5\u63a7\u5236\u5668\u53ef\u4ee5\u901a\u8fc7\u7cbe\u786e\u63a7\u5236\u51e0\u4e2a\u78c1\u8026\u5408\u5230\u7b49\u79bb\u5b50\u4f53\u7684\u7ebf\u5708\u6765\u64cd\u7eb5\u78c1\u573a6\uff0c\u4ee5\u5b9e\u73b0\u6240\u9700\u7684\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u3001\u4f4d\u7f6e\u548c\u5f62\u72b6\uff0c\u8fd9\u4e2a\u95ee\u9898\u79f0\u4e3a\u6258\u5361\u9a6c\u514b\u78c1\u63a7\u95ee\u9898\u3002\n\u8fd9\u79cd\u65f6\u53d8\u3001\u975e\u7ebf\u6027\u3001\u591a\u53d8\u91cf\u63a7\u5236\u95ee\u9898\u7684\u4f20\u7edf\u65b9\u6cd5\u662f\u9996\u5148\u89e3\u51b3\u4e00\u4e2a\u53cd\u95ee\u9898\uff0c\u4ee5\u9884\u8ba1\u7b97\u4e00\u7ec4\u524d\u9988\u7ebf\u5708\u7535\u6d41\u548c\u7535\u538b7\u30018\u3002\u7136\u540e\uff0c\u8bbe\u8ba1\u4e86\u4e00\u5957\u72ec\u7acb\u7684\u5355\u8f93\u5165\u5355\u8f93\u51faPID\u63a7\u5236\u5668\uff0c\u4ee5\u7a33\u5b9a\u7b49\u79bb\u5b50\u4f53\u5782\u76f4\u4f4d\u7f6e\uff0c\u63a7\u5236\u5f84\u5411\u4f4d\u7f6e\u548c\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5fc5\u987b\u8bbe\u8ba1\u4e3a\u4e0d\u76f8\u4e92\u5e72\u62706\u3002\u5927\u591a\u6570\u63a7\u5236\u4f53\u7cfb\u7ed3\u6784\u901a\u8fc7\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\u7684\u5916\u90e8\u63a7\u5236\u56de\u8def\u8fdb\u4e00\u6b65\u589e\u5f3a\uff0c\u8be5\u56de\u8def\u6d89\u53ca\u5b9e\u73b0\u7b49\u79bb\u5b50\u4f53\u5e73\u88619\u300110\u7684\u5b9e\u65f6\u4f30\u8ba1\uff0c\u4ee5\u8c03\u5236\u524d\u9988\u7ebf\u5708\u7535\u6d418\u3002\u63a7\u5236\u5668\u7684\u8bbe\u8ba1\u57fa\u4e8e\u7ebf\u6027\u5316\u6a21\u578b\u52a8\u529b\u5b66\uff0c\u9700\u8981\u589e\u76ca\u8c03\u5ea6\u6765\u8ddf\u8e2a\u65f6\u53d8\u63a7\u5236\u76ee\u6807\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u63a7\u5236\u5668\u901a\u5e38\u662f\u6709\u6548\u7684\uff0c\u4f46\u6bcf\u5f53\u76ee\u6807\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\u53d1\u751f\u53d8\u5316\u65f6\uff0c\u5b83\u4eec\u90fd\u9700\u8981\u5927\u91cf\u7684\u5de5\u7a0b\u5de5\u4f5c\u3001\u8bbe\u8ba1\u5de5\u4f5c\u548c\u4e13\u4e1a\u77e5\u8bc6\uff0c\u4ee5\u53ca\u590d\u6742\u7684\u5b9e\u65f6\u5e73\u8861\u4f30\u7b97\u8ba1\u7b97\u3002\n\u901a\u8fc7\u4f7f\u7528\u5f3a\u5316\u5b66\u4e60\uff08RL\uff09\u751f\u6210\u975e\u7ebf\u6027\u53cd\u9988\u63a7\u5236\u5668\uff0c\u4e00\u79cd\u5168\u65b0\u7684\u63a7\u5236\u5668\u8bbe\u8ba1\u65b9\u6cd5\u6210\u4e3a\u53ef\u80fd\u3002RL\u65b9\u6cd5\u5df2\u7ecf\u6210\u529f\u5730\u5e94\u7528\u4e8e\u5176\u4ed6\u9886\u57df11\u300112\u300113\u4e2d\u7684\u51e0\u4e2a\u5177\u6709\u6311\u6218\u6027\u7684\u5e94\u7528\u4e2d\uff0c\u80fd\u591f\u76f4\u89c2\u5730\u8bbe\u5b9a\u6027\u80fd\u76ee\u6807\uff0c\u5c06\u91cd\u70b9\u8f6c\u79fb\u5230\u5e94\u8be5\u5b9e\u73b0\u4ec0\u4e48\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u5b9e\u73b0\u3002\u6b64\u5916\uff0cRL\u5927\u5927\u7b80\u5316\u4e86\u63a7\u5236\u7cfb\u7edf\u3002\u4e00\u4e2a\u8ba1\u7b97\u6210\u672c\u4f4e\u5ec9\u7684\u63a7\u5236\u5668\u53d6\u4ee3\u4e86\u5d4c\u5957\u7684\u63a7\u5236\u7ed3\u6784\uff0c\u5185\u90e8\u5316\u7684\u72b6\u6001\u91cd\u6784\u6d88\u9664\u4e86\u72ec\u7acb\u5e73\u8861\u91cd\u6784\u7684\u8981\u6c42\u3002\u8fd9\u4e9b\u7efc\u5408\u4f18\u52bf\u7f29\u77ed\u4e86\u63a7\u5236\u5668\u7684\u5f00\u53d1\u5468\u671f\uff0c\u52a0\u5feb\u4e86\u66ff\u4ee3\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\u7684\u7814\u7a76\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4eba\u5de5\u667a\u80fd\u6700\u8fd1\u88ab\u786e\u5b9a\u4e3a\u805a\u53d8\u63a7\u523614\u7684\u201c\u4f18\u5148\u7814\u7a76\u673a\u4f1a\u201d\uff0c\u5176\u57fa\u7840\u662f\u5728\u91cd\u5efa\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\u53c2\u657015\u300116\u3001\u4f7f\u7528\u66ff\u4ee3\u6a21\u578b17\u300118\u52a0\u901f\u6a21\u62df\u4ee5\u53ca\u68c0\u6d4b\u5373\u5c06\u53d1\u751f\u7684\u7b49\u79bb\u5b50\u4f53\u7834\u574f19\u65b9\u9762\u5df2\u8bc1\u660e\u7684\u6210\u529f\u3002\u7136\u800c\uff0cRL\u8fd8\u6ca1\u6709\u88ab\u7528\u4e8e\u78c1\u63a7\u5236\u5668\u7684\u8bbe\u8ba1\uff0c\u7531\u4e8e\u9ad8\u7ef4\u6d4b\u91cf\u548c\u9a71\u52a8\u3001\u957f\u65f6\u95f4\u89c6\u754c\u3001\u5feb\u901f\u4e0d\u7a33\u5b9a\u589e\u957f\u7387\u4ee5\u53ca\u9700\u8981\u901a\u8fc7\u95f4\u63a5\u6d4b\u91cf\u63a8\u65ad\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\uff0c\u8fd9\u662f\u4e00\u4e2a\u6311\u6218\u3002\n\u5728\u8fd9\u9879\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u4e2aRL\u8bbe\u8ba1\u7684\u78c1\u63a7\u5236\u5668\uff0c\u5e76\u5728\u6258\u5361\u9a6c\u514b\u4e0a\u5bf9\u5176\u6027\u80fd\u8fdb\u884c\u4e86\u5b9e\u9a8c\u9a8c\u8bc1\u3002\u63a7\u5236\u7b56\u7565\u901a\u8fc7\u4e0e\u6258\u5361\u9a6c\u514b\u6a21\u62df\u5668\u7684\u4ea4\u4e92\u5b66\u4e60\uff0c\u5e76\u88ab\u8bc1\u660e\u80fd\u591f\u76f4\u63a5\u5728\u786c\u4ef6\u4e0a\u8fdb\u884c\u6258\u5361\u9a6c\u514b\u78c1\u63a7\u5236\uff0c\u6210\u529f\u5730\u5c06\u201csim-to-real\u201d\u95f4\u9699\u6865\u63a5\u8d77\u6765\u3002\u8fd9\u4f7f\u5f97\u4ece\u9884\u5148\u8bbe\u8ba1\u72b6\u6001\u7684\u5de5\u7a0b\u9a71\u52a8\u63a7\u5236\u5230\u64cd\u4f5c\u5458\u6307\u5b9a\u76ee\u6807\u7684\u4eba\u5de5\u667a\u80fd\u9a71\u52a8\u4f18\u5316\u7684\u6839\u672c\u8f6c\u53d8\u6210\u4e3a\u53ef\u80fd\u3002\u6211\u4eec\u5728\u6258\u5361\u9a6c\u514b\u7ec4\u6001\u53d8\u91cf\uff08TCV\uff091\u30012\u4e0a\u8fdb\u884c\u7684\u5b9e\u9a8c\u4e2d\u5c55\u793a\u4e86\u6211\u4eec\u63a7\u5236\u5668\u7684\u6709\u6548\u6027\uff0c\u5728\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5bf9\u5404\u79cd\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\u7684\u63a7\u5236\uff0c\u5305\u62ecITER\u4e2d\u9884\u89c1\u7684\u7ec6\u957f\u5f62\u72b6\uff0c\u4ee5\u53ca\u5148\u8fdb\u914d\u7f6e\uff0c\u6bd4\u5982\u8d1f\u4e09\u89d2\u5f62\u548c\u201c\u96ea\u82b1\u201d\u7b49\u79bb\u5b50\u4f53\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5c55\u793a\u4e86\u4e00\u79cd\u6301\u7eed\u914d\u7f6e\uff0c\u5176\u4e2d\u4e24\u4e2a\u5355\u72ec\u7684\u7b49\u79bb\u5b50\u4f53\u201c\u6db2\u6ef4\u201d\u540c\u65f6\u4fdd\u6301\u5728\u5bb9\u5668\u5185\u3002\u6258\u5361\u9a6c\u514b\u78c1\u63a7\u662f\u6fc0\u5149\u5e94\u7528\u4e8e\u7684\u6700\u590d\u6742\u7684\u5b9e\u9645\u7cfb\u7edf\u4e4b\u4e00\u3002\u8fd9\u662f\u7b49\u79bb\u5b50\u4f53\u63a7\u5236\u5668\u8bbe\u8ba1\u7684\u4e00\u4e2a\u6709\u5e0c\u671b\u7684\u65b0\u65b9\u5411\uff0c\u6709\u53ef\u80fd\u52a0\u901f\u805a\u53d8\u79d1\u5b66\uff0c\u63a2\u7d22\u65b0\u7684\u914d\u7f6e\uff0c\u5e76\u6709\u52a9\u4e8e\u672a\u6765\u6258\u5361\u9a6c\u514b\u7684\u53d1\u5c55\u3002\n\u6211\u4eec\u7684\u7ed3\u6784\u5982\u56fe1\u6240\u793a\uff0c\u662f\u8bbe\u8ba1\u6258\u5361\u9a6c\u514b\u78c1\u7ea6\u675f\u63a7\u5236\u5668\u7684\u7075\u6d3b\u65b9\u6cd5\u3002\u8be5\u65b9\u6cd5\u6709\u4e09\u4e2a\u4e3b\u8981\u9636\u6bb5\u3002\u9996\u5148\uff0c\u8bbe\u8ba1\u5e08\u6307\u5b9a\u5b9e\u9a8c\u76ee\u6807\uff0c\u53ef\u80fd\u4f34\u968f\u7740\u65f6\u53d8\u63a7\u5236\u76ee\u6807\u3002\u5176\u6b21\uff0c\u6df1\u5ea6RL\u7b97\u6cd5\u4e0e\u6258\u5361\u9a6c\u514b\u6a21\u62df\u5668\u76f8\u4e92\u4f5c\u7528\uff0c\u627e\u5230\u4e00\u4e2a\u63a5\u8fd1\u6700\u4f18\u7684\u63a7\u5236\u7b56\u7565\uff0c\u4ee5\u6ee1\u8db3\u6307\u5b9a\u7684\u76ee\u6807\u3002\u7b2c\u4e09\uff0c\u4ee5\u795e\u7ecf\u7f51\u7edc\u8868\u793a\u7684\u63a7\u5236\u7b56\u7565\u76f4\u63a5\u5728\u6258\u5361\u9a6c\u514b\u786c\u4ef6\u4e0a\u5b9e\u65f6\u8fd0\u884c\uff08\u201c\u96f6\u70ae\u201d\uff09\u3002\na\u3001 \u63cf\u8ff0\u5b66\u4e60\u5faa\u73af\u3002\u63a7\u5236\u5668\u6839\u636e\u5f53\u524d\u7b49\u79bb\u5b50\u4f53\u72b6\u6001\u548c\u63a7\u5236\u76ee\u6807\u53d1\u9001\u7535\u538b\u547d\u4ee4\u3002\u8fd9\u4e9b\u6570\u636e\u88ab\u53d1\u9001\u5230\u91cd\u64ad\u7f13\u51b2\u533a\uff0c\u8be5\u7f13\u51b2\u533a\u5411\u5b66\u4e60\u8005\u63d0\u4f9b\u6570\u636e\u4ee5\u66f4\u65b0\u7b56\u7565\u3002b\u3001 \u6211\u4eec\u7684\u73af\u5883\u4ea4\u4e92\u56de\u8def\uff0c\u5305\u62ec\u7535\u6e90\u6a21\u578b\u3001\u4f20\u611f\u6a21\u578b\u3001\u73af\u5883\u7269\u7406\u53c2\u6570\u53d8\u5316\u548c\u5956\u52b1\u8ba1\u7b97\u3002c\u3001 \u6211\u4eec\u7684\u63a7\u5236\u7b56\u7565\u662f\u4e00\u4e2a\u5177\u6709\u4e09\u4e2a\u9690\u85cf\u5c42\u7684MLP\uff0c\u7528\u4e8e\u6d4b\u91cf\u548c\u63a7\u5236\u76ee\u6807\uff0c\u5e76\u8f93\u51fa\u7535\u538b\u547d\u4ee4\u3002d\u2013f\uff0cTCV\u548c\u5b9e\u65f6\u90e8\u7f72\u63a7\u5236\u7cfb\u7edf\u7684\u4ea4\u4e92\uff0c\u4f7f\u7528\u7531\u591a\u4e2a\u5b50\u7ec4\u4ef6\u7ec4\u6210\u7684\u5e38\u89c4\u63a7\u5236\u5668\uff08f\uff09\u6216\u6211\u4eec\u4f7f\u7528\u5355\u4e2a\u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\u76f4\u63a5\u63a7\u5236\u6240\u670919\u4e2a\u7ebf\u5708\uff08e\uff09\u7684\u67b6\u6784\u5b9e\u73b0\u3002g\u3001 TCV\u548c19\u4e2a\u9a71\u52a8\u7ebf\u5708\u7684\u63cf\u8ff0\u3002\u8239\u7684\u9ad8\u5ea6\u662f1.5\u2009\u7c73\u9ad8\uff0c\u5c0f\u534a\u5f840.88\u2009m\uff0c\u5bb9\u5668\u534a\u5bbd0.26\u2009m\u3001 j\uff0c\u8840\u7ba1\u548c\u8840\u6d46\u7684\u6a2a\u622a\u9762\uff0c\u6807\u8bb0\u4e86\u91cd\u8981\u65b9\u9762\u3002\n\u5728\u7b2c\u4e00\u9636\u6bb5\uff0c\u5b9e\u9a8c\u76ee\u6807\u7531\u4e00\u7ec4\u76ee\u6807\u6307\u5b9a\uff0c\u8fd9\u4e9b\u76ee\u6807\u53ef\u4ee5\u5305\u542b\u5404\u79cd\u5404\u6837\u7684\u671f\u671b\u5c5e\u6027\uff08\u6269\u5c55\u6570\u636e\u88684\uff09\u3002\u8fd9\u4e9b\u7279\u6027\u5305\u62ec\u4f4d\u7f6e\u548c\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u7684\u57fa\u672c\u7a33\u5b9a\uff0c\u4ee5\u53ca\u591a\u4e2a\u65f6\u53d8\u76ee\u6807\u7684\u590d\u6742\u7ec4\u5408\uff0c\u5305\u62ec\u5177\u6709\u6307\u5b9a\u5ef6\u4f38\u7387\u3001\u4e09\u89d2\u5f62\u548cX\u70b9\u4f4d\u7f6e\u7684\u7cbe\u786e\u5f62\u72b6\u8f6e\u5ed3\u3002\u7136\u540e\u5c06\u8fd9\u4e9b\u76ee\u6807\u7ec4\u5408\u6210\u4e00\u4e2a\u201c\u5956\u52b1\u51fd\u6570\u201d\uff0c\u4e3a\u6bcf\u4e2a\u65f6\u95f4\u6b65\u7684\u72b6\u6001\u5206\u914d\u4e00\u4e2a\u6807\u91cf\u8d28\u91cf\u5ea6\u91cf\u3002\u5982\u4e0b\u6587\u6240\u8ff0\uff0c\u6b64\u529f\u80fd\u8fd8\u5c06\u60e9\u7f5a\u8fbe\u5230\u4e0d\u9700\u8981\u7684\u7ec8\u7aef\u72b6\u6001\u7684\u63a7\u5236\u7b56\u7565\u3002\u6700\u5173\u952e\u7684\u662f\uff0c\u4e00\u4e2a\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u5956\u52b1\u51fd\u6570\u5c06\u88ab\u6700\u5c0f\u9650\u5ea6\u5730\u6307\u5b9a\uff0c\u4f7f\u5b66\u4e60\u7b97\u6cd5\u5177\u6709\u6700\u5927\u7684\u7075\u6d3b\u6027\uff0c\u4ee5\u8fbe\u5230\u9884\u671f\u7684\u7ed3\u679c\u3002\n\u5728\u7b2c\u4e8c\u9636\u6bb5\uff0c\u9ad8\u6027\u80fdRL\u7b97\u6cd5\u6536\u96c6\u6570\u636e\uff0c\u5e76\u901a\u8fc7\u4e0e\u73af\u5883\u7684\u4ea4\u4e92\u627e\u5230\u63a7\u5236\u7b56\u7565\uff0c\u5982\u56fe1a\u3001b\u6240\u793a\u3002\u6211\u4eec\u4f7f\u7528\u7684\u6a21\u62df\u5668\u5177\u6709\u8db3\u591f\u7684\u7269\u7406\u4fdd\u771f\u5ea6\u6765\u63cf\u8ff0\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\u548c\u7535\u6d41\u7684\u6f14\u53d8\uff0c\u540c\u65f6\u4fdd\u6301\u8db3\u591f\u4f4e\u7684\u5b66\u4e60\u8ba1\u7b97\u6210\u672c\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u7531\u8fb9\u754c\u7b49\u79bb\u5b50\u4f53\u6f14\u5316\u6a21\u578b20\u6765\u6a21\u62df\u6781\u5411\u573a\u7ebf\u5708\u7535\u538b\u5f71\u54cd\u4e0b\u7b49\u79bb\u5b50\u4f53\u72b6\u6001\u6f14\u5316\u7684\u52a8\u529b\u5b66\u3002\u5728\u8be5\u6a21\u578b\u4e2d\uff0c\u7ebf\u5708\u548c\u65e0\u6e90\u5bfc\u4f53\u4e2d\u7684\u7535\u6d41\u5728\u7535\u6e90\u7684\u5916\u90e8\u65bd\u52a0\u7535\u538b\u4ee5\u53ca\u5176\u4ed6\u5bfc\u4f53\u548c\u7b49\u79bb\u5b50\u4f53\u672c\u8eab\u4e2d\u65f6\u53d8\u7535\u6d41\u4ea7\u751f\u7684\u611f\u5e94\u7535\u538b\u7684\u5f71\u54cd\u4e0b\u6f14\u5316\u3002\u53cd\u8fc7\u6765\uff0c\u7b49\u79bb\u5b50\u4f53\u7531Grad\u2013Shafranov\u65b9\u7a0b21\u5efa\u6a21\uff0c\u8be5\u65b9\u7a0b\u662f\u6d1b\u4f26\u5179\u529b\u548c\u7b49\u79bb\u5b50\u4f53\u5185\u90e8\u538b\u529b\u68af\u5ea6\u5728\u611f\u5174\u8da3\u7684\u65f6\u95f4\u5c3a\u5ea6\u4e0a\u7684\u5e73\u8861\u7ed3\u679c\u3002\u7528\u96c6\u603b\u7535\u8def\u65b9\u7a0b\u6a21\u62df\u4e86\u7b49\u79bb\u5b50\u4f53\u603b\u7535\u6d41Ip\u7684\u6f14\u5316\u3002\u8fd9\u7ec4\u65b9\u7a0b\u7531FGE\u8f6f\u4ef6\u530522\u8fdb\u884c\u6570\u503c\u6c42\u89e3\u3002\nRL\u7b97\u6cd5\u4f7f\u7528\u6536\u96c6\u5230\u7684\u6a21\u62df\u673a\u6570\u636e\u6765\u5bfb\u627e\u5173\u4e8e\u6307\u5b9a\u5956\u52b1\u51fd\u6570\u7684\u8fd1\u4f3c\u6700\u4f18\u7b56\u7565\u3002\u7531\u4e8e\u6f14\u5316\u7b49\u79bb\u5b50\u4f53\u72b6\u6001\u7684\u8ba1\u7b97\u8981\u6c42\uff0c\u6211\u4eec\u7684\u6a21\u62df\u5668\u7684\u6570\u636e\u901f\u7387\u660e\u663e\u4f4e\u4e8e\u5178\u578b\u7684RL\u73af\u5883\u3002\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u6700\u5927\u540e\u9a8c\u6982\u7387\u7b56\u7565\u4f18\u5316\uff08MPO\uff0923\uff08\u4e00\u79cd\u6f14\u5458-\u8bc4\u8bba\u5bb6\u7b97\u6cd5\uff09\u6765\u4f18\u5316\u7b56\u7565\uff0c\u4ece\u800c\u514b\u670d\u4e86\u6570\u636e\u4e0d\u8db3\u7684\u95ee\u9898\u3002MPO\u652f\u6301\u8de8\u5206\u5e03\u5f0f\u5e76\u884c\u6d41\u8fdb\u884c\u6570\u636e\u6536\u96c6\uff0c\u5e76\u4ee5\u6570\u636e\u9ad8\u6548\u7684\u65b9\u5f0f\u8fdb\u884c\u5b66\u4e60\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u5229\u7528MPO\u6f14\u5458-\u8bc4\u8bba\u5bb6\u8bbe\u8ba1\u56fa\u6709\u7684\u4e0d\u5bf9\u79f0\u6027\u6765\u514b\u670d\u78c1\u63a7\u5236\u7684\u9650\u5236\u3002\u5728actor-critic\u7b97\u6cd5\u4e2d\uff0c\u201ccritic\u201d\u4f7f\u7528\u53ef\u7528\u6570\u636e\u5b66\u4e60\u5404\u79cd\u64cd\u4f5c\u7684\u6298\u6263\u9884\u671f\u672a\u6765\u56de\u62a5\uff0c\u201cactor\u201d\u4f7f\u7528critic\u7684\u9884\u6d4b\u6765\u8bbe\u7f6e\u63a7\u5236\u7b56\u7565\u3002\u53c2\u4e0e\u8005\u63a7\u5236\u7b56\u7565\u7684\u8868\u793a\u53d7\u5230\u9650\u5236\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u5728TCV\u4e0a\u8fd0\u884c\uff0c\u5e76\u6709\u5b9e\u65f6\u4fdd\u8bc1\uff0c\u800c\u6279\u8bc4\u8005\u5219\u4e0d\u53d7\u9650\u5236\uff0c\u56e0\u4e3a\u5b83\u53ea\u5728\u57f9\u8bad\u671f\u95f4\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728actor\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u5feb\u901f\u7684\u56db\u5c42\u524d\u9988\u795e\u7ecf\u7f51\u7edc\uff08\u56fe1c\uff09\uff0c\u5728critic\u4e2d\u4f7f\u7528\u4e86\u4e00\u4e2a\u66f4\u5927\u7684\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u3002\u8fd9\u79cd\u4e0d\u5bf9\u79f0\u6027\u4f7f\u6279\u8bc4\u5bb6\u80fd\u591f\u4ece\u6d4b\u91cf\u4e2d\u63a8\u65ad\u51fa\u6f5c\u5728\u7684\u72b6\u6001\uff0c\u5904\u7406\u4e0d\u540c\u65f6\u95f4\u5c3a\u5ea6\u4e0a\u7684\u590d\u6742\u72b6\u6001\u8f6c\u6362\u52a8\u529b\u5b66\uff0c\u5e76\u8bc4\u4f30\u7cfb\u7edf\u6d4b\u91cf\u548c\u52a8\u4f5c\u5ef6\u8fdf\u7684\u5f71\u54cd\u3002\u7136\u540e\u5c06\u6765\u81ea\u8026\u5408\u52a8\u529b\u5b66\u7684\u4fe1\u606f\u63d0\u53d6\u5230\u5177\u6709\u5b9e\u65f6\u80fd\u529b\u7684\u63a7\u5236\u5668\u4e2d\u3002\n\u5728\u7b2c\u4e09\u9636\u6bb5\uff0c\u63a7\u5236\u7b56\u7565\u4e0e\u76f8\u5173\u7684\u5b9e\u9a8c\u63a7\u5236\u76ee\u6807\u7ed1\u5b9a\u5230\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528\u4e00\u4e2a\u9488\u5bf910\u79d2\u5b9e\u65f6\u63a7\u5236\u7684\u7f16\u8bd1\u5668\u2009\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4f9d\u8d56\u6027\u5e76\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u3002\u8be5\u53ef\u6267\u884c\u6587\u4ef6\u7531TCV\u63a7\u5236\u6846\u67b624\u52a0\u8f7d\uff08\u56fe1d\uff09\u3002\u6bcf\u4e2a\u5b9e\u9a8c\u90fd\u4ece\u6807\u51c6\u7684\u7b49\u79bb\u5b50\u4f53\u5f62\u6210\u7a0b\u5e8f\u5f00\u59cb\uff0c\u5728\u8be5\u7a0b\u5e8f\u4e2d\uff0c\u4f20\u7edf\u7684\u63a7\u5236\u5668\u4fdd\u6301\u7b49\u79bb\u5b50\u4f53\u7684\u4f4d\u7f6e\u548c\u603b\u7535\u6d41\u3002\u5728\u4e00\u4e2a\u88ab\u79f0\u4e3a\u201c\u79fb\u4ea4\u201d\u7684\u9884\u5b9a\u65f6\u95f4\uff0c\u63a7\u5236\u5207\u6362\u5230\u6211\u4eec\u7684\u63a7\u5236\u7b56\u7565\uff0c\u7136\u540e\u542f\u52a819\u4e2aTCV\u63a7\u5236\u7ebf\u5708\uff0c\u5c06\u7b49\u79bb\u5b50\u4f53\u5f62\u72b6\u548c\u7535\u6d41\u8f6c\u6362\u4e3a\u6240\u9700\u7684\u76ee\u6807\u3002\u8bad\u7ec3\u540e\uff0c\u5728\u4e0d\u8fdb\u4e00\u6b65\u8c03\u6574\u63a7\u5236\u7b56\u7565\u7f51\u7edc\u6743\u91cd\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u5b9e\u9a8c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b58\u5728\u4ece\u4eff\u771f\u5230\u786c\u4ef6\u7684\u201c\u96f6\u70ae\u201d\u8f6c\u79fb\u3002\n\u63a7\u5236\u7b56\u7565\u901a\u8fc7\u5b66\u4e60\u8fc7\u7a0b\u7684\u51e0\u4e2a\u5173\u952e\u5c5e\u6027\u53ef\u9760\u5730\u8f6c\u79fb\u5230TCV\u4e0a\uff0c\u5982\u56fe1b\u6240\u793a\u3002\u6211\u4eec\u786e\u5b9a\u4e86\u4e00\u4e2a\u6267\u884c\u5668\u548c\u4f20\u611f\u5668\u6a21\u578b\uff0c\u8be5\u6a21\u578b\u7ed3\u5408\u4e86\u5f71\u54cd\u63a7\u5236\u7a33\u5b9a\u6027\u7684\u7279\u6027\uff0c\u4f8b\u5982\u5ef6\u8fdf\u3001\u6d4b\u91cf\u566a\u58f0\u548c\u63a7\u5236\u7535\u538b\u504f\u79fb\u3002\u901a\u8fc7\u5bf9\u5b9e\u9a8c\u6570\u636e\u7684\u5206\u6790\uff0c\u6211\u4eec\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u9488\u5bf9\u7b49\u79bb\u5b50\u4f53\u538b\u529b\u3001\u7535\u6d41\u5bc6\u5ea6\u5206\u5e03\u548c\u7b49\u79bb\u5b50\u4f53\u7535\u963b\u7387\u5728\u9002\u5f53\u8303\u56f4\u5185\u5e94\u7528\u4e86\u6709\u9488\u5bf9\u6027\u7684\u53c2\u6570\u53d8\u5316\uff0c\u4ee5\u89e3\u91ca\u53d8\u5316\u7684\u3001\u4e0d\u53d7\u63a7\u5236\u7684\u5b9e\u9a8c\u6761\u4ef6\u3002\u8fd9\u5728\u786e\u4fdd\u6027\u80fd\u7684\u540c\u65f6\u63d0\u4f9b\u4e86\u5065\u58ee\u6027\u3002\u867d\u7136\u6a21\u62df\u5668\u901a\u5e38\u662f\u51c6\u786e\u7684\uff0c\u4f46\u5df2\u77e5\u7684\u4e00\u4e9b\u533a\u57df\u7684\u52a8\u529b\u5b66\u8868\u73b0\u8f83\u5dee\u3002\u6211\u4eec\u5c06\u201c\u5b66\u4e60\u533a\u57df\u56de\u907f\u201d\u6784\u5efa\u5230\u8bad\u7ec3\u5faa\u73af\u4e2d\uff0c\u901a\u8fc7\u4f7f\u7528\u5956\u52b1\u548c\u7ec8\u6b62\u6761\u4ef6\uff08\u6269\u5c55\u6570\u636e\u88685\uff09\u6765\u907f\u514d\u8fd9\u4e9b\u673a\u5236\uff0c\u5f53\u9047\u5230\u7279\u5b9a\u6761\u4ef6\u65f6\uff0c\u8fd9\u4e9b\u6761\u4ef6\u4f1a\u505c\u6b62\u6a21\u62df\u3002\u7ec8\u6b62\u6761\u4ef6\u4e5f\u7528\u4e8e\u6267\u884c\u64cd\u4f5c\u9650\u5236\u3002\u63a7\u5236\u7b56\u7565\u5b66\u4e60\u4fdd\u6301\u5728\u89c4\u5b9a\u7684\u9650\u5236\u8303\u56f4\u5185\uff0c\u4f8b\u5982\uff0c\u6700\u5927\u7ebf\u5708\u7535\u6d41\u6216\u8fb9\u7f18\u5b89\u5168\u7cfb\u657025\u3002\n\u4e0e\u4f20\u7edf\u8bbe\u8ba1\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u4f53\u7cfb\u7ed3\u6784\u8bbe\u8ba1\u7684\u63a7\u5236\u5668\u5728\u7ed3\u6784\u4e0a\u5927\u5927\u7b80\u5316\uff0c\u5982\u56fe1e\u3001f\u6240\u793a\u3002RL\u9a71\u52a8\u7684\u8bbe\u8ba1\u521b\u5efa\u4e86\u4e00\u4e2a\u7f51\u7edc\u63a7\u5236\u5668\uff0c\u800c\u4e0d\u662f\u4e00\u7cfb\u5217\u63a7\u5236\u5668\u3002\n\u6211\u4eec\u5728TCV\u7684\u5b9e\u9645\u5b9e\u9a8c\u4e2d\u5c55\u793a\u4e86\u6211\u4eec\u7684\u4f53\u7cfb\u7ed3\u6784\u5bf9\u63a7\u5236\u76ee\u6807\u7684\u80fd\u529b\u3002\u6211\u4eec\u9996\u5148\u5c55\u793a\u4e86\u5bf9\u7b49\u79bb\u5b50\u4f53\u5e73\u8861\u57fa\u672c\u6027\u8d28\u7684\u7cbe\u786e\u63a7\u5236\u3002\u7136\u540e\uff0c\u6211\u4eec\u7528\u590d\u6742\u7684\u3001\u65f6\u53d8\u7684\u76ee\u6807\u548c\u7269\u7406\u76f8\u5173\u7684\u7b49\u79bb\u5b50\u4f53\u914d\u7f6e\u6765\u63a7\u5236\u5e7f\u6cdb\u7684\u5e73\u8861\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c55\u793a\u4e86\u5bf9\u5bb9\u5668\u4e2d\u540c\u65f6\u5b58\u5728\u591a\u4e2a\u7b49\u79bb\u5b50\u4f53\u201c\u6db2\u6ef4\u201d\u7684\u914d\u7f6e\u7684\u63a7\u5236\u3002\n\u6211\u4eec\u9996\u5148\u901a\u8fc7\u4e00\u7cfb\u5217\u4ee3\u8868\u5168\u7b49\u79bb\u5b50\u4f53\u653e\u7535\u6240\u9700\u53d8\u5316\u7684\u53d8\u5316\u6765\u6d4b\u8bd5\u7b49\u79bb\u5b50\u4f53\u63a7\u5236\u7684\u57fa\u672c\u4efb\u52a1\u3002\u9996\u5148\uff0c\u4ece0.0872\u7684\u79fb\u4ea4\u5f00\u59cb\u2009s\u3001 \u63a5\u7ba1\u5e76\u7a33\u5b9aIP\u2212110\u2009\u7075\u9b42\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u589e\u52a0\u5230\u2212150\u2009\u7136\u540e\u5c06\u7b49\u79bb\u5b50\u4f53\u4ece1.24\u62c9\u957f\u52301.44\uff0c\u4ece\u800c\u5c06\u5782\u76f4\u4e0d\u7a33\u5b9a\u6027\u589e\u957f\u7387\u589e\u52a0\u5230150\u2009\u8d6b\u5179\u3002\u63a5\u4e0b\u6765\uff0c\u901a\u8fc7\u5c06\u5782\u76f4\u7b49\u79bb\u5b50\u4f53\u4f4d\u7f6e\u79fb\u52a810\u6765\u6f14\u793a\u4f4d\u7f6e\u63a7\u5236\u2009cm\uff0c\u7136\u540e\u901a\u8fc7\u63a7\u5236\u6d3b\u52a8X\u70b9\u4f4d\u7f6e\u4f7f\u7b49\u79bb\u5b50\u4f53\u8f6c\u5411\uff08\u89c1\u56fe1h\uff09\u3002\u6700\u540e\uff0c\u5c06plasma\u6062\u590d\u5230\u79fb\u4ea4\u72b6\u6001\uff0c\u5e76\u5c06IP\u964d\u5230\u221270\u2009kA\u9700\u8981\u5b89\u5168\u5173\u673a\u3002\u867d\u7136\u7cbe\u5ea6\u8981\u6c42\u901a\u5e38\u53d6\u51b3\u4e8e\u7cbe\u786e\u7684\u5b9e\u9a8c\uff0c\u4f46\u5408\u7406\u7684\u76ee\u6807\u662f\u5c06I p\u63a7\u5236\u57285%\u4ee5\u5185\u2009kA\uff08\u6700\u7ec8150 kA\u76ee\u6807\u76843%\uff09\uff0c\u5f62\u72b6\u57282\u4ee5\u5185\u2009\u5398\u7c73\uff08\u8840\u7ba1\u5f84\u5411\u534a\u5bbd\u5ea6\u76848%\u4e3a26\u2009\u5398\u7c73\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u7684\u5e73\u8861\u91cd\u5efa\u5339\u914d\u89c6\u89c9\u91cd\u5efa\u8fb9\u754c\uff0c\u5176\u5178\u578b\u7cbe\u5ea6\u4e3a26:1\u2009\u5398\u7c73\n\u63a7\u5236\u7b56\u7565\u7684\u6027\u80fd\u5982\u56fe2\u6240\u793a\u3002\u6240\u6709\u4efb\u52a1\u5747\u5df2\u6210\u529f\u6267\u884c\uff0c\u8ddf\u8e2a\u7cbe\u5ea6\u4f4e\u4e8e\u9884\u671f\u9608\u503c\u3002\u5728\u6700\u521d\u7684\u9650\u5236\u9636\u6bb5\uff080.1\u2009s\u52300.45\u2009s\uff09 \uff0c\u5747\u65b9\u6839\u8bef\u5dee\uff08RMSE\uff09\u4e3a0.71\u2009kA\uff08\u76ee\u6807\u76840.59%\uff09\uff0c\u5f62\u72b6RMSE\u4e3a0.78\u2009\u5398\u7c73\uff08\u5bb9\u5668\u534a\u5bbd\u76843%\uff09\u3002\u5728\u8f6c\u5411\u9636\u6bb5\uff080.55\u2009s\u52300.8\u2009s\uff09 I p\u548c\u5f62\u72b6RMSE\u4e3a0.28\u2009kA\u548c0.53\u2009cm\uff08\u5206\u522b\u4e3a0.2%\u548c2.1%\uff09\uff0c\u5728\u6574\u4e2a\u7a97\u53e3\u5185\u4ea7\u751fRMSE\uff080.1%\uff09\u2009s\u52301.0\u2009s\uff09 0.62\u2009kA\u548c0.75\u2009\u5398\u7c73\uff080.47%\u548c2.9%\uff09\u3002\u8fd9\u8868\u660e\u6211\u4eec\u7684RL\u4f53\u7cfb\u7ed3\u6784\u80fd\u591f\u5728\u653e\u7535\u5b9e\u9a8c\u7684\u6240\u6709\u76f8\u5173\u9636\u6bb5\u8fdb\u884c\u7cbe\u786e\u7684\u7b49\u79bb\u5b50\u4f53\u63a7\u5236\u3002\n\u6f14\u793a\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u3001\u5782\u76f4\u7a33\u5b9a\u6027\u3001\u4f4d\u7f6e\u548c\u5f62\u72b6\u63a7\u5236\u3002\u9876\u90e8\uff0c\u76ee\u6807\u5f62\u72b6\u70b9\u67092\u4e2a\u2009cm\u534a\u5f84\uff08\u84dd\u8272\u5706\u5708\uff09\uff0c\u4e0e\u5b9e\u9a8c\u540e\u5e73\u8861\u91cd\u5efa\uff08\u7b49\u9ad8\u7ebf\u56fe\u4e2d\u7684\u9ed1\u8272\u8fde\u7eed\u7ebf\uff09\u8fdb\u884c\u6bd4\u8f83\u3002\u5de6\u4e0b\u89d2\uff0c\u76ee\u6807\u65f6\u95f4\u8bb0\u5f55\u9053\uff08\u84dd\u8272\u8bb0\u5f55\u9053\uff09\u4e0e\u91cd\u5efa\u89c2\u6d4b\uff08\u6a59\u8272\u8bb0\u5f55\u9053\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u6807\u8bb0\u8f6c\u79fb\u7b49\u79bb\u5b50\u4f53\u7a97\u53e3\uff08\u7eff\u8272\u77e9\u5f62\uff09\u3002\u53f3\u4e0b\u89d2\uff0c\u5bb9\u5668\u51850.6\u7684\u56fe\u7247\u2009\u5b83\u7528\u817f\u5c55\u793a\u4e86\u8f6c\u79fb\u7684\u7b49\u79bb\u5b50\u4f53\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u6211\u4eec\u7684\u4f53\u7cfb\u7ed3\u6784\u4e3a\u79d1\u5b66\u7814\u7a76\u751f\u6210\u590d\u6742\u914d\u7f6e\u7684\u80fd\u529b\u3002\u6bcf\u4e2a\u6f14\u793a\u90fd\u6709\u81ea\u5df1\u7684\u65f6\u53d8\u76ee\u6807\uff0c\u4f46\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4f53\u7cfb\u7ed3\u6784\u8bbe\u7f6e\u751f\u6210\u63a7\u5236\u7b56\u7565\uff0c\u5305\u62ec\u57f9\u8bad\u548c\u73af\u5883\u914d\u7f6e\uff0c\u53ea\u9700\u5bf9\u5956\u52b1\u529f\u80fd\u8fdb\u884c\u8f7b\u5fae\u8c03\u6574\uff08\u5982\u6269\u5c55\u6570\u636e\u88683\u6240\u793a\uff09\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u5728\u6bcf\u4e2a\u5b9e\u9a8c\u4e2d\uff0c\u7b49\u79bb\u5b50\u4f53\u5728\u5207\u6362\u524d\u5177\u6709\u8f83\u4f4e\u7684\u5ef6\u4f38\u7387\uff0c\u5e76\u4e14\u63a7\u5236\u7b56\u7565\u4e3b\u52a8\u5c06\u7b49\u79bb\u5b50\u4f53\u8c03\u8282\u5230\u611f\u5174\u8da3\u7684\u914d\u7f6e\u3002\u4ece\u8fd9\u4e9b\u5b9e\u9a8c\u4e2d\u9009\u62e9\u7684\u65f6\u95f4\u7247\u5982\u56fe3\u6240\u793a\uff0c\u6269\u5c55\u6570\u636e\u56fe1\u548c\u6269\u5c55\u6570\u636e\u88681\u4e2d\u7684\u8bef\u5dee\u5ea6\u91cf\u4e2d\u6709\u8fdb\u4e00\u6b65\u7684\u7ec6\u8282\u3002\nTCV\u5b9e\u9a8c\u671f\u95f4\u83b7\u5f97\u7684\u5bf9\u7167\u6f14\u793a\u3002\u76ee\u6807\u5f62\u72b6\u70b9\u4e3a2\u2009\u5398\u7c73\u534a\u5f84\uff08\u84dd\u8272\u5706\u5708\uff09\uff0c\u4e0e\u5e73\u8861\u91cd\u5efa\u7b49\u79bb\u5b50\u4f53\u8fb9\u754c\uff08\u9ed1\u8272\u8fde\u7eed\u7ebf\uff09\u76f8\u6bd4\u3002\u5728\u6240\u6709\u56fe\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u65f6\u95f4\u7247\u6bb5\u663e\u793a\u4e86\u5207\u6362\u6761\u4ef6\u3002a\u3001 \u5ef6\u4f38\u7387\u4e3a1.9\uff0c\u5782\u76f4\u4e0d\u7a33\u5b9a\u589e\u957f\u7387\u4e3a1.4\u2009\u5343\u8d6b\u3002b\u3001 \u5728\u4e2d\u6027\u675f\u52a0\u70ed\uff08NBH\uff09\u8fdb\u5165H\u6a21\u5f0f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd1\u4f3cITER\u63d0\u51fa\u7684\u5f62\u72b6\u3002c\u3001 \u56fe\u7684\u8d1f\u4e09\u89d2\u5ea6\u22120.8.  d\u3001 \u96ea\u82b1\u914d\u7f6e\uff0c\u5bf9\u5e95\u90e8X\u70b9\u8fdb\u884c\u65f6\u53d8\u63a7\u5236\uff0c\u76ee\u6807X\u70b9\u7528\u84dd\u8272\u6807\u8bb0\u3002\u8fd9\u4e9b\u653e\u70ae\u7684\u6269\u5c55\u8f68\u8ff9\u53ef\u4ee5\u5728\u6269\u5c55\u6570\u636e\u56fe2\u4e2d\u627e\u5230\u3002\n\u62c9\u957f\u7b49\u79bb\u5b50\u4f53\u6539\u5584\u4e86\u5b83\u4eec\u7684\u70ed\u7ea6\u675f\u7279\u6027\uff0c\u4f46\u5b83\u4eec\u589e\u52a0\u7684\u5782\u76f4\u4e0d\u7a33\u5b9a\u6027\u589e\u957f\u7387\u4f7f\u63a7\u5236\u53d8\u5f97\u590d\u6742\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f1.9\u7684\u9ad8\u5ef6\u4f38\u7387\u548c\u53ef\u89c2\u7684\u589e\u957f\u7387\u3002\u63a7\u5236\u5668\u80fd\u591f\u4ea7\u751f\u5e76\u7a33\u5b9a\u8fd9\u79cd\u4f38\u957f\uff0c\u5982\u56fe3a\u6240\u793a\u3002\u6211\u4eec\u83b7\u5f97\u4e86\u76ee\u6807\u5ef6\u4f38\u7387\u548c\u671f\u671b\u5ef6\u4f38\u7387\u4e4b\u95f4\u7684\u826f\u597d\u5339\u914d\uff0cRMSE\u4e3a0.018\u3002\u6211\u4eec\u8fd8\u5c06\u5f62\u72b6\u548c\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u63a7\u5236\u5728\u5176\u76ee\u6807\u503c\uff0cIPRMSE\u4e3a1.2\u2009kA\u548c\u5f62\u72b6RMSE\u4e3a1.6\u2009\u5398\u7c73\u8fd9\u8868\u660e\u6709\u80fd\u529b\u7a33\u5b9a\u8d85\u8fc71.4%\u7684\u9ad8\u5782\u76f4\u4e0d\u7a33\u5b9a\u6027\u589e\u957f\u7387\u2009kHz\uff0c\u5c3d\u7ba1\u53ea\u572810\u2009\u5343\u8d6b\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6d4b\u8bd5\u4e86\u901a\u8fc7\u4e2d\u6027\u675f\u6ce8\u5165\u5e94\u7528\u8f85\u52a9\u52a0\u70ed\u4ee5\u8fdb\u5165\u201cH\u6a21\u5f0f\u201d\uff0c\u8fd9\u5bf9\u4e8e\u5177\u6709\u66f4\u9ad8\u80fd\u91cf\u9650\u5236\u65f6\u95f4\u662f\u53ef\u53d6\u7684\uff0c\u4f46\u4f1a\u5bfc\u81f4\u7b49\u79bb\u5b50\u4f53\u7279\u6027\u53d1\u751f\u663e\u8457\u53d8\u5316\u3002\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u57fa\u4e8e\u63d0\u8bae\u7684\u4f7f\u7528\u8fd9\u79cd\u8f85\u52a9\u52a0\u70ed\u7684ITER\u914d\u7f6e\u7684\u65f6\u53d8\u8f68\u8ff9\u3002\u5f53\u6807\u51c6\u5316\u538b\u529b\u03b2p\u589e\u52a0\u52301.12\u65f6\uff0c\u5982\u56fe3b\u6240\u793a\uff0c\u7b49\u79bb\u5b50\u4f53\u4f4d\u7f6e\u548c\u7535\u6d41\u4fdd\u6301\u51c6\u786e\uff0cI p RMSE\u4e3a2.6\u2009kA\u548c\u5f62\u72b6RMSE\u4e3a1.4\u2009\u5398\u7c73\u8fd9\u8868\u660e\u6211\u4eec\u7684\u63a7\u5236\u5668\u80fd\u591f\u9c81\u68d2\u5730\u9002\u5e94\u4e0d\u65ad\u53d8\u5316\u7684\u7b49\u79bb\u5b50\u4f53\u72b6\u6001\uff0c\u5e76\u4e14\u80fd\u591f\u5728\u5916\u90e8\u6307\u5b9a\u7684\u914d\u7f6e\u4e0b\u4e0e\u52a0\u70ed\u7684H\u578b\u7b49\u79bb\u5b50\u4f53\u4e00\u8d77\u5de5\u4f5c\u3002\n\u8d1f\u4e09\u89d2\u5f62\u7b49\u79bb\u5b50\u4f53\u5f88\u6709\u5438\u5f15\u529b\uff0c\u56e0\u4e3a\u5b83\u4eec\u5177\u6709\u826f\u597d\u7684\u7ea6\u675f\u7279\u6027\uff0c\u6ca1\u6709\u5178\u578bH\u6a21\u7684\u5f3a\u8fb9\u7f18\u538b\u529b\u68af\u5ea6\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u4e00\u4e2a\u5177\u6709\u4e09\u89d2\u5f62\u22120.8\uff0c\u4e24\u4e2a\u89d2\u90fd\u6709X\u70b9\u3002\u6211\u4eec\u6210\u529f\u5730\u5b9e\u73b0\u4e86\u8fd9\u79cd\u914d\u7f6e\uff0c\u5982\u56fe3c\u6240\u793a\u3002\u4e09\u89d2\u5f62\u7cbe\u786e\u5339\u914d\uff0cRMSE\u4e3a0.070\uff0c\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u548c\u5f62\u72b6\u4e5f\u7cbe\u786e\u5339\u914d\uff0cRMSE\u503c\u4e3a3.5\u2009kA\u548c1.3\u2009\u5206\u522b\u4e3a\u5398\u7c73\u3002\u8fd9\u8bc1\u660e\u4e86\u5728\u4e3b\u52a8\u7814\u7a7627\u4e0b\u5feb\u901f\u76f4\u63a5\u521b\u5efa\u914d\u7f6e\u7684\u80fd\u529b\u3002\n\u7814\u7a76\u4e86\u96ea\u82b1\u7ed3\u678428\u300129\uff0c\u56e0\u4e3a\u5b83\u4eec\u5c06\u7c92\u5b50\u6392\u6c14\u5206\u5e03\u5728\u51e0\u4e2a\u649e\u51fb\u70b9\u4e0a\u3002\u4e00\u4e2a\u5173\u952e\u53c2\u6570\u662f\u5f62\u6210\u504f\u6ee4\u5668\u652f\u817f\u7684\u4e24\u4e2aX\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u5c55\u793a\u4e86\u6211\u4eec\u63a7\u5236\u8fd9\u4e00\u8ddd\u79bb\u7684\u80fd\u529b\uff0c\u5982\u56fe3d\u6240\u793a\u3002\u63a7\u5236\u7b56\u7565\u9996\u5148\u5efa\u7acb\u4e86\u4e00\u4e2a\u96ea\u82b1\u914d\u7f6e\uff0cX\u70b9\u4e4b\u95f4\u752834\u9694\u5f00\u2009\u5398\u7c73\u7136\u540e\u64cd\u7eb5\u8fdcX\u70b9\u63a5\u8fd1\u6781\u9650X\u70b9\uff0c\u4ee56.6\u7684\u95f4\u9694\u7ed3\u675f\u2009\u5398\u7c73\u4f7f\u75283.7\u7684\u7ec4\u5408RMSE\u8ddf\u8e2a\u65f6\u53d8X\u70b9\u76ee\u6807\u2009\u5398\u7c73\u5728\u8fd9\u4e2a\u8f6c\u53d8\u8fc7\u7a0b\u4e2d\uff0c\u7b49\u79bb\u5b50\u4f53\u7535\u6d41\u548c\u5f62\u72b6\u4fdd\u6301\u5728\u9ad8\u7cbe\u5ea6\uff0cRMSE\u503c\u4e3a0.50\u2009kA\u548c0.65\u2009\u5206\u522b\u4e3a\u5398\u7c73\u3002\u8fd9\u8868\u660e\u4e86\u5bf9\u5177\u6709\u591a\u4e2a\u8026\u5408\u76ee\u6807\u7684\u590d\u6742\u65f6\u53d8\u76ee\u6807\u7684\u7cbe\u786e\u63a7\u5236\u3002\n\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e9b\u5b9e\u9a8c\u8bc1\u660e\n......", "note_en": "Nuclear fusion using magnetic confinement, in particular in the tokamak configuration, is a promising path towards sustainable energy. A core challenge is to shape and maintain a high-temperature plasma within the tokamak vessel. This requires high-dimensional, high-frequency, closed-loop control using magnetic actuator coils, further complicated by the diverse requirements across a wide range of plasma configurations. In this work, we introduce a previously undescribed architecture for tokamak magnetic controller design that autonomously learns to command the full set of control coils. This architecture meets control objectives specified at a high level, at the same time satisfying physical and operational constraints. This approach has unprecedented flexibility and generality in problem specification and yields a notable reduction in design effort to produce new plasma configurations. We successfully produce and control a diverse set of plasma configurations on the Tokamak \u00e0 Configuration Variable  1, 2, including elongated, conventional shapes, as well as advanced configurations, such as negative triangularity and \u2018snowflake\u2019 configurations. Our approach achieves accurate tracking of the location, current and shape for these configurations. We also demonstrate sustained \u2018droplets\u2019 on TCV, in which two separate plasmas are maintained simultaneously within the vessel. This represents a notable advance for tokamak feedback control, showing the potential of reinforcement learning to accelerate research in the fusion domain, and is one of the most challenging real-world systems to which reinforcement learning has been applied.\n     Tokamaks are torus-shaped devices for nuclear fusion research and are a leading candidate for the generation of sustainable electric power. A main direction of research is to study the effects of shaping the distribution of the plasma into different configurations  3, 4, 5 to optimize the stability, confinement and energy exhaust, and, in particular, to inform the first burning-plasma experiment, ITER. Confining each configuration within the tokamak requires designing a feedback controller that can manipulate the magnetic field  6 through precise control of several coils that are magnetically coupled to the plasma to achieve the desired plasma current, position and shape, a problem known as the tokamak magnetic control problem.\n The conventional approach to this time-varying, non-linear, multivariate control problem is to first solve an inverse problem to precompute a set of feedforward coil currents and voltages  7, 8. Then, a set of independent, single-input single-output PID controllers is designed to stabilize the plasma vertical position and control the radial position and plasma current, all of which must be designed to not mutually interfere  6. Most control architectures are further augmented by an outer control loop for the plasma shape, which involves implementing a real-time estimate of the plasma equilibrium  9, 10 to modulate the feedforward coil currents  8. The controllers are designed on the basis of linearized model dynamics, and gain scheduling is required to track time-varying control targets. Although these controllers are usually effective, they require substantial engineering effort, design effort and expertise whenever the target plasma configuration is changed, together with complex, real-time calculations for equilibrium estimation.\n A radically new approach to controller design is made possible by using reinforcement learning (RL) to generate non-linear feedback controllers. The RL approach, already used successfully in several challenging applications in other domains  11, 12, 13, enables intuitive setting of performance objectives, shifting the focus towards what should be achieved, rather than how. Furthermore, RL greatly simplifies the control system. A single computationally inexpensive controller replaces the nested control architecture, and an internalized state reconstruction removes the requirement for independent equilibrium reconstruction. These combined benefits reduce the controller\u00a0development cycle and accelerate the study of alternative plasma configurations. Indeed, artificial intelligence has recently been identified as a \u2018Priority Research Opportunity\u2019 for fusion control  14, building on demonstrated successes in reconstructing plasma-shape parameters  15, 16, accelerating simulations using surrogate models  17, 18 and detecting impending plasma disruptions  19. RL has not, however, been used for magnetic controller design, which is challenging due to high-dimensional measurements and actuation, long time horizons, rapid instability growth rates and the need to infer the plasma shape through indirect measurements.\n In this work, we present an RL-designed magnetic controller and experimentally verify its performance on a tokamak. The control policies are learned through interaction with a tokamak simulator and are shown to be directly capable of tokamak magnetic control on hardware, successfully bridging the \u2018sim-to-real\u2019 gap. This enables a fundamental shift from engineering-driven control of a pre-designed state to artificial-intelligence-driven optimization of objectives specified by an operator. We demonstrate the effectiveness of our controllers in experiments carried out on the Tokamak \u00e0 Configuration Variable (TCV)  1, 2, in which we demonstrate control of a variety of plasma shapes, including elongated ones, such as those foreseen in ITER, as well as advanced configurations, such as negative triangularity and \u2018snowflake\u2019 plasmas. Additionally, we demonstrate a sustained configuration in which two separate plasma \u2018droplets\u2019 are simultaneously maintained within the vessel. Tokamak magnetic control is one of the most complex real-world systems to which RL has been applied. This is a promising new direction for plasma controller design, with the potential to accelerate fusion science, explore new configurations and aid in future tokamak development.\n Our architecture, depicted in Fig.  1, is a flexible approach for designing tokamak magnetic confinement controllers. The approach has three main phases. First, a designer specifies objectives for the experiment, potentially accompanied by time-varying control targets. Second, a deep RL algorithm interacts with a tokamak simulator to find a near-optimal control policy to meet the specified goals. Third, the control policy, represented as a neural network, is run directly (\u2018zero shot\u2019) on tokamak hardware in real time.\n a, Depiction of the learning loop. The controller sends voltage commands on the basis of the current plasma state and control targets. These data are sent to the replay buffer, which feeds data to the learner to update the policy.  b, Our environment interaction loop, consisting of a power supply model, sensing model, environment physical parameter variation and reward computation.  c, Our control policy is an MLP with three hidden layers that takes measurements and control targets and outputs voltage commands.  d\u2013 f, The interaction of TCV and the real-time-deployed control system implemented using either a conventional controller composed of many subcomponents ( f) or our architecture using a single deep neural network to control all 19 coils directly ( e).  g, A depiction of TCV and the 19 actuated coils. The vessel is 1.5\u2009m high, with minor radius 0.88\u2009m and\u00a0vessel half-width 0.26\u2009m.  j, A cross section of the vessel and plasma, with the important aspects labelled.\n In the first phase, the experimental goal is specified by a set of objectives that can contain a wide variety of desired properties (Extended Data Table  4). These properties range from basic stabilization of position and plasma current to sophisticated combinations of several time-varying targets, including a precise shape outline with specified elongation, triangularity and X-point location. These objectives are then combined into a \u2018reward function\u2019 that assigns a scalar quality measure to the state at each time step. This function also penalizes the control policy for reaching undesired terminal states, as discussed below. Crucially, a well-designed reward function will be minimally specified, giving the learning algorithm maximum flexibility to attain the desired outcome.\n In the second phase, a high-performance RL algorithm collects data and finds a control policy through interaction with an environment, as depicted in Fig.  1a, b. We use a simulator that has enough physical fidelity to describe the evolution of plasma shape and current, while remaining sufficiently computationally cheap for learning. Specifically, we model the dynamics governing the evolution of the plasma state under the influence of the poloidal field coil voltages using a free-boundary plasma-evolution model  20. In this model, the currents in the coils and passive conductors evolve under the influence of externally applied voltages from the power supplies, as well as induced voltages from time-varying currents in other conductors and in the plasma itself. The plasma is, in turn, modelled by the Grad\u2013Shafranov equation  21, which results from the balance between the Lorentz force and the pressure gradient inside the plasma on the timescales of interest. The evolution of total plasma current  I p is modelled using a lumped-circuit equation. This set of equations is solved numerically by the FGE software package  22.\n The RL algorithm uses the collected simulator data to find a near-optimal policy with respect to the specified reward function. The data rate of our simulator is markedly slower than that of a typical RL environment due to the computational requirements of evolving the plasma state. We overcome the paucity of data by optimizing the policy using maximum a posteriori policy optimization (MPO)  23, an actor-critic algorithm. MPO supports data collection across distributed parallel streams and learns in a data-efficient way. We additionally exploit the asymmetry inherent to the actor-critic design of MPO to overcome the constraints of magnetic control. In actor-critic algorithms, the \u2018critic\u2019 learns the discounted expected future reward for various actions using the available data and the \u2018actor\u2019 uses the predictions of the critic to set the control policy. The representation of the control policy of the actor is restricted, as it must run on TCV with real-time guarantees, whereas the critic is unrestricted, as it is only used during training. We therefore use a fast, four-layer feedforward neural network in the actor (Fig.  1c) and a much larger recurrent neural network in the critic. This asymmetry enables the critic to infer the underlying state from measurements, deal with complex state-transition dynamics over different timescales and assess the influence of system measurement and action delays. The information from the coupled dynamics is then distilled into a real-time-capable controller.\n In the third phase, the control policy is bundled with the associated experiment control targets into an executable using a compiler tailored towards real-time control at 10\u2009kHz that minimizes dependencies and eliminates unnecessary computations. This executable is loaded by the TCV control framework  24 (Fig.  1d). Each experiment begins with standard plasma-formation procedures, in which a traditional controller maintains the location of the plasma and total current. At a prespecified time, termed the \u2018handover\u2019, control is switched to our control policy, which then actuates the 19 TCV control coils to transform the plasma shape and current to the desired targets. Experiments are executed without further tuning of the control-policy network weights after training, in other words, there is \u2018zero-shot\u2019 transfer from simulation to hardware.\n The control policies reliably transfer onto TCV through several key attributes of the learning procedure, depicted in Fig.  1b. We identified an actuator and sensor model that incorporates properties affecting control stability, such as delays, measurement noise and control-voltage offsets. We applied targeted parameter variation during training across an appropriate range for the plasma pressure, current density profile and plasma resistivity through analysis of experiment data, to account for varying, uncontrolled experimental conditions. This provides robustness while ensuring performance. Although the simulator is generally accurate, there are known regions where the dynamics are known to be poorly represented. We built \u2018learned-region avoidance\u2019 into the training loop to avoid these regimes through the use of rewards and termination conditions (Extended Data Table  5), which halt the simulation when specified conditions are encountered. Termination conditions are also used to enforce operational limits. The control policies learn to stay within the specified limits, for example, on maximum coil current or the edge safety factor  25.\n The controllers designed by our architecture are greatly structurally simplified compared with conventional designs, as depicted in Fig.  1e, f. Instead of a series of controllers, RL-driven design creates a single network controller.\n We demonstrate the capability of our architecture on control targets in real-world experiments on TCV. We first show accurate control of the fundamental qualities of plasma equilibria. We then control a wide range of equilibria with complex, time-varying objectives and physically relevant plasma configurations. Finally, we demonstrate control of a configuration with several plasma \u2018droplets\u2019 in the vessel simultaneously.\n We first test the fundamental tasks of plasma control through a series of changes representative of those required for a full plasma discharge. First, from the handover at 0.0872\u2009s, take\u00a0over and stabilize  I p at \u2212110\u2009kA. Next, ramp the plasma current to \u2212150\u2009kA and then elongate the plasma from 1.24 to 1.44, thereby increasing the vertical instability growth rate to 150\u2009Hz. Next, demonstrate position control through shifting the vertical plasma position by 10\u2009cm and then divert the plasma with control of the active X-point location (see Fig.  1h). Finally, return the plasma to the handover condition and ramp down  I p to \u221270\u2009kA to shut down safely. Although accuracy requirements will generally depend on the exact experiment, a reasonable aim is to control  I p to within 5\u2009kA (3% of the final 150-kA target) and the shape to within 2\u2009cm (8% of the vessel radial half width of 26\u2009cm). Note that the equilibrium reconstruction used matches a visually reconstructed boundary with a typical accuracy  26 of 1\u2009cm.\n The performance of the control policy is depicted in Fig.  2. All tasks are performed successfully, with a tracking accuracy below the desired thresholds. In the initial limited phase (0.1\u2009s to 0.45\u2009s), the  I p root-mean-square error (RMSE) is 0.71\u2009kA (0.59% of the target) and the shape RMSE is 0.78\u2009cm (3% of the vessel half width). In the diverted phase (0.55\u2009s to 0.8\u2009s), the  I p and shape RMSE are 0.28\u2009kA and 0.53\u2009cm,respectively (0.2% and 2.1%), yielding RMSE across the full window (0.1\u2009s to 1.0\u2009s) of 0.62\u2009kA and 0.75\u2009cm (0.47% and 2.9%). This demonstrates that our RL architecture is capable of accurate plasma control across all relevant phases of a discharge experiment.\n Demonstration of plasma current, vertical stability, position and shape control. Top, target shape points with 2\u2009cm radius\u00a0(blue circles),\u00a0compared with the post-experiment equilibrium reconstruction (black continuous line in contour plot). Bottom left, target time traces (blue traces) compared with reconstructed observation (orange traces),\u00a0with the window of diverted plasma marked (green rectangle). Bottom right, picture inside the vessel at 0.6\u2009s showing the diverted plasma with its legs.\n We next demonstrate the capability of our architecture to produce complex configurations for scientific study. Each demonstration has its own time-varying targets but, otherwise, uses the same architectural setup to generate a control policy, including the training and environment configuration, with only minor adjustments to the reward function (shown in Extended Data Table  3). Recall that, in each experiment, the plasma has low elongation before the handover, and the control policy actively modulates the plasma to the configuration of interest. Selected time slices from these experiments are shown in Fig.  3, with further detail in Extended Data Fig.  1 and error metrics in Extended Data Table  1.\n Control demonstrations obtained during TCV experiments. Target shape points with 2\u2009cm radius\u00a0(blue circles), compared with the equilibrium reconstruction plasma boundary (black continuous line). In all figures, the first time slice shows the handover condition.  a, Elongation of 1.9 with vertical instability growth rate of 1.4\u2009kHz.  b, Approximate ITER-proposed shape with neutral beam heating (NBH) entering H-mode.  c, Diverted negative triangularity of \u22120.8.  d, Snowflake configuration with a time-varying control of the bottom X-point, where the target X-points are\u00a0marked in blue. Extended traces for these shots can be found in Extended Data\u00a0Fig.\u00a02.\n Elongating plasmas improves their thermal\u00a0confinement properties, but their increased vertical-instability growth rate complicates control. We targeted a high elongation of 1.9 with a considerable growth rate. The controller was able to produce and stabilize this elongation, as shown in Fig.  3a. We obtained a good match between the targeted and the desired elongation, with an RMSE of 0.018. We also controlled shape and plasma current to their target values, with an  I p RMSE of 1.2\u2009kA and shape RMSE of 1.6\u2009cm. This demonstrates the capability to stabilize a high vertical-instability growth rate of more than 1.4\u2009kHz, despite acting at only 10\u2009kHz.\n We next tested applying auxiliary heating through neutral beam injection to enter \u2018H-mode\u2019, which is desirable for having higher energy confinement time, but causes notable changes to the plasma properties. We were provided a time-varying trajectory on the basis of the proposed ITER configuration that uses such auxiliary heating. As the normalized pressure  \u03b2 p increases to 1.12, seen in Fig.  3b, the plasma position and current were maintained accurately, with an  I p RMSE of 2.6\u2009kA and shape RMSE of 1.4\u2009cm. This shows that our controller can robustly adapt to a changing plasma state and can work with heated H-mode plasma under externally specified configurations.\n Negative triangularity plasmas are attractive as they have favourable confinement properties without the strong edge pressure gradient typical of H-modes. We targeted a diverted configuration with triangularity of \u22120.8, and with X-points at both corners. We successfully achieved this configuration, shown in Fig.  3c. The triangularity was accurately matched, with an RMSE of 0.070, as were the plasma current and shape, with RMSE values of 3.5\u2009kA and 1.3\u2009cm, respectively. This demonstrates the ability to rapidly and directly create a configuration under active study  27.\n Snowflake configurations are researched  28, 29, as they distribute the particle exhaust across several strike points. A crucial parameter is the distance between the two X-points that form the divertor legs. We demonstrated our ability to control this distance, shown in Fig.  3d. The control policy first established a snowflake configuration with X-points separated by 34\u2009cm. It then manipulated the far X-point to approach the limiting X-point, ending with a separation of 6.6\u2009cm. The time-varying X-point targets were tracked with a combined RMSE of 3.7\u2009cm. The plasma current and shape were maintained to high accuracy during this transition, with RMSE values of 0.50\u2009kA and 0.65\u2009cm, respectively. This demonstrates accurate control of a complex time-varying target with several coupled objectives.\n In aggregate, these experiments demonstrate t\n......", "posttime": "2022-02-17 14:10:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f3a\u5316,control,\u7b49\u79bb\u5b50\u4f53", "title": "\u901a\u8fc7\u6df1\u5ea6\u5f3a\u5316\u5b66\u4e60\u5b9e\u73b0\u6258\u5361\u9a6c\u514b\u7b49\u79bb\u5b50\u4f53\u7684\u78c1\u63a7\u5236", "title_en": "Magnetic control of tokamak plasmas through deep reinforcement learning", "transed": 1, "url": "https://www.nature.com/articles/s41586-021-04301-9", "via": "", "real_tags": ["\u5f3a\u5316", "control", "\u7b49\u79bb\u5b50\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073842, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6216\u8005\uff0cy&#39\uff1b\u77e5\u9053\u5417\uff0c\u505c\u6b62\u4f7f\u7528expr\u3002\u901a\u8fc7\u4f7f\u7528\u53c2\u6570\u5c55\u5f00\uff0c\u60a8\u53ef\u4ee5\u5b8c\u6210expr\u6240\u505a\u7684\u4e00\u5207\u3002\u4ec0\u4e48&#39\uff1b\u4e0a\u9762\u90a3\u4e1c\u897f\u60f3\u5e72\u4ec0\u4e48\uff1f\u5220\u9664\u5355\u8bcd\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff1f\u8fd9\u53ef\u4ee5\u5728POSIX shell\u4e2d\u4f7f\u7528PE\u6216\u5b50\u5b57\u7b26\u4e32\u6269\u5c55\u6765\u5b9e\u73b0\uff1a\u8bf4\u771f\u7684\uff0c\u6709&#39\uff1b\u9664\u975e\u4f60&#39\uff1b\u6211\u4eec\u5728Solaris\u4e0a\u5b89\u88c5\u4e86\u4e0d\u7b26\u5408POSIX\u7684/bin/sh.It&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u5916\u90e8\u8fc7\u7a0b\uff0c\u6240\u4ee5\u5b83&#39\uff1b\u5b83\u6bd4\u8fdb\u7a0b\u4e2d\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u6162\u5f97\u591a\u3002\u56e0\u4e3a\u6ca1\u6709\u4eba\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u6ca1\u6709\u4eba\u77e5\u9053\u5b83\u662f\u4ec0\u4e48&#39\uff1b\u8fd9\u6837\u4e00\u6765\uff0c\u4f60\u7684\u4ee3\u7801\u5c31\u53d8\u5f97\u5f88\u6a21\u7cca\uff0c\u5f88\u96be\u7ef4\u62a4\u3002\u4e00\u822c\u6765\u8bf4\uff1aUnix UTF-8\u6587\u672c\u4e0d\u4f7f\u7528BOM\u3002\u7eaf\u6587\u672c\u7684\u7f16\u7801\u7531\u8bed\u8a00\u73af\u5883\u3001mime\u7c7b\u578b\u6216\u5176\u4ed6\u5143\u6570\u636e\u51b3\u5b9a\u3002\u867d\u7136BOM\u7684\u5b58\u5728\u901a\u5e38\u4e0d\u4f1a\u635f\u574f\u4ec5\u7528\u4e8e\u4eba\u7c7b\u9605\u8bfb\u7684UTF-8\u6587\u6863\uff0c\u4f46\u5728\u4efb\u4f55\u65e8\u5728\u901a\u8fc7\u811a\u672c\u3001\u6e90\u4ee3\u7801\u3001\u914d\u7f6e\u6587\u4ef6\u7b49\u81ea\u52a8\u5316\u8fc7\u7a0b\u8fdb\u884c\u89e3\u91ca\u7684\u6587\u672c\u6587\u4ef6\u4e2d\uff0cBOM\u90fd\u662f\u6709\u95ee\u9898\u7684\uff08\u901a\u5e38\u5728\u8bed\u6cd5\u4e0a\u662f\u975e\u6cd5\u7684\uff09\u3002\u4ee5BOM\u5f00\u5934\u7684\u6587\u4ef6\u5e94\u4e0e\u4ee5MS-DOS\u6362\u884c\u7b26\u5f00\u5934\u7684\u6587\u4ef6\u4e00\u6837\u88ab\u89c6\u4e3a\u5916\u6765\u6587\u4ef6\u3002\u5728shell\u811a\u672c\u4e2d\uff1a&#39\uff1b\u5f53UTF-8\u57288\u4f4d\u73af\u5883\u4e2d\u900f\u660e\u4f7f\u7528\u65f6\uff0cBOM\u7684\u4f7f\u7528\u5c06\u5e72\u6270\u4efb\u4f55\u534f\u8bae\u6216\u6587\u4ef6\u683c\u5f0f\uff0c\u8fd9\u4e9b\u534f\u8bae\u6216\u6587\u4ef6\u683c\u5f0f\u5728\u5f00\u59cb\u65f6\u9700\u8981\u7279\u5b9a\u7684ASCII\u5b57\u7b26\uff0c\u4f8b\u5982\u4f7f\u7528&#34\uff1b#&#34; \u5728Unix shell\u811a\u672c\u7684\u5f00\u5934&#39;  http://unicode.org/faq/utf_bom.html#bom5\u6ca1\u6709&#39\uff1b\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\uff0c\u4f46\u662f\u60a8\u5e94\u8be5\u77e5\u9053\u547d\u4ee4\u66ff\u6362\uff08\u6240\u6709\u5f62\u5f0f\uff1a`\uff0c$\uff08\u2026\uff09$\uff08&lt\uff1b\u6587\u4ef6\uff09\uff0c`&lt\uff1b\u6587\u4ef6`\uff0c\u548c${\u3002\u3002\u3002\uff1b}\uff08ksh\uff09\uff09\u5220\u9664\u6240\u6709\u5c3e\u968f\u7684\u6362\u884c\u7b26\u3002\u8fd9\u901a\u5e38\u662f\u65e0\u5173\u7d27\u8981\u7684\uff0c\u751a\u81f3\u662f\u53ef\u53d6\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5fc5\u987b\u4fdd\u7559\u6587\u5b57\u8f93\u51fa\uff0c\u5305\u62ec\u4efb\u4f55\u53ef\u80fd\u7684\u5c3e\u968f\u6362\u884c\u7b26\uff0c\u8fd9\u4f1a\u53d8\u5f97\u5f88\u68d8\u624b\uff0c\u56e0\u4e3a\u60a8\u65e0\u6cd5\u77e5\u9053\u8f93\u51fa\u4e2d\u662f\u5426\u6709\u5b83\u4eec\u6216\u6709\u591a\u5c11\u3002\u4e00\u4e2a\u4e11\u964b\u4f46\u53ef\u7528\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u5728\u547d\u4ee4\u66ff\u6362\u4e2d\u6dfb\u52a0\u540e\u7f00\uff0c\u5e76\u5728\u5916\u90e8\u5220\u9664\u5b83\uff1a\u4e00\u4e2a\u53ef\u79fb\u690d\u6027\u8f83\u5dee\u4f46\u53ef\u4ee5\u8bf4\u66f4\u6f02\u4eae\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528\u5e26\u7a7a\u5206\u9694\u7b26\u7684\u8bfb\u53d6Ksh\uff08\u6216\u542f\u7528lastpipe\u7684bash 4.2+\uff09readlink-fn--34$\u8fea\u9c81\u8def&#34\uff1b|IFS=read-rd&#39&#39; \u7edd\u5bf9\u8def\u5f84\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u7f3a\u70b9\u662f\uff0c\u9664\u975e\u547d\u4ee4\u8f93\u51fa\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u5bfc\u81f4\u53ea\u8bfb\u53d6\u90e8\u5206\u6d41\uff0c\u5426\u5219\u8bfb\u53d6\u603b\u662f\u8fd4\u56defalse\u3002\u83b7\u53d6\u547d\u4ee4\u9000\u51fa\u72b6\u6001\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u901a\u8fc7PIPESTATUS\u3002\u60a8\u8fd8\u53ef\u4ee5\u6545\u610f\u8f93\u51fa\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u5f3a\u5236read\u8fd4\u56detrue\uff0c\u5e76\u4f7f\u7528pipefail\u3002set-o pipefail{readlink-fn--&#34\uff1b$dir#u path&#34\uff1b&amp\uff1bprintf&#39\uff1b\\0&#39\uff1b}IFS=read-rd&#39&#39; \u7edd\u5bf9\u8def\u5f84\u8bbe\u7f6e+o\u7ba1\u9053\u6545\u969c\n\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u4e00\u4e2a\u53ef\u79fb\u690d\u6027\u6df7\u4e71\uff0c\u56e0\u4e3aBash\u540c\u65f6\u652f\u6301pipefail\u548cPIPESTATUS\uff0cksh93\u53ea\u652f\u6301pipefail\uff0c\u53ea\u6709mksh\u7684\u6700\u65b0\u7248\u672c\u652f\u6301pipefail\uff0c\u800c\u65e9\u671f\u7248\u672c\u53ea\u652f\u6301PIPESTATUS\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u4f7f\u8bfb\u53d6\u505c\u6b62\u5728NUL\u5b57\u8282\uff0c\u9700\u8981\u4e00\u4e2a\u524d\u6cbfksh93\u7248\u672c\u3002\u9632\u6b62\u7a0b\u5e8f\u5c06\u4f20\u9012\u7ed9\u5b83\u4eec\u7684\u6587\u4ef6\u540d\u89e3\u91ca\u4e3a\u9009\u9879\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u8def\u5f84\u540d\uff08\u53c2\u89c1\u4e0a\u9762\u7684\u9677\u96313\uff09\u3002\u5bf9\u4e8e\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\uff0c\u540d\u79f0\u7684\u524d\u7f00\u53ef\u4ee5\u662f\u76f8\u5bf9\u8def\u5f84\u540d\u3002/\u3002\u5bf9\u4e8e\u50cf**\u8fd9\u6837\u7684\u56fe\u6848\u7136\u800c\uff0c\u95ee\u9898\u53ef\u80fd\u4f1a\u51fa\u73b0\uff0c\u56e0\u4e3a\u5b83\u4e0e\u8868\u5355\u7684\u5b57\u7b26\u4e32\u5339\u914d/\u6587\u4ef6\u540d\u3002\u5728\u4e00\u4e2a\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528glob\u6765\u751f\u6210\u6240\u9700\u7684\u5339\u914d\u9879\u3002\u4f46\u662f\uff0c\u5982\u679c\u9700\u8981\u5355\u72ec\u7684\u6a21\u5f0f\u5339\u914d\u6b65\u9aa4\uff08\u4f8b\u5982\uff0c\u7ed3\u679c\u5df2\u9884\u5904\u7406\u5e76\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\uff0c\u9700\u8981\u8fdb\u884c\u8fc7\u6ee4\uff09\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u6a21\u5f0f\u4e2d\u8003\u8651\u524d\u7f00\uff1a[[$file\uff01=./*.]]\u6216\u4ece\u5339\u914d\u4e2d\u5265\u79bb\u6a21\u5f0f\u6765\u89e3\u51b3Bash shopt-s nullglob\u8868\u793a\u8def\u5f84in./*\uff1b\u6267\u884c[${path##*/}\uff01=*.]&amp&amp\uff1brm&#34$\u8def&#34\uff1b\u5b8c\u6210#\u6216\u8005\u66f4\u597d\u5730\u5f52\u6863*\uff1b\u6267\u884c[[$file\uff01=*.]]&amp&amp\uff1brm&#34/$\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u6216\u66f4\u597d\u5730\u5728*\u4e2d\u5f52\u6863\uff1b\u505arm&#34/$\u6587\u4ef6&#34\uff1b\u5b8c\u6210\n\u53e6\u4e00\u79cd\u53ef\u80fd\u662f\u7528\u4e00\u4e2a\u53c2\u6570\u6765\u8868\u793a\u9009\u9879\u7684\u7ed3\u675f\u3002\uff08\u540c\u6837\uff0c\u8bf7\u53c2\u89c1#pf3\uff09\u3002shopt-s nullglob\uff0c\u7528\u4e8e*\u4e2d\u7684\u6587\u4ef6\uff1b\u6267\u884c[[$file\uff01=*.]]&amp&amp\uff1brm--&#34$\u6587\u4ef6&#34\uff1b\u5b8c\u6210\n\u8fd9\u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5e38\u89c1\u7684\u6d89\u53ca\u91cd\u5b9a\u5411\u7684\u9519\u8bef\uff0c\u901a\u5e38\u7531\u5e0c\u671b\u5c06stdout\u548cstderr\u90fd\u6307\u5411\u6587\u4ef6\u6216\u7ba1\u9053\u7684\u4eba\u6267\u884c\uff0c\u4ed6\u4eec\u4f1a\u5c1d\u8bd5\u8fd9\u6837\u505a\uff0c\u4f46\u4e0d\u7406\u89e3\u4e3a\u4ec0\u4e48stderr\u4ecd\u7136\u51fa\u73b0\u5728\u4ed6\u4eec\u7684\u7ec8\u7aef\u4e0a\u3002\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u4f60\u5bf9\u6b64\u611f\u5230\u56f0\u60d1\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a&#39\uff1b\u6211\u4e0d\u660e\u767d\u91cd\u5b9a\u5411\u6216\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u5728\u6267\u884c\u547d\u4ee4\u4e4b\u524d\uff0c\u5c06\u4ece\u5de6\u5411\u53f3\u8ba1\u7b97\u91cd\u5b9a\u5411\u3002\u8fd9\u4e2a\u8bed\u4e49\u4e0d\u6b63\u786e\u7684\u4ee3\u7801\u672c\u8d28\u4e0a\u610f\u5473\u7740\uff1a&#34\uff1b\u9996\u5148\u5c06\u6807\u51c6\u9519\u8bef\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u8f93\u51fa\u5f53\u524d\u6307\u5411\u7684\u4f4d\u7f6e\uff08tty\uff09\uff0c\u7136\u540e\u5c06\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u65e5\u5fd7\u6587\u4ef6&#34\uff1b\u3002\u8fd9\u662f\u5012\u9000\u3002\u6807\u51c6\u9519\u8bef\u5df2\u7ecf\u53d1\u9001\u5230tty\u3002\u6539\u4e3a\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\uff1a\u8bf7\u53c2\u9605\u66f4\u6df1\u5165\u7684\u89e3\u91ca\u3001\u5df2\u89e3\u91ca\u7684\u590d\u5236\u63cf\u8ff0\u7b26\u548cBashGuide-\u91cd\u5b9a\u5411\u3002$\uff1f\u4ec5\u5f53\u9700\u8981\u68c0\u7d22\u4e0a\u4e00\u4e2a\u547d\u4ee4\u7684\u786e\u5207\u72b6\u6001\u65f6\u624d\u9700\u8981\u3002\u5982\u679c\u53ea\u9700\u8981\u6d4b\u8bd5\u6210\u529f\u6216\u5931\u8d25\uff08\u4efb\u4f55\u975e\u96f6\u72b6\u6001\uff09\uff0c\u53ea\u9700\u76f4\u63a5\u6d4b\u8bd5\u547d\u4ee4\u5373\u53ef\u3002e\u3001 g:\u5bf9\u7167\u5907\u9009\u65b9\u6848\u5217\u8868\u68c0\u67e5\u9000\u51fa\u72b6\u6001\u53ef\u80fd\u9075\u5faa\u5982\u4e0b\u6a21\u5f0f\uff1acmd status=$\uff1f\u6848\u4f8b$status in 0\uff09echo success&gt&amp\uff1b2.1\uff09 echo\u548c#39\uff1b\u5fc5\u987b\u63d0\u4f9b\u4e00\u4e2a\u53c2\u6570\uff0c\u6b63\u5728\u9000\u51fa&#39; &gt&amp\uff1b2\u51fa\u53e31\uff1b\uff1b*\uff09echo\u548c#34\uff1b\u672a\u77e5\u9519\u8bef$\u72b6\u6001\uff0c\u6b63\u5728\u9000\u51fa&#34; &gt&amp\uff1b2\u51fa\u53e3&#34$\u5730\u4f4d&#34\uff1b\u4ee5\u6492\n\u7ed9\u5b9a\u7ed9\u7b97\u672f\u5c55\u5f00\u6216\u590d\u5408\u547d\u4ee4\u7684\u4ee3\u7801\u7ecf\u8fc7\u521d\u59cb\u7684\u5c55\u5f00\u548c\u66ff\u6362\u8fc7\u7a0b\uff0c\u4ee5\u751f\u6210\u8981\u4f5c\u4e3a\u7b97\u672f\u8868\u8fbe\u5f0f\u8fdb\u884c\u5206\u6790\u548c\u8ba1\u7b97\u7684\u6587\u672c\u3002\u8fd9\u4ef6\u4e8b\u5fc5\u987b\u5c0f\u5fc3\u5904\u7406\u3002\u4f8b\u5982\uff0c\u901a\u8fc7\u5c06\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\u6269\u5c55\u4e3a\u53e6\u4e00\u4e2a\u4ee3\u7801\u7247\u6bb5\uff0c\u5c06\u6b64\u8868\u8fbe\u5f0f\u7f1d\u5408\u5728\u4e00\u8d77\u3002$x=&#39$\uff08\u65e5\u671f&gt\uff1b&amp\uff1b2\uff09\u548c#39\uff1b#\u91cd\u5b9a\u5411\u53ea\u662f\u4e3a\u4e86\u8ba9\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u5207\u53d1\u751f\u7684\u60c5\u51b5$y=$\uff08\u6570\u7ec4[&#34\uff1b$x&#34\uff1b]\uff09#\u5f15\u7528don&#39\uff1b\u6211\u5e2e\u4e0d\u4e0a\u5fd9\u3002\u9635\u5217\u6ca1\u6709&#39\uff1b\u751a\u81f3\u4e0d\u5fc5\u5b58\u57282014\u5e746\u67082\u65e5\u661f\u671f\u4e0010:49:08\u7f8e\u56fd\u4e1c\u90e8\u590f\u4ee4\u65f6\n\u63a5\u4e0b\u6765\uff0c\u5c06\u6269\u5c55\u5b57\u7b26\u4e32\u4f20\u9012\u7ed9\u7b97\u672f\u5904\u7406\u5668\uff0c\u7b97\u672f\u5904\u7406\u5668\u9700\u8981\u83b7\u53d6shell\u4e2d\u6570\u7ec4\u53d8\u91cf\u7684\u5f15\u7528&#39\uff1b\u4f7f\u7528\u67e5\u627e\u51fd\u6570\u89e3\u6790\u53d8\u91cf&#39\uff1bs&#34\uff1b\u59d3\u540d&#34\uff1b\u3002\u8fd9\u4e2a\u540d\u79f0\u89e3\u6790\u7a0b\u5e8f\u91c7\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4[$\uff08date&gt\uff1b&amp\uff1b2\uff09]\uff0c\u7531\u540d\u79f0\u7ec4\u6210\uff0c\u5305\u62ec\u7d22\u5f15\u548c\u62ec\u53f7\u5185\u7684\u6240\u6709\u6587\u5b57\u4ee3\u7801\uff0c\u5c31\u50cfread\u6216printf-v do\u4e00\u6837\uff0c\u53d8\u91cf\u540d\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002\u53d8\u91cf\u89e3\u6790\u5668\u6267\u884c\u6269\u5c55\uff0c\u5305\u62ec\u547d\u4ee4\u66ff\u6362\uff0c\u4ee5\u89e3\u6790\u7d22\u5f15\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5728\u7b97\u672f\u5c55\u5f00\u4e2d\u4e0d\u9700\u8981\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u5c55\u5f00\u3002\u5c3d\u53ef\u80fd\u76f4\u63a5\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u53d8\u91cf\u540d\uff08no$\uff09\uff08\u5373\u4f4d\u7f6e\u53c2\u6570\u548cPOSIX&#34\uff1b\u7279\u6b8a\u53d8\u91cf&#34\uff1b\uff09\u9664\u5916\uff09\u3002\u5728\u4f7f\u7528\u53d8\u91cf\u4e4b\u524d\u9a8c\u8bc1\u53d8\u91cf\uff0c\u5e76\u786e\u4fdd\u6269\u5c55\u53ea\u751f\u6210\u6570\u5b57\u6587\u672c\u2014\u2014\u5927\u591a\u6570\u95ee\u9898\u90fd\u4f1a\u81ea\u52a8\u907f\u514d\u3002\u8f6c\u4e49\u4efb\u4f55\u5c55\u5f00\u5f0f\uff0c\u5c06\u5176\u4f20\u9012\u5230\u8868\u8fbe\u5f0f\u4e2d\uff0c\u800c\u4e0d\u9996\u5148\u5c55\u5f00\uff1a#\u5178\u578b\u4efb\u52a1\u662f\u5c06\u67d0\u4e9b\u5217\u8bfb\u5165\u5173\u8054\u6570\u7ec4\u3002\u6392\u7248-A arr printf-v\u504f\u79fb\u91cf#39\uff1b%\uff08%s\uff09T&#39-1\u800cIFS=&#39&#39; read-rxy\uff1b\u6267\u884c[$x$y==+\uff08[0-9]\uff09+\uff08[0-9]\uff09]]#\u9a8c\u8bc1\u8f93\u5165\uff08\u8bf7\u53c2\u89c1\u4e0b\u4e00\u4e2a\u9677\u9631\uff09\uff08\uff08arr[\\$\uff08date-d&#34\uff1b@$x&#34\uff1b+%F\uff09]=y-offset\uff09\uff09#\u8f6c\u4e49\u66ff\u6362\u9010\u5b57\u4f20\u9012\u6574\u4e2a\u8868\u8fbe\u5f0f\u3002\u5b8c\u6210\n\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u5c06let\u4e0e\u5355\u5f15\u53f7\u53c2\u6570\u4e00\u8d77\u4f7f\u7528\u3002\uff08\uff08expr\uff09\uff09\u76f8\u5f53\u4e8elet&#34\uff1bexpr&#34\uff1b\uff08\u53cc\u5f15\u53f7args\uff09\u3002\u5728\u7b97\u672f\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528num\u4e4b\u524d\uff0c\u8bf7\u59cb\u7ec8\u9a8c\u8bc1\u60a8\u7684\u8f93\u5165\uff08\u8bf7\u53c2\u9605BashFAQ/054\uff09\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u4ee3\u7801\u6ce8\u5165\u3002\u5c3d\u7ba1\u770b\u8d77\u6765\u96be\u4ee5\u7f6e\u4fe1\uff0cPOSIX\u8981\u6c42\u5c06IFS\u4f5c\u4e3a\u5b57\u6bb5\u7ec8\u6b62\u7b26\uff0c\u800c\u4e0d\u662f\u5b57\u6bb5\u5206\u9694\u7b26\u6765\u5904\u7406\u3002\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u6709&#39\uff1b\u5982\u679c\u8f93\u5165\u884c\u672b\u5c3e\u6709\u4e00\u4e2a\u7a7a\u5b57\u6bb5\uff0c\u5b83\u5c06\u88ab\u4e22\u5f03\uff1a\u7a7a\u5b57\u6bb5\u53bb\u4e86\u54ea\u91cc\uff1f\u5b83\u4e4b\u6240\u4ee5\u88ab\u98df\u7528\u662f\u56e0\u4e3a\u5386\u53f2\u539f\u56e0\uff08\u56e0\u4e3a\u5b83\u4e00\u76f4\u90fd\u662f\u8fd9\u6837\u7684\uff09\u3002\u8fd9\u79cd\u884c\u4e3a\u4e0d\u662fbash\u72ec\u6709\u7684\uff1b\u6240\u6709\u5171\u5f62\u58f3\u90fd\u80fd\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u4e00\u4e2a\u975e\u7a7a\u5b57\u6bb5\u88ab\u6b63\u786e\u5730\u626b\u63cf\uff1a\u90a3\u4e48\uff0c\u6211\u4eec\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u5e9f\u8bdd\u5462\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5728\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u9644\u52a0\u4e00\u4e2aIFS\u5b57\u7b26\u5c06\u8feb\u4f7f\u626b\u63cf\u5de5\u4f5c\u3002\u5982\u679c\u6709\u5c3e\u968f\u7684\u7a7a\u5b57\u6bb5\uff0c\u5219\u989d\u5916\u7684IFS\u5b57\u7b26&#34\uff1b\u7ec8\u6b62&#34\uff1b\u8fd9\u6837\u5c31\u53ef\u4ee5\u626b\u63cf\u4e86\u3002\u5982\u679c\u6709\u5c3e\u968f\u7684\u975e\u7a7a\u5b57\u6bb5\uff0cIFS\u5b57\u7b26\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u6bb5\uff0c\u8be5\u5b57\u6bb5\u5c06\u88ab\u5220\u9664\u3002$\u8f93\u5165=&#34\uff1ba\u3001 b\u548c#34\uff1b$\u5982\u679cs=\uff0c\u5219\u8bfb\u53d6-ra\u5b57\u6bb5&lt&lt&lt&#34;$\u8f93\u5165\uff0c&#34\uff1b$declare-p\u5b57\u6bb5declare-a\u5b57\u6bb5=&#39\uff1b\uff08[0]=&#34\uff1ba&#34\uff1b[1]=&#34\uff1bb&#34\uff1b[2]=&#34\uff1b&#34\uff1b\uff09&#39;\n\u4e0d\u8981\u5bfc\u51faCDPATH\u3002\u5728\u4e2d\u8bbe\u7f6eCDPATH\u3002bashrc\u4e0d\u662f\u95ee\u9898\uff0c\u4f46\u5bfc\u51fa\u5b83\u5c06\u5bfc\u81f4\u60a8\u8fd0\u884c\u7684\u4efb\u4f55bash\u6216sh\u811a\u672c\uff08\u78b0\u5de7\u4f7f\u7528cd\uff09\u53ef\u80fd\u4f1a\u6539\u53d8\u884c\u4e3a\u3002\u6709\u4e24\u4e2a\u95ee\u9898\u3002\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u811a\u672c\uff1a\u53ef\u4ee5\u5c06\u76ee\u5f55\u6539\u4e3a~/myProject/some/dir\uff0c\u800c\u4e0d\u662f/some/dir\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u5f53\u65f6\u5b58\u5728\u7684\u76ee\u5f55\u3002\u56e0\u6b64\uff0ccd\u53ef\u80fd\u4f1a\u6210\u529f\uff0c\u5e76\u5c06\u811a\u672c\u5e26\u5230\u9519\u8bef\u7684\u76ee\u5f55\uff0c\u4ee5\u4e0b\u547d\u4ee4\u73b0\u5728\u8fd0\u884c\u5728\u4e0e\u9884\u671f\u4e0d\u540c\u7684\u76ee\u5f55\u4e2d\uff0c\u53ef\u80fd\u4f1a\u4ea7\u751f\u6709\u5bb3\u5f71\u54cd\u3002\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\uff0c\u5f53cd\u5728\u6355\u83b7\u8f93\u51fa\u7684\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c\u65f6\uff1a\u4f5c\u4e3a\u8bbe\u7f6eCDPATH\u7684\u526f\u4f5c\u7528\uff0ccd\u5c06\u5411stdout\u8f93\u51fa\u7c7b\u4f3c\u4e8e/home/user/some/dir\u7684\u5185\u5bb9\uff0c\u4ee5\u6307\u793a\u5b83\u901a\u8fc7CDPATH\u627e\u5230\u4e86\u4e00\u4e2a\u76ee\u5f55\uff0c\u800cCDPATH\u53cd\u8fc7\u6765\u5c06\u4e0e\u67d0\u4e2a\u547d\u4ee4\u7684\u9884\u671f\u8f93\u51fa\u4e00\u8d77\u51fa\u73b0\u5728\u8f93\u51fa\u53d8\u91cf\u4e2d\u3002\u811a\u672c\u53ef\u4ee5\u901a\u8fc7\u603b\u662f\u9884\u52a0\u524d\u7f00\u4f7f\u81ea\u5df1\u4e0d\u53d7\u4ece\u73af\u5883\u7ee7\u627f\u7684CDPATH\u7684\u5f71\u54cd\u3002/\u5230\u76f8\u5bf9\u8def\u5f84\uff0c\u6216\u5728\u811a\u672c\u5f00\u5934\u8fd0\u884cunset CDPATH\uff0c\u4f46\u4e0d\u8981&#39\uff1b\u4e0d\u8981\u4ee5\u4e3a\u6bcf\u4e2a\u7f16\u5267\u90fd\u8003\u8651\u8fc7\u8fd9\u4e2a\u9677\u9631\uff0c\u6240\u4ee5\u4e0d\u8981&#39\uff1bt\u5bfc\u51faCDPATH\u3002\u76f4\u63a5\u5206\u914d\u4e00\u4e2a\u53d8\u91cf&#39\uff1b\u4e34\u65f6\u53d8\u91cf\u7684s\u503c\u4e3a&#39\uff1b\u5149\u9760\u5b83\u8fd8\u4e0d\u8db3\u4ee5\u6062\u590d\u5b83\u7684\u72b6\u6001\u3002\u5373\u4f7f\u521d\u59cb\u53d8\u91cf\u672a\u8bbe\u7f6e\uff0c\u8d4b\u503c\u59cb\u7ec8\u4f1a\u4ea7\u751f\u4e00\u4e2a\u96c6\u5408\u4f46\u4e3a\u7a7a\u7684\u4e34\u65f6\u53d8\u91cf\u3002\u5bf9\u4e8eIFS\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u7a7aIFS\u4e0e\u672a\u8bbe\u7f6eIFS\u7684\u542b\u4e49\u5b8c\u5168\u4e0d\u540c\uff0c\u5c06IFS\u8bbe\u7f6e\u4e3a\u4e00\u4e2a\u6216\u4e24\u4e2a\u547d\u4ee4\u7684\u4e34\u65f6\u503c\u662f\u4e00\u4e2a\u5e38\u89c1\u8981\u6c42\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u6307\u5b9a\u4e00\u4e2a\u524d\u7f00\u6765\u533a\u5206set\u548cunset VAR\uff0c\u7136\u540e\u5728\u5b8c\u6210\u65f6\u5c06\u5176\u5265\u79bb\u3002\u5982\u679c\u53ef\u80fd\u7684\u8bdd\uff0c\u901a\u5e38\u6700\u597d\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u3002\u6b21\u58f3\u662f\u53e6\u4e00\u79cd\u53ef\u80fd\u6027\u3002\u4f7f\u7528\u539f\u59cb$\uff08\u2026\uff09\u586b\u5145\u6570\u7ec4\u662f\u4e0d\u5b89\u5168\u7684\u547d\u4ee4\u66ff\u6362\u3002\u8be5\u547d\u4ee4\u7684\u8f93\u51fa\u5c06\u7ecf\u5386\u5206\u8bcd\uff08\u5728\u6240\u6709\u7a7a\u683c\u4e0a\uff0c\u751a\u81f3\u5728\u5f15\u53f7\u5185\u7684\u7a7a\u683c\u4e0a\uff09\uff0c\u7136\u540e\u8fdb\u884c\u5168\u5c40\u641c\u7d22\u3002\u5982\u679c\u6709&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u50cf*\u6216\u8005\u5443\uff1f\u6216[abc]\u5728\u7ed3\u679c\u4e2d\uff0c\u5b83\u5c06\u6839\u636e\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u540d\u5c55\u5f00\u3002\u8981\u9009\u62e9\u66ff\u6362\uff0c\u60a8\u9700\u8981\u77e5\u9053\u8be5\u547d\u4ee4\u662f\u5c06\u5176\u8f93\u51fa\u5199\u5165\u5355\u884c\u8fd8\u662f\u591a\u884c\u3002\u5982\u679c\u662f&#39\uff1b\u53ea\u6709\u4e00\u884c\uff1a\u5982\u679c\u662f&#39\uff1b\u5b83\u6709\u591a\u884c\uff08\u800c\u4e14\u4f60\u7684\u76ee\u6807\u662fbash 4.0\u6216\u66f4\u9ad8\u7248\u672c\uff09\uff1a\u5982\u679c\u5b83&#39\uff1bs\u591a\u884c\uff08\u5e76\u4e14\u60a8\u5e0c\u671b\u4e0ebash 3.x\u517c\u5bb9\uff0c\u6216\u8005\u5e0c\u671b\u60a8\u7684\u547d\u4ee4\u7684\u9000\u51fa\u72b6\u6001\u53cd\u6620\u5728\u8bfb\u53d6\u64cd\u4f5c\u7684\u6210\u529f\u6216\u5931\u8d25\u4e2d\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u4ec5\u5728bash 4.4\u53ca\u66f4\u65b0\u7248\u672c\u4e2d\u53ef\u7528\u7684\u884c\u4e3a\uff09\uff1a\u8fd9\u5c06\u9632\u6b62\u5168\u5c40\u7ed1\u5b9a\u3002\u5b83\u4ecd\u7136\u8d62\u4e86&#39\uff1b\u5982\u679c\u9700\u8981\u907f\u514d\u5728\u5f15\u7528\u7684\u7a7a\u683c\u4e0a\u62c6\u5206\uff0c\u5219\u65e0\u6cd5\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\uff0cbash\u65e0\u6cd5\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u3002\u5bf9\u4e8e\u901a\u7528CSV\uff08\u9017\u53f7\u5206\u9694\u503c\uff09\u6587\u4ef6\u5904\u7406\uff0c\u60a8\u786e\u5b9e\u9700\u8981\u5207\u6362\u5230\u5177\u6709\u4e13\u7528CSV\u8f93\u5165\u5e93\u7684\u8bed\u8a00\u3002GNU xargs\u652f\u6301\u5e76\u884c\u8fd0\u884c\u591a\u4e2a\u4f5c\u4e1a-\u5176\u4e2dn\u662f\u5e76\u884c\u8fd0\u884c\u7684\u4f5c\u4e1a\u6570\u3002seq 100 | xargs-n1-P10\u56de\u6ce2\u548c#34$a&#34\uff1b|grep 5 seq 100 | xargs-n1-P10 echo\u548c#34$a&#34&gt\uff1b\u6211\u7684\u8f93\u51fa\u3002txt\n\u8fd9\u5728\u8bb8\u591a\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff0c\u4f46\u6709\u4e00\u4e2a\u6b3a\u9a97\u6027\u7684\u7f3a\u9677\uff1a\u5982\u679c$a\u5305\u542b\u8d85\u8fc78192\u4e2a\u5b57\u7b26\uff08\u9650\u5236\u53d6\u51b3\u4e8e\u5e73\u53f0\u548c\u7248\u672c\uff09\uff0c\u56de\u9001\u53ef\u80fd\u4e0d\u662f\u539f\u5b50\u7684\uff08\u5b83\u53ef\u80fd\u88ab\u62c6\u5206\u4e3a\u591a\u4e2awrite\uff08\uff09\u8c03\u7528\uff09\uff0c\u5e76\u4e14\u5b58\u5728\u4e24\u884c\u6df7\u5408\u7684\u98ce\u9669\u3002$perl-e&#39\uff1b\u6253\u5370\u548c#34\uff1ba&#34\uff1bx10000\u548c#34\uff1b\\n&#34&#39; &gt\uff1bfoo$strace-e write bash-c&#39\uff1bread-r foo&lt\uff1b\u5085\uff1becho\u548c#34$34\u5c81&#39; &gt/dev/null write\uff081\uff0c&#34\uff1baaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa+++\n\u663e\u7136\uff0c\u5982\u679c\u6709\u591a\u4e2a\u5bf9echo\u6216printf\u7684\u8c03\u7528\uff0c\u5c31\u4f1a\u51fa\u73b0\u540c\u6837\u7684\u95ee\u9898\uff1aslowprint\uff08\uff09{printf&#39\uff1bStart-%s&#39\uff1b&#34\uff1b$1&#34\uff1bsleep&#34\uff1b$1&#34\uff1bprintf&#39\uff1b%s-End\\n&#39\uff1b&#34\uff1b$1&#34\uff1b}export-f slowprint seq 10 | xargs-n1-I{}-P4 bash-c&#34\uff1b\u6162\u6253\u5370{}&#34\uff1b#\u4e0e\u6ca1\u6709\u5e76\u884c\u5316\u76f8\u6bd4\uff0cseq 10 | xargs-n1-I{}bash-c&#34\uff1b\u6162\u6253\u5370{}&#34\uff1b#\u786e\u4fdd\u5728\u4e0b\u4e00\u4e2a\u9677\u9631\u4e2d\u770b\u5230\u8b66\u544a\uff01\n\u5e76\u884c\u4f5c\u4e1a\u7684\u8f93\u51fa\u6df7\u5408\u5728\u4e00\u8d77\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4f5c\u4e1a\u7531\u4e24\u4e2a\uff08\u6216\u66f4\u591a\uff09\u5355\u72ec\u7684write\uff08\uff09\u8c03\u7528\u7ec4\u6210\u3002\u5982\u679c\u60a8\u9700\u8981\u4e0d\u6df7\u5408\u7684\u8f93\u51fa\uff0c\u56e0\u6b64\u5efa\u8bae\u4f7f\u7528\u786e\u4fdd\u8f93\u51fa\u5e8f\u5217\u5316\u7684\u5de5\u5177\uff08\u4f8b\u5982GNU Parallel\uff09\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6df7\u5408\u95ee\u9898\u7684\u6f14\u793a\u3002\u6b64\u547d\u4ee4\u5305\u542b\u4ee3\u7801\u6ce8\u5165\u6f0f\u6d1e\u3002find\u627e\u5230\u7684\u6587\u4ef6\u540d\u88ab\u6ce8\u5165shell\u547d\u4ee4\u5e76\u7531sh\u89e3\u6790\uff1b\u6216\u7f8e\u5143\uff08\u3002\u3002\u3002\uff09\u7136\u540e\u6587\u4ef6\u540d\u53ef\u4ee5\u7531`sh&#39\uff1b\u4f5c\u4e3a\u4ee3\u7801\u6267\u884c\uff1b\u300234\u5c81\uff1b\u6162\u6253\u5370&#34\uff1b\u524d\u4e00\u4e2a\u9677\u9631\u4e2d\u7684\u4f8b\u5b50\u662f\uff0c\u5982\u679c\u8f93\u5165\u4e0d\u662f&#39\uff1bt\u4fdd\u8bc1\u662f\u6574\u6570\u3002\u66f4\u51c6\u786e\u5730\u8bf4\uff0cPOSIX find\u5e76\u6ca1\u6709\u6307\u5b9a\u662f\u5426\u6269\u5c55\u5305\u542b\u591a\u4e8e{}\u7684\u53c2\u6570\u3002GNU find\u5141\u8bb8\u8fd9\u79cd\u4ee3\u7801\u6ce8\u5165\u53d1\u751f\u3002\u5176\u4ed6\u5b9e\u73b0\u9009\u62e9\u4e86\u66f4\u5b89\u5168\u7684\u8def\u5f84\uff1a#uname-a HP-UX imadev B.10.20 a 9000/785 2008897791\u53cc\u7528\u6237\u8bb8\u53ef\u8bc1#find/dev/null-exec sh-c&#39\uff1b\u56de\u58f0{}&#39\uff1b\\\uff1b{}\n\u6b63\u786e\u7684\u65b9\u6cd5\u662f\u5c06filename\u53c2\u6570\u4e0escript\u53c2\u6570\u5206\u5f00\uff1a\u5728\u6267\u884c\u547d\u4ee4\u4e4b\u524d\u6267\u884c\u91cd\u5b9a\u5411\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740&#39\uff1b\u6ca1\u5173\u7cfb\uff0c\u4f46\u662f\u5bf9\u4e8esudo\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u547d\u4ee4\u662f\u4f5c\u4e3a\u4e0d\u540c\u4e8e\u91cd\u5b9a\u5411\u7684\u7528\u6237\u6267\u884c\u7684\u3002\u5982\u679c\u91cd\u5b9a\u5411\u5fc5\u987b\u4ee5sudo\u6388\u4e88\u7684\u6743\u9650\u6267\u884c\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4e00\u4e2a\u5305\u88c5\u5668\uff1a\u800c\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528tee\u7684\u5305\u88c5\u5668\uff1a\u5982\u679cmycmd\u6709\u5f88\u591a\u5f15\u7528\uff0c\u8fd9\u53ef\u80fd\u66f4\u5bb9\u6613\u7f16\u5199\u3002\u8fd9\u4e0e\u4e4b\u524d\u7684\u9677\u9631\u975e\u5e38\u76f8\u4f3c\u3002Globbing\u4e5f\u5728\u547d\u4ee4\u6267\u884c\u4e4b\u524d\u5b8c\u6210\u3002\u5982\u679c\u76ee\u5f55\u4e0d\u662f&#39\uff1b\u5982\u679c\u60a8\u7684\u666e\u901a\u7528\u6237\u6743\u9650\u65e0\u6cd5\u8bfb\u53d6\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u9700\u8981\u5728\u5177\u6709sudo\u6388\u6743\u6743\u9650\u7684shell\u4e2d\u5b8c\u6210\u5168\u5c40\u7ed1\u5b9a\uff1a\u4e0d\u8981\u5c06stdin\u3001stdout\u6216stderr\u4f5c\u4e3a&#34\u5173\u95ed\uff1b\u901f\u8bb0&#34\uff1b\u7528\u4e8e\u91cd\u5b9a\u5411\u5230/dev/null\u3002\u6b63\u786e\u5730\u5199\u51fa\u6765\u3002\u4e3a\u4ec0\u4e48\uff1f\u8003\u8651\u5f53\u7a0b\u5e8f\u8bd5\u56fe\u5411STDRR\u5199\u5165\u9519\u8bef\u6d88\u606f\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u5982\u679cstderr\u5df2\u88ab\u91cd\u5b9a\u5411\u5230/dev/null\uff0c\u90a3\u4e48\u5199\u64cd\u4f5c\u5c06\u6210\u529f\uff0c\u5e76\u4e14\u60a8\u7684\u7a0b\u5e8f\u53ef\u4ee5\u81ea\u7531\u5730\u7ee7\u7eed\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u8ba4\u771f\u5730\u62a5\u544a\u4e86\u9519\u8bef\u60c5\u51b5\u3002\u4f46\u662f\u5982\u679cstderr\u5df2\u7ecf\u5173\u95ed\uff0c\u90a3\u4e48\u5199\u64cd\u4f5c\u5c06\u5931\u8d25\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u4f60\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u505a\u4e00\u4e9b\u4e0d\u53ef\u9884\u6d4b\u7684\u4e8b\u60c5\u3002\u5b83\u53ef\u80fd\u4f1a\u7ee7\u7eed\u5e76\u5ffd\u7565\u6545\u969c\uff0c\u6216\u8005\u8003\u8651\u5230\u6267\u884c\u73af\u5883\u5df2\u88ab\u7834\u574f\uff0c\u65e0\u6cd5\u5b89\u5168\u5730\u7ee7\u7eed\uff0c\u5b83\u53ef\u80fd\u4f1a\u7acb\u5373\u9000\u51fa\u3002\u6216\u8005\u5f53\u7a0b\u5e8f\u7684\u4e16\u754c\u53d8\u6210\u53cd\u4e4c\u6258\u90a6\u5730\u72f1\u65f6\uff0c\u7a0b\u5e8f\u5458\u51b3\u5b9a\u7a0b\u5e8f\u5e94\u8be5\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\u3002\u6240\u6709\u7a0b\u5e8f\u90fd\u5e94\u786e\u4fddstdin\u3001stdout\u548cstderr\u5c06\u5b58\u5728\uff0c\u5e76\u4ee5\u9002\u5f53\u548c\u5408\u7406\u7684\u65b9\u5f0f\u53ef\u8bfb\u5199\u3002\u5173\u95ed\u5176\u4e2d\u4e00\u4e2a\uff0c\u5c31\u8fdd\u53cd\u4e86\u4f60\u5bf9\u8fd9\u4e2a\u9879\u76ee\u7684\u627f\u8bfa\u3002\u8fd9\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u5f53\u7136\uff0c\u4e00\u4e2a\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u662f\u5c06\u9519\u8bef\u8bb0\u5f55\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u8fd4\u56de\u5e76\u9605\u8bfb\u5b83\u4eec\uff0c\u627e\u51fa\u4ec0\u4e48&#39\uff1b\u8fd9\u662f\u4e0d\u5bf9\u7684\u3002xargs\u5728\u7a7a\u767d\u5904\u62c6\u5206\u3002\u8fd9\u662f\u4e0d\u5e78\u7684\uff0c\u56e0\u4e3a\u6587\u4ef6\u540d\u4e2d\u5141\u8bb8\u7a7a\u767d\uff0cGUI\u7528\u6237\u901a\u5e38\u4f7f\u7528\u7a7a\u767d\u3002xargs\u8fd8\u6cbb\u7597&#39\uff1b\u548c&#34\uff1b\u7279\u522b\u662f\uff0c\u8fd9\u4e5f\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\uff1a\u8fd9\u91ccxargs\u8b66\u544a\uff1a#\u4e0d\u8981\u505a\u8fd9\u4e2a$find-f | xargs wc xargs\u7c7b\u578b\uff1a\u4e0d\u5339\u914d\u7684\u5355\u5f15\u53f7\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u9664\u975e\u4f7f\u7528-0\u9009\u9879\uff0c\u5426\u5219\u5f15\u53f7\u5bf9xargs\u662f\u4e13\u7528\u7684\n\u5728\u8fd9\u91cc\uff0cxargs\u6839\u672c\u6ca1\u6709\u8b66\u544a\uff1a#\u4e0d\u8981\u8fd9\u6837\u56de\u663e*|xargs wc find*\u8457\u540d*-\u7c7b\u578bf | xargs wc find*4*-\u7c7b\u578bf | xargs wc\n\u800c\u662f\u4f7f\u7528xargs-0:#\u8fd9\u6837\u505a\u800c\u4e0d\u662fprintf&#39\uff1b%s\\0&#39\uff1b*|xargs-0wc-find-f\u578b\u2014\u2014\u540d\u79f0\u548c#39*\u8457\u540d\u7684*&#39-\u6253\u53700 | xargs-0 wc\u67e5\u627e-f\u578b\u2014\u2014\u540d\u79f0\u548c#39*4*&#39; -exec wc{}+\n\u5982\u679c\u4f7f\u7528-0\u5e76\u4e0d\u7b80\u5355\uff0c\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528GNU Parallel\uff0c\u5b83\u4f1a\u5728\\n\u4e0a\u62c6\u5206\u3002\u867d\u7136\u6587\u4ef6\u540d\u4e2d\u4e5f\u5141\u8bb8\u4f7f\u7528\\n\uff0c\u4f46\u9664\u975e\u60a8\u7684\u7528\u6237\u662f\u6076\u610f\u7684\uff0c\u5426\u5219\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u3002\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff1a\u5982\u679c\u4f7f\u7528\u4e0d\u5e26-0\u7684xargs\uff0c\u8bf7\u5728\u4ee3\u7801\u4e2d\u6dfb\u52a0\u6ce8\u91ca\uff0c\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5728\u7279\u5b9a\u60c5\u51b5\u4e0b\u8fd9\u6837\u505a\u662f\u5b89\u5168\u7684\u3002\u5c06\u7d22\u5f15\u6570\u7ec4\u5143\u7d20\u4f20\u9012\u7ed9unset\u65f6\uff0c\u9700\u8981\u5c06\u5176\u5f15\u7528\u3002\u5426\u5219\uff0c\u5b83\u53ef\u80fd\u4f1a\u88ab\u89c6\u4e3aglob\uff0c\u5e76\u6839\u636e\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5c55\u5f00\u3002\u5982\u679c\u78b0\u5de7\u6709\u4e00\u4e2a\u540d\u4e3aa0\u7684\u6587\u4ef6\uff0c\u90a3\u4e48glob\u5c06\u6269\u5c55\u4e3aa0\uff0c\u6700\u540e\u6267\u884cunset a0\u3002\u591a\u6b21\u7ed9date\u6253\u7535\u8bdd\u662f\u4e2a\u574f\u4e3b\u610f\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u901a\u8bdd\u53d1\u751f\u57284\u670830\u65e5\u5348\u591c\u524d\u4e00\u6beb\u79d2\uff0c\u800c\u7b2c\u4e8c\u6b21\u901a\u8bdd\u53d1\u751f\u57285\u67081\u65e5\u5348\u591c\u540e\u4e00\u6beb\u79d2\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u6700\u7ec8\u7684\u7ed3\u679c\u662f\u6708=04\uff0c\u65e5=01\u3002\u5b83&#39\uff1b\u6700\u597d\u53ea\u8c03\u7528\u4e00\u6b21date\uff0c\u5728\u4e00\u6b21\u8c03\u7528\u4e2d\u68c0\u7d22\u6240\u6709\u9700\u8981\u7684\u5b57\u6bb5\u3002\u4e00\u4e2a\u5e38\u89c1\u7684\u4e60\u8bed\u662f\uff1a\u6216\u4e0ebash&#39\uff1bs\uff084.2\u6216\u66f4\u9ad8\u7248\u672c\uff09printf builtin\uff1a\u8bb0\u4f4f\uff0c\u6708\u6216\u65e5\u7684\u540d\u79f0\u662f\u4f9d\u8d56\u4e8e\u533a\u57df\u8bbe\u7f6e\u7684\uff0c\u56e0\u6b64\u5728%A\u6216%B\u9644\u8fd1\u52a0\u5f15\u53f7\u662f\u4e3a\u4e86\u907f\u514d\u65e5\u6216\u6708\u7684\u540d\u79f0\u5305\u542b\u7a7a\u683c\u6216\u5176\u4ed6\u7279\u6b8a\u5b57\u7b26\u7684\u533a\u57df\u8bbe\u7f6e\u51fa\u73b0\u95ee\u9898\u3002\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u68c0\u7d22\u5386\u5143\u683c\u5f0f\u7684\u65f6\u95f4\u6233\uff08\u81ea1970\u5e74\u521d\u8d77\u7684\u79d2\u6570\uff09\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u4f7f\u7528\u8be5\u65f6\u95f4\u6233\u751f\u6210\u4eba\u7c7b\u53ef\u8bfb\u7684\u65e5\u671f/\u65f6\u95f4\u5b57\u6bb5\u73b0\u5728\u9700\u8981bash 4.2\u6216\u66f4\u9ad8\u7248\u672cprintf-v&#39\uff1b%\uff08%s\uff09T&#39-1#Or now=$EPOCHSECONDS\u5728bash 5.0\u4e2d#-1\u53ef\u4ee5\u57284.3\u6216\u66f4\u9ad8\u7248\u672c\u7684printf-v month&#39\uff1b%\u4e2d\u7701\u7565\uff08%m\uff09T&#39&#34;$\u73b0\u5728&#34\uff1bprintf-v day&#39\uff1b%\uff08%d\uff09T&#39&#34;$\u73b0\u5728&#34\uff1b\n\u5982\u679c\u4f60\u7684\u7cfb\u7edf&#39\uff1bs strftime\uff08\uff09\u4e0d&#39\uff1b\u5982\u679c\u4e0d\u652f\u6301%s\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u83b7\u5f97\u5927\u7eaa\u5143\u65f6\u95f4\uff1a\u5f3a\u5236\u57fa\u657010\u89e3\u91ca\u4ec5\u9002\u7528\u4e8e\u65e0\u7b26\u53f7\u6570\u5b57\u3002\u53ea\u8981$i\u5305\u542b\u4e00\u4e2a\u6ca1\u6709\u524d\u5bfc\u6216+\u7684\u6570\u5b57\u4e32\uff0c\u4e00\u5207\u90fd\u5f88\u597d\u3002\u4f46\u662f\uff0c\u5982\u679c$i\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u90a3\u4e48\u8fd9\u79cd\u8f6c\u6362\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8981\u4e48\u662f\u54cd\u4eae\u5730\uff08\u5e26\u6709\u9519\u8bef\u6d88\u606f\uff09\uff0c\u8981\u4e48\u66f4\u7cdf\uff0c\u662f\u65e0\u58f0\u5730\uff08\u53ea\u662f\u4ea7\u751f\u9519\u8bef\u7684\u7ed3\u679c\uff09\u3002\u5982\u679c\u6709&#39\uff1b\u5982\u679c$i\u6709\u53ef\u80fd\u662f\u8d1f\u6570\uff0c\u8bf7\u7528\u8fd9\u4e2a\u6765\u4ee3\u66ff\uff1a\u6709\u5173\u89e3\u91ca\uff0c\u8bf7\u53c2\u9605\u7b97\u672f\u8868\u8fbe\u5f0f\u3002\u5728\u811a\u672c\u5f00\u59cb\u65f6\u542f\u7528\u8fd9\u4e9b\u9009\u9879\u6709\u5f88\u591a\u7f3a\u9677\u3002errexit\uff08set-e\uff09\u5c1d\u8bd5\u5728\u53d1\u751f\u9519\u8bef\u65f6\u4e2d\u6b62\u811a\u672c\uff0c\u8fd9\u4e00\u70b9\u4e00\u5f00\u59cb\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5b83\u6709\u975e\u5e38\u590d\u6742\u7684\u89c4\u5219\u6765\u51b3\u5b9a\u4f55\u65f6\u5728\u53d1\u751f\u9519\u8bef\u65f6\u4e2d\u6b62\u3002errexit\u7684\u4e00\u4e9b\u4e3b\u8981\u95ee\u9898\u662f&#39\uff1bshell\u5b9e\u9645\u4e0a\u4e0d\u53ef\u80fd\u68c0\u6d4b\u5230\u9519\u8bef\u3002\u5b83\u53ea\u9700\u8981\u4e00\u4e2a\u547d\u4ee4&#39\uff1bs\u9000\u51fa\u72b6\u6001\u3002\u5f53\u547d\u4ee4\u5931\u8d25\u65f6\uff0c\u5b83\u4eec\u901a\u5e38\u8fd4\u56de\u975e\u96f6\u9000\u51fa\u72b6\u6001\uff0c\u4f46\u8bb8\u591a\u547d\u4ee4\u4e5f\u4f7f\u7528\u9000\u51fa\u72b6\u6001\u6765\u4f20\u9012\u771f/\u5047\u503c\u3002\u6b64\u7c7b\u547d\u4ee4\u7684\u793a\u4f8b\u6709test\u3001[\u3001[\u3002\u3002\u3002\u00a0]],  ((...)), \u8fd8\u6709\u683c\u96f7\u666e\u3002\n\u5f53\u4f7f\u7528if\u6216&amp&amp\uff1b\u6216\u8005| |\u662f\u4e00\u4e2a\u51fd\u6570\uff0cset-e\u5ffd\u7565\u8be5\u51fd\u6570\u4e2d\u547d\u4ee4\u7684\u975e\u96f6\u9000\u51fa\u72b6\u6001\u3002\u8003\u8651\u4e00\u4e2a\u51fd\u6570\uff0c\u6bd4\u5982\u5982\u679cCD\u547d\u4ee4\u5931\u8d25\uff0c\u4f60\u80af\u5b9a\u4e0d\u77e5\u905339\u3002\u6211\u4e0d\u60f3\u8ba9rm\u547d\u4ee4\u8fd0\u884c\uff0c\u5728\u542f\u7528errexit\u65f6\u53ea\u9700\u7b80\u5355\u5730\u4f7f\u7528\u8be5\u51fd\u6570\uff0c\u60c5\u51b5\u6b63\u597d\u662f\u8fd9\u6837\u7684\uff1aset-e cleanup\uff08\uff09{cd&#34\uff1b$1&#34\uff1bprintf&#39\uff1bOops\uff01\\n&#39\uff1b}cleanup/no/more/there#scriptname:cd:/no/more/there:\u6ca1\u6709\u8fd9\u6837\u7684\u6587\u4ef6\u6216\u76ee\u5f55\n\u4f46\u540e\u6765\u60a8\u51b3\u5b9a\u6dfb\u52a0\u4e00\u6761\u81ea\u5b9a\u4e49\u9519\u8bef\u6d88\u606fcleanup/no/more/there | |{printf&gt\uff1b&amp\uff1b2&#39\uff1bcleanup failed\\n&#39\n......", "note_en": "Or, y&#39;know, stop using  expr. You can do everything  expr does by using  Parameter Expansion. What&#39;s that thing up there trying to do? Remove the first letter of a word? That can be done in POSIX shells using PE or Substring Expansion:    Seriously, there&#39;s no excuse for using  expr unless you&#39;re on Solaris with its non-POSIX-conforming  /bin/sh. It&#39;s an external process, so it&#39;s much slower than in-process string manipulation. And since nobody uses it, nobody understands what it&#39;s doing, so your code is obfuscated and hard to maintain.    In general: Unix UTF-8 text does not use BOM. The encoding of plain text is determined by the locale or by mime types or other metadata. While the presence of a BOM would not normally damage a UTF-8 document meant only for reading by humans, it is problematic (often syntactically illegal) in any text file meant to be interpreted by automated processes such as scripts, source code, configuration files, and so on. Files starting with BOM should be considered equally foreign as those with MS-DOS linebreaks.    In shell scripting: &#39;Where UTF-8 is used transparently in 8-bit environments, the use of a BOM will interfere with any protocol or file format that expects specific ASCII characters at the beginning, such as the use of &#34;#!&#34; of at the beginning of Unix shell scripts.&#39;  http://unicode.org/faq/utf_bom.html#bom5    There isn&#39;t anything wrong with this expression, but you should be aware that command substitutions (all forms:  `...`,  $(...),  $(&lt;file),  `&lt;file`, and  ${\u00a0...;\u00a0} (ksh)) remove any trailing newlines. This is often inconsequential or even desirable, but if you must preserve the literal output including any possible trailing newlines, it gets tricky because you have no way of knowing whether the output had them or how many. One ugly but usable workaround is to add a postfix inside the command substitution and remove it on the outside:    A less portable but arguably prettier solution is to use  read with an empty delimiter.    # Ksh (or bash 4.2+ with lastpipe enabled) readlink -fn -- &#34;$dir_path&#34; | IFS= read -rd &#39;&#39; absolute_dir_path\n  The downside to this method is that the  read will always return false unless the command outputs a NUL byte causing only part of the stream to be read. The only way to get the exit status of the command is through  PIPESTATUS. You could also intentionally output a NUL byte to force  read to return true, and use  pipefail.    set -o pipefail { readlink -fn -- &#34;$dir_path&#34; &amp;&amp; printf &#39;\\0&#39;; } | IFS= read -rd &#39;&#39; absolute_dir_path set +o pipefail\n  This is somewhat of a portability mess, as Bash supports both  pipefail and  PIPESTATUS, ksh93 supports  pipefail only, and only recent versions of mksh support  pipefail, while earlier versions supported  PIPESTATUS only. Additionally, a bleeding-edge ksh93 version is required in order for  read to stop at the NUL byte.    One way to prevent programs from interpreting filenames passed to them as options is to use pathnames (see  pitfall #3 above). For files under the current directory, names may be prefixed with a relative pathname  ./.    In the case of a pattern like  *.* however, problems can arise because it matches a string of the form  ./filename. In a simple case, you can just use the glob directly to generate the desired matches. If however a separate pattern-matching step is required (e.g. the results have been preprocessed and stored in an array, and need to be filtered), it could be solved by taking the prefix into account in the pattern:  [[\u00a0$file\u00a0!=\u00a0./*.*\u00a0]], or by stripping the pattern from the match.    # Bash shopt -s nullglob for path in ./*; do  [[ ${path##*/} != *.* ]] &amp;&amp; rm &#34;$path&#34; done  # Or even better for file in *; do  [[ $file != *.* ]] &amp;&amp; rm &#34;./$file&#34; done  # Or better still for file in *.*; do  rm &#34;./$file&#34; done\n  Another possibility is to signal the  end of options with a  -- argument. (Again, covered in  #pf3).    shopt -s nullglob for file in *; do  [[ $file != *.* ]] &amp;&amp; rm -- &#34;$file&#34; done\n  This is by far the most common mistake involving redirections, typically performed by someone wanting to direct both stdout and stderr to a file or pipe will try this and not understand why stderr is still showing up on their terminal. If you&#39;re perplexed by this, you probably don&#39;t understand how  redirections or possibly  file descriptors work to begin with. Redirections are evaluated left-to-right before the command is executed. This semantically incorrect code essentially means: &#34;first redirect standard error to where standard out is currently pointing (the tty), then redirect standard out to logfile&#34;. This is backwards. Standard error is already going to the tty. Use the following instead:    See  a more in-depth explanation,  Copy descriptor explained, and  BashGuide - redirection.    $? is only required if you need to retrieve the exact status of the previous command. If you only need to test for success or failure (any non-zero status), just test the command directly. e.g.:    Checking an exit status against a list of alternatives might follow a pattern like this:    cmd status=$? case $status in  0)  echo success &gt;&amp;2  ;;  1)  echo &#39;Must supply a parameter, exiting.&#39; &gt;&amp;2  exit 1  ;;  *)  echo &#34;Unknown error $status, exiting.&#34; &gt;&amp;2  exit &#34;$status&#34; esac\n  The code given to an arithmetic expansion or compound command undergoes an initial pass of expansions and substitutions to generate the text to be parsed and evaluated as an  arithmetic expression.  This must be handled carefully.    For example, this expression is stitched together by expanding one code fragment into another.    $ x=&#39;$(date &gt;&amp;2)&#39; # redirection is just so we can see everything happen $ y=$((array[&#34;$x&#34;])) # Quotes don&#39;t help. The array doesn&#39;t even have to exist Mon Jun 2 10:49:08 EDT 2014\n   Next, the expanded string is passed to the arithmetic processor, which will need to get a reference to the array variable in the shell&#39;s internal symbol table using a lookup function to resolve variable&#39;s &#34;name&#34;. This name resolver takes a string -  array[$(date\u00a0&gt;&amp;2)] - consisting of the name, including the index and all literal code within brackets, just like e.g.  read or  printf\u00a0-v do with variable names passed as arguments. The variable resolver performs expansions,  including command substitution, to resolve the index.    Most of the time, there is no need to use any kind of expansion within an arithmetic expansion. Use variable names directly in the expression (no  $) wherever possible (i.e. except for positional parameters and POSIX &#34;special variables&#34;). Validate variables before using them and assure no expansion generates anything but a numeric literal - most issues are automatically avoided.    Escape any expansions to pass them into the expression without expanding them first:    # Typical task reading some columns into an associative array. typeset -A arr printf -v offset &#39;%(%s)T&#39; -1  while IFS=&#39; &#39; read -r x y; do  [[ $x $y == +([0-9]) +([0-9]) ]] # validate input (see next pitfall)  (( arr[\\$(date -d &#34;@$x&#34; +%F)] = y - offset )) # Escaped substitution passes the entire expression literally. done\n  Another option is to use  let with single-quoted arguments.  ((expr)) is equivalent to  let\u00a0&#34;expr&#34; (double-quoted args).    Always validate your input (see  BashFAQ/054) before using num in an arithmetic context as it allows code injection.    Unbelievable as it may seem, POSIX requires the treatment of  IFS as a field  terminator, rather than a field  separator. What this means in our example is that if there&#39;s an empty field at the end of the input line, it will be discarded:    Where did the empty field go? It was eaten for historical reasons (&#34;because it&#39;s always been that way&#34;). This behavior is not unique to bash; all conformant shells do it. A non-empty field is properly scanned:    So, how do we work around this nonsense? As it turns out, appending an IFS character to the end of the input string will force the scanning to work. If there was a trailing empty field, the extra IFS character &#34;terminates&#34; it so that it gets scanned. If there was a trailing non-empty field, the IFS character creates a new, empty field that gets dropped.    $ input=&#34;a,b,&#34; $ IFS=, read -ra fields &lt;&lt;&lt; &#34;$input,&#34; $ declare -p fields declare -a fields=&#39;([0]=&#34;a&#34; [1]=&#34;b&#34; [2]=&#34;&#34;)&#39;\n  Do not export CDPATH.    Setting CDPATH in .bashrc is not an issue, but exporting it will cause any bash or sh script you run, that happen to use  cd, to potentially change behaviour.    There are two problems. A script that does the following:    may change directory to  ~/myProject/some/dir instead of  ./some/dir, depending on what directories exist at the time. So the  cd may succeed and take the script to the wrong directory, with potentially harmful effects of the following commands which now run in a different directory than intended.    The second problem is when  cd is run in a context where the output is captured:    As a side-effect when CDPATH is set,  cd will output something like  /home/user/some/dir to stdout to indicate that it found a directory through CDPATH, which in turn will end up in the output variable along with the intended output of  some\u00a0command.    A script can make itself immune to a CDPATH inherited from the environment by always prepending  ./ to relative paths, or run  unset\u00a0CDPATH at the start of the script, but don&#39;t assume every scripter has taken this pitfall into account, so don&#39;t export CDPATH.    Directly assigning a variable&#39;s value to a temporary variable isn&#39;t alone enough to restore its state. The assignment will always result in a  set but  empty temporary variable even if the initial variable was unset. This is a particular problem for IFS because an  empty IFS has a completely different meaning from an  unset IFS, and setting IFS to a temporary value for a command or two is a common requirement.    An easy workaround is to designate a prefix to distinguish set from unset vars, then strip it when finished.    A local variable is usually preferable when possible.    Subshells are another possibility.    It is not safe to populate an array with a raw  $(...)  CommandSubstitution. The output of the command undergoes word splitting (on  all whitespace, even ones that are inside quotes) and then  globbing. If there&#39;s a word like  * or  eh? or  [abc] in the result, it will be expanded based on filenames in the current working directory.    To select a replacement, you need to know whether the command writes its output on a single line, or multiple lines. If it&#39;s a single line:    If it&#39;s multiple lines (and you&#39;re targeting bash 4.0 or later):    If it&#39;s multiple lines (and you want compatibility with bash 3.x,  or want your command&#39;s exit status to be reflected in success or failure of the  read operation without depending on behavior only available in bash 4.4 and newer):    This will prevent globbing. It still won&#39;t help you if you needed to avoid splitting on quoted whitespace, but unfortunately  nothing bash can do handles that case. For generalized CSV (comma-separated value) file handling, you really need to switch to a language that has a dedicated CSV input library.    GNU  xargs supports running multiple jobs in parallel.  -P\u00a0n where  n is the number of jobs to run in parallel.    seq 100 | xargs -n1 -P10 echo &#34;$a&#34; | grep 5 seq 100 | xargs -n1 -P10 echo &#34;$a&#34; &gt; myoutput.txt\n  This will work fine for many situations but has a deceptive flaw: If  $a contains more than 8192 characters (the limit depends on platform and version), the  echo may not be atomic (it may be split into multiple  write() calls), and there is a risk that two lines will be mixed.    $ perl -e &#39;print &#34;a&#34;x10000, &#34;\\n&#34;&#39; &gt; foo $ strace -e write bash -c &#39;read -r foo &lt; foo; echo &#34;$foo&#34;&#39; &gt;/dev/null write(1, &#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#34;..., 8192) = 8192 write(1, &#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#34;..., 1809) = 1809 +++ exited with 0 +++\n  Obviously the same issue arises if there are multiple calls to  echo or  printf:    slowprint() {  printf &#39;Start-%s &#39; &#34;$1&#34;  sleep &#34;$1&#34;  printf &#39;%s-End\\n&#39; &#34;$1&#34; } export -f slowprint seq 10 | xargs -n1 -I {} -P4 bash -c &#34;slowprint {}&#34; # Compare to no parallelization seq 10 | xargs -n1 -I {} bash -c &#34;slowprint {}&#34; # Be sure to see the warnings in the next Pitfall!\n  Outputs from the parallel jobs are mixed together, because each job consists of two (or more) separate  write() calls.    If you need the outputs unmixed, it is therefore recommended to use a tool that guarantees output will be serialized (such as GNU Parallel).    For further details see  a demonstration of the mixing problem.    This command contains a  CodeInjection vulnerability. The filename that is found by  find is injected into a shell command and parsed by  sh. If the filename contains shell metacharacters like  ; or  $(\u00a0...\u00a0) then the filename may be  executed as code by `sh&#39;.    The &#34;slowprint&#34; example in the previous Pitfall would have been a  CodeInjection bug if the input weren&#39;t guaranteed to be integers.    To be more precise,  POSIX find does not specify whether an argument which contains  more than just  {} is expanded. GNU  find allows this  CodeInjection to occur. Other implementations choose a safer path:    # uname -a HP-UX imadev B.10.20 A 9000/785 2008897791 two-user license # find /dev/null -exec sh -c &#39;echo {}&#39; \\; {}\n  The correct approach is to  separate the filename argument from the script argument:    Redirection is done  before the command is executed. Usually that doesn&#39;t matter, but with  sudo we have a command being executed as a different user than the redirection.    If the redirection must be executed with  sudo-granted privileges, then you need a wrapper:    Instead of a wrapper you can use  tee:    This may be easier to write if  mycmd has a lot of quoting.    This is very similar to the previous pitfall.  Globbing is also done  before the command is executed. If the directory isn&#39;t readable by your normal user privileges, then you may need the globbing to be done in a shell that has the  sudo-granted privileges:    Do not close stdin, stdout or stderr as a &#34;shorthand&#34; for redirecting to  /dev/null. Write it out correctly.    Why? Consider what happens when your program tries to write an error message to stderr. If stderr has been redirected to  /dev/null, the write succeeds, and your program is free to carry on, secure in the knowledge that it has diligently reported the error condition.    But if stderr has been  closed, then the write will fail. At that point, your program may do something unpredictable. It may carry on and ignore the failure, or it may immediately exit, considering the execution environment so broken that it cannot safely continue. Or whatever else the programmer decided the program should do when its world has become a dystopian hell.    All programs are assured that stdin, stdout and stderr will  exist and will be readable/writable in an appropriate and reasonable manner. By closing one of them, you have violated your promise to this program. This is not acceptable.    Of course, an even better solution would be to actually log the errors somewhere, so you can go back and read them and figure out what&#39;s wrong.    xargs splits on whitespace. This is unfortunate because whitespace is allowed in filenames and commonly used by GUI users.  xargs also treats  &#39; and  &#34; specially, which can also lead to problems:    Here  xargs warns:    # Do not do this $ find . -type f | xargs wc xargs: unmatched single quote; by default quotes are special to xargs unless you use the -0 option\n  Here  xargs does not warn at all:    # Do not do this echo * | xargs wc find *famous* -type f | xargs wc find *4* -type f | xargs wc\n  Instead use  xargs\u00a0-0:    # Do this instead printf &#39;%s\\0&#39; * | xargs -0 wc find . -type f -name &#39;*famous*&#39; -print0 | xargs -0 wc find . -type f -name &#39;*4*&#39; -exec wc {} +\n  If using  -0 is not simple, an alternative is to use GNU Parallel, which splits on \\n. And while \\n is also allowed in filenames they never occur unless your users are malicious. In any case:  If you use  xargs without  -0 put a comment in your code explaining why that is safe in your particular situation.    When passing an  indexed array element to  unset, it needs to be quoted. Otherwise, it may be treated as a  glob, and expanded against the files in the current directory. If there happens to be a file named  a0 then the glob is expanded to  a0 and you end up executing  unset\u00a0a0.    Calling  date multiple times is a bad idea. Imagine what happens if the first call occurs a millisecond before midnight on April 30, and the second call occurs a millisecond after midnight on May 1. You would end up with month=04 and day=01.    It&#39;s better to call date  one time, retrieving all of the fields you want in a single invocation.    A common idiom for that:    Or with bash&#39;s (4.2 or above)  printf builtin:    Remember things like month or day names are locale-dependent, hence the quotes around  %A or  %B to avoid problems in locales where day or month names contain spaces or other special characters for the shell.    Or, you may retrieve a timestamp in epoch format (seconds since the start of 1970), and then use that to generate human-readable date/time fields as needed.    # Requires bash 4.2 or above printf -v now &#39;%(%s)T&#39; -1 # Or now=$EPOCHSECONDS in bash 5.0  # -1 may be omitted in 4.3 or above printf -v month &#39;%(%m)T&#39; &#34;$now&#34; printf -v day &#39;%(%d)T&#39; &#34;$now&#34;\n  If your system&#39;s  strftime() doesn&#39;t support  %s, you can get the epoch time with:    Forced base 10 interpretation only works with signless numbers. As long as  $i contains a string of digits with no leading  - or  +, everything is fine. But if  $i might be negative, this conversion could fail, either noisily (with an error message), or even worse, silently (simply yielding the wrong result).    If there&#39;s any chance  $i could be negative, use this instead:    For explanations, please see  ArithmeticExpression.    There are many pitfalls to enabling these options at the start of a script.    errexit (set -e) tries to abort the script when an error occurs, which sounds  like a good idea at first, but it has very intricate rules regarding when to  abort on error or not. Some of the main problems with errexit are    It&#39;s not actually possible for the shell to detect errors. All it has to go on is a command&#39;s exit status. When commands fail, they normally return a non-zero exit status, but many commands also use the exit status to convey a true/false value. Examples of such commands are  test,  [,  [[\u00a0...\u00a0]],  ((...)), and  grep.\n When a command you test with  if or  &amp;&amp; or  || is a function, set -e ignores  non-zero exit statuses of commands in that function. Consider a function like            If that  cd command fails, you definitely don&#39;t want that  rm command to run,  and with a simple use of the function when errexit is enabled, that happens to  be the case:            set -e cleanup() {  cd &#34;$1&#34;  printf &#39;Oops!\\n&#39; } cleanup /no/longer/there # scriptname: cd: /no/longer/there: No such file or directory\n  But then later you decide to add a custom error message           cleanup /no/longer/there || {  printf &gt;&amp;2 &#39;Cleanup failed\\n&#39\n......", "posttime": "2022-02-17 14:06:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bash", "title": "Bash\u9677\u9631", "title_en": "Bash Pitfalls", "transed": 1, "url": "http://mywiki.wooledge.org/BashPitfalls", "via": "", "real_tags": ["bash"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073841, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8ff7\u4f60\u7248\u30022021-06-14\u6dfb\u52a0\u4e86\u4e00\u4e2a\u201cs3zip\u201d\u6269\u5c55\uff0c\u5141\u8bb8\u4eceZIP\u6863\u6848\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6\u3002\u6211\u4eec\u5c06\u63a2\u8ba8\u4e0e\u4e0b\u8f7d\u5e38\u89c4\u5bf9\u8c61\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4f18\u52bf\u7684\u7528\u4f8b\uff0c\u5e76\u89e3\u91ca\u5982\u4f55\u4f7f\u7528\u5b83\u3002\n\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u63cf\u8ff0\u8fc7MinIO\u5982\u4f55\u5728\u5185\u90e8\u4f18\u5316\u5c0f\u5bf9\u8c61\u3002\u7136\u800c\uff0c\u5728\u5185\u90e8\u5b58\u50a8\u5355\u4e2a\u5bf9\u8c61\u4ecd\u7136\u4f1a\u5e26\u6765\u6587\u4ef6\u7cfb\u7edf\u9650\u5236\uff0c\u4f8b\u5982\u8f83\u6162\u7684\u5217\u8868\u548c\u6700\u5c0f\u5757\u5927\u5c0f\u3002\n\u901a\u8fc7\u53cd\u9988\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5728\u6ca1\u6709\u5355\u4e2a\u5bf9\u8c61\u7684\u5b8c\u6574\u7279\u5f81\u96c6\u7684\u60c5\u51b5\u4e0b\u5f15\u7528\u5c0f\u6570\u636e\u6bb5\u662f\u53ef\u53d6\u7684\u3002\u4e3a\u4e86\u8ba9\u5b83\u5c3d\u53ef\u80fd\u5bb9\u6613\u4f7f\u7528\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86ZIP\u6587\u4ef6\u7d22\u5f15\u3002\n\u6b64\u529f\u80fd\u5141\u8bb8\u68c0\u7d22\u4e0a\u8f7d\u5230MinIO\u7684ZIP\u6587\u4ef6\u4e2d\u7684\u5355\u4e2a\u6587\u4ef6\u3002\u4f7f\u7528\u6b64\u529f\u80fd\uff0c\u53ef\u4ee5\u4e0a\u8f7d\u5305\u542b\u6570\u5343\u4e2a\u6587\u4ef6\u7684\u5355\u4e2aZIP\u6587\u4ef6\u3002\u7136\u540e\uff0cMinIO\u7d22\u5f15\u5de5\u5177\u53ef\u4ee5\u786e\u4fdd\u8bbf\u95eeZIP\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\u7684\u6027\u80fd\u4e0e\u8bbf\u95ee\u5355\u4e2a\u5bf9\u8c61\u7684\u6027\u80fd\u76f8\u540c\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u900f\u660e\u7684\u3002\nZIP\u6587\u4ef6\u5728\u5927\u591a\u6570\u5f00\u53d1\u5e73\u53f0\u4e0a\u90fd\u662f\u4f17\u6240\u5468\u77e5\u7684\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u5f88\u597d\u7684\u652f\u6301\uff0c\u800c\u4e14\u6709\u6210\u719f\u7684\u53ef\u7528\u5de5\u5177\u3002\u5728\u5927\u591a\u6570\u8bed\u8a00\u4e2d\uff0cZIP\u683c\u5f0f\u5141\u8bb8\u6d41\u5f0f\u5199\u5165\uff0c\u56e0\u6b64\u521b\u5efa\u5f52\u6863\u6587\u4ef6\u65f6\u4e0d\u9700\u8981\u5c06\u6240\u6709\u6570\u636e\u90fd\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u3002\u6211\u4eec\u9009\u62e9\u901a\u7528\u683c\u5f0f\u800c\u4e0d\u662f\u5b9a\u5236\u683c\u5f0f\uff0c\u56e0\u4e3a\u5b83\u63d0\u4f9b\u4e86\u6211\u4eec\u9700\u8981\u7684\u529f\u80fd\u3002\u50cfTAR\u8fd9\u6837\u7684\u5176\u4ed6\u683c\u5f0f\u4e0d\u80fd\u6ee1\u8db3\u8fd9\u65b9\u9762\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u5e0c\u671b\u5b9e\u73b0\u5176\u4ed6\u683c\u5f0f\u3002\n\u6211\u4eec\u8fd9\u4e2a\u529f\u80fd\u7684\u4e3b\u8981\u76ee\u6807\u662f\u5141\u8bb8\u5feb\u901f\u4e0a\u4f20\u8bb8\u591a\u4e0d\u4f1a\u6539\u53d8\u7684\u5c0f\u6570\u636e\u5757\uff0c\u5e76\u5141\u8bb8\u5feb\u901f\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6\u3002\u7531\u4e8e\u6240\u6709\u6570\u636e\u90fd\u5b58\u50a8\u4e3a\u5355\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u5360\u7528\u7684\u7a7a\u95f4\u4e5f\u5927\u5927\u51cf\u5c11\u3002\n\u4e00\u4e2a\u4e3b\u8981\u7684\u4f7f\u7528\u793a\u4f8b\u53ef\u4ee5\u662f\u6bcf\u5468/\u6bcf\u65e5/\u6bcf\u5c0f\u65f6\u62a5\u544a\uff0c\u9700\u8981\u6309\u6bcf\u4e2a\u7528\u6237\u8bbf\u95ee\u8fd9\u4e9b\u62a5\u544a\u3002\u60a8\u53ef\u80fd\u6709\u4e00\u4e2a\u6570\u636e\u6e56\uff0c\u5728\u90a3\u91cc\u5b58\u50a8\u8981\u5206\u6790\u7684\u6587\u4ef6\u7684ZIP\u5b58\u6863\u3002\u7136\u540e\uff0c\u6587\u4ef6\u540d\u5c06\u662f\u8981\u5728\u5176\u4e0a\u6267\u884c\u67e5\u627e\u7684ID\u3002\u5bf9\u4e8e\u5e38\u89c4\u5bf9\u8c61\uff0c\u8fd9\u5c06\u4e3a\u6bcf\u4e2a\u7528\u6237\u6bcf\u4e2a\u95f4\u9694\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u3002\u76f8\u53cd\uff0c\u53ef\u4ee5\u4e0a\u4f20\u7ed9\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5e76\u901a\u8fc7ID\u8bbf\u95ee\u5355\u4e2a\u8bb0\u5f55\u3002\n\u65e0\u6cd5\u66f4\u65b0ZIP\u6587\u4ef6\u4e2d\u7684\u5355\u4e2a\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u8fd9\u5e94\u8be5\u53ea\u7528\u4e8e\u9884\u671f\u4e0d\u4f1a\u66f4\u6539\u7684\u6570\u636e\u3002\u5982\u679cZIP\u6587\u4ef6\u88ab\u8986\u76d6\uff0c\u6240\u6709\u6587\u4ef6\u90fd\u4f1a\u540c\u65f6\u88ab\u539f\u5b50\u5730\u66ff\u6362\u3002\u5982\u679c\u60a8\u77e5\u9053\u8981\u4fee\u6539ZIP\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u90a3\u4e48\u4e0d\u8981\u4f7f\u7528ZIP\u6587\u4ef6\uff0c\u800c\u662f\u5c06\u6587\u4ef6\u4fdd\u5b58\u4e3a\u5e38\u89c4\u5bf9\u8c61\u3002\nzip\u4e2d\u7684\u6587\u4ef6\u6ca1\u6709\u5355\u72ec\u7684\u5143\u6570\u636e\uff0c\u53ea\u6709\u540d\u79f0\u548c\u5927\u5c0f\u3002\u4fee\u6539\u65f6\u95f4\u4ece\u7236ZIP\u5bf9\u8c61\u7ee7\u627f\u3002\u8fd9\u610f\u5473\u7740ILM\u89c4\u5219\u548c\u4fdd\u7559\u5c06\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u5e94\u7528\u4e8eZIP\u5bf9\u8c61\u3002\nZIP\u538b\u7f29\u662f\u6b21\u8981\u7684\uff0c\u901a\u5e38\u5efa\u8bae\u53ea\u5bf9ZIP\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\u8fdb\u884c\u89e3\u538b\u7f29\u3002\u8fd9\u53ef\u4ee5\u5728\u538b\u7f29\u6587\u4ef6\u65f6\u8bbe\u7f6e\u3002\u5355\u4e2a\u6587\u4ef6\u53ef\u4ee5\u4e0d\u538b\u7f29\u5b58\u50a8\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528deflate\u6216zstandard\u8fdb\u884c\u538b\u7f29\u3002\n\u5f52\u6863\u6587\u4ef6\u7684\u5b57\u8282\u5927\u5c0f\u5bf9\u68c0\u7d22\u5355\u4e2a\u6587\u4ef6\u7684\u54cd\u5e94\u6027\u51e0\u4e4e\u6ca1\u6709\u5f71\u54cd\u3002\u4e3a\u4e86\u4fdd\u8bc1\u6bcf\u4e2a\u8bf7\u6c42\u7684\u54cd\u5e94\u901f\u5ea6\uff0c\u5efa\u8bae\u5c06\u6bcf\u4e2azip\u6587\u4ef6\u4fdd\u6301\u5728100000\u4e2a\u5355\u72ec\u6587\u4ef6\u4ee5\u4e0b\u3002\u5982\u679c\u4f60\u6253\u7b97\u8d85\u8d8a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5efa\u8bae\u5c06\u4f60\u7684\u8f93\u5165\u5206\u6210\u51e0\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u7684\u76ee\u6807\u662f10000\u4e2a\u6587\u4ef6\u3002\n\u57fa\u51c6\u6d4b\u8bd5\u663e\u793a\uff0c\u5bf9\u4e8e\u5305\u542b10000\u4e2a\u6587\u4ef6\u7684zip\u6587\u4ef6\uff0c\u6bcf\u6b21\u8bbf\u95ee\u5927\u7ea6\u9700\u89811ms\u3002\u8fd9\u662f\u7ebf\u6027\u6269\u5c55\u7684\uff0c\u56e0\u6b64\uff0c\u5047\u8bbeCPU\u8d44\u6e90\u53ef\u7528\uff0c\u5bf9\u4e8e100000\u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u5e94\u8be5\u989d\u5916\u9700\u898110\u6beb\u79d2\u3002\n\u901a\u8fc7\u5bf9\u73b0\u6709S3API\u7684\u6269\u5c55\uff0c\u53ef\u4ee5\u4f7f\u7528\u7d22\u5f15ZIP\u6587\u4ef6\u3002\u4e3a\u4e86\u786e\u4fdd\u4e0d\u4f1a\u51fa\u73b0\u610f\u5916\u7684\u526f\u4f5c\u7528\uff0c\u6240\u6709\u7684\u4f7f\u7528\u90fd\u7531\u542f\u7528\u65b0\u529f\u80fd\u5fc5\u987b\u5b58\u5728\u7684\u6807\u9898\u8fdb\u884c\u4fdd\u62a4\u3002\u8981\u542f\u7528\u6269\u5c55\uff0c\u5fc5\u987b\u5c06\u6807\u9898x-minio-extract\u7684\u503c\u8bbe\u7f6e\u4e3atrue\u3002\n\u4ee5\u4e0bAPI\u8bf7\u6c42\u7c7b\u578b\u652f\u6301s3zip\u6269\u5c55\uff1aHeadObject\u3001GetObject\u548cListObjectsV2\u3002\u8fd9\u5c06\u5141\u8bb8\u5728\u5f52\u6863\u6587\u4ef6\u4e2d\u5217\u51fa\u6587\u4ef6\u5e76\u68c0\u7d22\u5b83\u4eec\u3002\nzip\u6587\u4ef6\u4e2d\u7684\u6587\u4ef6\u88ab\u5f15\u7528\u4e3a/prefix/file\u3002zip/file\u4e2d\u7684zip/path\u3002ext.Zip\u6587\u4ef6\u5fc5\u987b\u5177\u6709Zip\u6269\u5c55\u540d\uff0c\u5e76\u4e14Zip\u6587\u4ef6\u4e2d\u7684\u8def\u5f84\u7528\u4e8e\u5f15\u7528\u6bcf\u4e2a\u6587\u4ef6\u3002\n\u4f8b\u5982\uff0c\u5217\u51fa\u4f5c\u4e3a\u524d\u7f00/file\u4e0a\u4f20\u7684\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u3002zip\u53d1\u51fa\u4e00\u4e2a\u5e26\u6709\u524d\u7f00/file\u7684GetObject\u3002zip/\u3002\u8bf7\u6ce8\u610f\uff0c\u6b63\u659c\u6760\u662f\u5982\u4f55\u8868\u793azip\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u7684\u3002\u524d\u7f00\u3001\u6807\u8bb0\u548c\u5206\u9694\u7b26\u4f5c\u4e3a\u5e38\u89c4ListObjectsV2\u8c03\u7528\u8fd0\u884c\u3002\n\u4e0a\u4f20\u6587\u4ef6\u662f\u901a\u8fc7\u5e38\u89c4\u529f\u80fd\u5b8c\u6210\u7684\u3002\u4e0a\u4f20\u6587\u4ef6\u4e0d\u9700\u8981\u7279\u6b8a\u64cd\u4f5c\uff0c\u4f46\u5bf9\u8c61\u952e\u5fc5\u987b\u4ee5\u7ed3\u5c3e\u3002\u62c9\u94fe\n\u8981\u5728\u4e0a\u4f20\u65f6\u89e6\u53d1\u5373\u65f6\u7d22\u5f15\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06x-minio-extract\u5934\u8bbe\u7f6e\u4e3atrue\u6765\u89e6\u53d1\u3002\u5982\u679c\u6ca1\u6709\u8bbe\u7f6e\uff0c\u7d22\u5f15\u5c06\u7531\u4e0a\u9762\u63d0\u5230\u7684\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u521b\u5efa\uff0c\u8be5\u8bf7\u6c42\u68c0\u7d22\u6216\u5217\u51fazip\u4e2d\u7684\u6587\u4ef6\u3002\nZip64\uff084GB\u4ee5\u4e0a\u7684zip\u6587\u4ef6\uff09\u5b8c\u5168\u53d7\u652f\u6301\u3002\u4e0d\u652f\u6301\u57fa\u4e8eZip\u52a0\u5bc6\u7684Zip\u6587\u4ef6\u3002\n\u652f\u6301Unicode\u540d\u79f0\uff0c\u5e94\u4f7f\u7528UTF-8\u7f16\u7801\u3002\u7136\u800c\uff0c\u786e\u5b9e\u5b58\u5728\u4f9d\u8d56\u672c\u5730\u4ee3\u7801\u9875\u5de5\u4f5c\u7684\u4e0d\u5408\u89c4\u538b\u7f29\u5668\u3002\u5982\u679c\u60a8\u8ba1\u5212\u4f7f\u7528Unicode\u540d\u79f0\uff0c\u8bf7\u68c0\u67e5\u6587\u4ef6\u540d\u7684\u89e3\u7801\u662f\u5426\u6b63\u786e\u3002\u901a\u5e38\u5efa\u8bae\u9075\u5faa\u901a\u7528\u5bf9\u8c61\u952e\u547d\u540d\u51c6\u5219\u3002\n\u8981\u5217\u51fazip\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u8bf7\u53d1\u9001\u5305\u542bzip\u6587\u4ef6\u7684\u524d\u7f00\u4f5c\u4e3a\u524d\u7f00\uff0c\u5e76\u53d1\u9001\u4e0a\u8ff0\u6807\u9898\u3002\u4f8b\u5982\u524d\u7f00/\u6587\u4ef6\u3002zip/\u5c06\u4ee5\u952e\u524d\u7f00/file\u5217\u51fazip\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u3002\u62c9\u94fe\u652f\u6301\u5e38\u89c4ListObjectV2\u53c2\u6570\uff0c\u5982\u9644\u52a0\u524d\u7f00\u3001\u6807\u8bb0\u548c\u5206\u9694\u7b26\u3002\n\u4f8b\u5982\uff0c\u4f7f\u7528prefix=prefix/file\u5217\u51fa\u3002zip/folder/\uff0cdelimiter=/\u5c06\u53ea\u5217\u51fa\u6307\u5b9a\u6587\u4ef6\u5939\u4e2d\u7684\u5185\u5bb9\u3002\n\u4e3a\u4e86\u4fdd\u6301\u8f83\u4f4e\u7684\u590d\u6742\u6027\uff0c\u6709\u51e0\u4e2a\u9650\u5236\uff1a\u5fc5\u987b\u4f7f\u7528ListObjectV2\u3002\u6bcf\u6b21\u901a\u8bdd\u53ea\u80fd\u5217\u51fa\u4e00\u4e2azip\u6587\u4ef6\uff0c\u5e76\u4e14\u53ea\u80fd\u5217\u51fazip\u6587\u4ef6\u7684\u6700\u65b0\u7248\u672c\u3002\n\u5982\u4e0a\u6240\u8ff0\uff0c\u8bbf\u95ee\u5355\u4e2a\u6587\u4ef6\u9700\u8981\u4e00\u4e2a\u5934\u548c\u4e00\u4e2a\u8def\u5f84\u6765\u6307\u793azip\u6587\u4ef6\u548c\u5176\u4e2d\u7684\u6587\u4ef6\u3002\u8981\u83b7\u53d6\u8def\u5f84\uff0c\u53ef\u4ee5\u4f7f\u7528ListObjectsV2\u3002\u8fd8\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u5c06\u5bf9\u8c61\u8def\u5f84\u4e0ezip\u6587\u4ef6\u5185\u7684\u8def\u5f84\u7ec4\u5408\u6765\u6784\u9020\u5bf9\u8c61\u540d\u3002\n\u5355\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u5355\u4e2a\u8bf7\u6c42\u5904\u7406\u3002\u8fd9\u5c06\u4ee5\u4e0e\u5355\u72ec\u5bf9\u8c61\u76f8\u540c\u7684\u901f\u5ea6\u751f\u6210\u5355\u4e2a\u6587\u4ef6\u3002\u5982\u679c\u60a8\u9700\u8981\u8bbf\u95ee\u5b58\u6863\u4e2d\u8bb8\u591a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u4e0b\u8f7d\u6574\u4e2aZIP\u5b58\u6863\u5e76\u5728\u672c\u5730\u5904\u7406\u4f1a\u66f4\u5feb\u3002\nmc\u53d1\u5e03\u30022022-02-16\u589e\u52a0\u4e86\u5bf9\u8fdc\u7a0b\u8bbf\u95eezip\u6587\u4ef6\u4e2d\u6587\u4ef6\u7684\u652f\u6301\u3002\u5177\u4f53\u6765\u8bf4\uff0cls\u3001cp\u548ccat\u547d\u4ee4\u652f\u6301\u6e90\u4e3a\u8fdc\u7a0bzip\u6587\u4ef6\u7684\u64cd\u4f5c\u3002\u8fd9\u4e9b\u547d\u4ee4\u6709\u4e00\u4e2a\u201c-zip\u201d\u53c2\u6570\uff0c\u8868\u793a\u60a8\u6253\u7b97\u5728zip\u6587\u4ef6\u4e0a\u8fd0\u884c\u8be5\u64cd\u4f5c\u3002\n\u8fd9\u4ec5\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u662f\u4ee5\u5206\u5e03\u5f0f\u6a21\u5f0f\u8fd0\u884c\u7684MinIO\u670d\u52a1\u5668\u65f6\u624d\u8d77\u4f5c\u7528\u3002\ns3zip\u529f\u80fd\u5141\u8bb8\u60a8\u4ee5\u7d27\u51d1\u7684\u65b9\u5f0f\u5b58\u50a8\u8bb8\u591a\u5c0f\u6587\u4ef6\u3002\u8fd9\u53ef\u4ee5\u5f88\u597d\u5730\u66ff\u4ee3\u8bb8\u591a\u5355\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u51cf\u5c11ILM\u548c\u5176\u4ed6\u64cd\u4f5c\u7684\u5b58\u50a8\u5f00\u9500\u548c\u5904\u7406\u65f6\u95f4\u3002\n\u4e0e\u4efb\u4f55\u6269\u5c55\u4e00\u6837\uff0c\u901a\u5e38\u7684\u8b66\u544a\u4e5f\u9002\u7528\u3002\u867d\u7136\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5728\u6ca1\u6709\u4efb\u4f55\u670d\u52a1\u5668\u7aef\u652f\u6301\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u672c\u5730\u7d22\u5f15\u5e76\u4f7f\u7528HTTP\u8303\u56f4\u8bf7\u6c42\u6765\u63d0\u4f9b\u7c7b\u4f3c\u7684\u529f\u80fd\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u8fd9\u9700\u8981\u4ed8\u51fa\u76f8\u5f53\u5927\u7684\u52aa\u529b\uff0c\u800c\u4e14\u7ed3\u679c\u4e0d\u4f1a\u50cf\u6211\u4eec\u4f7f\u7528\u6269\u5c55\u6240\u5b9e\u73b0\u7684\u90a3\u6837\u7b80\u5316\u3002\n\u51fa\u4e8e\u5b58\u6863\u76ee\u7684\uff0c\u6b64\u6269\u5c55\u4e3a\u901a\u8fc7mc\u547d\u4ee4\u754c\u9762\u68c0\u7d22\u5f88\u5c11\u8bbf\u95ee\u7684\u5b58\u6863\u6570\u636e\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u8282\u7701\u7a7a\u95f4\u548c\u5e26\u5bbd\u7684\u65b9\u6cd5\u3002\u8fd9\u662f\u4e00\u79cd\u6709\u6548\u7684\u5b58\u50a8\u65e5\u5fd7\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u60a8\u53ea\u9700\u8981\u5076\u5c14\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u5feb\u901f\u4e0a\u4f20\u9700\u8981ID\u5feb\u901f\u8bbf\u95ee\u7684\u591a\u4e2a\u6570\u636e\u6bb5\u3002\n\u8003\u8651\u4f7f\u7528USERID -GT\u7684\u6bcf\u65e5\u7528\u6237\u7edf\u8ba1\u6570\u636e\uff1bjson\u6620\u5c04\u3002\u4f7f\u7528\u5e38\u89c4\u5bf9\u8c61\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u5b9e\u73b0\u4e3ayyyy/mm/dd/user_id/\u6587\u4ef6\u3002json\u5bf9\u8c61\u547d\u540d\u3002\u8fd9\u9700\u8981\u6bcf\u5929\u4e3a\u6bcf\u4e2a\u7528\u6237\u4e0a\u4f20\u4e00\u4e2a\u5bf9\u8c61\u3002\n\u76f8\u53cd\uff0c\u6bcf\u5929\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2azip\u6587\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6yyyy-mm-dd.zip/user_id.json\u6765\u67e5\u627e\u7528\u6237\u7edf\u8ba1\u6570\u636e\u2014\u2014\u8fd9\u5c06\u66f4\u5feb\u5730\u4e0a\u4f20\u3001\u7ef4\u62a4\u5e76\u5360\u7528\u66f4\u5c11\u7684\u7a7a\u95f4\u2014\u2014\u5728\u6570\u636e\u6e56\u4e2d\u5de5\u4f5c\u65f6\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u597d\u4e8b\u3002\n\u5982\u679c\u6709\u5f88\u591a\u7528\u6237\uff0c\u4f7f\u7528\u786e\u5b9a\u6027\u62c6\u5206\u65b9\u6cd5\uff0c\u6bd4\u5982yyyy-mm-dd/user0-10000\u3002zip/user_id.json\u5c06\u5141\u8bb8\u5c06\u5176\u6269\u5c55\u5230\u6570\u5341\u4ebf\u7528\u6237\uff0c\u51cf\u5c115\u4e2a\u6570\u91cf\u7ea7\u7684\u5bf9\u8c61\u3002\n\u4e0b\u8f7dMinIO\uff0c\u5e76\u5229\u7528\u4eceZIP\u6587\u4ef6\u4e2d\u5217\u51fa\u548c\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6\u7684\u529f\u80fd\u3002\u5982\u679c\u60a8\u6709\u4efb\u4f55\u95ee\u9898\u6216\u60f3\u544a\u8bc9\u6211\u4eec\u60a8\u6b63\u5728\u4f7f\u7528MinIO\u6784\u5efa\u7684\u4f18\u79c0\u5e94\u7528\u7a0b\u5e8f\uff0c\u8bf7\u70b9\u51fb\u6211\u4eechello@min.io\u6216\u8005\u52a0\u5165Slack\u793e\u533a\u3002", "note_en": "MinIO RELEASE.2021-06-14 added an \u201cs3zip\u201d extension that allows downloading individual files from ZIP archives. We will explore the use cases where this is a benefit compared to downloading regular objects, and explain how to use it.\n  We have previously described how MinIO internally optimizes  small objects. However, internally storing individual objects still imposes file system limitations such as slower listing and minimum block size.\n Through feedback we found that in certain situations it would be desirable to be able to reference small data segments without the full feature set of individual objects. To make this as easy as possible to use, we added ZIP file indexing.\n This feature allows retrieving individual files within ZIP files uploaded to MinIO. With this feature it is possible to upload a single ZIP file that contains thousands of files. A  MinIO indexing tool then ensures that accessing a file inside a ZIP file can be done with the same performance as individual objects. All of this is done transparently.\n  ZIP files are commonly known and well supported across most development platforms, as well as having well-established tools available. In most languages the ZIP format allows for streaming writes, so it doesn\u2019t require all data to be in memory when creating the archive. We choose a common format over a custom built format since it provides the functionality we need. Other formats like TAR do not fulfill the requirements for this, so we do not expect to implement other formats.\n  Our main target for this feature is to allow fast upload of many small pieces of data that do not change and allow fast download of individual files. This also has the added benefit of taking up much less space since all data is stored as a single file.\n A prime usage example could be weekly/daily/hourly reports that need to be accessed on a per user basis. You might have a data lake where you store ZIP archives of files to be analyzed. File names would then be the ID on which you would like to perform the lookup. With regular objects this would create one object per user per interval. Instead, all content for a given time interval can be uploaded and individual records can be accessed by the ID.\n It is not possible to update individual files inside the ZIP file. Therefore this should only be used for data that isn\u2019t expected to change. If the ZIP file is overwritten, all files are replaced atomically at the same time. \u00a0If you know that you will be modifying the contents of the ZIP file, then don\u2019t use a ZIP file, save the files as regular objects instead.\n There is no individual metadata for files inside a zip, only name and size. Modification time is inherited from the parent ZIP object. This means that  ILM rules and  retention are applied to the ZIP object as a whole.\n ZIP compression is secondary, and generally it is recommended to just leave files inside ZIP files uncompressed. This can be set when compressing the files. Individual files can be stored uncompressed or compressed with the deflate or zstandard.\n The size in bytes of the archive has little impact on the responsiveness of retrieving individual files. To keep individual requests responsive it is recommended to keep each zip file below 100,000 individual files. If you plan to go above this, we recommend splitting your input into several files, targeting 10,000 files in each.\n Benchmarks show that for zip files with 10,000 files, each access takes roughly 1ms. This scales linearly, so with 100,000 files an additional 10ms should be expected per operation, assuming CPU resources are available.\n  Working with indexed ZIP files is made possible by an extension to the existing S3 API. To ensure there can be no unintended side-effects, all use is guarded by headers that must be present to enable the new functionality. To enable the extension the header  x-minio-extract must have the value  true set.\n The following API request types support the s3zip extensions:  HeadObject,  GetObject and  ListObjectsV2.This will allow listing files within archives and retrieving them.\n Files inside zip files are referenced as  /prefix/file.zip/path-in-zip/file.ext. Zip files must have the zip extension and the path within the zip file is used to reference each file.\n For example, to list all files in a file uploaded as  prefix/file.zip issue a  GetObject with prefix  prefix/file.zip/. Note how the forward slash indicates content inside the zip file. Prefixes, markers and separators operate as regular ListObjectsV2 calls.\n   Uploading files is done through regular functions. No special action is needed for uploading files, except that the object key must end with  .zip.\n To trigger immediate indexing on upload, it is possible to trigger it by setting the \u00a0  x-minio-extract header to  true. If it is not set, the index will be created by the first request mentioned above that retrieves or lists files inside the zip.\n Zip64 (zip files above 4GB) is fully supported. Zip files with zip-based encryption are not supported.\n Unicode names are supported, and should use UTF-8 encoding. However, there do exist non-compliant compressors that rely on local codepages to work. If you are planning to use Unicode names check if file names are decoded correctly. It is generally recommended to stick to the general  object key naming guidelines.\n    To list the content of a zip file, send a prefix containing the zip file as a prefix and the header described above. For example  prefix/file.zip/ will list all content of the zip file with the key  prefix/file.zip. Regular ListObjectV2 parameters like additional prefix, markers and separators are supported.\n For example, listing with prefix =  prefix/file.zip/folder/, delimiter =  / will list only content within the folder specified.\n To keep the complexity low a few limitations are in place: ListObjectV2 must be used. Only a single zip file can be listed per call and only the most recent version of a zip file can be listed.\n   As mentioned above, accessing individual files requires a header and a path to indicate the zip file and the file within it. To get the path, ListObjectsV2 can be used. The object name can also be constructed by manually combining the object path with the path inside the zip file.\n   Individual files are handled as single requests. This will produce single files at the same speed as separate objects. If you need to access the content of many files within an archive it will be faster to download the entire ZIP archive and process it locally.\n   mc RELEASE.2022-02-16 adds support for accessing files inside zip files remotely. Specifically, the ls, cp and cat commands support operations where the source is a remote zip file. These commands have a \u201c--zip\u201d parameter to indicate that you intend the operation to run on zip files.\n            This will only work when the remote is a MinIO server running in distributed mode.\n  The s3zip feature allows you to store many small individual files in a compact way. This can be a good alternative to many individual objects, which will reduce the storage overhead and processing time for ILM and other operations.\n As with any extension, the usual caveats apply. While it is technically possible to implement a local index and use HTTP range requests to provide similar functionality without any server side support, it would require a considerable effort, and the result would not be as streamlined as what we\u2019ve accomplished with our extension.\n For archival purposes this extension provides a much more space and bandwidth efficient method for retrieving rarely accessed archived data through the mc command interface. This can be an effective method for storing log data that you only occasionally need to access. It can be used for fast upload of multiple data segments that need fast access by an ID.\n Consider daily user statistics with a userid -&gt; json mapping. When using regular objects this could be implemented as a  yyyy/mm/dd/user_id/file.json object naming. This would require uploading an object for each user each day.\n Instead a single zip file could be created per day, and user stats could be looked up by reading  yyyy-mm-dd.zip/user_id.json - which will be both faster to upload, maintain and take up less space - all good things when working in a data lake.\n If there are many users, using a deterministic splitting approach, like  yyyy-mm-dd/user0-10000.zip/user_id.json would allow this to scale to billions of users, with 5 orders of magnitude less objects.\n  Download MinIO and take advantage of the ability to list and download individual files from ZIP files. If you have any questions or want to tell us about the great apps you\u2019re building using MinIO, ping us on hello@min.io or join the  Slack community.", "posttime": "2022-02-17 13:55:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6587\u4ef6,file,zip", "title": "MinIO\u4e2d\u7684\u5c0f\u6587\u4ef6\u6863\u6848", "title_en": "Small File Archives in MinIO", "transed": 1, "url": "https://blog.min.io/small-file-archives/", "via": "", "real_tags": ["\u6587\u4ef6", "file", "zip"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073840, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6839\u636e\u4e0a\u5468\u53d1\u5e03\u7684\u4e00\u4efd\u610f\u5411\u901a\u77e5\uff0c\u80fd\u6e90\u90e8\uff08DOE\uff09\u5c06\u5728\u4e00\u9879\u65e8\u5728\u9632\u6b62\u6838\u7535\u7ad9\u5173\u95ed\u7684\u8ba1\u5212\u4e0a\u82b1\u8d3960\u4ebf\u7f8e\u5143\u3002\n\u8be5\u90e8\u95e8&#39\uff1b\u7f8e\u56fd\u7684\u6c11\u7528\u6838\u4fe1\u8d37\u8ba1\u5212\u7531\u4e24\u515a\u4e8e11\u6708\u7b7e\u7f72\u6210\u4e3a\u6cd5\u5f8b\u7684\u300a\u57fa\u7840\u8bbe\u65bd\u6295\u8d44\u548c\u5c31\u4e1a\u6cd5\u6848\u300b\u63d0\u4f9b\u8d44\u91d1\u652f\u6301\u3002\u8be5\u8ba1\u5212\u5c06\u5141\u8bb8\u7f8e\u56fd\u5546\u4e1a\u6838\u53cd\u5e94\u5806\u7684\u6240\u6709\u8005\u548c\u8fd0\u8425\u5546\u4ee5\u7ade\u4e89\u6027\u65b9\u5f0f\u7ade\u8d2d\u8d37\u6b3e\uff0c\u4ee5\u5e2e\u52a9\u4ed6\u4eec\u5728\u7ecf\u6d4e\u56f0\u96be\u7684\u60c5\u51b5\u4e0b\u7ee7\u7eed\u8fd0\u8425\u3002\n\u7533\u8bf7\u8005\u5fc5\u987b\u8bc1\u660e\u4ed6\u4eec\u7684\u53cd\u5e94\u5806\u56e0\u7ecf\u6d4e\u539f\u56e0\u800c\u9762\u4e34\u5173\u95ed\uff0c\u5e76\u4e14\u7531\u4e8e\u5176\u4ed6\u6765\u6e90\u7684\u7535\u529b\u751f\u4ea7\uff0c\u5173\u95ed\u53cd\u5e94\u5806\u5c06\u5bfc\u81f4\u7a7a\u6c14\u6c61\u67d3\u589e\u52a0\u3002\u7533\u8bf7\u8005\u8fd8\u5fc5\u987b\u83b7\u5f97\u7f8e\u56fd\u6838\u7ba1\u7406\u59d4\u5458\u4f1a\uff08U.S.Nuclear Regulatory Commission\uff09\u7684\u5b89\u5168\u8fd0\u884c\u6279\u51c6\u3002\n\u7f8e\u56fd93\u5ea7\u6838\u53cd\u5e94\u5806\u7684\u8230\u961f\u76ee\u524d\u63d0\u4f9b\u4e8652%\u7684\u56fd\u571f\u9762\u79ef&#39\uff1b\u6839\u636e\u80fd\u6e90\u90e8\u7684\u6570\u636e\uff0c\u8fd9\u662f\u6e05\u6d01\u7684\u7535\u529b\u3002\u7136\u800c\uff0c\u6700\u540e\u4e24\u4e2a\u6295\u5165\u4f7f\u7528\u7684\u53cd\u5e94\u5806\u2014\u2014\u7530\u7eb3\u897f\u5dde\u7684\u74e6\u8328\u5df41\u53f7\u548c2\u53f7\u673a\u7ec4\u2014\u2014\u5206\u522b\u4e8e1996\u5e74\u548c2016\u5e74\u4e0a\u7ebf\u3002\u76ee\u524d\u6b63\u5728\u5efa\u8bbe\u7684\u552f\u4e00\u4e00\u5ea7\u5de5\u5382\u2014\u2014\u4f4d\u4e8e\u4f50\u6cbb\u4e9a\u5dde\u7684Vogtle\u5de5\u5382\u2014\u2014\u843d\u540e\u4e8e\u8ba1\u5212\u6570\u5e74\uff0c\u6bd4\u539f\u9884\u7b97\u9ad8\u51fa\u7ea6140\u4ebf\u7f8e\u5143\u3002\u81ea2013\u5e74\u4ee5\u6765\uff0c\u7ecf\u6d4e\u56e0\u7d20\u5bfc\u81f412\u5ea7\u5546\u4e1a\u53cd\u5e94\u5806\u63d0\u524d\u5173\u95ed\u3002\nH.a.\u548c#34\u7684\u67e5\u5c14\u65af\u00b7\u6885\u68ee\uff08Charles Mason\uff09\u8bf4\uff0c\u8fd0\u884c\u53cd\u5e94\u5806\u7684\u9ad8\u8fd0\u884c\u548c\u7ef4\u62a4\u6210\u672c\u53ef\u80fd\u4f1a\u4f7f\u5b83\u4eec\u5728\u67d0\u4e9b\u5e02\u573a\u53d8\u5f97\u4e0d\u7ecf\u6d4e\uff1b\u6234\u592b&#34\uff1b\u662f\u7684\uff0cJr. Chair\u5728\u6000\u4fc4\u660e\u5927\u5b66\u7684\u77f3\u6cb9\u548c\u5929\u7136\u6c14\u7ecf\u6d4e\u5b66\u7814\u7a76\u6240\uff0c\u4ed6\u57282016\u5bf9\u80fd\u6e90\u90e8\u7684\u6838\u80fd\u7ecf\u6d4e\u5b66\u8fdb\u884c\u4e86\u7814\u7a76\u3002\n\u867d\u7136\u53cd\u5e94\u5806\u4f9b\u7535\u7684\u53ef\u9760\u6027\u548c24\u5c0f\u65f6\u53ef\u7528\u6027\u662f\u5176\u5438\u5f15\u529b\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u53d1\u7535\u5382\u65e0\u6cd5\u8f7b\u6613\u5173\u95ed\u548c\u91cd\u542f\u8fd9\u4e00\u4e8b\u5b9e\u610f\u5473\u7740\uff0c\u5f53\u5e02\u573a\u4f9b\u5e94\u5145\u8db3\u65f6\uff0c\u5b83\u4eec\u6709\u65f6\u4f1a\u4e8f\u635f\u8fd0\u884c\u3002\u4ed6\u8bf4\uff0c\u8fd9\u4f7f\u5f97\u80fd\u6e90\u90e8\u7684\u652f\u6301\u8ba1\u5212\u6210\u4e3a\u8ba9\u4e00\u4e9b\u6838\u7535\u7ad9\u4f5c\u4e3a\u65e0\u78b3\u8d44\u6e90\u4fdd\u6301\u5728\u7ebf\u7684\u552f\u4e00\u9014\u5f84\u4e4b\u4e00\u3002\n&#34;\u6838\u80fd\u63d0\u4f9b\u4e86\u5927\u91cf\u65e0\u78b3\u7535\u529b\uff0c\u6211\u4eec\u4ece\u6765\u6ca1\u6709\u5956\u52b1\u8fc7\u5b83\uff0c&#34\uff1b\u6885\u68ee\u8bf4&#34;\u5982\u679c\u4f60\u60f3\u5728\u6211\u4eec\u5411\u53ef\u518d\u751f\u80fd\u6e90\u8fc7\u6e21\u7684\u8fc7\u7a0b\u4e2d\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u4e8b\u60c5\u548c\u540e\u76fe\uff0c\u4f60&#39\uff1b\u6211\u4eec\u9700\u8981\u6838\u80fd\uff0c\u5b83\u6bd4\u53ef\u518d\u751f\u80fd\u6e90\u4ea7\u54c1\u7ec4\u5408\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u4ea7\u54c1\u90fd\u66f4\u5bb9\u6613\u83b7\u5f97&#34;\n\u5c3d\u7ba1\u4e00\u4e9b\u73af\u4fdd\u4eba\u58eb\u5bf9\u6838\u80fd\u7684\u5b89\u5168\u6027\u548c\u6210\u672c\u63d0\u51fa\u4e86\u62c5\u5fe7\uff0c\u4f46\u62dc\u767b\u653f\u5e9c\u5df2\u627f\u8bfa\u5c06\u73b0\u6709\u7684\u6838\u8230\u961f\u4f5c\u4e3a\u6e05\u6d01\u80fd\u6e90\u8f6c\u578b\u7684\u4e00\u90e8\u5206\u3002\u53c2\u8bae\u9662\u80fd\u6e90\u548c\u81ea\u7136\u8d44\u6e90\u59d4\u5458\u4f1a\u4e3b\u5e2d\u3001\u6838\u8ba1\u5212\u652f\u6301\u8005\u3001\u5f17\u5409\u5c3c\u4e9a\u5dde\u6c11\u4e3b\u515a\u53c2\u8bae\u5458\u4e54\u00b7\u6885\u94a6\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4&#34\uff1b\u786e\u4fdd\u6211\u56fd\u56fd\u5185\u6838\u7535\u5382\u7684\u6301\u7eed\u8fd0\u884c\u5bf9\u4e8e\u5b9e\u73b0\u51cf\u6392\u76ee\u6807\u3001\u540c\u65f6\u4fdd\u6301\u53ef\u9760\u6027\u81f3\u5173\u91cd\u8981&#34;\n\u7f8e\u56fd\u80fd\u6e90\u90e8\u5468\u4e94\u53d1\u5e03\u7684\u610f\u5411\u901a\u77e5\u548c\u4fe1\u606f\u8bf7\u6c42\u5c06\u5e2e\u52a9\u7f8e\u56fd\u80fd\u6e90\u90e8\u66f4\u591a\u5730\u4e86\u89e3\u8be5\u9879\u76ee\u548c\u8ba4\u8bc1\u8fc7\u7a0b\u7684\u4f18\u5148\u4e8b\u9879\uff0c\u7f8e\u56fd\u653f\u5e9c\u9884\u8ba1\u5c06\u5728\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u542f\u52a8\u8be5\u9879\u76ee\u548c\u8ba4\u8bc1\u8fc7\u7a0b\u3002\n\u6838\u80fd\u7814\u7a76\u6240\uff08NEI\uff09\u653f\u7b56\u5236\u5b9a\u9ad8\u7ea7\u4e3b\u7ba1\u9a6c\u7279\u00b7\u514b\u7f57\u624e\u7279\uff08Matt Crozat\uff09\u8868\u793a\uff0c\u8be5\u884c\u4e1a\u76ee\u524d\u5904\u4e8e&#34\uff1b\u9f13\u52b1&#34\uff1b\u901a\u8fc7\u5efa\u7acb\u4fe1\u8d37\u8ba1\u5212\uff0c\u4f46\u4ecd\u5728\u63a8\u52a8\u66f4\u6301\u4e45\u7684\u7ecf\u6d4e\u652f\u6301\u3002\u6c11\u4e3b\u515a\u4eba\u63d0\u51fa\u4e86\u4e00\u9879\u4e3a\u671f10\u5e74\u7684\u751f\u4ea7\u7a0e\u51cf\u514d\uff08PTC\uff09\uff0c\u5c06\u5728\u300a\u91cd\u5efa\u66f4\u597d\u6cd5\u6848\u300b\uff08Build Back Better Act\uff09\u8c08\u5224\u4e2d\u652f\u6301\u6838\u7535\u7ad9\uff0cNEI\u6b63\u5728\u5bfb\u6c42\u989d\u5916\u7684\u7a0e\u6536\u51cf\u514d\u5de5\u5177\u3002\n&#34;PTC\u7684\u900f\u660e\u6027\u4e3a\u6838\u7535\u7ad9\u6240\u6709\u8005\u63d0\u4f9b\u4e86\u66f4\u5927\u7684\u786e\u5b9a\u6027\uff0c\u5e76\u5c06\u6210\u4e3a\u5b9e\u73b0\u6fc0\u52b1\u6301\u7eed\u8fd0\u884c\u76ee\u6807\u7684\u66f4\u6709\u6548\u673a\u5236\uff0c34\uff1b\u514b\u7f57\u624e\u7279\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4&#34;\u5982\u679cPTC\u5f97\u4ee5\u5b9e\u65bd\uff0c\u6211\u4eec\u9884\u8ba1DOE\u6c11\u7528\u6838\u4fe1\u8d37\u8ba1\u5212\u5c06\u6210\u4e3a\u4e00\u4e2a\u540e\u76fe\uff0c\u5176\u5e94\u7528\u8303\u56f4\u5c06\u6bd4DOE\u8ba1\u5212\u662f\u8054\u90a6\u652f\u6301\u7684\u552f\u4e00\u5f62\u5f0f\u66f4\u4e3a\u6709\u9650&#34;", "note_en": "The Department of Energy (DOE) will spend          $6 billion on a program       designed to keep nuclear power plants from closing, according to a notice of intent published last week.\n The department&#39;s Civil Nuclear Credit Program is backed by funding from the bipartisan          Infrastructure Investment and Jobs Act       signed into law in November. The program will allow owners and operators of commercial U.S. nuclear reactors to competitively bid on credits to help continue their operations amid economic hardship.\n Applicants will have to prove that their reactor faces closure for economic reasons and that closing the reactor would lead to an increase in air pollution because of power production from other sources. Applicants must also be approved by the U.S. Nuclear Regulatory Commission for safe operation.\n    The U.S. fleet of 93 nuclear reactors currently provides 52% of the nation&#39;s clean electricity, according to DOE figures. However, the          last two reactors to enter service       \u2013 Watts Bar Units 1 and 2 in Tennessee \u2013 came online in 1996 and 2016, respectively. The only one currently under construction \u2013 the          Vogtle plant in Georgia       \u2013 is years behind schedule and roughly $14 billion over the original budget. Since 2013, economic factors have led to the early closure of 12 commercial reactors.\n The high operating and maintenance costs of running a reactor can make them uneconomical in some markets, said  Charles Mason, the H. A. &#34;Dave&#34; True, Jr. Chair in Petroleum and Natural Gas Economics at the University of Wyoming who          worked on a review       of the economics of nuclear power for DOE in 2016.\n While the reliability and 24-hour availability of power from a reactor is part of their appeal, the fact that the plants cannot easily be shut down and restarted means that they sometimes operate at a loss when there is ample supply on the market. That, he said, makes the DOE support program one of the only ways to keep some nuclear plants online as a carbon-free resource.\n &#34;Nuclear power provides substantial amounts of carbon-free electricity and we have never rewarded it,&#34; Mason said. &#34;If you want to have a sure thing and a backstop as we transition to renewable energy, you&#39;ll need nuclear, which is more readily available than anything else in the renewable portfolio.&#34;\n Although some environmentalists have raised safety and cost concerns with nuclear power, the Biden administration has          committed to the existing nuclear fleet       as part of the clean energy transition. Sen. Joe Machin, D-W.Va., chairman of the Senate Energy and Natural Resources Committee and a backer of the nuclear program, said in a statement that &#34;ensuring the continued operation of our domestic nuclear fleet is essential to achieving our emission reduction goals while also maintaining reliability.&#34;\n The Notice of Intent and Request for Information released by the DOE Friday will help the department learn more about priorities for the program and certification process, which the administration anticipates launching later this year.\n Matt Crozat, senior director of policy development for the Nuclear Energy Institute (NEI), said the industry is &#34;encouraged&#34; by the creation of the credit program, but is still pushing for more permanent economic support. Democrats included a 10-year production tax credit (PTC)\u00a0that would support nuclear plants in the          Build Back Better Act       negotiations and NEI is seeking an additional vehicle for that tax credit.\n &#34;The transparent nature of the PTC provides greater certainty to nuclear plant owners and will be a more effective mechanism to accomplish the goal of incentivizing continuing operation,&#34; Crozat said in an email. &#34;If the PTC were to be enacted, we would expect the DOE civil nuclear credit program to serve as a backstop with more limited applications than if the DOE program were the only form of federal support.&#34;", "posttime": "2022-02-17 13:53:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u6838\u53cd\u5e94\u5806,nuclear,\u53cd\u5e94\u5806", "title": "\u7f8e\u56fd\u80fd\u6e90\u90e8\u5c06\u63d0\u4f9b60\u4ebf\u7f8e\u5143\uff0c\u8ba9\u82e6\u82e6\u6323\u624e\u7684\u6838\u53cd\u5e94\u5806\u4fdd\u6301\u5728\u7ebf", "title_en": "US DOE to offer $6B to keep struggling nuclear reactors online", "transed": 1, "url": "https://www.utilitydive.com/news/doe-to-offer-6-billion-to-keep-struggling-nuclear-reactors-online/618919/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6838\u53cd\u5e94\u5806", "nuclear", "\u53cd\u5e94\u5806"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073839, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Lorinda Cherry\u4e8e1969\u5e74\u4ece\u53f2\u8482\u6587\u65af\u7406\u5de5\u5b66\u9662\u83b7\u5f97\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u7855\u58eb\u5b66\u4f4d\uff0c\u5f53\u65f6\u8ba1\u7b97\u673a\u79d1\u5b66\u8bfe\u7a0b\u66f4\u591a\u7684\u662f\u4e00\u4e2a\u4e13\u4e1a\u6570\u5b66\u5b66\u4f4d\uff0c\u6709\u4e00\u4e9b\u7f16\u7a0b\u8bfe\u7a0b\uff0c\u4f46\u51e0\u4e4e\u6ca1\u6709\u7406\u8bba\u3002\u5979\u4f5c\u4e3aFortran\u7a0b\u5e8f\u5458\u5de5\u4f5c\u4e86\u51e0\u5e74\uff0c\u4f46\u53d1\u73b0\u7ecf\u5e38\u6839\u636e\u522b\u4eba\u7684\u60f3\u6cd5\u7f16\u5199\u7a0b\u5e8f\u201c\u975e\u5e38\u65e0\u804a\u201d\u3002\u5979\u6e34\u671b\u4ece\u4e8b\u7cfb\u7edf\u65b9\u9762\u7684\u5de5\u4f5c\uff0c\u4f46\u8fd9\u7c7b\u5de5\u4f5c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u5165\u95e8\u70b9\uff1a\u4e2a\u522b\u5b9e\u9a8c\u5ba4\u503e\u5411\u4e8e\u62db\u6536\u65b0\u6bd5\u4e1a\u751f\uff0c\u5e76\u7528\u5185\u90e8\u7f16\u7a0b\u8bed\u8a00\u5bf9\u4ed6\u4eec\u8fdb\u884c\u57f9\u8bad\uff0c\u800cCherry\u7684\u8d44\u8d28\u5df2\u7ecf\u8fc7\u9ad8\u3002\u5979\u6700\u7ec8\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u627e\u5230\u4e86\u4e00\u4e2a\u5bb6\uff0c\u5728\u90a3\u91cc\u5979\u5f00\u53d1\u4e86\u4e00\u4e2a\u65b0\u7684Unix\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5f53\u5979\u52a0\u5165\u56e2\u961f\u65f6\uff0c\u8fd9\u4e2a\u7cfb\u7edf\u8fd8\u6ca1\u6709\u8f6c\u6362\u5230C\u3002\nCherry\u5728\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u534f\u4f5c\u548c\u521b\u9020\u6027\u73af\u5883\u4e2d\u84ec\u52c3\u53d1\u5c55\uff0c\u8fd9\u9f13\u52b1\u7a0b\u5e8f\u5458\u60f3\u8c61\u548c\u6267\u884c\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u9879\u76ee\u3002\u5979\u7814\u7a76\u8fc7\u51e0\u79cd\u6709\u5f71\u54cd\u529b\u7684\u6570\u5b66\u5de5\u5177\uff0c\u5305\u62ec\u53f0\u5f0f\u8ba1\u7b97\u5668\u8bed\u8a00\uff08bc\uff09\uff1bTeX\u548ceqn\uff0c\u90fd\u662f\u7528\u4e8e\u51fa\u7248\u6570\u5b66\u516c\u5f0f\u7684\u6392\u7248\u7cfb\u7edf\uff1b\u4ee5\u53ca\u4e00\u79cd\u57fa\u4e8e\u4e09\u89d2\u7edf\u8ba1\u7684\u6570\u636e\u538b\u7f29\u65b9\u6cd5\u3002Cherry\u56de\u5fc6\u8bf4\uff0c\u5728\u8fd9\u4e9b\u5e74\u91cc\uff0c\u7535\u8111\u7684\u6f5c\u529b\u51e0\u4e4e\u6ca1\u6709\u88ab\u6316\u6398\u51fa\u6765\uff0c\u5982\u679c\u95ee\u5230\u5979\u9760\u4ec0\u4e48\u8c0b\u751f\uff0c\u5979\u4f1a\u8bf4\uff0c\u5979\u7684\u5de5\u4f5c\u662f\u201c\u770b\u770b\u6211\u80fd\u8ba9\u7535\u8111\u505a\u4ec0\u4e48\u6837\u7684\u6574\u6d01\u7684\u65b0\u4e1c\u897f\uff0c\u5728\u90a3\u4e9b\u65e5\u5b50\u91cc\uff0c\u7535\u8111\u505a\u7684\u4e0d\u591a\uff0c\u4f46\u5b83\u975e\u5e38\u6709\u8da3\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5b83\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u201d\nUnix\u7cfb\u7edf\u7684\u65e9\u671f\u4f18\u52bf\u5728\u4e8e\u5b83\u5141\u8bb8\u4e0d\u540c\u7684\u7a0b\u5e8f\u5728\u4e00\u9879\u4efb\u52a1\u4e0a\u8fdb\u884c\u534f\u4f5c\uff0cCherry\u81ea\u79f0\u201c\u5728Unix\u4e2d\u601d\u8003\u201d\uff0c\u5979\u7ecf\u5e38\u627e\u5230\u65b9\u6cd5\u5c06\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6d1e\u5bdf\u6216\u529f\u80fd\u5e94\u7528\u5230\u4e00\u4e2a\u770b\u4f3c\u65e0\u5173\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u56e0\u6b64\uff0c\u6700\u65e9\u7684\u62fc\u5199\u68c0\u67e5\u7a0b\u5e8f\u4e4b\u4e00\uff0c\u6253\u5b57\uff0c\u4ece\u5979\u7684\u7edf\u8ba1\u5de5\u4f5c\u6f14\u53d8\u800c\u6765\u3002Cherry\u7ee7\u7eed\u5e2e\u52a9\u5f00\u53d1\u5176\u4ed6\u4e0e\u6587\u672c\u76f8\u5173\u7684\u9879\u76ee\uff0c\u5305\u62ecWriter's Workbench\uff0c\u8fd9\u662f\u4e00\u4e2a\u7f16\u8f91\u7a0b\u5e8f\uff0c\u53d7\u5230\u9ad8\u4e2d\u548c\u5927\u5b66\u82f1\u8bed\u7cfb\u7684\u70ed\u70c8\u6b22\u8fce\u3002\nCherry\u5728\u751f\u6d3b\u7684\u5404\u4e2a\u9886\u57df\u90fd\u4e3a\u81ea\u5df1\u7684\u5de5\u4f5c\u627e\u5230\u4e86\u7075\u611f\uff0c\u4ece\u62c9\u529b\u8d5b\u8f66\u5230\u8bad\u72d7\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5979\u64b0\u5199\u4e86\u4e00\u7cfb\u5217\u5173\u4e8e\u4f7f\u7528\u7edf\u8ba1\u5206\u6790\u6765\u8bc4\u4f30\u72d7\u72d7\u79c0\u8bc4\u59d4\u5bf9\u67d0\u4e9b\u7279\u5f81\u6216\u54c1\u79cd\u7684\u65e0\u610f\u8bc6\u504f\u89c1\u7684\u8bba\u6587\u3002\u6b63\u5982\u5979\u5bf9\u4e00\u4f4d\u91c7\u8bbf\u8005\u6240\u8bf4\uff0c\u201c\u6211\u662f\u4e00\u540d\u4ece\u4e1a\u8005\u3002\u6211\u4f1a\u5e26\u7740\u4efb\u4f55\u501f\u53e3\u6216\u6d3b\u52a8\u53bb\u5199\u7a0b\u5e8f\u3002\u201d\nJanice Zdankus\u662f\u60e0\u666e\u4f01\u4e1a\u5ba2\u6237\u4f53\u9a8c\u548c\u8d28\u91cf\u56e2\u961f\u7684\u8d28\u91cf\u526f\u603b\u88c1\u3002\u5728\u8fd9\u4e2a\u89d2\u8272\u4e2d\uff0cJanice\u548c\u5979\u7684\u56e2\u961f\u6b63\u5728\u8f6c\u53d8\n\u9605\u8bfb\u66f4\u591a\u00bb\n\u4f0a\u51af\u662f\u8c37\u6b4c\u8ba1\u7b97\u673a\u79d1\u5b66\u6559\u80b2\u56e2\u961f\u7684\u9879\u76ee\u7ecf\u7406\u3002\u5728\u5979\u7684\u89d2\u8272\u4e2d\uff0c\u5979\u7ba1\u7406\u5916\u90e8\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\uff0c\u5e76\u4e0e\u9879\u76ee\u56e2\u961f\u5408\u4f5c\uff0c\u5982\n\u9605\u8bfb\u66f4\u591a\u00bb\n\u7c73\u65af\u8482\u662f\u535a\u5c14\u5fb7\u672c\u5730\u4eba\uff0c\u662f\u4e00\u4f4d\u7ecf\u9a8c\u4e30\u5bcc\u7684\uff08\u8ba1\u7b97\u673a\uff09\u68a6\u60f3\u5bb6\u3002\u5979\u559c\u6b22\u8ba4\u8bc6\u670b\u53cb\u548c\u7ed3\u8bc6\u65b0\u670b\u53cb\u3002\u5979\u662f\u4e00\u4e2a\u70ed\u60c5\u7684\u65c5\u884c\u8005\uff0c\u800c\u5730\u56fe\u662f\n\u9605\u8bfb\u66f4\u591a\u00bb\nLisa A. Flores\u662f\u79d1\u7f57\u62c9\u591a\u5927\u5b66\u4f20\u64ad\u7cfb\u7684\u526f\u6559\u6388\u3002\u5979\u62e5\u6709\u7f8e\u56fd\u8bed\u8a00\u4ea4\u6d41\u535a\u58eb\u5b66\u4f4d\n\u9605\u8bfb\u66f4\u591a\u00bb", "note_en": "Lorinda Cherry received her Master\u2019s in Computer Science from Stevens Institute of Technology in 1969, at a time when the computer science program was more of a specialized math degree, with some programming courses but little theory. She worked for a few years as a Fortran programmer, but found it \u201cvery boring\u201d to constantly write programs based on someone else\u2019s ideas. She yearned to work on systems, but there were few entry points for such jobs: individual labs tended to recruit new graduates and train them in their in-house programming language, and Cherry was already overqualified. She eventually found a home at Bell Labs, where she worked on the nascent Unix operating system, which had not yet made the switch to C when she joined the team.\n Cherry thrived in the collaborative and creative environment of Bell Labs, which encouraged programmers to imagine and execute projects that interested them. She worked on several influential mathematical tools, including a desk-calculator language (bc); TeX and eqn, both typesetting systems for publishing mathematical formulae; and a method of data compression based on trigram statistics, among others. In these years, Cherry recalls, the potential of the computer had barely been tapped, and if asked what she did for a living, she would say that her job was to \u201csee what kind of neat new things I can make the computer do, and in those days the computer wasn\u2019t doing a lot, but it was super interesting and there was a lot more stuff you could make it do.\u201d\n An early strength of the Unix system was the way it allowed different programs to cooperate on a task, and Cherry, who described herself as \u201cthinking in Unix,\u201d often found ways to apply an insight or feature from one application to a seemingly unrelated context. Thus, one of the first spell-check programs, typo, evolved from her statistics work. Cherry went on to help develop other text-related projects, including Writer\u2019s Workbench, an editing program that was eagerly embraced by high school and college English departments.\n Cherry found inspiration for her work in every area of her life, from rally car racing to dog training. In fact, she authored a series of papers on using statistical analysis to evaluate the unconscious bias of dog show judges toward certain characteristics or breeds. As she told one interviewer, \u201cI\u2019m a practitioner. I\u2019m off to write programs with any excuse or activity.\u201d\n  Janice Zdankus is Vice President of Quality in Hewlett Packard Enterprise\u2019s Customer Experience and Quality team.\u00a0 In this role, Janice and her team are transforming\n  \t\t\t\tRead More \u00bb\n  Yvonne is a Program Manager on Google\u2019s Computer Science Education team. In her role she manages external partnerships and works with program teams such as\n  \t\t\t\tRead More \u00bb\n  A Boulder native, Misty is an experienced (computer) visionary. She enjoys recognizing friends and meeting new people. She is an ardent traveler, and mapping is\n  \t\t\t\tRead More \u00bb\n  Lisa A. Flores is Associate Professor in the Department of Communication at the University of Colorado.\u00a0 She has a Ph.D. in Speech Communication from the\n  \t\t\t\tRead More \u00bb", "posttime": "2022-02-17 13:50:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cherry,\u56e2\u961f", "title": "Lorinda Cherry\uff0c\u300a\u54e5\u4f26\u6bd4\u4e9a\u7279\u533a\uff0c\u516c\u5143\u524d\uff0ceqn\u300b\u7684\u4f5c\u8005\u53bb\u4e16", "title_en": "Lorinda Cherry, author of dc, bc, eqn has died", "transed": 1, "url": "https://ncwit.org/profile/lorinda-cherry/", "via": "", "real_tags": ["cherry", "\u56e2\u961f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073838, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u547d\u4ee4\u6253\u5f00\u4e00\u4e2aiTerm2\u7a97\u53e3\uff0c\u5e76\u901a\u8fc7ssh\u8fde\u63a5\u5230\u62c6\u5206\u7a97\u683c\u4f1a\u8bdd\u4e2d\u7684\u6bcf\u4e2a\u6307\u5b9a\u4e3b\u673a\uff0c\u901a\u8fc7iTerm2\u548c#39\u5c06\u4efb\u4f55\u952e\u5165\u6216\u7c98\u8d34\u7684\u6587\u672c\u590d\u5236\u5230\u6240\u6709\u7a97\u683c\uff1bs&#39\uff1b\u5e7f\u64ad&#39\uff1b\u7279\u8272iTerm2\u548c#39\uff1bs\u7684\u62c6\u5206\u7a97\u683c\u63a7\u4ef6\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff0c\u56e0\u6b64\u6bcf\u4e2a\u7a97\u683c\u53ef\u4ee5\u5207\u6362\u5e7f\u64ad\u8f93\u5165\uff0c\u4f1a\u8bdd\u53ef\u4ee5\u91cd\u65b0\u542f\u52a8\uff0c\u7b49\u7b49\u3002\n\u514b\u9686\u6b64repo\uff08\u6216\u8005\u53ea\u4e0b\u8f7d&#39\uff1bcsshi&#39\uff1b\u6587\u4ef6\uff09\uff0c\u4f7fcsshi\u6587\u4ef6\u53ef\u6267\u884c\uff0c\u5e76\u53ef\u80fd\u5c06\u5176\u590d\u5236\u6216\u94fe\u63a5\u5230$PATH\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002\n\u7528\u6cd5\uff1acsshi[-h][l\u7528\u6237\u540d][p\u7aef\u53e3][d][J\u8df3\u7ebf\u4e3b\u673a][o\u9009\u9879][C\u5217]\u76ee\u7684\u5730[\u76ee\u7684\u5730\u2026]\u5728iTerm2\u7ec8\u7aef\u4e2d\u540c\u65f6\u8fd0\u884c\u591a\u4e2assh\u8fde\u63a5\u3002\u4f4d\u7f6e\u53c2\u6570\uff1a\u76ee\u6807[user@]\u4e3b\u673a[\uff1a\u7aef\u53e3]ssh\u670d\u52a1\u5668\u89c4\u8303\u3002\u5728IPv6 IP\u5730\u5740\u5468\u56f4\u4f7f\u7528\u65b9\u62ec\u53f7\u3002\u53ef\u9009\u53c2\u6570\uff1a-h\uff0c--help\u663e\u793a\u6b64\u5e2e\u52a9\u6d88\u606f\u5e76\u9000\u51fa-l USERNAME\uff0c--USERNAME\u767b\u5f55USERNAME\uff0c\u901a\u8fc7\u6307\u5b9a&#39\u8986\u76d6\u6bcf\u4e2a\u4e3b\u673a\uff1buser@host&#39; -p PORT\uff0c--PORT-PORT-PORT-ssh-server-PORT\uff0c\u901a\u8fc7\u6307\u5b9a&#39\uff0c\u6bcf\u4e2a\u4e3b\u673a\u8986\u76d6\uff1b\u4e3b\u673a\uff1a\u7aef\u53e3-d\uff0c--debug\u6253\u5f00\u8c03\u8bd5-J JUMPHOST\uff0c--jump JUMPHOST ProxyJump\u4e3b\u673a\u89c4\u8303\uff0c\u5982[user@]JUMPHOST[\uff1aport]-o\u9009\u9879\uff0c--OPTIONS\u539f\u59cbssh\u9009\u9879\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982&#39-\u6211~/\u3002ssh/id_-ansible\u548c#39-C\u5217\uff0c--\u5217\u6700\u5927\u5217\u6570\u3002\n\u5982\u679c\u60a8\u53d1\u73b0\u81ea\u5df1\u5728\u4e00\u6b21csshi\u4f1a\u8bdd\u4e2d\u6253\u5f00\u4e86\u8bb8\u591a\u7ec8\u7aef\uff0c\u8bf7\u9009\u62e9\u4e00\u4e9b\u4f18\u5316\u5916\u58f3\u5bc6\u5ea6\u7684\u9996\u9009\u9879\uff1a\n\u7981\u7528\u7a97\u683c\u83dc\u5355\u680f\uff1aiTerm2-&gt\uff1b\u504f\u597d-&gt\uff1b\u5916\u89c2-&gt\uff1b\u7a97\u683c-&gt\uff1b\u4f7f\u7528\u62c6\u5206\u7a97\u683c\u663e\u793a\u6bcf\u4e2a\u7a97\u683c\u7684\u6807\u9898\u680f\u60a8\u4ecd\u7136\u53ef\u4ee5\u4f7f\u7528Ctrl\u952e\u800c\u4e0d\u662f\u83dc\u5355\u680f\u6c49\u5821\u56fe\u6807\u8bbf\u95ee\u6bcf\u4e2a\u7a97\u683c\u7684\u83dc\u5355\n\u4f7f\u7528\u5c0f\u5b57\u4f53\uff0c\u5982\u539f\u6765\u7684misc fixed 6x13\uff0c\u5e76\u7981\u7528\u6297\u952f\u9f7f\uff1aiTerm2-&gt\uff1b\u504f\u597d-&gt\uff1b\u7b80\u4ecb-&gt\uff1b\u6587\u672c-&gt\uff1b\u6d88\u9664\u952f\u9f7f", "note_en": "The command opens an iTerm2 Window and connects over ssh to each specified host in a  split pane session, with any text typed or pasted replicated to all panes through iTerm2&#39;s &#39;broadcast&#39; feature. iTerm2&#39;s split pane controls are available as normal, so broadcast input can be toggled per-pane, sessions can be restarted, etc.\n   Clone this repo (or just download the &#39;csshi&#39; file), make the csshi file executable, and maybe copy or link it to somewhere in your $PATH.\n  usage: csshi [-h] [-l USERNAME] [-p PORT] [-d] [-J JUMPHOST] [-o OPTIONS] [-C COLUMNS] destination [destination ...]Run multiple ssh connections concurrently in an iTerm2 terminal.positional arguments: destination [user@]host[:port] ssh server specification. Use square brackets around IPv6 IP adresses.optional arguments: -h, --help show this help message and exit -l USERNAME, --username USERNAME Login username, overridden per-host by specifying &#39;user@host&#39; -p PORT, --port PORT ssh server port, overridden per-host by specifying &#39;host:port -d, --debug Turn on debugging -J JUMPHOST, --jump JUMPHOST ProxyJump host specification, like [user@]jumphost[:port] -o OPTIONS, --options OPTIONS Raw ssh options string, e.g. &#39;-i ~/.ssh/id_ansible&#39; -C COLUMNS, --columns COLUMNS Maximum number of columns.\n  Some preferences to optimise for shell density if you find yourself opening a lot of terminals in one csshi session:\n Disable pane menubars:  iTerm2 -&gt;  Preferences... -&gt;  Appearance -&gt;  Panes -&gt;  Show per-pane title bar with split panes You can still access the menu for each pane with Ctrl-click instead of the menubar burger icon\n Use a small font, like the original  misc-fixed 6x13, and disable antialiasing:  iTerm2 -&gt;  Preferences... -&gt;  Profiles -&gt;  Text -&gt;  Anti-aliased", "posttime": "2022-02-17 13:49:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "iterm2,clusterssh,\u7a97\u683c", "title": "iTerm2\u7684ClusterSSH", "title_en": "ClusterSSH for iTerm2", "transed": 1, "url": "https://github.com/ilikejam/csshi", "via": "", "real_tags": ["iterm2", "\u7a97\u683c"]}]