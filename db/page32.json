[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073868, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2022\u5e741\u670822\u65e5\u8fd9\u662f\u6211\u7684\u60ef\u4f8b\uff1a\u6bcf\u6b21\u6211\u8fdb\u5165\u4e00\u5bb6\u4e8c\u624b\u4e66\u5e97\uff0c\u6211\u90fd\u4f1a\u76f4\u63a5\u53bb\u7406\u79d1\uff0c\u5bfb\u627e\u65e7\u7684\u7535\u8111\u624b\u518c\u3002\u5b83\u4eec\u5f88\u96be\u627e\u5230\uff0c\u56e0\u4e3a\u4e00\u65e6\u5b83\u4eec\u505c\u6b62\u4f7f\u7528\u7279\u5b9a\u7684\u8bbe\u5907\u6216\u8f6f\u4ef6\uff0c\u4e3b\u4eba\u5f80\u5f80\u4f1a\u628a\u5b83\u4eec\u6254\u6389\u3002\u624b\u518c\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\u4e5f\u4e0d\u662f\u6700\u5438\u5f15\u4eba\u7684\u8bfb\u7269\uff0c\u8fd9\u589e\u52a0\u4e86\u624b\u518c\u7684\u7a00\u6709\u6027\uff1b\u8eba\u5728\u6d77\u6ee9\u4e0a\u65f6\uff0c\u5f88\u5c11\u6709\u4eba\u613f\u610f\u9605\u8bfbIBM AS/400\u7684\u65e7\u624b\u518c\u3002\n\u7136\u800c\uff0c\u628a\u65e7\u624b\u518c\u5f53\u4f5c\u65e0\u7528\u7684\u7eb8\u5806\uff0c\u8fd9\u5bf9\u5b83\u4eec\u662f\u4e00\u79cd\u4e25\u91cd\u7684\u4f24\u5bb3\u3002\u8bda\u7136\uff0c\u5b83\u4eec\u4e2d\u7684\u8bb8\u591a\u90fd\u5f88\u7cdf\u7cd5\u6216\u5b8c\u5168\u65e0\u804a\uff0c\u4f46\u6709\u4e9b\u5df2\u7ecf\u6210\u719f\uff0c\u5df2\u7ecf\u88ab\u9057\u5fd8\u4e86\u6280\u672f\u77e5\u8bc6\u548c\u9ad8\u8d28\u91cf\u7684\u8bbe\u8ba1\u3002\u65e7\u624b\u518c\u7684\u4f5c\u8005\u901a\u5e38\u6bd4\u73b0\u5728\u7684\u79d1\u6280\u4f5c\u5bb6\u4eab\u6709\u66f4\u591a\u7684\u7f16\u8f91\u8d44\u6e90\uff0c\u5e76\u4e14\u66f4\u52a0\u8c28\u614e\u5730\u7f16\u5199\u624b\u518c\u548c\u6307\u5357\uff0c\u56e0\u4e3a\u4ed6\u4eec\u65e0\u6cd5\u627f\u53d7\u51fa\u7248\u65f6\u51fa\u73b0\u7684\u4e25\u91cd\u9519\u8bef\u3002\nZX Spectrum\u7528\u6237\u6307\u5357\uff081984\uff09\u662f\u4e00\u672c\u8272\u5f69\u6591\u6593\u3001\u6447\u5c3e\u4e5e\u601c\u7684\u4e66\uff0c\u7528\u9ad8\u5ea6\u76f4\u89c2\u7684\u8bf4\u660e\u6307\u5bfc\u65b0\u624b\u3002\n\u8ba9\u6211\u5982\u6b64\u7740\u8ff7\u7684\u662f\uff0c\u5b83\u4eec\u8bb0\u5f55\u4e86\u5e94\u7528\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5386\u53f2\u3002\u8fd9\u8ba9\u6574\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u79d1\u6280\u901a\u4fe1\uff0c\u90fd\u6709\u4e86\u8fc7\u53bb\u7684\u76f8\u4f3c\u4e4b\u5904\u3002\u6211\u4eec\u4e0d\u8981\u5ffd\u89c6\u8fd9\u4e00\u70b9\uff1a\u5728\u4e00\u4e2a\u521d\u521b\u4f01\u4e1a\u4f3c\u4e4e\u5728\u6a21\u7cca\u6216\u4e0d\u5b58\u5728\u7684\u57fa\u7840\u4e0a\u521b\u9020\u65b0\u4e8b\u7269\u7684\u884c\u4e1a\uff0c\u9605\u8bfb\u6709\u5173\u65e7\u8f6f\u4ef6\u7684\u6587\u7ae0\u63d0\u9192\u6211\u4eec\uff0c\u786e\u5b9e\u6709\u4e00\u4e2a\u5de8\u4eba\uff0c\u6211\u4eec\u5df2\u7ecf\u722c\u4e0a\u4e86\u4ed6\u7684\u80a9\u8180\u3002\n\u8fd9\u662f\u4e00\u6b21\u4ee4\u4eba\u8c26\u5351\u7684\u7ecf\u5386\uff0c\u4f46\u4e0d\u4ec5\u4ec5\u662f\u656c\u754f\u5730\u770b\u7740\u6614\u65e5\u7684\u8363\u8000\u3002\u8ba9\u6211\u5217\u51fa\u4e00\u4e9b\u5728\u9605\u8bfb\u4e0d\u592a\u8fc7\u65f6\u7684\u624b\u518c\u65f6\u4e0d\u65ad\u83b7\u5f97\u7684\u89c1\u89e3\uff1a\n\u5728\u8fc7\u53bb\uff0c\u6280\u672f\u4f5c\u8005\u51e0\u4e4e\u5b64\u7acb\u5730\u7f16\u5199\u6587\u6863\uff0c\u5468\u56f4\u662f\u590d\u6742\u800c\u7c7b\u4f3c\u5b64\u7acb\u7684\u4f01\u4e1a\u6587\u5316\u3002\u4ece\u4eba\u7c7b\u5b66\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u65e7\u624b\u518c\u5c31\u50cf\u90e8\u843d\u7684\u624b\u5de5\u827a\u54c1\u3002\u7531\u6b64\u4ea7\u751f\u7684\u6587\u6863\u663e\u793a\u51fa\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e30\u5bcc\u8bbe\u8ba1\u548c\u5185\u5bb9\u6a21\u5f0f\uff0c\u6bd4\u8c37\u6b4c\u641c\u7d22\u5806\u6808\u4ea4\u6362\u95ee\u9898\u548c\u5411\u6761\u72b6\u6587\u6863\u97a0\u8eac\u7684\u65f6\u4ee3\u66f4\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\u3002\n\u6700\u521d\u7684Macintosh\u624b\u518c\uff081984\uff09\u4f7f\u7528\u4e86\u7cbe\u5f69\u7684\u63d2\u56fe\u6765\u89e3\u91ca\u590d\u6742\u7684\u6982\u5ff5\u548c\u8fc7\u7a0b\u3002\u91cc\u9762\u51e0\u4e4e\u6ca1\u6709\u6587\u5b57\u3002\n\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u5927\u90e8\u5206\u6280\u672f\u90fd\u662f\u57fa\u4e8e\u5927\u5b66\u548c\u7814\u7a76\u5b9e\u9a8c\u5ba4\u53d1\u660e\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0cC\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u79f0\u4e3aK&amp\uff1b\u300a\u6765\u81ea\u4f5c\u8005\u7684R\u300b\u53d1\u8868\u4e8e70\u5e74\u4ee3\uff0c\u4f46\u4ecd\u88ab\u8ba4\u4e3a\u662f\u6280\u672f\u5199\u4f5c\u7684\u6700\u4f73\u8303\u4f8b\u3002\u4e8b\u5b9e\u4e0a\uff0cC\u8bed\u8a00\u4ecd\u7136\u662f\u6700\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u65e7\u624b\u518c\u662f\u5e38\u9752\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u963b\u6b62\u6211\u4eec\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\u3002\nK&amp\uff1bR\u4ece\u7b2c\u4e00\u9875\u7684\u4e00\u4e2a\u4f8b\u5b50\u5f00\u59cb\u3002\u5b83\u7684\u7b80\u6d01\u548c\u52a8\u624b\u7cbe\u795e\u542f\u53d1\u4e86\u51e0\u4ee3\u79d1\u6280\u4f5c\u5bb6\u3002\n\u7531\u4e8e\u65e7\u7684\u624b\u518c\u65e0\u6cd5\u901a\u8fc7\u8d85\u94fe\u63a5\u89e3\u51b3\u95ee\u9898\uff0c\u5b83\u4eec\u901a\u5e38\u6bd4\u73b0\u4ee3\u7f51\u7edc\u6587\u6863\u66f4\u52a0\u72ec\u7acb\uff0c\u800c\u73b0\u4ee3\u7f51\u7edc\u6587\u6863\u6c38\u8fdc\u4e0d\u5b8c\u6574\uff0c\u751f\u6d3b\u5728\u4e00\u79cd\u6c38\u4e45\u7684\u3001\u65e0\u5b9a\u5f62\u7684\u7ef4\u57fa\u72b6\u6001\u4e2d\u3002\u5f53\u524d\u7684\u6587\u6863\u5bb3\u6015\u5413\u552c\u901a\u8fc7\u8c37\u6b4c\u767b\u9646\u5e76\u6e34\u671b\u89e3\u51b3\u65b9\u6848\u7684\u7528\u6237\uff1b\u65e7\u6587\u732e\u6ca1\u6709\u8fd9\u6837\u7684\u7591\u8651\uff0c\u5f53\u9700\u8981\u65f6\uff0c\u5b83\u4eec\u4f1a\u4e50\u4e8e\u6df1\u5165\u7814\u7a76\u6982\u5ff5\u548c\u7406\u8bba\u3002\u8fd9\u662f\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u5fc3\u6001\uff0c\u66f4\u50cf\u662f\u5b66\u6821\u6559\u5e08\u7684\u5fc3\u6001\uff0c\u800c\u4e0d\u662f\u793e\u533a\u7ba1\u7406\u8005\u7684\u5fc3\u6001\u3002\nMS-DOS 6.22\u624b\u518c\uff081994\uff09\u5305\u542b\u4e86\u4ee5\u6c34\u679c\u547d\u540d\u7684\u76ee\u5f55\u7684\u534a\u5e7d\u9ed8\u4f8b\u5b50\u3002\u5f00\u73a9\u7b11\u7684\u7b11\u8bdd\u5f88\u5e38\u89c1\u3002\n\u5728\u65e7\u7535\u8111\u624b\u518c\u4e2d\u6709\u4e00\u79cd\u73b0\u4ee3\u533b\u751f\u5e38\u5e38\u7f3a\u4e4f\u7684\u5e73\u9759\u3002\u53e4\u8001\u7684\u624b\u518c\u82b1\u65f6\u95f4\u548c\u7a7a\u95f4\u6765\u89e3\u91ca\u4e8b\u7269\uff0c\u800c\u4e14\u89e3\u91ca\u7684\u901f\u5ea6\u662f\u5f53\u4eca\u7f55\u89c1\u7684\u3002\u4eca\u5929\u7684\u7a0b\u5e8f\u5458\u901a\u8fc7\u6587\u6863\u75af\u72c2\u5730\u63a7\u5236\u7740+Fing\uff0c\u6253\u5f00\u51e0\u5341\u4e2a\u6807\u7b7e\u6765\u641c\u7d22\u7b54\u6848\u7684\u7247\u6bb5\u3002\u6211\u5e76\u4e0d\u662f\u8bf4\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u6587\u6863\u7684\u65b9\u5f0f\u672c\u8d28\u4e0a\u66f4\u7cdf\uff1b\u76f8\u53cd\uff0c\u6211\u7684\u610f\u601d\u662f\uff0c\u5728\u654f\u6377\u5546\u5e97\u91cc\u5236\u4f5c\u7684\u6587\u6863\u8fd8\u4e0d\u6210\u719f\u7684\u65f6\u4ee3\uff0c\u65e7\u6587\u6863\u53ef\u80fd\u662f\u8d28\u91cf\u7684\u706f\u5854\u3002\u6211\u4eec\u8981\u62e5\u62b1\u6162\u533b\u751f\u5417\uff1f\n\u300a\u9ea6\u91d1\u5854\u5723\u7ecf\u300b\uff08Macintosh Bible\uff0c\u7b2c\u516d\u7248\uff0c1996\u5e74\uff09\u4e2d\u5173\u4e8e\u5b57\u4f53\u7684\u7ae0\u8282\u5f88\u96be\u5fd8\u8bb0\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5b83\u60a0\u95f2\u7684\u6f2b\u6e38\u7cfb\u7edf\u548c\u7b2c\u4e09\u65b9\u5b57\u4f53\u3002\u5b83\u539a\u989c\u65e0\u803b\uff0c\u4ee4\u4eba\u6109\u5feb\uff1b\u4e3a\u4ec0\u4e48\u6211\u4eec\u73b0\u5728\u8fd9\u4e48\u8ba4\u771f\uff1f\u6211\u4e0d\u77e5\u9053\u3002\n\u51fa\u4e8e\u4e0a\u8ff0\u6240\u6709\u539f\u56e0\uff0c\u6211\u8ba4\u4e3a\u6536\u96c6\u548c\u9605\u8bfb\u65e7\u7684\u8ba1\u7b97\u673a\u624b\u518c\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4e5f\u662f\u6280\u672f\u4f5c\u5bb6\u5fc5\u987b\u505a\u7684\u4e8b\u3002\u9605\u8bfb\u8fc7\u53bb\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\u4e0d\u4ec5\u80fd\u7ed9\u6211\u5e26\u6765\u8fc7\u53bb\u7f8e\u597d\u7684\u56de\u5fc6\uff0c\u8fd8\u80fd\u5e2e\u52a9\u6211\u6210\u4e3a\u4e00\u540d\u66f4\u597d\u7684\u6280\u672f\u4f5c\u5bb6\u3002\n\u4f60\u4e5f\u53ef\u4ee5\u4ece\u4eca\u5929\u5f00\u59cb\u4e0b\u8f7dPDF\u7248\u672c\u7684\u65e7\u624b\u518c\u3002\u4ee5\u4e0b\u94fe\u63a5\u5305\u542b\u8bb8\u591a\u65e7\u624b\u518c\u548c\u8ba1\u7b97\u4e66\u7c4d\uff1a", "note_en": "Jan. 22, 2022   It\u2019s my ritual: every time I enter a secondhand bookshop, I go straight to the  Sciences section and search for old computer manuals. They\u2019re very hard to come by, as their owners tend to throw them away once they stop using a particular device or piece of software. Manuals also happen not to be the most engaging read for most people, which adds to their rarity; few want to peruse an old IBM AS/400 handbook while laying at the beach.\n Disregarding old manuals as useless piles of paper does them a grave disservice, though. Many of them are admittedly awful or outright boring, but some are ripe with forgotten tech lore and high-quality design. The writers of old manuals often enjoyed more editorial resources than tech writers are used to today, and produced handbooks and guides with greater care, because they couldn\u2019t afford gross inaccuracies to go to press.\n  The ZX Spectrum User Guide (1984) is a colourful, tail-wagging joy of a book that guides newbies with highly visual instructions.\n What makes old manuals so fascinating to me is that they document the history of applied computer science. This gives the entire field, including tech comms, the resemblance of a past. Let\u2019s not dismiss that: in a sector where startups seem to build new things on top of blurry or nonexistent foundations, reading about old software reminds us that there\u2019s indeed a giant upon whose shoulders we\u2019ve climbed.\n It\u2019s a humbling experience, but there\u2019s more to it than just looking in awe at the old glory. Let me list some of the insights I keep getting when reading not-so-obsolete manuals:\n In the old days, technical writers produced documentation in near isolation, surrounded by complex and similarly isolated corporate cultures. From an anthropological perspective, old manuals are like tribal artefacts. The resulting docs show surprisingly rich design and content patterns, more refreshing than we\u2019re used to in the age of googling for Stack Exchange questions and of bowing to Stripe docs.\n  The original Macintosh manual (1984) uses brilliant illustrations to explain complex concepts and procedures. There\u2019s very little text in it.\n Most of the tech we use today is based on technology invented in universities and research labs. For example,   The C Programming Language , also known as K&amp;R from its authors, was published in the 70s, but is still considered a prime example of technical writing. The C language, in fact, is still one of the most popular programming languages. Old manuals, in this sense, are evergreen knowledge that can prevent us from reinventing the wheel over and over again.\n  K&amp;R starts with an example right on the first page. Its succinctness and hands-on spirit has inspired several generations of tech writers.\n As old manuals couldn\u2019t hyperlink their way out of trouble, they\u2019re usually more self-contained than modern web documentation, which, never being complete, lives in a perennial, amorphous state of  wikiness. Current docs are afraid of scaring users who land via Google and crave for  solutions; old documentation has no such qualms, and happily delves into concepts and theory when the need arises. It\u2019s an entirely different frame of mind, more akin to that of school teachers than to that of community managers.\n  The MS-DOS 6.22 manual (1994) contains semi-humorous examples of directories named after  fruits. Tongue-in-cheek jokes were common.\n There\u2019s a  calmness in old computers manuals that modern docs often lack. Old handbooks took their time and space to explain things, and did so at a pace that\u2019s rare to find nowadays. Today\u2019s programmers furiously  Control+Fing through docs, opening tens of tabs in search for fragments of an answer. I\u2019m not saying that the way we consume docs now is inherently worse; rather, I\u2019m suggesting that old docs could be a beacon of quality in an age of half-baked docs made in agile shops. Shall we embrace  slow docs?\n  The chapter about fonts of The Macintosh Bible, 6th Ed. (1996) is hard to forget thanks to its leisurely walk through system and third-party fonts. It\u2019s cheeky and delightful; why are we so serious now? I don\u2019t know.\n For all the reasons I\u2019ve just stated above, I think that collecting and reading old computer manuals is a good thing to do, and a must for technical writers. Reading about the software and hardware of yore not only brings me good memories of days past: it also helps me be a better technical writer.\n You too can start today by downloading PDF versions of old handbooks. The following links contain numerous old manuals and computing books:", "posttime": "2022-02-17 16:48:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u9605\u8bfb,read,\u624b\u518c", "title": "\u6211\u6536\u96c6\u5e76\u9605\u8bfb\u65e7\u7535\u8111\u624b\u518c", "title_en": "I collect and read old computer manuals", "transed": 1, "url": "https://passo.uno/why-collect-read-old-computer-manuals/", "via": "", "real_tags": ["\u7535\u8111", "\u9605\u8bfb", "read", "\u624b\u518c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073867, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u65b0\u7cfb\u5217\u7684\u7b2c\u4e00\u90e8\u5206\u4e2d\uff0cJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u8bbe\u7f6e\u5206\u5e03\u5f0f\u7aef\u53e3\u751f\u6210\u5668\uff08Distributed Ports Builder\uff0c\u7b80\u79f0dpb\uff09\u3002\u5728\u4ecb\u7ecd\u4e86\u57fa\u672c\u77e5\u8bc6\u548c\u4e00\u4e9b\u9700\u8981\u907f\u514d\u7684\u5e38\u89c1\u7f3a\u9677\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4e0b\u8f7d\u4e00\u7ec4distfiles\u4ee5\u4f9b\u8131\u673a\u673a\u5668\u4f7f\u7528\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06distfiles\u76ee\u5f55\u4ece\u4e00\u4e2a\u7248\u672c\u6574\u9f50\u5730\u4f20\u9001\u5230\u4e0b\u4e00\u4e2a\u7248\u672c\uff0c\u907f\u514d\u8fc7\u591a\u548c\u4e0d\u5fc5\u8981\u7684\u4e0b\u8f7d\u3002\n\u672c\u5468\uff0cJay\u5411\u6211\u4eec\u4ecb\u7ecd\u4e86\u901a\u8fc7\u7f16\u8bd1\u81ea\u5b9a\u4e49\u5185\u6838\u53ef\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u7136\u540e\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u7f16\u8f91\u5185\u6838\u914d\u7f6e\u6587\u4ef6\uff0c\u518d\u6b21\u907f\u514d\u5e38\u89c1\u7684\u9677\u9631\uff0c\u5e76\u4e86\u89e3\u6211\u4eec&#39\uff1b\u6211\u4eec\u5728\u53d8\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u91cd\u65b0\u7f16\u8bd1\u548c\u5b89\u88c5\u65b0\u5185\u6838\u3002\n\u7d27\u8ddf\u7740\u4e0a\u5468&#39\uff1b\u5728\u7b2c\u4e09\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4e00\u4e9b\u5185\u6838\u4ee3\u7801\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7136\u540eJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4fee\u6539\u5b83\u4ee5\u6539\u53d8\u5b57\u4f53\uff0c\u5411\u63a7\u5236\u53f0\u6dfb\u52a0\u5f69\u8272\u6e10\u53d8\u80cc\u666f\uff0c\u6539\u53d8\u5149\u6807\u7684\u5f62\u72b6\uff0c\u7b49\u7b49\uff01\n\u968f\u7740Jay\u67e5\u770b\u952e\u76d8\u5e03\u5c40\u548cwscons\u4ee3\u7801\uff0c\u672c\u5468\u53c8\u6709\u66f4\u591a\u5185\u6838\u9ed1\u5ba2\u653b\u51fb\u3002\u4eca\u5929\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u6539\u53d8\u6211\u4eec\u7684\u6309\u952e\u6620\u5c04\uff0c\u5e76\u4e3a\u6570\u5b57\u952e\u76d8\u627e\u5230\u65b0\u7684\u7528\u9014\uff01\n\u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e94\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9bsoftraid\u4ee3\u7801\uff0c\u8c03\u6574\u4e86RAID-1\u955c\u50cf\u96c6\u7684\u6027\u80fd\uff0c\u5e76\u8bbe\u7f6e\u4e86\u65e0\u5bc6\u7801\u78c1\u76d8\u52a0\u5bc6\u3002\n\u672c\u5468\uff0c\u968f\u7740\u6211\u4eec\u5c06\u6ce8\u610f\u529b\u4ece\u4e25\u683c\u5ba1\u67e5\u5185\u6838\u4ee3\u7801\u8f6c\u79fb\u5230\u66f4\u62bd\u8c61\u7684\u78c1\u76d8\u5206\u533a\u6982\u5ff5\u4e0a\uff0c\u60c5\u51b5\u53d1\u751f\u4e86\u8f7b\u5fae\u7684\u53d8\u5316\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u78c1\u76d8\u6807\u7b7e\u53ea\u662f\u4e00\u76d2\u8f6f\u76d8\u4e2d\u7684\u7c98\u6027\u7c98\u5408\u5242\uff0c\u90a3\u4e48don&#39\uff1b\u522b\u62c5\u5fc3\uff01\u6211\u4eec&#39\uff1b\u6211\u63a9\u62a4\u4f60\uff01\n\u88abSSL\u641e\u7cca\u6d82\u4e86\uff1f\u5510&#39\uff1b\u6211\u4e0d\u77e5\u9053\u4f60\u7684\u4f01\u4e1a\u793e\u4f1a\u8d23\u4efb\u4ece\u4f60\u7684X509\uff1f\u8bd5\u56fe\u4ece\u51e0\u4e2a\u4e0d\u540c\u7684\u5728\u7ebf\u6307\u5357\u4e2d\u62fc\u51d1\u51fa\u4f60\u9700\u8981\u7684\u4fe1\u606f\uff0c\u4f46\u53d1\u73b0\u5b83\u4eec\u90fd\u4f1a\u8ba9\u4f60\u671d\u7740\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u5411\u51fa\u53d1\uff1f\u521b\u5efa\u4e86\u4e00\u4e2a\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u5b83\u770b\u8d77\u6765\u5f88\u597d\uff0c\u4f46\u5728\u5b89\u88c5\u5230\u624b\u673a\u4e0a\u65f6\u5374\u5931\u8d25\u5f97\u5f88\u60e8\uff1f\u5510&#39\uff1b\u522b\u62c5\u5fc3\uff01\u6770\u4f0a\u611f\u53d7\u5230\u4e86\u4f60\u7684\u75db\u82e6\uff0c\u5e76\u4e3a\u4f60\u627e\u5230\u4e86\u7b54\u6848&#39\uff1b\u6211\u4e00\u76f4\u5728\u5bfb\u627e\uff01\n\u8fdc\u7a0b\u8bbf\u95ee\u4e00\u53f0\u670d\u52a1\u5668\u662f\u4e00\u56de\u4e8b\uff0c\u4f46\u5728\u4e00\u7ec4\u5206\u5e03\u5f0f\u673a\u5668\u4e0a\u8fd0\u884c\u4e0d\u540c\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4f3c\u4e4e\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u8de8\u8d8a\u67b6\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u754c\u9650\u5bf9Jay\u6765\u8bf4\u4e0d\u662f\u95ee\u9898\uff0c\u4ed6\u751a\u81f3\u8fd8\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u5728\u6df7\u97f3\u4e2d\u52a0\u5165\u97f3\u9891\u3002\n\u6211\u4eec\u901a\u8fc7\u5b9e\u8df5\u6765\u5b66\u4e60\uff0c\u4f46\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u641e\u5f97\u4e00\u56e2\u7cdf\u3002\u5982\u679c\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u5b89\u88c5OpenBSD\u770b\u8d77\u6765\u50cf\u4e00\u573a\u5669\u68a6\uff0c\u90a3\u4e48\u672c\u5468&#39\uff1bs\u5206\u671f\u4ed8\u6b3e\u53ea\u4e3a\u4f60\u51c6\u5907\uff01\u7ecf\u8fc7\u516b\u5468\u7684\u5b9e\u9a8c\uff0cJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5168\u65b0\u7684\u5f00\u59cb\u5982\u4f55\u786e\u4fdd\u7cfb\u7edf\u5e72\u51c0\uff0c\u907f\u514d\u5347\u7ea7\u95ee\u9898\uff0c\u5408\u7406\u7684\u78c1\u76d8\u5206\u533a\uff0c\u5feb\u901f\u7684\u5907\u4efd\u548c\u6062\u590d\uff0c\u4ee5\u53ca\u826f\u597d\u7684\u964d\u7ea7\u80fd\u529b\uff01\n\u5728\u672c\u7cfb\u5217\u6587\u7ae0\u7684\u6700\u540e\uff0cJay\u4ecb\u7ecd\u4e86OpenBSD\u4e2d\u4e00\u4e9b\u5f88\u5c11\u4f7f\u7528\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5b9e\u9645\u4e0a\u975e\u5e38\u6709\u7528\u3002", "note_en": "In the first installment of this new series, Jay shows us how to set up the Distributed Ports Builder, or dpb. After covering the basics, and a few common pitfalls to avoid, we then see how to download a set of distfiles for use on off-line machines, as well as how to carry your distfiles directory neatly from one release to the next, avoiding excessive and unwanted downloads.\n    This week, Jay runs us through what we might achieve by compiling a custom kernel, then shows us how to edit the kernel configuration files, once again avoiding common pitfalls and understanding the options that we&#39;re changing. Finally we cover how to re-compile and install the new kernel.\n    Hot on the heels of last week&#39;s custom kernel configuration, in this third installment we learn how some of the kernel code works, and then Jay shows us how to modify it to change fonts, add a colored gradient background to the console, change the shape of the cursor, and more!\n    More kernel hacking this week, as Jay looks at keyboard layouts and the wscons code. Today, we&#39;ll be changing our key mappings around and finding new uses for the numeric keypad!\n    In the fifth installment of the series, we learn a bit about the softraid code, tweak performance of our RAID-1 mirror set, and set up passwordless disk encryption.\n    This week sees a slight change of gear, as we move our focus away from strictly reviewing kernel code and look at the more abstract concepts of disk partitioning. If you thought a disk label was just a sticky adhesive in a box of floppies, don&#39;t worry! We&#39;ve got you covered!\n    Confused by SSL? Don&#39;t know your CSR from your X509? Tried to piece together the information you need from several different on-line guides, but found that they all send you off in a slightly different direction? Created a self-signed certificate that looks fine but fails miserably when installed on your cell phone? Don&#39;t worry! Jay feels your pain, and has the answers you&#39;ve been searching for!\n    Remote access to a single server is one thing, but seemlessly running different graphical applications across a distributed set of machines is quite another. Crossing architecture and operating system boundaries is no problem for Jay, and he even shows us how to throw audio into the mix too.\n    We learn things by doing them, but in the process we sometimes make a mess. If re-installing OpenBSD from scratch seems like a nightmare, then this week&#39;s installment is just for you! After eight weeks of experiments, Jay shows us how a fresh start ensures a clean system and avoids upgrade woes, with sensible disk partitioning, quick backup and restore, and the ability to downgrade thrown in for good measure!\n    To conclude this ten-part series, Jay looks at some rarely used features of OpenBSD that are actually quite useful.", "posttime": "2022-02-17 16:46:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9c81\u83bd,guide,jay", "title": "OpenBSD\u7684\u9c81\u83bd\u6307\u5357", "title_en": "A Reckless Guide to OpenBSD", "transed": 1, "url": "https://www.exoticsilicon.com/jay/reckless_guide_to_openbsd/", "via": "", "real_tags": ["\u9c81\u83bd", "guide", "jay"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073865, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\uff08Multi-factor Authentication\uff0c\u7b80\u79f0MFA\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a2FA\uff09\u662f\u4fdd\u62a4\u60a8\u7684Office 365\u5e10\u6237\u4e0d\u53d7\u8bd5\u56fe\u8bbf\u95ee\u5b83\u4eec\u7684\u653b\u51fb\u8005\u653b\u51fb\u7684\u7edd\u4f73\u65b9\u6cd5\u3002\u4f5c\u4e3a\u7b2c\u4e8c\u79cd\u4fdd\u62a4\u5f62\u5f0f\uff0c\u4ee5\u53ca\u5bc6\u7801\uff0c\u5b83\u63d0\u4f9b\u4e86\u9a8c\u8bc1\u8bd5\u56fe\u767b\u5f55\u7684\u7528\u6237\u771f\u5b9e\u8eab\u4efd\u7684\u8fc7\u7a0b\u4e2d\u7684\u53e6\u4e00\u4e2a\u6b65\u9aa4\u3002\u6709\u5f88\u591aMFA\u9009\u9879\uff0c\u5305\u62ec\u77ed\u4fe1\u3001\u4e00\u6b21\u6027\u5bc6\u7801\uff08OTP\uff09\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u63a8\u9001\u901a\u77e5\u3002\u867d\u7136\u8fd9\u4e9b\u65b9\u6cd5\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u989d\u5916\u7684\u4fdd\u62a4\uff0c\u4f46\u653b\u51fb\u8005\u4e5f\u5f00\u59cb\u5bfb\u627e\u65b9\u6cd5\u6765\u7834\u574f\u672c\u5e94\u589e\u5f3a\u5b89\u5168\u6027\u7684\u505a\u6cd5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6b63\u5728\u7814\u7a76MFA\u75b2\u52b3\uff0c\u91cd\u70b9\u662f\u5f53\u524d\u7684\u653b\u51fb\u5411\u91cf\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u3002\u6211\u4eec\u5c06\u63cf\u8ff0\u4ec0\u4e48\u662fMFA\u75b2\u52b3\uff0c\u5b83\u662f\u5982\u4f55\u6267\u884c\u7684\uff0c\u5e76\u8be6\u7ec6\u8bf4\u660eit\u4e13\u4e1a\u4eba\u5458\u5728\u5176\u7ec4\u7ec7\u5185\u68c0\u6d4b\u548c\u7f13\u89e3\u75b2\u52b3\u7684\u6b65\u9aa4\u3002\nGoSecure Titan\u5b9e\u9a8c\u5ba4\u6839\u636e\u6700\u8fd1\u7684\u8c03\u67e5\uff0c\u5229\u7528MFA\u75b2\u52b3\u653b\u51fb\u786e\u5b9a\u4e86\u65b0\u7684\u5a01\u80c1\u5411\u91cf\u3002\u6211\u4eec\u7684\u56e2\u961f\u8fd8\u53d1\u73b0\uff0c\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u8fdb\u884c\u7684\u653b\u51fb\u6570\u91cf\u663e\u8457\u589e\u52a0\u3002\n\u5728\u91ce\u5916\uff0c\u79ef\u6781\u6027\u5f88\u9ad8\u4e14\u5df2\u77e5\u5b58\u5728\u5a01\u80c1\u7684\u53c2\u4e0e\u8005\u6b63\u5728\u79ef\u6781\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6e17\u900fOffice 365\u5e10\u6237\u5e76\u5371\u5bb3\u6574\u4e2a\u7ec4\u7ec7\u3002\u968f\u7740\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u8d8a\u6765\u8d8a\u591a\u5730\u88ab\u91c7\u7528\uff0c\u4f5c\u4e3a\u4e00\u79cd\u66f4\u5b89\u5168\u7684\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u65b9\u5f0f\uff08\u76f8\u5bf9\u4e8e\u77ed\u4fe1\u6216\u7535\u8bdd\uff09\uff0c\u9884\u8ba1\u8fd9\u79cd\u8d8b\u52bf\u5728\u672a\u6765\u4f1a\u589e\u957f\uff0c\u751a\u81f3\u4f1a\u53d7\u5230\u5fae\u8f6f\u672c\u8eab\u7684\u9f13\u52b1\u3002\n\u672f\u8bed\u201cMFA\u75b2\u52b3\u201d\u662f\u6307\u901a\u8fc7\u591a\u4e2a\u8d26\u6237\u4e2d\u7684MFA\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u6237\u5728\u4e00\u5929\u4e2d\u6536\u5230\u5927\u91cf\u901a\u77e5\u6216\u63d0\u793a\uff0c\u4ee5\u6267\u884c\u767b\u5f55\u6216\u6279\u51c6\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u8fd9\u4e0d\u5e94\u8be5\u4e0e\u201c\u5bc6\u7801\u75b2\u52b3\u201d\u6df7\u6dc6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u5fc5\u987b\u8bb0\u4f4f\u591a\u4e2a\u5e10\u6237\u6216\u4e8b\u4ef6\u7684\u5bc6\u7801\u6216PIN\u7801\u7684\u6570\u91cf\u592a\u591a\u3002MFA\u75b2\u52b3\u548c\u5bc6\u7801\u75b2\u52b3\u786e\u5b9e\u6709\u4e00\u4e2a\u76f8\u4f3c\u7684\u4e3b\u9898\uff0c\u5373\u7528\u6237\u201c\u75b2\u60eb\u4e0d\u582a\u201d\uff08\u6216\u88ab\u6d41\u91cf\u6df9\u6ca1\uff09\uff0c\u5e76\u5c06\u5f00\u59cb\u5c06\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u653e\u5728\u4e00\u8fb9\uff0c\u53d8\u5f97\u7c97\u5fc3\u5927\u610f\uff0c\u4f7f\u4ed6\u4eec\u7684\u7ec4\u7ec7\u548c\u5e10\u6237\u5904\u4e8e\u5371\u9669\u4e4b\u4e2d\u3002\n\u5982\u524d\u6240\u8ff0\uff0cMFA\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4ecb\u8d28\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f8b\u5982SMS\u6d88\u606f\u6216\u7535\u8bdd\uff0c\u5176\u4e2d\u7528\u6237\u901a\u8fc7\u9884\u5148\u914d\u7f6e\u7684\u7535\u8bdd\u53f7\u7801\u9a8c\u8bc1\u5176\u8eab\u4efd\u3002\u4e00\u6b21\u6027\u5bc6\u7801\u6216OTP\u662f\u53e6\u4e00\u79cd\u901a\u8fc7\u751f\u6210\u4ee5\u56fa\u5b9a\u65f6\u95f4\u95f4\u9694\u66f4\u65b0\u7684\u5bc6\u7801\u6765\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u4ece\u5e94\u7528\u7a0b\u5e8f\u63a8\u9001\u901a\u77e5\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f7f\u653b\u51fb\u8005\u80fd\u591f\u6267\u884c\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u653b\u51fb\u3002\n\u8fd9\u79cd\u6280\u672f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u653b\u51fb\u8005\u5728\u5c1d\u8bd5\u767b\u5f55\u53d7\u5bb3\u8005\u5e10\u6237\u65f6\u624b\u52a8\u751a\u81f3\u81ea\u52a8\u53d1\u9001\u91cd\u590d\u63a8\u9001\u901a\u77e5\u3002\u4f7f\u7528\u7684\u51ed\u8bc1\u53ef\u4ee5\u901a\u8fc7\u66b4\u529b\u5f3a\u5236\u3001\u5bc6\u7801\u91cd\u590d\u4f7f\u7528\u6216\u55b7\u6d12\u83b7\u5f97\u3002\u4e00\u65e6\u653b\u51fb\u8005\u83b7\u5f97\u6709\u6548\u51ed\u636e\uff0c\u4ed6\u4eec\u5c06\u91cd\u590d\u6267\u884c\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\uff0c\u76f4\u5230\u7528\u6237\u6279\u51c6\u767b\u5f55\u5c1d\u8bd5\u5e76\u5141\u8bb8\u653b\u51fb\u8005\u8bbf\u95ee\u8be5\u5e10\u6237\u3002\u8fd9\u901a\u5e38\u662f\u56e0\u4e3a\u7528\u6237\u88ab\u901a\u77e5\u5206\u6563\u4e86\u6ce8\u610f\u529b\u6216\u4e0d\u77e5\u6240\u63aa\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u80fd\u88ab\u8bef\u89e3\u4e3a\u9519\u8bef\u6216\u4e0e\u5176\u4ed6\u5408\u6cd5\u8eab\u4efd\u9a8c\u8bc1\u8bf7\u6c42\u6df7\u6dc6\u3002\n\u8fd9\u79cd\u653b\u51fb\u4e4b\u6240\u4ee5\u7279\u522b\u6709\u6548\uff0c\u4e0d\u662f\u56e0\u4e3a\u6240\u6d89\u53ca\u7684\u6280\u672f\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u9488\u5bf9\u7684\u662fMFA\u7684\u4eba\u4e3a\u56e0\u7d20\u3002\u8bb8\u591aMFA\u7528\u6237\u4e0d\u719f\u6089\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4e5f\u4e0d\u7406\u89e3\u4ed6\u4eec\u6279\u51c6\u7684\u662f\u6b3a\u8bc8\u6027\u901a\u77e5\u3002\u5176\u4ed6\u4eba\u53ea\u662f\u60f3\u8ba9\u5b83\u6d88\u5931\uff0c\u6839\u672c\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e00\u76f4\u5728\u6279\u51c6\u7c7b\u4f3c\u7684\u901a\u77e5\u3002\u4ed6\u4eec\u65e0\u6cd5\u901a\u8fc7\u201c\u901a\u77e5\u8fc7\u8f7d\u201d\u6765\u53d1\u73b0\u5a01\u80c1\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u901a\u8fc7\u68c0\u67e5\u767b\u5f55\u65e5\u5fd7\uff0c\u53ef\u4ee5\u76f4\u63a5\u4eceAzure\u95e8\u6237\u68c0\u6d4b\u5230\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8baeIT\u4e13\u4e1a\u4eba\u58eb\u91c7\u53d6\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n\u5728\u76d1\u63a7\u4e0b\uff0c\u60a8\u5c06\u770b\u5230\u767b\u5f55\u65e5\u5fd7\uff0c\u5176\u4e2d\u8bb0\u5f55\u4e86\u6709\u5173\u7528\u6237\u767b\u5f55\u548c\u8d44\u6e90\u7684\u4fe1\u606f\u3002\n\u7136\u540e\uff0c\u901a\u8fc7\u65e0\u6cd5\u83b7\u53d6\u62d2\u7edd\u7684MFA\u63a8\u9001\u901a\u77e5\u5217\u8868\u6765\u8fc7\u6ee4\u767b\u5f55\u72b6\u6001\u3002\n\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u5e94\u5728\u6210\u529f\u5217\u4e0b\u4e3afalse\uff0c\u4e14MFA\u88ab\u62d2\u7edd\uff1b\u7528\u6237\u62d2\u7edd\u4e86\u7ed3\u679c\u8be6\u7ec6\u4fe1\u606f\u4e0b\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\nAzure\u65e5\u5fd7\u5206\u6790\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5206\u6790\u641c\u7d22\u6b64\u7c7b\u884c\u4e3a\u7684\u67e5\u8be2\u3002\u8fd9\u6837\u7684\u67e5\u8be2\u53ef\u4ee5\u68c0\u7d22\u5927\u91cf\u4fe1\u606f\uff0c\u7528\u4e8e\u68c0\u6d4b\u8fd9\u4e9b\u653b\u51fb\uff1a\n\u7b7e\u540d\n\u6b64\u67e5\u8be2\u5e94\u68c0\u7d22\u4e0a\u4e2a\u6708\u627e\u5230\u7684\u6761\u76ee\uff0c\u5e76\u53ef\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u4ee5\u68c0\u7d22\u66f4\u591a\u7ed3\u679c\uff0c\u6216\u6839\u636e\u641c\u7d22\u7ed3\u679c\u521b\u5efa\u8b66\u62a5\u89c4\u5219\u3002\n\u5982\u679cAzure Sentinel\u6b63\u5728\u4f7f\u7528\uff0c\u90a3\u4e48\u72e9\u730e\u67e5\u8be2\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u6355\u83b7\u3001\u8b66\u62a5\uff0c\u751a\u81f3\u901a\u8fc7\u5b9e\u73b0\u6e38\u620f\u672c\u6765\u54cd\u5e94\u5339\u914d\u6765\u51cf\u8f7b\u8fd9\u4e9b\u653b\u51fb\u3002\u5728Azure Sentinel\u641c\u7d22\u67e5\u8be2\u5b58\u50a8\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u793a\u4f8b\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u51cf\u8f7b\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5176\u4e2d\u7684\u4e00\u4e9b\u529f\u80fd\uff0c\u4ee5\u4fbfM365\u7ba1\u7406\u5458\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u9002\u5408\u4ed6\u4eec\u9700\u8981\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u63a8\u9001\u901a\u77e5\uff0c\u56e0\u4e3a\u5bc6\u7801\u590d\u6742\u6027\u89c4\u5219\u548c\u5bc6\u7801\u91cd\u7528\u7f13\u89e3\u63aa\u65bd\u5e94\u8be5\u5df2\u7ecf\u5230\u4f4d\u3002\n\u4fdd\u62a4\u60a8\u7684Microsoft 365\u5e10\u6237\u514d\u53d7\u6b64\u653b\u51fb\u7684\u4e00\u79cd\u6709\u6548\u65b9\u6cd5\u662f\u914d\u7f6e\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u7684\u9ed8\u8ba4\u9650\u5236\u3002\u8fd9\u4e9b\u9650\u5236\uff08\u9ed8\u8ba4\u548c\u6700\u5927\uff09\u53ef\u4ee5\u5728Azure\u8d44\u6e90\u7ba1\u7406\u5668\u6587\u6863\u4e2d\u627e\u5230\u3002\n\u901a\u8fc7\u4f7f\u7528Microsoft Authenticator\u7684\u7535\u8bdd\u767b\u5f55\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u7528\u6237\u53ef\u4ee5\u5e2e\u52a9\u9632\u6b62\u610f\u5916\u8bbf\u95ee\u5176\u5e10\u6237\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4e24\u4f4d\u6570\u6570\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4fa7\u8fdb\u884c\u786e\u8ba4\u3002\u8fd9\u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\u662f\u5f88\u96be\u59a5\u534f\u7684\uff0c\u56e0\u4e3a\u653b\u51fb\u8005\u4f1a\u5728\u624b\u673a\u4e2d\u770b\u5230\u4e00\u4e2a\u5fc5\u987b\u731c\u6d4b\u7684\u53f7\u7801\uff08\u653b\u51fb\u8005\u65e0\u6743\u8bbf\u95ee\uff09\u3002\u53ea\u6709\u653b\u51fb\u8005\u624d\u77e5\u9053\u8be5\u53f7\u7801\uff0c\u8981\u6279\u51c6\u8bbf\u95ee\uff0c\u7528\u6237\u5fc5\u987b\u4ece\u4e09\u4e2a\u9009\u9879\u4e2d\u9009\u62e9\u4e00\u4e2a\u53f7\u7801\u3002\u8fd9\u6837\u4f1a\u51cf\u5c11\u6279\u51c6\u4e0a\u8ff0\u8bbf\u95ee\u7684\u53ef\u80fd\u6027\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u6709\u5173\u8fd9\u79cd\u9a8c\u8bc1\u65b9\u6cd5\u7684\u4fe1\u606f\u3002\n\u8fd9\u662f\u4e00\u4e2a\u6fc0\u8fdb\u7684\u4e3e\u63aa\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u5feb\u901f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u5b83\u5c06\u7981\u6b62\u4f7f\u7528\u63a8\u9001\u901a\u77e5\u4f5c\u4e3a\u9a8c\u8bc1\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u8fdb\u884c\u6b64\u66f4\u6539\u7684\u6b65\u9aa4\uff1a\n\u5728\u201c\u670d\u52a1\u8bbe\u7f6e\u201d\u9875\u9762\u7684\u201c\u9a8c\u8bc1\u9009\u9879\u201d\u4e0b\uff0c\u6e05\u9664\u201c\u901a\u8fc7\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u901a\u77e5\u201d\u590d\u9009\u6846\u3002\n\u6b63\u5982\u6211\u4eec\u5728\u672c\u6587\u4e2d\u6240\u8ba8\u8bba\u7684\uff0cMFA\u75b2\u52b3\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5b83\u53ef\u80fd\u4f1a\u5371\u53caMicrosoft Office 365\u5e10\u6237\uff0c\u4f46\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u6211\u4eec\u81ea\u5df1\u514d\u53d7MFA\u75b2\u52b3\u548c\u5f53\u524d\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u653b\u51fb\u7684\u589e\u52a0\u3002\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8eGoSecure Titan\u5b9e\u9a8c\u5ba4\u7684\u6700\u65b0\u66f4\u65b0\u548c\u7814\u7a76\uff0c\u8bf7\u5b9a\u671f\u67e5\u770b\u6b64\u535a\u5ba2\uff0c\u5e76\u5728Twitter\u548cLinkedIn\u4e0a\u5173\u6ce8GoSecure\u3002", "note_en": "Multi-factor Authentication or MFA (sometimes referred as 2FA) is an excellent way to protect your Office 365 accounts from attackers trying to gain access to them. As a second form of protection, along with passwords, it supplies another step in the process to verify the real identity of the user trying to log in. There are many MFA options including SMS, One Time Passwords (OTP) and push notifications from an app. And while the intent of these methods is to provide extra protection, attackers have also begun to look for ways to compromise what should be a security enhancing practice. In this case, we are examining MFA Fatigue by focusing on a current attack vector\u2014Push Notification Spamming. We\u2019ll describe what MFA fatigue is, how it is carried out and detail the steps for IT professionals to detect and mitigate it within their organizations.\n   GoSecure Titan Labs identified new threat vectors using MFA Fatigue attacks based on recent investigations. Our team has also observed a significant increase in the number of attacks performed using this technique.\n In the wild, highly motivated and known threat actors are  actively using this kind of method to penetrate Office 365 accounts and compromise entire organizations. As app-based authentication mechanisms are being adopted increasingly as a safer way to authenticate a user (versus SMS or phone call) it is expected that this tendency will grow in the future, even be encouraged by  Microsoft itself.\n   The term \u201cMFA Fatigue\u201d refers to the overload of notifications or prompts via MFA applications, in multiple accounts, that the user receives during the day to perform logins or approve different actions. It should not be confused with \u201c Password Fatigue\u201d in which the user is overwhelmed with the number of passwords or PINs they must remember for multiple accounts or events. MFA Fatigue and Password Fatigue do share a similar theme, that the user is \u201cfatigued\u201d (or overwhelmed by volume) and will start setting security best practices aside and become careless, putting their organization and their accounts in danger of compromise.\n As previously mentioned, MFA can use a diverse set of mediums to authenticate the user, such as SMS messages or phone calls where the user authenticates their identity via a pre-configured phone number. One Time Password or OTP is another way to verify the user\u2019s identity by generating a passcode that is updated in fixed time intervals. Another choice is push notifications from an app. This\u00a0 is the authentication method we are going to be focusing on, as it enables an attacker to perform a  push notification spamming attack.\n   This technique is simple as it only requires the attacker to manually, or even automatically, send repeated push notifications while trying to log into the victim\u2019s account. The credentials used could be obtained via brute forcing, password reuse or spraying. Once the attacker obtains valid credentials, they will perform the push notification spamming repeatedly until the user approves the login attempt and lets the attacker gain access to the account. This usually happens because the user is distracted or overwhelmed by the notifications and, in some cases, it can be misinterpreted as a bug or confused with other legitimate authentication requests.\n This attack is particularly effective not because of the technology involved, but because it targets the human factor of MFA. Many MFA users are not familiar with this type of attack\u00a0 and would not understand they are approving a fraudulent notification. Others just want to make it disappear and are simply not aware of what they are doing since they approve similar notifications all the time. They can\u2019t see through the \u2018notification overload\u2019 to spot the threat.\n    Luckily, this type of attack can be detected directly from the  Azure portal by inspecting the  Sign-in Logs. We highly recommend that IT professionals take the following steps:\n Under the  Monitoring you will find  Sign-in Logs, where the information about user\u2019s sign-ins and resources are logged.\n Then filter the sign-in  Status by  Failure to obtain a list of MFA push notifications denied.\n   Push notifications spamming should be  false under the Succeed column and  MFA denied; user declined the authentication under Result detail.\n   Azure Log Analytics can also be used to analyze the queries in search of this kind of behavior. A query like this can retrieve a lot of information that can be used to detect these attacks:\n SigninLogs\u00a0\r| where TimeGenerated &gt;= ago(31d)\u00a0\r| where ResultType == 500121\u00a0\r| where Status has &#34;MFA Denied; user declined the authentication&#34;\n This query should retrieve the entries found in the last month and can be customized to retrieve even more results or  create alert rules to be notified based on the results of searches.\n If Azure Sentinel is in use, then hunting queries can be applied to also catch, alert and even mitigate these attacks by implementing  playbooks in response to matches. Some examples can be found in the  Azure Sentinel hunting queries repository.\n   There are many ways to mitigate this type of attack. Here, we are going to highlight some of them so that M365 administrators can choose whatever fits their needs. We are going focus on push notifications, since password complexity rules and password reuse mitigations should already be in place.\n   One effective way to protect your Microsoft 365 accounts against this attack is to configure the default limits of the Multi-Factor Authentication service. These limits, both default and maximum, can be found in  Azure Resource Manager documentation.\n   A user can help prevent inadvertent access to their account by using the Microsoft Authenticator\u2019s phone sign-in verification method. In this scenario, a unique two-digit number is generated and must be confirmed on both sides. This is very hard for an attacker to compromise since the attacker is shown a number that must be guessed in the phone (which the attacker doesn\u2019t have access to). Only the attacker will know the number and to approve access, the user would have to pick a number out of three options. This way it will diminish the possibilities of approving said access.  Here you can learn more about this verification method.\n    This is a radical move, but a quick solution as will disable the use of push notification as a  verification method. These are the steps to make this change:\n On the  Service Settings page, under  verification options, and clear the  Notification through mobile app checkbox.\n   As we discussed in this post, MFA Fatigue is a real concern with potential implications to compromise Microsoft Office 365 accounts, but there are many ways to protect ourselves from MFA Fatigue and the current rise in Push Notification Spamming attacks. To learn more about GoSecure Titan Labs latest updates and research, check this blog regularly and follow GoSecure on  Twitter and  LinkedIn.", "posttime": "2022-02-17 16:32:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,mfa", "title": "\u5f53\u524d\u9488\u5bf9Microsoft Office 365\u7528\u6237\u7684MFA\u75b2\u52b3\u653b\u51fb\u6d3b\u52a8", "title_en": "Current MFA fatigue attack campaign targeting Microsoft Office 365 users", "transed": 1, "url": "https://www.gosecure.net/blog/2022/02/14/current-mfa-fatigue-attack-campaign-targeting-microsoft-office-365-users/", "via": "", "real_tags": ["microsoft", "mfa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073864, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u4e66\u7684\u76ee\u6807\u662f\u8bb0\u5f55\u53ea\u4f7f\u7528\u5185\u7f6ebash\u7279\u6027\u6765\u5b8c\u6210\u5404\u79cd\u4efb\u52a1\u7684\u5e38\u89c1\u65b9\u6cd5\u548c\u9c9c\u4e3a\u4eba\u77e5\u7684\u65b9\u6cd5\u3002\u4f7f\u7528\u672c\u300a\u5723\u7ecf\u300b\u4e2d\u7684\u7247\u6bb5\u6709\u52a9\u4e8e\u4ece\u811a\u672c\u4e2d\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f7f\u5b83\u4eec\u66f4\u5feb\u3002\u6211\u5728\u5f00\u53d1neofetch\u3001pxltrm\u548c\u5176\u4ed6\u8f83\u5c0f\u7684\u9879\u76ee\u65f6\u9047\u5230\u4e86\u8fd9\u4e9b\u6280\u5de7\uff0c\u5e76\u53d1\u73b0\u4e86\u4e00\u4e9b\u3002\n\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4f7f\u7528shellcheck\u7f16\u5199\u7684\uff0c\u5e76\u5728\u9002\u7528\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u4e86\u6d4b\u8bd5\u3002\u60f3\u8981\u8d21\u732e\u5417\uff1f\u9605\u8bfb\u6295\u7a3f\u3002\u5b83\u6982\u8ff0\u4e86\u5355\u5143\u6d4b\u8bd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5728\u5723\u7ecf\u4e2d\u6dfb\u52a0\u4ee3\u7801\u7247\u6bb5\u65f6\u9700\u8981\u505a\u4ec0\u4e48\u3002\n\u770b\u5230\u4e00\u4e9b\u63cf\u8ff0\u9519\u8bef\u7684\u4e1c\u897f\u4e86\u5417\uff0c\u6709\u95ee\u9898\u8fd8\u662f\u5b8c\u5168\u9519\u4e86\uff1f\u6253\u5f00\u95ee\u9898\u6216\u53d1\u9001\u8bf7\u6c42\u3002\u5982\u679c\u5723\u7ecf\u9057\u6f0f\u4e86\u4ec0\u4e48\uff0c\u6253\u5f00\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u4f1a\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\n\u7eafbash\u66ff\u4ee3\u5916\u90e8\u8fdb\u7a0b\u548c\u7a0b\u5e8f\u7684\u96c6\u5408\u3002bash\u811a\u672c\u8bed\u8a00\u6bd4\u4eba\u4eec\u610f\u8bc6\u5230\u7684\u5f3a\u5927\uff0c\u5927\u591a\u6570\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728\u4e0d\u4f9d\u8d56\u5916\u90e8\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u3002\n\u5728bash\u4e2d\u8c03\u7528\u5916\u90e8\u8fdb\u7a0b\u4ee3\u4ef7\u9ad8\u6602\uff0c\u8fc7\u5ea6\u4f7f\u7528\u4f1a\u5bfc\u81f4\u660e\u663e\u7684\u901f\u5ea6\u51cf\u6162\u3002\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5\uff08\u5982\u679c\u9002\u7528\uff09\u7f16\u5199\u7684\u811a\u672c\u548c\u7a0b\u5e8f\u5c06\u66f4\u5feb\uff0c\u9700\u8981\u66f4\u5c11\u7684\u4f9d\u8d56\u6027\uff0c\u5e76\u66f4\u597d\u5730\u7406\u89e3\u8bed\u8a00\u672c\u8eab\u3002\n\u672c\u4e66\u7684\u5185\u5bb9\u4e3a\u89e3\u51b3\u5728bash\u4e2d\u7f16\u5199\u7a0b\u5e8f\u548c\u811a\u672c\u65f6\u9047\u5230\u7684\u95ee\u9898\u63d0\u4f9b\u4e86\u53c2\u8003\u3002\u51fd\u6570\u683c\u5f0f\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u5408\u5e76\u5230\u4ee3\u7801\u4e2d\u3002\n\u8fd9\u662fsed\u3001awk\u3001perl\u548c\u5176\u4ed6\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\u3002\u4e0b\u9762\u7684\u51fd\u6570\u901a\u8fc7\u67e5\u627e\u6240\u6709\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u79fb\u52a8\u6765\u5de5\u4f5c\u3002\uff1a\u5185\u7f6e\u53d8\u91cf\u7528\u4e8e\u66ff\u4ee3\u4e34\u65f6\u53d8\u91cf\u3002\ntrim#string\uff08\uff09{#\u7528\u6cd5\uff1atrim#string&#34\uff1b\u793a\u4f8bstring&#34\uff1b\uff1a&#34\uff1b${1#&#34\uff1b${1%[\uff01[\uff1aspace:]*}&#34\uff1b}&#34;  :   &#34; ${{uz%&#34\uff1b${u##*[\uff01[\uff1a\u7a7a\u683c\uff1a]}&#34\uff1b}&#34;  printf&#39\uff1b%s\\n\u548c#39&#34; $_ &#34;}\n\u8fd9\u662fsed\u3001awk\u3001perl\u548c\u5176\u4ed6\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\u3002\u4e0b\u9762\u7684\u51fd\u6570\u901a\u8fc7\u6ee5\u7528\u5206\u8bcd\u6765\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u524d\u5bfc/\u5c3e\u968f\u7a7a\u683c\u548c\u622a\u65ad\u7a7a\u683c\u7684\u65b0\u5b57\u7b26\u4e32\u3002\n#shellcheck disable=SC2086\uff0cSC2048 trim#all\uff08\uff09{\u7528\u6cd5\uff1atrim#all&#34\uff1b\u793a\u4f8b\u5b57\u7b26\u4e32&#34\uff1bset-f set--$*printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$*&#34\uff1bset+f}\n$trim_all&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\u4f60\u597d\uff0cWorld$name=&#34\uff1b\u7ea6\u7ff0\u00b7\u5e03\u83b1\u514b\u662f\u6211\u7684\u540d\u5b57&#34;$ \u4fee\u526a\u5168\u90e8&#34$\u59d3\u540d&#34\uff1b\u7ea6\u7ff0\u00b7\u5e03\u83b1\u514b\u662f\u6211\u7684\u540d\u5b57\u3002\nbash\u7684\u7ed3\u679c&#39\uff1bs regex\u5339\u914d\u53ef\u4ee5\u7528\u4e8e\u66ff\u6362\u5927\u91cf\u7528\u4f8b\u4e2d\u7684sed\u3002\n\u8b66\u544a\uff1a\u8fd9\u662f\u5c11\u6570\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684bash\u7279\u6027\u4e4b\u4e00\u3002bash\u5c06\u4f7f\u7528\u7528\u6237\u5b89\u88c5\u7684\u4efb\u4f55regex\u5f15\u64ce&#39\uff1bs\u7cfb\u7edf\u3002\u5982\u679c\u4ee5\u517c\u5bb9\u6027\u4e3a\u76ee\u6807\uff0c\u8bf7\u575a\u6301\u4f7f\u7528POSIX\u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002\n\u6ce8\u610f\uff1a\u672c\u4f8b\u4ec5\u6253\u5370\u7b2c\u4e00\u4e2a\u5339\u914d\u7ec4\u3002\u5f53\u4f7f\u7528\u591a\u4e2a\u6355\u83b7\u7ec4\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002\nregex\uff08\uff09{#\u7528\u6cd5\uff1aregex&#34\uff1bstring&#34\uff1b&#34\uff1bregex&#34\uff1b[$1=~$2]]\u548cprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${BASH#u\u91cd\u65b0\u5339\u914d[1]&#34\uff1b}\n$#\u4fee\u526a\u524d\u5bfc\u7a7a\u767d\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#39\uff1b\u4f60\u597d&#39&#39;^\\s*\uff08*\uff09\u548c#39\uff1b\u4f60\u597d$#\u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u989c\u8272\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#34#FFFFFF&#34&#39;^\uff08#\uff1f\uff08[a-fA-F0-9]{6}|[a-fA-F0-9]{3}\uff09\uff09$&#39#FFFFFF$#\u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u989c\u8272\uff08\u65e0\u6548\uff09\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#34\uff1b\u7ea2\u8272\u548c#34&#39;^\uff08#\uff1f\uff08[a-fA-F0-9]{6}|[a-fA-F0-9]{3}\uff09\uff09$&#39\uff1b#\u65e0\u8f93\u51fa\uff08\u65e0\u6548\uff09\n\u662f_hex_color\uff08\uff09{if[$1=~^\uff08#\uff1f\uff08[a-fA-F0-9]{6}}|[a-fA-F0-9]{3}]\uff09$]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34; ${BASH_\u91cd\u8d5b[1]}&#34\uff1belse printf&#39\uff1b%s\\n\u548c#39&#34;\u9519\u8bef\uff1a$1\u662f\u65e0\u6548\u989c\u8272&#34;  \u8fd4\u56de1 fi}read-r coloris_hex_color&#34$\u989c\u8272&#34\uff1b|124;\u989c\u8272=&#34#FFFFFF&#34\uff1b#\u505a\u4e8b\u3002\nsplit\uff08\uff09{#\u7528\u6cd5\uff1asplit&#34\uff1bstring&#34\uff1bdelimiter&#34\uff1bIFS=$&#39\uff1b\\n&#39\uff1bread-d&#34\uff1b&ra arr&lt\uff1b&lt\uff1b&lt\uff1b&lt\uff1b&gt\uff1b&34\uff1b$1/$2/$&39\uff1b\\n&#39\uff1b]&#34;  printf&#39\uff1b%s\\n\u548c#39&#34; ${arr[@]}&#34\uff1b}\n$split\u548c#34\uff1b\u82f9\u679c\u3001\u6a59\u5b50\u3001\u68a8\u3001\u8461\u8404\u548c#34&#34;, &#34;AppleSRangeSpearsgraps$split\u548c#34\uff1b1, 2, 3, 4, 5 &#34;   &#34;,  &#34;12345#\u591a\u5b57\u7b26\u5206\u9694\u7b26\u4e5f\u6709\u6548\uff01$\u5206\u88c2\u548c#34\uff1b\u4f60\u597d---\u4e16\u754c---\u6211\u7684---\u540d\u5b57---\u662f---\u7ea6\u7ff0&#34&#34;--- &#34;\u6211\u7684\u540d\u5b57\u662f\u7ea6\u7ff0\n$strip#all&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[aeiou]\u548c#34\uff1bTh Qck Brwn\u5916\u6c47$strip#u all\u548c#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[\uff1a\u7a7a\u683c\uff1a][]\u548c#34\uff1bQuickBrownFox$strip#all&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;\u5feb&#34\uff1b\u68d5\u8272\u72d0\u72f8\n$strip&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[aeiou]\u548c#34\uff1b\u7b2c\u56db\u5feb\u68d5\u8272\u72d0\u72f8$strip&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[\uff1a\u7a7a\u683c\uff1a][]\u548c#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8\nurlencode\uff08\uff09{#\u7528\u6cd5\uff1aurlencode&#34\uff1bstring&#34\uff1blocal LC#u ALL=C for\uff08\uff08i=0\uff1bi&lt\uff1b${#1}\uff1bi++\uff09\uff1bdo:&#34${1:i:1}&#34\uff1b\u6848\u4f8b&#34\uff1b$#&#34;  \u5728[a-zA-Z0-9.~-]\uff09printf\u548c#39\uff1b%s&#39&#34; $_ &#34; ;;  *)  printf&#39\uff1b%%02X\u548c#39&#34;&#39; $_ &#34; ;;  esac\u5b8c\u6210\u4e86\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b}\n\u5982\u679c[[$var==*sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50\u5b57\u7b26\u4e32\u5728\u53d8\u91cf\u548c34\u4e2d\uff1bfi#\u9006\uff08\u5b50\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u7b26\u4e32\u4e2d\uff09\u3002\u5982\u679c[$var\uff01=*sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50#u\u5b57\u7b26\u4e32\u4e0d\u5728\u53d8\u91cf&#34\u4e2d\uff1bfi#\u8fd9\u4e5f\u9002\u7528\u4e8e\u9635\u5217\uff01\u5982\u679c[${arr[*]}==*\u5b50\u5b57\u7b26\u4e32*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50\u5b57\u7b26\u4e32\u5728\u6570\u7ec4\u4e2d&#34; \u83f2\n34\u4f8b$var&#34\uff1b\u5728*sub_string*\uff09#\u505a\u4e8b*sub_string2*\uff09#\u505a\u66f4\u591a\u7684\u4e8b\uff1b*\uff09#\u5176\u4ed6\u7684\u4ee5\u6492\n\u5982\u679c[[$var==sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4ee5sub_\u5b57\u7b26\u4e32\u5f00\u5934&#34; fi#\u9006\uff08var\u4e0d\u4ee5sub#u\u5b57\u7b26\u4e32\u5f00\u5934\uff09\u3002\u5982\u679c[[$var\uff01=sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u5f00\u5934&#34; \u83f2\n\u5982\u679c[$var==*sub_string]]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e&#34; fi#\u9006\uff08var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff09\u3002\u5982\u679c[$var\uff01=*\u5b50\u5b57\u7b26\u4e32]]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e&#34; \u83f2\n\u542f\u7528extdebug\u5141\u8bb8\u8bbf\u95eeBASH_ARGV\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u53cd\u5411\u5b58\u50a8\u5f53\u524d\u51fd\u6570\u7684\u53c2\u6570\u3002\nreverse#array\uff08\uff09{#\u7528\u6cd5\uff1areverse#array&#34\uff1barray&#34\uff1bshopt-s extdebug f\uff08\uff09\uff08printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${BASH#ARGV[@]&#34\uff1b\uff09\uff1bf&#34\uff1b$@&#34;  shopt-u extdebug}\n\u521b\u5efa\u4e34\u65f6\u5173\u8054\u6570\u7ec4\u3002\u5f53\u8bbe\u7f6e\u5173\u8054ArrayValue\u5e76\u53d1\u751f\u91cd\u590d\u8d4b\u503c\u65f6\uff0cbash\u4f1a\u8986\u76d6\u8be5\u952e\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u5220\u9664\u91cd\u590d\u7684\u9635\u5217\u3002\nremove_array_dups\uff08\uff09{#\u7528\u6cd5\uff1aremove_array_dups&#34\uff1barray&#34\uff1bdeclare-tmp_array for i in&#34\uff1b$@&#34\uff1bdo[$i]]\u548cIFS=&#34\uff1b&#34\uff1btmp#u array[&#=1\u5b8c\u6210\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${\uff01tmp_\u6570\u7ec4[@]}&#34\uff1b}\n$remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 5 5 5 5 512345$arr=\uff08\u7ea2-\u7ea2-\u7eff-\u84dd\uff09$remove_array_dups\u548c#34${arr[@]}&#34\uff1b\u7ea2\u7eff\u84dd\n$array=\uff08\u7ea2\u7eff\u84dd\u9ec4\u68d5\u8272\uff09$random_array_element&#34${array[@]}&#34\uff1b\u9ec4\u8272#\u4e5f\u53ef\u4ee5\u4f20\u9012\u591a\u4e2a\u53c2\u6570\u3002$\u968f\u673a\u6570\u7ec4\u5143\u7d2012345673\n\u6bcf\u6b21\u8c03\u7528printf\u65f6\uff0c\u90fd\u4f1a\u6253\u5370\u4e0b\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u3002\u5f53\u6253\u5370\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u5b83\u4f1a\u518d\u6b21\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u3002\narr=\uff08\u82f9\u679c\u6a59\u5b50\u756a\u8304\uff09#\u5143\u7d20\u548c\u7d22\u5f15\u3002\u56e0\u4e3a\u6211\u5728&#34${\uff01\u554a[@]}&#34\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${arr[i]}&#34\uff1b\u5b8c\u6210#\u66ff\u4ee3\u65b9\u6cd5\u3002\u5bf9\u4e8e\uff08\uff08i=0\uff1bi&lt\uff1b${#arr[@]}\uff1bi++\uff09\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${arr[i]}&#34\uff1b\u5b8c\u6210\n#\u8d2a\u5a6a\u7684\u4f8b\u5b50\u3002\u5b58\u6863*\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u5728dir\u4e2d\u4fdd\u5b58PNG\u6587\u4ef6\u3002\u7528\u4e8e~/Pictures/*\u4e2d\u7684\u6587\u4ef6\u3002\u5df4\u5e03\u4e9a\u65b0\u51e0\u5185\u4e9a\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u904d\u5386\u76ee\u5f55\u3002\u5bf9\u4e8e~/Downloads/*/\u4e2d\u7684dir\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u7f72\u957f&#34\uff1b\u5b8c\u6210#\u652f\u67b6\u6269\u5c55\u3002\u5bf9\u4e8e/path/to/parentdir/{file1\uff0cfile2\uff0csubdir/file3}\u4e2d\u7684\u6587\u4ef6\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u9012\u5f52\u8fed\u4ee3\u3002shopt-s globstar\u7528\u4e8e~/Pictures/***\u4e2d\u7684\u6587\u4ef6\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210shopt-u globstar\n#Bash&lt\uff1b4\uff08\u4e22\u5f03\u7a7a\u884c\uff09\u3002IFS=$\u548c#39\uff1b\\n&#39\uff1b\u9605\u8bfb-d&#34&#34; -ra\u6587\u4ef6_\u6570\u636e&lt&#34;\u6587\u4ef6&#34\uff1b#Bash&lt\uff1b4\uff08\u4fdd\u7559\u7a7a\u884c\uff09\u3002\u800cread-r\u884c\uff1bdo file_data+=\uff08&#34\uff1b$line&#34\uff1b\uff09\u5b8c\u6210&lt&#34;\u6587\u4ef6&#34\uff1b#Bash 4+mapfile-t file_data&lt&#34;\u6587\u4ef6&#34\uff1b\nhead\uff08\uff09{\u7528\u6cd5\uff1ahead&#34\uff1bn&#34\uff1bfile&#34\uff1bmapfile-tn&#34\uff1b$1&#34\uff1bline&lt\uff1b&#34\uff1b$2&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34$#line[@]\ntail\uff08\uff09{\u7528\u6cd5\uff1atail&#34\uff1bn&#34\uff1b&#34\uff1bfile&#34\uff1bmapfile-tn 0\u884c&lt\uff1b&#34\uff1b$2&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${line[@]\uff1a$1&#34\uff1b]\n$tail 2~/\u3002bashrc#\u542f\u7528tmux\u3002#[-z&#34\uff1b$TMUX&#34\uff1b]]&amp&amp\uff1bexec tmux$tail 1~/\u3002bashrc#[-z&#34\uff1b$TMUX&#34\uff1b]]&amp&amp\uff1b\u6267\u884c\u5b98tmux\nlines\uff08\uff09{\u7528\u6cd5\uff1alines&#34\uff1bfile&#34\uff1bmapfile-tn 0 lines&lt\uff1b&#34\uff1b$1&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${#lines[@]}&#34\uff1b}\n\u8be5\u65b9\u6cd5\u4f7f\u7528\u7684\u5185\u5b58\u6bd4mapfile\u65b9\u6cd5\u5c11\uff0c\u5728bash 3\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u5bf9\u4e8e\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5b83\u7684\u901f\u5ea6\u8f83\u6162\u3002\nlines_loop\uff08\uff09{\u7528\u6cd5\uff1alines_loop&#34\uff1bfile&#34\uff1bcount=0\uff0c\u800cIFS=read-r#do\uff08\uff08count++\uff09done&lt\uff1b&#34\uff1b$1&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$count 34\uff1b}\n\u5176\u5de5\u4f5c\u539f\u7406\u662f\u5c06glob\u7684\u8f93\u51fa\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u53c2\u6570\u7684\u6570\u91cf\u3002\n#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u3002$count~/Downloads/*232#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u76ee\u5f55\u3002$count~/Downloads/*/45#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709jpg\u6587\u4ef6\u3002$\u8ba1\u6570~/Pictures/*\u3002jpg64\nextract\uff08\uff09{\u7528\u6cd5\uff1aextract file&#34\uff1bopening marker&#34\uff1b&#34\uff1bclosing marker&#34\uff1b\u800cIFS=$&#39\uff1b\\n&#39\uff1bread-r line\uff1bdo[$extract&amp\uff1b$line\uff01=&#34\uff1b$3&#34\uff1b]&amp&amp\uff1bprintf&#39\uff1b%s\\n\u548c#39&#34; $\u7b2c34\u884c\uff1b[$line==&#34\uff1b$2&#34\uff1b]&amp&amp\uff1b\u6458\u5f55=1[$line==&#34\uff1b$3&#34\uff1b]]&amp&amp\uff1b\u63d0\u53d6=\u5b8c\u6210&lt&#34; $1 &#34;}\ndirname\uff08\uff09{#\u7528\u6cd5\uff1adirname&#34\uff1bpath&#34\uff1blocal tmp=${1:-.}[[$tmp\uff01=*[\uff01/]*]&amp&amp\uff1b{printf&#39\uff1b/\\n&#39\uff1breturn}tmp=${tmp%%&#34\uff1b${tmp###*[\uff01/]}&#34\uff1b}[$tmp\uff01=*/*]&amp&amp\uff1b{printf&#39\uff1b\\n&#39\uff1breturn}tmp=${tmp%/*}tmp=${tmp%&#34\uff1b${tmp###*[\uff01/]}&#34\uff1b}printf&#39\uff1b%s\\n\u548c#39&#34; ${tmp:-/}&#34\uff1b}\nbasename\uff08\uff09{\u7528\u6cd5\uff1abasename&#34\uff1bpath&#34\uff1b[&#34\uff1b\u540e\u7f00&#34\uff1b]\u672c\u5730tmp tmp=${1%&#34\uff1b${1##*[\uff01/]}&#34\uff1b}tmp=${tmp##*/}tmp=${tmp%&#34\uff1b${2/&#34\uff1b$tmp&#34\uff1b}&#34;}  printf&#39\uff1b%s\\n\u548c#39&#34; ${tmp:-/}&#34\uff1b}\n$hello_world=&#34\uff1b\u4ef7\u503c&#34\uff1b#\u521b\u5efa\u53d8\u91cf\u540d\u3002$var=&#34\uff1b\u4e16\u754c&#34\uff1b\u7f8e\u5143ref=&#34\uff1b\u4f60\u597d\uff0c$var&#34\uff1b#\u6253\u5370\u5b58\u50a8\u5728&#39\u4e2d\u7684\u53d8\u91cf\u540d\u7684\u503c\uff1b\u4f60\u597d$var&#39\uff1b$printf&#39\uff1b%s\\n\u548c#39&#34; ${\uff01ref}&#34\uff1b\u4ef7\u503c\n\u4e0e\u666e\u904d\u7684\u770b\u6cd5\u76f8\u53cd\uff0c\u5229\u7528\u539f\u59cb\u9003\u9038\u5e8f\u5217\u6ca1\u6709\u95ee\u9898\u3002\u4f7f\u7528tput\u63d0\u53d6\u4e0e\u624b\u52a8\u6253\u5370\u76f8\u540c\u7684ANSI\u5e8f\u5217\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0ctput\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4fbf\u643a\u3002\u6709\u5f88\u591atput\u53d8\u4f53\uff0c\u6bcf\u4e2a\u90fd\u6709\u4e0d\u540c\u7684\u547d\u4ee4\u548c\u8bed\u6cd5\uff08\u5728FreeBSD\u7cfb\u7edf\u4e0a\u5c1d\u8bd5tput setaf 3\uff09\u3002\u539f\u59cb\u5e8f\u5217\u5f88\u597d\u3002\n\u6ce8\u610f\uff1a\u5728\u4e0b\u9762\u4efb\u4f55\u4ee3\u7801\u524d\u52a0\u4e0a2\uff0c\u5c06\u5176\u53d8\u6210&#39\uff1bs\u6548\u679c\u5173\u95ed\uff08\u793a\u4f8b\uff1a21=\u7c97\u4f53\u6587\u672c\u5173\u95ed\uff0c22=\u6a21\u7cca\u6587\u672c\u5173\u95ed\uff0c23=\u659c\u4f53\u6587\u672c\u5173\u95ed\uff09\u3002\n\u5c55\u5f00\u5230\u4ee5VAR\u5f00\u5934\u7684\u53d8\u91cf\u540d\u7684IFS\u5206\u9694\u5217\u8868\u3002\u5982\u679c\u53cc\u5f15\u53f7\uff0c\u6bcf\u4e2a\u53d8\u91cf\u540d\u5c06\u5c55\u5f00\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u8bcd\u3002\n\u4eceN\u4e2a\u5b57\u7b26\u5230N\u4e2a\u5b57\u7b26\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32\u3002\uff08${VAR:10:10}\uff1a\u4ecechar 10\u5230char 20\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32\uff09\n#\u8bed\u6cd5\uff1a{&lt\uff1b\u5f00\u59cb&gt\uff1b.&lt\uff1b\u7ed3\u675f&gt\uff1b}\u6253\u5370\u6570\u5b571-100\u3002echo{1..100}#\u6253\u5370\u6d6e\u52a8\u8303\u56f4\u3002\u56de\u58f01\u3002{1..9}#\u6253\u5370\u5b57\u7b26a-z.echo{a..z}echo{a..z}#\u5d4c\u5957\u3002echo{A..Z}{0..9}#\u6253\u5370\u96f6\u586b\u5145\u6570\u5b57\u3002#\u8b66\u544a\uff1abash4+echo{01..100}#\u66f4\u6539\u589e\u91cf\u91d1\u989d\u3002#\u8bed\u6cd5\uff1a{&lt\uff1b\u5f00\u59cb&gt\uff1b.&lt\uff1b\u7ed3\u675f&gt\uff1b&lt\uff1b\u9012\u589e&gt\uff1b}\u8b66\u544a\uff1abash4+echo{1..10..2}#\u589e\u52a02\u3002\n\u5982\u679c\u6587\u4ef6\u6bd4\u6587\u4ef62\u65b0\uff08\u4f7f\u7528\u4fee\u6539\u65f6\u95f4\uff09\uff0c\u6216\u8005\u6587\u4ef6\u5b58\u5728\u800c\u6587\u4ef62\u4e0d\u5b58\u5728\u3002\n\u5982\u679c\u6587\u4ef6\u65e9\u4e8e\u6587\u4ef62\uff08\u4f7f\u7528\u4fee\u6539\u65f6\u95f4\uff09\uff0c\u6216\u8005\u6587\u4ef62\u5b58\u5728\u800c\u6587\u4ef6\u4e0d\u5b58\u5728\u3002\n#\u5982\u679cvar2\u5927\u4e8evar\uff0c\u5219\u5c06var\u7684\u503c\u8bbe\u7f6e\u4e3avar2\u3002#var:\u8981\u8bbe\u7f6e\u7684\u53d8\u91cf\u3002#var2&gt\uff1bvar\uff1a\u8981\u6d4b\u8bd5\u7684\u6761\u4ef6\u3002#\uff1fvar2\uff1a\u5982\u679c\u6d4b\u8bd5\u6210\u529f\u3002#\u5982\u679c\u6d4b\u8bd5\u5931\u8d25\u3002\uff08\uff08var=var 2&gt\uff1bvar\uff1fvar 2:var\uff09\uff09\n\u9677\u9631\u5141\u8bb8\u811a\u672c\u5728\u5404\u79cd\u4fe1\u53f7\u4e0a\u6267\u884c\u4ee3\u7801\u3002\u5728pxltrm\uff08\u4e00\u4e2a\u7528bash\u7f16\u5199\u7684\u50cf\u7d20\u827a\u672f\u7f16\u8f91\u5668\uff09\u4e2d\uff0c\u9677\u9631\u7528\u4e8e\u5728\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u65f6\u91cd\u65b0\u7ed8\u5236\u7528\u6237\u754c\u9762\u3002\u53e6\u4e00\u4e2a\u7528\u4f8b\u662f\u5728\u811a\u672c\u9000\u51fa\u65f6\u6e05\u7406\u4e34\u65f6\u6587\u4ef6\u3002\n\u5e94\u8be5\u5728\u811a\u672c\u5f00\u59cb\u9644\u8fd1\u6dfb\u52a0\u9677\u9631\uff0c\u4ee5\u4fbf\u6355\u83b7\u4efb\u4f55\u65e9\u671f\u9519\u8bef\u3002\n\u5982\u679c\u4e0d\u9700\u8981unicode\uff0c\u53ef\u4ee5\u7981\u7528\u5b83\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7ed3\u679c\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662fneofetch\u548c\u5176\u4ed6\u7a0b\u5e8f\u5df2\u7ecf\u6709\u4e86\u660e\u663e\u7684\u6539\u8fdb\u3002\n\u6ce8\u610f\uff1a\u6709\u65f6\u4eba\u4eec\u53ef\u80fd\u6709\u5145\u5206\u7684\u7406\u7531\u4f7f\u7528#/bin/bash\u6216\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u53e6\u4e00\u4e2a\u76f4\u63a5\u8def\u5f84\u3002\n&#34; $\u4e3b\u673a\u540d&#34\uff1b#\u6ce8\u610f\uff1a\u6b64\u53d8\u91cf\u53ef\u80fd\u4e3a\u7a7a\u3002#\uff08\u53ef\u9009\uff09\u5c06\u56de\u9000\u8bbe\u7f6e\u4e3ahostname\u547d\u4ee4&#34; ${HOSTNAME:-$\uff08HOSTNAME\uff09}&#34\uff1b\n\u8fd9\u53ef\u4ee5\u7528\u4e8e\u4e3a\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6dfb\u52a0\u6761\u4ef6\u652f\u6301\uff0c\u800c\u65e0\u9700\u8c03\u7528uname\u3002\n\u6bcf\u6b21\u4f7f\u7528$RANDOM\u65f6\uff0c\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e0\u548c32767\u4e4b\u95f4\u7684\u4e0d\u540c\u6574\u6570\u3002\u6b64\u53d8\u91cf\u4e0d\u5e94\u7528\u4e8e\u4efb\u4f55\u4e0e\u5b89\u5168\u6027\u76f8\u5173\u7684\u5185\u5bb9\uff08\u5305\u62ec\u52a0\u5bc6\u5bc6\u94a5\u7b49\uff09\u3002\n\u5728\u7eafbash\u548cstty/tput\u4e2d\u7f16\u5199\u811a\u672c\u65f6\uff0c\u8fd9\u5f88\u65b9\u4fbf\u3002\nget_term_size\uff08\uff09{#\u7528\u6cd5\uff1aget_term_size#\uff08\uff1a\uff1a\uff09\u662f\u4e00\u4e2a\u5fae\u7761\u7720\uff0c\u4ee5\u786e\u4fdd\u53d8\u91cf\u7acb\u5373\u5bfc\u51fa\u3002shopt-s checkwinsize\uff1b\uff08\uff1a\uff1a\uff1a\uff09printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$LINES$COLUMNS&#34\uff1b}\n\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u83b7\u53d6\u7a97\u6237\u5c3a\u5bf8\u56fe\u5c3a\u5bf8\u5370\u5237F\u548c39\uff1b%b\u548c39\uff1bb\u548c[35\uff1b39\uff1bb\u548c[35\uff1b34\uff1bb\u548c39\uff1bb\u548c39\uff1b\u9605\u8bfb-t-t-t-t 0.05-sra\u672f\u8bedt t t-t-t 0.05-sra\u672f\u8bedt-t-0.05-sra\u672f\u8bed\uff08sra\u672f\u8bed\uff09t-t-t-sra\u672f\u8bed\uff09t-t-t-t-0.05-sra\u672f\u8bed\uff08sra\u672f\u8bed\uff09t-t-t-t-t\uff09t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-#34\uff1b}\nget_cursor_pos\uff08\uff09{#\u7528\u6cd5\uff1aget_cursor_pos IFS=&#39\uff1b[#&#39\uff1bread-p$&#39\uff1b\\e[6n&#39\uff1b-dr-rs y x#printf 39\uff1b%s\\n&#39\uff1b&#34\uff1b$x$y&#34\uff1b]\nhex_to_rgb\uff08\uff09{\u7528\u6cd5\uff1ahex_to_rgb&#34\uff1b#FFFFFF&#34\uff1b#hex_to_rgb&#34\uff1b000000&#34\uff1b\uff1a&#34\uff1b${1/\\\\\\\\}34\uff1b\uff08r=16#${0:2}\uff0cg=16#${2:2}\uff0cb=16#${4:2}\uff09printf&#39\uff1b%s\\n\u548c#39&#34; $r$g$b&#34\uff1b}\n#\u5c0fC\u98ce\u683c\u3002\u5bf9\u4e8e\uff08\uff1bi++&lt\uff1b10\uff1b\uff09\uff09{echo&#34\uff1b$i&#34\uff1b}\u672a\u8bb0\u5f55\u7684\u65b9\u6cd5\u3002\u56e0\u4e3a{1..10}\u4e2d\u7684i\uff1b{echo&#34\uff1b$i&#34\uff1b}\u81a8\u80c0\u56e0\u4e3a{1..10}\u4e2d\u7684i\uff1b\u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210#C\u98ce\u683c\u3002\uff08i=0\uff1bi&lt\uff1b=10\uff1bi++\uff09\uff1b\u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210\n#\u6b63\u89c4\u65b9\u6cd5f\uff08\uff09{echo hi\uff1b}#\u4f7f\u7528\u5b50shell f\uff08\uff09\uff08echo hi\uff09#\u4f7f\u7528\u7b97\u672f#\u8fd9\u53ef\u4ee5\u7528\u6765\u5206\u914d\u6574\u6570\u503c\u3002#\u793a\u4f8b\uff1afa=1 35; fa++f\uff08\uff09\uff08$1\uff09\uff09#\u4f7f\u7528\u6d4b\u8bd5\u3001\u5faa\u73af\u7b49#\u6ce8\u610f\uff1a'while'\u3001'until'\u3001'case'\u3001'\uff08\uff08\uff09\uff09'\u3001'[[]\uff09\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002f\uff08\uff09\u5982\u679c\u4e3a\u771f\uff1b\u7136\u540e\u662f\u56de\u58f0&#34$1 &#34; ;  fi f\uff08\uff09\u4ee3\u8868i in&#34\uff1b$@&#34;;  \u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210\n#\u4e00\u884c#\u6ce8\u610f\uff1a\u7b2c\u4e09\u6761\u8bed\u53e5\u53ef\u80fd\u4f1a\u5728\u7b2c\u4e00\u6761\u8bed\u53e5\u4e3a\u771f\u65f6\u8fd0\u884c[$var==hello]]&amp&amp\uff1becho hi | | echo bye[$var==\u4f60\u597d]]&amp&amp\uff1b{echo hi\uff1becho\u90a3\u91cc\uff1b}||echo bye#\u591a\u884c\uff08\u65e0\u5176\u4ed6\uff0c\u5355\u8bed\u53e5\uff09#\u6ce8\u610f\uff1a\u9000\u51fa\u72b6\u6001\u53ef\u80fd\u4e0eif\u8bed\u53e5[[$var==hello]]\u4e0d\u540c&amp&amp\uff1becho hi#\u591a\u884c\uff08\u65e0\u5176\u4ed6\uff09[$var==hello]]&amp&amp\uff1b{echo hi#..}\n\uff1a\u5185\u7f6e\u53ef\u7528\u4e8e\u907f\u514d\u5728case\u8bed\u53e5\u4e2d\u91cd\u590d\u53d8\u91cf=\u3002$\u53d8\u91cf\u5b58\u50a8\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\u59cb\u7ec8\u6210\u529f\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4f7f\u7528\u5b83\u5b58\u50a8\u53d8\u91cf\u503c\u3002\n#\u4fee\u6539\u4e86Neofetch\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\u300234\u4f8b$OSTYPE&#34\uff1b\u5728&#34\uff1b\u8fbe\u5c14\u6587&#34\uff1b*\uff09\uff1a&#34;\u9a6c\u79d1\u65af&#34&#34;linux&#34\uff1b*\uff09\uff1a&#34;Linux&#34\uff1b\uff1b*&#34;bsd&#34\uff1b*|&#34;\u873b\u8713&#34\uff1b|&#34;\u6bd4\u7279\u745e\u683c\uff08bitrig&#34\uff1b\uff09\uff1a&#34;BSD&#34&#34;\u897f\u683c\u6e29&#34\uff1b|&#34;msys&#34\uff1b|&#34;win32&#34\uff1b\uff09\uff1a&#34;\u7a97\u6237&#34\uff1b\uff1b*\uff09printf&#39\uff1b%s\\n\u548c#39&#34;\u68c0\u6d4b\u5230\u672a\u77e5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6b63\u5728\u4e2d\u6b62&#34;  &gt&amp\uff1b2.\u51fa\u53e31\uff1b\uff1besac#\u6700\u540e\uff0c\u8bbe\u7f6e\u53d8\u91cf\u3002os=&#34\uff1b$\\U&#34;\nread#u sleep\uff08\uff09{#\u7528\u6cd5\uff1aread#u sleep 1#read#u sleep 0.2 read-rt&#34\uff1b$1&#34\uff1b&lt\uff1b&gt\uff1b&lt\uff1b\uff08\uff1a\uff09|\uff1a}\n\u5bf9\u4e8e\u6027\u80fd\u5173\u952e\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6253\u5f00\u548c\u5173\u95ed\u8fc7\u591a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u4e0d\u7ecf\u6d4e\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u8bfb\u53d6\u8c03\u7528\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5206\u914d\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff1a\n\u6267\u884c{sleep_fd}&lt&gt&\u4e66\u4fe1\u7535\u62a5\uff1b\uff08\uff1a\uff09\u800c\u4e00\u4e9b\u5feb\u901f\u6d4b\u8bd5\uff1bdo#\u76f8\u5f53\u4e8esleep 0.001 read-t0.001-u$sleep#u fd done\n#\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4efb\u4f55\u4e00\u79cd\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002\u7c7b\u578b-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\u54c8\u5e0c\u53ef\u6267\u884c\u6587\u4ef6\\u name&amp&gt/dev/null\u547d\u4ee4-v\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null#\u4f5c\u4e3a\u6d4b\u8bd5\u3002\u5982\u679c\u7c7b\u578b\u4e3a-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\uff1b\u7136\u540e#\u7a0b\u5e8f\u8fdb\u5165\u8def\u5f84\u3002fi#\u9006\u3002\u5982\u679c\u7c7b\u578b-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\uff1b\u90a3\u4e48#\u7a0b\u5e8f\u4e0d\u5728\u8def\u5f84\u4e2d\u3002fi#\u793a\u4f8b\uff08\u5982\u679c\u672a\u5b89\u88c5\u7a0b\u5e8f\uff0c\u8bf7\u63d0\u524d\u9000\u51fa\uff09\u3002\u5982\u679c\u7c7b\u578b-p\u8f6c\u6362&amp&gt/dev/null\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u9519\u8bef\uff1a\u672a\u5b89\u88c5\u8f6c\u6362\uff0c\u6b63\u5728\u9000\u51fa&#34;  1\u53f7\u51fa\u53e3\nBash\u7684printf\u6709\u4e00\u4e2a\u83b7\u53d6\u65e5\u671f\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u6765\u4ee3\u66ffdate\u547d\u4ee4\u3002\ndate\uff08\uff09{\u7528\u6cd5\uff1adate&#34\uff1bformat&#34\uff1b#\u53c2\u89c1\uff1a&#39\uff1bman strftime&#39\uff1b\u83b7\u53d6format.printf&#34\uff1b\uff08$1\uff09T\\\\n&#34\uff1b&#34\uff1b-1&#34\uff1b}\n#\u4f7f\u7528\u4e0a\u8ff0\u529f\u80fd\u3002$\u65e5\u671f&#34\uff1b%a%d%b-%l:%M%p&#34\uff1b6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00#\u76f4\u63a5\u4f7f\u7528printf\u3002$printf&#39\uff1b%\uff08%a%d%b-%l:%M%p\uff09T\\n\u548c#39&#34;-1 &#34;6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00#\u4f7f\u7528printf\u5206\u914d\u53d8\u91cf\u3002$printf-v\u65e5\u671f\u548c#39\uff1b%\uff08%a%d%b-%l:%M%p\uff09T\\n\u548c#39&#39;-1 &#39;$  printf&#39\uff1b%s\\n\u548c#39&#34; $\u65e5\u671f&#34\uff1b6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00\n$\uff1a\\\\u#\u5c55\u5f00\u53c2\u6570\uff0c\u5c31\u50cf\u5b83\u662f\u4e00\u4e2a\u63d0\u793a\u5b57\u7b26\u4e32\u4e00\u6837\u3002$printf&#39\uff1b%s\\n\u548c#39&#34; ${@P}&#34\uff1b\u9ed1\u8272\n\uff08N=0\uff1bN&lt\uff1b16\uff1bN&lt\uff1b16\uff1bN\uff1bN&lt\uff1b16\uff1bN\uff1bN&lt\uff1b16\uff1bN\uff1bN\uff1bN&lt\uff1b16\uff1bN+N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff08N\uff0934\uff1bN\uff0934\uff1bN\uff08N\uff08N\uff08N\uff08N\uff08N\uff08N\uff09N\uff1bN\uff09N\uff08N\uff09N\uff1bN\uff09N\uff1bN\uff1bN\uff09N\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff09N\uff09N\uff09N\uff09N\uff1bN\uff09N\uff09N\uff09N\uff09N\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff0934\uff1bN\uff09%${#C}:1}&#34&#34;  $\uff08\uff08B%16\uff09\uff09\u548c#34\uff1b\uff1b3 | 5 | 7 | 9\uff09\u6253\u5370\u548c#39\uff1b%02x-#39&#34; $B&#34\uff1b\uff1b*\uff09printf&#39\uff1b%02x\u548c#39&#34; $B&#34\uff1b\uff1besac\u5b8c\u6210\u4e86\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b}\n\u8fd9\u662f\u4e00\u79cd\u7ed8\u5236\u8fdb\u5ea6\u6761\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u65e0\u9700\u51fd\u6570\u672c\u8eab\u4e2d\u7684for\u5faa\u73af\u3002\nbar\uff08\uff09{#\u7528\u6cd5\uff1abar 1 10#^--\u7ecf\u8fc7\u7684\u767e\u5206\u6bd4\uff080-100\uff09\u3002#^--\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\u7684\u603b\u957f\u5ea6\u3002\uff08\uff08\u7ecf\u8fc7\u7684=$1*$2/100\uff09\uff09#\u7528\u7a7a\u683c\u521b\u5efa\u6761\u5f62\u56fe\uff1bprintf-v\u603b\u8ba1\u548c#34\uff1b%$\uff08\uff08$2-\u5df2\u901d\uff09\uff09s\u548c#34\uff1bprintf&#39\uff1b%s\\r&#39&#34;[${prog//-}${total}]&#34\uff1b}\n\uff08i=0\uff1bi&lt\uff1b=100\uff1bi++\uff09\uff1bdo#Pure bash micro sleeps\uff08\u4f8b\u5982\uff09\u3002\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\u6253\u5370\u6761\u3002\u9152\u5427&#34$\u6211&#34&#34;10 &#34; \u5b8c\u6210\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b\nget#u functions\uff08\uff09{#\u7528\u6cd5\uff1aget#u functions IFS=$&#39\uff1b\\n&#39\uff1bread-d&#34\uff1b&#34\uff1b&#ra functions&lt\uff1b\uff1b\uff08declare-F\uff09printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${functions[@]//declare-F}&#34\uff1b}\n\u8fd9\u5c06\u8fd0\u884c\u7ed9\u5b9a\u7684\u547d\u4ee4\u5e76\u4fdd\u6301\u5176\u8fd0\u884c\uff0c\u5373\u4f7f\u5728\u7ec8\u7aef\u6216SSH\u8fde\u63a5\u7ec8\u6b62\u540e\u4e5f\u662f\u5982\u6b64\u3002\u6240\u6709\u8f93\u51fa\u90fd\u88ab\u5ffd\u7565\u3002\nbkr\uff08\uff09{\uff08nohup&#34\uff1b$@&#34\uff1b&amp\uff1b&gt\uff1b/dev/null&amp\uff1b\uff09}bkr/\u4e00\u4e9b\u5267\u672c\u3002sh#\u4e00\u4e9b\u811a\u672c\u3002sh\u73b0\u5728\u6b63\u5728\u540e\u53f0\u8fd0\u884c\n\u5b83\u4f7f\u7528\u672c\u5730namerefs\u6765\u907f\u514d\u4f7f\u7528var=$\uff08some_func\uff09\u6837\u5f0f\u7684\u547d\u4ee4\u66ff\u6362\u51fd\u6570\u8f93\u51facaptu\n......", "note_en": "The goal of this book is to document commonly-known and lesser-known methods of doing various tasks using only built-in  bash features. Using the snippets from this bible can help remove unneeded dependencies from scripts and in most cases make them faster. I came across these tips and discovered a few while developing  neofetch,  pxltrm and other smaller projects.\n The snippets below are linted using  shellcheck and tests have been written where applicable. Want to contribute? Read the  CONTRIBUTING.md. It outlines how the unit tests work and what is required when adding snippets to the bible.\n See something incorrectly described, buggy or outright wrong? Open an issue or send a pull request. If the bible is missing something, open an issue and a solution will be found.\n         A collection of pure  bash alternatives to external processes and programs. The  bash scripting language is more powerful than people realise and most tasks can be accomplished without depending on external programs.\n Calling an external process in  bash is expensive and excessive use will cause a noticeable slowdown. Scripts and programs written using built-in methods ( where applicable) will be faster, require fewer dependencies and afford a better understanding of the language itself.\n The contents of this book provide a reference for solving problems encountered when writing programs and scripts in  bash. Examples are in function formats showcasing how to incorporate these solutions into code.\n   This is an alternative to  sed,  awk,  perl and other tools. Thefunction below works by finding all leading and trailing white-space andremoving it from the start and end of the string. The  : built-in is used in place of a temporary variable.\n  trim_string() {   # Usage: trim_string &#34; example string &#34;  :   &#34; ${1 #  &#34; ${1 %%[![:space:]] *} &#34;} &#34;  :   &#34; ${_ %  &#34; ${_ ##*[![:space:]]} &#34;} &#34;  printf   &#39;%s\\n &#39;   &#34; $_ &#34;}\n    This is an alternative to  sed,  awk,  perl and other tools. Thefunction below works by abusing word splitting to create a new stringwithout leading/trailing white-space and with truncated spaces.\n  # shellcheck disable=SC2086,SC2048 trim_all() {   # Usage: trim_all &#34; example string &#34;  set -f  set --  $*  printf   &#39;%s\\n &#39;   &#34; $* &#34;  set +f}\n  $ trim_all   &#34; Hello, World  &#34;Hello, World$ name=  &#34; John Black is my name.  &#34;$ trim_all   &#34; $name &#34;John Black is my name.\n  The result of  bash&#39;s regex matching can be used to replace  sed for alarge number of use-cases.\n CAVEAT: This is one of the few platform dependent  bash features. bash will use whatever regex engine is installed on the user&#39;s system.Stick to POSIX regex features if aiming for compatibility.\n CAVEAT: This example only prints the first matching group. When usingmultiple capture groups some modification is needed.\n  regex() {   # Usage: regex &#34;string&#34; &#34;regex&#34; [[  $1  =~  $2 ]]  &amp;&amp;  printf   &#39;%s\\n &#39;   &#34; ${BASH_REMATCH[1]} &#34;}\n  $   # Trim leading white-space.$ regex   &#39; hello &#39;   &#39;^\\s*(.*) &#39;hello$   # Validate a hex color.$ regex   &#34;#FFFFFF &#34;   &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ &#39;  #FFFFFF$   # Validate a hex color (invalid).$ regex   &#34;red &#34;   &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ &#39;  # no output (invalid)\n  is_hex_color() {  if [[  $1  =~ ^(  #?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then  printf   &#39;%s\\n &#39;   &#34; ${BASH_REMATCH[1]} &#34;  else  printf   &#39;%s\\n &#39;   &#34;error:  $1 is an invalid color. &#34;  return 1  fi} read -r coloris_hex_color   &#34; $color &#34;  || color=  &#34;#FFFFFF &#34;  # Do stuff.\n     split() {   # Usage: split &#34;string&#34; &#34;delimiter&#34; IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra arr  &lt;&lt;&lt;   &#34;${1//$2/$&#39;\\n&#39;} &#34;  printf   &#39;%s\\n &#39;   &#34; ${arr[@]} &#34;}\n  $ split   &#34;apples,oranges,pears,grapes &#34;   &#34;, &#34;applesorangespearsgrapes$ split   &#34;1, 2, 3, 4, 5 &#34;   &#34;,  &#34;12345  # Multi char delimiters work too!$ split   &#34;hello---world---my---name---is---john &#34;   &#34;--- &#34;helloworldmynameisjohn\n                            $ strip_all   &#34;The Quick Brown Fox &#34;   &#34;[aeiou] &#34;Th Qck Brwn Fx$ strip_all   &#34;The Quick Brown Fox &#34;   &#34;[[:space:]] &#34;TheQuickBrownFox$ strip_all   &#34;The Quick Brown Fox &#34;   &#34;Quick  &#34;The Brown Fox\n     $ strip   &#34;The Quick Brown Fox &#34;   &#34;[aeiou] &#34;Th Quick Brown Fox$ strip   &#34;The Quick Brown Fox &#34;   &#34;[[:space:]] &#34;TheQuick Brown Fox\n             urlencode() {   # Usage: urlencode &#34;string&#34;  local LC_ALL=C  for   (( i  =  0; i  &lt;  ${ #1}; i ++  )) ;  do  :   &#34; ${1 :i :1} &#34;  case   &#34; $_ &#34;  in [a-zA-Z0-9.~_-])  printf   &#39;%s &#39;   &#34; $_ &#34; ;;  *)  printf   &#39;%%%02X &#39;   &#34;&#39; $_ &#34; ;;  esac  done  printf   &#39;\\n &#39;}\n          if [[  $var  ==  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is in var. &#34; fi  # Inverse (substring not in string). if [[  $var  !=  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is not in var. &#34; fi  # This works for arrays too! if [[  ${arr[*]}  ==  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is in array. &#34; fi\n  case   &#34; $var &#34;  in  *sub_string *)   # Do stuff ;;  *sub_string2 *)   # Do more stuff ;;  *)   # Else ;; esac\n  if [[  $var  == sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var starts with sub_string. &#34; fi  # Inverse (var does not start with sub_string). if [[  $var  != sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var does not start with sub_string. &#34; fi\n  if [[  $var  ==  *sub_string ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var ends with sub_string. &#34; fi  # Inverse (var does not end with sub_string). if [[  $var  !=  *sub_string ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var does not end with sub_string. &#34; fi\n   Enabling  extdebug allows access to the  BASH_ARGV array which storesthe current function\u2019s arguments in reverse.\n   reverse_array() {   # Usage: reverse_array &#34;array&#34;  shopt -s extdebug  f()(printf   &#39;%s\\n &#39;   &#34; ${BASH_ARGV[@]} &#34;); f   &#34; $@ &#34;  shopt -u extdebug}\n    Create a temporary associative array. When setting associative arrayvalues and a duplicate assignment occurs, bash overwrites the key. Thisallows us to effectively remove array duplicates.\n    remove_array_dups() {   # Usage: remove_array_dups &#34;array&#34;  declare -A tmp_array  for  i  in   &#34; $@ &#34; ;  do [[  $i ]]  &amp;&amp; IFS=  &#34;  &#34; tmp_array[  &#34; ${i :- } &#34;]=1  done  printf   &#39;%s\\n &#39;   &#34; ${ !tmp_array[@]} &#34;}\n  $ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 512345$ arr=(red red green blue blue)$ remove_array_dups   &#34; ${arr[@]} &#34;redgreenblue\n     $ array=(red green blue yellow brown)$ random_array_element   &#34; ${array[@]} &#34;yellow  # Multiple arguments can also be passed.$ random_array_element 1 2 3 4 5 6 73\n  Each time the  printf is called, the next array element is printed. Whenthe print hits the last array element it starts from the first elementagain.\n               arr=(apples oranges tomatoes)  # Elements and index. for  i  in   &#34; ${ !arr[@]} &#34; ;  do  printf   &#39;%s\\n &#39;   &#34; ${arr[i]} &#34; done  # Alternative method. for   ((i = 0;i &lt; ${ #arr[@]};i ++ )) ;  do  printf   &#39;%s\\n &#39;   &#34; ${arr[i]} &#34; done\n     # Greedy example. for  file  in  * ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # PNG files in dir. for  file  in  ~/Pictures/ *.png ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # Iterate over directories. for  dir  in  ~/Downloads/ */ ;  do  printf   &#39;%s\\n &#39;   &#34; $dir &#34; done  # Brace Expansion. for  file  in /path/to/parentdir/{file1,file2,subdir/file3} ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # Iterate recursively. shopt -s globstar for  file  in  ~/Pictures/ **/ * ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done shopt -u globstar\n        # Bash &lt;4 (discarding empty lines).IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra file_data  &lt;   &#34;file &#34;  # Bash &lt;4 (preserving empty lines). while  read -r line ;  do file_data+=(  &#34; $line &#34;) done  &lt;   &#34;file &#34;  # Bash 4+mapfile -t file_data  &lt;   &#34;file &#34;\n     head() {   # Usage: head &#34;n&#34; &#34;file&#34; mapfile -tn   &#34; $1 &#34; line  &lt;   &#34; $2 &#34;  printf   &#39;%s\\n &#39;   &#34; ${line[@]} &#34;}\n       tail() {   # Usage: tail &#34;n&#34; &#34;file&#34; mapfile -tn 0 line  &lt;   &#34; $2 &#34;  printf   &#39;%s\\n &#39;   &#34; ${line[@] : - $1} &#34;}\n  $ tail 2  ~/.bashrc  # Enable tmux.  # [[ -z &#34;$TMUX&#34; ]] &amp;&amp; exec tmux$ tail 1  ~/.bashrc  # [[ -z &#34;$TMUX&#34; ]] &amp;&amp; exec tmux\n    lines() {   # Usage: lines &#34;file&#34; mapfile -tn 0 lines  &lt;   &#34; $1 &#34;  printf   &#39;%s\\n &#39;   &#34; ${ #lines[@]} &#34;}\n  This method uses less memory than the  mapfile method and works in  bash 3 but it is slower for bigger files.\n lines_loop() {   # Usage: lines_loop &#34;file&#34; count=0  while IFS=  read -r _ ;  do   ((count ++ ))  done  &lt;   &#34; $1 &#34;  printf   &#39;%s\\n &#39;   &#34; $count &#34;}\n    This works by passing the output of the glob to the function and then counting the number of arguments.\n    # Count all files in dir.$ count  ~/Downloads/ *232  # Count all dirs in dir.$ count  ~/Downloads/ */45  # Count all jpg files in dir.$ count  ~/Pictures/ *.jpg64\n      extract() {   # Usage: extract file &#34;opening marker&#34; &#34;closing marker&#34;  while IFS=  $&#39; \\n &#39;  read -r line ;  do [[  $extract  &amp;&amp;  $line  !=   &#34; $3 &#34; ]]  &amp;&amp;  printf   &#39;%s\\n &#39;   &#34; $line &#34; [[  $line  ==   &#34; $2 &#34; ]]  &amp;&amp; extract=1 [[  $line  ==   &#34; $3 &#34; ]]  &amp;&amp; extract=  done  &lt;   &#34; $1 &#34;}\n       dirname() {   # Usage: dirname &#34;path&#34;  local tmp= ${1 :-.} [[  $tmp  !=  *[ !/] * ]]  &amp;&amp; {  printf   &#39;/\\n &#39;  return } tmp= ${tmp %%  &#34; ${tmp ##*[!/]} &#34;} [[  $tmp  !=  */ * ]]  &amp;&amp; {  printf   &#39;.\\n &#39;  return } tmp= ${tmp %/*} tmp= ${tmp %%  &#34; ${tmp ##*[!/]} &#34;}  printf   &#39;%s\\n &#39;   &#34; ${tmp :-/} &#34;}\n      basename() {   # Usage: basename &#34;path&#34; [&#34;suffix&#34;]  local tmp tmp= ${1 %  &#34; ${1 ##*[!/]} &#34;} tmp= ${tmp ##*/} tmp= ${tmp %  &#34; ${2 /  &#34; $tmp &#34;} &#34;}  printf   &#39;%s\\n &#39;   &#34; ${tmp :-/} &#34;}\n     $ hello_world=  &#34;value &#34;  # Create the variable name.$ var=  &#34;world &#34;$ ref=  &#34;hello_ $var &#34;  # Print the value of the variable name stored in &#39;hello_$var&#39;.$  printf   &#39;%s\\n &#39;   &#34; ${ !ref} &#34;value\n      Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using  tput abstracts the same ANSI sequences as if printed manually. Worse still,  tput is not actually portable. There are a number of  tput variants each with different commands and syntaxes ( try  tput setaf 3 on a FreeBSD system). Raw sequences are fine.\n     NOTE: Prepend 2 to any code below to turn it&#39;s effect off(examples: 21=bold text off, 22=faint text off, 23=italic text off).\n        Expand to  IFS separated list of variable names starting with  VAR. If double-quoted, each variable name expands to a separate word.\n      Get substring from  N character to  N character.   ( ${VAR:10:10}: Get sub-string from char  10 to char  20)\n       # Syntax: {&lt;START&gt;..&lt;END&gt;}  # Print numbers 1-100. echo {1..100}  # Print range of floats. echo 1.{1..9}  # Print chars a-z. echo {a..z} echo {A..Z}  # Nesting. echo {A..Z}{0..9}  # Print zero-padded numbers.  # CAVEAT: bash 4+ echo {01..100}  # Change increment amount.  # Syntax: {&lt;START&gt;..&lt;END&gt;..&lt;INCREMENT&gt;}  # CAVEAT: bash 4+ echo {1..10..2}   # Increment by 2.\n       If  file is newer than  file2 ( uses modification time) or  file exists and  file2 does not.\n If  file is older than  file2 ( uses modification time) or  file2 exists and  file does not.\n                    # Set the value of var to var2 if var2 is greater than var.  # var: variable to set.  # var2&gt;var: Condition to test.  # ?var2: If the test succeeds.  # :var: If the test fails.  ((var =var 2 &gt;var ?var 2 :var ))\n  Traps allow a script to execute code on various signals. In  pxltrm ( a pixel art editor written in bash) traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\n Traps should be added near the start of scripts so any early errors are also caught.\n              If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in  neofetch and other programs.\n      NOTE: There are times when one may have a good reason for using  #!/bin/bash or another direct path to the binary.\n                  &#34; $HOSTNAME &#34;  # NOTE: This variable may be empty.  # Optionally set a fallback to the hostname command.  &#34; ${HOSTNAME :-$(hostname)} &#34;\n    This can be used to add conditional support for different OperatingSystems without needing to call  uname.\n        Each time  $RANDOM is used, a different integer between  0 and  32767 is returned. This variable should not be used for anything related to security ( this includes encryption keys etc).\n    This is handy when writing scripts in pure bash and  stty/ tput can\u2019t becalled.\n  get_term_size() {   # Usage: get_term_size   # (:;:) is a micro sleep to ensure the variables are   # exported immediately.  shopt -s checkwinsize ; (: ;:)  printf   &#39;%s\\n &#39;   &#34; $LINES  $COLUMNS &#34;}\n      get_window_size() {   # Usage: get_window_size  printf   &#39;%b &#39;   &#34; ${TMUX :+ \\\\ePtmux; \\\\e} \\\\e[14t ${TMUX :+ \\\\e \\\\\\\\} &#34; IFS=  &#39;;t &#39;  read -d t -t 0.05 -sra term_size  printf   &#39;%s\\n &#39;   &#34; ${term_size[1]}x ${term_size[2]} &#34;}\n      get_cursor_pos() {   # Usage: get_cursor_pos IFS=  &#39;[; &#39;  read -p   $&#39; \\e[6n &#39; -d R -rs _ y x _  printf   &#39;%s\\n &#39;   &#34; $x  $y &#34;}\n      hex_to_rgb() {   # Usage: hex_to_rgb &#34;#FFFFFF&#34;   # hex_to_rgb &#34;000000&#34;  :   &#34; ${1 / \\#} &#34;   ((r = 16# ${_ :0 :2} ,g = 16# ${_ :2 :2} ,b = 16# ${_ :4 :2} ))  printf   &#39;%s\\n &#39;   &#34; $r  $g  $b &#34;}\n          # Tiny C Style.for  ((;i ++&lt; 10; )){  echo   &#34; $i &#34; ;}  # Undocumented method. for  i  in {1..10} ;{  echo   &#34; $i &#34; ;}  # Expansion. for  i  in {1..10} ;  do  echo   &#34; $i &#34; ;  done  # C Style.for  ((i = 0;i &lt;= 10;i ++ )) ;  do  echo   &#34; $i &#34; ;  done\n    # Normal method f(){  echo hi;}  # Using a subshell f()(echo hi)  # Using arithmetic  # This can be used to assign integer values.  # Example: f a=1  # f a++ f()  (( $1 ))  # Using tests, loops etc.  # NOTE: \u2018while\u2019, \u2018until\u2019, \u2018case\u2019, \u2018(())\u2019, \u2018[[]]\u2019 can also be used. f()if  true;  then  echo   &#34; $1 &#34; ;  fi f()for i  in   &#34; $@ &#34;;  do  echo   &#34; $i &#34; ;  done\n  # One line  # Note: The 3rd statement may run when the 1st is true[[  $var  == hello ]]  &amp;&amp;  echo hi  ||  echo bye[[  $var  == hello ]]  &amp;&amp; {  echo hi ;  echo there ; }  ||  echo bye  # Multi line (no else, single statement)  # Note: The exit status may not be the same as with an if statement[[  $var  == hello ]]  &amp;&amp;  echo hi  # Multi line (no else)[[  $var  == hello ]]  &amp;&amp; {  echo hi   # ...}\n  The  : built-in can be used to avoid repeating  variable= in a case statement. The  $_ variable stores the last argument of the last command.  : always succeeds so it can be used to store the variable value.\n # Modified snippet from Neofetch. case   &#34; $OSTYPE &#34;  in   &#34;darwin &#34; *)  :   &#34;MacOS &#34; ;;   &#34;linux &#34; *)  :   &#34;Linux &#34; ;;  *  &#34;bsd &#34; * |   &#34;dragonfly &#34; |   &#34;bitrig &#34;)  :   &#34;BSD &#34; ;;   &#34;cygwin &#34; |   &#34;msys &#34; |   &#34;win32 &#34;)  :   &#34;Windows &#34; ;;  *)  printf   &#39;%s\\n &#39;   &#34;Unknown OS detected, aborting... &#34;  &gt;&amp;2  exit 1 ;; esac  # Finally, set the variable.os=  &#34; $_ &#34;\n      read_sleep() {   # Usage: read_sleep 1   # read_sleep 0.2  read -rt   &#34; $1 &#34;  &lt;&gt;   &lt;(: )  ||  :}\n   For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of  read:\n  exec {sleep_fd} &lt;&gt;   &lt;(: ) while some_quick_test ;  do   # equivalent of sleep 0.001  read -t 0.001 -u  $sleep_fd done\n  # There are 3 ways to do this and either one can be used. type -p executable_name  &amp; &gt;/dev/null hash executable_name  &amp; &gt;/dev/null command -v executable_name  &amp; &gt;/dev/null  # As a test. if  type -p executable_name  &amp; &gt;/dev/null ;  then   # Program is in PATH. fi  # Inverse. if  !  type -p executable_name  &amp; &gt;/dev/null ;  then   # Program is not in PATH. fi  # Example (Exit early if program is not installed). if  !  type -p convert  &amp; &gt;/dev/null ;  then  printf   &#39;%s\\n &#39;   &#34;error: convert is not installed, exiting... &#34;  exit 1 fi\n  Bash\u2019s  printf has a built-in method of getting the date which can be used in place of the  date command.\n   date() {   # Usage: date &#34;format&#34;   # See: &#39;man strftime&#39; for format.  printf   &#34;%( $1)T \\\\n &#34;   &#34;-1 &#34;}\n  # Using above function.$ date   &#34;%a %d %b - %l:%M %p &#34;Fri 15 Jun - 10:00 AM  # Using printf directly.$  printf   &#39;%(%a %d %b - %l:%M %p)T\\n &#39;   &#34;-1 &#34;Fri 15 Jun - 10:00 AM  # Assigning a variable using printf.$  printf -v date   &#39;%(%a %d %b - %l:%M %p)T\\n &#39;   &#39;-1 &#39;$  printf   &#39;%s\\n &#39;   &#34; $date &#34;Fri 15 Jun - 10:00 AM\n   $  :  \\\\u  # Expand the parameter as if it were a prompt string.$  printf   &#39;%s\\n &#39;   &#34; ${_ @P} &#34;black\n    uuid() {   # Usage: uuid C=  &#34;89ab &#34;  for   ((N = 0;N &lt; 16; ++N )) ;  do B=  &#34;  $((RANDOM % 256 )) &#34;  case   &#34; $N &#34;  in 6)  printf   &#39;4%x &#39;   &#34;  $((B % 16 )) &#34; ;; 8)  printf   &#39;%c%x &#39;   &#34; ${C : $RANDOM % ${ #C} :1} &#34;   &#34;  $((B % 16 )) &#34; ;; 3|5|7|9)  printf   &#39;%02x- &#39;   &#34; $B &#34; ;;  *)  printf   &#39;%02x &#39;   &#34; $B &#34; ;;  esac  done  printf   &#39;\\n &#39;}\n    This is a simple way of drawing progress bars without needing a for loopin the function itself.\n  bar() {   # Usage: bar 1 10   # ^----- Elapsed Percentage (0-100).   # ^-- Total length in chars.   ((elapsed = $1 * $2 / 100 ))   # Create the bar with spaces.  printf -v prog   &#34;% ${elapsed}s &#34;  printf -v total   &#34;%  $(( $2 -elapsed ))s &#34;  printf   &#39;%s\\r &#39;   &#34;[ ${prog //  /-}${total}] &#34;}\n  for   ((i = 0;i &lt;= 100;i ++ )) ;  do   # Pure bash micro sleeps (for the example). (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)   # Print the bar. bar   &#34; $i &#34;   &#34;10 &#34; done printf   &#39;\\n &#39;\n  get_functions() {   # Usage: get_functions IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra functions  &lt;   &lt;(declare -F )  printf   &#39;%s\\n &#39;   &#34; ${functions[@] //declare -f } &#34;}\n      This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.\n bkr() { (nohup   &#34; $@ &#34;  &amp; &gt;/dev/null  &amp;)}bkr ./some_script.sh   # some_script.sh is now running in the background\n   This uses local namerefs to avoid using  var=$(some_func) style command substitution for function output captu\n......", "posttime": "2022-02-17 16:15:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bash,\u7528\u6cd5", "title": "Pure Bash Bible\u2013\u5916\u90e8\u8fdb\u7a0b\u7684\u7eafBash\u66ff\u4ee3\u65b9\u6848\u7684\u96c6\u5408", "title_en": "Pure Bash Bible \u2013 A collection of pure bash alternatives to external processes", "transed": 1, "url": "https://github.com/dylanaraps/pure-bash-bible", "via": "", "real_tags": ["bash", "\u7528\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073863, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u975e\u5e38\u559c\u6b22\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6211\u6700\u559c\u6b22\u7684GC\u8bed\u8a00\u662fHaskell\u3002\u6211\u5e0c\u671b\u8bfb\u8005\u4eca\u5929\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\u6211\u5199\u7684\u662f\u4e00\u4e9b\u5173\u4e8e\u6211\u6df1\u7231\u7684\u8bed\u8a00\u7684\u8bc4\u8bba\uff0c\u4e00\u4e9b\u5145\u6ee1\u7231\u7684\u6279\u8bc4\u3002\n\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff1a\u51e0\u5929\u524d\uff0c\u6211\u5411\u4e00\u4f4d\u4e3b\u8981\u4f7f\u7528Python\u7f16\u7a0b\u7684\u670b\u53cb\u5c55\u793a\u4e86\u4e00\u4e9bHaskell\u3002\u98ce\u9669\u5f88\u9ad8\u2014\u2014\u6211\u80fd\u8bc1\u660e\u8fd9\u79cd\u5947\u602a\u7684\u8bed\u8a00\u503c\u5f97\u8c03\u67e5\u5417\uff1f\n\u6211\u7684\u4e3b\u8981\u5173\u6ce8\u70b9\u662f\u65e0\u9650\u5217\u8868\uff0c\u5e76\u5c06\u6590\u6ce2\u90a3\u5951\u5b9a\u4e49\u4e3a\u9012\u5f52\u6570\u636e\u7ed3\u6784\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5c55\u793a\u54c8\u65af\u514b\u5c14\u61d2\u60f0\u7684\u6709\u8da3\u4e8b\u60c5\u3002\u4f46\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u610f\u5916\u5730\u7f16\u5199\u4e86\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u7c7b\u578b\u9519\u8bef\uff0c\u56e0\u6b64\u6211\u4eec\u4e86\u89e3\u4e86\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\u7684\u3002\u6211\u4e0d\u8bb0\u5f97\u786e\u5207\u7684\u8868\u8fbe\u5f0f\u4e86\u2014\u2014\u5b83\u5728\u4e0a\u4e0b\u6587\u4e2d\u5f88\u6df1\u2014\u2014\u4f46\u95ee\u9898\u662f\u6211\u8bd5\u56fe\u5728\u5217\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u3002\u4e0e1+[2,3]\u6709\u5173\u7684\u5185\u5bb9\u3002\n\u73b0\u5728\uff0c\u5728\u4e00\u4e9b\u201c\u5f31\u7c7b\u578b\u201d\u8bed\u8a00\u4e2d\uff0c\u8fd9\u79cd\u4e8b\u60c5\u5b9e\u9645\u4e0a\u662f\u5141\u8bb8\u7684\uff0c\u6211\u7684\u4e00\u4f4d\u540c\u4e8b\u6700\u8fd1\u6307\u51fa\uff1a\n\u8fd9\u5f53\u7136\u5f88\u641e\u7b11\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u5e94\u8be5\u7528\u5982\u6b64\u5bbd\u6cdb\u7684\u7b14\u89e6\u63cf\u7ed8\u201c\u5f31\u7c7b\u578b\u201d\u8bed\u8a00\u3002\u5728\u6211\u670b\u53cb\u7684\u539f\u751fPython\u4e2d\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u8fd9\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u4f46\u5f53\u60a8\u4f7f\u7528\u89e3\u91ca\u6027\u8bed\u8a00\u7f16\u5199\u4e34\u65f6\u811a\u672c\u65f6\uff0c\u8fd9\u53c8\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\u3002\u91cd\u8981\u7684\u662f\uff0c\u5931\u8d25\u88ab\u89c6\u4e3a\u5931\u8d25\uff0c\u5b83\u4e0d\u4f1a\u7ee7\u7eed\u80e1\u8bf4\u516b\u9053\uff1a\n[jim@palatinate[~] Python 3Python 3.810\uff08\u9ed8\u8ba4\u503c\uff0c11\u670826\u65e52021\uff0c20:14:08\uff09[GCC 93.0]\u5728LimuxType\u548c\u03b334\uff1b\u5e2e\u52a9&#34&#34;\u7248\u6743\u6240\u6709&#34&#34;\u5b66\u5206&#34\uff1b\u6216&#34\uff1b\u6267\u7167\u548c#34\uff1b\u4e86\u89e3\u66f4\u591a\u4fe1\u606f&gt&gt&gt\uff1b1+[2,3]\u56de\u6eaf\uff08\u6700\u540e\u4e00\u6b21\u8c03\u7528\uff09\uff1a\u6587\u4ef6\u548c#34&\u4e66\u4fe1\u7535\u62a5\uff1bstdin&gt&#34;, \u7b2c1\u884c\uff0cin&lt\uff1b\u6a21\u5757&gt\uff1bTypeError:\u4e0d\u652f\u6301+\uff1a&#39\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\uff1bint&#39\uff1b\u548c&#39\uff1b\u540d\u5355&#39\uff1b\n\u8fd9\u662f\u4e00\u6761\u9519\u8bef\u6d88\u606f\u3002\u8fd9\u751a\u81f3\u662f\u4e00\u6761\u76f8\u5f53\u4e0d\u9519\u7684\u9519\u8bef\u4fe1\u606f\u3002\u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f20\u9012\u7ed9+\u8fd0\u7b97\u7b26\uff0c\u4f46int\u548clist\u4e0d\u5728\u5176\u4e2d\u3002\n\u90a3\u4e48\u73b0\u5728\uff0c\u54c8\u65af\u514b\u5c14\u505a\u4e86\u4ec0\u4e48\uff0c\u6211\u60f3\u70ab\u8000\u7684\u8bed\u8a00\uff1f\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u7684\u670b\u53cb\u6ca1\u6709\u770b\u5230\u4ee3\u7801\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\uff0c\u4f46\u9996\u5148\u662f\u4ece\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u6d88\u606f\u4e2d\u5f97\u77e5\u7684\u3002\u5982\u679c\u4f60\u4ee5\u524d\u5728Haskell\u505a\u8fc7\u8fd9\u4ef6\u4e8b\uff0c\u4f60\u73b0\u5728\u53ef\u80fd\u4f1a\u9000\u7f29\uff0c\u56e0\u4e3a\u4f60\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u662f\u4ec0\u4e48\uff1a\n[jim@palatinate\uff1a~]$ghciGHCi\uff0c8.6.5\u7248\uff1ahttp://www.haskell.org/ghc/ :? \u5e2e\u52a9\u524d\u594f&gt\uff1b1+[2,3]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a1:1\uff1a\u9519\u8bef\uff1a\u2022\u7ea6\u675f\u4e2d\u7684\u975e\u7c7b\u578b\u53d8\u91cf\u53c2\u6570\uff1aNum[a]\uff08\u4f7f\u7528FlexibleContexts\u5141\u8bb8\u6b64\u64cd\u4f5c\uff09\u2022\u68c0\u67e5\u63a8\u65ad\u7684\u7c7b\u578b\u65f6\uff0c\u5b83\uff1a\uff1aforall a.\uff08Num a\uff0cNum[a]\uff09=&gt\uff1b[a]\n\u73b0\u5728\uff0c\u6211\u7684\u670b\u53cb\u6839\u672c\u4e0d\u7406\u89e3\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u3002\u7531\u4e8e\u6211\u5904\u4e8e\u6f14\u793a\u6a21\u5f0f\uff0c\u6211\u7684\u672c\u80fd\u662f\u5411\u4ed6\u89e3\u91ca\uff0c\u4f46\u5728\u51e0\u4e2a\u9519\u8bef\u7684\u5f00\u59cb\u4e4b\u540e\uff0c\u6211\u610f\u8bc6\u5230\u8fd9\u6839\u672c\u6ca1\u6709\u5e2e\u52a9\uff0c\u5e76\u6307\u51fa\u4e0d\u80fd\u5411\u5217\u8868\u4e2d\u6dfb\u52a0\u6574\u6570\uff0c\u5e76\u5411\u4ed6\u5c55\u793a\u4e86\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u5730\u65b9\uff08\u8fd9\u6bd4\u8fd9\u4e2a\u4f8b\u5b50\u8981\u5fae\u5999\u4e00\u4e9b\uff09\u3002\n\u4f46\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u548c\u540c\u4e8b\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u62c9\u514b\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u7279\u522b\u662fRust\u7684\u9519\u8bef\u4fe1\u606f\u6709\u591a\u597d\uff0c\u7279\u522b\u662f\u5b83\u4eec\u6bd4Haskell\u7684\u597d\u591a\u5c11\u3002\u6240\u4ee5\u6211\u6709\u673a\u4f1a\u5206\u4eab\u6211\u548c\u6211\u7684\u670b\u53cb\u53d1\u73b0\u7684\u975e\u5e38\u7cdf\u7cd5\u7684Haskell\u9519\u8bef\u4fe1\u606f\u3002\u5728\u90a3\u91cc\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u6848\u4f8b\u7814\u7a76\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba8\u8bba\u5b83\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e0d\u53ef\u7406\u89e3\u7684\uff0c\u5f15\u53d1\u4e86\u5f88\u591a\u8ba8\u8bba\uff0c\u6211\u5c06\u5c1d\u8bd5\u4ece\u4e2d\u63d0\u53d6\u6700\u6709\u8da3\u7684\u90e8\u5206\u5230\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u3002\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u4e0e\u5177\u4f53\u95ee\u9898\u51e0\u4e4e\u6ca1\u6709\u5173\u7cfb\u3002\u95ee\u9898\u662f\u2014\u2014\u9519\u8bef\u6d88\u606f\u5e94\u8be5\u8fd9\u6837\u8bf4\u2014\u2014\u4f60\u4e0d\u80fd\u6dfb\u52a0\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728Haskell\u4e2d\uff0c\u60a8\u53ea\u80fd\u6dfb\u52a0\u5b9e\u73b0Num typeclass\u7684\u4e1c\u897f\uff08\u5217\u8868\u4e2d\u6ca1\u6709\uff09\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u8ba4\u4e3a\u7f16\u8bd1\u5668\u4f1a\u8db3\u591f\u806a\u660e\uff0c\u5728\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u4efb\u4f55\u5730\u65b9\u63d0\u5230\u7c7b\u4f3c\u4e8e\u201c\u671f\u671b[a]\u6709Num instance\uff0c\u4f46\u5b83\u6ca1\u6709\u201d\u8fd9\u6837\u7684\u5185\u5bb9\u8fd9\u624d\u662f\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5373\u4f7f\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u89e3\u91ca\u3002\n\u4f46\u662f\uff0cghc\u8bd5\u56fe\u5047\u8bbe\u4f60\u7684\u610f\u601d\u662f\u4f60\u6240\u5199\u7684\uff0c\u5e76\u627e\u51fa[a]\u53ef\u4ee5\u62e5\u6709Num\u5b9e\u4f8b\u7684\u65b9\u5f0f\u3002\u8fd9\u5c31\u662f\u5b83\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u5b83\u7ed9\u51fa\u4e86\u5982\u4f55\u4f7f\u5176\u6210\u529f\u7684\u5efa\u8bae\u3002\u6b63\u5982\u6211\u7684\u6559\u6388\u540c\u4e8b\u6240\u6307\u51fa\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5371\u9669\u7684\u5efa\u8bae\uff0c\u5c24\u5176\u662f\u5bf9\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528FlexibleContexts\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\u3002\u95ee\u9898\u4e0d\u5728\u4e8e\u8fd9\u4e9b\u5217\u8868\u4e0d\u662f\u7279\u522b\u7684\u6570\u5b57\uff0c\u800c\u5728\u4e8e\u60a8\u53ea\u9700\u8981\u63a5\u53d7\u51fd\u6570\u4e2d\u7684\u6570\u5b57\u5217\u8868\u3002\u95ee\u9898\u662f\u6ca1\u6709\u5217\u8868\u662f\uff08\u6216\u8005\u81f3\u5c11\u5e94\u8be5\u662f\uff09\u6570\u5b57\uff01\u4f46\u662f\u521d\u5b66\u8005\u53ef\u80fd\u53ea\u662f\u6309\u7167\u5efa\u8bae\u53bb\u505a\uff0c\u8bd5\u7740\u5f04\u6e05\u695a\u4ec0\u4e48\u662f\u8be5\u6b7b\u7684\u7075\u6d3b\u73af\u5883\uff0c\u7136\u540e\u53d1\u73b0\u81ea\u5df1\u8eab\u5904\u4e00\u4e2a\u75db\u82e6\u7684\u4e16\u754c\uff0c\u79bb\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u5df2\u7ecf\u4e0d\u8fdc\u4e86\u3002\n\u90e8\u5206\u539f\u56e0\u662f1\u578b\u672c\u8eab\u3002Haskell\uff0cunlikeRust\uff0c\u5141\u8bb8\u4ee5\u4efb\u4f55\u6570\u5b57\u7c7b\u578b\u89e3\u91ca\u50cf1\u8fd9\u6837\u7684\u6587\u5b57\u3002\u9274\u4e8eHaskell\uff08\u5982Rust\uff09\u5177\u6709\u8fd4\u56de\u7c7b\u578b\u591a\u6001\u6027\uff0c\u5b83\u53ef\u4ee5\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u76f4\u63a5\u8868\u8fbe\u8fd9\u4e00\u70b9\uff1a\n\u5728Rust\u4e2d\uff0c\u8fd9\u7c7b\u4f3c\u4e8eimpl Num\u3002\u8fd9\u610f\u5473\u77401\u53ef\u4ee5\u662fNum\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u7ed3\u5408+\u8981\u6c42\u53c2\u6570\u4e3aNum\u5e76\u5339\u914d\uff08\uff08+\uff09\uff1a\uff1aNum a=&gt\uff1ba-&gt\uff1ba-&gt\uff1ba\uff09 \uff0c\u5f53\u6211\u4eec\u770b\u52301+[2,3]\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u60f3\u5f04\u6e05\u695a[2,3]\u662f\u600e\u4e48\u56de\u4e8b\u3002\n\u5982\u679c\u6211\u4eec\u6ca1\u6709\u591a\u6001\u6587\u5b57\uff0c\u6ca1\u67091\u7684\u542b\u4e49\u662f\u7075\u6d3b\u7684\u8fd9\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c1\u7684\u610f\u601d\u4e0e\uff081:\uff1aInteger\uff09\u76f8\u540c\uff08\u6216\u4efb\u610f\u9009\u62e9\uff09\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a\u6f02\u4eae\u7684\u89e3\u91ca\uff1a\n\u5e8f\u66f2&gt\uff1b\uff081\uff1a\uff1a\u6574\u6570\uff09+[2,3]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a4:16\uff1a\u9519\u8bef\uff1a\u2022\u65e0\u6cd5&#39\uff1bt\u5728\u201c\uff08+\uff09\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373\u8868\u8fbe\u5f0f\u4e2d\u7684\u201c[2,3]\u201d\uff081:\uff1aInteger\uff09+[2,3]\u4e2d\uff0c\u5c06\u9884\u671f\u7c7b\u578b\u201cInteger\u201d\u4e0e\u5b9e\u9645\u7c7b\u578b\u201c[Integer]\u201d\u5339\u914d\uff1a\u5b83=\uff081:\uff1aInteger\uff09+[2,3]\n\u6216\u8005\uff0c\u5373\u4f7f\u53cc\u65b9\u90fd\u6ca1\u6709\u6570\u5b57\uff0c\u6211\u4eec\u4e5f\u540c\u6837\u4f1a\u6709\u66f4\u597d\u7684\u9519\u8bef\u4fe1\u606f\uff1a\n[jim@palatinate\uff1a~]$ghciGHCi\uff0c8.6.5\u7248\uff1ahttp://www.haskell.org/ghc/ :? \u5e2e\u52a9\u524d\u594f&gt\uff1b\uff08\uff09+[1,2]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a1:6\uff1a\u9519\u8bef\uff1a\u2022\u65e0\u6cd5&#39\uff1bt\u5728\u201c\uff08+\uff09\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373\u8868\u8fbe\u5f0f\u4e2d\u7684\u201c[1,2]\u201d\u4e2d\uff0c\u5c06\u9884\u671f\u7c7b\u578b\u201c\uff08\uff09\u201d\u4e0e\u5b9e\u9645\u7c7b\u578b\u201c[Integer]\u201d\u5339\u914d\uff1a\uff08\uff09+[1,2]\u5728\u201cit\u201d\u7684\u7b49\u5f0f\u4e2d\uff1ait=\uff08\uff09+[1,2]Prelude&gt\uff1b\n\u6211\u7684\u5916\u5356\u662f\u4ec0\u4e48\uff1f\u6211\u4e0d\u8ba4\u4e3a\u7f16\u8bd1\u5668\u5728\u9519\u8bef\u4fe1\u606f\u65b9\u9762\u53d7\u5230\u4e86\u8db3\u591f\u7684\u524a\u5f31\uff0c\u6216\u8005Haskell\u793e\u533a\u5bf9\u521d\u5b66\u8005\u7684\u5173\u6ce8\u4e0d\u591f\u3002Rust\u4f5c\u4e3a\u4e00\u4e2a\u901a\u8baf\u5668\u4f1a\u5c06\u5927\u91cf\u80fd\u91cf\u8f6c\u5316\u4e3a\u826f\u597d\u7684\u9519\u8bef\u6d88\u606f\uff0c\u56e0\u6b64\u5373\u4f7fRust\u4e5f\u6709\u4e00\u4e2a\u7279\u6027\u53ef\u4ee5\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d\u4ee5\u4f7f+\u5de5\u4f5c\uff0c\u5b83\u4ecd\u7136\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f\uff1a\n\u9519\u8bef[E0277]\uff1a\u65e0\u6cd5\u5c06`[{integer}\uff1b2]`\u6dfb\u52a0\u5230`{integer}`-&gt\uff1b\u6d4b\u9a8crs:2:7 | 2 | 1+[2,3]| ^\u6ca1\u6709\u5b9e\u73b0`{integer}+[{integer}\uff1b2]`|=help:trait`Add&lt\uff1b[{integer}\uff1b2]&gt\uff1b`\u6ca1\u6709\u4e3a`{integer}\u5b9e\u73b0`\n\u4f46\u6211\u4e5f\u8ba4\u4e3a1\u7684\u8bed\u4e49\u592a\u8fc7\u81ea\u7531\uff0c\u7ed9\u7f16\u8bd1\u5668\u7559\u4e0b\u4e86\u4e00\u4e2a\u5c34\u5c2c\u7684\u4f4d\u7f6e\u3002\u770b\uff0c\u5947\u602a\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e[2,3]\u4e00\u4e2a\u6570\u5b57\uff0c\u4f7f1+[2,3]\u6210\u4e3a\u4e00\u4e2a\u6dfb\u52a0\u4e24\u4e2a\u5217\u8868\u7684\u8868\u8fbe\u5f0f\uff1a\n\u5b9e\u4f8b\u7f16\u53f7[a]\uff0c\u5176\u4e2d\uff08+\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\uff08-\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\u2014\u2014\u5443\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5462\uff1f\uff08*\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\u5426\u5b9a=\u53cd\u5411abs=id signum=const[]from integer i=take\uff08from integer i\uff09$repeat undefinedmain=do print$signum$1+[2,3]\n\u4e00\u65e6\u4f60\u5c06\u5217\u8868\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c1\u5c31\u4f1a\u7a81\u7136\u53d8\u6210\u5b83\u60f3\u8981\u7684\u5217\u8868\u3002\u8fd9\u5c31\u589e\u52a0\u4e86\u627e\u5230\u6b63\u786e\u9519\u8bef\u4fe1\u606f\u7684\u96be\u5ea6\uff1a\u6bd5\u7adf\u4f60\u6240\u8981\u6c42\u7684\u662f\u53ef\u80fd\u7684\u3002\n\u6700\u540e\uff0c\u8fd9\u8ba9\u6211\u89c9\u5f97Haskell\u548cJavascript\u6709\u7740\u5171\u540c\u70b9\uff0c\u8fd9\u8ba9\u6211\u5f88\u96be\u8fc7\u3002\u5f3a\u7c7b\u578b\u8bed\u8a00\u4e0d\u518d\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\u3002\n\u7531discus\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "I am a big fan of strongly typed languages, and my favorite GC\u2019d languageis Haskell. And I want you, the reader, to keep that in mind today.What I am writing is some commentary about a language I deeply love,some loving criticism.\n So here\u2019s what happened: A few days ago, I was showing off some Haskellfor a friend who primarily programs in Python. The stakes were high\u2013 could I demonstrate that this strange language was worth someinvestigation?\n My primary focus was on infinite lists, and defining  fibonacci as a recursive data structure\u2013 all fun things to show off Haskell\u2019s laziness.But at some point, we wrote an expression by accident that had a typeerror in it, and so we got to see how the compiler treated such things.I don\u2019t remember the exact expression \u2013 it was deep in context \u2013 butthe problem was I was trying to add an integer to an list. Somethinganalogous to  1+[2,3].\n Now, in some  \u201cweakly typed\u201d languages, this sort of thing is actually allowed, asa colleague of mine recently pointed out:\n  This is, of course, hilarious. But! We shouldn\u2019t paint \u201cweakly typed\u201dlanguages with such a broad brush. In my friend\u2019s native Python, itwould have been an error, as it should be. It is a run-time error, butwhat does that matter when you\u2019re working in an interpreted language,writing ad hoc scripts. The important thing is that failure isrecognized as failure, and it doesn\u2019t try to continue with nonsense:\n [jim@palatinate:~]$ python3Python 3.8.10 (default, Nov 26 2021, 20:14:08)[GCC 9.3.0] on linuxType &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&gt;&gt;&gt; 1+[2,3]Traceback (most recent call last): File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;list&#39;\n This is an error message. It\u2019s even a pretty decent error message.There are many things you can pass to the  + operator in Python,but an  int and a  list together are not among them.\n So now, what did Haskell do, this language that I\u2019m trying to show off?Well, unfortunately, my friend didn\u2019t see the actual problem in the code,but was first made aware of it from the compiler\u2019s error message. Andif you\u2019ve ever done this before in Haskell, you\u2019re probably wincing rightnow, because you know what this error message is:\n [jim@palatinate:~]$ ghciGHCi, version 8.6.5: http://www.haskell.org/ghc/ :? for helpPrelude&gt; 1+[2,3]&lt;interactive&gt;:1:1: error: \u2022 Non type-variable argument in the constraint: Num [a] (Use FlexibleContexts to permit this) \u2022 When checking the inferred type it :: forall a. (Num a, Num [a]) =&gt; [a]\n Now, my friend didn\u2019t understand this error message at all.Since I was in Demonstration Mode, my instinct was to explain it to him,but after a few false starts, I realized that this would simply nothelp, and pointed out that you couldn\u2019t add integers to lists,and showed him where this was happening (it was a little moresubtle than this example).\n But since then, my colleagues and I were discussing error messages inSlack, specifically how good Rust\u2019s error messages are, specificallyhow much better they are than Haskell\u2019s. So I had an opportunity topaste that very bad Haskell error message me and my friend discoveredinto the Slack. There, it served as a case study, so we could discuss howproblematically incomprehensible it is, sparking a lot of discussion, fromwhich I shall try to extract the most interesting parts into this post.\n For one, this error message has little to do with the concreteproblem. The problem is \u2013 and the error message should say this \u2013 thatyou can\u2019t add lists. Specifically, in Haskell, you can only add things thatimplement the  Num typeclass (which lists don\u2019t), and so you\u2019d think thecompiler would be smart enough to mention  anywhere in this error messagesomething along the lines of \u201cexpecting  [a] to have  Num instance,but it does not.\u201d That\u2019s the  actual problem, even if not well-explained.\n But instead,  ghc tries to assume you meant what you wrote, and figureout a way in which  [a]  can have the  Num instance. This is whereit fails, and then it gives advice on how to make  that succeed.As my professor-colleague points out, this is dangerous advice, especiallyfor beginners, because there\u2019s no way that using  FlexibleContextswill actually help in that situation. The problem isn\u2019t that theselists aren\u2019t numbers in particular, and that you need to only acceptlists that are numbers in your function. The problem is that no listsare (or at least should be) numbers! But a beginner might just followthe advice, try to figure out what the hell  FlexibleContexts are,and find themselves in a world of pain, and no closer to solving theactual problem.\n Part of what causes this is the type of  1 itself. Haskell, unlikeRust, allows literals like  1 to be interpreted in any number type.Given that Haskell (like Rust) has return-type polymorphism, it can directlyexpress this in the type system:\n  In Rust, this would be something like  impl Num. It means that  1 canbe any type that is  Num. Combine that with the fact that  + requiresits arguments to be  Num and to match ( (+) :: Num a =&gt; a -&gt; a -&gt; a),and when we see  1+[2,3], we\u2019re simply left trying to figure out how [2,3] is  Num.\n If we did not have this  polymorphic literal, this notion that themeaning of  1 is flexible, we would have seen a much more comprehensibleerror message. If  1 meant the same thing as  (1::Integer) (or anyarbitrary choice), we\u2019d have this beautiful explanation:\n Prelude&gt; (1::Integer) + [2,3]&lt;interactive&gt;:4:16: error: \u2022 Couldn&#39;t match expected type \u2018Integer\u2019 with actual type \u2018[Integer]\u2019 \u2022 In the second argument of \u2018(+)\u2019, namely \u2018[2, 3]\u2019 In the expression: (1 :: Integer) + [2, 3] In an equation for \u2018it\u2019: it = (1 :: Integer) + [2, 3]\n Or even if we just had non-numbers on both sides, we\u2019d similarlyhave a better error message:\n [jim@palatinate:~]$ ghciGHCi, version 8.6.5: http://www.haskell.org/ghc/ :? for helpPrelude&gt; () + [1,2]&lt;interactive&gt;:1:6: error: \u2022 Couldn&#39;t match expected type \u2018()\u2019 with actual type \u2018[Integer]\u2019 \u2022 In the second argument of \u2018(+)\u2019, namely \u2018[1, 2]\u2019 In the expression: () + [1, 2] In an equation for \u2018it\u2019: it = () + [1, 2]Prelude&gt;\n What is my take-away here? I don\u2019t think the compiler has been sufficientlytweaked when it comes to error messages, or that the Haskell communitycares sufficiently about beginners. Rust as a communityputs a lot of energy into good error messages, so that even thoughRust also has a trait you could add to arrays to make  + work,it still has a better error message:\n error[E0277]: cannot add `[{integer}; 2]` to `{integer}` --&gt; test.rs:2:7 |2 | 1 + [2,3]; | ^ no implementation for `{integer} + [{integer}; 2]` | = help: the trait `Add&lt;[{integer}; 2]&gt;` is not implemented for `{integer}`\n But I also think the semantics of  1 are too liberal, leaving the compilerin an awkward place. See, the weird thing is, you can declare  [2,3]a number, making  1+[2,3] an expression that adds two lists:\n instance Num [a] where (+) = (&lt;&gt;) (-) = (&lt;&gt;) -- Eh, why not? (*) = (&lt;&gt;) negate = reverse abs = id signum = const [] fromInteger i = take (fromInteger i) $ repeat undefinedmain = do print $ signum $ 1 + [2,3]\n Once you\u2019ve defined lists as a number,  1 is suddenly a list ifit wants to be. And this contributes to the difficulty of findingthe right error message: what you asked for is possible after all.\n And in the end, this leaves me with the feeling that Haskell hasthis in common with Javascript, and that makes me sad. A polymorphicenough strongly typed language is no longer strongly typed.\n   comments powered by  Disqus", "posttime": "2022-02-17 16:10:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9519\u8bef\u4fe1\u606f,error", "title": "Haskell\u9519\u8bef\u4fe1\u606f\uff1a\u52a0\u6cb9", "title_en": "Haskell error messages: come on", "transed": 1, "url": "https://www.thecodedmessage.com/posts/haskell-gripe/", "via": "", "real_tags": ["\u9519\u8bef\u4fe1\u606f", "error"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073862, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u8ba4\u4e3a\u6709\u4e00\u4e2a\u89d2\u5ea6\u5206\u522b\u4e3a41\u5ea6\u300176\u5ea6\u548c63\u5ea6\u7684\u4e09\u89d2\u5f62\u5417\uff1f\n\u4e00\u5f00\u59cb\uff0c\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u5f88\u5bb9\u6613\u3002\u4ece\u51e0\u4f55\u5b66\u8bfe\u4e0a\u6211\u4eec\u77e5\u9053\u4e09\u89d2\u5f62\u5185\u89d2\u7684\u6d4b\u5ea6\u4e4b\u548c\u662f180\u5ea6\uff0c\u65e2\u713641+76+63=180\uff0c\u7b54\u6848\u4e00\u5b9a\u662f\u80af\u5b9a\u7684\u3002\n\u4f46\u8fd9\u4e2a\u95ee\u9898\u7684\u610f\u4e49\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\u3002\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u5e73\u5766\u7684\u6b27\u51e0\u91cc\u5fb7\u51e0\u4f55\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5185\u89d2\u7684\u5ea6\u91cf\u4e4b\u548c\u4e3a180\u5ea6\u3002\u4f46\u6211\u4eec\u7684\u95ee\u9898\u5e76\u6ca1\u6709\u7ed9\u6211\u4eec\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u88ab\u95ee\u5230\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u3002\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u4e0d\u80fd\u76f4\u63a5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6784\u5efa\u6211\u4eec\u60f3\u8981\u7684\u4e09\u89d2\u5f62\u3002\n\u4e3a\u4e86\u6ee1\u8db3\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\uff0c\u4e09\u89d2\u5f62\u4e2d\u7684\u6bcf\u4e2a\u89d2\u90fd\u5fc5\u987b\u5c0f\u4e8e180\u5ea6\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e2d\u4e24\u4e2a\u89d2\u5e03\u7f6e\u5728\u7ebf\u6bb5\u7684\u540c\u4e00\u4fa7\u3002\u8ba9\u6211\u4eec\u628a41\u5ea6\u89d2\u548c76\u5ea6\u89d2\u653e\u5728\u7ebf\u6bb5AB\u7684\u4e24\u7aef\uff0c\u50cf\u8fd9\u6837\u3002\n\u4eceA\u548cB\u5ef6\u4f38\u7684\u5149\u7ebf\u4e0d\u80fd\u5e73\u884c\uff0c\u56e0\u4e3a\u5728\u6b27\u51e0\u91cc\u5fb7\u51e0\u4f55\u4e2d\uff0c\u8fd9\u9700\u8981\u8fd9\u4e9b\u201c\u540c\u4fa7\u5185\u89d2\u201d\u662f\u201c\u8865\u5145\u7684\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u603b\u548c\u4e3a180\u5ea6\u3002\u8fd9\u4e9b\u89d2\u5ea6\u4e0d\u5e73\u884c\uff0c\u56e0\u6b64\u5149\u7ebf\u4e0d\u5e73\u884c\uff0c\u5982\u679c\u5b83\u4eec\u4e0d\u5e73\u884c\uff0c\u5b83\u4eec\u5fc5\u987b\u76f8\u4ea4\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u3002\u7b2c\u4e09\u4e2a\u89d2\u5ea6\u5fc5\u987b\u4e3a180\u5ea6\u2212 \uff0841+76\uff09=63\uff0c\u6240\u4ee5$latex\\triangle A B C$\u6b63\u662f\u6211\u4eec\u8981\u627e\u7684\u4e09\u89d2\u5f62\u3002\n\u8fd9\u4e2a\u8bba\u70b9\u53ef\u4ee5\u63a8\u5e7f\u5230\u4efb\u4f55\u4e09\u4e2a180\u5ea6\u7684\u89d2\u5ea6\u6d4b\u5ea6\u90fd\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u4e00\u4e2a\u76f4\u63a5\u7684\u7ed3\u679c\u662f\u5f88\u5bb9\u6613\u627e\u5230\u89d2\u5ea6\u6d4b\u5ea6\uff08\u4ee5\u5ea6\u4e3a\u5355\u4f4d\uff09\u90fd\u662f\u6709\u7406\u6570\u7684\u4e09\u89d2\u5f62\u3002\u4ece\u4efb\u610f\u4e24\u4e2a\u6b63\u6709\u7406\u6570\u5f00\u59cb\uff0c\u5176\u548c\u5c0f\u4e8e180\uff1b\u53eb\u4ed6\u4eecx\u548cy\uff0c\u7136\u540e\u53eb180\u2212 \uff08x+y\uff09\u4e5f\u662f\u4e00\u4e2a\u6709\u7406\u6570\uff0c\u56e0\u4e3ax+y+\uff08180\u2212 \uff08x+y\uff09\uff09=180\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e09\u4e2a\u6709\u7406\u89d2\u505a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\n\u5c3d\u7ba1\u7528\u6709\u7406\u89d2\u5ea6\u5236\u4f5c\u4e09\u89d2\u5f62\u5f88\u5bb9\u6613\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e00\u4e2a\u7c7b\u4f3c\u7684\u4e09\u7ef4\u95ee\u9898\u662f\u5982\u6b64\u5177\u6709\u6311\u6218\u6027\uff0c\u4ee5\u81f3\u4e8e\u4e16\u754c\u4e0a\u6700\u597d\u7684\u6570\u5b66\u5bb6\u82b1\u4e86\u51e0\u5341\u5e74\u65f6\u95f4\u624d\u89e3\u51b3\u3002\u662f\u4ec0\u4e48\u8ba9\u8fd9\u79cd\u95ee\u9898\u5728\u4e00\u7ef4\u4e0a\u53d8\u5f97\u5982\u6b64\u56f0\u96be\uff1f\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u5c31\u8981\u66f4\u52a0\u7406\u89e3\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u3002\n\u4e09\u7ef4\u4e2d\u7684\u76f8\u5173\u95ee\u9898\u6d89\u53ca\u56db\u9762\u4f53\u2014\u2014\u4e09\u89d2\u5f62\u9762\u7684\u56db\u8fb9\u5f62\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u60f3\u8c61\u6210\u4e09\u89d2\u5f62\u7684\u4e09\u7ef4\u7248\u672c\u3002\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e09\u89d2\u5f62\u662f\u6700\u7b80\u5355\u7684\u95ed\u5408\u5f62\u72b6\uff0c\u4f60\u53ef\u4ee5\u7528\u5e73\u8fb9\u6765\u505a\uff0c\u4f60\u9700\u8981\u4e09\u6761\u7ebf\u6bb5\u6765\u505a\u3002\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u56db\u9762\u4f53\u662f\u6700\u7b80\u5355\u7684\u5c01\u95ed\u5f62\u72b6\uff0c\u4f60\u53ef\u4ee5\u7528\u5e73\u9762\u6765\u505a\uff0c\u5b83\u9700\u8981\u56db\u4e2a\u4e09\u89d2\u5f62\u9762\u6765\u505a\u3002\n\u56db\u9762\u4f53\u7684\u56db\u4e2a\u4e09\u89d2\u5f62\u9762\u5c31\u50cf\u4e09\u89d2\u5f62\u7684\u4e09\u6761\u8fb9\u3002\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u8003\u8651\u89d2\u5ea6\u5462\uff1f\u4f60\u53ef\u4ee5\u60f3\u8c61\u56db\u9762\u4f53\u7684\u56db\u4e2a\u9876\u70b9\u5404\u6709\u4e00\u4e2a\u201c\u7acb\u4f53\u89d2\u201d\u3002\u4f46\u6211\u4eec\u611f\u5174\u8da3\u7684\u95ee\u9898\u6d89\u53ca\u76f8\u4ea4\u9762\u5f62\u6210\u7684\u201c\u4e8c\u9762\u89d2\u201d\u3002\n\u5982\u679c\u4f60\u753b\u4e24\u4e2a\u76f8\u4ea4\u7684\u5e73\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u8bb8\u591a\u53ef\u4ee5\u6d4b\u91cf\u7684\u4e0d\u540c\u89d2\u5ea6\u3002\u4f60\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\u6765\u8868\u793a\u4e8c\u9762\u89d2\uff1f\n\u7b54\u6848\u662f\u65cb\u8f6c\u76f8\u4ea4\u7684\u9762\uff0c\u76f4\u5230\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e8c\u7ef4\u89d2\u5ea6\u3002\n\u5728\u56db\u9762\u4f53\u4e2d\uff0c\u56db\u4e2a\u9762\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9762\u4e0e\u53e6\u4e00\u4e2a\u9762\u76f8\u4ea4\uff0c\u5f62\u6210\u516d\u6761\u8fb9\u548c\u516d\u4e2a\u4e8c\u9762\u89d2\u3002\u51e0\u5341\u5e74\u6765\uff0c\u6570\u5b66\u5bb6\u4e00\u76f4\u5728\u60f3\u4ec0\u4e48\u6837\u7684\u56db\u9762\u4f53\u6709\u516d\u4e2a\u6709\u7406\u4e8c\u9762\u89d2\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5982\u679c\u89d2\u5ea6\u7684\u5ea6\u5ea6\u91cf\u662f\u6709\u7406\u6570\uff0c\u5219\u8ba4\u4e3a\u89d2\u5ea6\u662f\u6709\u7406\u7684\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b83\u7684\u5f27\u5ea6\u5ea6\u91cf\u662f\u03c0\u7684\u6709\u7406\u500d\u6570\uff08\u8981\u67e5\u770b\u7b49\u4ef7\u6027\uff0c\u8bf7\u6ce8\u610f\uff0c\u8981\u5c06\u5ea6\u5ea6\u91cf\u4ece\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u9700\u8981\u5c06\u5ea6\u5ea6\u91cf\u4e58\u4ee5$latex\\frac{\\pi}{180^{\\circ}}$\uff0c\u56e0\u6b64\u5982\u679c\u5ea6\u5ea6\u91cf\u662f\u6709\u7406\u7684\uff0c\u90a3\u4e48\u5f27\u5ea6\u5ea6\u91cf\u662f\u03c0\u7684\u6709\u7406\u500d\u6570\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff09\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u7528\u6709\u7406\u89d2\u5236\u4f5c\u4e09\u89d2\u5f62\u662f\u591a\u4e48\u5bb9\u6613\uff0c\u4f46\u5bf9\u4e8e\u56db\u9762\u4f53\u6765\u8bf4\uff0c\u95ee\u9898\u8981\u590d\u6742\u5f97\u591a\u3002\u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u7b80\u5355\u7684\u56db\u9762\u4f53$Talk O.A\uff0cA BC $\uff0c\u5b83\u662f\u4ece\u4e00\u4e2a\u7acb\u65b9\u4f53\u7684\u4e00\u4e2a\u89d2\u843d\u4e2d\u5f62\u6210\u7684\u3002\n\u73b0\u5728\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u56db\u9762\u4f53\u4e2d\u7684\u4e09\u4e2a\u4e8c\u9762\u89d2\u662f\u76f4\u89d2\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u7531\u7acb\u65b9\u4f53\u7684\u9762\u5f62\u6210\u7684\u3002\u53ef\u4ee5\u65b9\u4fbf\u5730\u7528\u8fb9\u6765\u8bc6\u522b\u6bcf\u4e2a\u4e8c\u9762\u89d2\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u56db\u9762\u4f53\u4e2d\uff0c$latex OA$\u3001$latex OB$\u548c$latex OC$\u4e0a\u7684\u4e8c\u9762\u89d2\u90fd\u662f\u76f4\u89d2\u3002\n\u5982\u679c\u5207\u5272\u7acb\u65b9\u4f53\uff0c\u4f7f$latex OA$=$latex OB$=$latex OC$\uff0c\u5219$latexAB$\u3001$latexAC$\u548c$latexBC$\u5904\u7684\u4e8c\u9762\u89d2\u90fd\u662f\u4e00\u81f4\u7684\u3002\u8ba9\u6211\u4eec\u5207\u5272\u7acb\u65b9\u4f53\uff0c\u4f7f$latex OA$=$latex OB$=$latex OC$=1\uff0c\u7136\u540e\u8ba1\u7b97$latex BC$\u5904\u7684\u4e8c\u9762\u89d2\u5ea6\u91cf\u3002\u6d4b\u91cf\u8fd9\u4e2a\u4e8c\u9762\u89d2\u7684\u5173\u952e\u662f\u4ece$latex O$\u548c$latex A$\u5230$latex BC$\u7684\u4e2d\u70b9\u7ed8\u5236\u7ebf\u6bb5\u3002\u6211\u4eec\u628a\u8fd9\u4e00\u70b9\u53eb\u505a$M$\u3002\n\u5982\u679c\u6211\u4eec\u65cb\u8f6c\u56db\u9762\u4f53\uff0c\u4ece\u4fa7\u9762\u770b$latex BC$\u5904\u7684\u4e8c\u9762\u89d2\uff0c\u6211\u4eec\u5c06\u770b\u5230$latex\\angle A M O$\uff0c\u5b83\u5177\u6709\u76f8\u540c\u7684\u5ea6\u91cf\u3002\u8981\u6d4b\u91cf$latex\\angle A M O$\uff0c\u6211\u4eec\u9700\u8981\u957f\u5ea6$latex OA$\u548c$latex OM$\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053$latex OA$=1\uff0c\u8981\u627e\u5230$latex OM$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ed4\u7ec6\u770b\u770b\u4e09\u89d2\u5f62$latex\\Delta O C B$\u3002\n\u56e0\u4e3a$latex\\angle bo C$\u662f\u76f4\u89d2\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b9a\u7406\u6765\u627e\u5230$latex BC$=$latex\\sqrt{2}$\u3002\u56e0\u4e3a$latex M$\u662f$latex BC$\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u77e5\u9053$latex MC$=$latex\\frac{\\sqrt{2}}{2}$\u3002\u4f46\u662f\u9664\u4e86\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c$latex\\Delta O C B$\u4e5f\u662f\u7b49\u8170\u7684\uff0c\u56e0\u4e3a$latex OB$=$latex OC$\u3002\u8fd9\u4f7f\u5176\u6210\u4e3a45-45-90\u4e09\u89d2\u5f62\uff0c\u8fd9\u610f\u5473\u7740$latex\\angle OBC$\u548c$latex\\angle OCB$\u90fd\u6d4b\u91cf45\u5ea6\u3002$latex\\Delta O C B$\u662f\u7b49\u8170\u7684\u4e8b\u5b9e\u4fdd\u8bc1\u4e86$latex OM$\u4e0e$latex BC$\u5782\u76f4\uff0c\u8fd9\u4f7f\u5f97$latex\\Delta O M C$\u4e5f\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\u3002\u4f46\u662f\u5982\u679c$latex\\angle OmC$=90\u00b0\uff0c\u800c$latex\\angle OcB$=45\u00b0\uff0c\u90a3\u4e48\u4e09\u89d2\u89d2\u548c\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c$latex\\angle MoC$=45\u00b0\u3002\u8fd9\u4f7f\u5f97\u8f83\u5c0f\u7684\u4e09\u89d2\u5f62$latex\\Delta O M C$\u7b49\u8170\uff0c\u6240\u4ee5$latex OM$=$latex MC$=$latex\\Fract{2}}{2}$\u3002\n\u73b0\u5728\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u627e\u5230$latex\\angle A M O$\u7684\u5ea6\u91cf\u503c\u4e86\u3002\n\u5728$latex\\Delta A M$\u4e2d\uff0c\u6211\u4eec\u77e5\u9053$latex AO$=1\u548c$latex OM$=$latex\\frac{\\sqrt{2}}}{2}$\uff0c\u7531\u4e8e$latex\\angle A O M$\u662f\u76f4\u89d2\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u4e09\u89d2\u5b66\u3002\u5728\u76f4\u89d2\u4e09\u89d2\u5f62\u4e2d\uff0c\u89d2\u7684\u5207\u7ebf\u662f\u5bf9\u8fb9\u548c\u76f8\u90bb\u8fb9\u7684\u6bd4\u503c\uff1a\n\u56e0\u6b64\uff0c$latex\\angle A M O$\u7684\u5ea6\u91cf\u503c\u662f$latex\\sqrt{2}$\u7684\u53cd\u5207\u7ebf\u6216\u53cd\u6b63\u5207\u3002\u8fd9\u662f\u4e00\u4e2a\u65e0\u7406\u6570\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6709\u7406\u56db\u9762\u4f53\u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u5b83\u7684\u4e09\u4e2a\u89d2\u4e0d\u662f\u6709\u7406\u7684\u3002\u5c3d\u7ba1\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u4f46\u8fd9\u4e2a\u65e0\u7406\u56db\u9762\u4f53\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u5173\u4e8e\u5bfb\u627e\u6709\u7406\u56db\u9762\u4f53\u7684\u91cd\u8981\u4fe1\u606f\u3002\n\u4e3a\u4e86\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u627e\u5230\u65e0\u7406\u56db\u9762\u4f53\u4e2d\u6240\u6709\u4e8c\u9762\u89d2\u7684\u8fd1\u4f3c\u548c\u3002\u4f7f\u7528\u8ba1\u7b97\u5668\u6216\u4e09\u89d2\u8868\uff0c\u6211\u4eec\u53d1\u73b0$latex\\angle a M O$\u7684\u8fd1\u4f3c\u6d4b\u91cf\u503c\u7ea6\u4e3a54.74\u5ea6\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6c42\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\u548c\uff1a$latex OABC$\uff1a\u4e09\u4e2a\u662f\u6b63\u786e\u7684\uff08\u6d4b\u91cf90\u5ea6\uff09\uff0c\u53e6\u5916\u4e09\u4e2a\u90fd\u4e0e\u6211\u4eec\u521a\u521a\u53d1\u73b0\u7684\u89d2\u4e00\u81f4\u3002\u56e0\u6b64\uff0c\u8be5\u56db\u9762\u4f53\u4e2d\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u7ea6\u4e3a3\u00d790\u00b0+3\u00d754.74\u00b0\u2248 434.22\u00b0.\n\u8fd9\u5c31\u662f\u4e8b\u60c5\u7684\u8f6c\u6298\u70b9\u3002\u8ba9\u6211\u4eec\u56de\u5230\u7acb\u65b9\u4f53\uff0c\u4e0e\u5176\u5207\u5272\u6210$latex OA$=$latex OB$=$latex OC$\uff0c\u4e0d\u5982\u60f3\u8c61\u4e00\u4e0b\u4ece\u89d2\u843d\u91cc\u5207\u4e0b\u4e00\u7247\u975e\u5e38\u8584\u7684\u4e1c\u897f\u3002\n\u8fd9\u4e2a\u65b0\u56db\u9762\u4f53\u5728$latex OP$\uff0c$latex OC$\uff0c$latex OB$\u5904\u4ecd\u7136\u6709\u4e09\u4e2a90\u5ea6\u7684\u4e8c\u9762\u89d2\uff0c\u4f46\u5176\u4ed6\u7684\u4e8c\u9762\u89d2\u5df2\u7ecf\u6539\u53d8\u3002$latex BC$\u7684\u89d2\u5ea6\u73b0\u5728\u770b\u8d77\u6765\u5f88\u5c0f\uff0c$latex PB$\u548c$latex PC$\u7684\u89d2\u5ea6\u770b\u8d77\u6765\u66f4\u50cf$latex OB$\u548c$latex OC$\u7684\u89d2\u5ea6\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u8d8a\u6765\u8d8a\u8584\u7684\u5207\u7247\uff0c$latex P$\u5c06\u63a5\u8fd1$latex O$\uff0c\u4e8c\u9762\u89d2$latex BC$\u5c06\u63a5\u8fd10\u5ea6\uff0c$latex PB$\u548c$latex PC$\u7684\u4e8c\u9762\u89d2\u5c06\u5206\u522b\u63a5\u8fd190\u5ea6\u3002\u6ce8\u610f\u89d2\u5ea6\u7684\u8fd1\u4f3c\u548c\uff1a\n\u5f53$latex P$\u63a5\u8fd1$latex O$\u65f6\uff0c\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u63a5\u8fd1450\u00b0\u3002\u8fd9\u610f\u5473\u7740\u89d2\u5ea6\u7684\u603b\u548c\u5728\u53d8\u5316\uff01\u5728\u6211\u4eec\u6700\u521d\u7684\u56db\u9762\u4f53$latex OABC$\u4e2d\uff0c\u4e8c\u9762\u89d2\u6d4b\u91cf\u503c\u52a0\u8d77\u6765\u7ea6\u4e3a432\u00b0\uff0c\u4f46\u5f53\u6211\u4eec\u6539\u53d8\u89d2\u5ea6\u65f6\uff0c\u6574\u4f53\u603b\u548c\u4f1a\u6539\u53d8\u3002\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u56db\u9762\u4f53\u53ef\u80fd\u662f\u4e09\u89d2\u5f62\u76843D\u7248\u672c\uff0c\u4f46\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u5b83\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff1a\u6ca1\u6709\u56db\u9762\u4f53\u4e8c\u9762\u89d2\u548c\u5b9a\u7406\u4fdd\u8bc1\u89d2\u548c\u662f\u5e38\u6570\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u80fd\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\u5c31\u662f\u4fdd\u8bc1\u4e00\u4e2a\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\u6d4b\u91cf\u503c\u4e4b\u548c\u5728360\u5230540\u5ea6\u4e4b\u95f4\u3002\u5982\u679c\u4f60\u5728\u5bfb\u627e\u5177\u6709\u6709\u7406\u4e8c\u9762\u89d2\u7684\u56db\u9762\u4f53\uff0c\u8fd9\u662f\u4e2a\u95ee\u9898\u3002\u4f60\u4e0d\u80fd\u53ea\u9009\u62e9\u4e94\u4e2a\u6709\u7406\u89d2\uff0c\u7136\u540e\u786e\u4fdd\u7b2c\u516d\u4e2a\u89d2\u662f\u81ea\u52a8\u6709\u7406\u7684\uff0c\u56e0\u4e3a\u4e0e\u4e09\u89d2\u5f62\u4e0d\u540c\uff0c\u4f60\u4e0d\u77e5\u9053\u548c\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\n\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4f60\u4e0d\u80fd\u786e\u5b9a\u4efb\u4f55\u516d\u4e2a\u89d2\u90fd\u53ef\u4ee5\u662f\u56db\u9762\u4f53\u7684\u4e8c\u9762\u89d2\u3002\u8003\u8651\u4e94\u4e2a\u76f4\u89d2\u548c\u9510\u89d2\u3002\u8fd9\u516d\u4e2a\u89d2\u5ea6\u7684\u603b\u548c\u5728450\u5230540\u5ea6\u4e4b\u95f4\uff0c\u8fd9\u5728\u56db\u9762\u4f53\u7684\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u3002\u4f46\u662f\u6ca1\u6709\u4e00\u4e2a\u56db\u9762\u4f53\u6709\u8fd9\u516d\u4e2a\u89d2\u5ea6\u3002\u5982\u679c\u516d\u4e2a\u4e8c\u9762\u89d2\u4e2d\u6709\u4e94\u4e2a\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u5176\u4e2d\u4e00\u4e2a\u9762\u5fc5\u987b\u6709\u4e09\u4e2a\u6b63\u4e8c\u9762\u89d2\u3002\u4f46\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e9b\u9762\u5c31\u65e0\u6cd5\u95ed\u5408\u5e76\u5f62\u6210\u4e00\u4e2a\u56db\u9762\u4f53\uff1a\u5c31\u50cf\u5e73\u884c\u7ebf\u4e00\u6837\uff0c\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u4ea4\u3002\n\u56e0\u6b64\uff0c\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u6709\u7406\u56db\u9762\u4f53\u7684\u95ee\u9898\u9700\u8981\u7684\u8fdc\u4e0d\u6b62\u662f\u627e\u5230\u4e94\u4e2a\u6216\u516d\u4e2a\u5177\u6709\u4e00\u5b9a\u603b\u548c\u7684\u6709\u7406\u6570\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u9700\u8981\u89e3\u4e00\u4e2a\u5305\u542b105\u9879\u7684\u65b9\u7a0b\uff0c\u5176\u7075\u611f\u6765\u81ea\u7ea6\u7ff0\u00b7\u5eb7\u97e6\u548c\u5b89\u4e1c\u59ae\u4e9a\u00b7\u743c\u65af1976\u5e74\u7684\u4e00\u7bc7\u8bba\u6587\u3002\u4e00\u7fa4\u6570\u5b66\u5bb6\u57282020\u5e74\u5b8c\u6210\u4e86\u8fd9\u9879\u5de5\u4f5c\uff0c\u5176\u7ed3\u679c\u662f\u5bf9\u6240\u6709\u6709\u7406\u56db\u9762\u4f53\u8fdb\u884c\u4e86\u5b8c\u6574\u7684\u5206\u7c7b\u3002\n\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u662f\u6b23\u8d4f\u4e09\u89d2\u5f62\u7684\u7f8e\u4e3d\u548c\u4f18\u96c5\u7684\u4f17\u591a\u539f\u56e0\u4e4b\u4e00\u3002\u5bf9\u4e8e\u56db\u9762\u4f53\u6765\u8bf4\uff0c\u7f3a\u5c11\u8fd9\u6837\u4e00\u4e2a\u5b9a\u7406\u662f\u6b23\u8d4f\u5b83\u4eec\u7684\u7f8e\u4e3d\u548c\u590d\u6742\u6027\u7684\u4e00\u4e2a\u539f\u56e0\uff0c\u4e00\u7ef4\u5411\u4e0a\u3002\n2.\u6b63\u56db\u9762\u4f53\u4e2d\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\uff08\u8fd1\u4f3c\uff09\u548c\u662f\u591a\u5c11\uff1f\n3.\u60f3\u8c61\u4e00\u4e2a\u6b63\u56db\u9762\u4f53\u5750\u5728\u684c\u9762\u4e0a\u3002\u5f53\u4f60\u628a\u4e0a\u9876\u70b9\u5411\u4e0b\u63a8\u5230\u4e0b\u8868\u9762\u65f6\uff0c\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1f\n4.\u4efb\u4f55\u56db\u4e2a360\u5ea6\u7684\u89d2\u5ea6\u6d4b\u91cf\u503c\u90fd\u53ef\u4ee5\u662f\u56db\u8fb9\u5f62\u7684\u89d2\u5ea6\u5417\uff1f\n\u4e00\u4e2a\u7acb\u65b9\u4f53\u670912\u6761\u8fb9\uff0c\u6240\u4ee5\u670912\u4e2a\u4e8c\u9762\u89d2\u3002\u6bcf\u4e2a\u90fd\u662f\u4e00\u4e2a\u76f4\u89d2\uff0c\u56e0\u6b64\u603b\u548c\u4e3a12\u00d790\u00b0=1080\u00b0\u3002\n\u6240\u6709\u516d\u4e2a\u4e8c\u9762\u89d2\u90fd\u662f\u5168\u7b49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9002\u5f53\u7684\u76f4\u89d2\u4e09\u89d2\u5f62\u6765\u627e\u5230\u5176\u4e2d\u4e00\u4e2a\u4e8c\u9762\u89d2\u7684\u5ea6\u91cf\u3002\u6b63\u56db\u9762\u4f53\u7684\u6240\u6709\u9762\u90fd\u662f\u7b49\u8fb9\u4e09\u89d2\u5f62\uff0c\u56e0\u6b64\u9762\u7684\u4e2d\u4f4d\u6570\uff08\u4ece\u9876\u70b9\u5230\u4e2d\u70b9\u7684\u7ebf\u6bb5\uff09\u7684\u957f\u5ea6\u4e3a$latex\\frac{\\sqrt{3}{2}s$\uff0c\u5176\u4e2ds\u662f\u8fb9\u957f\u3002\u8fd9\u662f\u6240\u9700\u4e09\u89d2\u5f62\u7684\u659c\u8fb9\u3002\u4ece\u56db\u9762\u4f53\u9876\u90e8\u9876\u70b9\u5f00\u59cb\u7684\u9ad8\u5ea6\u5728\u5176\u8d28\u5fc3\u5904\u4e0e\u5e95\u90e8\u7b49\u8fb9\u4e09\u89d2\u5f62\u9762\u76f8\u4ea4\uff0c\u5df2\u77e5\u8be5\u9762\u4f4d\u4e8e\u4ece\u4e2d\u70b9\u5f00\u59cb\u6cbf\u7740\u4e2d\u95f4\u5e26\u7684$latex\\frac{1}{3}$\uff0c\u4f7f\u5f97\u8be5\u4e09\u89d2\u5f62\u7684\u8fd9\u6bb5\u957f\u5ea6\u4e3a$latex\\frac{1}{3}$\u00d7$latex\\frac{3}{2}$\u3002\u4e8c\u9762\u89d2\u662f\u8fd9\u4e24\u6761\u8fb9\u4e4b\u95f4\u7684\u89d2\uff0c\u56e0\u6b64\u7b49\u4e8e$latex\\frac{1}{3}\\times\\frac{3}{2}s}{\\frac{3}{3}s}{\\frac{3}{2}s}$=$latex\\Fract{1}{3}$$\u3002\u81ea$latex\\arccos\\frac{1}{3}$\u2248 70.53\u00b0\uff0c\u6b63\u56db\u9762\u4f53\u7684\u516d\u4e2a\uff08\u5168\u7b49\uff09\u4e8c\u9762\u89d2\u4e4b\u548c\u7ea6\u4e3a6\u00d770.53\u00b0\u2248 423.18\u00b0.\n\u968f\u7740\u56db\u9762\u4f53\u53d8\u5e73\uff0c\u5e95\u9762\u4e0a\u7684\u4e09\u4e2a\u4e8c\u9762\u89d2\u5206\u522b\u63a5\u8fd1\u4e8e\u96f6\uff0c\u5176\u4ed6\u4e09\u4e2a\u4e8c\u9762\u89d2\u5206\u522b\u63a5\u8fd1\u4e8e180\u5ea6\uff0c\u603b\u548c\u4e3a3\u00d70+3\u00d7180\u00b0=540\u00b0\u3002\u8fd9\u662f\u56db\u9762\u4f53\u4e2d\u4e8c\u9762\u89d2\u7684\u6700\u5927\u53ef\u80fd\u548c\u3002\u4e3a\u4e86\u8fbe\u5230\u6700\u5c0f\u53ef\u80fd\u7684\u603b\u548c\uff0c\u60f3\u8c61\u4e00\u4e0b\u5c06\u4e24\u6761\u76f8\u5bf9\u7684\u8fb9\u63a8\u5411\u5bf9\u65b9\uff1a\u8fd9\u5c06\u4f7f\u56db\u4e2a\u89d2\u53d8\u4e3a0\uff0c\u4e24\u4e2a\u89d2\u53d8\u4e3a180\u3002\n\u5bf9\u5047\u8bbe\u6d4b\u91cf\u503c\u4e3aa\u3001b\u3001c\u548cd\uff0ca+b+c+d=360\u3002\u5047\u8bbea\u548cb\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8ec\u548cd\u3002\u5c06c\u5206\u89e3\u4e3aC1\u548cC2\uff0c\u5e76\u5c06d\u5206\u89e3\u4e3aD1\u548cD2\uff0c\u8fd9\u6837c=C1+C2\uff0cd=D1+D2\uff0ca+C1+D1=180\uff0cb+C2+D2=180\uff08\u53ef\u4ee5\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u81ea\u7531\u5730\u8fdb\u884c\uff09\u3002\u4f7f\u7528\u8fd9\u4e24\u7ec4\u89d2\u5ea6\u521b\u5efa\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u5e76\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u4f7f\u4e0e\u89d2\u5ea6a\u548cb\u76f8\u5bf9\u7684\u8fb9\u5168\u7b49\u3002\u73b0\u5728\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77\uff0c\u8ba9C1\u548cC2\u5408\u5e76\u6210c\uff0cD1\u548cD2\u5408\u5e76\u6210d\uff0c\u8fd9\u6837\u4f60\u5c31\u5f97\u5230\u4e86a\uff0cb\uff0cc\u548cd\u7684\u56db\u8fb9\u5f62\u3002\n\u4e00\u4e2a\u6709\u8da3\u7684\u6311\u6218\u662f\u8003\u8651\u56db\u8fb9\u5f62\u662f\u5426\u603b\u662f\u4ee5\u7279\u5b9a\u7684\u89d2\u5ea6\u6784\u9020\u3002\n\u672c\u4e13\u680f\u5df2\u88ab\u4fee\u6539\uff0c\u4ee5\u7ea0\u6b63\u5370\u5237\u9519\u8bef\u30023 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0\uff08\u4e0d\u662f432.22\u00b0\uff09\u3002", "note_en": "Do you think there\u2019s a triangle whose angles measure 41, 76 and 63 degrees?\n At first, answering this may seem easy. From geometry class we know that the sum of the measures of the interior angles of a triangle is 180 degrees, and since 41 + 76 + 63 = 180, the answer must be yes.\n But there\u2019s more to this question than meets the eye. The triangle angle sum theorem tells us that, given a triangle in flat Euclidean geometry, the sum of the measures of the interior angles is 180 degrees. But our problem doesn\u2019t give us a triangle. Instead, we are asked if one exists. The triangle angle sum theorem doesn\u2019t directly answer that question. But it can help us construct the triangle we want.\n To satisfy the triangle angle sum theorem, each angle in a triangle has to be less than 180 degrees, which means we can always arrange two of them on the same side of a line segment. Let\u2019s put the 41-degree angle and the 76-degree angle at either end of line segment  AB, like this.\n  The rays extending from  A and  B can\u2019t be parallel, because in Euclidean geometry this would require these \u201csame-side interior\u201d angles to be \u201csupplementary\u201d \u2014 that \u00a0is, to sum to 180 degrees. These angles don\u2019t, so the rays aren\u2019t parallel, and if they aren\u2019t parallel, they must intersect.\n  Call their intersection  C. Now we\u2019ve got a triangle, and now we can apply the triangle angle sum theorem. The third angle must measure 180 \u2212 (41 + 76) = 63, and so $latex\u00a0\\triangle A B C$\u00a0is exactly the triangle we were looking for.\n This argument can be generalized to show that any three angle measures that sum to 180 degrees can make a triangle, and one immediate consequence is that it\u2019s easy to find triangles whose angle measures (in degrees) are all rational numbers. Just start with any two positive rational numbers whose sum is less than 180; call them  x and  y. Then 180 \u2212 ( x +  y) is also a rational number, and since  x +  y + (180 \u2212 ( x +  y)) = 180, you can make a triangle with those three rational angles.\n  As easy as it is to make triangles with rational angles, a similar problem in three dimensions proved so challenging that it took decades for the world\u2019s best mathematicians to resolve. What makes this kind of problem so much harder one dimension up? To understand this is to appreciate the triangle angle sum theorem even more.\n The related problem in three dimensions involves tetrahedra \u2014 four-sided shapes with triangular faces. You could think of them as the three-dimensional version of triangles. In two dimensions the triangle is the simplest closed shape you can make with flat sides, and you need three line segments to do it. In three dimensions, the tetrahedron is the simplest closed shape you can make with flat sides, and it takes four triangular faces to do it.\n  The four triangular faces of a tetrahedron are like the three sides of the triangle. But how should we think about the angles? You could imagine a \u201csolid angle\u201d at each of the four vertices of the tetrahedron. But the question we\u2019re interested in involves the \u201cdihedral angles\u201d formed by the intersecting faces.\n If you sketch two intersecting planes, you\u2019ll discover many different angles you could measure. Which one should you choose to represent the dihedral angle?\n  The answer is to rotate the intersecting faces until they look like a two-dimensional angle.\n   In a tetrahedron each of the four faces intersects every other face, making six edges and six dihedral angles. For decades, mathematicians wondered what kinds of tetrahedra have six rational dihedral angles. As before, an angle is considered rational if its degree measure is a rational number. This is equivalent to its radian measure being a rational multiple of\u00a0\u03c0\u00a0(To see the equivalence, note that to convert from degrees to radians you multiply the degree measure by\u00a0$latex\u00a0\\frac{\\pi}{180^{\\circ}}$, so if the degree measure is rational, then the radian measure is a rational multiple of\u00a0\u03c0, and vice versa.)\n We\u2019ve seen how easy it is to make triangles with rational angles, but the problem is much trickier for tetrahedra. Consider the following simple tetrahedron $latex\u00a0O A B C$\u00a0that is formed from a corner sliced off a cube.\n  Right away we see that three of the dihedral angles in this tetrahedron are right angles, since they were formed by the faces of the cube. It\u2019s convenient to identify each dihedral angle with its edge, so in this tetrahedron the dihedral angles on\u00a0$latex\u00a0OA$, $latex\u00a0OB$ and\u00a0$latex\u00a0OC$ are all right angles.\n If you slice the cube so that\u00a0\u00a0$latex\u00a0OA$ = $latex\u00a0OB$ =\u00a0$latex\u00a0OC$, the dihedral angles at $latexAB$, $latexAC$ and $latexBC$ will all be congruent. Let\u2019s cut the cube so that $latex\u00a0OA$ = $latex\u00a0OB$ =\u00a0$latex\u00a0OC$ = 1, and then calculate the measure of the dihedral angle at $latex\u00a0BC$. The key to measuring this dihedral angle is to draw segments from $latex\u00a0O$ and $latex\u00a0A$ to the midpoint of $latex\u00a0BC$. Let\u2019s call that point $latex\u00a0M$.\n  If we rotate the tetrahedron to look at the dihedral angle at $latex\u00a0BC$ from the side, we\u2019ll see $latex \\angle A M O$, which has the same measure. To measure $latex \\angle A M O$ we need the lengths $latex\u00a0OA$ and $latex\u00a0OM$. We already know that $latex\u00a0OA$ = 1, and to find $latex\u00a0OM$ we just need to take a closer look at triangle $latex \\Delta O C B$.\n Since $latex \\angle B O C$ is a right angle, this is a right triangle, so we can use the Pythagorean theorem to find that $latex\u00a0BC$ = $latex \\sqrt{2}$. And because $latex M$ is the midpoint of $latex BC$, we know $latex MC$ = $latex \\frac{\\sqrt{2}}{2}$. But in addition to being a right triangle, $latex \\Delta O C B$ is also isosceles, because $latex\u00a0OB$ = $latex\u00a0OC$. This makes it a 45-45-90 triangle, which means that $latex \\angle OBC$ and $latex \\angle OCB$ both measure 45 degrees. The fact that $latex \\Delta O C B$ is isosceles guarantees that $latex\u00a0OM$ is perpendicular to $latex\u00a0BC$, which makes $latex \\Delta O M C$ a right triangle as well. But if the measure of $latex \\angle O M C$ = 90\u00b0 and the measure of $latex \\angle O C B$ = 45\u00b0, then the triangle angle sum theorem tells us that the measure of $latex \\angle M O C$ = 45\u00b0. That makes the smaller triangle $latex \\Delta O M C$ isosceles, so $latex\u00a0OM$= $latex\u00a0MC$ = $latex \\frac{\\sqrt{2}}{2}$.\n Now we\u2019re finally ready to find the measure of $latex \\angle A M O$.\n  In $latex \\Delta A M O$ we know $latex\u00a0AO$ = 1 and $latex\u00a0OM$ = $latex \\frac{\\sqrt{2}}{2}$, and since $latex \\angle A O M$ is a right angle, we can apply trigonometry. In a right triangle the tangent of an angle is the ratio of the opposite side and the adjacent side:\n  So the measure of $latex \\angle A M O$ is the inverse tangent, or arctangent, of $latex \\sqrt{2}$. This turns out to be an irrational number, so this is not an example of a rational tetrahedron, as three of its angles aren\u2019t rational. But even though it\u2019s not what we\u2019re looking for, this irrational tetrahedron can tell us something important about the search for rational tetrahedra.\n To see this, let\u2019s find the approximate sum of all the dihedral angles in our irrational tetrahedron. Using a calculator or a trig table, we find the approximate measure of $latex\\angle A M O$ to be around 54.74 degrees.\n We can now sum the six dihedral angles of tetrahedron $latex\u00a0OABC$: Three are right (and measure 90 degrees), and the other three are all congruent to the angle we just found. Thus, the sum of the six dihedral angles in this tetrahedron is approximately 3 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0.\n Here\u2019s where things take a turn. Let\u2019s go back to the cube, and instead of cutting it so $latex\u00a0OA$ = $latex\u00a0OB$ = $latex\u00a0OC$, imagine taking a very thin slice off the corner.\n  This new tetrahedron still has three 90-degree dihedral angles at $latex\u00a0OP$, $latex\u00a0OC$, $latex\u00a0OB$, but the other dihedral angles have changed. The angle at $latex\u00a0BC$ now looks quite small, and the angles at $latex\u00a0PB$ and $latex\u00a0PC$ look more like the angles at $latex\u00a0OB$ and $latex\u00a0OC$.\n In fact, if you continue to take thinner and thinner slices, $latex\u00a0P$ will get closer to $latex\u00a0O$, the dihedral angle $latex\u00a0BC$ will approach 0 degrees, and the dihedral angles at $latex\u00a0PB$ and $latex\u00a0PC$ will each approach 90 degrees. Notice the approximate sum of the angles:\n  As $latex\u00a0P$ gets closer to $latex\u00a0O$ the sum of the six dihedral angles of the tetrahedron gets closer to 450\u00b0. Which means the sum of the angles is changing! In our original tetrahedron $latex\u00a0OABC$ the dihedral angle measures added up to around 432\u00b0, but when we change the angles, the overall sum changes. The tetrahedron may be the 3D version of the triangle in some ways, but in one way it\u2019s quite different: There\u2019s no tetrahedron dihedral angle sum theorem guaranteeing that the sum of the angles is constant.\n It turns out the best we can do is guarantee that the sum of the measures of the six dihedral angles of a tetrahedron lies between 360 and 540 degrees. And if you\u2019re searching for tetrahedra with rational dihedral angles, this is a problem. You can\u2019t just pick five rational angles and be sure the sixth is automatically rational because, unlike in a triangle, you have no idea what the sum has to be.\n  Even worse, you can\u2019t be sure any six angles can even be the dihedral angles of a tetrahedron. Consider five right angles and an acute angle. The sum of these six angles is between 450 and 540 degrees, which is inside the acceptable range for a tetrahedron. But there is no tetrahedron that has these six angle measures. If five of the six dihedral angles are right, then one of the faces must have three right dihedral angles. But if this happens, those faces can\u2019t close up and form a tetrahedron: Like parallel lines, they\u2019ll never meet.\n  Thus, the problem of finding all possible rational tetrahedra requires much more than just finding five or six rational numbers with a certain sum. Among other things, it requires solving an equation with 105 terms inspired by a 1976 paper written by John Conway and Antonia Jones. A group of mathematicians accomplished this in 2020, and the result was a complete  classification of all rational tetrahedra.\n The triangle angle sum theorem is one of many reasons to admire the beauty and elegance of triangles. The lack of such a theorem for tetrahedra is a reason to appreciate their beauty and complexity, one dimension up.\n   2. What is the (approximate) sum of the six dihedral angles in a regular tetrahedron?\n 3. Imagine a regular tetrahedron sitting on a tabletop. As you push the top vertex down toward the bottom face, what happens to the sum of the six dihedral angles?\n 4. Can any four angle measures that sum to 360 degrees be the angles of a quadrilateral?\n  There are 12 edges in a cube, so 12 dihedral angles. Each is a right angle, so the sum is 12 \u00d7 90\u00b0 = 1080\u00b0.\n  All six dihedral angles are congruent, so you can use an appropriate right triangle to find the measure of one of the dihedral angles.   All the faces of the regular tetrahedron are equilateral triangles, so the median \u2014 the segment from vertex to midpoint \u2014 of a face has length $latex \\frac{\\sqrt{3}}{2} s$, where  s is the side length. This is the hypotenuse of the desired triangle. The altitude from the top vertex of the tetrahedron meets the bottom equilateral triangular face at its centroid, which is known to lie $latex\\frac{1}{3}$ of the way along the median from the midpoint, making the length of this leg of this triangle $latex\\frac{1}{3}$ \u00d7 $latex\\frac{\\sqrt{3}}{2} s$. The dihedral angle is the angle between these two sides, and so is equal to the inverse cosine of $latex\\frac{\\frac{1}{3} \\times \\frac{\\sqrt{3}}{2} s}{\\frac{\\sqrt{3}}{2} s}$ = $latex\\frac{1}{3}$. Since $latex \\arccos \\frac{1}{3}$ \u2248 70.53\u00b0, the sum of the six (congruent) dihedral angles of the regular tetrahedron is approximately 6 \u00d7 70.53\u00b0 \u2248 423.18\u00b0.\n  As the tetrahedron flattens out, the three dihedral angles on the bottom face each approach zero, and the other three dihedral angles each approach 180 degrees, for a sum of 3 \u00d7 0 + 3 \u00d7 180\u00b0 = 540\u00b0. This is the maximum possible sum of the dihedral angles in a tetrahedron. To achieve the minimum possible sum, imagine pushing two opposite edges toward each other: This will send four of the angles to 0 and two of the angles to 180.\n  Yes. Say the measures are  a,  b,  c and  d, with  a +  b +  c +  d = 360. Assume that  a and  b are each less than or equal to both  c and  d. Split  c into  c 1 and  c 2 and  d into  d 1 and  d 2 so that  c =  c 1 +  c 2,  d =  d 1 +  d 2,  a +  c 1 +  d 1 = 180, and  b +  c 2 +  d 2 = 180 (there is plenty of freedom to do this in many different ways). Use the two sets of angles to create two triangles, adjusting so that the sides opposite angles  a and  b are congruent. Now put them together so  c 1 and  c 2 merge to form  c and  d 1 and  d 2 merge to form  d, and you\u2019ve got your quadrilateral with angles  a,  b,  c and  d.\n  An interesting challenge is to consider if a quadrilateral can always be constructed with the angles in a particular order.\n  This column has been revised to correct a typographic error. 3 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0 (not 432.22).", "posttime": "2022-02-17 16:03:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e09\u89d2\u5f62,easy,latex", "title": "\u4e09\u89d2\u5f62\u5f88\u5bb9\u6613\uff0c\u56db\u9762\u4f53\u5f88\u96be", "title_en": "Triangles are easy and tetrahedra are hard", "transed": 1, "url": "https://www.quantamagazine.org/triangles-are-easy-tetrahedra-are-hard-20220131/", "via": "", "real_tags": ["\u4e09\u89d2\u5f62", "easy", "latex"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073861, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53d1\u73b0\u5904\u7406\u4e0d\u540c\u4e8e\u6211\u81ea\u5df1\u7684\u89c2\u70b9\u5f88\u5bb9\u6613\u3002\u5f53\u6211\u770b\u5230\u4eba\u4eec\u4ee5\u9519\u8bef\u7684\u7406\u7531\u540c\u610f\u6211\u7684\u89c2\u70b9\u65f6\uff0c\u6211\u4f1a\u611f\u5230\u66f4\u4e0d\u5b89\u3002\n\u6211\u662f\u8f6f\u4ef6\u81ea\u7531\u7684\u70ed\u60c5\u652f\u6301\u8005\uff0c\u8fd9\u5df2\u7ecf\u4e0d\u662f\u4ec0\u4e48\u79d8\u5bc6\u4e86\uff1a\u6211\u5199\u4e86\u4e24\u7bc7\u6587\u7ae0\uff0c\u9610\u8ff0\u4e86\u81ea\u7531\u3001\u81ea\u7531\u548c\u5f00\u6e90\u8f6f\u4ef6\uff08FLOSS\uff09\u5bf9\u7ef4\u62a4\u7528\u6237\u81ea\u4e3b\u6027\u7684\u5fc5\u8981\u6027\uff0c\u4f46\u8fd8\u4e0d\u591f\uff1a\nWhatsapp\u548c\u7528\u6237\u672c\u571f\u5316\u4e00\u7c7b\u63a0\u593a\u6027\u5546\u4e1a\u6a21\u5f0f\u7684\u73b0\u8c61\u6211\u79f0\u4e4b\u4e3a\u201c\u7528\u6237\u672c\u571f\u5316\u201d\u548c\u9632\u5fa1\u63aa\u65bd\uff1a\u7259\u7ebf\u3001\u5f00\u653e\u5e73\u53f0\u548c\u7b80\u5355\u6027\u3002\n\u4fdd\u6301\u5e73\u53f0\u5f00\u653e\u5f00\u653e\u5e73\u53f0\u5982\u4f55\u5931\u53bb\u5f00\u653e\u6027\uff0c\u4ee5\u53ca\u6709\u4ec0\u4e48\u63aa\u65bd\u53ef\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u3002Web\u3001XMPP\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u77e9\u9635\u90fd\u662f\u7a81\u51fa\u95ee\u9898\u53cc\u65b9\u7684\u4f8b\u5b50\u3002\n\u81ea\u7531\u5f00\u6e90\u8f6f\u4ef6\u5b9a\u4e49\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u90e8\u5206\u662f\u7814\u7a76\u548c\u4fee\u6539\u7a0b\u5e8f\u7684\u81ea\u7531\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u8bbf\u95ee\u53ef\u7f16\u8f91\u7684\u6e90\u4ee3\u7801\u3002\u6211\u540c\u610f\u8fd9\u79cd\u63a5\u89e6\u662f\u5fc5\u8981\u7684\uff1b\u7136\u800c\uff0c\u592a\u591a\u4eba\u51fa\u4e8e\u9519\u8bef\u7684\u539f\u56e0\u652f\u6301\u6e90\u53ef\u7528\u6027\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u6e90\u4ee3\u7801\u5bf9\u8f6f\u4ef6\u7684\u8fd0\u884c\u65b9\u5f0f\u5177\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u900f\u660e\u6027\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u6b64\u6709\u5fc5\u8981\u786e\u5b9a\u5b83\u662f\u5426\u5b89\u5168\u6216\u53ef\u4fe1\u3002\u867d\u7136\u901a\u8fc7\u6a21\u7cca\u6027\u5b9e\u73b0\u5b89\u5168\u6027\u80af\u5b9a\u4e0d\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u63aa\u65bd\uff0c\u4f46\u8fd9\u79cd\u8bf4\u6cd5\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\u6e90\u4ee3\u7801\u63cf\u8ff0\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u76ee\u7684\uff1b\u786e\u5b9a\u5176\u5b9e\u9645\u529f\u80fd\u662f\u5426\u4e0e\u9884\u671f\u8bbe\u8ba1\u76f8\u7b26\u662f\u4e0d\u5fc5\u8981\u4e14\u4e0d\u5145\u5206\u7684\u3002\n\u6211\u60f3\u8fdb\u4e00\u6b65\u8ba8\u8bba\u8fd9\u4e9b\u95ee\u9898\uff0c\u4e3b\u8981\u5173\u6ce8\u5df2\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4e0d\u8ba4\u4e3a\u4ece\u5b89\u5168\u89d2\u5ea6\u6765\u770b\uff0c\u6e90\u53ef\u7528\u6027\u662f\u65e0\u7528\u7684\uff08\u8fd9\u5f53\u7136\u4f1a\u4f7f\u5ba1\u6838\u66f4\u5bb9\u6613\uff09\uff0c\u6211\u786e\u5b9e\u8ba4\u4e3a\u6e90\u53ef\u7528\u6027\u662f\u7528\u6237\u81ea\u7531\u6240\u5fc5\u9700\u7684\u3002\u6211\u53ea\u662f\u8ba4\u4e3a\u6e90\u4e0d\u53ef\u7528\u5e76\u4e0d\u610f\u5473\u7740\u4e0d\u5b89\u5168\uff0c\u6e90\u53ef\u7528\u6027\u4e5f\u4e0d\u610f\u5473\u7740\u5b89\u5168\u3002\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u6267\u884c\u5b89\u5168\u6027\u5206\u6790\u662f\u53ef\u80fd\u7684\uff08\u800c\u4e14\u901a\u5e38\u66f4\u53ef\u53d6\uff09\uff0c\u800c\u4e0d\u4e00\u5b9a\u8981\u6709\u6e90\u4ee3\u7801\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6f0f\u6d1e\u53d1\u73b0\u901a\u5e38\u4e0d\u4f9d\u8d56\u4e8e\u6e90\u4ee3\u7801\u5206\u6790\u3002\n\u9644\u8a00\uff1a\u8fd9\u79cd\u7acb\u573a\u4e0d\u662f\u7edd\u5bf9\u7684\uff1b\u6211\u627f\u8ba4\u5e95\u90e8\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u53cd\u9a73\uff01\n\u6211\u4e0d\u8ba4\u4e3a\u6709\u4eba\u771f\u7684\u8ba4\u4e3a\u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u4f1a\u5728\u6e90\u4ee3\u7801\u53d1\u5e03\u540e\u7acb\u5373\u5f97\u5230\u6539\u5584\u3002\u6211\u8981\u56de\u5e94\u7684\u8bba\u70b9\u662f\uff0c\u6e90\u4ee3\u7801\u5bf9\u4e8e\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u7684\u529f\u80fd\u548c\u5b89\u5168\u6027\u662f\u5fc5\u8981\u7684\uff0c\u6ca1\u6709\u5b83\u6211\u4eec\u5c31\u65e0\u6cd5\u786e\u5b9a\u3002\n\u5047\u8bbe\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u7a0b\u5e8f\u67b6\u6784\u7684\u91cd\u5199\u4e0d\u662f\u9009\u98791\uff0c\u8f6f\u4ef6\u5b89\u5168\u901a\u5e38\u4f1a\u901a\u8fc7\u7c7b\u4f3c\u4ee5\u4e0b\u8fc7\u7a0b\u7684\u65b9\u5f0f\u4fee\u590d\u6f0f\u6d1e\u6765\u63d0\u9ad8\uff1a\n\u6e90\u4ee3\u7801\u901a\u5e38\u5bf9\u7b2c3\u6b65\u5f88\u6709\u5e2e\u52a9\uff08\u6709\u65f6\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff09\u3002\u5982\u679c\u6709\u4eba\u5b8c\u6210\u4e86\u6b65\u9aa43\uff0c\u4ed6\u4eec\u5c06\u9700\u8981\u6e90\u4ee3\u7801\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u6b65\u9aa44\u3002\u6b65\u9aa41\u548c2\u4e0d\u9700\u8981\u6e90\u4ee3\u7801\uff1b\u8fd9\u4e9b\u6b65\u9aa4\u4f9d\u8d56\u4e8e\u7406\u89e3\u7a0b\u5e8f\u7684\u9519\u8bef\u884c\u4e3a\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u9006\u5411\u5de5\u7a0b\u548c/\u6216\u6a21\u7cca\u5316\u3002\n\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u662f\u5982\u4f55\u8bbe\u8ba1\u7684\u548c\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u505a\u4ec0\u4e48\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4e00\u79cd\u7406\u89e3\u7684\u5408\u7406\u6c34\u5e73\u5e76\u4e0d\u610f\u5473\u7740\u53e6\u4e00\u79cd\u3002\n\u6e90\u4ee3\u78012\u5bf9\u4e8e\u63cf\u8ff0\u7a0b\u5e8f\u7684\u9ad8\u7ea7\u3001\u4eba\u7c7b\u53ef\u7406\u89e3\u7684\u8bbe\u8ba1\u81f3\u5173\u91cd\u8981\uff1b\u5b83\u4ee3\u8868\u4e86\u4e00\u4efd\u5408\u540c\uff0c\u6982\u8ff0\u4e86\u5f00\u53d1\u4eba\u5458\u5bf9\u7a0b\u5e8f\u7684\u9884\u671f\u884c\u4e3a\u3002\u7136\u540e\uff0c\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u56683\u5fc5\u987b\u5c06\u5176\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\u3002\u4f46\u6e90\u4ee3\u7801\u5e76\u4e0d\u603b\u662f\u5bb9\u6613\u76f4\u63a5\u6620\u5c04\u5230\u673a\u5668\u6307\u4ee4\uff0c\u56e0\u4e3a\u5b83\u662f\u590d\u6742\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff1a\n\u7f16\u8bd1\u5668\uff08\u6709\u65f6\u751a\u81f3\u662f\u89e3\u91ca\u5668\uff09\u53ef\u4ee5\u5e94\u7528\u96be\u4ee5\u63a8\u7406\u7684\u4f18\u5316\u548c\u5f3a\u5316\u63aa\u65bd\u3002\u5bf9\u4e8e\u5229\u7528\u8fd0\u884c\u65f6\u4fe1\u606f\u7684JIT\u7f16\u8bd1\u5668\u6765\u8bf4\u5c24\u5176\u5982\u6b64\u3002\n\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4e0d\u592a\u4e86\u89e3\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\uff0c\u5e76\u4e14\u4ee5\u4e0e\u5f00\u53d1\u4eba\u5458\u671f\u671b\u76f8\u77db\u76fe\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\n\u4ee5\u4e0a\u6240\u6709\u8981\u70b9\u90fd\u9002\u7528\u4e8e\u6bcf\u4e2a\u4f9d\u8d56\u9879\u548c\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002\n\u6b64\u5916\uff0c\u6240\u6709\u7a0b\u5e8f\u5458\u90fd\u662f\u6709\u7f3a\u9677\u7684\u51e1\u4eba\uff0c\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u5b8c\u5168\u7406\u89e3\u6e90\u4ee3\u7801\u3002\u6bcf\u4e00\u4e2a\u505a\u8fc7\u5927\u91cf\u7f16\u7a0b\u7684\u4eba\u90fd\u719f\u6089\u5728\u8fd0\u884c\u65f6\u9047\u5230\u9519\u8bef\u7684\u611f\u89c9\uff0c\u539f\u56e0\u662f\u4e0d\u53ef\u80fd\u627e\u5230\u7684\u2026\u2026\u76f4\u5230\u4ed6\u4eec\u6ce8\u610f\u5230\u5b83\u5728\u7b2c12\u884c\u76ef\u7740\u4ed6\u4eec\u770b\u3002\u60f3\u60f3\u90a3\u4e9b\u4e0d\u5bb9\u6613\u88ab\u6ce8\u610f\u5230\u7684\u9519\u8bef\u3002\n\u9605\u8bfb\u6e90\u4ee3\u7801\u3001\u7f16\u8bd1\u5e76\u901a\u8fc7\u6d4b\u8bd5\u5e76\u4e0d\u8db3\u4ee5\u5411\u6211\u4eec\u5c55\u793a\u7a0b\u5e8f\u7684\u6700\u7ec8\u884c\u4e3a\u3002\u77e5\u9053\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u505a\u4ec0\u4e48\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u2026\u8fd0\u884c\u5b83\u30024.\n\u51e0\u4e4e\u6240\u6709\u7684\u7a0b\u5e8f\u5458\u90fd\u5145\u5206\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u80fd\u529b\u6709\u9650\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u5df2\u7ecf\u4f7f\u7528\u4e0d\u4f9d\u8d56\u6e90\u4ee3\u7801\u7684\u6280\u672f\u6765\u5206\u6790\u8fd0\u884c\u65f6\u884c\u4e3a\u3002\u4f8b\u5982\uff0c\u51e0\u79cd\u7f16\u8bd1\u8bed\u8a005\u7684\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6784\u5efa\u5e26\u6709\u51c0\u5316\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4ee5\u68c0\u6d4b\u4eba\u773c\u5728\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\u53ef\u80fd\u9519\u8fc7\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u3001\u79cd\u65cf\u3001\u672a\u521d\u59cb\u5316\u8bfb\u53d6\u7b49\u3002\u867d\u7136\u6784\u5efa\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u9700\u8981\u6e90\u4ee3\u7801\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\u8fd0\u884c\u5b83\u4eec\u5e76\u89c2\u5bdf\u5931\u8d25\u3002\n\u5411\u6d4b\u8bd5\u4eba\u5458\u5206\u53d1\u5e26\u6709\u6d88\u6bd2\u5668\u548c\u8c03\u8bd5\u4fe1\u606f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u6536\u96c6\u6709\u5173\u7a0b\u5e8f\u6f5c\u5728\u5b89\u5168\u95ee\u9898\u7684\u6570\u636e\u7684\u6709\u6548\u65b9\u6cd5\u3002\n\u901a\u8fc7\u8bfb\u53d6\u5927\u578b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\uff0c\u5f88\u96be\u786e\u5b9a\u5b83\u9700\u8981\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u548c\u6587\u4ef6\uff0c\u5c24\u5176\u662f\u5728\u67d0\u4e9b\u5e93\uff08\u4f8b\u5982libc\u5b9e\u73b0/\u7248\u672c\uff09\u53ef\u80fd\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u3002\u50cfstrace\uff081\uff096\u8fd9\u6837\u7684\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u5668\u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u3002\n\u4e2a\u4eba\u4f8b\u5b50\uff1a\u6211\u4ecestrace\u90a3\u91cc\u83b7\u5f97\u7684\u7406\u89e3\u5bf9\u6211\u7f16\u5199bubblewrap\u811a\u672c\u662f\u5fc5\u8981\u7684\u3002\u8fd9\u4e9b\u811a\u672c\u4f7f\u7528BubbleRap\uff081\uff09\u4ee5\u5c3d\u53ef\u80fd\u4f4e\u7684\u6743\u9650\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6c99\u7bb1\u5904\u7406\u3002\u5206\u6790\u6bcf\u4e00\u4e2a\u76f8\u5173\u7684\u7a0b\u5e8f\u548c\u5e93\u7684\u6e90\u4ee3\u7801\u90fd\u4f1a\u82b1\u8d39\u6211\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\uff0c\u800cstrace\u5728\u4e00\u4e2a\u4e0b\u5348\u5c31\u7ed9\u4e86\u6211\u6211\u9700\u8981\u77e5\u9053\u7684\u4e00\u5207\uff1a\u5206\u6790strace\u7684\u8f93\u51fa\u4f1a\u51c6\u786e\u5730\u544a\u8bc9\u6211\u5141\u8bb8\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u4ee5\u53ca\u5141\u8bb8\u8bbf\u95ee\u54ea\u4e9b\u6587\u4ef6\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u77e5\u9053\u7a0b\u5e8f\u662f\u7528\u4ec0\u4e48\u8bed\u8a00\u7f16\u5199\u7684\u3002\u6211\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee47\u751f\u6210\u4e86syscall allow list\u7684\u521d\u59cb\u7248\u672c\uff1a\n\u7a0b\u5e8fargs 2\u7684strace\u540d\u79f0&gt&amp\uff1b1\\|rg&#39^\uff08[a-z]*\uff09\\\uff08.&#39\uff1b--\u66ff\u6362&#39\uff1b$1&#39\uff1b\\|\u6392\u5e8f| uniq\n\u8fd9\u8fd8\u6269\u5c55\u5230\u786e\u5b9a\u7a0b\u5e8f\u5982\u4f55\u5229\u7528\u7f51\u7edc\uff1aWireshark\u7b49\u6570\u636e\u5305\u55c5\u63a2\u5668\u53ef\u4ee5\u786e\u5b9a\u7a0b\u5e8f\u4f55\u65f6\u8fde\u63a5\u5230\u7f51\u7edc\uff0c\u4ee5\u53ca\u8fde\u63a5\u5230\u54ea\u91cc\u3002\n\u8fd9\u4e9b\u65b9\u6cd5\u5e76\u975e\u5b8c\u7f8e\u65e0\u7f3a\u3002\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u5668\u7684\u8bbe\u8ba1\u53ea\u662f\u4e3a\u4e86\u9610\u660e\u7a0b\u5e8f\u5982\u4f55\u4e0e\u5185\u6838\u4ea4\u4e92\u3002\u5185\u6838\u4ea4\u4e92\u544a\u8bc9\u4e86\u6211\u4eec\u5f88\u591a\uff08\u6709\u65f6\u8fd9\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\uff09\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u80fd\u8bf4\u660e\u5168\u90e8\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u4f20\u8f93\u52a0\u5bc68\uff0c\u5305\u68c0\u67e5\u53ef\u80fd\u4f1a\u6709\u70b9\u75db\u82e6\uff1b\u8ddf\u8e2a\u7a0b\u5e8f\u7684\u6267\u884c\u548c\u6570\u636e\u5305\u68c0\u67e5\u53ef\u4ee5\u63d0\u4f9b\u6e05\u6670\u7684\u4fe1\u606f\uff0c\u4f46\u8fd9\u5e76\u4e0d\u5bb9\u6613\u3002\n\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u4eec\u8f6c\u5411\u6838\u5fc3\u8f6c\u50a8\uff0c\u4e5f\u79f0\u4e3a\u5185\u5b58\u8f6c\u50a8\u3002\u5185\u6838\u8f6c\u50a8\u5171\u4eab\u7a0b\u5e8f\u5728\u6267\u884c\u671f\u95f4\u6216\u5d29\u6e83\u65f6\u7684\u72b6\u6001\uff0c\u8ba9\u6211\u4eec\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\u3002\u5305\u542b\u8c03\u8bd5\u7b26\u53f7\uff08\u4f8b\u5982DWARF\uff09\u7684\u6784\u5efa\u6709\u66f4\u8be6\u7ec6\u7684\u6838\u5fc3\u8f6c\u50a8\u3002\u53d1\u5e03\u9884\u53d1\u5e03\u7248\u672c\u7684\u6bcf\u65e5\u5feb\u7167\u7684\u4f9b\u5e94\u5546\u901a\u5e38\u4f1a\u5305\u542b\u4e00\u4e9b\u7b26\u53f7\uff0c\u4ee5\u5411\u6d4b\u8bd5\u4eba\u5458\u63d0\u4f9b\u6709\u5173\u5d29\u6e83\u539f\u56e0\u7684\u66f4\u591a\u7ec6\u8282\u3002Web\u6d4f\u89c8\u5668\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\uff1aChrome\u5f00\u53d1\u5feb\u7167\u3001Chrome Canary\u3001Firefox Nightly\u3001WebKit Canary\u6784\u5efa\u7b49\u7b49\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u5305\u62ec\u8c03\u8bd5\u7b26\u53f7\u3002\u76f4\u5230\u6700\u8fd1\uff0cMinecraft:Basefine\u7248\u8fd8\u5305\u62ec\u8c03\u8bd5\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u88abmodding\u793e\u533a\u5927\u91cf\u4f7f\u7528\u30029\n2020\u5e74\uff0cZoom Video Communications\u56e0\u5c06\u5176\u201cZoom\u201d\u8f6f\u4ef6\u4f5c\u4e3a\u5b89\u5168\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u89c6\u9891\u4f1a\u8bae\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u8425\u9500\u800c\u53d7\u5230\u5ba1\u67e5\u3002Zoom\u7684\u6587\u6863\u58f0\u79f0\u5b83\u4f7f\u7528\u4e86\u201cAES-256\u201d\u52a0\u5bc6\u3002\u5982\u679c\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u6211\u4eec\u662f\u5426\u5fc5\u987b\u6309\u7167\u6587\u6863\u7684\u8981\u6c42\u884c\u4e8b\uff1f\n\u516c\u6c11\u5b9e\u9a8c\u5ba4\u6ca1\u6709\u30022020\u5e744\u6708\uff0c\u5b83\u53d1\u5e03\u4e86\u4e00\u4efd\u62a5\u544a\uff0c\u63ed\u793a\u4e86Zoom\u52a0\u5bc6\u7684\u5173\u952e\u7f3a\u9677\u3002\u5b83\u5229\u7528Wireshark\u548cmitmproxy\u5206\u6790\u7f51\u7edc\u6d3b\u52a8\uff0c\u5e76\u68c0\u67e5\u6838\u5fc3\u8f6c\u50a8\u4ee5\u4e86\u89e3\u5176\u52a0\u5bc6\u5b9e\u73b0\u3002\u516c\u6c11\u5b9e\u9a8c\u5ba4\u7684\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0cZoom\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f3a\u9677\u6781\u5927\u7684AES-128\u5f31\u7248\u672c\uff08ECB\u6a21\u5f0f\uff09\u5b9e\u73b0\uff0c\u5e76\u4e14\u5f88\u5bb9\u6613\u7ed5\u8fc7\u5b83\u3002\n\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u3001\u6570\u636e\u5305\u55c5\u63a2\u548c\u6838\u5fc3\u8f6c\u50a8\u90fd\u5f88\u597d\uff0c\u4f46\u5b83\u4eec\u4f9d\u8d56\u4e8e\u624b\u52a8\u6267\u884c\uff0c\u800c\u624b\u52a8\u6267\u884c\u53ef\u80fd\u4e0d\u4f1a\u547d\u4e2d\u6240\u6709\u6240\u9700\u7684\u4ee3\u7801\u8def\u5f84\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u5206\u6790\u53ef\u7528\u3002\n\u8ddf\u8e2a\u6267\u884c\u548c\u68c0\u67e5\u5185\u5b58\u8f6c\u50a8\u53ef\u4ee5\u88ab\u89c6\u4e3a\u9006\u5411\u5de5\u7a0b\u7684\u5f62\u5f0f\uff0c\u4f46\u5b83\u4eec\u53ea\u63d0\u4f9b\u4e86\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u8868\u9762\u89c6\u56fe\u3002\u5f53\u6211\u4eec\u5206\u6790\u4e8c\u8fdb\u5236\u5de5\u4ef6\u65f6\uff0c\u9006\u5411\u5de5\u7a0b\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002\n\u9759\u6001\u4e8c\u8fdb\u5236\u5206\u6790\u662f\u68c0\u67e5\u7a0b\u5e8f\u5e95\u5c42\u8bbe\u8ba1\u7684\u5f3a\u5927\u65b9\u6cd5\u3002\u53cd\u7f16\u8bd1\uff08\u5c24\u5176\u662f\u5728\u6dfb\u52a0\u8c03\u8bd5\u7b26\u53f7\u65f6\uff09\u53ef\u4ee5\u91cd\u65b0\u6784\u9020\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u96c6\u6216\u6e90\u4ee3\u7801\u3002\u7b26\u53f7\u540d\u79f0\u5728\u7cbe\u7b80\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u53ef\u7406\u89e3\uff0c\u6ce8\u91ca\u4e5f\u5c06\u4e22\u5931\u3002\u5269\u4e0b\u7684\u8db3\u4ee5\u7834\u8bd1\u63a7\u5236\u6d41\uff0c\u63ed\u793a\u7a0b\u5e8f\u5982\u4f55\u5904\u7406\u6570\u636e\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u5f88\u4e4f\u5473\uff0c\u5c24\u5176\u662f\u5f53\u7a0b\u5e8f\u4f7f\u7528\u67d0\u79cd\u5f62\u5f0f\u7684\u4e8c\u8fdb\u5236\u6a21\u7cca\u5904\u7406\u65f6\u3002\n\u76ee\u6807\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8bbe\u8ba1\uff08\u6ca1\u6709\u6e90\u4ee3\u7801\u662f\u975e\u5e38\u56f0\u96be\u7684\uff09\uff1b\u5b83\u901a\u5e38\u662f\u4e3a\u4e86\u56de\u7b54\u4e00\u4e2a\u7279\u5b9a\u7684\u95ee\u9898\uff0c\u586b\u8865\u8ddf\u8e2a/\u6a21\u7cca\u7559\u4e0b\u7684\u7a7a\u767d\uff0c\u6216\u8005\u627e\u5230\u4e00\u4e2a\u8457\u540d\u7684\u5c5e\u6027\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u53d1\u5e03\u5173\u4e8e\u5176\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u7684\u5b89\u5168\u4f53\u7cfb\u7ed3\u6784\u7684\u6587\u6863\u65f6\uff0c\u53cd\u7f16\u8bd1\u5668\u7b49\u9006\u5411\u5de5\u7a0b\u5de5\u5177\u6b63\u662f\u9a8c\u8bc1\u5176\u8bda\u5b9e\u6027\uff08\u6216\u7f3a\u4e4f\u8bda\u5b9e\u6027\uff09\u6240\u9700\u8981\u7684\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53cd\u7f16\u8bd1\u5668\u5f88\u5c11\u5355\u72ec\u4f7f\u7528\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u901a\u5e38\u662f\u9006\u5411\u5de5\u7a0b\u6846\u67b6\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4e5f\u652f\u6301\u5185\u5b58\u5206\u6790\u3001\u8c03\u8bd5\u5de5\u5177\u3001\u811a\u672c\u7f16\u5199\uff0c\u6709\u65f6\u751a\u81f3\u662fIDE\u3002\u6211\u7528\u7684\u662fradare\u9879\u76ee\uff0c\u4f46Ghidra\u4e5f\u5f88\u53d7\u6b22\u8fce\u3002\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u4ed6\u4eec\u7684\u6587\u6863\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5f00\u59cb\u3002\n\u8fd9\u4e9b\u53cd\u5411\u5de5\u7a0b\u6280\u672f\u2014\u2014\u8ffd\u8e2a\u3001\u6570\u636e\u5305\u55c5\u63a2\u3001\u4e8c\u8fdb\u5236\u5206\u6790\u548c\u5185\u5b58\u8f6c\u50a8\u7684\u7ec4\u5408\u2014\u2014\u6784\u6210\u4e86\u5927\u591a\u6570\u73b0\u4ee3\u6076\u610f\u8f6f\u4ef6\u5206\u6790\u7684\u5de5\u4f5c\u539f\u7406\u3002\u8bf7\u53c2\u89c1\u6b64Zoom Windows\u5b89\u88c5\u7a0b\u5e8f\u7684\u5168\u81ea\u52a8\u5206\u6790\u793a\u4f8b\u3002\u5b83\u5217\u4e3e\u4e86\u5927\u91cf\u6709\u5173Zoom\u7684\u4fe1\u606f\uff0c\u800c\u65e0\u9700\u8bbf\u95ee\u5176\u6e90\u4ee3\u7801\uff1a\u8bfb\u53d6\u552f\u4e00\u7684\u673a\u5668\u4fe1\u606f\u3001\u53cdVM\u548c\u53cd\u53cd\u5411\u5de5\u7a0b\u6280\u5de7\u3001\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u3001\u5404\u79cd\u7c7b\u578b\u7684\u7f51\u7edc\u8bbf\u95ee\u3001\u8bfb\u53d6\u5df2\u88c5\u5165\u5377\u7684\u4fe1\u606f\uff0c\u7b49\u7b49\u3002\n\u8981\u4eb2\u81ea\u5c1d\u8bd5\uff0c\u8bf7\u4f7f\u7528\u4e3a\u52a8\u6001\u5206\u6790\u8bbe\u8ba1\u7684\u6c99\u76d2\u3002\u5e03\u8c37\u9e1f\u662f\u4e00\u79cd\u5e38\u89c1\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u5fb7\u62c9\u514b\u592b\u5219\u66f4\u4e3a\u5148\u8fdb\u3002\n\u82f1\u7279\u5c14\u7ba1\u7406\u5f15\u64ce\uff08ME\uff09\u662f\u6240\u6709\u82f1\u7279\u5c14\u5904\u7406\u5668\uff082008\u5e74\u4e4b\u540e\uff09\u7684\u5fc5\u9009\u5b50\u7cfb\u7edf\uff0c\u5bf9\u4e3b\u673a\u7cfb\u7edf\u5177\u6709\u6781\u9ad8\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4e3b\u52a8\u7ba1\u7406\u6280\u672f\uff08AMT\uff09\u8fd0\u884c\u5728\u5e26\u6709\u201cvPro\u201d\u54c1\u724c\u7684\u82f1\u7279\u5c14\u5904\u7406\u5668\u5b50\u96c6\u4e0a\u3002\u540e\u8005\u53ef\u4ee5\u88ab\u7981\u7528\uff0c\u7528\u4e8e\u7ec4\u7ec7\u8fdc\u7a0b\u7ba1\u7406\u5176\u5e93\u5b58\uff08\u5b89\u88c5\u8f6f\u4ef6\u3001\u76d1\u63a7\u3001\u8fdc\u7a0b\u901a\u7535/\u7761\u7720/\u5524\u9192\u7b49\uff09\u3002\nIntel ME\u5bf9\u4e3b\u673a\u7cfb\u7edf\u7684\u8bbf\u95ee\u5982\u6b64\u6df1\u5165\uff0c\u800c\u4e14\u5b83\u662f\u4e13\u6709\u7684\uff0c\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\u90fd\u4f7f\u5b83\u6210\u4e3a\u4e86\u9ad8\u5ea6\u5ba1\u67e5\u7684\u4e3b\u9898\u3002\u8bb8\u591a\u4eba\uff08\u5927\u591a\u6570\u4eba\u5728\u8fd9\u65b9\u9762\u51e0\u4e4e\u6ca1\u6709\u7ecf\u9a8c\uff09\u5c06\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u58f0\u79f0ME\u662f\u4e00\u4e2a\u540e\u95e8\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u6df7\u6dc6\u5730\u5f15\u7528Intel AMT\u7684\u529f\u80fd\u800c\u4e0d\u662fME\u3002\u771f\u7684\u4e0d\u53ef\u80fd\u786e\u5b9a\u5417\uff1f\n\u6211\u9009\u62e9\u201c\u82f1\u7279\u5c14ME+AMT\u201d\u4f5c\u4e3a\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u5b83\u663e\u793a\u4e86\u6240\u6db5\u76d6\u7684\u5206\u6790\u65b9\u6cd5\u7684\u5a01\u529b\u548c\u5c40\u9650\u6027\u3002ME\u4e0d\u662f\u7531\u7b80\u5355\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7ec4\u6210\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u4f4d\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0b\u65b9\uff0c\u6709\u65f6\u88ab\u79f0\u4e3a\u201cRing-3\u201d\u300210\u5206\u6790\u4ec5\u9650\u4e8e\u5916\u90e8\u76d1\u6d4b\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u76d1\u6d4b\u7f51\u7edc\u6d3b\u52a8\uff09\u548c\u53cd\u5411\u5de5\u7a0b\uff08\u5728\u5b98\u65b9\u6587\u4ef6\u7684\u5e2e\u52a9\u4e0b\uff0c\u672a\u6253\u5305\u7684\u90e8\u5206\u6a21\u7cca\u56fa\u4ef6\u66f4\u65b0\uff09\u3002\u8fd9\u6bd4\u5206\u6790\u5178\u578b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5e93\u66f4\u6162\u3001\u66f4\u96be\u3002\n\u7b54\u6848\u6709\u70b9\u590d\u6742\u2026\u2026\u6bd4\u8038\u4eba\u542c\u95fb\u7684\u5934\u6761\u65b0\u95fb\u66f4\u65e0\u804a\u3002\u4f0a\u6208\u5c14\u00b7\u65af\u79d1\u94a6\u65af\u57fa\uff08Igor Skochinsky\uff09\u548c\u5c3c\u53e4\u62c9\u00b7\u79d1\u7eb3\uff08Nicola Corna\uff0c\u5206\u522b\u662fme tools\u548cme_cleaner\u7684\u5f00\u53d1\u8005\uff09\u7b49\u9006\u5411\u5de5\u7a0b\u5e08\u5bf9me\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u800c\u74e6\u897f\u91cc\u5965\u65af\u00b7\u7ef4\u5f17\u91cc\u65af\uff08Vassilios Verververis\uff09\u7b49\u7814\u7a76\u4eba\u5458\u57282010\u5e74\u5bf9AMT\u8fdb\u884c\u4e86\u5f7b\u5e95\u7684\u5206\u6790\u3002\u6709\u8da3\u7684\u662f\uff0c\u524d\u4e24\u4eba\u8ba4\u4e3a\u5ba1\u8ba1\u4e8c\u8fdb\u5236\u4ee3\u7801\u6bd4\u5ba1\u8ba1\u6e90\u4ee3\u7801\u66f4\u53ef\u53d6\u3002\n\u53ea\u9700\u76d1\u63a7\u7f51\u7edc\u6d3b\u52a8\u5e76\u7cfb\u7edf\u5730\u6d4b\u8bd5\u6587\u6863\u4e2d\u7684\u6240\u6709\u58f0\u660e\uff0cVerveris\u5c31\u53ef\u4ee5\u53d1\u73b0Intel AMT\u4e2d\u7684\u5927\u91cf\u5b89\u5168\u95ee\u9898\u3002\u7136\u800c\uff0c\u636e\u6211\u6240\u77e5\uff0c\u8fd8\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u672a\u8bb0\u5f55\u7684\u7279\u5f81\u3002\u8fd9\u4e9b\u6709\u95ee\u9898\u7684\u53d1\u73b0\u56f4\u7ed5\u7740\u6709\u7f3a\u9677/\u4e0d\u5b89\u5168\u7684\u6587\u6863\u5316\u529f\u80fd\u5b9e\u73b0\u5c55\u5f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a\u6ca1\u6709\u8bc1\u636e\u8868\u660eAMT\u662f\u201c\u540e\u95e8\u201d\uff0c\u4f46\u5b83\u7684\u5b89\u5168\u7f3a\u9677\u53ef\u80fd\u4e5f\u6709\u7c7b\u4f3c\u7684\u5f71\u54cd\u3002\u5e78\u8fd0\u7684\u662f\uff0cAMT\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u90a3\u6211\u5462\uff1f\n\u8fd9\u5c31\u662f\u4e00\u4e9b\u4e8c\u8fdb\u5236\u5206\u6790\u7684\u7528\u6b66\u4e4b\u5730\u3002\u65e0\u8bba\u662f\u65af\u79d1\u94a6\u65af\u57fa\u7684\u300a\u6211\u7684\u79d8\u5bc6\u300b\u6f14\u8bb2\uff0c\u8fd8\u662f\u4e4b\u524d\u4ed6\u4e0e\u79d1\u7eb3\u7684\u5173\u8054\u6f14\u8bb2\uff0c\u4f3c\u4e4e\u90fd\u6ca1\u6709\u5217\u4e3e\u4efb\u4f55\u4e0e\u5b98\u65b9\u6587\u4ef6\u76f8\u77db\u76fe\u7684\u5730\u65b9\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u4f7f\u7528\u54c8\u592b\u66fc\u538b\u7f29\u548c\u672a\u77e5\u5b57\u5178\u8fdb\u884c\u6df7\u6dc6\uff0c\u4e00\u4e9b\u7ec4\u4ef6\u7684\u7406\u89e3\u5f88\u5dee\u3002\u4e86\u89e3\u6a21\u7cca\u7ec4\u4ef6\u7684\u5185\u90e8\u5de5\u4f5c\u539f\u7406\u6a21\u7cca\u4e86\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u82af\u7247\u5b9e\u9645\u5236\u9020\u4e4b\u95f4\u7684\u754c\u9650\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u91d1\u8fdb\u5165\u82af\u7247\u5b9e\u9a8c\u5ba4\uff0c\u540e\u8005\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7136\u800c\uff0c\u9ed1\u76d2\u5206\u6790\u786e\u5b9e\u544a\u8bc9\u6211\u4eec\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u529f\u80fd\uff1a\u8bf7\u53c2\u9605\u201c\u6211\u7684\u79d8\u5bc6\u201d\u7b2c21\u9875\u3002\u611f\u8c22zdctg\u5bf9\u6b64\u7684\u6f84\u6e05\u3002\nSkochinsky\u548cCorna\u7684\u5206\u6790\u8db3\u4ee5\u6f84\u6e05\uff08\u4f46\u5e76\u975e\u5b8c\u5168\u53cd\u9a73\uff09\u8038\u4eba\u542c\u95fb\u7684\u8bf4\u6cd5\uff0c\u5373ME\u53ef\u4ee5\u8fdc\u7a0b\u9501\u5b9a\u4efb\u4f55PC\uff08\u8fd9\u662f\u4ee5\u524d\u7684\u9009\u62e9\u52a0\u5165\u529f\u80fd\uff09\uff0c\u53ef\u4ee5\u76d1\u89c6\u7528\u6237\u6240\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u4ed6\u4eec\u6f84\u6e05\uff0c\u8bbf\u95ee\u4ec5\u9650\u4e8e\u4e3b\u673a\u5185\u5b58\u548c\u96c6\u6210GPU\u7684\u672a\u963b\u585e\u90e8\u5206\uff0c\u4f46\u4e0d\u5305\u62ec\u5e27\u7f13\u51b2\u533a\u7b49\uff09\uff0c\u7b49\u7b49\u3002\n\u867d\u7136\u8bf8\u5982\u201c\u6211\u662f\u4e00\u4e2a\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u9ed1\u5323\u5b50\u201d\u4e4b\u7c7b\u7684\u8bf4\u6cd5\u662f\u8bef\u5bfc\u6027\u7684\uff0c\u4f46\u6211\u5e76\u975e\u6ca1\u6709\u81ea\u5df1\u7684\u5f31\u70b9\u3002\u6211\u6700\u559c\u6b22\u770b\u7684\u95ee\u9898\u662f\u9a6c\u514b\u00b7\u57c3\u83ab\u6d1b\u592b\u548c\u9a6c\u514b\u897f\u59c6\u00b7\u6208\u91cc\u4e9a\u5e0c\u57282017\u5e74\u9ed1\u5e3d\u6b27\u6d32\u5927\u4f1a\u4e0a\u7684\u6f14\u8bb2\uff1a\u5982\u4f55\u7834\u89e3\u5173\u95ed\u7684\u8ba1\u7b97\u673a\uff0c\u6216\u5728\u82f1\u7279\u5c14\u7ba1\u7406\u5f15\u64ce\u4e2d\u8fd0\u884c\u672a\u7b7e\u540d\u7684\u4ee3\u7801\u3002\n\u7b80\u8a00\u4e4b\uff1a\u6211\u62e5\u6709\u6240\u6709\u6743\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u4e86\u89e3\u5b83\u7684\u5b89\u5168\u6027\u3002\u4e8c\u5143\u5206\u6790\u4e0e\u8fd0\u884c\u65f6\u68c0\u67e5\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5f88\u597d\u5730\u7406\u89e3\u4f7f\u7528\u4e8c\u5143\u5206\u6790\u6240\u505a\u7684\u6743\u8861\u3002\u867d\u7136\u6211\u6709\u8fc7\u4e25\u91cd\u7684\u8106\u5f31\u6027\u5386\u53f2\uff0c\u4f46\u5b83\u4eec\u4e0e\u8fb9\u7f18\u9634\u8c0b\u8bba\u6240\u5ba3\u79f0\u7684\u76f8\u53bb\u751a\u8fdc\u300211\n\uff08\u6ce8\uff1a\u82f1\u7279\u5c14\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u8fd9\u6837\u505a\u7684\u516c\u53f8\u3002\u5176\u4ed6\u82af\u7247\u901a\u5e38\u4e5f\u6709\u7c7b\u4f3c\u7684\u4ea7\u54c1\uff0c\u4f8b\u5982AMD\u5b89\u5168\u6280\u672f\uff09\u3002\n\u624b\u52a8\u8c03\u7528\u4e00\u4e2a\u4e0estrace\u8fd9\u6837\u7684\u8ddf\u8e2a\u5668\u76f8\u5339\u914d\u7684\u7a0b\u5e8f\u5e76\u4e0d\u603b\u662f\u80fd\u591f\u6267\u884c\u6240\u6709\u4ee3\u7801\u8def\u5f84\u6216\u627e\u5230\u8fb9\u7f18\u60c5\u51b5\u3002\u6a21\u7cca\u5316\u6709\u52a9\u4e8e\u5f25\u5408\u8fd9\u4e00\u5dee\u8ddd\uff1a\u5b83\u901a\u8fc7\u751f\u6210\u968f\u673a\u6216\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\u6765\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u5bfc\u81f4\u7a0b\u5e8f\u5931\u8d25\u7684\u8fc7\u7a0b\u81ea\u52a8\u5316\u3002\u7136\u540e\uff0c\u7814\u7a76\u4eba\u5458\u7814\u7a76\u6545\u969c\u548c\u6545\u969c\u6761\u4ef6\uff0c\u4ee5\u9694\u79bb\u4e00\u4e2abug\u3002\n\u6a21\u7cca\u4e0d\u4e00\u5b9a\u4f9d\u8d56\u4e8e\u5bf9\u6e90\u4ee3\u7801\u7684\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u79cd\u9ed1\u76d2\u6280\u672f\u3002\u50cfAmerican Fuzzy Loop\uff08AFL\uff09\u8fd9\u6837\u7684\u6a21\u7cca\u7a0b\u5e8f\u901a\u5e38\u4f7f\u7528\u7279\u6b8a\u7684\u6784\u5efa\uff0c\u4f46\u5176\u4ed6\u6a21\u7cca\u8bbe\u7f6e\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e4e\u4efb\u4f55\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u67d0\u4e9b\u7c7b\u578b\u7684\u6a21\u7cca\u6d4b\u8bd5\uff08\u4f8b\u5982\uff0c\u6a21\u7ccaweb\u670d\u52a1\u7684API\uff09\u51e0\u4e4e\u4e0d\u9700\u8981\u4efb\u4f55\u5b9e\u73b0\u7ec6\u8282\u3002\nFuzzing\u7ecf\u5e38\u6355\u83b7\u53ea\u6709\u901a\u8fc7\u8fd0\u884c\u7a0b\u5e8f\u800c\u4e0d\u662f\u901a\u8fc7\u8bfb\u53d6\u6e90\u4ee3\u7801\u624d\u80fd\u53d1\u73b0\u7684bug\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6a21\u7cca\u5316\u7684\u6700\u5927\u53d7\u76ca\u8005\u8fd8\u662f\u5f00\u6e90\u9879\u76ee\u3002cURL\u3001OpenSSL\u3001web\u6d4f\u89c8\u5668\u3001\u6587\u672c\u5448\u73b0\u5e93\uff08HarfBuzz\u3001FreeType\uff09\u548c\u5de5\u5177\u94fe\uff08GCC\u3001Clang\u3001\u5b98\u65b9Go\u5de5\u5177\u94fe\u7b49\uff09\u90fd\u662f\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5b50\u3002\u5199\u4e86\u5173\u4e8e\u8d77\u6bdb\u5377\u66f2\uff1a\n\u6211&#39\uff1b\u6211\u4ee5\u524d\u8bf4\u8fc7\uff0c\u4f46\u8ba9\u6211\u518d\u8bf4\u4e00\u904d\uff1a\u4e00\u65e6\u6211\u4eec&#39\uff1b\u6211\u4eec\u4fee\u590d\u4e86\u9759\u6001\u5206\u6790\u5668\u6307\u51fa\u7684\u6240\u6709\u7f3a\u9677\u3002curl\u7684\u4e3b\u8981fuzzing\u662f\u7531OSS Fuzz\u5b8c\u6210\u7684\uff0c\u5b83\u4e0d\u61c8\u5730\u4e0d\u65ad\u4fee\u6539\u6700\u65b0\u7684curl\u4ee3\u7801\u3002\n\u5982\u679c\u4f60\u60f3\u5f00\u59cb\u6a21\u7cca\u5316\uff0c\u6211\u5efa\u8bae\u4f60\u770b\u770b\u300a\u7f8e\u56fd\u6a21\u7cca\u5faa\u73af\u5feb\u901f\u5165\u95e8\u6307\u5357\u300b\u3002Go 1.18\u7b49\u4e00\u4e9b\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u6a21\u7cca\u5de5\u5177\u3002\n\u6700\u8fd1\u7684\u4e00\u4e2a\u4f8b\u5b50\u662fCVE-2022-0185\uff0c\u5b83\u8bf4\u660e\u4e86\u6a21\u7cca\u5904\u7406\u5982\u4f55\u5e2e\u52a9\u53d1\u73b0\u5f00\u6e90\u9879\u76ee\u4e2d\u7684\u6f0f\u6d1e\uff1a\u51e0\u5468\u524d\uff0cCrustaders of Rust\u53d1\u73b0\u4e86\u4e00\u4e2aLinux 0-day\u3002\u5b83\u662f\u4f7f\u7528SyzCaller\u5185\u6838\u6a21\u7cca\u5668\u53d1\u73b0\u7684\u3002\u8be5\u8fc7\u7a0b\u8bb0\u5f55\u5728Will\u7684\u6839\u76ee\u5f55\u4e2d\uff1a\n\u6211\u5f3a\u70c8\u5efa\u8bae\u5927\u5bb6\u8bfb\u4e00\u8bfb\uff1b\u8fd9\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d88\u6bd2\u5242\u8fdb\u884c\u6a21\u7cca\u5904\u7406\uff0c\u627e\u5230\u6f0f\u6d1e\uff0c\u590d\u5236\u6f0f\u6d1e\uff08\u901a\u8fc7\u7f16\u5199\u4e00\u4e2a\u5c0f\u578bC\u7a0b\u5e8f\uff09\uff0c\u7136\u540e\u6df1\u5165\u6e90\u4ee3\u7801\u67e5\u627e\u5e76\u4fee\u590d\u539f\u56e0\uff0c\u6700\u540e\u62a5\u544a\u95ee\u9898\uff08\u4f7f\u7528\u8865\u4e01\uff01\uff09\u3002\u5f53\u6765\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u4f9b\u5e94\u5546\u5c06\u627f\u62c5\u201c\u67e5\u627e\u5e76\u4fee\u590d\u201d\u6b65\u9aa4\u7684\u8d23\u4efb\u3002\n\u73b0\u6709\u7684\u4e00\u4e9b\u6700\u5e38\u7528\u7684\u7259\u7ebf\u662f\u8106\u5f31\u6027\u5206\u6790\u4e2d\u6765\u6e90\u4e0d\u53ef\u77e5\u65b9\u6cd5\u7684\u6700\u5927\u53d7\u76ca\u8005\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u5e94\u8be5\u5f88\u6709\u542f\u53d1\u6027\u3002\u8fd9\u4e9b\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u5df2\u7ecf\u53d7\u5230\u4e86\u6570\u767e\u4e07\u4eba\u7684\u5173\u6ce8\uff0c\u4f46\u4ed6\u4eec\u4ecd\u7136\u6295\u8d44\u4e8e\u6a21\u7cca\u57fa\u7840\u8bbe\u65bd\uff0c\u6f0f\u6d1e\u641c\u5bfb\u8005\u66f4\u559c\u6b22\u5206\u6790\u5de5\u4ef6\u800c\u4e0d\u662f\u68c0\u67e5\u6e90\u4ee3\u7801\u3002\n\u4ece\u5b89\u5168\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u5f88\u4e50\u610f\u627f\u8ba4\u51e0\u70b9\u652f\u6301\u6e90\u53ef\u7528\u6027\uff1a\n\u6e90\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u8865\u5145\u4e0e\u6e90\u4ee3\u7801\u65e0\u5173\u7684\u65b9\u6cd5\u6765\u7b80\u5316\u5206\u6790\u3002\u6211\u5728\u56db\u6b65\u6f0f\u6d1e\u4fee\u590d\u8fc7\u7a0b\u4e2d\u63d0\u5230\u7684\u6b65\u9aa4\u4e4b\u95f4\u7684\u754c\u9650\u5f88\u6a21\u7cca\u3002\n\u4fee\u8865\u6f0f\u6d1e\u5f88\u91cd\u8981\u3002\u6e90\u53ef\u7528\u6027\u4f7f\u793e\u533a\u3001\u8f6f\u4ef6\u5305\u7ef4\u62a4\u4eba\u5458\u6216\u62a5\u544a\u8005\u80fd\u591f\u53d1\u73b0\u8865\u4e01\u8f6f\u4ef6\u7684\u6f0f\u6d1e\u3002\u8f6f\u4ef6\u5305\u7ef4\u62a4\u4eba\u5458\u7ecf\u5e38\u901a\u8fc7\u5e2e\u52a9\u9879\u76ee\u4ece\u5e9f\u5f03/\u4e0d\u5b89\u5168\u7684\u4f9d\u8d56\u5173\u7cfb\u4e2d\u8fc1\u79fb\uff0c\u6a21\u7cca\u201c\u6253\u5305\u8005\u201d\u548c\u201c\u8d21\u732e\u8005\u201d\u4e4b\u95f4\u7684\u754c\u9650\u3002\u60f3\u5230\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9488\u5bf9Calibre\u7b49\u9879\u76ee\u7684Python 2\u5230Python 3\u7684\u8f6c\u6362\u300212\u80fd\u591f\u72ec\u7acb\u4e8e\u4e0a\u6e38\u652f\u6301\u89e3\u51b3\u95ee\u9898\uff0c\u662f\u9632\u6b62\u7528\u6237\u9a6f\u5316\u7684\u91cd\u8981\u63aa\u65bd\u3002\n\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458/\u4f9b\u5e94\u5546\u4e0d\u53d1\u5e03\u4f7f\u7528\u73b0\u4ee3\u5de5\u5177\u94fe\u7ea7\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u4f8b\u5982PIE\u3001RELRO\u3001stack Canaris\u3001\u81ea\u52a8\u53d8\u91cf\u521d\u59cb\u5316\u3001CFI\u7b4913\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u81ea\u5df1\u6784\u5efa\u8f6f\u4ef6\uff08\u6216\u5c06\u5176\u59d4\u6258\u7ed9\u5b9e\u65bd\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u7684\u53d1\u884c\u7248\uff09\u9700\u8981\u6e90\u4ee3\u7801\u53ef\u7528\u6027\uff08\u6216\u81f3\u5c11\u67d0\u79cd\u4e2d\u95f4\u8868\u793a\uff09\u3002\n\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709\u5305\u542b\u6d88\u6bd2\u5668\u548c\u8c03\u8bd5\u7b26\u53f7\u7684\u53ef\u7528\u7248\u672c\u3002\n\u867d\u7136\u6a21\u7cca\u5316\u53d1\u5e03\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u5728\u6e90\u4ee3\u7801\u53ef\u7528\u65f6\uff0c\u6a21\u7cca\u5316\u8981\u5bb9\u6613\u5f97\u591a\u3002\u4e13\u6709\u8f6f\u4ef6\u7684\u4f9b\u5e94\u5546\u5f88\u5c11\u53d1\u5e03\u7279\u6b8a\u7684\u6a21\u7cca\u53cb\u597d\u7248\u672c\uff0c\u5982\u679c\u4e0d\u4e86\u89e3\u9ad8\u7ea7\u8bbe\u8ba1\uff0c\u8fc7\u6ee4\u8bef\u62a5\u53ef\u80fd\u4f1a\u975e\u5e38\u7e41\u7410\u3002\n\u5f53\u7136\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6f0f\u6d1e\u3002\u9664\u4e86\u9759\u6001\u4ee3\u7801\u5206\u6790\u548c\u540c\u884c\u8bc4\u5ba1\u901a\u5e38\u4f1a\u5e26\u6765\u7684\u4f4e\u6548\u6210\u679c\u5916\uff0c\u8fd9\u5e76\u4e0d\u662f\u5f53\u4eca\u53d1\u73b0\u5927\u591a\u6570\u6f0f\u6d1e\u7684\u4e3b\u8981\u65b9\u5f0f\uff08\u611f\u8c22\u60a8\u63d0\u9192\u6211\u6e90\u4ee3\u7801\u5206\u6790\u7684\u4f5c\u7528\uff09\u3002\n\u8f6f\u4ef6\u5373\u670d\u52a1\u7684\u5206\u6790\u53ef\u80fd\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u53ea\u5177\u5907\u67e5\u8be2\u670d\u52a1\u5668\u7684\u80fd\u529b\u3002\u670d\u52a1\u5668\u4e0d\u53d1\u9001\u6838\u5fc3\u8f6c\u50a8\u3001\u670d\u52a1\u5668\u7aef\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8ddf\u8e2a\u65e5\u5fd7\u8fdb\u884c\u5206\u6790\u3002\u6b64\u5916\uff0c\u5f88\u96be\u9a8c\u8bc1\u670d\u52a1\u5668\u6b63\u5728\u8fd0\u884c\u54ea\u4e2a\u8f6f\u4ef6\u300214\u5bf9\u4e8e\u9700\u8981\u4fe1\u4efb\u670d\u52a1\u5668\u7684\u670d\u52a1\uff0c\u4ece\u5b89\u5168\u548c\u7528\u6237\u81ea\u7531\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8bbf\u95ee\u670d\u52a1\u5668\u7aef\u8f6f\u4ef6\u90fd\u5f88\u91cd\u8981\n\u672c\u6587\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u5047\u8bbe\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u53ef\u68c0\u67e5\u548c\u53ef\u8ffd\u8e2a\u7684\u3002\u4e8c\u8fdb\u5236\u6df7\u6dc6\u548c\u67d0\u4e9b\u5f62\u5f0f\u7684\u5185\u5bb9\u4fdd\u62a4/DRM\u8fdd\u53cd\u4e86\u8fd9\u4e00\u5047\u8bbe\uff0c\u5b9e\u9645\u4e0a\u4f1a\u4f7f\u5206\u6790\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u9664\u4e86\u6e90\u4ee3\u7801\uff0c\u5f00\u53d1\u8fc7\u7a0b\u7684\u900f\u660e\u5ea6\u6709\u52a9\u4e8e\u786e\u4fdd\u7528\u6237\u9075\u5b88\n......", "note_en": "I find it quite easy to handle views different from my own. I feel more troubled when I see people agree with me for the wrong reasons.\n It\u2019s no secret that I\u2019m a passionate supporter of software freedom: I\u2019ve written two posts about how Free, Libre, and Open-Source software ( FLOSS) is necessary but insufficient to preserve user autonomy:\n Whatsapp and the Domestication of Users The phenomenon of a class of predatory businesses models I call \u201cuser domestication\u201d and defense measures: FLOSS, open platforms, and simplicity.\n Keeping Platforms Open How open platforms can lose their openness, and what measures can prevent this. The Web, XMPP, email, and Matrix are examples that highlight both sides of the issue.\n  One of the biggest parts of the Free and Open Source Software definitions is the freedom to study a program and modify it; in other words, access to editable source code. I agree that such access is essential; however, far too many people support source availability for the  wrong reasons. One such reason is that source code is necessary to have any degree of transparency into how a piece of software operates, and is therefore necessary to determine if it is at all secure or trustworthy. Although security through obscurity is certainly not a robust measure, this claim has two issues:\n Source code describes what a program is designed to do; it is unnecessary and insufficient to determine if what it actually does aligns with its intended design.\n I\u2019d like to expand on these issues, focusing primarily on compiled binaries. Bear in mind that I do not think that source availability is  useless from a security perspective (it certainly makes audits easier), and I  do think that source availability is required for user freedom. I\u2019m arguing only that  source unavailability doesn\u2019t imply insecurity, and  source availability doesn\u2019t imply security. It\u2019s possible (and often preferable) to perform security analysis on binaries, without necessarily having source code. In fact, vulnerability discovery doesn\u2019t typically rely on source code analysis.\n PS: this stance is not absolute; I concede to several good counter-arguments \t at the bottom!\n  I don\u2019t think anyone seriously claims that software\u2019s security instantly improves the second its source code is published. The argument I\u2019m responding to is that source code is necessary to understand what a program does and how (in)secure it is, and without it we can\u2019t know for sure.\n Assuming a re-write that fundamentally changes a program\u2019s architecture is not an option  1, software security typically improves by fixing vulnerabilities via something resembling this process:\n  Source code is typically helpful (sometimes essential) to Step 3. If someone has completed Step 3, they will require source code in order to proceed to Step 4. Source code  isn\u2019t necessary for Steps 1 and 2; these steps rely on understanding how a program misbehaves. For that, we use  reverse engineering and/or  fuzzing.\n  Understanding  how a program is designed is not the same as understanding  what a program does. A reasonable level of one type of understanding does not imply the other.\n Source code  2 is essential to describe a program\u2019s high-level, human-comprehensible design; it represents a contract that outlines how a developer  expects a program to behave. A compiler or interpreter  3 must then translate it into machine instructions. But source code isn\u2019t always easy to map directly to machine instructions because it is part of a complex system:\n Compilers (sometimes even interpreters) can apply optimizations and hardening measures that are difficult to reason about. This is especially true for  JIT compilers that leverage run-time information.\n The operating system itself may be poorly understood by the developers, and run a program in a way that contradicts a developer\u2019s expectations.\n   All of the above points apply to each dependency and the underlying operating system, which can impact a program\u2019s behavior.\n Furthermore, all programmers are flawed mortals who don\u2019t always fully understand source code. Everyone who\u2019s done a non-trivial amount of programming is familiar with the feeling of encountering a bug during run-time for which the cause is impossible to find\u2026until they notice it staring them in the face on Line 12. Think of all the bugs that  aren\u2019t so easily noticed.\n Reading the source code, compiling, and passing tests isn\u2019t sufficient to show us a program\u2019s final behavior. The only way to know what a program does when you run it is to\u2026run it.  4\n  Almost all programmers are fully aware of their limited ability, which is why most already employ techniques to analyze run-time behavior that don\u2019t depend on source code. For example, developers of several compiled languages  5 can build binaries with sanitizers to detect undefined behavior, races, uninitialized reads, etc. that human eyes may have missed when reading source code. While source code is necessary to  build these binaries, it isn\u2019t necessary to run them and observe failures.\n Distributing binaries with sanitizers and debug information to testers is a valid way to collect data about a program\u2019s potential security issues.\n  It\u2019s hard to figure out which syscalls and files a large program program needs by reading its source, especially when certain libraries (e.g. the libc implementation/version) can vary. A syscall tracer like   strace(1)  6 makes the process trivial.\n A personal example: the understanding I gained from  strace was necessary for me to write my  bubblewrap scripts. These scripts use   bubblewrap(1) to sandbox programs with the minimum permissions possible. Analyzing every relevant program and library\u2019s source code would have taken me months, while  strace gave me everything I needed to know in an afternoon: analyzing the  strace output told me exactly which syscalls to allow and which files to grant access to, without even having to know what language the program was written in. I generated the initial version of the syscall allow-lists with the following command  7:\n strace name-of-program program-args 2&gt;&amp;1 \\\t| rg &#39;^([a-z_]*)\\(.*&#39; --replace &#39;$1&#39; \\\t| sort | uniq\n This also extends to determining how programs utilize the network: packet sniffers like  Wireshark can determine when a program connects to the network, and where it connects.\n These methods are not flawless. Syscall tracers are only designed to shed light on how a program interacts with the kernel. Kernel interactions tell us plenty (it\u2019s sometimes all we need), but they don\u2019t give the whole story. Furthermore, packet inspection can be made a bit painful by transit encryption  8; tracing a program\u2019s execution alongside packet inspection can offer clarity, but this is not easy.\n For more information, we turn to   core dumps, also known as memory dumps. Core dumps share the state of a program during execution or upon crashing, giving us greater visibility into exactly what data a program is processing. Builds containing debugging symbols (e.g.  DWARF) have more detailed core dumps. Vendors that release daily snapshots of pre-release builds typically include some symbols to give testers more detail concerning the causes of crashes. Web browsers are a common example: Chromium dev snapshots, Chrome Canary, Firefox Nightly, WebKit Canary builds, etc. all include debug symbols. Until recently,  Minecraft: Bedrock Edition included debug symbols which were used heavily by the modding community.  9\n  In 2020, Zoom Video Communications came under scrutiny for marketing its \u201cZoom\u201d software as a secure, end-to-end encrypted solution for video conferencing. Zoom\u2019s documentation claimed that it used \u201cAES-256\u201d encryption. Without source code, did we have to take the docs at their word?\n The Citizen Lab didn\u2019t. In April 2020, it published  a report revealing critical flaws in Zoom\u2019s encryption. It utilized Wireshark and  mitmproxy to analyze networking activity, and inspected core dumps to learn about its encryption implementation. The Citizen Lab\u2019s researchers found that Zoom actually used an incredibly flawed implementation of a weak version of AES-128 (ECB mode), and easily bypassed it.\n Syscall tracing, packet sniffing, and core dumps are great, but they rely on manual execution which might not hit all the desired code paths. Fortunately, there are other forms of analysis available.\n  Tracing execution and inspecting memory dumps can be considered forms of reverse engineering, but they only offer a surface-level view of what\u2019s going on. Reverse engineering gets much more interesting when we analyze a binary artifact.\n Static binary analysis is a powerful way to inspect a program\u2019s underlying design. Decompilation (especially when supplemented with debug symbols) can re-construct a binary\u2019s assembly or source code. Symbol names may look incomprehensible in stripped binaries, and comments will be missing. What\u2019s left is more than enough to decipher control flow to uncover how a program processes data. This process can be tedious, especially if a program uses certain forms of binary obfuscation.\n The goal doesn\u2019t have to be a complete understanding of a program\u2019s design (incredibly difficult without source code); it\u2019s typically to answer a specific question, fill in a gap left by tracing/fuzzing, or find a well-known property. When developers publish documentation on the security architecture of their closed-source software, reverse engineering tools like decompilers are exactly what you need to verify their honesty (or lack thereof).\n Decompilers are seldom used alone in this context. Instead, they\u2019re typically a component of reverse engineering frameworks that also sport memory analysis, debugging tools, scripting, and sometimes even IDEs. I use  the radare project, but  Ghidra is also popular. Their documentation should help you get started if you\u2019re interested.\n  These reverse-engineering techniques\u2013a combination of tracing, packet sniffing, binary analysis, and memory dumps\u2013make up the workings of most modern malware analysis. See  this example of a fully-automated analysis of the Zoom Windows installer. It enumerates plenty of information about Zoom without access to its source code: reading unique machine information, anti-VM and anti-reverse-engineering tricks, reading config files, various types of network access, reading info on mounted volumes, and more.\n To try this out yourself, use a sandbox designed for dynamic analysis.  Cuckoo is a common and easy-to-use solution, while  DRAKVUF is more advanced.\n  The Intel Management Engine (ME) is a mandatory subsystem of all Intel processors (after 2008) with extremely privileged access to the host system. Active Management Technology (AMT) runs atop it on the subset of Intel processors with \u201cvPro\u201d branding. The latter can be disabled and is intended for organizations to remotely manage their inventory (installing software, monitoring, remote power-on/sleep/wake, etc).\n The fact that Intel ME has such deep access to the host system and the fact that it\u2019s proprietary have both made it the subject of a high degree of scrutiny. Many people (most of whom have little experience in the area) connected these two facts together to allege that the ME is a backdoor, often by confusedly citing functionality of Intel AMT instead of ME. Is it really impossible to know for sure?\n I picked Intel ME+AMT to serve as an extreme example: it shows both the power and limitations of the analysis approaches covered. ME isn\u2019t made of simple executables you can just run in an OS because it sits far below the OS, in what\u2019s sometimes called \u201cRing -3\u201d.  10 Analysis is limited to external monitoring (e.g. by monitoring network activity) and reverse-engineering unpacked partially-obfuscated firmware updates, with help from official documentation. This is slower and harder than analyzing a typical executable or library.\n Answers are a bit complex and\u2026more boring than what sensationalized headlines would say. Reverse engineers such as Igor Skochinsky and Nicola Corna (the developers of  me-tools and  me_cleaner, respectively) have  analyzed ME, while researchers such as Vassilios Ververis have  thoroughly analyzed AMT in 2010. Interestingly, the former pair argues that auditing binary code is preferable to source code.\n Simply monitoring network activity and systematically testing all claims made by the documentation allowed Ververis to uncover a host of security issues in Intel AMT. However, no undocumented features have (to my knowledge) been uncovered. The problematic findings revolved around flawed/insecure implementations of documented functionality. In other words: there\u2019s been no evidence of AMT being \u201ca backdoor\u201d, but its security flaws could have had a similar impact. Fortunately, AMT can be disabled. What about ME?\n This is where some binary analysis comes in. Neither Skochinsky\u2019s  ME Secrets presentation nor the  previously-linked one he gave with Corna seem to enumerate any contradictions with  official documentation.\n Unfortunately, some components are poorly understood due to being obfuscated using  Huffman compression with unknown dictionaries. Understanding the inner workings of the obfuscated components blurs the line between software reverse-engineering and figuring out how the chips are actually made, the latter of which is nigh-impossible if you don\u2019t have access to a chip lab full of cash. However, black-box analysis does tell us about the capabilities of these components: see page 21 of \u201cME Secrets\u201d. Thanks to zdctg for clarifying this.\n Skochinsky\u2019s and Corna\u2019s analysis was sufficient to clarify (but not completely contradict) sensationalism claiming that ME can remotely lock any PC (it was a former opt-in feature), can spy on anything the user does (they clarified that access is limited to unblocked parts of the host memory and the integrated GPU, but doesn\u2019t include e.g. the framebuffer), etc.\n While claims such as \u201cME is a black box that can do anything\u201d are misleading, ME not without its share of vulnerabilities. My favorite look at its issues is a presentation by Mark Ermolov and Maxim Goryachy at Black Hat Europe 2017:  How to Hack a Turned-Off Computer, or Running Unsigned Code in Intel Management Engine.\n In short: ME being proprietary doesn\u2019t mean that we can\u2019t find out how (in)secure it is. Binary analysis when paired with runtime inspection can give us a good understanding of what trade-offs we make by using it. While ME has a history of serious vulnerabilities, they\u2019re nowhere near what  borderline conspiracy theories claim.  11\n (Note: Intel is not alone here. Other chips typically have equivalents, e.g. AMD Secure Technology).\n  Manual invocation of a program paired with a tracer like  strace won\u2019t always exercise all code paths or find edge-cases.  Fuzzing helps to bridge this gap: it automates the process of causing a program to fail by generating random or malformed data to feed it. Researchers then study failures and failure-conditions to isolate a bug.\n Fuzzing doesn\u2019t necessarily depend on access to source code, as it is a black-box technique. Fuzzers like  American Fuzzy Loop (AFL) normally use \t special builds, but  other fuzzing setups can work with just about any binaries. In fact, some types of fuzz tests (e.g.  fuzzing an API for a web service) hardly need any implementation details.\n Fuzzing frequently catches bugs that are only apparent by running a program, not by reading source code. Even so, the biggest beneficiaries of fuzzing are open source projects.  cURL,  OpenSSL, web browsers, text rendering libraries (HarfBuzz, FreeType) and toolchains (GCC, Clang, the official Go toolchain, etc.) are some notable examples.     wrote about  fuzzing curl:\n I&#39;ve said it before but let me say it again: fuzzing is really the top method to find problems in curl once we&#39;ve fixed all flaws that the static analyzers we use have pointed out. The primary fuzzing for curl is done by OSS-Fuzz, that tirelessly keeps hammering on the most recent curl code.\n If you want to get started with fuzzing, I recommend checking out  the quick-start guide for American Fuzzy Loop. Some languages like Go 1.18 also have fuzzing tools available right in the standard library.\n  A recent example of how fuzzing helps spot a vulnerability in an open-source project is  CVE-2022-0185: a Linux 0-day found by the Crusaders of Rust a few weeks ago. It was discovered using the  syzkaller kernel fuzzer. The process was documented on Will\u2019s Root:\n  I  highly encourage giving it a read; it\u2019s the perfect example of fuzzing with sanitizers to find a vulnerability, reproducing the vulnerability (by writing a tiny C program),  then diving into the source code to find and fix the cause, and finally reporting the issue (with a patch!). When source isn\u2019t available, the vendor would assume responsibility for the \u201cfind and fix\u201d steps.\n The fact that some of the most-used pieces of FLOSS in existence have been the biggest beneficiaries of source-agnostic approaches to vulnerability analysis should be quite revealing. The source code to these projects has received attention from millions of eyes, yet they  still invest in fuzzing infrastructure and vulnerability-hunters prefer analyzing artifacts over inspecting the source.\n  I readily concede to several points in favor of source availability from a security perspective:\n Source code can make analysis  easier by  supplementing source-independent approaches. The lines between the steps I mentioned in the \t four-step vulnerability-fixing process are blurry.\n Patching vulnerabilities is important. Source availability makes it possible for the community, package maintainers, or reporters of a vulnerability to patch software. Package maintainers often blur the line between \u201cpackager\u201d and \u201ccontributor\u201d by helping projects migrate away from abandoned/insecure dependencies. One example that comes to mind is the Python 2 to Python 3 transition for projects like Calibre.  12 Being able to fix issues independent of upstream support is an important mitigation against  user domestication.\n Some developers/vendors don\u2019t distribute binaries that make use of modern toolchain-level exploit mitigations (e.g.  PIE,  RELRO, stack canaries, automatic variable initialization,   CFI, etc.  13). In these cases, building software yourself with these mitigations (or delegating it to a distro that enforces them) requires source code availability (or at least some sort of intermediate representation).\n Closed-source software may or may not have builds available that include sanitizers and debug symbols.\n Although fuzzing release binaries is possible, fuzzing is much easier to do when source code is available. Vendors of proprietary software seldom release special fuzz-friendly builds, and filtering out false-positives can be quite tedious without understanding high-level design.\n It is certainly possible to notice a vulnerability in source code. Excluding low-hanging fruit typically caught by static code analysis and peer review, it\u2019s not the main way most vulnerabilities are found nowadays (thanks to    for  reminding me about what source analysis does accomplish).\n Software as a Service can be incredibly difficult to analyze, as we typically have little more than the ability to query a server. Servers don\u2019t send core dumps, server-side binaries, or trace logs for analysis. Furthermore, it\u2019s difficult to verify which software a server is running.  14 For services that require trusting a server, access to the server-side software is important from both a security and a user-freedom perspective\n Most of this post is written with the assumption that binaries are inspectable and traceable. Binary obfuscation and some forms of content protection/ DRM violate this assumption and actually do make analysis more difficult.\n Beyond source code, transparency into the development helps assure users of complianc\n......", "posttime": "2022-02-17 15:50:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9519\u8bef,reasons,\u7a0b\u5e8f", "title": "\u51fa\u4e8e\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff1a\u7259\u7ebf\u5e76\u4e0d\u610f\u5473\u7740\u5b89\u5168", "title_en": "The right thing for the wrong reasons: FLOSS doesn't imply security", "transed": 1, "url": "https://seirdy.one/2022/02/02/floss-security.html", "via": "", "real_tags": ["\u9519\u8bef", "reasons", "\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073860, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5468\u6216\u6bcf\u5468\u4e24\u6b21\uff0c\u4f60\u90fd\u4f1a\u5728HackerNews\u4e0a\u770b\u5230\u4e00\u6761\u5e16\u5b50\uff0c\u79f0\u8c37\u6b4c\u6b63\u5728\u6d88\u4ea1\u6216\u8c37\u6b4c\u5f88\u7cdf\u7cd5\u3002\u4ed6\u4eec\u7684\u4e00\u4e9b\u8bba\u70b9\u6709\u4e00\u4e9b\u6b63\u786e\u7684\u89c2\u70b9\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u8c37\u6b4c\u77ed\u671f\u5185\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fdb\u5c55\u3002\n\u6628\u5929\uff0c\u6211\u770b\u5230\u4e00\u7bc7\u9898\u4e3a\u201c\u8c37\u6b4c\u641c\u7d22\u6b63\u5728\u6d88\u4ea1\u201d\u7684\u5e16\u5b50\uff0c\u8fd9\u7bc7\u5e16\u5b50\u4e2d\u7684\u8bba\u70b9\u662f\u65b0\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u5728\u641c\u7d22\u7ed3\u679c\u7684\u672b\u5c3e\u52a0\u4e0a\u201cReddit\u201d\u4e00\u8bcd\uff0c\u56e0\u4e3aReddit\u6bd4\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u66f4\u80fd\u56de\u7b54\u4eba\u4eec\u6b63\u5728\u641c\u7d22\u7684\u95ee\u9898\u3002\n\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u8fd9\u4e2a\u8bba\u70b9\u662f\u6709\u9053\u7406\u7684\u3002\u751a\u81f3\u6211\u4e5f\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u5bfb\u627eReddit\u5e16\u5b50\uff0c\u56e0\u4e3a\u6211\u76f8\u4fe1Reddit\u5df2\u7ecf\u627e\u5230\u4e86\u6211\u60f3\u8981\u7684\u7b54\u6848\u3002\n\u7136\u800c\uff0cReddit\u53ef\u4ee5\u6784\u5efa\u6bd4\u8c37\u6b4c\u66f4\u597d\u7684\u641c\u7d22\u7684\u8bf4\u6cd5\u662f\u6709\u7f3a\u9677\u7684\u3002\u800c\u8fd9\u4e2a\u7f3a\u9677\u6b63\u662f\u5bfc\u81f4\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u7cdf\u7cd5\u7684\u540c\u4e00\u4e2a\u7f3a\u9677\u3002\u800c\u8fd9\u4e2a\u7f3a\u9677\u5c31\u662f\u91d1\u94b1\u3002\n\u8c37\u6b4c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u592a\u5c0f\uff0c\u65e0\u6cd5\u4f7f\u7528\u5b83\uff0c\u4f46\u636e\u8bb8\u591a\u4eba\u8bf4\uff0c\u5728\u4e00\u5f00\u59cb\uff0c\u8c37\u6b4c\u6709\u66f4\u597d\u6216\u66f4\u51c6\u786e\u7684\u641c\u7d22\u7ed3\u679c\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5f53\u65f6\u7684\u5927\u591a\u6570\u7f51\u7ad9\u90fd\u662f\u72ec\u7acb\u7f51\u7ad9\uff0c\u5b83\u4eec\u4e0d\u5173\u5fc3\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u548c\u91d1\u94b1\uff0c\u521b\u5efa\u4e86\u7528\u4e8e\u5171\u4eab\u4fe1\u606f\u7684\u7f51\u7ad9\u3002\n\u4f46\u6211\u8ba4\u4e3a\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u540c\u610f\uff0c\u5f53\u4eba\u4eec\u5f00\u59cb\u73a9\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u521b\u5efa\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u7684\u5783\u573e\u7f51\u7ad9\u65f6\uff0c\u8c37\u6b4c\u7684\u641c\u7d22\u7ed3\u679c\u51cf\u5c11\u4e86\u3002\u56e0\u4e3a\u66f4\u591a\u7684\u6d41\u91cf\u610f\u5473\u7740\u66f4\u591a\u7684\u5e7f\u544a\u6536\u5165\u3002\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u9875\u9762\u4e5f\u662f\u5982\u6b64\u3002\u5728\u5f00\u59cb\u8d5a\u94b1\u4e4b\u540e\uff0c\u4ed6\u4eec\u5f00\u59cb\u7528\u8d8a\u6765\u8d8a\u591a\u7684\u5e7f\u544a\u586b\u5145\u641c\u7d22\u7ed3\u679c\u9875\u9762\u3002\nReddit\u5e16\u5b50\u5f88\u597d\uff0c\u56e0\u4e3a\u521b\u5efa\u8fd9\u4e9b\u5e16\u5b50\u6216\u53d1\u8868\u8bc4\u8bba\u7684\u4eba\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u800c\u4e14\u6ca1\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u7ecf\u6d4e\u6fc0\u52b1\u3002\u4ed6\u4eec\u77e5\u9053\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\n\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4eba\u4eec\u5728\u98df\u54c1\u535a\u5ba2\u548c\u5176\u4ed6\u7f51\u7ad9\u4e0a\u9605\u8bfbYelp\u8bc4\u8bba\u6216\u7ef4\u57fa\u767e\u79d1\u6587\u7ae0\u7684\u539f\u56e0\u3002\u56e0\u4e3a\u90a3\u91cc\u7684\u4eba\u4eec\u521b\u9020\u5185\u5bb9\u65f6\u77e5\u9053\u4ed6\u4eec\u6ca1\u6709\u4efb\u4f55\u7ecf\u6d4e\u6fc0\u52b1\u3002\uff08Yelp\u9664\u5916\uff0c\u5728Yelp\u4e2d\uff0c\u9910\u5385\u53ef\u4ee5\u5438\u5f15\u66f4\u591a\u987e\u5ba2\uff0c\u4f46\u8fd9\u4e0e\u76f4\u63a5\u5728\u7ebf\u5e7f\u544a\u4e0d\u540c\uff09\n\u7136\u800c\uff0c\u4e00\u65e6Reddit\u521b\u5efa\u4e86\u4e00\u4e2a\u641c\u7d22\u5f15\u64ce\uff0c\u4e00\u65e6\u4eba\u4eec\u77e5\u9053\u6709\u673a\u4f1a\u73a9\u8fd9\u4e2a\u7cfb\u7edf\u5e76\u521b\u9020\u4e00\u4e2a\u8d22\u52a1\u673a\u4f1a\uff0c\u4eba\u4eec\u5c31\u4f1a\u6ee5\u7528\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u6211\u4eec\u5c31\u4f1a\u56de\u5230\u73b0\u5728\u7684\u4f4d\u7f6e\u3002\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u586b\u5145\u7f51\u7ad9\u3002\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u7cfb\u7edf\u5462\uff1f\u4fee\u590d\u8fd9\u4e2a\u7cfb\u7edf\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f18\u5148\u8003\u8651\u90a3\u4e9b\u4e3a\u4e86\u5206\u4eab\u77e5\u8bc6\u800c\u5b58\u5728\u7684\u7f51\u7ad9\uff0c\u800c\u4e0d\u662f\u90a3\u4e9b\u4ee5\u5e7f\u544a\u6536\u5165\u4e3a\u4e3b\u8981\u76ee\u7684\u7684\u7f51\u7ad9\u3002\n\u6211\u4e0d\u662f100%\u53cd\u5bf9\u5e7f\u544a\uff0c\u6211\u8fd8\u662f\u66f4\u559c\u6b22\u6709\u9488\u5bf9\u6027\u7684\u5e7f\u544a\uff0c\u800c\u4e0d\u662f\u4e0e\u6211\u65e0\u5173\u7684\u968f\u673a\u5e7f\u544a\u3002\u4f46\u5728\u5185\u5bb9\u8d28\u91cf\u3001\u5e7f\u544a\u6570\u91cf\u548c\u76ee\u6807\u6570\u91cf\u4e4b\u95f4\u5e94\u8be5\u4fdd\u6301\u5e73\u8861\u3002\n\u7136\u800c\uff0c\u8ba4\u4e3aReddit\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u66f4\u597d\u7684\u641c\u7d22\u5f15\u64ce\u7684\u8bf4\u6cd5\u548c\u8c37\u6b4c\u4e00\u6837\u662f\u6709\u7f3a\u9677\u7684\u3002\n\u5728\u6b64\u6d4f\u89c8\u5668\u4e2d\u4fdd\u5b58\u6211\u7684\u59d3\u540d\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u7f51\u7ad9\uff0c\u4ee5\u5907\u4e0b\u6b21\u53d1\u8868\u8bc4\u8bba\u3002", "note_en": "Every week or twice a week, you will come across a post on HackerNews that Google is dying or Google is awful. There are some valid points to some of their arguments. However, I don\u2019t see Google going anywhere anytime soon.\n Yesterday, I came across a post titled, \u2018 Google search is Dying\u2018 and the argument in that post was something new. That is, people append the word \u2018Reddit\u2019 to the end of the results because Reddit has better answers to questions people are searching than Google search results.\n In a way, this argument has a point. Even I have looked for Reddit posts through Google search because I believed that Reddit had the answers that I\u2019m looking for.\n However, the argument that Reddit can build a better search than Google is a flawed argument. And that flaw is the same flaw that makes Google results bad. And that flaw is money.\n I was too young to use Google when it first got started, but according to many, in the beginning, Google had better or more accurate search results. One reason for this was the fact that most of the sites back then were indie websites, which did not care about SEO and money and created websites for sharing information.\n But I think all can agree that Google results reduced when people started to game the algorithm and create search engine optimized garbage websites. Because more traffic meant more advertising revenue. It\u2019s the same about the Google search results page. After beginning to monetize they started filling their search results page with more and more ads.\n Reddit posts are good because the people who create these posts or make comments are doing it to share their knowledge. And there is no financial incentive associated with it. They know that do it to share their knowledge.\n This is the same reason why people read Yelp reviews, or Wikipedia articles over food blogs and other websites about a given topic. Because people there create content knowing that they don\u2019t get any financial incentive. (Except in Yelp where restaurant can get more customers, but that is not similar to direct online advertising)\n However, once Reddit creates a search engine, and once people get to know that there is an opportunity to game the system and create a financial opportunity, people will abuse that system and we will be back to the place where we are now. SEO stuffed websites.\n So how can we fix the system? The best way to fix the system is to prioritize websites that are there to share knowledge, not websites with their primary priority to make ad revenue.\n I\u2019m not 100% against advertising, I\u2019d still prefer a targeted ad over a random ad that is unrelated to me. But there should be a balance between the quality of the content, the number of ads, and the amount of targetting.\n However, the argument that Reddit can build a better search engine is flawed as Google.\n  Save my name, email, and website in this browser for the next time I comment.", "posttime": "2022-02-17 15:48:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e0\u6cd5,build,\u8c37\u6b4c", "title": "Reddit\u65e0\u6cd5\u6784\u5efa\u66f4\u597d\u7684\u641c\u7d22\u5f15\u64ce", "title_en": "Reddit can't build a better search engine", "transed": 1, "url": "https://ruky.me/2022/02/17/reddit-can-build-a-better-search-engine/", "via": "", "real_tags": ["\u65e0\u6cd5", "build", "\u8c37\u6b4c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073859, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u5f88\u9ad8\u5174\u4e0e\u5927\u5bb6\u5206\u4eab\uff0cElastic\u548c\u4e9a\u9a6c\u900a\u5df2\u7ecf\u89e3\u51b3\u4e86\u4e0eElasticsearch\u76f8\u5173\u7684\u5546\u6807\u4fb5\u6743\u8bc9\u8bbc\u3002\u73b0\u5728\uff0cAWS\u548cAWS\u5e02\u573a\u4e0a\u552f\u4e00\u7684Elasticsearch\u670d\u52a1\u662fElastic Cloud\u3002\n\u8fd9\u4e00\u51b3\u8bae\u9075\u5faa2021\u7684\u5f39\u6027\u641c\u7d22\u548cKiBaA\u8bb8\u53ef\u8bc1\u7684\u53d8\u5316\uff0c\u4ee5\u53ca\u4e9a\u9a6c\u900a\u7684\u540e\u7eed\u884c\u52a8\uff0c\u5305\u62ec\u91cd\u547d\u540d\u4ed6\u4eec\u7684\u670d\u52a1\u3002\u6211\u4eec\u76f8\u4fe1\uff0c\u8fd9\u9879\u51b3\u8bae\u5c06\u6d88\u9664\u5e02\u573a\u4e0a\u7684\u6df7\u4e71\uff0c\u5e76\u4e3a\u6211\u4eec\u7684\u793e\u533a\u548c\u5ba2\u6237\u63d0\u4f9b\u6025\u9700\u7684\u6e05\u6670\u4fe1\u606f\u3002\n\u53ea\u6709\u4e00\u4e2aElasticsearch\uff0c\u5b83\u6765\u81eaElastic\u3002\u8fd9\u610f\u5473\u7740\u5f53\u4f60\u4f7f\u7528Elasticsearch\u65f6\uff0c\u65e0\u8bba\u662f\u4f5c\u4e3aAWS\u3001Azure\u6216Google Cloud\u4e2d\u7684Elastic\u4e91\u670d\u52a1\uff0c\u8fd8\u662f\u5f53\u4f60\u81ea\u5df1\u4e0b\u8f7d\u5e76\u8fd0\u884cElasticsearch\u65f6\uff0c\u4f60\u90fd\u53ef\u4ee5\u786e\u4fdd\u83b7\u5f97\u5c3d\u53ef\u80fd\u6700\u597d\u7684\u4f53\u9a8c\uff0c\u56e0\u4e3a\u4f60\u53d7\u76ca\u4e8e\u4ea7\u54c1\u521b\u4f5c\u800512\u5e74\u7684\u4e0d\u65ad\u5f00\u53d1\u548c\u521b\u65b0\u3002\n\u5c55\u671b\u672a\u6765\uff0c\u6211\u4eec\u5c06\u4e13\u6ce8\u4e8e\u4e0e\u4e9a\u9a6c\u900a\u5408\u4f5c\uff0c\u4e3a\u5728AWS\u4e0a\u4f7f\u7528Elastic\u7684\u5171\u4eab\u5ba2\u6237\u5e26\u6765\u597d\u5904\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u56f4\u7ed5\u6211\u4eec\u6700\u8fd1\u7684\u6295\u8d44\u9886\u57df\uff0c\u6211\u4eec\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u6b63\u5728\u53d6\u5f97\u5de8\u5927\u7684\u52bf\u5934\uff0c\u4ee5\u7b80\u5316AWS\u4e0a\u5f39\u6027\u4e91\u7684\u6570\u636e\u63a5\u6536\u548c\u5b89\u88c5\u3002\n\u6211\u4eec\u6700\u8fd1\u5ba3\u5e03\u4e8620\u591a\u4e2a\u65b0\u7684\u96c6\u6210\uff0c\u4ee5\u5c06\u6570\u636e\u6444\u53d6\u7b80\u5316\u4e3aElastic\uff0c\u5305\u62ecAWS FireLens\u3001Amazon S3 Storage Lens\u3001AWS\u65e0\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u5b58\u50a8\u5e93\u4e2d\u7684Elastic\u65e0\u670d\u52a1\u5668\u8f6c\u53d1\u5668\u3001Elastic\u548cAWS Web\u5e94\u7528\u7a0b\u5e8f\u9632\u706b\u5899\uff0c\u4ee5\u53caElastic\u548cAWS\u7f51\u7edc\u9632\u706b\u5899\u3002\n\u6211\u4eec\u8fd8\u5ba3\u5e03\uff0c\u4f5c\u4e3a\u503c\u5f97\u4fe1\u8d56\u7684AWS\u5408\u4f5c\u4f19\u4f34\uff0cElastic Cloud\u5df2\u88ab\u8ba4\u8bc1\u4e3aAWS ISV\u5de5\u4f5c\u8d1f\u8f7d\u8fc1\u79fb\u8ba1\u5212\u7684\u4e00\u90e8\u5206\uff0c\u4ee5\u652f\u6301\u5ba2\u6237\u5728AWS\u4e0a\u8fc1\u79fb\u5230Elastic Cloud\u3002\u4f5c\u4e3a\u7ecf\u8fc7\u8ba4\u8bc1\u7684\u5de5\u4f5c\u8d1f\u8f7d\u8fc1\u79fb\u8ba1\u5212\u5408\u4f5c\u4f19\u4f34\uff0cElastic\u5229\u7528\u5165\u804c\u6307\u5bfc\u548c\u8fc1\u79fb\u8d44\u6e90\u7b80\u5316\u4e86\u8fc1\u79fb\u8fc7\u7a0b\u3002\n\u8fd9\u4e9b\u53ea\u662fElastic\u548cAWS\u5408\u4f5c\u7684\u4e00\u4e9b\u65b9\u5f0f\uff0c\u4f7fElasticsearch\u4f5c\u4e3aAWS\u4e0a\u7684\u4e00\u9879\u670d\u52a1\u6210\u4e3a\u6211\u4eec\u5171\u4eab\u5ba2\u6237\u7684\u6700\u4f73\u4f53\u9a8c\u3002\u6211\u4eec\u5bf9\u672a\u6765\u611f\u5230\u5174\u594b\uff0c\u5e76\u671f\u5f85\u7740\u6211\u4eec\u7ee7\u7eed\u5408\u4f5c\u3002", "note_en": "We\u2019re pleased to share that Elastic and Amazon have resolved the trademark infringement lawsuit related to the term Elasticsearch. Now the only Elasticsearch service on AWS and the  AWS Marketplace is Elastic Cloud.\n This resolution follows the  change to the license of Elasticsearch and Kibana in 2021, and Amazon\u2019s subsequent actions, including renaming their service. We believe this resolution will remove confusion in the marketplace and provide much-needed clarity to our community and customers.\n There is only one Elasticsearch, and it comes from Elastic. This means when you use Elasticsearch, whether as the Elastic Cloud service in AWS, Azure, or Google Cloud, or when you download and run Elasticsearch yourself, you can be sure that you\u2019re getting the best possible experience because you are benefiting from 12 years of constant development and innovation from the people who created the product.\n Looking ahead, we\u2019ll focus on collaborating with Amazon for the benefit of our shared customers who use Elastic on AWS. We are already seeing tremendous momentum in our partnership around our recent areas of investment to streamline data ingestion and simplify onboarding to Elastic Cloud on AWS.\n We recently announced more than 20 new integrations to streamline data ingestion into Elastic, including  AWS FireLens,  Amazon S3 Storage Lens, the  Elastic Serverless Forwarder in the AWS Serverless Application Repository,  Elastic and AWS Web Application Firewall, and the  Elastic and AWS Network Firewall.\n We also announced that as a trusted AWS partner, Elastic Cloud has been certified as part of the  AWS ISV Workload Migration Program to support the migration of customers to Elastic Cloud on AWS. As a certified Workload Migration Program partner, Elastic simplifies the migration process with onboarding guidance and migration resources.\n These are just a few of the ways Elastic and AWS are already working together to make using Elasticsearch as a service on AWS the best possible experience for our shared customers. We are excited for the future and look forward to our continued collaboration.", "posttime": "2022-02-17 15:46:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e9a\u9a6c\u900a,amazon,\u4fb5\u6743,aws", "title": "Elastic\u4e0e\u4e9a\u9a6c\u900a\u5c31\u5546\u6807\u4fb5\u6743\u8bc9\u8bbc\u8fbe\u6210\u534f\u8bae", "title_en": "Elastic and Amazon reach agreement on trademark infringement lawsuit", "transed": 1, "url": "https://www.elastic.co/blog/elastic-and-amazon-reach-agreement-on-trademark-infringement-lawsuit", "via": "", "real_tags": ["\u4e9a\u9a6c\u900a", "amazon", "\u4fb5\u6743", "aws"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073858, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5199\u53cd\u6559\u80b2\u6848\u6700\u75db\u82e6\u7684\u90e8\u5206\u662f\u8ba1\u7b97\u6559\u80b2\u7684\u56de\u62a5\u3002\u6211\u82b1\u4e8615\u4e2a\u6708\u7684\u65f6\u95f4\u505a\u7535\u5b50\u8868\u683c\u3002\u6211\u63d0\u51fa\u4e86\u57fa\u7ebf\u6848\u4f8b\uff0c\u505a\u4e86\u51e0\u5341\u6b21\u201c\u4e3b\u9898\u53d8\u5316\u201d\uff0c\u6ce8\u610f\u5230\u4e00\u4e2a\u5c0f\u9519\u8bef\u6216\u6b7b\u8def\u4e00\u6761\uff0c\u7136\u540e\u91cd\u65b0\u5f00\u59cb\u3002\u51e0\u4f4d\u7a0b\u5e8f\u5458\u670b\u53cb\u5efa\u8bae\u6211\u5b66\u4e60\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u6bd4\u5982Python\uff0c\u4ee5\u81ea\u52a8\u5b8c\u6210\u6240\u6709\u5de5\u4f5c\uff0c\u4f46\u621198%\u786e\u5b9a\u8fd9\u5c06\u82b1\u8d39\u66f4\u957f\u7684\u65f6\u95f4\u2014\u2014\u5e76\u5728\u7ed3\u679c\u4e2d\u5f15\u5165\u4e86\u8bb8\u591a\u989d\u5916\u7684\u9519\u8bef\u3002\u6211\u5e74\u8f7b\u65f6\u505a\u8fc7\u5f88\u591a\u7f16\u7a0b\uff0c\u6211\u77e5\u9053\u81ea\u5df1\u7684\u5c40\u9650\u6027\u3002\n\u6211\u975e\u5e38\u91cd\u89c6\u8d28\u91cf\u63a7\u5236\u3002\u5927\u7ea6\u6709\u516d\u4e2a\u670b\u53cb\u653e\u5f03\u4e86\u6574\u6574\u4e00\u5929\u7684\u65f6\u95f4\u5750\u5728\u6211\u65c1\u8fb9\uff0c\u800c\u6211\u5728\u5bfc\u6e38\u7684\u5e26\u9886\u4e0b\u8bb2\u89e3\u4e86\u6211\u8ba1\u7b97\u6570\u5b57\u80cc\u540e\u7684\u539f\u56e0\u3002\u5728\u8fd9\u672c\u4e66\u51fa\u7248\u7684\u56db\u5e74\u524d\uff0c\u6211\u516c\u5f00\u53d1\u5e03\u4e86\u7535\u5b50\u8868\u683c\uff0c\u5e76\u8981\u6c42\u5168\u4e16\u754c\u901a\u8fc7\u53d1\u73b0\u6211\u5de5\u4f5c\u4e2d\u7684\u9519\u8bef\u6765\u201c\u8ba9\u6211\u96be\u582a\u201d\u3002\u5982\u679c\u8bb0\u5fc6\u6709\u7528\u7684\u8bdd\uff0c\u4e00\u4e2aEconLog\u9605\u8bfb\u5668\u786e\u5b9e\u53d1\u73b0\u4e86\u4e00\u4e2a\u5c0f\u9519\u8bef\u3002\u5f53\u8fd9\u672c\u4e66\u6700\u7ec8\u51fa\u7248\u65f6\uff0c\u6211\u53d1\u5e03\u4e86\u8fd9\u672c\u4e66\u56de\u5f52\u6559\u80b2\u8ba1\u7b97\u7684\u6240\u6709\u7535\u5b50\u8868\u683c\u7684\u6700\u7ec8\u7248\u672c\u3002\u4e66\u4e2d\u7684\u5185\u5bb9\u4e0e\u6211\u4e0e\u5168\u4e16\u754c\u5206\u4eab\u7684\u5185\u5bb9\u4e00\u4e00\u5bf9\u5e94\u3002\u5b8c\u5168\u900f\u660e\u3002\n\u4f60\u731c\u600e\u4e48\u7740\uff1f\u81ea2018\u5e74\u300a\u53cd\u6559\u80b2\u6848\u300b\uff08the Case Against Education\uff09\u51fa\u7248\u4ee5\u6765\uff0c\u5c31\u6ca1\u6709\u4eba\u7ed9\u6211\u53d1\u8fc7\u5173\u4e8e\u8fd9\u4e9b\u7535\u5b50\u8868\u683c\u7684\u7535\u5b50\u90ae\u4ef6\u3002\u8fd9\u672c\u4e66\u53d7\u5230\u4e86\u5a92\u4f53\u7684\u5e7f\u6cdb\u5173\u6ce8\u3002\u6211\u7684\u7ed3\u679c\u5b8c\u5168\u76f8\u53cd\uff1a\u6211\u5bf9\u6559\u80b2\u7684\u793e\u4f1a\u56de\u62a5\u7684\u9996\u9009\u4f30\u8ba1\u51e0\u4e4e\u5bf9\u6240\u6709\u4eba\u53e3\u90fd\u662f\u8d1f\u7684\u3002\u6211\u5927\u58f0\u5229\u7528\u8fd9\u4e9b\u7ed3\u679c\u547c\u5401\u5927\u5e45\u524a\u51cf\u6559\u80b2\u652f\u51fa\u3002\u7136\u800c\uff0c\u81ea\u4ece\u8fd9\u672c\u4e66\u51fa\u7248\u4ee5\u6765\uff0c\u6ca1\u6709\u4eba\u8d39\u5fc3\u6311\u6218\u6211\u7684\u6570\u5b66\u3002\u4e0d\u516c\u5f00\u3002\u4e0d\u662f\u79c1\u4e0b\u3002\u6ca1\u4eba\u5173\u5fc3\u6211\u7684\u7535\u5b50\u8868\u683c\u3002\n\u7ed3\u679c\u662f\uff0c\u6211\u672c\u53ef\u4ee5\u633d\u6551\u4e00\u5e74\u7684\u751f\u547d\u3002\u6211\u672c\u53ef\u4ee5\u63a9\u76d6\u51e0\u5341\u4e2a\u68d8\u624b\u7684\u95ee\u9898\u3002\u7a0e\u6536\u3002\u8f6c\u79fb\u3002\u6559\u80b2\u5bf9\u957f\u5bff\u7684\u5f71\u54cd\u3002\u6559\u80b2\u5bf9\u751f\u6d3b\u8d28\u91cf\u7684\u5f71\u54cd\u3002\u6559\u80b2\u5bf9\u72af\u7f6a\u7684\u5f71\u54cd\u3002\u5b66\u6821\u548c\u5de5\u4f5c\u76f8\u6bd4\u662f\u591a\u4e48\u4ee4\u4eba\u4e0d\u6109\u5feb\u3002\u4e0e\u5176\u9605\u8bfb\u591a\u7bc7\u6587\u732e\u6765\u63d0\u53d6\u5408\u7406\u7684\u53c2\u6570\uff0c\u6211\u672c\u53ef\u4ee5\u53ea\u770b\u4e00\u773c\uff0c\u4e3a\u6bcf\u4e00\u4e2a\u65e0\u5173\u7d27\u8981\u7684\u95ee\u9898\u5236\u5b9a\u89c4\u5219\u3002\u8c01\u4f1a\u6253\u7535\u8bdd\u7ed9\u6211\uff1f\n\u522b\u8bef\u4f1a\u6211\uff1b\u53cd\u5bf9\u6559\u80b2\u7684\u6848\u4ef6\u62db\u81f4\u4e86\u5927\u91cf\u6279\u8bc4\u3002\u7136\u800c\uff0c\u51e0\u4e4e\u6ca1\u6709\u4e00\u4e2a\u662f\u5b9a\u91cf\u7684\u3002\u4e00\u4e9b\u6279\u8bc4\u4eba\u58eb\u8bc9\u8bf8\u5e38\u8bc6\uff1a\u201c\u6559\u80b2\u4e0d\u80fd\u50cf\u5361\u666e\u5170\u6240\u8bf4\u7684\u90a3\u6837\u6d6a\u8d39\u3002\u201d\u4e00\u4e9b\u8bc4\u8bba\u5bb6\u79f0\u6211\u4e3a\u5eb8\u4fd7\u8005\uff1a\u201c\u6559\u80b2\u4e0d\u662f\u4e3a\u4e86\u8d5a\u94b1\uff0c\u800c\u662f\u4e3a\u4e86\u6210\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684\u4eba\u3002\u201d\u5c3d\u7ba1\u6211\u5199\u4e86\u6574\u6574\u4e00\u7ae0\u53cd\u5bf9\u8fd9\u79cd\u8bef\u89e3\u3002\u4e00\u4e9b\u6279\u8bc4\u8005\u5947\u602a\u5730\u58f0\u79f0\uff0c\u6700\u8fd1\u7684\u4e00\u7bc7\u8bba\u6587\u9a73\u65a5\u4e86\u6211\u7684\u6574\u4e2a\u4e8b\u4e1a\u3002\u4f46\u636e\u6211\u8bb0\u5fc6\u6240\u53ca\uff0c\u4ece\u672a\u6709\u4eba\u6279\u8bc4\u8fc7\u6211\u7684\u6570\u5b66\u3002\n\u6211\u7684\u56de\u5f52\u6559\u80b2\u8ba1\u7b97\u6700\u65b0\u9896\u7684\u7279\u70b9\u662f\uff0c\u6211\u8bd5\u56fe\u8ba1\u7b97\u6240\u6709\u91cd\u8981\u7684\u4e8b\u60c5\u3002\u6211\u62ff\u4e86\u65e0\u6570\u4ee5\u6807\u51c6\u56de\u62a5\u7387\u4f30\u7b97\u5f00\u59cb\u7684\u8bba\u6587\uff0c\u5e76\u7528\u4e00\u4e2a\u65b0\u7684\u590d\u6742\u5ea6\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e86\u8c03\u6574\u3002\u7136\u540e\u6211\u5408\u5e76\u4e86\u6240\u6709\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u6709\u8bf4\u670d\u529b\u7684\u8c03\u6574\uff0c\u4ee5\u83b7\u5f97\u6700\u7ec8\u7684\u653f\u7b56\u76f8\u5173\u6570\u636e\u3002\u5982\u679c\u4f60\u60f3\u5229\u7528\u7814\u7a76\u4eba\u5458\u6240\u77e5\u9053\u7684\u4e00\u5207\u6765\u5236\u5b9a\u6700\u4f73\u653f\u7b56\uff0c\u90a3\u6b63\u662f\u4f60\u8981\u505a\u7684\u3002\n\u7136\u800c\uff0c\u6700\u7ec8\u6211\u53d1\u73b0\uff0c\u771f\u6b63\u7684\u667a\u529b\u95ee\u9898\u4e0d\u662f\u4f9b\u7ed9\u4e0d\u8db3\uff0c\u800c\u662f\u9700\u6c42\u4e0d\u8db3\u3002\u6559\u80b2\u7814\u7a76\u4eba\u5458\u4e0d\u4f1a\u4e3a\u4e86\u8ba9\u4e16\u754c\u66f4\u63a5\u8fd1\u771f\u76f8\u800c\u8c03\u6574\u6807\u51c6\u56de\u62a5\u8ba1\u7b97\u3002\u4ed6\u4eec\u8c03\u6574\u6807\u51c6\u56de\u62a5\u7387\u8ba1\u7b97\uff0c\u4ee5\u83b7\u5f97\u53e6\u4e00\u4efd\u51fa\u7248\u7269\u2014\u2014\u7136\u540e\u7ee7\u7eed\u4ed6\u4eec\u7684\u751f\u6d3b\u3002\u5982\u679c\u5168\u4e16\u754c\u90fd\u5bf9\u6211\u4eec\u6240\u77e5\u9053\u7684\u56de\u5f52\u6559\u80b2\u7684\u4e00\u5207\u7ed9\u4e88\u5173\u6ce8\u548c\u7ec8\u8eab\u6559\u804c\uff0c\u90a3\u4e48\u65e9\u5c31\u6709\u4eba\u8fd9\u4e48\u505a\u4e86\u3002\n\u5f88\u96be\u907f\u514d\u4e00\u4e2a\u4ee4\u4eba\u6cae\u4e27\u7684\u7ed3\u8bba\uff1a\u5b9a\u91cf\u793e\u4f1a\u79d1\u5b66\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\u51e0\u4e4e\u4e0d\u76f8\u5173\u2014\u2014\u51e0\u4e4e\u6240\u6709\u793e\u4f1a\u79d1\u5b66\u5bb6\u90fd\u6697\u5730\u91cc\u540c\u610f\u8fd9\u4e00\u70b9\u3002\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u7684\u590d\u6742\u6570\u5b66\u662f\u4e00\u6b21\u6027\u7684\u3002\u4f60\u90e8\u7f72\u5b83\u6765\u83b7\u5f97\u4e00\u4efd\u51fa\u7248\u7269\uff0c\u7136\u540e\u7ee7\u7eed\u4f60\u7684\u804c\u4e1a\u751f\u6daf\u3002\u5230\u4e86\u7ed9\u51fa\u653f\u7b56\u5efa\u8bae\u7684\u65f6\u5019\uff0c\u6570\u5b66\u95ee\u9898\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u5982\u679c\u5e78\u8fd0\u7684\u8bdd\uff0c\u7814\u7a76\u4eba\u5458\u4f1a\u9ed8\u8ba4\u5e38\u8bc6\u3002\u5426\u5219\uff0c\u4ed6\u4eec\u4f1a\u7ee7\u7eed\u4ed6\u4eec\u7684\u610f\u8bc6\u5f62\u6001\u548c\u73b0\u72b6\u504f\u89c1\uff0c\u4f7f\u7528\u6700\u65b0\u7684\u6743\u5a01\u62a5\u7eb8\u4f5c\u4e3a\u906e\u7f9e\u5e03\u3002\u7ecf\u9a8c\u793e\u4f1a\u79d1\u5b66\u6559\u7ed9\u6211\u4eec\u7684\u5173\u4e8e\u4e16\u754c\u7684\u77e5\u8bc6\u8fdc\u8fdc\u591a\u4e8e\u7eaf\u7cb9\u7684\u7406\u8bba\u3002\u7136\u800c\u5728\u5b9e\u8df5\u4e2d\uff0c\u5373\u4f7f\u662f\u5b9e\u8bc1\u7814\u7a76\u4eba\u5458\u4e5f\u51e0\u4e4e\u4e0d\u5173\u5fc3\u5b9e\u8bc1\u793e\u4f1a\u79d1\u5b66\u5230\u5e95\u8981\u6559\u4ec0\u4e48\u3002", "note_en": "The most painful part of writing\u00a0  The Case Against Education was calculating the return to education.\u00a0 I spent fifteen months working on the spreadsheets.\u00a0 I came up with the baseline case, did scores of \u201cvariations on a theme,\u201d\u00a0 noticed a small mistake or blind alley, then started over.\u00a0 Several programmer friends advised me to learn a new programming language like Python to do everything automatically, but I\u2019m 98% sure that would have taken even longer \u2013 and introduced numerous additional errors into the results.\u00a0 I did plenty of programming in my youth, and I know my limitations.\n I took quality control very seriously.\u00a0 About half a dozen friends gave up whole days of their lives to sit next to me while I gave them a guided tour of the reasoning behind my number-crunching.\u00a0 Four years before the book\u2019s publication, I publicly released the spreadsheets, and asked the world to \u201c embarrass me now\u201d by finding errors in my work.\u00a0 If memory serves, one EconLog reader did find a minor mistake.\u00a0 When the book finally came out, I published  final versions of all the spreadsheets underlying the book\u2019s return to education calculations.\u00a0 A one-to-one correspondence between what\u2019s in the book and what I shared with the world.\u00a0 Full transparency.\n Now guess what?\u00a0 Since the 2018 publication of  The Case Against Education, precisely  zero people have emailed me about those spreadsheets.\u00a0 The book enjoyed massive media attention.\u00a0 My results were ultra-contrarian: my preferred estimate of the Social Return to Education is   negative for almost every demographic.\u00a0 I loudly used these results to call for massive cuts in education spending.\u00a0 Yet since the book\u2019s publication, no one has bothered to challenge my math.\u00a0 Not publicly.\u00a0 Not privately.\u00a0 No one cared about my spreadsheets.\n The upshot is that I probably could have saved a year of my life.\u00a0 I could have glossed over dozens of thorny issues.\u00a0 Taxes.\u00a0 Transfers.\u00a0 The effect of education on longevity.\u00a0 The effect of education on quality of life.\u00a0 The effect of education on crime.\u00a0 How unpleasant school is compared to work.\u00a0 Instead of reading multiple literatures to extract plausible parameters, I could have just eyeballed and stipulated for every tangential issue.\u00a0 Who would have called me on it?\n Don\u2019t get me wrong;\u00a0 The Case Against Education drew plenty of criticism.\u00a0 Almost none of it, however, was quantitative.\u00a0 Some critics appealed to common sense: \u201cEducation\u00a0 can\u2019t be anywhere near as wasteful as Caplan claims.\u201d\u00a0 Some critics called me a philistine: \u201cEducation isn\u2019t about making money; it\u2019s about becoming a whole person.\u201d\u00a0 Never mind that I wrote a whole chapter against this misinterpretation.\u00a0 A few critics  bizarrely claimed that one recent paper had refuted my entire enterprise.\u00a0 But as far as I recall, zero critics ever checked my math.\n The most novel feature of my return to education calculations was that I tried to count\u00a0 everything that matters.\u00a0 I took the countless papers that start with the standard return estimates and tweak them with one novel complication.\u00a0 Then I merged  all the tweaks that seemed convincing to me to get final policy-relevant numbers.\u00a0 If you wanted to use everything researchers know to craft optimal policy, that is precisely what you would do.\n In the end, however, I discovered that the true intellectual problem was not lack of supply, but lack of demand.\u00a0 Education researchers don\u2019t tweak standard return calculations to get the world closer to the truth.\u00a0 They tweak standard return calculations to get another publication \u2013 then move on with their lives.\u00a0 If the world handed out attention and tenure for synthesizing everything we know about the return to education, someone else would have done it long ago.\n It\u2019s hard to avoid a disheartening conclusion: Quantitative social science is barely relevant in the real world \u2013 and almost every social scientist covertly agrees.\u00a0 The complex math that researchers use is disposable.\u00a0 \u00a0You deploy it to get a publication, then move on with your career.\u00a0 When it comes time to give policy advice, the math is AWOL.\u00a0 If you\u2019re lucky, researchers default to common sense.\u00a0 Otherwise, they go with their ideology and status-quo bias, using the latest prestigious papers as fig leaves.\u00a0 Empirical social science teaches us  far more about the world than pure theory.\u00a0 Yet in practice, even empirical researchers barely care what empirical social science really has to teach.", "posttime": "2022-02-17 15:44:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5173\u5fc3,cared,\u6559\u80b2", "title": "\u6ca1\u4eba\u5173\u5fc3\u6211\u7684\u7535\u5b50\u8868\u683c", "title_en": "No one cared about my spreadsheets", "transed": 1, "url": "https://www.econlib.org/no-one-cared-about-my-spreadsheets/", "via": "", "real_tags": ["\u5173\u5fc3", "cared", "\u6559\u80b2"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073857, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u5e94\u8be5\u642c\u5230\u65e0\u670d\u52a1\u5668\u5417\uff1fGraphQL\u662f\u89e3\u51b3API\u95ee\u9898\u7684\u7b54\u6848\u5417\uff1f\u60a8\u662f\u5426\u5e94\u8be5\u9075\u5faa\u6700\u65b0\u7684DevOps\u624b\u518c\u6765\u63d0\u9ad8\u7cfb\u7edf\u53ef\u9760\u6027\uff1f\u5728\u79d1\u6280\u5de5\u5177\u7684\u4e16\u754c\u91cc\uff0c\u6709\u5f88\u591a\u55e1\u55e1\u58f0\u3002\u4f46\u5b83\u5e76\u4e0d\u603b\u662f\u53cd\u6620\u7a0b\u5e8f\u5458\u7684\u65e5\u5e38\u73b0\u5b9e\u3002\n\u4f5c\u4e3a\u4e00\u5bb6\u5f00\u53d1\u5de5\u5177\u521d\u521b\u516c\u53f8\u7684\u521b\u59cb\u4eba\uff0c\u6211\u5728\u8fc7\u53bb\u51e0\u5e74\u7684\u5e38\u89c4\u7528\u6237\u7814\u7a76\u8fc7\u7a0b\u4e2d\u4e0e\u6570\u767e\u540d\uff08\u5982\u679c\u4e0d\u662f\u6570\u5343\u540d\u7684\u8bdd\uff09\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u8fdb\u884c\u4e86\u4ea4\u8c08\u3002\u8fd9\u4e9b\u5bf9\u8bdd\u4e2d\u7684\u5171\u540c\u4e3b\u9898\uff0c\u751a\u81f3\u6bd4\u6211\u4eec\u6b63\u5728\u6784\u5efa\u7684\u4ea7\u54c1\u7684\u9700\u6c42\u66f4\u5927\uff0c\u662f\u4e00\u4e2a\u76ee\u524d\u672a\u5f97\u5230\u5145\u5206\u670d\u52a1\u7684\u603b\u4f53\u9700\u6c42\uff1a\u4e3a\u771f\u6b63\u7684\u5f00\u53d1\u8005\u6784\u5efa\uff0c\u6216\u8005\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a99%\u7684\u5f00\u53d1\u8005\u3002\n\u8fd9\u4e9b\u662f\u5728\u70ed\u95e8\u516c\u53f8\u548c\u6846\u67b6\u4e4b\u5916\u5b8c\u6210\u5de5\u4f5c\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4eec\u5728\u5173\u4e8e\u201c\u5f00\u53d1\u4eba\u5458\u60f3\u8981\u4ec0\u4e48\u201d\u7684\u5bf9\u8bdd\u4e2d\u7ecf\u5e38\u88ab\u5ffd\u89c6\u201c\u5f00\u53d1\u8005\u5f71\u54cd\u8005\u201d\u8c08\u8bba\u7684\u5185\u5bb9\u4e0e\u5927\u591a\u6570\u5f00\u53d1\u8005\u7684\u65e5\u5e38\u73b0\u5b9e\u4e4b\u95f4\u5b58\u5728\u5de8\u5927\u5dee\u8ddd\u3002\u5f53\u4f60\u770b\u5230\u79d1\u6280\u5a92\u4f53\u6216\u9876\u7ea7\u79d1\u6280\u4f1a\u8bae\u4e0a\u7684\u6f14\u8bb2\u8005\u62a5\u9053\u7684\u5185\u5bb9\u65f6\uff0c\u5f80\u5f80\u662f\u6765\u81eaAirbnb\u6216Stripe\u7b49\u9ad8\u589e\u957f\u5ba0\u513f\u7684\u4eba\uff0c\u6216FAANGs\u7b49\u8001\u724c\u9ad8\u5229\u6da6\u516c\u53f8\u7684\u4eba\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u957f\u671f\u4ee5\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u8ba4\u4e3a\uff0c\u9664\u4e86\u5c11\u6570\u7845\u8c37\u72ec\u89d2\u517d\u4e4b\u5916\uff0c\u4f01\u4e1a\u5e94\u8be5\u6e34\u671b\u62e5\u6709\u201c\u5a74\u513fFAANG\u201d\u7684\u6d41\u7a0b\u4f46\u8fd9\u4e00\u70b9\u8d8a\u6765\u8d8a\u4e0d\u6b63\u786e\u3002\u6211\u4eec\u7684\u7528\u6237\u5f80\u5f80\u4f1a\u4e0d\u597d\u610f\u601d\u5730\u544a\u8bc9\u6211\u4eec\uff0c\u4ed6\u4eec\u7684\u505a\u6cd5\u4e0e\u4ed6\u4eec\u201c\u5e94\u8be5\u201d\u7684\u5b8c\u5168\u4e0d\u540c\u4f46\u5bf9\u4e8e\u8fd9\u4e9b\u5fae\u8f6f\u7684\u65af\u79d1\u7279\u00b7\u6c49\u65af\u66fc\uff08Scott Hanselman\uff09\u6240\u79f0\u7684\u201c\u6697\u7269\u8d28\u5f00\u53d1\u8005\u201d\uff0cFacebook\u6216Pinterest\u7684\u505a\u6cd5\u6beb\u65e0\u610f\u4e49\u3002\u4ed6\u4eec\u7684\u7528\u6237\u9700\u6c42\u4e0d\u540c\uff0c\u56e2\u961f\u9700\u6c42\u4e5f\u4e0d\u540c\u3002\n\u8c08\u8bba99%\u7684\u5f00\u53d1\u4eba\u5458\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u5f00\u53d1\u4e3a\u6211\u4eec\u7684\u751f\u547d\u63d0\u4f9b\u52a8\u529b\u7684\u8f6f\u4ef6\u2014\u2014\u4fdd\u9669\u3001\u533b\u7597\u4fdd\u5065\u3001\u96f6\u552e\u548c\u94f6\u884c\uff0c\u4ec5\u4e3e\u51e0\u4f8b\u3002\u4e0d\u4ec5\u662f\u5c0f\u516c\u53f8\u4e0d\u80fd\u8f7b\u6613\u91c7\u7528\u73b0\u4ee3\u79d1\u6280\u9886\u5148\u516c\u53f8\u7684\u6d41\u7a0b\uff1b\u5927\u591a\u6570\u516c\u53f8\u90fd\u4e0d\u662f\u56f4\u7ed5\u7740\u6280\u672f\u800c\u5efa\u7acb\u7684\uff0c\u5b83\u4eec\u6709\u51e0\u5341\u5e74\u7684\u9057\u7559\u8f6f\u4ef6\u5b9e\u8df5\u3002\u8fd9\u4e9b\u516c\u53f8\u4e2d\u7684\u5f88\u591a\u90fd\u4f1a\u8f6c\u79fb\u5927\u91cf\u8d44\u91d1\u3002\u8fd9\u4e9b\u516c\u53f8\u4e2d\u7684\u8bb8\u591a\u90fd\u5904\u7406\u6211\u4eec\u76f8\u5f53\u591a\u7684\u4e2a\u4eba\u6570\u636e\u3002\u5982\u679c\u6280\u672f\u521b\u65b0\u6ca1\u6709\u8ba9\u8fd9\u4e9b\u8f6f\u4ef6\u56e2\u961f\u53d7\u76ca\uff0c\u6211\u4eec\u5c31\u5931\u53bb\u4e86\u5bf9\u6bcf\u4e2a\u4eba\u7684\u751f\u6d3b\u8d28\u91cf\u7684\u8bb8\u591a\u6709\u610f\u4e49\u7684\u6539\u5584\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u4f01\u4e1a\u8f6f\u4ef6\u8d2d\u4e70\u8005\u548c\u5efa\u8bbe\u8005\u90fd\u53ef\u4ee5\u63a5\u53d7\u7684\u771f\u7406\uff0c\u4ee5\u6d88\u9664\u6709\u5bb3\u7684\u795e\u8bdd\uff0c\u5e76\u6539\u5584\u6240\u6709\u5f00\u53d1\u8005\u7684\u4f53\u9a8c\u3002\n\u7531\u4e8eFacebook\u3001Netflix\u3001LinkedIn\u3001\u8c37\u6b4c\u548c\u4e9a\u9a6c\u900a\u7b49\u516c\u53f8\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u5199\u4f5c\u548c\u5de5\u5177\uff0c\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u6d93\u6ef4\u6548\u5e94\uff1a\u6709\u94b1\u7684\u516c\u53f8\u7684\u4f1f\u5927\u5de5\u7a0b\u5e08\u4f1a\u60f3\u51fa\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u89e3\u51b3\u5176\u4ed6\u4eba\u6709\u671d\u4e00\u65e5\u4f1a\u9047\u5230\u7684\u95ee\u9898\u3002\u4f60\u5178\u578b\u7684\u4e2d\u5c0f\u578b\u4f01\u4e1a\u6216\u8d22\u5bcc500\u5f3a\u516c\u53f8\u9047\u5230\u4e0e\u4e9a\u9a6c\u900a\u6216Facebook\u76f8\u540c\u7684\u95ee\u9898\u53ea\u662f\u65f6\u95f4\u95ee\u9898\u3002\n\u7c7b\u4f3cFAANG\u7684\u516c\u53f8\u5728\u5f88\u591a\u65b9\u9762\u90fd\u4e0d\u540c\u4e8eSMB\u6216\u5178\u578b\u7684\u8d22\u5bcc500\u5f3a\u516c\u53f8\uff0c\u5305\u62ec\u89c4\u6a21\u9700\u6c42\u3001\u5efa\u7b51\u4e0e\u8d2d\u4e70\u7684\u7acb\u573a\uff0c\u4ee5\u53ca\u5de5\u7a0b\u56e2\u961f\u7684\u7ec4\u6210\u3002\u5c11\u6570\u8d44\u672c\u96c4\u539a\u7684\u5927\u578b\u516c\u53f8\u62e5\u6709\u5168\u4e16\u754c\u4e13\u5bb6\u7ec4\u6210\u7684\u56e2\u961f\uff0c\u81f4\u529b\u4e8e\u53ef\u89c2\u5bdf\u6027\u3001\u6d4b\u8bd5\u3001\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u7387\u7b49\u65b9\u9762\u7684\u5de5\u4f5c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cFAANG\u6b63\u5728\u56f4\u7ed5\u4e00\u5c0f\u90e8\u5206\u4ece\u4e00\u5f00\u59cb\u5c31\u6570\u5b57\u5316\u7684\u4ea7\u54c1\u8fdb\u884c\u4f18\u5316\uff0c\u8fd9\u5728\u5927\u591a\u6570\u8f6f\u4ef6\u5546\u5e97\u4e2d\u662f\u4e0d\u6b63\u786e\u7684\u3002\n\u8bb8\u591a\u975eFAANG\u56e2\u961f\u90fd\u6709\u4e00\u4e2a\u5c0f\u578b\u7684\u975e\u4e13\u5bb6\u56e2\u961f\uff0c\u751a\u81f3\u662f\u975e\u4e13\u5bb6\u5de5\u7a0b\u5e08\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u6765\u505aFAANG\u7c7b\u516c\u53f8\u6709\u591a\u4e2a\u4e13\u5bb6\u56e2\u961f\u8981\u505a\u7684\u4e8b\u60c5\u3002\u8fd9\u4e9b\u7ec4\u7ec7\u4e3b\u8981\u4f9d\u8d56\u5916\u90e8\u5de5\u5177\u548c\u670d\u52a1\uff0c\u5b83\u4eec\u51e0\u4e4e\u6ca1\u6709\u7528\u4e8e\u5b9a\u5236\u7684\u5e26\u5bbd\u3002\n\u9996\u5148\uff0c\u79d1\u6280\u884c\u4e1a\u9700\u8981\u8ba4\u8bc6\u5230\uff0c\u4e0d\u540c\u89c4\u6a21\u3001\u4e0d\u540c\u5de5\u7a0b\u9884\u7b97\u7684\u7ec4\u7ec7\u5c06\u6709\u4e0d\u540c\u7684\u9700\u6c42\u3002\u4e00\u5bb6\u6bcf\u5929\u5904\u7406\u6570\u767e\u4e07\u7528\u6237\u8bf7\u6c42\u7684\u516c\u53f8\u4e0d\u9700\u8981\u50cfNetflix\u6216\u8c37\u6b4c\u90a3\u6837\u4f18\u5316\u5176\u7cfb\u7edf\u3002\u5927\u591a\u6570\u516c\u53f8\u6ca1\u6709\u5ef6\u8fdf\u3001\u6570\u636e\u5b58\u50a8\u548c\u5176\u4ed6\u95ee\u9898\u5bfc\u81f4\u4ed6\u4eec\u7f16\u5199\u81ea\u5df1\u7684\u5b9a\u5236\u57fa\u7840\u8bbe\u65bd\u7ec4\u4ef6\u548c\u5de5\u5177\uff0c\u6bd4\u5982Facebook\u4f7f\u7528\u5176Tao data store\u548cHive data warehousing\u5de5\u5177\u6240\u505a\u7684\u4e8b\u60c5\u2014\u2014\u800c\u4e14\u4ed6\u4eec\u53ef\u80fd\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u53ef\u4ee5\u4fdd\u8bc1\u4ed6\u4eec\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u3002\n\u627f\u8ba4\u4e0d\u540c\u7684\u9700\u6c42\u5c06\u4e3a\u8ba8\u8bba\u5404\u79cd\u7ec4\u7ec7\u7684\u4e0d\u540c\u9700\u6c42\u63d0\u4f9b\u7a7a\u95f4\u3002\u4f8b\u5982\uff0c\u90a3\u4e9b\u9057\u7559\u7cfb\u7edf\u65e0\u6cd5\u8fc1\u79fb\u5230\u6700\u65b0\u4f53\u7cfb\u7ed3\u6784\u7684\u516c\u53f8\u9700\u8981\u91c7\u7528\u4e0d\u540c\u4e8e\u8f83\u65b0\u516c\u53f8\u7684\u65b0\u5de5\u5177\uff0c\u6216\u8005\u90a3\u4e9b\u53ef\u4ee5\u4e13\u95e8\u7ec4\u5efa\u56e2\u961f\u8fdb\u884c\u5927\u89c4\u6a21\u8fc1\u79fb\u7684\u516c\u53f8\u3002\n\u8ba4\u8bc6\u5230\u6ca1\u6709\u4e00\u4e2a\u7406\u60f3\u7684\u516c\u53f8\u7b80\u4ecb\u53ef\u4ee5\u5e2e\u52a9\u5efa\u8bbe\u8005\u5728\u7406\u89e3\u7528\u6237\u65f6\u8d85\u8d8a\u901a\u5e38\u7684\u6000\u7591\u3002\u8fd9\u5bf9\u4e8e\u4ee5\u53ef\u5b9e\u73b0\u7684\u65b9\u5f0f\u5f25\u5408\u8f6f\u4ef6\u9700\u6c42\u548c\u8f6f\u4ef6\u5de5\u5177\u4e4b\u95f4\u7684\u5dee\u8ddd\u81f3\u5173\u91cd\u8981\u3002\n\u73b0\u573a\u7531@jeanqasaur\u62a5\u9053\u3002\u4f8b\u5982\uff0cbig tech\u5728\u5176\u4ed6\u5730\u65b9\u5f88\u5c11\u51fa\u73b0\u7684\u5185\u90e8\u5e73\u53f0\u56e2\u961f\u4e2d\u6295\u5165\u5927\u91cf\u65f6\u95f4\u3002\n\u4f8b\u5982\uff1a\u5728\u4f18\u6b65\uff0c\u79fb\u52a8\u5e73\u53f0\u56e2\u961f\u53d1\u73b0\u4e86\u6211\u7684\u56e2\u961f\u7f16\u5199/\u62e5\u6709\u7684\u8fd0\u884c\u7f13\u6162\u7684\u6d4b\u8bd5*&amp\uff1b\u544a\u8bc9\u6211\u4eec\u8be5\u600e\u4e48\u4fee\u3002\n\u5982\u679c\u4f60\u770b\u4e86\u8db3\u591f\u591a\u7684\u4f1a\u8bae\u6f14\u8bb2\u6216\u9605\u8bfb\u4e86\u8db3\u591f\u591a\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u5c31\u4f1a\u53d1\u73b0\u6709\u8bb8\u591a\u8f6f\u4ef6\u56e2\u961f\u91c7\u7528\u4e86\u539f\u59cb\u7684\u7f16\u7801\u6807\u51c6\u3001\u975e\u8106\u5f31\u7684\u5355\u5143\u6d4b\u8bd5\u3001\u53cd\u6620\u751f\u4ea7\u73af\u5883\u7684\u4e34\u65f6\u73af\u5883\uff0c\u548c/\u6216\u5e73\u6ed1\u7684\u4eba\u5458\u6d41\u7a0b\u6765\u5e94\u5bf9\u4e8b\u6545\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u53ea\u9700\u8981\u4e0a\u7ea7\u7684\u5f3a\u70c8\u6307\u793a\u548c\u6574\u4e2a\u5de5\u7a0b\u56e2\u961f\u7684\u7eaa\u5f8b\u3002\n\u5c31\u50cf\u5176\u4ed6\u9886\u57df\u7684\u5f71\u54cd\u8005\u4e00\u6837\uff0c\u5f00\u53d1\u8005\u5f71\u54cd\u8005\u7ecf\u5e38\u63cf\u8ff0\u4e00\u4e2a\u73b0\u5b9e\uff0c\u5373\u4f7f\u5bf9\u4ed6\u4eec\u81ea\u5df1\u7684\u516c\u53f8\u6765\u8bf4\u4e5f\u662f\u4ee4\u4eba\u5411\u5f80\u7684\u3002\u5199\u7406\u60f3\u8fc7\u7a0b\u7684\u4eba\u53ef\u80fd\u751f\u6d3b\u5728\u4e00\u4e2a\u7406\u60f3\u5316\u7684\u73af\u5883\u4e2d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u662f\u63d0\u4f9b\u89c4\u5219\u7684\u4f8b\u5916\u3002\u4f46\u5927\u591a\u6570\u65f6\u5019\u2014\u2014\u5373\u4f7f\u5728\u4e00\u4e2a\u7ec4\u7ec7\u7684\u67d0\u4e2a\u90e8\u5206\u6216\u67d0\u4e2a\u65f6\u523b\u662f\u771f\u7684\u2014\u2014\u8fd9\u79cd\u73b0\u5b9e\u5e76\u4e0d\u9002\u7528\u4e8e\u4ed6\u4eec\u7684\u6574\u4e2a\u516c\u53f8\uff0c\u4e5f\u4e0d\u4f1a\u6c38\u8fdc\u9002\u7528\u3002\n\u4f8b\u5982\uff0cSpotify\u627f\u8ba4\uff0c\u4e00\u65e6\u4ed6\u4eec\u7684\u56e2\u961f\u8fbe\u5230\u4e00\u5b9a\u89c4\u6a21\uff0c\u4ed6\u4eec\u5bf9DevOps\u7684\u5d07\u62dc\u65b9\u5f0f\u5c31\u65e0\u6cd5\u6269\u5927\u89c4\u6a21\u3002\u6211\u4eec\u8fd8\u770b\u5230\u4e00\u4e9b\u516c\u53f8\u91c7\u7528\u4e86\u65b0\u7684\u70ed\u95e8\u6280\u672f\uff0c\u7136\u540e\u5728\u4e8b\u60c5\u6ca1\u6709\u6309\u8ba1\u5212\u8fdb\u884c\u65f6\u6062\u590d\u2014\u2014\u4f8b\u5982\uff0c\u7ec6\u5206\u5e02\u573a\u4ece\u5fae\u670d\u52a1\u8f6c\u5411\u6574\u4f53\u670d\u52a1\u3002\n\u5f53\u89c2\u4f17\u4e3a\u8fd9\u4e00\u5207\u63d0\u4f9b\u52a8\u529b\u65f6\uff0c\u5f00\u53d1\u4eba\u5458\u5728\u8be2\u95ee\u771f\u76f8\u65f6\u5e94\u8be5\u66f4\u52a0\u6311\u5254\u3002\u6211\u4eec\u5e94\u8be5\u6b22\u8fce\u5173\u4e8e\u201c\u771f\u5b9e\u8f6f\u4ef6\u8fc7\u7a0b\u201d\u7684\u5e16\u5b50\uff0c\u5c31\u50cf\u6211\u4eec\u6e34\u671b\u7406\u60f3\u5316\u7684\u5185\u5bb9\u4e00\u6837\u3002\u5982\u679c\u6709\u4eba\u5728\u4e00\u4e2a\u7406\u60f3\u5316\u7684\u8fc7\u7a0b\u4e2d\u5de5\u4f5c\uff0c\u6709\u4e00\u4e2a\u4e16\u754c\u7ea7\u7684ops\u56e2\u961f\u548c\u4e00\u6574\u652f\u652f\u6301\u6539\u8fdb\u8f6f\u4ef6\u8d28\u91cf\u7684\u56e2\u961f\uff0c\u90a3\u4e48\u89c2\u4f17\u5e94\u8be5\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff01\u6211\u4eec\u5e94\u8be5\u6b22\u8fce\u66f4\u591a\u4e3a\u201c\u771f\u6b63\u7684\u8f6f\u4ef6\u73af\u5883\u201d\u63d0\u4f9b\u6307\u5bfc\u7684\u8bb2\u5ea7\u3001\u535a\u5ba2\u5e16\u5b50\u548c\u4e66\u7c4d\uff1a\u5728\u4eba\u5458\u77ed\u7f3a\u7684\u56e2\u961f\u3001\u6ca1\u6709\u4e13\u95e8\u7684devops\u4e13\u5bb6\u7684\u56e2\u961f\u4ee5\u53ca\u6700\u521d\u6784\u5efa\u7cfb\u7edf\u7684\u6240\u6709\u4eba\u90fd\u79bb\u5f00\u7684\u56e2\u961f\u4e2d\uff0c\u7f16\u7801\u3001\u6d4b\u8bd5\u548c\u53d1\u5e03\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002\n\u53e6\u4e00\u4e2a\u5c0f\u79d8\u5bc6\u662f\uff1a\u5927\u591a\u6570\u201c\u5f00\u53d1\u8005\u5f71\u54cd\u8005\u201d\u8bf4\u7684\u5f88\u591a\u8bdd\u90fd\u662f\u76f8\u5f53\u6709\u62b1\u8d1f\u7684\u3002\n\u4ed6\u4eec\u81ea\u5df1\u7684\u516c\u53f8\u505a\u4e8b\u60c5\u4e0d\u4e00\u5b9a\u50cf\u4ed6\u4eec\u5bf9\u522b\u4eba\u8bf4\u6559\u90a3\u6837\u987a\u5229\u3002\n\u8fd9\u5728\u5927\u578b\u516c\u53f8\u5c24\u5176\u5982\u6b64\uff0c\u5728\u8fd9\u4e9b\u516c\u53f8\u4e2d\uff0c\u7ec4\u7ec7/\u56e2\u961f\u4e4b\u95f4\u7684\u6587\u5316\u5dee\u5f02\u53ef\u80fd\u5f88\u5927https://t.co/FW2aI8lppu\n\u592a\u591a\u4eba\u8ba4\u4e3a\uff0c\u8ffd\u6c42\u826f\u597d\u7684\u8f6f\u4ef6\u8d28\u91cf\u610f\u5473\u7740\u4f60\u9700\u8981\u5b8c\u5168\u91c7\u7528\u8fd9\u79cd\u65b0\u6280\u672f\uff0c\u65e0\u8bba\u662f\u5fae\u670d\u52a1\u3001GraphQL\u8fd8\u662f\u5206\u5e03\u5f0f\u8ddf\u8e2a\u3002\u5728\u5b8c\u5168\u5207\u6362\u5230\u7406\u60f3\u6280\u672f\u4e4b\u524d\uff0c\u60a8\u8fd8\u6ca1\u6709\u5b8c\u6210\u3002\n\u5982\u4eca\uff0c\u201c\u771f\u6b63\u7684\u5f00\u53d1\u4eba\u5458\u201d\u56e2\u961f\u7684\u4f4d\u7f6e\u4e0e\u7ed9\u51fa\u7684\u4e3b\u6d41\u5efa\u8bae\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u610f\u5473\u7740\uff0c\u5728\u63d0\u9ad8\u4ee3\u7801\u8d28\u91cf\u6216\u7cfb\u7edf\u53ef\u9760\u6027\u65b9\u9762\uff0c\u8bb8\u591a\u56e2\u961f\u4e0d\u77e5\u9053\u4ece\u54ea\u91cc\u5f00\u59cb\u3002\u5bf9\u4e8e99%\u7684\u5f00\u53d1\u4eba\u5458\u6765\u8bf4\uff0c\u4ed6\u4eec\u7684\u5927\u90e8\u5206\u4ee3\u7801\u6c38\u8fdc\u4e0d\u9700\u8981\u6269\u5c55\u5230\u6570\u5343\u4eba\u6216\u6570\u5341\u4ebf\u7528\u6237\u7684\u7ec4\u7ec7\u3002\u8fd9\u4e9b\u5f00\u53d1\u4eba\u5458\u4e2d\u7684\u8bb8\u591a\u4eba\u7684\u4ee3\u7801\u57fa\u7840\u6bd4\u4ed6\u4eec\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u90fd\u8981\u8001\u3002\u8fd9\u4e9b\u7ec4\u7ec7\u4e2d\u7684\u5927\u591a\u6570\u5728\u5185\u90e8\u6ca1\u6709\u4e13\u95e8\u7684\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u6216\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u56e2\u961f\u3002\n\u539f\u59cb\u4ee3\u7801\u4e0d\u662f\u76ee\u6807\u2014\u2014\u76f8\u53cd\uff0c\u76ee\u6807\u662f\u5728\u5176\u4ed6\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u5c3d\u53ef\u80fd\u53ef\u9760\u548c\u5b89\u5168\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684\u516c\u53f8\u6ca1\u6709\u8de8\u591a\u4e2a\u4e91\u8fd0\u8425\uff0c\u6bcf\u5929\u90e8\u7f72\u6570\u767e\u4e2a\u66f4\u6539\uff0c\u90a3\u4e48\u50cfNetflix\u7684Spinnaker\u8fd9\u6837\u7684\u8fde\u7eed\u4ea4\u4ed8\u7cfb\u7edf\u53ef\u80fd\u662f\u4e0d\u5fc5\u8981\u7684\u3002\u7c7b\u4f3c\u5730\uff0c\u4e0e\u6ca1\u6709\u4e13\u5bb6\u56e2\u961f\u7684\u516c\u53f8\u76f8\u6bd4\uff0c\u62e5\u6709devops\u4e13\u5bb6\u3001\u77e5\u9053\u5982\u4f55\u8bbe\u7f6e\u548c\u7ef4\u62a4\u53ef\u89c2\u5bdf\u6027\u201c\u7535\u52a8\u5de5\u5177\u201d\u7684\u516c\u53f8\u7684\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u7684\u65f6\u95f4\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\n\u8ba4\u8bc6\u5230\u9700\u8981\u53d6\u5f97\u8fdb\u5c55\u2014\u2014\u4ece\u90a3\u4e9b\u6295\u5165\u6574\u4e2a\u56e2\u961f\u6765\u5b8c\u5584\u6d41\u7a0b\u7684\u516c\u53f8\u90a3\u91cc\u53ef\u4ee5\u5438\u53d6\u6559\u8bad\u2014\u2014\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b8c\u5584\u662f\u4e0d\u73b0\u5b9e\u7684\u3002\u4e0e\u5176\u5168\u76d8\u53d6\u6d88\u6d41\u7a0b\uff0c\u4e0d\u5982\u770b\u770b\u54ea\u4e9b\u6d41\u7a0b\u9002\u5408\u8d44\u6e90\u8f83\u5c11\u7684\u56e2\u961f\u548c\u76ee\u6807\u4e0d\u540c\u7684\u56e2\u961f\u3002\n\u4f8b\u5982\uff0c\u8fd9\u7bc7\u8c37\u6b4c\u535a\u5ba2\u6587\u7ae0\u63d0\u4f9b\u4e8660%\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u4e3a\u201c\u53ef\u63a5\u53d7\u201d\uff0c75%\u4e3a\u201c\u503c\u5f97\u79f0\u8d5e\u201d\uff0c90%\u4e3a\u201c\u6a21\u8303\u201d\u7684\u6307\u5bfc\u539f\u5219\u5982\u679c\u4f60\u662f\u4e00\u5bb6\u50cf\u8c37\u6b4c\u90a3\u6837\u6210\u719f\u7684\u516c\u53f8\uff0c\u62e5\u6709\u8c37\u6b4c\u5de5\u7a0b\u56e2\u961f\u7684\u89c4\u6a21\u548c\u624d\u5e72\uff0c\u8fd9\u53ef\u80fd\u662f\u6709\u9053\u7406\u7684\u3002\u4f46\u5bf9\u4e8e\u5927\u591a\u6570\u89c4\u6a21\u8f83\u5c0f\u3001\u5904\u4e8e\u65e9\u671f\u9636\u6bb5\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u4e0d\u7ba1\u516c\u53f8\u7684\u76ee\u6807\u662f\u4ec0\u4e48\uff0c\u5b9e\u9645\u7684\u6d4b\u8bd5\u8986\u76d6\u7387\u90fd\u4f1a\u4f4e\u5f97\u591a\u3002\u968f\u7740\u9762\u5411\u670d\u52a1\u7684\u4f53\u7cfb\u7ed3\u6784\u548c\u5916\u90e8API\uff08\u5728\u8c37\u6b4c\u4e4b\u5916\u66f4\u4e3a\u666e\u904d\u7684\u505a\u6cd5\uff09\u7684\u5174\u8d77\uff0c\u751f\u4ea7\u6d4b\u8bd5\u6b63\u5728\u6210\u4e3a\u4f20\u7edf\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u6280\u672f\u7684\u53ef\u884c\u66ff\u4ee3\u65b9\u6848\uff0c\u5728\u8fd9\u4e9b\u6280\u672f\u4e2d\uff0c\u201c\u4ee3\u7801\u8986\u76d6\u201d\u4f5c\u4e3a\u4e00\u4e2a\u6982\u5ff5\u662f\u6709\u610f\u4e49\u7684\u3002\n\u5728\u8bb8\u591a\u73b0\u4ee3\u7cfb\u7edf\u4e2d\uff0c\u6b63\u5982\u8702\u5de2\u8054\u5408\u521b\u59cb\u4ebaCharity Majors\u6240\u5199\uff0c\u201c\u4e00\u65e6\u90e8\u7f72\uff0c\u5c31\u4e0d\u518d\u6d4b\u8bd5\u4ee3\u7801\uff0c\u800c\u662f\u6d4b\u8bd5\u7cfb\u7edf\u2014\u2014\u7531\u7528\u6237\u3001\u4ee3\u7801\u3001\u73af\u5883\u3001\u57fa\u7840\u8bbe\u65bd\u548c\u65f6\u95f4\u70b9\u7ec4\u6210\u7684\u590d\u6742\u7cfb\u7edf\u3002\u201d\n\u4eba\u4eec\u5f88\u5bb9\u6613\u9677\u5165\u8fd9\u6837\u4e00\u4e2a\u9677\u9631\uff1a\u5047\u8bbe\u6f14\u793a\u548c\u4e0a\u7ebf\u90fd\u662f\u65e5\u590d\u4e00\u65e5\u4f7f\u7528\u4ea7\u54c1\u7684\u4f53\u9a8c\u7684\u8c61\u5f81\u3002\u4eba\u4eec\u5fc5\u987b\u76f8\u5bf9\u5feb\u901f\u5730\u505a\u51fa\u8d2d\u4e70\u65b0\u4ea7\u54c1\u7684\u51b3\u5b9a\uff0c\u56e0\u6b64\u6211\u4eec\u9ed8\u8ba4\u6839\u636e\u4ea7\u54c1\u7684\u6f14\u793a\u6765\u5224\u65ad\u4ea7\u54c1\u3002\n\u5f00\u53d1\u8005\u5de5\u5177\u5e1d\u56fd\u662f\u901a\u8fc7\u5de7\u5999\u7684GIF\u548c\u89c6\u9891\u526a\u8f91\u5efa\u7acb\u8d77\u6765\u7684\u3002\u5728\u51e0\u5206\u949f\u7684\u6f14\u793a\u4e4b\u540e\uff0c\u56e2\u961f\u4f1a\u81f4\u529b\u4e8e\u5f00\u53d1\u5de5\u5177\u2014\u2014\u6709\u65f6\u4f1a\u6301\u7eed\u6570\u5e74\u3002\u6295\u8d44\u8005\u6839\u636e\u6f14\u793a\u8fdb\u884c\u6295\u8d44\u3002\u5efa\u8bbe\u8005\u88ab\u544a\u77e5\u8981\u628a\u91cd\u70b9\u653e\u5728\u6f14\u793a\u4e0a\u2014\u2014\u4ee5\u53ca\u5728\u6f14\u793a\u4e4b\u540e\u7684\u524d60\u79d2\u4f7f\u7528\u2014\u2014\u4f5c\u4e3a\u4ea7\u54c1\u7684\u6210\u8d25\u90e8\u5206\u3002\u4f46\u662f\uff0c\u867d\u7136\u80fd\u591f\u5728\u6f14\u793a\u4e2d\u5f88\u597d\u5730\u6267\u884c\u53ef\u80fd\u610f\u5473\u7740\u56e2\u961f\u53ef\u4ee5\u5728\u65e5\u5e38\u4f7f\u7528\u4e2d\u6267\u884c\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\uff0c\u4f46\u8fd9\u4e24\u8005\u5e76\u4e0d\u4e00\u5b9a\u76f8\u5173\u3002\n\u5bf9\u4e8e\u5927\u591a\u6570\u503c\u5f97\u4ed8\u51fa\u4ee3\u4ef7\u7684\u5de5\u5177\u6765\u8bf4\uff0c\u5f00\u53d1\u4eba\u5458\u7ecf\u5386\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u2014\u2014\u4ee5\u53ca\u7ecf\u5386\u7684\u75db\u82e6\u2014\u2014\u90fd\u53d1\u751f\u5728\u4f7f\u7528\u7684\u7b2c\u4e00\u5206\u949f\u4e4b\u5916\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a\u3002\u9996\u5148\uff0c\u4e0e\u5f00\u53d1\u4eba\u5458\u7684\u65e5\u5e38\u5de5\u4f5c\u6d41\u7a0b\uff08\u4f8b\u5982\uff0c\u73b0\u6709\u7684\u4ee3\u7801\u5ba1\u67e5\u3001CI/CD\u5de5\u4f5c\u6d41\u7a0b\u548c\u534f\u4f5c\u6a21\u5f0f\uff09\u7684\u96c6\u6210\uff0c\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u6307\u6807\uff0c\u8868\u660e\u4e00\u4e2a\u4ea7\u54c1\u662f\u5426\u4f1a\u6bd4\u6700\u521d\u7684\u4ea7\u54c1\u66f4\u5177\u7c98\u6027\u3002\u4f8b\u5982\uff0c\u5f00\u53d1\u4eba\u5458\u5de5\u5177\u7684\u521b\u9020\u8005\u4eec\u90fd\u77e5\u9053\uff0c\u4e0eGitHub\u548cGitLab\u7684\u96c6\u6210\u5c06\u6709\u52a9\u4e8e\u4f7f\u60a8\u7684\u5de5\u5177\u66f4\u52a0\u6709\u7528\u548c\u5438\u5f15\u4eba\u3002\n\u7b2c\u4e8c\uff0c\u6709\u5f88\u591a\u79cd\u7c7b\u7684\u5de5\u5177\uff0c\u5b83\u4eec\u7684\u6709\u6548\u6027\u7684\u771f\u6b63\u6d4b\u8bd5\u4e0d\u4f1a\u5728\u7b2c\u4e00\u5929\u8fdb\u884c\u3002\u8c03\u8bd5\u5668\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u8c03\u8bd5\u5de5\u5177\u7bb1\u4e0d\u4ec5\u662f\u5f00\u53d1\u73af\u5883\uff0c\u800c\u4e14\u662fCI/CD\u73af\u5883\uff0c\u5b83\u662f\u5f71\u54cd\u5f00\u53d1\u4eba\u5458\u751f\u6d3b\u8d28\u91cf\u7684\u6700\u5173\u952e\u56e0\u7d20\u3002\u5f53\u60a8\u5728\u90e8\u7f72\u524d\u89e3\u51b3\u95ee\u9898\u65f6\uff0c\u60a8\u786e\u4fe1\u8be5\u95ee\u9898\u4e0d\u4f1a\u51fa\u73b0\u5728\u751f\u4ea7\u4e2d\u5417\uff1f\u5f53\u4f60\u56e0\u4e3a\u751f\u4ea7\u4e8b\u6545\u4e0d\u5f97\u4e0d\u52a0\u73ed\u6216\u4f11\u606f\u4e00\u5929\u65f6\uff0c\u4f60\u662f\u5426\u80fd\u591f\u5feb\u901f\u627e\u51fa\u6839\u672c\u539f\u56e0\u5e76\u63d0\u51fa\u6f5c\u5728\u7684\u89e3\u51b3\u65b9\u6848\uff1f\u7531\u4e8e\u8fd9\u4e9b\u5de5\u5177\u7684\u590d\u6742\u6027\u2014\u2014\u5e76\u4e14\u56e0\u4e3a\u5b83\u4eec\u901a\u5e38\u5728\u51fa\u73b0\u91cd\u5927\u95ee\u9898\u4e4b\u524d\u4e0d\u4f1a\u663e\u793a\u51fa\u5b83\u4eec\u7684\u672c\u6765\u9762\u76ee\u2014\u2014\u8c03\u8bd5\u5de5\u5177\u901a\u5e38\u4f1a\u56e0\u4e3a\u826f\u597d\u7684\u5f00\u53d1\u4eba\u5458\u4f53\u9a8c\u800c\u5f97\u5230\u6700\u5c11\u7684\u5ba3\u4f20\u548c\u56de\u62a5\u3002\n\u5de5\u5177\u5efa\u8bbe\u8005\u5f80\u5f80\u4e0d\u6210\u6bd4\u4f8b\u5730\u5173\u6ce8\u7b2c\u4e00\u5929\u7684\u4f53\u9a8c\uff0c\u8fd9\u662f\u56e0\u4e3a\u7528\u6237\u5982\u4f55\u8bc4\u4f30\u5de5\u5177\u3002\u6240\u4ee5\u6211\u8981\u7ed9\u8fd9\u91cc\u7684\u7528\u6237\u4e00\u4e2a\u7279\u522b\u7684\u63d0\u793a\u3002\u7528\u6237\u9700\u8981\uff1a\n\u5728\u4f60\u6216\u4f60\u7684\u5f00\u53d1\u56e2\u961f\u82b1\u65f6\u95f4\u65e5\u590d\u4e00\u65e5\u5730\u4f7f\u7528\u5de5\u5177\u4e00\u6bb5\u65f6\u95f4\u4e4b\u524d\uff0c\u4e0d\u8981\u4f7f\u7528\u90a3\u4e9b\u8ba9\u4f60\u627f\u8bfa\u7b7e\u8ba2\u5927\u578b\u5408\u540c\u7684\u5de5\u5177\u3002\n\u6839\u636e\u5bf9\u56e2\u961f\u751f\u4ea7\u529b\u81f3\u5173\u91cd\u8981\u7684\u4e0d\u90a3\u4e48\u201c\u6027\u611f\u201d\u7684\u7ef4\u5ea6\u5411\u5176\u4ed6\u4eba\u63a8\u8350\u5de5\u5177\uff0c\u4f8b\u5982\u5b83\u4eec\u5982\u4f55\u4e0e\u5de5\u4f5c\u6d41\u96c6\u6210\uff0c\u6216\u8005\u5b83\u4eec\u5982\u4f55\u51cf\u5c11\u56e2\u961f\u5185\u90e8\u548c\u56e2\u961f\u4e4b\u95f4\u7684\u534f\u4f5c\u6469\u64e6\u3002\n\u4eba\u4eec\u901a\u5e38\u8ba4\u4e3a\uff0c\u70ed\u95e8\u7684\u65b0\u8bed\u8a00\u6216\u6846\u67b6\u5c31\u662f\u67d0\u4eba\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684\u5168\u90e8\u3002\u5f00\u53d1\u8005\u548c\u5f00\u53d1\u8005\u5f71\u54cd\u8005\u90fd\u4f1a\u5ba3\u4f20\u65b0\u7684\u5de5\u5177\uff0c\u5c31\u597d\u50cf\u5b83\u4eec\u662f\u552f\u4e00\u88ab\u4f7f\u7528\u7684\u5de5\u5177\u4e00\u6837\uff1a\u4f8b\u5982\uff0c\u5fae\u670d\u52a1\u67b6\u6784\u3001GraphQL\u548c\u57fa\u4e8eOpenTelemetry\u7684\u53ef\u89c2\u5bdf\u6027\u8ddf\u8e2a\u3002\u201c\u4e00\u4e2a\u771f\u6b63\u7684\u6846\u67b6\u201d\u5e03\u9053\u9690\u542b\u5730\u5047\u8bbe\uff0c\u7ec4\u7ec7\u6709\u53ef\u80fd\u8f6c\u5411\u4f7f\u7528\u5168\u65b0\u7684\u8bed\u8a00\u3001\u5de5\u5177\u6216\u6846\u67b6\u3002\n\u6211\u9047\u5230\u8fc7\u5f88\u591a\u56e2\u961f\uff0c\u4ed6\u4eec\u8bf4\u8fc1\u79fb\u5c06\u5728\u201c\u4e0b\u4e00\u5b63\u5ea6\u201d\u8fdb\u884c\u73b0\u5b9e\u60c5\u51b5\u662f\uff0c\u5373\u4f7f\u8fc1\u79fb\u6700\u7ec8\u6210\u529f\u5f00\u59cb\uff0c\u8fc1\u79fb\u4e5f\u5df2\u7ecf\u53d8\u6210\u4e86\u8fde\u7eed\u7684\u8fc7\u7a0b\uff0c\u800c\u4e0d\u662f\u79bb\u6563\u7684\u8fc7\u7a0b\u3002\u4e00\u4e2a\u62e5\u670999%\u9057\u7559\u4ee3\u7801\u7684\u5f00\u53d1\u56e2\u961f\u548c\u4e00\u4e2a\u7cbe\u5e72\u7684\u56e2\u961f\u53ef\u80fd\u6c38\u8fdc\u4e0d\u4f1a\u5c06\u4ed6\u4eec\u7684\u6574\u4e2a\u4ee3\u7801\u5e93\u8f6c\u6362\u4e3a\u5fae\u670d\u52a1\u6216GraphQL\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7ec4\u7ec7\u6765\u8bf4\uff0c\u6280\u672f\u5806\u6808\u548c\u5de5\u5177\u94fe\u662f\u5f02\u6784\u7684\uff0c\u662f\u591a\u5e74\u6765\u9010\u6e10\u5f62\u6210\u7684\u8bed\u8a00\u3001\u6846\u67b6\u548c\u5de5\u5177\u5c42\u7684\u7ec4\u5408\u3002\n\u6211\u4eec\u9047\u5230\u7684\u8bb8\u591a\u56e2\u961f\u90fd\u4f1a\u544a\u8bc9\u6211\u4eec\uff0c\u4ed6\u4eec\u5f00\u59cb\u91c7\u7528\u5fae\u670d\u52a1\u3001GraphQL\u6216OpenTelemetry\u3002\u5f53\u6211\u95ee\u4ed6\u4eec\u5728\u65b0\u6846\u67b6\u5185\u5df2\u7ecf\u63d0\u4f9b\u4e86\u591a\u5c11\u670d\u52a1\u65f6\uff0c\u7b54\u6848\u5f80\u5f80\u5f88\u5c0f\uff0c\u5c24\u5176\u662f\u5bf9\u4e8e\u51e0\u5e74\u4ee5\u4e0a\u7684\u7ec4\u7ec7\u3002\u5176\u4e2d\u4e00\u4e9b\u7ec4\u7ec7\u4f1a\u544a\u8bc9\u6211\uff0c\u4ed6\u4eec\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5e0c\u671b\u8f6c\u6362\u6574\u4e2a\u4ee3\u7801\u5e93\u3002\uff08\u4f8b\u5982\uff0c\u7ec4\u7ec7\u5c06\u671f\u671b\u4e0e\u5fae\u670d\u52a1\u4e00\u8d77\u7ef4\u62a4\u5176\u9057\u7559\u7684\u6574\u4f53\uff0c\u6216\u4e0eGraphQL\u7aef\u70b9\u4e00\u8d77\u7ef4\u62a4REST\u548cgRPC\u7aef\u70b9\u3002\uff09\u5bf9\u4e8e\u8bb8\u591a\u5176\u4ed6\u7ec4\u7ec7\u6765\u8bf4\uff0c\u5f53\u6211\u7a0d\u540e\u67e5\u770b\u4e00\u4e9b\u5b63\u5ea6\u65f6\uff0c\u4ed6\u4eec\u5728\u8ba1\u5212\u7684\u8fc1\u79fb\u4e2d\u5f80\u5f80\u6ca1\u6709\u9884\u671f\u7684\u90a3\u4e48\u987a\u5229\u2014\u2014\u4ed6\u4eec\u751f\u6d3b\u5728\u8de8\u5404\u79cd\u6846\u67b6\u548c\u5de5\u5177\u7ef4\u62a4\u8f6f\u4ef6\u7684\u73b0\u5b9e\u4e2d\u3002\n\u8f6f\u4ef6\u8d2d\u4e70\u8005\uff0c\u4ece\u4e2a\u4eba\u5f00\u53d1\u8005\u5230\u8463\u4e8b\u548c\u9996\u5e2d\u4fe1\u606f\u5b98\uff0c\u90fd\u77e5\u9053\u5b58\u5728\u5f02\u8d28\u6027\u3002\u4f46\u5b8c\u5168\u63a5\u53d7\u8fd9\u4e00\u70b9\u610f\u5473\u7740\uff1a\n\u63a5\u53d7\u7f13\u6162\u7684\u8fc1\u79fb\u3002\u6211\u9047\u5230\u8fc7\u8bb8\u591a\u56e2\u961f\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u4e00\u65e6\u5b8c\u6210\u4ece\u8fc7\u65f6\u7684\u5de5\u5177X\u5230\u70ed\u95e8\u7684\u65b0\u5de5\u5177Y\u7684\u8fc1\u79fb\uff0c\u4ed6\u4eec\u7684\u95ee\u9898\u5c31\u4f1a\u5f97\u5230\u89e3\u51b3\uff0c\u6bcf\u4e2a\u56e2\u961f\u90fd\u751f\u6d3b\u5728\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u751f\u6001\u7cfb\u7edf\u4e2d\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u70ed\u95e8\u7684\u65b0\u5de5\u5177\u662fZ\u4e4b\u524d\uff0c\u5230\u5de5\u5177X\u7684\u8fc1\u79fb\u53ef\u80fd\u4e0d\u4f1a\u5b8c\u6210\u2014\u2014\u73b0\u5728\u53c8\u51fa\u73b0\u4e86\u4e24\u4e2a\u751f\u6001\u7cfb\u7edf\u95ee\u9898\u3002\n\u63a5\u53d7\u9057\u7559\u5b50\u7cfb\u7edf\u3002\u6211\u9047\u5230\u8fc7\u8bb8\u591a\u56e2\u961f\uff0c\u4ed6\u4eec\u4e13\u6ce8\u4e8e\u56f4\u7ed5\u7cfb\u7edf\u7684\u66f4\u65b0\u90e8\u5206\u521b\u65b0\u5de5\u5177\u7bb1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u9057\u7559\u5b50\u7cfb\u7edf\u5e76\u6ca1\u6709\u6d88\u5931\u2014\u2014\u800c\u4e14\u4e3a\u5b83\u4eec\u63d0\u4f9b\u7684\u5de5\u5177\u66f4\u5c11\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u60a8\u6709\u66f4\u957f\u7684\u5206\u7c7b\u548c\u8c03\u8bd5\u65f6\u95f4\u3002\n\u63a5\u53d7\u60a8\u7684API\u4e0d\u592a\u53ef\u80fd\u5728GraphQL\u4e0a\u805a\u5408\uff0c\u8fd9\u5c06\u5bfc\u81f4\u60a8\u6295\u8d44\u4e8e\u66f4\u53ef\u6301\u7eed\u7684\u591aAPI\u534f\u8bae\u5de5\u5177\u3002\u8ba4\u8bc6\u5230\u60a8\u7684\u7ec4\u7ec7\u53ef\u80fd\u4e0d\u4f1a\u5c06\u5176\u6240\u6709\u9057\u7559\u7684monolith\u8f6c\u6362\u4e3a\u5fae\u670d\u52a1\uff0c\u8fd9\u5c06\u5141\u8bb8\u60a8\u6295\u8d44\u4e8e\u4e0d\u4f1a\u5ffd\u7565\u5bf9monolith\u6216\u5fae\u670d\u52a1\u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u76d1\u89c6\u548c\u8c03\u8bd5\u7684\u5de5\u5177\u3002\n\u5728\u5efa\u8bbe\u8005\u65b9\u9762\uff0c\u4f20\u7edf\u667a\u6167\u8ba4\u4e3a\uff0c\u4f60\u52aa\u529b\u8ffd\u6c42\u201c\u571f\u5730\u201d\u7684\u540c\u8d28\u6027\uff0c\u800c\u62e5\u62b1\u201c\u6269\u5c55\u201d\u7684\u5f02\u8d28\u6027\u4f60\u662f\u5426\u8ba1\u5212\u5f02\u8d28\u6027\u5c06\u6781\u5927\u5730\u5f71\u54cd\u4f60\u7684\u6269\u5f20\u901f\u5ea6\u3002\u67d0\u4e9b\u7c7b\u578b\u7684\u5f00\u53d1\u5de5\u5177\u9700\u8981\u4e3a\u6bcf\u79cd\u65b0\u8bed\u8a00\u6216\u6846\u67b6\u5b9a\u5236\u3002\u4f8b\u5982\uff0c\u4ec5\u4e3aGraphQL API\u63d0\u4f9b\u6d1e\u5bdf\u7684\u5de5\u5177\u53ef\u80fd\u4e0d\u5bb9\u6613\u6269\u5c55\u5230\u5176\u4ed6\u7c7b\u578b\u7684API\uff0c\u5c24\u5176\u662f\u56e0\u4e3aGraphQL\u5305\u542b\u7684\u4fe1\u606f\u6bd4REST\u6216gRPC\u66f4\u4e30\u5bcc\u3002\n\u5176\u4ed6\u7c7b\u578b\u7684\u5f00\u53d1\u5de5\u5177\u53ef\u4ee5\u8f7b\u677e\u5730\u8de8\u8bed\u8a00\u548c\u6846\u67b6\u6269\u5c55\u3002\u53ea\u9700\u8981\u80fd\u591f\u4ece\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u8c03\u7528\u7684SaaS\u5de5\u5177\u652f\u6301\u8bed\u8a00\u5f02\u6784\u6027\uff0c\u56e0\u4e3a\u4e0d\u5fc5\u7ffb\u8bd1\u4e3b\u8981\u6838\u5fc3\u7ec4\u4ef6\u6765\u652f\u6301\u6bcf\u79cd\u65b0\u8bed\u8a00\u3002\n\ud83d\uded1 \u4e0d\u8981\u518d\u8ba4\u4e3a\u8f6f\u4ef6\u662f\u7531\u5c11\u6570\u4e0d\u5177\u4ee3\u8868\u6027\u7684\u516c\u53f8\u7edf\u4e00\u4ee3\u8868\u7684", "note_en": "Should you move to serverless? Is GraphQL the answer to your API woes? Should you follow the latest DevOps playbook to increase your system reliability? In the world of tech tools, there\u2019s a lot of buzz. But it doesn\u2019t always reflect the daily reality of programmers.\n As the founder of a developer tools startup, I\u2019ve talked with hundreds, if not thousands, of software developers over the last few years in the course of routine user research. The common theme in these conversations, even bigger than the need for the product we were building, was an overarching need that is currently underserved: building for   real developers , or what I like to call the  99% Developers .\n These are developers who are getting work done outside of the hip companies and frameworks, who often get neglected in conversations about \u201cwhat developers want.\u201d There\u2019s a   huge  gap between what \u201cdeveloper-influencers\u201d are talking about, and the daily reality of most developers. When you look at what gets covered by the tech media, or the speakers at top tech conferences, it\u2019s often people from high-growth darlings like Airbnb or Stripe, or established, highly profitable companies like the FAANGs.\n In fact, there\u2019s a longstanding assumption that companies, outside of a small number of Silicon Valley unicorns, should aspire to have the processes of a \u201cbaby FAANG.\u201d But this is increasingly not true. Our users would tell us, often sheepishly, that their practices look nothing like what they are \u201csupposed to.\u201d But for these \u201cdark matter developers,\u201d as   Microsoft\u2019s Scott Hanselman calls them , the practices of a Facebook or a Pinterest don\u2019t make sense. Their user needs are different and their team needs are different.\n It matters to talk about the 99% Developers because these are the developers building the software that powers our lives \u2014 insurance, health care, retail, and banking, just to name a few. It\u2019s not only small companies that can\u2019t easily adopt the processes of modern, tech-first companies; it\u2019s most companies that were not built around technology and that have decades of legacy software practices firmly in place. Many of these companies move around quite a bit of money. Many of these companies handle quite a bit of our personal data. If technology innovations are not benefiting these software teams, we\u2019re losing out on a lot of meaningful improvements to everyone\u2019s quality of life.\n In this piece, I\u2019ll present some truths that both enterprise software buyers and builders can embrace to dispel harmful myths and improve developer experience for all.\n   Because a disproportionate amount of writing and tooling comes from companies like Facebook, Netflix, LinkedIn, Google, and Amazon, many people assume there\u2019s a trickle-down effect: Great engineers at companies with money to burn come up with good solutions to problems everyone else will have someday. It\u2019s simply a matter of time until your typical small-to-medium business or Fortune 500 company experiences the same issues as Amazon or Facebook.\n  A FAANG-like company is different from an SMB or your typical Fortune 500 company along many dimensions, including scale needs, stance on building vs. buying, and makeup of the engineering team. A small number of large, well-capitalized companies have entire teams with world experts dedicated to observability, testing, developer productivity, and more. On top of this, it\u2019s worth noting that FAANGs are optimizing around a small set of products that are digital from the start, something that\u2019s not true of most software shops out there.\n Many non-FAANG teams have a small non-expert team, or even a fraction of a non-expert engineer, to do things that FAANG-like companies have multiple teams of experts to do. These organizations rely primarily on external tools and services that they have little bandwidth for customizing.\n  First, the tech industry needs to acknowledge that organizations operating at different scales and with different engineering budgets are going to have different needs. A company that serves in the low millions of user requests per day doesn\u2019t need to optimize its systems to the degree of a Netflix or a Google. Most companies do not have the latency, data storage, and other concerns that would lead them to write their own bespoke infrastructure components and tools like, for example, Facebook did with its   Tao data store  and   Hive data warehousing tool  \u2014 and they likely don\u2019t have concerns that would warrant them even using such tools.\n Acknowledging different demands will make space to talk about diverse needs across a wide range of organizations. For instance, companies with legacy systems that can\u2019t afford to migrate to the newest architectures need to adopt new tools differently than newer companies, or companies that can dedicate a team to a large migration.\n Recognizing that there isn\u2019t a single aspirational company profile can help builders reach outside of the usual suspects when understanding users. This is crucial for bridging the gap between software needs and software tools in an achievable way.\n Spot on by  @jeanqasaur. Eg big tech invests big time in internal platform teams that are rarely present elsewhere.\n Example: at Uber the mobile platform team identified slow-running tests *that my team wrote/owned* &amp; pinged us on how we should fix it.\n    If you watch enough conference talks or read enough blog posts, it would appear there are many software teams out there with pristine coding standards, non-flaky unit tests, staging environments that reflect production environments, and/or smooth people processes for responding to incidents. Getting to this point just requires a strong directive from above and discipline across engineering teams.\n  Just like influencers in any other field, developer-influencers often describe a reality that is aspirational even for their own companies. It may be true that people writing about ideal processes live in an idealized situation where it\u2019s possible, in which case they\u2019re the exception that provides the rule. But most of the time \u2014 even if it\u2019s true in one part of an organization or at one moment in time \u2014 this reality does not hold across their entire company and forever more.\n For instance, Spotify admitted that   their lionized approach to DevOps did not scale once their team reached a certain size . We also see examples of companies adopting the new hot technology and then reverting when things didn\u2019t work as well as planned \u2014 for instance,   Segment switching from microservices back to a monolith .\n  As the audience powering all of this, developers should be more critical in asking for the truth. We should welcome posts about \u201creal software process\u201d as much as we are hungry for the idealized content. If someone is working in an idealized process, with a world-class ops team and whole teams of people who exist to support improved software quality, the audience should be made aware of this! And we should welcome more talks, blog posts, and books that give guidance for \u201creal software environments\u201d: what coding, testing, and shipping looks like with short-staffed teams, teams without dedicated devops experts, and teams where everyone who originally built the system has left.\n Another little secret: a lot of what most \u201cdeveloper influencers\u201d say is fairly aspirational.\n Their own companies don\u2019t necessarily do things as smoothly as they preach to others.\n This is especially true at larger companies where the culture might vary vastly between orgs/teams  https://t.co/FW2aI8lppu\n    Too many people believe that aiming for good software quality means you need to fully adopt that new technology, whether it\u2019s microservices, GraphQL, or distributed tracing. You\u2019re not done until you\u2019ve switched fully over to the ideal technology.\n  Today, the mismatch between where \u201creal developer\u201d teams are and the mainstream advice given out means that many teams don\u2019t know where to start when it comes to improving code quality or system reliability. For the 99% Developer, most of their code will never need to scale to an organization of thousands, or to billions of users. Many of these developers work on code bases older than the length of their entire careers. Most of these organizations don\u2019t have dedicated developer tools or developer-productivity teams internally.\n Pristine code is not the goal \u2014 rather, the goal is code that is as reliable and secure as it makes sense to be, given other constraints. For instance, if your company does not operate across multiple clouds deploying hundreds of changes a day, a continuous delivery system like Netflix\u2019s   Spinnaker  is likely unnecessary. Similarly, developers at a company with devops experts who know how to set up and maintain observability \u201cpower tools\u201d will likely have a much better time with those tools than a company without an expert team in place.\n  Recognize that there is progress to be made \u2014 there are lessons to be learned from companies that have devoted entire teams to perfecting their processes \u2014 but perfection in most cases is unrealistic. Rather than lifting processes wholesale, see which ones translate well to teams with fewer resources and teams with different goals.\n For instance,   this Google blog post  provides the guideline of 60% test coverage as \u201cacceptable,\u201d 75% as \u201ccommendable,\u201d and 90% as \u201cexemplary.\u201d When you\u2019re a company of Google\u2019s maturity, with the size and caliber of Google\u2019s engineering team, this may make sense. But for most smaller, earlier-stage companies, the actual test coverage is going to be far less despite what the company might aim for. And with the rise of service-oriented architectures and external APIs \u2014 practices that are much more prevalent outside of Google \u2014   testing in production  is becoming a viable alternative to the traditional unit- and integration-testing techniques where \u201ccode coverage\u201d makes sense as a concept.\n In many of these modern systems, as   Honeycomb co-founder Charity Majors wrote , \u201cOnce you deploy, you aren\u2019t testing code anymore, you\u2019re testing systems \u2014 complex systems made up of users, code, environment, infrastructure, and a point in time.\u201d\n   It\u2019s too easy to fall into the trap of assuming that demos and onboarding are indicative of the experience of using a product day in and day out. People have to make buying decisions about new products relatively quickly, so we\u2019ve defaulted to judging a product by its demo.\n  Developer tool empires are built through slick gifs and video clips. Teams commit to tools \u2014 sometimes for years \u2014 after a few minutes of demo. Investors invest based on demos. Builders are told to focus on the demo \u2014 and, after that, the first 60 seconds of use \u2014 as the make-or-break parts of the product. But while being able to execute well on a demo   might  suggest that the team   can  execute on developer experience in day-to-day use, the two aren\u2019t necessarily correlated.\n It should not be a surprise that with most tools worth their price tags, most of what a developer experiences \u2014 and experiences pain around \u2014 occurs outside of the first minute of use. First, integrations with developers\u2019 day-to-day-workflows (for instance, existing code review, CI/CD workflows, and modes of collaboration) is a better indicator of whether a product will be sticky than are initial delighters. It\u2019s well-known among developer tools creators, for example, that integrating with GitHub and GitLab will help make your tool much more useful and appealing.\n Second, there are whole classes of tools where the true test of their effectiveness doesn\u2019t happen on Day 1. One example is debuggers. More than your development environment and more than your CI/CD environment, your debugging toolbox is the most crucial factor to your quality of life as a developer. When you fix an issue before you deploy, are you confident that the issue won\u2019t appear in production? When you have to work late or on a day off because of a production incident, are you able to quickly identify the root cause and come up with potential fixes? Because of the complexity of these tools \u2014 and because they often don\u2019t show their true colors until you   have  a major issue \u2014 debugging tools often get the least hype and the least reward for good developer experience.\n  The reason tool builders often disproportionately focus on the Day 1 experience is because of how users evaluate tools. So I\u2019m going to give a special callout to users here. Users need to:\n Push back on tools that get you to commit to big contracts before you or your developer team have spent time working with the tool day in and day out for some period of time.\n Recommend tools to other people based on the less \u201csexy\u201d dimensions that are key to your team\u2019s productivity, such as how they integrate with workflows, or how they reduce collaboration friction within and across teams.\n    There\u2019s often the assumption that the hot new language or framework is all that exists in someone\u2019s system. Developers and developer-influencers alike will evangelize new tools as if those are the   only  tools being used: for instance, microservice architectures, GraphQL, and OpenTelemetry-based tracing for observability. \u201cOne true framework\u201d evangelism implicitly assumes that it\u2019s possible for organizations to switch over to using entirely that new language, tool, or framework.\n  I\u2019ve encountered so many teams who say that migration will happen \u201cnext quarter.\u201d The reality is that, even when they manage to finally start, migrations have become continuous, rather than discrete, processes. A 99% Developer team with legacy code and a lean team is probably never going to convert their entire code base over to microservices or GraphQL. For most organizations, tech stacks and tool chains are heterogeneous,  a combination of the layers of languages, frameworks, and tools that have been picked up over the years.\n Many of the teams we encounter will tell us that they\u2019re starting to adopt microservices or GraphQL or OpenTelemetry. When I ask them how much of their services are within the new framework already, the answer will often be quite small, especially for organizations older than a few years. Some of these organizations will tell me that they realistically don\u2019t expect to convert their entire code base. (For example, organizations will expect to maintain their legacy monolith alongside microservices, or REST and gRPC endpoints along with GraphQL endpoints.) For many other organizations, when I check some quarters later, they are often less far along in the planned migration than expected \u2014 and living with the reality of maintaining software across a mix of frameworks and tools.\n  Software buyers, from individual developers to directors and CIOs, know heterogeneity exists. But fully accepting this means:\n Accepting slow migrations.  I\u2019ve come across many teams that assume their problems will be solved once they finish migrating from outdated tool X to hot new tool Y, each of which lives in its own solution ecosystem. Unfortunately, the migration to tool X may not finish until the hot new tool is Z \u2014 and now you have the two-ecosystem problem again.\n Accepting legacy subsystems.  I\u2019ve come across many teams that focus on innovating their toolbox around the newer parts of their system. Unfortunately, the legacy subsystems aren\u2019t going away \u2014 and having less tooling for them means you have longer triage and debug times when something goes wrong.\n Accepting that your APIs are unlikely to converge on GraphQL will lead you to invest in more sustainable, multi-API protocol tooling. Recognizing that your org is probably not going to convert all of its legacy monolith to microservices will allow you to invest in tooling that does not neglect monitoring and debugging code in either the monolith or the microservices.\n On the builder side, it\u2019s conventional wisdom that you go hard after homogeneity for the \u201cland\u201d and embrace heterogeneity for the \u201cexpand.\u201d Whether you plan for heterogeneity will greatly impact how quickly you can expand. Certain kinds of developer tools need to be custom-built for each new language or framework. For instance, a tool that provides insights only for GraphQL APIs may not easily expand to other kinds of APIs, especially because GraphQL contains more rich information than do REST or gRPC.\n Other kinds of developer tools can expand across languages and frameworks easily. A SaaS tool that simply needs to be able to be called from different programming languages supports language heterogeneity, as major core components do not have to be translated to support each new language.\n \ud83d\uded1 Stop thinking of software as homogeneously represented by a small number of unrepresentative companies", "posttime": "2022-02-17 15:36:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u5f00\u53d1\u5546,building,\u5de5\u5177", "title": "\u4e3a99%\u7684\u5f00\u53d1\u5546\u5efa\u9020", "title_en": "Building for the 99% Developers", "transed": 1, "url": "https://future.a16z.com/software-development-building-for-99-developers/", "via": "", "real_tags": ["\u5f00\u53d1", "\u5f00\u53d1\u5546", "building", "\u5de5\u5177"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073856, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bc6\u7801\uff1a\nSHA-256\u54c8\u5e0c\uff1a", "note_en": "password:\n    SHA-256 hash:", "posttime": "2022-02-17 15:36:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bc6\u7801,passwordle", "title": "\u5bc6\u7801", "title_en": "Passwordle", "transed": 1, "url": "https://rsk0315.github.io/playground/passwordle.html", "via": "", "real_tags": ["\u5bc6\u7801"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073855, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u968f\u7740\u65b0\u7684\u4e00\u5e74\u7684\u5f00\u59cb\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u65b0\u7684\u8d8b\u52bf\u63cf\u7ed8Linux\u8f6f\u4ef6\u3002Fosh\u53ca\u5176\u65b0\u54c1\u724clibadwaita\u3001KDE\u548c#39\uff1bs Kirigami\u548cMaui Shell\u8868\u660e\u2014\u2014\u4e0d\u7ba1\u4f60\u559c\u4e0d\u559c\u6b22\u2014\u2014\u878d\u5408Linux\u5e94\u7528\u7a0b\u5e8f\u7684\u65f6\u4ee3\u624d\u521a\u521a\u5f00\u59cb\u3002\n\u6bd5\u7adf\uff0c\u4e00\u65e6\u5f00\u59cb\u5e73\u94fa\u7a97\u53e3\uff0c\u5373\u4f7f\u662f\u7b14\u8bb0\u672c\u7535\u8111\u5c4f\u5e55\u4e5f\u4e0d\u4f1a\u592a\u5927\uff0c\u79fb\u52a8\u5e94\u7528\u548c\u684c\u9762\u5e94\u7528\u4e4b\u95f4\u7684\u5355\u4e00\u4ee3\u7801\u5e93\u4e0d\u4ec5\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u66f4\u5e7f\u6cdb\u7684\u7528\u6237\u57fa\u7840\uff0c\u4f46\u662f\uff0c\u8ba9windows\u5b8c\u7f8e\u5730\u9002\u5e94\u5c4f\u5e55\u4e0a\u7684\u5c0f\u65b9\u5757\uff0c\u5373\u4f7f\u5bf9\u4e8e\u90a3\u4e9b\u8fd8\u6ca1\u6709\u8ba1\u5212\u5728\u57fa\u4e8e\u89e6\u6478\u5c4f\u7684\u8bbe\u5907\u4e0a\u4f7f\u7528\u4f01\u9e45\u64cd\u4f5c\u7cfb\u7edf\u7684\u4eba\u6765\u8bf4\uff0c\u4e5f\u5f88\u6709\u8bf1\u60d1\u529b\u3002\n\u6b64\u5916\uff0c\u5404\u79cd\u80fd\u591f\u5728\u5e94\u7528\u7a0b\u5e8f\u4e0a\u5b9e\u73b0\u878d\u5408\u7684\u9879\u76ee\u6b63\u5728\u5feb\u901f\u589e\u957f\uff0cKDE\u3001GNOME\u3001Nitrux\u3001Elementary\u548cKingling\u7b49\u90fd\u5728\u4e3aLinux\u7684\u672a\u6765\u8f6c\u79fb\u5bf9\u652f\u6301\u79fb\u52a8\u548c\u89e6\u6478\u53cb\u597d\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u5174\u8da3\u3002\n\u5982\u6b64\u591a\u7684\u65b0Linux\u5e94\u7528\u7a0b\u5e8f\u4f3c\u4e4e\u81ea\u7136\u800c\u7136\u5730\u53d6\u5f97\u4e86\u60ca\u4eba\u7684\u6210\u679c\uff0c\u800c\u4e14\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\uff0c\u636e\u62a5\u9053\u7f3a\u4e4f\u65b0\u7684\u81ea\u7531\uff0f\u5f00\u6e90\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u6210\u679c\u7684\u589e\u52a0\u7ec8\u4e8e\u4e0e\u81ea\u7531\u8f6f\u4ef6\u754c\u9762\u4e11\u964b\u7684\u523b\u677f\u5370\u8c61\u80cc\u9053\u800c\u9a70\uff0c\u81ea\u7531\u8f6f\u4ef6\u754c\u9762\u5177\u6709\u6700\u5148\u8fdb\u7684\u53ef\u7528\u6027\u3001\u6e05\u6670\u800c\u73b0\u4ee3\u7684\u7528\u6237\u4f53\u9a8c\u7ebf\uff0c\u518d\u52a0\u4e0a\u529f\u80fd\u9f50\u5168\u7684\u4f53\u9a8c\uff0c\u4e0d\u7ba1\u5c4f\u5e55\u5927\u5c0f\u3002\u8fd9\u662fLinux\u53f0\u5f0f\u673a\u4e4b\u95f4\u7f55\u89c1\u7684\u3001\u5c3d\u7ba1\u662f\u95f4\u63a5\u7684\u5408\u4f5c\u7684\u7ed3\u679c\uff0c\u9886\u5148\u7684UX\u8bbe\u8ba1\u5e08\u81f4\u529b\u4e8e\u5c06Linux\u8f6f\u4ef6\u7684\u53ef\u7528\u6027\u63d0\u5347\u5230\u6700\u7cbe\u7ec6\u7684\u7ec6\u8282\uff1aGNOME&#39\uff1bs\u4e13\u6ce8\u7684\u7528\u6237\u4f53\u9a8c\u56e2\u961f\uff0c\u4ee5\u53caSophie Herold\u3001KDE\u548c#39\u7b49\u8bbe\u8ba1\u5e08\uff1b\u4e39\u59ae\u5c14\u548cE.C. VeNeNANDI\u6b63\u5728\u8ffd\u8e2a\u65b0\u7684\u8f6f\u4ef6\u6307\u5357\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u5728\u5546\u4e1a\u8f6f\u4ef6\u4e2d\u7684\u5730\u4f4d\u901a\u5e38\u662f\u8d85\u5e38\u7684\u3002\n\u4f8b\u5982Flathub\uff0c\u6bcf\u5929\u90fd\u4f1a\u51fa\u73b0\u4f7f\u7528\u6700\u73b0\u4ee3\u5de5\u5177\u5305\u548cUX\u7b56\u7565\u7684\u65b0\u5e94\u7528\u7a0b\u5e8f\uff0c\u63d0\u4f9b&#34\uff1b\u53ea\u662f\u5de5\u4f5c&#34\uff1b\u4e0e2012\u5e74\u5de6\u53f3\u82f9\u679c\uff08Apple#39\uff1b\u82f9\u679c\u5e94\u7528\u5546\u5e97\u3002\u8fd9\u9f13\u52b1\u4e86\u8f6f\u4ef6\u4e4b\u95f4\u7684\u6fc0\u70c8\u7ade\u4e89\uff0c\u5e76\u4e14\u6db5\u76d6\u4e86\u5927\u591a\u6570\u7f3a\u5c11\u53ef\u7528\u6027\u7684\u5c0f\u7528\u4f8b\u3002\n\u5b9e\u73b0\u8fd9\u4e00\u70b9\u7684\u5de5\u5177\u5305\u9996\u5148\u662f\u57fa\u4e8eQt\u7684MauiKit\u548cGNOME&#39\uff1b\u5b83\u4e3aLinux\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6781\u5feb\u7684\u5de5\u4f5c\u6d41\u7a0b\uff0c\u800c\u6211\u4eec\u552f\u4e00\u4ecd\u7136\u6000\u5ff5\u7684\u53ef\u80fd\u662f\u4e00\u4e2a\u5c0f\u578b\u7684\u3001\u8d44\u6e90\u9ad8\u6548\u7684\u4f4e\u7aef\u8bbe\u5907\u5de5\u5177\u5305\u3002\u5728Linux\u4e0a\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u7684\u901f\u5ea6\u548c\u6253\u5f00GNOME\u4e00\u6837\u5feb\uff1bs\uff08\u6709\u4e9b\u65b0\uff09Builder IDE\uff0c\u7528\u591a\u79cd\u8bed\u8a00\u5728\u57fa\u7840\u6a21\u677f\u4e0a\u7f16\u7a0b\u903b\u8f91\uff0c\u5e76\u901a\u8fc7Flatpak\u548c\u5e94\u7528\u5546\u5e97\u8fdb\u884c\u90e8\u7f72\u3002\u518d\u6b21\u6bd4\u8f83\u4e00\u4e0b\uff0c\u8fd9\u4e0e2009\u5e74\u524d\u540e\u7684Xcode\u975e\u5e38\u76f8\u4f3c\uff0c\u5c3d\u7ba1\u56e2\u961f\u89c4\u6a21\u5927\u5927\u7f29\u5c0f\u3002\u4f46\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u81ea\u7531\u548c\u5f00\u653e\u6e90\u7801\u8f6f\u4ef6\u7684\u53f0\u5f0f\u673a\u57fa\u672c\u4e0a\u90fd\u662f\u7531\u5fd7\u613f\u8005\u6574\u4f53\u7ef4\u62a4\u7684\uff0c\u56e0\u6b64\u5411\u53c2\u8003\u73af\u5883\u6350\u6b3e\u5c06\u9f13\u52b1\u4eba\u4eec\u4ece\u4e8b\u65b0\u9879\u76ee\u7684\u5de5\u4f5c\u3002\n\u6b63\u5982\u4e00\u81f4\u7684\u6837\u672c\u6240\u793a\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\u662f\u4e00\u4e2a\u603b\u4f53\u65b9\u5411\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6682\u65f6\u7684\u8d8b\u52bf\u3002\u6211\u4eec\u6b63\u5728\u4e3a\u878d\u5408\u5efa\u7acb\u5f3a\u5927\u7684\u6280\u672f\u57fa\u7840\uff0c\u6211\u4eec\u9884\u8ba1\u672a\u67655\u523010\u5e74\u5f00\u53d1\u7684\u5927\u591a\u6570Linux\u8f6f\u4ef6\u90fd\u5c06\u9075\u5faa\u8fd9\u4e9b\u6307\u5bfc\u539f\u5219\u548c\u6838\u5fc3\u601d\u60f3\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e0eWindows Phone\u7b49\u4e0d\u6210\u529f\u7684\u8fc7\u53bb\u793a\u4f8b\u4e0d\u540c\uff0cWindows Phone\u4ee5\u76f8\u540c\u7684\u5e02\u573a\u540d\u79f0\u9500\u552e\u4e0d\u540c\u7684\u4ee3\u7801\u57fa\uff0c\u4f46\u517c\u5bb9\u6027\u975e\u5e38\u6709\u9650\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5df2\u7ecf\u5904\u4e8e\u771f\u6b63\u7684\u878d\u5408\u70b9\uff0c\u4efb\u4f55\u5c1d\u8bd5Linux\u624b\u673a\u7684\u4eba\u90fd\u4f1a\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5e0c\u671b\u8fd9\u5c06\u7ed3\u675f\u7531iPhone\u542f\u53d1\u7684\u4f20\u7edf\u8d8b\u52bf\uff0c\u5373\u9488\u5bf9\u79fb\u52a8\u8bbe\u5907\u7684\u5927\u89c4\u6a21\u4ee3\u7801\u5e93\u91cd\u5199\uff0c\u8fd9\u6700\u521d\u662f\u56e0\u4e3a\u5f53\u65f6\u53f0\u5f0f\u673a\u548c\u624b\u673a\u4e4b\u95f4\u5b58\u5728\u5de8\u5927\u7684\u6027\u80fd\u5dee\u8ddd\uff08\u7b2c\u4e00\u6279iPhone\u548cAndroid\u8bbe\u5907\u8fd0\u884c\u5728400MHz\u3001ARM11 CPU\u4e0a\uff0c\u800c\u73b0\u4ee3\u8bbe\u5907\u4e0e\u51e0\u5e74\u524d\u7684\u7b14\u8bb0\u672c\u7535\u8111\u76f8\u5f53\uff09\uff0c\u800c\u4e0d\u662f\u56e0\u4e3a\u66f4\u6df1\u5c42\u6b21\u7684\u54f2\u5b66\u57fa\u7840\u6216\u6280\u672f\u4f18\u52bf\u3002\n\u56e0\u6b64\uff0c\u8003\u8651\u5230\u76ee\u524d\u5927\u591a\u6570Linux\u79fb\u52a8\u548c\u684c\u9762\u9879\u76ee\u4eba\u624b\u4e0d\u8db3\u7684\u73b0\u72b6\uff0c\u8fd9\u79cd\u5411\u878d\u5408\u7684\u8f6c\u53d8\u51e0\u4e4e\u666e\u904d\u662f\u597d\u7684\u3002\u7531\u4e8e\u6240\u6709\u8bbe\u5907\u90fd\u5c06\u4f7f\u7528\u76f8\u540c\u7684\u9879\u76ee\uff0c\u800c\u4e0d\u662f\u5927\u91cf\u7684\u5206\u53c9\u548c\u8c03\u6574\uff0c\u56e0\u6b64\u5b9e\u73b0\u6700\u9ad8\u7684\u53ef\u7ef4\u62a4\u6027\u5c06\u6709\u52a9\u4e8e\u5f00\u53d1\u4eba\u5458\u4e13\u6ce8\u4e8e\u7a33\u5b9a\u6027\u548c\u53ef\u7528\u6027\uff0c\u800c\u4e0d\u4f1a\u771f\u6b63\u635f\u5931\u6027\u80fd\u3002\u6b64\u5916\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u53f0\u5f0f\u673a\u4e0a\u5e26\u6765\u66f4\u8f7b\u7684\u5e94\u7528\u7a0b\u5e8f\uff08\u4f8b\u5982\uff0cGTK\u548cGNOME\u5728mobile shift\u548cLibrem 5\u53d1\u5e03\u540e\u8fdb\u884c\u4e86\u6027\u80fd\u4f18\u5316\uff09\uff0c\u5e76\u6700\u7ec8\u5728\u624b\u673a\u4e0a\u63d0\u4f9b\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u65e6\u63d2\u5165\u89c6\u9891\u7ebf\uff08\u5982\u6211\u4eec\u5728PinePhone\u4e0a\u770b\u5230\u7684\uff09\uff0c\u5b83\u5c31\u4f1a\u53d8\u6210\u53ef\u7528\u7684\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\n\u5c24\u5176\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u5c06\u7f29\u5c0f\u53f0\u5f0f\u673a\u548c\u79fb\u52a8Linux\u8bbe\u5907\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u5e76\u6709\u671b\u4f7fLinux\u667a\u80fd\u624b\u673a\u6210\u4e3a\u8896\u73cdARM\u7535\u8111\u3002\u6700\u540e\uff0c\u5728\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u8ba9Linux\u684c\u9762\u73af\u5883\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u6709\u7ade\u4e89\u529b\u3002", "note_en": "With the start of the new year, we can see a new trend delineating Linux software. Phosh with its newbord  libadwaita, KDE&#39;s  Kirigami and Maui Shell show that \u2013 like it or not \u2013 the era of convergent Linux applications has just started.\n After all, even laptop screens are not too big once one starts  tiling windows, and a single codebase between mobile and desktop apps would not only enable higher maintainability and a wider user base, but having windows adapting flawlessly to tiny squares on the screen sounds tempting even for those who do not plan on using the penguin OS on touchscreen-based devices just yet.\n Furthermore, the variety of projects that are enabling convergence on their applications is growing at a fast rate, with KDE, GNOME, Nitrux, Elementary and Jingling among others shifting their interest on mobile-ready and touch-friendly applications for the future of Linux.\n The striking results that so many new Linux application seem to naturally accomplish, and an increase reverting the reported lack of new FOSS apps of the past years, are finally going against the stereotype of ugliness of free software interfaces with state-of-the-art usability, clear and modern UX lines combined with a fully featured experience, no matter the size of the screens. This is the result of a rare, although indirect, collaboration between Linux desktops, with leading UX designers dedicating to improving the usability of Linux software to its finest details: GNOME&#39;s dedicated UX team, alongside designers like Sophie Herold, KDE&#39;s Niccol\u00f2 Venerandi, Danielle For\u00e9 and others are tracing new guidelines for software that goes on par, if not often beyond, commercial software.\n  An example is  Flathub, where new applications using the most modern toolkits and UX strategy appear every day, providing &#34;just works&#34; alternatives to complex older FOSS software,, in a boom similar to that seen around 2012 on Apple&#39;s Mac App Store. This encourages high competition between software, and most small use cases of missing usability are covered.\n The toolkits enabling this are firstly Qt-based MauiKit and GNOME&#39;s GTK4, and its mobile-friendly  libadwaita, which provide a superbly fast workflow for Linux applications, with the only real thing we still miss yet being perhaps a  tiny, resource-effective toolkit for low-end devices. Developing apps on Linux has just become as fast as opening GNOME&#39;s (somewhat new)  Builder IDE, programming the logic over a base template in a variety of languages, and deploying it through Flatpak and app stores. To take up the comparison once again, this mimics a  lot what Xcode used to be around 2009, in spite of the drastically smaller team working on it. But as usual, FOSS desktops are essentially maintained by volunteers in all their entirety, so donating to your reference environment will encourage work on new projects.\n  As the consistent sample shows, this looks like a general direction rather than a passing trend. A strong technical basis for convergence is being built, and we may expect the majority of Linux software developed in the upcoming 5 to 10 years to follow these guidelines and core ideas. In this case, unlike in the unsuccessful past examples such as Windows Phone, where different codebases were sold under the same market name with a very limited degree of compatibility, in this case we are  already at a point of real convergence, as anyone trying a Linux phone will notice, which we will hope that will end the legacy iPhone-inspired trend of a drastic codebase rewriting for mobile devices, which was initially rather enforced by the enormous performance gap between desktops and mobiles at the time (the first iPhones and Android devices ran on 400MHz, ARM11 CPU, whereas modern ones are comparable to laptops from few years ago) than from deeper philosophical grounds, or technical advantages.\n Therefore, given the current status of understaffing of most Linux mobile and desktop projects, this shift to convergence is almost universally good. Enabling top maintainability, since all devices will use the same projects instead of a lot of forks and adaptions, will help developers focus on stability and usability without a real loss in performance. Furthermore, this might hopefully bring to having much lighter apps on desktops (e.g., GTK and GNOME being considerably optimized for performance after the mobile shift and the Librem 5 launch), and finally feature-full apps on phones, that will turn into usable desktop applications as soon as a video cable is plugged (as we have seen e.g.  on the PinePhone).\n What is particularly important is how this tightens the gap between desktop and mobile Linux devices, and will hopefully make Linux smartphones nothing less than pocket-sized ARM computers. And finally, in the long time, make the Linux desktop environment more competitive than ever.", "posttime": "2022-02-17 15:34:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u5e94\u7528", "title": "Linux\u5e94\u7528\u7684\u65b0\u6d6a\u6f6e", "title_en": "A new wave of Linux applications", "transed": 1, "url": "https://tuxphones.com/convergent-linux-phone-apps/", "via": "", "real_tags": ["linux", "\u5e94\u7528"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073853, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b83&#39\uff1b\u6211\u4eec\u5f88\u5c11\u6709\u673a\u4f1a\u770b\u5230\u771f\u5b9e\u7684\u3001\u786c\u7684\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u8868\u660e\uff0c\u5728\u7f51\u4e0a\u521b\u5efa\u5185\u5bb9\u7684\u4eba\u7684\u53e3\u888b\u91cc\u5230\u5e95\u6709\u591a\u5c11\u94b1\u30022021\u7684\u5927\u62bd\u6410\u63d0\u4f9b\u4e86\u9519\u5931\u826f\u673a\u300210\u67086\u65e5\uff0c\u4e00\u540d\u533f\u540d\u9ed1\u5ba2\u57284chan\u4e0a\u53d1\u5e03\u4e86\u4e00\u4e2a125GB\u7684torrent\u94fe\u63a5\uff0c\u5176\u4e2d\u5305\u542b\u652f\u4ed8\u62a5\u544a\u548c\u6e90\u4ee3\u7801\u3002\u5f53\u5929\u665a\u4e9b\u65f6\u5019\uff0cTwitch\u786e\u8ba4\u4e86\u6cc4\u6f0f\u7684\u771f\u5b9e\u6027\uff0c\u5e76\u5c06\u5176\u5f52\u548e\u4e8e\u201c\u670d\u52a1\u5668\u914d\u7f6e\u66f4\u6539\u201d\u3002\u8fd9\u4e00\u4e8b\u4ef6\u51e0\u4e4e\u7acb\u5373\u88ab\u65b0\u95fb\u754c\u62a5\u9053\u3002\u6709\u521d\u6b65\u7684\u5206\u6790\uff0c\u4e00\u70b9\u70b9\u5c0f\u5c0f\u7684\u4e8b\u5b9e\u548c\u5bf9\u8d85\u7ea7\u660e\u661f\u5f69\u5e26\u7684\u652f\u4ed8\u6392\u540d\u7684\u6124\u6012\u3002\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u8fd9\u4e9b\u6587\u7ae0\u90fd\u4e0d\u591f\u6df1\u5165\u3002\u95f2\u804a\u5982\u98ce\u800c\u81f3\uff0c\u521b\u4f5c\u8005\u6536\u5165\u7684\u8bdd\u9898\u2014\u2014\u540c\u6837\u2014\u2014\u5e76\u6ca1\u6709\u88ab\u8bc1\u660e\u662f\u68d8\u624b\u7684\u3002\u5728\u6211\u770b\u6765\uff0c\u6211\u4eec\u4f3c\u4e4e\u96c6\u4f53\u6000\u5ff5\u68ee\u6797\n\u6b27\u7f8e\u56fd\u5bb6\u7684\u5b98\u65b9\u6700\u4f4e\u5de5\u8d44\u4e3a\u6bcf\u5e741.5\u4e07\u7f8e\u5143\u62161.3\u4e07\u6b27\u5143\u3002\u8fd9\u4e2a\u6570\u5b57\u4e0d\u73b0\u5b9e\uff0c\u4e0d\u8db3\u4ee5\u8ba9\u5168\u7403\u5927\u591a\u6570\u53d1\u8fbe\u7ecf\u6d4e\u4f53\u5ea6\u8fc7\u4e00\u5e74\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u8fd8\u662f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u6709\u7528\u7684\u6307\u6807\u6765\u8ba1\u7b97\u804c\u4e1a\u751f\u5b58\u80fd\u529b\u7684\u6700\u4f4e\u95e8\u69db\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u521b\u4f5c\u8005\u53ef\u80fd\u4f1a\u5f97\u5230\u8d5e\u52a9\u4eba\u3001\u8d5e\u52a9\u5546\u548c\u5e73\u53f0\u4e4b\u5916\u7684\u76f8\u5173\u4ea4\u6613\u7684\u8865\u8d34\u3002\n\u4e0b\u9762\u662f\u6211\u4eec\u81ea\u5df1\u7684\u7b2c\u4e00\u624b\u5206\u6790\uff0c\u7531\u6211\u5728DNR\u6210\u5458Sam Shaftoe\u7684\u6280\u672f\u652f\u6301\u4e0b\u8fdb\u884c\u30022021\u5e741\u6708\uff0cTwitk\u5439\u5618\u4e86989\u4e07\u4e2a\u521b\u5efa\u8005\u8d26\u6237\u7684\u57fa\u7840\uff0c\u6216\u8005\u6d3b\u8dc3\u7684\u6d41\u7ebf\u578b\u3002\u603b\u7684\u6765\u8bf4\uff0c\u4ed6\u4eec\u6bcf\u5e74\u5236\u4f5c\u7684\u5185\u5bb9\u63a5\u8fd110\u4ebf\u5c0f\u65f6\u3002\u7136\u800c\uff0c\u622a\u81f3\u4e5d\u6708\uff0c\u53ea\u6709\u5927\u7ea611.600\u6761\u62bd\u6410\u6d41\u7ebf\u57282021\u7684\u8f68\u9053\u4e0a\u83b7\u5f97\u6700\u4f4e\u5de5\u8d44\u3002\u767e\u5206\u4e4b\u4e00\u767e\u6211\u4eec\u8bf4\u7684\u662f0.117%\u7684\u6d3b\u52a8\u62d6\u7f06\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u8fd8\u4e0d\u591f\u4e0d\u7965\u7684\u8bdd\uff0c\u90a3\u4e48\u603b\u6536\u5165\u5305\u62ec\u6d17\u94b1\u56e2\u4f19\u4f7f\u7528\u7684\u4ef7\u503c\u81f3\u5c111000\u4e07\u7f8e\u5143\u7684\u88ab\u76d7\u4fe1\u7528\u5361\u3002\n\u6b63\u5982\u5927\u591a\u6570\u5f00\u53d1\u6027\u793e\u4ea4\u5e73\u53f0\u6240\u505a\u7684\u90a3\u6837\uff0c\u4e9a\u9a6c\u900a\u65d7\u4e0b\u7684Twitch\u6295\u5165\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8d44\u6e90\uff0c\u63a8\u52a8\u4e86\u767e\u6155\u5927\u7684\u589e\u957f\u3002\u4e3a\u4e86\u5efa\u9020\u4ed6\u4eec\u68a6\u5e7b\u57ce\u5821\u7684\u62a4\u57ce\u6cb3\uff0cTwitch\u5c06\u4ee5\u6bcf\u5c0f\u65f6250\u7f8e\u5143\uff08\u7ea6\u4e3a\u4e0a\u8ff0\u6700\u4f4e\u5de5\u8d44\u768435\u500d\uff09\u7684\u4ef7\u683c\u8d3f\u8d42\u4e00\u4e9b\u77e5\u540d\u827a\u672f\u5bb6\uff0c\u5e76\u5728\u5c0f\u8d39\u3001\u66ff\u8865\u548c\u5e7f\u544a\u7684\u57fa\u7840\u4e0a\u63d0\u4f9b\u989d\u5916\u5956\u52b1\uff0c\u4ee5\u6362\u53d6\u5b9a\u671f\u5728\u5e73\u53f0\u4e0a\u64ad\u653e\u6d41\u5a92\u4f53\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u4eec\u901a\u8fc7\u6210\u529f\u7684\u6d41\u5a92\u4f53\u804c\u4e1a\u83b7\u5f97\u4e86\u62a5\u916c\u3002\u4e50\u9ad8\uff08LEGO\uff09\u59d4\u6258\u8fdb\u884c\u76842019\u5e74\u7684\u4e00\u9879\u5e7f\u4e3a\u5ba3\u4f20\u7684\u8c03\u67e5\u663e\u793a\uff0c\u4f5c\u4e3aYouTube\u3001\u6709\u5f71\u54cd\u529b\u7684\u4eba\u6216\u6d41\u6c13\uff0c\u73b0\u5728\u662f\u4e2d\u5b66\u751f\u6700\u6e34\u671b\u7684\u5de5\u4f5c\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8b66\u7b1b\u6b4c\u66f2\u7b56\u7565\u8d77\u5230\u4e86\u4f5c\u7528\u3002\u53ea\u8981\u4ed8\u51fa\u8db3\u591f\u7684\u52aa\u529b\uff0c\u5f71\u54cd\u529b\u5c31\u4f1a\u968f\u4e4b\u800c\u6765\u3002\u9274\u4e8e\u5e7f\u6cdb\u7684\u793e\u4ea4\u5a92\u4f53\u5173\u6ce8\u5ea6\u548c\u6d41\u5a92\u4f53\u6536\u5165\u4e4b\u95f4\u4f3c\u4e4e\u6ca1\u6709\u76f8\u5173\u6027\uff0cTwitch\u7b49\u5e73\u53f0\u5b9e\u9645\u4e0a\u9700\u8981\u5c06\u6d41\u5a92\u4f53\u76f4\u64ad\u4f5c\u4e3a\u4e00\u79cd\u751f\u6d3b\u65b9\u5f0f\u6765\u8fdb\u5165\u7ade\u4e89\u73af\u5883\u3002\u4f20\u7edf\u667a\u6167\u5efa\u8bae\u4f60\u6d41&#34\uff1b\u6bcf\u54683-5\u5929&#34\uff1b\uff0c\u76f8\u5f53\u4e8e\u4e00\u4efd\u517c\u804c\u5de5\u4f5c\u7684\u76f8\u5e94\u52aa\u529b\uff0c\u5e0c\u671b\u5728\u5e73\u53f0\u4e0a\u671d\u7740\u53ef\u6301\u7eed\u7684\u804c\u4e1a\u53d1\u5c55\u3002\u8fd9\u4e2a\u4e92\u8054\u7f51\u68a6\u60f3\u5df2\u7ecf\u5356\u7ed9\u4e86\u6709\u62b1\u8d1f\u7684\u521b\u4f5c\u8005\u3001\u4ed6\u4eec\u7684\u8ffd\u968f\u8005\u548c\u5e7f\u544a\u5546\u3002\n\u5f53\u8003\u8651\u5230\u4e00\u751f\u7684\u521b\u9020\u529b\u65f6\uff0c\u4e00\u8def\u4e0a\u540e\u9000\u4e00\u6b65\uff0c\u53cd\u601d\u4e00\u4e0b\u4f60\u5728\u722c\u8c01\u7684\u5c71\u662f\u503c\u5f97\u7684\u3002\u629b\u5f00\u6570\u5b57\u4e0d\u8c08\uff0c\u6211\u5e0c\u671b\u6211\u80fd\u8bf4\u670d\u4f60\u5728\u5934\u8111\u4e2d\u51c6\u786e\u5730\u5c06\u8f9b\u52e4\u5de5\u4f5c\u7684\u666e\u901a\u6d41\u5149\u6f14\u5458\u7684\u804c\u4e1a\u5e0c\u671b\u5206\u7c7b\u2014\u2014\u5f88\u597d\u5730\u5f52\u5165\u5f69\u7968\u9886\u57df\u3002\u8fd9\u4e9b\u95ee\u9898\u662f\u7cfb\u7edf\u6027\u548c\u56fa\u6709\u7684\u3002\u5728\u8fd9\u79cd\u6a21\u5f0f\u4e0b\uff0c\u5373\u4f7f\u652f\u51fa\u589e\u52a010\u500d\u4e5f\u4e0d\u4f1a\u663e\u8457\u6269\u5927\u57fa\u6570\u3002\u5c3d\u7ba1\u90a3\u4e9b\u53ea\u521b\u9020\u5185\u5bb9\u7684\u521b\u9020\u8005\u4eec\u5bf9\u521b\u9020\u5185\u5bb9\u63d0\u51fa\u4e86\u5927\u91cf\u5efa\u8bae\uff0c\u4f46\u6240\u8c13\u7684\u201c\u521b\u9020\u8005\u7ecf\u6d4e\u201d\u4ecd\u7136\u662f\u4e00\u4e2a\u6a21\u7cca\u7684\u6982\u5ff5\uff0c\u7b3c\u7f69\u5728\u5e7f\u544a\u4e1a\u4f4e\u6c89\u7684\u547c\u565c\u58f0\u4e2d\u3002\n\u8fd9\u4e9b\u201c\u521b\u9020\u8005\u201d\u5230\u5e95\u662f\u8c01\uff1f\u6839\u636e\u6211\u81ea\u5df1\u7684\u7814\u7a76\u4f30\u8ba1\uff0c\u521b\u4f5c\u8005\u7ecf\u6d4e\u53ef\u80fd\u5305\u62ec\u5168\u74035000-6000\u4e07\u201c\u6709\u62b1\u8d1f\u201d\u7684\u5185\u5bb9\u521b\u4f5c\u8005\u3002\u6211&#39\uff1b\u6211\u5c06\u8fd9\u4e9b\u7c97\u7565\u7684\u6570\u5b57\u57fa\u4e8e\u968f\u673a\u62bd\u6837\u7684\u5173\u6ce8\u8005\u8ba1\u6570\u3001\u53d1\u5e03\u9891\u7387\uff0c\u5e76\u5c06\u4e24\u8005\u4e0e\u5404\u5927\u5e73\u53f0\u8d26\u6237\u7684\u4f30\u8ba1\u6536\u5165\u76f8\u5173\u8054\u3002\u4ece\u5e7f\u4e49\u4e0a\u8bb2\uff0c\u8fd9\u4e9b\u4eba\u901a\u8fc7\u53d1\u5e03\u5e38\u89c4\u5185\u5bb9\u81f3\u5c11\u80fd\u8d5a\u5230\u4e00\u4e9b\u94b1\u3002\u4ed6\u4eec\u5305\u62ec\u666e\u901a\u7684\u6709\u5f71\u54cd\u529b\u7684\u4eba\u3001\u6709\u5f71\u54cd\u529b\u7684\u4eba\u3001\u6709\u6d3b\u529b\u7684\u4eba\u3001\u6e38\u620f\u73a9\u5bb6\u3001\u827a\u672f\u5bb6\u3001\u8868\u6f14\u8005\u3001\u97f3\u4e50\u5236\u4f5c\u4eba\u3001DJ\uff0c\u4ee5\u53ca\u6240\u6709\u521b\u610f\u9886\u57df\u7684\u7cbe\u795e\u53d8\u6001\u7684\u4e50\u624b\u3002\u5728\u8fd95000-6000\u4e07\u201c\u6709\u62b1\u8d1f\u201d\u7684\u521b\u4f5c\u8005\u4e2d\uff0c\u6709&#39\uff1b\u8fd9\u662f\u4e00\u4e2a\u7531\u5927\u7ea6100\u4e07\u540d\u201c\u4e13\u4e1a\u4eba\u58eb\u201d\u7ec4\u6210\u7684\u8d2b\u7620\u9636\u5c42\u2014\u2014\u4ed6\u4eec\u8bbe\u6cd5\u4ece\u793e\u4ea4\u5e73\u53f0\u6324\u51fa\u81f3\u5c11\u6700\u4f4e\u5de5\u8d44\u3002\n\u6211&#39\uff1b\u6211\u4e5f\u662f\u4e00\u4e2a\u201c\u521b\u9020\u8005\u201d\u3002\u6211\u6bcf\u5929\u90fd\u521b\u4f5c\u97f3\u4e50\uff0c\u5e76\u4e14\u5df2\u7ecf\u505a\u4e86\u5927\u534a\u8f88\u5b50\u4e86\u3002\u6211\u8ba4\u771f\u8003\u8651\u521b\u4f5c\u8005\u7684\u5229\u76ca\u3002\u8ffd\u6c42\u81ea\u5df1\u7684\u521b\u4f5c\u9053\u8def\u548c\u6210\u4e3a\u68cb\u5b50\u662f\u6709\u533a\u522b\u7684\u3002\u867d\u7136\u6211\u8ba4\u4e3a\u4e00\u4e2a\u666e\u901a\u521b\u9020\u8005\u7684\u5174\u8da3\u4e3b\u8981\u4e0d\u662f\u7ecf\u6d4e\u4e0a\u7684\uff0c\u4f46\u4e86\u89e3\u8fd9\u79cd\u533a\u522b\u662f\u81f3\u5173\u91cd\u8981\u7684\u3002\u5b83&#39\uff1b\u8fd9\u548c&#39\uff1b\u5b83\u88ab\u544a\u77e5\u5e76\u88ab\u51fa\u552e\u2014\u2014\u800c\u4e0d\u662f\u5728\u8d85\u8fc750%\u7684\u751f\u4ea7\u5e74\u9f84\u5e74\u8f7b\u4eba\u5e0c\u671b&#34\uff1b\u521b\u5efa\u793e\u4ea4\u5a92\u4f53\u5185\u5bb9&#34\uff1b\u4f5c\u4e3a\u4ed6\u4eec\u7684\u751f\u8ba1\u3002Twitch\u7684\u6570\u636e\u8868\u660e\u2014\u2014\u8bc1\u660e\u2014\u2014\u5728\u5b8f\u89c2\u5c42\u9762\u4e0a\uff0c\u8fd9\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u3002\n\u521b\u610f\u4eba\u5458\u5c06\u81ea\u5df1\u7684\u624b\u827a\u585e\u8fdb\u5e73\u53f0\u5b9a\u4e49\u7684\u884c\u4e3a\u9884\u8bbe\u4e2d\u6240\u4ea7\u751f\u7684\u96c6\u4f53\u673a\u4f1a\u6210\u672c\u662f\u75af\u72c2\u7684\u3002\u6570\u5341\u4ebf\u5c0f\u65f6\u52aa\u529b\u7684\u771f\u6b63\u53d7\u76ca\u8005\u662f\u4e00\u4e2a\u53ef\u9884\u6d4b\u7684\u5265\u524a\u5f27\u7ebf\u2014\u2014\u4ea4\u6613\u65e9\u671f\u7684\u4eba\u60c5\u548c\u4eba\u4e3a\u7684\u5956\u52b1\u6765\u5438\u5f15\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u4e2a\u5e73\u53f0\u51fa\u73b0\u4e4b\u524d\u5bf9\u8868\u6f14\u8005\u65bd\u52a0\u66f4\u5927\u7684\u538b\u529b\u3002\n\u4eba\u4eec\u603b\u662f\u628a\u5927\u91cf\u7684\u9752\u6625\u6295\u5165\u5230\u8ffd\u6c42\u6b7b\u80e1\u540c\u7684\u804c\u4e1a\u9009\u62e9\u4e0a\u3002\u4f46\u6211\u4eec\u6709\u7406\u7531\u8fd9\u6837\u505a\uff0c\u5e76\u5c06\u6211\u4eec\u7684\u521b\u9020\u529b\u5f15\u5411\u66f4\u597d\u7684\u76ee\u6807\u3002\u6211\u4eec\u9700\u8981\u521b\u9020\u66f4\u591a\u6211\u4eec\u81ea\u5df1\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u73a9\u66f4\u591a\u6211\u4eec\u81ea\u5df1\u7684\u6e38\u620f\u3002\u53ea\u6709\u5230\u90a3\u65f6\uff0c\u7528\u6211\u4eec\u8fd9\u4f4d\u5782\u5934\u4e27\u6c14\u7684\u670b\u53cb\u7684\u8bdd\u8bf4\uff0c\u201c[\u2026]\u4eba\u4eec\u624d\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\uff0c\u8ba9\u4e92\u8054\u7f51\u518d\u6b21\u53d8\u5f97\u6709\u7528\u201d\u3002", "note_en": "It&#39;s rare that we get an opportunity to see real, hard numbers on how much money ends up in the pockets of those who create content online. The Great Twitch Leak of 2021 provided the perfect missed opportunity. On October 6, an anonymous hacker posted a 125GB torrent link on 4chan containing payout reports and source code. Later that day, Twitch confirmed the authenticity of the leak and blamed it on a \u201cserver configuration change\u201d. The incident got picked up by the news cycle almost immediately. There was preliminary analysis, a trickle of bite-sized facts and outrage about the payout rankings of superstar streamers. As usual, none of the articles went deep enough. The chatter breezed on and the topic of creators\u2019 incomes \u2014 again \u2014 did not prove sticky. To me, it seemed that we collectively missed the forest for the trees\n  An official Euro-american minimum wage works out to an annual figure of 15,000 US Dollars, or 13,000 Euro. This number is unrealistic and insufficient to make it through a year in most advanced economies of the globe. Nevertheless, it serves as a useful proxy to calculate a bare minimum threshold of vocational viability. On top of it, creators might be subsidized by patrons, sponsorships and related deals that occur outside of platforms.\n   What follows is our own, firsthand analysis, carried out by me and with technical support from fellow DNR member Sam Shaftoe. In January 2021, Twitch boasted a base of 9.89 million creator accounts, or active streamers. Collectively, they were producing close to a billion hours of annual content. Yet as of September, only about 11.600 Twitch streamers were on track to earn the minimum wage in 2021. Percent-wise we\u2019re talking about the 0.117% of active streamers. If that didn\u2019t sound ominous enough, the total earnings included at least ten million dollars worth of stolen credit cards used by money laundering rings.\n  As most exploitative social platforms do, Amazon-owned Twitch has invested incredible resources into bellowsing growth. To build their fantasy castle\u2019s moat, Twitch would bribe select, established artists at $250/hour (about 35x of said minimum wage) in additional incentives on top of tips, subs and ads in exchange for streaming regularly on the platform. In other words, they got paid for LARPing a successful streaming career. These siren-song tactics work, as the well-publicized 2019 survey commissioned by LEGO revealed that being a youtuber, influencer or streamer is now the most-desired job among middle-school kids. With enough effort, clout follows. Seeing that there seems to be no correlation between broad social media following and streaming earnings, platforms like Twitch effectively require adopting livestreaming as a lifestyle to enter the playing field. Conventional wisdom recommends that you stream &#34;between 3-5 days a week&#34;, amounting to the commensurate effort of a part time job in hopes of progressing toward a sustainable career on the platform. This internet dream has been sold to aspiring creators, their followers and advertisers alike.\n  When considering a lifetime of creativity, it\u2019s worth taking a step back along the way and reflecting on whose mountain you\u2019re climbing. Numbers aside, I hope I convinced you to mentally categorize the average hard-working streamer\u2019s career hopes accurately \u2014 well into the lottery ticket territory. The problems are systemic and inherent. In this model, even a 10x increase in payouts would not broaden the base significantly. Despite the barrage of advice about creating content from creators who only create content about creating content, the so-called \u201ccreator economy\u201d remains a nebulous concept shrouded in the vape-pen haze of advertising industry grunts.\n  Who are these \u201ccreators\u201d, exactly? According to my own research estimates, the creator economy could encompass 50-60 million \u201caspiring\u201d content creators worldwide. I&#39;m basing these broad-brush numbers on random-sampling follower counts, posting frequency and correlating both to estimated incomes for accounts across major platforms. These are people who earn at least some amount of money from posting regular content in the broadest sense. They include plain influencers, clout chasers, van-lifers, gamers, artists, performers, music producers, DJs, and psychopathic LARPers of all creative fields. Out of these 50-60 million \u201caspiring\u201d creators, there&#39;s a hair-thin strata of around 1 million \u201cprofessionals\u201d -those who manage to squeeze out at least that minimum wage from social platforms.\n  I&#39;m also a \u201ccreator\u201d. I create music every day and have been doing that for well over half of my life. I take the interest of creators earnestly. There\u2019s a difference between pursuing your own creative path and being a pawn. And while I\u2019d argue that an average creator\u2019s interests are not primarily financial, knowing the distinction is crucial. It&#39;s not the same story that&#39;s being told and sold \u2014 not when over 50% of young productive-age people are hoping to &#34;create social media content&#34; as their livelihood. The Twitch data shows - proves - that on macro level, this is never going to happen.\n  The collective opportunity costs incurred by creatives shoehorning their craft into presets of platform-defined behaviors are insane. The true beneficiaries of billions of hours of effort are flying a predictable arc of exploitation - trading early favors and artificial payout boosts to attract, then squeezing the performers harder down the line until the next platform comes around.\n  People have always invested incredible amounts of their youth into pursuing dead-end career choices. But we deserve to do so for the right reasons and to channel our creativity towards better goals. We need to create more of our own infrastructure, and play more of our own games. Only then, in the words of our fishpilled friend, \u201c[\u2026] people will find a way to make the internet useful again\u201d.", "posttime": "2022-02-17 15:06:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ecf\u6d4e\u5b66,twitch,bullshit,\u5e73\u53f0", "title": "Twitch\u521b\u9020\u8005\u53ef\u6015\u7684\u80e1\u8bf4\u516b\u9053\u7ecf\u6d4e\u5b66", "title_en": "The Dire, Bullshit Economics of Twitch Creators", "transed": 1, "url": "https://donotresearch.net/posts/the-dire-bullshit-economics-of-twitch-creators/", "via": "", "real_tags": ["\u7ecf\u6d4e\u5b66", "twitch", "bullshit", "\u5e73\u53f0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073852, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fc7\u53bb\u7684\u4e09\u5e74\u91cc\uff0c\u6211\u628a\u4e00\u534a\u7684\u5de5\u4f5c\u65f6\u95f4\u82b1\u5728\u548c\u5e73\u53f7\u9879\u76ee\u4e0a\u3002\u76ee\u6807\u662f\u521b\u5efa\u4e00\u4e2a\u901a\u7528\u7684\u8f7b\u91cf\u7ea7\u5373\u65f6\uff08JIT\uff09\u7f16\u8bd1\u5668\uff0c\u4ee5\u53ca\u8be5\u9879\u76ee&#39\uff1bs\u57fa\u77f3\u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e\u673a\u5668\u7684\u4e2d\u7ea7\u4e2d\u95f4\u8868\u793a\uff08MIR\uff09\u3002\u6709\u5173\u8be5\u9879\u76ee\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6211\u4e4b\u524d\u5173\u4e8eRed Hat Developer\u7684\u6587\u7ae0\uff1a\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5728MIR\u9879\u76ee\u4e0a\u7684\u5de5\u4f5c\u91cd\u70b9\u662f\u5236\u4f5c\u4e00\u4e2a\u5feb\u901f\u7684JIT\u7f16\u8bd1\u5668\uff0c\u4e3a\u51e0\u4e2a\u4e3b\u8981\u76ee\u6807\u751f\u6210\u5408\u9002\u7684\u673a\u5668\u4ee3\u7801\uff1ax86-64 Linux\u548cmacOS\u3001AARC64\u3001s390x\u3001riscv64 Linux\u548cppc64 big-and little-endian Linux\u3002\n\u5f53\u524d\u72b6\u6001\u4e0b\u7684\u9879\u76ee\u662f\u4e00\u4e2a\u65b9\u6cd5JIT\u7f16\u8bd1\u5668\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u7528\u4e8e\u9759\u6001\u7c7b\u578b\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982C\uff0c\u8fd9\u662f\u4f7f\u7528\u6700\u5e7f\u6cdb\u7684\u9759\u6001\u7c7b\u578b\u8bed\u8a00\u3002\u6211\u4eec&#39\uff1b\u6211\u5f00\u53d1\u4e86\u4e00\u4e2a\u57fa\u4e8eC-to-MIR\u7f16\u8bd1\u5668\u7684C\u8bed\u8a00JIT\u3002\nMIR\u9879\u76ee\u7684\u6700\u521d\u76ee\u6807\u662f\u5b9e\u73b0\u66f4\u597d\u7684Ruby JIT\u7f16\u8bd1\u5668\u3002\uff08\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u5173\u6ce8\u7684\u662fCRuby\uff0c\u9ed8\u8ba4\u7684Ruby\u89e3\u91ca\u5668\uff0c\u5b83\u662f\u7528C\u7f16\u5199\u7684\u3002\uff09Ruby\u662f\u4e00\u79cd\u975e\u5e38\u52a8\u6001\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u975e\u5e38\u7075\u6d3b\uff0c\u751a\u81f3\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u6574\u6570\u7684\u52a0\u53f7\u65b9\u6cd5\u3002\n\u4e3a\u4e86\u83b7\u5f97\u66f4\u597d\u7684\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u6027\u80fd\uff0c\u60a8\u9700\u8981\u8ddf\u8e2a\u7a0b\u5e8f\u6267\u884c\uff0c\u4ece\u6267\u884c\u4e2d\u505a\u51fa\u5404\u79cd\u5047\u8bbe\uff0c\u5e76\u6839\u636e\u8fd9\u4e9b\u5047\u8bbe\u751f\u6210\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u7ed9\u5b9a\u65b9\u6cd5\u4e2d\u7684\u7ed9\u5b9a\u52a0\u53f7\u8fd0\u7b97\u53ea\u6709\u6574\u6570\u64cd\u4f5c\u6570\u3002\u60a8\u53ef\u4ee5\u5047\u8bbe\u60c5\u51b5\u59cb\u7ec8\u5982\u6b64\uff0c\u5e76\u751f\u6210\u4ec5\u9002\u7528\u4e8e\u6574\u6570\u64cd\u4f5c\u6570\u7684\u4e13\u7528\u52a0\u53f7\u8fd0\u7b97\u4ee3\u7801\u3002\n\u4f60\u9700\u8981\u4f7f\u7528\u4e0d\u540c\u7684\u6280\u672f\u6765\u4fdd\u8bc1\u4f60\u7684\u5047\u8bbe\u6210\u7acb\uff0c\u6bd4\u5982\u5b9e\u65bd\u5047\u8bbe\u68c0\u67e5\u6216\u4fdd\u62a4\uff0c\u6216\u8005\u8bc1\u660e\u5728\u7ed9\u5b9a\u7684\u6267\u884c\u8def\u5f84\u4e0a\uff0c\u5047\u8bbe\u603b\u662f\u6b63\u786e\u7684\u3002\u5982\u679c\u8b66\u536b\u53d1\u73b0\u8fd9\u4e2a\u5047\u8bbe\u662f\u9519\u8bef\u7684\uff0c\u4f60\u9700\u8981\u5207\u6362\u5230\u9002\u7528\u4e8e\u4efb\u4f55\u60c5\u51b5\u7684\u4ee3\u7801\u3002\u5728JIT\u4e0a\u4e0b\u6587\u4e2d\uff0c\u4ece\u4e13\u7528\u4ee3\u7801\u5207\u6362\u5230\u901a\u7528\u6848\u4f8b\u4ee3\u7801\u7684\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e3a\u53bb\u4f18\u5316\u3002\n\u5728\u672c\u6587\u4e2d\uff0c\u6211&#39\uff1b\u6211\u5c06\u8ba8\u8bba\u6211\u8ba1\u5212\u5982\u4f55\u652f\u6301\u5728MIR\u4e2d\u751f\u6210\u4e13\u95e8\u7684\u3001\u975e\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u4ee5\u53ca\u5728MIR\u9879\u76ee\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u54ea\u4e9b\u652f\u6301\u3002\n\u6ce8\uff1a\u5927\u591a\u6570JIT\u4e13\u95e8\u9488\u5bf9\u7279\u5b9a\u8bed\u8a00\uff1a\u6709&#39\uff1b\u4f8b\u5982\uff0cs V8\u4ee3\u8868JavaScript\uff0cluajit\u4ee3\u8868Lua\uff0cPHP\u4ee3\u8868PHP\u7684PHP JIT\u3002\u6211\u66f4\u611f\u5174\u8da3\u7684\u662f\u8bed\u8a00\u65e0\u5173\u6027\u652f\u6301\uff0c\u4ee5\u4fc3\u8fdb\u4e0d\u540c\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u5728JIT\u4e2d\u5b9e\u73b0\u4e13\u95e8\u5316\u548c\u53bb\u4f18\u5316\u3002\uff08\u6709\u5173JIT\u7f16\u8bd1\u5668\u4e2d\u53bb\u4f18\u5316\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605JIT\u7f16\u8bd1\u5668\u5982\u4f55\u5728OpenJDK\u4e2d\u63d0\u9ad8Java\u6027\u80fd\u3002\uff09\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u80fd\u591f\u5177\u4f53\u4e86\u89e3MIR\u7f16\u8bd1\u5668\u4e2d\u7684\u4e13\u95e8\u5316\u548c\u53bb\u4f18\u5316\uff0c\u6211\u5c06\u5728CRuby\u5b9e\u73b0\u4e2d\u4f7f\u7528\u4ee5\u4e0b\u865a\u62df\u673a\uff08VM\uff09\u6307\u4ee4plus\u7684\u7b80\u5316\u4ee3\u7801\uff1a\n\u5982\u679c\uff08\u56fa\u5b9a\u8d44\u4ea7\uff09&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cINTEGER_refined_OP_FLAG\uff09\uff09{res=rb_fix_PLUS_fix\uff08recv\uff0cobj\uff09\uff1b}\u5426\u5219\uff0c\u5982\u679c\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09&amp&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cFLOAT_refined_OP_FLAG\uff09\uff09{res=db2num\uff08RFLOAT_\u503c\uff08recv\uff09+RFLOAT_\u503c\uff08obj\uff09\uff09}\u5426\u5219\u5982\u679c\uff08\u7279\u6b8a\u5e38\u6570P\uff08recv\uff09| |\u7279\u6b8a\u5e38\u6570P\uff08obj\uff09\uff09{\u2026}\u5426\u5219\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cFloat&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cFloat&amp&amp\uff1b\u57fa\u672c\u7684_OP_undefined_P\uff08BOP_PLUS\uff0cFLOAT_refined_OP_FLAG\uff09\uff09{\u2026}\u5426\u5219\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cString&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cString&amp&amp\uff1b\u57fa\u672c_OP_undefined_P\uff08BOP_PLUS\uff0cSTRING_refined_OP_FLAG\uff09\uff09{\u2026}\u5426\u5219\uff0c\u5982\u679c\uff08RBASIC_CLASS\uff08recv\uff09=rb_cArray&amp&amp\uff1bRBASIC_CLASS\uff08obj\uff09=rb_cArray&amp&amp\uff1b\u57fa\u672c_OP_undefined_P\uff08BOP_PLUS\uff0c\u6570\u7ec4_refined_OP_FLAG\uff09\uff09{\u2026}else{..//object recv\u5b9e\u73b0+\u7684\u65b9\u6cd5\u8c03\u7528}\n\u90a3\u4e48\uff0c\u4ec0\u4e48&#39\uff1b\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\u4e8b\uff1f\u9996\u5148\uff0c\u4ee3\u7801\u68c0\u67e5\u64cd\u4f5c\u6570\u662f\u5426\u4e3a\u56fa\u5b9a\u6570\uff0c\u6574\u6570\u7684\u52a0\u53f7\u65b9\u6cd5\u662f\u5426\u672a\u91cd\u65b0\u5b9a\u4e49\u3002\u5982\u679c\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u4ee3\u7801\u5c06\u5bf9\u56fa\u5b9a\u6570\u5b57\u6267\u884c\u52a0\u53f7\u64cd\u4f5c\u3002\u5426\u5219\uff0c\u5b83\u4f1a\u5bf9\u6d6e\u70b9\u6570\u3001\u5b57\u7b26\u4e32\u548c\u6570\u7ec4\u8fdb\u884c\u7c7b\u4f3c\u7684\u68c0\u67e5\u3002\u6700\u540e\uff0c\u5b83\u4e3a\u5bf9\u8c61recv\u8c03\u7528Ruby\u65b9\u6cd5implementing+\u3002\nCRuby\u4e2d\u7684Fixed numbers\uff08\u6216FixNum\uff09\u662f\u76ee\u6807\u673a\u5668\u53ef\u4ee5\u6709\u6548\u652f\u6301\u7684\u6574\u6570\u5b50\u96c6\u3002\u8f83\u5927\u7684\u6570\u5b57\u8868\u793a\u4e3aGMP\u5e93\u5b9e\u73b0\u7684\u591a\u7cbe\u5ea6\u6570\u5b57\u3002\nCRuby\u4e2d\u7684\u6240\u6709\u503c\u90fd\u7531\u4e00\u4e2a\u673a\u5668\u5b57\u8868\u793a\u5e76\u6807\u8bb0\u3002\u4f8b\u5982\uff0cfixnum\u603b\u662f\u67091\u4f5c\u4e3a\u5355\u8bcd\u7684\u6700\u4f4e\u6709\u6548\u4f4d\uff0c\u800c\u6307\u5411\u5bf9\u8c61\u7684\u6307\u9488\u603b\u662f\u6709\u4e09\u4e2a\uff08\u6216\u4e24\u4e2a\uff0c\u572832\u4f4d\u76ee\u6807\u4e0a\uff09\u96f6\u6700\u4f4e\u6709\u6548\u4f4d\u3002\u56e0\u6b64\uff0c\u5b8fFIXNUM_2_P\u7684\u5b9e\u73b0\u5982\u4e0b\u4ee3\u7801\u6240\u793a\uff1a\n\u5982\u679c\u7701\u7565\u68c0\u67e5\u6ea2\u51fa\u7684\u4ee3\u7801\uff0cfixnum plus\u64cd\u4f5c\u5982\u4e0b\u6240\u793a\uff1a\n\u6ce8\u610f\uff1a\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7b80\u5316\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u5c06\u5ffd\u7565\u5bf9plus\u64cd\u4f5c\u91cd\u65b0\u5b9a\u4e49\u7684\u68c0\u67e5\uff0c\u4f8b\u5982\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u8c03\u7528\u5b8fBASIC_OP_undefined_P\u3002\n\u5047\u8bbe\u6211\u4eec&#39\uff1b\u6211\u68c0\u67e5\u4e86\u4e00\u4e2a\u7279\u5b9a\u52a0\u53f7\u8fd0\u7b97\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\uff0c\u53d1\u73b0\u5b83\u4eec\u4e00\u76f4\u90fd\u662f\u56fa\u5b9a\u6570\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u751f\u6210\u4ee5\u4e0b\u5185\u5bb9\uff1a\n\u4e4d\u4e00\u770b\uff0c\u6211\u4eec\u4f3c\u4e4e\u6ca1\u6709&#39\uff1bt\u6539\u8fdb\u4ee3\u7801\uff0c\u56e0\u4e3a\u68c0\u67e5\uff08FIXNUM_2_P\uff09\u4ecd\u7136\u5b58\u5728\u3002\u4f46\u662f\u5982\u679c\u6211\u4eec\u770b\u4e00\u7cfb\u5217\u7684\u52a0\u53f7\u8fd0\u7b97\uff0cv1+v2+v3+v4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\uff1a\n\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08v1\uff0cv2\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08v1\uff0cv2\uff09\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08res\uff0cv3\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08res\uff0cv3\uff09\u5982\u679c\uff08\uff01FIXNUM_2_P\uff08res\uff0cv4\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_plus_fix\uff08res\uff0cv4\uff09\n\u667a\u80fd\u7f16\u8bd1\u5668\u53ef\u4ee5\u5220\u9664\u6700\u540e\u4e24\u4e2aFIXNUM_2_P\u68c0\u67e5\u3002\u4e0d\u5e78\u7684\u662f\uff0cGCC\u548cClang\u90fd\u4e0d\u80fd\u786e\u5b9ares\u7684\u6700\u4f4e\u6709\u6548\u4f4d\u603b\u662f1\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u7f16\u8bd1\u5668\u4e0d\u77e5\u9053\u5e94\u8be5\u5220\u9664\u6700\u540e\u4e24\u4e2aFIXNUM_2_P\u68c0\u67e5\u3002GCC\u548c#39\uff1b\u968f\u7740Ranger\u9879\u76ee\u7684\u5168\u9762\u5b9e\u65bd\uff0c\u672a\u6765\u7684\u60c5\u51b5\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002\uff08\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u5982\u679c\u503c\u662f\u7531\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a\u6210\u5458\uff08type\u548cvalue\uff09\u7684\u7ed3\u6784\u8868\u793a\u7684\uff0c\u90a3\u4e48GCC/LLVM\u73b0\u5728\u751a\u81f3\u53ef\u4ee5\u627e\u51fa\u5b83\u4eec\u7684\u7c7b\u578b\u5e76\u5220\u9664\u6700\u540e\u4e24\u4e2a\u68c0\u67e5\u3002\uff09\n\u5373\u4f7f\u4e0d\u5220\u9664\u5197\u4f59\u68c0\u67e5\uff0c\u6267\u884c\u8fd9\u79cd\u4e13\u7528\u4ee3\u7801\u4e5f\u662f\u6709\u76ca\u7684\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u53ef\u4ee5\u6210\u529f\u5730\u8fdb\u884c\u5176\u4ed6\u4f18\u5316\uff0c\u4f8b\u5982\u5220\u9664\u5197\u4f59\u52a0\u8f7d\u548c\u5b58\u50a8\u3002\u90a3&#39\uff1b\u56e0\u4e3a\u8fd9\u6837\u7684\u4ee3\u7801\u5f62\u6210\u4e86\u79f0\u4e3a\u6269\u5c55\u57fa\u672c\u5757\uff08EBB\uff09\u7684\u7279\u5b9a\u533a\u57df\uff0c\u800c\u4f18\u5316\u7f16\u8bd1\u5668\u5728\u8fd9\u6837\u7684\u533a\u57df\u4e0a\u5de5\u4f5c\u5f97\u7279\u522b\u597d\u3002\u8fd9\u6837\u7684\u4ee3\u7801\u8fd8\u5177\u6709\u66f4\u597d\u7684\u4ee3\u7801\u5c40\u90e8\u6027\u548c\u5206\u652f\u9884\u6d4b\u3002\n\u5728\u56fa\u5b9a\u6570\u5b57\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5982\u4f55\u5b9e\u73b0\u7531general_case\u6807\u8bb0\u7684\u4ee3\u7801\uff1f\u6709\u4e09\u79cd\u53ef\u80fd\u6027\uff1a\nJIT\u7f16\u8bd1\u5668\u8c03\u7528\uff0c\u5220\u9664\u4e3aRuby\u65b9\u6cd5\u751f\u6210\u7684\u4e13\u7528\u4ee3\u7801\uff0c\u7136\u540e\u4e3a\u65b9\u6cd5VM\u6307\u4ee4\u751f\u6210\u5e76\u4f7f\u7528\u901a\u7528\u4ee3\u7801\u3002\n\u8f6c\u5230\u4e00\u4e2a\u7279\u5b9a\u4f4d\u7f6e\uff0c\u5176\u4e2d\u5305\u542b\u65b9\u6cd5VM\u6307\u4ee4\u7684\u6240\u6709\u7c7b\u578b\u6848\u4f8b\u7684\u6240\u6709\u4ee3\u7801\u3002\n\u7531\u4e8e\u5207\u6362\u5230CRuby\u4e2d\u7684\u89e3\u91ca\u5668\u975e\u5e38\u6602\u8d35\uff0c\u56e0\u6b64\u6700\u597d\u5728\u751f\u6210\u4e13\u7528\u4ee3\u7801\u7684\u540c\u65f6\u751f\u6210\u901a\u7528\u6848\u4f8b\u4ee3\u7801\uff0c\u4ee5\u53ca\u5728\u8b66\u536b\u5931\u8d25\u65f6\u4ece\u4e13\u7528\u4ee3\u7801\u8f6c\u5230\u901a\u7528\u4ee3\u7801\u3002\u5728\u5bf9\u4e00\u822c\u6848\u4f8b\u4ee3\u7801\u6267\u884c\u4e86\u51e0\u6b21gotos\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5f53\u524d\u6982\u8981\u4fe1\u606f\u91cd\u5efa\u6574\u4e2a\u65b9\u6cd5\u3002\nMIR-JIT\u7f16\u8bd1\u5668\u5e76\u4e0d\u6bd4GCC\u6216Clang\u66f4\u806a\u660e\uff0c\u5b83\u9047\u5230\u4e86\u76f8\u540c\u7684\u95ee\u9898\uff0c\u5373\u5220\u9664\u5bf9\u6807\u8bb0\u503c\u7684\u5197\u4f59\u68c0\u67e5\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u8ba1\u5212\u5f15\u5165\u7a0b\u5e8f\u53d8\u91cf\u548cMIR\u6307\u4ee4\u7684\u5c5e\u6027\uff0c\u4ee5\u53ca\u4f7f\u7528\u5c5e\u6027\u7684\u5185\u7f6eC\u51fd\u6570\uff1a\n\u6ce8\uff1a\u4e3a\u7b80\u6d01\u8d77\u89c1\uff0cI&#39\uff1b\u6211\u5c06\u8df3\u8fc7\u5bf9MIR\u7ea7\u522b\u7684\u8d22\u4ea7\u652f\u6301\u7684\u63cf\u8ff0\u3002\n\u5c5e\u6027\u662f\u6574\u6570\u5e38\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528_builtin_prop_set\u5728\u7ed9\u5b9a\u7684\u6267\u884c\u70b9\u4e3a\u7a0b\u5e8f\u53d8\u91cf\u5206\u914d\u5c5e\u6027\u3002\u5c5e\u6027\u901a\u8fc7\u53d8\u91cf\u8d4b\u503c\u4f20\u64ad\u5230\u5176\u4ed6\u7a0b\u5e8f\u53d8\u91cf\u3002\n\u5f53\u6211\u4eec\u65e0\u6cd5\u8ba1\u7b97\u7a0b\u5e8f\u53d8\u91cf\u5728\u7ed9\u5b9a\u6267\u884c\u70b9\u7684\u5c5e\u6027\u65f6\uff0c\u8be5\u53d8\u91cf\u5728\u8be5\u70b9\u7684\u5c5e\u6027\u4e3a\u96f6\u3002\u96f6\u5c5e\u6027\u662f\u672a\u77e5\u5c5e\u6027\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u63cf\u8ff0\u7a0b\u5e8f\u53d8\u91cf\u7c7b\u578b\u7684\u5c5e\u6027\u7684\u65b0\u5185\u7f6e\u8c03\u7528\u6765\u6ce8\u91caplus\u4ee3\u7801\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n\u679a\u4e3e\u5c5e\u6027{unknown=0\uff0cinttype\uff0cflotype\uff0c\u2026}\uff1b\u5982\u679c\uff08uuu builtin_prop_cond\uff08FIXNUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cintype\uff0cobj\uff0cintype\uff09\uff09{res=rb_fix_plus_fix\uff08recv\uff0cobj\uff09\uff1buuu builtin_prop_set\uff08res\uff0cintype\uff09}\u5982\u679c\uff08uuuuu builtin_prop cond_cond\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cflotype\uff0cobj\uff0cflotype\uff09\uff09res=db2num__\u5185\u7f6e\u9053\u5177\u5957\u88c5\uff08res\uff0cflotype\uff09\uff1b]else{\u2026//\u4e3a\u5bf9\u8c61recv\u5b9e\u73b0\u7684\u65b9\u6cd5+\u8c03\u7528}\n\u5982\u679c\uff08recv.prop==inttype&amp\uff1bobj.prop==inttype | | |\uff08recv.prop==unknown&amp\uff1bobj.prop==unknown\uff09&amp&amp\uff1bFIXNUM_2_P\uff08recv\uff0cobj\uff09\uff09{res=rb_fix\\u plus_fix\uff08recv\uff0cobj\uff09\uff1bres.prop=intype\uff1b}\u5426\u5219\u5982\u679c\uff08_\u5185\u7f6e_\u5c5e\u6027\u6761\u4ef6\uff08FLONUM_2_P\uff08recv\uff0cobj\uff09\uff0crecv\uff0cflotype\uff0cobj\uff0cflotype\uff09\uff09res=db2num\uff08RFLOAT_\u503c\uff08recv\uff09+RFLOAT_\u503c\uff08obj\uff09\uff09__\u5185\u7f6e\u9053\u5177\u5957\u88c5\uff08res\uff0cflotype\uff09\uff1b]else{\u2026//\u4e3a\u5bf9\u8c61recv\u5b9e\u73b0\u7684\u65b9\u6cd5+\u8c03\u7528}\n\u56e0\u4e3a\u6211\u4eec\u5728\u4ee3\u7801\u751f\u6210\u8fc7\u7a0b\u4e2d\u603b\u662f\u77e5\u9053\u5c5e\u6027\uff0c\u6240\u4ee5\u6240\u6709\u5c5e\u6027\u7684\u8d4b\u503c\u548c\u6bd4\u8f83\u90fd\u4f1a\u5728\u6700\u7ec8\u4ee3\u7801\u4e2d\u6d88\u5931\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u53d1\u73b0recv\u548cobj\u90fd\u5177\u6709inttype\u5c5e\u6027\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u4ee3\u7801\u5c06\u662f\uff1a\n\u5982\u679c\u6211\u4eec\u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\u53d1\u73b0recv\u548cobj\u90fd\u5177\u6709\u5c5e\u6027flotype\uff0c\u5219\u6700\u7ec8\u4ee3\u7801\u5c06\u4e3a\uff1a\n\u5982\u679crecv\u548cobj\u7684\u503c\u7684\u5c5e\u6027\u4e3a\u96f6\uff0c\u6211\u4eec\u5c06\u83b7\u5f97\u4e0e\u6ce8\u91ca\u4e4b\u524d\u76f8\u540c\u7684\u539f\u59cb\u4ee3\u7801\u3002\u5982\u679crecv\u6216obj\u53ea\u6709\u4e00\u4e2a\u5c5e\u6027\u4e3a\u96f6\uff0c\u90a3\u4e48\u5728\u6700\u540e\u7684else\u90e8\u5206\u4e2d\u53ea\u6709\u4ee3\u7801\u3002\n\u8003\u8651\u4e0a\u9762\u8ba8\u8bba\u7684\u5206\u6790\u4e4b\u540e\u7684\u4ee3\u7801\u3002\u5206\u6790\u540e\uff0c\u7528\u5c5e\u6027\u6ce8\u91ca\u7684\u7c7b\u4f3c\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a\n\u5982\u679c\uff08\uff01uuuu\u5185\u7f6e\u5c5e\u6027\u6761\u4ef6\uff08FIXNUM_u2_up\uff08v1\uff0cv2\uff09\uff0cv1\uff0cintype\uff0cv2\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08v1\uff0cv2\uff09__\u5185\u7f6e\u9053\u5177\uff08res\u3001inttype\uff09\uff1b\u5982\u679c\uff08\uff01__\u5185\u7f6e_prop_cond\uff08FIXNUM_2_P\uff08res\uff0cv3\uff09\uff0cres\uff0cintype\uff0cv3\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08res\uff0cv3\uff09__\u5185\u7f6e\u9053\u5177\uff08res\u3001inttype\uff09\uff1b\u5982\u679c\uff08\uff01__\u5185\u7f6e_prop_cond\uff08FIXNUM_2_P\uff08res\uff0cv4\uff09\uff0cres\uff0cintype\uff0cv4\uff0cintype\uff09\uff09\u8f6c\u5230\u4e00\u822c\u60c5\u51b5\uff1bres=rb_fix_\u52a0_fix\uff08res\uff0cv4\uff09__\u5185\u7f6e\u5c5e\u6027\u96c6\uff08res\uff0cinttype\uff09\uff1b\u3002\u3002\u3002\n\u73b0\u5728\u5f88\u5bb9\u6613\u627e\u5230\u5e76\u4f20\u64ad\u4e0a\u9762\u6269\u5c55\u7684\u57fa\u672c\u5757\u7684\u7a0b\u5e8f\u53d8\u91cf\u5c5e\u6027\u3002\u5bf9\u4e8eMIR\u5bc4\u5b58\u5668\u4e2d\u7684\u53d8\u91cf\uff0c\u5c5e\u6027\u5206\u6790\u5f88\u7b80\u5355\uff0c\u800c\u5bf9\u4e8e\u7531MIR\u5185\u5b58\u64cd\u4f5c\u6570\u8868\u793a\u7684\u53d8\u91cf\uff0c\u5219\u9700\u8981\u66f4\u590d\u6742\u7684\u5206\u6790\u70b9\u3002\n\u6ce8\u610f\uff1a\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u7701\u7565\u4e86\u5982\u4f55\u8fdb\u884c\u5206\u6790\u7684\u63cf\u8ff0\uff0c\u5c24\u5176\u662f\u5f53\u4ee3\u7801\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\u65f6\u3002\n\u5982\u679c\u5728\u6211\u4eec\u524d\u9762\u770b\u5230\u7684Ruby\u4ee3\u7801v1+v2+v3+v4\u4e2d\uff0c\u4e00\u534a\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u53d8\u91cf\u90fd\u6709fixnum\u503c\uff0c\u53e6\u4e00\u534a\u60c5\u51b5\u4e0b\u7684\u6240\u6709\u53d8\u91cf\u90fd\u6709\u6d6e\u70b9\u6570\u503c\uff0c\u90a3\u4e48\u57fa\u4e8e\u5206\u6790\u7684\u4e13\u95e8\u5316\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8fd9\u662f\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u4e2d\u591a\u6001\u51fd\u6570\u7684\u5e38\u89c1\u60c5\u51b5\u3002\n\u6211\u4eec\u53ea\u80fd\u4e3a\u5176\u4e2d\u4e00\u534a\u7684\u6848\u4f8b\u751f\u6210\u4e13\u95e8\u7684\u4ee3\u7801\uff0c\u5e76\u5728\u53e6\u4e00\u534a\u7684\u6848\u4f8b\u53d1\u751f\u65f6\u8fdb\u884c\u53bb\u4f18\u5316\u3002\u6216\u8005\uff0c\u6211\u4eec\u53ef\u80fd\u53ea\u751f\u6210\u5e76\u4f7f\u7528\u4e00\u822c\u6848\u4f8b\u4ee3\u7801\u3002\u5982\u679c\u5bf9\u67d0\u4e2a\u5c0f\u51fd\u6570\u7684\u7279\u5b9a\u8c03\u7528\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u5177\u6709\u7279\u5b9a\u7684\u7c7b\u578b\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u4ee3\u7801\u5185\u8054\u6765\u6539\u8fdb\u751f\u6210\u7684\u4ee3\u7801\u3002\u90a3&#39\uff1b\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u89e3\u51b3\u65b9\u6848\u3002\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\uff08BBV\uff09\u3002\n\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u5047\u8bbe\u6211\u4eec\u6709\u4e0d\u540c\u7684\u8def\u5f84\u6765\u5230\u8fbe\u4ee3\u7801\u7684\u4e00\u4e2a\u57fa\u672c\u5757\uff08\u6bd4\u5982\u901a\u8fc7\u5bf9\u51fd\u6570\u7684\u4e0d\u540c\u8c03\u7528\uff09\uff0c\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684\u8def\u5f84\u4e0a\uff0c\u6211\u4eec\u6709\u7279\u5b9a\u7c7b\u578b\uff08\u5c5e\u6027\uff09\u7684\u53d8\u91cf\u3002\u6211\u4eec\u53ef\u4ee5\u514b\u9686\u57fa\u672c\u5757\uff0c\u5e76\u4e3a\u4e0d\u540c\u7c7b\u578b\u7684\u53d8\u91cf\u751f\u6210\u4e0d\u540c\u7248\u672c\u7684\u4e13\u7528\u4ee3\u7801\uff0c\u5982\u56fe1\u6240\u793a\uff08\u8bf7\u6ce8\u610f\uff0c\u57fa\u672c\u5757\u8868\u793a\u4e3aBB\uff09\u3002\n\u521b\u5efa\u4e00\u4e2a\u4e13\u95e8\u7684\u57fa\u672c\u5757\u7248\u672c\u53ef\u4ee5\u63a8\u65ad\u51fa\u8f93\u51fa\u53d8\u91cf\u503c\u7684\u7c7b\u578b\uff0c\u6bd4\u5982\u6211\u4eec\u793a\u4f8b\u4e2d\u7684res\u503c\u3002\u8fd9\u53cd\u8fc7\u6765\u4f1a\u5bfc\u81f4\u751f\u6210\u4e0d\u540c\u7248\u672c\u7684\u540e\u7eed\u57fa\u672c\u5757\u3002\n\u5982\u679c\u6211\u4eec\u4e0d&#39\uff1b\u5982\u679c\u4e0d\u9650\u5236\u57fa\u672c\u5757\u7248\u672c\u7684\u6570\u91cf\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e0d\u540c\u7248\u672c\u7684\u7ec4\u5408\u7206\u70b8\u3002\u5b9e\u9645\u4e0a\uff0c\u53ea\u751f\u6210\u4e00\u4e2a\u57fa\u672c\u5757\u7684\u51e0\u4e2a\u7248\u672c\uff0c\u5176\u4e2d\u4e00\u4e2a\u57fa\u672c\u5757\u7248\u672c\u59cb\u7ec8\u7528\u4e8e\u672a\u77e5\u7c7b\u578b\uff08\u96f6\u5c5e\u6027\uff09\u3002\n\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u751f\u6210\u57fa\u672c\u5757\u7248\u672c\u3002\u5b83\u53ef\u4ee5\u7528\u6e34\u671b\u7684\u65b9\u5f0f\u6216\u61d2\u60f0\u7684\u65b9\u5f0f\u6765\u5b8c\u6210\u3002\u5728\u6e34\u671b\u7b56\u7565\u4e2d\uff0c\u5f53\u6211\u4eec\u4e3a\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u4ee3\u7801\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u521b\u5efa\u540e\u7eed\u57fa\u672c\u5757\u7684\u7248\u672c\uff0c\u5e76\u4e3a\u5b83\u4eec\u751f\u6210\u4ee3\u7801\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u4e00\u6b21\u751f\u6210\u6574\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\u3002\n\u5728\u60f0\u6027\u7b56\u7565\u4e2d\uff0c\u6211\u4eec\u53ea\u5728\u5f00\u59cb\u6267\u884c\u57fa\u672c\u5757\u7248\u672c\u65f6\u624d\u4e3a\u8be5\u7248\u672c\u751f\u6210\u4ee3\u7801\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e3a\u7a0b\u5e8f\u4e2d\u5b9e\u9645\u6267\u884c\u7684\u65b9\u6cd5\u57fa\u672c\u5757\u751f\u6210\u4ee3\u7801\u3002\u663e\u7136\uff0c\u61d2\u60f0\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4f1a\u51cf\u5c11\u751f\u6210\u7684\u4ee3\u7801\uff0c\u901a\u5e38\u4e5f\u4f1a\u51cf\u5c11\u7f16\u8bd1\u65f6\u95f4\u3002\uff08\u5982\u679c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u8fd9\u4e24\u79cd\u7b56\u7565\u4e3a\u76f8\u540c\u6570\u91cf\u7684\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u4ee3\u7801\uff0c\u60f0\u6027\u4ee3\u7801\u7f16\u8bd1\u53ef\u80fd\u9700\u8981\u66f4\u591a\u65f6\u95f4\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5355\u72ec\u7684\u57fa\u672c\u5757\u4ee3\u7801\u751f\u6210\u90fd\u9700\u8981\u66f4\u591a\u65f6\u95f4\u8fdb\u884c\u6570\u636e\u521d\u59cb\u5316\u548c\u6700\u7ec8\u786e\u5b9a\u3002\uff09\n\u5982\u524d\u4e00\u8282\u6240\u8ff0\uff0c\u4e0e\u57fa\u4e8e\u5206\u6790\u7684\u4e13\u95e8\u4ee3\u7801\u751f\u6210\u76f8\u6bd4\uff0clazy basic\u5757\u7248\u672c\u63a7\u5236\u6709\u51e0\u4e2a\u4f18\u70b9\uff1a\n\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u9700\u8981\u4e3a\u6240\u6709BBs\u751f\u6210\u673a\u5668\u4ee3\u7801\uff0c\u5f53\u53ea\u6709JIT\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\uff0c\u8fd9\u53ef\u80fd\u5f88\u6709\u5438\u5f15\u529b\uff1b\u6267\u884c\u4e00\u4e2a\u65b0\u7684\u7a0b\u5e8f\u3002\n\u6211\u4eec\u6ca1\u6709&#39\uff1b\u4e0d\u9700\u8981\u7279\u522b\u5b9e\u65bd\u53bb\u4f18\u5316\u3002\u5b83\u662f\u901a\u8fc7BB\u7248\u672c\u63a7\u5236\u81ea\u52a8\u5b8c\u6210\u7684\u3002\n\u8bb8\u591a\u65b9\u6cd5JIT\u53ea\u4e3a\u6267\u884c\u6b21\u6570\u8d85\u8fc7\u67d0\u4e2a\u9608\u503c\u7684\u65b9\u6cd5\u751f\u6210\u4ee3\u7801\u3002\u4ec5\u5728\u51fd\u6570\u8c03\u7528\u65f6\u5207\u6362\u6267\u884c\u3002\u5982\u679c\u4e00\u4e2a\u65b9\u6cd5\u5f88\u5c11\u88ab\u8c03\u7528\uff0c\u4f46\u6709\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u5faa\u73af\uff0c\u90a3\u4e48\u8fd9\u79cd\u65b9\u6cd5\u5c31\u4e0d\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u5728\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u5207\u6362\u5230\u65b0\u7684\u65b9\u6cd5\u4ee3\u7801\u79f0\u4e3a\u5806\u6808\u66ff\u6362\uff08OSR\uff09\u3002\u61d2\u60f0\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4e0d\u9700\u8981OSR\u7684\u7279\u6b8a\u5b9e\u73b0\uff1b\u8fd9\u662f\u81ea\u52a8\u5b8c\u6210\u7684\u3002\n\u6709\u4eba\u53ef\u80fd\u4f1a\u8ba4\u4e3a\uff0c\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u4f1a\u5bfc\u81f4\u4ee3\u7801\u5927\u5c0f\u6fc0\u589e\u3002\u5b9e\u9645\u4e0a\uff0c\u7248\u672c\u7684\u5e73\u5747\u6570\u91cf\u975e\u5e38\u5c11\u3002\u6839\u636eMaxime Chevalier Boisvert\u548cMarc Feely\u7684\u4e00\u7bc7\u8bba\u6587\uff0c\u5927\u7ea695%\u7684\u57fa\u672c\u5757\u5728\u4e00\u7ec4JavaScript\u57fa\u51c6\u4e0a\u53ea\u6709\u4e00\u4e2a\u7248\u672c\uff08\u53c2\u89c1\u901a\u8fc7\u5ef6\u8fdf\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u5220\u9664\u7b80\u5355\u6709\u6548\u7684\u7c7b\u578b\u68c0\u67e5\uff09\u3002\n\u5728\u5f15\u5bfcx86-64 C-to-MIR\u7f16\u8bd1\u5668\uff08\u5927\u7ea630000\u884cC\u4ee3\u7801\uff09\u65f6\uff0c\u751f\u6210\u7684\u57fa\u672c\u5757\u7248\u672c\u4ec5\u5360\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u7684\u7f16\u8bd1\u5668\u51fd\u6570\u7684\u6240\u6709\u57fa\u672c\u5757\u768451%\uff0829131\u4e2d\u670914737\u4e2a\uff09\uff0c\u4ec5\u5360\u7f16\u8bd1\u5668\u6240\u6709\u57fa\u672c\u5757\u768418%\uff0881799\u4e2d\u670914737\u4e2a\uff09\uff0c\u5982\u56fe2\u6240\u793a\u3002\n\u6beb\u4e0d\u5947\u602a\uff0c\u6211\u9996\u5148\u5f00\u59cb\u4e3aMIR\u9879\u76ee\u5b9e\u65bdlazy basic\u5757\u7248\u672c\u63a7\u5236\u3002\nMIR\u9879\u76ee\u7684\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1fMIR\u51fd\u6570\u7684\u6240\u6709\u8c03\u7528\u90fd\u662f\u95f4\u63a5\u7684\uff0c\u901a\u8fc7\u540d\u4e3athunks\u7684\u8fd0\u884c\u65f6\u751f\u6210\u7684\u5c0f\u4ee3\u7801\u6bb5\u5b9e\u73b0\uff0cthunks\u901a\u5e38\u7531\u4e00\u6761\u6216\u4e24\u6761\u673a\u5668\u6307\u4ee4\u7ec4\u6210\u3002Thunks\u7528\u4e8e\u8f7b\u677e\u66f4\u6539\u4efb\u4f55MIR\u529f\u80fd\u7684\u673a\u5668\u4ee3\u7801\uff1b\u4f8b\u5982\uff0c\u6211\u4eec\u9700\u8981\u5c06\u4e13\u7528\u673a\u5668\u4ee3\u7801\u8f6c\u6362\u4e3a\u975e\u4f18\u5316\u4ee3\u7801\u3002\nMIR\u5df2\u7ecf\u6709\u4e86\u4e00\u79cd\u60f0\u6027\u51fd\u6570\u4ee3\u7801\u751f\u6210\u673a\u5236\uff0c\u5b83\u4e5f\u901a\u8fc7thunks\u5b9e\u73b0\u3002\u5728\u7a0b\u5e8f\u6267\u884c\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u51fd\u6570thunk\u90fd\u91cd\u5b9a\u5411\u5230\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\u3002\u5f53\u51fd\u6570\u7b2c\u4e00\u6b21\u88ab\u8c03\u7528\u65f6\uff0cMIR\u4ee3\u7801\u751f\u6210\u5668\u4f18\u5316\u51fd\u6570\u5e76\u4e3a\u5176\u751f\u6210\u673a\u5668\u4ee3\u7801\uff1b\u7136\u540e\u5c06\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u751f\u6210\u7684\u673a\u5668\u4ee3\u7801\uff0c\u5e76\u4ece\u751f\u6210\u7684\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\uff0c\u5982\u56fe3\u6240\u793a\u3002\n\u5f53\u6211\u4eec\u4f7f\u7528\u5ef6\u8fdf\u5757\u7248\u672c\u63a7\u5236\u65f6\uff0c\u51fd\u6570thunk\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5230\u7279\u5b9a\u5730\u5740\u7684\u5207\u6362\uff0c\u8be5\u5730\u5740\u53d6\u51b3\u4e8e\u57fa\u672c\u5757\u5f00\u5934\u7684\u7a0b\u5e8f\u53d8\u91cf\u7684\u5c5e\u6027\u3002\u4f8b\u5982\uff0c\u8be5\u5f00\u5173\u53ef\u4ee5\u4ee5\u591a\u79cd\u65b9\u5f0f\u5b9e\u73b0\u4e3a\u57fa\u4e8e\u8868\u7684\u5f00\u5173\u3002\u4efb\u4f55\u5f00\u5173\u7684\u6548\u7387\u90fd\u4f4e\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684\u4e00\u6761\u8df3\u8f6c\u6307\u4ee4\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u51fd\u6570\u4f7f\u7528\u51e0\u4e2a\u7b80\u5355\u7684\u8df3\u8f6cthunk\u6765\u4ee3\u66ff\u5f00\u5173\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u652f\u6301\u51fd\u6570\u4e0e\u5176thunk\u4e4b\u95f4\u7684\u4e00\u5bf9\u4e00\u5173\u7cfb\u3002\u8fd9\u662f\u56e0\u4e3aMIR\u4e2d\u7684\u51fd\u6570\u7531\u5176thunk\u5730\u5740\u8868\u793a\uff0c\u51fd\u6570\u662f\u53ef\u4ee5\u8d4b\u503c\u548c\u6bd4\u8f83\u7684\u4e00\u7ea7\u503c\u3002\n\u7528\u4e8e\u5ef6\u8fdf\u57fa\u672c\u5757\u7248\u672c\u63a7\u5236\u7684\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u57fa\u672c\u5757\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\u6216\u8be5\u7248\u672c\u7684\u5df2\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u51fd\u6570\u8c03\u7528\u8fd8\u901a\u8fc7\u4e00\u4e9b\u5bc4\u5b58\u5668\u4f20\u9012\u8c03\u7528\u53c2\u6570\u5c5e\u6027\u7684\u6807\u8bc6\u7b26\uff0c\u6839\u636e\u6240\u4f7f\u7528\u7684\u5e94\u7528\u7a0b\u5e8f\u4e8c\u8fdb\u5236\u63a5\u53e3\uff08ABI\uff09\uff0c\u8fd9\u4e9b\u5bc4\u5b58\u5668\u4e0d\u662f\u88ab\u8c03\u7528\u51fd\u6570\u4fdd\u5b58\u7684\u3002\n\u6700\u521d\uff0c\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u673a\u5668\u4ee3\u7801\u751f\u6210\u5668\uff0c\u8be5\u751f\u6210\u5668\u5728\u7279\u6b8a\u6a21\u5f0f\u4e0b\u5de5\u4f5c\u3002\u5b83\u53ea\u4f18\u5316\u529f\u80fd\uff0c\u4f46\u4e0d\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u76f8\u53cd\uff0c\u5b83\u521b\u5efa\u4e86\u51fd\u6570\u7684\u4e00\u4e2a\u7248\u672c#39\uff1bs\u7b2c\u4e00\u4e2a\u57fa\u672c\u5757\uff0c\u5c06\u51fd\u6570thunk\u91cd\u5b9a\u5411\u5230\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\uff0c\u5e76\u8c03\u7528\u5b83\u3002\u4e0b\u4e00\u4e2a\u8c03\u7528\u4f1a\u5728\u9700\u8981\u65b0\u7684\u57fa\u672c\u5757\u7248\u672c\u65f6\u4fee\u6539\u51fd\u6570thunk\u3002\u56fe4\u8bf4\u660e\u4e86\u5f53\u57fa\u672c\u5757\u7248\u672c\u7684\u6570\u91cf\u9650\u5236\u4e3a\u4e09\u4e2a\u65f6\uff0c\u51fd\u6570thunk\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\n\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\u5904\u7406MIR\u5c5e\u6027\u6307\u4ee4\uff0c\u4f18\u5316\u7ed9\u5b9a\u5c5e\u6027\u7684\u4ee3\u7801\uff0c\u5e76\u751f\u6210\u57fa\u672c\u5757\u7684\u673a\u5668\u4ee3\u7801\u3002\u5b83\u67e5\u627e\u5728\u5f53\u524d\u57fa\u672c\u5757\u672b\u5c3e\u5177\u6709\u5c5e\u6027\u7684\u540e\u7eed\u57fa\u672c\u5757\uff0c\u5e76\u5c06\u8be5\u57fa\u672c\u5757\u672b\u5c3e\u7684\u8df3\u8f6c\u6dfb\u52a0\u5230\u540e\u7eed\u57fa\u672c\u5757\u7684\u673a\u5668\u4ee3\u7801\u4e2d\u3002\n\u5982\u679c\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u5668\u53ef\u4ee5&#39\uff1b\u627e\u4e0d\u5230\u57fa\u672c\u5757\u7684\u57fa\u672c\u5757\u7248\u672c&#39\uff1b\u5b83\u521b\u9020\u4e86\u4ed6\u4eec\u7684\u7ee7\u4efb\u8005\uff0c\u4ee5\u53ca\u4ed6\u4eec\u7684\u91cd\u51fb\u3002\u751f\u6210\u5668\u5c06\u8df3\u8f6c\u6dfb\u52a0\u5230\u5f53\u524d\u57fa\u672c\u5757\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u672b\u5c3e\u7684\u65b0thunks\uff0c\u5e76\u4ece\u5f53\u524d\u7248\u672c\u7684\u673a\u5668\u4ee3\u7801\u7ee7\u7eed\u6267\u884c\u3002\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u8df3\u8fc7\u57fa\u672c\u5757\u7248\u672c\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u57fa\u672c\u5757\u91cd\u51fb\u5b8c\u6210\u3002\u5728\u539f\u59cb\u7684\u57fa\u672c\u5757\u7248\u672c\u4e2d\uff0c\u51fa\u73b0&#39\uff1bs\u4e00\u4e2a\u95f4\u63a5\u8df3\u8f6c\u6216MIR switch\u6307\u4ee4\uff0c\u5176\u4e2d\u591a\u4e2acase\u5177\u6709\u76f8\u540c\u7684\u76ee\u6807\u6807\u7b7e\u3002\nMIR\u9879\u76ee\u4e2d\u7684\u61d2\u60f0\u57fa\u672c\u5757\u751f\u6210\u662f\u53d7\u6700\u8fd1\u7684Shopify YJIT for CRuby\u7684\u542f\u53d1\u3002\u4f46\u4e24\u8005\u4e4b\u95f4\u6709\u91cd\u8981\u533a\u522b\uff1a\nYJIT\u662f\u4e00\u79cd\u4e13\u95e8\u7684CRuby JIT\uff0c\u800cMIR\u662f\u4e00\u79cd\u901a\u7528\u7684JIT\uff0c\u53ef\u4ee5\u7528\u4e8e\u4e0d\u540c\u8bed\u8a00\u7684JIT\u5b9e\u73b0\u3002\nYJIT\u57fa\u672c\u5757\u662fCRuby VM\u6307\u4ee4\u57fa\u672c\u5757\uff0c\u800cMIR\u57fa\u672c\u5757\u662f\u673a\u5668\u6307\u4ee4\u7ea7\u57fa\u672c\u5757\u3002\nYJIT\u4e0d\u4f1a\u5bf9\u57fa\u672c\u5757\u7248\u672c\u8fdb\u884c\u4efb\u4f55\u4f18\u5316\u3002MIR\u751f\u6210\u5668\u9996\u5148\u4f18\u5316\u6574\u4e2a\u529f\u80fd\uff0c\u7136\u540e\u4f18\u5316\u5355\u4e2a\u57fa\u672c\u5757\u7248\u672c\u3002\nYJIT\u4ec5\u652f\u6301x86-64\u4ee3\u7801\u751f\u6210\u3002MIR\u652f\u6301x86-64\u3001AARC64\u3001ppc64\u3001s390\u548c64\u4f4dRISCV\u3002\n\u4f5c\u4e3a\u4f60&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u770b\u5230\uff0c\u4f7f\u7528\u57fa\u672c\u5757\u7248\u672c\u751f\u6210\u7684\u4ee3\u7801\u6bd4\u4e3a\u6574\u4e2a\u51fd\u6570\u751f\u6210\u7684\u4ee3\u7801\u5305\u542b\u66f4\u591a\u7684\u8df3\u8f6c\u3002\u4f46\u6211\u6ca1\u6709\u53d1\u73b0x86-64\u673a\u5668\u4e0a\u7684\u6027\u80fd\u4e0e\u6211\u7528\u4e8eMIR\u548cC-to-MIR\u7f16\u8bd1\u5668\u7684\u57fa\u51c6\u6d4b\u8bd5\u6709\u4efb\u4f55\u5dee\u5f02\uff08\u53ea\u662f\u4e00\u4e9b\u566a\u97f3\uff09\u3002\u6211\u7684\u731c\u6d4b\u662f\uff0c\u5728\u73b0\u4ee3\u5904\u7406\u5668\u4e0a\uff0c\u76f4\u63a5\u8df3\u8f6c\u6307\u4ee4\u7684\u6210\u672c\u53ef\u80fd\u5f88\u4f4e\uff0c\u56e0\u4e3a\u5b83\u4eec\u5177\u6709\u590d\u6742\u7684\u5206\u652f\u9884\u6d4b\u5355\u5143\uff0c\u4efb\u4f55\u989d\u5916\u7684\u6210\u672c\u90fd\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u57fa\u672c\u5757\u7248\u672c\u4ea7\u751f\u7684\u66f4\u597d\u7684\u4ee3\u7801\u5c40\u90e8\u6027\u6765\u8865\u507f\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211&#39\uff1b\u6211\u5df2\u7ecf\u63cf\u8ff0\u4e86\u652f\u6301\u52a8\u6001\u7f16\u7a0b\u8bed\u8a00\u65b9\u6cd5JIT\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002\u60f0\u6027\u57fa\u672c\u5757\u4ee3\u7801\u751f\u6210\u53ef\u80fd\u662f\u5b9e\u73b0\u8ddf\u8e2aJIT\u7684\u4e00\u4e2a\u6b65\u9aa4\u3002\n\u8ddf\u8e2aJIT\u8bb0\u5f55\u901a\u5e38\u5728\u70ed\u5faa\u73af\u4e2d\u6267\u884c\u7684VM\u6307\u4ee4\uff0c\u5bf9\u5b83\u4eec\u8fdb\u884c\u4f18\u5316\uff0c\u5e76\u4e3a\u5b83\u4eec\u751f\u6210\u673a\u5668\u4ee3\u7801\u3002\u56fe6\u5de6\u4fa7\u7684\u65b9\u6846\u56fe\u663e\u793a\u4e86\u4e00\u4e2a\u5faa\u73af\u6267\u884c\u7684\u793a\u4f8b\uff0c\u6700\u9891\u7e41\u6267\u884c\u7684\u5757\u4e2d\u586b\u5145\u4e86dar\n......", "note_en": "For the past three years, I have spent half of my work time on the  MIR project. The goal is to create a universal lightweight Just-in-Time (JIT) compiler, and the project&#39;s cornerstone is a machine-independent  medium-level intermediate representation (MIR). For more about the project, see my previous articles on Red Hat Developer:\n  So far, my work on the MIR project has focused on making a fast JIT compiler that generates decent machine code for a few major targets: x86-64 Linux and macOS, aarch64, s390x, riscv64 Linux, and ppc64 big- and little-endian Linux.\n The project in its current state is a method JIT compiler that can be effectively used for statically typed programming languages such as  C, which is the most widely used statically typed language. We&#39;ve developed a C-language JIT based on the C-to-MIR  compiler.\n The original goal for the MIR project was to implement a better  Ruby JIT compiler. (Specifically, I&#39;m focusing on CRuby, the default Ruby interpreter, which is  written in C.)  Ruby is a  very dynamic programming language\u2014it is so flexible that you can even redefine the plus method for integer numbers.\n To achieve better performance for dynamic programming languages, you need to follow program execution, make various assumptions from the execution, and generate code based on those assumptions. For example, you might find that a given plus operation in a given method has only integer operands. You can assume that this will always be the case and generate  specialized plus operation code working only for integer operands.\n You need to use different techniques to guarantee that your assumptions hold, such as implementing assumption checks or guards, or proving that on a given execution path the assumption is always true. If the guards find that the assumption is wrong, you need to switch to code that can work for any case. The process of switching from specialized code to general case code is frequently called  deoptimization in the JIT context.\n In this article, I&#39;ll discuss how I plan to support the generation of specialized and deoptimized code in MIR, and what support has already been implemented in the MIR project.\n Note: Most JITs are specialized for specific languages: There&#39;s  V8 for  JavaScript, for instance, or  luajit for Lua and  PHP JIT for  PHP.\u00a0 I am more interested in  language agnostic support to facilitate the implementation of specialization and deoptimization in JITs for different dynamic programming languages. (See  How the JIT compiler boosts Java performance in OpenJDK for more about\u00a0deoptimization in a JIT compiler.)\n  So that we can look specifically at specialization and deoptimization in the MIR compiler, I will use the following simplified code for the virtual machine (VM) instruction  plus in the CRuby implementation:\n if (FIXNUM_2_P(recv, obj) &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, INTEGER_REDEFINED_OP_FLAG)) { res = rb_fix_plus_fix(recv, obj); } else if (FLONUM_2_P(recv, obj) &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, FLOAT_REDEFINED_OP_FLAG)) { res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); } else if (SPECIAL_CONST_P(recv) || SPECIAL_CONST_P(obj)) { ... } else if (RBASIC_CLASS(recv) == rb_cFloat &amp;&amp; RBASIC_CLASS(obj) == rb_cFloat &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, FLOAT_REDEFINED_OP_FLAG)) { ... } else if (RBASIC_CLASS(recv) == rb_cString &amp;&amp; RBASIC_CLASS(obj) == rb_cString &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, STRING_REDEFINED_OP_FLAG)) { ... } else if (RBASIC_CLASS(recv) == rb_cArray &amp;&amp; RBASIC_CLASS(obj) == rb_cArray &amp;&amp; BASIC_OP_UNREDEFINED_P(BOP_PLUS, ARRAY_REDEFINED_OP_FLAG)) { ... } else { .. // call of method implementing + for object recv }\n So, what&#39;s happening here? First, the code checks that operands are fixed numbers and that the plus method for integers is not redefined. If that is the case, the code implements the  plus operation for fixed numbers. Otherwise, it makes analogous checks for floating point numbers, strings, and arrays. At the end, it calls the Ruby method implementing  + for the object  recv.\n Fixed numbers (or  fixnums) in CRuby are a subset of integers that can be efficiently supported by the target machine. Bigger numbers are represented as multi-precision numbers implemented by the  GMP library.\n All values in CRuby are represented by a machine word and  tagged. For example, a fixnum always has 1 as the least significant bit of the word and a pointer to an object always has three (or two, on 32-bit targets) zero-least significant bits. So the macro  FIXNUM_2_P is implemented as the following code:\n  And the fixnum  plus operation looks like this, if we omit the code for checking overflow:\n  Note: For further simplicity, in the next sections I will ignore checks for redefinition of the  plus operation, such as the invocations of the macro  BASIC_OP_UNREDEFINED_P in the above example.\n  Assume that we&#39;ve checked the operand types of a particular  plus operation and found so far that they have always been fixed numbers. In that case, we could generate the following:\n  At first glance, it seems we didn&#39;t improve the code because the check ( FIXNUM_2_P) is still present. But if we look at a sequence of several plus operations,  v1 + v2 + v3 + v4, we&#39;ll have:\n if (!FIXNUM_2_P(v1, v2)) goto general_case; res = rb_fix_plus_fix(v1, v2) if (!FIXNUM_2_P(res, v3)) goto general_case; res = rb_fix_plus_fix(res, v3) if (!FIXNUM_2_P(res, v4)) goto general_case; res = rb_fix_plus_fix(res, v4)\n A smart compiler could remove the last two  FIXNUM_2_P checks. Unfortunately, neither GCC nor Clang can figure out that  res always has 1 as the least significant bit. Therefore, these compilers do not know the last two  FIXNUM_2_P checks should be removed. GCC&#39;s situation might change in the future with the full implementation of  Project Ranger. (By the way, if the values were represented by a structure with two members,  type and  value, GCC/LLVM even now could figure out their types and remove the last two checks.)\n  Even without removing the redundant checks, executing such specialized code is beneficial because compilers can successfully do other optimizations, such as removing redundant loads and stores. That&#39;s because such code forms specific regions called  extended basic blocks (EBBs), and optimizing compilers work particularly well on such regions. Code like this also has much better code locality and branch prediction.\n  How might we implement the code labeled by  general_case in the fixed number example? There are three possibilities:\n A JIT compiler call to remove the specialized code generated for the Ruby method, then generate and use general code for the method VM instructions.\n  A  goto to a particular location containing all code for all type cases of the method VM instructions.\n As switching to the interpreter in CRuby is very expensive, it might be better to generate general case code at the same time as specialized code, along with  gotos to the general code from the specialized code when the guards fail. After several executions of the  gotos to the general case code, we could rebuild the entire method with the current profile info.\n  The MIR JIT compiler is not smarter than GCC or Clang, and it encounters the same problem of removing redundant checks for tagged values. To solve the problem, I am planning to introduce  properties for program variables and MIR instructions, along with built-in C functions working with properties:\n  Note: For brevity, I&#39;ll skip over a description of property support on the MIR level.\n Properties are integer constants. We can use  __builtin_prop_set to assign properties to program variables at a given execution point. Properties are propagated to other program variables through variable assignments.\n When we cannot calculate the property of a program variable at a given execution point, the variable gets the  zero property at that point. A zero property is an unknown property.\n We can annotate  plus code with the new built-in calls for properties describing program variable types as follows:\n enum prop { unknown = 0, inttype, flotype, ... }; if (__builtin_prop_cond (FIXNUM_2_P(recv, obj), recv, intype, obj, intype)) { res = rb_fix_plus_fix(recv, obj); __builtin_prop_set (res, inttype) } else if (__builtin_prop_cond (FLONUM_2_P(recv, obj), recv, flotype, obj, flotype)) res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); __builtin_prop_set (res, flotype); } else { ... // call of method implemented + for object recv }\n  if (recv.prop == intype &amp;&amp; obj.prop == inttype || (recv.prop == unknown &amp;&amp; obj.prop == unknown) &amp;&amp; FIXNUM_2_P(recv, obj)) { res = rb_fix_plus_fix(recv, obj); res.prop = intype; } else if (__builtin_prop_cond (FLONUM_2_P(recv, obj), recv, flotype, obj, flotype)) res = DBL2NUM(RFLOAT_VALUE(recv) + RFLOAT_VALUE(obj)); __builtin_prop_set (res, flotype); } else { ... // call of method implemented + for object recv }\n Because we always know properties during code generation,  all assignments and comparisons of properties will go away in the final code. For example, if we figure out that  recv and  obj both have the property  inttype, the final code will be:\n  If we figure out during analysis that  recv and  obj both have the property  flotype, the final code will be:\n  If the properties of values of  recv and  obj are zero, we will have the original code as before the annotation. If only one property of  recv or  obj is zero, we will have only the code in the final  else part.\n Consider the code after the profiling discussed above. The analogous code annotated with properties after profiling will look like this:\n if (!__builtin_prop_cond (FIXNUM_2_P(v1, v2), v1, intype, v2, intype)) goto general_case;res = rb_fix_plus_fix(v1, v2);__builtin_prop_set (res, inttype);if (!__builtin_prop_cond (FIXNUM_2_P(res, v3), res, intype, v3, intype)) goto general_case;res = rb_fix_plus_fix(res, v3);__builtin_prop_set (res, inttype);if (!__builtin_prop_cond (FIXNUM_2_P(res, v4), res, intype, v4, intype)) goto general_case;res = rb_fix_plus_fix(res, v4);__builtin_prop_set (res, inttype);...\n It is now pretty easy to find and propagate properties of program variables for the extended basic block above. Property analysis is trivial for variables in MIR registers, while for variables represented by MIR memory operands it requires a more complex point-to analysis.\n   Note: For brevity, I am omitting a description of how to do the profiling, especially when code is executed in more than one thread.\n  What would happen for specialization based on profiling if, in the Ruby code  v1 + v2 + v3 + v4 that we looked at earlier, all variables in half of all cases had fixnum values and in the other half had floating point number values? This is a common situation for a polymorphic function in dynamic programming languages.\n We could generate specialized code only for one half of the cases and do the deoptimization when a case from the other half occurred. Or we might generate and use only general case code. If a particular call to some small function had specific type values in the majority of cases, we could improve the generated code by using code inlining. That&#39;s a complicated solution, however. A simpler approach to solve the problem is  basic block versioning (BBV).\n How does basic block versioning work? Suppose we have different paths to reach a basic block of our code (by different calls to a function, say), and on these different paths we have specific types (properties) of variables. We can clone the basic block and generate different versions of specialized code for different types of variables, as illustrated in Figure 1 (note that basic blocks are denoted as BB).\n  Creating a specialized basic block version can deduce types of outgoing variable values, like the value of  res in our example. This in turn can result in the generation of different versions of successor basic blocks.\n You can probably guess that if we don&#39;t constrain the number of basic block versions, a combinatorial explosion of different versions might arise. In practice, only a few versions of one basic block are generated, where one basic block version is always used for unknown types (zero properties).\n  There are two ways to generate basic block versions. It can be done in an  eager way or in a  lazy way. In the eager strategy, when we generate code for a basic block version, we also create versions of successor basic blocks and generate code for them, and so on. In other words, we generate code for the whole method at once.\n In the lazy strategy, we generate code for a basic block version only when we start execution of that version. This means that we generate code for method basic blocks that are actually executed in the program. Obviously, lazy basic block versioning results in less generated code and, usually, less compilation time. (If we need to generate code for the same number of basic block versions with both strategies, lazy code compilation would probably require more time because of more time spent for data initialization and finalization for each separate basic block code generation.)\n  When compared to specialized code generation based on profiling, as described in the previous section, lazy basic block versioning has several advantages:\n We don&#39;t need to generate machine code for all BBs, which can be attractive when only a small part of the JIT&#39;ed program is executed.\n  We don&#39;t need to do special implementation of deoptimization. It is automatically done through BB versioning.\n  Many method JITs generate code only for methods that were executed a number of times greater than some threshold. The execution is switched only at function calls. Such an approach does not work well if a method is called rarely but has a very long-running loop. Switching to new method code during method execution is called  on-stack replacement (OSR). Lazy basic block versioning does not require a special implementation of OSR; it is done automatically.\n One might think that basic block versioning results in an explosion in code size. In practice, the average number of versions is quite small. About 95 percent of basic blocks had only one version on a set of JavaScript benchmarks, according to a paper by Maxime Chevalier-Boisvert and Marc Feely (see  Simple and Effective Type Check Removal through Lazy Basic Block Versioning).\n When bootstrapping the x86-64 C-to-MIR compiler, which is about 30,000 lines of C code, the number of generated basic block versions is only 51 percent of all basic blocks of the compiler functions executed at least once (14,737 out of 29,131) and only 18 percent (14,737 out of 81,799) of all basic blocks of the compiler, as you can see in Figure 2.\n  It should come as no surprise that I started to implement lazy basic block versioning first for the MIR project.\n  How is lazy basic block versioning implemented for the MIR project? All calls of MIR functions are indirect and implemented through small runtime-generated code snippets called  thunks, which usually consist of one or two machine instructions. Thunks are used to easily change machine code for any MIR function; for instance, we need this for switching specialized machine code to deoptimized code.\n MIR already has a  lazy function code generation mechanism, which is also implemented through thunks. At the start of program execution, all function thunks redirect to the machine code generator. When a function is called for the first time, the MIR code generator optimizes the function and generates machine code for it; the function thunk is then redirected to the generated machine code and execution continues from the generated code, as shown in Figure 3.\n  When we use lazy block versioning, the function thunk implements a switch to a specific address that depends on the properties of program variables at the beginning of the basic block. The switch can be implemented in various ways\u2014as a table-based switch, for instance. Any switch is less efficient than just the one jump instruction used previously. Still, we cannot use several simple jump thunks for one function instead of the switch, as we need to support a one-to-one relation between a function and its thunk. That is because a function in MIR is represented by its thunk address, and functions are first-class values that can be assigned and compared.\n The function thunk for lazy basic block versioning redirects to a machine code generator of a basic block version or to already-generated machine code of that version. A function call also passes an identifier of the properties of call arguments through some register that is not saved by a called function according to the application binary interface (ABI) used.\n Initially, a function thunk redirects to a machine code generator, which works in a special mode. It only optimizes the function but does not generate machine code. Instead, it creates a version of the function&#39;s first basic block, redirects the function thunk to the basic block version generator, and calls it. The next calls modify the function thunk whenever a new basic block version is necessary. Figure 4 illustrates how the function thunk changes when the limit for the number of basic block versions is three.\n  The basic block version generator processes MIR property instructions optimizing code for the given properties, and generates machine code for the basic block. It finds successor basic blocks with properties at the end of the current basic block and adds jumps at the end of that basic block to the machine code of its successors.\n If the basic block version generator can&#39;t find basic block versions of a basic block&#39;s successors, it creates them, along with their thunks. The generator adds jumps to the new thunks at the end of the machine code of the current basic block version and continues execution from the machine code of the current version. In rare cases, jumps through basic block versions can still be done through basic block thunks. This happens when, in the original basic block version, there&#39;s an indirect jump or MIR switch instruction with more than one case having the same target label.\n   Lazy basic block generation in the MIR project was inspired by the recent  Shopify YJIT for CRuby. But there are important differences between the two:\n YJIT is a specialized CRuby JIT, whereas MIR is a universal JIT and can be used for JIT implementations of different languages.\n  A YJIT basic block is a CRuby VM instruction basic block, whereas a MIR basic block is a machine-instruction-level basic block.\n  YJIT does not do any optimization of basic block versions. The MIR generator optimizes the whole function first and individual basic block versions later.\n  YJIT only supports x86-64 code generation. MIR supports x86-64, aarch64, ppc64, s390, and 64-bit RISCV.\n As you&#39;ve seen, code generated with basic block versions contains more jumps than generated code for the entire function. But I did not find any performance difference on x86-64 machines (just some noise) with the  benchmarks I use for the MIR and the C-to-MIR compilers. My guess is that direct jump instructions are probably low cost on modern processors, with their sophisticated branch prediction units, and any additional cost is compensated by better code locality produced by using basic block versions.\n  So far, I&#39;ve described approaches to support the implementation of method JITs for dynamic programming languages. Lazy basic block code generation could be one step towards implementing a  tracing JIT.\n A tracing JIT records VM instructions that are usually executed in a hot loop, optimizes them, and generates machine code for them. The block diagram on the left side of Figure 6 shows an example of a loop execution, with the most frequently executed blocks filled with a dar\n......", "posttime": "2022-02-17 14:53:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u7f16\u8bd1,\u7f16\u8bd1\u5668,specialization", "title": "MIR\u8f7b\u91cf\u7ea7JIT\u7f16\u8bd1\u5668\u7684\u4ee3\u7801\u4e13\u95e8\u5316", "title_en": "Code specialization for the MIR lightweight JIT compiler", "transed": 1, "url": "https://developers.redhat.com/articles/2022/02/16/code-specialization-mir-lightweight-jit-compiler", "via": "", "real_tags": ["\u4ee3\u7801", "\u7f16\u8bd1", "\u7f16\u8bd1\u5668"]}]