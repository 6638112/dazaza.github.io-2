[{"category": "", "categoryclass": "", "imagename": "8fdcb6e5802a7c5096c427f910cc7421.jpg", "infoid": 1069509, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u66b4\u96ea\u5a31\u4e50\u7684\u8054\u5408\u521b\u59cb\u4eba\u517c\u524d CEO Mike Morhaime \u4eca\u5929\u65e9\u4e9b\u65f6\u5019\u5c31\u672c\u5468\u65e9\u4e9b\u65f6\u5019\u9488\u5bf9\u52a8\u89c6\u66b4\u96ea\u7684\u6307\u63a7\u548c\u8bc9\u8bbc\u53d1\u8868\u4e86\u4e00\u4efd\u58f0\u660e\uff0c\u544a\u8bc9\u4ed6\u524d\u516c\u53f8\u7684\u5973\u6027\u201c\u6211\u8f9c\u8d1f\u4e86\u4f60\u201d\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u9996\u5148\u9488\u5bf9\u6709\u5173\u6307\u63a7\u7684\u81ea\u6740\u3001\u9a9a\u6270\u548c\u5f3a\u5978\u4e3b\u9898\u53d1\u51fa\u89e6\u53d1\u8b66\u544a\u3002\u65e9\u5728 1991 \u5e74\uff0cMorhaime \u5c31\u4e0e Allen Adham \u548c Frank Pearce \u4e00\u8d77\u521b\u7acb\u4e86\u66b4\u96ea\uff0c\u62c5\u4efb\u8be5\u516c\u53f8\u603b\u88c1\uff0c\u76f4\u5230\u6700\u7ec8\u5728 2018 \u5e74\u7684\u66b4\u96ea\u5609\u5e74\u534e\u671f\u95f4\u5ba3\u5e03\u4ed6\u5c06\u5378\u4efb - \u7136\u540e\u5728 2019 \u5e74 4 \u6708\u5b8c\u5168\u79bb\u5f00\u66b4\u96ea\uff0c\u6240\u4ee5\u4e0d\u4e45\u524d\u3002\u5728\u4eca\u5929\u7684\u58f0\u660e\u4e2d\uff0cMorhaime \u8bf4\u4ed6\u662f\u5982\u4f55\u9605\u8bfb\u5bf9\u52a8\u89c6\u66b4\u96ea\u7684\u5b8c\u6574\u6295\u8bc9\u7684\u2014\u2014\u5173\u4e8e\u4ed6\u7684\u524d\u516c\u53f8\u88ab\u6307\u63a7\u7684\u6240\u8c13\u201c\u5144\u5f1f\u4f1a\u7537\u5b69\u6587\u5316\u201d\u2014\u2014\u5e76\u79f0\u5176\u201c\u975e\u5e38\u4ee4\u4eba\u4e0d\u5b89\u4e14\u96be\u4ee5\u9605\u8bfb\u201d\u3002\u4ed6\u8bf4\uff1a\u201c\u6211\u5f88\u60ed\u6127\u3002\u611f\u89c9\u5c31\u50cf\u6211\u4ee5\u4e3a\u6211\u6240\u4ee3\u8868\u7684\u4e00\u5207\u90fd\u88ab\u51b2\u8d70\u4e86\u3002\u66f4\u7cdf\u7cd5\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u771f\u5b9e\u7684\u4eba\u53d7\u5230\u4e86\u4f24\u5bb3\uff0c\u6709\u4e9b\u5973\u6027\u6709\u8fc7\u53ef\u6015\u7684\u7ecf\u5386\u3002\u201d \u201c\u5982\u6b64\u591a\u7684\u5973\u6027\u53d7\u5230\u8650\u5f85\u4e14\u5f97\u4e0d\u5230\u652f\u6301\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u610f\u5473\u7740\u6211\u4eec\u8ba9\u5979\u4eec\u5931\u671b\uff0c\u201d\u4ed6\u7ee7\u7eed\u8bf4\u9053\u3002 \u201c\u5728\u516c\u53f8\u7684\u5404\u4e2a\u5c42\u9762\u6d88\u9664\u4efb\u4f55\u5f62\u5f0f\u7684\u6bd2\u5bb3\u548c\u9a9a\u6270\u662f\u9886\u5bfc\u5c42\u7684\u8d23\u4efb\u3002\u5bf9\u4e8e\u7ecf\u5386\u8fc7\u8fd9\u4e9b\u4e8b\u60c5\u7684\u66b4\u96ea\u5973\u6027\uff0c\u6211\u975e\u5e38\u62b1\u6b49\u8ba9\u4f60\u4eec\u5931\u671b\u4e86\u3002 \u201c\u6211\u610f\u8bc6\u5230\u8fd9\u4e9b\u53ea\u662f\u8bf4\u8bf4\u800c\u5df2\uff0c\u4f46\u6211\u60f3\u611f\u8c22\u90a3\u4e9b\u7ecf\u5386\u8fc7\u7cdf\u7cd5\u7ecf\u5386\u7684\u5973\u6027\u3002\u6211\u542c\u5230\u4f60\u7684\u58f0\u97f3\uff0c\u6211\u76f8\u4fe1\u4f60\uff0c\u6211\u5f88\u62b1\u6b49\u8ba9\u4f60\u5931\u671b\u4e86\u3002\u201d\u60a8\u53ef\u4ee5\u9605\u8bfb\u4e0b\u9762\u7684\u5b8c\u6574\u58f0\u660e\u3002\u5728\u66b4\u96ea\u4efb\u804c\u671f\u95f4\uff0cMorhaime \u516c\u5f00\u53cd\u5bf9\u6307\u8d23\u4ed6\u7684\u516c\u53f8\u5728\u5176\u6e38\u620f\u4e2d\u7f3a\u4e4f\u6027\u522b\u548c\u79cd\u65cf\u591a\u6837\u6027\u4ee5\u53ca\u5305\u5bb9\u6027\uff0c\u5e76\u8c34\u8d23\u5728 GamerGate \u65f6\u4ee3\u6e38\u620f\u793e\u533a\u4e2d\u7684\u5728\u7ebf\u6ee5\u7528\u884c\u4e3a\u3002\u52a0\u5dde\u516c\u5e73\u5c31\u4e1a\u548c\u4f4f\u623f\u90e8\u5bf9\u52a8\u89c6\u66b4\u96ea\u7684\u8bc9\u8bbc\u4ecd\u5728\u8fdb\u884c\u4e2d\u3002", "note_en": "Co-founder and ex-CEO of Blizzard Entertainment Mike Morhaime gave a statement earlier today about  the current allegations and lawsuit against Activision-Blizzard from earlier this week, telling the women of his former company \u201cI failed you\u201d. Please be aware that we\u2019re starting with a\u00a0 trigger warning\u00a0for the topics of suicide, harassment, and rape\u00a0regarding the accusations.\n Morhaime founded Blizzard along with\u00a0Allen Adham and Frank Pearce\u00a0back in 1991, serving as president of the company\u00a0until  finally announcing he was stepping down in 2018\u00a0during that year\u2019s BlizzCon \u2013 before leaving Blizzard entirely in April 2019, so not that long ago.\n In his statement today, Morhaime says how he has read the full complaint against Activision-Blizzard \u2013 regarding the alleged \u201cfrat-boy culture\u201d his former company is accused of \u2013 and calls it \u201d very disturbing and difficult to read.\u201d He says, \u201cI am ashamed. It feels like everything I thought I stood for has been washed away. What\u2019s worse but even more important, real people have been harmed, and some women had terrible experiences.\u201d\n  \u201cThe fact that so many women were mistreated and were not supported means we let them down,\u201d he continues. \u201cIt is the responsibility of leadership to stamp out toxicity and harassment in any form, across all levels of the company. To the Blizzard women who experienced any of these things, I am extremely sorry that I failed you.\n \u201cI realise that these are just words, but I wanted to acknowledge the women who had awful experiences. I hear you, I believe you, and I am so sorry to have let you down.\u201d You can read the full statement below.\n   While he was at Blizzard, Morhaime spoke out against accusations of his company  having a lack of gender and ethnic diversity and inclusiveness in its games, as well as  condemning online abuse in the gaming community during the time of GamerGate.\n The lawsuit from the\u00a0California Department of Fair Employment and Housing towards Activision Blizzard is still ongoing.", "posttime": "2021-07-25 05:10:35", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "mike,\u66b4\u96ea", "title": "\u524d CEO Mike Morhaime \u5bf9\u66b4\u96ea\u7684\u5973\u6027\u8bf4\uff1a\u201c\u6211\u5f88\u62b1\u6b49\u8ba9\u4f60\u4eec\u5931\u671b\u4e86\u201d", "title_en": "Ex-CEO Mike Morhaime to the women of Blizzard: \u201cI am so sorry to have let you down\u201d", "transed": 1, "url": "https://www.pcgamesn.com/activision-blizzard-lawsuit-mike-morhaime", "via": "", "real_tags": ["mike", "\u66b4\u96ea"]}, {"category": "", "categoryclass": "", "imagename": "9c9197eddd72691970b84bcd3f490061.jpg", "infoid": 1069508, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u5c1a\u672a\u53d1\u5e03 Windows 11\uff0c\u4f46\u65b0\u7684\u64cd\u4f5c\u7cfb\u7edf\u5df2\u7ecf\u53ef\u4f9b\u4e0b\u8f7d\u548c\u9884\u89c8\u3002\u5f53\u7136\uff0c\u7f51\u7edc\u72af\u7f6a\u5206\u5b50\u6b63\u5728\u5229\u7528\u8fd9\u4e00\u70b9\uff0c\u5c06\u6076\u610f\u8f6f\u4ef6\u53d1\u9001\u7ed9\u8ba4\u4e3a\u81ea\u5df1\u6b63\u5728\u4e0b\u8f7d Microsoft \u65b0\u64cd\u4f5c\u7cfb\u7edf\u7684\u7528\u6237\u3002\u5fae\u8f6f\u5b9e\u9645\u4e0a\u58f0\u79f0 Windows 10 \u5c06\u662f Windows \u7684\u6700\u540e\u4e00\u4e2a\u7248\u672c\uff0c\u8be5\u516c\u53f8\u53ea\u4f1a\u4ece\u90a3\u91cc\u53d1\u5e03\u66f4\u65b0\u3002\u7136\u800c\uff0c\u5728\u4eca\u5e74 6 \u6708 24 \u65e5\uff0c\u8be5\u516c\u53f8\u63a8\u51fa\u4e86 Windows 11\u3002\u5c3d\u7ba1\u5728\u5f15\u64ce\u76d6\u4e0b\u57fa\u672c\u4e0a\u662f Windows 10\uff0c\u4f46 Windows 11 \u4ecd\u7136\u662f\u8be5\u64cd\u4f5c\u7cfb\u7edf\u516d\u5e74\u6765\u6700\u5927\u7684\u66f4\u65b0\uff0c\u5177\u6709\u6570\u91cf\u53ef\u89c2\u7684\u65b0\u529f\u80fd\u548c\u754c\u9762\u4fee\u6539\u3002\u6b63\u5f0f\u5730\uff0cWindows 11 \u5c06\u4e8e 2021 \u5e74\u5411\u516c\u4f17\u5f00\u653e\uff0c\u4f46\u5f88\u591a\u4eba\u6b63\u5728\u901a\u8fc7\u5b89\u88c5\u9884\u53d1\u5e03\u7248\u672c\u63d0\u524d\u8bd5\u7528\u5b83\u3002\u4e00\u4e9b\u7231\u597d\u8005\u60f3\u5c1d\u8bd5\u65b0\u7cfb\u7edf\u7684\u65b0\u9896\u6027\uff1b\u5176\u4ed6\u4eba\uff0c\u4f8b\u5982\u6280\u672f\u8bb0\u8005\uff0c\u901a\u77e5\u7528\u6237\u6709\u5173\u65b0\u529f\u80fd\u7684\u4fe1\u606f\u3002\u5bf9\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\uff0c\u4ed6\u4eec\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u81ea\u5df1\u7684\u4ea7\u54c1\u8fdb\u884c\u517c\u5bb9\u6027\u6d4b\u8bd5\uff0c\u5e76\u5728\u53d1\u5e03\u65e5\u4e4b\u524d\u4fee\u590d\u4efb\u4f55\u95ee\u9898\u3002\u5c3d\u7ba1\u5fae\u8f6f\u5df2\u7ecf\u4f7f\u4ece\u5176\u5b98\u65b9\u7f51\u7ad9\u4e0b\u8f7d\u548c\u5b89\u88c5 Windows 11 \u7684\u8fc7\u7a0b\u53d8\u5f97\u76f8\u5f53\u7b80\u5355\uff0c\u4f46\u8bb8\u591a\u4eba\u4ecd\u7136\u8bbf\u95ee\u5176\u4ed6\u6765\u6e90\u4e0b\u8f7d\u8be5\u8f6f\u4ef6\uff0c\u5176\u4e2d\u901a\u5e38\u5305\u542b\u6765\u81ea\u7f51\u7edc\u72af\u7f6a\u5206\u5b50\u7684\u672a\u7ecf\u5ba3\u4f20\u7684\u597d\u4e1c\u897f\uff08\u6839\u672c\u4e0d\u4e00\u5b9a\u662f Windows 11\uff09\u3002\u7f51\u7edc\u72af\u7f6a\u5206\u5b50\u6b3a\u9a97\u7528\u6237\u7684\u6700\u76f4\u63a5\u65b9\u5f0f\u662f\u63d2\u5165\u4e00\u4e9b\u989d\u5916\u7684\u4e1c\u897f\uff08\u6216\u5176\u4ed6\u4e1c\u897f\uff09\u3002\u4e00\u4e2a\u793a\u4f8b\u6d89\u53ca\u4e00\u4e2a\u540d\u4e3a 86307_windows 11 build 21996.1 x64 + activator.exe \u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u6587\u4ef6\u5927\u5c0f\u9ad8\u8fbe 1.75GB\uff0c\u770b\u8d77\u6765\u786e\u5b9e\u5408\u7406\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0c\u8be5\u7a7a\u95f4\u7684\u5927\u90e8\u5206\u7531\u4e00\u4e2a\u5305\u542b\u5927\u91cf\u65e0\u7528\u4fe1\u606f\u7684 DLL \u6587\u4ef6\u7ec4\u6210\u3002\u6253\u5f00\u53ef\u6267\u884c\u6587\u4ef6\u542f\u52a8\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5b83\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u666e\u901a\u7684 Windows \u5b89\u88c5\u5411\u5bfc\u3002\u5b83\u7684\u4e3b\u8981\u76ee\u7684\u662f\u4e0b\u8f7d\u5e76\u8fd0\u884c\u53e6\u4e00\u4e2a\u66f4\u6709\u8da3\u7684\u53ef\u6267\u884c\u6587\u4ef6\u3002\u7b2c\u4e8c\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u4e5f\u662f\u4e00\u4e2a\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5b83\u751a\u81f3\u5e26\u6709\u8bb8\u53ef\u534f\u8bae\uff08\u5f88\u5c11\u6709\u4eba\u9605\u8bfb\uff09\uff0c\u79f0\u5176\u4e3a\u201c86307_windows 11 build 21996.1 x64 + \u6fc0\u6d3b\u5668\u7684\u4e0b\u8f7d\u7ba1\u7406\u5668\u201d\uff0c\u5e76\u6307\u51fa\u5b83\u8fd8\u4f1a\u5b89\u88c5\u4e00\u4e9b\u8d5e\u52a9\u8f6f\u4ef6\u3002\u5982\u679c\u60a8\u63a5\u53d7\u8be5\u534f\u8bae\uff0c\u5219\u60a8\u7684\u673a\u5668\u4e0a\u5c06\u5b89\u88c5\u5404\u79cd\u6076\u610f\u7a0b\u5e8f\u3002\n\u5361\u5df4\u65af\u57fa\u4ea7\u54c1\u5df2\u7ecf\u51fb\u8d25\u4e86\u6570\u767e\u6b21\u4f7f\u7528\u7c7b\u4f3c Windows 11 \u76f8\u5173\u65b9\u6848\u7684\u611f\u67d3\u5c1d\u8bd5\u3002\u8be5\u6076\u610f\u8f6f\u4ef6\u7684\u5f88\u5927\u4e00\u90e8\u5206\u7531\u4e0b\u8f7d\u5668\u7ec4\u6210\uff0c\u5176\u4efb\u52a1\u662f\u4e0b\u8f7d\u548c\u8fd0\u884c\u5176\u4ed6\u7a0b\u5e8f\u3002\u8fd9\u4e9b\u5176\u4ed6\u7a0b\u5e8f\u53ef\u80fd\u975e\u5e38\u5e7f\u6cdb\u2014\u2014\u4ece\u76f8\u5bf9\u65e0\u5bb3\u7684\u5e7f\u544a\u8f6f\u4ef6\uff08\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u5c06\u5176\u5f52\u7c7b\u4e3a\u975e\u75c5\u6bd2\uff09\uff0c\u5230\u6210\u719f\u7684\u7279\u6d1b\u4f0a\u6728\u9a6c\u3001\u5bc6\u7801\u7a83\u53d6\u7a0b\u5e8f\u3001\u6f0f\u6d1e\u5229\u7528\u7a0b\u5e8f\u548c\u5176\u4ed6\u4ee4\u4eba\u8ba8\u538c\u7684\u4e1c\u897f\u3002\u6309\u7167 Microsoft \u7684\u5efa\u8bae\uff0c\u4ec5\u4ece\u5b98\u65b9\u6765\u6e90\u4e0b\u8f7d Windows 11\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0cWindows 11 \u4ec5\u5bf9 Windows Insider \u8ba1\u5212\u7684\u53c2\u4e0e\u8005\u6b63\u5f0f\u5f00\u653e\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u60a8\u5fc5\u987b\u6ce8\u518c\u3002\u60a8\u8fd8\u9700\u8981\u4e00\u53f0\u5df2\u5b89\u88c5 Windows 10 \u7684\u8bbe\u5907\u3002\u8981\u5c06\u60a8\u7684 Windows 10 \u8ba1\u7b97\u673a\u5347\u7ea7\u5230 Windows 11\uff0c\u8bf7\u8f6c\u5230\u201c\u8bbe\u7f6e\u201d\uff0c\u5355\u51fb\u201c\u66f4\u65b0\u548c\u5b89\u5168\u201d\uff0c\u7136\u540e\u9009\u62e9\u201cWindows \u9884\u89c8\u4f53\u9a8c\u8ba1\u5212\u201d\u5e76\u6fc0\u6d3b\u201c\u5f00\u53d1\u8005\u9891\u9053\u201d\u4ee5\u83b7\u53d6\u66f4\u65b0\u3002\u6211\u4eec\u4e0d\u5efa\u8bae\u5728\u60a8\u7684\u4e3b\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u66f4\u65b0\uff1b\u9884\u6784\u5efa\u53ef\u80fd\u4e0d\u7a33\u5b9a\u3002\u6211\u4eec\u8fd8\u5efa\u8bae\u60a8\u4f7f\u7528\u53ef\u9760\u7684\u5b89\u5168\u89e3\u51b3\u65b9\u6848\uff0c\u6c38\u8fdc\u4e0d\u8981\u7981\u7528\u5b83\uff0c\u8fd9\u6837\u7f51\u7edc\u72af\u7f6a\u5206\u5b50\u5c31\u65e0\u6cd5\u901a\u8fc7\u793e\u4f1a\u5de5\u7a0b\u6216\u975e\u9ec4\u91d1\u65f6\u6bb5\u7cfb\u7edf\u4e2d\u7684\u6f0f\u6d1e\u8bbf\u95ee\u60a8\u7684\u8ba1\u7b97\u673a\u3002", "note_en": "Microsoft hasn\u2019t yet released Windows 11, but the new operating system is already available for download and preview. Cybercriminals, of course, are exploiting that, slipping malware to users who think they\u2019re downloading Microsoft\u2019s new operating system.\n  Microsoft actually claimed Windows 10 would be the  last release of Windows, that the company would just issue updates from there on out. On June 24 this year, however, the company unveiled Windows 11. And even though under the hood it\u2019s basically Windows 10, Windows 11 is still the OS\u2019s biggest update in six years, with an impressive number of new features and interface modifications.\n Officially, Windows 11 will become available to the general public in 2021, but loads of people are trying it out early by installing a prerelease build. Some enthusiasts want to try the new system for its novelty; others, such as tech reporters, to inform users about the new features. As for software developers, they need the OS to perform compatibility testing with their own products and fix any issues before release day.\n Although Microsoft has made the process of downloading and installing Windows 11 from its official website fairly straightforward, many still visit other sources to download the software, which often contains unadvertised goodies from cybercriminals (and isn\u2019t necessarily Windows 11 at all).\n  The most straightforward way cybercriminals deceive users is by slipping in something extra (or else).\n One example involves an executable file called  86307_windows 11 build 21996.1 x64 + activator.exe. With a file size as large as 1.75GB, it certainly looks plausible. In fact, though, the bulk of that space consists of one DLL file that contains a lot of useless information.\n  Opening the executable starts the installer, which looks like an ordinary Windows installation wizard. Its main purpose is to download and run another, more interesting executable. The second executable is an installer as well, and it even comes with a license agreement (which few people read) calling it a \u201cdownload manager for 86307_windows 11 build 21996.1 x64 + activator\u201d and noting that it would also install some sponsored software. If you accept the agreement, a variety of malicious programs will be installed on your machine.\n  Kaspersky products have already defeated several hundred infection attempts that used similar Windows 11\u2013related schemes. A large portion of that malware consists of  downloaders, whose task is to download and run other programs.\n Those other programs can be very wide-ranging \u2014 from relatively harmless  adware, which our solutions classify as  not-a-virus, to full-fledged Trojans,  password stealers, exploits, and other nasty stuff.\n  Download Windows 11 from official sources only, as Microsoft advises. So far, Windows 11 is officially available only to participants in the Windows Insider program \u2014 that is, you have to  register. You\u2019ll also need a device with Windows 10 already installed.\n To upgrade your Windows 10 computer to Windows 11, go to  Settings, click  Update &amp; Security, then select  Windows Insider Program and activate  Dev Channel to get the update.\n We don\u2019t recommend running the update on your main computer; prebuilds can be unstable.\n We also advise you to use a  reliable security solution\u00a0and never disable it, so that cybercriminals cannot gain access to your computer through social engineering or vulnerabilities in the not-ready-for-primetime system.", "posttime": "2021-07-25 05:07:20", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u7a0b\u5e8f,windows,\u8f6f\u4ef6,spreading,\u4e0b\u8f7d", "title": "\u5361\u5df4\u65af\u57fa\u8b66\u544a\u5047 Windows 11 \u5b89\u88c5\u7a0b\u5e8f\u6b63\u5728\u4f20\u64ad\u6076\u610f\u8f6f\u4ef6", "title_en": "Kaspersky Warns Fake Windows 11 Installers Are Spreading Malware", "transed": 1, "url": "https://www.kaspersky.com/blog/fake-windows-11-installers/40718/", "via": "", "real_tags": ["\u7a0b\u5e8f", "windows", "\u8f6f\u4ef6", "spreading", "\u4e0b\u8f7d"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069507, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5929\u65e9\u4e0a\u6211\u542c\u5230\u53f2\u8482\u6587\u6e29\u4f2f\u683c\u6628\u5929\u53bb\u4e16\u7684\u6d88\u606f\uff0c\u4eab\u5e74 88 \u5c81\u3002\u4ed6\u53ef\u4ee5\u8bf4\u662f\u7406\u8bba\u200b\u200b\u7c92\u5b50\u7269\u7406\u5b66\u4ece 60 \u5e74\u4ee3\u672b\u5230 80 \u5e74\u4ee3\u521d\u53d6\u5f97\u5de8\u5927\u6210\u529f\u7684\u65f6\u671f\u7684\u4e3b\u5bfc\u4eba\u7269\u3002\u7279\u522b\u662f\uff0c\u4ed6 1967 \u5e74\u5173\u4e8e\u5f31\u76f8\u4e92\u4f5c\u7528\u548c\u7535\u78c1\u76f8\u4e92\u4f5c\u7528\u7edf\u4e00\u7684\u5de5\u4f5c\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7a81\u7834\uff0c\u76f4\u5230\u4eca\u5929\u4ecd\u7136\u662f\u6807\u51c6\u6a21\u578b\u7684\u4e2d\u5fc3\uff0c\u6211\u4eec\u5bf9\u57fa\u7840\u7269\u7406\u5b66\u7684\u6700\u4f73\u7406\u89e3\u3002 1975-79 \u5e74\uff0c\u6211\u8fd8\u662f\u54c8\u4f5b\u7684\u5b66\u751f\uff0c\u6211\u76f8\u4fe1\u6e29\u4f2f\u683c\u3001\u683c\u62c9\u8096\u548c\u79d1\u5c14\u66fc\u529e\u516c\u5ba4\u9760\u5f97\u5f88\u8fd1\u7684\u8d70\u5eca\u662f\u4e16\u754c\u4e0a\u63a8\u52a8\u7c92\u5b50\u7406\u8bba\u9886\u57df\u7684\u4e3b\u8981\u4eba\u7269\u7684\u6700\u96c6\u4e2d\u7684\u5730\u65b9\uff0c\u6e29\u4f2f\u683c\u88ab\u89c6\u4e3a\u6700\u4e09\u8005\u4e2d\u7684\u4f7c\u4f7c\u8005\u3002\u6211\u8bb0\u5f97\uff0c\u5728\u4e00\u6b21\u4f1a\u8bae\u4e0a\uff0c\u4e00\u4f4d\u7814\u7a76\u751f\uff08\u57c3\u8fea\u00b7\u6cd5\u5e0c\uff1f\uff09\u63d0\u5230\u4e86\u201c\u96ea\u8389\u3001\u897f\u5fb7\u5c3c\u548c\u6e29\u4f2f\u683c\u201d\uff0c\u8868\u660e\u6e29\u4f2f\u683c\u5373\u4f7f\u5728\u90a3\u4e2a\u7fa4\u4f53\u4e2d\u4e5f\u662f\u4e00\u4e2a\u7279\u4f8b\u3002\u6211\u6709\u5e78\u4e0d\u4ec5\u53c2\u52a0\u4e86 Coleman \u7684 QFT \u8bfe\u7a0b\uff0c\u8fd8\u53c2\u52a0\u4e86 Weinberg \u5173\u4e8e\u89c4\u8303\u7406\u8bba\u91cf\u5b50\u5316\u7684\u8bfe\u7a0b\u3002\u6e29\u4f2f\u683c\u662f\u4e00\u672c\u5173\u4e8e\u5e7f\u4e49\u76f8\u5bf9\u8bba\u7684\u6709\u5f71\u54cd\u529b\u7684\u6559\u79d1\u4e66\u7684\u4f5c\u8005\uff0c\u4ee5\u53ca\u4e00\u5957\u5173\u4e8e QFT \u7684\u7cbe\u5999\u7684\u4e09\u5377\u6559\u79d1\u4e66\u3002\u7b2c\u4e8c\u5377\u5927\u81f4\u5bf9\u5e94\u6211\u4ece\u4ed6\u90a3\u91cc\u5b66\u7684\u8bfe\u7a0b\uff0c\u7b2c\u4e09\u5377\u662f\u5173\u4e8e\u8d85\u5bf9\u79f0\u7684\u3002\u867d\u7136\u5927\u591a\u6570 QFT \u4e66\u7c4d\u90fd\u4ee5\u5927\u81f4\u76f8\u540c\u7684\u65b9\u5f0f\u6db5\u76d6\u4e86\u57fa\u7840\u77e5\u8bc6\uff0c\u4f46\u6e29\u4f2f\u683c\u7684\u7b2c\u4e00\u5377\u5bf9\u8fd9\u4e2a\u4e3b\u9898\u8fdb\u884c\u4e86\u622a\u7136\u4e0d\u540c\u3001\u539f\u521b\u4e14\u6781\u5177\u5f71\u54cd\u529b\u7684\u89e3\u8bfb\u3002\u8fd9\u5e76\u4e0d\u5bb9\u6613\uff0c\u4f46\u7ec6\u8282\u90fd\u5728\u90a3\u91cc\uff0c\u4ed6\u7684\u89c2\u70b9\u5f88\u91cd\u8981\u3002\u5f53\u4f60\u542c\u5230 Nima Arkani-Hamed \u5ba3\u626c\u6b63\u786e\u7684\u65b9\u6cd5\u6765\u7406\u89e3 QFT \u5982\u4f55\u72ec\u7279\u5730\u4f5c\u4e3a\u7ed3\u5408\u72ed\u4e49\u76f8\u5bf9\u8bba\u548c\u91cf\u5b50\u529b\u5b66\u7684\u552f\u4e00\u660e\u667a\u65b9\u6cd5\u65f6\uff0c\u4ed6\u7ecf\u5e38\u7279\u522b\u63d0\u5230\u4f60\u4f1a\u5728\u7b2c\u4e00\u5377\u4e2d\u627e\u5230\u7684\u5185\u5bb9\u3002\u9664\u4e86\u4ed6\u7684\u6280\u672f\u5de5\u4f5c\u5916\uff0c\u6e29\u4f2f\u683c\u8fd8\u4e3a\u66f4\u5e7f\u6cdb\u7684\u53d7\u4f17\u64b0\u5199\u4e86\u5927\u91cf\u5173\u4e8e\u7269\u7406\u5b66\u548c\u79d1\u5b66\u7684\u6700\u9ad8\u8d28\u91cf\u7684\u5199\u4f5c\u3002\u4e00\u4e2a\u65e9\u671f\u7684\u4f8b\u5b50\u662f\u4ed6 1977 \u5e74\u7684 The Search for Unity: Notes for a History of Quantum Field Theory\uff08\u8fd9\u91cc\u6709\u4e00\u4efd\u526f\u672c\uff09\u3002\u4ed6 1992 \u5e74\u7684\u7ec8\u6781\u7406\u8bba\u4e4b\u68a6\u53ef\u80fd\u662f 20 \u4e16\u7eaa\u57fa\u7840\u7269\u7406\u7406\u8bba\u76ee\u6807\u7684\u6700\u4f73\u9648\u8ff0\u3002\u4ed6\u4e3a\u300a\u7ebd\u7ea6\u4e66\u8bc4\u300b\u64b0\u5199\u7684\u5927\u91cf\u6587\u7ae0\u6db5\u76d6\u4e86\u5e7f\u6cdb\u7684\u4e3b\u9898\uff0c\u90fd\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\u3002 1984 \u5e74\u201c\u7b2c\u4e00\u6b21\u8d85\u5f26\u9769\u547d\u201d\u65f6\uff0c\u6e29\u4f2f\u683c\u52a0\u5165\u5e76\u7814\u7a76\u5f26\u8bba\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u51e0\u5e74\u540e\u8f6c\u5411\u5b87\u5b99\u5b66\u3002 2002 \u5e74\u521d\uff0c\u4ed6\u662f\u6211\u5199\u4fe1\u7ed9\u51e0\u4e2a\u5173\u4e8e\u5f26\u7406\u8bba\u73b0\u72b6\u7684\u4eba\u4e4b\u4e00\uff0c\u8fd9\u662f\u6211\u4ece\u4ed6\u90a3\u91cc\u542c\u5230\u7684\uff1a\u6211\u548c\u4f60\u4e00\u6837\u5bf9\u5f26\u7406\u8bba\u8fc4\u4eca\u4e0e\u81ea\u7136\u7f3a\u4e4f\u63a5\u89e6\u611f\u5230\u5931\u671b\uff0c\u4f46\u6211\u4e0d\u80fd\u6ca1\u6709\u770b\u5230\u5176\u4ed6\u4eba\uff08\u5305\u62ec\u90a3\u4e9b\u5728\u89c4\u8303\u7406\u8bba\u4e2d\u7814\u7a76\u62d3\u6251\u975e\u5e73\u51e1\u6027\u7684\u4eba\uff09\u505a\u5f97\u66f4\u597d\u3002\u6211\u8ba4\u4e3a\u4e00\u4e9b\u7406\u8bba\u5bb6\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u7ee7\u7eed\u63a8\u8fdb\u5f26\u7406\u8bba\uff0c\u800c\u53e6\u4e00\u4e9b\u7406\u8bba\u5bb6\u5e94\u8be5\u505a\u5176\u4ed6\u4e8b\u60c5\uff0c\u4f46\u8981\u770b\u5230\u4ec0\u4e48\u5e76\u4e0d\u5bb9\u6613\u3002\u6211\u5df2\u7ecf\u7528\u6211\u7684\u811a\u6295\u7968\uff08\u5982\u679c\u8fd9\u662f\u5408\u9002\u7684\u5668\u5b98\uff09\u5e76\u5b8c\u5168\u8f6c\u5411\u5b87\u5b99\u5b66\u5de5\u4f5c\uff0c\u8fd9\u4e0e 1960 \u5e74\u4ee3\u548c 1970 \u5e74\u4ee3\u7684\u7c92\u5b50\u7269\u7406\u5b66\u4e00\u6837\u4ee4\u4eba\u5174\u594b\u3002\u6211\u4e0d\u4f1a\u6279\u8bc4\u4efb\u4f55\u4eba\u7684\u9009\u62e9\uff1a\u8fd9\u662f\u57fa\u7840\u7269\u7406\u5b66\u7684\u8270\u96be\u65f6\u671f\u3002\u51e0\u5e74\u4e4b\u540e\uff0c\u6e29\u4f2f\u683c 1987 \u5e74\u5bf9\u5b87\u5b99\u5e38\u6570\u7684\u201c\u9884\u6d4b\u201d\u6210\u4e3a\u5f26\u8bba\u591a\u5143\u5b87\u5b99\u7684\u4e3b\u8981\u8bba\u636e\u3002\u8fd9\u79cd\u201c\u9884\u6d4b\u201d\u672c\u8d28\u4e0a\u662f\u89c2\u5bdf\u5230\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u7406\u8bba\uff0c\u5176\u4e2d\u5b87\u5b99\u5e38\u6570\u7684\u6240\u6709\u503c\u90fd\u5177\u6709\u540c\u7b49\u53ef\u80fd\u6027\uff0c\u5e76\u5c06\u5176\u4e0e\u201c\u4eba\u4e3a\u201d\u7ea6\u675f\u653e\u5728\u4e00\u8d77\uff0c\u5373\u53ea\u6709\u5728\u67d0\u4e9b\u8303\u56f4\u5185\uff0c\u661f\u7cfb\u5f62\u6210\u624d\u4f1a\u7ed9\u51fa\u4f3c\u4e4e\u662f\u751f\u547d\u7684\u6761\u4ef6\uff0c\u90a3\u4e48\u4f60\u671f\u671b\u4e00\u4e2a\u975e\u96f6\u7684 CC\uff0c\u5176\u5927\u5c0f\u4e0e\u540e\u6765\u53d1\u73b0\u7684\u5927\u81f4\u76f8\u5f53\u3002\u6211\u5728\u8fd9\u91cc\u4e89\u8bba\u4e0d\u4f11\uff0c\u8fd9\u4e0d\u80fd\u7528\u4f5c\u5f26\u7406\u8bba\u5728\u5176\u666f\u89c2\u5316\u8eab\u4e2d\u7684\u91cd\u8981\u8bba\u636e\u3002\u770b\u5f85\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u6ce8\u610f\u6211\u81ea\u5df1\u7684 CC \u7406\u8bba\uff08\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u51b3\u5b9a\u4e86\u5b83\uff0c\u6240\u4ee5\u4efb\u4f55\u503c\u90fd\u548c\u5176\u4ed6\u503c\u4e00\u6837\u53ef\u80fd\uff09\u5b8c\u5168\u7b49\u540c\u4e8e CC \u7684\u5f26\u666f\u89c2\u7406\u8bba\uff08\u5176\u4e2d\u60a8\u4e0d\u77e5\u9053\u53ef\u80fd\u7684\u771f\u7a7a\u7a7a\u95f4\u7684\u5ea6\u91cf\uff0c\u751a\u81f3\u4e0d\u77e5\u9053\u8be5\u7a7a\u95f4\u662f\u4ec0\u4e48\uff0c\u56e0\u6b64\u60a8\u5047\u8bbe\u6240\u6709 CC \u7684\u53ef\u80fd\u6027\u76f8\u540c\uff09\u3002 Weinberg \u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u5730\u65b9\u662f\u4ed6\u7684\u6587\u7ae0 Living in the Multiverse\uff0c\u6211\u5728\u8fd9\u91cc\u5199\u8fc7\uff08\u8fd9\u91cc\u8bb2\u8ff0\u4e86\u6211\u5728\u90a3\u91cc\u7684\u8bc4\u8bba\u88ab\u8bef\u89e3\u7684\u60b2\u4f24\u6545\u4e8b\uff09\u3002\n\u6e29\u4f2f\u683c\u6628\u5929\u7684\u53bb\u4e16\uff0c\u5e26\u8d70\u4e86\u7c92\u5b50\u7406\u8bba\u6700\u4f1f\u5927\u6210\u529f\u65f6\u671f\u7684\u4e3b\u5bfc\u4eba\u7269\uff0c\u8fd9\u65e2\u662f\u4e00\u4e2a\u91cd\u5927\u7684\u635f\u5931\uff0c\u4e5f\u662f\u4e00\u4e2a\u65f6\u4ee3\u7684\u7ed3\u675f\u3002\u4ed6\u5728 2002 \u5e74\u6240\u8bf4\u7684\u201c\u8fd9\u662f\u4e00\u4e2a\u8270\u96be\u7684\u65f6\u671f\u201d\u5728\u4eca\u5929\u66f4\u662f\u5982\u6b64\u3002", "note_en": "I heard this morning the news that Steven Weinberg passed away yesterday at the age of 88.\u00a0 He was arguably the dominant figure in theoretical particle physics during its period of great success from the late sixties to the early eighties.\u00a0 In particular, his 1967 work on unification of the weak and electromagnetic interactions was a huge breakthrough, and remains to this day at the center of the Standard Model, our best understanding of fundamental physics.\n During the years 1975-79 when I was a student at Harvard,\u00a0 I believe the hallway where Weinberg, Glashow and Coleman had offices close together\u00a0 was the greatest concentration of the world\u2019s major figures driving the field of particle theory, with Weinberg seen as the most prominent of the three.\u00a0 From what I recall, in a meeting one of the graduate students (Eddie Farhi?) referred to \u201cShelly, Sidney and Weinberg\u201d, indicating the way Weinberg was a special case even in that group.\u00a0\u00a0 I had the great fortune to attend not only Coleman\u2019s QFT course, but also a course by Weinberg on the quantization of gauge theory.\n Weinberg was the author of an influential text on general relativity, as well as a masterful three-volume set of textbooks on QFT.\u00a0 The second volume roughly corresponds to the course I took from him, and the third is about supersymmetry.\u00a0\u00a0 While most QFT books cover the basics in much the same way, Weinberg\u2019s first volume is a quite different, original and highly influential take on the subject. It\u2019s not easy going, but the details are all there and his point of view is an important one.\u00a0 When you hear Nima Arkani-Hamed preaching about the right way to understand how QFT comes out uniquely as the only sensible way to combine special relativity and quantum mechanics, he\u2019s often referring specifically to what you\u2019ll find in that first volume.\n Besides his technical work, Weinberg also did a huge amount of writing of the highest quality about physics and science in general for wider audiences.\u00a0 An early example is his 1977  The Search for Unity: Notes for a History of Quantum Field Theory (a copy is  here). His 1992  Dreams of a Final Theory is perhaps the best statement anywhere of the goal of fundamental physical theory during the 20th century. His large collection of pieces written for the  The New York Review of Books covers a wide variety of topics and all are well worth reading.\n At the time of the 1984 \u201cFirst Superstring Revolution\u201d, Weinberg joined in and worked on string theory for a while, but after a few years turned to cosmology. In early 2002 he was one of several people I wrote to about the current state of string theory, and here\u2019s what I heard back from him:\n I share your disappointment about the lack of contact so far of string theory with nature, but I can\u2019t see that anyone else (including those studying topological nontrivialities in gauge theories) is doing much better. I thinks that some theorists should go on pushing as hard as they can on string theory, and others should do something else, but it is not easy to see what. I have myself voted with my feet (if that is the appropriate organ here) and switched entirely to work in cosmology, which is as exciting now as particle physics was in the 1960s and 1970s. I wouldn\u2019t criticize anyone for their choices: it\u2019s a tough time for fundamental physics.\n A couple years after that time, Weinberg\u2019s 1987 \u201cprediction\u201d of the cosmological constant became the main argument for the string theory multiverse. This \u201cprediction\u201d was essentially the observation that if you have a theory in which all values of the cosmological constant are equally likely, and put this together with the \u201canthropic\u201d constraint that only for some range will galaxy formation give what seem to be the conditions for life, then you expect a non-zero CC of very roughly the size later found. I\u2019ve argued ad nauseam here that this can\u2019t be used as a significant argument for string theory in its landscape incarnation. One way to see the problem is to notice that my own theory of the CC (which is that I have no idea what determines it, so any value is as likely as any other) is exactly equivalent to the string landscape theory of the CC (in which you don\u2019t know either the measure on the space of possible vacua, or even what this space is, so you assume all CC equally likely). One place where Weinberg wrote about this issue is his essay  Living in the Multiverse, which I wrote about  here (the sad story of misinterpretation of a comment of mine there is told  here).\n Weinberg\u2019s death yesterday, taking away from us the dominant figure of the period of particle theory\u2019s greatest success is both a significant loss and marks the end of an era. His 2002 remark that \u201cit\u2019s a tough time\u201d is even more true today.", "posttime": "2021-07-25 05:02:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53f2\u8482\u6587,steven,\u7406\u8bba", "title": "\u53f2\u8482\u6587\u6e29\u4f2f\u683c 1933-2021", "title_en": "Steven Weinberg 1933-2021", "transed": 1, "url": "https://www.math.columbia.edu/~woit/wordpress/?p=12413", "via": "", "real_tags": ["\u53f2\u8482\u6587", "steven", "\u7406\u8bba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069506, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u6709\u7528\uff0c\u65e0\u4eba\u673a\u9700\u8981\u5feb\u901f\u3002\u7531\u4e8e\u7535\u6c60\u5bff\u547d\u6709\u9650\uff0c\u4ed6\u4eec\u5fc5\u987b\u5728\u5c3d\u53ef\u80fd\u77ed\u7684\u65f6\u95f4\u5185\u5b8c\u6210\u4efb\u4f55\u4efb\u52a1\u2014\u2014\u5728\u707e\u96be\u73b0\u573a\u5bfb\u627e\u5e78\u5b58\u8005\u3001\u68c0\u67e5\u5efa\u7b51\u7269\u3001\u8fd0\u9001\u8d27\u7269\u3002\u4ed6\u4eec\u53ef\u80fd\u5fc5\u987b\u901a\u8fc7\u4e00\u7cfb\u5217\u822a\u8def\u70b9\uff08\u5982\u7a97\u6237\u3001\u623f\u95f4\u6216\u7279\u5b9a\u4f4d\u7f6e\uff09\u8fdb\u884c\u68c0\u67e5\uff0c\u5728\u6bcf\u4e2a\u8def\u6bb5\u91c7\u7528\u6700\u4f73\u8f68\u8ff9\u548c\u6b63\u786e\u7684\u52a0\u901f\u6216\u51cf\u901f\u3002\u6700\u597d\u7684\u4eba\u7c7b\u65e0\u4eba\u673a\u98de\u884c\u5458\u975e\u5e38\u64c5\u957f\u8fd9\u6837\u505a\uff0c\u5e76\u4e14\u8fc4\u4eca\u4e3a\u6b62\u5728\u65e0\u4eba\u673a\u6bd4\u8d5b\u4e2d\u7684\u8868\u73b0\u603b\u662f\u4f18\u4e8e\u81ea\u4e3b\u7cfb\u7edf\u3002\u73b0\u5728\uff0c\u82cf\u9ece\u4e16\u5927\u5b66 (UZH) \u7684\u4e00\u4e2a\u7814\u7a76\u5c0f\u7ec4\u521b\u5efa\u4e86\u4e00\u79cd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u53ef\u4ee5\u627e\u5230\u6700\u5feb\u7684\u8f68\u8ff9\u6765\u5f15\u5bfc\u56db\u65cb\u7ffc\u98de\u884c\u5668\u2014\u2014\u4e00\u79cd\u5e26\u6709\u56db\u4e2a\u87ba\u65cb\u6868\u7684\u65e0\u4eba\u673a\u2014\u2014\u901a\u8fc7\u7535\u8def\u4e0a\u7684\u4e00\u7cfb\u5217\u822a\u70b9\u3002 \u201c\u6211\u4eec\u7684\u65e0\u4eba\u673a\u5728\u5b9e\u9a8c\u8d5b\u9053\u4e0a\u51fb\u8d25\u4e86\u4e24\u540d\u4e16\u754c\u7ea7\u4eba\u7c7b\u98de\u884c\u5458\u7684\u6700\u5feb\u5708\u901f\u201d\uff0c\u5927\u536b\u00b7\u65af\u5361\u62c9\u7a46\u624e\u8bf4\uff0c\u4ed6\u662f UZH \u673a\u5668\u4eba\u548c\u611f\u77e5\u5c0f\u7ec4\u548c NCCR Robotics \u6551\u63f4\u673a\u5668\u4eba\u5927\u6311\u6218\u7684\u8d1f\u8d23\u4eba\uff0c\u8be5\u9879\u76ee\u8d44\u52a9\u4e86\u8fd9\u9879\u7814\u7a76\u3002 Scaramuzza \u8bf4\uff1a\u201c\u8be5\u7b97\u6cd5\u7684\u65b0\u9896\u4e4b\u5904\u5728\u4e8e\u5b83\u662f\u7b2c\u4e00\u4e2a\u751f\u6210\u5145\u5206\u8003\u8651\u65e0\u4eba\u673a\u5c40\u9650\u6027\u7684\u65f6\u95f4\u6700\u4f73\u8f68\u8ff9\u7684\u7b97\u6cd5\u3002\u201d\u4ee5\u524d\u7684\u5de5\u4f5c\u4f9d\u8d56\u4e8e\u56db\u65cb\u7ffc\u7cfb\u7edf\u7684\u7b80\u5316\u6216\u98de\u884c\u8def\u5f84\u7684\u63cf\u8ff0\uff0c\u56e0\u6b64\u5b83\u4eec\u662f\u6b21\u4f18\u7684\u3002 \u201c\u5173\u952e\u7684\u60f3\u6cd5\u662f\uff0c\u6211\u4eec\u7684\u7b97\u6cd5\u53ea\u662f\u544a\u8bc9\u65e0\u4eba\u673a\u901a\u8fc7\u6240\u6709\u822a\u70b9\uff0c\u800c\u4e0d\u662f\u5982\u4f55\u6216\u4f55\u65f6\u901a\u8fc7\u6240\u6709\u822a\u70b9\uff0c\u800c\u4e0d\u662f\u5c06\u98de\u884c\u8def\u5f84\u7684\u5404\u4e2a\u90e8\u5206\u5206\u914d\u7ed9\u7279\u5b9a\u7684\u822a\u8def\u70b9\uff0c\u201d\u535a\u58eb\u751f\u517c\u7b2c\u4e00\u4f5c\u8005 Philipp Foehn \u8865\u5145\u9053\u7684\u7eb8\u3002\u7814\u7a76\u4eba\u5458\u8ba9\u7b97\u6cd5\u548c\u4e24\u540d\u4eba\u7c7b\u98de\u884c\u5458\u9a7e\u9a76\u540c\u4e00\u4e2a\u56db\u65cb\u7ffc\u98de\u884c\u5668\u7a7f\u8fc7\u8d5b\u9053\u3002\u4ed6\u4eec\u4f7f\u7528\u5916\u90e8\u6444\u50cf\u5934\u6765\u7cbe\u786e\u6355\u6349\u65e0\u4eba\u673a\u7684\u8fd0\u52a8\uff0c\u5e76\u4e14\u2014\u2014\u5728\u81ea\u4e3b\u65e0\u4eba\u673a\u7684\u60c5\u51b5\u4e0b\u2014\u2014\u5411\u7b97\u6cd5\u63d0\u4f9b\u6709\u5173\u65e0\u4eba\u673a\u5728\u4efb\u4f55\u65f6\u523b\u6240\u5904\u4f4d\u7f6e\u7684\u5b9e\u65f6\u4fe1\u606f\u3002\u4e3a\u4e86\u786e\u4fdd\u516c\u5e73\u6bd4\u8f83\uff0c\u4eba\u7c7b\u98de\u884c\u5458\u6709\u673a\u4f1a\u5728\u8d5b\u524d\u5728\u8d5b\u9053\u4e0a\u8fdb\u884c\u8bad\u7ec3\u3002\u4f46\u662f\u7b97\u6cd5\u8d62\u4e86\uff1a\u5b83\u6240\u6709\u7684\u5708\u6570\u90fd\u6bd4\u4eba\u7c7b\u7684\u8981\u5feb\uff0c\u800c\u4e14\u6027\u80fd\u66f4\u7a33\u5b9a\u3002\u8fd9\u5e76\u4e0d\u5947\u602a\uff0c\u56e0\u4e3a\u4e00\u65e6\u7b97\u6cd5\u627e\u5230\u4e86\u6700\u4f73\u8f68\u8ff9\uff0c\u5b83\u5c31\u53ef\u4ee5\u591a\u6b21\u5fe0\u5b9e\u5730\u518d\u73b0\u5b83\uff0c\u8fd9\u4e0e\u4eba\u7c7b\u98de\u884c\u5458\u4e0d\u540c\u3002\u5728\u5546\u4e1a\u5e94\u7528\u4e4b\u524d\uff0c\u8be5\u7b97\u6cd5\u9700\u8981\u964d\u4f4e\u8ba1\u7b97\u8981\u6c42\uff0c\u56e0\u4e3a\u73b0\u5728\u8ba1\u7b97\u673a\u9700\u8981\u957f\u8fbe\u4e00\u4e2a\u5c0f\u65f6\u6765\u8ba1\u7b97\u65e0\u4eba\u673a\u7684\u65f6\u95f4\u6700\u4f73\u8f68\u8ff9\u3002\u6b64\u5916\uff0c\u76ee\u524d\uff0c\u65e0\u4eba\u673a\u4f9d\u9760\u5916\u90e8\u6444\u50cf\u5934\u968f\u65f6\u8ba1\u7b97\u5176\u6240\u5728\u4f4d\u7f6e\u3002\u5728\u672a\u6765\u7684\u5de5\u4f5c\u4e2d\uff0c\u79d1\u5b66\u5bb6\u4eec\u5e0c\u671b\u4f7f\u7528\u673a\u8f7d\u76f8\u673a\u3002\u4f46\u81ea\u52a8\u65e0\u4eba\u673a\u539f\u5219\u4e0a\u53ef\u4ee5\u6bd4\u4eba\u7c7b\u98de\u884c\u5458\u98de\u5f97\u66f4\u5feb\u7684\u6f14\u793a\u662f\u6709\u5e0c\u671b\u7684\u3002 Scaramuzza \u8bf4\uff1a\u201c\u8fd9\u79cd\u7b97\u6cd5\u53ef\u4ee5\u5728\u65e0\u4eba\u673a\u5305\u88f9\u9012\u9001\u3001\u68c0\u67e5\u3001\u641c\u7d22\u548c\u6551\u63f4\u7b49\u65b9\u9762\u6709\u5de8\u5927\u7684\u5e94\u7528\u3002\u201d\u83f2\u5229\u666e\u00b7\u5f17\u6069\u3001\u5b89\u5409\u5c14\u00b7\u7f57\u6885\u7f57\u3001\u5927\u536b\u00b7\u65af\u5361\u62c9\u7a46\u624eQuadrotor Waypoint \u98de\u884c\u7684\u65f6\u95f4\u6700\u4f18\u89c4\u5212\u3002\u79d1\u5b66\u673a\u5668\u4eba\u3002 2021 \u5e74 7 \u6708 21 \u65e5\u3002DOI\uff1a10.1126/scirobotics.abh1221", "note_en": "To be useful, drones need to be quick. Because of their limited battery life they must complete whatever task they have \u2013 searching for survivors on a disaster site, inspecting a building, delivering cargo \u2013 in the shortest possible time. And they may have to do it by going through a series of waypoints like windows, rooms, or specific locations to inspect, adopting the best trajectory and the right acceleration or deceleration at each segment.\n  The best human drone pilots are very good at doing this and have so far always outperformed autonomous systems in drone racing. Now, a research group at the University of Zurich (UZH) has created an algorithm that can find the quickest trajectory to guide a quadrotor \u2013 a drone with four propellers \u2013 through a series of waypoints on a circuit. \u201cOur drone beat the fastest lap of two world-class human pilots on an experimental race track\u201d, says Davide Scaramuzza, who heads the Robotics and Perception Group at UZH and the Rescue Robotics Grand Challenge of the NCCR Robotics, which funded the research.\n \u201cThe novelty of the algorithm is that it is the first to generate time-optimal trajectories that fully consider the drones\u2019 limitations\u201d, says Scaramuzza. Previous works relied on simplifications of either the quadrotor system or the description of the flight path, and thus they were sub-optimal. \u201cThe key idea is, rather than assigning sections of the flight path to specific waypoints, that our algorithm just tells the drone to pass through all waypoints, but not how or when to do that\u201d, adds Philipp Foehn, PhD student and first author of the paper.\n  The researchers had the algorithm and two human pilots fly the same quadrotor through a race circuit. They employed external cameras to precisely capture the motion of the drones and \u2013 in the case of the autonomous drone \u2013 to give real-time information to the algorithm on where the drone was at any moment. To ensure a fair comparison, the human pilots were given the opportunity to train on the circuit before the race. But the algorithm won: all its laps were faster than the human ones, and the performance was more consistent. This is not surprising, because once the algorithm has found the best trajectory it can reproduce it faithfully many times, unlike human pilots.\n Before commercial applications, the algorithm will need to become less computationally demanding, as it now takes up to an hour for the computer to calculate the time-optimal trajectory for the drone. Also, at the moment, the drone relies on external cameras to compute where it was at any moment. In future work, the scientists want to use onboard cameras. But the demonstration that an autonomous drone can in principle fly faster than human pilots is promising. \u201cThis algorithm can have huge applications in package delivery with drones, inspection, search and rescue, and more\u201d, says Scaramuzza.\n  Philipp Foehn, Angel Romero, Davide Scaramuzza. Time-Optimal Planning for Quadrotor Waypoint Flight. Science Robotics. July 21, 2021. DOI: 10.1126/scirobotics.abh1221", "posttime": "2021-07-25 04:58:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u4eba\u7c7b,flies,\u65e0\u4eba\u673a", "title": "\u65b0\u7b97\u6cd5\u6bd4\u4eba\u7c7b\u8d5b\u8f66\u98de\u884c\u5458\u66f4\u5feb\u5730\u98de\u884c\u65e0\u4eba\u673a", "title_en": "New algorithm flies drones faster than human racing pilots", "transed": 1, "url": "https://www.media.uzh.ch/en/Press-Releases/2021/Drone-Race.html", "via": "", "real_tags": ["\u7b97\u6cd5", "\u4eba\u7c7b", "flies", "\u65e0\u4eba\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1069505, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u524d\u4e00\u5468\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u5728 SQLite \u4e2d\u63d2\u5165\u5341\u4ebf\u884c\u4e00\u5206\u949f\u7684\u5e16\u5b50\uff0c\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u5de7\u5408\uff0c\u56e0\u4e3a\u6211\u6b63\u5728\u5bf9\u6211\u81ea\u5df1\u7684 SQLite/Objective-Sadapter \u8fdb\u884c\u4e00\u4e9b\u8c03\u6574\u3002 \uff08\u5e16\u5b50\u7684\u6807\u9898\u540e\u6765\u52a0\u4e0a\u4e86\u201cTowards\u201d\uff0c\u56e0\u4e3a\u4f5c\u8005\u8fd8\u6ca1\u6709\u63a5\u8fd1\u8fbe\u5230\u90a3\u4e2a\u76ee\u6807\uff09\u3002\u8fd9\u4e2a SQLite \u9002\u914d\u5668\u662f\u6211\u4e4b\u524d\u5173\u4e8e\u4f18\u5316 JSON \u6027\u80fd\u7684\u7cfb\u5217\u6587\u7ae0\u7684\u884d\u751f\u4ea7\u54c1\uff0c\u5b83\u672c\u8eab\u662f\u7531 Swift Coding \u5728\u8fd9\u4e2a\u76f8\u5f53\u7b80\u5355\u548c\u76f8\u5173\u7684\u4efb\u52a1\u4e2d\u8868\u73b0\u5f97\u975e\u5e38\u7cdf\u7cd5\u800c\u89e6\u53d1\u7684\u3002\u56de\u987e\u4e00\u4e0b\uff1aSwift \u7684 JSON \u7f16\u7801\u5668\u7684\u65f6\u949f\u901f\u5ea6\u7ea6\u4e3a 10MB/s\u3002\u901a\u8fc7\u4f7f\u7528\u6d41\u5a92\u4f53\u65b9\u6cd5\u548c\u4e00\u4e9b\u8c03\u6574\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u5927\u7ea6 200MB/s\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u6211\u4e00\u76f4\u81f4\u529b\u4e8e\u4f7f Objective-S \u5bf9 UI \u5de5\u4f5c\u66f4\u52a0\u6709\u7528\uff0c\u5bf9\u8c61\u5b57\u9762\u91cf\u8bed\u6cd5\u4f7f\u5f97\u5b9a\u4e49 UI \u4e0e\u5404\u79cd\u201c\u58f0\u660e\u6027\u201d\u529f\u80fd\u65b9\u6cd5\uff08\u4f8b\u5982 React \u6216 SwiftUI\uff09\u4e00\u6837\u65b9\u4fbf\u3002\u9664\u975e\u5b83\u4ecd\u7136\u4f7f\u7528\u6211\u4eec\u719f\u6089\u548c\u559c\u7231\u7684 AppKit \u6216 UIKit \u5bf9\u8c61\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f3a\u8feb\u6211\u4eec\u63a5\u53d7 UI \u662f\u6a21\u578b\u7684\u7eaf\u51fd\u6570\u7684\u611a\u8822\u89c2\u5ff5\u3002\u54e6\uff0c\u4f60\u4f1a\u5f97\u5230\u771f\u6b63\u6709\u6548\u7684\u5b9e\u65f6\u9884\u89c8\u3002\u4f46\u7a0d\u540e\u4f1a\u8be6\u7ec6\u4ecb\u7ecd\u3002\u6240\u4ee5\u6211\u6b63\u5728\u6162\u6162\u5730\u505a\u4e00\u4e2a ToDoMVC\uff0c\u4e00\u4e2a\u5bf9\u6211\u6765\u8bf4\u611f\u89c9\u5f88\u81ea\u7136\u7684\u57fa\u51c6\u3002\u867d\u7136\u6211\u4ecd\u7136\u975e\u5e38\u503e\u5411\u4e8e\u8f6c\u50a8 JSON \u6587\u4ef6\uff0c\u800c\u4e14\u4e4b\u524d\u7684\u7cfb\u5217\u6587\u7ae0\u5e0c\u671b\u8868\u660e\u8fd9\u79cd\u65b9\u6cd5\u8db3\u591f\u5feb\uff0c\u4f46\u6211\u610f\u8bc6\u5230\u5f88\u591a\u4eba\u66f4\u559c\u6b22\u201c\u771f\u6b63\u7684\u201d\u6570\u636e\u5e93\uff0c\u5c24\u5176\u662f\u5728\u540e\u7aef\uff0c\u6211\u60f3\u8981\u4e5f\u53ef\u4ee5\u6784\u5efa\u5b83\u3002\u6211\u5bf9 Objective-S \u7684\u4f17\u591a\u57fa\u51c6\u6d4b\u8bd5\u4e4b\u4e00\u662f\uff0c\u7528\u5b83\u6784\u5efa\u66f4\u597d\u7684 Rails \u5e94\u8be5\u662f\u53ef\u80fd\u7684\u3002 \uff08\u6b64\u65f6\u6211\u5f88\u786e\u5b9a\u6211\u4f1a\u8fbe\u5230\u8be5\u57fa\u51c6\uff09\u3002\u5224\u65ad\u4f60\u662f\u5426\u6709\u4e00\u4e2a\u597d\u7684\u8bbe\u8ba1\u7684\u65b9\u6cd5\u4e4b\u4e00\u662f\u5bf9\u5176\u8fdb\u884c\u538b\u529b\u6d4b\u8bd5\u3002\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u538b\u529b\u6d4b\u8bd5\u662f\u770b\u770b\u5b83\u53ef\u4ee5\u8fd0\u884c\u591a\u5feb\uff0c\u56e0\u4e3a\u8fd9\u4f1a\u544a\u8bc9\u4f60\u4f60\u6784\u5efa\u7684\u4e1c\u897f\u662f\u5426\u7cbe\u76ca\uff0c\u6216\u8005\u4f60\u662f\u5426\u653e\u5165\u4e86\u4e0d\u5fc5\u8981\u7684\u5c42\u548c\u95f4\u63a5\u3002\u8fd9\u5728\u811a\u672c\u7ec4\u4ef6 (pdf) \u7cfb\u7edf\u4e2d\u7279\u522b\u6709\u8da3\uff0c\u8be5\u7cfb\u7edf\u5c06\u76f8\u5bf9\u7f13\u6162\u4f46\u7075\u6d3b\u7684\u4ea4\u4e92\u5f0f\u811a\u672c\u8bed\u8a00\u4e0e\u5feb\u901f\u3001\u4f18\u5316\u7684\u7ec4\u4ef6\u76f8\u7ed3\u5408\u3002\u95ee\u9898\u662f\u60a8\u662f\u5426\u53ef\u4ee5\u5728\u83b7\u5f97\u5feb\u901f\u7ec4\u4ef6\u7684\u597d\u5904\u7684\u540c\u65f6\u771f\u6b63\u7ed3\u5408\u811a\u672c\u8bed\u8a00\u7684\u7075\u6d3b\u6027\uff0c\u800c\u4e0d\u662f\u5fc5\u987b\u6df1\u5165\u9002\u5e94\u548c\u4f18\u5316\u6bcf\u4e2a\u7528\u4f8b\u7684\u7ec4\u4ef6\uff0c\u6216\u8005\u5c3d\u7ba1\u7ec4\u4ef6\u5feb\u901f\uff0c\u4f46\u6027\u80fd\u5374\u5f88\u6162\u3002\u6211\u7684\u9884\u611f\u662f\uff0c\u6211\u5df2\u7ecf\u4f7f\u7528\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6d41\u5a92\u4f53\u65b9\u6cd5\u5bf9\u4e8e JSON \u548c Objective-C \u975e\u5e38\u6709\u6548\uff0c\u5728\u8fd9\u4e2a\u66f4\u5177\u6311\u6218\u6027\u7684\u73af\u5883\u4e2d\u4e5f\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\u5267\u900f\u8b66\u62a5\uff1a\u786e\u5b9e\u5982\u6b64\uff01\u57fa\u51c6\u6d4b\u8bd5\u662f\u811a\u672c\u7684\u7a0d\u5fae\u4fee\u6539\u7248\u672c\uff0c\u7528\u4f5c\u4efb\u52a1\u540e\u7aef\u3002\u5c31\u50cf\u4e0a\u8ff0\u793a\u4f8b\u811a\u672c\u4e00\u6837\uff0c\u5b83\u8fd8\u521b\u5efa\u4e86\u4e00\u4e2a\u4efb\u52a1\u6570\u636e\u5e93\u5e76\u63d2\u5165\u4e86\u4e00\u4e9b\u793a\u4f8b\u884c\u3002\u5b83\u4e0d\u662f\u63d2\u5165\u4e24\u884c\uff0c\u800c\u662f\u63d2\u5165 1000 \u4e07\u3002\u6216\u8005\u4e00\u4ebf\u3002 #!env stsh#- taskbench: dbref#class Task { var id.\u5b8c\u6210\u3002 var \u6807\u9898\u3002 -\u63cf\u8ff0 { \u201d \u201d\u3002 } +sqlForCreate { &#39;( [id] INTEGER PRIMARY KEY, [title] VARCHAR(220) NOT NULL, [done] INTEGER );&#39;. }}.scheme todo : MPWAbstractStore { var db. var \u4efb\u52a1\u8868\u3002 -initWithRef:ref { this:db := (MPWStreamQLite \u5206\u914d initWithPath:ref \u8def\u5f84)\u3002 this:tasksTable := #MPWSQLTable{ #db: this:db , #tableClass: Task, #name: &#39;tasks&#39; }.\u8fd9\uff1a\u6570\u636e\u5e93\u6253\u5f00\u3002\u81ea\u5df1\u3002 } - createTable { this:tasksTable \u521b\u5efa\u3002 this:tasksTable := this:db \u8868\u5728\uff1a&#39;tasks&#39;\u3002 this:tasksTable createEncoderMethodForClass: \u4efb\u52a1\u3002 } -createTaskListToInsert: log10ofSize { baseList \u2190 #( #Task{ #title: &#39;Clean Room&#39;, #done: false }, #Task{ #title: &#39;Check Twitter&#39;, #done: true } )\u3002 ...\u590d\u5236...\u4efb\u52a1\u5217\u8868\u3002 } - insertTasks { taskList := self createTaskListToInsert:6\u3002 1 \u5230\uff1a10 \u505a\uff1a{ this:tasksTable insert:taskList. }. }}.todo := todo alloc initWithRef:dbref.todo createTable.todo insertTasks\u3002 \uff08\u6211\u5df2\u7ecf\u5220\u9664\u4e86\u5c06 2 \u4e2a\u4efb\u52a1\u590d\u5236\u5230\u6211\u4eec\u9700\u8981\u63d2\u5165\u7684\u6570\u767e\u4e07\u4e2a\u4efb\u52a1\u7684\u5217\u8868\u4e2d\u7684\u65b9\u6cd5\u7684\u4e3b\u4f53\u3002\u5b83\u5f88\u5e9e\u5927\u800c\u4e14\u4e0d\u76f8\u5173\u3002\uff09\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86 Task \u7c7b\u5e76\u4f7f\u7528\u5b83\u6765\u521b\u5efa SQL \u8868.\u6211\u4eec\u4e5f\u53ef\u4ee5\u7b80\u5355\u5730\u521b\u5efa\u8868\u5e76\u4ece\u4e2d\u751f\u6210\u4e00\u4e2a Tasks \u7c7b\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd0\u884c\u6b64\u811a\u672c\u4f1a\u4ea7\u751f\u4ee5\u4e0b\u7ed3\u679c\u3002 &gt; \u65f6\u95f4 ./taskbench-sqlite.st /tmp/tasks1.db ./taskbench-sqlite.st /tmp/tasks1.db 4.07s \u7528\u6237 0.20s \u7cfb\u7edf 98% cpu 4.328 \u603b\u8ba1&gt; ls -al /tmp/tasks1.db* -rw-r--r-- 1 marcel wheel 214M Jul 24 20:11 /tmp/tasks1.db&gt; sqlite3 /tmp/tasks1.db &#39;select count(id) from tasks;&#39; 10000000 \u6240\u4ee5\u6211\u4eec\u5728 4.328 \u79d2\u5185\u63d2\u5165\u4e86 10M \u884c\uff0c\u4ea7\u751f\u4e86\u6570\u767e\u5146\u5b57\u8282\u7684 SQLite \u6570\u636e\u3002\u5982\u679c\u6211\u4eec\u8ba9\u5b83\u8fd0\u884c\u4e00\u5206\u949f\uff0c\u8fd9\u5c06\u662f 138M \u884c\u3002\u597d\u7684\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u539f\u59cb\u6587\u7ae0\u7684\u6570\u5b57\u5bf9\u4e8e CPython \u662f 1100 \u4e07\u884c/\u5206\u949f\uff0c\u5bf9\u4e8e PyPy \u662f 4000 \u4e07\u884c/\u5206\u949f\uff0c\u5bf9\u4e8e Rust \u662f 1.81 \u4ebf\u884c/\u5206\u949f\uff0c\u5c3d\u7ba1\u5728\u901f\u5ea6\u8f83\u6162\u7684\u82f1\u7279\u5c14 MacBookPro \u4e0a\u8fd0\u884c\uff0c\u800c\u6211\u5728 M1 Air \u4e0a\u8fd0\u884c\u5b83\u3002\u6211\u5728\u6211\u7684 M1 Air \u4e0a\u7f16\u8bd1\u5e76\u8fd0\u884c\u4e86 Rust \u7248\u672c\uff0c\u5b83\u5728 21 \u79d2\u5185\u5b8c\u6210\u4e86 100M \u884c\uff0c\u6240\u4ee5\u6bd4\u6211\u7684 Objective-S \u811a\u672c\u5feb\u4e24\u500d\u591a\uff0c\u5c3d\u7ba1\u4f7f\u7528\u4e86\u66f4\u7b80\u5355\u7684\u6a21\u5f0f\uff08CHAR(6) \u800c\u4e0d\u662f VARCHAR(220)\uff09 ) \u548c\u66f4\u5c11\u7684\u6570\u636e\uff081.5GB \u4e0e 100M \u884c\u7684 2.1GB\uff09\u3002\u811a\u672c\u7684\u521d\u59cb\u7248\u672c\u8981\u6162\u5f97\u591a\uff0c\u800c\u4e14\u8d77\u521d\u5b83\u662f\uff0c\u5443\uff0cSQLite \u7684\u201c\u6b21\u4f18\u201d\u4f7f\u7528\uff0c\u8fd9\u662f\u4e3b\u8981\u7684\u7f6a\u9b41\u7978\u9996\uff0c\u4e3b\u8981\u662f\u5728\u6ca1\u6709\u6279\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u5355\u72ec\u63d2\u5165\u6bcf\u4e00\u884c\u3002\u5f53 SQLite \u770b\u5230\u4e8b\u52a1\u4e2d\u672a\u5305\u542b\u7684 INSERT\uff08\u6216\u4e0e\u6b64\u76f8\u5173\u7684 UPDATE\uff09\u65f6\uff0c\u5b83\u4f1a\u81ea\u52a8\u5c06\u8be5 INSERT \u5305\u88c5\u5728\u751f\u6210\u7684\u4e8b\u52a1\u4e2d\uff0c\u5e76\u5728\u5904\u7406 INSERT \u540e\u63d0\u4ea4\u8be5\u4e8b\u52a1\u3002\u7531\u4e8e SQLite \u975e\u5e38\u6ce8\u91cd\u786e\u4fdd\u4e8b\u52a1\u4ee5\u539f\u5b50\u65b9\u5f0f\u5230\u8fbe\u78c1\u76d8\uff0c\u56e0\u6b64\u901f\u5ea6\u5f88\u6162\u3002\u975e\u5e38\u6162\u3002\u5904\u7406 SQLite \u63d2\u5165\u7684\u7c7b\u662f\u4e00\u4e2a\u591a\u6001\u5199\u5165\u6d41\uff0c\u56e0\u6b64\u5b83\u77e5\u9053\u6570\u7ec4\u662f\u4ec0\u4e48\u3002\u5f53\u5b83\u9047\u5230\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u5b83\u4f1a\u5411\u81ea\u5df1\u53d1\u9001 beginArray \u6d88\u606f\uff0c\u5199\u5165\u6570\u7ec4\u7684\u5185\u5bb9\u5e76\u901a\u8fc7\u5411\u81ea\u5df1\u53d1\u9001 endArray \u6d88\u606f\u6765\u5b8c\u6210\u3002\u56e0\u4e3a\u7f16\u5199\u4e00\u4e2a\u6570\u7ec4\u610f\u5473\u7740\u4f60\u60f3\u5199\u6240\u6709\u5b83\uff0c\u8fd9\u662f\u4e00\u4e2a\u63d2\u5165\u4e8b\u52a1\u7684\u597d\u5730\u65b9\uff1a\u6240\u4ee5\u73b0\u5728\uff0c\u5982\u679c\u4f60\u60f3\u5c06\u4e00\u5806\u5bf9\u8c61\u4f5c\u4e3a\u5355\u4e2a\u4e8b\u52a1\u7f16\u5199\uff0c\u53ea\u9700\u5c06\u5b83\u4eec\u5199\u4e3a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5982\u57fa\u51c6\u4ee3\u7801\u53ef\u4ee5\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5c0f\u95ee\u9898\uff0c\u4f46\u5728\u90a3\u4e4b\u540e\u4e0d\u5230 10% \u7684\u603b\u65f6\u95f4\u82b1\u5728 SQLite \u4e0a\uff0c\u6240\u4ee5\u662f\u65f6\u5019\u4f18\u5316\u8c03\u7528\u8005\uff0c\u6211\u7684\u4ee3\u7801\u4e86\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u7684\u731c\u6d4b\u662f\u5269\u4e0b\u7684\u6700\u5927\u7684\u51cf\u901f\u5c06\u662f\u6211\u7684\uff0c\u5443\uff0c\u201c\u96c4\u4f1f\u7684\u201dObjective-Sinterpreter\u3002\u6211\u9519\u4e86\uff0c\u8fd9\u662f\u53ef\u53ef\u5b57\u7b26\u4e32\u5904\u7406\u3002\u6211\u4e0d\u4ec5\u662f\u52a8\u6001\u521b\u5efa SQLite \u53c2\u6570\u5360\u4f4d\u7b26\u952e\uff0c\u56e0\u6b64\u4e3a\u6bcf\u4e00\u884c\u7684\u6bcf\u4e00\u5217\u5206\u914d\u65b0\u7684 NSString \u5bf9\u8c61\uff0c\u800c\u4e14\u73b0\u5728\u4ece NSString \u5bf9\u8c61\u83b7\u53d6\u5b57\u7b26\u6570\u636e\u6d89\u53ca\u4f7f\u7528\u7f16\u7801\u8f6c\u6362\u6d41\u7684\u4e00\u4e9b\u975e\u5e38\u590d\u6742\u548c\u7f13\u6162\u7684\u5185\u90e8\u673a\u5236\u3002 -UTF8String \u4e0d\u662f\u60a8\u7684\u670b\u53cb\uff0c\u5176\u4ed6\u65b9\u6cd5\u4f3c\u4e4e\u76f8\u5f53\u4e00\u81f4\u5730\u4f7f\u7528\u76f8\u540c\u7684\u6162\u901f\u673a\u5236\u3002\u6211\u60f3\u8ba9 NSString \u6162\u5f97\u53ef\u6015\u662f\u4e00\u79cd\u8ba9\u5176\u4ed6\u5b57\u7b26\u4e32\u5904\u7406\u770b\u8d77\u6765\u66f4\u597d\u7684\u65b9\u6cd5\u3002\u7ecf\u8fc7\u51e0\u6b21\u8f6c\u6362\u540e\uff0c\u4ee3\u7801\u5c06\u5728\u5b57\u5178\u4e2d\u67e5\u627e\u4f20\u5165\u7684 NSString \u952e\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230 SQLite \u53c2\u6570\u7d22\u5f15\u3002\u907f\u514d\u4e86\u5b57\u7b26\u4e32\u5904\u7406\u548c\u5b57\u7b26\u8bbf\u95ee\u3002\u5173\u4e8e\u57fa\u51c6\u4ee3\u7801\u4e2d\u7684\u7c7b\u5b9a\u4e49\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u7684\u4e00\u4ef6\u4e8b\u662f\u6ca1\u6709\u7f16\u7801\u5668\u65b9\u6cd5\uff0c\u5b83\u53ea\u5b9a\u4e49\u4e86\u5b83\u7684\u5b9e\u4f8b\u53d8\u91cf\u548c\u4e00\u4e9b\u5176\u4ed6\u5b9e\u7528\u7a0b\u5e8f\u3002\u90a3\u4e48SQLTable \u7684classdata \u662f\u5982\u4f55\u7f16\u7801\u7684\u5462\uff1f KVC\uff1f\u4e0d\uff0c\u8fd9\u4f1a\u6709\u70b9\u6162\uff0c\u5c3d\u7ba1\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u540e\u5907\u3002\u795e\u5947\u7684\u662f createEncoderMethodForClass: \u65b9\u6cd5\u3002\u987e\u540d\u601d\u4e49\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7\u5c06\u591a\u4e2a\u5757\u7c98\u8d34\u5728\u4e00\u8d77\u6765\u521b\u5efa\u7f16\u7801\u5668\u65b9\u6cd5\uff0c\u4f7f\u7528 imp_implementationWithBlock() \u5c06\u9876\u7ea7\u65b9\u6cd5\u8f6c\u6362\u4e3a\u65b9\u6cd5\uff0c\u7136\u540e\u6700\u540e\u4f7f\u7528 class_addMethod() \u5c06\u8be5\u65b9\u6cd5\u6dfb\u52a0\u5230\u76f8\u5173\u7c7b\u4e2d\u3002 -(void)createEncoderMethodForClass:(Class)theClass{ NSArray *ivars=[theClass allIvarNames]; if ( [[ivars lastObject] hasPrefix:@&quot;_&quot;]) { ivars=(NSArray*)[[ivars collect] substringFromIndex:1]; } NSMutableArray *copiers=[[NSMutableArray arrayWithCapacity:ivars.count] \u4fdd\u7559]; for (NSString *ivar in ivars) { MPWPropertyBinding *accessor=[[MPWPropertyBinding valueForName:ivar] \u4fdd\u7559]; [ivar \u4fdd\u7559]; [\u8bbf\u95ee\u5668 bindToClass:theClass]; id objBlock=^(id object, MPWFlattenStream* stream){ [stream writeObject:[accessor valueForTarget:object] forKey:ivar]; }; id intBlock=^(id object, MPWFlattenStream* stream){ [stream writeInteger:[accessor integerValueForTarget:object] forKey:ivar]; }; int typeCode = [\u8bbf\u95ee\u5668\u7c7b\u578b\u4ee3\u7801]; if ( typeCode == &#39;i&#39; || typeCode == &#39;q&#39; || typeCode == &#39;l&#39; || typeCode == &#39;B&#39; ) { [copyers addObject:Block_copy(intBlock)]; } else { [\u590d\u5370\u673a addObject:Block_copy(objBlock)]; } } void (^encoder)( id object, MPWFlattenStream *writer) = Block_copy( ^void(id object, MPWFlattenStream *writer) { for ( id block in copiers ) { void (^encodeIvar)(id object, MPWFlattenStream *writer) =block; encodeIvar(object, writer); } }); void (^encoderMethod)( id blockself, MPWFlattenStream *writer) = ^void(id blockself, MPWFlattenStream *writer) { [writer writeDictionaryLikeObject:blockself withContentBlock:encoder]; }; IMP encoderMethodImp = imp_implementationWithBlock(encoderMethod); class_addMethod(theClass, [self streamWriterMessage], encoderMethodImp, &quot;v@:@&quot; );} \u5de7\u5999\u7684\u662f\u6211\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u4e3a\u8fd9\u4e2a\u7279\u5b9a\u7528\u4f8b\u7f16\u5199\u90a3\u4e2a\u65b9\u6cd5\uff1a\u6211\u5df2\u7ecf\u4e3a JSON \u7f16\u7801\u521b\u5efa\u4e86\u5b83\u3002\u7531\u4e8e JSON \u7f16\u7801\u5668\u548c SQLite \u7f16\u5199\u5668\u90fd\u662f\u591a\u6001\u5199\u5165\u6d41\uff08\u4f5c\u4e3a\u76f8\u5e94\u89e3\u7801\u5668/\u89e3\u6790\u5668\u7684\u76ee\u6807\uff09\uff0c\u56e0\u6b64\u76f8\u540c\u7684\u65b9\u6cd5\u5f00\u7bb1\u5373\u7528\u3002 \uff08\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u4e2a\u7f16\u7801\u5668-\u751f\u6210\u5668\u76ee\u524d\u4e0d\u80fd\u5904\u7406\u6240\u6709\u79cd\u7c7b\u7684\u6570\u636e\u7c7b\u578b\uff1b\u8fd9\u662f\u6545\u610f\u7684\uff09\u3002\u7f16\u7801\u5668\u65b9\u6cd5\u4f7f\u7528 MPWPropertyBinding \u5bf9\u8c61\u901a\u8fc7\u5bf9\u8c61\u7684\u8bbf\u95ee\u5668\u9ad8\u6548\u8bbf\u95ee\u5b9e\u4f8b\u53d8\u91cf\uff0c\u7f13\u5b58 IMP \u5e76\u6839\u636e\u9700\u8981\u8f6c\u6362\u6570\u636e\uff0c\u56e0\u6b64\u5b83\u4eec\u65e2\u9ad8\u6548\u53c8\u7075\u6d3b\u3002\u7136\u800c\uff0cObjective-S \u4e3a\u5176\u5b9e\u4f8b\u53d8\u91cf\u751f\u6210\u7684\u5b9e\u9645\u8bbf\u95ee\u5668\u76f8\u5f53\u5df4\u6d1b\u514b\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f7f\u7528\u4e0e Objective-S \u65b9\u6cd5\u76f8\u540c\u7684\u57fa\u672c\u673a\u5236\uff0c\u53ea\u80fd\u5904\u7406\u5bf9\u8c61\uff0c\u4e0d\u80fd\u5904\u7406\u539f\u59cb\u6570\u636e\u7c7b\u578b\u3002\u4e3a\u4e86\u4e0eObjective-C\u65e0\u7f1d\u4e92\u64cd\u4f5c\uff0c\u671f\u671b\u65b9\u6cd5\u53ef\u4ee5\u91c7\u7528\u5bf9\u8c61\u4ee5\u5916\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u6709\u975e\u5bf9\u8c61\u65b9\u6cd5\u53c2\u6570\u5728\u4f20\u5165\u65f6\u8f6c\u6362\u4e3a\u5bf9\u8c61\uff0c\u8fd4\u56de\u503c\u5728\u4f20\u51fa\u65f6\u4ece\u5bf9\u8c61\u8f6c\u6362\u4e3a\u539f\u59cb\u503c\u3002\u56e0\u6b64\uff0c\u5373\u4f7f\u662f\u539f\u59cb\u7c7b\u578b\u7684\u8bbf\u95ee\u5668\uff0c\u4f8b\u5982\u6574\u6570\u201cid\u201d\u6216\u5e03\u5c14\u503c\u201cdone\u201d\uff0c\u4e5f\u4f1a\u901a\u8fc7\u63a5\u53e3\u673a\u5236\u5c06\u5b83\u4eec\u7684\u503c\u8f6c\u6362\u4e3a\u5bf9\u8c61\u6216\u4ece\u5bf9\u8c61\u8f6c\u6362\u3002\u6b63\u5982\u6211\u4e0a\u9762\u63d0\u5230\u7684\uff0c\u6211\u6709\u70b9\u60ca\u8bb6\uff0c\u8fd9\u79cd\u4f4e\u6548\u7387\u88ab\u57fa\u4e8e NSString \u7684\u5bc6\u94a5\u5904\u7406\u6240\u63a9\u76d6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ffd\u6c42 SQLite \u63d2\u5165\u57fa\u51c6\u7684\u539f\u56e0\u4e4b\u4e00\u662f\u6709\u4e00\u4e2a\u6700\u7ec8\u89e3\u51b3\u8fd9\u4e2a Rube-Goldberg \u673a\u5236\u7684\u7406\u7531\u3002\u6700\u540e\uff0c\u5b9e\u9645\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u8fdc\u6ca1\u6709\u6211\u62c5\u5fc3\u7684\u90a3\u4e48\u590d\u6742\uff0c\u8be5\u6280\u672f\u4e0e\u4e0a\u9762\u7528\u4e8e\u7f16\u7801\u5668-\u751f\u6210\u5668\u7684\u6280\u672f\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u66f4\u7b80\u5355\u3002\u6839\u636e\u7c7b\u578b\uff0c\u6211\u4eec\u4f7f\u7528\u4e0d\u540c\u7684\u5757\uff0c\u8be5\u5757\u4f7f\u7528\u5b9e\u4f8b\u53d8\u91cf\u7684\u504f\u79fb\u91cf\u8fdb\u884c\u53c2\u6570\u5316\u3002\u6211\u5728\u4e0b\u9762\u5c55\u793a\u4e86 setter-generator\uff0c\u56e0\u4e3a\u7531\u4e8e\u4fdd\u7559\u8ba1\u6570\u5904\u7406\uff0c\u5bf9\u8c61\u6848\u4f8b\u7684\u4ee3\u7801\u5b9e\u9645\u4e0a\u662f\u4e0d\u540c\u7684\uff1a #define pointerToVarInObject( type, anObject ,offset) ((type*)(((char*)anObject) + offset ))#ifndef __clang_analyzer__// \u8fd9\u4e2a\u6cc4\u6f0f\u662f\u56e0\u4e3a\u6211\u4eec\u6b63\u5728\u5b89\u88c5\u5230\u8fd0\u884c\u65f6\uff0c\u65e0\u6cd5\u5220\u9664 after-(void)installInClass:(Class)aClass{ SEL aSelector=NSSelectorFromString([self objcMessageName]); const char *typeCode=NULL; int ivarOffset = (int)[ivarDef offset]; IMP getterImp=NULL; switch ( ivarDef.objcTypeCode ) { case &#39;d&#39;: case &#39;@&#39;: typeCode = &quot;v@:@&quot;; void (^objectSetterBlock)(id object,id arg) = ^void(id object,id arg) { id *p=pointerToVarInObject(id,object,ivarOffset); if ( *p != arg ) { [*p \u91ca\u653e]; [\u53c2\u6570\u4fdd\u7559]; *p=arg; } }; getterImp=imp_implementationWithBlock(objectSetterBlock);\u4f11\u606f; case &#39;i&#39;: case &#39;l&#39;: case &#39;B&#39;: typeCode = &quot;v@:l&quot;; void (^intSetterBlock)(id object,long arg) = ^void(id object,long arg) { *pointerToVarInObject(long,object,ivarOffset)=arg; }; getterImp=imp_implementationWithBlock(intSetterBlock);\u4f11\u606f;\u9ed8\u8ba4\u503c\uff1a[NSException raise:@&quot;invalidtype&quot; format:@&quot;Don&#39;t know how to generate set accessor for type &#39;%c&#39;&quot;,ivarDef.objcTypeCode];\u4f11\u606f; } if ( getterImp &amp;&amp; typeCode ) { class_addMethod(aClass, aSelector, getterImp, typeCode );\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u914d\u7f6e\u6587\u4ef6\u5f00\u59cb\u63a5\u8fd1\u5927\u7ea6\u4e09\u5206\u4e4b\u4e8c\u7684\u65f6\u95f4\u82b1\u5728 sqlite_ \u51fd\u6570\u4e0a\uff0c\u56e0\u6b64\u4f18\u5316\u5de5\u4f5c\u5f00\u59cb\u8fdb\u5165\u6536\u76ca\u9012\u51cf\u533a\u57df\u3002\u660e\u663e\u5f00\u9500\u7684\u6700\u540e\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u70b9\u662f\u53c2\u6570\u7d22\u5f15\u6620\u5c04\u7684\uff08\u5b57\u7b26\u4e32\uff09\u952e\uff0c\u4e0a\u9762\u7684\u4f18\u5316\u5728\u4ece NSString \u5230 NSNumber \u7684 NSDictionary \u6620\u5c04\u4e2d\u7559\u4e0b\u4e86\u5b83\u3002\u60a8\u53ef\u80fd\u77e5\u9053\uff0cNSDictionary \u5e76\u4e0d\u662f\u6700\u5feb\u7684\u3002\u4e00\u4e2a\u60f3\u6cd5\u662f\u7528 MPWFastrStringTable \u66ff\u6362\u8be5\u67e5\u627e\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u8981\u4e48\u9700\u8981\u89e3\u51b3\u5feb\u901f\u8bbf\u95ee NSString \u5b57\u7b26\u6570\u636e\u7684\u95ee\u9898\uff0c\u8981\u4e48\u9700\u8981\u66f4\u6539\u534f\u8bae\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5f3a\u5236\u6267\u884c\u5b83\uff1a\u6211\u5c06\u6307\u5411 NSString \u5bf9\u8c61\u7684\u5b9e\u9645\u6307\u9488\u5b58\u50a8\u5728\u7531 SQLite \u53c2\u6570\u7d22\u5f15\u7d22\u5f15\u7684 C-Array \u4e2d\u3002\u5728\u6211\u8fdb\u884c\u5176\u4ed6\u67e5\u627e\u4e4b\u524d\uff0c\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c\u6211\u4f7f\u7528\u4f20\u5165\u7684\u5b57\u7b26\u4e32\u6307\u9488\u5bf9\u8be5\u8868\u8fdb\u884c\u4e86\u7ebf\u6027\u626b\u63cf\u3002\u8fd9\u4e2a\u5c0f\u6280\u5de7\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4ece\u6211\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u5220\u9664\u4e86\u53c2\u6570\u7d22\u5f15\u67e5\u627e\u3002\u901a\u8fc7\u8fd9\u4e9b\u6700\u540e\u7684\u8c03\u6574\uff0c\u4ee3\u7801\u53ef\u80fd\u975e\u5e38\u63a5\u8fd1\u5b83\u6240\u8981\u83b7\u5f97\u7684\u901f\u5ea6\u3002\u4e0e Rust \u4ee3\u7801\u76f8\u6bd4\uff0c\u5b83\u7684\u6027\u80fd\u8f83\u6162\u53ef\u5f52\u56e0\u4e8e\u5b83\u6b63\u5728\u5904\u7406\u66f4\u591a\u6570\u636e\u548c\u66f4\u590d\u6742\u7684\u6a21\u5f0f\uff0c\u4ee5\u53ca\u5fc5\u987b\u4ece\u7269\u5316\u5bf9\u8c61\u4e2d\u5b9e\u9645\u83b7\u53d6\u6570\u636e\uff0c\u800c Rust \u4ee3\u7801\u53ea\u662f\u5373\u65f6\u751f\u6210 SQlite \u8c03\u7528.\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u662f\u901a\u8fc7\u4e00\u79cd\u7f13\u6162\u7684\u89e3\u91ca\u6027\u811a\u672c\u8bed\u8a00\u5b9e\u73b0\u7684\uff0c\u6240\u6709\u53ef\u53d8\u90e8\u5206\uff08\u6570\u636e\u7c7b\u3001\u63a7\u5236\u4ee3\u7801\uff09\u90fd\u5728\u6240\u8ff0\u7f13\u6162\u7684\u811a\u672c\u8bed\u8a00\u4e2d\u5b9a\u4e49\u3002\u56e0\u6b64\uff0c\u867d\u7136\u6211\u671f\u5f85 Objective-S \u7684\u672c\u673a\u7f16\u8bd1\u5668\uff0c\u4f46\u5f88\u9ad8\u5174\u77e5\u9053\u5b83\u5bf9\u4e8e\u51fa\u8272\u7684\u6027\u80fd\u5e76\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981\u7684\uff0c\u800c\u4e14\u8fd9\u4e9b API \u7684\u57fa\u672c\u8bbe\u8ba1\u662f\u5408\u7406\u7684\u3002", "note_en": "The other week, I stumbled on the post  Inserting One Billion Rows in SQLite Under A Minute, which was a funny coincidence, as I was just in the process of giving my own SQLite/Objective-Sadapter a bit of tune-up. (The post&#39;s title later had &#34;Towards&#34; prepended, because the author wasn&#39;t close to hitting that goal). This SQLite adapater was a spin-off of my earlier  article  series on  optimizing JSON performance, itself triggered bythe ludicrously bad  performance of Swift Coding at this rather simple and relevant task. To recap: Swift&#39;s JSON coder clocked in at about 10MB/s. By usinga streaming approach and a bit of tuning, we got that to around 200MB/s. Since then, I have worked on making Objective-S much more useful for UI work, with the object-literal syntax makingdefining UIs as convenient as the various &#34;declarative&#34; functional approaches such as React or SwiftUI. Except it isstill using the same AppKit or UIKit objects we know and love, and doesn&#39;t force us to embrace the  silly notion thatthe UI is a pure function of the model. Oh, and you get live previews that actually work. But more on that later. So I am slowly inching towards doing a  ToDoMVC, a benchmark that feelsrather  natural to me. While I am still very partial tojust dumping JSON files, and the previous article series hopefully showed that this approach is plenty fast enough, I realize that a lot of people prefer a &#34;real&#34; database, especially on the  back-end, and I wanted to build that as well. One of the many benchmarks I have for Objective-S is that it shouldbe possible to build a nicer Rails with it. (At this point in time I am pretty sure I will hit that benchmark). One of the ways to figure out if you have a good design is to stress-test it. One very useful stress-test is seeinghow fast it can go, because that will tell you if the thing you built is lean, or if you put in unnecessary layersand indirections. This is particularly interesting in a Scripted Components ( pdf) system that combines a relatively slowbut flexible interactive scripting language with fast, optimized components. The question is whether you can actuallycombine the flexibility of the scripting language while reaping the benefits of the fast components, rather than having to dive into adapting and optimizing the components for each use case, or just getting slow performance despitethe fast components. My hunch was that the streaming approach I have been using for a while now and that worked reallywell for JSON and Objective-C would also do well in this more challenging setting. Spoiler alert: it did! The benchmark was a slightly modified version of the script that serves as a tasks backend. Like said samplescript it also creates a tasks database and inserts some example rows. Instead of inserting two rows,it inserts 10 million. Or a hundred million. #!env stsh#- taskbench: dbref#class Task {\tvar   id.\tvar   done.\tvar   title.\t-description { &#34; &#34;. }\t+sqlForCreate {\t\t&#39;( [id] INTEGER PRIMARY KEY, [title] VARCHAR(220) NOT NULL, [done] INTEGER );&#39;.\t}}.scheme todo : MPWAbstractStore {\tvar db.\tvar tasksTable.\t-initWithRef:ref {\t\tthis:db := (MPWStreamQLite alloc initWithPath:ref path).\t\tthis:tasksTable := #MPWSQLTable{ #db: this:db , #tableClass: Task, #name: &#39;tasks&#39; }.\t\tthis:db open.\t\tself.\t}\t- createTable {\t\tthis:tasksTable create.\t this:tasksTable := this:db tables at:&#39;tasks&#39;. this:tasksTable createEncoderMethodForClass: Task.\t}\t-createTaskListToInsert: log10ofSize {\t\tbaseList \u2190 #( #Task{ #title: &#39;Clean Room&#39;, #done: false }, #Task{ #title: &#39;Check Twitter&#39;, #done: true } ).\t\t...replicate ...\t\ttaskList.\t}\t- insertTasks {\t taskList := self createTaskListToInsert:6.\t\t1 to:10 do: {\t\t\tthis:tasksTable insert:taskList.\t\t}.\t}}.todo := todo alloc initWithRef:dbref.todo createTable.todo insertTasks.\n (I have removed the body of the method that replicates the 2 tasks into the list of millions of tasks we need to insert.It was bulky and not relevant.) In this sample we define the Task class and use that to create the SQL Table. We could also have simply created the table and generated a Tasks class from that. Anyway, running this script yields the following result.  &gt; time ./taskbench-sqlite.st /tmp/tasks1.db ./taskbench-sqlite.st /tmp/tasks1.db 4.07s user 0.20s system 98% cpu 4.328 total&gt; ls -al /tmp/tasks1.db* -rw-r--r-- 1 marcel wheel 214M Jul 24 20:11 /tmp/tasks1.db&gt; sqlite3 /tmp/tasks1.db &#39;select count(id) from tasks;&#39; 10000000\n So we inserted 10M rows in 4.328 seconds, yielding several hundred megabytes of SQLite data. This would be 138M rowshad we let it run for a minute. Nice. For comparison, the original article&#39;s numbers were 11M rows/minute for CPython, 40M rows/minute for PyPy and 181M rows/minute for Rust, though on a slower Intel MacBookPro whereas I was running this on an M1 Air. I compiled and ran the Rust version on my M1 Air and it did 100M rows in 21 seconds, so just a smidgen over twice as fast as my Objective-S script, though witha simpler schema (CHAR(6) instead of VARCHAR(220)) and less data (1.5GB vs. 2.1GB for 100M rows). The initial version of the script was far, far slower, and at first it was, er, &#34;sub-optimal&#34; use of SQLitethat was the main culprit, mostly inserting every row by itself without batching. When SQLite sees anINSERT (or an UPDATE for that matter) that is not contained in a transaction, it will automatically wrap that INSERT inside a generated transaction and commit that transaction after the INSERT is processed. Since SQLite is very fastidious about ensuring that transactions get to disk atomically, this is slow. Very slow. The class handling SQLite inserts is a  Polymorphic Write Stream, so it knows what an array is.When it encounters one, it sends itself the  beginArray message, writes the contents of the array and finishes by sending itself the  endArray message. Since writing an array sort of implies thatyou want to write all of it, this was a good place to insert the transactions:   So now, if you want to write a bunch of objects as a single transaction, just write them as an array, as thebenchmark code does. There were some other minor issues, but after that less than 10% of the total timewere spent in SQLite, so it was time to optimize the caller, my code. At this point, my guess was that the biggest remaining slowdown would be my, er, &#34;majestic&#34; Objective-Sinterpreter. I was wrong, it was Cocoa string handling. Not only was I creating the SQLite parameterplaceholder keys dynamically, so allocating new NSString objects for each column of each row, it alsohappens that getting character data from an NSString object nowadays involves some very complex and slowinternal machinery using encoding conversion streams.  -UTF8String is not your friend, and othermethods appear to fairly consistently use the same slow mechanism. I guess making NSString horribly slow isone way to make other string handling look good in comparison. After a few transformations, the code would just look up the incoming NSString key in a dictionary thatmapped it to the SQLite parameter index. String-processing and character accessing averted. One thing you might have noticed about the class definition in the benchmark code is that there is noencoder method, it just defines its instance variables and some other utilities. So how is the classdata encoded for the  SQLTable? KVC? No, that would be a bit slow, though it might make a goodfallback. The magic is the  createEncoderMethodForClass: method. This method, as the name suggests,creates an encoder method by pasting together a number of blocks, turns the top-level intoa method using  imp_implementationWithBlock(), and then finally adds that methodto the class in question using  class_addMethod(). -(void)createEncoderMethodForClass:(Class)theClass{ NSArray *ivars=[theClass allIvarNames]; if ( [[ivars lastObject] hasPrefix:@&#34;_&#34;]) { ivars=(NSArray*)[[ivars collect] substringFromIndex:1]; } NSMutableArray *copiers=[[NSMutableArray arrayWithCapacity:ivars.count] retain]; for (NSString *ivar in ivars) { MPWPropertyBinding *accessor=[[MPWPropertyBinding valueForName:ivar] retain]; [ivar retain]; [accessor bindToClass:theClass]; id objBlock=^(id object, MPWFlattenStream* stream){ [stream writeObject:[accessor valueForTarget:object] forKey:ivar]; }; id intBlock=^(id object, MPWFlattenStream* stream){ [stream writeInteger:[accessor integerValueForTarget:object] forKey:ivar]; }; int typeCode = [accessor typeCode]; if ( typeCode == &#39;i&#39; || typeCode == &#39;q&#39; || typeCode == &#39;l&#39; || typeCode == &#39;B&#39; ) { [copiers addObject:Block_copy(intBlock)]; } else { [copiers addObject:Block_copy(objBlock)]; } } void (^encoder)( id object, MPWFlattenStream *writer) = Block_copy( ^void(id object, MPWFlattenStream *writer) { for ( id block in copiers ) { void (^encodeIvar)(id object, MPWFlattenStream *writer)=block; encodeIvar(object, writer); } }); void (^encoderMethod)( id blockself, MPWFlattenStream *writer) = ^void(id blockself, MPWFlattenStream *writer) { [writer writeDictionaryLikeObject:blockself withContentBlock:encoder]; }; IMP encoderMethodImp = imp_implementationWithBlock(encoderMethod); class_addMethod(theClass, [self streamWriterMessage], encoderMethodImp, &#34;v@:@&#34; );}\n What&#39;s kind of neat is that I didn&#39;t actually write that method for this particular use-case: I hadalready created it for JSON-coding. Due to the fact that the JSON-encoder and the SQLite writerare both Polymorphic Write Streams (as are the targets of the corresponding decoders/parsers), the same method worked out of the box for both. (It should be noted that this encoder-generator currently does not handle all variety of data types;this is intentional). The encoder method uses  MPWPropertyBinding objects to efficiently access the instancevariables via the object&#39;s accessors, caching IMPs and converting data as necessary, so they areboth efficient and flexible. However, the actual accessors that Objective-S generated for itsinstance variables were rather baroque, because they used the same basic mechanism used for Objective-S methods, which can only deal with objects, not with primitive data types. In order to interoperate seamlessly with Objective-C, which expected methods that cantake data types other than objects, all non-object method arguments are convertedto objects on the way in, and return values are converted from objects to primitivevalues on the way out. So even the accessors for primitive types such as the integer &#34;id&#34; or the boolean &#34;done&#34;would have their values converted to and from objects by the interface machinery. AsI noted above, I was a bit surprised that this inefficiency was overshadowed by the NSString-based key handling. In fact, one of the reason for pursuing the SQLite insert benchmark was to have a reason for finally tackling this Rube-Goldberg mechanism. In the end, actuallyaddressing it turned out to be far less complex than I had feared, with the techniquebeing very similar to that used for the encoder-generator above, just simpler. Depending on the type, we use a different block that gets parameterised with theoffset to the instance variable. I show the setter-generator below, becausethere the code for the object-case is actually different due to retain-counthandling:  #define pointerToVarInObject( type, anObject ,offset) ((type*)(((char*)anObject) + offset))#ifndef __clang_analyzer__// This leaks because we are installing into the runtime, can&#39;t remove after-(void)installInClass:(Class)aClass{ SEL aSelector=NSSelectorFromString([self objcMessageName]); const char *typeCode=NULL; int ivarOffset = (int)[ivarDef offset]; IMP getterImp=NULL; switch ( ivarDef.objcTypeCode ) { case &#39;d&#39;: case &#39;@&#39;: typeCode = &#34;v@:@&#34;; void (^objectSetterBlock)(id object,id arg) = ^void(id object,id arg) { id *p=pointerToVarInObject(id,object,ivarOffset); if ( *p != arg ) { [*p release]; [arg retain]; *p=arg; } }; getterImp=imp_implementationWithBlock(objectSetterBlock); break; case &#39;i&#39;: case &#39;l&#39;: case &#39;B&#39;: typeCode = &#34;v@:l&#34;; void (^intSetterBlock)(id object,long arg) = ^void(id object,long arg) { *pointerToVarInObject(long,object,ivarOffset)=arg; }; getterImp=imp_implementationWithBlock(intSetterBlock); break; default: [NSException raise:@&#34;invalidtype&#34; format:@&#34;Don&#39;t know how to generate set accessor for type &#39;%c&#39;&#34;,ivarDef.objcTypeCode]; break; } if ( getterImp &amp;&amp; typeCode ) { class_addMethod(aClass, aSelector, getterImp, typeCode ); } }\n At this point, profiles were starting to approach around two thirds of the time being spent in  sqlite_ functions,so the optimisation efforts were starting to get into a region of diminishing returns. One final noticeable point of obvious overhead was the (string) key to parameter index mapping, which theoptimizations above had left at a  NSDictionary mapping from  NSString to  NSNumber.As you probably know,  NSDictionary isn&#39;t exactly the fastest. One idea was to replace that lookupwith a  MPWFastrStringTable,but that means either needing to solve the problem of fast access to  NSString character data or changing the protocol. So instead I decided to brute-force it: I store the actual pointers to the NSString objects in a C-Array indexed by the SQLite parameter index. Before I do the other lookup, which I keep to be safe, I do a linear scan in that tableusing the incoming string pointer. This little trick largely removed the parameter index lookup from my profiles. With those final tweaks, the code is probably quite close to as fast as it is going to get. Its slower performancecompared to the Rust code can be attributed to the fact that it is dealing with more data and a more complexschema, as well as having to actually obtain data from materialized objects, whereas the Rust code just generatesthe SQlite calls on-the-fly. All this is achieved from a slow, interpreted scripting language, with all the variable parts (data class, steeringcode) defined in said slow scripting language. So while I look forward to the native compiler for Objective-S,it is good to know that it isn&#39;t absolutely necessary for excellent performance, and that the basic design ofthese APIs is sound.", "posttime": "2021-07-25 04:58:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sqlite,\u6bcf\u5206\u949f,rows,\u65b9\u6cd5", "title": "\u4ece\u811a\u672c\u8bed\u8a00\u6bcf\u5206\u949f\u63d2\u5165 130M SQLite \u884c", "title_en": "Inserting 130M SQLite Rows per Minute from a Scripting Language", "transed": 1, "url": "https://blog.metaobject.com/2021/07/inserting-130m-sqlite-rows-per.html", "via": "", "real_tags": ["sqlite", "\u6bcf\u5206\u949f", "rows", "\u65b9\u6cd5"]}]