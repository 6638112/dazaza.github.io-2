[{"category": "", "categoryclass": "", "imagename": "125da4c804fd14149367e0ebe559f7eb.jpeg", "infoid": 1016370, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9690\u5199\u672f\u662f\u5c06\u6587\u4ef6\u3001\u6d88\u606f\u3001\u56fe\u50cf\u6216\u89c6\u9891\u9690\u85cf\u5728\u53e6\u4e00\u4e2a\u6587\u4ef6\u3001\u6d88\u606f\u3001\u56fe\u50cf\u6216\u89c6\u9891\u4e2d\u7684\u505a\u6cd5\u3002\u201c\u9690\u5199\u672f\u201d\u4e00\u8bcd\u6765\u6e90\u4e8e\u5e0c\u814a\u8bed\u201c\u9690\u5199\u672f\u201d\uff0c\u5b83\u7531\u201cStegan\u00f3s\u201d\u548c\u201cGraphia\u201d\u4e24\u4e2a\u8bcd\u7ec4\u5408\u800c\u6210\uff0c\u201cStegan\u00f3s\u201d\u610f\u4e3a\u201c\u88ab\u906e\u76d6\u6216\u9690\u85cf\u201d\uff0c-graph\u610f\u4e3a\u201c\u4e66\u5199\u201d\u3002\n\u4ece\u8be5\u56fe\u50cf\u4e2d\u63d0\u53d6\u6587\u672c(1LSB)\uff0c\u5e76\u4f7f\u7528SYMMETRY\u548c\u6b64\u5bc6\u94a5\u4e00\u8d77\u89e3\u5bc6\uff1a&#39\uff1b23561287&#39\uff1b\u3002\uff1a)\u3002\n\u8fd9\u4e2a\u7a0b\u5e8f\u83b7\u53d6\u4e00\u4e2a\u5c01\u9762\u56fe\u50cf\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u64cd\u4f5c\u6bcf\u4e2a\u50cf\u7d20\u7684\u4f4d\u6765\u5c06\u6587\u672c\u6216\u56fe\u50cf\u5b58\u50a8\u5728\u53e6\u4e00\u4e2a\u56fe\u50cf\u4e2d\u3002\n1LSB\u610f\u5473\u7740\u6f5c\u5728\u5b58\u50a8\u51cf\u5c11\uff0c\u4f46\u566a\u97f3\u964d\u4f4e(1/255)-4LSB\u610f\u5473\u7740\u6f5c\u5728\u5b58\u50a8\u6bd41LSB\u591a4\u500d\uff0c\u4f46\u566a\u97f3\u589e\u52a04\u500d(16/255)\u3002\n\u56fe\u50cf\u5d4c\u5165\u5f53\u524d\u59cb\u7ec8\u8bbe\u7f6e\u4e3a1LSB\uff0c\u8f93\u5165\u56fe\u50cf\u5fc5\u987b\u6bd4\u5c01\u9762\u56fe\u50cf\u5c0f8\u500d\u3002\n\u6211\u4e3a\u8fd9\u4e2a\u7a0b\u5e8f\u505a\u4e86\u4e00\u4e2aYouTube\u6f14\u793a\uff0c\u4f46\u73b0\u5728\u5b83\u6709\u70b9\u8fc7\u65f6\u4e86\uff0c\u867d\u7136\u5b83\u7684\u6982\u5ff5\u4ecd\u7136\u662f\u4e00\u6837\u7684\uff01\n\u662f\u5426\u8981\u52a0\u5bc6\u6587\u672c\uff1f\u5982\u679c\u662f\uff0c\u8bf7\u952e\u5165\u5bc6\u94a5\uff0c\u7136\u540e\u5355\u51fb\u52a0\u5bc6\u3002\n\u60a8\u5fc5\u987b\u9009\u62e9\u8981\u7528\u4e8e\u5d4c\u5165\u8fc7\u7a0b\u7684LSB\u6570\u91cf\u3002\n\u5355\u51fb\u9690\u5199\u56fe\u50cf\u90e8\u5206\u4e2d\u7684\u4fdd\u5b58\uff0c\u7136\u540e\u9009\u62e9\u65b0\u9690\u5199\u56fe\u50cf\u7684\u4f4d\u7f6e\u548c\u540d\u79f0\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u60a8\u5728\u5f53\u524d\u4f1a\u8bdd\u4e2d\u4fdd\u5b58\u4e86\u9690\u5199\u56fe\u50cf\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\uff0c\u9690\u5199\u8def\u5f84\u6846\u4e2d\u5df2\u7ecf\u586b\u6ee1\u4e86\u60a8\u7684\u65b0\u56fe\u50cf\u76ee\u5f55\u4f4d\u7f6e\u3002\n\u4f7f\u7528\u9690\u5199\u8def\u5f84\u4e0b\u7684\u6253\u5f00\u6309\u94ae\u9009\u62e9\u8981\u4ece\u4e2d\u63d0\u53d6\u6d88\u606f\u7684\u56fe\u50cf\u3002\n\u5982\u679c\u60a8\u52a0\u5bc6\u4e86\u5b57\u7b26\u4e32\uff0c\u8bf7\u786e\u4fdd\u8f93\u5165\u4e86\u5bc6\u94a5\u5e76\u9009\u62e9\u4e86\u6b63\u786e\u7684\u52a0\u5bc6\u65b9\u6cd5\uff0c\u7136\u540e\u5355\u51fb\u89e3\u5bc6\u3002\n\u6ce8\u610f\uff1a\u6b64\u529f\u80fd\u4f7f\u75281LSB\u9690\u5199\uff0c\u56e0\u6b64\u60a8\u7684\u8f93\u5165\u56fe\u50cf\u5fc5\u987b\u6bd4\u5c01\u9762\u56fe\u50cf\u5c0f8\u500d\u3002", "note_en": "Steganography is the practice of concealing a file, message, image, or video within another file, message, image, or video. The word steganography comes from Greek steganographia, which combines the words stegan\u00f3s, meaning &#34;covered or concealed&#34;, and -graphia meaning &#34;writing&#34;.\n  Extract the text (1LSB) from this image and decrypt using symetric alongside this key: &#39;23561287&#39;. :)\n  This program takes a cover image and allows the user to store text OR an image inside of another image by manipulating the bits of each pixel.\n   1LSB means less potential storage but less noise (1/255) - 4LSB means more 4x more potential storage than 1LSB but 4x the noise (16/255)\n  Image embed is currently always set to 1LSB, the input image must be 8x smaller than the cover image.\n I made a YouTube  demonstration for this program but it is slightly outdated now, it&#39;s still the same concept though!\n      Do you want to encrypt the text? if so type in a key and click encrypt.\n You must select the amount of LSB you would like to use for the embedding process.\n  Click save in the &#39;stego image&#39; section and select location and name of new stego image.\n   NOTE: You will notice, if you saved your stego image in the current session, that the &#39;stego route&#39; box is already filled with your new images directory location.\n Use the open button under the stego route to select the image you would like to extract a message from.\n   IF you encrypted the string, make sure the key is entered and correct encryption method is selected, click decrypt.\n    NOTE: This feature uses 1LSB steganography and therefore your input image must be 8x smaller than your cover image.", "posttime": "2020-08-05 18:32:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,github,\u7a0b\u5e8f,program,\u56fe\u50cf", "title": "\u6211\u505a\u4e86\u4e00\u4e2a\u9690\u5199\u7a0b\u5e8f\uff0c\u5e76\u628a\u5b83\u53d1\u5e03\u5728GitHub\u4e0a", "title_en": "I made a steganography program and published it on GitHub", "transed": 1, "url": "https://github.com/JHurst97/SteganograhyProject.git", "via": "", "real_tags": ["\u53d1\u5e03", "github", "\u7a0b\u5e8f", "program", "\u56fe\u50cf"]}, {"category": "", "categoryclass": "", "imagename": "ce70e9848a1fb045e039c1b69184d6da.jpg", "infoid": 1016369, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u767b\u5f55\u4ee5\u5c06\u6b64\u9879\u76ee\u6dfb\u52a0\u5230\u60a8\u7684\u613f\u671b\u5217\u8868\u3001\u5173\u6ce8\u5b83\u6216\u5c06\u5176\u6807\u8bb0\u4e3a\u4e0d\u611f\u5174\u8da3\u3002\n\u7528\u5f2f\u66f2\u7684\u8857\u9053\u5efa\u9020\u53e4\u8272\u53e4\u9999\u7684\u6d77\u5c9b\u5c0f\u9547\u3002\u5efa\u9020\u5c0f\u6751\u5e84\uff0c\u9ad8\u8038\u7684\u5927\u6559\u5802\uff0c\u8fd0\u6cb3\u7f51\u7edc\uff0c\u6216\u9ad8\u8df7\u4e0a\u7684\u5929\u7a7a\u57ce\u5e02\u3002\u4e00\u4e2a\u8857\u533a\u63a5\u4e00\u4e2a\u8857\u533a\u3002\u6ca1\u6709\u8fdb\u7403\u3002\u6ca1\u6709\u771f\u6b63\u7684\u6e38\u620f\u6027\u3002\u53ea\u6709\u5927\u91cf\u7684\u5efa\u7b51\u548c\u5927\u91cf\u7684\u7f8e\u666f\u3002\u5c31\u662f\u8fd9\u6837\u3002Townscape\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6027\u7684\u6fc0\u60c5\u9879\u76ee\u3002\u4e0e\u5176\u8bf4\u662f\u6e38\u620f\u4e0d\u5982\u8bf4\u662f\u73a9\u5177\u3002\u4ece\u8c03\u8272\u677f\u4e2d\u6311\u9009\u989c\u8272\uff0c\u5728\u4e0d\u89c4\u5219\u7684\u7f51\u683c\u4e0a\u753b\u4e0b\u5f69\u8272\u7684\u623f\u5c4b\u8857\u533a\uff0c\u7136\u540e\u89c2\u770bTownscape er\u7684\u57fa\u672c\u7b97\u6cd5\u81ea\u52a8\u5c06\u8fd9\u4e9b\u8857\u533a\u53d8\u6210\u53ef\u7231\u7684\u5c0f\u623f\u5b50\u3001\u62f1\u95e8\u3001\u697c\u68af\u3001\u6865\u6881\u548c\u90c1\u90c1\u8471\u8471\u7684\u540e\u9662\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5b83\u4eec\u7684\u914d\u7f6e\u3002", "note_en": "Sign in to add this item to your wishlist, follow it, or mark it as not interested\n  Build quaint island towns with curvy streets. Build small hamlets, soaring cathedrals, canal networks, or sky cities on stilts. Block by block. No goal. No real gameplay. Just plenty of building and plenty of beauty. That&#39;s it. Townscaper is an experimental passion project. More of a toy than a game. Pick colors from the palette, plop down colored blocks of house on the irregular grid, and watch Townscaper&#39;s underlying algorithm automatically turn those blocks into cute little houses, arches, stairways, bridges and lush backyards, depending on their configuration.", "posttime": "2020-08-05 18:26:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5510\u7eb3,townscaper,\u9879\u76ee", "title": "\u5510\u7eb3\u65af\u6cf0\u5c14", "title_en": "Townscaper", "transed": 1, "url": "https://store.steampowered.com/app/1291340/Townscaper/", "via": "", "real_tags": ["\u5510\u7eb3", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "ff0287210796737fd34a6056d629fa7a.png", "infoid": 1016368, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u542c\u8bf4\u5229\u65af\u79d1\u592b\u66ff\u6362\u539f\u5219(LSP)\u662f\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684\u57fa\u672c\u539f\u5219\u3002\u5b83\u662f\u4ec0\u4e48\uff1f\u5b83\u7684\u7528\u6cd5\u6709\u54ea\u4e9b\u4f8b\u5b50\uff1f\n\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u8bf4\u660e\u4e86LSP(\u7531Bob\u53d4\u53d4\u5728\u6211\u6700\u8fd1\u542c\u5230\u7684\u4e00\u4e2a\u64ad\u5ba2\u4e2d\u7ed9\u51fa\u7684)\u662f\uff0c\u6709\u65f6\u5728\u81ea\u7136\u8bed\u8a00\u4e2d\u542c\u8d77\u6765\u6b63\u786e\u7684\u4e1c\u897f\u5728\u4ee3\u7801\u4e2d\u5e76\u4e0d\u80fd\u5f88\u597d\u5730\u5de5\u4f5c\u3002\n\u5728\u6570\u5b66\u4e2d\uff0c\u6b63\u65b9\u5f62\u662f\u4e00\u4e2a\u77e9\u5f62\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u77e9\u5f62\u7684\u7279\u8272\u5316\u3002&lt;#34\uff1b&gt;\u662f&lt;#34\uff1b&gt;\u4f7f\u60a8\u5e0c\u671b\u4f7f\u7528\u7ee7\u627f\u5bf9\u5176\u8fdb\u884c\u5efa\u6a21\u3002\u4f46\u662f\uff0c\u5982\u679c\u5728\u4ee3\u7801\u4e2d\u8ba9Square\u6d3e\u751f\u81eaRectangle\uff0c\u90a3\u4e48Square\u5e94\u8be5\u53ef\u4ee5\u5728\u4efb\u4f55\u9700\u8981\u77e9\u5f62\u7684\u5730\u65b9\u4f7f\u7528\u3002\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u884c\u4e3a\u3002\n\u5047\u8bbe\u60a8\u7684Rectangle\u57fa\u7c7b\u4e0a\u6709SetWidth\u548cSetHeight\u65b9\u6cd5\uff1b\u8fd9\u4f3c\u4e4e\u5b8c\u5168\u7b26\u5408\u903b\u8f91\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u7684\u77e9\u5f62\u5f15\u7528\u6307\u5411Square\uff0c\u90a3\u4e48SetWidth\u548cSetHeight\u5c31\u6ca1\u6709\u610f\u4e49\u4e86\uff0c\u56e0\u4e3a\u8bbe\u7f6e\u4e00\u4e2a\u4f1a\u66f4\u6539\u53e6\u4e00\u4e2a\u4ee5\u5339\u914d\u5b83\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cSquare\u6ca1\u6709\u901a\u8fc7\u77e9\u5f62\u7684Liskov\u66ff\u6362\u6d4b\u8bd5\uff0c\u800cSquare\u4eceRectangle\u7ee7\u627f\u7684\u62bd\u8c61\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u62bd\u8c61\u3002\n@m-Sharp\u5982\u679c\u5b83\u662f\u4e00\u4e2a\u4e0d\u53d8\u7684\u77e9\u5f62\uff0c\u800c\u4e0d\u662fSetWidth\u548cSetHeight\uff0c\u800c\u662fGetWidth\u548cGetHeight\u65b9\u6cd5\u5462\uff1f--Pacerier\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u7684\u5bd3\u610f\u662f\uff1a\u57fa\u4e8e\u884c\u4e3a\u800c\u4e0d\u662f\u5c5e\u6027\u4e3a\u60a8\u7684\u7c7b\u5efa\u6a21\uff1b\u57fa\u4e8e\u5c5e\u6027\u800c\u4e0d\u662f\u884c\u4e3a\u4e3a\u60a8\u7684\u6570\u636e\u5efa\u6a21\u3002\u5982\u679c\u5b83\u7684\u884c\u4e3a\u50cf\u4e00\u53ea\u9e2d\u5b50\uff0c\u90a3\u5b83\u80af\u5b9a\u662f\u4e00\u53ea\u9e1f\u3002-Sklivvz\u3002\n\u55ef\uff0c\u6b63\u65b9\u5f62\u663e\u7136\u662f\u73b0\u5b9e\u4e16\u754c\u4e2d\u7684\u4e00\u79cd\u77e9\u5f62\u3002\u6211\u4eec\u80fd\u5426\u5728\u4ee3\u7801\u4e2d\u5bf9\u6b64\u8fdb\u884c\u5efa\u6a21\u53d6\u51b3\u4e8e\u89c4\u8303\u3002LSP\u6307\u793a\u7684\u662f\u5b50\u7c7b\u578b\u884c\u4e3a\u5e94\u8be5\u4e0e\u57fa\u672c\u7c7b\u578b\u89c4\u8303\u4e2d\u5b9a\u4e49\u7684\u57fa\u672c\u7c7b\u578b\u884c\u4e3a\u76f8\u5339\u914d\u3002\u5982\u679cRectangle\u57fa\u7c7b\u578b\u89c4\u8303\u8bf4\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u53ef\u4ee5\u5355\u72ec\u8bbe\u7f6e\uff0c\u90a3\u4e48LSP\u5c31\u4f1a\u8bf4Square\u4e0d\u80fd\u662fRectangle\u7684\u5b50\u7c7b\u578b\u3002\u5982\u679cRectangle\u89c4\u8303\u8bf4Rectangle\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u90a3\u4e48\u6b63\u65b9\u5f62\u53ef\u4ee5\u662fRectangle\u7684\u5b50\u7c7b\u578b\u3002\u8fd9\u90fd\u662f\u5173\u4e8e\u5b50\u7c7b\u578b\u7ef4\u62a4\u4e3a\u57fa\u7c7b\u578b\u6307\u5b9a\u7684\u884c\u4e3a\u3002-SteveT\u3002\n@Pacerier\u5982\u679c\u5b83\u662f\u4e0d\u53d8\u7684\uff0c\u5c31\u6ca1\u6709\u95ee\u9898\u3002\u8fd9\u91cc\u771f\u6b63\u7684\u95ee\u9898\u662f\uff0c\u6211\u4eec\u5efa\u6a21\u7684\u4e0d\u662f\u77e9\u5f62\uff0c\u800c\u662f\u53ef\u8c03\u6574\u5f62\u72b6\u7684\u77e9\u5f62\uff0c\u5373\u5bbd\u5ea6\u6216\u9ad8\u5ea6\u5728\u521b\u5efa\u540e\u53ef\u4ee5\u4fee\u6539\u7684\u77e9\u5f62(\u6211\u4eec\u4ecd\u7136\u8ba4\u4e3a\u5b83\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61)\u3002\u5982\u679c\u6211\u4eec\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u770b\u5f85Rectangle\u7c7b\uff0c\u663e\u7136\u6b63\u65b9\u5f62\u4e0d\u662f\u53ef\u91cd\u5851\u7684\u77e9\u5f62\uff0c\u56e0\u4e3a\u6b63\u65b9\u5f62\u4e0d\u80fd\u88ab\u91cd\u5851\u5e76\u4e14(\u901a\u5e38)\u4ecd\u7136\u662f\u6b63\u65b9\u5f62\u3002\u4ece\u6570\u5b66\u4e0a\u8bb2\uff0c\u6211\u4eec\u770b\u4e0d\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u53ef\u53d8\u6027\u5728\u6570\u5b66\u4e0a\u4e0b\u6587\u4e2d\u751a\u81f3\u6ca1\u6709\u610f\u4e49\u3002-\u963f\u65af\u8fc8\u52d2(Masmeurer)\n\u6211\u6709\u4e00\u4e2a\u5173\u4e8e\u539f\u5219\u7684\u95ee\u9898\u3002\u5982\u679cSquare.setWidth(Int Width)\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u6709\u95ee\u9898\uff1athis.width=width\uff1bthis.high=width\uff1b\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u5bbd\u5ea6\u7b49\u4e8e\u9ad8\u5ea6\u3002-MMC\u7687\u5e1d\u3002\n\u5229\u65af\u79d1\u592b\u66ff\u6362\u539f\u7406(LSP\uff0c)\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u6982\u5ff5\uff0c\u5b83\u58f0\u660e\uff1a\n\u4f7f\u7528\u6307\u5411\u57fa\u7c7b\u7684\u6307\u9488\u6216\u5f15\u7528\u7684\u51fd\u6570\u5fc5\u987b\u80fd\u591f\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u3002\nLSP\u7684\u6838\u5fc3\u662f\u5173\u4e8e\u63a5\u53e3\u548c\u5951\u7ea6\uff0c\u4ee5\u53ca\u5982\u4f55\u51b3\u5b9a\u4f55\u65f6\u6269\u5c55\u7c7b\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u53e6\u4e00\u79cd\u7b56\u7565(\u5982\u7ec4\u5408)\u6765\u5b9e\u73b0\u60a8\u7684\u76ee\u6807\u3002\n\u6211\u6240\u89c1\u8fc7\u7684\u6700\u6709\u6548\u7684\u8bf4\u660e\u8fd9\u4e00\u70b9\u7684\u65b9\u6cd5\u662f\u5728head first OOA&and D\u4e2d\u3002\u5b83\u4eec\u63d0\u4f9b\u4e86\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff1a\u4f60\u662f\u4e00\u4e2a\u9879\u76ee\u7684\u5f00\u53d1\u4eba\u5458\uff0c\u4e3a\u6218\u7565\u6e38\u620f\u6784\u5efa\u4e00\u4e2a\u6846\u67b6\u3002\n\u6240\u6709\u65b9\u6cd5\u90fd\u4ee5X\u548cY\u5750\u6807\u4f5c\u4e3a\u53c2\u6570\u6765\u5b9a\u4f4d\u4e8c\u7ef4\u74f7\u7816\u9635\u5217\u4e2d\u7684\u74f7\u7816\u4f4d\u7f6e\u3002\u8fd9\u5c06\u5141\u8bb8\u6e38\u620f\u5f00\u53d1\u8005\u5728\u6e38\u620f\u8fc7\u7a0b\u4e2d\u7ba1\u7406\u68cb\u76d8\u4e2d\u7684\u5355\u5143\u3002\n\u8fd9\u672c\u4e66\u63a5\u7740\u6539\u53d8\u4e86\u8981\u6c42\uff0c\u8bf4\u6e38\u620f\u6846\u67b6\u8fd8\u5fc5\u987b\u652f\u63013D\u6e38\u620f\u677f\uff0c\u4ee5\u9002\u5e94\u5177\u6709\u98de\u884c\u529f\u80fd\u7684\u6e38\u620f\u3002\u56e0\u6b64\u5f15\u5165\u4e86\u4e00\u4e2a\u6269\u5c55Board\u7684ThreeDBoard\u7c7b\u3002\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e2a\u4e0d\u9519\u7684\u51b3\u5b9a\u3002Board\u63d0\u4f9b\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u5c5e\u6027\uff0cThreeDboard\u63d0\u4f9bZ\u8f74\u3002\n\u5f53\u4f60\u770b\u770b\u4ece\u8463\u4e8b\u4f1a\u7ee7\u627f\u7684\u6240\u6709\u5176\u4ed6\u6210\u5458\u65f6\uff0c\u5b83\u5c31\u4f1a\u88ab\u5206\u89e3\u3002AddUnit\u3001GetTile\u3001GetUnits\u7b49\u7684\u65b9\u6cd5\u90fd\u91c7\u7528Board\u7c7b\u4e2d\u7684X\u548cY\u53c2\u6570\uff0c\u4f46ThreeDBoard\u4e5f\u9700\u8981Z\u53c2\u6570\u3002\n\u56e0\u6b64\uff0c\u60a8\u5fc5\u987b\u4f7f\u7528Z\u53c2\u6570\u518d\u6b21\u5b9e\u73b0\u8fd9\u4e9b\u65b9\u6cd5\u3002Z\u53c2\u6570\u6ca1\u6709Board\u7c7b\u7684\u4e0a\u4e0b\u6587\uff0c\u4eceBoard\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u5931\u53bb\u4e86\u610f\u4e49\u3002\u8bd5\u56fe\u4f7f\u7528ThreeDBoard\u7c7b\u4f5c\u4e3a\u5176\u57fa\u7c7bBoard\u7684\u4ee3\u7801\u5355\u5143\u5c06\u975e\u5e38\u4e0d\u8d70\u8fd0\u3002\n\u4e5f\u8bb8\u6211\u4eec\u5e94\u8be5\u627e\u53e6\u4e00\u4e2a\u65b9\u6cd5\u3002ThreeDBoard\u5e94\u8be5\u7531Board\u5bf9\u8c61\u7ec4\u6210\uff0c\u800c\u4e0d\u662f\u6269\u5c55Board\u3002\u6bcf\u4e2aZ\u8f74\u5355\u4f4d\u4e00\u4e2aBoard\u5bf9\u8c61\u3002\n\u8fd9\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u826f\u597d\u7684\u9762\u5411\u5bf9\u8c61\u539f\u5219\uff0c\u5982\u5c01\u88c5\u548c\u91cd\u7528\uff0c\u5e76\u4e14\u4e0d\u8fdd\u53cdLSP\u3002\n\u4ece@NotMySelf\uff1a&#34\uff1b\u91cd\u65b0\u5f15\u7528\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u793a\u4f8b\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u4eceboard\u7ee7\u627f\u5728ThreeDBoard\u7684\u4e0a\u4e0b\u6587\u4e2d\u6ca1\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u6240\u6709\u7684\u65b9\u6cd5\u7b7e\u540d\u5bf9\u4e8eZ\u8f74\u90fd\u662f\u6ca1\u6709\u610f\u4e49\u7684\u3002&#34\uff1b\u3002--\u5eb7\u6208\u5c14\u821e\u66f2\u3002\n\u90a3\u4e48\uff0c\u5982\u679c\u6211\u4eec\u5411Child\u7c7b\u6dfb\u52a0\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u4f46\u662f\u5728Child\u7c7b\u4e2dParent\u7684\u6240\u6709\u529f\u80fd\u4ecd\u7136\u6709\u610f\u4e49\uff0c\u8fd9\u4f1a\u7834\u574fLSP\u5417\uff1f\u4e00\u65b9\u9762\uff0c\u6211\u4eec\u7a0d\u5fae\u4fee\u6539\u4e86\u4f7f\u7528Child\u7684\u63a5\u53e3\uff0c\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6211\u4eec\u5c06Child\u5411\u4e0a\u5f3a\u5236\u8f6c\u6362\u4e3a\u7236\u7ea7\uff0c\u90a3\u4e48\u671f\u671b\u7236\u7ea7\u7684\u4ee3\u7801\u5c31\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u3002--\u5c3c\u514b\u00b7\u5b54\u5fb7\u62c9\u7279\u8036\u592b(Nickolay Kondratyev)\u3002\n\u8fd9\u662f\u4e00\u4e2a\u53cd\u5229\u65af\u79d1\u592b\u7684\u4f8b\u5b50\u3002\u5229\u65af\u79d1\u592b\u8ba9\u6211\u4eec\u4ece\u6b63\u65b9\u5f62\u63a8\u5bfc\u51fa\u77e9\u5f62\u3002More-Parameters-Class\u6765\u81eaLess-Parameters-Class\u3002\u4f60\u5df2\u7ecf\u5f88\u597d\u5730\u8bc1\u660e\u4e86\u8fd9\u662f\u4e0d\u597d\u7684\u3002\u8fd9\u771f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7b11\u8bdd\uff0c\u88ab\u6807\u8bb0\u4e3a\u4e00\u4e2a\u7b54\u6848\uff0c\u5e76\u5728\u5229\u65af\u79d1\u592b\u7684\u95ee\u9898\u4e0a\u88ab\u8bc4\u4e3a\u53cd\u5229\u65af\u79d1\u592b\u7684\u7b54\u6848200\u6b21\u3002\u5229\u65af\u79d1\u592b\u539f\u7406\u771f\u7684\u662f\u8c2c\u8bba\u5417\uff1f--\u5188\u52aa\u65af\u3002\n\u6211\u89c1\u8fc7\u7ee7\u627f\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\u3002\u57fa\u7c7b\u5e94\u8be5\u662f3DBoard\u548c\u6d3e\u751f\u7c7bBoard\u3002\u8463\u4e8b\u4f1a\u7684Z\u8f74\u4ecd\u7136\u662fMax(Z)=Min(Z)=1--Paulustrious\n\u53ef\u66ff\u6362\u6027\u662f\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u539f\u5219\uff0c\u5b83\u6307\u51fa\uff0c\u5728\u8ba1\u7b97\u673a\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679cS\u662fT\u7684\u5b50\u7c7b\u578b\uff0c\u5219\u53ef\u4ee5\u7528S\u7c7b\u578b\u7684\u5bf9\u8c61\u66ff\u6362T\u7c7b\u578b\u7684\u5bf9\u8c61\u3002\n\u9e35\u9e1f\u662f\u4e00\u79cd\u9e1f\uff0c\u4f46\u5b83\u4e0d\u4f1a\u98de\uff0c\u9e35\u9e1f\u7c7b\u662f\u9e1f\u7c7b\u7684\u4e00\u4e2a\u5b50\u7c7b\uff0c\u4f46\u5b83\u4e0d\u80fd\u4f7f\u7528Fly\u65b9\u6cd5\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u8fdd\u53cd\u4e86LSP\u539f\u5219\u3002\n\u516c\u5171\u7c7bBird{}\u516c\u5171\u7c7bFlyingBirds\u6269\u5c55Bird{public void Fly(){}}\u516c\u5171\u7c7bDuck\u6269\u5c55FlyingBirds{}\u516c\u5171\u7c7b\u9e35\u9e1f\u6269\u5c55Bird{}\u3002\n\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u4f46\u662f\u5982\u679c\u5ba2\u6237\u6709Bird bird\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f\u4f60\u5fc5\u987b\u5c06\u7269\u4f53\u6295\u63b7\u7ed9FlyingBirds\u624d\u80fd\u4f7f\u7528Fly\uff0c\u8fd9\u4e0d\u662f\u5f88\u597d\u5417\uff1f--\u7a46\u8fea\u3002\n\u4e0d\u662f\u7684\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6709Bird bird\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4e0d\u80fd\u4f7f\u7528Fly()\u3002\u5c31\u662f\u8fd9\u6837\u3002\u8d8a\u8fc7\u4e00\u53ea\u9e2d\u5b50\u5e76\u4e0d\u80fd\u6539\u53d8\u8fd9\u4e00\u4e8b\u5b9e\u3002\u5982\u679c\u5ba2\u6237\u7aef\u6709FlyingBirds\u9e1f\uff0c\u90a3\u4e48\u5373\u4f7f\u5b83\u88ab\u4f20\u9012\u7ed9\u4e00\u53ea\u9e2d\u5b50\uff0c\u5b83\u4e5f\u5e94\u8be5\u59cb\u7ec8\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5de5\u4f5c\u3002-\u53f2\u8482\u592b\u00b7\u67e5\u8fc8\u62c9\u5fb7(Steve Chamaillard)\u3002\n\u4f7f\u7528Interface&#39\uff1bflyable&#39\uff1b\u600e\u4e48\u6837(\u60f3\u4e0d\u51fa\u66f4\u597d\u7684\u540d\u5b57\u4e86)\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u628a\u81ea\u5df1\u6295\u5165\u5230\u8fd9\u4e2a\u50f5\u5316\u7684\u7b49\u7ea7\u5236\u5ea6\u4e2d\u3002\u9664\u975e\u6211\u4eec\u77e5\u9053\u771f\u7684\u9700\u8981\u5b83\u3002-\u7ea6\u7ff0\u00b7\u745f\u8fea(Thirdy)\u3002\nClass Rectangle{int getHeight()void setHeight(Int Value)int getWidth()void setWidth(Int Value)}class Square\uff1aRectangle{}\u3002\n\u73b0\u5728\u6211\u4eec\u9047\u5230\u4e86\u4e00\u4e2a\u95ee\u9898\uff0c\u5c3d\u7ba1\u63a5\u53e3\u5339\u914d\u3002\u539f\u56e0\u662f\u6211\u4eec\u8fdd\u53cd\u4e86\u6b63\u65b9\u5f62\u548c\u77e9\u5f62\u7684\u6570\u5b66\u5b9a\u4e49\u4e2d\u7684\u4e0d\u53d8\u91cf\u3002\u6309\u7167getter\u548csetter\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u77e9\u5f62\u5e94\u6ee1\u8db3\u4ee5\u4e0b\u4e0d\u53d8\u91cf\uff1a\n\u4f46\u662f\uff0cSquare\u7684\u6b63\u786e\u5b9e\u73b0\u5fc5\u987b\u8fdd\u53cd\u6b64\u4e0d\u53d8\u91cf\uff0c\u56e0\u6b64\u5b83\u4e0d\u662fRectangle\u7684\u6709\u6548\u66ff\u4ee3\u3002\n\u56e0\u6b64\uff0c\u4f7f\u7528OO&34\uff1b\u5bf9\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u5b9e\u9645\u5efa\u6a21\u7684\u4efb\u4f55\u4e1c\u897f\u8fdb\u884c\u5efa\u6a21\u90fd\u5f88\u56f0\u96be\u3002-DrPizza\u3002\n@DrPizza\uff1a\u5f53\u7136\u53ef\u4ee5\u3002\u7136\u800c\uff0c\u6709\u4e24\u4ef6\u4e8b\u3002\u9996\u5148\uff0c\u8fd9\u6837\u7684\u5173\u7cfb\u4ecd\u7136\u53ef\u4ee5\u5728OOP\u4e2d\u5efa\u6a21\uff0c\u5c3d\u7ba1\u4e0d\u5b8c\u5168\u6216\u4f7f\u7528\u66f4\u590d\u6742\u7684\u5f2f\u8def(\u9009\u62e9\u9002\u5408\u60a8\u95ee\u9898\u7684)\u3002\u5176\u6b21\uff0c\u6ca1\u6709\u66f4\u597d\u7684\u9009\u62e9\u3002\u5176\u4ed6\u6620\u5c04/\u5efa\u6a21\u4e5f\u6709\u76f8\u540c\u6216\u7c7b\u4f3c\u7684\u95ee\u9898\u3002\uff1b-)-\u5eb7\u62c9\u5fb7\u00b7\u9c81\u9053\u592b(Konrad Rudolph)\u3002\n@NickW\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b(\u4f46\u4e0d\u662f\u5728\u4e0a\u9762)\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u53cd\u8f6c\u7ee7\u627f\u94fe-\u4ece\u903b\u8f91\u4e0a\u8bb2\uff0c2D\u70b9\u662f-3D\u70b9\uff0c\u5176\u4e2d\u7b2c\u4e09\u7ef4\u88ab\u5ffd\u7565(\u62160-\u6240\u6709\u70b9\u4f4d\u4e8e3D\u7a7a\u95f4\u4e2d\u7684\u540c\u4e00\u5e73\u9762\u4e0a)\u3002\u4f46\u8fd9\u5f53\u7136\u4e0d\u5207\u5b9e\u9645\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u8fd9\u662f\u7ee7\u627f\u6ca1\u6709\u771f\u6b63\u5e2e\u52a9\u7684\u60c5\u51b5\u4e4b\u4e00\uff0c\u5e76\u4e14\u5b9e\u4f53\u4e4b\u95f4\u4e0d\u5b58\u5728\u81ea\u7136\u5173\u7cfb\u3002\u5206\u522b\u4e3a\u5b83\u4eec\u5efa\u6a21(\u81f3\u5c11\u6211\u4e0d\u77e5\u9053\u6709\u66f4\u597d\u7684\u65b9\u6cd5)\u3002--\u5eb7\u62c9\u5fb7\u00b7\u9c81\u9053\u592b(Konrad Rudolph)\u3002\nOOP\u7684\u76ee\u7684\u662f\u5efa\u6a21\u884c\u4e3a\uff0c\u800c\u4e0d\u662f\u6570\u636e\u3002\u60a8\u7684\u7c7b\u751a\u81f3\u5728\u8fdd\u53cdLSP\u4e4b\u524d\u5c31\u8fdd\u53cd\u4e86\u5c01\u88c5\u3002-Sklivvz\u3002\n@AustinWBryan Yep\uff1b\u6211\u5728\u8fd9\u4e2a\u9886\u57df\u5de5\u4f5c\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u6211\u5c31\u8d8a\u503e\u5411\u4e8e\u53ea\u5bf9\u63a5\u53e3\u548c\u62bd\u8c61\u57fa\u7c7b\u4f7f\u7528\u7ee7\u627f\uff0c\u800c\u5bf9\u5176\u4f59\u7c7b\u4f7f\u7528\u7ec4\u5408\u3002\u5b83\u6709\u65f6\u9700\u8981\u66f4\u591a\u7684\u5de5\u4f5c(\u6253\u5b57\u660e\u667a)\uff0c\u4f46\u662f\u5b83\u907f\u514d\u4e86\u4e00\u5927\u5806\u95ee\u9898\uff0c\u5e76\u4e14\u5f97\u5230\u4e86\u5176\u4ed6\u6709\u7ecf\u9a8c\u7684\u7a0b\u5e8f\u5458\u7684\u5e7f\u6cdb\u54cd\u5e94\u3002--\u5eb7\u62c9\u5fb7\u00b7\u9c81\u9053\u592b(Konrad Rudolph)\u3002\n\u7f57\u4f2f\u7279\u00b7\u9a6c\u4e01\u6709\u4e00\u7bc7\u5173\u4e8e\u5229\u65af\u79d1\u592b\u66ff\u4ee3\u539f\u7406\u7684\u4f18\u79c0\u8bba\u6587\u3002\u5b83\u8ba8\u8bba\u4e86\u53ef\u80fd\u8fdd\u53cd\u8be5\u539f\u5219\u7684\u5fae\u5999\u548c\u4e0d\u90a3\u4e48\u5fae\u5999\u7684\u65b9\u5f0f\u3002\n\u5bf9\u8fd9\u4e00\u539f\u5219\u6700\u660e\u663e\u7684\u8fdd\u53cd\u4e4b\u4e00\u662f\u4f7f\u7528C++\u8fd0\u884c\u65f6\u7c7b\u578b\u4fe1\u606f(RTTI)\u6839\u636e\u5bf9\u8c61\u7684\u7c7b\u578b\u9009\u62e9\u51fd\u6570\u3002\u5373\uff1a\nVoid DrawShape(\u5e38\u91cf\u5f62\u72b6){if(typeid(S)==typeid(\u6b63\u65b9\u5f62))DrawSquare(static_cast&lt\uff1bSquare&amp\uff1b&gt\uff1b(s))\uff1bElse if(typeid(S)==typeid(\u5706\u5f62))DrawCircle(static_cast&lt\uff1bCircle&amp\uff1b&gt\uff1b(s))\uff1b}\u3002\n\u663e\u7136\uff0cDrawShape\u51fd\u6570\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\u5b83\u5fc5\u987b\u77e5\u9053Shape\u7c7b\u7684\u6bcf\u4e2a\u53ef\u80fd\u7684\u6d3e\u751f\uff0c\u5e76\u4e14\u6bcf\u5f53\u521b\u5efaShape\u7684\u65b0\u6d3e\u751f\u65f6\u90fd\u5fc5\u987b\u66f4\u6539\u5b83\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8bb8\u591a\u4eba\u8ba4\u4e3a\u8fd9\u4e2a\u51fd\u6570\u7684\u7ed3\u6784\u662f\u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684\u8bc5\u5492\u3002\n\u7136\u800c\uff0c\u8fd8\u6709\u5176\u4ed6\u66f4\u5fae\u5999\u7684\u8fdd\u53cdLSP\u7684\u65b9\u5f0f\u3002\u8003\u8651\u4e00\u4e2a\u4f7f\u7528Rectangle\u7c7b\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982\u4e0b\u6240\u8ff0\uff1a\n\u7c7b\u77e9\u5f62{public\uff1avoid SetWidth(Double W){itsWidth=w\uff1b}void SetHeight(Double H){itsHeight=w\uff1b}Double GetHeight()const{return itsHeight\uff1b}Double GetWidth()const{return itsWidth\uff1b}Private\uff1aDouble itsWidth\uff1bDouble itsHeight\uff1b}\uff1b\n[.]\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u6709\u4e00\u5929\uff0c\u7528\u6237\u9664\u4e86\u9700\u8981\u64cd\u4f5c\u77e9\u5f62\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u64cd\u4f5c\u6b63\u65b9\u5f62\u7684\u80fd\u529b\u3002[.]\u3002\n\u663e\u7136\uff0c\u5bf9\u4e8e\u6240\u6709\u6b63\u5e38\u7684\u610f\u56fe\u548c\u76ee\u7684\u800c\u8a00\uff0c\u6b63\u65b9\u5f62\u90fd\u662f\u77e9\u5f62\u3002\u7531\u4e8eISA\u5173\u7cfb\u6210\u7acb\uff0c\u56e0\u6b64\u5c06Square\u7c7b\u5efa\u6a21\u4e3a\u4eceRectangle\u6d3e\u751f\u662f\u5408\u4e4e\u903b\u8f91\u7684\u3002[.]\u3002\nSquare\u5c06\u7ee7\u627fSetWidth\u548cSetHeight\u51fd\u6570\u3002\u8fd9\u4e9b\u51fd\u6570\u5bf9\u4e8e\u6b63\u65b9\u5f62\u6765\u8bf4\u662f\u5b8c\u5168\u4e0d\u5408\u9002\u7684\uff0c\u56e0\u4e3a\u6b63\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u662f\u76f8\u540c\u7684\u3002\u8fd9\u5e94\u8be5\u662f\u8bbe\u8ba1\u6709\u95ee\u9898\u7684\u91cd\u8981\u7ebf\u7d22\u3002\u7136\u800c\uff0c\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u56de\u907f\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u8986\u76d6SetWidth\u548cSetHeight[...]\u3002\n\u5982\u679c\u6211\u4eec\u5c06\u5bf9Square\u5bf9\u8c61\u7684\u5f15\u7528\u4f20\u9012\u7ed9\u6b64\u51fd\u6570\uff0c\u5219Square\u5bf9\u8c61\u5c06\u88ab\u635f\u574f\uff0c\u56e0\u4e3a\u9ad8\u5ea6\u4e0d\u4f1a\u6539\u53d8\u3002\u8fd9\u663e\u7136\u8fdd\u53cd\u4e86LSP\u3002\u8be5\u51fd\u6570\u4e0d\u9002\u7528\u4e8e\u5176\u53c2\u6570\u7684\u6d3e\u751f\u51fd\u6570\u3002\n\u592a\u665a\u4e86\uff0c\u4f46\u6211\u8ba4\u4e3a\u8fd9\u662f\u90a3\u7bc7\u8bba\u6587\u4e2d\u6709\u8da3\u7684\u4e00\u53e5\u8bdd\uff1a\u73b0\u5728\uff0c\u6b63\u5982\u8fc8\u8036\u6240\u8bf4\u7684\u90a3\u6837\uff0c\u884d\u751f\u54c1\u7684\u524d\u7f6e\u6761\u4ef6\u548c\u540e\u7f6e\u6761\u4ef6\u7684\u89c4\u5219\u662f\uff1a\u2026\u2026\u5f53\u91cd\u65b0\u5b9a\u4e49[\u5728\u884d\u751f\u54c1\u4e2d]\u7684\u4f8b\u7a0b\u65f6\uff0c\u4f60\u53ea\u80fd\u7528\u8f83\u5f31\u7684\u524d\u7f6e\u6761\u4ef6\u66ff\u6362\u5b83\u7684\u524d\u7f6e\u6761\u4ef6\uff0c\u7528\u66f4\u5f3a\u7684\u540e\u7f6e\u6761\u4ef6\u66ff\u6362\u5b83\u7684\u540e\u7f6e\u6761\u4ef6\u3002\u5982\u679c\u5b50\u7c7b\u524d\u63d0\u6761\u4ef6\u5f3a\u4e8e\u7236\u7c7b\u524d\u63d0\u6761\u4ef6\uff0c\u5219\u4e0d\u80fd\u5728\u4e0d\u8fdd\u53cd\u524d\u63d0\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u7528\u5b50\u7c7b\u4ee3\u66ff\u7236\u7c7b\u3002\u56e0\u6b64\uff0cLSP\u3002-\u5ba2\u6237\u7528\u62372023861\u3002\n\u5982\u679c\u67d0\u4e9b\u4ee3\u7801\u8ba4\u4e3a\u5b83\u6b63\u5728\u8c03\u7528\u7c7b\u578bT\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u8c03\u7528\u7c7b\u578bS\u7684\u65b9\u6cd5\uff0c\u5176\u4e2dS\u6269\u5c55\u4e86T(\u5373\uff0cS\u7ee7\u627f\u3001\u6d3e\u751f\u81ea\u8d85\u7c7b\u578bT\u6216\u662f\u8d85\u7c7b\u578bT\u7684\u5b50\u7c7b\u578b)\uff0c\u5219LSP\u662f\u5fc5\u9700\u7684\u3002\n\u4f8b\u5982\uff0c\u5728\u4f7f\u7528\u7c7b\u578bS\u7684\u53d8\u91cf\u503c\u8c03\u7528(\u5373\u8c03\u7528)\u5177\u6709\u7c7b\u578bT\u7684\u8f93\u5165\u53c2\u6570\u7684\u51fd\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u6216\u8005\u5728\u4e3a\u7c7b\u578bT\u7684\u6807\u8bc6\u7b26\u5206\u914d\u7c7b\u578bS\u7684\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002\nVal id\uff1at=new S()//id\u8ba4\u4e3a\u5b83\u662fT\uff0c\u4f46\u5b9e\u9645\u4e0a\u662fS\u3002\nLSP\u8981\u6c42T\u7c7b\u578b\u7684\u65b9\u6cd5(\u4f8b\u5982\u77e9\u5f62)\u7684\u671f\u671b(\u5373\u4e0d\u53d8\u91cf)\uff0c\u5f53\u8c03\u7528S\u7c7b\u578b\u7684\u65b9\u6cd5(\u4f8b\u5982Square)\u65f6\u4e0d\u4f1a\u8fdd\u53cd\u3002\nVAL RECT\uff1aRectangle=new Square(5)//\u8ba4\u4e3a\u5b83\u662f\u77e9\u5f62\uff0c\u4f46\u5b83\u662f\u6b63\u65b9\u5f62\u77e9\u5f622\uff1aRectangle=rect.setWidth(10)//\u9ad8\u5ea6\u4e3a10\uff0c\u8fdd\u53cdLSP\u3002\n\u5373\u4f7f\u662f\u5177\u6709\u4e0d\u53ef\u53d8\u5b57\u6bb5\u7684\u7c7b\u578b\u4e5f\u4ecd\u7136\u6709\u4e0d\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c\u4e0d\u53ef\u53d8\u7684\u77e9\u5f62\u8bbe\u7f6e\u5668\u5e0c\u671b\u7ef4\u5ea6\u88ab\u72ec\u7acb\u4fee\u6539\uff0c\u4f46\u4e0d\u53ef\u53d8\u7684Square\u8bbe\u7f6e\u5668\u8fdd\u53cd\u4e86\u8fd9\u4e00\u671f\u671b\u3002\nClass Rectangle(val width\uff1aint\uff0cval high\uff1aint){def setWidth(w\uff1aint)=new Rectangle(w\uff0cHeight)def setHeight(h\uff1aint)=new Rectangle(width\uff0ch)}class Square(val side\uff1aint)\u6269\u5c55Rectangle(side\uff0cside){override def setWidth(s\uff1aint)=new Square(s\uff1aint)=new Square}\nLSP\u8981\u6c42\u5b50\u7c7b\u578bS\u7684\u6bcf\u4e2a\u65b9\u6cd5\u5fc5\u987b\u5177\u6709\u9006\u53d8\u8f93\u5165\u53c2\u6570\u548c\u534f\u53d8\u8f93\u51fa\u3002\n\u9006\u53d8\u662f\u6307\u65b9\u5dee\u4e0e\u7ee7\u627f\u65b9\u5411\u76f8\u53cd\uff0c\u5373\u5b50\u7c7b\u578bS\u7684\u6bcf\u4e2a\u65b9\u6cd5\u7684\u6bcf\u4e2a\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578bSi\u5fc5\u987b\u4e0e\u8d85\u7c7b\u578bT\u7684\u76f8\u5e94\u65b9\u6cd5\u7684\u76f8\u5e94\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578bTi\u76f8\u540c\u6216\u4e3a\u8d85\u7c7b\u578bT\u7684\u76f8\u5e94\u8f93\u5165\u53c2\u6570\u7684\u7c7b\u578bTi\u7684\u8d85\u7c7b\u578b\u3002\n\u534f\u65b9\u5dee\u8868\u793a\u65b9\u5dee\u4e0e\u7ee7\u627f\u65b9\u5411\u76f8\u540c\uff0c\u5373\u5b50\u7c7b\u578bS\u7684\u6bcf\u4e2a\u65b9\u6cd5\u7684\u8f93\u51fa\u7684\u7c7b\u578bSo\u5fc5\u987b\u4e0e\u8d85\u7c7b\u578bT\u7684\u76f8\u5e94\u65b9\u6cd5\u7684\u76f8\u5e94\u8f93\u51fa\u7684\u7c7b\u578bTo\u76f8\u540c\u6216\u4e3a\u5176\u5b50\u7c7b\u578b\u3002\n\u8fd9\u662f\u56e0\u4e3a\u5982\u679c\u8c03\u7528\u65b9\u8ba4\u4e3a\u5b83\u6709\u4e00\u4e2a\u7c7b\u578bT\uff0c\u8ba4\u4e3a\u5b83\u6b63\u5728\u8c03\u7528\u4e00\u4e2aT\u7684\u65b9\u6cd5\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u63d0\u4f9b\u7c7b\u578bTi\u7684\u53c2\u6570\uff0c\u5e76\u5c06\u8f93\u51fa\u5206\u914d\u7ed9\u7c7b\u578bTo\u3002\u5f53\u5b83\u5b9e\u9645\u8c03\u7528S\u7684\u76f8\u5e94\u65b9\u6cd5\u65f6\uff0c\u5219\u5c06\u6bcf\u4e2aTi\u8f93\u5165\u53c2\u6570\u5206\u914d\u7ed9Si\u8f93\u5165\u53c2\u6570\uff0c\u5e76\u5c06SO\u8f93\u51fa\u5206\u914d\u7ed9TO\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5982\u679cSi\u4e0d\u662f\u9006\u53d8\u91cf\uff0c\u5219w.r.t.\u3002\u5bf9\u4e8eTi\uff0c\u5219\u53ef\u4ee5\u5c06\u4e0d\u662fSi\u7684\u5b50\u7c7b\u578b\u7684Xi\u4e9a\u578b\u5206\u914d\u7ed9Ti\u3002\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u5728\u7c7b\u578b\u591a\u6001\u53c2\u6570(\u5373\u6cdb\u578b)\u4e0a\u5177\u6709\u5b9a\u4e49\u4f4d\u7f6e\u65b9\u5dee\u6ce8\u91ca\u7684\u8bed\u8a00(\u4f8b\u5982Scala\u6216Ceylan)\uff0c\u7c7b\u578bT\u7684\u6bcf\u4e2a\u7c7b\u578b\u53c2\u6570\u7684\u65b9\u5dee\u6ce8\u91ca\u7684\u540c\u5411\u6216\u53cd\u5411\u5fc5\u987b\u5206\u522b\u4e0e\u5177\u6709\u8be5\u7c7b\u578b\u53c2\u6570\u7c7b\u578b\u7684\u6bcf\u4e2a\u8f93\u5165\u53c2\u6570\u6216\u8f93\u51fa(T\u7684\u6bcf\u4e2a\u65b9\u6cd5\u7684)\u65b9\u5411\u76f8\u53cd\u6216\u76f8\u540c\u3002\n\u6b64\u5916\uff0c\u5bf9\u4e8e\u5177\u6709\u51fd\u6570\u7c7b\u578b\u7684\u6bcf\u4e2a\u8f93\u5165\u53c2\u6570\u6216\u8f93\u51fa\uff0c\u6240\u9700\u7684\u65b9\u5dee\u65b9\u5411\u662f\u76f8\u53cd\u7684\u3002\u6b64\u89c4\u5219\u4ee5\u9012\u5f52\u65b9\u5f0f\u5e94\u7528\u3002\n\u5173\u4e8e\u5982\u4f55\u5efa\u6a21\u4e0d\u53d8\u91cf\uff0c\u4ee5\u4fbf\u7531\u7f16\u8bd1\u5668\u5f3a\u5236\u6267\u884c\uff0c\u6709\u5f88\u591a\u6b63\u5728\u8fdb\u884c\u7684\u7814\u7a76\u3002\nTypeState(\u53c2\u89c1\u7b2c3\u9875)\u58f0\u660e\u5e76\u5f3a\u5236\u6267\u884c\u4e0etype\u6b63\u4ea4\u7684\u72b6\u6001\u4e0d\u53d8\u91cf\u3002\u6216\u8005\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c06\u65ad\u8a00\u8f6c\u6362\u4e3a\u7c7b\u578b\u6765\u5f3a\u5236\u5b9e\u65bd\u4e0d\u53d8\u91cf\u3002\u4f8b\u5982\uff0c\u8981\u5728\u5173\u95ed\u6587\u4ef6\u4e4b\u524d\u65ad\u8a00\u8be5\u6587\u4ef6\u5df2\u6253\u5f00\uff0c\u5219File.open()\u53ef\u80fd\u4f1a\u8fd4\u56deOpenFile\u7c7b\u578b\uff0c\u5176\u4e2d\u5305\u542bFile\u4e2d\u4e0d\u53ef\u7528\u7684Close()\u65b9\u6cd5\u3002Tic-tac-toe API\u53ef\u4ee5\u662f\u5728\u7f16\u8bd1\u65f6\u4f7f\u7528\u7c7b\u578b\u5f3a\u5236\u4e0d\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u793a\u4f8b\u3002\u7c7b\u578b\u7cfb\u7edf\u751a\u81f3\u53ef\u4ee5\u662f\u56fe\u7075\u5b8c\u6574\u7684\uff0c\u4f8b\u5982Scala\u3002\u4f9d\u8d56\u7c7b\u578b\u8bed\u8a00\u548c\u5b9a\u7406\u8bc1\u660e\u5668\u5c06\u9ad8\u9636\u7c7b\u578b\u7684\u6a21\u578b\u5f62\u5f0f\u5316\u3002\n\u7531\u4e8e\u8bed\u4e49\u9700\u8981\u62bd\u8c61\u800c\u4e0d\u662f\u6269\u5c55\uff0c\u6211\u8ba4\u4e3a\u4f7f\u7528\u7c7b\u578b\u6765\u5efa\u6a21\u4e0d\u53d8\u91cf(\u5373\u7edf\u4e00\u7684\u9ad8\u9636\u8868\u793a\u8bed\u4e49)\u8981\u4f18\u4e8eTypeState\u3002\u201c\u6269\u5c55\u201d\u6307\u7684\u662f\u4e0d\u534f\u8c03\u7684\u3001\u6a21\u5757\u5316\u7684\u5f00\u53d1\u7684\u65e0\u754c\u7684\u3001\u6392\u5217\u7684\u7ec4\u5408\u3002\u56e0\u4e3a\u5728\u6211\u770b\u6765\uff0c\u6709\u4e24\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u6a21\u578b(\u4f8b\u5982\u7c7b\u578b\u548c\u7c7b\u578b\u72b6\u6001)\u6765\u8868\u8fbe\u5171\u4eab\u7684\u8bed\u4e49\uff0c\u8fd9\u4e24\u4e2a\u6a21\u578b\u5bf9\u4e8e\u53ef\u6269\u5c55\u7684\u7ec4\u5408\u4e0d\u80fd\u5f7c\u6b64\u7edf\u4e00\uff0c\u8fd9\u4f3c\u4e4e\u662f\u7edf\u4e00\u6027\u7684\u5bf9\u7acb\u9762\uff0c\u56e0\u6b64\u4e5f\u5c31\u662f\u81ea\u7531\u5ea6\u7684\u5bf9\u7acb\u9762\u3002\u4f8b\u5982\uff0c\u5728\u5b50\u7c7b\u578b\u5316\u3001\u51fd\u6570\u91cd\u8f7d\u548c\u53c2\u6570\u7c7b\u578b\u57df\u4e2d\u7edf\u4e00\u4e86\u8868\u8fbe\u5f0f\u7c7b\u95ee\u9898\u6269\u5c55\u3002\n\u6211\u7684\u7406\u8bba\u7acb\u573a\u662f\uff0c\u5bf9\u4e8e\u77e5\u8bc6\u7684\u5b58\u5728(\u53c2\u89c1\u201c\u96c6\u4e2d\u5316\u662f\u76f2\u76ee\u548c\u4e0d\u5408\u9002\u7684\u201d\u4e00\u8282)\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u6709\u4e00\u4e2a\u901a\u7528\u6a21\u578b\u53ef\u4ee5\u5f3a\u5236100%\u8986\u76d6\u56fe\u7075\u5b8c\u5168\u8ba1\u7b97\u673a\u8bed\u8a00\u4e2d\u6240\u6709\u53ef\u80fd\u7684\u4e0d\u53d8\u91cf\u3002\u5bf9\u4e8e\u77e5\u8bc6\u7684\u5b58\u5728\uff0c\u610f\u60f3\u4e0d\u5230\u7684\u53ef\u80fd\u6027\u975e\u5e38\u5b58\u5728\uff0c\u5373\u65e0\u5e8f\u548c\u71b5\u5fc5\u987b\u603b\u662f\u5728\u589e\u52a0\u3002\u8fd9\u662f\u71b5\u529b\u3002\u8981\u8bc1\u660e\u4e00\u4e2a\u6f5c\u5728\u6269\u5f20\u7684\u6240\u6709\u53ef\u80fd\u7684\u8ba1\u7b97\uff0c\u5c31\u662f\u5148\u9a8c\u5730\u8ba1\u7b97\u6240\u6709\u53ef\u80fd\u7684\u6269\u5f20\u3002\n\u8fd9\u5c31\u662f\u6682\u505c\u5b9a\u7406\u5b58\u5728\u7684\u539f\u56e0\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u56fe\u7075\u5b8c\u5168\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u7a0b\u5e8f\u662f\u5426\u90fd\u662f\u7ec8\u6b62\u7684\uff0c\u8fd9\u662f\u65e0\u6cd5\u5224\u65ad\u7684\u3002\u53ef\u4ee5\u8bc1\u660e\u67d0\u4e2a\u7279\u5b9a\u7684\u7a0b\u5e8f\u7ec8\u6b62\u4e86(\u6240\u6709\u7684\u53ef\u80fd\u6027\u90fd\u5df2\u7ecf\u5b9a\u4e49\u548c\u8ba1\u7b97)\u3002\u4f46\u662f\u4e0d\u53ef\u80fd\u8bc1\u660e\u8be5\u7a0b\u5e8f\u7684\u6240\u6709\u53ef\u80fd\u7684\u6269\u5c55\u90fd\u7ec8\u6b62\u4e86\uff0c\u9664\u975e\u8be5\u7a0b\u5e8f\u7684\u6269\u5c55\u7684\u53ef\u80fd\u6027\u4e0d\u662f\u56fe\u7075\u5b8c\u6210\u7684(\u4f8b\u5982\uff0c\u901a\u8fc7\u4f9d\u8d56\u952e\u5165)\u3002\u7531\u4e8e\u56fe\u7075\u5b8c\u5907\u6027\u7684\u57fa\u672c\u8981\u6c42\u662f\u65e0\u754c\u9012\u5f52\uff0c\u56e0\u6b64\u5f88\u5bb9\u6613\u7406\u89e3\u54e5\u5fb7\u5c14\u7684\u4e0d\u5b8c\u5907\u6027\u5b9a\u7406\u548c\u7f57\u7d20\u6096\u8bba\u662f\u5982\u4f55\u5e94\u7528\u4e8e\u6269\u5f20\u7684\u3002\n\u5bf9\u8fd9\u4e9b\u5b9a\u7406\u7684\u89e3\u91ca\u5c06\u5b83\u4eec\u5408\u5e76\u5230\u5bf9\u71b5\u529b\u7684\u5e7f\u4e49\u6982\u5ff5\u7406\u89e3\u4e2d\uff1a\n\u54e5\u5fb7\u5c14\u7684\u4e0d\u5b8c\u5168\u6027\u5b9a\u7406\uff1a\u4efb\u4f55\u53ef\u4ee5\u8bc1\u660e\u6240\u6709\u7b97\u672f\u771f\u7406\u7684\u5f62\u5f0f\u7406\u8bba\u90fd\u662f\u4e0d\u4e00\u81f4\u7684\u3002\n\u7f57\u7d20\u6096\u8bba\uff1a\u53ef\u4ee5\u5305\u542b\u4e00\u4e2a\u96c6\u5408\u7684\u96c6\u5408\u7684\u6bcf\u4e2a\u6210\u5458\u89c4\u5219\uff0c\u8981\u4e48\u679a\u4e3e\u6bcf\u4e2a\u6210\u5458\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u8981\u4e48\u5305\u542b\u5b83\u81ea\u5df1\u3002\u56e0\u6b64\uff0c\u96c6\u5408\u8981\u4e48\u4e0d\u80fd\u6269\u5c55\uff0c\u8981\u4e48\u662f\u65e0\u754c\u9012\u5f52\u3002\u4f8b\u5982\uff0c\u4e0d\u662f\u8336\u58f6\u7684\u6240\u6709\u4e1c\u897f\u7684\u96c6\u5408\u5305\u62ec\u5b83\u81ea\u5df1\uff0c\u5b83\u5305\u62ec\u5b83\u81ea\u5df1\uff0c\u5b83\u5305\u62ec\u5b83\u81ea\u5df1\uff0c\u7b49\u7b49\u2026\u3002\u3002\u56e0\u6b64\uff0c\u5982\u679c\u89c4\u5219(\u53ef\u80fd\u5305\u542b\u96c6\u5408\u5e76\u4e14)\u4e0d\u679a\u4e3e\u7279\u5b9a\u7c7b\u578b(\u5373\u5141\u8bb8\u6240\u6709\u672a\u6307\u5b9a\u7684\u7c7b\u578b)\u5e76\u4e14\u4e0d\u5141\u8bb8\u65e0\u754c\u6269\u5c55\uff0c\u5219\u8be5\u89c4\u5219\u662f\u4e0d\u4e00\u81f4\u7684\u3002\u8fd9\u662f\u4e00\u7ec4\u4e0d\u662f\u5176\u81ea\u8eab\u6210\u5458\u7684\u96c6\u5408\u3002\u8fd9\u79cd\u65e0\u6cd5\u5728\u6240\u6709\u53ef\u80fd\u7684\u6269\u5c55\u4e0a\u65e2\u4e00\u81f4\u53c8\u5b8c\u5168\u679a\u4e3e\u7684\u60c5\u51b5\uff0c\u5c31\u662f\u54e5\u5fb7\u5c14\u7684\u4e0d\u5b8c\u5168\u6027\u5b9a\u7406\u3002\n\u5229\u65af\u79d1\u592b\u7f6e\u6362\u539f\u7406\uff1a\u4e00\u822c\u6765\u8bf4\uff0c\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u4e3a\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u662f\u4e00\u4e2a\u4e0d\u53ef\u5224\u5b9a\u7684\u95ee\u9898\uff0c\u5373\u7ee7\u627f\u4e00\u822c\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\u3002\n\u6797\u65af\u57fa\u53c2\u7167\uff1a\u5f53\u67d0\u7269\u88ab\u63cf\u8ff0\u6216\u611f\u77e5\u65f6\uff0c\u5b83\u7684\u8ba1\u7b97\u662f\u4ec0\u4e48\u662f\u65e0\u6cd5\u51b3\u5b9a\u7684\uff0c\u5373\u611f\u77e5(\u73b0\u5b9e)\u6ca1\u6709\u7edd\u5bf9\u7684\u53c2\u7167\u70b9\u3002\n\u79d1\u65af\u5b9a\u7406\uff1a\u6ca1\u6709\u5916\u90e8\u53c2\u7167\u70b9\uff0c\u56e0\u6b64\u4efb\u4f55\u963b\u788d\u5916\u90e8\u65e0\u9650\u53ef\u80fd\u6027\u7684\u969c\u788d\u90fd\u5c06\u5931\u8d25\u3002\n\u70ed\u529b\u5b66\u7b2c\u4e8c\u5b9a\u5f8b\uff1a\u6574\u4e2a\u5b87\u5b99(\u5c01\u95ed\u7cfb\u7edf\uff0c\u5373\u4e07\u7269)\u8d8b\u5411\u4e8e\u6700\u5927\u65e0\u5e8f\uff0c\u5373\u6700\u5927\u72ec\u7acb\u53ef\u80fd\u6027\u3002\n@Shelyby\uff1a\u4f60\u6df7\u7684\u4e1c\u897f\u592a\u591a\u4e86\u3002\u4e8b\u60c5\u5e76\u4e0d\u50cf\u4f60\u6240\u8bf4\u7684\u90a3\u6837\u4ee4\u4eba\u56f0\u60d1\u3002\u4f60\u7684\u8bb8\u591a\u7406\u8bba\u65ad\u8a00\u90fd\u7ad9\u4e0d\u4f4f\u811a\uff0c\u6bd4\u5982\u5bf9\u4e8e\u77e5\u8bc6\u7684\u5b58\u5728\uff0c\u5f88\u591a\u610f\u60f3\u4e0d\u5230\u7684\u53ef\u80fd\u6027\u90fd\u5b58\u5728\uff0c.\u548c\u901a\u5e38\u6765\u8bf4\uff0c\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u662f\u4e00\u4e2a\u65e0\u6cd5\u51b3\u5b9a\u7684\u95ee\u9898\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u7ee7\u627f\u901a\u5e38\u662f\u65e0\u6cd5\u51b3\u5b9a\u7684\u3002\u4f60\u53ef\u4ee5\u4e3a\u8fd9\u4e9b\u89c2\u70b9\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5efa\u7acb\u4e00\u4e2a\u5355\u72ec\u7684\u535a\u5ba2\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u4f60\u7684\u65ad\u8a00\u548c\u5047\u8bbe\u662f\u975e\u5e38\u503c\u5f97\u6000\u7591\u7684\u3002\u4e00\u4e2a\u4eba\u4e0d\u80fd\u4f7f\u7528\u81ea\u5df1\u4e0d\u77e5\u9053\u7684\u4e1c\u897f\uff01--\u96c5\u514b\u519c\u3002\n@aknon\u6211\u6709\u4e00\u4e2a\u535a\u5ba2\uff0c\u66f4\u6df1\u5165\u5730\u89e3\u91ca\u4e86\u8fd9\u4e9b\u95ee\u9898\u3002\u6211\u7684\u65e0\u9650\u65f6\u7a7a\u6a21\u578b\u662f\u65e0\u9650\u9891\u7387\u3002\u9012\u5f52\u5f52\u7eb3\u51fd\u6570\u6709\u5df2\u77e5\u7684\u8d77\u59cb\u503c\u548c\u65e0\u7a77\u5927\u7684\u7ec8\u6b62\u754c\uff0c\u6216\u8005\u4f59\u5f52\u7eb3\u51fd\u6570\u6709\u672a\u77e5\u7684\u7ec8\u7ed3\u503c\u548c\u5df2\u77e5\u7684\u8d77\u59cb\u754c\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u5e76\u4e0d\u4ee4\u4eba\u56f0\u60d1\u3002\u4e00\u65e6\u5f15\u5165\u9012\u5f52\uff0c\u76f8\u5bf9\u6027\u5c31\u6210\u4e86\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u56fe\u7075\u5b8c\u6210\u7b49\u540c\u4e8e\u65e0\u754c\u9012\u5f52\u7684\u539f\u56e0\u3002-\u8c22\u5c14\u6bd4\u00b7\u6469\u5c14\u4e09\u4e16(Shelby Moore III)\u3002\n@ShelbyMooreIII\u4f60\u8d70\u7684\u65b9\u5411\u592a\u591a\u4e86\u3002\u8fd9\u4e0d\u662f\u4e00\u4e2a\u7b54\u6848\u3002-Soldalma\u3002\n@Soldalma\uff0c\u8fd9\u662f\u4e00\u4e2a\u7b54\u6848\u3002\u4e0d\u8981\u5728\u7b54\u9898\u90e8\u5206\u770b\u5230\u5b83\u3002\u54df\u3002\n.", "note_en": "I have heard that the Liskov Substitution Principle (LSP) is a fundamental principle of object oriented design. What is it and what are some examples of its use?\n    A great example illustrating LSP (given by Uncle Bob in a podcast I heard recently) was how sometimes something that sounds right in natural language doesn&#39;t quite work in code.\n In mathematics, a  Square is a  Rectangle. Indeed it is a specialization of a rectangle. The &#34;is a&#34; makes you want to model this with inheritance. However if in code you made  Square derive from  Rectangle, then a  Square should be usable anywhere you expect a  Rectangle. This makes for some strange behavior.\n Imagine you had  SetWidth and  SetHeight methods on your  Rectangle base class; this seems perfectly logical. However if your  Rectangle reference pointed to a  Square, then  SetWidth and  SetHeight doesn&#39;t make sense because setting one would change the other to match it. In this case  Square fails the Liskov Substitution Test with  Rectangle and the abstraction of having  Square inherit from  Rectangle is a bad one.\n  @m-sharp What if it&#39;s an immutable Rectangle such that instead of SetWidth and SetHeight, we have the methods GetWidth and GetHeight instead?\r \r\u2013\u00a0 Pacerier\n  Moral of the story: model your classes based on behaviours not on properties; model your data based on properties and not on behaviours. If it behaves like a duck, it&#39;s certainly a bird.\r \r\u2013\u00a0 Sklivvz\n  Well, a square clearly IS a type of rectangle in the real world. Whether we can model this in our code depends on the spec. What the LSP indicates is that subtype behavior should match base type behavior as defined in the base type specification. If the rectangle base type spec says that height and width can be set independently, then LSP says that square cannot be a subtype of rectangle. If the rectangle spec says that a rectangle is immutable, then a square can be a subtype of rectangle. It&#39;s all about subtypes maintaining the behavior specified for the base type.\r \r\u2013\u00a0 SteveT\n  @Pacerier there is no issue if it&#39;s immutable. The real issue here is that we are not modeling rectangles, but rather &#34;reshapable rectangles,&#34; i.e., rectangles whose width or height can be modified after creation (and we still consider it to be the same object). If we look at the rectangle class in this way, it is clear that a square is not a &#34;reshapable rectangle&#34;, because a square cannot be reshaped and still be a square (in general). Mathematically, we don&#39;t see the problem because mutability doesn&#39;t even make sense in a mathematical context.\r \r\u2013\u00a0 asmeurer\n  I have one question about the principle. Why would be the problem if  Square.setWidth(int width) was implemented like this:  this.width = width; this.height = width;? In this case it is guaranteed that the width equals the height.\r \r\u2013\u00a0 MC Emperor\n      The Liskov Substitution Principle (LSP,  ) is a concept in Object Oriented Programming that states:\n Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.\n At its heart LSP is about interfaces and contracts as well as how to decide when to extend a class vs. use another strategy such as composition to achieve your goal.\n The most effective way I have seen to illustrate this point was in  Head First OOA&amp;D. They present a scenario where you are a developer on a project to build a framework for strategy games.\n   All of the methods take X and Y coordinates as parameters to locate the tile position in the two-dimensional array of  Tiles. This will allow a game developer to manage units in the board during the course of the game.\n The book goes on to change the requirements to say that the game frame work must also support 3D game boards to accommodate games that have flight. So a  ThreeDBoard class is introduced that extends  Board.\n At first glance this seems like a good decision.  Board provides both the  Height and  Width properties and  ThreeDBoard provides the Z axis.\n Where it breaks down is when you look at all the other members inherited from  Board. The methods for  AddUnit,  GetTile,  GetUnits and so on, all take both X and Y parameters in the  Board class but the  ThreeDBoard needs a Z parameter as well.\n So you must implement those methods again with a Z parameter. The Z parameter has no context to the  Board class and the inherited methods from the  Board class lose their meaning. A unit of code attempting to use the  ThreeDBoard class as its base class  Board would be very out of luck.\n Maybe we should find another approach. Instead of extending  Board,  ThreeDBoard should be composed of  Board objects. One  Board object per unit of the Z axis.\n This allows us to use good object oriented principles like encapsulation and reuse and doesn\u2019t violate LSP.\n  Requote from @NotMySelf: &#34;I think the example is simply to demonstrate that inheriting from board does not make sense with in the context of ThreeDBoard and all of the method signatures are meaningless with a Z axis.&#34;.\r \r\u2013\u00a0 Contango\n  So if we add another method to a Child class but all the functionality of Parent still makes sense in the Child class would it be breaking LSP? Since on one hand we modified the interface for using the Child a bit on the other hand if we up cast the Child to be a Parent the code that expects a Parent would work fine.\r \r\u2013\u00a0 Nickolay Kondratyev\n  This is an anti-Liskov example. Liskov makes us to derive Rectangle from the Square. More-parameters-class from less-parameters-class. And you have nicely shown that it is bad. It is really a good joke to have marked as an answer and to have been upvoted 200 times an anti-liskov answer for liskov question. Is Liskov principle a fallacy really?\r \r\u2013\u00a0 Gangnus\n  I&#39;ve seen inheritance work the wrong way. Here is an example. The base class should be 3DBoard and the derived class Board. The Board still has a Z axis of Max(Z) = Min(Z) = 1\r \r\u2013\u00a0 Paulustrious\n    Substitutability is a principle in object-oriented programming stating that, in a computer program, if S is a subtype of T, then objects of type T may be replaced with objects of type S\n      Ostrich is a bird, But it can&#39;t fly, Ostrich class is a subtype of class Bird, But it can&#39;t use the fly method, that means that we are breaking LSP principle.\n  public class Bird{}public class FlyingBirds extends Bird{ public void fly(){}}public class Duck extends FlyingBirds{}public class Ostrich extends Bird{}\n  Nice example, but what would you do if the client has  Bird bird. You have to cast the object to FlyingBirds to make use of fly, which isn&#39;t nice right?\r \r\u2013\u00a0 Moody\n  No. If the client has  Bird bird, that means it cannot use  fly(). That&#39;s it. Passing a  Duck does not change this fact. If the client has  FlyingBirds bird, then even if it gets passed a  Duck it should always work the same way.\r \r\u2013\u00a0 Steve Chamaillard\n      How about using Interface &#39;Flyable&#39; (can&#39;t think of a better name). This way we don&#39;t commit ourselves into this rigid hierarchy.. Unless we know really need it.\r \r\u2013\u00a0 Thirdy\n      class Rectangle { int getHeight() void setHeight(int value) int getWidth() void setWidth(int value)}class Square : Rectangle { }\n Now we have a problem although the interface matches. The reason is that we have violated invariants stemming from the mathematical definition of squares and rectangles. The way getters and setters work, a  Rectangle should satisfy the following invariant:\n  However, this invariant  must be violated by a correct implementation of  Square, therefore it is not a valid substitute of  Rectangle.\n  And hence the difficulty of using &#34;OO&#34; to model anything we might want to actually model.\r \r\u2013\u00a0 DrPizza\n  @DrPizza: Absolutely. However, two things. Firstly, such relationships can  still be modelled in OOP, albeit incompletely or using more complex detours (pick whichever suits your problem). Secondly, there\u2019s no better alternative. Other mappings/modellings have the same or similar problems. ;-)\r \r\u2013\u00a0 Konrad Rudolph\n  @NickW In some cases (but not in the above) you can simply invert the inheritance chain \u2013 logically speaking, a 2D point is-a 3D point, where the third dimension is disregarded (or 0 \u2013 all points lie on the same plane in 3D space). But this is of course not really practical. In general, this is one of the cases where inheritance doesn\u2019t really help, and no natural relationship exists between the entities. Model them separately (at least I don\u2019t know of a better way).\r \r\u2013\u00a0 Konrad Rudolph\n  OOP is meant to model behaviours and not data. Your classes violate encapsulation even before violating LSP.\r \r\u2013\u00a0 Sklivvz\n  @AustinWBryan Yep; the longer I\u2019ve been working in this field, the more I tend to use inheritance for interfaces and abstract base classes only, and composition for the rest. It\u2019s sometimes a bit more work (typing wise) but it avoids a whole bunch of problems, and is widely echoed advice by other experienced programmers.\r \r\u2013\u00a0 Konrad Rudolph\n    Robert Martin has an excellent  paper on the Liskov Substitution Principle. It discusses subtle and not-so-subtle ways in which the principle may be violated.\n  One of the most glaring violations of this principle is the use of C++ Run-Time Type Information (RTTI) to select a function based upon the type of an object. i.e.:\n  void DrawShape(const Shape&amp; s){ if (typeid(s) == typeid(Square)) DrawSquare(static_cast&lt;Square&amp;&gt;(s)); else if (typeid(s) == typeid(Circle)) DrawCircle(static_cast&lt;Circle&amp;&gt;(s));}\n  Clearly the  DrawShape function is badly formed. It must know about every possible derivative of the  Shape class, and it must be changed whenever new derivatives of  Shape are created. Indeed, many view the structure of this function as anathema to Object Oriented Design.\n    However, there are other, far more subtle, ways of violating the LSP. Consider an application which uses the  Rectangle class as described below:\n  class Rectangle{ public: void SetWidth(double w) {itsWidth=w;} void SetHeight(double h) {itsHeight=w;} double GetHeight() const {return itsHeight;} double GetWidth() const {return itsWidth;} private: double itsWidth; double itsHeight;};\n  [...] Imagine that one day the users demand the ability to manipulate squares in addition to rectangles. [...]\n  Clearly, a square is a rectangle for all normal intents and purposes. Since the ISA relationship holds, it is logical to model the  Square class as being derived from  Rectangle. [...]\n  Square will inherit the  SetWidth and  SetHeight functions. These functions are utterly inappropriate for a  Square, since the width and height of a square are identical. This should be a significant clue that there is a problem with the design. However, there is a way to sidestep the problem. We could override  SetWidth and  SetHeight [...]\n      If we pass a reference to a  Square object into this function, the  Square object will be corrupted because the height won\u2019t be changed. This is a clear violation of LSP. The function does not work for derivatives of its arguments.\n  Way late, but I thought this was an interesting quote in that paper:  Now the rule for the preconditions and postconditions for derivatives, as stated by Meyer is: ...when redefining a routine [in a derivative], you may only replace its precondition by a weaker one, and its postcondition by a stronger one. If a child-class pre-condition is stronger than a parent class pre-condition, you couldn&#39;t substitute a child for a parent without violating the pre-condition. Hence LSP.\r \r\u2013\u00a0 user2023861\n    LSP is necessary where some code thinks it is calling the methods of a type  T, and may unknowingly call the methods of a type  S, where  S extends T (i.e.  S inherits, derives from, or is a subtype of, the supertype  T).\n For example, this occurs where a function with an input parameter of type  T, is called (i.e. invoked) with an argument value of type  S. Or, where an identifier of type  T, is assigned a value of type  S.\n val id : T = new S() // id thinks it&#39;s a T, but is a S\n LSP requires the expectations (i.e. invariants) for methods of type  T (e.g.  Rectangle), not be violated when the methods of type  S (e.g.  Square) are called instead.\n val rect : Rectangle = new Square(5) // thinks it&#39;s a Rectangle, but is a Squareval rect2 : Rectangle = rect.setWidth(10) // height is 10, LSP violation\n Even a type with  immutable fields still has invariants, e.g. the  immutable Rectangle setters expect dimensions to be independently modified, but the  immutable Square setters violate this expectation.\n class Rectangle( val width : Int, val height : Int ){ def setWidth( w : Int ) = new Rectangle(w, height) def setHeight( h : Int ) = new Rectangle(width, h)}class Square( val side : Int ) extends Rectangle(side, side){ override def setWidth( s : Int ) = new Square(s) override def setHeight( s : Int ) = new Square(s)}\n LSP requires that each method of the subtype  S must have contravariant input parameter(s) and a covariant output.\n Contravariant means the variance is contrary to the direction of the inheritance, i.e. the type  Si, of each input parameter of each method of the subtype  S, must be the same or a  supertype of the type  Ti of the corresponding input parameter of the corresponding method of the supertype  T.\n Covariance means the variance is in the same direction of the inheritance, i.e. the type  So, of the output of each method of the subtype  S, must be the same or a  subtype of the type  To of the corresponding output of the corresponding method of the supertype  T.\n This is because if the caller thinks it has a type  T, thinks it is calling a method of  T, then it supplies argument(s) of type  Ti and assigns the output to the type  To. When it is actually calling the corresponding method of  S, then each  Ti input argument is assigned to a  Si input parameter, and the  So output is assigned to the type  To. Thus if  Si were not contravariant w.r.t. to  Ti, then a subtype  Xi\u2014which would not be a subtype of  Si\u2014could be assigned to  Ti.\n Additionally, for languages (e.g. Scala or Ceylon) which have definition-site variance annotations on type polymorphism parameters (i.e. generics), the co- or contra- direction of the variance annotation for each type parameter of the type  T must be  opposite or same direction respectively to every input parameter or output (of every method of  T) that has the type of the type parameter.\n Additionally, for each input parameter or output that has a function type, the variance direction required is reversed. This rule is applied recursively.\n   There is much ongoing research on how to model invariants, so that they are enforced by the compiler.\n Typestate (see page 3) declares and enforces state invariants orthogonal to type. Alternatively, invariants can be enforced by  converting assertions to types. For example, to assert that a file is open before closing it, then File.open() could return an OpenFile type, which contains a close() method that is not available in File. A  tic-tac-toe API can be another example of employing typing to enforce invariants at compile-time. The type system may even be Turing-complete, e.g.  Scala. Dependently-typed languages and theorem provers formalize the models of higher-order typing.\n Because of the need for semantics to  abstract over extension, I expect that employing typing to model invariants, i.e. unified higher-order denotational semantics, is superior to the Typestate. \u2018Extension\u2019 means the unbounded, permuted composition of uncoordinated, modular development. Because it seems to me to be the antithesis of unification and thus degrees-of-freedom, to have two mutually-dependent models (e.g. types and Typestate) for expressing the shared semantics, which can&#39;t be unified with each other for extensible composition. For example,  Expression Problem-like extension was unified in the subtyping, function overloading, and parametric typing domains.\n My theoretical position is that for  knowledge to exist (see section \u201cCentralization is blind and unfit\u201d), there will  never be a general model that can enforce 100% coverage of all possible invariants in a Turing-complete computer language. For knowledge to exist, unexpected possibilities much exist, i.e. disorder and entropy must always be increasing. This is the entropic force. To prove all possible computations of a potential extension, is to compute a priori all possible extension.\n This is why the Halting Theorem exists, i.e. it is undecidable whether every possible program in a Turing-complete programming language terminates. It can be proven that some specific program terminates (one which all possibilities have been defined and computed). But it is impossible to prove that all possible extension of that program terminates, unless the possibilities for extension of that program is not Turing complete (e.g. via dependent-typing). Since the fundamental requirement for Turing-completeness is  unbounded recursion, it is intuitive to understand how G\u00f6del&#39;s incompleteness theorems and Russell&#39;s paradox apply to extension.\n An interpretation of these theorems incorporates them in a generalized conceptual understanding of the entropic force:\n G\u00f6del&#39;s incompleteness theorems: any formal theory, in which all arithmetic truths can be proved, is inconsistent.\n Russell&#39;s paradox: every membership rule for a set that can contain a set, either enumerates the specific type of each member or contains itself. Thus sets either cannot be extended or they are unbounded recursion. For example, the set of everything that is not a teapot, includes itself, which includes itself, which includes itself, etc\u2026. Thus a rule is inconsistent if it (may contain a set and) does not enumerate the specific types (i.e. allows all unspecified types) and does not allow unbounded extension. This is the set of sets that are not members of themselves. This inability to be both consistent and completely enumerated over all possible extension, is G\u00f6del&#39;s incompleteness theorems.\n Liskov Substition Principle: generally it is an undecidable problem whether any set is the subset of another, i.e. inheritance is generally undecidable.\n Linsky Referencing: it is undecidable what the computation of something is, when it is described or perceived, i.e. perception (reality) has no absolute point of reference.\n Coase&#39;s theorem: there is no external reference point, thus any barrier to unbounded external possibilities will fail.\n Second law of thermodynamics: the entire universe (a closed system, i.e. everything) trends to maximum disorder, i.e. maximum independent possibilities.\n  @Shelyby: You have mixed too many things. Things are not as confusing as you state them. Much of your theoretical assertions stand on flimsy grounds, like &#39;For knowledge to exist, unexpected possibilities much exist, .........&#39; AND &#39;generally it is an undecidable problem whether any set is the subset of another, i.e. inheritance is generally undecidable&#39; . You can start up a separate blog for each of these points. Anyways, your assertions and assumptions are highly questionable. One must not use things which one is not aware of!\r \r\u2013\u00a0 aknon\n  @aknon I  have a blog that explains these matters in more depth. My TOE model of infinite spacetime is unbounded frequencies. It is not confusing to me that a recursive inductive function has a known start value with an infinite end bound, or a coinductive function has an unknown end value and a known start bound. Relativity is the problem once recursion is introduced. This is why  Turing complete is equivalent to unbounded recursion.\r \r\u2013\u00a0 Shelby Moore III\n  @ShelbyMooreIII You are going in too many directions. This is not an answer.\r \r\u2013\u00a0 Soldalma\n  @Soldalma it is an answer. Don&#39;t you see it in the Answer section. Yo\n......", "posttime": "2020-08-05 18:24:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65af\u79d1\u592b,substitution,\u7c7b\u578b", "title": "\u5229\u65af\u79d1\u592b\u66ff\u4ee3\u539f\u7406\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u4ec0\u4e48\uff1f", "title_en": "What is an example of the Liskov Substitution Principle?", "transed": 1, "url": "https://stackoverflow.com/questions/56860/what-is-an-example-of-the-liskov-substitution-principle", "via": "", "real_tags": ["\u65af\u79d1\u592b", "\u7c7b\u578b"]}, {"category": "", "categoryclass": "", "imagename": "928a6c33d0c13695b7e6dd464cffa403.png", "infoid": 1016367, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u540d\u9ed1\u5ba2\u4eca\u5929\u516c\u5e03\u4e86\u4e00\u4efd\u660e\u6587\u7528\u6237\u540d\u548c\u5bc6\u7801\u5217\u8868\uff0c\u4ee5\u53ca900\u591a\u53f0Pulse Secure VPN\u4f01\u4e1a\u670d\u52a1\u5668\u7684IP\u5730\u5740\u3002\nZDNet\u5728\u5a01\u80c1\u60c5\u62a5\u516c\u53f8Kela\u7684\u5e2e\u52a9\u4e0b\u83b7\u5f97\u4e86\u8fd9\u4efd\u540d\u5355\u7684\u526f\u672c\uff0c\u5e76\u5411\u7f51\u7edc\u5b89\u5168\u793e\u533a\u7684\u591a\u4e2a\u6765\u6e90\u6838\u5b9e\u4e86\u5176\u771f\u5b9e\u6027\u3002\n\u4e13\u95e8\u7814\u7a76\u91d1\u878d\u72af\u7f6a\u7684\u5a01\u80c1\u60c5\u62a5\u5206\u6790\u5e08Bank Security\u4eca\u5929\u65e9\u4e9b\u65f6\u5019\u53d1\u73b0\u4e86\u8fd9\u4efd\u540d\u5355\uff0c\u5e76\u4e0eZDNet\u5206\u4eab\u4e86\u8fd9\u4efd\u540d\u5355\uff0c\u4ed6\u5bf9\u540d\u5355\u53ca\u5176\u5185\u5bb9\u8fdb\u884c\u4e86\u6709\u8da3\u7684\u89c2\u5bdf\u3002\n\u8fd9\u4f4d\u5b89\u5168\u7814\u7a76\u4eba\u5458\u6307\u51fa\uff0c\u5217\u8868\u4e2d\u5305\u62ec\u7684\u6240\u6709Pulse secure VPN\u670d\u52a1\u5668\u90fd\u5728\u8fd0\u884c\u6613\u53d7CVE2019-11510\u6f0f\u6d1e\u653b\u51fb\u7684\u56fa\u4ef6\u7248\u672c\u3002\n\u94f6\u884c\u5b89\u5168\u90e8\u95e8\u8ba4\u4e3a\uff0c\u7f16\u5236\u6b64\u5217\u8868\u7684\u9ed1\u5ba2\u626b\u63cf\u4e86\u6574\u4e2aInternetIPv4\u5730\u5740\u7a7a\u95f4\u4ee5\u83b7\u53d6Pulse Secure VPN\u670d\u52a1\u5668\uff0c\u5229\u7528CVE2019-11510\u6f0f\u6d1e\u83b7\u5f97\u7cfb\u7edf\u8bbf\u95ee\u6743\u9650\uff0c\u8f6c\u50a8\u670d\u52a1\u5668\u8be6\u7ec6\u4fe1\u606f(\u5305\u62ec\u7528\u6237\u540d\u548c\u5bc6\u7801)\uff0c\u7136\u540e\u5c06\u6240\u6709\u4fe1\u606f\u6536\u96c6\u5230\u4e00\u4e2a\u4e2d\u592e\u5b58\u50a8\u5e93\u4e2d\u3002\n\u6839\u636e\u5217\u8868(\u6587\u4ef6\u5939\u96c6\u5408)\u4e2d\u7684\u65f6\u95f4\u6233\uff0c\u626b\u63cf\u7684\u65e5\u671f\u6216\u5217\u8868\u7684\u7f16\u5236\u65e5\u671f\u4f3c\u4e4e\u57282020\u5e746\u670824\u65e5\u81f37\u67088\u65e5\u4e4b\u95f4\u3002\nZDnet\u8fd8\u8054\u7cfb\u4e86Bad Packets\uff0c\u8fd9\u662f\u4e00\u5bb6\u603b\u90e8\u4f4d\u4e8e\u7f8e\u56fd\u7684\u5a01\u80c1\u60c5\u62a5\u516c\u53f8\uff0c\u81ea2019\u5e748\u6708CVE-2019\u5e74-11510\u6f0f\u6d1e\u516c\u5f00\u4ee5\u6765\uff0c\u8be5\u516c\u53f8\u4e00\u76f4\u5728\u4e92\u8054\u7f51\u4e0a\u626b\u63cf\u6613\u53d7\u653b\u51fb\u7684Pulse Secure VPN\u670d\u52a1\u5668\u3002\n\u574f\u6570\u636e\u5305\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u7814\u7a76\u5b98\u4eca\u5929\u544a\u8bc9ZDnet\uff0c\u53bb\u5e74\u6f0f\u6d1e\u516c\u5f00\u65f6\uff0c\u5728\u8be5\u8f6c\u50a8\u4e2d\u53d1\u73b0\u7684913\u4e2a\u72ec\u7279\u7684IP\u5730\u5740\u4e2d\uff0c\u6709677\u4e2a\u901a\u8fc7\u6076\u610f\u6570\u636e\u5305CTI\u626b\u63cf\u53d1\u73b0\u5bb9\u6613\u53d7\u5230CVE-2019-11510\u7684\u653b\u51fb\u3002\n\u4ece\u540d\u5355\u4e0a\u770b\uff0c\u8fd9677\u5bb6\u516c\u53f8\u4f3c\u4e4e\u6ca1\u6709\u6253\u8fc7\u8865\u4e01\uff0c\u56e0\u4e3a\u201c\u574f\u6570\u636e\u5305\u201d\u53bb\u5e74\u7b2c\u4e00\u6b21\u626b\u63cf\uff0c\u4ee5\u53ca\u9ed1\u5ba2\u57282020\u5e746\u6708\u8fdb\u884c\u7684\u626b\u63cf\u4e4b\u540e\uff0c\u8fd9677\u5bb6\u516c\u53f8\u5c31\u6ca1\u6709\u6253\u8fc7\u8865\u4e01\u3002\n\u5373\u4f7f\u8fd9\u4e9b\u516c\u53f8\u4fee\u8865\u4e86\u4ed6\u4eec\u7684Pulse Secure\u670d\u52a1\u5668\uff0c\u4ed6\u4eec\u4e5f\u9700\u8981\u66f4\u6539\u5bc6\u7801\uff0c\u4ee5\u907f\u514d\u9ed1\u5ba2\u6ee5\u7528\u6cc4\u9732\u7684\u51ed\u636e\u63a5\u7ba1\u8bbe\u5907\uff0c\u7136\u540e\u4f20\u64ad\u5230\u4ed6\u4eec\u7684\u5185\u90e8\u7f51\u7edc\u3002\n\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3aPulse Secure VPN\u670d\u52a1\u5668\u901a\u5e38\u88ab\u7528\u4f5c\u8fdb\u5165\u516c\u53f8\u7f51\u7edc\u7684\u8bbf\u95ee\u7f51\u5173\uff0c\u8fd9\u6837\u5458\u5de5\u5c31\u53ef\u4ee5\u901a\u8fc7\u4e92\u8054\u7f51\u8fdc\u7a0b\u8fde\u63a5\u5230\u5185\u90e8\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u679c\u8fd9\u4e9b\u7c7b\u578b\u7684\u8bbe\u5907\u88ab\u653b\u7834\uff0c\u9ed1\u5ba2\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u8fdb\u5165\u516c\u53f8\u7684\u6574\u4e2a\u5185\u90e8\u7f51\u7edc--\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48APTS\u548c\u52d2\u7d22\u8f6f\u4ef6\u56e2\u4f19\u8fc7\u53bb\u4f1a\u628a\u8fd9\u4e9b\u7cfb\u7edf\u4f5c\u4e3a\u653b\u51fb\u76ee\u6807\u7684\u539f\u56e0\u3002\n\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u4efd\u540d\u5355\u5df2\u7ecf\u5728\u4e00\u4e2a\u9ed1\u5ba2\u8bba\u575b\u4e0a\u5206\u4eab\uff0c\u8be5\u8bba\u575b\u7ecf\u5e38\u88ab\u591a\u4e2a\u52d2\u7d22\u8f6f\u4ef6\u56e2\u4f19\u8bbf\u95ee\u3002\u4f8b\u5982\uff0cRevil(Sodinokibi)\u3001NetWalker\u3001Lockbit\u3001Avaddon\u3001Makop\u548c\u9a71\u9b54\u4eba\u52d2\u7d22\u8f6f\u4ef6\u56e2\u4f19\u5728\u540c\u4e00\u8bba\u575b\u4e0a\u6709\u5e16\u5b50\uff0c\u5e76\u5229\u7528\u5b83\u62db\u52df\u6210\u5458(\u5f00\u53d1\u4eba\u5458)\u548c\u9644\u5c5e\u673a\u6784(\u5ba2\u6237)\u3002\n\u5176\u4e2d\u8bb8\u591a\u56e2\u4f19\u5229\u7528Pulse Secure VPN\u670d\u52a1\u5668\u7b49\u7f51\u7edc\u8fb9\u7f18\u8bbe\u5907\u5165\u4fb5\u516c\u53f8\u7f51\u7edc\uff0c\u7136\u540e\u90e8\u7f72\u52d2\u7d22\u8f6f\u4ef6\u8d1f\u8f7d\u5e76\u7d22\u8981\u5de8\u989d\u8d4e\u91d1\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u5728\u8fc7\u53bb\u4e00\u5e74\u4e2d\u672a\u80fd\u4fee\u8865Pulse Secure VPN\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u5c06\u6b64\u5217\u8868\u4f5c\u4e3a\u514d\u8d39\u4e0b\u8f7d\u53d1\u5e03\u662f\u5b57\u9762\u4e0a\u7684DEFCON 1\u5371\u9669\u7ea7\u522b\uff0c\u56e0\u4e3a\u6b64\u8bba\u575b\u4e0a\u6d3b\u8dc3\u7684\u4e00\u4e9b\u52d2\u7d22\u8f6f\u4ef6\u56e2\u4f19\u5f88\u53ef\u80fd\u4f1a\u5c06\u6b64\u5217\u8868\u7528\u4e8e\u672a\u6765\u7684\u653b\u51fb\u3002\n\u6b63\u5982\u94f6\u884c\u5b89\u5168\u90e8\u95e8\u544a\u8bc9ZDNet\u7684\u90a3\u6837\uff0c\u516c\u53f8\u5fc5\u987b\u7d27\u6025\u4fee\u8865\u4ed6\u4eec\u7684Pulse Secure VPN\u5e76\u66f4\u6539\u5bc6\u7801\u3002\n*Pulse Secure VPN\u8f6c\u50a8\u88ab\u5ba3\u4f20\u4e3a1800\u4e2a\u6613\u53d7\u653b\u51fb\u7684\u670d\u52a1\u5668\u5217\u8868\uff0c\u4f46\u6211\u4eec\u7684\u68c0\u67e5\u53ea\u53d1\u73b0\u4e86900\u4e2a\uff0c\u56e0\u6b64\u6211\u4eec\u4f7f\u7528\u4e86\u9002\u5f53\u7684\u6587\u7ae0\u6807\u9898\uff0c\u5c3d\u7ba1\u672c\u6587\u4e2d\u6709\u7b2c\u4e00\u5f20\u56fe\u7247\u3002", "note_en": "A hacker has published today a list of plaintext usernames and passwords, along with IP addresses for more than 900 Pulse Secure VPN enterprise servers.\n ZDNet, which obtained a copy of this list with the help of threat intelligence firm  KELA, verified its authenticity with multiple sources in the cyber-security community.\n    Bank Security, a threat intelligence analyst specialized in financial crime and the one who spotted the list earlier today and shared it with ZDNet, made an interesting observation about the list and its content.\n The security researcher noted that all the Pulse Secure VPN servers included in the list were running a firmware version vulnerable to the  CVE-2019-11510 vulnerability.\n   Bank Security believes that the hacker who compiled this list scanned the entire internet IPv4 address space for Pulse Secure VPN servers, used an exploit for the CVE-2019-11510 vulnerability to gain access to systems, dump server details (including usernames and passwords), and then collected all the information in one central repository.\n Based on timestamps in the list (a collection of folders), the dates of the scans, or the date the list was compiled, appear to between June 24 and July 8, 2020.\n    ZDNet has also reached out to  Bad Packets, a US-based threat intelligence company that has been scanning the internet for vulnerable Pulse Secure VPN servers since August 2019, when the CVE-2019-11510 vulnerability was made public.\n &#34;Of the 913 unique IP addresses found in that dump, 677 were detected by Bad Packets CTI scans to be vulnerable to CVE-2019-11510 when the exploit was made public last year,&#34; Bad Packets co-founder and chief research officer, told ZDNet today.\n From the list, it appears that the 677 companies didn&#39;t patch since Bad Packets&#39; first scan last year, and the June 2020 scans carried out by the hacker.\n Even if those companies patch their Pulse Secure servers, they also need to change passwords to avoid hackers abusing the leaked credentials to take over devices and then spread to their internal networks.\n This is very important, as Pulse Secure VPN servers are usually employed as access gateways into corporate networks so staff can connect remotely to internal apps from across the internet. These types of devices, if compromised, can allow hackers easy access to a company&#39;s entire internal network -- hence the reason why  APTs and  ransomware gangs have targeted these systems in the past.\n  Making matters worse, the list has been shared on a hacker forum that is frequented by multiple ransomware gangs. For example, the REvil (Sodinokibi), NetWalker, Lockbit, Avaddon, Makop, and Exorcist ransomware gangs have threads on the same forum, and use it to recruit members (developers) and affiliates (customers).\n Many of these gangs perform intrusions into corporate networks by leveraging network edge devices like Pulse Secure VPN servers, and then deploy their ransomware payload and demand huge ransom demands.\n The publication of this list as a free download is a literal DEFCON 1 danger level for any company that has failed to patch its Pulse Secure VPN over the past year, as some of the ransomware gangs active on this forum are very likely to use the list for future attacks.\n As Bank Security told ZDNet, companies have to patch their Pulse Secure VPNs and change passwords with the utmost urgency.\n ***The Pulse Secure VPN dump has been advertised as a 1,800 list of vulnerable servers, but our checks found only 900, so we used an appropriate article title, despite the first image in this article.", "posttime": "2020-08-05 17:57:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u53d1\u5e03,\u9ed1\u5ba2,\u5bc6\u7801,hacker,\u5217\u8868", "title": "\u4e00\u540d\u9ed1\u5ba2\u5728\u4fc4\u8bed\u9ed1\u5ba2\u8bba\u575b\u4e0a\u53d1\u5e03\u4e86900\u591a\u53f0Pulse Secure VPN\u4f01\u4e1a\u670d\u52a1\u5668\u7684\u7528\u6237\u540d\u3001\u5bc6\u7801\u3001IP\u5730\u5740\u548cSSH\u5bc6\u94a5\u7684\u5217\u8868", "title_en": "A hacker has posted a list of usernames, passwords, IP addresses and SSH keys of 900+ Pulse Secure VPN enterprise servers on a Russian-speaking hacker forum", "transed": 1, "url": "https://www.zdnet.com/article/hacker-leaks-passwords-for-900-enterprise-vpn-servers/?mid=1", "via": "", "real_tags": ["\u53d1\u5e03", "\u9ed1\u5ba2", "\u5bc6\u7801", "hacker", "\u5217\u8868"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1016366, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6b63\u5728\u6301\u7eed\u6d4b\u91cf\u8c37\u6b4c\u7528\u6237\u4e4b\u95f4IPv6\u8fde\u63a5\u7684\u53ef\u7528\u6027\u3002\u8be5\u56fe\u663e\u793a\u4e86\u901a\u8fc7IPv6\u8bbf\u95eeGoogle\u7684\u7528\u6237\u767e\u5206\u6bd4\u3002\nIPv6\u90e8\u7f72\u66f4\u5e7f\u6cdb\u7684\u5730\u533a(\u7eff\u8272\u8d8a\u6df1\uff0c\u90e8\u7f72\u8d8a\u591a)\uff0c\u7528\u6237\u5728\u8fde\u63a5\u5230\u542f\u7528IPv6\u7684\u7f51\u7ad9\u65f6\u5f88\u5c11\u9047\u5230\u95ee\u9898\u3002\nIPv6\u90e8\u7f72\u8303\u56f4\u66f4\u5e7f\uff0c\u4f46\u7528\u6237\u5728\u8fde\u63a5\u5230\u542f\u7528IPv6\u7684\u7f51\u7ad9\u65f6\u4ecd\u4f1a\u9047\u5230\u4e25\u91cd\u7684\u53ef\u9760\u6027\u6216\u5ef6\u8fdf\u95ee\u9898\u7684\u5730\u533a\u3002\nIPv6\u672a\u5e7f\u6cdb\u90e8\u7f72\u4e14\u7528\u6237\u5728\u8fde\u63a5\u5230\u542f\u7528IPv6\u7684\u7f51\u7ad9\u65f6\u9047\u5230\u4e25\u91cd\u7684\u53ef\u9760\u6027\u6216\u5ef6\u8fdf\u95ee\u9898\u7684\u5730\u533a\u3002", "note_en": "We are continuously measuring the availability of IPv6 connectivity among Google users. The graph shows the percentage of users that access Google over IPv6.\n  Regions where IPv6 is more widely deployed (the darker the green, the greater the deployment) and users experience infrequent issues connecting to IPv6-enabled websites.\n  Regions where IPv6 is more widely deployed but users still experience significant reliability or latency issues connecting to IPv6-enabled websites.\n  Regions where IPv6 is not widely deployed and users experience significant reliability or latency issues connecting to IPv6-enabled websites.", "posttime": "2020-08-05 17:56:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8bbf\u95ee,ipv6", "title": "\u73b0\u5728\uff0c\u8d85\u8fc7\u4e09\u5206\u4e4b\u4e00\u7684Google\u8bbf\u95ee\u662f\u901a\u8fc7IPv6\u5b9e\u73b0\u7684", "title_en": "More than 1/3 of all access to Google is now over IPv6", "transed": 1, "url": "https://www.google.com/intl/en/ipv6/statistics.html#onethird", "via": "", "real_tags": ["google", "\u8bbf\u95ee", "ipv6"]}, {"category": "", "categoryclass": "", "imagename": "24e61a8175af932d24d6bfab5f86fc71.png", "infoid": 1016365, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5927\u578b\u4e92\u8054\u7f51\u516c\u53f8\u505a\u7684\u5f88\u591a\u4e8b\u60c5\u90fd\u88ab\u5a92\u4f53\u62a5\u9053\u6210\u4e86\u4e11\u95fb\uff0c\u4f46\u6211\u8ba4\u4e3a\u5176\u4e2d\u4e00\u4e2a\u6ee5\u7528\u6570\u636e\u7684\u884c\u4e3a\u53d7\u5230\u7684\u5173\u6ce8\u592a\u5c11\uff0c\u90a3\u5c31\u662fFacebook\u548c\u540e\u6765\u7684Twitter\u90fd\u88ab\u53d1\u73b0\u4f7f\u7528\u4eba\u4eec\u63d0\u4f9b\u7684\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\uff0c\u540e\u6765\u53c8\u5c06\u5176\u7528\u4e8e\u901a\u77e5/\u8425\u9500\u76ee\u7684\u3002\n\u5982\u679c\u60a8\u4e0d\u77e5\u4f55\u6545\u6ca1\u6709\u610f\u8bc6\u5230\uff0c\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u662f\u60a8\u5e94\u8be5\u5982\u4f55\u4fdd\u62a4\u60a8\u6700\u91cd\u8981\u7684\u5e10\u6237\u3002\u6211\u77e5\u9053\u5f88\u591a\u4eba\u61d2\u5f97\u8bbe\u7f6e\u5b83\uff0c\u4f46\u662f\u8bf7\u60a8\u8fd9\u6837\u505a\u3002\u5b83\u5e76\u4e0d\u5b8c\u7f8e(Twitter\u6700\u8fd1\u7684\u91cd\u5927\u9ed1\u5ba2\u653b\u51fb\u7ed5\u8fc7\u4e862FA\u4fdd\u62a4)\uff0c\u4f46\u5b83\u6bd4\u4ec5\u4ec5\u4f9d\u9760\u7528\u6237\u540d\u548c\u5bc6\u7801\u8981\u597d\u5f88\u591a\u500d\u3002\u57282FA\u7684\u65e9\u671f\uff0c\u5b9e\u73b0\u5b83\u7684\u4e00\u79cd\u5e38\u89c1\u65b9\u5f0f\u662f\u4f7f\u7528\u6587\u672c\u6d88\u606f\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u56e0\u7d20\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u60a8\u5c1d\u8bd5\u767b\u5f55\u4e00\u53f0\u65b0\u673a\u5668\u65f6(\u6216\u5728\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e)\uff0c\u8be5\u670d\u52a1\u5c06\u4e0d\u5f97\u4e0d\u5411\u60a8\u53d1\u9001\u4e00\u4e2a\u4ee3\u7801\uff0c\u60a8\u9700\u8981\u8f93\u5165\u8be5\u4ee3\u7801\u624d\u80fd\u8bc1\u660e\u60a8\u5c31\u662f\u60a8\u3002\n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u4eba\u4eec\u610f\u8bc6\u5230\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u592a\u5b89\u5168\u3002\u8bb8\u591a\u9ed1\u5ba2\u653b\u51fb\u6d89\u53ca\u4eba\u4eec\u4ea4\u6362SIM\u5361(\u4f7f\u7528\u793e\u4f1a\u5de5\u7a0b\u6280\u672f\u5c06\u60a8\u7684\u7535\u8bdd\u53f7\u7801\u79fb\u690d\u7ed9\u4ed6\u4eec)\uff0c\u7136\u540e\u5c062FA\u4ee3\u7801\u53d1\u9001\u7ed9\u9ed1\u5ba2\u3002\u5982\u4eca\uff0cGood 2FA\u901a\u5e38\u9700\u8981\u4f7f\u7528\u8ba4\u8bc1\u5e94\u7528\u7a0b\u5e8f\uff0c\u5982Google Authenticator\u6216Twilio\u2018s Authy\uff0c\u751a\u81f3\u66f4\u597d\u7684\u662f\u4f7f\u7528\u7269\u7406\u5bc6\u94a5\uff0c\u5982Yubikey\u6216Google\u7684Titan Key\u3002\u7136\u800c\uff0c\u8bb8\u591a\u670d\u52a1\u548c\u7528\u6237\u575a\u6301\u4f7f\u75282FA\u7684\u77ed\u4fe1\uff0c\u56e0\u4e3a\u5b83\u5bf9\u7528\u6237\u6765\u8bf4\u662f\u6700\u4e0d\u590d\u6742\u7684--\u4efb\u4f55\u5b89\u5168\u505a\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u5982\u679c\u5b83\u4e0d\u65b9\u4fbf\u7528\u6237\uff0c\u5c31\u6ca1\u6709\u4eba\u4f1a\u4f7f\u7528\u5b83\uff0c\u8fd9\u4e5f\u6ca1\u6709\u4efb\u4f55\u597d\u5904\u3002\n\u4f46\u662f\uff0c\u4f7f\u7528\u4e3a2FA\u76ee\u7684\u63d0\u4f9b\u7684\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u901a\u77e5\u6216\u8425\u9500\u771f\u7684\u5f88\u7cdf\u7cd5\u3002\u9996\u5148\uff0c\u5b83\u4f1a\u7834\u574f\u4fe1\u4efb--\u8fd9\u662f\u60a8\u5728\u5904\u7406\u5b89\u5168\u673a\u5236\u65f6\u6700\u4e0d\u60f3\u505a\u7684\u4e8b\u60c5\u3002\u4eba\u4eec\u4ea4\u51fa\u8fd9\u4e9b\u7535\u8bdd\u53f7\u7801/\u7535\u5b50\u90ae\u4ef6\u662f\u4e3a\u4e86\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u548c\u8be6\u7ec6\u7684\u539f\u56e0\uff1a\u4e3a\u4e86\u66f4\u597d\u5730\u4fdd\u62a4\u4ed6\u4eec\u7684\u8d26\u6237\u3002\u7136\u540e\u4e0e\u8425\u9500\u56e2\u961f\u5171\u4eab\u8be5\u7535\u8bdd\u53f7\u7801\u6216\u7535\u5b50\u90ae\u4ef6\u662f\u5bf9\u4fe1\u4efb\u7684\u4e25\u91cd\u8fdd\u53cd\u3002\u5b83\u8fd8\u4f1a\u7834\u574f\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u7684\u6574\u4e2a\u6982\u5ff5\uff0c\u56e0\u4e3a\u8bb8\u591a\u7528\u6237\u4f1a\u56e0\u4e3a\u62c5\u5fc3\u6570\u5b57\u53ef\u80fd\u88ab\u6ee5\u7528\u800c\u53d8\u5f97\u4e0d\u592a\u613f\u610f\u4f7f\u75282FA\u3002\n\u4e00\u5e74\u524d\uff0c\u5f53Facebook\u6536\u5230\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a50\u4ebf\u7f8e\u5143\u7684\u5de8\u989d\u7f5a\u6b3e\u65f6\uff0c\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5c3d\u7ba1\u5a92\u4f53\u51e0\u4e4e\u5b8c\u5168\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u5251\u6865\u5206\u6790\u516c\u53f8(Cambridge Analytica)\u7684\u60c5\u51b5\u4e0a\uff0c\u4f5c\u4e3a\u7f5a\u6b3e\u7684\u539f\u56e0\uff0c\u4f46\u5982\u679c\u4f60\u771f\u7684\u9605\u8bfb\u4e86\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u7684\u548c\u89e3\u6587\u4ef6\uff0c\u5c31\u4f1a\u53d1\u73b0\u771f\u6b63\u4fc3\u4f7f\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u91c7\u53d6\u884c\u52a8\u7684\u662f\u5176\u4ed6\u4e8b\u60c5\uff0c\u5305\u62ecFacebook\u4f7f\u75282FA\u7535\u8bdd\u53f7\u7801\u8fdb\u884c\u8425\u9500\u3002\u6211\u4eec\u5f88\u9ad8\u5174Facebook\u56e0\u6b64\u800c\u53d7\u5230\u60e9\u7f5a\u3002\n\u73b0\u5728\u8f6e\u5230Twitter\u4e86\u3002Twitter\u900f\u9732\uff0c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u6b63\u51c6\u5907\u5c31\u8fd9\u79cd\u884c\u4e3a\u5bf9\u8be5\u516c\u53f8\u5904\u4ee51.5\u4ebf\u81f32.5\u4ebf\u7f8e\u5143\u7684\u7f5a\u6b3e--\u5e76\u6307\u51fa\uff0c\u8be5\u884c\u4e3a\u8fdd\u53cd\u4e862011\u5e74\u4e0e\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u8fbe\u6210\u7684\u4e00\u9879\u540c\u610f\u6cd5\u4ee4\u7684\u6761\u6b3e\uff0c\u5f53\u65f6\u8be5\u516c\u53f8\u627f\u8bfa\u4e0d\u4f1a\u5728\u5904\u7406\u4e2a\u4eba\u4fe1\u606f\u7684\u65b9\u5f0f\u4e0a\u8bef\u5bfc\u7528\u6237\u3002\u7136\u800c\uff0c\u591a\u5e74\u6765\uff0cTwitter\u4f7f\u7528\u4e3a2FA\u63d0\u4f9b\u7684\u7535\u8bdd\u53f7\u7801\u548c\u7535\u5b50\u90ae\u4ef6\u6765\u5e2e\u52a9\u5b9a\u5411\u5e7f\u544a(\u57fa\u672c\u4e0a\u4f7f\u7528\u7535\u8bdd\u53f7\u7801/\u7535\u5b50\u90ae\u4ef6\u4f5c\u4e3a\u5b9a\u5411\u7684\u6807\u8bc6\u7b26)\u3002\n\u9664\u4e86Twitter\u5bf9\u6570\u636e\u7684\u5904\u7406\u975e\u5e38\u7cdf\u7cd5\u4e4b\u5916\uff0c\u6ca1\u6709\u4efb\u4f55\u5176\u4ed6\u89e3\u91ca\uff0c\u8be5\u516c\u53f8\u5e94\u8be5\u4e3a\u6b64\u53d7\u5230\u60e9\u7f5a\u3002\u6211\u8ba4\u4e3aTwitter\u6709\u5f88\u591a\u4e8b\u60c5\u4f1a\u53d7\u5230\u4e0d\u516c\u5e73\u7684\u6307\u8d23\uff0c\u4f46\u50cf\u8fd9\u6837\u7684\u505a\u6cd5\u65e2\u7cdf\u7cd5\u53c8\u5371\u9669\uff0c\u6211\u5b8c\u5168\u652f\u6301\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u5bf9\u5176\u5904\u4ee5\u5de8\u989d\u7f5a\u6b3e\uff0c\u4ee5\u8bf4\u670d\u4f01\u4e1a\u6c38\u8fdc\u4e0d\u8981\u518d\u505a\u8fd9\u79cd\u4e8b\u60c5\u3002", "note_en": "There are many things that big internet companies do that the media have made out to be scandals that aren&#39;t -- but one misuse of data that I think received  too little attention was how both  Facebook and later  Twitter were caught using the phone numbers people gave it for two factor authentication, and later used them for notification/marketing purposes.\n In case you&#39;re somehow unaware, two-factor authentication is how you  should protect your most important accounts. I know many people are too lazy to set it up, but  please do so. It&#39;s not perfect (Twitter&#39;s recent  big hack routed around 2FA protections), but it is many times better than just relying on a username and password. In the early days of 2FA, one common way to implement it was to use text messaging as the second factor. That is, when you tried to login on a new machine (or after a certain interval of time), the service would have to text you a code that you would need to enter to prove that you were you.\n Over time, people realized that this method was less secure. Many hacks involved people &#34;SIM swapping&#34; (using social engineering to have your phone number ported over to them), and then getting the 2FA code sent to the hacker. These days, good 2FA usually involves using an authenticator app, like Google Authenticator or Twilio&#39;s Authy or  even better a physical key such as the Yubikey or Google&#39;s Titan Key. However, many services and users have stuck with text messaging for 2FA because it&#39;s the least complex for users -- and the issue with any security practice is that if it&#39;s not user-friendly, no one will use it, and that doesn&#39;t do any good either.\n But using phone numbers given for 2FA purposes for notifications or marketing is  really bad. First of all, it undermines trust -- which is the last thing you want to do when dealing with a security mechanism. People handed over these phone numbers/emails for a very specific and delineated reason: to better protect their account. To then share that phone number or email with the marketing team is a massive violation in trust. And it serves to undermine the entire concept of two factor authentication, in that many users will become less willing to make use of 2FA, fearing how the numbers might be abused.\n As we noted when Facebook received the mammoth  $5 billion fine from the FTC a year ago, while the media focused almost entirely on the Cambridge Analytica situation as the reason for the fine, if you actually read the FTC&#39;s settlement documents, it was other things that really caused the FTC to move, including Facebook&#39;s use of 2FA phone numbers for marketing. We were glad that Facebook got punished for that.\n And now it&#39;s Twitter&#39;s turn. Twitter has revealed that the FTC is preparing to fine the company $150 million to $250 million for this practice -- noting that it violated the terms of an earlier  consent decree with the FTC in 2011, where the company promised not to mislead users about how it handled personal information. Yet, for years, Twitter used the phone numbers and emails provided for 2FA to help target ads (basically using the phone number/email as an identifier for targeting).\n There&#39;s no explanation for this other than really bad handling of data at Twitter, and the company should be punished for it. There are many things I think Twitter gets unfairly blamed for, but a practice like this is both bad and dangerous, and I&#39;m all for large fines from the FTC to convince companies to never do this kind of thing again.", "posttime": "2020-08-05 17:29:46", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "fine", "title": "Twitter\u56e0\u4f7f\u7528\u60a8\u7684\u53cc\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u7535\u8bdd\u53f7\u7801/\u7535\u5b50\u90ae\u4ef6\u8fdb\u884c\u8425\u9500\u5c06\u88ab\u5904\u4ee5\u7ea62.5\u4ebf\u6fb3\u5143\u7684\u7f5a\u6b3e", "title_en": "Twitter About To Be Hit With A ~$250 Million Fine For Using Your Two Factor Authentication Phone Numbers/Emails For Marketing", "transed": 1, "url": "https://www.techdirt.com/articles/20200804/01231345032/twitter-about-to-be-hit-with-250-million-fine-using-your-two-factor-authentication-phone-numbers-emails-marketing.shtml", "via": "", "real_tags": ["fine"]}, {"category": "", "categoryclass": "", "imagename": "3055c03db63f7fbe5bca5dd9178c24fb.jpg", "infoid": 1016364, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e09\uff0c\u8fd9\u5bb6\u7535\u5546\u5de8\u5934\u5ba3\u5e03\u5df2\u4e0e\u5370\u5ea6\u7b2c\u4e09\u5927\u7535\u4fe1\u8fd0\u8425\u5546Bharti Airtel\u5408\u4f5c\uff0c\u4ee5Airtel Cloud\u54c1\u724c\u5411\u8be5\u56fd\u7684\u4e2d\u5c0f\u578b\u548c\u5927\u578b\u4f01\u4e1a\u9500\u552e\u5e7f\u6cdb\u7684AWS\u4ea7\u54c1\u3002Bharti Airtel\u662f\u5370\u5ea6\u7b2c\u4e09\u5927\u7535\u4fe1\u8fd0\u8425\u5546\uff0c\u62e5\u6709\u8d85\u8fc73\u4ebf\u7528\u6237\u3002\n\u8fd9\u7b14\u4ea4\u6613\u53ef\u80fd\u6709\u52a9\u4e8e\u5f15\u9886\u5370\u5ea6\u4e91\u5e02\u573a\u7684AWS\u8fdb\u4e00\u6b65\u6269\u5927\u5176\u5728\u5370\u5ea6\u7684\u4e3b\u5bfc\u5730\u4f4d\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u5370\u5ea6\u6700\u5927\u7684\u7535\u4fe1\u8fd0\u8425\u5546Reliance Jio\u53bb\u5e74\u4e0e\u5fae\u8f6f\u8fbe\u6210\u4e86\u5411\u5c0f\u4f01\u4e1a\u51fa\u552e\u4e91\u670d\u52a1\u7684\u7c7b\u4f3c\u534f\u8bae\u3002\u8fd9\u4e24\u5bb6\u516c\u53f8\u5ba3\u5e03\u4e86\u4e00\u9879\u4e3a\u671f10\u5e74\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\uff0c\u4ee5\u201c\u670d\u52a1\u6570\u767e\u4e07\u5ba2\u6237\u201d\u3002\n\u4e3a2500\u591a\u5bb6\u5927\u578b\u4f01\u4e1a\u548c100\u591a\u4e07\u5bb6\u65b0\u5174\u4f01\u4e1a\u63d0\u4f9b\u670d\u52a1\u7684Airtel\u81ea\u5df1\u4e5f\u5728\u4eca\u5e741\u6708\u4e0e\u8c37\u6b4c\u7b7e\u7f72\u4e86\u7c7b\u4f3c\u7684\u4e91\u534f\u8bae\u3002\u8fd9\u79cd\u4f19\u4f34\u5173\u7cfb\u4ecd\u7136\u5b58\u5728\u3002\n\u201cAWS\u5e26\u6765\u4e86175\u591a\u9879\u670d\u52a1\u3002\u6211\u4eec\u57fa\u672c\u4e0a\u652f\u6301\u4e91\u4e0a\u7684\u4efb\u4f55\u5de5\u4f5c\u8d1f\u8f7d\u3002\u6211\u4eec\u62e5\u6709\u89c4\u6a21\u6700\u5927\u3001\u6700\u5177\u6d3b\u529b\u7684\u5ba2\u6237\u7fa4\u4f53\uff0c\u201cAWS\u5370\u5ea6\u548c\u5357\u4e9a\u5730\u533a\u603b\u88c1Puneet Chandok\u5728\u4e0e\u8bb0\u8005\u7684\u7535\u8bdd\u4f1a\u8bae\u4e0a\u8868\u793a\u3002\n\u4ed6\u4eec\u8bf4\uff0c\u4e24\u5bb6\u516c\u53f8\u8fd8\u5c06\u5728\u5efa\u7acb\u65b0\u670d\u52a1\u65b9\u9762\u8fdb\u884c\u5408\u4f5c\uff0c\u5e76\u5e2e\u52a9\u73b0\u6709\u5ba2\u6237\u8fc1\u79fb\u5230Airtel Cloud\u3002\nAirtel\u5168\u7403\u9996\u5e2d\u4fe1\u606f\u5b98\u3001\u4e91\u548c\u5b89\u5168\u4e1a\u52a1\u4e3b\u7ba1\u54c8\u654f\u00b7\u6885\u5854(Harmeen Mehta)\u5728\u7535\u8bdd\u4f1a\u8bae\u4e0a\u8868\u793a\uff0c\u4eca\u5929\u7684\u4ea4\u6613\u8868\u660e\uff0cAirtel\u6b63\u5728\u52aa\u529b\u5efa\u7acb\u7535\u4fe1\u5408\u8d44\u4f01\u4e1a\u4ee5\u5916\u7684\u4e1a\u52a1\u3002\n\u4e0e\u8fd0\u8425\u5546\u7684\u4ea4\u6613\u5728\u5341\u5e74\u524d\u79d1\u6280\u5de8\u5934\u5bfb\u6c42\u5728\u5370\u5ea6\u83b7\u5f97\u65b0\u7528\u6237\u65f6\u975e\u5e38\u5e38\u89c1\uff0c\u8fd9\u8868\u660e\u4e86\u8be5\u56fd\u91c7\u7528\u4e91\u7684\u9636\u6bb5\u3002\n\u8fc7\u53bb\u5341\u5e74\uff0c\u5370\u5ea6\u6709\u8fd15\u4ebf\u4eba\u4e0a\u7f51\u3002\u6162\u6162\u5730\uff0c\u5c0f\u4f01\u4e1a\u548c\u5546\u5bb6\u4e5f\u5f00\u59cb\u4f7f\u7528\u6570\u5b57\u5de5\u5177\u3001\u5b58\u50a8\u670d\u52a1\uff0c\u5e76\u63a5\u53d7\u5728\u7ebf\u652f\u4ed8\u3002\n\u5370\u5ea6\u5df2\u7ecf\u6210\u4e3a\u4e91\u670d\u52a1\u7684\u65b0\u5174\u9886\u5148\u5e02\u573a\u4e4b\u4e00\u3002\u6839\u636e\u7814\u7a76\u516c\u53f8IDC\u7684\u6570\u636e\uff0c\u52302024\u5e74\uff0c\u5370\u5ea6\u7684\u516c\u5171\u4e91\u670d\u52a1\u5e02\u573a\u9884\u8ba1\u5c06\u8fbe\u523071\u4ebf\u7f8e\u5143\u3002", "note_en": "On Wednesday, the e-commerce giant announced it has partnered with Bharti  Airtel,   the third-largest telecom operator in India with more than 300 million subscribers, to sell a wide-range of AWS offerings under Airtel Cloud brand to small, medium, and large-sized businesses in the country.\n The deal could help AWS, which leads the cloud market in India, further expand its dominance in the country. The move follows a similar deal Reliance Jio, India\u2019s largest telecom operator,  struck with Microsoft\u00a0last year to sell cloud services to small businesses. The two announced a 10-year partnership to \u201cserve millions of customers.\u201d\n  Airtel, which serves over 2,500 large enterprises and more than a million emerging businesses,\u00a0itself \u00a0signed a similar cloud deal with Google in January this year. That partnership is still in place.\n \u201cAWS brings over 175 services. We pretty much support any workload on the cloud. We have the largest and the most vibrant community of customers,\u201d said Puneet Chandok, President of AWS in India and South Asia, said on a call with reporters.\n The two companies will also collaborate on building new services and help existing customers migrate to Airtel Cloud, they said.\n Today\u2019s deal illustrates Airtel\u2019s push to build businesses beyond its telecom venture, said Harmeen Mehta, Global CIO and Head of Cloud and Security Business at Airtel, said on the call.\n Deals with carriers, which were very common a decade ago as tech giants looked to acquire new users in India, illustrates the phase of the cloud adoption in the nation.\n Nearly half a billion people in India came online last decade. And slowly, small businesses and merchants are also beginning to use digital tools, storage services, and accept online payments.\n India has emerged as one of the emerging leading grounds for cloud services.\u00a0The public cloud services market of the country is estimated to reach $7.1 billion by 2024, according to research firm IDC.", "posttime": "2020-08-05 17:29:14", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "amazon,\u4e9a\u9a6c\u900a,airtel,inks,\u5370\u5ea6", "title": "\n\u4e9a\u9a6c\u900a\u5728\u5370\u5ea6\u4e0eAirtel\u7b7e\u7f72\u4e91\u534f\u8bae", "title_en": "\n\t\t\t\tAmazon inks cloud deal with Airtel in India\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/08/05/amazon-inks-cloud-deal-with-airtel-in-india/", "via": "", "real_tags": ["amazon", "\u4e9a\u9a6c\u900a", "airtel", "inks", "\u5370\u5ea6"]}, {"category": "", "categoryclass": "", "imagename": "0afc9342391b9d827689e5397b6df638.png", "infoid": 1016363, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u4e3b\u8981\u601d\u60f3\u662f\u50cf\u5bf9\u5f85\u4efb\u4f55\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u4e00\u6837\u5bf9\u5f85\u51fd\u6570\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u5e0c\u671b\u80fd\u591f\u5c06\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\uff0c\u5c06\u5b83\u4eec\u4f5c\u4e3a\u503c\u8fd4\u56de\uff0c\u5e76\u5c06\u5b83\u4eec\u5b58\u50a8\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u4f46\u662f\u51fd\u6570\u662f\u54ea\u79cd\u6570\u636e\u7c7b\u578b\u5462\uff1f\u5b83\u662f\u4e00\u79cd\u7c7b\u578b\uff0c\u5f53\u4e0e\u53e6\u4e00\u6bb5\u79f0\u4e3a\u53c2\u6570\u7684\u6570\u636e\u914d\u5bf9\u65f6\uff0c\u53ef\u4ee5\u5c06\u5176\u4f20\u9012\u7ed9\u540d\u4e3aApply\u7684\u51fd\u6570\u4ee5\u4ea7\u751f\u7ed3\u679c\u3002\n\u5728\u5b9e\u8df5\u4e2d\uff0c\u51fd\u6570\u5e94\u7528\u9690\u542b\u5728\u8bed\u8a00\u7684\u8bed\u6cd5\u4e2d\u3002\u4f46\u662f\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u5373\u4f7f\u60a8\u7684\u8bed\u8a00\u4e0d\u652f\u6301\u9ad8\u9636\u51fd\u6570\uff0c\u60a8\u6240\u9700\u8981\u7684\u5c31\u662f\u63a8\u51fa\u60a8\u81ea\u5df1\u7684Apply\u3002\n\u4f46\u662f\uff0c\u8fd9\u4e9b\u51fd\u6570\u5bf9\u8c61(\u8981\u5e94\u7528\u7684\u53c2\u6570)\u4ece\u4f55\u800c\u6765\uff1f\u5185\u7f6e\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u77e5\u9053\u5982\u4f55\u5904\u7406\u5b83\u4eec\uff1f\n\u5728\u5b9e\u73b0\u51fd\u6570\u65f6\uff0c\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u60a8\u662f\u5728\u544a\u8bc9Apply\u5982\u4f55\u5904\u7406\u5b83-\u8981\u6267\u884c\u54ea\u4e9b\u4ee3\u7801\u3002\u60a8\u6b63\u5728\u5b9e\u73b0Apply\u7684\u5404\u4e2a\u5757\u3002\u8fd9\u4e9b\u5757\u901a\u5e38\u6563\u5e03\u5728\u60a8\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6709\u65f6\u4ee5lambdas\u7684\u5f62\u5f0f\u533f\u540d\u3002\n\u6211\u4eec\u5c06\u8ba8\u8bba\u5728\u4e0d\u66f4\u6539\u7a0b\u5e8f\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\u5f15\u5165\u66f4\u591a\u51fd\u6570\u3001\u7528\u547d\u540d\u51fd\u6570\u66ff\u6362\u533f\u540d\u51fd\u6570\u6216\u5c06\u67d0\u4e9b\u51fd\u6570\u8f6c\u6362\u4e3a\u6570\u636e\u7c7b\u578b\u7684\u7a0b\u5e8f\u8f6c\u6362\u3002\u8fd9\u79cd\u8f6c\u6362\u7684\u4e3b\u8981\u4f18\u52bf\u5728\u4e8e\uff0c\u5b83\u4eec\u53ef\u4ee5\u63d0\u9ad8\u6027\u80fd\uff0c\u6709\u65f6\u4f1a\u6781\u5927\u5730\u63d0\u9ad8\u6027\u80fd\uff1b\u6216\u8005\u652f\u6301\u5206\u5e03\u5f0f\u8ba1\u7b97\u3002\n\u4e00\u5982\u65e2\u5f80\uff0c\u6211\u4eec\u671f\u5f85\u8303\u7574\u8bba\u4e3a\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61\u63d0\u4f9b\u7406\u8bba\u57fa\u7840\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u80fd\u591f\u8fdb\u884c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff0c\u56e0\u4e3a\u7c7b\u578b\u548c\u51fd\u6570\u7684\u8303\u7574\u662f\u7b1b\u5361\u5c14\u95ed\u5408\u7684\u3002\u7b2c\u4e00\u90e8\u5206\uff0c\u7b1b\u5361\u5c14\uff0c\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4ea7\u54c1\u7c7b\u578b\u3002\u5728Haskell\u4e2d\uff0c\u6211\u4eec\u5728\u8bed\u8a00\u4e2d\u5185\u7f6e\u4e86\u5bf9\u7c7b\u578b(a\uff0cb)\u3002\u660e\u786e\u5730\u8bf4\uff0c\u6211\u4eec\u4f1a\u628a\u5b83\u5199\u6210\u3002Product\u5728\u8fd9\u4e24\u4e2a\u53c2\u6570\u4e2d\u90fd\u662f\u51fd\u6570\u5f0f\u7684\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u7279\u522b\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5f0f\u3002\n\u5b9a\u4e49\u51fd\u6570\u7c7b\u578b(\u4e5f\u79f0\u4e3a\u6307\u6570\u5bf9\u8c61)\u3002\u8fd9\u4e2a\u9644\u52a0\u8bcd\u7684\u5b58\u5728\u4f7f\u8303\u7574\u6210\u4e3a\u5c01\u95ed\u7684\u3002\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e24\u4e2a\u51fd\u6570\u5668\u5206\u522b\u8bc6\u522b\u4e3a\u5199\u5165\u5668\u548c\u8bfb\u53d6\u5668\u51fd\u6570\u5668\u3002\u5f53\u8be5\u53c2\u6570\u88ab\u9650\u5236\u4e3aMonid\u65f6\uff0c\u5199\u5165\u5668\u51fd\u6570\u5668\u53d8\u6210Monad(\u8bfb\u53d6\u5668\u5df2\u7ecf\u662fMonad)\u3002\n\u5496\u55b1\uff1a\uff1a(C\uff0ca)-&gt\uff1bd)-&gt\uff1b(c-&gt\uff1b(a-&gt\uff1bd))\u53d6\u6d88\u5496\u55b1\uff1a\uff1a(c-&gt\uff1b(a-&gt\uff1bd)-&gt\uff1b((c\uff0ca)-&gt\uff1bd)\n\u5728\u6211\u4e0a\u4e00\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4ece\u8303\u7574\u7684\u89d2\u5ea6\u8ba8\u8bba\u4e86Freyd\u7684\u4f34\u968f\u51fd\u5b50\u5b9a\u7406\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u5c1d\u8bd5\u5bf9\u5176\u8fdb\u884c\u7f16\u7a0b\u89e3\u91ca\u3002\u53e6\u5916\uff0c\u539f\u59cb\u5b9a\u7406\u662f\u901a\u8fc7\u5bfb\u627e\u7ed9\u5b9a\u51fd\u5b50\u7684\u5de6\u4f34\u968f\u6765\u8868\u8ff0\u7684\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u611f\u5174\u8da3\u7684\u662f\u5bfb\u627e\u4e58\u79ef\u51fd\u5b50\u7684\u6b63\u786e\u4f34\u968f\u3002\u8fd9\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u8303\u7574\u8bba\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u6784\u90fd\u53ef\u4ee5\u901a\u8fc7\u98a0\u5012\u7bad\u5934\u6765\u5bf9\u5076\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u9017\u53f7\u7c7b\u522b\uff0c\u800c\u662f\u4f7f\u7528\u9017\u53f7\u7c7b\u522b\u3002\u5b83\u7684\u5bf9\u8c61\u662f\u5bf9\uff0c\u5176\u4e2d\u662f\u4e00\u4e2a\u6001\u5c04\u3002\n\u8fd9\u662f\u5927\u4f53\u60c5\u51b5\uff0c\u4f46\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5904\u7406\u7684\u662f\u5355\u4e2a\u7c7b\u522b\uff0c\u5e76\u4e14\u662f\u4e00\u4e2a\u5185\u51fd\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u5728Haskell\u4e2d\u5b9e\u73b0\u9017\u53f7\u7c7b\u522b\u7684\u5bf9\u8c61\u3002\n\u6211\u4eec\u6b63\u8bd5\u56fe\u6784\u9020\u4e00\u4e2a\u8868\u793a\u51fd\u6570a-&gt\uff1bd\u7684\u51fd\u6570\u5bf9\u8c61\uff0c\u90a3\u4e48c\u5728\u8fd9\u4e00\u5207\u4e2d\u626e\u6f14\u4ec0\u4e48\u89d2\u8272\u5462\uff1f\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u60a8\u5fc5\u987b\u8003\u8651\u5230\u51fd\u6570\u5bf9\u8c61\u53ef\u7528\u4e8e\u63cf\u8ff0\u95ed\u5305\uff1a\u4ece\u5176\u73af\u5883\u4e2d\u6355\u83b7\u503c\u7684\u51fd\u6570\u3002\u7c7b\u578bC\u8868\u793a\u8fd9\u4e9b\u6355\u83b7\u7684\u503c\u3002\u7a0d\u540e\uff0c\u5f53\u6211\u4eec\u8ba8\u8bba\u4f7f\u95ed\u5305\u5931\u6548\u65f6\uff0c\u6211\u4eec\u5c06\u66f4\u660e\u786e\u5730\u770b\u5230\u8fd9\u4e00\u70b9\u3002\n\u6211\u4eec\u7684\u9017\u53f7\u7c7b\u522b\u662f\u4ece\u5230\u7684\u6240\u6709\u95ed\u5305\u7684\u7c7b\u522b\uff0c\u540c\u65f6\u6355\u83b7\u6240\u6709\u53ef\u80fd\u7684\u73af\u5883\u3002\u6211\u4eec\u6b63\u5728\u6784\u9020\u7684\u51fd\u6570\u5bf9\u8c61\u672c\u8d28\u4e0a\u662f\u6240\u6709\u8fd9\u4e9b\u95ed\u5305\u7684\u603b\u548c\uff0c\u53ea\u662f\u5176\u4e2d\u4e00\u4e9b\u95ed\u5305\u88ab\u591a\u6b21\u8ba1\u6570\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u6267\u884c\u4e00\u4e9b\u6807\u8bc6\u3002\u8fd9\u5c31\u662f\u6001\u5c04\u7684\u4f5c\u7528\u3002\n\u9017\u53f7\u8303\u7574\u7684\u6001\u5c04\u662f\u6784\u6210\u4ea4\u6362\u4e09\u89d2\u5f62\u7684\u6001\u5c04\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u901a\u52e4\u56fe\u8868\u4e0d\u80fd\u7528Haskell\u8868\u793a\u3002\u6211\u4eec\u80fd\u5f97\u5230\u7684\u6700\u63a5\u8fd1\u7684\u7ed3\u8bba\u662f\uff0c\u4e00\u4e2a\u6765\u81ea\u3002\nC1=\u9017\u53f7c f\uff1a\uff1a(C\uff0ca)-&gt\uff1bd c2=\u9017\u53f7c&39\uff1bg g\uff1a\uff1a(C&#39\uff1b\uff0ca)-&gt\uff1bd\u3002\n\u8fd9\u91cc\uff0cbimap hid\u662f\u5c06h\u63d0\u5347\u5230\u51fd\u6570\u5668\u3002\u66f4\u660e\u786e\u5730\u8bf4\n\u5f53\u6211\u4eec\u5c06c\u89e3\u91ca\u4e3a\u5b9a\u4e49\u95ed\u5305\u7684\u73af\u5883\u65f6\uff0c\u95ee\u9898\u662f\uff1af\u4f7f\u7528\u7684\u662f\u7528c\u7f16\u7801\u7684\u6240\u6709\u4fe1\u606f\uff0c\u8fd8\u662f\u53ea\u4f7f\u7528\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff1f\u5982\u679c\u8fd9\u53ea\u662f\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5b83\u5206\u89e3\u51fa\u6765\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u6355\u83b7\u6574\u6570\u7684lambda\uff0c\u4f46\u5b83\u53ea\u5bf9\u6574\u6570\u662f\u5076\u6570\u8fd8\u662f\u5947\u6570\u611f\u5174\u8da3\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u6355\u83b7\u5e03\u5c14\u503c\u7684lambda\u66ff\u6362\u8fd9\u4e2alambda\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u8f6c\u6362\u73af\u5883\u3002\n\u6784\u9020\u4e2d\u7684\u4e0b\u4e00\u6b65\u662f\u5c06\u6295\u5f71\u51fd\u6570\u5668\u4ece\u9017\u53f7\u7c7b\u522b\u5b9a\u4e49\u56de\u5fd8\u8bb0\u90e8\u5206\u800c\u53ea\u4fdd\u7559\u5bf9\u8c61\u7684\u51fd\u6570\u3002\n\u6211\u4eec\u4f7f\u7528\u6b64\u51fd\u6570\u5668\u5728\u4e2d\u5b9a\u4e49\u56fe\u3002\u73b0\u5728\uff0c\u6211\u4eec\u4e0d\u518d\u50cf\u5728\u4e0a\u4e00\u671f\u6587\u7ae0\u4e2d\u90a3\u6837\u53d6\u5176\u6781\u9650\uff0c\u800c\u662f\u53d6\u6b64\u56fe\u7684\u5217\u9650\u5236\u3002\u6211\u4eec\u5c06\u4f7f\u7528\u8fd9\u4e2aColimit\u6765\u5b9a\u4e49\u53f3\u4f34\u968f\u51fd\u6570\u5668\u5728\u4e0a\u7684\u52a8\u4f5c\u3002\n\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u5065\u5fd8\u7684\u51fd\u6570\u5668\u4e22\u5f03\u9017\u53f7dc\u7684\u51fd\u6570\u90e8\u5206\uff0c\u53ea\u4fdd\u7559\u73af\u5883\u3002\u8fd9\u610f\u5473\u7740\uff0c\u53ea\u8981d\u4e0d\u662fvoid\uff0c\u6211\u4eec\u5904\u7406\u7684\u5c31\u662f\u4e00\u4e2a\u5305\u542b\u6211\u4eec\u7c7b\u578b\u7c7b\u522b\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\u7684\u5de8\u578b\u56fe\u3002\u8fd9\u4e2a\u56fe\u7684\u754c\u9650\u662f\u4e00\u5207\u7684\u5de8\u5927\u4f59\u79ef\uff0c\u7531\u9017\u53f7\u8303\u7574\u7684\u6001\u5c04\u5f15\u5165\u7684\u6a21\u6807\u8bc6\u3002\u4f46\u662f\uff0c\u8fd9\u4e9b\u6807\u8bc6\u5bf9\u4e8e\u5220\u9664\u591a\u4f59\u7684\u95ed\u5305\u81f3\u5173\u91cd\u8981\u3002\u53ef\u4ee5\u7528\u4f7f\u7528\u7b80\u5316\u73af\u5883\u7684\u66f4\u7b80\u5355\u7684lambda\u6765\u6807\u8bc6\u4ec5\u4f7f\u7528\u6765\u81ea\u6355\u83b7\u73af\u5883\u7684\u90e8\u5206\u4fe1\u606f\u7684\u6bcf\u4e2alambda\u3002\n\u4e3a\u4e86\u8fdb\u884c\u8bf4\u660e\uff0c\u8003\u8651\u6784\u9020\u51fd\u6570\u5bf9\u8c61\u6216(\u5230\u7ec8\u7aef\u5bf9\u8c61\u7684\u5e42)\u7684\u4e00\u4e2a\u6709\u70b9\u6781\u7aef\u7684\u60c5\u51b5\u3002\u6b64\u5bf9\u8c61\u5e94\u4e0e\u540c\u6784\u3002\u8ba9\u6211\u4eec\u770b\u770b\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a\u7ec8\u7aef\u5bf9\u8c61\u662f\u4ea7\u54c1\u7684\u5355\u4f4d\uff0c\u6240\u4ee5\u3002\n\u6240\u4ee5\u9017\u53f7\u7c7b\u522b\u5c31\u662f\u7bad\u5934\u7684\u5207\u7247\u7c7b\u522b\u3002\u78b0\u5de7\u8fd9\u4e2a\u7c7b\u522b\u6709\u7ec8\u7aef\u5bf9\u8c61\u3002\u5177\u6709\u7ec8\u7aef\u5bf9\u8c61\u56fe\u8868\u7684\u5217\u9650\u5236\u662f\u7ec8\u7aef\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u5b9e\u9645\u4e0a\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u6784\u9020\u4ea7\u751f\u4e86\u4e00\u4e2a\u4e0e\u540c\u6784\u7684\u51fd\u6570\u5bf9\u8c61\u3002\n\u76f4\u89c2\u5730\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4ece\u73af\u5883\u4e2d\u6355\u83b7\u7c7b\u578b\u503c\u5e76\u8fd4\u56dea\u7684lambda\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u5206\u89e3\u51fa\u6765\uff0c\u4f7f\u7528\u8be5lambda\u5c06\u73af\u5883\u8f6c\u6362\u4e3a\uff0c\u7136\u540e\u5c06\u6807\u8bc6\u5e94\u7528\u4e8e\u3002\u540e\u8005\u5bf9\u5e94\u4e8e\u9017\u53f7\u7c7b\u522b\u5bf9\u8c61\uff0c\u5065\u5fd8\u51fd\u6570\u5668\u5c06\u5176\u6620\u5c04\u5230\u3002\n\u591a\u8fd0\u884c\u51e0\u4e2a\u793a\u4f8b\u6765\u638c\u63e1\u5b83\u7684\u8bc0\u7a8d\u662f\u5f88\u6709\u6307\u5bfc\u610f\u4e49\u7684\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u5bf9\u8c61Bool-&gt\uff1bd\u53ef\u4ee5\u901a\u8fc7\u8003\u8651\u4ee5\u4e0b\u7c7b\u578b\u7684\u95ed\u5305\u6765\u6784\u9020\nH\uff1a\uff1ac-&gt\uff1b(d\uff0cd)hc=(f(c\uff0cTrue)\uff0cf(c\uff0cFalse))\u3002\nG\uff1a\uff1a((d\uff0cd)\uff0cBool)-&gt\uff1bd g((d1\uff0cd2)\uff0cb)=\u5982\u679cb\uff0c\u5219d1\u5426\u5219d2\u3002\n\u6211\u4eec\u5bf9\u8fd9\u4e2a\u9644\u52a0\u9879\u76ee\u7279\u522b\u611f\u5174\u8da3\u3002\u5b83\u7684\u6210\u5206at\u662f\u4e00\u4e2a\u6001\u5c04\u3002\n\u5b9e\u9645\u4e0a\uff0c\u5b83\u5c31\u662f\u8be5\u7c7b\u522b\u4e2d\u7684\u7ec8\u7aef\u5bf9\u8c61\u3002\u60a8\u53ef\u4ee5\u770b\u5230\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\uff0c\u90fd\u6709\u4e00\u4e2a\u4f7f\u4e0b\u9762\u7684\u4e09\u89d2\u5f62\u4e92\u6362\u7684\u6001\u5c04\uff1a\n\u8fd9\u4e2a\u6001\u5c04\u662f\u672b\u7aefCOO\u9525\u4e2d\u7684\u4e00\u6761\u817f\uff0c\u5b83\u5b9a\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u80af\u5b9a\u5730\u77e5\u9053\u5b83\u5728\u6930\u5b50\u9525\u7684\u5e95\u90e8\uff0c\u56e0\u4e3a\u5b83\u662f\u3002\n\u8981\u6df1\u5165\u4e86\u89e3\u51fd\u6570\u5bf9\u8c61\u7684\u7ed3\u6784\uff0c\u5047\u8bbe\u60a8\u53ef\u4ee5\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u73af\u5883\u96c6\u3002\u7136\u540e\uff0c\u9017\u53f7\u7c7b\u522b\u5c06\u7531\u5bf9\u7ec4\u6210\u3002\u6240\u6709\u8fd9\u4e9b\u73af\u5883\u7684\u526f\u4ea7\u54c1\u90fd\u662f\u529f\u80fd\u5bf9\u8c61\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u5019\u9009\u8005\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ba9\u6211\u4eec\u8bd5\u7740\u4e3a\u5b83\u5b9a\u4e49\u4e00\u4e2aCounit\uff1a\n\u548c\u7684\u6620\u5c04\u662f\u6620\u5c04\u7684\u4e58\u79ef\u8fd9\u4e00\u4e8b\u5b9e\u3002\u53f3\u624b\u8fb9\u53ef\u4ee5\u7531\u9017\u53f7\u8303\u7574\u7684\u6001\u5c04\u6784\u6210\u3002\n\u56e0\u6b64\uff0c\u8be5\u5bf9\u8c61\u81f3\u5c11\u6ee1\u8db3\u51fd\u6570\u5bf9\u8c61\u7684\u4e00\u4e2a\u8981\u6c42\uff1a\u6709\u4e00\u4e2a\u7533\u8bf7\u5b83\u7684\u5b9e\u73b0\u3002\u4e0d\u8fc7\uff0c\u8fd9\u662f\u9ad8\u5ea6\u5197\u4f59\u7684\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5728\u6784\u9020\u51fd\u6570\u5bf9\u8c61\u65f6\u4f7f\u7528colimit\u800c\u4e0d\u662f\u8054\u79ef\u7684\u539f\u56e0\u3002\u53e6\u5916\uff0c\u6211\u4eec\u5ffd\u7565\u4e86\u5c3a\u5bf8\u95ee\u9898\u3002\n\u6b63\u5982\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u8fc7\u7684\uff0c\u7531\u4e8e\u5927\u5c0f\u95ee\u9898\uff0c\u6b64\u7ed3\u6784\u4e00\u822c\u4e0d\u8d77\u4f5c\u7528\uff1a\u9017\u53f7\u7c7b\u522b\u4e0d\u4e00\u5b9a\u5f88\u5c0f\uff0c\u5e76\u4e14\u53ef\u80fd\u4e0d\u5b58\u5728\u9017\u53f7\u9650\u5236\u3002\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4ee5\u524d\u5b9a\u4e49\u4e86\u8f83\u5c0f\u7684\u89e3\u51b3\u65b9\u6848\u96c6\u3002\u5728\u53f3\u4f34\u968f\u7684\u60c5\u51b5\u4e0b\uff0c\u89e3\u96c6\u662f\u5f31\u672b\u7aef\u7684\u5bf9\u8c61\u65cf\u3002\u8fd9\u4e9b\u914d\u5bf9\uff0c\u5728\u5b83\u4eec\u4e4b\u95f4\uff0c\u53ef\u4ee5\u5206\u89e3\u51fa\u4efb\u4f55\u3002\n\u8fd9\u610f\u5473\u7740\u6211\u4eec\u603b\u80fd\u627e\u5230\u4e00\u4e2a\u6307\u6570\u548c\u4e00\u4e2a\u6001\u5c04\u6765\u6ee1\u8db3\u8fd9\u4e2a\u65b9\u7a0b\u3002\u6bcf\u4e00\u4e2a\u90fd\u53ef\u80fd\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684AND\u6765\u8003\u8651\uff0c\u4f46\u5bf9\u4e8e\u4efb\u4f55\u4e00\u4e2a\uff0c\u6211\u4eec\u90fd\u4fdd\u8bc1\u603b\u662f\u80fd\u627e\u5230\u4e00\u5bf9\u3002\n\u4e00\u65e6\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u89e3\u96c6\uff0c\u53f3\u4f34\u968f\u5c31\u662f\u901a\u8fc7\u9996\u5148\u5f62\u6210\u6240\u6709\u7684\u4f59\u79ef\uff0c\u7136\u540e\u4f7f\u7528\u4f59\u5747\u8861\u5668\u6765\u6784\u9020\u4e00\u4e2a\u7ec8\u7aef\u5bf9\u8c61\u6765\u6784\u9020\u7684\u3002\n\u771f\u6b63\u6709\u8da3\u7684\u662f\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u4f7f\u7528\u89e3\u96c6\u7684\u4f59\u79ef\u6765\u8fd1\u4f3c\u4f34\u968f\u9879(\u4ece\u800c\u8df3\u8fc7\u5747\u8861\u5668\u90e8\u5206)\u3002\n\u6211\u4eec\u7684\u60f3\u6cd5\u662f\uff0c\u5728\u7279\u5b9a\u7684\u7a0b\u5e8f\u4e2d\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u8868\u793a\u6240\u6709\u53ef\u80fd\u7684\u51fd\u6570\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u8868\u793a\u8fd9\u4e9b\u7c7b\u578b\u7684(\u5c0f)\u5b50\u96c6\u3002\u6211\u4eec\u4e5f\u4e0d\u7279\u522b\u62c5\u5fc3\u552f\u4e00\u6027\uff1a\u5982\u679c\u76f8\u540c\u7684\u51fd\u6570\u4ee5\u591a\u4e2a\u8bed\u6cd5\u8868\u793a\u7ed3\u675f\uff0c\u8fd9\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\u8ba9\u6211\u4eec\u7528\u7f16\u7a0b\u672f\u8bed\u91cd\u65b0\u8868\u8ff0Freyd\u5bf9\u51fd\u6570\u5bf9\u8c61\u7684\u6784\u9020\u3002\u89e3\u96c6\u662f\u7c7b\u578b\u548c\u51fd\u6570\u7684\u96c6\u5408\uff0c\u4f7f\u5f97\u5bf9\u4e8e\u6211\u4eec\u7684\u7a0b\u5e8f\u4e2d\u611f\u5174\u8da3\u7684\u4efb\u4f55\u51fd\u6570(\u4f8b\u5982\uff0c\u7528\u4f5c\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u53c2\u6570)\u5b58\u5728\u4e00\u4e2a\u548c\u51fd\u6570\uff0c\u4ece\u800c\u53ef\u4ee5\u91cd\u5199\uff0c\u6362\u8a00\u4e4b\uff0c\u6bcf\u4e2a\u611f\u5174\u8da3\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u88ab\u89e3\u96c6\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u66ff\u6362\u3002\u8be5\u6807\u51c6\u529f\u80fd\u7684\u73af\u5883\u603b\u662f\u53ef\u4ee5\u4ece\u66f4\u4e00\u822c\u529f\u80fd\u7684\u73af\u5883\u4e2d\u63d0\u53d6\u3002\n\u9ad8\u9636\u51fd\u6570\u7684\u4e00\u4e2a\u7279\u6b8a\u5e94\u7528\u51fa\u73b0\u5728\u8fde\u7eed\u4f20\u9012\u53d8\u6362\u7684\u4e0a\u4e0b\u6587\u4e2d\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u5c06\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u904d\u5386\u5305\u542b\u5b57\u7b26\u4e32\u7684\u4e8c\u53c9\u6811\uff0c\u5e76\u5c06\u5b83\u4eec\u5168\u90e8\u8fde\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u8fd9\u5c31\u662f\u90a3\u68f5\u6811\nShow1\uff1a\uff1atree-&gt\uff1bstring show1(\u53f6s)=s show1(\u8282\u70b9l s r)=show1 l++s++show1 r\u3002\n\u6811\uff1a\uff1a\u6811=\u8282\u70b9(Node(Leaf&#34\uff1b1&#34\uff1b)&#34\uff1b2&#34\uff1b(Leaf&#34\uff1b3&#34\uff1b))&#34\uff1b4&#34\uff1b(Leaf&#34\uff1b5&#34\uff1b)\u3002\n\u53ea\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u9012\u5f52\u6d88\u8017\u8fd0\u884c\u65f6\u5806\u6808\uff0c\u800c\u8fd0\u884c\u65f6\u5806\u6808\u901a\u5e38\u662f\u6709\u9650\u7684\u8d44\u6e90\u3002\u60a8\u7684\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u7528\u5b8c\u5806\u6808\u7a7a\u95f4\uff0c\u4ece\u800c\u5bfc\u81f4\u201c\u5806\u6808\u6ea2\u51fa\u201d\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u8fd9\u5c31\u662f\u7f16\u8bd1\u5668\u53ea\u8981\u6709\u53ef\u80fd\u5c31\u4f1a\u5c06\u9012\u5f52\u8f6c\u6362\u4e3a\u8fed\u4ee3\u7684\u539f\u56e0\u3002\u5982\u679c\u51fd\u6570\u662f\u5c3e\u9012\u5f52\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u9012\u5f52\u8c03\u7528\u662f\u51fd\u6570\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8c03\u7528\uff0c\u5219\u59cb\u7ec8\u662f\u53ef\u80fd\u7684\u3002\u5c3e\u9012\u5f52\u51fd\u6570\u4e2d\u4e0d\u5141\u8bb8\u5bf9\u9012\u5f52\u8c03\u7528\u7ed3\u679c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\n\u5728\u6211\u4eec\u7684show1\u5b9e\u73b0\u4e2d\uff0c\u8fd9\u663e\u7136\u6ca1\u6709\u53d1\u751f\uff1a\u5728\u8fdb\u884c\u9012\u5f52\u8c03\u7528\u4ee5\u904d\u5386\u5de6\u5b50\u6811\u4e4b\u540e\uff0c\u6211\u4eec\u4ecd\u7136\u9700\u8981\u8fdb\u884c\u53e6\u4e00\u6b21\u8c03\u7528\u6765\u904d\u5386\u53f3\u5b50\u6811\uff0c\u5e76\u4e14\u4e24\u4e2a\u7ed3\u679c\u5fc5\u987b\u4e0e\u8282\u70b9\u7684\u5185\u5bb9\u8fde\u63a5\u5728\u4e00\u8d77\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u51fd\u6570\u5f0f\u7f16\u7a0b\u95ee\u9898\u3002\u5728\u4ee5\u8fed\u4ee3\u4e3a\u89c4\u5219\u7684\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\uff0c\u6811\u904d\u5386\u4ecd\u7136\u662f\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u6570\u636e\u7ed3\u6784\u672c\u8eab\u662f\u9012\u5f52\u7684\u3002\u5b9e\u73b0\u975e\u9012\u5f52\u6811\u904d\u5386\u66fe\u7ecf\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u9762\u8bd5\u95ee\u9898\uff0c\u4f46\u89e3\u51b3\u65b9\u6848\u603b\u662f\u663e\u5f0f\u5730\u5b9e\u73b0\u60a8\u81ea\u5df1\u7684\u5806\u6808(\u6211\u4eec\u5c06\u5728\u672c\u6587\u7684\u672b\u5c3e\u770b\u5230\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684)\u3002\n\u6709\u4e00\u4e2a\u4f7f\u7528\u8fde\u7eed\u4f20\u9012\u6837\u5f0f(CPS)\u4f7f\u51fd\u6570\u5c3e\u9012\u5f52\u7684\u6807\u51c6\u8fc7\u7a0b\u3002\u60f3\u6cd5\u5f88\u7b80\u5355\uff1a\u5982\u679c\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\u6709\u95ee\u9898\uff0c\u5c31\u8ba9\u6211\u4eec\u8c03\u7528\u7684\u51fd\u6570\u6765\u505a\u3002\u8fd9\u4e2a\u201c\u8981\u505a\u7684\u4e8b\u201d\u53eb\u505a\u5ef6\u7eed\u3002\u6211\u4eec\u6b63\u5728\u8c03\u7528\u7684\u51fd\u6570\u5c06Continue\u4f5c\u4e3a\u53c2\u6570\uff0c\u5f53\u5b83\u5b8c\u6210\u5176\u5de5\u4f5c\u65f6\uff0c\u5b83\u5c06\u4f7f\u7528\u7ed3\u679c\u8c03\u7528\u5b83\u3002\u5ef6\u7eed\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u56e0\u6b64CPS\u8f6c\u6362\u7684\u51fd\u6570\u5fc5\u987b\u662f\u9ad8\u9636\u7684\uff1a\u5b83\u4eec\u5fc5\u987b\u63a5\u53d7\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u3002\u901a\u5e38\uff0c\u5ef6\u7eed\u662f\u4f7f\u7528lambdas\u73b0\u573a\u5b9a\u4e49\u7684\u3002\n\u4e0b\u9762\u662fCPS\u8f6c\u6362\u540e\u7684\u6811\u904d\u5386\u3002\u5b83\u4e0d\u662f\u8fd4\u56de\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u63a5\u53d7\u5ef6\u7eedk\uff0c\u8fd9\u662f\u4e00\u4e2a\u63a5\u53d7\u5b57\u7b26\u4e32\u5e76\u4ea7\u751f\u7c7b\u578ba\u7684\u6700\u7ec8\u7ed3\u679c\u7684\u51fd\u6570\u3002\nShow2\uff1a\uff1atree-&gt\uff1b(String-&gt\uff1ba)-&gt\uff1ba show2(\u53f6s)k=k s show2(Node Lft S Rgt)k=show2 lft(\\ls-&gt\uff1bshow2 Rgt(\\r-&gt\uff1bk(ls++s++rs)\n\u5982\u679c\u6811\u53ea\u662f\u4e00\u7247\u6811\u53f6\uff0cshow2\u7528\u5b58\u50a8\u5728\u6811\u53f6\u4e2d\u7684\u5b57\u7b26\u4e32\u8c03\u7528Continue\u3002\n\u5982\u679c\u6811\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u5219show2\u9012\u5f52\u5730\u8c03\u7528\u81ea\u8eab\u4ee5\u8f6c\u6362\u5de6\u5b50lft\u3002\u8fd9\u662f\u4e00\u4e2a\u5c3e\u90e8\u8c03\u7528\uff0c\u4e0d\u4f1a\u5bf9\u5176\u7ed3\u679c\u505a\u66f4\u591a\u64cd\u4f5c\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5176\u4f59\u7684\u5de5\u4f5c\u88ab\u6253\u5305\u5230lambda\u4e2d\uff0c\u5e76\u4f5c\u4e3ashow2\u7684\u5ef6\u7eed\u4f20\u9012\u3002\u8fd9\u5c31\u662fLambda\u3002\n\u5c06\u4f7f\u7528\u904d\u5386\u5de6\u5b50\u5bf9\u8c61\u7684\u7ed3\u679c\u8c03\u7528\u6b64lambda\u3002\u7136\u540e\uff0c\u5b83\u5c06\u4f7f\u7528\u6b63\u786e\u7684\u5b50\u7ea7\u548c\u53e6\u4e00\u4e2alambda\u8c03\u7528show2\u3002\n\u518d\u8bf4\u4e00\u6b21\uff0c\u8fd9\u662f\u4e00\u6b21\u5c3e\u90e8\u53ec\u5524\u3002\u8fd9\u4e2alambda\u9700\u8981\u7684\u5b57\u7b26\u4e32\u662f\u904d\u5386\u6b63\u786e\u7684\u5b50\u7ea7\u7684\u7ed3\u679c\u3002\u5b83\u8fde\u63a5\u5de6\u8fb9\u7684\u5b57\u7b26\u4e32\u3001\u6765\u81ea\u5f53\u524d\u8282\u70b9\u7684\u5b57\u7b26\u4e32\u548c\u53f3\u8fb9\u7684\u5b57\u7b26\u4e32\uff0c\u5e76\u7528\u5b83\u8c03\u7528\u539f\u59cb\u7684\u5ef6\u7eedk\u3002\n\u6700\u540e\uff0c\u4e3a\u4e86\u8f6c\u6362\u6574\u4e2a\u6811t\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5ef6\u7eed\u8c03\u7528show2\uff0c\u8be5\u5ef6\u7eed\u63a5\u53d7\u5e76\u7acb\u5373\u8fd4\u56de\u6700\u7ec8\u7ed3\u679c\u3002\n\u4f5c\u4e3a\u5ef6\u7eed\uff0clambdas\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e4b\u5904\u3002\u53ef\u4ee5\u7528\u547d\u540d\u51fd\u6570\u66ff\u6362\u5b83\u4eec\u3002\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0clambda\u53ef\u4ee5\u9690\u5f0f\u5730\u4ece\u5176\u73af\u5883\u4e2d\u6355\u83b7\u503c\u3002\u547d\u540d\u51fd\u6570\u5fc5\u987b\u663e\u5f0f\u6355\u83b7\u5b83\u4eec\u3002\u6211\u4eec\u5728CPS\u8f6c\u6362\u7684\u904d\u5386\u4e2d\u4f7f\u7528\u7684\u4e09\u4e2alambda\u53ef\u4ee5\u66ff\u6362\u4e3a\u4e09\u4e2a\u547d\u540d\u51fd\u6570\uff0c\u6bcf\u4e2a\u51fd\u6570\u90fd\u5e26\u6709\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u8868\u793a\u4ece\u73af\u5883\u6355\u83b7\u7684\u503c\uff1a\n\u5b8c\u6210s=s\u4e0b\u4e00\u4e2a(s\uff0crgt\uff0ck)ls=show3 rgt(conc(ls\uff0cs\uff0ck))conc(ls\uff0cs\uff0ck)rs=k(ls++s++rs)\u3002\n\u5b8c\u6210\u7684\u7b2c\u4e00\u4e2a\u51fd\u6570\u662f\u6807\u8bc6\u51fd\u6570\uff0c\u5b83\u5f3a\u5236\u5c06\u6cdb\u578b\u7c7b\u578ba\u7f29\u5c0f\u4e3a\u5b57\u7b26\u4e32\u3002\nShow3\uff1a\uff1atree-&gt\uff1b(String-&gt\uff1ba)-&gt\uff1ba show3(\u53f6s)k=k s show3(Node Lft S Rgt)k=show3 lft(NEXT(s\uff0cRgt\uff0ck))show t=show3 t Done\u3002\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5f00\u59cb\u628a\u5b83\u4e0e\u524d\u9762\u8ba8\u8bba\u7684\u4f34\u968f\u5b9a\u7406\u8054\u7cfb\u8d77\u6765\u3002\u6211\u4eec\u521a\u624d\u5b9a\u4e49\u7684\u4e09\u4e2a\u51fd\u6570Done\u3001Next\u548cConc\u7ec4\u6210\u4e86\u8fd9\u4e2a\u7cfb\u5217\u3002\n\u5b83\u4eec\u662f\u4e24\u4e2a\u53c2\u6570\u6216\u4e00\u5bf9\u53c2\u6570\u7684\u51fd\u6570\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u8868\u793a\u5bf9\u8c61\uff0c\u5b83\u662f\u89e3\u51b3\u65b9\u6848\u96c6\u7684\u4e00\u90e8\u5206\u3002\u5b83\u4e0e\u95ed\u5305\u6355\u83b7\u7684\u73af\u5883\u76f8\u5bf9\u5e94\u3002\u8fd9\u4e09\u4e2a\u5206\u522b\u662f\u3002\n\u6240\u6709\u4e09\u4e2a\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u90fd\u662fString\u7c7b\u578b\uff0c\u8fd4\u56de\u7c7b\u578b\u4e5f\u662fString\uff0c\u56e0\u6b64\uff0c\u6839\u636eFreyd\u5b9a\u7406\uff0c\u6211\u4eec\u6b63\u5728\u5b9a\u4e49\u51fd\u6570\u5bf9\u8c61\uff0c\u5176\u4e2d\u662fString\uff0c\u4e5f\u662fString\u3002\n\u8fd9\u91cc\u662f\u6709\u8da3\u7684\u90e8\u5206\uff1a\u6211\u4eec\u53ef\u4ee5\u7528\u89e3\u51b3\u65b9\u6848\u96c6\u7684\u5143\u7d20\u7684\u4f59\u79ef\u8fd1\u4f3c\u5b83\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u901a\u7528\u51fd\u6570\u7c7b\u578bString-&gt\uff1bstring\u3002\u8fd9\u91cc\uff0cSUM\u7c7b\u578b\u7684\u4e09\u4e2a\u7ec4\u4ef6\u5bf9\u5e94\u4e8e\u6211\u4eec\u7684\u4e09\u4e2a\u51fd\u6570\u6355\u83b7\u7684\u73af\u5883\u3002\n\u52a0\u6cd5\u8fd0\u7b97\u7684COUNIT\u7531\u6b64SUM\u7c7b\u578b\u7684\u51fd\u6570\u8fd1\u4f3c\uff0c\u8be5\u51fd\u6570\u4e0e\u4e00\u4e2a\u5b57\u7b26\u4e32\u914d\u5bf9\uff0c\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\nApply\uff1a\uff1akont-&gt\uff1bstring-&gt\uff1bstring Apply Done s=s Apply(Next S Rgt K)ls=show4 Rgt(Conc Ls S K)Apply(Conc Ls S K)rs=Apply k(ls++s++rs)\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u6b64SUM\u7c7b\u578b\uff0c\u800c\u4e0d\u662f\u5c06\u4e09\u4e2a\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u4f20\u9012\u7ed9\u6211\u4eec\u7684\u9ad8\u9636CPS\u904d\u5386\nShow4\uff1a\uff1atree-&gt\uff1bkont-&gt\uff1bstring show4(\u53f6s)k=\u5e94\u7528k s show4(Node Lft S Rgt)k=show4 lft(\u4e0b\u4e00\u4e2as Rgt k)\u3002\n\u901a\u8fc7\u7528Apply\u51fd\u6570\u914d\u5907\u7684\u6570\u636e\u7c7b\u578b\u66ff\u6362\u5b83\u4eec\u7684\u51fd\u6570\u53c2\u6570\uff0c\u6211\u4eec\u5220\u9664\u4e86\u6240\u6709\u9ad8\u9636\u51fd\u6570\u3002\u5728\u51e0\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u6709\u5229\u7684\u3002\u5728\u8fc7\u7a0b\u5316\u8bed\u8a00\u4e2d\uff0c\u53bb\u51fd\u6570\u5316\u53ef\u4ee5\u7528\u6765\u7528\u5faa\u73af\u4ee3\u66ff\u9012\u5f52\u3002\u4e8b\u5b9e\u4e0a\uff0c\u53ef\u4ee5\u5c06Kont\u6570\u636e\u7ed3\u6784\u89c6\u4e3a\u7528\u6237\u5b9a\u4e49\u7684\u5806\u6808\uff0c\u7279\u522b\u662f\u5728\u5c06\u5176\u91cd\u5199\u4e3a\u5217\u8868\u7684\u60c5\u51b5\u4e0b\u3002\n\u5728\u8fd9\u91cc\uff0cDone\u88ab\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u5217\u8868\uff0cNext\u548cconc\u4e00\u8d77\u5bf9\u5e94\u4e8e\u5c06\u4e00\u4e2a\u503c\u63a8\u5165\u5806\u6808\u3002\n\u5728Haskell\u4e2d\uff0c\u7f16\u8bd1\u5668\u6267\u884c\u5c3e\u9012\u5f52\u4f18\u5316\uff0c\u4f46\u53bb\u529f\u80fd\u5316\u5728\u5b9e\u73b0\u5206\u5e03\u5f0f\u7cfb\u7edf\u6216Web\u670d\u52a1\u5668\u65f6\u53ef\u80fd\u4ecd\u7136\u6709\u7528\u3002\u4efb\u4f55\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u4f20\u9012\u51fd\u6570\u65f6\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u5c06\u5176\u66ff\u6362\u4e3a\u6613\u4e8e\u5e8f\u5217\u5316\u7684\u6570\u636e\u7c7b\u578b\u3002\n(\u5728C++\u4e2d)\u60a8\u53ef\u4ee5\u5c06\u51fd\u6570\u89c6\u4e3a\u4e34\u65f6\u7c7b\u5b9e\u4f8b-\u53ea\u6709\u4e00\u4e2a\u65b9\u6cd5\u7684\u7c7b\u3002\u56e0\u6b64\uff0c\u8c03\u7528\u51fd\u6570\u4e0e\u6267\u884c\u7c7b\u5b9e\u4f8b\u5316\u548c\u8c03\u7528\u65b9\u6cd5\u975e\u5e38\u76f8\u4f3c\u3002", "note_en": "The main idea of functional programming is to treat functions like any other data types. In particular, we want to be able to pass functions as arguments to other functions, return them as values, and store them in data structures. But what kind of data type is a function? It\u2019s a type that, when paired with another piece of data called the argument, can be passed to a function called  apply to produce the result.\n  In practice, function application is implicit in the syntax of the language. But, as we will see, even if your language doesn\u2019t support higher-order functions, all you need is to roll out your own  apply.\n But where do these function objects, arguments to  apply, come from; and how does the built-in  apply know what to do with them?\n When you\u2019re implementing a function, you are, in a sense, telling  apply what to do with it\u2013what code to execute. You\u2019re implementing individual chunks of  apply. These chunks are usually scattered all over your program, sometimes anonymously in the form of lambdas.\n We\u2019ll talk about program transformations that introduce more functions, replace anonymous functions with named ones, or turn some functions into data types, without changing program semantics. The main advantage of such transformations is that they may improve performance, sometimes drastically so; or support distributed computing.\n  As usual, we look to category theory to provide theoretical foundation for defining function objects. It turns out that we are able to do functional programming because the category of types and functions is  cartesian closed. The first part,  cartesian, means that we can define product types. In Haskell, we have the pair type  (a, b) built into the language. Categorically, we would write it as  . Product is functorial in both arguments so, in particular, we can define a functor\n     defines the function type   (a.k.a., the exponential object  ). The existence of this adjunction is what makes a category  closed. You may recognize these two functors as, respectively, the writer and the reader functor. When the parameter   is restricted to monoids, the writer functor becomes a monad (the reader is already a monad).\n      curry :: ((c, a) -&gt; d) -&gt; (c -&gt; (a -&gt; d))\runcurry :: (c -&gt; (a -&gt; d)) -&gt; ((c, a) -&gt; d)\n      In my previous blog post I discussed the Freyd\u2019s Adjoint Functor theorem from the categorical perspective. Here, I\u2019m going to try to give it a programming interpretation. Also, the original theorem was formulated in terms of finding the left adjoint to a given functor. Here, we are interested in finding the right adjoint to the product functor. This is not a problem, since every construction in category theory can be dualized by reversing the arrows. So instead of considering the comma category  , we\u2019ll work with the comma category  . Its objects are pairs  , in which   is a morphism\n   This is the general picture but, in our case, we are dealing with a single category, and   is an endofunctor. We can implement the objects of our comma category in Haskell\n     We are trying to construct a function object representing functions  a-&gt;d, so what role does  c play in all of this? To understand that, you have to take into account that a function object can be used to describe closures: functions that capture values from their environment. The type  c represents those captured values. We\u2019ll see this more explicitly later, when we talk about defunctionalizing closures.\n Our comma category is a category of all closures that go from   to   while capturing all possible environments. The function object we are constructing is essentially a sum of all these closures, except that some of them are counted multiple times, so we need to perform some identifications. That\u2019s what morphisms are for.\n The morphisms of the comma category are morphisms   in   that make the following triangles in   commute.\n  Unfortunately, commuting diagrams cannot be expressed in Haskell. The closest we can get is to say that a morphism from\n     c1 = Comma c f\rf :: (c, a) -&gt; d\rc2 = Comma c&#39; g\rg :: (c&#39;, a) -&gt; d\n   Here,  bimap h id is the lifting of  h to the functor  . More explicitly\n  As we are interpreting  c as the environment in which the closure is defined, the question is: does  f use all of the information encoded in  c or just a part of it? If it\u2019s just a part, then we can factor it out. For instance, consider a lambda that captures an integer, but it\u2019s only interested in whether the integer is even or odd. We can replace this lambda with one that captures a Boolean, and use the function  even to transform the environment.\n The next step in the construction is to define the projection functor from the comma category   back to   that forgets the   part and just keeps the object\n  We use this functor to define a diagram in  . Now, instead of taking its limit, as we did in the previous installment, we\u2019ll take the colimit of this diagram. We\u2019ll use this colimit to define the action of the right adjoint functor   on  .\n  In our case, the forgetful functor discards the function part of  Comma a d c, keeping only the environment  . This means that, as long as  d is not  Void, we are dealing with a gigantic diagram that encompasses all objects in our category of types. The colimit of this diagram is a gigantic coproduct of everything, modulo identifications introduced by morphisms of the comma category. But these identifications are crucial in pruning out redundant closures. Every lambda that uses only part of the information from the captured environment can be identified with a simpler lambda that uses a simplified environment.\n For illustration, consider a somewhat extreme case of constructing the function object  , or   (  to the power of the terminal object). This object should be isomorphic to  . Let\u2019s see how this works: The terminal object   is the unit of the product, so\n  so the comma category   is just the slice category   of arrows to  . It so happens that this category has the terminal object  . The colimit of a diagram that has a terminal object is that terminal object. So, indeed, in this case, our construction produces a function object that is isomorphic to  .\n  Intuitively, given a lambda that captures a value of type   from the environment and returns a  , we can trivially factor it out, using this lambda to transform the environment for   to   and then apply the identity on  . The latter corresponds to the comma category object  , and the forgetful functor maps it to  .\n It\u2019s instructive to run a few more examples to get the hang of it. For instance, the function object  Bool-&gt;d can be constructed by considering closures of the type\n   h :: c -&gt; (d, d)\rh c = (f (c, True), f (c, False))\n  g :: ((d, d), Bool) -&gt; d\rg ((d1, d2), b) = if b then d1 else d2\n     We are particularly interested in the counit of the adjunction. Its component at   is a morphism\n    In fact, it is the terminal object in that category. You can see that because for any other object   there is a morphism   that makes the following triangle commute:\n  This morphisms   is a leg in the terminal cocone that defines  . We know for sure that   is in the base of that cocone, because it\u2019s the projection   of  .\n  To get some insight into the construction of the function object, imagine that you can enumerate the set of all possible environments  . The comma category   would then consist of pairs  . The coproduct of all those environments is a good candidate for the function object  . Indeed, let\u2019s try to define a counit for it:\n    and the fact that the mapping out of a sum is the product of mappings. The right hand side can be constructed from the morphisms of the comma category.\n So the object   satisfies at least one requirement of the function object: there is an implementation of  apply for it. It is highly redundant, though. This is why, instead of the coproduct, we used the colimit in our construction of the function object. Also, we ignored the size issues.\n  As we discussed before, this construction doesn\u2019t work in general because of size issues: the comma category is not necessarily small, and the colimit might not exist.\n To address this problems, we have previously defined small  solution sets. In the case of the right adjoint, a solution set is a family of objects that is  weakly terminal in  . These are pairs   that, among themselves, can factor out any\n  It means that we can always find an index   and a morphism   to satisfy that equation. Every   might require a different   and   to factor through but, for any  , we are guaranteed to always find a pair.\n  Once we have a complete solution set, the right adjoint   is constructed by first forming a coproduct of all the   and then using a coequalizer to construct one terminal object.\n What is really interesting is that, in some cases, we can just use the coproduct of the solution set,   to approximate the adjoint (thus skipping the equalizer part).\n The idea is that, in a particular program, we don\u2019t need to represent all possible function types, just a (small) subset of those. We are also not particularly worried about uniqueness: it\u2019s no problem if the same function ends up with multiple syntactic representations.\n Let\u2019s reformulate Freyd\u2019s construction of the function object in programming terms. The solution set is the set of types   and functions   such that, for any function   that is of interest in our program (for instance, used as an argument to another function) there exists an   and a function   such that   can be rewritten as   In other words, every function of interest can be replaced by one of the solution-set functions. The environment for this standard function can be always extracted from the environment of the more general function.\n  A particular application of higher order functions shows up in the context of continuation passing transformation. Let\u2019s look at a simple example. We are going to implement a function that traverses a binary tree containing strings, and concatenates them all into one string. Here\u2019s the tree\n   show1 :: Tree -&gt; String\rshow1 (Leaf s) = s\rshow1 (Node l s r) =\r show1 l ++ s ++ show1 r\n  tree :: Tree\rtree = Node (Node (Leaf &#34;1 &#34;) &#34;2 &#34; (Leaf &#34;3 &#34;))\r &#34;4 &#34; \r (Leaf &#34;5 &#34;)\n  There is just one problem: recursion consumes the runtime stack, which is usually a limited resource. Your program may run out of stack space resulting in the \u201cstack overflow\u201d runtime error. This is why the compiler will turn recursion into iteration, whenever possible. And it is always possible if the function is  tail recursive, that is, the recursive call is the  last call in the function. No operation on the result of the recursive call is permitted in a tail recursive function.\n This is clearly not happening in our implementation of  show1: After the recursive call is made to traverse the left subtree, we still have to make another call to traverse the right tree, and the two results must be concatenated with the contents of the node.\n Notice that this is not just a functional programming problem. In an imperative language, where iteration is the rule, tree traversal is still implemented using recursion. That\u2019s because the data structure itself is recursive. It used to be a common interview question to implement non-recursive tree traversal, but the solution is always to explicitly implement your own stack (we\u2019ll see how it\u2019s done at the end of this post).\n There is a standard procedure to make functions tail recursive using continuation passing style (CPS). The idea is simple: if there is stuff to do with the result of a function call, let the function we\u2019re calling do it instead. This \u201cstuff to do\u201d is called a continuation. The function we are calling takes the continuation as an argument and, when it finishes its job, it calls it with the result. A continuation is a function, so CPS-transformed functions have to be higher-order: they must accept functions as arguments. Often, the continuations are defined on the spot using lambdas.\n Here\u2019s the CPS transformed tree traversal. Instead of returning a string, it accepts a continuation  k, a function that takes a string and produces the final result of type  a.\n show2 :: Tree -&gt; (String -&gt; a) -&gt; a\rshow2 (Leaf s) k = k s\rshow2 (Node lft s rgt) k =\r show2 lft (\\ls -&gt; \r show2 rgt (\\rs -&gt; \r k (ls ++ s ++ rs)))\n If the tree is just a leaf,  show2 calls the continuation with the string that\u2019s stored in the leaf.\n If the tree is a node,  show2 calls itself recursively to convert the left child  lft. This is a tail call, nothing more is done with its result. Instead, the rest of the work is packaged into a lambda and passed as a continuation to  show2. This is the lambda\n  This lambda will be called with the result of traversing the left child. It will then call  show2 with the right child and another lambda\n  Again, this is a tail call. This lambda expects the string that is the result of traversing the right child. It concatenates the left string, the string from the current node, and the right string, and calls the original continuation  k with it.\n Finally, to convert the whole tree  t, we call  show2 with a trivial continuation that accepts the final result and immediately returns it.\n  There is nothing special about lambdas as continuations. It\u2019s possible to replace them with named functions. The difference is that a lambda can implicitly capture values from its environment. A named function must capture them explicitly. The three lambdas we used in our CPS-transformed traversal can be replaced with three named functions, each taking an additional argument representing the values captured from the environment:\n done s = s\rnext (s, rgt, k) ls = show3 rgt (conc (ls, s, k))\rconc (ls, s, k) rs = k (ls ++ s ++ rs)\n The first function  done is an identity function, it forces the generic type  a to be narrowed down to  String.\n  show3 :: Tree -&gt; (String -&gt; a) -&gt; a\rshow3 (Leaf s) k = k s\rshow3 (Node lft s rgt) k =\r show3 lft (next (s, rgt, k))\r\rshow t = show3 t done\n We can now start making the connection with the earlier discussion of the adjoint theorem. The three functions we have just defined,  done,  next, and  conc, form the family\n  They are functions of two arguments, or a pair of arguments. The first argument represents the object  , part of the solution set. It corresponds to the environment captured by the closure. The three   are, respectively\n   The second argument of all three functions is of the type  String, and the return type is also  String so, according to Freyd\u2019s theorem, we are in the process of defining the function object  , where   is  String and   is  String.\n  Here\u2019s the interesting part: instead of defining the general function type  String-&gt;String, we can approximate it with the coproduct of the elements of the solution set. Here, the three components of the sum type correspond to the environments captured by our three functions.\n  The counit of the adjunction is approximated by a function from this sum type paired with a  String, returning a  String\n apply :: Kont -&gt; String -&gt; String\rapply Done s = s\rapply (Next s rgt k) ls = show4 rgt (Conc ls s k)\rapply (Conc ls s k) rs = apply k (ls ++ s ++ rs)\n Rather than passing one of the three functions to our higher-order CPS traversal, we can pass this sum type\n show4 :: Tree -&gt; Kont -&gt; String\rshow4 (Leaf s) k = apply k s\rshow4 (Node lft s rgt) k = \r show4 lft (Next s rgt k)\n   We have gotten rid of all higher-order functions by replacing their function arguments with a data type equipped with the  apply function. There are several situations when this is advantageous. In procedural languages, defunctionalization may be used to replace recursion with loops. In fact, the  Kont data structure can be seen as a user-defined stack, especially if it\u2019s rewritten as a list.\n  Here,  Done was replaced with an empty list and  Next and  Conc together correspond to  pushing a value on the stack.\n In Haskell, the compiler performs tail recursion optimization, but defunctionalization may still be useful in implementing distributed systems, or web servers. Any time we need to pass a function between a client and a server, we can replace it by a data type that can be easily serialized.\n    (In C++) you can look at a function as being a transient class instance \u2013 a class with one method. Calling a function is then much the same as doing a class instantiation and calling the method.", "posttime": "2020-08-05 17:27:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u529f\u80fd\u5316,freyd,\u51fd\u6570", "title": "\u53bb\u529f\u80fd\u5316\u4e0e\u5f17\u83b1\u5fb7\u5b9a\u7406", "title_en": "Defunctionalization and Freyd\u2019s Theorem", "transed": 1, "url": "https://bartoszmilewski.com/2020/08/03/defunctionalization-and-freyds-theorem/", "via": "", "real_tags": ["\u529f\u80fd\u5316", "freyd", "\u51fd\u6570"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1016362, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728PHP\u7f16\u7a0b\u9886\u57df\uff0c\u4e00\u4e9b\u4eba(\u5728\u4ed6\u4eec\u7684\u4e66\u4e2d\u548c\u7f51\u7ad9\u4e0a)\u5c06\u4e00\u7ec4\u8d8b\u52bf\u5927\u91cf\u5ba3\u4f20\u4e3a\u201c\u73b0\u4ee3PHP\u201d\uff0c\u800c\u6240\u6709\u5176\u4ed6\u65b9\u6cd5\u90fd\u88ab\u8ba4\u4e3a\u662f\u843d\u540e\u3001\u611a\u8822\u6216\u5b8c\u5168\u9519\u8bef\u7684\u3002\n\u8fd9\u4e9b\u4eba\u4f3c\u4e4e\u4e0d\u77e5\u75b2\u5026\u5730\u8ba9\u5176\u4ed6\u4eba\u6548\u4eff\u4ed6\u4eec\u7684\u505a\u4e8b\u65b9\u5f0f\u3002\n\u521b\u5efa\u6b64\u7f51\u7ad9\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u5448\u73b0\u5bf9PHP\u7f16\u7a0b\u7684\u52a1\u5b9e\u89c2\u70b9\u3002\u7531\u7ecf\u9a8c\u548c\u5b9e\u9645\u7ed3\u679c\u51b3\u5b9a\u7684\u89c2\u70b9\uff0c\u800c\u4e0d\u662f\u6d41\u884c\u7684\u8d8b\u52bf\u3001\u7406\u8bba\u6216\u5b66\u672f\u6559\u6761\u3002\n\u7f51\u7ad9PHP-\u9519\u8bef\u7684\u65b9\u5f0f\u662f\u4e00\u4e2a\u6d3b\u751f\u751f\u7684\u6587\u6863\uff0c\u5e76\u5c06\u7ee7\u7eed\u66f4\u65b0\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u5f53\u5b83\u53d8\u5f97\u53ef\u7528\u65f6\u3002\n\u7f16\u7a0b\u89c4\u5219\u548c\u51c6\u5219\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4eec\u901a\u5e38\u53ea\u5728\u7279\u5b9a\u4e0a\u4e0b\u6587\u4e2d\u670d\u52a1\u4e8e\u67d0\u4e2a\u76ee\u7684\u3002\u65ad\u7ae0\u53d6\u4e49\uff0c\u4e00\u6761\u597d\u7684\u89c4\u5219\u53ef\u80fd\u4f1a\u53d8\u6210\u4e00\u6761\u53ef\u6015\u7684\u89c4\u5219\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6bcf\u6761\u597d\u7684\u89c4\u5219\u5728\u8d70\u5411\u6781\u7aef\u65f6\u90fd\u4f1a\u53d8\u5f97\u4e0d\u597d\u3002\n\u7406\u89e3\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7531\u8bb8\u591a\u4e0d\u540c\u7684\u4eba\u63d0\u51fa\u7684\u8bb8\u591a\u8f6f\u4ef6\u5f00\u53d1\u539f\u5219\u548c\u89c4\u5219\u7ecf\u5e38\u4f1a\u5728\u6781\u7aef\u5206\u5b50\u624b\u4e2d\u88ab\u6ee5\u7528\u3002\n\u7ecf\u9a8c\u544a\u8bc9\u6211\u4eec\uff0c\u6ee5\u7528\u4e00\u822c\u89c4\u5219\u548c\u51c6\u5219\u603b\u662f\u4f1a\u5bfc\u81f4\u590d\u6742\u5316\u3001\u7f3a\u4e4f\u5b89\u5168\u6027\u3001\u5bb9\u6613\u51fa\u9519\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u751a\u81f3\u662f\u5f7b\u5e95\u7684\u707e\u96be\u3002\nKISS\u539f\u5219\u662f\u201c\u4fdd\u6301\u7b80\u5355\uff0c\u611a\u8822\u201d\u7684\u9996\u5b57\u6bcd\u7f29\u5199\uff0c\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u660e\u667a\u548c\u597d\u7684\u539f\u5219\uff0c\u88ab\u6709\u7ecf\u9a8c\u7684\u4eba\u666e\u904d\u8ba4\u4e3a\u662f\u975e\u5e38\u597d\u7684\u5efa\u8bae\u6765\u9075\u5faa\u3002\u4f46\u662f\uff0c\u5373\u4f7f\u662f\u8fd9\u4e2a\u4f1f\u5927\u7684\u539f\u5219\uff0c\u5982\u679c\u8d70\u5230\u6781\u7aef\uff0c\u4e5f\u4f1a\u5bf9\u9879\u76ee\u6784\u6210\u5371\u9669\u3002\u6709\u8fd9\u6837\u4e00\u79cd\u201c\u592a\u7b80\u5355\u201d\u7684\u4e1c\u897f\uff0c\u5bfc\u81f4\u7f3a\u4e4f\u6240\u9700\u7684\u529f\u80fd\u3002\n\u5728PHP\u793e\u533a\uff0c\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u8d8b\u52bf\u5df2\u7ecf\u6210\u4e3a\u5f00\u53d1Web\u5e94\u7528\u7a0b\u5e8f\u7684\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\uff0c\u90a3\u5c31\u662f\u4f7f\u7528\u6d41\u884c\u7684\u901a\u7528\u6846\u67b6\u3002\n\u8fd9\u4e00\u8d8b\u52bf\u7684\u51fa\u73b0\u548c\u6d41\u884c\u5e76\u4e0d\u662f\u56e0\u4e3a\u5b83\u4ee5\u4efb\u4f55\u65b9\u5f0f\u6539\u8fdb\u4e86\u5f00\u53d1\u8fc7\u7a0b\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u662f\u56e0\u4e3a\u4ece\u6280\u672f\u548c\u4f53\u7cfb\u7ed3\u6784\u7684\u89d2\u5ea6\u6765\u770b\u5b83\u662f\u6b63\u786e\u7684\u3002\u8fd9\u4e00\u8d8b\u52bf\u4e4b\u6240\u4ee5\u6d41\u884c\u8d77\u6765\uff0c\u662f\u56e0\u4e3a\u4e00\u4e9b\u6846\u67b6\u5f00\u53d1\u4eba\u5458\u7528\u8bf8\u5982\u201c\u4e0d\u8981\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\uff01\u201d\u4e4b\u7c7b\u7684\u8bd7\u8282\uff0c\u6210\u529f\u5730\u7528\u4ed6\u4eec\u53cd\u5bf9\u7f16\u7a0b\u7684\u8bba\u6218\u5f7b\u5e95\u626b\u9664\u4e86\u5927\u4f17\u3002\u8fd8\u6709\u201c\u4e0d\u8981\u81ea\u5df1\u52a8\u624b\uff0c\u522b\u4eba\u6bd4\u4f60\u6280\u672f\u597d\u201d\u3002\n\u4eca\u5929\u7684\u8bb8\u591a\u7a0b\u5e8f\u5458\u5b8c\u5168\u5ffd\u89c6\u4e86\u58f0\u97f3\u7f16\u7a0b\u7684\u57fa\u672c\u539f\u5219\uff0c\u4ed6\u4eec\u82b1\u8d39\u5927\u91cf\u65f6\u95f4\u5e7b\u60f3\u65b0\u7684\u590d\u6742\u5c42\u6b21\uff0c\u4ee5\u4fbf\u663e\u5f97\u66f4\u806a\u660e\u3001\u66f4\u9177\uff0c\u66f4\u5bb9\u6613\u88ab\u4ed6\u4eec\u8ba4\u4e3a\u662f\u540c\u9f84\u4eba\u7684\u4eba\u63a5\u53d7\u3002\n\u8fd9\u4e9b\u4eba\u4f3c\u4e4e\u75f4\u8ff7\u4e8e\u8ba9\u5176\u4ed6\u4eba\u6548\u4eff\u4ed6\u4eec\u7684\u201c\u505a\u4e8b\u65b9\u5f0f\u201d\uff0c\u6210\u4e3a\u67d0\u79cdPHP\u793e\u533a\u9886\u8896\uff0c\u8ba9\u5176\u4ed6\u4eba\u4f7f\u7528\u4ed6\u4eec\u6700\u65b0\u7684\u201c\u65f6\u9ae6\u201d\u5f00\u653e\u6e90\u7801\u5de5\u5177\uff0c\u4ee5\u81f3\u4e8e\u4ed6\u4eec\u5fd8\u8bb0\u4e86\u786e\u4fdd\u4ed6\u4eec\u63d0\u4f9b\u7684\u5efa\u8bae\u662f\u5065\u5168\u548c\u53ef\u9760\u7684\u3002\n\u5728\u8f6f\u4ef6\u884c\u4e1a\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5c06\u9884\u5efa\u623f\u5c4b\u4e0e\u901a\u7528\u6846\u67b6\u8fdb\u884c\u6bd4\u8f83\u3002\u4f7f\u7528\u901a\u7528\u6846\u67b6\u6784\u5efa\u8f6f\u4ef6\u5e76\u4e0d\u4f1a\u4f7f\u60a8\u6210\u4e3a\u7a0b\u5e8f\u5458\u6216\u7a0b\u5e8f\u5458\uff0c\u5c31\u50cf\u7ec4\u88c5\u9884\u5efa\u7684\u623f\u5c4b\u4e0d\u4f1a\u4f7f\u60a8\u6210\u4e3a\u6728\u5320\u4e00\u6837\u3002\n\u5e93\u88ab\u8ba4\u4e3a\u662f\u53ef\u91cd\u7528\u4ee3\u7801\u7684\u96c6\u5408\uff0c\u5c31\u50cfC\u6807\u51c6\u5e93\u6216Go\u6807\u51c6\u5e93\u4e00\u6837\u3002\u5b83\u7531\u4ee3\u7801\u7ec4\u6210\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06\u8fd9\u4e9b\u4ee3\u7801\u96c6\u6210\u5230\u60a8\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\uff0c\u800c\u4e0d\u4f1a\u5f3a\u5236\u6267\u884c\u4efb\u4f55\u9650\u5236\u6216\u7ea6\u675f\u3002\u5b83\u7531\u4e00\u5c0f\u6bb5\u4ee3\u7801\u7ec4\u6210\uff0c\u6bcf\u6bb5\u4ee3\u7801\u90fd\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u529f\u80fd\u3002\n\u6846\u67b6\u4e0d\u4ec5\u4ec5\u662f\u53ef\u91cd\u7528\u4ee3\u7801\u7684\u96c6\u5408\uff1a\u60a8\u4e0d\u80fd\u7b80\u5355\u5730\u4ece\u6846\u67b6\u4e2d\u63d0\u53d6\u4e00\u6bb5\u4ee3\u7801\u5e76\u5c06\u5176\u96c6\u6210\u5230\u60a8\u81ea\u5df1\u7684\u9879\u76ee\u4e2d\u3002\u6846\u67b6\u662f\u4e00\u4e2a\u5e2e\u52a9\u60a8\u6784\u5efa\u8f6f\u4ef6\u7684\u7cfb\u7edf\uff0c\u4f46\u540c\u65f6\u5b83\u8feb\u4f7f\u60a8\u5728\u6846\u67b6\u672c\u8eab\u7684\u9650\u5236\u548c\u7ea6\u675f\u4e0b\u5de5\u4f5c\u3002\u6846\u67b6\u672c\u8eab\u6709\u5f88\u591a\u76f8\u4e92\u4f9d\u8d56\u7684\u529f\u80fd\u3002\u4e00\u4ef6\u6ca1\u6709\u53e6\u4e00\u4ef6\u5c31\u4e0d\u80fd\u5de5\u4f5c\u3002\n\u5728Python\u548cRuby\u7684\u4e16\u754c\u91cc\uff0c\u4ece\u5934\u5f00\u59cb\u6784\u5efa\u7f51\u7ad9\u662f\u4e00\u4ef6\u4ee4\u4eba\u538c\u70e6\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3aPython\u548cRuby\u6700\u521d\u90fd\u4e0d\u662f\u7528\u6765\u6784\u5efa\u7f51\u7ad9\u7684\u3002\u56e0\u6b64\uff0cDjango\u548cRuby on rails\u7b49\u901a\u7528\u6846\u67b6\u5728\u7528\u8fd9\u4e9b\u8bed\u8a00\u6784\u5efa\u7f51\u7ad9\u65f6\u8fc5\u901f\u6d41\u884c\u8d77\u6765\u3002\n\u53e6\u4e00\u65b9\u9762\uff0cPHP\u6700\u521d\u662f\u7531Rasmus Lerdorf\u521b\u5efa\u7684\uff0c\u5b83\u662f\u4e00\u7ec4\u7528C\u7f16\u5199\u7684\u5de5\u5177\uff0c\u4f7f\u60a8\u80fd\u591f\u8f7b\u677e\u5feb\u901f\u5730\u5f00\u53d1\u52a8\u6001HTML\u3002\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0cPHP\u8fc7\u53bb\u662f\uff0c\u73b0\u5728\u4ecd\u7136\u662f\u4e00\u4e2a\u6846\u67b6\u3002\n\u4ece\u90a3\u65f6\u8d77\uff0cPHP\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u4eca\u5929\uff0cPHP\u4e0d\u4ec5\u4ec5\u53ef\u4ee5\u7528\u6765\u6784\u5efaHTML\u548c\u7f51\u7ad9\uff0c\u4f46\u5c06PHP\u672c\u8eab\u89c6\u4e3a\u4e00\u79cd\u6846\u67b6\u5e76\u4e0d\u662f\u9519\u8bef\u7684\u3002PHP\u672c\u8d28\u4e0a\u662f\u7528\u4e8e\u5f00\u53d1\u5b8c\u5168\u7528\u8fc7\u7a0b\u6027C\u7f16\u5199\u7684Web\u5e94\u7528\u7a0b\u5e8f\u7684\u62bd\u8c61\u5c42\u3002\n\u5728\u9879\u76ee\u4e2d\u4f7f\u7528\u5e93\u662f\u5f88\u81ea\u7136\u7684\u3002PHP\u672c\u8eab\u6346\u7ed1\u4e86\u4e00\u7ec4\u5e93\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5e93\u6765\u6269\u5c55\u60a8\u81ea\u5df1\u7684\u4ee3\u7801\u3002\u4f8b\u5982\uff0cPDO\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u7684\u5e93\uff0c\u5b83\u4e3a\u5728PHP\u4e2d\u8bbf\u95ee\u6570\u636e\u5e93\u63d0\u4f9b\u4e86\u4e00\u81f4\u7684\u63a5\u53e3\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u4f7f\u7528PHP\u4e4b\u4e0a\u7684\u6846\u67b6\u5219\u5b8c\u5168\u662f\u53e6\u4e00\u56de\u4e8b\u3002\n\u5f53\u60a8\u5728PHP\u4e2d\u4f7f\u7528\u6846\u67b6\u65f6\uff0c\u60a8\u9700\u8981\u5728\u53e6\u4e00\u4e2a\u62bd\u8c61\u5c42\u4e4b\u4e0a\u6dfb\u52a0\u4e00\u4e2a\u62bd\u8c61\u5c42\uff0c\u8fd9\u4e2a\u62bd\u8c61\u5c42\u4e00\u5f00\u59cb\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u4f9b\u60a8\u4f7f\u7528\u3002\u6846\u67b6\u63d0\u4f9b\u7684\u9644\u52a0\u62bd\u8c61\u5c42\u53ef\u80fd\u53ea\u662f\u7528\u6765\u5c06\u4ee3\u7801\u7ec4\u7ec7\u5230\u4e00\u7ec4\u9884\u5148\u56fa\u5b9a\u7684\u6a21\u5f0f\u4e2d\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u4f1a\u901a\u8fc7\u5c06\u6570\u767e\u4e2a\u751a\u81f3\u6570\u5343\u4e2a\u7c7b\u548c\u65b9\u6cd5\u4ea4\u7ec7\u6210\u4e00\u4e2a\u4f9d\u8d56\u7684\u5669\u68a6\u800c\u589e\u52a0\u66f4\u591a\u7684\u590d\u6742\u6027\uff0c\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u90fd\u662f\u5728\u5411\u60a8\u7684\u4ee3\u7801\u6dfb\u52a0\u4e0d\u9700\u8981\u7684\u590d\u6742\u6027\u5c42\uff01\n\u6240\u6709\u4f53\u9a8c\u90fd\u4ece\u754c\u9762\u5f00\u59cb\u3002\u754c\u9762\u4f53\u9a8c\u662f\u5e95\u5c42\u6280\u672f\u548c\u62bd\u8c61\u5c42\u6570\u91cf\u7684\u7ed3\u679c\u3002\u60a8\u4f7f\u7528\u7684\u62bd\u8c61\u8d8a\u591a\uff0c\u63a5\u53e3\u7684\u6548\u7387\u5c31\u8d8a\u4f4e\uff0c\u5e94\u7528\u7a0b\u5e8f\u5c31\u8d8a\u5bb9\u6613\u51fa\u9519\u3002\u62bd\u8c61\u7a0b\u5ea6\u8d8a\u9ad8\uff0c\u635f\u5931\u7684\u7ec6\u8282\u548c\u6548\u7387\u5c31\u8d8a\u591a\u3002\n\u6e05\u695a\u5730\u7406\u89e3\u8fd9\u4e00\u70b9\uff1a\u4efb\u4f55\u9879\u76ee\u4e2d\u7406\u60f3\u7684\u4ee3\u7801\u884c\u6570\u90fd\u662f\u5c3d\u53ef\u80fd\u5c11\u7684\uff0c\u540c\u65f6\u53c8\u5c3d\u53ef\u80fd\u6e05\u6670\u6613\u8bfb\uff01\n\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u9700\u8981\u901a\u7528\u7684\u6846\u67b6\u3002\u6ca1\u6709\u4eba\u6709\u666e\u904d\u7684\u95ee\u9898\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4ed6\u4eec\u8bd5\u56fe\u89e3\u51b3\u7684\u975e\u5e38\u5177\u4f53\u7684\u95ee\u9898\u3002\n\u4e00\u4e9b\u516c\u53f8\u5f00\u59cb\u542c\u5230\u5173\u4e8ePHP\u6846\u67b6\u7684\u7092\u4f5c\uff0c\u4ed6\u4eec\u5f00\u59cb\u4ed6\u4eec\u7684\u4e0b\u4e00\u4e2a\u9879\u76ee\u65f6\u4f7f\u7528\u4e86\u8fd9\u4e9b\u6d41\u884c\u7684\u901a\u7528\u6846\u67b6\u4e2d\u7684\u4e00\u4e2a\uff0c\u7ed3\u679c\u5374\u4ee5\u4e00\u573a\u707e\u96be\u544a\u7ec8\u3002\u4ed6\u4eec\u4e0d\u4ec5\u53d1\u73b0\u901a\u7528\u6846\u67b6\u5728\u89e3\u51b3\u4ed6\u4eec\u975e\u5e38\u5177\u4f53\u7684\u9700\u6c42\u65b9\u9762\u771f\u7684\u5f88\u5dee\uff0c\u800c\u4e14\u5728\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u4e0a\u4e5f\u6781\u5176\u7f13\u6162\u3002\u8fd9\u662f\u4e0d\u53ef\u80fd\u6269\u5927\u89c4\u6a21\u7684\uff0c\u7ed3\u679c\u4ed6\u4eec\u5f00\u59cb\u6495\u88c2\u6846\u67b6\uff0c\u4e0d\u987e\u4e00\u5207\u5730\u8bd5\u56fe\u62c9\u51fa\u6240\u6709\u4ed6\u4eec\u771f\u6b63\u4e0d\u9700\u8981\u7684\u4e1c\u897f\u3002\n\u51fa\u4e8e\u5bf9\u76f4\u63a5\u5b9e\u9645\u540e\u679c\u7684\u8003\u8651\u800c\u4e0d\u662f\u7531\u7406\u8bba\u6216\u6559\u6761\u51b3\u5b9a\u7684\u884c\u52a8\u6216\u653f\u7b56\u3002\n\u6211\u5bf9\u8c61\u7259\u5854\u7684\u8bbe\u8ba1\u548c\u8bbe\u8ba1\u6a21\u5f0f\u6709\u5f88\u5927\u7684\u8fc7\u654f\u3002Peter Norvig\uff0c\u5f53\u4ed6\u5728Harlequin\u65f6\uff0c\u4ed6\u505a\u4e86\u4e00\u7bc7\u5173\u4e8e\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5982\u4f55\u771f\u6b63\u6210\u4e3a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7f3a\u9677\u7684\u8bba\u6587\u3002\u627e\u4e00\u79cd\u66f4\u597d\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u4ed6\u8bf4\u7684\u5b8c\u5168\u6b63\u786e\u3002\u5d07\u62dc\u6a21\u5f0f\uff0c\u7136\u540e\u60f3\uff0c\u201c\u54e6\uff0c\u6211\u4f1a\u7528X\u6a21\u5f0f\u3002\u201d\n\u5728\u8f6f\u4ef6\u5de5\u7a0b\u4e2d\uff0c\u8bbe\u8ba1\u6a21\u5f0f\u662f\u5bf9\u8f6f\u4ef6\u8bbe\u8ba1\u4e2d\u5e38\u89c1\u95ee\u9898\u7684\u53ef\u91cd\u7528\u89e3\u51b3\u65b9\u6848\u3002\u8bbe\u8ba1\u6a21\u5f0f\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a\u4ee3\u7801\u7684\u5df2\u5b8c\u6210\u8bbe\u8ba1\u3002\u5b83\u662f\u5bf9\u5982\u4f55\u89e3\u51b3\u95ee\u9898\u7684\u63cf\u8ff0\u6216\u60f3\u6cd5\uff0c\u53ef\u4ee5\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u3002\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u6a21\u5f0f\u901a\u5e38\u663e\u793a\u7c7b\u6216\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u548c\u4ea4\u4e92\uff0c\u800c\u4e0d\u6307\u5b9a\u6240\u6d89\u53ca\u7684\u6700\u7ec8\u5e94\u7528\u7a0b\u5e8f\u7c7b\u6216\u5bf9\u8c61\u3002\nPHP\u652f\u6301\u547d\u4ee4\u5f0f\u3001\u51fd\u6570\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u3001\u8fc7\u7a0b\u6027\u548c\u53cd\u601d\u6027\u8303\u4f8b\u3002PHP\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u5de5\u5177\u7bb1\uff0c\u5305\u542b\u8bb8\u591a\u4e0d\u540c\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u591a\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u89e3\u51b3\u8bb8\u591a\u95ee\u9898\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u65b9\u5f0f\u3002\nPHP\u5b8c\u5168\u662f\u5173\u4e8e\u81ea\u7531\u3001\u5feb\u901f\u548c\u53ef\u4f38\u7f29\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5e76\u4e14\u6709\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u5904\u7406\u95ee\u9898\u3002\n\u5f53\u6211\u4eec\u8bd5\u56fe\u6539\u8fdb\u81ea\u5df1\u65f6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\u662f\u6211\u4eec\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u6c89\u8ff7\u4e8e\u7279\u5b9a\u6a21\u5f0f\u6216\u60f3\u6cd5\u7684\u54f2\u5b66\uff0c\u800c\u5f80\u5f80\u5fd8\u8bb0\u5b9e\u9645\u601d\u8003\u3002\n\u5f53\u6211\u5728\u6211\u7684\u7a0b\u5e8f\u4e2d\u770b\u5230\u6a21\u5f0f\u65f6\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u6709\u9ebb\u70e6\u7684\u8ff9\u8c61\u3002\u7a0b\u5e8f\u7684\u5f62\u72b6\u5e94\u8be5\u53ea\u53cd\u6620\u5b83\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u4ee3\u7801\u4e2d\u7684\u4efb\u4f55\u5176\u4ed6\u89c4\u5219\u90fd\u662f\u4e00\u4e2a\u8ff9\u8c61\uff0c\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\uff0c\u8fd9\u8868\u660e\u6211\u4f7f\u7528\u7684\u62bd\u8c61\u4e0d\u591f\u5f3a\u5927-\u901a\u5e38\u662f\u6211\u624b\u52a8\u751f\u6210\u9700\u8981\u7f16\u5199\u7684\u67d0\u4e9b\u5b8f\u7684\u5c55\u5f00\u3002\n\u6211\u4eec\u4e0d\u5e94\u8be5\u8fc7\u4e8e\u6c89\u8ff7\u4e8e\u7279\u5b9a\u6a21\u5f0f\u6216\u89e3\u51b3\u65b9\u6848\u80cc\u540e\u7684\u54f2\u5b66\u6216\u601d\u60f3\u3002\u6211\u4eec\u4e3b\u8981\u5173\u6ce8\u7684\u662f\u5c3d\u53ef\u80fd\u4f7f\u4ee3\u7801\u6613\u4e8e\u5bfc\u822a\u548c\u7406\u89e3\uff0c\u4ece\u800c\u4f7f\u4ee3\u7801\u6613\u4e8e\u7ef4\u62a4\u548c\u5b89\u5168\u3002\n\u6211\u4eec\u8fd8\u5fc5\u987b\u8bb0\u4f4f\uff0c\u786e\u5b9e\u5b58\u5728\u53cd\u6a21\u5f0f\u8fd9\u6837\u7684\u4e1c\u897f\u3002\u8fd9\u662f\u4e00\u79cd\u53ef\u80fd\u5e38\u7528\u7684\u6a21\u5f0f\uff0c\u4f46\u5728\u5b9e\u8df5\u4e2d\u662f\u65e0\u6548\u7684\u548c/\u6216\u9002\u5f97\u5176\u53cd\u7684\u3002\n\u6211\u8ba4\u4e3a\u6a21\u5f0f\u4e00\u5f00\u59cb\u662f\u516c\u8ba4\u7684\u5e38\u89c1\u95ee\u9898\u7684\u6700\u4f73\u89e3\u51b3\u65b9\u6848\u3002\u4f46\u662f\u73b0\u5728\u5b83\u4eec\u5df2\u7ecf\u5b58\u5728\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u4eec\u5df2\u7ecf\u4f53\u9a8c\u5230\u5e94\u7528\u7a0b\u5e8f\u6bd4\u9700\u8981\u7684\u590d\u6742\u5341\u500d\uff0c\u56e0\u4e3a\u4eba\u4eec\u8bd5\u56fe\u585e\u8fdb\u4ed6\u4eec\u8bfb\u5230\u7684\u6240\u6709\u6a21\u5f0f(\u201c\u6211\u7684\u5e94\u7528\u7a0b\u5e8f\u67b6\u6784\u5f88\u597d\uff0c\u56e0\u4e3a\u5b83\u662f\u7528\u6a21\u5f0f\u52a0\u8f7d\u5230\u9cc3\u4e0a\u7684\u201d)\u3002\u6211\u5bf9\u56fe\u6848\u4ef7\u503c\u7684\u5370\u8c61\u53d1\u751f\u4e86\u4e00\u4e9b\u53d8\u5316\u3002\n\u51fa\u4e8e\u5bf9\u76f4\u63a5\u5b9e\u9645\u540e\u679c\u7684\u8003\u8651\u800c\u4e0d\u662f\u7531\u7406\u8bba\u6216\u6559\u6761\u51b3\u5b9a\u7684\u884c\u52a8\u6216\u653f\u7b56\u3002\n\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u7684\u95ee\u9898\u662f\u5b83\u4eec\u6709\u6240\u6709\u8fd9\u4e9b\u9690\u542b\u7684\u73af\u5883\uff0c\u5b83\u4eec\u968f\u8eab\u643a\u5e26\u3002\u4f60\u60f3\u8981\u4e00\u6839\u9999\u8549\uff0c\u4f46\u4f60\u5f97\u5230\u7684\u662f\u4e00\u53ea\u5927\u7329\u7329\u62ff\u7740\u9999\u8549\u548c\u6574\u4e2a\u4e1b\u6797\u3002\n\u62bd\u8c61\u662f\u5f3a\u5927\u7684\u3002\u6211\u771f\u6b63\u8fc7\u654f\u7684\u662fCORBA\uff0cCOM\uff0cDCOM\uff0c\u9762\u5411\u5bf9\u8c61\u7684\u5e9f\u8bdd\uff0c\u6211\u572890\u5e74\u4ee3\u5bf9\u6b64\u6709\u53cd\u5e94\u3002\u5f53\u65f6\u7684\u6bcf\u4e2a\u521d\u521b\u516c\u53f8\u90fd\u6709\u4e00\u4e9b\u75af\u72c2\u7684\u4e8b\u60c5\uff0c\u9700\u8981200.000\u4e2a\u65b9\u6cd5\u8c03\u7528\u624d\u80fd\u542f\u52a8\u5e76\u6253\u5370\u201cHello world\u201d\u3002\u8fd9\u592a\u8bbd\u523a\u4e86\uff01\u4f60\u4e0d\u4f1a\u60f3\u6210\u4e3a\u4e0e\u8fd9\u7c7b\u4e8b\u60c5\u76f8\u5173\u7684\u7a0b\u5e8f\u5458\u7684\u3002\n\u8bb8\u591a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u548c\u8bb8\u591a\u516c\u53f8\u8ba4\u4e3a\uff0c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u662f\u5f53\u4eca\u5f00\u53d1\u8f6f\u4ef6\u7684\u552f\u4e00\u5408\u7406\u65b9\u5f0f\u3002\u4efb\u4f55\u53cd\u5bf9\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u7684\u4eba\u90fd\u4f1a\u7acb\u5373\u610f\u8bc6\u5230\u4ed6\u4eec\u662f\u5728\u53cd\u5bf9\u4e1a\u754c\u7684\u201c\u4f20\u7edf\u667a\u6167\u201d\u3002\n\u5728\u7f16\u7a0b\u535a\u5ba2\u548c\u8bba\u575b\u4e0a\uff0c\u6709\u5f88\u591a\u4eba\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8fa9\u62a4\uff0c\u5c3d\u7ba1\u6ca1\u6709\u4efb\u4f55\u6807\u51c6\u5b9a\u4e49\uff0c\u4f46\u4ed6\u4eec\u786e\u4fe1\u81ea\u5df1\u77e5\u9053\u81ea\u5df1\u5728\u8bf4\u4ec0\u4e48\uff01\n\u4e8b\u5b9e\u662f\uff0c\u6240\u8c13\u7684\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u672c\u8eab\u901a\u5e38\u4f1a\u9020\u6210\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u7684\u6c89\u91cd\u8d1f\u62c5\uff01\n\u4f5c\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u548c\u7a0b\u5e8f\u5458\uff0c\u6211\u4eec\u5fc5\u987b\u5b66\u4f1a\u629b\u5f00\u504f\u89c1\uff0c\u627e\u5230\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\u7684\u6700\u4f73\u65b9\u6848\u3002\n\u4eca\u5929\uff0cPHP\u7684\u4e3b\u8981\u4f18\u52bf\u4e4b\u4e00\u662f\u5b83\u540c\u65f6\u652f\u6301\u547d\u4ee4\u5f0f\u3001\u51fd\u6570\u5f0f\u3001\u9762\u5411\u5bf9\u8c61\u3001\u8fc7\u7a0b\u6027\u548c\u53cd\u601d\u6027\u8303\u4f8b\u3002PHP\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u5de5\u5177\u7bb1\uff0c\u6709\u5f88\u591a\u4e0d\u540c\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u7528\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u89e3\u51b3\u5f88\u591a\u95ee\u9898\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u65b9\u5f0f\uff01\n\u4e00\u65e6\u6211\u4eec\u8bd5\u56fe\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e0d\u540c\u95ee\u9898\u5f3a\u5236\u63d0\u4f9b\u7ed9\u5355\u4e2a\u7279\u5b9a\u7684\u7f16\u7a0b\u8303\u4f8b\uff0c\u6211\u4eec\u5c31\u6ca1\u6709\u521b\u9020\u6027\u5730\u601d\u8003\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u6548\u7387\u4e5f\u4e0d\u9ad8\uff01\n\u7406\u89e3\u7279\u5b9a\u7f16\u7a0b\u8303\u4f8b\u7684\u6700\u597d\u65b9\u6cd5\u4e4b\u4e00\u5c31\u662f\u770b\u770b\u5b83\u6700\u521d\u662f\u5982\u4f55\u6f14\u53d8\u7684\u3002\u5b83\u53d1\u5c55\u7684\u539f\u56e0\u662f\u4ec0\u4e48\uff1f\u5176\u4ed6\u7f16\u7a0b\u8303\u4f8b\u5b58\u5728\u54ea\u4e9b\u9700\u8981\u65b0\u7684\u601d\u7ef4\u65b9\u5f0f\u7684\u95ee\u9898\uff1f\u8fd9\u662f\u4e00\u4e2a\u73b0\u5b9e\u4e16\u754c\u7684\u95ee\u9898\uff0c\u8fd8\u662f\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5b66\u672f\u95ee\u9898\uff1f\u4ece\u90a3\u4ee5\u540e\uff0c\u5b83\u53c8\u662f\u5982\u4f55\u6f14\u53d8\u7684\u5462\uff1f\nX\u8bf4\u4ec0\u4e48\u6216Y\u7ed9\u51fa\u4ec0\u4e48\u5b9a\u4e49\u5e76\u4e0d\u91cd\u8981\uff0c\u5728\u8303\u5f0f\u7684\u80cc\u666f\u4e0b\uff0c\u91cd\u8981\u7684\u662f\u521b\u9020\u5b83\u4eec\u7684\u5386\u53f2\u3002\n\u6784\u5efa\u8f6f\u4ef6\u8bbe\u8ba1\u6709\u4e24\u79cd\u65b9\u6cd5\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u8ba9\u5b83\u53d8\u5f97\u7b80\u5355\uff0c\u663e\u7136\u6ca1\u6709\u4efb\u4f55\u4e0d\u8db3\u4e4b\u5904\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u628a\u5b83\u5f04\u5f97\u5f88\u590d\u6742\uff0c\u8fd9\u6837\u5c31\u6ca1\u6709\u660e\u663e\u7684\u4e0d\u8db3\u4e4b\u5904\u4e86\u3002\n\u8fc7\u53bb\uff0c\u5728\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u51fa\u73b0\u4e4b\u524d\uff0c\u5927\u7ea6\u5728\u4e94\u5341\u5e74\u4ee3\u672b\uff0c\u8bb8\u591a\u8f6f\u4ef6\u90fd\u662f\u4f7f\u7528\u5f3a\u8c03\u975e\u7ed3\u6784\u5316\u7f16\u7a0b\u7684\u7f16\u7a0b\u8bed\u8a00\u5f00\u53d1\u7684\uff0c\u6709\u65f6\u79f0\u4e3a\u7b2c\u4e00\u4ee3\u548c\u7b2c\u4e8c\u4ee3\u8bed\u8a00\u3002\u5386\u53f2\u4e0a\uff0c\u975e\u7ed3\u6784\u5316\u7f16\u7a0b(\u6216\u79f0\u975e\u7ed3\u6784\u5316\u7f16\u7a0b)\u662f\u6700\u65e9\u7684\u7f16\u7a0b\u8303\u4f8b\u3002\u5b83\u56e0\u4ea7\u751f\u201c\u610f\u5927\u5229\u9762\u201d\u4ee3\u7801\u800c\u53d7\u5230\u4e25\u5389\u6279\u8bc4\u3002\n\u65e2\u6709\u4f7f\u7528\u975e\u7ed3\u6784\u5316\u7f16\u7a0b\u7684\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u6709\u4f7f\u7528\u975e\u7ed3\u6784\u5316\u7f16\u7a0b\u7684\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3002\u5176\u4e2d\u5305\u62ecBASIC\u3001COBOL\u3001MUPS\u3001JOSS\u3001Focus\u3001TELCOMP\u3001\u673a\u5668\u7ea7\u4ee3\u7801\u3001\u65e9\u671f\u6c47\u7f16\u7cfb\u7edf(\u6ca1\u6709\u8fc7\u7a0b\u6027\u5143\u8fd0\u7b97\u7b26\u7684\u7cfb\u7edf)\u548c\u4e00\u4e9b\u811a\u672c\u8bed\u8a00\u7684\u65e9\u671f\u7248\u672c\u3002\n\u975e\u7ed3\u6784\u5316\u8bed\u8a00\u7684\u7a0b\u5e8f\u901a\u5e38\u7531\u987a\u5e8f\u6392\u5217\u7684\u547d\u4ee4\u6216\u8bed\u53e5\u7ec4\u6210\uff0c\u901a\u5e38\u6bcf\u884c\u4e00\u4e2a\u3002\u8fd9\u4e9b\u884c\u901a\u5e38\u662f\u6709\u7f16\u53f7\u7684\uff0c\u6216\u8005\u53ef\u80fd\u6709\u6807\u7b7e\uff0c\u5141\u8bb8\u6267\u884c\u6d41\u8df3\u5230\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u884c(\u5c31\u50cf\u4e0d\u53d7\u6b22\u8fce\u7684goto\u8bed\u53e5\u4e00\u6837)\u3002\n\u7136\u540e\uff0c\u572860\u5e74\u4ee3\uff0c\u7ed3\u6784\u5316\u7f16\u7a0b\u51fa\u73b0\u4e86--\u4e3b\u8981\u662f\u7531\u4e8eEdsger W.Dijkstra\u5199\u7684\u4e00\u5c01\u8457\u540d\u7684\u4fe1\uff0c\u4fe1\u4e2d\u63d0\u5230\u4e86\u88ab\u8ba4\u4e3a\u6709\u5bb3\u7684\u8bed\u53e5\u3002\n\u7ed3\u6784\u5316\u7f16\u7a0b\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u4f8b\uff0c\u5b83\u901a\u8fc7\u4f7f\u7528\u5b50\u4f8b\u7a0b\u3001\u5757\u7ed3\u6784\u548c\u5faa\u73af\u6765\u63d0\u9ad8\u8f6f\u4ef6\u7684\u6e05\u6670\u5ea6\u3001\u8d28\u91cf\u548c\u5f00\u53d1\u3002\u8fd9\u4e0e\u4f7f\u7528\u7b80\u5355\u7684\u8df3\u8f6c(\u5982GOTO\u8bed\u53e5)\u5f62\u6210\u5bf9\u6bd4\u3002\n\u540e\u6765\uff0c\u8fc7\u7a0b\u7f16\u7a0b\u4ece\u7ed3\u6784\u5316\u7f16\u7a0b\u6d3e\u751f\u51fa\u6765\u3002\u8fc7\u7a0b\u6027\u7f16\u7a0b\u57fa\u4e8e\u201c\u8fc7\u7a0b\u8c03\u7528\u201d\u7684\u6982\u5ff5\u3002\u201c\u8fc7\u7a0b\u8c03\u7528\u201d\u53ea\u662f\u201c\u51fd\u6570\u8c03\u7528\u201d\u7684\u53e6\u4e00\u4e2a\u540d\u79f0\u3002\u8fc7\u7a0b\u4e5f\u79f0\u4e3a\u4f8b\u7a0b\u3001\u5b50\u4f8b\u7a0b\u6216\u65b9\u6cd5\u3002\u4e00\u4e2a\u8fc7\u7a0b\u4ec5\u4ec5\u5305\u542b\u8981\u6267\u884c\u7684\u4e00\u7cfb\u5217\u8ba1\u7b97\u6b65\u9aa4\u3002\u4efb\u4f55\u7ed9\u5b9a\u7684\u8fc7\u7a0b\u90fd\u53ef\u4ee5\u5728\u7a0b\u5e8f\u6267\u884c\u671f\u95f4\u7684\u4efb\u4f55\u65f6\u523b\u8c03\u7528\uff0c\u5305\u62ec\u7531\u5176\u4ed6\u8fc7\u7a0b\u6216\u5176\u81ea\u8eab\u8c03\u7528\u3002\n\u5728\u5f00\u59cb\u65f6\uff0c\u6240\u6709\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u6570\u636e\u63d0\u4f9b\u7ed9\u7a0b\u5e8f\u7684\u4efb\u4f55\u90e8\u5206\u3002\u5728\u5c0f\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u5e76\u4e0d\u662f\u95ee\u9898\uff0c\u4f46\u662f\u968f\u7740\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u968f\u7740\u7a0b\u5e8f\u5927\u5c0f\u7684\u589e\u957f\uff0c\u5bf9\u7a0b\u5e8f\u4e00\u90e8\u5206\u7684\u5fae\u5c0f\u66f4\u6539\u5c06\u6781\u5927\u5730\u5f71\u54cd\u5176\u4ed6\u8bb8\u591a\u90e8\u5206\u3002\n\u6ca1\u6709\u4eba\u8ba1\u5212\u5728\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u66f4\u6539\uff0c\u5e76\u4e14\u5b58\u5728\u8bb8\u591a\u4f9d\u8d56\u9879\u3002\u5bf9\u4e00\u4e2a\u8fc7\u7a0b\u7684\u5fae\u5c0f\u66f4\u6539\u5c06\u5bfc\u81f4\u4f9d\u8d56\u4e8e\u539f\u59cb\u4ee3\u7801\u7684\u8bb8\u591a\u5176\u4ed6\u8fc7\u7a0b\u4e2d\u7684\u4e00\u8fde\u4e32\u9519\u8bef\u3002\n\u4e00\u79cd\u65b0\u7684\u6280\u672f\u53d1\u5c55\u8d77\u6765\uff0c\u5b83\u5141\u8bb8\u5c06\u6570\u636e\u5212\u5206\u6210\u79f0\u4e3a\u201c\u5bf9\u8c61\u201d\u7684\u72ec\u7acb\u4f5c\u7528\u57df\u3002\u53ea\u6709\u5c5e\u4e8e\u76f8\u540c\u4f5c\u7528\u57df\u7684\u7279\u5b9a\u8fc7\u7a0b\u624d\u80fd\u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e\u3002\u8fd9\u79f0\u4e3a\u6570\u636e\u9690\u85cf\u6216\u5c01\u88c5\u3002\u7ed3\u679c\u662f\u66f4\u597d\u5730\u7ec4\u7ec7\u4e86\u4ee3\u7801\u3002\n\u5728\u5f00\u59cb\u65f6\uff0c\u5bf9\u8c61\u4e0d\u88ab\u79f0\u4e3a\u5bf9\u8c61\uff0c\u5b83\u4eec\u53ea\u662f\u88ab\u89c6\u4e3a\u5355\u72ec\u7684\u4f5c\u7528\u57df\u3002\u540e\u6765\uff0c\u5f53\u4f9d\u8d56\u6027\u964d\u4f4e\uff0c\u8fd9\u4e9b\u4f5c\u7528\u57df\u5185\u7684\u8fc7\u7a0b\u548c\u53d8\u91cf\u4e4b\u95f4\u7684\u8fde\u63a5\u88ab\u89c6\u4e3a\u5b64\u7acb\u7684\u6bb5\u65f6\uff0c\u7ed3\u679c\u5c31\u4ea7\u751f\u4e86\u201c\u5bf9\u8c61\u201d\u548c\u201c\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u201d\u7684\u6982\u5ff5\u3002\n\u540e\u6765\uff0c\u4e3b\u8981\u7531\u4e8eJava\u7684\u53d1\u5c55\uff0c\u51fa\u73b0\u4e86\u67d0\u4e9b\u201c\u6d41\u884c\u8bed\u201d\uff0c\u201c\u8fc7\u7a0b\u201d\u6216\u201c\u51fd\u6570\u201d\u4e0d\u518d\u79f0\u4e3a\u51fd\u6570\uff0c\u800c\u662f\u5728\u9a7b\u7559\u5728\u5355\u72ec\u7684\u4f5c\u7528\u57df\u4e2d\u65f6\u88ab\u91cd\u547d\u540d\u4e3a\u201c\u65b9\u6cd5\u201d\u3002\u53d8\u91cf\u4e5f\u4e0d\u518d\u79f0\u4e3a\u201c\u53d8\u91cf\u201d\uff0c\u800c\u662f\u5f53\u5b83\u4eec\u9a7b\u7559\u5728\u5355\u72ec\u7684\u4f5c\u7528\u57df\u4e2d\u65f6\u88ab\u91cd\u547d\u540d\u4e3a\u201c\u5c5e\u6027\u201d\u3002\n\u56e0\u6b64\uff0c\u5bf9\u8c61\u672c\u8d28\u4e0a\u53ea\u662f\u51fd\u6570\u548c\u53d8\u91cf\u7684\u96c6\u5408\uff0c\u73b0\u5728\u79f0\u4e3a\u201c\u65b9\u6cd5\u548c\u5c5e\u6027\u201d\u3002\n\u5728\u5355\u72ec\u7684\u4f5c\u7528\u57df\u4e2d\u9694\u79bb\u65b9\u6cd5\u548c\u5c5e\u6027\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u201c\u7c7b\u201d\u3002\u7c7b\u4e00\u65e6\u5b9e\u4f8b\u5316\uff0c\u5c31\u79f0\u4e3a\u5bf9\u8c61\u3002\n\u5bf9\u8c61\u53ef\u4ee5\u76f8\u4e92\u5f15\u7528\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u5f15\u7528\uff0c\u5185\u90e8\u7684\u65b9\u6cd5(\u51fd\u6570)\u53ef\u4ee5\u76f8\u4e92\u201c\u901a\u4fe1\u201d\u3002\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u4ece\u5176\u4ed6\u5bf9\u8c61\u201c\u7ee7\u627f\u201d\u65b9\u6cd5\uff0c\u4ece\u800c\u6269\u5c55\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u8fd9\u79f0\u4e3a\u201c\u7ee7\u627f\u201d\u3002\u5b83\u662f\u4e00\u79cd\u91cd\u7528\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u5e76\u5141\u8bb8\u901a\u8fc7\u516c\u5171\u7c7b\u548c\u63a5\u53e3\u5bf9\u8f6f\u4ef6\u8fdb\u884c\u72ec\u7acb\u6269\u5c55\u3002\u5bf9\u8c61\u4e4b\u95f4\u7684\u5173\u7cfb\u5f62\u6210\u4e86\u5c42\u6b21\u7ed3\u6784\u3002\u7ee7\u627f\u662f1967\u5e74\u4e3a\u7f16\u7a0b\u8bed\u8a00Simula67\u53d1\u660e\u7684\u3002\n\u5bf9\u8c61\u8fd8\u53ef\u4ee5\u7ee7\u627f\u5176\u4ed6\u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\u5e76\u7528\u6dfb\u52a0\u6216\u66f4\u6539\u7684\u529f\u80fd\u201c\u8986\u76d6\u201d\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u8fd9\u79f0\u4e3a\u201c\u591a\u6001\u6027\u201d\u3002\n\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u662f\u5173\u4e8e\u4ee5\u4e0e\u4ee5\u524d\u4e0d\u540c\u7684\u65b9\u5f0f\u7ec4\u7ec7\u4ee3\u7801\u3002\u5b83\u662f\u8fc7\u7a0b\u6027\u7f16\u7a0b\u7684\u6269\u5c55\uff0c\u5b83\u662f\u5173\u4e8e\u9690\u85cf\u6570\u636e(\u5c01\u88c5)\u548c\u907f\u514d\u5168\u5c40\u4f5c\u7528\u57df\u7684\u3002\u5b83\u662f\u5173\u4e8e\u901a\u8fc7\u201c\u501f\u7528\u201d\u5b83\u4eec\u7684\u84dd\u56fe\u6765\u6269\u5c55\u51fd\u6570\uff0c\u800c\u4e0d\u4f1a\u5b9e\u9645\u5f71\u54cd\u539f\u59cb\u4ee3\u7801(\u7ee7\u627f)\u3002\u5b83\u662f\u5173\u4e8e\u5728\u4e0d\u5f71\u54cd\u539f\u59cb\u4ee3\u7801(\u591a\u6001\u6027)\u7684\u60c5\u51b5\u4e0b\u8986\u76d6\u51fd\u6570\u3002\n\u9762\u5411\u5bf9\u8c61\u7684\u6a21\u578b\u4f7f\u5f97\u901a\u8fc7\u589e\u52a0\u6765\u6784\u5efa\u7a0b\u5e8f\u53d8\u5f97\u5bb9\u6613\u3002\u8fd9\u901a\u5e38\u610f\u5473\u7740\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ed3\u6784\u5316\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u610f\u5927\u5229\u9762\u6761\u4ee3\u7801\u3002\n\u5bf9\u4e8e\u6846\u67b6\u7684\u4f7f\u7528\uff0c\u7ecf\u5e38\u8868\u8fbe\u7684\u4e00\u4e2a\u8bba\u70b9\u662f\uff0c\u4eba\u4eec\u4e0d\u60f3\u5904\u7406\u5176\u4ed6\u4eba\u4ece\u5934\u5f00\u59cb\u7f16\u5199\u7684\u4ee3\u7801\u5e93\u3002\n\u7136\u800c\uff0c\u8fd9\u662f\u4e00\u79cd\u5947\u602a\u7684\u5fc3\u6001\uff0c\u4e3b\u8981\u662f\u5728PHP\u793e\u533a\u7684Web\u5f00\u53d1\u4eba\u5458\u4e2d\u9047\u5230\u7684\u3002\u5b83\u6563\u53d1\u7740\u7f3a\u4e4f\u4e13\u4e1a\u7cbe\u795e\u548c\u7ecf\u9a8c\u7684\u6c14\u606f\u3002\n\u5199\u8f6f\u4ef6\u548c\u5904\u7406\u522b\u4eba\u7684\u4ee3\u7801\u662f\u6b63\u5e38\u7684\u3002\u8fd9\u662f\u4e13\u4e1a\u7a0b\u5e8f\u5458\u65e5\u5e38\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\u3002\u8fd9\u4e0d\u662f\u4ec0\u4e48\u53ef\u6015\u7684\u4e8b\u3002\n\u4e00\u4e2a\u4e13\u4e1a\u7684\u7a0b\u5e8f\u5458\u4e0d\u4f1a\u770b\u7740\u522b\u4eba\u7684\u4ee3\u7801\uff0c\u5f00\u59cb\u62b1\u6028\u4ed6\u6216\u5979\u5982\u4f55\u5b8c\u5168\u53d7\u5236\u4e8e\u524d\u7a0b\u5e8f\u5458\uff0c\u540e\u8005\u53ef\u80fd\u4e0d\u518d\u4e0e\u516c\u53f8\u6216\u9879\u76ee\u6709\u5173\u8054\uff0c\u5982\u679c\u524d\u7a0b\u5e8f\u5458\u4f7f\u7528\u6846\u67b6A\u6216\u6846\u67b6B\uff0c\u60c5\u51b5\u5c31\u4f1a\u6709\u6240\u6539\u89c2\u3002\n\u4e5f\u8bb8PHP web\u5f00\u53d1\u7684\u4f4e\u95e8\u69db\u662f\u9020\u6210\u8fd9\u79cd\u5fc3\u6001\u7684\u539f\u56e0\u4e4b\u4e00\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u662f\u4e00\u4e2a\u4eba\u4ece\u4e8b\u9519\u8bef\u5de5\u4f5c\u7684\u6807\u5fd7\u3002\n\u7f16\u7a0b\u7684\u5f88\u5927\u4e00\u90e8\u5206\u6d89\u53ca\u5230\u4eba\u4eec\u5fc5\u987b\u4f7f\u7528\u5176\u4ed6\u4eba\u7684\u4ee3\u7801\u3002\u8fd9\u662f\u8bd5\u56fe\u6539\u8fdb\u73b0\u6709\u4ee3\u7801\u5e93\u7684\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u6709\u65f6\u9700\u8981\u5b8c\u5168\u91cd\u5199\u3002\n\u8bf7\u6ce8\u610f\u6765\u81ea\u7f16\u7a0b\u5927\u5e08\u7684\u7b14\u8bb0\uff0c\u8bf7\u9605\u8bfb\u201c\u5de5\u4f5c\u4e2d\u7684\u7f16\u7801\u5458--\u5bf9\u7f16\u7a0b\u6280\u5de7\u7684\u601d\u8003\u201d\u8fd9\u672c\u4e66\u3002\n\u4e16\u754c\u4e0a\u4e00\u4e9b\u6700\u5927\u548c\u6700\u6210\u529f\u7684\u4ee3\u7801\u5e93\u662f\u7531\u6570\u767e\u4e2a\u4ece\u672a\u8c0b\u9762\u7684\u4eba\u5f00\u53d1\u7684\u4ee3\u7801\u5e93\uff0c\u5f00\u53d1\u7684\u4ee3\u7801\u5e93\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u6846\u67b6\uff0c\u4ee3\u7801\u5e93\u5b8c\u5168\u5728\u8fc7\u7a0b\u6027\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b8c\u6210\uff0c\u6ca1\u6709\u4f7f\u7528\u8fc7\u7a0b\u6027\u8303\u4f8b\uff0c\u4ed6\u4eec\u505a\u68a6\u4e5f\u4e0d\u4f1a\u60f3\u8981\u7528\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\nLinux\u5185\u6838\u75312000\u591a\u4e07\u884c\u4ee3\u7801\u7ec4\u6210\uff0c\u6240\u6709\u4ee3\u7801\u90fd\u662f\u753114000000\u591a\u540d\u2009\u53c2\u4e0e\u8005\u5b8c\u5168\u4f7f\u7528\u8fc7\u7a0b\u6027\u7f16\u7a0b\u7f16\u5199\u7684\uff0c\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u6846\u67b6\u3002\n\u4e0d\u540c\u7684BSD\u98ce\u683c\u548c\u5927\u591a\u6570Linux GNU\u7528\u6237\u533a\u90fd\u662f\u5b8c\u5168\u4f7f\u7528\u8fc7\u7a0b\u6027\u7f16\u7a0b\u7f16\u5199\u7684\uff0c\u800c\u4e0d\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u6846\u67b6\u3002\n\u4e16\u754c\u5404\u5730\u6570\u4ee5\u767e\u8ba1\u7684\u5f00\u6e90\u9879\u76ee\u4e5f\u662f\u5982\u6b64\uff0c\u8fd9\u4e9b\u9879\u76ee\u6700\u7ec8\u88ab\u6700\u521d\u7684\u7a0b\u5e8f\u5458\u629b\u5f03\uff0c\u5374\u88ab\u5176\u4ed6\u719f\u7ec3\u7684\u7a0b\u5e8f\u5458\u63a5\u624b\u3002\u5176\u4e2d\u8bb8\u591a\u9879\u76ee\u51e0\u4e4e\u6ca1\u6709\u6587\u6863(\u5982\u679c\u6709\u7684\u8bdd)\uff0c\u4ee3\u7801\u5e93\u4e2d\u6ca1\u6709\u6ce8\u91ca\uff0c\u4e5f\u6ca1\u6709\u4efb\u4f55\u6307\u5bfc\u65b9\u9488\u6216\u5e2e\u52a9\u53ef\u4f9b\u63d0\u4f9b\u3002\n\u6574\u4e2aPHP\u4ee3\u7801\u5e93\u90fd\u662f\u7528\u7eaf\u8fc7\u7a0b\u7f16\u7a0b\u8bed\u8a00C\u5b8c\u6210\u7684\uff0c\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u6846\u67b6\u3002\n\u65e0\u8bba\u4f55\u65f6\u60a8\u7528PHP\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u6216\u8005\u6bcf\u5f53\u60a8\u542f\u52a8\u60a8\u6700\u559c\u6b22\u7684PHP\u6846\u67b6\u65f6\uff0c\u60a8\u90fd\u662f\u5728\u522b\u4eba\u7684\u7eaf\u8fc7\u7a0b\u6027\u5de5\u4f5c\u4e0a\u8fd0\u884c\uff01\n\u5f53\u7136\uff0c\u786e\u5b9e\u5b58\u5728\u53ef\u6015\u7684\u4ee3\u7801\uff0c\u53ef\u80fd\u4ece\u4e00\u5f00\u59cb\u5c31\u4e0d\u662f\u8bbe\u8ba1\u597d\u7684\u4ee3\u7801\uff0c\u6216\u8005\u4ee3\u7801\u53ef\u80fd\u5df2\u7ecf\u8d85\u51fa\u4e86\u81ea\u8eab\u7684\u8bb8\u591a\u500d\uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u60f3\u5904\u7406\u91cd\u5199\uff0c\u4ee3\u7801\u975e\u5e38\u7cdf\u7cd5\uff0c\u4ee5\u81f3\u4e8e\u4f60\u4e0d\u80fd\u518d\u7406\u89e3\u5b83\uff0c\u4f46\u662f\u4efb\u4f55\u4e00\u79cd\u6846\u67b6\u90fd\u4e0d\u80fd\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u3002\u8fd9\u901a\u5e38\u662f\u4e00\u4e2a\u7a0b\u5e8f\u7684\u81ea\u7136\u6210\u957f\u8fc7\u7a0b\u3002\u6700\u7ec8\uff0c\u4e0d\u7ba1\u600e\u6837\uff0c\u4efb\u4f55\u4e00\u79cd\u6846\u67b6\u90fd\u4f1a\u88ab\u6495\u788e\u3002\n\u5f53\u7136\uff0c\u786e\u5b9e\u5b58\u5728\u53ef\u6015\u7684\u610f\u5927\u5229\u9762\u4ee3\u7801\uff0c\u4f46\u6ca1\u6709\u4eba\u6545\u610f\u5236\u9020\u53ef\u6015\u7684\u610f\u5927\u5229\u9762\u4ee3\u7801\u3002\u6709\u65f6\u8fd9\u662f\u7531\u4e8e\u3002\n.", "note_en": "In the world of PHP programming, a set of trends are massively being propagated by some people (in their books and on websites) as \u201cModern PHP\u201d while all other approaches are frowned upon as backward, stupid, or just plain wrong.\n These people seem to work tirelessly at getting other people to follow their way of doing things.\n This website has been created in an attempt to present a pragmatic view on PHP programming. A view dictated by experience and practical consequence rather than popular trends, theory, or academic dogma.\n The website  PHP - The Wrong Way is a living document and will continue to be updated with more information as it becomes available.\n     One problem with programming rules and guidelines is that they often only serve a purpose within a specific context. Taken out of context, a good rule can become a horrible rule. In fact, every good rule becomes bad when taken to the extreme.\n This is important to understand because many of the software development principles and rules developed over time and presented by many different people often become misused in the hands of extremists.\n Experience has taught that misuse of general rules and guidelines always results in complication, lack of security, error-prone results, and in some cases complete and utter disaster.\n The  KISS principle, which is an acronym for \u201cKeep It Simple, Stupid\u201d, is an extremely wise and good principle that is generally viewed by experienced people as very good advice to follow. But even this great principle becomes a danger to a project if it is taken to the extreme. There is such a thing as \u201ctoo simple\u201d resulting in a lack of needed functionality.\n    In the PHP community a really bad trend has become de-facto standard for developing web applications and that is by the usage of a popular general purpose framework.\n This trend has emerged and become popular not because it in any way improves the result of the developing process, or because it is the right thing to do from a technology and architectural point of view. This trend has become popular because some of the developers of frameworks have managed to sweep away the masses with their polemic against programming from the ground up with stanzas like \u201cDon\u2019t re-invent the wheel!\u201d and \u201cDon\u2019t do it yourself, others are more skillful than you\u201d.\n Many of today\u2019s programmers completely ignore the fundamental principles of sound programming and they spend a large amount of time fantasizing new layers of complexity in order to appear more clever, more cool, and more acceptable by whomever they regard as their peers.\n These people seems to be infatuated by the thought of having other people follow their \u201cway of doing things\u201d, becoming some kind of PHP community leaders, and having other people use their latest \u201chip\u201d Open Source tools, that they forget to make sure that the advice they are giving is sound and solid.\n In the software industry you can compare a pre-built house to a general purpose framework. Building software using general purpose frameworks doesn\u2019t make you a coder or a programmer any more than putting together a pre-built house makes you a carpenter.\n  A library is considered a collection of reusable code, like the C standard library, or the Go standard library. It consists of code that you easily integrate into your own projects without enforcing any limitations or restrictions whatsoever. It consists of small pieces of code with one specific functionality each.\n A framework is not just a collection of reusable code: you cannot simply take a piece of code from the framework and integrate it into your own project. A framework is a system that helps you build software, but at the same time it forces you to work within the limitations and restrictions of the framework itself. The framework itself has lot of interdependent functionality. One piece cannot work without the other.\n In the world of Python and Ruby, building websites from the ground up is tiresome because neither Python nor Ruby was originally created to build websites. As a result general-purpose frameworks such as  Django and  Ruby on Rails quickly became popular for building websites in these languages.\n PHP on the other hand was created in the beginning by Rasmus Lerdorf as a set of tools written in C that would enable you to easily and quickly develop dynamic HTML. As such PHP was, and still is,  a framework in and of itself.\n PHP has evolved massively since then and today PHP can be used for much more than building HTML and websites, but viewing PHP as a sort of framework in itself is not wrong. PHP is by nature a layer of abstraction for developing web applications written entirely in a procedural C.\n Using a library within your project is only natural. PHP itself comes bundled with a set of libraries that you can use to extend your own code. PDO for example is a lightweight library that provides a consistent interface for accessing databases in PHP.\n Using a framework on top of PHP on the other hand is another matter entirely.\n When you use a framework in PHP you add a layer of abstraction on top of yet another layer of abstraction, one that was already in place for you to use to begin with. The added layer of abstraction that the framework provides may simply serve to organize your code into a pre-fixed set of patterns, or it may add even more complexity by intertwining hundreds or even thousands of classes and methods into a nightmare of dependencies, either way you\u2019re adding layers of complexity to your code that isn\u2019t needed!\n All experience starts with the interface. The interface experience is the result of the underlying technology and the amount of layers of abstraction. The more abstraction you use, the less efficient the interface becomes and the more error-prone the application becomes. The higher the abstraction, the more detail and efficiency is lost.\n Understand this clearly:  The ideal number of lines of code in any project is as few as possible whilst being as clear and readable as possible!\n What everyone doesn\u2019t need is a general purpose framework. Nobody has a general problem, everyone has a very specific problem they are trying to solve.\n Some companies began listening to the hype about PHP frameworks and they started their next projects using one of these popular general purpose frameworks only to end up in a disaster. Not only did they discover that the general purpose framework was really bad at solving their very specific need, but it was also extremely slow in doing so. It was impossible to scale and as a result they started ripping the framework apart in a desperate attempt to pull out all those things they really didn\u2019t need.\n  Action or policy dictated by consideration of the immediate practical consequences rather than by theory or dogma.\n   I have this big allergy to ivory-tower design and design patterns. Peter Norvig, when he was at Harlequin, he did this paper about how design patterns are really just flaws in your programming language. Get a better programming language. He\u2019s absolutely right. Worshiping patterns and thinking about, \u201cOh, I\u2019ll use the X pattern.\u201d\n In software engineering, a design pattern is a reusable solution to a commonly occurring problem in software design. A design pattern is not a finished design that can be transformed directly into code. It is a description or an idea for how to solve a problem that can be used in many different situations. Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved.\n PHP supports imperative, functional, object-oriented, procedural, and reflective paradigms. PHP is a huge toolbox with lots of different tools that makes it possible to solve many problems in many different ways - not just one way.\n PHP is all about freedom, fast and scalable solutions, and having many different ways to deal with problems.\n When we try to improve ourselves, and in this case more specifically our code, we sometimes get hung up in the philosophy of a particular pattern or idea and tend to forget to think practically.\n When I see patterns in my programs, I consider it a sign of trouble. The shape of a program should reflect only the problem it needs to solve. Any other regularity in the code is a sign, to me at least, that I\u2019m using abstractions that aren\u2019t powerful enough - often that I\u2019m generating by hand the expansions of some macro that I need to write.\n We shouldn\u2019t get too caught up in the philosophy or idea behind a specific pattern or solution. Our main concern is to keep the code as easy to navigate and understand as possible and as a result easy to maintain and easy to keep secure.\n We must also remember that there exists such a thing as an anti-pattern. It is a pattern that may be commonly used but is ineffective and/or counterproductive in practice.\n I think patterns started off as generally recognized best solutions for common problems. But now that they have been around for a while and we have experienced applications being made ten times more complicated than they need to be because people try to cram in all the patterns that they have read about (\u201cmy application is well architected, because it is loaded to the gills with patterns.\u201d) my impression of the value of the pattern has shifted a bit.\n  Action or policy dictated by consideration of the immediate practical consequences rather than by theory or dogma.\n   The problem with object-oriented languages is they\u2019ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.\n Abstraction is powerful. What I\u2019m really allergic to, and what I had a reaction to in the \u201990s, was all the CORBA, COM, DCOM, object-oriented nonsense. Every startup of the day had some crazy thing that would take 200.000 method calls to start up and print \u201cHello world\u201d. That\u2019s a travesty! You don\u2019t want to be a programmer associated with that sort of thing.\n Many software developers, and many companies, feel that object-oriented programming is the only reasonable way to develop software today. Any one who argues against object-oriented programming is immediately made conscious of the fact that they are arguing against the \u201cconventional wisdom\u201d of the industry.\n On programming blogs and forums, there are a great many people who defend object-oriented programming, and who feel certain that they know what they are talking about, despite the lack of any standard definition!\n The fact is that so-called object-oriented programming as such often inflicts a heavy burden of unneeded complexity!\n As computer scientists and programmers we must learn to set aside prejudices and find the best solution to a given problem.\n Today, one of the main strengths of PHP is its support for both imperative, functional, object-oriented, procedural, and reflective paradigms. PHP is a huge toolbox with lots of different tools that makes it possible to solve many problems in many different ways -  not just one way!\n As soon as we try to force-feed different problems within an application to a single specific programming paradigm, we\u2019re not thinking creatively and we\u2019re not working efficiently!\n  One of the greatest ways to understand a specific programming paradigm is to look at how it first evolved. What was the reason for its development? What problems existed with other programming paradigms that needed a new way of thinking? Was it a real world problem or simply an academic problem? And how has it since evolved?\n It doesn\u2019t matter what person X says or what definition person Y gives, what matters in the context of paradigms is the history that made them.\n There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.\n In the past, before the advent of object-oriented programming, around the end of the fifties, much software was developed using programming languages that emphasized unstructured programming, sometimes referred to as first- and second-generation languages. Unstructured programming (or non-structured programming) is historically the earliest programming paradigm. It was heavily criticized for producing \u201cspaghetti\u201d code.\n There are both high- and low-level programming languages that use non-structured programming. These include early versions of BASIC, COBOL, MUMPS, JOSS, FOCAL, TELCOMP, machine-level code, early assembler systems (those without procedural meta operators) and some scripting languages.\n A program in a non-structured language usually consists of sequentially ordered commands, or statements, usually one in each line. The lines are usually numbered or may have labels which allows the flow of execution to jump to any line in the program (like with the unpopular GOTO statement).\n Then, in the sixties, structured programming emerged - mainly due to the famous letter by Edsger W. Dijkstra  Go To statements considered harmful.\n Structured programming is a programming paradigm that improves the clarity, quality, and development of software by making use of subroutines, block structures and loops. This is in contrast to using simple jumps such as the GOTO statement.\n Later, procedural programming was derived from structured programming. Procedural programming is based upon the concept of \u201cprocedure call\u201d. A \u201cprocedure call\u201d is just another name for a \u201cfunction call\u201d. Procedures are also known as routines, subroutines or methods. A procedure simply contain a series of computational steps to be carried out. Any given procedure might be called at any point during a programs execution, including by other procedures or itself.\n In the beginning all procedures were available to any part of a program as global data. In small programs this didn\u2019t present a problem, but as things got more complicated and as the size of the program grew, small changes to one part of the program greatly effected many other parts.\n Nobody was planning for changes in the program and lots of dependencies existed. A minor change to one procedure would result in a cascade of errors in lots of other procedures that depended on the original code.\n A new technique evolved that allowed data to be divided into separated scopes called \u201cobjects\u201d. Only specific procedures belonging to the same scope could access the same data. This is called data hiding or encapsulation. The result was much better organized code.\n In the beginning objects were not called objects, they were just viewed upon as separate scopes. Later when dependencies were reduced and connections between procedures and variables inside these scopes were viewed upon as isolated segments, the result gave birth to the concepts of \u201cobjects\u201d and \u201cobject-oriented programming\u201d.\n Later, mainly due to the development of Java, certain \u201cbuzzwords\u201d arose and \u201ca procedure\u201d or \u201ca function\u201d was no longer called a function, but was renamed \u201ca method\u201d when it resided inside a separate scope. Variables were also no longer called \u201cvariables\u201d, but were renamed \u201cattributes\u201d when they resided inside a separate scope.\n So an object is in essence simply a collection of functions and variables now called \u201cmethods and attributes\u201d.\n The way methods and attributes are kept isolated inside a separate scope is by the usage of \u201ca class\u201d. A class, once it is instantiated, is called an object.\n Objects can reference each other and by such a reference the methods (functions) inside can \u201ccommunicate\u201d with each other. Objects can also \u201cinherit\u201d methods from other objects thereby extending such, this is called \u201cinheritance\u201d. It is a way to reuse code and allow independent extensions of the software via public classes and interfaces. The relationships of objects give rise to a hierarchy. Inheritance was invented in 1967 for the programming language  Simula 67.\n Objects can also inherit methods from other objects and \u201coverride\u201d these with added or changed functionality, this is called \u201cpolymorphism\u201d.\n  Object-oriented programming is about organizing code in another way than before. It is an extension of procedural programming and it is about hiding data (encapsulation) and avoiding a global scope. It is about extending functions by \u201cborrowing\u201d their blueprints without actually affecting the original code (inheritance). And it is about overriding functions without affecting the original code (polymorphism).\n The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.\n   An argument often expressed for the usage of a framework is that people don\u2019t want to deal with codebases that have been written from scratch by other people.\n This is however a strange mentality, mainly encountered amongst web developers in the PHP community. It\u2019s one that exudes a lack of professionalism and experience.\n Writing software and dealing with other people\u2019s code is normal. It\u2019s part of the daily work of a professional programmer. It\u2019s not something to be afraid of.\n A professional programmer doesn\u2019t look at other people\u2019s code and start whining about how he or she is at the complete mercy of the former programmer, who is perhaps no longer associated with the company or project, and if only the former programmer had used framework A or framework B the day would have been saved.\n  Perhaps the low barrier to entry in PHP web development plays a part in this kind of mentality. Regardless, it is a sign of a person being in the wrong line of work.\n A great part of programming deals with people having to work with other people\u2019s code. It\u2019s part of the work trying to improve existing codebase and sometimes that involves a complete re-write.\n Take note from the great masters of programming, read the book  Coders at work - Reflections on the Craft of Programming.\n Some of the largest and most successful codebases in world are codebases that has been developed by hundreds of people who have never even met each other, codebases developed without the use of any kind of framework, codebases done entirely in a procedural programming language without the use of anything but the procedural paradigm, and they wouldn\u2019t dream of doing it differently.\n The  Linux Kernel consists of more than 20 million lines of code all written entirely using procedural programming by more than 14\u2009000 participants without the use of any kind of framework.\n The different  BSD flavors and most of the  Linux GNU userland has been written entirely using procedural programming without the use of any kind of framework.\n The same goes for hundreds of Open Source projects around the world that were eventually abandoned by the original programmer(s) only to be picked up by other skillful programmers. Many of these projects had very little documentation (if any at all), no comments in the codebase, and no guidelines or help to offer at all.\n The entire PHP codebase is done in C, a pure procedural programming language, without the use of any kind of framework whatsoever.\n Whenever you define a class in PHP or whenever you fire up that favorite PHP framework of yours, you\u2019re running on someone else\u2019s pure procedural work!\n Sure, there exists such a thing as horrible code, code that perhaps wasn\u2019t designed from the onset, or code that perhaps has outgrown itself many times but the client didn\u2019t want to deal with a re-write, code that\u2019s so bad you cannot make heads or tail of it any longer, but no kind of framework would have prevented this situation. This is often the natural growth process of a program. Eventually any kind of framework would have been torn to pieces anyway.\n And sure there exists horrible spagetti code, but nobody produces horrible spagetti code on purpose. Sometimes this is a result of\n......", "posttime": "2020-08-05 16:48:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9519\u8bef,php,\u4ee3\u7801", "title": "PHP\u9519\u8bef\u7684\u65b9\u5f0f", "title_en": "PHP the Wrong Way", "transed": 1, "url": "https://phpthewrongway.com/", "via": "", "real_tags": ["\u9519\u8bef", "php", "\u4ee3\u7801"]}, {"category": "", "categoryclass": "", "imagename": "968c5aeca3131197004076e8582393db.jpg", "infoid": 1016361, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u6709\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\u4f60\u662f\u5982\u4f55\u5728\u524d\u4e00\u79d2\u6012\u6c14\u51b2\u51b2\uff0c\u4e0b\u4e00\u79d2\u53c8\u5b8c\u5168\u5e73\u9759\u4e0b\u6765\u7684\uff1f\n\u4e00\u4e2a\u6df7\u86cb\u53f8\u673a\u5728\u9ad8\u901f\u516c\u8def\u4e0a\u62e6\u4e0b\u4f60\uff0c\u4f60\u5c31\u5927\u53d1\u96f7\u9706\u4e86\u3002\u8fc7\u4e86\u4e00\u4f1a\u513f\uff0c\u4f60\u6ce8\u610f\u5230\u4ed6\u628a\u8f66\u5f00\u8fdb\u4e86\u533b\u9662\uff0c\u4f60\u7684\u6012\u706b\u5c31\u6d88\u5931\u4e86\u3002\u201c\u662f\u7684\uff0c\u4e5f\u8bb8\u4ed6\u8f66\u91cc\u6709\u4e2a\u75c5\u4eba\u3002\u6216\u8005\uff0c\u4e5f\u8bb8\u4eb2\u8fd1\u7684\u4eba\u5feb\u8981\u6b7b\u4e86\u3002\u6211\u731c\u4ed6\u7ec8\u7a76\u4e0d\u662f\u4e2a\u6df7\u86cb\u3002\u201c\u3002\n\u6982\u7387\u8bba\u4e2d\u7684\u4e00\u6761\u6666\u6da9\u96be\u61c2\u7684\u6cd5\u5219\uff0c\u53eb\u505a\u8d1d\u53f6\u65af\u5b9a\u7406\uff0c\u5f88\u597d\u5730\u89e3\u91ca\u4e86\u8fd9\u4e00\u70b9\u3002\u8fd9\u7bc79000\u5b57\u7684\u535a\u5ba2\u6587\u7ae0\u5b8c\u6574\u5730\u4ecb\u7ecd\u4e86\u8d1d\u53f6\u65af\u5b9a\u7406\u4ee5\u53ca\u5982\u4f55\u5c06\u5176\u4ed8\u8bf8\u5b9e\u8df5\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u8d1d\u53f6\u65af\u5b9a\u7406\u662f\u6279\u5224\u6027\u601d\u7ef4\u7684\u6846\u67b6\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u6700\u540e\uff0c\u4f60\u4f1a\u505a\u51fa\u66f4\u597d\u7684\u51b3\u5b9a\uff0c\u610f\u8bc6\u5230\u4f60\u4ec0\u4e48\u65f6\u5019\u662f\u4e0d\u8bb2\u7406\u7684\uff0c\u4e5f\u660e\u767d\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4eba\u76f8\u4fe1\u4e0d\u660e\u98de\u884c\u7269\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u627f\u8bfa\uff0c\u5931\u8d25\u7684\u53ef\u80fd\u6027\u5f88\u5927\u3002\u5b9e\u65bd\u8fd9\u4e9b\u60f3\u6cd5\u9700\u8981\u60c5\u611f\u4e0a\u7684\u52aa\u529b\uff0c\u4f46\u8fd9\u662f\u503c\u5f97\u7684\u3002\n\u8ba4\u4e3a\u53f8\u673a\u662f\u4e2a\u6df7\u86cb\u662f\u5f88\u6b63\u5e38\u7684\u3002\u8d1d\u53f6\u65af\u5b9a\u7406\u4e5f\u671f\u5f85\u7740\u540c\u6837\u7684\u7ed3\u679c\u3002\u8d1d\u53f6\u65af\u548c\u6211\u4eec\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6211\u4eec\u76f8\u4fe1\u7684\u5f3a\u5ea6\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6012\u706b\u51b2\u5929\u662f\u6ca1\u6709\u6839\u636e\u7684\u3002\u8fd9\u53ef\u80fd\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u5bf9\u6240\u6709\u7684\u6124\u6012\u611f\u5230\u611a\u8822\u7684\u539f\u56e0\u3002\u5b83\u878d\u5316\u5f97\u592a\u5feb\u4e86\uff01\u8fd9\u662f\u6821\u51c6-\u4f7f\u6211\u4eec\u7684\u60c5\u7eea\u4e0e\u60c5\u51b5\u7684\u5f3a\u5ea6\u4fdd\u6301\u4e00\u81f4-\u6211\u4eec\u4e5f\u4f1a\u8bb2\u8ff0\u8fd9\u4e00\u70b9\u3002\n\u8fd9\u672c\u6307\u5357\u4e2d\u6ca1\u6709\u82b1\u54e8\u7684\u6570\u5b66\u77e5\u8bc6\u3002\u6211\u4eec\u7528\u7684\u662f\u6982\u7387\u8bba\uff0c\u4f46\u4e0d\u4f1a\u53bb\u63a8\u5bfc\uff0c\u4e5f\u4e0d\u4f1a\u89e3\u51b3\u8bfe\u672c\u4e0a\u7684\u6982\u7387\u95ee\u9898\u3002\u5728\u4e0d\u4e86\u89e3\u539f\u56e0\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u4e8b\u60c5\u662f\u5355\u8c03\u4e4f\u5473\u7684\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u7406\u89e3\u4e3a\u4ec0\u4e48\u8d1d\u53f6\u65af\u5b9a\u7406\u5f88\u91cd\u8981\uff0c\u4ee5\u53ca\u5982\u4f55\u5e94\u7528\u5b83\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u73a9\u4e2a\u6e38\u620f\u3002\u5728\u6574\u4e2a\u6e38\u620f\u4e2d\uff0c\u6ce8\u610f\u4f60\u5bf9\u4f60\u7684\u51b3\u5b9a\u7684\u611f\u89c9\u3002\u6ce8\u610f\u4f60\u6b63\u5728\u505a\u7684\u51b3\u5b9a\uff0c\u6ce8\u610f\u4f60\u662f\u5982\u4f55\u627e\u5230\u7b54\u6848\u7684\u3002\n\u6709\u4e00\u4e2a\u9ed1\u5323\u5b50\uff0c\u91cc\u9762\u6709\u4e00\u4e2a\u751f\u62103\u4e2a\u6570\u5b57\u7684\u516c\u5f0f\u3002\u4f60\u7684\u5de5\u4f5c\u5c31\u662f\u8bd5\u7740\u731c\u51fa\u8fd9\u4e2a\u516c\u5f0f\u3002\u4e0b\u9762\u7684\u8f93\u5165\u6846\u5df2\u8fde\u63a5\u5230\u9ed1\u6846\u3002\u5982\u679c\u4f60\u7ed9\u5b833\u4e2a\u6570\u5b57\uff0c\u5b83\u4f1a\u544a\u8bc9\u4f60\u4ed6\u4eec\u662f\u5426\u9075\u5faa\u516c\u5f0f\u3002\u7528\u9017\u53f7\u5206\u9694\u6bcf\u4e2a\u6570\u5b57\u3002\n\u5927\u591a\u6570\u4eba\u5c1d\u8bd5\u4e00\u4e9b\u5e8f\u5217\uff1a(4\uff0c6\uff0c8)\uff0c(1\uff0c2\uff0c3)\u2026\u3002\u7ed3\u679c\u8981\u4e48\u662f\u6570\u5b57\u9012\u589e\uff0c\u8981\u4e48\u662f\u5076\u6570\u9012\u589e\u3002\u6ce8\u610f\u5f53\u4f60\u5199\u4e0b\u7b54\u6848\u7684\u65f6\u5019\uff0c\u4f60\u662f\u5982\u4f55\u5bf9\u81ea\u5df1\u7684\u7b54\u6848\u5145\u6ee1\u4fe1\u5fc3\u7684\u3002\u60a8\u5df2\u7ecf\u5c1d\u8bd5\u4e86\u51e0\u4e2a\u793a\u4f8b\uff0c\u6240\u6709\u8fd9\u4e9b\u793a\u4f8b\u90fd\u5f88\u6709\u610f\u4e49\uff01\n\u5982\u679c\u6211\u7684\u8bc4\u8bba\u8ba9\u60a8\u7684\u4fe1\u5fc3\u52a8\u6447\uff0c\u8bf7\u7ee7\u7eed\u5e76\u518d\u6b21\u5c1d\u8bd5\u8f93\u5165\u6846\u3002\u770b\u770b\u4f60\u80fd\u4e0d\u80fd\u627e\u5230\u4e00\u79cd\u6709\u6548\u7684\u6a21\u5f0f\u3002\u7b54\u6848\u5c31\u5728\u8fd9\u4e00\u8282\u7684\u5e95\u90e8\uff0c\u4f46\u4e0d\u8981\u8df3\u8fc7\u3002\u5728\u6b64\u4e4b\u524d\u7684\u6bcf\u4e00\u53e5\u8bdd\u90fd\u662f\u5728\u5efa\u7acb\u4e00\u4e2a\u91cd\u8981\u7684\u601d\u60f3\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u5c31\u662f\u95ee\u9898\u7684\u5168\u90e8\u3002\u6211\u6253\u8d4c\u4f60\u4e5f\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u8457\u540d\u7684\u516c\u5f0f\uff1a\\(e=mc^2\\)\u3002\u8fd9\u5c31\u662f\u8d28\u80fd\u7b49\u4ef7\u6027\u7684\u5168\u90e8\u5185\u5bb9\u3002\u7136\u800c\uff0c\u5f04\u6e05\u695a\u5982\u4f55\u5229\u7528\u6838\u80fd\u4ecd\u7136\u662f\u4e00\u4e2a\u96be\u9898\u3002\u8fd9\u4e2a\u516c\u5f0f\u4f7f\u4e4b\u6210\u4e3a\u53ef\u80fd\uff0c\u4f46\u5b9e\u65bd\u5b83\u4ecd\u7136\u82b1\u4e8640\u5e74\u7684\u65f6\u95f4\u3002\n\u8fd9\u4e0e\u8d1d\u53f6\u65af\u5b9a\u7406\u662f\u4e00\u6837\u7684\u3002\u8fd9\u4e2a\u516c\u5f0f\u4e4b\u6240\u4ee5\u4ee4\u4eba\u5174\u594b\uff0c\u662f\u56e0\u4e3a\u5b83\u6697\u793a\u4e86\u4ec0\u4e48\u3002\u6211\u4eec\u6b63\u5728\u53d1\u73b0\u6838\u80fd\u7248\u7684\u8d1d\u53f6\u65af\u5b9a\u7406\u3002\n\u4e3a\u4e86\u5f62\u6210\u51c6\u786e\u7684\u4fe1\u5ff5\uff0c\u4f60\u603b\u662f\u4ece\u4f60\u5df2\u7ecf\u62e5\u6709\u7684\u4fe1\u606f\u5f00\u59cb\u3002\u4f60\u66f4\u65b0\u4e86\u4fe1\u4ef0\u3002\u4f60\u4e0d\u4f1a\u629b\u5f03\u4f60\u6240\u77e5\u9053\u7684\u4e00\u5207\u3002\n\u7b2c\u4e00\u4e2a\u5173\u952e\u90e8\u5206\u662f\u5047\u8bbe(H)--\u6211\u4eec\u6b63\u5728\u8c08\u8bba\u7684\u4fe1\u5ff5\u3002\n\u7b2c\u4e8c\u4e2a\u5173\u952e\u90e8\u5206\u662f\u8bc1\u636e(E)--\u6211\u4eec\u6709\u4ec0\u4e48\u6570\u636e\u6765\u652f\u6301/\u62d2\u7edd\u8fd9\u4e00\u5047\u8bbe\u3002\n\u7b2c\u4e09\u4e2a\u5173\u952e\u6210\u5206\u662f\u4ee5\u4e0a\u4e24\u8005\u7684\u6982\u7387(P)\u3002\u8fd9\u4e2a\u6982\u7387\u5c31\u662f\u6211\u4eec\u5bf9\u4fe1\u4ef0\u7684\u4fe1\u5fc3\u3002\n\u5982\u679c\u4f60\u719f\u6089\u6982\u7387\u8bba\uff0c\u4f60\u4f1a\u5728\u5b66\u6821\u91cc\u5b66\u5230\u8fd9\u4e00\u70b9\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u4e0d\u8981\u62c5\u5fc3\uff0c\u6709\u5f88\u597d\u7684\u6570\u5b66\u4ecb\u7ecd\u53ef\u4ee5\u4e3a\u60a8\u89e3\u91ca\u3002\u6211\u4eec\u5c06\u8df3\u8fc7\u6570\u5b66\uff0c\u4e13\u6ce8\u4e8e\u5982\u4f55\u4f7f\u7528\u5b83\u3002\n\u6211\u4eec\u7684\u5174\u8da3\u70b9\uff0c\u4ee5\u53ca\u8d1d\u53f6\u65af\u771f\u6b63\u95ea\u8000\u7684\u5730\u65b9\uff0c\u662f\u6211\u4eec\u6bd4\u8f83\u4e24\u4e2a\u5047\u8bbe\u7684\u5730\u65b9\u3002\u8fd9\u4e0d\u662f\u63ed\u793a\u7edd\u5bf9\u6982\u7387(\u8fd9\u5f88\u96be)\uff0c\u800c\u662f\u5173\u6ce8\u4e00\u79cd\u5047\u8bbe\u4e0e\u53e6\u4e00\u79cd\u5047\u8bbe\u76f8\u6bd4\u6709\u591a\u5927\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u5934\u8111\u4e2d\u7684\u5927\u591a\u6570\u63a8\u7406\u90fd\u91c7\u7528\u8fd9\u79cd\u5f62\u5f0f\u3002\n\u53ef\u80fd\u6027\u8d54\u7387\u8861\u91cf\u7684\u662f\uff0c\u4e0e\u53e6\u4e00\u79cd\u5047\u8bbe\u76f8\u6bd4\uff0c\u8bc1\u636e\u5bf9\u5f53\u524d\u5047\u8bbe\u7684\u89e3\u91ca\u6709\u591a\u597d\u3002\u6211\u4eec\u5c06\u501f\u52a9\u793a\u4f8b\u6765\u63a2\u7d22\u8fd9\u610f\u5473\u7740\u4ec0\u4e48\u3002\n\u5047\u8bbe{hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u4e3a\u771f}{hspace{2 mm}\u7684\u6982\u7387{2 mm}\u5047\u8bbe\\hspace{2 mm}\u7ade\u4e89{2 mm}\u5047\u8bbe\\hspace{2 mm}\u4e3a\\hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u8bc1\u636e{2 mm}\u7684\u53ef\u80fd\u6027{hspace{2 mm}=frac{hspace{2 mm}\u5047\u8bbe\\hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u4e3a\u771f}{hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u4e3a\\hspace{2 mm}\u5047\u8bbe\\hspace{2 mm}\u4e3a\\hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u4e3a\\hspace{2 mm}\u5047\u8bbe{hspace{2 mm}\u4e3a\\hspace{2 mm}\u3002\n\u6211\u4eec\u5c06\u4ece2\uff0c4\uff0c6\u6e38\u620f\u5f00\u59cb\uff0c\u5c55\u793a\u6570\u5b66\u548c\u76f4\u89c9\u5728\u8d28\u91cf\u4e0a\u662f\u5982\u4f55\u4e00\u81f4\u7684\u3002\u7136\u540e\u6211\u4eec\u5c06\u8fdb\u5165\u4e00\u4e2a\u66f4\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u88ab\u9519\u8bef\u6821\u51c6\uff0c\u5e76\u8fdb\u884c\u6570\u5b66\u8ba1\u7b97\u3002\n\u6211\u5c06\u5728\u7b2c2\uff0c4\uff0c6\u573a\u6bd4\u8d5b\u4e2d\u9009\u62e9\u6211\u7684\u9053\u8def\uff0c\u4f46\u6211\u5e0c\u671b\u4f60\u7684\u9053\u8def\u8db3\u591f\u76f8\u4f3c\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bd5\u7740\u81ea\u5df1\u505a\u8fd9\u4ef6\u4e8b\uff01\n\u6211\u6709\u4e00\u4e2a\u5047\u8bbe\u8981\u68c0\u9a8c\uff0c\\(H3Even}\\)=3\u4e2a\u5347\u5e8f\u7684\u5076\u6570\u3002\u5b83\u5728\u8fd9\u91cc\u662f\u9690\u542b\u7684\uff0c\u4f46\u6211\u8981\u6d4b\u8bd5\u7684\u5047\u8bbe\u662f\\(H_{\u975e-3EVEN}\\)\uff0c\u6216\u8005\u516c\u5f0f\u4e0d\u662f\u5347\u5e8f\u76843\u4e2a\u5076\u6570\u3002\n\u6211\u8f93\u5165(4\uff0c6\uff0c8)\uff0c\u9ed1\u6846\u8bf4\u201c\u662f\u201d\u3002\u6211\u5bf93\u4e2a\u5076\u6570\u7684\u4fe1\u5fc3\u4e0a\u5347\u4e86\u3002\u7528\u8d1d\u53f6\u65af\u7684\u8bdd\u8bf4\uff0c\u6211\u7684\u540e\u9a8c\u8d54\u7387\u589e\u52a0\u4e86\uff0c\u56e0\u4e3a\u53ef\u80fd\u6027\u8d54\u7387\u589e\u52a0\u4e86\u3002\u5f53\u516c\u5f0f\u4e3a\\(H3EVEN}\\)\u65f6\uff0c(4\uff0c6\uff0c8)\u8bf4\u201c\u662f\u201d\u7684\u6982\u7387\u66f4\u9ad8\uff0c\u56e0\u6b64\u53ef\u80fd\u6027\u51e0\u7387\u4e5f\u589e\u52a0\u4e86\u3002\n\u4f60\u4f1a\u6ce8\u610f\u5230\u4f60\u7684\u611f\u53d7\uff0c\u6bcf\u4e00\u4e2a\u4e0e\u4f60\u7684\u5047\u8bbe\u76f8\u5339\u914d\u7684\u65b0\u6570\u5b57\u90fd\u4f1a\u8ba9\u4f60\u7684\u4fe1\u5ff5\u66f4\u52a0\u575a\u5b9a\u3002\n\u63a5\u4e0b\u6765\u6211\u8bd5(1\uff0c2\uff0c3)\u3002\u201c\u662f\u7684\u201d\u3002\u4ec0\u4e48\uff1f\u6211\u8fd8\u4ee5\u4e3a\u4f1a\u8bf4\u201c\u4e0d\u201d\u5462\uff01\n\u5f53\u4f60\u53d1\u73b0\u4e00\u4e9b\u4e0d\u7b26\u5408\u6a21\u5f0f\u7684\u4e1c\u897f\u65f6\uff0c\u4e00\u5207\u90fd\u4f1a\u50cf\u5b83\u5e94\u8be5\u7684\u90a3\u6837\u7ffb\u6eda\u3002\u7531\u4e8e(1\uff0c2\uff0c3)\u4e0d\u90fd\u662f\u5076\u6570\uff0c\u6240\u4ee5(1\uff0c2\uff0c3)\u8bf4\u201c\u662f\u201d\u7684\u6982\u7387\u968f\u7740(H_{\u975e-3\u5076\u6570})\u7684\u589e\u52a0\u800c\u589e\u52a0\u3002\u73b0\u5728\u53ef\u80fd\u6027\u8d54\u7387\u504f\u5411\\(H_{\u975e-3\u5076\u6570})\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u653e\u5f03\\(H_{3\u5076\u6570}\\)\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u7684\u8bc1\u636e\u5c31\u8db3\u4ee5\u5b8c\u5168\u98a0\u5012\u5929\u5e73\u3002\n\u90a3\u4e48\uff0c\u4f60\u5e94\u8be5\u5c1d\u8bd5\u54ea\u79cd\u65b0\u7684\u5047\u8bbe\u5462\uff1f\u7ebf\u7d22\u901a\u5e38\u5728\u4e8e\u4f60\u5982\u4f55\u53cd\u9a73\u5148\u524d\u7684\u5047\u8bbe\u3002\n\u6211\u8bd5\u4e86(1\uff0c2\uff0c3)\uff0c\u5b83\u8bf4\u201c\u662f\u201d\uff0c\u800c\u6211\u9884\u8ba1\u5b83\u4f1a\u8bf4\u201c\u4e0d\u201d\u3002\u56e0\u6b64\uff0c\u6211\u7684\u65b0\u5047\u8bbe\u53d8\u6210\u4e86\u201c3\u4e2a\u9012\u589e\u7684\u6570\u5b57\u201d\u3002\n\u5c31\u50cf\u524d\u9762\u7684\u4f8b\u5b50\u4e00\u6837\uff0c(4\uff0c2\uff0c6)\u8bf4\u201c\u662f\u201d\u5c31\u5426\u5b9a\u4e86\u8fd9\u4e2a\u5047\u8bbe\u3002\u56e0\u6b64\uff0c\u6211\u7684\u65b0\u5047\u8bbe\u53d8\u6210\u4e86\u201c3\u4e2a\u6b63\u6570\u201d\u3002\n\u6211\u8bd5\u4e86(-1\uff0c2\uff0c3)\uff0c\u7ed3\u679c\u662f\u201c\u4e0d\u201d\uff01\u8fd9\u5c31\u662f\u6211\u5bf9\u201c3\u4e2a\u6b63\u6570\u201d\u53d8\u5f97\u76f8\u5f53\u6709\u4fe1\u5fc3\u6240\u9700\u8981\u7684\u4e00\u5207\u3002\u6211\u5c1d\u8bd5\u7684\u8d1f\u6570\u8d8a\u591a\uff0c\u6211\u5c31\u8d8a\u81ea\u4fe1\u3002\n\u6821\u51c6\u662f\u5173\u952e\u3002\u6211\u4eec\u521a\u624d\u5c55\u793a\u7684\u662f\u6211\u4eec\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u4ee5\u53ca\u5f53\u6211\u4eec\u601d\u8003\u5f97\u597d\u7684\u65f6\u5019\uff0c\u8d1d\u53f6\u65af\u5b9a\u7406\u662f\u5982\u4f55\u4e0e\u4e4b\u4fdd\u6301\u4e00\u81f4\u7684\u3002\u8d1d\u53f6\u65af\u5b9a\u7406\u66f4\u65b0\u4fe1\u5ff5\u7684\u65b9\u5411\u4e0e\u6211\u4eec\u7684\u5927\u8111\u76f8\u540c\uff0c\u4f46\u6539\u53d8\u7684\u662f\u6bcf\u4e00\u4ef6\u8bc1\u636e\u5bf9\u6211\u4eec\u7684\u5f71\u54cd\u6709\u591a\u5927\uff01\n\u5728\u4e0b\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u8ba9\u6211\u4eec\u5b66\u4e60\u57fa\u672c\u7684\u6570\u5b66\u77e5\u8bc6\u3002\u7a0d\u540e\u6211\u4eec\u4f1a\u91cd\u6e29\u7b2c2\uff0c4\uff0c6\u573a\u6bd4\u8d5b\u3002\n\u4f60\u7684\u540c\u4e8b\u6709\u65f6\u4e0a\u73ed\u4f1a\u8fdf\u5230\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5468\u91cc\uff0c\u4ed6\u4eec\u5df2\u7ecf\u51c6\u65f64\u6b21\uff0c\u8fdf\u52303\u6b21\u3002\u4f60\u8fd8\u9700\u8981\u591a\u5c11\u6b21\u624d\u80fd\u5f00\u59cb\u76f8\u4fe1\u4ed6\u4eec\u201c\u603b\u662f\u201d\u8fdf\u5230\uff1f\n\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u518d\u591a\u505a\u51e0\u6b21\u5c31\u884c\u4e86\u3002\u4f46\u662f\u8ba9\u6211\u4eec\u7528\u8d1d\u53f6\u65af\u6765\u6821\u51c6\u3002\n\u7531\u4e8e\u6ca1\u6709\u5f88\u597d\u7684\u7406\u7531\u671f\u671b\u8fdf\u5230\u80dc\u8fc7\u51c6\u65f6\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u5148\u524d\u7684\u8d54\u7387\u662f1\uff1a1.2\u30022\u53e6\u4e00\u79cd\u5047\u8bbe\uff0c\u6211\u4eec\u6b63\u5728\u6d4b\u8bd5\u7684\u5047\u8bbe\u662f\u201c\u5e76\u4e0d\u603b\u662f\u8fdf\u5230\u201d\u3002\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ea\u670910%\u7684\u65f6\u95f4\u8fdf\u5230\u30023\u4e2a\u3002\n\u6211\u4eec\u5c06\u4f7f\u7528\u6211\u4eec\u62e5\u6709\u7684\u6570\u636e\u6765\u8ba1\u7b97\u8fdf\u5230\u7684\u53ef\u80fd\u6027\u3002\u6211\u4eec\u60f3\u5c06\u8fdf\u5230\u4e09\u6b21\u3001\u51c6\u65f6\u56db\u6b21\u7684\u6570\u636e\u4e0e\u6211\u4eec\u8ba4\u4e3a\u7684\u51e0\u4e4e\u603b\u662f\u51c6\u65f6\u6216\u51e0\u4e4e\u603b\u662f\u8fdf\u5230\u7684\u6570\u636e\u8fdb\u884c\u5bf9\u6bd4\u3002\u8bb0\u4f4f\uff0c\u4e3a\u4e86\u5f04\u6e05\u695a\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u60f3\u8c61\u76f8\u4fe1\u7b2c\u4e00\u4e2a\u5047\u8bbe\uff0c\u7136\u540e\u5224\u65ad\u6570\u636e\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\u3002\u7136\u540e\uff0c\u6211\u4eec\u60f3\u8c61\u76f8\u4fe1\u7b2c\u4e8c\u4e2a\u5047\u8bbe\uff0c\u5e76\u5224\u65ad\u6570\u636e\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\u3002\n\u6709\u51e0\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4ece\u6570\u5b66\u4e0a\u8868\u793a\u8fd9\u4e9b\u6570\u636e\uff0c\u4ece\u4e8c\u9879\u5f0f\u51fd\u6570\u5230Beta\u5206\u5e03\u3002\u7136\u800c\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u5f00\u59cb\u8ba8\u8bba\u8fd9\u4e2a\u3002\u4eca\u5929\u66f4\u591a\u7684\u662f\u5173\u4e8e\u4e00\u4e2a\u76f4\u89c2\u7684\u89e3\u91ca\uff0c\u4e00\u4e2a\u4f60\u66f4\u6709\u53ef\u80fd\u6bcf\u5929\u90fd\u4f1a\u7528\u5230\u7684\u89e3\u91ca\u3002\u6240\u4ee5\uff0c\u8bd5\u7740\u60f3\u8c61\u4e00\u4e0b\uff0c\u7ed9\u5b9a\u8fd9\u4e9b\u6570\u636e\uff0c\u80dc\u8d1f\u7684\u51e0\u7387\u4f1a\u6709\u591a\u5927\u30024.\u3002\n\u5bf9\u4e8e\u4e00\u4e2a\u672c\u8be5\u603b\u662f\u8fdf\u5230\u7684\u4eba\u6765\u8bf4\uff0c\u4ed6\u4eec\u51c6\u65f6\u7684\u6b21\u6570\u6bd4\u4e0d\u51c6\u65f6\u7684\u6b21\u6570\u591a\uff0c\u8fd9\u8ba9\u6211\u6709\u70b9\u60ca\u8bb6\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6211\u4eec\u7684\u5047\u8bbe\u6765\u8bf4\uff0c\u8fd9\u4e00\u8bc1\u636e\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u800c\u5f53\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u8fdf\u5230\u65f6\uff0c\u8fd9\u4e00\u8bc1\u636e\u5c31\u66f4\u6709\u8bf4\u670d\u529b\u4e86\u3002\u6211\u4f30\u8ba1\u8d54\u7387\u662f1\uff1a10.5\u3002\n\u73b0\u5728\uff0c\u540e\u9a8c\u6982\u7387\u662f\\(1\uff1a10*1\uff1a1=1\uff1a10\\)\u3002\u56e0\u6b64\uff0c\u4ed6\u4eec\u8fdf\u5230\u7684\u53ef\u80fd\u6027\u6bd4\u4e0d\u8fdf\u5230\u7684\u53ef\u80fd\u6027\u4f4e10\u500d\u3002\n\u8ba9\u6211\u4eec\u8fdb\u4e00\u6b65\u770b\u8fd9\u4e2a\u4f8b\u5b50\u3002\u6bd4\u65b9\u8bf4\uff0c\u6211\u4eec\u60f3\u77e5\u9053\u4ed6\u4eec\u8fd8\u8981\u8fdf\u5230\u591a\u5c11\u6b21\u624d\u80fd\u628a\u8d54\u7387\u63d0\u9ad8\u5230100\uff1a1\uff1f\n\u56e0\u6b64\uff0c\u53ef\u80fd\u6027\u6bd4=100\uff1a1/1\uff1a10=1000\uff1a1\u3002\u8fd9\u610f\u5473\u7740\uff0c\u4ed6\u4eec\u5fc5\u987b\u572820\u5929\u4e2d\u670912\u5929\u8fdf\u5230\u624d\u80fd\u5f97\u5230\u8fd9\u6837\u7684\u8d54\u7387\u30026\u4e2a\u3002\n\u8fd9\u4e9b\u6570\u5b57\u53ef\u80fd\u4f1a\u8ba9\u4eba\u611f\u89c9\u5f88\u5947\u602a\u3002\u4ed6\u4eec\u662f\u3002\u6211\u4eec\u4e0d\u4e60\u60ef\u6821\u51c6\uff0c\u5728\u8fd9\u4e2a\u7279\u6b8a\u7684\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6bd4\u8f83\u4e86\u4e24\u4e2a\u6781\u7aef\u7684\u5047\u8bbe\uff0c\u8fd9\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u5947\u602a\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u8fd9\u662f\u4e00\u4e2a\u201c\u6211\u4e0d\u77e5\u9053\u8fd9\u4e9b\u6570\u5b57\u662f\u4ec0\u4e48\u610f\u601d\u201d\u7684\u60c5\u51b5\u3002\u7a0d\u540e\u6211\u4eec\u5c06\u63a2\u8ba8\u8fd9\u79cd\u4ee4\u4eba\u4e0d\u5b89\u7684\u611f\u89c9\u3002\n\u8fd9\u4e24\u79cd\u5047\u8bbe\u90fd\u4e0d\u518d\u63a5\u8fd1\u6211\u4eec\u7684\u9884\u671f\u3002\u6bd5\u7adf\uff0c\u8fd9\u4f4d\u540c\u4e8b20\u5929\u4e2d\u53ea\u670912\u5929\u8fdf\u5230\u4e86\uff01\uff1f\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u8003\u8651\u53e6\u4e00\u79cd\u5047\u8bbe-\u6bd4\u5982\u8bf4\uff0c\u4ed6\u4eec60%\u7684\u65f6\u95f4\u90fd\u8fdf\u5230\u4e86\uff1f\u5c1d\u8bd5\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5b83\u5e94\u8be5\u4f1a\u628a\u53e6\u5916\u4e24\u4e2a\u4eba\u8d76\u51fa\u516c\u56ed\u3002\u4f60\u53ef\u4ee5\u7528\u6211\u9020\u7684\u8fd9\u4e2a\u8ba1\u7b97\u5668\u3002\n\u73b0\u5728\uff0c\u8bf7\u6ce8\u610f\uff0c\u4e00\u4e9b\u6570\u5b66\u77e5\u8bc6\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u5730\u6821\u51c6\u6211\u4eec\u5df2\u6709\u7684\u5047\u8bbe\u3002\u5b83\u628a\u6211\u4eec\u7684\u60c5\u7eea\u548c\u601d\u60f3\u653e\u5728\u6b63\u786e\u7684\u89d2\u5ea6\u3002\n\u8fd8\u8981\u6ce8\u610f\u6211\u4eec\u662f\u5982\u4f55\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u3002\u6211\u4eec\u4e0d\u662f\u5e94\u7528\u9700\u8981\u7eb8\u548c\u7b14\u7684\u590d\u6742\u7248\u672c(\u6982\u7387\u662f\u591a\u5c11\uff0c\u516c\u5f0f\u662f\u4ec0\u4e48\uff0c\u6211\u5982\u4f55\u627e\u5230\u5b83\u4eec\uff1f)\uff0c\u800c\u662f\u9075\u5faa\u8fd9\u4e2a\u201c\u65e7\u7684\u8d54\u7387\u4e58\u4ee5\u5f53\u524d\u7684\u53ef\u80fd\u6027\u7b49\u4e8e\u65b0\u7684\u8d54\u7387\u201d\u3002\n\u5f53\u4f60\u6709\u4e86\u8fd9\u4e2a\u6a21\u578b\u6765\u89e3\u91ca\u201c\u7406\u60f3\u7684\u4f60\u201d\u662f\u5982\u4f55\u601d\u8003\u7684\u65f6\u5019\uff0c\u4f60\u5c31\u4f1a\u6709\u4e00\u4e2a\u9f7f\u8f6e\u7ea7\u7684\u7406\u89e3\uff01\u8fd9\u662f\u53f2\u8bd7\u822c\u7684\uff0c\u56e0\u4e3a\u4f60\u53ef\u4ee5\u6446\u5f04\u9f7f\u8f6e\uff0c\u770b\u770b\u4f60\u7684\u601d\u7ef4\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\u60a8\u53ef\u4ee5\u627e\u51fa\u6700\u4f73\u5b9e\u8df5\uff0c\u5e76\u6210\u4e3a\u66f4\u5f3a\u5927\u7684\u601d\u8003\u8005\u3002\u8fd9\u6b63\u662f\u6211\u4eec\u4e0b\u4e00\u6b65\u8981\u505a\u7684\u3002\n\u8ba9\u6211\u4eec\u5f00\u59cb\u78e8\u8fd9\u4e9b\u9f7f\u8f6e\u5427\u3002\u672c\u8282\u7684\u4e00\u4e2a\u5143\u76ee\u6807\u662f\u4f7f\u9f7f\u8f6e\u5bf9\u60a8\u53ef\u89c1\u3002\u6211\u4eec\u6b63\u5728\u6162\u6162\u5730\u63a5\u8fd1\u6838\u80fd\u7248\u7684\u8d1d\u53f6\u65af\u5b9a\u7406\uff0c\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u521a\u521a\u770b\u5230\u4e86\u5b83\u662f\u5982\u4f55\u5b9e\u73b0\u7684\u3002\u4e0b\u4e00\u6b65\u662f\u5b66\u4e60\u5982\u4f55\u81ea\u5df1\u505a\u8fd9\u4ef6\u4e8b\u3002\n\u8ba9\u6211\u4eec\u9996\u5148\u5047\u8bbe\u4ed6\u4eec\u662f\u8d1d\u53f6\u65af\u7684\uff0c\u5e76\u9075\u5faa\u89c4\u5219\u3002\u4ed6\u4eec\u80fd\u5f97\u51fa\u4e0d\u540c\u7684\u7ed3\u8bba\u5417\uff1f\n\u662f!\u3002\u76ee\u524d\u7684\u6570\u636e\u53ea\u7ed9\u4e86\u6211\u4eec\u53ef\u80fd\u6027\u8d54\u7387\u3002\u8fd8\u6709\u7b2c\u4e8c\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u524d\u79d1\uff0c\u5c1a\u672a\u4f7f\u7528\uff01\u5728\u201c\u8fdf\u5230\u201d\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u7528\u6211\u4eec\u7684\u80cc\u666f\u77e5\u8bc6\u60f3\u51fa\u4e86\u5b83\u4eec\u3002\u8fd9\u5c31\u662f\u5b83\u4eec\u88ab\u79f0\u4e3a\u5148\u9a71\u7684\u539f\u56e0\uff1a\u8fd9\u662f\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u7684\u4fe1\u606f\u3002\n\u4e24\u4e2a\u4e0d\u540c\u7684\u4eba\u6709\u4e0d\u540c\u7684\u7ecf\u5386\u548c\u4e0d\u540c\u7684\u4fe1\u606f\uff0c\u8fd9\u4f3c\u4e4e\u662f\u6709\u9053\u7406\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u524d\u79d1\u3002\u6709\u65f6\u5019\uff0c\u8fd9\u4e9b\u524d\u79d1\u53ef\u80fd\u4f1a\u53d8\u5f97\u76f8\u5f53\u5f3a\u70c8\u3002\u770b\u5230\u540c\u4e8b7\u5929\u4e2d\u67093\u5929\u8fdf\u5230\u7684\u4f60\uff0c\u4e0e\u770b\u5230\u540c\u4e8b10\u5929\u4e2d\u67096\u5929\u8fdf\u5230\u7684\u9c8d\u52c3\u76f8\u6bd4\uff0c\u4f1a\u6709\u4e0d\u540c\u7684\u524d\u79d1\u3002\u9c8d\u52c3\u770b\u5230\u4f60\u7684\u540c\u4e8b\u8fdf\u5230\u7684\u6b21\u6570\u662f\u539f\u6765\u7684\u4e24\u500d\uff01\n\u6bd4\u8d77\u9c8d\u52c3\uff0c\u770b\u5230\u4f60\u7684\u540c\u4e8b\u7b2c\u4e8c\u5929\u51c6\u65f6\u4f1a\u66f4\u591a\u5730\u6539\u53d8\u4f60\u7684\u4fe1\u5fc3\u3002\u4f60\u80fd\u7b97\u51fa\u5dee\u591a\u5c11\u94b1\u5417\uff1f\nFor You=1\uff1a20(\u4ee5\u524d\uff0c7\u5929\u4e2d\u67093\u5929\u8fdf\u5230)*(1\uff1a20)=1\uff1a400=400\u500d\u53ef\u80fd\u76f8\u4fe1\u4ed6\u4eec\u7684\u540c\u4e8b\u5e76\u4e0d\u201c\u603b\u662f\u201d\u8fdf\u5230\u3002\n\u5bf9\u4e8eBob=300\uff1a1(\u4ee5\u524d\uff0c10\u5929\u4e2d\u67096\u5929\u8fdf\u5230)*(1\uff1a20)=15\uff1a1=15\u500d\u53ef\u80fd\u8ba4\u4e3a\u4ed6\u4eec\u7684\u540c\u4e8b\u201c\u603b\u662f\u201d\u8fdf\u5230\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u4e24\u4e2a\u4eba\u90fd\u9075\u5faa\u8d1d\u53f6\u65af\u89c4\u5219\uff0c\u4ed6\u4eec\u90fd\u4f1a\u671d\u7740\u76f8\u540c\u7684\u65b9\u5411\u66f4\u65b0\uff0c\u800c\u4e14\u66f4\u65b0\u7684\u767e\u5206\u6bd4\u4e5f\u662f\u76f8\u540c\u7684-\u8fd9\u662f\u7531\u4f3c\u7136\u6bd4\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u662f(1\uff1a20)\u3002\u518d\u6b21\u6ce8\u610f\u6570\u5b57\u611f\u89c9\u6709\u591a\u5947\u602a\uff0c\u6bd4\u5982\uff0c\u8fd9\u4e0d\u5e94\u8be5\u662f\u6b63\u786e\u7684\u3002\n\u7b2c\u4e8c\u79cd\u60c5\u51b5\u662f\u4eba\u4eec\u6839\u672c\u6ca1\u6709\u9075\u5faa\u8d1d\u53f6\u65af\u89c4\u5219\u3002\u8bb0\u4f4f\uff0c\u8d1d\u53f6\u65af\u662f\u5904\u65b9\uff0c\u4e0d\u662f\u63cf\u8ff0\uff01\u8fd9\u610f\u5473\u7740\u4e8b\u60c5\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff0c\u800c\u4e0d\u662f\u73b0\u5728\u8fd9\u6837\u3002\u8fd9\u5c31\u662f\u4e8b\u60c5\u53d8\u5f97\u4e0d\u660e\u6717\u7684\u5730\u65b9\u3002\u6211\u4eec\u5f88\u5bb9\u6613\u5c06\u53cd\u5bf9\u67d0\u4e00\u4fe1\u4ef0\u7684\u8bc1\u636e\u7f16\u7ec7\u6210\u652f\u6301\u67d0\u4e00\u4fe1\u4ef0\u7684\u8bc1\u636e\u3002\u7279\u522b\u662f\u5982\u679c\u5047\u8bbe\u4e0d\u662f\u5f88\u6e05\u695a\u7684\u8bdd\u3002\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u8fdb\u5165\u8fd9\u4e2a\u8bdd\u9898--\u53ea\u6709\u51e0\u4e2a\u9996\u5148\u8981\u653b\u51fb\u7684\u70b9\u5b50\u3002\n\u8d1d\u53f6\u65af\u5b9a\u7406\u5df2\u7ecf\u5b58\u5728\u4e86200\u5e74\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4eba\u4eec\u5df2\u7ecf\u7528\u9f7f\u8f6e\u8fdb\u884c\u4e86\u8bd5\u9a8c\uff0c\u4ee5\u5f97\u51fa\u6700\u4f73\u5b9e\u8df5\u3002\u591a\u4e8f\u4e86\u8fd9\u4e9b\u4eba\uff0c\u6211\u4eec\u5c06\u63a2\u7d22\u7531\u8d1d\u53f6\u65af\u5b9a\u7406\u9a71\u52a8\u76844\u4e2a\u60f3\u6cd5\u3002\u638c\u63e1\u8fd9\u4e9b\u662f\u6210\u4e3a\u66f4\u597d\u7684\u601d\u8003\u8005\u7684\u5173\u952e\u3002\n\u5728\u8fd9\u4e2a\u955c\u5934\u91cc\uff0c\u4e16\u754c\u662f\u6982\u7387\u7684\u3002\u57fa\u4e8e\u4f60\u5bf9\u4e16\u754c\u7684\u4e86\u89e3\uff0c\u4efb\u4f55\u4e8b\u60c5\u90fd\u6709\u53d1\u751f\u7684\u53ef\u80fd\u6027\u3002\u6982\u7387\u662f\u4f60\u56fa\u6709\u7684\uff0c\u800c\u4e0d\u662f\u7269\u4f53\u6216\u60c5\u51b5\u3002\n\u4f8b\u5982\uff0c\u5728\u67aa\u6218\u4e2d\u53d1\u52a8\u88ad\u51fb\u5728\u4f60\u770b\u6765\u53ef\u80fd\u662f\u4e0d\u53ef\u4fe1\u7684\uff0c\u4f46\u9ed1\u624b\u515a\u66b4\u5f92\u4f1a\u4e0d\u540c\u610f\u3002\u4f60\u5bf9\u4e16\u754c\u7684\u4e86\u89e3\u51b3\u5b9a\u4e86\u4f60\u7684\u6982\u7387\u3002\u8fd9\u4e9b\u6982\u7387\u662f\u4f60\u5bf9\u67d0\u4e00\u4fe1\u4ef0\u7684\u4fe1\u5fc3\u3002\n\u4f60\u9047\u5230\u4e00\u4f4d\u6570\u5b66\u5bb6\uff0c\u5979\u544a\u8bc9\u4f60\u5979\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\u4f60\u95ee\u4ed6\u4eec\u4e2d\u662f\u5426\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u7537\u5b69\u3002\u5979\u8bf4\u53ef\u4ee5\u3002\u7136\u540e\u4f60\u51b3\u5b9a\u4ed6\u4eec\u4e24\u4e2a\u90fd\u662f\u7537\u5b69\u7684\u6982\u7387\u4e00\u5b9a\u662f\u4e09\u5206\u4e4b\u4e00\u3002\n\u4f60\u4f1a\u9047\u5230\u53e6\u4e00\u4f4d\u6570\u5b66\u5bb6\u3002\u5979\u544a\u8bc9\u4f60\u5979\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\u4f60\u95ee\u5927\u4e00\u70b9\u7684\u662f\u4e0d\u662f\u7537\u5b69\u3002\u5979\u8bf4\u53ef\u4ee5\u3002\u7136\u540e\u4f60\u51b3\u5b9a\u4ed6\u4eec\u4e24\u4e2a\u90fd\u662f\u7537\u5b69\u7684\u6982\u7387\u4e00\u5b9a\u662f1/2\u3002\n\u4f60\u4f1a\u9047\u5230\u53e6\u4e00\u4f4d\u6570\u5b66\u5bb6\u3002\u5979\u544a\u8bc9\u4f60\u5979\u6709\u4e24\u4e2a\u5b69\u5b50\u3002\u4f60\u95ee\u5e74\u8f7b\u7684\u90a3\u4e2a\u662f\u4e0d\u662f\u7537\u5b69\u3002\u5979\u8bf4\u53ef\u4ee5\u3002\u7136\u540e\u4f60\u51b3\u5b9a\u4ed6\u4eec\u4e24\u4e2a\u90fd\u662f\u7537\u5b69\u7684\u6982\u7387\u4e00\u5b9a\u662f1/2\u3002\n\u5982\u679c\u4ed6\u4eec\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u662f\u7537\u5b69\uff0c\u90a3\u4e48\u65e0\u8bba\u662f\u5927\u7684\u8fd8\u662f\u5c0f\u7684\u90fd\u662f\u7537\u5b69\u3002\u90a3\u662f\u600e\u4e48\u56de\u4e8b\u5462\uff1f\u4e3a\u4ec0\u4e48\u6982\u7387\u4e0d\u540c\u5462\uff1f\u5982\u679c\u5b69\u5b50\u5929\u751f\u5c31\u662f\u7537\u5b69\uff0c\u90a3\u4e48\u7b54\u6848\u5e94\u8be5\u603b\u662f\u4e00\u6837\u7684\u3002\n\u6982\u7387\u662f\u4e0d\u540c\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u95ee\u9898\u544a\u8bc9\u4f60\u5173\u4e8e\u8fd9\u4e2a\u4e16\u754c\u7684\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u6bcf\u4e2a\u95ee\u9898\u643a\u5e26\u7684\u4fe1\u606f\u91cf\u4e0d\u540c\u3002\n\u6ce8\u610f\u8fd9\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u4ee5\u4e0d\u540c\u4e8e\u4e0b\u9762\u7684\u65b9\u5f0f\u5207\u5206\u53ef\u80fd\u6027\u7684\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u53ea\u5220\u9664\u4e86\u4e00\u4e2a\u53ef\u80fd\u6027GG\uff0c\u800c\u53e6\u5916\u4e24\u4e2a\u95ee\u9898\u5206\u522b\u5220\u9664\u4e86\u4e24\u4e2a\u53ef\u80fd\u6027\u30027\u4e2a\u3002\n\u540c\u6837\u7684\u60f3\u6cd5\u4e5f\u9002\u7528\u4e8e\u627e\u51fa\u4f60\u7684\u524d\u79d1\u3002\u4e0d\u540c\u7684\u4eba\u5f97\u51fa\u4e0d\u540c\u7684\u6982\u7387\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u6982\u7387\u662f\u89c2\u5bdf\u8005\u7684\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u5bf9\u8c61\u7684\u5c5e\u6027\uff01\u6982\u7387\u4ee3\u8868\u4f60\u7684\u4fe1\u5ff5\u548c\u4fe1\u606f\u3002\u592a\u9633\u6ca1\u6709\u6982\u7387\uff0c\u662f\u4f60\u76f8\u4fe1\u5b83\u6bcf\u5929\u90fd\u4f1a\u5347\u8d77\u3002\u4f60\u76f8\u4fe1\u591a\u5c11\u53ef\u4ee5\u968f\u7740\u4f60\u6d3b\u7740\u7684\u5929\u6570\uff0c\u6216\u8005\u4eba\u7c7b\u5b58\u6d3b\u5e76\u8bb0\u5f55\u592a\u9633\u7684\u5929\u6570\uff0c\u6216\u8005\u5982\u679c\u4f60\u76f8\u4fe1\u79d1\u5b66\u5bb6\u548c\u4ed6\u4eec\u7684\u65b9\u6cd5-\u6570\u5341\u4ebf\u5e74\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u4f4f\u5728\u5317\u6781\u6216\u5357\u6781\u9644\u8fd1\uff0c\u4f60\u7684\u524d\u79d1\u80af\u5b9a\u4f1a\u4e0d\u540c\u3002\u592a\u9633\u7684\u5b58\u5728\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u6bcf\u5929\u90fd\u4f1a\u5347\u8d77\u3002\n\u5728\u7b2c2\uff0c4\uff0c6\u4e2a\u6e38\u620f\u4e2d\uff0c\u5f53\u4f60\u53d1\u73b0\u66f4\u591a\u652f\u6301\u4f60\u7684\u5047\u8bbe\u7684\u8bc1\u636e\u65f6\uff0c\u4f60\u7684\u4fe1\u5ff5\u4f1a\u53d8\u5f97\u66f4\u52a0\u575a\u5b9a\u3002\u8fd9\u4e2a\u6e38\u620f\u662f\u6b8b\u9177\u7684\uff1a\u4e00\u6b21\u5931\u8d25\uff0c\u8fd9\u4e2a\u5047\u8bbe\u5c31\u7ed3\u675f\u4e86\u3002\u8fd9\u662f\u8be5\u5047\u8bbe\u7684\u4e00\u4e2a\u6027\u8d28\u3002\u4f60\u80fd\u67e5\u51fa\u662f\u4ec0\u4e48\u623f\u4ea7\u5417\uff1f\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u8bb2\u5230\u7684\u3002\n\u73b0\u5b9e\u751f\u6d3b\u4e2d\u7684\u5047\u8bbe\u901a\u5e38\u4e0d\u662f\u8fd9\u6837\u7684\u3002\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u6a21\u7cca\u4e86\u3002\u56e0\u6b64\uff0c\u6839\u636e\u60a8\u627e\u5230\u7684\u8bc1\u636e\uff0c\u60a8\u7684\u589e\u91cf\u53ef\u80fd\u4f1a\u4e0a\u4e0b\u6d6e\u52a8\u3002\u5728\u5b9e\u8df5\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u4e0d\u8981\u4ee5\u8868\u9762\u4ef7\u503c\u6765\u770b\u5f85\u6700\u65b0\u7684\u8bc1\u636e\u3002\u603b\u662f\u628a\u5b83\u4e0e\u4f60\u5df2\u7ecf\u77e5\u9053\u7684\u4e1c\u897f\u653e\u5728\u4e00\u8d77\u3002\n\u5c31\u50cf\u5728\u8fdf\u5230\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e0d\u589e\u91cf\u66f4\u65b0\u4f1a\u662f\u8fd9\u6837\u7684\uff1a\u4ed6\u4eec\u4eca\u5929\u8fdf\u5230\u4e86\uff0c\u6240\u4ee5\u6211\u76f8\u4fe1\u201c\u4ed6\u4eec\u603b\u662f\u8fdf\u5230\u201d\u3002\u6ce8\u610f\u4f60\u505a\u8fd9\u4ef6\u4e8b\u7684\u9891\u7387\u3002\n\u5f53\u7136\uff0c\u6211\u4eec\u505a\u9519\u4e8b\u4e5f\u4e0d\u662f\u5341\u5168\u5341\u7f8e\u7684\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u51c6\u65f6\uff0c\u6211\u4f1a\u76f8\u4fe1\u201c\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u51c6\u65f6\u3002\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u201c\uff0c\u800c\u4e0d\u662f\u8bf4\uff0c\u4ed6\u4eec\u603b\u662f\u51c6\u65f6\u3002\u8fd9\u5c31\u662f\u6240\u8c13\u7684\u52a8\u673a\u63a8\u7406\u3002\n\u5728\u6211\u4eec\u7684\u793a\u4f8b\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u975e\u5e38\u660e\u786e\u3002\u5f53\u7136\uff0c\u6211\u4eec\u4f1a\u9010\u6b65\u66f4\u65b0\u3002\u4e22\u5f03\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u7684\u6240\u6709\u4fe1\u606f\u5c06\u662f\u611a\u8822\u7684\u3002\n\u5f53\u621114\u5c81\u7684\u65f6\u5019\uff0c\u6211\u542c\u8bf4\u4e3e\u91cd\u953b\u70bc\u4f1a\u963b\u788d\u4f60\u7684\u6210\u957f\u3002\u6211\u76f8\u4fe1\u201c\u953b\u70bc\u662f\u90aa\u6076\u7684\uff0c\u6bcf\u4e2a\u5927\u4e2a\u5b50\u90fd\u5403\u7c7b\u56fa\u9187\u201d\u3002\n\u5f53\u621115\u5c81\u7684\u65f6\u5019\uff0c\u6211\u542c\u8bf4\u4f60\u53ef\u4ee5\u53ea\u7528\u4f60\u7684\u4f53\u91cd\u6765\u953b\u70bc\u8eab\u4f53\u3002\u8fd9\u4e0d\u4f1a\u963b\u788d\u589e\u957f\u3002\u6211\u76f8\u4fe1\u201c\u4f53\u91cd\u953b\u70bc\u80fd\u51cf\u6389\u4f53\u91cd\u771f\u662f\u592a\u68d2\u4e86\u201d\u3002\n\u51e0\u5468\u540e\uff0c\u6ca1\u6709\u6536\u83b7\uff0c\u6211\u5f88\u6cae\u4e27\u3002\u6211\u76f8\u4fe1\u201c\u8fd9\u4e9b\u90fd\u4e0d\u7ba1\u7528\u3002\u8fd9\u4e9b\u90fd\u662f\u4f01\u4e1a\u8d5a\u94b1\u7684\u9a97\u5c40\u3002\u201c\u3002\u6211\u4e0d\u77e5\u9053\u5230\u5e95\u662f\u8c01\u5728\u4ece\u6211\u7684\u4f53\u91cd\u8bad\u7ec3\u4e2d\u8d5a\u94b1\uff0c\u4f46\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u6211\u4e0d\u662f\u4e00\u4e2a\u6279\u5224\u6027\u7684\u601d\u60f3\u5bb6\u3002\n\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u505a\u4e86\u81ea\u5df1\u7684\u7814\u7a76\u3002\u6211\u660e\u767d\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\uff0c\u5b83\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u953b\u70bc\uff0c\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u4f60\u953b\u70bc\u4e86\u591a\u4e45\uff0c\u8fd8\u53d6\u51b3\u4e8e\u4f60\u5403\u4e86\u4ec0\u4e48\u3002\n\u6211\u5f00\u59cb\u9010\u6b65\u66f4\u65b0\u3002\u6211\u628a\u6bcf\u4e00\u4ef6\u8bc1\u636e\u4e0e\u6211\u5230\u76ee\u524d\u4e3a\u6b62\u770b\u5230\u7684\u4e00\u5207\u8054\u7cfb\u8d77\u6765\u3002\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u7528\u7c7b\u56fa\u9187\u3002\u529b\u91cf\u8bad\u7ec3\u81f3\u5c11\u5bf9\u67d0\u4e9b\u4eba\u6709\u6548\u3002\u95f4\u6b47\u6027\u7981\u98df\u548c\u8dd1\u6b65\u5bf9\u5176\u4ed6\u4eba\u6709\u6548\u3002\u8003\u8651\u5230\u6240\u6709\u4e0d\u540c\u7684\u548c\u76f8\u4e92\u77db\u76fe\u7684\u8bc1\u636e\uff0c\u6211\u4e0d\u53ef\u80fd\u5bf9\u4efb\u4f55\u5173\u4e8e\u953b\u70bc\u7684\u4fe1\u5ff5\u6709\u63a5\u8fd190%\u7684\u4fe1\u5fc3\u3002\n\u6ca1\u6709\u589e\u91cf\u66f4\u65b0\u7684\u4e00\u4e2a\u6807\u5fd7\u662f\u4fe1\u5ff5\u4e4b\u95f4\u7684\u53cd\u590d\u65e0\u5e38\u3002\u4f60\u4eca\u5929\u770b\u5230\u7684\u8bc1\u636e\u662f\u5b8c\u5168\u771f\u5b9e\u7684\u3002\n\u53e6\u4e00\u79cd\u5931\u8d25\u6a21\u5f0f\u662f\u6392\u7ec3\u4f60\u7684\u8bba\u70b9\u3002\u5f53\u4e00\u4e2a\u4e89\u8bba\u4e0d\u65ad\u5730\u6d6e\u73b0\u5728\u4f60\u7684\u8111\u6d77\u4e2d\u65f6\uff0c\u90a3\u5c31\u662f\u6ca1\u6709\u5faa\u5e8f\u6e10\u8fdb\u5730\u66f4\u65b0\u3002\u4f60\u62ff\u51fa\u4f60\u5df2\u7ecf\u7528\u8fc7\u7684\u540c\u6837\u7684\u8bc1\u636e\u6765\u589e\u5f3a\u4fe1\u5fc3\u3002\n\u4e00\u4e2a\u7c97\u7565\u7684\u4f8b\u5b50\u662f\uff0c\u9762\u5bf9\u65b0\u7684\u5371\u9669\u60c5\u51b5\u65f6\uff0c\u5bf9\u81ea\u5df1\u91cd\u590d\u201c\u4e00\u5207\u90fd\u4f1a\u597d\u8d77\u6765\u7684\u201d\u3001\u201c\u4e00\u5207\u90fd\u4f1a\u597d\u8d77\u6765\u7684\u201d\u3002\u6709\u65f6\u5019\uff0c\u6709\u5fc5\u8981\u8ba9\u4f60\u7684\u795e\u7ecf\u5e73\u9759\u4e0b\u6765\u3002\u5176\u4ed6\u65f6\u5019\uff0c\u5c31\u50cf\u80a1\u5e02\u6ce1\u6cab\u4e00\u6837\uff0c\u5f53\u8bc1\u636e\u8868\u660e\u9519\u8bef\u7684\u4fe1\u5ff5\u4e0d\u6210\u7acb\u65f6\uff0c\u662f\u4f60\u5f3a\u5316\u4e86\u9519\u8bef\u7684\u4fe1\u5ff5\u3002\n\u5728\u4e00\u4e2a\u4f60\u949f\u7231\u7684\u7406\u8bba\u5e76\u4e0d\u6b63\u786e\u7684\u4e16\u754c\u91cc\uff0c\u4f60\u4f1a\u671f\u671b\u770b\u5230\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f\u5417\uff1f\n\u57282\uff0c4\uff0c6\u6e38\u620f\u4e2d\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u6d4b\u8bd5\u4efb\u4f55\u4f60\u8ba4\u4e3a\u662f\u9519\u8bef\u7684\u4e1c\u897f\uff0c\u4f60\u53ea\u80fd\u627e\u5230\u652f\u6301\u4f60\u7684\u5047\u8bbe\u7684\u8bc1\u636e\u3002\u4f60\u53ea\u4f1a\u5bf9\u81ea\u5df1\u7684\u60f3\u6cd5\u66f4\u6709\u4fe1\u5fc3\u3002\n\u53cd\u8bc1\u8bc1\u636e\u662f\u4efb\u4f55\u4f60\u4e0d\u5e0c\u671b\u5728\u4f60\u7684\u5047\u8bbe\u4e2d\u9002\u7528\u7684\u4e1c\u897f\u3002\u5728\u7b2c2\uff0c4\uff0c6\u573a\u6bd4\u8d5b\u4e2d\uff0c\u8fd9\u4e9b\u60c5\u51b5\u662f\u60a8\u671f\u671b\u9ed1\u5323\u5b50\u8bf4\u201c\u4e0d\u201d\u7684\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u201c3\u5076\u6570\u9012\u589e\u201d\u5047\u8bbe\uff0c(1\uff0c2\uff0c3)\u548c(1\uff0c-1\uff0c2)\u90fd\u53ef\u80fd\u662f\u4e0d\u786e\u5b9a\u7684\u8bc1\u636e\u3002\n(1\uff0c-1\uff0c2)\u8868\u660e\u60a8\u7684\u5047\u8bbe\uff0c3\u5373\u4f7f\u662f\u6b63\u6570\u4e5f\u53ef\u80fd\u662f\u6b63\u786e\u7684\uff0c\u800c(1\uff0c2\uff0c3)\u8868\u660e\u5b83\u786e\u5b9e\u662f\u9519\u8bef\u7684\u3002\u60a8\u671f\u671b(1\uff0c2\uff0c3)\u4e3a\u201c\u5426\u201d\uff0c\u4f46\u5f97\u5230\u7684\u7ed3\u679c\u662f\u201c\u662f\u201d\u30028\u4e2a\u3002\n\u5728\u8fdf\u5230\u7684\u4f8b\u5b50\u4e2d\uff0c\u9a8c\u8bc1\u201c\u603b\u662f\u8fdf\u5230\u201d\u5047\u8bbe\u7684\u8bc1\u636e\u662f\u5bfb\u627e\u4f60\u7684\u540c\u4e8b\u51c6\u65f6\u5230\u8fbe\u7684\u65f6\u95f4\u3002\u6211\u4eec\u5f80\u5f80\u4f1a\u5fd8\u8bb0\u8fd9\u4e00\u70b9\uff0c\u53ea\u770b\u4ed6\u4eec\u8fdf\u5230\u7684\u65f6\u95f4\u3002\u8fd9\u5bfc\u81f4\u4e86\u65b0\u7684\u95ee\u9898\u3002\n\u9664\u975e\u4f60\u627e\u5230\u4e0d\u786e\u51ff\u7684\u8bc1\u636e\u5e76\u68c0\u9a8c\u4f60\u7684\u5047\u8bbe\uff0c\u5426\u5219\u4f60\u7684\u4fe1\u5ff5\u5c31\u662f\u4e00\u5ea7\u73bb\u7483\u57ce\u5821\u3002\u73bb\u7483\u57ce\u5821\u662f\u6613\u788e\u7684\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4e0d\u8bc1\u5b9e\u8bc1\u636e\u7684\u4f5c\u7528\u662f\u6467\u6bc1\u57ce\u5821\uff0c\u6216\u8005\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u8ba9\u5b83\u4eec\u53d8\u5f97\u66f4\u575a\u56fa\u3002\n\u5927\u8111\u7684\u81ea\u7136\u53cd\u5e94\u662f\u4fdd\u62a4\u8fd9\u5ea7\u73bb\u7483\u57ce\u5821\u3002\u5927\u8111\u5c06\u4e0d\u786e\u5b9a\u7684\u8bc1\u636e\u89c6\u4e3a\u653b\u51fb\uff0c\u800c\u4e0d\u662f\u611f\u6fc0\uff0c\u6211\u4eec\u503e\u5411\u4e8e\u5c06\u65b0\u7684\u8bc1\u636e\u62d2\u4e4b\u95e8\u5916\u3002\u5982\u679c\u4f60\u628a\u4e0d\u786e\u5b9a\u7684\u8bc1\u636e\u5f53\u4f5c\u5783\u573e\u6765\u6d88\u9664\uff0c\u5f53\u7136\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u4e3b\u610f\u3002\u4f60\u603b\u662f\u66f4\u65b0\u4ee5\u793a\u652f\u6301\u3002\n\u4f60\u53ef\u4ee5\u57282\uff0c4\uff0c6\u6e38\u620f\u4e2d\u8f93\u5165\u4e00\u767e\u4e07\u4e2a\u9075\u5faa\u4f60\u6a21\u5f0f\u7684\u6570\u5b57\uff0c\u4e8b\u60c5\u770b\u8d77\u6765\u4f1a\u5f88\u597d\uff0c\u4f46\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u610f\u8bc6\u5230\u4f60\u7684\u5047\u8bbe\u662f\u53e6\u4e00\u4e2a\u5047\u8bbe\u7684\u5b50\u96c6(\u90fd\u662f\u6b63\u6570)-\u76f4\u5230\u6709\u4e00\u5929\u4f60\u7684\u5047\u8bbe\u8ba9\u4f60\u5931\u8d25\u4e86\u3002\u8d1d\u53f6\u65af\u5bf9\u6b64\u65e0\u80fd\u4e3a\u529b\u30029\u4e2a\u3002\n\u56e0\u6b64\uff0c\u4e00\u5b9a\u8981\u5bfb\u627e\u4e0d\u786e\u51ff\u7684\u8bc1\u636e\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u60a8\u53ef\u4ee5\u67e5\u627e\u4e0e\u60a8\u7684\u5047\u8bbe\u4e0d\u7b26\u7684\u6570\u636e\uff0c\u5c31\u50cf\u6211\u4eec\u4e0a\u9762\u6240\u505a\u7684\u90a3\u6837\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u5bfb\u627e\u80fd\u591f\u66f4\u597d\u5730\u89e3\u91ca\u4f60\u5df2\u7ecf\u62e5\u6709\u7684\u6570\u636e\u7684\u5047\u8bbe\u3002\u7528\u8d1d\u53f6\u65af\u7684\u8bdd\u8bf4\uff0c\u4f60\u662f\u5728\u5bfb\u627e\u5148\u524d\u8d54\u7387\u66f4\u9ad8\u7684\u5047\u8bbe\u3002\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5047\u8bbe\u90fd\u662f\u5e73\u7b49\u7684\u3002\u6709\u4e9b\u4eba\u80fd\u6bd4\u5176\u4ed6\u4eba\u66f4\u597d\u5730\u89e3\u91ca\u6570\u636e\u3002\n\u6731\u8389\u5a05\u00b7\u52a0\u5c14\u592b(Julia Galef)\u5c31\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u5979\u8ffd\u8e2a\u4e86\u670b\u53cb\u4e4b\u95f4\u7684\u5ac9\u5992\u3002\u4ec5\u4ec5\u56e0\u4e3a\u51ef\u4f26\u62b1\u6028\uff0c\u5e76\u4e0d\u610f\u5473\u7740\u5979\u5ac9\u5992\u3002\u4e5f\u8bb8\u4efb\u4f55\u7406\u667a\u7684\u4eba\u90fd\u4f1a\u8fd9\u4e48\u505a\u3002\n\u4f60\u6d3b\u8fc7\u7684\u6bcf\u4e00\u523b\u90fd\u662f\u4f60\u53ef\u4ee5\u7528\u6765\u8ba1\u7b97\u4e0b\u4e00\u6b65\u7684\u4fe1\u606f\u3002\n\u4e0a\u4e00\u6b21\u6211\u4eec\u3002\n.", "note_en": "Have you ever noticed how you can be fuming with anger one second, and absolutely calm the next?\n An asshole driver cuts you off on the highway, and you\u2019re raging. A moment later, you notice him pull into the hospital and your anger melts away. \u201cYeah, maybe he has a patient in the car with him. Or, maybe someone close is dying. I guess he\u2019s not an asshole after all.\u201d\n An obscure rule from Probability Theory, called Bayes Theorem, explains this very well. This 9,000 word blog post is a complete introduction to Bayes Theorem and how to put it to practice. In short, Bayes Theorem is a framework for critical thinking. By the end of this post, you\u2019ll be making better decisions, realise when you\u2019re being unreasonable, and also understand why some people believe in UFOs.\n It\u2019s a hefty promise, and there\u2019s a good chance of failure. Implementing these ideas will take emotional effort, but it\u2019s worth it.\n Thinking the driver is an asshole is normal. Bayes Theorem expects the same. The difference between Bayes and us is the intensity with which we believe. Most times, the seething anger isn\u2019t warranted. This is probably why we feel stupid about all that anger. It melts away so quickly! This is calibration - aligning our emotions to the intensity of the situation - which we\u2019ll cover as well.\n  There\u2019s no fancy math in this guide. We\u2019re using Probability Theory, but aren\u2019t going into the derivation, nor are we solving probability problems from school textbooks. These things are tedious without understanding the why. Instead, we\u2019ll understand why Bayes Theorem matters, and how to apply it.\n To begin with, let\u2019s play a game. Throughout this game,  notice how you feel about your decisions. Notice what decisions you\u2019re making, and notice how you find the answer.\n   There\u2019s a black box with a formula inside for generating 3 numbers. Your job is to try and guess this formula. The input box below is connected to the black box. If you give it 3 numbers, it\u2019s going to tell you whether they follow the formula or not. Separate each number with a comma.\n      Most people try some sequence of: (4,6,8), (1,2,3) \u2026 and end up with either increasing numbers, or increasing numbers that are even. Notice how you\u2019re pretty confident in your answer by the time you write it down. You\u2019ve tried a few examples, and  all of them made sense!\n  If my comment made your confidence waver, go ahead and try the input box again. See if you can find a pattern that works. The answer is at the bottom of this section, but don\u2019t skip ahead. Every sentence before that is setting up an important idea.\n    Indeed, that\u2019s all there is to it. I bet you\u2019ve also heard the famous formula: \\(E = mc^2 \\). That\u2019s all there is to mass-energy equivalence. However, figuring out how to harness nuclear energy is still a hard problem. The formula made it possible, but implementing it still took 40 years.\n It\u2019s the same with Bayes Theorem. The formula is exciting because of what it implies. We\u2019re discovering the nuclear energy version of Bayes Theorem.\n  To form accurate beliefs, you always start from the information you already have. You update beliefs. You don\u2019t discard everything you know.\n The first key component is a hypothesis (H) - the belief we\u2019re talking about.\n The second key component is the evidence (E) - what data do we have to support / reject the hypothesis.\n The third key component is probability (P) of the above two. This probability is our confidence in the belief.\n If you\u2019re familiar with probability theory, you learned this in school. If not, don\u2019t worry, there are  excellent mathematical introductions to explain it to you. We\u2019ll skip the math, and focus on how to use it.\n Our point of interest, and where bayes truly shines is where we compare two hypotheses. Instead of uncovering the absolute probabilities, which is hard, this focuses on how much more likely one hypothesis is, compared to another. Most reasoning in our mind takes this form.\n     Likelihood odds measure how well the evidence explains the current hypothesis, compared to the other one. We\u2019ll explore what this means with the help of examples.\n \\[ Likelihood \\hspace{2mm} Odds = \\frac{ Probability \\hspace{2mm} of \\hspace{2mm} evidence \\hspace{2mm} assuming \\hspace{2mm} hypothesis \\hspace{2mm} is \\hspace{2mm} true}{ Probability \\hspace{2mm} of \\hspace{2mm} evidence \\hspace{2mm} assuming \\hspace{2mm} competing \\hspace{2mm}hypothesis \\hspace{2mm} is \\hspace{2mm}true }\\]\n We\u2019ll start with the 2,4,6 game to show how qualitatively, math and intuition agree. Then we\u2019ll get into a simpler example where we\u2019re miscalibrated and do the math.\n I\u2019m going to choose my path through the 2,4,6 game, but I hope yours was similar enough. If not, try doing this on your own!\n I have a hypothesis I want to test, \\(H_{3even}\\) = 3 even numbers in increasing order. It\u2019s implicit here, but the hypothesis I\u2019m testing this against is \\(H_{not-3even}\\), or that the formula  is not 3 even numbers in increasing order.\n I input (4,6,8) and the black box says \u201cYes\u201d. My confidence in 3 even numbers rises. In Bayesian-speak, my posterior odds have increased, because the likelihood odds have increased. And the likelihood odds have increased, since the probability of (4,6,8) saying \u201cYes\u201d is higher when the formula is \\(H_{3even}\\).\n You\u2019ll notice how  you feel every new number that matches your hypothesis makes your belief stronger.\n I try (1,2,3) next. \u201cYes\u201d. What? I expected \u201cNo\u201d!\n Everything tumbles, like it should, when you find something that doesn\u2019t follow the pattern. The probability of (1,2,3) saying \u201cYes\u201d is higher with \\(H_{not-3even}\\), since (1,2,3) are not all even. The likelihood odds are in favour of \\(H_{not-3even}\\) now, which means we discard \\(H_{3even}\\). In this case, one small piece of evidence was enough to completely flip the scales.\n Then, which new hypothesis should you try? The clues usually lie in how you disproved the previous hypothesis.\n I tried (1,2,3) which said \u201cYes\u201d, when I expected it to say \u201cNo\u201d. My new hypothesis thus became \u201c3 increasing numbers\u201d.\n Just like in the previous case, (4,2,6) saying \u201cYes\u201d killed this hypothesis. My new hypothesis thus became \u201c3 positive numbers\u201d.\n I tried (-1,2,3), which said \u201cNo\u201d! This was all I needed to become reasonably confident in \u201c3 positive numbers\u201d. The more negative numbers I tried, the more confident I got.\n     Calibration is key. What we\u2019ve just shown is our thinking process, and how Bayes theorem is mostly aligned with it when we\u2019re thinking well. Bayes theorem updates beliefs in the same direction our brains do, but what changes is how much each piece of evidence influences us!\n With this next example, let\u2019s get into the basic math. We\u2019ll revisit the 2,4,6 game in a bit.\n  Your colleague is sometimes late to work. They\u2019ve been on time 4 times, and late 3 times the past week. How many more times would it take you to start believing they\u2019re \u201calways\u201d late?\n In my experience, just a few more times does the trick. But let\u2019s use Bayes to calibrate.\n Since there\u2019s no good reason to expect tardiness over punctuality, let\u2019s say the prior odds are 1:1.  2 The alternative hypothesis, the one we\u2019re testing against is \u201cnot always being late\u201d. To make this more concrete, let\u2019s say this means they\u2019re late only 10% of the time.  3\n We\u2019ll use the data we have to calculate the likelihood of being late. We want to contrast the data being late thrice, and on time 4 timeswith us believing that they\u2019re almost always on time, or almost always late. Remember, to figure this out, we imagine believing the first hypothesis, then judge how likely the data is. Then, we imagine believing the second hypothesis, and judge how likely the data is.\n  There are several ways to mathematically represent this data, from a binomial function to a beta distribution. However, we\u2019re not getting into that yet. Today is more about an intuitive explanation, one which you\u2019re more likely to use everyday. So try to imagine the odds for and against given this data.  4\n It\u2019s a bit surprising to me that for someone who\u2019s supposed to be always late, they\u2019re on time more times than not. So this evidence is pretty unlikely for our hypothesis, while much more plausible when they\u2019re not always late. I\u2019ll give it likelihood odds of 1:10.  5\n Now, the posterior odds are \\(1:10 * 1:1 = 1:10\\). So, they\u2019re 10 times less likely to be late than not.\n  Let\u2019s take this example further. Say we want to figure out how many more times would they have to be late to get the odds up to 100:1 ?\n     Thus, likelihood ratio = 100:1 / 1:10 = 1000:1. Which means, they\u2019ll have to be late for 12 days out of 20 to get these kind of odds.  6\n These numbers might feel weird. They are. We\u2019re not used to calibrating, and in this specific case, we\u2019re comparing two extreme hypotheses, which makes things weirder. Usually, this is a case of \u201cI don\u2019t know what the numbers mean\u201d. We\u2019ll explore this unsettling feeling in a bit.\n Neither hypothesis is close to what we\u2019d expect anymore. After all, the colleague is late just 12 out of 20 days!? Why aren\u2019t we considering another hypothesis - say, they\u2019re late 60% of the time? Try this hypothesis out, it should blow the other 2 out of the park. You can use  this calculator I built.\n For now, note that a little math helps us calibrate vastly better for the hypothesis we do have. It puts our emotions and thoughts into perspective.\n Also notice how we transformed the problem to become easier to grasp. Instead of applying the complicated version requiring pen and paper (what are the probabilities, what are the formulas, how do I find them?), we follow this \u201cold odds times current likelihood equals new odds\u201d.\n  When you have this model explaining how the \u201cideal you\u201d thinks, you get a  gears level understanding! This is epic because you can fiddle with the gears and see how your thinking changes. You can figure out best practices, and become a stronger thinker. This is exactly what we\u2019re going to do next.\n   Let\u2019s start grinding these gears. A meta-goal for this section is to make the gears visible to you. We are inching closer to the nuclear energy version of Bayes Theorem, but so far we\u2019ve just seen how it\u2019s possible. The next step is to learn how to do it ourselves.\n   Let\u2019s first assume they\u2019re Bayesian, and follow the rules. Can they reach different conclusions?\n Yes! The current data only gives us the likelihood odds. There\u2019s a second component, the priors, that are yet to be used! In the \u201cbeing late\u201d example, we thought them up using our background knowledge. This is why they\u2019re called priors: it\u2019s information we already have.\n It\u2019s plausible that two different people have different experiences, and different information. Which means, they can have different priors. Sometimes, these priors can get pretty strong. You, who has seen their colleague be late 3 out of 7 days will have different priors compared to Bob, who has seen their colleague be late 6 out of 10 days. Bob has seen your colleague be late twice as much!\n Seeing your colleague be on time the following day would change your confidence a lot more than Bob. Can you figure out by how much?\n For you = 1:20 (priors, 3 out of 7 days late) * (1:20) = 1:400 = 400x likely to believe their colleague is  not \u201calways\u201d late\n For Bob = 300:1 (priors, 6 out of 10 days late) * (1:20) = 15:1 = 15x likely to believe their colleague is \u201calways\u201d late\n But, if both people are following bayes rule, they\u2019ll both update in the same direction, and the same % amount - the one given by the likelihood ratio. That\u2019s (1:20) in this case. Notice again how the numbers feel weird, like, this shouldn\u2019t be correct.\n The second case is when people aren\u2019t following Bayes rule at all. Remember, Bayes is a prescription, not a description! Which means it\u2019s how things ought to be, not how they are. This is where things get murky. It\u2019s easy to spin evidence against a belief into evidence for. Especially if the hypothesis isn\u2019t clear cut. We\u2019ll get into this soon - just a few more ideas to attack first.\n  Bayes Theorem has been around for 200 years, and in this time people have experimented with the gears to come up with best practices. Thanks to these people, we\u2019ll explore 4 ideas driven from Bayes Theorem. Mastering these is key to becoming a better thinker.\n   In this lens, the world is probabilistic. Everything has a probability of happening, based on  your knowledge of the world. The probability is intrinsic to you, not the objects or situations.\n For example, attacking in a gun fight might seem implausible to you, but mafia thugs would disagree. Your knowledge of the world determines your probabilities. These probabilities are your confidence in a belief.\n  You meet a mathematician and she tells you she has two children. You ask if  atleast one of them is a boy. She says Yes. You then decide the probability of both of them being boys  must be 1/3.\n You meet another mathematician. She tells you she has two children. You ask if the  elder one is a boy. She says Yes. You then decide the probability of both of them being boys  must be 1/2.\n You meet another mathematician. She tells you she has two children. You ask if the  younger one is a boy. She says Yes. You then decide the probability of both of them being boys  must be 1/2.\n If at least one of them is a boy, then either the elder or the younger one is a boy. So what gives? Why are the probabilities different? If the children had an inherent property of being boys, the answer should always be the same.\n The probabilities are different because each question tells you something different about the world. Each question carries different amounts of information.\n   Notice how the question slices the possibilities differently than below. The first question removes only one possibility, GG, while the other two questions remove two possibilities, each.  7\n  This same idea applies to figuring out your priors. It\u2019s okay for different people to arrive at different odds because the probability is a function of the observer, not a property of the objects! Probabilities represent your beliefs and information. The sun has no probability, it\u2019s you who believes it will rise everyday. And how much you believe can scale with the number of days you\u2019ve been alive, or the number of days humanity has survived and recorded the sun, or if you believe the scientists and their methods - a few billion years. Of course, if you\u2019re living near the North or South pole, your priors are bound to be different. Just because the sun exists doesn\u2019t mean it rises everyday.\n    In the 2,4,6 game your belief becomes stronger as you discover more evidence in favour of your hypothesis.The game is brutal: One failure and it\u2019s game over for the hypothesis. This is a  property of the hypothesis. Can you figure out what property? We\u2019ll get to it soon\n Real life hypotheses are usually not like that. Things are more fuzzy. Hence, your increments can tumble up and down depending on the evidence you find. In practice, this means not taking the newest evidence at face value. Always keep it in context with what you already know.\n Like in the being late example, not updating incrementally would look something like: They\u2019re late today, so I believe \u201cthey\u2019re always late\u201d. Notice how often you do this.\n Of course, we\u2019re not perfect at doing it wrong, either. If they\u2019re on time instead, I\u2019ll believe \u201cEveryone is supposed to be on time. No big deal\u201d, instead of, say, they\u2019re always on time. This is called motivated reasoning.\n  In the context of our examples, this seems very clear cut.  Of course we\u2019ll update incrementally. It would be dumb to discard all the information we\u2019ve already acquired.\n  When I was 14, I heard how working out with weights can stunt your growth. I believed \u201cWorking out is evil and every big guy takes steroids\u201d.\n When I was 15, I heard how you can workout using just your body weight. That doesn\u2019t stunt growth. I believed \u201cBody weight workouts are amazing to get buffed\u201d.\n A few weeks later, with no gains, I was dejected. I believed \u201cNone of this works. It\u2019s all a sham for corporations to make money.\u201d I didn\u2019t know who exactly was making money from my bodyweight workouts, but then again, I wasn\u2019t a critical thinker.\n Since then, I\u2019ve done my own research. I understand how it\u2019s a complex problem that depends not just on working out, not just on how long you work out, but also on what you\u2019re eating.\n I began updating incrementally. I took each piece of evidence in context with everything I had seen so far. Not everyone does steroids. Strength training works for at least some people. Intermittent fasting and running works for others. There\u2019s no way, given all the diverse and contradicting evidence, that I can have close to 90% confidence in any belief about working out.\n A sign of not updating incrementally is flip flopping between beliefs. You\u2019re taking the evidence you\u2019ve seen today as the complete truth.\n Another failure mode is  rehearsing your arguments. When one argument keeps coming back to your mind again and again, that\u2019s a case of failing to update incrementally. You\u2019re pitting the same evidence, which you\u2019ve used already, to bloat up confidence.\n A crude example of this is repeating to yourself \u201cIt\u2019s going to be alright\u201d, \u201cIt\u2019s going to be alright\u201d when facing a new risky situation. Sometimes, it\u2019s necessary to calm your nerves. Other times, like the stock market bubbles, it\u2019s you reinforcing a wrong belief when evidence points against it.\n  In a world where your pet theory is not true, would you expect to see something different?\n In the 2,4,6 game, if you don\u2019t test anything that you expect to be false, you can only ever find evidence in favour of your hypothesis. You can only become more confident in your ideas.\n Disconfirming evidence is anything you don\u2019t expect to fit in your hypothesis. In the 2,4,6 game these are situations where you expect the black box to say \u201cNo.\u201d So, for the hypothesis \u201c3 even increasing numbers\u201d, (1,2,3) and (1,-1,2) are both possible disconfirming evidence.\n (1,-1,2) shows you that your hypothesis, 3 even positive numbers might still be correct, while (1,2,3) shows you that it\u2019s indeed wrong. You expected a No for (1,2,3) but got a Yes.  8\n In the being late example, disconfirming evidence for the \u201calways late\u201d hypothesis is looking for times when your colleague came on time. We tend to forget that, looking only at the times they were late. This leads to new problems.\n Until you find disconfirming evidence and test your hypothesis, your beliefs are a castle of glass. And castles of glass are fragile. Indeed, the role of disconfirming evidence is to destroy castles, or make them stronger in the process.\n The brain\u2019s natural reaction is to protect this castle of glass. The brain views disconfirming evidence as attacks, and instead of being grateful, we tend to shut out the new evidence. If you dispel disconfirming evidence as rubbish,  of course you\u2019ll never change your mind. You\u2019re always updating in favour.\n You could input a million numbers that follow your pattern in the 2,4,6 game, and things would look good, but you\u2019d never realise how your hypothesis is a subset of another (all positive numbers) - until one day your assumption fails you. There\u2019s nothing Bayes can do about this.  9\n Thus, always seek disconfirming evidence. To do so, you can look for data that doesn\u2019t fit your hypothesis, like we did above. The other way is to look for hypotheses that can better explain the data you already have. In Bayes-speak, you\u2019re looking for hypotheses with better prior odds. Not all hypotheses are created equal. Some can explain the data better than others.\n Julia Galef has a good example of this,  tracking jealousy between friends. Just because Karen complains, doesn\u2019t mean she\u2019s jealous. Perhaps any reasonable person would do the same.\n  Every moment you\u2019ve lived is information you can use to figure out the next step\n Last we\n......", "posttime": "2020-08-05 16:46:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u601d\u7ef4,\u5b9a\u7406,theorem,\u5047\u8bbe", "title": "\u8d1d\u53f6\u65af\u5b9a\u7406\uff1a\u6279\u5224\u6027\u601d\u7ef4\u7684\u6846\u67b6", "title_en": "Bayes Theorem: A Framework for Critical Thinking", "transed": 1, "url": "https://neilkakkar.com/Bayes-Theorem-Framework-for-Critical-Thinking.html", "via": "", "real_tags": ["\u601d\u7ef4", "\u5b9a\u7406", "theorem", "\u5047\u8bbe"]}, {"category": "", "categoryclass": "", "imagename": "94933eb99dd7288b948a53b234f49450.png", "infoid": 1016360, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6210\u957f\u8fc7\u7a0b\u4e2d\uff0c\u5f7c\u5f97\u00b7\u5e0c\u52d2\u770b\u7740\u4ed6\u7684\u6bcd\u4eb2\u6bcf\u5929\u51cc\u66682\u70b9\u62163\u70b9\u8d77\u5e8a\uff0c\u4e3a\u5979\u7684\u9910\u996e\u4e1a\u52a1\u505a\u51c6\u5907\u3002\u5e0c\u52d2\u544a\u8bc9TechCrunch\uff0c\u5bf9\u4e8e\u8bb8\u591a\u5728\u5370\u5c3c\u62e5\u6709\u5c0f\u98df\u54c1\u4f01\u4e1a\u7684\u4eba\u6765\u8bf4\uff0c\u201c\u4e00\u5207\u90fd\u662f\u81ea\u5df1\u5904\u7406\u7684\uff0c\u6240\u4ee5\u6211\u771f\u7684\u3001\u771f\u7684\u60f3\u521b\u5efa\u4e00\u4e2a\u7cfb\u7edf\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5\u6709\u66f4\u597d\u7684\u8fd0\u8425\uff0c\u83b7\u5f97\u66f4\u9ad8\u8d28\u91cf\u7684\u751f\u6d3b\u3002\u201d\n\u4ed6\u7684\u521d\u521b\u516c\u53f8Wahyoo\u6210\u7acb\u4e8e2017\u5e74\uff0c\u65e8\u5728\u5e2e\u52a9\u540d\u4e3awarung Makan\u7684\u5c0f\u9910\u9986\u5b9e\u73b0\u66f4\u591a\u4efb\u52a1\u7684\u6570\u5b57\u5316\u548c\u81ea\u52a8\u5316\uff0c\u4ece\u8ba2\u8d2d\u7269\u8d44\u5230\u7ba1\u7406\u8d22\u52a1\u3002\u4eca\u5929\uff0cWahyoo\u5ba3\u5e03\uff0c\u5b83\u5df2\u7ecf\u5728\u7531Intudo Ventures\u7275\u5934\u7684\u9996\u8f6e\u878d\u8d44\u4e2d\u7b79\u96c6\u4e86500\u4e07\u7f8e\u5143\uff0cIntudo Ventures\u662f\u4e00\u5bb6\u4e13\u6ce8\u4e8e\u5370\u5c3c\u7684\u98ce\u9669\u6295\u8d44\u516c\u53f8\u3002\n\u8fd9\u8f6e\u878d\u8d44\u7684\u5176\u4ed6\u6295\u8d44\u8005\u5305\u62ecKinesys\u96c6\u56e2\u3001Amatil X(\u4e16\u754c\u4e94\u5927\u53ef\u53e3\u53ef\u4e50\u88c5\u74f6\u5546\u4e4b\u4e00\u7684\u53ef\u53e3\u53ef\u4e50Amatil\u7684\u4f01\u4e1a\u98ce\u9669\u6295\u8d44\u8ba1\u5212)\u3001Arkblu Capital\u3001Indogen Capital\u3001Selera Kapital\u3001Gratyo Universal\u5370\u5ea6\u5c3c\u897f\u4e9a\u548cIsenta Hioe\u3002\u8fd9\u7b14\u8d44\u91d1\u5c06\u7528\u4e8e\u62db\u8058\u5458\u5de5\uff0c\u5f00\u53d1Wahyoo\u7684\u6280\u672f\u5e73\u53f0\uff0c\u5e76\u5411\u5927\u96c5\u52a0\u8fbe\u5730\u533a\u4ee5\u5916\u7684\u5730\u533a\u6269\u5f20\u3002\n\u5728\u4e00\u4efd\u5173\u4e8e\u8fd9\u9879\u6295\u8d44\u7684\u65b0\u95fb\u58f0\u660e\u4e2d\uff0cIntudo Ventures\u521b\u59cb\u5408\u4f19\u4ebaPatrick Yip\u8868\u793a\uff1a\u201c\u4e2d\u5c0f\u4f01\u4e1a\u662f\u5370\u5c3c\u7ecf\u6d4e\u589e\u957f\u7684\u4e3b\u8981\u5f15\u64ce\u4e4b\u4e00\uff0c\u6b63\u5728\u901a\u8fc7\u50cfWahyoo\u8fd9\u6837\u7684\u65b0\u7684\u521b\u65b0\u4f01\u4e1a\u8fdb\u884c\u8f6c\u578b\uff0c\u4e3a\u5168\u56fd\u7684\u5c0f\u4f01\u4e1a\u4e3b\u5e26\u6765\u66f4\u5927\u7684\u7ecf\u6d4e\u7e41\u8363\u3002\u901a\u8fc7\u516c\u53f8\u7684\u6570\u5b57\u5316\u52aa\u529b\uff0cWahyoo\u5bf9Wwarung Makan\u4e1a\u52a1\u7684\u9ad8\u5ea6\u9488\u5bf9\u6027\u652f\u6301\u6b63\u5728\u4e3a\u5370\u5c3c\u7684\u5de5\u85aa\u9636\u5c42\u521b\u9020\u79ef\u6781\u7684\u7ecf\u6d4e\u548c\u793e\u4f1a\u5f71\u54cd\u3002\nWahyoo\u51e0\u4e4e\u6b63\u597d\u5728\u4e00\u5e74\u524d\u63a8\u51fa\u4e86\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\u5df2\u7ecf\u6709\u5927\u7ea613,800\u4eba\u767b\u4e0a\u4e86Warung Makan\u3002\u8be5\u516c\u53f8\u7684\u8054\u5408\u521b\u59cb\u4eba\u662f\u9996\u5e2d\u6267\u884c\u5b98\u5e0c\u52d2(Sheeller)\u3001\u9996\u5e2d\u8fd0\u8425\u5b98\u4e39\u5c3c\u5c14\u00b7\u5361\u54c8\u8fea(Daniel Cahyadi)\u548c\u9996\u5e2d\u6280\u672f\u5b98\u8fc8\u514b\u5c14\u00b7\u8fea\u54c8\u8d3e(Michael Dihardja)\u3002\n\u5370\u5c3c\u7ea6\u67092.68\u4ebf\u4eba\u53e3\uff0c\u662f\u4e1c\u5357\u4e9a\u6700\u5927\u7684\u5e02\u573a\uff0c\u5df2\u7ecf\u6709\u4e00\u4e9b\u521d\u521b\u516c\u53f8\uff0c\u5982Warung Pintar\u548cBakuWarung\uff0c\u4e13\u6ce8\u4e8e\u5e2e\u52a9Warung(\u5373\u8857\u89d2\u5c0f\u5546\u5e97)\u5b9e\u73b0\u66f4\u591a\u4e1a\u52a1\u7684\u6570\u5b57\u5316\u3002\n\u5e0c\u52d2\u8bf4\uff0c\u4ed6\u60f3\u628a\u91cd\u70b9\u653e\u5728\u5370\u5c3c\u7684\u9910\u9986\u4e0a\uff0c\u56e0\u4e3a\u201c\u6211\u7684\u80cc\u666f\u662f\u98df\u54c1\u884c\u4e1a\uff0c\u6211\u559c\u6b22\u4efb\u4f55\u4e0e\u98df\u7269\u76f8\u5173\u7684\u4e1c\u897f\u3002\u7b2c\u4e8c\uff0c\u6f5c\u529b\u975e\u5e38\u5927\uff0c\u56e0\u4e3a\u4ee5\u524d\u6ca1\u6709\u4eba\u6d89\u8db3\u8fc7\u8fd9\u79cd\u7c7b\u578b\u7684\u6218\u4e89\u3002\u6bcf\u4e2a\u4eba\u90fd\u4e13\u6ce8\u4e8e\u96f6\u552e\u4e1a\uff0c\u4f46\u6ca1\u6709\u4eba\u6d89\u8db3\u9910\u996e\u4e1a\u3002\u201c\u3002\nWahyoo\u76ee\u524d\u7ea6\u6709170\u540d\u5458\u5de5\uff0c\u5176\u4e2d\u5305\u62ec\u4e0eWarung Makan\u6240\u6709\u8005\u4f1a\u9762\u7684\u5b9e\u5730\u56e2\u961f\u3002\u5e0c\u52d2\u8bf4\uff0c\u8fd9\u4e9b\u9910\u9986\u201c\u901a\u5e38\u7531\u4e00\u4e2a\u5bb6\u5ead\u7ecf\u8425\uff0c\u4ee3\u4ee3\u76f8\u4f20\u201d\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5de5\u4f5c\u90fd\u662f\u624b\u5de5\u5b8c\u6210\u7684\uff0c\u5305\u62ec\u7c3f\u8bb0\u548c\u4e00\u5927\u65e9\u53bb\u5e02\u573a\u8d2d\u4e70\u98df\u6750\u3002\nWahyoo\u7684\u529f\u80fd\u5305\u62ec\u4ece\u81ea\u5df1\u7684\u4ed3\u5e93\u63d0\u4f9b\u6b21\u65e5\u6742\u8d27\u9001\u8d27\u670d\u52a1\uff0c\u4ee5\u53ca\u4e0e\u5e7f\u53d7\u6b22\u8fce\u7684\u9001\u8d27\u5e94\u7528Go Food\u7684\u96c6\u6210\u3002\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u8fd8\u8fd0\u8425\u7740\u4e00\u4e2a\u540d\u4e3aWahyoo Academy\u7684\u6559\u80b2\u9879\u76ee\uff0c\u63d0\u4f9b\u91d1\u878d\u8bfe\u7a0b\uff0c\u5e2e\u52a9Warung Makan\u6240\u6709\u8005\u589e\u52a0\u5ba2\u6237\u6d41\u91cf\u548c\u6536\u5165\uff0c\u5e76\u63d0\u4f9b\u5e7f\u544a\u548c\u54c1\u724c\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002\n\u4f8b\u5982\uff0cWahyoo\u5e73\u53f0\u4e0a\u7684\u4e00\u5bb6\u9910\u5385\u53ef\u4ee5\u901a\u8fc7\u5728\u95e8\u5e97\u4e2d\u653e\u7f6e\u5e7f\u544a\u6a2a\u5e45\u6216\u5c0f\u518c\u5b50\u6765\u8d5a\u94b1\u3002\u8fd9\u662fWahyoo\u8d5a\u94b1\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002\u5b83\u5bf9\u9910\u5385\u8001\u677f\u514d\u8d39\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7\u6536\u53d6\u4e00\u5b9a\u6bd4\u4f8b\u7684\u54c1\u724c\u4f63\u91d1\u6765\u8d5a\u53d6\u6536\u5165\u3002\n\u53e6\u4e00\u4e2a\u6536\u5165\u6765\u6e90\u662fWahyoo\u7684\u70b8\u9e21\u7279\u8bb8\u7ecf\u8425\u6743\uff0c\u5b83\u8ba9Warung Makan\u7684\u6240\u6709\u8005\u53ef\u4ee5\u9009\u62e9\u5728\u4ed6\u4eec\u7684\u5546\u5e97\u524d\u5f00\u8bbe\u4e00\u4e2a\u5c0f\u644a\u4f4d\u3002\u5b83\u76ee\u524d\u6709\u5927\u7ea6350\u4e2a\u644a\u4f4d\uff0c\u901a\u8fc7\u4e0e\u5370\u5c3c\u6700\u5927\u7684\u5bb6\u79bd\u4f9b\u5e94\u5546\u4e4b\u4e00\u5408\u4f5c\uff0c\u4fdd\u6301\u4f4e\u6210\u672c\u3002\u5e0c\u52d2\u8bf4\uff0c\u8be5\u516c\u53f8\u7684\u76ee\u6807\u662f\u5728\u4eca\u5e74\u5e74\u5e95\u524d\u5c06\u644a\u4f4d\u6570\u91cf\u589e\u52a0\u52301000\u4e2a\u3002\n\u867d\u7136\u7531\u4e8e\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\uff0cWahyoo\u4e0a\u7684\u9910\u9986\u57284\u6708\u548c5\u6708\u7684\u4e1a\u52a1\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u5e0c\u52d2\u8868\u793a\uff0c\u4e1a\u52a1\u57286\u6708\u548c7\u6708\u5f00\u59cb\u6062\u590d\uff0c\u73b0\u5728\u6062\u590d\u6b63\u5e38\uff0c\u90e8\u5206\u539f\u56e0\u662f\u8be5\u5e73\u53f0\u7684Go Food\u6574\u5408\u3002\n\u672a\u6765\uff0cWahyoo\u53ef\u80fd\u4f1a\u9762\u4e34\u6765\u81ea\u5176\u4ed6\u4e13\u6ce8\u4e8e\u6218\u4e89\u7684\u521d\u521b\u516c\u53f8\u7684\u7ade\u4e89\uff0c\u5982\u679c\u5b83\u4eec\u51b3\u5b9a\u5c06\u670d\u52a1\u6269\u5c55\u5230\u9910\u9986\uff0c\u4ee5\u53ca\u5e0c\u671b\u5229\u7528\u5370\u5c3c5930\u4e07\u5bb6\u4e2d\u5c0f\u578b\u4f01\u4e1a\u63d0\u4f9b\u7684\u5546\u673a\u7684\u65b0\u521d\u521b\u516c\u53f8\uff0c\u5176\u4e2d\u8bb8\u591a\u5c1a\u672a\u5b9e\u73b0\u8fd0\u8425\u6570\u5b57\u5316\u3002\n\u5e0c\u52d2\u8868\u793a\uff0cWahyoo\u7684\u4ef7\u503c\u4e3b\u5f20\u662f\u5176\u8865\u5145\u670d\u52a1\u7ec4\u5408\u3002\u201c\u6211\u4eec\u57fa\u672c\u4e0a\u662f\u5728\u521b\u9020\u4e00\u4e2a\u751f\u6001\u7cfb\u7edf\uff0c\u201d\u4ed6\u8865\u5145\u8bf4\u3002\u201c\u6211\u4eec\u5173\u6ce8\u7684\u4e0d\u4ec5\u4ec5\u662f\u4f9b\u5e94\u94fe\uff0c\u8fd8\u6709\u6211\u4eec\u81ea\u5df1\u7684\u54c1\u724c\u3002\u6211\u4eec\u6709\u70b8\u9e21\u54c1\u724c\uff0c\u672a\u6765\u6211\u4eec\u8fd8\u5c06\u6d89\u8db3\u91d1\u878d\u79d1\u6280\u548c\u9910\u996e\u4e1a\u52a1\u3002\u201c", "note_en": "While growing up, Peter Shearer watched his mother get up every day at 2AM or 3AM to prepare for her catering business. For many people who own small food businesses in Indonesia, \u201ceverything is handled on their own, so I really, really wanted to create a system so they can have better operations and get more quality of life,\u201d Shearer told TechCrunch.\n His startup,  Wahyoo, was founded in 2017 to help small eateries, called warung makan, digitize and automate more tasks, from ordering supplies to managing finances. Today,  Wahyoo   announced that it has raised $5 million in Series A funding led by Intudo Ventures, a venture capital firm focused on Indonesia.\n  Other investors in the round included Kinesys Group, Amatil X (the corporate venture program of Coca-Cola Amatil, one of the world\u2019 five largest Coca-Cola bottlers), Arkblu Capital, Indogen Capital, Selera Kapital, Gratyo Universal Indonesia and Isenta Hioe. The capital will be used on hiring, developing Wahyoo\u2019s tech platform and expanding beyond the Greater Jakarta area.\n In a press statement about the investment, Intudo Ventures founding partner Patrick Yip said, \u201cSmall-and medium enterprises represent one of the major engines of economic growth in Indonesia and are being transformed through new innovative businesses like\u00a0Wahyoo, bringing greater economic prosperity to small business owners throughout the country. Through the company\u2019s digitization efforts,\u00a0Wahyoo\u2019s highly targeted support for\u00a0warung makan\u00a0businesses is creating positive economic and social impact for Indonesia\u2019s working class.\u201d\n Wahyoo launched its app almost exactly a year ago and has onboarded about 13,800 warung makan so far. The company\u2019s co-founders are Shearer, the chief executive officer; chief operating officer Daniel Cahyadi; and chief technology officer Michael Dihardja.\n With about 268 million people, Indonesia is Southeast Asia\u2019s largest markets, and there are already startups,  like Warung Pintar and  BakuWarung, that focus on helping warung, or small corner stores, digitize more of their operations.\n Shearer said he wanted to focus on Indonesian eateries in particular because \u201cmy background is in the food industry and I love anything related to food. Second, the potential is very big because no one has tapped into this type of warung before. Everyone focuses on retail, but no one taps into the culinary business.\u201d\n Wahyoo currently employs about 170 people, including on-the-ground teams who meet with warung makan owners. The eateries are \u201cusually run by a family, from generation to generation,\u201d with almost all tasks performed manually, including bookkeeping and going to markets early in the morning to buy ingredients, Shearer said.\n  Wahyoo\u2019s features include a next-day grocery delivery service from its own warehouses and integration with Go Food, a popular delivery app. The startup also runs an education program called Wahyoo Academy, with financial courses to help warung makan owners increase customer traffic and revenue, and offers advertising and brand partnerships.\n For example, a restaurant on Wahyoo\u2019s platform can earn money by placing ad banners or brochures in their stores. That is one of the way Wahyoo monetizes. It is free to use for restaurant owners, and makes revenue by taking a percentage of brand commissions.\n Another revenue stream is Wahyoo\u2019s fried chicken franchise, which gives warung makan owners the option of opening a small stall in front of their stores. It currently has about 350 stalls and keeps costs low by partnering with one of Indonesia\u2019s largest poultry suppliers. Shearer said the company\u2019s goal is to increase the number of stalls to 1,000 by the end of this year.\n While eateries on Wahyoo saw a drop in their business in April and May because of the COVID-19 pandemic, Shearer said that it began to recover in June and July, and is now back to normal, partly because of the platform\u2019s Go Food integration.\n In the future, Wahyoo may face competition from other warung-focused startups if they decided to expand their services to restaurants as well, and new startups that want to tap into the business opportunity offered by the  59.3 million small- to medium-sized businesses in Indonesia, many of which haven\u2019t digitized their operations yet.\n Shearer said Wahyoo\u2019s value proposition is its portfolio of complementary services. \u201cWe are basically creating an ecosystem,\u201d he added. \u201cWe are not only focusing on the supply chain, but also our own brand. We have the fried chicken brand and in the future we will tap into financial technology and the catering business as well.\u201d", "posttime": "2020-08-05 16:20:47", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5b9e\u73b0,based,wahyoo", "title": "\n\u603b\u90e8\u4f4d\u4e8e\u96c5\u52a0\u8fbe\u7684Wahyoo\u83b7\u5f97500\u4e07\u7f8e\u5143\u7684\u9996\u8f6e\u878d\u8d44\uff0c\u5e2e\u52a9\u5c0f\u9910\u9986\u5b9e\u73b0\u8fd0\u8425\u6570\u5b57\u5316", "title_en": "\n\t\t\t\tJakarta-based Wahyoo gets $5 million Series A to help small eateries digitize their operations\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/08/05/jakarta-based-wahyoo-gets-5-million-series-a-to-help-small-eateries-digitize-their-operations/", "via": "", "real_tags": ["\u5b9e\u73b0", "based", "wahyoo"]}, {"category": "", "categoryclass": "", "imagename": "dfac41a2d3177d72ddd65ad4443801d2.jpg", "infoid": 1016359, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Weezy\u5c06\u8d85\u672c\u5730\u5316\u5f15\u5165\u5728\u7ebf\u6742\u8d27\u8d2d\u7269\uff0c\u5c06\u81ea\u5df1\u4f4d\u4e8e\u6218\u7565\u4f4d\u7f6e\u7684\u914d\u9001\u4e2d\u5fc3\u4e0e\u7535\u52a8\u8f7b\u4fbf\u6469\u6258\u8f66\u548c\u81ea\u884c\u8f66\u5feb\u9012\u5458\u8f66\u961f\u7ed3\u5408\u8d77\u6765\uff0c\u51c6\u5907\u901a\u8fc7Weezy\u5e94\u7528\u7a0b\u5e8f\u63a5\u53d7\u8ba2\u5355\u3002\u5b83\u7684\u521b\u59cb\u4eba\u514b\u91cc\u65af\u6258\u592b\u00b7\u8303\u00b7\u8d1d\u5f17\u4f26(Kristof Van Beveren)\u548c\u4e9a\u5386\u514b\u00b7\u767b\u7279(Alec Dent)\u8ba4\u4e3a\uff0c\u4ed6\u4eec\u5df2\u7ecf\u53d1\u73b0\u4e86\u5728\u7ebf\u98df\u54c1\u6742\u8d27\u670d\u52a1\u7684\u5e02\u573a\u7f3a\u53e3\uff0c\u76ee\u6807\u5ba2\u6237\u662f\u201c\u65f6\u95f4\u7d27\u8feb\u7684\u4e13\u4e1a\u4eba\u58eb\u548c\u7236\u6bcd\u201d\uff0c\u4ed6\u4eec\u5e0c\u671b\u83b7\u5f97\u6309\u9700\u670d\u52a1\u7684\u901f\u5ea6\uff0c\u4f46\u53c8\u4e0d\u60f3\u8ba9\u4eba\u671b\u800c\u5374\u6b65\u3002\n\u6295\u8d44\u8005\u4f3c\u4e4e\u5bf9\u6b64\u8868\u793a\u540c\u610f\uff0cWeezy\u5728Heartcore Capital\u63d0\u4f9b\u7684100\u4e07GB\u79cd\u5b50\u524d\u8d44\u91d1\u7684\u652f\u6301\u4e0b\u79d8\u5bc6\u63a8\u51fa\uff0c\u6b64\u5916\u8fd8\u6709\u7531Ocado\u3001\u4e50\u8d2d(Tesco)\u3001\u585e\u6069\u65af\u4f2f\u91cc\u5370\u7ae0(Chop Chop)\u548cDeliveroo\u7684\u524d\u9ad8\u7ba1\u7ec4\u6210\u7684\u5404\u79cd\u4e2a\u4eba\u652f\u6301\u8005\u3002\n\u4ece\u4f26\u6566\u5bcc\u88d5\u7684\u5bcc\u52d2\u59c6\u548c\u5207\u5c14\u897f\u533a\u5f00\u59cb\uff0c\u987e\u5ba2\u53ef\u4ee5\u4f7f\u7528Weezy\u7684\u5e94\u7528\u7a0b\u5e8f\u5728\u8d2d\u7269\u6e05\u5355\u4e0a\u9009\u62e9\u5546\u54c1-\u4ece\u65b0\u9c9c\u6c34\u679c\u3001\u852c\u83dc\u3001\u9762\u5305\u548c\u6a71\u67dc\u586b\u5145\u7269\uff0c\u5230\u975e\u5904\u65b9\u836f\u3001\u6e05\u6d01\u4ea7\u54c1\u548c\u9152\u7cbe\u996e\u6599-\u7136\u540e\u4ed8\u6b3e\u3002\u8ba2\u5355\u968f\u540e\u5728Weezy\u81ea\u5df1\u7684\u914d\u9001\u4e2d\u5fc3\u6311\u9009\u548c\u5305\u88c5\uff0c\u7136\u540e\u572815\u5206\u949f\u5185\u7528\u7535\u52a8\u6ed1\u677f\u8f66\u6216\u81ea\u884c\u8f66\u9001\u8d27\u3002\u8fd9\u9879\u670d\u52a1\u6bcf\u5929\u4e0a\u534810\u70b9\u5230\u665a\u4e0a10\u70b9\u4e4b\u95f4\u8fd0\u884c\uff0c\u9001\u8d27\u6536\u8d392.95 GB\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u98df\u54c1\u6742\u8d27\u4e0d\u4ec5\u6765\u81ea\u9009\u5b9a\u7684\u6279\u53d1\u5546\uff0c\u8fd8\u6765\u81ea\u5f53\u5730\u7684\u72ec\u7acb\u9762\u5305\u5e08\u3001\u5c60\u592b\u548c\u5e02\u573a\uff0cWeezy\u5927\u8086\u5ba3\u626c\u5176\u5bf9\u5f53\u5730\u4f01\u4e1a\u7684\u652f\u6301\u3002\u8fd9\u5bb6\u521d\u521b\u516c\u53f8\u8ba1\u5212\u5728\u660e\u5e74\u5e74\u5e95\u4e4b\u524d\u5728\u82f1\u56fd\u9996\u90fd\u518d\u5f00\u8bbe15\u4e2a\u5c65\u884c\u4e2d\u5fc3\uff0c\u7136\u540e\u5c06\u76ee\u5149\u6295\u5411\u66f4\u5e7f\u6cdb\u7684\u82f1\u56fd\u6269\u5f20\u3002\nWeezy\u9996\u5e2d\u6267\u884c\u5b98\u517c\u8054\u5408\u521b\u59cb\u4eba\u8303\u00b7\u8d1d\u5f17\u4f26\u8bf4\uff1a\u201c\u6ca1\u6709\u5176\u4ed6\u670d\u52a1\u80fd\u63d0\u4f9b\u8fd9\u4e48\u5feb\u7684\u670d\u52a1\u3002\u201d\u201c\u6211\u4eec\u7684\u8d85\u672c\u5730\u5316\u6267\u884c\u4e2d\u5fc3\u6a21\u5f0f\u4e4b\u6240\u4ee5\u6709\u6548\uff0c\u662f\u56e0\u4e3a\u6211\u4eec\u80fd\u591f\u4f18\u5316\u5feb\u901f\u6311\u9009\u548c\u6253\u5305\u7684\u7a7a\u95f4\uff0c\u540c\u65f6\u62e5\u6709\u8f83\u4f4e\u7684\u7269\u4e1a\u548c\u88c5\u4fee\u6210\u672c\uff0c\u4ece\u800c\u4f7f\u4ef7\u683c\u4fdd\u6301\u5728\u53ef\u63a7\u8303\u56f4\u5185\u3002\u201d\u8fd9\u4e00\u70b9\uff0c\u518d\u52a0\u4e0a\u6211\u4eec\u5185\u90e8\u7684\u9a91\u624b\u56e2\u961f\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u63d0\u4f9b\u6700\u5feb\u3001\u6700\u53cb\u597d\u7684\u98df\u54c1\u6742\u8d27\u9001\u8d27\u670d\u52a1\u3002\u800c\u4e14\uff0c\u4e0e\u4fbf\u5229\u5e97\u76f8\u6bd4\uff0cWeezy\u7684\u5b9a\u4ef7\u66f4\u4f18\u60e0\uff0c\u4ea7\u54c1\u8303\u56f4\u66f4\u5e7f\u3001\u66f4\u4f18\u8d28\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8303\u00b7\u8d1d\u5f17\u4f26(Van Beveren)\u6307\u51fa\uff0c\u585e\u6069\u65af\u4f2f\u91cc\u7684\u5370\u7ae0\u9001\u8d27\u65f6\u95f4\u957f\u8fbe60\u5206\u949f(\u5e76\u5c06\u9001\u8d27\u5916\u5305\u7ed9\u5feb\u9012\u516c\u53f8\u65af\u56fe\u5c14\u7279(Stuart))\u3002Amazon Prime\u73b0\u5728\u627f\u8bfa\u901a\u8fc7\u83ab\u91cc\u68ee\u548c\u81ea\u5df1\u7684\u4ed3\u5e93\u63d0\u4f9b1-2\u5c0f\u65f6\u7684\u9001\u8d27\u670d\u52a1\uff0c\u800c\u4f26\u6566\u7684Amazon Fresh\u5219\u63d0\u4f9b\u76f8\u540c\u6216\u6b21\u65e5\u9001\u8d27\u670d\u52a1\u3002\nWeezy\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u8fd0\u8425\u5b98\u767b\u7279\u8865\u5145\u8bf4\uff1a\u201c\u9664\u4e86SPEED\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u6709\u4e00\u6574\u5957\u7ecf\u8fc7\u7cbe\u5fc3\u7b56\u5212\u7684\u4ea7\u54c1\uff0c\u5176\u5b9a\u4ef7\u4e0e\u63a8\u8350\u7684\u96f6\u552e\u4ef7\u4e00\u81f4\uff0c\u201dWeezy\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u8fd0\u8425\u5b98\u767b\u7279(Dent)\u8865\u5145\u9053\u3002\u201c\u6211\u4eec\u4e5f\u53ea\u7528\u7535\u52a8\u8f66\u6216\u81ea\u884c\u8f66\u9001\u8d27\u3002\u6211\u4eec\u81f4\u529b\u4e8e\u4e3a\u6211\u4eec\u7684\u8f66\u624b\u56e2\u961f\u521b\u9020\u4e00\u79cd\u652f\u6301\u6027\u7684\u6587\u5316\u548c\u6700\u597d\u7684\u5de5\u4f5c\u6761\u4ef6\uff0c\u4ed6\u4eec\u4e5f\u63a5\u53d7\u4e86\u5728\u5b9e\u73b0\u4e2d\u5fc3\u5de5\u4f5c\u7684\u57f9\u8bad\uff0c\u5e76\u63d0\u4f9b\u4e86\u804c\u4e1a\u53d1\u5c55\u7684\u673a\u4f1a\u3002\u5feb\u4e50\u7684\u5458\u5de5\u9020\u5c31\u5feb\u4e50\u7684\u987e\u5ba2\u201c\u3002", "note_en": "Putting the  hyper hyper-local into online grocery shopping,  Weezy combines its own strategically located fulfilment centres with a fleet of electric moped and bicycle couriers, ready to accept orders via the Weezy app. Its founders, Kristof Van Beveren and Alec Dent, think they\u2019ve spotted a gap in the market for an online grocery service that targets \u201ctime-poor professionals and parents\u201d who want the speed of an on-demand service but without it being prohibitively expensive.\n Investors appear to agree, with Weezy launching out of stealth off the back of \u00a31 million in pre-seed funding from  Heartcore Capital, in addition to various individual backers made up of former executives of Ocado, Tesco, Sainsbury\u2019s Chop Chop and Deliveroo.\n  Starting in London\u2019s affluent Fulham and Chelsea districts, customers use Weezy\u2019s app to select items on their shopping lists -\u2013 spanning fresh fruits, vegetables, bread and cupboard fillers, to over-the-counter medicines, cleaning products and alcoholic drinks \u2014 and pay. The order is then picked and packed at Weezy\u2019s own fulfilment centre, before being delivered on electric scooters or bicycles within 15 minutes. The service runs between 10am and 10pm every day, charging \u00a32.95 for delivery.\n Notably, groceries are sourced not only from selected wholesalers, but also from local independent bakers, butchers and markets, seeing Weezy talk up its support for local businesses. The startup plans to open up to 15 more fulfilment centres in the U.K. capital city by the end of next year, before setting its sights on broader U.K. expansion.\n \u201cNo other service delivers as quickly,\u201d says Weezy CEO and co-founder Van Beveren. \u201cOur hyperlocal fulfilment centre model works since we are able to optimise the space for fast picking and packing while having low property and fit-out costs, thereby keeping prices in check. This, coupled with our in-house team of riders, allows us to offer the fastest and friendliest grocery delivery service. And, compared to convenience stores, Weezy has better pricing and a broader and more premium range of products\u201d.\n In comparison, Van Beveren notes that Sainsbury\u2019s Chop Chop takes up to 60 minutes to deliver (and outsources delivery to courier company Stuart). Amazon Prime Now promises 1-2 hours delivery via Morrisons and its own warehouses, while Amazon Fresh in London offers same or next day delivery.\n \u201cNext to speed, we have a full range of carefully curated products and pricing in line with recommended retail prices,\u201d adds Weezy co-founder and COO Dent. \u201cWe also only use electric vehicles or bicycles for deliveries. We are committed to creating a supportive culture and the best working conditions for our team of riders, who are also trained to work in the fulfilment centre, and offered opportunities for career progression. Happy staff make happy customers\u201d.", "posttime": "2020-08-05 16:20:28", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u4f4d\u4e8e,grocery,weezy", "title": "\n\u603b\u90e8\u4f4d\u4e8e\u4f26\u6566\u7684Weezy\u4e3a\u517615\u5206\u949f\u7684\u98df\u54c1\u6742\u8d27\u9001\u8d27\u5e94\u7528\u7b79\u96c6\u79cd\u5b50\u8d44\u91d1", "title_en": "\n\t\t\t\tLondon-based Weezy raises seed funding for its 15-minute grocery delivery app\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/08/05/london-based-weezy-raises-seed/", "via": "", "real_tags": ["\u4f4d\u4e8e", "grocery", "weezy"]}, {"category": "", "categoryclass": "", "imagename": "177c1cfe5c4ac2f05a9d1877a90fee43.jpg", "infoid": 1016358, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Paul Erd\u0151s\u662f20\u4e16\u7eaa\u51fa\u4e86\u540d\u7684\u53e4\u602a\u3001\u6e38\u8361\u548c\u591a\u4ea7\u7684\u6570\u5b66\u5bb6\uff0c\u4ed6\u559c\u6b22\u8fd9\u6837\u7684\u60f3\u6cd5\uff0c\u5373\u4e0a\u5e1d\u6709\u4e00\u4e2a\u5929\u4f53\u4f53\u79ef\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6bcf\u4e2a\u6570\u5b66\u5b9a\u7406\u7684\u5b8c\u7f8e\u8bc1\u660e\u3002\u5f53\u4ed6\u60f3\u8981\u5bf9\u4e00\u4efd\u6f02\u4eae\u7684\u8bc1\u660e\u7ed9\u4e88\u6700\u9ad8\u7684\u8d5e\u8a89\u65f6\uff0c\u4ed6\u4f1a\u5ba3\u79f0\uff1a\u201c\u8fd9\u4e00\u4efd\u662f\u4ece\u4e66\u4e2d\u62ff\u51fa\u6765\u7684\u3002\u201d\n\u522b\u4ecb\u610fErd\u0151\u6000\u7591\u4e0a\u5e1d\u7684\u5b58\u5728\u3002\u201c\u4f60\u4e0d\u4e00\u5b9a\u8981\u76f8\u4fe1\u4e0a\u5e1d\uff0c\u4f46\u4f60\u5e94\u8be5\u76f8\u4fe1\u8fd9\u672c\u4e66\uff0c\u201dErd\u0151s\u5411\u5176\u4ed6\u6570\u5b66\u5bb6\u89e3\u91ca\u8bf4\u3002\n1994\u5e74\uff0c\u6570\u5b66\u5bb6\u9a6c\u4e01\u00b7\u827e\u683c\u7eb3(Martin\u0151)\u5728\u5fb7\u56fd\u5965\u4f2f\u6c83\u5c14\u6cd5\u8d6b\u6570\u5b66\u7814\u7a76\u6240\u4e0e\u57c3\u5fb7\u00b7\u827e\u683c\u7eb3(Erd Aigner)\u4ea4\u8c08\u65f6\uff0c\u60f3\u51fa\u4e86\u4e00\u4e2a\u4e3b\u610f\uff1a\u4e3a\u4ec0\u4e48\u4e0d\u771f\u7684\u8bd5\u7740\u505a\u4e00\u672c\u4e0a\u5e1d\u4e4b\u4e66--\u6216\u8005\u81f3\u5c11\u662f\u5b83\u5728\u5730\u7403\u4e0a\u7684\u5f71\u5b50\uff1f\u827e\u683c\u7eb3\u62db\u52df\u4e86\u6570\u5b66\u5bb6\u540c\u884c\u5188\u7279\u00b7\u9f50\u683c\u52d2\uff0c\u4e24\u4eba\u5f00\u59cb\u6536\u96c6\u5f02\u5e38\u7f8e\u4e3d\u7684\u8bc1\u660e\u7684\u4f8b\u5b50\uff0c\u5e76\u7531Erd\u0151\u81ea\u5df1\u70ed\u60c5\u5730\u8d21\u732e\u3002\u7531\u6b64\u4ea7\u751f\u7684\u5377\uff0c\u4e66\u4e2d\u7684\u8bc1\u660e\uff0c\u4e8e1998\u5e74\u51fa\u7248\uff0c\u53ef\u60b2\u7684\u662f\uff0c\u5bf9\u4e8eerd\u0151s\u6765\u8bf4\uff0c\u770b\u5230\u5b83\u5df2\u7ecf\u592a\u665a\u4e86-\u4ed6\u5728\u9879\u76ee\u5f00\u59cb\u5927\u7ea6\u4e24\u5e74\u540e\u53bb\u4e16\uff0c\u4eab\u5e7483\u5c81\u3002\n\u73b0\u5728\u90fd\u662f\u67cf\u6797\u81ea\u7531\u5927\u5b66\u6559\u6388\u7684\u827e\u683c\u7eb3\u548c\u9f50\u683c\u52d2\u5728\u5e8f\u8a00\u4e2d\u5199\u9053\uff1a\u201c\u8bb8\u591a\u8bc1\u636e\u90fd\u53ef\u4ee5\u76f4\u63a5\u8ffd\u6eaf\u5230\u4ed6\uff0c\u6216\u8005\u662f\u7531\u4ed6\u5728\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\u6216\u505a\u51fa\u6b63\u786e\u7684\u731c\u6d4b\u65b9\u9762\u7684\u6700\u9ad8\u6d1e\u5bdf\u529b\u53d1\u8d77\u7684\u3002\u201d\u827e\u683c\u7eb3\u548c\u9f50\u683c\u52d2\u73b0\u5728\u90fd\u662f\u67cf\u6797\u81ea\u7531\u5927\u5b66\u7684\u6559\u6388\u3002\n\u8fd9\u672c\u4e66\u88ab\u79f0\u4e3a\u201c\u6570\u5b66\u5929\u5802\u4e00\u77a5\u201d\uff0c\u5b83\u63d0\u4f9b\u4e86\u6570\u8bba\u3001\u51e0\u4f55\u3001\u5206\u6790\u3001\u7ec4\u5408\u5b66\u548c\u56fe\u8bba\u4e2d\u6570\u5341\u4e2a\u5b9a\u7406\u7684\u8bc1\u660e\u3002\u81ea\u5b83\u9996\u6b21\u51fa\u7248\u4ee5\u6765\u7684\u4e8c\u5341\u5e74\u91cc\uff0c\u5b83\u5df2\u7ecf\u7ecf\u5386\u4e86\u4e94\u4e2a\u7248\u672c\uff0c\u6bcf\u4e2a\u7248\u672c\u90fd\u589e\u52a0\u4e86\u65b0\u7684\u6821\u6837\uff0c\u5e76\u88ab\u7ffb\u8bd1\u621013\u79cd\u8bed\u8a00\u3002\n\u4eca\u5e741\u6708\uff0c\u9f50\u683c\u52d2\u524d\u5f80\u5723\u5730\u4e9a\u54e5\u53c2\u52a0\u8054\u5408\u6570\u5b66\u4f1a\u8bae\uff0c\u5728\u90a3\u91cc\u4ed6\u548c\u827e\u683c\u7eb3\u83b7\u5f97\u4e862018\u5e74\u65af\u8482\u5c14\u6570\u5b66\u535a\u89c8\u4f1a\u5956\u3002\u83b7\u5956\u8005\u5956\u72b6\u4e0a\u5199\u9053\uff1a\u201c(\u4e66\u4e2d)\u6bcf\u9875\u7684\u4f18\u96c5\u601d\u60f3\u5bc6\u5ea6\u975e\u5e38\u9ad8\u3002\u201d\n\u201c\u5e7f\u8fbe\u201d\u6742\u5fd7\u5728\u4f1a\u4e0a\u4e0e\u9f50\u683c\u52d2\u5750\u4e0b\u6765\u8ba8\u8bba\u7f8e\u4e3d(\u548c\u4e11\u964b)\u7684\u6570\u5b66\u3002\u4e3a\u6e05\u695a\u8d77\u89c1\uff0c\u91c7\u8bbf\u7ecf\u8fc7\u4e86\u7f16\u8f91\u548c\u6d53\u7f29\u3002\n\u4f60\u8bf4\u8fc7\u4f60\u548c\u9a6c\u4e01\u00b7\u827e\u683c\u7eb3\u5bf9\u54ea\u4e9b\u8bc1\u636e\u503c\u5f97\u6536\u5f55\u5728\u4e66\u4e2d\u6709\u7740\u76f8\u4f3c\u7684\u611f\u89c9\u3002\u4f60\u7684\u5ba1\u7f8e\u89c2\u662f\u600e\u4e48\u56de\u4e8b\uff1f\n\u6211\u4eec\u603b\u662f\u56de\u907f\u5b9a\u4e49\u4ec0\u4e48\u662f\u5b8c\u7f8e\u7684\u8bc1\u636e\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5bb3\u7f9e\uff0c\u5b9e\u9645\u4e0a\uff0c\u6ca1\u6709\u5b9a\u4e49\uff0c\u4e5f\u6ca1\u6709\u7edf\u4e00\u7684\u6807\u51c6\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u90fd\u662f\u6f02\u4eae\u8bc1\u660e\u7684\u7ec4\u6210\u90e8\u5206\u3002\u5b83\u4e0d\u53ef\u80fd\u592a\u957f\uff1b\u5b83\u5fc5\u987b\u5f88\u6e05\u695a\uff1b\u5fc5\u987b\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u60f3\u6cd5\uff1b\u5b83\u53ef\u80fd\u4f1a\u5c06\u4eba\u4eec\u901a\u5e38\u8ba4\u4e3a\u6ca1\u6709\u4efb\u4f55\u8054\u7cfb\u7684\u4e1c\u897f\u8054\u7cfb\u5728\u4e00\u8d77\u3002\n\u5bf9\u4e8e\u67d0\u4e9b\u5b9a\u7406\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u8bfb\u8005\u6709\u4e0d\u540c\u7684\u5b8c\u7f8e\u8bc1\u660e\u3002\u6211\u662f\u8bf4\uff0c\u4ec0\u4e48\u662f\u8bc1\u636e\uff1f\u8bf4\u5230\u5e95\uff0c\u8bc1\u660e\u5c31\u662f\u8ba9\u8bfb\u8005\u76f8\u4fe1\u4e8b\u60c5\u662f\u771f\u7684\u3002\u800c\u6821\u6837\u662f\u5426\u901a\u4fd7\u6613\u61c2\uff0c\u662f\u5426\u7f8e\u89c2\uff0c\u4e0d\u4ec5\u53d6\u51b3\u4e8e\u6821\u6837\uff0c\u8fd8\u53d6\u51b3\u4e8e\u8bfb\u8005\uff1a\u4f60\u77e5\u9053\u4ec0\u4e48\uff1f\u4f60\u559c\u6b22\u4ec0\u4e48\uff1f\u4f60\u89c9\u5f97\u660e\u663e\u7684\u662f\u4ec0\u4e48\uff1f\n\u60a8\u5728\u7b2c\u4e94\u7248\u4e2d\u6ce8\u610f\u5230\uff0c\u6570\u5b66\u5bb6\u4eec\u5df2\u7ecf\u63d0\u51fa\u4e86\u81f3\u5c11196\u79cd\u4e0d\u540c\u7684\u201c\u4e8c\u6b21\u4e92\u6613\u201d\u5b9a\u7406\u7684\u8bc1\u660e(\u5173\u4e8e\u201c\u65f6\u949f\u201d\u7b97\u672f\u4e2d\u7684\u6570\u5b57\u662f\u5b8c\u5168\u5e73\u65b9\u7684)\u548c\u8fd1100\u79cd\u4ee3\u6570\u57fa\u672c\u5b9a\u7406\u7684\u8bc1\u660e(\u5173\u4e8e\u591a\u9879\u5f0f\u65b9\u7a0b\u7684\u89e3)\u3002\u5f53\u6570\u5b66\u5bb6\u5df2\u7ecf\u77e5\u9053\u67d0\u4e9b\u5b9a\u7406\u662f\u771f\u7684\u65f6\uff0c\u4f60\u8ba4\u4e3a\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u8fd8\u5728\u4e0d\u65ad\u5730\u4e3a\u8fd9\u4e9b\u5b9a\u7406\u8bbe\u8ba1\u65b0\u7684\u8bc1\u660e\u5462\uff1f\n\u8fd9\u4e9b\u90fd\u662f\u6570\u5b66\u4e2d\u7684\u6838\u5fc3\u95ee\u9898\uff0c\u6240\u4ee5\u4ece\u591a\u4e2a\u4e0d\u540c\u7684\u89d2\u5ea6\u6765\u7406\u89e3\u5b83\u4eec\u662f\u5f88\u91cd\u8981\u7684\u3002\u6709\u4e9b\u5b9a\u7406\u6709\u51e0\u4e2a\u771f\u6b63\u4e0d\u540c\u7684\u8bc1\u660e\uff0c\u6bcf\u4e2a\u8bc1\u660e\u544a\u8bc9\u4f60\u5173\u4e8e\u5b9a\u7406\u548c\u7ed3\u6784\u7684\u4e00\u4e9b\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u6240\u4ee5\uff0c\u63a2\u7d22\u8fd9\u4e9b\u8bc1\u660e\uff0c\u7406\u89e3\u5982\u4f55\u8d85\u8d8a\u5b9a\u7406\u7684\u539f\u59cb\u9648\u8ff0\uff0c\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u3002\n\u6211\u8111\u6d77\u4e2d\u6d6e\u73b0\u4e86\u4e00\u4e2a\u4f8b\u5b50--\u6211\u4eec\u7684\u4e66\u91cc\u6ca1\u6709\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u4f46\u975e\u5e38\u57fa\u7840--\u591a\u9762\u4f53\u7684\u65af\u5766\u5c3c\u8328\u5b9a\u7406\u3002\u8fd9\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5e73\u9762\u56fe(\u5e73\u9762\u4e2d\u9876\u70b9\u548c\u8fb9\u7684\u7f51\u7edc)\u5728\u79fb\u9664\u4e00\u4e2a\u6216\u4e24\u4e2a\u9876\u70b9\u540e\u4fdd\u6301\u8fde\u63a5\uff0c\u90a3\u4e48\u5c31\u6709\u4e00\u4e2a\u51f8\u591a\u9762\u4f53\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u8fde\u63a5\u6a21\u5f0f\u3002\u8fd9\u4e2a\u5b9a\u7406\u6709\u4e09\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u8bc1\u660e--\u201c\u65af\u5766\u5c3c\u5179\u578b\u201d\u8bc1\u660e\u3001\u201c\u6a61\u76ae\u7b4b\u201d\u8bc1\u660e\u548c\u201c\u5706\u5305\u88c5\u201d\u8bc1\u660e\u3002\u8fd9\u4e09\u4e2a\u90fd\u6709\u4e0d\u540c\u4e4b\u5904\u3002\n\u4efb\u4f55Steinitz\u578b\u8bc1\u660e\u90fd\u4f1a\u544a\u8bc9\u4f60\uff0c\u4e0d\u4ec5\u6709\u4e00\u4e2a\u591a\u9762\u4f53\uff0c\u800c\u4e14\u8fd8\u6709\u4e00\u4e2a\u9876\u70b9\u5750\u6807\u4e3a\u6574\u6570\u7684\u591a\u9762\u4f53\u3002\u5706\u586b\u5145\u8bc1\u660e\u544a\u8bc9\u4f60\uff0c\u6709\u4e00\u4e2a\u591a\u9762\u4f53\uff0c\u5b83\u7684\u6240\u6709\u8fb9\u90fd\u4e0e\u4e00\u4e2a\u7403\u4f53\u76f8\u5207\u3002\u4f60\u4e0d\u80fd\u4eceSteinitz\u7c7b\u578b\u7684\u8bc1\u660e\u4e2d\u5f97\u5230\u8fd9\u4e00\u70b9\uff0c\u6216\u8005\u53cd\u8fc7\u6765-\u5706\u586b\u5145\u8bc1\u660e\u4e0d\u80fd\u8bc1\u660e\u4f60\u53ef\u4ee5\u7528\u6574\u6570\u5750\u6807\u6765\u505a\u8fd9\u4ef6\u4e8b\u3002\u56e0\u6b64\uff0c\u6709\u4e86\u51e0\u4e2a\u8bc1\u660e\uff0c\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u6765\u7406\u89e3\u8fd9\u79cd\u60c5\u51b5\uff0c\u800c\u4e0d\u662f\u539f\u6765\u7684\u57fa\u672c\u5b9a\u7406\u3002", "note_en": "Paul Erd\u0151s, the famously eccentric, peripatetic and prolific 20th-century mathematician, was fond of the idea that God has a celestial volume containing the perfect proof of every mathematical theorem. \u201cThis one is from The Book,\u201d he would declare when he wanted to bestow his highest praise on a beautiful proof.\n Never mind that Erd\u0151s doubted God\u2019s very existence. \u201cYou don\u2019t have to believe in God, but you should believe in The Book,\u201d Erd\u0151s explained to other mathematicians.\n In 1994, during conversations with Erd\u0151s at the Oberwolfach Research Institute for Mathematics in Germany, the mathematician Martin Aigner came up with an idea: Why not actually try to make God\u2019s Book \u2014 or at least an earthly shadow of it? Aigner enlisted fellow mathematician G\u00fcnter Ziegler, and the two started collecting examples of exceptionally beautiful proofs, with enthusiastic contributions from Erd\u0151s himself. The resulting volume,   Proofs From THE BOOK , was published in 1998, sadly too late for Erd\u0151s to see it \u2014 he had died about two years after the project commenced, at age 83.\n \u201cMany of the proofs trace directly back to him, or were initiated by his supreme insight in asking the right question or in making the right conjecture,\u201d Aigner and Ziegler, who are now both professors at the Free University of Berlin, write in the preface.\n  The book, which has been called \u201c a glimpse of mathematical heaven,\u201d presents proofs of dozens of theorems from number theory, geometry, analysis, combinatorics and graph theory. Over the two decades since it first appeared, it has gone through five editions, each with new proofs added, and has been translated into 13 languages.\n In January, Ziegler traveled to San Diego for the Joint Mathematics Meetings, where he received (on his and Aigner\u2019s behalf) the  2018 Steele Prize for Mathematical Exposition. \u201cThe density of elegant ideas per page [in the book] is extraordinarily high,\u201d the prize citation reads.\n Quanta Magazine sat down with Ziegler at the meeting to discuss beautiful (and ugly) mathematics. The interview has been edited and condensed for clarity.\n You\u2019ve said that you and Martin Aigner have a similar sense of which proofs are worthy of inclusion in  THE BOOK. What goes into your aesthetic?\n  We\u2019ve always shied away from trying to define what is a perfect proof. And I think that\u2019s not only shyness, but actually, there is no definition and no uniform criterion. Of course, there are all these components of a beautiful proof. It can\u2019t be too long; it has to be clear; there has to be a special idea; it might connect things that usually one wouldn\u2019t think of as having any connection.\n For some theorems, there are different perfect proofs for different types of readers. I mean, what is a proof? A proof, in the end, is something that convinces the reader of things being true. And whether the proof is understandable and beautiful depends not only on the proof but also on the reader: What do you know? What do you like? What do you find obvious?\n You noted in the fifth edition that mathematicians have come up with at least 196 different proofs of the \u201cquadratic reciprocity\u201d theorem (concerning which numbers in \u201cclock\u201d arithmetics are perfect squares) and nearly 100 proofs of the fundamental theorem of algebra (concerning solutions to polynomial equations). Why do you think mathematicians keep devising new proofs for certain theorems, when they already know the theorems are true?\n These are things that are central in mathematics, so it\u2019s important to understand them from many different angles. There are theorems that have several genuinely different proofs, and each proof tells you something different about the theorem and the structures. So, it\u2019s really valuable to explore these proofs to understand how you can go beyond the original statement of the theorem.\n An example comes to mind \u2014 which is not in our book but is very fundamental \u2014 Steinitz\u2019s theorem for polyhedra. This says that if you have a planar graph (a network of vertices and edges in the plane) that stays connected if you remove one or two vertices, then there is a convex polyhedron that has exactly the same connectivity pattern. This is a theorem that has three entirely different types of proof \u2014 the \u201cSteinitz-type\u201d proof, the \u201crubber band\u201d proof and the \u201ccircle packing\u201d proof. And each of these three has variations.\n Any of the Steinitz-type proofs will tell you not only that there is a polyhedron but also that there\u2019s a polyhedron with integers for the coordinates of the vertices. And the circle packing proof tells you that there\u2019s a polyhedron that has all its edges tangent to a sphere. You don\u2019t get that from the Steinitz-type proof, or the other way around \u2014 the circle packing proof will not prove that you can do it with integer coordinates. So, having several proofs leads you to several ways to understand the situation beyond the original basic theorem.", "posttime": "2020-08-05 16:13:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5bfb\u627e,god,\u8bc1\u660e", "title": "\u5bfb\u627e\u4e0a\u5e1d\u7684\u5b8c\u7f8e\u8bc1\u660e", "title_en": "In Search of God\u2019s Perfect Proofs", "transed": 1, "url": "https://www.quantamagazine.org/gunter-ziegler-and-martin-aigner-seek-gods-perfect-math-proofs-20180319/", "via": "", "real_tags": ["\u5bfb\u627e", "god", "\u8bc1\u660e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1016357, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u53c8\u4e0a\u4e86\u6770\u68ee\u00b7\u65af\u5a01\u7279\u7684\u64ad\u5ba2\u3002\u4ed6\u662f\u4e2a\u5f88\u68d2\u7684\u9762\u8bd5\u5b98\uff0c\u6211\u548c\u4ed6\u5728\u4e00\u8d77\u603b\u662f\u5f88\u5f00\u5fc3\u3002\n\u5e94\u63a8\u7279\u7684\u8981\u6c42\uff0c\u6211\u4eec\u8c08\u8bba\u4e86\u2026\u3002\u60a8\u4ec0\u4e48\u65f6\u5019\u4e0d\u4f1a\u4f7f\u7528Rails\uff1f\u8fd9\u662f\u4e2a\u5f88\u597d\u7684\u95ee\u9898\u3002\n\u8981\u83b7\u5f97\u5a31\u4e50\u7248\u672c\uff0c\u8bf7\u6536\u542c\u64ad\u5ba2\u3002\u4e3a\u4e86\u66f4\u5168\u9762\u5730\u4e86\u89e3\u4e8b\u5b9e\uff0c\u6211\u5199\u4e0b\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u6211\u5c06\u4ece\u51e0\u4e2a\u60a8\u4e0d\u4f1a\u4f7f\u7528Rails\u7684\u7b80\u5355\u3001\u660e\u663e\u7684\u65f6\u523b\u5f00\u59cb\uff0c\u7136\u540e\u6211\u5c06\u8c08\u8bba\u4e00\u4e9b\u6280\u672f\u4e0a\u6709\u8da3\u7684\u65f6\u523b\u3002\n\u9996\u5148\uff0c\u4e5f\u662f\u6700\u91cd\u8981\u7684\uff0c\u662f\u56e2\u961f\u719f\u6089\u5ea6\u3002\u5982\u679c\u60a8\u7684\u56e2\u961f\u8fd8\u4e0d\u4e86\u89e3Rails\uff0c\u5e76\u4e14\u5bf9\u5b66\u4e60\u5b83\u4e0d\u662f\u7279\u522b\u611f\u5174\u8da3\uff0c\u90a3\u4e48Rails\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\u8fd9\u4e00\u70b9\u5e94\u8be5\u662f\u663e\u800c\u6613\u89c1\u7684\uff0c\u4f46\u5b83\u4ecd\u7136\u503c\u5f97\u9996\u5148\u4e70\u5355\u3002\n\u7b2c\u4e8c\uff0c\u5f53\u4f60\u77e5\u9053\u5176\u4ed6\u6846\u67b6\u66f4\u9002\u5408\u7684\u65f6\u5019\u3002\u6211\u5c06\u5728\u4e0b\u9762\u66f4\u591a\u5730\u8ba8\u8bba\u8fd9\u662f\u4ec0\u4e48\u65f6\u5019\u3002\u4f46\u6709\u65f6\uff0c\u4f60\u6709\u4e00\u79cd\u7279\u522b\u7684\u62c5\u5fe7\uff0c\u5b83\u538b\u5012\u4e86\u4e00\u5207\u3002\u5982\u679c\u60a8\u9700\u8981\u4f7f\u7528Java\u8bed\u8a00\u673a\u5668\u5b66\u4e60\u5e93\uff0c\u5e76\u4e14\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u4e0d\u60f3\u4f7f\u7528JRuby\uff0c\u90a3\u4e48Rails\u4e0d\u662f\u60a8\u7684\u6846\u67b6\u3002\u901a\u5e38\uff0c\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u517c\u5bb9\u6027\u95ee\u9898\u51cc\u9a7e\u4e8e\u6240\u6709\u5176\u4ed6\u95ee\u9898\u4e4b\u4e0a\u3002\n\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u60f3\u6210\uff1a\u5728Rails\u7684\u4f18\u70b9\u5b58\u5728\u800c\u7f3a\u70b9\u4e0d\u5b58\u5728\u7684\u5730\u65b9\u4f7f\u7528\u5b83\uff0c\u6240\u4ee5\u6211\u4eec\u4e5f\u4f1a\u8ba8\u8bba\u5b83\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\u3002\n\u53e6\u5916\uff1a\u60a8\u901a\u5e38\u53ea\u4f7f\u7528Rails\u4f5c\u4e3aHTTP\u670d\u52a1\u5668\uff0c\u6240\u4ee5\u6709\u4e9b\u4efb\u52a1\u6839\u672c\u4e0d\u662fRails\u5f62\u72b6\u7684\u3002\n\u4e0d\u4f1a\u589e\u957f\u7684\u975e\u5e38\u5c0f\u7684\u4efb\u52a1\uff1a\u5982\u679c\u670d\u52a1\u5668\u505a\u7684\u5f88\u5c11\uff0cRails\u901a\u5e38\u5c31\u592a\u591a\u4e86\u3002\u4e0d\u53bb\u78b0\u6570\u636e\u5e93\u5417\uff1f\u90a3\u4e48\u6570\u636e\u5e93\u8bbe\u7f6e\u5bf9\u60a8\u6ca1\u6709\u5e2e\u52a9\uff0c\u662f\u5417\uff1f\u4ec5\u4ec5\u662f\u4e00\u53f0\u6ca1\u6709\u7f13\u5b58\u7684\u5c0f\u578b\u4f4e\u6d41\u91cf\u4e2d\u95f4\u670d\u52a1\u5668\uff1f\u5f88\u591aRails\u5e26\u6765\u7684\u9ebb\u70e6\u8d85\u8fc7\u4e86\u5b83\u7684\u4ef7\u503c\u3002\n\u4e0d\u8fc7\uff0c\u8981\u5c0f\u5fc3\u5904\u7406\u4e0d\u65ad\u589e\u957f\u7684\u4efb\u52a1--\u8ba9\u4e00\u53f0\u5f88\u5c0f\u7684\u670d\u52a1\u5668\u6269\u5c55\u4ee5\u505a\u66f4\u591a\u4e8b\u60c5\u53ef\u80fd\u4f1a\u5f88\u96be\u770b\u3002\u5982\u679c\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528Web\u6d4f\u89c8\u5668\u5411\u4eba\u7c7b\u63d0\u4f9bHTTP\u9875\u9762\uff0c\u8bf7\u8003\u8651\u7a0d\u540e\u53ef\u80fd\u9700\u8981\u5411\u5176\u6dfb\u52a0\u529f\u80fd\u3002\u4ece\u201c\u5f00\u59cb\u201d\u8fd9\u4e2a\u8bcd\u6765\u770b\uff0c\u8fd9\u6837\u7684\u4e1c\u897f\u5df2\u7ecf\u76f8\u5f53\u5927\u4e86\u3002\n\u5f53\u5b83\u201c\u4ec5\u4ec5\u201d\u662f\u4e00\u4e2aAPI\u670d\u52a1\u5668\u65f6\uff1aRails\u53ef\u4ee5\u63d0\u4f9b\u7684API\u670d\u52a1\u5668\u66f4\u5c11\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u4e0eJSON\u901a\u4fe1\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u7684\u5f88\u591aHTTP\u5b89\u5168\u6027\u90fd\u65e0\u5173\u7d27\u8981(\u4f8b\u5982\uff0cSQL\u6ce8\u5165\u4fdd\u62a4\u3001XSS\u9884\u9632)\u3002\u867d\u7136ActiveRecord\u9002\u7528\u4e8e\u67d0\u4e9b\u6570\u636e\u5e93\u7528\u4f8b\uff0c\u4f46\u5f53\u60a8\u6784\u5efa\u4e0e\u6d4f\u89c8\u5668\u5bf9\u8bdd\u7684HTML\u7ad9\u70b9\u65f6\uff0cRails\u786e\u5b9e\u5927\u653e\u5f02\u5f69\u3002\u4e3b\u8981\u4f7f\u7528\u673a\u5668\u8bfb\u53d6\u7684\u7ed3\u6784\u5316\u683c\u5f0f\u7684\u975e\u5e38\u5c0f\u7684\u9879\u76ee\u901a\u5e38\u8f83\u5c11\u4eceRails\u4e2d\u83b7\u5f97\u3002\n\u4e0e\u6b64\u76f8\u5173\u7684\u662f\uff0c\u5f53\u60a8\u5728\u8fdb\u884c\u6d4f\u89c8\u5668\u5185\u5448\u73b0\u65f6\uff0cRails\u201c\u53ea\u662f\u201d\u4e3aJSON\u670d\u52a1\u3002\u8fd9\u662f\u4e00\u79cd\u5947\u602a\u7684\u4e2d\u95f4\u6848\u4ef6\u3002\u8bb8\u591aRails\u5b89\u5168\u6027\u548c\u4fbf\u5229\u6027\u51fd\u6570\u4e0d\u518d\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u4f46\u662f\u60a8\u4ecd\u7136\u5728\u505a\u5185\u90e8\u5e93(ActiveRecord\u3001ActiveJob\u3001ActionMailer)\u975e\u5e38\u6709\u7528\u7684\u4e8b\u60c5\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5728\u670d\u52a1\u5668\u4e0a\u5448\u73b0HTML\uff0c\u5e76\u4e14\u60a8\u975e\u5e38\u786e\u5b9a\u6c38\u8fdc\u4e0d\u4f1a\uff0c\u90a3\u4e48Rails\u5bf9\u60a8\u7684\u5e2e\u52a9\u53ef\u80fd\u4f1a\u66f4\u5c0f\u3002\nRails\u4e5f\u662f\u4e3a\u5c0f\u578b\u56e2\u961f\u548c\u4e2d\u578b\u4ee3\u7801\u5e93\u8bbe\u8ba1\u7684\u3002\u5e9e\u5927\u7684\u56e2\u961f(\u5927\u91cf\u7a0b\u5e8f\u5458)\u6216\u5e9e\u5927\u7684\u4ee3\u7801\u5e93(\u5927\u91cf\u63a7\u5236\u5668\u3001\u6a21\u578b\u548c/\u6216\u4ee3\u7801\u884c)\u5f80\u5f80\u4f1a\u62d6\u7d2f\u6807\u51c6\u7684rails-app\u7ed3\u6784\u3002\nRuby\u5141\u8bb8\u5f88\u591a\u975e\u672c\u5730\u6548\u679c\u3002\u65e0\u8bba\u662fmonkeypatch\u3001\u5199\u5165\u6570\u636e\u5e93\u8fd8\u662f\u5728\u8fd0\u884c\u65f6\u521b\u5efa\u65b0\u7c7b\u578b\uff0cRuby\u90fd\u4e0d\u662f\u4e3a200\u540d\u7a0b\u5e8f\u5458\u7ec4\u6210\u7684\u56e2\u961f\u8bbe\u8ba1\u7684\uff0c\u56e0\u4e3a\u60a8\u4e0d\u4fe1\u4efb\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u3002\u4ed6\u4eec\u6709\u592a\u591a\u7684\u65b9\u6cd5\u7ed9\u4f60\u5e26\u6765\u9ebb\u70e6\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u597d\u7684\u5de5\u5177\u5c06Ruby\u6269\u5c55\u5230\u66f4\u5927\u7684\u56e2\u961f\uff0c\u4f46\u5373\u4f7f\u8fd9\u6837\u4e5f\u4f1a\u6709\u4f8b\u5916\u548c\u56f0\u96be\u3002\u8fd9\u5e76\u4e0d\u662fRuby\u771f\u6b63\u559c\u6b22\u7684\u5730\u65b9\u3002\n\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5927\u9879\u76ee\u5206\u6210\u51e0\u4e2a\u8f83\u5c0f\u7684\u9879\u76ee\u3002\u5982\u679c\u4e00\u4e2aRails\u5e94\u7528\u7a0b\u5e8f\u592a\u5927\uff0c\u60a8\u901a\u5e38\u53ef\u4ee5\u5c06\u5176\u5206\u6210\u591a\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u8005\u5305\u542b\u66f4\u591a\u540e\u7aef\u670d\u52a1\u7684\u8f83\u8584\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6216\u8005\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u548c\u4e00\u4e2a\u5355\u72ec\u7684\u5fae\u670d\u52a1\uff0c\u5373\u2026\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u901a\u5e38\u4f1a\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u5206\u79bb\u51fa\u8f83\u5c0f\u7684\u788e\u7247\u3002\u9c81\u6bd4\u5f3a\u70c8\u9f13\u52b1\u8fd9\u6837\u505a\uff0c\u6211\u4e5f\u662f\u3002\n\u8fd8\u6709\u4e00\u4e9b\u4e0d\u592a\u5b8c\u5584\u7684Rails\u7ed3\u6784\u53ef\u4ee5\u66f4\u597d\u5730\u6269\u5c55\u3002Avdi Grimm(\u73b0\u5df2\u9000\u4f11)\u7684OBJECTS on Rails\u5c31\u662f\u671d\u8fd9\u4e2a\u65b9\u5411\u53d1\u5c55\u7684\u4e00\u6b21\u5c1d\u8bd5\uff0cRails\u7684\u516d\u89d2\u5f62\u67b6\u6784\u4e5f\u662f\u5982\u6b64\uff0c\u800c\u540e\u8005\u53c8\u4e0e\u66f4\u8001\u3001\u66f4\u901a\u7528\u7684N\u5c42\u67b6\u6784\u6709\u5f88\u591a\u5171\u540c\u4e4b\u5904\u3002\n\u4f46\u662f\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u8003\u8651\u4e00\u4e2a\u4e0d\u540c\u7684\u6846\u67b6\u3002Hanami\u662f\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u9009\u62e9\uff0c\u5728\u5f00\u53d1\u4e00\u4e2a\u5c0f\u5e94\u7528\u65f6\uff0c\u5b83\u7684\u8bbe\u8ba1\u4e0d\u50cfRails\u90a3\u4e48\u5feb\u548c\u7075\u6d3b\uff0c\u4f46\u662f\u5982\u679c\u4f60\u60f3\u5728\u66f4\u591a\u8d21\u732e\u8005\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u90a3\u4e48\u5b83\u7684\u4f38\u7f29\u6027\u66f4\u597d\u3002\n\u5c31\u6211\u4e2a\u4eba\u800c\u8a00\uff0c\u6211\u4ecd\u7136\u4f1a\u4eceRails\u5f00\u59cb\u3002\u5982\u679c\u4f60\u6b63\u5728\u5feb\u901f\u6784\u5efa\u4e00\u4e9b\u4e1c\u897f\uff0c\u770b\u770b\u662f\u5426\u6709\u4eba\u5173\u5fc3\uff0c\u6211\u77e5\u9053\u6ca1\u6709\u4e00\u4e2a\u6846\u67b6\u80fd\u63a5\u8fd1\u5b83\u7684\u751f\u4ea7\u529b\u3002\u7b49\u5f85\u91cd\u5199(\u5728\u66f4\u4e25\u683c\u7684\u6846\u67b6\u4e2d)\uff0c\u76f4\u5230\u60a8\u6210\u529f\uff0c\u5e76\u4e14\u60a8\u53ef\u4ee5\u627f\u53d7\u5bf9\u5f00\u53d1\u901f\u5ea6\u7684\u62d6\u7d2f\u3002\n\u8fd9\u91cc\u7684\u53e6\u4e00\u4e2a\u62c5\u5fe7\u53ef\u80fd\u662f\u6027\u80fd\u3002\u5982\u679c\u60a8\u6b63\u5728\u91cd\u5199\u4e00\u4e2a\u5df2\u7ecf\u4e0e\u5f53\u524dBasecamp\u2026\u4e00\u6837\u5927\u7684\u9879\u76ee\u3002\u90a3\u4f60\u7684\u8868\u73b0\u5c31\u6ca1\u95ee\u9898\u4e86\u3002\u5bf9\u4e8e\u4ed6\u4eec\u6765\u8bf4\uff0cRails\u7684\u4f38\u7f29\u6027\u4ecd\u7136\u5f88\u597d\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u770b\u5230\u7684\u4e1c\u897f\u8981\u5927\u4e00\u767e\u500d(\u6839\u636e\u5b9a\u4e49\uff0c\u5b83\u6307\u7684\u662fB2C\uff0c\u800c\u4e0d\u662fB2B)\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff0c\u5373\u60a8\u7684\u670d\u52a1\u5668\u6210\u672c\u8fdc\u8fdc\u9ad8\u4e8e\u60a8\u7684\u5de5\u7a0b\u4eba\u5458\u5de5\u8d44\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u964d\u4f4e\u5de5\u7a0b\u5e08\u7684\u901f\u5ea6\u4ee5\u964d\u4f4e\u670d\u52a1\u5668\u6210\u672c\u662f\u6709\u610f\u4e49\u7684\u3002\u8981\u68c0\u67e5\u8fd9\u4e00\u70b9\uff0c\u8bf7\u67e5\u770b\u8fd0\u884cRails\u7684\u5e94\u7528\u7a0b\u5e8f\u670d\u52a1\u5668\u7684EC2\u6216\u7b49\u6548\u6210\u672c\u662f\u591a\u5c11\u3002\u68c0\u67e5\u4f60\u7684\u5de5\u8d44\u5355\uff0c\u53ea\u7ed9\u7f51\u7edc\u5de5\u7a0b\u5e08\uff0c\u4ed6\u4eec\u662f\u7528Rails\u7f16\u5199\u7684\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u5de5\u7a0b\u5de5\u8d44\u5355\u8981\u5927\u5f97\u591a\uff0c\u4f60\u5e94\u8be5\u575a\u6301\u7528\u5ec9\u4ef7\u7684\u673a\u5668\u65f6\u95f4\u6765\u6362\u53d6\u6602\u8d35\u7684\u5de5\u7a0b\u65f6\u95f4\u3002\u4f46\u5728\u67d0\u4e00\u65f6\u523b\uff0c\u5929\u5e73\u53ef\u80fd\u4f1a\u503e\u659c\uff0c\u60a8\u5e94\u8be5\u8003\u8651\u63d0\u9ad8\u60a8\u7684\u5de5\u7a0b\u5e08\u5de5\u8d44\u4ee5\u964d\u4f4e\u670d\u52a1\u5668\u6210\u672c\u3002\n\u5728\u68c0\u67e5Rails\u7684\u5047\u8bbe\u662f\u5426\u9002\u5408\u60a8\u4e4b\u524d\uff0c\u6211\u4eec\u5e94\u8be5\u5148\u770b\u770b\u8fd9\u4e9b\u5047\u8bbe\u5230\u5e95\u662f\u4ec0\u4e48\u3002\n\u5728\u4f60\u76f8\u4fe1\u6211\u7684\u8bdd\u4e4b\u524d\uff0c\u6211\u5efa\u8bae\u628aDavid Heinemeier Hansson\u7684\u8bdd\u5f53\u505aRails Doctrine\u7684\u5f62\u5f0f\u3002\u8fd9\u662f\u4e00\u4efd\u5f88\u68d2\u7684\u6587\u4ef6\uff0c\u6db5\u76d6\u4e86\u5f88\u591a\u9886\u57df\u3002\n\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u60a8\u60f3\u66f4\u597d\u5730\u7406\u89e3\u4e3a\u4ec0\u4e48Rails\u5bf9\u4e8e\u5927\u578b\u3001\u4f4e\u4fe1\u4efb\u7684\u56e2\u961f\u6765\u8bf4\u5e76\u4e0d\u4ee4\u4eba\u60ca\u8bb6\uff0c\u60a8\u5e94\u8be5\u591a\u6b21\u9605\u8bfbRails Doctrine\u4e2d\u7684\u201cProvide Sharp Knves\u201d\u3002\u8bb8\u591aRails\u7684\u6743\u8861\u5b8c\u5168\u662f\u8bbe\u8ba1\u51fa\u6765\u7684\u3002\nRails\u8fd8\u6709\u4e00\u4e9b\u66f4\u7b80\u5355\u7684\u5047\u8bbe\uff1a\u5b83\u5047\u8bbe\u60a8\u6b63\u5728\u4f7f\u7528\u670d\u52a1\u5668\u5448\u73b0\u7684HTML\u7f16\u5199\u4ea4\u4e92\u5f0f\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u5047\u5b9a\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981(Rails\u4e3a\u5b89\u5168\u6027\u4ed8\u51fa\u4e86\u5f88\u591a\u4ee3\u4ef7)\uff0c\u4f46\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u60a8\u4e0d\u60f3\u6784\u5efa\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u5b89\u5168\u7cfb\u7edf\u3002\u5b83\u5047\u8bbe\u4f60\u8981\u4e48\u6709\u4e00\u4e2a\u505a\u539f\u578b\u5de5\u4f5c\u7684\u4f18\u79c0\u7684\u5c0f\u56e2\u961f(\u201c\u63d0\u4f9b\u5c16\u5200\u201d)\uff0c\u8981\u4e48\u4f60\u6709\u4e00\u4e2a\u53ef\u80fd\u5e73\u5eb8\u7684\u56e2\u961f\uff0c\u9700\u8981\u5f3a\u5927\u7684\u5185\u7f6e\u6307\u5bfc(\u201c\u83dc\u5355\u662fOmakase\u201d)\u3002\nRails\u8fd8\u5047\u8bbe\u60a8\u5e0c\u671b\u4ee5\u6280\u672f\u503a\u52a1\u4e3a\u4ee3\u4ef7\u83b7\u5f97\u8f83\u9ad8\u7684\u5f00\u53d1\u901f\u5ea6\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u662f\u4e3a\u5feb\u901f\u5efa\u9020\u800c\u8bbe\u8ba1\u7684\u3002\u5f53\u6280\u672f\u6267\u884c\u4e0d\u662f\u60a8\u6700\u5927\u7684\u98ce\u9669\u65f6\uff0c\u8fd9\u662f\u6709\u610f\u4e49\u7684\u3002\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u6b63\u5728\u5efa\u7acb\u4e00\u5bb6\u5c0f\u578b\u521d\u521b\u516c\u53f8\uff0c\u4f60\u975e\u5e38\u786e\u5b9a\u4f60\u53ef\u4ee5\u5efa\u7acb\u7f51\u7ad9\uff0c\u4f46\u4eba\u4eec\u53ef\u80fd\u4e0d\u4f1a\u8d2d\u4e70\u4f60\u7684\u4ea7\u54c1\uff0c\u90a3\u4e48\u4f60\u5c31\u53d7\u5230\u5e02\u573a\u98ce\u9669\u7684\u652f\u914d\u3002\u8fd9\u5c31\u662fRails\u6700\u5b8c\u7f8e\u7684\u65f6\u5019\u3002\u4f60\u60f3\u8981\u5feb\u901f\u5efa\u9020\u3002\u5373\u4f7f\u4f60\u5efa\u9020\u5f97\u5f88\u5b8c\u7f8e\uff0c\u4f60\u4e5f\u5f88\u53ef\u80fd\u56e0\u4e3a\u975e\u6280\u672f\u539f\u56e0\u800c\u4e0d\u5f97\u4e0d\u6254\u6389\u7ed3\u679c\uff0c\u6bd4\u5982\u201c\u4eba\u4eec\u4e0d\u60f3\u4e70\u3002\u201d\n\u5982\u679cEventent\u8981\u597d\u5f97\u591a\uff0c\u4e3a\u4ec0\u4e48\u6211\u4eec\u4e0d\u628a\u5b83\u7528\u5728\u6240\u6709\u7684\u4e1c\u897f\u4e0a\u5462\uff1f\u56e0\u4e3a\u5b83\u4e0d\u662f\u4e07\u80fd\u7684\u3002\u6211\u5f3a\u8c03\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8ba1\u7b97\uff0c\u56e0\u4e3a\u5982\u679c\u60a8\u8bd5\u56fe\u8ba9\u4e00\u4e2a\u4e8b\u4ef6\u670d\u52a1\u5668\u6267\u884c\u975e\u5e38\u591a\u7684\u6bcf\u4e2a\u8bf7\u6c42\u7684\u8ba1\u7b97\uff0c\u5b83\u5c06\u4f1a\u5d29\u6e83\u548c\u6b7b\u4ea1\u3002\u5982\u679c\u6bcf\u4e2a\u8fde\u63a5\u4f7f\u7528100\u6beb\u79d2\u7684CPU\u65f6\u95f4\u7ed3\u675f\uff0c\u90a3\u4e48\u8ba9\u4e00\u53f0\u670d\u52a1\u5668\u5904\u7406\u4e00\u767e\u4e07\u4e2a\u8fde\u63a5\u662f\u4e0d\u597d\u7684-\u8fd9\u7b80\u76f4\u662f\u592a\u591a\u7684\u8fde\u63a5\uff0c\u5e76\u4e14\u5ef6\u8fdf\u5c06\u662f\u53ef\u6015\u7684\u3002\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7684\u9879\u76ee\uff0cRails\u548cNode.js\u662f\u4e0d\u540c\u7684\u5de5\u5177\u3002\u5982\u679c\u60a8\u5728\u60f3\uff0c\u201c\u6211\u5e94\u8be5\u4f7f\u7528Rails\u6216Node\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u201d\uff0c\u6211\u5efa\u8bae\u60a8\u66f4\u6df1\u5165\u5730\u7814\u7a76\u60a8\u7684\u9879\u76ee(\u548c/\u6216\u60a8\u7684\u6846\u67b6)\uff0c\u76f4\u5230\u5f88\u660e\u663e\u54ea\u4e00\u4e2a\u662f\u6b63\u786e\u7684\u7b54\u6848\u3002\u4ed6\u4eec\u505a\u4e0d\u540c\u7684\u4e8b\u60c5\u3002\n\u4f60\u770b\uff0c\u6211\u53ea\u662f\u6eda\u52a8\u5230\u6458\u8981\u7684\u5e95\u90e8\uff0c\u7136\u540e\u5728Reddit\u4e0a\u6279\u8bc4\u5b83\u3002\n\u5982\u679c\u60a8\u7684\u56e2\u961f\u4e0d\u60f3\u4f7f\u7528Rails\u6216\u4e0d\u77e5\u9053\u5982\u4f55\u4f7f\u7528\uff0c\u90a3\u4e48Rails\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\n\u5982\u679c\u4e0d\u540c\u7684\u6846\u67b6\u7279\u522b\u597d\uff0c\u6216\u8005\u60a8\u6709\u4e00\u4e2a\u7279\u5b9a\u7684\u5e93\u9700\u8981\u4e0e\u4e4b\u517c\u5bb9\uff0c\u800c\u8be5\u5e93\u5bf9Rails\u4e0d\u53cb\u597d\uff0c\u5219Rails\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\n\u5982\u679c\u60a8\u4e0d\u5728\u670d\u52a1\u5668\u4e0a\u5448\u73b0HTML\uff0c\u5c24\u5176\u662f\u5982\u679c\u60a8\u7684\u9879\u76ee\u975e\u5e38\u5c0f\u548c/\u6216\u4e0d\u4f7f\u7528\u6570\u636e\u5e93\uff0c\u90a3\u4e48Rails\u53ef\u80fd\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\nRails\u662f\u9519\u8bef\u7684\u9009\u62e9\uff0c\u56e0\u4e3a\u60a8\u4e0d\u662f\u5728\u505a\u539f\u578b\u98ce\u683c\u7684\u5de5\u4f5c\uff0c\u6700\u597d\u662f\u5728\u4e00\u4e2a\u5c0f\u7684\u3001\u80fd\u529b\u5f88\u5f3a\u7684\u56e2\u961f\u4e2d\u5de5\u4f5c\u3002\n\u5982\u679c\u60a8\u7684\u5f00\u53d1\u56e2\u961f\u6216\u5e94\u7528\u7a0b\u5e8f\u4ee3\u7801\u592a\u5927\uff0c\u5e76\u4e14\u65e0\u6cd5\u7ec6\u5206\u9879\u76ee\uff0c\u5219Rails\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\n\u5982\u679c\u60a8\u7684\u9879\u76ee\u9700\u8981\u50cfNode.js\u6216EventMachine\u8fd9\u6837\u7684\u4e8b\u4ef6\u670d\u52a1\u5668\uff0c\u90a3\u4e48Rails\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\n\u5982\u679c\u4f60\u5b81\u613f\u542c\u4e00\u4e2a\u5173\u4e8e\u540c\u4e00\u4e3b\u9898\u7684\u6709\u8da3\u7684\u64ad\u5ba2\uff0c\u90a3\u4e48\u8fd9\u7bc7\u6587\u7ae0\u662f\u9519\u8bef\u7684\u9009\u62e9\u3002\n\u5982\u679c\u60a8\u60f3\u77e5\u9053\u4ec0\u4e48\u65f6\u5019Rails\u662f\u6b63\u786e\u7684\u9009\u62e9\uff0cRails Doctrine\u662f\u5f88\u597d\u7684\u7b2c\u4e00\u6b65\u3002", "note_en": "I was  recently on Jason Swett\u2019s podcast again. He\u2019s a great interviewer and I always have fun with him.\n By Twitter request we talked about\u2026 When would you   not use Rails? It\u2019s a great question.\n For the entertaining version,  listen to the podcast. For the just-the-facts extra-complete version, I\u2019m writing this post.\n  I\u2019ll start with a few simple, obvious times you wouldn\u2019t use Rails, and then I\u2019ll talk about some technically interesting times.\n First, and most important, is team familiarity. If your team doesn\u2019t already know Rails and isn\u2019t especially interested in learning it then Rails is the wrong choice. This should be obvious, but it still deserves first billing.\n Second, when you know some other framework fit better. I\u2019ll talk more below about when that is. But sometimes you have a specific concern that trumps everything else. If you need to use a Java-language machine learning library and you don\u2019t want to use JRuby for some reason, Rails isn\u2019t your framework. Often there\u2019s one specific compatibility concern that overrides everything else.\n You can also think of it as: use it where Rails\u2019 good points hold and its bad points don\u2019t. So we\u2019ll also talk about the good and bad points.\n Separately: you\u2019d normally only use Rails as an HTTP server, so some tasks just aren\u2019t Rails-shaped.\n    Really Small Tasks that Won\u2019t Grow: if a server does very little, Rails is often too much. Not going to touch a database? Then the DB setup isn\u2019t helping you, is it? Just a tiny low-traffic intermediate server with no caching? A lot of Rails is more trouble than it\u2019s worth.\n Be careful with tasks that grow, though \u2014 making a tiny server scale up to do a lot more can be ugly. If you\u2019re already serving HTTP pages to a human with a web browser, consider that you may have to add features to it later. Something like   that is already fairly large from the word \u201cgo\u201d.\n When It\u2019s \u2018Just\u2019 an API Server: Rails has less to offer an API server that speaks JSON over the wire. A lot of its HTTP security doesn\u2019t matter for that case (e.g. SQL injection safeguards, XSS prevention.) While ActiveRecord can be nice for some database use cases, Rails really shines when you\u2019re building an HTML site that talks to browsers. Very small projects that mostly speak a structured format read by machines will often get less from Rails.\n Related to that is when you\u2019re doing in-browser rendering and Rails is \u2018just\u2019 serving JSON. It\u2019s a weird kind of in-between case. A lot of Rails security and convenience functions no longer help you, but you\u2019re still doing things where internal libraries (ActiveRecord, ActiveJob, ActionMailer) can be highly useful. But if you\u2019re never rendering HTML on the server and you\u2019re very sure you never will, Rails will probably help you less.\n  Rails is also designed for a small team and a medium-sized codebase. A huge team (lots of programmers) or a huge codebase (lots of controllers, models and/or lines of code) will tend to drag down the standard Rails-app structure.\n Ruby allows for a   lot of  non-local effects. Whether that\u2019s monkeypatching, writing to a database or creating new types at runtime, Ruby isn\u2019t designed for a team of 200 programmers where you don\u2019t trust some of them. There are too many ways for them to cause you trouble. You can use  good tooling to scale Ruby to larger teams, but even that will  tend to have exceptions and difficulties. That\u2019s not really Ruby\u2019s sweet spot.\n In most cases you can cut up a large project into smaller projects. If one Rails app is too big, you can often separate it into multiple apps, or a thinner app with more back-end services, or an app and a separate microservice, or\u2026 One way or another there is usually a way to separate out smaller pieces. Ruby strongly encourages that, as do I.\n There are also not-quite-Rails structures that can scale better. Avdi Grimm\u2019s (now retired)  Objects on Rails was an attempt in that direction, as is  the Hexagonal architecture for Rails, which in turn has a lot in common with the older and more general  N-tier architecture.\n But at some point you might want to consider a different framework.  Hanami is an obvious choice, designed to be less quick and nimble than Rails for getting a tiny app off the ground, but more scalable if you want to use the same code with a lot more contributors.\n I\u2019d still start out in Rails, personally. If you\u2019re building something quickly to see if anybody cares, I know of no framework that comes close to its productivity. Wait to rewrite (in a more rigid framework) until you\u2019re successful and you can afford the drag on your development speed.\n The other worry here can be performance. If you\u2019re rewriting a project that is already as large as the current Basecamp\u2026 then you\u2019re  actually fine for performance. Rails still scales   great for them. But if you\u2019re looking at something a hundred times larger (which by definition means B2C, not B2B) then you might have a situation where your server costs are substantially greater than your engineering payroll. In that case it can make sense to slow down your engineers to pay lower server costs. To check this, see what your EC2-or-equivalent costs are   just for your application servers, which are what run Rails. And check your payroll   just for web engineers, which is who writes in Rails. Normally the engineering payroll is much larger and you should stick with trading cheap machine time for expensive engineering time. But at some point the balance may tip and you should consider raising your engineering payroll to cut your server costs.\n   Before checking if Rails\u2019 assumptions are right for you, we should see what those assumptions actually are.\n Before you take my word for it, I recommend taking  David Heinemeier Hansson\u2019s word for it in the form of The Rails Doctrine. It\u2019s a great document and it covers a lot of ground.\n Indeed, if you want to better understand why Rails isn\u2019t amazing for large, low-trust teams, you should read  \u201cProvide Sharp Knives\u201d in the Rails Doctrine several times. A lot of Rails\u2019 tradeoffs are entirely by design.\n Rails also has some simpler assumptions: it assumes you\u2019re writing an interactive app with server-rendered HTML. It assumes that security is vital (Rails trades a lot for security) but that you don\u2019t want to build your own custom security system in most cases. And it assumes that you either have a small, excellent team doing prototyping work (\u201cProvide Sharp Knives\u201d) or that you have a possibly-mediocre team that needs powerful built-in guidelines ( \u201cThe Menu is Omakase.\u201d)\n Rails also assumes you want high developer velocity at a cost of technical debt. In other words, it\u2019s designed for building very quickly. That makes sense when   technical execution is not your biggest risk. For instance: if you\u2019re building a small startup, and you\u2019re pretty sure you can build the site but people may not buy your product, you are dominated by market risk. That\u2019s when Rails is perfect. You want to build very quickly. And even if you build perfectly, you\u2019re probably going to have to throw away the result for nontechnical reasons, like \u201cpeople don\u2019t want to buy it.\u201d\n As part of \u201chigh dev velocity, technical debt is okay\u201d Rails assumes things like, \u201cyou\u2019ll want to use a lot of gems\u201d and \u201cdependencies that work are fine if they speed you up.\u201d\n Rails assumes you don\u2019t mind scaling out application servers horizontally (by bringing more of them online.) It\u2019s designed to scale well   if you can do that. Rails assumes CPU is fairly cheap and it\u2019s usually right about that. Relatedly, Rails assumes that the database is usually your most serious performance bottleneck, which is how web applications usually work.\n Rails also assumes you\u2019ll have some calculation or data transformation in your application. It assumes that it\u2019s okay to use some CPU because you\u2019ll be doing that anyway.\n (When does that last assumption matter? Let\u2019s talk about Evented Servers and see.)\n   While Rails is great at a lot of things, there\u2019s one particular task that it\u2019s not amazing for: shim servers.\n By \u201cshim servers\u201d I mean servers that do very little calculation but integrate answers from a few other back-end services and relay the result. Imagine a server that queries two JSON services and combines the result with simple string-manipulation, for instance. It does very little calculation, but it juggles a lot of events.\n  There is a specific kind of app architecture embodied by Node.js and its relatives called \u201cEvented\u201d programming. It can support many thousands, or even millions, of simultaneous connections with a tiny amount of server resources. It can be both high-throughput and low-latency. Its benchmark numbers are matchless\u2026 for the cases where it works.\n Rails can\u2019t match Evented programming at what Evented programming is good at. Basically no framework can. There are Evented frameworks for Ruby (e.g.  EventMachine,  Async.) Rails is built differently.\n If Evented is so much better, why don\u2019t we use it for everything? Because it doesn\u2019t work for everything. I emphasise calculation per-request because an Evented server will fall down and die if you try to make it do very much calculation per-request. Having one server handle a million connections is no good if each connection winds up using a hundred milliseconds of CPU time \u2014 that\u2019s simply too many connections and the latency will be terrible.\n In other words, Rails and Node.js are different tools for different projects. If you\u2019re thinking, \u201cI should either use Rails or Node for this\u201d I would recommend looking deeper into your project (and/or your framework) until it\u2019s obvious which one is the right answer. They do different things.\n Look, I Just Scroll to the Bottom for the Summary and Criticise It On Reddit\n  Rails is the wrong choice if your team doesn\u2019t want to use it or doesn\u2019t know how.\n Rails is the wrong choice in cases where a different framework is specifically better, or you have a specific library you need to be compatible with that isn\u2019t Rails-friendly.\n Rails might be the wrong choice if you\u2019re not rendering HTML on the server, especially if your project is very small and/or doesn\u2019t use a database.\n Rails is the wrong choice is you\u2019re not doing prototyping-flavoured work, preferably with a small, highly-competent team.\n Rails is the wrong choice if your dev team or your app code is too big and you can\u2019t subdivide the project.\n Rails is the wrong choice if your project wants an Evented server like Node.js or EventMachine.\n This article is the wrong choice if you\u2019d rather  listen to an entertaining podcast on the same topic.\n If you\u2019re wondering when Rails is the   right choice,  the Rails Doctrine is a great first step.", "posttime": "2020-08-05 15:46:12", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rails", "title": "\u4ec0\u4e48\u65f6\u5019\u4e0d\u5e94\u8be5\u4f7f\u7528Rails\uff1f", "title_en": "When Should You Not Use Rails?", "transed": 1, "url": "http://codefol.io/posts/when-should-you-not-use-rails/", "via": "", "real_tags": ["rails"]}, {"category": "", "categoryclass": "", "imagename": "7b333b3efbde27111f1c6a6cd2f2c44f.png", "infoid": 1016356, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u6b63\u5728\u5c06cookie\u7684SameSite\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u4eceNone\u66f4\u6539\u4e3aLax\u3002\u8fd9\u5c06\u5927\u5927\u63d0\u9ad8\u7528\u6237\u7684\u5b89\u5168\u6027\u3002\u4f46\u662f\uff0c\u4e00\u4e9b\u7f51\u7ad9\u53ef\u80fd(\u751a\u81f3\u5728\u4e0d\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b)\u4f9d\u8d56\u4e8e\u65e7\u7684\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u7f51\u7ad9\u4e2d\u65ad\u3002\u5728Mozilla\uff0c\u6211\u4eec\u6b63\u5728\u6162\u6162\u5f15\u5165\u8fd9\u4e00\u53d8\u5316\u3002\u6211\u4eec\u5f3a\u70c8\u9f13\u52b1\u6240\u6709\u7684\u7f51\u7ad9\u5f00\u53d1\u4eba\u5458\u4f7f\u7528\u65b0\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u6765\u6d4b\u8bd5\u4ed6\u4eec\u7684\u7ad9\u70b9\u3002\nSameSite\u662fCookie\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5141\u8bb8Web\u5f00\u53d1\u4eba\u5458\u58f0\u660eCookie\u5e94\u4ec5\u9650\u4e8e\u7b2c\u4e00\u65b9\u6216\u540c\u4e00\u7ad9\u70b9\u4e0a\u4e0b\u6587\u3002\u8be5\u5c5e\u6027\u53ef\u4ee5\u5177\u6709\u4e0b\u5217\u503c\u4e4b\u4e00\uff1a\n\u4e25\u683c-\u6d4f\u89c8\u5668\u5c06\u4ec5\u53d1\u9001\u540c\u7ad9\u70b9\u8bf7\u6c42\u7684Cookie(\u5373\uff0c\u6e90\u81ea\u8bbe\u7f6eCookie\u7684\u7ad9\u70b9\u7684\u8bf7\u6c42)\u3002\nLax-Cookie\u5c06\u5728\u8de8\u7ad9\u70b9\u8bf7\u6c42(\u5982\u8c03\u7528\u52a0\u8f7d\u56fe\u50cf\u6216\u5e27)\u65f6\u88ab\u6263\u7559\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u4ece\u5916\u90e8\u7ad9\u70b9\u5bfc\u822a\u5230URL\u65f6(\u4f8b\u5982\uff0c\u901a\u8fc7\u8ddf\u968f\u94fe\u63a5)\uff0c\u5c06\u53d1\u9001Cookie\u3002\n\u76ee\u524d\uff0c\u7f3a\u5c11SameSite\u5c5e\u6027\u610f\u5473\u7740Cookie\u5c06\u9644\u52a0\u5230\u9488\u5bf9\u7ed9\u5b9a\u6e90\u7684\u4efb\u4f55\u8bf7\u6c42\uff0c\u65e0\u8bba\u8be5\u8bf7\u6c42\u662f\u7531\u8c01\u53d1\u8d77\u7684\u3002\u6b64\u884c\u4e3a\u7b49\u6548\u4e8e\u8bbe\u7f6eSameSite=None\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u201c\u9ed8\u8ba4\u6253\u5f00\u201d\u884c\u4e3a\u4f7f\u7528\u6237\u5bb9\u6613\u53d7\u5230\u8de8\u7ad9\u70b9\u8bf7\u6c42\u4f2a\u9020(CSRF)\u653b\u51fb\u3002\u5728CSRF\u653b\u51fb\u4e2d\uff0c\u6076\u610f\u7ad9\u70b9\u8bd5\u56fe\u4f7f\u7528\u6765\u81ea\u5408\u6cd5\u7ad9\u70b9\u7684\u6709\u6548cookie\u6765\u6267\u884c\u653b\u51fb\u3002\n\u4e3a\u4e86\u4fdd\u62a4\u7528\u6237\u514d\u53d7CSRF\u653b\u51fb\uff0c\u6d4f\u89c8\u5668\u9700\u8981\u66f4\u6539\u5904\u7406Cookie\u7684\u65b9\u5f0f\u3002\u4e24\u4e2a\u4e3b\u8981\u66f4\u6539\u662f\uff1a\n\u663e\u5f0f\u8bbe\u7f6eSameSite=None\u4ee5\u542f\u7528\u8de8\u7ad9\u70b9\u4f20\u9012\u7684Cookie\u8fd8\u5fc5\u987b\u8bbe\u7f6e\u5b89\u5168\u5c5e\u6027\u3002(\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b83\u4eec\u5fc5\u987b\u9700\u8981HTTPS\u3002)\u3002\n\u4f9d\u8d56\u65e7\u7684\u9ed8\u8ba4\u884c\u4e3a\u7684\u7f51\u7ad9\u73b0\u5728\u5fc5\u987b\u5c06SameSite\u5c5e\u6027\u663e\u5f0f\u8bbe\u7f6e\u4e3aNone\u3002\u6b64\u5916\uff0c\u8fd8\u8981\u6c42\u5b83\u4eec\u5305\u542b\u5b89\u5168\u5c5e\u6027\u3002\u4e00\u65e6\u5728Firefox\u4e2d\u8fdb\u884c\u4e86\u6b64\u66f4\u6539\uff0c\u5982\u679c\u7f51\u7ad9\u65e0\u6cd5\u6b63\u786e\u8bbe\u7f6eSameSite\uff0c\u5219\u8fd9\u4e9b\u7f51\u7ad9\u53ef\u80fd\u4f1a\u5bf9\u7528\u6237\u9020\u6210\u7834\u574f\u3002\n\u65b0\u7684SameSite\u884c\u4e3a\u4eceNighter75(2020\u5e742\u6708)\u5f00\u59cb\u5c31\u4e00\u76f4\u662fFirefox Nighways\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u5728Mozilla\uff0c\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u63a2\u7d22\u8fd9\u4e00\u53d8\u5316\u7684\u542b\u4e49\u3002\u4eceFirefox79(2020\u5e746\u6708)\u5f00\u59cb\uff0c\u6211\u4eec\u5c06\u5176\u63a8\u5e7f\u523050%\u7684Firefox Beta\u7528\u6237\u7fa4\u3002\u6211\u4eec\u60f3\u76d1\u63a7\u4efb\u4f55\u6f5c\u5728\u7834\u635f\u7684\u8303\u56f4\u3002\n\u76ee\u524d\u8fd8\u6ca1\u6709\u5c06\u6b64\u529f\u80fd\u53d1\u5e03\u5230Firefox\u53d1\u5e03\u9891\u9053\u7684\u65f6\u95f4\u8868\u3002\u6211\u4eec\u5e0c\u671b\u770b\u5230Beta\u7528\u6237\u6ca1\u6709\u770b\u5230\u4e0d\u53ef\u63a5\u53d7\u7684\u7f51\u7ad9\u7834\u635f\u91cf--\u8fd9\u8868\u660e\u5927\u591a\u6570\u7f51\u7ad9\u5df2\u7ecf\u9002\u5e94\u4e86\u65b0\u7684\u9ed8\u8ba4\u884c\u4e3a\u3002\u7531\u4e8e\u201c\u7834\u574f\u201d\u6ca1\u6709\u786e\u5207\u7684\u5b9a\u4e49\uff0c\u800c\u4e14\u5f88\u96be\u901a\u8fc7\u9065\u6d4b\u6765\u786e\u5b9a\uff0c\u6211\u4eec\u6b63\u5728\u5173\u6ce8\u51e0\u4e2a\u6e20\u9053(\u4f8b\u5982\uff0cBugzilla\u3001\u793e\u4ea4\u5a92\u4f53\u3001\u535a\u5ba2)\u5173\u4e8e\u7ad9\u70b9\u7834\u574f\u7684\u62a5\u9053\u3002\n\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u770b\u5230\u8be5\u63d0\u6848\u5728IETF\u4e2d\u8fdb\u4e00\u6b65\u63a8\u8fdb\u3002\u4f5c\u4e3a\u5f00\u653e\u7f51\u7edc\u7684\u652f\u6301\u8005\uff0c\u5bf9\u7f51\u7edc\u751f\u6001\u7cfb\u7edf\u7684\u6539\u53d8\u8fdb\u884c\u9002\u5f53\u7684\u6807\u51c6\u5316\u662f\u5f88\u91cd\u8981\u7684\u3002\n\u8fd9\u662f\u6574\u4e2a\u884c\u4e1a\u5bf9\u6d4f\u89c8\u5668\u7684\u6539\u53d8\uff0c\u800c\u4e0d\u662fMozilla\u4e00\u4e2a\u4eba\u5728\u505a\u7684\u4e8b\u60c5\u3002\u8c37\u6b4c\u4ece2020\u5e742\u6708\u5f00\u59cb\u5411Chrome\u7528\u6237\u63a8\u51fa\u8fd9\u4e00\u6539\u53d8\uff0cSameSite=lax\u662f\u4ed6\u4eec\u6240\u6709\u9891\u9053(\u53d1\u884c\u7248\u3001\u6d4b\u8bd5\u7248\u3001\u91d1\u4e1d\u96c0\u7248)\u4e2d\u4e00\u5b9a\u767e\u5206\u6bd4(\u672a\u53d1\u5e03)\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u3002\nMozilla\u6b63\u5728\u4e0e\u8c37\u6b4c\u5408\u4f5c\uff0c\u5728\u6211\u4eec\u5404\u81ea\u7684\u6f0f\u6d1e\u8ddf\u8e2a\u6570\u636e\u5e93\u4e2d\u8ddf\u8e2a\u548c\u5171\u4eab\u7f51\u7ad9\u5d29\u6e83\u7684\u62a5\u544a\u3002\u6211\u4eec\u5171\u540c\u9f13\u52b1\u6240\u6709Web\u5f00\u53d1\u4eba\u5458\u5f00\u59cb\u5c06SameSite\u5c5e\u6027\u663e\u5f0f\u8bbe\u7f6e\u4e3a\u6700\u4f73\u5b9e\u8df5\u3002\n\u5728Firefox Nighly\u548cBeta\u9891\u9053\u7684\u6d4b\u8bd5\u8868\u660e\uff0c\u7f51\u7ad9\u786e\u5b9e\u53d1\u751f\u4e86\u7834\u574f\u3002\u867d\u7136\u6211\u4eec\u5df2\u7ecf\u8054\u7cfb\u4e86\u6211\u4eec\u9047\u5230\u7684\u90a3\u4e9b\u7ad9\u70b9\uff0c\u5e76\u9f13\u52b1\u4ed6\u4eec\u5728\u5176Web\u5c5e\u6027\u4e0a\u8bbe\u7f6eSameSite\u5c5e\u6027\uff0c\u4f46\u662fWeb\u663e\u7136\u592a\u5927\u4e86\uff0c\u4e0d\u80fd\u5728\u4e2a\u6848\u7684\u57fa\u7840\u4e0a\u8fd9\u6837\u505a\u3002\n\u91cd\u8981\u7684\u662f\uff0c\u6240\u6709\u7684Web\u5f00\u53d1\u4eba\u5458\u90fd\u8981\u6839\u636e\u8fd9\u4e2a\u65b0\u7684\u9ed8\u8ba4\u8bbe\u7f6e\u6765\u6d4b\u8bd5\u4ed6\u4eec\u7684\u7ad9\u70b9\u3002\u8fd9\u5c06\u4e3aFirefox\u548cChrome\u6d4f\u89c8\u5668\u5728\u5404\u81ea\u7684\u53d1\u5e03\u6e20\u9053\u4e2d\u8fdb\u884c\u5207\u6362\u505a\u597d\u51c6\u5907\u3002\n\u6b64\u65f6\uff0c\u8bf7\u5f7b\u5e95\u6d4b\u8bd5\u60a8\u7684\u7ad9\u70b9\u3002\u5c24\u5176\u8981\u6ce8\u610f\u4efb\u4f55\u6d89\u53ca\u767b\u5f55\u6d41\u3001\u591a\u4e2a\u57df\u6216\u8de8\u7ad9\u70b9\u5d4c\u5165\u5185\u5bb9(\u56fe\u50cf\u3001\u89c6\u9891\u7b49)\u7684\u5185\u5bb9\u3002\u5bf9\u4e8e\u4efb\u4f55\u6d89\u53caPOST\u8bf7\u6c42\u7684\u6d41\uff0c\u60a8\u5e94\u8be5\u4f7f\u7528\u548c\u4e0d\u4f7f\u7528\u957f\u5ef6\u8fdf\u8fdb\u884c\u6d4b\u8bd5\u3002\u8fd9\u662f\u56e0\u4e3aFirefox\u548cChrome\u90fd\u5b9e\u73b0\u4e86\u4e24\u5206\u949f\u7684\u9608\u503c\uff0c\u5141\u8bb8\u5728\u9876\u7ea7\u7684\u8de8\u7ad9\u70b9POST\u8bf7\u6c42(\u4e00\u4e2a\u5e38\u89c1\u7684\u767b\u5f55\u6d41)\u4e0a\u53d1\u9001\u6ca1\u6709SameSite\u5c5e\u6027\u7684\u65b0\u521b\u5efa\u7684cookie\u3002\n\u8981\u67e5\u770b\u60a8\u7684\u7ad9\u70b9\u662f\u5426\u53d7\u5230\u65b0Cookie\u884c\u4e3a\u7684\u5f71\u54cd\uff0c\u8bf7\u68c0\u67e5Firefox Web\u63a7\u5236\u53f0\u5e76\u67e5\u627e\u4ee5\u4e0b\u6d88\u606f\u4e4b\u4e00\uff1a\nCookie\u88ab\u62d2\u7edd\uff0c\u56e0\u4e3a\u5b83\u5177\u6709\u201csameSite=None\u201d\u5c5e\u6027\uff0c\u4f46\u7f3a\u5c11\u201cSecure\u201d\u5c5e\u6027\u3002\nCookie\u5c06\u201csameSite\u201d\u7b56\u7565\u8bbe\u7f6e\u4e3a\u201clax\u201d\uff0c\u56e0\u4e3a\u5b83\u7f3a\u5c11\u201csameSite\u201d\u5c5e\u6027\uff0c\u800c\u201csameSite=lax\u201d\u662f\u8be5\u5c5e\u6027\u7684\u9ed8\u8ba4\u503c\u3002\n\u770b\u5230\u8fd9\u4e24\u6761\u6d88\u606f\u4e2d\u7684\u4efb\u4f55\u4e00\u6761\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u60a8\u7684\u7ad9\u70b9\u5c06\u4e0d\u518d\u5de5\u4f5c\uff0c\u56e0\u4e3a\u65b0\u7684Cookie\u884c\u4e3a\u53ef\u80fd\u5bf9\u60a8\u7684\u7ad9\u70b9\u7684\u529f\u80fd\u5e76\u4e0d\u91cd\u8981\u3002\u56e0\u6b64\uff0c\u81f3\u5173\u91cd\u8981\u7684\u662f\uff0c\u6bcf\u4e2a\u73b0\u573a\u90fd\u8981\u5728\u65b0\u7684\u6761\u4ef6\u4e0b\u8fdb\u884c\u6d4b\u8bd5\u3002\u7136\u540e\uff0c\u9a8c\u8bc1\u65b0\u7684SameSite\u884c\u4e3a\u6ca1\u6709\u7834\u574f\u4efb\u4f55\u5185\u5bb9\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u663e\u5f0f\u8bbe\u7f6eCookie\u7684SameSite\u5c5e\u6027\u662f\u4fdd\u8bc1\u60a8\u7684\u7ad9\u70b9\u7ee7\u7eed\u4ee5\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u8fd0\u884c\u7684\u6700\u4f73\u65b9\u5f0f\u3002", "note_en": "We are changing the default value of the   SameSite attribute for cookies from   None to   Lax. This will greatly improve security for users. However, some web sites may depend (even unknowingly) on the old default, potentially resulting in breakage for those sites. At Mozilla, we are slowly introducing this change. And we are strongly encouraging all web developers to test their sites with the new default.\n  SameSite is an attribute on cookies that allows web developers to declare that a cookie should be restricted to a first-party, or same-site, context. The attribute can have any of the following values:\n Strict \u2013 The browser will only send cookies for same-site requests (i.e., requests originating from the site that set the cookie).\n Lax \u2013 Cookies will be withheld on cross-site requests (such as calls to load images or frames). However, cookies will be sent when a user navigates to the URL from an external site; for example, by following a link.\n Currently, the absence of the   SameSite attribute implies that cookies will be attached to any request for a given origin, no matter who initiated that request. This behavior is equivalent to setting   SameSite=None. However, this \u201copen by default\u201d behavior leaves users vulnerable to Cross-Site Request Forgery ( CSRF) attacks. In a CSRF attack, a malicious site attempts to use valid cookies from legitimate sites to carry out attacks.\n  To protect users from CSRF attacks, browsers need to change the way cookies are handled. The two primary changes are:\n Cookies that explicitly set   SameSite=None in order to enable cross-site delivery must also set the   Secure attribute. (In other words, they must require HTTPS.)\n Web sites that depend on the old default behavior must now explicitly set the   SameSite attribute to   None. In addition, they are required to include the   Secure attribute. Once this change is made inside of Firefox, if web sites fail to set   SameSite correctly, it is possible those sites could break for users.\n  The new   SameSite behavior has been the default in Firefox Nightly since Nightly 75 (February 2020). At Mozilla, we\u2019ve been able to explore the implications of this change. Starting with Firefox 79 (June 2020), we rolled it out to 50% of the  Firefox Beta user base. We want to monitor the scope of any potential breakage.\n There is currently no timeline to ship this feature to the release channel of Firefox. We want to see that the Beta population is not seeing an unacceptable amount of site breakage\u2014indicating most sites have adapted to the new default behavior. Since there is no exact definition of \u201cbreakage\u201d and it can be difficult to determine via telemetry, we are watching for reports of site breakage in several channels (e.g. Bugzilla, social media, blogs).\n Additionally, we\u2019d like to see the proposal advance further in the IETF. As proponents of the open web, it is important that changes to the web ecosystem are properly standardized.\n  This is an industry-wide change for browsers and is not something Mozilla is undertaking alone. Google has been  rolling this change out to Chrome users since February 2020, with   SameSite=Lax being the default for a certain (unpublished) percentage of all their channels (release, beta, canary).\n Mozilla is cooperating with Google to track and share reports of website breakage in our respective bug tracking databases. Together, we are encouraging all web developers to start explicitly setting the   SameSite attribute as a best practice.\n   Testing in the Firefox Nightly and Beta channels has shown that website breakage does occur. While we have reached out to those sites we\u2019ve encountered and encouraged them to set the   SameSite attribute on their web properties, the web is clearly too big to do this on a case-by-case basis.\n It is important that all web developers test their sites against this new default. This will prepare you for when both Firefox and Chrome browsers make the switch in their respective release channels.\n    At this point, test your site thoroughly. In particular, pay attention to anything involving login flows, multiple domains, or cross-site embedded content (images, videos, etc.). For any flows involving    POST requests, you should test with and without a long delay. This is because both Firefox and Chrome implement a two-minute threshold that permits newly created cookies without the   SameSite attribute to be sent on top-level, cross-site   POST requests (a common login flow).\n  To see if your site is impacted by the new cookie behavior, examine the  Firefox Web Console and look for either of these messages:\n Cookie rejected because it has the \u201c sameSite=none\u201d attribute but is missing the \u201c secure\u201d attribute.\n Cookie has \u201c sameSite\u201d policy set to \u201c lax\u201d because it is missing a \u201c sameSite\u201d attribute, and \u201c sameSite=lax\u201d is the default value for this attribute.\n Seeing either of these messages does not necessarily mean your site will no longer work, as the new cookie behavior may not be important to your site\u2019s functionality. It is critical, therefore, that each site test under the new conditions. Then, verify that the new   SameSite behavior does not break anything. As a general rule, explicitly setting the   SameSite attribute for cookies is the best way to guarantee that your site continues to function predictably.", "posttime": "2020-08-05 15:45:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,cookie,\u7ad9\u70b9", "title": "\u5bf9SameSite Cookie\u884c\u4e3a\u7684\u66f4\u6539-\u5bf9Web\u5f00\u53d1\u4eba\u5458\u7684\u884c\u52a8\u547c\u5401", "title_en": "Changes to SameSite Cookie Behavior \u2013 A Call to Action for Web Developers", "transed": 1, "url": "https://hacks.mozilla.org/2020/08/changes-to-samesite-cookie-behavior/", "via": "", "real_tags": ["\u5f00\u53d1", "cookie", "\u7ad9\u70b9"]}]