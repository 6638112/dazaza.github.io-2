[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1013208, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u4e00\u6bb5\u65f6\u95f4\u4ee5\u6765\u4e00\u76f4\u60f3\u5199\u7684\u5e16\u5b50\uff1a\u4e00\u5219\u5173\u4e8e\u6bd4\u8f83Lisp\u5bb6\u65cf\u7f16\u7a0b\u8bed\u8a00\u7684\u8f76\u4e8b\u3002\u6211\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2aLisp\u9ed1\u5ba2\u3002\u4e5f\u8bb8\u8fd9\u4e00\u70b9\u4ece\u88c5\u9970\u5728\u6211\u7684\u7f51\u7ad9\u6807\u9898\u4e0a\u7684\u5b57\u6bcd\u03bb\u4e2d\u53ef\u89c1\u4e00\u6591\uff0c\u8fd9\u662f\u5bf9\u7ea6\u7ff0\u00b7\u9ea6\u5361\u9521(John McCarthy)\u8bbe\u8ba1\u7b2c\u4e00\u4e2aLISP\u7684\u7075\u611f\u6240\u5728\u7684\u03bb\u5fae\u79ef\u5206\u7684\u5f15\u7528\u3002\u7136\u800c\uff0c\u9664\u975e\u4f60\u4e5f\u8ba4\u4e3a\u81ea\u5df1\u662f\u4e00\u4e2aLisp\u9ed1\u5ba2\uff0c\u5426\u5219Lisp\u9ed1\u5ba2\u53ef\u80fd\u6ca1\u6709\u4ec0\u4e48\u610f\u4e49\u3002\u79f0\u81ea\u5df1\u4e3a\u4e00\u4e2a\u4eba\u4f3c\u4e4e\u5e26\u6709\u67d0\u79cd\u7a0b\u5ea6\u7684\u4e0d\u8a00\u800c\u55bb\u7684\u542b\u4e49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6709\u4e9b\u4eba\u8ba4\u540c\u66f4\u5177\u4f53\u7684\u7fa4\u4f53\u3002\u9634\u8c0b\u5bb6\u3001\u9634\u8c0b\u5bb6\u3001\u62c9\u514b\u6cf0\u5c14\u3001\u6536\u85cf\u5bb6\u3001\u2287\u9ed1\u5ba2\u3001\u9634\u8c0b\u5bb6\u7b49\u90fd\u5c5e\u4e8e\u66f4\u5177\u4f53\u7684\u7fa4\u4f53\uff0c\u800c\u4e0d\u662f\u91cc\u65af\u666e\u9ed1\u5ba2(LISP hacker&#34\uff1bGULER&#34\uff1b\u6216&#34\uff1bRacketeer\uff0c&#34\uff1b\u6216&#34\uff1bCloJurist&#34\uff1bLISP hacker&#34\uff1b\u6216&#34\uff1bGuiler&#34\uff1b\u6216&#34\uff1bRacketeer\uff0c&#34\uff1b\u6216&#34\uff1b\u6240\u6709\u8fd9\u4e9b\u7f16\u7a0b\u8bed\u8a00\u6216\u81f3\u5c11\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u90fd\u6709\u5171\u540c\u6027\uff0cLisp\u9ed1\u5ba2\u8ba4\u8bc6\u5230\u5e76\u7406\u89e3\u8fd9\u79cd\u5171\u540c\u6027-\u4f7f\u7f16\u7a0b\u8bed\u8a00\u6210\u4e3aLisp\u7684\u7279\u5f81\u3002\u5728\u6211\u770b\u6765\uff0c\u65e0\u4e0e\u4f26\u6bd4\u7684\u540c\u5f62\u8bed\u6cd5\u3001\u5f3a\u5927\u7684\u5143\u7f16\u7a0b\u5de5\u5177\u548c\u7f16\u8f91\u5668\u652f\u6301\u3002(\u662f\u7684\uff0c\u6211\u6307\u7684\u662fGNU Emacs\u3002)\u3002\u7136\u800c\uff0c\u8fd9\u7bc7\u6587\u7ae0\u5173\u6ce8\u7684\u662f\u8fd9\u4e9b\u4e0d\u540c\u4e4b\u5904\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u8003\u8651\u6bcf\u79cd\u65b9\u8a00\u7684\u7279\u70b9\uff0c\u4ee5\u53ca\u8fd9\u4e9b\u7279\u70b9\u662f\u5426\u6784\u6210\u6211\u60f3\u7528\u6765\u5f00\u53d1\u4e00\u6b3e\u65b0\u8f6f\u4ef6\u7684\u8bed\u8a00\u3002\n\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u7279\u522b\u5173\u6ce8\u6e38\u620f\u5f00\u53d1\u3002\u6211\u7a81\u7136\u6709\u4e86\u4e00\u4e2a\u4ee5\u56de\u5408\u4e3a\u57fa\u7840\u7684\u6218\u672f\u6e38\u620f\u7684\u60f3\u6cd5\uff0c\u6211\u89c9\u5f97Lisp\u5c06\u662f\u5b9e\u73b0\u5b83\u7684\u6700\u597d\u5de5\u5177\uff0c\u4f46\u4f7f\u7528Lisp\u7684\u51b3\u5b9a\u4ecd\u7136\u7ed9\u6211\u7559\u4e0b\u4e86\u51e0\u4e2a\u9009\u62e9\u3002\u5f53\u6211\u5217\u4e3e\u6bcf\u79cd\u65b9\u8a00\u80cc\u540e\u503c\u5f97\u6ce8\u610f\u7684\u8bbe\u8ba1\u9009\u62e9\uff0c\u5e76\u8c08\u5230\u6211\u66f4\u559c\u6b22\u7684\u65b9\u6cd5\u65f6\uff0c\u6211\u7684\u89c2\u70b9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u4f1a\u88ab\u6846\u5b9a\u4e3a\u5bf9\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898\u7684\u90e8\u5206\u56de\u7b54\uff1a\u6211\u80fd\u8f7b\u677e\u5730\u7528\u5b83\u6765\u5199\u89c6\u9891\u6e38\u620f\u5417\uff1f\u56e0\u6b64\uff0c\u6709\u51e0\u4ef6\u4e8b\u6211\u7279\u522b\u611f\u5174\u8da3\uff1a\n\u4eba\u4f53\u5de5\u7a0b\u5b66\uff0c\u6216\u79f0\u201c\u4eba\u4f53\u5de5\u7a0b\u5b66\u201d\uff0c\u662f\u5bf9\u4eba\u5728\u8bd5\u56fe\u5b8c\u6210\u4efb\u52a1\u65f6\u7684\u6469\u64e6\u529b[\u4f53\u9a8c]\u7684\u4e00\u79cd\u8861\u91cf\u65b9\u6cd5[2]\u3002\n\u6027\u80fd\uff0c\u8fd9\u4e0d\u662f\u9002\u5f53\u91cf\u5316\u7684\u5fae\u4e0d\u8db3\u9053\u7684[3]\u3002\u6211\u4e0d\u4f1a\u5bf9\u6b64\u4e25\u683c\u8981\u6c42\u7684\uff1b\u4e00\u6b21\u6027\u5730\u4e0e\u65f6\u95f4\u4e00\u8d77\u8fd0\u884c\u53ef\u4ee5\u5f88\u597d\u5730\u4e86\u89e3\u6267\u884c\u65f6\u95f4\u7684\u5927\u5c0f\u3002\n\u6613\u4e8e\u5206\u53d1\uff0c\u8fd9\u5f88\u96be\u5b9a\u4e49\uff0c\u4f46\u6211\u5c06\u5176\u4e0e\u5e73\u53f0\u4e0d\u53ef\u77e5\u8bba\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u8fd0\u884c\u65f6\u4e0d\u4f1a\u4f7f\u6211\u7684tarball\u81a8\u80c0\u51e0\u4e2a\u5343\u5146\u5b57\u8282\uff0c\u4ee5\u53ca\u7f3a\u4e4f\u5df4\u6d1b\u514b\u98ce\u683c\u548c\u96be\u4ee5\u83b7\u5f97\u4f9d\u8d56\u3002\n\u80fd\u591f\u4e0e\u5176\u4ed6\u5e93\u4ea4\u4e92\uff0c\u56e0\u4e3a\u6211\u5e0c\u671b\u80fd\u591f\u7ed8\u5236\u5230\u5c4f\u5e55\u4e0a\uff0c\u5e76\u64ad\u653e\u58f0\u97f3\uff0c\u7b49\u7b49\u3002\n\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u65b9\u8a00\uff0c\u6211\u90fd\u5141\u8bb8\u81ea\u5df1\u4f7f\u7528\u975e\u6807\u51c6\u529f\u80fd\u3002\u6211\u7684\u76ee\u6807\u662f\u8bc4\u4f30\u6bcf\u79cd\u8bed\u8a00\u7684\u5b9e\u7528\u65b9\u9762\uff0c\u5982\u679c\u60a8\u6b63\u5728\u7f16\u5199\u8f6f\u4ef6\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528\u8d85\u8fc7R5RS\u6216ANSI CL\u6807\u51c6\u4e2d\u5305\u542b\u7684\u5185\u5bb9\u3002\u4e0d\u8fc7\uff0c\u5982\u679c\u8fd9\u4e9b\u975e\u6807\u51c6\u51fd\u6570\u7279\u5b9a\u4e8e\u5355\u4e2a\u5b9e\u73b0\uff0c\u6211\u4f1a\u907f\u514d\u4f7f\u7528\u5b83\u4eec\u3002SRFI\u548cQuickLisp\u662f\u516c\u5e73\u7684\u7ade\u4e89\u5bf9\u624b\uff0c\u4f46\u9e21\u7684\u9e21\u86cb\u4e0d\u662f\u3002\u554a\uff0c\u6211\u5df2\u7ecf\u8a00\u8fc7\u5176\u5b9e\u4e86\u3002\u662f\u7684\uff0c\u6211\u5c06\u6bd4\u8f83Scheme\u548cCommon Lisp\u3002\u6211\u51e0\u4e4e\u4e0d\u5f97\u4e0d\u8fd9\u4e48\u505a--Lisp\u7684\u5386\u53f2\u5f80\u5f80\u88ab\u7f16\u7ec7\u6210Common Lisp\u548cScheme\u4e4b\u95f4\u7684\u5206\u88c2\u3002\u6211\u8fd8\u4f1a\u8c08\u5230\u5176\u4ed6\u51e0\u4e2a\u4eba\u3002\u6211\u5927\u591a\u9009\u62e9\u5b58\u5728\u4e00\u4e9b\u6e38\u620f\u5f15\u64ce\u7c7b\u578b\u5e93\u7684\u65b9\u8a00\u3002\u5bf9\u4e8eR7RS(\u9e21\u8089)\uff0c\u6709\u8d85\u5927\u7684\uff1b\u5bf9\u4e8eR6RS(Guile)\uff0c\u6709\u5c71\u96c0\uff1b\u5bf9\u4e8eCommon Lisp\uff0c\u6709Xelf\uff1b\u5bf9\u4e8e\u8334\u9999\uff0c\u5f53\u7136\u6709L\uff1fVE\u3002\n\u4ee5\u4e0b\u662f\u6211\u7684\u89c2\u70b9\uff0c\u6240\u4ee5\u6211\u60f3\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6fc0\u52b1\u4ed6\u4eec\u7684\u80cc\u666f\u3002\u6211\u6700\u65e9\u8ba4\u771f\u4f7f\u7528Lisp\u7684\u7ecf\u5386\u662f\u5728PeterSeibel\u7684\u201c\u5b9e\u7528\u901a\u7528Lisp\u201d\u4e0a\uff0c\u8fd9\u662f\u6211\u5728\u9ad8\u4e2d\u5c1d\u8bd5\u9605\u8bfb\u8ba1\u7b97\u673a\u7a0b\u5e8f\u7684\u7ed3\u6784\u548c\u89e3\u91ca\u5931\u8d25\u540e\u5b66\u5230\u7684\u30021\u6211\u6240\u7ba1\u7406\u7684\u540e\u4e00\u672c\u4e66\u7684\u90e8\u5206\u8db3\u4ee5\u8ba9\u6211\u76f8\u4fe1\u5b66\u4e60Lisp\u662f\u6709\u4ef7\u503c\u7684\uff0c\u4f46\u662f\u5b66\u4e60CommonLisp\u53ef\u80fd\u6bd4\u5b66\u4e60\u65b9\u6848\u66f4\u5bb9\u6613\u3002\u5927\u5b66\u4e00\u5e74\u7ea7\u540e\u7684\u90a3\u4e2a\u590f\u5929\uff0c\u6211\u81ea\u5b66\u4e86\u4e3aGNU Guix\u505aGSOC\u7684\u8ba1\u5212\u3002Guilequickly\u9010\u6e10\u8ba9\u6211\u559c\u6b22\u4e0a\u4e86\uff0c\u6211\u5f88\u5feb\u5c31\u5f00\u59cb\u5728\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u4e0a\u4f7f\u7528\u201c\u51fa\u6ca1\u201d\u4e86\u3002\u6211\u4ece\u5f88\u4e45\u4ee5\u524d\u5c31\u5f00\u59cb\u4e0d\u77e5\u4e0d\u89c9\u5730\u4f7f\u7528Emacs Lisp\u4e86--\u4e0d\u662f\u5728\u7f16\u5199\u5305\u7684\u610f\u4e49\u4e0a--\u6211\u7236\u4eb2\u5728\u62119\u5c81\u7684\u65f6\u5019\u6559\u6211\u5982\u4f55\u4f7f\u7528Emacs\uff0c\u4f46\u6211\u57fa\u672c\u4e0a\u4e0d\u7528\u7f16\u5199setq\u8868\u5355\u3002\u6211\u4e5f\u7528\u8fc7Hy\uff0cFennel\uff0c\u2026\u3002\u55ef\uff0c\u6211\u73b0\u5728\u5b8c\u5168\u504f\u79bb\u6b63\u8f68\u4e86\u3002\u91cd\u70b9\u662f\uff0c\u6211\u5df2\u7ecf\u4f7f\u7528\u4e86\u5f88\u591aLISP\uff0c\u6211\u4e0b\u610f\u8bc6\u5730\u627f\u8ba4\u4e86\u5b83\u4eec\u4e4b\u95f4\u7684\u5dee\u5f02\uff0c\u4f46\u4ece\u672a\u5c06\u8fd9\u79cd\u627f\u8ba4\u8f6c\u5316\u4e3a\u8fde\u8d2f\u7684\u601d\u60f3\u3002\n\u4e3a\u4e86\u4fbf\u4e8e\u6bd4\u8f83\uff0c\u6211\u7528\u51e0\u79cdLisp\u65b9\u8a00\u7f16\u5199\u4e86\u76f8\u540c\u7684raytracer\u3002\u6211\u9009\u62e9\u5149\u7ebf\u8ddf\u8e2a\u5668\u7684\u539f\u56e0\u662f\uff1a\n\u8fd9\u4e0d\u662f\u4e00\u4ef6\u5fae\u4e0d\u8db3\u9053\u7684\u4e8b\uff0c\u4f46\u4e0e\u9ad8\u6027\u80fd\u6570\u636e\u5e93\u7684\u51e0\u4e2a\u5b9e\u73b0\u76f8\u6bd4\uff0craytracer\u7684\u51e0\u4e2a\u5b9e\u73b0\u4e5f\u66f4\u5bb9\u6613\u5904\u7406\u3002\n\u53e6\u4e00\u4e2a\u8981\u8003\u8651\u7684\u95ee\u9898\u662f\uff0c\u5149\u7ebf\u8ffd\u8e2a\u7684\u8fdb\u6b65\u5efa\u7acb\u5728\u76f8\u540c\u7684\u57fa\u7840\u7ed3\u6784\u4e0a\uff0c\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u6211\u4e00\u79cd\u6bd4\u8f83\u7cfb\u7edf\u66f4\u6539\u7684\u7b80\u6613\u6027\u7684\u65b9\u6cd5\uff0c\u4f46\u7f16\u5199\u8fd9\u4e9b\u5149\u7ebf\u8ddf\u8e2a\u5668\u5df2\u7ecf\u591f\u6211\u7d2f\u7684\u4e86\uff0c\u4ee5\u81f3\u4e8e\u6211\u4e0d\u60f3\u518d\u73a9\u5b83\u4eec\u4e86\u3002(#**$$=\u201c{laugh}{##**$$}{##**$$}{laugh}{##**$$}{laugh}{##**$$})\u3002\n\u8fd9\u8fdc\u4e0d\u5982\u6211\u5e0c\u671b\u7684\u90a3\u6837\u80fd\u8bf4\u660e\u95ee\u9898\u3002\u4e00\u65e6\u6211\u5b8c\u6210\u4e86\u7b2c\u4e00\u4e2a\u5149\u7ebf\u8ddf\u8e2a\u5668\uff0c\u63a5\u4e0b\u6765\u7684\u4e00\u5207\u90fd\u6709\u76f8\u540c\u7684\u7ed3\u6784\uff0c\u4e0d\u7ba1\u600e\u6837\uff0c\u7f16\u5199\u8fd9\u4e9b\u5149\u7ebf\u8ddf\u8e2a\u5668\u8ba9\u6211\u5bf9\u6211\u611f\u5174\u8da3\u7684\u7279\u6027\u6709\u4e86\u4e00\u4e2a\u6982\u5ff5\uff0c\u7279\u522b\u662f\u6027\u80fd\u3002\u5bf9\u4e8e\u4efb\u4f55\u60f3\u8981\u67e5\u770b\u4ee3\u7801\u7684\u4eba\uff0c\u90fd\u53ef\u4ee5\u5728\u8fd9\u91cc\u83b7\u5f97\u5b9e\u73b0\u3002\n\u55ef\uff0c\u5982\u679c\u6211\u4eec\u8981\u5199\u4e00\u4e2a\u5149\u7ebf\u8ddf\u8e2a\u5668\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u597d\u6709\u4e00\u4e9b\u65b9\u6cd5\u6765\u770b\u770b\u7ed3\u679c\u3002\u95ee\u9898\u5728\u4e8e\u53ef\u79fb\u690d\u6027\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u6211\u5e0c\u671b\u80fd\u591f\u5728\u6bcf\u79cd\u8bed\u8a00\u7684\u4e0d\u540c\u5b9e\u73b0\u4e0a\u8fd0\u884c\u5c42\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4eec\u90fd\u6ca1\u6709\u6807\u51c6\u5316\u7684\u56fe\u5f62\u7ed8\u5236\u652f\u6301\u3002\u6211\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\u4f7f\u7528ANSI\u8f6c\u4e49\u5e8f\u5217\u5c06\u56fe\u50cf\u6e32\u67d3\u5230\u7ec8\u7aef\uff0c\u4f46\u6211\u8ba4\u4e3a\u751f\u6210\u7684\u56fe\u50cf\u4f1a\u975e\u5e38\u7cdf\u7cd5\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u51b3\u5b9a\u8d70tinyrenderer\u91c7\u53d6\u7684\u8def\u7ebf\uff0c\u5373\u8f93\u51fa\u5230\u56fe\u50cf\u6587\u4ef6\u3002\u6700\u521d\uff0c\u6211\u4f7f\u7528\u7684\u56fe\u50cf\u683c\u5f0f\u662f\u4ee4\u4eba\u5c0a\u656c\u7684PNG\u3002\u8fd9\u662f\u4e2a\u9519\u8bef\u3002\u5373\u4f7f\u5b83\u786e\u5b9e\u5728\u65b9\u6848\u4e2d\u5bfc\u81f4\u4e86\u4e00\u4e2a\u76f8\u5f53\u4f18\u96c5\u7684CRC\u8fc7\u7a0b\u3002\n(DEFINE(\u5b57\u8282)(DEFINE(CRC\u5b57\u8282)(BIT-XOR(Vector-REF PNG-CRC(BIT-AND#xFF(BIT-XOR CRC\u5b57\u8282)(\u7b97\u672f\u79fb\u4f4dCRC-8)(Reduce Process-Byte Bytes#xFFFFFFF)\u3002\n\u610f\u8bc6\u5230PNG\u662f\u4e0d\u5fc5\u8981\u7684\u590d\u6742\uff0c\u6211\u63a5\u7740\u7f16\u5199\u4e86\u4e00\u4e2aBMP\u7f16\u7801\u5668\uff0c\u8fd9\u4e2a\u7f16\u7801\u5668\u672c\u6765\u8fd8\u4e0d\u9519\uff0c\u76f4\u5230\u6211\u770b\u5230Chris Wellons\u7684\u4e00\u7bc7\u6587\u7ae0\uff0c\u5173\u4e8e\u7528C\u8bed\u8a00\u901a\u8fc7\u5c06\u5e27\u7f16\u7801\u4e3aNetpbm\u56fe\u50cf\u6765\u5448\u73b0\u89c6\u9891\u3002\u6211\u51b3\u5b9a\u653e\u5f03\u6211\u7684BMP\u7f16\u7801\u5668\uff0c\u8f6c\u800c\u4f7f\u7528PPM\u3002Netpbm\u662f\u57fa\u4e8e\u6587\u672c\u7684\uff1a\u4f8b\u5982\uff0cScheme\u4e2d\u7684PNG\u6216BMP\u7f16\u7801\u5668\u7684\u95ee\u9898\u662f\uff0c\u60a8\u6b63\u5728\u5904\u7406\u7684\u662f\u4e8c\u8fdb\u5236\u683c\u5f0f\u3002\u73b0\u5728\u6d4f\u89c8\u4e00\u4e0b\u6807\u51c6\uff0c\u4f3c\u4e4e\u786e\u5b9e\u6709\u6807\u51c6\u5316\u7684\u8fc7\u7a0b\u6765\u5904\u7406R6RS\u548cR7RS\u4e2d\u7684\u4e8c\u8fdb\u5236\u6570\u636e\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u5904\u7406\u8fd9\u4e9b\u4e8c\u5143\u7ed3\u6784\u5e76\u4e0d\u5f97\u4e0d\u8003\u8651\u5b57\u7b26\u987a\u5e8f\u662f\u5f92\u52b3\u7684\u3002Ppm\u975e\u5e38\u7b80\u5355\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6562\u6253\u8d4c\uff0c\u5982\u679c\u4f60\u80fd\u8bbf\u95ee\u7684\u90fd\u662f\u7ef4\u57fa\u767e\u79d1\u9875\u9762\u4e0a\u7684\u4f8b\u5b50\uff0c\u4f60\u4e00\u5b9a\u80fd\u5199\u51fa\u4e00\u4e2a\u7f16\u7801\u5668\u3002\u6b64\u5904\u4ecb\u7ecd\u8be5\u8ba1\u5212\u7684\u5b9e\u65bd\u60c5\u51b5\uff1a\n(DEFINE(\u5bbd\u5ea6\u9ad8\u5ea6\u50cf\u7d20)&#34\uff1b\u5c06\u4ee5\u50cf\u7d20\u5f62\u5f0f\u7ed9\u51fa\u7684\u5bbd\u5ea6\u4e0e\u9ad8\u5ea6\u56fe\u50cf\u7f16\u7801\u6210\u53ef\u79fb\u690d\u50cf\u7d20\u6620\u5c04\u683c\u5f0f(PPM)\uff0c\u5c06\u7ed3\u679c\u5199\u5165`(\u5f53\u524d\u8f93\u51fa\u7aef\u53e3)&#39\uff1b&#34\uff1b(DEFINE(VALUES)(cond((NULL\uff1f\u503c)(\u6362\u884c\u7b26))((=1(\u957f\u5ea6\u503c))(\u663e\u793a(\u8f66\u503c))(\u5206\u9694\u503c(CDR\u503c))(ELSE(\u663e\u793a(\u8f66\u503c))(DISPLAY&#34\uff1b&#34\uff1b)(\u5206\u9694\u503c(CDR\u503c)\uff1b\uff1bMagic(\u5206\u9694\u503c&#39\uff1b(&#34\uff1bP3&#34\uff1b)\uff1b\u5c3a\u5bf8(\u5206\u9694\u503c(\u5217\u8868\u5bbd\u5ea6\u9ad8\u5ea6))\uff1b\u6df1\u5ea6\u3002(&#34\uff1b255&#34\uff1b))\uff1b\uff1b\u56fe\u50cf\u5185\u5bb9(\u6bcf\u4e2a\u5206\u9694\u503c(\u5411\u91cf\u5217\u8868\u50cf\u7d20))\n\u5982\u679c\u4f60\u53bb\u6389\u6211\u6f02\u4eae\u7684\u683c\u5f0f\uff0c\u90a3\u53ea\u670912\u884c\u4ee3\u7801\uff0c\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u90fd\u662fR5RS\u517c\u5bb9\u7684\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u8bbf\u95eeNetpbm\u5957\u4ef6\uff0c\u6240\u4ee5\u5982\u679c\u6211\u4eec\u9700\u8981PNG\uff0c\u6211\u4eec\u603b\u662f\u53ef\u4ee5\u3002/write-ppm|pnmtopng&gt\uff1btest.png\u3002Netpbm\u662f\u771f\u6b63\u7684\u9690\u85cf\u5b9d\u77f3\u3002\u55ef\uff0c\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\u662f\u9690\u85cf\u7684\u3002\n\u5982\u679c\u4f60\u4e0d\u719f\u6089Scheme\uff0c\u90a3\u4e48\u5b83\u5728\u5438\u5f15\u5b66\u672f\u7c7b\u578b\u65b9\u9762\u6709\u70b9\u81ea\u5c01\u7684\u540d\u58f0\u3002\u5b83\u4e5f\u662f\u6211\u6240\u77e5\u9053\u7684\u6700\u56fa\u6267\u5df1\u89c1\u7684\u8bed\u8a00\u4e4b\u4e00\uff1b\u6240\u6709\u4ee4\u4eba\u611f\u5174\u8da3\u7684\u89c4\u8303\u7684\u5f00\u5934\u90fd\u65ad\u8a00\uff0c\u7f16\u7a0b\u8bed\u8a00\u4e0d\u5e94\u8be5\u901a\u8fc7\u5728\u529f\u80fd\u4e4b\u4e0a\u5806\u79ef\u529f\u80fd\u6765\u8bbe\u8ba1\uff0c\u800c\u5e94\u8be5\u901a\u8fc7\u6d88\u9664\u4f7f\u989d\u5916\u529f\u80fd\u663e\u5f97\u5fc5\u8981\u7684\u5f31\u70b9\u548c\u9650\u5236\u6765\u8bbe\u8ba1\u3002\u8be5\u65b9\u6848\u63a5\u53d7\u7eaf\u51c0\u548c\u7b80\u5355\u7684\u65b9\u5f0f\u6e05\u695a\u5730\u8868\u660e\uff0c\u5b83\u662f\u7531\u6570\u5b66\u4e66\u5446\u5b50\u8bbe\u8ba1\u7684\u3002(\u563f\uff0c\u6211\u4e5f\u662f\u4e2a\u6570\u5b66\u4e66\u5446\u5b50\u3002(\u653e\u677e\u70b9\u3002)\u3002\n\u6b63\u5982\u6211\u521a\u624d\u63d0\u5230\u7684\uff0c\u6709\u89c4\u683c\u3002\u5f53\u7136\uff0c\u6709\u51e0\u4e2a\u3002\u65b9\u6848\u6807\u51c6\u7684\u53d1\u5c55\u662f\u4ee5\u7ebf\u6027\u65b9\u5f0f\u5f00\u59cb\u7684\uff1aRRS\u3001\u2192\u3001RRRS\u3001\u2192\u3001R3RS\u3001\u2192\u3001R4RS\u3001\u2192\u3001R5RS\u3002\u6211\u559c\u6b22\u628a\u8fd9\u770b\u4f5c\u662f\u7ecf\u5178\u7684\u65b9\u6848\u3002\u4f46\u662f\u5230\u4e86\u4fee\u6539R5RS\u7684\u65f6\u5019\uff0c\u968f\u540e\u7684R6RS\u7684\u6279\u51c6\u5f15\u8d77\u4e86\u4e00\u4e9b\u4e89\u8bae\u3002\u5b83\u662f\u81c3\u80bf\u7684\uff0c\u8fd8\u662f\u4ec0\u4e48\u7684\u3002\u5dee\u4e0d\u591a\u662f\u8fd9\u6837\u3002\u56e0\u6b64\uff0c\u5f53\u5230\u4e86\u8bbe\u8ba1R7RS(\u5c0f)\u7684\u65f6\u5019\uff0c\u8ba1\u5212\u8bed\u8a00\u6307\u5bfc\u59d4\u5458\u4f1a\u51b3\u5b9a\u8ba9\u8bed\u8a00\u5206\u53c9\uff0c\u4ece\u65e9\u671f\u7684R5RS\u5f00\u59cb\u4f5c\u4e3a\u4e00\u5f20\u767d\u677f[4]\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8ba8\u538cR6RS\u4e00\u5207\u7684\u4e66\u5446\u5b50\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a\uff0c\u559c\u6b22R6RS\u7684\u4e66\u5446\u5b50\u4e5f\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a\u3002\u8ba1\u5212\u867d\u6709\u5206\u6b67\uff0c\u4f46\u5374\u662f\u548c\u5e73\u7684\u3002\u54e6\uff0c\u73b0\u5728\u6709\u4e00\u6b3e\u6b63\u5728\u8fdb\u884c\u4e2d\u7684R7RS-Large\u3002\u0ca0_\u0ca0\u3002\n\u8fd9\u4e9b\u6807\u51c6\u90fd\u975e\u5e38\u77ed\u3002R5RS\u957f\u8fbe50\u9875\u3002R7RS\u66f4\u5927(n\u224888)[11]\uff0cR6RS\u66f4\u5927(n\u2248163)[11]\uff0c\u4f46\u5b83\u4eec\u4ecd\u7136\u6bd4\u6211\u6240\u77e5\u7684\u4efb\u4f55\u5176\u4ed6\u8bed\u8a00\u89c4\u8303\u6253\u5361\u7684\u9875\u6570\u90fd\u5c11\u3002\u4f60\u4e0d\u80fd\u628a\u4e00\u5927\u5806\u4e1c\u897f\u6253\u5305\u621050\u9875\uff0c\u6240\u4ee5\u6709\u4e00\u4e2a\u4e8b\u5b9e\u4e0a\u7684\u6807\u51c6\u5e93\uff1aScheme Requests for Implementation\uff0c\u7b80\u79f0SRFI\u3002\n\u56e0\u4e3a\u6211\u5bf9R6RS\u6709\u70b9\u504f\u7231\uff0c\u6240\u4ee5\u6211\u4eceR7RS\u5f00\u59cb\u8fd9\u6b21\u65c5\u884c\uff0c\u8ba4\u4e3a\u56de\u5230R6RS\u7684\u95ee\u9898\u4e0a\u4f1a\u8ba9\u6211\u5bf9\u5b83\u771f\u6b63\u5e26\u6765\u7684\u4e1c\u897f\u6709\u4e00\u4e2a\u611f\u89c9\u3002\u76ee\u524d\u5df2\u7ecf\u6709\u4e00\u4e9bR7RS\u7684\u5b9e\u73b0\u3002\u6211\u8bd5\u8fc7\u7684\u662f\u9e21\u8089\uff0c\u5b83\u4e0d\u662f\u6b63\u5f0f\u7684R7RS\u65b9\u6848\uff0c\u4f46\u4f5c\u4e3a\u4e00\u4e2a\u9e21\u86cb(\u5e93)\u652f\u6301R7RS\u6807\u51c6\u3002\u8fd9\u82b1\u4e86\u4e00\u4e9b\u529b\u6c14\uff0c\u4f46\u6211\u786e\u5b9e\u627e\u5230\u4e86\u5728Emacs\u4e3a\u9e21\u8089\u5de5\u4f5c\u7684\u516c\u53f8\u5f0f&Amp\uff1b\u670b\u53cb\u3002\u5c06\u9e21\u86cb\u5b89\u88c5\u5230\u975e\u9ed8\u8ba4\u4f4d\u7f6e\u7684\u6587\u6863\u5df2\u8fc7\u671f\uff0c\u4f46\u662f\u5982\u679c\u60a8\u5c06\u7cfb\u7edf\u5e93\u590d\u5236\u5230\u60a8\u7684CHICY_INSTALL_REPORATION\uff0c\u60a8\u5c06\u4f1a\u5931\u8d25\u3002\u5173\u4e8eGeiser(\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u65b9\u6848\u6a21\u5f0f)\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u5b83\u4f3c\u4e4e\u4e0d\u80fd\u6b63\u786e\u5730\u7a81\u51fa\u663e\u793a\u6216\u7f29\u8fdb\u7528\u6237\u5b9a\u4e49\u7684\u5b8f\u3002\u4e5f\u8bb8\u8fd9\u662f\u6211\u6709\u671d\u4e00\u65e5\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u3002\n\u9009\u62e9\u4e1a\u4f59\u7231\u597d\u8005\u8ba1\u5212\u5b9e\u65bd\u7684\u4e00\u4e2a\u7f3a\u70b9\u662f\u4ed6\u4eec\u662f\u4e45\u7ecf\u6c99\u573a\u7684\u3002\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u6211\u8bbe\u6cd5\u5728\u6700\u65b0\u7248\u672c\u7684FICE\u4e2d\u53d1\u73b0\u4e86\u4e00\u79cd\u56de\u5f52\uff0c\u5728\u8be5\u7248\u672c\u4e2d\uff0c\u6211\u7684\u8fc7\u7a0b\u88ab\u4ee5\u9519\u8bef\u7684\u987a\u5e8f\u4f7f\u7528\u53c2\u6570\u8c03\u7528\u3002\u56e0\u6b64\uff0c\u81f3\u5c11\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4f7f\u7528\u7684\u662f4.13.0\u3002\u7ec5\u58eb\u4eec\u4e5f\u8fd8\u6ca1\u6709\u5403\u5230\u9e21\u80895\u53f7\uff0c\u4f46\u5c31\u7a33\u5b9a\u6027\u800c\u8a00\uff0c\u8fd9\u4e5f\u8bb8\u662f\u4ef6\u597d\u4e8b\u3002\n\u53c2\u6570\u5316\uff0c\u8fd9\u662f\u6211\u5728Guix\u4e2d\u5904\u7406\u7684\u4e1c\u897f\uff0c\u6211\u51e0\u4e4e\u5fd8\u8bb0\u4e86\u3002\u5982\u679c\u4f60\u4e0d\u719f\u6089\u5b83\uff0c\u6211\u80fd\u63cf\u8ff0\u7684\u6700\u597d\u7684\u65b9\u5f0f\u5c31\u662f\u6a21\u62df\u52a8\u6001\u4f5c\u7528\u57df\u3002\n\u4f55\u65f6\u548c\u9664\u975e\uff0c\u8fd9\u4e9b\u5bf9\u4e8e\u60a8\u81ea\u5df1\u5b9e\u73b0\u6765\u8bf4\u90fd\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u662f\u4e0d\u5fc5\u7f16\u5199\u5b83\u4eec\u603b\u662f\u5f88\u597d\u7684\u3002\n\u5f53\u7136\uff0cR7RS\u8fd8\u6709\u66f4\u591a\u5185\u5bb9\uff0c\u4f46\u8fd9\u4e9b\u90fd\u662f\u6211\u6700\u611f\u5174\u8da3\u7684\u3002\u89c4\u8303\u5728\u7b2c77\u9875\u6709\u4e00\u4e2a\u6807\u9898\u4e3a\u201c\u8bed\u8a00\u66f4\u6539\u201d\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u6982\u8ff0\u4e86\u4e0eR5RS\u548cR6RS\u7684\u4e0d\u517c\u5bb9\u6027\uff0c\u4ee5\u53ca\u5bf9R5RS\u7684\u6dfb\u52a0\u3002\n\u5173\u4e8eR7RS\u89c4\u8303\u7684\u8bdd\u9898\uff0c\u6211\u8ba4\u4e3a\u8fd9\u672c\u4e66\u503c\u5f97\u4efb\u4f55\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4ece\u4e8b\u6280\u672f\u5199\u4f5c\u7684\u4eba\u9605\u8bfb\uff0c\u5373\u4f7f\u4f60\u4e0d\u592a\u5173\u5fc3Scheme-\u5c31\u50cfK&amp\uff1bR3\u5373\u4f7f\u4f60\u4e0d\u5173\u5fc3C-\u5b83\u4eec\u90fd\u662f\u7b80\u6d01\u4f46\u4e0d\u727a\u7272\u53ef\u7406\u89e3\u6027\u7684\u5f88\u597d\u7684\u5199\u4f5c\u8303\u4f8b\u3002\u8bbe\u8ba1\u7684\u9009\u62e9\u4e5f\u662f\u7ecf\u8fc7\u6df1\u601d\u719f\u8651\u7684\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u503c\u5f97\u6b23\u8d4f\u7684\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ea\u652f\u6301\u901a\u7528\u53ef\u79fb\u690d\u7684\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c[5]\u3002\u8fd9\u610f\u5473\u7740\u4e0d\u652f\u6301\u521b\u5efa\u6216\u64cd\u4f5c\u76ee\u5f55\u3002\u8fd9\u6837\u7684\u9650\u5236\u542c\u8d77\u6765\u53ef\u80fd\u5f88\u539f\u59cb\uff0c\u4f46\u63d0\u4f9b\u53ef\u79fb\u690d\u6587\u4ef6\u7cfb\u7edf\u62bd\u8c61\u7684\u5e38\u89c1\u66ff\u4ee3\u65b9\u6848\u76f8\u5f53\u4ee4\u4eba\u4e0d\u5feb\u3002\u5982\u679c\u60a8\u9700\u8981\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u64cd\u4f5c\u76ee\u5f55\uff0c\u8bf7\u5bfb\u627ePOSIX\u63a5\u53e3\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\u7cfb\u7edf\u63a5\u53e3\u3002\n\u536b\u751f\u5b8f\u89c2\u7cfb\u7edf\u81eaR5RS\u4ee5\u6765\u4e00\u76f4\u5728Scheme\u4e2d\uff0c\u4f46\u8fd9\u662f\u6211\u7b2c\u4e00\u6b21\u5b9e\u9645\u4f7f\u7528\u5b83\u3002\u6211\u7528def\u5b8f\u7528Common Lisp\u548cEmacs Lisp\u7f16\u5199\u4e86\u5f88\u591a\u5b8f\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u65b0\u9c9c\u7a7a\u6c14\u3002\n(DEFINE-SYNTAX(SYNTAX-RULES())((ve3-bind((Namesvec)...))\u3002\u6b63\u6587)(let-Values((\u540d\u79f0(Values(ve3-x vec)(ve3-y vec)(ve3-z vec)...)\u3002\u6b63\u6587)\u3002\n\u8fd9\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u65f6\u5c31\u8d77\u4f5c\u7528\u4e86\u3002\u4e00\u65e6\u4f60\u9605\u8bfb\u4e86\u5173\u4e8e\u5b83\u7684\u6559\u7a0b\uff0c\u5b83\u5c31\u6bd4\u624b\u5de5\u6784\u5efa\u4e00\u4e2aAST\u66f4\u6709\u610f\u4e49\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u7a0d\u5fae\u4e0d\u90a3\u4e48\u7410\u788e\u7684\u4f8b\u5b50\uff1a\n(\u5b9a\u4e49-\u8bed\u6cd5(\u8bed\u6cd5-\u89c4\u5219()((\u53ef\u80fd-\u7ed1\u5b9a((\u540d\u79f0\u9009\u9879)...))\u3002\u8eab\u4f53)(\u5982\u679c(\u6bcf\u4e2a\u90fd\u662f-\u4e00\u4e9b\uff1f(\u5217\u8868\u9009\u9879...)\u3002(let((name(\u5c55\u5f00\u9009\u9879))...)\u3002\u6b63\u6587)\u3002\n\u6211\u77e5\u9053\uff0c\u6211\u77e5\u9053\u3002\u8fd9\u4e0d\u662f\u5904\u7406\u9009\u9879\u7c7b\u578b\u7684\u6b63\u786e\u65b9\u5f0f\u3002\u6211\u5e94\u8be5\u6e29\u4e60\u4e00\u4e0b\u5728Guix\u4e2d\u7684mlet*\u5b9e\u73b0\u3002\u4f46\u8fd9\u8db3\u4ee5\u6ee1\u8db3\u6211\u9700\u8981\u505a\u7684\u4e8b\u60c5\u3002\n\u60f3\u60f3\u770b\uff0c\u6211\u9009\u62e9\u4e3a\u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u521b\u5efa\u9009\u9879\u7c7b\u578b\u6709\u70b9\u5947\u602a\uff0c\u4e0d\u662f\u5417\uff1f\u94c1\u9508\u663e\u7136\u8ba9\u6211\u6e34\u671b\u80fd\u591f\u6620\u5c04\u51fa\u903b\u8f91\u4e0a\u7b49\u540c\u4e8e\u9009\u9879\u7684\u4e1c\u897f\uff0c\u5728\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u6ca1\u6709\u60f3\u5230SRFI-2\u4e4b\u7c7b\u7684\u4e1c\u897f\u3002\n\u603b\u800c\u8a00\u4e4b\uff1f\u7528\u666e\u901a\u7684R7RS\u7f16\u5199\u5149\u7ebf\u8ddf\u8e2a\u5668\u76f8\u5f53\u5bb9\u6613\u3002\u6211\u6700\u5927\u7684\u62b1\u6028\u5c31\u662f\u8c03\u8bd5\u3002\u9e21\u8089\u57fa\u672c\u4e0a\u6ca1\u6709\u5806\u79ef\u75d5\u8ff9\u3002\u5b83\u6709\u4e00\u4e2a\u8c03\u7528\u5386\u53f2\uff0c\u4f46\u8fd9\u51e0\u4e4e\u6ca1\u6709\u7ed9\u51fa\u4ece\u54ea\u91cc\u8c03\u7528\u67d0\u4e2a\u4e1c\u897f\u7684\u4e0a\u4e0b\u6587\u3002\u4e5f\u6ca1\u6709\u884c\u53f7\u3002\nR7RS\u5b9e\u9645\u4e0a\u4eceR6RS\u4e2d\u6c72\u53d6\u4e86\u76f8\u5f53\u591a\u7684\u4e1c\u897f\uff0c\u800c\u4e14\u4e24\u8005\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u90fd\u5411\u540e\u517c\u5bb9R5RS\u3002\u56e0\u6b64\uff0c\u6211\u5e94\u8be5\u80fd\u591f\u4f7f\u7528\u50cfChez\u8fd9\u6837\u7684R6RS\u5b9e\u73b0\u6765\u8fd0\u884c\u6211\u7684raytracer\u7684R7RS\u7248\u672c\uff0c\u5bf9\u5417\uff1f\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\uff0c\u662f\u7684\u3002\u6211\u53ea\u9700\u8981\u5904\u7406\u4e24\u4ef6\u4e8b\uff1aError\u73b0\u5728\u63a5\u53d7\u4e00\u4e2a&#34\uff1bwho\u53c2\u6570\uff0c\u800cR7RS\u7684\u5b9a\u4e49\u8bb0\u5f55\u7c7b\u578b\u51e0\u4e4e\u4e0eR6RS\u4e2d\u7684\u7b49\u4ef7\u7269\u5b8c\u5168\u4e0d\u540c\u3002\n\u8fd9\u5728\u6700\u8fd1\u7684\u627f\u8bfa\u4e2d\u6ca1\u6709\u4f53\u73b0\u51fa\u6765\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u6211\u8ba4\u4e3a\u9700\u8981\u6539\u53d8\u7684\u9e21\u8089\u4e2d\u4e0d\u6807\u51c6\u7684\u4e1c\u897f\u3002\u5728Chez\u548c\u5176\u4ed6\u6a21\u5f0f\u4e2d\uff0c\u5d4c\u5957\u5b9a\u4e49\u7edd\u5bf9\u9700\u8981\u662f\u8868\u5355\u4e2d\u7684\u7b2c\u4e00\u4ef6\u4e8b\u3002\u8fd9\u4e0e\u6211\u5728\u8fc7\u7a0b\u5f00\u59cb\u65f6\u653e\u5165\u7684\u5c0f\u6587\u6863\u5b57\u7b26\u4e32\u4e0d\u517c\u5bb9\uff0c\u5728\u6211\u6b63\u5728\u4f7f\u7528\u7684\u5b9e\u73b0\u4e2d\uff0c\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u8981\u505a\u4efb\u4f55\u4e8b\u60c5\u3002\u6211\u4e5f\u5728\u4f7f\u7528SRFI-1\u7684EVER\uff0c\u4f46\u6211\u5c06\u5176\u66ff\u6362\u4e3a\u8c03\u7528\u4e0d\u540c\u540d\u79f0\u7684\u6807\u51c6R6RS\u8fc7\u7a0b\u3002\n\u5173\u4e8eR6RS\u8bb0\u5f55\u7684\u4e3b\u9898\uff0c\u5b83\u4eec\u6700\u7ec8\u6ca1\u6709R7RS\u90a3\u4e48\u5197\u957f\u3002\u4ee5\u4e0b\u662f\u8bb0\u5f55\u5b9a\u4e49\u5728R7RS\u4e2d\u7684\u663e\u793a\u65b9\u5f0f\uff1a\n\u60a8\u4e0d\u4f1a\u4ece\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\u731c\u5230\u5b83\uff0c\u4f46\u662fR6RS\u4e2d\u7684\u5b9a\u4e49\u8bb0\u5f55\u7c7b\u578b\u975e\u5e38\u7075\u6d3b\u3002\u4ee5\u4e0a\u662f\u4ee5\u4e0b\u7684\u901f\u8bb0\u3002\n\u6208\u5170\u00b7\u6e29\u970d\u5c14\u7279(G\u00f6ran Weinholt)\u5199\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u6bd4\u8f83\u4e86R7RS\u548cR6RS\u3002\u4ed6\u5728\u4e66\u4e2d\u63d0\u5230\uff0cR7RS\u5b9a\u4e49\u8bb0\u5f55\u578b\u5197\u957f\u7684\u539f\u56e0\u662f\u5b8f\u7cfb\u7edf\u65e0\u6cd5\u521b\u5efa\u65b0\u7684\u6807\u8bc6\u7b26\u3002\u5728\u6211\u7684\u4e66\u4e2d\u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u53e5\u6cd5\u7684\u95ee\u9898\uff0c\u4ed6\u7684\u6587\u7ae0\u4e5f\u4e0d\u7ecf\u610f\u5730\u63d0\u5230R6RS\u8bb0\u5f55\u7cfb\u7edf\u5df2\u7ecf\u88ab\u516c\u5f00\u5316\u4e86\uff0c\u4f46\u662f\u6211\u5728\u6b63\u5f0f\u7684\u8bc4\u8bba\u6216\u5176\u4ed6\u5730\u65b9\u627e\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\u3002\u6211\u89c9\u5f97\u8fd9\u592a\u68d2\u4e86\u3002\n\u4e0eR7RS\u975e\u5e38\u76f8\u4f3c\uff0cR6RS\u89c4\u8303\u4e2d\u6709\u4e00\u8282\u4e13\u95e8\u4ecb\u7ecd\u8bed\u8a00\u66f4\u6539\u3002&#34\uff1b\u8fd9\u662f\u9644\u5f55E\uff0c\u7ed9\u90a3\u4e9b\u5728\u5bb6\u5b66\u4e60\u7684\u4eba\u770b\uff0c\u8fd9\u4e00\u8282\u4e0eR7RS\u4e2d\u7684\u540c\u7b49\u7ae0\u8282\u60ca\u4eba\u5730\u76f8\u4f3c\u3002\u4ed6\u4eec\u7684\u76ee\u6807\u4f3c\u4e4e\u662f\u4ee5\u7565\u5fae\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u540c\u6837\u7684\u95ee\u9898-\u5141\u8bb8\u7528Scheme\u7f16\u5199\u5927\u578b\u7684\u3001\u4e0d\u662f\u65e0\u5173\u7d27\u8981\u7684\u7a0b\u5e8f\u3002\n\u4e0eR7RS\u4e0d\u540c\uff0cR6RS\u6709\u4e00\u4e2a\u6807\u51c6\u7684Reduce\u8fc7\u7a0b\u3002\u55ef\uff0c\u7528\u7684\u662f\u4e0d\u540c\u7684\u540d\u5b57\u3002\u5b83\u6709\u5411\u5de6\u6298\u53e0\u548c\u5411\u53f3\u6298\u53e0\uff0c\u8fd9\u662fReduce\u7684\u66f4\u4e00\u822c\u7248\u672c\u3002\u5c31\u50cf\u4ec0\u4e48\u65f6\u5019\u548c\u4ec0\u4e48\u65f6\u5019\uff0c\u9664\u975e\uff0cReduce\u5bf9\u4e8e\u4f60\u81ea\u5df1\u6765\u8bf4\u662f\u5fae\u4e0d\u8db3\u9053\u7684\uff0c\u4f46\u662f\u628a\u5b83\u653e\u5728\u6307\u5c16\u662f\u5f88\u597d\u7684\u3002\n(DEFINE(\u8fc7\u7a0b\u5217\u8868\u521d\u59cb\u5316))(DEFINE(\u5217\u8868\u7ed3\u679c)(IF(NULL\uff1fList)result(Reduce-ITER(Cdr List)(proc result(Car List)(Reduce-ITER list init)\u3002\n\u554a\uff0c\u662f\u7684\u3002\u8fd9\u662f\u4e00\u4e9b\u975e\u5e38\u5178\u578b\u7684Scheme\u4ee3\u7801\u3002\u6211\u8fd8\u6ca1\u6709\u63d0\u5230\u5b83\uff0c\u4f46\u662fScheme\u7684\u5b9e\u73b0\u5fc5\u987b\u662f\u5c3e\u9012\u5f52\u7684[6]\u3002\u4e0a\u8ff0\u8fc7\u7a0b\u5e94\u8be5\u5728AMD64\u4e0a\u7f16\u8bd1\u6210\u4e00\u4e2a\u826f\u597d\u7684ol&jnz\u5faa\u73af\u3002\u5373Reduce-ITER\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6267\u884c\u5bf9\u5176\u81ea\u8eab\u7684\u51fd\u6570\u8c03\u7528\u3002\n(RNRS\u5217\u8868(6))\u5305\u542b\u6211\u5173\u5fc3\u7684\u5927\u591a\u6570SRFI-1\u7a0b\u5e8f\u3002\u8fd9\u91cc\u6709for-all\u800c\u4e0d\u662fEach\uff0c\u6211\u6700\u521d\u8ba4\u4e3a\u8fd9\u5bf9\u6211\u7684\u54c1\u5473\u6765\u8bf4\u592a\u63a5\u8fd1for-each\u4e86\uff0c\u76f4\u5230\u6211\u610f\u8bc6\u5230\u4e0eeXist\u7684\u5bf9\u79f0\u6027(\u8fd9\u4e24\u4e2a\u51fd\u6570\u5728\u547d\u9898\u903b\u8f91\u4e2d\u4ee3\u8868\u2200\u548c\u2203)\u3002R6RS\u62e5\u6709R7RS\u7684\u6240\u6709\u5f88\u9177\u7684\u4e1c\u897f\uff0c\u6bd4\u5982\u4f55\u65f6\u3001\u9664\u975e\u3001case-lambda\u548c\u5b57\u7b26\u4e32\u7aef\u53e3\u3002\n\u636e\u6211\u6240\u77e5\uff0cR7RS\u548cR6RS\u5e93\u7cfb\u7edf\u4e4b\u95f4\u7684\u5dee\u522b\u5f88\u5c0f\u3002R6RS\u8981\u6c42\u6309\u8be5\u987a\u5e8f\u5728\u5e93\u7684\u5f00\u5934\u653e\u7f6e\u5bfc\u51fa\u548c\u5bfc\u5165\u8868\u5355\uff0c\u4f46\u5bfc\u5165\u548c\u5bfc\u51fa\u89c4\u8303\u5b9e\u8d28\u4e0a\u662f\u76f8\u540c\u7684(\u9664\u4e86RENAME\u3001\u2026\u4e4b\u5916)\u3002\u3002\nJakob@epsilon~$time bash-c&c#39\uff1b./r6rs-raytracer&gt\uff1btest.ppm&#39\uff1breal 0m13.665suser 0m11.645ssys 0m1.875sjakob@epsilon~$time bash-c&c#39\uff1b./r7rs-raytracer&gt\uff1btest2.ppm&#39\uff1breal 1m12.259s\u7528\u62371m11.515ssys\u3002\n\u5176\u4e2d&#39\uff1br6rs-raytracer&#39\uff1b\u662f\u7531chez-exe\u5728opt-level 3\u4e0a\u5236\u4f5c\u7684\u3002CHICKEN\u7684\u4e3b\u8981\u76ee\u7684\u662f\uff1aChez\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5927\u6846\u67b6\u7684\u3002\nJakob@epsilon~$strip r6rs-raytracerjakob@epsilon~$du-sh r6rs-raytracer1.7M r6rs-raytracerjakob@epsilon~$strip r7rs-raytracerjakob@epsilon~$du-sh r7rs-raytracer236K r7rs-raytracer\u3002\n\u51e0\u4e4e\u6240\u6709\u7684\u8fd9\u4e9b\u90fd\u6765\u81ea\u4e8e\u9010\u5b57\u9010\u53e5\u7684\u8bf7\u613f\u4e66\u3002\u5982\u679c\u6211\u4ed4\u7ec6\u8003\u8651\uff0c\u6211\u53ef\u80fd\u4f1a\u7528\u6211\u7684\u4ee3\u7801\u548c\u5f15\u5bfc\u6587\u4ef6\u6e90\u4ee3\u7801\u7f16\u5199\u4e00\u4e2a\u5de5\u5177\u6765\u8fdb\u884c\u5168\u7a0b\u5e8f\u6b7b\u4ee3\u7801\u5206\u6790\uff0c\u4f46\u662f1.7\u5146\u5b57\u8282\u5e76\u4e0d\u4f1a\u8ba9\u6211\u5455\u5410\u3002\u5b83\u653e\u5728\u8f6f\u76d8\u4e0a\u662f\u653e\u4e0d\u4e0b\u7684\uff0c\u4f46\u6211\u89c1\u8fc7\u5927\u5c0f\u7ea6\u4e3a\u5343\u5146\u5b57\u8282\u7684\u6208\u6bd4\u5c3c\uff0c\u6240\u4ee5\u60c5\u51b5\u53ef\u80fd\u4f1a\u66f4\u7cdf\u3002\n\u9e21\u8089\u5e76\u4e0d\u662f\u6700\u5feb\u7684R7RS\u5b9e\u73b0\uff0c\u800c\u4e14\u6211\u65e0\u8bba\u5982\u4f55\u90fd\u5728\u4f7f\u7528\u5b83\u7684\u4e00\u4e2a\u65e7\u7248\u672c\uff0c\u6240\u4ee5\u5bf9\u8fd9\u4e2a\u624b\u6447\u7684\u57fa\u51c6\u6d4b\u8bd5\u6709\u6240\u4fdd\u7559\u3002\u5982\u679c\u60a8\u8ba4\u4e3a\u76d7\u7a83\u7f6a\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\u662f\u4e00\u4e2a\u516c\u5e73\u7684\u6bd4\u8f83\uff0c\u90a3\u4e48\u672c\u9875\u5c06\u5efa\u8baeR7RS\u7684\u6c99\u9f20\u5b9e\u73b0\u901a\u5e38\u6bd4Chez\u5b9e\u73b0R6RS\u66f4\u5feb\u3002\u8be5\u9875\u9762\u7ed9\u6211\u7684\u4e3b\u8981\u542f\u793a\u662f\uff0c\u8fd9\u4e24\u4e2a\u6807\u51c6\u90fd\u6709\u5feb\u901f\u5b9e\u73b0\u3002\n\u4e0d\u5e78\u7684\u662f\uff0cChez\u4e0a\u7684\u5806\u6808\u8ddf\u8e2a\u60c5\u51b5\u751a\u81f3\u6bd4\u9e21\u8089\u66f4\u7cdf\u7cd5\u3002Guile\u66f4\u597d\uff0c\u4f46\u4e0a\u6b21\u6211\u5728Guix\u4e0a\u4f7f\u7528\u5b83\u65f6\uff0c\u53d8\u91cf\u7684\u4f18\u5316\u8ba9\u6211\u975e\u5e38\u5934\u75bc\u3002\u6211\u6e34\u671b\u6709\u4e00\u4e2a\u7b80\u5355\u6613\u61c2\u7684\u89e3\u91ca\u5668\u7248\u672c\u3002\u5230\u4e00\u4e2a\u6708\u524d\uff0c\u5b89\u8fea\u00b7\u6e29\u6208\u5df2\u7ecf\u60f3\u51fa\u4e86\u4e00\u4e9b\u8db3\u591f\u63a5\u8fd1\u7684\u4e1c\u897f\uff0c\u4f46\u6211\u8fd8\u6ca1\u6709\u673a\u4f1a\u8bd5\u4e00\u8bd5\u3002\n\u65b9\u6848\u4f7f\u7528\u8d77\u6765\u5f88\u6709\u8da3\u3002R7RS\u548cR6RS\u90fd\u662f\u975e\u5e38\u57fa\u7840\u7684\uff0c\u6240\u4ee5\u6211\u89c9\u5f97\u6211\u9700\u8981\u82b1\u65f6\u95f4\u6765\u719f\u6089\u5df2\u53d1\u8868\u7684SRFI\uff1b\u7684\u5b50\u96c6\uff0c\u6216\u8005\u5176\u4ed6\u5b9e\u7528\u7a0b\u5e8f\u5e93\uff0c\u6bd4\u5982Gule\u7684ICE-9\uff0c\u624d\u80fd\u63d0\u9ad8\u5de5\u4f5c\u6548\u7387\u3002\u5728R7RS\u548cR6RS\u4e2d\uff0cR7RS\u548cR6RS\u90fd\u662f\u975e\u5e38\u57fa\u7840\u7684\uff0c\u6240\u4ee5\u6211\u89c9\u5f97\u6211\u9700\u8981\u82b1\u65f6\u95f4\u719f\u6089\u5df2\u53d1\u8868\u7684SRFI\uff1b\u7684\u5b50\u96c6\uff0c\u6216\u8005\u5176\u4ed6\u5b9e\u7528\u7a0b\u5e8f\u5e93\uff0c\u6bd4\u5982Gule\u7684ICE-9\u3002\u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\u6765\u770b\uff0cR6RS\u4f3c\u4e4e\u662f\u4e24\u4e2a\u4e2d\u66f4\u597d\u7684\u4e00\u4e2a\uff0c\u4f46\u5b83\u4eec\u8db3\u591f\u76f8\u4f3c\uff0c\u6211\u53ef\u4ee5\u5408\u7406\u5730\u8ba4\u4e3a\u81ea\u5df1\u5728\u8fd9\u4e24\u4e2a\u65b9\u9762\u90fd\u5f88\u5f00\u5fc3\u3002\u5982\u679c\u6211\u8981\u4f7f\u7528\u4e00\u4e2a\u65b9\u6848\uff0c\u771f\u6b63\u7684\u95ee\u9898\u5c06\u662f\u6211\u5c06\u4f7f\u7528\u54ea\u79cd\u5b9e\u73b0\uff1f\u8fd9\u5c06\u53cd\u8fc7\u6765\u56de\u7b54\u6211\u7684\u4ee3\u7801\u5c06\u7b26\u5408\u54ea\u79cd\u6807\u51c6\u7684\u95ee\u9898\u3002\n\u636e\u6211\u6240\u77e5\uff0c\u5bf9\u4e8e\u666e\u901a\u7684\u674e\u65af\u83f2\u514b\u4eba\u5e76\u6ca1\u6709\u50cf\u5bf9\u9634\u8c0b\u5bb6\u90a3\u6837\u7684\u8fc7\u4e8e\u7b80\u5355\u5316\u7684\u523b\u677f\u5370\u8c61\u3002\u4f46\u6211\u60f3\u5927\u591a\u6570\u4eba\u90fd\u4f1a\u540c\u610f\uff0cCommon Lisp\u662f\u4e00\u79cd\u652f\u6301\u5b9e\u7528\u4e3b\u4e49\u800c\u4e0d\u662f\u7eaf\u7cb9\u6027\u7684Lisp\u65b9\u6cd5-\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b9e\u7528\u7684\u8f6f\u4ef6\u4e0d\u80fd\u7528Schem.Like Scheme\uff0c\n.", "note_en": "This is a post I&#39;ve been meaning to write for a while now: one anecdotallycomparing programming languages in the Lisp family. I consider myself to be aLisp hacker. Perhaps that much was obvious from the letter \u03bb adorning mywebsite&#39;s header, a reference to the \u03bb-calculus which inspired John McCarthy todesign the first LISP [1]. Yet, &#34;Lisp hacker&#34; likely means little unless you,too, consider yourself to be a Lisp hacker. Calling yourself one seems carrysome level of unstated meaning. Indeed, some identify with more specific groups.&#34;Schemer,&#34; or &#34;Guiler,&#34; or &#34;Racketeer,&#34; or &#34;Clojurist.&#34; But &#34;Lisp Hackers&#34; \u2287&#34;Schemers&#34;. There is commonality shared among all, or at least most, of theseprogramming languages, and the Lisp hackers recognize and appreciate thatcommonality \u2013 the characteristics that make a programming language a Lisp.Homoiconic syntax, powerful metaprogramming facilities, and editor support that,in my opinion, is unparalleled. (Yes, I am alluding to GNU Emacs.) This article,however, is concerned with the differences. In it, I will be considering thespecifics of each dialect, and whether or not those specifics make for alanguage I would want to use to develop a new piece of software.\n I&#39;m specifically concerned with game development at the time of writing thisarticle. An idea for a turn-based tactics game came to me and I felt a Lispwould be the best tool for realizing it, but the decision to use &#34;a Lisp&#34; stillleaves me with several choices. When I enumerate the notable design choicesbehind each dialect, and talk about the approaches I prefer, my opinions willbe, in some capacity, framed as partial answers to the question of &#34;will I beable to comfortably use this to write a video game?&#34; As such, there are a fewthings I am specifically interested in:\n Ergonomics, or &#34;a measure of the friction [one experiences] when trying to getthings done&#34; [2].\n  Performance, which is nontrivial to properly quantify [3]. I won&#39;t be rigorouswith this; a one-off run with  time can give a good idea of the order ofmagnitude for execution time.\n Ease of distribution, which is difficult to define, but with which I associateplatform agnosticism, a runtime that won&#39;t bloat my tarballs by severalgigabytes, and a lack of baroque and difficult to obtain dependencies.\n Ability to interface with other libraries, as I&#39;ll want to be able todraw to the screen, and play sounds, and so on.\n For each dialect, I&#39;m allowing myself to use nonstandard functions. I&#39;m aimingfor an evaluation of the practical aspects of each language, and if you werewriting software, you&#39;d likely be using more than what&#39;s included in the R5RS orANSI CL standards. Though, if these nonstandard functions are specific to asingle implementation, I will avoid them. SRFI&#39;s and QuickLisp are fair game,but CHICKEN&#39;s Eggs are not. Ah, I&#39;m already getting ahead of myself. Yes, I willbe comparing Scheme and Common Lisp. I almost have to \u2013 the history of Lisptends to be spun as a schism between Common Lisp and Scheme. I will be speakingof a few others as well. I&#39;ve mostly chosen dialects for which there exists some&#34;game engine&#34; type library. For R7RS (CHICKEN), there is  Hypergiant, for R6RS(Guile) there is  Chickadee, for Common Lisp there is  Xelf, and for Fennel thereis, of course,  L\u00d6VE.\n  What follows are my opinions, so I&#39;d like to lead with the background thatmotivated them. My earliest &#34;serious&#34; experience with Lisp was with PeterSeibel&#39;s  Practical Common Lisp, which I picked up in high school following afailed attempt at reading  Structure and Interpretation of ComputerPrograms.  1 The portion of the latter book that I did manage was enough toconvince me that learning  a Lisp would be valuable, but that learning CommonLisp may be more tractable than learning Scheme. The summer following my firstyear of university, I taught myself Scheme to do  GSoC for  GNU Guix. Guilequickly grew on me, and I soon began  using Haunt for my personal website. I&#39;vebeen unknowingly using Emacs Lisp since much earlier \u2013 not in the sense ofwriting packages \u2013 my old man taught me how to use Emacs when I was nine, but Iwas  mostly shielded from having to write  setq forms. I&#39;ve also used  Hy,  Fennel,\u2026 well, I&#39;m wildly off track now. Point being, I&#39;ve used many Lisps, and I&#39;vesubconsciously acknowledged the differences between them, but never turned thatacknowledgment into coherent thought.\n To aid in the comparison, I&#39;ve written the same raytracer in several dialects ofLisp. My reasons for choosing a raytracer are that:\n It&#39;s nontrivial, but several implementations of a raytracer is also moretractable than, say, several implementations of a high-performance database.\n Another consideration was the number of advancements in raytracing that buildupon the same basic structure, potentially giving me a way to compare the easewith which a change to a system can be made, but writing these raytracers tookenough out of me that I didn&#39;t want to play with them any more.\n This was not nearly as telling of a comparison as I had hoped. Once I&#39;dcompleted the first raytracer, everything that followed had the same structure.Regardless, writing these raytracers gave me an idea of the characteristics Iwas interested in, especially performance. For anyone who would like to look atthe code, the implementations are available  here.\n   Well, if we&#39;re writing a raytracer, then, we had better have some way of seeingthe results. The issue is portability. Ideally, I&#39;d like to be able to run theraytacers on different implementations of each language, but none of them havestandardized support for drawing graphics. An idea I had was to render the imageto the terminal using ANSI escape sequences, but I thought the resulting imageswould be quite shitty. Instead, I decided to go the  route that tinyrenderertakes, which is to output to an image file. Initially, the image format I wentwith was the venerable PNG. This was a mistake. Even if it did lead to a ratherelegant CRC procedure in Scheme.\n ( define (  bytes) ( define (  crc byte) (bitwise-xor (vector-ref png-crc (bitwise-and #xff (bitwise-xor crc byte))) (arithmetic-shift crc -8))) (reduce process-byte bytes #xffffffff))\n Realizing PNG was needlessly complex, I went on to write a  BMP encoder, whichwas fine until I came across  an article from Chris Wellons about rendering videowith C by encoding frames as  Netpbm images. I decided to scrap my BMP encoderand go with PPM instead. Netpbm is text-based: the issue with a PNG or BMPencoder in Scheme, for example, is that you&#39;re dealing with a binary format.Glancing over the standards now, it seems there are, indeed, standardizedprocedures for dealing with binary data in both R6RS and R7RS. Regardless,dealing with those binary structures and having to consider endianness is apain. PPM is  dead simple. In fact, I&#39;d wager that if all you had access to werethe examples on the  Wikipedia page, you&#39;d be able to write an encoder. Here&#39;sthe Scheme implementation:\n ( define (  width height pixels)  &#34;Encode the WIDTH by HEIGHT image given as PIXELS into the portable pixmap format (PPM), writing the result to `(current-output-port)&#39;.&#34; ( define (  values) ( cond ((null? values) (newline)) ((= 1 (length values)) (display (car values)) (delimit-values (cdr values))) ( else (display (car values)) (display  &#34; &#34;) (delimit-values (cdr values)))))  ;;  Magic (delimit-values &#39;( &#34;P3&#34;))  ;;  Dimensions (delimit-values (list width height))  ;;  Depth (delimit-values &#39;( &#34;255&#34;))  ;;  Image contents ( for-each delimit-values (vector-&gt;list pixels)))\n If you do away with my nice formatting, that&#39;s twelve lines of code, all ofwhich are R5RS-compatible. We have access to the Netpbm suite, too, so if wewant a PNG, we can always  ./write-ppm | pnmtopng &gt; test.png. Netpbm is areal hidden gem. Well, hidden to me, at least.\n If you aren&#39;t familiar with Scheme, it has somewhat of a self-imposed  2reputation for appealing to academic types. It&#39;s also one of the mostopinionated languages I know of; all the specs of interest lead with anassertion that &#34;programming languages should be designed not by piling featureon top of feature, but by removing the weaknesses and restrictions that makeadditional features appear necessary.&#34; The way that Scheme embraces purity andsimplicity makes it clear it was designed by math nerds. (Hey, I&#39;m a math nerd,too. Take it easy.)\n As I&#39;ve just mentioned, there are specs. A few, to be sure. The evolution ofScheme standards begins in a linear fashion: RRS \u2192 RRRS \u2192 R3RS \u2192 R4RS \u2192 R5RS. Ilike to think of this as &#34;classic Scheme&#34;. But when it came time to revise R5RS,the ratification of the subsequent R6RS caused some controversy. It was&#34;bloated&#34;, or whatever. Something like that. So when it came time to design R7RS(small), the Scheme Language Steering Committee decided to let the languagefork, beginning with the earlier R5RS as a blank slate [4]. That way, the nerdsthat hated everything about R6RS could have their way, and the nerds that likedR6RS could have their way. Scheme was divided, but at peace. Oh, and nowadaysthere&#39;s a work-in-progress  R7RS-large. \u0ca0_\u0ca0\n  The standards are all extremely short. R5RS is 50 pages. R7RS is larger (n \u2248 88)[11], and R6RS is quite a bit larger (n \u2248 163) [11], but they still clock in atfewer pages than any other language spec I know of. You can&#39;t pack a whole lotinto 50 pages, so there is a de-facto standard library:  Scheme Requests forImplementation, or SRFI.\n Because I&#39;m slightly biased towards R6RS, I began this journey with R7RS,thinking that returning to the problem with R6RS instead would give me a senseof how much it really brings to the table. There are  a few implementations ofR7RS out in the wild. The one I tried was  CHICKEN, which is not officially anR7RS Scheme, but supports the R7RS standard as an Egg (library). It took someeffort, but I did get  company-mode &amp; friends working in Emacs for CHICKEN. The documentation for installing Eggs to a non-default location is out-of-date, butif you copy the system libraries to your  CHICKEN_INSTALL_REPOSITORY, you&#39;ll befine. A minor complaint regarding Geiser (or more accurately,  scheme-mode): itdoesn&#39;t seem to be able to properly highlight or indent user-defined macros.Perhaps that&#39;s something I could fix someday.\n A disadvantage to picking a hobbyist Scheme implementation is that they aren&#39;tbattle-hardened. In writing this post, I managed to discover  a regression in thelatest version of CHICKEN, where my procedure was being called with parametersin the wrong order. So, at least for this article, I am using 4.13.0. Gentooalso doesn&#39;t have Chicken 5 yet, but in terms of stability, perhaps that&#39;s agood thing.\n  parameterize, which is something I dealt with in Guix that I&#39;d nearlyforgotten about. If you aren&#39;t familiar with it, the best way I can describeit is a way of emulating dynamic scope.\n when and  unless, which are trivial to implement yourself, but it&#39;s always nicenot having to write them.\n There&#39;s more to R7RS, of course, but these are the things that stand out to me.The spec has a section starting on page 77 titled &#34;Language Changes&#34; whichoutlines the incompatibilities with R5RS and R6RS, as well as the additions toR5RS.\n On the topic of the R7RS spec, I think it&#39;s worth reading for anyone whoproduces technical writing in some capacity, even if you don&#39;t care much forScheme \u2013 much like how K&amp;R  3 is worth reading even if you don&#39;t care aboutC \u2013 they&#39;re both great examples of writing that&#39;s concise, but doesn&#39;tsacrifice comprehensibility. The design choices are also quite well thought-out,and I think that&#39;s worth appreciating. For example, they support only the filesystem operations which are universally portable [5]. This means no support forcreating or manipulating directories. Such a restriction may sound primitive,but the common alternative in providing a portable filesystem abstraction is rather unpleasant. If you need to be manipulating directories in such a way,seek a POSIX interface rather than a filesystem interface.\n The hygenic macro system has been in Scheme since R5RS, but this was the firsttime I&#39;d actually used it. I&#39;ve written plenty of macros in Common Lisp andEmacs Lisp with  defmacro, but this was a breath of fresh air.\n ( define-syntax   ( syntax-rules () ((vec3-bind ((names vec) ...) body) ( let-values ((names (values (vec3-x vec) (vec3-y vec) (vec3-z vec))) ...) body))))\n This worked on the first try. Once you read a  tutorial on it, it&#39;s moreintuitive than building an AST &#34;by-hand&#34;. Here&#39;s a slightly less trivialexample:\n ( define-syntax   ( syntax-rules () ((maybe-bind ((name option) ...) body) ( if (every is-some? (list option ...)) ( let ((name (unwrap option)) ...) body)))))\n I know, I know. This isn&#39;t the proper way to deal with an option type. I shouldhave brushed up on the  mlet* implementation in Guix. But this sufficed for whatI needed to do.\n Come to think of it, my choice to create an option type for a dynamically-typedlanguage is a bit strange, no? Rust has apparently left me yearning for theability to  map over things which are logically equivalent to options, and  SRFI-2and the likes didn&#39;t cross my mind at the time I wrote this.\n All in all? Writing a raytracer in vanilla R7RS was reasonably easy. My biggestgripe was debugging. CHICKEN has essentially no stack traces. It has a &#34;callhistory&#34;, but that gives very little context for where something&#39;s being called from. No line numbers, either.\n R7RS actually draws quite a bit from R6RS, and both are, for the most part,backwards-compatible with R5RS. So I  should be able to run the R7RS version ofmy raytracer with an R6RS implementation like Chez, right? For the most part,yeah. I needed to deal with exactly two things:  error now takes a &#34;who&#34;parameter, and the R7RS  define-record-type is almost nothing like the equivalentin R6RS.\n This isn&#39;t represented in the more recent commits, but there were also a fewnonstandard things in CHICKEN I was depending on that needed to be changed. InChez, and other Schemes, nested  defines need to be the absolute first thing inthe form. This was incompatible with the little documentation strings I&#39;d put atthe beginning of my procedures, which, in the implementations that I&#39;m using, don&#39;t do anything anyway. I was also using SRFI-1&#39;s  every, but I replaced thatwith a call to a standard R6RS procedure of a different name.\n On the topic of R6RS records, they end up being quite a bit less verbose thanR7RS. This is how a record definition appears in R7RS:\n    You wouldn&#39;t guess it from the above example, but the  define-record-type in R6RSis very flexible. The above is shorthand for\n  G\u00f6ran Weinholt wrote  an article comparing R7RS and R6RS. In it, he mentions thatthe reason for R7RS&#39;s  define-record-type verbosity is that the macro system isincapable of creating new identifiers. Another point for  syntax-case in my book.His article also mentions offhandedly that the R6RS record system has beencriticized, but I can&#39;t find any in the  formal comments or elsewhere. I think itkicks ass.\n Much like R7RS, there is a section in the R6RS spec dedicated to &#34;languagechanges.&#34; This is Appendix E, for those of you following along at home, which issurprisingly similar to the equivalent section in R7RS. They seemed to aim toscratch the same itch \u2013 allowing large, non-trivial programs to be written inScheme \u2013 in slightly different ways.\n Unlike R7RS, R6RS has a standard  reduce procedure.  4 Well, by a differentname. It has  fold-left and  fold-right, the more general versions of  reduce. Like when and  unless,  reduce is trivial to implement yourself, but it&#39;s nice to haveit at the fingertips.\n ( define (  proc list init) ( define (  list result) ( if (null? list) result (reduce-iter (cdr list) (proc result (car list))))) (reduce-iter list init))\n Ah, yes. This is some very  typical Scheme code. I haven&#39;t mentioned it yet, butScheme implementations are required to be  tail-recursive [6]. The aboveprocedure should compile to a good ol&#39;  jnz loop on AMD64. I.e.  reduce-iter doesnot actually perform a function call to itself.\n (rnrs lists (6)) has most of the SRFI-1 procedures I care about. There&#39;s  for-allinstead of  every, which I initially thought was too close to  for-each for mytastes, until I realized the symmetry with  exists (the two functions represent \u2200and \u2203 in  propositional logic). R6RS has all the cool stuff from R7RS, like  when, unless,  case-lambda, and  string ports.\n The differences between the R7RS and R6RS library systems are, to myunderstanding, small. R6RS requires  export and  import forms at the beginning ofthe library, in that order, but the import and export specs are essentially thesame ( except,  rename, \u2026).\n  jakob@Epsilon ~ $ time bash -c &#39;./r6rs-raytracer &gt; test.ppm&#39;real 0m13.665suser 0m11.645ssys 0m1.875sjakob@Epsilon ~ $ time bash -c &#39;./r7rs-raytracer &gt; test2.ppm&#39;real 1m12.259suser 1m11.515ssys 0m0.598s\n where &#39;r6rs-raytracer&#39; was produced by  chez-exe at opt-level 3. The main thingCHICKEN has going for it is that the Chez executable is &#34;big-boned&#34;.\n jakob@Epsilon ~ $ strip r6rs-raytracerjakob@Epsilon ~ $ du -sh r6rs-raytracer1.7M r6rs-raytracerjakob@Epsilon ~ $ strip r7rs-raytracerjakob@Epsilon ~ $ du -sh r7rs-raytracer236K r7rs-raytracer\n Nearly all of that is coming from including &#39;petite.boot&#39; verbatim. If I caredenough to shave that down, I could probably write a tool to do whole-programdead-code analysis with my code and the boot file sources, but 1.7 megabytesdoesn&#39;t make me vomit. It wouldn&#39;t fit on a floppy disk, but I&#39;ve seen Gobinaries that are on the order of gigabytes in size, so it could be worse.\n CHICKEN isn&#39;t the fastest R7RS implementation out there, and I was using anolder version of it anyway, so take this hand-wavy benchmark with a grain ofsalt. If you consider the Larceny benchmark suite to be a fair comparison, then this page would suggest that the Gerbil  implementation of R7RS is, in general,faster than the Chez implementation R6RS. The main take-away of that page to meis that there are fast implementations of both standards.\n The stack trace situation on Chez is even worse than it is with CHICKEN,unfortunately. Guile is better, but the last time I used it for Guix, variablesbeing optimized out gave me a massive headache. I yearned for a simpleAST-walking interpreter version. As of a month ago, Andy Wingo has conjured upsomething  close enough, but I haven&#39;t had the opportunity to try it out yet.\n Scheme is enjoyable to use. R7RS and R6RS are both quite bare-bones, so I feel Iwould need to spend time familiarizing myself with either a subset of thepublished SRFI&#39;s, or another &#34;utility library&#34; such as Gule&#39;s ice-9 to beproductive. R6RS seems to be the nicer of the two from a programmer&#39;sperspective, but they&#39;re similar enough that I can see myself being reasonablyhappy in either. If I&#39;m going to use a Scheme, the real question is going to be&#34;which implementation will I use?&#34;, which will in turn answer the question ofwhich standard my code will conform to.\n To my understanding, there isn&#39;t an oversimplified stereotype for Common Lisphackers in the same way that there is for Schemers. But I think most would agreeCommon Lisp is an approach to Lisp that favors pragmatism as opposed to purity\u2013 which isn&#39;t to imply that practical software cannot be written in Scheme.Like Scheme, \n......", "posttime": "2020-07-21 12:50:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,\u7f16\u7a0b\u8bed\u8a00,undying", "title": "\u6c38\u5782\u4e0d\u673d\u7684\u7f16\u7a0b\u8bed\u8a00(Lisp)\u7684\u591a\u9762\u6027", "title_en": "The Many Faces of an Undying Programming Language (Lisp)", "transed": 1, "url": "http://jakob.space/blog/thoughts-on-lisps.html", "via": "", "real_tags": ["\u7f16\u7a0b", "\u7f16\u7a0b\u8bed\u8a00", "undying"]}, {"category": "", "categoryclass": "", "imagename": "27d61b16962b2207dabda50d6e2c01c6.jpg", "infoid": 1013207, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u5230\u641c\u7d22\u9b54\u672f\u7f50\u662f\u7f8e\u56fd\u53ef\u53e3\u53ef\u4e50\u516c\u53f8\u5728\u51761\u4ebf\u7f8e\u5143\u7684\u9b54\u672f\u590f\u65e5\u4fc3\u9500\u6d3b\u52a8\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7279\u6b8a\u7684\u673a\u68b0\u7f50\u3002[1]\u9b54\u672f\u5e08\u7684\u4fc3\u9500\u6d3b\u52a8\u4ece1990\u5e745\u67087\u65e5\u5f00\u59cb\uff0c\u52305\u670831\u65e5\u7ed3\u675f\u3002[2]\u3002\n\u5728\u8fd9\u6b21\u4fc3\u9500\u6d3b\u52a8\u4e2d\uff0c\u4e00\u4e9b\u53ef\u53e3\u53ef\u4e50\u7f50\u5934\u91cc\u6ca1\u6709\u53ef\u53e3\u53ef\u4e50\uff0c\u800c\u662f\u88c5\u7740\u73b0\u91d1\u5956\u54c1\u6216\u793c\u5238\u3002\u5956\u54c1\u662f\u5f39\u7c27\u88c5\u7684\uff0c\u4e00\u65e6\u6253\u5f00\u7f50\u5b50\u5c31\u4f1a\u5f39\u51fa\u3002\u5956\u54c1\u8981\u4e48\u662f1\u7f8e\u5143\u5230500\u7f8e\u5143\u4e0d\u7b49\u7684\u94b1\uff0c\u8981\u4e48\u662f\u53ef\u4ee5\u5151\u6362\u65c5\u884c\u6216\u5546\u54c1\u7684\u4f18\u60e0\u5238\u3002\u73b0\u91d1\u548c\u5956\u5238\u7684\u8d60\u9001\u603b\u989d\u4e3a400\u4e07\u7f8e\u5143\u3002\u6700\u521d\u7684\u8ba1\u5212\u662f\u5728\u4efb\u4f55\u65f6\u5019\u5728\u6d41\u901a\u76842\u4ebf\u7f50\u53ef\u53e3\u53ef\u4e50\u7ecf\u5178\u996e\u6599\u4e2d\u968f\u673a\u5206\u53d1\u5927\u7ea675\u4e07\u7f50\u9ea6\u5409\u5eb7\u3002[3]\u4e3a\u4e86\u8ba9\u7f50\u5934\u611f\u89c9\u548c\u91cd\u91cf\u6b63\u5e38\uff0c\u5e76\u9632\u6b62\u4eba\u4eec\u8f7b\u6613\u627e\u5230\u5956\u54c1\u7f50\u5934\uff0c\u7f50\u5934\u5185\u7684\u5bc6\u5c01\u533a\u57df\u88ab\u88c5\u6ee1\u4e86\u6c2f\u5316\u6c34\u548c\u6076\u81ed\u7269\u8d28\u7684\u6df7\u5408\u7269\uff0c\u4ee5\u963b\u6b62\u996e\u7528\u3002[1][3]\u867d\u7136\u6700\u521d\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f\uff0c\u5bfc\u81f4\u4e86\u9500\u552e\u989d\u7684\u4e0a\u5347\uff0c\u4f46\u6280\u672f\u4e0a\u7684\u56f0\u96be\u5bfc\u81f4\u4e86\u4fc3\u9500\u6d3b\u52a8\u7684\u63d0\u524d\u7ec8\u6b62\u3002[1]\u3002\n1990\u5e743\u6708\uff0c\u53ef\u53e3\u53ef\u4e50\u9996\u6b21\u5ba3\u5e03\u4e86\u9b54\u672f\u4e4b\u590f\u6d3b\u52a8\uff0c\u5c06\u88c5\u6709\u94b1\u7684\u9b54\u672f\u7f50\u5bc4\u7ed9\u4e86\u8bb0\u8005\u3002\u4e00\u4e9b\u8bb0\u8005\u5199\u9053\uff0c\u5927\u516c\u53f8\u7ed9\u8bb0\u8005\u90ae\u5bc4\u73b0\u91d1\u662f\u503c\u5f97\u6000\u7591\u7684\u3002[3]\u6d3b\u52a8\u5728\u6ca1\u6709\u9b54\u672f\u7f50\u7684\u60c5\u51b5\u4e0b\u7ee7\u7eed\u8fdb\u884c\uff0c\u4ed6\u4eec\u8d60\u9001\u53ef\u53e3\u53ef\u4e50\u8d5e\u52a9\u7684The New Kids on the Block\u9b54\u672f\u590f\u5b63\u5de1\u56de\u8d5b\u7684\u95e8\u7968\uff0c\u5e76\u5206\u53d1\u9b54\u672f\u676f\uff0c\u8fd9\u4e9b\u7eb8\u676f\u662f\u7eb8\u676f\uff0c\u5916\u9762\u6709\u5265\u79bb\u7684\u5956\u54c1\uff0c\u7528\u6765\u5728\u5feb\u9910\u8fde\u9501\u5e97\u548c\u5176\u4ed6\u55b7\u6cc9\u95e8\u5e97\u559d\u55b7\u6cc9\u996e\u6599\u3002[4]\u3002\n\u8bb8\u591a\u7f50\u5934\u90fd\u6709\u95ee\u9898\uff1a\u5f39\u51fa\u5f0f\u88c5\u7f6e\u53d1\u751f\u6545\u969c\u3001\u5361\u4f4f\u6216\u5bc6\u5c01\u6709\u95ee\u9898\uff0c\u4f1a\u5c06\u4e00\u4e9b\u6c2f\u5316\u6c34\u6df7\u5408\u7269\u91ca\u653e\u5230\u7f50\u5b50\u4e2d\u3002\u4e00\u8d77\u88ab\u5e7f\u6cdb\u62a5\u9053\u7684\u4e8b\u4ef6\u6d89\u53ca\u9a6c\u8428\u8bf8\u585e\u5dde\u4e00\u540d11\u5c81\u7684\u7537\u5b69\uff0c\u4ed6\u559d\u4e86\u7528\u6765\u4ee3\u66ff\u771f\u6b63\u53ef\u4e50\u7684\u6076\u81ed\u6db2\u4f53\u3002[3][5]\u5c3d\u7ba1\u6700\u521d\u6709\u4e9b\u62c5\u5fc3\uff0c\u4f46\u9a6c\u8428\u8bf8\u585e\u5dde\u516c\u5171\u536b\u751f\u5c40\u786e\u5b9a\u8fd9\u79cd\u6c34\u662f\u65e0\u5bb3\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u6c2f\u6d53\u5ea6\u6bd4\u4e00\u822c\u6e38\u6cf3\u6c60\u91cc\u7684\u6c34\u4f4e\u3002\u7531\u4e8e\u62c5\u5fc3\u8d1f\u9762\u5ba3\u4f20\u548c\u6f5c\u5728\u7684\u4ea7\u54c1\u8d23\u4efb\u8bc9\u8bbc\uff0c\u53ef\u53e3\u53ef\u4e50\u7acb\u5373\u5728\u7f8e\u56fd50\u4e2a\u5927\u5e02\u573a\u6295\u653e\u4e86\u7535\u89c6\u548c\u62a5\u7eb8\u5e7f\u544a\u3002\u6574\u7248\u5e7f\u544a\u53ea\u64ad\u653e\u4e00\u6b21\uff0c\u8b66\u544a\u6d88\u8d39\u8005\uff0c\u6781\u5c11\u91cf\u7684\u7f50\u5934\u4e2d\u542b\u6709\u81ed\u6c14\u718f\u5929\u4f46\u65e0\u5bb3\u7684\u6c34\uff0c\u4e0d\u5e94\u8be5\u996e\u7528\u3002\u8fd9\u4e9b\u5e7f\u544a\u7684\u6807\u9898\u662f\u201c\u597d\u597d\u770b\u4e00\u770b\u201d\uff0c\u5c0f\u53f7\u5b57\u4f53\u7684\u201c\u9b54\u672f\u5e08\u201d\u4e5f\u53ef\u4ee5\u3002\u5e73\u9762\u5e7f\u544a\u6307\u51fa\u9b54\u672f\u5e08\u53ef\u80fd\u6709\u7f3a\u9677\uff0c\u8fd9\u5b9e\u9645\u4e0a\u662f\u4efb\u4f55\u6f5c\u5728\u539f\u544a\u6839\u636e\u4e25\u683c\u8d23\u4efb\u539f\u5219\u63d0\u8d77\u8bc9\u8bbc\u7684\u4e00\u4e2a\u5173\u952e\u70b9\u3002\u6b64\u5916\uff0c\u6c2f\u5316\u6df7\u5408\u7269\u7684\u95ee\u9898\u4e0d\u662f\u62c5\u5fc3\u4e0d\u5c0f\u5fc3\u559d\u9189\u4e86\uff0c\u800c\u662f\u5b83\u6ea2\u51fa\u5230\u4e86\u5956\u54c1\u4e2d\u3002\u591a\u540d\u83b7\u5956\u8005\u62b1\u6028\u5728\u6fc0\u6d3b\u9b54\u672f\u5e08\u540e\u6536\u5230\u4e86\u6f6e\u6e7f\u7684\u94b1\u3002[3]\u3002\n\u6211\u4eec\u6b63\u5728\u63d0\u65e9\u7ed3\u675f[\u4fc3\u9500]\u3002\u5728\u6211\u4eec\u7684\u6d88\u8d39\u8005\u4e2d\uff0c\u6709\u4e00\u79cd\u6211\u4eec\u4e0d\u559c\u6b22\u7684\u5370\u8c61\uff0c\u90a3\u5c31\u662f\u4fc3\u9500\u6709\u95ee\u9898\u3002\n\u5f53\u53ef\u53e3\u53ef\u4e50\u5f00\u59cb\u6536\u5230\u5173\u4e8e\u6709\u95ee\u9898\u7684\u7f50\u5934\u7684\u6295\u8bc9\u65f6\uff0c\u5b83\u6682\u65f6\u505c\u6b62\u4e86\u5411\u5f53\u5730\u74f6\u88c5\u516c\u53f8\u5206\u9500\u9ea6\u5409\u7f50\u3002\u8be5\u8ba1\u5212\u662f\u5728\u5206\u53d1\u4e4b\u524d\u901a\u8fc7\u6447\u6643MagiCans\u6765\u68c0\u6d4b\u6709\u6545\u969c\u7684\u673a\u5236\u6765\u6d4b\u8bd5MagiCans\u3002\u53ef\u53e3\u53ef\u4e50\u81ea\u5df1\u7684\u521d\u6b65\u4f30\u8ba1\u662f\uff0c\u5728\u6700\u521d\u53d1\u5e03\u65f6\uff0c\u5546\u5e97\u8d27\u67b6\u4e0a\u6216\u74f6\u88c5\u5382\u5e93\u5b58\u4e2d\u670912\u4e07\u4e2a\u9ea6\u5409\u7f50\uff0c\u5176\u4e2d\u4e0d\u52301%\uff0c\u5373\u4e0d\u52301200\u7f50\u662f\u6709\u95ee\u9898\u7684\u3002[3]\u6700\u7ec8\uff0c\u53ef\u53e3\u53ef\u4e50\u5728\u4ec5\u4ec5\u4e09\u5468\u540e\u5c31\u7ed3\u675f\u4e86\u8fd9\u9879\u6d3b\u52a8\uff0c\u539f\u56e0\u662f\u5173\u4e8e\u6709\u95ee\u9898\u7684\u7f50\u5934\u7684\u8d1f\u9762\u5ba3\u4f20\u3002[1]\u8fd9\u4e00\u8d1f\u9762\u5ba3\u4f20\u5305\u62ec\u4e00\u5e45\u793e\u8bba\u6f2b\u753b\uff0c\u753b\u4e2d\u4e00\u540d\u6234\u58a8\u955c\u7684\u7537\u5b50\u7ad9\u5728\u5e7f\u544a\u724c\u9644\u8fd1\u6253\u5f00\u4e00\u4e2a\u6c7d\u6c34\u7f50\uff0c\u5ba3\u4f20\u9ea6\u5409\u5eb7(MagiCans)\uff0c\u7136\u540e\u5f53\u4e00\u4e2a\u5c0f\u724c\u5b50\u4ece\u4ed6\u7684\u7f50\u5b50\u91cc\u51fa\u73b0\u65f6\uff0c\u4ed6\u60ca\u8bb6\u5730\u6458\u4e0b\u58a8\u955c\uff0c\u4e0a\u9762\u5199\u7740\u8d2d\u4e70\u767e\u4e8b\u53ef\u4e50(Buy Pepsi)\u3002\u8fd9\u4e9b\u5e7f\u544a\u8fd8\u62db\u81f4\u4e861990\u5e74\u4e00\u671f\u201c\u6d88\u8d39\u8005\u62a5\u544a\u201d(Consumer Reports)\u6742\u5fd7\u9752\u5c11\u5e74\u7248\u201cZillion\u201d\u7684\u62a8\u51fb\uff0c\u8be5\u6742\u5fd7\u5728\u5176\u5e74\u5ea6ZAP\u5927\u5956(ZAP Awards)\u680f\u76ee\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e861990\u5e74\u6700\u7cdf\u7cd5\u7684\u5e7f\u544a\u3002\u6570\u4e0d\u80dc\u6570\u7684\u62b1\u6028\u662f\uff0c\u5e7f\u544a\u6b3a\u9a97\u6027\u5730\u663e\u793a\u4eba\u4eec\u6bcf\u6b21\u90fd\u6253\u5f00\u7f50\u5934\uff0c\u7ed3\u679c\u8bc1\u660e\u8fd9\u4e9b\u7f50\u5934\u662f\u9ea6\u5409\u7f50(MagiCans)\uff0c\u8fd9\u8ba9\u6bd4\u8d5b\u770b\u8d77\u6765\u6bd4\u5b9e\u9645\u60c5\u51b5\u66f4\u5bb9\u6613\u83b7\u80dc(\u8be5\u6742\u5fd7\u8fd8\u5bf9\u6c49\u5821\u738b(Burger King)\u7684\u534e\u5b9d(Whop)\u548c\u60e0\u5c14\u65af(Wheels)\u4fc3\u9500\u6d3b\u52a8\u63d0\u51fa\u4e86\u540c\u6837\u7684\u62b1\u6028\uff0c\u4f46\u5ba3\u4f20\u529b\u5ea6\u8981\u5c0f\u5f97\u591a)\u3002[6]\u3002\n\u7ed3\u675f\u8fd9\u9879\u6d3b\u52a8\u7684\u51b3\u5b9a\u662f\u5728\u201c\u597d\u597d\u770b\u770b\u201d\u5e7f\u544a\u53d1\u5e03\u4e00\u5468\u540e\u505a\u51fa\u7684\u3002\u53ef\u53e3\u53ef\u4e50\u968f\u540e\u53d1\u5e03\u5e7f\u544a\uff0c\u544a\u8bc9\u6d88\u8d39\u8005\u5e02\u573a\u4e0a\u53ea\u5269\u4e0b\u51e0\u4e2a\u5956\u54c1\u7f50\u5934\uff0c\u52306\u6708\u4e2d\u65ec\uff0c\u8fd9\u4e9b\u5956\u54c1\u7f50\u5934\u5c06\u88ab\u8fd0\u8d70\u3001\u8fd0\u8d70\u3001\u6d88\u5931\uff0c\u5c4a\u65f6\u8be5\u516c\u53f8\u9884\u8ba1\u73b0\u6709\u7684\u7f50\u5934\u5c06\u88ab\u8d2d\u4e70\u5e76\u4e0b\u67b6\u3002\u5728\u7ec8\u6b62\u65f6\uff0c7\u5bb6\u516c\u53f8\u4e2d\u7684200,000\u5bb6\n\u53ef\u53e3\u53ef\u4e50\u7684\u5feb\u901f\u635f\u5bb3\u63a7\u5236\u4e3e\u63aa\u8ba9\u4eba\u56de\u60f3\u8d77\u51e0\u5e74\u524d\u65b0\u53ef\u53e3\u53ef\u4e50\u7684\u60e8\u8d25\u3002[7]\u3002\n\u572820\u4e16\u7eaa90\u5e74\u4ee3\u548c21\u4e16\u7eaa\u593410\u5e74\uff0c\u6709\u4e00\u4e2a\u57ce\u5e02\u4f20\u8bf4\uff0c\u4e00\u4e2a\u5b69\u5b50\u5728\u559d\u4e86\u5176\u4e2d\u4e00\u4e2a\u9ea6\u5409\u7f50\u91cc\u7684\u6db2\u4f53\u540e\u6b7b\u4ea1\u3002\u636eSnopes.com\u62a5\u9053\uff0c\u8fd9\u662f\u5047\u7684\uff0c\u5b83\u7684\u8d77\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5a92\u4f53\u5bf9\u4e00\u540d\u7537\u5b69\u7684\u62a5\u9053\uff0c\u8fd9\u540d\u7537\u5b69\u5728\u4ed6\u7684\u6bcd\u4eb2\u6000\u7591\u4ea7\u54c1\u88ab\u7be1\u6539\u540e\u88ab\u9001\u5f80\u533b\u9662\u4f5c\u4e3a\u9884\u9632\u63aa\u65bd\u3002[8]\u3002\n^a b c d Berice Kanner\uff0c\u53e6\u4e00\u5c4a\u590f\u5b63\u5965\u8fd0\u4f1a\uff0c1992\u5e746\u670815\u65e5\uff0c\u7ebd\u7ea6\uff0c2013\u5e744\u670816\u65e5\u3002\n\u201c\u9a6c\u514b\u00b7\u8d56\u65af\uff0c\u53ef\u53e3\u53ef\u4e50\u7ec8\u7ed3\u201d\uff0c\u201c\u56e0\u8d1f\u9762\u5ba3\u4f20\u800c\u4fc3\u9500\u201d\uff0c\u7f8e\u8054\u793e\uff0c1990\u5e745\u670831\u65e5\uff0c2013\u5e744\u670816\u65e5\u3002\n^a b c d e e f g Anthony Ramirez\uff0c\u201c\u53ef\u4e50\u4fc3\u9500\u4e2d\u7684\u95ee\u9898\u5f39\u51fa\u201d\uff0c\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\uff0c1990\u5e745\u670824\u65e5\uff0c2013\u5e744\u670816\u65e5\u8bbf\u95ee\u3002\n\u53ef\u53e3\u53ef\u4e50\u7f50\u5934\u88ab\u86c7\u54ac\u7684\u4fc3\u9500\u6d3b\u52a8\u5b58\u6863\u4e8e2013-06-16\u6863\u6848\u9986\u3002\u4eca\u5929\uff0c\u201c\u65b0\u95fb\u5468\u520a\u201d\uff0c1990\u5e746\u670810\u65e5\uff0c\u8bbf\u95ee2013\u5e744\u670816\u65e5\u3002\n\u9a6c\u514b\u00b7\u8d56\u65af(Marc Rice)\uff0cDUDS Prompt Coke to Shore Up Magican\u4fc3\u9500\uff0c\u7f8e\u8054\u793e(Associated Press)\uff0c1990\u5e745\u670824\u65e5\uff0c2013\u5e744\u670816\u65e5\u3002", "note_en": "Jump to navigation  Jump to search  MagiCans were special, mechanical cans used by  The Coca-Cola Company in the United States of America as a part of their $100-million &#34;Magic Summer &#39;90&#34; promotion.  [1] The MagiCan promotion began on May 7, 1990, and ended on May 31.  [2]\n In this promotion, some  Coca-Cola cans had cash prizes or  gift certificates inside instead of Coca-Cola. The prizes were  spring-loaded to pop out of the opening once the can was opened. The prize would either be money, from $1 to $500, or coupons redeemable for trips or merchandise. The total giveaway of cash and prize coupons was $4 million. The original plan was to randomly distribute about 750,000 MagiCans among the 200 million cans of  Coca-Cola Classic in circulation at any one time.  [3] To make the cans feel and weigh normal, and prevent people from easily finding the prize cans, a sealed area within the cans was filled with a mixture of  chlorinated water and a foul-smelling substance to discourage drinking.  [1]  [3] Though initially a great success, leading to a rise in sales, technical difficulties led to the promotion&#39;s early termination.  [1]\n   Coca-Cola first announced the &#34;Magic Summer &#39;90&#34; campaign in March 1990 by sending MagiCans containing money to journalists. Some journalists wrote that it was questionable for a big corporation to  mail cash to reporters.  [3] The campaign continued without the MagiCans, giving away tickets to the Coca-Cola\u2013sponsored  New Kids on The Block&#39;s  Magic Summer Tour and distributing &#34;MagiCups&#34;, which were paper cups with peel-off prizes on the exterior used for fountain drinks at  fast-food chains and other fountain outlets.  [4]\n  A number of cans had problems: the pop-up mechanism malfunctioned, jamming, or a faulty seal released some of the chlorinated water mixture into the can itself. A widely reported incident involved an 11-year-old boy in Massachusetts drinking the foul-tasting liquid used to replace actual cola.  [3]  [5] Despite initial fears, the  Massachusetts Department of Public Health determined that the water was not harmful, containing a lower concentration of chlorine than the water in a typical swimming pool. Worried about the bad publicity and potential  product liability lawsuits, Coke immediately placed television and newspaper advertisements in 50 large United States markets. The full-page ads, run only once, warned consumers that a &#34;very small number&#34; of cans contain a foul-smelling but harmless water that should not be ingested. The ads were headlined &#34;Take A Good Look&#34; and in smaller type, read &#34;You could have a MagiCan.&#34; The print ads pointed out that the MagiCans might be defective, which actually proved a key point in any potential plaintiff&#39;s lawsuit under the doctrine of  strict liability. Moreover, the problem with the chlorinated mixture was not concern of being drunk by accident, but that it spilled over into the prize. Multiple winners complained about receiving soggy money after activating a MagiCan.  [3]\n &#34;We are winding [the promotion] down early. There is the impression we don&#39;t like among our consumers that there is a problem with the promotion.&#34;\n When Coca-Cola began receiving complaints about the faulty cans, it temporarily halted distribution of the MagiCans to local  bottlers. The plan was to test MagiCans before distribution by shaking them to detect faulty mechanisms. Coca-Cola&#39;s own initial estimate was that 120,000 MagiCans were on store shelves or in bottler inventories at the initial release, of which less than 1 percent, or fewer than 1,200 cans, were faulty.  [3] Ultimately, Coke ended the campaign after only three weeks due to the negative publicity regarding faulty cans.  [1] This negative publicity included an  editorial cartoon showing a man in sunglasses opening a soda can while standing near a billboard hyping MagiCans, then removing his sunglasses in surprise when a small sign emerges from his can reading &#34;Buy Pepsi&#34;. The ads also drew fire from a 1990 issue of  Zillions, the juvenile version of   Consumer Reports magazine, in their annual &#34;ZAP Awards&#34; segments detailing the worst ads of 1990.  Zillions&#39; complaint was that the ads deceptively showed people opening cans that turned out to be MagiCans every time, making the contest look easier to win than it actually was (the magazine also made the same complaint about  Burger King&#39;s &#34;Whopper &amp; Wheels&#34; promotion, which received far less publicity).  [6]\n The decision to end the campaign came one week after the &#34;Take A Good Look&#34; advertisements were released. Coca-Cola then released ads telling consumers that only a few prize cans were left on the market and that they would be &#34;going, going, gone by mid-June&#34;, the time when the company estimated the existing cans would be purchased and off the shelves. At the time of termination, 200,000 of the 750,000 planned promotional cans had been distributed.  [2] Although largely confident there were no safety issues, Coca-Cola&#39;s final advertising spot showed New Kids on the Block with an added voiceover from  Jordan Knight warning, &#34;If you have a winning can, don&#39;t drink the liquid!&#34;\n Meanwhile, rival  Pepsi also did a prize giveaway in 1990 under the &#34; Cool Cans&#34; promotion. However, instead of a complicated push-up device in cans, each can was filled with normal, drinkable cola and at the bottom of the inside of the can there was a number printed that could correspond with a prize, from $25 to $20,000. The consumer called a  toll-free number to find out if they had won.  [3] Pepsi&#39;s promotion also suffered from negative publicity when it was discovered that if two specific Cool Cans were stacked in a certain way, the designs appeared to spell out the word &#34;SEX&#34;. Coca-Cola would attempt a similar promotion three years later with &#34;Monsters of the Gridiron&#34;, a Halloween-themed promotion where people could call a toll-free number and enter a code, to which a recording from an NFL star would tell them whether or not they won a prize.\n Coca-Cola&#39;s quick  damage-control initiative was reminiscent of the fiasco over  New Coke several years earlier.  [7]\n  There was an  urban legend in the 1990s and 2000s that a child had died drinking the liquid in one of the MagiCans. This has been reported as false according to  Snopes.com, and its origins were traced back to media coverage of a boy who was taken to the hospital as a precaution after his mother suspected product tampering.  [8]\n    ^     a     b     c     d  Bernice Kanner,  The Other Summer Games,   New York, June 15, 1992, accessed April 16, 2013.\n ^     a     b     c  Marc Rice,  Coke Ending &#34;MagiCan&#34; Promotion Because of Bad Publicity, Associated Press, May 31, 1990, accessed April 16, 2013.\n ^     a     b     c     d     e     f     g  Anthony Ramirez,  Problems Pop Up in Coke Promotion,  The New York Times, May 24, 1990, accessed April 16, 2013.\n ^   Coke Cans A Snakebitten Promotion  Archived 2013-06-16 at  Archive.today,  Newsweek, June 10, 1990, accessed April 16, 2013.\n   ^  Marc Rice,  Duds Prompt Coke to Shore Up MagiCan Promotion, Associated Press, May 24, 1990, accessed April 16, 2013.", "posttime": "2020-07-21 12:49:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9b54\u672f\u5e08,magican,\u7f50\u5934", "title": "\u9b54\u672f\u5e08", "title_en": "MagiCan", "transed": 1, "url": "https://en.wikipedia.org/wiki/MagiCan", "via": "", "real_tags": ["\u9b54\u672f\u5e08", "magican", "\u7f50\u5934"]}, {"category": "", "categoryclass": "", "imagename": "1d8bd2e48905a9ab576e3c303044965c.jpg", "infoid": 1013206, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7231\u8377\u534e\u5dde\u4e00\u540d\u62a5\u7eb8\u8bb0\u8005\u63ed\u9732\u4e86\u4e00\u540d\u4f53\u80b2\u8ff7\u5728\u75c5\u6bd2\u5f0f\u6148\u5584\u7b79\u6b3e\u6d3b\u52a8\u4e2d\u53d1\u5e03\u7684\u79cd\u65cf\u4e3b\u4e49\u63a8\u6587\uff0c\u5728\u4ed6\u81ea\u5df1\u7684\u653b\u51fb\u6027\u5e16\u5b50\u91cd\u65b0\u6d6e\u51fa\u6c34\u9762\u540e\uff0c\u4ed6\u81ea\u5df1\u4e5f\u88ab\u89e3\u96c7\u4e86\u3002\n\u201c\u5f97\u6885\u56e0\u7eaa\u4e8b\u62a5\u201d\u8bb0\u8005\u4e9a\u4f26\u00b7\u5361\u5c14\u6587\u56e0\u5bf9\u5361\u68ee\u00b7\u91d1\u7684\u4e2a\u4eba\u4ecb\u7ecd\u5f15\u53d1\u6124\u6012\u800c\u4e22\u6389\u4e86\u5de5\u4f5c\u3002\n\u8fd9\u4e2a\u6545\u4e8b\u5728\u7f8e\u56fd\u5f15\u53d1\u4e86\u4e00\u573a\u5173\u4e8e\u53d6\u6d88\u6587\u5316\u7684\u8fa9\u8bba\uff0c\u5728\u7f8e\u56fd\uff0c\u516c\u4f17\u4eba\u7269\u56e0\u5f15\u8d77\u5192\u72af\u800c\u53d7\u5230\u8ffd\u6355\u3002\n9\u670814\u65e5\uff0c\u7231\u8377\u534e\u5dde\u7acb\u5927\u5b66\u8db3\u7403\u8ff7\u5361\u68ee\u00b7\u91d1\u5728ESPN\u5e7f\u64ad\u7684\u80cc\u666f\u4e2d\u51fa\u73b0\u4e86\u4ed6\u624b\u7ed8\u7684\u7eb8\u677f\u6807\u8bed\uff0c\u8981\u6c42\u4e3a\u4ed6\u7684\u5e03\u5e0c\u706f\u5177\u7528\u54c1\u6350\u6b3e\uff0c\u4e4b\u540e\u4ed6\u51fa\u4eba\u610f\u6599\u5730\u6210\u540d\u3002\n\u5728\u6700\u521d\u4ece\u6709\u8da3\u7684\u4f53\u80b2\u8ff7\u90a3\u91cc\u6536\u5230\u5927\u7ea6600\u7f8e\u5143\u540e\uff0c\u8fd9\u4f4d24\u5c81\u7684\u5e74\u8f7b\u4eba\u5ba3\u5e03\u8fd9\u7b14\u94b1\u5c06\u6350\u8d60\u7ed9\u5f53\u5730\u7684\u513f\u7ae5\u533b\u9662\uff0c\u5bfc\u81f4\u6350\u6b3e\u98d9\u5347\u3002\n\u91d1\u5728\u6d77\u62a5\u4e0a\u5f15\u7528\u7684\u8f6c\u8d26\u7f51\u7ad9Venmo\u548c\u5e03\u5e0c\u6de1\u5564\u7684\u917f\u9020\u5546Anheuser-Busch\uff0c\u9664\u4e86\u7231\u8377\u534e\u5dde\u7684\u4f17\u591a\u4f01\u4e1a\u5916\uff0c\u8fd8\u63d0\u4f9b\u4e86\u4e30\u539a\u7684\u6350\u6b3e\uff0c\u603b\u8ba1180\u4e07\u7f8e\u5143(150\u4e07\u82f1\u9551)\u3002\n\u8fd9\u4f4d\u5dde\u957f\u5ba3\u5e039\u670828\u65e5\u4e3a\u5361\u68ee\u56fd\u738b\u65e5\uff0c\u79f0\u4ed6\u7684\u5fd7\u613f\u7cbe\u795e\u548c\u65e0\u79c1\u7cbe\u795e\u4ece\u672c\u8d28\u4e0a\u5b9a\u4e49\u4e86\u7231\u8377\u534e\u5dde\u4eba\uff0c\u5e76\u8868\u660e\u7231\u8377\u534e\u5dde\u5c3c\u65af\u4e0d\u4ec5\u4ec5\u662f\u4e00\u53e5\u53e3\u53f7\uff0c\u800c\u662f\u6211\u4eec\u7684\u751f\u6d3b\u65b9\u5f0f\u3002\n\u5927\u7ea6\u5728\u90a3\u65f6\uff0c\u201c\u5f97\u6885\u56e0\u7eaa\u4e8b\u62a5\u201d\u7684\u8bb0\u8005\u4e9a\u4f26\u00b7\u5361\u5c14\u6587\u5f00\u59cb\u5199\u4e00\u7bc7\u5173\u4e8e\u91d1\u5148\u751f\u7684\u7279\u5199\uff0c\u5e76\u4e8e9\u670824\u65e5\u53d1\u8868\u3002\n\u5b83\u8bf4\uff0c\u516b\u5e74\u524d\u5728\u9ad8\u4e2d\u65f6\uff0c\u91d1\u5148\u751f\u5728\u63a8\u7279\u4e0a\u53d1\u4e86\u4e24\u4e2a\u5173\u4e8e\u9ed1\u4eba\u7684\u79cd\u65cf\u4e3b\u4e49\u7b11\u8bdd\u3002\n\u5c31\u5728\u201c\u5f97\u6885\u56e0\u767b\u8bb0\u5904\u201d\u4e8b\u4ef6\u66dd\u5149\u4e4b\u524d\uff0c\u8eab\u4e3a\u8d4c\u573a\u4fdd\u5b89\u7684\u91d1\u5148\u751f\u53ec\u5f00\u4e86\u4e00\u6b21\u65b0\u95fb\u53d1\u5e03\u4f1a\u8868\u793a\u9053\u6b49\u3002\n\u4ed6\u5728\u8c08\u5230\u90a3\u4e9b\u8001\u63a8\u6587\u65f6\u8bf4\uff0c\u56de\u60f3\u8d77\u621116\u5c81\u65f6\u8ba4\u4e3a\u5f88\u597d\u7b11\u7684\u4e8b\u60c5\uff0c\u6211\u611f\u5230\u975e\u5e38\u5c34\u5c2c\u548c\u9707\u60ca\u3002\n\u4ed6\u5f3a\u8c03\uff0c\u8be5\u5dde\u6700\u5927\u7684\u62a5\u7eb8\u5728\u6240\u6709\u62a5\u9053\u4e2d\u90fd\u8868\u73b0\u5f97\u975e\u5e38\u53cb\u597d\uff0c\u6211\u5f88\u611f\u8c22\u8bb0\u8005\u5411\u6211\u6307\u51fa\u4e86\u8fd9\u7bc7\u6587\u7ae0\u3002\n\u6211\u60f3\u771f\u8bda\u5730\u9053\u6b49\uff0c\u91d1\u5148\u751f\u8bf4\u3002\u8c22\u5929\u8c22\u5730\uff0c\u9ad8\u4e2d\u751f\u957f\u5927\u4e86\uff0c\u6709\u671b\u6210\u4e3a\u6709\u8d23\u4efb\u5fc3\u3001\u6709\u7231\u5fc3\u7684\u6210\u5e74\u4eba\u3002\n\u8be5\u62a5\u7684\u6279\u8bc4\u8005\u8c34\u8d23\u5176\u6316\u6398\u91d1\u5148\u751f\u653b\u51fb\u6027\u5e16\u5b50\u7684\u51b3\u5b9a\uff0c\u8fd9\u4e9b\u5e16\u5b50\u5305\u62ec\u5728\u6587\u7ae0\u5e95\u90e8\u9644\u8fd1\u3002\n\u5e03\u5e0c\u4e4b\u5149\u5f00\u59cb\u4e0e\u91d1\u4fdd\u6301\u8ddd\u79bb\uff0c\u4f46\u8868\u793a\u4ecd\u5c06\u5c65\u884c\u5bf9\u7231\u8377\u534e\u5927\u5b66\u65af\u7279\u5fb7\u5bb6\u5ead\u513f\u7ae5\u533b\u9662(University of Iowa Stead Family Children\u2018s Hospital)35\u4e07\u7f8e\u5143\u7684\u627f\u8bfa\u3002\n\u7136\u800c\uff0c\u8fd9\u5bb6\u917f\u9152\u5de8\u5934\u8868\u793a\uff0c\u5b83\u4e0d\u518d\u8ba1\u5212\u5411\u91d1\u5148\u751f\u8d60\u9001\u4e00\u5e74\u4f9b\u5e94\u7684\u5370\u6709\u91d1\u5148\u751f\u5934\u50cf\u7684\u9650\u91cf\u7248\u7f50\u5934\u5564\u9152\u3002\n\u751a\u81f3\u5728\u201c\u5f97\u6885\u56e0\u7eaa\u4e8b\u62a5\u201d(Des Moines Register)\u6587\u7ae0\u53d1\u8868\u4e4b\u524d\uff0c\u7f51\u4e0a\u5c31\u51fa\u73b0\u4e86\u5f3a\u70c8\u7684\u53cd\u5f39\uff0cTwitter\u4e0a\u7684\u4fa6\u63a2\u4eec\u5f00\u59cb\u63ed\u9732\u5361\u5c14\u6587\u81ea\u5df1\u7684\u58f0\u660e\uff0c\u8fd9\u4e9b\u58f0\u660e\u5632\u7b11\u540c\u6027\u5a5a\u59fb\u3001\u5bb6\u5ead\u66b4\u529b\uff0c\u5e76\u5305\u542b\u79cd\u65cf\u8bfd\u8c24\u3002\n\u5728\u4e00\u6761\u6094\u6068\u7684\u63a8\u6587\u4e2d\uff0c\u4ed6\u5199\u9053\uff1a\u563f\uff0c\u6211\u53ea\u662f\u60f3\u8bf4\uff0c\u6211\u5df2\u7ecf\u5220\u9664\u4e86\u4e4b\u524d\u90a3\u4e9b\u4e0d\u6070\u5f53\u6216\u9ebb\u6728\u4e0d\u4ec1\u7684\u63a8\u6587\u3002\n\u6211\u4e3a\u81ea\u5df1\u6ca1\u6709\u8fbe\u5230\u6ce8\u518c\u673a\u6784\u5bf9\u4ed6\u4eba\u7684\u540c\u6837\u9ad8\u6807\u51c6\u800c\u9053\u6b49\u3002\n\u5468\u56db\u6df1\u591c\uff0c\u201c\u7eaa\u4e8b\u62a5\u201d\u7684\u6267\u884c\u4e3b\u7f16\u5ba3\u5e03\uff0c\u5728\u5361\u5c14\u6587\u7684\u7f51\u4e0a\u8bc4\u8bba\u5f15\u8d77\u8be5\u62a5\u6ce8\u610f\u540e\uff0c\u4ed6\u5df2\u88ab\u89e3\u96c7\u3002\n\u7f16\u8f91\u5361\u7f57\u5c14\u00b7\u4ea8\u7279(Carol Hunter)\u5728\u7ed9\u8bfb\u8005\u7684\u4fe1\u4e2d\u5199\u9053\uff1a\u6211\u4eec\u542c\u5230\u4e86\uff1a\u4f60\u751f\u6c14\u4e86\uff0c\u4f60\u5931\u671b\u4e86\uff0c\u4f60\u60f3\u8ba9\u6211\u4eec\u660e\u767d\u8fd9\u4e00\u70b9\u3002\n\u5979\u5199\u9053\uff0c\u8be5\u62a5\u6b63\u5728\u91cd\u65b0\u8c03\u67e5\u5458\u5de5\u7684\u793e\u4ea4\u5a92\u4f53\u8d26\u6237\uff0c\u4ee5\u53ca\u4e3a\u6545\u4e8b\u4e2d\u7684\u4e2a\u4eba\u8bbe\u5b9a\u80cc\u666f\u7684\u653f\u7b56\uff0c\u7279\u522b\u5173\u6ce8\u9752\u5c11\u5e74\u7684\u884c\u4e3a\uff0c\u4ee5\u53ca\u591a\u5e74\u540e\u8fd9\u4e9b\u4fe1\u606f\u7684\u65b0\u95fb\u4ef7\u503c\u3002\n\u622a\u81f3\u4e0a\u5468\u4e94\uff0c\u5df2\u6709\u8d85\u8fc716.6\u4e07\u4eba\u5728\u8bf7\u613f\u4e66\u4e0a\u7b7e\u540d\uff0c\u547c\u5401\u201c\u7eaa\u4e8b\u62a5\u201d\u5728\u5934\u7248\u5411\u91d1\u5148\u751f\u9053\u6b49\uff0c\u56e0\u4e3a\u4ed6\u8bd5\u56fe\u65a5\u8d23\u5e76\u7f9e\u8fb1\u4e00\u4f4d\u76ee\u6807\u662f\u505a\u4e00\u4e9b\u771f\u6b63\u4ee4\u4eba\u60ca\u53f9\u7684\u4e8b\u60c5\u7684\u5e74\u8f7b\u4eba\u3002\n\u5728\u5468\u56db\u7684\u63a8\u7279\u4e0a\uff0c\u91d1\u5148\u751f\u611f\u8c22\u4ed6\u7684\u652f\u6301\u8005\uff0c\u5e76\u8865\u5145\u8bf4\uff0c\u7279\u522b\u611f\u8c22\u65af\u7279\u5fb7\u5bb6\u5ead\u513f\u7ae5\u533b\u9662\u7684\u5b69\u5b50\u548c\u5bb6\u4eba\uff0c\u4ed6\u4eec\u5206\u4eab\u4e86\u4ed6\u4eec\u7684\u6545\u4e8b\u3002\u4f60\u7684\u6545\u4e8b\u63d0\u9192\u6211\u4eec\u4e3a\u4ec0\u4e48\u8fd9\u4e00\u5207\u90fd\u662f\u503c\u5f97\u7684\u3002\n\u4e0d\u8fc7\uff0c\u8fd9\u4e0e\u6211\u65e0\u5173\u3002\u8fd9\u4e8b\u5173\u6211\u4eec\u6240\u6709\u4eba\u3002\u6211\u53ea\u662f\u4e0d\u77e5\u6240\u63aa\uff0c\u4e00\u4e2a\u6700\u521d\u53ea\u662f\u4e00\u4e2a\u7b11\u8bdd\u7684\u6807\u5fd7\u5728\u672a\u6765\u51e0\u5e74\u91cc\u4f1a\u4ea7\u751f\u5982\u6b64\u6709\u610f\u4e49\u7684\u5f71\u54cd\u3002\n\u4f46\u8fd9\u4e24\u5468\u5df2\u7ecf\u8868\u660e\uff0c\u6211\u4eec\u6709\u529b\u91cf\u8d70\u5230\u4e00\u8d77\uff0c\u505a\u51fa\u6539\u53d8\u3002\u6211\u5e0c\u671b\u8fd9\u80fd\u6fc0\u52b1\u6211\u4eec\u6240\u6709\u4eba\u7ee7\u7eed\u524d\u8fdb\u3002", "note_en": "An Iowa newspaper journalist who exposed racist tweets by a sports fan at the centre of a viral charity fundraiser has himself been fired after his own offensive posts resurfaced.\n Des Moines Register reporter Aaron Calvin has lost his job after his profile of Carson King triggered fury.\n  The story has provoked a debate on US &#34;cancel culture&#34;, where public figures are hounded for causing offence.\n Carson King, an Iowa State University football fan, found unexpected fame on 14 September after his hand-drawn cardboard sign requesting donations for his &#34;Busch Light Supply&#34; was featured in the background of an ESPN broadcast.\n  After initially receiving around $600 from amused sports fans, the 24-year-old announced the money would be donated to the local children&#39;s hospital, causing donations to skyrocket.\n Venmo, the money-transferring website that Mr King had cited on his poster, and Anheuser-Busch, the brewer of Busch Light lager, offered bumper donations, in addition to a multitude of Iowa businesses, totalling $1.8m (\u00a31.5m).\n The  state governor proclaimed 28 September &#34;Carson King Day&#34;, saying his &#34;volunteerism and selflessness defines Iowans by nature&#34;, and &#34;demonstrate how Iowa Nice isn&#39;t just a slogan, but our way of life&#34;.\n It was around then that Des Moines Register reporter Aaron Calvin began writing a feature on Mr King, which was published on 24 September.\n It said that while in high school eight years earlier, Mr King had tweeted two racist jokes about black people.\n  Just before the Des Moines Register story came out, Mr King, who works as a casino security guard, convened a press conference to apologise.\n &#34;I am so embarrassed and stunned to reflect on what I thought was funny when I was 16-years-old,&#34; he said of the old tweets.\n He emphasised that the state&#39;s largest newspaper &#34;has been nothing but kind in all of their coverage, and I appreciate the reporter pointing out the post to me&#34;.\n &#34;I want to sincerely apologise,&#34; Mr King said. &#34;Thankfully, high school kids grow up and hopefully become responsible and caring adults.&#34;\n   Critics of the newspaper condemned its decision to dredge up Mr King&#39;s offensive posts, which were included near the bottom of the article.\n Busch Light began distancing itself from Mr King, but said it would still honour its $350,000 commitment to the University of Iowa Stead Family Children&#39;s Hospital.\n The brewing giant said, however, it no longer planned to send Mr King a year&#39;s supply of beer with his face printed on the limited-edition cans.\n Online backlash against the backlash built even before the Des Moines Register article was published, and Twitter sleuths began uncovering Mr Calvin&#39;s own statements that mocked same-sex marriage, domestic abuse and included a racial slur.\n In a contrite tweet, he wrote: &#34;Hey just wanted to say that I have deleted previous tweets that have been inappropriate or insensitive.\n &#34;I apologise for not holding myself to the same high standards as the Register holds others.&#34;\n  Late on Thursday night, the executive editor of the Register announced that Mr Calvin had been fired after his online comments were brought to the paper&#39;s attention.\n Editor Carol Hunter&#39;s letter to readers says: &#34;We hear you: You&#39;re angry, you&#39;re disappointed and you want us to understand that.&#34;\n   She wrote that the paper was re-examining employees&#39; social media accounts as well as policies for &#34;backgrounding individuals in stories, with particular attention to acts committed by juveniles and to the newsworthiness of that information years later&#34;.\n As of Friday, more than 166,000 people have signed a petition calling for the Register to issue a front-page apology to Mr King &#34;for trying to berate and shame a young man whose goal was to do something truly amazing&#34;.\n In a Twitter post on Thursday, Mr King thanked his supporters, adding that &#34;a special thanks to the kids and families of Stead Family Children&#39;s Hospital who have shared their stories. Your stories remind us why this is all worth it&#34;.\n &#34;This is not about me, though. This is about all of us. I am just overwhelmed that a sign that started as a joke will end up making such a meaningful impact for years to come.&#34;\n  &#34;But these two weeks have shown we have the power to come together to make a difference. I hope this can be an inspiration for all of us going forward.&#34;", "posttime": "2020-07-21 12:49:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u6587,reporter,\u5148\u751f", "title": "\u7231\u8377\u534e\u5dde\u4e00\u540d\u8bb0\u8005\u63ed\u9732\u4e86\u56e0\u81ea\u5df1\u7684\u63a8\u6587\u800c\u88ab\u89e3\u96c7\u7684\u79cd\u65cf\u4e3b\u4e49\u63a8\u6587", "title_en": "Iowa reporter who exposed racist tweets fired for own tweets", "transed": 1, "url": "https://www.bbc.com/news/world-us-canada-49857358", "via": "", "real_tags": ["\u63a8\u6587", "reporter", "\u5148\u751f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1013205, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u4e9b\u62bd\u8c61\u6982\u5ff5\u662f\u5b9a\u65f6\u70b8\u5f39\uff0c\u800c\u53e6\u4e00\u4e9b\u5219\u5e2e\u52a9\u60a8\u5feb\u901f\u79fb\u52a8\u3002\u4f60\u600e\u4e48\u770b\u5f97\u51fa\u6765\uff1f\u4e0b\u9762\u662f\u6211\u4e2a\u4eba\u5bf9\u5982\u4f55\u8bc4\u4f30\u62bd\u8c61\u7684\u63a2\u7d22\u3002\n\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u6dfb\u52a0\u62bd\u8c61\u6765\u89e3\u51b3\u95ee\u9898\u3002\u90a3\u4e48\uff0c\u8ba9\u6211\u4eec\u4ece\u57fa\u672c\u7684\u4ef7\u503c\u4e3b\u5f20\u5f00\u59cb\uff1a\u6211\u4eec\u7684\u62bd\u8c61\u89e3\u51b3\u4e86\u4ec0\u4e48\u95ee\u9898\uff1f\n\u8fd9\u53ef\u4ee5\u662f\u4e00\u79cd\u81ea\u7136\u8bed\u8a00\u5904\u7406\u62bd\u8c61\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u63d0\u53d6\u4e00\u6bb5\u6587\u672c\uff0c\u5e76\u4ece\u4e2d\u63d0\u53d6\u542b\u4e49\u3002\u81ea\u7136\u8bed\u8a00\u5904\u7406\u7684\u56fa\u6709\u95ee\u9898\u76f8\u5f53\u590d\u6742\uff0c\u56e0\u6b64\u5e2e\u52a9\u6211\u4eec\u89e3\u51b3\u5b83\u7684\u62bd\u8c61\u5c06\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u62bd\u8c61\u7684\u6807\u5fd7\u3002\n\u4e5f\u8bb8\u8fd9\u4e2a\u62bd\u8c61\u5728string.plit\u4e4b\u4e0a\u6dfb\u52a0\u4e86\u4e00\u5c42\u8f7b\u5c42\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u4f7f\u60a8\u4e0d\u5fc5\u62c5\u5fc3\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u6a21\u5f0f\u8f6c\u6362\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002StringSplitter\u62bd\u8c61\u7684\u4ef7\u503c\u975e\u5e38\u4f4e\u3002\u4e5f\u8bb8StringSplitter\u5bf9\u5f85\u5206\u88c2Str\u7684\u65b9\u5f0f\u66f4\u7b26\u5408\u67d0\u4eba\u7684\u60f3\u6cd5\uff0c\u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u662f\u4e00\u79cd\u95f4\u63a5\u7684\u65b9\u5f0f\u3002\n\u8fd9\u5c06\u6211\u4eec\u5f15\u5411\u7b2c\u4e00\u4e2a\u539f\u5219\u3002\u5b83\u4e3a\u60a8\u89e3\u51b3\u7684\u95ee\u9898\u8d8a\u590d\u6742\uff0c\u62bd\u8c61\u6548\u679c\u5c31\u8d8a\u597d(1)\u3002\n\u5728\u6211\u4eec\u786e\u4fe1\u5373\u5c06\u6dfb\u52a0\u7684\u62bd\u8c61\u4e3a\u6211\u4eec\u89e3\u51b3\u4e86\u4e00\u4e2a\u96be\u9898\u4e4b\u540e\uff0c\u4e0b\u4e00\u4ef6\u8981\u8003\u8651\u7684\u4e8b\u60c5\u662f\u63a5\u53e3\uff1a\u6211\u4eec\u5982\u4f55\u4e0e\u62bd\u8c61\u4ea4\u4e92\uff1f\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679cNLP.parse\u662f\u8fd9\u6837\u8c03\u7528\u7684\uff1a\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u754c\u9762\u3002\u5b83\u5f88\u5c0f\u3002\u6211\u4eec\u4e0d\u9700\u8981\u4e86\u89e3\u4efb\u4f55\u5185\u90e8\u7ed3\u6784\u3002\u5bf9\u4e8e\u4e3b\u8981\u7528\u4f8b\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u63d0\u4f9b\u8bed\u8a00\u548c\u6587\u672c\u3002\u5c06\u5176\u4e0e\u3002\n\u4e3a\u4e86\u4f7f\u7528\u8fd9\u4e2a\u7248\u672c\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3NLP.parse\u7684\u5185\u90e8\u7ed3\u6784\u3002\u8fd9\u964d\u4f4e\u4e86\u62bd\u8c61\u7684\u4ef7\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u505a\u66f4\u591a\u7684\u5de5\u4f5c\u6765\u89e3\u51b3\u76f8\u540c\u7ea7\u522b\u7684\u590d\u6742\u6027\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u5177\u6709\u89e3\u51b3\u96be\u9898\u7684\u7b80\u5355\u63a5\u53e3\u7684\u62bd\u8c61\uff0c\u6211\u4eec\u9700\u8981\u95ee\u4e00\u4e2a\u53ef\u80fd\u81f4\u547d\u7684\u95ee\u9898\uff1a\u5f53\u6211\u4eec\u9700\u8981\u7a81\u7834\u62bd\u8c61\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\n\u6240\u6709\u62bd\u8c61\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u90fd\u662f\u6709\u6f0f\u6d1e\u7684\u3002\u5f53\u60a8\u9700\u8981\u62bd\u8c61\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u8fd0\u884c\u65f6\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\u5462\uff1f\u5982\u679c\u5b83\u6ca1\u6709\u50cf\u60a8\u9884\u671f\u7684\u90a3\u6837\u5de5\u4f5c\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\n\u4f8b\u5982\uff0c\u5bf9\u4e8eNLP.parse(lang\uff0ctext)\uff0c\u5982\u679c\u6211\u4eec\u9700\u8981\u5bf9\u7ed3\u679c\u8fdb\u884c\u4e0d\u540c\u7684\u6392\u5e8f\u548c\u8bc4\u5206\u600e\u4e48\u529e\uff1f\u5982\u679c\u6709bug\uff0c\u800c\u6211\u4eec\u6ca1\u6709\u5f97\u5230\u6211\u4eec\u671f\u671b\u7684\u5b9e\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u67e5\u770b\u5e76\u8c03\u8bd5\u5417\uff1f\n\u7406\u89e3\u4e86\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff0c\u5c06\u4f1a\u7ed9\u6211\u4eec\u5e26\u6765\u7a81\u7834\u6027\u7684\u6210\u672c\u3002\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u4ee3\u7801\u8fbe\u5230\u5cf0\u503c\u3002NLP.parse\u662f\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\n\u5728\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u4e2d\uff0c\u5b83\u53ef\u4ee5\u7531\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u7684\u5176\u4ed6\u62bd\u8c61\u7ec4\u6210\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8ff9\u8c61\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u9700\u8981\u505a\u66f4\u590d\u6742\u4e8b\u60c5\u7684\u60c5\u51b5\u4e0b\u91cd\u7528\u5e95\u5c42\u62bd\u8c61\u3002\u5c06\u5176\u4e0e\u3002\n\u8fd9\u611f\u89c9\u66f4\u5371\u9669\u3002\u5982\u679c\u8fd9\u4e9b\u6807\u5fd7\u90fd\u6307\u5411\u540c\u4e00\u4e2a\u51fd\u6570\uff0c\u5219\u8868\u660e\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u529f\u80fd\u4e00\u8d77\u5b8c\u6210\u3002\u540c\u6837\u4ee4\u4eba\u62c5\u5fe7\u7684\u662f\uff1a\u5982\u679c\u5176\u4e2d\u4e00\u9762\u65d7\u5e1c\u6ca1\u6709\u505a\u5230\u4f60\u60f3\u8981\u7684\u600e\u4e48\u529e\uff1f\u60a8\u53ef\u80fd\u5fc5\u987b\u5bf9\u62bd\u8c61\u8fdb\u884c\u5206\u53c9\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u7b2c\u4e09\u4e2a\u539f\u5219\uff1a\u4f1f\u5927\u7684\u62bd\u8c61\u662f\u900f\u660e\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u539f\u5219\u662f\u6700\u88ab\u5ffd\u89c6\u7684\u3002\u9884\u5148\u8d62\u5f97\u751f\u4ea7\u529b\u662f\u5f88\u5bb9\u6613\u7684\uff0c\u4f46\u662f\u5982\u679c\u60a8\u6dfb\u52a0\u7684\u62bd\u8c61\u4e0d\u80fd\u6539\u53d8\uff0c\u4e5f\u4e0d\u80fd\u5185\u7701\uff0c\u90a3\u4e48\u5b83\u5f88\u53ef\u80fd\u4f1a\u5728\u67d0\u4e2a\u65f6\u5019\u54ac\u4f4f\u60a8\u3002\n\u6700\u540e\u4e00\u4e2a\u539f\u5219\u4e0e\u540e\u4e09\u4e2a\u539f\u5219\u662f\u6b63\u4ea4\u7684\uff0c\u4f46\u5b83\u53ef\u80fd\u662f\u6700\u91cd\u8981\u7684\u3002\u54c8\u4ee3\u8bf4\uff0c\u4e11\u964b\u7684\u6570\u5b66\u5728\u4e16\u754c\u4e0a\u6ca1\u6709\u6c38\u4e45\u7684\u4f4d\u7f6e-\u62bd\u8c61\u4e5f\u662f\u5982\u6b64\u3002\u6570\u5b66\u4e4b\u7f8e\u4e0e\u89e3\u7684\u201c\u4e00\u822c\u201d\u548c\u201c\u4e25\u5bc6\u201d\u7a0b\u5ea6\u6709\u5173\u3002\u6211\u8ba4\u4e3a\u8fd9\u4e0e\u62bd\u8c61\u5f88\u76f8\u4f3c\u3002\n\u5982\u679c\u60a8\u4f7f\u7528\u201c\u672c\u8d28\u4e0a\u201d\u66f4\u7b80\u5355\u7684\u62bd\u8c61\uff0c\u5b83\u66f4\u6709\u53ef\u80fd\u6301\u4e45\uff0c\u800c\u4e14\u53ef\u80fd\u66f4\u5f3a\u5927\u3002\n\u8003\u8651\u4e00\u4e0bNLP\u7684\u62bd\u8c61\u662f\u5426\u7531\u7279\u5b9a\u7684\u7b97\u6cd5\u7ec4\u6210\uff0c\u4ec5\u7528\u4e8e\u81ea\u7136\u8bed\u8a00\u5904\u7406\u3002\u8fd9\u4ecd\u7136\u662f\u975e\u5e38\u6709\u4ef7\u503c\u7684\uff0c\u4f46\u662f\u66f4\u6709\u4ef7\u503c\u7684\u662f\uff0c\u5982\u679c\u8fd9\u4e2a\u5e93\u6240\u7ec4\u6210\u7684\u62bd\u8c61\u66f4\u901a\u7528\uff1a\u5982\u679c\u7ec4\u6210\u5b83\u7684\u90e8\u5206\u662f\u6df1\u5ea6\u5b66\u4e60\u62bd\u8c61\uff0c\u60a8\u53ef\u4ee5\u91cd\u7528\u5b83\u4eec\u6765\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u3002\n\u6211\u4eec\u5c31\u5230\u4e86\u5c3d\u5934\u3002\u6311\u9009\u4f1f\u5927\u7684\u62bd\u8c61\u6982\u5ff5\uff1a\u6311\u9009\u90a3\u4e9b\u80fd\u4e3a\u4f60\u89e3\u51b3\u590d\u6742\u95ee\u9898\u7684\u62bd\u8c61\u6982\u5ff5\u3002\u786e\u4fdd\u4ed6\u4eec\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u754c\u9762\uff0c\u5e76\u770b\u4e00\u770b\u5185\u90e8\u7ed3\u6784\uff0c\u8fd9\u6837\u4f60\u5c31\u6709\u4fe1\u5fc3\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u62fc\u51d1\u8d77\u6765\u3002\u5728\u76f8\u540c\u7684\u529f\u7387\u4e0b\uff0c\u4f60\u80fd\u5f97\u5230\u7684\u4e1c\u897f\u8d8a\u666e\u904d\u3001\u8d8a\u7b80\u5355\uff0c\u5c31\u8d8a\u597d\u3002\n\u60f3\u770b\u770b\u91ce\u5916\u7684\u4e00\u4e9b\u4f1f\u5927\u7684\u62bd\u8c61\u4f5c\u54c1\u5417\uff1f\u9996\u5148\uff0c\u60a8\u53ef\u80fd\u6b63\u5728\u4f7f\u7528\u5176\u4e2d\u7684\u8bb8\u591a\u529f\u80fd\uff1aTCP\u3001\u66f4\u9ad8\u7ea7\u522b\u7684\u51fd\u6570\uff0c\u5982map&amp\uff1bfilter\u3001REACTION\u3002\u6709\u4e9b\u60a8\u53ef\u80fd\u8fd8\u6ca1\u6709\u7814\u7a76\u8fc7\uff1aGo\u7684CSP\u3001Rich Hickey\u7684Datonomic\u6216\u4ed6\u5728Clojure\u4e2d\u7684\u5e8f\u5217\u62bd\u8c61\u3002\u5f53\u60a8\u5f00\u59cb\u5b66\u4e60\u62bd\u8c61\u6982\u5ff5\u65f6\uff0c\u6211\u9f13\u52b1\u60a8\u5c06\u6bcf\u4e2a\u62bd\u8c61\u6982\u5ff5\u4f5c\u4e3a\u4e00\u4e2a\u5b9e\u9a8c\u6765\u8fd0\u884c\uff1a\u5728\u7ed3\u675f\u65f6\u95ee\u95ee\u81ea\u5df1\u4e8b\u60c5\u8fdb\u5c55\u5982\u4f55\uff0c\u4e0e\u60a8\u7684\u670b\u53cb\u8ba8\u8bba\u5b83\u4eec\uff0c\u5f88\u5feb\u60a8\u5c31\u4f1a\u57f9\u517b\u51fa\u66f4\u52a0\u5fae\u5999\u7684\u54c1\u5473\u3002\n(1)\u5154\u5b50\u6d1e\u53d8\u6df1\u4e86\u3002\u5373\u4f7f\u62bd\u8c61\u89e3\u51b3\u4e86\u60a8\u7684\u590d\u6742\u95ee\u9898\uff0c\u60a8\u4e5f\u53ef\u80fd\u9700\u8981\u540e\u9000\u4e00\u6b65\uff0c\u5e76\u95ee\u4e00\u95ee\uff1a\u4e3a\u4ec0\u4e48\u6211\u4f1a\u6709\u8fd9\u4e2a\u95ee\u9898\uff1f\u4f8b\u5982\uff0cKubernetes\u53ef\u80fd\u662f\u6784\u5efa\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u4f1a\u6709\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u95ee\u9898\u5462\uff1f\u5f88\u591a\u65f6\u5019\uff0c\u95ee\u9898\u672c\u8eab\u662f\u53ef\u4ee5\u907f\u514d\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff0c\u201c\u9ed1\u5ba2\u5929\u5802\u201d\u8bd5\u56fe\u5bf9\u5176\u8fdb\u884c\u62a5\u9053\u3002\n\u611f\u8c22Alex Reichert\uff0cDaniel Woelfel\uff0cMartin Rison\uff0cSean Grove\u5ba1\u9605\u672c\u6587\u8349\u7a3f", "note_en": "Some abstractions are ticking time bombs, while others help you move fast. How can you tell? What follows is my personal exploration for how I assess abstractions.\n  We add abstractions in our programs to solve problems. So, let\u2019s start with the fundamental value proposition: what problem does our abstraction solve?\n   This could be a natural language processing abstraction, which lets us take a piece of text, and extract meaning from it. The inherent problem of natural language processing is pretty darn complex, so an abstraction that helps us solve it would be very valuable. This is a sign of a good abstraction.\n   Maybe this abstraction, adds a light layer on top of string.split. For example, it may make it so you don\u2019t have to worry about regexes, and can turn common string patterns into regexes. The value of a  StringSplitter abstraction is pretty darn low. Maybe  StringSplitter treats  splitStr in a way that\u2019s a bit more in-line with the someone\u2019s thinking, but at the end of the day this boils down to an indirection.\n This leads us to the first principle. The more complex the problem it solves for you, the better the abstraction (1).\n  After we\u2019re convinced that the abstraction we are about to add solves a tough problem for us, the next thing to consider is the interface:  how do we interact with the abstraction? Imagine if  NLP.parse was called like this:\n  This is a great interface. It\u2019s small. We don\u2019t need to understand any internals. For the main use-case, all we need to do is to provide language and text. Compare that with\n  In order to use this version, we\u2019d need to deeply understand the internals of NLP.parse. This lowers the value of the abstraction, because we need to do more work to solve the same level of complexity.\n   Now that we have an abstraction with a simple interface that solves a hard problem, we need to ask a possibly fatal question: what happens when we need to break through the abstraction?\n All abstractions are leaky at some point. What will happen when you need the abstraction to behave differently? What will happen when it doesn\u2019t work as you expect?\n For example, for  NLP.parse(lang, text), what if we needed to sort and score the results differently? What if there\u2019s a bug, and we aren\u2019t getting the entity we expect, can we look through and debug?\n Understanding the answer to this, will give us the breakthrough cost. To do this, we need to peak through the code. How is  NLP.parse implemented?\n  In one solution, it could be composed of other abstractions that we can take advantage of. This is a great sign, because we can reuse the underlying abstractions in cases where we need to do something more complicated. Compare that to\n  This feels more dangerous. If these flags all head to the same function, it\u2019s a sign that a bunch of different features are complected together. It\u2019s also worrying: what if one of these flags don\u2019t do what you want? you may have to fork the abstraction.\n This leads us to the third principle:  great abstractions are transparent. I think this principle is the most overlooked. It\u2019s easy to take the productivity win upfront, but if the abstraction you add can\u2019t be changed, and can\u2019t be introspected, it\u2019s very likely to bite you at some point.\n  The final principle is orthogonal to the last three, but maybe it\u2019s the most important. Hardy said  there is no permanent place in the world for ugly mathematics \u2014 So it is with abstractions. The beauty in math relates to how \u201cgeneral\u201d and \u201ctight\u201d the solution is. I think this parallels well with abstractions.\n If you use an abstraction that is \u201cessentially\u201d simpler, it\u2019s more likely to last, and it\u2019s likely to be more powerful.\n Consider if the abstraction for  NLP, was made up of specific algorithms,  just for natural language processing. This would still be very valuable, but what would be  even more valuable, is if the abstractions that this library was composed of was more general: if the parts that compose it were deep learning abstractions, you could reuse them for other problems.\n  And we reach the end. To pick great abstractions: pick the ones that solve a complex problem for you. Make sure they have a simple interface, and take a look at the internals, so you\u2019re confident you can jig things up if needed. The more general and simple you can get for the same amount of power, the better.\n Want to see some great abstractions in the wild? First, chances are you are using many of them: TCP, higher order functions like map &amp; filter, React. Some you may not have explored: Go\u2019s CSP, Rich Hickey\u2019s Datomic, or his  seq abstraction in Clojure. As you pick up abstractions, I encourage you to run each one as an experiment: ask yourself at the end how things went, discuss them with your friends, and soon you\u2019ll develop a much more nuanced taste.\n (1) The rabbit hole gets deeper. Even if an abstraction solves a complex problem you have, you may need to take a step back and also ask: why do I have this problem? For example, kubernetes may be a great solution to building distributed systems, but why do you have a distributed systems problem? Many times the problem itself can be avoided. For the answer to that,  Hacker\u2019s Paradise tries to covers it.\n Thanks to Alex Reichert, Daniel Woelfel, Martin Raison, Sean Grove for reviewing drafts of this essay", "posttime": "2020-07-21 12:15:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bc4\u4f30,assessing,\u62bd\u8c61", "title": "\u8bc4\u4f30\u62bd\u8c61", "title_en": "Assessing Abstractions", "transed": 1, "url": "https://stopa.io/post/245", "via": "", "real_tags": ["\u8bc4\u4f30", "assessing", "\u62bd\u8c61"]}, {"category": "", "categoryclass": "", "imagename": "b403a426a37b33e5e771aeba5b0d51b4.png", "infoid": 1013204, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u7bc7\u6587\u7ae0\u662f\u6211\u4e3a\u201c\u9ad8\u7ea7\u521d\u5b66\u8005\u201d\u7cfb\u5217\u6240\u505a\u7684\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002\u73b0\u5728\u5c31\u8ba2\u9605\uff0c\u6bcf\u9694\u4e00\u5468\u63a5\u6536\u4e00\u6b21\u5177\u4f53\u7684\u3001\u53ef\u884c\u7684\u65b9\u6cd5\uff0c\u8ba9\u60a8\u7684\u4ee3\u7801\u53d8\u5f97\u66f4\u5e72\u51c0\uff0c\u800c\u4e14\u662f\u5b8c\u5168\u514d\u8d39\u7684\u3002\n\u4f60\u548c\u4f60\u7684\u597d\u670b\u53cb\u53f2\u8482\u592b\u00b7\u53f2\u8482\u6587\u987f\u53c8\u5f00\u4e86\u4e00\u5bb6\u516c\u53f8\u3002\u8fd9\u662f\u4e00\u4e2a\u5728\u7ebf\u5e02\u573a\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u4e70\u5356\u4e1c\u897f\uff0c\u6ca1\u6709\u4eba\u4f1a\u95ee\u592a\u591a\u95ee\u9898\u3002\u8fd9\u57fa\u672c\u4e0a\u662f\u5bf9Craigslist\u7684\u6284\u88ad\uff0c\u4f46\u7528\u7684\u662f\u53f2\u8482\u592b\u7684\u540d\u5b57\uff0c\u800c\u4e0d\u662f\u514b\u96f7\u683c\u7684\u540d\u5b57\u3002\n\u60a8\u5c06\u8d1f\u8d23\u6784\u5efa\u6574\u4e2aSteveslist\u6280\u672f\u5e73\u53f0\uff0c\u5305\u62ec\u5176\u6240\u6709\u7f51\u7ad9\u3001\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u3001\u6570\u636e\u5e93\u548c\u5176\u4ed6\u57fa\u7840\u8bbe\u65bd\u3002\u4f60\u5f88\u5174\u594b\uff0c\u4f46\u4e5f\u5f88\u7d27\u5f20\u3002\u4f60\u8ba4\u4e3a\u4f60\u53ef\u80fd\u4f1a\u62fc\u51d1\u51fa\u4e00\u4e2a\u5c0f\u7f51\u7ad9\uff0c\u56e0\u4e3a\u4f60\u4e4b\u524d\u5df2\u7ecf\u8fd9\u6837\u505a\u8fc7\u51e0\u6b21\u4e86\uff0c\u8fd9\u662f\u4f60\u4e4b\u524d\u4e0eStevester\u8fdb\u884c\u7684\u5a31\u4e50-\u5982\u679c\u662f\u9053\u5fb7\u4e0a\u7684-\u6709\u95ee\u9898\u7684\u8d8a\u8f68\u884c\u4e3a\u7684\u4e00\u90e8\u5206\u3002\u4f46\u4f60\u751a\u81f3\u4e0d\u77e5\u9053\u5982\u4f55\u5f00\u59cb\u5efa\u8bbe\u4f60\u8ba4\u4e3a\u9690\u85cf\u5728\u5927\u578b\u6210\u529f\u5728\u7ebf\u5e73\u53f0\u80cc\u540e\u7684\u6240\u6709\u5176\u4ed6\u57fa\u7840\u8bbe\u65bd\u548c\u5de5\u5177\u3002\n\u4f60\u8feb\u5207\u9700\u8981\u4e00\u4e2a\u8be6\u7ec6\u800c\u7b80\u660e\u7684\u6982\u8ff0\uff0c\u4e86\u89e3\u771f\u6b63\u7684\u516c\u53f8\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\u4ed6\u4eec\u5982\u4f55\u5b58\u50a8\u6570\u636e\uff1f\u5b83\u4eec\u7684\u4e0d\u540c\u5e94\u7528\u7a0b\u5e8f\u5982\u4f55\u76f8\u4e92\u901a\u4fe1\uff1f\u4ed6\u4eec\u5982\u4f55\u6269\u5c55\u5176\u7cfb\u7edf\u4ee5\u6ee1\u8db3\u6570\u767e\u4e07\u7528\u6237\u7684\u9700\u6c42\uff1f\u4ed6\u4eec\u5982\u4f55\u4fdd\u8bc1\u4ed6\u4eec\u7684\u5b89\u5168\u5462\uff1f\u4ed6\u4eec\u5982\u4f55\u786e\u4fdd\u4e0d\u51fa\u4efb\u4f55\u5dee\u9519\uff1f\u4ec0\u4e48\u662fAPI\u3001WebHook\u548c\u5ba2\u6237\u7aef\u5e93\uff0c\u5f53\u60a8\u771f\u6b63\u5f00\u59cb\u8ba8\u8bba\u5b83\u4eec\u7684\u65f6\u5019\uff1f\n\u4f60\u5feb\u901f\u53d1\u9001\u4e00\u4e2aWhatsApp\u7ed9\u4f60\u7684\u53e6\u4e00\u4e2a\u597d\u670b\u53cb\u51ef\u7279\u00b7\u51ef\u7279\u4f2f\u91cc(Kate Kateberry)\uff0c\u770b\u770b\u5979\u662f\u5426\u80fd\u5e2e\u4e0a\u5fd9\u3002\u4f60\u4eec\u8fc7\u53bb\u7684\u5408\u4f5c\u975e\u5e38\u6709\u6548\uff0c\u5979\u6709\u51e0\u5341\u5e74\u5728\u7845\u8c37\u6700\u5927\u3001\u6700\u6709\u4e89\u8bae\u7684\u516c\u53f8\u521b\u5efa\u8fd9\u4e9b\u7c7b\u578b\u7684\u7cfb\u7edf\u7684\u7ecf\u9a8c\u3002\n\u5979\u7acb\u5373\u63a5\u53d7\u4e86\u4f60\u7684\u5de5\u4f5c\u9080\u8bf7\u3002\u5b9e\u9645\u4e0a\uff0c\u4f60\u53ea\u662f\u6253\u7535\u8bdd\u5bfb\u6c42\u4e00\u4e9b\u7c97\u7565\u7684\u6307\u5bfc\u548c\u4e00\u4e9b\u597d\u7684\u516b\u5366\uff0c\u4f46\u4f60\u4ecd\u7136\u7acb\u5373\u63a5\u53d7\u4e86\u5979\u7684\u63a5\u53d7\u3002\u5373\u4f7f\u4f60\u6ca1\u6709\u94b1\u4ed8\u94b1\u7ed9\u5979\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\u5bf9\u5979\u5439\u6bdb\u6c42\u75b5\u3002\u51ef\u7279\u5efa\u8bae\u5979\u7684\u7b2c\u4e00\u5929\u662f5\u5468\u524d\uff0c\u4ee5\u5e2e\u52a9\u5979\u5e73\u606f\u4e00\u4e9b\u4f1a\u8ba1\u8fdd\u89c4\u884c\u4e3a\u3002\u5979\u53ef\u4ee5\u5728\u4e0b\u5468\u7684\u67d0\u4e2a\u65f6\u5019\u6765\u529e\u516c\u5ba4\u3002\u5979\u7684\u70ed\u60c5\u8ba9\u4f60\u611f\u5230\u9f13\u821e\u548c\u5a01\u80c1\u3002\n\u51ef\u7279\u8e66\u8e66\u8df3\u8df3\u5730\u8d70\u8fdb\u4f60\u5728\u65e7\u91d1\u5c71\u516c\u5171\u56fe\u4e66\u998619\u4e16\u7eaa\u6587\u5b66\u533a\u7684\u529e\u516c\u5ba4\u3002\u201c\u597d\u7684\uff0c\u6211\u4eec\u5f00\u59cb\u5427\uff01\u201d\u5979\u8f7b\u58f0\u558a\u9053\u3002\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u6709\u4ec0\u4e48\u8fdb\u5c55\uff1f\u6211\u4eec\u6240\u6709\u7684\u7cfb\u7edf\u662f\u5982\u4f55\u8bbe\u7f6e\u7684\uff1f\u6709\u4ec0\u4e48\u8ba1\u5212\uff1f\u201c\u3002\u4f60\u5411\u540e\u9760\u5728\u6905\u5b50\u4e0a\uff0c\u5408\u4e0a\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u56e0\u4e3a\u4f60\u628a\u5145\u7535\u5668\u5fd8\u5728\u5bb6\u91cc\u4e86\uff0c\u7b14\u8bb0\u672c\u7535\u8111\u6ca1\u6709\u5f00\u673a\u3002\u4f60\u7528\u4e00\u79cd\u4f60\u5e0c\u671b\u53ef\u4ee5\u88ab\u63cf\u8ff0\u4e3a\u201c\u6df1\u601d\u719f\u8651\u201d\u7684\u65b9\u5f0f\u7ad6\u8d77\u4f60\u7684\u624b\u6307\u3002\n\u201c\u8ba9\u6211\u628a\u8fd9\u4e2a\u95ee\u9898\u53cd\u9a73\u4e00\u4e0b\uff0c\u51ef\u7279\u3002\u4f60\u8ba4\u4e3a\u8fd9\u4e2a\u8ba1\u5212\u5e94\u8be5\u662f\u4ec0\u4e48\uff1f\u201c\n\u51ef\u7279\u6df1\u5438\u4e86\u4e00\u53e3\u6c14\uff0c\u63cf\u7ed8\u4e86\u5bf9Steveslist\u5e73\u53f0\u672a\u6765\u4e94\u5e74\u7684\u6781\u5176\u8be6\u7ec6\u7684\u613f\u666f\uff0c\u4ee5\u53ca\u5c06\u4e3a\u5176\u63d0\u4f9b\u52a8\u529b\u7684\u57fa\u7840\u8bbe\u65bd\u3002\n\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d(\u51ef\u7279\u8bf4)\uff0c\u6211\u60f3\u8bf4\u6e05\u695a\uff0c\u6211\u5e76\u4e0d\u662f\u8bf4\u8fd9\u4e00\u5207\u90fd\u4e00\u5b9a\u662f\u5efa\u7acb\u6211\u4eec\u57fa\u7840\u8bbe\u65bd\u7684\u201c\u6b63\u786e\u201d\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u6bd4\u6211\u66f4\u4fe1\u4efb\u7684\u4eba\u8bf4\u4e86\u4e00\u4e9b\u4e0d\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u5e94\u8be5\u7167\u4ed6\u4eec\u8bf4\u7684\u505a\u3002\u5e02\u573a\u4e0a\u6709\u5f88\u591a\u5de5\u5177\uff0c\u6bcf\u4e2a\u5de5\u5177\u90fd\u6709\u4e0d\u540c\u7684\u4f18\u70b9\u548c\u7f3a\u70b9\uff0c\u4e5f\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u5efa\u7acb\u4e00\u5bb6\u6280\u672f\u516c\u53f8\u3002\u6211\u4eec\u5c06\u505a\u51fa\u8bb8\u591a\u6280\u672f\u9009\u62e9\u7684\u771f\u5b9e\u3001\u8bda\u5b9e\u7684\u539f\u56e0\u5c06\u662f\u201c\u6211\u4eec\u9009\u62e9X\u662f\u56e0\u4e3aSara\u5bf9X\u4e86\u89e3\u5f88\u591a\u201d\uff0c\u4ee5\u53ca\u201c\u6211\u4eec\u9009\u62e9Y\u662f\u51fa\u4e8e\u4e00\u65f6\u7684\u51b2\u52a8\uff0c\u5f53\u65f6\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u4e00\u4e2a\u91cd\u5927\u51b3\u5b9a\uff0c\u6211\u4eec\u4ece\u672a\u627e\u5230\u65f6\u95f4\u91cd\u65b0\u8bc4\u4f30\u3002\u201d\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u8ba9\u6211\u4eec\u5feb\u8fdb\u5230\u672a\u6765\u7684\u4e94\u5e74\u3002\u73b0\u5728\uff0cSteveslist\u6709\u4e24\u4e2a\u4e3b\u8981\u9762\u5411\u6d88\u8d39\u8005\u7684\u4ea7\u54c1\uff1a\n\u8fd9\u4e9b\u662f\u7528\u6237\u4e0eSteveslist\u5e73\u53f0\u76f4\u63a5\u4ea4\u4e92\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u6b64\u5916\uff0c\u6211\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2aAPI\uff0c\u5141\u8bb8\u7a0b\u5e8f\u5458\u5728Steveslist\u5e73\u53f0\u4e0a\u6784\u5efa\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u4f8b\u5982\uff0c\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u521b\u5efa\u6570\u767e\u4e2a\u9879\u76ee\u7684\u6e05\u5355\u3002\u4e3a\u652f\u6301\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u63d0\u4f9b\uff1a\nSteveslist API\u5ba2\u6237\u7aef\u5e93\uff0c\u4f7f\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8f7b\u677e\u7f16\u5199\u4e0e\u6211\u4eec\u7684API\u5bf9\u8bdd\u7684\u4ee3\u7801\u3002\n+-+|Web\u6d4f\u89c8\u5668||\u667a\u80fd\u624b\u673a\u5e94\u7528||\u5ba2\u6237\u7aef\u5e93/|+-+-+|\u5176\u4ed6API\u4ee3\u7801|+-+|v|\u3002-+|+-&gt\uff1b+Steveslist+&lt\uff1b-+|\u670d\u52a1\u5668|+-+\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u6709\u8bb8\u8bb8\u591a\u591a\u7684\u670d\u52a1\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u4e3a\u8fd9\u4e9b\u9762\u5411\u5916\u90e8\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\u548c\u529f\u80fd\uff1a\nWebHooks-\u5f53\u7528\u6237\u7684\u5e10\u6237\u51fa\u73b0\u95ee\u9898\u65f6\u901a\u77e5\u7528\u6237\uff0c\u4f8b\u5982\u201c\u5df2\u4e0b\u8ba2\u5355\u201d\nSQL\u6570\u636e\u5e93-\u4e3bSteveslist\u6570\u636e\u5b58\u50a8\u3002\u9700\u8981\u9ad8\u5ea6\u53ef\u6269\u5c55\u548c\u53ef\u9760\u3002\n\u81ea\u7531\u6587\u672c\u641c\u7d22\u7cfb\u7edf-\u652f\u6301\u641c\u7d22\u6846\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u5176\u4e2d\u67e5\u627e\u5e7f\u6cdb\u7684\u641c\u7d22\u8bcd\uff0c\u5982\u201c\u7535\u89c6\u201d\u6216\u201c\u6469\u6258\u8f66\u201d\n\u5185\u90e8\u5de5\u5177-\u5e2e\u52a9\u6211\u4eec\u7ba1\u7406Steveslist\u5e73\u53f0\uff0c\u5e76\u91c7\u53d6\u884c\u52a8\uff0c\u5982\u5411\u6076\u610f\u7528\u6237\u53d1\u51fa\u63aa\u8f9e\u4e25\u5389\u7684\u8b66\u544a\u3002\nCron\u4f5c\u4e1a-\u8fd0\u884c\u5e38\u89c4\u4efb\u52a1\uff0c\u4ece\u751f\u6210\u53d1\u7968\u5230\u5411\u5ba2\u6237\u5f00\u5177\u8d26\u5355\uff0c\u518d\u5230\u5c06\u5c3d\u53ef\u80fd\u591a\u7684\u7528\u6237\u6570\u636e\u53d1\u9001\u5230\u7b2c\u4e09\u65b9\u5e7f\u544a\u7f51\u7edc\u3002\n\u201cPubsub\u201d\u7cfb\u7edf-\u5141\u8bb8\u6211\u4eec\u5bf9\u4e0d\u540c\u7684\u89e6\u53d1\u4e8b\u4ef6\u91c7\u53d6\u5f02\u6b65\u64cd\u4f5c(\u4f8b\u5982\u201c\u5f53\u65b0\u7528\u6237\u6ce8\u518c\u65f6\uff0c\u5411\u4ed6\u4eec\u53d1\u9001\u6b22\u8fce\u7535\u5b50\u90ae\u4ef6\u201d)\u3002\n\u5927\u6570\u636e\u5206\u6790\u7cfb\u7edf-\u5141\u8bb8\u6211\u4eec\u5bf9Steveslist\u7684\u5168\u90e8\u6570\u636e\u8fd0\u884c\u5927\u91cf\u67e5\u8be2\u3002\n\u8ba9\u6211\u4eec\u4f9d\u6b21\u68c0\u67e5\u4e00\u4e0b\u8fd9\u4e9b\u7cfb\u7edf\u3002\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u6e05\u695a\u7684\u5730\u65b9\uff0c\u5982\u679c\u4f60\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u6216\u8005\u5982\u679c\u4f60\u8ba4\u4e3a\u6211\u641e\u9519\u4e86\uff0c\u8bf7\u544a\u8bc9\u6211\u3002\n\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e9b\u91cd\u8981\u7684\u672f\u8bed\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8ba9\u6211\u4eec\u53ea\u5b9a\u4e49\u4e00\u4e2a\u3002\u4eca\u5929\u6211\u4eec\u5c06\u8c08\u8bba\u5f88\u591a\u5173\u4e8e\u201c\u670d\u52a1\u5668\u201d\u7684\u8bdd\u9898\u3002\u4f46\u662f\uff0c\u5f53\u60a8\u771f\u6b63\u6df1\u5165\u5230\u670d\u52a1\u5668\u65f6\uff0c\u4ec0\u4e48\u662f\u670d\u52a1\u5668\u5462\uff1f\n\u5c31\u6211\u4eec\u7684\u76ee\u7684\u800c\u8a00\uff0c\u670d\u52a1\u5668\u662f\u6307\u5728\u7f51\u7edc\u4e0a\u8fd0\u884c\u5e76\u4fa6\u542c\u6765\u81ea\u5176\u4ed6\u8ba1\u7b97\u673a\u7684\u901a\u4fe1\u7684\u8ba1\u7b97\u673a\u3002\u5f53\u5b83\u4ece\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u63a5\u6536\u5230\u4e00\u4e9b\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u6267\u884c\u67d0\u79cd\u54cd\u5e94\u64cd\u4f5c\uff0c\u5e76\u4e14\u901a\u5e38\u4f1a\u53d1\u56de\u81ea\u5df1\u7684\u4e00\u4e9b\u6570\u636e\u3002\u4f8b\u5982\uff0cWeb\u670d\u52a1\u5668\u5728\u7f51\u7edc\u4e0a\u4fa6\u542cHTTP\u8bf7\u6c42\u5e76\u53d1\u56de\u7f51\u9875\u548c\u4fe1\u606f\u4f5c\u4e3a\u54cd\u5e94\u3002\u6570\u636e\u5e93\u670d\u52a1\u5668\u4fa6\u542c\u6570\u636e\u5e93\u67e5\u8be2\uff0c\u5e76\u5c06\u6570\u636e\u8bfb\u5199\u5230\u5b83\u6b63\u5728\u8fd0\u884c\u7684\u6570\u636e\u5e93\u3002\n\u8fd9\u4e2a\u7b80\u77ed\u7684\u63cf\u8ff0\u5ffd\u7565\u4e86\u6574\u4e2a\u5b66\u4f4d\u548c\u804c\u4e1a\u7684\u7ec6\u8282\uff0c\u5f53\u7136\u8fd8\u6709\u66f4\u7cbe\u786e\u548c\u51c6\u786e\u7684\u65b9\u5f0f\u6765\u5b9a\u4e49\u201c\u670d\u52a1\u5668\u201d\u8fd9\u4e2a\u8bcd\u3002\u4f46\u8fd9\u5e94\u8be5\u80fd\u8ba9\u6211\u4eec\u6491\u5230\u665a\u9910\u65f6\u95f4\u3002\u60a8\u8bf4\u4ec0\u4e48\uff1f\u4ec0\u4e48\u662f\u201c\u7f51\u7edc\u201d\uff1f\u8fd9\u662f\u4e00\u4e2a\u6539\u5929\u518d\u95ee\u7684\u597d\u95ee\u9898\u3002\n\u8fd9\u662fSteveslist\u7684\u4e3b\u8981\u4ea7\u54c1\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e0e\u4f60\u4ee5\u524d\u521b\u5efa\u7684\u4efb\u4f55\u7f51\u7ad9\u975e\u5e38\u76f8\u4f3c\uff0c\u53ea\u662f\u8981\u5927\u5f97\u591a\u3002\u8fd9\u662f\u4e00\u6b3e\u73b0\u4ee3\u5316\u7684\u201c\u5355\u9875\u5e94\u7528\u7a0b\u5e8f\u201d(SPA)\u3002\u201c\u5355\u9875\u5e94\u7528\u201d\u4e2d\u7684\u201c\u5355\u9875\u201d\u6307\u7684\u662f\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5f53\u7528\u6237\u5728\u6211\u4eec\u7684\u7ad9\u70b9\u5468\u56f4\u70b9\u51fb\u65f6\uff0c\u7528\u6237\u7684\u6d4f\u89c8\u5668\u51e0\u4e4e\u4ece\u4e0d\u9700\u8981\u5b8c\u5168\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\u3002\u76f8\u53cd\uff0c\u5f53\u6d4f\u89c8\u5668\u5411\u6211\u4eec\u7684\u670d\u52a1\u5668\u53d1\u51fa\u5b83\u7684\u7b2c\u4e00\u4e2aHTTP\u8bf7\u6c42\u65f6\uff0c\u6211\u4eec\u5411\u5b83\u53d1\u56de\u4e00\u4e2a\u57fa\u672c\u7684\u6846\u67b6HTML\u9875\u9762\u548c\u4e00\u5927\u5806JavaScript\u4ee3\u7801\u3002\u6b64JavaScript\u4ee3\u7801\u5728\u6d4f\u89c8\u5668\u5185\u6267\u884c\uff0c\u5e76\u6839\u636e\u7528\u6237\u7684\u64cd\u4f5c\u66f4\u65b0\u9875\u9762\u89c6\u56fe\u3002\u5f53JavaScript\u60f3\u8981\u4eceSteveslist\u53d1\u9001\u6216\u68c0\u7d22\u6570\u636e\u65f6\uff0c\u5b83\u4f1a\u5728\u540e\u53f0\u5411URL\u53d1\u9001\u5f02\u6b65JavaScript XML\u8bf7\u6c42(\u51e0\u4e4e\u603b\u662f\u7b80\u79f0\u4e3aAjax)\u3002\u5f53\u6211\u4eec\u7684\u670d\u52a1\u5668\u54cd\u5e94\u65f6\uff0cJavaScript\u4f7f\u7528\u54cd\u5e94\u76f8\u5e94\u5730\u66f4\u65b0\u6d4f\u89c8\u5668\u89c6\u56fe\u3002\n+-+1.\u7528\u6237\u7684\u6d4f\u89c8\u5668\u8bbf\u95eesteveslist.com\u3002+-+||\u5b83\u5c06HTTP\u8bf7\u6c42\u53d1\u9001\u5230|Steveslist\u670d\u52a1\u5668|+-&gt\uff1b|User&#39\uff1b\u7684Web||Steveslist||Browser|2.Steveslist\u670d\u52a1\u5668\u4ee5|Servers|\u9aa8\u67b6HTML\u9875\u9762\u54cd\u5e94\uff0c\u8be5\u9875\u9762\u6307\u793a|\u3002|&lt\uff1b-+|3.\u7528\u6237\u7684\u6d4f\u89c8\u5668\u8bf7\u6c42\u5e76\u4ece|Steveslist\u670d\u52a1\u5668\u63a5\u6536|\u8fd9\u4e9bJavaScript\u6587\u4ef6\u3002||+-&gt\uff1b|&lt\uff1b-+|4.\u7528\u6237\u6d4f\u89c8\u5668\u6267\u884cJavaScript|\u4ee3\u7801\u3002\u4ee3\u7801\u5411Stevelist|\u670d\u52a1\u5668|\u53d1\u9001\u5bf9|\u7528\u6237\u6570\u636e\u7684\u66f4\u591a\u8bf7\u6c42\uff0c\u5e76\u66f4\u65b0\u6d4f\u89c8\u5668UI\u4ee5|\u663e\u793a\u8be5\u6570\u636e\u3002||+-&gt\uff1b|&lt\uff1b-++-+\u3002\nRobertheaton.com\u4e0d\u662f\u4e00\u4e2a\u5355\u9875\u9762\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u65e0\u8bba\u4f55\u65f6\u70b9\u51fb\u94fe\u63a5\uff0c\u6d4f\u89c8\u5668\u90fd\u5fc5\u987b\u91cd\u65b0\u52a0\u8f7d\u6574\u4e2a\u9875\u9762\u3002Twitter.com\u662f\u4e00\u6b3e\u5355\u9875\u9762\u5e94\u7528\u7a0b\u5e8f\u3002\u53ea\u8981\u4f60\u70b9\u51fb\u4e00\u4e2a\u94fe\u63a5\uff0c\u6d4f\u89c8\u5668\u5c31\u4f1a\u52a8\u6001\u66f4\u65b0\u9875\u9762\u7684\u4e00\u5c0f\u90e8\u5206\uff0c\u800c\u4e0d\u4f1a\u5f3a\u5236\u5b8c\u5168\u5237\u65b0\u3002\n\u6c34\u7597\u4e2d\u5fc3\u7684\u5efa\u9020\u548c\u7ef4\u62a4\u5de5\u4f5c\u91cf\u5f88\u5927\uff0c\u4f46\u5b83\u4eec\u770b\u8d77\u6765\u786e\u5b9e\u4e0d\u9519\u3002\n\u6211\u4eec\u63d0\u4f9b\u9002\u7528\u4e8eiOS\u548cAndroid\u7684Steveslist\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u4eec\u5728\u6982\u5ff5\u4e0a\u4e0e\u6211\u4eec\u7684\u5355\u9875\u9762Web\u5e94\u7528\u7a0b\u5e8f\u975e\u5e38\u76f8\u4f3c\u3002\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u548c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u5411\u6211\u4eec\u7684\u670d\u52a1\u5668\u53d1\u51faHTTP\u8bf7\u6c42\u3002\u7136\u540e\uff0c\u6211\u4eec\u7684\u670d\u52a1\u5668\u63a5\u6536\u8fd9\u4e9b\u8bf7\u6c42\uff0c\u6267\u884c\u4e00\u4e9b\u5de5\u4f5c\u5e76\u8fd4\u56deHTTP\u54cd\u5e94\u3002\u6700\u540e\uff0c\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u548c\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u66f4\u65b0\u5b83\u4eec\u7684\u663e\u793a\uff0c\u4ee5\u4fbf\u4e0e\u7528\u6237\u8fdb\u884c\u4ea4\u6d41\u3002\n\u7531\u4e8e\u6211\u4eec\u7684\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u6267\u884c\u7684\u64cd\u4f5c\u4e0eWeb\u5e94\u7528\u7a0b\u5e8f\u76f8\u540c(\u4f8b\u5982\uff0c\u521b\u5efa\u5217\u8868\u3001\u53d1\u9001\u6d88\u606f\u7b49)\uff0c\u56e0\u6b64\u5b83\u4eec\u901a\u5e38\u751a\u81f3\u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u4e0eWeb\u5e94\u7528\u7a0b\u5e8f\u5b8c\u5168\u76f8\u540c\u7684URL\u3002\u6211\u4eec\u552f\u4e00\u9700\u8981\u505a\u7684\u989d\u5916\u5de5\u4f5c\u5c31\u662f\u5f00\u53d1\u5e94\u7528\u7a0b\u5e8f\u672c\u8eab\u7684\u524d\u7aef\u3002\u4e00\u4e9b\u6846\u67b6\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528JavaScript\u7f16\u5199\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ece\u800c\u5141\u8bb8\u60a8\u8de8\u5e73\u53f0\u91cd\u7528\u4ee3\u7801\u548c\u903b\u8f91\u3002\n\u6211\u4eec\u5141\u8bb8\u7528\u6237\u548c\u7b2c\u4e09\u65b9\u7f16\u5199\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4e0e\u6211\u4eec\u7684\u5e73\u53f0\u4ea4\u4e92\u7684\u4ee3\u7801\u3002\u5c31\u50cf\u4eba\u4eec\u53ef\u4ee5\u4f7f\u7528Twitter API\u7f16\u5199\u4ee3\u7801\u6765\u9605\u8bfb\u3001\u70b9\u8d5e\u548c\u521b\u5efaTwets\u4e00\u6837\uff0c\u6211\u4eec\u5141\u8bb8\u4ed6\u4eec\u4f7f\u7528Steveslist API\u6765\u641c\u7d22\u3001\u8d2d\u4e70\u548c\u5217\u8868\u9879\u3002\n\u7a0b\u5e8f\u5458\u901a\u8fc7\u7f16\u5199\u5411API\u7aef\u70b9\u53d1\u51faHTTP\u8bf7\u6c42\u7684\u4ee3\u7801\u6765\u4f7f\u7528\u6211\u4eec\u7684API\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u68c0\u7d22\u6240\u6709\u5217\u8868\uff0c\u7a0b\u5e8f\u5458\u5411api.steveslist.com/v1/listings\u53d1\u9001HTTP GET\u8bf7\u6c42\u3002\u6211\u4eec\u7528\u4ed6\u4eec\u8bf7\u6c42\u7684\u6570\u636e\u8fdb\u884c\u54cd\u5e94\uff0c\u6570\u636e\u683c\u5f0f\u4e3aJSON\u3002JSON\u4ee3\u8868JavaScript\u5bf9\u8c61\u8868\u793a\u6cd5\uff0c\u4f46\u662fJSON\u4e0d\u662f\u7279\u5b9a\u4e8eJavaScript\u7684\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u88ab\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u89e3\u91ca\u3002\u5bf9\u68c0\u7d22\u7528\u6237\u6240\u6709\u6e05\u5355\u7684\u8bf7\u6c42\u7684JSON\u54cd\u5e94\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n{&#34\uff1bListings&#34\uff1b\uff1a[{&#34\uff1bid&#34\uff1b\uff1a2178123867\uff0c&#34\uff1b\u59d3\u540d&#34\uff1b\uff1a&#34\uff1b\u88ab\u76d7\u7535\u89c6&#34\uff1b\uff0c&#34\uff1b\u56fd\u5bb6&#34\uff1b\uff1a&#34\uff1b\u7f8e\u56fd&#34\uff1b\uff0c&#34\uff1b\u57ce\u5e02&#34\uff1b\uff1a&#34\uff1b\u65e7\u91d1\u5c71&#34\uff1b\uff0c&#34\uff1bPRICE_AMOUNT&#34\uff1b\uff1a1,000\uff0c&34\uff1bPrice_Currency&#34\uff1b\uff1a&#34\uff1bUSD&#34\uff1b\uff0c#Et...}\uff0c{&#34\uff1bid&#34\uff1b\uff1a182312679\uff0c&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u88ab\u76d7\u81ea\u884c\u8f66&#34\uff1b\uff0c&#34\uff1b\u56fd\u5bb6&#34\uff1b\uff1a&#34\uff1b\u7f8e\u56fd&#34\uff1b\uff0c&#34\uff1b\u57ce\u5e02&#34\uff1b\uff1a&#34\uff1b\u65e7\u91d1\u5c71&#34\uff1b\uff0c&#34\uff1bPrice_Amount&#34\uff1b\uff1a2000\uff0c&#34\uff1bPrice_Currency&#34\uff1b\uff1a&#34\uff1bUSD&#34\uff1b\uff0c#etc...}]}\u3002\n\u8fd9\u79cd\u7ed3\u6784\u5316\u54cd\u5e94\u683c\u5f0f\u5bf9\u4e8e\u7a0b\u5e8f\u6765\u8bf4\u975e\u5e38\u5bb9\u6613\u89e3\u6790\uff0c\u8fd9\u610f\u5473\u7740\u53d1\u51fa\u8bf7\u6c42\u7684\u4ee3\u7801\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u89e3\u91ca\u548c\u4f7f\u7528\u6211\u4eecAPI\u4e2d\u7684\u6570\u636e\u3002\n\u7528\u6237\u4f7f\u7528API\u5bc6\u94a5\u5411\u6211\u4eec\u7684API\u6807\u8bc6\u6216\u9a8c\u8bc1\u81ea\u5df1\u3002\u7c97\u7565\u5730\u8bf4\uff0c\u8fd9\u76f8\u5f53\u4e8eAPI\u7684\u5bc6\u7801\u3002\u5b83\u662f\u6211\u4eec\u751f\u6210\u5e76\u663e\u793a\u5728\u7528\u6237\u7684\u201c\u8bbe\u7f6e\u201d\u9875\u9762\u4e0a\u7684\u4e00\u4e2a\u957f\u7684\u968f\u673a\u5b57\u7b26\u4e32\u3002\u7528\u6237\u5c06\u5176API\u5bc6\u94a5\u4f5c\u4e3aHTTP\u5934\u5305\u542b\u5728\u4ed6\u4eec(\u6216\u5176\u4ee3\u7801)\u5411API\u53d1\u51fa\u7684\u6bcf\u4e2aHTTP\u8bf7\u6c42\u4e2d\u3002\u5f53\u6211\u4eec\u6536\u5230API\u8bf7\u6c42\u65f6\uff0c\u6211\u4eec\u68c0\u67e5\u9644\u52a0\u7684API\u5bc6\u94a5\u662f\u5426\u5bf9\u5e94\u4e8eSteveslist\u7528\u6237\u3002\u5982\u679c\u662f\uff0c\u5219\u6211\u4eec\u4ee3\u8868\u8be5\u7528\u6237\u6267\u884c\u8bf7\u6c42\u3002\n\u5982\u679c\u7a0b\u5e8f\u5458\u613f\u610f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u8bed\u8a00\u7684\u6807\u51c6HTTP\u5e93\u624b\u52a8\u6784\u5efa\u5bf9\u6211\u4eecAPI\u7684HTTP\u8bf7\u6c42\u3002\u4f8b\u5982\uff0c\u5728Python\u4e2d\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5199\u9053\uff1a\n\u5bfc\u5165\u8bf7\u6c42URL=&#39\uff1bhttps://api.steveslist.com/v1/listings/&#39\uff1b\u5217\u8868\u53c2\u6570={&#34\uff1b\u540d\u79f0&#34\uff1b\uff1a&#34\uff1b\u88ab\u76d7\u7535\u89c6&#34\uff1b\uff0c&#34\uff1b\u56fd\u5bb6&#34\uff1b\uff1a&#34\uff1b\u7f8e\u56fd&#34\uff1b\uff0c&#34\uff1b\u57ce\u5e02&#34\uff1b\uff1a&#34\uff1b\u65e7\u91d1\u5c71&#34\uff1b\uff0c&#34\uff1b\u4ef7\u683c_\u91d1\u989d&#34\uff1b\uff1a1,000\uff0c&#34\uff1bPrice_Currency&#34\uff1b\uff1a&#34\uff1bUSD&#34\uff1b\uff0c}API_KEY=&#34\uff1bYOUR_API_KEY_GOES_HERE&#34\uff1bRESPONSE=REQUESTS\u3002POST(url\uff0cdata=Listing_params\uff0cHeaders={&#34\uff1bX-Steveslist-api-key&#34\uff1b\uff1aapi_key}\uff0c)\u3002\n\u5ba2\u6237\u7aef\u5e93\u662f\u201c\u5305\u88c5\u201dSteveslist API\u529f\u80fd\u7684\u5e93\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u5ba2\u6237\u7aef\u5e93\u7684\u4efb\u4f55\u4eba\u90fd\u4e0d\u9700\u8981\u4e86\u89e3\u6709\u5173Steveslist API\u7684\u4efb\u4f55\u7ec6\u8282\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u4ed6\u4eec\u53ef\u4ee5\u53ea\u5199\uff1a\n\u6211\u4eec\u7684\u5e93\u5c06\u5b83\u4eec\u63d0\u4f9b\u7684\u53c2\u6570\u8f6c\u6362\u4e3a\u9002\u5f53\u683c\u5f0f\u5316\u7684HTTP\u8bf7\u6c42\uff0c\u5b83\u4eec\u7167\u5e38\u53d1\u9001\u5230Steveslist API\u3002\u6211\u4eec\u5df2\u7ecf\u4e3a\u6211\u4eec\u80fd\u60f3\u5230\u7684\u6bcf\u4e00\u79cd\u4e3b\u8981\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u4e86\u5ba2\u6237\u7aef\u5e93\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u4eec\u662f\u4eba\u4eec\u4e0e\u6211\u4eec\u7684API\u4ea4\u4e92\u7684\u6700\u5e38\u89c1\u65b9\u5f0f\u3002\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86Steveslist\u7528\u6237\u5982\u4f55\u4f7f\u7528\u6211\u4eec\u7684API\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u4e0e\u4ed6\u4eec\u7684\u5e10\u6237\u4ea4\u4e92\u3002\u6b64\u5916\uff0c\u8bb8\u591a\u7528\u6237\u8fd8\u5e0c\u671b\u6211\u4eec\u5728\u4ed6\u4eec\u7684Steveslist\u4e2a\u4eba\u8d44\u6599\u53d1\u751f\u53d8\u5316\u65f6\u4e3b\u52a8\u544a\u77e5\u4ed6\u4eec\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6709\u4eba\u60f3\u8981\u5b8c\u5168\u81ea\u52a8\u5316\u5728Steveslist\u4e0a\u9500\u552e\u9879\u76ee\u7684\u8fc7\u7a0b\u3002\u6bcf\u5f53\u5ba2\u6237\u4f7f\u7528\u6211\u4eec\u65b0\u7684\u3001\u57fa\u672c\u5b89\u5168\u7684StevePay\u7cfb\u7edf\u4ed8\u6b3e\u65f6\uff0c\u4ed6\u4eec\u90fd\u60f3\u7ed9\u5ba2\u6237\u53d1\u9001\u4e00\u5c01\u611f\u8c22\u7535\u5b50\u90ae\u4ef6\uff0c\u5e76\u81ea\u52a8\u6307\u793a\u4ed6\u4eec\u7684\u4ed3\u5e93\u5c06\u4e00\u53f0\u5077\u6765\u7684\u7535\u89c6\u53d1\u8d27\u5230\u8ba2\u5355\u5730\u5740\u3002\u6211\u4eec\u7684\u9500\u552e\u5546\u53ef\u4ee5\u4e0d\u65ad\u5730\u53cd\u590d\u67e5\u8be2Steveslist API\uff0c\u8be2\u95ee\u201c\u662f\u5426\u6709\u65b0\u7684\u9500\u552e\uff1f\u6709\u6ca1\u6709\u65b0\u7684\u9500\u552e\u60c5\u51b5\uff1f\u201c\u3002\u7136\u800c\uff0c\u8fd9\u5c06\u662f\u975e\u5e38\u4f4e\u6548\u7684\uff0c\u5e76\u4e14\u4f1a\u7ed9\u6211\u4eec\u7684\u670d\u52a1\u5668\u5e26\u6765\u5f88\u591a\u4e0d\u5fc5\u8981\u7684\u8d1f\u8f7d\u3002\n\u76f8\u53cd\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u79f0\u4e3aWebHooks\u7684\u884c\u4e1a\u6807\u51c6\u7cfb\u7edf\u3002WebHook\u662f\u4e00\u79cdHTTP\u8bf7\u6c42\uff0c\u6bcf\u5f53\u7528\u6237\u7684\u5e10\u6237\u53d1\u751f\u6709\u8da3\u7684\u4e8b\u60c5\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u5c06\u5176\u53d1\u9001\u7ed9\u7528\u6237\u3002\u5b83\u5305\u542b\u63cf\u8ff0\u521a\u521a\u53d1\u751f\u7684\u4e8b\u4ef6\u7684\u6240\u6709\u6570\u636e-\u4f8b\u5982\uff0c\u5546\u54c1ID\u3001\u4ef7\u683c\u3001\u4e70\u5bb6ID\u3001\u4e70\u5bb6\u5730\u5740\u7b49\u3002WebHook\u5141\u8bb8\u7528\u6237\u81ea\u52a8\u6267\u884c\u54cd\u5e94\u64cd\u4f5c\uff0c\u4f8b\u5982\u524d\u9762\u63d0\u5230\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u81ea\u52a8\u53d1\u8d27\u3002\n\u8981\u4f7f\u7528WebHook\uff0c\u7528\u6237\u9700\u8981\u544a\u8bc9\u6211\u4eec\u4ed6\u4eec\u5e0c\u671b\u6211\u4eec\u5c06\u5176WebHook\u53d1\u9001\u5230\u7684URL(\u4f8b\u5982\uff0csteveslistwebhooks.robertheaton.com)\u3002\u4ed6\u4eec\u5728\u8be5URL\u4e0a\u8bbe\u7f6e\u4e00\u4e2aWeb\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u5c06\u63a5\u6536\u548c\u64cd\u4f5c\u8fd9\u4e9bWebHook\u901a\u77e5\u3002\n1.\u4e70\u65b9\u8d2d\u4e70An 3.\u5356\u65b9\u7684\u670d\u52a1\u5668\u7167\u5e38\u63a5\u6536\u7f51\u94a9\u9879\u76ee\u3002\u5e76\u4f7f\u7528\u5176\u4e2d\u7684\u4fe1\u606f\u81ea\u52a8\u5904\u7406\u8ba2\u5355\u3002+-++-+|\u4e70\u65b9\u6d4f\u89c8\u5668||\u5356\u65b9\u7684WebHook-++-+|\u63a5\u6536\u670d\u52a1\u5668||+-+|^|++-||^||\u3002+Steveslist+-+|\u670d\u52a1\u5668|+-+2.\u4ea4\u6613\u5b8c\u6210\u540e\uff0cSteveslist\u5c06\u67e5\u627e\u5356\u5bb6\u7684\u7f51\u7edc\u6302\u94a9URL(\u5982\u679c\u5df2\u8bbe\u7f6e)\u3002\u7136\u540e\uff0c\u6211\u4eec\u5411\u6b64URL\u53d1\u9001\u4e00\u4e2aHTTP\u8bf7\u6c42\uff0c\u5176\u4e2d\u5305\u542b\u8d2d\u4e70\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\n\u7528\u6237\u5728\u5176Web\u670d\u52a1\u5668\u4e0a\u90e8\u7f72\u4ee3\u7801\uff0c\u8be5\u4ee3\u7801\u5728\u6536\u5230\u6211\u4eec\u7684WebHook\u65f6\u6267\u884c\u9002\u5f53\u7684\u54cd\u5e94\u64cd\u4f5c\u3002\u6211\u4eec\u4e0d\u4ec5\u4ec5\u5728\u8d2d\u4e70\u7269\u54c1\u65f6\u53d1\u9001\u7f51\u7edc\u6302\u94a9\uff0c\u5f53\u7528\u6237\u6536\u5230\u6d88\u606f\u65f6\uff0c\u5f53\u7ba1\u7406\u5458\u5220\u9664\u4ed6\u4eec\u7684\u7269\u54c1\u65f6\uff0c\u6216\u8005\u5f53\u4e70\u5bb6\u6295\u8bc9\u65f6\uff0c\u6211\u4eec\u4e5f\u4f1a\u53d1\u9001\u5b83\u4eec\u3002\u8fd9\u4f7f\u5f97Steveslist\u5356\u5bb6\u4e0d\u4ec5\u53ef\u4ee5\u81ea\u52a8\u5217\u51fa\u5546\u54c1\uff0c\u8fd8\u53ef\u4ee5\u81ea\u52a8\u9500\u552e\u548c\u53d1\u8d27\u3002\nWebHooks\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u590d\u6742\u6027-\u5b89\u5168\u6027\u548c\u53ef\u9760\u6027\u3002\u9996\u5148\uff0c\u6211\u4eec\u6765\u8c08\u4e00\u8c08\u5b89\u5168\u95ee\u9898\u3002\u5356\u5bb6\u6307\u793a\u6211\u4eec\u5c06\u5176\u7f51\u7edc\u6302\u94a9\u53d1\u9001\u5230\u7684\u7aef\u70b9\u53ef\u4f9b\u4e92\u8054\u7f51\u4e0a\u7684\u4efb\u4f55\u4eba\u8bbf\u95ee\u3002\u4efb\u4f55\u77e5\u9053URL\u7684\u4eba\u90fd\u53ef\u4ee5\u7ed9\u5b83\u53d1\u9001\u5047\u7684\u7f51\u7edc\u6302\u94a9\uff0c\u5982\u679c\u6211\u4eec\u7684\u5356\u5bb6\u4e0d\u5c0f\u5fc3\uff0c\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u653b\u51fb\u8005\u6b3a\u9a97\u4ed6\u4eec\uff0c\u4f8b\u5982\uff0c\u5411\u653b\u51fb\u8005\u53d1\u9001\u514d\u8d39\u7684\u4e1c\u897f\u3002\u5356\u5bb6\u7684WebHook URL\u5e94\u8be5\u5f88\u96be\u627e\u5230\uff0c\u56e0\u4e3a\u5356\u5bb6\u4e0d\u4f1a\u516c\u5f00\u5b83\u7684\u5b58\u5728\uff0c\u4f46\u9ed8\u9ed8\u65e0\u95fb\u5e76\u4e0d\u7b49\u540c\u4e8e\u5b89\u5168\u3002\n\u4e3a\u4e86\u5141\u8bb8\u6211\u4eec\u7684\u5356\u5bb6\u9a8c\u8bc1WebHook\u662f\u5426\u771f\u7684\u662f\u7531Steveslist\u53d1\u9001\u7684\uff0c\u6211\u4eec\u5bf9WebHook\u5185\u5bb9\u8fdb\u884c\u4e86\u52a0\u5bc6\u7b7e\u540d\u3002\n\u5bc6\u7801\u7b7e\u540d\u662f\u4e00\u4e2a\u6df1\u523b\u800c\u5fae\u5999\u7684\u8bdd\u9898\u3002\u4e0b\u9762\u662f\u6211\u4eec\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u4fdd\u62a4\u6211\u4eec\u7684\u7f51\u7edc\u6302\u94a9\u7684\u4e00\u4e2a\u7cbe\u7b80\u7248\u672c\u3002\n\u5f53\u5356\u5bb6\u4e3a\u4ed6\u4eec\u7684\u8d26\u6237\u542f\u7528WebHook\u65f6\uff0c\u6211\u4eec\u4f1a\u751f\u6210\u4e00\u4e2a\u968f\u673a\u7684\u201c\u5171\u4eab\u5bc6\u94a5\u201d\u3002\u6211\u4eec\u544a\u8bc9\u5356\u5bb6\u5c06\u6b64\u5bc6\u94a5\u590d\u5236\u5230\u4ed6\u4eec\u7684WebHook\u63a5\u6536\u670d\u52a1\u5668\u5e76\u786e\u4fdd\u5176\u5b89\u5168\uff0c\u4ee5\u4fbf\u53ea\u6709\u6211\u4eec\u548c\u5356\u5bb6\u77e5\u9053\u5b83\u7684\u4ef7\u503c\u3002\u6bcf\u5f53\u6211\u4eec\u53d1\u9001\u4e00\u4e2aWebHook\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u83b7\u53d6\u8fd9\u4e2a\u5171\u4eab\u7684\u79d8\u5bc6\uff0c\u901a\u8fc7\u4f7f\u7528\u4e00\u4e2a\u79f0\u4e3aHMAC\u7684\u52a0\u5bc6\u6563\u5217\u51fd\u6570\u5c06\u5b83\u4e0eWebHook\u7684\u5185\u5bb9\u7ed3\u5408\u8d77\u6765\uff0c\u7136\u540e\u5f97\u5230\u4e00\u4e2a\u770b\u4f3c\u968f\u673a\u4f46\u5b8c\u5168\u786e\u5b9a\u7684WebHook\u7684\u957f\u957f\u7684\u201c\u7b7e\u540d\u201d\u3002\nWebHook\u5185\u5bb9+-+(\u4f8b\u5982\uff0c{&#34\uff1bid&#34\uff1b\uff1a123...})|v+-+-+|HMAC\u7b97\u6cd5|-&&gt\uff1bWebHook\u7b7e\u540d+-+-+^\u5171\u4eab\u5bc6\u94a5|(\u4f8b\u5982\uff0c123mhu23jy8xdwgmd...)+-+\u3002\n\u5f53\u5356\u5bb6\u7684WebHook\u63a5\u6536\u670d\u52a1\u5668\u63a5\u6536\u5230WebHook\u65f6\uff0c\u5b83\u5c06\u83b7\u53d6\u5171\u4eab\u5bc6\u94a5\u548cWebHook\u5185\u5bb9\uff0c\u5e76\u8ba1\u7b97\u5b83\u671f\u671b\u7684\u7b7e\u540d\u4e0e\u6211\u4eec\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u3002\u5b83\u5c06\u7ed3\u679c\u4e0e\u9644\u52a0\u5230\u7f51\u7edc\u6302\u94a9\u7684\u7b7e\u540d\u8fdb\u884c\u6bd4\u8f83\uff1b\u5982\u679c\u5339\u914d\uff0c\u5219\u63a5\u53d7\u5e76\u5904\u7406\u7f51\u7edc\u6302\u94a9\u3002\u7531\u4e8e\u7b7e\u540d\u53ea\u80fd\u4f7f\u7528\u53ea\u6709\u6211\u4eec\u548c\u5356\u5bb6\u77e5\u9053\u7684\u5171\u4eab\u79d8\u5bc6\u6765\u751f\u6210\uff0c\u56e0\u6b64WebHook\u63a5\u6536\u670d\u52a1\u5668\u53ef\u4ee5\u786e\u4fe1WebHook\u662f\u7531\u6211\u4eec\u53d1\u9001\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u7b7e\u540d\u4e0d\u5339\u914d\uff0c\u670d\u52a1\u5668\u5c06\u62d2\u7eddWebHook\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6240\u6709\u7b7e\u540d\u9a8c\u8bc1\u7801\u5fc5\u987b\u7531\u5356\u65b9\u7f16\u5199\u548c\u7ef4\u62a4\u3002\u6211\u4eec\u53ef\u4ee5\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u9f13\u52b1\u548c\u699c\u6837\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u5f3a\u8feb\u4ed6\u4eec\u6b63\u786e\u9a8c\u8bc1\u7b7e\u540d\uff0c\u751a\u81f3\u6839\u672c\u4e0d\u80fd\u3002\u5bf9\u4e8e\u4e00\u4e9b\u73b0\u5b9e\u4e16\u754c\u7684\u4f8b\u5b50\uff0c\u8bf7\u770b\u4e00\u4e0bStrip\u548cGitHub\u662f\u5982\u4f55\u7b7e\u7f72\u4ed6\u4eec\u7684WebHook\u7684\u3002\n\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u5f53\u6211\u4eec\u7684\u7f51\u7edc\u94a9\u5b50\u51fa\u9519\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u4ee5\u53ca\u6211\u4eec\u60f3\u8981\u5bf9\u7528\u6237\u505a\u51fa\u4ec0\u4e48\u4fdd\u8bc1\u3002\u5982\u679c\u6211\u4eec\u5c1d\u8bd5\u53d1\u9001\u4e00\u4e2a\u7f51\u7edc\u6302\u94a9\uff0c\u4f46\u65e0\u6cd5\u8fde\u63a5\u5230\u7528\u6237\u7684\u670d\u52a1\u5668\uff0c\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u529e\uff1f\u5982\u679c\u6211\u4eec\u6210\u529f\u8fde\u63a5\u5230\u4ed6\u4eec\u7684\u670d\u52a1\u5668\u5e76\u53d1\u9001WebHook\uff0c\u4f46\u4ed6\u4eec\u7684\u670d\u52a1\u5668\u53d1\u56de\u9519\u8bef\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u5982\u679c\u6211\u4eec\u53d1\u9001\u7f51\u7edc\u6302\u94a9\uff0c\u4f46\u670d\u52a1\u5668\u6302\u8d77\u4e8620\u79d2\uff0c\u7136\u540e\u5728\u6ca1\u6709\u544a\u8bc9\u6211\u4eec\u53d1\u751f\u4e86\u4ec0\u4e48\u60c5\u51b5\u7684\u60c5\u51b5\u4e0b\u65ad\u5f00\u8fde\u63a5\uff0c\u4f1a\u600e\u4e48\u6837\u5462\uff1f\n\u8fd9\u91cc\u6d89\u53ca\u5230\u4e00\u4e9b\u6743\u8861\uff0c\u9700\u8981\u6e05\u6670\u7684\u6c9f\u901a\u548c\u6570\u91cf\u60ca\u4eba\u7684\u57fa\u7840\u8bbe\u65bd\u6765\u7ba1\u7406\u3002\u6211\u4eec\u5728Steveslist\u9009\u62e9\u4fdd\u8bc1\u6211\u4eec\u5c06\u201c\u81f3\u5c11\u4ea4\u4ed8\u4e00\u6b21\u201d\u7f51\u7edc\u6302\u94a9\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c\u4e00\u4e2a\u7f51\u7edc\u94a9\u5b50\u53d1\u9001\u5931\u8d25\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u5c1d\u8bd5(\u5927\u91cf\u4f46\u4e0d\u662f\u65e0\u9650\u6b21)\uff0c\u76f4\u5230\u5b83\u6210\u529f\u4e3a\u6b62\u3002\u5982\u679c\u6211\u4eec\u4e0d\u786e\u5b9a\u7f51\u7edc\u6302\u94a9\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u5c1d\u8bd5\uff0c\u76f4\u5230\u6211\u4eec\u786e\u5b9a\u5c1d\u8bd5\u5df2\u7ecf\u6210\u529f\u3002\u8fd9\u53ef\u80fd\u5076\u5c14\u4f1a\u5bfc\u81f4\u6211\u4eec\u53d1\u9001\u4e24\u6b21\u76f8\u540c\u7684\u7f51\u7edc\u6302\u94a9\uff0c\u4f46\u5356\u5bb6\u6709\u8d23\u4efb\u8ba9\u4ed6\u4eec\u7684\u4ee3\u7801\u4f18\u96c5\u5730\u5904\u7406\u8fd9\u4e00\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u5411\u540c\u4e00\u5ba2\u6237\u53d1\u9001\u4e94\u53f0\u5077\u6765\u7684\u7535\u89c6\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u8ba2\u8d2d\u7684\u90a3\u53f0\u3002\n\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4f60\u662f\u600e\u4e48\u60f3\u7684\uff1f\u201d\u51ef\u7279\u95ee\u9053\u3002\u201c\u8fd9\u5927\u6982\u5c31\u662f\u4f60\u4e00\u76f4\u5728\u60f3\u7684\u5417\uff1f\u201d\u4f60\u505a\u4e86\u4e2a\u4e0d\u7f6e\u53ef\u5426\u7684\u8868\u60c5\uff0c\u54ac\u4e86\u4e00\u5927\u53e3\u9644\u8fd1\u7684\u4e09\u660e\u6cbb\uff0c\u4ee5\u907f\u514d\u8fdb\u4e00\u6b65\u7684\u8ba8\u8bba\u3002\u51ef\u7279\u7ee7\u7eed\u8bf4\u9053\uff1a\n\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u540e\u7aef\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u5c06\u652f\u6301\u6211\u4eec\u7684\u4e00\u4e9b\u6700\u91cd\u8981\u7684\u529f\u80fd\u3002\n\u5927\u591a\u6570\u7528\u6237\u4f7f\u7528\u7528\u6237\u540d\u548c\u5bc6\u7801\u767b\u5f55Steveslist\u7f51\u7ad9\u548c\u667a\u80fd\u624b\u673a\u5e94\u7528\u7a0b\u5e8f\u3002\u8fd8\u6709\u5176\u4ed6\u767b\u5f55\u7f51\u7ad9\u7684\u65b9\u5f0f\uff0c\u6bd4\u5982OAuth-\u6211\u4eec\u5c06\u5728\u4e0b\u4e00\u6b21\u4ecb\u7ecd\u5b83\u4eec\u3002\n\u6211\u4eec\u5fc5\u987b\u975e\u5e38\u5b89\u5168\u5730\u5b58\u50a8\u6211\u4eec\u7528\u6237\u7684\u5bc6\u7801\u3002\u7528\u6237\u7684\u5bc6\u7801\u4e0d\u4ec5\u662f\u4ed6\u4eec\u7528\u6765\u767b\u5f55(\u6216\u9a8c\u8bc1)stevelist\u7684\u4e1c\u897f\uff0c\u800c\u4e14\u5bf9\u4e8e\u8bb8\u591a\u7528\u6237\u6765\u8bf4\uff0c\u4ed6\u4eec\u5f88\u53ef\u80fd\u4e5f\u662f\u4ed6\u4eec\u7528\u6765\u767b\u5f55\u8bb8\u591a\u5176\u4ed6\u670d\u52a1\u7684\u76f8\u540c\u5bc6\u7801\uff0c\u5c3d\u7ba1\u6240\u6709\u4eba\u90fd\u8b66\u544a\u8bf4\u8fd9\u4e0d\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u6bd5\u7adf\uff0c\u4ed6\u4eec\u53ea\u6709\u8fd9\u4e48\u591a\u751f\u65e5\u7684\u5b69\u5b50\u3002\n\u9c81\u4f2f\u7279\u00b7\u8d6b\u666e\u987f(Rupert Herpton)\u5199\u4e86\u5173\u4e8e\u5982\u4f55\u4fdd\u62a4\u5bc6\u7801\u7684\u5f00\u521b\u6027\u6559\u7a0b\uff0c\u6211\u76f8\u4fe1\u4f60\u5df2\u7ecf\u8bfb\u8fc7\u4e86\u3002\u4ee5\u9632\u60a8\u9700\u8981\u66f4\u65b0\u5bc6\u7801\uff0c\u95ee\u9898\u7684\u5173\u952e\u5728\u4e8e\uff0c\u6211\u4eec\u7edd\u4e0d\u80fd\u5728\u4efb\u4f55\u5730\u65b9\u5b58\u50a8\u539f\u59cb\u660e\u6587\u5f62\u5f0f\u7684\u5bc6\u7801\u3002\u6211\u4eec\u4e0d\u80fd\u5c06\u5b83\u4eec\u4ee5\u660e\u6587\u5f62\u5f0f\u5b58\u50a8\u5728\u6570\u636e\u5e93\u3001\u65e5\u5fd7\u6587\u4ef6\u6216\u7cfb\u7edf\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u3002\u76f8\u53cd\uff0c\u5728\u5b58\u50a8\u5bc6\u7801\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u4f7f\u7528\u6563\u5217\u51fd\u6570(\u5982bcrypt)\u5bf9\u5176\u8fdb\u884c\u6563\u5217\u3002\n\u6563\u5217\u51fd\u6570\u662f\u201c\u5355\u5411\u201d\u51fd\u6570t\u3002\n.", "note_en": "This post is part of my  Programming for Advanced Beginners series.  Subscribe now to receive specific, actionable ways to make your code cleaner, every other week, entirely free.\n You\u2019ve started  yet another  company with your good friend, Steve Steveington. It\u2019s an online marketplace where people can buy and sell things and where no one asks too many questions. It\u2019s basically a rip-off of Craigslist, but with Steve\u2019s name instead of Craig\u2019s.\n  You\u2019re going to be responsible for building the entire Steveslist technical platform, including all of its websites, mobile apps, databases, and other infrastructure. You\u2019re excited, but also very nervous. You figure that you can probably cobble together a small website, since you\u2019ve done that a few times before as part of your previous  entertaining- if- morally- questionable  escapades with the Stevester. But you have no idea how to even start building out all of the other infrastructure and tools that you assume lie behind large, successful online platforms.\n You are in desperate need of a detailed yet concise overview of how real companies do this. How do they store their data? How do their different applications talk to each other? How do they scale their systems to work for millions of users? How do they keep them secure? How do they make sure nothing goes wrong? What are APIs, webhooks and client libraries, when you really get down to it?\n  You send a quick WhatsApp to your other good friend, Kate Kateberry, to see if she can help. You\u2019ve  worked together very effectively in the past, and she has decades of experience creating these types of systems at Silicon Valley\u2019s biggest and most controversial companies.\n She instantly accepts your job offer. You had actually only been ringing for some rough guidance and a good gossip, but you nonetheless instantly accept her acceptance. No point looking a gift horse in the mouth, even when you don\u2019t have any money to pay her. Kate proposes that her first day be 5 weeks ago in order to help her smooth over some accounting irregularities. She can come into the office sometime next week. You feel encouraged and threatened by her eagerness.\n  Kate bounces into your offices in the 19th Century Literature section of the San Francisco Public Library. \u201cOK let\u2019s do this!\u201d she shouts quietly. \u201cWhat have we got so far? How are all our systems set up? What\u2019s the plan?\u201d You lean back in your chair and close your laptop, which was not turned on because you have left your charger at home. You steeple your fingers in a manner that you hope can be described as \u201cthoughtful\u201d.\n \u201cLet me flip that question around, Kate. What do  you think the plan should be?\u201d\n Kate takes a deep breath and paints an extremely detailed vision of the Steveslist platform five years into the future and the infrastructure that will power it.\n  Before we start (says Kate), I want to make it clear that I\u2019m not saying that any of this is necessarily the \u201cright\u201d way to set up our infrastructure. If someone you trust more than me says something different then you should probably do what they say. There are many tools out there, each with different strengths and weaknesses, and many ways to build a technology company. The real, honest reasons that we will make many of our technological choices will be \u201cwe chose X because Sara knows a lot about X\u201d and \u201cwe chose Y on the spur of the moment when it didn\u2019t seem like a big decision and we never found the time to re-evaluate.\u201d\n Nonetheless, let\u2019s fast-forward five years into the future. Now Steveslist has two main consumer-facing products:\n  These are the main ways in which users directly interact with the Steveslist platform. In addition, we also provide an API that allows programmers to build power-tools on top of the Steveslist platform that, for example, create listings for hundreds of items programmatically. To support this, we offer:\n Steveslist API  client libraries that make it easy for programmers to write code that talks to our API\n  +-----------+ +--------------+ +-----------------+|Web Browser| |Smartphone App| |Client Libraries/|+-----+-----+ +------+-------+ |Other API code | | | +-------+---------+ | v | | +-----+------+ | +---------&gt;+ Steveslist +&lt;-----------+ | Servers | +------------+\n Finally, we have many, many services running in the background that provide the data and power to these external-facing applications:\n Webhooks - to notify users when something happens to their account, such as \u201corder placed\u201d\n    SQL database - the main Steveslist data store. Needs to be highly scalable and reliable\n  Free-text searching system - to power the search box where people can look for broad search terms like \u201cTVs\u201d or \u201cmotorbikes\u201d\n  Internal tools - to help us administer the Steveslist platform, and to take actions like issuing sternly-worded warnings to malicious users\n  Cron jobs - to run regular tasks that do anything from generating invoices, to billing customers, to sending as much of our users\u2019 data as possible to third-party ad networks\n  \u201cPubsub\u201d system - to allow us to take asynchronous actions on different trigger events (such as \u201cwhen a new user signs up, send them a welcome email\u201d)\n  Big data analytics system - to allow us to run enormous queries over the entirety of Steveslist\u2019s data\n Let\u2019s go through each of these systems in turn.  Let me know if anything isn\u2019t clear, if you have any questions, or if you think I\u2019ve got something wrong.\n  Before we start, let\u2019s define some important terms. In fact, let\u2019s just define one. We\u2019re going to talk a lot about \u201cservers\u201d today. But what is a server, when you really get down to it?\n For our purposes, a server is a computer that runs on a network and listens for communications from other computers. When it receives some data from another computer it performs some sort of action in response and - usually - sends back some data of its own. For example, a web server listens on a network for HTTP requests and sends back webpages and information in response. A database server listens for database queries and reads and writes data to the database that it is running.\n This brief description skips out entire degrees and careers of detail, and there are of course far more precise and accurate ways to define the word \u201cserver\u201d. But this should get us through until dinnertime. What did you say? What\u2019s a \u201cnetwork\u201d really? A good question for another day.\n   This is the main Steveslist product. It\u2019s just a normal web app, very similar to any website that you\u2019ve built before, except much bigger. It\u2019s a modern \u201csingle-page app\u201d (SPA). The \u201csingle\u201d in \u201csingle-page app\u201d refers to the fact that the user\u2019s browser almost never has to fully reload the page as the user clicks around our site. Instead, when the browser makes its first  HTTP request to our servers, we send it back a basic, skeleton HTML page and a big pile of  JavaScript code. This JavaScript code executes inside the browser, and updates the view of the page in response to the user\u2019s actions. When the JavaScript wants to send or retrieve data from Steveslist, it sends an Asynchronous JavaScript XML Request (almost always called AJAX for short) in the background to a URL. When our server responds, the JavaScript uses the response to update the browser view accordingly.\n +----------+1.User&#39;s browser visits steveslist.com. +----------+| | It sends an HTTP request to the | || | Steveslist servers | || +---------------------------------------&gt;| ||User&#39;s Web| |Steveslist|| Browser |2.Steveslist server responds with a | Servers || | skeleton HTML page that instructs the | || | browser to request additional | || | JavaScript files. | || |&lt;---------------------------------------+ || | | || |3.User&#39;s browser requests and receives | || | these JavaScript files from the | || | Steveslist server. | || +---------------------------------------&gt;| || |&lt;---------------------------------------+ || | | || |4.User&#39;s browser executes the JavaScript| || | code. The code sends more requests for| || | the user&#39;s data to the Stevelist | || | server, and updates the browser UI to | || | display it. | || +---------------------------------------&gt;| || |&lt;---------------------------------------+ |+----------+ +----------+\n robertheaton.com is not a single-page app. Whenever you click on a link, the browser has to reload the entire page.  twitter.com  is a single-page app. Whenever you click on a link, the browser dynamically updates a small portion of tthe page without forcing a full refresh.\n SPAs are a lot of work to build and maintain, but they sure look good.\n  We provide Steveslist smartphone apps for both iOS and Android. They are conceptually very similar to our single-page web app. Both our smartphone and web apps make HTTP requests to our servers. Then our servers receive these requests, do some work and return an HTTP response. Finally, both our smartphone and web apps update their display in order to communicate with the user.\n Since our smartphone apps are performing the same operations as the web app (for example, create listing, send message, etc), they can usually even send their requests to the exact same URLs as the web app. The only extra work that we have to do is to develop the frontends of the apps themselves. Some frameworks even make it possible to write mobile apps using JavaScript, allowing you to reuse code and logic across platforms.\n  We allow users and third-parties to write code that programmatically interacts with our platform. In the same way that people can use the Twitter API to write code that reads; likes; and creates Tweets, we allow them to use the Steveslist API to search; buy; and list items.\n Programmers use our API by writing code that makes HTTP requests to our  API endpoints. For example, in order to retrieve a list of all their listings, the programmer sends an HTTP  GET request to  api.steveslist.com/v1/listings. We respond with the data they requested, formatted as  JSON. JSON stands for JavaScript Object Notation, but JSON is not specific to JavaScript and can easily be interpreted by any programming language. A JSON response to a request to retrieve all of a user\u2019s listings might look something like this:\n {  &#34; listings &#34; :  [  {  &#34; id &#34; :  2178123867 ,  &#34; name &#34; :  &#34; Stolen TV &#34; ,  &#34; country &#34; :  &#34; US &#34; ,  &#34; city &#34; :  &#34; San Francisco &#34; ,  &#34; price_amount &#34; :  1000 ,  &#34; price_currency &#34; :  &#34; usd &#34; ,  #  etc ...  },  {  &#34; id &#34; :  182312679 ,  &#34; name &#34; :  &#34; Stolen Bicycle &#34; ,  &#34; country &#34; :  &#34; US &#34; ,  &#34; city &#34; :  &#34; San Francisco &#34; ,  &#34; price_amount &#34; :  2000 ,  &#34; price_currency &#34; :  &#34; usd &#34; ,  #  etc ...  }  ] }\n This structured response format is very easy for a program to parse, which means that the code that made the request can trivially interpret and use the data from our API.\n Users identify or  authenticate themselves to our API using an API key. This is, roughly speaking, the API equivalent of a password. It is a long, random string that we generate and display on a user\u2019s \u201cSettings\u201d page. Users include their API key as an  HTTP header with every HTTP request that they (or their code) makes to the API. When we receive an API request we check to see whether the attached API key corresponds to a Steveslist user. If it does then we perform the request on behalf of that user.\n If a programmer wants to, they can manually build HTTP requests to our API themselves, using their language\u2019s standard HTTP library. For example, in Python they might write:\n import  requests url  =  &#39;https://api.steveslist.com/v1/listings/&#39; listing_params  =  {  &#34;name&#34; :  &#34;Stolen TV&#34; ,  &#34;country&#34; :  &#34;US&#34; ,  &#34;city&#34; :  &#34;San Francisco&#34; ,  &#34;price_amount&#34; :  1000 ,  &#34;price_currency&#34; :  &#34;usd&#34; , } api_key  =  &#34;YOUR_API_KEY_GOES_HERE&#34; response  =  requests . post (  url ,  data = listing_params ,  headers = { &#34;X-Steveslist-API-Key&#34; :  api_key }, )\n   A client library is a library that \u201cwraps\u201d the functionality of the Steveslist API. This means that anyone using the client library doesn\u2019t need to know anything about the fine details of the Steveslist API. Instead, they can just write:\n  Our libraries turn the parameters that they are given into appropriately formatted HTTP requests, which they send to the Steveslist API as normal. We\u2019ve written client libraries for every major programming language that we could think of, and they are by far the most common way that people interact with our API.\n  We\u2019ve seen how Steveslist users can use our API to programmatically interact with their account. In addition, many users also want  us to proactively tell  them whenever something happens to their Steveslist profile. For example, suppose that someone wanted to fully automate the process of selling items on Steveslist. Whenever a customer pays for an item using our new, mostly-secure StevePay system, they want to send the customer a thank you email and automatically instruct their warehouse to ship a stolen TV to the order address. Our seller could constantly and repeatedly query the Steveslist API asking \u201cAny new sales? Any new sales?\u201d However, this would be very inefficient, and would put a lot of unnecessary load on our servers.\n Instead, we provide an industry standard system called  webhooks. A webhook is an HTTP request that we send to our users whenever something interesting happens to their account. It contains all the data describing the event that just happened - for example, the item ID, the price, the buyer ID, buyer address, and so on. Webhooks allow users to automatically perform response actions, such as the aforementioned email and auto-shipping.\n To use webhooks, the user tells us the URL to which they would like us to send their webhooks (for example,  steveslistwebhooks.robertheaton.com. They set up a web server at that URL that will receive and action these webhook notifications.\n 1.Buyer purchases an 3.The seller&#39;s server receives the webhook, item as normal. and uses the information in it to automatically process the order.+---------------+ +-----------------+|Buyer&#39;s Browser| |Seller&#39;s Webhook-++------+--------+ |Receiving Server | | +------+----------+ | ^ | | | | | +-----------+ | +---&gt;+ Steveslist+----------+ | Server | +-----------+ 2.Once the transaction has been completed, Steveslist looks up the seller&#39;s webhook URL (if set). We then send an HTTP request to this URL, containing the details of the purchase.\n The user deploys code on their web server that performs the appropriate response actions whenever it receives a webhook from us. We don\u2019t only send webhooks when an item is purchased - we also send them when a user receives a message; when one of their items is removed by an admin; or when a buyer makes a complaint. This enables Steveslist sellers to automate not just the listing of items, but also the selling and shipping of them too.\n  Webhooks come with two main complications - security and reliability. First, let\u2019s talk security. The endpoint to which the seller instructs us to send their webhooks is accessible to anyone on the internet. Anyone who knows the URL can send it fake webhooks, and if our seller isn\u2019t careful this could allow an attacker to trick them into, for example, sending the attacker free stuff. A seller\u2019s webhook URL should be difficult to find, since the seller won\u2019t publicize its existence, but obscurity is not the same as security.\n To allow our sellers to verify that a webhook really was sent by Steveslist, we  cryptographically sign our webhook contents.\n  Cryptographic signing is a deep and subtle topic. Here\u2019s a condensed version of how we use it to secure our webhooks.\n When a seller enables webhooks for their account, we generate a random \u201cshared secret key\u201d. We tell the seller to copy this key over to their webhook-receiving server and keep it secure, so that its value is known only by us and the seller. Whenever we send a webhook, we take this shared secret, combine it with the contents of the webhook by using a  cryptographic hash function called  HMAC, and get back a long, random-seeming, but entirely deterministic \u201csignature\u201d for the webhook.\n Webhook contents +----------+(eg. {&#34;id&#34;: 123...}) | v +---+----------+ |HMAC Algorithm|-----&gt;Webhook signature +---+----------+ ^Shared secret key |(eg. 123mhu23jy8xdwgmd...)+---+\n   When the seller\u2019s webhook-receiving server receives a webhook, it takes the shared secret and webhook contents and calculates what it expects the signature to be in exactly the same way that we did. It compares the result to the signature attached to the webhook; if they match then it accepts and processes the webhook. Since the signature can only be generated using the shared secret known only by us and the seller, the webhook-receiving server can be confident that the webhook was sent by us. If the signatures don\u2019t match, however, the server rejects the webhook.\n Note that all of the signature verification code must be written and maintained by the sellers. We can provide them with encouragement and examples, but we can\u2019t force them to verify signatures correctly, or even at all. For some real-world examples, look at how  Stripe and  GitHub sign their webhooks.\n  We also need to consider what happens when our webhooks go wrong and what guarantees we want to make to our users about them. If we try to send a webhook but can\u2019t connect to the user\u2019s server, what should we do? What if we successfully connect to their server and send the webhook, but their server sends back an error? What if we send the webhook but the server hangs for twenty seconds before disconnecting without telling us what happened?\n There are tradeoffs involved here that require clear communication and a surprising amount of infrastructure to manage. We at Steveslist choose to guarantee that we will deliver webhooks \u201cat least once\u201d. This means that if a webhook fails to send then we will keep trying (a large but not infinite number of times) until it does. If we\u2019re not sure whether a webhook succeeded or failed, we will keep trying until we are sure that an attempt has succeeded. This might occasionally result in us sending the same webhook twice, but it\u2019s the seller\u2019s responsibility to have their code handle this gracefully instead of sending the same customer five stolen TVs instead of the one that they ordered.\n  \u201cWhat do you think so far?\u201d asks Kate. \u201cIs this roughly what you\u2019ve been thinking?\u201d You make a non-committal face and take a big bite of a nearby sandwich in order to preclude any further discussion. Kate continues:\n  Let\u2019s talk about the backend systems that will power some of our most important features.\n  Most users sign into the Steveslist website and smartphone apps using a username and password. There are other ways of signing into the website, like  OAuth - we\u2019ll cover them another time.\n We will have to store our users\u2019 passwords very securely. Not only is a user\u2019s password the thing they use to sign in (or  authenticate) to Stevelist, but for many users they\u2019re probably the same password that they use to sign in to many other services too, despite all the warnings that this is a bad idea. They only have so many children with so many birthdays, after all.\n Rupert Herpton has written  the seminal tutorial on how to secure passwords, which I\u2019m sure you\u2019ve read already. Just in case you need a refresher, the crux of the matter is that we mustn\u2019t ever store passwords in their original,  plaintext form, anywhere. We mustn\u2019t store them in plaintext in a database, in a log file, or in any other part of our system. Instead, before storing a password, we must first  hash it using a  hash function such as  bcrypt.\n A hash function is a \u201cone-way\u201d function t\n......", "posttime": "2020-07-21 12:15:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7cfb\u7edf,design,steveslist", "title": "\u9762\u5411\u9ad8\u7ea7\u521d\u5b66\u8005\u7684\u7cfb\u7edf\u8bbe\u8ba1", "title_en": "Systems Design for Advanced Beginners", "transed": 1, "url": "https://robertheaton.com/2020/04/06/systems-design-for-advanced-beginners/", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7cfb\u7edf", "design"]}, {"category": "", "categoryclass": "", "imagename": "67f3d602721fa8facd9560eb7748c456.jpg", "infoid": 1013203, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u8c37\u6b4c(Google)\u548c\u82f9\u679c(Apple)\u57284\u6708\u4efd\u5ba3\u5e03\u514d\u8d39\u8f6f\u4ef6\u8ba1\u5212\uff0c\u5e2e\u52a9\u63d0\u9192\u4eba\u4eec\u53ef\u80fd\u63a5\u89e6\u5230\u51a0\u72b6\u75c5\u6bd2\u65f6\uff0c\u8fd9\u4e24\u5bb6\u516c\u53f8\u5c06\u5176\u5ba3\u4f20\u4e3a\u201c\u4fdd\u62a4\u9690\u79c1\u201d\uff0c\u5e76\u8868\u793a\u4e0d\u4f1a\u8ffd\u8e2a\u7528\u6237\u7684\u4f4d\u7f6e\u3002\u5728\u8fd9\u4e9b\u4fdd\u8bc1\u7684\u9f13\u821e\u4e0b\uff0c\u5fb7\u56fd\u3001\u745e\u58eb\u548c\u5176\u4ed6\u56fd\u5bb6\u4f7f\u7528\u8fd9\u4e9b\u4ee3\u7801\u5f00\u53d1\u4e86\u5168\u56fd\u6027\u7684\u75c5\u6bd2\u8b66\u62a5\u5e94\u7528\u7a0b\u5e8f\uff0c\u5df2\u88ab\u4e0b\u8f7d\u8d85\u8fc72000\u4e07\u6b21\u3002\n\u4f46\u8981\u8ba9\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u642d\u8f7d\u8c37\u6b4cAndroid\u64cd\u4f5c\u7cfb\u7edf\u7684\u667a\u80fd\u624b\u673a\u4e0a\u8fd0\u884c-\u8fd9\u662f\u4e16\u754c\u4e0a\u6700\u53d7\u6b22\u8fce\u7684\u64cd\u4f5c\u7cfb\u7edf-\u7528\u6237\u5fc5\u987b\u9996\u5148\u6253\u5f00\u8bbe\u5907\u4f4d\u7f6e\u8bbe\u7f6e\uff0c\u8fd9\u5c06\u542f\u7528GPS\uff0c\u5e76\u53ef\u80fd\u5141\u8bb8\u8c37\u6b4c\u786e\u5b9a\u4ed6\u4eec\u7684\u4f4d\u7f6e\u3002\n\u4e00\u4e9b\u653f\u5e9c\u5b98\u5458\u4f3c\u4e4e\u5bf9\u8be5\u516c\u53f8\u80fd\u591f\u63a2\u6d4b\u5230Android\u7528\u6237\u7684\u4f4d\u7f6e\u611f\u5230\u60ca\u8bb6\u3002\u4e39\u9ea6\u536b\u751f\u90e8\u53d1\u8a00\u4eba\u585e\u897f\u8389\u00b7\u4f26\u62dc\u00b7\u7d22\u9c81\u666e(Cecilie LumbyThorup)\u5728\u5f97\u77e5\u6b64\u4e8b\u540e\u8868\u793a\uff0c\u5979\u7684\u673a\u6784\u6253\u7b97\u201c\u4e0e\u8c37\u6b4c\u5c31\u4ed6\u4eec\u4e00\u822c\u5982\u4f55\u4f7f\u7528\u4f4d\u7f6e\u6570\u636e\u5c55\u5f00\u5bf9\u8bdd\u201d\u3002\n\u745e\u58eb\u8054\u90a6\u516c\u5171\u536b\u751f\u529e\u516c\u5ba4(Federal Office Of Public Health)\u8d1f\u8d23\u6570\u5b57\u8f6c\u578b\u7684\u90e8\u95e8\u8d1f\u8d23\u4eba\u91d1\u76f8\u65e5(Sang-Il Kim)\u535a\u58eb\u8bf4\uff0c\u201c\u7528\u6237\u5e94\u8be5\u53ef\u4ee5\u4f7f\u7528\u8fd9\u6837\u7684\u63a5\u8fd1\u8ffd\u8e2a\u5e94\u7528\uff0c\u800c\u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u670d\u52a1\u7ed1\u5b9a\u3002\u201d\u91d1\u76f8\u65e5\u535a\u58eb\u8d1f\u8d23\u76d1\u7ba1\u8be5\u56fd\u7684\u75c5\u6bd2\u8b66\u62a5\u5e94\u7528\u3002\n\u62c9\u8131\u7ef4\u4e9a\u8868\u793a\uff0c\u5728\u5f00\u53d1\u5176\u75c5\u6bd2\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5df2\u5c31\u8fd9\u4e00\u95ee\u9898\u5411\u8c37\u6b4c\u65bd\u538b\u3002\u201c\u6211\u4eec\u4e0d\u559c\u6b22GPS\u5fc5\u987b\u6253\u5f00\uff0c\u201d\u62c9\u8131\u7ef4\u4e9a\u75be\u75c5\u9884\u9632\u548c\u63a7\u5236\u4e2d\u5fc3\u4f20\u67d3\u75c5\u76d1\u6d4b\u90e8\u95e8\u7684\u8d1f\u8d23\u4eba\u57c3\u7433\u5a1c\u00b7\u8fea\u7c73\u7eb3(Elina Dimina)\u8bf4\u3002\n\u8c37\u6b4c\u7684\u4f4d\u7f6e\u8981\u6c42\u589e\u52a0\u4e86\u75c5\u6bd2\u8ffd\u8e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u9690\u79c1\u548c\u5b89\u5168\u95ee\u9898\uff0c\u5176\u4e2d\u8bb8\u591a\u662f\u5728\u65b0\u7684\u82f9\u679c-\u8c37\u6b4c\u8f6f\u4ef6\u9762\u4e16\u4e4b\u524d\u7531\u653f\u5e9c\u5f00\u53d1\u7684\u3002\u653f\u5e9c\u5b98\u5458\u548c\u6d41\u884c\u75c5\u5b66\u5bb6\u8868\u793a\uff0c\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u6210\u4e3a\u516c\u5171\u536b\u751f\u52aa\u529b\u7684\u6709\u76ca\u8865\u5145\uff0c\u4ee5\u904f\u5236\u8fd9\u79cd\u6d41\u884c\u75c5\u3002\u4f46\u4eba\u6743\u7ec4\u7ec7\u548c\u6280\u672f\u4e13\u5bb6\u8b66\u544a\u79f0\uff0c\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5484\u5484\u903c\u4eba\u7684\u6570\u636e\u6536\u96c6\u548c\u5b89\u5168\u7f3a\u9677\u5c06\u6570\u4ebf\u4eba\u7f6e\u4e8e\u8ddf\u8e2a\u3001\u8bc8\u9a97\u3001\u8eab\u4efd\u76d7\u7a83\u6216\u538b\u8feb\u6027\u653f\u5e9c\u8ddf\u8e2a\u7684\u98ce\u9669\u4e4b\u4e2d\u3002\n\u73b0\u5728\uff0cAndroid\u4f4d\u7f6e\u95ee\u9898\u53ef\u80fd\u4f1a\u7834\u574f\u653f\u5e9c\u5bf9\u516c\u4f17\u505a\u51fa\u7684\u9690\u79c1\u627f\u8bfa\u3002\n\u8c37\u6b4c\u53d1\u8a00\u4eba\u76ae\u7279\u00b7\u6c83\u65af(Pete Voss)\u8868\u793a\uff0c\u4f7f\u7528\u8be5\u516c\u53f8\u8f6f\u4ef6\u7684\u75c5\u6bd2\u8b66\u62a5\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f7f\u7528\u8bbe\u5907\u4f4d\u7f6e\u3002\u8fd9\u4e5f\u5305\u62ec\u90a3\u4e9b\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u5e76\u4f7f\u7528\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u901a\u77e5\u5176\u4ed6\u7528\u6237\u7684\u4eba\u3002\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u84dd\u7259\u626b\u63cf\u4fe1\u53f7\u6765\u68c0\u6d4b\u5f7c\u6b64\u5bc6\u5207\u63a5\u89e6\u7684\u667a\u80fd\u624b\u673a-\u6839\u672c\u4e0d\u9700\u8981\u77e5\u9053\u8bbe\u5907\u7684\u4f4d\u7f6e\u3002\n\u6c83\u65af\u8bf4\uff0c\u81ea2015\u5e74\u4ee5\u6765\uff0c\u8c37\u6b4c\u7684Android\u7cfb\u7edf\u8981\u6c42\u7528\u6237\u5728\u624b\u673a\u4e0a\u542f\u7528\u5b9a\u4f4d\u529f\u80fd\uff0c\u624d\u80fd\u626b\u63cf\u5176\u4ed6\u84dd\u7259\u8bbe\u5907\uff0c\u56e0\u4e3a\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u4f7f\u7528\u84dd\u7259\u6765\u63a8\u65ad\u7528\u6237\u4f4d\u7f6e\u3002\u4f8b\u5982\uff0c\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u5546\u5e97\u4e2d\u4f7f\u7528\u84dd\u7259\u4fe1\u6807\u6765\u5e2e\u52a9\u8425\u9500\u4eba\u5458\u4e86\u89e3\u667a\u80fd\u624b\u673a\u7528\u6237\u53ef\u80fd\u5728\u54ea\u4e2a\u8fc7\u9053\u3002\n\u7136\u800c\uff0c\u4e00\u65e6Android\u7528\u6237\u6253\u5f00\u4e86\u5b9a\u4f4d\u529f\u80fd\uff0c\u8c37\u6b4c\u53ef\u80fd\u4f1a\u901a\u8fc7\u4e00\u79cd\u540d\u4e3a\u8c37\u6b4c\u4f4d\u7f6e\u7cbe\u786e\u5ea6\u7684\u8bbe\u7f6e\uff0c\u4f7f\u7528Wi-Fi\u3001\u79fb\u52a8\u7f51\u7edc\u548c\u84dd\u7259\u4fe1\u6807\u6765\u786e\u5b9a\u4ed6\u4eec\u7684\u7cbe\u786e\u4f4d\u7f6e\uff0c\u5e76\u5229\u7528\u8fd9\u4e9b\u6570\u636e\u6765\u6539\u5584\u5b9a\u4f4d\u670d\u52a1\u3002\u6c83\u65af\u8bf4\uff0c\u6ca1\u6709\u7528\u6237\u8bb8\u53ef\u7684\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u4e00\u4e2a\u4eba\u7684Android\u8bbe\u5907\u4f4d\u7f6e\u3002\n\u82f9\u679c\u4e0d\u8981\u6c42\u4f7f\u7528\u75c5\u6bd2\u5e94\u7528\u7684iPhone\u7528\u6237\u6253\u5f00\u5b9a\u4f4d\u529f\u80fd\uff0c\u62d2\u7edd\u5bf9\u8c37\u6b4c\u7684\u5b9a\u4f4d\u505a\u6cd5\u53d1\u8868\u8bc4\u8bba\u3002\n\u4e00\u4e9b\u5b89\u5168\u548c\u9690\u79c1\u4e13\u5bb6\u8868\u793a\uff0cAndroid\u7684\u4f4d\u7f6e\u8981\u6c42\u7a81\u663e\u4e86\u653f\u5e9c\u548c\u4e3b\u5bfc\u79fb\u52a8\u5e02\u573a\u7684\u4e24\u5bb6\u79d1\u6280\u5de8\u5934\u4e4b\u95f4\u4ee4\u4eba\u4e0d\u5b89\u7684\u6743\u529b\u5931\u8861\u3002\u4ed6\u4eec\u8bf4\uff0c\u4f7f\u7528\u8be5\u8f6f\u4ef6\u7684\u56fd\u5bb6\u5bf9\u8fd9\u4e9b\u516c\u53f8\u4e3a\u516c\u5171\u536b\u751f\u6280\u672f\u8bbe\u5b9a\u7684\u65b0\u5168\u7403\u6807\u51c6\u51e0\u4e4e\u6ca1\u6709\u8ffd\u7d22\u6743\u3002\n\u4f8b\u5982\uff0c\u8c37\u6b4c\u548c\u82f9\u679c\u7981\u6b62\u4f7f\u7528\u5176\u6280\u672f\u7684\u653f\u5e9c\u75c5\u6bd2\u5e94\u7528\u7a0b\u5e8f\u8ddf\u8e2a\u7528\u6237\u7684\u4f4d\u7f6e\u3002\u4f46\u8c37\u6b4c\u53ef\u80fd\u4f1a\u6839\u636e\u5b89\u5353\u7528\u6237\u7684\u8bbe\u7f6e\u6765\u786e\u5b9a\u548c\u4f7f\u7528\u4ed6\u4eec\u7684\u8bbe\u5907\u4f4d\u7f6e\u3002\n\u5fb7\u56fd\u7ef4\u5c14\u8328\u5821\u5927\u5b66(University of W\u00fcrzburg)\u5b89\u5168\u8f6f\u4ef6\u7cfb\u7edf\u6559\u6388\u4e9a\u5386\u5c71\u5fb7\u62c9\u00b7\u5fb7\u7c73\u7279\u91cc\u5ef6\u79d1(Alexandra Dmitrienko)\u8bf4\uff0c\u201c\u6211\u4eec\u628a\u592a\u591a\u63a7\u5236\u6743\u4ea4\u7ed9\u4e86\u4e24\u5bb6\u5927\u516c\u53f8\u3002\u201d\u201c\u4ed6\u4eec\u6b63\u5728\u5784\u65ad\u5b83\u3002\u201d\n\u8fd9\u4e24\u5bb6\u516c\u53f8\u7684\u84dd\u7259\u63a5\u8fd1\u68c0\u6d4b\u6280\u672f\u6e90\u4e8e\u65b0\u52a0\u5761\u548c\u5b66\u8005\u5f00\u53d1\u7684\u60f3\u6cd5\u3002\u5b83\u4e3a\u516c\u5171\u536b\u751f\u673a\u6784\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u5177\u4fb5\u5165\u6027\u7684\u6a21\u5f0f\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u8fd9\u4e9b\u6a21\u5f0f\u5305\u62ec\u8ddf\u8e2a\u7528\u6237\u7684\u7ec6\u7c92\u5ea6\u4f4d\u7f6e\uff0c\u5e76\u5c06\u4ed6\u4eec\u7684\u540d\u5b57\u7b49\u79c1\u4eba\u6570\u636e\u53d1\u9001\u5230\u4e2d\u592e\u653f\u5e9c\u670d\u52a1\u5668\u3002\n\u82f9\u679c\u548c\u8c37\u6b4c\u7684\u8f6f\u4ef6\u4f7f\u7528\u8f6e\u6362\u7684ID\u7801\u6765\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u7528\u6237\u4e4b\u95f4\u7684\u5bc6\u5207\u8054\u7cfb\uff0c\u201c\u4ee5\u5e2e\u52a9\u9632\u6b62\u8ddf\u8e2a\u201d\uff0c\u4e24\u5bb6\u516c\u53f8\u8bf4\u3002\u5b83\u8fd8\u5728\u624b\u673a\u4e0a\u5904\u7406\u4eba\u4eec\u7684\u6570\u636e-\u653f\u5e9c\u65e0\u6cd5\u8bbf\u95ee\u8fd9\u4e9b\u6570\u636e\u3002\n\u201c\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u2018\u8bbe\u8ba1\u9690\u79c1\u2019\uff0c\u201d\u745e\u58eb\u536b\u751f\u5b98\u5458\u91d1\u535a\u58eb\u8bf4\u3002\u201c\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u4e2a\u4eba\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u6ca1\u6709\u59d3\u540d\uff0c\u6ca1\u6709\u7535\u8bdd\u53f7\u7801\uff0c\u751a\u81f3\u6ca1\u6709\u6765\u81ea\u7535\u5b50\u90ae\u4ef6\u6216\u667a\u80fd\u624b\u673a\u7684\u786c\u4ef6\u6280\u672f\u6807\u8bc6\u201d\u3002\n\u201c\u8fd9\u6b3e\u5e94\u7528\u503c\u5f97\u4f60\u4fe1\u4efb\u3002\u5b83\u4fdd\u62a4\u4e86\u4f60\u7684\u9690\u79c1\uff0c\u201c\u5fb7\u56fd\u603b\u7406\u5b89\u683c\u62c9\u00b7\u9ed8\u514b\u5c14(Angela Merkel)\u5728\u6700\u8fd1\u7684\u4e00\u6b21\u89c6\u9891\u8bb2\u8bdd\u4e2d\u8c08\u5230\u4e86\u5979\u7684\u653f\u5e9c\u7684Corona-Warn-App\uff0c\u8fd9\u6b3e\u5e94\u7528\u57fa\u4e8e\u82f9\u679c-\u8c37\u6b4c\u7684\u6a21\u5f0f\u3002\u201c\u6ca1\u6709\u6536\u96c6\u4efb\u4f55\u5730\u7406\u6570\u636e\uff0c\u201d\u9ed8\u514b\u5c14\u8bf4\u3002\n\u4f46\u9690\u79c1\u548c\u5b89\u5168\u4e13\u5bb6\u8868\u793a\uff0c\u4ed6\u4eec\u611f\u5230\u56f0\u6270\u7684\u662f\uff0c\u8c37\u6b4c\u7684\u5b9a\u4f4d\u505a\u6cd5\u53ef\u80fd\u4f1a\u963b\u6b62\u4e00\u4e9b\u4eba\u5728\u75ab\u60c5\u671f\u95f4\u4f7f\u7528\u516c\u5171\u536b\u751f\u673a\u6784\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\n\u666e\u6797\u65af\u987f\u5927\u5b66\u8ba1\u7b97\u673a\u79d1\u5b66\u548c\u516c\u5171\u4e8b\u52a1\u52a9\u7406\u6559\u6388\u4e54\u7eb3\u68ee\u00b7\u6885\u8036\u5c14(Jonathan Mayer)\u8868\u793a\uff1a\u201c\u82f9\u679c-\u8c37\u6b4c\u66dd\u5149\u901a\u77e5\u8bbe\u8ba1\u7684\u76ee\u7684\u662f\u4fdd\u62a4\u9690\u79c1\uff0c\u51cf\u5c11\u91c7\u7528\u969c\u788d\u3002\u201d\n\u6b27\u6d32\u7684\u4e00\u4e9bAndroid\u7528\u6237\u8868\u793a\uff0c\u4ed6\u4eec\u611f\u89c9\u53d7\u5230\u4e86\u653f\u5e9c\u7684\u8bef\u5bfc\u3002\u4f8b\u5982\uff0c\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u4e0a\u7684\u8bf4\u660e\u4f1a\u6307\u5bfcAndroid\u7528\u6237\u6253\u5f00\u4f4d\u7f6e\uff0c\u4f46\u6ca1\u6709\u63d0\u5230\u8c37\u6b4c\uff0c\u4e5f\u6ca1\u6709\u63d0\u5230\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5173\u95ed\u4f4d\u7f6e\u8bbe\u7f6e\u4e2d\u7684\u51c6\u786e\u6027\u529f\u80fd\u6765\u963b\u6b62\u516c\u53f8\u786e\u5b9a\u4ed6\u4eec\u7684\u51c6\u786e\u4f4d\u7f6e\u3002\n\u82cf\u9ece\u4e16\u7684\u7535\u5b50\u5de5\u7a0b\u5e08\u9a6c\u897f\u83ab\u00b7\u8d5e\u8bfa\u5c3c(Massimo Zannoni)\u8bf4\uff0c\u201c\u6709\u4e86\u8fd9\u6b3e\u5e94\u7528\uff0c\u653f\u5e9c\u5f3a\u70c8\u547c\u5401\u4f60\u4ee5\u8d23\u4efb\u611f\u548c\u9053\u5fb7\u611f\uff0c\u5c06\u4f60\u7684\u5b9e\u65f6\u4f4d\u7f6e\u63d0\u4f9b\u7ed9\u4ece\u4e2d\u83b7\u5229\u7684\u5b9e\u4f53\uff0c\u4ee5\u4fdd\u62a4\u516c\u4f17\u5065\u5eb7\u3002\u201d\n\u4e39\u9ea6\u3001\u5fb7\u56fd\u3001\u62c9\u8131\u7ef4\u4e9a\u548c\u745e\u58eb\u7684\u536b\u751f\u5b98\u5458\u8868\u793a\uff0c\u4ed6\u4eec\u7684\u653f\u5e9c\u6545\u610f\u8bbe\u8ba1\u4e86\u56fd\u5bb6\u75c5\u6bd2\u8b66\u62a5\u5e94\u7528\u7a0b\u5e8f\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u4fdd\u62a4\u9690\u79c1\u3002\n\u5fb7\u56fd\u536b\u751f\u90e8\u8d1f\u8d23\u6570\u5b57\u5316\u548c\u521b\u65b0\u7684\u603b\u5e72\u4e8b\u6208\u7279\u5f17\u91cc\u5fb7\u00b7\u5362\u5fb7\u7ef4\u5e0c(Gottfried Ludewig)\u5728\u8c08\u5230\u8fd9\u6b3e\u5df2\u88ab\u4e0b\u8f7d\u8d85\u8fc71550\u4e07\u6b21\u7684Corona-Warn-App\u65f6\u8bf4\uff0c\u201c\u4efb\u4f55\u653f\u5e9c\u3001\u4efb\u4f55\u5b89\u5168\u673a\u6784\u90fd\u6ca1\u6709\u673a\u4f1a\u6ee5\u7528\u8fd9\u9879\u6280\u672f\u3002\u201d\u4ed6\u8bf4\uff0c\u8d85\u8fc7500\u540d\u75c5\u6bd2\u68c0\u6d4b\u5448\u9633\u6027\u7684\u4eba\u5df2\u7ecf\u4f7f\u7528\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u901a\u77e5\u5176\u4ed6\u7528\u6237\u53ef\u80fd\u63a5\u89e6\u5230\u75c5\u6bd2\u3002\n\u4ed6\u8865\u5145\u8bf4\uff0c\u5982\u679c\u8c37\u6b4c\u5c06\u4f4d\u7f6e\u6570\u636e\u7528\u4e8e\u4efb\u4f55\u5176\u4ed6\u76ee\u7684\uff0c\u800c\u4e0d\u662f\u542f\u7528\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u84dd\u7259\u670d\u52a1\uff0c\u6839\u636e\u6b27\u6d32\u6570\u636e\u4fdd\u62a4\u6cd5\uff0c\u5b83\u5c06\u9700\u8981\u6cd5\u5f8b\u4f9d\u636e\u624d\u80fd\u8fd9\u6837\u505a\u3002\n\u53c2\u4e0e\u8fd9\u6b3e\u5fb7\u56fd\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u4eba\u8868\u793a\uff0c\u8fd9\u662f\u8c37\u6b4c\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u4ed6\u4eec\u7684\u95ee\u9898\u3002\n\u5e2e\u52a9\u5f00\u53d1\u5fb7\u56fd\u5e94\u7528\u7a0b\u5e8f\u7684SAP\u53d1\u8a00\u4eba\u9a6c\u5e93\u65af\u00b7\u6e29\u514b\u52d2(Marcus Winkler)\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4\uff0c\u201c\u4f60\u9700\u8981\u5411\u8c37\u6b4c\u8be2\u95ee\u4ed6\u4eec\u64cd\u4f5c\u7cfb\u7edf\u7684\u89c4\u683c\u3002\u201d\u201c\u5982\u679c\u4f60\u6253\u5f00\u4f4d\u7f6e\u8ddf\u8e2a\u529f\u80fd\uff0c\u4f60\u4f1a\u6536\u5230\u4e00\u6761\u6765\u81ea\u64cd\u4f5c\u7cfb\u7edf\u7684\u6d88\u606f--\u8fd9\u4e0e\u5e94\u7528\u7a0b\u5e8f\u65e0\u5173\u3002\u201d\n\u8f6f\u4ef6\u5b89\u5168\u4e13\u5bb6Dmitrienko\u6559\u6388\u8868\u793a\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u5404\u56fd\u653f\u5e9c\u63a8\u52a8\u8c37\u6b4c\u505c\u6b62\u8981\u6c42\u75c5\u6bd2\u8b66\u62a5\u5e94\u7528\u7684Android\u7528\u6237\u6253\u5f00\u4f4d\u7f6e\u3002\n\u201c\u4ed6\u4eec\u6709\u8db3\u591f\u7684\u529b\u91cf\uff0c\u4ed6\u4eec\u751a\u81f3\u53ef\u4ee5\u5411\u8c37\u6b4c\u548c\u82f9\u679c\u8fd9\u6837\u7684\u5de8\u5934\u65bd\u538b\uff0c\u8981\u6c42\u4ed6\u4eec\u505a\u70b9\u4ec0\u4e48\uff0c\u201d\u5979\u8bf4\u3002", "note_en": "When Google and Apple announced plans in April for  free software to help alert people of their possible exposure to the coronavirus, the companies promoted it as \u201c privacy preserving\u201d and said it  would not track users\u2019 locations. Encouraged by those guarantees,  Germany,  Switzerland and other countries used the code to develop national virus alert apps that have been downloaded more than  20 million times.\n But for the apps to work on smartphones with Google\u2019s Android operating system \u2014 the most popular in the world \u2014 users must first turn on the device location setting, which enables GPS and may allow Google to determine their locations.\n Some government officials seemed surprised that the company could detect Android users\u2019 locations. After learning about it, Cecilie Lumbye Thorup, a spokeswoman for Denmark\u2019s Health Ministry, said her agency intended to \u201cstart a dialogue with Google about how they in general use location data.\u201d\n \u201cUsers should be able to use such proximity tracing apps without any bindings with other services,\u201d said Dr. Sang-Il Kim, the department head for digital transformation at Switzerland\u2019s Federal Office of Public Health, who oversees the country\u2019s virus-alert app.\n  Latvia said it had pressed Google on the issue as it was developing its virus app. \u201cWe don\u2019t like that the GPS must be on,\u201d said Elina Dimina, head of the infectious-disease surveillance unit at Latvia\u2019s Center for Disease Prevention and Control.\n Google\u2019s location requirement adds to the slew of  privacy and security concerns with virus-tracing apps, many of which were developed by governments before the new Apple-Google software became available. Government officials and epidemiologists say the apps can be a helpful complement to public health efforts to stem the pandemic. But human rights groups and technologists have warned that aggressive data collection and security flaws in many apps put hundreds of millions of people at risk for stalking, scams, identity theft or oppressive government tracking.\n Now the Android location issue could undermine the privacy promises that governments made to the public.\n  Pete Voss, a Google spokesman, said the virus alert apps that use the company\u2019s software do not use device location. That\u2019s including for people who test positive for the virus and use the apps to notify other users. The apps use Bluetooth scanning signals to detect smartphones that come into close contact with one another \u2014 without needing to know the devices\u2019 locations at all.\n  Since 2015, Google\u2019s Android system has required users to enable location on their phones to scan for other Bluetooth devices, Mr. Voss said, because some apps may use Bluetooth to infer user location. For instance, some apps use Bluetooth beacons in stores to help marketers understand which aisle a smartphone user may be in.\n Once Android users turn on location, however, Google  may determine their precise locations, using Wi-Fi, mobile networks and Bluetooth beacons, through a setting called Google Location Accuracy, and use the data to improve location services. Mr. Voss said apps that did not have user permission could not gain access to a person\u2019s Android device location.\n Apple, which does not require iPhone users of the virus apps to turn on location, declined to comment on Google\u2019s location practices.\n The Android location requirement underscores a troubling power imbalance between governments and two tech giants that dominate the mobile market, some security and privacy experts said. Countries using the software, they said, have little recourse against the new global standards that the companies are setting for public health technology.\n Google and Apple, for instance, bar government virus apps using their technology from tracking users\u2019 locations. But Google may determine and use the device locations of Android users of the apps, depending on their settings.\n \u201cWe are giving too much control to two big companies,\u201d said  Alexandra Dmitrienko, a professor of secure software systems at the University of W\u00fcrzburg in Germany. \u201cThey are monopolizing it.\u201d\n The companies\u2019 Bluetooth proximity detection technology springs from ideas developed by Singapore and  academics. It offers public health agencies an alternative to more invasive models that involve tracking users\u2019 fine-grained locations and sending private data like their names to centralized government servers.\n The Apple-Google software uses rotating ID codes to log close contact between app users \u201cto  help prevent tracking,\u201d the companies say. It also processes people\u2019s data on their phones \u2014 where governments cannot gain access to it.\n \u201cThis is what we call \u2018privacy by design,\u2019\u201d said Dr. Kim, the Swiss health official. \u201cThat means no personal data, that means no name, no phone number, even no technical identification of the hardware from email or smartphones\u201d are collected by the apps.\n  \u201cThis app deserves your trust. It protects your privacy,\u201d Angela Merkel, the chancellor of Germany, said in a recent  video address about her government\u2019s Corona-Warn-App, which is based on the Apple-Google model. \u201cNo geodata is collected,\u201d Ms. Merkel said.\n But privacy and security experts said they were troubled that Google\u2019s location practices might deter some people from using public health agency apps during the pandemic.\n \u201cThe point of the Apple-Google exposure notification design is to protect privacy and mitigate barriers to adoption,\u201d said  Jonathan Mayer, an assistant professor of computer science and public affairs at Princeton.\n Some Android users in Europe say they feel misled by their governments. Instructions on many of the apps direct Android users to turn on location, for instance,  but make no mention of Google or that users can stop the company from determining their precise locations by turning off the accuracy feature within the location setting.\n \u201cWith this app, you\u2019re invited, by the government strongly appealing to your sense of responsibility and morality, to give away your live location to entities that are getting a profit out of it, in order to protect public health,\u201d said Massimo Zannoni, an electronic engineer in Zurich.\n Health officials in Denmark, Germany, Latvia and Switzerland said their governments had deliberately designed their national virus alert apps for maximum privacy.\n \u201cNo government, no security agency has any chance to misuse the technology,\u201d Gottfried Ludewig, director general for digitalization and innovation for Germany\u2019s Ministry of Health, said of the Corona-Warn-App, which has been downloaded more than 15.5 million times. He said more than 500 people who tested positive for the virus had used the app to notify other users of possible virus exposure.\n He added that if Google used location data for any other purpose than enabling the Bluetooth services in the app, it would need legal grounds to do so under European data protection law.\n Others involved in the German app said it was Google\u2019s issue, not theirs.\n \u201cYou need to ask Google about the specs of their operating system,\u201d Marcus Winkler, a spokesman for SAP, which helped develop Germany\u2019s app, said in an email. \u201cIf you turn on location tracking you get a message from the operating system \u2014 this has nothing to do with the app.\u201d\n Professor Dmitrienko, the software security expert, said the solution was for governments to push Google to stop requiring Android users of the virus alert apps to turn on location.\n \u201cThey have sufficient power, and they could put pressure even on such giants as Google and Apple to do something about it,\u201d she said.", "posttime": "2020-07-21 11:40:58", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "google,\u8c37\u6b4c,\u75c5\u6bd2,\u7a0b\u5e8f,\u4f4d\u7f6e", "title": "\u8c37\u6b4c\u627f\u8bfa\u4f7f\u7528\u75c5\u6bd2\u5e94\u7528\u7a0b\u5e8f\u4fdd\u62a4\u9690\u79c1\uff0c\u4f46\u4ecd\u53ef\u4ee5\u6536\u96c6\u4f4d\u7f6e\u6570\u636e", "title_en": "Google Promises Privacy With Virus App But Can Still Collection Location Data", "transed": 1, "url": "https://www.nytimes.com/2020/07/20/technology/google-covid-tracker-app.html", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u75c5\u6bd2", "\u7a0b\u5e8f", "\u4f4d\u7f6e"]}, {"category": "", "categoryclass": "", "imagename": "15fd3b0fc71efb3971c20ed2021fda94.jpeg", "infoid": 1013202, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5468\u4e00\uff0c\u5728Thoma Bravo\u4ee55.94\u4ebf\u7f8e\u5143\u5c06\u8fd9\u5bb6\u4fdd\u9669\u6280\u672f\u516c\u53f8\u79c1\u6709\u5316\u7684\u6d88\u606f\u4f20\u51fa\u540e\uff0c\u8be5\u516c\u53f8\u80a1\u4ef7\u98d9\u5347\u903e70%\u3002\nThoma Bravo\u7684\u51fa\u4ef7\u4e3a\u6bcf\u80a113.10\u7f8e\u5143\uff0c\u8f83Majesco\u4e0a\u5468\u4e947.64\u7f8e\u5143\u7684\u6536\u76d8\u4ef7\u6ea2\u4ef771%\u3002Majesco\u8463\u4e8b\u4f1a\u6279\u51c6\u4e86\u8fd9\u9879\u5408\u5e76\uff0c\u9884\u8ba1\u5c06\u57282020\u5e74\u5e95\u6216\u4e4b\u524d\u5b8c\u6210\u3002Majesco\u80a1\u4ef7(Ticker\uff1aMJCO)\u5468\u4e00\u4e0b\u5348\u4e0a\u6da85.44\u7f8e\u5143\uff0c\u6da8\u5e4571%\uff0c\u81f313.08\u7f8e\u5143\u3002\u6807\u51c6\u666e\u5c14500\u6307\u6570\u4e0a\u6da80.6%\u3002\n\u603b\u90e8\u4f4d\u4e8e\u65b0\u6cfd\u897f\u5dde\u83ab\u91cc\u65af\u6566\u7684Majesco\u63d0\u4f9b\u57fa\u4e8e\u4e91\u7684\u4fdd\u9669\u8f6f\u4ef6\uff0c\u5e2e\u52a9\u5176\u4ed6\u4fdd\u9669\u516c\u53f8\u5b9e\u73b0\u73b0\u4ee3\u5316\u548c\u521b\u65b0\u3002\u5ba2\u6237\u5305\u62ec\u6021\u5b89(Aon)\u3001\u963f\u5947\u4fdd\u9669\u96c6\u56e2(Arch Insurance Group)\u548c\u5927\u90fd\u4f1a\u94f6\u884c(MET)\u3002\u6839\u636e\u4e00\u4efd\u58f0\u660e\uff0c\u9996\u5e2d\u6267\u884c\u5b98\u4e9a\u5f53\u00b7\u57c3\u5c14\u65af\u7279(Adam Elster)\u5c06\u5728\u51fa\u552e\u540e\u7ee7\u7eed\u9886\u5bfc\u516c\u53f8\u3002\nMajesco\u88ab\u79f0\u4e3a\u4fdd\u9669\u6280\u672f\uff0c\u6307\u7684\u662f\u5229\u7528\u6280\u672f\u98a0\u8986\u4fdd\u9669\u6a21\u5f0f\u7684\u516c\u53f8\u3002\u5c3d\u7ba1\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u8086\u8650\u7f8e\u56fd\u7ecf\u6d4e\uff0c\u4f46\u4fdd\u9669\u79d1\u6280\u884c\u4e1a\u4ecd\u4fdd\u6301\u6d3b\u8dc3\u3002\u672c\u6708\u7a0d\u65e9\uff0c\u8f83\u77e5\u540d\u7684\u4fdd\u9669\u516c\u53f8\u4e4b\u4e00--\u4f26\u6566\u91d1\u5c5e\u4ea4\u6613\u6240(LMND)\u7684IPO\u9996\u65e5\u6da8\u5e45\u8d85\u8fc7\u4e00\u500d\u3002\u5965\u65af\u5361\u5065\u5eb7\u57286\u6708\u4efd\u7b79\u96c6\u4e862.25\u4ebf\u7f8e\u5143\u3002\n\u6839\u636e\u6570\u636e\u548c\u7814\u7a76\u516c\u53f8PitchBook\u7684\u6570\u636e\uff0cMajesco\u662f\u9a6c\u65af\u7279\u514b\u7684\u524d\u4fdd\u9669\u4ea7\u54c1\u548c\u670d\u52a1\u4e1a\u52a1\u30022014\u5e74\uff0c\u603b\u90e8\u4f4d\u4e8e\u5b5f\u4e70\u7684\u9a6c\u65af\u7279\u514b(Mastek)\u6279\u51c6\u4e86\u5265\u79bb\u8be5\u90e8\u95e8\uff0c\u540d\u4e3aMajesco\uff0c\u5c06\u5728\u5b5f\u4e70\u8bc1\u5238\u4ea4\u6613\u6240(Bombay Stock Exchange)\u548c\u7ebd\u7ea6\u8bc1\u5238\u4ea4\u6613\u6240(New York Stock Exchange)\u4ea4\u6613\u3002\n\u5728\u8d22\u4ea7\u548c\u4f24\u4ea1\u3001\u4eba\u5bff\u4fdd\u9669\u548c\u5e74\u91d1\u4ee5\u53ca\u56e2\u4f53\u798f\u5229\u65b9\u9762\uff0c\u6709200\u591a\u5bb6\u516c\u53f8\u4f7f\u7528\u4e86Majesco\u7684\u6280\u672f\u3002\u57c3\u5c14\u65af\u7279\u5728\u58f0\u660e\u4e2d\u8bf4\uff1a\u201c\u6211\u4eec\u7684\u51b3\u5b9a\u662f\u6839\u636e\u80a1\u4e1c\u7684\u6700\u4f73\u5229\u76ca\u505a\u51fa\u7684\uff0c\u6211\u4eec\u76f8\u4fe1\u8fd9\u7b14\u4ea4\u6613\u4e5f\u5c06\u4f7f\u6211\u4eec\u76842400\u591a\u540d\u5458\u5de5\u548c200\u591a\u540d\u5ba2\u6237\u53d7\u76ca\u3002\u201d\nMajesco\u7684\u62cd\u5356\u662f\u5728\u5927\u6d41\u884c\u5f15\u53d1\u7684\u7ecf\u6d4e\u8870\u9000\u671f\u95f4\u542f\u52a8\u548c\u5b8c\u6210\u7684\u9996\u6279\u62cd\u5356\u8fc7\u7a0b\u4e4b\u4e00\u3002\n\u8fd9\u7b14\u4ea4\u6613\u662fThoma Bravo\u7684\u6700\u65b0\u4ea4\u6613\u3002\u672c\u6708\uff0c\u8fd9\u5bb6\u4e13\u6ce8\u4e8e\u6280\u672f\u7684\u6536\u8d2d\u516c\u53f8\u5b8c\u6210\u4e86\u5bf9Exostar\u7684\u6295\u8d44\uff0c\u5e76\u5c06SIGOS\u51fa\u552e\u7ed9\u4e86\u5f97\u5230Audax Private Equity\u652f\u6301\u7684Mobileum\u3002\u8be5\u516c\u53f8\u4e0a\u4e2a\u6708\u901a\u8fc7\u4e8c\u6b21\u51fa\u552e\u51fa\u552e\u4e86\u5176\u5728DT\u7684\u4e00\u5927\u90e8\u5206\u80a1\u4efd\u3002Thoma Bravo\u8fd8\u8d1f\u8d232019\u5e74\u6700\u70ed\u95e8\u7684\u4fdd\u9669\u79d1\u6280\u4ea4\u6613\u4e4b\u4e00\uff0c\u5f53\u65f6\u5b83\u4ee516.25\u4ebf\u7f8e\u5143\u7684\u4ef7\u683c\u5c06iPipeline\u51fa\u552e\u7ed9\uff0c\u76f8\u5f53\u4e8e\u5229\u606f\u3001\u7a0e\u9879\u3001\u6298\u65e7\u548c\u644a\u9500\u524d\u6536\u76ca(EBITDA)\u7684\u5927\u7ea620\u500d\u3002IPipline\u4e3a\u4eba\u5bff\u4fdd\u9669\u548c\u91d1\u878d\u670d\u52a1\u884c\u4e1a\u63d0\u4f9b\u57fa\u4e8e\u4e91\u7684\u8f6f\u4ef6\u3002\nThoma Bravo\u5408\u4f19\u4ebaA.J.\u7f57\u5fb7(A.J.Rohde)\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8868\u793a\uff0c\u201c\u6211\u4eec\u8ba4\u4e3aMajesco\u5728\u5e2e\u52a9\u5176\u4fdd\u9669\u5ba2\u6237\u66f4\u5feb\u5730\u8fdb\u5165\u4e91\u7aef\uff0c\u5e76\u5bf9\u4ed6\u4eec\u7684\u5185\u90e8\u548c\u5916\u90e8\u9762\u5bf9\u7cfb\u7edf\u8fdb\u884c\u73b0\u4ee3\u5316\u6539\u9020\u65b9\u9762\u5904\u4e8e\u9886\u5148\u5730\u4f4d\u3002\u201d\n\u91ce\u6751\u8bc1\u5238\u56fd\u9645(Nomura Securities International)\u5411Majesco\u63d0\u4f9b\u8d22\u52a1\u5efa\u8bae\uff0c\u8c22\u6cfc\u5fb7\uff0cMullin\uff0cRichter&amp\uff1bHampton LLP\u7684\u74e6\u83b1\u4e3d\u00b7\u5fb7\u8499\u7279(Valerie Demont)\u3001\u9a6c\u7279\u00b7\u9ea6\u5361\u5229\u666e(Matt McCalip)\u548c\u5927\u536b\u00b7\u7f57\u65af\u6258\u65af\u57fa(David Rostowsky)\u4ee5\u53ca\u51ef\u5766\u516c\u53f8(Khaitan&amp\uff1bCo)\u62c5\u4efb\u6cd5\u5f8b\u987e\u95ee\u3002Kirkland&amp\uff1bEllis LLP\u662fThoma Bravo\u7684\u5f8b\u5e08\u3002", "note_en": "Shares of   soared more than 70% Monday on news that Thoma Bravo was taking the insurance-technology company private in a $594 million deal.\n  Thoma Bravo is paying $13.10 a share, a 71% premium to Majesco\u2019s closing price of $7.64 on Friday. Majesco\u2019s board approved the merger, which is expected to close on or before the end of 2020. Majesco shares (Ticker: MJCO) rose $5.44, or 71%, to $13.08 Monday afternoon. The  S&amp;P 500 was up 0.6%.\n  Majesco, based in Morristown, N.J., provides cloud-based insurance software that helps other insurers modernize and innovate. Customers include   (AON), Arch Insurance Group and   (MET). CEO Adam Elster will continue to lead the company after the sale,  according to a statement.\n  Majesco is known as an insurtech, which refers to companies that use technology to upend the insurance model. The insurtech sector has remained active despite the Covid-19 pandemic that has ravaged the U.S. economy. The IPO of   (LMND), one of the more well-known insurtechs,  more than doubled on its first day of trading earlier this month. Oscar Health  raised $225 million in June.\n      Majesco is the former insurance products and services business of Mastek, according to data and research firm PitchBook. In 2014, Mastek, based in Mumbai,  approved the spinoff of the unit, calling it Majesco, that would trade on the Bombay Stock Exchange and the New York Stock Exchange.\n  More than 200 companies in property-and-casualty, life insurance and annuities, and group benefits use Majesco\u2019s technology. \u201cOur decision was made with the best interests of our stockholders and we believe that the transaction will also benefit our 2,400+ employees and our more than 200 customers,\u201d Elster said in the statement.\n  The Majesco sale is one of the first auction processes to be initiated and completed during the pandemic-induced recession.\n  The deal is the latest for Thoma Bravo. This month, the technology-focused buyout shop  closed its investment in Exostar and  sold SIGOS to Mobileum, which is backed by Audax Private Equity. The firm shed a  chunk of its stake in   (DT) via a secondary sale last month. Thoma Bravo was also responsible for one of the hottest insurtech deals of 2019, when it  sold iPipeline to   for $1.625 billion or roughly 20 times earnings before interest, taxes, depreciation, and amortization, or Ebitda. IPipline provides cloud-based software for the life-insurance and financial-services industry.\n  \u201cWe see Majesco as a leader in helping its insurance customers get to the cloud faster, and modernize their internal and external facing systems,\u201d A.J. Rohde, a Thoma Bravo partner, said in a statement.\n  Nomura Securities International provided financial advice to Majesco, while Valerie Demont, Matt McCalip and David Rostowsky of Sheppard, Mullin, Richter &amp; Hampton LLP, along with Khaitan &amp; Co, acted as legal advisors. Kirkland &amp; Ellis LLP was the attorney for Thoma Bravo.", "posttime": "2020-07-21 11:40:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8f6f\u4ef6,private,majesco", "title": "\u79c1\u52df\u80a1\u6743\u516c\u53f8Thoma Bravo\u540c\u610f\u4ee55.94\u4ebf\u7f8e\u5143\u6536\u8d2d\u5e76\u79c1\u6709\u5316\u603b\u90e8\u4f4d\u4e8e\u65b0\u6cfd\u897f\u5dde\u7684\u4fdd\u9669\u516c\u53f8\u4e91\u8f6f\u4ef6\u63d0\u4f9b\u5546Majesco", "title_en": "Private equity firm Thoma Bravo has agreed to buy and take private Majesco, a New Jersey-based provider of cloud software for insurance companies, for $594M", "transed": 1, "url": "https://www.barrons.com/articles/insurance-tech-company-majesco-stock-buyout-deal-thoma-bravo-insurance-technology-51595270463", "via": "", "real_tags": ["\u8f6f\u4ef6", "private", "majesco"]}, {"category": "", "categoryclass": "", "imagename": "be1290e8b4862a8fea9240c891a85b39.jpg", "infoid": 1013201, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u201c\u81ea\u7136\u901a\u8baf\u201d\u4e0a\u53d1\u8868\u7684\u4e00\u9879\u91cd\u5927\u7a81\u7834\u4e2d\uff0c\u89c4\u8303\u7eb3\u7c73\u7ed3\u6784\u6750\u6599\u5f62\u6210\u7684\u666e\u904d\u89c4\u5f8b\u5df2\u7ecf\u63ed\u5f00\u9762\u7eb1\u3002\u7531\u7c73\u5170\u5927\u5b66\u7684Alessio Zaccon\u6559\u6388\u548c\u963f\u59c6\u65af\u7279\u4e39\u5927\u5b66\u7684Peter Schall\u6559\u6388\u9886\u5bfc\u7684\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u8bc1\u660e\uff0c\u80f6\u4f53\u7eb3\u7c73\u7c92\u5b50\u805a\u96c6\u6210\u56fa\u4f53\u7c7b\u4f53\u7cfb\u8de8\u8d8a\u6750\u6599(\u80f6\u4f53\u51dd\u80f6)\u7684\u76f8\u53d8\u7531\u666e\u904d\u5b9a\u5f8b\u63cf\u8ff0\uff0c\u4e0e\u7ed9\u5b9a\u4f53\u7cfb\u7684\u7279\u6b8a\u7269\u7406\u5316\u5b66\u7279\u6027\u65e0\u5173\u3002\u7279\u522b\u662f\uff0c\u901a\u8fc7\u7406\u8bba\u548c\u5b9e\u9a8c\u7814\u7a76\u4e4b\u95f4\u7684\u5bc6\u5207\u534f\u540c\uff0c\u7814\u7a76\u4eba\u5458\u5728\u7ecf\u8fc7\u6570\u5341\u5e74\u7684\u6fc0\u70c8\u8fa9\u8bba\u540e\u9996\u6b21\u8868\u660e\uff0c\u6f5c\u5728\u7684\u76f8\u53d8(\u79f0\u4e3a\u80f6\u4f53\u51dd\u80f6\u5316)\u4e0e\u70ed\u529b\u5b66\u5e73\u8861\u4e4b\u5916\u53d1\u751f\u7684\u4e8c\u7ea7\u8fde\u7eed\u76f8\u53d8\u76f8\u4e00\u81f4\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\uff0c\u7814\u7a76\u4eba\u5458\u901a\u8fc7\u7406\u8bba\u548c\u5b9e\u9a8c\u7684\u5bc6\u5207\u5408\u4f5c\uff0c\u9996\u6b21\u8bc1\u660e\u4e86\u6f5c\u5728\u7684\u76f8\u53d8(\u79f0\u4e3a\u80f6\u4f53\u51dd\u80f6\u5316)\u4e0e\u8d85\u51fa\u70ed\u529b\u5b66\u5e73\u8861\u7684\u4e8c\u7ea7\u8fde\u7eed\u76f8\u53d8\u76f8\u4e00\u81f4\u3002\u5982\u679c\u67d0\u4e9b\u70ed\u529b\u5b66\u91cf\u5728\u76f8\u53d8\u8fc7\u7a0b\u4e2d\u5448\u73b0\u4e0d\u8fde\u7eed\u6027\uff0c\u5219\u5c06\u5bfc\u81f4\u4f8b\u5982\u4ece\u6c14\u4f53\u5230\u6db2\u4f53\u6216\u4ece\u6db2\u4f53\u5230\u56fa\u4f53\u7684\u76f8\u53d8\u5f52\u7c7b\u4e3a\u4e00\u7ea7\u76f8\u53d8\uff0c\u800c\u5982\u679c\u8fd9\u4e9b\u70ed\u529b\u5b66\u91cf\u5e73\u6ed1\u53d8\u5316\uff0c\u5219\u5c06\u5b83\u4eec\u5f52\u7c7b\u4e3a\u4e8c\u7ea7\u76f8\u53d8\u3002\n\u8fd9\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff0c\u56e0\u4e3a\u5141\u8bb8\u9884\u6d4b\u8f6c\u6362\u70b9\u53ca\u5176\u7279\u5f81\u7684\u6570\u5b66\u5b9a\u5f8b\uff0c\u4ee5\u53ca\u65b0\u76f8\u7684\u7269\u7406\u6027\u8d28\uff0c\u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\u662f\u975e\u5e38\u4e0d\u540c\u7684\u3002\u5728\u7eb3\u7c73\u9897\u7c92\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u51dd\u80f6\u8f6c\u53d8\u662f\u7279\u6b8a\u7684\uff0c\u56e0\u4e3a\u5206\u6563\u6eb6\u80f6\u76f8\u4e2d\u7684\u7eb3\u7c73\u9897\u7c92\u4f5c\u4e3a\u76f8\u4e92\u9694\u79bb\u7684\u5355\u4e2a\u9897\u7c92\u6216\u56e2\u7c07\u7684\u4e00\u90e8\u5206\u60ac\u6d6e\u5728\u6db2\u4f53(\u4f8b\u5982\u6c34)\u4e2d\uff0c\u800c\u5728\u7c7b\u56fa\u4f53\u6216\u51dd\u80f6\u76f8\u4e2d\uff0c\u56e2\u7c07\u76f8\u4e92\u8fde\u63a5\u6210\u5206\u5f62\u3002\u8fd9\u4e2a\u7f51\u7edc\u8868\u9762\u4e0a\u662f\u65e0\u5e8f\u7684\uff0c\u6216\u8005\u8bf4\u662f\u6df7\u6c8c\u7684\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u56e0\u4e3a\u5b83\u662f\u5206\u5f62\u7684\uff0c\u6240\u4ee5\u5448\u73b0\u51fa\u9ad8\u5ea6\u7684\u5bf9\u79f0\u6027\u3002\u6750\u6599\u7684\u5206\u5f62\u6027\u8d28\u610f\u5473\u7740\u7c92\u5b50\u7684\u5bc6\u5ea6\u5728\u7a7a\u95f4\u4e2d\u4ee5\u4e0e\u4ece\u6750\u6599\u4e2d\u7684\u6bcf\u4e2a\u70b9\u6d4b\u91cf\u5230\u7684\u76f8\u540c\u7684\u5e42\u5f8b\u8870\u51cf\uff0c\u5e76\u4e14\u63a7\u5236\u8fd9\u79cd\u8870\u51cf\u7684\u5e42\u5f8b\u6307\u6570\u88ab\u79f0\u4e3a(\u5206\u5f62\u5bf9\u8c61\u7684\u5176\u4ed6\u793a\u4f8b\u662f\u96ea\u82b1\u3001\u6cb3\u7f51\u3001\u5c71\u8109\u6216\u82f1\u56fd\u6d77\u5cb8)\u3002\n\u51e0\u5341\u5e74\u6765\uff0c\u79d1\u5b66\u5bb6\u4eec\u4e00\u76f4\u8bd5\u56fe\u786e\u5b9a\u6db2\u4f53\u4e2d\u6eb6\u89e3\u7684\u7eb3\u7c73\u9897\u7c92\u8f6c\u53d8\u4e3a\u5206\u5f62\u7f51\u7edc\u662f\u5426\u53d7\u7279\u5b9a\u7684\u70ed\u529b\u5b66\u76f8\u53d8\u63a7\u5236\u3002\u8fd9\u9879\u65b0\u7684\u7814\u7a76\u8868\u660e\uff0c\u76f8\u53d8\u53ca\u5176\u8c03\u8282\u6eb6\u80f6\u548c\u51dd\u80f6\u76f8\u4e2d\u56e2\u7c07\u5c3a\u5bf8\u5206\u5e03\u7684\u4e34\u754c\u6307\u6570\uff0c\u4ee5\u53ca\u7f51\u7edc\u672c\u8eab\u7684\u5206\u5f62\u7ef4\u6570(\u5373\u6750\u6599\u7684\u7ed3\u6784)\uff0c\u53ef\u4ee5\u4ece\u7406\u8bba\u4e0a\u5148\u9a8c\u5730\u8ba1\u7b97\u51fa\u6765\uff0c\u5e76\u4e14\u5df2\u7ecf\u5728\u80f6\u4f53\u4f53\u7cfb\u4e2d\u7528\u5171\u7126\u663e\u5fae\u955c\u6280\u672f\u5b9e\u9a8c\u6d4b\u5f97\u4e86\u5b8c\u5168\u76f8\u540c\u7684\u6307\u6570\u503c\uff0c\u5728\u8ba1\u7b97\u673a\u4e0a\u7684\u5206\u5b50\u52a8\u529b\u5b66\u6a21\u62df\u4e2d\u4e5f\u53d1\u73b0\u4e86\u76f8\u540c\u7684\u6307\u6570\u3002\n\u8fd9\u4e00\u7ed3\u679c\u4e3a\u8bbe\u8ba1\u3001\u5f00\u53d1\u548c\u63a7\u5236\u5177\u6709\u7406\u60f3\u5206\u5f62\u7ed3\u6784\u7684\u7eb3\u7c73\u7ed3\u6784\u6750\u6599\u4ee5\u53ca\u91cf\u5316\u548c\u4f18\u5316\u8fd9\u4e9b\u6750\u6599\u7684\u5de5\u4e1a\u5408\u6210\u8fc8\u51fa\u4e86\u91cd\u8981\u7684\u4e00\u6b65\u3002\u5176\u5e94\u7528\u8303\u56f4\u5f88\u5e7f\uff0c\u4ece\u7528\u4e8e\u519c\u4e1a\u7684\u80f6\u4f53\u51dd\u80f6(\u7528\u4e8e\u6d3b\u6027\u7269\u8d28\u7684\u63a7\u5236\u91ca\u653e)\u5230\u7528\u4e8e\u751f\u7269\u6280\u672f\u548c\u836f\u7269\u8f93\u9001\u7684\u86cb\u767d\u8d28\u51dd\u80f6\uff0c\u518d\u5230\u586b\u5145\u7eb3\u7c73\u9897\u7c92\u7f51\u7edc\u7684\u7eb3\u7c73\u590d\u5408\u6a61\u80f6\u6750\u6599\uff0c\u8fd9\u4e9b\u6750\u6599\u53ef\u4ee5\u51cf\u5c11\u8f66\u8f86\u8fd0\u8f93\u4e2d\u7684\u6c61\u67d3\u6392\u653e\u3002\u66f4\u591a\u4fe1\u606f\uff1aJoep Rouwhorst\u7b49\u4eba\u3002\u5177\u6709\u77ed\u7a0b\u5438\u5f15\u7684\u80f6\u4f53\u51dd\u80f6\u4e2d\u7684\u975e\u5e73\u8861\u8fde\u7eed\u76f8\u53d8\uff0c\u201c\u81ea\u7136\u901a\u8baf\u201d(2020)\u3002\u7535\u8bdd\uff1a10.1038/s4146720-17353-8", "note_en": "In a major breakthrough published in  Nature Communications, the universal laws which govern the formation of nanostructured materials have been unveiled. Researchers led by Prof. Alessio Zaccone at University of Milan and by Prof. Peter Schall at University of Amsterdam, have demonstrated that the phase transition through which colloidal nanoparticles aggregate into a solid-like system-spanning material (a colloidal gel) is described by universal laws that are independent of the peculiar physico-chemical characteristics of a given system.    In particular, by means of a close synergy between theory,   and experimental investigations, the researchers show, for the first time after decades of intense debate, that the underlying phase transformation (called colloidal gelation) coincides with a second-order continuous phase transition that occurs out of thermodynamic equilibrium. Phase transitions that lead, e.g., from a gas to a liquid or from a liquid to a solid are classified as first-order   if certain thermodynamic quantities present a discontinuity across the transition, whereas they are classified as second-order phase transitions if those thermodynamic quantities change smoothly.\n  This makes a huge difference, because the mathematical laws that allow predicting the transition point and its characteristics, as well as the physical properties of the new phase, are very different in the two cases. In the context of nanoparticles, the gelation transition is peculiar because the nanoparticles in the dispersed sol phase are suspended in a liquid (e.g., water) as single particles or part of &#34;clusters&#34; that are isolated from each other, whereas in the solid-like or gel phase the clusters interconnect into a fractal  . This network is apparently &#34;disordered&#34; or chaotic, but in reality, presents a high degree of symmetry because it is fractal. The fractal nature of the material implies that the density of particles decays in space with the same power-law as measured from every point in the material and the power-law exponent which governs this decay is called the   (other examples of fractal objects are snow flakes, river networks, mountains or the coast of Britain).\n  For decades, scientists have tried to determine whether the transformation of dissolved nanoparticles in a liquid into a fractal network is governed by a specific thermodynamic phase transition. The new study demonstrates that the phase transition, along with its critical exponents, which regulate the cluster size distributions both in the sol and in the gel phase, as well as the fractal dimension of the network itself (that is, the structure of the material), can be calculated theoretically a priori, and exactly the same values of exponents have been measured experimentally in colloidal systems using confocal microscopy techniques, and also the same exponents have been found in molecular dynamics simulations on the computer.\n  This result is a major step forward for the design, development and control of nanostructured materials with a desired fractal structure and to quantify and optimize the industrial synthesis of these materials. The applications are manifold and range from colloidal gels for agriculture (for the controlled release of active agents) to protein gels used in biotechnology and drug delivery, to nanocomposite rubber materials filled with nanoparticles   networks which allow for a reduction of polluting emissions in vehicle transport.        More information:\t\t\t\t\t\t\t\t\t\t\t\tJoep Rouwhorst et al. Nonequilibrium continuous phase transition in colloidal gelation with short-range attraction,  Nature Communications (2020).  DOI: 10.1038/s41467-020-17353-8", "posttime": "2020-07-21 11:39:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u51dd\u80f6,unveils,\u6750\u6599", "title": "\u4e00\u9879\u65b0\u7684\u7814\u7a76\u63ed\u793a\u4e86\u7eb3\u7c73\u9897\u7c92\u51dd\u80f6\u5316\u8f6c\u53d8\u7684\u673a\u7406", "title_en": "A new study unveils the mechanism of the nanoparticle gelation transition", "transed": 1, "url": "https://phys.org/news/2020-07-unveils-mechanism-nanoparticle-gelation-transition.html", "via": "", "real_tags": ["\u51dd\u80f6", "unveils", "\u6750\u6599"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1013200, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9632\u9508\u5206\u6790\u5668\u662f\u4e00\u4e2a\u65b0\u7684IDE\u540e\u7aef\uff0c\u7528\u4e8e\u9632\u9508\u7f16\u7a0b\u8bed\u8a00\u3002\u652f\u6301Open Collective\u4e0a\u7684\u9632\u9508\u5206\u6790\u5668\u3002\n\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u5b66\u4e60\u5982\u4f55\u5236\u4f5c\u4e00\u4e2a\u5feb\u901f\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff1a-)\u5b83\u7684\u7075\u611f\u6765\u81ea\u4e8e\u8fd9\u7bc7\u5173\u4e8e\u4f7f\u7528\u6570\u636e\u65e5\u5fd7\u8fdb\u884c\u8bed\u4e49\u5206\u6790\u7684\u4f18\u79c0\u6587\u7ae0\uff1ahttps://petevilter.me/post/datalog-typechecking/The\u53d1\u5e03\u53ea\u63cf\u8ff0\u4e86\u6700\u9ad8\u7ea7\u522b\u7684\u67b6\u6784\u3002\n\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u5c06\u67e5\u770bIDE\u7684\u4e3b\u5e72\u57fa\u7840\u7ed3\u6784\uff0c\u5b83\u670d\u52a1\u4e8e\u4e24\u4e2a\u76ee\u6807\uff1a\n\u7b2c\u4e00\u79cd\u67b6\u6784\u8ba9\u4eba\u60f3\u8d77Map-Reduce\u8303\u4f8b\uff0c\u5176\u601d\u60f3\u662f\u5c06\u5206\u6790\u5206\u6210\u76f8\u5bf9\u7b80\u5355\u7684\u7d22\u5f15\u9636\u6bb5\u548c\u5355\u72ec\u7684\u5b8c\u6574\u5206\u6790\u9636\u6bb5\u3002\n\u7d22\u5f15\u7684\u6838\u5fc3\u7ea6\u675f\u662f\u57fa\u4e8e\u6bcf\u4e2a\u6587\u4ef6\u8fd0\u884c\u3002\u7d22\u5f15\u5668\u83b7\u53d6\u5355\u4e2a\u6587\u4ef6\u7684\u6587\u672c\uff0c\u5bf9\u5176\u8fdb\u884c\u89e3\u6790\uff0c\u7136\u540e\u8f93\u51fa\u6709\u5173\u8be5\u6587\u4ef6\u7684\u4e00\u4e9b\u6570\u636e\u3002\u7d22\u5f15\u5668\u4e0d\u80fd\u63a5\u89e6\u5176\u4ed6\u6587\u4ef6\u3002\n\u5b8c\u5168\u5206\u6790\u53ef\u4ee5\u8bfb\u53d6\u5176\u4ed6\u6587\u4ef6\uff0c\u5e76\u4e14\u5b83\u5229\u7528\u7d22\u5f15\u4e2d\u7684\u4fe1\u606f\u6765\u4fdd\u5b58\u5de5\u4f5c\u3002\n\u8fd9\u542c\u8d77\u6765\u592a\u62bd\u8c61\u4e86\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u793a\u4f8b\u2009-\u2009Java\u3002\u5728Java\u8bed\u8a00\u4e2d\uff0c\u6bcf\u4e2a\u6587\u4ef6\u90fd\u4ee5\u5305\u58f0\u660e\u5f00\u59cb\u3002\u7d22\u5f15\u5668\u5c06\u5305\u7684\u540d\u79f0\u4e0e\u7c7b\u540d\u8fde\u63a5\u8d77\u6765\uff0c\u4ee5\u83b7\u5f97\u5b8c\u5168\u9650\u5b9a\u540d(FQN)\u3002\u5b83\u8fd8\u6536\u96c6\u7c7b\u4e2d\u58f0\u660e\u7684\u65b9\u6cd5\u96c6\u3001\u8d85\u7c7b\u548c\u63a5\u53e3\u7684\u5217\u8868\u7b49\u3002\n\u5c06\u6bcf\u4e2a\u6587\u4ef6\u7684\u6570\u636e\u5408\u5e76\u5230\u5c06FQN\u6620\u5c04\u5230\u7c7b\u7684\u7d22\u5f15\u4e2d\u3002\u8bf7\u6ce8\u610f\uff0c\u6784\u5efa\u6b64\u6620\u5c04\u662f\u4e00\u9879\u4ee4\u4eba\u5c34\u5c2c\u7684\u5e76\u884c\u4efb\u52a1\uff0c\u56e0\u4e3a\u6240\u6709\u6587\u4ef6\u90fd\u662f\u72ec\u7acb\u89e3\u6790\u7684\u3002\u6b64\u5916\uff0c\u6b64\u6620\u5c04\u7684\u66f4\u65b0\u6210\u672c\u5f88\u4f4e\u3002\u5f53\u6587\u4ef6\u66f4\u6539\u5230\u8fbe\u65f6\uff0c\u6b64\u6587\u4ef6\u7684\u8d21\u732e\u5c06\u4ece\u7d22\u5f15\u4e2d\u79fb\u9664\uff0c\u6587\u4ef6\u6587\u672c\u4e5f\u4f1a\u66f4\u6539\uff0c\u7d22\u5f15\u5668\u5c06\u5728\u65b0\u6587\u672c\u4e0a\u8fd0\u884c\u5e76\u6dfb\u52a0\u65b0\u8d21\u732e\u3002\u8981\u505a\u7684\u5de5\u4f5c\u91cf\u4e0e\u66f4\u6539\u7684\u6587\u4ef6\u6570\u91cf\u6210\u6b63\u6bd4\uff0c\u5e76\u4e14\u4e0e\u6587\u4ef6\u603b\u6570\u65e0\u5173\u3002\n//File./mypackage/Foo.java\u5305mypackage\uff1bimport java.util.*\uff1bpublic class foo{public static Bar f(){return new Bar()\uff1b}}//File./mypackage/Bar.java\u5305mypackage\uff1bpublic class Bar{public void g(){}}//File./Main.java import mypackage.Foo\uff1bpublic class main{public static void main(string[]args){foo.\u3002F()\u3002}}\u3002\n\u7528\u6237\u521a\u521a\u8f93\u5165\u4e86Foo.f().\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u51fa\u63a5\u6536\u5668\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u662fBar\uff0c\u5e76\u5efa\u8bae\u4f7f\u7528g\u4f5c\u4e3a\u5b8c\u6210\u7b26\u3002\n\u9996\u5148\uff0c\u5f53\u6587\u4ef6Main.java\u88ab\u4fee\u6539\u65f6\uff0c\u6211\u4eec\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e0a\u8fd0\u884c\u7d22\u5f15\u5668\uff0c\u6ca1\u6709\u4efb\u4f55\u6539\u53d8(\u8be5\u6587\u4ef6\u4ecd\u7136\u5305\u542b\u5e26\u6709\u9759\u6001Main\u65b9\u6cd5\u7684Main\u7c7b)\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u9700\u8981\u66f4\u65b0FQN\u7d22\u5f15\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u89e3\u6790\u540d\u79f0Foo\u3002\u6211\u4eec\u89e3\u6790\u6587\u4ef6\uff0c\u6ce8\u610f\u5bfc\u5165\u5e76\u5728FQN\u7d22\u5f15\u4e2d\u67e5\u627emypackage.foo\u3002\u5728\u7d22\u5f15\u4e2d\uff0c\u6211\u4eec\u8fd8\u53d1\u73b0foo\u6709\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5f\uff0c\u56e0\u6b64\u6211\u4eec\u4e5f\u89e3\u6790\u4e86\u8c03\u7528\u3002\u7d22\u5f15\u8fd8\u5b58\u50a8\u4e86f\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4f46\u662f\uff0c\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u5b83\u5c06\u5176\u5b58\u50a8\u4e3a\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5f15\u7528\u7c7bBar\u3002\n\u539f\u56e0\u662f\u5728Foo.java\u4e2d\u5bfc\u5165java.util.*\u3002Bar\u53ef\u4ee5\u5f15\u7528java.util.Bar\u6216mypackage.Bar.\u7d22\u5f15\u5668\u4e0d\u77e5\u9053\u662f\u54ea\u4e00\u4e2a\uff0c\u56e0\u4e3a\u5b83\u53ea\u80fd\u67e5\u770bFoo.java\u7684\u6587\u672c\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u867d\u7136\u7d22\u5f15\u786e\u5b9e\u5b58\u50a8\u4e86\u65b9\u6cd5\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u4f46\u5b83\u4ee5\u672a\u89e3\u6790\u7684\u5f62\u5f0f\u5b58\u50a8\u5b83\u4eec\u3002\n\u4e0b\u4e00\u6b65\u662f\u89e3\u6790Foo.java.Context\u4e2d\u7684IDENTIFIER Bar\u3002\u8fd9\u5c06\u4f7f\u7528FQN\u7d22\u5f15\uff0c\u5e76\u4f4d\u4e8e\u7c7bmypackage.Bar\u4e2d\u3002\u5728\u90a3\u91cc\u53ef\u4ee5\u627e\u5230\u6240\u9700\u7684\u65b9\u6cd5g\u3002\n\u603b\u5171\u53ea\u6709\u4e09\u4e2a\u6587\u4ef6\u5728\u5b8c\u6210\u671f\u95f4\u88ab\u89e6\u53ca\u3002FQN\u7d22\u5f15\u5141\u8bb8\u6211\u4eec\u5b8c\u5168\u5ffd\u7565\u9879\u76ee\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u6587\u4ef6\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\u6240\u63cf\u8ff0\u7684\u65b9\u6cd5\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4ece\u7d22\u5f15\u89e3\u6790\u7c7b\u578b\u9700\u8981\u5927\u91cf\u7684\u5de5\u4f5c\u3002\u4f8b\u5982\uff0c\u5982\u679c\u591a\u6b21\u8c03\u7528foo.f\uff0c\u8fd9\u9879\u5de5\u4f5c\u53ef\u80fd\u4f1a\u91cd\u590d\u3002\u4fee\u590d\u65b9\u6cd5\u662f\u6dfb\u52a0\u4e00\u4e2a\u7f13\u5b58\u3002\u540d\u79f0\u89e3\u6790\u7ed3\u679c\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\uff0c\u56e0\u6b64\u53ea\u9700\u652f\u4ed8\u4e00\u6b21\u6210\u672c\u3002\u4f7f\u7528\u7d22\u5f15\u7684\u4efb\u4f55\u66f4\u6539\u2009-\u2009\u90fd\u4f1a\u5b8c\u5168\u6e05\u9664\u7f13\u5b58\uff0c\u91cd\u65b0\u6784\u5efa\u7f13\u5b58\u7684\u6210\u672c\u5e76\u4e0d\u662f\u5f88\u9ad8\u3002\n\u6bcf\u4e2a\u6587\u4ef6\u90fd\u72ec\u7acb\u4e14\u5e76\u884c\u5730\u8fdb\u884c\u7d22\u5f15\uff0c\u751f\u6210\u5b58\u6839(\u2009-\u2009)\u4e00\u7ec4\u53ef\u89c1\u7684\u9876\u7ea7\u58f0\u660e\uff0c\u5176\u4e2d\u5305\u542b\u672a\u89e3\u6790\u7684\u7c7b\u578b\u3002\n\u540d\u79f0\u89e3\u6790\u662f\u60f0\u6027\u7684(\u6211\u4eec\u53ea\u5728\u9700\u8981\u7684\u65f6\u5019\u89e3\u6790\u5b58\u6839\u4e2d\u7684\u7c7b\u578b)\uff0c\u5e76\u4e14\u662f\u6709\u8bb0\u5fc6\u7684(\u6bcf\u4e2a\u7c7b\u578b\u53ea\u89e3\u6790\u4e00\u6b21)\u3002\n\u5982\u679c\u7f16\u8f91\u6ca1\u6709\u66f4\u6539\u6587\u4ef6\u7684\u5b58\u6839\uff0c\u5219\u4e0d\u9700\u8981\u66f4\u6539\u7d22\u5f15\u3002\n\u6ce8\u610f&#34\uff1b\u54d1\u7d22\u5f15\u548c&#34\uff1b\u667a\u80fd\u7f13\u5b58\u4e4b\u95f4\u6709\u8da3\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u524d\u8005\u53ef\u4ee5\u9012\u589e\u66f4\u65b0\uff0c\u540e\u8005\u5219\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u8ba1\u7b97\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7ed3\u5408\u4e86\u7b80\u5355\u6027\u548c\u5353\u8d8a\u7684\u6027\u80fd\u3002\u5927\u90e8\u5206\u5de5\u4f5c\u662f\u7d22\u5f15\u9636\u6bb5\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u5e76\u884c\uff0c\u751a\u81f3\u5c06\u5176\u5206\u5e03\u5728\u591a\u53f0\u673a\u5668\u4e0a\u3002\u6b64\u4f53\u7cfb\u7ed3\u6784\u7684\u4e24\u4e2a\u793a\u4f8b\u662fIntelliJ\u548cSorbet\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff0c\u5b83\u53ea\u6709\u5728\u5de5\u4f5c\u65f6\u624d\u8d77\u4f5c\u7528\uff0c\u2009-\u2009\u5e76\u4e0d\u662f\u6bcf\u79cd\u8bed\u8a00\u90fd\u6709\u5b9a\u4e49\u826f\u597d\u7684FQN\u6982\u5ff5\u3002\u6211\u8ba4\u4e3a\u603b\u7684\u6765\u8bf4\uff0c\u8bbe\u8ba1\u540d\u79f0\u89e3\u6790\u548c\u6a21\u5757\u7cfb\u7edf(\u8bed\u8a00\u4e2d\u7684\u5927\u591a\u6570\u4ee4\u4eba\u538c\u70e6\u7684\u90e8\u5206)\u4ee5\u4fbf\u5b83\u4eec\u80fd\u591f\u5f88\u597d\u5730\u4f7f\u7528Map-Reduce\u8303\u4f8b\u662f\u4e2a\u597d\u4e3b\u610f\u3002\n\u7981\u6b62\u6dfb\u52a0\u65b0\u7684\u9876\u7ea7\u58f0\u660e\u7684\u5143\u7f16\u7a0b\u5de5\u5177\uff0c\u6216\u8005\u9650\u5236\u5b83\u4eec\u7684\u65b9\u5f0f\u4f7f\u5b83\u4eec\u53ef\u4ee5\u88ab\u7d22\u5f15\u5668\u4f7f\u7528\u3002\u4f8b\u5982\uff0c\u4e00\u6b21\u8bbf\u95ee\u5355\u4e2a\u6587\u4ef6\u7684\u7c7b\u4f3c\u9884\u5904\u7406\u5668\u7684\u7f16\u8bd1\u5668\u63d2\u4ef6\u53ef\u80fd\u4f1a\u5f88\u597d\u3002\n\u786e\u4fdd\u6bcf\u4e2a\u6e90\u5143\u7d20\u5bf9\u5e94\u4e8e\u5355\u4e2a\u8bed\u4e49\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bed\u8a00\u652f\u6301\u6761\u4ef6\u7f16\u8bd1\uff0c\u8bf7\u786e\u4fdd\u5b83\u5728\u540d\u79f0\u89e3\u6790\u671f\u95f4(\u5982Kotlin\u7684Expect/Actual)\u5de5\u4f5c\uff0c\u800c\u4e0d\u662f\u5728\u89e3\u6790\u671f\u95f4(\u5982\u5927\u591a\u6570\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684\u6761\u4ef6\u7f16\u8bd1)\u3002\u5426\u5219\uff0c\u60a8\u5fc5\u987b\u7528\u4e0d\u540c\u7684\u6761\u4ef6\u7f16\u8bd1\u8bbe\u7f6e\u6765\u7d22\u5f15\u540c\u4e00\u6587\u4ef6\uff0c\u8fd9\u4f1a\u5f88\u6df7\u4e71\u3002\n\u6700\u540e\u4e00\u70b9\u503c\u5f97\u8be6\u7ec6\u8bf4\u660e\u3002\u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u7684\u94c1\u9508\u793a\u4f8b\uff1a\n//File\uff1a./foo.rs\u7279\u5f81T{fn f(&amp\uff1bself){}}//File\uff1a./bar.rs struct S\uff1b//File\uff1a./Where/ell.rs Impl T for S{}//File\uff1a./main.s use foo\uff1a\uff1at\uff1buse bar\uff1a\uff1as fn main(){let s=S\uff1bs.f()\uff1b}\u3002\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u627e\u5230S\u7ed3\u6784\u548cT\u7279\u5f81(\u56e0\u4e3a\u5b83\u4eec\u662f\u76f4\u63a5\u5bfc\u5165\u7684)\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u786e\u4fddS.f\u786e\u5b9e\u5f15\u7528T\u4e2d\u7684f\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u627e\u5230\u76f8\u5e94\u7684impl\uff0c\u5b83\u53ef\u4ee5\u5927\u81f4\u5728\u4efb\u4f55\u5730\u65b9\uff01\n\u8be5\u65b9\u6cd5\u7684\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u2009-\u2009\u53ea\u9700\u4f7f\u7528\u4f20\u7edf\u7f16\u8bd1\u5668\uff0c\u5e76\u5728\u5bfc\u5165\u6bcf\u4e2a\u7f16\u8bd1\u5355\u5143\u540e\u7acb\u5373\u5bf9\u5176\u72b6\u6001\u8fdb\u884c\u5feb\u7167\u3002\u4f8b\u5982\uff1a\n\u5728\u8fd9\u91cc\uff0c\u7f16\u8bd1\u5668\u5b8c\u5168\u5904\u7406iostream(\u4ee5\u53ca\u4efb\u4f55\u66f4\u591a\u7684\u5934)\uff0c\u5bf9\u5176\u72b6\u6001\u8fdb\u884c\u5feb\u7167\uff0c\u5e76\u81ea\u884c\u89e3\u6790\u7a0b\u5e8f\u3002\u5f53\u7528\u6237\u952e\u5165\u66f4\u591a\u5b57\u7b26\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u4ece\u7d27\u63a5\u5728\u5305\u542b\u4e4b\u540e\u7684\u4f4d\u7f6e\u91cd\u65b0\u542f\u52a8\u3002\u7531\u4e8e\u6bcf\u4e2a\u7f16\u8bd1\u5355\u5143\u672c\u8eab\u7684\u5927\u5c0f\u901a\u5e38\u662f\u5408\u7406\u7684\uff0c\u56e0\u6b64\u5206\u6790\u901f\u5ea6\u5f88\u5feb\u3002\n\u5982\u679c\u7528\u6237\u5728\u5934\u6587\u4ef6\u4e2d\u952e\u5165\u5185\u5bb9\uff0c\u5219\u9700\u8981\u4f7f\u7f13\u5b58\u65e0\u6548\u3002\u4f46\u662f\uff0c\u5bf9\u5934\u6587\u4ef6\u7684\u66f4\u6539\u76f8\u5bf9\u8f83\u5c11\uff0c\u5927\u591a\u6570\u4ee3\u7801\u90fd\u4f4d\u4e8e.cpp\u6587\u4ef6\u4e2d\u3002\n\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u6807\u5934\u5bf9\u5e94\u4e8e\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7684\u5b58\u6839\uff0c\u6709\u4e24\u4e2a\u663e\u8457\u7684\u533a\u522b\uff1a\n\u662f\u7528\u6237\u8d1f\u8d23\u751f\u6210\u5b58\u6839\uff0c\u800c\u4e0d\u662f\u5de5\u5177\u3002\n\u4e0e\u5b58\u6839\u4e0d\u540c\uff0c\u6807\u5934\u4e0d\u80fd\u76f8\u4e92\u9012\u5f52\u3002\u5b58\u6839\u5b58\u50a8\u672a\u89e3\u6790\u7684\u7c7b\u578b\uff0c\u4f46\u53ef\u4ee5\u5728\u5b8c\u6210\u5206\u6790\u540e\u521b\u5efaInclude\u5feb\u7167\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u5de8\u5927\u597d\u5904\u662f\u5b83\u5141\u8bb8\u91cd\u7528\u73b0\u6709\u7684\u6279\u5904\u7406\u7f16\u8bd1\u5668\u3002\u672c\u6587\u63cf\u8ff0\u7684\u53e6\u5916\u4e24\u79cd\u65b9\u6cd5\u901a\u5e38\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u5668\u91cd\u5199\u3002\u7f3a\u70b9\u662f\u51e0\u4e4e\u6ca1\u6709\u4eba\u559c\u6b22\u5934\u6587\u4ef6\u548c\u8f6c\u53d1\u58f0\u660e\u3002\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u662f\u4ee5\u4efb\u4f55\u6709\u8da3\u7684\u65b9\u5f0f\u9012\u589e\u7684\u3002\u5982\u679c\u6709\u4ec0\u4e48\u53d8\u5316\uff0c\u8ba9\u6211\u4eec\u5b8c\u5168\u6e05\u9664\u7f13\u5b58\u3002\u5728\u7b2c\u4e00\u79cd\u65b9\u6cd5\u4e2d\uff0c\u7d22\u5f15\u66f4\u65b0\u4e2d\u6709\u4e00\u70b9\u70b9\u9012\u589e\uff0c\u4f46\u662f\u2009-\u2009\u5220\u9664\u65e7\u952e\uff0c\u6dfb\u52a0\u65b0\u952e\u51e0\u4e4e\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\n\u8fd9\u662f\u56e0\u4e3a\u8ba9\u548c\u96c6\u6210\u5f00\u53d1\u53d8\u5f97\u5feb\u901f\u7684\u4e0d\u662f\u589e\u91cf\uff0c\u800c\u662f\u61d2\u60f0(lastness\u2009-\u2009)\uff0c\u5373\u5b8c\u5168\u8df3\u8fc7\u5927\u91cf\u4ee3\u7801\u7684\u80fd\u529b\u3002\n\u4f7f\u7528map-duce\uff0c\u7d22\u5f15\u51c6\u786e\u5730\u544a\u8bc9\u6211\u4eec\u4f7f\u7528\u4e86\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u54ea\u4e00\u5c0f\u90e8\u5206\u6587\u4ef6\uff0c\u5e76\u4e14\u503c\u5f97\u67e5\u770b\u3002Headers\u4f7f\u6211\u4eec\u514d\u53d7\u5927\u90e8\u5206\u5b9e\u73b0\u4ee3\u7801\u7684\u5f71\u54cd\u3002\n#[MACRO_USE]\u5916\u90e8\u7bb1\u67b6\u4f4d\u6807\u5fd7\uff1b\u4f4d\u6807\u5fd7\uff01{struct\u6807\u5fd7\uff1au32{const A=0b00000001\uff1bconst B=0b00000010\uff1bconst C=0b00000100\uff1bconst ABC=self\uff1a\uff1aa.bits|self\uff1a\uff1ab.bits|self\uff1a\uff1ac.bits\uff1b}}\u3002\n\u4f4d\u6807\u5fd7\u662f\u6765\u81ea\u53e6\u4e00\u4e2a\u677f\u6761\u7bb1\u5e76\u5b9a\u4e49\u9876\u7ea7\u58f0\u660e\u7684\u5b8f\u3002\u6211\u4eec\u4e0d\u80fd\u5c06\u5b8f\u5c55\u5f00\u7684\u7ed3\u679c\u653e\u5165\u7d22\u5f15\u4e2d\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u6587\u4ef6\u4e2d\u7684\u5b8f\u5b9a\u4e49\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5b8f\u8c03\u7528\u81ea\u8eab\u653e\u5165\u7d22\u5f15\u4e2d\uff0c\u4f46\u8fd9\u5927\u591a\u662f\u65e0\u7528\u7684\uff0c\u56e0\u4e3a\u7531\u5b8f\u58f0\u660e\u7684\u9879\u5c06\u4e22\u5931\u7d22\u5f15\u3002\n\u6a21\u5757foo\u548cbar\u5f15\u7528\u76f8\u540c\u7684\u6587\u4ef6foo.rs\uff0c\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740foo.rs\u4e2d\u7684\u9879\u662f\u91cd\u590d\u7684\u3002\u5982\u679cfoo.rs\u5305\u542b\u58f0\u660estruct S\uff1b\uff0c\u90a3\u4e48foo\uff1a\uff1as\u548cbar\uff1a\uff1as\u662f\u4e0d\u540c\u7c7b\u578b\u7684\u3002\u60a8\u4e5f\u4e0d\u80fd\u5c06\u5176\u653e\u5165\u7d22\u5f15\u4e2d\uff0c\u56e0\u4e3a\u90a3\u4e9bmod\u58f0\u660e\u4f4d\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002\n\u7b2c\u4e8c\u79cd\u65b9\u6cd5\u4e5f\u4e0d\u8d77\u4f5c\u7528\u3002\u5728C++\u4e2d\uff0c\u7f16\u8bd1\u5355\u5143\u662f\u5355\u4e2a\u6587\u4ef6\u3002\u5728Rust\u4e2d\uff0c\u7f16\u8bd1\u5355\u5143\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u673a\u7bb1\uff0c\u5b83\u7531\u8bb8\u591a\u6587\u4ef6\u7ec4\u6210\uff0c\u901a\u5e38\u8981\u5927\u5f97\u591a\u3002\u800c\u4e14Rust\u6709\u8fc7\u7a0b\u6027\u5b8f\uff0c\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u662f\u4ee3\u7801\u7684\u8868\u9762\u5206\u6790\u4e5f\u53ef\u80fd\u9700\u8981\u65e0\u9650\u7684\u65f6\u95f4\u3002\u800c\u4e14\u6ca1\u6709\u5934\u6587\u4ef6\uff0c\u6240\u4ee5IDE\u5fc5\u987b\u5904\u7406\u6574\u4e2a\u673a\u7bb1\u3002\u6b64\u5916\uff0c\u673a\u7bb1\u5185\u7684\u540d\u79f0\u89e3\u6790\u8981\u590d\u6742\u5f97\u591a(\u4f7f\u7528\u524d\u58f0\u660e\u548c\u5b9a\u70b9\u8fed\u4ee3\u4e0e\u5b8f\u4ea4\u7ec7\u5728\u4e00\u8d77)\u3002\u6b64\u5916\uff0c\u5728Rust\u4e2d\uff0c\u7f16\u8bd1\u5355\u5143\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u3002\u6b64\u5916\uff0cRust\u4e2d\u7684\u7f16\u8bd1\u5355\u5143\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u673a\u7bb1\uff0c\u5b83\u7531\u8bb8\u591a\u6587\u4ef6\u7ec4\u6210\uff0c\u901a\u5e38\u8981\u5927\u5f97\u591a\u3002\u6b64\u5916\uff0cRUST\u6709\u8fc7\u7a0b\u6027\u5b8f\uff0c\u8fd9\u610f\u5473\u7740\u5373\u4f7f\u662f\u4ee3\u7801\u7684\u8868\u9762\u5206\u6790\u4e5f\u4f1a\u82b1\u8d39\u65e0\u9650\u7684\u65f6\u95f4\uff0c\u800c\u4e14\u6ca1\u6709\u5934\u6587\u4ef6\uff0c\u6240\u4ee5IDE\u5fc5\u987b\u5904\u7406\u6574\u4e2a\u673a\u7bb1\u3002\n\u4f3c\u4e4e\u7eaf\u7cb9\u57fa\u4e8e\u61d2\u60f0\u7684\u6a21\u578b\u4e0d\u9002\u7528\u4e8eRust\uff0c\u61d2\u60f0\u7684\u6700\u5c0f\u53ef\u884c\u5355\u4f4d\uff0c\u4e00\u4e2a\u677f\u6761\u7bb1\uff0c\u4ecd\u7136\u592a\u5927\u4e86\u3002\n\u4e3a\u6b64\uff0c\u5728\u9508\u8680\u5206\u6790\u5668\u4e2d\uff0c\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u667a\u80fd\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u7528\u589e\u91cf\u6765\u5f25\u8865\u61d2\u60f0\u7684\u4e0d\u8db3\uff0c\u5177\u4f53\u5730\u8bf4\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u901a\u7528\u7684\u6846\u67b6\u6765\u589e\u91cf\u8ba1\u7b97\u2009-\u2009SALSA\u3002\nSALSA\u80cc\u540e\u7684\u601d\u60f3\u76f8\u5f53\u7b80\u5355\uff0c\u2009-\u2009\u7f16\u8bd1\u5668\u5185\u7684\u6240\u6709\u51fd\u6570\u8c03\u7528\u90fd\u4f1a\u88ab\u68c0\u6d4b\uff0c\u4ee5\u8bb0\u5f55\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u8c03\u7528\u4e86\u54ea\u4e9b\u5176\u4ed6\u51fd\u6570\u3002\u8bb0\u5f55\u7684\u8ddf\u8e2a\u7528\u4e8e\u5b9e\u73b0\u7ec6\u7c92\u5ea6\u589e\u91cf\u3002\u5982\u679c\u4fee\u6539\u540e\u6240\u6709\u4f9d\u8d56\u9879\u7684\u7ed3\u679c\u90fd\u76f8\u540c\uff0c\u5219\u91cd\u7528\u65e7\u7ed3\u679c\u3002\n\u5982\u679c\u51fd\u6570\u7531\u4e8e\u4f9d\u8d56\u5173\u7cfb\u7684\u6539\u53d8\u800c\u91cd\u65b0\u6267\u884c\uff0c\u8fd8\u4f1a\u6709\u4e00\u4e2a\u989d\u5916\u7684\u3001\u5173\u952e\u7684\u626d\u66f2\u2009-\u2009\uff0c\u65b0\u7ed3\u679c\u5c06\u4e0e\u65e7\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u5c3d\u7ba1\u8f93\u5165\u4e0d\u540c\uff0c\u4f46\u5b83\u4eec\u662f\u76f8\u540c\u7684\uff0c\u5219\u65e0\u6548\u7684\u4f20\u64ad\u5c06\u505c\u6b62\u3002\n\u4f7f\u7528\u8fd9\u4e2a\u5f15\u64ce\uff0c\u6211\u4eec\u80fd\u591f\u5b9e\u73b0\u4e00\u79cd\u76f8\u5f53\u5947\u7279\u7684\u66f4\u65b0\u7b56\u7565\u3002\u4e0eMap Reduce\u65b9\u6cd5\u4e0d\u540c\uff0c\u6211\u4eec\u7684\u7d22\u5f15\u53ef\u4ee5\u5b58\u50a8\u89e3\u6790\u7684\u7c7b\u578b\uff0c\u8fd9\u4e9b\u7c7b\u578b\u53ea\u6709\u5728\u9876\u7ea7\u66f4\u6539\u53d1\u751f\u65f6\u624d\u4f1a\u5931\u6548\u3002\u5373\u4f7f\u5728\u9876\u7ea7\u66f4\u6539\u4e4b\u540e\uff0c\u6211\u4eec\u4e5f\u80fd\u591f\u91cd\u7528\u5927\u591a\u6570\u5b8f\u5c55\u5f00\u7684\u7ed3\u679c\u3002\u5728\u9876\u7ea7\u5b8f\u4e2d\u952e\u5165\u4e5f\u4e0d\u4f1a\u4f7f\u7f13\u5b58\u5931\u6548\uff0c\u9664\u975e\u5b8f\u7684\u5c55\u5f00\u5f15\u5165\u4e86\u4e00\u7ec4\u4e0d\u540c\u7684\u9879\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e3b\u8981\u597d\u5904\u662f\u901a\u7528\u6027\u548c\u6b63\u786e\u6027\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528\u589e\u91cf\u8ba1\u7b97\u5f15\u64ce\uff0c\u90a3\u4e48\u5c1d\u8bd5\u6784\u5efa\u8ba1\u7b97\u7684\u65b9\u5f0f\u5c31\u4f1a\u53d8\u5f97\u76f8\u5bf9\u5bb9\u6613\u3002\u4ee3\u7801\u770b\u8d77\u6765\u5927\u591a\u50cf\u4e00\u4e2a\u4e4f\u5473\u7684\u547d\u4ee4\u5f0f\u7f16\u8bd1\u5668\uff0c\u5e76\u4e14\u60a8\u4e0d\u4f1a\u51fa\u73b0\u7f13\u5b58\u65e0\u6548\u9519\u8bef(\u6211\u4eec\u6709\u4e00\u4e2a\uff0c\u56e0\u4e3a\u8fc7\u7a0b\u6027\u5b8f\u662f\u4e0d\u786e\u5b9a\u7684)\u3002\n\u4e3b\u8981\u7f3a\u70b9\u662f\u989d\u5916\u7684\u590d\u6742\u6027\u3001\u8f83\u6162\u7684\u6027\u80fd(\u7ec6\u7c92\u5ea6\u8ddf\u8e2a\u4f9d\u8d56\u9879\u9700\u8981\u65f6\u95f4\u548c\u5185\u5b58)\uff0c\u5e76\u4e14\u7ed9\u4eba\u7684\u611f\u89c9\u662f\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8fd8\u662f\u4e00\u4e2a\u672a\u77e5\u7684\u9886\u57df\uff1a-)", "note_en": "rust-analyzer is a new &#34;IDE backend&#34; for the  Rust programming language.Support rust-analyzer on  Open Collective.\n In this post, we\u2019ll learn how to make a snappy IDE, in three different ways :-)It was inspired by this excellent article about using datalog for semantic analysis:  https://petevilter.me/post/datalog-typechecking/The post describes only the highest-level architecture.There\u2019s  much more to implementing a full-blown IDE.\n Specifically, we\u2019ll look at the backbone infrastructure of an IDE which serves two goals:\n The first architecture is reminiscent of the map-reduce paradigm.The idea is to split analysis into relatively simple indexing phase, and a separate full analysis phase.\n The core constraint of indexing is that it runs on a per-file basis.The indexer takes the text of a single file, parses it, and spits out some data about the file.The indexer can\u2019t touch other files.\n Full analysis can read other files, and it leverages information from the index to save work.\n This all sounds way too abstract, so let\u2019s look at a specific example\u2009\u2014\u2009Java.In Java, each file starts with a package declaration.The indexer concatenates the name of the package with a class name to get a fully-qualified name (FQN).It also collects the set of methods declared in the class, the list of superclasses and interfaces, etc.\n Per-file data is merged into an index which maps FQNs to classes.Note that constructing this mapping is an embarrassingly parallel task\u2009\u2014\u2009all files are parsed independently.Moreover, this map is cheap to update.When a file change arrives, this file\u2019s contribution from the index is removed, the text of the file is changed and the indexer runs on the new text and adds the new contributions.The amount of work to do is proportional to the number of changed files, and is independent from the total number of files.\n  // File ./mypackage/Foo.java package  mypackage ; import  java.util.* ; public  class  Foo  {  public  static  Bar  f ()  {  return  new  Bar ();  } } // File ./mypackage/Bar.java package  mypackage ; public  class  Bar  {  public  void  g ()  {} } // File ./Main.java import  mypackage.Foo ; public  class  Main  {  public  static  void  main ( String []  args )  {  Foo . f ().  } }\n The user has just typed  Foo.f()., and we need to figure out that the type of receiver expression is  Bar, and suggest  g as a completion.\n First, as the file  Main.java is modified, we run the indexer on this single file.Nothing has changed (the file still contains the class  Main with a static  main method), so we don\u2019t need to update the FQN index.\n Next, we need to resolve the name  Foo.We parse the file, notice an  import and look up  mypackage.Foo in the FQN index.In the index, we also find that  Foo has a static method  f, so we resolve the call as well.The index also stores the return type of  f, but, and this is crucial, it stores it as a string  &#34;Bar&#34;, and not as a direct reference to the class  Bar.\n The reason for that is  import java.util.* in  Foo.java. Bar can refer either to  java.util.Bar or to  mypackage.Bar.The indexer doesn\u2019t know which one, because it can look  only at the text of  Foo.java.In other words, while the index does store the return types of methods, it stores them in an unresolved form.\n The next step is to resolve the identifier  Bar in the context of  Foo.java.This uses the FQN index, and lands in the class  mypackage.Bar.There the desired method  g is found.\n Altogether, only three files were touched during completion.The FQN index allowed us to completely ignore all the other files in the project.\n One problem with the approach described thus far is that resolving types from the index requires a non-trivial amount of work.This work might be duplicated if, for example,  Foo.f is called several times.The fix is to add a cache.Name resolution results are memoized, so that the cost is paid only once.The cache is blown away completely on any change\u2009\u2014\u2009with an index, reconstructing the cache is not that costly.\n  Each file is being indexed, independently and in parallel, producing a &#34;stub&#34;\u2009\u2014\u2009a set of visible top-level declarations, with unresolved types.\n   Name resolution is lazy (we only resolve a type from the stub when we need it) and memoized (each type is resolved only once).\n  if the edit doesn\u2019t change the file\u2019s stub, no change to the index is required.\n Note an interesting interplay between &#34;dumb&#34; indexes which can be updated incrementally, and &#34;smart&#34; caches, which are re-computed from scratch.\n This approach combines simplicity and stellar performance.The bulk of work is the indexing phase, and you can parallelize and even distribute it across several machine.Two examples of this architecture are  IntelliJ and  Sorbet.\n The main drawback of this approach is that it works only when it works\u2009\u2014\u2009not every language has a well-defined FQN concept.I think overall it\u2019s a good idea to design name resolution and module systems (mostly boring parts of a language) such that they work well with the map-reduce paradigm.\n Forbid meta-programming facilities which add new top-level declarations, or restrict them in such way that they can be used by the indexer.For example, preprocessor-like compiler plugins that access a single file at a time might be fine.\n Make sure that each source element corresponds to a single semantic element.For example, if the language supports conditional compilation, make sure that it works during name resolution (like Kotlin\u2019s  expect/actual) and not during parsing (like conditional compilation in most other languages).Otherwise, you\u2019d have to index the same file with different conditional compilation settings, and that is messy.\n The last point is worth elaborating. Let\u2019s look at the following Rust example:\n // File: ./foo.rs trait  T  {  fn  f ( &amp; self )  {} } // File: ./bar.rs struct  S ; // File: ./somewhere/else.rs impl  T  for  S  {} // File: ./main.s use  foo :: T ; use  bar :: S fn  main ()  {  let  s  =  S ;  s .f (); }\n Here, we can easily find the  S struct and the  T trait (as they are imported directly).However, to make sure that  s.f indeed refers to  f from  T, we also need to find the corresponding  impl, and that can be roughly anywhere!\n The idea of the approach is simple\u2009\u2014\u2009just use a traditional compiler and snapshot its state immediately after imports for each compilation unit.An example:\n  Here, the compiler fully processes  iostream (and any further headers included), snapshots its state and proceeds with parsing the program itself.When the user types more characters, the compiler restarts from the point just after the include.As the size of each compilation unit itself is usually reasonable, the analysis is fast.\n If the user types something into the header file, then the caches need to be invalidated.However, changes to headers are comparatively rare, most of the code lives in  .cpp files.\n In a sense, headers correspond to the stubs of the first approach, with two notable differences:\n It\u2019s the user who is tasked with producing a stub, not the tool.\n Unlike stubs, headers can\u2019t be mutually recursive.Stubs store unresolved types, but includes can be snapshotted after complete analysis.\n  The huge benefit of this approach is that it allows re-use of an existing batch compiler.The two other approaches described in this article typically result in compiler re-writes.The drawback is that almost nobody likes headers and forward declarations.\n Note how neither of the two approaches is incremental in any interesting way.It is mostly &#34;if something has changed, let\u2019s clear the caches completely&#34;.There\u2019s a tiny bit of incrementality in the index update in the first approach, but it is almost trivial\u2009\u2014\u2009remove old keys, add new keys.\n This is because it\u2019s not the incrementality that makes and IDE fast.Rather, it\u2019s laziness\u2009\u2014\u2009the ability to skip huge swaths of code altogether.\n With map-reduce, the index tells us exactly which small set of files is used from the current file and is worth looking at.Headers shield us from most of the implementation code.\n #[macro_use] extern  crate  bitflags ; bitflags!  {  struct  Flags :  u32  {  const  A  =  0b00000001 ;  const  B  =  0b00000010 ;  const  C  =  0b00000100 ;  const  ABC  =  Self :: A .bits  |  Self :: B .bits  |  Self :: C .bits ;  } }\n bitflags is macro which comes from another crate and defines a top-level declaration.We can\u2019t put the results of macro expansion into the index, because it depends on a macro definition in another file.We can put the macro call itself into an index, but that is mostly useless, as the items, declared by the macro, would miss the index.\n   Modules  foo and  bar refer to the same file,  foo.rs, which effectively means that items from  foo.rs are duplicated.If  foo.rs contains the declaration  struct S;, then  foo::S and  bar::S are different types.You also can\u2019t fit that into an index, because those  mod declarations are in a different file.\n The second approach doesn\u2019t work either.In C++, the compilation unit is a single file.In Rust, the compilation unit is a whole crate, which consists of many files and is typically much bigger.And Rust has procedural macros, which means that even surface analysis of code can take an unbounded amount of time.And there are no header files, so the IDE has to process the whole crate.Additionally, intra-crate name resolution is much more complicated (declaration before use vs. fixed point iteration intertwined with macro expansion).\n It seems that purely laziness based models do not work for Rust.The minimal feasible unit of laziness, a crate, is still too big.\n For this reason, in rust-analyzer we resort to a smart solution.We compensate for the deficit of laziness with incrementality.Specifically, we use a generic framework for incremental computation\u2009\u2014\u2009 salsa.\n The idea behind salsa is rather simple\u2009\u2014\u2009all function calls inside the compiler are instrumented to record which other functions were called during their execution.The recorded traces are used to implement fine-grained incrementality.If after modification the results of all of the dependencies are the same, the old result is reused.\n There\u2019s also an additional, crucial, twist\u2009\u2014\u2009if a function is re-executed due to a change in dependency, the new result is compared with the old one.If despite a different input they are the same, the propagation of invalidation stops.\n Using this engine, we were able to implement a rather fancy update strategy.Unlike the map reduce approach, our indices can store resolved types, which are invalidated only when a top-level change occurs.Even after a top-level change, we are able to re-use results of most macro expansions.And typing inside of a top-level macro also doesn\u2019t invalidate caches unless the expansion of the macro introduces a different set of items.\n The main benefit of this approach is generality and correctness.If you have an incremental computation engine at your disposal, it becomes relatively easy to experiment with the way you structure the computation.The code looks mostly like a boring imperative compiler, and you are immune to cache invalidation bugs (we had one, due to procedural macros being non-deterministic).\n The main drawback is extra complexity, slower performance (fine-grained tracking of dependencies takes time and memory) and a feeling that this is a somewhat uncharted territory yet :-)", "posttime": "2020-07-21 11:39:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,responsive,\u6587\u4ef6", "title": "\u54cd\u5e94\u5f0f\u96c6\u6210\u5f00\u53d1\u73af\u5883\u7684\u4e09\u79cd\u4f53\u7cfb\u7ed3\u6784", "title_en": "Three Architectures for a Responsive IDE", "transed": 1, "url": "https://rust-analyzer.github.io/blog/2020/07/20/three-architectures-for-responsive-ide.html", "via": "", "real_tags": ["\u5f00\u53d1", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "cb2f8da1fef7fe2d4e649e091447eae1.jpg", "infoid": 1013199, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e92\u8054\u7f51\u7684\u5927\u7247\u533a\u57df\u662f\u4e00\u4e2a\u6c61\u6c34\u6c60\u3002\u5728\u4eca\u5929\u4e4b\u524d\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5bf9\u4eba\u7c7b\u72b6\u51b5\u7684\u60b2\u89c2\u8bc4\u4f30\u3002\u4f46\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66(Michigan State University)\u548c\u52a0\u5dde\u5dde\u7acb\u5927\u5b66\u5bcc\u52d2\u987f\u5206\u6821(California State University At Fullerton)\u7684\u4e00\u9879\u65b0\u7814\u7a76\u8868\u660e\uff0c\u4e0d\u662f\u90a3\u4e48\u5feb\uff1a\u793e\u4ea4\u5a92\u4f53\u6700\u91cd\u5ea6\u7684\u7528\u6237\u6709\u559c\u6b22\u6fc0\u6012\u548c\u8ba9\u4ed6\u4eba\u5c34\u5c2c\u7684\u4e2a\u6027\u3002\u8fd9\u662f\u4e2a\u597d\u6d88\u606f\uff01\u8fd9\u610f\u5473\u7740\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u4eba\u7c7b\u53ef\u80fd\u6bd4\u4e92\u8054\u7f51\u4e0a\u7684\u4eba\u8981\u5c11\u5f97\u591a\u3002\n\u4e00\u9879\u5bf9472\u540d\u5927\u5b66\u751f\u8fdb\u884c\u7684\u6709\u8da3\u7814\u7a76\u8ffd\u8e2a\u4e86\u4ed6\u4eec\u5728\u4e24\u4e2a18\u81f324\u5c81\u7684\u9876\u7ea7\u5e73\u53f0\u4e0a\u7684\u4f7f\u7528\u60c5\u51b5\uff1aSnapchat(\u6bcf\u59292.64\u5c0f\u65f6)\u548cFacebook(\u6bcf\u59292.28\u5c0f\u65f6)\u3002\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u8868\u73b0\u51fa\u4e0a\u763e\u884c\u4e3a\u7684\u7528\u6237\u4e5f\u66f4\u6709\u53ef\u80fd\u88ab\u6fc0\u52b1\u53d8\u5f97\u6b8b\u5fcd\u65e0\u60c5\uff0c\u5e76\u5229\u7528\u4ed6\u4eba\u8c0b\u53d6\u79c1\u5229\u3002\n\u7814\u7a76\u4eba\u5458\u5199\u9053\uff1a\u201c\u6211\u4eec\u7684\u7ed3\u679c\u8868\u660e\uff0c\u504f\u7231\u8fd9\u7c7b\u5956\u52b1\u7684\u4eba\u5728\u4f7f\u7528\u8fd9\u4e24\u4e2a\u5e73\u53f0\u65f6\u90fd\u4f1a\u51fa\u73b0\u66f4\u5927\u7684\u95ee\u9898\u3002\u201d\u4ed6\u4eec\u6307\u51fa\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e5f\u4e0e\u81ea\u604b\u548c\u7cbe\u795e\u53d8\u6001\u6709\u5173\uff0c\u4e4b\u524d\u4e5f\u66fe\u4e0e\u4e0a\u763e\u7684\u4e92\u8054\u7f51\u4f7f\u7528\u76f8\u5173\u3002\u4ed6\u4eec\u5199\u9053\uff0c\u793e\u4ea4\u5a92\u4f53\u7f51\u7ad9\u5728\u4e0d\u77e5\u4e0d\u89c9\u4e2d\u201c\u8fce\u5408\u4e86\u90a3\u4e9b\u4ece\u6b8b\u5fcd\u4e2d\u5bfb\u6c42\u56de\u62a5\u7684\u4eba\uff0c\u6bd4\u5982\u901a\u8fc7\u7f51\u7edc\u6b3a\u51cc\u6216\u5404\u79cd\u653b\u51fb\u6027\u7684\u5728\u7ebf\u884c\u4e3a\u3002\u201d\n\u7814\u7a76\u4eba\u5458\u5e0c\u671b\uff0c\u4ed6\u4eec\u7684\u7814\u7a76\u5c06\u901a\u8fc7\u66f4\u597d\u5730\u4e86\u89e3\u53ef\u80fd\u63a8\u52a8\u6210\u763e\u60a3\u8005\u7684\u793e\u4f1a\u56de\u62a5\u6765\u5e2e\u52a9\u4e34\u5e8a\u533b\u751f\u6cbb\u7597\u6210\u763e\u60a3\u8005\u3002\n\u540c\u4e00\u9879\u7814\u7a76\u8fd8\u53d1\u73b0\uff0c\u7528\u6237\u5728Snapchat\u4e0a\u7684\u65f6\u95f4\u66f4\u957f\uff0c\u884c\u4e3a\u66f4\u5bb9\u6613\u4e0a\u763e\uff0c\u4f46\u66f4\u9891\u7e41\u5730\u8bd5\u56fe\u9000\u51faFacebook\u3002", "note_en": "Large swaths of the internet are a cesspool. Before today, this led to glum assessments about the state of humanity. But a new study out of Michigan State University and California State University at Fullerton, says not so fast:  The heaviest users of social media have personalities that enjoy angering and embarrassing others. This is good news! It means that humanity, on the whole, might suck far less than people on the internet.\n A  fascinating study of 472 university students tracked their usage on two top platforms for 18-to-24-year olds: Snapchat (2.64 hours per day) and Facebook (2.28 hours per day). Researchers found that users displaying addictive behavior were also more likely to be motivated to be cruel and callous and to use others for personal gain.\n \u201cOur results demonstrate that individuals who have a greater preference for these types of rewards display greater problematic use of both platforms,\u201d write the researchers, who note that these traits are also associated with narcissism and psychopathy and have previously been correlated with addictive internet use. They write that social media sites unwittingly \u201ccater to people who seek rewards from being cruel, such as through cyberbullying or various aggressive online behaviors.\u201d\n The researchers hope that their study will help clinicians treat addicted patients by better understanding the social rewards that may be driving them.\n The same study also found users logging longer hours with more addictive behaviors on Snapchat, but more frequently attempting to quit Facebook.", "posttime": "2020-07-21 11:39:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u89c9\u5f97,embarrassing,\u53ef\u80fd", "title": "\u559c\u6b22\u8ba9\u522b\u4eba\u96be\u582a\u6216\u6fc0\u6012\u7684\u4eba\u89c9\u5f97\u793e\u4ea4\u5a92\u4f53\u66f4\u5bb9\u6613\u4e0a\u763e", "title_en": "People who like embarrassing or angering others find social media more addictive", "transed": 1, "url": "https://www.fastcompany.com/90530068/people-who-like-embarrassing-or-angering-others-find-social-media-more-addictive-study-says", "via": "", "real_tags": ["\u89c9\u5f97", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1013198, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6ce8\uff1a\u672c\u6587\u6700\u521d\u662f\u4e3a2019\u5e74\u5723\u52a0\u4f26\u7814\u8ba8\u4f1a\u6bd4\u8d5b\u64b0\u5199\u7684\u3002(\u6211\u6ca1\u8d62)\u3002\n1933\u5e74\uff0c\u7b2c\u4e00\u6279\u54c8\u4f5b\u5927\u5b66\u7814\u7a76\u5458\u201c\u90fd\u662f\u57fa\u4e8e\u4ed6\u4eec\u975e\u51e1\u7684\u627f\u8bfa\uff0c\u800c\u4e0d\u662f\u4ed6\u4eec\u8fc7\u53bb\u7684\u5de5\u4f5c\u201d[1]\u5f00\u59cb\u4e86\u4ed6\u4eec\u7684\u5956\u5b66\u91d1\u3002\u4e4b\u6240\u4ee5\u8bbe\u7acb\u5956\u5b66\u91d1\uff0c\u662f\u56e0\u4e3a\u5f53\u65f6\u7684\u54c8\u4f5b\u6821\u957f\u60f3\u201c\u63d0\u4f9b\u4e00\u6761\u66f4\u9002\u5408\u9f13\u52b1\u7a00\u6709\u800c\u72ec\u7acb\u7684\u5929\u624d\u7684(\u535a\u58eb)\u9053\u8def\u201d[2]\u3002\n85\u5e74\u540e\uff0c39\u540d\u521d\u7ea7\u7814\u7a76\u5458\u4e2d\u670938\u540d\u8981\u4e48\u62e5\u6709\u535a\u58eb\u5b66\u4f4d\uff0c\u8981\u4e48\u6ce8\u518c\u4e86\u535a\u58eb\u9879\u76ee[3]\uff0c\u4ed6\u4eec\u662f\u6839\u636e\u8fc7\u53bb\u7684\u5de5\u4f5c\u660e\u786e\u9009\u62e9\u7684\uff0c\u800c\u4e0d\u662f\u627f\u8bfa[4]\u3002\u4f3c\u4e4e\u5f88\u660e\u663e\uff0c\u54c8\u4f5b\u6ee1\u8db3\u4e8e\u5076\u5c14\u9519\u8fc7\u4e00\u4e2a\u540e\u8d77\u4e4b\u79c0\u7684\u5929\u624d\uff0c\u6216\u8005\u4e00\u4e2a\u806a\u660e\u7684\u4e0d\u58a8\u5b88\u6210\u89c4\u7684\u4eba\uff0c\u4ed6\u4eec\u4e0d\u80fd\u5fcd\u53d710\u5e74\u4ee5\u4e0a\u7684\u9ad8\u7b49\u6559\u80b2\u6765\u8ffd\u6c42\u5b66\u4f4d\uff0c\u540c\u65f6\u8fd8\u8981\u786e\u4fdd\u6240\u6709\u7684\u7814\u7a76\u5458\u90fd\u201c\u8db3\u591f\u4f18\u79c0\u201d\u3002\n\u4e0d\u8fc7\uff0c\u6211\u60f3\u8bf4\u7684\u5e76\u4e0d\u662f\u7279\u522b\u9488\u5bf9\u54c8\u4f5b\u5927\u5b66\u3002\u4efb\u4f55\u673a\u6784\uff0c\u5982\u679c\u6709\u673a\u4f1a\u548c\u65f6\u95f4\uff0c\u90fd\u5c06\u5b66\u4f1a\u4f18\u5148\u8003\u8651\u5176\u6210\u5458\u548c\u9879\u76ee\u7684\u4e2d\u4f4d\u6570\u8d28\u91cf\uff0c\u540c\u65f6\u6743\u8861\u5dee\u5f02-\u5373\u4f7f\u4e0e\u5176\u4f7f\u547d\u80cc\u9053\u800c\u9a70\uff1b\u4f46\u5927\u5b66\u548c\u51e0\u4e4e\u6240\u6709\u5b66\u672f\u673a\u6784\u5728\u8fd9\u79cd\u8d8b\u52bf\u8868\u73b0\u51fa\u6765\u7684\u7a0b\u5ea6\u4e0a\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\n\u5927\u5b66\u60f3\u8981\u8058\u8bf7\u6700\u4f18\u79c0\u3001\u6700\u6770\u51fa\u7684\u79d1\u5b66\u5bb6\u662f\u5f88\u81ea\u7136\u7684\u4e8b\u3002\u5728\u8fc7\u53bb\uff0c\u5b83\u4eec\u5c06\u4ec5\u9650\u4e8e\u95f4\u63a5\u548c\u5608\u6742\u7684\u4fe1\u53f7\u3002\u4eca\u5929\uff0c\u5b66\u672f\u754c\u53ef\u4ee5\u901a\u8fc7\u4efb\u4f55\u79d1\u5b66\u5bb6\u7684\u5ba2\u89c2h\u6307\u6570\u548c\u5728\u5177\u6709\u6709\u5e8f\u5f71\u54cd\u56e0\u5b50\u7684\u9876\u7ea7\u671f\u520a\u4e0a\u53d1\u8868\u7684\u8bba\u6587\u6570\u91cf\uff0c\u6765\u91cf\u5316\u4efb\u4f55\u79d1\u5b66\u5bb6\u7684\u786e\u5207\u201c\u79d1\u5b66\u8d21\u732e\u201d\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5f53\u5927\u5b66\u9009\u62e9\u8058\u7528\u548c\u63d0\u62d4\u8c01\u65f6-\u5e76\u5e0c\u671b\u5bf9\u6b64\u4fdd\u6301\u5ba2\u89c2-\u5b83\u4eec\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u8fd9\u4e9b\u6307\u6807\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5f53\u6211\u4eec\u5728\u7cfb\u7edf\u5c42\u9762\u4e0a\u601d\u8003\u65f6\uff0c\u73b0\u4ee3\u7814\u7a76\u4eba\u5458\u7684\u76ee\u6807\u4e0d\u4ec5\u4ec5\u662f\u89e3\u51b3\u5b87\u5b99\u7684\u5de8\u5927\u5965\u79d8\u6216\u53d1\u73b0\u4e00\u79cd\u65b0\u7684\u81ea\u7136\u73b0\u8c61\uff0c\u800c\u662f\u8981\u56de\u7b54\u8fd9\u4e2a\u5de8\u5927\u7684\u8c1c\u56e2\uff0c\u5e76\u5728\u672a\u67655\u5e74\u5185\u5728\u9876\u7ea7\u671f\u520a\u4e0a\u53d1\u8868\u4ed6\u4eec\u7684\u53d1\u73b0\uff0c\u4ee5\u83b7\u5f97\u535a\u58eb\u540e\u5b66\u4f4d(\u5982\u679c\u4ed6\u4eec\u662f\u7814\u7a76\u751f)\uff0c\u5728\u672a\u67652-3\u5e74\u5185\u83b7\u5f97\u53e6\u4e00\u4e2a\u535a\u58eb\u540e\u6216\u52a9\u7406\u6559\u6388\u7684\u804c\u4f4d(\u5982\u679c\u4ed6\u4eec\u662f\u535a\u58eb\u540e)\uff0c\u6216\u8005\u5728\u672a\u67653-5\u5e74\u5185(\u5982\u679c\u4ed6\u4eec\u662f\u60f3\u8981\u664b\u5347\u7684\u52a9\u7406\u6559\u6388)\uff0c\u6216\u8005\u5728\u63a5\u4e0b\u6765\u76843-5\u5e74\u5185(\u5982\u679c\u4ed6\u4eec\u662f\u60f3\u8981\u664b\u5347\u7684\u52a9\u7406\u6559\u6388)\uff0c\u5728\u672a\u67652-3\u5e74\u5185\u83b7\u5f97\u53e6\u4e00\u4e2a\u535a\u58eb\u540e\u6216\u52a9\u7406\u6559\u6388\u7684\u804c\u4f4d(\u5982\u679c\u4ed6\u4eec\u662f\u535a\u58eb\u540e)\uff0c\u6216\u8005\u5728\u672a\u67653-5\u5e74\u5185(\u5982\u679c\u4ed6\u4eec\u662f\u60f3\u664b\u5347\u7684\u52a9\u7406\u6559\u6388)\u3002\n\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u51e0\u4e2a\u660e\u663e\u7684\u95ee\u9898\u3002\u9996\u5148\uff0c\u6240\u6709\u4ee3\u7406\u6307\u6807\u90fd\u53ef\u4ee5\u901a\u8fc7\u67d0\u4e9b\u65b9\u5f0f\u8fdb\u884c\u535a\u5f08\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06\u5b9e\u9a8c\u7ed3\u679c\u5207\u6210\u814a\u80a0\u5207\u7247\uff0c\u4ee5\u6700\u5927\u9650\u5ea6\u5730\u589e\u52a0\u53d1\u8868\u548c\u5f15\u7528\u7684\u6570\u91cf[5]\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5982\u679c\u4f60\u7684\u76ee\u6807\u662f\u89e3\u5f00\u5b87\u5b99\u7684\u5b8f\u5927\u8c1c\u56e2--\u65e0\u8bba\u4f60\u6709\u591a\u806a\u660e--\u5f88\u6709\u53ef\u80fd\u9700\u898110\u5e74\u621620\u5e74\u624d\u80fd\u5728\u8fd9\u4e2a\u8c1c\u56e2\u4e0a\u53d6\u5f97\u660e\u663e\u7684\u8fdb\u5c55\uff0c\u800c\u5f53\u6500\u767b\u9636\u68af\u7684\u65f6\u523b\u5230\u6765\u65f6\uff0c\u4f60\u5c06\u6ca1\u6709\u4ec0\u4e48\u53ef\u5c55\u793a\u7684\uff0c\u9664\u4e86\u591a\u5e74\u7684\u5931\u8d25\uff1b\u800c\u201c\u81ea\u7136\u201d\u6742\u5fd7\u4e5f\u4e0d\u662f\u4e00\u672c\u5b9a\u671f\u53d1\u8868\u8d1f\u9762\u7ed3\u679c\u7684\u6742\u5fd7\u3002\n\u56e0\u6b64\uff0c\u5e0c\u683c\u65af(Higgs Boson)\u7684\u53d1\u73b0\u8005\u5f7c\u5f97\u00b7\u5e0c\u683c\u65af(Peter Higgs)\u6700\u7ec8\u5f97\u51fa\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4eca\u5929\u7684\u5b66\u672f\u4f53\u7cfb\u6765\u8bf4\uff0c\u4ed6\u7684\u751f\u4ea7\u529b\u8fd8\u4e0d\u591f\u9ad8[6]\uff1b\u91cf\u5b50\u8ba1\u7b97\u7684\u53d1\u660e\u8005\u5927\u536b\u00b7\u591a\u4f0a\u5947(David Deutsch)\u8868\u793a\uff0c\u4ed6\u7684\u7b2c\u4e00\u7b14\u91cf\u5b50\u8ba1\u7b97\u673a\u62e8\u6b3e\u4eca\u5929\u201c\u6ca1\u6709\u673a\u4f1a\u201d\u83b7\u5956[7]\uff1b\u7f8e\u56fd\u56db\u4f4d\u6700\u6709\u6210\u5c31\u7684\u751f\u7269\u5b66\u5bb6\u53d1\u8868\u4e86\u4e00\u7bc7\u9898\u4e3a\u201c\u5c06\u7f8e\u56fd\u751f\u7269\u533b\u5b66\u7814\u7a76\u4ece\u5176\u7cfb\u7edf\u6027\u7f3a\u9677\u4e2d\u62ef\u6551\u51fa\u6765\u201d\u7684\u8bba\u6587\uff0c\u547c\u5401\u79d1\u5b66\u673a\u6784\u201c\u5927\u5e45\u589e\u52a0\u5f3a\u8c03\u539f\u521b\u6027\u548c\u521b\u65b0\u6027\u7684\u5956\u9879\u7684\u6570\u91cf\u548c\u79cd\u7c7b\u201d\u3002\u6240\u6709\u8fd9\u4e9b\uff0c\u800c\u83b7\u5f97\u7b2c\u4e00\u7b14R01-\u6700\u53d7\u6b22\u8fce\u7684NIH\u62e8\u6b3e-\u7684\u5e73\u5747\u5e74\u9f84\u73b0\u5728\u662f44\u5c81[9]\u3002\n\u4e3a\u4ec0\u4e48\u907f\u9669\u60c5\u7eea\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u589e\u957f\uff0c\u6709\u4e24\u4e2a\u5173\u952e\u539f\u56e0\u3002\u7b2c\u4e00\u4e2a\u95ee\u9898\u662f\u7ec4\u7ec7\u4f1a\u88ab\u70e7\u6bc1[10]\u3002\u5f53\u4f60\u5728\u67d0\u4eba\u8eab\u4e0a\u78b0\u78b0\u8fd0\u6c14\u65f6\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u53d8\u6210\u5929\u624d\u6216\u9a97\u5b50\u3002\u5f53\u4e00\u4e2a\u7ec4\u7ec7\u5efa\u7acb\u5728\u4fe1\u4efb\u539f\u5219\u4e0a\u65f6\uff0c\u4e00\u4e9b\u9a97\u5b50\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u5b66\u4f1a\u5229\u7528\u5b83\u3002\u56e0\u6b64\uff0c\u8be5\u7ec4\u7ec7\u6709\u52a8\u673a\u8981\u6c42\u4e00\u4efd\u4e1a\u7ee9\u8bb0\u5f55\u548c\u63a8\u8350\u4fe1\uff0c\u5e76\u5236\u5b9a\u7a0b\u5e8f\uff0c\u9632\u6b62\u9a97\u5b50\u5229\u7528\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e0d\u53ef\u907f\u514d\u5730\u4f1a\u7ed9\u8bda\u5b9e\u7684\u4eba\u5e26\u6765\u4e0d\u4fbf\u548c\u51cf\u6162\u901f\u5ea6\u3002\n\u7b2c\u4e8c\u4e2a\u539f\u56e0\u662f\u6fc0\u52b1\u673a\u5236\u7684\u9519\u4f4d\uff0c\u7279\u522b\u662f\u65f6\u95f4\u5c3a\u5ea6\u7684\u9519\u4f4d\u3002\u4e3a\u9000\u4f11\u5b58\u94b1\u7684\u4eba\u5e0c\u671b\u572820\u5e74\u5185\u5b9e\u73b0\u56de\u62a5\u6700\u5927\u5316\uff0c\u4f46\u4ed6\u4eec\u6295\u8d44\u7684\u516c\u53f8\u8058\u8bf7\u7684\u9996\u5e2d\u6267\u884c\u5b98\u5e0c\u671b\u57285\u5e74\u5185\u6700\u5927\u5316\u5979\u7684\u5f71\u54cd\u529b\uff0c\u7136\u540e\u8f6c\u5411\u4e0b\u4e00\u5bb6\u4f01\u4e1a\u3002\u793e\u4f1a\u5e0c\u671b\u53d6\u5f97\u79d1\u5b66\u7a81\u7834\uff0c\u8fd9\u9700\u898120\u5e74\u7684\u5de5\u4f5c\uff0c\u4f46\u79d1\u5b66\u5bb6\u4e2a\u4eba\u9700\u8981\u6309\u8ba1\u5212\u53d1\u8868\u8bba\u6587\u624d\u80fd\u83b7\u5f97\u664b\u5347\uff1b\u540c\u6837\uff0c\u6388\u6743\u8005\u5e0c\u671b\u6700\u5927\u9650\u5ea6\u5730\u589e\u52a0\u4ed6\u4eec\u8d1f\u8d23\u7684\u300a\u81ea\u7136\u300b(Nature)\u8bba\u6587\u7684\u6570\u91cf(\u65e0\u8bba\u8fd9\u4e9b\u8bba\u6587\u662f\u975e\u51e1\u7684\u8fd8\u662f\u4ec5\u4ec5\u9ad8\u4e8e\u5e73\u5747\u6c34\u5e73)\uff0c\u540c\u65f6\u907f\u514d\u5931\u8d25\u7684\u9879\u76ee\u3002\n\u5b66\u672f\u754c\u53d7\u5230\u8fd9\u4e24\u4e2a\u95ee\u9898\u7684\u56f0\u6270\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\u3002\u9996\u5148\uff0c\u7531\u4e8e\u5b66\u672f\u754c\u7f3a\u4e4f\u7ade\u4e89\u53d6\u4ee3\u7684\u673a\u5236\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u79ef\u7d2f\u7684\u81a8\u80c0\u548c\u4e0d\u53ef\u907f\u514d\u7684\u98ce\u9669\u538c\u6076\u60c5\u7eea\u53ef\u80fd\u4f1a\u65e0\u9650\u5236\u5730\u589e\u957f[11]\u3002\u5982\u679c\u4e00\u5bb6\u516c\u53f8\u53d8\u5f97\u6548\u7387\u4f4e\u4e0b\uff0c\u5b83\u5c31\u4f1a\u5012\u95ed\uff0c\u5e76\u88ab\u53e6\u4e00\u5bb6\u516c\u53f8\u53d6\u800c\u4ee3\u4e4b\u3002\u5982\u679c\u79d1\u5b66\u53d8\u5f97\u4f4e\u6548\uff0c\u2026\u3002\u5b83\u7ee7\u7eed\u5438\u7eb3\u8d44\u91d1\u548c\u4eba\u5458\uff0c\u800c\u4e14\uff0c\u55ef\uff0c\u79d1\u5b66\u8fdb\u6b65\u653e\u6162\u4e86\u811a\u6b65\u3002\u5176\u6b21\uff0c\u6b63\u5982\u6211\u4e0a\u9762\u6307\u51fa\u7684\uff0c\u79d1\u5b66\u53d7\u5230\u65f6\u95f4\u5c3a\u5ea6\u9519\u4f4d\u95ee\u9898\u7684\u4e25\u91cd\u56f0\u6270\u3002\u8d44\u52a9\u4eba\u7684\u89c4\u5212\u89c6\u91ce(\u8bf7\u6ce8\u610f\uff0c\u6211\u8bf4\u7684\u662f\u505a\u51fa\u5177\u4f53\u51b3\u7b56\u7684\u5177\u4f53\u4e2a\u4eba\uff0c\u800c\u4e0d\u662f\u7406\u8bba\u4e0a\u5173\u5fc3\u957f\u8fdc\u7684\u62bd\u8c61\u673a\u6784)\u4e25\u91cd\u53d7\u9650\u4e8e\u4ed6\u4eec\u81ea\u5df1\u7684\u804c\u4e1a\u89c4\u5212\u89c6\u91ce\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5bf9\u5982\u4f55\u89e3\u51b3\u57fa\u672c\u95ee\u9898\u800c\u51e0\u4e4e\u6ca1\u6709\u77ed\u671f\u56de\u62a5\u7684\u7406\u89e3\u3002\n\u7ecf\u5e38\u91cd\u590d\u7684\u5efa\u8bae\u662f\u8ba9\u62e8\u6b3e\u673a\u6784\u4e3a\u66f4\u591a\u7684\u9ad8\u98ce\u9669\u9879\u76ee\u63d0\u4f9b\u8d44\u91d1\u3002\u8fd9\u662f\u6211\u5148\u524d\u5f15\u8ff0\u7684\u56db\u4f4d\u53d7\u4eba\u5c0a\u656c\u7684\u751f\u7269\u5b66\u5bb6\u7684\u9009\u62e9\uff0c\u4f46\u4e0d\u592a\u53ef\u80fd\u5e26\u6765\u91cd\u5927\u6539\u53d8\u3002\u4f8b\u5982\uff0c\u6b27\u6d32\u7814\u7a76\u7406\u4e8b\u4f1a(European Research Council)\u5df2\u7ecf\u5728\u63d0\u4f9b\u4e00\u4e9b\u6709\u9488\u5bf9\u6027\u7684\u9ad8\u98ce\u9669\u7814\u7a76\u8d44\u91d1\u30022017\u5e74\u7684\u7ed3\u679c\u73b0\u5728\u5df2\u7ecf\u51fa\u6765\u4e86\uff1a79%\u7684\u9ad8\u98ce\u9669\u9879\u76ee\u5b9e\u73b0\u4e86\u201c\u91cd\u5927\u79d1\u5b66\u8fdb\u6b65\u201d\u6216\u201c\u79d1\u5b66\u7a81\u7834\u201d[12\uff0c13]\u3002\u8fd9\u770b\u8d77\u6765\u5f88\u4e0d\u5bfb\u5e38\uff0c\u76f4\u5230\u4f60\u610f\u8bc6\u5230\uff0c\u5982\u679c\u8fd9\u4e9b\u9879\u76ee\u662f\u9ad8\u98ce\u9669\u7684\uff0c\u7edd\u5927\u591a\u6570\u9879\u76ee\u90fd\u4f1a\u5b8c\u5168\u5931\u8d25\uff0c\u53ea\u6709\u5c11\u6570\u9879\u76ee\u4f1a\u53d6\u5f97\u91cd\u5927\u8fdb\u5c55\u3002\u8fd9\u53cd\u8fc7\u6765\u53c8\u610f\u5473\u7740\uff0c\u6b27\u6d32\u7814\u7a76\u7406\u4e8b\u4f1a\u8d44\u52a9\u7684\u201c\u9ad8\u98ce\u9669\u201d\u9879\u76ee\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u5bfb\u5e38\u4e4b\u5904\u3002\n\u6211\u7684\u5efa\u8bae\u5f88\u7b80\u5355\uff1a\u5bf9\u8fdb\u6b65\u8d1f\u8d23\u3002\u73b0\u5728\u662f\u65f6\u5019\u8ba9\u4f01\u4e1a\u548c\u4f01\u4e1a\u5bb6\u8ba4\u8bc6\u5230\uff0c\u4ed6\u4eec\u4e0d\u80fd\u518d\u4f9d\u8d56\u653f\u5e9c\u63d0\u4f9b\u8d44\u91d1\uff0c\u4e0d\u80fd\u518d\u4f9d\u8d56\u5b66\u672f\u754c\u8fdb\u884c\u57fa\u7840\u7814\u7a76\u3002\u4ed6\u4eec\u4e0d\u80fd\u505a\u7ffb\u8bd1\u6027\u7684\u7814\u7a76\uff0c\u7b80\u5355\u5730\u628a\u5b66\u672f\u754c\u7684\u6210\u679c\u63a8\u5411\u5e02\u573a\uff0c\u800c\u662f\u8981\u53d8\u5f97\u66f4\u52a0\u5927\u80c6\uff0c\u5bf9\u672a\u6765\u627f\u62c5\u8d23\u4efb\uff0c\u8d44\u52a9\u57fa\u7840\u7814\u7a76\uff0c\u8ba9\u6148\u5584\u4e8b\u4e1a\u7684\u65b0\u613f\u666f\u53d8\u5f97\u751f\u52a8\u8d77\u6765\u3002\n\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u901a\u5e38\u662f\u4e2a\u4eba\u8d5e\u52a9\u4eba\u8d1f\u8d23\u652f\u6301\u5929\u624d\u827a\u672f\u5bb6\u548c\u53d1\u660e\u5bb6\uff1b\u662f\u5404\u79cd\u738b\u5b50\u3001\u516c\u7235\u548c\u4f2f\u7235\u4e3a\u79d1\u5b66\u5bb6\u548c\u50cf\u65af\u5bbe\u8bfa\u838e\u3001\u5f00\u666e\u52d2\u3001\u7b1b\u5361\u5c14\u3001\u4f3d\u5229\u7565\u548c\u65e0\u7a77\u65e0\u5c3d\u7684\u5176\u4ed6\u4eba\u63d0\u4f9b\u6307\u5bfc\u548c\u8d44\u52a9\uff1b\u662f\u8d44\u672c\u5bb6\u548c\u91d1\u878d\u5bb6\u521b\u7acb\u4e86\u5927\u5b66\uff0c\u5e76\u8d1f\u8d23\u4e00\u4e9b\u6700\u5b8f\u4f1f\u7684\u827a\u672f\u6536\u85cf\uff1b\u6700\u540e\uff0c\u662f\u4e24\u4e2a\u5de8\u5927\u7684\u516c\u53f8-\u65bd\u4e50\u548cAT&amp\uff1bT\uff1b\u8d1f\u8d23\u4e24\u4e2a\u5b9e\u9a8c\u5ba4-XX\u3002\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u7814\u7a76\u4eba\u5458\u5f00\u53d1\u4e86\u7b2c\u4e00\u6279\u6676\u4f53\u7ba1\u548c\u6fc0\u5149\u5668\u3001\u4fe1\u606f\u8bba\u3001Unix\u64cd\u4f5c\u7cfb\u7edf\u3001C\u548cC++\u7f16\u7a0b\u8bed\u8a00\uff1b\u603b\u5171\u67099\u4e2a\u8bfa\u8d1d\u5c14\u5956\u83b7\u5956\u3002\u65bd\u4e50\u5e15\u6d1b\u963f\u5c14\u6258\u7814\u7a76\u6240\u7684\u7814\u7a76\u4eba\u5458\u5f00\u53d1\u4e86\u73b0\u4ee3\u53f0\u5f0f\u8ba1\u7b97\u673a\u3001\u6fc0\u5149\u6253\u5370\u673a\u3001\u56fe\u5f62\u7528\u6237\u754c\u9762\u3001\u8ba1\u7b97\u673a\u9f20\u6807\u3001\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u3002\n\u5982\u679c\u6ca1\u6709\u8fd9\u4e9b\u5de5\u4e1a\u5b9e\u9a8c\u5ba4\uff0c\u4eca\u5929\u7684\u6280\u672f\u72b6\u51b5\u4f1a\u975e\u5e38\u4e0d\u540c\u3002\u4f46\u662f\uff0c\u73b0\u4ee3\u5de5\u4e1a\u7814\u7a76\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u5462\uff1f\u6bcf\u4e2a\u5927\u516c\u53f8\u4f3c\u4e4e\u90fd\u6709\u4e00\u4e2a\u7814\u7a76\u90e8\u95e8\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u8fdb\u884c\u7684\u7814\u7a76\u51e0\u4e4e\u603b\u662f\u77ed\u671f\u7684\u548c\u5b9e\u7528\u7684[13]\u3002\u516c\u53f8\u5df2\u7ecf\u5c06\u57fa\u7840\u79d1\u5b66\u7684\u8d23\u4efb\u8ba9\u7ed9\u4e86\u653f\u5e9c\u548c\u5b66\u672f\u754c\u3002\u73b0\u5728\u662f\u65f6\u5019\u6536\u56de\u8fd9\u4e00\u8d23\u4efb\uff0c\u521b\u9020\u6fc0\u8fdb\u7684\u65b0\u7684\u884c\u4e3a\u5f62\u5f0f\u548c\u8d44\u52a9\u79d1\u5b66\u4e86\u3002\n\u6211\u63d0\u51fa\u4e86\u4ec0\u4e48\u6fc0\u8fdb\u7684\u60f3\u6cd5\uff1f\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u4ed6\u4eec\u5e76\u4e0d\u6fc0\u8fdb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4ee5\u524d\u4ece\u672a\u88ab\u5ba1\u5224\u8fc7\u3002\u5b83\u4eec\u662f\u6fc0\u8fdb\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u73b0\u5728\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u5c3d\u7ba1\u5b83\u4eec\u5728\u8fc7\u53bb\u5df2\u7ecf\u8bc1\u660e\u4e86\u81ea\u5df1\u7684\u4ef7\u503c\u3002\n\u4eca\u5929\uff0c\u6148\u5584\u5bb6\u5411\u538c\u6076\u98ce\u9669\u7684\u5927\u5b66\u6350\u6b3e\uff0c\u7136\u540e\u5927\u5b66\u91cd\u65b0\u5206\u914d\u8d44\u91d1\u3002\u4f46\u6ca1\u6709\u4ec0\u4e48\u80fd\u771f\u6b63\u963b\u6b62\u4ed6\u4eec\u6210\u4e3a\u4ed6\u4eec\u4fe1\u4efb\u7684\u7279\u5b9a\u79d1\u5b66\u5bb6\u7684\u8d5e\u52a9\u4eba\u3002\u7136\u800c\uff0c\u8fd9\u662f\u95fb\u6240\u672a\u95fb\u7684\u3002\n\u4eca\u5929\uff0c\u6148\u5584\u5bb6\u521b\u5efa\u7684\u57fa\u91d1\u4f1a\u53ea\u63d0\u4f9b\u77ed\u671f\u8d44\u52a9\uff0c\u53ea\u662f\u7b80\u5355\u5730\u6269\u5927\u7834\u788e\u7684\u5b66\u672f\u4f53\u7cfb\uff0c\u800c\u4e0d\u662f\u5f00\u59cb\u957f\u671f\u4e13\u6ce8\u4e8e\u7814\u7a76\u7684\u5b9e\u9a8c\u5ba4\u3002\u5c31\u50cfDeepMind\u6700\u8fd1\u7528\u4ed6\u4eec\u7684\u86cb\u767d\u8d28\u7ed3\u6784\u9884\u6d4b\u8f6f\u4ef6[14]\u6240\u663e\u793a\u7684\u90a3\u6837\uff0c\u5373\u4f7f\u516c\u53f8\u548c\u5927\u5b66\u505a\u4e86\u51e0\u5341\u5e74\u7684\u201c\u57fa\u7840\u201d\u7814\u7a76\uff0c\u6709\u65f6\u5341\u51e0\u4e2a\u5de5\u7a0b\u5e08\u82b1\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u6765\u89e3\u51b3\u4ed6\u4eec\u7684\u95ee\u9898\u4e5f\u6bd4\u4ed6\u4eec\u6240\u6709\u4eba\u90fd\u806a\u660e[14]\u3002\n\u8d44\u672c\u9700\u8981\u518d\u6b21\u88ab\u7528\u6765\u8d44\u52a9\u4e2a\u522b\u7279\u7acb\u72ec\u884c\u7684\u4eba\u548c\u6253\u7834\u4f20\u7edf\u7684\u4eba\uff0c\u5e76\u4ee5\u4f1f\u5927\u7684\u627f\u8bfa\u6765\u8d44\u52a9\u4ed6\u4eec\uff0c\u800c\u4e0d\u662f\u4ee5\u6210\u5c31\u7684\u8bc1\u660e\u6765\u8d44\u52a9\u4ed6\u4eec\u3002\u8d44\u672c\u9700\u8981\u518d\u6b21\u7528\u4e8e\u5efa\u7acb\u77e5\u8bc6\u81ea\u7531\u7684\u5821\u5792\uff0c\u800c\u4e0d\u662f\u8fdb\u4e00\u6b65\u652f\u6491\u5b66\u672f\u754c\u7684\u7f3a\u70b9\u3002\u4e16\u754c\u9700\u8981\u79d1\u5b66\u5bb6\u8d5e\u52a9\u601d\u60f3\u7684\u590d\u5174\u3002\u4e16\u754c\u9700\u8981\u65b0\u7684\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u3002\u4e0b\u9762\u662f\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u3002\n\u9996\u5148\uff0c\u6148\u5584\u5bb6\u5e94\u8be5\u8ba4\u8bc6\u5230\u957f\u671f\u6350\u8d60\u7684\u4ef7\u503c\u3002\u65e0\u8bba\u8d44\u91d1\u591a\u4e48\u6177\u6168\uff0c\u5982\u679c\u4f60\u9700\u8981\u6bcf\u4e09\u5e74\u7eed\u7b7e\u4e00\u6b21\u62e8\u6b3e\uff0c\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4f60\u5fc5\u987b\u6309\u65f6\u51fa\u7248\u3002\u6388\u4e8810\u5e74\u621620\u5e74\u7684\u8d60\u6b3e-\u5b9e\u9645\u4e0a\u6210\u4e3a\u4e86\u8d5e\u52a9\u4eba-\u5e94\u8be5\u518d\u6b21\u6210\u4e3a\u5e38\u6001\u3002\u4eca\u5929\u8fd9\u79cd\u60c5\u51b5\u6ca1\u6709\u53d1\u751f\u7684\u539f\u56e0\u662f\u6211\u4eec\u5bf9\u4eba\u4eec\u6ca1\u6709\u8db3\u591f\u7684\u4fe1\u4efb\u3002\u5f53\u4f60\u7ed9\u4e8820\u5e74\u7684\u8d44\u52a9\u65f6\uff0c\u8fd9\u4e2a\u4eba\u603b\u662f\u6709\u53ef\u80fd\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5e74\u91cc\u5de5\u4f5c\uff0c\u7136\u540e\u51b3\u5b9a\u5728\u4ed6\u4eec\u5269\u4e0b\u7684\u804c\u4e1a\u751f\u6daf\u4e2d\u53ea\u628a\u5b83\u5f53\u4f5c\u4e00\u4efd\u96f6\u788e\u7684\u5de5\u4f5c\u3002\u8fd9\u79cd\u60c5\u51b5\u53d1\u751f\u7684\u524d\u666f\u662f\u5982\u6b64\u75db\u82e6\uff0c\u4ee5\u81f3\u4e8e\u4eca\u5929\u6839\u672c\u6ca1\u6709\u4eba\u7ed9\u4e88\u957f\u671f\u62e8\u6b3e\u3002\u7ec8\u8eab\u6559\u804c--\u552f\u4e00\u4e0e\u4ed6\u4eec\u6709\u4e9b\u76f8\u4f3c\u7684\u4e1c\u897f--\u662f\u5728\u4e00\u4e2a\u957f\u8fbe\u4e00\u4e2a\u6708\u7684\u8fc7\u7a0b\u4e4b\u540e\u7ed9\u51fa\u7684\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u66f4\u50cf\u662f\u62db\u8058\u4e00\u540d\u9ad8\u7ea7\u5916\u4ea4\u5b98\uff0c\u800c\u4e0d\u662f\u5b66\u672f\u804c\u4f4d\u7684\u5f55\u7528\u51b3\u5b9a[15]\u3002\u5728\u83b7\u5f97\u7ec8\u8eab\u6559\u804c\u540e\uff0c\u79d1\u5b66\u5bb6\u4eec\u4ecd\u7136\u5fc5\u987b\u4e89\u53d6\u62e8\u6b3e-\u56e0\u6b64\uff0c\u52aa\u529b\u8fdb\u884c\u6e10\u8fdb\u5f0f\u7684\u6539\u8fdb\u3002\n\u90a3\u4e48\uff0c\u81ea\u7136\u7684\u95ee\u9898\u662f\uff0c\u5982\u4f55\u627e\u5230\u53ef\u4ee5\u7ed9\u4e8820\u5e74\u671f\u8d44\u52a9\u7684\u79d1\u5b66\u5bb6\uff1f\u4f46\u8fd9\u662f\u6bd4\u8f83\u7b80\u5355\u7684\uff1a\u5982\u679c\u4f60\u5df2\u7ecf\u7ed9\u4e86\u77ed\u671f\u8d44\u52a9\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u9009\u62e9\u6700\u6709\u5e0c\u671b\u7684\u79d1\u5b66\u5bb6\uff0c\u7ed9\u4ed6\u4eec20\u5e74\u7684\u8d44\u52a9\uff1b\u5982\u679c\u4f60\u4e0d\u8fd9\u6837\u505a\uff0c\u5bfb\u627e\u4f1a\u66f4\u56f0\u96be\uff0c\u4f46\u7edd\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u6bd5\u7adf\uff0c\u738b\u5b50\u3001\u516c\u7235\u548c\u4f2f\u7235\u786e\u5b9e\u80fd\u591f\u627e\u5230\u4ed6\u4eec\u3002\n\u91cd\u5efa\u65bd\u4e50\u5e15\u6d1b\u963f\u5c14\u6258\u7814\u7a76\u4e2d\u5fc3\u548c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u613f\u666f\u5c06\u9700\u8981\u627e\u51fa\u6b63\u786e\u7684\u7ec4\u7ec7\u548c\u6fc0\u52b1\u7ed3\u6784\uff0c\u83b7\u5f97\u957f\u671f\u8d44\u91d1\uff0c\u8ba9\u8001\u724c\u79d1\u5b66\u5bb6\u76f8\u4fe1\u642c\u51fa\u4ed6\u4eec\u7684\u5927\u5b66\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\uff0c\u53d1\u73b0\u5c06\u5728\u5b9e\u9a8c\u5ba4\u8131\u9896\u800c\u51fa\u7684\u5e74\u8f7b\u79d1\u5b66\u5bb6\uff0c\u8058\u8bf7\u8fd0\u8425\u4eba\u5458\u2026\u3002\u8fd8\u8981\u627e\u5230\u4f60\u81ea\u5df1\u7684\u9c8d\u52c3\u00b7\u6cf0\u52d2\uff0c\u4ed6\u7684\u613f\u666f\u662f\u56f4\u7ed5\u7740\u4ed6\u6765\u5efa\u7acb\u5b9e\u9a8c\u5ba4\u3002\u8981\u628a\u6240\u6709\u8fd9\u4e9b\u90fd\u505a\u597d\u662f\u975e\u5e38\u56f0\u96be\u7684\uff0c\u4f46\u662f\u518d\u8bf4\u4e00\u904d-\u6211\u4eec\u77e5\u9053\u8fd9\u662f\u53ef\u80fd\u7684\uff0c\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u505a\u8fd9\u4ef6\u4e8b\u80cc\u540e\u7684\u6f5c\u529b\u3002\n\u56e0\u6b64\uff0c\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u7684\u4e3b\u8981\u5e0c\u671b\u662f\u8ba9\u8fd9\u4e2a\u60f3\u6cd5\u672c\u8eab\u770b\u8d77\u6765\u8db3\u591f\u73b0\u5b9e\uff0c\u4ee5\u4fbf\u6709\u4eba\u62ff\u8d77\u6a2a\u5e45\uff0c\u5e76\u6700\u7ec8\u5c06\u5176\u4ed8\u8bf8\u5b9e\u8df5\u3002\n\u540e\u8bb0\uff1a\u6211\u771f\u7684\u4e0d\u77e5\u905320\u5e74\u671f\u62e8\u6b3e\u662f\u4e0d\u662f\u4e00\u4ef6\u597d\u4e8b\u3002\u4ed6\u4eec\u5f88\u6709\u53ef\u80fd\u4e0d\u662f\u3002\u6211\u786e\u5b9e\u8ba4\u4e3a\u81f3\u5c11\u5e94\u8be5\u6709\u4eba\u8bd5\u7740\u7ed920\u5e74\u671f\u7684\u52a9\u5b66\u91d1\u3002\n[1]\u8fc8\u514b\u5c14\u00b7W\u00b7\u7c73\u52d2(Michael W.Miller)\u3002\u5b66\u672f\u514d\u8d39\u5348\u9910\uff1a\u770b\u7814\u7a76\u5458\u534f\u4f1a(PERMA)\u3002\u201c\u54c8\u4f5b\u6df1\u7ea2\u201d(The Harvard Crimson)\n[5]Vesna\u0160upak Smol\u010dI\u0107.\u3002\u8428\u62c9\u7c73\u51fa\u7248\u7269\uff1a\u5b9a\u4e49\u548c\u5b9e\u4f8b(Perma)\u3002\u836f\u7528\u751f\u7269\u5316\u5b66\u3002\n[8]\u5e03\u9c81\u65af\u00b7\u827e\u4f2f\u8328\u3001\u9a6c\u514b\u00b7W\u00b7\u57fa\u65bd\u7eb3\u3001\u96ea\u8389\u00b7\u8482\u5c14\u66fc\u548c\u54c8\u7f57\u5fb7\u00b7\u74e6\u9ed8\u65af\u3002\u5c06\u7f8e\u56fd\u751f\u7269\u533b\u5b66\u7814\u7a76\u4ece\u7cfb\u7edf\u6027\u7f3a\u9677\u4e2d\u62ef\u6551\u51fa\u6765(PERMA)\u3002PNAS\u3002\n[9]\u8fc8\u514b\u5c14\u00b7\u83b1\u7ef4\u7279\u548c\u4e54\u7eb3\u68ee\u00b7M\u00b7\u83b1\u7ef4\u7279\u3002\u7f8e\u56fd\u751f\u7269\u533b\u5b66\u7814\u7a76\u57fa\u7840\u53d1\u73b0\u7684\u672a\u6765(PERMA)\u3002PNAS\u3002\n[14]Mohammed AlQuraishi\u3002AlphaFold@CASP13\uff1a\u201c\u521a\u521a\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u201d(\u6c38\u4e45)\u3002\u5173\u4e8e\u795e\u79d8\u5b87\u5b99\u7684\u51e0\u70b9\u601d\u8003", "note_en": "Note: this essay was originally written for  the 2019 St. Gallen Symposium competition. (I didn\u2019t win)\n In 1933, the first group of Harvard Fellows, \u201call chosen on the basis of their exceptional promise, not their past work\u201d [1], started their fellowship. The Fellowship was created because Harvard\u2019s then President wanted to \u201cprovide an alternative [to Ph.D] path more suited to the encouragement of the rare and independent genius.\u201d [2].\n 85 years later, 38 out of 39 Junior Fellows either hold a PhD or are enrolled in a PhD program [3] and are explicitly chosen on the basis of past work, rather than promise [4]. It seems clear that Harvard is satisfied with missing out on an occasional late-blooming genius or a brilliant nonconformist who cannot stand 10+ years of higher education in pursuit of a degree, while making sure that all Fellows are \u201cgood enough\u201d.\n However, the point I want to make is not about Harvard specifically. Any institution, given the opportunity and the time, will learn to prioritize the median quality of its members and projects while trading-off variance \u2014 even against its mission; but universities and almost all academic institutions are unique in the extent to which this tendency manifests itself.\n  It\u2019s natural that universities want to hire the best and most brilliant scientists. In the past, they would be restricted to indirect and noisy signals. Today, academia can quantify the exact \u201cscientific contribution\u201d of any scientist via their objective h-index and the number of publications in top journals with orderly impact factors. This means that when universities choose whom to hire and whom to promote \u2014 and want to be objective about it \u2014 they rely heavily on these indicators. What this means when we think about it on a systemic level, is that the modern researcher\u2019s goal is not merely to solve the great mystery of the universe or to discover a new natural phenomenon, but to answer the great mystery and publish their findings in a top journal within the next 5 years to get a postdoc (if they\u2019re a graduate student), within the next 2-3 years to get another postdoc or the position of an Assistant Professor (if they\u2019re a postdoc), or within the next 3-5 years (if they\u2019re an Assistant Professor who wants to get promoted or to get tenure).\n There are a few obvious problems with all of this. First, all surrogate indicators can be gamed in some ways. For example, you can salami slice the results of the experiments to maximize the number of publications and citations [5]. But more importantly, if you\u2019re aiming at solving the grand mystery of the universe \u2014 however brilliant you are \u2014 there\u2019s good chance it will take 10 or 20 years to make discernable progress on that mystery, and when the time to move up the ladder comes, you will have nothing to show, except for years of failures; and  Nature is not a journal that regularly publishes negative results.\n So Peter Higgs \u2014 the discoverer of Higgs Boson \u2014 ends up concluding that he wouldn\u2019t be productive enough for today\u2019s academic system [6]; David Deutsch \u2014 the inventor of quantum computation \u2014 says that his first grant on quantum computers would have \u201cno chance\u201d of being awarded today [7]; and four of the United States\u2019 most accomplished biologists publish a paper titled \u201cRescuing US biomedical research from its systemic flaws\u201d, calling for science agencies to \u201csignificantly increase the numbers and kinds of awards that emphasize originality and risk-taking\u201d [8]; all this, while the average age of receiving first R01 \u2014 the most sought-after NIH grant \u2014 is now 44 [9].\n  There are two key reasons for why risk aversion grows over time. The first one is that organizations get burned [10]. When you take a chance on a person, they may turn out to be a genius or a trickster. When an organization is built on principles of trust, some crooks will inevitably learn to take advantage of it. Thus, the organization has an incentive to ask for a record of achievement and letters of recommendations, and to create procedures that would prevent crooks from taking advantage of it, which inevitably inconvenience and slow down honest people.\n The second reason is misalignment of incentives \u2014 in particular, the misalignment of timescales. People saving for their retirement want to maximize their returns over 20 years, but the hired CEO of the company they invest in wants to maximize her impact over 5 years and then move on to the next venture. Society wants scientific breakthroughs that would take 20 years of work, but individual scientists need to publish on schedule to get promoted; likewise, grantmakers want to maximize the number of  Nature papers they are responsible for (regardless of whether these papers are extraordinary or merely above average) while avoiding failure-bound projects.\n Academia is uniquely afflicted by both of these problems. Firstly, since academia lacks the mechanism for competitive displacement, bloat accumulating over time and inevitably rising risk-aversion can grow without bound [11]. If a firm becomes inefficient, it collapses and is replaced by another one. If science becomes inefficient\u2026 it continues to take in money and people and, well, scientific progress slows down. Secondly, as I pointed out above, science is severely afflicted by the problem of misaligned timescales. Grantmakers\u2019 planning horizons (note that I\u2019m talking about specific individuals who make specific decisions, not abstract institutions that theoretically care about the long-term) are severely limited by their own career planning horizons and by their understanding of what it takes to work on fundamental problems with little short-term payoff.\n The oft-repeated suggestion is to make grant-makers fund more high-risk projects. This is the choice of the four esteemed biologists I quoted previously, but it is not likely to bring significant change. For example, the European Research Council already does some targeted high-risk research funding. The results for 2017 are out now: 79% of high-risk projects achieved \u201ca major scientific advance\u201d or \u201ca scientific breakthrough\u201d [12, 13]. This seems extraordinary, until you realize that if these projects were high-risk, the vast majority of them would have failed completely and only a few of them would have achieved major advances. Which, in turn, implies that the \u201chigh-risk\u201d projects the European Research Council funds are nothing out of the ordinary.\n  My proposal is simple: take responsibility for progress.It is time for corporations and entrepreneurs to recognize that they can no longer rely on governments to fund and on academia to conduct fundamental research. Instead of doing translational research and simply bringing academia\u2019s fruits to market, they have to become bolder and take responsibility for what the future will look like, fund fundamental research, and bring to life a new vision for philanthropy.\n Historically, it was often individual patrons who were responsible for supporting genius artists and inventors; it was various princes, dukes, and counts who provided tutelage and financing to scientists and iconoclasts like Spinoza, Kepler, Descartes, Galileo, and endless others; it was the capitalists and financiers who founded universities and who are responsible for some of the grandest collections of art; and finally, it is two giant corporations \u2014 Xerox and AT&amp;T \u2014 that are responsible for the two laboratories \u2013 Xerox PARC and Bell Labs \u2013 that spearheaded the computer revolution and produced numerous invaluable contributions to physics, computer science, and engineering. Bell Labs\u2019 researchers developed first transistors and lasers, information theory, Unix operating system, C and C++ programming languages; all in all, 9 Nobel prizes were awarded for work done at it. Xerox PARC\u2019s researchers developed modern desktop computers, laser printers, graphical user interface, the computer mouse, object-oriented programming.\n Without these industrial laboratories, the state of technology would have been very different today. But what does modern industrial research look like? Every large corporation seems to have a research division. Yet the research they carry out is almost always short-term and applied [13]. Corporations have ceded the responsibility for fundamental science to government and academia. It is time to take this responsibility back and to create radical new forms of doing and funding science.\n What radical ideas do I propose? They are not radical in a sense that they haven\u2019t been tried before. They\u2019re radical for the simple fact of them being out of fashion today, even though they have proven their worth in the past.\n Today, philanthropists donate to risk-averse universities that then redistribute the funds. But nothing really prevents them from becoming the patrons of specific scientists they believe in. And yet, it\u2019s unheard of.\n Today, philanthropists create foundations that give short-term grants, simply extending the broken academia system, instead of starting long-term focused research labs. And even when corporations and universities do \u201cfundamental\u201d research for many decades, sometimes, a dozen engineers working on their problem for several months can outsmart all of them, as DeepMind recently showed with their protein structure prediction software [14].\n  Capital needs to again be used to fund individual mavericks and iconoclasts; and to fund them on the promise of greatness, instead of the proof of accomplishment. Capital needs to again be used to create bastions of intellectual freedom, instead of further buttressing the shortcomings of academia. The world needs the revival of the idea of patronage of scientists. And the world needs new Bell Labs. Here\u2019s how to do it.\n First of all, philanthropists should realize the value of long-term grants. However generous the funding is, if you need to renew the grant every three years, this effectively means you have to publish on schedule. Granting 10-year or 20-year grants \u2014 effectively becoming a patron \u2014 should become normal again. The reason this does not happen today is because we don\u2019t have enough trust in people. When you give a 20-year grant, there is always a chance that the person works for the next few years and then decides to just treat it a sinecure for the rest of their career. The prospect of this happening is so painful that today nobody gives long-term grants at all. Tenure \u2014 the only thing somewhat resembling them \u2014 is given after a months-long process that bears more semblance to the recruitment of a high-level diplomat than the hiring decision for an academic position [15]. And scientists still have to fight for grants \u2014 and therefore, work on incremental improvements \u2014 after getting tenure.\n The natural question is then, how to find the scientists to give 20-year grants to? But this is relatively straightforward: if you already give short-term grants, you can simply pick the scientists with the biggest promise and offer them a 20-year grant; and if you don\u2019t, the search will be more difficult, but in no way is it impossible. After all, princes, dukes, and counts were indeed able to find them.\n Recreating the visions of Xerox PARC and Bell Labs will require figuring out the right organizational and incentive structure, securing long-term funding, convincing established scientists that it is a good idea to move out of their universities, discovering young scientists who would blossom in the lab, hiring operational staff\u2026 and also finding your own Bob Taylor whose vision to build the lab around. It will be very hard to get all of these right, but again \u2014 we know that it\u2019s possible and we\u2019ve seen the potential that lies behind doing it.\n So, for now, my main hope is to make the idea itself seem realistic enough for someone to pick up the banner and to finally bring it to life.\n    Afterword: I don\u2019t really know if 20 year grants are a good thing. There\u2019s a good chance they\u2019re not. I do believe someone should at least try giving 20 year grants.\n       [1] Michael W. Miller.  An Academic Free Lunch: A Look at the Society of Fellows ( perma).  The Harvard Crimson\n    [5] Vesna \u0160upak Smol\u010di\u0107.  Salami publication: definitions and examples ( perma).  Biochemia Medica\n   [8] Bruce Alberts, Marc W. Kirschner, Shirley Tilghman, and Harold Varmus.  Rescuing US biomedical research from its systemic flaws ( perma).  PNAS\n [9] Michael Levitt and Jonathan M. Levitt.  Future of fundamental discovery in US biomedical research ( perma).  PNAS\n      [14] Mohammed AlQuraishi.  AlphaFold @ CASP13: \u201cWhat just happened?\u201d ( perma).  Some Thoughts on a Mysterious Universe", "posttime": "2020-07-21 11:38:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9769\u547d,patronage,\u7814\u7a76", "title": "\u91cd\u632f\u8d5e\u52a9\u4e0e\u9769\u547d\u4ea7\u4e1a\u7814\u7a76", "title_en": "Reviving Patronage and Revolutionary Industrial Research", "transed": 1, "url": "https://guzey.com/patronage-and-research-labs/", "via": "", "real_tags": ["\u9769\u547d", "patronage", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "3fd3fb20713de195cd7493a26e6364a9.png", "infoid": 1013197, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u6f2b\u753b\u7684\u6c38\u4e45\u94fe\u63a5\uff1ahttps://xkcd.com/1732/\u56fe\u7247\u5730\u5740(\u7528\u4e8e\u70ed\u94fe\u63a5/\u5d4c\u5165)\uff1ahttps://imgs.xkcd.com/comics/earth_temperature_timeline.png\u3002\nXkcd.com\u6700\u597d\u7528Netscape Navigator 4.0\u6216\u66f4\u4f4e\u7248\u672c\u5728Apple IIGS\u4e0a\u7528Javascript\u6a21\u62df\u7684\u5954\u817e3\u00b11\u4e0a\u67e5\u770b\uff0c\u5c4f\u5e55\u5206\u8fa8\u7387\u4e3a1024x1\u3002\u8bf7\u542f\u7528\u60a8\u7684\u5e7f\u544a\u62e6\u622a\u7a0b\u5e8f\uff0c\u7981\u7528\u9ad8\u70ed\u70d8\u5e72\uff0c\u7136\u540e\u5c06\u60a8\u7684\u8bbe\u5907\u4ece\u98de\u673a\u6a21\u5f0f\u4e2d\u79fb\u9664\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a\u8239\u8f7d\u6a21\u5f0f\u3002\u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u8bf7\u5728\u6d4f\u89c8\u65f6\u4fdd\u6301\u5927\u5199\u9501\u5b9a\u3002\n\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u81ea\u7531\u590d\u5236\u548c\u5206\u4eab\u8fd9\u4e9b\u6f2b\u753b(\u4f46\u4e0d\u80fd\u51fa\u552e\u5b83\u4eec)\u3002\u66f4\u591a\u7ec6\u8282\u3002", "note_en": "Permanent link to this comic: https://xkcd.com/1732/ Image URL (for hotlinking/embedding): https://imgs.xkcd.com/comics/earth_temperature_timeline.png\n xkcd.com is best viewed with Netscape Navigator 4.0 or below on a Pentium 3\u00b11 emulated in Javascript on an Apple IIGS at a screen resolution of 1024x1. Please enable your ad blockers, disable high-heat drying, and remove your device from Airplane Mode and set it to Boat Mode. For security reasons, please leave caps lock on while browsing.\n This means you&#39;re free to copy and share these comics (but not to sell them).  More details.", "posttime": "2020-07-21 11:33:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65f6\u95f4,temperature,https", "title": "\u5730\u6e29\u65f6\u95f4\u7ebf", "title_en": "Earth Temperature Timeline", "transed": 1, "url": "https://xkcd.com/1732/", "via": "", "real_tags": ["\u65f6\u95f4", "https"]}, {"category": "", "categoryclass": "", "imagename": "88de91404b69b8da1f6dd1bd6be05097.jpeg", "infoid": 1013195, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u200dPhilip Clifton\u662f\u4e00\u540d\u9ad8\u7ea7\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u548c\u56e2\u961f\u8d1f\u8d23\u4eba\uff0c\u8d1f\u8d23\u6307\u5bfcFlightAware\u7f51\u7edc\u6280\u672f\u7684\u6574\u4f53\u5b9e\u73b0\u3002\n\u5bf9\u4e8eFlightAware\u7684\u8bb8\u591a\u7528\u6237\u6765\u8bf4\uff0c\u7f51\u7ad9\u4e0a\u6700\u660e\u663e\u548c\u6700\u76f4\u89c2\u7684\u4f53\u9a8c\u4e4b\u4e00\u662f\u5730\u56fe\uff0c\u8fd9\u4e9b\u5730\u56fe\u4ee5\u5404\u79cd\u5f62\u5f0f\u63cf\u7ed8\u4e86\u822a\u73ed\u6570\u636e-\u4e2a\u522b\u822a\u73ed\u3001\u5f80\u8fd4\u673a\u573a\u7684\u4ea4\u901a\u60c5\u51b5\u548c\u822a\u7a7a\u516c\u53f8\u673a\u961f\u3002\u7136\u800c\uff0c\u4e5f\u8bb8\u6700\u660e\u663e\u7684\u5e94\u7528\u7a0b\u5e8f\u662fFlightAware\u5b9e\u65f6\u5730\u56fe-\u8fd9\u662f\u4e00\u6b3e\u8bd5\u56fe\u63cf\u7ed8\u4e16\u754c\u5404\u5730\u6240\u6709\u6b63\u5728\u98de\u884c\u7684\u98de\u673a\u7684\u4ea7\u54c1\u3002\u5b9e\u73b0\u6b64\u5730\u56fe\u529f\u80fd\u9762\u4e34\u91cd\u5927\u6311\u6218-\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u90fd\u53ef\u80fd\u6709\u8d85\u8fc710,000\u67b6\u98de\u673a\u5728\u9014\u4e2d\uff0c\u9700\u8981\u83b7\u53d6\u3001\u5904\u7406\u3001\u4f20\u8f93\u5230\u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u5e76\u5448\u73b0\u5927\u91cf\u6570\u636e\u3002\u8fd9\u4e9b\u6b65\u9aa4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u9700\u8981\u8fc5\u901f\u800c\u6709\u6548\u5730\u5de5\u4f5c-\u6bd5\u7adf\uff0c\u5982\u679c\u7528\u6237\u5fc5\u987b\u7b49\u5f8510\u79d2\u4ee5\u4e0a\u624d\u80fd\u771f\u6b63\u52a0\u8f7d\u63cf\u8ff0\uff0c\u5373\u4f7f\u662f\u6700\u5f15\u4eba\u6ce8\u76ee\u7684\u5730\u56fe\u63cf\u8ff0\u4e5f\u4f1a\u5931\u53bb\u4e00\u4e9b\u5f71\u54cd\uff01\n\u5728\u6211\u4eec\u8fdb\u5165\u8fd9\u4e9b\u6311\u6218\u7684\u6838\u5fc3\u4e4b\u524d\uff0c\u6211\u4eec\u5c06\u7b80\u8981\u8ba8\u8bba\u4e00\u4e9b\u6620\u5c04\u6982\u5ff5\u3002\u591a\u4e8f\u4e86Google Maps\u7b49\u5de5\u5177\uff0c\u57fa\u4e8eWeb\u7684\u5730\u56fe\u4ea7\u54c1\u5982\u4eca\u65e0\u5904\u4e0d\u5728\uff0c\u800c\u4e14\u968f\u7740\u5b83\u4eec\u7684\u6d41\u884c\uff0c\u5730\u56fe\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u51fa\u73b0\u4e86\u5927\u91cf\u7684\u6807\u51c6\u5316\u3002\u4e0e\u6b64\u8ba8\u8bba\u7279\u522b\u76f8\u5173\u7684\u662f\u5730\u56fe\u5982\u4f55\u4f7f\u7528\u78c1\u8d34\u6765\u63d0\u4f9b\u53ef\u9760\u7684\u7528\u6237\u4f53\u9a8c\u3002\n\u5f53\u6211\u4eec\u8c08\u8bba\u201c\u5e73\u94fa\u201d\u65f6\uff0c\u6211\u4eec\u771f\u6b63\u8c08\u8bba\u7684\u662f\u5c06\u5730\u56fe\u7684\u6570\u636e\u6216\u56fe\u50cf\u5206\u89e3\u6210\u4e00\u5c0f\u5757\u4e00\u53e3\u5927\u5c0f\u7684\u5c0f\u5757\u3002\u8ba9\u6211\u4eec\u4ee5FlightAware\u7684\u7ecf\u5178\u84dd\u8272\u57fa\u7840\u5c42\u4e3a\u4f8b\u3002\u867d\u7136\u6211\u4eec\u5f53\u7136\u6709\u80fd\u529b\u5c06\u6240\u6709\u5185\u5bb9\u5448\u73b0\u4e3a\u5355\u4e2a\u5927\u56fe\u50cf\uff0c\u4f46\u5b9e\u9645\u4e0a\u6211\u4eec\u5c06\u5176\u5206\u89e3\u4e3a\u5355\u72ec\u7684\u5c0f\u56fe\u50cf\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u5f53\u7528\u6237\u67e5\u770b\u5730\u7403\u7684\u4e00\u5c0f\u90e8\u5206\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u52a0\u8f7d\u5730\u56fe\u89c6\u53e3\u4e2d\u53ef\u89c1\u5185\u5bb9\u6240\u9700\u7684\u74e6\u7247\u3002\u8fd9\u53cd\u8fc7\u6765\u53c8\u8282\u7701\u4e86\u4e0d\u5fc5\u8981\u7684\u5de5\u4f5c\u548c\u6570\u636e\u4f20\u8f93-\u5373\u52a0\u8f7d\u7528\u6237\u65e0\u6cd5\u67e5\u770b\u7684\u56fe\u50cf\u3002\n\u5bf9\u4e8e\u6211\u4eec\u5728FlightAware\u5730\u56fe\u4e0a\u4f7f\u7528\u5206\u7247\u7684\u5927\u591a\u6570\u60c5\u51b5\uff0c\u6211\u4eec\u4f7f\u7528\u4e09\u7ef4\u5750\u6807\u7cfb\uff0c\u5b83\u6839\u636e\u5206\u7247\u7684\u5730\u7406\u4f4d\u7f6e(X/Y\u5750\u6807\uff0c\u5bf9\u5e94\u4e8e\u7ecf\u5ea6\u548c\u7eac\u5ea6)\u53ca\u5176\u7f29\u653e\u7ea7\u522b(Z\u201c\u5750\u6807\u201d)\u6765\u8bc6\u522b\u5206\u7247\u3002\u7b2c\u4e09\u4e2a\u7f29\u653e\u7ef4\u5ea6\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u6211\u4eec\u6839\u636e\u5f53\u524d\u7684\u7f29\u653e\u7ea7\u522b\u5b9a\u5236\u74f7\u7816\u4e0a\u6240\u63cf\u7ed8\u7684\u5185\u5bb9\u3002\u5f53\u7528\u6237\u8fd1\u8ddd\u79bb\u653e\u5927\u67d0\u4e2a\u533a\u57df\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u663e\u793a\u5927\u91cf\u7ec6\u8282-\u6b21\u8981\u9053\u8def\u3001\u673a\u573a\u8dd1\u9053\u7b49-\u4f46\u5982\u679c\u540c\u4e00\u7528\u6237\u7f29\u5c0f\u4ee5\u67e5\u770b\u6574\u4e2a\u7f8e\u56fd\uff0c\u90a3\u4e48\u5728\u8be5\u7ea7\u522b\u63cf\u7ed8\u6bcf\u4e00\u6761\u6b21\u8981\u9053\u8def\u548c\u8dd1\u9053\u90fd\u4f1a\u4e25\u91cd\u6270\u4e71\u5730\u56fe\uff01\n\u7136\u800c\uff0c\u8fd9\u4e2a\u4e09\u7ef4\u7cfb\u7edf\u6709\u4e00\u4e2a\u76f8\u5173\u7684\u7ed3\u679c\uff1a\u53ef\u80fd\u7684XYZ\u7ec4\u5408\u7684\u6570\u91cf\u4ee5\u60ca\u4eba\u7684\u901f\u5ea6\u589e\u957f\u3002\u6bcf\u589e\u52a0\u4e00\u4e2a\u6574\u6570\u7684\u7f29\u653e\u7ea7\u522b\uff0c\u6211\u4eec\u5c31\u4f1a\u4f7f\u5730\u56fe\u7684\u6bd4\u4f8b\u52a0\u500d\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e00\u82f1\u91cc\u7684\u8ddd\u79bb\u5728\u5c4f\u5e55\u4e0a\u5360\u7528\u4e8610\u4e2a\u50cf\u7d20\uff0c\u90a3\u4e48\u5728\u4e0b\u4e00\u4e2a\u53d8\u7126\u7ea7\u522b\u4e0a\uff0c\u5b83\u5c06\u5360\u752820\u4e2a\u50cf\u7d20\u3002\u8fd9\u6837\u505a\u7684\u7ed3\u679c\u662f\uff0c\u7ed9\u5b9a\u4efb\u610f\u89c6\u53e3\u5927\u5c0f\uff0c\u589e\u52a0\u4e00\u4e2a\u7f29\u653e\u610f\u5473\u7740\u6211\u4eec\u5c06\u8be5\u89c6\u53e3\u4e2d\u63cf\u7ed8\u7684\u5730\u7406\u533a\u57df\u51cf\u5c11\u56db\u500d\u3002\n\u540c\u65f6\uff0c\u6bcf\u4e2a\u5e73\u94fa\u56fe\u50cf\u603b\u662f\u4e00\u4e2a\u6052\u5b9a\u7684\u50cf\u7d20\u5927\u5c0f\uff0c\u56e0\u6b64\u6269\u5c55\u8d77\u6765\uff0c\u5355\u4e2a\u5e73\u94fa\u4e5f\u53ea\u8986\u76d6\u4e0b\u4e00\u4e2a\u8f83\u4f4e\u7f29\u653e\u7ea7\u522b\u7684\u5730\u7406\u533a\u57df\u76841/4\u3002\u56e0\u6b64\uff0c\u6bcf\u6b21\u6211\u4eec\u5c06\u7f29\u653e\u7ea7\u522b\u589e\u52a0\u4e00\u4e2a\u6574\u6570\uff0c\u6211\u4eec\u5c31\u9700\u8981\u56db\u500d\u591a\u7684\u5e73\u94fa\u6765\u8868\u793a\u6574\u4e2a\u4e16\u754c\u3002\u5728\u4e00\u4e2a\u5178\u578b\u7684\u7f29\u653e\u7ea7\u522b\u8303\u56f4\u5185(\u6bd4\u59821-20)\u5916\u63a8\u8fd9\u4e00\u70b9\uff0c\u53ef\u80fd\u4f1a\u6709\u6570\u5341\u4ebf\u4e2a\u53ef\u80fd\u7684\u5e73\u94fa\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u5e73\u94fa\u7b56\u7565\uff0c\u8ba9\u6211\u4eec\u7ee7\u7eed\u8ba8\u8bba\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5e73\u94fa\u4e2d\u63d0\u4f9b\u54ea\u4e9b\u7c7b\u578b\u7684\u6570\u636e\u3002\u4e0e\u56fe\u50cf\u6587\u4ef6\u975e\u5e38\u76f8\u4f3c\uff0c\u5e73\u94fa\u6709\u4e24\u79cd\u4e00\u822c\u5f62\u5f0f\uff1a\u5149\u6805\u548c\u77e2\u91cf\u3002\u53ef\u4ee5\u6839\u636e\u539f\u59cb\u5730\u7406\u6570\u636e\u8f6c\u6362\u6210(\u5e0c\u671b)\u6700\u7ec8\u7528\u6237\u5728\u89c6\u89c9\u4e0a\u6ee1\u610f\u7684\u4e1c\u897f\u7684\u70b9\u6765\u8003\u8651\u8fd9\u4e24\u8005\u4e4b\u95f4\u7684\u754c\u9650\u3002\n\u6805\u683c\u74f7\u7816\u5728\u670d\u52a1\u5668\u7aef\u6e32\u67d3\u4e3a\u5e38\u89c1\u7684\u56fe\u50cf\u683c\u5f0f\uff1aJPG\u3001PNG\u7b49\u3002\u74f7\u7816\u50cf\u4efb\u4f55\u5176\u4ed6\u56fe\u50cf\u4e00\u6837\u5411\u4e0b\u4f20\u9001\u5230\u6d4f\u89c8\u5668\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\uff0c\u6d4f\u89c8\u5668\u5185\u7684\u5730\u56fe\u8f6f\u4ef6\u5c06\u5176\u4e0e\u5176\u4ed6\u74f7\u7816\u653e\u5728\u9002\u5f53\u7684\u4f4d\u7f6e\u3002\n\u4f46\u662f\uff0c\u77e2\u91cf\u5e73\u94fa\u4ee5GeoJSON\u7b49\u683c\u5f0f\u4f5c\u4e3a\u7b80\u5355\u7684\u539f\u59cb\u6570\u636e\u4f20\u9012\u7ed9\u6d4f\u89c8\u5668\u3002\u7136\u540e\uff0c\u5236\u56fe\u8f6f\u4ef6\u8d1f\u8d23\u521b\u5efa\u8be5\u6570\u636e\u7684\u53ef\u89c6\u5316\uff0c\u5c06\u6570\u636e\u6240\u63cf\u8ff0\u7684\u8981\u7d20\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u7684\u9002\u5f53\u4f4d\u7f6e\uff0c\u5e76\u4f7f\u7528\u6837\u5f0f\u89c4\u5219\u6765\u63a7\u5236\u8981\u7d20\u7684\u5916\u89c2\u3002\n\u67e5\u770bFlightAware\u5b9e\u65f6\u5730\u56fe\u65f6\uff0c\u53ef\u4ee5\u770b\u5230\u8fd9\u4e24\u79cd\u7c7b\u578b\u7684\u5207\u7247\u7684\u793a\u4f8b\u3002\u7ecf\u5178\u7684\u84dd\u8272\u57fa\u5c42\u74f7\u7816\u662f\u5149\u6805\u56fe\u50cf\uff0c\u800c\u98de\u673a\u5219\u88ab\u63cf\u8ff0\u4e3a\u77e2\u91cf\u7279\u5f81\u3002\u672c\u8d28\u4e0a\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u4e00\u4e2a\u975e\u5e38\u957f\u7684\u70b9\u5217\u8868(\u6bcf\u67b6\u98de\u673a\u7684\u4f4d\u7f6e)\u4ee5\u53ca\u7528\u4e8e\u51b3\u5b9a\u5982\u4f55\u63cf\u8ff0\u98de\u673a\u7684\u5176\u4ed6\u5143\u6570\u636e\u3002\u98de\u673a\u7c7b\u578b(\u4f8b\u5982\uff0c\u6ce2\u97f3737)\u786e\u5b9a\u4f7f\u7528\u4ec0\u4e48\u56fe\u6807\uff0c\u98de\u673a\u7684\u5f53\u524d\u822a\u5411\u786e\u5b9a\u5176\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u5176\u4ed6\u98de\u884c\u6570\u636e(\u5982\u9ad8\u5ea6\u548c\u5730\u901f)\u7528\u4e8e\u5728\u5730\u56fe\u4e0a\u663e\u793a\u98de\u673a\u56fe\u6807\u65c1\u8fb9\u7684\u4fe1\u606f\u5757\u3002\n\u5c06\u5176\u4ed8\u8bf8\u5b9e\u8df5\uff1a\u5b9e\u65f6\u5730\u56fe\u7684\u77e2\u91cf\u6570\u636e(\u201c\u65e7\u201d\u65b9\u5f0f)\u3002\n\u5f53\u5b9e\u65f6\u5730\u56fe\u7b2c\u4e00\u6b21\u88ab\u6982\u5ff5\u5316\u65f6\uff0c\u83b7\u53d6\u6570\u636e\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff1a\u5ba2\u6237\u7aef\u5730\u56fe\u914d\u7f6e\u4e86\u4e00\u4e2a\u77e2\u91cf\u5c42(\u5373\u7528\u77e2\u91cf\u8981\u7d20\u586b\u5145\u7684\u56fe\u5c42)\uff0c\u8be5\u56fe\u5c42\u5229\u7528\u4e86\u524d\u9762\u6982\u8ff0\u7684XYZ\u5e73\u94fa\u65b9\u6848\u3002\u6570\u636e\u7684\u68c0\u7d22\u7531Ajax\u7aef\u70b9\u5904\u7406\uff0c\u8be5\u7aef\u70b9\u63a5\u53d7XYZ\u5750\u6807\u4f5c\u4e3a\u53c2\u6570\u3002\u6b64\u7aef\u70b9\u4e2d\u7684\u903b\u8f91\u8d1f\u8d23\u5c06\u8fd9\u4e9b\u5750\u6807\u8f6c\u6362\u4e3a\u7eac\u5ea6/\u7ecf\u5ea6\u8fb9\u754c\u6846\uff0c\u8be5\u6846\u8868\u793a\u5e73\u94fa\u5757\u7684\u5730\u7406\u8fb9\u754c\uff0c\u800c\u8be5\u8fb9\u754c\u6846\u53c8\u7528\u4e8e\u68c0\u7d22\u8be5\u6846\u5185\u7684\u6240\u6709\u5f53\u524d\u98de\u673a\u4f4d\u7f6e\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u4e00\u4e2a\u4e3b\u8981\u4f18\u70b9\u662f\u5b9e\u73b0\u8d77\u6765\u5f88\u7b80\u5355\u3002\u6211\u4eec\u4f7f\u7528\u7684\u5ba2\u6237\u7aef\u5730\u56fe\u5e93OpenLayers\u4e3a\u53d1\u51fa\u6b64\u7c7b\u8bf7\u6c42\u63d0\u4f9b\u4e86\u975e\u5e38\u5065\u58ee\u7684\u5185\u7f6e\u7c7b\uff1b\u56e0\u6b64\uff0c\u5ba2\u6237\u7aef\u4ee3\u7801\u5f88\u7b80\u5355(\u672c\u8d28\u4e0a\u964d\u4f4e\u5230\u914d\u7f6e\u7ea7\u522b)\uff0c\u670d\u52a1\u5668\u7aef\u4ee3\u7801\u4e5f\u540c\u6837\u7b80\u5355\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f88\u5bb9\u6613\u4ed8\u8bf8\u5b9e\u8df5-\u800c\u4e14\u594f\u6548\u4e86\u3002\n\u7136\u800c\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u6709\u4e00\u4e9b\u660e\u663e\u7684\u7f3a\u70b9\u3002\u6b63\u5982\u6211\u4eec\u5df2\u7ecf\u6982\u8ff0\u7684\uff0cXYZ\u5e73\u94fa\u5750\u6807\u7cfb\u7684\u672c\u8d28\u662f\uff0c\u6bcf\u4e2a\u7f29\u653e\u7ea7\u522b\u90fd\u6709\u4e00\u7ec4\u5b8c\u5168\u552f\u4e00\u7684\u5e73\u94fa\uff0c\u8fd9\u79cd\u7f29\u653e\u7ea7\u522b\u7684\u4e13\u4e00\u6027\u5bf9\u4e8e\u5728\u4e0d\u540c\u7f29\u653e\u7ea7\u522b\u63d0\u4f9b\u4e0d\u540c\u7ea7\u522b\u7684\u6570\u636e\u7ec6\u8282\u975e\u5e38\u6709\u7528\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6839\u672c\u6ca1\u6709\u5229\u7528\u8fd9\u79cd\u7279\u5b9a\u7684\u6f5c\u529b-\u6bcf\u4e2a\u5e73\u94fa\u8bf7\u6c42\u53ea\u76f8\u5f53\u4e8e\u201c\u5f52\u8fd8\u8fd9\u4e2a\u77e9\u5f62\u533a\u57df\u4e2d\u7684\u6240\u6709\u98de\u673a\u201d\u3002\n\u7ed3\u679c\uff0c\u6211\u4eec\u786e\u5b9e\u5728\u505a\u591a\u4f59\u7684\u5de5\u4f5c\u3002\u60f3\u8c61\u4e00\u4e0b\uff0c\u5982\u679c\u7528\u6237\u5141\u8bb8\u6240\u6709\u98de\u673a\u4ee5\u4f8b\u59823\u7ea7\u7684\u7f29\u653e\u7ea7\u522b\u52a0\u8f7d\uff0c\u7136\u540e\u653e\u5927\u5730\u56fe\u3002\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u65b0\u7684\u5730\u56fe\u89c6\u53e3\u6bd4\u4ee5\u524d\u7684\u5730\u7406\u533a\u57df\u66f4\u5c0f\uff0c\u800c\u4e14\u6211\u4eec\u5df2\u7ecf\u5728\u8be5\u66f4\u5927\u7684\u5730\u7406\u533a\u57df\u52a0\u8f7d\u4e86\u6240\u6709\u5df2\u77e5\u7684\u98de\u673a\uff0c\u6240\u4ee5\u5ba2\u6237\u7aef\u5df2\u7ecf\u6709\u4e86\u7f29\u653e\u540e\u663e\u793a\u6240\u9700\u7684\u6240\u6709\u6570\u636e-\u4f46\u662f\u5e73\u94fa\u5b9e\u73b0\u8981\u6c42\u5730\u56fe\u4e0a\u7684\u6240\u6709\u98de\u673a\u90fd\u4ece\u767d\u677f\u4e0a\u91cd\u65b0\u52a0\u8f7d\uff01\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u8fd8\u662f\u594f\u6548\u4e86\uff0c\u591a\u5e74\u6765\u4e00\u76f4\u4e3aFlightAware\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u5c55\u793a\u4ea7\u54c1-\u76f4\u5230\u5934\u5bf8\u6570\u636e\u7684\u589e\u52a0\u5f00\u59cb\u5c06\u7f3a\u70b9\u53d8\u6210\u5b9e\u9645\u95ee\u9898\u3002\n\u4f5c\u4e3a\u6027\u80fd\u96be\u9898\u7684\u6700\u540e\u4e00\u5757\uff0c\u8ba9\u6211\u4eec\u7b80\u8981\u8ba8\u8bbaFlightAware\u5982\u4f55\u5b58\u50a8\u548c\u68c0\u7d22\u822a\u73ed\u7684\u4f4d\u7f6e\u548c\u8f68\u8ff9\u3002\u867d\u7136\u6211\u4eec\u4f7f\u7528PostgreSQL\u4f5c\u4e3a\u6211\u4eec\u7684\u4e3b\u8981\u5173\u7cfb\u6570\u636e\u5e93\u5f15\u64ce\uff0c\u4f46\u662f\u6211\u4eec\u63a5\u6536\u7684\u5927\u91cf\u4f4d\u7f6e\u6570\u636e\u4f7f\u6211\u4eec\u65e0\u6cd5\u5c06\u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u5728Postgres\u4e2d\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u4eec\u5bf9\u9014\u4e2d\u7684\u822a\u73ed\u4f7f\u7528\u5355\u72ec\u7684\u5b58\u50a8\u7cfb\u7edf\uff0c\u4ece\u800c\u5141\u8bb8\u66f4\u597d\u7684\u66f4\u65b0\u548c\u68c0\u7d22\u6027\u80fd\u3002\u8fd9\u4e2a\u7cfb\u7edf\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u662fBirdseye\uff0c\u8fd9\u662f\u4e00\u4e2a\u5efa\u7acb\u5728Speedtables\u4e4b\u4e0a\u7684\u5185\u5b58\u4f4d\u7f6e\u6570\u636e\u5e93\u3002Birdseye\u4e3a\u6211\u4eec\u670d\u52a1\u4e86\u5f88\u591a\u5e74\uff0c\u76f4\u52302018\u5e74\uff0c\u5b83\u88abPopye\u53d6\u4ee3\uff0c\u540e\u8005\u4f7f\u7528SQLite\u4f5c\u4e3a\u57fa\u7840\uff0c\u800c\u4e0d\u662fSpeedtable\u3002\n\u8fd9\u4e24\u8005\u90fd\u6709\u7c7b\u4f3c\u7684\u6027\u80fd\u95ee\u9898\uff0c\u5c3d\u7ba1\u8fd9\u79cd\u62c5\u5fe7\u5728Birdseye\u4e2d\u66f4\u4e3a\u666e\u904d\u3002\u5177\u4f53\u5730\u8bf4\uff0c\u5bf9\u4e8e\u8fb9\u754c\u6846\u641c\u7d22\u7528\u4f8b\uff0c\u68c0\u7d22\u4e00\u7ec4\u4f4d\u7f6e\u6240\u9700\u7684\u65f6\u95f4\u4e0e\u5728\u7ed3\u679c\u96c6\u4e2d\u627e\u5230\u7684\u5339\u914d\u4f4d\u7f6e\u7684\u6570\u91cf\u5927\u81f4\u6210\u6b63\u6bd4\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u5305\u542b1,000\u4e2a\u98de\u673a\u4f4d\u7f6e\u7684\u5305\u56f4\u76d2\u7684\u53d6\u56de\u65f6\u95f4\u5927\u7ea6\u662f\u4e00\u4e2a\u5305\u542b100\u4e2a\u4f4d\u7f6e\u7684\u5305\u56f4\u76d2\u768410\u500d\u3002\n\u4eba\u4eec\u53ef\u80fd\u4f1a\u5fcd\u4e0d\u4f4f\u8ba4\u4e3a\u8fd9\u4e2a\u95ee\u9898\u53ea\u9002\u7528\u4e8e\u5927\u5c0f\u5dee\u5f02\u5f88\u5927\u7684\u76d2\u5b50(\u4e5f\u5c31\u662f\u74f7\u7816)\uff0c\u4f46\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u6bd5\u7adf\uff0c\u5728\u9014\u4e2d\u7684\u98de\u673a\u5e76\u4e0d\u662f\u901a\u8fc7\u4efb\u4f55\u60f3\u8c61\u529b\u5747\u5300\u5730\u5206\u5e03\u5728\u5168\u7403\u5404\u5730\u7684\u3002\u4e3a\u4e86\u8bf4\u660e\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u8986\u76d6\u4e86\u9002\u7528\u7684XYZ\u5e73\u94fa\u7f51\u683c\u7684\u6837\u672c\u5b9e\u65f6\u5730\u56fe\uff1a\n\u73b0\u5728\uff0c\u60f3\u8c61\u4e00\u4e0b\u5728\u5730\u56fe\u5ba2\u6237\u7aef\u4e2d\u52a0\u8f7d\u5317\u5927\u897f\u6d0b\u548c\u5357\u5927\u897f\u6d0b\u74f7\u7816(\u5206\u522b\u4e3a2\uff0c1\uff0c-2\u548c2\uff0c1\uff0c-3)\u3002\u5357\u5927\u897f\u6d0b\u7684\u74f7\u7816\u52a0\u8f7d\u65f6\u95f4\u4e0d\u5230\u4e00\u79d2\uff0c\u800c\u5317\u7f8e\u7684\u74f7\u7816\u53ef\u80fd\u9700\u8981\u51e0\u79d2\u949f\u7684\u65f6\u95f4\u3002\u5728\u6700\u7ec8\u7528\u6237\u770b\u6765\uff0c\u7ed3\u679c\u770b\u8d77\u6765\u4ecb\u4e8e\u4e0d\u592a\u597d\u548c\u5f7b\u5e95\u5d29\u6e83\u4e4b\u95f4\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u98de\u884c\u6570\u636e\u7684\u65d7\u8230\u53ef\u89c6\u5316\u6765\u8bf4\uff0c\u8fd9\u80af\u5b9a\u662f\u4e00\u4e2a\u7cdf\u7cd5\u7684\u5916\u89c2\u3002\n\u51cf\u5c11\u8fd9\u79cd\u5dee\u5f02\u5f71\u54cd\u7684\u4f20\u7edf\u65b9\u6cd5\u662f\u901a\u8fc7\u6218\u7565\u7f13\u5b58\uff0c\u4f46\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5bf9\u5207\u7247\u7f51\u683c\u7684\u9009\u62e9\u518d\u6b21\u51fa\u73b0\u95ee\u9898\uff1a\u6b63\u5982\u6211\u4eec\u6240\u8ba8\u8bba\u7684\uff0c\u53ef\u80fd\u6709\u6570\u5341\u4ebf\u4e2a\u4e0d\u540c\u7684\u5207\u7247\uff0c\u8fd9\u610f\u5473\u7740\u5728\u4efb\u4f55\u7279\u5b9a\u65f6\u95f4\u7f13\u5b58\u4efb\u4f55\u7279\u5b9a\u5207\u7247\u7684\u53ef\u80fd\u6027\u90fd\u5f88\u5c0f\u3002\u53ef\u80fd\u7684\u5206\u7247\u5dee\u5f02\u592a\u5927\uff0c\u7f13\u5b58\u65e0\u6cd5\u53d1\u6325\u4f5c\u7528\u3002\n\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u770b\u5230\u4e86\u51e0\u5e74\u524d\u5b9e\u65f6\u5730\u56fe\u7684\u72b6\u6001\uff1a\u5ba2\u6237\u7aef\u52a0\u8f7d\u7f13\u6162\u3001\u96f6\u6563\uff0c\u5bf9\u6570\u636e\u7aef\u70b9\u7684\u5197\u4f59\u8c03\u7528\u7ed9\u6211\u4eec\u7684\u670d\u52a1\u5e26\u6765\u4e86\u4e0d\u5fc5\u8981\u7684\u989d\u5916\u8d1f\u8f7d\uff0c\u5e76\u4e14\u7f13\u5b58\u5927\u591a\u662f\u65e0\u6548\u7684\u3002\u663e\u7136\uff0c\u8fd9\u662f\u4e00\u79cd\u9700\u8981\u65b0\u7684\u89e3\u51b3\u65b9\u6848\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u51b3\u5b9a\u7684\u65b9\u5411\u662f\u653e\u5f03XYZ\uff0c\u8f6c\u800c\u91c7\u7528\u5b9a\u5236\u7684\u74f7\u7816\u7f51\u683c\u7cfb\u7edf\u3002\n\u4fdd\u6301\u6bcf\u4e2a\u74f7\u7816\u4e2d\u7684\u98de\u673a\u6570\u91cf\u76f8\u5bf9\u5747\u5300\uff0c\u4ece\u800c\u5141\u8bb8\u6240\u6709\u74f7\u7816\u5177\u6709\u76f8\u5bf9\u5747\u5300\u7684\u52a0\u8f7d\u65f6\u95f4\u3002\n\u9650\u5236\u53ef\u80fd\u7684\u5206\u7247\u6570\u91cf\uff0c\u4ee5\u5141\u8bb8\u66f4\u591a\u6539\u8fdb\u7684\u7f13\u5b58\u5171\u4eab\uff0c\u540c\u65f6\u8fd8\u4fdd\u6301\u6bcf\u4e2a\u5206\u7247\u7684\u98de\u673a\u6570\u91cf\u8db3\u591f\u4f4e\uff0c\u4ee5\u4f7f\u7f13\u5b58\u672a\u547d\u4e2d\u8d1f\u8f7d\u4fdd\u6301\u53ef\u63a5\u53d7\u7684\u8f83\u77ed\u65f6\u95f4\u3002\n\u6211\u4eec\u51b3\u5b9a\u63a2\u7d22\u7684\u89e3\u51b3\u65b9\u6848\u662f\u57fa\u4e8e\u5bf9\u98de\u884c\u4f4d\u7f6e\u6570\u636e\u7684\u5206\u6790\u751f\u6210\u4e00\u4e2a\u5e73\u94fa\u7f51\u683c\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u6536\u96c6\u6240\u6709\u5df2\u77e5\u7684\u98de\u884c\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06\u6574\u4e2a\u6570\u636e\u96c6\u5212\u5206\u4e3a\u5e73\u94fa\uff0c\u8fd9\u6837\u6bcf\u4e2a\u5e73\u94fa\u5305\u542b\u51e0\u4e4e\u76f8\u540c\u4e14\u53ef\u7ba1\u7406\u7684\u98de\u673a\u6570\u91cf\u3002\u505a\u8fd9\u4e2a\u5206\u6790\u5bf9\u73b0\u573a\u6765\u8bf4\u592a\u6602\u8d35\u4e86\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u5fc5\u987b\u662f\u4e00\u9879\u79bb\u7ebf\u5de5\u4f5c\u3002\u53e6\u4e00\u4e2a\u8981\u8003\u8651\u7684\u56e0\u7d20\u662f\uff0c\u98de\u673a\u7684\u5730\u7406\u5206\u5e03\u5728\u4e00\u5929\u4e2d\u7684\u4e0d\u540c\u65f6\u95f4\u4f1a\u6709\u5f88\u5927\u7684\u4e0d\u540c\uff1b\u5f53\u4e16\u754c\u7684\u4e00\u534a\u662f\u5b8c\u5168\u6e05\u9192\u7684\uff0c\u53e6\u4e00\u534a\u662f\u7761\u7720\u7684\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u4e3a\u7f8e\u56fd\u4e2d\u5348\u65f6\u95f4\u4f18\u5316\u7684\u74f7\u7816\u7f51\u683c\u572812\u5c0f\u65f6\u540e\u5c06\u4f1a\u975e\u5e38\u7cdf\u7cd5\uff0c\u90a3\u65f6\u98de\u673a\u7684\u5bc6\u5ea6\u5c06\u6709\u5229\u4e8e\u5730\u7403\u7684\u53e6\u4e00\u8fb9\u3002\u56e0\u6b64\uff0c\u6b64\u5e73\u94fa\u7f51\u683c\u9700\u8981\u5168\u5929\u5b9a\u671f\u91cd\u65b0\u751f\u6210\u3002\n\u5728\u8003\u8651\u4e86\u51e0\u4e2a\u5173\u4e8e\u5982\u4f55\u6267\u884c\u5fc5\u8981\u5206\u6790\u7684\u60f3\u6cd5\u4e4b\u540e\uff0c\u6211\u4eec\u786e\u5b9a\u4e86\u4e00\u4e2a\u76f8\u5f53\u57fa\u672c\u7684\u8fed\u4ee3\u65b9\u6cd5\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u8bd5\u9519\u8fc7\u7a0b\u3002\u5176\u57fa\u672c\u601d\u60f3\u662f\u53d6\u4e00\u5927\u5757\u5305\u542b\u4e00\u7cfb\u5217\u70b9\u7684\u77e9\u5f62\u533a\u57df\uff0c\u7136\u540e\u5c06\u5176\u5206\u5272\uff0c\u76f4\u5230\u8fbe\u5230\u6240\u9700\u7684\u70b9\u5bc6\u5ea6\u3002\u70b9\u7684\u4e0d\u5747\u5300\u5206\u5e03\u610f\u5473\u7740\u8fd9\u4e9b\u8f83\u5c0f\u7684\u77e9\u5f62\u5fc5\u7136\u5728\u5927\u5c0f\u4e0a\u53d8\u5316\u5f88\u5927\u3002\n\u8fd9\u4e2a\u60f3\u6cd5\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u628a\u201c\u5206\u88c2\u201d\u8fd9\u4e2a\u8bcd\u4ece\u5b57\u9762\u4e0a\u7406\u89e3\u4e3a\u201c\u5206\u88c2\u201d\u3002\u8fed\u4ee3\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\u7ed9\u5b9a\u4e00\u4e2a\u4efb\u610f\u77e9\u5f62\uff0c\u5c1d\u8bd5\u5728\u5176\u4e2d\u70b9\u5904\u62c6\u5206\u3002\u51b3\u5b9a\u662f\u5782\u76f4\u8fd8\u662f\u6c34\u5e73\u62c6\u5206\u77e9\u5f62\u53ea\u662f\u57fa\u4e8e\u54ea\u4e2a\u7ef4\u5ea6\u66f4\u5bbd\uff1a\u9ad8\u5ea6\u8fd8\u662f\u5bbd\u5ea6\u3002\n\u5728\u6b64\u521d\u59cb\u62c6\u5206\u4e4b\u540e\uff0c\u8ba1\u7b97\u62c6\u5206\u70b9\u6bcf\u4e00\u4fa7\u7684\u70b9\u6570\u3002\n\u6309\u7167\u4e0e\u8ba1\u6570\u4e0d\u5e73\u8861\u6210\u6bd4\u4f8b\u7684\u6570\u91cf\uff0c\u5411\u8f83\u5927\u70b9\u586b\u5145\u7684\u65b9\u5411\u79fb\u52a8\u62c6\u5206\u70b9\u3002\n\u5728\u5b9e\u8df5\u4e2d\uff0c\u201c\u76f8\u7b49\u201d\u7684\u5b9a\u4e49\u6709\u70b9\u6a21\u7cca\uff0c\u56e0\u4e3a\u5b9e\u9645\u4e0a\u53ef\u80fd\u65e0\u6cd5\u505a\u5230\u5b8c\u7f8e-\u4f8b\u5982\uff0c\u539f\u59cb\u77e9\u5f62\u53ef\u80fd\u5305\u542b\u5947\u6570\u4e2a\u70b9\u3002\n\u9012\u5f52\u91cd\u590d\u6b64\u62c6\u5206\u8fc7\u7a0b\uff0c\u76f4\u5230\u8fbe\u5230\u6bcf\u4e2a\u5e73\u94fa\u6240\u9700\u7684\u70b9\u6570\u3002\n\u867d\u7136\u6267\u884c\u77e9\u5f62\u62c6\u5206\u7684\u57fa\u672c\u65b9\u6cd5\u5982\u4e0a\u6240\u8ff0\uff0c\u4f46\u6b64\u8fc7\u7a0b\u6709\u4e00\u4e2a\u4e3b\u8981\u7f3a\u70b9-\u5177\u4f53\u5730\u8bf4\uff0c\u56e0\u4e3a\u6240\u6709\u62c6\u5206\u64cd\u4f5c\u90fd\u6d89\u53ca\u5c06\u4e00\u4e2a\u77e9\u5f62\u62c6\u5206\u4e3a\u4e24\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u4ec5\u9650\u4e8e\u6700\u7ec8\u7684\u5e73\u94fa\u8ba1\u6570\u662f2\u7684\u5e42\uff1a\u4e00\u4e2a\u77e9\u5f62\u53d8\u6210\u4e24\u4e2a\uff0c\u518d\u53d8\u6210\u56db\u4e2a\uff0c\u7136\u540e\u662f\u516b\u4e2a\u3001\u5341\u516d\u4e2a\u3001\u4e09\u5341\u4e8c\u4e2a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\n\u56de\u60f3\u8d77\u6211\u4eec\u7684\u76ee\u6807\u4e4b\u4e00\u662f\u4ed4\u7ec6\u4f18\u5316\u74f7\u7816\u603b\u6570\u548c\u6bcf\u5757\u74f7\u7816\u7684\u98de\u673a\u6570\u91cf\uff0c\u8fd9\u4e2a\u7ed3\u679c\u662f\u6709\u95ee\u9898\u7684\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ea\u80fd\u975e\u5e38\u7c97\u7565\u5730\u63a7\u5236\u6700\u7ec8\u7ed3\u679c\u3002\u5047\u8bbe\u6211\u4eec\u6709\u4e00\u4e2a\u5305\u542b4,000\u4e2a\u70b9\u7684\u96c6\u5408\uff0c\u5e76\u4e14\u6211\u4eec\u5e0c\u671b\u6bcf\u4e2a\u5e73\u94fa\u4ee5400\u4e2a\u70b9\u4e3a\u76ee\u6807-\u4f7f\u7528\u6b64\u65b9\u6cd5\uff0c\u9012\u5f52\u5982\u4e0b\u6240\u793a\uff1a\n16\u5757\u74f7\u7816=\u6bcf\u5757\u74f7\u7816250\u67b6\u98de\u673a\uff1b\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u5927\u5927\u8d85\u8fc7\u4e86\u6211\u4eec\u7684\u5bc6\u5ea6\u76ee\u6807\u3002\n\u663e\u7136\uff0c\u5982\u679c\u6211\u4eec\u60f3\u8981\u8fd9\u4e2a\u5206\u6790\u5b9e\u73b0\u6211\u4eec\u7684\u76ee\u6807\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u5176\u8fdb\u884c\u4e00\u4e9b\u6539\u8fdb\u3002\n\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6700\u660e\u663e\u7684\u65b9\u6cd5\u662f\u627e\u5230\u4e00\u79cd\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u6267\u884c\u74e6\u7247\u62c6\u5206\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u77e5\u9053\u7684\u552f\u4e00\u4e00\u79cd\u5206\u5272\u65b9\u6cd5\u662f\u5747\u5300\u5206\u5272\uff1a\u53d6\u4e00\u7ec4\u70b9\uff0c\u5c06\u5176\u5206\u5272\u6210\u4e24\u4e2a\u76f8\u7b49\u7684\u8f83\u5c0f\u7684\u79cd\u7fa4\u3002\n\u505a\u51fa\u8fd9\u4e00\u6539\u53d8\u7684\u5173\u952e\u662f\u4e00\u79cd\u7b80\u5355\u800c\u6709\u529b\u7684\u601d\u7ef4\u91cd\u7ec4\uff1a\u6211\u4eec\u4ee5\u524d\u7684\u65b9\u6cd5\u4e0d\u662f\u8ba4\u4e3a\u201c\u5c06\u8fd9\u4e2a\u7fa4\u4f53\u4e00\u5206\u4e3a\u4e8c\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u64cd\u4f5c\u91cd\u65b0\u8868\u8ff0\u4e3a\u201c\u5c06\u8fd9\u4e2a\u7fa4\u4f53\u5206\u6210\u4e24\u4e2a\u7fa4\u4f53\uff0c\u4e24\u4e2a\u65b0\u7fa4\u4f53\u4e4b\u95f4\u7684\u6bd4\u4f8b\u662f1\uff1a1\u3002\u201d\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u5e76\u901a\u8fc7\u8c03\u6574\u5206\u88c2\u903b\u8f91\u6765\u5339\u914d\uff0c\u6211\u4eec\u6253\u5f00\u4e86\u80fd\u591f\u5c06\u4eba\u53e3\u5206\u88c2\u6210\u4efb\u610f\u6bd4\u4f8b\u7684\u5927\u95e8\u3002\u53cd\u8fc7\u6765\uff0c\u8fd9\u53c8\u5141\u8bb8\u5c06\u4e00\u4e2a\u77e9\u5f62\u62c6\u5206\u6210\u76f8\u7b49\u6570\u91cf\u7684\u5c0f\u77e9\u5f62\uff1b\u4f8b\u5982\uff0c\u8981\u5c06\u5355\u4e2a\u77e9\u5f62\u62c6\u5206\u6210\u4e09\u4e2a\u5c0f\u77e9\u5f62\uff0c\u6211\u4eec\u53ef\u4ee5\u62c6\u5206\u539f\u59cb\u77e9\u5f62\u5e76\u4ee51\uff1a2\u7684\u6bd4\u4f8b\u4e3a\u76ee\u6807\uff1b\u7136\u540e\u6211\u4eec\u5c06\u4ee51\uff1a1\u7684\u6bd4\u4f8b\u518d\u6b21\u62c6\u5206\u8f83\u5927\u7684\u77e9\u5f62\uff0c\u4ece\u800c\u5f97\u5230\u4e09\u4e2a\u5177\u6709\u201c\u76f8\u7b49\u201d\u4eba\u53e3\u7684\u77e9\u5f62\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u7b97\u6cd5\u53ea\u5b8c\u6210\u4e86\u4e00\u534a\uff0c\u56e0\u4e3a\u6211\u4eec\u5fc5\u987b\u5f04\u6e05\u695a\u5982\u4f55\u4f7f\u7528\u8fd9\u79cd\u65b0\u7684\u4efb\u610f\u6bd4\u7387\u80fd\u529b\u3002\u4ee5\u524d\uff0c\u9012\u5f52\u62c6\u5206\u7684\u7ed3\u675f\u72b6\u6001\u5f88\u5bb9\u6613\u5b9a\u4e49\uff1a\u6bcf\u6b21\u62c6\u5206\u4e00\u7ec4\u77e9\u5f62\u65f6\uff0c\u6211\u4eec\u90fd\u4f1a\u68c0\u67e5\u74f7\u7816\u5bc6\u5ea6\uff0c\u770b\u770b\u5b83\u662f\u5426\u8db3\u591f\u4f4e\uff1b\u5982\u679c\u4e0d\u591f\u4f4e\uff0c\u5219\u518d\u6b21\u62c6\u5206\u6240\u6709\u77e9\u5f62(\u5c06\u74f7\u7816\u6570\u91cf\u52a0\u500d)\uff0c\u7136\u540e\u518d\u6b21\u68c0\u67e5\u3002\u4e00\u65e6\u74f7\u7816\u5bc6\u5ea6\u964d\u5230\u6211\u4eec\u7684\u95e8\u69db\u4ee5\u4e0b\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u505c\u6b62\u5206\u88c2\u3002\n\u8fd9\u79cd\u9010\u6b65\u9012\u5f52\u4e0d\u9002\u7528\u4e8e\u4efb\u610f\u62c6\u5206\u3002\u56de\u5230\u6211\u4eec\u5c06\u4e00\u4e2a\u77e9\u5f62\u62c6\u5206\u6210\u4e09\u4e2a\u8f83\u5c0f\u7684\u77e9\u5f62\u7684\u793a\u4f8b\uff0c\u5728\u62c6\u5206\u4e4b\u524d\uff0c\u6211\u4eec\u5fc5\u987b\u77e5\u9053\u5e94\u8be5\u5f97\u5230\u591a\u5c11\u4e2a\u77e9\u5f62\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86\u8fdb\u884c\u4efb\u610f\u62c6\u5206\u6240\u5fc5\u9700\u7684\u7b2c\u4e8c\u4e2a\u57fa\u672c\u91cd\u6784\uff1a\u4e0d\u662f\u4f7f\u7528\u74f7\u7816\u5bc6\u5ea6\u4f5c\u4e3a\u5f00\u59cb\u5ea6\u91cf\u5e76\u9012\u5f52\u62c6\u5206\uff0c\u76f4\u5230\u8fbe\u5230\u8be5\u76ee\u6807\uff0c\u800c\u662f\u5fc5\u987b\u5728\u5f00\u59cb\u4e4b\u524d\u51b3\u5b9a\u6211\u4eec\u9700\u8981\u591a\u5c11\u74f7\u7816\uff0c\u5e76\u9012\u5f52\u62c6\u5206\uff0c\u76f4\u5230\u6211\u4eec\u8fbe\u5230\u8fd9\u4e2a\u6570\u5b57\u3002\u5f53\u7136\uff0c\u8ba1\u7b97\u51fa\u74f7\u7816\u6570\u91cf\u5f88\u7b80\u5355\uff1a\u53ea\u9700\u5c06\u98de\u673a\u603b\u6570\u9664\u4ee5\u6240\u9700\u7684\u74f7\u7816\u5bc6\u5ea6\uff0c\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u6574\u6570\u3002\n\u4e0e\u6240\u6709\u9012\u5f52\u4ee3\u7801\u4e00\u6837\uff0c\u6267\u884c\u8fd9\u79cd\u62c6\u5206\u7684\u9012\u5f52\u4ee3\u7801\u65e2\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\uff0c\u53c8\u975e\u5e38\u7b80\u5355\u3002\n\u786e\u5b9a\u6240\u9700\u7684\u5e73\u94fa\u8ba1\u6570\u540e\uff0c\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u51fd\u6570(SPLIT_RECT_TO_COUNT)\uff0c\u8be5\u51fd\u6570\u7684\u552f\u4e00\u76ee\u7684\u662f\u5c06\u4e00\u4e2a\u77e9\u5f62\u5206\u5272\u6210\u4efb\u610f\u6570\u91cf\u7684\u5c0f\u77e9\u5f62(\u4f8b\u5982\uff1a\u201c\u5c06\u6574\u4e2a\u4e16\u754c\u5206\u5272\u621033\u4e2a\u77e9\u5f62\u201d)\uff1b\u4ece\u90a3\u91cc\u5f00\u59cb\uff0c\u903b\u8f91\u5982\u4e0b\u6240\u793a\uff1a\n\u901a\u8fc7\u5c06\u8bf7\u6c42\u7684\u8ba1\u6570\u9664\u4ee52\uff0c\u7136\u540e\u4f7f\u7528\u7ed3\u679c\u6570\u5b57\u7684\u4e0b\u9650\u548c\u4e0a\u9650\u6765\u786e\u5b9a\u62c6\u5206\u6bd4\u7387\uff0c\u4ece\u800c\u786e\u5b9a\u7b2c\u4e00\u6b21\u62c6\u5206\u64cd\u4f5c\u7684\u6bd4\u7387\u3002(\u4f8b\u598233/2=16.5=&gt\uff1b16/17\u6bd4\u7387)\u3002\n\u8c03\u7528\u7b2c\u4e8c\u4e2a\u51fd\u6570(Split_Rect)\uff0c\u5176\u552f\u4e00\u4efb\u52a1\u662f\u4f7f\u7528\u8bf7\u6c42\u7684\u6bd4\u7387\u5c06\u4eba\u53e3\u5206\u5272\u4e3a\u4e24\u4e2a\u77e9\u5f62\u3002\u6b64\u51fd\u6570\u8fd4\u56de\u4e24\u4e2a\u77e9\u5f62\u53ca\u5176\u70b9\u586b\u5145\u7684\u5217\u8868\uff0c\u987a\u5e8f\u4e0e\u8bf7\u6c42\u7684\u6bd4\u7387\u76f8\u540c\u3002(\u4f8b\u5982\uff0c16/17 SPLIT\u9996\u5148\u8fd4\u56de\u8f83\u5c0f\u7684\u77e9\u5f62\uff0c\u7136\u540e\u8fd4\u56de\u8f83\u5927\u7684\u77e9\u5f62)\u3002\n\u73b0\u5728\u6211\u4eec\u77e5\u9053\uff0c\u7b2c\u4e00\u4e2a\u77e9\u5f62\u9700\u8981\u62c6\u5206\u4e3a16\u4e2a\u8f83\u5c0f\u7684\u77e9\u5f62\uff0c\u7b2c\u4e8c\u4e2a\u77e9\u5f62\u9700\u8981\u62c6\u5206\u4e3a17\u4e2a\u3002\u6709\u4e86\u8fd9\u4e2a\u4fe1\u606f\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u9012\u5f52\u5730\u4e3a\u8fd9\u4e24\u4e2a\u77e9\u5f62\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8c03\u7528Split_rect_to_count\u3002\n\u4ece\u9876\u5c42\u5f00\u59cb\uff0c\u6b64\u9012\u5f52\u751f\u6210\u4e24\u4e2a\u77e9\u5f62\u5217\u8868\uff0c\u4e00\u4e2a16\u957f\uff0c\u53e6\u4e00\u4e2a17\u957f\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u8fde\u63a5\u5728\u4e00\u8d77\u4ee5\u751f\u6210\u6700\u7ec8\u7684\u77e9\u5f62\u5217\u8868\u3002\n\u4ece\u89c6\u89c9\u4e0a\u770b\uff0c\u8fd9\u4e2a\u9012\u5f52(\u4f7f\u7528\u8f83\u5c0f\u7684\u76ee\u6807\u8ba1\u65705)\u770b\u8d77\u6765\u6709\u70b9\u50cf\u8fd9\u6837(\u5c3d\u7ba1\u5728\u5b9e\u8df5\u4e2d\u5b83\u5f53\u7136\u4e0d\u662f\u5b8c\u5168\u5faa\u5e8f\u6e10\u8fdb\u7684\uff1a\n\u8fd9\u5c31\u662f\u6574\u4e2a\u8fc7\u7a0b\uff1a\u7528\u8fd9\u79cd\u7cbe\u81f4\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u5c3d\u53ef\u80fd\u63a5\u8fd1\u6211\u4eec\u60f3\u8981\u7684\u74f7\u7816\u5bc6\u5ea6\u3002\n\u65e2\u7136\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u5f88\u591a\u7406\u8bba\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b\u6211\u4eec\u5728\u5b9e\u8df5\u4e2d\u4ece\u8fd9\u79cd\u5e73\u94fa\u7f51\u683c\u751f\u6210\u65b9\u6cd5\u4e2d\u5b9e\u9645\u5f97\u5230\u4e86\u4ec0\u4e48\u3002\n\u9996\u5148\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e2a\u5b9e\u9645\u751f\u4ea7\u5e73\u94fa\u7f51\u683c\u7684\u793a\u4f8b\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u7f51\u683c\u7684\u76ee\u6807\u662f\u6bcf\u5757\u74f7\u7816\u6709400\u67b6\u98de\u673a\u7684\u5bc6\u5ea6\uff1a\n\u8fd9\u91cc\u9996\u5148\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u73b0\u5728\u6b63\u597d\u670926\u5757\u74f7\u7816\u8986\u76d6\u6574\u4e2a\u4e16\u754c\u3002\u56de\u60f3\u4e00\u4e0b\uff0cXYZ\u7f51\u683c\u9009\u62e9\u4f1a\u4ea7\u751f\u6570\u5341\u4ebf\u4e2a\u79bb\u6563\u7684\u74f7\u7816--\u6211\u4eec\u5df2\u7ecf\u5c06\u8fd9\u4e2a\u6570\u5b57\u51cf\u5c11\u4e869\u4e2a\u6570\u91cf\u7ea7\u3002\u8fd9\u5bf9\u7f13\u5b58\u6027\u80fd\u6765\u8bf4\u975e\u5e38\u91cd\u8981\uff01\n\u7b2c\u4e8c\u4ef6\u66f4\u62bd\u8c61(\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\u4e5f\u5f88\u7f8e)\u7684\u4e8b\u60c5\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u74f7\u7816\u7684\u5730\u7406\u5927\u5c0f\u4f5c\u4e3a\u98de\u673a\u5bc6\u5ea6\u7684\u6307\u793a\u5668\u3002\u6bd5\u7adf\uff0c\u6bcf\u4e00\u5757\u74f7\u7816\u90fd\u5c06\u5305\u542b\u76f8\u540c\u6570\u91cf\u7684\u98de\u673a\uff0c\u56e0\u6b64\u8f83\u5c0f\u74f7\u7816\u4e2d\u7684\u98de\u673a\u5fc5\u7136\u4f1a\u5305\u88c5\u5f97\u66f4\u5bc6\u96c6\u3002\u6211\u4eec\u770b\u5230\uff0c\u8fd9\u5e45\u56fe\u5f97\u51fa\u4e86\u5408\u7406\u7684\u7ed3\u8bba--\u7f8e\u56fd\u5927\u9646\u3001\u6b27\u6d32\u548c\u4e9a\u6d32\u7684\u5bc6\u5ea6\u90fd\u5f88\u9ad8\uff0c\u800c\u5357\u534a\u7403\u7684\u5bc6\u5ea6\u5374\u4f4e\u5f97\u79bb\u8c31\u3002\n\u8fd9\u5c31\u5f15\u51fa\u4e86\u7b2c\u4e8c\u4e2a\u793a\u4f8b\uff1a\u5938\u5f20\u7684\u5e73\u94fa\u7f51\u683c\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u7f51\u683c\uff0c\u76ee\u6807\u5bc6\u5ea6\u662f\u6bcf\u5757\u74f7\u7816100\u67b6\u98de\u673a\uff0c\u8fd9\u5f53\u7136\u610f\u5473\u7740\u6211\u4eec\u6709\u56db\u500d\u4e8e\u6b64\u7684\u74f7\u7816\u6570\u91cf\u3002\u8fd9\u4e5f\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u66f4\u7cbe\u7ec6\u5730\u4e86\u89e3\u5168\u7403\u7684\u98de\u673a\u5bc6\u5ea6\u5206\u5e03\uff1a\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5938\u5f20\u7684\u74f7\u7816\u7f51\u683c\u6765\u67e5\u770b\u7a7a\u4e2d\u98de\u673a\u5728\u4e00\u5929\u4e2d\u7684\u5206\u5e03\u662f\u5982\u4f55\u53d8\u5316\u7684\u3002\u8981\u521b\u5efa\u6b64\u52a8\u753b\uff0c\u9700\u8981\u572824\u5c0f\u65f6\u5185\u6bcf\u5c0f\u65f6\u751f\u6210\u4e00\u6b21\u5e73\u94fa\u6805\u683c\uff0c\u5e76\u5728\u5730\u56fe\u4e0a\u5bf9\u751f\u6210\u7684\u6805\u683c\u96c6\u4ee5\u53ca\u767d\u5929/\u591c\u665a\u8fb9\u754c\u7684\u8868\u793a\u8fdb\u884c\u52a8\u753b\u5904\u7406\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u6e05\u695a\u5730\u770b\u5230\u98de\u673a\u662f\u5982\u4f55\u8ddf\u968f\u592a\u9633\u5728\u4e16\u754c\u5404\u5730\u6d3b\u52a8\u7684\u3002\u591c\u665a\uff0c\u4e00\u4e2a\u5730\u533a\u53d8\u5f97\u5b89\u9759\uff0c\u7136\u540e\u968f\u7740\u65e9\u6668\u8ba9\u4f4d\u4e8e\u767d\u5929\uff0c\u53c8\u53d8\u5f97\u6d3b\u8dc3\u8d77\u6765\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u53e6\u4e00\u4e2a\u53d1\u4eba\u6df1\u7701\u7684\u4f8b\u8bc1\u3002\u524d\u9762\u7684\u6240\u6709\u74f7\u7816\u7f51\u683c\u793a\u4f8b\u90fd\u662f\u57282019\u5e74\u79cb\u5b63\u4f5c\u4e3a\u4f1a\u8bae\u6f14\u793a\u6587\u7a3f\u7684\u4e00\u90e8\u5206\u751f\u6210\u7684\u3002\u4ee5\u4e0b\u662f2020\u5e745\u6708\u4ee5\u6765\u8f83\u65b0\u7684\u5b9e\u9645\u751f\u4ea7\u74f7\u7816\u7f51\u683c\uff1a\n\u4ee5\u524d\u7684\u7f51\u683c\u9700\u898126\u5757\u74f7\u7816\u624d\u80fd\u8fbe\u5230400\u673a\u5bc6\u5ea6\u76ee\u6807\uff0c\u800c\u6211\u4eec\u73b0\u5728\u53ea\u970013\u5757\u74f7\u7816\u5c31\u53ef\u4ee5\u5b9e\u73b0\u540c\u6837\u7684\u76ee\u6807-\u8fd9\u662f\u65b0\u51a0\u80ba\u708e\u5168\u7403\u5927\u6d41\u884c\u5bfc\u81f4\u822a\u7a7a\u65c5\u884c\u6025\u5267\u51cf\u5c11\u7684\u7ed3\u679c\u3002\n\u5730\u56fe\u663e\u7136\u4f1a\u7ee7\u7eed\u5b58\u5728\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u76f4\u89c2\u800c\u5f15\u4eba\u5165\u80dc\u5730\u663e\u793aFlightAware\u7684\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u6709\u8d23\u4efb\u4e0d\u65ad\u6539\u8fdb\u8fd9\u4e9b\u4f53\u9a8c\u3002\u8fd9\u7c7b\u6570\u636e\u7684\u5e73\u94fa\u7b56\u7565\u5f88\u53ef\u80fd\u4e0d\u662f\u672a\u6765\u7684\u9009\u62e9--\u4f8b\u5982\uff0c\u5b9e\u65f6\u5730\u56fe\u662f\u6211\u4eec\u63d0\u4f9b\u7684\u552f\u4e00\u4f7f\u7528\u5e73\u94fa\u7684\u5730\u56fe\u4ea7\u54c1\u3002\u6240\u6709\u5176\u4ed6\u5730\u56fe\u90fd\u4f7f\u7528\u677e\u6563\u7684\u53d1\u5e03/\u8ba2\u9605\u6a21\u578b\uff0c\u5ba2\u6237\u7aef\u5730\u56fe\u901a\u8fc7\u8be5\u6a21\u578b\u8bf7\u6c42\u4e0e\u5176\u76f8\u5173\u7684\u76ee\u6807\u6570\u636e-\u4f8b\u5982\uff0c\u6240\u6709\u5f80\u8fd4Kiah\u7684\u822a\u73ed\uff0c\u6216\u5355\u4e2a\u822a\u73ed\u3002\u672a\u6765\u7684\u6539\u8fdb\u53ef\u80fd\u5305\u62ec\u4e3a\u5b9e\u65f6\u5730\u56fe\u6216\u5176\u4ed6\u529f\u80fd\u66f4\u4e30\u5bcc\u7684\u4ea7\u54c1\u91c7\u7528\u7c7b\u4f3c\u7684\u53d1\u5e03/\u8ba2\u9605\u6a21\u5f0f\uff0c\u8fd9\u4e9b\u4ea7\u54c1\u751a\u81f3\u53ef\u80fd\u652f\u6301\u3002\n.", "note_en": "\u200d Philip Clifton is a Senior Software Engineer 2 and Team Lead, responsible for guiding the overall implementation of Web technologies at FlightAware.\n For many users of FlightAware, one of the most visible and visual experiences on the website are the maps, depicting flight data in various forms\u2014individual flights, traffic to/from airports, and airline fleets. Perhaps the most visible application, however, is the FlightAware  live map\u2014a product that attempts to depict all en route aircraft around the world. Making this map function presents significant challenges\u2014there can be upwards of 10,000 aircraft en route at any given time, and that\u2019s a  lot of data to fetch, process, transport to the client browser, and render. Each of these steps needs to work promptly and efficiently\u2014after all, even the most compelling map depiction will lose some of its impact if users must wait 10+ seconds for the depiction to actually load!\n  Before we get into the meat of these challenges, we\u2019ll briefly discuss some mapping concepts. Web-based map products are ubiquitous these days thanks to tools like Google Maps, and with their popularity has come plenty of standardization in how maps work. Particularly pertinent to this discussion is how maps use  tiles to provide a solid user experience.\n When we talk about \u201ctiles,\u201d what we\u2019re really talking about is breaking up data or imagery for a map into small, bite-sized chunks. Let\u2019s use FlightAware\u2019s classic blue base layer as an example. While we certainly have the ability to render all the content as a single large image, in practice we break this up into individual smaller images. By doing this, when a user is looking at a small subset of the globe, we can load only the tiles needed for what\u2019s visible in the map viewport. This, in turn, saves unnecessary work and data transport\u2014that is, loading imagery that the user cannot view.\n For most cases where we use tiles on FlightAware maps, we use a three-dimensional coordinate system, which identifies tiles based on their geographical location (X/Y coordinates, corresponding to longitude and latitude) and their zoom level (a Z \u201ccoordinate\u201d). The third zoom dimension is important, as it allows us to tailor what\u2019s depicted on a tile to the current zoom level. When a user zooms in closely on an area, we want to show lots of detail\u2014minor roads, airport runways, etc.\u2014but if that same user zooms out to look at the entire US, then depicting every minor road and runway at that level would seriously clutter the map!\n There is, however, a pertinent consequence of this three-dimensional system: the number of possible XYZ combinations grows at an astonishing rate. Each time we increase the zoom level by a whole number, we double the scale of the map. That is, if a distance of one mile took up ten pixels on screen, at the next zoom level it would take up twenty. The consequence of this is that given any viewport size, increasing the zoom by one means we  decrease the geographical area depicted in that viewport by a factor of four.\n Meanwhile, every tile image is always a constant pixel size, so by extension, a single tile also covers only \u00bc the geographical area of the next-lower zoom level. As a result, each time we increase the zoom level by one whole number, we require four times as many tiles to represent the entire world. Extrapolating this over a typical range of zoom levels, say, 1-20, there are potentially  billions of possible tiles.\n   Now that we\u2019ve talked about tiling strategies, let\u2019s move on to discussing what sorts of data we can provide in these tiles. Much like image files, tiles take two general forms:  raster and  vector. The delineation between the two can be thought of in terms of the point at which raw geographical data is transformed into something that\u2019s (hopefully) visually pleasing to the end user.\n Raster tiles are rendered server-side into common image formats: JPG, PNG, etc. The tiles are shipped down to the browser like any other image, where the in-browser mapping software places it in its proper place alongside other tiles.\n Vector tiles, however, are passed to the browser as simple raw data in a format such as  GeoJSON. The mapping software is then responsible for creating a visualization of this data, placing the features described by the data in the proper place on the map, and using styling rules to control the appearance of the features.\n Examples of both of these types of tiles can be seen when examining the FlightAware live map. The classic blue base layer tiles are raster images, while the aircraft are depicted as vector features. Essentially, the client receives a very long list of points (the location of each aircraft) along with other metadata that\u2019s used to decide how to depict the aircraft. The aircraft type (e.g. Boeing 737) determines what icon is used, the aircraft\u2019s current heading determines where it\u2019s pointed, and other flight data such as altitude and groundspeed are used to display an informational block adjacent to an aircraft icon on a map.\n Putting it into practice: vector data for the live map (the \u201cold\u201d way)\n When the live map was first conceptualized, the approach taken to fetching data was straightforward: client-side maps were configured with a vector layer (that is, a layer populated with vector features), which utilized the XYZ tiling scheme outlined previously. Retrieval of the data was handled by an AJAX endpoint, which accepted the XYZ coordinates as parameters. Logic in this endpoint was responsible for transforming these coordinates into a latitude/longitude bounding box, representing the geographical bounds of the tile, which was in turn used to retrieve all current aircraft positions within that box.\n A major advantage of this approach is that it\u2019s straightforward to implement. OpenLayers, the client-side map library we use, provides very robust built-in classes for making such requests; as such, client-side code was simple (essentially reduced to the level of configuration), and server-side code was similarly straightforward. Put simply, this approach was easy to put into practice\u2014and it worked.\n However, there are some definite drawbacks to this approach. As we\u2019ve already outlined, the nature of XYZ tile coordinate systems is that there is an entirely unique set of tiles for each zoom level, and this zoom-level specificity can be useful for providing different levels of data detail at different zoom levels. In this case, we weren\u2019t leveraging that specificity potential at all\u2014every tile request simply amounted to \u201creturn all the aircraft in this rectangular region.\u201d\n As a result, we were quite literally doing redundant work. Imagine if a user allowed all aircraft to load at, say, zoom level 3, and then zoomed the map in. Since this means the new map viewport is a smaller geographical area than before, and since we already loaded all known aircraft in that larger geographical area, the client already has all the data required to display after zooming\u2014but the tiling implementation dictated that all aircraft on the map be reloaded from a blank slate!\n Still, it worked, and provided a great showcase product for FlightAware for many years\u2014until increases in position data began to turn shortcomings into actual problems.\n  For the final piece of the performance puzzle, let\u2019s briefly discuss how FlightAware stores and retrieves positions and tracks for flights. While we use PostgreSQL as our primary relational database engine, the sheer volume of positional data we receive makes storing this data in Postgres untenable. Instead, we use a separate storage system for en route flights, allowing for much better update and retrieval performance. The first iteration of this system was  birdseye\u2014an in-memory position database built on top of   Speedtables. Birdseye served us well for many years until 2018 when it was replaced with  popeye, which used SQLite as its underpinnings rather than Speedtables.\n Both of these share a similar performance concern, though this concern was much more prevalent with birdseye. Specifically, for the bounding-box search use case, the amount of time needed to retrieve a set of positions is roughly proportional to the number of matching positions found in the result set. For example, a bounding box containing 1,000 aircraft positions would take approximately ten times as long to fetch as a box containing 100 positions.\n One might be tempted to think that this problem would only apply to boxes (aka tiles) of vastly different sizes, but that\u2019s not the case. After all, en route aircraft aren\u2019t evenly distributed around the globe by any stretch of the imagination. To illustrate this, let\u2019s look at an exemplar live map, overlaid with the applicable XYZ tile grid:\n   Now, imagine loading the North and South Atlantic Ocean tiles (2,1,-2 and 2,1,-3 respectively) in a map client. The South Atlantic tile loads in less than a second, while North American tiles could take several seconds. The result, to the end user, looks somewhere between not great and outright broken. It\u2019s certainly a bad look for a flagship visualization of our flight data.\n A traditional way to reduce the impact of this discrepancy would be via strategic caching, but here our choice of tile grid becomes problematic again: as we discussed, there are potentially  billions of distinct tiles, which means the chances that any particular tile is cached at any particular time is slim. There\u2019s far too much variance in possible tiles for caching to be effective.\n  We\u2019ve now seen the state of the live map as of a few years ago: slow, patchy loads on the client, redundant calls to data endpoints putting unnecessary extra load on our services, and mostly-ineffective caching. Clearly, this was a situation that called for a new solution, and the direction in which we decided to go involved ditching XYZ in favor of a bespoke tile grid system.\n  Keep the number of aircraft in each tile relatively uniform, thus allowing all tiles to have a relatively uniform load time.\n Limit the number of possible tiles to allow for much-improved cache sharing, while also keeping the number of aircraft per tile low enough to keep a cache-miss load acceptably short.\n The solution that we decided to explore was to generate a tile grid based on analysis of flight position data. The idea was to gather all known in-flight positions at a point in time, and then divide the entire data set into tiles, such that every tile contained a nearly identical and manageable number of aircraft. Doing this analysis was going to be to expensive to do live, which meant it had to be an offline job. Another factor to consider was that the geographical distribution of aircraft would vary significantly by time of day; while one half of the world is wide awake, the other is asleep. Thus, a tile grid optimized for, say, the middle of the day in the US would be very poorly optimized twelve hours later, when the density of aircraft would favor the opposite side of the globe. As a result, this tile grid would need to be periodically regenerated throughout the day.\n  After thinking through a couple of ideas on how to perform the necessary analysis, we settled on a fairly rudimentary, iterative approach, essentially a trial-and-error process. The basic idea was to take a large rectangular area, which contained a series of points, and split it up until the desired point density was reached. The non-uniform distribution of points meant that these smaller rectangles would necessarily vary widely in size.\n The first iteration of this idea took the word \u201csplit\u201d rather literally. The iterative process went as follows:\n Given an arbitrary rectangle, try splitting it at its midpoint. The decision of whether to split a rectangle vertically or horizontally was based simply on what dimension was wider: height or width.\n After this initial split, count the number of points on each side of the split point.\n Move the split point in the direction of the larger point population, in an amount proportional to the count imbalance.\n  In practice, the definition of \u201cequal\u201d is a bit fuzzy, since perfection may not actually be achievable\u2014for example, the original rectangle might contain an odd number of points.\n Recursively repeat this splitting process until the desired number of points per tile is reached.\n     While the basic methodology of performing a rectangle split works as outlined above, there\u2019s a major shortcoming with this process\u2014specifically, since all split operations involve splitting one rectangle into two, we\u2019re limited to final tile counts that are powers of two: one rectangle becomes two, which become four, then eight, sixteen, thirty-two, and so on.\n Recalling that one of our goals was to carefully optimize both the total tile count and the number of aircraft per tile, this result was problematic. Using this approach, we only have very coarse control over the final result. Suppose that we have a set of 4,000 points and we want to target 400 points per tile\u2014using this approach, the recursion looks like:\n 16 tiles = 250 aircraft per tile; now we\u2019ve significantly overshot our density target\n Clearly, if we wanted this analysis to achieve our goals, we needed to refine it a bit.\n  The most obvious approach to this was finding a way to be much more flexible in performing our tile splits. Previously, the only split we knew how to do was an even split: take a population of points and split it into two equal smaller populations.\n The key to making this change was a simple yet powerful mental reframing: Instead of thinking of our previous approach as \u201csplit this population in half,\u201d we could rephrase the operation as \u201csplit this population into two populations, where the ratio between the two new populations is 1:1.\u201d By doing this, and by massaging the split logic to match, we opened the door to being able to split populations to  arbitrary ratios. This, in turn, allows for splitting a rectangle into an equally arbitrary number of smaller rectangles; for example, to split a single rectangle into three smaller ones, we\u2019d split the original rectangle and target a 1:2 ratio; we\u2019d then split the larger one again at a 1:1 ratio, resulting in three rectangles with \u201cequal\u201d populations.\n Still, we were only halfway to a working algorithm, because we had to figure out  how to use this new arbitrary-ratio ability. Previously, the end state of our recursive splitting was easy to define: each time we split our set of rectangles, we\u2019d check the tile density and see if it was low enough; if not, split all the rectangles again (doubling the tile count) and check again. Once the tile density fell below our threshold, we could stop splitting.\n That sort of stepwise recursion doesn\u2019t work for arbitrary splits. Returning to our example of splitting a rectangle into three smaller ones, we have to know before splitting how many rectangles we should end up with. This leads us to the second fundamental reframing necessary to make arbitrary splits work: instead of using tile density as our starting metric and splitting recursively until that goal is reached, we must decide before starting how many tiles we need to end up with, and recursively split until we reach that number. Figuring out this tile count is, of course, straightforward: simply divide the total number of aircraft by the desired tile density, rounding up to the next integer.\n The recursive code that performs this split is, like all recursive code, simultaneously mind-boggling and elegantly simple.\n After determining our desired tile count, we call a function ( split_rect_to_count) whose sole purpose is to split a rectangle into an arbitrary number of smaller rectangles (example: \u201csplit the entire world into 33 rectangles\u201d); from there, the logic proceeds as follows:\n Determine the ratio for the first split operation by dividing the requested count by two, then using the floor and ceiling of the resultant number to determine the split ratio. (eg 33/2 = 16.5 =&gt; 16/17 ratio)\n Call a second function ( split_rect) whose sole job is to split a population into two rectangles using the requested ratio. This function returns a list of two rectangles and their point populations, in the same order as the requested ratio. (e.g., 16/17 split returns the smaller rectangle first, followed by the larger)\n We now know that the first rectangle needs to be split into 16 smaller rectangles, and the second into 17. Armed with this information, we can now recursively call  split_rect_to_count for each of these two rectangles.\n From the top level, this recursion results in two lists of rectangles, one 16 long and the other 17 long, which we concatenate to yield the final list of rectangles.\n Visually, this recursion (using a smaller target count of five) looks somewhat like this (though it\u2019s of course not quite this stepwise in practice:\n   That\u2019s the entirety of the procedure: with this refined approach, we can come as close as humanly possible to nailing our desired tile density.\n  Now that we\u2019ve talked a lot of theory let\u2019s take a look at what we actually get from this tile grid generation approach in practice.\n To begin with, let\u2019s look at an example of an actual production tile grid. This particular grid is targeting a density of 400 aircraft per tile:\n   The first thing to notice here is that we now have exactly 26 tiles to cover the entire world. Recall that the XYZ grid choice results in  billions of discrete tiles\u2014we\u2019ve reduced that number by  nine orders of magnitude. This is  huge for cache performance!\n The second, more abstract (and, to me at least, beautiful) thing to notice is that we can use the geographical size of a tile as an indicator of aircraft density. After all, each tile will contain the same number of aircraft, so aircraft in smaller tiles must necessarily be more densely packed. And we see that this leads to reasonable conclusions with this image\u2014we have high densities over the continental US, Europe, and to a lesser extent Asia, and absurdly low densities in the southern hemisphere.\n This leads to a second example: an exaggerated tile grid. For this grid, the target density was 100 aircraft per tile, which of course means we have four times as many tiles. It also means that we get a finer-grained look at aircraft density distribution across the globe:\n  We can also use these exaggerated tile grids to get a look at how the distribution of airborne aircraft changes over the course of a day. To create this animation, a tile grid was generated once per hour for 24 hours, and the resulting set of grids was animated on a map, along with a representation of the day/night boundary. This allows us to see clearly how aircraft activity follows the sun around the world. At night, a region goes quiet, then becomes active again as morning gives way to daytime.\n    Finally, we can see one more sobering illustration. All of the preceding tile grid examples were generated in Fall of 2019 as part of a conference presentation. The following is a more recent actual production tile grid from May 2020:\n  While the previous grid required 26 tiles to hit the 400-aircraft density target, we can now achieve the same with only 13 tiles\u2014the result of the stark decrease in air travel resulting from the COVID-19 global pandemic.\n  Maps are obviously here to stay, since they allow for intuitive and engaging displays of FlightAware\u2019s data. This means it\u2019s on us to continually improve these experiences. It may very well be that tiling strategies for data like this are not the future\u2014for example, the live map is the only map product we offer that uses tiling. All other maps use a loose pub/sub model, by which the client map asks for targeted data that\u2019s relevant to it\u2014for example, all flights to/from KIAH, or a single flight. Future improvements might involve going to a similar pub/sub model for the live map, or for other, more feature-rich products that might even sup\n......", "posttime": "2020-07-21 11:25:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u74f7\u7816,tile", "title": "\u667a\u80fd\u74f7\u7816\u7f51\u683c\uff1a\u9488\u5bf9\u975e\u5747\u5300\u5730\u7406\u6570\u636e\u4f18\u5316FlightAware\u5730\u56fe", "title_en": "Smart Tile Grids: Optimizing FlightAware's Maps for Non-Uniform Geographic Data", "transed": 1, "url": "https://flightaware.engineering/smart-tile-grids-optimizing-flightawares-maps-for-the-display-of-non-uniform-geographical-data/", "via": "", "real_tags": ["\u74f7\u7816", "tile"]}, {"category": "", "categoryclass": "", "imagename": "7716047eaa5ae6f38e46f81601897e13.jpg", "infoid": 1013194, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u603b\u90e8\u4f4d\u4e8e\u591a\u4f26\u591a\u7684\u521d\u521b\u516c\u53f8Wattpad\u8bc1\u5b9e\uff0c\u5b83\u6b63\u5728\u8c03\u67e5\u4e00\u8d77\u5927\u89c4\u6a21\u7684\u7528\u6237\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\uff0c\u6b64\u524d\u7f51\u7edc\u5b89\u5168\u60c5\u62a5\u516c\u53f8\u548c\u201c\u53ef\u4fe1\u7684\u5a01\u80c1\u884c\u4e3a\u8005\u201d\u5728\u5728\u7ebf\u8bba\u575b\u4e0a\u53d1\u8868\u4e86\u58f0\u660e\u3002\n\u5f53\u8bb0\u8005\u8054\u7cfb\u5230Wattpad\u5c31\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u53d1\u8868\u8bc4\u8bba\u65f6\uff0cWattpad\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u6307\u51fa\uff0cBetakit\u57287\u670814\u65e5\u53d1\u5e03\u7684\u4e00\u4efd\u58f0\u660e\u4e2d\u6307\u51fa\uff0c\u8be5\u516c\u53f8\u201c\u6ce8\u610f\u5230\u6709\u62a5\u9053\u79f0\uff0c\u4e00\u4e9b\u7528\u6237\u6570\u636e\u5728\u672a\u7ecf\u6388\u6743\u7684\u60c5\u51b5\u4e0b\u88ab\u8bbf\u95ee\u201d\u3002\nWattpad\u8868\u793a\uff0c\u5728\u5916\u90e8\u5b89\u5168\u987e\u95ee\u7684\u534f\u52a9\u4e0b\uff0c\u5b83\u6b63\u5728\u201c\u7d27\u6025\u52aa\u529b\u8c03\u67e5\u3001\u904f\u5236\u548c\u8865\u6551\u8fd9\u4e2a\u95ee\u9898\u201d\u3002\nWattpad\u8868\u793a\uff0c\u5b83\u6b63\u5728\u201c\u7d27\u6025\u5de5\u4f5c\uff0c\u8c03\u67e5\u3001\u904f\u5236\u548c\u8865\u6551\u8fd9\u4e00\u95ee\u9898\u201d\u3002\n\u603b\u90e8\u4f4d\u4e8e\u4f50\u6cbb\u4e9a\u5dde\u7684\u7f51\u7edc\u5b89\u5168\u60c5\u62a5\u516c\u53f8Cyble\u57287\u670815\u65e5\u7684\u4e00\u7bc7\u5e16\u5b50\u4e2d\u6307\u51fa\uff0c\u5b83\u57287\u6708\u7684\u7b2c\u4e00\u5468\u68c0\u6d4b\u5230\u4e86\u5165\u4fb5\u6307\u63a7\uff0c\u5e76\u6536\u5230\u4e86\u5927\u7ea62.7\u4ebf\u6761\u7528\u6237\u8bb0\u5f55\u4ee510\u4e2a\u6bd4\u7279\u5e01\u7684\u4ef7\u683c\u51fa\u552e\u7684\u4fe1\u606f\uff0c\u5f53\u65f6\u7ea6\u540810\u4e07\u7f8e\u5143\u3002Cyble\u6307\u51fa\uff0c\u8fd9\u4e9b\u6570\u636e\u540e\u6765\u662f\u514d\u8d39\u63d0\u4f9b\u7684\u3002\nCyble\u58f0\u79f0\uff0c\u6839\u636e\u5bf9\u8bba\u575b\u5e16\u5b50\u7684\u8bc4\u4f30\uff0c2.71\u4ebf\u7528\u6237\u7684\u8bb0\u5f55\u5305\u62ec\u767b\u5f55\u51ed\u8bc1\u3001\u5168\u540d\u3001\u8054\u7cfb\u7535\u8bdd\u548c\u51fa\u751f\u65e5\u671f\u3002\u8fd9\u5bb6\u7f51\u7edc\u5b89\u5168\u516c\u53f8\u6307\u51fa\uff0c\u6839\u636e\u5176\u6d88\u606f\u6765\u6e90\u548c\u5728\u7ebf\u9ed1\u5ba2\u8bba\u575b\u4e0a\u7684\u4e00\u7bc7\u5e16\u5b50\uff0c\u5b83\u8ba4\u4e3a\u5165\u4fb5\u53d1\u751f\u57282020\u5e746\u6708\u3002\u8be5\u516c\u53f8\u8fd8\u58f0\u79f0\u5df2\u7ecf\u6838\u5b9e\u4e86\u6cc4\u9732\u7684\u7528\u6237\u8d26\u6237\u7684\u6837\u672c\u3002\nBetakit\u5df2\u7ecf\u8bc1\u5b9e\u4e86\u5728\u7ebf\u8bba\u575bRaidForum\u7684\u4e00\u7bc7\u5e16\u5b50\u7684\u5b58\u5728\uff0c\u8be5\u8bba\u575b\u58f0\u79f0Wattpad\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\u4e2d\u5305\u542b\u4e86\u201c2.71\u4ebf\u7528\u6237\u201d\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec1.89\u4ebf\u7528\u6237\u7684\u5bc6\u7801\u6563\u5217\u3002\u5728\u63a5\u4e0b\u6765\u7684\u51e0\u5929\u91cc\u91cd\u65b0\u4e0a\u4f20\u76847\u670814\u65e5\u7684\u5e16\u5b50\u58f0\u79f0\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u62ecFacebook\u8eab\u4efd\u3001Tumblr\u5bc6\u7801\u548c\u7535\u5b50\u90ae\u4ef6\u3002\u8fd9\u7bc7\u5e16\u5b50\u7684\u5185\u5bb9\u4e0eCyble\u53d1\u5e03\u7684\u4e00\u5f20\u7ecf\u8fc7\u7f16\u8f91\u7684\u622a\u56fe\u76f8\u5339\u914d\u3002\n\u5468\u4e00\uff0cWattpad\u66f4\u65b0\u4e867\u670814\u65e5\u7684\u58f0\u660e\uff0c\u5ba3\u5e03\u5c06\u91cd\u7f6e\u5bc6\u7801\uff0c\u5e76\u5efa\u8bae\u4f7f\u7528\u76f8\u540c\u5bc6\u7801\u7684\u7528\u6237\u66f4\u6539\u5176\u4ed6\u7f51\u7ad9\u7684\u5bc6\u7801\u3002", "note_en": "Toronto-based startup Wattpad has confirmed it is investigating a massive breach of user data, following claims made by cybersecurity intelligence firms and \u201ccredible threat actors\u201d on online forums.\n When reached for comment regarding the data breach, a Wattpad spokesperson pointed BetaKit to a  statement released on July 14 that noted the company is \u201caware of reports that some user data has been accessed without authorization.\u201d\n Wattpad stated it is \u201curgently working to investigate, contain, and remediate the issue,\u201d with the assistance of external security consultants.\n Wattpad stated it is \u201curgently working to investigate, contain, and remediate the issue.\u201d\n Cyble, a cybersecurity intelligence firm based in Georgia, noted in a  July 15 post that it detected claims of a breach in the first week of July and received information of approximately 270 million user records being sold for 10 bitcoins, or approximately $100,000 at the time. Cyble noted that the data was later being offered for free.\n Cyble claimed that based on assessing forum posts, the 271 million users\u2019 records included login credentials, full names, contact numbers, and dates of birth. The cybersecurity firm noted that based on its sources and a post on an online hacking forum, it believes the breach occurred in June 2020. The firm also claims to have verified a sampling of the leaked user accounts.\n BetaKit has confirmed the existence of a post from one online forum, RaidForums, which claims the Wattpad data breach contained information on \u201c271 million users,\u201d including password hashes for 189 million users. Re-uploads of the July 14 post in the following days claim that the data includes Facebook identifications, Tumblr passwords, and emails. The content of the post matches a redacted screenshot published by Cyble.\n On Monday, Wattpad  updated its July 14 statement, announcing that it would be resetting passwords and is advising its users to change passwords on other sites if they used the same password.", "posttime": "2020-07-21 11:04:45", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u5e73\u53f0,user", "title": "\u591a\u4f26\u591a\u5199\u4f5c\u5e73\u53f0Wattpad\u8868\u793a\uff0c\u5b83\u6b63\u5728\u8c03\u67e5\u4e00\u8d77\u7528\u6237\u6570\u636e\u6cc4\u9732\u4e8b\u4ef6\uff0c\u6b64\u524d\u6709\u62a5\u9053\u79f0\uff0c2.71\u4ebf\u6761\u7528\u6237\u8bb0\u5f55\u5728\u7f51\u4e0a\u6302\u724c\u51fa\u552e", "title_en": "Toronto-based writing platform Wattpad says it's investigating a breach of user data, following a report that 271M user records was up for sale online", "transed": 1, "url": "https://betakit.com/wattpad-investigating-reported-massive-data-breach-of-user-records/", "via": "", "real_tags": ["\u5e73\u53f0", "user"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1013193, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u5c31\u4f1a\u8bfb\u5230\u4e00\u7bc7\u6587\u7ae0\uff0c\u6700\u540e\u6211\u4f1a\u53cd\u590d\u601d\u8003\uff0c\u5e76\u5728\u8c08\u8bdd\u4e2d\u5f15\u7528\u8fd9\u4e9b\u6587\u7ae0\u3002\n\u8fd9\u662f\u6211\u80fd\u8bb0\u4f4f\u7684\u6240\u6709\u8fd9\u4e9b\u7684\u7d22\u5f15\uff01\u6211\u4f1a\u5c3d\u91cf\u4f7f\u5b83\u4fdd\u6301\u6700\u65b0\uff0c\u56e0\u4e3a\u6211\u60f3\u66f4\u591a\u3002\n(\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u975e\u5e38\u51fa\u540d\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u8fd8\u662f\u628a\u5b83\u4eec\u653e\u5728\u8fd9\u91cc\uff0c\u4ee5\u9632\u4f60\u662f\u8fd910,000\u540d\u5e78\u8fd0\u513f\u4e2d\u7684\u4e00\u5458\u3002)\u3002\n\u6211\u5f88\u597d\u5947\u8fd9\u4e00\u7c7b\u7684\u6587\u7ae0\u662f\u7ed9\u5176\u4ed6\u4eba\u770b\u7684--\u628a\u4f60\u7684\u6587\u7ae0\u8d34\u5728\u8bc4\u8bba\u91cc\u5427\uff01\n\u6211\u5bf9\u8f6f\u4ef6\u6709\u4e00\u79cd\u6839\u6df1\u8482\u56fa\u7684\u4fe1\u5ff5\uff0c\u90a3\u5c31\u662f\u8ba1\u7b97\u673a\u548c\u8f6f\u4ef6\u7cfb\u7edf\u662f\u53ef\u4ee5\u7406\u89e3\u7684\u3002\u5408\u5e76(&A\uff1bM)\u3002\n\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u8fd9\u79cd\u4fe1\u4ef0\u5728\u4eca\u5929\u611f\u89c9\u5f88\u6fc0\u8fdb\u3002\u73b0\u4ee3\u8f6f\u4ef6\u548c\u786c\u4ef6\u7cfb\u7edf\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u5c42\u4e4b\u95f4\u5305\u542b\u51e0\u4e4e\u4e0d\u53ef\u60f3\u8c61\u7684\u590d\u6742\u6027\uff0c\u6bcf\u4e2a\u5c42\u90fd\u5728\u5f7c\u6b64\u4e4b\u4e0a\u3002\u5408\u5e76(&A\uff1bM)\u3002\n\u9762\u5bf9\u8fd9\u79cd\u590d\u6742\u6027\uff0c\u5f88\u5bb9\u6613\u5047\u8bbe\u6709\u592a\u591a\u7684\u4e1c\u897f\u9700\u8981\u5b66\u4e60\uff0c\u5e76\u91c7\u7528\u5fc3\u7406\u4e0a\u7684\u7b80\u5199\uff0c\u5373\u6211\u4eec\u4f7f\u7528\u7684\u7cfb\u7edf\u6700\u597d\u88ab\u89c6\u4e3a\u9ed1\u5323\u5b50\uff0c\u4e0d\u9700\u8981\u7406\u89e3\u4efb\u4f55\u7ec6\u8282\u3002\n\u6211\u53cd\u5bf9\u8fd9\u79cd\u505a\u6cd5\u3002\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u7406\u89e3\u8be5\u5806\u6808\u4e0a\u6bcf\u4e2a\u7ea7\u522b\u7684\u5b9e\u73b0\u7684\u6bcf\u4e00\u4e2a\u7ec6\u8282\uff1b\u4f46\u662f\u60a8\u53ef\u4ee5\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u62bd\u8c61\u5730\u7406\u89e3\u6240\u6709\u8fd9\u4e9b\u7ec6\u8282\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u672c\u8d28\u4e0a\u7406\u89e3\u4efb\u4f55\u7279\u5b9a\u5c42\u5230\u4efb\u4f55\u7528\u9014\u6240\u9700\u7684\u4efb\u4f55\u6df1\u5ea6\u3002\n\u5047\u8bbe\u6bcf\u5bb6\u516c\u53f8\u83b7\u5f97\u5927\u7ea6\u4e09\u4e2a\u521b\u65b0\u4ee3\u91d1\u5238\u3002\u4f60\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u82b1\u8fd9\u4e9b\u94b1\uff0c\u4f46\u662f\u4f9b\u5e94\u662f\u56fa\u5b9a\u7684\uff0c\u9700\u8981\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\u3002\u5728\u4f60\u8fbe\u5230\u4e00\u5b9a\u7684\u7a33\u5b9a\u6027\u548c\u6210\u719f\u5ea6\u4e4b\u540e\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u66f4\u591a\uff0c\u4f46\u603b\u4f53\u8d8b\u52bf\u662f\u9ad8\u4f30\u4e86\u4f60\u94b1\u5305\u7684\u5185\u5bb9\u3002\u663e\u7136\uff0c\u8fd9\u4e2a\u6a21\u578b\u662f\u8fd1\u4f3c\u7684\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u662f\u6709\u5e2e\u52a9\u7684\u3002\n\u5982\u679c\u60a8\u9009\u62e9\u7528NodeJS\u7f16\u5199\u60a8\u7684\u7f51\u7ad9\uff0c\u90a3\u4e48\u60a8\u521a\u521a\u82b1\u8d39\u4e86\u60a8\u7684\u4e00\u4e2a\u521b\u65b0\u4ee4\u724c\u3002\u5982\u679c\u60a8\u9009\u62e9\u4f7f\u7528MongoDB\uff0c\u90a3\u4e48\u60a8\u53ea\u82b1\u4e86\u4e00\u4e2a\u521b\u65b0\u4ee4\u724c\u3002\u5982\u679c\u60a8\u9009\u62e9\u4f7f\u7528\u5df2\u5b58\u5728\u4e00\u5e74\u6216\u4e0d\u5230\u4e00\u5e74\u7684\u670d\u52a1\u53d1\u73b0\u6280\u672f\uff0c\u60a8\u53ea\u9700\u82b1\u6389\u60a8\u7684\u4e00\u4e2a\u521b\u65b0\u4ee4\u724c\u3002\u5982\u679c\u60a8\u9009\u62e9\u7f16\u5199\u81ea\u5df1\u7684\u6570\u636e\u5e93\uff0c\u5929\u54ea\uff0c\u60a8\u5c31\u6709\u9ebb\u70e6\u4e86\u3002\n\u7a0b\u5e8f\u5458B\u89c9\u5f97\u4fdd\u7559\u73b0\u6709\u7684\u62bd\u8c61\u662f\u4e49\u4e0d\u5bb9\u8f9e\u7684\uff0c\u4f46\u662f\u56e0\u4e3a\u4e0d\u662f\u6bcf\u79cd\u60c5\u51b5\u90fd\u5b8c\u5168\u4e00\u6837\uff0c\u6240\u4ee5\u4ed6\u4eec\u4fee\u6539\u4ee3\u7801\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570&amp\uff1bmldr\u3002\n\u4f60\u51fa\u73b0\u5728\u5173\u4e8e\u8fd9\u91cc\u7684\u6545\u4e8b\u91cc\uff0c\u4f60\u7684\u751f\u6d3b\u53d1\u751f\u4e86\u620f\u5267\u6027\u7684\u8f6c\u6298\u3002\n\u4e9a\u5386\u514b\u65af\u7684\u80cc\u666f\u4e2d\u6ca1\u6709\u4efb\u4f55\u8ff9\u8c61\u8868\u660e\u8fd9\u79cd\u60c5\u51b5\u4f1a\u53d1\u751f\u3002\u4ed6\u6709\u6c83\u5c14\u7279\u00b7\u6000\u7279\u7684\u7b80\u5386\uff0c\u4f46\u6709\u6d77\u68ee\u5821\u7684\u624d\u80fd\u3002\u6211\u4eec\u90fd\u6ca1\u6599\u5230\u4f1a\u8fd9\u6837\u3002\u6211\u7684\u540d\u5b57\u662f\u6258\u9a6c\u65af\u00b7\u5e15\u5854\u5207\u514b\uff0c\u6211\u8d5e\u540c\u8fd9\u4e2a\u53ef\u6015\u7684\u53cc\u5173\u8bed\u3002\u4e9a\u5386\u514b\u65af\u662f\u90a3\u4e2a\u4e0d\u80af\u8bf4\u7684\u4eba\u3002\n\u51e0\u5e74\u524d\uff0cMatasano\u4e0d\u53ef\u80fd\u96c7\u4f63\u4e9a\u5386\u514b\u65af\uff0c\u56e0\u4e3a\u6211\u4eec\u4f9d\u8d56\u4e8e\u9762\u8bd5\u548c\u7b80\u5386\u6765\u62db\u8058\u3002\u7136\u540e\u6211\u4eec\u505a\u4e86\u4e00\u4e9b\u6539\u53d8\uff0c\u6210\u4e3a\u4e86\u4e00\u53f0\u53d1\u73b0\u5e76\u62db\u52df\u50cfAlex\u8fd9\u6837\u7684\u4eba\u7684\u673a\u5668\uff1a\u4fdd\u9669\u516c\u53f8\u7684.NET\u5f00\u53d1\u4eba\u5458\u4ece\u7b2c\u4e00\u4e2a\u5c0f\u65f6\u7684\u4ee3\u7801\u67e5\u770b\u4e2d\u62c9\u51fa\u4e86Rails\u6838\u5fc3CVE\u3002\u4e3a\u7535\u8bdd\u82af\u7247\u7ec4\u63d0\u4f9b\u786c\u4ef6\u53cd\u5411\u7ec4\u88c5\u56fa\u4ef6\u7684\u7cfb\u7edf\u7ba1\u7406\u5458\u3002\u987f\u609f\uff1a\u4eba\u624d\u662f\u5b58\u5728\u7684\uff0c\u4f46\u4f60\u5728\u7b80\u5386\u4e0a\u627e\u4e0d\u5230\u3002\n\u6211\u4eec\u8fd9\u4e2a\u9886\u57df\u9009\u62e9\u5de5\u7a0b\u5e08\u7684\u8fc7\u7a0b\u6bd4\u8bfb\u9e21\u5185\u810f\u8fd8\u7cdf\u7cd5\u3002\u5c31\u50cf\u9762\u8bd5\u4e00\u6837\uff0c\u201c\u5bb6\u79bd\u80a0\u62a5\u201d\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u544a\u8bc9\u4f60\u662f\u5426\u96c7\u4f63\u67d0\u4eba\u7684\u4fe1\u606f\u3002\u4f46\u4e0e\u5348\u9910\u9762\u8bd5\u76f8\u6bd4\uff0c\u8fd9\u662f\u4e00\u6b21\u66f4\u6109\u5feb\u7684\u5c31\u9910\u4f53\u9a8c\u3002\n\u79ef\u6781\u4e3b\u52a8\u5730\u63d0\u51fa\u4ea7\u54c1\u60f3\u6cd5/\u610f\u89c1\u00b7\u5bf9\u4e1a\u52a1\u3001\u7528\u6237\u884c\u4e3a\u548c\u8fd9\u65b9\u9762\u7684\u6570\u636e\u611f\u5174\u8da3\u00b7\u597d\u5947\u5fc3\u548c\u5bf9\u201c\u4e3a\u4ec0\u4e48\uff1f\u201d\u7684\u6d53\u539a\u5174\u8da3\u00b7\u5f3a\u5927\u7684\u6c9f\u901a\u8005\u548c\u4e0e\u975e\u5de5\u7a0b\u5e08\u7684\u826f\u597d\u5173\u7cfb\u00b7\u9884\u5148\u63d0\u4f9b\u4ea7\u54c1/\u5de5\u7a0b\u6298\u8877\u00b7\u52a1\u5b9e\u5730\u5904\u7406\u8fb9\u7f18\u6848\u4f8b\u00b7\u5feb\u901f\u4ea7\u54c1\u9a8c\u8bc1\u5468\u671f\u00b7\u7aef\u5230\u7aef\u4ea7\u54c1\u529f\u80fd\u6240\u6709\u6743\u00b7\u901a\u8fc7\u53cd\u590d\u5b66\u4e60\u5177\u6709\u5f3a\u5927\u7684\u4ea7\u54c1\u672c\u80fd\n\u5982\u679c\u6211\u4eec\u5c06\u201c\u4ee3\u7801\u884c\u201d\u89c6\u4e3a\u201c\u82b1\u8d39\u7684\u884c\u201d\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u5220\u9664\u4ee3\u7801\u884c\u65f6\uff0c\u6211\u4eec\u5c31\u964d\u4f4e\u4e86\u7ef4\u62a4\u6210\u672c\u3002\u6211\u4eec\u5e94\u8be5\u5c1d\u8bd5\u6784\u5efa\u4e00\u6b21\u6027\u8f6f\u4ef6\uff0c\u800c\u4e0d\u662f\u6784\u5efa\u53ef\u91cd\u7528\u7684\u8f6f\u4ef6\u3002\n\u4e1a\u52a1\u903b\u8f91\u662f\u4ee5\u4e00\u7cfb\u5217\u65e0\u4f11\u6b62\u7684\u8fb9\u7f18\u6848\u4f8b\u548c\u5feb\u901f\u800c\u80ae\u810f\u7684\u9ed1\u5ba2\u884c\u4e3a\u4e3a\u7279\u5f81\u7684\u4ee3\u7801\u3002\u8fd9\u6837\u633a\u597d\u7684\u3002\u6211\u5bf9\u6b64\u6ca1\u610f\u89c1\u3002\u5176\u4ed6\u98ce\u683c\uff0c\u5982\u201c\u6e38\u620f\u4ee3\u7801\u201d\u6216\u201c\u521b\u5efa\u8005\u4ee3\u7801\u201d\u4e5f\u662f\u4e00\u6837\u7684\uff1a\u5077\u5de5\u51cf\u6599\uff0c\u8282\u7701\u5927\u91cf\u65f6\u95f4\u3002\n\u539f\u56e0\u5462\uff1f\u6709\u65f6\u5019\uff0c\u5220\u9664\u4e00\u4e2a\u5927\u9519\u8bef\u6bd4\u5c1d\u8bd5\u5220\u966418\u4e2a\u4ea4\u9519\u7684\u5c0f\u9519\u8bef\u8981\u5bb9\u6613\u5f97\u591a\u3002\u5f88\u591a\u7f16\u7a0b\u90fd\u662f\u63a2\u7d22\u6027\u7684\uff0c\u72af\u9519\u51e0\u6b21\u7136\u540e\u8fed\u4ee3\u8981\u6bd4\u8ba4\u4e3a\u7b2c\u4e00\u6b21\u6b63\u786e\u8981\u5feb\u5f97\u591a\u3002\n\u56de\u5230TCP\u3002\u4e4b\u524d\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u6492\u4e86\u4e2a\u5c0f\u8c0e\uff0c\u4f60\u4eec\u4e2d\u7684\u4e00\u4e9b\u4eba\u73b0\u5728\u8033\u6735\u91cc\u5192\u51fa\u4e86\u84b8\u6c7d\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8c0e\u8a00\u5feb\u628a\u4f60\u4eec\u903c\u75af\u4e86\u3002\u6211\u8bf4TCP\u4fdd\u8bc1\u60a8\u7684\u6d88\u606f\u4f1a\u5230\u8fbe\u3002\u5b9e\u9645\u4e0a\uff0c\u4e0d\u662f\u8fd9\u6837\u7684\u3002\u5982\u679c\u60a8\u7684\u5ba0\u7269\u86c7\u54ac\u7834\u4e86\u901a\u5f80\u60a8\u8ba1\u7b97\u673a\u7684\u7f51\u7ebf\uff0c\u5e76\u4e14\u6ca1\u6709IP\u6570\u636e\u5305\u53ef\u4ee5\u901a\u8fc7\uff0c\u90a3\u4e48TCP\u5bf9\u6b64\u65e0\u80fd\u4e3a\u529b\uff0c\u60a8\u7684\u6d88\u606f\u4e5f\u4e0d\u4f1a\u5230\u8fbe\u3002\u5982\u679c\u4f60\u5bf9\u516c\u53f8\u7684\u7cfb\u7edf\u7ba1\u7406\u5458\u5f88\u7c97\u9c81\uff0c\u4ed6\u4eec\u60e9\u7f5a\u4f60\uff0c\u628a\u4f60\u63d2\u5230\u4e00\u4e2a\u8d85\u8f7d\u7684\u96c6\u7ebf\u5668\u4e0a\uff0c\u53ea\u6709\u4e00\u4e9bIP\u6570\u636e\u5305\u53ef\u4ee5\u901a\u8fc7\uff0cTCP\u53ef\u4ee5\u5de5\u4f5c\uff0c\u4f46\u4e00\u5207\u90fd\u4f1a\u5f88\u6162\u3002\n\u8fd9\u5c31\u662f\u6211\u6240\u8bf4\u7684\u6f0f\u6d1e\u767e\u51fa\u7684\u62bd\u8c61\u3002TCP\u8bd5\u56fe\u63d0\u4f9b\u5e95\u5c42\u4e0d\u53ef\u9760\u7f51\u7edc\u7684\u5b8c\u6574\u62bd\u8c61\uff0c\u4f46\u6709\u65f6\uff0c\u7f51\u7edc\u4f1a\u901a\u8fc7\u62bd\u8c61\u6cc4\u6f0f\uff0c\u60a8\u4f1a\u611f\u89c9\u5230\u62bd\u8c61\u4e0d\u80fd\u5b8c\u5168\u4fdd\u62a4\u60a8\u514d\u53d7\u7684\u5f71\u54cd\u3002\u8fd9\u53ea\u662f\u6211\u79f0\u4e4b\u4e3a\u201c\u6cc4\u5bc6\u62bd\u8c61\u6cd5\u5219\u201d\u7684\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\u62bd\u8c61\u5931\u8d25\u3002\u6709\u65f6\u5f88\u5c11\uff0c\u6709\u65f6\u5f88\u591a\u3002\u6709\u6f0f\u6c34\u3002\u4e8b\u60c5\u53d8\u5f97\u4e0d\u5bf9\u52b2\u4e86\u3002\u5f53\u4f60\u6709\u62bd\u8c61\u6982\u5ff5\u65f6\uff0c\u8fd9\u79cd\u60c5\u51b5\u968f\u5904\u53ef\u89c1\u3002\u8fd9\u91cc\u6709\u4e00\u4e9b\u4f8b\u5b50\u3002\n\u7528\u6237\u66f4\u559c\u6b22\u901f\u5ea6\u66f4\u5feb\u7684\u8f6f\u4ef6\uff0c\u8fd9\u53ef\u80fd\u662f\u76f8\u5f53\u76f4\u89c2\u7684\uff0c\u5982\u679c\u5de5\u5177\u901f\u5ea6\u66f4\u5feb\u800c\u4e0d\u662f\u901f\u5ea6\u66f4\u6162\uff0c\u90a3\u4e48\u6267\u884c\u7ed9\u5b9a\u4efb\u52a1\u4f1a\u6709\u66f4\u597d\u7684\u4f53\u9a8c\u3002\n\u6216\u8bb8\u4e0d\u592a\u660e\u663e\u7684\u662f\uff0c\u62e5\u6709\u66f4\u5feb\u7684\u5de5\u5177\u4f1a\u6539\u53d8\u7528\u6237\u4f7f\u7528\u5de5\u5177\u6216\u6267\u884c\u4efb\u52a1\u7684\u65b9\u5f0f\u3002\u7528\u6237\u51e0\u4e4e\u603b\u662f\u6709\u591a\u79cd\u7b56\u7565\u53ef\u7528\u6765\u8ffd\u6c42\u4e00\u4e2a\u76ee\u6807--\u5305\u62ec\u51b3\u5b9a\u5b8c\u5168\u81f4\u529b\u4e8e\u5176\u4ed6\u4e8b\u60c5--\u800c\u4e14\u4ed6\u4eec\u4f1a\u8d8a\u6765\u8d8a\u9891\u7e41\u5730\u9009\u62e9\u4f7f\u7528\u66f4\u5feb\u7684\u5de5\u5177\u3002\u5feb\u901f\u5de5\u5177\u4e0d\u4ec5\u5141\u8bb8\u7528\u6237\u66f4\u5feb\u5730\u5b8c\u6210\u4efb\u52a1\uff0c\u8fd8\u5141\u8bb8\u7528\u6237\u4ee5\u5168\u65b0\u7684\u65b9\u5f0f\u5b8c\u6210\u5168\u65b0\u7c7b\u578b\u7684\u4efb\u52a1\u3002\u5728\u5236\u4f5c\u51b0\u7cd5\u548cLivegrep\u65f6\uff0c\u6211\u6e05\u695a\u5730\u770b\u5230\u4e86\u8fd9\u79cd\u73b0\u8c61\uff1a\n\u6211\u60f3\u8ba9\u60a8\u76f8\u4fe1\uff0cACID\u6570\u636e\u5e93\u662f\u73b0\u6709\u7684\u786e\u4fdd\u5927\u578b\u751f\u4ea7\u7cfb\u7edf\u4e2d\u53ef\u7ef4\u62a4\u6027\u548c\u6570\u636e\u6b63\u786e\u6027\u7684\u6700\u91cd\u8981\u5de5\u5177\u4e4b\u4e00\u3002\u8ba9\u6211\u4eec\u4ece\u6df1\u5165\u7814\u7a76\u5b83\u4eec\u7684\u6bcf\u4e00\u4e2a\u540c\u540d\u62c5\u4fdd\u5f00\u59cb\u3002\nHTTP\u8bf7\u6c42\u548c\u6570\u636e\u5e93\u4e8b\u52a1\u4e4b\u95f4\u5b58\u5728\u60ca\u4eba\u7684\u5bf9\u79f0\u6027\u3002\u5c31\u50cf\u4e8b\u52a1\u4e00\u6837\uff0cHTTP\u8bf7\u6c42\u662f\u4e00\u4e2a\u4e8b\u52a1\u5de5\u4f5c\u5355\u5143-\u5b83\u6709\u660e\u786e\u7684\u5f00\u59cb\u3001\u7ed3\u675f\u548c\u7ed3\u679c\u3002\u5ba2\u6237\u7aef\u901a\u5e38\u671f\u671b\u8bf7\u6c42\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u4f1a\u8868\u73b0\u5f97\u50cf\u662f\u8fd9\u6837(\u5f53\u7136\uff0c\u8fd9\u4f1a\u6839\u636e\u5b9e\u73b0\u7684\u4e0d\u540c\u800c\u6709\u6240\u4e0d\u540c)\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u67e5\u770b\u4e00\u4e2a\u793a\u4f8b\u670d\u52a1\uff0c\u4ee5\u4e86\u89e3HTTP\u8bf7\u6c42\u548c\u4e8b\u52a1\u5982\u4f55\u5f88\u597d\u5730\u76f8\u4e92\u5e94\u7528\u3002\n\u5728API\u4e2d\uff0c\u5e42\u7b49\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u6982\u5ff5\u3002\u5e42\u7b49\u7aef\u70b9\u662f\u6307\u53ef\u4ee5\u8c03\u7528\u4efb\u610f\u6b21\uff0c\u540c\u65f6\u4fdd\u8bc1\u526f\u4f5c\u7528\u53ea\u53d1\u751f\u4e00\u6b21\u7684\u7aef\u70b9\u3002\u5728\u4e00\u4e2a\u6df7\u4e71\u7684\u4e16\u754c\u4e2d\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u53ef\u80fd\u5076\u5c14\u4f1a\u5d29\u6e83\u6216\u5728\u8bf7\u6c42\u8fc7\u7a0b\u4e2d\u8fde\u63a5\u4e2d\u65ad\uff0c\u8fd9\u5bf9\u63d0\u9ad8\u7cfb\u7edf\u7684\u6545\u969c\u5065\u58ee\u6027\u6709\u5f88\u5927\u5e2e\u52a9\u3002\u4e0d\u786e\u5b9a\u8bf7\u6c42\u662f\u6210\u529f\u8fd8\u662f\u5931\u8d25\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u7b80\u5355\u5730\u7ee7\u7eed\u91cd\u8bd5\uff0c\u76f4\u5230\u5f97\u5230\u786e\u5b9a\u7684\u54cd\u5e94\u3002\n\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u7ecf\u5e38\u51fa\u73b0\u6545\u969c\u00b7\u5728\u6574\u4e2a\u7cfb\u7edf\u4e2d\u5b9e\u65bd\u53cd\u538b\u529b\u00b7\u60f3\u65b9\u8bbe\u6cd5\u90e8\u5206\u53ef\u7528\u00b7\u4f7f\u7528\u767e\u5206\u4f4d\u6570\uff0c\u800c\u4e0d\u662f\u5e73\u5747\u503c\u00b7\u5b66\u4e60\u8bc4\u4f30\u60a8\u7684\u5bb9\u91cf\u00b7\u529f\u80fd\u6807\u5fd7\u662f\u57fa\u7840\u67b6\u6784\u7684\u94fa\u8bbe\u65b9\u5f0f\u00b7\u660e\u667a\u5730\u9009\u62e9id\u7a7a\u95f4\u00b7\u5c06\u7f13\u5b58\u6570\u636e\u5199\u56de\u6c38\u4e45\u5b58\u50a8\u4e0d\u597d\u00b7\u63d0\u53d6\u670d\u52a1\u3002\n\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u6709\u52a9\u4e8e\u6307\u5bfc\u5206\u5e03\u5f0f\u8ba1\u7b97\u673a\u7cfb\u7edf\u5404\u6a21\u5757\u95f4\u529f\u80fd\u5e03\u5c40\u7684\u8bbe\u8ba1\u539f\u5219\u3002\u8fd9\u4e00\u539f\u5219\u88ab\u79f0\u4e3a\u7aef\u5230\u7aef\u8bba\u8bc1\uff0c\u5b83\u8868\u660e\uff0c\u4e0e\u5728\u8f83\u4f4e\u7ea7\u522b\u63d0\u4f9b\u529f\u80fd\u7684\u6210\u672c\u76f8\u6bd4\uff0c\u653e\u7f6e\u5728\u7cfb\u7edf\u8f83\u4f4e\u7ea7\u522b\u7684\u529f\u80fd\u53ef\u80fd\u662f\u591a\u4f59\u7684\uff0c\u6216\u8005\u6ca1\u6709\u4ec0\u4e48\u4ef7\u503c\u3002\u672c\u6587\u8ba8\u8bba\u7684\u793a\u4f8b\u5305\u62ec\u6bd4\u7279\u9519\u8bef\u6062\u590d\u3001\u4f7f\u7528\u52a0\u5bc6\u7684\u5b89\u5168\u6027\u3001\u91cd\u590d\u6d88\u606f\u6291\u5236\u3001\u4ece\u7cfb\u7edf\u5d29\u6e83\u4e2d\u6062\u590d\u4ee5\u53ca\u4f20\u9012\u786e\u8ba4\u3002\u652f\u6301\u8fd9\u4e9b\u529f\u80fd\u7684\u4f4e\u7ea7\u673a\u5236\u53ea\u80fd\u4f5c\u4e3a\u6027\u80fd\u589e\u5f3a\u6765\u8bc1\u660e\u662f\u5408\u7406\u7684\u3002\n\u591a\u5e74\u6765\uff0c\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5236\u4f5c\u521b\u610f\u5de5\u5177\uff0c\u4f7f\u7528\u521b\u610f\u5de5\u5177\uff0c\u60f3\u4e86\u5f88\u591a\uff0c\u73b0\u5728\u6211\u5f00\u59cb\u76f8\u4fe1\uff1a\u521b\u4f5c\u8005\u9700\u8981\u4e0e\u4ed6\u4eec\u6b63\u5728\u521b\u4f5c\u7684\u4e1c\u897f\u6709\u76f4\u63a5\u7684\u8054\u7cfb\u3002\n\u6211\u4e0d\u80fd\u771f\u6b63\u6458\u5f55\u4efb\u4f55\u5b9e\u9645\u7684\u6f14\u793a\uff0c\u8fd9\u662f\u6700\u597d\u7684\u90e8\u5206\u3002\u76f8\u53cd\uff0c\u6211\u53ea\u60f3\u8ba4\u53ef\u5b83\uff1a\u8fd9\u4e2a\u6f14\u8bb2\u620f\u5267\u6027\u5730\u3001\u5bcc\u6709\u6210\u6548\u5730\u63d0\u9ad8\u4e86\u6211\u5bf9\u7f16\u7a0b\u5de5\u5177(\u4ee5\u53ca\u4e00\u822c\u5de5\u5177)\u7684\u8ba4\u8bc6\u3002\u770b\u7740\u5b83\uff0c\u8ba9\u4f60\u60ca\u53f9\u4e0d\u5df2\u3002\n\u5176\u4e2d\u76f8\u5f53\u591a\u5728\u6211\u7684\u6e05\u5355\u4e0a\uff0c\u4e0b\u9762\u662f\u6211\u7ecf\u5e38\u91cd\u590d\u7684\u5176\u4ed6\u4e00\u4e9b\uff1a", "note_en": "Every so often I read an essay that I end up thinking about, and citing in conversation, over and over again.\n Here\u2019s my index of all the ones of those I can remember! I\u2019ll try to keep it up to date as I think of more.\n (Some of them are extremely well-known. I\u2019m leaving them here anyway just in case you\u2019re one of  the lucky 10,000.)\n I\u2019m curious what essays are in this category for other folks\u2014post yours in the comments!\n   I approach software with a deep-seated belief that computers and software systems can be understood. &amp;mldr\n In some ways, this belief feels radical today. Modern software and hardware systems contain almost unimaginable complexity amongst many distinct layers, each building atop each other. &amp;mldr\n In the face of this complexity, it\u2019s easy to assume that there\u2019s just too much to learn, and to adopt the mental shorthand that the systems we work with are best treated as black boxes, not to be understood in any detail.\n I argue against that approach. You will never understand every detail of the implementation of every level on that stack; but you can understand all of them to some level of abstraction, and any specific layer to essentially any depth necessary for any purpose.\n   Let\u2019s say every company gets about three innovation tokens. You can spend these however you want, but the supply is fixed for a long while. You might get a few more after you achieve a certain level of stability and maturity, but the general tendency is to overestimate the contents of your wallet. Clearly this model is approximate, but I think it helps.\n If you choose to write your website in NodeJS, you just spent one of your innovation tokens. If you choose to use MongoDB, you just spent one of your innovation tokens. If you choose to use service discovery tech that\u2019s existed for a year or less, you just spent one of your innovation tokens. If you choose to write your own database, oh god, you\u2019re in trouble.\n   Programmer B feels honor-bound to retain the existing abstraction, but since isn\u2019t exactly the same for every case, they alter the code to take a parameter&amp;mldr.\n  You appear in the story about here, and your life takes a dramatic turn for the worse.\n      Nothing in Alex\u2019s background offered a hint that this would happen. He had Walter White\u2019s resume, but Heisenberg\u2019s aptitude. None of us saw it coming. My name is Thomas Ptacek and I endorse this terrible pun. Alex was the one who nonced.\n A few years ago, Matasano couldn\u2019t have hired Alex, because we relied on interviews and resumes to hire. Then we made some changes, and became a machine that spotted and recruited people like Alex: line of business .NET developers at insurance companies who pulled Rails core CVEs out of their first hour looking at the code. Sysadmins who hardware-reversed assembly firmware for phone chipsets. Epiphany: the talent is out there, but you can\u2019t find it on a resume.\n Our field selects engineers using a process that is worse than reading chicken entrails. Like interviews, poultry intestine has little to tell you about whether to hire someone. But they\u2019re a more pleasant eating experience than a lunch interview.\n   Proactive with product ideas/opinions \u2022 Interest in the business, user behavior and data on this \u2022 Curiosity and a keen interest in \u201cwhy?\u201d \u2022 Strong communicators and great relationships with non-engineers \u2022 Offering product/engineering tradeoffs upfront \u2022 Pragmatic handling of edge cases \u2022 Quick product validation cycles \u2022 End-to-end product feature ownership \u2022 Strong product instincts through repeated cycles of learning\n   If we see \u2018lines of code\u2019 as \u2018lines spent\u2019, then when we delete lines of code, we are lowering the cost of maintenance. Instead of building re-usable software, we should try to build disposable software.\n Business logic is code characterised by a never ending series of edge cases and quick and dirty hacks. This is fine. I am ok with this. Other styles like \u2018game code\u2019, or \u2018founder code\u2019 are the same thing: cutting corners to save a considerable amount of time.\n The reason? Sometimes it\u2019s easier to delete one big mistake than try to delete 18 smaller interleaved mistakes. A lot of programming is exploratory, and it\u2019s quicker to get it wrong a few times and iterate than think to get it right first time.\n   Back to TCP. Earlier for the sake of simplicity I told a little fib, and some of you have steam coming out of your ears by now because this fib is driving you crazy. I said that TCP guarantees that your message will arrive. It doesn\u2019t, actually. If your pet snake has chewed through the network cable leading to your computer, and no IP packets can get through, then TCP can\u2019t do anything about it and your message doesn\u2019t arrive. If you were curt with the system administrators in your company and they punished you by plugging you into an overloaded hub, only some of your IP packets will get through, and TCP will work, but everything will be really slow.\n This is what I call a leaky abstraction. TCP attempts to provide a complete abstraction of an underlying unreliable network, but sometimes, the network leaks through the abstraction and you feel the things that the abstraction can\u2019t quite protect you from. This is but one example of what I\u2019ve dubbed the Law of Leaky Abstractions:\n  Abstractions fail. Sometimes a little, sometimes a lot. There\u2019s leakage. Things go wrong. It happens all over the place when you have abstractions. Here are some examples.\n   It\u2019s probably fairly intuitive that users prefer faster software, and will have a better experience performing a given task if the tools are faster rather than slower.\n What is perhaps less apparent is that having faster tools changes how users use a tool or perform a task. Users almost always have multiple strategies available to pursue a goal \u2014 including deciding to work on something else entirely \u2014 and they will choose to use faster tools more and more frequently. Fast tools don\u2019t just allow users to accomplish tasks faster; they allow users to accomplish entirely new types of tasks, in entirely new ways. I\u2019ve seen this phenomenon clearly while working on both Sorbet and Livegrep:\n   I want to convince you that ACID databases are one of the most important tools in existence for ensuring maintainability and data correctness in big production systems. Lets start by digging into each of their namesake guarantees.\n There\u2019s a surprising symmetry between an HTTP request and a database\u2019s transaction. Just like the transaction, an HTTP request is a transactional unit of work \u2013 it\u2019s got a clear beginning, end, and result. The client generally expects a request to execute atomically and will behave as if it will (although that of course varies based on implementation). Here we\u2019ll look at an example service to see how HTTP requests and transactions apply nicely to one another.\n In APIs  idempotency is a powerful concept. An idempotent endpoint is one that can be called any number of times while guaranteeing that the side effects will occur only once. In a messy world where clients and servers that may occasionally crash or have their connections drop partway through a request, it\u2019s a huge help in making systems more robust to failure. Clients that are uncertain whether a request succeeded or failed can simply keep retrying it until they get a definitive response.\n   Distributed systems are different because they fail often \u2022 Implement backpressure throughout your system \u2022 Find ways to be partially available \u2022 Use percentiles, not averages \u2022 Learn to estimate your capacity \u2022 Feature flags are how infrastructure is rolled out \u2022 Choose id spaces wisely \u2022 Writing cached data back to persistent storage is bad \u2022 Extract services.\n   This paper presents a design principle that helps guide placement of functions among the modules of a distributed computer system. The principle, called the end-to-end argument, suggests that functions placed at low levels of a system may be redundant or of little value when compared with the cost of providing them at that low level. Examples discussed in the paper include bit error recovery, security using encryption, duplicate message suppression, recovery from system crashes, and delivery acknowledgement. Low level mechanisms to support these functions are justified only as performance enhancements.\n   I\u2019ve spent a lot of time over the years making creative tools, using creative tools, thinking about them a lot, and here\u2019s something I\u2019ve come to believe: Creators need an immediate connection to what they\u2019re creating.\n I can\u2019t really excerpt any of the actual demos, which are the good part. Instead I\u2019ll just endorse it: this talk dramatically, and productively, raised my bar for what I think programming tools (and tools in general) can be. Watch it and be amazed.\n   Quite a few of these are on my list, here\u2019s some others that I keep returning to every so often:", "posttime": "2020-07-21 11:02:21", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,\u6587\u7ae0,\u4ee3\u7801", "title": "\u5173\u4e8e\u7f16\u7a0b\u7684\u6587\u7ae0\u6211\u60f3\u4e86\u5f88\u591a", "title_en": "Essays on programming I think about a lot", "transed": 1, "url": "https://www.benkuhn.net/progessays/", "via": "", "real_tags": ["\u7f16\u7a0b", "\u6587\u7ae0", "\u4ee3\u7801"]}]