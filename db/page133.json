[{"category": "", "categoryclass": "", "imagename": "4a0b2e5b054d00671a5405186042d55c.jpg", "infoid": 1072061, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\u590f\u5929\uff0cTU Delft \u7684 Flying V \u55b7\u6c14\u5ba2\u673a\u7684\u6bd4\u4f8b\u6a21\u578b\u5f00\u59cb\u98de\u884c\u3002\u65b0\u98de\u673a\u7684\u673a\u7ffc\u8f7d\u5ba2\uff0c\u636e\u62a5\u9053\u5176\u71c3\u6cb9\u6548\u7387\u63d0\u9ad8\u4e86 20%\u3002\u9879\u76ee\u8d1f\u8d23\u4eba Roelof Vos \u535a\u58eb\u548c\u4ed6\u7684\u56e2\u961f\u5c06 22.5 \u516c\u65a4\u30013 \u7c73\u5bbd\u7684\u6a21\u578b\u5e26\u5230\u4e86\u5fb7\u56fd\u7684\u4e00\u4e2a\u7a7a\u519b\u57fa\u5730\u3002\u5728\u90a3\u91cc\uff0c\u4ed6\u4eec\u4e0e\u7a7a\u4e2d\u5ba2\u8f66\u516c\u53f8\u7684\u4e00\u4e2a\u56e2\u961f\u5408\u4f5c\uff0c\u8ba9\u98de\u673a\u8d77\u98de\uff0c\u8fdb\u884c\u4e86\u591a\u6b21\u8bd5\u98de\uff0c\u76f4\u5230\u7535\u6c60\u51e0\u4e4e\u8017\u5c3d\u5e76\u7740\u9646\u3002 \u201c\u6211\u4eec\u62c5\u5fc3\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u7531\u4e8e\u5148\u524d\u7684\u8ba1\u7b97\u8868\u660e\u2018\u65cb\u8f6c\u2019\u53ef\u80fd\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u98de\u673a\u8d77\u98de\u53ef\u80fd\u4f1a\u6709\u4e9b\u56f0\u96be\u3002\u8be5\u56e2\u961f\u4f18\u5316\u4e86\u7f29\u653e\u98de\u884c\u6a21\u578b\u4ee5\u9632\u6b62\u51fa\u73b0\u6b64\u95ee\u9898\uff0c\u4f46\u5e03\u4e01\u7684\u8bc1\u636e\u5728\u4e8e\u8fdb\u98df\u3002\u4f60\u9700\u8981\u98de\u884c\u624d\u80fd\u786e\u5b9a\uff0c\u201d\u6c83\u65af\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4\u3002\u8fd9\u6b21\u8bd5\u9a8c\u88ab\u8ba4\u4e3a\u662f\u6210\u529f\u7684\uff0c\u56e0\u4e3a\u8d77\u98de\u65f6\u7684\u65cb\u8f6c\u5f88\u5bb9\u6613\u4ee5 50 \u82f1\u91cc/\u5c0f\u65f6\uff0880 \u516c\u91cc/\u5c0f\u65f6\uff09\u7684\u901f\u5ea6\u8fdb\u884c\u3002\u7136\u800c\uff0c\u56e0\u4e3a\u5b83\u662f\u53ea\u662f\u4e00\u4e2a\u5b9e\u9a8c\u6a21\u578b\uff0c\u771f\u6b63\u7684\u55b7\u6c14\u5ba2\u673a\u5728\u5b9e\u9645\u98de\u884c\u4e2d\u7684\u8868\u73b0\u4ecd\u7136\u4e0d\u786e\u5b9a\u3002\u4ece\u8fd9\u4e2a\u6bd4\u4f8b\u6a21\u578b\u8bd5\u9a8c\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u5df2\u7ecf\u5f97\u51fa\u7ed3\u8bba\uff0c\u4ed6\u4eec\u5fc5\u987b\u6539\u53d8\u98de\u673a\u7684\u91cd\u5fc3\u5e76\u56fa\u5b9a\u5929\u7ebf\u4ee5\u6539\u5584\u9065\u6d4b\u3002\u8be5\u56e2\u961f\u7684\u4e0b\u4e00\u6b65\u662f\u4f7f\u7528\u98de\u884c\u671f\u95f4\u83b7\u5f97\u7684\u6570\u636e\u6765\u6784\u5efa\u98de\u673a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u8f6f\u4ef6\u6a21\u578b\u3002\u8fd9\u610f\u5473\u7740\u4ed6\u4eec\u53ef\u4ee5\u5728\u98de\u884c\u6a21\u62df\u5668\u4e2d\u6d4b\u8bd5\u55b7\u6c14\u5f0f\u5ba2\u673a\u5e76\u5c06\u7ed3\u679c\u7528\u4e8e\u7814\u53d1\u3002Flying-V \u5177\u6709\u6253\u9020\u9ad8\u80fd\u6548\u957f\u9014\u98de\u673a\uff0c\u5ba2\u8231\u3001\u8d27\u8231\u3001\u6cb9\u7bb1\u5747\u7f6e\u4e8e\u673a\u7ffc\u5185\uff0c\u5f15\u5165\u4e86\u98de\u673a\u547d\u540d\u7684V\u5b57\u578b\u3002\n\u4ee3\u5c14\u592b\u7279\u7406\u5de5\u5927\u5b66\u7814\u7a76\u4eba\u5458\u7684\u8ba1\u7b97\u673a\u8ba1\u7b97\u4f30\u8ba1\uff0c\u4e0e\u5f53\u4eca\u6700\u5148\u8fdb\u7684\u98de\u673a\u76f8\u6bd4\uff0c\u8be5\u98de\u673a\u4f18\u8d8a\u7684\u7a7a\u6c14\u52a8\u529b\u5b66\u5916\u5f62\u548c\u51cf\u8f7b\u7684\u91cd\u91cf\u53ef\u4ee5\u5c06\u6cb9\u8017\u964d\u4f4e 20%\u3002", "note_en": "This summer, a scale model of TU Delft&#39;s Flying V jetliner took flight. The new aircraft carries passengers in its wings and reports being 20% more fuel-efficient.\n  Project leader Dr. Roelof Vos and his team took the  22.5 kg and  3-meter\u00a0wide-scale model to an airbase in Germany. There they worked together with a team from Airbus to get the  aircraft to take-off, fly a number of test maneuvers until the batteries were nearly empty and landed.\n \u201cOne of our worries was that the aircraft might have some difficulty lifting-off since previous calculations had shown that \u2018rotation\u2019 could be an issue. The team optimized the scaled flight model to prevent the issue, but the proof of the pudding is in the eating. You need to fly to know for sure,&#34; said in a  statement Vos.\n  The trial was deemed a successful one as rotation on take-off was performed easily at the speed of  50 mph (80 km/h). However, as it was just an experimental model, how the real jetliner would perform in an actual flight is still uncertain.\n From this scale model trial, the researchers already concluded that they had to\u00a0change the center of gravity of the aircraft and fix the antenna to improve telemetry.\n The next steps for the team are to\u00a0use the data acquired during the flight to build an aerodynamic software model of the aircraft. This will mean they can test the jetliner in a flight simulator and use the outcomes for research and development.\n The Flying-V has been created to be a highly energy-efficient long-distance  airplane. The passenger cabin, the cargo hold, and the fuel tanks have all been placed in the wings, introducing the V-shape that the plane is named after.\n  TU Delft researchers&#39; computer calculations estimate that the aircraft\u2019s superior aerodynamic shape and decreased weight can  reduce fuel consumption by 20% compared to today\u2019s  most advanced aircraft.", "posttime": "2021-08-08 11:50:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u55b7\u6c14,ride,\u98de\u673a", "title": "V\u578b\u673a\u7ffc\u5f0f\u55b7\u6c14\u5ba2\u673a\u6210\u529f\u8d77\u98de\u2014\u2014IE", "title_en": "V-Shaped Ride-in-the-Wings Jetliner Successfully Took Off \u00e2\u20ac\u201c IE", "transed": 1, "url": "https://interestingengineering.com/the-energy-efficient-v-shaped-ride-in-the-wings-jetliner-successfully-took-off", "via": "", "real_tags": ["\u55b7\u6c14", "ride", "\u98de\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072060, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u6211\u6b63\u5728\u5bf9\u51e0\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u5e93\u8fdb\u884c\u6d88\u606f\u4f20\u9012\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8bc4\u4f30\u3002\u5728\u5bf9 Apache Cassandra \u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u6027\u80fd\u6307\u6807\u4e2d\u7684\u5f02\u5e38\u6a21\u5f0f\u3002\u6211\u9075\u5faa\u4e86\u8fd9\u4e9b\u7ebf\u7d22\uff0c\u6700\u7ec8\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e3b\u8981\u7684\u7ebf\u7a0b\u6c60\u8bbe\u8ba1\u95ee\u9898\uff0c\u5e76\u5728 Windows \u4e0a\u5b9e\u73b0\u4e86\u6f5c\u5728\u7684 18 \u500d\u6027\u80fd\u63d0\u5347\u3002\u6211\u4e00\u76f4\u5728\u7814\u7a76\u4e00\u7cfb\u5217\u4e0d\u540c\u7684\u6570\u636e\u5e93\u4f5c\u4e3a\u91cd\u65b0\u8bbe\u8ba1\u6d88\u606f\u4ea7\u54c1\u7684\u6f5c\u5728\u540e\u7aef\u3002\u867d\u7136\u6211\u5df2\u7ecf\u60f3\u5230\u4e86\u4e00\u4e9b\u5019\u9009\u4eba\uff0c\u4f46\u6211\u5e0c\u671b\u80fd\u591f\u5c55\u793a\u5bf9\u6570\u636e\u5e93\u9009\u9879\u7684\u5f3a\u5927\u63a2\u7d22\u3002\u867d\u7136 PostgreSQL \u662f SQL \u6570\u636e\u5e93\u4e2d\u7684\u6709\u529b\u7ade\u4e89\u8005\uff0c\u5e76\u4e14\u5728\u65e9\u671f\u5b9e\u9a8c\u4e2d\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u7ed3\u679c\uff0c\u4f46\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u7406\u60f3\u7684 NoSQL \u5019\u9009\u8005\u3002 Apache Cassandra \u6bd4\u6700\u65b0\u7684 NewSQL \u548c\u952e\u503c\u6570\u636e\u5e93\u8981\u8001\u4e00\u4e9b\uff0c\u4f46\u5b83\u5728\u5f88\u591a\u65b9\u9762\u4f3c\u4e4e\u5728\u67b6\u6784\u4e0a\u90fd\u5f88\u7406\u60f3\uff1a\u6211\u7684\u76ee\u6807\u662f\u5c06\u6570\u636e\u5e93\u51e0\u4e4e\u5b8c\u5168\u7528\u4f5c\u201c\u53ea\u5199\u6570\u636e\u5b58\u50a8\u201d\u3002\u6d88\u606f\u4f20\u9012\u6709\u4e24\u4e2a\u4e3b\u8981\u8981\u6c42\uff1a\u6301\u4e45\u8bb0\u5f55\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff08\u63a5\u6536\u548c\u53d1\u9001\u7684\u6d88\u606f\uff09\u4ee5\u5141\u8bb8\u5d29\u6e83\u6062\u590d\uff0c\u4ee5\u53ca\u8bb0\u5f55\u66f4\u957f\u671f\u7684\u53ef\u641c\u7d22\u65e5\u5fd7\u3002 Cassandra \u5df2\u7ecf\u88ab\u6211\u4eec\u7684\u5de5\u7a0b\u5e08\u786e\u5b9a\u4e3a\u9996\u9009\u6570\u636e\u5e93\uff0c\u7406\u8bba\u4e0a\u5e94\u8be5\u975e\u5e38\u7b26\u5408\u8fd9\u4e9b\u8981\u6c42\u3002\u51ed\u501f\u9ad8\u5ea6\u53ef\u6269\u5c55\u7684\u5206\u533a\u5199\u5165\u6027\u80fd\u53ca\u5176 LSMT \u6570\u636e\u7ed3\u6784\u80fd\u591f\u81ea\u52a8\u4ece\u8868\u4e2d\u538b\u7f29\u5df2\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5b83\u4f3c\u4e4e\u662f\u4e00\u4e2a\u660e\u786e\u7684\u9886\u5bfc\u8005\u3002\u6211\u5728\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u4e2d\u8bc4\u4f30\u7684\u4e3b\u8981\u5de5\u4f5c\u8d1f\u8f7d\u6d89\u53ca\u63a5\u6536\u6d88\u606f\u3001\u6355\u83b7\u5c5e\u6027\u3001\u8f6c\u6362\u6d88\u606f\u5e76\u53d1\u9001\u5b83\u4eec\u3002\n\u5728\u8bb8\u591a\u5ba2\u6237\u7cfb\u7edf\u4e2d\uff0c\u5c06\u6709\u4e00\u4e2a\u4e3b\u8981\u8def\u7531\u6309\u987a\u5e8f\u5904\u7406\u5927\u591a\u6570\u3002\u9700\u8981\u6301\u4e45\u5730\u8bb0\u5f55\u8fd9\u4e9b\u6d88\u606f\u7684\u63a5\u6536\u60c5\u51b5\uff0c\u8fd9\u4f7f\u5f97\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u5355\u7ebf\u7a0b\u7528\u4f8b\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a\u4e3b\u8981\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002\u8fd8\u6709\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u53ef\u4ee5\u4e3a\u5728\u591a\u6761\u8def\u7ebf\u4e0a\u66f4\u5747\u5300\u5730\u5206\u914d\u5de5\u4f5c\u7684\u5ba2\u6237\u8868\u5f81\u6027\u80fd\u3002 PostgreSQL \u5728\u5355\u7ebf\u7a0b\u548c\u591a\u7ebf\u7a0b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u90fd\u53d6\u5f97\u4e86\u4f18\u5f02\u7684\u6210\u7ee9\uff0c\u4f46\u6211\u5e0c\u671b Cassandra\u2014\u2014\u51ed\u501f\u5176\u66f4\u7b80\u5355\u7684\u6a21\u578b\u548c\u6781\u81f4\u7684\u6027\u80fd\u2014\u2014\u80fd\u591f\u63d0\u4f9b\u66f4\u9ad8\u7684\u6027\u80fd\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u8868\u660e\u5355\u7ebf\u7a0b\u5199\u5165\u6027\u80fd\u5b58\u5728\u4e00\u4e9b\u76f8\u5173\u5f02\u5e38\u3002\u5b58\u5728\u51e0\u4e2a\u5173\u952e\u95ee\u9898\uff1a \u5355\u7ebf\u7a0b Cassandra \u57fa\u51c6\u6d4b\u8bd5\u5728\u786c\u4ef6\u4e0a\u8868\u73b0\u51fa\u6781\u5dee\u7684\u6027\u80fd\uff0c\u4e0e PostgreSQL \u663e\u793a\u7684\u7269\u7406\u6027\u80fd\u76f8\u6bd4\u3002\u5ef6\u8fdf\u4e0e\u6392\u961f\u7406\u8bba\u8868\u660e\u7684\u901a\u5e38\u6a21\u5f0f\u76f8\u53cd\uff1b\u5728\u591a\u7ebf\u7a0b\u7cfb\u7edf\u4e2d\uff0c\u66f4\u591a\u7684\u7ebf\u7a0b\u5e94\u8be5\u63d0\u4f9b\u66f4\u9ad8\u7684\u541e\u5410\u91cf\uff0c\u4f46\u4ee5\u589e\u52a0\u5ef6\u8fdf\u4e3a\u4ee3\u4ef7\u3002 Cassandra \u5c55\u793a\u4e86\u8fd9\u79cd\u6a21\u5f0f\u7684\u53cd\u8f6c\u3002\u541e\u5410\u91cf\u589e\u52a0\u8d85\u8fc7\u7ebf\u7a0b\u6570\u2014\u201410 \u500d\u7684\u7ebf\u7a0b\u63d0\u4f9b\u8fdc\u8fdc\u8d85\u8fc7 10 \u500d\u7684\u541e\u5410\u91cf\u8fd9\u4e00\u4e8b\u5b9e\u4e5f\u662f\u53ef\u7591\u7684\u3002\u7efc\u4e0a\u6240\u8ff0\uff0c\u8fd9\u4e9b\u75c7\u72b6\u8ba9\u6211\u6000\u7591 Cassandra \u4e0a\u7684\u5355\u7ebf\u7a0b\u5de5\u4f5c\u8d1f\u8f7d\u53ef\u80fd\u5b58\u5728\u4e00\u4e9b\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898\u3002\n\u5bf9\u4e8e\u50cf\u6211\u8fd9\u6837\u4e0d\u719f\u6089\u7684\u5de5\u7a0b\u5e08\u6765\u8bf4\uff0c\u4e86\u89e3 Cassandra \u7684\u5185\u90e8\u6267\u884c\u8fc7\u7a0b\u5177\u6709\u5f88\u5927\u7684\u590d\u6742\u6027\u3002\u5177\u6709\u5f88\u5f3a\u7684\u5e76\u53d1\u6027\uff0c\u901a\u8fc7\u591a\u4e2a\u5de5\u4f5c\u6c60\u8de8\u591a\u4e2a\u7ebf\u7a0b\u5904\u7406\u6570\u636e\u5e93\u64cd\u4f5c\u3002\u9274\u4e8e\u8fd9\u79cd\u590d\u6742\u6027\uff0c\u68c0\u6d4b\u548c\u8ddf\u8e2a\u8bf7\u6c42\u5904\u7406\u4f3c\u4e4e\u662f\u7406\u89e3\u95ee\u9898\u7684\u552f\u4e00\u53ef\u884c\u9014\u5f84\u3002\u6240\u4ee5\u6211\u83b7\u53d6\u4e86\u6e90\u4ee3\u7801\uff0c\u6784\u5efa\u4e86 Cassandra \u5e76\u5f00\u59cb\u6dfb\u52a0\u81ea\u5b9a\u4e49\u65e5\u5fd7\u6765\u68c0\u6d4b\u95ee\u9898\u3002\u6211\u7684\u65e5\u5fd7\u8bb0\u5f55\u96c6\u4e2d\u5728\u8bb0\u5f55\u6574\u4e2a\u8bf7\u6c42\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u4ee5\u53ca\u8f6c\u79fb\u5230\u5de5\u4f5c\u6c60\u7684\u7ec4\u4ef6\u4efb\u52a1\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u95f4\u3002\u8fd9\u91cc\u7684\u76ee\u6807\u662f\u80fd\u591f\u5728\u5fae\u79d2\u7ea7\u522b\u8ddf\u8e2a\u4efb\u52a1\u5b9e\u9645\u6267\u884c\u7684\u65f6\u95f4\uff0c\u4ee5\u5bfb\u627e\u5ef6\u8fdf\u3002\u8ddf\u8e2a\u663e\u793a\u5728\u8c03\u7528 StorageProxy.performLocally() \u548c\u5b9e\u9645\u6267\u884c LocalMutationRunnable \u4e4b\u95f4\u7684\u5e73\u5747\u5ef6\u8fdf\u4e3a 1.52 \u6beb\u79d2\u3002\u603b\u64cd\u4f5c\u65f6\u95f4\u5e73\u5747\u4e3a 2.06 \u6beb\u79d2\uff08\u5728 Message.Dispatcher processRequest() \u5904\u6d4b\u91cf\uff09\u3002\u8fd9\u8868\u660e\u5728 SEPExecutor \u4e2d\u7b49\u5f85\u7ebf\u7a0b\u8c03\u5ea6\u6240\u635f\u5931\u7684\u603b\u64cd\u4f5c\u65f6\u95f4\u7684\u7ea6 72%\u3002\u9274\u4e8e\u6211\u53d1\u73b0\u7684\u5ef6\u8fdf\uff0cSEPExecutor \u7ebf\u7a0b\u6c60\u6210\u4e3a\u8c03\u67e5\u7684\u7126\u70b9\u3002\u8fd9\u662f\u4e00\u4e2a Cassandra \u7279\u5b9a\u7684\u81ea\u5b9a\u4e49\u7ebf\u7a0b\u6c60\uff0c\u5177\u6709\u663e\u7740\u7684\u5185\u90e8\u590d\u6742\u6027\u3002\u6211\u7528 SEPExecutor \u5c1d\u8bd5\u4e86\u8bb8\u591a\u7b28\u62d9\u7684\u5e72\u9884\u63aa\u65bd\uff0c\u4f46\u6ca1\u6709\u4e00\u6b21\u5b8c\u5168\u6210\u529f\u3002\n\u6211\u5f00\u59cb\u8be2\u95ee\u6709\u5173 SEPWorker.assign() \u5728\u4ece SPINNING \u8f6c\u6362\u5230\u201c\u5de5\u4f5c\u201d\u72b6\u6001\u65f6\u5982\u4f55\u4e0d\u89e3\u9664\u7ebf\u7a0b\u7684\u95ee\u9898\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u5df2\u7ecf\u8bb0\u5f55\u4e86\u6211\u7684\u8c03\u67e5\u548c\u7ed3\u679c\uff0c\u6211\u5728 Cassandra JIRA \u9519\u8bef\u8ddf\u8e2a\u5668\u4e0a\u63d0\u51fa\u4e86\u4e00\u4e2a\u95ee\u9898\u3002\u6700\u521d\u5b83\u9047\u5230\u4e86\u4e00\u4e9b\u516c\u5e73\u7684\u95ee\u9898\uff0c\u4f46\u8001\u5b9e\u8bf4\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u6000\u7591\u3002 \uff08\u8001\u5b9e\u8bf4\uff0c\u8fd9\u5bf9\u4e8e\u4efb\u4f55\u9879\u76ee\u90fd\u662f\u53ef\u4ee5\u7406\u89e3\u7684\uff0c\u56e0\u4e3a\u9879\u76ee\u62e5\u6709\u7684\u8d44\u6e90\u6709\u9650\uff0c\u800c\u4e14\u4ed6\u4eec\u53ef\u80fd\u4f1a\u6536\u5230\u5927\u91cf\u611a\u8822\u7684\u95ee\u9898\u548c\u8bef\u62a5\u3002\uff09\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u6b63\u5728\u5bfb\u627e\u548c\u8ba8\u8bba\u5173\u4e8e JIRA \u95ee\u9898\u7684\u8fdb\u4e00\u6b65\u7ebf\u7d22\u3002 Cassandra \u7684\u4e00\u4f4d\u8d1f\u8d23\u4eba\u52a0\u5165\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u6b63\u5728\u8ba8\u8bba\u5178\u578b\u7684\u73af\u5883\u548c\u7528\u4f8b\u3002\u6211\u613f\u610f\u542c\u5230\u4e00\u4e9b\u89c1\u89e3\u6216\u89e3\u91ca\uff0c\u4f46\u6211\u81ea\u5df1\u575a\u4fe1\u8fd9\u91cc\u5f88\u53ef\u80fd\u4f1a\u627e\u5230\u4e00\u4e9b\u4e1c\u897f\u3002\u5bf9\u4efb\u52a1\u8c03\u5ea6\u884c\u4e3a\u548c\u7531\u6b64\u4ea7\u751f\u7684\u8c03\u5ea6\u5ef6\u8fdf\u7684\u8be6\u7ec6\u8ddf\u8e2a\u8868\u660e\uff0c\u5f53\u5de5\u4f5c\u4eba\u5458\u5df2\u7ecf\u53ef\u7528\u4f46\u505c\u5728\u201c\u65cb\u8f6c\u201d\u72b6\u6001\u65f6\u4f1a\u53d1\u751f\u5ef6\u8fdf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cCassandra \u7684 SEPExecutor \u7ebf\u7a0b\u6c60\u65e2\u6ca1\u6709\u542f\u52a8\u989d\u5916\u7684 worker\uff0c\u4e5f\u6ca1\u6709\u5524\u9192\uff08unpark\uff09\u6b63\u5728\u4f11\u7720\u7684 worker\u3002\u5728\u5355\u7ebf\u7a0b\u6761\u4ef6\u4e0b\uff0cworker \u4f1a\u5728\u6bcf\u6b21\u8bf7\u6c42\u540e\u7acb\u5373\u8fdb\u5165\u7761\u7720\u72b6\u6001\uff1b\u6700\u591a\u9700\u8981 1.5 \u6beb\u79d2\u624d\u80fd\u5524\u9192\u4e0b\u4e00\u4e2a\uff01\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u662f\u5f3a\u6709\u529b\u7684\u8bc1\u636e\uff0c\u4f46 Cassandra \u793e\u533a\u6307\u51fa\u7ebf\u7a0b\u6c60\u662f\u4e3a Linux \u8bbe\u8ba1\u7684\uff0c\u5e76\u4e14\uff08\u4ece\u65b0\u7248\u672c 4 \u5f00\u59cb\uff09\u4ed6\u4eec\u5df2\u7ecf\u653e\u5f03\u4e86\u5bf9 Windows \u4f5c\u4e3a\u5e73\u53f0\u7684\u652f\u6301\u3002\n\u6240\u4ee5\uff0c\u6211\u53bb\u62ff\u4e86\u4e00\u4e2a EC2 \u5b9e\u4f8b\u5e76\u8fdb\u884c\u4e86\u4e00\u4e9b Linux \u6d4b\u8bd5\u3002\u5728\u5355\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6211\u80fd\u591f\u5728 Linux \u4e0a\u53d1\u73b0 +30.9% \u7684\u6027\u80fd\u6539\u8fdb\uff0c\u5728 10\u300150 \u548c 200 \u4e2a\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0c\u6539\u8fdb\u4ece\u5c0f\u5230\u5927\u4e0d\u7b49\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u89c9\u5f97\u6211\u5df2\u7ecf\u62a5\u544a\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u9519\u8bef (CASSANDRA-16499)\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8865\u4e01\uff0c\u5e76\u663e\u793a\u4e86\u6027\u80fd\u6539\u8fdb\u548c\u975e\u56de\u5f52\u7684\u826f\u597d\u8bc1\u636e\u3002\u7136\u800c\uff0c\u63d0\u51fa\u4e86\u67b6\u6784\u95ee\u9898\uff0c\u8fd9\u662f\u6267\u884c\u5668\u7684\u9884\u671f\u8bbe\u8ba1\u2014\u2014\u5de5\u4f5c\u7ebf\u7a0b\u81ea\u7ec4\u7ec7\uff0c\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u4e4b\u95f4\u7684\u4ea4\u4e92\u6709\u9650\u3002\u6dfb\u52a0\u4e3b\u52a8\u5524\u9192\u884c\u4e3a\u5c06\u6d88\u9664\u6b64\u8bbe\u8ba1\u529f\u80fd\u3002 Cassandra \u9886\u5bfc\u5e76\u6ca1\u6709\u63a5\u53d7\u8865\u4e01\uff0c\u800c\u662f\u8981\u6c42\u5bf9\u53ef\u80fd\u7684\u7ebf\u7a0b\u6c60\u9009\u9879\u8fdb\u884c\u5168\u9762\u7684\u67b6\u6784\u91cd\u65b0\u8bc4\u4f30\u3002\u867d\u7136\u8fd9\u662f\u4e00\u6b21\u6709\u4ef7\u503c\u7684\u63a2\u7d22\uff0c\u4f46\u6211\u5728\u57fa\u51c6\u6d4b\u8bd5\u548c\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86 Cassandra \u7684\u5176\u4ed6\u7f3a\u70b9\uff1a\u5e76\u884c\u63d0\u4ea4/fsync \u53ef\u80fd\u6548\u7387\u4f4e\u4e0b\u2014\u2014PostgreSQL \u80fd\u591f\u5728\u5355\u4e2a fsync() \u4e2d\u63d0\u4ea4\u591a\u4e2a\u7b49\u5f85\u4e8b\u52a1\uff0cCassandra \u53ef\u80fd\u5728\u8fd9\u65b9\u9762\u6709\u5c40\u9650\u6027\u6211\u4eec\u8ba8\u8bba\u4e86\u6211\u4eec\u7684\u6570\u636e\u5e93\u9009\u9879\uff0c\u4ee5\u53ca\u8fdb\u4e00\u6b65\u6295\u8d44 Cassandra \u4ee5\u53d1\u73b0\u548c\u4fee\u590d\u8fd9\u4e9b\u5176\u4ed6\u53ef\u80fd\u7684\u7f3a\u9677\u7684\u6f5c\u529b\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u68d2\u7684\u5e73\u53f0\uff0c\u6211\u4eec\u5f88\u611f\u5174\u8da3\uff0c\u4f46\u6211\u4eec\u5f88\u96be\u505a\u51fa\u5546\u4e1a\u6848\u4f8b\u3002\n\u6240\u4ee5\u611f\u8c22\u9605\u8bfb\uff0c\u6211\u5e0c\u671b\u4f60\u89c9\u5f97\u8fd9\u5f88\u6709\u8da3\uff01\u5982\u679c\u6709\u4eba\u5e0c\u671b\u7ee7\u7eed\u8fd9\u9879\u5de5\u4f5c\uff0c\u6211\u5f88\u4e50\u610f\u8ba8\u8bba\u3002", "note_en": "Recently I was conducting an evaluation of several different databases for a messaging workload. While benchmarking Apache Cassandra, I noticed unusual patterns in performance metrics. I followed these clues and eventually found some major thread-pool design questions and a potential 18x performance gain realizable on Windows.\n  I had been investigating a range of different databases as potential backends to re-engineer a messaging product. While I had some candidates in mind already, I wanted to be able to show a robust exploration of database options.\n  While PostgreSQL was a strong contender among SQL databases and had given good results in early experiments, I was looking for the ideal NoSQL candidate.\n Apache Cassandra was a little older than the latest NewSQL &amp; key-value databases, but it seemed in in many ways architecturally ideal:\n  The paradigm I was aiming for was to use the database almost entirely as a \u2018write-only datastore\u2019. Messaging has two major requirements: durable recording of work done (messages received &amp; sent) to allow crash recovery, and recording a longer-term searchable log.\n Cassandra had already been identified by our engineers as a preferred database, and should theoretically have aligned very well with these requirements. With highly scalable partitioned write performance and its LSMT datastructure able to automatically compact completed work from the table, it seemed like a clear leader.\n  Key workloads I was assessing in the messaging system involved receiving messages, capturing properties, transforming the messages, and sending them on.\n In many customer systems there would be one major route processing a large majority in sequential order. The requirement to durably record receipt of these messages made this essentially a single-threaded usecase, so this was a major benchmark. There were also multi-threaded benchmarks to characterize performance for customers running a more even distribution of work across multiple routes.\n PostgreSQL had given excellent results across single- and multi-threaded benchmarks, but I had hopes that Cassandra \u2014 with its simpler model and extreme performance focus \u2014 would be able to deliver even higher.\n      However these results suggested some concerning anomalies in single-threaded write performance.\u00a0Several key concerns existed:\n The single-threaded Cassandra benchmark showed abysmally poor performance on the hardware, compared to what PostgreSQL had shown was physically possible.\n Latencies were inverted from the usual pattern that queueing theory indicates; in a multi-threaded system, more threads should give higher throughput but at the cost of increased latency. Cassandra showed an inversion of this pattern.\n Throughput increasing beyond the number of threads \u2014 the fact that 10x the threads gave far more than 10x the throughput was also suspicious.\n Taken together, these symptoms made me suspicious there might be some inefficiencies in single-thread workloads on Cassandra.\n  Understanding Cassandra\u2019s internal execution processes, to an unfamiliar engineer like myself, posed a significant degree of complexity. There is a strong degree of concurrency, with database operations processed across multiple threads via a number of worker pools.\n Given this complexity, instrumenting &amp; tracing the request processing seemed the only plausible route to understand the problem. So I fetched the source, built Cassandra &amp; started added custom logging to instrument the problem.\n My logging focused on recording the start &amp; end times of the overall request and of the component tasks devolved to worker pools. The aim here was to be able to track, at a microsecond level, when tasks were actually executing in order to look for delays.\n  Tracing showed an average delay of 1.52 ms between StorageProxy.performLocally() being called, and the LocalMutationRunnable actually executing.\n Total operation time averaged 2.06 ms (measured at Message.Dispatcher processRequest()). This suggested ~72% of the\u00a0 total operation time\u00a0being lost waiting for thread scheduling in SEPExecutor.\n Given the delays I found, the SEPExecutor thread pool became a focus of investigation. This is a Cassandra-specific custom thread pool with significant internal complexity.\n I tried a number of clumsy interventions with SEPExecutor, none of which were fully successful.\n I started asking questions about how SEPWorker.assign() doesn\u2019t unpark threads when transitioning from SPINNING to \u2018working\u2019 state.\n Having documented my investigation &amp; results so far, I raised an issue on the Cassandra JIRA bug-tracker. Initially it was met with some fair questions but to be honest a certain amount of skepticism. (To be honest this is very understandable for any project, given the limited resources projects have and the numbers of stupid questions &amp; false positives they likely receive.)\n   In the meantime I was finding &amp; discussing further clues on the JIRA issue. One of the Cassandra leads had joined the issue and was discussing typical environments &amp; usecases. I was open to hearing some insight or explanation, but believed strongly myself that there was likely something to be found here.\n  A detailed trace of task scheduling behavior and resultant scheduling delays, showed that delays occurred when a worker was already available but parked in a \u2018SPINNING\u2019 state.\n In this case, Cassandra\u2019s SEPExecutor thread pool neither started an extra worker, nor did it wake (unpark) the sleeping one.\n Under single-threaded conditions, workers would go to sleep immediately after each request; and take up to 1.5 milliseconds to wake up for the next one!\n    While this seemed like strong evidence to me, the Cassandra community noted that the thread-pool is designed for Linux and that (as of the new version 4) they had dropped support for Windows as a platform.\n So, I went and got an EC2 instance and undertook some Linux testing. I was able to find a +30.9% performance improvement on Linux \u00a0in the single-thread case, with improvements varying from small to marginal over 10, 50 and 200 thread cases.\n  At this point I felt that I\u2019d reported a clear bug ( CASSANDRA-16499), provided a patch, and shown good evidence of performance improvement and non-regression.\n However there were architectural questions raised, that this was the intended design of the executor \u2014 that worker threads self-organize with limited interaction between producers and consumers. And that adding a proactive wakeup behavior, would obviate this design feature.\n Rather than accepting the patch, the Cassandra lead asked for a comprehensive architectural reassessment of possible thread-pooling options.\n While it was a valuable exploration, the course of my benchmarking &amp; assessment had identified other drawbacks of Cassandra:\n possible inefficiency in parallel commit/ fsync \u2014 PostgreSQL is able to commit multiple waiting transactions in a single fsync(), Cassandra may have limitations here\n We discussed our database options, and potential of investing further in Cassandra to find &amp; fix these other likely deficits. It\u2019s a great platform, and we were interested, but it was hard for us to make a business case.\n So thanks for reading, and I hope you found this interesting! Should anyone wish to continue this work, I\u2019d be very happy to discuss.", "posttime": "2021-08-08 11:49:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,apache,deficits,cassandra", "title": "Apache Cassandra \u4e2d\u7684\u6027\u80fd\u7f3a\u9677", "title_en": "Performance Deficits in Apache Cassandra", "transed": 1, "url": "http://literatejava.com/database/performance-deficits-in-apache-cassandra/", "via": "", "real_tags": ["\u6027\u80fd", "apache", "deficits", "cassandra"]}, {"category": "", "categoryclass": "", "imagename": "408b4047570c242de9e82dda5d86deb0.jpg", "infoid": 1072057, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u9996\u5148\uff0c\u5982\u679c\u60a8\u8fd8\u6ca1\u6709\u8ddf\u4e0a Amazon Web Services \u548c Elastic \u7684\u4f20\u5947\uff0c\u8fd9\u91cc\u662f\u6700\u7b80\u77ed\u7684\u56de\u987e\u3002\u51e0\u5e74\u524d\uff0cAWS \u57fa\u672c\u4e0a\u5206\u53c9\u4e86 ElasticSearch\uff0c\u5c06\u5176\u4f5c\u4e3a\u670d\u52a1\u63d0\u4f9b\uff0c\u8fd9\u8ba9\u5f00\u6e90\u793e\u533a\u975e\u5e38\u6cae\u4e27\u3002\u4f5c\u4e3a\u56de\u5e94\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\uff0cElastic \u51b3\u5b9a\u5728\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\u66f4\u6539 ElasticSearch \u7684\u8bb8\u53ef\u4ee5\u9650\u5236\u5176\u4e0b\u6e38\u4f7f\u7528\uff0c\u8fd9\u518d\u6b21\u4ee4\u5f00\u6e90\u793e\u533a\u611f\u5230\u6cae\u4e27\u3002 AWS \u968f\u540e\u5ba3\u5e03\u5c06\u5206\u53c9\u8be5\u9879\u76ee\u4ee5\u4fdd\u6301\u5176\u5b8c\u5168\u5f00\u6e90\uff0c\u7a81\u7136\u6210\u4e3a\u8be5\u573a\u666f\u4e2d\u660e\u663e\u7684\u597d\u4eba\u3002\u6700\u540e\uff0c\u5c31\u5728\u51e0\u4e2a\u6708\u524d\uff0cAWS \u5728 Apache \u8bb8\u53ef\u4e0b\u53d1\u5e03\u4e86 OpenSearch\uff0c\u7248\u672c 2.0 (ALv2)\uff0c\u57fa\u672c\u4e0a\u5b8c\u6210\u4e86\u8fd9\u4e2a\u5faa\u73af\u3002 ElasticSearch \u548c AWS \u4e4b\u95f4\u7684\u6765\u56de\u5728\u672c\u5468\u7ee7\u7eed\u8fdb\u884c\uff0c\u8fd9\u4e00\u6b21 Elastic \u8fdb\u4e00\u6b65\u5c1d\u8bd5\u5173\u95ed\u5bf9 ElasticSearch \u7684\u8bbf\u95ee\u5e76\u5173\u95ed AWS\u3002\u4f5c\u4e3a\u56de\u5e94\uff0cAWS \u8868\u793a\u6b63\u5728\u52aa\u529b\u4f7f OpenSearch \u548c Elasticsearch \u7684\u5ba2\u6237\u7aef\u4e0e\u5f00\u6e90\u517c\u5bb9\u3002 AWS \u8868\u793a\uff0c\u201cOpenSearch \u65e8\u5728\u63d0\u4f9b\u4e0e Elasticsearch 7.10.2 \u7684\u5f00\u6e90\u53d1\u884c\u7248\uff08\u5373\u5b83\u7684\u884d\u751f\u8f6f\u4ef6\uff09\u7684\u8fde\u7ebf\u517c\u5bb9\u6027\u201d\uff0c\u4ece\u800c\u53ef\u4ee5\u8f7b\u677e\u8fc1\u79fb\u5230 OpenSearch\u3002\u867d\u7136 Elastic \u5bf9\u6b64\u65e0\u80fd\u4e3a\u529b\uff0c\u4f46\u4ed6\u4eec\u53ef\u4ee5\u5bf9\u4e00\u4e9b\u5e38\u7528\u7684\u5f00\u6e90\u5ba2\u6237\u7aef\u5e93\u8fdb\u884c\u66f4\u6539\u3002 \u201c\u5728\u8fc7\u53bb\u7684\u51e0\u5468\u91cc\uff0cElastic \u5411\u5176\u4e2d\u51e0\u4e2a\u5ba2\u6237\u7aef\u6dfb\u52a0\u4e86\u65b0\u903b\u8f91\uff0c\u8fd9\u4e9b\u5ba2\u6237\u7aef\u62d2\u7edd\u8fde\u63a5\u5230 OpenSearch \u96c6\u7fa4\u6216\u8fd0\u884c Elasticsearch 7 \u5f00\u6e90\u53d1\u884c\u7248\u7684\u96c6\u7fa4\uff0c\u751a\u81f3\u90a3\u4e9b\u7531 Elastic \u81ea\u5df1\u63d0\u4f9b\u7684\u96c6\u7fa4\u3002\u867d\u7136\u5ba2\u6237\u7aef\u5e93\u4ecd\u7136\u662f\u5f00\u6e90\u7684\uff0c\u4f46\u5b83\u4eec\u73b0\u5728\u53ea\u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u8fde\u63a5\u5230 Elastic \u7684\u5546\u4e1a\u4ea7\u54c1\uff0c\u201dAWS \u5199\u9053\u3002\u5982\u679c Elastic \u60f3\u8981\u91cd\u56de\u5f00\u6e90\u793e\u533a\u7684\u9752\u7750\uff0c\u8fd9\u80af\u5b9a\u4e0d\u662f\u8fd9\u6837\u7684\u65b9\u5f0f\u3002\u611f\u8c22@elastic \u5728\u4e0e@awscloud \u7684\u6218\u4e89\u4e2d\u8ba9\u6211\u4eec\u6240\u6709\u4eba\u90fd\u53d7\u5230\u4e86\u9644\u5e26\u635f\u5bb3\u3002\u5c06\u4f9d\u8d56\u9879\u56fa\u5b9a\u4e3a &gt;=7.0.0,&lt;8.0.0 \u5e76\u5728\u90e8\u7f72\u65f6\u81ea\u52a8\u83b7\u53d6\u6b64\u66f4\u65b0\u662f\u6211\u7684\u574f\u5904\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4f7f\u7528 AWS \u7684\u4efb\u4f55\u4eba\u6765\u8bf4\uff0c\u7834\u574f ES python \u5305\u4ecd\u7136\u975e\u5e38\u7cdf\u7cd5\u3002 #elasticsearch pic.twitter.com/Vb5VatOXdl \u76f8\u53cd\uff0cAWS \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u518d\u6b21\u6210\u4e3a\u5f00\u6e90\u7684\u6551\u4e16\u4e3b\uff0c\u8fd9\u4e00\u6b21\u4f3c\u4e4e\u627f\u8bfa\u63d0\u4f9b\u201c\u4e00\u7ec4\u65b0\u7684\u5f00\u6e90\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u8f7b\u677e\u8fde\u63a5\u5e94\u7528\u7a0b\u5e8f\u5230\u4efb\u4f55 OpenSearch \u6216 Elasticsearch \u96c6\u7fa4\u201d\uff0c\u8fd9\u4e9b\u96c6\u7fa4\u201c\u5c06\u5728\u6dfb\u52a0\u4ea7\u54c1\u68c0\u67e5\u4e4b\u524d\u4ece\u76f8\u5e94\u7684 Elastic \u7ef4\u62a4\u5ba2\u6237\u7aef\u7684\u6700\u65b0\u517c\u5bb9\u7248\u672c\u4e2d\u6d3e\u751f\u51fa\u6765\u3002\u201d\n\u4ed6\u4eec\u5199\u9053\uff1a\u201c\u672c\u7740\u5f00\u653e\u6027\u548c\u4e92\u64cd\u4f5c\u6027\u7684\u7cbe\u795e\uff0c\u6211\u4eec\u5c06\u5c3d\u5408\u7406\u52aa\u529b\u4fdd\u6301\u4e0e\u6240\u6709 Elasticsearch \u53d1\u884c\u7248\u7684\u517c\u5bb9\u6027\uff0c\u5373\u4f7f\u662f\u90a3\u4e9b\u7531 Elastic \u751f\u4ea7\u7684\u53d1\u884c\u7248\u3002\u201d\u4e0e\u6b64\u540c\u65f6\uff0c\u867d\u7136 OpenSearch \u793e\u533a\u81f4\u529b\u4e8e\u521b\u5efa\u66ff\u4ee3\u5e93\uff0c\u4f46 AWS \u5efa\u8bae\u7528\u6237\u4e0d\u8981\u66f4\u65b0\u5230\u4efb\u4f55\u7531 Elastic \u7ef4\u62a4\u7684\u5ba2\u6237\u7aef\u7684\u6700\u65b0\u7248\u672c\uff0c\u4ee5\u514d\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u80fd\u505c\u6b62\u8fd0\u884c\u3002\u4ee5\u5584\u610f\u5408\u6cd5\u5730\u6740\u6b7b\u4ed6\u4eec\u3002\u8fd9\u662f elasticsearch \u5e94\u8be5\u91c7\u53d6\u7684\u884c\u52a8\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u7b26\u5408\u793e\u533a\u7684\u6700\u4f73\u5229\u76ca\u3002\u4e0d\u8fc7\uff0c\u4ed6\u4eec\u5df2\u7ecf\u8868\u660e\u4e86\u81ea\u5df1\u7684\u7acb\u573a\u3002\u8fd9\u662f\u5173\u4e8e\u94b1\u7684\u3002 Facebook \u5f00\u6e90\u8ba1\u7b97\u5b8c\u6574\u6027\u5de5\u5177\uff1a\u300a\u6743\u529b\u7684\u6e38\u620f\u300b\u7c89\u4e1d\u6700\u7ec8\u5e94\u8be5\u5bf9 Facebook \u6700\u65b0\u7684\u5f00\u6e90\u9879\u76ee Winterfell \u611f\u5230\u6ee1\u610f\uff0c\u8fd9\u662f\u4e00\u4e2a STARK \u7684\u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005\u3002\u9664\u4e86\u6587\u5316\u53c2\u8003\u4e4b\u5916\uff0cWinterfell \u662f\u53ef\u6269\u5c55\u7684\u900f\u660e\u77e5\u8bc6\u8bba\u8bc1 (STARK) \u8bc1\u660e\u8005\u548c\u9a8c\u8bc1\u8005\u7684\u5b9e\u73b0\uff0c\u66f4\u5177\u4f53\u5730\u8bf4\uff0c\u5b83\u4f7f\u666e\u901a\u5f00\u53d1\u4eba\u5458\u80fd\u591f\u201c\u4ece\u901a\u5e38\u9700\u8981\u8f93\u5165\u6570\u636e\u7684\u8ba1\u7b97\u5b8c\u6574\u6027\u8bc1\u660e (CI) \u4e2d\u53d7\u76ca\u201d\u3002 - \u8981\u5b9e\u65bd\u7684\u5bc6\u7801\u5b66\u7684\u6df1\u5165\u77e5\u8bc6\u3002\u201d CI \u8bc1\u660e\u5141\u8bb8\u7528\u6237\u8fd0\u884c\u8ba1\u7b97\uff0c\u83b7\u5f97\u7ed3\u679c\uff0c\u7136\u540e\u201c\u8ba9\u4efb\u4f55\u4eba\u76f8\u4fe1\u4f60\u6b63\u786e\u5730\u8fdb\u884c\u4e86\u8ba1\u7b97\uff0c\u800c\u65e0\u9700\u4ed6\u4eec\u81ea\u5df1\u91cd\u65b0\u8fd0\u884c\u8ba1\u7b97\u3002\u201d\u5176\u4e2d\u7684\u4e00\u4e2a\u5b50\u96c6\u662f\u96f6\u77e5\u8bc6\u8bc1\u660e\uff08ZKP\uff09\uff0c\u5b83\u5141\u8bb8\u76f8\u540c\u7684\u529f\u80fd\uff0c\u540c\u65f6\u4e5f\u63a9\u76d6\u4e86\u8f93\u5165\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u4e0e\u6700\u8fd1\u7684\u533a\u5757\u94fe\u8d8b\u52bf\u8d8a\u6765\u8d8a\u76f8\u5173\uff0c\u4f46 Facebook \u5199\u9053\u201cZKP \u5728\u533a\u5757\u94fe\u9886\u57df\u4e4b\u5916\u4e5f\u6709\u8bb8\u591a\u6f5c\u5728\u7684\u5e94\u7528\u201d\uff0c\u4f46\u7531\u4e8e\u6240\u9700\u7684\u4e13\u4e1a\u77e5\u8bc6\u548c\u8ba1\u7b97\uff0c\u5b83\u4eec\u5e76\u6ca1\u6709\u771f\u6b63\u8d77\u98de\u3002 Facebook \u5728\u5176\u535a\u5ba2\u6587\u7ae0\u4e2d\u5199\u9053\uff1a\u201c\u6211\u4eec\u5f00\u53d1\u4e86 Winterfell \u6765\u5f25\u5408\u8fd9\u4e9b\u5dee\u8ddd\uff0c\u5e76\u4f7f\u5e38\u89c4\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528 ZKP\u3002\u201d Winterfell \u7528 Rust \u7f16\u5199\uff0c\u5df2\u53d1\u5e03\u5230 Crates.io\uff0c\u5e76\u9644\u5e26\u4e00\u4e2a\u7aef\u5230\u7aef\u6559\u7a0b\u548c\u4e00\u4e2a\u793a\u4f8b crate\u3002 Rust \u63a8\u52a8 GAT \u7a33\u5b9a\uff1a\u5728\u672c\u5468\u4e00\u7bc7\u5173\u4e8e\u63a8\u52a8 GAT \u7a33\u5b9a\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u7279\u5f81\u5de5\u4f5c\u7ec4\u7684\u6210\u5458 Jack Huey \u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u5411\u4ed6\u4eec\u7684\u8bfb\u8005\u4fdd\u8bc1\uff0c\u65e0\u8bba\u4ed6\u4eec\u662f\u5426\u77e5\u9053\uff0c\u7406\u89e3\u5b83\uff0c\u6216\u8005\u4e0d\u77e5\u9053\uff0c\u6dfb\u52a0\u6cdb\u578b\u5173\u8054\u7c7b\u578b (GAT) \u7684\u4e3e\u63aa\u201c\u975e\u5e38\u4ee4\u4eba\u5174\u594b\u201d\uff0c\u786e\u5b9e\u662f\u201c\u4e00\u4ef6\u5927\u4e8b\u201d\u3002\u663e\u7136\uff0cRust \u5c1d\u8bd5\u6dfb\u52a0 GAT \u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u4e86\u2014\u2014RFC \u4e8e 2016 \u5e74 4 \u6708\u9996\u6b21\u5f00\u653e\uff0c\u751a\u81f3\u65e9\u4e8e\u5bf9 const \u6cdb\u578b\u7684\u63a8\u52a8\u3002\u5982\u679c\u4f60\u4ecd\u7136\u6000\u7591\u5b83\u7684\u91cd\u8981\u6027\uff0c\u4ed6\u4f1a\u6307\u51fa GitHub \u4e0a\u7684\u8ddf\u8e2a\u95ee\u9898\uff0c\u5e76\u6307\u51fa\u8fd9\u662f\u201cRust \u5b58\u50a8\u5e93\u4e0a\u6295\u7968\u6700\u591a\u7684\u95ee\u9898\u201d\u3002\u8fd9\u91cc\u7684\u4e3b\u8981\u6d88\u606f\u662f generic_related_types \u529f\u80fd\u4e0d\u518d\u201c\u4e0d\u5b8c\u6574\u201d\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u5c1d\u8bd5\u5728\u6bcf\u665a\u6784\u5efa\u4e2d\u4f7f\u7528\u5b83\uff0c\u60a8\u5c06\u4e0d\u518d\u6536\u5230\u8b66\u544a\u3002\u6709\u5173\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981\u4ee5\u53ca GAT \u7a76\u7adf\u662f\u4ec0\u4e48\u7684\u5b8c\u6574\u63a8\u7406\uff0c\u8bf7\u524d\u5f80\u535a\u5ba2\u6587\u7ae0\u9605\u8bfb\u5bf9\u7f16\u8bd1\u5668\u6240\u505a\u7684\u6240\u6709\u66f4\u6539\u4ee5\u4f7f GAT \u5de5\u4f5c\uff0c\u4f46\u9664\u6b64\u4e4b\u5916\uff0c\u56e2\u961f\u6b63\u5728\u5bfb\u627e\u60a8\u4ee5\u5e2e\u52a9\u7a33\u5b9a\u65b0\u529f\u80fd\u3002 \u201c\u6211\u4eec\u9700\u8981\u60a8\u6d4b\u8bd5\u6b64\u529f\u80fd\uff0c\u4e3a\u60a8\u53d1\u73b0\u7684\u4efb\u4f55\u9519\u8bef\u6216\u6f5c\u5728\u7684\u8bca\u65ad\u6539\u8fdb\u63d0\u4ea4\u95ee\u9898\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u544a\u8bc9\u6211\u4eec GAT \u5728 Zulip \u4e0a\u542f\u7528\u7684\u4e00\u4e9b\u6709\u8da3\u6a21\u5f0f\uff0c\u201d\u4ed6\u4eec\u5199\u9053\u3002 FSF \u60f3\u4e86\u89e3\u60a8\u5bf9 GitHub Copilot \u7684\u770b\u6cd5\uff1a\u867d\u7136\u6709\u4e9b\u4eba\u53ef\u80fd\u8ba4\u4e3a GitHub Copilot \u4f5c\u4e3a GitHub \u65b0\u7684\u201cAI \u914d\u5bf9\u7a0b\u5e8f\u5458\u201d\uff0c\u5728\u516c\u5f00\u53ef\u7528\u7684\u6e90\u4ee3\u7801\u4e0a\u63a5\u53d7\u57f9\u8bad\uff0c\u4f46\u901a\u5e38\u4e0d\u4f1a\u4fb5\u72af\u7248\u6743\uff0c\u4f46\u81ea\u7531\u8f6f\u4ef6\u57fa\u91d1\u4f1a (FSF) \u4e0d\u592a\u786e\u5b9a\u65b0\u7684\u201c\u670d\u52a1\u5373\u8f6f\u4ef6\u66ff\u4ee3\u54c1\u201d\u3002 FSF \u5728\u5176\u5173\u4e8e Copilot \u7684\u54f2\u5b66\u548c\u6cd5\u5f8b\u95ee\u9898\u7684\u767d\u76ae\u4e66\u547c\u5401\u4e2d\u5199\u9053\uff0c\u201cCopilot \u63d0\u51fa\u4e86\u8bb8\u591a\u5176\u4ed6\u9700\u8981\u66f4\u6df1\u5165\u7814\u7a76\u7684\u95ee\u9898\u201d\uff0c\u4f8b\u5982\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8bad\u7ec3\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u5426\u53ef\u4ee5\u88ab\u89c6\u4e3a\u5408\u7406\u4f7f\u7528\uff0c\u4ee5\u53ca\u4ee3\u7801\u662f\u5426\u521b\u5efa\u901a\u8fc7\u8be5\u5de5\u5177\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4fb5\u72af\u7248\u6743\u3002\u4ed6\u4eec\u5199\u9053\uff1a\u201c\u5373\u4f7f\u4e00\u5207\u90fd\u53ef\u80fd\u5728\u6cd5\u5f8b\u4e0a\u6709\u95ee\u9898\uff0c\u4f46\u6fc0\u8fdb\u4e3b\u4e49\u8005\u60f3\u77e5\u9053\uff0c\u4e00\u5bb6\u4e13\u6709\u8f6f\u4ef6\u516c\u53f8\u5728\u4ed6\u4eec\u7684\u5de5\u4f5c\u4e2d\u6784\u5efa\u670d\u52a1\u662f\u5426\u5b58\u5728\u6839\u672c\u4e0d\u516c\u5e73\u7684\u95ee\u9898\u3002\u201d\u56e0\u6b64\uff0cFSF \u6b63\u5728\u5f81\u96c6\u6709\u5173\u8be5\u4e3b\u9898\u7684\u767d\u76ae\u4e66\u2014\u2014\u6709\u5173\u7279\u5b9a\u5174\u8da3\u9886\u57df\u7684\u9879\u76ee\u7b26\u53f7\u5217\u8868\uff0c\u8bf7\u53c2\u9605\u535a\u5ba2\u6587\u7ae0\u2014\u2014\u5e76\u5c06\u4e3a\u5df2\u53d1\u8868\u7684\u8bba\u6587\u652f\u4ed8 500 \u7f8e\u5143\u3002\u5220\u9664\u6240\u6709\u4ee3\u7801\u5e76\u91cd\u65b0\u5f00\u59cb\u7684\u5927 O \u8868\u793a\u6cd5\u662f\u4ec0\u4e48\uff1f\n\u7edf\u8ba1\u6570\u636e\uff1a\u5982\u679c\u6df1\u5165\u4e86\u89e3\u8fd9\u4e9b\u6570\u5b57\u8ba9\u60a8\u5174\u594b\u4e0d\u5df2\uff0c\u6211\u4eec\u6700\u8fd1\u53d1\u5e03\u4e86\u4e24\u4e2a\u7248\u672c\u6765\u6ee1\u8db3\u60a8\u7684\u7edf\u8ba1\u9700\u6c42\u3002\u9996\u5148\uff0c2021 \u5e74 Stack Overflow \u5f00\u53d1\u4eba\u5458\u8c03\u67e5\u5c31\u5728\u8fd9\u91cc\uff0c\u5168\u7403\u8d85\u8fc7 80,000 \u540d\u53d7\u8bbf\u8005\u63d0\u4f9b\u4e86\u7b54\u6848\uff0c\u4ece\u5f00\u53d1\u4eba\u5458\u7684\u5b66\u4e60\u65b9\u5f0f\u5230\u4ed6\u4eec\u4f7f\u7528\u6700\u591a\u7684\u8bed\u8a00\u548c\u6846\u67b6\uff0c\u4ee5\u53ca\u63d0\u4f9b\u6700\u9ad8\u85aa\u6c34\u7684\u8bed\u8a00\u548c\u6846\u67b6\u7b49\u65b9\u65b9\u9762\u9762\u3002\u5267\u900f\u8b66\u544a\uff1aRust \u8fde\u7eed\u7b2c\u516d\u5e74\u518d\u6b21\u5360\u636e\u201c\u6700\u53d7\u6b22\u8fce\u201d\u7684\u8bed\u8a00\u4f4d\u7f6e\u3002\u70b9\u51fb\u67e5\u770b\u5b8c\u6574\u7ed3\u679c\u4ee5\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u3002\u5c31\u5728\u6211\u4eec\u5728\u6b64\u671f\u95f4\uff0c\u672c\u5468 RedMonk \u7f16\u7a0b\u8bed\u8a00\u6392\u540d\u4e5f\u51fa\u6765\u4e86\uff0c\u5728\u8ba1\u7b97\u65b9\u9762\u663e\u793a\u51fa\u4e00\u4e2a\u57fa\u672c\u7a33\u5b9a\u7684\u9886\u57df\uff0cJavaScript \u4ecd\u7136\u6392\u540d\u7b2c\u4e00\uff0cJava \u4e0e Python \u4e00\u8d77\u56de\u5230\u4e86\u7b2c\u4e8c\u4f4d\u3002\u66f4\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u636e RedMonk \u79f0\uff0cGo\u3001Kotlin \u548c Rust \u7684\u76f8\u5bf9\u505c\u6ede\u4e0d\u524d\uff0c\u5b83\u8bf4\u201c\u53ef\u80fd\u53cd\u6620\u4e86\u7cfb\u7edf\u8bed\u8a00\u7684\u65b0\u51fa\u73b0\u7684\u73b0\u5b9e\u3002\u201d\u8fd9\u4e09\u8005\u88ab\u5f52\u4e3a\u201c\u9996\u9009\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u8bed\u8a00\u7684\u6311\u6218\u8005\u201d\uff0cRedMonk \u6307\u51fa Java \u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u8fdb\u5c55\u3002 \u201c\u56e0\u6b64\uff0c\u901a\u8fc7\u7ed3\u5408\u81ea\u8eab\u7684\u9002\u5e94\u6027\u548c\u4f01\u4e1a\u7684\u60ef\u6027\uff0cJava \u4fdd\u7559\u4e86\u4f01\u4e1a\u5e94\u7528\u7a0b\u5e8f\u5e02\u573a\u7684\u5f88\u5927\u4efd\u989d\uff0c\u8fd9\u4f3c\u4e4e\u662f\u6709\u9053\u7406\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u7684\u6f5c\u5728\u6311\u6218\u8005\u2014\u2014Go\u3001Rust \u548c\u7531\u4e8e\u5171\u4eab JVM \u5e73\u53f0\uff0cKotlin \u5728\u8f83\u5c0f\u7a0b\u5ea6\u4e0a\u4e0e Java \u7684\u7ade\u4e89\u6bd4\u5f7c\u6b64\u4e4b\u95f4\u7684\u7ade\u4e89\u8981\u5c11\uff0c\u201d\u4ed6\u4eec\u5199\u9053\u3002 \u201c\u5982\u679c\u8fd9\u4e2a\u5047\u8bbe\u662f\u6b63\u786e\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u671f\u671b Java \u80fd\u591f\u4fdd\u6301\u5176\u6027\u80fd\u548c\u672a\u6765\u4ece Go\u3001Kotlin \u548c Rust \u4e2d\u83b7\u5f97\u7684\u6536\u76ca\u2014\u2014\u5982\u679c\u6709\u7684\u8bdd\u2014\u2014\u5c06\u66f4\u96be\u83b7\u5f97\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e89\u593a\u8f83\u5c0f\u7684\u5de5\u4f5c\u8d1f\u8f7d\u6c60\u7684\u4efd\u989d\u3002\u201d\u5728\u5bb6\u5de5\u4f5c\u7684\u6700\u5927\u597d\u5904\u662f\uff0c\u60a8\u53ef\u4ee5\u968f\u5fc3\u6240\u6b32\u5730\u5bf9\u4ee3\u7801\u5927\u558a\u5927\u53eb\u3002", "note_en": "First off, if you haven\u2019t kept up with the saga of  Amazon Web Services and  Elastic, here\u2019s the briefest of recaps. A few years ago,  AWS basically forked ElasticSearch to offer it as a service, much to the open source community\u2019s dismay. In response, and after some time, Elastic decided to  change the licensing on ElasticSearch earlier this year to restrict its downstream use, again, much to the open source community\u2019s dismay. AWS then announced it would  fork the project to keep it fully open source, suddenly  becoming the apparent good guy\u00a0in the scenario. Finally, just a few months ago,  AWS released OpenSearch under the Apache License, Version 2.0 (ALv2), essentially completing the circle.\n  The  back and forth between ElasticSearch and AWS continues this week, this time with Elastic making further attempts at closing off access to ElasticSearch and shutting out AWS. AWS, in response, has said that it is working on  keeping clients of OpenSearch and Elasticsearch compatible with open source.\n AWS says that \u201cOpenSearch aims to provide wire compatibility with open source distributions of Elasticsearch 7.10.2, the software from which it was derived,\u201d making it easy to migrate to OpenSearch. While Elastic can\u2019t do anything about that, they can make changes to some  open source client libraries that are commonly used.\n \u201cOver the past few weeks, Elastic added  new logic to several of these clients that rejects connections to OpenSearch clusters or to clusters running open source distributions of Elasticsearch 7, even those provided by Elastic themselves. While the client libraries remain open source, they now only let applications connect to Elastic\u2019s commercial offerings,\u201d AWS writes.\n If Elastic were looking to get back into the good graces of the open source community, this surely does not seem like the way.\n Kudos to  @elastic for making us all collateral damage in its war with  @awscloud. It\u2019s my bad for pinning dependencies as &gt;=7.0.0,&lt;8.0.0 and getting this update automatically on a deploy. But still, pretty crappy to break the ES python package for anyone using AWS.  #elasticsearch  pic.twitter.com/Vb5VatOXdl\n  Instead, AWS is again coming out as the savior of open source in this scenario, it would seem, this time promising to offer \u201ca set of new open source clients that make it easy to connect applications to any OpenSearch or Elasticsearch cluster\u201d that \u201cwill be derived from the last compatible versions of corresponding Elastic-maintained clients before product checks were added.\u201d\n \u201cIn the spirit of openness and interoperability, we will make reasonable efforts to maintain compatibility with all Elasticsearch distributions, even those produced by Elastic,\u201d they write.\n In the meantime, while the OpenSearch community works on creating the replacement libraries, AWS recommends that users do not update to the latest version of any Elastic-maintained clients, lest their applications potentially cease functioning.\n Legitimately killing them with kindness. This is the type of moves that elasticsearch should be making because it\u2019s in the best interest of the community. They have made their stance clear though. It\u2019s about the money.\n   Facebook Open Sources Computational Integrity Tool: You Game of Thrones fans should be ultimately pleased with Facebook\u2019s latest open source project  Winterfell, a STARK prover and verifier. Beyond the cultural reference,  Winterfell is an implementation of the  Scalable Transparent Arguments of Knowledge (STARK) prover and verifier, and more specifically makes it possible for the average developer to \u201cbenefit from proofs of computational integrity (CI) that would normally require an in-depth knowledge of cryptography to implement.\u201d CI proofs allow users to run a computation, get a result, and then \u201cconvince anyone that you did the computation correctly without their having to rerun the computation themselves.\u201d A subset of this is the zero-knowledge proof (ZKP), which allows the same functionality, while also obscuring the inputs. All of this becomes increasingly pertinent with the recent trend of blockchain, but Facebook writes that \u201cZKPs have numerous potential applications outside of the blockchain space as well\u201d but they haven\u2019t really taken off because of the expertise and computation required. \u201cWe developed Winterfell to bridge these gaps and to bring ZKPs within reach of regular developers,\u201d Facebook writes in its blog post. Written in Rust, Winterfell has been released to  Crates.io and comes with an end-to-end  tutorial as well as an  examples crate.\n   Rust Pushes for GATs Stabilization: In a blog post this week about  the push for GATs stabilization, Jack Huey, a member of the  Traits Working Group, assures their readers again and again that, whether they know it, understand it, or not, the move to add generic associated types (GATs) is \u201cvery exciting\u201d and a \u201cbig deal,\u201d indeed. Apparently, Rust has been trying to add GATs for quite some time now \u2014 the  RFC was first opened in April of 2016, predating even the push for const generics. And if you still doubt its importance, he points to the tracking issue on GitHub, noting it is the \u201cmost upvoted issue on the Rust repository.\u201d The main news here is that the generic_associated_types feature is no longer \u201cincomplete,\u201d which means you will no longer get a warning if you\u2019re trying to use it on the nightly build. For the full reasoning as to why this is important, and what exactly GATs are, head on over to the blog post to read about all the changes made to the compiler to get GATs to work, but beyond that, the team is looking to you to help stabilize the new feature. \u201cWe need you to test this feature, to file issues for any bugs you find or for potential diagnostic improvements. Also, we\u2019d love for you to just tell us about some interesting patterns that GATs enable over on  Zulip,\u201d they write.\n FSF Wants Your Thoughts on GitHub Copilot: While some may feel that  GitHub Copilot, the new \u201cAI pair programmer\u201d from GitHub trained on publicly available source code, is  generally not infringing copyright, the Free Software Foundation (FSF) is not so sure about the new \u201c Service as a Software Substitute.\u201d In its  call for white papers on philosophical and legal questions around Copilot, the FSF writes that \u201cCopilot raises many other questions which require deeper examination,\u201d such as whether a neural network trained in this manner can be considered fair use and if the code created by the tool can be considered to be infringing on copyrights. \u201cEven if everything might be legally copacetic,\u201d they write, \u201cactivists wonder if there isn\u2019t something fundamentally unfair about a proprietary software company building a service off their work.\u201d As such, the FSF is calling for white papers on the topic \u2014 see the blog post for a bulleted list of specific areas of interest \u2014 and will pay out $500 for published papers.\n What\u2019s the Big O Notation of deleting all of your code and starting over again?\n  The Stats Are In: If digging through the numbers excites you, we have two recent releases to satisfy your statistical desires. First,  the 2021 Stack Overflow Developer Survey is here, with answers from more than 80,000 respondents worldwide, offering insights into everything from how developers learn, to what languages and frameworks they use the most, to which ones offer the best pay. Spoiler alert: Rust once again takes the \u201cmost loved\u201d language spot, for the sixth year in a row. Click on through to the  full results to find out more. And while we\u2019re at it,  the RedMonk Programming Language Rankings also came out this week, showing a mostly stable field when it comes to their calculations, with JavaScript remaining number one, and Java moving back up to number two, alongside Python. More notably, according to RedMonk, is the relative stagnation of Go, Kotlin, and Rust, which it says \u201cmay reflect a new emerging reality of systems languages.\u201d The three are grouped together as \u201cwould-be challengers for the title of enterprise application language of choice,\u201d and RedMonk notes that Java does not seem to be going anywhere. \u201cIt seems plausible, therefore, that Java is retaining \u2014 through a combination of adaptability on its part and inertia on the enterprise\u2019s \u2014 a large share of the enterprise applications market, meaning that its would-be challengers \u2014 languages like Go, Rust and to a lesser extent Kotlin because of the shared JVM platform \u2014 are competing less with Java than with each other,\u201d they write. \u201cIf that hypothesis is correct, we should expect Java to sustain its performance and future gains from Go, Kotlin and Rust \u2014 if any \u2014 will be harder to come by as they compete for shares of a smaller pool of workloads.\u201d\n The best part of working from home is you can scream at your code as loud as you want.", "posttime": "2021-08-08 10:54:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "elasticsearch,saga,\u5f00\u6e90", "title": "Elasticsearch \u4f20\u5947\u4ecd\u5728\u7ee7\u7eed", "title_en": "The Elasticsearch Saga Continues", "transed": 1, "url": "https://thenewstack.io/this-week-in-programming-the-elasticsearch-saga-continues/", "via": "", "real_tags": ["saga", "\u5f00\u6e90"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072056, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u529e\u516c\u684c\u4e0a\u7684\u7535\u8111\u901f\u5ea6\u5feb\u5f97\u4ee4\u4eba\u65e0\u6cd5\u7406\u89e3\u3002\u5b83\u4eec\u5728\u4e00\u79d2\u949f\u5185\u6267\u884c\u7684\u64cd\u4f5c\u6bd4\u4eba\u7c7b\u4e00\u767e\u5e74\u6267\u884c\u7684\u64cd\u4f5c\u8fd8\u591a\u3002\u6211\u4eec\u751f\u6d3b\u5728\u4e00\u4e2a CPU \u6bcf\u79d2\u53ef\u4ee5\u6267\u884c\u6570\u5341\u4ebf\u6761\u6307\u4ee4\u7684\u65f6\u4ee3\uff0c\u5982\u679c\u8003\u8651\u5230\u591a\u6838\uff0c\u5219\u53ef\u4ee5\u6267\u884c\u6570\u767e\u4ebf\u6761\u6307\u4ee4\uff0c\u53ef\u4ee5\u4ee5\u6bcf\u79d2\u6570\u767e GB \u7684\u901f\u5ea6\u5c06\u6570\u636e\u4f20\u8f93\u5230 CPU \u7684\u5185\u5b58\uff0c\u4ee5\u53ca\u652f\u6301\u6d41\u5f0f\u8bfb\u53d6\u7684\u78c1\u76d8\u6bcf\u79d2\u5343\u5146\u5b57\u8282\u3002\u8fd9\u4e2a\u786c\u4ef6\u901f\u5ea6\u6781\u5feb\u7684\u65f6\u4ee3\uff0c\u4e5f\u662f\u7a0b\u5e8f\u4ece SSD \u6216 NVMe \u78c1\u76d8\u542f\u52a8\u9700\u8981\u51e0\u5341\u79d2\u7684\u65f6\u4ee3\uff1b\u81c3\u80bf\u7684 Web \u5e94\u7528\u7a0b\u5e8f\uff0c\u5373\u4f7f\u5728\u5bbd\u5e26\u8fde\u63a5\u4e0a\uff0c\u4e5f\u9700\u8981\u51e0\u79d2\u949f\u624d\u80fd\u663e\u793a\u4e00\u4e2a\u7b80\u5355\u7684\u5217\u8868\uff1b\u4ee5\u6211\u4eec\u671f\u671b\u7684\u5343\u5206\u4e4b\u4e00\u901f\u5ea6\u5904\u7406\u6570\u636e\u7684\u7a0b\u5e8f\u3002\u8f6f\u4ef6\u6ede\u540e\u4e14\u7f13\u6162\u2014\u2014\u800c\u4e14\u60c5\u51b5\u51e0\u4e4e\u6ca1\u6709\u6539\u5584\u7684\u8ff9\u8c61\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\u6211\u76f8\u4fe1\u4e3b\u8981\u539f\u56e0\u662f\u6211\u4eec\u5927\u591a\u6570\u5728 2000 \u5e74\u4e4b\u540e\u5f00\u59cb\u7f16\u7a0b\u7684\u4eba\u4ece\u672a\u5b66\u4f1a\u5982\u4f55\u5408\u7406\u4f7f\u7528\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u7684\u8ba1\u7b97\u8d44\u6e90\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4eec\u7684\u5927\u90e8\u5206\u57f9\u8bad\u90fd\u6559\u4f1a\u4e86\u6211\u4eec\u5ffd\u89c6\u7535\u8111\uff01\u5c3d\u7ba1\u6211\u4eec\u7684\u5de5\u4f5c\u8868\u9762\u4e0a\u662f\u521b\u5efa\u7a0b\u5e8f\uff0c\u8ba9\u7528\u6237\u53ef\u4ee5\u7528\u4ed6\u4eec\u7684\u8ba1\u7b97\u673a\u505a\u4e8b\uff0c\u4f46\u6211\u4eec\u66f4\u5f3a\u8c03\u5f00\u53d1\u8fc7\u7a0b\u548c\u9762\u5411\u5f00\u53d1\u7684\u5173\u6ce8\u70b9\uff0c\u800c\u4e0d\u662f\u6700\u7ec8\u7684\u7528\u6237\u4ea7\u54c1\u3002 SICP \u4e2d\u6709\u4e00\u53e5\u6211\u8ba4\u4e3a\u662f\u5bf9\u95ee\u9898\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u603b\u7ed3\uff1a\u201c\u7a0b\u5e8f\u5fc5\u987b\u662f\u4e3a\u4e86\u4eba\u4eec\u9605\u8bfb\u800c\u7f16\u5199\u7684\uff0c\u800c\u53ea\u662f\u987a\u4fbf\u8ba9\u673a\u5668\u6267\u884c\u3002\u201d\u8bb8\u591a\u7a0b\u5e8f\u5458\u53d1\u73b0\u8fd9\u53e5\u8bdd\u5f88\u660e\u667a\u4e14\u9f13\u821e\u4eba\u5fc3\uff0c\u4f46\u7528\u6237\u5bf9\u9605\u8bfb\u7a0b\u5e8f\u4e0d\u611f\u5174\u8da3\uff0c\u4ed6\u4eec\u5bf9\u5feb\u901f\u6267\u884c\u7a0b\u5e8f\u611f\u5174\u8da3\u3002\u5982\u679c\u6211\u4eec\u4ee5\u4e00\u79cd\u201c\u5076\u7136\u201d\u53ef\u6267\u884c\u7684\u65b9\u5f0f\u7f16\u5199\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u5f97\u5f88\u5feb\u3002\u8ba1\u7b97\u673a\u4e0d\u662f\u4e00\u4e2a\u53ef\u4ee5\u62bd\u8c61\u5316\u548c\u5ffd\u7565\u7684\u5b9e\u73b0\u7ec6\u8282\u2014\u2014\u5b83\u662f\u89e3\u51b3\u65b9\u6848\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\u3002\u4e00\u4e2a\u5728\u8bbe\u8ba1\u4e2d\u6ca1\u6709\u4e3a\u76ee\u6807\u673a\u5668\u7559\u51fa\u7a7a\u95f4\u7684\u7a0b\u5e8f\u5c06\u4e0d\u53ef\u907f\u514d\u5730\u6bd4\u4e00\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u5f97\u6162\u3002\u4eba\u4eec\u8fc1\u79fb\u5230\u66f4\u5feb\u7684\u7a0b\u5e8f\u662f\u56e0\u4e3a\u66f4\u5feb\u7684\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u505a\u66f4\u591a\u7684\u4e8b\u60c5\u3002\u770b\u770b\u8fc7\u53bb\u7684\u4f8b\u5b50\uff1a\u6700\u521d\u7684\u57fa\u4e8e Python \u7684 bittorrent \u5ba2\u6237\u7aef\u5f88\u5feb\u88ab\u901f\u5ea6\u66f4\u5feb\u7684 uTorrent \u53d6\u4ee3\uff1b Subversion \u5931\u53bb\u4e86\u4f5c\u4e3a\u4e3b\u8981 VCS \u7684\u5730\u4f4d\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a Git \u4e2d\u7684\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u5feb\u5f97\u591a\uff1b\u6539\u8fdb\u7684 grep \u5b9e\u7528\u7a0b\u5e8f ack \u662f\u7528 Perl \u7f16\u5199\u7684\uff0c\u4f46\u968f\u7740\u901f\u5ea6\u66f4\u5feb\u7684 silversurfer \u548c ripgrep \u7684\u6d41\u884c\u5ea6\u8d8a\u6765\u8d8a\u4f4e\uff1b\u57fa\u4e8e Electron \u7684\u7f16\u8f91\u5668 Atom \u51e0\u4e4e\u88ab VSCode \u53d6\u4ee3\uff0cVSCode \u4e5f\u662f\u57fa\u4e8e Electron \u7684\uff0c\u4f46\u901f\u5ea6\u66f4\u5feb\uff1b Chrome \u4e4b\u6240\u4ee5\u6210\u4e3a\u6d4f\u89c8\u5668\u4e4b\u738b\uff0c\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u56e0\u4e3a\u5b83\u6bd4 Firefox \u548c Internet Explorer \u5feb\u5f97\u591a\u3002\u6700\u5feb\u7684\u9009\u62e9\u6700\u7ec8\u83b7\u80dc\u3002\u5982\u679c\u7ade\u4e89\u5bf9\u624b\u51fa\u73b0\u5e76\u4e14\u901f\u5ea6\u63d0\u9ad8\u4e86\u5341\u500d\uff0c\u60a8\u7684\u9879\u76ee\u4f1a\u5b58\u6d3b\u4e0b\u6765\u5417\uff1f\u53cd\u5bf9\u5728\u7a0b\u5e8f\u8bbe\u8ba1\u9636\u6bb5\u8003\u8651\u8ba1\u7b97\u673a\u7684\u4e00\u4e2a\u5e38\u89c1\u8bba\u70b9\u662f\u201c\u8fc7\u65e9\u4f18\u5316\u662f\u4e07\u6076\u4e4b\u6e90\u201d\u3002\u7f13\u5b58\u53cb\u597d\u6027\u3001\u5206\u652f\u9884\u6d4b\u548c\u5e76\u884c\u6027\u7b49\u4e3b\u9898\u88ab\u6807\u8bb0\u4e3a\u201c\u4f18\u5316\u201d\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b83\u4eec\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u201c\u5408\u7406\u4f7f\u7528\u201d\u3002\u6211\u4eec\u7528\u6237\u7684\u8ba1\u7b97\u673a\u6709\u8d44\u6e90\uff0c\u6211\u4eec\u5e94\u8be5\u4ee5\u4ed6\u4eec\u4f7f\u7528\u8fd9\u4e9b\u8d44\u6e90\u7684\u65b9\u5f0f\u8bbe\u8ba1\u6211\u4eec\u7684\u7a0b\u5e8f\u3002\u4ee5 CPU \u7f13\u5b58\u4e3a\u4f8b\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u663e\u793a\u4e86\u826f\u597d\u7684\u7f13\u5b58\u4f7f\u7528\u5bf9\u6027\u80fd\u7684\u5de8\u5927\u5f71\u54cd\u662f\u5bf9\u77e9\u9635\u7684\u5143\u7d20\u9010\u884c\u548c\u9010\u5217\u6c42\u548c\uff08\u8fd9\u662f\u4e00\u4e2a Rust Playground \u94fe\u63a5\uff0c\u6f14\u793a\u4e86\u8fd9\u4e00\u70b9\uff09\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u9010\u884c\u6bd4\u9010\u5217\u5feb 12-16 \u500d\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709\u76f8\u540c\u7684 Big-O \u590d\u6742\u5ea6\u3002\u6027\u80fd\u7684\u5dee\u5f02\u4e0d\u662f\u7531\u4e8e\u62bd\u8c61\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u56e0\u7d20\uff0c\u800c\u662f\u7531\u4e8e\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u7684\u56e0\u7d20\uff1a\u66f4\u597d\u5730\u5229\u7528 CPU \u7f13\u5b58\u3002\u9010\u884c\u65b9\u6cd5\u5728\u7f13\u5b58\u4e2d\u5e26\u6765 16 \u4e2a\u6d6e\u70b9\u6570\uff0c\u5e76\u5728\u8fd4\u56de\u5185\u5b58\u4e4b\u524d\u4f7f\u7528\u5b83\u4eec\uff1b\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u9010\u5217\u65b9\u6cd5\u4e5f\u5e26\u6765\u4e86 16 \u4e2a\u6d6e\u70b9\u6570\uff0c\u4f46\u5728\u8fd4\u56de RAM \u4e4b\u524d\u53ea\u4f7f\u7528\u5176\u4e2d\u4e00\u4e2a\uff0c\u7559\u4e0b 15 \u4e2a\u672a\u4f7f\u7528\u7684\u503c\u2014\u2014\u8fd9\u662f 94% \u7684\u6d6a\u8d39\u3002\u5173\u4e8e\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u5e94\u8be5\u6ce8\u610f\u4e00\u4e9b\u4e8b\u60c5\u3002\u9996\u5148\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u4e3a\u6211\u4eec\u4f18\u5316\u4ee3\u7801\u3002\u6211\u4eec\u7ecf\u5e38\u542c\u5230\u7a0b\u5e8f\u5458\u65e0\u6cd5\u51fb\u8d25\u4f18\u5316\u7f16\u8bd1\u5668\uff0c\u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u505a\u5230\u4e86\u3002\u6211\u4eec\u53ea\u9700\u8981\u66f4\u6539\u5faa\u73af\u7684\u987a\u5e8f\uff0c\u4f46\u662f\u4f7f\u7528 LLVM \u540e\u7aef\u7684 Rust \u7f16\u8bd1\u5668\u6ca1\u6709\u8fd9\u6837\u505a\u3002\u4e5f\u8bb8\u8457\u540d\u7684\u8db3\u591f\u806a\u660e\u7684\u7f16\u8bd1\u5668\u4f1a\uff0c\u4f46\u5728\u53ef\u9884\u89c1\u7684\u672a\u6765\uff0c\u4ee5\u4e00\u79cd\u53ef\u4ee5\u6709\u6548\u5904\u7406\u7684\u65b9\u5f0f\u6392\u5217\u6570\u636e\u5c06\u4e0d\u662f\u7f16\u8bd1\u5668\u7684\u5de5\u4f5c\u2014\u2014\u800c\u662f\u6211\u4eec\u7684\u5de5\u4f5c\u3002\u5176\u6b21\uff0c\u5982\u679c\u5728\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u4e2d\u4e0d\u8003\u8651\u5b9e\u9645\u786c\u4ef6\uff0c\u6211\u4eec\u5c31\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u52a0\u901f\u3002\u6211\u4eec\u4e0d\u4f1a\u4e3a\u62bd\u8c61\u7684\u3001\u7406\u60f3\u5316\u7684\u6216\u865a\u6784\u7684\u673a\u5668\u7f16\u5199\u4ee3\u7801\uff1a\u6211\u4eec\u7f16\u5199\u5728\u6211\u4eec\u7528\u6237\u7684 CPU \u4e0a\u8fd0\u884c\u7684\u4ee3\u7801\u2014\u2014Intel\u3001AMD\u3001Apple \u7b49\u3002\u8fd9\u4e9b CPU \u6709\u7f13\u5b58\uff0c\u7f16\u5199\u4e0e\u786c\u4ef6\u800c\u4e0d\u662f\u53cd\u5bf9\u5b83\u3002\u7b2c\u4e09\uff0c16 \u500d\u7684\u52a0\u901f\u53ef\u80fd\u53ea\u662f\u590d\u6742\u6027\u7406\u8bba\u4e2d\u7684\u4e00\u4e2a\u5e38\u6570\u56e0\u7d20\uff0c\u4f46\u5bf9\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u662f\u7a0b\u5e8f\u4f7f\u7528\u6109\u5feb\u548c\u6781\u5ea6\u4ee4\u4eba\u6cae\u4e27\u4e4b\u95f4\u7684\u533a\u522b\u3002\u6216\u8005\u5c0f\u989d AWS \u8d26\u5355\u548c\u5927\u989d AWS \u8d26\u5355\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u6700\u540e\uff0c\u6211\u4eec\u4e0d\u5e94\u8be5\u8ba4\u4e3a\u8fd9\u662f\u4e00\u79cd\u4f18\u5316\uff1a\u6211\u4eec\u6b63\u5728\u5229\u7528\u90a3\u91cc\u7684\u8d44\u6e90\u3002\u7528\u6237\u652f\u4ed8\u4e86\u4ed6\u4eec CPU \u7684\u5168\u4ef7\uff0c\u8ba9\u6211\u4eec\u5c1d\u8bd5\u7ed9\u4ed6\u4eec\u7269\u6709\u6240\u503c\u3002\n\u5728\u6211\u770b\u6765\uff0c\u4f18\u5316\u5c06\u5c1d\u8bd5\u5728\u53ef\u4ee5\u5bb9\u7eb3 16 \u4e2a\u7684\u7f13\u5b58\u884c\u4e2d\u6253\u5305 17 \u4e2a\u6d6e\u70b9\u6570\u3002\u5728\u9879\u76ee\u5f00\u59cb\u65f6\u8fd9\u6837\u505a\u786e\u5b9e\u4e3a\u65f6\u8fc7\u65e9\u3002\u6211\u5e0c\u671b\u5f88\u591a\u4eba\u4f1a\u60f3\u5230\u90a3\u53e5\u53e4\u8001\u7684\u683c\u8a00\u201c\u8ba9\u5b83\u5de5\u4f5c\uff0c\u8ba9\u5b83\u6b63\u786e\uff0c\u8ba9\u5b83\u5feb\u901f\u201d\uff0c\u5e76\u8ba4\u4e3a\u5728\u6211\u4eec\u7b2c\u4e00\u6b21\u7f16\u5199\u7a0b\u5e8f\u65f6\u5c06\u673a\u5668\u8003\u8651\u5728\u5185\u662f\u4e13\u6ce8\u4e8e\u201c\u8ba9\u5b83\u5feb\u901f\u201d\uff0c\u7136\u540e\u6211\u4eec\u624d\u5f00\u59cb\u201c\u8ba9\u5b83\u8d77\u4f5c\u7528\u201d\u3002\u6211\u660e\u767d\u8fd9\u4e00\u70b9\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u6309\u987a\u5e8f\u505a\u4e8b\u60c5\uff0c\u8ba9\u6211\u4eec\u7684\u7a0b\u5e8f\u5de5\u4f5c\u7136\u540e\u4f7f\u5b83\u6b63\u786e\uff0c\u5f53\u9700\u8981\u52a0\u5feb\u901f\u5ea6\u65f6\uff0c\u6211\u4eec\u7ecf\u5e38\u610f\u8bc6\u5230\u6211\u4eec\u7684\u8bbe\u8ba1\u5bf9\u6211\u4eec\u4e0d\u5229\uff0c\u6211\u4eec\u5fc5\u987b\u64a4\u6d88/\u91cd\u505a\u5f88\u591a\u6211\u4eec\u6240\u505a\u7684\u5de5\u4f5c\u662f\u4e3a\u4e86\u4f7f\u7a0b\u5e8f\u6709\u6548\u5e76\u4f7f\u5176\u6b63\u786e\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u4ee5\u9762\u5411\u884c\u7684\u65b9\u5f0f\u6392\u5217\u6211\u4eec\u7684\u6570\u636e\uff0c\u5373\u7ed3\u6784\u6570\u7ec4\uff0c\u6211\u4eec\u610f\u8bc6\u5230\u4e3a\u4e86\u52a0\u901f\u6211\u4eec\u7684\u7a0b\u5e8f\uff0c\u6211\u4eec\u9700\u8981\u9762\u5411\u5217\u7684\u5b58\u50a8\uff0c\u5373\u6570\u7ec4\u7ed3\u6784\u3002\u5c06\u7a0b\u5e8f\u4ece\u4e00\u79cd\u5f62\u5f0f\u66f4\u6539\u4e3a\u53e6\u4e00\u79cd\u5f62\u5f0f\u662f\u4e00\u9879\u91cd\u5927\u7684\u91cd\u65b0\u67b6\u6784\u9879\u76ee\uff0c\u5982\u679c\u622a\u6b62\u65e5\u671f\u4e34\u8fd1\uff0c\u5e76\u4e14\u5e02\u573a\u4e0a\u7684\u8f6f\u4ef6\u66f4\u6162\uff0c\u683c\u8a00\u53d8\u6210\u201c\u8ba9\u5b83\u5de5\u4f5c\uff0c\u8ba9\u5b83\u6b63\u786e\uff0c\u68a6\u60f3\u8ba9\u5b83\u53d8\u5f97\u66f4\u5feb\u201d\u3002\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u7f16\u5199\u5728\u73b0\u4ee3\u673a\u5668\u4e0a\u8fd0\u884c\u5f97\u76f8\u5f53\u5feb\u7684\u4ee3\u7801\u5462\uff1f\u6211\u4eec\u5f00\u59cb\u517b\u6210\u4e60\u60ef\uff0c\u4e0d\u4ec5\u8981\u8003\u8651\u6211\u4eec\u7f16\u5199\u7684\u6a21\u578b\uff0c\u8fd8\u8981\u8003\u8651\u673a\u5236\uff1a\u8868\u793a\u6570\u636e\u7ed3\u6784\u9700\u8981\u591a\u5c11\u5b57\u8282\uff1f\u662f\u5426\u6709\u5f88\u591a\u6307\u9488\u4f1a\u5bfc\u81f4\u7f13\u5b58\u672a\u547d\u4e2d\uff1f\u6570\u636e\u7684\u7ec4\u7ec7\u65b9\u5f0f\u662f\u5426\u4f7f\u5206\u652f\u9884\u6d4b\u7ecf\u5e38\u6b63\u786e\uff1f\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u5206\u5272\u5de5\u4f5c\u4f1a\u5f88\u5bb9\u6613\u5417\uff1f\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4ece\u6279\u6b21\u548c\u7cfb\u7edf\u7684\u89d2\u5ea6\u5f00\u59cb\u601d\u8003\u3002\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4e3a\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u4e00\u4e2a\u5206\u8bcd\u5668\uff1b\u5982\u679c\u6211\u4eec\u5c06\u4ee4\u724c\u89c6\u4e3a\u5b8c\u5168\u72ec\u7acb\u7684\u6570\u636e\u7247\u6bb5\uff0c\u5219\u6bcf\u4e2a\u4ee4\u724c\u90fd\u9700\u8981\u643a\u5e26\u4e0e\u4ee4\u724c\u5173\u8054\u7684\u5b57\u7b26\u4e32\uff08\u4f8b\u5982\uff0cstruct Token { tag: Tag, text: String, ... }\uff09\u3002\u76f8\u53cd\uff0c\u5982\u679c\u6211\u4eec\u5c06\u6807\u8bb0\u5316\u89c6\u4e3a\u4e00\u4e2a\u7cfb\u7edf\u5e76\u5c06\u6807\u8bb0\u89c6\u4e3a\u8be5\u7cfb\u7edf\u7684\u4f9d\u8d56\u9879\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u6807\u8bb0\u751f\u6210\u5668\u4e2d\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u4e32\u6c60\uff0c\u5e76\u4e14\u6807\u8bb0\u53ef\u4ee5\u5728\u6c60\u4e2d\u4e3a\u5176\u5173\u8054\u7684\u6587\u672c\u521b\u5efa\u4e00\u4e2a\u7d22\u5f15\u3002\u8fd9\u901a\u8fc7\u4e0d\u5fc5\u590d\u5236\u5b57\u7b26\u4e32\u6765\u8282\u7701\u5185\u5b58\u5e76\u4f7f\u4ee4\u724c\u66f4\u5c0f\uff0c\u8fd9\u610f\u5473\u7740\u53ef\u4ee5\u5728\u4e00\u4e2a\u7f13\u5b58\u884c\u4e2d\u5bb9\u7eb3\u66f4\u591a\u3002\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u662f\u4e00\u79cd\u5173\u6ce8\u8fd9\u4e9b\u95ee\u9898\u7684\u7f16\u7a0b\u65b9\u6cd5\u3002\u76ee\u524d\uff0c\u5927\u591a\u6570\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u4ece\u4e1a\u8005\u90fd\u5728\u6e38\u620f\u884c\u4e1a\u5de5\u4f5c\uff0c\u4f46\u8fd9\u4e9b\u89c1\u89e3\u5728\u5404\u4e2a\u9886\u57df\u90fd\u5f88\u6709\u4ef7\u503c\u3002 \uff08\u4f8b\u5982\uff0cAndy Kelly \u5728 Zig 0.8.0 \u53d1\u884c\u8bf4\u660e\u4e2d\u9ad8\u5ea6\u8bc4\u4ef7\u4e86\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\u3002\uff09\u5982\u679c\u60a8\u4ece\u672a\u63a5\u89e6\u8fc7\u9762\u5411\u6570\u636e\u7684\u8bbe\u8ba1\uff0c\u90a3\u53ef\u80fd\u4f1a\u6709\u70b9\u9707\u60ca\u2014\u2014\u5f88\u591a\u5e38\u89c1\u7684\u7f16\u7a0b\u7684\u667a\u6167\uff08\u4f8b\u5982\uff0c\u9c8d\u52c3\u53d4\u53d4\u7684 SOLID \u539f\u5219\uff09\u88ab\u51b7\u9177\u800c\u8270\u96be\u7684\u5de5\u7a0b\u6240\u56de\u907f\u548c\u53d6\u4ee3\u3002\u5b83\u770b\u8d77\u6765\u5f88\u53ef\u6015\u800c\u4e14\u4e0e\u4f17\u4e0d\u540c\uff0c\u4f46\u5982\u679c\u6211\u4eec\u8981\u4ea4\u4ed8\u7684\u8f6f\u4ef6\u901f\u5ea6\u4e0d\u4f1a\u6bd4\u5b83\u6162\u51e0\u4e2a\u6570\u91cf\u7ea7\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u9700\u8981\u505a\u7684\u3002", "note_en": "The computers sitting on our desks are incomprehensibly fast. They can perform more operations in one second than a human could in one hundred years. We live in an era of CPUs that can perform billions of instructions per second, tens of billions if we take multi-cores into account, of memory that can transfer data to the CPU at hundreds of gigabytes per second, of disks that support streaming reads of gigabytes per second. This era of incredibly fast hardware is also the era of programs that take tens of seconds to start from an SSD or NVMe disk; of bloated web applications that take many seconds to show a simple list, even on a broadband connection; of programs that process data at a thousandth of the speed we should expect. Software is laggy and sluggish \u2014 and the situation shows little signs of improvement. Why is that?\n I believe that the main reason is that most of us who started programming after, say the year 2000, have never learned how to make  reasonable use of the computational resources at our disposal. In fact, most of our training has taught us to ignore the computer!\n Although our job is ostensibly to create programs that let users  do stuff with their computers, we place a greater emphasis on the development process and dev-oriented concerns than on the final user product. SICP contains a quote that I find to be a good summarization of the problem: \u201cprograms must be written for people to read, and only incidentally for machines to execute.\u201d Many programmers find that quote wise and inspiring, but users are not interested in reading programs, they\u2019re interested in executing them, fast. We can\u2019t make programs that run fast if we write them in a way that is only \u201cincidentally\u201d executable. The computer is not an implementation detail that can be abstracted away and ignored \u2014 it\u2019s an integral part of the solution. A program that makes no room for the target machine in its design will inevitably run slower than one that does.\n People migrate to faster programs because faster programs allow users to do more. Look at examples from the past: the original Python-based bittorrent client was quickly overtaken by the much faster uTorrent; Subversion lost its status as the premier VCS to Git in large part because every operation was so much faster in Git; the improved grep utility, ack, is written in Perl and waning in popularity to the faster silversurfer and ripgrep; the Electron-based editor Atom has been all but replaced by VSCode, also Electron-based, but which is faster; Chrome became the king of browsers largely because it was much faster than Firefox and Internet Explorer. The fastest option eventually wins. Would your project survive if a competitor came along and was ten times faster?\n A common argument against taking the computer into account during the design phase of a program is \u201cpremature optimzation is the root of all evil.\u201d Topics such as cache-friendliness, branch prediction, and parallelism are labeled as \u201coptimization\u201d, but really they should be labeled as \u201creasonable use\u201d. Our users&#39; computers have resources and we should design our programs in a way that they use those resources.\n Take the CPU cache for example. A simple program that shows what a massive impact good cache usage can have on performance is to sum the elements of a matrix row-by-row vs. column-by-column (here\u2019s a  Rust Playground link that demonstrates this). In this example, the row-by-row is about 12\u201316 times faster than the column-by-column, even though they have same Big-O complexity. The difference in performance is not due to an abstract, computer science factor, but due to a very concrete one: better use of the CPU cache. The row-by-row approach brings 16 floats in cache and uses them all before going back to memory; by contrast the column-by-column approach also brings 16 floats, but only uses one of them before going back to RAM, leaving 15 values unused \u2014 that\u2019s 94% waste.\n   There are a few things we should note about this example. First, the compiler did not optimize the code for us. We often hear that programmers can\u2019t beat an optimizing compiler, but in this case we did. We only needed to change the order of the loops, but the Rust compiler which uses the LLVM backend, did not do it. Maybe the famed sufficiently smart compiler would, but for the foreseeable future, arranging data in a way that it can be processed efficiently will not be the compiler\u2019s job \u2014 it\u2019ll be ours. Second, we can\u2019t get that speed-up without taking the actual hardware into account in our solution. We do not write code for abstract, idealized, or fictitious machines: we write code that runs on the CPUs of our users \u2014 Intel, AMD, Apple, etc. These CPUs have caches and it\u2019s perfectly reasonable to write code that works well with the hardware rather than against it. Third, a 16x speed-up may only be a constant factor in complexity theory, but to a user it can be the difference between a program being pleasant to use and being extremely frustrating. Or the difference between a small and large AWS bill. And finally, we should not consider this to be an optimization: we\u2019re making use of a resource that\u2019s there. The users paid the full price of their CPU, let\u2019s try and give them their money\u2019s worth.\n In my mind, an optimization would be trying to pack 17 floats in a cache line that can fit 16. Doing this at the beginning of the project would indeed be premature.\n I expect that many will think of the old aphorism \u201cmake it work, make it right, make it fast\u201d and argue that taking the machine into account when first writing the program is focusing on \u201cmake it fast\u201d before we even got to \u201cmake it work\u201d. I get that, but if we do things in order and make our program work and then make it right, when it\u2019s time to make it fast, we often realize that our design works against us and we have to undo/redo a lot of the work we did to make the program work and to make it right.\n For example, we may have arranged our data in a row-oriented fashion aka array of structs and we realize that in order to speed up our program we would need column-oriented storage, aka struct of arrays. Changing a program from one form to the other is a major re-architecture project, and one that may not be feasible if there\u2019s a deadline approaching and that\u2019s more slow software on the market and the aphorism becomes \u201cmake it work, make it right, dream of making it fast\u201d.\n So how do we write code that runs reasonably quickly on modern machines? We start by getting into the habit of not just thinking about the model of what we write, but also the mechanics: how many bytes are needed to represent a data structure? Are there many pointers that will cause cache misses? Is the data organized in a way that the branch prediction will be right often? Would it be easy to slice the work among multiple threads?\n Another way is to start thinking in terms of batches and systems. Suppose we are writing a tokenizer for a programming language; if we think about tokens as completely independent pieces of data, each one needs to carry the string associated with the token (e.g.,  struct Token { tag: Tag, text: String, ... }). If instead we think of tokenization as a system and of tokens as dependents of this system, we can create a string pool in the tokenizer and tokens can have an index into the pool for their associated text. This saves memory by not having to duplicate strings and makes the tokens smaller, which means more can fit in one cache line.\n Data-orienteddesign is anapproach to programming that concerns itself with such questions. At the moment, most data-oriented design practitioners work in the game industry, but the insights are valuable in every field. (For example, Andy Kelly spoke highly of data-oriented design in the  Zig 0.8.0 release notes.) If you\u2019ve never been exposed to data-oriented design, it can be a bit of a shock \u2014 a lot of the common  wisdom of programming (e.g., Uncle Bob\u2019s SOLID principles) is eschewed and replaced with cold, hard engineering. It looks scary and different, but it\u2019s what we need to do if we are to deliver software that is not orders of magnitude slower than it can be.", "posttime": "2021-08-08 10:54:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5229\u7528\u8ba1\u7b97\u673a,reasonable,\u7a0b\u5e8f", "title": "\u5408\u7406\u5229\u7528\u8ba1\u7b97\u673a\u8d44\u6e90", "title_en": "Making Reasonable Use of Computer Resources", "transed": 1, "url": "https://vfoley.xyz/reasonable-use/", "via": "", "real_tags": ["\u5229\u7528\u8ba1\u7b97\u673a", "\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "a33eace70f80a409cee7f47989938014.jpg", "infoid": 1072055, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u72ec\u7acb\u524d\u4e00\u5e74\uff0c\u5927\u9646\u4f1a\u8bae\u521b\u5efa\u4e86\u90ae\u653f\u670d\u52a1\u2014\u2014\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u653f\u5e9c\u673a\u6784\uff0c\u800c\u662f\u4f5c\u4e3a\u82f1\u56fd\u90ae\u653f\u7cfb\u7edf\u7684\u51e0\u4e2a\u65b0\u7684\u72ec\u7acb\u66ff\u4ee3\u65b9\u6848\u4e4b\u4e00\u3002\u4e00\u4e2a\u4f18\u52bf\uff1a\u8fd9\u5141\u8bb8\u7f8e\u56fd\u6301\u4e0d\u540c\u653f\u89c1\u8005\u5728\u6ca1\u6709\u5f53\u5c40\u62e6\u622a\u4ed6\u4eec\u7684\u4fe1\u4ef6\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u4ea4\u6d41\u3002\u5357\u65b9\u66b4\u6c11\u6ca1\u6536\u5e76\u70e7\u6bc1\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\u7684\u5e9f\u5974\u4e3b\u4e49\u6750\u6599\u3002\u90ae\u653f\u5c40\u957f\u62d2\u7edd\u5e72\u9884\uff0c\u5236\u5b9a\u4e86\u4e00\u9879\u4e8b\u5b9e\u4e0a\u7684\u653f\u7b56\uff0c\u5141\u8bb8\u5728\u5974\u96b6\u5dde\u5ba1\u67e5\u6b64\u7c7b\u6587\u732e\u3002\u81ea\u7531\u4e3b\u4e49\u5e9f\u5974\u4e3b\u4e49\u8005 Lysander Spooner \u5efa\u7acb\u4e86\u79c1\u4eba\u7684 American Letter Mail Co.\u3002\u653f\u5e9c\u7684\u53cd\u5e94\u662f\u53d6\u7f14\u5b83\uff0c\u5e76\u5728 1851 \u5e74\u5b9e\u9a8c\u7ed3\u675f\u3002\u5185\u6218\u5f00\u59cb\uff0c\u8054\u90a6\u548c\u90a6\u8054\u90fd\u91c7\u7528\u4e86\u81ea\u5df1\u7684\u90ae\u653f\u5ba1\u67e5\u5f62\u5f0f\u3002\u90ae\u653f\u5c40\u957f\u82b1\u4e86\u4e00\u5e74\u65f6\u95f4\u62d2\u7edd\u6295\u9012\u88ab\u8ba4\u4e3a\u4e0d\u5fe0\u4e8e\u5de5\u4f1a\u4e8b\u4e1a\u7684\u6587\u4ef6\u3002\u5eb7\u65af\u6258\u514b\u6cd5\u6848\u89c4\u5b9a\uff0c\u6545\u610f\u90ae\u5bc4\u6216\u63a5\u6536\u4efb\u4f55\u201c\u80ae\u810f\u7684\u4e66\u7c4d\u3001\u5c0f\u518c\u5b50\u3001\u56fe\u7247\u3001\u7eb8\u5f20\u3001\u4fe1\u4ef6\u3001\u6587\u5b57\u3001\u5370\u5237\u54c1\u6216\u5176\u4ed6\u4e0d\u96c5\u7684\u51fa\u7248\u7269\u201d\uff0c\u4ee5\u53ca\u4efb\u4f55\u907f\u5b55\u836f\u3001\u4efb\u4f55\u5815\u80ce\u836f\u6216\u4efb\u4f55\u6709\u5173\u83b7\u53d6\u6216\u4f7f\u7528\u907f\u5b55\u836f\u5177\u6216\u5815\u80ce\u836f\u3002\u6700\u9ad8\u6cd5\u9662\u652f\u6301\u653f\u5e9c\u7981\u6b62\u90ae\u5bc4\u201c\u5173\u4e8e\u5f69\u7968\u7684\u901a\u544a\u201d\u7684\u6743\u5229\u2014\u2014\u5e76\u4e14\uff0c\u53ea\u8981\u6709\u6388\u6743\uff0c\u5c31\u53ef\u4ee5\u6253\u5f00\u548c\u68c0\u67e5\u5305\u88f9\u4ee5\u627e\u5230\u6b64\u7c7b\u6750\u6599\u3002\u8b66\u5bdf\u902e\u6355\u4e86\u81ea\u7531\u4e3b\u4e49\u8bb0\u8005\u6469\u897f\u00b7\u54c8\u66fc\u3001\u57c3\u5fb7\u6e29\u00b7C\u00b7\u6c83\u514b\u548c\u4e54\u6cbb\u00b7\u54c8\u66fc\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53d1\u8868\u548c\u90ae\u5bc4\u53cd\u5bf9\u5a5a\u5185\u5f3a\u5978\u7684\u5973\u6743\u4e3b\u4e49\u8bba\u70b9\u3002\u6839\u636e\u5eb7\u65af\u6258\u514b\u6cd5\u6848\uff0c\u4f5c\u8005\u5bf9\u6b64\u7c7b\u653b\u51fb\u7684\u63cf\u8ff0\u88ab\u89c6\u4e3a\u6deb\u79fd\u3002\n\u7f8e\u56fd\u8fdb\u5165\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u540e\uff0c\u5a01\u5c14\u900a\u653f\u5e9c\u4e25\u5389\u6253\u51fb\u53cd\u6218\u3001\u53cd\u5f81\u6587\u3002\u5728\u65e0\u653f\u5e9c\u4e3b\u4e49\u6742\u5fd7\u300a\u5730\u7403\u6bcd\u4eb2\u300b\u7684\u6848\u4f8b\u4e2d\uff0c\u653f\u5e9c\u4e0d\u4ec5\u7981\u6b62\u90ae\u5bc4\u6750\u6599\u2014\u2014\u5b83\u8fd8\u902e\u6355\u4e86\u7f16\u8f91\u827e\u739b\u00b7\u6208\u5fb7\u66fc\uff0c\u7f6a\u540d\u662f\u201c\u9634\u8c0b\u8bf1\u4f7f\u4eba\u4eec\u4e0d\u6ce8\u518c\u201d\u53c2\u52a0\u9009\u79c0\uff0c\u76d1\u7981\u5979\uff0c\u5e76\u6700\u7ec8\u5c06\u5979\u9a71\u9010\u51fa\u5883\u3002\u653f\u5e9c\u62e6\u622a\u4e86\u7a0e\u52a1\u62b5\u6297\u8005 Vivien Kellems\uff08\u7f57\u65af\u798f\u653f\u5e9c\u7684\u8457\u540d\u6279\u8bc4\u8005\uff09\u7684\u56fd\u9645\u901a\u4fe1\uff0c\u5e76\u5c06\u5176\u6cc4\u9732\u7ed9\u4e13\u680f\u4f5c\u5bb6 Drew Pearson \u548c\u4f17\u8bae\u5458 John M. Coffee\uff08\u534e\u76db\u987f\u5dde\u6c11\u4e3b\u515a\uff09\u3002\u5496\u5561\u5728\u4f17\u8bae\u9662\u5730\u677f\u4e0a\u5f15\u7528\u4e86\u5b83\uff0c\u540c\u65f6\u6307\u8d23\u51ef\u52d2\u59c6\u65af\u98a0\u8986\u3002\u4e2d\u592e\u60c5\u62a5\u5c40\u5f00\u59cb\u9605\u8bfb\u7f8e\u56fd\u548c\u82cf\u8054\u4eba\u4e4b\u95f4\u7684\u4fe1\u4ef6\u3002\u79d8\u5bc6\u8ba1\u5212\u8fc5\u901f\u6269\u5c55\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u76d1\u89c6\u540d\u5355\uff0c\u8be5\u673a\u6784\u6bcf\u5e74\u975e\u6cd5\u6253\u5f00 13,000 \u591a\u5c01\u4fe1\u4ef6\uff0c\u76f4\u5230\u8be5\u884c\u52a8\u4e8e 1973 \u5e74\u7ed3\u675f\u3002\u5728\u95ee\u9898\u88ab\u8fd0\u9001\u5230\u5206\u9500\u5546\u4e4b\u524d\uff0c\u7528\u4e00\u79cd\u53eb\u505a Skatole \u7684\u5316\u5b66\u7269\u8d28\u9ed1\u8c79\uff0c\u4ece\u800c\u7ed9\u4ed6\u4eec\u201c\u4e00\u79cd\u6700\u96be\u95fb\u7684\u6c14\u5473\u201d\u3002\u8be5\u5c40\u653e\u5f03\u4e86\u8be5\u7279\u5b9a\u8ba1\u5212\uff0c\u4f46\u627e\u5230\u4e86\u5176\u4ed6\u65b9\u6cd5\u6765\u4f7f\u7528\u90ae\u4ef6\u9a9a\u6270\u66ff\u4ee3\u6587\u4ef6\u3002\u5728 9/11 \u540e\u70ad\u75bd\u88ad\u51fb\u4e4b\u540e\uff0c\u653f\u5e9c\u521b\u5efa\u4e86\u90ae\u4ef6\u9694\u79bb\u63a7\u5236\u548c\u8ddf\u8e2a\u7cfb\u7edf\uff0c\u4ee5\u6536\u96c6\u51e0\u4e4e\u6240\u6709\u5bc4\u5f80\u7f8e\u56fd\u7684\u90ae\u4ef6\u7684\u5916\u90e8\u4fe1\u606f\u3002\u4e00\u4f4d\u7f51\u7edc\u5b89\u5168\u4e13\u5bb6\u540e\u6765\u4e3a\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u603b\u7ed3\u4e86\u8be5\u8ba1\u5212\uff1a\u201c\u8ba9\u6211\u4eec\u8bb0\u5f55\u6bcf\u4e2a\u4eba\u7684\u90ae\u4ef6\uff0c\u4ee5\u4fbf\u5c06\u6765\u6211\u4eec\u53ef\u4ee5\u56de\u53bb\u770b\u770b\u4f60\u5728\u4e0e\u8c01\u4ea4\u6d41\u3002\u201d\u7f16\u8005\u6ce8\uff1a\u6211\u4eec\u9080\u8bf7\u8bc4\u8bba\u5e76\u8981\u6c42\u5b83\u4eec\u662f\u6587\u660e\u7684\u548c\u4e3b\u9898\u7684\u3002\u6211\u4eec\u4e0d\u5bf9\u8bc4\u8bba\u8fdb\u884c\u5ba1\u6838\u6216\u627f\u62c5\u4efb\u4f55\u8d23\u4efb\uff0c\u8fd9\u4e9b\u8bc4\u8bba\u5f52\u53d1\u8868\u8bc4\u8bba\u7684\u8bfb\u8005\u6240\u6709\u3002\u8bc4\u8bba\u4e0d\u4ee3\u8868 Reason.com \u6216 Reason Foundation \u7684\u89c2\u70b9\u3002\u6211\u4eec\u4fdd\u7559\u968f\u65f6\u4ee5\u4efb\u4f55\u7406\u7531\u5220\u9664\u4efb\u4f55\u8bc4\u8bba\u7684\u6743\u5229\u3002\u4e3e\u62a5\u6ee5\u7528\u884c\u4e3a\u3002 \u201c\u79d8\u5bc6\u8ba1\u5212\u8fc5\u901f\u6269\u5c55\u5230\u4e00\u4e2a\u66f4\u5927\u7684\u76d1\u89c6\u540d\u5355\uff0c\u8be5\u673a\u6784\u6bcf\u5e74\u975e\u6cd5\u6253\u5f00 13,000 \u591a\u5c01\u4fe1\u4ef6\uff0c\u76f4\u5230\u8be5\u884c\u52a8\u4e8e 1973 \u5e74\u7ed3\u675f\u201d\n\u60a8\u5c06\u7a7a\u6c14\u5439\u5165\u5185\u90e8\uff0c\u5c06\u73bb\u7483\u7ea4\u7ef4\u6210\u50cf\u5de5\u5177\u63d2\u5165\u7f1d\u9699\u4e2d\uff0c\u6574\u4e2a\u5185\u5bb9\u5c31\u50cf\u5e73\u653e\u5728\u684c\u5b50\u4e0a\u4e00\u6837\u6613\u4e8e\u9605\u8bfb\u3002\u5982\u679c\u9876\u90e8\u88ab\u5de7\u5999\u5730\u5bc6\u5c01\uff0c\u5728\u4e24\u7aef\u7684\u6298\u53e0\u5904\u6233\u4e00\u4e2a\u7f29\u7565\u56fe\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5c0f\u6495\u88c2\u53e3\u63d2\u5165\u6210\u50cf\u7535\u7f06\u3002\u90a3\u662f\u5728 Bush/Bush Kreigswaffen \u63a2\u9669\u4e4b\u524d\u3002\u70ad\u75bd\u201c\u4e0d\u5e73\u7b49\u4f46\u9002\u5f53\u201d\u7684\u62a5\u590d\u53ef\u80fd\u4f7f X \u5c04\u7ebf\u548c\u4e2d\u5b50\u6fc0\u6d3b\u66f4\u5bb9\u6613\u83b7\u5f97\u8d44\u91d1\uff0c\u56e0\u4e3a\u53d1\u52a8\u6b66\u529b\u7684\u653f\u5ba2\u662f\u76f4\u63a5\u76ee\u6807\u3002\u4e0b\u6b21\u60a8\u6709\u673a\u4f1a\u6295\u7968\u53cd\u5bf9\u542f\u52a8\u6b66\u529b\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\u4e0d\u8fc7\uff0c\u6211\u4ecd\u5728\u7b49\u5f85\u201c\u81ea\u7531\u4e3b\u4e49\u8005\u7684\u5267\u900f\u6295\u7968\u201d\u8ba9\u4e00\u5207\u53d8\u5f97\u66f4\u597d\u3002\u8fc7\u53bb\u7684\u9009\u4e3e\u6bd4\u4ee5\u524d\u7684\u9009\u4e3e\u5c11\u3002 50 \u5e74\u5bf9\u4e8e\u4e00\u4e2a\u653f\u515a\u53ca\u5176\u610f\u8bc6\u5f62\u6001\u6765\u8bf4\u8db3\u4ee5\u6539\u53d8\u4e00\u4e2a\u56fd\u5bb6\u548c\u4e00\u4e2a\u4e16\u754c\uff0c\u6240\u4ee5\u5f88\u660e\u663e\u6709\u4eba\u505a\u5f97\u4e0d\u5bf9\u3002\u6211\u4eec\u771f\u7684\u9700\u8981\u5148\u77e5\u9053\uff0c\u7279\u6717\u666e\u4eca\u5929\u662f\u8d5e\u6210\u8fd8\u662f\u53cd\u5bf9\uff1f\u56e0\u4e3a\u8fd9\u91cc\u7684\u5927\u91cf\u8bc4\u8bba\u8005\u4f1a\u6548\u4eff\u3002\u662f\u7684\uff0c\u5c31\u50cf\u7279\u6717\u666e\u7b2c\u4e00\u6b21\u9650\u5236\u8fdb\u51fa\u9ad8\u65b0\u51a0\u75c5\u6bd2\u5730\u533a\u7684\u65c5\u884c\u4e00\u6837\uff0cTDS \u4eba\u7fa4\u62a8\u51fb\u4ed6\u6392\u5916\u3002\u4e16\u754c\u4e0a\u54ea\u91cc\u4f1a\u6709\u4eba\u666e\u904d\u8ba4\u4e3a\u7279\u6717\u666e\u53ef\u80fd\u662f\u4ec7\u5916\u8005\uff1f\u8fd9\u771f\u7684\u662f\u4e00\u4e2a\u75af\u72c2\u7684\u8c1c...... Drumpf \u4e25\u5389\u7684\u79fb\u6c11\u9650\u5236\u65e0\u7591\u4fc3\u6210\u4e86\u8fd9\u4e2a\u56fd\u5bb6\uff08\u9664\u4e86\u50cf\u7ebd\u7ea6\u8fd9\u6837\u7684\u84dd\u8272\u5dde\uff09\u707e\u96be\u6027\u7684\u5927\u6d41\u884c\u53cd\u5e94\u3002\n\u60f3\u60f3\u6240\u6709\u60f3\u8981\u8de8\u8d8a\u8fb9\u754c\u5e76\u5e2e\u52a9\u6211\u4eec\u4e0d\u582a\u91cd\u8d1f\u7684\u533b\u9662\u7684\u9ad8\u6280\u80fd\u58a8\u897f\u54e5\u533b\u751f\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u88ab\u6254\u8fdb\u4e86\u771f\u6b63\u7684\u96c6\u4e2d\u8425\u3002\u597d\u5427\uff0c\u4f60\u6765\u8fd9\u91cc\u662f\u4e3a\u4e86\u628a\u5de6\u6d3e\u548c\u6c11\u4e3b\u515a\u4eba\u5f53\u4f5c\u4e00\u5f20\u4ed8\u8d39\u6d77\u62a5\u6216\u53ea\u662f\u4e00\u53ea\u53ef\u601c\u7684\u6258\u5c3c\u889c\u5b50\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u4f60\u90fd\u662f\u4e00\u4e2a\u7b11\u8bdd\u3002\u4ed6\u4eec\u9519\u8fc7\u4e86\u4e00\u4e2a\u91cd\u8981\u4e14\u4ee3\u4ef7\u9ad8\u6602\u7684\u8ba1\u5212\u3002\u5728\u70ad\u75bd\u6050\u614c\u4e4b\u540e\uff0c\u90ae\u5c40\u5f00\u59cb\u5c06\u6240\u6709\u653f\u5e9c\u4fe1\u4ef6\u53d1\u9001\u5230\u4fc4\u4ea5\u4fc4\u5dde\u7684\u4e00\u4e2a\u8bbe\u65bd\uff0c\u7528\u8f90\u5c04\u6765\u6740\u6b7b\u4efb\u4f55\u53ef\u80fd\u6f5c\u4f0f\u5728\u91cc\u9762\u7684\u70ad\u75bd\u5b62\u5b50\u3002\u5b83\u975e\u5e38\u6602\u8d35\uff0c\u800c\u4e14\u4f1a\u51cf\u6162\u901a\u4fe1\u548c\u5305\u88f9\u7684\u901f\u5ea6\u3002\u81ea 2001 \u5e74\u4ee5\u6765\uff0c\u70ad\u75bd\u75c5\u4e00\u76f4\u6ca1\u6709\u901a\u8fc7\u90ae\u4ef6\u53d1\u9001\uff0c\u4f46\u4ed6\u4eec\u5c06\u7ee7\u7eed\u82b1\u8d39\u6570\u5341\u4ebf\u7f8e\u5143\u6765\u4fdd\u62a4\u4e00\u4e24\u4e2a\u653f\u5e9c\u5de5\u4f5c\u4eba\u5458\u514d\u53d7\u4f24\u5bb3\u3002\u611f\u8c22\u4e0a\u5e1d\uff0c\u653f\u5e9c\u786e\u4fdd\u6211\u65e0\u6cd5\u83b7\u5f97\u6216\u53d1\u9001\u53ef\u80fd\u5bf9\u6211\u6216\u96c6\u4f53\u66f4\u5927\u5229\u76ca\u4e0d\u5229\u7684\u4e1c\u897f\uff0c\u8fd9\u4e9b\u66f4\u5927\u7684\u597d\u5904\u7531\u5f53\u524d\u638c\u6743\u7684\u4efb\u4f55\u6d3e\u7cfb\u6216\u653f\u5e9c\u672c\u8eab\u7684\u795e\u5723\u6027\u51b3\u5b9a\u3002\u6ca1\u6709\u63d0\u5230\u6240\u6709\u5728\u4e8c\u6218\u671f\u95f4\u79bb\u5f00\u7f8e\u56fd\u548c\u6765\u5230\u7f8e\u56fd\u7684\u90ae\u4ef6\u90fd\u88ab\u68c0\u67e5\u4e86\uff0c\u8fea\u514b\u548c\u963f\u7433\u00b7\u8d39\u66fc\u5728\u6d1b\u65af\u963f\u62c9\u83ab\u65af\u4e0e\u5ba1\u67e5\u5458\u73a9\u800d\u3002\u7136\u540e\u662f\u7ea6\u585e\u91cc\u5b89\u5728\u7b2c 22 \u6761\u4e16\u754c\u5927\u6218\u4e2d\u5bf9\u610f\u5927\u5229\u6d77\u5cb8\u9644\u8fd1\u7684\u90ae\u4ef6\u8fdb\u884c\u5ba1\u67e5\u3002 Butcha \u4e0d\u53ef\u80fd\u62e5\u6709\u4e00\u5207\u2026\u2026\u4f60\u4f1a\u628a\u5b83\u653e\u5728\u54ea\u91cc\uff1f\u95ee\u9898\u3002\u7531\u4e8e\u7b2c\u56db\u4fee\u6b63\u6848\u2014\u2014\u4f5c\u4e3a\u963b\u6b62\u8fd9\u4e9b\u6ee5\u7528\u7684\u4e00\u79cd\u624b\u6bb5\u2014\u2014\u4ec5\u9002\u7528\u4e8e\u6a61\u76ae\u7cd6\u800c\u4e0d\u9002\u7528\u4e8e\u79c1\u8425\u90e8\u95e8\uff0c\u79c1\u6709\u5316 PO \u5c06\u5982\u4f55\u6539\u5584\u8fd9\u4e00\u70b9\uff1f\n\u6770\u897f\u7684\u53e6\u4e00\u7bc7\u5f15\u4eba\u6ce8\u76ee\u7684\u7cbe\u5f69\u6587\u7ae0\u3002\u8bf7\u6ce8\u610f\u539a\u539a\u7684 A \u7ea7\u4e8b\u5b9e\u5185\u5bb9\u5728\u8089\u6c41\u4e2d\u6e38\u52a8\uff0c\u56e0\u4e3a\u53ea\u6709\u901a\u8fc7\u4ed4\u7ec6\u4fee\u526a\u624d\u80fd\u83b7\u5f97\u90a3\u79cd\u8f9b\u8fa3\u7684\u7b80\u6d01\u611f\u3002\u7f8e\u98df\u62a5\u9053\uff01\u90ae\u653f\u670d\u52a1\uff0c\u9664\u4e86\u4e00\u4e9b\u8d26\u5355\u548c\u5783\u573e\u90ae\u4ef6\u4e4b\u5916\uff0c\u5b83\u4eec\u8fd8\u6709\u522b\u7684\u7528\u9014\u5417\uff1f\u8fd9\u771f\u662f\u4ee4\u4eba\u9707\u60ca\u3002", "note_en": "A year before independence, the Continental Congress creates the Postal Service\u2014not as a government agency, but as one of several new independent alternatives to the British postal system. One advantage: This allows American dissidents to communicate without the authorities intercepting their letters.\n  Southern mobs seize and burn abolitionist material sent through the mail. The postmaster general refuses to intervene, establishing a de facto policy of permitting the censorship of such literature in the slave states.\n  The libertarian abolitionist Lysander Spooner establishes the private American Letter Mail Co. The government reacts by outlawing it, and in 1851 the experiment ends.\n  The Civil War begins, and both the Union and the Confederacy adopt their own forms of postal censorship. The postmaster general spends a year refusing to deliver papers deemed disloyal to the Union cause.\n  The Comstock Act makes it illegal to knowingly mail or receive any &#34;filthy book, pamphlet, picture, paper, letter, writing, print, or other publication of an indecent character,&#34; as well as any contraceptives, any abortifacients, or any information about acquiring or using contraceptives or abortifacients.\n  The Supreme Court upholds the government&#39;s right to bar &#34;circulars concerning lotteries&#34; from the mail\u2014and, provided it has a warrant, to open and inspect packages to find such material.\n  Police arrest the libertarian journalists Moses Harman, Edwin C. Walker, and George Harman for publishing and mailing a feminist argument against marital rape. The author&#39;s description of such an assault is deemed obscene under the Comstock Act.\n  After the U.S. enters World War I, the Wilson administration cracks down on anti-war and anti-draft literature. In the case of the anarchist magazine  Mother Earth, the government doesn&#39;t just bar the material from the mail\u2014it arrests editor Emma Goldman for &#34;conspiracy to induce persons not to register&#34; for the draft, imprisons her, and eventually deports her.\n  The government intercepts the international correspondence of tax resister Vivien Kellems\u2014a prominent critic of the Roosevelt administration\u2014and leaks it to columnist Drew Pearson and Rep. John M. Coffee (D\u2013Wash.). Coffee quotes from it on the House floor while accusing Kellems of subversion.\n  The CIA starts reading correspondence between people in the U.S. and the Soviet Union. The covert program quickly extends to a much larger watchlist, with the agency illegally opening more than 13,000 letters a year until the operation ends in 1973.\n  As part of its campaign against the underground press, the FBI considers a scheme to spray copies of\u00a0 The Black Panther\u00a0with a chemical called Skatole before the issues are shipped to distributors, thus giving them &#34;a most offensive odor.&#34; The bureau drops that particular plan but finds other ways to harass alternative papers using the mails.\n  In the wake of the post-9/11 anthrax attacks, the government creates the Mail Isolation Control and Tracking system to collect the information on the exterior of virtually everything mailed in the United States. One cybersecurity specialist later sums up the program for\u00a0 The New York Times: &#34;Let&#39;s record everyone&#39;s mail so in the future we might go back and see who you were communicating with.&#34;\n    Editor&#39;s Note: We invite comments and request that they be civil and on-topic. We do not moderate or assume any responsibility for comments, which are owned by the readers who post them. Comments do not represent the views of Reason.com or Reason Foundation. We reserve the right to delete any comment for any reason at any time.  Report abuses.\n  \u201cThe covert program quickly extends to a much larger watchlist, with the agency illegally opening more than 13,000 letters a year until the operation ends in 1973\u201d\n You blow air inside, insert fiberglass imaging tool in a gap and the entire content is as easily readable as if flat on a table. If the top is craftily sealed, poke a thumbnail into a fold at either end and insert imaging cable through a small tear. That was before Bush/Bush Kreigswaffen expeditions. The anthrax \u201cunequal but apposite\u201d retaliation may have made X-raying and neutron activation all the more easier to fund, since force-initiating politicians were directly targeted. Remember this when next you have a chance to vote against the initiation of force.\n  I\u2019m still waiting for \u201cLibertarian spoiler votes\u201d to make everything all better, though. There were less this past Election that even in previous Elections.\n  And 50 years is long enough for a political party and its ideology to change a nation and a world, so obviously somebody\u2019s not doing something right.\n  We really need to know first, is Trump for or against this today? Because a ton of commenters here will then follow suit.\n Yeah, like when Trump first restricted travel to and from high COVID areas and the TDS crowd lambasted him for being xenophobic.\n Where in the world would folks get the general idea that Trump might be xenophobic? It\u2019s truly a deranged mystery\u2026\n  Drumpf\u2019s draconian immigration restrictions certainly contributed to this country\u2019s (except for blue states like NY) disastrous pandemic response.\n  Just think of all the highly skilled Mexican doctors who wanted to cross the border and help our overwhelmed hospitals. Instead they were thrown into literal concentration camps.\n  Well you\u2019re here to fluff the left and democrats as a paid poster or just a pathetic Tony sock. Either way you\u2019re a joke.\n  They missed an important and costly program. After the Anthrax scares, the post office began sending all government correspondence to a facility in Ohio to be blasted with radiation to kill any anthrax spores that may lurk inside. It is outrageously expensive and slows correspondence and packages. Anthrax hasn\u2019t been sent through the mail since 2001, but they will continue to spend billions to protect one or two government workers from harm.\n    Thank god the government makes sure I can\u2019t get or send things that might be bad for me or the collective greater good, that greater good determined by whatever faction currently holds power, or the sanctity of the government itself.\n  failed to mention all mail leaving the U.S. and coming to the U.S. during WWII was inspected\n That and Dick and Arline Feynman toying with the censors at Los Alamos. And then there was Yossarian\u2019s censoring of mail off the coast of Italy in World War Catch-22. Butcha can\u2019t have everything\u2026 where would you put it?\n  Question. Since the 4th amendment \u2013 as a means of stopping those abuses \u2013 only applies to gummint not to private sector, how would privatizing the PO improve this?\n  Another conspicuously brilliant article by Jesse. Note the thick slices of Grade-A factual content swimming in gravy thickened by the kind of spicy terseness obtainable only through careful trimming. Gourmet reporting!\n  The postal service, are they still a thing for anything other than a few bills and junk mail? That\u2019s truly shocking.", "posttime": "2021-08-08 10:54:08", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,\u6c11\u4f17,long,\u653f\u5e9c", "title": "\u7f8e\u56fd\u653f\u5e9c\u957f\u671f\u622a\u83b7\u6c11\u4f17\u4fe1\u4ef6\u7684\u803b\u8fb1\u5386\u53f2", "title_en": "The U.S. government's long and shameful history of intercepting people's letters", "transed": 1, "url": "https://reason.com/2021/07/15/postal-censorship-and-surveillance-a-timeline/", "via": "", "real_tags": ["\u7f8e\u56fd", "\u6c11\u4f17", "long", "\u653f\u5e9c"]}]