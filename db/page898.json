[{"category": "", "categoryclass": "", "imagename": "1e10bf0643206aa744cf8cfbbf68d6a6.jpg", "infoid": 1011129, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5927\u591a\u6570\u4eba\u90fd\u542c\u8bf4\u8fc7\uff0c\u6216\u8005\u81f3\u5c11\u662f\u521b\u65b0\u8005\u56f0\u5883\u6240\u666e\u53ca\u7684\u6982\u5ff5\uff0c\u8fd9\u672c\u4e66\u8be6\u7ec6\u63cf\u8ff0\u4e86\u5f53\u65b0\u6280\u672f\u51fa\u73b0\u65f6\uff0c\u5927\u516c\u53f8\u5f80\u5f80\u662f\u5982\u4f55\u5931\u8d25\u7684\uff0c\u539f\u56e0\u6709\u5f88\u591a\uff0c\u5305\u62ec\u62c5\u5fc3\u901a\u8fc7\u521b\u65b0\u6765\u7834\u574f\u81ea\u5df1\u7684\u5e02\u573a\u3002\u7136\u800c\uff0c\u6211\u60f3\u63d0\u51fa\u7684\u53e6\u4e00\u70b9\u662f\uff0c\u4e3a\u4ec0\u4e48\u8001\u724c\u5927\u516c\u53f8\u5728\u521b\u65b0\u548c\u53d1\u73b0\u81ea\u5df1\u7684\u9886\u5148\u5730\u4f4d\u7f13\u6162(\u6709\u65f6\u975e\u5e38\u8fc5\u901f)\u6076\u5316\u65b9\u9762\u53ef\u80fd\u4f1a\u5f88\u6162\u3002\u5927\u516c\u53f8\u5956\u52b1\u6210\u529f\uff0c\u800c\u4e0d\u662f\u521b\u65b0\u3002\n\u5f53\u6211\u4eec\u60f3\u5230\u4e00\u4e2a\u7ec4\u7ec7\u65f6\uff0c\u6211\u4eec\u5f80\u5f80\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u3001\u5355\u4e00\u7684\u6574\u4f53\uff0c\u52aa\u529b\u786e\u4fdd\u5176\u81ea\u6211\u4fdd\u62a4\u548c\u53d1\u5c55\uff0c\u4f46\u4e8b\u5b9e\u8fdc\u975e\u5982\u6b64\u3002\u4e8b\u5b9e\u662f\uff0c\u7ec4\u7ec7\u5e76\u4e0d\u662f\u5355\u4e00\u7684\u5355\u4f4d\uff0c\u800c\u662f\u8bb8\u591a\u5355\u4e00\u5355\u4f4d\u7684\u7ec4\u5408\uff0c\u5b83\u4eec\u4e3b\u8981\u4e3a\u4e00\u4e2a\u76ee\u6807\u800c\u5de5\u4f5c\uff0c\u5373\u5b83\u4eec\u81ea\u5df1\u7684\u81ea\u6211\u4fdd\u62a4\u3001\u6210\u957f\u548c\u6210\u529f\u3002\u56e0\u4e3a\u867d\u7136\u4ece\u5916\u90e8\u770b\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u53ef\u80fd\u53ea\u6709\u4e00\u4e2a\u8eab\u4efd\uff0c\u4f46\u5728\u5e55\u540e\uff0c\u6bcf\u4e2a\u4eba\u4ecd\u7136\u6839\u636e\u81ea\u5df1\u7684\u6700\u4f73\u5229\u76ca\u884c\u4e8b\uff0c\u6240\u4ee5\u7ec4\u7ec7\u505a\u5f97\u6709\u591a\u597d\uff0c\u53d6\u51b3\u4e8e\u4e2a\u4eba\u548c\u6574\u4e2a\u7ec4\u7ec7\u7684\u5229\u76ca\u534f\u8c03\u5f97\u6709\u591a\u597d\u3002\u63d0\u9ad8\u5229\u6da6\u7387\u662f\u9996\u5e2d\u6267\u884c\u5b98\u4eec\u6700\u611f\u5174\u8da3\u7684\u5417\uff1f\u5f88\u6709\u53ef\u80fd\uff0c\u7279\u522b\u662f\u5982\u679c\u4ed6\u4eec\u7684\u85aa\u916c\u4e0e\u516c\u53f8\u4e1a\u7ee9\u76f4\u63a5\u6302\u94a9\u7684\u8bdd\u3002\u5c06\u7ec4\u7ec7\u4e2d\u7684\u6bcf\u4e2a\u7cfb\u7edf\u90fd\u8fc1\u79fb\u5230\u4e91\u7aef\u4ee5\u5e2e\u52a9\u516c\u53f8\u6bcf\u5e74\u8282\u7701\u6570\u767e\u4e07\u7684\u57fa\u7840\u8bbe\u65bd\u6210\u672c\u7b26\u5408\u5de5\u7a0b\u5e08\u526f\u603b\u88c1\u7684\u6700\u4f73\u5229\u76ca\u5417\uff1f\u55ef\uff0c\u5b9e\u9645\u4e0a\u53ef\u80fd\u4e0d\u662f\uff0c\u6700\u597d\u7684\u60c5\u51b5\u662f\u4ed6\u4eec\u4f1a\u5f97\u5230\u8d5e\u8bb8\uff0c\u6700\u574f\u7684\u60c5\u51b5\u662f\uff0c\u5982\u679c\u9879\u76ee\u5931\u8d25\uff0c\u4ed6\u4eec\u4f1a\u88ab\u89e3\u96c7\uff0c\u7b80\u5386\u4e0a\u4f1a\u6709\u6c38\u4e45\u7684\u6807\u8bb0\u3002\u90a3\u4e48\u5927\u591a\u6570\u4eba\u662f\u505a\u4ec0\u4e48\u7684\u5462\uff1f\u4ed6\u4eec\u89c4\u907f\u98ce\u9669\u3002\u7279\u522b\u662f\u5f53\u4e8b\u60c5\u8fdb\u5c55\u987a\u5229\uff0c\u516c\u53f8\u8d5a\u53d6\u7684\u5229\u6da6\u8d85\u8fc7\u4e86\u4ed6\u4eec\u53ef\u80fd\u9762\u4e34\u7684\u4efb\u4f55\u5f02\u5e38\u5de8\u5927\u7684\u6210\u672c\u65f6\u3002\n\u8fd9\u5c31\u662f\u4eba\u4eec\u8d2d\u4e70IBM\u7684\u539f\u56e0\u3002\u56e0\u4e3a\u4f60\u4e0d\u4f1a\u56e0\u6b64\u800c\u88ab\u89e3\u96c7\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u5b89\u5168\u7684\u51b3\u5b9a\u53ef\u80fd\u4e0d\u662f\u5bf9\u516c\u53f8\u6700\u597d\u7684\uff0c\u5b83\u751a\u81f3\u53ef\u80fd\u5728\u77ed\u671f\u5185\u4e0d\u662f\u5bf9\u516c\u53f8\u6700\u597d\u7684\uff0c\u4f46\u66f4\u591a\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u4efb\u4f55\u8d1f\u8d23\u51b3\u5b9a\u4ece\u54ea\u4e2a\u4f9b\u5e94\u5546\u8d2d\u4e70\u7684\u4e2d\u5c42\u7ecf\u7406\u6765\u8bf4\uff0c\u8fd9\u90fd\u662f\u4e00\u4e2a\u6709\u4fdd\u8bc1\u7684\u65e0\u98ce\u9669\u51b3\u5b9a\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4e00\u5207\u53ef\u80fd\u770b\u8d77\u6765\u90fd\u5f88\u68d2\uff0c\u5bf9\u5427\uff1f\u5982\u679c\u4f60\u4e0d\u5192\u9669\uff0c\u4e0d\u4f1a\u51fa\u4ec0\u4e48\u5dee\u9519\u5427\uff1f\u55ef\uff0c\u4e0d\u662f\uff0c\u56e0\u4e3a\u4f60\u4eec\u7684\u7ade\u4e89\u5bf9\u624b\u4e0d\u662f\u5176\u4ed6\u7ec4\u7ec7\uff0c\u4ed6\u4eec\u627f\u62c5\u7740\u548c\u4f60\u4eec\u4e00\u6837\u7ecf\u8fc7\u8ba1\u7b97\u7684\u98ce\u9669\uff0c\u4ed6\u4eec\u662f\u7ade\u4e89\u5bf9\u624b\uff0c\u4ed6\u4eec\u6b63\u5728\u60f3\u51fa\u65b0\u7684\u521b\u65b0\u65b9\u6cd5\u6765\u505a\u4f60\u4eec\u505a\u7684\u4e8b\u60c5\uff0c\u4f46\u66f4\u597d\u3001\u66f4\u5feb\u3001\u66f4\u4fbf\u5b9c\u3002\u5f53\u7136\uff0c\u4ed6\u4eec\u4e2d\u7684\u5927\u591a\u6570\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u4f46\u6709\u6210\u5343\u4e0a\u4e07\u7684\u4ed6\u4eec\u90fd\u5728\u52aa\u529b\u628a\u4f60\u8d76\u4e0b\u53f0\uff0c\u6bcf\u4e2a\u4eba\u90fd\u627f\u62c5\u7740\u4e0d\u540c\u7684\u98ce\u9669\uff0c\u60f3\u51fa\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u89e3\u51b3\u4f60\u6b63\u5728\u89e3\u51b3\u7684\u4efb\u4f55\u95ee\u9898\uff0c\u5373\u4f7f\u5927\u591a\u6570\u4eba\u5931\u8d25\u4e86\uff0c\u6700\u7ec8\u4e00\u5c0f\u90e8\u5206\u4eba\u4f1a\u6210\u529f\uff0c\u5f53\u4ed6\u4eec\u6210\u529f\u7684\u65f6\u5019\u53ef\u80fd\u5df2\u7ecf\u592a\u665a\u4e86\uff0c\u4f46\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u9762\u4e34\u7740\u4e24\u4e2a\u9009\u62e9\uff0c\u4e70\u4e0b\u4ed6\u4eec\uff0c\u6216\u8005\u590d\u5236\u4ed6\u4eec\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u5f88\u591a\u7ec4\u7ec7\u60e9\u7f5a\u98ce\u9669\uff0c\u5927\u578b\u6536\u8d2d\u80af\u5b9a\u662f\u6709\u98ce\u9669\u7684\u3002\u53e6\u5916\uff0c\u4ed6\u4eec\u751a\u81f3\u53ef\u80fd\u4e0d\u60f3\u5356\u3002\u5f53\u590d\u5236\u5b83\u4eec\u65f6\uff0c\u98ce\u9669\u66f4\u5927\uff0c\u4f60\u6b63\u5728\u6295\u5165\u5927\u91cf\u7684\u8d22\u653f\u8d44\u6e90\uff0c\u5374\u6ca1\u6709\u6210\u529f\u7684\u4fdd\u969c\u3002\n\u518d\u4e00\u6b21\uff0c\u5f52\u6839\u7ed3\u5e95\u662f\u4e2a\u4eba\u5bf9\u7fa4\u4f53\u3002\u4f5c\u4e3a\u4e00\u5bb6\u5927\u516c\u53f8\u4e2d\u6709\u80fd\u529b\u5c31\u5982\u4f55\u5e94\u5bf9\u5feb\u901f\u589e\u957f\u7684\u7ade\u4e89\u5bf9\u624b\u505a\u51fa\u51b3\u5b9a\u7684\u4eba\uff0c\u4f60\u6709\u4e09\u4e2a\u9009\u62e9\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u505a\u70b9\u4ec0\u4e48\uff0c\u5f00\u59cb\u6253\u7535\u8bdd\u7ed9\u62db\u8058\u4eba\u5458\u3002\n\u5982\u679c\u4f60\u505a\u4e86\u4ec0\u4e48\uff0c\u4f60\u662f\u4e00\u8258\u6b63\u5728\u4e0b\u6c89\u7684\u8239\u4e0a\u5c16\u53eb\u7684\u4e58\u5ba2\uff0c\u8ba9\u4f60\u5835\u4f4f\u6574\u4e2a\u8239\uff0c\u6216\u8005\u4f60\u53d1\u73b0\u81ea\u5df1\u8981\u4e3a\u5236\u9020\u65b0\u95fb\u6d1e\u8d1f\u8d23\uff0c\u8fd9\u4f1a\u8ba9\u8239\u66f4\u5feb\u5730\u6c89\u6ca1\u3002\n\u5982\u679c\u4f60\u5f00\u59cb\u6253\u7535\u8bdd\u7ed9\u62db\u8058\u4eba\u5458\uff0c\u4f60\u5c31\u6709\u53ef\u80fd\u6210\u4e3a\u660e\u661f\u96c7\u5458\uff0c\u7ade\u4e89\u5bf9\u624b\u53ef\u4ee5\u6293\u4f4f\u4f60\u5199\u4e00\u7bc7\u65b0\u95fb\u7a3f\uff0c\u7ed9\u81ea\u5df1\u66f4\u591a\u7684\u53ef\u4fe1\u5ea6\u3002\n\u5927\u591a\u6570\u4eba\u4f1a\u9009\u62e9\u4ec0\u4e48\u5462\uff1f\u90a3\u4e48\uff0c\u770b\u770b\u73b0\u5728\u5728\u7ade\u4e89\u5bf9\u624b\u5de5\u4f5c\u7684\u6240\u6709\u524dIBM\u9ad8\u7ba1\u548c\u5458\u5de5\u53ef\u80fd\u4f1a\u5e2e\u52a9\u4f60\u7406\u89e3\uff0c\u5927\u591a\u6570\u65f6\u5019\uff0c\u4eba\u4eec\u4f1a\u4e3a\u81ea\u5df1\u9009\u62e9\u6700\u597d\u7684\u3002\u6bd5\u7adf\uff0c\u4e8b\u540e\u770b\u6765\uff0c\u4ed6\u4eec\u4f1a\u8bb0\u5f97\u4ed6\u4eec\u66fe\u76f8\u5f53\u76f4\u8a00\u4e0d\u8bb3\u5730\u8868\u793a\u9700\u8981\u521b\u65b0\uff0c\u53ea\u662f\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u5f97\u5230\u6279\u51c6\u3002\n\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5956\u52b1\u521b\u65b0\u548c\u6267\u884c\u5f88\u91cd\u8981\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u7ed3\u679c\u3002\u8981\u521b\u65b0\uff0c\u4f60\u5927\u591a\u6570\u65f6\u5019\u90fd\u4f1a\u5931\u8d25\uff0c\u53ea\u8981\u770b\u770b\u4eca\u5929\u4e00\u4e9b\u6700\u6210\u529f\u7684\u516c\u53f8\uff0c\u6bd4\u5982\u4e9a\u9a6c\u900a\u6216\u8c37\u6b4c\uff0c\u6211\u4eec\u5c31\u4f1a\u770b\u5230\uff0c\u5728\u4ed6\u4eec\u5185\u90e8\uff0c\u5931\u8d25\u7684\u6bd4\u6210\u529f\u7684\u8981\u591a\u5f97\u591a\u3002\u4e9a\u9a6c\u900a(Amazon)\u7684Fire\u624b\u673a\u6216\u8c37\u6b4c+(Google+)\u7b49\u6545\u969c\u3002\u7136\u800c\uff0c\u5c3d\u7ba1\u6709\u8fd9\u4e9b\u5931\u8d25\uff0c\u4ed6\u4eec\u7ee7\u7eed\u4ee5\u8fdc\u8fdc\u5feb\u4e8e\u4efb\u4f55\u7ade\u4e89\u5bf9\u624b\u7684\u901f\u5ea6\u589e\u957f\uff0c\u5c3d\u7ba1\u6ca1\u6709\u4efb\u4f55\u65b0\u7684\u4ea7\u54c1\u6216\u9879\u76ee\u6210\u529f\uff0c\u4f46\u5f53\u4ed6\u4eec\u6210\u529f\u65f6\uff0c\u4ed6\u4eec\u4f1a\u5e26\u6765\u6210\u529f\u548c\u65b0\u7684\u5e02\u573a\uff0c\u8fd9\u4e9b\u6210\u529f\u548c\u65b0\u5e02\u573a\u8fdc\u8fdc\u5f25\u8865\u4e86\u4ed6\u4eec\u4e4b\u524d\u7684\u6240\u6709\u8fc7\u53bb\u7684\u5931\u8d25\u3002\n\u7136\u800c\uff0c\u6700\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u521b\u9020\u4e86\u4e00\u79cd\u6587\u5316\uff0c\u5728\u8fd9\u79cd\u6587\u5316\u4e2d\uff0c\u4e2a\u4eba\u7684\u6700\u4f73\u5229\u76ca\u4e0e\u7ec4\u7ec7\u7684\u5229\u76ca\u66f4\u52a0\u5b8c\u7f8e\u5730\u7ed3\u5408\u5728\u4e00\u8d77\u3002\u56e0\u4e3a\u53ea\u8981\u4f60\u52aa\u529b\u5de5\u4f5c\uff0c\u5168\u529b\u4ee5\u8d74\uff0c\u4f60\u5c31\u53ef\u4ee5\u521b\u65b0\uff0c\u53ef\u4ee5\u627f\u62c5\u98ce\u9669\uff0c\u53ef\u4ee5\u56e0\u6210\u529f\u800c\u83b7\u5f97\u56de\u62a5\uff0c\u800c\u4e0d\u4f1a\u56e0\u5931\u8d25\u800c\u53d7\u5230\u60e9\u7f5a\u3002\u73b0\u5728\uff0c\u6bcf\u4e00\u4f4d\u5458\u5de5\u90fd\u53ef\u80fd\u662f\u6570\u4ee5\u5343\u8ba1\u7684\u7ade\u4e89\u8005\u4e2d\u7684\u4e00\u5458\uff0c\u4ed6\u4eec\u52aa\u529b\u505a\u4f60\u505a\u5f97\u66f4\u597d\u3001\u66f4\u5feb\u3001\u66f4\u4fbf\u5b9c\u7684\u4e8b\u60c5\uff0c\u9664\u975e\u4ed6\u4eec\u6210\u529f\u4e86\uff0c\u4f60\u5c31\u548c\u4ed6\u4eec\u4e00\u8d77\u6210\u529f\u4e86\u3002", "note_en": "By now, most people have heard of, or at least the concepts popularized by,  The Innovators Dilemma, a book detailing how large companies often fail when new technology arises, for a multitude of reasons, including fear of canibalising their own markets by innovating. There is however another point I would like to bring up as to why large well established companies can be slow to innovate and find their lead slowly (or sometimes very rapidly) deteriorate. Large companies reward success and not innovation.\n   When we think of an organization, we often think of it as being a large, singular monolithic unit working hard to ensure its self-preservation and growth, that however is very far from the truth. The truth is, organizations aren&#39;t single units, but a grouping of many single units all working mostly for one goal, their own self preservation, growth and success. Because while from the outside an organization might have a single identity, behind the curtain, everyone is still acting based on whats in their own best interest and so how well the organization does is based on how well the interests of the individual and the organization as a whole are aligned. Is it in the CEOs best interested to increase profit margins? Probably, especially if their compensation is directly linked to the companies performance. Is it in the VP of Engineer&#39;s best interest to move every system in the organization to the cloud to help save the company millions in infrastructure costs a year? Well probably not actually, as best case scenario they get a pat on the back, worst case, they get fired and have a permanent mark on their CV should the project fail. So what do most people do? They avoid risk. Especially when things are going well and the company is making more then enough profit to cover any exceptionally large costs they might have.\n Which is why people bought IBMs. Because you wouldn&#39;t be fired for it. The safe decision might not be whats best for the company in the long run, it might not even be whats best for the company in the short term, but more often then not, it is a guarenteed risk-free decision for whichever middle manager is responsible for making the decision on which vendor to purchase from.\n  Now, this might all seem great so far right? If you take no risks nothing can go wrong? Well no, because you&#39;re competitors aren&#39;t other organizations who are taking the same calculated risks as you, they are competitors who are coming up with new and innovative ways to do what you do, but better, faster and cheaper. And sure most of them might fail, but there are thousands of them, all working hard to unseat you, all taking different risks and coming up with different ways to tackle whichever problem you are solving, and even if the majority of them fail, eventually that small minority will succeed, and when they succeed it might already be too late, but you will find yourself faced with two options, buy them, or copy them.\n However, as we know, many organizations punish risk, and a large acquisition is definitely a risky. Plus they might not even want to sell. While copying them, is even riskier, you&#39;re committing massive financial resources with no guarentee of success.\n  And once again, it comes down to the individual vs the group. As an individual in a large company who has the ability to make the decision on how to tackle a fast growing competitor, you have three options, do nothing, do something, start calling recruiters.\n  If you do something, you&#39;re a screaming passenger on a sinking ship, and making you plug the whole, or maybe you find yourself being held responsible for creating news holes that have made the ship sink faster.\n And if you start calling recruiter, you&#39;re potentially a star hire that a competitor can snatch away and write a press release about, giving more credibility to themselves.\n What do most people chose? Well a look at all the ex-IBM executives and staff now working at competitors might help you understand that most of the time, people chose whats best for themselves. After all, in hindsight, they will remember being pretty vocal about needing to innovate, they were just never given the go-ahead.\n  Which is why it is important to reward innovation and execution, and not just results. To innovate you will fail most of the time, just by taking a look at some of the most successful companies today, such as Amazon or Google we see that internally they have far more failures then successes. Failures such as Amazon&#39;s Fire Phone, or Google+. Despite these failures however, they have continued to grow at a pace far greater than any of their competitors, and though not ever new product or project succeeds, when they do they result in successes and new markets that more than make up for all the past failures before them.\n Most importantly however, this creates a culture where the individuals best interests are more perfectly aligned with that of the organization. Because as long as you work hard and give it your best, you can innovate, take risks and be rewarded for your successes without being punished for your failures. Now every employee is potentially one of the thousands of competitors working to do what you do better, faster and cheaper, except when they succeed, you succeed with them.", "posttime": "2020-07-11 09:38:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u98ce\u9669,risk,\u53ef\u80fd", "title": "\u60e9\u7f5a\u98ce\u9669\u4fdd\u8bc1\u5931\u8d25", "title_en": "Punishing Risk Guarantees Failure", "transed": 1, "url": "https://blog.moodio.co.uk/reward-risk/", "via": "", "real_tags": ["\u98ce\u9669", "risk", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1011127, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u673a\u5668\u4eba\u6e38\u620f-GitHub\u4e0a\u7684\u4f20\u7edf\u7ec4\u88c565(C)02\u662f\u4e00\u4e2a8\u4f4d\u67b6\u6784\uff0c\u6709\u4e09\u4e2a\u4e3b\u8981\u76848\u4f4d\u5bc4\u5b58\u5668\u3002A\u5bc4\u5b58\u5668\u6216\u7d2f\u52a0\u5668\u7528\u4e8e\u5927\u591a\u6570\u8ba1\u7b97\u548c\u79fb\u52a8\u6570\u636e\u3002\u53e6\u4e00\u65b9\u9762\uff0cX\u548cY\u5bc4\u5b58\u5668\u7528\u4e8e\u7d22\u5f15\u5230\u5185\u5b58\u4e2d\u6216\u5411\u4e0a\u6216\u5411\u4e0b\u8ba1\u65701\u3002\u5b83\u4eec\u4e0d\u80fd\u7528\u4e8e\u901a\u7528\u8ba1\u7b97\uff0c\u5982A\u3002X\u548cY\u5bc4\u5b58\u5668\u7684\u4e00\u79cd\u7528\u9014\u662f\u904d\u5386\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u7d22\u5f15\u52a0\u8f7d\u5230X\u4e2d\uff0c\u7136\u540e\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u6765\u8bbf\u95ee\u6570\u7ec4\u7684\u5143\u7d20\uff1a\n\u8fd9\u4f1a\u5c06\u6570\u7ec4\u4e2d\u8d85\u51fa\u5f00\u5934X\u4e2a\u5b57\u8282\u7684\u5b57\u8282\u590d\u5236\u5230A\u5bc4\u5b58\u5668\u4e2d\u3002\u8981\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u53ea\u9700\u5c06X\u9012\u589e1\u5e76\u5c06\u6570\u636e\u52a0\u8f7d\u5230A\u5bc4\u5b58\u5668(\u8bf7\u8bb0\u4f4f\uff0cX\u4e0d\u80fd\u8fdb\u884c\u4efb\u610f\u8ba1\u7b97\uff0c\u53ea\u80fd\u9012\u589e\u548c\u9012\u51cf1)\u3002\n65(C)02\u4e0a\u7684\u524d256\u5b57\u8282\u5185\u5b58\u662f\u7279\u6b8a\u7684\u3002\u8fd9\u4e2a\u533a\u57df\u88ab\u79f0\u4e3a\u96f6\u9875\u3002\u56e0\u4e3a\u96f6\u9875\u7684\u5730\u5740\u53ef\u4ee5\u653e\u51658\u4f4d\uff0c\u800c\u4e0d\u662f\u6240\u6709\u5176\u4ed6\u5730\u5740\u768416\u4f4d\uff0c\u6240\u4ee5\u5904\u7406\u5668\u53ef\u4ee5\u66f4\u5feb\u5730\u52a0\u8f7d\u5730\u5740\u548c\u8bbf\u95ee\u8be5\u5b58\u50a8\u5668\u4e00\u4e2a\u5468\u671f\u3002\u7531\u4e8e\u6307\u4ee4\u53ea\u5360\u75282-7\u4e2a\u5468\u671f\uff0c\u56e0\u6b64\u5c06\u6307\u4ee4\u7f29\u77ed\u4e00\u4e2a\u5468\u671f\u4f1a\u5e26\u6765\u6709\u610f\u4e49\u7684\u52a0\u901f\u3002\u56e0\u6b64\uff0c\u7a00\u7f3a\u4f46\u901f\u5ea6\u66f4\u5feb\u7684\u96f6\u9875\u5185\u5b58\u603b\u662f\u975e\u5e38\u5b9d\u8d35\u3002\n\u8bb8\u591a\u7a0b\u5e8f\u5458\u4f7f\u7528X\u5bc4\u5b58\u5668\u4f5c\u4e3a\u4e13\u7528\u7684\u6570\u636e\u5806\u6808\u6307\u9488\uff0c\u5e76\u5c06\u8be5\u5806\u6808\u4fdd\u6301\u5728\u96f6\u9875\uff0c\u56e0\u4e3a\u5806\u6808\u5185\u5b58\u7528\u4e8e\u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5e94\u8be5\u5c3d\u53ef\u80fd\u5feb\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u5c06\u63d0\u4f9b\u7ed9\u6307\u4ee4\u7684\u5730\u5740\u89c6\u4e3a\u5806\u6808\u7684\u504f\u79fb\u91cf\u3002\u4f8b\u5982\uff0c\u6b64\u6307\u4ee4\u4f1a\u5c06\u7b2c\u4e8c\u4e2a\u9879\u76ee\u52a0\u8f7d\u5230\u6570\u636e\u5806\u6808\u4e0a(\u504f\u79fb\u91cf0\u5c06\u662f\u7b2c\u4e00\u4e2a\u9879\u76ee)\uff1a\n65(C)02\u8fd8\u5177\u6709\u7528\u4e8e\u786c\u4ef6\u5806\u6808\u7684\u79f0\u4e3aSP\u7684\u4e13\u7528\u5806\u6808\u6307\u9488\uff0c\u4f46\u4e0e\u8bb8\u591a\u67b6\u6784\u4e0d\u540c\u7684\u662f\uff0c\u6ca1\u6709\u5141\u8bb8\u5728\u504f\u79fb\u91cf\u5904\u8bbf\u95ee\u8be5\u5806\u6808\u7684\u5bfb\u5740\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u6b64\u7c7b\u578b\u7684\u5bfb\u5740\u65e0\u6548\uff1a\n\u4e3a\u6b64\uff0cX\u5bc4\u5b58\u5668\u901a\u5e38\u7528\u4f5c\u6570\u636e\u5806\u6808\u6307\u9488\uff0c\u800c\u786c\u4ef6\u5806\u6808SP\u4e3b\u8981\u7528\u4e8e\u8fd4\u56de\u5730\u5740\u3002\u4e3a\u4e86\u5c06X\u5bc4\u5b58\u5668\u7528\u4e8e\u6570\u636e\u5806\u6808\uff0c\u6bcf\u4e2a\u51fd\u6570\u90fd\u5e94\u8be5\u51cf\u5c11X\uff0c\u4e3a\u5c40\u90e8\u53d8\u91cf\u817e\u51fa\u4e00\u4e9b\u4e34\u65f6\u7a7a\u95f4\uff0c\u7136\u540e\u5728\u51fd\u6570\u5b8c\u6210\u5c40\u90e8\u53d8\u91cf\u5e76\u8fd4\u56de\u65f6\u6062\u590dX\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a\nFOO\uff1aDEX\uff1b\u51cf\u5c11X\u4ee5\u817e\u51fa\u5806\u6808DEX LDA#5\u4e0a\u7684\u4e24\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\uff1b\u5c06\u6570\u5b575\u52a0\u8f7d\u5230A\u5bc4\u5b58\u5668STA0\uff0cX\u4e2d\uff1b\u5c065\u5b58\u50a8\u5230\u5806\u6808INC\u4e0a\u7684\u7b2c\u4e00\u5b57\u8282\uff1b\u5c06A\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4ece5\u589e\u52a0\u52306 STA1\uff0cX\uff1b\u5c066\u5b58\u50a8\u5230\u5806\u6808INX\u4e0a\u7684\u7b2c\u4e8c\u5b57\u8282\uff1b\u91ca\u653e\u5806\u6808INX RTS\u4e0a\u4fdd\u7559\u7684\u4e24\u4e2a\u5b57\u8282\uff1b\u4ece\u51fd\u6570\u8fd4\u56de\u3002\n\u8fd9\u4f1a\u5728\u6570\u636e\u5806\u6808\u4e0a\u817e\u51fa\u4e24\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\uff0c\u5728\u7b2c\u4e00\u4e2a\u5b57\u8282\u4e2d\u5b58\u50a85\uff0c\u5728\u7b2c\u4e8c\u4e2a\u5b57\u8282\u4e2d\u5b58\u50a86\u3002\u6700\u540e\uff0c\u5b83\u6062\u590dX\u5e76\u4ece\u51fd\u6570\u8fd4\u56de\u3002\u8fd9\u79cd\u65b9\u6cd5\u5f88\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ea\u8981\u8fd8\u6709\u5806\u6808\u7a7a\u95f4\uff0c\u51fd\u6570\u5c31\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528\u4efb\u610f\u591a\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u5e76\u4e14\u5b83\u652f\u6301\u9012\u5f52\u3002\n\u4e00\u4e2a\u5c0f\u7684\u6539\u8fdb(\u7a81\u51fa\u663e\u793a)\u662f\u6dfb\u52a0\u4e00\u4e2aPHX\u4ee5\u5c06X\u7684\u503c\u4fdd\u5b58\u5728\u786c\u4ef6\u5806\u6808\u4e0a\u3002\u8fd9\u5141\u8bb8\u6211\u4eec\u5c06\u51fd\u6570\u672b\u5c3e\u7684\u4e24\u6761INX\u6307\u4ee4\u66ff\u6362\u4e3aPLX\uff0c\u4ee5\u5c06X\u4ece\u786c\u4ef6\u5806\u6808\u4e2d\u62c9\u51fa\uff0c\u5e76\u5c06\u5176\u6062\u590d\u5230\u51fd\u6570\u5f00\u59cb\u4e4b\u524d\u7684\u72b6\u6001\u3002\u5728\u6b64\u8bbe\u7f6e\u4e0b\uff0cDEX\u53ef\u7528\u4e8e\u5728\u51fd\u6570\u4e2d\u4fdd\u7559\u6240\u9700\u6570\u91cf\u7684\u5b57\u8282\uff0c\u800c\u4e0d\u5fc5\u5728\u672b\u5c3e\u5c06\u5176\u4e0e\u7b49\u6548\u6570\u91cf\u7684INX\u6307\u4ee4\u76f8\u5e73\u8861\uff1a\nFOO\uff1aPHX\uff1b\u5c06\u5f53\u524d\u6570\u636e\u5806\u6808\u6307\u9488\u4fdd\u5b58\u5230\u786c\u4ef6\u5806\u6808DEX\uff1b\u51cf\u5c11X\u4ee5\u817e\u51fa\u5806\u6808DEX LDA#5\u4e0a\u7684\u4e24\u4e2a\u5b57\u8282\u7684\u7a7a\u95f4\uff1b\u5c06\u6570\u5b575\u52a0\u8f7d\u5230A\u5bc4\u5b58\u5668STA0\uff0cX\u4e2d\uff1b\u5c065\u5b58\u50a8\u5230\u5806\u6808INC\u4e0a\u7684\u7b2c\u4e00\u5b57\u8282\uff1b\u5c06A\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4ece5\u589e\u52a0\u52306 STA1\uff0cX\uff1b\u5c066\u5b58\u50a8\u5230\u5806\u6808PLX\u4e0a\u7684\u7b2c\u4e8c\u5b57\u8282\uff1b\u4ece\u786c\u4ef6\u5806\u6808RTS\u6062\u590d\u6570\u636e\u5806\u6808\u6307\u9488\uff1b\u4ece\u51fd\u6570\u8fd4\u56de\u3002\n\u4e00\u65e6\u5206\u914d\u5c40\u90e8\u53d8\u91cf\u7684\u7cfb\u7edf\u5c31\u4f4d\uff0c\u5c31\u53ef\u4ee5\u7528\u5b8f\u7f29\u77ed\u4ee3\u7801\u3002\u4e0d\u540c\u7684\u6c47\u7f16\u5668\u53ef\u4ee5\u5177\u6709\u975e\u5e38\u4e0d\u540c\u7684\u5b8f\u529f\u80fd\u3002\u5b8f\u6c47\u7f16\u5668AS\u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e2a\u9879\u76ee\u4e2d\u5de5\u4f5c\u5f97\u5f88\u597d\u3002\u5728\u6c47\u7f16\u65f6\u5c06\u51fd\u6570\u548c\u5176\u4ed6\u7ed3\u6784\u7684\u72b6\u6001\u5b58\u50a8\u5728\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\u5141\u8bb8\u60a8\u521b\u5efa\u4e00\u4e9b\u529f\u80fd\u6781\u5176\u5f3a\u5927\u7684\u5b8f\uff0c\u5982\u4e0b\u6240\u793a\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u6613\u4e8e\u9605\u8bfb\u7684\u5b8f\u6765\u751f\u6210\u4e0a\u9762\u7684\u4ee3\u7801\uff1a\n\u51fd\u6570foo\uff1b\u58f0\u660e\u51fd\u6570foo vars byte bar\uff0cBAZ\uff1b\u5728\u5806\u6808\u4e0a\u4e3a\u4e24\u4e2a\u5b57\u8282\u957f\u5ea6\u7684\u5c40\u90e8\u53d8\u91cfEND LDA#5\u817e\u51fa\u7a7a\u95f4\uff1b\u5c06\u6570\u5b575\u52a0\u8f7d\u5230A\u5bc4\u5b58\u5668STA BAR\uff0cX\u4e2d\uff1b\u5c065\u5b58\u50a8\u5230\u5c40\u90e8\u53d8\u91cfBAR INC\u4e2d\uff1b\u5c06A\u5bc4\u5b58\u5668\u4e2d\u7684\u503c\u4ece5\u589e\u52a0\u52306STA BAZ\uff0cX\uff1b\u5c066\u5b58\u50a8\u5230\u5c40\u90e8\u53d8\u91cfBAZ END\u4e2d\uff1b\u6062\u590d\u5806\u6808\u6307\u9488\u5e76\u8fd4\u56de\u3002\n\u8fd9\u6709\u51e0\u4e2a\u4f18\u70b9\u3002\u4e0d\u9700\u8981\u8ba1\u7b97\u9700\u8981\u591a\u5c11\u6761DEX\u6307\u4ee4\uff0c\u56e0\u4e3avars\u548cend\u5b8f\u4f1a\u5904\u7406\u8fd9\u4e9b\u6307\u4ee4\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u5141\u8bb8\u4f7f\u7528\u547d\u540d\u53d8\u91cf\uff0c\u8fd9\u4f7f\u5f97\u51fd\u6570\u66f4\u6613\u4e8e\u9605\u8bfb\u3002\u4e0b\u4e00\u6b65\u662f\u6dfb\u52a0\u5bf916\u4f4d\u53d8\u91cf\u7684\u652f\u6301\uff0c\u5176\u4e2d\u9664\u4e86byte\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5173\u952e\u5b57word\u3002\u4e0b\u9762\u662f\u53e6\u4e00\u4e2a\u793a\u4f8b\uff1a\n\u51fd\u6570FORIES\uff1b\u58f0\u660e\u51fd\u6570FORIES VARS\u5b57\u8282\u8461\u8404\uff1b\u58f0\u660e\u4e00\u4e2a\u5b57\u8282\u957f\u7684\u5c40\u90e8\u53d8\u91cfBANANA\uff0cPEAR\uff1b\u58f0\u660e\u4e24\u4e2a\u5b57\u957f\u7684\u5c40\u90e8\u53d8\u91cfEND LDA PEAR\uff0cX\uff1b\u5c06PEAR\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u590d\u5236\u5230\u9999\u8549STA BANANA\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\uff0cX LDA PEAR+1\uff0cX\uff1b\u5c06PEAR\u7684\u7b2c\u4e8c\u4e2a\u5b57\u8282\u590d\u5236\u5230\u9999\u8549STA BANANA\u7684\u7b2c\u4e8c\u4e2a\u5b57\u8282+1\uff0cX END\uff1b\u6062\u590d\u5806\u6808\u6307\u9488\u5e76\u8fd4\u56de\u3002\n\u6b64\u4ee3\u7801\u5c0616\u4f4d\u503cPEAR\u590d\u5236\u523016\u4f4d\u503cBANANA\u3002\u8fd9\u6709\u70b9\u5355\u8c03\u4e4f\u5473\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u56db\u4e2a\u6b65\u9aa4\u624d\u80fd\u5b8c\u6210\u5927\u591a\u6570\u5176\u4ed6\u8bed\u8a00\u4e2d\u7c7b\u4f3c\u4e8e\u201cbanana=pear\u201d\u7684\u64cd\u4f5c\u3002\u4f7f\u7528\u5b8f\u53ef\u4ee5\u5c06\u8fd9\u56db\u884c\u7f29\u77ed\u4e3a\u4e00\u884c\uff1a\n\u8fd9\u5c06\u4f7f16\u4f4d\u503c\u7684\u4f7f\u7528\u53d8\u5f97\u5bb9\u6613\u5f97\u591a\u3002\u5f538\u4f4d\u548c16\u4f4d\u503c\u6df7\u5408\u5728\u4e00\u8d77\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1a\n\u8fd9\u4f1a\u5c06GRAPE\u7684\u4f4e\u5b57\u8282\u590d\u5236\u5230\u9999\u8549\u7684\u4f4e\u5b57\u8282\uff0c\u8fd9\u662f\u6b63\u786e\u7684\uff0c\u4f46\u7136\u540e\u5c06GRAPE\u4e4b\u540e\u7684\u5b57\u8282\u590d\u5236\u5230\u9999\u8549\u7684\u9ad8\u5b57\u8282\uff0c\u8fd9\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3aGRAPE\u6ca1\u6709\u9ad8\u5b57\u8282\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba9\u5b57\u8282\u5b8f\u8bb0\u5f55GRAPE\u662f\u4e00\u4e2a\u5b57\u8282\uff0c\u8ba9WORD\u5b8f\u5728\u58f0\u660e\u9999\u8549\u65f6\u8bb0\u5f55\u5b83\u4eec\u662f\u4e00\u4e2a\u5355\u8bcd\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u8fd9\u6837MOV\u5c31\u53ef\u4ee5\u660e\u667a\u5730\u9009\u62e9\u4e0d\u590d\u5236\u6ca1\u6709\u9ad8\u5b57\u8282\u7684\u53d8\u91cf\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u5c06\u5b57\u8282\u590d\u5236\u5230\u5b57\u65f6\uff0c\u5b8f\u4f1a\u5c06\u96f6\u590d\u5236\u5230\u76ee\u6807\u7684\u9ad8\u4f4d\u5b57\u8282\u3002\u8fd9\u4f7f\u5f97MOV\u53ef\u4ee5\u4e0e\u5b57\u8282\u548c\u5b57\u7684\u4efb\u610f\u7ec4\u5408\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002\n\u5982\u679c\u53ea\u9700\u8981\u5c06\u4e00\u4e2a\u5b57\u7684\u4f4e\u4f4d\u5b57\u8282\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5b57\u4e2d\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\u60c5\u51b5\uff1f\u4e3a\u6b64\uff0c\u6709\u4e00\u4e2a\u5355\u72ec\u7684MOV.B\u5b8f\uff0c\u5373\u4f7f\u7c7b\u578b\u662fWORD\uff0c\u5b83\u4e5f\u53ea\u590d\u5236\u4e00\u4e2a\u5b57\u8282\uff1b\u8fd8\u6709\u4e00\u4e2aMOV.W\u5b8f\uff0c\u5b83\u590d\u5236\u6574\u4e2a\u5b57\uff0c\u800c\u4e0d\u8003\u8651\u76ee\u6807\u7c7b\u578b\u3002\n\u4e0b\u4e00\u4e2a\u6539\u8fdb\u662f\u589e\u52a0\u4e86\u4e24\u4e2a\u7c7b\u578b\u7684\u5173\u952e\u5b57\uff1aZPBYTE\u548cZPWORD\u3002\u8fd9\u4e9b\u5c06\u7528\u4e8e\u5c06\u53d8\u91cf\u5206\u914d\u7ed9\u5feb\u901f\u7684\u96f6\u9875\u5185\u5b58\uff0c\u4f46\u4e0d\u662f\u901a\u8fc7\u4f7f\u7528X\u5bc4\u5b58\u5668\u6765\u8ddf\u8e2a\u5806\u6808\u4e0a\u7684\u53d8\u91cf\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u5c06\u5b58\u50a8\u5728\u96f6\u9875\u4e2d\u7684\u56fa\u5b9a\u4f4d\u7f6e\uff0c\u51fd\u6570\u542f\u52a8\u65f6\u8be5\u4f4d\u7f6e\u7684\u4efb\u4f55\u6570\u636e\u90fd\u5c06\u590d\u5236\u5230\u786c\u4ef6\u5806\u6808\uff0c\u7136\u540e\u5728\u51fd\u6570\u7ed3\u675f\u65f6\u6062\u590d\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8fd9\u4e9b\u53d8\u91cf\u5728\u4f7f\u7528\u5b83\u4eec\u7684\u51fd\u6570\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65f6\u5c06\u6709\u51e0\u4e2a\u5468\u671f\u7684\u5f00\u9500\uff0c\u4f46\u662f\u5b83\u4eec\u7684\u8bbf\u95ee\u901f\u5ea6\u8981\u5feb\u4e00\u4e2a\u5468\u671f\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u88ab\u8bbf\u95ee\u65f6\u6ca1\u6709\u76f8\u5bf9\u4e8eX\u5bc4\u5b58\u5668\u7684\u5f00\u9500\u3002\u90a3\u4e48\u5982\u4f55\u77e5\u9053\u4f55\u65f6\u4f7f\u7528\u6bcf\u79cd\u7c7b\u578b\u7684\u53d8\u91cf\u5462\uff1f\u521b\u5efaZPBYTE\u53d8\u91cf\u7684\u5f00\u9500\u7ea6\u4e3a20\u4e2a\u5468\u671f\uff0c\u800c\u521b\u5efaZPWORD\u7684\u5f00\u9500\u7ea6\u4e3a33\u4e2a\u5468\u671f\u3002\u53ea\u8981\u53d8\u91cf\u88ab\u8bbf\u95ee\u7684\u6b21\u6570\u8db3\u4ee5\u8bc1\u660e\u521b\u5efa\u65f620\u621633\u4e2a\u5468\u671f\u7684\u5f00\u9500\u662f\u5408\u7406\u7684\uff0c\u7528ZPBYTE\u548cZPWORD\u58f0\u660e\u7684\u53d8\u91cf\u5c31\u4f1a\u6bd4\u7528byte\u548cword\u58f0\u660e\u7684\u53d8\u91cf\u5feb\u3002\u6b63\u5982\u6211\u5728\u4e0b\u9762\u8ba4\u8bc6\u5230\u7684\u90a3\u6837\uff0c\u6211\u81f3\u5c11\u9009\u62e9\u4e86\u4e00\u6b21\u9519\u8bef\u7684\u7c7b\u578b\u3002\n\u4e0b\u4e00\u4e2a\u96be\u9898\u662f\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\u3002\u4e3a\u6b64\uff0c\u6709\u4e00\u4e2a\u4e0evars\u5b8f\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\u7684args\u5b8f\uff1a\n\u51fd\u6570\u6d4b\u8bd5\uff1b\u58f0\u660e\u51fd\u6570\u6d4b\u8bd5\u53c2\u6570byte Foo\uff0cbar\uff1b\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u5b57\u8282\u957f\u5ea6\u7684\u53c2\u6570vars ZPBYTE BAZ\uff1b\u5728\u96f6\u9875\u672b\u58f0\u660e\u4e00\u4e2a\u5b57\u8282\u957f\u5ea6\u7684\u5c40\u90e8\u53d8\u91cf.\u7ed3\u675f\uff1b\u8fd8\u539f\u5806\u6808\u6307\u9488\u5e76\u8fd4\u56de\u3002\n\u8fd9\u5c06\u4e3a\u51fd\u6570\u5206\u914d\u4e24\u4e2a\u5b57\u8282\u7684\u8f93\u5165\u3002\u503c\u4e0eCALL\u5b8f\u4e00\u8d77\u4f20\u9012\uff1a\n\u8fd9\u4f1a\u5c06#5\u590d\u5236\u5230foo\uff0c\u5c06value\u590d\u5236\u5230bar\uff0c\u7136\u540e\u8df3\u5230\u6807\u7b7etest\u3002\u8fd9\u6837\u505a\u7684\u65b9\u4fbf\u4e4b\u5904\u5728\u4e8e\uff0c\u56e0\u4e3aCall\u5728\u5185\u90e8\u4f9d\u8d56\u4e8eMOV.B\u548cMOV.W\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u6b63\u786e\u5730\u5c06\u6570\u636e\u590d\u5236\u5230\u51fd\u6570\u7684\u4f20\u5165\u53c2\u6570\u4e2d\uff0c\u800c\u4e0d\u8003\u8651\u7c7b\u578b\u3002\u5b83\u8fd8\u77e5\u9053\u5728\u7528byte\u548cword\u58f0\u660e\u7684\u53d8\u91cf\u540d\u7684\u672b\u5c3e\u6dfb\u52a0\u201c\uff0cX\u201d\uff0c\u5e76\u5728\u590d\u5236\u65f6\u5bf9\u7528ZPBYTE\u548cZPWORD\u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u52a0\u201c\uff0cX\u201d\u3002\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u540d\u4e3aret_val\u7684\u4e13\u7528\u5168\u5c40\u53d8\u91cf\u4e2d\u7684\u503c\u3002\u5982\u679c\u9700\u8981\uff0c\u8c03\u7528\u8005\u53ef\u4ee5\u5c06\u503c\u4ece\u90a3\u91cc\u590d\u5236\u5230\u81ea\u5df1\u7684\u5185\u5b58\u4e2d\u3002\n\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u4e32\uff0c\u901a\u5e38\u529f\u80fd\u7c7b\u4f3c\u4e8e\u5b57\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u5730\u5740\u662f\u4e00\u4e2a16\u4f4d\u6570\u5b57\u3002\u552f\u4e00\u7684\u533a\u522b\u662f\u53ef\u4ee5\u5c06\u6587\u5b57\u5b57\u7b26\u4e32\u4f20\u9012\u7ed9CALL\u5b8f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u5b57\u7b26\u4e32\u5c06\u5d4c\u5165\u5230\u7a0b\u5e8f\u4e2d\uff0c\u5e76\u5c06\u5176\u5730\u5740\u586b\u5145\u5230\u5b57\u7b26\u4e32\u53d8\u91cf\u4e2d\u3002\u8fd9\u4e24\u4e2a\u793a\u4f8b\u7b49\u6548\uff1a\nSTRING_ADDRESS\uff1aDB&#34\uff1bHello\uff0cWorld\uff01&#34\uff1b\uff0c0\uff1b\u6587\u5b57\u5b57\u7b26\u4e32\u6570\u636e.\u8c03\u7528DrawText\uff0cstring_address\uff1b\u8c03\u7528DrawText\u4f20\u9012STRING_ADDRESS\u8c03\u7528DrawText\uff0c&#34\uff1bHello\uff0cWorld\uff01&#34\uff1b\uff1b\u8c03\u7528\u76f4\u63a5\u4f20\u9012\u5b57\u7b26\u4e32\u7684DrawText\u3002\n\u5b8f\u89c2\u96be\u9898\u7684\u6700\u540e\u4e00\u5757\u662f\u6dfb\u52a0\u7ed3\u6784\u5173\u952e\u5b57\uff0c\u5982if\u548cswitch\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u90a3\u4e9b\u5df2\u7ecf\u88ab\u6c47\u7f16\u7a0b\u5e8f\u5360\u7528\u4e86\uff0c\u6240\u4ee5\u6211\u4f7f\u7528\u4e86if_eq\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u5b83\u3002\u6211\u4e3aIF\u8bed\u53e5\u6dfb\u52a0\u4e86\u51e0\u4e2a\u522b\u540d\uff0c\u6bd4\u5982IF_EQ\u7684IF_0\u548cIF_FALSE\uff0c\u4ee5\u4f7f\u6e90\u4ee3\u7801\u66f4\u5177\u53ef\u8bfb\u6027\u3002\u5b8f\u4f1a\u8ddf\u8e2a\u6240\u6709\u7ed3\u6784\u7684\u5d4c\u5957\u60c5\u51b5\uff0c\u56e0\u6b64\u5b83\u4eec\u53ef\u4ee5\u81ea\u7531\u5d4c\u5957\u548c\u6df7\u5408\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u4f8b\u5b50\uff1a\n\u51fd\u6570\u6d4b\u8bd5\u53c2\u6570\u5b57\u8282\u503c\uff0c\u8f85\u52a9\u53d8\u91cf\u5b57\u7ed3\u679c\u7ed3\u675f.\u54ea\u4e2a\u503c\uff1b\u5f00\u5173(\u503c)\u5982#0\uff1b\u503c==0 MOV#1234\uff0cRESULT\uff1b\u5c0616\u4f4d\u7acb\u5373\u6570\u590d\u5236\u5230\u53d8\u91cfRESULT\uff0c\u5982#1\uff0c#2\uff0c#3\uff1bVALUE==1\uff0c2\u62163 MOV#5678\uff0cRESULT\uff1b\u5c0616\u4f4d\u7acb\u5373\u6570\u590d\u5236\u5230\u53d8\u91cfRESULT\uff0c\u5982#4\uff1bVALUE==4 LDA SUBCENT\uff0cX IF_0\uff1b\u5982\u679c\u53d8\u91cfSUBJENT==0 MOV#ABC\uff0cRESULT_IF\uff1b\u5982\u679c\u53d8\u91cfSUBCED\uff01=0 MOV#DEF\uff0c\u7ed3\u679cEND_IF DEFAULT\uff1b\u4e0a\u8ff0\u60c5\u51b5\u4e0eMOV#0\u4e0d\u5339\u914d\u7684\u9ed8\u8ba4\u60c5\u51b5\uff0c\u7ed3\u679c\u7ed3\u675f.\u7aef\u90e8\u3002\n\u8fd9\u770b\u8d77\u6765\u6bd4\u7eaf\u7ec4\u88c5\u8981\u5e72\u51c0\u5f97\u591a\u3002\u8ba9\u8fd9\u4e9b\u5b8f\u5de5\u4f5c\u662f\u5411\u79fb\u690d\u6e38\u620f\u8fc8\u51fa\u7684\u4e00\u5927\u6b65\uff0c\u5e76\u4f7f\u4f7f\u7528\u6c47\u7f16\u8bed\u8a00\u53d8\u5f97\u66f4\u52a0\u6109\u5feb\u3002\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5b8f\u53ef\u4ee5\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u6bd4\u5982INC.W\u548cROR.W\u3002\n\u6709\u51e0\u4e2a\u51cf\u901f\u5e26\u521b\u9020\u4e86\u8fd9\u4e2a\u7248\u672c\u7684\u6e38\u620f\u3002\u5b9e\u73b0\u968f\u673a\u6570\u751f\u6210\u5668\u8ba9\u6211\u56f0\u60d1\u4e86\u4e00\u6bb5\u65f6\u95f4\u3002\u8fd9\u662f\u6211\u5728\u4e00\u4e2a\u590d\u53e4\u7f16\u7a0b\u7f51\u7ad9\u4e0a\u627e\u5230\u7684\u7b97\u6cd5\uff1a\n\u6c47\u7f16\u4e2d\u7684\u751f\u6210\u5668\u7684\u8f93\u51fa\u5728\u8bb8\u591a\u5faa\u73af\u4e2d\u90fd\u662f\u6b63\u786e\u7684\uff0c\u7136\u540e\u5728\u67d0\u4e00\u70b9\u4e0a\u4e0eC\u7248\u672c\u80cc\u9053\u800c\u9a70\u3002\u8fd9\u4f1a\u5bfc\u81f4\u968f\u673a\u751f\u6210\u7684\u8d34\u56fe\u770b\u8d77\u6765\u5f88\u63a5\u8fd1\uff0c\u4f46\u4e0e\u5176\u4ed6\u7248\u672c\u4e0d\u540c\u3002(\u5728Python\u4e2d\u6d4b\u8bd5\u8f93\u51fa\u65f6\uff0c\u6211\u610f\u8bc6\u5230\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u7279\u6027\uff0c\u5373\u8be5\u7b97\u6cd5\u5728\u91cd\u590d\u4e4b\u524d\u53ea\u751f\u6210\u4e00\u6b21\u6bcf\u4e2a16\u4f4d\u7684\u503c\u3002)\u3002\u6b64\u7b97\u6cd5\u57288\u4f4d\u4f53\u7cfb\u7ed3\u6784\u4e0a\u975e\u5e38\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5c0616\u4f4d\u503c\u5de6\u79fb7\u7b49\u540c\u4e8e\u4ec5\u5c06\u4f4e\u4f4d\u5b57\u8282\u53f3\u79fb\u4e00\u6b21\uff0c\u7136\u540e\u5c06\u5176\u79fb\u81f3\u9ad8\u4f4d\u5b57\u8282\u3002\u5728\u4e0b\u4e00\u884c\u5411\u53f3\u79fb\u4f4d9\u4e5f\u975e\u5e38\u6709\u6548\uff0c\u56e0\u4e3a\u8fd9\u76f8\u5f53\u4e8e\u5c06\u9ad8\u4f4d\u5b57\u8282\u5207\u6362\u5230\u4f4e\u4f4d\u5b57\u8282\uff0c\u7136\u540e\u5411\u53f3\u79fb\u4f4d\u4e00\u6b21\u300265(C)02\u4e00\u6b21\u53ea\u80fd\u79fb\u4f4d\u4e00\u4f4d\uff0c\u56e0\u6b64\u5c06\u8fd9\u4e9b\u53c2\u6570\u51cf\u5c11\u5230\u4e00\u4f4d\u79fb\u4f4d\u4f1a\u4f7f\u5b83\u4eec\u7684\u6548\u7387\u5927\u5927\u63d0\u9ad8\u3002\u6211\u9047\u5230\u7684\u95ee\u9898\u662f\uff0c\u53f3\u79fb\u4e00\u6b21\u4ee5\u5b8c\u62107\u7684\u5de6\u79fb\u9700\u8981\u5728\u4e00\u6b21\u53f3\u79fb\u671f\u95f4\u79fb\u5165\u4e00\u4f4d\u6765\u586b\u514516\u4f4d\u503c\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u3002\u56e0\u4e3a\u6211\u9519\u8fc7\u4e86\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u5728\u53d1\u6563\u4e4b\u524d\uff0c\u968f\u673a\u503c\u78b0\u5de7\u6709\u4e00\u6bb5\u65f6\u95f4\u662f\u6b63\u786e\u7684\u3002\n\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u6559\u8bad\u3002\u6c47\u7f16\u8bed\u8a00\u6bd4\u5176\u4ed6\u8bed\u8a00\u9700\u8981\u66f4\u957f\u7684\u7f16\u5199\u65f6\u95f4\uff0c\u7279\u522b\u662f\u5f53\u4f60\u8003\u8651\u5230\u5728\u5176\u4ed6\u8bed\u8a00\u4e2d\u4e0d\u4f1a\u72af\u7684\u9519\u8bef\u65f6\u3002\u8fd9\u4e2a\u7b97\u6cd5\u592a\u7b80\u5355\u4e86\uff0c\u7528C\u8bed\u8a00\u4e0d\u4f1a\u641e\u7838\uff0c\u4f46\u662f\u5728\u6211\u610f\u8bc6\u5230\u6211\u5728\u6c47\u7f16\u4e2d\u7684\u9519\u8bef\u4e4b\u524d\uff0c\u6211\u82b1\u4e86\u5f88\u957f\u65f6\u95f4\u5728\u8fd9\u4e0a\u9762\u3002\n\u53e6\u4e00\u4e2a\u6311\u6218\u662f\u7ec4\u88c5\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u5982\u4e0a\u6240\u8ff0\uff0c\u5f88\u591a\u4ee3\u7801\u4e25\u91cd\u4f9d\u8d56\u5b8f\u3002\u5b8f\u6c47\u7f16\u5668AS\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u90fd\u4f1a\u5c06\u6574\u4e2a\u5b8f\u4f53\u590d\u5236\u5230\u6e90\u4ee3\u7801\u4e2d\uff0c\u5176\u4e2d\u5305\u62ec\u6240\u6709\u672a\u91c7\u7528\u7684\u4ee3\u7801\u8def\u5f84\u3002\u4f8b\u5982\uff0cMOV.w\u5b8f\u957f\u8d85\u8fc7200\u884c\uff0c\u56e0\u6b64\u6c47\u7f16\u7a0b\u5e8f\u751f\u6210\u7684\u6c47\u7f16\u5217\u8868\u5bf9\u4e8e\u6e90\u4ee3\u7801\u4e2d\u7684\u6bcf\u4e2aMOV.W\u90fd\u4f1a\u589e\u957f\u8be5\u957f\u5ea6\u3002\u8fd9\u4f1a\u5bfc\u81f4\u6e05\u5355\u5728\u6bcf\u6b21\u7ec4\u88c5\u65f6\u81a8\u80c0\u523026MB\u4ee5\u4e0a\uff0c\u8fd9\u53ef\u80fd\u9700\u8981\u957f\u8fbe10\u79d2\u7684\u65f6\u95f4\u3002Python\u811a\u672c\u4f1a\u8fc7\u6ee4\u6389\u6e05\u5355\u4e2d\u7684\u6240\u6709\u591a\u4f59\u884c\uff0c\u4ee5\u4fbf\u5728\u52a0\u8f7d\u5230\u6a21\u62df\u5668\u4e2d\u65f6\u770b\u8d77\u6765\u662f\u6b63\u786e\u7684\u3002\u5bf9\u4e8e\u6211\u8981\u6784\u5efa\u7684\u8ba1\u7b97\u5668\uff0c\u5f53\u7a0b\u5e8f\u5927\u5c0f\u589e\u52a010\u500d\u6216\u66f4\u591a\u65f6\uff0c\u957f\u7684\u6c47\u7f16\u65f6\u95f4\u5c06\u662f\u4e0d\u5207\u5b9e\u9645\u7684\u3002\n\u6700\u540e\u4e00\u4e2a\u95ee\u9898\u662f\u8bd5\u56fe\u5728\u6c47\u7f16\u4e2d\u521b\u5efa\u7b49\u6548\u7684\u7ed3\u6784\u6570\u7ec4\u3002\u8fd9\u5c31\u662f\u6211\u5982\u4f55\u5b58\u50a8\u4e0e\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u7684\u602a\u7269\u548c\u6c34\u6676\u76f8\u5173\u7684\u4fe1\u606f\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u7f16\u8bd1\u5668\u5c06\u8ba1\u7b97\u51fa\u7ed3\u6784\u7684\u5927\u5c0f\uff0c\u5e76\u5c06\u6570\u7ec4\u7d22\u5f15\u4e58\u4ee5\u8be5\u503c\u4ee5\u8bbf\u95ee\u7ed3\u6784\u7684\u6b63\u786e\u6210\u5458\u3002\u5728\u6c47\u7f16\u4e2d\uff0c\u6211\u786c\u7f16\u7801\u4e86\u4e00\u7cfb\u5217\u79fb\u4f4d\u548c\u52a0\u6cd5\uff0c\u4ee5\u5b8c\u6210\u57fa\u4e8e\u7ed3\u6784\u5927\u5c0f\u7684\u4e58\u6cd5\uff0c\u56e0\u4e3a\u5b83\u662f\u5e38\u91cf\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u8ba1\u7b97\u9519\u4e86\u5927\u5c0f\uff0c\u6d6a\u8d39\u4e86\u5f88\u591a\u65f6\u95f4\u8bd5\u56fe\u627e\u51fa\u4e3a\u4ec0\u4e48\u6570\u636e\u662f\u9519\u8bef\u7684\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u9519\u8bef\u5728C\u4e2d\u4e0d\u4f1a\u53d1\u751f\uff0c\u56e0\u4e3a\u7f16\u8bd1\u5668\u4f1a\u4e3a\u60a8\u8fdb\u884c\u8ba1\u7b97\u3002\nGitHub 65C02\u4e0a\u7684\u673a\u5668\u4eba\u6e38\u620f\u4f18\u5316\u7a0b\u5e8f\u96c6GitHub\u4e0a\u7684\u7a0b\u5e8f\u96c6\u4f18\u5316\u5668\u6b64\u7248\u672c\u57fa\u4e8e\u4e0a\u9762\u7684\u4f20\u7edf\u7a0b\u5e8f\u96c6\u7248\u672c\uff0c\u56e0\u6b64\u79fb\u690d\u5b83\u4e0d\u9700\u8981\u592a\u591a\u5de5\u4f5c\u3002\u4e3b\u8981\u4efb\u52a1\u662f\u91cd\u5199\u4e0a\u9762\u7684\u6240\u6709\u5b8f\uff0c\u4ee5\u4fbf\u4e0e\u6211\u7684\u6c47\u7f16\u4f18\u5316\u5668\u7a0b\u5e8f\u914d\u5408\u4f7f\u7528\u3002\u4e3a\u6b64\uff0c\u6211\u4ece\u4f7f\u7528\u5b8f\u6c47\u7f16\u5668\u6539\u4e3a\u4f7f\u7528NASM\uff0c\u5b83\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2ax86\u6c47\u7f16\u5668\u3002NASM\u5141\u8bb8\u60a8\u5728\u4e0d\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5305\u542b\u6709\u6548\u6307\u4ee4\u7684\u60c5\u51b5\u4e0b\u5b9a\u4e49\u548c\u5c55\u5f00\u6587\u4ef6\u4e2d\u7684\u5b8f\uff0c\u56e0\u6b64\u572865C02\u7a0b\u5e8f\u96c6\u4e0a\u8fd0\u884c\u5b83\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\u5b83\u8fd8\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u52a8\u6001\u5b9a\u4e49\u7b26\u53f7\u548c\u6807\u7b7e\u7684\u7cfb\u7edf\uff0c\u4f7f\u6211\u53ef\u4ee5\u5c06\u6709\u7528\u7684\u4fe1\u606f\u4ece\u5b8f\u4f20\u9012\u5230\u4f18\u5316\u7a0b\u5e8f\u3002\u8fd9\u662f\u7f16\u8bd1\u8fc7\u7a0b\uff1a\u572865C02\u6e90\u4ee3\u7801\u4e0a\u8fd0\u884cNASM\u3002\u5b8f\u88ab\u6269\u5c55\uff0c\u652f\u6301If\u548cWhich\u8fd9\u6837\u7684\u7ed3\u6784\u3002\u5c40\u90e8\u53d8\u91cf\u88ab\u6807\u8bc6\uff0c\u4f46\u6ca1\u6709\u5206\u914d\u5730\u5740\u3002\u5c06\u5904\u7406\u8fc7\u7684\u6c47\u7f16\u6307\u4ee4\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n\u5c06\u5904\u7406\u540e\u7684\u7a0b\u5e8f\u96c6\u6587\u4ef6\u4eceNASM\u4f20\u9012\u5230\u7a0b\u5e8f\u96c6\u4f18\u5316\u5668Python\u811a\u672c\u3002\u4f18\u5316\u5668\u4e3a\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u6700\u4f73\u96f6\u9875\u5730\u5740\uff0c\u5e76\u5c06\u5904\u7406\u540e\u7684\u7a0b\u5e8f\u96c6\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n\u5c06\u5904\u7406\u540e\u7684\u7a0b\u5e8f\u96c6\u6587\u4ef6\u4ece\u4f18\u5316\u5668\u4f20\u9012\u5230\u5b8f\u6c47\u7f16\u5668\uff0c\u540e\u8005\u8f93\u51fa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\u4f18\u5316\u5668\u4ece\u8ddf\u8e2a\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u54ea\u4e9b\u51fd\u6570\u5f00\u59cb\uff0c\u4ece\u7b2c\u4e00\u4e2a\u51fd\u6570\u5f00\u59cb\u3002\u5b83\u8fd8\u8bb0\u5f55\u6bcf\u4e2a\u51fd\u6570\u9700\u8981\u591a\u5c11\u5b57\u8282\u7684\u672c\u5730\u5185\u5b58\uff0c\u7531NASM\u5c55\u5f00\u7684\u5b8f\u5df2\u7ecf\u6807\u8bc6\u3002\u6839\u636e\u6b64\u4fe1\u606f\uff0c\u5b83\u6784\u5efa\u4e86\u4e00\u4e2a\u8c03\u7528\u56fe\uff1a\n\u4f18\u5316\u5668\u901a\u8fc7\u4f7f\u7528\u8c03\u7528\u56fe\u4fe1\u606f\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u5728\u5feb\u901f\u96f6\u9875\u5185\u5b58\u4e2d\u67e5\u627e\u6ca1\u6709\u88ab\u8be5\u51fd\u6570\u8c03\u7528\u7684\u4efb\u4f55\u51fd\u6570\u91cd\u7528\u7684\u5730\u5740\uff0c\u4ece\u800c\u5c06\u5185\u5b58\u5730\u5740\u5206\u914d\u7ed9\u672c\u5730\u5185\u5b58\u3002\u4f8b\u5982\uff0c\u5728\u4e0a\u56fe\u4e2d\uff0c\u51fd\u6570main\u548cclrscr\u5fc5\u987b\u4e3a\u5176\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u4e0d\u540c\u7684\u5730\u5740\u3002\u5982\u679c\u4e0d\u662f\uff0cmain\u5b58\u50a8\u5728\u5176\u6307\u5b9a\u5730\u5740\u7684\u6570\u636e\u5c06\u88abclrscr\u4f7f\u7528\u7684\u5c40\u90e8\u53d8\u91cf\u8986\u76d6\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u51fd\u6570clrscr\u548cputc\u53ef\u4ee5\u88ab\u5206\u914d\u76f8\u540c\u7684\u5b58\u50a8\u5668\u5730\u5740\u3002\u4ece\u4e0a\u56fe\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u51fa\uff0cputc\u548cclrscr\u4ece\u4e0d\u4e92\u76f8\u8c03\u7528\uff0c\u4e5f\u4e0d\u4f1a\u8c03\u7528\u8c03\u7528\u5b83\u4eec\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u5b83\u4eec\u91cd\u7528\u76f8\u540c\u7684\u5185\u5b58\u662f\u5b89\u5168\u7684\u3002\u4e0b\u9762\u662f\u4f18\u5316\u5668\u8f93\u51fa\u7684\u5185\u5b58\u5206\u914d\u8868\uff1a\n\u6bcf\u884c\u4ee3\u8868\u4e00\u4e2a\u5b57\u8282\u7684\u5feb\u901f\u96f6\u9875\u5185\u5b58\uff0c\u6bcf\u4e2a\u6846\u4ee3\u8868\u4e00\u4e2a\u4f7f\u7528\u8be5\u5b57\u8282\u5185\u5b58\u7684\u53d8\u91cf\u3002\u5982\u8868\u6240\u793a\uff0c\u5728\u8fd9\u4e2a\u5c0f\u793a\u4f8b\u4e2d\uff0c\u5b57\u82822\u7531\u516d\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\u4f7f\u7528\u3002\u5982\u4e0a\u6240\u8ff0\uff0cputc\u548cclrscr\u7684\u5185\u5b58\u91cd\u53e0\uff0cmain\u4f7f\u7528\u4e0eclrscr\u4e0d\u540c\u7684\u5185\u5b58\u90e8\u5206\u3002\n\u5728\u7f16\u8bd1\u65f6\u5c06\u56fa\u5b9a\u7684\u96f6\u9875\u5730\u5740\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf\u610f\u5473\u7740\u5b83\u4eec\u4e0d\u518d\u9700\u8981\u7d22\u5f15\u5230X\u5bc4\u5b58\u5668\u3002\u8fd9\u6709\u51e0\u4e2a\u4f18\u70b9\uff1a\n\u8bbf\u95ee\u96f6\u9875\u4e2d\u7684\u56fa\u5b9a\u5730\u5740\u8981\u5feb\u4e00\u4e2a\u5468\u671f\u3002\u4f8b\u5982\uff0c\u5730\u5740\u5728\u96f6\u9875\u7684LDA\u5730\u5740\u662f3\u4e2a\u5468\u671f\uff0c\u800cLDA\u5730\u5740X\u662f4\u4e2a\u5468\u671f\u3002\nX\u5bc4\u5b58\u5668\u73b0\u5728\u53ef\u4ee5\u514d\u8d39\u7528\u4e8e\u5176\u4ed6\u7528\u9014\u3002\u5728\u4e0d\u88ab\u72ec\u5360\u4e3a\u6570\u636e\u5806\u6808\u6307\u9488\u7684\u60c5\u51b5\u4e0b\uff0cX\u53ef\u4ee5\u7528\u4e8e\u6240\u6709\u5176\u4ed6\u7c7b\u578b\u7684\u4e1c\u897f\uff0c\u5982\u5faa\u73af\u8ba1\u6570\u5668\u3002\u4f8b\u5982\uff0c\u6bcf\u6b21\u7528INX\u901a\u8fc7\u5faa\u73af\u9012\u589eX\u662f2\u4e2a\u5468\u671f\uff0c\u800c\u5c06\u8ba1\u6570\u5668\u5b58\u50a8\u5728\u6570\u636e\u5806\u6808\u4e0a\u5e76\u7528INC\u8ba1\u6570\u5668\u9012\u589e\u65f6\uff0cX\u662f6\u4e2a\u5468\u671f\u3002\n\u6ca1\u6709\u51fd\u6570\u5f00\u9500\u3002\u6bcf\u6b21\u8c03\u7528\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u8c03\u6574X\u5bc4\u5b58\u5668\u4ee5\u5728\u6570\u636e\u5806\u6808\u4e0a\u817e\u51fa\u7a7a\u95f4\u3002\u5728\u51fd\u6570\u5f00\u59cb\u65f6\u5c06X\u5bc4\u5b58\u5668\u4fdd\u5b58\u5230\u786c\u4ef6\u5806\u6808\u5e76\u5728\u7ed3\u675f\u65f6\u6062\u590d\u5b83\u9700\u89817\u4e2a\u5468\u671f\u3002\u7528\u4e8e\u8c03\u6574\u6570\u636e\u5806\u6808\u6307\u9488\u7684\u5c40\u90e8\u53d8\u91cf\u7684\u6bcf\u4e2a\u5b57\u8282\u7684DEX\u591a\u82b1\u8d392\u4e2a\u5468\u671f\u3002\n\u4e00\u79cd\u7c7b\u578b\u7684\u672c\u5730\u5b58\u50a8\u5668\u3002\u4f7f\u7528\u4f20\u7edf\u7684\u6c47\u7f16\u5b8f\uff0c\u6211\u5fc5\u987b\u9009\u62e9\u662f\u4f7f\u7528byte\u548cword\u5728X\u7d22\u5f15\u7684\u6570\u636e\u5806\u6808\u4e0a\u4fdd\u7559\u672c\u5730\u53d8\u91cf\u7a7a\u95f4\uff0c\u8fd8\u662f\u4f7f\u7528ZPBYTE\u548cZPWORD\u4e34\u65f6\u91ca\u653e\u96f6\u9875\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u7a7a\u95f4\u3002\u5728\u5c06\u6e38\u620f\u79fb\u690d\u5230\u4f20\u7edf\u7ec4\u88c5\u65f6\uff0c\u6211\u81f3\u5c11\u6709\u4e00\u6b21\u505a\u9519\u4e86\u8fd9\u4e2a\u6743\u8861\u3002\u4f7f\u7528\u4f18\u5316\u5668\uff0c\u6240\u6709\u53d8\u91cf\u90fd\u5177\u6709ZPBYTE\u548cZPWORD\u7684\u901f\u5ea6\uff0c\u6ca1\u6709\u4efb\u4f55\u5f00\u9500\u3002\n\uff1b\u4f20\u7edf\u6c47\u7f16\u51fd\u6570mult5\uff1b\u5c06\u4e00\u4e2a\u6570\u5b57\u4e58\u4ee55\u4e2a\u53c2\u6570\u5b57\u8282\u6570\u53d8\u91cf\u5b57\u8282\u8ba1\u6570\u5668End LDA#5\uff1b\u5faa\u73af\u8ba1\u6570\u5668STA\u8ba1\u6570\u5668\uff0cX LDA#0\uff1bproduct=0\u3002loop\uff1aCLC ADC Num\uff0cX\uff1bAdd Number DEC Counter\uff0cX\uff1bCOUNTER--BNE\u3002\u5faa\u73afMOV.B A\uff0cret_val end\u3002\n\uff1b\u4f18\u5316\u6c47\u7f16FUNC mult5\uff1b\u5c06\u4e00\u4e2a\u6570\u5b57\u4e58\u4ee55\u4e2a\u53c2\u6570\u5b57\u8282\u6570\uff1b\u8ba1\u6570\u5668\u5b58\u50a8\u5728X\u4e2d\uff0c\u800c\u4e0d\u662f\u7ed3\u675fLDX#5\uff1b\u5faa\u73af\u8ba1\u6570\u5668LDA#0\uff1bproduct=0\u3002loop\uff1aCLC ADC num\uff1bADD NUMBER DEX\uff1bCOUNTER--BNE.LOOP MOV.B A\uff0cret_val end\u3002\n\uff1b\u4f20\u7edf\u7ec4\u4ef6mult5\uff1aPHX DEX LDA#5 STA 1\uff0cX LDA#0.loop\uff1aCLC ADC 0\uff0cX DEC 1\uff0cX BNE.loop STA ret_val STZ ret_val+1 PLX RTS END\u3002\n\uff1b\u4f18\u5316\u7684\u6c47\u7f16mult5\uff1a\uff1b\u65e0\u5806\u6808\u8c03\u6574\u5f00\u9500LDX#5 LDA#0.loop\uff1aCLC ADC 2\uff1b1\u5468\u671f\u66f4\u5feb\u7684DEX\uff1b4\u5468\u671f\u66f4\u5feb\u7684BNE.loop STA ret_val STZ ret_val+1\uff1b\u65e0\u5806\u6808\u6062\u590d\u5f00\u9500RTS end\n\u4f18\u5316\u540e\u7684\u7248\u672c\u4f53\u79ef\u66f4\u5c0f\uff0c\u5468\u671f\u66f4\u77ed\u3002\u8fd9\u5728\u5faa\u73af\u4e2d\u5c24\u5176\u91cd\u8981\uff0c\u5728\u5faa\u73af\u4e2d\uff0c\u8282\u7701\u7684\u5468\u671f\u6bd4\u51cf\u5c11\u7684\u51fd\u6570\u5f00\u9500\u91cd\u8981\u5f97\u591a\u3002\n\u5728\u8fd0\u884c\u4f18\u5316\u5668\u548c\u65b0\u7684\u57fa\u4e8eNASM\u7684\u5b8f\u4e4b\u540e\uff0c\u5c06\u4f20\u7edf\u6c47\u7f16\u7248\u672c\u8f6c\u6362\u4e3a\u6b64\u7248\u672c\u76f8\u5f53\u7b80\u5355\u3002\u6709\u8da3\u7684\u662f\uff0c\u4f20\u7edf\u7248\u672c\u53ea\u5c06X\u5bc4\u5b58\u5668\u7528\u4e8e\u6570\u636e\u5806\u6808\uff0c\u56e0\u6b64\u6211\u4e0d\u9700\u8981\u66f4\u6539\u4efb\u4f55\u4f7f\u7528X\u7684\u6e38\u620f\u4ee3\u7801\u5c31\u53ef\u4ee5\u4f7f\u4f18\u5316\u7248\u672c\u5de5\u4f5c\u3002\u8fd9\u662f\u56e0\u4e3a\u4f18\u5316\u7248\u672c\u4f7f\u7528\u7684\u5b8f\u90fd\u4e0d\u4f1a\u89e6\u53caX\uff0c\u56e0\u6b64\u5b83\u5728\u6240\u6709\u51fd\u6570\u4e2d\u90fd\u4fdd\u6301\u4e0d\u53d8\uff0c\u5e76\u4e14\u63d0\u4f9b\u7ed9\u8bbf\u95ee\u5c40\u90e8\u53d8\u91cf\u7684\u6240\u6709\u6307\u4ee4\u7684\u504f\u79fb\u91cf\u73b0\u5728\u90fd\u662f\u4f18\u5316\u5668\u5206\u914d\u7684\u5730\u5740\u3002\u5728\u4f18\u5316\u7248\u672c\u4e2d\u67e5\u627e\u5e76\u5220\u9664\u6240\u6709\u5bf9X\u7684\u5f15\u7528\u8282\u7701\u4e86\u5927\u91cf\u5468\u671f\u3002\u8fd4\u56de\u5e76\u7528\u65b0\u7684\u7a7a\u95f2X\u66ff\u6362\u4e00\u4e9b\u8ba1\u6570\u5668\u53d8\u91cf\uff0c\u5c06\u4f18\u5316\u7a0b\u5e8f\u7684\u901f\u5ea6\u63d0\u9ad8\u4e861%\u3002\n\u673a\u5668\u4eba\u6e38\u620f-GitHub\u4e0a\u7684\u4f20\u7edf\u6c47\u7f16\u5c06\u6e38\u620f\u79fb\u690d\u5230C\u8bed\u8a00\u7684\u7b2c\u4e00\u6b65\u662f\u542f\u52a8\u5e76\u8fd0\u884cCC65\u7f16\u8bd1\u5668\u3002\u5728\u4e00\u5207\u6b63\u5e38\u4e4b\u524d\uff0c\u6700\u521d\u7684\u56db\u4e2a\u5c0f\u65f6\u662f\u4e0e\u94fe\u63a5\u5668\u811a\u672c\u548c\u65e0\u610f\u4e49\u7684\u201c\u8303\u56f4\u9519\u8bef\u201d\u6d88\u606f\u8fdb\u884c\u6597\u4e89\u7684\u3002\u4ece\u2026\u3002\n.", "note_en": "Robot Game - Traditional assembly on GitHub  The 65(C)02 is an 8-bit architecture and has three main 8-bit registers. The A register, or accumulator, is used for most calculations and moving data. The X and Y registers, on the other hand, are used for indexing into memory or counting up or down by one. They can\u2019t be used for general purpose calculations like A. One use for the X and Y registers is stepping through memory. For example, you can access the elements of an array by loading the index into X then using this instruction:\n    This copies the byte of the array that is X bytes past the beginning into the A register. To step through the whole array, just keep increasing X by one and loading the data into the A register (remember, X can\u2019t do arbitrary calculations, only increasing and decreasing by one).\n  The first 256 bytes of memory on the 65(C)02 are special. This area is called the zero page. Because addresses for zero page can fit into 8 bits instead of the 16 for all other addresses, the processor can load the address and access this memory one cycle faster. Since instructions only take 2-7 cycles, shortening an instruction by one cycle leads to a meaningful speed up. As a result, the scarce but faster zero page memory is always at a premium.\n  Many programmers use the X register as a dedicated data stack pointer and keep that stack in zero page since stack memory is used for local variables in functions and should be as fast as possible. In this case, you can think of the address supplied to the instruction as the offset into the stack. This instruction for example would load the second item on the data stack (offset 0 would be the first):\n    The 65(C)02 also has a dedicated stack pointer called SP for the hardware stack, but unlike many architectures, there is no addressing mode that allows access at an offset into this stack. This type of addressing, for example, is not valid:\n    For this reason, the X register is usually used as a data stack pointer and the hardware stack SP is mostly used for return addresses. In order to use the X register for a data stack, every function should decrease X to make some temporary room for local variables then restore X when the function is finished with the local variables and returns. Here is an example:\n  foo:\r  DEX  ;decrease X making room for two bytes on stack\r  DEX\r\r  LDA  #5  ;load the number 5 into the A register\r  STA  0, X  ;store 5 into first byte on stack\r  INC  ;increase value in the A register from 5 to 6\r  STA  1, X  ;store 6 into second byte on stack\r \r  INX  ;release the two bytes reserved on stack\r  INX\r \r  RTS  ;return from function\n  This makes room on the data stack for two bytes, stores a 5 in the first byte, and a 6 in the second byte. At the end, it restores X and returns from the function. This method is flexible since functions can use as many local variables as needed as long as there is still stack space, and it supports recursion.\n  One small improvement (highlighted) is adding a PHX to save the value of X on the hardware stack. This lets us replace the two INX instructions at the end of the function with PLX to pull X off the hardware stack and restore it to what it was before the function started. With this setup, DEX can be used to reserve as many bytes as necessary in a function without having to balance it with an equivalent number of INX instructions at the end:\n  foo:\r  PHX  ;save current data stack pointer to hardware stack\r\r  DEX  ;decrease X making room for two bytes on stack\r  DEX\r\r  LDA  #5  ;load the number 5 into the A register\r  STA  0, X  ;store 5 into first byte on stack\r  INC  ;increase value in the A register from 5 to 6\r  STA  1, X  ;store 6 into second byte on stack\r \r  PLX  ;restore data stack pointer from hardware stack\r \r  RTS  ;return from function\n  Once the system for allocating local variables is in place, the code can be shortened with macros. Different assemblers can have very different macro capabilities.  Macroassembler AS is a powerful one and worked pretty well for this project. Storing the state of functions and other structures in string variables at assembly time allows you to create some extremely powerful macros as I show below. We can generate the code above with macros that are a little easier to read:\n  FUNC foo  ;declare function foo\r  VARS\r  BYTE bar, baz  ;make room on stack for two byte-length locals\r  END\r\t\t\r  LDA  #5  ;load the number 5 into the A register\r  STA bar, X  ;store 5 into local variable bar\r  INC  ;increase the value in A register from 5 to 6\r  STA baz, X  ;store 6 into local variable baz\r END  ;restore stack pointer and return\n  This has several advantages. There&#39;s no need to count how many DEX instructions are needed since the VARS and END macros handle that. Also, it allows the use of named variables, which makes the function much easier to read. The next step is to add support for 16-bit variables where we can use the keyword WORD in addition to BYTE. Here\u2019s another example:\n  FUNC fruits  ;declare function fruits\r  VARS\r  BYTE grape\t  ;declare one byte-length local variable\r  WORD banana,pear  ;declare two word-length local variables\r  END\r\r  LDA pear, X  ;copy first byte of pear to first byte of banana\r  STA banana, X\r  LDA pear + 1, X  ;copy second byte of pear to second byte of banana\r  STA banana + 1, X\r END  ;restore stack pointer and return\n  This code copies the 16-bit value pear to the 16-bit value banana. This is a little tedious because it takes four steps to do what would be something like \u201cbanana=pear\u201d in most other languages. Those four lines can be shortened to one line with a macro:\n    This will make life a lot easier with 16-bit values. What happens when 8-bit and 16-bit values are mixed like this?:\n    This will copy the low byte of grape to the low byte of banana, which is correct, but then copy the byte after grape to the high byte of banana, which is wrong since grape doesn\u2019t have a high byte. We can get around this by having the BYTE macro record that grape is a byte and having the WORD macro record that banana is a word when they are declared so that MOV can intelligently choose not to copy the high byte of a variable that doesn\u2019t have one. On the other hand, when copying a BYTE to a WORD, the macro will copy a zero into the high byte of the destination. This allows MOV to work correctly with any combination of BYTEs and WORDs.\n  What happens when only the low byte of a WORD needs to be copied into another WORD? For that, there is a separate MOV.B macro that only copies a byte even if the type is WORD and also a MOV.W macro that copies a whole word regardless of the destination type.\n  The next improvement is adding two more type keywords: ZPBYTE and ZPWORD. These will be used to assign variables to the fast zero page memory but not by using the X register to keep track of them on a stack. Instead, they will be stored at a fixed location in zero page, and whatever data is at that location when the function starts will be copied to the hardware stack then restored when the function ends. In other words, these variables will have several cycles of overhead at the beginning and end of the function they are used in, but they will be one cycle faster to access since they don\u2019t have the overhead of being relative to the X register when they are accessed. So how do you know when to use each type of variable? The overhead for creating a ZPBYTE variable is about 20 cycles and for ZPWORD around 33. As long as a variable is accessed enough times to justify the 20 or 33 cycle overhead cost at creation, variables declared with ZPBYTE and ZPWORD will be faster than ones declared with BYTE and WORD. As I realized below, I chose the wrong type at least once.\n  The next piece of the puzzle is passing arguments to functions. For this there is an ARGS macro that works similar to the VARS macro:\n  FUNC test  ;declare function test\r  ARGS\r  BYTE foo, bar  ;function takes two byte-length arguments\r  VARS\r  ZPBYTE baz  ;declare one byte-length local variable in zero page\r  END\r ...\r END  ;restore stack pointer and return\n  This allocates two bytes of input to the function. Values are passed with a CALL macro:\n    This copies #5 to foo and value to bar then jumps to label test. The convenient thing about this is that because CALL relies on MOV.B and MOV.W internally, it properly copies the data into the incoming arguments for the function regardless of type. It also knows to add \u201c,X\u201d to the end of variable names declared with BYTE and WORD and to leave it off for variables declared with ZPBYTE and ZPWORD when copying. Functions can return a value in a dedicated global variable set aside for the purpose called ret_val. Callers can copy the value from there to their own memory if needed.\n  The last data type is STRING and normally functions like a WORD since the address of a string is a 16-bit number. The one difference is that a literal string can be passed to the CALL macro in which case the string will be embedded in the program and it\u2019s address filled into the STRING variable. These two examples are equivalent:\n  string_address:\r DB  &#34;Hello, World!&#34;, 0  ;literal string data\r...\r CALL DrawText,string_address  ;call DrawText passing string_address\r\r CALL DrawText, &#34;Hello, World!&#34;  ;call DrawText passing string directly\n  The last piece of the macro puzzle is to add structural keywords like IF and SWITCH. Unfortunately, those are already taken by the assembler so I went with IF_EQ and WHICH instead. I added several aliases for the IF statements like IF_0 and IF_FALSE for IF_EQ to make the source more readable. The macros keep track of the nesting of all structures so they can be nested and mixed freely. Here\u2019s an example:\n  FUNC test\r  ARGS\r  BYTE value, secondary\r  VARS\r  WORD result\r  END\r ...\r  WHICH value  ;switch (value)\r  LIKE  #0  ;case where value==0\r  MOV  #1234,result  ;copy 16-bit immediate to variable result\r  LIKE  #1, #2, #3  ;case where value==1, 2 or 3\r  MOV  #5678,result  ;copy 16-bit immediate to variable result\r  LIKE  #4  ;case where value==4\r  LDA secondary, X\r  IF_0  ;if variable secondary==0\r  MOV  #ABC,result \r  ELSE_IF  ;if variable secondary!=0\r  MOV  #DEF,result \r  END_IF\r  DEFAULT  ;default case where above cases don&#39;t match\r  MOV  #0,result\r  END\r ...\r END\n  This looks much cleaner than it would in pure assembly. Getting these macros working was a huge step towards porting the game and made working with assembly much more enjoyable. There are a handful of other macros that make things easier like INC.W and ROR.W as well.\n  There were a few speed bumps creating this version of the game. Implementing the random number generator had me stumped for a while. This is the algorithm I found on a  retro programming website:\n    The output of the generator in assembly was correct for many cycles then diverged from the C version at some point. This caused the randomly generated map to look close but not identical to the other versions. (Testing the output in Python, I realized the interesting property that this algorithm generates every 16-bit value exactly once before repeating.) This algorithm is convenient on an 8-bit architecture since shifting a 16-bit value left 7 is the same as shifting the low byte right just once and moving it to the high byte. Shifting 9 right on the next line is also very efficient since it&#39;s equivalent to switching the high byte to the low byte then shifting right once. The 65(C)02 can only shift one bit at a time, so reducing these arguments to one-bit shifts makes them much more efficient. The problem I ran into was that shifting right once to accomplish the shift left by 7 needs to shift in a bit to fill the most significant bit of the 16-bit value during the single shift right. Because I missed this, the random values happened to be right for a while before diverging.\n  This is an important lesson. Assembly takes longer to write than other languages, especially when you consider the mistakes you wouldn\u2019t make in other languages. The algorithm is too simple to mess up in C, but I spent a good amount of time stuck on this before I realized my mistake in assembly.\n  Another challenge was how long it takes to assemble. As shown above, a lot of the code relies heavily on macros. Macroassembler AS copies the entire body of the macro into the source each time it\u2019s called which includes all of the code paths that weren\u2019t taken. For example, the MOV.W macro is over 200 lines long, so the assembly listing that the assembler generates grows by that length for every occurence of MOV.W in the source. This causes the listing to balloon to over 26 MB every time it\u2019s assembled which can take up to 10 seconds. A Python script filters all of the extra lines out of the listing so that it appears correct when loaded into the simulator. The long assembly time will be impractical when the program size grows 10 times larger or more for the calculator I want to build.\n  The last hiccup was trying to create the equivalent of an array of structs in assembly. This is how I stored the information related to the monsters and crystals placed throughout the map. In C, the compiler would figure out the size of the struct and multiply the array index by this value to access the correct member of the struct. In assembly, I hard coded a series of shifts and adds to accomplish the multiplication based on the size of the struct since it\u2019s constant. Unfortunately, I miscalculated the size and wasted a lot of time trying to figure out why the data was wrong. This type of mistake doesn\u2019t happen in C since the compiler does the calculation for you.\n       Robot Game - Optimized assembly on GitHub    65C02 Assembly Optimizer on GitHub   This version is based on the traditional assembly version above, so porting it did not require much work. The main task was rewriting all of the above macros to work with my assembly optimizer program. For this, I switched from using Macroassembler AS to  NASM which is actually an x86 assembler. NASM allows you to define and expand macros in a file without checking whether the file consists of valid instructions, so running it on 65C02 assembly is no problem. It also has a better system for dynamically defining symbols and labels which let me pass useful information from the macros to the optimizing program. This is the compiling process:\r\t\t\t\t\r\t\t\t\t Run NASM on 65C02 source. Macros are expanded which support structures like IF and WHICH. Local variables are identified but not assigned an address. Output processed assembly instructions to a file.\n  Pass the processed assembly file from NASM to the assembly optimizer Python script. The optimizer assigns optimal zero page addresses for local variables and outputs the processed assembly to a file.\n  Pass the processed assembly file from the optimizer to Macroassembler AS which outputs a binary file.\n  The optimizer starts by tracing which functions each function calls starting with the very first function. It also records how many bytes for local memory each function needs which the macros expanded by NASM have identified. From this information, it constructs a call graph:\n      The optimizer assigns memory addresses to local memory by using the call graph information to find addresses in the fast zero page memory for each variable that aren\u2019t reused by any of the functions that that function calls. For example, in the graph above, the functions main and clrscr must be assigned different addresses for their local variables. If not, the data that main stores at its assigned addresses would be overwritten by the local variables clrscr uses. On the other hand, the functions clrscr and putc can be assigned the same memory addresses. It\u2019s clear from the graph above that putc and clrscr never call each other or call functions that call either of them, so it&#39;s safe for them to reuse the same memory. Here is a table of memory assignments that the optimizer outputs:\n      Each row represents one byte of fast zero page memory and each box represents a variable that uses that byte of memory. As the table shows, byte 2 is used by six different functions in this small example. As mentioned aboved, the memory for putc and clrscr overlap, and main uses a different part of memory than clrscr.\n  Assigning fixed zero page addresses to local variables at compile time means that they no longer have to be indexed to the X register. This has several advantages:\n  Accessing a fixed address in zero page is one cycle faster. For example, LDA address where address is in zero page is 3 cycles while LDA address,X is 4 cycles.\n  The X register is now free for other uses. Without being monopolized as the data stack pointer, X can be put to use for all kinds of other things like loop counters. For example, incrementing X each time through a loop with INX is 2 cycles, while storing the counter on the data stack and incrementing it with INC counter,X is 6 cycles.\n  No function overhead. The X register has to be adjusted to make room on the data stack each time a function is called. It takes 7 cycles to save the X register to the hardware stack at the beginning of the function and restore it at the end. It takes 2 more cycles for DEX for each byte of local variable used to adjust the data stack pointer.\n  One type of local memory. With the traditional assembly macros I had to decide between using BYTE and WORD to reserve locals space on the X-indexed data stack or using ZPBYTE and ZPWORD to temporarily free up space in zero page for locals. I got this tradeoff wrong at least once when porting the game to traditional assembly. With the optimizer, all variables have the speed of ZPBYTE and ZPWORD without any overhead.\n    ;Traditional assembly\r FUNC mult5  ;multiply a number by 5\r  ARGS\r  BYTE num\r  VARS\r  BYTE counter\r  END\r\r  LDA  #5  ;loop counter\r  STA counter, X\r  LDA  #0  ;product=0\r .loop:\r  CLC\r  ADC num, X  ;add number\r  DEC counter, X  ;counter--\r  BNE .loop\r  MOV.B  A,ret_val\r END\n  ;Optimized assembly\r FUNC mult5  ;multiply a number by 5\r  ARGS\r  BYTE num\r\t\t\r  ;Counter stored in X instead\r  END\r\r  LDX  #5  ;loop counter\r \r  LDA  #0  ;product=0\r .loop:\r  CLC\r  ADC num  ;add number\r  DEX  ;counter--\r  BNE .loop\r  MOV.B  A,ret_val\r END\n    ;Traditional assembly\rmult5:\r  PHX\r  DEX\r  DEX\r \r  LDA  #5\r  STA  1, X\r  LDA  #0\r .loop:\r  CLC\r  ADC  0, X\r  DEC  1, X\r  BNE .loop\r  STA ret_val\r  STZ ret_val + 1\r\t\r  PLX\r  RTS\r END\n  ;Optimized assembly\rmult5:\r  ;no stack adjustment overhead\r\t\r\t\r \r  LDX  #5\r\t\r  LDA  #0\r .loop:\r  CLC\r  ADC  2  ;1 cycle faster\r  DEX  ;4 cycles faster\r  BNE .loop\r  STA ret_val\r  STZ ret_val + 1\r\t\r  ;no stack restoration overhead\r  RTS\r END\n  The optimized version is smaller and takes less cycles. This is especially important inside of loops where the cycles saved are much more important than the reduced function overhead.\n  After I had the optimizer and new NASM-based macros running, converting the traditional assembly version to this version was fairly straightforward. One interesting thing is that the traditional version only uses the X register for a data stack, so I didn\u2019t have to change any of the game code that uses X for the optimized version to work. This is because none of the macros used for the optimized version ever touch X, so it stays the same in all functions, and the offsets supplied to all instructions accessing local variables are now the addresses assigned by the optimizer. Finding and eliminating all references to X in the optimized version saved a lot of cycles. Going back and replacing some counter variables with the newly free X sped up the optimized program by an additional 1%.\n       Robot Game - Traditional assembly on GitHub  The first step of porting the game to C was getting the  CC65 compiler up and running. The first four hours were fighting with the linker script and meaningless \u201cRange error\u201d messages before everything worked. From \n......", "posttime": "2020-07-11 09:15:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,\u673a\u5668\u4eba,language", "title": "\u673a\u5668\u4eba\u6e38\u620f\uff1a65C02\u8bed\u8a00\u6bd4\u8f83\uff1aASM\u3001OPT ASM\u3001C\u548cFORTH", "title_en": "Robot Game: 65C02 Language Comparison: asm, opt asm, C and Forth", "transed": 1, "url": "http://calc6502.com/RobotGame/summary.html", "via": "", "real_tags": ["\u6e38\u620f", "\u673a\u5668\u4eba", "language"]}, {"category": "", "categoryclass": "", "imagename": "eeada34aa5a9a9be20e4e215c8f25c94.jpg", "infoid": 1011126, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u5e74\u6765\uff0cCRISPR\u6cbb\u7597\u9057\u4f20\u6027\u75be\u75c5\u7684\u6f5c\u529b\u4e00\u76f4\u767b\u4e0a\u65b0\u95fb\u5934\u6761\uff0c\u5305\u62ec\u201c\u8fde\u7ebf\u201d\u6742\u5fd7\u3002(\u8fd9\u91cc\u3001\u8fd9\u91cc\u3001\u8fd9\u91cc\u548c\u8fd9\u91cc\u3002)\u3002\u6700\u540e\uff0c\u81f3\u5c11\u5bf9\u4e00\u4e2a\u5bb6\u5ead\u6765\u8bf4\uff0c\u57fa\u56e0\u7f16\u8f91\u6280\u672f\u5e26\u6765\u7684\u5e0c\u671b\u6bd4\u7092\u4f5c\u66f4\u591a\u3002\u572834\u5c81\u7684\u7ef4\u591a\u5229\u4e9a\u00b7\u683c\u96f7(Victoria Gray)\u63a5\u53d7\u6570\u5341\u4ebfCrispr\u7ec6\u80de\u6ce8\u5c04\u4e00\u5e74\u540e\uff0cNPR\u4e0a\u5468\u62a5\u9053\u79f0\uff0c\u8fd9\u4e9b\u7ec6\u80de\u4ecd\u7136\u6d3b\u7740\uff0c\u7f13\u89e3\u4e86\u5979\u7684\u9570\u72b6\u7ec6\u80de\u75be\u75c5\u7684\u5e76\u53d1\u75c7\u3002\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u73b0\u5728\u5c31\u8bf4\u5b83\u80fd\u6cbb\u6108\u8fd8\u4e3a\u65f6\u8fc7\u65e9\u3002\u4f46\u4f5c\u4e3a\u7f8e\u56fd\u7b2c\u4e00\u4e2a\u6210\u529f\u4f7f\u7528Crispr\u6cbb\u7597\u9057\u4f20\u6027\u75be\u75c5\u7684\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u91cc\u7a0b\u7891\u3002\u76ee\u524d\u8fd8\u6709\u6570\u5341\u9879\u4e34\u5e8a\u8bd5\u9a8c\u6b63\u5728\u8fdb\u884c\u4e2d\uff0cCrispr\u624d\u521a\u521a\u5f00\u59cb\u3002\n\u7136\u800c\uff0c\u5c3d\u7ba1Crispr\u5207\u5272DNA\u7684\u7cbe\u786e\u5ea6\u5f88\u9ad8\uff0c\u4f46\u5b83\u6700\u64c5\u957f\u7834\u89e3DNA\u3002\u5728\u683c\u96f7\u7684\u6848\u4f8b\u4e2d\uff0c\u7531Crispr Treeutics\u5236\u9020\u7684\u57fa\u56e0\u7f16\u8f91\u5668\u6545\u610f\u7834\u574f\u4e86\u5979\u9aa8\u9ad3\u7ec6\u80de\u4e2d\u7684\u4e00\u4e2a\u8c03\u63a7\u57fa\u56e0\uff0c\u4fc3\u8fdb\u4e86\u4e00\u79cd\u4f11\u7720\u7684\u80ce\u513f\u5f62\u5f0f\u8840\u7ea2\u86cb\u767d\u7684\u4ea7\u751f\uff0c\u5e76\u514b\u670d\u4e86\u5bfc\u81f4\u6210\u4eba\u5f62\u5f0f\u643a\u6c27\u5206\u5b50\u4ea7\u751f\u4e0d\u826f\u7684\u7a81\u53d8\u3002\u8fd9\u662f\u7ed5\u8fc7Crispr\u9650\u5236\u7684\u4e00\u79cd\u806a\u660e\u65b9\u5f0f\u3002\u4f46\u5b83\u4e0d\u9002\u7528\u4e8e\u8bb8\u591a\u5176\u4ed6\u9057\u4f20\u6027\u75be\u75c5\u3002\u5982\u679c\u4f60\u60f3\u7528\u5065\u5eb7\u7684\u57fa\u56e0\u66ff\u6362\u6709\u7f3a\u9677\u7684\u57fa\u56e0\uff0c\u4f60\u9700\u8981\u4e00\u4e2a\u4e0d\u540c\u7684\u5de5\u5177\u3002\u5982\u679c\u4f60\u9700\u8981\u6ce8\u5165\u5927\u91cf\u7684DNA\uff0c\u90a3\u4f60\u5c31\u6709\u70b9\u4e0d\u8d70\u8fd0\u4e86\u3002\n\u4e00\u5bb6\u540d\u4e3aTessera Treeutics\u7684\u65b0\u521b\u4e1a\u516c\u53f8\u7684\u9996\u5e2d\u6267\u884c\u5b98\u6770\u5f17\u91cc\u00b7\u51af\u00b7\u9a6c\u5c14\u624e\u6069(Geoffrey Von Maltzahn)\u8868\u793a\uff0c\u73b0\u5728\u4e0d\u518d\u662f\u8fd9\u6837\u4e86\u3002\u8be5\u516c\u53f8\u7531\u603b\u90e8\u4f4d\u4e8e\u6ce2\u58eb\u987f\u7684\u751f\u7269\u6280\u672f\u6295\u8d44\u5de8\u5934\u65d7\u8230\u5148\u950b\u4e8e2018\u5e74\u521b\u7acb\uff0c\u51af\u00b7\u9a6c\u5c14\u624e\u6069\u662f\u8be5\u516c\u53f8\u7684\u666e\u901a\u5408\u4f19\u4eba\u3002\u5468\u4e8c\uff0c\u8be5\u516c\u53f8\u4ece\u79d8\u5bc6\u884c\u52a8\u4e2d\u8131\u9896\u800c\u51fa\uff0c\u83b7\u5f97\u4e865000\u4e07\u7f8e\u5143\u7684\u521d\u59cb\u878d\u8d44\u3002\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0cTessera\u4e00\u76f4\u5728\u5f00\u53d1\u4e00\u79cd\u65b0\u7684\u5206\u5b50\u64cd\u7eb5\u5668\uff0c\u5b83\u80fd\u591f\u505aCrispr\u80fd\u505a\u7684\u5f88\u591a\u4e8b\u60c5\uff0c\u8fd8\u6709\u4e00\u4e9b\u5b83\u505a\u4e0d\u5230\u7684\u4e8b\u60c5\uff0c\u5305\u62ec\u7cbe\u786e\u5730\u63d2\u5165\u5f88\u957f\u7684DNA\u7247\u6bb5\u3002\u51af\u00b7\u9a6c\u5c14\u624e\u6069\u8bf4\uff0c\u8fd9\u4e0d\u662f\u57fa\u56e0\u7f16\u8f91\u3002\u8fd9\u662f\u201c\u57fa\u56e0\u5199\u4f5c\u201d\n\u201c\u7b80\u5355\u5730\u8bf4\uff0c\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u65b0\u7684\u7c7b\u522b\uff0c\u201d\u51af\u00b7\u9a6c\u5c14\u624e\u6069\u8bf4\u3002\u201c\u57fa\u56e0\u5199\u4f5c\u65e2\u53ef\u4ee5\u8fdb\u884c\u5b8c\u7f8e\u7684\u5220\u9664\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u7b80\u5355\u7684\u78b1\u57fa\u5bf9\u6539\u53d8\uff0c\u4f46\u5b83\u7684\u64cd\u7eb5\u53f0\u662f\u5168\u5149\u8c31\u7684\uff0c\u7279\u522b\u662f\u80fd\u591f\u5bf9\u57fa\u56e0\u7ec4\u8fdb\u884c\u5927\u8303\u56f4\u7684\u4fee\u6539\u3002\u201d\n\u8981\u8d85\u8d8a\u7b80\u5355\u5316\uff0c\u7406\u89e3\u57fa\u56e0\u5199\u4f5c\u662f\u5982\u4f55\u8d77\u4f5c\u7528\u7684\uff0c\u4f60\u5fc5\u987b\u6df1\u5165\u7814\u7a76\u4e00\u573a\u6301\u7eed\u4e86\u6570\u5341\u4ebf\u5e74\u7684\u53e4\u8001\u7684\u3001\u770b\u4e0d\u89c1\u7684\u6218\u6597\u7684\u5386\u53f2\u3002\n\u51e0\u4e4e\u53ea\u8981\u6709\u7ec6\u83cc\u5b58\u5728\uff0c\u5c31\u4f1a\u6709\u75c5\u6bd2\u8bd5\u56fe\u653b\u51fb\u5b83\u4eec\u3002\u8fd9\u4e9b\u88ab\u79f0\u4e3a\u566c\u83cc\u4f53\u7684\u75c5\u6bd2\u5c31\u50cf\u4e00\u4e32\u4e32\u6076\u610f\u7684\u8ba1\u7b97\u673a\u4ee3\u7801\uff0c\u8bd5\u56fe\u4fb5\u5165\u7ec6\u83cc\u57fa\u56e0\u7ec4\uff0c\u6b3a\u9a97\u5b83\u5236\u9020\u66f4\u591a\u7684\u566c\u83cc\u4f53\u3002\u6bcf\u5929\uff0c\u566c\u83cc\u4f53\u90fd\u4f1a\u5165\u4fb5\u5e76\u6467\u6bc1\u4e16\u754c\u4e0a\u5927\u91cf\u7684\u7ec6\u83cc(\u4ec5\u6d77\u6d0b\u4e2d\u7684\u7ec6\u83cc\u6570\u91cf\u5c31\u9ad8\u8fbe40%)\u3002\u4e3a\u4e86\u907f\u514d\u65e0\u60c5\u7684\u5c60\u6740\uff0c\u7ec6\u83cc\u4e0d\u5f97\u4e0d\u4e0d\u65ad\u8fdb\u5316\u9632\u5fa1\u7cfb\u7edf\u3002CRISPR\u5c31\u662f\u5176\u4e2d\u4e4b\u4e00\u3002\u8fd9\u662f\u7ec6\u83cc\u7a83\u53d6\u4e00\u70b9\u566c\u83cc\u4f53\u4ee3\u7801--\u5b83\u7684DNA\u6216RNA--\u5e76\u5c06\u5176\u50a8\u5b58\u5728\u8bb0\u5fc6\u5e93\u4e2d\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5c31\u50cf\u539f\u59cb\u514d\u75ab\u7cfb\u7edf\u4e00\u6837\u3002\u5eb7\u5948\u5c14\u5927\u5b66(Cornell University)\u5fae\u751f\u7269\u5b66\u5bb6\u4e54\u00b7\u5f7c\u5f97\u65af(Joe Peters)\u8868\u793a\uff0c\u8fd9\u662f\u5730\u7403\u5386\u53f2\u4e0a\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u519b\u5907\u7ade\u8d5b\uff1a\u201c\u8fd9\u79cd\u6c34\u5e73\u7684\u8fdb\u5316\u538b\u529b\u63a8\u52a8\u4e86\u64cd\u7eb5DNA\u548cRNA\u7684\u5206\u5b50\u673a\u5236\u4ea7\u751f\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u65b0\u9896\u6027\u3002\u201d\n\u4f46\u662f\u7ec6\u83cc\u5e76\u4e0d\u53ea\u662f\u8981\u4e0e\u5916\u6765\u75c5\u6bd2\u5165\u4fb5\u8005\u4f5c\u6597\u4e89\u3002\u5b83\u4eec\u7684\u57fa\u56e0\u7ec4\u4e5f\u4e00\u76f4\u53d7\u5230\u6765\u81ea\u5185\u90e8\u7684\u653b\u51fb\u3002\u51e0\u5343\u5e74\u6765\uff0c\u968f\u7740\u7ec6\u83cc\u4e4b\u95f4\u4ea4\u6362DNA\u7247\u6bb5\uff0c\u8bd5\u56fe\u5728\u4e0b\u4e00\u6ce2\u566c\u83cc\u4f53\u653b\u51fb\u4e4b\u524d\u4fdd\u6301\u9886\u5148\u5730\u4f4d\uff0c\u5176\u4e2d\u4e00\u4e9b\u57fa\u56e0\u8fdb\u5316\u51fa\u4e86\u72ec\u7acb\u4e8e\u539f\u59cb\u57fa\u56e0\u7ec4\u7684\u5176\u4f59\u90e8\u5206\u56db\u5904\u79fb\u52a8\u751a\u81f3\u590d\u5236\u7684\u80fd\u529b\u3002\u8fd9\u4e9b\u6240\u8c13\u7684\u201c\u79fb\u52a8\u9057\u4f20\u5143\u4ef6\u201d\uff0c\u6216MGE\uff0c\u643a\u5e26\u7740\u72ec\u7acb\u7684\u4ee3\u7801\uff0c\u4f9b\u673a\u5668\u526a\u5207\u548c\u7c98\u8d34\uff0c\u6216\u8005\u590d\u5236\u548c\u7c98\u8d34\u5230\u4e00\u4e2a\u65b0\u7684\u5730\u65b9\uff0c\u6216\u8005\u5728\u5b83\u4eec\u7684\u5bbf\u4e3b\u5185\uff0c\u6216\u8005\u590d\u5236\u5e76\u7c98\u8d34\u5230\u9644\u8fd1\u7684\u7ec6\u83cc\u4e2d\u3002\n\u8fd9\u53ef\u80fd\u4f1a\u7ed9\u57fa\u56e0\u6d17\u724c\u63a5\u6536\u7aef\u7684\u7ec6\u83cc\u5e26\u6765\u771f\u6b63\u7684\u9ebb\u70e6\u3002\u5982\u679c\u8fd9\u4e9bMGE\u63d2\u5165\u5230\u5173\u952e\u57fa\u56e0\u533a\u57df\uff0c\u90a3\u5c31\u662f\u518d\u89c1\u7ec6\u83cc\u3002\u5f7c\u5f97\u65af\u8bf4\uff1a\u201c\u4f60\u53ef\u4ee5\u7528\u540c\u6837\u7684\u65b9\u5f0f\u6765\u770b\u5f85MGES\uff0c\u5c31\u50cf\u4f60\u53ef\u4ee5\u601d\u8003\u7a81\u53d8\u4e00\u6837\u3002\u201d\u201c\u5982\u679c\u6ca1\u6709\u5b83\u4eec\uff0c\u6211\u4eec\u5c31\u4e0d\u4f1a\u8fdb\u5316\uff0c\u4f46\u5176\u4e2d99.99999%\u662f\u574f\u7684\u3002\u7ec6\u83cc\u6b63\u5728\u4e0d\u60dc\u4e00\u5207\u4ee3\u4ef7\u963b\u6b62MGES\u7834\u574f\u5176\u57fa\u56e0\u7ec4\u7684\u7a33\u5b9a\u3002\u201c\n1931\u5e74\uff0c\u8bfa\u8d1d\u5c14\u5956\u83b7\u5f97\u8005\u690d\u7269\u5b66\u5bb6\u82ad\u82ad\u62c9\u00b7\u9ea6\u514b\u6797\u6258\u514b(Barbara McClintock)\u5728\u7389\u7c73\u4e2d\u53d1\u73b0\u4e86\u7b2c\u4e00\u7c7b\u5df2\u77e5\u7684MGES\uff0c\u79f0\u4e3a\u8f6c\u5ea7\u5b50\u6216\u201c\u8df3\u8dc3\u57fa\u56e0\u201d\u3002\u5979\u5bf9\u690d\u7269\u67d3\u8272\u4f53\u8fdb\u884c\u67d3\u8272\u7684\u6280\u672f\u4f7f\u5979\u80fd\u591f\u770b\u5230\u4e00\u79cd\u690d\u7269\u7684\u5927\u5757\u4ec0\u4e48\u65f6\u5019\u4f1a\u8df3\u5230\u53e6\u4e00\u79cd\u690d\u7269\u8eab\u4e0a\u3002\u4f46\u51e0\u5341\u5e74\u6765\uff0c\u6240\u6709\u8fd9\u4e9b\u91cd\u590d\u7684\u81ea\u6211\u91cd\u6392DNA\u7247\u6bb5\u7684\u76ee\u7684\u4e00\u76f4\u8ba9\u79d1\u5b66\u5bb6\u4eec\u6478\u4e0d\u7740\u5934\u8111\u3002\u6709\u4e9b\u4eba\u751a\u81f3\u5c06\u4eba\u7c7b\u57fa\u56e0\u7ec4\u4e2d\u542b\u6709\u5927\u91cfMGE\u7684\u90e8\u5206\u79f0\u4e3a\u201c\u5783\u573eDNA\u201d\u3002\u5f88\u96be\u83b7\u5f97\u8d44\u91d1\u6765\u7814\u7a76\u5b83\u3002\u4f46\u6e10\u6e10\u5730\uff0c\u50cf\u5f7c\u5f97\u65af\u8fd9\u6837\u7684\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0c\u7ec6\u83cc\u4e2d\u7684MGES\u5b9e\u9645\u4e0a\u662f\u8bc6\u522b\u3001\u4e66\u5199\u548c\u79fb\u52a8DNA\u7684\u9ad8\u5ea6\u8fdb\u5316\u7684\u7cfb\u7edf\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6b63\u5982\u7f8e\u56fd\u56fd\u7acb\u536b\u751f\u7814\u7a76\u9662\u7814\u7a76\u4eba\u5458\u5c24\u91d1\u00b7\u5e93\u5b81\u548c\u57fa\u62c9\u00b7\u9a6c\u5361\u6d1b\u5a03\u57282017\u5e74\u63cf\u8ff0\u7684\u90a3\u6837\uff0cCrispr\u672c\u8eab\u4f3c\u4e4e\u662f\u4ece\u81ea\u6211\u5408\u6210\u7684\u8f6c\u5ea7\u5b50\u8fdb\u5316\u800c\u6765\u7684\u3002(CRISPR\u4ee3\u7801\u662f\u4e00\u79cd\u86cb\u767d\u8d28\uff0c\u5b83\u5207\u5272\u50a8\u5b58\u5728\u9057\u4f20\u8bb0\u5fc6\u5e93\u4e2d\u7684\u7279\u5b9a\u7684\u3001\u53ef\u8bc6\u522b\u7684DNA\u7247\u6bb5\u3002\u8f6c\u5ea7\u5b50\u8ba9Crispr\u4ece\u4e00\u5f00\u59cb\u5c31\u5f00\u59cb\u79ef\u7d2f\u8bb0\u5fc6\u5e93\u3002)\u3002\n\u5f53\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u5f7c\u5f97\u65af\u548c\u5e93\u5b81\u53d1\u8868\u4e86\u4e00\u7bc7\u8bba\u6587\uff0c\u63cf\u8ff0\u4e86\u8fd9\u79cd\u8fdb\u5316\u6709\u65f6\u662f\u5982\u4f55\u56de\u5230\u539f\u70b9\u7684\u3002\u4ed6\u4eec\u53d1\u73b0\u4e86\u4e00\u79cd\u7c7b\u578b\u7684\u8f6c\u5ea7\u5b50\uff0c\u8fd9\u79cd\u8f6c\u5ea7\u5b50\u7a83\u53d6\u4e86\u4e00\u4e9bCrispr\u57fa\u56e0\uff0c\u5e2e\u52a9\u5b83\u5728\u7ec6\u83cc\u5bbf\u4e3b\u4e4b\u95f4\u79fb\u52a8\u3002\u4ed6\u4eec\u610f\u8bc6\u5230\uff0c\u8fd9\u4e9b\u7528\u4e8e\u526a\u5207\u3001\u590d\u5236\u548c\u7c98\u8d34\u7684\u5206\u5b50\u5de5\u5177\u4e0d\u65ad\u5730\u5728MGES\u3001\u566c\u83cc\u4f53\u548c\u7ec6\u83cc\u4e4b\u95f4\u7a7f\u68ad\uff0c\u4f5c\u4e3a\u8fdb\u653b\u6216\u9632\u5fa1\u7684\u624b\u6bb5\u4ea4\u66ff\u4f7f\u7528\u3002\u5728\u90a3\u7bc7\u8bba\u6587\u7684\u6700\u540e\uff0c\u5f7c\u5f97\u65af\u548c\u5e93\u5b81\u5199\u9053\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u53ef\u4ee5\u201c\u6f5c\u5728\u5730\u7528\u4e8e\u57fa\u56e0\u7ec4\u5de5\u7a0b\u5e94\u7528\u201d\u3002\n\u5f7c\u5f97\u65af\u8bf4\uff0c\u4e0d\u4e45\u4e4b\u540e\uff0c\u4ed6\u5f00\u59cb\u63a5\u5230\u5546\u4e1a\u5229\u76ca\u96c6\u56e2\u7684\u7535\u8bdd\u3002\u5176\u4e2d\u4e00\u5c01\u6765\u81eaTessera\u7684\u9996\u5e2d\u521b\u65b0\u5b98\u517c\u8054\u5408\u521b\u59cb\u4eba\u6770\u514b\u00b7\u9c81\u672c\u65af(Jack Rubens)\u30022019\u5e74\uff0c\u8be5\u516c\u53f8\u5f00\u59cb\u4e0e\u5f7c\u5f97\u65af\u7684\u5eb7\u5948\u5c14\u5b9e\u9a8c\u5ba4\u56f4\u7ed5\u53d1\u73b0\u5177\u6709\u57fa\u56e0\u7ec4\u5de5\u7a0b\u6f5c\u529b\u7684\u65b0MGES\u5c55\u5f00\u8d5e\u52a9\u7814\u7a76\u5408\u4f5c\u3002(Tessera\u8fd8\u6709\u5176\u4ed6\u7814\u7a76\u5408\u4f5c\u4f19\u4f34\uff0c\u4f46\u516c\u53f8\u5b98\u5458\u5c1a\u672a\u62ab\u9732\u8fd9\u4e9b\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002)\u3002\nMGE\u6709\u51e0\u79cd\u53e3\u5473\u3002\u6709\u8f6c\u5ea7\u5b50\uff0c\u5b83\u53ef\u4ee5\u5c06\u81ea\u5df1\u4ece\u57fa\u56e0\u7ec4\u4e2d\u5254\u9664\u51fa\u6765\uff0c\u8df3\u8dc3\u5230\u4e0d\u540c\u7684\u90bb\u91cc\u3002\u540e\u8f6c\u5ea7\u5b50\u590d\u5236\u4e00\u4e2a\u526f\u672c\uff0c\u7136\u540e\u5c06\u8be5\u526f\u672c\u8fd0\u9001\u5230\u5b83\u7684\u65b0\u5bb6\uff0c\u6bcf\u6b21\u590d\u5236\u90fd\u4f1a\u6269\u5927\u57fa\u56e0\u7ec4\u7684\u5927\u5c0f\u3002\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u90fd\u662f\u5728\u4e24\u7aef\u90fd\u6709\u7279\u6b8a\u7684\u5e8f\u5217\u6765\u5b9a\u4e49\u5b83\u4eec\u7684\u8fb9\u754c\u3002\u4ecb\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\u662f\u5236\u9020\u8bc6\u522b\u8fd9\u4e9b\u8fb9\u754c\u7684\u86cb\u767d\u8d28\u7684\u57fa\u56e0\uff0c\u5728\u8f6c\u5ea7\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u8981\u4e48\u5207\u9664\u8fd9\u4e9b\u8fb9\u754c\uff0c\u7559\u4e0b\u7f3a\u53e3\u3002\u6216\u8005\u5728\u53cd\u8f6c\u5f55\u8f6c\u5ea7\u5b50\u7684\u60c5\u51b5\u4e0b\uff0c\u901a\u8fc7RNA\u4e2d\u95f4\u4f53\u5c06\u5b83\u4eec\u590d\u5236\u5230\u65b0\u7684\u4f4d\u7f6e\u3002\u8fd8\u6709\u5176\u4ed6\u8bfe\u7a0b\uff0c\u4f46\u8fd9\u662f\u7279\u585e\u62c9\u9ad8\u7ba1\u611f\u5174\u8da3\u7684\u4e24\u4e2a\u8bfe\u7a0b\u3002\u8fd9\u662f\u56e0\u4e3a\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5e8f\u5217\u4e4b\u95f4\u6dfb\u52a0\u4e00\u4e32\u65b0\u7684\u4ee3\u7801--\u6bd4\u5982\u8bf4\u4e00\u4e2a\u5065\u5eb7\u7684\u3001\u975e\u7a81\u53d8\u7684\u81f4\u75c5\u57fa\u56e0\u7248\u672c--\u7136\u540e\u8ba9MGE\u7684\u673a\u5668\u6765\u5b8c\u6210\u5c06\u6cbb\u7597\u6027DNA\u79fb\u5165\u60a3\u8005\u67d3\u8272\u4f53\u7684\u5de5\u4f5c\u3002\n\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u8be5\u516c\u53f8\u7684\u751f\u7269\u4fe1\u606f\u5b66\u5bb6\u56e2\u961f\u4e00\u76f4\u5728\u6316\u6398\u516c\u5171\u6570\u636e\u5e93\uff0c\u8fd9\u4e9b\u6570\u636e\u5e93\u5b58\u50a8\u7740\u79d1\u5b66\u5bb6\u4ece\u4e16\u754c\u5404\u5730\u6536\u96c6\u7684\u6570\u5341\u4e07\u79cd\u7ec6\u83cc\u7684\u57fa\u56e0\u7ec4\u5e8f\u5217\u3002\u5728\u8fd9\u4e9b\u5927\u91cf\u7684\u57fa\u56e0\u6570\u636e\u4e2d\uff0c\u4ed6\u4eec\u4e00\u76f4\u5728\u5bfb\u627e\u53ef\u80fd\u6700\u9002\u5408\u8fdb\u884c\u8fd9\u79cd\u6cbb\u7597\u6027DNA\u6539\u53d8\u7684MGES\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8be5\u516c\u53f8\u7684\u79d1\u5b66\u5bb6\u5df2\u7ecf\u786e\u5b9a\u4e86\u5927\u7ea66000\u4e2a\u53cd\u8f6c\u5f55\u8f6c\u5ea7\u5b50(Tessera\u79f0\u4e4b\u4e3aRNA\u7f16\u5199\u8005)\u548c2000\u4e2a\u8f6c\u5ea7\u5b50(DNA\u7f16\u5199\u8005)\u3002\u7279\u585e\u62c9\u7684\u56e2\u961f\u753135\u540d\u79d1\u5b66\u5bb6\u7ec4\u6210\uff0c\u4ed6\u4eec\u4e00\u76f4\u5728\u4eba\u4f53\u7ec6\u80de\u4e2d\u8fdb\u884c\u5b9e\u9a8c\uff0c\u4ee5\u4e86\u89e3\u6bcf\u4e2a\u7ec6\u80de\u7684\u786e\u5207\u5de5\u4f5c\u539f\u7406\u3002\u6709\u65f6\uff0c\u4e00\u4e2a\u6709\u524d\u9014\u7684\u3001\u81ea\u7136\u4ea7\u751f\u7684\u57fa\u56e0\u7f16\u5199\u8005\u4f1a\u5728\u7279\u585e\u62c9\u7684\u5b9e\u9a8c\u5ba4\u91cc\u5f97\u5230\u8fdb\u4e00\u6b65\u7684\u8c03\u6574\uff0c\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u6216\u8005\u53bb\u5230\u4e0d\u540c\u7684\u5730\u65b9\u3002\u8be5\u516c\u53f8\u8fd8\u6ca1\u6709\u8bc1\u660e\u5b83\u7684\u4efb\u4f55\u57fa\u56e0\u7f16\u5199\u8005\u90fd\u53ef\u4ee5\u6d88\u9664\u4e00\u79cd\u9057\u4f20\u6027\u75be\u75c5\u3002\u4f46\u5728\u5c0f\u9f20\u6a21\u578b\u4e2d\uff0c\u7814\u7a76\u5c0f\u7ec4\u4e00\u76f4\u80fd\u591f\u4f7f\u7528\u5b83\u4eec\u5c06\u5927\u91cf\u62f7\u8d1d\u7684\u5927\u578b\u7eff\u8272\u8367\u5149\u86cb\u767d\u57fa\u56e0\u63d2\u5165\u52a8\u7269\u7684\u57fa\u56e0\u7ec4\u4e2d\uff0c\u4ee5\u8bc1\u660e\u5b83\u4eec\u53ef\u4ee5\u53ef\u9760\u5730\u653e\u7f6e\u8bbe\u8ba1\u8005\u7684DNA\u3002\n\u73b0\u5728\uff0c\u51e0\u5341\u5e74\u6765\uff0c\u79d1\u5b66\u5bb6\u4eec\u4e00\u76f4\u5728\u4eba\u5de5\u8ba9\u52a8\u7269\u53d1\u5149\u3002Tessera\u7684\u65b9\u6cd5\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0c\u8be5\u516c\u53f8\u7684\u79d1\u5b66\u5bb6\u53ea\u9700\u6ce8\u5165\u5c11\u91cfRNA\u5c31\u80fd\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u3002\u8fd9\u4e00\u5c0f\u5305RNA\u62e5\u6709\u6240\u6709\u5fc5\u8981\u7684\u4fe1\u606f\uff0c\u53ef\u4ee5\u62db\u52df\u5fc5\u8981\u7684\u9176\u6765\u5236\u9020\u4e00\u79cd\u65b0\u7684DNA\u5206\u5b50\uff0c\u8fd9\u79cdDNA\u5206\u5b50\u7f16\u7801\u7eff\u8272\u8367\u5149\u86cb\u767d\uff0c\u7136\u540e\u5c06\u5176\u63d2\u5165\u5c0f\u9f20\u7684\u67d3\u8272\u4f53\u4e2d\u3002\n\u8fd9\u662f\u4e00\u4ef6\u5927\u4e8b\uff0c\u56e0\u4e3a\u57fa\u56e0\u533b\u5b66\u4e2d\u6700\u5927\u7684\u4e24\u4e2a\u969c\u788d\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u662f\u5982\u4f55\u5c06DNA\u6539\u53d8\u5de5\u5177\u4f20\u9012\u5230\u5408\u9002\u7684\u7ec6\u80de\uff0c\u5e76\u5bf9\u5b83\u4eec\u8fdb\u884c\u8db3\u591f\u7684\u6539\u53d8\u4ee5\u4f7f\u5176\u53d1\u6325\u4f5c\u7528\u3002\u4f20\u7edf\u7684\u57fa\u56e0\u6cbb\u7597\u4f9d\u8d56\u4e8e\u5c06\u5065\u5eb7\u7684\u57fa\u56e0\u8f93\u9001\u5230\u65e0\u6cd5\u5bb9\u7eb3\u5927\u7247\u6bb5DNA\u7684\u638f\u7a7a\u75c5\u6bd2\u4e2d\u3002\u8fd9\u4e9b\u6cbb\u7597\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff0c\u56e0\u4e3a\u4eba\u4eec\u7684\u8eab\u4f53\u4f1a\u5bf9\u75c5\u6bd2\u5916\u58f3\u4ea7\u751f\u514d\u75ab\u53cd\u5e94\u3002\u4f7f\u7528Crispr\u7684\u79d1\u5b66\u5bb6\u4e5f\u9047\u5230\u4e86\u540c\u6837\u7684\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u6279\u6210\u529f\u7684\u75be\u75c5\u662f\u6211\n\u4f46\u662f\uff0c\u4ec5\u4ec5\u901a\u8fc7\u76f4\u63a5\u6ce8\u5c04RNA\u5c31\u80fd\u5c06\u65b0\u7684DNA\u6574\u5408\u5230\u6d3b\u7740\u7684\u52a8\u7269\u7684\u57fa\u56e0\u7ec4\u4e2d\uff0c\u8fd9\u5728\u4ee5\u524d\u662f\u4ece\u672a\u6709\u8fc7\u7684\u3002\u9c81\u672c\u65af\u8bf4\uff1a\u201c\u636e\u6211\u4eec\u6240\u77e5\uff0c\u8fd9\u662f\u7b2c\u4e00\u6b21\u6709\u4eba\u8bc1\u660e\u53ef\u4ee5\u7528\u8fd9\u4e48\u5927\u7684\u4e1c\u897f\u505a\u5230\u8fd9\u4e00\u70b9--\u4e0d\u4ec5\u662f\u5728\u9057\u4f20\u533b\u5b66\u9886\u57df\uff0c\u5728\u5206\u5b50\u751f\u7269\u5b66\u9886\u57df\u4e5f\u662f\u7b2c\u4e00\u6b21\u3002\u201d\n\u53ea\u6ce8\u5c04\u4e00\u6bb5rna\u7684\u80fd\u529b\uff0c\u7c7b\u4f3c\u4e8e\u9886\u5148\u7684\u65b0\u51a0\u80ba\u708e\u75ab\u82d7\u5236\u9020\u5546\u4e4b\u4e00\u73b0\u4ee3\u90a3\u6240\u91c7\u53d6\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8ba9\u7814\u7a76\u4eba\u5458\u66f4\u5bb9\u6613\u7814\u7a76\u6d89\u53ca\u6dfb\u52a0\u5927\u5757\u4fee\u590d\u6027\u9057\u4f20\u5bc6\u7801\u7684\u9057\u4f20\u6761\u4ef6\u3002\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u521b\u65b0\u57fa\u56e0\u7ec4\u7814\u7a76\u6240\u7684\u57fa\u56e0\u7f16\u8f91\u4e13\u5bb6\u517c\u79d1\u5b66\u4e3b\u4efb\u8d39\u5965\u591a\u00b7\u4e4c\u5c14\u8bfa\u592b(Fyodor Urnov)\u8bf4\uff1a\u201c\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u6709\u8da3\u7684\u65b9\u6cd5\uff0c\u7edd\u5bf9\u503c\u5f97\u8ffd\u6c42\u3002\u201d(\u8fd1\u51e0\u4e2a\u6708\u6765\uff0c\u4e4c\u5c14\u8bfa\u592b\u5e2e\u52a9\u5c06IGI\u8f6c\u53d8\u4e3a\u5168\u804c\u7684\u65b0\u51a0\u80ba\u708e\u6d4b\u8bd5\u4e1a\u52a1\uff1b\u4ed6\u8bf4\uff0c\u7279\u585e\u62c9\u7684\u5b98\u5458\u6700\u8fd1\u4e0e\u4ed6\u63a5\u6d3d\uff0c\u5e0c\u671b\u52a0\u5165\u8463\u4e8b\u4f1a\uff0c\u4f46\u4ed6\u7f3a\u4e4f\u53c2\u4e0e\u7684\u5e26\u5bbd\uff0c\u5c3d\u7ba1\u4ed6\u5f88\u5174\u594b\u3002)\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u4ed6\u8bf4\uff0c\u73b0\u5728\u5224\u65ad\u57fa\u56e0\u7f16\u5199\u6700\u7ec8\u662f\u5426\u4f1a\u4f18\u4e8eCrispr\u6216\u5176\u66f4\u7cbe\u786e\u7684\u4e0b\u4e00\u4ee3\u8868\u4eb2Prime\u7f16\u8f91\uff0c\u6216\u4efb\u4f55\u5176\u4ed6\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u7684\u65b0\u57fa\u56e0\u7f16\u8f91\u6280\u672f\uff0c\u8fd8\u4e3a\u65f6\u8fc7\u65e9\u3002\u4ed6\u8bf4\uff1a\u201c\u6211\u4ece\u8fd9\u4e00\u9886\u57df\u4e09\u5341\u5e74\u7684\u7ecf\u9a8c\u4e2d\u5b66\u5230\u7684\u662f\uff0c\u53ea\u6709\u8bca\u6240\u624d\u80fd\u544a\u8bc9\u4f60\uff0c\u4ec0\u4e48\u6280\u672f\u6700\u7ec8\u5c06\u662f\u6cbb\u7597\u67d0\u79cd\u75be\u75c5\u7684\u6700\u4f73\u65b9\u5f0f\u3002\u201d\n\u5bf9\u4e8e\u7279\u585e\u62c9\u6765\u8bf4\uff0c\u4efb\u4f55\u8fd9\u6837\u7684\u4eba\u4f53\u8bd5\u9a8c\u53ef\u80fd\u8fd8\u9700\u8981\u81f3\u5c11\u4e00\u5e74\u7684\u65f6\u95f4\u3002\u8be5\u516c\u53f8\u521a\u521a\u5f00\u59cb\u7ec4\u5efa\u4e00\u652f\u65e9\u671f\u5236\u9020\u56e2\u961f\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5b83\u7684\u5b98\u5458\u4e00\u76f4\u5bf9\u4ed6\u4eec\u8ba1\u5212\u9996\u5148\u6cbb\u7597\u54ea\u4e9b\u75be\u75c5\u5b88\u53e3\u5982\u74f6\uff0c\u53ea\u8bf4\u8fd9\u4e9b\u75be\u75c5\u5f88\u53ef\u80fd\u662f\u7f55\u89c1\u7684\u9057\u4f20\u75be\u75c5\u3002von Maltzahn\u8bf4\uff1a\u201c\u6211\u4eec\u73b0\u5728\u60f3\u628a\u6211\u4eec\u7684\u6ce8\u610f\u529b\u5f15\u5bfc\u5230\u6211\u4eec\u80fd\u521b\u9020\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u53d8\u4f53\u548c\u5de5\u7a0b\u7ed3\u6784\u7684\u70d8\u7119\u4e0a\u3002\u201d\u4ed6\u8bf4\uff0c\u8be5\u516c\u53f8\u5185\u90e8\u5f00\u53d1\u7684RNA\u7f16\u5199\u5668\u8d70\u5f97\u6700\u8fdc\u3002\u4f46\u4ed6\u4eec\u7684\u76ee\u6807\u662f\u5728\u8fdb\u5165\u4e34\u5e8a\u4e4b\u524d\uff0c\u7814\u5236\u51fa\u4e00\u5957\u80fd\u591f\u6cbb\u7597\u591a\u79cd\u4eba\u7c7b\u75be\u75c5\u7684\u5206\u5b50\u673a\u5668\u3002von Maltzahn\u8bf4\uff1a\u201c\u6211\u4eec\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u5730\u8ba4\u4e3a\uff0c\u5728\u672a\u6765\u51e0\u5341\u5e74\u91cc\uff0c\u57fa\u56e0\u533b\u5b66\u5c06\u6210\u4e3a\u6700\u975e\u51e1\u7684\u65b0\u533b\u5b66\u7c7b\u522b\u4e4b\u4e00\u3002\u201d\n\u8fd9\u4e00\u9886\u57df\u80af\u5b9a\u5728\u52a0\u901f\uff1b\u57fa\u56e0\u7597\u6cd5\u5728\u7b2c\u4e00\u6b21\u4eba\u4f53\u8bd5\u9a8c\u4e4b\u524d\u82b1\u4e86\u51e0\u5341\u5e74\u7684\u7814\u7a76\u65f6\u95f4\u3002\u514b\u91cc\u65af\u666e\u82b1\u4e867\u5e74\u65f6\u95f4\u3002\u5bf9\u4e8e\u57fa\u56e0\u5199\u4f5c\uff0c\u6211\u4eec\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u957f\u7684\u7b49\u5f85\u65f6\u95f4\u3002\n\ud83d\udc41\u5982\u679c\u5904\u7406\u5f97\u5f53\uff0c\u4eba\u5de5\u667a\u80fd\u53ef\u4ee5\u4f7f\u8b66\u52a1\u66f4\u52a0\u516c\u5e73\u3002\u53e6\u5916\uff1a\u83b7\u53d6\u6700\u65b0\u7684\u4eba\u5de5\u667a\u80fd\u65b0\u95fb\u3002\n\u2728\u4f7f\u7528\u6211\u4eec\u9f7f\u8f6e\u56e2\u961f\u7684\u6700\u4f73\u9009\u62e9\u4f18\u5316\u60a8\u7684\u5bb6\u5ead\u751f\u6d3b\uff0c\u4ece\u673a\u5668\u4eba\u5438\u5c18\u5668\u5230\u4ef7\u683c\u5b9e\u60e0\u7684\u5e8a\u57ab\u518d\u5230\u667a\u80fd\u626c\u58f0\u5668", "note_en": "Crispr\u2019s potential for curing inherited disease has made headlines, including at WIRED, for years. (  Here,  here,  here, and  here.) Finally, at least for one family, the  gene-editing technology is turning out to deliver more hope than hype. A year after 34-year-old Victoria Gray received an infusion of billions of Crispr\u2019d cells,  NPR reported last week that those cells were still alive and alleviating the complications of her sickle cell disease. Researchers say it\u2019s still too soon to call it a cure. But as the first person with a genetic disorder to be successfully treated with Crispr in the US, it\u2019s a huge milestone. And with dozens more clinical trials currently in progress, Crispr is just getting started.\n Yet for all its DNA-snipping precision, Crispr is  best at breaking DNA. In Gray\u2019s case, the gene editor  built by Crispr Therapeutics intentionally crippled a regulatory gene in her bone marrow cells, boosting production of a dormant, fetal form of hemoglobin, and overcoming a mutation that leads to poor production of the adult form of the oxygen-carrying molecule. It\u2019s a clever way around Crispr\u2019s limitations. But it won\u2019t work for a lot of other inherited conditions. If you want to replace a faulty gene with a healthy one, you need a different tool. And if you need to insert a  lot of DNA, well, you\u2019re kind of out of luck.\n Not anymore, says Geoffrey von Maltzahn, the CEO of a new startup called  Tessera Therapeutics. The company, founded in 2018 by Boston-based biotech investing powerhouse Flagship Pioneering, where von Maltzahn is a general partner, emerged from stealth on Tuesday with $50 million in initial financing. Tessera has spent the past two years developing a new class of molecular manipulators capable of doing lots of things Crispr can do\u2014and some that it can\u2019t, including precisely plugging in long stretches of DNA. It\u2019s not gene editing, says von Maltzahn. It\u2019s \u201cgene writing.\u201d\n  \u201cSimplistically, we think of it as a new category,\u201d says von Maltzahn. \u201cGene writing is able to make either perfect deletions or simple base pair changes, but its wheelhouse is in the full spectrum, and in particular the ability to make large alterations to the genome.\u201d\n  To get beyond simplistics, to understand how gene writing works, you have to take a deep dive into the history of an ancient, invisible battle that\u2019s been raging for billions of years.\n  For nearly as long as there have been bacteria, there have been viruses trying to attack them. These viruses,  called phages, are like strings of malicious computer code trying to hack into a bacterial genome to trick it into making more phages. Every day, phages invade and blast apart huge quantities of the world\u2019s bacteria (up to  40 percent of the bacterial population in the oceans alone). To avoid the unrelenting slaughter, bacteria have had to constantly evolve defense systems.  Crispr is one of them. It\u2019s a way for bacteria to steal a bit of a phage\u2019s code\u2014its DNA or RNA\u2014and store it in a memory bank, like a primordial immune system. It\u2019s the longest-running arms race in the history of Earth, says Joe Peters, a microbiologist at Cornell University: \u201cThat level of evolutionary pressure has driven an incredible amount of novelty in molecular mechanisms for manipulating DNA and RNA.\u201d\n But bacteria haven\u2019t just had to contend with foreign viral invaders. Their genomes are also under perpetual assault from within. Through the millennia, as bacteria have been swapping bits of DNA with each other, trying to stay ahead of the next wave of phage attacks, some of those genes evolved the ability to move around and even replicate independently of the rest of their original genome. These so-called \u201cmobile genetic elements,\u201d or MGEs, carry self-contained code for the machinery to either cut and paste or copy and paste themselves into a new locality, either within their host or into nearby bacteria.\n  That can spell real trouble for the bacteria on the receiving end of this gene shuffle. If those MGEs insert themselves into critical gene regions, it\u2019s bye-bye bacteria. \u201cYou can think about MGEs the same way you can think about mutations,\u201d says Peters. \u201cWe wouldn\u2019t have evolved without them, but 99.99999 percent of them are bad. Bacteria are trying at any cost to stop MGEs from destabilizing their genome.\u201d\n The Nobel Prize-winning botanist Barbara McClintock discovered the first known class of MGEs, called transposons, or \u201cjumping genes,\u201d in maize in 1931. Her technique for staining the plant\u2019s chromosomes allowed her to see when chunks from one would jump to another. But for many decades, the purpose of all these repeated sections of self-rearranging DNA eluded scientists. Some went so far as to dub the MGE-heavy sections of the human genome \u201cjunk DNA.\u201d It was hard to get funding to study it. But little by little, researchers like Peters discovered that MGEs in bacteria were actually highly-evolved systems for recognizing DNA, writing it, and moving it around. In fact, Crispr itself appears to have evolved from a self-synthesizing transposon, as NIH researchers Eugene Koonin and Kira Makarova  described in 2017. (Crispr codes for a protein that cuts specific, recognizable pieces of DNA stored in its genetic memory bank. The transposons allowed Crispr to start amassing that memory bank in the first place.)\n Earlier that year, Peters and Koonin published  a paper describing how this evolution can sometimes come full circle. They found one type of transposon that had stolen some Crispr genes to help it move between bacterial hosts. They realized that these molecular tools for cutting, copying, and pasting were constantly being shuttled between MGEs, phages, and bacteria to be used alternately as a means of offense or defense. At the end of that paper, Peters and Koonin wrote that these systems could \u201cpotentially be harnessed for genome-engineering applications.\u201d\n Not long after, Peters says, he started getting calls from commercial interests. One of them was from Jake Rubens, Tessera\u2019s Chief Innovation Officer and co-founder. In 2019, the company began a sponsored research collaboration with Peters\u2019 Cornell lab around the discovery of new MGEs with genome engineering potential. (Tessera also has other research partnerships, but company officials have not yet disclosed them.)\n MGE\u2019s come in a few flavors. There are transposons, which can cut themselves out of the genome and hop into a different neighborhood. Retrantransposons make a copy and shuttle that replica to its new home, expanding the size of the genome with each duplication. They both work by having special sequences on either end that define their boundaries. In between are genes for making proteins that recognize those boundaries and either excise them out in the case of transposons, leaving a gap. Or in the case of retrotransposons, copy them, via an RNA-intermediate, into new locations. There are other classes, too, but these are the two that Tessera executives are interested in. That\u2019s because you can add a new string of code between those sequences\u2014say a healthy, non-mutated version of a disease-causing gene\u2014and let the MGE\u2019s machinery do the work to move that therapeutic DNA into a patient\u2019s chromosomes.\n For the past two years, the company\u2019s team of bioinformaticians have been mining public databases that house the genome sequences of hundreds of thousands of bacterial species  that scientists have collected from all over the world. In those reams of genetic data, they\u2019ve been prospecting for MGEs that might be best suited for making these kinds of therapeutic DNA changes.\n  So far, company scientists have identified about 6,000 retrotransposons (what Tessera calls RNA writers) and 2,000 transposons (DNA writers) that show potential. Tessera\u2019s team of 35 scientists have been conducting experiments in human cells to understand how exactly each one works. Sometimes, a promising, naturally-occurring gene writer will get tweaked further in Tessera\u2019s lab, to be more precise or go to a different location. The company hasn\u2019t yet demonstrated that any of its gene writers can eliminate an inherited disease. But in mouse models, the team has consistently been able to use them to insert lots of copies of a large green fluorescent protein gene into the animals\u2019 genomes as a way of proving that they can reliably place designer DNA.\n  Now, scientists have been making animals artificially glow for decades. What\u2019s different about Tessera\u2019s method is that company\u2019s scientists only need to inject a bit of RNA to make it happen. That little package of RNA has all the information it needs to recruit the necessary enzymes to make a new molecule of DNA that codes for the green fluorescent protein and then insert it into the mouse\u2019s chromosomes.\n That\u2019s a big deal because two of the largest hurdles in genetic medicine have long been how to deliver a DNA-altering tool to the right cells, and altering enough of them that it works.  Traditional gene therapy relies on ferrying the healthy gene in hollowed-out viruses that can\u2019t fit big pieces of DNA. These treatments can only be given once, because people\u2019s bodies develop immune responses to the viral shell. Scientists using Crispr have run into these same issues. This is why the first successes have been with disorders in which you can edit cells outside the body and then infuse them back in, like with sickle cell disease,  and cancer. Outside the body, scientists can inject Crispr\u2019s component parts directly into cells instead of relying on a viral vector.\n But being able to integrate new DNA into the genome of a living animal from just a direct shot of RNA has never been done before. \u201cAs far as we know, that\u2019s the first time anyone has ever shown it\u2019s possible to do that with something that big\u2014not just in genetic medicine, but it\u2019s a first for molecular biology,\u201d says Rubens.\n The ability to inject just a piece of RNA, similar to  the approach taken by one of the leading Covid-19 vaccinemakers, Moderna, could make it easier for researchers to go after genetic conditions in which the treatment involves adding big chunks of reparative genetic code. \u201cThis is a really interesting approach and it absolutely deserves pursuit,\u201d says Fyodor Urnov, a gene editing expert and scientific director of UC Berkeley\u2019s Innovative Genomics Institute. (In recent months, Urnov has  helped transform IGI into a full-time Covid-19 testing operation; he says Tessera officials approached him recently about joining their board but that he lacked the bandwidth to participate, despite his excitement.)\n Still, he says it\u2019s too early to tell if gene writing will wind up being superior to Crispr or its more precise next-generation cousin  prime editing, or any other of the new gene editing technologies currently in development. \u201cWhat I\u2019ve learned from three decades in this field is that only the clinic can tell you what tech will ultimately be the best way forward for a given disease,\u201d he says.\n For Tessera, any such human trials are likely still at least a year away. The company is just starting to build out an early manufacturing team. And so far, its officials have been tight-lipped about what diseases they plan to go after first, saying only that they will likely be rare genetic conditions. \u201cWe want to direct our attention right now to a bake-off of as many variations and engineered constructs as we can create,\u201d says von Maltzahn. The company\u2019s internally-developed RNA writers are the furthest along, he says. But their goal is to arrive at a suite of molecular machines capable of addressing many human diseases before moving into the clinic. \u201cWe think with almost virtual certainty that genetic medicine will be one of the most extraordinary new categories of medicine for the next couple of decades,\u201d says von Maltzahn.\n The field is certainly accelerating; Gene therapy took decades of research before the first human trials. It took Crispr 7 years. For gene writing, we may not have that long to wait.\n   \ud83d\udc41 If done right, AI could  make policing fairer. Plus:  Get the latest AI news\n \u2728 Optimize your home life with our Gear team\u2019s best picks, from  robot vacuums to  affordable mattresses to  smart speakers", "posttime": "2020-07-11 09:14:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8f91\u5668,gene,\u57fa\u56e0", "title": "\u65b0\u578b\u57fa\u56e0\u7f16\u8f91\u5668\u53ef\u4ee5\u63d2\u5165\u5f88\u957f\u7684DNA\u7247\u6bb5\uff0c\u8fd9\u662fCrispr\u505a\u4e0d\u5230\u7684", "title_en": "New class of gene editors plugs in long stretches of DNA, which Crispr can't do", "transed": 1, "url": "https://www.wired.com/story/this-company-wants-to-rewrite-the-future-of-genetic-disease/", "via": "", "real_tags": ["\u7f16\u8f91\u5668", "gene", "\u57fa\u56e0"]}, {"category": "", "categoryclass": "", "imagename": "1b98f9b1591a0f3660d13eff8bb57d4d.jpg", "infoid": 1011122, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5728\u52aa\u529b\u8ba9\u8bbe\u5907\u5236\u9020\u5546\u5c06\u65e7\u8bbe\u5907\u66f4\u65b0\u5230\u6700\u65b0\u7248\u672c\u7684Android\uff0c\u4f46\u8be5\u516c\u53f8\u4eca\u5929\u5ba3\u5e03\uff0c\u5b83\u5f00\u59cb\u770b\u5230\u4e00\u4e9b\u6210\u529f\uff0cAndroid 10\u7684\u91c7\u7528\u7387\u662f\u6240\u6709Android\u7248\u672c\u4e2d\u6700\u5feb\u7684\u3002\n\u6839\u636e\u8c37\u6b4c\u7684\u6570\u636e\uff0cAndroid 10\u57282019\u5e749\u6708\u53d1\u5e03\u4e94\u4e2a\u6708\u540e\u5c31\u5b89\u88c5\u57281\u4ebf\u53f0\u8bbe\u5907\u4e0a-\u6bd4\u8be5\u516c\u53f8\u8fbe\u5230Android Pie\u7c7b\u4f3c\u91cc\u7a0b\u7891\u7684\u901f\u5ea6\u5feb\u4e8628%\u3002\u8c37\u6b4c\u5c06\u66f4\u5feb\u7684\u91c7\u7528\u7387\u5f52\u529f\u4e8e\u8be5\u516c\u53f8\u591a\u5e74\u6765\u4e00\u76f4\u5728\u8fdb\u884c\u7684\u6539\u8fdb\uff0c\u5982Android Oreo\u7684Project Treble\u548cAndroid 10\u7684Project Mainline\uff0c\u8fd9\u4f7f\u5f97\u786c\u4ef6\u516c\u53f8\u66f4\u5bb9\u6613\u521b\u5efa\u65b0\u7684\u66f4\u65b0\u3002\n\u4f46\u662f\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u6570\u5b57\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u8c37\u6b4c\u7684\u5e16\u5b50\u663e\u7136\u9057\u6f0f\u4e86\u4e00\u4e9b\u5173\u952e\u4fe1\u606f\uff0c\u6bd4\u5982\u5b89\u5353\u8bbe\u5907\u4e2d\u8fd0\u884c\u5b89\u535310\u7684\u6bd4\u4f8b-\u8fd9\u4e2a\u6570\u5b57\u80af\u5b9a\u4f1a\u4f4e\u4e8e\u8c37\u6b4c\u7684\u9884\u671f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8c37\u6b4c\u5728\u53bb\u5e748\u6708\u53d1\u5e03\u4e86\u4e00\u4efd\u7c7b\u4f3c\u7684\u58f0\u660e\uff0c\u56de\u987e\u4e86Android 9 Pie\u7684\u91c7\u7528\u7387\uff0c\u5b9e\u9645\u4e0a\u5df2\u7ecf\u505c\u6b62\u516c\u5e03\u54ea\u4e9bAndroid\u8bbe\u5907\u5b8c\u5168\u8fd0\u884c\u54ea\u4e2a\u7248\u672c\u7684Android\u7684\u7ec6\u5206\u767e\u5206\u6bd4\u3002(\u5f53\u65f6\uff0c\u5728Android 10\u53d1\u5e03\u4e4b\u524d\uff0c22.6%\u7684Android\u8bbe\u5907\u4e0a\u5df2\u7ecf\u5b89\u88c5\u4e86Android Pie\u3002)\u3002\n\u4e0e\u82f9\u679c\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u6570\u5b57\u4e5f\u76f8\u5f62\u89c1\u7ecc\u3002\u82f9\u679c\u76ee\u524d\u670981%\u7684iOS\u8bbe\u5907\u4f7f\u7528\u6700\u65b0\u7684iOS 13\uff0c\u8fd9\u4e00\u4f18\u52bf\u5f97\u76ca\u4e8e\u82f9\u679c\u5bf9\u786c\u4ef6\u548c\u8f6f\u4ef6\u7684\u51e0\u4e4e\u5b8c\u5168\u63a7\u5236\uff0c\u4ee5\u53ca\u4e0e\u6570\u91cf\u4f17\u591a\u7684Android\u624b\u673a\u76f8\u6bd4\uff0c\u82f9\u679c\u9700\u8981\u652f\u6301\u7684\u8bbe\u5907\u8981\u5c11\u5f97\u591a\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u8c37\u6b4c\u4ecd\u7136\u53d6\u5f97\u4e86\u826f\u597d\u7684\u8fdb\u5c55\uff0c\u5e0c\u671b\u5728\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u53d1\u5e03\u7684Android 11\u4e2d\uff0c\u5b83\u80fd\u7ee7\u7eed\u4fdd\u6301\u8fd9\u4e00\u8d8b\u52bf\u3002", "note_en": "Google has long struggled with getting device manufacturers to update older devices to the latest version of Android, but the company announced today that it\u2019s starting to see some success, with Android 10 seeing the fastest adoption rates of any version of Android.\n According to Google, Android 10 was installed on 100 million devices five months after its  launch in September 2019 \u2014 28 percent faster than it took the company to reach a similar milestone for Android Pie. Google credits the faster adoption rate to improvements the company has been making over the years, like Android Oreo\u2019s  Project Treble and Android 10\u2019s  Project Mainline, which makes it easier for hardware companies to create new updates.\n   But while those numbers are impressive, Google\u2019s post is notably missing some crucial information, like what percentage of Android devices are running Android 10 \u2014 a number that\u2019s sure to be lower than Google would like. In fact, Google has effectively stopped publishing the breakdown percentage of which Android devices are running which version of Android entirely,  following a similar announcement last August that looked back at Android 9 Pie adoption rates. (At the time, Android Pie had been installed on 22.6 percent of Android devices ahead of the release of Android 10.)\n Those numbers also pale in comparison to Apple,  which currently has 81 percent of all iOS devices on the latest iOS 13, an advantage helped by Apple\u2019s nearly total control over hardware and software, along with the drastically fewer devices that Apple needs to support compared to the myriad number of Android phones.\n Still, Google\u2019s making good progress, and hopefully it\u2019ll manage to continue the trend with Android 11 when it launches later this year.", "posttime": "2020-07-11 07:57:19", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "android,adoption", "title": "\u5230\u76ee\u524d\u4e3a\u6b62\uff0cAndroid 10\u7684\u91c7\u7528\u7387\u662f\u6240\u6709Android\u7248\u672c\u4e2d\u6700\u5feb\u7684", "title_en": "Android 10 Had the Fastest Adoption Rate of Any Version of Android Yet", "transed": 1, "url": "https://www.theverge.com/2020/7/9/21319238/android-10-fastest-adoption-rate-google-software-update", "via": "", "real_tags": ["android", "adoption"]}, {"category": "", "categoryclass": "", "imagename": "b626970df2870351f37066a66fa67115.png", "infoid": 1011120, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u4f7f\u75282020\u5e746\u6708\u53d1\u5e03\u7684Visual Studio\u4ee3\u7801\u3002\u6211\u4eec\u5e0c\u671b\u60a8\u80fd\u559c\u6b22\u6b64\u7248\u672c\u4e2d\u7684\u591a\u4e2a\u66f4\u65b0\uff0c\u5176\u4e2d\u4e00\u4e9b\u4e3b\u8981\u4eae\u70b9\u5305\u62ec\uff1a\n\u67e5\u770b\u6302\u8d77\u7684\u66f4\u6539\u5e76\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f-\u4ee5\u6811\u6216\u5217\u8868\u7684\u5f62\u5f0f\u67e5\u770b\u6587\u4ef6\uff0c\u6309\u540d\u79f0\u3001\u8def\u5f84\u6216\u72b6\u6001\u6392\u5e8f\u3002\n\u9002\u7528\u4e8eMacOS\u7684Java\u5305\u5b89\u88c5\u7a0b\u5e8f-\u8bbe\u7f6e\u4e3a\u5728MacOS\u4e0a\u4f7f\u7528VS\u4ee3\u7801\u5728Java\u4e2d\u8fdb\u884c\u5f00\u53d1\u3002\n7\u670813\u65e5\u661f\u671f\u4e00\uff0c\u592a\u5e73\u6d0b\u65f6\u95f4\u4e0a\u53489\u70b9(\u4f26\u6566\u65f6\u95f4\u4e0b\u53485\u70b9)\uff0c\u8bf7\u52a0\u5165\u6211\u4eec\u7684VS Code Team\u73b0\u573a\u76f4\u64ad\uff0c\u89c2\u770b\u6b64\u6b21\u53d1\u5e03\u7684\u6700\u65b0\u5185\u5bb9\u6f14\u793a\uff0c\u5e76\u5411\u6211\u4eec\u73b0\u573a\u63d0\u95ee\u3002\n\u4e1a\u5185\u4eba\u58eb\uff1a\u60f3\u5c3d\u5feb\u5c1d\u8bd5\u65b0\u529f\u80fd\u5417\uff1f\u60a8\u53ef\u4ee5\u4e0b\u8f7d\u6bcf\u665a\u7684\u5185\u90e8\u7248\u672c\uff0c\u5e76\u5728\u6700\u65b0\u66f4\u65b0\u53ef\u7528\u65f6\u7acb\u5373\u5c1d\u8bd5\u3002\u6709\u5173\u6700\u65b0\u7684Visual Studio\u4ee3\u7801\u65b0\u95fb\u3001\u66f4\u65b0\u548c\u5185\u5bb9\uff0c\u8bf7\u5728Twitter@code\u4e0a\u5173\u6ce8\u6211\u4eec\uff01\n\u5728\u8fd9\u4e2a\u91cc\u7a0b\u7891\u4e2d\uff0c\u6211\u4eec\u518d\u6b21\u4ece\u793e\u533a\u6536\u5230\u4e86\u6709\u7528\u7684\u53cd\u9988\uff0c\u5e2e\u52a9\u6211\u4eec\u8bc6\u522b\u548c\u89e3\u51b3\u4e86\u8bb8\u591a\u6613\u8bbf\u95ee\u6027\u95ee\u9898\u3002\u91cd\u70b9\uff1a\n\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u7684\u538b\u7f29\u6587\u4ef6\u5939\u73b0\u5728\u53ef\u4ee5\u6b63\u786e\u8bf4\u660e\u5c55\u5f00/\u6298\u53e0\u72b6\u6001\u548cARIA\u7ea7\u522b\u3002\n\u5c4f\u5e55\u9605\u8bfb\u5668\u73b0\u5728\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u66f4\u65b0\u5149\u6807\u504f\u79fb\u3002\u56e0\u6b64\uff0c\u5c4f\u5e55\u9605\u8bfb\u5668\u201c\u8bf4\u51fa\u5168\u90e8\u201d\u547d\u4ee4\u5728\u505c\u6b62\u548c\u6062\u590d\u65f6\u5e94\u8be5\u4f1a\u5de5\u4f5c\u5f97\u66f4\u597d\u3002\n\u4ee5\u524d\uff0cSettings\u7f16\u8f91\u5668\u53ea\u80fd\u7528\u4e8e\u7f16\u8f91\u57fa\u672c\u7c7b\u578b\u7684\u8bbe\u7f6e\uff0c\u5982\u5b57\u7b26\u4e32\u548c\u5e03\u5c14\u503c\uff0c\u5bf9\u4e8e\u66f4\u590d\u6742\u7684\u8bbe\u7f6e\u7c7b\u578b\uff0c\u60a8\u9700\u8981\u76f4\u63a5\u7f16\u8f91settings.json\u3002\u73b0\u5728\uff0c\u53ef\u4ee5\u4ece\u8bbe\u7f6e\u7f16\u8f91\u5668\u7f16\u8f91\u975e\u5d4c\u5957\u5bf9\u8c61\u8bbe\u7f6e\u3002\u6269\u5c55\u4f5c\u8005\u53ef\u4ee5\u4f7f\u7528\u6b64\u529f\u80fd\u6765\u589e\u52a0\u8fd9\u4e9b\u7c7b\u578b\u8bbe\u7f6e\u7684\u53ef\u89c1\u6027\u3002\n\u6709\u4e00\u4e2a\u65b0\u547d\u4ee4list.selectAndPReserve veFocus\uff0c\u5b83\u5141\u8bb8\u60a8\u4ece\u5217\u8868\u4e2d\u9009\u62e9\u4e00\u4e2a\u9879\u76ee\uff0c\u540c\u65f6\u5c06\u7126\u70b9\u4fdd\u6301\u5728\u8be5\u5217\u8868\u4e2d\u3002\u5982\u679c\u8981\u4ece\u5217\u8868(\u5982\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668)\u4e2d\u9009\u62e9\u591a\u4e2a\u6587\u4ef6\uff0c\u800c\u4e0d\u5c06\u7126\u70b9\u8f6c\u5230\u6587\u4ef6\u7f16\u8f91\u5668\uff0c\u8fd9\u4f1a\u5f88\u6709\u5e2e\u52a9\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8be5\u547d\u4ee4\u4e0d\u7ed1\u5b9a\u5230\u4efb\u4f55\u952e\u76d8\u5feb\u6377\u952e\uff0c\u4f46\u60a8\u53ef\u4ee5\u6dfb\u52a0\u81ea\u5df1\u7684\u952e\u7ed1\u5b9a\uff1a\nVS\u4ee3\u7801\u73b0\u5728\u652f\u6301\u901a\u8fc7\u62d6\u653e\u5230\u6269\u5c55\u89c6\u56fe\u6765\u5b89\u88c5\u6269\u5c55VSIX\u6587\u4ef6\u3002\n\u5728\u641c\u7d22\u7f16\u8f91\u5668\u547d\u4ee4(search.action.openNewEditor\u3001search.action.openNewEditorToSide)\u4e2d\u6dfb\u52a0\u4e86\u4e24\u4e2a\u65b0\u53c2\u6570\uff0c\u4ee5\u5141\u8bb8\u952e\u7ed1\u5b9a\u914d\u7f6e\u65b0\u641c\u7d22\u7f16\u8f91\u5668\u7684\u884c\u4e3a\u65b9\u5f0f\uff1a\nriggerSearch-\u6253\u5f00\u641c\u7d22\u7f16\u8f91\u5668\u65f6\u662f\u5426\u81ea\u52a8\u8fd0\u884c\u641c\u7d22\u3002\u9ed8\u8ba4\u503c\u4e3atrue\u3002\nFocusResults-\u662f\u5c06\u7126\u70b9\u653e\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\uff0c\u8fd8\u662f\u5c06\u7126\u70b9\u653e\u5728\u67e5\u8be2\u8f93\u5165\u4e2d\u3002\u9ed8\u8ba4\u503c\u4e3atrue\u3002\n\u4f8b\u5982\uff0c\u4e0b\u9762\u7684\u952e\u7ed1\u5b9a\u5728\u6253\u5f00\u641c\u7d22\u7f16\u8f91\u5668\u65f6\u8fd0\u884c\u641c\u7d22\uff0c\u4f46\u5c06\u7126\u70b9\u4fdd\u7559\u5728\u641c\u7d22\u67e5\u8be2\u63a7\u4ef6\u4e2d\u3002\n{&#34\uff1bkey&#34\uff1b\uff1a&#34\uff1bctrl+o&#34\uff1b\uff0c&#34\uff1bcommand&#34\uff1b\uff1a&#34\uff1bsearch.action.openNewEditor&#34\uff1b\uff0c&#34\uff1bargs&#34\uff1b\uff1a{&#34\uff1bquery&#34\uff1b\uff1a&#34\uff1bvs Code&#34\uff1b\uff0c&#34\uff1briggerSearch&#34\uff1b\uff1aTRUE\uff0c&#34\uff1bFocusResults&#34\uff1b\uff1aFALSE}}\u3002\nsearch.searchEditor.defaultNumberOfContextLines\u8bbe\u7f6e\u5df2\u66f4\u65b0\u4e3a\u9ed8\u8ba4\u503c1\u800c\u4e0d\u662f0\uff0c\u8fd9\u610f\u5473\u7740\u5728\u641c\u7d22\u7f16\u8f91\u5668\u4e2d\u7684\u6bcf\u4e2a\u7ed3\u679c\u884c\u524d\u540e\u90fd\u4f1a\u663e\u793a\u4e00\u4e2a\u4e0a\u4e0b\u6587\u884c\u3002\u8981\u8fd4\u56de\u5230\u65e7\u884c\u4e3a\uff0c\u8bf7\u5c06\u8be5\u503c\u8bbe\u7f6e\u56de0\u3002\n\u73b0\u5728\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5207\u6362\u4ee5\u524d\u5b58\u5728\u7684workBench.list.HorizontalScrolling\u8bbe\u7f6e\uff0c\u800c\u65e0\u9700\u5f3a\u5236\u60a8\u91cd\u65b0\u52a0\u8f7d\u5de5\u4f5c\u53f0\u3002\nVS\u4ee3\u7801\u73b0\u5728\u652f\u6301\u5728\u7f16\u8f91\u5668\u4e2d\u67e5\u627e/\u66ff\u6362\u65f6\u66f4\u6539\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u7ec4\u7684\u5927\u5c0f\u5199\u3002\u8fd9\u662f\u4f7f\u7528\u4fee\u9970\u7b26\\u\\u\\l\\L\u5b8c\u6210\u7684\uff0c\u5176\u4e2d\\u\u548c\\l\u5c06\u5927\u5199/\u5c0f\u5199\u5355\u4e2a\u5b57\u7b26\uff0c\u800c\\U\u548c\\L\u5c06\u5927\u5199/\u5c0f\u5199\u5339\u914d\u7ec4\u7684\u5176\u4f59\u90e8\u5206\u3002\n\u4e5f\u53ef\u4ee5\u5806\u53e0\u4fee\u9970\u7b26-\u4f8b\u5982\uff0c\\u\\u\\u$1\u5c06\u5927\u5199\u8be5\u7ec4\u7684\u524d\u4e09\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\\l\\u$1\u5c06\u5c0f\u5199\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c\u5927\u5199\u5176\u4f59\u5b57\u7b26\u3002\n\u76ee\u524d\uff0c\u8fd9\u4e9b\u4ec5\u5728\u7f16\u8f91\u5668\u7684\u67e5\u627e\u63a7\u4ef6\u4e2d\u53d7\u652f\u6301\uff0c\u800c\u5728\u5168\u5c40\u5728\u6587\u4ef6\u4e2d\u67e5\u627e\u4e2d\u4e0d\u53d7\u652f\u6301\u3002\n\u6211\u4eec\u65b0\u7684JavaScript\u8c03\u8bd5\u5668\uff0c\u5728\u4e0a\u4e2a\u6708\u6210\u4e3a\u5185\u90e8\u4eba\u58eb\u7684\u9ed8\u8ba4\u8c03\u8bd5\u5668\u4e4b\u540e\uff0c\u73b0\u5728\u662fVS Code\u4e2dJavaScript(Node.js\u548cChrome)\u7684\u9ed8\u8ba4\u8c03\u8bd5\u5668\u3002\u5982\u679c\u60a8\u8df3\u8fc7\u4e86\u524d\u51e0\u7bc7VS\u4ee3\u7801\u66f4\u6539\u65e5\u5fd7\u4e2d\u7684\u201c\u9884\u89c8\u529f\u80fd\u201d\u90e8\u5206\uff0c\u5219\u53ef\u4ee5\u4e86\u89e3\u8c03\u8bd5\u5668\u81ea\u8ff0\u6587\u4ef6\u4e2d\u7684\u201cWhat\u201d\u65b0\u90e8\u5206\u3002\n\u60a8\u4e0d\u9700\u8981\u66f4\u6539\u4efb\u4f55\u8bbe\u7f6e\u6216\u542f\u52a8\u914d\u7f6e\u5c31\u53ef\u4ee5\u5229\u7528\u65b0\u7684\u8c03\u8bd5\u5668\u3002\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u6253\u5f00\u4e00\u4e2a\u95ee\u9898\uff01\n\u76f4\u5230\u4eca\u5929\uff0cVS\u4ee3\u7801\u8c03\u8bd5\u5668\u8fd8\u6ca1\u6709\u6807\u51c6\u7684\u65b9\u5f0f\u6765\u663e\u793a\u7f16\u8f91\u5668\u4e2d\u7684\u6587\u4ef6\u53ea\u9700\u5355\u51fb\u4e00\u4e2a\u6309\u94ae\u5c31\u53ef\u4ee5\u8f7b\u677e\u8c03\u8bd5\u3002\u6709\u4e9b\u8c03\u8bd5\u6269\u5c55\u5141\u8bb8\u60a8\u8fd9\u6837\u505a\uff0c\u901a\u5e38\u4f7f\u7528\u7684\u8c03\u8bd5\u914d\u7f6e\u4f1a\u63d0\u793a\u60a8\u5728\u7f16\u8f91\u5668\u4e2d\u8c03\u8bd5\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u7528\u6237\u4ecd\u5fc5\u987b\u5728\u8c03\u8bd5\u914d\u7f6e\u4e0b\u62c9\u83dc\u5355\u4e2d\u9009\u62e9\u6b63\u786e\u7684\u914d\u7f6e\uff0c\u7136\u540e\u624d\u80fd\u4f7f\u7528F5\u3002\u5176\u4ed6\u8c03\u8bd5\u6269\u5c55\u5b9e\u73b0\u4e86F5\u7684\u540e\u5907\u7b56\u7565\uff1a\u5982\u679c\u4e0d\u5b58\u5728Launch.json\uff0c\u5219F5\u5c06\u5c1d\u8bd5\u8c03\u8bd5\u5f53\u524d\u5728\u6d3b\u52a8\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u7684\u6587\u4ef6\u3002\n\u7531\u4e8e\u8fd9\u4e24\u79cd\u65b9\u6cd5\u90fd\u4e0d\u5bb9\u6613\u53d1\u73b0\uff0c\u4e00\u4e9b\u8c03\u8bd5\u6269\u5c55(\u4f8b\u5982\uff0cPython)\u5df2\u7ecf\u5f00\u59cb\u5728\u7f16\u8f91\u5668\u7684\u6807\u9898\u533a\u57df\u6dfb\u52a0\u4e00\u4e2aRun\u6309\u94ae\u3002\n\u56e0\u4e3a\u6211\u4eec\u8fd8\u6ca1\u6709\u627e\u5230\u66f4\u597d\u7684\u65b9\u6cd5\uff0c\u800c\u4e14\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5728\u4e0d\u9700\u8981\u4efb\u4f55\u65b0API\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\uff0c\u6240\u4ee5\u6211\u4eec\u5199\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u4ee5\u6807\u51c6\u65b9\u5f0f\u5b9e\u73b0\u5b83\u7684\u6307\u5bfc\u65b9\u9488\u3002\u6269\u5c55\u4f5c\u8005\u53ef\u4ee5\u5728\u4e0b\u9762\u7684\u6269\u5c55\u7f16\u5199\u4e00\u8282\u4e2d\u627e\u5230\u8fd9\u4e9b\u51c6\u5219\u3002\n\u5982\u679c\u4e00\u4e2a\u6216\u4e24\u4e2a\u90fd\u663e\u793a\u5728\u7f16\u8f91\u5668\u6807\u9898\u533a\u57df\u7684\u5de6\u4fa7\uff0c\u5219\u5728\u7f16\u8f91\u5668\u4e2d\u8fd0\u884c\u6216\u8c03\u8bd5\u6587\u4ef6\u53ea\u9700\u5355\u51fb\u4e00\u4e0b\u5373\u53ef\u3002\n\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u5728\u5e38\u89c1\u60c5\u51b5\u4e0b\u4f7f\u8c03\u7528\u5806\u6808\u4e0d\u90a3\u4e48\u62e5\u6324\uff1a\u8c03\u7528\u5806\u6808\u89c6\u56fe\u73b0\u5728\u652f\u6301\u9690\u85cf\u7531\u4e8e\u6280\u672f\u539f\u56e0\u800c\u5b58\u5728\u7684\u8c03\u8bd5\u4f1a\u8bdd\u8282\u70b9\uff0c\u4f46\u4e0d\u4f1a\u4e3a\u7528\u6237\u63d0\u4f9b\u592a\u591a\u4ef7\u503c\u3002\n\u9009\u62e9\u4f7f\u7528\u6b64\u529f\u80fd\u7684\u7b2c\u4e00\u4e2a\u8c03\u8bd5\u6269\u5c55\u662f\u65b0\u7684JavaScript\u8c03\u8bd5\u5668\uff0c\u53ea\u8981\u53ea\u6709\u4e00\u4e2a\u5b50\u4f1a\u8bdd\uff0c\u5b83\u5c31\u53ef\u4ee5\u6d88\u9664\u7236\u8c03\u8bd5\u4f1a\u8bdd\u3002\n\u6211\u4eec\u5e0c\u671b\u5176\u4ed6\u8c03\u8bd5\u6269\u5c55\u4e5f\u4f1a\u7d27\u968f\u5176\u540e\u3002\u8bf7\u53c2\u9605\u4e0b\u9762\u5efa\u8bae\u7684\u65b0API\u3002\n\u4e3a\u4e86\u4f7f\u6765\u81eaVisual Studio\u7684\u7528\u6237\u66f4\u5bb9\u6613\u53d1\u73b0\u8df3\u8f6c\u5230\u5149\u6807\u547d\u4ee4\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u547d\u4ee4alias set next\u8bed\u53e5\u3002\n\u5982\u679c\u60a8\u4e0d\u77e5\u9053Jump to Cursor\u505a\u4ec0\u4e48\uff1a\u5b83\u5141\u8bb8\u60a8\u5c06\u7a0b\u5e8f\u6267\u884c\u79fb\u52a8\u5230\u4e00\u4e2a\u65b0\u4f4d\u7f6e\uff0c\u800c\u65e0\u9700\u6267\u884c\u4e2d\u95f4\u7684\u4efb\u4f55\u6e90\u4ee3\u7801\u3002\n\u5f53\u5c06\u9f20\u6807\u60ac\u505c\u5728\u65ad\u70b9\u89c6\u56fe\u4e2d\u7684\u6e90\u65ad\u70b9\u4e0a\u65f6\uff0cVS Code\u73b0\u5728\u663e\u793a\u65ad\u70b9\u7684\u7edd\u5bf9\u8def\u5f84\u3002\npnpm\u73b0\u5728\u662fnpm.PackageManager\u8bbe\u7f6e\u4ee5\u53caNPM\u548cYAR\u8fd0\u884c\u811a\u672c\u7684\u6709\u6548\u9009\u62e9\u3002\n\u6240\u6709\u5b58\u50a8\u5e93\u90fd\u5448\u73b0\u5728\u5355\u4e2a\u89c6\u56fe\u4e2d\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u66f4\u597d\u5730\u4e86\u89e3\u6574\u4e2a\u5de5\u4f5c\u533a\u72b6\u6001\u3002\u6b64\u5916\uff0c\u73b0\u5728\u53ef\u4ee5\u5c06\u6e90\u4ee3\u7801\u7ba1\u7406\u89c6\u56fe\u79fb\u52a8\u5230\u9762\u677f\u4e2d\uff0c\u5e76\u4e14\u53ef\u4ee5\u5c06\u5176\u4ed6\u89c6\u56fe\u79fb\u52a8\u5230\u6e90\u4ee3\u7801\u7ba1\u7406\u89c6\u56fe\u5bb9\u5668\u4e2d\u3002\n\u5728\u4f7f\u7528\u5217\u8868\u89c6\u56fe\u9009\u9879\u65f6\uff0c\u6211\u4eec\u6dfb\u52a0\u4e86\u5bf9\u6e90\u4ee3\u7801\u7ba1\u7406\u89c6\u56fe\u4e2d\u7684\u66f4\u6539\u6309\u540d\u79f0\u3001\u8def\u5f84(\u9ed8\u8ba4)\u548c\u72b6\u6001\u8fdb\u884c\u6392\u5e8f\u7684\u652f\u6301\u3002\u6211\u4eec\u5df2\u5c06\u89c6\u56fe\u9009\u9879(\u5217\u8868\u4e0e\u6811)\u548c\u6392\u5e8f\u9009\u9879\u5408\u5e76\u5230\u4e0a\u4e0b\u6587\u83dc\u5355\u4e2d\u7684\u65b0\u89c6\u56fe\u6392\u5e8f\u83dc\u5355\u9879\u4e2d\u3002\n\u4e0e\u901a\u5e38\u7684git merge\u547d\u4ee4\u7c7b\u4f3c\uff0c\u5982\u679c\u7528\u6237\u6b63\u5728\u6267\u884cgit merge--squash\u547d\u4ee4\uff0cSCM\u89c6\u56fe\u73b0\u5728\u5c06\u4f7f\u7528\u9ed8\u8ba4\u6d88\u606f\u6062\u590dSCM\u8f93\u5165\u3002\nVS\u4ee3\u7801\u73b0\u5728\u6346\u7ed1\u4e86TypeScript 3.9.6\u3002\u8fd9\u4e2a\u5c0f\u66f4\u65b0\u4fee\u590d\u4e86\u4e00\u4e9b\u9519\u8bef\uff0c\u5305\u62ec\u4e00\u4e2a\u53ef\u80fd\u5bfc\u81f4TypeScript\u670d\u52a1\u5668\u5728\u67d0\u4e9b\u6e90\u4ee3\u7801\u6a21\u5f0f\u4e0a\u5d29\u6e83\u7684\u9519\u8bef\u3002\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5c06\u5927\u578b\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u4e0a\u4f20\u5230VS Code\u7684Web\u7248\u672c\uff0c\u7cfb\u7edf\u4f1a\u51c6\u786e\u62a5\u544a\u8fdb\u5ea6\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u8ddf\u8e2a\u5df2\u4e0a\u4f20\u7684\u5b57\u8282\u6570\u4ee5\u53ca\u4e0a\u4f20\u901f\u5ea6\u3002\n\u5728\u8fd9\u4e00\u91cc\u7a0b\u7891\u671f\u95f4\uff0c\u5728\u5b8c\u5168\u652f\u6301\u6d4f\u89c8\u5668\u4e2d\u7684\u6587\u672c\u7f16\u7801\u4ee5\u8bfb\u5199\u6587\u4ef6\u65b9\u9762\u505a\u4e86\u5927\u91cf\u5de5\u4f5c\u3002\u901a\u8fc7\u5229\u7528webpack\uff0c\u6211\u4eec\u4f9d\u8d56\u4e8e\u6d4f\u89c8\u5668\u73b0\u5728\u652f\u6301\u7684\u4e24\u4e2a\u5e93\uff1a\n\u9884\u89c8\u529f\u80fd\u5c1a\u672a\u51c6\u5907\u597d\u53d1\u5e03\uff0c\u4f46\u529f\u80fd\u8db3\u4ee5\u4f7f\u7528\u3002\u6211\u4eec\u6b22\u8fce\u60a8\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u5c3d\u65e9\u63d0\u4f9b\u53cd\u9988\u3002\n\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u6708\u91cc\uff0c\u6211\u4eec\u4e00\u76f4\u5728\u52aa\u529b\u652f\u6301\u8de8\u673a\u5668\u540c\u6b65VS\u4ee3\u7801\u9996\u9009\u9879\uff0c\u8fd9\u4e00\u529f\u80fd\u5728Insiers\u53d1\u5e03\u7248\u4e2d\u53ef\u4f9b\u9884\u89c8\u3002\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u8ba1\u7b97\u673a\u89c6\u56fe\u4e2d\u8ba1\u7b97\u673a\u6761\u76ee\u4e0a\u7684\u5173\u95ed\u9996\u9009\u9879\u540c\u6b65\u4e0a\u4e0b\u6587\u83dc\u5355\u64cd\u4f5c\u6765\u7981\u7528\u5176\u4ed6\u8ba1\u7b97\u673a\u4e0a\u7684\u540c\u6b65\u3002\nTypeScript4.0\u6d4b\u8bd5\u7248\u8fd8\u5e26\u6765\u4e86\u4e00\u4e2a\u65b0\u529f\u80fd\uff0c\u53ef\u4ee5\u5e2e\u52a9\u60a8\u51cf\u5c11\u52a0\u8f7d\u5927\u578bJavaScript\u6216TypeScript\u9879\u76ee\u65f6\u6240\u82b1\u8d39\u7684\u7b49\u5f85\u65f6\u95f4\u3002\u8981\u89e3\u91ca\u8fd9\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u4ecb\u7ecd\u4e00\u4e0b\u5f53\u524d\u7248\u672c\u7684TypeScript\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u80cc\u666f\u77e5\u8bc6\u3002\n\u5728VS\u4ee3\u7801\u4e2d\u6253\u5f00JavaScript\u6216TypeScript\u6587\u4ef6\u65f6\uff0cTypeScript\u8bed\u8a00\u670d\u52a1\u4f1a\u786e\u5b9a\u8be5\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u9879\u76ee\uff0c\u7136\u540e\u4e3a\u5176\u52a0\u8f7d\u5173\u8054\u7684\u9879\u76ee\u3002\u6709\u65f6\u8fd9\u4e2a\u9879\u76ee\u53ef\u80fd\u76f8\u5f53\u5927\uff0c\u6bd4\u5982\u6838\u5fc3VS\u4ee3\u7801\u4ee3\u7801\u5e93\uff0c\u5b83\u7531\u6570\u5343\u4e2a\u6253\u5b57\u6587\u4ef6\u7ec4\u6210\u3002\u52a0\u8f7d\u9879\u76ee\u65f6\uff0cVS\u4ee3\u7801\u80fd\u591f\u5904\u7406\u57fa\u672c\u7684\u8bed\u6cd5\u64cd\u4f5c\uff0c\u5982\u83b7\u53d6\u6587\u6863\u5927\u7eb2\u548c\u542f\u7528\u4ee3\u7801\u6298\u53e0\uff0c\u4f46\u5b83\u5f53\u524d\u4e0d\u80fd\u63d0\u4f9b\u667a\u80fd\u611f\u77e5\u6216\u5176\u4ed6\u66f4\u9ad8\u7ea7\u7684\u8bed\u8a00\u529f\u80fd\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d6\u51b3\u4e8e\u5bf9\u6574\u4e2a\u9879\u76ee\u7684\u7406\u89e3\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u63d0\u4f9b\u81ea\u52a8\u5bfc\u5165\uff0cTypeScript Language\u670d\u52a1\u9700\u8981\u77e5\u9053\u9879\u76ee\u4e2d\u6240\u6709\u5bfc\u51fa\u7684\u7b26\u53f7\u3002\nTypeScript4.0\u4e2d\u7684\u66f4\u6539\u4f7fVS\u4ee3\u7801\u5728\u5927\u578b\u9879\u76ee\u4ecd\u5728\u52a0\u8f7d\u65f6\u63d0\u4f9b\u667a\u80fd\u611f\u77e5\u548c\u5176\u4ed6\u66f4\u9ad8\u7ea7\u7684\u8bed\u8a00\u529f\u80fd\u6210\u4e3a\u53ef\u80fd\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u7684IntelliSense\u4ec5\u9650\u4e8e\u53c2\u8003\u5f53\u524d\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u6574\u4e2a\u9879\u76ee\u3002\u8fd9\u610f\u5473\u7740\u5efa\u8bae\u548c\u8f6c\u5230\u5b9a\u4e49\u7b49\u529f\u80fd\u5c06\u8d77\u4f5c\u7528\uff0c\u4f46\u6211\u4eec\u5c06\u4ec5\u663e\u793a\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u5efa\u8bae\uff0c\u5e76\u4e14\u60a8\u53ea\u80fd\u8fd0\u884c\u8f6c\u5230\u5b9a\u4e49\u6765\u8df3\u8f6c\u5230\u5f53\u524d\u6587\u4ef6\u4e2d\u7684\u53e6\u4e00\u4e2a\u7b26\u53f7\u3002\n\u5982\u679c\u60a8\u4f7f\u7528\u5927\u578bJavaScript\u548cTypeScript\u9879\u76ee\uff0c\u6211\u4eec\u5f88\u6709\u5174\u8da3\u542c\u53d6\u60a8\u5bf9\u6b64\u65b0\u529f\u80fd\u7684\u53cd\u9988\u3002\u4eca\u5929\u60a8\u53ef\u4ee5\u4f7f\u7528TypeScript Night\u6269\u5c55\u6765\u8bd5\u7528\u5b83\u3002\u6211\u4eec\u5e0c\u671b\u5b83\u5141\u8bb8\u60a8\u51e0\u4e4e\u7acb\u5373\u5f00\u59cb\u4f7f\u7528\u60a8\u7684\u4ee3\u7801\uff0c\u76f4\u5230\u66f4\u5b8c\u6574\u7684\u3001\u9879\u76ee\u8303\u56f4\u5185\u7684IntelliSense\u53d8\u5f97\u53ef\u7528\u3002\n\u6211\u4eec\u6b63\u5728\u81f4\u529b\u4e8e\u80fd\u591f\u64a4\u6d88\u548c\u91cd\u505a\u4ee3\u7801\u64cd\u4f5c\u548c\u91cd\u6784\u3002\u4e00\u4e2a\u7a81\u51fa\u7684\u4f8b\u5b50\u662fJava\u7c7b\u91cd\u547d\u540d\u91cd\u6784\uff0c\u5b83\u8fdb\u884c\u6587\u672c\u66f4\u6539\u5e76\u91cd\u547d\u540d\u78c1\u76d8\u4e0a\u7684\u6587\u4ef6\u3002\u73b0\u5728\u53ef\u4ee5\u64a4\u6d88\u6b64\u64cd\u4f5c\uff0c\u4f46\u4ecd\u9700\u8981\u89e6\u53d1\u4e24\u6b21\u64a4\u6d88\u3002\u656c\u8bf7\u5173\u6ce8\uff0c\u6211\u4eec\u5c06\u8fdb\u4e00\u6b65\u6539\u8fdb\u8fd9\u4e00\u70b9\uff0c\u5e76\u8bf7\u5c3d\u65e9\u63d0\u4f9b\u53cd\u9988\u3002\nVS\u4ee3\u7801\u56e2\u961f\u7ee7\u7eed\u5bf9\u7b14\u8bb0\u672c\u63d0\u4f9b\u672c\u673a\u652f\u6301\u3002\u4e3a\u4e86\u5e2e\u52a9\u5f00\u53d1\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2aGitHub Issue\u7b14\u8bb0\u672c\u6269\u5c55\uff0c\u53ef\u4ee5\u8ba9\u60a8\u641c\u7d22GitHub\u95ee\u9898\u548c\u62c9\u53d6\u8bf7\u6c42\u3002\u6b64\u6269\u5c55\u4ecd\u5904\u4e8e\u9884\u89c8\u9636\u6bb5\uff0c\u9700\u8981\u4f7f\u7528VS Code Inside\uff0c\u4f46\u5b83\u53ef\u4ee5\u8ba9\u60a8\u7b2c\u4e00\u624b\u4f53\u9a8c\u7b14\u8bb0\u672c\uff0c\u6211\u4eec\u6b22\u8fce\u60a8\u7684\u53cd\u9988\u3002\n\u6211\u4eec\u66f4\u65b0\u4e86\u7b14\u8bb0\u672c\u7535\u6c60\u7684\u89c6\u89c9\u5916\u89c2\uff0c\u4f7f\u5176\u8bbe\u8ba1\u66f4\u7d27\u51d1\u3002\u6211\u4eec\u8fd8\u4e3a\u9009\u5b9a\u7684\u5355\u5143\u683c\u6dfb\u52a0\u4e86\u9634\u5f71\u8f6e\u5ed3\uff0c\u4ee5\u4f7f\u9009\u62e9\u72b6\u6001\u66f4\u52a0\u660e\u663e\u3002\n\u6211\u4eec\u5728\u7b14\u8bb0\u672c\u4e2d\u6dfb\u52a0\u4e86\u70ed\u9000\u51fa\u652f\u6301\uff0c\u4ee5\u5141\u8bb8\u6269\u5c55\u6765\u5904\u7406\u5907\u4efd\u548c\u6062\u590d\u3002\u60a8\u672a\u4fdd\u5b58\u7684\u672c\u5730\u66f4\u6539\u73b0\u5728\u53ef\u4ee5\u901a\u8fc7\u6269\u5c55\u5e8f\u5217\u5316\uff0c\u5e76\u5728\u91cd\u65b0\u6253\u5f00\u5de5\u4f5c\u533a\u65f6\u6062\u590d\u3002\n\u6211\u4eec\u6dfb\u52a0\u4e86\u5bf9\u6269\u5c55\u7684\u652f\u6301\uff0c\u4ee5\u4fc3\u8fdb\u64a4\u6d88/\u91cd\u505a\u5806\u6808\u3002\u6269\u5c55\u73b0\u5728\u53ef\u4ee5\u63a7\u5236\u54ea\u4e9b\u64cd\u4f5c\u662f\u53ef\u64a4\u6d88\u7684\u3002\u4f8b\u5982\uff0c\u5728GitHub\u95ee\u9898\u7b14\u8bb0\u672c\u4e2d\uff0c\u60a8\u53ef\u4ee5\u9009\u62e9Lock\u6309\u94ae\u5c06\u5355\u5143\u683c\u5185\u5bb9\u8bbe\u4e3a\u53ea\u8bfb\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u666e\u901a\u7684Undo/Redo\u547d\u4ee4\u64a4\u6d88/\u91cd\u505a\u6b64\u64cd\u4f5c\u3002\n\u6211\u4eec\u6269\u5c55\u4e86\u201c\u65b0\u5efa\u6587\u4ef6\u201d\u547d\u4ee4(WindowsN(\u2318\uff0cLinuxCtrl+N))\uff0c\u4ee5\u652f\u6301\u521b\u5efa\u65b0\u7684\u65e0\u6807\u9898\u7b14\u8bb0\u672c\u6587\u4ef6\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u952e\u7ed1\u5b9a\u5feb\u901f\u521b\u5efa\u4e00\u4e2aGitHub\u95ee\u9898\u7b14\u8bb0\u672c\u5e76\u8fd0\u884c\u67e5\u8be2\u3002\nNotebook.FocusedCellEdge\uff1a\u5f53\u5355\u5143\u683c\u88ab\u805a\u7126\u65f6\uff0c\u5355\u5143\u683c\u7684\u4e0a\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u7684\u989c\u8272\u3002\n\u6b64\u793a\u4f8b\u8bf4\u660e\u5982\u4f55\u57fa\u4e8e\u73b0\u6709\u7684VS\u4ee3\u7801\u8c03\u8bd5\u5668\u6269\u5c55\u5b9e\u73b0\u7b14\u8bb0\u672c\u8c03\u8bd5\u529f\u80fd\u3002\n\u6b64\u793a\u4f8b\u8bf4\u660e\u5982\u4f55\u57fa\u4e8eXeus\u5185\u6838\u53ca\u5176\u5bf9\u8c03\u8bd5\u9002\u914d\u5668\u534f\u8bae\u7684\u672c\u673a\u652f\u6301\u6765\u5b9e\u73b0\u7b14\u8bb0\u672c\u8c03\u8bd5\u529f\u80fd\u3002\n\u5982\u679c\u60a8\u5bf9\u4e3aVS\u4ee3\u7801\u521b\u5efaNotebook\u6269\u5c55\u611f\u5174\u8da3\uff0c\u6709\u4e00\u4e2a\u65b0\u7684\u6307\u5357\u8be6\u7ec6\u4ecb\u7ecd\u4e86Notebook API\u3002\u60a8\u5c06\u4e86\u89e3API\u4ee5\u53caVS\u4ee3\u7801\u7b14\u8bb0\u672c\u57fa\u7840\u8bbe\u65bd\u548c\u7b14\u8bb0\u672c\u6269\u5c55\u5f00\u53d1\u6700\u4f73\u5b9e\u8df5\u7684\u7ec6\u8282\u3002\n\u8fdc\u7a0b\u5f00\u53d1\u6269\u5c55\u7684\u5de5\u4f5c\u4ecd\u5728\u7ee7\u7eed\uff0c\u5b83\u5141\u8bb8\u60a8\u4f7f\u7528\u5bb9\u5668\u3001\u8fdc\u7a0b\u8ba1\u7b97\u673a\u6216Windows Subsystem for Linux(WSL)\u4f5c\u4e3a\u529f\u80fd\u9f50\u5168\u7684\u5f00\u53d1\u73af\u5883\u3002\nRemote-Containers and WSL\uff1a\u5728WSL2\u535a\u5ba2\u6587\u7ae0\u4e2d\u67e5\u770b\u6700\u65b0\u7684\u4f7f\u7528\u8fdc\u7a0b\u5bb9\u5668\u3002\n\u60a8\u53ef\u4ee5\u5728Remote Development\u53d1\u884c\u8bf4\u660e\u4e2d\u4e86\u89e3\u65b0\u7684\u6269\u5c55\u529f\u80fd\u548c\u9519\u8bef\u4fee\u590d\u3002\n\u5982\u679c\u60a8\u662fVS\u4ee3\u7801\u8fdc\u7a0b\u5f00\u53d1\u7684\u65b0\u624b\uff0c\u60a8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u5165\u95e8\u6559\u7a0b\u5f00\u59cb\uff1a\n\u6700\u65b0\u7248\u672c\u7684Azure\u5e10\u6237\u6269\u5c55\u73b0\u5728\u516c\u5f00\u4e86\u4e00\u4e2a\u53ef\u4e0e\u6700\u65b0Azure SDK\u4e00\u8d77\u4f7f\u7528\u7684\u51ed\u636e\u5bf9\u8c61\u3002\nGitHub Pull Requests and Issues\u6269\u5c55\u7684\u5de5\u4f5c\u4ecd\u5728\u7ee7\u7eed\uff0c\u8be5\u6269\u5c55\u5141\u8bb8\u60a8\u5904\u7406\u3001\u521b\u5efa\u548c\u7ba1\u7406Pull\u8bf7\u6c42\u548c\u95ee\u9898\u3002\u6b64\u7248\u672c\u7684\u4e00\u4e9b\u66f4\u65b0\u5305\u62ec\uff1a\n\u8981\u4e86\u89e3\u6240\u6709\u65b0\u529f\u80fd\u548c\u66f4\u65b0\uff0c\u60a8\u53ef\u4ee5\u67e5\u770b0.18.0\u7248\u6269\u5c55\u7684\u5b8c\u6574\u66f4\u6539\u65e5\u5fd7\u3002\nHexEditor\u6269\u5c55\u7ee7\u7eed\u5f97\u5230\u6539\u8fdb\uff0c\u4ee5\u5728VS\u4ee3\u7801\u4e2d\u63d0\u4f9b\u539f\u751f\u7684\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u4f53\u9a8c\u3002\u6b64\u7248\u672c\u6269\u5c55\u7684\u4e3b\u8981\u66f4\u65b0\u5305\u62ec\u7b80\u5355\u7684\u7f16\u8f91\u652f\u6301(\u5141\u8bb8\u7528\u6237\u64a4\u6d88\u3001\u91cd\u505a\u3001\u7f16\u8f91\u73b0\u6709\u7684\u5341\u516d\u8fdb\u5236\u5355\u5143\u683c\uff0c\u4ee5\u53ca\u5c06\u65b0\u5355\u5143\u683c\u6dfb\u52a0\u5230\u6587\u6863\u672b\u5c3e)\u548c\u5927\u6587\u4ef6\u4f18\u5316\uff0c\u5141\u8bb8\u7528\u6237\u6253\u5f0018\u5146\u5b57\u8282\u4ee5\u4e0a\u7684\u6587\u4ef6\uff0c\u8fd9\u5728\u4ee5\u524d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u5728\u81ea\u8ff0\u6587\u4ef6\u4e2d\u53ef\u4ee5\u627e\u5230\u503c\u5f97\u6ce8\u610f\u7684\u66f4\u6539\u7684\u5b8c\u6574\u5217\u8868\u3002\u4efb\u4f55\u53cd\u9988\u6216\u9047\u5230\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u63d0\u4ea4\u7ed9vscode-\u5341\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u5b58\u50a8\u5e93\u3002\n\u6211\u4eec\u5df2\u7ecf\u6700\u7ec8\u786e\u5b9a\u4e86TreeItem\u3001StatusBarItem\u548cTimelineItem\u5143\u7d20\u4e2d\u7684AccessibilityInformation\u4ee5\u652f\u6301\u5c4f\u5e55\u9605\u8bfb\u5668\u3002AccessibilityInformation\u5305\u542b\u6807\u7b7e\u548c\u89d2\u8272\u3002\u4e00\u65e6\u7269\u54c1\u83b7\u5f97\u7126\u70b9\uff0c\u5c4f\u5e55\u9605\u8bfb\u5668\u5c31\u4f1a\u8bfb\u51fa\u6807\u7b7e\u3002\u9879\u7684\u89d2\u8272\u5b9a\u4e49\u5c4f\u5e55\u9605\u8bfb\u5668\u5982\u4f55\u4e0e\u5176\u4ea4\u4e92\u3002\u8be5\u89d2\u8272\u5e94\u5728\u7279\u6b8a\u60c5\u51b5\u4e0b\u8bbe\u7f6e\uff0c\u4f8b\u5982\uff0c\u5f53\u6811\u72b6\u5143\u7d20\u7684\u884c\u4e3a\u7c7b\u4f3c\u4e8e\u590d\u9009\u6846\u65f6\u3002\u5982\u679c\u672a\u6307\u5b9a\u89d2\u8272\uff0cVS\u4ee3\u7801\u5c06\u81ea\u52a8\u9009\u62e9\u9002\u5f53\u7684\u89d2\u8272\u3002\neditor.action.goToLocations\u547d\u4ee4\u73b0\u5728\u53ef\u4ee5\u5728\u627e\u4e0d\u5230\u4f4d\u7f6e\u65f6\u663e\u793a\u56de\u9000\u6d88\u606f\u3002\u8fd9\u5141\u8bb8\u6269\u5c55\u5b9e\u73b0\u50cfGo to Super Type\u8fd9\u6837\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u7684\u884c\u4e3a\u5c31\u50cf\u5185\u7f6e\u529f\u80fd\u4e00\u6837\uff0c\u4f8b\u5982\uff0cGo to Definition\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u65ad\u662f\u8c03\u7528\u6b64\u547d\u4ee4\u7684\u6269\u5c55\u7684\u5b8c\u6574\u793a\u4f8b\uff1a\nvscode\u3002\u547d\u4ee4\u3002ecuteCommand(&#39\uff1beditor.action.goToLocations&#39\uff1b\uff0cvscode)\u3002\u7a97\u6237\u3002activeTextEditor\u3002\u6587\u6863\u3002URI\u3001//\u951a\u5b9aURI\u548c\u4f4d\u7f6evscode\u3002\u7a97\u6237\u3002activeTextEditor\u3002\u9009\u62e9\u3002\u5f00\u59cb\uff0c[]\uff0c//\u7ed3\u679c(vscode.Location[])&#39\uff1b\u8f6c\u5230&#39\uff1b\uff0c//\u6a21\u5f0f&#39\uff1b\u627e\u4e0d\u5230\u8d85\u7ea7\u7c7b\u578b&#39\uff1b//&lt\uff1b-\u6d88\u606f)\uff1b\n\u5bf9\u4e8e\u5e0c\u671b\u901a\u8fc7\u5411\u7f16\u8f91\u5668\u6dfb\u52a0\u8fd0\u884c\u548c/\u6216\u8c03\u8bd5\u6309\u94ae\u6765\u6539\u5584\u5355\u6587\u4ef6\u8c03\u8bd5\u4f53\u9a8c\u7684\u8c03\u8bd5\u6269\u5c55\uff0c\u6211\u4eec\u5efa\u8bae\u9075\u5faa\u4ee5\u4e0b\u51c6\u5219\u4ee5\u83b7\u5f97\u4e00\u81f4\u7684\u5916\u89c2\uff1a\n\u5c06\u547d\u4ee4\u6dfb\u52a0\u5230\u7f16\u8f91\u5668\u6807\u9898\u533a\u57df(\u8bf7\u53c2\u9605\u6a21\u62df\u8c03\u8bd5)\uff1a\u8981\u4f7f\u547d\u4ee4\u4ec5\u5bf9\u7279\u5b9a\u8bed\u8a00\u53ef\u89c1\uff0c\u8bf7\u4f7f\u7528&#34\uff1bWHEN&#34\uff1b\u5b50\u53e5\uff0c\u4f8b\u5982&#34\uff1bresourceLangId==python&#34\uff1b\u3002\n\u5c06Run\u547d\u4ee4\u653e\u51651_Run@10\u7ec4\uff0c\u5c06Debug\u547d\u4ee4\u653e\u51651_Run@20\u7ec4\u3002\nCodeActionProviderMetadata\u4e0a\u7684\u65b0\u6587\u6863\u5c5e\u6027\u5141\u8bb8\u6269\u5c55\u4e3a\u5b83\u4eec\u8fd4\u56de\u7684\u4ee3\u7801\u64cd\u4f5c\u63d0\u4f9b\u9759\u6001\u6587\u6863\u3002\u5f53Provider\u8fd4\u56de\u4ee3\u7801\u64cd\u4f5c\u65f6\uff0c\u6b64\u6587\u6863\u663e\u793a\u5728\u4ee3\u7801\u64cd\u4f5c\u5217\u8868\u7684\u5e95\u90e8\uff1a\n\u5f53\u7528\u6237\u9009\u62e9\u6587\u6863\u6761\u76ee\u65f6\u6267\u884c\u547d\u4ee4\u3002\u6b64\u547d\u4ee4\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u663e\u793a\u6587\u6863\uff0c\u4e5f\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u6587\u6863\u3002\n\u901a\u8fc7OpenDialogOptions\u548cSaveDialogOptions\u4e3a\u6253\u5f00\u548c\u4fdd\u5b58\u6587\u4ef6\u5bf9\u8bdd\u6846\u63d0\u4f9b\u6807\u9898\u7684API\u5df2\u7ecf\u5b8c\u6210\u3002\u8bf7\u6ce8\u610f\uff0c\u5e76\u975e\u6240\u6709\u64cd\u4f5c\u7cfb\u7edf\u90fd\u5141\u8bb8\u8bbe\u7f6e\u6b64\u6807\u9898\uff0c\u56e0\u6b64\u6839\u636e\u60a8\u7684\u6269\u5c55\u8fd0\u884c\u4f4d\u7f6e\u7684\u4e0d\u540c\uff0c\u884c\u4e3a\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002\n\u6211\u4eec\u5f15\u5165\u4e86\u7b2c\u4e8c\u79cd\u6309\u94ae\u6837\u5f0f\uff0c\u53ef\u4ee5\u5728\u9700\u8981\u4f7f\u6309\u94ae\u4e0d\u90a3\u4e48\u7a81\u51fa\u65f6\u4f7f\u7528\uff1a\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5c06GitHub\u5de5\u4f5c\u6d41\u5fbd\u7ae0\u6dfb\u52a0\u5230\u5df2\u53d1\u5e03\u6269\u5c55\u7684\u5fbd\u7ae0\u5217\u8868\u4e2d\uff0c\u56e0\u4e3agithub.com\u5df2\u6dfb\u52a0\u5230\u6279\u51c6\u7684\u5fbd\u7ae0\u6765\u6e90\u5217\u8868\u4e2d\u3002\nargv.json\u73b0\u5728\u652f\u6301enable-proposed-api\u5b57\u6bb5\u3002\u8fd9\u5141\u8bb8\u6269\u5c55\u4f5c\u8005\u5728\u53d1\u5e03\u7684\u7248\u672c\u4e2d\u8fd0\u884c\u4ed6\u4eec\u5efa\u8bae\u7684API\u6269\u5c55\uff0c\u4ee5\u4fbf\u957f\u671f\u4f7f\u7528\uff0c\u800c\u4e0d\u9700\u8981\u901a\u8fc7\u547d\u4ee4\u884c\u6253\u5f00VS\u4ee3\u7801\u5e76\u4f20\u9012--enable-proposed-api CLI\u6807\u5fd7\u3002\n\u5373\u5c06\u53d1\u5e03\u76843.16\u89c4\u8303\u589e\u52a0\u4e86\u5bf9\u8bed\u4e49\u6807\u8bb0\u548c\u5b8c\u6210\u9879\u4e2d\u9644\u52a0\u6587\u672c\u7f16\u8f91\u7684\u5ef6\u8fdf\u89e3\u6790\u7684\u652f\u6301\u3002\n\u6bcf\u4e2a\u91cc\u7a0b\u7891\u90fd\u5e26\u6709\u65b0\u63d0\u51fa\u7684API\uff0c\u6269\u5c55\u4f5c\u8005\u53ef\u4ee5\u8bd5\u7528\u5b83\u4eec\u3002\u4e00\u5982\u65e2\u5f80\uff0c\u6211\u4eec\u9700\u8981\u60a8\u7684\u53cd\u9988\u3002\u8981\u8bd5\u7528\u5efa\u8bae\u7684API\uff0c\u60a8\u9700\u8981\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n\u8bf7\u6ce8\u610f\uff0c\u60a8\u4e0d\u80fd\u53d1\u5e03\u4f7f\u7528\u5efa\u8baeAPI\u7684\u6269\u5c55\u3002\u5728\u4e0b\u4e00\u4e2a\u7248\u672c\u4e2d\u53ef\u80fd\u4f1a\u6709\u7a81\u7834\u6027\u7684\u53d8\u5316\uff0c\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u60f3\u8981\u7834\u574f\u73b0\u6709\u7684\u6269\u5c55\u3002\n\u8fd9\u4e2a\u65b0\u7684\u63d0\u8baewindow.registerLinkProvider\u5efa\u7acb\u5728\u524d\u4e00\u7248\u672c\u4e2d\u6dfb\u52a0\u7684\u7ec8\u7aef\u7684\u65b0\u94fe\u63a5\u7cfb\u7edf\u4e4b\u4e0a\uff0c\u5b83\u5141\u8bb8\u6269\u5c55\u5c06\u94fe\u63a5\u9644\u52a0\u5230\u7ec8\u7aef\uff0c\u5305\u62ec\u60ac\u505c\u65f6\u663e\u793a\u7684\u5de5\u5177\u63d0\u793a\u6807\u7b7e\u3002\n\u8fd9\u4e0e\u4e4b\u524d\u63d0\u8bae\u7684(\u73b0\u5df2\u5f03\u7528)\u94fe\u63a5\u5904\u7406\u7a0b\u5e8fAPI\u5f62\u6210\u5bf9\u6bd4\uff0c\u540e\u8005\u5141\u8bb8\u60a8\u7684\u6269\u5c55\u53ef\u80fd\u5904\u7406\u6709\u95ee\u9898\u7684\u94fe\u63a5\uff0c\u5982\u679c\u5b83\u4e0d\u80fd\u5904\u7406\uff0c\u5219\u4f1a\u6709\u4e00\u4e2a\u540e\u5907\u94fe\u3002\u8fd9\u79cd\u94fe\u63a5\u80af\u5b9a\u4f1a\u88ab\u5904\u7406\u7684\u65b0\u6a21\u578b\u66f4\u7b26\u5408\u8003\u8651\u5230\u7684\u613f\u666f\uff0c\u5373\u94fe\u63a5\u53ef\u4ee5\u6709\u4e00\u4e2a\u53ef\u80fd\u7684\u64cd\u4f5c\u5217\u8868\u3002\nVS\u4ee3\u7801\u5728\u4e0d\u8c03\u8bd5\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u529f\u80fd\u662f\u8c03\u8bd5\u7684\u4e00\u79cd\u53d8\u4f53\uff0c\u5176\u4e2d\u73b0\u6709\u7684\u8c03\u8bd5\u914d\u7f6e\u88ab\u91cd\u7528\u6765\u8fd0\u884c\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u8c03\u8bd5\u8be5\u7a0b\u5e8f\u3002\u6b64\u8fd0\u884c\u6a21\u5f0f\u7684\u7ed3\u679c\u662f\u7a0b\u5e8f\u4e0d\u4f1a\u4e2d\u65ad\u5230\u8c03\u8bd5\u5668\uff0c\u65e2\u4e0d\u662f\u56e0\u4e3a\u547d\u4e2d\u65ad\u70b9\uff0c\u4e5f\u4e0d\u662f\u56e0\u4e3a\u4efb\u4f55\u5176\u4ed6\u539f\u56e0\u3002\n\u5728\u8fd9\u4e2a\u91cc\u7a0b\u7891\u4e2d\uff0c\u6211\u4eec\u4e3a&#34\uff1b\u65e0\u9700\u8c03\u8bd5\u8fd0\u884c\u63d0\u4f9b\u4e86\u5b98\u65b9\u6269\u5c55API\uff1a\u5728debug.startDebuging\u51fd\u6570\u7684DebugSessionOptions\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u5c5e\u6027noDebug\u3002noDebug\u63a7\u5236\u5373\u5c06\u542f\u52a8\u7684\u4f1a\u8bdd\u662f\u5728\u8c03\u8bd5\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff0c\u8fd8\u662f\u5728\u4e0d\u8c03\u8bd5\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u3002\u5982\u679c\u7f3a\u5c11noDebug\u5c5e\u6027\uff0c\u5219\u4f7f\u7528\u7236\u4f1a\u8bdd(\u5982\u679c\u6709)\u4e2d\u7684\u503c\u3002\u5982\u679c\u6ca1\u6709\u7236\u4f1a\u8bdd\uff0c\u5219\u5047\u5b9a\u7f3a\u5c11noDebug\u5c5e\u6027\u7684\u503c\u4e3a&#39\uff1bfalse&#39\uff1b\u3002\n\u8bf7\u6ce8\u610f\uff1a\u4ee5\u524d\u53ef\u4ee5\u5c06noDebug\u6807\u5fd7\u6dfb\u52a0\u5230\u542f\u52a8\u914d\u7f6e\u4ee5\u8fbe\u5230\u76f8\u540c\u7684\u6548\u679c\u3002\u8fd9\u4e2a\u975e\u5b98\u65b9\u7684API\u73b0\u5728\u5df2\u88ab\u5f03\u7528(\u4f46\u4ecd\u53d7\u652f\u6301)\uff0c\u6211\u4eec\u5efa\u8bae\u5c06\u6269\u5c55\u8fc7\u6e21\u5230\u65b0\u7684API\u3002\n\u968f\u7740\u590d\u6742\u7684\u8c03\u8bd5\u6269\u5c55\u548c\u8c03\u8bd5\u8bbe\u7f6e\u7684\u5230\u6765\uff0c\u66f4\u591a\u7684\u8c03\u8bd5\u4f1a\u8bdd\u51fa\u73b0\u5728\u8c03\u7528\u5806\u6808\u6811\u89c6\u56fe\u4e2d\uff0c\u4f7f\u5b83\u4eec\u770b\u8d77\u6765\u5f88\u62e5\u6324\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8c03\u8bd5\u4f1a\u8bdd\u5bf9\u7528\u6237\u5f88\u6709\u7528\uff0c\u4ed6\u4eec\u9700\u8981\u5b8c\u5168\u63a7\u5236\u5b83\u4eec\u3002\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u4e00\u4e9b\u8c03\u8bd5\u4f1a\u8bdd\u53ea\u662f\u4e00\u7ec4\u5b50\u4f1a\u8bdd\u7684\u5b9e\u73b0\u6784\u4ef6\u6216\u5206\u7ec4\u673a\u5236\u3002\n\u4e3a\u4e86\u4f7f\u8c03\u7528\u5806\u6808\u89c6\u56fe\u5728\u5e38\u89c1\u60c5\u51b5\u4e0b\u4e0d\u90a3\u4e48\u62e5\u6324\uff0c\u6211\u4eec\u5f15\u5165\u4e86\u4e00\u9879\u529f\u80fd\uff0c\u5982\u679c\u7236\u8c03\u8bd5\u4f1a\u8bdd\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u5b50\u4f1a\u8bdd\uff0c\u5219\u9690\u85cf\u8be5\u8282\u70b9\u3002\u6b64\u529f\u80fd\u79f0\u4e3a\u7d27\u51d1\u6a21\u5f0f\uff0c\u53ef\u901a\u8fc7debug.startDebuging\u51fd\u6570\u7684DebugSessionOptions\u4e0a\u7684\u65b0\u7684\u53ef\u9009\u7d27\u51d1\u5c5e\u6027\u4f7f\u7528\u3002\n\u5982\u679cCompact\u4e3atrue\uff0c\u5219\u65b0\u521b\u5efa\u7684\u8c03\u8bd5\u4f1a\u8bdd\u7684\u7236\u7ea7\u5c06\u9690\u85cf\u5728\u8c03\u7528\u5806\u6808VIE\u4e2d\u3002\n.", "note_en": "Welcome to the June 2020 release of Visual Studio Code. There are a number of updates in this version that we hope you will like, some of the key highlights include:\n  View and sort pending changes - View files as a tree or list, sort by name, path, or status.\n          Java Pack Installer for macOS - Get set up to develop in Java with VS Code on macOS.\n    Join us live at the  VS Code team&#39;s livestream on Monday, July 13 at 9am Pacific (5pm London), to see a demo of what&#39;s new in this release and ask us questions live.\n  Insiders: Want to try new features as soon as possible? You can download the nightly  Insiders build and try the latest updates as soon as they are available. And for the latest Visual Studio Code news, updates, and content, follow us on Twitter  @code!\n    This milestone, we again received helpful feedback from our community, which helped us identify and tackle many  accessibility issues. Highlights:\n  Compact folders in the File Explorer now properly narrate expanded/collapsed state and the ARIA level.\n  Screen readers can now update the cursor offset in the editor. As a result, the screen reader &#34;Say All&#34; command should work better when stopped and resumed.\n      Before, the Settings editor could only be used to edit the settings of primitive types, like strings and booleans, and you needed to edit  settings.json directly for more complicated settings types. Now, you can edit non-nested object settings from the Settings editor. Extension authors can use this functionality to increase the visibility of these kinds of settings.\n                    There is a new command,  list.selectAndPreserveFocus, which lets you select an item from a list, while keeping focus in that list. This can be helpful if you want to select multiple files from a list, such as the File Explorer, without having focus go to the file editor.\n  The command is not bound to any keyboard shortcut by default, but you can add your own keybinding:\n          VS Code now supports installing an extension VSIX file through drag and drop onto the Extensions view.\n    There are two new arguments added to the Search editor commands ( search.action.openNewEditor,  search.action.openNewEditorToSide) to allow keybindings to configure how a new Search editor should behave:\n  triggerSearch - Whether a search be automatically run when a Search editor is opened. Default is true.\n  focusResults - Whether to put focus in the results of a search or the query input. Default is true.\n  For example, the following keybinding runs the search when the Search editor is opened but leaves the focus in the search query control.\n  {\r   &#34;key&#34; :  &#34;ctrl+o&#34; ,\r   &#34;command&#34; :  &#34;search.action.openNewEditor&#34; ,\r   &#34;args&#34; : {  &#34;query&#34; :  &#34;VS Code&#34; ,  &#34;triggerSearch&#34; :  true ,  &#34;focusResults&#34; :  false  }\r }\n    The  search.searchEditor.defaultNumberOfContextLines setting has been updated to have a default value of 1 instead of 0, meaning one context line will be shown before and after each result line in the Search editor. To go back to the old behavior, set the value back to 0.\n    The previously existing  workbench.list.horizontalScrolling setting can now be toggled at runtime without forcing you to reload the workbench.\n      VS Code now supports changing the case of regex matching groups while doing a find/replace in the editor. This is done with the modifiers  \\u\\U\\l\\L, where  \\u and  \\l will upper/lowercase a single character, and  \\U and  \\L will upper/lowercase the rest of the matching group.\n      The modifiers can also be stacked - for example,  \\u\\u\\u$1 will uppercase the first three characters of the group, or  \\l\\U$1 will lowercase the first character, and uppercase the rest.\n  Currently, these are only supported in the editor&#39;s Find control, and not in global  Find in Files.\n      Our new JavaScript debugger, after being the default debugger on Insiders last month, is now the default debugger for JavaScript (Node.js and Chrome) in VS Code. If you skipped the &#34;Preview Features&#34; section of the last few VS Code changelogs, you can catch up on the  what&#39;s new section of the debugger README.\n  You should not need to change any settings or launch configurations to take advantage of the new debugger. If you run into any problems, please  open an issue!\n    Until today, the VS Code debugger had no standard way of showing that a file in the editor could be easily debugged with just a click of a button. Some debug extensions would allow you to do so, usually with a debug configuration that prompted you to &#34;Debug file in editor.&#34; However, users still had to select the correct configuration in the debug configuration dropdown menu before they can use  F5. Other debug extensions implement a fallback strategy for  F5: if no  launch.json exists,  F5 will try to debug the file currently open in the active editor.\n  Since both approaches are not easily discoverable, some debug extensions (for example, Python) have started to add a  Run button to the editor&#39;s title area.\n  Since we haven&#39;t found a better approach, and this method can be implemented without any need for new APIs, we wrote some guidelines for how to implement it in a standard way. Extension authors can find these guidelines below in the &#34;Extension Authoring&#34; section.\n      If one or both show up on the left-hand side of the editor&#39;s title area, then running or debugging the file in the editor is just one click away.\n    We&#39;ve started to make the CALL STACK less crowded for common cases: the CALL STACK view now supports hiding debug session nodes that exist for technical reasons, but do not provide much value to users.\n  The first debug extension that has opted into this feature is the new JavaScript debugger, which could eliminate a parent debug session whenever there is only a single child session.\n    We hope that other debug extensions will follow. Please see the new proposed API below.\n    To make the command  Jump to Cursor more discoverable for users coming from Visual Studio, we&#39;ve added the command alias  Set Next Statement.\n  If you don&#39;t know what  Jump to Cursor does: it lets you move program execution to a new location without executing any of the source code in between.\n    When hovering over a source breakpoint in the BREAKPOINTS view, VS Code now shows the absolute path of the breakpoint.\n      pnpm is now a valid choice for the  npm.packageManager setting, along with  npm and  yarn, to run your scripts.\n          All repositories are rendered in a single view, so you can get a better overview of the entire workspace status. Additionally, the Source Control view can now be moved to the panel and other views can be moved to the Source Control view container.\n    We have added support for sorting your changes in the source control view by name, path (default), and state when using the list view option. We have consolidated the view options (list vs. tree) and sort options into a new  View &amp; Sort menu item in the context menu.\n      Similar to usual  git merge command, the SCM view will now restore the SCM input with the default message if the user is in the middle of a  git merge --squash command.\n      VS Code now bundles TypeScript 3.9.6. This minor update fixes a few bugs, including one that could cause the TypeScript server to crash on certain source code patterns.\n      You can now upload large files and folders to the web version of VS Code and progress will be reported accurately so that you can track the number of bytes that have been uploaded, as well as the upload speed.\n      During this milestone, a lot of work went into full support for text encodings in the browser for reading and writing files. We rely on two libraries that are now supported in browsers by leveraging webpack:\n        Preview features are not ready for release but are functional enough to use. We welcome your early feedback while they are under development.\n    We have been working the last couple of months to support synchronizing VS Code preferences across machines and this feature is available for preview on the  Insiders release.\n  You can now disable sync on other machine using  Turn off Preferences Sync context menu action on the machine entry in  Synced Machines view.\n                The TypeScript 4.0 beta also brings a new feature that should help reduce the time you spend waiting while a large JavaScript or TypeScript project is being loading. To explain how this works, we first need to cover a little background on how current versions of TypeScript work.\n  When you open a JavaScript or TypeScript file in VS Code, the TypeScript language service determines which project that file belongs to and then loads the associated project for it. Sometimes this project can be quite large, such as with the core VS Code codebase, which consists of many thousands of TypeScript files. While a project is being loaded, VS Code able to handle basic syntax operations, such as getting the document outline and enabling code folding, but it cannot currently provide IntelliSense or other more advanced language features because they depend on understanding the entire project. In order to provide auto imports, for example, the TypeScript language service needs to know all exported symbols in a project.\n  The changes in TypeScript 4.0 make it possible for VS Code provide IntelliSense and other more advanced language features while a large project is still loading. The caveat is that the IntelliSense we can provide is limited to consulting the current file instead of the entire project. This means that features such as suggestions and  Go to Definition will work, but we will only show suggestions from the current file and you can only run  Go to Definition to jump to another symbol in the current file.\n  If you work with large JavaScript and TypeScript projects, we are interested in hearing your feedback on this new feature. You can try it today using the  TypeScript nightly extension. Our hope is that it allows you to start work with your code almost instantly until the more complete, project-wide IntelliSense becomes available.\n    We are working on being able to undo and redo Code Actions and refactorings. A prominent example is the Java class rename refactoring, which makes a textual change as well as renaming the file on disk. This can now be undone but it still requires triggering undo two times. Stay tuned as we further improve this and please provide early feedback.\n      The VS Code team is continuing on native support for Notebooks. To help with development, we&#39;ve created a  GitHub Issue Notebooks extension, which lets you search GitHub issues and pull requests. This extension is still in preview and requires using VS Code  Insiders, but it lets experience Notebooks first hand and we welcome your feedback.\n    We&#39;ve updated the visual look of Notebook cells for a more compact design. We&#39;ve also added shadow outlines to selected cells to make the selection state more obvious.\n      We have added Hot Exit support in Notebooks to allow extensions to handle backups and restoration. Your unsaved local changes can now be serialized by extensions and restored when the workspace is reopened.\n    We added support for extensions to contribute to the Undo/Redo stacks. Extensions can now control what operations are undoable. For example, in a GitHub Issue Notebook, you can select the  Lock button to make the cell content readonly, and also undo/redo this operation through the normal Undo/Redo commands.\n        We extended the  New File command (  \u2318N (Windows, Linux  Ctrl+N)) to support creating new untitled Notebook files. For example, you can use the keybinding below to quickly create a GitHub Issue Notebook and run queries.\n            notebook.focusedCellBorder: The color of the cell&#39;s top and bottom border when the cell is focused\n    This sample shows how to implement Notebook debugging functionality based on the existing VS Code debugger extensions.\n  This sample shows how to implement Notebook debugging functionality based on the xeus kernel and its native support for the  Debug Adapter Protocol.\n    If you&#39;re interested in creating Notebook extensions for VS Code, there is a new guide detailing the  Notebook API. You&#39;ll learn about the API as well as the details of the VS Code Notebook infrastructure and Notebook extension development best practices.\n    Work continues on the  Remote Development extensions, which allow you to use a container, remote machine, or the  Windows Subsystem for Linux (WSL) as a full-featured development environment.\n    Remote - Containers and WSL: Check out the recent  Using Remote Containers in WSL 2 blog post.\n  You can learn about new extension features and bug fixes in the  Remote Development release notes.\n  If you are new to VS Code Remote Development, you can get started with these introductory tutorials:\n      The newest version of the Azure Account extension now exposes a credentials object that can be used with the latest  Azure SDK.\n    Work continues on the  GitHub Pull Requests and Issues extension, which allows you to work on, create, and manage pull requests and issues. Some updates for this release include:\n    To learn about all the new features and updates, you can see the full  changelog for the 0.18.0 release of the extension.\n    The  HexEditor extension continues to be improved upon to provide a native hexadecimal editing experience within VS Code. The major updates to the extension this release include simple editing support (allowing users to undo, redo, edit existing hex cells, and add new cells to the end of the document) and large file optimization allowing users to open files above 18 megabytes, which previously wasn&#39;t possible.\n    A full list of notable changes can be found in the  README. Any feedback or issues experienced can be filed against the  vscode-hexeditor repository.\n      We have finalized the  AccessibilityInformation in the  TreeItem,  StatusBarItem, and  TimelineItem elements to support screen readers.  AccessibilityInformation contains a  label and a  role. The  label is read out by a screen reader once the item has focus.  role of the item defines how a screen reader interacts with it. The  role should be set in special cases when, for example, a tree-like element behaves like a checkbox. If  role is not specified, VS Code will pick the appropriate  role automatically.\n    The  editor.action.goToLocations command can now show a fallback message when no locations could be found. This allows extensions to implement features like  Go to Super Type that behave just like built-in features, for example  Go to Definition. The snippet below is a full sample of an extension invoking this command:\n  vscode . commands . executeCommand (\r   &#39;editor.action.goToLocations&#39; ,\r   vscode . window . activeTextEditor . document . uri ,  //anchor uri and position\r   vscode . window . activeTextEditor . selection . start ,\r  [],  // results (vscode.Location[])\r   &#39;goto&#39; ,  // mode\r   &#39;No Super Types Found&#39;   // &lt;- message\r );\n    For debug extensions that want to improve the single file debug experience by adding a &#34;Run&#34; and/or &#34;Debug&#34; button to the editor, we recommend following these guidelines for a consistent look and feel:\n  Add the commands to the editor title area ( see Mock Debug):\r To make the commands only visible for specific languages use a &#34;when&#34; clause, for example,  &#34;resourceLangId == python&#34;.\n  Put the Run command in the  1_run@10 group and the Debug command in the  1_run@20 group.\n    The new  documentation property on  CodeActionProviderMetadata lets extension provide static documentation for the code actions they return. This documentation is shown at the bottom of the list of code actions when the provide returns a code action:\n    A command is executed when the user selects the documentation entry. This command can show the documentation in the editor or open it in a browser.\n    The API for providing a  title for Open and Save file dialogs via the  OpenDialogOptions and  SaveDialogOptions has been finalized. Note that not all operating systems allow this title to be set, so the behavior may differ depending on where your extension is running.\n          We&#39;ve introduced a secondary button style to be used when needing to make a button less prominent:\n      You can now add  GitHub Workflow badges to the list of badges of a published extension, since  github.com was added to the  list of Approved Badge sources.\n      The field  enable-proposed-api is now supported in  argv.json. This allows extension authors to run their proposed API extension in released builds for long-term dogfooding, without needing to open VS Code via the command line and pass the  --enable-proposed-api CLI flag.\n            Support for  semantic tokens and lazy resolving of additional text edits in  completion items has been added to the upcoming  3.16 specification.\n    Every milestone comes with new proposed APIs and extension authors can try them out. As always, we want your feedback. This is what you have to do to try out a proposed API:\n    Note that you cannot publish an extension that uses a proposed API. There may be breaking changes in the next release and we never want to break existing extensions.\n    Building on top of  the terminal&#39;s new link system added in the previous release, this new proposal  window.registerLinkProvider allows an extension to attach links to the terminal, including a tooltip label that is displayed on hover.\n    This contrasts with the previously proposed (now deprecated)  &#34;link handler&#34; API, which would allow your extension to possibly handle the link in question, and if it doesn&#39;t, there would be a fallback chain. This new model where links will definitely be handled fits in better with the vision in mind where links could have a list of possible actions.\n    VS Code&#39;s &#34;Run without Debugging&#34; feature is a variant of debugging where an existing debug configuration is reused for running a program instead of debugging it. A consequence of this run mode is that the program does not break into the debugger, neither for hitting breakpoints nor for any other reason.\n  In this milestone we provide official extension API for &#34;Run without Debugging&#34;: a new property  noDebug has been added to the  DebugSessionOptions of the  debug.startDebugging function.  noDebug controls whether the session about to start should run with or without debugging. When the  noDebug property is missing, the value from the parent session (if there is one) is used. If there is no parent session, the value &#39;false&#39; is assumed for a missing  noDebug property.\n  Please note: Previously it was possible to add a  noDebug flag to a launch configuration to achieve the same effect. This unofficial API is now deprecated (but still supported) and we suggest that extensions transition to the new API.\n    With the arrival of sophisticated debug extensions and debug setups, more debug sessions show up in the CALL STACK tree view and make them look crowded.\rIn most cases the debug sessions are useful to users and they need to have full control over them. In other cases some debug sessions are just implementation artifacts or a grouping mechanism for a set of child sessions.\n  In order to make the CALL STACK view less crowed in common cases, we have introduced a feature to hide a parent debug session node if it only has a single child session.\rThis feature is called &#34;compact mode&#34; and is available through a new optional  compact property on the  DebugSessionOptions of the  debug.startDebugging function.\n  If  compact is true, the parent of the newly created debug session will be hidden in the CALL STACK vie\n......", "posttime": "2020-07-11 07:55:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u4ee3\u7801,studio,\u6269\u5c55", "title": "Visual Studio\u4ee3\u78012020\u5e746\u6708(\u7248\u672c1.47)", "title_en": "Visual Studio Code June 2020 (version 1.47)", "transed": 1, "url": "https://code.visualstudio.com/updates/v1_47", "via": "", "real_tags": ["2020", "\u4ee3\u7801", "studio", "\u6269\u5c55"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1011119, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Andrej\u9080\u8bf7\u6211\u5199\u4e00\u4e9b\u4ee4\u4eba\u60ca\u8bb6\u7684\u51fd\u6570\u7a0b\u5e8f\u3002\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u7531\u4e8eUlrich Berger(1990)\uff0c\u5bf9\u65e0\u9650\u4e8c\u8fdb\u5236\u4f4d\u5e8f\u5217\u7684\u201c\u5eb7\u6258\u7a7a\u95f4\u201d\u8fdb\u884c\u4e86\u8be6\u5c3d\u7684\u7814\u7a76\u3002\u6211\u5728\u7ed3\u5c3e\u5904\u5305\u62ec\u4e86\u53c2\u8003\u8d44\u6599\u3002\u5f31\u5f62\u5f0f\u7684\u7a77\u4e3e\u641c\u7d22\u76f8\u5f53\u4e8e\u68c0\u67e5\u5bf9Cantor\u7a7a\u95f4\u7684\u6240\u6709\u5143\u7d20\u662f\u5426\u90fd\u6709\u4e00\u4e2a\u5168\u8c13\u8bcd\u3002\u56e0\u6b64\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5eb7\u6258\u7a7a\u95f4\u4e0a\u7684\u666e\u904d\u91cf\u5b50\u5316\u3002\u8fd9\u6709\u53ef\u80fd\u5728\u6709\u9650\u7684\u65f6\u95f4\u5185\u901a\u8fc7\u7b97\u6cd5\u5b8c\u6210\u5417\uff1f\n\u4e00\u4e2a\u66f4\u6709\u529b\u7684\u4f8b\u5b50\u76f8\u5f53\u4e8e\u627e\u5230\u4e00\u4e2a\u4f8b\u5b50\uff0c\u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u4f8b\u5b50\uff0c\u90a3\u4e48\u8c13\u8bcd\u662f\u6210\u7acb\u7684\uff0c\u5e76\u4e14\u8bf4\u6ca1\u6709\u5176\u4ed6\u7684\u4f8b\u5b50\u3002\n\u6211\u5c06\u4f7f\u7528Haskell\u8bed\u8a00\uff0c\u4f46\u53ef\u4ee5\u5feb\u901f\u5c06\u7a0b\u5e8f\u8f6c\u6362\u4e3aML\u6216OCaml\u3002\u8fd9\u91cc\u663e\u793a\u7684\u6e90\u4ee3\u7801\u662f\u4f5c\u4e3a\u770b\u4f3c\u4e0d\u53ef\u80fd\u7684.hs\u9644\u52a0\u7684\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5e03\u5c14\u503c\u6765\u8868\u793a\u4e8c\u8fdb\u5236\u6570\u5b57\uff0c\u751a\u81f3\u6574\u6570\uff0c\u4f46\u6211\u66f4\u559c\u6b22\u4f7f\u7528\u4e0d\u540c\u7684\u7c7b\u578b\u6765\u907f\u514d\u6df7\u6dc6\uff1a\nDeriving\u5b50\u53e5\u544a\u8bc9Haskell\u627e\u51fa\u5982\u4f55\u81ea\u52a8\u786e\u5b9a\u4f4d\u76f8\u7b49\u3002\n\u5bf9\u4e8e\u65e0\u9650\u5e8f\u5217\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u8fd9\u91cc\u8ba8\u8bba\u7684\u5927\u591a\u6570\u7b97\u6cd5\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\u7684flazy\u5217\u8868\u3002\u4f46\u662f\uff0c\u4e3a\u4e86\u8bf4\u660e\u67d0\u4e9b\u89c2\u70b9\uff0c\u6211\u5c06\u4ece\u6570\u5b66\u7684\u89d2\u5ea6\uff0c\u628a\u5e8f\u5217\u770b\u4f5c\u662f\u5b9a\u4e49\u5728\u81ea\u7136\u6570\u4e0a\u7684\u51fd\u6570\u3002Haskell\u5b9a\u4e49\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\u5c06\u5177\u6709\u5185\u7f6e\u7684\u81ea\u7136\u6570\u7c7b\u578b\u3002\u76ee\u524d\uff0c\u6211\u5c06\u5176\u5b9e\u73b0\u4e3ainteger\u7c7b\u578b\uff1a\n\u8fd0\u7b97\u7b26(#)\u53d6\u4e00\u4e2a\u4f4dx\u548c\u4e00\u4e2a\u5e8f\u5217a\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u65b0\u5e8f\u5217x#a\uff0c\u5176\u4e2dx\u4e3a\u5934\uff0ca\u4e3a\u5c3e(\u975e\u5e38\u7c7b\u4f3c\u4e8e\u5217\u8868\u7684\u5185\u7f6e\u8fd0\u7b97(\uff1a))\uff1a\n&gt\uff1b(#)\uff1a\uff1abit-&gt\uff1bCantor-&gt\uff1bCantor&gt\uff1bx#a=\\i-&gt\uff1b\u5982\u679ci==0\uff0c\u5219x\u5426\u5219\u4e3aa(i-1)\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u6765\u770b\u95ee\u9898\u7684\u6838\u5fc3\uff0c\u5728\u5eb7\u6258\u7a7a\u95f4\u4e0a\u8fdb\u884c\u7a77\u5c3d\u641c\u7d22\u7684\u529f\u80fd\u3002\u51fd\u6570find\u7684\u89c4\u5b9a\u662f\uff0c\u5bf9\u4e8e\u4efb\u4f55\u603b\u6570p\uff0c\u90fd\u5e94\u8be5\u4f7ffind p\u603b\u662f\u574e\u6258\u7a7a\u95f4\u7684\u4e00\u4e2a\u5168\u5143\u7d20\uff0c\u800c\u4e14\uff0c\u5982\u679c\u5728Cantor\u7a7a\u95f4\u4e2d\u6709a\u4e14p=True\uff0c\u5219a=find p\u5c31\u662f\u8fd9\u79cda\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\n&gt\uff1b\u67d0\u4e9b\uff0c\u6c38\u8fdc\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1bBool&gt\uff1bFind\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1bCantor\u3002\n\u56e0\u4e3a\u6211\u5c06\u6709\u51e0\u4e2afind\u5b9e\u73b0\uff0c\u6240\u4ee5\u6211\u5fc5\u987b\u9009\u62e9\u4e00\u4e2a\u624d\u80fd\u7f16\u8bd1\u548c\u8fd0\u884c\u7a0b\u5e8f\u3002\u795e\u804c\u4eba\u5458\u7684\u9009\u62e9\u662f\u7b2c\u4e00\u4e2a\uff0c\n\u4f46\u662f\u4f60\u4f1a\u88ab\u9080\u8bf7\u53bb\u505a\u5176\u4ed6\u7684\u5b9e\u9a8c\u3002\u8981\u4f7f\u4e0b\u9762\u7684find_i\u5b9a\u4e49\u6709\u610f\u4e49\uff0c\u60a8\u5fc5\u987b\u9009\u62e9\u4e0a\u9762\u7684\u9009\u62e9\u3002\n\u51fd\u6570find\u5728CATORSPACE\u4e0a\u63a5\u53d7\u4e00\u4e2a\u8c13\u8bcd\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u6709\u4e00\u4e2a$\\lambda$-\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u53c2\u6570\u3002\u5728\u4e0b\u9762\u7684\u5b9a\u4e49\u4e2d\uff0c\u8fd9\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u56e0\u4e3a\u6839\u636e$\\eta$\u89c4\u5219\uff0c(\\a-&gt\uff1bpa)=p\u3002\u4f46\u4e3a\u4e86\u6e05\u695a\u8d77\u89c1\uff0c\u6211\u91c7\u7528\u4e86\u5b83\uff0c\u56e0\u4e3a\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u58f0\u5730\u5c06\u201cfind(\\a-&gt\uff1bpa)\u201d\u7406\u89e3\u4e3a\u201cfind a so to p(A)\u201d\uff1a\n&gt\uff1bfor ome p=p(find(\\a-&gt\uff1bpa))&gt\uff1bforevery p=not(for ome(\\a-&gt\uff1bnot(Pa)\u3002\n\u8bf7\u6ce8\u610f\uff0c\u51fd\u6570Forevery(\u5168\u79f0\u91cf\u5316)\u662f\u901a\u8fc7\u5fb7\u6469\u6839\u5b9a\u5f8b\u4ece\u51fd\u6570For Some(\u5b58\u5728\u91cf\u5316)\u83b7\u5f97\u7684\u3002\u67d0\u4e9b\u548cfind_i\u7684\u6cdb\u51fd\u7531\u76f8\u4e92\u9012\u5f52\u5b9a\u4e49\uff1a\n&gt\uff1bfind_i\uff1a\uff1a(Cantor-gt\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_i p=if for ome(\\a-&gt\uff1bp(\u96f6#a))&gt\uff1b\u5219\u4e3a\u96f6#find_i(\\a-&gt\uff1bp(\u96f6#a))&gt\uff1b\u5426\u5219\u4e00\u4e2a#find_i(\\a-&gt\uff1bp(\u4e00#a))\n\u7b97\u6cd5find_i\u7684\u76f4\u89c2\u601d\u60f3\u5f88\u6e05\u695a\uff1a\u5982\u679c\u6709\u4e00\u4e2a\u793a\u4f8b\u4ece\u96f6\u5f00\u59cb\uff0c\u90a3\u4e48\u7ed3\u679c\u5c31\u4ece\u96f6\u5f00\u59cb\uff0c\u5426\u5219\u5c31\u5fc5\u987b\u4ece\u4e00\u5f00\u59cb\u3002\u7136\u540e\u6211\u4eec\u7528\u540c\u6837\u7684\u60f3\u6cd5\u7d27\u6025\u5efa\u9020\u5c3e\u5df4\u3002\u53ef\u80fd\u4e0d\u6e05\u695a\u7684\u662f\uff0c\u7531\u4e8e\u901a\u8fc7\u8c03\u7528forome\u8fdb\u884c\u95f4\u63a5\u9012\u5f52\u8c03\u7528\uff0c\u9012\u5f52\u6700\u7ec8\u662f\u5426\u4f1a\u4ea7\u751f\u4e00\u4e2a\u6570\u5b57\u3002\u6570\u5b66\u8bc1\u660e\u662f\u901a\u8fc7\u5f52\u7eb3p\u7684\u4e00\u81f4\u8fde\u7eed\u6027\u6a21\u6765\u8fdb\u884c\u7684\uff0c\u5b9a\u4e49\u5982\u4e0b\u3002\n\u66f4\u81ea\u7136\u7684\u505a\u6cd5\u662f\uff0c\u53ea\u6709\u5728\u6709\u793a\u4f8b\u7684\u60c5\u51b5\u4e0b\u624d\u8fd4\u56de\u793a\u4f8b\uff0c\u5426\u5219\u5c31\u4f1a\u8bf4\u6ca1\u6709\u793a\u4f8b\uff1a\n&gt\uff1b\u641c\u7d22\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1b\u6216\u8bb8Cantor&gt\uff1b\u641c\u7d22p=\u5982\u679c\u67e5\u627e\u4e00\u4e9b(\\a-&gt\uff1bpa)\uff0c\u5219\u53ea\u67e5\u627e(find(\\a-&gt\uff1bpa))\u3002\n\u7c7b\u578b\u7406\u8bba\u5907\u6ce8\uff1a\u7c7b\u578b\u53ef\u80fd\u5bf9\u5e94\u4e8eSUM\u7c7b\u578b$A+1$\uff0c\u5176\u4e2d$1$\u7684\u552f\u4e00\u5143\u7d20\u79f0\u4e3aNothing\uff0c\u800cJust\u662f\u63d2\u5165$A\\Toa+1$\u3002\n\u7ec3\u4e60\uff1a\u663e\u793aforome\u548cfind\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece\u641c\u7d22\u4e2d\u5b9a\u4e49\uff0c\u5047\u8bbe\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e86\u641c\u7d22\u3002\n\u5e38\u8bc6\u544a\u8bc9\u6211\u4eec\uff0c\u51fd\u6570\u7c7b\u578b\u6ca1\u6709\u660e\u663e\u7684\u76f8\u7b49\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4f8b\u5982\uff0c\u4f17\u6240\u5468\u77e5\uff0c\u7531\u4e8e\u6682\u505c\u95ee\u9898\uff0c\u51fd\u6570\u7c7b\u578bInteger-&gt\uff1bInteger\u4e0d\u5177\u6709\u53ef\u5224\u5b9a\u7684\u7b49\u4ef7\u6027\u3002\u7136\u800c\uff0c\u5e38\u8bc6\u5e76\u4e0d\u603b\u662f\u6b63\u786e\u7684\uff0c\u4e8b\u5b9e\u4e0a\uff0c\u5176\u4ed6\u4e00\u4e9b\u51fd\u6570\u7c7b\u578b\u786e\u5b9e\u5177\u6709\u53ef\u5224\u5b9a\u7684\u76f8\u7b49\uff0c\u4f8b\u5982\uff0c\u5bf9\u4e8e\u4efb\u4f55\u5177\u6709\u53ef\u5224\u5b9a\u76f8\u7b49\u7684\u7c7b\u578by\uff0c\u90fd\u6709Cantor-&gt\uff1by\u7c7b\u578b\uff0c\u8fd9\u4e0e\u56fe\u7075\u6ca1\u6709\u77db\u76fe\uff1a\n&gt\uff1b\u7b49\u4e8e\uff1a\uff1aeq y=&gt\uff1b(Cantor-&gt\uff1by)-&gt\uff1b(Cantor-&gt\uff1by)-&gt\uff1bBool&gt\uff1b\u7b49\u4e8ef g=\u6c38\u8fdc(\\a-&gt\uff1bf a==g a)\u3002\n\u8fd9\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u751a\u81f3\u6709\u70b9\u53ef\u7591\uff0c\u56e0\u4e3a\u5728\u67d0\u79cd\u610f\u4e49\u4e0a\uff0c\u5eb7\u6258\u7a7a\u95f4\u6bd4\u6574\u6570\u8fd8\u5927\u3002\u5728\u63a5\u4e0b\u6765\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u5c06\u89e3\u91ca\u8fd9\u4e0e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\u6709\u5173\uff0c\u5373\u5e7f\u7a7a\u95f4\u5728\u62d3\u6251\u4e0a\u662f\u7d27\u51d1\u7684\uff0c\u4f46\u662f\u6574\u6570\u4e0d\u662f\u3002\n&gt\uff1b\u5f3a\u5236\uff1a\uff1abit-&gt\uff1b\u81ea\u7136&gt\uff1b\u5f3a\u5236\u96f6=0&gt\uff1b\u5f3a\u5236\u4e00=1&gt\uff1bf\uff0cg\uff0ch\uff1a\uff1aCantor-&gt\uff1b\u6574\u6570&gt\uff1bfa=\u5f3a\u5236(a(7*\u5f3a\u5236(A4)+4*(\u5f3a\u5236(A7))+4))&gt\uff1bg a=\u5f3a\u5236(a(\u5f3a\u5236(A4)+11*(\u5f3a\u5236(A7)\u3002\u5219\u5982\u679ca 4==0\uff0c\u5219\u5f3a\u5236(A 4)\u5426\u5219\u5f3a\u5236(A 11)\uff1b\u5426\u5219\uff0c\u5982\u679ca 4==1\uff0c\u5219\u5f3a\u5236(A 15)\u5426\u5219\u5f3a\u5236(A 8)\u3002\n$GHCI\u4f3c\u4e4e\u4e0d\u53ef\u80fd\u3002lhs_/_/__(_)//_/||GHC Interactive\uff0c\u7248\u672c6.6\uff0c\u9002\u7528\u4e8eHaskell 98\u3002//_/__//_||http://www.haskell.org/ghc/_///_/__/|_|\u7c7b\u578b\uff1a\uff1f\u5bfb\u6c42\u5e2e\u52a9\u3002\u6b63\u5728\u52a0\u8f7d\u5305\u88f9\u57fa\u5730.\u3002\u6b63\u5728\u94fe\u63a5.\u3002\u5b8c\u6210\u3002[\u7b2c1\u9875\uff0c\u51711\u9875]\u7f16\u8bd1Main(\u4f3c\u4e4e\u4e0d\u53ef\u80fd.lhs\uff0c\u89e3\u91ca)OK\uff0c\u6a21\u5757\u5df2\u52a0\u8f7d\uff1aMain.*Main&gt\uff1b\n\u6b64\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u89e3\u91ca\u5668\u7684\u63d0\u793a\u4e0b\u8ba1\u7b97\u8868\u8fbe\u5f0f\u3002\u9996\u5148\uff0c\u6211\u8981\u6c42\u5b83\u5728\u6bcf\u6b21\u8ba1\u7b97\u540e\u6253\u5370\u65f6\u95f4\u548c\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5\uff1a\n*Main&gt\uff1b\u7b49\u4e8ef gFalse(0.10\u79d2\uff0c3490296\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8ef hTrue(0.87\u79d2\uff0c36048844\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8eg hFalse(0.09\u79d2\uff0c3494064\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8ef fTrue(0.91\u79d2\uff0c38642544\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8eg gTrue(0.15\u79d2\uff0c6127796\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8eh hTrue(0.83\u79d2\uff0c32787372\u5b57\u8282)\u3002\n\u901a\u8fc7\u6539\u53d8find\u7684\u5b9e\u73b0\uff0c\u6211\u5c06\u4f7f\u5176\u66f4\u5feb\uff0c\u4e5f\u5c06\u80fd\u591f\u8fd0\u884c\u66f4\u5927\u7684\u793a\u4f8b\u3002\u4f46\u662f\uff0c\u8ba9\u6211\u4eec\u6682\u65f6\u7ee7\u7eed\u5f53\u524d\u7684\u5b9e\u73b0\u3002\n&gt\uff1b\u6a21\u91cf\uff1a\uff1a(Cantor-&gt\uff1b\u6574\u6570)-&gt\uff1b\u81ea\u7136&gt\uff1b\u6a21\u91cff=\u6700\u5c0f(\\n-&gt\uff1b\u6c38\u8fdc(\\a-&gt\uff1b\u6c38\u8fdc(\\b-&gt\uff1beq n a b-&gt\uff1b(f a==f b)\u3002\n\u8fd9\u6709\u65f6\u88ab\u79f0\u4e3aFan\u6cdb\u51fd\uff0c\u53ef\u4ee5\u8ffd\u6eaf\u5230Brouwer(20\u4e16\u7eaa20\u5e74\u4ee3)\uff0c\u5b83\u5728\u66f4\u9ad8\u7c7b\u578b\u7684\u53ef\u8ba1\u7b97\u6027\u7406\u8bba\u793e\u533a\u4e2d\u662f\u4f17\u6240\u5468\u77e5\u7684(\u53c2\u89c1\u4e0b\u9762\u7684Normann(2006))\u3002\u5b83\u6c42\u51fa\u5b9a\u4e49\u4e3a\u6700\u5c0f\u81ea\u7136\u6570$n$\u7684\u4e00\u81f4\u8fde\u7eed\u6a21\uff0c\u4f7f\u5f97\u3002\n\u8fd9\u91cc\u6240\u8bf4\u7684\u662f\uff0c\u53ef\u8ba1\u7b97\u6cdb\u51fd\u662f\u8fde\u7eed\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6709\u9650\u6570\u91cf\u7684\u8f93\u51fa\u53ea\u4f9d\u8d56\u4e8e\u6709\u9650\u6570\u91cf\u7684\u8f93\u5165\u3002\u4f46\u5eb7\u6258\u7a7a\u95f4\u662f\u7d27\u7684\uff0c\u5728\u5206\u6790\u548c\u62d3\u6251\u5b66\u4e2d\u6709\u4e00\u4e2a\u5b9a\u7406\u8bf4\uff0c\u5b9a\u4e49\u5728\u7d27\u7a7a\u95f4\u4e0a\u7684\u8fde\u7eed\u51fd\u6570\u662f\u4e00\u81f4\u8fde\u7eed\u7684\u3002\u5728\u6b64\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5b58\u5728\u5355\u4e2a$n$\uff0c\u56e0\u6b64\u5bf9\u4e8e\u6240\u6709\u8f93\u5165\uff0c\u53ea\u9700\u67e5\u770b\u6df1\u5ea6$n$\u5373\u53ef\u83b7\u5f97\u7b54\u6848(\u5728\u672c\u4f8b\u4e2d\uff0c\u7b54\u6848\u59cb\u7ec8\u662f\u6709\u9650\u7684\uff0c\u56e0\u4e3a\u5b83\u662f\u6574\u6570)\u3002\u6211\u5c06\u5728\u53e6\u4e00\u7bc7\u6587\u7ae0\u4e2d\u89e3\u91ca\u8fd9\u4e00\u5207\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u901a\u8fc7\u8fd0\u884c\u4e00\u4e9b\u793a\u4f8b\u4e2d\u7684\u7a0b\u5e8f\u6765\u8bf4\u660e\u8fd9\u4e00\u70b9\u3002\n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u5b9a\u4e49\u4e86\u6240\u6709\u5176\u4ed6\u9700\u8981\u7684\u6210\u5206\uff0c\u5219Haskell\u5b9a\u4e49\u4e0e\u6570\u5b66\u8ba1\u7b97\u76f8\u540c\uff1a\n&gt\uff1b\u81f3\u5c11\uff1a\uff1a(Natural-gt\uff1bBool)-&gt\uff1bNatural&gt\uff1b\u81f3\u5c11p=if p 0\u52190\u5426\u52191+\u6700\u5c11(\\n-&gt\uff1bp(n+1))&gt\uff1b(--&gt\uff1b)\uff1a\uff1aBool-&gt\uff1bBool-&gt\uff1bBool&gt\uff1bp--&gt\uff1bq=not p||q&gt\uff1beq\uff1a\uff1aNatural-&gt\uff1bCantor-&\u3002\u7b49\u5f0f(n+1)a b=a n==b n&amp\uff1b&amp\uff1beq n a b\u3002\n&gt\uff1b\u9879\u76ee\uff1a\uff1aNatural-&gt\uff1b(Cantor-&gt\uff1b\u6574\u6570)&gt\uff1b\u9879\u76eei=\\a-&gt\uff1b\u5f3a\u5236(Ai)\u3002\n*\u4e3b\u6a21(\\a-&gt\uff1b45000)0(0.00\u79d2\uff0c0\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f711)2(0.00\u79d2\uff0c0\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f712)3(0.01\u79d2\uff0c0\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f713)4(0.05\u79d2\uff0c820144\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f714)5(0.30\u79d2\uff0c5173540\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f713)4(0.05\u79d2\uff0c820144\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f714)5(0.30\u79d2\uff0c5173540\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f713)4(0.05\u79d2\uff0c0\u5b57\u8282)*\u4e3b\u6a21(\u6295\u5f714)5(0.30\u79d2\uff0c5173540\u5b57\u8282)*\u4e3b\u6a21\u3002\u6a21\u6570(\u9879\u76ee6)7(9.24\u79d2\uff0c171456820\u5b57\u8282)\u3002\n\u56e0\u6b64\uff0c\u76f4\u89c2\u5730\u8bf4\uff0c\u6a21\u6570\u662f\u51fd\u6570\u4f7f\u7528\u7684\u8f93\u5165\u7684\u6700\u540e\u4e00\u4e2a\u6307\u6570\u52a01\u3002\u5bf9\u4e8e\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u5e38\u91cf\u51fd\u6570\uff0c\u6a21\u6570\u662f\u96f6\uff0c\u56e0\u4e3a\u6ca1\u6709\u4f7f\u7528\u7d22\u5f15\u3002\n\u6280\u672f\u8bc4\u8bba\u3002\u8bc1\u660eFIND_i\u7684\u7ec8\u6b62\u6027\u6240\u9700\u7684\u4e00\u81f4\u8fde\u7eed\u6a21\u7684\u6982\u5ff5\u4e0d\u662f\u5b57\u9762\u4e0a\u7684\u76f8\u540c\uff0c\u800c\u662f\u7a0d\u6709\u4e0d\u540c(\u6709\u65f6\u79f0\u4e3a\u5185\u6db5\u4e00\u81f4\u8fde\u7eed\u6a21\uff0c\u800c\u6211\u4eec\u7684\u79f0\u4e3a\u5916\u5ef6\u4e00\u81f4\u8fde\u7eed\u6a21)\u3002\u4f46\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u8ba8\u8bba\u8fd9\u79cd\u6570\u5b66\u4e0a\u7684\u5fae\u5999\u4e4b\u5904\u3002\u4e3b\u8981\u601d\u60f3\u662f\uff0c\u5f53\u6a21\u6570\u4e3a$0$\u65f6\uff0c\u5faa\u73af\u7ec8\u6b62\uff0c\u8ddf\u968ffind_i\u5b9a\u4e49\u7684\u4e00\u4e2a\u5206\u652f\uff0c\u5e76\u5f00\u59cb\u65b0\u7684\u9012\u5f52\uff0c\u4ee5\u4ea7\u751f\u793a\u4f8b\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u5f53p\u7684\u6a21\u6570\u4e3a$n+1$\u65f6\uff0c\u8c13\u8bcd\\a-&gt\uff1bp(Zero#a)\u7684\u6a21\u6570\u4e3a$n$\u6216\u66f4\u5c0f\uff0c\u56e0\u6b64\u9012\u5f52\u8c03\u7528\u603b\u662f\u4ee5\u8f83\u5c0f\u7684\u6a21\u6570\u8fdb\u884c\uff0c\u5e76\u56e0\u6b64\u6700\u7ec8\u7ec8\u6b62\u3002\u8bf4\u5b8c\u4e86\u3002\n\u73b0\u5728\uff0c\u6211\u5c06\u5c1d\u8bd5\u83b7\u5f97\u66f4\u5feb\u7684find\u5b9e\u73b0\u3002\u6211\u5c06\u5206\u51e0\u4e2a\u9636\u6bb5\u4fee\u6539\u539f\u59cb\u5b9e\u73b0\u3002\u9996\u5148\uff0c\u6211\u5c06\u901a\u8fc7\u6269\u5c55\u51fd\u6570find_i\u5b9a\u4e49\u4e2d\u7684\u4e00\u4e9b\u51fd\u6570\u7684\u5b9a\u4e49\u6765\u5220\u9664\u76f8\u4e92\u9012\u5f52\uff1a\n&gt\uff1bfind_ii p=if p(\u96f6#find_ii(\\a-&gt\uff1bp(\u96f6#a)&gt\uff1b\u5219\u96f6#find_ii(\\a-&gt\uff1bp(\u96f6#a))&gt\uff1b\u5426\u5219\u4e00\u4e2a#find_ii(\\a-&gt\uff1bp(one#a))\n\u8fd9\u5e94\u8be5\u5177\u6709\u57fa\u672c\u76f8\u540c\u7684\u901f\u5ea6\u3002\u73b0\u5728\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u5c060\u548c1\u4f5c\u4e3a\u53c2\u6570h\uff0c\u5219\u6761\u4ef6\u7684\u5206\u652f\u662f\u76f8\u540c\u7684\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u5bf9\u6761\u4ef6\u8fdb\u884c\u201c\u56e0\u5f0f\u5206\u89e3\u201d\uff1a\n&gt\uff1bfind_iii\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_III p=h#find_III(\\a-&gt\uff1bp(h#a))&gt\uff1b\u5176\u4e2dh=if p(Zero#find_III(\\a-&gt\uff1bp(Zero#a)\uff0c\u5219\u4e3a\u96f6\u3002\n\u8fd9\u662f(\u6307\u6570\u7ea7\u7684\uff01)\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u4f1a\u66f4\u5feb\u3002\u8fd9\u65b9\u9762\u7684\u4e00\u4e2a\u7ebf\u7d22\u662f\uff0ch\u53ea\u6709\u5728\u201c\u4f7f\u7528\u201d\u65f6\u624d\u4f1a\u88ab\u6c42\u503c(\u6211\u4eec\u7684\u8bed\u8a00\u662f\u61d2\u60f0\u7684)\u3002\u8ba9\u6211\u4eec\u8fd0\u884c\u4e00\u4e2a\u793a\u4f8b\uff0c\u5c06\u4e0a\u9762\u7684find\u5b9a\u4e49\u66ff\u6362\u4e3afind=find_iii\uff1a\n*Main&gt\uff1b\u7b49\u4e8ef hTrue(0.00\u79d2\uff0c522668\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8e(Proj1000)(Proj1000)True(0.00\u79d2\uff0c0\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8e(Proj1000)(Proj4000)False(0.03\u79d2\uff0c1422680\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8e(Proj1000)(Proj(2^20))False(7.02\u79d2\uff0c336290704\u5b57\u8282)\u3002\n\u5982\u4f60\u6240\u89c1\uff0c\u6211\u4eec\u5c1d\u8bd5\u7684\u6295\u5f71\u51fd\u6570\u8d8a\u5927\uff0c\u6bd4\u8f83\u7684\u65f6\u95f4\u5c31\u8d8a\u957f\u3002\u8981\u67e5\u770b\u7b2c\u4e00\u4e2a\u7b97\u6cd5\u6709\u591a\u7cdf\u7cd5\uff0c\u8ba9\u6211\u4eec\u5207\u6362\u56defind=find_i\uff1a\n*Main&gt\uff1b\u7b49\u4e8e(\u9879\u76ee10)(\u9879\u76ee10)TRUE(0.05\u79d2\uff0c1529036\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8e(\u9879\u76ee10)(\u9879\u76ee15)FALSE(1.61\u79d2\uff0c72659036\u5b57\u8282)*Main&gt\uff1b\u7b49\u4e8e(\u9879\u76ee10)(\u9879\u76ee20)FALSE(60.62\u79d2\uff0c2780497676\u5b57\u8282)\u3002\n\u524d\u9762\u7684\u4f8b\u5b50\u4e0d\u80fd\u7528\u8fd9\u4e2a\u7b97\u6cd5\u8fd0\u884c\uff0c\u9664\u975e\u6211\u4eec\u6709\u6bd4\u53ef\u89c2\u6d4b\u5b87\u5b99\u4e2d\u7684\u539f\u5b50\u66f4\u591a\u7684\u53ef\u7528\u4f4d\uff0c\u5e76\u4e14\u6211\u4eec\u613f\u610f\u7b49\u5f85\u6570\u5341\u4ebf\u5e74\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7b97\u6cd5\u5728\u8fde\u7eed\u7684\u6a21\u6570\u4e0a\u662f\u6307\u6570\u7684\u3002\n&gt\uff1bfind_iv\uff1a\uff1a(Cantor-&gt;\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_iv p=let leftBranch=\u96f6#find_iv(\\a-&gt\uff1bp(\u96f6#a))&gt\uff1bin if p(LeftBranch)&gt\uff1b\u5219\u5de6\u5206\u652f&gt\uff1b\u5426\u5219\u4e00\u4e2a#find_iv(\\a-&gt\uff1bp(one#a))\n\u5b9e\u9645\u4e0a\uff0c\u6211\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6027\u80fd\uff0c\u4e5f\u6ca1\u6709\u7528\u5b83\u505a\u8fc7\u5b9e\u9a8c\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6211\u4eec\u5f97\u5230\u4e86\u4ec0\u4e48(\u60a8\u9700\u8981\u66ff\u6362find=find_iv)\uff1a\n*Main&&gt;EQUAL(Proj10)(Proj20)False(0.00\u79d2\uff0c522120\u5b57\u8282)*Main&&gt;EQUAL(Proj10)(Proj200)False(0.04\u79d2\uff0c1550824\u5b57\u8282)*Main&&gt;EQUAL(Proj10)(Proj2000)False(3.71\u79d2\uff0c146039744\u5b57\u8282)*Main&&gt;EQUAL(Proj10)(Proj20000)\u4e2d\u65ad\u3002\n\u6bd4Find_I\u597d\u591a\u4e86\uff0c\u4f46\u6bd4Find_III\u5dee\u591a\u4e86\uff01\u6211\u5728\u4e0a\u4e00\u4e2a\u4f8b\u5b50\u4e2d\u653e\u5f03\u4e86\uff0c\u56e0\u4e3a\u5b83\u5728\u5927\u7ea6\u4e00\u5206\u949f\u540e\u5f00\u59cb\u653e\u6162\u6211\u7f16\u8f91\u8fd9\u7bc7\u5e16\u5b50\u7684\u901f\u5ea6\u3002\n\u4f46\u662f\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u7b97\u6cd5\uff0c\u6211\u73b0\u5728\u63d0\u51fa\u3002\u6211\u4e0d\u4f1a\u8bd5\u56fe\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u89e3\u91ca\u8fd9\u4e2a\u7b97\u6cd5\u7684\u5de5\u4f5c\u539f\u7406(\u5982\u679c\u4f60\u771f\u7684\u611f\u5174\u8da3\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684LICS 2007\u5e74\u7684\u8bba\u6587)\uff0c\u4f46\u6211\u4f1a\u5728\u4e0b\u9762\u505a\u51e0\u70b9\u8bf4\u660e\uff1a\n&gt\uff1bfind_v\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_v p=\\n-&gt\uff1bif q n(find_v(Q N))\u5219\u4e3a\u96f6\u5176\u4ed6\u4e00&gt\uff1b\u5176\u4e2dq n a=p(\\i-&gt\uff1b\u5982\u679ci&lt\uff1bn\u5219find_v p i Else if i==n\u5219\u4e3a\u96f6\u5176\u4ed6a(i-n-1))\u3002\n\u4e0a\u9762\u6240\u6709\u7684\u7b97\u6cd5\uff0c\u9664\u4e86\u8fd9\u4e2a\uff0c\u90fd\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u91cd\u5199\uff0c\u4f7f\u7528\u61d2\u60f0\u5217\u8868\uff0c\u800c\u4e0d\u662f\u5b9a\u4e49\u5728\u81ea\u7136\u6570\u4e0a\u7684\u51fd\u6570\u3002\u8be5\u7b97\u6cd5\u5229\u7528\u4e86\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u8981\u8bbf\u95ee\u8868\u793a\u4e3a\u51fd\u6570\u7684\u5e8f\u5217\u7684\u5143\u7d20\uff0c\u4e0d\u5fc5\u626b\u63cf\u6240\u6709\u524d\u9762\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u7b97\u6cd5\u4ee5\u4e00\u79cd\u53ef\u80fd\u5f88\u795e\u79d8\u7684\u65b9\u5f0f\uff0c\u9690\u5f0f\u5730\u627e\u51fa\u5b83\u7684\u53c2\u6570p\u4f7f\u7528\u4e86\u54ea\u4e9b\u6761\u76ee\uff0c\u5e76\u4e14\u53ea\u663e\u5f0f\u5730\u6784\u9020\u4e86\u90a3\u4e9b\u6761\u76ee\u3002\u5982\u679c\u613f\u610f\uff0c\u60a8\u53ef\u4ee5\u8bbf\u95ee\u5176\u4ed6\u7c7b\u578b\uff0c\u4f46\u662f\u7b97\u6cd5find_v\u4e0d\u5f3a\u5236\u5b83\u4eec\u7684\u6c42\u503c\u3002\u8ba4\u4e3afind_v\u662f\u6b63\u786e\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u901a\u8fc7\u5bf9n\u7684\u5f52\u7eb3\uff0c\u8bc1\u660efind_i p n=find_v p n\uff0c\u8fd9\u5e76\u4e0d\u592a\u56f0\u96be\uff0c\u5c3d\u7ba1\u5982\u679c\u4e0d\u4ed4\u7ec6\u5f15\u5165\u9002\u5f53\u7684\u8f85\u52a9\u8bb0\u6cd5\uff0c\u5728\u67d0\u4e9b\u9636\u6bb5\u7684\u8ba1\u7b97\u4f1a\u53d8\u5f97\u5f88\u5927\u3002\u4e00\u79cd\u66f4\u597d\u7684\u65b9\u6cd5\u662f\u76f4\u63a5\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u5c31\u50cf\u4e0a\u9762\u7684\u6587\u7ae0\u4e2d\u6240\u505a\u7684\u90a3\u6837(\u60a8\u9700\u8981\u5bfb\u627e\u4ea7\u54c1\u7684\u529f\u80fd\u6027\uff0c\u5b83\u6982\u62ec\u4e86\u8fd9\u4e00\u70b9)\u3002\n*Main&gt\uff1bEQUAL(PROJ(2^300))(PROJ(2^300))TRUE(0.00\u79d2\uff0c522148\u5b57\u8282)*Main&&gt;EQUAL(PROJ(2^300))(PROJ(2^400))FALSE(0.0\u79d2\uff0c525064\u5b57\u8282)\u3002\n\u4f46\u662f\uff0c\u5982\u679c\u51fd\u6570\u4f7f\u7528\u591a\u4e2a\u53c2\u6570\uff0c\u800c\u4e0d\u662f\u53ea\u4f7f\u7528\u4e00\u4e2a\u53c2\u6570(\u53c2\u89c1\u4e0b\u9762\u7684\u793a\u4f8b)\uff0c\u8fd9\u5c31\u4e0d\u518d\u90a3\u4e48\u597d\u4e86\u3002\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u5148\u6309\u5982\u4e0b\u65b9\u5f0f\u7f16\u5199\u4e0a\u8ff0\u7a0b\u5e8f\uff0c\u5f15\u5165\u8f85\u52a9\u53d8\u91cfb\u6765\u547d\u540d\u7ed3\u679c\uff0c\u5e76\u66ff\u6362\u5176\u4e2d\u4e00\u4e2a\u9012\u5f52\u8c03\u7528(\u6709\u4e24\u4e2a)\u4ee5\u4f7f\u7528b\uff1a\n&gt\uff1bfind_vi\uff1a\uff1a(Cantor-&gt\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_vi p=b&gt\uff1b\u5176\u4e2db=\\n-&gt\uff1bIf q n(find_vi(Q N))\u5219\u53e6\u6709\u4e00&gt\uff1bQ n a=p(\\i-&gt\uff1bIf i&lt\uff1bn\u5219b i Else if i==n\u5219Zero Else a(i-n-1))\u3002\n\u61d2\u60f0\u6c42\u503c\u5728\u8fd9\u91cc\u6ca1\u6709\u5e2e\u52a9\uff0c\u56e0\u4e3ab\u662f\u51fd\u6570\uff0c\u5b9e\u9645\u4e0a\u8fd9\u4f1a\u4f7f\u7a0b\u5e8f\u7a0d\u5fae\u53d8\u6162\u3002\u73b0\u5728\uff0c\u4e3a\u4e86\u663e\u8457\u63d0\u9ad8\u901f\u5ea6\uff0c\u6211\u4eec\u5c06\u6807\u8bc6\u51fd\u6570\u5e94\u7528\u4e8eb\u7684\u5b9a\u4e49\uff0c\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u662f\u6807\u8bc6\u51fd\u6570\u7684\u4e00\u4e2a\u7cbe\u5fc3\u5b9e\u73b0\uff0c\u5b83\u4ee5\u5e7f\u5ea6\u4f18\u5148\u7684\u65b9\u5f0f\u5c06b\u5b58\u50a8\u5230\u65e0\u9650\u4e8c\u53c9\u6811\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5176\u68c0\u7d22\u56de\u6765(\u6b64\u6280\u5de7\u4f7f\u7528\u5bf9\u6570\u5f00\u9500\u5b9e\u73b0\u8bb0\u5fc6)\uff1a\n&gt\uff1bfind_vii\uff1a\uff1a(Cantor-&gt;\uff1bBool)-&gt\uff1bCantor&gt\uff1bfind_vii p=b&gt\uff1b\u5176\u4e2db=id&39\uff1b(\\n-&gt\uff1bif q n(find_vii(Qn))\u5219\u4e3a\u96f6\u5176\u4ed6\u4e00)&gt\uff1bq n a=p(\\i-&gt\uff1bif i&lt\uff1bn\u5219b i Else if i==n\u5219\u4e3a\u96f6a(i-n-1)\u3002code\uff1a\uff1a(Natural-gt\uff1bx)-&gt\uff1bTx&gt\uff1bcode f=B(F0)(code(\\n-&gt\uff1bf(2*n+1))&gt\uff1b(code(\\n-&gt\uff1bf(2*n+2))&gt\uff1bdecode\uff1a\uff1at x-&gt\uff1b(Natural-&gt\uff1bx)&gt\uff1bdecode(B X L R)n|n==0=x&x\u3002|ELSE=\u89e3\u7801r((n-2)`div`2)&gt\uff1bid&#39\uff1b\uff1a(Natural-&gt\uff1bx)-&gt\uff1b(Natural-&gt\uff1bx)&gt\uff1bid&#39\uff1b=decde.code\u3002\n&gt\uff1bf&#39\uff1b\uff0cg&#39\uff1b\uff0ch&#39\uff1b\uff1a\uff1aCantor-&gt\uff1b\u6574\u6570&&gt;f&39\uff1ba=a&#39\uff1b(10*a&#39\uff1b(3^80)+100*a&#39\uff1b(4^80)+1000*a&#39\uff1b(5^80))\uff0c\u5176\u4e2da&#39\uff1bi=\u5f3a\u5236(Ai)&gt\uff1bg&#39\uff1ba=a&#39\uff1b(10*a&#39\uff1b(3^80)+100*a&#39\uff1b(4^80)+1000*a&#39\uff1b(6^80)\u5176\u4e2da&#39\uff1bi=\u5f3a\u5236(Ai)&&gt;\uff1bh&39\uff1ba=a&#39\uff1bk&&gt;\u5176\u4e2di=if a&#39\uff1b(5^80)==0\u5219\u5176\u4ed61000&&gt;j=\u5982\u679ca&#39\uff1b(3^80)==1\u521910+i\u5426\u5219i&&gt;k=\u5982\u679ca&#39\uff1b(4^80)==0\u5219j\u5426\u5219100+j&&gt;\u3002False(6.75\u79d2\uff0c814435692\u5b57\u8282)*Main&&gt;\uff1b\u7b49\u4e8ef&#39\uff1bh&#39\uff1bTrue(3.20\u79d2\uff0c383266912\u5b57\u8282)*Main&&gt;\uff1b\u7b49\u4e8eg&#39\uff1bh&#39\uff1bFalse(6.79\u79d2\uff0c813083216\u5b57\u8282)*Main&&gt;\uff1b\u7b49\u4e8ef&#39\uff1bf&#39\uff1bTrue(3.20\u79d2\uff0c383384908\u5b57\u8282)*Main&&gt;\uff1b\u7b49\u4e8eg&#39\uff1bg&#39\uff1bTrue(3.31\u79d2\uff0c400711084\u5b57\u8282\u3002TRUE(3.22\u79d2\uff0c383274252\u5b57\u8282)\u3002\n\u5728\u6240\u6709\u4e0a\u8ff0\u7b97\u6cd5\u4e2d\uff0c\u53ea\u6709FIND_VII\u80fd\u591f\u5904\u7406\u4e0a\u8ff0\u793a\u4f8b\u3002\u4e00\u4e2a\u66f4\u6709\u8da3\u7684\u4f8b\u5b50\u662f\u8fd9\u4e2a\u3002\u81ea\u7136\u6570\u7684\u4e24\u4e2a\u6709\u9650\u5e8f\u5217$s$\u548c$t$\u5177\u6709\u76f8\u540c\u7684\u5143\u7d20\u96c6\u5f53\u4e14\u4ec5\u5f53\u4e24\u4e2a\u51fd\u6570\u3002\n\u76f8\u7b49\uff0c\u5176\u4e2d\u4e0a\u8ff0\u7b26\u53f7\u8868\u793a\u6295\u5f71\u7684\u70b9\u903b\u8f91AND(\u5408\u53d6)\uff0c\u5176\u4e2d$|s|$\u662f$s$\u7684\u957f\u5ea6\u3002\u4e0b\u9762\u662fthidea\u7684\u4e00\u4e2a\u5b9e\u73b0\uff1a\n&gt\uff1b\u70b9\u4e0e\uff1a\uff1a[Natural]-&gt\uff1b(Cantor-gt\uff1bBool)&gt\uff1b\u70b9\u4e0e[]=\\b-&gt\uff1bTrue&gt\uff1b\u70b9\u4e0e(n\uff1aa)=\\b-&gt\uff1b(b n==\u4e00\u4e2a)&amp\uff1b&amp\uff1b\u70b9\u4e0eb&gt\uff1b\u76f8\u540c\u5143\u7d20\uff1a\uff1a[Natural]-&gt\uff1b[Natural]-&gt\uff1bBool\u3002\u76f8\u540c\u5143\u7d20[6^60\uff0c5^50\uff0c1\uff0c5\uff0c6\uff0c6\uff0c8\uff0c9\uff0c3\uff0c4\uff0c6\uff0c2\uff0c4\uff0c6\uff0c1\uff0c6^60\uff0c7^700\uff0c1\uff0c1\uff0c3\uff0c3^30][1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9\uff0c3^30\uff0c5^50\uff0c6^60\uff0c7^70]FALSE(0.14\u79d2\uff0c21716248\u5b57\u8282)*Main&gt\uff1b\u76f8\u540c\u5143\u7d20[6^60\uff0c5^50\uff0c1\uff0c5\uff0c6\uff0c6\uff0c8\uff0c9\uff0c3\uff0c4\uff0c6\uff0c2\uff0c4\uff0c6\uff0c1\uff0c6^60\uff0c7^70\uff0c1\uff0c1\uff0c1\uff0c3\uff0c3^30][1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c7\uff0c8\uff0c9\uff0c3^30\uff0c5^50\uff0c6^60\uff0c7^70]FALSE(0.10\u79d2\uff0c14093520\u5b57\u8282)*Main&gt\uff1b\u76f8\u540c\u5143\u7d20[6^60\uff0c5^50\uff0c1\uff0c5\uff0c6\uff0c6\uff0c8\uff0c9\uff0c3\uff0c4\uff0c6\uff0c6\uff0c2\uff0c4\uff0c6\uff0c1\uff0c6^60\uff0c7^70\uff0c1\uff0c1\uff0c1\uff0c3\uff0c3^30][1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c8\uff0c9\uff0c3^30\uff0c5^50\uff0c6^60\uff0c7^70]TRUE(0.10\u79d2\uff0c12610056\u5b57\u8282)*Main&gt\uff1b\u76f8\u540c\u5143\u7d20[6^60\uff0c5^50\uff0c1\uff0c5\uff0c6\uff0c6\uff0c8\uff0c9\uff0c3\uff0c4\uff0c6\uff0c6\uff0c2\uff0c4\uff0c6\uff0c1\uff0c6^60\uff0c7^70\uff0c1\uff0c1\uff0c1\uff0c3\uff0c3^30][1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c8\uff0c9\uff0c3^30\uff0c5^50\uff0c6^60\uff0c7^700]FALSE(0.12\u79d2\uff0c17130684\u5b57\u8282)*Main&gt\uff1b\u76f8\u540c\u5143\u7d20[6^60\uff0c5^50\uff0c1\uff0c5\uff0c6\uff0c6\uff0c8\uff0c9\uff0c3\uff0c4\uff0c6\uff0c6\uff0c2\uff0c4\uff0c6\uff0c1\uff0c6^60\uff0c7^700\uff0c1\uff0c1\uff0c1\uff0c3\uff0c3^30][1\uff0c2\uff0c3\uff0c4\uff0c5\uff0c6\uff0c8\uff0c9\uff0c3^30\uff0c5^50\uff0c6^60\uff0c7^700]True(0.12\u79d2\uff0c17604776\u5b57\u8282)\u3002\n\u4eba\u4eec\u5f88\u81ea\u7136\u5730\u4f1a\u95ee\u662f\u5426\u6709\u7a0b\u5e8f\u9a8c\u8bc1\u7684\u5e94\u7528\u7a0b\u5e8f\u3002\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u6211\u548c\u4e39\u00b7\u5409\u67e5\u63a8\u6d4b\u6709\uff0c\u6211\u4eec\u6b63\u8ba1\u5212\u8c03\u67e5\u8fd9\u4ef6\u4e8b\u3002\nM.H.\u57c3\u65af\u5361\u591a\u3002\u5141\u8bb8\u5feb\u901f\u7a77\u4e3e\u641c\u7d22\u7684\u65e0\u9650\u96c6\u5408\u3002\u5728LICS\u76842007\uff0c\u6ce2\u5170\uff0c\u5f17\u7f57\u8328\u74e6\u592b\uff0c7\u6708\u3002\u4e0b\u8f7d\u914d\u5957\u7684Haskell\u7a0b\u5e8f\u3002\u8fd9\u7bc7\u6587\u7ae0\u8c03\u67e5\u4e86\u54ea\u79cd\u65e0\u9650\u96c6\u5141\u8bb8\u7a77\u4e3e\u641c\u7d22\u3002\u5b83\u7ed9\u51fa\u4e86\u7cfb\u7edf\u5730\u4ece\u65e7\u7684\u6784\u5efa\u65b0\u7684\u53ef\u641c\u7d22\u96c6\u7684\u51e0\u79cd\u7b97\u6cd5\u3002\u5b83\u8fd8\u8868\u660e\uff0c\u5bf9\u4e8e\u4e30\u5bcc\u7684\u7c7b\u578b\u96c6\u5408\uff0c\u4efb\u4f55\u5305\u542b\u91cf\u8bcd\u7684\u5b50\u96c6\u4e5f\u90fd\u5305\u542b\u641c\u7d22\u8005\u3002\u7531\u91cf\u8bcd\u6784\u9020\u641c\u7d22\u5668\u7684\u7b97\u6cd5\u901f\u5ea6\u8f83\u6162\uff0c\u56e0\u6b64\u76ee\u524d\u8fd9\u4e00\u7ed3\u679c\u4ec5\u5177\u6709\u7406\u8bba\u610f\u4e49\u3002\u4f46\u5176\u4ed6\u7b97\u6cd5\u90fd\u5f88\u5feb\u3002\nM.H.\u57c3\u65af\u5361\u591a\u3002\u6570\u636e\u7c7b\u578b\u548c\u7ecf\u5178\u7a7a\u95f4\u7684\u7efc\u5408\u62d3\u6251\u3002ENTCS\uff0cElsevier\uff0c\u7b2c87\u5377\uff0c\u7b2c21-156\u9875\uff0c2004\u5e7411\u6708\u3002\u6211\u73b0\u5728\u628a\u8fd9\u79cd\u7a0b\u5e8f\u7c7b\u578b\u7684\u7b97\u6cd5\u62d3\u6251\u79f0\u4e3a\u7a0b\u5e8f\u7c7b\u578b\u7684\u7b97\u6cd5\u62d3\u6251\uff0c\u800c\u4e0d\u662f\u6570\u636e\u7c7b\u578b\u7684\u5408\u6210\u62d3\u6251\uff0c\u5728\u672a\u6765\u7684\u8457\u4f5c\u4e2d\u6211\u5c06\u8fd9\u6837\u79f0\u547c\u5b83\u3002\u5b83\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e00\u822c\u62d3\u6251\u4e2d\u7684\u6982\u5ff5\u548c\u5b9a\u7406\u76f4\u63a5\u6620\u5c04\u5230\u7f16\u7a0b\u8bed\u8a00\u4e2d(\u6211\u518d\u6b21\u4f7f\u7528Haskell)\u3002\u4f46\u5b83\u4e5f\u8bf4\u660e\u4e86\u5982\u4f55\u5c06\u5176\u6620\u5c04\u56de\u7ecf\u5178\u62d3\u6251\u3002\u7a77\u5c3d\u53ef\u641c\u7d22\u96c6\u5408\u7684\u7279\u5f81\u662f\u7d27\u81f4\u96c6\u5408\u7684\u8ba1\u7b97\u8868\u793a\u3002\nM.H.\u57c3\u65af\u5361\u591a\u548cW.K.\u4f55\u3002\u987a\u5e8f\u7a0b\u5e8f\u8bbe\u8ba1\u8bed\u8a00\u7684\u64cd\u4f5c\u57df\u7406\u8bba\u548c\u62d3\u6251\u7ed3\u6784\u3002\u5728\u7b2c20\u5c4aIEEE\u5e74\u5ea6\u8ba1\u7b97\u673a\u79d1\u5b66\u903b\u8f91\u7814\u8ba8\u4f1a(LICs)\u7684\u8bba\u6587\u96c6\u4e2d\uff0c2005\u5e746\u6708\uff0c\u7b2c427-436\u9875\u3002\u5982\u679c\u4f60\u60f3\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u4f7f\u7528\u57df\u8bba\u548c\u62d3\u6251\u5b66\u8fdb\u884c\u7a0b\u5e8f\u63a8\u7406\u7684\u77e5\u8bc6\uff0c\u8fd9\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u8d77\u70b9\u3002\u6211\u4eec\u6ca1\u6709\u4f7f\u7528\u57df\u7406\u8bba\u548c\u62d3\u6251\u5b9a\u4e49\u6307\u79f0\u8bed\u4e49\uff0c\u800c\u662f\u76f4\u63a5\u4ece\u8bed\u8a00\u7684\u64cd\u4f5c\u8bed\u4e49(PCF\uff0c\u53ef\u4ee5\u88ab\u89c6\u4e3aHaskell\u7684\u5fe0\u5b9e\u5b50\u96c6)\u4e2d\u63d0\u53d6\u5b83\u4eec\uff0c\u800c\u4e0d\u662f\u65c1\u8def\u6307\u79f0\u8bed\u4e49\u3002\u5b9a\u4e49\u57df\u7406\u8bba\u548c\u6307\u79f0\u8bed\u4e49\u7684\u8bb8\u591a\u5b9a\u4e49\u5728\u8fd9\u91cc\u4f5c\u4e3a\u5b9a\u7406\u51fa\u73b0\u3002\u7ed9\u51fa\u4e86Berger\u7a0b\u5e8f\u7684\u8bc1\u660e\uff0c\u5305\u62ec\u8bc1\u660e\u6240\u9700\u7684\u4e00\u81f4\u8fde\u7eed\u6a21\u7684\u9002\u5f53\u6982\u5ff5\u3002\n\u8fbe\u683c\u00b7\u8bfa\u66fc\u3002\u7528\u6cdb\u51fd\u8ba1\u7b97--\u53ef\u8ba1\u7b97\u6027\u7406\u8bba\u8fd8\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\uff1f\u201c\u7b26\u53f7\u903b\u8f91\u516c\u62a5\u201d\uff0c12(1)\uff1a43-59,2006\u3002\u8fd9\u662f\u5173\u4e8e\u9ad8\u9636\u53ef\u8ba1\u7b97\u6027\u7406\u8bba\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u7b80\u53f2\u548c\u7efc\u8ff0(\u8be5\u5b66\u79d1\u662f\u7531Kleene\u548cKleene\u4e8e20\u4e16\u7eaa50\u5e74\u4ee3\u672b\u521b\u7acb\u7684\u3002\n.", "note_en": "Andrej has invited me to write about certain surprising functionalprograms.The first program, due to  Ulrich Berger (1990), performs exhaustivesearch over the \u201c Cantor space\u201d of infinite sequences of binarydigits. I have included references at the end. A weak form ofexhaustive search amounts to checking whether or not a total predicateholds for all elements of the Cantor space. Thus, this amounts touniversal quantification over the Cantor space. Can this possibly bedone algorithmically, in finite time?\n A stronger one amounts tofinding an example such that the predicate holds, if such an exampleexists, and saying that there isn\u2019t any otherwise.\n I will use the language  Haskell, but it is possible toquickly translate the programs to e.g. ML or  OCaml. The source code shown here is attached as  seemingly-impossible.hs.\n We could use the booleans to represent binary digits, or even theintegers, but I prefer to use a different type to avoid confusions:\n  The  deriving clause tells Haskell to figure out how to decide equality of bits automatically.\n For the type of infinite sequences, we could use the built-in type oflazy lists for most algorithms considered here. But, in order toillustrate certain points, I will take the mathematical view andregard sequences as functions defined on the natural numbers. The nextversion of the definition of Haskell will have a built-in type ofnatural numbers. For the moment, I implement it as the type ofintegers:\n  The operator  (#) takes a bit  x and asequence  a and produces a new sequence  x # a with x as the head and  a as the tail (very much like thebuilt-in operation  (:) for lists):\n &gt; (#) :: Bit -&gt; Cantor -&gt; Cantor&gt; x # a = \\i -&gt; if i == 0 then x else a(i-1)\n  Next, we come to the heart of the matter, the functions that performexhaustive search over the Cantor space. The specification of thefunction  find is that, for any total  p, one shouldhave that  find p is always a total element of the Cantorspace, and, moreover, if there is  a in the Cantor space with p a = True, then  a = find p is an example of such an a.\n &gt; forsome, forevery :: (Cantor -&gt; Bool) -&gt; Bool&gt; find :: (Cantor -&gt; Bool) -&gt; Cantor\n Because I will have several implementations of  find, Ihave to choose one to be able to compile and run the program. Acanonical choice is the first one,\n  but you are invited to experiment with the other ones. For the followingdefinition of  find_i to make sense, you have to take the above choice.\n The function  find takes a predicate on the Cantorspace, and hence it will typically have a $\\lambda$-expression asargument. In the following definition this is not necessary,because  (\\a -&gt; p a) = p by the $\\eta$ rule. But I haveadopted it for the sake of clarity, as then we can read \u201c find(\\a -&gt; p a)\u201d aloud as \u201cfind  a such that p(a)\u201c:\n &gt; forsome p = p(find(\\a -&gt; p a))&gt; forevery p = not(forsome(\\a -&gt; not(p a)))\n Notice that the function  forevery (universal quantification)is obtained from the function  forsome (existentialquantification) via the  De Morgan Law. The functionals  forsomeand  find_i are defined by mutual recursion:\n &gt; find_i :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_i p = if forsome(\\a -&gt; p(Zero # a))&gt; then Zero # find_i(\\a -&gt; p(Zero # a))&gt; else One # find_i(\\a -&gt; p(One # a))\n The intuitive idea of the algorithm  find_i is clear: ifthere is an example starting with zero, then the result is takento start with zero, otherwise it must start with one. Then werecursively build the tail using the same idea. What may not beclear is whether the recursion eventually produces a digit,because of the indirect recursive call via the call to forsome. A mathematical proof proceeds by induction onthe modulus of uniform continuity of  p, defined below.\n It may be more natural to return an example only if there isone, and otherwise tell there isn\u2019t any:\n &gt; search :: (Cantor -&gt; Bool) -&gt; Maybe Cantor&gt; search p = if forsome(\\a -&gt; p a) then Just(find(\\a -&gt; p a)) else Nothing\n   Type-theoretic remark: the type  Maybe a corresponds tothe sum type $A+1$, where the only element of $1$ is called Nothing and where  Just is the insertion $A \\toA+1$.\n Exercise: show that both  forsome and  find can bedefined directly from  search assuming we had defined search first.\n Common wisdom tells us that function types don\u2019t have decidableequality. In fact, e.g. the function type  Integer -&gt; Integer doesn\u2019t have decidable equality because of the Halting Problem, as is well known. However, common wisdom is notalways correct, and, in fact, some other function types do havedecidable equality, for example the type  Cantor -&gt; y forany type  y with decidable equality, withoutcontradicting Turing:\n &gt; equal :: Eq y =&gt; (Cantor -&gt; y) -&gt; (Cantor -&gt; y) -&gt; Bool&gt; equal f g = forevery(\\a -&gt; f a == g a)\n This seems strange, even fishy, because the Cantor space is insome sense bigger than the integers. In a follow-up post,I\u2019ll explain that this has to do with the fact that the Cantorspace is topologically compact, but the integers are not.\n  &gt; coerce :: Bit -&gt; Natural&gt; coerce Zero = 0&gt; coerce One = 1&gt; f, g, h :: Cantor -&gt; Integer&gt; f a = coerce(a(7 * coerce(a 4) + 4 * (coerce(a 7)) + 4))&gt; g a = coerce(a(coerce(a 4) + 11 * (coerce(a 7))))&gt; h a = if a 7 == Zero&gt; then if a 4 == Zero then coerce(a 4) else coerce(a 11)&gt; else if a 4 == One then coerce(a 15) else coerce(a 8)\n  $ ghci seemingly-impossible.lhs ___ ___ _ / _ / // __(_) / /_// /_/ / / | | GHC Interactive, version 6.6, for Haskell 98./ /_/ __ / /___| | http://www.haskell.org/ghc/____// /_/____/|_| Type :? for help.Loading package base ... linking ... done.[1 of 1] Compiling Main ( seemingly-impossible.lhs, interpreted )Ok, modules loaded: Main.*Main&gt;\n At this point we can evaluate expressions at the interpreter\u2019s prompt.First I ask it to print time and space usage after each evaluation:\n   *Main&gt; equal f gFalse(0.10 secs, 3490296 bytes)*Main&gt; equal f hTrue(0.87 secs, 36048844 bytes)*Main&gt; equal g hFalse(0.09 secs, 3494064 bytes)*Main&gt; equal f fTrue(0.91 secs, 38642544 bytes)*Main&gt; equal g gTrue(0.15 secs, 6127796 bytes)*Main&gt; equal h hTrue(0.83 secs, 32787372 bytes)\n By changing the implementation of  find, I\u2019ll make thisfaster and also will be able to run bigger examples. But let\u2019scarry on with the current implementation for the moment.\n  &gt; modulus :: (Cantor -&gt; Integer) -&gt; Natural&gt; modulus f = least(\\n -&gt; forevery(\\a -&gt; forevery(\\b -&gt; eq n a b --&gt; (f a == f b))))\n This is sometimes called the  Fan Functional, and goes back to Brouwer(1920\u2019s) and it is well known in the higher-type computability theorycommunity (see Normann (2006) below). It finds the modulus of uniform continuity, defined as the least naturalnumber $n$ such that\n    What is going on here is that computable functionals are continuous,which amounts to saying that finite amounts of the output depend onlyon finite amounts of the input. But the Cantor space is compact, andin analysis and topology there is a theorem that says that continuousfunctions defined on a compact space are   uniformlycontinuous. In this context, this amounts to the existence of a single$n$ such that for all inputs it is enough to look at depth $n$ to getthe answer (which in this case is always finite, because it is aninteger). I\u2019ll explain all this in another post. Here I willillustrate this by running the program in some examples.\n Notice that the Haskell definition is the same as the mathematicalone, provided we define all the other needed ingredients:\n &gt; least :: (Natural -&gt; Bool) -&gt; Natural&gt; least p = if p 0 then 0 else 1 + least(\\n -&gt; p(n+1))&gt; (--&gt;) :: Bool -&gt; Bool -&gt; Bool&gt; p --&gt; q = not p || q&gt; eq :: Natural -&gt; Cantor -&gt; Cantor -&gt; Bool&gt; eq 0 a b = True&gt; eq (n+1) a b = a n == b n &amp;&amp; eq n a b\n  &gt; proj :: Natural -&gt; (Cantor -&gt; Integer)&gt; proj i = \\a -&gt; coerce(a i)\n  *Main&gt; modulus (\\a -&gt; 45000)0(0.00 secs, 0 bytes)*Main&gt; modulus (proj 1)2(0.00 secs, 0 bytes)*Main&gt; modulus (proj 2)3(0.01 secs, 0 bytes)*Main&gt; modulus (proj 3)4(0.05 secs, 820144 bytes)*Main&gt; modulus (proj 4)5(0.30 secs, 5173540 bytes)*Main&gt; modulus (proj 5)6(1.69 secs, 31112400 bytes)*Main&gt; modulus (proj 6)7(9.24 secs, 171456820 bytes)\n So, intuitively, the modulus is the last index of the input that thefunction uses plus one. For a constant function, like the above, themodulus is zero, because no index is used.\n Technical remark. The notion of modulus of uniformcontinuity needed for the proof of termination of  find_iis not literally the same as above, but a slight variant(sometimes called the  intensional modulus of uniformcontinuity, whereas ours is referred to as the extensional one). But I won\u2019t go into such mathematicalsubtleties here. The main idea is that when the modulus is $0$ therecursion terminates and one of the branches of the definition of find_i is followed, and a new recursion is started, toproduce the next digit of the example. When the modulus of p is $n+1$, the modulus of the predicate  \\a -&gt; p(Zero # a) is $n$ or smaller, and so recursive calls are always madewith smaller moduli and hence eventually terminate.  End ofremark.\n Now I\u2019ll try to get faster implementations of  find.I\u2019ll modify the original implementation in several stages.Firstly, I will remove the mutual recursion by expanding thedefinition of the function  forsome in the definition ofthe function  find_i:\n &gt; find_ii p = if p(Zero # find_ii(\\a -&gt; p(Zero # a)))&gt; then Zero # find_ii(\\a -&gt; p(Zero # a))&gt; else One # find_ii(\\a -&gt; p(One # a))\n This should have essentially the same speed.Now notice that the branches of the conditional are the same if wemake zero and one into a parameter  h. Hence one can \u201cfactorout\u201d the conditional as follows:\n &gt; find_iii :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_iii p = h # find_iii(\\a -&gt; p(h # a))&gt; where h = if p(Zero # find_iii(\\a -&gt; p(Zero # a))) then Zero else One\n This is (exponentially!) faster for some examples. A clue forthis is that  h will be evaluated only if and when it is\u201cused\u201d (our language is lazy). Let\u2019s run an example, replacing theabove definition of  find by  find = find_iii:\n *Main&gt; equal f hTrue(0.00 secs, 522668 bytes)*Main&gt; equal (proj 1000) (proj 1000)True(0.00 secs, 0 bytes)*Main&gt; equal (proj 1000) (proj 4000)False(0.03 secs, 1422680 bytes)*Main&gt; equal (proj 1000) (proj(2^20))False(7.02 secs, 336290704 bytes)\n As you can see, the bigger the projection functions we try,the longer the comparison gets. To see how bad the first algorithm is, let\u2019s switch back to  find = find_i:\n *Main&gt; equal (proj 10) (proj 10)True(0.05 secs, 1529036 bytes)*Main&gt; equal (proj 10) (proj 15)False(1.61 secs, 72659036 bytes)*Main&gt; equal (proj 10) (proj 20)False(60.62 secs, 2780497676 bytes)\n The previous examples cannot be run with this algorithm unless we hadmore bits available than there are atoms in the observable universeand we were willing to wait several billion-billion years, because thealgorithm is exponential in the modulus of continuity.\n  &gt; find_iv :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_iv p = let leftbranch = Zero # find_iv(\\a -&gt; p(Zero # a))&gt; in if p(leftbranch)&gt; then leftbranch&gt; else One # find_iv(\\a -&gt; p(One # a))\n Actually, I never thought about the performance of this algorithm orexperimented with it. Let\u2019s see what we get (you need to replace find = find_iv):\n *Main&gt; equal (proj 10) (proj 20)False(0.00 secs, 522120 bytes)*Main&gt; equal (proj 10) (proj 200)False(0.04 secs, 1550824 bytes)*Main&gt; equal (proj 10) (proj 2000)False(3.71 secs, 146039744 bytes)*Main&gt; equal (proj 10) (proj 20000)Interrupted.\n Much better than  find_i, but much worse than find_iii! I gave up in the last example, because itstarted to slow down my edition of this post after a minute or so.\n But there is a much better algorithm, which I now present. I won\u2019tattempt to explain the working of this algorithm in this post (seemy LICS\u20192007 paper below if you are really interested), but I includea few remarks below:\n &gt; find_v :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_v p = \\n -&gt; if q n (find_v(q n)) then Zero else One&gt; where q n a = p(\\i -&gt; if i &lt; n then find_v p i else if i == n then Zero else a(i-n-1))\n All the above algorithms, except this one, can be easily rewritten touse lazy lists rather than functions defined on the naturalnumbers. This algorithm takes advantage of the fact that to access anelement of a sequence represented as a function, it is not necessaryto scan all the preceding elements. In a perhaps mysterious way, thisalgorithm implicitly figures out which entries of its argument p uses, and constructs only those explicitly. You can accessthe other ones if you wish, but the algorithm  find_v doesn\u2019tforce their evaluation. One way to see that  find_v is correctis to show, by induction on  n, that  find_i p n = find_v p n, which is not too difficult, although the calculations get bigat some stages if one doesn\u2019t carefully introduce suitable auxiliarynotation. A better way is to understand this directly, as done in theabove paper (you need to look for the product functional, whichgeneralizes this).\n  *Main&gt; equal (proj (2^300)) (proj (2^300))True(0.00 secs, 522148 bytes)*Main&gt; equal (proj (2^300)) (proj (2^400))False(0.00 secs, 525064 bytes)\n But if the functions use several of their arguments, not just one (seeexample below), this isn\u2019t so good any more. To fix this, firstrewrite the above program as follows, introducing an auxiliaryvariable  b to name the result, and replace one of therecursive calls (there are two) to use  b instead:\n &gt; find_vi :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_vi p = b&gt; where b = \\n -&gt; if q n (find_vi(q n)) then Zero else One&gt; q n a = p(\\i -&gt; if i &lt; n then b i else if i == n then Zero else a(i-n-1))\n Lazy evaluation doesn\u2019t help here, because  b is afunction, and in fact this makes the program slightly slower. Now,to make it significantly faster, we apply the identity function tothe definition of  b. Or rather an elaborateimplementation of the identity function, that stores  binto an infinite binary tree in a breadth-first manner and thenretrieves it back (this trick implements memoization withlogarithmic overhead):\n &gt; find_vii :: (Cantor -&gt; Bool) -&gt; Cantor&gt; find_vii p = b&gt; where b = id&#39;(\\n -&gt; if q n (find_vii(q n)) then Zero else One)&gt; q n a = p(\\i -&gt; if i &lt; n then b i else if i == n then Zero else a(i-n-1))&gt; data T x = B x (T x) (T x)&gt; code :: (Natural -&gt; x) -&gt; T x&gt; code f = B (f 0) (code(\\n -&gt; f(2*n+1)))&gt; (code(\\n -&gt; f(2*n+2)))&gt; decode :: T x -&gt; (Natural -&gt; x)&gt; decode (B x l r) n | n == 0 = x&gt; | odd n = decode l ((n-1) `div` 2)&gt; | otherwise = decode r ((n-2) `div` 2)&gt; id&#39; :: (Natural -&gt; x) -&gt; (Natural -&gt; x)&gt; id&#39; = decode.code\n  &gt; f&#39;,g&#39;,h&#39; :: Cantor -&gt; Integer&gt; f&#39; a = a&#39;(10*a&#39;(3^80)+100*a&#39;(4^80)+1000*a&#39;(5^80)) where a&#39; i = coerce(a i)&gt; g&#39; a = a&#39;(10*a&#39;(3^80)+100*a&#39;(4^80)+1000*a&#39;(6^80)) where a&#39; i = coerce(a i)&gt; h&#39; a = a&#39; k&gt; where i = if a&#39;(5^80) == 0 then 0 else 1000&gt; j = if a&#39;(3^80) == 1 then 10+i else i&gt; k = if a&#39;(4^80) == 0 then j else 100+j&gt; a&#39; i = coerce(a i)*Main&gt; equal f&#39; g&#39;False(6.75 secs, 814435692 bytes)*Main&gt; equal f&#39; h&#39;True(3.20 secs, 383266912 bytes)*Main&gt; equal g&#39; h&#39;False(6.79 secs, 813083216 bytes)*Main&gt; equal f&#39; f&#39;True(3.20 secs, 383384908 bytes)*Main&gt; equal g&#39; g&#39;True(3.31 secs, 400711084 bytes)*Main&gt; equal h&#39; h&#39;True(3.22 secs, 383274252 bytes)\n Among all the above algorithms, only  find_vii can copewith the above examples. A more interesting example is this. Twofinite sequences $s$ and $t$ of natural numbers have thesame  set of elements iff the two functions\n  are equal, where the above notation indicates the pointwiselogical-and (conjunction) of the projections, and where $|s|$ is thelength of $s$. Here is an implementation of thisidea:\n &gt; pointwiseand :: [Natural] -&gt; (Cantor -&gt; Bool)&gt; pointwiseand [] = \\b -&gt; True&gt; pointwiseand (n:a) = \\b -&gt; (b n == One) &amp;&amp; pointwiseand a b&gt; sameelements :: [Natural] -&gt; [Natural] -&gt; Bool&gt; sameelements a b = equal (pointwiseand a) (pointwiseand b)*Main&gt; sameelements [6^60, 5^50, 1, 5, 6, 6, 8, 9, 3, 4, 6, 2, 4,6, 1, 6^60, 7^700, 1, 1, 1, 3, 3^30] [1, 2, 3, 4, 5, 6, 7, 8, 9, 3^30, 5^50, 6^60, 7^70]False(0.14 secs, 21716248 bytes)*Main&gt; sameelements [6^60, 5^50, 1, 5, 6, 6, 8, 9, 3, 4, 6, 2, 4,6, 1, 6^60, 7^70, 1, 1, 1, 3, 3^30] [1, 2, 3, 4, 5, 6, 7, 8, 9, 3^30, 5^50, 6^60, 7^70]False(0.10 secs, 14093520 bytes)*Main&gt; sameelements [6^60, 5^50, 1, 5, 6, 6, 8, 9, 3, 4, 6, 2, 4,6, 1, 6^60, 7^70, 1, 1, 1, 3, 3^30] [1, 2, 3, 4, 5, 6, 8, 9, 3^30, 5^50, 6^60, 7^70]True(0.10 secs, 12610056 bytes)*Main&gt; sameelements [6^60, 5^50, 1, 5, 6, 6, 8, 9, 3, 4, 6, 2, 4,6, 1, 6^60, 7^70, 1, 1, 1, 3, 3^30] [1, 2, 3, 4, 5, 6, 8, 9, 3^30, 5^50, 6^60, 7^700]False(0.12 secs, 17130684 bytes)*Main&gt; sameelements[6^60, 5^50, 1, 5, 6, 6, 8, 9, 3, 4, 6, 2, 4,6, 1, 6^60, 7^700, 1, 1, 1, 3, 3^30][1, 2, 3, 4, 5, 6, 8, 9, 3^30, 5^50, 6^60, 7^700]True(0.12 secs, 17604776 bytes)\n It is natural to ask whether there are applications to programverification. I don\u2019t know, but  Dan Ghica and I speculate thatthere are, and we are planning to investigate this.\n    M.H. Escardo.   Infinite sets that admit fast exhaustive search. In LICS\u20192007, Poland, Wroclaw, July. Download  companion Haskell program.This paper investigates which kinds of infinite sets admit exhaustive search. It gives several algorithms for systematically building new searchable sets from old. It also shows that, for a rich collection of types, any subset that admits a quantifier also admits a searcher. The algorithm for constructing the searcher from the quantifier is slow, and so at present this result is of theoretical interest only. But the other algorithms are fast.\n  M.H. Escardo.   Synthetic topology of data types and classical spaces. ENTCS, Elsevier, volume 87, pages 21-156, November 2004.I would nowadays call this algorithmic topology of program types, rather than synthetic topology of data types, and in future writings this is how I\u2019ll refer to it. It shows how notions and theorems from general topology can be directly mapped into programming languages (I use Haskell again). But it also shows how this can be mapped back to classical topology. Exhaustively searchable sets feature there as computational manifestations of compact sets.\n  M.H. Escardo and W.K. Ho.   Operational domain theory and topology of a sequential programming language. In Proceedings of the 20th Annual IEEE Symposium on Logic in Computer Science (LICS), June 2005, pages 427-436.If you want to learn a bit about the use of domain theory and topology for reasoning about programs, this is a possible starting point. Rather than defining a denotational semantics using domain theory and topology, we extract them directly from the operational semantics of the language (PCF, which can be regarded as a faithful subset of Haskell), side-stepping denotational semantics. Many definitions of domain theory and denotational semantics arise as theorems here. There is a proof of Berger\u2019s program, including the appropriate notion of modulus of uniform continuity needed for the proof.\n  Dag Normann.   Computing with functionals \u2013 computability theory or computer science? . Bulletin of Symbolic Logic, 12(1):43-59, 2006.This is a nice short history and survey of higher-type computability theory (the subject was established in the late 1950\u2019s by work of Kleene and\n......", "posttime": "2020-07-11 07:35:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u53ef\u80fd,impossible,find", "title": "\u770b\u4f3c\u4e0d\u53ef\u80fd\u7684\u51fd\u6570\u5f0f\u7a0b\u5e8f", "title_en": "Seemingly impossible functional programs", "transed": 1, "url": "http://math.andrej.com/2007/09/28/seemingly-impossible-functional-programs/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u53ef\u80fd", "find"]}, {"category": "", "categoryclass": "", "imagename": "bf3b605c82d5ec6d5e413ff7e13444d9.jpg", "infoid": 1011117, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7b80\u4ecb\u6700\u5177\u6807\u5fd7\u6027\u7684\u8f6f\u76d8\u4fdd\u62a4\u6545\u4e8b\u4e4b\u4e00\u662f\u201c\u5730\u4e0b\u57ce\u5927\u5e08\u201d\u30021987\u5e7412\u6708\u53d1\u5e03\u7684\u201c\u5730\u4e0b\u57ce\u5927\u5e08\u201d\u5c06\u5148\u8fdb\u7684\u7269\u7406\u5149\u76d8\u683c\u5f0f(\u6a21\u7cca\u4f4d)\u4e0e\u5d4c\u5165\u6e38\u620f\u672c\u8eab\u7684\u5077\u5077\u6478\u6478\u7684\u4fdd\u62a4\u68c0\u67e5\u76f8\u7ed3\u5408\u3002\n\u6211\u5f3a\u70c8\u63a8\u8350\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5728\u5bf9\u96c5\u8fbe\u5229\u5723\u5730\u7262\u4e3b\u76d8\u4e0a\u7684\u6a21\u7cca\u4f4d\u4fdd\u62a4\u8fdb\u884c\u975e\u5e38\u5168\u9762\u7684\u6982\u8ff0\u4e4b\u524d\uff0c\u8fd9\u7bc7\u6587\u7ae0\u7ed9\u51fa\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u8f6f\u76d8\u6982\u8ff0\u3002\u8fd8\u6709\u8fd9\u7bc7\u4f18\u79c0\u7684\u6587\u7ae0\uff0c\u5b83\u66f4\u6df1\u5165\u5730\u8bb2\u8ff0\u4e86\u56f4\u7ed5\u7740\u5730\u7262\u5927\u5e08\u4fdd\u62a4\u7684\u6545\u4e8b\u3002\u5b83\u5f15\u7528\u4e86\u4e00\u4f4d\u201c\u5730\u4e0b\u57ce\u5927\u5e08\u201d\u4f5c\u8005\u7684\u8bdd\uff1a\n\u6211\u4eec\u7684\u4f18\u52bf\u662f\u62e5\u6709\u8f6f\u76d8\u590d\u5236\u4fdd\u62a4\u65b9\u6848\u7684\u4e13\u5229\uff0c\u8be5\u65b9\u6848\u9700\u898140,000\u7f8e\u5143\u7684\u4e13\u95e8\u786c\u4ef6\u8bbe\u5907\u624d\u80fd\u5199\u5165\u78c1\u76d8\u3002\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u786c\u4ef6\uff0c\u5c31\u4e0d\u53ef\u80fd\u521b\u5efa\u78c1\u76d8\u6620\u50cf\uff0c\u800c\u4e14\u786c\u4ef6\u672c\u8eab\u4e5f\u5df2\u505c\u4ea7\u3002\n\u9ad8\u4ef7\u6807\u7b7e\u7684\u539f\u56e0\u5f88\u53ef\u80fd\u662f\u53ef\u9760\u5730\u521b\u5efa\u6a21\u7cca\u4f4d\u6240\u9700\u7684\u5b9a\u65f6\u7cbe\u5ea6\u3002\u6240\u9700\u7684\u7cbe\u5ea6\u662f\u5728\u4e16\u754c\u4e0a\u5927\u90e8\u5206\u5730\u533a\u4ecd\u5728\u4ee5\u5fae\u79d2\u4e3a\u5355\u4f4d\u8fdb\u884c\u6d4b\u91cf\u7684\u65f6\u5019\uff0c\u4ee5\u7eb3\u79d2\u4e3a\u5355\u4f4d\u6d4b\u91cf\u7684\u3002\nBBC Micro\u6709\u4e00\u4e2a2 MHz6502CPU\uff0c\u5b83\u6700\u7b80\u5355\u7684\u6307\u4ee4\u9700\u89812\u4e2a\u5468\u671f\uff0c\u4e5f\u5c31\u662f1\u5fae\u79d2\u3002\u5728\u8fd9\u6837\u7684\u7ea6\u675f\u4e0b\uff0c\u6709\u6ca1\u6709\u5e0c\u671b\u5199\u51fa\u6a21\u7cca\u4f4d\u5462\uff1f\u6211\u4eec\u770b\u770b\u80fd\u8d70\u591a\u8fdc\u3002\u8fd9\u9879\u5de5\u4f5c\u88ab\u79f0\u4e3a\u201c\u6d82\u6cb9\u7684\u6c34\u736d\u201d\u9879\u76ee\u3002\n\u4e3a\u4e86\u8ba9\u6211\u4eec\u8fdb\u5165\u6c14\u6c1b\uff0c\u5e76\u7ed3\u675f\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u6709\u4e00\u5f203.5\uff1b\u8f6f\u76d8\u590d\u5370\u673a\u7684\u56fe\u7247\u3002\u5b83\u770b\u8d77\u6765\u5f88\u50cf\u590d\u5370\u673a\uff0c\u8fd9\u8ba9\u6211\u89c9\u5f97\u5f88\u597d\u7b11\uff0c\u53ea\u662f\u6f0f\u6597\u62ff\u7684\u662f\u5149\u76d8\u800c\u4e0d\u662f\u7eb8\u5f20\uff01\u770b\u8d77\u6765Advanced World Products\u751a\u81f3\u53ef\u80fd\u8fd8\u4f1a\u5356\u7ed9\u4f60\u4e00\u53f0\u3002\nBBC Micro\u4ee5\u51fa\u8272\u7684\u53ef\u6269\u5c55\u6027\u800c\u95fb\u540d\uff0c\u5305\u62ec\u6240\u8c13\u7684\u7528\u6237\u7aef\u53e3\u3002\u6b64\u7aef\u53e3\u7531\u8fd0\u884c\u901f\u5ea6\u4e3a1 MHz\u76846522\u591a\u529f\u80fd\u63a5\u53e3\u9002\u914d\u5668\u9a71\u52a8\u3002\u7aef\u53e3\u672c\u8eab\u63d0\u4f9b8\u4e2a\u6570\u636e\u5f15\u811a\u548c2\u4e2a\u63a7\u5236\u5f15\u811a\u3002\u5bf9\u8fd9\u4e9b\u522b\u9488\u6709\u5f88\u5927\u7684\u63a7\u5236\u6743\u3002\u6570\u636e\u5f15\u811a\u53ef\u4ee5\u5355\u72ec\u914d\u7f6e\u4e3a\u8f93\u5165\u6216\u8f93\u51fa\uff0c\u8f93\u51fa\u903b\u8f91\u7535\u5e73\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8bbe\u7f6e\u4e3a\u9ad8\u6216\u4f4e\u3002\n\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u67e5\u770b\u7528\u6237\u7aef\u53e3\uff1f\u90a3\u4e48\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u76f4\u63a5\u4ece\u7528\u6237\u7aef\u53e3\u9a71\u52a8\u78c1\u76d8\u9a71\u52a8\u5668\u3002\u901a\u8fc7\u5c06\u8f6f\u76d8\u63a7\u5236\u5668\u4ece\u7b49\u5f0f\u4e2d\u79fb\u9664\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5176\u6392\u9664\u5728\u5916\uff0c\u5e76\u5b9e\u73b0\u5bf9\u78c1\u76d8\u9a71\u52a8\u5668\u53ca\u5176\u6765\u5f80\u6570\u636e\u6d41\u7684\u66f4\u76f4\u63a5\u63a7\u5236\u3002\n\u4e0a\u56fe\u662f\u8fde\u63a5\u7528\u6237\u7aef\u53e3\u548c\u78c1\u76d8\u9a71\u52a8\u5668\u7684\u53ef\u7231\u7535\u7f06\u3002\u8fde\u63a5\u5668\u662f\u6807\u51c6\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u5bfc\u7ebf\u53ea\u662f\u8df3\u7ebf\u3002\u6211\u8bda\u5fc3\u8bda\u610f\u5730\u60f3\u8981\u521b\u9020\u4e00\u4e9b\u5728\u524d\u4e00\u5929\u5c31\u80fd\u505a\u5230\u7684\u4e1c\u897f\uff0c\u73b0\u5728\u6211\u4e0d\u5141\u8bb8\u4efb\u4f55\u989d\u5916\u7684\u7535\u5b50\u4ea7\u54c1\u3002\n\u4ece\u8fd9\u79cd\u5e03\u7ebf\u8bbe\u7f6e\u4e2d\u5f97\u5230\u7684\u4e3b\u8981\u597d\u5904\u662f\uff0c\u5149\u76d8\u9a71\u52a8\u5668\u63a5\u53e3\u53ef\u80fd\u6bd4\u60a8\u60f3\u8c61\u7684\u8981\u7b80\u5355\u3002\u6211\u4eec\u53ea\u97008\u4e2a\u5f15\u811a\u5c31\u53ef\u4ee5\u9a71\u52a8\u5149\u76d8\u9a71\u52a8\u5668\u5e76\u67e5\u8be2\u5176\u91cd\u8981\u72b6\u6001\u3002\u8fd9\u5f88\u7b80\u5355\u3002\u5047\u8bbe\u60a8\u8981\u542f\u52a8\u9a71\u52a8\u5668\uff0c\u8bf7\u5c06PB0\u548cPB1\u4e0a\u7684\u903b\u8f91\u7535\u5e73\u8bbe\u7f6e\u4e3a\u4f4e\u3002\u5047\u8bbe\u60a8\u60f3\u8981\u7b49\u5f85\u5149\u76d8\u65cb\u8f6c\u5230\u8f68\u9053\u7684\u8d77\u59cb\u5904\uff0c\u60a8\u53ef\u4ee5\u67e5\u8be2PB6\u4e0a\u7684\u903b\u8f91\u7535\u5e73\uff0c\u76f4\u5230\u60a8\u770b\u5230\u9ad8-\u4f4e\u8f6c\u6362\u3002\u6b65\u8fdb\u53ea\u662f\u4e3a\u6b65\u8fdb\u4e0e\u6b65\u51fa\u8bbe\u7f6e\u4e00\u4e2a\u903b\u8f91\u7535\u5e73\uff0c\u7136\u540e\u964d\u4f4e\u6b65\u957f\u5f15\u811a\u3002\n\u5230\u76ee\u524d\u4e00\u5207\u5c1a\u597d\u3002\u6211\u4eec\u5df2\u7ecf\u57fa\u672c\u63a7\u5236\u4e86\u9a71\u52a8\u5668\uff0c\u4f46\u8fd8\u6ca1\u6709\u5199\u5165\u4efb\u4f55\u5185\u5bb9\u3002\n\u7b80\u77ed\u5730\u8bf4\u4e00\u4e0b\u7535\u51fb\u5934\u75bc\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u78b0\u5230\u4e86\u4e00\u4e9b\u3002\u5c06\u968f\u673a\u7684\u7ec4\u4ef6\u5bf9\u8fde\u63a5\u5728\u4e00\u8d77\u6709\u65f6\u53ef\u80fd\u4f1a\u8d77\u4f5c\u7528\uff0c\u6709\u65f6\u53ef\u80fd\u9700\u8981\u7cbe\u5fc3\u5904\u7406\u3002\u4ee5\u4e0b\u662f\u6700\u521d\u5728\u9a71\u52a8\u5668\u7684W/Data\u5f15\u811a\u4e0a\u770b\u5230\u7684\u7535\u538b\u793a\u6ce2\u5668\u89c6\u56fe\uff1a\n\u903b\u8f911\u7535\u538b\u7ea6\u4e3a3.4V\uff0c\u903b\u8f910\u7535\u538b\u7ea6\u4e3a1.5V\u3002\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u95ee\u9898\uff01\u53ef\u63a5\u53d7\u7684TTL\u7535\u538b\u7535\u5e73\u5b9a\u4e49\u826f\u597d\uff1a\n\u5f53\u76f8\u5bf9\u4e8e\u63a5\u5730\u7aef\u5b50\u57280V\u548c0.8V\u4e4b\u95f4\u65f6\uff0cTTL\u8f93\u5165\u4fe1\u53f7\u88ab\u5b9a\u4e49\u4e3a\u4f4e\uff0c\u5f53\u57282V\u548cVcc(5V)\u4e4b\u95f4\u65f6\uff0cTTL\u8f93\u5165\u4fe1\u53f7\u88ab\u5b9a\u4e49\u4e3a\u9ad8\uff0c\u5e76\u4e14\u5982\u679c\u57280.8V\u548c2.0V\u4e4b\u95f4\u7684\u7535\u538b\u4fe1\u53f7\u88ab\u53d1\u9001\u5230TTL\u95e8\u7684\u8f93\u5165\uff0c\u5219\u95e8\u6ca1\u6709\u786e\u5b9a\u7684\u54cd\u5e94\uff0c\u56e0\u6b64\u5b83\u88ab\u8ba4\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\u3002\n1.5V\u7684\u903b\u8f910\u7535\u538b\u88ab\u8ba4\u4e3a\u662f\u4e0d\u786e\u5b9a\u7684\uff0c\u800c\u4e14\u6839\u672c\u4e0d\u4f1a\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6211\u6b63\u5728\u4f7f\u7528\u7684\u9a71\u52a8\u5668\u6ca1\u6709\u4f7f\u7528\u4e0a\u8ff0\u4fe1\u53f7\u5199\u5165\u4efb\u4f55\u5185\u5bb9\u3002\n\u5df2\u901a\u8fc7\u4ece\u9a71\u52a8\u5668\u4e0a\u5378\u4e0b\u8f6f\u7ebf\u7ec8\u7aef\u7535\u963b\u5668\u89e3\u51b3\u6b64\u95ee\u9898\u3002\u8fd9\u662f\u4e00\u5f20\u6211\u7684\u9a71\u52a8\u5668\u7684\u7167\u7247\uff0c\u63d2\u5165\u5f0f\u7ec8\u7aef\u7535\u963b\u5668\u9635\u5217\u7528\u7ea2\u8272\u5708\u8d77\u6765\uff1a\n\u8fd9\u5b8c\u7f8e\u5730\u89e3\u51b3\u4e86\u7535\u538b\u7535\u5e73\u95ee\u9898\uff0c\u7136\u540e\u4e00\u5207\u90fd\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\u5b83\u4f3c\u4e4e\u6bd4\u8bb8\u591aBBC Micro\u7684\u7aef\u53e3(\u9664\u4e86\u5149\u76d8\u7aef\u53e3)\u6ca1\u6709\u8db3\u591f\u7684\u5438\u5f15\u529b\u6765\u9a71\u52a8\u7aef\u63a5\u7684\u7535\u7f06\u3002\u4f46\u662f\u7b49\u4e00\u4e0b--\u5927\u6982\u8fd9\u4e2a\u7535\u963b\u5668\u4e00\u5f00\u59cb\u5c31\u662f\u6709\u539f\u56e0\u7684\u5427\uff1f\u662f\u3002\u79fb\u9664\u5b83\u6709\u4e24\u4e2a\u8b66\u544a\uff1a\n\u6ce8\u610f\u60a8\u7684\u7535\u7f06\u957f\u5ea6\u3002\u8f83\u957f\u7684\u7535\u7f06\u5728\u672a\u7aef\u63a5\u65f6\u5bb9\u6613\u5bfc\u81f4\u4fe1\u53f7\u6076\u5316\u3002\n\u6ce8\u610f\u672a\u8fde\u63a5\u7684\u7535\u7ebf\u4e0a\u7684\u7535\u538b\u7535\u5e73\u3002\u6211\u5728\u9a71\u52a8\u5668\u7684S/SEL(\u4fa7\u9009\u62e9)\u5f15\u811a\u4e0a\u770b\u52301.32V\u7684\u7535\u538b\u7535\u5e73\u3002\u8fd9\u662f\u4e0d\u597d\u7684\uff0c\u56e0\u4e3a\u5b83\u518d\u6b21\u5904\u4e8eTTL\u7684\u4e0d\u786e\u5b9a\u8303\u56f4\u5185\u3002\u9a71\u52a8\u5668\u5c06\u5728\u54ea\u91cc\u5199\u5165\u6570\u636e\uff1f\u53ef\u80fd\u662f\u4e0a\u8fb9\uff0c\u4e5f\u53ef\u80fd\u662f\u4e0b\u8fb9\u3002\u6216\u8005\u4e24\u4e2a\u90fd\u4e0d\u662f\uff0c\u6216\u8005\u4e24\u4e2a\u90fd\u4e0d\u662f\uff01\u8fd9\u662f\u901a\u8fc7\u8fde\u63a5\u6bcf\u6839\u91cd\u8981\u7684\u5bfc\u7ebf\u5e76\u6839\u636e\u9700\u8981\u5c06\u5176\u9a71\u52a8\u5230\u9ad8\u6216\u4f4e\u6765\u89e3\u51b3\u7684\u3002\n\u623f\u95f4\u91cc\u7684\u95ee\u9898\u662f\uff1a\u6211\u4eec\u5982\u4f55\u5411W/Data\u5f15\u811a\u63d0\u4f9b\u4fe1\u53f7\uff1f\u8fd9\u662f\u786c\u9500\u3002\u5b83\u5177\u6709\u9ad8\u5e26\u5bbd\u548c\u7cbe\u786e\u7684\u5b9a\u65f6\u8981\u6c42\u3002\u8ba9\u6211\u4eec\u6682\u65f6\u505c\u6b62\u5bf9\u7eb3\u79d2\u7ea7\u6a21\u7cca\u4f4d\u7684\u5e7b\u60f3\uff0c\u5c1d\u8bd5\u5c06\u57fa\u672c\u7684\u8c03\u9891\u8109\u51b2\u5199\u5165\u9a71\u52a8\u5668\u3002\n\u5927\u591a\u6570BBC\u5fae\u76d8\u90fd\u662f\u8c03\u9891(\u53c8\u540d\u3002\u53c8\u540dDFM\u3002\u5355\u5bc6\u5ea6)\u4ee5250 kHz\u7f16\u7801\u3002\u8981\u5199\u4e00\u9996\u8c03\u9891\u66f2\u76ee\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u7b80\u5355\u7684\u3002\u786e\u4fdd\u9a71\u52a8\u5668\u6b63\u5728\u65cb\u8f6c\u5e76\u4e14\u5199\u5165\u95e8\u5df2\u6253\u5f00\u3002\u73b0\u5728\uff0c\u6bcf\u96944\u5fae\u79d2\uff0c\u8109\u51b2W/DATA\u4f4e\uff0c\u7136\u540e\u56de\u5230\u9ad8(1\u4f4d)\u6216\u4e0d\u9ad8(0\u4f4d)\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u6bcf\u9694\u4e00\u4f4d\u5fc5\u987b\u4e3a1(\u7ef4\u6301\u65f6\u5e8f\u548c\u540c\u6b65\u7684\u65f6\u949f\u4f4d)\u3002\n\u4f7f\u7528CPU\u9a71\u52a8W/DATA\u662f\u6ca1\u6709\u5e0c\u671b\u7684\u30024\u5fae\u79d2\u7b49\u4e8e8\u4e2aCPU\u5468\u671f--\u5f53\u7136\u4e0d\u8db3\u4ee5\u52a0\u8f7d\u4e00\u4e2a\u5b57\u8282\uff0c\u5c06\u5176\u79fb\u4f4d\uff0c\u7136\u540e\u5c060\u548c1\u5199\u5165\u7528\u6237\u7aef\u53e3\u903b\u8f91\u7535\u5e73\u3002\u4e00\u4e2a\u7b80\u5355\u7684\u5faa\u73af\u5f88\u53ef\u80fd\u662f12\u5fae\u79d2\u4ee5\u4e0a\uff0c\u8fd9\u8fdc\u8fdc\u8d85\u51fa\u4e86\u8303\u56f4\u3002\u76f8\u53cd\uff0c\u4e3a\u4e86\u5e0c\u671b\u8db3\u591f\u5feb\u5730\u9a71\u52a8W/DATA\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u86516522 VIA\u82af\u7247\u7684\u529f\u80fd\u3002\n\u6211\u4eec\u7684\u4efb\u52a1\u6700\u660e\u663e\u7684\u5019\u9009\u8005\u662f\u79fb\u4f4d\u5bc4\u5b58\u5668\u3002\u79fb\u4f4d\u5bc4\u5b58\u5668\u662f8\u4f4d\u5bc4\u5b58\u5668\u3002\u5728\u9002\u5f53\u6a21\u5f0f\u4e0b\uff0c\u52a0\u8f7d\u79fb\u4f4d\u5bc4\u5b58\u5668\u5c06\u5bfc\u81f4\u82af\u7247\u901a\u8fc7\u7528\u6237\u7aef\u53e3\u7684\u4e00\u4e2a\u5f15\u811a\u987a\u5e8f\u53d1\u51fa8\u4f4d\u3002\u8fd9\u5f88\u597d--\u8fd9\u4e9b\u4f4d\u662f\u4e0e\u4e3bCPU\u7684\u6267\u884c\u5e76\u884c\u5904\u7406\u7684\uff0c\u6240\u4ee5CPU\u53ef\u4ee5\u81ea\u7531\u5730\u82b1\u65f6\u95f4\u8ba1\u7b97\u4e0b\u4e00\u7ec4\u8981\u5f00\u59cb\u79fb\u4f4d\u7684\u4f4d\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u65e0\u6cd5\u8ba9\u5b83\u5de5\u4f5c\u3002\u552f\u4e00\u6709\u53ef\u80fd\u8db3\u591f\u5feb\u7684\u79fb\u4f4d\u6a21\u5f0f\u662f\u4ee5\u7cfb\u7edf\u65f6\u949f\u901f\u7387\u79fb\u51fa\u3002\u897f\u90e8\u8bbe\u8ba1\u4e2d\u5fc36522\u6570\u636e\u8868\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u56fe\u8868\uff1a\nVIA\u7cfb\u7edf\u65f6\u949f\u4e3a1 MHz\uff0c\u56e0\u6b64\u79fb\u4f4d\u65f6\u949f\u5c06\u662f500 kHz\u4fe1\u53f7\uff0c\u6211\u4eec\u53ef\u4ee5\u8f93\u51fa\u7684\u4f4d\u7684\u5206\u8fa8\u7387\u4e3a250 kHz\u3002\u90a3\u6b63\u597d\u591f\u4e86\u3002\u7136\u800c\uff0c\u6211\u6ca1\u6709\u60f3\u51fa\u5982\u4f55\u8ba9\u8f6e\u73ed\u65f6\u949f\u8fde\u7eed\u800c\u5e73\u7a33\u5730\u8fd0\u884c\u3002\u5373\u4f7f\u5c1d\u8bd5\u91cd\u65b0\u52a0\u8f7d\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u7cbe\u786e\u65f6\u5e8f\uff0c\u79fb\u4f4d\u65f6\u949f\u5f15\u811a\u7684\u793a\u6ce2\u5668\u8f93\u51fa\u59cb\u7ec8\u5982\u4e0b\u6240\u793a\uff1a\n\u770b\u8d77\u6765\uff0c\u5728\u4ec5\u6709\u7684\u8db3\u591f\u5feb\u7684\u79fb\u4f4d\u6a21\u5f0f\u4e2d\uff0c\u91cd\u65b0\u52a0\u8f7d\u79fb\u4f4d\u5bc4\u5b58\u5668\u5728\u79fb\u4f4d\u6062\u590d\u4e4b\u524d\u4f1a\u5bfc\u81f4\u5ef6\u8fdf\u3002\u8fd9\u662f\u4e0d\u5408\u9002\u7684\u3002\n6522\u7684\u4e00\u4e2a\u9c9c\u4e3a\u4eba\u77e5\u7684\u7279\u70b9\u662f\u5b83\u7684\u8109\u51b2\u8f93\u51fa\u6a21\u5f0f\u3002\u5e76\u4e0d\u662f\u6bcf\u4e2a6522\u7248\u672c\u7684\u6570\u636e\u8868\u90fd\u6db5\u76d6\u4e86\u5b83\uff0c\u4f46\u4ee5\u4e0b\u662fMOS\u6280\u672f\u6570\u636e\u8868\u4e2d\u7684\u4e00\u4e2a\u5c0f\u6761\u76ee\uff1a\n\u8fd9\u4e00\u6b21\uff0c\u6570\u636e\u624b\u518c\u4f3c\u4e4e\u51c6\u786e\u5730\u63cf\u8ff0\u4e86\u884c\u4e3a\u3002\u6211\u4eec\u5bf9\u8fd9\u79cd\u6a21\u5f0f\u975e\u5e38\u611f\u5174\u8da3\uff0c\u56e0\u4e3a\u5bf9\u901a\u5b54\u7684\u4e00\u6b21\u5199\u5165\u627f\u8bfa\u4e86\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u6548\u679c\uff1a\u8f93\u51fa\u5f15\u811a\u5c06\u53d8\u4e3a\u903b\u8f91\u4f4e\u7535\u5e73\uff0c\u7136\u540e\u57281\u4e2a\u5468\u671f(1\u5fae\u79d2)\u540e\u518d\u6b21\u5347\u81f3\u903b\u8f91\u9ad8\u7535\u5e73\uff0c\u65e0\u9700\u6211\u4eec\u505a\u8fdb\u4e00\u6b65\u7684\u5de5\u4f5c\u3002\u6b63\u56e0\u4e3a\u5982\u6b64\uff0c\u7528\u5b83\u6765\u9a71\u52a8250 kHz\u7684\u8f93\u51fa\u4fe1\u53f7\u662f\u5f88\u5bb9\u6613\u5904\u7406\u7684\u3002CPU\u975e\u5e38\u7d27\u51d1\uff1b\u5faa\u73af\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u4f46\u662f\u7ebf\u60276502\u4ee3\u7801\u5757\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f8b\u5982\uff1a\n\u8fd9\u5f88\u7ba1\u7528\u3002CPU\u7684\u9a6c\u529b\u6b63\u597d\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u30028\u4e2a\u5468\u671f\u662f4\u5fae\u79d2\uff0c\u8fd9\u662f\u76d8\u8109\u51b2\u4e4b\u95f4\u7684\u6700\u77ed\u65f6\u95f4\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5b83\u975e\u5e38\u5360\u7528\u5185\u5b58\u3002\u6bcf\u4e2aFM\u7f16\u7801\u6bd4\u7279\u9700\u89812\u5b57\u8282\u7684\u7ebf\u60276502\u7801\u3002\u4e00\u4e2a\u6709\u7528\u7684\u6570\u636e\u6bd4\u7279\u662f2\u4e2aFM\u6bd4\u7279\uff0c\u56e0\u4e3a\u6bcf\u9694\u4e00\u4e2a\u6bd4\u7279\u662f\u4e00\u4e2a\u65f6\u949f\u6bd4\u7279\u3002\u8f68\u9053\u4e3a3125\u5b57\u8282\uff0c\u56e0\u6b64\u8fd9\u9700\u89813125*8*2*2==100KB\u7684\u7ebf\u6027\u4ee3\u7801\u3002BBC Micro\u670932KB\u7684RAM\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u8d70\u8fd0\u3002\u53ef\u4ee5\u5199\u5165\u5355\u4e2a(\u8f83\u5c0f)\u6247\u533a\uff0c\u5305\u62ec\u4e00\u4e9b\u529f\u80fd\u5f3a\u5927\u7684\u65b0\u578b\u78c1\u76d8\u4fdd\u62a4\u673a\u5236\u3002\u4f46\u6211\u4eec\u4e0d\u80fd\u5199\u5165\u5927(1024\u5b57\u8282)\u6247\u533a\u6216\u5b8c\u6574\u78c1\u9053\u3002\u8981\u6b63\u786e\u5199\u5165\u8bb8\u591a\u5149\u76d8\uff0c\u8fd9\u4e24\u4ef6\u4e8b\u90fd\u662f\u5fc5\u9700\u7684\u3002\u6b64\u5916\uff0c\u6211\u4eec\u7684\u5b9a\u65f6\u5206\u8fa8\u7387\u4e3a1\u5fae\u79d2\uff0c\u4e0d\u8db3\u4ee5\u5199\u5165\u8bb8\u591a\u9ad8\u7ea7\u4fdd\u62a4\u548c\u5149\u76d8\u8868\u9762\u3002\n\u8003\u8651\u5230\u8fd9\u4e9b\u9650\u5236\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u9ad8\u5174\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e9b\u6b63\u5728\u5de5\u4f5c\u7684\u4e1c\u897f\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a\u5b8c\u5168\u4ee4\u4eba\u6ee1\u610f\u7684\u89e3\u51b3\u65b9\u6848\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u548c\u50cf\u79fb\u4f4d\u8005\u96c6\u4f53\u8fd9\u6837\u7684\u806a\u660e\u4eba\u5728\u4e00\u8d77\u3002(\u8bf7\u9a6c\u4e0a\u53bb\u770b\u6700\u65b0\u7684\u6f14\u793a\uff0c\u90aa\u6076\u7684\u5f71\u54cd\uff01)\u3002\u5728\u4e00\u6b21\u65af\u62c9\u514b\u7684\u8c08\u8bdd\u4e2d\uff0c\u6c64\u59c6\u00b7\u585e\u767b(b2\u4eff\u771f\u5668\u7684\u4f5c\u8005)\u5efa\u8bae.\u3002\u4f7f\u7528RGB\u7aef\u53e3\u7684\u8f93\u51fa\uff1f\uff1f\n\u4e00\u5f00\u59cb\u6211\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\u55e4\u4e4b\u4ee5\u9f3b\uff0c\u4f46\u6211\u8d8a\u4ed4\u7ec6\u601d\u8003\uff0c\u5b83\u4f3c\u4e4e\u8d8a\u6709\u53ef\u80fd\u5b9e\u73b0\u3002BBC Micro\u4f7f\u75286845\u89c6\u9891\u82af\u7247\u8fdb\u884c\u8ba1\u65f6\u3002\u548c6522\u4e00\u6837\uff0c\u5b83\u4e5f\u662f\u4e00\u53ea\u53e4\u602a\u7684\u91ce\u517d\uff0c\u4f46\u81f3\u5c11\u4eba\u4eec\u5f88\u597d\u5730\u7406\u89e3\u4e86\u5b83\u7684\u602a\u7656\uff0c\u56e0\u4e3a\u6bd4\u7279\u79fb\u8005\u7684\u6f14\u793a\u6ee5\u7528\u4e866845\u3002\u6211\u8fd8\u505a\u4e86\u4e00\u4e9b\u53cd\u5411\u5de5\u4f5c\uff0c\u4f7fjsbeeb\u4eff\u771f\u5668\u6b63\u786e\u5730\u6a21\u62df\u65e5\u7acb6845\u3002\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u8fd9\u6bb5\u89c6\u9891\u4e2d\u6d82\u4e86\u6cb9\u7684\u6c34\u736d\u7684\u5de5\u4f5c\u60c5\u51b5\uff0c\u7136\u540e\u63cf\u8ff0\u4e00\u4e0b\u6211\u4eec\u770b\u5230\u7684\u60c5\u51b5\uff1a\n\u5b83\u662f\u901a\u8fc7\u5f02\u5e38\u914d\u7f6e6845\u82af\u7247\u6765\u5de5\u4f5c\u7684\u30026845\u7684\u8fd0\u884c\u9891\u7387\u4e3a1 MHz\uff0c\u5e27\u5b9a\u65f6\u8bbe\u7f6e\u4e3a\u6bcf\u5e2732\u5fae\u79d2/32\u5b57\u8282\u626b\u63cf\u7ebf\u3002\u5f53\u8f93\u51fa\u6bcf\u4e00\u5e27\u65f6\uff0c6845\u7684\u89c6\u9891\u5b58\u50a8\u5668\u5bc4\u5b58\u5668\u88ab\u91cd\u5199\uff0c\u4ee5\u4fbf\u4ece\u53ef\u80fd\u4e0d\u540c\u7684\u4f4d\u7f6e\u83b7\u53d6\u4e0b\u4e00\u4e2a32\u5b57\u8282\u3002\u56e0\u6b64\uff0c\u6bcf\u969432\u5fae\u79d2\uff0c\u4ece\u8f93\u51fa\u56fe\u6848\u8868\u4e2d\u9009\u62e9\u4e0d\u540c\u7684\u8f93\u51fa\u56fe\u6837\u3002\u6211\u4eec\u5df2\u5c06RGB\u5f15\u811a\u914d\u7f6e\u4e3a\u6bcf\u5fae\u79d2\u53d1\u5c048\u4e2a\u50cf\u7d20\uff0c\u5373\u6bcf\u4e2a\u8f93\u51fa\u56fe\u6848256\u4e2a\u50cf\u7d20\u3002\u8fd9\u63d0\u4f9b\u4e86\u5927\u91cf\u4e0d\u540c\u7684\u53ef\u80fd\u8f93\u51fa\u6a21\u5f0f\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u7f16\u519932\u5fae\u79d2\u7684\u78c1\u76d8\u8c03\u9891\u7f16\u7801\u5757\uff0c\u56e0\u6b64\u53ea\u6709\u51e0\u4e2a\u6a21\u5f0f\u6709\u610f\u4e49\u3002\u572832\u5fae\u79d2\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u5bb9\u7eb38\u4e2aFM\u8109\u51b2/\u4f4d\u30024\u6bd4\u7279\u662f\u65f6\u949f\u6bd4\u7279\uff0c\u901a\u5e38\u90fd\u662f1.4\u6bd4\u7279\u30024\u6bd4\u7279\u662f\u6570\u636e\u6bd4\u7279\uff0c\u5176\u4e2d\u53ea\u670916\u4e2a\u7ec4\u5408\u3002\n\u4f8b\u5982\uff0c\u5982\u679c\u6211\u4eec\u6b63\u5728\u5199\u5165\u6570\u636e\u534a\u5b57\u82820x5\uff0c\u521932\u5fae\u79d2\u7684\u8f93\u51fa\u9700\u8981\u5982\u4e0b\u6240\u793a\uff1a\n\u89c6\u9891\u6570\u636e\u5b57\u8282\u5c06\u4e3a00FFFFFFFFFFFFFF00FFFFFF00FFFFFF00FFFFFFFFFFFFFF00FFFFFF00FFFFFF.\u3002\u7b2c\u4e00\u4e2a\u3001\u7b2c\u4e8c\u4e2a\u3001\u7b2c\u56db\u4e2a\u548c\u7b2c\u4e94\u4e2a00\u662f\u65f6\u949f\u4f4d\u3002\u5728\u65f6\u949f\u4f4d\u4e4b\u95f4\u7684\u662f\u6570\u636e\u4f4d\u6a21\u5f0f0101\u62160x5\u3002\nCPU\u548c\u5185\u5b58\u9650\u5236\u5f88\u597d\u5730\u5e73\u8861\u4e86\u3002\u6700\u540e\uff0c\u8fd9\u662f\u4e00\u79cd\u7c7b\u4f3c\u4e8eVIA\u79fb\u4f4d\u5bc4\u5b58\u5668\u5de5\u4f5c\u7684\u8bbe\u7f6e\uff1a\u4e00\u4e9b\u5c0f\u578b\u534f\u5904\u7406\u5668(\u89c6\u9891\u82af\u7247)\u5fd9\u4e8e\u53d1\u51fa\u4e00\u4e32\u8c03\u9891\u6bd4\u7279\uff0c\u800cCPU\u5219\u88ab\u91ca\u653e\u51fa\u6765\u52a0\u8f7d\u5e76\u63d0\u4f9b\u4e0b\u4e00\u79cd\u6a21\u5f0f\u3002\u5185\u5b58\u8981\u6c42\u975e\u5e38\u5408\u7406\u3002\u7531\u4e8e\u4f7f\u7528\u4e86\u7279\u6b8a\u7684\u7ebf\u6027\u5bfb\u5740\u6a21\u5f0f\uff0c\u6240\u9700\u768432\u5fae\u79d2\u8f93\u51fa\u5757\u7684\u8868\u53ef\u4ee5\u8f7b\u677e\u5730\u5bb9\u7eb3\u57281024\u5b57\u8282\u5185\u3002\u6574\u4e2a\u66f2\u76ee\u7684\u67e5\u627e\u7d22\u5f15\u5217\u8868\u5927\u7ea6\u662f12kB\uff0c\u6240\u4ee5\u4e00\u5207\u90fd\u5f88\u9002\u5408BBC Micro\u768432KB\u5185\u5b58\u3002\n\u5f53\u7136\uff0c\u8981\u8ba9\u5b83\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e0d\u662f\u6ca1\u6709\u88ab\u4e00\u4e9b\u6709\u8da3\u7684\u602a\u7656\u7eca\u5012\u7684\u3002\u7b2c\u4e00\u4e2a\u662f6845\u7684\u602a\u7656\uff0c\u5b83\u4e3a\u6bcf\u4e2a\u626b\u63cf\u7ebf\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u8f93\u51fa\u9ed1\u8272\u3002\u5b83\u4f3c\u4e4e\u65e2\u662f\u5531\u7247\u5148\u9a71\uff0c\u4e5f\u662f\u6f14\u793a\u4f5c\u5bb6\u7684\u7978\u6839\u3002\u8fd9\u662f\u6211\u6700\u8fd1\u7684\u4e00\u6b21\u6f14\u8bb2\u4e2d\u7684\u4e00\u5f20\u5e7b\u706f\u7247\uff0c\u5c55\u793a\u4e86\u8fd9\u4e2a\u95ee\u9898\uff1a\n\u5728\u5de6\u8fb9\uff0c\u6709\u4e00\u4e2a\u6f14\u793a\u6548\u679c\uff0c\u7531\u4e8e\u6700\u540e\u4e00\u4e2a\u5b57\u7b26/\u5217\u662f\u9ed1\u8272\u7684\u95ee\u9898\u800c\u88ab\u5782\u76f4\u7684\u9ed1\u8272\u6761\u7eb9\u6240\u56f0\u6270\u3002\u591a\u67616845\u6761\u626b\u63cf\u7ebf\u88ab\u653e\u7f6e\u5728\u5355\u4e2a\u5149\u6805\u5149\u675f\u626b\u63cf\u7ebf\u5185\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u9ed1\u8272\u6761\u7eb9\u662f\u4e0d\u9700\u8981\u7684\u3002\u5f53\u7528\u6765\u9a71\u52a8\u5149\u76d8\u65f6\uff0c\u6548\u679c\u53ef\u80fd\u66f4\u5dee\uff1a\u9ed1\u8272\u6761\u7eb9\u4ee3\u8868\u5199\u5165\u5149\u76d8\u7684\u4e0d\u9700\u8981\u7684\u8109\u51b2\u3002\n\u5728\u53f3\u8fb9\uff0c\u6709\u4e00\u5f20\u89e3\u51b3\u65b9\u6848\u7684\u56fe\u50cf\uff1a\u63d0\u4ea4\u7ed9\u5149\u76d8\u7684\u6ce2\u5f62\u88ab\u7b80\u5355\u5730\u53cd\u8f6c\u3002\u73b0\u5728\u53ef\u4ee5\u5c06\u6700\u540e\u4e00\u5217\u8bbe\u7f6e\u4e3a\u9ed1\u8272(\u4ee5\u6a59\u8272\u8f6e\u5ed3\u663e\u793a)\uff0c\u56e0\u4e3a\u90a3\u91cc\u59cb\u7ec8\u9700\u8981\u96f6\u503c\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8fd9\u8fdd\u53cd\u4e86\u5c06W/DATA\u8bbe\u4e3a\u4f4e\u8109\u51b2\u7684\u4e00\u4e9b\u5149\u76d8\u9a71\u52a8\u5668\u7684\u65f6\u5e8f\u8981\u6c42\u3002\u8fd9\u662f\u4e00\u4e2a\u65f6\u4ee3\u9a71\u52a8\u7684\u65f6\u5e8f\u56fe\uff0c\u4e09\u83f1M4852/M4853\uff1a\n\u6839\u636e\u8be5\u56fe\uff0c\u903b\u8f910\u5e94\u4fdd\u63012100 ns\u3002\u5bf9\u4e8e\u53cd\u5411\u6ce2\u5f62\uff0c\u9884\u671f\u4e3a3000 ns\u4ee5\u4e0a\u3002\u4f46\u662f\uff0c\u6211\u6240\u4f7f\u7528\u7684\u9a71\u52a8\u5668\u53ea\u5173\u5fc3\u8d1f\u5411\u6570\u636e\u8109\u51b2\uff0c\u800c\u4e0d\u5173\u5fc3\u4fdd\u6301\u65f6\u95f4\u3002\u8fd9\u5e76\u4e0d\u4ee4\u4eba\u60ca\u8bb6\u3002\u8fd9\u5c06\u662f\u53ef\u80fd\u7684\u5468\u56f4\u6296\u52a8\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4ee5\u907f\u514d6845\u602a\u5f02\uff0c\u4e5f\u63d0\u4ea4\u89c4\u8303\u4fdd\u6301\u65f6\u95f4\uff0c\u4f46\u8fd9\u5e76\u6ca1\u6709\u88ab\u8bc1\u660e\u662f\u5fc5\u8981\u7684\uff0c\u6240\u4ee5\u5b83\u6ca1\u6709\u8fdb\u884c\u3002\nDRAM\u8150\u70c2\u662f\u4e00\u4ef6\u53ef\u6015\u7684\u4e8b\u3002\u8fd9\u662f\u5f53\u60a8\u5237\u65b0DRAM\u5931\u8d25\u65f6\u53d1\u751f\u7684\u60c5\u51b5\u3002\u6458\u81ea\u7ef4\u57fa\u767e\u79d1\u5173\u4e8e\u8bb0\u5fc6\u5237\u65b0\u7684\u6587\u7ae0\uff1a\n&#34\uff1b\u6b64\u8fc7\u7a0b\u7531\u5b58\u50a8\u7535\u8def\u5728\u540e\u53f0\u81ea\u52a8\u6267\u884c\uff0c\u5e76\u4e14\u5bf9\u7528\u6237\u662f\u900f\u660e\u7684\u3002&#34\uff1b\n\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e0a\u662f\u53ef\u4ee5\u7684\uff0c\u4f46\u5728BBC Micro\u4e0a\u5c31\u4e0d\u662f\u8fd9\u6837\u4e86\u3002\u5728BBC Micro\u4e0a\uff0cDRAM\u5237\u65b0\u662f\u89c6\u9891\u5b50\u7cfb\u7edf\u7684\u526f\u4f5c\u7528\u3002\u5b83\u4f9d\u8d56\u4e8e\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6807\u51c6\u5c4f\u5e55\u6a21\u5f0f\u5728\u77ed\u65f6\u95f4\u5185\u904d\u5386\u6240\u6709DRAM\u884c\u3002\u4e5f\u8bb8\u4f60\u80fd\u770b\u5230\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\u2026\u2026\u3002\u6211\u4eec\u7528\u4e8e\u8f93\u51fa32\u5fae\u79d2\u5e27\u7684\u7279\u6b8a\u89c6\u9891\u6a21\u5f0f\u975e\u5e38\u4e0d\u662f\u6807\u51c6\u7684\u5c4f\u5e55\u6a21\u5f0f\u3002\u5b83\u4e0d\u80fd\u4fdd\u8bc1\u8bbf\u95ee\u6240\u6709DRAM\u884c\uff0c\u56e0\u6b64\u4f1a\u53d1\u751fDRAM\u8870\u51cf\uff01DRAM\u8150\u70c2\u53ef\u4e0d\u662f\u95f9\u7740\u73a9\u7684\u3002\u7531\u4e8e\u610f\u5916\u7684DRAM\u8870\u51cf\uff0c\u6211\u4e22\u5931\u4e86\u5404\u79cd\u7a0b\u5e8f\u548c\u5149\u76d8\u5185\u5bb9\u3002\u4e3a\u4e86\u641e\u7b11\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u57fa\u672c\u7684\u7a0b\u5e8f\uff0c\u5b83\u4f1a\u5728\u4e0d\u5230\u4e00\u79d2\u7684\u65f6\u95f4\u5185\u5bfc\u81f4DRAM\u81ea\u8eab\u8870\u53d8\uff1a\nDRAM\u8870\u51cf\u7684\u574f\u6d88\u606f\u662f\uff0c\u5982\u679c\u4f60\u88ab\u5b83\u54ac\u4e86\uff0c\u4f60\u5f88\u5bb9\u6613\u4e22\u5931\u6570\u636e\u3002\n\u5173\u4e8eDRAM\u8870\u53d8\u7684\u597d\u6d88\u606f\u662f\uff0c\u5982\u679c\u60a8\u671f\u5f85\u5b83\uff0c\u60a8\u901a\u5e38\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u89e3\u51b3\u5b83\u3002\u5728\u6d82\u6cb9\u7684\u6c34\u736d\u7684\u60c5\u51b5\u4e0b\uff0c6845\u89c6\u9891\u82af\u7247\u5904\u4e8e\u4e0d\u5bfb\u5e38\u7684\u72b6\u6001\uff0c\u5b58\u5728\u5404\u79cd\u5173\u952e\u5faa\u73af\u3002\u5bf9\u4e8e\u5176\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u90fd\u4f7f\u7528\u624b\u52a8\u9012\u589e\u7684\u5185\u5b58\u83b7\u53d6\u6765\u4fdd\u6301DRAM\u5237\u65b0\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\u7684\u5149\u76d8\u5199\u5165\u7cfb\u7edf\uff0c\u7ed5\u8fc7\u4e86\u8f6f\u76d8\u63a7\u5236\u5668\uff0c\u6211\u4eec\u80fd\u7528\u5b83\u505a\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u5df2\u7ecf\u5728\u4e0a\u9762\u7684\u89c6\u9891\u4e2d\u6f14\u793a\u4e86\u5199\u5165\u4efb\u610fFM\u7f16\u7801\u5149\u76d8\u7684\u80fd\u529b\u3002\n\u4f46\u6211\u4eec\u5728\u8fd9\u6bb5\u65c5\u7a0b\u4e2d\u83b7\u5f97\u4e86\u975e\u5e38\u5e78\u8fd0\u7684\u673a\u4f1a\u3002\u7531\u4e8e\u5a01\u76db\u79fb\u4f4d\u5bc4\u5b58\u5668\u7684\u4e0d\u8db3\u8feb\u4f7f\u6211\u4eec\u5bfb\u627e\u89c6\u9891\u8f93\u51fa\u5f15\u811a\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5728W/DATA\u5f15\u811a\u4e0a\u83b7\u5f97\u66f4\u7cbe\u7ec6\u7684\u5b9a\u65f6\u5206\u8fa8\u7387\u3002\u6211\u4eec\u4f7f\u7528\u7684\u662fBBC Micro MODE4\uff0c\u5b83\u4f7f\u75288 MHz\u50cf\u7d20\u65f6\u949f\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u6bcf125 ns\u8f93\u51fa\u4e00\u6b21\u9ed1\u8272\u6216\u767d\u8272\u50cf\u7d20\uff0c\u4ece\u800c\u89e6\u53d1125 ns\u7c92\u5ea6\u7684\u5199\u5165\u8109\u51b2\u3002\u5982\u679c\u6211\u4eec\u60f3\u5728\u66f4\u5927\u7684\u8868\u4e0a\u82b1\u8d39\u4e00\u70b9\u989d\u5916\u7684\u5185\u5b58(\u6211\u4eec\u786e\u5b9e\u6709)\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528MODE0\uff0c\u5b83\u4f7f\u752816 MHz\u50cf\u7d20\u65f6\u949f\uff0c\u63d0\u4f9b62.5 ns\u7684\u5206\u8fa8\u7387\u3002125 ns\u5df2\u7ecf\u88ab\u8bc1\u660e\u5bf9\u6240\u6709\u6d4b\u8bd5\u7684\u78c1\u76d8\u4fdd\u62a4\u90fd\u5f88\u597d\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u7559\u5728\u6c34\u7bb1\u91cc\u662f\u4e00\u79cd\u5f88\u597d\u7684\u611f\u89c9\u3002\n\u6211\u6700\u559c\u6b22\u7684\u5149\u76d8\u4fdd\u62a4\u662f\u957f\u78c1\u9053\u4fdd\u62a4\u3002\u5b83\u5728\u963f\u7c73\u52a0\u65f6\u4ee3\u5f88\u6d41\u884c\u3002\u6211\u4e0d\u76f8\u4fe1\u5b83\u66fe\u7ecf\u5728BBC Micro\u4e0a\u4f7f\u7528\u8fc7\u3002\u6211\u559c\u6b22\u957f\u78c1\u9053\u4fdd\u62a4\uff0c\u56e0\u4e3a\u5b83\u662f\u975e\u5e38\u57fa\u672c\u7684\uff1a\u8f6f\u76d8\u63a7\u5236\u5668\u5bf9\u4e0d\u540c\u7684\u8bfb\u53d6\u901f\u5ea6\u6709\u5e7f\u6cdb\u7684\u5bb9\u5fcd\u5ea6(\u56e0\u4e3a\u78c1\u76d8\u9a71\u52a8\u5668\u4ee5\u4e0d\u540c\u7684\u901f\u5ea6\u65cb\u8f6c)\uff0c\u4f46\u5b83\u53ea\u4ee5\u4e00\u4e2a\u6b63\u786e\u7684\u901f\u5ea6\u5199\u5165\u3002\n\u9ad8\u7ea7\u957f\u78c1\u9053\u4fdd\u62a4\u662f\u5728\u540c\u4e00\u78c1\u9053\u4e0a\u5199\u5165\u4e24\u4e2a\u6247\u533a\uff0c\u5176\u4e2d\u4e00\u4e2a\u6247\u533a\u4ee5\u66f4\u5feb\u7684\u901f\u7387\u8bb0\u5f55\u3002\u590d\u5236\u4fdd\u62a4\u68c0\u67e5\u662f\u6bd4\u8f83\u8bfb\u53d6\u4e24\u4e2a\u6247\u533a\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u3002\u4ee5\u8f83\u5feb\u901f\u7387\u8bb0\u5f55\u7684\u6247\u533a\u8bfb\u53d6\u901f\u5ea6\u5e94\u53ef\u6d4b\u91cf\u4e14\u660e\u663e\u66f4\u5feb\u3002\n\u6d82\u4e86\u6cb9\u7684\u6c34\u736d\u80fd\u5199\u51fa\u8fd9\u6837\u7684\u97f3\u8f68\u5417\uff1f\u662f\u7684\uff0c\u76f8\u5f53\u5bb9\u6613\u3002\u8003\u8651\u5230125 ns\u7684\u8f93\u51fa\u5206\u8fa8\u7387\uff0c\u5f88\u5bb9\u6613\u521b\u5efa\u51e0\u4e2a\u8f93\u51fa\u8868\u9879\uff0c\u8fd9\u4e9b\u8868\u9879\u4e0e\u666e\u901a\u8868\u9879\u76f8\u4f3c\uff0c\u4f46\u6bcf1\u5fae\u79d2\u5c31\u4f1a\u51cf\u5c11125 ns\u3002\u4ee5\u4e0b\u662f\u521b\u5efa\u957f\u78c1\u9053\u4fdd\u62a4\u5e76\u68c0\u67e5\u5176\u8bfb\u53d6\u65b9\u5f0f\u7684\u89c6\u9891\uff1a\n\u6211\u4eec\u53ef\u80fd\u65e9\u5c31\u5e94\u8be5\u56de\u5230\u6211\u4eec\u5f00\u59cb\u7684\u5730\u65b9\u4e86\uff1a\u6a21\u7cca\u4f4d\u4fdd\u62a4\u3002\u6d82\u6cb9\u7684\u6c34\u736d\u80fd\u57281981\u5e74\u7684\u6280\u672f\u4e0a\u5236\u9020\u6a21\u7cca\u7684\u6bd4\u7279\u5417\uff1f\u8ba9\u6211\u4eec\u8bd5\u4e00\u8bd5\u5427\u3002\u8fd9\u91cc\u662f\u4e00\u5f20\u7528\u6cb9\u5236\u6c34\u736d\u7684fuzz\u547d\u4ee4\u5199\u5165\u6247\u533a\u51e0\u6b21\u540e\u8bfb\u53d6\u8be5\u6247\u533a\u7684\u7ed3\u679c\u7684\u56fe\u50cf\u3002\nfuzz\u547d\u4ee4\u5199\u51650x8\u6570\u636e\u534a\u5b57\u8282\uff0c\u6570\u636e\u4f4d\u9010\u6e10\u5ef6\u8fdf125 ns\u589e\u91cf\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u63cf\u8ff0\u5730\u4e0b\u57ce\u4e3b\u63a7\u6a21\u7cca\u4f4d\u662f\u5982\u4f55\u5199\u5165\u7684\u3002\u5982\u622a\u56fe\u6240\u793a\uff0c0x88\u6570\u636e\u5b57\u8282\u5f88\u5feb\u5f00\u59cb\u56de\u8bfb\u4e0d\u6b63\u786e\u4e14\u4e0d\u786e\u5b9a\u7684\u5185\u5bb9\u3002\u4f46\u662f\u65b9\u5dee\u4e0d\u662f100%\u968f\u673a\u7684\uff0c\u4e0d\u50cf\u5f31\u4f4d\u90a3\u6837--\u65b9\u5dee\u662f0x8\u4f4d\u662f\u5426\u665a\u5230\u6709\u673a\u4f1a\u88ab\u9519\u8fc7\u3002\u5982\u679c\u9519\u8fc7\u4e86\uff0c\u4f60\u4ecd\u7136\u53ef\u4ee5\u770b\u5230\u6709\u6a21\u5f0f\u548c\u4e3b\u9898\u7684\u75af\u72c2\u3002\n\u4e0a\u8ff0\u7ed3\u679c\u5b9e\u9645\u4e0a\u662f\u6a21\u7cca\u6bd4\u7279\u539f\u5219\u5bf9FM\u7f16\u7801\u6570\u636e\u7684\u5e94\u7528\u3002\u5728FM\u7f16\u7801\u4e2d\uff0c\u6bcf\u4e2a\u6570\u636e\u4f4d\u90fd\u4e0e\u4e00\u4e2a\u65f6\u949f\u4f4d\u4ea4\u7ec7\u3002\u8fd9\u6709\u65f6\u4f1a\u5bfc\u81f4\u65f6\u949f\u4f4d\u5927\u91cf\u6d41\u5165\u6570\u636e\u6d41(\u53c2\u89c1\u4e0a\u9762\u7b2c\u4e00\u6b21\u8fd0\u884c\u4e2d\u76840xFF\u5b57\u8282--\u5b83\u4eec\u5f88\u53ef\u80fd\u662f\u65f6\u949f\u4f4d)\u3002\u5730\u4e0b\u57ce\u4e3b\u4fdd\u62a4\u7ed3\u5408MFM\u4f7f\u7528\u6a21\u7cca\u4f4d\u3002\u8fd9\u4f1a\u5bfc\u81f4\u66f4\u5e73\u9759\u7684\u60c5\u51b5\uff0c\u6a21\u7cca\u4f4d\u5728\u4e24\u4e2a\u6709\u6548\u7684\u6570\u636e\u4f4d\u7f16\u7801\u4e4b\u95f4\u6f02\u79fb\uff0c\u5e76\u4e14\u4e0d\u4f1a\u6270\u4e71\u65f6\u949f\uff01\u5f53\u7136\uff0c\u4e0a\u4e86\u6cb9\u7684\u6c34\u736d\u53ef\u4ee5\u7f16\u5199MFM\u3001GCR\u6216\u4efb\u4f55\u4f60\u80fd\u60f3\u5230\u7684\u7f16\u7801\u3002\u5bf9\u4e8e\u6211\u4eec\u7684\u57fa\u672c\u539f\u8bed\u6765\u8bf4\uff0c\u8fd9\u53ea\u662f\u6240\u6709\u4e0d\u540c\u7684\u534f\u8bae\uff0c\u80fd\u591f\u5728\u4efb\u4f55\u65f6\u5019\u4ee5\u826f\u597d\u7684\u5206\u8fa8\u7387\u5411\u9a71\u52a8\u5668\u53d1\u9001\u8109\u51b2\u3002\n\u4e3a\u4e86\u66f4\u597d\u5730\u8861\u91cf\uff0c\u8fd9\u91cc\u662f\u78c1\u76d8\u4e0a\u6a21\u7cca\u4f4d\u7684\u793a\u6ce2\u5668\u89c6\u56fe\u3002\u5cf0\u503c\u6709\u4e9b\u4e0d\u89c4\u5219\uff0c\u5f53\u4e24\u4e2a\u8109\u51b2\u975e\u5e38\u63a5\u8fd1\u65f6(1\u5fae\u79d2\u5de6\u53f3\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7f16\u7801\u6807\u51c6\u6765\u8bf4\u90fd\u592a\u8fd1\u4e86)\uff0c\u9a71\u52a8\u5668\u68c0\u6d4b\u5230\u7684\u78c1\u901a\u53cd\u8f6c\u7684\u5f3a\u5ea6\u751a\u81f3\u5f00\u59cb\u53d8\u5f31\u3002\n\u4efb\u52a1\u5b8c\u6210\u3002\u6211\u4eec\u83b7\u5f97\u4e86\u5199\u5165\u7c92\u5ea6\u4e3a125 ns\u7684\u76d8\u8109\u51b2\u7684\u80fd\u529b\u3002\u8fd9\u5b8c\u5168\u8db3\u4ee5\u521b\u5efa\u9ad8\u7ea7\u78c1\u76d8\u4fdd\u62a4\uff0c\u5305\u62ec\u957f\u78c1\u9053\u3001\u5f31\u4f4d\u548c\u6a21\u7cca\u4f4d\u3002\u5bf9\u4e8e1981\u5e74\u6700\u5feb1\u5fae\u79d2\u6307\u4ee4\u7684\u786c\u4ef6\u6765\u8bf4\u8fd8\u4e0d\u9519\uff01", "note_en": "Introduction  One of the most iconic floppy disc protection stories is  Dungeon Master. Released in December 1987, Dungeon Master combined an advanced physical disc format (fuzzy bits) with sneaky protection checks embedded into the gameplay itself.\n  I  strongly recommend this article which gives an excellent overview of floppy discs before launching into a very thorough overview of the fuzzy bits protection on the Atari ST Dungeon Master disc. There is also  this excellent article which goes more into the stories surrounding the Dungeon Master protection. It includes a quote from one of the Dungeon Master authors:\n  &#34;We had the advantage of owning the patent on a floppy-disk copy protection scheme that required a $40,000 specialized hardware device to write the disks. It was impossible to create a disk image without this hardware, and the hardware itself was out of production.&#34;\n The reason for the hefty price tag is likely the timing precision required to create fuzzy bits reliably. The required precision is measured in nanoseconds at a time when much of the world was still chugging along in microseconds.\n  The BBC Micro had a 2MHz 6502 CPU and its simplest instructions took 2 cycles, which is 1 microsecond. Is there any hope of writing fuzzy bits with such a constraint? We will see how far we can get. This work is called project Oiled Otter.\n  To get us in the mood, and close out the introduction, here&#39;s a picture of a 3.5&#34; floppy disc duplicator machine. I&#39;m amused by how much it looks like a photocopier, except the hopper takes discs instead of paper! It looks like  Advanced World Products might even still sell you one.\n       The  BBC Micro was known for excellent expandability, including the so-called user port. This port is driven by a  6522 Versatile Interface Adapter running at 1MHz. The port itself offers 8 data pins and 2 control pins. There&#39;s a lot of control offered over these pins. The data pins can individually be configured as inputs or outputs and the output logic levels can be set as high or low as needed.\n  Why are we looking at the user port? Well, we&#39;re going to attempt to drive a disc drive directly from the user port. By removing the floppy disc controller from the equation, we hope to get it out of the way and achieve more direct control of the disc drive and the data streams to and from it.\n    The above image is my lovely cable connecting the user port to a disc drive. The connectors are standard and the wires between them are just jumper wires. In a genuine attempt to create something that could have been done simply &#34;back in day&#34;, I&#39;m not allowing any extra electronics.\n      The main take away I&#39;d encourage from this wiring setup is that the disc drive interface is probably simpler than you thought. We can drive the disc drive and query its important state with just 8 pins. It&#39;s very simple. Say you want to spin up the drive, you set the logic level to low on PB0 and PB1. Say you want to wait for the disc to rotate to the start of the track, you query the logic level on PB6 until you see a high-&gt;low transition. Stepping is just setting a logic level for &#34;step in&#34; vs. &#34;step out&#34; and then pulsing low the &#34;step&#34; pin.\n  So far so good. We have basic control of the drive but have yet to write anything.\n    A brief digression into electrical headaches is warranted, because I hit some. Wiring together random pairs of components might sometimes work and sometimes it may need finessing. Here&#39;s a scope view of voltages initially seen on the W/DATA pin, at the drive:\n    The logic 1 voltage is about 3.4v and the logic 0 voltage is about 1.5v. This is a significant problem! Acceptable  TTL voltage levels are well defined:\n &#34;A TTL input signal is defined as &#39;low&#39; when between 0 V and 0.8 V with respect to the ground terminal, and &#39;high&#39; when between 2 V and VCC (5 V), and if a voltage signal ranging between 0.8 V and 2.0 V is sent into the input of a TTL gate, there is no certain response from the gate and therefore it is considered &#39;uncertain&#39;&#34;\n  A logic 0 voltage of 1.5v is considered &#34;uncertain&#34; and won&#39;t do at all. Indeed, the drive I&#39;m using didn&#39;t write anything with the above signal.\n  The problem was resolved by removing the  floppy cable termination resistor from the drive. Here&#39;s a picture of my drive and the socketed termination resistor array is ringed in red:\n  This resolves the voltage levels perfectly and everything then works. It appears than many of the BBC Micro&#39;s ports other than the disc port don&#39;t have the oomph to drive a terminated cable. But hang on -- presumably the resistor was there for a reason in the first place? Yes. Removing it has two caveats:\n Watch your cable length. Longer cables are prone to signal degradation when they are unterminated.\n Watch the voltage levels on unconnected wires. I was seeing a voltage level of 1.32v on the S/SEL (side select) pin at the drive. This is not ok as it is again in the TTL uncertain range. Where will the drive write data? Maybe the upper side, maybe the lower side. Or maybe neither or both! This was resolved by connecting every significant wire and driving it high or low as desired.\n   The elephant in the room is: how do we provide a signal to the W/DATA pin? This is the &#34;hard&#34; pin. It is high bandwidth and has precise timing requirements. Let&#39;s stop dreaming about nanoseconds-level precision fuzzy bits for a moment and try and write basic FM pulses to the drive.\n  Most BBC Micro discs are FM (aka. DFM aka. single denisty) encoded at 250kHz. To write a FM track is actually pretty simple. Make sure drive is spinning and the write gate is open. Now, every 4 microseconds, either pulse W/DATA low then back to high (a 1 bit) or do not (a 0 bit). Most of the time, every other bit must be a 1 (a clock bit to maintain timing and synchronization).\n  Driving W/DATA using the CPU is hopeless. 4 microseconds is 8 CPU cycles -- certainly not enough to perhaps load a byte, shift it, and write a 0 then a 1 to the user port logic levels. A simple loop is likely to be 12+ microseconds which is way out of range. Instead, to hope to drive W/DATA fast enough, we must look to facilities of the 6522 VIA chip.\n    The most obvious candidate for our task is the shift register. The shift register is an 8-bit register. When in the appropriate mode, loading the shift register will cause the chip to sequentially emit the 8 bits over one of the pins of the user port. This is great -- the bits are being dealt with in parallel with the main CPU&#39;s execution, so the CPU is free to spend its time working out the next set of bits to start shifting.\n  Unfortunately, I was unable to get it to work. The only shift mode that has the potential to be fast enough is &#34;shift out at system clock rate&#34;. The  Western Design Center 6522 datasheet has a good diagram:\n    The VIA system clock is 1MHz so the shift clock will be a 500kHz signal and the resolution of the bits we can output is 250kHz. That&#39;s just enough. However, I did not work out how to get the shift clock running continuously and smoothly. Even with attempts at precise timing for shift register reloading, the scope output for the shift clock pin always looked like this:\n    It would appear that in the only shift mode fast enough to have a shot, reloading the shift register incurs a delay before shifting resumes. This is not suitable.\n   A little-known feature of the 6522 is its &#34;pulse output mode&#34;. Not every 6522 variant datasheet covers it but here is the tiny entry in the  MOS Technology  datasheet:\n    For once, the datasheet appears to accurately describe behavior. This mode is very interesting to us because one write to the VIA promises two distinct effects: an output pin will go to logic low, and then raise to logic high again 1 cycle (1 microsecond) later with no further effort from us. Because of that, it  is\u00a0tractable to use this to drive a 250kHz output signal. CPU is very tight; a loop is way out of the question but a linear 6502 code block can do it, e.g.:\n          This works. There is just enough CPU horsepower to do it. 8 cycles is 4 microseconds, which is the shortest time between disc pulses.\n  Unfortunately it is  extremely memory intensive. 2 bytes of linear 6502 code are required per FM encoded bit. One useful data bit is 2 FM bits because every other bit is a clock bit. A track is 3125 bytes so this requires 3125 * 8 * 2 * 2 == 100kB of linear code. The BBC Micro has 32kB of RAM so we are out of luck here. It&#39;s possible to write single (smaller) sectors including some powerful novel disc protection mechanisms. But we can&#39;t write large (1024 byte) sectors or full tracks. Both of these things are required to correctly write many discs. Furthermore, our timing resolution is 1 microsecond, which is not good enough to write many advanced protections and disc surfaces.\n  We can be happy that we got something working at all, given the constraints, but it isn&#39;t a fully satisfying solution.\n  It&#39;s fortunate I hang out with clever people such as the  Bitshifters Collective. (Please go and watch the latest demo,  Evil Influences, immediately!) In a Slack conversation, Tom Seddon (author of the  b2 emulator) suggested... using the output of the RGB port??\n    It&#39;s an idea I may have chuckled at initially but the more I reflected on it, the more it seemed that it might be possible. The BBC Micro uses the  6845 video chip\u00a0for timing. Like the 6522, it&#39;s a quirky beast but at least the quirks are well understood on account of Bitshifters&#39; demos which abuse the 6845. I also did some reversing work to make the  jsbeeb emulator correctly emulate the Hitachi 6845. Let&#39;s see Oiled Otter working in this video and then describe what we saw:\n      It works by configuring the 6845 chip unusually. The 6845 is run at 1MHz and frame timing is set to be a single 32 microsecond / 32 byte scanline per &#34;frame&#34;. While every frame is being output, the 6845&#39;s video memory registers are rewritten to fetch the next 32 bytes from a potentially different location. So every 32 microseconds, a different output pattern is selected from a table of output patterns. We have configured the RGB pins to emit 8 pixels per microsecond, which is 256 pixels per output pattern. This gives a huge number of different possible output patterns. But since we&#39;re writing a 32 microsecond chunk of disc FM encodings, only a few patterns make sense. In 32 microseconds, we can fit 8 FM pulses / bits. 4 bits will be clock bits, which are usually all 1. 4 bits will be data bits, of which there are just 16 combinations.\n  For example, if we&#39;re writing the data nibble 0x5, the 32 microsecond output needs to look like this:\n    The video data bytes would be 00FFFFFFFFFFFFFF00FFFFFF00FFFFFF00FFFFFFFFFFFFFF00FFFFFF00FFFFFF. The 1st, 2nd, 4th and 5th 00s are the clock bits. In between the clock bits is the data bit pattern 0101, or 0x5.\n  The CPU and memory constraints balance out nicely. In the end, it&#39;s a similar setup to as if the VIA shift register had worked: some little co-processor (the video chip) is busy emitting a bunch of FM bits while the CPU is freed up to load and provide the next pattern. The memory requirements are very reasonable. The table of necessary 32 microsecond output chunks fits comfortably within 1024 bytes, thanks to the use of a special linear addressing mode. The list of look up indexes for an entire track is around 12kB, so everything is fitting nicely in the BBC Micro&#39;s 32kB of RAM.\n      Of course, getting this working didn&#39;t come without tripping over some &#34;fun&#34; quirks. The first of these is the 6845&#39;s quirk whereby it outputs black for the last character of every scanline. It is the bane of demo writers as well as disc pioneers, it seems. Here&#39;s a slide from a recent talk I gave showing the issue:\n    On the left, there&#39;s a demo effect plagued by vertical black stripes caused by the &#34;last character / column is black&#34; issue. Multiple 6845 scanlines were placed inside a single raster beam scanline and unfortunately, the black stripes are unwanted. When used to drive a disc, the effect is arguably worse: the black stripes represent unwanted pulses written to the disc.\n  On the right, there&#39;s an image of the solution: the waveform submitted to the disc is simply inverted. It is now ok for the last column to be black (shown in orange outline) because a zero value is always required there. Technically, this is a violation of some disc drives&#39; timing requirements for pulsing W/DATA low. Here&#39;s a timing diagram for a drive from the era, a  Mitsubishi M4852/M4853:\n    According to this diagram, logic 0 should be held for up to 2100ns. With an inverted waveform, 3000ns+ is to be expected. However, the drives I have only care about negative-going data pulses and not the hold time. This is not surprising. It would be possible to jiggle a few things around to avoid the 6845 quirk and also submit in-spec hold timings but this has not proven necessary so it has not been undertaken.\n    DRAM decay is a horror. It is what happens when you fail to refresh DRAM. From the  Wikipedia article on memory refresh:\n &#34;This process is conducted automatically in the background by the memory circuitry and is transparent to the user.&#34;\n On a modern system yes, but on a BBC Micro not so much. On the BBC Micro, DRAM refresh is a side effect of the video subsystem. It relies on the fact that standard screen modes iterate across all DRAM rows within a short period of time. Perhaps you can see where this is going.... our special video mode used to output 32 microsecond frames is very much not a standard screen mode. It does not guarantee to visit all DRAM rows so DRAM decay will occur! DRAM decay is no joke. I lost various programs and disc contents due to unplanned DRAM decay. For a laugh, here&#39;s a BASIC program that inflicted DRAM decay on itself for a fraction of a second:\n    The bad news with DRAM decay is that if you are bitten by it, you can easily lose data.\n  The good news with DRAM decay is that if you are expecting it, you can usually easily work around it. In the case of the Oiled Otter, there are various critical loops with the 6845 video chip in an unusual state. For each of these, a manual incrementing memory fetch is worked in to maintain DRAM refresh.\n Now that we have a working disc writing system, bypassing the floppy disc controller, what can we do with it? We&#39;ve already demonstrated the ability to write arbitrary FM encoded discs in the video above.\n  But we have gotten very lucky along this journey. Thanks to VIA shift register&#39;s deficiencies forcing us to find the video output pin solution,  we have access to much finer grained timing resolution on the W/DATA pin. We&#39;re using the BBC Micro MODE4 which uses an 8MHz pixel clock. This means  we can output black or white pixels every 125ns, triggering a write pulse with 125ns granularity. If we wanted to spend a little extra memory (which we do have) on larger tables, we could use MODE0 which uses a 16MHz pixel clock, affording 62.5ns resolution. 125ns has proved just fine for all tested disc protections, but it&#39;s a nice feeling to have a little bit left in the tank.\n    My favorite disc protection is long track protection. It was  popular in the Amiga days. I do not believe it was ever used on the BBC Micro. I like long track protection because it is very fundamental: the floppy disc controller has a broad tolerance for differing read speeds (because disc drives rotate at differing speeds) but it only writes at the one correct speed.\n  An advanced long track protection is to write two sectors on the same track with one recorded at a faster rate. The copy protection check is to compare the time taken to read the two sectors. The sector recorded at the faster rate should read measurably and significantly faster.\n  Can Oiled Otter write such a track? Yes, fairly easily. Given the 125ns output resolution, it&#39;s easy to create a few output table entries that are like the normal ones, but with 125ns shaved off per 1 microsecond. Here is a video of creating long track protection and checking how it reads back:\n        We are probably overdue to return to where we started: fuzzy bits protection. Can Oiled Otter create fuzzy bits on 1981 tech? Let&#39;s give it a go. Here&#39;s an image of the results of reading a sector a couple of times after it was written with Oiled Otter&#39;s FUZZ command.\n    The FUZZ command writes the 0x8 data nibble, with the data bit progressively being delayed by 125ns increments. This is similar to the description of how the Dungeon Master fuzzy bits are written. As can be seen in the screenshot, the 0x88 data bytes soon start reading back incorrect and non-deterministically. But the variance isn&#39;t 100% random like weak bits -- the variance is whether the 0x8 bit is late enough to have a chance of being missed. If missed, you can still eyeball that there are patterns and themes to the madness.\n  The above results are actually the application of fuzzy bit principles to FM encoded data. In FM encoding, every data bit is interleaved with a clock bit. This results in the bleeding of clock bits in to the data stream on occasion (see the 0xFF bytes in the first run above -- they are likely clock bits). The Dungeon Master protection uses fuzzy bits in conjunction with MFM. This leads to a calmer situation where the fuzzy bit drifts between two valid data bit encodings and does not mess up the clock! Of course, Oiled Otter can write MFM, GCR or any encoding you can dream up. It&#39;s all just different protocols for our fundamental primitive of being able to send a pulse to the drive at any time, with good resolution.\n  For good measure, here&#39;s an oscilloscope view of the fuzzy bits on the disc. The peaks are somewhat irregular, and when two pulses are very close together (1 microsecond or so, far too close for any encoding standard), the strength of the flux reversal detected by the drive even starts to get weak.\n    Mission accomplished. We gained the ability to write disc pulses with 125ns granularity. This is perfectly sufficient to create advanced disc protections including long tracks, weak bits and fuzzy bits. Not bad for 1981 hardware with a 1 microsecond fastest instruction!", "posttime": "2020-07-11 07:34:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bbc,\u5199\u5165", "title": "\u5c06\u4e00\u90e8GB 400\u7684BBC Micro(1981)\u53d8\u62104\u4e07\u7f8e\u5143\u7684\u5149\u76d8\u523b\u5f55\u673a(1987)", "title_en": "Turning a \u00a3400 BBC Micro (1981) into a $40k disc writer (1987)", "transed": 1, "url": "https://scarybeastsecurity.blogspot.com/2020/07/turning-400-bbc-micro-1981-into-40000.html", "via": "", "real_tags": ["bbc", "\u5199\u5165"]}, {"category": "", "categoryclass": "", "imagename": "41c67cde10df6578b5f38c3e1f9f4d24.jpg", "infoid": 1011115, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u672c\u5468\u78b0\u5de7\u8bfb\u4e86\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\uff0c\u4f60\u53ef\u80fd\u4f1a\u6709\u4e00\u79cd\u9519\u8bef\u7684\u5370\u8c61\uff0c\u5373\u4e16\u754c\u536b\u751f\u7ec4\u7ec7(World Health Organization)\u5728\u5927\u6d41\u884c\u51a0\u72b6\u75c5\u6bd2SARS-CoV-2\u662f\u5426\u901a\u8fc7\u5728\u7a7a\u6c14\u4e2d\u9017\u7559\u4f20\u64ad\u7684\u95ee\u9898\u4e0a\u5927\u5e45\u6539\u53d8\u4e86\u7acb\u573a\u3002\n\u5468\u56db\u4e2d\u5348\u65f6\u5206\uff0c\u8be5\u62a5\u5ba3\u79f0\uff1a\u201c\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\uff0c\u53cd\u5176\u9053\u800c\u884c\u4e4b\uff0c\u963f\u83f2\u59c6\u65af\u75c5\u6bd2\u53ef\u80fd\u662f\u5ba4\u5185\u7a7a\u6c14\u4f20\u64ad\u7684\u3002\u201d\u8be5\u62a5\u8fd8\u79f0\u8fd9\u662f\u201c\u627f\u8ba4\u201d\uff0c\u5e76\u5728\u968f\u540e\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\u8bf4\uff0c\u4e16\u536b\u7ec4\u7ec7\u5df2\u7ecf\u201c\u627f\u8ba4\u201d\u3002\u8fd9\u4e24\u7bc7\u6587\u7ae0\u90fd\u6307\u51fa\uff0c\u4e00\u4e2a\u7531200\u591a\u540d\u7814\u7a76\u4eba\u5458\u7ec4\u6210\u7684\u5c0f\u7ec4\u672c\u5468\u8fd8\u53d1\u8868\u4e86\u4e00\u7bc7\u8bc4\u8bba\u6587\u7ae0\uff0c\u6566\u4fc3\u4e16\u536b\u7ec4\u7ec7\u548c\u5176\u4ed6\u516c\u5171\u536b\u751f\u673a\u6784\u8ba4\u8bc6\u5230\u5e76\u89e3\u51b3SARS-CoV-2\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\u7684\u53ef\u80fd\u6027\u3002\n\u95ee\u9898\u662f\uff1a\u4e16\u536b\u7ec4\u7ec7\u6ca1\u6709\u6539\u53d8\u5176\u5bf9\u7a7a\u4e2d\u4f20\u64ad\u7684\u7acb\u573a\u3002\u56e0\u6b64\uff0c\u5b83\u6ca1\u6709\u5c31\u4eba\u4eec\u5982\u4f55\u4fdd\u6301\u5b89\u5168\u53d1\u5e03\u4efb\u4f55\u65b0\u7684\u5efa\u8bae\u6216\u6307\u5bfc\u3002\n\u8be5\u7ec4\u7ec7\u786e\u5b9e\u53d1\u5e03\u4e86\u5bf9\u4f20\u8f93\u6570\u636e\u7684\u6700\u65b0\u5ba1\u67e5\uff0c\u5e76\u8868\u793a\u65e9\u5728\u53d1\u8868\u8bc4\u8bba\u4e4b\u524d\u5c31\u5df2\u7ecf\u8fdb\u884c\u4e86\u6570\u5468\u7684\u5de5\u4f5c\u3002\n\u5728\u5176\u5173\u4e8e\u4f20\u64ad\u7684\u6700\u65b0\u79d1\u5b66\u7b80\u62a5\u4e2d\uff0c\u4e16\u536b\u7ec4\u7ec7\u8868\u793a\uff0c\u57fa\u672c\u4e0a\u4e0e\u51e0\u4e2a\u6708\u6765\u5173\u4e8e\u7a7a\u4e2d\u4f20\u64ad\u7684\u8bf4\u6cd5\u76f8\u540c\u3002\u4e5f\u5c31\u662f\u8bf4\uff1aSARS-CoV-2\u662f\u5426\u5728\u7a7a\u6c14\u4e2d\u5f98\u5f8a\u7684\u95ee\u9898\u662f\u4e00\u4e2a\u79ef\u6781\u8ba8\u8bba\u7684\u8bdd\u9898\uff0c\u867d\u7136\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u80fd\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u8fc4\u4eca\u4e3a\u6b62\u5173\u4e8e\u6c14\u6eb6\u80f6\u4f20\u64ad\u7684\u6570\u636e\u6ca1\u6709\u5b9a\u8bba\u6216\u6ca1\u6709\u8bf4\u670d\u529b\u3002\u4f46\u662f\uff0c\u4e16\u536b\u7ec4\u7ec7\u4e00\u5982\u65e2\u5f80\u5730\u6b22\u8fce\u66f4\u591a\u5173\u4e8e\u8fd9\u4e00\u4e3b\u9898\u7684\u9ad8\u8d28\u91cf\u7814\u7a76\u3002\n\u5728\u6700\u65b0\u7684\u7b80\u62a5\u4e2d\uff0c\u4e16\u536b\u7ec4\u7ec7\u56de\u987e\u4e86\u6700\u8fd1\u5173\u6ce8\u6c14\u6eb6\u80f6\u4ea7\u751f\u7684\u7269\u7406\u7814\u7a76\uff0c\u4f46\u5b83\u6307\u51fa\uff1a\u201c\u547c\u51fa\u7684\u6db2\u6ef4\u6838\u6216\u84b8\u53d1\u751f\u6210\u6c14\u6eb6\u80f6\u7684\u547c\u5438\u6db2\u6ef4\u7684\u6bd4\u4f8b\uff0c\u4ee5\u53ca\u5bfc\u81f4\u53e6\u4e00\u4e2a\u4eba\u611f\u67d3\u6240\u9700\u7684\u5b58\u6d3bSARS-CoV-2\u7684\u611f\u67d3\u91cf\u5c1a\u4e0d\u6e05\u695a\u3002\u201d\u5b83\u56de\u987e\u4e86\u5173\u4e8e\u6b63\u5e38\u8bf4\u8bdd\u548c\u54b3\u55fd\u4e2d\u7684\u98de\u6cab\u548c\u6c14\u6eb6\u80f6\u7684\u5b9e\u9a8c\uff0c\u5e76\u5f97\u51fa\u7ed3\u8bba\uff0c\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd8\u6ca1\u6709\u8bc1\u660e\u901a\u8fc7\u8fd9\u79cd\u6c14\u6eb6\u80f6\u9014\u5f84\u4f20\u64adSARS-CoV-2\uff1b\u8fd8\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\u3002\u201d\u540c\u6837\uff0c\u4e16\u536b\u7ec4\u7ec7\u603b\u7ed3\u8bf4\uff0c\u4f7f\u7528\u96fe\u5316\u5668\u5c06SARS-CoV-2\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u7684\u7814\u7a76\u201c\u4e0d\u80fd\u53cd\u6620\u6b63\u5e38\u7684\u4eba\u7c7b\u54b3\u55fd\u60c5\u51b5\u201d\u3002\n\u4e16\u536b\u7ec4\u7ec7\u6307\u51fa\uff0c\u63a5\u89e6\u8fc7\u7684\u536b\u751f\u5de5\u4f5c\u8005\u7684\u4e34\u5e8a\u62a5\u544a\u201c\u8868\u660e\u6c14\u6eb6\u80f6\u4f20\u64ad\u4e0d\u662f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u53d1\u751f\u7684\u3002\u201d\u6b64\u5916\uff0c\u8be5\u7ec4\u7ec7\u8865\u5145\u8bf4\uff0c\u533b\u7597\u4fdd\u5065\u73af\u5883\u4e2d\u7684\u7a7a\u6c14\u91c7\u6837\u5728\u53d1\u73b0\u75c5\u6bd2\u7684\u57fa\u56e0\u75d5\u8ff9\u65b9\u9762\u4e00\u76f4\u4e0d\u4e00\u81f4\u3002\n\u4e5f\u8bb8\u4eba\u4eec\u6025\u4e8e\u5ba3\u5e03\u8fd9\u573a\u4f1f\u5927\u7684\u6c14\u6eb6\u80f6\u6218\u4e89\u53d6\u5f97\u4e86\u80dc\u5229\uff0c\u56e0\u4e3a\u4e16\u536b\u7ec4\u7ec7\u786e\u5b9e\u8ba8\u8bba\u4e86\u6700\u8fd1\u5173\u4e8e\u5728\u7279\u5b9a\u75ab\u60c5\u4e2d\u53ef\u80fd\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\u7684\u62a5\u544a\u3002\n[s]\u4e00\u4e9b\u4e0e\u5ba4\u5185\u62e5\u6324\u7a7a\u95f4\u6709\u5173\u7684\u66b4\u53d1\u62a5\u544a\u8868\u660e\uff0c\u4f8b\u5982\uff0c\u5728\u5408\u5531\u56e2\u7ec3\u4e60\u671f\u95f4\u3001\u9910\u9986\u6216\u5065\u8eab\u8bfe\u4e0a\uff0c\u6c14\u6eb6\u80f6\u4f20\u64ad\u4e0e\u6c34\u6ef4\u4f20\u64ad\u76f8\u7ed3\u5408\uff0c\u662f\u53ef\u80fd\u7684\u3002\u5728\u8fd9\u4e9b\u4e8b\u4ef6\u4e2d\uff0c\u4e0d\u80fd\u6392\u9664\u77ed\u8ddd\u79bb\u6c14\u6eb6\u80f6\u4f20\u64ad\uff0c\u7279\u522b\u662f\u5728\u7279\u5b9a\u7684\u5ba4\u5185\u5730\u70b9\uff0c\u4f8b\u5982\u4e0e\u611f\u67d3\u8005\u957f\u65f6\u95f4\u63a5\u89e6\u7684\u62e5\u6324\u548c\u901a\u98ce\u4e0d\u8db3\u7684\u7a7a\u95f4\u3002\n\u4e00\u4e9b\u4eba\u4f3c\u4e4e\u5f88\u9ad8\u5174\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u627f\u8ba4\u4e86\u8fd9\u4e9b\u62a5\u544a\u7684\u5b58\u5728-\u5c3d\u7ba1\u8fd9\u4e9b\u5b9a\u671f\u66f4\u65b0\u7684\u79d1\u5b66\u7b80\u62a5\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5ba1\u67e5\u65b0\u7684\u6570\u636e\u3002\u4e5f\u8bb8\u6709\u4e9b\u4eba\u5c06\u8fd9\u7bc7\u201c\u4e0d\u80fd\u6392\u9664\u201d\u7684\u6587\u7ae0\u89e3\u8bfb\u4e3a\u4e16\u536b\u7ec4\u7ec7\u627f\u8ba4\u5b83\u662f\u4e00\u79cd\u53ef\u80fd\u6027\u3002\u4f46\u662f\uff0c\u5f53\u7136\uff0c\u4e16\u536b\u7ec4\u7ec7\u7ee7\u7eed\u8bf4\uff1a\u201c\u7136\u800c\uff0c\u5bf9\u8fd9\u4e9b\u96c6\u7fa4\u7684\u8be6\u7ec6\u8c03\u67e5\u8868\u660e\uff0c\u98de\u6cab\u548c(\u4ece\u53d7\u6c61\u67d3\u7684\u8868\u9762\u6216\u7269\u4f53\u4f20\u64ad\u7684)\u4e5f\u53ef\u4ee5\u89e3\u91ca\u8fd9\u4e9b\u96c6\u7fa4\u5185\u7684\u4eba\u4e0e\u4eba\u4e4b\u95f4\u7684\u4f20\u64ad\u3002\u201d\n\u8fd9\u5e76\u4e0d\u5b8c\u5168\u662f\u5bf9\u7a7a\u4e2d\u4f20\u8f93\u7684\u70ed\u60c5\u62e5\u62b1\u3002\u8fd9\u66f4\u50cf\u662f\u4f60\u7ed9\u4e00\u4e2a\u4e0d\u7ecf\u5e38\u6d17\u6fa1\u7684\u670b\u53cb\u77ed\u6682\u800c\u5c34\u5c2c\u7684\u4fa7\u8eab\u62e5\u62b1\u3002\n\u4f46\u6700\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e0e\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u4e4b\u524d\u5728\u8fd9\u65b9\u9762\u7684\u8bf4\u6cd5\u6ca1\u6709\u5b9e\u8d28\u6027\u7684\u4e0d\u540c\u3002\u8be5\u7ec4\u7ec7\u57286\u67085\u65e5\u5173\u4e8e\u53e3\u7f69\u7684\u6307\u5bfc\u4e2d\u8bf4\u4e86\u975e\u5e38\u7c7b\u4f3c\u7684\u8bdd\u3002\u540c\u6837\uff0c\u57283\u670829\u65e5\u51fa\u7248\u7684\u524d\u4e00\u7248\u4f20\u64ad\u79d1\u5b66\u7b80\u62a5\u4e2d\uff0c\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u627f\u8ba4\u4e86\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\u7684\u53ef\u80fd\u6027\uff0c\u5e76\u5199\u9053\uff1a\u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u4e00\u4e9b\u79d1\u5b66\u51fa\u7248\u7269\u63d0\u4f9b\u4e86\u521d\u6b65\u8bc1\u636e\uff0c\u8bc1\u660e\u80fd\u5426\u5728\u7a7a\u6c14\u4e2d\u68c0\u6d4b\u5230\u65b0\u51a0\u80ba\u708e\u75c5\u6bd2\u3002\u201d\n\u4f46\u662f\uff0c\u5b83\u8b66\u544a\u8bf4\uff0c\u201c\u4ed6\u4eec\u7684\u521d\u6b65\u8c03\u67e5\u7ed3\u679c\u9700\u8981\u4ed4\u7ec6\u89e3\u8bfb\u3002\u201d\u5c31\u50cf\u5728\u6700\u65b0\u7248\u672c\u7684\u7b80\u62a5\u4e2d\u6240\u505a\u7684\u90a3\u6837\uff0c\u4e16\u536b\u7ec4\u7ec7\u63a5\u7740\u6307\u51fa\u4e86\u8fd9\u4e9b\u6570\u636e\u7684\u5f31\u70b9\uff0c\u8fd9\u8868\u660e\u5b83\u8fd8\u6ca1\u6709\u88ab\u8bf4\u670d\u3002\u800c\u4e14\uff0c\u4e00\u5982\u65e2\u5f80\uff0c\u5b83\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\u3002\n\u5f53ARS\u8054\u7cfb\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u8be2\u95ee\u65b0\u7684\u79d1\u5b66\u7b80\u62a5\u662f\u5426\u4ee3\u8868\u5176\u7acb\u573a\u7684\u201c\u9006\u8f6c\u201d\u65f6\uff0c\u4e00\u4f4d\u53d1\u8a00\u4eba\u7b80\u6d01\u5730\u56de\u7b54\u8bf4\uff1a\u201c\u4e16\u754c\u536b\u751f\u7ec4\u7ec7\u6ca1\u6709\u6539\u53d8\u5176\u6307\u5bfc\u65b9\u9488\u3002\u201d", "note_en": "If you happened to read The New York Times this week, you may be under the false impression that the World Health Organization significantly changed its stance on whether the pandemic coronavirus, SARS-CoV-2, spreads by lingering in the air.\n Around midday Thursday, the paper declared: \u201c W.H.O., in Reversal, Affirms Virus May Be Airborne Indoors.\u201d The paper also called it an \u201cadmission\u201d and, in a subsequent article, said the WHO had \u201c conceded.\u201d The articles both noted that a group of more than 200 researchers had also published a commentary piece this week urging the WHO and other public health bodies to acknowledge and address the potential for airborne transmission of SARS-CoV-2.\n The problem: the WHO did not change its stance on airborne transmission. And, as such, it did not issue any new recommendations or guidance on how people can stay safe.\n What the organization  did do is release an update of its review of the data on transmission, which it said it had been working on for weeks\u2014well before the published commentary.\n  In  its updated scientific brief on transmission, the WHO said, basically, the same thing it has said for months on airborne transmission. That is: the question of whether SARS-CoV-2 lingers in the air is a topic of active discussion and, while it may be possible in some settings, the data in aerosol transmission so far is inconclusive or unconvincing. But, as always, the WHO welcomes more high-quality research on this topic.\n In the latest brief, the WHO reviewed recent physics studies looking at aerosol production, but it noted: \u201cthe proportion of exhaled droplet nuclei or of respiratory droplets that evaporate to generate aerosols, and the infectious dose of viable SARS-CoV-2\u00a0 required to cause infection in another person are not known.\u201d It reviewed experiments on droplets and aerosols from normal speech and coughing and concluded, \u201cTo date, transmission of SARS-CoV-2 by this type of aerosol route has not been demonstrated; much more research is needed.\u201d Likewise, studies using nebulizers to suspend SARS-CoV-2 in the air \u201cdo not reflect normal human cough conditions,\u201d the WHO concluded.\n The WHO noted that clinical reports of exposed health workers \u201csuggest that aerosol transmission did not occur in this context.\u201d And, the organization added, air sampling in health care settings has been inconsistent in finding genetic traces of the virus.\n  Perhaps there was some rush to declare victory in the great aerosol war because the WHO did discuss recent reports of possible airborne transmission in specific outbreaks.\n  [S]ome outbreak reports related to indoor crowded spaces have suggested the possibility of aerosol transmission, combined with droplet transmission, for example, during choir practice, in restaurants, or in fitness classes. In these events, short-range aerosol transmission, particularly in specific indoor locations, such as crowded and inadequately ventilated spaces over a prolonged period of time with infected persons cannot be ruled out.\n It seemed some were happy that the WHO acknowledged the existence of these reports\u2014though the main purpose of these periodically updated scientific briefs is to review new data. And perhaps some interpreted the \u201ccannot be ruled out\u201d piece as the WHO admitting it as a possibility. But, of course, the WHO went on: \u201cHowever, the detailed investigations of these clusters suggest that droplet and [transmission from contaminated surfaces or objects] could also explain human-to-human transmission within these clusters.\u201d\n This is not exactly a warm embrace of the airborne transmission. It\u2019s more like the brief, awkward sideways hug you\u2019d give a friend who doesn\u2019t shower enough.\n But most importantly, it\u2019s not substantively different from what the WHO has said before on this. The organization said something very similar in its  June 5 guidance on masks. Likewise, in  the previous version of the scientific brief on transmission, published March 29, the WHO acknowledged the possibility of airborne transmission, writing: \u201cTo date, some scientific publications provide initial evidence on whether the COVID-19 virus can be detected in the air.\u201d\n But, it cautioned, \u201c[t]hese initial findings need to be interpreted carefully.&#34;\u00a0Just as it did in the updated version of the brief, the WHO went on to note the weaknesses of the data, suggesting that it was not yet convinced. And, as always, it called for more research.\n When Ars reached out to the WHO to ask if the new scientific brief represented a \u201creversal\u201d on its stance, a spokesperson responded concisely: \u201cWHO has not changed its guidance.\u201d", "posttime": "2020-07-11 07:15:01", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6000\u7591,sars,\u4f20\u64ad", "title": "\u4e0d\u7ba1\u7ebd\u7ea6\u65f6\u62a5\u600e\u4e48\u8bf4\uff0c\u8c01\u4ecd\u7136\u5bf9SARS-CoV-2\u5728\u7a7a\u6c14\u4e2d\u6325\u4e4b\u4e0d\u53bb\u6301\u6000\u7591\u6001\u5ea6", "title_en": "WHO still skeptical SARS-CoV-2 lingers in air\u2014despite what the NYT says", "transed": 1, "url": "https://arstechnica.com/science/2020/07/no-the-who-has-not-reversed-its-stance-on-airborne-transmission/", "via": "", "real_tags": ["\u6000\u7591", "sars", "\u4f20\u64ad"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1011113, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u5efa\u5e10\u6237", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-07-11 07:11:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u53f0,future,\u521b\u5efa", "title": "\u706b\u817f\u7535\u53f0\u524d\u9014\u672a\u535c", "title_en": "The Uncertain Future of Ham Radio", "transed": 1, "url": "https://spectrum.ieee.org/telecom/wireless/the-uncertain-future-of-ham-radio", "via": "", "real_tags": ["\u7535\u53f0", "future", "\u521b\u5efa"]}, {"category": "", "categoryclass": "", "imagename": "bca714a302444d2ab053bfb6377f2a8f.jpg", "infoid": 1011112, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53bb\u4ed6\u5988\u76842020\u5e74\uff0c\u8be5\u56de\u53bb\u4e86\u3002\u8fd8\u6709\uff0c\u52a0\u5165\u6211\u7684\u4e0d\u548c\u5427\u3002\u90a3\u91cc\u5f88\u5b89\u5168\uff1ahttps://discord.gg/rt4EZa\u6211\u5728Youtube\u4e0a\u662f\u975e\u5e38\u65b0\u7684\uff0c\u6240\u4ee5\u5728INT\u4e0a\u8ba2\u9605\u5e76\u5173\u6ce8\u6211\u5427\u2026", "note_en": "Screw 2020, time to go back. Also, join my Discord. It's safe there: https://discord.gg/rt4EZa I'm very new on Youtube, so subscribe and follow me on the int...", "posttime": "2020-07-11 07:11:10", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65f6\u5149,builds,https", "title": "\u6709\u4eba\u9020\u4e86\u4e00\u53f0VR\u65f6\u5149\u673a\uff0c\u8ba9\u4ed6\u4eec\u91cd\u6e29\u8fc7\u53bb", "title_en": "Some guy builds a VR time machine that lets them relive their past", "transed": 1, "url": "https://www.youtube.com/watch?v=aHyNYfFfXlg", "via": "", "real_tags": ["\u65f6\u5149", "builds", "https"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1011111, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f7f\u7528Presto\u97f3\u9891\u5e93\u6216Prestissimo\u81ea\u52a8\u4e0b\u8f7d\u65b0\u5267\u96c6\u5e76\u4ee5\u53ef\u53d8\u901f\u5ea6\u64ad\u653e\u3002\nnet\u662f\u4e00\u9879libre web\u670d\u52a1\uff0c\u5141\u8bb8\u60a8\u7ba1\u7406\u60a8\u7684\u64ad\u5ba2\u8ba2\u9605\u548c\u53d1\u73b0\u65b0\u5185\u5bb9\u3002\n\u64ad\u653e\u5668\u4e3b\u5c4f\u5e55\u5c0f\u90e8\u4ef6\u641c\u7d22Chromecast\u652f\u6301\u7761\u7720\u8ba1\u65f6\u5668\u81ea\u52a8\u6e90\u66f4\u65b0\u9ad8\u7ea7\u4e0b\u8f7d\u8bbe\u7f6e\u6d41\u3002\n--chip.de\u8fd9\u6b3e\u5f00\u6e90\u5e94\u7528\u7a0b\u5e8f\u5305\u542b\u4e86\u6240\u6709\u4f60\u559c\u6b22\u7684\u529f\u80fd\uff0c\u6ca1\u6709\u4e00\u9879\u662f\u4f60\u4e0d\u559c\u6b22\u7684\u3002\n--makeuseof.com\uff1a--AndroidPolice.com\u3002\nAntennaPod\u662f\u7531Daniel Oeh\u521b\u5efa\u7684\uff0c\u5e76\u5728\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u8bb8\u53ef\u4e0b\u53d1\u5e03\u3002\u5b83\u76ee\u524d\u7531\u5fd7\u613f\u8005\u7ef4\u62a4\u3002\u60f3\u5e2e\u5fd9\u5417\uff1f\u52a0\u5165\u6211\u4eec\u7684GitHub\u5427\uff01", "note_en": "Automatic download of new episodes and playback with variable speed using the \t\t\t\t Presto Sound Library or  Prestissimo\n  gpodder.net is a libre web service that allows you to manage your podcast subscriptions and discover new content.\n  Player homescreen widget  Search  ChromeCast support  Sleep timer  Automatic feed update  Advanced download settings  Streaming\n     --  chip.de  \u00a0   &#34;This open source app includes all the features you love and none of the crap you don\u2019t.&#34;\n \t\t --  makeuseof.com  \u00a0    --  androidpolice.com\n   AntennaPod was created by Daniel Oeh and released under the MIT License. \t\t\t It is currently maintained by volunteers. Wanna help? Join us on  GitHub!", "posttime": "2020-07-11 07:10:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "android,\u64ad\u5ba2,\u5f00\u6e90,easy,\u4e0b\u8f7d", "title": "Antennapod\uff1a\u6613\u7528\u3001\u7075\u6d3b\u3001\u5f00\u6e90\u7684Android\u64ad\u5ba2\u7ba1\u7406\u5668", "title_en": "Antennapod: Easy-to-use, flexible and open-source podcast manager for Android", "transed": 1, "url": "https://antennapod.org/", "via": "", "real_tags": ["android", "\u64ad\u5ba2", "\u5f00\u6e90", "easy", "\u4e0b\u8f7d"]}, {"category": "", "categoryclass": "", "imagename": "0d389263e73f42a2e72027e199213aec.png", "infoid": 1011110, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8c37\u6b4c\u672c\u5468\u5ba3\u5e03\u8ba1\u5212\u7981\u6b62\u63a8\u5e7f\u8ddf\u8e2a\u8f6f\u4ef6\u3001\u95f4\u8c0d\u8f6f\u4ef6\u548c\u5176\u4ed6\u5f62\u5f0f\u7684\u76d1\u63a7\u6280\u672f\u7684\u5e7f\u544a\uff0c\u8fd9\u4e9b\u6280\u672f\u53ef\u4ee5\u5728\u6ca1\u6709\u83b7\u5f97\u4ed6\u4eba\u5177\u4f53\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u7528\u4e8e\u8ddf\u8e2a\u4ed6\u4eec\u3002\n\u8fd9\u4e00\u53d8\u5316\u662f\u672c\u5468\u5ba3\u5e03\u7684\uff0c\u4f5c\u4e3a\u5373\u5c06\u5230\u6765\u7684\u8c37\u6b4c\u5e7f\u544a\u653f\u7b56\u66f4\u65b0\u7684\u4e00\u90e8\u5206\uff0c\u8be5\u653f\u7b56\u5c06\u4e8e\u4e0b\u4e2a\u6708\uff0c\u53732020\u5e748\u670811\u65e5\u751f\u6548\u3002\n\u5e7f\u544a\u5546\u4e0d\u80fd\u518d\u901a\u8fc7\u8c37\u6b4c\u5e7f\u544a\u63a8\u5e7f\u7684\u4ea7\u54c1\u548c\u670d\u52a1\u5305\u62ec\uff1a\n\u7528\u4e8e\u5bc6\u5207\u5408\u4f5c\u4f19\u4f34\u76d1\u63a7\u7684\u95f4\u8c0d\u8f6f\u4ef6\u548c\u6280\u672f\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u53ef\u7528\u4e8e\u76d1\u63a7\u6587\u672c\u3001\u7535\u8bdd\u6216\u6d4f\u89c8\u5386\u53f2\u7684\u95f4\u8c0d\u8f6f\u4ef6/\u6076\u610f\u8f6f\u4ef6\uff1b\n\u63a8\u5e7f\u76d1\u89c6\u8bbe\u5907(\u6444\u50cf\u673a\u3001\u5f55\u97f3\u673a\u3001\u4eea\u8868\u76d8\u6444\u50cf\u673a\u3001\u4fdd\u59c6\u6444\u50cf\u673a)\uff0c\u4ee5\u660e\u786e\u7684\u95f4\u8c0d\u76ee\u7684\u9500\u552e\u3002\n\u8c37\u6b4c\u8868\u793a\uff0c\u6839\u636e\u8fd9\u9879\u65b0\u653f\u7b56\uff0c\u4e3a\u7236\u6bcd\u8ffd\u8e2a\u6216\u76d1\u63a7\u5176\u672a\u6210\u5e74\u5b50\u5973\u800c\u8bbe\u8ba1\u7684\u79c1\u4eba\u8c03\u67e5\u670d\u52a1\u6216\u4ea7\u54c1\u4e0d\u4f1a\u88ab\u7981\u6b62\uff0c\u4ecd\u5c06\u5141\u8bb8\u5728\u5176\u5e73\u53f0\u4e0a\u6295\u653e\u5e7f\u544a\u3002\n\u63a8\u5e7f\u8ddf\u8e2a\u5668\u8f6f\u4ef6\u7684\u8fdd\u89c4\u8005\u5c06\u6536\u5230\u4e3a\u671f\u4e03\u5929\u7684\u8b66\u544a\uff0c\u4e4b\u540e\u5982\u679c\u4ed6\u4eec\u4e0d\u5220\u9664\u4ee4\u4eba\u4e0d\u5feb\u7684\u5e7f\u544a\uff0c\u4ed6\u4eec\u5c06\u88ab\u7981\u6b62\u3002\n\u8c37\u6b4c\u5bf9\u8ddf\u8e2a\u8f6f\u4ef6\u5e7f\u544a\u7684\u6253\u51fb\u662f\u5728\u53cd\u75c5\u6bd2\u884c\u4e1a\u8054\u5408\u8d77\u6765\uff0c\u5728\u4ed6\u4eec\u7684\u75c5\u6bd2\u626b\u63cf\u5f15\u64ce\u4e2d\u589e\u52a0\u5bf9\u8ddf\u8e2a\u8f6f\u4ef6\u4ea7\u54c1\u7684\u68c0\u6d4b\u4e4b\u540e\u8fdb\u884c\u7684\u3002\n\u5728\u6539\u8fdb\u4e86\u81ea\u5df1\u7684\u4ea7\u54c1\u540e\uff0c\u53cd\u75c5\u6bd2\u516c\u53f8\u4e0e\u51e0\u4e2a\u5bb6\u5ead\u66b4\u529b\u524d\u7ebf\u7ec4\u7ec7\u8fd8\u4e8e2019\u5e7411\u6708\u6210\u7acb\u4e86\u53cd\u6f5c\u4f0f\u8f6f\u4ef6\u8054\u76df\uff0c\u8fd9\u662f\u6b64\u7c7b\u884c\u52a8\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5168\u7403\u5021\u8bae\uff0c\u65e8\u5728\u63d0\u9ad8\u4eba\u4eec\u5bf9\u8ddf\u8e2a\u8f6f\u4ef6\u65e5\u76ca\u589e\u957f\u7684\u5a01\u80c1\u7684\u8ba4\u8bc6\u3002\u5728\u6b64\u57fa\u7840\u4e0a\uff0c\u53cd\u75c5\u6bd2\u516c\u53f8\u4e8e2019\u5e7411\u6708\u6210\u7acb\u4e86\u53cd\u6f5c\u4f0f\u8f6f\u4ef6\u8054\u76df\uff0c\u8fd9\u662f\u6b64\u7c7b\u5021\u8bae\u4e2d\u7684\u7b2c\u4e00\u4e2a\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u4eba\u4eec\u5bf9\u8ddf\u8e2a\u8f6f\u4ef6\u65e5\u76ca\u589e\u957f\u7684\u5a01\u80c1\u7684\u8ba4\u8bc6\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089\u8fd9\u4e9b\u672f\u8bed\u7684\u4eba\u6765\u8bf4\uff0c\u8ddf\u8e2a\u8f6f\u4ef6\u662f\u6076\u610f\u8f6f\u4ef6\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u662f\u66f4\u5927\u7684\u95f4\u8c0d\u8f6f\u4ef6\u7c7b\u522b\u7684\u4e00\u90e8\u5206\u3002\nStalkerware\u6307\u7684\u662f\u4e13\u95e8\u4e3a\u592b\u5987\u8bbe\u8ba1\u7684\u95f4\u8c0d\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\uff0c\u65bd\u8650\u7684\u4f34\u4fa3\u5728\u4ed6\u4eec\u4e0d\u77e5\u60c5\u6216\u672a\u7ecf\u4ed6\u4eec\u540c\u610f\u7684\u60c5\u51b5\u4e0b\u5b89\u88c5\u5728\u4ed6\u4eec\u6240\u7231\u7684\u4eba\u7684\u8bbe\u5907\u4e0a-\u56e0\u6b64\u8ddf\u8e2a\u8f6f\u4ef6\u6709\u65f6\u4e5f\u88ab\u79f0\u4e3aSpouware\u3002\n\u5728\u8fc7\u53bb\u7684\u5341\u5e74\u91cc\uff0c\u7531\u4e8e\u79fb\u52a8\u667a\u80fd\u624b\u673a\u7684\u6fc0\u589e\uff0cStalkerware\u7684\u4f7f\u7528\u6fc0\u589e\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u5ac9\u5992\u7684\u4f34\u4fa3\u4ec5\u901a\u8fc7\u8ddf\u8e2a\u4ed6\u4eec\u7684\u624b\u673a\u5c31\u53ef\u4ee5\u968f\u65f6\u76d1\u89c6\u4ed6\u4eec\u7684\u4f34\u4fa3\u3002\n\u6b64\u5916\uff0c\u5728\u5b98\u65b9\u5e94\u7528\u5546\u5e97\u4e0a\u968f\u624b\u53ef\u5f97\u7684\u8ddf\u8e2a\u5668\u4ea7\u54c1\u4e5f\u63d0\u9ad8\u4e86\u8fd9\u4e9b\u4ea7\u54c1\u7684\u77e5\u540d\u5ea6\uff0c\u5e76\u5411\u6570\u767e\u4e07\u6f5c\u5728\u7528\u6237\u5f00\u653e\u4e86\u89e6\u89d2\u3002\n\u867d\u7136\u8c37\u6b4c\u3001\u82f9\u679c\u3001\u53cd\u75c5\u6bd2\u5236\u9020\u5546\u548c\u8054\u90a6\u8d38\u6613\u59d4\u5458\u4f1a\u5df2\u7ecf\u53d6\u7f14\u4e86\u5176\u4e2d\u7684\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u5b83\u4eec\u5e76\u6ca1\u6709\u4e00\u53bb\u4e0d\u590d\u8fd4\uff0c\u5b9e\u9645\u4e0a\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u53d7\u6b22\u8fce\u3002\n\u6839\u636e\u6740\u6bd2\u8f6f\u4ef6\u4f9b\u5e94\u5546\u5361\u5df4\u65af\u57fa\u6536\u96c6\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5728Android\u8bbe\u5907\u4e0a\u5b89\u88c5\u4e86\u7c7b\u4f3c\u8ddf\u8e2a\u8f6f\u4ef6\u7684\u5e94\u7528\u7684\u7528\u6237\u6570\u91cf\u4ece2018\u5e74\u68c0\u6d4b\u5230\u768440,386\u53f0\u8bbe\u5907\u589e\u52a0\u52302019\u5e74\u768467,500\u591a\u53f0\u3002\n\u597d\u6d88\u606f\u662f\uff0c\u6839\u636e\u72ec\u7acb\u7684\u53cd\u75c5\u6bd2\u6d4b\u8bd5\u5b9e\u9a8c\u5ba4AV-Compallations\u548c\u7535\u5b50\u524d\u6cbf\u57fa\u91d1\u4f1a(Electronic Frontier Foundation)\u7684\u6570\u636e\uff0cAndroid\u548cWindows\u8bbe\u5907\u4e0a\u7684\u8ddf\u8e2a\u8f6f\u4ef6\u5e94\u7528\u7a0b\u5e8f\u7684\u68c0\u6d4b\u7387\u5df2\u7ecf\u6162\u6162\u63d0\u9ad8\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u95ee\u9898\u5f97\u5230\u4e86\u66f4\u591a\u7684\u5a92\u4f53\u62a5\u9053\uff0c\u5b89\u5168\u4f9b\u5e94\u5546\u6b63\u5728\u91c7\u53d6\u884c\u52a8\uff0c\u4ee5\u89e3\u51b3\u4ed6\u4eec\u65e5\u76ca\u589e\u957f\u7684\u98ce\u9669\u3002\n\u901a\u8fc7\u9650\u5236\u8ddf\u8e2a\u8f6f\u4ef6\u4ea7\u54c1\u5728\u5176\u5e7f\u544a\u5e73\u53f0\u4e0a\u7684\u53ef\u89c1\u5ea6\uff0c\u8c37\u6b4c\u5e2e\u52a9\u83b7\u5f97\u4e86\u8fd9\u4e9b\u6076\u610f\u5e94\u7528\u7a0b\u5e8f\u5728\u5176\u7f51\u7ad9\u4e0a\u83b7\u5f97\u7684\u90e8\u5206\u6d41\u91cf\u3002", "note_en": "Google announced plans this week to ban ads that promote stalkerware, spyware, and other forms of surveillance technology that can be used to track other persons without their specific consent.\n The change was announced this week as part of an  upcoming update to Google Ads policies, set to enter into effect next month, on August 11, 2020.\n Examples of products and services that advertisers won&#39;t be able to promote via Google Ads anymore include:\n Spyware and technology used for intimate partner surveillance including but not limited to spyware/malware that can be used to monitor texts, phone calls, or browsing history;\n  Promotion of surveillance equipment (cameras, audio recorders, dash cams, nanny cams) marketed with the express purpose of spying.\n Google said that private investigation services or products designed for parents to track or monitor their underage children are not banned under this new policy and will still be allowed to be advertised on its platform.\n Offenders who promote stalkerware will receive a seven-day warning, after which they&#39;ll be banned if they don&#39;t remove the offending ads.\n    Google&#39;s crackdown against stalkerware ads comes after the antivirus industry has banded together to add detections for stalkerware products in their virus scanning engines.\n After improving their products, antivirus companies, along with several domestic abuse frontline organizations, also founded the &#39; Coalition Against Stalkerware&#39; in November 2019, as the first global initiative of its kind, set up to raise awareness of the growing threat of stalkerware.\n   For those unfamiliar with the terms, stalkerware is a form of malware that is part of the larger spyware class.\n Stalkerware refers to spyware apps specifically designed for couples that abusive partners install on the devices of their loved ones without their knowledge or consent -- hence why stalkerware is also sometimes referred to as spouseware.\n Stalkerware use has skyrocketed over the last decade due to the proliferation of mobile smartphones, as it allows jealous partners to keep tabs on their partners at all time just by tracking their phone.\n Furthermore, the easy availability of stalkerware products on official app stores has also increased the visibility of these products and opened their reach to millions of potential users.\n While Google, Apple, antivirus makers, and the FTC have cracked down on some of these apps, they have not gone away for good, but are actually more popular than ever.\n According to statistics gathered by antivirus vendor Kaspersky, the number of users who had stalkerware-like apps installed on their Android devices rose from 40,386 devices detected in 2018  to more than 67,500 in 2019.\n The good news is that according to independent antivirus testing lab AV-Comparatives and the Electronic Frontier Foundation, detections rates for stalkerware applications on Android and Windows devices  have slowly improved, as the issue is gaining more press coverage and security vendors are moving in to address their growing risk.\n By limiting the visibility of stalkerware products on its advertising platform, Google has helped take some of the traffic these malicious apps are getting on their sites.", "posttime": "2020-07-11 06:50:01", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "google,\u8c37\u6b4c,\u5e7f\u544a,\u7981\u6b62,bans", "title": "\u8c37\u6b4c\u7981\u6b62Stalkerware\u5e7f\u544a", "title_en": "Google Bans Stalkerware Ads", "transed": 1, "url": "https://www.zdnet.com/article/google-bans-stalkerware-ads/", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u5e7f\u544a", "\u7981\u6b62", "bans"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1011109, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6e90\u4e8e\u6700\u8fd1GNU glibc\u5728\u82f1\u7279\u5c14\u548cAMD\u4ea7\u54c1\u5bb6\u65cf\u4e2d\u4f7f\u7528\u66f4\u65b0\u7684\u6307\u4ee4\u96c6\u6269\u5c55\u66f4\u597d\u5730\u5904\u7406\u73b0\u4ee3CPU\u4f18\u5316\u7684\u5de5\u4f5c\uff0c\u5f00\u6e90/Linux\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u8c08\u8bbax86-64\u5fae\u4f53\u7cfb\u7ed3\u6784\u529f\u80fd\u7ea7\u522b\u7684\u6982\u5ff5\u3002\u8fd9\u4e9b\u529f\u80fd\u7ea7\u522b\u7684\u60f3\u6cd5\u662f\u5c06\u57fa\u672cx86_64\u4ee5\u5916\u7684\u53d7\u652f\u6301\u6307\u4ee4\u5206\u89e3\u4e3aIntel\u548cAMD\u5904\u7406\u5668\u5728\u5408\u7406\u65f6\u95f4\u652f\u6301\u7684\u6307\u4ee4\u3002\u867d\u7136\u8f83\u65b0\u7684Intel/AMD CPU\u901a\u5e38\u652f\u6301\u66f4\u591a\u7684\u6307\u4ee4\u96c6\u6269\u5c55\uff0c\u4f46\u8003\u8651\u5230\u73b0\u4ee3Intel Atom CPU\u53ea\u652f\u6301Core\u548cXeon CPU\u652f\u6301\u7684\u6269\u5c55\u5b50\u96c6\uff0c\u5f53\u524dx86_64 CPU\u529f\u80fd\u7684\u5904\u7406\u6d89\u53ca\u5176\u4ed6\u4ee4\u4eba\u5934\u75bc\u7684\u95ee\u9898\uff0c\u56e0\u6b64Red Hat\u5f00\u53d1\u4eba\u5458\u6b63\u5728\u8ba8\u8bba\u8fd9\u4e9b\u5408\u7406\u5408\u7406\u7684\u529f\u80fd\u7ea7\u522b\uff0c\u82f1\u7279\u5c14\u548cAMD\u5de5\u7a0b\u5e08\u6b63\u5728\u8ba8\u8bba\u8fd9\u4e9b\u529f\u80fd\u7ea7\u522b\u3002\u6709\u4e86\u8fd9\u4e9b\u529f\u80fd\u7ea7\u522b\uff0c\u5b83\u5c06\u5141\u8bb8\u66f4\u597d\u5730\u9694\u79bb\u4e0d\u540c\u7c7b\u522b\u7684x86_64 Intel/AMD CPU\uff0c\u5e76\u4f7fLinux\u53d1\u884c\u7248\u66f4\u5bb9\u6613\u4e3a\u5176x86_64\u6620\u50cf\u63d0\u4f9b\u4e0d\u540c\u7ea7\u522b\u7684\u652f\u6301\u6216\u57fa\u672c\u8981\u6c42\u3002\u8be5\u63d0\u6848\u662f\u7531\u7ea2\u5e3d\u7684\u5f17\u6d1b\u91cc\u5b89\u00b7\u97e6\u9ed8\u4eca\u5929\u53d1\u51fa\u7684\uff0c\u4ed6\u6b63\u81f4\u529b\u4e8eGlibc HWCAPS\u7684\u5de5\u4f5c\uff0c\u4f5c\u4e3a\u66f4\u597d\u5730\u5141\u8bb8AMD\u7985\u5b97\u4f18\u5316\u7684\u4e00\u90e8\u5206\u3002\u5c31Red Hat\u800c\u8a00\uff0c\u4ed6\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u63d0\u9ad8Fedora\u7684\u57fa\u672cCPU\u8981\u6c42\uff0c\u5e76\u8ba1\u5212\u5728Red Hat Enterprise Linux9\u4e2d\u653e\u5f03\u65e7\u7684CPU\u652f\u6301\u3002\u5bf9\u4e8eRHEL9\uff0c\u4ed6\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86\u652f\u6301AVX2 CPU\u7684\u4e00\u4e2a\u53ef\u80fd\u7684\u57fa\u672c\u8981\u6c42\uff0c\u4f46\u4f3c\u4e4e\u8fd8\u6ca1\u6709\u4e00\u6210\u4e0d\u53d8\u7684\u4e1c\u897f\u3002\u76ee\u524d\uff0cx86_64\u7684\u8fd9\u4e9b\u4e0d\u540c\u7279\u5f81\u7ea7\u522b\u88ab\u63d0\u51fa\u4e3a\uff1a\u7ea7\u522bA-CMPXCHG16B\u3001LAHF/SAHF\u3001POPCNT\u3001SSE3\u3001SSE4.1\u3001SSE4.2\u3001SSSE3\u3002\u4ec5\u7565\u9ad8\u4e8e\u57fa\u672cx86_64\u8981\u6c42\u3002B\u7ea7-A\u7ea7+AVX\u3002\u82f1\u7279\u5c14\u6851\u8fea\u6865(Intel Sandy Bridge)\u548cAMD\u6377\u8c79(AMD Jaguar)\u7684\u5e74\u4efd\u3002C\u7ea7-B\u7ea7+AVX2\u3001BMI1\u3001BMI2\u3001F16C\u3001FMA\u3001LZCNT\u3001MOVBE\u3002\u5927\u4f53\u4e0a\u662f\u82f1\u7279\u5c14\u54c8\u65af\u97e6\u5c14\u65f6\u4ee3\u7684\u7cfb\u7edf\u3002D\u7ea7-C\u7ea7+AVX512F\u3001AVX512BW\u3001AVX512CD\u3001AVX512DQ\u3001AVX512VL\u3002\u5728\u8fd9\u4e2a\u9636\u6bb5\uff0c\u4ee5AVX-512\u4e3a\u91cd\u70b9\uff0c\u53ea\u9700\u5f53\u524d\u7684\u82f1\u7279\u5c14\u81f3\u5f3a\u53ef\u6269\u5c55CPU\u548c\u51b0\u6e56\u3002\u663e\u7136\uff0c\u5728\u672a\u6765\u51e0\u4ee3CPU\u4e2d\uff0c\u5728x86-64\u7ea7\u522b\u6982\u5ff5\u7684\u57fa\u7840\u4e0a\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5f15\u5165\u989d\u5916\u7684\u7ea7\u522b\u3002\u5982\u679c\u5bf9x86_64\u7ea7\u522b\u7684\u65b9\u6cd5\u8fbe\u6210\u4e00\u81f4\uff0c\u5e76\u8fbe\u6210\u4e00\u4e9b\u5171\u8bc6\uff0cGNU\u548cLLVM\u53ef\u4ee5\u5f00\u59cb\u68c0\u6d4b\u5b83\u4eec\u7684\u5e93\u5904\u7406\uff0c\u4ee5\u9996\u5148\u68c0\u67e5\u6700\u4f18\u5316\u7684\u529f\u80fd\u7ea7\u522b\uff0c\u8fd4\u56de\u5230\u6700\u57fa\u672c/\u6700\u65e7\u7684\u7ea7\u522b\uff0c\u76f4\u5230\u4e0e\u4e3b\u673aCPU\u5339\u914d\u3002\u4ece\u90a3\u91cc\uff0c\u5f53\u52a8\u6001\u52a0\u8f7d\u5e93\u5e76\u4e14\u5b58\u5728\u6240\u8ff0\u5e93\u7684\u591a\u4e2a\u7248\u672c\u65f6\uff0c\u5b83\u5c06\u5c1d\u8bd5\u52a0\u8f7d\u6700\u53d7\u652f\u6301\u7684\u7248\u672c\uff0c\u4ee5\u4fbf\u4ee5\u6700\u4f73\u6027\u80fd\u4e3a\u76ee\u6807\u3002\u8003\u8651\u5230\u82f1\u7279\u5c14\u548cAMD\u7684\u4f17\u591a\u4e0d\u540cCPU\u7cfb\u5217/\u4ee3\u90fd\u6709\u66f4\u5408\u7406\u7684\u5e93/\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b50\u96c6\u9700\u8981\u7ba1\u7406\uff0c\u8fd9\u79cd\u7ea7\u522b\u65b9\u6cd5\u4f7f\u4e8b\u60c5\u53d8\u5f97\u7b80\u5355\u5f97\u591a\u3002\u6216\u8005\uff0c\u524d\u9762\u63d0\u5230\u7684\u8fd9\u4e9b\u7ea7\u522b\u53ef\u4ee5\u7528\u4e8eLinux\u53d1\u884c\u7248\uff0c\u4f7f\u5176\u57fa\u672c\u8981\u6c42\u8d85\u8d8a\u4f20\u7edf\u7684x86_64\u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u591a\u4e2a\u4e0d\u540c\u9879\u76ee\u7684\u90ae\u4ef6\u5217\u8868\u4e0a\u5217\u51fa\u8bd5\u63a2\u6027\u7684\u60f3\u6cd5\uff0c\u770b\u770b\u8ba8\u8bba\u5c06\u8d70\u5411\u4f55\u65b9\uff0c\u8fd9\u5c06\u662f\u4e00\u4ef6\u5f88\u6709\u8da3\u7684\u4e8b\u60c5\u3002", "note_en": "Stemming from the recent GNU glibc work on  better handling modern CPU optimizations with newer instruction set extensions across Intel and AMD product families, the concept of x86-64 micro-architecture feature levels is being talked about by open-source/Linux developers.\r   The idea of these feature levels is breaking up the supported instructions beyond base x86_64 into that of what is supported at reasonable times by both Intel and AMD processors. While newer Intel/AMD CPUs generally support more instruction set extensions, there are other headaches involved in the current handling of x86_64 CPU capabilities considering the likes of modern Intel Atom CPUs only supporting a sub-set of the extensions supported by Core and Xeon CPUs, thus coming up with these reasonably sane feature levels is being talked about by Red Hat developers with input from Intel and AMD engineers.\r   With having these feature levels, it would allow better segregating different classes of x86_64 Intel/AMD CPUs and make it easier for Linux distributions to offer different levels of support or base requirements for their x86_64 images. The proposal was sent out today by Red Hat&#39;s Florian Weimer who is working on the glibc HWCAPS work as part of better allowing AMD Zen optimizations. For Red Hat&#39;s part, they have discussed raising the base CPU requirements in Fedora and  planning to drop old CPU support in Red Hat Enterprise Linux 9. For RHEL9 it&#39;s been talked about of a possible base requirement of having AVX2 CPU support, but nothing appears set in stone yet.\r   These different feature levels for x86_64 at the current time are being proposed as:\r    Level A - CMPXCHG16B, LAHF/SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3. Barely going above the base x86_64 requirements.\r    Level B - Level A + AVX. The vintage of Intel Sandy Bridge and AMD Jaguar.\r    Level C - Level B + AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE. The point of roughly Intel Haswell era systems.\r    Level D - Level C + AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL. At this stage with the AVX-512 focus, just current Intel Xeon Scalable CPUs and Ice Lake.\r   Obviously moving forward into future CPU generations, additional levels could be easily introduced in building off this x86-64 level concept.\r   If this x86_64 level approach agreed upon and some consensus reached, GNU and LLVM could begin plumbing their library handling to first check for the most optimized feature level going back to the most basic / oldest until matching to the host CPU. From there when dynamically loading libraries and there being multiple builds of said library, it would attempt to load the best supported version in order to aim for the best performance. This level approach makes things much simpler considering otherwise the multitude of different CPU families/generations from both Intel and AMD to have a more reasonable subset of libraries/binaries to manage. Or these levels as mentioned earlier could be used for Linux distributions to up their base requirements beyond conventional x86_64.\r   It will be interesting to see where the discussion leads while for now the tentative idea is laid out on  the mailing list across multiple different projects.", "posttime": "2020-07-11 06:49:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u53ef\u80fd,pursue,\u7ea7\u522b", "title": "Linux\u53ef\u80fd\u8ffd\u6c42x86_64\u5fae\u4f53\u7cfb\u7ed3\u6784\u529f\u80fd\u7ea7\u522b", "title_en": "Linux Might Pursue x86_64 Micro-Architecture Feature Levels", "transed": 1, "url": "https://www.phoronix.com/scan.php?page=news_item&px=Linux-x86-64-Feature-Levels", "via": "", "real_tags": ["linux", "\u53ef\u80fd", "pursue", "\u7ea7\u522b"]}, {"category": "", "categoryclass": "", "imagename": "0c68ac7b42db9128a0dea8457a8768d5.png", "infoid": 1011108, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "HAProxy\u8fdb\u7a0b\u7ba1\u7406\u5668\u5141\u8bb8\u60a8\u542f\u52a8\u7531HAProxy\u7ba1\u7406\u7684\u5916\u90e8\u7a0b\u5e8f\u3002\n\u5e76\u4e0d\u662f\u6240\u6709\u7684\u4e1c\u897f\u90fd\u76f4\u63a5\u7f16\u8bd1\u6210HAProxy\u7684C\u4ee3\u7801\u3002\u6709\u4e9b\u7ec4\u4ef6\u662f\u4f7f\u7528\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4e0e\u8d1f\u8f7d\u5747\u8861\u5668\u4e00\u8d77\u8fd0\u884c\u3002\u8fd9\u4e9b\u7ec4\u4ef6\u53ef\u4ee5\u5305\u62ec\u4f7f\u7528HAProxy\u7684\u6d41\u5904\u7406\u5378\u8f7d\u5f15\u64ce(SPOe)\u6784\u5efa\u7684\u4ee3\u7406-SPOe\u5141\u8bb8\u591a\u8bed\u8a00\u6269\u5c55\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u6269\u5c55HAProxy-\u4ee5\u53ca\u5b88\u62a4\u8fdb\u7a0b\uff0c\u5982\u7528Go\u7f16\u5199\u7684HAProxy\u6570\u636e\u5e73\u9762API\u3002\u60a8\u77e5\u9053HAProxy\u6709\u4e00\u4e2a\u529f\u80fd\u53ef\u4ee5\u8ba9\u5b83\u542f\u52a8\u3001\u505c\u6b62\u548c\u91cd\u65b0\u52a0\u8f7d\u8fd9\u4e9b\u7ec4\u4ef6\u5417\uff1f\u5b83\u53ef\u4ee5\u5728\u5b83\u81ea\u5df1\u7684\u4e3b\u8fdb\u7a0b\u4e0b\u5c06\u5b83\u4eec\u4f5c\u4e3a\u5de5\u4f5c\u8005\u6258\u7ba1\uff0c\u5c06\u5b83\u4eec\u7684\u751f\u547d\u5468\u671f\u4e0e\u5b83\u81ea\u5df1\u7684\u8fde\u63a5\u8d77\u6765\u3002\u5728\u6211\u4eec\u5f00\u59cb\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u5982\u4f55\u5c06HAProxy\u914d\u7f6e\u4e3a\u670d\u52a1\u3002\n\u5f53\u60a8\u4f7f\u7528-W\u53c2\u6570\u542f\u52a8HAProxy\u65f6(\u5982\u679c\u5c06\u5176\u4f5c\u4e3aSystemd\u4e0b\u7684\u670d\u52a1\u8fd0\u884c\uff0c\u5219\u4f7f\u7528-Ws)\uff0c\u5b83\u4f1a\u542f\u7528\u4e3b-\u4ece\u6a21\u5f0f\u3002\u4e3b-\u5de5\u4f5c\u8fdb\u7a0b\u6a21\u5f0f\u542f\u52a8\u4e00\u4e2a\u4e3b\u8fdb\u7a0b\u53ca\u5176\u4e0b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u4ece\u800c\u53ef\u4ee5\u5728\u591a\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u4e4b\u95f4\u5206\u914dHAProxy\u7684\u804c\u8d23\uff0c\u540c\u65f6\u516c\u5f00\u5355\u4e2a\u901a\u4fe1\u7aef\u70b9-\u4e3b\u8fdb\u7a0b-\u7528\u4e8e\u4e0e\u8d1f\u8f7d\u5e73\u8861\u5668\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8fdb\u884c\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5411\u4e3b\u8fdb\u7a0b\u53d1\u9001\u91cd\u65b0\u52a0\u8f7d\u547d\u4ee4\uff0c\u5b83\u5c06\u91cd\u65b0\u521b\u5efa\u5de5\u4f5c\u8fdb\u7a0b\u3002\u8fd9\u79cd\u8bbe\u8ba1\u975e\u5e38\u9002\u5408\u5728\u50cfSystemd\u8fd9\u6837\u7684\u73b0\u4ee3\u670d\u52a1\u7ba1\u7406\u5668\u4e0b\u6258\u7ba1HAProxy\u3002\n\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cUbuntu\u6216Debian\u7684\u7cfb\u7edf\u5305\u5c06-ws\u53c2\u6570\u6dfb\u52a0\u5230Systemd\u5355\u5143\u6587\u4ef6\u3002\u542f\u52a8HAProxy\u540e\uff0c\u68c0\u67e5\u5176\u72b6\u6001\uff0c\u60a8\u4f1a\u53d1\u73b0\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u5217\u8868\uff1a\u4e00\u4e2a\u4e3b\u8fdb\u7a0b\u548c\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\uff1a\n\u5728\u6b64\u6a21\u578b\u4e2d\uff0c\u91cd\u65b0\u52a0\u8f7d\u5728\u4f53\u7cfb\u7ed3\u6784\u4e0a\u66f4\u7b80\u5355\uff1b\u66f4\u6539HAProxy\u914d\u7f6e\uff0c\u7136\u540e\u4f7f\u7528systemctl reload haproxy\u89e6\u53d1\u91cd\u65b0\u52a0\u8f7d\u3002\u4e3b\u8fdb\u7a0b\u5c06\u521b\u5efa\u4e00\u4e2a\u65b0\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u5411\u5176\u53d1\u9001\u65b0\u914d\u7f6e\uff0c\u7136\u540e\u6b63\u5e38\u5173\u95ed\u65e7\u5de5\u4f5c\u8fdb\u7a0b\u3002\u5f53\u60a8\u89c2\u770bWilliam Lallemand\u7684\u6f14\u793aHAProxy process Management\u65f6\uff0c\u60a8\u5c06\u66f4\u591a\u5730\u4e86\u89e3\u4e3b-\u5de5\u4eba\u6a21\u578b\u80cc\u540e\u7684\u57fa\u672c\u539f\u7406\u3002William Lallemand\u662fHAProxy\u7684\u6838\u5fc3\u5de5\u7a0b\u5e08\u4e4b\u4e00\uff0c\u4ed6\u63cf\u8ff0\u4e86\u4e0eHAProxy\u76f8\u5173\u7684\u8fc7\u7a0b\u7ba1\u7406\u7684\u5386\u53f2\u3002\n\u4e3b-\u5de5\u4f5c\u8005\u6a21\u578b\u7b80\u5316\u4e86\u5bf9HAProxy\u6b63\u5728\u8fd0\u884c\u7684\u8fdb\u7a0b\u7684\u7ba1\u7406\uff0c\u4f46\u5b83\u4e5f\u4e3aHAProxy 2.0\u4e2d\u5f15\u5165\u7684\u4e00\u4e2a\u65b0\u529f\u80fd\u6253\u5f00\u4e86\u5927\u95e8\uff1aHAProxy\u8fdb\u7a0b\u7ba1\u7406\u5668\u3002\u8fdb\u7a0b\u7ba1\u7406\u5668\u5141\u8bb8\u60a8\u914d\u7f6e\u4f7f\u7528HAProxy\u542f\u52a8\u548c\u505c\u6b62\u5e76\u7531HAProxy\u4e3b\u8fdb\u7a0b\u63a7\u5236\u7684\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u3002\n\u60a8\u53ef\u4ee5\u5c06\u5e94\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u4e3a\u5728HAProxy\u542f\u52a8\u65f6\u8fd0\u884c\uff0c\u65b9\u6cd5\u662f\u5411HAProxy\u914d\u7f6e\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7a0b\u5e8f\u8282\u3002\u6211\u4eec\u7ecf\u5e38\u4f7f\u7528\u5b83\u6765\u542f\u52a8\u6570\u636e\u5e73\u9762API\uff0c\u8fd9\u662f\u7528\u4e8e\u5728\u8fd0\u884c\u65f6\u914d\u7f6eHAProxy\u7684HTTP RESTful\u670d\u52a1\u3002API\u662f\u5728HAProxy\u5916\u90e8\u8fd0\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u56e0\u6b64\u901a\u8fc7\u4f7f\u7528\u8fdb\u7a0b\u7ba1\u7406\u5668\uff0c\u6211\u4eec\u4e0d\u9700\u8981\u5b89\u88c5Systemd\u5355\u5143\u6587\u4ef6\u6765\u63a7\u5236\u5176\u751f\u5b58\u671f\u3002\u5f53HAProxy\u542f\u52a8\u65f6\uff0cAPI\u4e5f\u4f1a\u542f\u52a8\u3002\n\u4e0b\u9762\u7684\u793a\u4f8b\u663e\u793a\u4e86\u5982\u4f55\u4f7f\u7528\u8fdb\u7a0b\u7ba1\u7406\u5668\u8fd0\u884cHAProxy\u6570\u636e\u5e73\u9762API\uff1a\n\u547d\u4ee4\u6307\u4ee4\u5c06\u7a0b\u5e8f\u8bbe\u7f6e\u4e3a\u8fd0\u884c\uff0c\u5e76\u4e14\u53ef\u4ee5\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\uff0c\u8fd9\u4e9b\u53c2\u6570\u5c06\u88ab\u4f20\u9012\u7ed9\u5916\u90e8\u7a0b\u5e8f\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4e0d\u60f3\u5728\u6bcf\u6b21\u91cd\u65b0\u52a0\u8f7dHAProxy\u65f6\u505c\u6b62\u5e76\u91cd\u65b0\u521b\u5efaAPI-API\u5c06\u5728\u4e0d\u540c\u65f6\u95f4\u91cd\u65b0\u52a0\u8f7dHAProxy\u4ee5\u7ba1\u7406\u5176\u914d\u7f6e-\u56e0\u6b64\u6211\u4eec\u5305\u542bno option start-on-reload\u6307\u4ee4\u3002\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5982\u679c\u6bcf\u6b21\u90fd\u91cd\u65b0\u521b\u5efa\uff0c\u6548\u679c\u4f1a\u66f4\u597d\uff0c\u5e76\u4e14\u4e0d\u4f1a\u4f7f\u7528\u6b64\u6307\u4ee4\uff0c\u4f8b\u5982\u6d41\u5904\u7406\u5378\u8f7d\u4ee3\u7406(SPOA)\uff0c\u5176\u914d\u7f6e\u4f1a\u52a0\u8f7d\u5230HAProxy\u4e2d\u3002\n\u6839\u636e\u9700\u8981\u6dfb\u52a0\u4efb\u610f\u6570\u91cf\u7684\u7a0b\u5e8f\u8282\u3002\u6bcf\u4e2a\u90fd\u5c06\u5305\u542b\u8981\u8fd0\u884c\u7684\u5355\u4e2a\u7a0b\u5e8f\u3002\u9664\u4e86\u5c06\u5176\u7528\u4e8e\u6570\u636e\u5e73\u9762API\u4e4b\u5916\uff0c\u5b83\u8fd8\u53ef\u4ee5\u65b9\u4fbf\u5730\u542f\u52a8SPOA\uff0cSPOA\u7528\u4e8e\u5c06\u8d1f\u8f7d\u5747\u8861\u5668\u6570\u636e\u6d41\u5f0f\u4f20\u8f93\u5230\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06HAProxy\u901a\u4fe1\u91cf\u8ddf\u8e2a\u4ee3\u7406\u5305\u62ec\u5728\u7a0b\u5e8f\u6bb5\u4e2d\u6765\u542f\u52a8\u5b83\uff0c\u5982\u4ee5\u4e0b\u4ee3\u7801\u7247\u65ad\u6240\u793a\uff1a\n\u6709\u5173\u6d41\u91cf\u8ddf\u8e2a\u4ee3\u7406\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6211\u4eec\u7684\u535a\u5ba2\u6587\u7ae0HAProxy Traffic Mirroring for Real-World Testing(\u7528\u4e8e\u771f\u5b9e\u4e16\u754c\u6d4b\u8bd5\u7684HAProxy\u6d41\u91cf\u955c\u50cf)\u3002\n\u542f\u52a8HAProxy\u65f6\uff0c\u6dfb\u52a0-S\u53c2\u6570\u4ee5\u516c\u5f00\u4e3bCLI\uff0c\u5b83\u662f\u7528\u4e8e\u4e0e\u5de5\u4f5c\u8fdb\u7a0b\u4ea4\u4e92\u7684\u63a5\u53e3\u3002\u5b83\u4f7f\u7528\u4ee5\u4e0b\u8bed\u6cd5\uff1a\n\u8fd9\u4e0eHAProxy\u8fd0\u884c\u65f6API\u4e0d\u540c\uff0cHAProxy\u8fd0\u884c\u65f6API\u65e8\u5728\u63a7\u5236HAProxy\u7684\u52a8\u6001\u7279\u6027\uff0c\u5982\u6761\u5f62\u8868\u548c\u6620\u5c04\u6587\u4ef6\uff1b\u8fd9\u91cc\u7ed9\u51fa\u7684\u547d\u4ee4\u96c6\u8f83\u5c11\uff0c\u4f46\u4e0e\u7ba1\u7406\u5de5\u4f5c\u8fdb\u7a0b\u76f8\u5173\u3002\u60a8\u5c06\u901a\u8fc7\u8c03\u7528Help\u547d\u4ee4\u627e\u5230\u6240\u6709\u53ef\u7528\u9009\u9879\uff1a\nHAProxy\u8fdb\u7a0b\u88ab\u5217\u4e3a\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u7a0b\u5e8f\u5355\u72ec\u5217\u51fa\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4e00\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\uff0c\u4f46\u662f\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u914d\u7f6e\u7684\u5168\u5c40\u90e8\u5206\u8bbe\u7f6enbproc\u6765\u63a7\u5236\u8fd9\u4e00\u70b9\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5c06nbproc\u8bbe\u7f6e\u4e3a3\uff0c\u5219\u5c06\u5217\u51fa\u4e09\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u3002\u4f7f\u7528nbproc\u521b\u5efa\u591a\u4e2aHAProxy\u5de5\u4f5c\u5668\u5141\u8bb8\u60a8\u5c06\u7279\u5b9a\u529f\u80fd(\u5982TLS\u7ec8\u6b62)\u56fa\u5b9a\u5230\u7279\u5b9a\u8fdb\u7a0b\uff0c\u4f46\u662f\u5728\u5355\u4e2a\u8fdb\u7a0b\u4e0a\u542f\u7528\u591a\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u5b9e\u73b0\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u5e76\u4e14\u66f4\u6613\u4e8e\u7ba1\u7406\u3002\u5728\u6211\u4eec\u7684\u535a\u5ba2\u6587\u7ae0\u201cHAProxy\u4e2d\u7684\u591a\u7ebf\u7a0b\u201d\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u591a\u8fdb\u7a0b\u548c\u591a\u7ebf\u7a0b\u4e4b\u95f4\u7684\u533a\u522b\u3002\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u5728\u547d\u4ee4\u524d\u9762\u52a0\u4e0a\u76f8\u5bf9PID\u6765\u9488\u5bf9\u5355\u4e2a\u5de5\u4f5c\u8fdb\u7a0b\u6267\u884c\u8fd0\u884c\u65f6API\u547d\u4ee4\u3002\u4f8b\u5982\uff0c\u4f7f\u7528@1\u5bf9\u7b2c\u4e00\u4e2aWorker\u8c03\u7528\u547d\u4ee4\uff1a\n\u5c3d\u7ba1\u60a8\u4e0d\u80fd\u4f7f\u7528\u6b64\u6280\u672f\u8c03\u7528\u9488\u5bf9\u975eHAProxy\u8fdb\u7a0b\u7684\u547d\u4ee4\uff0c\u4f8b\u5982\u6211\u4eec\u7684\u6570\u636e\u5e73\u9762API\u7a0b\u5e8f\uff0c\u4f46\u4ec5\u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u5217\u8868\u5e76\u77e5\u9053\u5b83\u4eec\u662f\u5426\u6309\u9884\u671f\u542f\u52a8\u5c31\u975e\u5e38\u6709\u7528\u3002\n\u591a\u5e74\u6765\uff0cHAProxy\u6d3e\u751f\u5de5\u4f5c\u8005\u7684\u65b9\u5f0f\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u53d8\u5f97\u66f4\u9002\u5408\u50cfSystemd\u8fd9\u6837\u7684\u73b0\u4ee3\u670d\u52a1\u7ba1\u7406\u5668\uff0c\u5e76\u4e3a\u50cfHAProxy Process Manager\u8fd9\u6837\u7684\u7279\u6027\u6253\u5f00\u4e86\u5927\u95e8\uff0cHAProxy Process Manager\u5141\u8bb8\u60a8\u8fd0\u884c\u4efb\u610f\u7a0b\u5e8f\u3002\u8fdb\u7a0b\u7ba1\u7406\u5668\u4f7f\u7528\u7b80\u5355\u7684\u914d\u7f6e\u8bed\u6cd5\uff0c\u5373PROGRAM\u90e8\u5206\uff0c\u53ef\u7528\u4e8e\u542f\u52a8\u652f\u6301HAProxy\u7684\u4efb\u610f\u6570\u91cf\u7684\u5916\u90e8\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83\u901a\u5e38\u7528\u4e8e\u542f\u52a8HAProxy\u6570\u636e\u5e73\u9762API\uff0c\u4f46\u5bf9\u4e8e\u8fd0\u884cSPOA(\u5982\u6d41\u91cf\u8ddf\u8e2a\u4ee3\u7406)\u4e5f\u5f88\u65b9\u4fbf\u3002\n\u60f3\u8981\u4e86\u89e3\u7c7b\u4f3c\u8bdd\u9898\u7684\u6700\u65b0\u52a8\u6001\u5417\uff1f\u8ba2\u9605\u8fd9\u4e2a\u535a\u5ba2\u5427\uff01\u60a8\u4e5f\u53ef\u4ee5\u5728Twitter\u4e0a\u5173\u6ce8\u6211\u4eec\uff0c\u5e76\u52a0\u5165Slake\u4e0a\u7684\u5bf9\u8bdd\u3002\nHAProxy Enterprise\u662f\u4e1a\u754c\u9886\u5148\u7684\u8f6f\u4ef6\u8d1f\u8f7d\u5747\u8861\u5668\u3002\u5b83\u652f\u6301\u5728\u4efb\u4f55\u89c4\u6a21\u3001\u4efb\u4f55\u73af\u5883\u4e2d\u4ea4\u4ed8\u73b0\u4ee3\u5e94\u7528\u7a0b\u5e8f\uff0c\u63d0\u4f9b\u6700\u9ad8\u7684\u6027\u80fd\u3001\u53ef\u89c2\u5bdf\u6027\u548c\u5b89\u5168\u6027\u3002\u5728\u6743\u5a01\u4e13\u5bb6\u652f\u6301\u548c\u4e13\u4e1a\u670d\u52a1\u7684\u652f\u6301\u4e0b\uff0c\u5404\u7ec4\u7ec7\u5229\u7528\u5176\u5c16\u7aef\u529f\u80fd\u548c\u4f01\u4e1a\u9644\u52a0\u7ec4\u4ef6\u5957\u4ef6\u3002\u51c6\u5907\u597d\u4e86\u89e3\u66f4\u591a\u4fe1\u606f\u4e86\u5417\uff1f\u8054\u7cfb\u6211\u4eec\uff0c\u6ce8\u518c\u514d\u8d39\u8bd5\u7528\uff01", "note_en": "The HAProxy Process Manager allows you to start external programs that are managed under HAProxy.\n Not everything is compiled directly into HAProxy\u2019s C code. Some components are written using other programming languages and run alongside the load balancer. These components can include agents built using  HAProxy\u2019s Stream Processing Offload Engine (SPOE)\u2014SPOE allows  polyglot extensibility, which is to say extending HAProxy with any programming language\u2014and daemons such as the HAProxy Data Plane API, which is written in Go. Did you know that HAProxy has a feature that lets it start, stop and reload these components? It can host them as workers under its own main process, connecting their lifetimes with its own. Before we get to that, let\u2019s see how to configure HAProxy as a service.\n When you start HAProxy with the  -W argument (or  -Ws if running it as a service under Systemd), it enables  master-worker mode. Master-worker mode spins up a main process and one or more worker processes under it, making it possible to spread HAProxy\u2019s duties among several workers, while exposing a single communication endpoint\u2014the master process\u2014for interacting with the load balancer as a whole. For example, you can send a reload command to the master process and it will recreate the workers. This design is ideal for hosting HAProxy under a modern service manager like Systemd.\n The  system packages for Ubuntu or Debian add the  -Ws argument by default to the Systemd unit file. After starting HAProxy, check its status and you\u2019ll find a list of running processes: one master and one worker:\n  In this model, reloads are architecturally simpler; Make a change to your HAProxy configuration and then trigger a reload with  systemctl reload haproxy. The master process will create a new worker, send it the new configuration, and then gracefully shutdown the old worker. You\u2019ll learn more about the rationale behind the master-worker model when you watch William Lallemand\u2019s presentation,  HAProxy Process Management. William Lallemand is one of the core HAProxy engineers and he describes the history of process management as it relates to HAProxy.\n The master-worker model simplifies the management of HAProxy\u2019s running processes, but it also opened the door to a new feature that was introduced in HAProxy 2.0: the HAProxy Process Manager. The Process Manager lets you configure external applications that start and stop with HAProxy and are controlled by the HAProxy master process.\n  You can set an application to run when HAProxy starts by adding a  program section to your HAProxy configuration. We often use this to start the Data Plane API, which is the HTTP RESTful service for configuring HAProxy at runtime. The API is a binary that runs outside of HAProxy, so by using the Process Manager, we don\u2019t need to install a Systemd unit file to control its lifetime. When HAProxy starts, so will the API.\n Here\u2019s an example that shows how to run the HAProxy Data Plane API using the Process Manager:\n  The  command directive sets the program to run and can take any number of parameters, which will be passed to the external program. Here, we do not want to stop and recreate the API whenever HAProxy reloads\u2014the API will be reloading HAProxy at various times to manage its configuration\u2014so we include the  no option start-on-reload directive. Other applications do better if recreated each time and wouldn\u2019t use this directive, such as Stream Processing Offload Agents (SPOAs) whose configuration gets loaded into HAProxy.\n Add as many  program sections as you need. Each will contain a single program to run. Besides using it for the Data Plane API, it\u2019s convenient for launching SPOAs, which are used to stream load balancer data to external applications. For example, you can start the HAProxy Traffic Shadowing agent by including it in a program section, as shown in the following snippet:\n  Learn more about the Traffic Shadowing agent in our blog post  HAProxy Traffic Mirroring for Real-World Testing.\n  When you start HAProxy, add the  -S argument to expose the  Master CLI, which is an interface for interacting with worker processes. It uses the following syntax:\n  This is different from the  HAProxy Runtime API, which aims to control HAProxy\u2019s dynamic features, such as stick tables and map files; Here, you\u2019re given a smaller set of commands, but relevant for managing worker processes. You\u2019ll find all of the available options by invoking the  help command:\n    The HAProxy processes are listed as  workers, with  programs listed separately. By default, there\u2019s only one worker, but you can control this by setting  nbproc in the  global section of your configuration. For example, if you set  nbproc to 3, then three workers would be listed. Using  nbproc to create multiple HAProxy workers allows you to pin specific functions, such as TLS termination, to specific processes, but enabling multiple threads on a single process accomplishes the same result and is easier to manage. Learn more about the differences between multiple processes and multiple threads in our blog post  Multithreading in HAProxy.\n You can execute Runtime API commands against individual workers by prefixing the command with the relative PID. For example, use @1 to invoke commands against the first worker:\n  Although you can\u2019t use this technique to invoke commands against non-HAProxy processes, such as our Data Plane API program, it can be very useful just to see the list of running programs and know that they started as expected.\n  Over the years, how HAProxy forks workers has evolved, becoming better suited for modern service managers like Systemd and opening the door for features like the HAProxy Process Manager, which lets you run arbitrary programs. The Process Manager uses a simple configuration syntax, the  program section, that can be used to start any number of external applications in support of HAProxy. It\u2019s often used to start the HAProxy Data Plane API, but it\u2019s also convenient for running SPOAs like the Traffic Shadowing agent.\n Want to stay up to date on similar topics? Subscribe to this blog! You can also follow us on  Twitter and join the conversation on  Slack.\n HAProxy Enterprise is the industry-leading software load balancer. It powers modern application delivery at any scale and in any environment, providing the utmost performance, observability and security. Organizations harness its cutting edge features and enterprise suite of add-ons, backed by authoritative expert support and professional services. Ready to learn more?  Contact us and  sign up for a free trial!", "posttime": "2020-07-11 06:48:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "haproxy,process", "title": "\u4e86\u89e3HAProxy\u8fdb\u7a0b\u7ba1\u7406\u5668", "title_en": "Get to Know the HAProxy Process Manager", "transed": 1, "url": "https://www.haproxy.com/blog/get-to-know-the-haproxy-process-manager/", "via": "", "real_tags": ["haproxy", "process"]}, {"category": "", "categoryclass": "", "imagename": "5c5dbc6d762f47280084c855d73002ef.jpg", "infoid": 1011107, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5938\u514b\u6a21\u578b\u662f\u7269\u7406\u5b66\u7684\u4e00\u573a\u667a\u529b\u9769\u547d\u3002\u7269\u7406\u5b66\u5bb6\u9762\u5bf9\u7684\u662f\u4e00\u4e2a\u4e0d\u65ad\u589e\u957f\u7684\u4e0d\u7a33\u5b9a\u7c92\u5b50\u52a8\u7269\u56ed\uff0c\u8fd9\u4e9b\u7c92\u5b50\u4f3c\u4e4e\u5728\u6211\u4eec\u5468\u56f4\u7684\u5b87\u5b99\u4e2d\u6ca1\u6709\u4f5c\u7528\u3002\u5938\u514b\u901a\u8fc7(\u81f3\u5c11\u8868\u9762\u4e0a)\u4e00\u5957\u7b80\u5355\u7684\u89c4\u5219\u89e3\u91ca\u4e86\u8fd9\u4e00\u5207\uff0c\u8fd9\u4e9b\u89c4\u5219\u901a\u8fc7\u4e24\u4e2a\u6216\u4e09\u4e2a\u5938\u514b\u7684\u7ec4\u5408\u5efa\u7acb\u4e86\u6240\u6709\u8fd9\u4e9b\u7c92\u5b50\u3002\n\u867d\u7136\u8fd9\u4e2a\u5927\u4f53\u8f6e\u5ed3\u770b\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f46\u88ab\u79f0\u4e3a\u80f6\u5b50\u7684\u7c92\u5b50\u5c06\u5938\u514b\u805a\u96c6\u5728\u7c92\u5b50\u4e2d\u7684\u89c4\u5219\u662f\u6781\u5176\u590d\u6742\u7684\uff0c\u6211\u4eec\u5e76\u4e0d\u603b\u662f\u77e5\u9053\u5b83\u4eec\u7684\u6781\u9650\u3002\u7c92\u5b50\u4f3c\u4e4e\u505c\u7559\u5728\u4e09\u4e2a\u5938\u514b\u7684\u96c6\u5408\u4e0a\u6709\u4ec0\u4e48\u539f\u56e0\u5417\uff1f\n\u968f\u7740\u8d8a\u6765\u8d8a\u5f3a\u5927\u7684\u7c92\u5b50\u5bf9\u649e\u673a\u7684\u51fa\u73b0\uff0c\u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u4e9b\u8ff9\u8c61\uff0c\u8868\u660e\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u5173\u4e8e\u56db\u5938\u514b\u751a\u81f3\u4e94\u5938\u514b\u7c92\u5b50\u7684\u62a5\u9053\u5df2\u7ecf\u51fa\u73b0\u5728\u4e0d\u540c\u7684\u5b9e\u9a8c\u4e2d\u3002\u4f46\u5173\u4e8e\u8fd9\u4e9b\u7c92\u5b50\u4e2d\u76f8\u4e92\u4f5c\u7528\u7684\u6027\u8d28\u4ecd\u7136\u5b58\u5728\u7591\u95ee\u3002\u73b0\u5728\uff0c\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3(CERN)\u5ba3\u5e03\u589e\u52a0\u4e00\u4e2a\u65b0\u7684\u56db\u5938\u514b\u5bb6\u65cf\uff0c\u6536\u96c6\u4e24\u4e2a\u9b45\u529b\u5938\u514b\u548c\u4e24\u4e2a\u53cd\u9b45\u529b\u5938\u514b\u3002\n\u6211\u4eec\u6700\u719f\u6089\u7684\u57fa\u4e8e\u5938\u514b\u7684\u7c92\u5b50\uff0c\u8d28\u5b50\u548c\u4e2d\u5b50\uff0c\u662f\u7531\u4e09\u4e2a\u6700\u8f7b\u7684\u5938\u514b\u901a\u8fc7\u80f6\u5b50\u7d27\u5bc6\u7ed3\u5408\u5728\u4e00\u8d77\u7684\u3002\u6211\u4eec\u8fd8\u53d1\u73b0\u4e86\u8fd9\u4e9b\u719f\u6089\u7c92\u5b50\u7684\u66f4\u91cd\u7684\u7248\u672c\uff0c\u5176\u4e2d\u4e00\u4e2a\u5411\u4e0a\u6216\u5411\u4e0b\u7684\u5938\u514b\u88ab\u4e00\u4e2a\u66f4\u91cd\u7684\u5938\u514b\u6240\u53d6\u4ee3\uff0c\u6bd4\u5982\u5947\u602a\u7684\u5938\u514b\u6216\u5e95\u90e8\u5938\u514b\u3002\u6b64\u5916\uff0c\u8fd8\u6709\u4e00\u5927\u6279\u4e0d\u7a33\u5b9a\u7684\u7c92\u5b50\uff0c\u7edf\u79f0\u4e3a\u4ecb\u5b50\uff0c\u6d89\u53ca\u4e24\u4e2a\u4e0d\u540c\u8d28\u91cf\u7684\u5938\u514b\uff0c\u4e5f\u662f\u7531\u80f6\u5b50\u7ed3\u5408\u5728\u4e00\u8d77\u7684\u3002\n\u90a3\u4e48\uff0c\u5f53\u4f60\u8bd5\u56fe\u585e\u8fdb\u66f4\u591a\u5938\u514b\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u6211\u4eec\u4e0d\u80fd\u5b8c\u5168\u80af\u5b9a\u3002\u76ee\u524d\u6b63\u5728\u8003\u8651\u4e24\u79cd\u53ef\u80fd\u6027\u3002\u5728\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u65b0\u7684\u9ad8\u5938\u514b\u6570\u7c92\u5b50\u7684\u5236\u4f5c\u65b9\u5f0f\u4e0e\u5e38\u89c1\u7684\u7c92\u5b50\u76f8\u540c\uff1a\u80f6\u5b50\u5c06\u5b83\u4eec\u7d27\u5bc6\u5730\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u5355\u4e2a\u7c92\u5b50\u3002\u7136\u800c\uff0c\u53e6\u4e00\u79cd\u9009\u62e9\u662f\uff0c\u5927\u91cf\u5938\u514b\u7684\u4ea7\u751f\u662f\u56e0\u4e3a\u4e24\u4e2a\u66f4\u719f\u6089\u7684\u7c92\u5b50\u7d27\u5bc6\u5730\u8054\u7cfb\u5728\u4e00\u8d77\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u56db\u5938\u514b\u53ef\u80fd\u4ec5\u4ec5\u662f\u4e00\u5bf9\u4e24\u5938\u514b\u7c92\u5b50\u7684\u7d27\u5bc6\u7f14\u5408\u3002\u4e00\u4e2a\u4e94\u5938\u514b\u662f\u7531\u4e00\u4e2a\u4e24\u5938\u514b\u4ecb\u5b50\u4e0e\u4e00\u4e2a\u4e09\u5938\u514b\u7c92\u5b50\u7ed3\u5408\u800c\u6210\u7684\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u4eec\u53d1\u73b0\u5f88\u96be\u533a\u5206\u8fd9\u4e24\u79cd\u9009\u62e9\u3002\u8fd9\u4e9b\u9ad8\u5938\u514b\u6570\u7684\u7c92\u5b50\u5f80\u5f80\u4f1a\u4ee5\u6781\u5feb\u7684\u901f\u5ea6\u8870\u53d8\u6210\u719f\u6089\u7684\u7c92\u5b50\uff0c\u800c\u6211\u4eec\u901a\u5e38\u53ea\u80fd\u8ffd\u8e2a\u5230\u540e\u4e00\u79cd\u7c92\u5b50\u7684\u8870\u53d8\u3002\u8fd9\u4f7f\u5f97\u6211\u4eec\u5f88\u96be\u786e\u5b9a\u5230\u5e95\u662f\u600e\u4e48\u56de\u4e8b\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u770b\u5f85\u8fd9\u4e9b\u4e8b\u60c5\u7684\u65b9\u5f0f\u8d8a\u591a\u8d8a\u597d\u3002\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3(CERN)\u7684\u6700\u65b0\u7ed3\u679c\uff0c\u4e00\u7ec4\u79d1\u5b66\u5bb6\u5206\u6790\u4e86\u5927\u578b\u5f3a\u5b50\u5bf9\u649e\u673a\u6700\u521d\u51e0\u6b21\u8fd0\u884c\u7684\u6570\u636e\u3002\n\u6570\u636e\u6765\u81eaLHCb\u5b9e\u9a8c\uff0c\u8fd9\u662f\u4e00\u79cd\u4e13\u95e8\u7814\u7a76\u542b\u6709\u975e\u5e38\u91cd\u7684\u5e95\u90e8(\u6216\u7f8e\u4e3d\u7684)\u5938\u514b\u7684\u7c92\u5b50\u7684\u63a2\u6d4b\u5668\u3002\u4f46\u5b83\u66f4\u4e00\u822c\u5730\u80fd\u591f\u62fe\u53d6\u8f83\u91cd\u7684\u5938\u514b\u3002\u800c\u4e14\u8fd9\u79cd\u65b0\u7c92\u5b50\u6709\u5f88\u591a\u66f4\u91cd\u7684\u5938\u514b\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u53d1\u73b0\u7684\u6240\u6709\u9ad8\u5938\u514b\u7c92\u5b50\u5927\u591a\u662f\u8f83\u8f7b\u7684\u9876\u5938\u514b\u548c\u5e95\u5938\u514b\u7684\u6df7\u5408\u7269\uff0c\u8fd8\u6709\u51e0\u4e2a\u8f83\u91cd\u7684\u540c\u884c\u52a0\u5165\u5176\u4e2d\u3002\u4f46\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3\u7684\u7814\u7a76\u5c0f\u7ec4\u611f\u5174\u8da3\u7684\u662f\u5bfb\u627e\u6240\u6709\u5938\u514b\u8981\u4e48\u662f\u9b45\u529b\u5938\u514b\uff0c\u8981\u4e48\u662f\u53cd\u9b45\u529b\u5938\u514b\u7684\u7ec4\u5408\u3002\u9b45\u529b\u5938\u514b\u6765\u81ea\u4e2d\u95f4\u4e00\u4ee3\u5938\u514b\uff1b\u9b45\u529b\u548c\u5947\u5f02\u6bd4\u5411\u4e0a\u6216\u5411\u4e0b\u91cd\uff0c\u4f46\u6bd4\u5411\u4e0a\u6216\u5411\u4e0b\u8f7b\u5f97\u591a\u3002\n\u6211\u4eec\u600e\u4e48\u624d\u80fd\u627e\u5230\u8fd9\u6837\u7684\u4e1c\u897f\u5462\uff1f\u65b9\u4fbf\u7684\u662f\uff0c\u4e00\u4e2a\u56db\u9b45\u529b\u7c92\u5b50\u5e94\u8be5\u4f1a\u901a\u8fc7\u4e00\u5bf9\u53cc\u9b45\u529b\u7c92\u5b50\u7684\u4e2d\u95f4\u6001\u8fdb\u884c\u8870\u53d8\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u719f\u77e5\u7684J/\u03c8\u7c92\u5b50\u3002(\u4e24\u4e2a\u5c0f\u7ec4\u51e0\u4e4e\u662f\u5728\u540c\u4e00\u65f6\u95f4\u53d1\u73b0\u8fd9\u79cd\u7c92\u5b50\u7684\uff0c\u5728\u4e00\u4e2a\u7f55\u89c1\u7684\u59a5\u534f\u65f6\u523b\uff0c\u4ed6\u4eec\u4e24\u4eba\u7ed9\u5b83\u8d77\u7684\u540d\u5b57\u90fd\u88ab\u4fdd\u7559\u4e86\u4e0b\u6765\u3002)\u3002\u65e2\u7136\u6211\u4eec\u77e5\u9053J/\u03c8\u7c92\u5b50\u662f\u5982\u4f55\u8870\u53d8\u7684\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7b80\u5355\u5730\u5bfb\u627e\u4ece\u5355\u4e2a\u8d28\u5b50-\u8d28\u5b50\u78b0\u649e\u4e2d\u4ea7\u751f\u7684\u8870\u53d8\u5bf9\u3002\n\u53cd\u8fc7\u6765\uff0cJ/\u03c8\u7c92\u5b50\u7684\u8870\u53d8\u53ef\u4ee5\u901a\u8fc7\u8d77\u6e90\u4e8e\u5355\u4e00\u4f4d\u7f6e\u7684\u00b5\u5b50-\u53cd\u00b5\u5b50\u5bf9\u7684\u51fa\u73b0\u6765\u8bc6\u522b\u3002(\u00b5\u5b50\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u7535\u5b50\u66f4\u91cd\u3001\u66f4\u4e0d\u7a33\u5b9a\u7684\u8868\u4eb2\u3002)\u3002\u56e0\u4e3a\u5e94\u8be5\u6709\u4e24\u4e2aJ/\u03c8\u7c92\u5b50\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5bfb\u627e\u78b0\u649e\u540e\u7684\u4e24\u5bf9\u00b5\u5b50\u8f68\u8ff9\u3002\n\u56e0\u6b64\uff0c\u7814\u7a76\u4eba\u5458\u626b\u63cf\u4e86\u4e00\u7cfb\u5217\u80fd\u91cf\uff0c\u4ee5\u5bfb\u627e\u8fc7\u91cf\u7684\u8fd9\u4e9b\u4e8b\u4ef6\u3002\u4ed6\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u56db\u9b45\u529b\u7c92\u5b50\u6765\u8bf4\uff0c\u5728\u5408\u9002\u7684\u80fd\u91cf\u8303\u56f4\u5185\u5b58\u5728\u4e00\u4e2a\uff0c\u5373\u4e0e\u9884\u671f\u7684\u80cc\u666f\u566a\u58f0\u76f8\u5dee\u4e94\u4e2a\u6807\u51c6\u5dee\u3002\u8fd9\u610f\u5473\u7740\u5b83\u7b26\u5408\u7c92\u5b50\u7269\u7406\u5b66\u7684\u53d1\u73b0\u6807\u51c6\u3002\n\u8fd9\u79cd\u76ee\u524d\u5c1a\u672a\u547d\u540d\u7684\u65b0\u7c92\u5b50\u662f\u7b2c\u4e00\u4e2a\u5b8c\u5168\u7531\u4e00\u79cd\u5938\u514b\u7ec4\u6210\u7684\u8d85\u8fc7\u4e09\u4e2a\u5938\u514b\u7684\u7c92\u5b50\uff0c\u4e5f\u662f\u7b2c\u4e00\u4e2a\u5b8c\u5168\u7531\u66f4\u91cd\u7684\u5938\u514b\u7ec4\u6210\u7684\u7c92\u5b50\u3002\u800c\u4e14\uff0c\u8003\u8651\u5230\u8fd9\u79cd\u7279\u6b8a\u7684\u5938\u514b\u88ab\u79f0\u4e3a\u9b45\u529b\u5938\u514b\uff0c\u5b83\u7684\u5b58\u5728\u4e3a\u53cc\u5173\u8bed\u6253\u5f00\u4e86\u5de8\u5927\u7684\u53ef\u80fd\u6027--\u8fd9\u751a\u81f3\u6ca1\u6709\u6d89\u53ca\u5230\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u5305\u542b\u8fd9\u4e9b\u5938\u514b\u7684\u6574\u4e2a\u7c92\u5b50\u5bb6\u65cf\u7684\u4e13\u4e1a\u672f\u8bed\u662fcharmonium\u3002\n\u4f46\u662f\u4e00\u4e2a\u5927\u95ee\u9898\u8fd8\u6ca1\u6709\u5f97\u5230\u56de\u7b54\uff1a\u8fd9\u79cd\u65b0\u7c92\u5b50\u7684\u6027\u8d28\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u4e0d\u77e5\u9053\u5b83\u662f\u4e24\u4e2a\u7d27\u5bc6\u7ed3\u5408\u7684J/\u03c8\u7c92\u5b50\uff0c\u8fd8\u662f\u7531\u56db\u4e2a\u9b45\u529b\u5938\u514b\u7ec4\u6210\u7684\u5355\u4e2a\u7c92\u5b50\u3002\u7b54\u6848\u76f8\u5f53\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u5c06\u63d0\u4f9b\u6709\u5173\u652f\u914d\u6240\u6709\u5938\u514b-\u80f6\u5b50\u76f8\u4e92\u4f5c\u7528\u7684\u5f3a\u529b\u7684\u4fe1\u606f\u3002\n\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4eec\u5bf9\u8fd9\u4e9b\u7c92\u5b50\u7814\u7a76\u5f97\u8d8a\u591a\uff0c\u6211\u4eec\u5c31\u8d8a\u6709\u53ef\u80fd\u786e\u5b9a\u5236\u9020\u5b83\u4eec\u6240\u9700\u7684\u7ec6\u8282\u3002\u56e0\u6b64\uff0c\u867d\u7136\u5982\u679c\u8fd9\u4e2a\u7c92\u5b50\u7acb\u5373\u9884\u793a\u7740\u4e00\u4e2a\u60ac\u800c\u672a\u51b3\u7684\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u4f1a\u5f88\u597d\uff0c\u4f46\u5b83\u7684\u53d1\u73b0\u5f88\u53ef\u80fd\u4ee3\u8868\u7740\u671d\u7740\u89e3\u51b3\u65b9\u6848\u7684\u8fdb\u5c55\u3002", "note_en": "The quark model was an intellectual revolution for physics. Physicists were faced with an ever-growing zoo of unstable particles that didn&#39;t seem to have a role in the Universe around us. Quarks explained all that through an (at least superficially) simple set of rules that built all of these particles through combinations of two or three quarks.\n While that general outline seems simple, the rules by which particles called &#34;gluons&#34; hold the quarks together in particles are fiendishly complex, and we don&#39;t always know their limits. Are there reasons that particles seem to stop at collections of three quarks?\n With the advent of ever-more powerful particle colliders, we&#39;ve found some indications that the answer is &#34;no.&#34; Reports of  four-quark and even  five-quark particles\u00a0have appeared in different experiments. But questions remain about the nature of the interactions in these particles. Now, CERN has announced a new addition to growing family of tetraquarks, a collection two charm quarks and two anti-charm quarks.\n  The quark-based particles we&#39;re most familiar with, the proton and neutron, are composed of three of the lightest quarks bound tightly together via gluons. We&#39;ve also discovered heavier versions of these familiar particles, where one of the up or down quarks is replaced by a heavier quark, like a strange or bottom. In addition, there is a large collection of unstable particles, collectively called mesons, that involve two quarks of various masses, also held together by gluons.\n So, what happens when you try to cram more quarks in? We&#39;re not entirely sure. There are two possibilities that are being considered. In one case, the new high-quark-count particles are made the same way that familiar ones are: gluons bind them tightly together into a single particle. An alternative, however, is that the large number of quarks comes about because two more familiar particles are tightly associated. So, a tetraquark could simply be a tight association of a pair of two-quark particles. A pentaquark would be put together from a two-quark meson associating with a three-quark particle.\n Unfortunately, we&#39;ve found it difficult to tell these two options apart. These high-quark-count particles tend to decay extremely rapidly to familiar particles, and it&#39;s generally only the decay of those latter particles that we can track. That makes it challenging to determine exactly what&#39;s going on further back. So, the more ways we can look at these things, the better. And that brings us to the latest results from CERN, in which a team of scientists has analyzed the data from the first few runs of the LHC.\n The data comes out of  the LHCb experiment, a detector that&#39;s specialized in particles containing the very heavy bottom (or beauty) quark. But it&#39;s capable of picking up heavier quarks more generally. And the new particle has a lot of heavier quarks.\n  So far, all the high-quark-count particles we&#39;ve found have been a mix of mostly lighter top and bottom quarks, with a couple of their heavier peers thrown in. But the CERN team was interested in looking for combinations where all the quarks were either charm or anti-charm. Charm quarks are from the middle generation of quarks; charm and strange are heavier than up or down but far lighter than up or down.\n How would we find something like that? Conveniently, a four-charm particle should decay through an intermediate state that involves a pair of two-charm particles. And these we know very well as the J/\u03c8 particle. (Two groups found this particle at roughly the same time and, in a rare moment of compromise, the names given to it by both of them have stuck.) Since we know how J/\u03c8 particles decay, we can simply look for pairs of decays coming out of a single proton-proton collision.\n The decay of J/\u03c8 particles can, in turn, be recognized by the appearance of a muon-antimuon pair that originates from a single location. (Muons can be thought of as heavier, unstable cousins of the electron.) Since there should be two of the J/\u03c8 particles, then we need to look for two pairs of muon tracks in the aftermath of a collision.\n So, the researchers scanned a range of energies for an excess of these events. And they find one in the appropriate energy range for a four-charm particle that is five standard deviations from the expected background noise. That means it meets the standard for discovery in particle physics.\n The new particle, currently unnamed, is the first with more than three quarks that is composed entirely of one type of quark, as well as the first to be composed entirely of heavier quarks. And, given that the specific quark is called &#34;charm,&#34; its existence opens vast possibilities for puns\u2010and that&#39;s without even getting into the fact that the technical term for the full family of particles containing these quarks is &#34;charmonium.&#34;\n  But the big question hasn&#39;t been answered: what&#39;s the nature of the new particle? We don&#39;t know if it&#39;s simply two J/\u03c8 particles in tight association or whether there&#39;s a single particle composed of four charm quarks. The answer is fairly important, since it would provide information on the strong force that governs all quark-gluon interactions.\n Still, the more of these particles we have to study, the greater the chances are that we&#39;ll be able to determine the details of what it takes to build them. So, while it would have been nice if this particle immediately heralded the solution to an outstanding question, its discovery is likely to represent progress toward a solution.", "posttime": "2020-07-11 06:29:31", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3,discovered,\u7c92\u5b50", "title": "\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3\u53d1\u73b0\u4e86\u4e00\u79cd\u975e\u5e38\u8ff7\u4eba\u7684\u7c92\u5b50", "title_en": "CERN has discovered a very charming particle", "transed": 1, "url": "https://arstechnica.com/science/2020/07/cern-has-discovered-a-very-charming-particle/", "via": "", "real_tags": ["\u6b27\u6d32\u6838\u5b50\u7814\u7a76\u4e2d\u5fc3", "\u7c92\u5b50"]}]