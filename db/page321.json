[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1031938, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020\r\u5e10\u76ee", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2020-10-29 13:04:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u514d\u8d39,\u673a\u5668\u4eba,robotics,\u521b\u9020", "title": "IROS\u673a\u5668\u4eba\u4f1a\u8bae\u73b0\u5df2\u5728\u7ebf\u5e76\u5b8c\u5168\u514d\u8d39", "title_en": "IROS Robotics Conference Is Online Now and Completely Free", "transed": 1, "url": "https://spectrum.ieee.org/automaton/robotics/robotics-hardware/iros-2020-online", "via": "", "real_tags": ["\u514d\u8d39", "\u673a\u5668\u4eba", "robotics", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "f110ab582e0f2c3b8ef013cbc2f866e2.png", "infoid": 1031937, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Manim\u662f\u7528\u4e8e\u89e3\u91ca\u6570\u5b66\u89c6\u9891\u7684\u52a8\u753b\u5f15\u64ce\u3002\u5b83\u7528\u4e8e\u4ee5\u7f16\u7a0b\u65b9\u5f0f\u521b\u5efa\u7cbe\u786e\u7684\u52a8\u753b\uff0c\u59823Blue1Brown\u7684\u89c6\u9891\u6240\u793a\u3002\n\u6b64\u5b58\u50a8\u5e93\u5305\u542b3Blue1Brown\u4f7f\u7528\u7684Manim\u7248\u672c\u3002\u5728https://github.com/ManimCommunity/manim/.To\u4e0a\u8fd8\u6709\u4e00\u4e2a\u793e\u533a\u7ef4\u62a4\u7684\u7248\u672c\uff0c\u5e0c\u671b\u83b7\u5f97\u5e2e\u52a9\u6216\u52a0\u5165\u5f00\u53d1\u5de5\u4f5c\uff0c\u8bf7\u52a0\u5165\u4e0d\u548c\u8c10\u7684\u884c\u5217\u3002\nManim\u5728Python3.6\u6216\u66f4\u9ad8\u7248\u672c\u4e0a\u8fd0\u884c\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7pip\u4ecePyPI\u5b89\u88c5\u5b83\uff1a\n\u7cfb\u7edf\u8981\u6c42\u662fcairo\u3001ffmpeg\u3001sox(\u5982\u679c\u8981\u5728\u8fd0\u884c\u540e\u64ad\u653e\u63d0\u793a\u97f3\uff0c\u5219\u4e3a\u53ef\u9009)\u3001latex(\u5982\u679c\u8981\u4f7f\u7528LaTeX\uff0c\u5219\u4e3a\u53ef\u9009)\u3002\n\u5982\u679c\u60a8\u60f3\u8981\u653b\u51fbmanimlib\u672c\u8eab\uff0c\u8bf7\u514b\u9686\u6b64\u5b58\u50a8\u5e93\u5e76\u5728\u76ee\u5f55\u4e2d\u6267\u884c\uff1a\n#\u5b89\u88c5python\u8981\u6c42spython3-m pip install-r requirements.txt#\u5c1d\u8bd5outpython3./manim.py\u793a\u4f8b_Scarees.py SquareToCircle-pl\u3002\n\u5b89\u88c5\u5f00\u7f57\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u6765\u8bf4\uff0cpycairo-1.18.0-cp37-cp37m-win32.whl\u5c31\u53ef\u4ee5\u4e86(\u60a8\u53ef\u4ee5\u4ece\u8fd9\u91cc\u4e0b\u8f7d\u5b83\u6216\u5176\u4ed6\u7248\u672c)\u3002\n\u7531\u4e8e\u8981\u5c06\u6240\u6709\u4f9d\u8d56\u9879\u8bbe\u7f6e\u5f97\u6070\u5230\u597d\u5904\u6709\u70b9\u68d8\u624b\uff0c\u56e0\u6b64\u5728\u6b64Repo\u4e2d\u63d0\u4f9b\u4e86Dockerfile\u548cCompose\u6587\u4ef6\uff0c\u5e76\u5728Docker Hub\u4e0a\u63d0\u4f9b\u4e86\u9884\u5236\u7684\u56fe\u50cf\u3002Dockerfile\u5305\u542b\u6709\u5173\u5982\u4f55\u6784\u5efaManim\u6620\u50cf\u7684\u8bf4\u660e\uff0c\u800cCompose\u6587\u4ef6\u5305\u542b\u6709\u5173\u5982\u4f55\u8fd0\u884c\u6620\u50cf\u7684\u8bf4\u660e\u3002\n\u9884\u6784\u5efa\u7684\u5bb9\u5668\u6620\u50cf\u5305\u542bManim\u5b58\u50a8\u5e93\u3002INPUT_PATH\u662f\u5bb9\u5668\u67e5\u627e\u573a\u666f\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\u5fc5\u987b\u5c06INPUT_PATHEnvironment\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u5305\u542b\u573a\u666f\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\uff0c\u5c06OUTPUT_PATH\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u4e3a\u8981\u5199\u5165\u4ecb\u8d28\u7684\u76ee\u5f55\u3002\n\u5982\u679c\u60a8\u7684\u7528\u6237\u540d\u4e0d\u5728\u6269\u5c55\u575e\u7ec4\u4e2d\uff0c\u5219\u9700\u8981\u4ee5root\u7528\u6237\u8eab\u4efd\u8fd0\u884c\u8be5\u547d\u4ee4\u3002\n\u8fd0\u884c\u4e4b\u540e\uff0c\u8f93\u51fa\u5c06\u663e\u793a\u4f4d\u4e8e/tmp/output/\u7684\u6587\u4ef6\u5c31\u7eea\uff0c\u8fd9\u6307\u7684\u662f\u5bb9\u5668\u5185\u7684\u8def\u5f84\u3002\u60a8\u7684output_path\u88ab\u7ed1\u5b9a\u6302\u8f7d\u5230\u6b64/tmp/output\uff0c\u56e0\u6b64\u5bb9\u5668\u5bf9/tmp/output\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u5c06\u955c\u50cf\u5230\u60a8\u7684output_path\u4e0a\u3002/media/\u5c06\u5728OUTPUT_PATH\u4e2d\u521b\u5efa\u3002\n-P\u8d62\u4e0d\u4e86\u5de5\u4f5c\uff0c\u56e0\u4e3aManim\u4f1a\u5728\u96c6\u88c5\u7bb1\u7cfb\u7edf\u4e2d\u5bfb\u627e\u89c6\u9891\u64ad\u653e\u5668\uff0c\u800c\u8fd9\u662f\u5b83\u6ca1\u6709\u7684\u3002\n\u5f53\u60a8\u7b2c\u4e00\u6b21\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\u65f6\uff0cDocker\u4f1a\u5c06\u955c\u50cf\u4eceDocker Hub\u62c9\u53d6\u5e76\u7f13\u5b58\u3002\u5728\u8be5\u6620\u50cf\u88ab\u9010\u51fa\u4e4b\u524d\u7684\u4efb\u4f55\u540e\u7eed\u8fd0\u884c\u90fd\u5c06\u4f7f\u7528\u7f13\u5b58\u7684\u6620\u50cf\u3002\u8bf7\u6ce8\u610f\uff0c\u8be5\u6620\u50cf\u6ca1\u6709\u5b89\u88c5\u4efb\u4f55\u5f00\u53d1\u5de5\u5177\uff0c\u65e0\u6cd5\u9884\u89c8\u52a8\u753b\u3002\u5b83\u7684\u76ee\u7684\u53ea\u662f\u6784\u5efa\u548c\u6d4b\u8bd5\u3002\n\u4e0a\u9762\u547d\u4ee4\u4e2d\u7684-p\u6807\u5fd7\u7528\u4e8e\u9884\u89c8\uff0c\u8fd9\u610f\u5473\u7740\u89c6\u9891\u6587\u4ef6\u5c06\u5728\u6e32\u67d3\u5b8c\u6210\u540e\u81ea\u52a8\u6253\u5f00\u3002-l\u6807\u5fd7\u7528\u4e8e\u4ee5\u8f83\u4f4e\u8d28\u91cf\u8fdb\u884c\u66f4\u5feb\u7684\u6e32\u67d3\u3002\n\u8bbe\u7f6eMEDIA_DIR\u73af\u5883\u53d8\u91cf\u4ee5\u6307\u5b9a\u56fe\u50cf\u548c\u52a8\u753b\u6587\u4ef6\u7684\u5199\u5165\u4f4d\u7f6e\u3002\n\u67e5\u770bold_jects\u6587\u4ef6\u5939\uff0c\u67e5\u770b\u4e4b\u524d3b1b\u89c6\u9891\u7684\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u8bf7\u6ce8\u610f\uff0c\u901a\u5e38\u5bf9\u5e93\u8fdb\u884c\u5f00\u53d1\u65f6\u6ca1\u6709\u8003\u8651\u4e0e\u90a3\u4e9b\u65e7\u9879\u76ee\u7684\u5411\u540e\u517c\u5bb9\u6027\u3002\u8981\u8fd0\u884c\u4e00\u4e2a\u65e7\u9879\u76ee\u5e76\u4fdd\u8bc1\u5b83\u4f1a\u5de5\u4f5c\uff0c\u60a8\u5fc5\u987b\u8fd4\u56de\u5230\u5b8c\u6210\u8be5\u9879\u76ee\u7684\u63d0\u4ea4\u3002\n\u5728\u5f00\u53d1\u573a\u666f\u65f6\uff0c-sp\u6807\u5fd7\u6709\u52a9\u4e8e\u53ea\u67e5\u770b\u7ed3\u5c3e\u7684\u60c5\u51b5\uff0c\u800c\u4e0d\u5fc5\u751f\u6210\u5b8c\u6574\u7684\u52a8\u753b\u3002\u4f7f\u7528-n\u6807\u5fd7\u8df3\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684\u52a8\u753b\u4e5f\u5f88\u6709\u5e2e\u52a9\u3002\n\u6587\u6863\u6b63\u5728eulerour.com/docs\u4e0a\u8fdb\u884c\u3002\u8fd8\u6709\u4e00\u4e2a\u7531@manim-pytuten\u7ef4\u62a4\u7684\u4e00\u4f53\u5f0f\u6587\u6863\u548c\u6559\u7a0b\uff1amanim.ml(\u4e2d\u6587\u7248)\u3002\nTodd Zimmerman\u6574\u7406\u4e86\u4e00\u4e2a\u5173\u4e8eManim\u5165\u95e8\u7684\u6559\u7a0b\uff0c\u8be5\u6559\u7a0b\u5df2\u7ecf\u66f4\u65b0\uff0c\u53ef\u4ee5\u5728Python3.7\u4e0a\u8fd0\u884c\u3002\nManim-\u5e7c\u513f\u56ed\u5728Manim_sandbox repo\u4e2d\u7f16\u5199\u5e76\u6536\u96c6\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u8bfe\u5916\u8bfe\u7a0b\u548c\u89c6\u9891\u4ee3\u7801\u3002\n\u53ea\u63a5\u53d7\u4fee\u590d\u9519\u8bef/\u4fee\u590d\u6253\u5b57\u9519\u8bef/\u6539\u8fdb\u73b0\u6709\u5185\u5bb9\u7684\u62c9\u53d6\u8bf7\u6c42(\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605#1243)\u3002\u5927\u591a\u6570\u62c9\u53d6\u8bf7\u6c42\u5e94\u8be5\u5b9a\u5411\u5230\u793e\u533a\u7248\u672c\u3002\n_3b1b\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u57fa\u672c\u4e0a\u90fd\u4e3a3b1b\u89c6\u9891\u751f\u6210\u89c6\u89c9\u6548\u679c\uff0c\u7248\u6743\u6240\u6709\u4e3a3Blue1Brown\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u5728\u5b58\u50a8\u5e93\u7684\u5176\u4f59\u90e8\u5206\u4e2d\u627e\u5230\u7684\u901a\u7528\u52a8\u753b\u4ee3\u7801\u53d7\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7684\u8bb8\u53ef\u3002", "note_en": "Manim is an animation engine for explanatory math videos. It&#39;s used to create precise animations programmatically, as seen in the videos at  3Blue1Brown.\n This repository contains the version of manim used by 3Blue1Brown. There is also a community maintained version at  https://github.com/ManimCommunity/manim/.To get help or to join the development effort, please join the  discord.\n  Manim runs on Python 3.6 or higher version. You can install it from PyPI via pip:\n  System requirements are  cairo,  ffmpeg,  sox (optional, if you want to play the prompt tone after running),  latex (optional, if you want to use LaTeX).\n     If you want to hack on manimlib itself, clone this repository and in that directory execute:\n # Install python requirementspython3 -m pip install -r requirements.txt  # Try it outpython3 ./manim.py example_scenes.py SquareToCircle -pl\n  Install Cairo. For most users,  pycairo\u20111.18.0\u2011cp37\u2011cp37m\u2011win32.whl will do fine (you can download it or other versions from  here).\n       Since it&#39;s a bit tricky to get all the dependencies set up just right, there is a Dockerfile and Compose file provided in this repo as well as  a premade image on Docker Hub. The Dockerfile contains instructions on how to build a manim image, while the Compose file contains instructions on how to run the image.\n The prebuilt container image has manim repository included. INPUT_PATH is where the container looks for scene files. You must set the  INPUT_PATHenvironment variable to the absolute path containing your scene file and the OUTPUT_PATH environment variable to the directory where you want media to be written.\n   The command needs to be run as root if your username is not in the docker group.\n   After running the output will say files ready at  /tmp/output/, which refers to path inside the container. Your  OUTPUT_PATH is bind mounted to this  /tmp/output so any changes made by the container to  /tmp/output will be mirrored on your  OUTPUT_PATH.  /media/ will be created in  OUTPUT_PATH.\n -p won&#39;t work as manim would look for video player in the container system, which it does not have.\n The first time you execute the above command, Docker will pull the image from Docker Hub and cache it. Any subsequent runs until the image is evicted will use the cached image.Note that the image doesn&#39;t have any development tools installed and can&#39;t preview animations. Its purpose is building and testing only.\n    The  -p flag in the command above is for previewing, meaning the video file will automatically open when it is done rendering. The  -l flag is for a faster rendering at a lower quality.\n   Set  MEDIA_DIR environment variable to specify where the image and animation files will be written.\n Look through the  old_projects folder to see the code for previous 3b1b videos. Note, however, that developments are often made to the library without considering backwards compatibility with those old projects. To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.\n While developing a scene, the  -sp flags are helpful to just see what things look like at the end without having to generate the full animation. It can also be helpful to use the  -n flag to skip over some number of animations.\n  Documentation is in progress at  eulertour.com/docs. And there is also an all-in-one documentation and tutorials maintained by  @manim-kindergarten:  manim.ml (in Chinese).\n  Todd Zimmerman put together a  tutorial on getting started with manim, which has been updated to run on Python 3.7.\n manim-kindergarten wrote and collected some useful extra classes and some codes of videos in  manim_sandbox repo.\n  Only accepts pull requests that fixes bugs / fixes typos / improves existing content (for more information, see  #1243). Most pull requests should be directed to the  community version.\n  All files in the directory  from_3b1b, which by and large generate the visuals for 3b1b videos, are copyright 3Blue1Brown.\n The general purpose animation code found in the remainder of the repository, on the other hand, is under the MIT license.", "posttime": "2020-10-29 12:37:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7528\u4e8e,animation,manim", "title": "Manim\uff1a\u7528\u4e8e\u89e3\u91ca\u6570\u5b66\u89c6\u9891\u7684\u52a8\u753b\u5f15\u64ce", "title_en": "Manim: Animation engine for explanatory math videos", "transed": 1, "url": "https://github.com/3b1b/manim", "via": "", "real_tags": ["\u7528\u4e8e", "animation", "manim"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031936, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53ef\u4ee5\u8bf4\u6211\u50b2\u6162\uff0c\u4f46\u6211\u5b81\u613f\u4f18\u5316\u6211\u7684\u5ba4\u5185\u73af\u5883\uff0c\u4e5f\u4e0d\u613f\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u5728\u53cd\u590d\u65e0\u5e38\u7684\u6237\u5916\u3002\u6211\u8ba4\u4e3a\uff0c\u653e\u5f03\u6539\u5584\u6211\u4eec\u7684\u5ba4\u5185\u7a7a\u95f4\uff0c\u542c\u5929\u7531\u547d\u4e8e\u53d8\u5316\u65e0\u5e38\u7684\u5929\u6c14\u548c\u5b63\u8282\uff0c\u662f\u4e00\u79cd\u5931\u8d25\u4e3b\u4e49\u3002\n\u5982\u679c\u6211\u8981\u4e3a\u4eba\u7c7b\u521b\u9020\u4e00\u4e2a\u7406\u60f3\u7684\u73af\u5883\uff0c\u6211\u60f3\u6709\u51e0\u6837\u4e1c\u897f\u6211\u4eec\u901a\u5e38\u4e0d\u4f1a\u5305\u62ec\u5728\u6211\u4eec\u7684\u5bb6\u5ead\u548c\u529e\u516c\u5ba4\u91cc\u3002\n\u6211\u4eec\u7684\u5ba4\u5185\u7167\u660e\u60c5\u51b5\u901a\u5e38\u5f88\u7cdf\u7cd5\u3002\u201c\u81ea\u7136\u91c7\u5149\u201d\u662f\u623f\u5730\u4ea7\u7684\u4e00\u4e2a\u5356\u70b9\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u8868\u660e\u6211\u4eec\u5728\u8fd9\u4e2a\u90e8\u95e8\u7684\u5de5\u4f5c\u662f\u591a\u4e48\u7cdf\u7cd5\u3002\u6211\u4eec\u4f9d\u9760\u592a\u9633\u81ea\u7136\u5730\u63d0\u4f9b\u5145\u8db3\u7684\u5149\u7ebf\uff0c\u5982\u679c\u662f\u9634\u5929\u6216\u8005\u51ac\u5929\u767d\u5929\u53d8\u77ed\u4e86\uff0c\u90a3\u4e48\u6211\u60f3\u6211\u4eec\u5c31\u4ed6\u5988\u7684\u8fd0\u6c14\u4e0d\u4f73\u4e86\u3002\n\u901a\u5e38\uff0c\u5ba4\u5185\u533a\u57df\u7ea6\u4e3a50-500\u52d2\u514b\u65af\u3002\u8fd9\u6bd4\u9633\u5149\u6697\u51e0\u767e\u500d\u3002\u663e\u7136\uff0c\u6211\u4eec\u5e76\u4e0d\u662f\u88ab\u8bbe\u8ba1\u6210\u5728\u5982\u6b64\u660f\u6697\u7684\u73af\u5883\u4e2d\u8301\u58ee\u6210\u957f\u7684\uff0c\u79d1\u5b66\u786e\u5b9e\u8bc1\u5b9e\u4e86\u66f4\u660e\u4eae\u7684\u5149\u7ebf\u548c\u8b66\u89c9\u4e4b\u95f4\u7684\u8054\u7cfb\u3002\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u50cf\u591c\u91cc\u4e00\u6837\u56f0\u5026\uff0c\u6211\u4eec\u5c31\u4e0d\u5e94\u8be5\u50cf\u591c\u91cc\u4e00\u6837\u7167\u4eae\u6211\u4eec\u7684\u623f\u95f4\u3002\u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u660f\u6697\u7684\u706f\u5149\u9020\u6210\u7684\u5f71\u54cd\u4e0d\u4ec5\u4ec5\u662f\u7b80\u5355\u7684\u660f\u660f\u6b32\u7761\uff0c\u7279\u522b\u662f\u5728\u51ac\u5929\uff0c\u4f1a\u5bfc\u81f4\u4e25\u91cd\u7684\u60c5\u7eea\u95ee\u9898\uff0c\u5982\u5b63\u8282\u6027\u60c5\u611f\u969c\u788d\u6216\u51ac\u5b63\u5fe7\u90c1\u3002\u8fd9\u5f88\u5e38\u89c1\uff0c\u4f46\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u660e\u4eae\u7684\u5149\u7ebf\uff0c\u7279\u522b\u662f\u84dd\u5149\uff0c\u901a\u5e38\u4e5f\u80fd\u63d0\u632f\u60c5\u7eea\uff0c\u53ef\u80fd\u662f\u4e0e\u5496\u5561\u56e0\u76f8\u5f53\u7684\u5174\u594b\u5242\u3002(\u90a3\u4e9b\u5bb9\u6613\u60a3\u8e81\u72c2\u75c7\u7684\u4eba\u5e94\u8be5\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u5f3a\u5149\u53ef\u80fd\u4f1a\u5728\u90a3\u4e9b\u6709\u8e81\u72c2\u75c7\u503e\u5411\u7684\u4eba\u4e2d\u5f15\u53d1\u8e81\u72c2\u75c7\u6216\u8f7b\u5ea6\u8e81\u72c2\u75c7\u3002)\u3002\u66f4\u660e\u4eae\u7684\u706f\u5149\u4e5f\u53ef\u4ee5\u5e2e\u52a9\u89e3\u51b3\u663c\u591c\u8282\u5f8b\u95ee\u9898(\u4f8b\u5982\uff0c\u6211\u591a\u5e74\u6765\u4e00\u76f4\u5728\u52aa\u529b\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898)\uff0c\u8fd9\u65e2\u53ef\u4ee5\u901a\u8fc7\u8c03\u8282\u4f60\u7684\u663c\u591c\u8282\u5f8b\uff0c\u8ba9\u4f60\u7684\u8eab\u4f53\u66f4\u597d\u5730\u77e5\u9053\u4ec0\u4e48\u65f6\u5019\u662f\u767d\u5929\uff0c\u4e5f\u53ef\u4ee5\u5728\u663c\u591c\u592a\u957f\u65f6\u7f29\u77ed\u663c\u591c\u8282\u5f8b\u3002\n\u7167\u660e\u4e0d\u50cf\u4ee5\u524d\u90a3\u4e48\u8d35\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u505a\u5f97\u6bd4\u8fc7\u53bb\u66f4\u597d\u3002LED\u7167\u660e\u7684\u7535\u529b\u6210\u672c\u73b0\u5728\u53ef\u4ee5\u5ffd\u7565\u4e0d\u8ba1\uff0c\u552f\u4e00\u771f\u6b63\u7684\u56e0\u7d20\u662f\u706f\u6ce1\u672c\u8eab\u7684\u6210\u672c\u3002\u8fbe\u5230100,000\u52d2\u514b\u65af\u7684\u9633\u5149\u4ecd\u7136\u662f\u4ee4\u4eba\u671b\u800c\u5374\u6b65\u7684\u6602\u8d35\uff0c\u4f46\u81f3\u5c1110,000\u52d2\u514b\u65af\u662f\u53ef\u884c\u7684\uff0c\u53ea\u9700\u51e0\u767e\u7f8e\u5143\u3002\u6211\u4e0d\u4f1a\u5728\u6b64\u8be6\u8ff0\uff0c\u4f46\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u6216\u6b64\u5904\u83b7\u5f97\u6709\u5173\u7279\u5b9a\u7167\u660e\u8bbe\u7f6e\u7684\u66f4\u591a\u4fe1\u606f\u3002\u7279\u522b\u8981\u9009\u62e9\u8272\u6e29\u63a5\u8fd1\u9633\u5149(5600K)\u7684\u706f\u6ce1\uff0c\u4f46\u8981\u786e\u4fdd\u706f\u6ce1\u5177\u6709\u826f\u597d\u768490+\u663e\u8272\u6307\u6570(CRI)\uff0c\u5426\u5219\u5149\u7ebf\u4f1a\u5f88\u523a\u773c\u3002\n\u6211\u5efa\u8bae\u4f60\u7ed9\u5bb6\u91cc\u4e70\u7684\u4efb\u4f55\u660e\u4eae\u7684\u706f\u90fd\u88c5\u4e0a\u7535\u5b50\u5b9a\u65f6\u5668\uff0c\u8fd9\u6837\u4f60\u5c31\u4e0d\u4f1a\u5728\u665a\u4e0a\u4e0d\u5c0f\u5fc3\u8ba9\u5b83\u4eec\u4eae\u7740\uff0c\u641e\u7838\u4e86\u4f60\u7684\u7761\u7720\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u60a8\u53ef\u80fd\u8fd8\u60f3\u5c06\u624b\u673a/\u7535\u8111\u4eae\u5ea6\u8bbe\u7f6e\u4e3a\u8ba1\u65f6\u5668\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u6a21\u4eff\u6211\u4eec\u8fdb\u5316\u73af\u5883\u7684\u81ea\u7136\u663c\u591c\u5faa\u73af\uff0c\u4f46\u4e0d\u4f1a\u51fa\u73b0\u6240\u6709\u4ee4\u4eba\u8ba8\u538c\u7684\u81ea\u7136\u6ce2\u52a8\u3002\u4f60\u4e5f\u53ef\u4ee5\u5b89\u88c5\u50cff.lux\u8fd9\u6837\u7684\u7a0b\u5e8f\uff0c\u5b83\u53ef\u4ee5\u51cf\u5c11\u4f60\u7684\u8bbe\u5907\u5728\u665a\u4e0a\u53d1\u51fa\u7684\u84dd\u5149\uff0c\u4f46\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u8fd9\u8fd8\u4e0d\u591f\u597d\uff0c\u964d\u4f4e\u8bbe\u5907\u5728\u665a\u4e0a\u7684\u5b9e\u9645\u4eae\u5ea6\u4e5f\u5f88\u91cd\u8981\u3002\n\u201c\u4f46\u662f\u7ef4\u751f\u7d20D\u5462\uff1f\u4f60\u5c31\u5230\u5916\u9762\u53bb\u5427\uff01\u201c\u3002\u8fd9\u662f\u4e2a\u7cdf\u7cd5\u7684\u5efa\u8bae\uff0c\u6211\u542c\u5f97\u592a\u591a\u4e86\u3002\u9633\u5149\u662f\u4e00\u79cd\u5f3a\u70c8\u7684\u81f4\u764c\u7269\u8d28\uff0c\u800c\u7ef4\u751f\u7d20D\u8865\u5145\u5242\u4e0d\u662f\uff0c\u800c\u4e14\u5b83\u4eec\u5f88\u4fbf\u5b9c\u3002\n\u4e00\u6c27\u5316\u78b3\u662f\u4e00\u79cd\u81f4\u547d\u7684\u4e00\u6c27\u5316\u78b3\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u5728\u5bb6\u91cc\u5b89\u88c5\u4e86\u4e00\u53f0\u76d1\u89c6\u5668\u3002\u4e8c\u6c27\u5316\u4e8c\u78b3\u662f\u4e00\u6c27\u5316\u78b3\u7684\u5fae\u5f31\u8868\u4eb2\uff0c\u4f46\u5b83\u4ecd\u7136\u5bf9\u4eba\u7c7b\u5065\u5eb7\u6709\u8d1f\u9762\u5f71\u54cd\uff1a\u9ad8(\u4f46\u5e38\u89c1\u7684)1000ppm\u6216\u66f4\u9ad8\u7684\u6c34\u5e73\u4f1a\u524a\u5f31\u6211\u4eec\u7684\u601d\u8003\u80fd\u529b\u3002\u8fd9\u6b63\u662f\u4f60\u5728\u529e\u516c\u5ba4\u91cc\u4e0d\u60f3\u8981\u7684\u3002\u9ad8\u6c34\u5e73\u8fd8\u53ef\u80fd\u5bf9\u6211\u4eec\u5065\u5eb7\u7684\u5176\u4ed6\u9886\u57df\u4ea7\u751f\u8d1f\u9762\u7684\u957f\u671f\u5f71\u54cd\u3002\n\u5c4f\u4f4f\u547c\u5438\u3002\u5f53\u5b83\u5f88\u7cdf\u7cd5\uff0c\u4f60\u51b3\u5b9a\u91cd\u65b0\u5f00\u59cb\u547c\u5438\u65f6\uff0c\u662f\u4e8c\u6c27\u5316\u78b3\u79ef\u805a\uff0c\u800c\u4e0d\u662f\u7f3a\u6c27\uff0c\u5bfc\u81f4\u4f60\u611f\u5230\u6050\u614c\uff0c\u9700\u8981\u547c\u5438\u3002\u4e8c\u6c27\u5316\u78b3\u662f\u4e00\u79cd\u6bd2\u7d20\u3002\u6211\u4eec\u628a\u5b83\u547c\u51fa\u5230\u901a\u98ce\u4e0d\u826f\u7684\u623f\u95f4\u91cc\uff0c\u90a3\u91cc\u7684\u7a7a\u6c14\u6d53\u5ea6\u53ef\u80fd\u4f1a\u4e0a\u5347\u5230\u5927\u7ea6400ppm\u7684\u5ba4\u5916\u6c34\u5e73\u7684\u4e24\u5230\u4e09\u500d\u3002\n\u51e0\u9879\u7814\u7a76\u8868\u660e\uff0c\u4e8c\u6c27\u5316\u78b3\u6c34\u5e73\u8d85\u8fc71000ppm\u4f1a\u9020\u6210\u4e25\u91cd\u7684(\u6682\u65f6\u6027)\u8ba4\u77e5\u969c\u788d\uff0c\u4f46\u8fd9\u6837\u7684\u6c34\u5e73\u5f88\u5e38\u89c1\u3002\u6211\u6700\u8fd1\u4e70\u4e86\u4e00\u4e2a\u4e8c\u6c27\u5316\u78b3\u6d4b\u91cf\u4eea\uff0c\u5728\u5bb6\u91cc\u53d1\u73b0\u4e86\u8fd9\u6837\u7684\u6c34\u5e73\u3002\u5728\u901a\u98ce\u4e0d\u826f\u7684\u5171\u4eab\u7a7a\u95f4\u91cc\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u89e3\u51b3\u65b9\u6848\u5f88\u7b80\u5355\uff1a\u6253\u5f00\u4e00\u6247\u7a97\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5728\u4e0b\u96e8\u3001\u5916\u9762\u592a\u70ed\u6216\u2026\u5916\u9762\u592a\u51b7\u7684\u65f6\u5019\uff0c\u8fd9\u662f\u4e0d\u8d77\u4f5c\u7528\u7684\u3002\u7279\u522b\u662f\uff0c\u6211\u5fc5\u987b\u4e0e\u52a0\u62ff\u5927\u7684\u51ac\u5929\u4f5c\u6597\u4e89\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u4e00\u5e74\u4e2d\u7684\u5c11\u6570\u4eba\u6765\u8bf4\uff0c\u6253\u5f00\u7a97\u6237\u662f\u4e00\u4e2a\u6709\u6548\u7684\u7b56\u7565\uff0c\u9664\u975e\u6211\u4e70\u4e86\u4e00\u53f0\u6602\u8d35\u7684\u70ed\u56de\u6536\u901a\u98ce\u673a\u3002\u6211\u6ca1\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u6765\u51cf\u8f7b\u51ac\u5929\u7684\u4e8c\u6c27\u5316\u78b3\u79ef\u805a\u3002\u5982\u679c\u4f60\u77e5\u9053\u4e86\u5c31\u544a\u8bc9\u6211\u3002\n\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u690d\u7269\u4e0d\u4f1a\u8d77\u4f5c\u7528\u3002\u5b83\u4eec\u4e0d\u4f1a\u5438\u6536\u8db3\u591f\u7684\u4e8c\u6c27\u5316\u78b3\u3002\u6bcf\u4e2a\u4eba\u9700\u8981\u6570\u767e\u682a\u690d\u7269\uff0c\u6216\u8005\u8bf4\u5927\u7ea612\u68f5\u5168\u5c3a\u5bf8\u7684\u6811\u6728\uff0c\u624d\u80fd\u62b5\u6d88\u4eba\u7c7b\u5728\u4e00\u4e2a\u623f\u95f4\u91cc\u547c\u51fa\u7684\u4e8c\u6c27\u5316\u78b3\u3002\n\u4e00\u4e2a\u6709\u8da3\u7684\u4e8b\u5b9e\u662f\uff1a\u5982\u679c\u6211\u4eec\u4e0d\u505c\u6b62\u5411\u5927\u6c14\u4e2d\u6392\u653e\u4e8c\u6c27\u5316\u78b3\uff0c\u90a3\u4e48\u5927\u7ea6\u4e00\u4e2a\u4e16\u7eaa\u540e\uff0c\u6237\u5916\u7684\u4e8c\u6c27\u5316\u78b3\u53ef\u80fd\u4f1a\u8fbe\u5230\u635f\u5bb3\u8ba4\u77e5\u7684\u6c34\u5e73\u3002\u90a3\u6211\u4eec\u8be5\u600e\u4e48\u529e\uff1f\n\u9ad8/\u4f4e\u6e7f\u5ea6\u548c\u9ad8/\u4f4e\u6e29\u5ea6\u90fd\u4f1a\u5bfc\u81f4\u4e0d\u9002\uff0c\u96c6\u4e2d\u6d4b\u91cf\u5f97\u5206\u8f83\u4f4e\u3002\u4eba\u4eec\u4e00\u822c\u90fd\u80fd\u63a7\u5236\u4f4f\u6e29\u5ea6\uff0c\u6216\u8005\u81f3\u5c11\u662f\u4ed6\u4eec\u610f\u8bc6\u5230\u7684\u4e1c\u897f\u3002\u6e7f\u5ea6\u4e0d\u592a\u5e38\u89c1\uff0c\u4f46\u662f10\u7f8e\u5143\u7684\u6e7f\u5ea6\u8ba1\u53ef\u4ee5\u5e2e\u52a9\u4f60\u628a\u5ba4\u5185\u7a7a\u95f4\u8c03\u5230\u7406\u60f3\u768430%-50%\u7684\u6e7f\u5ea6\u8303\u56f4(\u5982\u679c\u8fd8\u6ca1\u6709\u7684\u8bdd)\u3002\u7a7a\u8c03\u4e5f\u5f80\u5f80\u4f1a\u964d\u4f4e\u6e7f\u5ea6\u548c\u6e29\u5ea6\uff0c\u6240\u4ee5\u590f\u5929\u5f00\u7a7a\u8c03\uff0c\u51ac\u5929\u7528\u52a0\u6e7f\u5668\u3002\n\u5728\u665a\u4e0a\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u628a\u6e29\u5ea6\u964d\u4f4e\u51e0\u5ea6\uff1b\u5728\u51c9\u723d\u7684\u623f\u95f4\u91cc\u7761\u89c9\u4f1a\u66f4\u5bb9\u6613\u3002\u6211\u60f3\u77e5\u9053\uff0c\u7531\u4e8e\u667a\u80fd\u6052\u6e29\u5668\u7684\u51fa\u73b0\uff0c\u5df2\u7ecf\u6536\u56de\u4e86\u591a\u5c11\u5c0f\u65f6\u7684\u7761\u7720\u65f6\u95f4\u3002\n\u6211\u60f3\u8fd9\u4e2a\u56e0\u7d20\u6bd4\u5176\u4ed6\u56e0\u7d20\u66f4\u4e3b\u89c2\uff0c\u4f46\u58f0\u97f3\u592a\u5927\u4f1a\u8ba9\u4eba\u5206\u5fc3\uff0c\u751a\u81f3\u4ee4\u4eba\u6124\u6168\uff1b\u592a\u5b89\u9759\u4f1a\u8ba9\u522b\u4eba\u75db\u82e6\u5730\u542c\u5230\u4f60\u7684\u62bd\u6ce3\u548c\u53f9\u606f\uff0c\u4e5f\u4f1a\u8ba9\u4eba\u5206\u5fc3\u3002\u4ea4\u901a\u7b49\u4e0d\u5747\u5300\u80cc\u666f\u566a\u58f0\u6bd4\u767d\u566a\u58f0\u6216\u6d93\u6d93\u6d41\u6c34\u7684\u5747\u5300\u80cc\u666f\u566a\u58f0\u8981\u5dee\u3002\u7cdf\u7cd5\u7684\u80cc\u666f\u566a\u58f0\u4f1a\u5bfc\u81f4\u8ba4\u77e5\u80fd\u529b\u548c\u6ce8\u610f\u529b\u7684\u4e0b\u964d\u3002\n\u5f88\u5bb9\u6613\u88ab\u566a\u97f3\u6253\u6270\uff0c\u76f4\u5230\u566a\u97f3\u505c\u6b62\uff0c\u4e00\u9635\u89e3\u8131\u7684\u6d6a\u6f6e\u7ec8\u4e8e\u8ba9\u4f60\u610f\u8bc6\u5230\u4f60\u5bf9\u566a\u97f3\u6709\u591a\u607c\u706b\uff0c\u4f60\u624d\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u4ee4\u4eba\u9ad8\u5174\u7684\u662f\uff0c\u566a\u97f3\u95ee\u9898\u5f88\u5bb9\u6613\u63a7\u5236\uff1a\u8033\u585e\u6216\u964d\u566a\u8033\u673a\u901a\u5e38\u4f1a\u8d77\u5230\u4f5c\u7528\u3002\u5b8c\u5168\u6d88\u9664\u73af\u5883\u4e2d\u70e6\u4eba\u7684\u566a\u97f3\u662f\u7406\u6240\u5f53\u7136\u7684\uff0c\u4f46\u8fd9\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002\n\u4e00\u4f4d\u901a\u5e38\u5728\u8f66\u91cc\u670d\u836f\u7684\u6d77\u6d1b\u56e0\u6210\u763e\u8005\u51b3\u5b9a\u6709\u4e00\u5929\u5728\u4ed6\u4eec\u7684\u6d74\u5ba4\u91cc\u6ce8\u5c04\u3002\u4ed6\u4eec\u6b7b\u4e8e\u670d\u836f\u8fc7\u91cf\uff0c\u5c3d\u7ba1\u4ed6\u4eec\u670d\u7528\u7684\u91cf\u4e0e\u5e73\u65f6\u76f8\u540c\u3002\u4e3a\u4ec0\u4e48\uff1f\u6211\u4eec\u7684\u5927\u8111\u4e0e\u4e0d\u540c\u7684\u73af\u5883\u4fdd\u6301\u8054\u7cfb\u3002\u5982\u679c\u4f60\u901a\u5e38\u5728\u4e0a\u8f66\u65f6\u6ce8\u5c04\u6d77\u6d1b\u56e0\uff0c\u90a3\u4e48\u4f60\u7684\u8eab\u4f53\u4e00\u4e0a\u8f66\u5c31\u4f1a\u5f00\u59cb\u4e3a\u4f60\u6ce8\u5c04\u6bd2\u54c1\u505a\u51c6\u5907\u3002\u56e0\u6b64\uff0c\u836f\u7269\u8010\u53d7\u6027\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u7531\u73af\u5883\u56e0\u7d20\u9020\u6210\u7684\u3002(\u8fd9\u5b9e\u9645\u4e0a\u53d1\u751f\u4e86\uff0c\u800c\u4e14\u7ecf\u5e38\u53d1\u751f\u3002)\u3002\u7531\u4e8e\u5df4\u752b\u6d1b\u592b\u5f0f\u7684\u6761\u4ef6\u53cd\u5c04\uff0c\u4f60\u7684\u601d\u60f3\u548c\u8eab\u4f53\u90fd\u4f1a\u53d7\u5230\u4f60\u6240\u5904\u73af\u5883\u7684\u5f71\u54cd\u3002\u94c3\u58f0\u4e00\u54cd\uff0c\u72d7\u5c31\u6d41\u53e3\u6c34\u3002\u5f53\u5348\u9910\u94c3\u58f0\u54cd\u8d77\u7684\u65f6\u5019\uff0c\u4f60\u4e5f\u662f\u3002\n\u533b\u751f\u7ed9\u5931\u7720\u75c7\u60a3\u8005\u7684\u4e00\u4e2a\u5e38\u89c1\u5efa\u8bae\u662f\uff0c\u53ea\u4f7f\u7528\u4f60\u7684\u5e8a\u7761\u89c9\u548c\u505a\u7231\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5efa\u8bae\u3002\u5982\u679c\u4f60\u628a\u5e8a\u7528\u6765\u8bfb\u4e66\u3001\u5b66\u4e60\u548c\u770b\u7535\u89c6\uff0c\u90a3\u4e48\u4f60\u7684\u5927\u8111\u5c31\u4e0d\u4f1a\u628a\u5e8a\u548c\u7761\u7720\u8054\u7cfb\u8d77\u6765\uff0c\u4f60\u4f1a\u66f4\u96be\u5165\u7761\u3002\n\u540c\u6837\uff0c\u5982\u679c\u4f60\u5728\u540c\u4e00\u5f20\u529e\u516c\u684c\u4e0a\u505a\u6240\u6709\u7684\u61d2\u6563\u5de5\u4f5c\uff0c\u4f60\u53ef\u80fd\u4f1a\u66f4\u96be\u96c6\u4e2d\u7cbe\u529b\u3002\u5373\u4f7f\u5728\u4f60\u5de5\u4f5c\u7684\u65f6\u5019\u628a\u4f60\u7684\u667a\u80fd\u624b\u673a\u653e\u5728\u4f60\u7684\u89c6\u91ce\u5185\uff0c\u4e5f\u88ab\u8bc1\u660e\u4f1a\u51cf\u5c11\u7126\u70b9\u3002\u56e0\u6b64\uff0c\u6709\u4e0d\u540c\u7684\u533a\u57df\u7528\u4e8e\u5de5\u4f5c\u548c\u5a31\u4e50\uff0c\u4e0d\u5728\u529e\u516c\u684c\u4e0a\u5403\u996d\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u574f\u5904\u3002(\u751a\u81f3\u662f\u5de5\u4f5c\u548c\u975e\u5de5\u4f5c\u7684\u4e0d\u540c\u7528\u6237\u5e10\u6237\uff0c\u5982\u679c\u4f60\u4e0d\u89c9\u5f97\u8fd9\u4e2a\u60f3\u6cd5\u50cf\u6211\u4e00\u6837\u4ee4\u4eba\u5934\u75bc\u7684\u8bdd\u3002)\u3002\n\u6211\u4eec\u4e0d\u4ec5\u4e0e\u7a7a\u95f4\u6709\u8054\u7cfb\uff0c\u800c\u4e14\u4e0e\u65f6\u95f4\u6709\u8054\u7cfb\u3002\u56e0\u6b64\uff0c\u53e6\u4e00\u6761\u5e38\u89c1\u7684\u7761\u7720\u536b\u751f\u5b66\u5efa\u8bae\u662f\uff1a\u6bcf\u665a\u5728\u540c\u4e00\u65f6\u95f4\u7761\u89c9\u3002\u4f60\u7684\u8eab\u4f53\u4f1a\u5728\u90a3\u4e2a\u65f6\u5019\u5b66\u4f1a\u671f\u5f85\u7761\u7720\u3002\u540c\u6837\uff0c\u6bcf\u5929\u5728\u540c\u4e00\u65f6\u95f4\u8fdb\u98df\u7684\u4eba\u5728\u8eab\u4f53\u51c6\u5907\u597d\u63a5\u53d7\u98df\u7269\u7684\u60c5\u51b5\u4e0b\u8fdb\u98df\uff0c\u56e0\u6b64\u53d8\u5f97\u80a5\u80d6\u7684\u53ef\u80fd\u6027\u8f83\u5c0f\u3002\u7814\u7a76\u8868\u660e\u8fd9\u4e00\u70b9\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5c06\u4f60\u751f\u6d3b\u7684\u65b9\u65b9\u9762\u9762\u90fd\u8bbe\u5b9a\u5728\u65f6\u949f\u4e0a\u4f1a\u8ba9\u4f60\u611f\u89c9\u81ea\u5df1\u50cf\u4e2a\u673a\u5668\u4eba\uff0c\u6240\u4ee5\u6211\u901a\u5e38\u4e0d\u80fd\u5bb9\u5fcd\u751f\u6d3b\u4e2d\u7684\u8fd9\u79cd\u50f5\u5316\u3002\u4f46\u8fd9\u662f\u503c\u5f97\u8003\u8651\u7684\u3002\n\u6211\u4e5f\u8ba4\u4e3a\u6211\u4eec\u5927\u591a\u6570\u5ba4\u5185\u73af\u5883\u7684\u7f8e\u5b66\u9700\u8981\u5347\u7ea7\uff0c\u4f46\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u6ca1\u6709\u592a\u591a\u8981\u8bf4\u7684\uff0c\u9664\u4e86\u7b80\u5355\u5730\u8fd9\u4e48\u8bf4\u3002(\u4e0d\u8fc7\u6211\u6562\u6253\u8d4c\uff1a\u7eff\u8272\u3001\u90c1\u90c1\u8471\u8471&\u7070\u8272\u5355\u8c03\u3002)\u3002\n\u6211\u4eec\u6709\u65f6\u8868\u73b0\u5f97\u5c31\u50cf\u662f\u27f6\u4ee3\u7801\u4e2d\u7684\u5496\u5561\u56e0\u673a\u5668\uff0c\u4f46\u6211\u4eec\u4e0d\u662f\u3002\u6211\u4eec\u662f\u8f6f\u7ef5\u7ef5\u7684\u751f\u7269\uff0c\u6709\u7740\u8106\u5f31\u7684\u8eab\u4f53\u548c\u8106\u5f31\u7684\u5fc3\u7075\u3002\u6211\u4eec\u4e3a\u4e00\u79cd\u7279\u5b9a\u7684\u73af\u5883\u8fdb\u5316\u3002\u4e0d\u80fd\u4fdd\u8bc1\u751f\u4ea7\u6210\u672c\u6700\u4f4e\u7684\u5ba4\u5185\u73af\u5883\u4f1a\u50cf\u5b9a\u5236\u7684\u5bf9\u6211\u4eec\u8fdb\u5316\u73af\u5883\u7684\u6a21\u4eff\u4e00\u6837\u5bf9\u6211\u4eec\u6709\u597d\u5904\uff0c\u4e8b\u5b9e\u4e0a\u5e76\u975e\u5982\u6b64\u3002\u6211\u8ba4\u4e3a\uff0c\u5982\u679c\u4eba\u4eec\u5728\u8bbe\u8ba1\u5ba4\u5185\u73af\u5883\u65f6\u66f4\u8ba4\u771f\u5730\u5bf9\u5f85\u8fd9\u4e9b\u56e0\u7d20\uff0c\u751f\u6d3b\u4f1a\u66f4\u6109\u5feb\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u4e5f\u4f1a\u66f4\u6709\u6548\u7387\uff0c\u66f4\u4e0d\u5bb9\u6613\u51fa\u9519\u3002", "note_en": "Call me arrogant, but I\u2019d rather optimize my indoor environment than try to spend more time in the capricious outdoors. I think it\u2019s defeatism to give up on improving our indoor spaces and resign ourselves to the fickle weather and seasons.\n If I was going to create an ideal environment for a human, I think there are several things I would include that we routinely fail to include in our homes and offices.\n  Our indoor lighting situation usually sucks. The fact that \u201cnatural lighting\u201d is a selling point in real estate shows how terrible a job we are doing in this department. We rely on the sun naturally providing us with sufficient light, and if it\u2019s an overcast day or the days have grown shorter in the winter, then I guess we\u2019re shit out of luck.\n Usually, indoor areas are around 50-500 lux. This is hundreds of times dimmer than the sunlight. Clearly, we weren\u2019t designed to thrive in such dim environments, and science does verify a connection between brighter light and alertness. If we don\u2019t want to be sleepy like it\u2019s nighttime, we shouldn\u2019t light our rooms like it\u2019s nighttime. For some, the effects of dim lighting go beyond simple lethargy and, especially in the winter, cause serious mood problems like seasonal affective disorder or the winter blues. This is common, but it\u2019s not necessary. Bright light, particularly blue light, can also generally boost mood and may be a comparable stimulant to caffeine. (Those who are prone to mania should be careful, as intense light can trigger mania or hypomania in those predisposed.) Brighter lighting can also help circadian rhythm issues (which I, for example, have struggled with for years), both by entraining your circadian rhythm so your body better knows when it\u2019s day, and by shortening it if it\u2019s too long.\n Lighting isn\u2019t as expensive as it used to be, so we can do better than we have in the past. The cost of electricity for LED lighting is now negligible, and the only real factor is the cost of the bulbs themselves. Reaching for the full 100,000 lux of sunlight would still be prohibitively expensive, but going for at least 10,000 lux is doable with only a few hundred dollars. I won\u2019t go into specifics here, but you can get more information on specific lighting setups  here or  here. In particular, get bulbs with a color temperature close to sunlight (5600k), but make sure the bulbs have a  good good means 90+ Color Rendering Index (CRI), otherwise the light will feel harsh.\n I recommend putting any bright lighting you buy for your home on electrical timers so you don\u2019t accidentally leave them on during the evening and screw up your sleep. You may also want to set your phone/computer brightness on a timer, if you can. The goal is to mimic the natural day/night cycle of our evolutionary environment, but without all the pesky volatility of nature. You can get programs like f.lux too, which reduce the amount of blue light emitted by your device in the evening, but in my experience this isn\u2019t good enough and reducing the actual brightness of the device at night is also important.\n \u201cBut what about vitamin D? Just go outside!\u201d This is terrible advice, and I hear it too often. Sunlight is a powerful carcinogen, and vitamin D supplements are not, and they\u2019re cheap.\n  Carbon MON-oxide is the deadly one you probably already have a monitor for in your house. Carbon DI-oxide is the feeble cousin of carbon monoxide, but it still has a negative effect on human health:  high (but common) 1,000 ppm or higher levels impairs our ability to think. Just what you don\u2019t want in an office. High levels may also have a negative long-term impact in other areas of our health.\n Hold your breath. When it sucks and you decide to start breathing again, it\u2019s carbon dioxide buildup, not lack of oxygen, causing you to feel panic and the need to breath. Carbon dioxide is a toxin. And we breath it out into poorly ventilated rooms, where the levels can rise to double or triple what they are  outdoors around 400 ppm.\n Several studies have shown significant (temporary) cognitive impairments due to carbon dioxide levels over 1,000 ppm, but such levels are  common I recently bought a carbon dioxide meter and found such levels in my home. in poorly ventilated shared spaces. Fortunately, the solution is simple: open a window. Unfortunately, this doesn\u2019t work when it\u2019s raining, or when it\u2019s too hot outside, or when it\u2019s too cold outside\u2026 In particular, I have to contend with Canadian winters, which means opening the window is a valid strategy for a minority of the year unless I buy an expensive heat recovery ventilator. I don\u2019t have a good solution for mitigating carbon dioxide buildup in the winter. Let me know if you do.\n And, by the way, plants won\u2019t work. They won\u2019t suck up nearly enough carbon dioxide. You would need hundreds of plants per person, or roughly a dozen full-size trees per person, to offset the carbon dioxide exhaled by humans in a room.\n A fun fact: if we don\u2019t stop pumping carbon dioxide into the atmosphere, then in about a century, carbon dioxide  outdoors may reach cognitively impairing levels. Then what do we do?\n  High/low humidity and high/low temperature both lead to discomfort and lower scores on concentration measures. People generally have temperature under control, or at least it\u2019s something they\u2019re aware of. Humidity is less common to measure, but a $10 hygrometer should help you get your indoor space to the ideal 30-50% humidity range if it isn\u2019t already. Air conditioners also tend to reduce humidity as well as temperature, so air-condition in the summer and use a humidifier in the winter.\n At night, drop the temperature a few degrees if you can; It\u2019s easier to sleep in a cool room. I wonder how many hours of sleep have been reclaimed already due to the advent of smart thermostats.\n  I imagine this factor is more subjective than the others, but too loud is distracting, even aggrivating; too quiet makes your sniffles and sighs painfully audible to others, and so is distracting. Uneven background noise like traffic is worse than the uniform background noise of white noise or trickling water. Bad background noise leads to poorer cognition and focus.\n It\u2019s easy to be bothered by noise and not realize it until the noise stops and a wave of relief finally makes you aware of how annoyed you were by the sound. Noise issues are happily easy to control: earplugs or noise-cancelling headphones will generally do the trick. It would be utopic to eliminate bothersome noise from the environment altogether, but it\u2019s not necessary.\n  A heroin addict who normally takes their dose in their car decides one day to inject in their bathroom. They die of an overdose, even though they took the same amount they normally do. Why? Our brains maintain associations with different environments. If you normally inject heroin when you get in your car, then your body starts to prepare you for the drug as soon as you get in the car. Drug tolerance, then, is partly environmental. (This  actually happened and happens regularly.) Your mind and body are affected by your environment due to Pavlovian conditioning. When the bell rings, the dog salivates. When the lunch bell rings, so do you.\n One common piece of advice given by doctors to insomniacs is to only use your bed for sleeping and for sex, and it\u2019s good advice. If you use your bed for reading, studying, and watching TV, then your mind will not form a strong association between the bed and sleep, and you will have a harder time falling asleep.\n Likewise, if you do all your slacking off at the same desk you do your work at, you will probably have a harder time focusing. Even having your smartphone within your field of view while you work has been shown to reduce focus. So it wouldn\u2019t hurt to have different areas for work and play, and to not eat at your desk. (And even different user accounts on your computer for work and non-work, if you don\u2019t find that idea to be a pain in the ass like I do.)\n We also form associations not just with space, but with time. Hence another piece of common sleep hygeine advice: go to sleep at the same time every night. Your body will learn to expect sleep at that time. Likewise, people who eat at the same time every day eat with their bodies prepared to receive food, and so are less likely to become obese. Studies have shown this. Unfortunately, setting every aspect of your life to a clock can make you feel like a robot, so I usually don\u2019t tolerate such rigidity in my life. But it\u2019s worth thinking about.\n   I also think the aesthetics of most of our indoor environments could use an upgrade, but I don\u2019t have much to say on the subject besides simply saying so. (Though I would bet: green lush &gt; grey drab.)\n We sometimes act like we are just  machines caffeine in \u27f6 code out, but we are not. We\u2019re mushy creatures with delicate bodies and delicate minds, too. And we evolved for one specific environment. There is no guarantee that the indoor environment which is cheapest to produce is going to be just as good for us as a bespoke imitation of our evolutionary environment, and in fact it is not. I think life would be more pleasant if people took these factors more serously when designing indoor environments, and our work would be more efficient and less prone to mistakes.", "posttime": "2020-10-29 12:36:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u76f4\u7acb,upright,\u4e0d\u4f1a", "title": "\u5982\u4f55\u76f4\u7acb\u884c\u8d70\uff0c\u4e0d\u518d\u4f4f\u5728\u5c71\u6d1e\u91cc", "title_en": "How to walk upright and stop living in a cave", "transed": 1, "url": "https://taylor.gl/blog/9/", "via": "", "real_tags": ["\u76f4\u7acb", "upright", "\u4e0d\u4f1a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031935, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "_|_|__/_||__||/_\\_||_|__/|_|__\\__||__\\__|_|\\__|\\__|\u3002\nFIGlet\u662f\u4e00\u4e2a\u7528\u666e\u901a\u6587\u672c\u5236\u4f5c\u5927\u5b57\u6bcd\u7684\u7a0b\u5e8f_|(_)|_||_||__(_)__|//_\\|__|&#39\uff1b_\\|/__|&lt\uff1b__/||_|\\__\\|_||\\_\\__|\\_|\\__||__|_/\u3002Oooo o8o.o8`888\u2018&#34\uff1b&#39\uff1b.ooooo\u3002Oooo d8b.o888oo 888.oo.\u3002Oooo.ooo.o D88&#39\uff1b`88b`888&#34\uff1b&#34\uff1b8p 888 888p&#34\uff1bY88b`888 D88(&#34\uff1b8 888 888 888&#34\uff1bY88b.\u3002888 888 888\u300288888 888 o)88b`Y8bod8P&#39\uff1bd888b&#34\uff1b888&#34\uff1bo888o 8&#34\uff1b&#34\uff1b888p&#39\uff1b_/_/_/\u3002\n\u6216\u8005\u8fd9\u4e2a\uff1a#\u3002#_(_)__||_||_|__\\|/_`|__|/_`/_\\//_\\|__`|/_\\__/__/|\u3002__\\V/\\__|(_)|(_||_|_)\\_|_|__/|_||_|__/\\_/|_/|_|\\__/|_|\\__/\u3002\nFIGlet\u7684\u5f53\u524d\u7248\u672c\u662f2.2.5(2012\u5e745\u6708)\uff0c\u57fa\u4e8eJohn Cowan\u7684\u7248\u672c2.2\u3002\u6700\u65b0\u7684\u6e90\u4ee3\u7801\u5206\u53d1\u603b\u662f\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002\u6709\u5173\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684FIGlet\u7684\u5b57\u4f53\u3001\u5b9e\u7528\u7a0b\u5e8f\u548c\u9884\u7f16\u8bd1\u7248\u672c\u7684\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95eeFIGlet\u7684\u4e3b\u8981ftp\u7ad9\u70b9ftp://ftp.figlet.org/pub/figlet/.\u3002\u5bf9\u4e8eGit\u6587\u4ef6\uff0c\u8bf7\u67e5\u770bCldio&#39\uff1b\u7684FIGlet\u6811GitHub\u3002\u5728\u90a3\u91cc\u60a8\u53ef\u4ee5\u627e\u5230FIGlet\u7684\u7248\u672c\uff1a\u8fd9\u91cc\u662fFIGlet Unix\u624b\u518c\u9875\u7684\u526f\u672c\uff0c\u8bb8\u591a\u5b57\u4f53\u4e5f\u53ef\u7528\uff1a\u6258\u7ba1\u4eba\uff1a_|_\\|(_)/__||_/|__||(_||\\_|\u3002\nWww.plig.net", "note_en": "_____ ___ ____ _ _ | ___|_ _/ ___| | ___| |_ | |_ | | | _| |/ _ \\ __|| _| | | |_| | | __/ |_ |_| |___\\____|_|\\___|\\__|\n FIGlet is a program for making large letters out of ordinary text _ _ _ _ _ _ | (_) | _____ | |_| |__ (_)___ | | | |/ / _ \\ | __| &#39;_ \\| / __|| | | &lt; __/ | |_| | | | \\__ \\|_|_|_|\\_\\___| \\__|_| |_|_|___/ . oooo o8o .o8 `888 `&#34;&#39; .ooooo. oooo d8b .o888oo 888 .oo. oooo .oooo.o d88&#39; `88b `888&#34;&#34;8P 888 888P&#34;Y88b `888 d88( &#34;8 888 888 888 888 888 888 888 `&#34;Y88b. 888 888 888 888 . 888 888 888 o. )88b `Y8bod8P&#39; d888b &#34;888&#34; o888o o888o o888o 8&#34;&#34;888P&#39; _/ _/ _/ _/_/ _/ _/_/ _/_/_/_/ _/_/_/ _/_/_/ _/ _/ _/_/ _/ _/ _/ _/ _/_/ _/ _/ _/ _/ _/ _/ _/ _/_/ _/_/ _/ _/_/ _/ _/ _/ _/_/_/\nor this: # # # ########### ####### ########## ########## # # # # # # # # # # # # # # # # # ### # # # # # # ## # # # # # # ## # # ## _ _ _ ___(_) __| |_| | __ _ _____ _____ __ _ ___ |__ \\ |/ _` |__ | / _` / _ \\ \\ / / _ \\ |__` |/ _ \\ _ _ _ _ / __/ | | | |_| | | | | \\__ \\ V /\\__ | | | (_) |(_|_|_|_) \\___|_|_| |_|__/ |_| |_|___/ \\_/ |___/ |_|\\___/\n   The current version of  FIGlet is 2.2.5 (May 2012) based on version 2.2 by  John Cowan. The latest source distribution can be always be found  here. For fonts, utilities and pre-compiled versions of FIGlet on different platforms, please visit the primary FTP site for FIGlet at  ftp://ftp.figlet.org/pub/figlet/. For Git files, please check Claudio&#39;s FIGlet treeat GitHub.  There you can find versions of FIGlet for:  Here is a copy of the FIGlet  unix man page   Many fonts are also available:   Hosted by: ___ _ _ ___ | _ \\ | (_)/ __| | _/ |__| | (_ | |_| |____|_|\\___|\n  www.plig.net", "posttime": "2020-10-29 12:36:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u6587\u672c,program,figlet", "title": "Figlet-\u4e00\u4e2a\u7528\u666e\u901a\u6587\u672c\u5236\u4f5c\u5927\u5b57\u6bcd\u7684\u7a0b\u5e8f", "title_en": "figlet \u2013 a program for making large letters out of ordinary text", "transed": 1, "url": "http://www.figlet.org/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u6587\u672c", "program", "figlet"]}, {"category": "", "categoryclass": "", "imagename": "98fb79cac417e3249d2463713055d8bb.jpg", "infoid": 1031934, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u524d\u5f8b\u5e08\u51fa\u8eab\u7684\u83b7\u5956\u8bb0\u8005\u683c\u4f26\u00b7\u683c\u6797\u6c83\u5c14\u5fb7(Glenn Greenwald)\u662f\u5728\u7ebf\u65b0\u95fb\u7f51\u7ad9The Intercept\u7684\u8054\u5408\u521b\u59cb\u4eba\uff0c\u5e76\u8457\u6709\u51e0\u672c\u4e66\uff0c\u6700...", "note_en": "Former attorney turned award-winning journalist Glenn Greenwald is a co-founder of online news site The Intercept, and the author of several books, the most ...", "posttime": "2020-10-29 12:36:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u683c\u6797,glenn,\u7f51\u7ad9", "title": "\u683c\u4f26\u00b7\u683c\u6797\u6c83\u5c14\u5fb7\u4e13\u8bbf[\u89c6\u9891]", "title_en": "Interview with Glenn Greenwald [video]", "transed": 1, "url": "https://www.youtube.com/watch?v=t0rcLsoIKgA", "via": "", "real_tags": ["\u683c\u6797", "glenn", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "45b3fe704543e43a2b6c9c77235e69e0.png", "infoid": 1031933, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "P\u662f\u4e00\u79cd\u7528\u4e8e\u5f02\u6b65\u4e8b\u4ef6\u9a71\u52a8\u7f16\u7a0b\u7684\u8bed\u8a00\u3002P\u5141\u8bb8\u7a0b\u5e8f\u5458\u5c06\u7cfb\u7edf\u6307\u5b9a\u4e3a\u4ea4\u4e92\u72b6\u6001\u673a\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u72b6\u6001\u673a\u4f7f\u7528\u4e8b\u4ef6\u76f8\u4e92\u901a\u4fe1\u3002P\u5c06\u5efa\u6a21\u548c\u7f16\u7a0b\u7edf\u4e00\u5230\u7a0b\u5e8f\u5458\u7684\u4e00\u9879\u6d3b\u52a8\u4e2d\u3002\u4e0d\u4ec5\u53ef\u4ee5\u5c06P\u7a0b\u5e8f\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u4ee3\u7801\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u68c0\u67e5\u5bf9\u5176\u8fdb\u884c\u7cfb\u7edf\u6d4b\u8bd5\u3002P\u5df2\u7528\u4e8e\u5b9e\u73b0\u548c\u9a8c\u8bc1Microsoft Windows 8\u548cWindows Phone\u9644\u5e26\u7684USB\u8bbe\u5907\u9a71\u52a8\u7a0b\u5e8f\u5806\u6808\u3002\u76ee\u524d\uff0cp\u5728\u4e9a\u9a6c\u900a(Amazon\uff0cAWS)\u5185\u90e8\u88ab\u5e7f\u6cdb\u7528\u4e8e\u590d\u6742\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u6a21\u578b\u68c0\u67e5\u3002\n\u201c\u52a8\u6001\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u7ec4\u5408\u7f16\u7a0b\u548c\u6d4b\u8bd5\u201d\uff0cAnkush Desai\uff0cAmar Phanishayee\uff0cShaz Qadeer\uff0cand Sanjit Seshi.\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0c\u7cfb\u7edf\uff0c\u8bed\u8a00\uff0c\u548c\u5e94\u7528\u7a0b\u5e8f\u56fd\u9645\u4f1a\u8bae(OOPSLA)\uff0c2018\u3002\n\u201cDrona\uff1a\u4e00\u79cd\u5b89\u5168\u7684\u5206\u5e03\u5f0f\u79fb\u52a8\u673a\u5668\u4eba\u6846\u67b6\u201d\uff0cAnkush Desai\uff0cIndranil Saha\uff0c\u6768\u5efa\u6865\uff0cShaz Qadeer\uff0cSanjit A.Seshi.\u5728\u7b2c\u516b\u5c4aACM/IEEE\u56fd\u9645\u7f51\u7edc\u7269\u7406\u7cfb\u7edf\u4f1a\u8bae(ICCPS)\u4e0a\uff0c2017.\u3002\n\u201c\u5f02\u6b65\u53cd\u5e94\u5f0f\u7cfb\u7edf\u7684\u7cfb\u7edf\u6d4b\u8bd5\u201d\uff0cAnkush Desai\uff0cShaz Qadeer\uff0cand Sanjit A.Seshi.\u57282015\u5e74\u7b2c10\u5c4a\u8f6f\u4ef6\u5de5\u7a0b\u57fa\u7840\u8054\u5e2d\u4f1a\u8bae(ESEC/FSE 2015)\u8bba\u6587\u96c6\u4e0a.\u3002\n\u201c\u5b89\u5168\u5f02\u6b65\u4e8b\u4ef6\u9a71\u52a8\u7f16\u7a0b\u201d\uff0cAnkush Desai\uff0cVivek Gupta\uff0cEthan Jackson\uff0cShaz Qadeer\uff0cSriram Rajamani\uff0c\u548cDamien Zuffere.ACM SIGPLAN Conference on Programming Language Design and Implementation(PLDI)\uff0c2013\u3002\n\u89c2\u770b\u6709\u8da3\u7684\u6f14\u793a\u89c6\u9891\uff0c\u4f7f\u7528P\u63a7\u5236\u56db\u8f74\u98de\u884c\u5668\u5e76\u7406\u89e3MavLink\u6d41\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5728\u5b9e\u65f6DGML\u56fe\u8868\u4e2d\u53ef\u89c6\u5316\u3002\n\u6211\u4eec\u6784\u5efa\u4e86Drona\uff0c\u4e00\u4e2a\u7528\u4e8e\u5206\u5e03\u5f0f\u79fb\u52a8\u673a\u5668\u4eba\u7cfb\u7edf\u7684\u8f6f\u4ef6\u6846\u67b6\u3002Drona\u4f7f\u7528P\u8bed\u8a00\u5b9e\u73b0\u548c\u6a21\u578b\u68c0\u67e5\u5206\u5e03\u5f0f\u673a\u5668\u4eba\u8f6f\u4ef6\u5806\u6808(Wiki)\u3002\u4eceP\u7f16\u8bd1\u5668\u751f\u6210\u7684C\u4ee3\u7801\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u90e8\u7f72\u5728\u673a\u5668\u4eba\u64cd\u4f5c\u7cfb\u7edf(ROS)\u4e0a\u3002\u6709\u5173DRONA\u6846\u67b6\u548c\u6a21\u62df\u89c6\u9891\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\uff1ahttps://drona-org.github.io/Drona/", "note_en": "P is a language for asynchronous event-driven programming. P allows the programmer to specify the system as a collection of interacting state machines, which communicate with each other using events. P unifies modeling and programming into one activity for the programmer. Not only can a P program be compiled into executable code, but it can also be systematically tested using Model Checking. P has been used to implement and validate the USB device driver stack that ships with Microsoft Windows 8 and Windows Phone. P is currently being used extensively inside Amazon (AWS) for model checking complex distributed systems.\n  Compositional Programming and Testing of Dynamic Distributed Systems.Ankush Desai, Amar Phanishayee, Shaz Qadeer, and Sanjit Seshia.International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), 2018.\n DRONA: A Framework for Safe Distributed Mobile Robotics.Ankush Desai, Indranil Saha, Jianqiao Yang, Shaz Qadeer, and Sanjit A. Seshia.In Proceedings of the 8th ACM/IEEE International Conference on Cyber-Physical Systems (ICCPS), 2017.\n Systematic Testing of Asynchronous Reactive Systems.Ankush Desai, Shaz Qadeer, and Sanjit A. Seshia.In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2015).\n P: Safe asynchronous event-driven programming.Ankush Desai, Vivek Gupta, Ethan Jackson, Shaz Qadeer, Sriram Rajamani, and Damien Zufferey.In Proceedings of ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2013.\n     See  fun demo video using P to control a quadrocopter and make sense of the MavLink stream, all visualized in a live DGML diagram.\n  We built DRONA, a software framework for distributed mobile robotics systems. DRONA uses P language for implementing and model-checking the distributed robotics software stack (  wiki). The C code generated from P compiler can be easily deployed on Robot Operating System (ROS).More details about the DRONA framework and simulation videos are available here:  https://drona-org.github.io/Drona/", "posttime": "2020-10-29 12:36:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u7a0b,programming,asynchronous,\u7cfb\u7edf", "title": "P\uff1a\u4e00\u79cd\u7528\u4e8e\u5f02\u6b65\u4e8b\u4ef6\u9a71\u52a8\u7f16\u7a0b\u548c\u6a21\u578b\u68c0\u67e5\u7684\u8bed\u8a00", "title_en": "P: A language for asynchronous event-driven programming and model checking", "transed": 1, "url": "https://github.com/p-org/P", "via": "", "real_tags": ["\u7f16\u7a0b", "\u7cfb\u7edf"]}, {"category": "", "categoryclass": "", "imagename": "620dae4229626ee37a27475f04dbbf53.png", "infoid": 1031932, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u6b3e\u5c06\u60a8\u7684\u65e5\u5e38\u5de5\u4f5c\u5e94\u7528\u7a0b\u5e8f\u878d\u5408\u4e3a\u4e00\u4f53\u7684\u65b0\u5de5\u5177\u3002\u5b83\u662f\u60a8\u548c\u60a8\u7684\u56e2\u961f\u7684\u4e00\u4f53\u5316\u5de5\u4f5c\u533a", "note_en": "A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team", "posttime": "2020-10-29 12:35:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u65b0,responsible", "title": "\u8d1f\u8d23\u4efb\u7684\u521b\u65b0\u8d44\u6e90\u5e93", "title_en": "Library of Responsible Innovation Resources", "transed": 1, "url": "https://library.2100.design", "via": "", "real_tags": ["\u521b\u65b0"]}, {"category": "", "categoryclass": "", "imagename": "c340a4b02b3dbd7072d020e08a0600f3.jpg", "infoid": 1031931, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u5c55\u793a\u4e86\u5982\u4f55\u901a\u8fc7\u5bf9\u751f\u4ea7\u4e2d\u7684\u8bf7\u6c42\u8fdb\u884c\u91c7\u6837\u5e76\u4f7f\u7528\u9a6c\u5c14\u79d1\u592b\u94fe\u751f\u6210\u5047\u7684\u8bf7\u6c42\uff0c\u4ece\u800c\u751f\u6210\u7528\u4e8e\u6d4b\u8bd5\u76ee\u7684\u7684\u771f\u5b9e\u7528\u6237\u6d41\u91cf\u3002\n\u4e0b\u4e00\u4e2a\u4e8b\u4ef6Xn+1Xn+1}Xn+1\u200b\u7684\u6982\u7387\u7531\u4e0a\u4e00\u4e2a\u5df2\u77e5\u4e8b\u4ef6P(Xn+1|Xn)P(Xn+1}|Xn})P(Xn+1\u200b|Xn\u200b)P(Xn+1\u200b|Xn\u200b)\u6216\u524dm\u4e2am\u4e2a\u4e8b\u4ef6\u786e\u5b9a\uff0c\u8fd9\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2am\uff0cm\uff0cm\u9636\u7684\u9a6c\u5c14\u53ef\u592b\u94fe\uff1a\nP(Xn=xn|Xn\u22121=xn\u22121\uff0c.\u3002\u3002\u3002\uff0cX n\u2212m=x n\u2212m)\uff0cn&gt\uff1bm\u3002P(X_{n}=x_{n}|X_{n-1}=x_{n-1}\uff0c...\uff0cX_{n-m}=x_{n-m})\uff0cn\\gt m.P(X n\u200b=x n\u200b|X n\u22121\u200b=x n\u22121\u200b\uff0c.\u3002\u3002\u3002\uff0cX n\u2212m\u200b=x n\u2212m\u200b)\uff0cn&gt\uff1bm\u3002\u6211\u4eec\u53ef\u4ee5\u8ddf\u8e2a\u5b9e\u9645\u7684\u7528\u6237\u884c\u4e3a\uff0c\u5e76\u901a\u8fc7\u8ba1\u6570\u4e8b\u4ef6\u5e76\u6839\u636e\u4e8b\u4ef6\u4e4b\u524d\u7684\u4e8b\u4ef6\u8ba1\u7b97\u6bcf\u4e2a\u4e8b\u4ef6\u7684\u52a0\u6743\u6982\u7387\u6765\u5efa\u7acb\u6a21\u578b\u3002\n\u4f8b\u5982\uff0c101010\u4e2a\u7528\u6237\u5b8c\u6210\u4e86\u4e00\u7bc7\u535a\u5ba2\u5e16\u5b50\u7684\u64b0\u5199\u30029 9 9\u4e2a\u7528\u6237\u540e\u6765\u5c06\u5176\u53d1\u5e03\uff0c\u5176\u4e2d\u4e00\u4e2a\u7528\u6237\u5c06\u5176\u9500\u6bc1\u3002\u8fd9\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86P(P o s t P u b l i s h e d|P o s T F I n I s h e d)=0.9 P(\u53d1\u5e03\u540e|\u5b8c\u6210\u540e)=0.9 P(P o s t P u b l i s h e d|P o s t F I n i s h e d)=0\u7684\u6982\u7387\u30029\u548cP(P o s t T r a s h e d|P o s t F I n i s h e d)=0.1P(PostTrashed|PostFinish)=0.1 P(P o s t T r a s h e d|P o s t F I n i s h e d)=0\u30021.\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u7528\u8f6e\u76d8\u8d4c\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u4e8b\u4ef6\u3002\n\u5f53\u60a8\u9700\u8981\u4e00\u4e9b\u7c7b\u4f3c\u771f\u5b9e\u7528\u6237\u7684\u865a\u5047\u6d41\u91cf\u65f6\uff0c\u8fd9\u5bf9\u4e8e\u538b\u529b\u6216\u70df\u96fe\u6d4b\u8bd5\u5f88\u6709\u7528\u3002\n\u8ba9\u58f0\u660e\u9a6c\u5c14\u53ef\u592b\u94fe\u7684\u7ed3\u6784\u3002\u6620\u5c04\u5b9e\u4f8b\u5c06\u4fdd\u5b58\u4efb\u4f55\u5148\u524d\u7cfb\u5217\u4e8b\u4ef6Vec&lt\uff1bT&&gt;\u7684\u4e8b\u4ef6\u8ba1\u6570BTreeMap&t\uff1bT\uff0cusize&&gt;\uff1b\u3002\nPub struct MarkovChain&lt\uff1bT&&gt;\uff1b\u5176\u4e2dT\uff1a\u514b\u9686+\u8ba2\u5355\uff0c{\u987a\u5e8f\uff1ausize\uff0c\u5b9e\u4f8b\uff1aBTreeMap&lt\uff1bVec&lt\uff1bT&gt\uff1b\uff0cBTreeMap&lt\uff1bT\uff0cusize&lt\uff1b&gt\uff1b\uff0c\u5185\u5b58\uff1aVEC&lt\uff1bT&gt\uff1b\uff0cRNG\uff1aThreadRng\uff0c}\u3002\n\u8981\u5efa\u7acb\u6a21\u578b\uff0c\u6211\u4eec\u5fc5\u987b\u4ed4\u7ec6\u68c0\u67e5\u6240\u6709\u89c2\u5bdf\u5230\u7684\u4e8b\u4ef6\uff0c\u5e76\u8ba1\u7b97\u5728\u6240\u6709n&gt\uff1bm\u4e2a\u4e8b\u4ef6\u4e4b\u540e\u53d1\u751fn\u4e2a\u4e8b\u4ef6\u7684\u6b21\u6570\u3002\u6211\u4eec\u8fd8\u8ddf\u8e2a\u5185\u5b58\u5411\u91cf\u4e2d\u6700\u540e\u5df2\u77e5\u7684m\u4e2am\u4e2a\u4e8b\u4ef6\uff0c\u8fd9\u4e9b\u4e8b\u4ef6\u5c06\u7528\u4e8e\u751f\u6210\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u3002\n\u5b9e\u65bd&lt\uff1bT&gt\uff1bMarkovChain&lt\uff1bT&gt\uff1b\u5176\u4e2dT\uff1aClone+Ord\uff0c{pub FN update(&amp\uff1bmut Self\uff0cEvents\uff1a&amp\uff1b[T]){let events\uff1aVEC&lt\uff1b_&gt\uff1b=events\u3002To_vec()\uff1b\u4e8b\u4ef6\u4e2d\u7684\u5386\u53f2\u3002Windows(Self.Order+1){//\u5c06\u7a97\u53e3\u62c6\u5206\u4e3a0..N-1\u548cN\u8ba9Previous=History[0.\u3002Self.Order]\u3002To_vec()\uff1blet current=\u5386\u53f2\u3002\u6700\u540e\u4e00\u4e2a()\u3002\u514b\u9686()\u3002UNWRAP()\uff1b//\u7edf\u8ba1\u5f53\u524d\u4e8b\u4ef6\u81ea\u8eab\u7684.occurations\u7684\u53d1\u751f\u6b21\u6570\u3002\u6761\u76ee(\u4e0a\u4e00\u4e2a)\u3002\u6216_default()\u3002\u6761\u76ee(\u5f53\u524d)\u3002AND_MODIFY(|COUNT|*COUNT+=1)\u3002\u6216_INSERT(1)\uff1b}//\u66f4\u65b0\u5185\u90e8\u5b58\u50a8\u5668\u81ea\u8eab.memory\u3002\u9884\u7559(\u81ea\u8eab\u8ba2\u5355)\uff1b\u7528\u4e8e\u4e8b\u4ef6\u4e2d\u7684\u4e8b\u4ef6\u3002INTO_ITER()\u3002Rev()\u3002Take(Self.order){Self.Memory.\u3002INSERT(0\uff0cEvent)\uff1b}\u81ea\u8eab.memory\u3002\u622a\u65ad(\u81ea\u8eab.order)\uff1b}//...\u3002\nGENERATE_FROM\u51fd\u6570\u83b7\u53d6\u5185\u5b58\uff0c\u67e5\u627e\u4e8b\u4ef6\u5e76\u4ece\u4e2d\u9009\u62e9\u4e8b\u4ef6\u3002\u6211\u4eec\u4f7f\u7528\u5170\u5fb7\u673a\u7bb1\u63d0\u4f9b\u7684CHOOSE_WEIGNED\u51fd\u6570\u3002\nPub FN GENERATE_FROM(&amp\uff1bmut self\uff0cmemory\uff1a&amp\uff1b[T])-&gt\uff1boption&lt\uff1bT&gt\uff1b{assert_eq\uff01(\u8bb0\u5fc6\u3002Len()\uff0csel.order\uff0c&#34\uff1b\u65e0\u6548\u7684\u5185\u5b58\u5927\u5c0f&#34\uff1b)\uff1b\u5982\u679c\u8ba9\u67d0\u4e9b(\u53d1\u751f\u6b21\u6570)=\u81ea\u8eab\u53d1\u751f\u6b21\u6570\u3002Get(Memory){//\u83b7\u53d6\u6bcf\u4e2a\u5df2\u77e5\u4e8b\u4ef6\u7684\u53d1\u751f\u6b21\u6570\u3002//\u6211\u4eec\u9700\u8981`SliceRandom\uff1a\uff1aChoose_Weight`\u7684VEC\u3002\u8bbeocurence_count\uff1aVEC&lt\uff1b_&gt\uff1b=\u53d1\u751f\u6b21\u6570\u3002ITER()\u3002Map(|(\u4e8b\u4ef6\uff0c\u8ba1\u6570)|(\u4e8b\u4ef6\u3002\u514b\u9686()\uff0c*\u8ba1\u6570))\u3002Collect()\uff1b//\u6839\u636e\u4e8b\u4ef6\u7684\u8ba1\u6570occurence_counts\u9009\u62e9\u4e00\u4e2a\u968f\u673a\u4e8b\u4ef6\u3002CHOOSE_WEATED(&amp\uff1bmut self.rng\uff0c|(_\uff0ccount)|*count)\u3002Map(|(event\uff0c_)|event)\u3002OK()\u3002\u514b\u9686()}\u5426\u5219{//\u5185\u5b58\u4e2d\u6ca1\u6709\u5339\u914d\u9879}}\u3002\n\u751f\u6210\u65b0\u4e8b\u4ef6\u540e\uff0c\u6211\u4eec\u66f4\u65b0\u5185\u90e8\u5185\u5b58\u3002\u7136\u540e\u5c06\u6839\u636e\u6700\u65b0\u7684\u5185\u5b58\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u4e8b\u4ef6\u3002\nPub FN GENERATE(&amp\uff1bmut self\uff0cupdate_memory\uff1abool)-&gt\uff1bOption&lt\uff1bT&gt\uff1b{let last_memory=sel.memory\u3002\u514b\u9686()\uff1b\u5982\u679c\u8ba9SOME(NEXT)=SELF\u3002GENERATE_FROM(&amp\uff1bLAST_MEMORY){IF UPDATE_MEMORY{//\u66f4\u65b0\u5185\u90e8\u5b58\u50a8\u5668\u81ea\u8eab.memory\u3002\u63d2\u5165(0\uff0c\u4e0b\u4e00\u6b65\u3002Clone())\uff1bself.memory\u3002\u622a\u65ad(self.order)\uff1b}\u4e00\u4e9b(\u4e0b\u4e00\u4e2a)}\u5176\u4ed6{\u65e0}}\u3002\nPub struct MarkovChainIter&lt\uff1b\uff0cT&gt\uff1bWhere T\uff1aClone+Ord\uff0c{chain\uff1a&amp\uff1bmut MarkovChain&lt\uff1bT&gt\uff1b\uff0c}Imp&lt\uff1b\uff0cT&gt\uff1bIterator for MarkovChainIter&lt\uff1b\uff0cT&gt\uff1bWhere T\uff1aClone+Ord\uff0c{type Item=T\uff1bFN Next(&amp\uff1bmut self)-&gt\uff1bOption&lt\uff1bself\uff1a\uff1aItem&&gt;\uff1b{sel.chain.\u3002Generate(True)}}Impl&lt\uff1bT&gt\uff1bMarkovChain&lt\uff1bT&gt\uff1b\u5176\u4e2dT\uff1aClone+Ord\uff0c{pub FN ITER(&amp\uff1bmut Self)-&gt\uff1bMarkovChainIter&lt\uff1bT&gt\uff1b{MarkovChainIter{Chain\uff1aSelf}}//...}\u3002\n\u4e3a\u4e86\u5728\u5b9e\u9645\u64cd\u4f5c\u4e2d\u770b\u5230\u5b83\uff0c\u6211\u4eec\u58f0\u660e\u6240\u6709\u53ef\u80fd\u7684\u64cd\u4f5c\u7684\u679a\u4e3e\u3002\u5f53\u7136\uff0c\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u7528\u4f8b\u4e2d\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u80fd\u8981\u590d\u6742\u5f97\u591a\u3002\n\u8ba9mut chain=MarkovChain\uff1a\uff1aNew(1)\uff1b\u8ba9Actions=vec\uff01[userAction\uff1a\uff1asignin\uff0cuserAction\uff1a\uff1aListTodos\uff0cuserAction\uff1a\uff1aCreateTodo\uff0cuserAction\uff1a\uff1aSignout\uff0cuserAction\uff1a\uff1aCreateTodo\uff0cuserAction\uff1a\uff1aSignin\uff0cuserAction\uff1a\uff1aListTodos\uff0cuserAction\uff1a\uff1aDeleteTodo\uff0cuserAction\uff1a\uff1aDeleteTodo\uff0cuserAction\uff1a\uff1aCreateTodo\uff0cuserAction\uff1a\uff1aSigout\uff0cuserAction\uff1a\uff1aSign In\uff0cuserAction\uff1a\uff1aListTodos\uff0cuserAction\uff1a\uff1aCreateTodo\uff0cuserAction\uff1a\uff1aDeleteTodo\uff0cuserAction\uff1a\uff1aListTodos\uff0cuserAction\uff1a\uff1aDeleteTodo\uff0cuserAction\uff1a\uff1asignout\uff0c]\uff1bchain\u3002\u66f4\u65b0(&amp\uff1b\u64cd\u4f5c)\uff1b\n\u8fde\u9501\u53cd\u5e94\u3002ITER()\u3002Take(16){if action==userAction\uff1a\uff1asignin{println\uff01(&#34\uff1b##\u65b0\u4f1a\u8bdd##&#34\uff1b)\uff1b}println\uff01(&#34\uff1b{\uff1a\uff1f}&#34\uff1b\uff0caction)\uff1b}\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6bcf\u6b21\u767b\u5f55\u540e\u90fd\u6709\u4e00\u4e2aListTodos\uff0c\u8fd9\u610f\u5473\u7740P(L i s t T o d o s|S i g n i n)=1 P(ListTodos|signin)=1 P(L i s t T o d o s|S i g n n)=1\u3002\u6784\u5efa\u6a21\u578b\u53ef\u4ee5\u8868\u793a\u5e94\u7528\u7a0b\u5e8f\u7684\u56fa\u6709\u89c4\u5219\u3002\u4e0d\u4f1a\u751f\u6210\u4e00\u7cfb\u5217\u64cd\u4f5c\uff0c\u6982\u7387\u4e3a0 0\uff0c\u8fd9\u6bd4\u7edf\u4e00\u751f\u6210\u7684\u968f\u673a\u6570\u636e\u8981\u597d\u5f97\u591a\u3002\n\u67d0\u4e9b\u64cd\u4f5c\u7ec4\u5408\u53ef\u80fd\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u8fdd\u53cd\u4e1a\u52a1\u89c4\u5219\u3002\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u4ee5\u88ab\u8fc7\u6ee4\u6389\uff0c\u6216\u8005\u7559\u4e0b\u6765\u6d4b\u8bd5\u65e0\u6548\u7684\u8bf7\u6c42\u3002\n\u6211\u4eec\u53ef\u4ee5\u7528\u5b83\u505a\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u8fd9\u53ea\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4ecb\u7ecd\uff0c\u4ecb\u7ecd\u4e86\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u751f\u6210\u4e00\u4e9b\u5047\u8bf7\u6c42\u7684\u4fbf\u6377\u5de5\u5177\u3002", "note_en": "This article shows how you can generate realistic user traffic for testing purposes by sampling requests in production and generating fake ones using  Markov chains.\n   A Markov chain is a stochastic model telling us probability of an event based on previously observed events.Probability of next event        X  n + 1 X_{n+1}     X         n + 1 \u200b    is determined by last known event       P (  X  n + 1 \u2223  X n ) P(X_{n+1}|X_{n})    P (  X         n + 1 \u200b    \u2223  X         n \u200b    ) or previous       m m    m events, which gives us a Markov chain of order       m m    m:\n       P (  X n =  x n \u2223  X  n \u2212 1 =  x  n \u2212 1 , . . . ,  X  n \u2212 m =  x  n \u2212 m ) , n &gt; m . P(X_{n}=x_{n}|X_{n-1}=x_{n-1},...,X_{n-m}=x_{n-m}), n\\gt m.    P (  X         n \u200b     =     x         n \u200b    \u2223  X         n \u2212 1 \u200b     =     x         n \u2212 1 \u200b    ,  . . . ,   X         n \u2212 m \u200b     =     x         n \u2212 m \u200b    ) ,  n  &gt;    m . We can track actual user behaviour and build a model by counting events and calculating weighted probabilities for each event based on events preceding them.\n For example,       10 10    1 0 users finished writing a blog post.      9 9    9 users later published it and one of them trashed it.This gives us probabilities       P ( P o s t P u b l i s h e d \u2223 P o s t F i n i s h e d ) = 0.9 P(PostPublished|PostFinished)=0.9    P ( P o s t P u b l i s h e d \u2223 P o s t F i n i s h e d )  =    0 . 9 and       P ( P o s t T r a s h e d \u2223 P o s t F i n i s h e d ) = 0.1 P(PostTrashed|PostFinished)=0.1    P ( P o s t T r a s h e d \u2223 P o s t F i n i s h e d )  =    0 . 1.We can then selected a random event with  roulette wheel selection.\n This is useful for stress or smoke testing when you need some fake traffic that resembles real users.\n  Let&#39;s declare a struct for a Markov chain.Map  occurrences will hold event counts  BTreeMap&lt;T, usize&gt; for any previous series of events  Vec&lt;T&gt;.\n pub  struct MarkovChain &lt;T &gt; where T : Clone  + Ord , { order :  usize , occurrences : BTreeMap &lt;Vec &lt;T &gt; , BTreeMap &lt;T ,  usize &gt;&gt; , memory : Vec &lt;T &gt; , rng : ThreadRng , }\n To build a model we have to go through all observed events and count the number of times       n n    n-th event occured after all       n &gt; m n&gt;m    n  &gt;    m events.We also track last known       m m    m events inside the  memory vector, which will be used to generate the next event.\n impl &lt;T &gt; MarkovChain &lt;T &gt; where T : Clone  + Ord , {  pub  fn  update ( &amp; mut  self , events :  &amp; [T ] )  {  let events : Vec &lt;_ &gt;  = events . to_vec ( ) ;  for history  in events . windows ( self .order  +  1 )  {  // Split window to 0..N-1 and N  let previous  = history [ 0 .. self .order ] . to_vec ( ) ;  let current  = history . last ( ) . cloned ( ) . unwrap ( ) ;  // Count occurrence for current event  self .occurrences  . entry (previous )  . or_default ( )  . entry (current )  . and_modify (  |count |  *count  +=  1 )  . or_insert ( 1 ) ;  }  // Update internal memory  self .memory . reserve ( self .order ) ;  for event  in events . into_iter ( ) . rev ( ) . take ( self .order )  {  self .memory . insert ( 0 , event ) ;  }  self .memory . truncate ( self .order ) ;  }  // ...\n The  generate_from function takes in the memory, finds occurrences and chooses an event from those.We use  choose_weighted function provided by the  rand crate.\n pub  fn  generate_from ( &amp; mut  self , memory :  &amp; [T ] )  -&gt; Option &lt;T &gt;  {  assert_eq! (memory . len ( ) ,  self .order ,  &#34;invalid memory size&#34; ) ;  if  let Some (occurrences )  =  self .occurrences . get (memory )  {  // Get number of occurrences for each known event.  // We need a Vec for `SliceRandom::choose_weighted`.  let occurrence_counts : Vec &lt;_ &gt;  = occurrences  . iter ( )  . map (  |(event, count) |  (event . clone ( ) ,  *count ) )  . collect ( ) ;  // Chose a random event based on its count occurrence_counts  . choose_weighted ( &amp; mut  self .rng ,   |(_, count) |  *count )  . map (  |(event, _) | event )  . ok ( )  . cloned ( )  }  else  {  // No match from memory None  } }\n After generating a new event, we update the internal memory.Next events will then be calculated from the most recent memory.\n pub  fn  generate ( &amp; mut  self , update_memory :  bool )  -&gt; Option &lt;T &gt;  {  let last_memory  =  self .memory . clone ( ) ;  if  let Some (next )  =  self . generate_from ( &amp;last_memory )  {  if update_memory  {  // Update internal memory  self .memory . insert ( 0 , next . clone ( ) ) ;  self .memory . truncate ( self .order ) ;  } Some (next )  }  else  { None  } }\n  pub  struct MarkovChainIter &lt;  , T &gt; where T : Clone  + Ord , { chain :  &amp;   mut MarkovChain &lt;T &gt; , } impl &lt;  , T &gt; Iterator  for MarkovChainIter &lt;  , T &gt; where T : Clone  + Ord , {  type Item  = T ;  fn  next ( &amp; mut  self )  -&gt; Option &lt; Self ::Item &gt;  {  self .chain . generate ( true )  } } impl &lt;T &gt; MarkovChain &lt;T &gt; where T : Clone  + Ord , {  pub  fn  iter ( &amp; mut  self )  -&gt; MarkovChainIter &lt;T &gt;  { MarkovChainIter  { chain :  self  }  }  // ... }\n  To see it in action, we declare an enum of all possible actions.Of course, these can be way more complicated in the real world use-case.\n   let  mut chain  = MarkovChain :: new ( 1 ) ; let actions  =  vec! [ UserAction ::SignIn , UserAction ::ListTodos , UserAction ::CreateTodo , UserAction ::CreateTodo , UserAction ::SignOut , UserAction ::SignIn , UserAction ::ListTodos , UserAction ::DeleteTodo , UserAction ::DeleteTodo , UserAction ::CreateTodo , UserAction ::CreateTodo , UserAction ::SignOut , UserAction ::SignIn , UserAction ::ListTodos , UserAction ::CreateTodo , UserAction ::DeleteTodo , UserAction ::CreateTodo , UserAction ::DeleteTodo , UserAction ::ListTodos , UserAction ::DeleteTodo , UserAction ::SignOut , ] ;chain . update ( &amp;actions ) ;\n  for action  in chain . iter ( ) . take ( 16 )  {  if action  == UserAction ::SignIn  {  println! ( &#34;## New session ##&#34; ) ;  }  println! ( &#34;{:?}&#34; , action ) ; }\n   Notice how after each  SignIn there&#39;s a  ListTodos, which means       P ( L i s t T o d o s \u2223 S i g n I n ) = 1 P(ListTodos|SignIn)=1    P ( L i s t T o d o s \u2223 S i g n I n )  =    1.Built model can represent inherent rules of our application.Some series of actions will not be generated, those having probability       0 0    0, which is a lot better than uniformly generated random data.\n Some combination of actions might not be possible, because they&#39;d break business rules.Those can be filtered out, or left in to test invalid requests.\n  We can do much more with this.This was only a brief introduction to a handy tool that can be used to generate some fake requests.", "posttime": "2020-10-29 12:35:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u5c14\u53ef\u592b,realistic,\u4e8b\u4ef6", "title": "\u5229\u7528\u9a6c\u5c14\u53ef\u592b\u94fe\u751f\u6210\u771f\u5b9e\u6d4b\u8bd5\u6d41\u91cf", "title_en": "Generating Realistic Test Traffic Using Markov Chains", "transed": 1, "url": "https://outcrawl.com/markov-chains-test-traffic/", "via": "", "real_tags": ["\u9a6c\u5c14\u53ef\u592b", "realistic", "\u4e8b\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "e284b8bffbd20d5f1c9077164f391975.jpg", "infoid": 1031930, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Work&Amp\uff1b\u516c\u53f8\u51e0\u5341\u5e74\u6765\u9996\u6b21\u5bf9\u5730\u94c1\u5730\u56fe\u8fdb\u884c\u4e86\u91cd\u5927\u91cd\u65b0\u8bbe\u8ba1\uff0c\u5907\u53d7\u8d5e\u8a89\u7684\u7535\u5f71\u5236\u4f5c\u4eba\u52a0\u91cc\u00b7\u8d6b\u65af\u7279\u5a01\u7279(Gary Hustwit)\u8bb0\u5f55\u4e86\u521b\u5efa\u65b0\u7684\u5b9e\u65f6\u5730\u56fe\u7684\u8fc7\u7a0b\uff0c\u8be5\u5730\u56fe\u53ef\u4ee5\u5b9e\u65f6\u66f4\u65b0\uff0c\u4ee5\u5e2e\u52a9\u7ebd\u7ea6\u4eba\u548c\u6e38\u5ba2\u66f4\u597d\u5730\u8ba1\u5212\u4ed6\u4eec\u7684\u65c5\u884c\u3002\n\u5b9e\u65f6\u5730\u94c1\u5730\u56fe\u53ef\u4ee5\u5728map.mta.info\u4e0a\u627e\u5230\uff0c\u5bf9\u4e8e\u6253\u5370\u7684\u5730\u56fe\u548c\u8f66\u7ad9\u5899\u4e0a\u5e38\u7528\u7684\u5730\u56fe\u6765\u8bf4\uff0c\u5b83\u662f\u4e00\u4e2a\u66f4\u51c6\u786e\u3001\u66f4\u5177\u6280\u672f\u5148\u8fdb\u6027\u7684\u9009\u62e9\u3002\u4f7f\u7528MTA\u81ea\u5df1\u7684\u6570\u636e\uff0c\u8fd9\u5f20\u5730\u56fe\u57fa\u4e8e\u7f51\u7edc\uff0c\u65e0\u9700\u4e0b\u8f7d\u5373\u53ef\u901a\u8fc7\u591a\u79cd\u8bbe\u5907\u8bbf\u95ee\uff0c\u4e0d\u65ad\u66f4\u65b0\u8def\u7ebf\uff0c\u4ee5\u8bf4\u660e\u5f53\u524d\u51c6\u786e\u7684\u5217\u8f66\u670d\u52a1\u72b6\u6001\u3002\n\u5728\u53d1\u5e03\u65b0\u5730\u56fe\u4e4b\u524d\uff0cWork&amp\uff1bCo\u3001MTA\u548c\u516c\u5171\u4ea4\u901a\u521b\u65b0\u4f19\u4f34\u5173\u7cfb(Transportation Innovation Partnership)\u5efa\u7acb\u4e8618\u4e2a\u6708\u7684\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002\u516c\u5171\u4ea4\u901a\u521b\u65b0\u4f19\u4f34\u5173\u7cfb\u662fMTA\u548c\u7ebd\u7ea6\u5e02\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u7684\u516c\u79c1\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u3002Work&amp\uff1bCo\u4e3b\u5bfc\u8bbe\u8ba1\u6982\u5ff5\u3001\u8be6\u7ec6\u8bbe\u8ba1\u3001\u6280\u672f\u67b6\u6784\u3001Web\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u548c\u8d28\u91cf\u4fdd\u8bc1\u3002\nWork&amp\uff1bCo\u4e0eHustwit\u5408\u4f5c\u5236\u4f5c\u4e86\u4e00\u90e8\u540d\u4e3a\u201c\u5730\u56fe\u201d\u7684\u77ed\u7247\uff0c\u5e76\u5c55\u793a\u4e86\u597d\u7684\u8bbe\u8ba1\u548c\u6700\u65b0\u7684\u6570\u5b57\u6280\u672f\u5982\u4f55\u7b80\u5316\u4e86\u4e16\u754c\u4e0a\u6700\u590d\u6742\u7684\u4ea4\u901a\u7cfb\u7edf\u4e4b\u4e00\u3002Hustwit\u662f\u8bbe\u8ba1\u7eaa\u5f55\u7247\u201cHelvetica\u201d\u3001\u201cObjectified\u201d\u548c\u201cRams\u201d\u7684\u5bfc\u6f14\u3002\u70b9\u51fb\u8fd9\u91cc\u89c2\u770b\u89c6\u9891\u3002\nWork&amp\uff1bCo.\u7684\u521b\u59cb\u5408\u4f19\u4eba\u8d39\u5229\u4f69\u00b7\u9a6c\u83ab\u91cc\u4e9a\u8bf4\uff1a\u201c\u6211\u4eec\u770b\u5230\u4e86\u6253\u9020\u9002\u5408\u6211\u4eec\u8fd9\u4e2a\u65f6\u4ee3\u7684\u5de5\u5177\u6765\u5e2e\u52a9\u7ebd\u7ea6\u5e02\u7684\u673a\u4f1a\u3002\u201d\u4f5c\u4e3a\u8bbe\u8ba1\u5e08\uff0c\u6211\u4eec\u94a6\u4f69MTA\u4f20\u5947\u5370\u5237\u5730\u56fe\u7684\u5386\u53f2\uff0c\u4f46\u6280\u672f\u4f7f\u6211\u4eec\u80fd\u591f\u521b\u9020\u51fa\u66f4\u5f3a\u5927\u7684\u4e1c\u897f\u3002\u6211\u4eec\u6b63\u5728\u4e3a\u4e16\u754c\u5404\u5730\u7684\u4ea4\u901a\u7cfb\u7edf\u91c7\u7528\u5b9e\u65f6\u5730\u56fe\u5960\u5b9a\u57fa\u7840\uff0c\u4ee5\u8fdb\u4e00\u6b65\u9f13\u52b1\u4eba\u4eec\u4f7f\u7528\u516c\u5171\u4ea4\u901a\u5de5\u5177\u3002\n\u5f53\u6211\u4eec\u63a5\u8fd1\u6700\u521d\u9884\u8ba1\u7684\u53d1\u5c04\u65f6\uff0c\u65b0\u51a0\u80ba\u708e\u9707\u60ca\u4e86\u4e16\u754c\uff0c\u7ebd\u7ea6\u5e02\u53d7\u5230\u7684\u6253\u51fb\u5c24\u5176\u4e25\u91cd\u3002\u6211\u4eec\u4e00\u76f4\u5728\u5f00\u53d1\u7684\u4ea7\u54c1\u5177\u6709\u4e86\u65b0\u7684\u610f\u4e49-\u8bf4\u660e\u4e86\u51c6\u786e\u7684\u5217\u8f66\u65f6\u95f4\u6570\u636e\u4e0d\u4ec5\u5bf9\u4e8e\u7ba1\u7406\u901a\u52e4\u81f3\u5173\u91cd\u8981\uff0c\u800c\u4e14\u53ef\u4ee5\u5e2e\u52a9\u4e58\u5ba2\u8ba1\u5212\u66f4\u9ad8\u6548\u7684\u4e58\u8f66\u548c\u5728\u516c\u5171\u573a\u6240\u7684\u6709\u9650\u65f6\u95f4\u3002\n\u7ebd\u7ea6\u5e02\u516c\u5171\u4ea4\u901a\u4e34\u65f6\u603b\u88c1\u838e\u62c9\u00b7\u8303\u4f2f\u683c(Sarah Feinberg)\u6307\u51fa\uff0c\u8fd9\u5f20\u5730\u56fe\u662f\u201c\u6211\u4eec\u6b63\u5728\u91c7\u53d6\u7684\u5404\u79cd\u52aa\u529b\u7684\u4e00\u90e8\u5206\uff0c\u76ee\u7684\u662f\u4e3a\u6211\u4eec\u7684\u5ba2\u6237\u63d0\u4f9b\u5de5\u5177\uff0c\u4ee5\u5e2e\u52a9\u786e\u4fdd\u4ed6\u4eec\u7684\u65c5\u884c\u5c3d\u53ef\u80fd\u5bb9\u6613\u548c\u53ef\u9760\u3002\u201d\u5979\u8865\u5145\u8bf4\uff1a\u201c\u5c24\u5176\u662f\u5728\u4ea4\u901a\u5c40\u56e0\u65b0\u51a0\u80ba\u708e\u800c\u9762\u4e34\u524d\u6240\u672a\u6709\u7684\u8d22\u653f\u5371\u673a\u4e4b\u9645\uff0c\u6211\u8981\u611f\u8c22Work&Amp\uff1bCo\u4e3a\u4ea4\u901a\u7cfb\u7edf\u548c\u6240\u6709\u7ebd\u7ea6\u4eba\u505a\u51fa\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u8d21\u732e\u3002\u201d\n\u81ea\u52a8\u66f4\u65b0\u5217\u8f66\u7ebf\u8def\uff1a\u5217\u8f66\u7ebf\u8def\u5c06\u4f7f\u7528\u5b9e\u65f6\u6570\u636e\u91cd\u65b0\u7ed8\u5236\uff0c\u4ee5\u663e\u793a\u5f53\u524d\u51c6\u786e\u7684\u5217\u8f66\u670d\u52a1\u72b6\u6001\u3002\u5217\u8f66\u7ebf\u8def\u7684\u90e8\u5206\u5728\u5217\u8f66\u7ebf\u8def\u4e0d\u8fd0\u884c\u7684\u5730\u65b9\u6de1\u51fa\uff0c\u5982\u679c\u5217\u8f66\u662f\u5355\u5411\u8fd0\u884c\u7684\uff0c\u5219\u7528\u865a\u7ebf\u8868\u793a\u3002\n\u79fb\u52a8\u4e2d\u7684\u5217\u8f66\uff1a\u7528\u6237\u5c06\u770b\u5230\u5217\u8f66\u5728\u79fb\u52a8\uff0c\u8fd9\u6709\u52a9\u4e8e\u5411\u7528\u6237\u53d1\u51fa\u4fe1\u53f7\uff0c\u8868\u660e\u5730\u56fe\u662f\u5b9e\u65f6\u7684\uff0c\u5e76\u4e14\u8fd8\u53cd\u6620\u4e86\u6574\u4e2a\u5730\u94c1\u7cfb\u7edf\u4e2d\u5217\u8f66\u7684\u5b9e\u65f6\u4f4d\u7f6e\u3002\n\u653e\u5927\u529f\u80fd\uff1a\u5f53\u7528\u6237\u653e\u5927\u65f6\uff0c\u4f1a\u663e\u793a\u66f4\u591a\u7684\u5730\u56fe\u8be6\u7ec6\u4fe1\u606f\uff0c\u5305\u62ec\u80fd\u591f\u67e5\u770b\u5355\u72ec\u7684\u5217\u8f66\u7ebf\u8def\u3001\u5730\u94c1\u5165\u53e3\u3001\u8f66\u7ad9\u540d\u79f0\u4ee5\u53ca\u8857\u9053\u4f4d\u7f6e\u548c\u540d\u79f0\u3002\n\u5730\u94c1\u65e0\u969c\u788d\uff1a\u65b0\u5730\u56fe\u7a81\u51fa\u4e86\u65e0\u969c\u788d\u8f66\u7ad9\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e0e\u65e0\u969c\u788d\u76f8\u5173\u7684\u8bbe\u5907(\u5982\u7535\u68af\u548c\u81ea\u52a8\u6276\u68af)\u7684\u66f4\u65b0\u3002\n\u7d27\u6025\u8b66\u62a5\uff1a\u5730\u56fe\u4f7f\u7528MTA\u7684\u6570\u636e\u9988\u9001\u6765\u4f20\u8fbeMTA\u5728\u7d27\u6025\u60c5\u51b5\u4e0b\u7684\u5b98\u65b9\u901a\u4fe1\u3002\nWork&amp\uff1bCo\u6bcf\u5e74\u90fd\u4f1a\u8981\u6c42\u56e2\u961f\u6210\u5458\u786e\u5b9a\u4ed6\u4eec\u53ef\u80fd\u5e0c\u671b\u4ece\u4e8b\u7684\u5bf9\u793e\u4f1a\u505a\u51fa\u8d21\u732e\u548c\u6539\u5584\u7684\u9879\u76ee\uff0c\u5e2e\u52a9MTA\u66f4\u65b0\u5176\u6807\u5fd7\u6027\u5730\u56fe--\u4ee5\u53ca\u6539\u5584\u548c\u9f13\u52b1\u4f7f\u7528\u516c\u5171\u4ea4\u901a--\u88ab\u5217\u4e3a\u4f18\u5148\u4e8b\u9879\u3002\u8fd9\u662f\u4e00\u4e2a\u516c\u76ca\u9879\u76ee\u3002\u8be5\u516c\u53f8\u63a8\u51fa\u7684\u5176\u4ed6\u65e8\u5728\u5e2e\u52a9\u793e\u4f1a\u7684\u516c\u76ca\u6570\u5b57\u4ea7\u54c1\u5305\u62ec\u8ba1\u5212\u751f\u80b2\u7684Roo\u3001GiveBlck.org\uff0c\u4ee5\u53ca\u6700\u8fd1\u7684Wake Vote\u3002\n\u5728\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d\u3001\u201c\u9650\u5236\u7248\u201d\u3001\u201c\u5feb\u516c\u53f8\u201d\u3001\u201cTime Out New York\u201d\u548c\u201cGothamist\u201d\u4e0a\u9605\u8bfb\u66f4\u591a\u5173\u4e8e\u6211\u4eec\u4e0eMTA\u5408\u4f5c\u7684\u4fe1\u606f\u3002\n\u6211\u4eec\u53ea\u6709\u5728\u6709\u8bdd\u8981\u8bf4\u7684\u65f6\u5019\u624d\u53d1\u7535\u5b50\u90ae\u4ef6\u3002\u6211\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u5171\u4eab\u60a8\u7684\u4fe1\u606f\u3002\u63d0\u4ea4\u5373\u8868\u793a\u60a8\u540c\u610fMailchingp\u7684\u9690\u79c1\u653f\u7b56\u548c\u6761\u6b3e\u3002\u4f60\u53ef\u4ee5\u968f\u65f6\u9000\u8ba2\u3002", "note_en": "Work &amp; Co has launched the   first major redesign of the MTA subway map in decades, and acclaimed filmmaker Gary Hustwit documented the process of creating a new &#34;live map&#34; \u2014 one that updates in real-time \u2014 to help New Yorkers and tourists better plan their journeys.\n The Live Subway Map, which can be found at   map.mta.info, is a more accurate, tech-forward option to printed maps and those commonly used on station walls. Using the MTA\u2019s own data, the map, which is web-based to reach across a multitude of devices without a download, continually updates routes to illustrate current and accurate train service status.\n The launch of the new map follows an 18-month partnership between Work &amp; Co, the MTA, and the Transit Innovation Partnership, a public-private partnership between the MTA and the partnership for New York City. Work &amp; Co led design concepting, detailed design, technical architecture, web application development, and quality assurance.\n Work &amp; Co collaborated with Hustwit \u2014the director of design documentaries, including Helvetica, Objectified, and Rams\u2014 to produce a short film titled &#34;The Map.&#34; The film examines the evolution of wayfinding and user interfaces and shows how good design and the latest digital technology can simplify one of the world&#39;s most complex transit systems. View the video   up here.\n &#34;We saw an opportunity to help New York City by building a tool appropriate for our time,\u201d said Felipe Memoria, founding partner at Work &amp; Co. &#34;As designers, we admire the history of the MTA\u2019s legendary printed maps, but technology enables us to create something more powerful. We are laying the foundation for transit systems around the world to adopt real-time maps that further encourage the use of public transportation.&#34;\n As we neared our original estimated launch, COVID-19 hit the world, and New York City was hit especially hard. The product we had been working on took on new meaning \u2014 illustrating how accurate train time data is not only critical for managing commutes but can help riders plan for more efficient riding and limited time in public places.\n Sarah Feinberg, Interim President of New York City Transit, noted that the map is \u201cpart of a variety of efforts we\u2019re taking to provide our customers with tools to help ensure their trips are as easy and dependable as possible.\u201d She added: Especially valuable at a time when the MTA is facing a fiscal crisis of unprecedented magnitude because of COVID-19, I want to thank Work &amp; Co for this incredible contribution to the transit system and to all New Yorkers.\u201d\n  Automatically updating train lines: Train lines will redraw themselves using real-time data to illustrate current and accurate train service status. Sections of train lines fade out where a train line is not running and are denoted with dashes if trains are running in a single direction.\n Moving trains: The user will see trains moving, which helps to signal to users that the map is live and also reflect real-time locations of trains throughout the subway system.\n Zoom-In features: Greater map detail is exposed as the user zooms in, including the ability to see individual train lines, subway entrances, station names, and street locations and names.\n Subway accessibility: The new map highlights accessible stations and provides updates to accessibility-related equipment like elevators and escalators.\n Emergency alerts: The map uses the MTA\u2019s data feed to convey official MTA communications for emergencies.\n Work &amp; Co on an annual basis asks team members to identify projects they may want to work on that contribute to and improve society, and helping the MTA update its iconic map \u2014and improve and encourage the use of public transport\u2014came up as a priority. This was a pro-bono project. Other pro-bono digital products the company has launched with the aim of helping society have included   Planned Parenthood\u2019s Roo,   GiveBlck.org, and, most recently,   Woke Vote.\n Read more about our partnership with the MTA in   The New York Times,   Curbed,   Fast Company,   Time Out New York, and   Gothamist.\n We only send emails when we have something to say. We&#39;ll never share your information. By submitting, you agree to Mailchimp&#39;s   Privacy Policy and   Terms. You can unsubscribe at any time.", "posttime": "2020-10-29 12:35:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "mta,live,\u5730\u56fe", "title": "MTA-\u7ebd\u7ea6\u5e02\u65b0\u7684\u5b9e\u65f6\u5730\u94c1\u5730\u56fe", "title_en": "MTA \u2013 New Live Subway Map for NYC", "transed": 1, "url": "https://work.co/news/mta-new-live-subway-map/", "via": "", "real_tags": ["mta", "live", "\u5730\u56fe"]}, {"category": "", "categoryclass": "", "imagename": "ade8509b79d875a2cdf37adca0dcb929.jpg", "infoid": 1031929, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u559c\u6b22\u4f7f\u7528\u6731\u5e87\u7279\u7b14\u8bb0\u672c\u7535\u8111(https://jupyter.org/).\u3002\u7279\u522b\u662f\u5728\u4e0eNBDEV(https://nbdev.fast.ai/).)\u7ed3\u5408\u65f6\u3002\u5728\u8fd9\u6bb5\u89c6\u9891\u4e2d\uff0c\u6211\u89e3\u91ca\u4e86\u539f\u56e0\uff0c\u5e76\u89e3\u91ca\u4e86..\u3002", "note_en": "I like using Jupyter Notebooks (https://jupyter.org/). Particularly when combined with nbdev (https://nbdev.fast.ai/). In this video, I explain why, and expl...", "posttime": "2020-10-29 12:34:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u559c\u6b22,howard,https", "title": "\u6770\u91cc\u7c73\u00b7\u970d\u534e\u5fb7\uff1a\u6211\u559c\u6b22\u7b14\u8bb0\u672c", "title_en": "Jeremy Howard: I Like Notebooks", "transed": 1, "url": "https://www.youtube.com/watch?v=9Q6sLbz37gk", "via": "", "real_tags": ["\u559c\u6b22", "howard", "https"]}, {"category": "", "categoryclass": "", "imagename": "e7d8041fb8c2214b66ed248feb355f20.png", "infoid": 1031928, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51a0\u72b6\u75c5\u6bd2\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\uff0c\u7279\u522b\u662f\u5728\u5ba4\u5185\u7a7a\u95f4\u3002\u867d\u7136\u5b83\u4e0d\u50cf\u9ebb\u75b9\u90a3\u6837\u5177\u6709\u4f20\u67d3\u6027\uff0c\u4f46\u79d1\u5b66\u5bb6\u73b0\u5728\u516c\u5f00\u627f\u8ba4\u6c14\u6eb6\u80f6\u4f20\u64ad\u6240\u8d77\u7684\u4f5c\u7528\u3002\u6c14\u6eb6\u80f6\u662f\u611f\u67d3\u8005\u547c\u51fa\u7684\u5fae\u5c0f\u4f20\u67d3\u6027\u9897\u7c92\uff0c\u4ecd\u7136\u60ac\u6d6e\u5728\u5ba4\u5185\u73af\u5883\u7684\u7a7a\u6c14\u4e2d\u3002\u53d8\u901f\u7bb1\u662f\u600e\u4e48\u5de5\u4f5c\u7684\uff1f\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u4eec\u5982\u4f55\u624d\u80fd\u963b\u6b62\u5b83\uff1f\n\u8fd9\u4e9b\u547c\u5438\u6db2\u6ef4\u76f4\u5f84\u5c0f\u4e8e100\u5fae\u7c73\uff0c\u53ef\u4ee5\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u6570\u5c0f\u65f6\u3002\n\u8fd9\u4e9b\u7c92\u5b50\u5927\u4e8e300\u5fae\u7c73\uff0c\u7531\u4e8e\u6c14\u6d41\u7684\u4f5c\u7528\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5c31\u4f1a\u843d\u5230\u5730\u9762\u3002\n\u8fd9\u4e9b\u547c\u5438\u6db2\u6ef4\u76f4\u5f84\u5c0f\u4e8e100\u5fae\u7c73\uff0c\u53ef\u4ee5\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u6570\u5c0f\u65f6\u3002\n\u8fd9\u4e9b\u7c92\u5b50\u5927\u4e8e300\u5fae\u7c73\uff0c\u7531\u4e8e\u6c14\u6d41\u7684\u4f5c\u7528\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5c31\u4f1a\u843d\u5230\u5730\u9762\u3002\n\u8fd9\u4e9b\u547c\u5438\u6db2\u6ef4\u76f4\u5f84\u5c0f\u4e8e100\u5fae\u7c73\uff0c\u53ef\u4ee5\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u6570\u5c0f\u65f6\u3002\n\u8fd9\u4e9b\u7c92\u5b50\u5927\u4e8e300\u5fae\u7c73\uff0c\u7531\u4e8e\u6c14\u6d41\u7684\u4f5c\u7528\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5c31\u4f1a\u843d\u5230\u5730\u9762\u3002\n\u8fd9\u4e9b\u547c\u5438\u6db2\u6ef4\u76f4\u5f84\u5c0f\u4e8e100\u5fae\u7c73\uff0c\u53ef\u4ee5\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u6570\u5c0f\u65f6\u3002\n\u8fd9\u4e9b\u7c92\u5b50\u5927\u4e8e300\u5fae\u7c73\uff0c\u7531\u4e8e\u6c14\u6d41\u7684\u4f5c\u7528\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5c31\u4f1a\u843d\u5230\u5730\u9762\u3002\n\u8fd9\u4e9b\u547c\u5438\u6db2\u6ef4\u76f4\u5f84\u5c0f\u4e8e100\u5fae\u7c73\uff0c\u53ef\u4ee5\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\u6570\u5c0f\u65f6\u3002\n\u8fd9\u4e9b\u7c92\u5b50\u5927\u4e8e300\u5fae\u7c73\uff0c\u7531\u4e8e\u6c14\u6d41\u7684\u4f5c\u7528\uff0c\u5728\u51e0\u79d2\u949f\u5185\u5c31\u4f1a\u843d\u5230\u5730\u9762\u3002\n\u76ee\u524d\uff0c\u536b\u751f\u5f53\u5c40\u786e\u8ba4\u4e86\u4e09\u79cd\u51a0\u72b6\u75c5\u6bd2\u7684\u4f20\u64ad\u9014\u5f84\uff1a\u8bf4\u8bdd\u6216\u54b3\u55fd\u65f6\u4ea7\u751f\u7684\u5c0f\u98de\u6cab\uff0c\u6700\u7ec8\u53ef\u80fd\u8fdb\u5165\u7ad9\u5728\u9644\u8fd1\u4eba\u7684\u773c\u775b\u3001\u5634\u5df4\u6216\u9f3b\u5b50\u91cc\uff1b\u88ab\u6c61\u67d3\u7684\u8868\u9762(\u6742\u7269)\uff0c\u5c3d\u7ba1\u7f8e\u56fd\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u8868\u793a\u8fd9\u662f\u611f\u67d3\u75c5\u6bd2\u7684\u6700\u4e0d\u53ef\u80fd\u7684\u9014\u5f84\uff0c\u4f46\u5f97\u5230\u6b27\u6d32\u75be\u75c5\u63a7\u5236\u548c\u9884\u9632\u4e2d\u5fc3\u89c2\u5bdf\u652f\u6301\u7684\u7ed3\u8bba\u662f\uff0c\u5c1a\u672a\u89c2\u5bdf\u5230\u4e00\u4f8b\u7531\u6742\u97f3\u5f15\u8d77\u7684\u65b0\u51a0\u80ba\u708e\u75c5\u4f8b\u3002\u6700\u540e\uff0c\u8fd8\u6709\u6c14\u6eb6\u80f6\u4f20\u64ad--\u88ab\u611f\u67d3\u8005\u547c\u51fa\u7684\u770b\u4e0d\u89c1\u7684\u4f20\u67d3\u6027\u9897\u7c92\u5438\u5165\uff0c\u4e00\u65e6\u79bb\u5f00\u53e3\u8154\uff0c\u5176\u884c\u4e3a\u65b9\u5f0f\u4e0e\u5438\u70df\u76f8\u4f3c\u3002\u5728\u6ca1\u6709\u901a\u98ce\u7684\u60c5\u51b5\u4e0b\uff0c\u6c14\u6eb6\u80f6\u4ecd\u7136\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53d8\u5f97\u8d8a\u6765\u8d8a\u7a20\u5bc6\u3002\n\u5728\u6ca1\u6709\u901a\u98ce\u7684\u60c5\u51b5\u4e0b\uff0c\u6c14\u6eb6\u80f6\u4ecd\u7136\u60ac\u6d6e\u5728\u7a7a\u6c14\u4e2d\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53d8\u5f97\u8d8a\u6765\u8d8a\u96c6\u4e2d\u3002\n\u5728\u5927\u6d41\u884c\u4e4b\u521d\uff0c\u4eba\u4eec\u8ba4\u4e3a\u6211\u4eec\u54b3\u55fd\u6216\u6253\u55b7\u568f\u65f6\u6392\u51fa\u7684\u5927\u98de\u6cab\u662f\u4e3b\u8981\u7684\u4f20\u64ad\u5a92\u4ecb\u3002\u4f46\u6211\u4eec\u73b0\u5728\u77e5\u9053\uff0c\u5728\u5ba4\u5185\u3001\u901a\u98ce\u4e0d\u826f\u7684\u7a7a\u95f4\u91cc\u957f\u65f6\u95f4\u53eb\u558a\u548c\u5531\u6b4c\u4e5f\u4f1a\u589e\u52a0\u4f20\u67d3\u7684\u98ce\u9669\u3002\u8fd9\u662f\u56e0\u4e3a\u5927\u58f0\u8bf4\u8bdd\u6bd4\u6211\u4eec\u5b8c\u5168\u4e0d\u8bf4\u8bdd\u65f6\u91ca\u653e\u7684\u75c5\u6bd2\u9897\u7c92\u591a50\u500d\u3002\u8fd9\u4e9b\u6c14\u6eb6\u80f6\u5982\u679c\u4e0d\u901a\u8fc7\u901a\u98ce\u6269\u6563\uff0c\u5c31\u4f1a\u53d8\u5f97\u8d8a\u6765\u8d8a\u96c6\u4e2d\uff0c\u8fd9\u5c31\u589e\u52a0\u4e86\u611f\u67d3\u7684\u98ce\u9669\u3002\u79d1\u5b66\u5bb6\u4eec\u5df2\u7ecf\u8bc1\u660e\uff0c\u8fd9\u4e9b\u9897\u7c92\u7269-\u6211\u4eec\u5728\u7b80\u5355\u547c\u5438\u65f6\u4e5f\u4f1a\u91ca\u653e\u5230\u5927\u6c14\u4e2d\uff0c\u53ef\u4ee5\u4ece\u4e0d\u9002\u5f53\u4f69\u6234\u7684\u53e3\u7f69\u4e2d\u9003\u8131-\u53ef\u4ee5\u611f\u67d3\u5728\u611f\u67d3\u8005\u534a\u5f84\u4e94\u7c73\u8303\u56f4\u5185\u505c\u7559\u51e0\u5206\u949f\u4ee5\u4e0a\u7684\u4eba\uff0c\u8fd9\u53d6\u51b3\u4e8e\u65f6\u95f4\u7684\u957f\u77ed\u548c\u76f8\u4e92\u4f5c\u7528\u7684\u6027\u8d28\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u6982\u8ff0\u4e86\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u54ea\u4e9b\u6761\u4ef6\u4f1a\u589e\u52a0\u4f20\u67d3\u98ce\u9669\u3002\n\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b-\u5728\u5c01\u95ed\u7684\u7a7a\u95f4\u91cc\u558a\u53eb\u6216\u5531\u6b4c\u4e00\u4e2a\u5c0f\u65f6-\u4e00\u4e2a\u548c\u65b0\u51a0\u80ba\u708e\u4e00\u8d77\u7684\u4eba\u91ca\u653e\u51fa1,500\u4e2a\u4f20\u67d3\u6027\u5242\u91cf\u3002\n\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b-\u5728\u5c01\u95ed\u7684\u7a7a\u95f4\u91cc\u558a\u53eb\u6216\u5531\u6b4c\u4e00\u4e2a\u5c0f\u65f6-\u4e00\u4e2a\u548c\u65b0\u51a0\u80ba\u708e\u4e00\u8d77\u7684\u4eba\u91ca\u653e\u51fa1,500\u4e2a\u4f20\u67d3\u6027\u5242\u91cf\u3002\n\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b-\u5728\u5c01\u95ed\u7684\u7a7a\u95f4\u91cc\u558a\u53eb\u6216\u5531\u6b4c\u4e00\u4e2a\u5c0f\u65f6-\u4e00\u4e2a\u548c\u65b0\u51a0\u80ba\u708e\u4e00\u8d77\u7684\u4eba\u91ca\u653e\u51fa1,500\u4e2a\u4f20\u67d3\u6027\u5242\u91cf\u3002\n\u4eca\u5e74\u6625\u5929\uff0c\u536b\u751f\u5f53\u5c40\u672a\u80fd\u5173\u6ce8\u6c14\u6eb6\u80f6\u4f20\u64ad\uff0c\u4f46\u6700\u8fd1\u7684\u79d1\u5b66\u51fa\u7248\u7269\u8feb\u4f7f\u4e16\u754c\u536b\u751f\u7ec4\u7ec7(WHO)\u548c\u75be\u63a7\u4e2d\u5fc3\u627f\u8ba4\u8fd9\u4e00\u70b9\u3002\u8457\u540d\u7684\u201c\u79d1\u5b66\u201d\u6742\u5fd7\u4e0a\u7684\u4e00\u7bc7\u6587\u7ae0\u53d1\u73b0\uff0c\u6709\u201c\u538b\u5012\u6027\u7684\u8bc1\u636e\u201d\u8868\u660e\uff0c\u7a7a\u6c14\u4f20\u64ad\u662f\u51a0\u72b6\u75c5\u6bd2\u7684\u201c\u4e3b\u8981\u4f20\u64ad\u9014\u5f84\u201d\uff0c\u75be\u63a7\u4e2d\u5fc3\u73b0\u5728\u6307\u51fa\uff0c\u201c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u5df2\u7ecf\u611f\u67d3\u4e866\u82f1\u5c3a(2\u7c73)\u5916\u7684\u5176\u4ed6\u4eba\u3002\u201d\u8fd9\u4e9b\u4f20\u64ad\u53d1\u751f\u5728\u901a\u98ce\u4e0d\u8db3\u7684\u5c01\u95ed\u7a7a\u95f4\u5185\u3002\u4f8b\u5982\uff0c\u6709\u65f6\u611f\u67d3\u8005\u5728\u5531\u6b4c\u6216\u953b\u70bc\u65f6\u547c\u5438\u6025\u4fc3\u3002\u201c\u3002\n\u5728\u6d3b\u52a8\u4ee5\u53ca\u9152\u5427\u548c\u9910\u9986\u7b49\u573a\u6240\u7206\u53d1\u7684\u51a0\u72b6\u75c5\u6bd2\u662f\u793e\u4f1a\u73af\u5883\u4e2d\u91cd\u8981\u6570\u91cf\u7684\u4f20\u67d3\u75c5\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5b83\u4eec\u662f\u6700\u5177\u7206\u70b8\u6027\u7684\uff1a\u6bcf\u4e00\u6b21\u5728\u591c\u603b\u4f1a\u7206\u53d1\u7684\u75ab\u60c5\u5e73\u5747\u611f\u67d327\u4eba\uff0c\u800c\u5728\u5bb6\u5ead\u805a\u4f1a\u671f\u95f4\u53ea\u67096\u4eba\u611f\u67d3-\u6b63\u5982\u7b2c\u4e00\u5f20\u56fe\u8868\u4e2d\u6240\u89e3\u91ca\u7684\u90a3\u6837\u3002\u5176\u4e2d\u4e00\u6b21\u8d85\u7ea7\u8513\u5ef6\u7684\u75ab\u60c5\u53d1\u751f\u5728\u897f\u73ed\u7259\u5357\u90e8\u57ce\u5e02\u79d1\u5c14\u591a\u74e6\u7684\u4e00\u5bb6\u4ff1\u4e50\u90e8\uff0c\u90a3\u91cc\u670973\u4eba\u5728\u4e00\u665a\u5916\u51fa\u540e\u68c0\u6d4b\u5448\u9633\u6027\u3002\u79d1\u5b66\u5bb6\u6700\u8fd1\u8fd8\u5206\u6790\u4e86\u8d8a\u5357\u4e00\u5bb6\u9152\u5427\u7206\u53d1\u7684\u75ab\u60c5\uff0c\u90a3\u91cc\u670912\u540d\u987e\u5ba2\u611f\u67d3\u4e86\u75c5\u6bd2\u3002\n\u5728\u897f\u73ed\u7259\u536b\u751f\u5f53\u5c40\u8bb0\u5f55\u7684\u51a0\u72b6\u75c5\u6bd2\u75ab\u60c5\u4e2d\uff0c\u5b66\u6821\u4ec5\u53606%\u3002\u5728\u6559\u5ba4\u91cc\u901a\u8fc7\u6c14\u6eb6\u80f6\u4f20\u64ad\u7684\u52a8\u6001\u5b8c\u5168\u53d6\u51b3\u4e8e\u611f\u67d3\u8005-\u6216\u96f6\u53f7\u60a3\u8005-\u662f\u5b66\u751f\u8fd8\u662f\u6559\u5e08\u3002\u6559\u5e08\u7684\u53d1\u8a00\u8fdc\u8fdc\u591a\u4e8e\u5b66\u751f\uff0c\u5e76\u63d0\u9ad8\u4e86\u4ed6\u4eec\u7684\u58f0\u97f3\uff0c\u8fd9\u5c31\u6210\u500d\u5730\u589e\u52a0\u4e86\u6f5c\u5728\u4f20\u67d3\u6027\u7c92\u5b50\u7684\u6392\u6cc4\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u53d7\u611f\u67d3\u7684\u5b66\u751f\u53ea\u4f1a\u5076\u5c14\u8bf4\u8bdd\u3002\u6839\u636e\u897f\u73ed\u7259\u56fd\u5bb6\u7814\u7a76\u59d4\u5458\u4f1a(CSIC)\u7684\u6307\u5bfc\u65b9\u9488\uff0c\u897f\u73ed\u7259\u653f\u5e9c\u5efa\u8bae\u6559\u5ba4\u901a\u98ce-\u5c3d\u7ba1\u8fd9\u53ef\u80fd\u4f1a\u5728\u8f83\u51b7\u7684\u6708\u4efd\u9020\u6210\u4e0d\u9002-\u6216\u8005\u4f7f\u7528\u901a\u98ce\u8bbe\u5907\u3002\n\u4e3a\u4e86\u8ba1\u7b97\u5904\u4e8e\u201c\u5371\u9669\u201d\u72b6\u6001\u7684\u4eba\u4e4b\u95f4\u4f20\u64ad\u7684\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u79d1\u7f57\u62c9\u591a\u5927\u5b66\u4f55\u585e\u00b7\u8def\u6613\u65af\u00b7\u5409\u6885\u5185\u65af\u6559\u6388\u9886\u5bfc\u7684\u4e00\u7ec4\u79d1\u5b66\u5bb6\u5f00\u53d1\u7684Covid\u7a7a\u4e2d\u4f20\u64ad\u4f30\u8ba1\u5668\u3002\u8be5\u5de5\u5177\u65e8\u5728\u5f3a\u8c03\u963b\u788d\u6c14\u6eb6\u80f6\u4f20\u64ad\u7684\u63aa\u65bd\u7684\u91cd\u8981\u6027\u3002\u8fd9\u4e2a\u8ba1\u7b97\u4e0d\u662f\u8be6\u5c3d\u7684\uff0c\u4e5f\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u53ef\u80fd\u5f71\u54cd\u4f20\u64ad\u7684\u65e0\u6570\u53d8\u91cf\uff0c\u4f46\u5b83\u6709\u52a9\u4e8e\u8bf4\u660e\u5982\u4f55\u901a\u8fc7\u6539\u53d8\u6211\u4eec\u786e\u5b9e\u53ef\u4ee5\u63a7\u5236\u7684\u6761\u4ef6\u6765\u964d\u4f4e\u4f20\u67d3\u7684\u98ce\u9669\u3002\n\u5728\u6a21\u62df\u8fc7\u7a0b\u4e2d\uff0c\u53d7\u8bd5\u8005\u4fdd\u6301\u63a8\u8350\u7684\u5b89\u5168\u8ddd\u79bb\uff0c\u6d88\u9664\u4e86\u901a\u8fc7\u98de\u6cab\u4f20\u64ad\u7684\u98ce\u9669\u3002\u4f46\u5982\u679c\u4e0d\u540c\u65f6\u5e94\u7528\u6240\u6709\u53ef\u80fd\u7684\u9884\u9632\u63aa\u65bd\uff1a\u6b63\u786e\u7684\u901a\u98ce\u3001\u7f29\u77ed\u63a5\u89e6\u65f6\u95f4\u3001\u51cf\u5c11\u53c2\u4e0e\u8005\u6570\u91cf\u548c\u6234\u53e3\u7f69\uff0c\u4ed6\u4eec\u4ecd\u7136\u53ef\u80fd\u88ab\u611f\u67d3\u3002\u7406\u60f3\u7684\u60c5\u51b5\u662f\uff0c\u65e0\u8bba\u5728\u4ec0\u4e48\u60c5\u51b5\u4e0b\uff0c\u90fd\u662f\u5728\u6237\u5916\uff0c\u5728\u90a3\u91cc\u4f20\u67d3\u7684\u9897\u7c92\u4f1a\u8fc5\u901f\u6269\u6563\u3002\u5982\u679c\u4e0d\u80fd\u4fdd\u6301\u4e0e\u611f\u67d3\u8005\u7684\u5b89\u5168\u8ddd\u79bb\uff0c\u4f20\u64ad\u7684\u6982\u7387\u5c31\u4f1a\u6210\u500d\u589e\u52a0\uff0c\u56e0\u4e3a\u4e0d\u4ec5\u662f\u6c14\u6eb6\u80f6\uff0c\u8fd8\u4f1a\u6709\u98de\u6cab\u4f20\u67d3\u7684\u98ce\u9669\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u5373\u4f7f\u6709\u901a\u98ce\uff0c\u5982\u679c\u4e24\u4e2a\u4eba\u9760\u5f97\u5f88\u8fd1\uff0c\u4e5f\u4e0d\u8db3\u4ee5\u9a71\u6563\u6c14\u6eb6\u80f6\u3002\n\u8fd9\u4e09\u79cd\u4e0d\u540c\u60c5\u666f\u4e2d\u663e\u793a\u7684\u8ba1\u7b97\u662f\u57fa\u4e8e\u5bf9\u6c14\u6eb6\u80f6\u4f20\u64ad\u5982\u4f55\u53d1\u751f\u7684\u7814\u7a76\uff0c\u4f7f\u7528\u7684\u662f\u7ecf\u8fc7\u8be6\u7ec6\u5206\u6790\u7684\u771f\u5b9e\u7206\u53d1\u3002\u5173\u4e8e\u7406\u89e3\u5ba4\u5185\u4f20\u64ad\u7684\u52a8\u6001\uff0c\u4e00\u4e2a\u975e\u5e38\u4e2d\u80af\u7684\u6848\u4f8b\u662f3\u6708\u4efd\u5728\u7f8e\u56fd\u534e\u76db\u987f\u5dde\u7684\u4e00\u6b21\u5408\u5531\u56e2\u5f69\u6392\u3002120\u540d\u5408\u5531\u56e2\u6210\u5458\u4e2d\u53ea\u670961\u4eba\u53c2\u52a0\u4e86\u5f69\u6392\uff0c\u5e76\u52aa\u529b\u4fdd\u6301\u5b89\u5168\u8ddd\u79bb\u548c\u536b\u751f\u63aa\u65bd\u3002\u4f46\u4ed6\u4eec\u5e76\u4e0d\u77e5\u9053\uff0c\u4ed6\u4eec\u5904\u4e8e\u6700\u5371\u9669\u7684\u60c5\u51b5\u4e0b\uff1a\u6ca1\u6709\u9762\u5177\uff0c\u6ca1\u6709\u901a\u98ce\uff0c\u957f\u65f6\u95f4\u5531\u6b4c\u548c\u5206\u4eab\u7a7a\u95f4\u3002\u5728\u4e24\u4e2a\u534a\u5c0f\u65f6\u7684\u65f6\u95f4\u91cc\uff0c\u53ea\u6709\u4e00\u540d\u611f\u67d3\u8005\u611f\u67d3\u4e8653\u4eba\u3002\u4e00\u4e9b\u611f\u67d3\u8005\u572814\u7c73\u5916\uff0c\u6240\u4ee5\u53ea\u6709\u6c14\u6eb6\u80f6\u624d\u80fd\u89e3\u91ca\u8fd9\u79cd\u4f20\u64ad\u3002\u611f\u67d3\u75c5\u6bd2\u7684\u4eba\u4e2d\u6709\u4e24\u4eba\u6b7b\u4ea1\u3002\n\u5728\u4ed4\u7ec6\u7814\u7a76\u4e86\u8fd9\u6b21\u66b4\u53d1\u540e\uff0c\u79d1\u5b66\u5bb6\u4eec\u80fd\u591f\u8ba1\u7b97\u51fa\uff0c\u5982\u679c\u4ed6\u4eec\u91c7\u53d6\u63aa\u65bd\u9632\u6b62\u7a7a\u4e2d\u4f20\u64ad\uff0c\u98ce\u9669\u53ef\u4ee5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u5f97\u5230\u7f13\u89e3\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6234\u4e86\u53e3\u7f69\uff0c\u98ce\u9669\u5c31\u4f1a\u51cf\u534a\uff0c\u5728\u573a\u7684\u4eba\u4e2d\u53ea\u670944%\u5de6\u53f3\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u800c\u4e0d\u662f87%\u3002\u5982\u679c\u5f69\u6392\u5728\u4e00\u4e2a\u901a\u98ce\u8f83\u591a\u7684\u7a7a\u95f4\u8fdb\u884c\u8f83\u77ed\u7684\u65f6\u95f4\uff0c\u53ea\u4f1a\u6709\u4e24\u540d\u6b4c\u624b\u53d7\u5230\u611f\u67d3\u3002\u8fd9\u4e9b\u8d85\u7ea7\u8513\u5ef6\u7684\u60c5\u666f\u4f3c\u4e4e\u8d8a\u6765\u8d8a\u5bf9\u5927\u6d41\u884c\u7684\u53d1\u5c55\u548c\u4f20\u64ad\u81f3\u5173\u91cd\u8981\uff0c\u8fd9\u610f\u5473\u7740\u62e5\u6709\u5728\u6b64\u7c7b\u6d3b\u52a8\u4e2d\u9632\u6b62\u5927\u89c4\u6a21\u4f20\u64ad\u7684\u5de5\u5177\u662f\u63a7\u5236\u5b83\u7684\u5173\u952e\u3002\n\u65b9\u6cd5\uff1a\u6211\u4eec\u4f7f\u7528\u4e86\u79d1\u7f57\u62c9\u591a\u5927\u5b66\u5927\u6c14\u5316\u5b66\u5bb6\u3001\u7a7a\u6c14\u9897\u7c92\u7269\u5316\u5b66\u548c\u52a8\u529b\u5b66\u4e13\u5bb6\u4f55\u585e\u00b7\u8def\u6613\u65af\u00b7\u5409\u6885\u5185\u65af(Jos\u00e9Luis Jim\u00e9nez)\u5f00\u53d1\u7684\u5de5\u5177\uff0c\u8ba1\u7b97\u4e86\u65b0\u51a0\u80ba\u708e\u611f\u67d3\u7684\u98ce\u9669\u3002\u4e16\u754c\u5404\u5730\u7684\u79d1\u5b66\u5bb6\u5df2\u7ecf\u5ba1\u67e5\u4e86\u8fd9\u4e2a\u4f30\u8ba1\u5668\uff0c\u5b83\u57fa\u4e8e\u516c\u5e03\u7684\u65b9\u6cd5\u548c\u6570\u636e\u6765\u4f30\u8ba1\u611f\u67d3\u60c5\u666f\u4e2d\u6d89\u53ca\u7684\u4e0d\u540c\u53ef\u6d4b\u91cf\u56e0\u7d20\u7684\u91cd\u8981\u6027\u3002\u7136\u800c\uff0cEstimator\u7684\u51c6\u786e\u6027\u662f\u6709\u9650\u7684\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8e\u4ecd\u7136\u4e0d\u786e\u5b9a\u7684\u6570\u5b57-\u4f8b\u5982\uff0c\u63cf\u8ff0\u4e00\u4e2a\u611f\u67d3\u8005\u6392\u653e\u4e86\u591a\u5c11\u4f20\u67d3\u6027\u75c5\u6bd2\u7684\u6570\u5b57\u3002\u4f30\u8ba1\u8005\u5047\u8bbe\u4eba\u4eec\u5b9e\u884c\u4e24\u7c73\u793e\u4ea4\u8ddd\u79bb\u89c4\u5219\uff0c\u6ca1\u6709\u4eba\u80fd\u5e78\u514d\u3002\u6211\u4eec\u7684\u8ba1\u7b97\u662f\u57fa\u4e8e\u4e00\u822c\u4eba\u7fa4\u7684\u9ed8\u8ba4\u503c\uff0c\u5176\u4e2d\u5305\u62ec\u5e7f\u6cdb\u7684\u53e3\u7f69(\u5916\u79d1\u53e3\u7f69\u548c\u5e03\u6599)\u548c\u5927\u58f0\u7684\u58f0\u97f3\uff0c\u8fd9\u4f1a\u589e\u52a0\u6c14\u6eb6\u80f6\u7684\u6392\u51fa\u91cf\u3002", "note_en": "The coronavirus is spread through the air, especially in indoor spaces. While it is not as infectious as measles, scientists now openly acknowledge the role played by the transmission of aerosols \u2013 tiny contagious particles exhaled by an infected person that remain suspended in the air of an indoor environment. How does the transmission work? And, more importantly, how can we stop it?\n These are respiratory droplets that are less than 100 micrometers in diameter that  can remain suspended in the air for hours\n            These are particles that are larger than 300 micrometers and, due to air currents,  fall to the ground in seconds\n   These are respiratory droplets that are less than 100 micrometers in diameter that  can remain suspended in the air for hours\n              These are particles that are larger than 300 micrometers and, due to air currents,  fall to the ground in seconds\n   These are respiratory droplets that are less than 100 micrometers in diameter that  can remain suspended in the air for hours\n                  These are particles that are larger than 300 micrometers and, due to air currents,  fall to the ground in seconds\n   These are respiratory droplets that are less than 100 micrometers in diameter that  can remain suspended in the air for hours\n  These are particles that are larger than 300 micrometers and, due to air currents,  fall to the ground in seconds\n   These are respiratory droplets that are less than 100 micrometers in diameter that  can remain suspended in the air for hours\n  These are particles that are larger than 300 micrometers and, due to air currents,  fall to the ground in seconds\n At present, health authorities recognize three vehicles of coronavirus transmission: the small droplets from speaking or coughing, which can end up in the eyes, mouth or nose of people standing nearby; contaminated surfaces (fomites), although the US Centers for Disease Control and Prevention (CDC) indicates that this is the least likely way to catch the virus, a conclusion backed by the European Center for Disease Control and Prevention\u2019s (ECDC) observation that not a single case of fomite-caused Covid-19 has been observed. Then finally, there is transmission by aerosols \u2013 the inhalation of invisible infectious particles exhaled by an infected person that, once leaving the mouth, behave in a similar way to smoke. Without ventilation, aerosols remain suspended in the air and become increasingly dense as time passes.\n Without ventilation, aerosols remain suspended in the air, becoming increasingly concentrated as time goes by.\n  At the beginning of the pandemic, it was believed that the large droplets we expel when we cough or sneeze were the main vehicle of transmission. But we now know that shouting and singing in indoor, poorly ventilated spaces over a prolonged period of time also increases the risk of contagion. This is because speaking in a loud voice releases 50 times more virus-laden particles than when we don\u2019t speak at all. These aerosols, if not diffused through ventilation, become increasingly concentrated, which increases the risk of infection. Scientists have shown that these particles \u2013 which we also release into the atmosphere when simply breathing and which can escape from improperly worn face masks \u2013 can infect people who spend more than a few minutes within a five-meter radius of an infected person, depending on the length of time and the nature of the interaction. In the following example, we outlined what conditions increase the risk of contagion in this situation.\n In the worst case scenario \u2013 shouting or singing in a closed space for an hour \u2013 a person with Covid-19 releases  1,500 infectious doses.\n   In the worst case scenario \u2013 shouting or singing in a closed space for an hour \u2013 a person with Covid-19 releases  1,500 infectious doses.\n   In the worst case scenario \u2013 shouting or singing in a closed space for an hour \u2013 a person with Covid-19 releases  1,500 infectious doses.\n In spring, health authorities failed to focus on aerosol transmission, but recent scientific publications have forced the World Health Organization (WHO) and the CDC to acknowledge it. An article in the prestigious  Science magazine found that there is \u201c overwhelming evidence\u201d that airborne transmission is a \u201cmajor transmission route\u201d for the coronavirus, and the  CDC now notes that, \u201cunder certain conditions, they seem to have infected others who were more than six feet [two meters] away. These transmissions occurred within enclosed spaces that had inadequate ventilation. Sometimes the infected person was breathing heavily, for example, while singing or exercising.\u201d\n  Coronavirus outbreaks at events, and in establishments such as bars and restaurants, account for an important number of contagions in social settings. What\u2019s more, they are the most explosive: each outbreak in a nightclub infects an average of 27 people, compared to only six during family gatherings \u2013 as explained in the first graphic. One of these superspreading outbreaks took place at a club in the Spanish southern city of C\u00f3rdoba, where  73 people tested positive after a night out. Scientists have also recently analyzed an outbreak in a bar in Vietnam, where 12 patrons contracted the virus.\n   Schools only account for 6% of coronavirus outbreaks recorded by Spanish health authorities. The dynamics of transmission via aerosols in the classroom change completely depending on whether the infected person \u2013 or patient zero \u2013 is a student or a teacher. Teachers talk far more than students and raise their voices to be heard, which multiplies the expulsion of potentially contagious particles. In comparison, an infected student will only speak occasionally. According to the Spanish National Research Council (CSIC) guidelines, the Spanish government has recommended that classrooms be ventilated \u2013 even though this may cause discomfort in the colder months \u2013 or for ventilation units to be used.\n  To calculate the likelihood of transmission between people in \u201cat-risk\u201d situations, we used the  Covid Airborne Transmission Estimator developed by a group of scientists led by Professor Jos\u00e9 Luis Jim\u00e9nez from the University of Colorado. This tool is aimed at highlighting the importance of measures that hinder aerosol transmission. The calculation is not exhaustive nor does it cover all the innumerable variables that can affect transmission, but it serves to illustrate how the risk of contagion can be lowered by changing conditions we do have control over.\n During the simulations, the subjects maintain the recommended safety distance, eliminating the risk of transmission via droplets. But they can still become infected if all possible preventive measures are not simultaneously applied: correct ventilation, shortening the encounters, reducing the number of participants and wearing face masks. The ideal scenario, whatever the context, would be outdoors, where infectious particles are rapidly diffused. If a safe distance from the infected person is not maintained, the probability of transmission is multiplied because there would also be the risk of contagion from droplets \u2013 not just aerosols. Making matters worse, even if there is ventilation, it would not be enough to diffuse the aerosols if the two people were close together.\n The calculations shown in the three different scenarios are based on studies of how aerosol transmission occurs, using real outbreaks that have been analyzed in detail. A very pertinent case with regard to understanding the dynamics of indoor transmission was a choir rehearsal in Washington State, in the United States, in March. Only 61 of the 120 members of the choir attended the rehearsal, and efforts were made to maintain a safety distance and hygiene measures. But unknown to them, they were in a maximum risk scenario: no masks, no ventilation, singing and sharing space over a prolonged period. Just one infected person infected 53 people in the space of two and a half hours. Some of those infected were 14 meters away, so only aerosols would explain the transmission. Two of those who caught the virus died.\n  After studying this outbreak carefully, scientists were able to calculate the extent to which the risk could have been mitigated if they had taken measures against airborne transmission. For example, if masks had been worn, the risk would have been halved and only around 44% of those present would have been affected as opposed to 87%. If the rehearsal had been held over a shorter period of time in a space with more ventilation, only two singers would have become infected. These super-spreading scenarios increasingly appear to be critical to the development and spread of the pandemic, meaning that having tools to prevent mass transmission at such events is key to controlling it.\n Methodology : we calculated the risk of infection from Covid-19 using a tool developed by Jos\u00e9 Luis Jim\u00e9nez, an atmospheric chemist at the University of Colorado and an expert in the chemistry and dynamics of air particles. Scientists around the world have reviewed this Estimator, which is based on published methods and data to estimate the importance of different measurable factors involved in an infection scenario. However, the Estimator\u2019s accuracy is limited as it relies on numbers that are still uncertain \u2013 numbers that describe, for example, how many infectious viruses are emitted by one infected person. The Estimator assumes that people practice the two-meter social distancing rule and that no one is immune. Our calculation is based on a default value for the general population, which includes a wide range of masks (surgical and cloth), and a loud voice, which increases the amount of aerosols expelled.", "posttime": "2020-10-29 12:34:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "coronavirus,\u75c5\u6bd2,\u51a0\u72b6\u75c5\u6bd2,\u4e00\u5802\u8bfe,bar", "title": "\u4e00\u95f4\u623f\u95f4\u3001\u4e00\u95f4\u9152\u5427\u548c\u4e00\u5802\u8bfe\uff1a\u51a0\u72b6\u75c5\u6bd2\u662f\u5982\u4f55\u901a\u8fc7\u7a7a\u6c14\u4f20\u64ad\u7684", "title_en": "A room, a bar and a class: how the coronavirus is spread through the air", "transed": 1, "url": "https://english.elpais.com/society/2020-10-28/a-room-a-bar-and-a-class-how-the-coronavirus-is-spread-through-the-air.html?ssm=TW_CC", "via": "", "real_tags": ["\u75c5\u6bd2", "\u51a0\u72b6\u75c5\u6bd2", "\u4e00\u5802\u8bfe", "bar"]}, {"category": "", "categoryclass": "", "imagename": "042e2c89c0cdcf8c756d4845f68d349f.jpg", "infoid": 1031927, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e3a\u4e86\u5e94\u5bf9\u5176\u4e2d\u7684\u4e00\u4e9b\u6311\u6218\uff0c\u4eca\u5929\uff0cLinkedIn\u63a8\u51fa\u4e86\u4e00\u6b3e\u65b0\u7684\u804c\u4e1a\u6d4f\u89c8\u5668\u5de5\u5177\uff0c\u5e2e\u52a9\u4eba\u4eec\u627e\u5230\u65b0\u7684\u5de5\u4f5c\u3002\u4eca\u5929\u662f\u82f1\u8bed\u6d4b\u8bd5\u7248(\u4e0d\u4e45\u8fd8\u4f1a\u589e\u52a0\u66f4\u591a\u8bed\u8a00)\uff0c\u8fd9\u4e0d\u662f\u53e6\u4e00\u4e2a\u6c42\u804c\u641c\u7d22\u5f15\u64ce\u3002\u8fd9\u662f\u4e00\u79cd\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a\u4eba\u7684\u6280\u80fd\u4e0e\u5979\u6216\u4ed6\u53ef\u80fd\u6ca1\u6709\u8003\u8651\u8fc7\u7684\u5de5\u4f5c\u76f8\u5339\u914d\uff0c\u7136\u540e\u4e3a\u4f60\u63d0\u4f9b\u5efa\u8bae\uff0c\u8bf4\u660e\u4f60\u53ef\u80fd\u60f3\u8981\u5b66\u4e60\u54ea\u4e9b\u989d\u5916\u7684\u6280\u80fd\uff0c\u4ee5\u4fbf\u66f4\u76f8\u5173\u3002\n\u9664\u6b64\u4e4b\u5916\uff0cLinkedIn\u8fd8\u63a8\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u6280\u80fd\u95e8\u6237\u7f51\u7ad9\uff0c\u4e13\u95e8\u7528\u6765\u78e8\u7ec3\u6570\u5b57\u6280\u80fd\uff1b\u5fae\u5999\u7684\u4e2a\u4eba\u8d44\u6599\u56fe\u7247\u201c\u6846\u201d\uff0c\u53ef\u4ee5\u663e\u793a\u4f60\u4ec0\u4e48\u65f6\u5019\u627e\u5de5\u4f5c\uff0c\u4ec0\u4e48\u65f6\u5019\u62db\u8058\uff1b\u8fd8\u6709\u9762\u8bd5\u51c6\u5907\u5de5\u5177\u3002\nLinkedIn\u8003\u8651\u5230\u4e86\u7075\u6d3b\u6027\uff0c\u6b63\u5728\u4f9d\u9760\u81ea\u5df1\u7684\u6570\u636e\u5b9d\u5e93\u6765\u7ed8\u5236\u4eba\u4eec\u5df2\u7ecf\u9009\u62e9\u7684\u4e00\u4e9b\u804c\u4e1a\u9053\u8def\uff0c\u5c06\u8fd9\u4e9b\u6570\u636e\u4e0e\u76ee\u524d\u9700\u6c42\u66f4\u9ad8\u7684\u5de5\u4f5c\u7684\u6570\u636e\u7ed3\u5408\u8d77\u6765\uff0c\u5e76\u8fdb\u884c\u63a8\u65ad\uff0c\u4ee5\u5e2e\u52a9\u4eba\u4eec\u5bf9\u4ed6\u4eec\u53ef\u4ee5\u53bb\u5bfb\u627e\u7684\u5de5\u4f5c\u66f4\u5177\u521b\u9020\u529b\u3002\n\u5982\u679c\u4ed6\u4eec\u76ee\u524d\u7684\u9886\u57df\u6ca1\u6709\u8fd9\u6837\u7684\u4eba\uff0c\u6216\u8005\u4ed6\u4eec\u6b63\u5728\u8003\u8651\u5229\u7528\u5931\u4e1a\u7684\u673a\u4f1a\u91cd\u65b0\u8003\u8651\u81ea\u5df1\u6b63\u5728\u505a\u7684\u4e8b\u60c5(\u5982\u679c\u65b0\u51a0\u80ba\u708e\u6ca1\u6709\u4e3a\u4ed6\u4eec\u505a\u91cd\u65b0\u8003\u8651\u7684\u8bdd)\uff0c\u8fd9\u5c06\u7279\u522b\u6709\u7528\u3002\nLinkedIn\u7ed9\u51fa\u4e86\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5b50\u3002\u5b83\u6307\u51fa\uff0c\u9001\u9910\u670d\u52a1\u4eba\u5458\u548c\u5ba2\u6237\u670d\u52a1\u4e13\u5bb6(\u6309\u9700\u5de5\u4f5c)\u670971%\u7684\u6280\u80fd\u91cd\u53e0\u3002\n\u8fd9\u4e24\u5bb6\u516c\u53f8\u53ef\u80fd\u90fd\u4e0d\u662f\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u201c\u77e5\u8bc6\u578b\u5458\u5de5\u201d(\u6709\u8da3\u7684\u662f\uff0cLinkedIn\u5c06\u81ea\u5df1\u5b9a\u4f4d\u4e3a\u77e5\u8bc6\u578b\u5458\u5de5\uff0c\u56e0\u4e3a\u5230\u76ee\u524d\u4e3a\u6b62\uff0cLinkedIn\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u662f\u7531\u8fd9\u4e00\u7c7b\u522b\u4e3b\u5bfc\u7684\u5de5\u5177)\uff0c\u4f46\u8fd9\u4e24\u5bb6\u516c\u53f8\u90fd\u662f\u4e0e\u5ba2\u6237\u6253\u4ea4\u9053\u7684\u3002LinkedIn\u4f7f\u7528Explorer\u5efa\u8bae\u60a8\u53ef\u4ee5(\u5728\u5176\u5e73\u53f0\u4e0a)\u8fdb\u884c\u54ea\u4e9b\u57f9\u8bad\uff0c\u4ee5\u5b66\u4e60\u6216\u63d0\u9ad8\u60a8\u53ef\u80fd\u5c1a\u672a\u5177\u5907\u7684\u6280\u80fd\u3002\nCareer Explorer\u662fLinkedIn\u53bb\u5e74\u63a8\u51fa\u7684\u6280\u80fd\u8bc4\u4f30\u5de5\u5177\u7684\u53d1\u5c55\uff0c\u8be5\u5de5\u5177\u662f\u4eba\u4eec\u53ef\u4ee5\u8fdb\u884c\u7684\u6d4b\u8bd5\uff0c\u7528\u6765\u9a8c\u8bc1\u4ed6\u4eec\u62e5\u6709\u54ea\u4e9b\u6280\u80fd\uff0c\u4ee5\u53ca\u4ed6\u4eec\u8fd8\u9700\u8981\u5b66\u4e60\u54ea\u4e9b\u6280\u80fd\u6765\u62c5\u4efb\u7279\u5b9a\u7684\u89d2\u8272\u3002\n\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u8fd9\u4e00\u52aa\u529b\u53d1\u6325\u4e86\u66f4\u6709\u9488\u5bf9\u6027\u7684\u590d\u82cf\u4f5c\u7528\uff0c\u4e0e\u5fae\u8f6f(LinkedIn\u7684\u6240\u6709\u8005)\u5408\u4f5c\u5f00\u53d1\u4e86\u6280\u80fd\u57f9\u8bad\uff0c\u4e13\u95e8\u89e3\u51b3\u5c31\u4e1a\u5e02\u573a\u7684\u6570\u5b57\u7f3a\u53e3\uff0c\u586b\u8865\u8fd9\u4e00\u7f3a\u53e3\u53ef\u80fd\u6709\u52a9\u4e8e\u7ecf\u6d4e\u91cd\u5efa\u3002LinkedIn\u8868\u793a\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u7ea6\u67091300\u4e07\u4eba\u4f7f\u7528\u8fd9\u4e9b\u5de5\u5177\u4e3a\u9700\u6c42\u6700\u65fa\u76db\u7684\u5de5\u4f5c\u5b66\u4e60\u65b0\u6280\u80fd\u3002\n\u8fd9\u4e9b\u65b0\u5de5\u5177\u7684\u60f3\u6cd5\u662f\uff0c\u867d\u7136\u4eba\u4eec\u53ef\u80fd\u4f1a\u5931\u53bb\u5de5\u4f5c\uff0c\u4f46\u4ecd\u6709\u5de5\u4f5c\u53ef\u505a\u3002LinkedIn\u81ea\u5df1\u8868\u793a\uff0c\u76ee\u524d\u6709\u8d85\u8fc71400\u4e07\u4e2a\u804c\u4f4d\u7a7a\u7f3a\uff0c\u6bcf\u5468\u6709\u8fd14000\u4e07\u4eba\u6765\u8be5\u7f51\u7ad9\u627e\u5de5\u4f5c\uff0c\u6bcf\u5206\u949f\u67093\u4e2a\u4eba\u88ab\u5f55\u7528\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u51fa\u5982\u4f55\u6700\u597d\u5730\u5c06\u4eba\u4eec\u4e0e\u4ed6\u4eec\u5468\u56f4\u7684\u673a\u4f1a\u8054\u7cfb\u8d77\u6765\u3002\n\u9274\u4e8eLinkedIn\u73b0\u5728\u62e5\u67097.22\u4ebf\u7528\u6237\uff0c\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u5c06\u62db\u8058\u548c\u6c42\u804c\u4f5c\u4e3a\u5176\u4e1a\u52a1\u7684\u6838\u5fc3\u90e8\u5206-\u65e0\u8bba\u662f\u4ece\u6d41\u91cf\u8fd8\u662f\u4ece\u8fd9\u4e9b\u670d\u52a1\u83b7\u5f97\u7684\u6536\u5165\u6765\u770b\uff1b\u6211\u7ecf\u5e38\u8ba4\u4e3a\u5b83\u662f\u4e13\u4e1a\u4eba\u58eb\u53bb\u793e\u4ea4\u548c\u627e\u5de5\u4f5c\u7684\u5730\u65b9-\u63a8\u51fa\u8fd9\u4e9b\u5de5\u5177\u4e0d\u4ec5\u53ef\u4ee5\u5e2e\u52a9LinkedIn\u6210\u4e3a\u6c42\u804c\u8fc7\u7a0b\u4e2d\u66f4\u6709\u7528\u7684\u5408\u4f5c\u4f19\u4f34\u3002\u5b83\u6709\u52a9\u4e8e\u4fdd\u6301\u5c31\u4e1a\u4e1a\u52a1\u7684\u53d1\u5c55\uff0c\u5426\u5219\u5b83\u53ef\u80fd\u4f1a\u611f\u89c9\u6709\u70b9\u505c\u6ede\u4e0d\u524d\u3002\u6bd5\u7adf\uff0c\u5c3d\u7ba1LinkedIn\u4e0a\u7684\u6d3b\u52a8\u5f88\u6d3b\u8dc3\uff0c\u4f46\u5931\u4e1a\u7387\u4ecd\u7136\u5c45\u9ad8\u4e0d\u4e0b\uff0c\u4e00\u4e9b\u4eba\u8ba4\u4e3a\uff0c\u5728\u60c5\u51b5\u518d\u6b21\u597d\u8f6c\u4e4b\u524d\uff0c\u60c5\u51b5\u8fd8\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002", "note_en": "To meet some of that challenge, today,  LinkedIn   is launching a new Career Explorer tool to help people find new jobs. Out in beta today in English (and adding further languages soon), this is not another job search engine. It\u2019s a tool that matches a person\u2019s skills with jobs that she or he might not have otherwise considered, and then provides pointers on what extra skills you might want to learn to be even more relevant.\n Alongside this, LinkedIn is launching a new skills portal specifically to hone digital skills; subtle profile picture \u201cframes\u201d to indicate when you\u2019re looking for work, or when you are hiring; and interview prep tools.\n   Built with flexibility in mind, LinkedIn is leaning on its own trove of data to map some career paths that people have taken, combining that with data it has on jobs that are currently in higher demand, and are extrapolating that to help people get more creative about jobs they could go for.\n This would be especially useful if there are none in their current field, or if they are considering using the opportunity of a job loss to rethink what they are doing (if Covid-19 hasn\u2019t done the rethinking for them).\n The example that LinkedIn gives for how this works is a notable one. It notes that a food server and a customer service specialist (an in-demand job) have a 71% skills overlap.\n Neither might be strictly considered a \u201cknowledge worker\u201d (interesting that LinkedIn is positioning itself in that way, as it\u2019s been a tool largely dominated by the category up to now), but both interface with customers. LinkedIn uses the Explorer to then suggest what training you could undertake (on its platform) to learn or improve the skills you might not already have.\n The Career Explorer is a development on the  skills assessment tool that LinkedIn launched last year, which were tests that people could take to verify what skills they had and what skills they still needed to learn for a particular role.\n In the midst of a pandemic, that  effort took on a more pointed recovery role, with skills training developed in partnership with Microsoft (which owns LinkedIn) specifically to address digital gaps in the employment market, which when filled could help the economy rebuild. LinkedIn said that to date, around 13 million people have used the those tools to learn new skills for the most in-demand jobs.\n The idea with these new tools is that while people may be losing their jobs, there is still work out there. LinkedIn itself says it has more than 14 million positions open right now, with close to 40 million people coming to the site to search for work every week, and three people getting hired each minute. So the aim is to figure out how best to connect people with the opportunities around them.\n And given that LinkedIn, now with 722 million users, has long made recruitment and job searches a central part of its business \u2014 both in terms of traffic and in terms of the revenue it makes from those services; I often think of it as the place where professionals go to network and look for work \u2014 launching these tools not only can help LinkedIn be a more useful partner in the job-search process. It helps keep that jobs business evolving at a time when it otherwise might feel somewhat stagnant. And after all, despite the activity on LinkedIn, unemployment remains high and some believe will get worse before it gets better again.", "posttime": "2020-10-29 12:12:19", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "career", "title": "\nLinkedIn\u7684Career Explorer\u53ef\u4ee5\u6839\u636e\u60a8\u62e5\u6709\u7684\u6280\u80fd\u5e2e\u52a9\u60a8\u8bc6\u522b\u65b0\u7684\u5de5\u4f5c\u7c7b\u578b", "title_en": "\n\t\t\t\tLinkedIn\u2019s Career Explorer helps you identify new kinds of jobs based on the skills you have\t\t\t", "transed": 1, "url": "https://techcrunch.com/2020/10/28/linkedins-career-explorer-helps-you-identify-new-kinds-of-jobs-based-on-the-skills-you-have/", "via": "", "real_tags": ["career"]}, {"category": "", "categoryclass": "", "imagename": "d1a286dcaf224ab950b3a80794bea74f.jpg", "infoid": 1031926, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5c3c\u65e5\u5229\u4e9a\u957f\u8fbe\u4e24\u5468\u534a\u7684#EndSARS\u6297\u8bae\u6d3b\u52a8\u5f15\u8d77\u4e86\u4eba\u4eec\u7684\u5173\u6ce8\uff0c\u5e76\u5728\u8be5\u56fd\u4ee5\u5916\u7684\u5730\u65b9\u63d0\u9ad8\u4e86\u4eba\u4eec\u7684\u610f\u8bc6\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5c3c\u65e5\u5229\u4e9a\u548c\u5168\u7403\u540d\u4eba\u53d1\u8d77\u7684\u4e00\u573a\u7cbe\u660e\u3001\u7cbe\u5fc3\u7b56\u5212\u7684\u8fd0\u52a8\u3002\u4f46\u5982\u679c\u6ca1\u6709\u4e3b\u8981\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u7684\u7edd\u5bf9\u89e6\u89d2\u548c\u76f4\u63a5\u6027\uff0c\u8fd9\u4e00\u5207\u90fd\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u548c\u5e73\u6297\u8bae\u6d3b\u52a8\u6700\u521d\u5728\u7f51\u4e0a\u4f7f\u7528#EndSars\u6807\u7b7e\uff0c\u7136\u540e\u8fc5\u901f\u8513\u5ef6\u5230\u6570\u5343\u4eba\uff0c\u4ed6\u4eec\u52a0\u5165\u4e86\u5c3c\u65e5\u5229\u4e9a\u5927\u57ce\u5e02\u8857\u5934\u7684\u6297\u8bae\u6d3b\u52a8\uff0c\u7136\u540e\u662f\u4f26\u6566\u3001\u591a\u4f26\u591a\u3001\u4f11\u65af\u987f\u548c\u5176\u4ed6\u5730\u65b9\uff0c\u8fd9\u4e5f\u8981\u5f52\u529f\u4e8e\u793e\u4ea4\u5a92\u4f53\u3002\n\u5173\u95ed\u5907\u53d7\u4e89\u8bae\u4e14\u6b8b\u66b4\u7684\u7279\u522b\u53cd\u62a2\u52ab\u961f(SARS)\u7684\u8fd0\u52a8\u5728Twitter\u4e0a\u84ec\u52c3\u53d1\u5c55\uff0c\u4e00\u7cfb\u5217\u91cd\u8981\u7684#EndSARS\u6807\u7b7e\u6210\u4e3a\u5168\u7403\u70ed\u95e8\u8bdd\u9898\uff0c\u88ab\u6570\u767e\u4e07\u6b21\u8f6c\u53d1\u3002\u5c31\u8fde\u63a8\u7279(Twitter)\u795e\u79d8\u7684\u521b\u59cb\u4eba\u6770\u514b\u00b7\u591a\u5c14\u897f(Jack Dorsey)\u4e5f\u52a0\u5165\u4e86\u5c3c\u65e5\u5229\u4e9a\u5e74\u8f7b\u4eba\u7684\u884c\u5217\uff0c\u9f13\u52b1\u5168\u7403\u63a8\u7279\u793e\u533a\u4f7f\u7528\u6bd4\u7279\u5e01\u5411\u6297\u8bae\u7ec4\u7ec7\u8005\u6350\u6b3e\u3002\n\u63a8\u7279\u7ed9\u4e86EndSARS\u6807\u7b7e\u4e00\u4e2a\u5b98\u65b9\u7684\u8868\u60c5\u7b26\u53f7\uff0c\u5e76\u6838\u5b9e\u4e86\u51e0\u4e2a\u7ad9\u5728\u6297\u8bae\u524d\u6cbf\u7684\u7528\u6237\u7684\u63a8\u7279\u8d26\u6237\u3002\u8fd9\u4e00\u652f\u6301\u884c\u52a8\u6709\u52a9\u4e8e\u63d0\u9ad8\u6297\u8bae\u6d3b\u52a8\u7684\u5168\u7403\u53ef\u4fe1\u5ea6\uff0c\u5e76\u4fc3\u8fdb\u4e86\u7ebf\u4e0a\u7ebf\u4e0b\u7684\u8fd0\u52a8\u3002\n\u4f46\u662f\uff0c\u5c3d\u7ba1\u8fd9\u4e2a\u6807\u7b7e\u8d8a\u6765\u8d8a\u706b\uff0c\u5e76\u88ab\u574e\u8036\u00b7\u97e6\u65af\u7279(Kanye West)\u548c\u857e\u54c8\u5a1c(Rihanna)\u7b49\u4eba\u5206\u4eab\uff0c\u4f46\u5728Facebook\u548cInstagram\u4e0a\uff0c\u4e00\u4e9b\u5e26\u6709#EndSARS\u6807\u7b7e\u7684\u5e16\u5b50\u88ab\u9519\u8bef\u5730\u8d34\u4e0a\u4e86\u201c\u5047\u65b0\u95fb\u201d\u7684\u6807\u7b7e\u3002\n\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0cFacebook\u548cInstagram\u7684\u8fd9\u4e9b\u201c\u5047\u65b0\u95fb\u201d\u6807\u7b7e\u65e0\u610f\u4e2d\u5e2e\u52a9\u63a8\u52a8\u4e86\u5c3c\u65e5\u5229\u4e9a\u519b\u961f\u7684\u4e00\u573a\u81ea\u79c1\u81ea\u5229\u7684\u53cd\u5047\u65b0\u95fb\u8fd0\u52a8\u3002\u5468\u4e8c(10\u670820\u65e5)\uff0c\u8eab\u7a7f\u519b\u88c5\u7684\u7537\u5b50\u5728\u62c9\u5404\u65af\u7684Lekki\u6536\u8d39\u95e8\u5411\u624b\u65e0\u5bf8\u94c1\u7684\u548c\u5e73\u6297\u8bae\u8005\u5f00\u706b\u540e\uff0c\u8fd9\u573a\u8fd0\u52a8\u53d7\u5230\u4e86\u5bc6\u5207\u5173\u6ce8\u3002\u5c3c\u65e5\u5229\u4e9a\u519b\u961f\u58f0\u79f0\u5176\u58eb\u5175\u6ca1\u6709\u53c2\u4e0e\u4e00\u4e9b\u4eba\u79f0\u4e4b\u4e3a\u201c\u5927\u5c60\u6740\u201d\u7684\u4e8b\u4ef6\uff0c\u5c3d\u7ba1\u6709\u5927\u91cf\u7684\u89c6\u9891\u8bc1\u636e\u3002\u8bb8\u591a\u5c3c\u65e5\u5229\u4e9a\u4eba\u73b0\u5728\u8ba4\u4e3a\u5b83\u7684\u5ba3\u5e03\u662f\u653f\u5e9c\u8bcb\u6bc1#EndSARS\u6297\u8bae\u6d3b\u52a8\u7684\u5ba3\u4f20\u3002\n\u5728EndSARS\u6297\u8bae\u671f\u95f4\uff0c\u5c3c\u65e5\u5229\u4e9a\u519b\u961f\u53d1\u8d77\u4e86\u201c\u9cc4\u9c7c\u5fae\u7b11\u884c\u52a8\u201d\uff0c\u79f0\u5176\u4e3a\u7f51\u7edc\u6218\uff0c\u4ee5\u5e2e\u52a9\u8bc6\u522b\u548c\u6253\u51fb\u9488\u5bf9\u5c3c\u65e5\u5229\u4e9a\u653f\u5e9c\u7684\u5047\u65b0\u95fb\u3002\u5f53\u519b\u961f\u88ab\u6307\u63a7\u4e09\u5929\u524d\u5728\u62c9\u5404\u65af\u7684Lekki\u6536\u8d39\u7ad9\u5411\u6297\u8bae\u8005\u5f00\u67aa\u65f6\uff0c\u5b83\u5c06\u793e\u4ea4\u5a92\u4f53\u548c\u65b0\u95fb\u5a92\u4f53\u7684\u62a5\u9053\u8d34\u4e0a\u4e86\u5047\u65b0\u95fb\u7684\u6807\u7b7e\u3002\n\u90fd\u662fFacebook Inc.\u65d7\u4e0b\u7684Instagram\u548cFacebook\u5e73\u53f0\u90fd\u5c06\u5305\u542b\u201c#EndSARS\u201d\u548c\u201cPray for Nigia\u201d\u7b49\u8bcd\u8bed\u7684\u5e16\u5b50\uff0c\u4ee5\u53ca\u8840\u8ff9\u6591\u6591\u7684\u5c3c\u65e5\u5229\u4e9a\u56fd\u65d7\u548c\u71c3\u70e7\u7684\u8721\u70db\u7684\u7167\u7247\u90fd\u6807\u8bb0\u4e3a\u5047\u65b0\u95fb\uff0c\u7528\u6237\u88ab\u5f15\u5bfc\u5230\u53e6\u4e00\u7bc7\u65e0\u5173\u7684\u4e8b\u5b9e\u6838\u67e5\u6587\u7ae0\u4e2d\u5bfb\u6c42\u89e3\u91ca\u3002\n\u82f1\u56fdProPrivacy\u7684\u6570\u5b57\u9690\u79c1\u5206\u6790\u5e08\u96f7\u00b7\u6c83\u5c14\u4ec0(Ray Walsh)\u89e3\u91ca\u8bf4\uff1a\u201c\u5f88\u660e\u663e\uff0c\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u7684\u7b97\u6cd5\u5b8c\u5168\u65e0\u6cd5\u533a\u5206\u771f\u5b9e\u5e16\u5b50\u548c\u5047\u65b0\u95fb\uff0c\u8fd9\u5bf9\u7528\u6237\u9020\u6210\u4e86\u4f24\u5bb3\uff0c\u5e76\u8bc1\u660e\u5f53\u5927\u89c4\u6a21\u7a81\u53d1\u65b0\u95fb\u4e8b\u4ef6\u53d1\u751f\u65f6\uff0c\u8fd9\u4e9b\u7b97\u6cd5\u6839\u672c\u4e0d\u80fd\u80dc\u4efb\u4e8b\u5b9e\u6838\u67e5\u5de5\u4f5c\uff0c\u201d\u82f1\u56fdProPrivacy\u7684\u6570\u5b57\u9690\u79c1\u5206\u6790\u5e08\u96f7\u00b7\u6c83\u5c14\u4ec0(Ray Walsh)\u89e3\u91ca\u9053\u3002\n\u5f53\u7136\uff0c\u4e8b\u60c5\u4ece\u6765\u90fd\u4e0d\u662f\u5b8c\u5168\u76f4\u622a\u4e86\u5f53\u7684\u3002\u5728Twitter\u3001Facebook\u3001Instagram\u548cWhatsApp(\u4e5f\u662fFacebook\u65d7\u4e0b\u7684)\u4e0a\u5206\u4eab\u7684\u6570\u5341\u4e2a\u636e\u79f0\u652f\u6301EndSARS\u7684\u5e16\u5b50\u548c\u8eab\u4f53\u6216\u4f24\u8005\u7684\u7167\u7247\u88ab\u6297\u8bae\u7ec4\u7ec7\u8005\u81ea\u5df1\u6807\u8bb0\u4e3a\u865a\u5047\u6216\u8bef\u5bfc\u6027\u7684\uff0c\u4ee5\u907f\u514d\u8be5\u8fd0\u52a8\u7684\u53ef\u4fe1\u5ea6\u53d7\u5230\u73b7\u6c61\u3002\u793e\u4ea4\u5a92\u4f53\u7684\u5f00\u653e\u6027\u610f\u5473\u7740\u5f88\u96be\u63a7\u5236\u6216\u7ba1\u7406\u4fe1\u606f\u6e90\uff0c\u65e0\u8bba\u5b83\u662f\u5408\u6cd5\u7684\u8fd8\u662f\u975e\u6cd5\u7684\u3002\n\u6c83\u5c14\u4ec0\u8bf4\uff1a\u201cInstagram\u548cFacebook\u5fc5\u987b\u5c3d\u4e00\u5207\u52aa\u529b\u786e\u4fdd\u5305\u542b\u6709\u5173\u653f\u5e9c\u884c\u52a8\u7684\u91cd\u8981\u4fe1\u606f\u7684\u771f\u5b9e\u5e16\u5b50\u4e0d\u4f1a\u88ab\u4e0d\u516c\u5e73\u5730\u6807\u8bb0\u4e3a\u5047\u65b0\u95fb\u3002\u201d\n\u81ea\u90a3\u4ee5\u540e\uff0cInstagram\u7684\u516c\u5173\u56e2\u961f\u5728\u63a8\u7279\u4e0a\u53d1\u8868\u4e86\u4e00\u4efd\u9053\u6b49\u58f0\u660e\uff0c\u627f\u8ba4\u9519\u8bef\u5730\u6807\u8bb0\u4e86\u652f\u6301#EndSARS\u7684\u5185\u5bb9\uff0c\u5e76\u5c06\u5176\u6807\u8bb0\u4e3a\u865a\u5047\u5185\u5bb9\u3002\u8be5\u7ec4\u7ec7\u8868\u793a\uff0c\u95ee\u9898\u73b0\u5728\u5df2\u7ecf\u5f97\u5230\u89e3\u51b3\uff0c\u4f46\u6297\u8bae\u6d3b\u52a8\u7684\u652f\u6301\u8005\u62a8\u51fbFacebook\u79ef\u6781\u5e2e\u52a9\u5c3c\u65e5\u5229\u4e9a\u653f\u5e9c\u9a73\u65a5\u6709\u5173\u67aa\u51fb\u4e8b\u4ef6\u7684\u6307\u63a7\u3002\n\u8fd9\u53ea\u662f\u793e\u4ea4\u5a92\u4f53\u9ad8\u7ba1\u5728\u9632\u6b62\u8bef\u5bfc\u6027\u4fe1\u606f\u4f20\u64ad\u65f6\u5982\u4f55\u505a\u51fa\u51b3\u5b9a\u6240\u9762\u4e34\u7684\u6311\u6218\u7684\u6700\u65b0\u4f8b\u8bc1\u3002\u5c24\u5176\u662f\u8138\u4e66\u521b\u59cb\u4eba\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\uff0c\u572811\u67083\u65e5\u7f8e\u56fd\u5927\u9009\u524d\u5915\uff0c\u4ed6\u53d7\u5230\u4e86\u5bc6\u5207\u5173\u6ce8\u548c\u538b\u529b\u3002\u63a8\u7279\u56e0\u8bd5\u56fe\u963b\u6b62\u7528\u6237\u5206\u4eab\u5176\u58f0\u79f0\u5177\u6709\u8bef\u5bfc\u6027\u7684\u65b0\u95fb\u6545\u4e8b\u800c\u5728\u7f8e\u56fd\u5f15\u53d1\u4e86\u91cd\u5927\u4e89\u8bae\uff0c\u5e76\u5f00\u59cb\u5728\u63a8\u6587\u4e0a\u8d34\u4e0a\u4e8b\u5b9e\u6838\u67e5\u6807\u7b7e\u3002\n\u5728\u5c3c\u65e5\u5229\u4e9a\uff0c\u591a\u5c14\u897f\u751a\u81f3\u6307\u8d23\u901a\u8fc7\u79ef\u6781\u652f\u6301\u57fa\u672c\u4e0a\u548c\u5e73\u7684#EndSARS\u6297\u8bae\u6d3b\u52a8\u7684\u8d44\u91d1\u6765\u717d\u52a8\u66b4\u529b\u3002\u524d\u603b\u7edf\u5019\u9009\u4eba\u963f\u8fbe\u59c6\u00b7\u52a0\u5c14\u5df4(Adamu Garba)\u5728\u63a8\u7279\u4e0a\u8868\u793a\uff0c\u4ed6\u5df2\u5c06\u591a\u5c14\u897f\u544a\u4e0a\u5c3c\u65e5\u5229\u4e9a\u4e00\u5bb6\u6cd5\u9662\uff0c\u4ed6\u8981\u6c42\u5411\u5c3c\u65e5\u5229\u4e9a\u653f\u5e9c\u8d54\u507f10\u4ebf\u7f8e\u5143\uff0c\u4ee5\u8d54\u507fEndSARS\u6297\u8bae\u671f\u95f4\u7684\u751f\u547d\u3001\u8d22\u4ea7\u548c\u4fbf\u5229\u635f\u5931\u3002\u6709\u4e89\u8bae\u7684\u63a8\u7279\u7528\u6237\u52a0\u5c14\u5df4\u4e5f\u8981\u6c42\u6cd5\u9662\u4e0b\u4ee4\u505c\u6b62\u63a8\u7279\u5728\u5c3c\u65e5\u5229\u4e9a\u7684\u8fd0\u8425\u3002\n\u5728\u6b64\u5904\u6ce8\u518cEQuartz Africa Weekly Brief\uff0c\u5728\u60a8\u7684\u6536\u4ef6\u7bb1\u4e2d\u83b7\u53d6\u6709\u5173\u975e\u6d32\u5546\u4e1a\u3001\u6280\u672f\u548c\u521b\u65b0\u7684\u65b0\u95fb\u548c\u5206\u6790", "note_en": "The two and a half week-long #EndSARS protests in Nigeria against police brutality has garnered attention and raised awareness far beyond the country\u2019s borders thanks to a savvy, well-planned out campaign boosted by Nigerian and global celebrities. But none of this would have been possible without the sheer reach and immediacy of major social media platforms.\n The peaceful protest started online using the #EndSars hashtag before spreading quickly to thousands of people joining protests on the streets of Nigeria\u2019s big cities and then London, Toronto, Houston, and elsewhere, again thanks to social media.\n  The campaign to shut down the controversial and brutal Special Anti-Robbery Squad (SARS) thrived on Twitter in particular and a series of significant #EndSARS hashtags trended globally with millions of retweets. Even Twitter\u2019s enigmatic founder Jack Dorsey joined young Nigerians in encouraging the global Twitter community to donate to the protest organizers using bitcoin.\n Twitter gave the EndSARS hashtag an official emoji and verified the Twitter accounts of several users at the forefront of the protest. This act of support contributed to the global credibility of the protest and boosted the movement both online and offline.\n But even as the hashtag picked up steam and was shared by the likes of Kanye West and  Rihanna, over on Facebook and Instagram some of the posts with the #EndSARS hashtag were being incorrectly labeled as \u201cfake news.\u201d\n To make things worse, these \u201cfake news\u201d labels by Facebook and Instagram inadvertently helped to promote a self-serving, anti-fake news campaign by the Nigerian Army, which had come under intense scrutiny after men in military uniforms  opened fire on unarmed, peaceful protestors at the Lekki Toll Gate in Lagos on Tuesday (Oct. 20). The Nigerian Army has claimed its soldiers were not involved in what some have labeled a \u201cmassacre\u201d despite plenty of video evidence. Many Nigerians now perceive its announcements as government propaganda to discredit the #EndSARS protest.\n The Nigerian Army had, during the EndSARS protests, launched \u201cOperation Crocodile Smile\u201d which it described as cyber warfare to help identify and counter fake news against the Nigerian government. When the Army was accused of shooting at protesters at the Lekki toll gate in Lagos three days ago,  it labeled social media and news media reports as fake news.\n Instagram and Facebook platforms, which are both owned by Facebook Inc, both flagged posts containing words such as \u201c #EndSARS\u201d and \u201c Pray for Nigeria\u201d and of photos of a\u00a0 blood-stained Nigerian flag\u00a0and a burning candle as fake news, and users were directed to an\u00a0 unrelated fact check article for explanations.\n \u201cIt seems clear the social media platform\u2019s algorithms are completely falling to differentiate between genuine posts and fake news, causing harm to users and serving as evidence that those algorithms simply are not up to the job of fact-checking when large scale breaking news event occurs,\u201d explained Ray Walsh, a digital privacy analyst at ProPrivacy based in the UK.\n Of course, things are never completely straightforward. There have been dozens of supposedly pro-EndSARS posts and photos of dead bodies or wounded people shared on Twitter, Facebook, Instagram, and WhatsApp (also owned by Facebook) which have been flagged as false or misleading by the protest organizers themselves in a bid to avoid the movement\u2019s credibility being tarnished. The open nature of social media means it is difficult to control or manage the sources of information whether it is legitimate or otherwise.\n \u201cInstagram and Facebook must make every effort to ensure that genuine posts containing important information about the government\u2019s actions are not being unfairly flagged as fake news,\u201d says Walsh.\n Instagram\u2019s public relations team has since released a statement of  apology on Twitter admitting it incorrectly flagged content supporting #EndSARS and marking them as false. It says the issue has now been resolved, but supporters of the protest have  slammed Facebook for actively helping the Nigerian government refute allegations about the shooting.\n It\u2019s just the latest example of the challenge  social media\u2019s executives face in how to make decisions when it comes to preventing the  spread of misleading information. Facebook\u2019s founder Mark Zuckerberg, in particular, is under scrutiny and pressure in the run-up to the US elections on Nov. 3. Twitter has run into major controversy in the US by attempting to block users from sharing a news story which it  claimed was misleading and it has taken to labeling tweets with fact-check tags.\n In Nigeria, Dorsey has even been accusing of inciting violence by actively supporting the funding of the mostly peaceful #EndSARS protests. Adamu Garba, a former presidential candidate  tweeted he has charged Dorsey to a Nigerian court and he is demanding a compensation of $1 billion to be paid to the Nigerian government for the loss of lives, properties and convenience during the EndSARS protest. Garba, a controversial Twitter user is also demanding that a court order is given to stop Twitter from operating in Nigeria.\n Sign up to the\u00a0 Quartz Africa Weekly Brief here\u00a0for news and analysis on African business, tech, and innovation in your inbox", "posttime": "2020-10-29 12:11:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "facebook,\u6297\u8bae,posts,endsars", "title": "Facebook\u548cInstagram\u9519\u8bef\u5730\u5c06\u5c3c\u65e5\u5229\u4e9aEndSARS\u6297\u8bae\u6d3b\u52a8\u7684\u4e00\u4e9b\u5e16\u5b50\u8d34\u4e0a\u4e86\u201c\u5047\u65b0\u95fb\u201d\u7684\u6807\u7b7e\uff0c\u800cTwitter\u5219\u79ef\u6781\u589e\u52a0\u4e86\u5173\u4e8e\u57fa\u672c\u4e0a\u548c\u5e73\u7684\u6297\u8bae\u6d3b\u52a8\u7684\u5e16\u5b50", "title_en": "Facebook and Instagram mislabeled some posts on Nigeria's EndSARS protests as \u201cfake news\u201d, while Twitter actively boosted posts on the mostly peaceful protests", "transed": 1, "url": "https://qz.com/africa/1922372/facebook-hurt-nigerias-endsars-protest-while-twitter-boosted-it/", "via": "", "real_tags": ["facebook", "\u6297\u8bae", "posts", "endsars"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1031924, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1876\u5e743\u6708\uff0c\u5e74\u8f7b\u7684\u897f\u683c\u8499\u5fb7\u00b7\u5f17\u6d1b\u4f0a\u5fb7(Sigmund Freud)\u62b5\u8fbe\u7684\u91cc\u96c5\u65af\u7279\uff0c\u5bfb\u627e\u9cd7\u9c7c\u7684\u777e\u4e38\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u4e2a\u4e16\u7eaa\u91cc\uff0c\u8fd9\u4e9b\u9ebb\u70e6\u7684\u5668\u5b98\u88ab\u8bc1\u660e\u662f\u96be\u4ee5\u6349\u6478\u7684\u3002\u5c3d\u7ba1\u8fdb\u884c\u4e86\u6700\u5bc6\u96c6\u7684--\u66f4\u4e0d\u7528\u8bf4\u79c1\u5bc6\u7684--\u7814\u7a76\uff0c\u4f46\u6ca1\u6709\u4eba\u8bbe\u6cd5\u8ffd\u8e2a\u5230\u4ed6\u4eec\u3002\u7136\u800c\uff0c\u6700\u8fd1\uff0c\u6ce2\u5170\u79d1\u5b66\u5bb6\u897f\u8499\u00b7\u5fb7\u00b7\u5e0c\u5c14\u65af\u57fa(Simone De Syrski)\u58f0\u79f0\u5df2\u7ecf\u89e3\u5f00\u4e86\u8fd9\u4e2a\u8c1c\u56e2\uff0c\u5f53\u65f6\u5728\u7ef4\u4e5f\u7eb3\u5927\u5b66(University Of\u7ef4\u4e5f\u7eb3)\u5f88\u6709\u524d\u9014\u7684\u533b\u79d1\u5b66\u751f\u5f17\u6d1b\u4f0a\u5fb7(Freud)\u88ab\u6d3e\u53bb\u770b\u770b\u4ed6\u662f\u5426\u6b63\u786e\u3002\n\u5f17\u6d1b\u4f0a\u5fb7\u5728\u5927\u5b66\u65b0\u7684\u6d77\u6d0b\u751f\u7269\u7814\u7a76\u6240\u5b89\u987f\u4e0b\u6765\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u4e00\u4e2a\u6708\u91cc\u89e3\u5256\u4e86400\u591a\u4e2a\u6837\u672c\u3002\u5373\u4f7f\u5bf9\u4e8e\u6700\u70ed\u5fc3\u7684\u7814\u7a76\u4eba\u5458\u6765\u8bf4\uff0c\u8fd9\u4e5f\u4e00\u5b9a\u662f\u4e00\u9879\u4e0d\u4ee4\u4eba\u7fa1\u6155\u7684\u4efb\u52a1\uff1a\u9ecf\u7cca\u7cca\u7684\uff0c\u81ed\u6c14\u718f\u5929\u7684\uff0c\u9971\u53d7\u632b\u6298\u7684\u56f0\u6270\u3002\u4f46\u5f17\u6d1b\u4f0a\u5fb7\u51b3\u5fc3\u8bc1\u660e\u4ed6\u6709\u6210\u4e3a\u4e00\u540d\u771f\u6b63\u79d1\u5b66\u5bb6\u7684\u52c7\u6c14-\u4ed6\u77e5\u9053\u8fd9\u6709\u591a\u5371\u9669\u3002\u9cd7\u9c7c\u6027\u817a\u7684\u5b58\u5728\u8fdc\u975e\u4ec5\u4ec5\u662f\u52a8\u7269\u5b66\u4e0a\u7684\u597d\u5947\uff0c\u5b83\u7684\u5b58\u5728\u4e0d\u4ec5\u4f1a\u52a8\u6447\u7e41\u6b96\u7406\u8bba\u7684\u57fa\u7840\uff0c\u800c\u4e14\u4f1a\u52a8\u6447\u79d1\u5b66\u65b9\u6cd5\u672c\u8eab\u7684\u57fa\u7840\u3002\n\u81ea\u4ece\u5e0c\u814a\u79d1\u5b66\u8bde\u751f\u4ee5\u6765\uff0c\u4eba\u4eec\u5c31\u8ba4\u8bc6\u5230\u6240\u6709\u52a8\u7269\u7684\u8d77\u6e90\u90fd\u5f52\u529f\u4e8e\u67d0\u79cd\u5f62\u5f0f\u7684\u7e41\u6b96\u3002\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\uff0c\u8fd9\u79cd\u673a\u5236\u4e0e\u6027\u6709\u5173\u3002\u901a\u8fc7\u751f\u7269\u96c4\u6027\u548c\u751f\u7269\u96cc\u6027\u7684\u7ed3\u5408\u4ea7\u751f\u4e86\u4e00\u4e2a\u7269\u79cd\u7684\u65b0\u4f8b\u5b50\u3002\u8bda\u7136\uff0c\u6bcf\u4e2a\u6027\u522b\u5230\u5e95\u5bf9\u8fd9\u4e00\u8fc7\u7a0b\u505a\u51fa\u4e86\u4ec0\u4e48\u8d21\u732e\u8fd8\u4e0d\u592a\u6e05\u695a\u3002\u4e5f\u8bb8\u7b2c\u4e00\u4e2a\u7cfb\u7edf\u5730\u7814\u7a76\u8fd9\u4e2a\u95ee\u9898\u7684\u662f\u4e9a\u91cc\u58eb\u591a\u5fb7\u3002\u5728\u4ed6\u770b\u6765\uff0c\u96cc\u6027\u63d0\u4f9b\u4e86\u8840\u8089\uff0c\u800c\u96c4\u6027\u7684\u79cd\u5b50\u7ed9\u5b83\u6ce8\u5165\u4e86\u751f\u547d\uff0c\u5e76\u8d4b\u4e88\u4e86\u540e\u4ee3\u201c\u5f62\u5f0f\u201d\u3002\u4eba\u4eec\u53ef\u80fd\u4f1a\u5bf9\u7ec6\u8282\u5439\u6bdb\u6c42\u75b5\uff0c\u4f46\u663e\u7136\u9700\u8981\u4e24\u4e2a\u5bb9\u6613\u533a\u5206\u7684\u6027\u522b\u3002\n\u7136\u800c\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u52a8\u7269\u6765\u8bf4\uff0c\u60c5\u51b5\u4f3c\u4e4e\u5e76\u975e\u5982\u6b64\u3002\u867d\u7136\u5b83\u4eec\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7e41\u6b96\uff0c\u4f46\u5b83\u4eec\u4f3c\u4e4e\u6ca1\u6709\u6027\u884c\u4e3a-\u8981\u4e48\u662f\u56e0\u4e3a\u5b83\u4eec\u4ece\u672a\u88ab\u6293\u5230\u65d7\u5e1c\u9c9c\u660e\uff0c\u8981\u4e48\u662f\u56e0\u4e3a\u6ca1\u6709\u4eba\u80fd\u591f\u8bc6\u522b\u96c4\u6027\u548c\u96cc\u6027\u54c1\u79cd\u3002\u82cd\u8747\u3001\u86af\u8693\u3001\u6d77\u7ef5\u548c\u6d77\u87ba\u90fd\u662f\u4f8b\u5b50\u3002\u4f46\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u6709\u8da3\u7684\u662f\u56de\u6d41\u9cd7\u9c7c\u3002\u867d\u7136\u5b83\u4eec\u770b\u8d77\u6765\u5f88\u50cf\u86c7\uff0c\u884c\u4e3a\u4e5f\u5f88\u50cf\u9c7c\uff0c\u4f46\u5b83\u4eec\u662f\u552f\u4e00\u4e00\u79cd\u4ece\u672a\u88ab\u89c2\u5bdf\u5230\u4ea7\u5375\u6216\u751f\u4e0b\u5e7c\u5d3d\u7684\u591a\u8840\u52a8\u7269\u3002\u4ed6\u4eec\u751a\u81f3\u770b\u8d77\u6765\u90fd\u6ca1\u6709\u751f\u6b96\u5668\u3002\u81ea\u53e4\u4ee5\u6765\u5c31\u662f\u6b27\u6d32\u83dc\u80b4\u7684\u4e2d\u6d41\u7825\u67f1\uff0c\u4ece\u672a\u6709\u6807\u672c\u5e26\u7740\u5375\u5b50\u843d\u5730\uff0c\u4e5f\u6ca1\u6709\u7528\u9910\u8005\u53d1\u73b0\u4ed6\u4eec\u7684\u83dc\u88ab\u9709\u83cc\u5f04\u810f\u4e86\u3002\n\u90a3\u4e48\uff0c\u8fd9\u4e9b\u751f\u7269\u662f\u5982\u4f55\u7e41\u6b96\u7684\u5462\uff1f\u53c8\u4e00\u6b21\uff0c\u662f\u4e9a\u91cc\u58eb\u591a\u5fb7\u7ed9\u51fa\u4e86\u7b54\u6848\u3002\u4ed6\u63a8\u8bba\u8bf4\uff0c\u5982\u679c\u5b83\u4eec\u6ca1\u6709\u53d1\u751f\u6027\u5173\u7cfb\uff0c\u5b83\u4eec\u4e00\u5b9a\u662f\u4ece\u975e\u751f\u7269\u7269\u8d28\u4e2d\u81ea\u53d1\u4ea7\u751f\u7684\u3002\u6b63\u5982\u4ed6\u5728\u201c\u9000\u5316\u52a8\u7269\u201d\u4e2d\u6240\u89e3\u91ca\u7684\u90a3\u6837\uff0c\u6240\u6709\u751f\u7269\u7684\u5b58\u5728\u90fd\u8981\u5f52\u529f\u4e8e\u80ba\u6c14\u80bf-\u5b57\u9762\u610f\u601d\u662f\u201c\u751f\u547d\u7684\u547c\u5438\u201d\u3002\u8fd9\u91cc\u9762\u5305\u542b\u4e86\u4e00\u79cd\u201c\u751f\u547d\u70ed\u201d\uff0c\u5c31\u50cf\u592a\u9633\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u751f\u7269\u751f\u957f\u3002\u5f53\u5b83\u4e0e\u201c\u57fa\u672c\u7269\u8d28\u201d--\u6784\u6210\u6240\u6709\u751f\u7269\u7684\u7269\u8d28--\u76f8\u4e92\u4f5c\u7528\u65f6\uff0c\u5b83\u5bfc\u81f4\u4e86\u751f\u547d\u7684\u51fa\u73b0\u3002\u5f53\u7136\uff0c\u8fd9\u6b63\u662f\u6709\u6027\u7e41\u6b96\u6240\u53d1\u751f\u7684\uff0c\u4eba\u7c7b\u7684\u79cd\u5b50\u542b\u6709\u80ba\u6c14\u80bf\uff1b\u4f46\u5982\u679c\u6709\u5408\u9002\u7684\u7269\u8d28\u6761\u4ef6\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5728\u91ce\u5916\u81ea\u53d1\u53d1\u751f\u3002\u4e0d\u7528\u8bf4\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u201c\u5143\u7d20\u7269\u8d28\u201d\u4f1a\u4ea7\u751f\u4e0d\u540c\u7c7b\u578b\u7684\u751f\u7269\uff1b\u4f46\u4e9a\u91cc\u58eb\u591a\u5fb7\u8ba4\u4e3a\u67d0\u79cd\u8150\u70c2\u7684\u8986\u76d6\u7269\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u82cd\u8747\u4ece\u201c\u5df2\u5206\u5f00\u7684\u7caa\u4fbf\u201d\u4e2d\u51fa\u73b0\uff1b\u85e4\u58f6\u201c\u5728\u8239\u2026\u7684\u4e00\u4fa7\u3002\u5f53\u6ce1\u6cab\u6ce5\u6d46\u8150\u70c2\u65f6\u201c\uff1b\u9cd7\u9c7c\u5728\u201d\u6ce5\u6cde\u6f6e\u6e7f\u7684\u571f\u5730\u4e0a\u201c\u3002\n\u4e9a\u91cc\u58eb\u591a\u5fb7\u7684\u81ea\u53d1\u751f\u6210\u7406\u8bba\u81ea\u53e4\u4ee5\u6765\u5c31\u5e7f\u53d7\u6b22\u8fce\u3002\u867d\u7136\u4e0d\u662f\u6240\u6709\u4eba\u90fd\u540c\u610f\u9cd7\u9c7c\u662f\u4ece\u6ce5\u4e2d\u8bde\u751f\u7684\uff0c\u4f46\u6240\u6709\u7684\u81ea\u7136\u54f2\u5b66\u5bb6\u90fd\u540c\u610f\u4ed6\u7684\u89c2\u70b9\uff0c\u5373\u5728\u6ca1\u6709\u4efb\u4f55\u660e\u663e\u7684\u751f\u6b96\u5668\u7684\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u5fc5\u987b\u4ee5\u65e0\u6027\u65b9\u5f0f\u7e41\u6b96\u3002\u63d0\u4f9b\u4e86\u5404\u79cd\u5404\u6837\u7684\u89e3\u91ca\u3002\u8001\u666e\u6797\u5c3c\u8ba4\u4e3a\uff0c\u5f53\u4ed6\u4eec\u5728\u5ca9\u77f3\u4e0a\u6469\u64e6\u65f6\uff0c\u4ece\u4ed6\u4eec\u8eab\u4e0a\u6389\u4e0b\u6765\u7684\u76ae\u80a4\u9897\u7c92\u5c31\u50cf\u5c0f\u9cd7\u9c7c\u4e00\u6837\u6d3b\u4e86\u8fc7\u6765\u3002\u5927\u7ea6\u4e00\u4e2a\u4e16\u7eaa\u540e\uff0c\u5e0c\u814a\u7f57\u9a6c\u8bd7\u4eba\u5965\u76ae\u6069\u8ba4\u4e3a\uff0c\u9cd7\u9c7c\u6709\u4e00\u79cd\u76f8\u4e92\u7f20\u7ed5\u7684\u4e60\u60ef\uff0c\u4f1a\u4ea7\u751f\u4e00\u79cd\u6ce1\u6cab\u5206\u6ccc\u7269\uff0c\u5f53\u5b83\u6389\u8fdb\u4e0b\u9762\u7684\u6c99\u5b50\u91cc\u65f6\uff0c\u5c31\u4f1a\u8ff8\u53d1\u51fa\u751f\u547d\u3002\n\u4fdd\u7559\u5728\u62c9\u4e01\u8bed\u548c\u963f\u62c9\u4f2f\u8bed\u7684\u4f20\u7edf\u4e2d\uff0c\u81ea\u53d1\u7e41\u6b96\u5728\u6b64\u540e\u76841000\u591a\u5e74\u91cc\u4e00\u76f4\u88ab\u8ba4\u4e3a\u662f\u9cd7\u9c7c\u7e41\u6b96\u7684\u6700\u53ef\u4fe1\u7684\u89e3\u91ca\u3002\u5f88\u5c11\u80fd\u542c\u5230\u53cd\u5bf9\u7684\u58f0\u97f3\u3002\u5bbe\u6839\u7684\u5e0c\u5c14\u5fb7\u52a0\u5fb7(1098-1179)\u65e0\u6cd5\u76f8\u4fe1\u4e0a\u5e1d\u4f1a\u521b\u9020\u51fa\u4e0e\u5176\u4ed6\u9c7c\u7c7b\u4e0d\u540c\u7684\u9cd7\u9c7c\uff0c\u4ed6\u8ba4\u4e3a\u5047\u8bbe\u9cd7\u9c7c\u4ee5\u96c4\u6027\u548c\u96cc\u6027\u7684\u5f62\u5f0f\u5b58\u5728\u662f\u5408\u4e4e\u903b\u8f91\u7684\uff0c\u56e0\u6b64\u5b83\u4eec\u5fc5\u987b\u6709\u6027\u7e41\u6b96\u3002\u4e3a\u4e86\u514b\u670d\u751f\u6b96\u5668\u5b54\u660e\u663e\u7f3a\u5931\u7684\u95ee\u9898\uff0c\u5979\u63d0\u51fa\u4e86\u4e00\u79cd\u7406\u8bba\u3002\u5979\u8bf4\uff0c\u6bcf\u5e74\u51ac\u5929\uff0c\u96cc\u6027\u5927\u7329\u7329\u90fd\u4f1a\u6311\u9009\u4e00\u5757\u6f02\u4eae\u7684\u77f3\u5934\uff0c\u628a\u201c\u9a6c\u8c46\u5927\u5c0f\u7684\u79cd\u5b50\u201d\u5410\u5728\u4e0a\u9762\u3002\u5f53\u96c4\u6027\u770b\u5230\u8fd9\u4e00\u70b9\u65f6\uff0c\u5b83\u4f1a\u5306\u5fd9\u8dd1\u8fc7\u53bb\uff0c\u628a\u201c\u50cf\u725b\u5976\u4e00\u6837\u7684\u4e1c\u897f\u5410\u5230\u79cd\u5b50\u4e0a\u201d--\u8fd9\u8ba9\u96cc\u6027\u975e\u5e38\u6124\u6012\u3002\n\u5728\u6587\u827a\u590d\u5174\u65f6\u671f\uff0c\u60c5\u51b5\u5f00\u59cb\u53d1\u751f\u53d8\u5316\u3002\u65b0\u7684\u6587\u672c\u5b9e\u8df5\u57f9\u517b\u4e86\u5bf9\u53e4\u5178\u4f5c\u5bb6\u66f4\u5177\u6279\u5224\u6027\u7684\u6001\u5ea6\uff1b\u968f\u7740\u4e9a\u91cc\u58eb\u591a\u5fb7\u7684\u6743\u5a01\u53d7\u5230\u8d28\u7591\uff0c\u5bf9\u81ea\u53d1\u751f\u6210\u7684\u4fe1\u4ef0\u5f00\u59cb\u964d\u6e29\u3002\u867d\u7136\u8fd8\u6ca1\u6709\u4eba\u8ba4\u4e3a\u6709\u7406\u7531\u6000\u7591\u5b83\u7684\u5185\u5728\u6709\u6548\u6027\uff0c\u4f46\u5927\u591a\u6570\u4eba\u4e0d\u613f\u63a5\u53d7\u5b83\u4f5c\u4e3a\u9cd7\u9c7c\u7e41\u6b96\u7684\u552f\u4e00\u89e3\u91ca-\u7279\u522b\u662f\u5728\u5b83\u4f3c\u4e4e\u4e0e\u89c2\u5bdf\u76f8\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\u3002\u5c3d\u7ba1\u6cd5\u56fd\u533b\u751f\u7eaa\u5c27\u59c6\u00b7\u6717\u5fb7\u83b1(Guillaume rondelet\uff0c1507\u5e74\u81f31566\u5e74)\u6070\u5982\u5176\u5206\u5730\u91cd\u590d\u4e86\u4e9a\u91cc\u58eb\u591a\u5fb7\u7684\u8bf4\u6cd5\uff0c\u5373\u201c\u9cd7\u9c7c\u5c31\u50cf\u8815\u866b\u4e00\u6837\uff0c\u662f\u5728\u8150\u70c2\u7684\u65f6\u5019\u4ea7\u751f\u7684\u201d\uff0c\u4f46\u4ed6\u5c06\u5965\u76ae\u5b89\u7684\u610f\u601d\u89e3\u91ca\u4e3a\uff0c\u81f3\u5c11\u6709\u4e00\u4e9b\u4eba\u53ef\u80fd\u4f1a\u4ece\u201c\u7537\u6027\u548c\u5973\u6027\u7684\u4ea4\u7ec7\u201d\u4e2d\u6709\u6027\u7e41\u6b96-\u5e76\u540e\u6094\u81ea\u5df1\u65e0\u6cd5\u6e05\u695a\u5730\u533a\u5206\u4e24\u8005\u3002\u5eb7\u62c9\u5fb7\u00b7\u76d6\u65af\u7eb3(Conrad Gessner\uff0c1516-65\u5e74)\u4e5f\u6709\u7c7b\u4f3c\u7684\u89c2\u70b9\u3002\u5c31\u50cf\u963f\u5c14\u8d1d\u7279\u65af\u00b7\u9a6c\u683c\u52aa\u65af(Albertus Magnus)\u4e00\u6837\uff0c\u4ed6\u542c\u8bf4\u8fc7\u9cd7\u9c7c\u4ea7\u4ed4\u7684\u6545\u4e8b\uff0c\u56e0\u6b64\u731c\u6d4b\u81f3\u5c11\u6709\u4e00\u4e9b\u9cd7\u9c7c\u662f\u80ce\u751f\u7684\uff1b\u4f46\u7531\u4e8e\u4ed6\u65e2\u4e0d\u80fd\u53d1\u8a93\u6709\u6027\u7684\u5b58\u5728\uff0c\u4e5f\u4e0d\u80fd\u9884\u8a00\u5b83\u4eec\u7684\u4ea4\u914d\u65b9\u5f0f\uff0c\u4ed6\u611f\u5230\u6709\u4e00\u79cd\u52c9\u5f3a\u7684\u4e49\u52a1\uff0c\u5fc5\u987b\u4fdd\u7559\u5176\u4ed6\u4eba\u53ef\u80fd\u901a\u8fc7\u4e0d\u540c\u65b9\u5f0f\u4ea7\u751f\u7684\u53ef\u80fd\u6027\u3002\n\u572816\u4e16\u7eaa\u672b\uff0c\u4e00\u4e9b\u5b9e\u9a8c\u8005\u88ab\u65b0\u7684\u63a2\u7a76\u7cbe\u795e\u6240\u6fc0\u53d1\uff0c\u5f00\u59cb\u8d28\u7591\u81ea\u53d1\u751f\u6210\u7406\u8bba\u662f\u5426\u771f\u7684\u50cf\u5b83\u66fe\u7ecf\u770b\u8d77\u6765\u7684\u90a3\u6837\u5f3a\u5927\u3002\u4ed6\u4eec\u7684\u7591\u8651\u6700\u521d\u662f\u7531\u82cd\u8747\u5f15\u8d77\u7684\u3002\u867d\u7136\u4e9a\u91cc\u58eb\u591a\u5fb7\u58f0\u79f0\u82cd\u8747\u662f\u7531\u8150\u70c2\u4ea7\u751f\u7684\uff0c\u4f46\u4e4c\u5229\u65af\u00b7\u963f\u5c14\u591a\u592b\u5170\u8fea(Ulisse Aldovrandi\uff0c1522-1605)\u6307\u51fa\uff0c\u82cd\u8747\u751f\u957f\u7684\u86c6\u53ea\u51fa\u73b0\u5728\u5176\u4ed6\u82cd\u8747\u4e4b\u524d\u964d\u843d\u8fc7\u7684\u8089\u7c7b\u4e0a-\u56e0\u6b64\u63a8\u6d4b\u8fd9\u4e24\u4ef6\u4e8b\u4e4b\u95f4\u80af\u5b9a\u6709\u8054\u7cfb\u3002\u8fd9\u79cd\u8054\u7cfb\u53ef\u80fd\u662f\u7531\u82f1\u56fd\u79d1\u5b66\u5bb6\u5a01\u5ec9\u00b7\u54c8\u7ef4(William Harvey\uff0c1578-1657)\u63d0\u51fa\u7684\u3002\u5728\u89e3\u5256\u4e86\u6570\u767e\u53ea\u6000\u5b55\u7684\u9e7f\u4e4b\u540e\uff0c\u54c8\u7ef4\u63a8\u6d4b\uff0c\u867d\u7136\u6000\u5b55\u7684\u5934\u51e0\u5468\u5b50\u5bab\u4e2d\u6ca1\u6709\u53ef\u89c1\u7684\u80da\u80ce\uff0c\u4f46\u4eba\u773c\u770b\u4e0d\u89c1\u7684\u5fae\u5c0f\u5375\u5b50\u80af\u5b9a\u5b58\u5728\u3002\u4e3a\u4e86\u8fdb\u4e00\u6b65\u63a2\u7d22\u8fd9\u4e00\u903b\u8f91\uff0c\u5f17\u6717\u897f\u65af\u79d1\u00b7\u96f7\u8fea(Francesco Redi\uff0c1526-97\u5e74)\u5047\u8bbe\uff0c\u5f53\u82cd\u8747\u964d\u843d\u5728\u8150\u70c2\u7684\u8089\u4e0a\u65f6\uff0c\u5b83\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u8089\u4e0a\u4ea7\u5375\uff0c\u4ece\u4e2d\u5b75\u5316\u51fa\u86c6-\u5e76\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u4ee5\u8bc1\u660e\u4ec5\u9760\u8150\u70c2\u7684\u8089\u662f\u4e0d\u4f1a\u4ea7\u751f\u751f\u547d\u7684\u3002\n\u6700\u7ec8\u8bc1\u660e\uff0c\u968f\u7740\u663e\u5fae\u955c\u7684\u53d1\u660e\uff0c\u96f7\u8fea\u7684\u7406\u8bba\u5bf9\u81ea\u7136\u4ea7\u751f\u9020\u6210\u4e86\u4e25\u91cd\u7684\u6253\u51fb\u3002\u4e0d\u8fc7\uff0c\u5e76\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u4fe1\u670d\u3002\u591a\u5e74\u6765\uff0c\u4e00\u4f4d\u540d\u53eb\u7ea6\u7ff0\u00b7\u674e\u7ea6\u745f(John Needham\uff0c1713-81\u5e74)\u7684\u82f1\u56fd\u7267\u5e08\u8bd5\u56fe\u901a\u8fc7\u5728\u716e\u719f\u7684\u8089\u6c64\u4e2d\u5bfb\u627e\u751f\u547d\u6765\u8bc1\u660e\u4e9a\u91cc\u58eb\u591a\u5fb7\u662f\u6b63\u786e\u7684\uff0c\u5373\u4f7f\u5f53\u62c9\u624e\u7f57\u00b7\u65af\u5e15\u62c9\u624e\u5c3c(Lazzaro Spallazani\uff0c1729-99\u5e74)\u8bc1\u660e\u4ed6\u89c2\u5bdf\u5230\u7684\u751f\u957f\u786e\u5b9e\u662f\u6d88\u6bd2\u4e0d\u8db3\u7684\u7ed3\u679c\u65f6\uff0c\u4ed6\u4e5f\u62d2\u7edd\u542c\u3002\u968f\u7740\u8def\u6613\u00b7\u5df4\u65af\u5fb7(Louis Pasteur\uff0c1822-95\u5e74)\u7684\u5de5\u4f5c\uff0c\u4efb\u4f55\u5269\u4f59\u7684\u7591\u8651\u90fd\u88ab\u6253\u6d88\u4e86\u3002\n\u9cd7\u9c7c\u662f\u7f8e\u4e2d\u4e0d\u8db3\u7684\u552f\u4e00\u4e00\u53ea\u82cd\u8747\u3002\u5c3d\u7ba1\u79d1\u9a6c\u5947\u5965\u7684\u4e00\u4f4d\u533b\u751f\u572818\u4e16\u7eaa\u521d\u901a\u8fc7\u8bc6\u522b\u4e00\u4e2a\u7279\u522b\u5927\u7684\u5973\u6027\u7684\u5375\u5de2\u6765\u8bc1\u660e\u6027\u7684\u5b58\u5728\uff0c\u4f46\u672a\u80fd\u5728\u7537\u6027\u8eab\u4e0a\u627e\u5230\u76f8\u5e94\u7684\u4e00\u5957\u5668\u5b98\uff0c\u963b\u788d\u4e86\u5c06\u5b83\u4eec\u4ece\u4e9a\u91cc\u58eb\u591a\u5fb7\u7684\u9634\u5f71\u4e2d\u89e3\u8131\u51fa\u6765\u7684\u52aa\u529b\u3002\u6ca1\u6709\u529e\u6cd5\u786e\u5207\u5730\u77e5\u9053\u96cc\u6027\u7684\u5375\u5b50\u662f\u5982\u4f55\u53d7\u7cbe\u7684\uff0c\u751a\u81f3\u662f\u662f\u5426\u53d7\u7cbe\u7684\u3002\u4e0d\u7ba1\u770b\u8d77\u6765\u591a\u4e48\u4e0d\u53ef\u601d\u8bae\uff0c\u6240\u6709\u7684\u9cd7\u9c7c\u90fd\u662f\u96cc\u6027\u5e76\u65e0\u6027\u7e41\u6b96\u7684\u53ef\u80fd\u6027\u4ecd\u7136\u5f88\u5c0f--\u5c31\u50cf\u67d0\u79cd\u9ecf\u7cca\u7cca\u7684\u5723\u6bcd\u739b\u4e3d\u4e9a\u9cd7\u9c7c\u3002\u5373\u4f7f\u662f\u5e03\u51af\u4f2f\u7235(1707-88\u5e74)\uff0c\u4ed6\u90a3\u4e2a\u65f6\u4ee3\u6700\u6709\u5b66\u95ee\u7684\u535a\u7269\u5b66\u5bb6\uff0c\u4e5f\u627f\u8ba4\u81ea\u5df1\u88ab\u96be\u4f4f\u4e86\u3002\u867d\u7136\u4ed6\u5bf9\u53e4\u4eba\u515c\u552e\u7684\u5e7b\u60f3\u5927\u52a0\u5632\u8bbd\uff0c\u4f46\u4ed6\u65e0\u6cd5\u89e3\u91ca\u8fd9\u4e9b\u5e7b\u60f3\u662f\u5982\u4f55\u4ea7\u751f\u7684\u3002\u6b63\u5982\u4ed6\u627f\u8ba4\u7684\u90a3\u6837\uff0c\u8fd9\u4ee4\u4eba\u6cae\u4e27\u3002\u53ea\u8981\u9cd7\u9c7c\u7684\u7e41\u6b96\u4e60\u6027\u4ecd\u4e0d\u4e3a\u4eba\u6240\u77e5\uff0c\u73b0\u4ee3\u751f\u7269\u5b66\u7684\u57fa\u7840\u5c31\u4f1a\u4e0d\u7a33\u5b9a--\u8fd9\u79cd\u79d1\u5b66\u65b9\u6cd5\u7684\u9a84\u50b2\u4e3b\u5f20\u5c31\u4f1a\u53d7\u5230\u8d28\u7591\u3002\n\u76f4\u5230\u5f17\u6d1b\u4f0a\u5fb7\u7684\u7684\u91cc\u96c5\u65af\u7279\u4e4b\u65c5\u624d\u63ed\u5f00\u4e86\u8c1c\u56e2--\u5c3d\u7ba1\u8fd9\u66f4\u591a\u7684\u662f\u9760\u8fd0\u6c14\u800c\u4e0d\u662f\u5224\u65ad\u3002\u5c3d\u7ba1\u4ed6\u5bf9\u6700\u521d\u7684\u53d1\u73b0\u4e0d\u6ee1\u610f\uff0c\u4e0d\u5f97\u4e0d\u5728\u4eca\u5e74\u665a\u4e9b\u65f6\u5019\u56de\u6765\u68c0\u67e5\u7ed3\u679c\uff0c\u4f46\u4ed6\u5076\u7136\u53d1\u73b0\u4e86\u4e00\u5bf9\u85cf\u5728\u8179\u8154\u91cc\u7684\u76b1\u7eb9\u5668\u5b98\uff0c\u4ed6\u786e\u8ba4\u8fd9\u662f\u4e00\u540d\u7537\u6027\u68a6\u5bd0\u4ee5\u6c42\u7684\u777e\u4e38\u3002\u968f\u7740\u4e24\u6027\u7684\u660e\u786e\u533a\u5206\uff0c\u6709\u6027\u751f\u6b96\u7684\u786e\u51ff\u8bc1\u636e\u88ab\u627e\u5230\u4e86\uff1b2000\u591a\u5e74\u540e\uff0c\u4e9a\u91cc\u58eb\u591a\u5fb7\u7684\u81ea\u7136\u751f\u6210\u7406\u8bba\u7ec8\u4e8e\u53ef\u4ee5\u5b89\u606f\u4e86\u3002\n\u82b1\u4e86\u8fd9\u4e48\u957f\u65f6\u95f4\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u81f3\u5c11\u4ece\u516c\u5143\u524d5\u4e16\u7eaa\u5f00\u59cb\uff0c\u4eba\u4eec\u5c31\u77e5\u9053\u9cd7\u9c7c\u4ece\u6b27\u6d32\u6c34\u57df\u6d88\u5931\u4e86\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff1b\u4f46\u76f4\u5230\u6700\u8fd1\u624d\u53d1\u73b0\uff0c\u96c4\u6027\u9cd7\u9c7c\u53ea\u6709\u5728\u8e0f\u4e0a\u524d\u5f80\u9a6c\u5c3e\u85fb\u6d77\u7684\u65c5\u7a0b\u540e\u624d\u53d1\u80b2\u51fa\u6027\u5668\u5b98-\u800c\u4e14\u5b83\u4eec\u4e0d\u4f1a\u5728\u5176\u4ed6\u5730\u65b9\u4ea7\u5375\u3002\u4ee5\u524d\u6ca1\u6709\u4eba\u627e\u5230\u4ed6\u4eec\u7684\u6027\u817a\u662f\u56e0\u4e3a\uff0c\u9664\u975e\u4ed6\u4eec\u88ab\u56f0\u5728\u9a6c\u5c3e\u85fb\u6d77\u91cc\uff0c\u6216\u8005\u53d1\u751f\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e0d\u5e78\u4e8b\u4ef6\uff0c\u5426\u5219\u5c31\u6ca1\u6709\u6027\u817a\u53ef\u627e\u4e86\u3002\u5f17\u6d1b\u4f0a\u5fb7\u53ea\u662f\u8d70\u8fd0\u800c\u5df2\u3002\n\u552f\u4e00\u771f\u6b63\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\u4f55", "note_en": "In March 1876, the young Sigmund Freud arrived in Trieste, looking for the testicles of an eel. For centuries past, these troublesome organs had proved elusive. Despite the most intensive \u2013 not to say intimate \u2013 research, no one had managed to track them down. Recently, however, a Polish scientist, Simone de Syrski, claimed to have solved the puzzle and Freud, then a promising medical student at the University of Vienna, was despatched to see if he was right.\n Settling himself into the university\u2019s new institute of marine biology, Freud spent the next month dissecting more than 400 specimens. Even for the most enthusiastic researcher, it must have been an unenviable task: slimy, smelly and beset by frustration. But Freud was determined to prove that he had the  cojones\u00a0to be a real scientist \u2013 and he knew how much was at stake. Far from being merely a matter of zoological curiosity, the existence of an eel\u2019s gonads threatened to shake the foundations not just of reproductive theory, but of the scientific method itself.\n  Since the beginnings of Greek science, it had been recognised that all animals owed their origins to some form of reproduction. For most, the mechanism was sexual. New examples of a species were produced through the coupling of a biological male and a biological female. Exactly what each sex contributed to the process was, admittedly, somewhat unclear. Perhaps the first to approach the subject systematically was Aristotle. In his view, the female provided the flesh and blood, while the male\u2019s seed infused it with life and gave the offspring its \u2018form\u2019. People might quibble about the details; but that two easily distinguishable sexes were required was obvious.\n For some animals, however, this didn\u2019t seem to be the case. Though they reproduced somehow, they didn\u2019t appear to do so sexually \u2013 either because they had never been caught  in flagrante, or because no one had been able to identify male and female varieties. Flies, earthworms, sponges and conches were all examples. But by far the most interesting were catadromous eels. Though they looked very much like snakes, and behaved a lot like a fish, they were the only sanguineous creature never to have been observed laying eggs or giving birth to live young. They did not even seem to have genital organs. A mainstay of European cuisine since the earliest times, no specimen had ever been landed bearing ova; and no diner had ever found their dish marred by milt.\n How, then, did such creatures reproduce? Once again, it was Aristotle who came up with an answer. If they didn\u2019t have sex, he reasoned, they must generate spontaneously, out of non-living matter. As he explained in  De generatione animalium, all creatures owed their existence to\u00a0 pneuma \u2013 literally, the \u2018breath of life\u2019. This contained within it a type of \u2018vital heat\u2019, which \u2013 like that of the sun \u2013 could make things grow. When it interacted with \u2018elemental matter\u2019 \u2013 the stuff of which all living beings were composed \u2013 it caused life to emerge. This was, of course, precisely what happened with sexual reproduction, with the man\u2019s seed containing the  pneuma; but provided the right material conditions were present, it could also happen spontaneously, in the wild. Needless to say, different types of \u2018elemental matter\u2019 would produce different types of creature; but Aristotle felt that some sort of decomposing mulch was essential. Flies emerged from \u2018dung which has been set apart\u2019; barnacles \u2018on the side of boats \u2026 when frothy mud putrefies\u2019; and eels in \u2018mud and moist earth\u2019.\n Aristotle\u2019s theory of spontaneous generation enjoyed wide acceptance throughout antiquity. Though not all agreed that eels were born of mud, all natural philosophers shared his view that, in the absence of any obvious genitalia, they had to reproduce in a non-sexual fashion. All manner of explanations were offered. Pliny the Elder suggested that, when they rubbed themselves against rocks, the particles of skin which fell from their bodies came to life as baby eels. A century or so later, the Greco-Roman poet Oppian argued that eels had a habit of coiling around each other, producing a foamy secretion which, on falling into the sand below, burst into life.\n  Preserved in the Latin and Arabic traditions, spontaneous generation continued to be regarded as the most plausible explanation for eels\u2019 reproduction for more than 1,000 years thereafter. Only rarely were dissenting voices heard. Unable to believe that God would have created eels differently from other fish, Hildegard of Bingen (1098-1179) thought it logical to assume that they existed in male and female forms and that they must hence reproduce sexually. To overcome the apparent absence of genital apertures, she developed a theory. Each winter, she claimed, the female chooses a nice stone and spits \u2018seeds the size of horse beans\u2019 onto it. When the male sees this, he hurries over and spits \u2018something like milk over the seeds\u2019 \u2013 much to the indignation of the female. After a rather confusing struggle, they then lie on top of the seeds together, the male protecting them with his tail, the female blowing \u2018vital air\u2019 onto them until they take life. Hildegard did not convince anyone.\n With the translation of the Aristotelian corpus into Latin in the mid-13th century, the spontaneous generation of eels attained the status of an absolute truth. It was not, of course, that people did not find it peculiar. But such was the authority Aristotle enjoyed that it was given precedence over all else. Albertus Magnus (c.1200-80), for example, had heard from fishermen that eels were actually born alive, far out to sea \u2013 and were thus likely to have been the product of sexual reproduction \u2013 but in the absence of anatomical evidence, he preferred to believe Pliny\u2019s \u2018scratching\u2019 theory instead.\n  Things began to change in the Renaissance. New textual practices fostered a more critical attitude towards classical authors; and as Aristotle\u2019s authority was questioned, faith in spontaneous generation began to cool. Though none could yet see a reason to doubt its inherent validity, most were unwilling to accept it as the sole explanation for the procreation of eels \u2013 especially where it seemed to conflict with observation. Though the French physician, Guillaume Rondelet (1507-66) duly repeated Aristotle\u2019s claim that \u2018eels, like worms, are produced in putridity\u2019, he interpreted Oppian to mean that at least some might procreate sexually, from the \u2018intertwining of males and females\u2019 \u2013 and regretted that he had been unable to distinguish clearly between the two. Conrad Gessner (1516-65) was of a similar opinion. Much like Albertus Magnus, he had heard tales of eels giving birth to live young and hence surmised that at least some must be viviparous; but since he could neither swear to the existence of sex, nor divine their method of copulation, he felt a grudging obligation to leave open the possibility that others might generate by different means.\n In the late 16th century, some experimentalists, fired by the new spirit of enquiry, started to question whether the theory of spontaneous generation was really as robust as it had once seemed. Their doubts were first raised by flies. Whereas Aristotle had claimed that flies were produced by putrefaction, Ulisse Aldovrandi (1522-1605) pointed out that the maggots from which they grew only appeared on meat on which other flies had previously landed \u2013 and hence surmised that there must be a connection between the two events. What that connection might be was suggested by the English scientist, William Harvey (1578-1657). Having dissected hundreds of pregnant deer, Harvey postulated that, while no visible embryos were present in the womb in the first weeks of pregnancy, tiny eggs, invisible to the human eye, must nevertheless be present. Pursuing this logic further, Francesco Redi (1526-97) hypothesised that when flies landed on rotten meat, they were actually laying minute eggs on the flesh, out of which maggots later hatched \u2013 and devised an experiment to prove that no life emerged from putrefying flesh alone.\n Conclusively proved following the invention of the microscope, Redi\u2019s theory dealt a serious blow to spontaneous generation. Not everyone was convinced, though. For years, an English priest named John Needham (1713-81) tried to prove Aristotle correct by looking for life in boiled meat broths and refused to listen even when Lazzaro Spallazani (1729-99) demonstrated that the growths he had observed were really just the result of inadequate sterilisation. With the work of Louis Pasteur (1822-95), any remaining doubts were put to rest.\n Eels were the only fly in the ointment. Although a doctor from Comacchio had proved the existence of sex by identifying the ovaries in a particularly large female at the beginning of the 18th century, the failure to locate a corresponding set of organs in a male frustrated efforts to free them from Aristotle\u2019s shadow. There was no means of knowing for certain how \u2013 or even if \u2013 the female\u2019s ova were fertilised. However implausible it might have seemed, there was still a dim possibility that all eels were female and reproduced asexually \u2013 like some kind of slimy Virgin Marys. Even the Comte de Buffon (1707-88), the most learned naturalist of his day, admitted to being stumped. Though he roundly mocked the fantasies that had been peddled by the ancients, he could not explain how they procreated. As he admitted, this was frustrating. As long as eels\u2019 reproductive habits remained unknown, the foundations of modern biology would be unsteady \u2013 and the proud claims of the scientific method would be open to question.\n   Not until Freud\u2019s trip to Trieste was the mystery solved \u2013 albeit more by luck than judgement. Though he was dissatisfied with his initial findings, and had to return to check his results later in the year, he chanced upon a pair of furrowed organs, hidden away in the abdominal cavity, which he identified as the much-sought-after testes of a male. With the two sexes now clearly distinguished, definitive evidence of sexual reproduction had been found; and, after more than 2,000 years, Aristotle\u2019s theory of spontaneous generation could at last be laid to rest.\n That it had taken so long was hardly surprising. Since at least the fifth century BC, it had been known that eels disappeared from European waters for extended periods; but not until recently was it discovered that males develop their sexual organs only after embarking on their journey to the Sargasso Sea \u2013 and that they will not spawn anywhere else. That no one had found their gonads before was because, unless they were caught in the Sargasso Sea, or some strange mischance occurred, there were no gonads to find. Freud just got lucky.\n The only real surprise is how diffident Freud was about his discovery. Later in life, he avoided mentioning it \u2013 even going so far as to excise his report from lists of his publications. He may have done so simply out of disgust for the dissections he had performed. But another, more intriguing, explanation \u2013 hinted at by his friend, Ernest Jones \u2013 is that his frustration at being unable to find an eel\u2019s testes may have triggered one of the sexual anxieties that were later to be so central to his psychoanalytical theories. If so, eels and their elusive gonads have a lot to answer for.\n Alexander Lee is a fellow in the Centre for the Study of the Renaissance at the University of Warwick. His latest book is  Machiavelli: His Life and Times (Picador, 2020).", "posttime": "2020-10-29 12:06:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9cd7\u9c7c,sexual", "title": "\u6027\u9cd7\u9c7c", "title_en": "Sexual Eeling", "transed": 1, "url": "https://www.historytoday.com/archive/natural-histories/sexual-eeling", "via": "", "real_tags": ["\u9cd7\u9c7c", "sexual"]}, {"category": "", "categoryclass": "", "imagename": "99194f67e5542018f2c1c325832cade0.png", "infoid": 1031923, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u4ece\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\u5c31\u53d1\u73b0\u53ef\u6267\u884c\u6587\u4ef6\u53ea\u662f\u6587\u4ef6\u4e4b\u540e\uff0c\u6211\u5c31\u4e00\u76f4\u5bf9\u5b83\u4eec\u7740\u8ff7\u3002\u5982\u679c\u60a8\u5c06.exe\u91cd\u547d\u540d\u4e3a\u5176\u4ed6\u540d\u79f0\uff0c\u60a8\u53ef\u4ee5\u5728\u8bb0\u4e8b\u672c\u4e2d\u6253\u5f00\u5b83\uff01\u5982\u679c\u60a8\u5c06\u5176\u4ed6\u6587\u4ef6\u91cd\u547d\u540d\u4e3a.exe\uff0c\u60a8\u4f1a\u770b\u5230\u4e00\u4e2a\u6574\u9f50\u7684\u9519\u8bef\u5bf9\u8bdd\u6846\u3002\n\u663e\u7136\uff0c\u8fd9\u4e9b\u6587\u4ef6\u6709\u4e9b\u4e0d\u540c\u3002\u4ece\u8bb0\u4e8b\u672c\u4e0a\u770b\uff0c\u4ed6\u4eec\u5927\u591a\u662f\u80e1\u8a00\u4e71\u8bed\uff0c\u4f46\u5728\u6df7\u4e71\u4e2d\u5fc5\u987b\u6709\u79e9\u5e8f\u300212\u5c81\u7684\u6211\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u5c3d\u7ba1\u4ed6\u4e0d\u592a\u77e5\u9053\u5982\u4f55\u6216\u5728\u54ea\u91cc\u6316\u6398\u624d\u80fd\u8ba9\u8fd9\u4e00\u5207\u53d8\u5f97\u6709\u610f\u4e49\u3002\n\u6240\u4ee5\uff0c\u8fd9\u4e2a\u7cfb\u5217\u662f\u732e\u7ed9\u6211\u8fc7\u53bb\u7684\u81ea\u5df1\u3002\u5728\u8fd9\u672c\u4e66\u4e2d\uff0c\u6211\u4eec\u5c06\u8bd5\u56fe\u7406\u89e3Linux\u53ef\u6267\u884c\u6587\u4ef6\u662f\u5982\u4f55\u7ec4\u7ec7\u7684\uff0c\u5b83\u4eec\u662f\u5982\u4f55\u6267\u884c\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u4ece\u94fe\u63a5\u5668\u4e0a\u53d6\u4e0b\u5e76\u538b\u7f29--\u8fd9\u4ec5\u4ec5\u662f\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\u3002\n\u7531\u4e8e\u4e0a\u4e00\u4e2a\u5927\u578b\u7cfb\u5217(\u81ea\u5df1\u5236\u4f5cping)\u90fd\u662f\u5173\u4e8eWindows\u7684\uff0c\u6240\u4ee5\u8fd9\u4e00\u4e2a\u7cfb\u5217\u5c06\u91cd\u70b9\u5173\u6ce864\u4f4dLinux\u3002\n\u5728\u672c\u7cfb\u5217\u7684\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u80af\u5b9a\u4f1a\u60f3\u8981\u53d1\u51fa\u6211\u4eec\u81ea\u5df1\u7684ELF\u6587\u4ef6\uff0c\u4f46\u662f-\u5c31\u50cf\u6211\u4eec\u5728\u5904\u7406\u4ee5\u592a\u7f51\u3001IPv4\u548cICMP\u65f6\u6240\u505a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u9996\u5148\u8981\u62ff\u5230\u4e00\u4e2a\u683c\u5f0f\u826f\u597d\u3001\u5de5\u4f5c\u6b63\u5e38\u7684Linux\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u7136\u540e\u7528\u5404\u79cd\u68cd\u5b50\u6233\u5b83\u3002\nELF\u4ee3\u8868\u53ef\u6267\u884c\u548c\u53ef\u94fe\u63a5\u683c\u5f0f\u3002\u5b83\u7b2c\u4e00\u6b21\u53d1\u5e03\u662f\u57281983\u5e74\uff0c\u4f5c\u4e3aSysV4\u7684\u4e00\u90e8\u5206\uff0c\u4eca\u5929\u5b83\u4ecd\u7136\u5728Linux\u4e0a\u4f7f\u7528\uff0c\u5c3d\u7ba1\u589e\u52a0\u4e86\u65b0\u7684\u90e8\u5206\u3002\n\u6211\u4e0d\u5f97\u4e0d\u56de\u5230\u9605\u8bfb\u6587\u4ef6\u7684\u8270\u96be\u9053\u8def\u4e0a\u6765--\u7b2c2\u90e8\u5206\u662f\u4e3a\u4e86\u5feb\u901f\u590d\u4e60\u4e00\u4e0b--Netwide\u6c47\u7f16\u7a0b\u5e8f--\u6240\u4ee5\u5982\u679c\u4f60\u4e0d\u5f97\u4e0d\u8fd9\u4e48\u505a\uff0c\u6211\u4e5f\u4e0d\u4f1a\u8d23\u602a\u4f60\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u91cc\u662f\u7b80\u77ed\u7684\u7248\u672c\uff1a\u8fd9\u91cc\u662f\u4e00\u4e9b\u8981\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u7684\u4ee3\u7801\u3002\u4f60\u597d\uff0c\u540e\u9762\u8ddf\u4e00\u4e2a\u6362\u884c\u7b26\uff1a\n\uff1b\u5728`hello.asm`global_start\u8282.text_start\uff1amov rdi\uff0c1\uff1bstdout FD mov rsi\uff0cmsg mov rdx\uff0c9\uff1b8\u4e2a\u5b57\u7b26+\u6362\u884c\u7b26mov rax\uff0c1\uff1b\u5199\u5165syscall syscall xor rdi\uff0crdi\uff1b\u8fd4\u56de\u4ee3\u78010 mov rax\uff0c60\uff1b\u9000\u51fasyscall syscall\u8282.datamsg\uff1adb&#34\uff1bhi&#34\uff1b\uff0c10\u3002\n$NASM-f elf64 hello.asm$ld hello.o-o hello$file hellohello\uff1aELF 64\u4f4dLSB\u53ef\u6267\u884c\u6587\u4ef6\uff0cx86-64\uff0c\u7248\u672c1(SYSV)\uff0c\u9759\u6001\u94fe\u63a5\uff0c\u800c\u4e0d\u662f\u5265\u79bb$\u3002/hellohi\u5728\u90a3\u91cc\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6309\u539f\u6837\u5927\u7ea6\u662f8.68 KiB\u3002\u5982\u679c\u6211\u4eec\u5728\u5b83\u4e0a\u9762\u4f7f\u7528gzip-9\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u628a\u5b83\u964d\u5230372B\uff0c\u6240\u4ee5\u6211\u6709\u70b9\u597d\u5947\uff0c\u8001\u5b9e\u8bf4\uff0c\u6211\u60f3\u770b\u770b\u91cc\u9762\u6709\u4ec0\u4e48\u3002\n\u8fd9\u4e2a\u7cfb\u5217\u4e0d\u662f\u5173\u4e8e\u54c0\u53f9\u8fc7\u53bb\u7684\u7f8e\u597d\u65f6\u5149\uff0c\u90a3\u65f6\u6240\u6709\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u653e\u5728\u8f6f\u76d8\u4e0a\u3002\u8fd9\u4e0d\u662f\u5173\u4e8e\u73b0\u4ee3\u8f6f\u4ef6\u662f\u5982\u4f55\u81c3\u80bf\u548c\u7f13\u6162\u7684\uff0c\u4e5f\u4e0d\u662f\u8981\u8c08\u5230\u5f00\u53d1\u4eba\u5458\u662f\u591a\u4e48\u61d2\u60f0\uff0c\u53ea\u8981\u6709\u4eba\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u4e8b\u60c5\u5c31\u4e0d\u4f1a\u90a3\u4e48\u96be\u4e86\u3002\n\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u662f\u5728\u5f00\u53d1\u4e00\u4e9b\u5b9e\u7528\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u7eaf\u7cb9\u662f\u4e3a\u4e86\u5b66\u4e60\u4e1c\u897f\u800c\u9009\u62e9\u4e00\u4e2a\u6311\u6218\u3002\n\u5982\u679c\u4f60\u9700\u8981\u4e00\u5927\u7247\u6000\u65e7\u4e4b\u60c5\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u5728\u51e0\u4e4e\u6240\u6709\u7684\u4e92\u8054\u7f51\u4e0a\u6a21\u7cca\u5730\u67e5\u770b\u4e00\u4e0b\u3002\n\u5982\u679c\u6211\u4eec\u67e5\u770bhello\u7684\u5341\u516d\u8fdb\u5236\u8f6c\u50a8\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u65e9\u671f\u7684ELF\u5b57\u7b26\u4e32\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u7ec4\u4e8c\u8fdb\u5236\u6570\u636e\uff1a\n$xxd&lt\uff1bhello|head00000000\uff1a7f45 4c46 0201 0100 0000 0000 0000.ELF.00000010\uff1a0200 3e00 0100 0000 0010 4000 0000 0000 0000.&gt\uff1b00000020\uff1a4000 0000 0000 0000 3821 0000 0000@.8.00000030\uff1a0000 0000 4000 3800 0300 4000 0600 0500...@.8.00000040\uff1a0100 0000 0400 0000 0000 0000.00000050\uff1a0000 4000 0000 0000 0000 4000 0000 0000 0000...@...00000060\uff1ae800\u300200000070\uff1a00100 0000 0000 0000 0100 0000 0500 0000...00000080\uff1a0010 0000 0000 0000 0010 4000 0000 0000.00000090\uff1a0010 4000 0000 0000 2500 0000 0000 0000\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u5730\u770b\u5230\uff0c\u6587\u4ef6\u7684\u5927\u90e8\u5206\u7531\u7a7a(\u96f6)\u5b57\u8282\u7ec4\u6210\uff1a\n$xxd&lt\uff1bHELLO|Tail-60|head00001f00\uff1a0000 0000 0000.00001f10\uff1a0000 0000 0000.00001f20\uff1a0000 0000 0000.00001f30\uff1a0000 0000 0000.00001f40\uff1a0000 0000 0000\u300200001f50\uff1a0000 0000 0000.00001f60\uff1a0000 0000 0000.00001f70\uff1a0000 0000 0000.00001f70\uff1a0000 0000 0000.00001f50\uff1a0000 0000 0000.00001f70\uff1a0000 0000 0000\u300200001f90\uff1a0000 0000 0000.\u3002\n\u6211\u4eec\u8fd8\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u5305\u542b\u4e00\u5806\u540d\u5b57\u7684\u90e8\u5206\uff0c\u4e5f\u8bb8\u5b83\u4eec\u6709\u67d0\u79cd\u610f\u4e49\uff1f\n$xxd&lt\uff1bhello|ail-32|head000020c0\uff1a0920 4000 0000 0000 0000\u3002@.000020d0\uff1a2b00 0000 1000 0200 1020 4000 0000 0000+.\u3002@...000020e0\uff1a0000 0000 0000 0068 656c 6c6f 2d6f.hello-o000020f0\uff1a7269 6769 6e61 6c2e 6173 6d00 6d73 6700 riginal.asm.msg.00002100\uff1a5f5f 6273 735f 7374 6172 7400 5f65 6461__bss_start._eda00002110\uff1a7461 005f 656e 6400 002e 7379 6d74 6162._end...symtab00002120\uff1a002e 73274 6162 2e 73274str..sht00002130\uff1a600162 e 7465 780074 2e 64761.\u300200002150\uff1a0000 0000 0000\u3002\n\u73b0\u5728\uff0c\u6709\u4e00\u6574\u5957\u5de5\u5177\u53ef\u4ee5\u8ba9\u6211\u4eec\u5728\u8212\u9002\u7684\u7ec8\u7aef\u4e0a\u6233\u5230\u8fd9\u4e2aELF\u6587\u4ef6\u3002\u54e6\uff0c\u662f\u7684\u3002\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u3002\u4e00\u76ee\u4e86\u7136\u7684\u5de5\u5177\u548c\u5de5\u5177\u3002\u4f46\u6211\u4eec\u4eca\u5929\u4e0d\u4f1a\u4f7f\u7528\u5b83\u4eec\u3002\u4eca\u5929\u4e0d\u884c\uff0c\u4f19\u8ba1\u3002\n\u4eca\u5929\uff0c\u6211\u4eec\u81ea\u5df1\u89e3\u6790\u4e8b\u7269\u3002\u4f7f\u7528\u7684\u662f\u6211\u4eec\u5728\u201c\u5236\u9020\u6211\u4eec\u81ea\u5df1\u7684ping\u201d\u7cfb\u5217\u4e2d\u4f7f\u7528\u7684Nom\u677f\u6761\u7bb1\uff0c\u5e76\u914d\u5907\u4e86\u5b83\uff0c\u6211\u613f\u610f\u5206\u6790\u51e0\u4e4e\u4efb\u4f55\u4e1c\u897f-\u5373\u4f7f\u662fPSD\u3002\n\u4e0d\u8fc7\uff0c\u8981\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e9b\u6307\u5bfc\u3002ELF\u7684\u7ef4\u57fa\u767e\u79d1\u9875\u9762\u8fd8\u7b97\u4e0d\u9519\uff0c\u4f46\u5b83\u4e5f\u4e0d\u662f\u6700\u597d\u7684\u6982\u8ff0--\u90e8\u5206\u539f\u56e0\u662f\u5b83\u4e3a32\u4f4dELF\u800c\u70e6\u607c\uff0c\u6211\u4eec\u5728\u672c\u7cfb\u5217\u7684\u6574\u4e2a\u7bc7\u5e45\u4e2d\u90fd\u4f1a\u5f88\u65b9\u4fbf\u5730\u5fd8\u8bb0\u8fd9\u4e00\u70b9\u3002\n\u6211\u610f\u8bc6\u5230\u8981\u63a5\u53d7\u7684\u4e1c\u897f\u592a\u591a\u4e86--\u5f88\u591a\u4e1c\u897f\u73b0\u5728\u8fd8\u8bf4\u4e0d\u901a\u5462\uff01\u3002\n\u5728\u6211\u4eec\u5f00\u59cb\u7f16\u5199\u4efb\u4f55\u4ee3\u7801\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u624b\u5de5\u505a\u4e00\u4e9b\u57fa\u672c\u7684\u63a2\u7d22\u3002\u6839\u636e\u8be5\u56fe\uff0c\u5728\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf62\u5904\uff0c\u6709\u4e00\u4e2a\u5e26\u6709\u8282\u540d\u79f0\u7684\u6761\u76ee\u7d22\u5f15\u3002\u5bf9\u4e8e\u6211\u4eec\u7684hello\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8fd9\u662f...\u3002\n$#-s=\u67e5\u627e\uff0c-l=\u957f\u5ea6$xxd-s 62-l 2\u3002/hello0000003e\uff1a0500.\u3002\n\u5b57\u828205\u548c00-\u73b0\u5728\uff0c\u6211\u4eec\u6b63\u5728\u5904\u7406\u4e00\u4e2a\u5c0f\u7aef\u6587\u4ef6\uff0c\u8fd9\u610f\u5473\u77400x0005\uff0c\u4e5f\u5c31\u662f5\u3002\u56e0\u6b64\uff0c\u8868\u4e2d\u7684\u7b2c\u4e94\u8282\u6807\u9898\u5305\u542b\u8282\u540d\u79f0\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u4e0d\u77e5\u9053\u6bb5\u662f\u4ec0\u4e48\uff0c\u4f46\u6211\u8ba4\u4e3a\u53ef\u4ee5\u5b89\u5168\u5730\u8bf4\uff0c\u6587\u4ef6\u88ab\u5206\u6210\u51e0\u4e2a\u6bb5\uff0c\u5e76\u4e14\u5b83\u4eec\u7684\u5f00\u59cb\u548c\u5927\u5c0f\u5b58\u50a8\u5728\u8fd9\u4e9b\u6bb5\u6807\u9898\u4e2d\u3002\n$#-g=\u7ec4\u5927\u5c0f\uff0c-e=\u5c0f\u7aef$xxd-s 40-l 8-g 8-e./hello00000028\uff1a0000000000002140\u3002\n\u5373\u4f7fxxd\u672c\u8eab\u4e0d\u652f\u6301\u5341\u516d\u8fdb\u5236\u8bb0\u6570\u6cd5\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u7528$((Expr))\uff01\n\u6839\u636eELF\u4e0a\u7684Wikipedia\u9875\u9762\uff0c\u6bcf\u4e2a\u533a\u6bb5\u6807\u9898\u90fd\u5305\u542b\u5b58\u50a8\u533a\u6bb5\u6570\u636e\u7684\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u91cf\u2026\u2026\u3002\u504f\u79fb\u91cf\u4e3a0x18\uff01\n$xxd-s$((0x2140+0x40*5+0x18))-l 8-g 8-e./hello00002298\uff1a0000000000002118\u3002\uff01.\n\u8fd9\u610f\u5473\u7740\u5305\u542b\u8282\u540d\u79f0\u7684\u8282\u7684\u6570\u636e\u5e94\u8be5\u662f0x2118\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b\u5427\uff1a\n$xxd-s$((0x2118))./hello|head-400002118\uff1a002e 7379 6d74 6162 002e 7374 7274 6162.symtab..strtab00002128\uff1a002e 7368 7374 7274 6162 002e 7465 7874.shstrtab..text00002138\uff1a002e 6461 7461 0000 0000 0000\u6570\u636e.00002148\uff1a0000 0000 0000.\u3002\n\u624b\u5de5\u6d4f\u89c8\u6587\u4ef6\u5f88\u6709\u8da3\uff0c\u6211\u4eec\u5b66\u4f1a\u4e86\u4f7f\u7528xxd\u6765\u505a\u8fd9\u4ef6\u4e8b(\u5982\u679c\u6ca1\u6709\u56fe\u5f62\u5341\u516d\u8fdb\u5236\u67e5\u770b\u5668/\u7f16\u8f91\u5668\uff0c\u8fd9\u5728\u6838\u51ac\u5929\u80af\u5b9a\u4f1a\u6d3e\u4e0a\u7528\u573a)\uff0c\u4f46\u662f\u6211\u4eec\u73b0\u5728\u53ef\u80fd\u60f3\u8981\u5f00\u59cb\u7f16\u5199\u4e00\u4e2a\u771f\u6b63\u7684\u89e3\u6790\u5668\u4e86\u3002\n$Cargo new--lib Delf$cd Delf$Cargo\u5c06NOM\u6dfb\u52a0\u5230\u4f9d\u8d56\u9879\u4e2d\u6dfb\u52a0NOM v5.1.2\u3002\n//\u5728`delf/src/parse.rs`pub type input&lt\uff1b&#39\uff1ba&&gt;\uff1b=&amp\uff1b&39\uff1ba[U8]\uff1b\uff1bpub type result&lt\uff1ba\uff0cO&gt\uff1b=nom\uff1a\uff1aIResult&lt\uff1binput&lt\uff1b\uff0cO\uff0cnom\uff1a\uff1aerror\uff1a\uff1aVerboseError&lt\uff1binput&lt\uff1b&#39\uff1ba&gt\uff1b&gt\uff1b\uff1b\n\u5c31\u50cf\u6211\u524d\u9762\u8bf4\u7684\uff0c\u6211\u4eec\u4e0d\u4f1a\u8d39\u5fc3\u4f7f\u7528\u5927\u7aefELF\u621632\u4f4dELF\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u786c\u7f16\u7801\u4e00\u4e9b\u503c\u3002\u8ba9\u6211\u4eec\u5f00\u59cb\u5427\uff01\n//\u5728`delf/src/lib.rs`#[Derive(Debug)]pub struct File{//we&#39\uff1bll add field as we go}Impl File{const Magic\uff1a&amp\uff1b&39\uff1bstatic[U8]=&amp\uff1b[0x7f\uff0c0x45\uff0c0x4c\uff0c0x46]\uff1bpub FN parse(i\uff1aparse\uff1a\uff1ainput)-&gt\uff1bparse\uff1a\uff1aresult&lt\uff1bself&gt\uff1b{Use Nom\uff1a\uff1a{Bytes\uff1a\uff1aComplete\uff1a\uff1a{Tag\uff0cTake}\uff0cError\uff1a\uff1aContext\uff0cSequence\uff1a\uff1atuple\uff0c}\uff1blet(i\uff0c_)=tuple((//-Context((//-Context(&#34\uff1bMagic&#34\uff1b\uff0cTag(&#34\uff1bClass&#34\uff1b\uff0cTag(&amp\uff1b[0x2])\uff0cContext(&#34\uff1bEndianness&#34\uff1b\uff0c\u6807\u8bb0(&amp\uff1b[0x1])\uff0c\u4e0a\u4e0b\u6587(&#34\uff1b\u7248\u672c&#34\uff1b\uff0c\u6807\u8bb0(&amp\uff1b[0x1]))\uff0c\u4e0a\u4e0b\u6587(&#34\uff1b\u64cd\u4f5c\u7cfb\u7edfABI&34\uff1b\uff0c\u6807\u8bb0(&amp\uff1b[0x0]))\uff0c//-\u4e0a\u4e0b\u6587(&#34\uff1b\u586b\u5145&#34\uff1b\uff0cTake(8_Usize))\uff0c))(I)\uff1f\uff1b\u597d\u7684((\u6211\uff0c\u81ea\u5df1{}))}}\u3002\n\u8fd9\u770b\u8d77\u6765\u5f88\u5408\u7406\u3002\u8ba9\u6211\u4eec\u518d\u505a\u4e00\u4e2a\u677f\u6761\u7bb1\u6765\u6d4b\u8bd5Delf\u7684\u677f\u6761\u7bb1\u3002\u6211\u4eec\u5c06\u628a\u5b83\u547d\u540d\u4e3aElk&34\uff1b\uff0c\u7528\u4e8eExecutable&amp\uff1bLinker Kit&#34\uff1b\n//\u5728`src/elk/main.rs`\u4e2d\u4f7f\u7528std\uff1a\uff1a{env\uff0cerror\uff1a\uff1aerror\uff0cfs}\uff1bfn main()-&gt\uff1bresult&lt\uff1b()\uff0cBox&lt\uff1bdyn error&gt\uff1b&gt\uff1b{let input_path=env\uff1a\uff1aargs()\u3002\u7b2cn(1)\u3002\u9884\u671f(&#34\uff1b\u7528\u6cd5\uff1aELK\u6587\u4ef6&#34\uff1b)\uff1b\u8ba9INPUT=fs\uff1a\uff1aRead(&amp\uff1bINPUT_PATH)\uff1f\uff1bDelf\uff1a\uff1aFile\uff1a\uff1aParse(&amp\uff1bINPUT[.\u3002]))\u3002Map_err(|e|format\uff01(&#34\uff1b{\uff1a\uff1f}&#34\uff1b\uff0ce))\uff1f\uff1bprintln\uff01(&#34\uff1b\u8f93\u5165\u4e3a\u652f\u6301\u7684ELF\u6587\u4ef6\uff01&#34\uff1b)\uff1b\u786e\u5b9a(())}\u3002\n\u8ba9\u6211\u4eec\u4ece\u7c7b\u578b\u5f00\u59cb-\u5728Rust\u4e2d\u58f0\u660e\u4e00\u4e2a\u679a\u4e3e\u5c31\u8db3\u591f\u7b80\u5355\u4e86\u3002\u6211\u4eec\u4f1a\u60f3\u8981\u6d3e\u751f\u4e00\u4e9b\u6709\u7528\u7684\u7279\u6027-Debug for Print\uff0cClone and Copy\uff0c\u8fd9\u6837\u5b83\u5c31\u6709\u4e86Copy\u8bed\u4e49(\u800c\u4e0d\u662f\u4f20\u9012\u6240\u6709\u6743)\uff0cPartialEq\u548cEq\u6765\u6bd4\u8f83Type\u503c\u662f\u5426\u76f8\u7b49\u3002\n//\u5728`delf/src/lib.rs`#[Derate(Debug\uff0cClone\uff0cCopy\uff0cPartialEq\uff0cEq)]pub\u679a\u4e3e\u7c7b\u578b{None\uff0cRel\uff0cExec\uff0cDyn\uff0cCore\uff0c}\u4e2d\u3002\n\u4f46\u662f\uff0c\u5f53\u8bfb\u53d6ELF\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u4e0d\u4f1a\u5f97\u5230Type-\u6211\u4eec\u4f1a\u5f97\u5230u16\u3002\u540c\u6837\uff0c\u5f53\u6211\u4eec\u5199\u51faELF\u6587\u4ef6\u65f6\uff0c\u6211\u4eec\u4e5f\u9700\u8981u16\u3002\n//\u5728`delf/src/lib.rs`\u5b9e\u65bd\u7c7b\u578b{to_u16(&amp\uff1bself)-&gt\uff1bu16{Match Self{Self\uff1a\uff1aNone=&gt\uff1b0\uff0cSelf\uff1a\uff1aRel=&gt\uff1b1\uff0cSelf\uff1a\uff1aExec=&gt\uff1b2\uff0cSelf\uff1a\uff1aDyn=&gt\uff1b3\uff0c//etc}}\u3002\n\u6216\u8005\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u7c7b\u578b\u679a\u4e3e\u7684\u8868\u793a\u5f62\u5f0f\u8bbe\u7f6e\u4e3au16-\u7136\u540e\u6211\u4eec\u5c06\u514d\u8d39\u83b7\u5f97\uff1a\n//\u5728`delf/src/lib.rs`\u4e2d#[Derate(Debug\uff0cClone\uff0cCopy\uff0cPartialEq\uff0cEq)]#[repr(U16)]pub\u679a\u4e3e\u7c7b\u578b{None=0x0\uff0crel=0x1\uff0cExec=0x2\uff0cdyn=0x3\uff0cCore=0x4\uff0c}\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528as\u8fd0\u7b97\u7b26\u5c06Type\u5f3a\u5236\u8f6c\u6362\u4e3au16-let swrite\u5feb\u901f\u6d4b\u8bd5\u6765\u9a8c\u8bc1\u6211\u4eec\u7684\u5047\u8bbe\uff1a\n$#t==\u6d4b\u8bd5\uff0c--lib==\u4ec5\u5e93\u5355\u5143\u6d4b\u8bd5(\u4e0d\u662f\u6587\u6863\u6d4b\u8bd5)$Cargo t--\u5e93\u5df2\u5b8c\u6210\u6d4b\u8bd5[\u672a\u4f18\u5316+\u8c03\u8bd5\u4fe1\u606f]\u8fd0\u884ctarget/debug/deps/delf-d6fdd5529c793a0brunning 1\u6d4b\u8bd5\u6d4b\u8bd5\u76840.02s\u76ee\u6807\uff1a\uff1aTYPE_TO_u16...\u3002OK\u6d4b\u8bd5\u7ed3\u679c\uff1aOK\u30021\u901a\u8fc7\uff1b0\u5931\u8d25\uff1b0\u5ffd\u7565\uff1b0\u6d4b\u91cf\uff1b0\u8fc7\u6ee4\u6389\u3002\n\u597d\u6781\u4e86\uff01\u73b0\u5728\u6709\u4e86\u53e6\u4e00\u79cd\u65b9\u5f0f\u7684\u5c0f\u95ee\u9898-\u5c06u16\u8f6c\u6362\u4e3aType\u3002\u5f53\u7136\uff0c\u8fd9\u91cc\u7684\u95ee\u9898\u662f\u5e76\u4e0d\u662f\u6240\u6709\u7684u16\u503c\u90fd\u662f\u6709\u6548\u7684Type\u503c\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u81ea\u5df1\u4ece_u16\u5f00\u59cb\u5199\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u6b63\u9762\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\uff1a\n//\u5728`delf/src/lib.rs`\u5b9e\u65bd\u7c7b\u578b{pub fn from_u16(x\uff1au16)-&gt\uff1bself{Match x{0=&gt\uff1bself\uff1a\uff1aNone\uff0c1=&gt\uff1bself\uff1a\uff1arel\uff0c2=&gt\uff1bself\uff1a\uff1aexec\uff0c3=&gt\uff1bself\uff1a\uff1adyn\uff0c4=&gt\uff1bself\uff1a\uff1acore\uff0c}\u3002\n#b=\u6784\u5efa\uff0c-q=\u5b89\u9759$CAROR b-qerror[E0004]\uff1a\u975e\u7a77\u4e3e\u6a21\u5f0f\uff1a`5u16..=std\uff1a\uff1au16\uff1a\uff1amax`\u672a\u8986\u76d6--&gt\uff1bsrc/lib.rs\uff1a17\uff1a15|17|match x{|^pattern`5u16..=std\uff1a\uff1au16\uff1a\uff1amax`\u672a\u8986\u76d6|=help\uff1a\u786e\u4fdd\u6b63\u5728\u5904\u7406\u6240\u6709\u53ef\u80fd\u7684\u60c5\u51b5\uff0c\u53ef\u80fd\u662f\u901a\u8fc7\u6dfb\u52a0\u901a\u914d\u7b26\u6216\u66f4\u591a\u5339\u914d\u81c2\u3002\n//\u5728`delf/src/lib.rs`impl Type{pub fn from_u16(x\uff1au16)-&gt\uff1boption&lt\uff1bself&gt\uff1b{Match x{0=&gt\uff1bSome(Self\uff1a\uff1aNone)\uff0c1=&gt\uff1bSome(Self\uff1a\uff1aRel)\uff0c2=&gt\uff1bSome(Self\uff1a\uff1aExec)\uff0c3=&gt\uff1bSome(Self\uff1a\uff1aDyn)\uff0c4=&gt\uff1bSome(Self\uff1a\uff1aCore)\uff0c_=&gt\uff1bSome(Self\uff1a\uff1aCore)\uff0c_=&gt\uff1b\u65e0\uff0c}#[cfg(Test)]mod test{//\u7701\u7565\uff1a\u4ee5\u524d\u7684\u6d4b\u8bd5#[test]fn type_from_u16(){assert_eq\uff01(Super\uff1a\uff1atype\uff1a\uff1afrom_u16(0x3)\uff0come(Super\uff1a\uff1atype\uff1a\uff1adyn))\uff1bassert_eq\uff01(Super\uff1a\uff1atype\uff1a\uff1afrom_u16(0xf00d)\uff0cNone)\uff1b}}\u3002\n$Cargo t--lib\u5df2\u57280.02s\u5185\u5b8c\u6210\u6d4b\u8bd5[\u672a\u4f18\u5316+\u8c03\u8bd5\u4fe1\u606f]\u76ee\u6807\uff0c\u8fd0\u884c\u7c7b\u578b2\u6d4b\u8bd5\u6d4b\u8bd5\uff1a\uff1atarget/debug/deps/delf-d6fdd5529c793a0brunning_to_u16...\u3002\u6b63\u5e38\u6d4b\u8bd5\u6d4b\u8bd5\uff1a\uff1atype_from_u16...\u3002OK\u6d4b\u8bd5\u7ed3\u679c\uff1aOK\u30022\u901a\u8fc7\uff1b0\u5931\u8d25\uff1b0\u5ffd\u7565\uff1b0\u6d4b\u91cf\uff1b0\u8fc7\u6ee4\u6389\u3002\n...\u4f46\u662f\u8fd9\u6709\u70b9\u5355\u8c03\u4e4f\u5473\u3002\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u5b9a\u4e49\u679a\u4e3e\u65f6\uff0c\u6211\u4eec\u5df2\u7ecf\u6307\u5b9a\u4e86Type&lt\uff1b-&gt\uff1bu16\u6620\u5c04\u3002\u6211\u4eec\u4e3a\u4ec0\u4e48\u8981\u91cd\u590d\u6211\u4eec\u81ea\u5df1\u5462\uff1f\n\u4e8b\u5b9e\u8bc1\u660e..\u3002\u773c\u775b\u4f1a\u60ca\u5947\u5730\u4eae\u8d77\u6765\uff0c\u6709\u4e00\u4e2a\u677f\u6761\u7bb1\u53ef\u4ee5\u653e\u8fd9\u4e2a\uff01\n//\u5728`delf/src/lib.rs`\u4e2d\u4f7f\u7528Deriate_try_from_primitive\uff1a\uff1aTryFromPrimitive\uff1b#[Deriate(Debug\uff0cClone\uff0cCopy\uff0cPartialEq\uff0cEq\uff0cTryFromPrimitive)]#[repr(U16)]pub\u679a\u4e3e\u7c7b\u578b{None=0x0\uff0crel=0x1\uff0cExec=0x2\uff0cdyn=0x3\uff0cCore=0x4\uff0c}#[Deriate(Debug\uff0cClone\uff0cCopy\uff0cPartialEq\uff0cEq\uff0cTryFromPrimitive)]#[repr(U16)]pub enum Machine{X86=0x03\uff0cX86_64=0x3e\uff0c}#[CFG(Test)]mod test{Use Super\uff1a\uff1aMachine\uff1bUse STD\uff1a\uff1aConvert\uff1a\uff1aTryFromPrimitive)]#[repr(U16)]pub enum Machine{X86=0x03\uff0cX86_64=0x3e\uff0c}#[CFG(Test)]mod test{USE SUPER\uff1a\uff1aMACHINE\uff1bUSE STD\uff1a\uff1aCONVERT\uff1a\uff1aTryFromPrimitive\u3002#[test]fn try_enum(){assert_eq\uff01(MACHINE\uff1a\uff1ax86_64 as u16\uff0c0x3E)\uff1bassert_eq\uff01(MACHINE\uff1a\uff1aTRY_FROM(0x3E)\uff0cOK(MACHINE\uff1a\uff1ax86_64))\uff1bASSERT_eq\uff01(MACHINE\uff1a\uff1aTRY_FROM(0xFA)\uff0cErr(0xFA))\uff1b}}\u3002\n\u5728\u672c\u6587\u7684\u524d\u4e00\u4e2a\u7248\u672c\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86Derate-try-from-primitive v0.1.0\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u9009\u9879&lt\uff1bT&gt\uff1b\u3002\u4f46\u662f\uff0c\u4ece\u90a3\u65f6\u8d77\uff0c\u53d1\u5e03\u4e86\u4ece\u539f\u8bed\u6d3e\u751f-\u5c1d\u8bd5-\u7248\u672c1.0.0\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c&lt\uff1bT\uff0cE&gt\uff1b\uff0c\u56e0\u4e3a\u5b83\u5b9e\u73b0\u4e86\u6807\u51c6\u7684TryFrom\u63a5\u53e3\u3002\n$Cargo t\u5df2\u57280.01s\u5185\u5b8c\u6210\u6d4b\u8bd5[\u672a\u4f18\u5316+\u8c03\u8bd5\u4fe1\u606f]\u76ee\u6807\uff0c\u8fd0\u884c/home/amos/ftl/elf-series/target/debug/deps/delf-2d44b198a598eda8running 1\u6d4b\u8bd5\u6d4b\u8bd5\uff1a\uff1aTry_enums...\u3002OK\u6d4b\u8bd5\u7ed3\u679c\uff1aOK\u30021\u901a\u8fc7\uff1b0\u5931\u8d25\uff1b0\u5ffd\u7565\uff1b0\u6d4b\u91cf\uff1b0\u8fc7\u6ee4\u51fa\u5355\u636e-\u6d4b\u8bd5\u8131\u673a\u6d4b\u8bd50\u6d4b\u8bd5\u7ed3\u679c\uff1aOK\u30020\u901a\u8fc7\uff1b0\u5931\u8d25\uff1b0\u88ab\u5ffd\u7565\uff1b0\u88ab\u6d4b\u91cf\uff1b0\u88ab\u8fc7\u6ee4\u6389\u3002\n\u73b0\u5728\uff0c\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u89e3\u6790\u7c7b\u578b\u548c\u673a\u5668\u4e86\u3002\u9996\u5148\u8ba9\u6211\u4eec\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u6587\u4ef6\u7ed3\u6784\u4e2d\uff1a\n$Cargo b-qerror\uff1a\u9884\u671f\u6807\u8bc6\u7b26\uff0c\u627e\u5230\u5173\u952e\u5b57`type`--&gt\uff1bsrc/lib.rs\uff1a24\uff1a5|24|type\uff1atype\uff0c|^\u9884\u671f\u6807\u8bc6\u7b26\uff0c\u627e\u5230\u5173\u952e\u5b57|help\uff1a\u60a8\u53ef\u4ee5\u8f6c\u4e49\u4fdd\u7559\u5173\u952e\u5b57\u4ee5\u5c06\u5176\u7528\u4f5c\u6807\u8bc6\u7b26|24|r#type\uff1atype\uff0c|^\u3002\n\u5b83\u662f!\u3002\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u7c7b\u578b--\u4f46\u5c31\u8fd9\u4e00\u6b21\uff0c\u8ba9\u6211\u4eec\u6309\u7167\u7f16\u8bd1\u5668\u7684\u5efa\u8bae\uff0c\u6539\u7528\u8f6c\u4e49\u5f62\u5f0f\u3002\n//\u5728`delf/src/lib.rs`\u4e2d//new\uff01Use std\uff1a\uff1aConvert\uff1a\uff1aTryFrom\uff1bIml File{//\u7701\u7565\uff1a\u9b54\u672f\u5e38\u6570pub FN parse(i\uff1aparse\uff1a\uff1ainput)-&gt\uff1bparse\uff1a\uff1aresult&lt\uff1bself&gt\uff1b{use nom\uff1a\uff1a{bytes\uff1a\uff1aComplete\uff1a\uff1a{Tag\uff0cTake}\uff0cError\uff1a\uff1aContext\uff0cSequence\uff1a\uff1aTuple\uff0cCombinator\uff1a\uff1aMap\uff0cNumber\uff1a\uff1aComplete\uff1a\uff1aLE_u16\uff0c}\uff1b//\u7701\u7565\uff1a\u89e3\u6790\u9b54\u672f\u7b49let(i\uff0c(r#type\uff0cmachine))=tuple((context(&#34\uff1bType&#34\uff1b\uff0cmap(le_u16\uff0c|x|Type\uff1a\uff1atry_from(X)\u3002\u5c55\u5f00())\uff0c\u4e0a\u4e0b\u6587(&#34\uff1bMachine&#34\uff1b\uff0cmap(le_u16\uff0c|x|Machine\uff1a\uff1atry_from(X)\u3002Unwork()\uff0c)(I)\uff1f\uff1b\u8bberes=self{\u673a\u5668\uff0cr#type}\uff1bOK((i\uff0cres))}}\n\u4e3a\u4e86\u5c1d\u8bd5\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5c06\u5207\u6362\u56de\u6211\u4eec\u7684\u4e8c\u8fdb\u5236\u673a\u7bb1elk\u4e00\u79d2\u949f\uff0c\u5e76\u6253\u5370File\u7ed3\u6784\uff0c\u73b0\u5728\u5b83\u6709\u4e86\u5b57\u6bb5\uff01\n//\u5728`elk/src/main.rs`fn main()-&gt\uff1bresult&lt\uff1b()\u4e2d\uff0cBox&lt\uff1bdyn error&gt\uff1b&gt\uff1b{let input_path=env\uff1a\uff1aargs()\u3002\u7b2cn(1)\u3002\u9884\u671f(&#34\uff1b\u7528\u6cd5\uff1aELK\u6587\u4ef6&#34\uff1b)\uff1blet input=fs\uff1a\uff1aread(&amp\uff1binput_path)\uff1f\uff1blet(_\uff0cfile)=Delf\uff1a\uff1afile\uff1a\uff1aparse(&amp\uff1binput[.\u3002]))\u3002Map_err(|e|format\uff01(&#34\uff1b{\uff1a\uff1f}&#34\uff1b\uff0ce))\uff1f\uff1b//new\uff01Println\uff01(&#34\uff1b{\uff1a#\uff1f}&#34\uff1b\uff0cfile)\uff1b\u786e\u5b9a(())}\u3002\n$./target/debug/elk/usr/lib32/libc.soError\uff1a&#34\uff1b\u9519\u8bef(VerboseError{\u9519\u8bef\uff1a[47\uff0c42\uff0c32\uff0c71\uff0c78\uff0c85\uff0c32,108,100\uff0c32,115\uff0c99,114,105,112,116\uff0c10\uff0c32\uff0c32\uff0c32\uff0c85,115,101\uff0c32,116,104,101\uff0c32,115,104\uff0c97,114,101,100\uff0c32,108,105\uff0c98,114\uff0c97,114,121\uff0c44\uff0c32\uff0c98,117,116\uff0c32,115,111,109,101\uff0c32,102,117,110\uff0c99,116,105,111,110\uff0c115\u300132\u300197\u3001114\u3001101\u300132\u3001111\u3001110\u3001108\u3001121\u300132\u3001105\u3001110\u300110\u300132\u300132\u3001116\u3001104\u3001101\u300132\u3001115\u3001116\u300197\u3001116\u3001105\u300199\u300132\u3001108\u3001105\u300198\u3001114\u300197\u3001114\u3001121\u300144\u300132\u3001115\u3001111\u300132\u3001116\u3001114\u3001121\u300132\u3001116\u3001104\u300197\u3001116\u300132\u3001115\u3001101\u300199\u3001111\u3001110\u3001100\u300197\u300197\u3001114\u3001105\u3001108\u3001121\u300146\u300132\u300132\u300142\u300147\u300110\u300279\uff0c85\uff0c84\uff0c80\uff0c85\uff0c84\uff0c95\uff0c70\uff0c79\uff0c82\uff0c77\uff0c65\uff0c84\uff0c40,101,108,102\uff0c51\uff0c50\uff0c45,105\uff0c51\uff0c56\uff0c54\uff0c41\uff0c10\uff0c71\uff0c82\uff0c79\uff0c85\uff0c80\uff0c32\uff0c40\uff0c32\uff0c47,117,115,114\uff0c47,108,105\uff0c98\uff0c51\uff0c50\uff0c47,108,105\uff0c98\uff0c99\uff0c46,115,111\uff0c46\uff0c54\uff0c32\uff0c47,117,115,114\uff0c47,108,105\uff0c98\uff0c50,108,105\uff0c98\uff0c99\uff0c46,115,111\uff0c46\uff0c54\uff0c32\uff0c47,117,115,114\uff0c47,108,105\uff0c98\uff0c51\uff0c50\uff0c47\uff0c47\u3002108\u3001105\u300198\u300199\u300195\u3001110\u3001111\u3001110\u3001115\u3001104\u300197\u3001114\u3001101\u3001100\u300146\u300197\u300132\u300132\u300165\u300183\u300195\u300178\u300169\u300169\u300168\u300132\u300140\u300132\u300147\u3001117\u3001115\u3001114\u300147\u3001108\u3001105\u300198\u300151\u300150\u300147\u3001108\u3001100\u300145\u3001108\u3001105\u3001110\u3001117\u3001120\u300146\u3001115\u3001111\u300146\u300150\u300132\u300141\u300132\u300141\u300110]\u3001nom(\u6807\u7b7e)\uff0c([47\uff0c42\uff0c32\u300171\u300178\u300185\u300132\u3001108\u3001100\u300132\u3001115\u300199\u3001114\u3001105\u3001112\u3001116\u300110\u300132\u300132\u300132\u300185\u3001115\u3001101\u300132\u3001116\u3001104\u3001101\u300132\u300132\u3001115\u3001104\u300197\u3001114\u3001101\u3001100\u300132\u3001108\u3001105\u300198\u3001114\u300197\u3001114\u3001121\u300144\u300132\u300198\u3001117\u3001116\u300132\u3001115\u3001111\u3001109\u3001101\u300132\u3001102\u3001117\u3001110\u300199\u3001116\u3001105\u3001111\u3001110\u3001115\u300132\u300197\u3001114\u3001101\u300132\u3001111\u3001115\u300132\u300197\u3001114\u3001101\u300132\u3001111\u3001115\u300132\u300197\u3001114\u3001101\u300132\u3001111\u3001110\u300199\u3001116\u3001105\u3001111\u3001110\u3001115\u300132\u300197\u3001114\u3001101\u300132\u3001111\u3002110\u3001108\u3001121\u300132\u3001105\u3001110\u300110\u300132\u300132\u300132\u3001116\u3001104\u3001101\u300132\u3001115\u3001116\u300197\u3001116\u3001105\u300199\u300132\u3001108\u3001105\u300198\u3001114\u300197\u3001114\u3001121\u300144\u300132\u3001115\u3001111\u300132\u3001116\u3001114\u3001121\u300132\u3001116\u3001104\u300197\u3001116\u300132\u3001115\u3001101\u300199\u3001111\u3001110\u3001100\u300197\u3001114\u3001105\u3001108\u3001121\u300146\u300132\u300132\u300142\u300147\u300110\u300179\u300185\u300184\u300180\u300185\u300195\u300270\uff0c79\uff0c82\uff0c77\uff0c65\uff0c84\uff0c40,101,108,102\uff0c51\uff0c50\uff0c45,105\uff0c51\uff0c56\uff0c54\uff0c41\uff0c10\uff0c71\uff0c82\uff0c79\uff0c85\uff0c80\uff0c32\uff0c40\uff0c32\uff0c47,117,115,114\uff0c47,108,105\uff0c98\uff0c51\uff0c50\uff0c47,108,105\uff0c98\uff0c51\uff0c50\uff0c47,108,105\uff0c98\uff0c99\uff0c46,115,111\uff0c46\uff0c54\uff0c32\uff0c47,117,115,114\uff0c47,108,105\uff0c98\uff0c51\uff0c50\uff0c47,108,105\uff0c98\uff0c99\uff0c95,110,111\uff0c110\u3001115\u3001104\u300197\u3001114\u3001101\u3001100\u300146\u300197\u300132\u300132\u300165\u300183\u300195\u300178\u300169\u300169\u300168\u300169\u300168\u300132\u300140\u300132\u300147\u3001117\u3001115\u3001114\u300147\u3001108\u3001105\u300198\u300151\u300150\u300147\u3001108\u3001100\u300145\u3001108\u3001105\u3001110\u3001117\u3001120\u300146\u3001115\u3001111\u300146\u300150\u300132\u300141\u300132\u300141\u300141\u300141\u300110]\u3001\u4e0a\u4e0b\u6587(\\&#34\uff1b\u9b54\u672f\\&#34\uff1b))]})&#34\uff1b\n//\u5728`delf/src/lib.rs`pub struct HexDump&lt\uff1b&#39\uff1ba&gt\uff1b(&amp\uff1b#39\uff1ba[U8])\uff1b\u4f7f\u7528std\uff1a\uff1afmt\uff1bIml&lt\uff1b&#39\uff1ba&gt\uff1bfmt\uff1a\uff1adebug for HexDump&lt\uff1b&#39\uff1ba&gt\uff1b{fn fmt(&amp\uff1bself\uff0cf\uff1a&amp\uff1bmut fmt\uff1a\uff1aFormatter)-&gt\uff1bfmt\uff1a\uff1aresult{for&amp\uff1bx in self\u30020\u3002ITER()\u3002\u62ff(20){\u5199\uff01(F\uff0c&#34\uff1b{\uff1a02x}&#34\uff1b\uff0cx)\uff1f\uff1b}OK(())}}\u3002\nNOM\uff1a\uff1aERR\uff1a\uff1a\u9519\u8bef\u662f\u53ef\u4ee5\u6062\u590d\u7684\u3002\u4e5f\u8bb8\u53e6\u4e00\u4e2a\u5206\u652f\u53ef\u4ee5\u5de5\u4f5c(\u5982\u679c\u6211\u4eec\u8fde\u7eed\u5c1d\u8bd5\u51e0\u4e2a\u89e3\u6790\u5668)\uff0c\u6216\u8005\u6211\u4eec\u53ea\u9700\u8981\u83b7\u5f97\u66f4\u591a\u7684\u8f93\u5165\u3002\nNom\uff1a\uff1aErr\uff1a\uff1a\u5931\u8d25\u662f\u65e0\u6cd5\u6062\u590d\u7684-\u6211\u4eec\u5df2\u7ecf\u5c1d\u8bd5\u4e86\u6240\u6709\u7684\u89e3\u6790\u5668\uff0c\u66f4\u591a\u7684\u8f93\u5165\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\uff0c\u53ea\u662f\u6709\u4e9b\u5730\u65b9\u662f\u5b8c\u5168\u9519\u8bef\u7684\u3002\n\u5728\u4efb\u4f55\u4e00\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u53ea\u5305\u88c5\u4e00\u4e2aNOM\uff1a\uff1aError\uff1a\uff1aVerboseError\uff0c\u5b83\u672c\u8eab\u53ef\u4ee5\u5305\u542b\u591a\u4e2aNom\uff1a\uff1aError\uff1a\uff1aErrorKind\uff0c\u4ee5\u53ca\u76f8\u5173\u7684\u8f93\u5165\u7247\u3002\n\u6211\u77e5\u9053\uff0c\u6211\u77e5\u9053--\u90a3\u592a\u591a\u4e86\uff01\u4f46\u591a\u4e8f\u4e86\u6a21\u5f0f\u5339\u914d\uff0c\u5b83\u5e76\u4e0d\u662f\u90a3\u4e48\u7cdf\u7cd5\u3002\n\u6211\u4eec\u53ef\u4ee5\u5728\u77ed\u77ed\u51e0\u884c\u5185\u5236\u4f5c\u51fa\u66f4\u597d\u7684\u9519\u8bef\u6253\u5370\u673a\u3002\u6211\u4eec\u5c06\u76f4\u63a5\u5728Delf\u4e2d\u6dfb\u52a0\u5b83\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u4e0d\u4f1a\u5728ELK\u4e2d\u4f7f\u7528NOM\u7c7b\u578b\uff1a\n//\u5728`delf/src/lib.rs`impl File{pub FN parse(i\uff1aparse\uff1a\uff1ainput)-&gt\uff1bparse\uff1a\uff1aresult&lt\uff1bself&gt\uff1b{let Original_i=i\uff1buse nom\uff1a\uff1a{error\uff1a\uff1a{ErrorKind\uff0cParseError\uff0cVerboseError}\uff0cnumber\uff1a\uff1aComplete\uff1a\uff1ale_u16\uff0cerr\uff0c}\uff1blet(i\uff0cx)=le_u16(I)\uff1f\uff1b\u5339\u914dself\uff1a\uff1atry_from(X){OK(Res)=&gt\uff1bOK((i\uff0cres))\uff0cErr(_)=&gt\uff1bErr(Err\uff1a\uff1aFailure(VerboseError\uff1a\uff1aFROM_ERROR_KIND(Original_I\uff0cErrorKind\uff1a\uff1aalt\uff0c)\uff0c}\u3002\n//\u5728`elk/src/main.rs`fn main()-&gt\uff1bresult&lt\uff1b()\u4e2d\uff0cBox&lt\uff1bdyn error&gt\uff1b&gt\uff1b{//\u7701\u7565\uff1a\u6293\u53d6\u7b2c\u4e00\u4e2a\u53c2\u6570let file=Match Delf\uff1a\uff1aFile\uff1a\uff1aparse_or_print_error(&amp\uff1binput[.\u3002])){Some(F)=&gt\uff1bf\uff0cNone=&gt\uff1bstd\uff1a\uff1aprocess\uff1a\uff1aexit(1)\uff0c}\uff1bprintln\uff01(&#34\uff1b{\uff1a#\uff1f}&#34\uff1b\uff0cfile)\uff1b}\u3002\n$Cargo b-q$./target/debug/elk/usr/lib\u3002\n.", "note_en": "Executables have been fascinating to me ever since I discovered, as a kid,that they were just files. If you renamed a  .exe to something else, youcould open it in notepad! And if you renamed something else to a  .exe,you&#39;d get a neat error dialog.\n Clearly, something was different about these files. Seen from notepad, theywere mostly gibberish, but there  had to be order in that chaos. 12-year-oldme knew that, although he didn&#39;t quite know how or where to dig to make senseof it all.\n So, this series is dedicated to my past self. In it we&#39;ll attempt tounderstand how Linux executables are organized, how they are executed, andhow to make a program that takes an executable fresh off the linker andcompresses it - just because we can.\n Since the last big series,  Making our own ping,was all about Windows, this one will be focused on 64-bit Linux.\n  Throughout the course of this series, we&#39;re definitely going to want to emitour own ELF files, but - just like we did when tackling Ethernet, IPv4 andICMP, we&#39;re first going to get our hands on a well-formed, fully-working Linuxexecutable, and then poke it with various sticks.\n ELF stands for  Executable and Linkable Format. It was first publishedin 1983, as part of  SysV 4,and it&#39;s still in use on Linux today, although new sections have been added.\n I had to go back to  Reading files the hard way - Part2 to get a quick refresher onnasm - the Netwide Assembler - so I wouldn&#39;t blame you if you had to, too.\n In any case, here&#39;s the short version: here&#39;s some code to print &#34;hi there&#34;to the standard output, followed by a newline:\n ; in `hello.asm` global _start section .text_start: mov rdi, 1 ; stdout fd mov rsi, msg mov rdx, 9 ; 8 chars + newline mov rax, 1 ; write syscall syscall xor rdi, rdi ; return code 0 mov rax, 60 ; exit syscall syscall section .datamsg: db &#34;hi there&#34;, 10\n   $ nasm -f elf64 hello.asm$ ld hello.o -o hello$ file hellohello: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped$ ./hellohi there\n  Now, our executable is about 8.68 KiB as-is. If we use  gzip -9 on it, wecan easily get that down to 372 B, so I&#39;m kinda curious to see what&#39;s inthere, to be quite honest.\n This series is  not about lamenting the good old days when everything usedto fit on a floppy. It&#39;s not about how modern software is bloated and slow.It&#39;s not about to go into a tangent about developers being &#34;lazy&#34; and it&#34;not being that hard if only someone tried&#34;.\n We are not developing something  practical here, we are picking a challengepurely for the sake of learning stuff.\n If you need a chunky dose of nostalgia instead, feel free to check out  gesturesvaguely at almost all of the internet.\n If we look at an hex dump of  hello, we see the  ELF string early on, followedby a bunch of binary data:\n $ xxd &lt; hello | head00000000: 7f45 4c46 0201 0100 0000 0000 0000 0000 .ELF............00000010: 0200 3e00 0100 0000 0010 4000 0000 0000 ..&gt;.......@.....00000020: 4000 0000 0000 0000 3821 0000 0000 0000 @.......8!......00000030: 0000 0000 4000 3800 0300 4000 0600 0500 ....@.8...@.....00000040: 0100 0000 0400 0000 0000 0000 0000 0000 ................00000050: 0000 4000 0000 0000 0000 4000 0000 0000 ..@.......@.....00000060: e800 0000 0000 0000 e800 0000 0000 0000 ................00000070: 0010 0000 0000 0000 0100 0000 0500 0000 ................00000080: 0010 0000 0000 0000 0010 4000 0000 0000 ..........@.....00000090: 0010 4000 0000 0000 2500 0000 0000 0000 ..@.....%.......\n But we can pretty easily see that most of the file is made out ofnull (zero) bytes:\n $ xxd &lt; hello | tail -60 | head00001f00: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f10: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f20: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f30: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f40: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f50: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f60: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f70: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f80: 0000 0000 0000 0000 0000 0000 0000 0000 ................00001f90: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n We can also find a section that contains a bunch of names, maybe theyhave some sort of meaning?\n $ xxd &lt; hello | tail -32 | head000020c0: 0920 4000 0000 0000 0000 0000 0000 0000 . @.............000020d0: 2b00 0000 1000 0200 1020 4000 0000 0000 +........ @.....000020e0: 0000 0000 0000 0000 0068 656c 6c6f 2d6f .........hello-o000020f0: 7269 6769 6e61 6c2e 6173 6d00 6d73 6700 riginal.asm.msg.00002100: 5f5f 6273 735f 7374 6172 7400 5f65 6461 __bss_start._eda00002110: 7461 005f 656e 6400 002e 7379 6d74 6162 ta._end...symtab00002120: 002e 7374 7274 6162 002e 7368 7374 7274 ..strtab..shstrt00002130: 6162 002e 7465 7874 002e 6461 7461 0000 ab..text..data..00002140: 0000 0000 0000 0000 0000 0000 0000 0000 ................00002150: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n Now, there&#39;s a whole  host of tools that would let us poke this ELF file fromthe comfort of a terminal. Ohh yes. A slew of them. Tools and tools as far asthe eye can see. But we shan&#39;t be using them today. Not today, matey.\n Today, we parse things ourselves. Using the  nom crate, which we used in the Making our own ping series, and armed withwhich I would be willing to parse darn near anything -  even PSD.\n For that, though, we&#39;ll need a few pointers. The  Wikipedia page forELF is not halfbad, but it&#39;s not the greatest overview - in part because it bothers itselfwith 32-bit ELF, which we will, for the entire length of this series,conveniently forget.\n    I realize that&#39;s a lot to take in - a lot of this doesn&#39;t make sense yet!\n Before we start writing any code, let&#39;s do some basic exploration by hand. Accordingto that diagram, at offset  62 in the file, there&#39;s an &#34;index of entry with section names&#34;.For our  hello executable, that&#39;s...\n $ # -s = seek, -l = length$ xxd -s 62 -l 2 ./hello0000003e: 0500 ..\n The bytes  05 and  00 - now, we&#39;re dealing with a little-endian file, so that means  0x0005,which is just  5. So the  fifth section header in the table contains section names.\n At this point we have no idea what sections are, but I think it&#39;s safe to saythat the file is divided into them and that their beginning and size is storedin those section headers.\n  $ # -g = group size, -e = little-endian$ xxd -s 40 -l 8 -g 8 -e ./hello00000028: 0000000000002140\n   Even though  xxd itself doesn&#39;t support hexadecimal notation, we can perform  shell arithmetic with  $((expr))!\n According to the  Wikipedia page on ELF,every section header contains the offset in the file where the section data is stored... at offset 0x18!\n  $ xxd -s $((0x2140 + 0x40 * 5 + 0x18)) -l 8 -g 8 -e ./hello00002298: 0000000000002118 .!......\n That means that the data of the section that contains section names should be at  0x2118. Let&#39;s check it out:\n $ xxd -s $((0x2118)) ./hello | head -400002118: 002e 7379 6d74 6162 002e 7374 7274 6162 ..symtab..strtab00002128: 002e 7368 7374 7274 6162 002e 7465 7874 ..shstrtab..text00002138: 002e 6461 7461 0000 0000 0000 0000 0000 ..data..........00002148: 0000 0000 0000 0000 0000 0000 0000 0000 ................\n   It was fun looking through the file by hand, and we learned to use  xxd todo exactly that (which might definitely come in handy in the nuclear winterif a graphical hex viewer/editor isn&#39;t available), but we probably wantto start writing an actual parser now.\n  $ cargo new --lib delf$ cd delf$ cargo add nom Adding nom v5.1.2 to dependencies\n   // in `delf/src/parse.rs` pub  type  Input &lt; &#39; a &gt; =  &amp; &#39; a  [ u8 ] ; pub  type  Result &lt; &#39; a,  O &gt; = nom :: IResult &lt; Input &lt; &#39; a &gt;,  O, nom ::error :: VerboseError &lt; Input &lt; &#39; a &gt; &gt; &gt; ;\n   Like I said earlier, we&#39;re not going to bother with big-endian ELFs, or 32-bit ELFs, so wecan hardcode a few values. Let&#39;s get started!\n // in `delf/src/lib.rs` # [derive (Debug ) ] pub  struct  File {  // we&#39;ll add fields as we go} impl  File {  const MAGIC:  &amp; &#39; static  [ u8 ] =  &amp; [ 0x7f,  0x45,  0x4c,  0x46 ] ;  pub  fn  parse ( i: parse :: Input ) -&gt; parse :: Result &lt; Self &gt; {  use nom ::{ bytes ::complete ::{tag, take}, error ::context, sequence ::tuple, } ;  let  (i, _ ) =  tuple ( (  // -------  context ( &#34;Magic&#34;,  tag ( Self ::MAGIC ) ),  context ( &#34;Class&#34;,  tag ( &amp; [ 0x2 ] ) ),  context ( &#34;Endianness&#34;,  tag ( &amp; [ 0x1 ] ) ),  context ( &#34;Version&#34;,  tag ( &amp; [ 0x1 ] ) ),  context ( &#34;OS ABI&#34;,  tag ( &amp; [ 0x0 ] ) ),  // -------  context ( &#34;Padding&#34;,  take ( 8_usize ) ),  ) ) (i )? ; Ok ( (i,  Self {} ) ) }}\n That looks reasonable. Let&#39;s make another crate to test the  delf crate.We&#39;ll name it &#34;elk&#34;, for &#34;Executable &amp; Linker Kit&#34;\n  // in `src/elk/main.rs` use std ::{env, error ::Error, fs} ; fn  main ( ) -&gt;  Result &lt; ( ),  Box &lt; dyn  Error &gt; &gt; {  let input_path = env :: args ( ) . nth ( 1 ) . expect ( &#34;usage: elk FILE&#34; ) ;  let input = fs :: read ( &amp;input_path )? ; delf :: File :: parse ( &amp;input [.. ] ) . map_err (|e|  format ! ( &#34;{:?}&#34;, e ) )? ;  println ! ( &#34;input is a supported ELF file!&#34; ) ; Ok ( ( ) )}\n      Let&#39;s start with the type - declaring an enum in Rust is simple enough.We&#39;ll want to derive some useful traits -  Debug for printing,  Clone and Copy so it has copy semantics (instead of transmitting ownership), PartialEq and  Eq to compare  Type values for equality.\n // in `delf/src/lib.rs` # [derive (Debug, Clone, Copy, PartialEq, Eq ) ] pub  enum  Type { None, Rel, Exec, Dyn, Core,}\n When reading our ELF file though, we won&#39;t get a  Type - we&#39;ll get a  u16.And similarly, when we write out an ELF file, we&#39;ll also need a  u16.\n  // in `delf/src/lib.rs` impl  Type { to_u16 ( &amp; self ) -&gt; u16 { match  self {  Self ::None =&gt;  0,  Self ::Rel =&gt;  1,  Self ::Exec =&gt;  2,  Self ::Dyn =&gt;  3,  // etc. } }}\n Or we could just set the  representation of the  Type enum to  u16 - andthen we&#39;d get that for free:\n // in `delf/src/lib.rs` # [derive (Debug, Clone, Copy, PartialEq, Eq ) ] # [repr (u16 ) ] pub  enum  Type { None =  0x0, Rel =  0x1, Exec =  0x2, Dyn =  0x3, Core =  0x4,}\n Now, we can use the  as operator to cast our  Type to  u16 - let&#39;swrite a quick test to validate our assumptions:\n   $ # t == test, --lib == only library unit tests (not doc tests)$ cargo t --lib Finished test [unoptimized + debuginfo] target(s) in 0.02s Running target/debug/deps/delf-d6fdd5529c793a0brunning 1 testtest tests::type_to_u16 ... oktest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n Splendid! Now there&#39;s the small matter of going the  other way - convertingan  u16 to a  Type. The problem here, of course, is that not all  u16 valuesare valid  Type values.\n In fact, had we written  from_u16 ourselves, we would have had to dealwith this problem head-on:\n // in `delf/src/lib.rs` impl  Type {  pub  fn  from_u16 ( x:  u16 ) -&gt;  Self {  match x {  0 =&gt;  Self ::None,  1 =&gt;  Self ::Rel,  2 =&gt;  Self ::Exec,  3 =&gt;  Self ::Dyn,  4 =&gt;  Self ::Core, } }}\n  # b = build, -q = quiet$ cargo b -qerror[E0004]: non-exhaustive patterns: `5u16..=std::u16::MAX` not covered --&gt; src/lib.rs:17:15 |17 | match x { | ^ pattern `5u16..=std::u16::MAX` not covered | = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n  // in `delf/src/lib.rs` impl  Type {  pub  fn  from_u16 ( x:  u16 ) -&gt;  Option &lt; Self &gt; {  match x {  0 =&gt; Some ( Self ::None ),  1 =&gt; Some ( Self ::Rel ),  2 =&gt; Some ( Self ::Exec ),  3 =&gt; Some ( Self ::Dyn ),  4 =&gt; Some ( Self ::Core ), _ =&gt; None, } }} # [cfg (test ) ] mod tests {  // omitted: previous tests  # [test ]  fn  type_from_u16 ( ) {  assert_eq ! ( super::Type::from_u16 ( 0x3 ), Some ( super::Type::Dyn ) ) ;  assert_eq ! ( super::Type::from_u16 ( 0xf00d ), None ) ; }}\n  $ cargo t --lib Finished test [unoptimized + debuginfo] target(s) in 0.02s Running target/debug/deps/delf-d6fdd5529c793a0brunning 2 teststest tests::type_to_u16 ... oktest tests::type_from_u16 ... oktest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n ...but it&#39;s kinda tedious. We already specify a  Type &lt;-&gt; u16 mapping, when wefirst define the enum. Why should we  repeat ourselves?\n As it turns out..  eyes light up in wonder there is a crate for that!\n   // in `delf/src/lib.rs` use derive_try_from_primitive ::TryFromPrimitive ; # [derive (Debug, Clone, Copy, PartialEq, Eq, TryFromPrimitive ) ] # [repr (u16 ) ] pub  enum  Type { None =  0x0, Rel =  0x1, Exec =  0x2, Dyn =  0x3, Core =  0x4,} # [derive (Debug, Clone, Copy, PartialEq, Eq, TryFromPrimitive ) ] # [repr (u16 ) ] pub  enum  Machine { X86 =  0x03, X86_64 =  0x3e,} # [cfg (test ) ] mod tests {  use  super ::Machine ;  use std ::convert ::TryFrom ;  # [test ]  fn  try_enums ( ) {  assert_eq ! (Machine::X86_64  as  u16,  0x3E ) ;  assert_eq ! (Machine::try_from ( 0x3E ), Ok (Machine::X86_64 ) ) ;  assert_eq ! (Machine::try_from ( 0xFA ), Err ( 0xFA ) ) ; }}\n In a previous version of this article, we used  derive-try-from-primitive v0.1.0,which returned an  Option&lt;T&gt;. But, since then,  derive-try-from-primitive v1.0.0was released, which returns a  Result&lt;T, E&gt; since it implements the standard  TryFrom interface.\n  $ cargo t Finished test [unoptimized + debuginfo] target(s) in 0.01s Running /home/amos/ftl/elf-series/target/debug/deps/delf-2d44b198a598eda8running 1 testtest tests::try_enums ... oktest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out Doc-tests delfrunning 0 teststest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n Now, we can finally parse both the type and the machine. First let&#39;s addthem to the  File struct:\n   $ cargo b -qerror: expected identifier, found keyword `type` --&gt; src/lib.rs:24:5 |24 | type: Type, | ^^^^ expected identifier, found keyword |help: you can escape reserved keywords to use them as identifiers |24 | r#type: Type, | ^^^^^^\n It is! We could use  typ instead - but just this once, let&#39;s use theescaped form instead, like the compiler suggests.\n    // in `delf/src/lib.rs` // new! use std ::convert ::TryFrom ; impl  File {  // omitted: magic constant  pub  fn  parse ( i: parse :: Input ) -&gt; parse :: Result &lt; Self &gt; {  use nom ::{ bytes ::complete ::{tag, take}, error ::context, sequence ::tuple, combinator ::map, number ::complete ::le_u16, } ;  // omitted: parse magic, etc.  let  (i,  (r#type, machine ) ) =  tuple ( (  context ( &#34;Type&#34;,  map (le_u16, |x|  Type :: try_from (x ) . unwrap ( ) ) ),  context ( &#34;Machine&#34;,  map (le_u16, |x|  Machine :: try_from (x ) . unwrap ( ) ) ),  ) ) (i )? ;  let res =  Self { machine, r#type } ; Ok ( (i, res ) ) }}\n To try that, we&#39;ll switch back to our binary crate,  elk, for a second,and print the  File struct, now that it has fields!\n // in `elk/src/main.rs` fn  main ( ) -&gt;  Result &lt; ( ),  Box &lt; dyn  Error &gt; &gt; {  let input_path = env :: args ( ) . nth ( 1 ) . expect ( &#34;usage: elk FILE&#34; ) ;  let input = fs :: read ( &amp;input_path )? ;  let  (_, file ) = delf :: File :: parse ( &amp;input [.. ] ) . map_err (|e|  format ! ( &#34;{:?}&#34;, e ) )? ;  // new!  println ! ( &#34;{:#?}&#34;, file ) ; Ok ( ( ) )}\n   $ ./target/debug/elk /usr/lib32/libc.soError: &#34;Error(VerboseError { errors: [([47, 42, 32, 71, 78, 85, 32, 108, 100, 32, 115, 99, 114, 105, 112, 116, 10, 32, 32, 32, 85, 115, 101, 32, 116, 104, 101, 32, 115, 104, 97, 114, 101, 100, 32, 108, 105, 98, 114, 97, 114, 121, 44, 32, 98, 117, 116, 32, 115, 111, 109, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 111, 110, 108, 121, 32, 105, 110, 10, 32, 32, 32, 116, 104, 101, 32, 115, 116, 97, 116, 105, 99, 32, 108, 105, 98, 114, 97, 114, 121, 44, 32, 115, 111, 32, 116, 114, 121, 32, 116, 104, 97, 116, 32, 115, 101, 99, 111, 110, 100, 97, 114, 105, 108, 121, 46, 32, 32, 42, 47, 10, 79, 85, 84, 80, 85, 84, 95, 70, 79, 82, 77, 65, 84, 40, 101, 108, 102, 51, 50, 45, 105, 51, 56, 54, 41, 10, 71, 82, 79, 85, 80, 32, 40, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 105, 98, 99, 46, 115, 111, 46, 54, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 105, 98, 99, 95, 110, 111, 110, 115, 104, 97, 114, 101, 100, 46, 97, 32, 32, 65, 83, 95, 78, 69, 69, 68, 69, 68, 32, 40, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 100, 45, 108, 105, 110, 117, 120, 46, 115, 111, 46, 50, 32, 41, 32, 41, 10], Nom(Tag)), ([47, 42, 32, 71, 78, 85, 32, 108, 100, 32, 115, 99, 114, 105, 112, 116, 10, 32, 32, 32, 85, 115, 101, 32, 116, 104, 101, 32, 115, 104, 97, 114, 101, 100, 32, 108, 105, 98, 114, 97, 114, 121, 44, 32, 98, 117, 116, 32, 115, 111, 109, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 32, 97, 114, 101, 32, 111, 110, 108, 121, 32, 105, 110, 10, 32, 32, 32, 116, 104, 101, 32, 115, 116, 97, 116, 105, 99, 32, 108, 105, 98, 114, 97, 114, 121, 44, 32, 115, 111, 32, 116, 114, 121, 32, 116, 104, 97, 116, 32, 115, 101, 99, 111, 110, 100, 97, 114, 105, 108, 121, 46, 32, 32, 42, 47, 10, 79, 85, 84, 80, 85, 84, 95, 70, 79, 82, 77, 65, 84, 40, 101, 108, 102, 51, 50, 45, 105, 51, 56, 54, 41, 10, 71, 82, 79, 85, 80, 32, 40, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 105, 98, 99, 46, 115, 111, 46, 54, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 105, 98, 99, 95, 110, 111, 110, 115, 104, 97, 114, 101, 100, 46, 97, 32, 32, 65, 83, 95, 78, 69, 69, 68, 69, 68, 32, 40, 32, 47, 117, 115, 114, 47, 108, 105, 98, 51, 50, 47, 108, 100, 45, 108, 105, 110, 117, 120, 46, 115, 111, 46, 50, 32, 41, 32, 41, 10], Context(\\&#34;Magic\\&#34;))] })&#34;\n    // in `delf/src/lib.rs` pub  struct  HexDump &lt; &#39; a &gt; ( &amp; &#39; a  [ u8 ] ) ; use std ::fmt ; impl &lt; &#39; a &gt; fmt :: Debug  for  HexDump &lt; &#39; a &gt; {  fn  fmt ( &amp; self,  f:  &amp; mut fmt :: Formatter ) -&gt; fmt :: Result {  for  &amp;x  in  self . 0 . iter ( ) . take ( 20 ) {  write ! (f,  &#34;{:02x} &#34;, x )? ; } Ok ( ( ) ) }}\n  nom::Err::Error is recoverable. Maybe another branch will work(if we&#39;re trying several parsers in a row), or maybe we justneed to get more input.\n nom::Err::Failure is unrecoverable - we&#39;ve tried all the parsers,more input won&#39;t help, something is just plain wrong.\n In either case, they just wrap a  nom::error::VerboseError, which itselfcan contain multiple  nom::error::ErrorKind, along with the relevant input slice.\n I know, I know - that&#39;s a lot! But thanks to  pattern matching, it&#39;s not so bad.\n We can make a much better error printer in just a few lines. We&#39;ll add itdirectly in  delf, so that we don&#39;t have use  nom types in  elk:\n // in `delf/src/lib.rs` impl  File {  pub  fn  parse ( i: parse :: Input ) -&gt; parse :: Result &lt; Self &gt; {  let original_i = i ;  use nom ::{ error ::{ErrorKind, ParseError, VerboseError}, number ::complete ::le_u16, Err, } ;  let  (i, x ) =  le_u16 (i )? ;  match  Self :: try_from (x ) { Ok (res ) =&gt; Ok ( (i, res ) ), Err (_ ) =&gt; Err ( Err ::Failure ( VerboseError :: from_error_kind ( original_i,  ErrorKind ::Alt,  ) ) ), } }}\n  // in `elk/src/main.rs` fn  main ( ) -&gt;  Result &lt; ( ),  Box &lt; dyn  Error &gt; &gt; {  // omitted: grabbing first argument  let file =  match delf :: File :: parse_or_print_error ( &amp;input [.. ] ) { Some (f ) =&gt; f, None =&gt; std ::process :: exit ( 1 ), } ;  println ! ( &#34;{:#?}&#34;, file ) ;}\n $ cargo b -q$ ./target/debug/elk /usr/lib\n......", "posttime": "2020-10-29 12:05:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,u16", "title": "Linux\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u6709\u4ec0\u4e48\uff1f", "title_en": "What's in a Linux Executable?", "transed": 1, "url": "https://fasterthanli.me/series/making-our-own-executable-packer/part-1", "via": "", "real_tags": ["linux", "u16"]}]