[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1068449, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u521b\u9020  \u5e10\u6237 ", "note_en": "Create\r\t\t\t\t\t\t\t\t\t\t\tAccount", "posttime": "2021-06-29 22:35:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6270\u4e71,disrupt,\u521b\u9020", "title": "\u5de5\u7a0b\u5e08\u53ef\u4ee5\u6270\u4e71\u6c14\u5019\u53d8\u5316 ", "title_en": "Engineers can disrupt climate change", "transed": 1, "url": "https://spectrum.ieee.org/energy/renewables/engineers-you-can-disrupt-climate-change", "via": "", "real_tags": ["\u6270\u4e71", "disrupt", "\u521b\u9020"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068448, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7531\u4e8eYouTube\u662f\u4e3b\u5bfc\u7684\u89c6\u9891\u5e73\u53f0\uff0c\u56e0\u6b64\u5bf9\u5176\u7248\u6743\u58f0\u660e\u7cfb\u7edf\u5df2\u7ecf\u6709\u5f88\u591a\u3002\u5927\u591a\u6570\u4eba\u90fd\u4e0e\u5173\u4e8e\u6784\u6210\u516c\u5e73\u4f7f\u7528\u7684\u95ee\u9898\uff08\u4f8b\u5982\uff0c\u5728\u7535\u5f71\u8bc4\u8bba\u4e2d\uff09\u3002 Google\u7684AI\u4e3b\u8981\u57f9\u8bad\uff0c\u4ee5\u8ba4\u8bc6\u5230\u60a8\u7684\u89c6\u9891\u4e2d\u5185\u5bb9\u7684\u5b58\u5728\u6216\u975e\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u60a8\u7684\u4f7f\u7528\u662f\u5426\u516c\u5e73\uff08\u987a\u4fbf\u8bf4\u4e00\u4e0b\u53f8\u6cd5\u7ba1\u8f96\u533a\u4e4b\u95f4\u7684\u4e1c\u897f\uff09\u3002\u4f46\u662f\u6211\u5c06\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u662f\u66f4\u6e05\u6670\u7684\uff1a\u516c\u5171\u9886\u57df\u97f3\u4e50\u7684\u8868\u73b0\u3002\n \u867d\u7136\u65b0\u7684\u7ec4\u5408\u7269\u80af\u5b9a\u662f\u827a\u672f\u7684\u4f18\u70b9\uff0c\u4f46\u4e5f\u6709\u5f88\u591a\u6211\u4eec\u559c\u6b22\u8868\u6f14\u73b0\u6709\u7684\u53e4\u5178\u97f3\u4e50\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u5728\u7f8e\u56fd\uff0c\u5728\u516c\u5171\u9886\u57df\u6709\u5f88\u591a\u3002\u5815\u843d\u7684\u7248\u6743\u4f9d\u8d56\u4e8e\u8be5\u56fd\u7684\u754c\u9650\uff0c\u4f46\u51e0\u4e4e\u5728\u5341\u4e5d\u4e16\u7eaa\u548c\u65e9\u4e9b\u65f6\u5019\u53d1\u8868\u7684\u4e00\u5207\u90fd\u662f\u514d\u8d39\u7684\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002\n \u4e0d\u5e78\u7684\u662f\uff0c\u8c37\u6b4c\u4f3c\u4e4e\u4e0d\u77e5\u9053\u8fd9\u4e00\u4e8b\u5b9e\u3002\u6700\u8fd1\uff0c\u6211\u4e0a\u4f20\u4e86\u966a\u5ba1\u56e2\u5411youtube\u5236\u4f5c\u4e86\u5409\u5c14\u4f2f\u7279\u548c\u6c99\u5229\u6587\u7684\u5ba1\u5224\uff0c\u5b83\u7acb\u5373\u53d7\u5230\u56db\u4e2a\u7248\u6743\u7d22\u8d54\u7684\u547d\u4e2d\u3002\u6211\u53bb\u6bd4\u8d5b\u4ed6\u4eec - \u6211\u4ee5\u524d\u505a\u8fc7\u8fd9\u79cd\u4e8b\u60c5\uff0c\u59cb\u7ec8\u4e3a\u516c\u5171\u9886\u57df\u7684\u97f3\u4e50\u6210\u529f - \u4f46\u8fd9\u771f\u7684\u4e0d\u5e94\u8be5\u662f\u5fc5\u8981\u7684\u3002\u5ba1\u5224\u662f\u572819\u4e16\u7eaa70\u5e74\u4ee3\u53d1\u8868\u7684\u7b2c\u4e00\u6b21\u51fa\u7248\u3002\u5409\u5c14\u4f2f\u7279\u548c\u6c99\u5229\u6587\u5206\u522b\u4e8e1911\u5e74\u548c1900\u5e74\u53bb\u4e16\u3002\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u4e2a\u6b4c\u5267\u4e0d\u662f\u4e16\u754c\u4e0a\u4efb\u4f55\u5730\u65b9\u7684\u7248\u6743\u3002\n \u5f53\u7136\uff0c\u867d\u7136\u97f3\u4e50\u80af\u5b9a\u5728\u516c\u5171\u9886\u57df\uff0c\u4f46\u65b0\u5f55\u97f3\u80af\u5b9a\u662f\u7248\u6743\u3002\u5982\u679c\u6211\u4e0a\u4f20\u4e86\u4e00\u4e2a\u53d7\u7248\u6743\u4fdd\u62a4\u7684D'Oyly Carte\u516c\u53f8\u7684\u5ba1\u5224\uff0c\u6211\u4f1a\u671f\u5f85\u7248\u6743\u58f0\u660e - \u8fd9\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002\u4f46\u8fd9\u4e0d\u662f\u6211\u505a\u7684\uff01\u4e8b\u5b9e\u4e0a\uff0c\u6211\u4e0a\u4f20\u7684\u5f55\u97f3\u662f\u4e00\u4e2a\u5b8c\u5168\u65b0\u7684\uff08\u6211\u6d89\u53ca\u7684\u4eba\uff09\u3002\u4e5f\u8bb8\u5b83\u4e0e\u53e6\u4e00\u79cd\u8868\u73b0\u611f\u5230\u56f0\u60d1\uff1f\u4e0d\uff01 YouTube\u5c06\u56db\u4e2a\u90e8\u5206\u6807\u8bb0\u4e3a\u4f7f\u7528\u201c\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u201d\u6b4c\u66f2\u7684\u65cb\u5f8b - \u4f46\u6211\u6240\u8c13\u7684\u4fb5\u72af\u7684\u6240\u6709\u7ec4\u5408\u90fd\u53ea\u662f\u5ba1\u5224\u7684\u6570\u5b57\uff01\n \u6240\u4ee5AI\u5f88\u597d\u3002\u5b83\u6b63\u786e\u8bc6\u522b\u4e86\u6211\u4f7f\u7528\u7684\u5185\u5bb9\uff0c\u5e76\u4e14\u6211\u4f7f\u7528\u8c37\u6b4c\u7248\u6743\u7ec4\u6210\u6570\u636e\u5e93\u7684\u65cb\u5f8b\u4e0a\u4f20\u4e86\u65b0\u7684\u5f55\u97f3\u3002\u552f\u4e00\u7684\u95ee\u9898\u662f\u8fd9\u4e9b\u65cb\u5f8b\u5c1a\u672a\u5f97\u5230\u7248\u6743\u3002\n \u8c37\u6b4c\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\u5927\u6982\u3002\u8fd9\u6837\u505a\u7684\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u662f\u901a\u8fc7\u5236\u4f5c\u516c\u5171\u9886\u57df\u7684\u7ec4\u6210\u6570\u636e\u5e93\uff08\u4e00\u79cd\u7528\u4e8e\u653b\u51fb\u7248\u6743\u6807\u8bb0\u5668\u7684\u516c\u5171\u57df\u540d\u6807\u8bb0\uff09\uff0c\u4f46\u8fd9\u5c06\u662f\u4e00\u4e2a\u8270\u96be\u7684\u4e8b\u4e1a\u3002\u66f4\u7b80\u5355\u7684\u662f\u4ece\u8d21\u732e\u8005\u5230\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u7ec4\u5408\u6570\u636e\u5e93\u7684\u4e00\u4e9b\u6700\u5c0f\u4fe1\u606f\uff0c\u4f8b\u5982Composer\uff0c\u5e97\u4e3b\uff08\u9002\u7528\uff09\uff0c\u51fa\u7248\u65e5\u671f\u7b49\u3002\n \u5f53\u7136\uff0c\u8c37\u6b4c\u4e0d\u592a\u53ef\u80fd\u505a\u4efb\u4f55\u7c7b\u578b\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6ca1\u6709\u771f\u6b63\u7684\u7406\u7531\u516c\u5e73\u5730\u5bf9\u5f85\u516c\u5171\u9886\u57df\u97f3\u4e50\u7684\u8868\u6f14\u8005\uff1a\u6211\u4eec\u65e0\u6cd5\u82cf\u56e0\u4e3a\u6211\u4eec\u5bf9\u6211\u4eec\u7684\u89c6\u9891\u8fdb\u884c\u4e86\u7248\u6743\u58f0\u660e\uff0c\u800c\u51fa\u7248\u5546\u53ef\u4ee5\u8d77\u8bc9\u7531\u4e8e\u7248\u6743\u4fb5\u6743\uff08\u5e76\u4e14\u8db3\u591f\u516c\u5e73\uff0c\u5f53\u4ed6\u4eec\u5b9e\u9645\u4e0a\u62e5\u6709\u7248\u6743\uff09\u3002\u56e0\u6b64\uff0c\u76f4\u523030\u5929\u7684\u4e0a\u8bc9\u671f\u9650\uff08\u4e0a\u8bc9\u5230\u7d22\u8d54\u4eba\uff01\uff09\u5230\u671f\uff0c\u4e00\u4e9b\u7248\u6743\u5de8\u9b54\u6b63\u5728\u8d5a\u94b1\uff0c\u4ece\u6211\u4eec\u7684\u65b0\u751f\u4ea7\u516c\u5171\u9886\u57df\u6b4c\u5267\u8fd0\u884c\u3002\u751a\u81f3\u66f4\u5177\u7248\u6743\u7684\u5de8\u9b54\u80af\u5b9a\u662f\u5728\u90a3\u91cc\u5236\u4f5c\u53ef\u80fd\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u91d1\u989d\uff0c\u4ed6\u4eec\u7edd\u5bf9\u4e0d\u62e5\u6709\u4e0d\u5bf9\u6b64\u7d22\u8d54\uff08\u6216\u8005\u4e0d\u77e5\u9053\u5982\u4f55\uff09\u7684\u4eba\u3002\u591a\u53ef\u60dc\u3002 ", "note_en": "Since YouTube is the dominant video platform, a lot has already been said about its copyright claims system. Most of that has had to do with questions about what constitutes fair use (in movie reviews, for instance). Google\u2019s AI is mostly trained to recognize the presence or non-presence of content in your video, not whether or not your use is fair (something that varies between jurisdictions, by the way). But what I\u2019m going to discuss here is much more clear-cut: the performance of public domain music.\n While there\u2019s certainly artistic merit in new compositions, there are also a lot of us who enjoy performing existing classical music. Luckily for us, there\u2019s lots of that in the public domain. The boundaries of what\u2019s fallen out of copyright depend on the country, but virtually everything published in the nineteenth century and earlier is free for everyone to use.\n Unfortunately, Google seems not to be aware of this fact. Recently, I uploaded a production of Gilbert and Sullivan\u2019s   Trial by Jury to YouTube, and it instantly got hit by four copyright claims. I went to go contest them \u2014 something I\u2019ve done before for this kind of thing, and always with success for public domain music \u2014 but that really shouldn\u2019t be necessary.  Trial was first published in the 1870s. Gilbert and Sullivan died in 1911 and 1900, respectively. As far as I know, this opera isn\u2019t under copyright anywhere in the world.\n Of course, while the music is definitely in the public domain, new recordings can definitely be under copyright. If I\u2019d uploaded a copyrighted D\u2019Oyly Carte Company performance of  Trial, I\u2019d expect a copyright claim \u2014 it\u2019d be totally justified. But that\u2019s not what I did! In fact, the recording I uploaded was an entirely new one (in which I was myself involved). Maybe it got confused with another performance? Nope! YouTube flagged four segments as  using the melody of \u201ccopyrighted\u201d songs \u2014 but all the compositions on which I had supposedly infringed were just numbers from  Trial!\n So the AI is good. It correctly identified what I was using, and that I\u2019d uploaded a new recording using a melodies from Google\u2019s database of copyrighted compositions. The only problem is that these melodies  aren\u2019t copyrighted.\n Could Google fix this? Probably. One way to do this could be by producing a database of public domain compositions (a sort of public domain flagger to face off against the copyright flagger), but this would be a difficult undertaking. Much simpler would be requiring some minimal information from contributors to the database of copyrighted compositions, such as composer, librettist (when applicable), publication date and so on.\n Of course, Google isn\u2019t likely to do anything of the sort, since they have no real reason to treat performers of public domain music fairly: we can\u2019t sue just because we got a copyright claim against our video, while publishers can sue for copyright infringement (and fair enough, when they actually hold a copyright). So, until the 30-day appeal period (appeals are to the claimant!) expires, some copyright troll is making money off of ads running on our new production of a public domain opera. And even more copyright trolls are definitely out there making what is likely a substantial amount of money off of stuff they definitely don\u2019t own from people who don\u2019t contest the claims (or don\u2019t know how to). What a shame.", "posttime": "2021-06-29 22:35:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,\u8c37\u6b4c,\u7248\u6743", "title": "\u4eb2\u7231\u7684\u8c37\u6b4c\uff1a\u5b58\u5728\u516c\u5171\u9886\u57df\u7684\u4f5c\u54c1 ", "title_en": "Dear Google: Public domain compositions exist", "transed": 1, "url": "https://blog.dbmiller.org/2021-06-28-dear-google-public-domain-compositions-exist", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u7248\u6743"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068447, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u535a\u5ba2\u6587\u7ae0\u4e2d\u6211\u4eec\uff06\uff0339; ll\u6db5\u76d6\u7cfb\u7edf\u5982\u4f55\u5f62\u6210\u96c6\u7fa4\uff0c\u5b9e\u9645\u4e0a\u662f\u4ec0\u4e48\u96c6\u7fa4\u4ee5\u53ca\u4ed6\u4eec\u7684\u804c\u8d23\u662f\u4ec0\u4e48\u3002\u6211\u4eec\uff06\uff0339; LL\u8fd8\u5448\u73b0\u4e86\u4e0d\u540c\u7684\u534f\u8bae\uff0c\u4ee5\u6ee1\u8db3\u4e0e\u4ed6\u4eec\u76f8\u5173\u7684\u5404\u79cd\u6743\u8861\u7684\u7fa4\u96c6\u7684\u9700\u6c42\u3002\n \u4e3a\u4e86\u4f7f\u8fd9\u4e2a\u535a\u5ba2\u53d1\u8868\u4e00\u70b9\u66f4\u5b9e\u7528\uff0c\u6211\u4eec\u4e5f\u4f1a\u6df1\u5165\u4e86\u89e3\u4e86\u4f17\u8bae\u5458\u534f\u8bae\u4e4b\u4e00 - \u4ece\u6e38\u6cf3\u9996\u5b57\u6bcd\u7f29\u7565\u8bcd\u4e2d\u7684\u4e00\u4e2a\u96b6\u5c5e\u534f\u8bae - \u4ece\u7406\u8bba\u4e0a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5728F\uff03\u4e2d\u5b9e\u73b0\u4e86\u793a\u4f8b\u3002\n  \u4ece\u7528\u6237\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u7fa4\u96c6\u5e94\u8be5\u7528\u4f5cA\uff06\uff0334;\u5355\u673a\uff06\uff0334\u7684\u5e7b\u89c9;\u5e76\u5c06\u5176\u514d\u4e8e\u4e0e - \u901a\u5e38\u52a8\u6001\u53d8\u5316 - \u4e92\u8054\u670d\u52a1\u5668\u7f51\u7edc\u7684\u6240\u6709\u590d\u6742\u6027\u5b89\u5168\u3002\n \u6b63\u5982\u4e8b\u5b9e\u8bc1\u660e\uff0c\u90a3\u91cc\u7684\u4e00\u7cfb\u5217\u534f\u8bae\u548c\u8d23\u4efb\u662f\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\u9700\u8981\u89e3\u51b3\u4ee5\u7ef4\u6301\u8fd9\u79cd\u5e7b\u89c9\u3002\u8d70\u4e0b\u81ea\u4e0b\u800c\u4e0a\uff0c\u8fd9\u91cc\u662f\u6211\u4eec\u96c6\u7fa4\u901a\u5e38\u9700\u8981\u77e5\u9053\u5982\u4f55\u56de\u7b54\u7684\u4e00\u4e9b\u95ee\u9898\uff1a\n \u5982\u4f55\u52a0\u5165\u7fa4\u96c6\uff1f\u901a\u5e38\uff0c\u5f53\u6211\u4eec\u6709\u4e00\u4e2a\u6211\u4eec\u60f3\u8981\u52a0\u5165\u7fa4\u96c6\u7684\u65b0\u670d\u52a1\u5668\u8282\u70b9\u65f6\uff0c\u5b83\u9700\u8981\u77e5\u9053\u5982\u4f55\u4e0e\u5df2\u6709\u7fa4\u96c6\u672c\u8eab\u7684\u4e00\u90e8\u5206\u7684\u53e6\u4e00\u4e2a\u8282\u70b9\u901a\u4fe1\u3002\u54ea\u91cc\u53ef\u4ee5\u627e\u5230\u8fd9\u4e2a\u4fe1\u606f\uff1f\u5b83\uff06\uff0339;\u662f\u9700\u8981\u56de\u7b54\u7684\u95ee\u9898\uff1a\u6700\u7b80\u5355\u7684\u8bc0\u7a8d\u662f\u4e3a\u65b0\u670d\u52a1\u5f00\u59cb\u65f6\u63d0\u4f9b\u7684\u914d\u7f6e\u53c2\u6570\u63d0\u4f9b\u9759\u6001\u7684\u8054\u7cfb\u70b9\u5217\u8868\u3002\n \u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u7b2c\u4e09\u65b9\u670d\u52a1\uff08\u5982\u6570\u636e\u5e93\uff0cScenul\uff0cetcd\u6216zookeeper\uff09\u7528\u4f5c\u8282\u70b9\u6ce8\u518c\u8868\u3002\u6211\u4eec\u7684\u96c6\u7fa4\u901a\u5e38\u4e0d\u4f1a\u751f\u6d3b\u5728\u771f\u7a7a\u4e2d\uff0c\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u5176\u4ed6\u5df2\u7ecf\u5efa\u7acb\u7684\u670d\u52a1\u4ee5\u83b7\u5f97\u4f18\u52bf\u3002\n \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4f4e\u5c42Kubernetes DNS\u670d\u52a1\u6216MDNS\u7684\u529f\u80fd - \u7279\u5b9a\u4e8e\u4e3b\u673a\u73af\u5883\uff0c\u4ee5\u52a8\u6001\u53d1\u73b0\u751f\u6d3b\u5728\u540c\u4e00\u7f51\u7edc\u4e2d\u7684\u5176\u4ed6\u8bbe\u5907\u3002 \n\u6211\u4eec\u5982\u4f55\u77e5\u9053\u5176\u4ed6\u8282\u70b9\u662f\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\uff1f\u8fd9\u662f\u6240\u8c13\u7684\u4f1a\u5458\u534f\u8bae\u7684\u533a\u57df\uff0c\u6211\u4eec\uff06\uff0339; ll\u7126\u70b9\u5728\u672c\u535a\u5ba2\u6587\u7ae0\u7684\u7b2c\u4e8c\u90e8\u5206\u3002\u5728\u52a8\u6001\u96c6\u7fa4\u4e2d\uff0c\u5b83\u901a\u5e38\u901a\u8fc7\u8ddf\u8e2a\u6d3b\u52a8\u53d1\u73b0\u7684\u8282\u70b9\u6765\u5b8c\u6210\uff0c\u7136\u540e\u5728\u8282\u70b9\u8fde\u63a5/\u79bb\u5f00\u7fa4\u96c6\u65f6\u66f4\u65b0\u548c\u95f2\u7f6e\u5b83\u4eec\u3002\u8fd9\u91cc\u7684\u8bb8\u591a\u51b3\u5b9a\u4f9d\u8d56\u4e8e\u90e8\u7f72\u65b9\u6848 - \u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u5185\u5f62\u6210\u7fa4\u96c6\u7684\u670d\u52a1\u5177\u6709\u4e0d\u540c\u7684\u7279\u5f81\uff0c\u4ece\u4f8b\u5982eg\u3002\u79fb\u52a8\u8bbe\u5907\u7684\u7f51\u683c\u3002\u5728\u6258\u7ba1\u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u6258\u7ba1\u7684\u5e38\u89c1\u540e\u7aef\u670d\u52a1\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u4f1a\u4fdd\u6301\u6709\u5173\u7fa4\u96c6\u72b6\u6001\u7684\u5b8c\u6574\u4fe1\u606f\u3002\u8fd9\u5c31\u662f\u6e38\u6cf3\u64cd\u4f5c\u7684\u534f\u8bae\u3002\n \u5176\u4ed6\u6210\u5458\u8d44\u683c\u534f\u8bae\uff08\u5982hyparview\uff09\u542f\u7528\u53ea\u80fd\u5728\u7fa4\u96c6\u4e2d\u6620\u50cf\u3002\u5982\u679c\u6211\u4eec\u7684\u7fa4\u96c6\u5728\u66f4\u9ad8\u7684\u5c3a\u5ea6\u4e0a\u64cd\u4f5c\u65f6\uff0c\u5219\u8fd9\u662f\u4f18\u9009\u7684\u3002\u6210\u5343\u4e0a\u4e07\u7684\u8282\u70b9\uff08\u901a\u5e38\u751f\u6d3b\u5728\u6570\u636e\u4e2d\u5fc3\u7684\u5927\u591a\u6570\u96c6\u7fa4\u670d\u52a1Don\uff06\uff0339; t\u8fbe\u5230\u51e0\u5341\u591a\u4e2a\u670d\u52a1\u5668\uff09\u3002\n \u6211\u4eec\u5982\u4f55\u5c06\u6d88\u606f\u4ece\u4e00\u4e2a\u8282\u70b9\u53d1\u9001\u5230\u53e6\u4e00\u4e2a\u8282\u70b9\uff1f\u8fd9\u901a\u5e38\u4e5f\u4e0e\u96b6\u5c5e\u534f\u8bae\u6709\u5173\u3002\u5927\u591a\u6570\u4ee5\u6570\u636e\u4e2d\u5fc3\u4e3a\u5bfc\u5411\u7684\u7cfb\u7edf\u53ef\u4ee5\u4fdd\u5b88\u5047\u8bbe\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u53ef\u4ee5\u8fde\u63a5\u5230\u6bcf\u4e2a\u5176\u4ed6\u8282\u70b9\uff0c\u5f62\u6210\uff08\u6f5c\u5728\u5730\uff09\u5b8c\u5168\u8fde\u63a5\u7684\u7f51\u683c\u3002\n \u5728\u5176\u4ed6\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5230\u67d0\u4e9b\u8282\u70b9\u53ef\u80fd\u65e0\u6cd5\u8fde\u63a5\u5230\u5176\u4ed6\u8282\u70b9 - \u56e0\u4e3a\u7f51\u7edc\u7279\u5f81\u6f5c\u5728\u7684\u7f51\u7edc\u7279\u5f81\u3002\u867d\u7136\u5f53\u6211\u4eec\u8c08\u8bba\u7fa4\u96c6\u534f\u8bae\u65f6\uff0c\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\u5ba2\u6237\u670d\u52a1\u5668\u67b6\u6784\uff0c\u4f46\u5e38\u5e38\u9700\u8981\u5e94\u7528\u66f4\u9ad8\u7ea7\u7684\u65b9\u6848\uff08\u5982\u6211\u4eec\u6240\u63d0\u5230\u7684\uff0c\uff06\uff0334;\u670d\u52a1\u5668\uff06\uff0334;\u672c\u8eab\u4e0d\u662f\u5355\u4e00\u7684\u5b9e\u4f53\uff09\u3002\n \u6211\u4eec\u5982\u4f55\u68c0\u6d4b\u5230\u6b7b\u533a\uff1f\u4e5f\u79f0\u4e3a\u5931\u8d25\u68c0\u6d4b\u3002\u8be5\u9886\u57df\u6700\u53e4\u8001\u7684\u77e5\u8bc6\u662f\u6bcf\u7acb\u5373\u5728\u9884\u671f\u8d85\u65f6\u8fb9\u754c\u5185\u7684Ping\ud83e\udc58ACK\u6d88\u606f\u7684\u7b80\u5355\u4ea4\u6362\uff0c\u6216\u8005\u53ea\u662f\u671f\u671b\u5728\u7ed9\u5b9a\u65f6\u95f4\u95f4\u9694\u5185\u53d1\u9001\u5fc3\u8df3\u6d88\u606f\u3002\u5fc3\u8df3\u901a\u5e38\u76f4\u63a5\u8fdb\u5165\u8fd0\u8f93\u5c42\uff08\u5982TCP\uff09\uff0c\u6709\u65f6\u662f\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u80fd\u591f\u76f4\u63a5\u634e\u5e26\u5931\u8d25\u63a2\u6d4b\u5668\u3002\u8be5\u89e3\u51b3\u65b9\u6848\u7684\u7f3a\u70b9\u662f\uff0c\u867d\u7136\u8fd0\u8f93\u5c42\u672c\u8eab\u662f\u54cd\u5e94\u7684 - \u56e0\u4e3a\u5b83\u901a\u5e38\u7531\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406 - \u6211\u4eec\u7684\u5e94\u7528\u5c42\u5b9e\u9645\u4e0a\u4e0d\u662f\uff08\u4f8b\u5982\uff0c\u56e0\u4e3a\u5b83\u65e0\u9650\u671f\u5730\u6302\u8d77\u4e86\u50f5\u5316\u7684\u50f5\u5c40\uff09\u3002\u53e6\u4e00\u4ef6\u4e8b\u662f\u7f51\u7edc\u8fde\u63a5\u7684\u65f6\u95f4\u5931\u8d25\u5e76\u4e0d\u662f\u610f\u5473\u7740\uff0c\u90a3\u4e2a\u8282\u70b9\u8d62\u5f97\u4e86\uff06\uff0339; t\u8bd5\u7740\u91cd\u65b0\u542f\u52a8\u5e76\u7ee7\u7eed\u5de5\u4f5c\u3002\n \u66f4\u5e38\u89c1\u7684\u662f\uff0c\u4f1a\u5458\u534f\u8bae\u4fc3\u8fdb\u81ea\u5df1\u7684\u5fc3\u8df3\u7b97\u6cd5\u3002\u4ec0\u4e48\uff06\uff0339;\u5728\u8fd9\u91cc\u503c\u5f97\u6ce8\u610f\uff0c\u7f3a\u5c11\u5fc3\u8df3\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\uff0c\u6211\u4eec\u7684\u8282\u70b9\u5df2\u7ecf\u6b7b\u4ea1\u3002\u5b83\u4e5f\u53ef\u80fd\u4e0d\u582a\u91cd\u8d1f\uff0c\u63d0\u4f9b\u5176\u4ed6\u4f20\u5165\u8bf7\u6c42\u3002\u50cfPhi Accuctuct Dector\u6216Lifeguard\u8fd9\u6837\u7684\u73b0\u4ee3\u7b97\u6cd5\uff08\u4e0a\u9762\u63d0\u5230\u7684\u6e38\u6cf3\u534f\u8bae\u7684\u6269\u5c55\uff09\u8003\u8651\u5230\u8fd9\u4e00\u884c\u4e3a\u3002\n \u8fd9\u4e9b\u662f\u6700\u57fa\u672c\u7684\u95ee\u9898\u9700\u8981\u77e5\u9053\u5982\u4f55\u56de\u7b54\u3002\u6211\u4eec\u53ef\u4ee5\u79f0\u4e4b\u4e3a\u4efb\u4f55\u7fa4\u96c6\u7684\u7b2c0\u5c42\u3002\u672c\u535a\u5ba2\u6587\u7ae0\u7684\u4e3b\u8981\u90e8\u5206\u5c06\u6db5\u76d6\u5982\u4f55\u5b9e\u65bd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u534f\u8bae\u3002\u5728\u5b83\u4e4b\u4e0a\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6\u66f4\u9ad8\u7684\u7ea7\u522b\u529f\u80fd\uff0c\u65e8\u5728\u89e3\u51b3\u4ee5\u4e0b\u95ee\u9898\uff1a \n\u6211\u4eec\u5982\u4f55\u68c0\u6d4b/\u54cd\u5e94\u5b9a\u671f\u7f51\u7edc\u5206\u533a\uff1f\u901a\u5e38\u88ab\u79f0\u4e3a\u5206\u88c2\u6027\u60c5\u666f\u7684\u95ee\u9898\u3002\u5b83\u6765\u81ea\u57fa\u672c\u89c2\u5bdf\uff0c\u5373\u5b83\uff06\uff0339;\u25a0\u4e0d\u53ef\u80fd\u5728\u7f51\u7edc\u8fb9\u754c\u4e2d\u533a\u5206\u6b7b\u533a\u3002\u5b83\u53ef\u4ee5\u5bfc\u81f4\u98ce\u9669\u975e\u5e38\u5371\u9669\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\u5c06\u6211\u4eec\u7684\u96c6\u7fa4\u5206\u6210\u4e24\u4e2a\uff0c\u6bcf\u4e2a\u4eba\u90fd\u76f8\u4fe1\uff0c\u5b83\uff06\uff0339;\u552f\u4e00\u4e00\u4e2a\u6d3b\u7740\uff0c\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\u751a\u81f3\u8150\u8d25\u3002\u6ca1\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u6cbb\u7597\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u4e3a\u4ec0\u4e48\u4e00\u4e9b\u7cfb\u7edf\uff08\u5982akka.net\u5206\u88c2\u5927\u8111resolvers\uff09\u6839\u636e\u6211\u4eec\u5173\u5fc3\u7684\u6743\u8861\u63d0\u4f9b\u4e0d\u540c\u7684\u7b56\u7565\u3002\n \u4e0d\u540c\u7684\u8282\u70b9\u5982\u4f55\u63a8\u7406\u548c\u51b3\u5b9a\u7fa4\u96c6\u4e2d\u7684\u72b6\u6001\uff1f\u8fd9\u79cd\u60c5\u51b5\u901a\u5e38\u5728\u8d1f\u8d23\u6570\u636e\u7ba1\u7406\uff08\u5982\u5206\u5e03\u5f0f\u6570\u636e\u5e93\uff09\u7684\u7cfb\u7edf\u4e2d\u662f\u5e38\u89c1\u7684\u3002\u7531\u4e8e\u8282\u70b9\u5fc5\u987b\u80fd\u591f\u4e3a\u4f20\u5165\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\uff0c\u56e0\u6b64\u6709\u65f6\u5b83\u4eec\u53ef\u200b\u200b\u80fd\u4f1a\u9047\u5230\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u51b2\u7a81\u51b3\u7b56\u3002\u5728\u6ca1\u6709\u8fc7\u591a\u7684\u7ec6\u8282\u4e2d\uff0c\u4e24\u4e2a\u901a\u7528\u65b9\u6cd5\u4e24\u4e2a\u95ee\u9898\u662f\uff1a\u907f\u514d\u51b2\u7a81\uff0c\u8fd9\u901a\u5e38\u5047\u8bbe\u8282\u70b9\u5fc5\u987b\u5728\u63d0\u4ea4\u51b3\u7b56\u4e4b\u524d\u5efa\u7acb\u5173\u4e8e\u7cfb\u7edf\u72b6\u6001\u7684\u5171\u8bc6\u3002\u5b83\u901a\u5e38\u9700\u8981\u5efa\u7acb\uff08\u548c\u7ef4\u62a4\uff09\u8282\u70b9\u4e4b\u95f4\u7684\u4e00\u4e9b\u9886\u5bfc\u8005\uff0c\u901a\u8fc7\u4ef2\u88c1\u8282\u70b9\u6216\u4e24\u8005\u7ec4\u5408\u540c\u6b65\u3002\u8fd9\u662f\u7b4f\uff0cZAB\u6216Paxo\u7b49\u6d41\u884c\u534f\u8bae\u7684\u533a\u57df\u3002\n \u89e3\u51b3\u63a5\u53d7\u56fd\u5bb6\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u51fa\u73b0\u7684\u51b2\u7a81 - \u4e3b\u8981\u662f\u5728\u957f\u671f\u5ef6\u8fdf\u6216\u5468\u671f\u6027\u5730\u53d1\u751f\u7684\u6743\u8861\u6216\u5b9a\u671f\u65e0\u6cd5\u8bbf\u95ee\u7684\u670d\u52a1\u5668\u4e2d\u8fdb\u884c\u7684\u6743\u8861 - \u4f46\u662f\u4ee5\u8db3\u591f\u7684\u5143\u6570\u636e\u4e30\u5bcc\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u53ef\u4ee5\u5355\u72ec\u8fbe\u5230\u4e0e\u7ed3\u679c\u72b6\u6001\u7684\u76f8\u540c\u7ed3\u8bba\u5171\u8bc6\u3002\u8fd9\u662f\u4e00\u4e2a\u4e3b\u5bfc\u5730\u533a\u7684\u514d\u9664\u81ea\u7531\u590d\u5236\u6570\u636e\u7c7b\u578b\uff0c\u60a8\u53ef\u4ee5\u8bfb\u53d6eg\u3002\u5728\u8fd9\u91cc\u53d1\u5e03\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u3002\n \u5982\u4f55\u5c06\u8bf7\u6c42\u8def\u7531\u5230\u96c6\u7fa4\u5185\u90e8\u7684\u7ed9\u5b9a\u8d44\u6e90\uff1f\u6211\u4eec\u7684\u7cfb\u7edf\u72b6\u6001\u901a\u5e38\u7531\u591a\u79cd\u53ef\u5bfb\u5740\u5b9e\u4f53\u7ec4\u6210 - \u901a\u5e38\u590d\u5236\uff0c\u4ee5\u4fbf\u66f4\u9ad8\u7684\u53ef\u7528\u6027\u548c\u5f39\u6027\u3002\u7136\u800c\uff0c\u901a\u5e38\u6574\u4e2a\u72b6\u6001\u592a\u5927\uff0c\u65e0\u6cd5\u9002\u5408\u4efb\u4f55\u4e00\u4e2a\u8282\u70b9\u3002\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\uff0c\u5b83\u7ecf\u5e38\u52a8\u6001\u5730\u5728\u6574\u4e2a\u7fa4\u96c6\u4e2d\u5212\u5206\u3002\u73b0\u5728\u6073\u6c42\u4e00\u4e2a\u95ee\u9898\uff1a\u5982\u4f55\u544a\u8bc9\uff0c\u54ea\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e9b\u865a\u62df\u952e\u6807\u8bc6\u7684\u5b9e\u4f53\uff1f\u5929\u771f\u7684\u65b9\u6cd5\u662f\u8be2\u95ee\u4e00\u4e9b\u8282\u70b9\u7684\u5b50\u96c6\u5e0c\u671b\uff0c\u5176\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u5c06\u6709\u6211\u4eec\u5e0c\u671b\u7684\u6570\u636e\u3002\u7ed9\u5b9a\u7fa4\u96c6\u7684N\u4e2a\u8282\u70b9\u548c\u5b9e\u4f53\u590d\u5236\u4e86R\u6b21\uff0c\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u8c03\u7528\uff08n / r\uff09+1\u8282\u70b9\u540e\u5230\u8fbe\u6211\u4eec\u7684\u8d44\u6e90\u3002\n \u66f4\u5e38\u89c1\u7684\u65b9\u5f0f\u662f\u4fdd\u7559\u6ce8\u518c\u8868\uff0c\u8be5\u6ce8\u518c\u8868\u5177\u6709\u6709\u5173\u7cfb\u7edf\u4e2d\u6bcf\u4e2a\u5355\u4e2a\u5b9e\u4f53\u7684\u5f53\u524d\u672c\u5730\u5316\u7684\u4fe1\u606f\u3002\u7531\u4e8e\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u5c55\u793a\uff0c\u5728\u5b9e\u8df5\u4e2d\uff0c\u6211\u4eec\u5728\u5b9e\u8df5\u4e2d\uff0c\u5728\u5206\u533a\u4e2d\u7ec4\u5408\u5e76\u5c06\u5b9e\u4f53\u5171\u540c\u5b9a\u4f4d\u5728\u4e00\u8d77\uff0c\u56e0\u6b64\u538b\u7f29\u4e86\u6ce8\u518c\u8868\u4ee5\u5b58\u50a8\u6709\u5173\u6574\u4e2a\u5206\u533a\u7684\u4fe1\u606f\u800c\u4e0d\u662f\u5355\u4e2a\u5b9e\u4f53\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8d44\u6e90ID\u662f\uff08PartitionD\uff0cEntityID\uff09\u7684\u590d\u5408\u952e\u3002\u8fd9\u662f\u5982\u4f55\u3002 akka.cluster.arding\u6216Riak\u6838\u5fc3\u4f5c\u54c1\u3002\u901a\u5e38\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7f13\u5b58\u4e00\u4e9b\u70ed\uff08\u5e38\u7528\uff09\u5206\u533a\u7684\u4e00\u4e9b\u5b50\u96c6\uff0c\u4ee5\u4fbf\u51cf\u5c11\u8be2\u95ee\u4e2d\u592e\u6ce8\u518c\u8868\u751a\u81f3\u6ce8\u518c\u8868\u672c\u8eab\u53ef\u4ee5\u662f\u590d\u5236\u7684\u5546\u5e97\u3002\n \u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5206\u5e03\u5f0f\u54c8\u5e0c\u8868 - \u6563\u5217\u6211\u4eec\u7684\u5b9e\u4f53\u5bc6\u94a5\uff0c\u7136\u540e\u6620\u5c04\u5230\u7279\u5b9a\u8282\u70b9\uff0c\u8be5\u8282\u70b9\u8d1f\u8d23\u5c06\u5c5e\u4e8e\u5173\u952e\u7a7a\u95f4\u7684\u7279\u5b9a\u7a7a\u95f4\u5b50\u96c6\u7684\u8d44\u6e90\uff08\u6240\u6709\u53ef\u80fd\u7684\u54c8\u5e0c\u503c\u7684\u8303\u56f4\uff09\u3002\u6709\u65f6\u8fd9\u53ef\u80fd\u610f\u5473\u7740\uff0c\u9996\u5148\u5c1d\u8bd5\u6211\u4eec\u9519\u8fc7\u8282\u70b9\u3002\u56e0\u4e3a\u7fa4\u96c6\u72b6\u6001\u6b63\u5728\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u6b64\u9700\u8981\u5e94\u7528\u66f4\u591a\u8df3\u8dc3\u3002 Microsoft Orleans\u548cCassandra\u4f7f\u7528\u8be5\u65b9\u6cd5\u662f\u6d41\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002\n \u6b63\u5982\u4f60\u6240\u770b\u5230\u7684\uff0c\u5373\u4f7f\u6211\u4eec\u6ca1\u6709\u95ee\u8fc7\u6240\u6709\u7684\u95ee\u9898\uff0c\u90a3\u91cc\u6709\u5f88\u591a\u4e8b\u60c5\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u6211\u4eec\u7684\u7cfb\u7edf\u613f\u610f\u91c7\u53d6\u7684\u6743\u8861\u6765\u89e3\u51b3\u4e0d\u540c\u7684\u65b9\u6cd5\u3002 \n\u5728\u90a3\u91cc\uff06\uff0339;\u4eca\u5929\u7684\u673a\u4f1a\u5728\u672a\u6765\u505a\u51fa\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u7ae0\uff0c\u4eca\u5929\u6211\u4eec\uff06\uff0339; ll\u5b8c\u5168\u4e13\u6ce8\u4e8e\u6e38\u6cf3 - \u5728\u9886\u4e8b\u548c\u6301\u7eed\u51e0\u5e74\u4e2d\u7684\u7cfb\u7edf\u4e2d\u7684\u7cfb\u7edf\u4e2d\u4f7f\u7528 - \u5982\u5b83\uff06\uff0339 ;\u5f88\u5bb9\u6613\u5b9e\u73b0\u826f\u597d\u7684\u5f00\u59cb\u3002\u4e3a\u4e86\u63d0\u9ad8\u5176\u5f39\u6027\uff0c\u51cf\u5c11\u5047\u9633\u6027\u6545\u969c\u68c0\u6d4b\uff0c\u7ed3\u8d26\u5173\u4e8e\u6551\u751f\u5458\u7684\u8c08\u5224 - \u4e00\u7cfb\u5217\u5173\u4e8e\u539f\u59cb\u6e38\u6cf3\u534f\u8bae\u7684\u6269\u5c55\u548c\u89c2\u5bdf\u3002\n   \u65b0\u8282\u70b9\u60f3\u8981\u52a0\u5165\u7fa4\u96c6 - \u5982\u4f55\u4f7f\u5176\u53d1\u751f\uff0c\u4ee5\u53ca\u5982\u4f55\u5728\u7fa4\u96c6\u4e2d\u901a\u77e5\u5173\u4e8e\u8be5\u4e8b\u4ef6\u7684\u5176\u4ed6\u8282\u70b9\uff1f\n  \u8282\u70b9\u7a81\u7136\u7ec8\u6b62\u6216\u8005\u65e0\u6cd5\u8fbe\u5230\u4efb\u4f55\u66f4\u957f\u3002\u5982\u4f55\u68c0\u6d4b\u5230\u5176\u4ed6\u4e8b\u5b9e\u7684\u4fe1\u606f\uff1f\n \u867d\u7136\u524d\u4e24\u79cd\u60c5\u51b5\u5f88\u5bb9\u6613\uff0c\u4f46\u6240\u6709\u7684\u590d\u6742\u6027\u90fd\u5e26\u6709\u7b2c\u4e09\u79cd\u60c5\u51b5\u3002\u6211\u4eec\u9700\u8981\u53d1\u73b0\u8282\u70b9\u662f\u5426\u65e0\u6cd5\u8fbe\u5230\uff0c\u4f46\u662f\uff06\uff0339; s\u8fd8\u4e0d\u591f - \u7531\u4e8e\u4e34\u65f6\u7f51\u7edc\u6545\u969c\u53ef\u80fd\u53d1\u751f\u5728\u540c\u4e00\u6570\u636e\u4e2d\u5fc3\u5185\uff0c\u4ed6\u4eec\u901a\u5e38\u4f1a\u8fc5\u901f\u6108\u5408\u3002\u6211\u4eec\u4e0d\u60f3\u6050\u614c\u5e76\u5c06\u8282\u70b9\u6254\u51fa\u7fa4\u96c6\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u5206\u5f00\u7b2c\u4e8c\u4e2a\u4e2d\u8fbe\u5230\u5b83\u3002\u8fd9\u5c06\u5bfc\u81f4\u975e\u5e38\u6447\u6447\u6b32\u5760\u548c\u8106\u5f31\u7684\u96c6\u7fa4\u3002\n \u6211\u4eec\u5df2\u7ecf\u63d0\u5230\u4e86\u5fc3\u8df3\u673a\u5236 - \u6bcf\u4e00\u4e2a\u73b0\u5728\uff0c\u7136\u540e\u6211\u4eec\u5c06ping\u6d88\u606f\u53d1\u9001\u5230\u5176\u4ed6\u968f\u673a\u8282\u70b9\u3002\u9884\u8ba1\u6b64\u8282\u70b9\u5c06\u5728\u9884\u671f\u8d85\u65f6\u4e4b\u524d\u7528ACK\u56de\u7b54\u3002\u7b80\u5355\u7684\u3002\n  \u73b0\u5728\uff0c\u5982\u679c\u8282\u70b9\u6ca1\u6709\u5728\u8d85\u65f6\u56de\u5e94\u7684\u60c5\u51b5\u4e0b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u6b63\u5982\u6211\u4eec\u6240\u8bf4\uff0c\u6211\u4eec\u4e0d\u60f3\u8fc7\u5ea6\u53cd\u5e94\u3002\u6240\u4ee5\u6211\u4eec\u4e0d\u8981\u8003\u8651\u8fd9\u4e2a\u8282\u70b9\u5df2\u7ecf\u6b7b\u4e86\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u8ba4\u4e3a\u5b83\u662f\u6000\u7591\u5e76\u544a\u77e5\u522b\u4eba\u6211\u4eec\u7684\u6000\u7591\u3002\u63a5\u6536\u5acc\u7591\u516b\u5366\u7684\u5176\u4ed6\u8282\u70b9\u9884\u8ba1\u5b83\u5c06\u5728\u6307\u5b9a\u7684\u8d85\u65f6\u4e2d\u786e\u8ba4 - \u5426\u5219\u4ed6\u4eec\u5c06\u8003\u8651\u4e00\u4e2a\u6076\u4f5c\u5267\uff0c\u5e76\u4ece\u5176\u7591\u4f3c\u5217\u8868\u4e2d\u5220\u9664\u8282\u70b9\u3002\n  \u73b0\u5728\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u786e\u8ba4 - \u4e3a\u4e86\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u9700\u8981\u5411\u522b\u4eba\u8be2\u95ee\u522b\u4eba\u8fdb\u884c\u9a8c\u8bc1\u3002\u6240\u4ee5\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u53e6\u4e00\u4e2a\u672a\u7ecf\u7528\u7684\u8282\u70b9\uff0c\u5e76\u8981\u6c42\u5b83\u4e3a\u6211\u4eec\u7684ping\u5acc\u7591\u4eba\uff08\u6b64\u8bf7\u6c42\u88ab\u79f0\u4e3aping-req\uff09\u3002\u73b0\u5728\uff0c\u5982\u679c\u8be5\u8c03\u89e3\u5458\u4ece\u5acc\u7591\u4eba\u90a3\u91cc\u6536\u5230ACK\uff0c\u6211\u4eec\u77e5\u9053\u8282\u70b9\u662f\u6d3b\u7740\u7684\uff0c\u53ea\u662f\u6211\u4eec\u7684\u7f51\u7edc\u8fde\u63a5\u88ab\u5207\u65ad\u4e86\u539f\u56e0\uff1a \n\u5728\u53e6\u4e00\u8fb9\uff0c\u5982\u679c\u6211\u4eec\u7684\u8c03\u89e3\u5458\u4e5f\u6ca1\u6709\u6536\u5230Ack\uff0c\u6211\u4eec\u73b0\u5728\u6709\u4e24\u53ea\u624b\u9a8c\u8bc1\uff0c\u8282\u70b9\u5bf9\u5927\u91cf\u65f6\u95f4\u6846\u67b6\u65e0\u54cd\u5e94 - \u56e0\u6b64\u5b83\u53ef\u4ee5\u786e\u8ba4\u4e3a\u6bcf\u4e2a\u4eba\u6b7b\u4ea1\u3002\n  \u5f53\u7136\u8fd9\u4e00\u70b9\u5e76\u4e0d\u610f\u5473\u7740\u8282\u70b9\u786e\u5b9e\u6b7b\u4e86 - \u4e00\u4e2a\u8f6c\u4e49\u673a\u5236\u662f\uff0c\u5982\u679c\u6000\u7591\u5c06\u83b7\u5f97\u5173\u4e8e\u81ea\u5df1\u7684\u53ef\u7591\u901a\u77e5\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5e7f\u64ad\u6d3b\u52a8\u6765\u8986\u76d6\u5b83\u3002\u53ef\u80fd\u6709\u4e0d\u540c\u7684\u539f\u56e0\uff0c\u4e3a\u4ec0\u4e48\u6000\u7591\uff06\uff0339; t\u6309\u65f6\u56de\u5e94\uff1a\u5b83\u53ef\u80fd\u592a\u5360\u7528\uff08\u7531\u5176\u4ed6\u8bf7\u6c42\u7684\u79ef\u538b\u6216ev\u3002\u505c\u6b62 - \u4e16\u754c\u5783\u573e\u6536\u96c6\u7684\u5e95\u5c42VM\uff09\u3002\u4e5f\u53ef\u80fd\u53d1\u751f\uff0c\u6211\u4eec\u7684\u7f51\u7edc\u5206\u5f00\u4e86\u5206\u5f00\u7684\u96c6\u7fa4 - \u8fd9\u79cd\u73b0\u8c61\u88ab\u79f0\u4e3a\u5206\u88c2\u6027\u3002\n \u6700\u7ec8\u6ca1\u6709\u529e\u6cd5\u4fdd\u8bc1100\uff05\u53ef\u9760\u7684\u6545\u969c\u68c0\u6d4b\u3002\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u4ea4\u6613\u5408\u7406\u7684\u9519\u8bef\u5931\u8d25\u6bd4\uff0c\u6211\u4eec\u5982\u4f55\u8fc5\u901f\u5730\u68c0\u6d4b\u5230\u8282\u70b9\u4f5c\u4e3a\u6b7b\u4ea1 - \u901a\u5e38\u8fd9\u4e24\u4e2a\u76ee\u6807\u76f8\u4e92\u4e92\u76f8\u52aa\u529b\u3002\u5728\u6e38\u6cf3\u65b9\u9762\uff0c\u6211\u518d\u6b21\u5efa\u8bae\u67e5\u627e\u6551\u751f\u5458\uff0c\u8be5\u6551\u751f\u5458\u5730\u89e3\u51b3\u4e86\u4e00\u4e9b\u63d0\u5230\u7684\u65b9\u6848\u3002\u7136\u800c\uff0c\u6211\u4eec\uff06\uff0339; LL\u5728\u4e0b\u9762\u7684\u5b9e\u65bd\u4e2d\u6ca1\u6709\u6db5\u76d6\u5b83\uff0c\u4ee5\u4fdd\u6301\u7b80\u6d01\u3002\n  \u73b0\u5728\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5b9e\u9645\u5b9e\u65bd\u8be5\u534f\u8bae\u3002\u4e3a\u4e86\u8fd9\u6837\u505a\uff06\uff0339;\u91cd\u65b0\u5e94\u7528\u4e00\u4e9b\u7b80\u5316 - \u6211\u4eec\uff06\uff0339; ll\u8fd9\u6837\u505a\uff0c\u4f7f\u534f\u8bae\u66f4\u5bb9\u6613\u7406\u89e3\uff1a\n \u4e00\u822c\u6765\u8bf4\u8981\u5173\u8054\u7279\u5b9a\u8bf7\u6c42/\u54cd\u5e94\u6d88\u606f\uff0c\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u67d0\u79cd\u5f62\u5f0f\u7684\u5e8f\u5217\u53f7\u3002\u8fd9\u53ef\u80fd\u5bfc\u81f4\u573a\u666f\uff0c\u5f53A\u5411B\u53d1\u9001Ping1\u8bf7\u6c42\u65f6\uff0c\u5176\u4e0eAck1\u54cd\u5e94\uff0c\u4e00\u6bb5\u65f6\u95f4\u540e\u8005\u5c06\u53e6\u4e00\u4e2aPing2\u53d1\u9001\u5230B\u5e76\u63a5\u6536Ack1\u56de\u6765 - \u95ee\u9898\u662f\u5b83\u4e0d\u80fd\u544a\u8bc9\u8be5\u6d88\u606f\u7684\u95ee\u9898\u662f\u4e3a\u4e86\u786e\u8ba4\u8fd9\u6761\u6d88\u606f\u3002\u8fd9\u79cd\u60c5\u51b5\u975e\u5e38\u7f55\u89c1\uff0c\u4f46\u4e0d\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u5982\u679c\u4e5f\u53ef\u80fd\u5bfc\u81f4\uff06\uff0334;\u590d\u6d3b\u548c\uff0334;\u6b7b\u4ea1\u8282\u70b9\u3002\n \u867d\u7136\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8fdb\u5165\u80a9\u80cc\u4e0a\u7684\u80a9\u5e26 - \u50cf\u7eb8\u5f20\u6697\u793a - \u6211\u4eec\u6bcf\u6b21\u90fd\u53ea\u662f\u516b\u5366\u6574\u4e2a\u4f1a\u5458\u56fd\u3002\u5b83\u4e0d\u662f\u6700\u4f18\u8d8a\u7684\u65b9\u5f0f\uff0c\u4f46\u5b83\uff06\uff0339; ll\u5de5\u4f5c\u8db3\u591f\u597d\u3002\n PS\uff1a\u907f\u514d\u4f7f\u7528\u6bcf\u4e2a\u516b\u5366\u53d1\u9001\u6574\u4e2a\u72b6\u6001\u7684\u5176\u4ed6\u65b9\u5f0f\u662f\u8ba1\u7b97\u5f53\u524d\u8282\u70b9\u6210\u5458\u8eab\u4efd\u89c6\u56fe\u7684\u4e00\u81f4\u54c8\u5e0c\uff0c\u5e76\u5c06\u8be5\u6563\u5217\u653e\u5728ping\u5185\u800c\u4e0d\u662f\u5b8c\u6574\u89c6\u56fe\u3002\u8fd9\u6837\u6211\u4eec\u7684ping\u5c31\u4f1a\u643a\u5e26\u54c8\u5e0c\u503c\uff0c\u8fd9\u662f\u54cd\u5e94\u8005\u53ef\u4ee5\u4e0e\u81ea\u5df1\u72b6\u6001\u7684\u54c8\u5e0c\u76f8\u6bd4\u3002\u53ea\u6709\u5f53\u54c8\u5e0c\u4e0d\u540c\uff08\u5927\u591a\u6570\u65f6\u95f4\u90fd\u6709\u5927\u90e8\u5206\u65f6\u95f4\u7684\u96c6\u7fa4\uff0c\u4ed6\u4eec\u5728\u4ed6\u4eec\u4e0d\u65f6\u7684\u65f6\u95f4\u548c\uff0339; t\uff09\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c06\u4f1a\u5458\u72b6\u6001\u653e\u5728Ack\u4e4b\u4e0a\u3002 \n\u6b64\u5904\u4f7f\u7528\u7684\u4ee3\u7801\u53ef\u5728\u672c\u53d1\u660e\u5458\u4e2d\u63d0\u4f9b\uff0c\u6211\u5efa\u8bae\u4f7f\u7528\uff0c\u5982\u6211\u4eec\uff06\uff0339; LL\u5728\u8fd9\u91cc\u4e0d\u6db5\u76d6\u6240\u6709\u5185\u5bb9\u3002\n  \u7531\u4e8e\u6211\u4eec\u4e0d\u60f3\u5904\u7406\u8282\u70b9\u5230\u8282\u70b9\u901a\u4fe1\u7684\u6240\u6709\u590d\u6742\u6027\uff0c\u6211\u4eec\uff06\uff0339; LL\u53ea\u662f\u5728\u62bd\u8c61\u4e4b\u4e0a\u6784\u5efa\u4e00\u4e2a\u6a21\u578b\uff0c\u8fd9\u5c06\u8ba9\u6211\u4eec\u8bc4\u4f30\u7b97\u6cd5\uff0c\u800c\u4e0d\u4f1a\u5bfc\u81f4\u89e3\u51b3\u5176\u4ed6\u95ee\u9898\u3002\u4ee5\u4e0b\u57fa\u672c\u5148\u51b3\u6761\u4ef6\u662f\uff1a\n \u4e00\u4e2a\u4f20\u8f93\u5c42\uff0c\u8ba9\u6211\u4eec\u5411\u53e6\u4e00\u4e2a\uff08\u53ef\u80fd\u8fdc\u7a0b\uff09\u7aef\u70b9\u53d1\u9001\u6d88\u606f\u3002\u6211\u4eec\u5e0c\u671b\u5904\u7406\u7ba1\u7406\u7f51\u7edc\u8fde\u63a5\u6216\u5e8f\u5217\u5316\u8be6\u7ec6\u4fe1\u606f\u3002\n \u53ef\u8bbf\u95ee\u7aef\u70b9\u540e\u9762\u7684\u4ee3\u7406\uff0c\u80fd\u591f\u4e3a\u591a\u4e2a\u8bf7\u6c42\u63d0\u4f9b\u670d\u52a1\u5e76\u4ee5\u7ebf\u7a0b\u5b89\u5168\u65b9\u5f0f\u66f4\u6539\u5176\u72b6\u6001\u3002\n \u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u6211\u5c06\u4f7f\u7528Akka.net/Kkling\u548c\u6a21\u62df\u6211\u4eec\u7684\u8282\u70b9\u4f7f\u7528\u751f\u6d3b\u5728\u540c\u4e00\u8fc7\u7a0b\u4e2d\u7684\u6f14\u5458\u3002\u60a8\u53ef\u4ee5\u8f7b\u677e\u5730\u91c7\u7528\u5b83\u4ee5\u901a\u8fc7Akka.Remote\u8fde\u63a5\u7684\u4e0d\u540c\u6f14\u5458\u7cfb\u7edf\u3002\u6211\u4eec\u5c06\u6b64\u4f5c\u4e3a\u57f9\u8bad\u7ec3\u4e60 - \u5728\u5b9e\u8df5\u4e2d\uff0c\u5982\u679c\u60a8\u60f3\u5728Akka\u4e2d\u4f7f\u7528\u7fa4\u96c6\uff0c\u60a8\u5df2\u7ecf\u5728Akka.Cluster\u9876\u90e8\u5efa\u7acb\u4e86\u6574\u4e2a\u751f\u6001\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u751f\u6001\u7cfb\u7edf\u90fd\u5728\u5904\u7406\u4f1a\u5458\u8d44\u683c - \u4ee5\u53ca\u5f15\u8a00\u4e2d\u63d0\u5230\u7684\u5176\u4ed6\u95ee\u9898 - \u9002\u5408\u60a8\u3002\n \u6211\u4eec\u7684\u6f14\u5458\u5c06\u901a\u8fc7\u63d0\u4f9b\u5b83\u7684\u521d\u59cb\u8054\u7cfb\u70b9\u5217\u8868\u6765\u521b\u5efa\uff1a\u8fd9\u4e9b\u662f\u5df2\u77e5\u4e3a\u7fa4\u96c6\u7684\u4e00\u90e8\u5206\u7684\u7aef\u70b9\uff1a\n \u6253\u5f00akklinguse sys = system.create\uff06\uff0334;\u6e38\u6cf3\u7fa4\u548c\uff0334; \uff06lt; | configuration.parse config //\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u5176\u4ed6//`b`\u662f\u751f\u6d3b\u5728\u5176\u4ed6\u8282\u70b9\u4e0a\u7684\u5176\u4ed6//\u6e38\u6cf3\u96c6\u7fa4\u6210\u5458\u7684\u6f14\u5458\u200b\u200brefs\u3002\u8ba9C =\u4ea7\u5375\u7cfb\u7edf\uff06\uff0334;\u8282\u70b9B\uff06\uff0334; \uff06lt; |\u9053\u5177\uff08\u6e38\u6cf3.Membership [A; B]\uff09 \n\u4e3a\u4e86\u521b\u5efa\u8be5\u6f14\u5458\uff0c\u6211\u4eec\u9700\u8981\u5904\u7406\u52a0\u5165\u8fc7\u7a0b\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\u6211\u4eec\uff06\uff0339; ll\u5c1d\u8bd5\u4ece\u63d0\u4f9b\u7684\u5217\u8868\u4e2d\u6311\u9009\u7aef\u70b9\uff08\u5b83\u5bf9\u5e94\u4e8eAkka.Cluster\u4e2d\u7684\u79cd\u5b50\u8282\u70b9\u5730\u5740\uff09\u5e76\u5411\u5b83\u4eec\u53d1\u9001\u52a0\u5165\u8bf7\u6c42\u3002\u5982\u679c\u7fa4\u96c6\u8282\u70b9\u6f14\u5458\u5c06\u63a5\u6536\u8fd9\u6837\u7684\u8bf7\u6c42\uff0c\u5219\uff06\uff0339; s\u4e49\u52a1\u901a\u8fc7\u5411\u6240\u6709\u7fa4\u96c6\u6210\u5458\u53d1\u9001\u52a0\u5165\u54cd\u5e94\uff08\u5305\u62ec\u8bf7\u6c42\u8005\uff09\u6765\u63a5\u53d7\u5b83\u3002\n \u5982\u679c\u52a0\u5165WORN\u548c\uff0339; T\u5230\u8fbe\uff0c\u4f8b\u5982\u3002\u56e0\u4e3a\u6211\u4eec\u9519\u8bef\u5730\u914d\u7f6e\u4e86\u6211\u4eec\u7684\u7fa4\u96c6\u548c\u5176\u4ed6\u7aef\u70b9\uff0c\u6240\u4ee5\u8fbe\u5230\u4e86\uff06\uff0339; t and\uff0339;\u6211\u4eec\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u5e76\u4ece\u5217\u8868\u4e2d\u5c1d\u8bd5\u53e6\u4e00\u4e2a\u8282\u70b9\u3002\u8fd9\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a\n \u8ba9\u6210\u5458\u8eab\u4efd\uff08\u79cd\u5b50\uff1a\u7aef\u70b9\u5217\u8868\uff09\uff08CTX\uff1aActor\uff06lt; _\uff06gt;\uff09=\u8bbe\u6001= {mylising = {endpoint = ctx.self} Active = set.empty\u5acc\u7591\u4eba= map.empty}\uff08* actor\u4ee3\u7801\u7684\u5176\u4f59\u90e8\u5206.. \u3002*\uff09\u8ba9REC\u52a0\u5165\u5dde\u53d6\u6d88=\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e|\u804c\u5de5[]  - \uff06gt;\u8fd4\u56de\u505c\u6b62//\u672a\u80fd\u52a0\u5165\u4efb\u4f55\u4f1a\u5458|\u804c\u5de5\uff08\u4e0b\u4e00\u4e2a::\u5269\u4e0b\uff09 - \uff06gt;\u4e0b\u4e00\u4e2a\uff06lt;\u52a0\u5165State.Myself\u8ba9Call\u53d6\u6d88= CTX.schedule Connectimeout CTX.Self\uff08\u5269\u4f59\u5269\u4f59\uff09\u8fd4\u56de\uff01\u52a0\u5165\u5dde\u53d6\u6d88|\u52a0\u5165\u516b\u5366 - \uff06gt; CANCEL.CANCEL\uff08\uff09//\u53d6\u6d88\u52a0\u5165\u8d85\u65f6\u8fd4\u56de\uff01\u6210\u4e3a\u5dde\u516b\u5366|\u5f53peer = statem.myself  - \uff06gt; //\u5efa\u7acb\u65b0\u7fa4\u96c6\u53d6\u6d88.Cancel\uff08\uff09//\u53d6\u6d88\u52a0\u5165\u8d85\u65f6\u8fd4\u56de\uff01\u6210\u4e3a\u5dde\uff08set.singleton state.myself\uff09| _  - \uff06gt;\u8fd4\u56de\u672a\u5904\u7406\u7684}\u5339\u914d\u79cd\u5b50| []  - \uff06gt;\u6210\u4e3a\u5dde\uff08set.singleton state.myself\uff09|\u79cd\u5b50::\u5269\u4e0b - \uff06gt;\u79cd\u5b50\uff06lt;\u52a0\u5165State.Myself\u8ba9Call = CTX.Schedule Connectimeout CTX.Self\uff08\u5269\u4f59\u5269\u4f59\uff09\u52a0\u5165\u5dde\u53d6\u6d88\n \u63a5\u6536\u5230\u52a0\u5165\u7684\u8bf7\u6c42Actor\u5c06\u81ea\u5df1\u89c6\u4e3a\u7fa4\u96c6\u7684\u64cd\u4f5c\u6210\u5458\uff0c\u51c6\u5907\u5de5\u4f5c\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u5b83\u5c06\u89e6\u53d1\u81ea\u8eab\uff0c\u4ee5\u5b9a\u671f\u68c0\u67e5\u5176\u4ed6\u4eba\u662f\u5426\u4fdd\u6301\u54cd\u5e94\uff1a\n \u8ba9\u5408\u5e76\u516b\u5366\u72b6\u6001= {youst active = state.active + gossip}\u8ba9berseready\u72b6\u6001gossip = ctx.schedule pinginterval ctx.self nextround |\uff06gt;\u5ffd\u7565\u5c31\u7eea\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09\n \u5982\u524d\u6240\u8ff0\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u516b\u5366\u53ea\u662f\u4e00\u6574\u5957\u6d3b\u52a8\u96c6\u7fa4\u6210\u5458\uff0c\u800c\u51c6\u5907\u597d\u662f\u7528\u4e8e\u6807\u51c6\u7fa4\u96c6\u6d3b\u52a8\u7684\u6f14\u5458\u884c\u4e3a\uff1a\n \u8ba9Recrade State =\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4f7f\u7528//\u5176\u4ed6\u6d88\u606f\u5904\u7406\u7a0b\u5e8f| _  - \uff06gt;\u8fd4\u56de\u672a\u5904\u7406} \n\u7531\u4e8e\u6211\u4eec\u4ece\u8bf7\u6c42\u8005\u65b9\u9762\u8986\u76d6\u4e86\u52a0\u5165\u7a0b\u5e8f\uff0c\u56e0\u6b64\u4e3a\u64cd\u4f5c\u96c6\u7fa4\u6210\u5458\u63d0\u4f9b\u4e86\uff1a\n \u6bd4\u8d5b\uff01 ctx.receive |.\u52a0\u5165peer  - \uff06gt;\u8ba9Gossip = Set.Add Peer\u72b6\u6001\u3002Active Let Msg =\u52a0\u5165\u516b\u5366\u516b\u5366|\uff06gt; set.remove state.myself |\uff06gt; set.iter\uff08\u6709\u8da3\u7684peer  - \uff06gt; peer.endpoint\uff06lt; msg\uff09\u8fd4\u56de\uff01\u51c6\u5907\u5c31\u7eea{\u72b6\u6001\u4e0eactive = gossip} |\u52a0\u5165\u516b\u5366 - \uff06gt;\u8fd4\u56de\uff01\u51c6\u5907\u597d\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09//\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\n \u6b63\u5982\u6211\u4eec\u6240\u8bf4\uff0c\u4e00\u65e6\u65b0\u6210\u5458\u8bd5\u56fe\u52a0\u5165\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u6211\u4eec\u7684\u6d3b\u52a8\u6210\u5458\u72b6\u6001\u66f4\u65b0\u5e76\u5c06\u5176\u6c47\u62a5\u5230\u52a0\u5165\u6d88\u606f\u4e2d\u7684\u6240\u6709\u5176\u4ed6\u6210\u5458\uff0c\u56e0\u6b64\u5b83\u4eec\u4e5f\u53ef\u4ee5\u66f4\u65b0\u3002\n \u73b0\u5728\uff0c\u8ba9\uff06\uff0339; s\u8986\u76d6ping\u8fc7\u7a0b\u3002\u9996\u5148\uff0c\u6211\u4eec\u63d0\u5230\u6211\u4eec\u73b0\u5728\u60f3\u8981\u89e6\u53d1\u6211\u4eec\u7684\u4f1a\u5458\uff0c\u7136\u540e - \u5f53\u6211\u4eec\u8ba1\u5212\u6210\u6bd4\u8d5b\u4e2d\u7684Nextround\u4e8b\u4ef6\u65f6\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u3002\u73b0\u5728\u5b83\u5982\u4f55\u5de5\u4f5c\uff1f\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u968f\u673a - \u9664\u4e86\u5f53\u524d\u7684\u4e00\u4e2a\u6ca1\u6709\u7591\u4f3c\uff08\u5acc\u7591\u4eba\u662f\uff06\uff0339; t\u6309\u65f6\u56de\u590dping\u7684\u8282\u70b9\uff09 - \u5e76\u5411\u5b83\u53d1\u9001ping\u8bf7\u6c42\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u8fd8\u5b89\u6392\u4e86\u8be5\u8bf7\u6c42\u5b8c\u6210\u7684\u8d85\u65f6\uff1a\n \u8ba9\u9009\u62e9\u540c\u884c=\u5339\u914dset.count\u5bf9\u7b49\u4f530  - \uff06gt;\u6ca1\u6709|\u6570 - \uff06gt;\u8ba9idx = threadlocalrandom.current.next\u8ba1\u6570\u4e00\u4e9b\uff08SEQ.ITEM IDX\u5bf9\u7b49\u4f53\uff09\u8ba9\u5c31\u7eea\u72b6\u6001= ACTOR {\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e| nextround  - \uff06gt; ctx.schedule pinginterval ctx.self nextround |\uff06gt;\u5ffd\u7565\u8ba9\u5acc\u7591\u4eba= state.suspects |\uff06gt; Map.Toseq |\uff06Gt; seq.map fst |\uff06gt; set.ofseq\u8ba9\u522b\u4eba=\uff08set.remove state.myself state.active\uff09 - \u5acc\u7591\u4eba//\u968f\u610f\u9009\u62e9\u4e00\u4e2a\u6210\u5458\uff0c\u9664\u4e86\u81ea\u6211\u800c\u4e0d\u662f\u6807\u8bb0\u4e3a\u6000\u7591\u5339\u914d\u9009\u62e9\u6ca1\u6709 - \uff06gt;\u8fd4\u56de\uff01\u5c31\u7eea\u72b6\u6001|\u4e00\u4e9b\u540c\u4f34 - \uff06gt; //\u5c06ping\u8bf7\u6c42\u53d1\u9001\u5230\u8be5\u5bf9\u7b49\u4f53\u548c\u8c03\u5ea6\u8d85\u65f6peer.endpoint\uff06lt; ping\uff08state.active\uff0cctx.self\uff09\u8ba9\u53d6\u6d88= ctx.schedule pingtimeout ctx.self\uff08pingtimeout peer\uff09\u8ba9skiplist = set.ofArray [|\u5dde\u3002\u540c\u4f34|]\u56de\u6765\uff01\u51c6\u5907{state with suspects = map.add peer\uff08\u53d6\u6d88\uff0cwaitpingack skiplist\uff09state.suspects} | ping\uff08\u516b\u5366\uff0c\u53d1\u4ef6\u4eba\uff09 - \uff06gt; //\u56de\u590d\u4f20\u5165ping ricking sender\uff06lt ;! Pingack\uff08\u5dde.MYSELF\uff0cState.active\uff09\u8fd4\u56de\uff01\u51c6\u5907\u597d\uff08\u5408\u5e76\u516b\u5366\u72b6\u6001\uff09//\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f}\n \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u6211\u4eec\u7684\u5acc\u7591\u4eba\u6620\u5c04\u6765\u8ddf\u8e2a\u8d85\u65f6\u53d6\u6d88\u548c\u8df3\u8fc7\u5217\u8868\u3002\u4ec0\u4e48\uff06\uff0339;\u8df3\u8fc7\u5217\u8868\uff1f\u6211\u4eec\u5f88\u5feb\u63a9\u76d6\u4e86\u3002\u6b63\u5982\u6211\u4eec\u6240\u63d0\u5230\u7684\u90a3\u6837\uff0c\u5f53Pingack\uff06\uff0339; t\u51c6\u65f6\u5230\u8fbe\u65f6\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u53e6\u4e00\u4e2a\u6210\u5458\uff08\u968f\u610f\uff09\u5e76\u8981\u6c42\u5b83\u4f7f\u7528pingreq\u6d88\u606f\u6765\u4e3a\u6211\u4eec\u5ba1\u89c6\u6211\u4eec\u7684\u5acc\u7591\u4eba\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u8bd5\u56fe\u5728\u6211\u4eec\u7684\u6545\u969c\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u51cf\u8f7b\u5047\u5426\u5b9a\u7684\u98ce\u9669\uff1a\n \u8ba9\u51c6\u5907\u72b6\u6001=\u6f14\u5458{\u5339\u914d\uff01 ctx.receive\uff08\uff09\u4e0e| Pingreq\uff08\u5acc\u7591\u4eba\uff0c\u516b\u5366\uff0c\u53d1\u4ef6\u4eba\uff09 - \uff06gt;\u8ba9\u53d6\u6d88= ctx.schedule IndirectpingTimeout CTX.Self\uff08PingTimeout Suspect\uff09\u5acc\u7591\u6b21\u6570.EndPoint\uff06lt; ping\uff08state.active\uff0cctx.self\uff09\u9000\u8d27\uff01\u51c6\u5907{Merge Gossip\u5dde\u4e0e\u5acc\u7591\u4eba= map.add\u5acc\u7591\u4eba\uff08\u53d6\u6d88\uff0c\u7b49\u5f85\uff0c\u7b49\u5f85reqack\uff09state.suspects \n...... ", "note_en": "In this blog post we&#39;ll cover how systems form clusters, what clusters actually are and what are their responsibilities. We&#39;ll also present different protocols responsible to serve the needs of the clusters with a various tradeoffs associated with them.\n To make this blog post a bit more practical, we&#39;ll also go in depth of one of the membership protocols - known as under SWIM acronym - from theoretical standpoint up to example implementation in F#.\n  From a user perspective, cluster is supposed to serve as an illusion of a &#34;single machine&#34; and keep it  safe from all of complexity coming from communicating with - usually dynamically changing - network of interconnected servers.\n As it turns out, there&#39;s a multitude of protocols and responsibilities that services being a part of cluster need to solve to maintain that illusion. Going bottom-up, here are some of the questions our cluster usually needs to know how to answer for:\n How to join the cluster? Usually when we have a new server node, which we want to join to the cluster, it needs to know how to communicate with another node that&#39;s already part of the cluster itself. Where can it find that information? It&#39;s the question that needs to be answered: The simplest trick is to provide a static list of contact points as a configuration parameter provided at the start of new service.\n Another way is to use 3rd party service (like database,  Consul,  etcd or  ZooKeeper) to serve as a node registry. Our cluster usually doesn&#39;t live in vacuum, and sometimes we can reuse other already established services for our advantage.\n In some situations, we could leverage capabilities of lower layers - like  Kubernetes DNS service or  mDNS - that are specific to a host environment to dynamically discover other devices living in the same network.\n How do we know what other nodes are part of the cluster? This is area of so called membership protocols on which we&#39;ll focus in second part of this blog post. In dynamic clusters it&#39;s usually done by keeping track of a active discovered nodes, then updating and gossiping them once a node joins/leaves the cluster. A lot of decisions here depend on deployment scenario - services forming a cluster within the same datacenter have different characteristics from eg. meshes of mobile devices. In cases of common backend services hosted in the same datacenter, each node keeps a full information about the state of the cluster. This is how protocols like  SWIM operate.\n Other membership protocols (like  HyParView) enable to have only partial view on the cluster. This is preferable in cases when our cluster operates on much higher scale eg. thousands of nodes (usually most clustered services living in datacenters don&#39;t reach over dozens-to-hundreds of servers).\n How do we send messages from one node to another? This usually is also related to a membership protocol. Most datacenter-oriented systems can make conservative assumption that every node in the system can connect to every other node, forming (potentially) a fully connected mesh.\n In other scenarios, we need to take into account that some of the nodes may not be able to connect to others - because of the underlying network characteristics. While the most common case of that is client-server architecture, when we&#39;re talking about cluster protocols, often more advanced scenarios need to be applied (as we mentioned, &#34;server&#34; itself is not a single entity).\n How do we detect dead nodes? Also known as failure detection. The oldest known trick in that area is a simple exchange of PING \ud83e\udc58 ACK messages within expected timeout boundaries every now and then, or simply expecting every connection to send a heartbeat message within given time interval. Heartbeats are often implemented directly into transport layer (like TCP), sometimes we&#39;re able to piggyback failure detector directly on top of it. Downside of that solution is that while transport layer itself is responsive - because it&#39;s usually managed by underlying OS - our application layer could in fact be not (eg. because it hangs deadlocked indefinitely). Another thing is that temporal failure of network connection doesn&#39;t has to mean, that node won&#39;t try to restart it and continue to work.\n More often, membership protocols promote their own heartbeat algorithms. What&#39;s worth noticing here, missing heartbeat doesn&#39;t necessarily mean, that our node is dead. It could as well be overwhelmed with serving other incoming requests. Modern algorithms like  Phi accural failure dector or  Lifeguard (an extension to SWIM protocol mentioned above) take that behavior into account.\n These are the most basic questions cluster needs to know how to answer. We could call it a layer 0 of any cluster. The main part of this blog post will cover how to implement protocol addressing these issues. On top of it, there are many other higher level features, aiming to solve problems like:\n How can we detect/respond to periodic network partitions? A problem often known as  split-brain scenario. It comes from basic observation that  it&#39;s not possible to differentiate dead node from unresponsive one over network boundary. It can lead to very risky situations, like splitting our cluster in two, each one believing, it&#39;s the only one alive and causing data inconsistency or even corruption. There&#39;s no one simple cure for that, that&#39;s why some systems (like  Akka.NET split brain resolvers) offer different strategies depending on the tradeoffs, that we care for.\n How different nodes can reason and decide about the state in the cluster? This case is usually common in systems that are responsible for data management (like distributed databases). Since nodes must be able to serve incoming requests, sometimes they may possibly run into making conflicting decisions about the state of the system. Without going into too much details, two generic approaches two this problem are: Avoiding conflicts, which usually assumes that nodes must establish consensus about state of the system before committing to their decisions. It usually requires establishing (and maintaining) some leader among the nodes, synchronizing via quorum of nodes or combination of two. This is area of popular protocols such as  Raft,  ZAB or Paxos.\n Resolving conflicts which accepts the possibility of state conflict to appear - mostly as a tradeoff happening in face of long latencies or periodically unreachable servers - but enriches it with enough metadata so that all nodes individually can reach the same conclusion about the result state without need of consensus. This is a dominant area of Conflict Free Replicated Data Types, which you could read about eg. in a  blog post series published here.\n How to route requests to a given resource inside of cluster? The state of our system usually consists of multiple addressable entities - which are often replicated for higher availability and resiliency. However usually the entire state is too big to fit into any single node. For this reason it&#39;s often partitioned all over the cluster  dynamically. Now this begs a question: how to tell, which node contains an entity identified by some virtual key? Naive approach would be to ask some subset of nodes in hope that at least one of them will have a data we hope for. Given cluster of  N nodes and entity replicated  R times, we should be able to reach our resource after calling  (N/R)+1 nodes.\n More common way is to keep a registry having an information about current localization of every single entity in a system. Since this approach doesn&#39;t scale well, in practice we group and co-locate entities together within partitions and therefore compress the registry to store information about entire partition rather than individual entity. In this case resource ID is composite key of  (partitionID, entityID). This is how eg.  Akka.Cluster.Sharding or  riak core works. Frequently some subset of hot (frequently used) partitions may be cached on each node for to reduce asking central registry or even the registry itself may be a replicated store.\n We could also use  distributed hash tables - where our entity key is hashed and then mapped into specific node that is responsible for holding resources belonging to that specific subset of key space (a range of all possible hash values). Sometimes this may mean, that we miss node at first try eg. because cluster state is changing, and more hops need to apply.  Microsoft Orleans and Cassandra are popular solutions using that approach.\n As you can see, even though we didn&#39;t asked all questions, there&#39;s already a lot of things happening here and the same problems may be solved with different approaches depending on the tradeoffs our system is willing to take.\n While there&#39;s a chance to make a separate article about each of these in the future, today we&#39;ll focus solely on a  SWIM - used in systems such as Consul and hugely popularized over last few years - as it&#39;s easy to implement for a good start. To improve its resiliency and reduce false positive failure detection, checkout this talk about  Lifeguard - a set of extensions and observations about original SWIM protocol.\n   New node wants to join the cluster - how to make that happen and how to inform other nodes in the cluster about that event?\n  Node was abruptly terminated or cannot be reached any longer. How to detect that an inform others about the fact?\n While first two cases are pretty easy, all of the complexity comes with the third case. We need to discover if node cannot be reached, but that&#39;s not enough - since temporary network failures may happen even inside the same datacenter, they usually get healed fairly fast. We don&#39;t want to panic and throw the node out of the cluster just because we couldn&#39;t reach it in split second. This would lead to very shaky and fragile cluster.\n We&#39;ve already mentioned heartbeat mechanism - every now and then we&#39;re going to send a PING message to other random node. This node is expected to answer with ACK before expected timeout. Easy.\n  Now, what happens if node didn&#39;t respond under timeout? As we said, we don&#39;t want to overreact. So we don&#39;t consider this node dead yet. Instead we consider it to be  suspect and inform others about our suspicion. Other nodes that received suspect gossip expect it to be confirmed within specified timeout - otherwise they will consider it a hoax, and remove node from their suspected list.\n  Now all we need is confirmation - in order to do so, we need to ask someone else for verification. So we&#39;re going pick another unsuspected node and ask it to ping  suspect for us (this request is known as PING-REQ). Now if that mediator managed to receive ACK from the  suspect, we know that node is alive, just our network connection was severed for some reason:\n  On the other side, if our mediator didn&#39;t received ACK either, we now have two-hand verification that node is unresponsive for significant time frame - therefore it can be confirmed as dead to everyone.\n  Of course this doesn&#39;t mean that node is indeed dead - one escape mechanism is that if suspect will get a suspect notification about itself, it can override it by broadcasting alive message. There maybe different reasons, why  suspect didn&#39;t respond on time: it may be too occupied (either by backlog of other requests or eg. stop-the-world garbage collection of underlying VM). It may also happen, that our network have split the cluster apart - this phenomenon is known as a split-brain.\n Ultimately there&#39;s no way to ensure 100% reliable failure detection. We&#39;re just trading reasonable ratio of false failure and how quickly can we detect node as dead - usually these two goals work against each other. In terms of SWIM, I again recommend to lookup for  Lifeguard, which addresses some of the mentioned scenarios. However we&#39;ll not cover it in our implementation below to keep it succinct.\n  Now, we&#39;re going to actually implement that protocol. In order to do so we&#39;re going to apply some simplifications - we&#39;ll do so to make protocol easier to comprehend:\n In general to associate specific request/response messages, we should use some form of sequence numbers. This can result in scenario, when A sends PING1 request to B for which is responds with ACK1, some time later A sends another PING2 to B and receives ACK1 back - the problem was that it cannot tell which PING this message was acknowledgment for. This kind of situation is very rare, but not impossible. If may also lead to &#34;resurrecting&#34; dead nodes.\n While we&#39;re going to piggyback gossip on top of pings - like the paper suggests - we&#39;re simply  gossip entire membership state every time. It&#39;s not the most optimal way, but it&#39;ll work good enough.\n PS:  Other way of avoiding sending entire state with every gossip is to compute consistent hash of current node membership view and put that hash inside of ping instead of full view. This way our PING will carry just a hash value, which responder may compare with hash of its own state. Only if hashes differ (in clusters with small churn of nodes most of the time they don&#39;t), we&#39;re putting membership state on top of ACK.\n The code used here is available in  this gist, which I recommend to use, as we&#39;ll not cover everything here.\n  Since we don&#39;t want to deal with all complexities of node-to-node communication, we&#39;ll just build a model on top of abstractions, that will let us evaluate the algorithm without derailing into solving other problems. The basic prerequisites here are:\n A transport layer that will just let us send message to another (possibly remote)  endpoint. We don&#39;t want to deal with managing network connections or serialization details.\n An agent accessible behind the  endpoint, able to serve multiple requests and change its state in thread safe manner.\n For these reasons, I&#39;m going to use Akka.NET/Akkling and model our nodes using actors living in the same process. You can easily adopt it to different actor systems connected over Akka.Remote. We keep this as a training exercise - in practice if you want to use clusters in akka, you already have entire ecosystem built on top of Akka.Cluster, which handles membership - and other problems mentioned in introduction - for you.\n Our actor will be created by providing it an initial list of contact points: these are the endpoints known to be part of the cluster:\n open Akklinguse sys = System.create &#34;swim-cluster&#34; &lt;| Configuration.parse config// In this example `a` and `b` are actor refs for other // SWIM cluster members living on other nodes. let c = spawn sys &#34;node-b&#34; &lt;| props (Swim.membership [a; b])\n In order to create that actor first we need to deal with a joining process. The idea is that we&#39;ll try to pick endpoints from the provided list (it corresponds to seed node addresses in Akka.Cluster ) and send a  Join request to them. If cluster node actor will receive such request, it&#39;s obliged to accept it by sending  Joined response to ALL cluster members (including requester).\n In case when  Joined wouldn&#39;t arrive eg. because we misconfigured our cluster and other endpoint couldn&#39;t be reached, we wait for some time and try another node from the list. This could be represented as:\n let membership (seeds: Endpoint list) (ctx: Actor&lt;_&gt;) = let state = { Myself = { Endpoint = ctx.Self } Active = Set.empty Suspects = Map.empty } (* rest of the actor code... *) let rec joining state cancel = actor { match! ctx.Receive() with | JoinTimeout [] -&gt; return Stop // failed to join any members | JoinTimeout (next::remaining) -&gt; next &lt;! Join state.Myself let cancel = ctx.Schedule joinTimeout ctx.Self (JoinTimeout remaining) return! joining state cancel | Joined gossip -&gt; cancel.Cancel() // cancel join timeout return! becomeReady state gossip | Join peer when peer = state.Myself -&gt; // establish new cluster cancel.Cancel() // cancel join timeout return! becomeReady state (Set.singleton state.Myself) | _ -&gt; return Unhandled } match seeds with | [] -&gt; becomeReady state (Set.singleton state.Myself) | seed::remaining -&gt; seed &lt;! Join state.Myself let cancel = ctx.Schedule joinTimeout ctx.Self (JoinTimeout remaining) joining state cancel\n After receiving the  Joined request actor associates itself as a operating member of the cluster, ready to work. From now on it will trigger itself to periodically check if others remain responsive:\n let merge gossip state = { state with Active = state.Active + gossip }let becomeReady state gossip = ctx.Schedule pingInterval ctx.Self NextRound |&gt; ignore ready (merge gossip state)\n As mentioned before, in this case  gossip is just a full set of active cluster members, while  ready is actor behavior used for standard cluster activities:\n let rec ready state = actor { match! ctx.Receive() with // other message handlers | _ -&gt; return Unhandled}\n Since we covered joining procedure from requestor side, let&#39;s do that for operating cluster member as well:\n match! ctx.Receive with| Join peer -&gt; let gossip = Set.add peer state.Active let msg = Joined gossip gossip |&gt; Set.remove state.Myself |&gt; Set.iter (fun peer -&gt; peer.Endpoint &lt;! msg) return! ready { state with Active = gossip } | Joined gossip -&gt; return! ready (merge gossip state)// other handlers\n As we said, once new member tries to join, we simply update our active members state and gossip it to all other members in  Joined message, so they could update it as well.\n Now, let&#39;s cover pinging process. First we mentioned that we want to trigger our member every now and then - you could already see that when we scheduled  NextRound event in  becomeReady function. Now how it will work? We&#39;re going to pick one node at random - other than current one and not being suspected (suspects are nodes that didn&#39;t reply to pings on time) - and send a  Ping request to it. In the meantime we also schedule a timeout for that request to complete:\n let pick peers = match Set.count peers with | 0 -&gt; None | count -&gt; let idx = ThreadLocalRandom.Current.Next count Some (Seq.item idx peers) let ready state = actor { match! ctx.Receive() with | NextRound -&gt; ctx.Schedule pingInterval ctx.Self NextRound |&gt; ignore let suspects = state.Suspects |&gt; Map.toSeq |&gt; Seq.map fst |&gt; Set.ofSeq let others = (Set.remove state.Myself state.Active) - suspects // pick one member at random, other than self and not marked as suspected match pick others with | None -&gt; return! ready state | Some peer -&gt; // send Ping request to that peer and schedule timeout peer.Endpoint &lt;! Ping(state.Active, ctx.Self) let cancel = ctx.Schedule pingTimeout ctx.Self (PingTimeout peer) let skipList = Set.ofArray [| state.Myself; peer |] return! ready { state with Suspects = Map.add peer (cancel, WaitPingAck skipList) state.Suspects } | Ping (gossip, sender) -&gt; // reply to incoming ping right away sender &lt;! PingAck(state.Myself, state.Active) return! ready (merge gossip state) // other handlers}\n Here we&#39;re using our suspects map to keep track of timeout cancellation and skip list. What&#39;s a skip list? We&#39;ll cover it soon. As we mentioned, when  PingAck doesn&#39;t arrive on time, we&#39;re going to pick another member (at random) and ask it to ping our suspect for us using  PingReq message. This way we try to mitigate risk of false negatives in our failure detection algorithm:\n let ready state = actor { match! ctx.Receive() with | PingReq (suspect, gossip, sender) -&gt; let cancel = ctx.Schedule indirectPingTimeout ctx.Self (PingTimeout suspect) suspect.Endpoint &lt;! Ping(state.Active, ctx.Self) return! ready { merge gossip state with Suspects = Map.add suspect (cancel, WaitPingReqAck) state.Suspects\n......", "posttime": "2021-06-29 22:34:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u7fa4\u96c6,cluster,\u8282\u70b9", "title": "\u8ba9\u4f60\u7684\u7fa4\u96c6\u6e38\u6cf3\uff082020\uff09 ", "title_en": "Make your cluster SWIM (2020)", "transed": 1, "url": "https://bartoszsypytkowski.com/make-your-cluster-swim/", "via": "", "real_tags": ["2020", "\u7fa4\u96c6", "cluster", "\u8282\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068445, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6beb\u6df7\u5ba2\u6237\u7aef\u6709\u591a\u79cd\u8bed\u8a00\u3002\u5bf9\u4e8e\u7ffb\u8bd1\u8fc7\u7a0b\uff0c\u6211\u4eec\u6700\u8fd1\u4eceTransifex Online Platform\u79fb\u52a8\u5230WebLate\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u63cf\u8ff0\u4e86\u6211\u4eec\u7684\u7ffb\u8bd1\u5386\u53f2\uff0c\u63a8\u7406\u548c\u76ee\u524d\u7684\u65b9\u6cd5\u3002\n  \u5728\u6700\u540e\u4e00\u4e2a\u5feb\u7167\u4e4b\u540e\uff0c\u6211\u4eec\u81ea\u8c6a\u5730\u4ecb\u7ecd\u5373\u5c06\u5230\u6765\u76841.4.0 stablerelelease\u7684\u7b2c\u516d\u6b21\u5f00\u53d1\u5feb\u7167\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u5feb\u7167\u65e8\u5728\u6210\u4e3a\u6700\u540e\u4e00\u4e2a\u91ca\u653e\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u5e76\u4e0e\u5176\u53d1\u5e03\u4e00\u6837\uff0c\u6211\u4eec\u6b63\u5728\u5f15\u51651.4.x\u7cfb\u5217\u7684Freature-Freeze\u3002\u4ece\u73b0\u5728\u5f00\u59cb\uff0c\u53ea\u6709\u9519\u8bef\u4fee\u590d\u5c06\u8fdb\u5165\u8fd9\u4e2a\u7cfb\u5217\u3002\n \u5728\u7406\u89e3\u91ca\u653e\u7684\u610f\u4e49\u4e4b\u540e\u662f\u5feb\u7167\u7248\u672c\uff08\u89c1\u4e0b\u6587\uff09\uff0c\u60a8\u53ef\u4ee5\u4ece\u4e0b\u8f7d\u7a7a\u95f4\u4e0b\u8f7d\u65b0\u7248\u672c\u3002\n      \u72ac\u6b4c\u662f\u7b2c\u4e00\u4e2a\u5728\u5341\u5e74\u524d\u5efa\u7acb\u771f\u6b63\u7684\u4f4e\u5ef6\u8fdf\u8bed\u97f3\u901a\u4fe1\u7684VoIP\u5e94\u7528\u7a0b\u5e8f\u3002\u4f46\u4f4e\u5ef6\u8fdf\u548c\u6e38\u620f\u4e0d\u662f\u5b83\u95ea\u8000\u7684\u552f\u4e00\u7528\u4f8b\u3002\n  \u6211\u4eec\u542c\u5230\u5f55\u5236\u64ad\u5ba2\u4e0e\u6211\u4eec\u7684\u591a\u901a\u9053\u97f3\u9891\u5f55\u97f3\u673a\uff0c\u5bfb\u6c42\u4e0e\u6211\u4eec\u7684\u4f4d\u7f6e\u97f3\u9891\u5728\u6e38\u620f\u4e2d\u5bfb\u6c42\u73b0\u5b9e\u4e3b\u4e49\u7684\u64ad\u653e\u5668\uff0cEve\u5728\u7ebf\u7403\u5458\u62e5\u6709\u8d85\u8fc7100\u591a\u4e2a\u540c\u6b65\u8bed\u97f3\u53c2\u4e0e\u8005\u7684\u5de8\u5927\u793e\u533a\uff08\u6211\u6253\u8d4c\u4ed6\u4eec\u719f\u6089\u6211\u4eec\u5e7f\u6cdb\u7684\u8bb8\u53ef\u7cfb\u7edf\ud83d\ude04 \uff09\uff0c\u7ade\u4e89\u56e2\u961f\u5821\u57922\u793e\u533a\u4f7f\u6211\u4eec\u6210\u4e3a\u4ed6\u4eec\u6240\u9700\u7684\u8bed\u97f3\u901a\u4fe1\u5e73\u53f0\uff0c\u7231\u597d\u65e0\u7ebf\u7535\u4f20\u8f93\u7528\u6237\uff0c\u4ee5\u53ca\u5404\u79cd\u5de5\u4f5c\u573a\u6240\u9002\u5e94\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u5495\u565c\u58f0\n  \u7ba1\u7406\u5458\u6b23\u8d4f\u80fd\u591f\u81ea\u6211\u4e3b\u6301\u5e76\u63a7\u5236\u6570\u636e\u5b89\u5168\u6027\u548c\u9690\u79c1\u6027\u7684\u816e\u817a\u3002\u6709\u4e9b\u4eba\u5229\u7528\u5e7f\u6cdb\u7684\u6743\u9650\u7cfb\u7edf\u8fdb\u884c\u590d\u6742\u573a\u666f\uff08\u4f8b\u5982\u5206\u9694\u4e24\u7ec4\uff0c\u4f46\u9886\u5bfc\u8005\u80fd\u591f\u4e0e\u4e24\u8005\u4ea4\u8c08\uff09\u3002\u6709\u4e9b\u4eba\u559c\u6b22\u4e3a\u4ed6\u4eec\u7684\u7528\u6237\u63d0\u4f9b\u5177\u6709\u4f7f\u7528\u670d\u52a1\u5668API\u7684\u811a\u672c\u6216\u8fde\u63a5\u5230\u670d\u52a1\u5668\u7684\u4e3b\u673a\u97f3\u4e50\u673a\u5668\u4eba\u7b49\u811a\u672c\u7684\u9644\u52a0\u529f\u80fd\u3002\u5177\u6709\u73b0\u6709\u7528\u6237\u6570\u636e\u5e93\u7684\u4eba\u901a\u5e38\u4f7f\u7528\u8eab\u4efd\u9a8c\u8bc1\u5668\u5141\u8bb8\u4f7f\u7528\u73b0\u6709\u5e10\u6237\u767b\u5f55\u6570\u636e\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u3002\n    \u4e0d\u540c\u7684\u7528\u6237\u7ec4\u5bf9\u4e0d\u540c\u7684\u529f\u80fd\u611f\u5174\u8da3\uff0c\u56e0\u6b64\u6211\u4eec\u63cf\u8ff0\u4e86\u5bf9\u6bcf\u79cd\u7528\u6237\u7279\u5b9a\u7684\u4e00\u4e9b\u529f\u80fd\u3002 \n\u8981\u5f00\u59cb\u53ea\u9700\u4e0b\u8f7d\uff0c\u5b89\u88c5\u548c\u542f\u52a8\u561f\u561f\u58f0\u5e76\u8fde\u63a5\u5230\u516c\u5171\u670d\u52a1\u5668\uff0c\u6216\u8005\u60a8\u77e5\u9053\u7684\u7279\u5b9a\u4e00\u4e2a\u3002  \u901a\u8fc7ICE\u534f\u8bae\u6e20\u9053\u89c2\u4f17\u5ef6\u4f38 - \u5373\u4f7f\u6ca1\u6709\u76f4\u63a5\u7684ICE\u8bbf\u95ee\uff0c\u5982\u679cHOSTES\u63d0\u4f9bCVP\uff0c\u5219\u8f7b\u677e\u8bbe\u7f6e\u60a8\u7684\u9891\u9053\u67e5\u770b\u5668  \u5bf9\u4e8e\u914d\u7f6e\u9009\u9879\uff0c\u8bf7\u53c2\u9605Murmur.ini\u4ee5\u53ca\u6211\u4eec\u5173\u4e8e\u7b2c\u4e09\u65b9\u7ba1\u7406\u8f6f\u4ef6\uff0c\u811a\u672c\u548c\u673a\u5668\u4eba\u7684\u6587\u6863\u3002 ", "note_en": "The Mumble client is available in many languages. For the translation process we recently moved from the  Transifex online platform to  Weblate. In this post we describe our translation history, reasoning, and current approach.\n  Following the  last snapshot we proudly present our sixth development snapshot of the upcoming 1.4.0 stablerelease. Note that this snapshot is intended to be the last one before the final release and as such with its publication we are introducing afeature-freeze of the 1.4.x series. From now on only bug fixes will make it into this series.\n After having understood what it means for a release to be a  snapshot release (see below), you can download the new version from our   Downloadspage.\n      Mumble was the first VoIP application to establish true low latency voice communication over a decade ago. But low latency and gaming are not the only use cases it shines in.\n  We heard from users who record podcasts with our multi-channel audio recorder, players seeking realism with our positional audio in games, Eve Online players with huge communities of over 100 simultaneous voice participants (I bet they make good use of our extensive permission system \ud83d\ude04), the competitive Team Fortress 2 community making us their required voice communication platform, hobby radio transmission users, and a variety of workplaces adapting Mumble to fit their needs - be it on-head mobile devices or communicating across countries or into airplanes.\n  Administrators appreciate Mumble for being able to self host and have  control over data security and privacy. Some make use of the extensive permission system for complex scenarios (for example separating two groups but leaders being able to talk to both). Some love to provide their users with additional functionality with scripts making use of server APIs, or host music bots and the like that connect to the server. Those that have an existing user database often make use of authenticators to allow authenticating with existing account login data.\n    Different user groups are interested in different capabilities and so we describe some of the features specific to each kind of user.\n        To get started simply  download, install and start Mumble and connect to a public server, or a specific one you know of.\n    Extendible through Ice protocols\t\t\t Channel viewers - even without direct Ice access, if the hoster provides the CVP, easily set up your channel viewer of choice\n    For configuration options see  Murmur.ini and our documentation on third party administration software, scripts, and bots.", "posttime": "2021-06-29 22:34:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u9ad8\u8d28\u91cf,open,\u811a\u672c", "title": "\u5583\uff1a\u5f00\u6e90\uff0c\u4f4e\u5ef6\u8fdf\uff0c\u9ad8\u8d28\u91cf\u7684\u8bed\u97f3\u804a\u5929 ", "title_en": "Mumble: Open-Source, Low Latency, High Quality Voice Chat", "transed": 1, "url": "https://www.mumble.info/", "via": "", "real_tags": ["\u5f00\u6e90", "\u9ad8\u8d28\u91cf", "open", "\u811a\u672c"]}, {"category": "", "categoryclass": "", "imagename": "6135cca9843ba6e754c29dc083785da7.jpg", "infoid": 1068444, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e0\u6548\u7684\u7535\u5b50\u90ae\u4ef6\u51fa\u73b0\u95ee\u9898\uff0c\u8bf7\u7a0d\u540e\u518d\u8bd5\u3002\u8ba2\u9605\u65f6\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u60a8\u63d0\u4f9b\u7684\u4fe1\u606f\u5411\u60a8\u53d1\u9001\u8fd9\u4e9b\u65b0\u95fb\u7a3f\u3002\u60a8\u7684\u4fe1\u606f\u5c06\u6839\u636e\u6211\u4eec\u7684\u9690\u79c1\u58f0\u660e\u4f7f\u7528\u3002\n \u9e3d\u5b50\u9e3d\u53cb\u6b63\u8bd5\u56fe\u5236\u5b9a\u5927\u7ea65,000\u53ea\u9e1f\u7c7b\u5728\u4e00\u573a\u6bd4\u8d5b\u4e2d\u6d88\u5931\u5728\u4e00\u4e2a\u201c\u767e\u6155\u5927\u4e09\u89d2\u5f62\u201d\u4e2d\u6240\u8c13\u7684\u8fd9\u9879\u8fd0\u52a8\u7684\u6700\u7cdf\u7cd5\u7684\u65e5\u5b50\u4e4b\u4e00\u3002\n  \u4ece\u5f7c\u5f97\u5821\u5230\u4e1c\u5317\u5730\u533a\u7684\u6bd4\u8d5b\u952f9,000\u53ea\u9e3d\u5b50\u53c2\u4e0e\u901a\u5e38\u662f\u4e09\u5c0f\u65f6\u7684\u6bd4\u8d5b\uff0c\u4f46\u8d85\u8fc7\u4e00\u534a\u624d\u5230\u8fbe\u3002\n  \u5927\u6c14\u6761\u4ef6\u662f\u8fc4\u4eca\u4e3a\u6b62\u63d0\u51fa\u7684\u552f\u4e00\u89e3\u91ca\uff0c\u62a5\u9053\u4e86Teesside Live\u3002\n  \u9e3d\u5b50\u5728\u4ece\u5357\u65b9\u7684\u6bd4\u8d5b\u4e2d\u56de\u5230\u4e86\u4e1c\u514b\u5229\u592b\u5170\u7684\u56de\u5bb6\u3002\n  \u5728Skinnningrove\u7684\u9e3d\u820d\u4f30\u8ba1\u7684300\u53ea\u9e1f\u5728\u6bd4\u8d5b\u4e2d\u6d88\u5931\u4e86\uff0c\u9e3d\u5b50\u9e3d\u53cb\u8ba4\u4e3a\u53ef\u80fd\u662f\u7531\u4e8e\u602a\u707e\u5929\u6c14\u72b6\u51b5\u3002\n                             SkinnningRove Pigeon Fancier Richard Sayers\u5bf9\u4ed6\u7684\u793e\u4ea4\u5a92\u4f53\u6e20\u9053\u5206\u4eab\u4e86\u547c\u5401\uff0c\u6566\u4fc3\u4eba\u4eec\u5411\u4ed6\u4eec\u7559\u610f\uff0c\u5e76\u5728\u60a8\u7684\u82b1\u56ed\u91cc\u7684\u4e22\u5931\u7684\u8d5b\u9e3d\u9646\u5730\u5360\u636e\u4e86\u8be5\u600e\u4e48\u529e\u3002 \n\u8d5b\u8f66\u9e3d\u662f\u53ef\u8bc6\u522b\u7684\uff0c\u6807\u7b7e\u5468\u56f4\u7684\u6807\u7b7e\u3002\u5982\u679c\u4ed6\u4eec\u88ab\u5582\u517b\u548c\u6d47\u6c34\uff0c\u4ed6\u8bf4\uff0c\u75b2\u60eb\u7684\u5f52\u5de2\u9e1f\u6700\u7ec8\u4f1a\u56de\u5230\u4ed6\u4eec\u7684\u9e3d\u820d\u3002\n    \uff06\uff0334;\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u7cdf\u7cd5\u7684\u5468\u672b\u8d5b\u8f66\uff0c\u4e0d\u4ec5\u4ec5\u662f\u5728\u82f1\u56fd\u7684\u897f\u5317\uff0c\uff06\uff0339;\u5728\u82f1\u56fd\u3002\u76ee\u524d\uff0c\u4eba\u4eec\u975e\u5e38\u4e0d\u786e\u5b9a\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4ecd\u7136\u5b58\u5728\u5f88\u591a\u5f88\u591a\uff0c\u5e76\u4e14\u5728\u884c\u52a8\u4e2d\u4ecd\u7136\u7f3a\u5c11\u5f88\u591a\u9e3d\u5b50\uff0c\u800c\uff0334;\u7406\u67e5\u5fb7\u8bf4\u3002\n  \uff06\uff0334;\u5f88\u591a\u4eba\u8ba4\u4e3a\u8fd9\u662f\u7531\u4e8e\u5927\u6c14\u4e2d\u7684\u4e1c\u897f - \u5c31\u50cf\u4e91\u4e0a\u65b9\u7684\u592a\u9633\u98ce\u66b4\u4e00\u6837\u3002\n  \uff06\uff0334;\u6211\u53ea\u662f\u60f3\u5411\u9047\u5230\u8d5b\u9e3d\u5582\u517b\uff0c\u6c34\u548c\u8ba9\u5b83\u4f11\u606f\u548c\u90a3\u91cc\u7684\u4efb\u4f55\u4eba\u63d0\u9ad8\u8ba4\u8bc6\uff0c\u5e76\u4e14\u5728\u51e0\u5929\u540e\u9e1f\u7c7b\u5c06\u5728\u9014\u4e2d\u8fbe\u523080\uff05\u7684\u673a\u4f1a\u3002\u6bcf\u53ea\u9e3d\u5b50\u90fd\u6709\u4e00\u4e2a\u8bc6\u522b\u6212\u6307\uff0c\u5176\u4e2d\u4ee3\u7801\u548c\u6570\u5b57\u3002\uff06\uff0334;\n  \uff06\uff0334;\u6211\u4eec\u9700\u8981\u6211\u4eec\u7684\u5c0f\u9e1f\u7c7b\u5728\u91cd\u5927\u51b2\u7a81\u4e2d\u6709\u52a9\u4e8e\u4ed6\u4eec\u633d\u6551\u4e861000\u591a\u4eba\u7684\u751f\u547d\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u505a\u6211\u4eec\u7684\u4e00\u70b9\u70b9\u6765\u5e2e\u52a9\u4ed6\u4eec\uff0c\uff06\uff0334;\u4ed6\u5728\u4ed6\u7684\u793e\u4ea4\u5a92\u4f53\u5e16\u5b50\u4e2d\u8bf4\u3002\n    \u4ed6\u5c06\u4ed6\u7684\u5f52\u5de2\u9e1f\u98de\u5230\u5144\u5f1f\u4eec\u7684\u5144\u5f1f\uff06amp;\u6765\u81eaSkinningrove\u7684\u513f\u5b50\u5728\u4e1c\u90e8\u514b\u5229\u592b\u5170\u8054\u90a6\u3002\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u4fdd\u6301\u9e1f\u7c7b\u5927\u7ea650\u5e74\u3002\n  \u4ed6\u8bf4\uff0c\u5927\u7ea6\u572830\uff05\u523040\uff05\u7684\u76ae\u80a4\u9e1f\u7c7b\u7f3a\u5931\uff0c\u5927\u7ea6300\u5c81\u7684\u9e1f\u7c7b\u3002\u5728\u4e1c\u65b9\u514b\u5229\u592b\u5170\u8054\u90a6\uff0c\u8be5\u6570\u5b57\u4f30\u8ba1\u4e3a1,000\u3002\u6a2a\u8de8\u4e1c\u5317\u90e8\uff0c\u4f30\u8ba1\u4ecb\u4e8e3,500\u548c5,500\u4e4b\u95f4\u3002 \n\u7406\u67e5\u5fb7\u8bf4\uff0c\u60e0\u7279\u6bd4\u9e3d\u53cb\u51ef\u5c14\u00b7\u675c\u683c\u62c9\u65af\u51ef\u5c14\u00b7\u675c\u683c\u62c9\u65af\u6709\u5f88\u591a\u5de5\u4f5c\u6765\u5e2e\u52a9\u62ef\u6551\u5931\u53bb\u7684\u9e1f\u7c7b\u3002  \u8fd8\u6709\u7f51\u7ad9\uff0c\u4eba\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u62a5\u544a\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u7684\u6742\u6563\u3002 ", "note_en": "Invalid Email Something went wrong, please try again later.   When you subscribe we will use the information you provide to send you these newsletters. Your information will be used in accordance with our Privacy Notice.\n Pigeon fanciers are trying to work out how around 5,000 birds have disappeared into a \u201cBermuda triangle\u201d in a single race in what is being called one of the worst days ever for the sport.\n  A race from Peterborough to the North East saw 9,000 pigeons taking part in what would normally be a three-hour competition but more than half have yet to arrive.\n  Atmospheric conditions are the only explanation that has been put forward so far,  reports Teesside Live.\n  The pigeons have vanished while making their way home to east Cleveland from a race down south.\n  An estimated 300 birds from lofts in Skinningrove alone have disappeared during the race which pigeon fanciers believe has possibly been due to freak weather conditions.\n                             Skinningrove pigeon fancier Richard Sayers shared an appeal on his social media channels urging people to look out for them and giving advice on what to do if a lost racing bird lands in your garden.\n  Racing pigeons are recognisable by the tags around their legs. If they are fed and watered, he says, the tired homing birds will eventually return to their lofts.\n    &#34;It&#39;s been a really bad weekend racing not just here in the North East, it&#39;s right across the UK. At present people are very unsure what has happened there are still lots and lots of pigeons still missing in action,&#34; said Richard.\n  &#34;A lot of people think this is due to something in the atmosphere - like a solar storm above the clouds.\n  &#34;I just wanted to raise awareness for anyone who comes across a racing pigeon to feed, water and let it rest and there&#39;s an 80% chance the birds will get on their way after a few days. Each pigeon has an identification ring on with a code and number.&#34;\n  &#34;We needed our little birds help in the major conflicts and they saved 1000s of lives, now we can do our little bit to help them,&#34; he said in his social media post.\n    He flies his homing birds as Sayers Bros &amp; son from Skinningrove in the East Cleveland Federation. The partnership has kept birds for around 50 years.\n  Roughly between 30% and 40% of the Skinningrove birds are missing, around 300 birds, he said. In the East Cleveland Federation the figure is estimated to be 1,000. Across the North East section, the estimate is between 3,500 and 5,500.\n  Whitby pigeon fancier Kyle Douglass, 20, does a lot of work to help rescue lost birds, said Richard.\n  There are also websites where people can report strays which can be found  here and  here.", "posttime": "2021-06-29 22:34:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9e3d\u5b50,pigeons,\u6bd4\u8d5b", "title": "\u8c1c\u56e2\u4f5c\u4e3a5k\u5f52\u5de2\u9e3d\u5b50\u53d8\u6210\u8584\u8584\u7684\u7a7a\u6c14 ", "title_en": "Mystery as 5k homing pigeons vanish into thin air", "transed": 1, "url": "https://www.walesonline.co.uk/news/uk-news/mystery-5000-homing-pigeons-birds-20907818", "via": "", "real_tags": ["\u9e3d\u5b50", "pigeons", "\u6bd4\u8d5b"]}]