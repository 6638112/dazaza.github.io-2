[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073191, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4e00\u4e2a\u6982\u5ff5\u53eb\u505a\u201c\u795e\u79d8\u8c37\u201d\uff1b\u5f53\u4e00\u4e2a\u4eba\u770b\u7740\u5361\u901a\u5316\u7684\u8138\u65f6\uff0c\u4ed6\u4eec\u901a\u5e38\u4f1a\u8ba4\u51fa\u5b83\u662f\u4e00\u4e2a\u4eba\u3002\u5f53\u4ed6\u4eec\u770b\u5230\u4e00\u5f20\u771f\u5b9e\u611f\u7684\u8138\u65f6\uff0c\u4ed6\u4eec\u4e5f\u4f1a\u540c\u6837\u5730\u8ba4\u51fa\u5b83\u3002\u4f46\u5f53\u5448\u73b0\u4e00\u5e45\u9ad8\u5ea6\u903c\u771f\u4f46\u6709\u70b9\u201c\u4e0d\u5bf9\u52b2\u201d\u7684\u56fe\u50cf\u65f6\uff0c\u4eba\u7c7b\u5f80\u5f80\u4f1a\u89c9\u5f97\u5b83\u4ee4\u4eba\u538c\u6076\u6216\u4e0d\u5b89\u3002\u4eca\u5929\uff0c\u6211\u4eec\u6765\u770b\u770b\u53e6\u4e00\u4e2a\u4e16\u5609\u62f1\u5eca\u677f\uff1a\u5982\u679c\u4f60\u7ed9\u5b83\u4e00\u4e2a\u4eba\u8111\uff0c\u5b83\u4f1a\u5728\u4e16\u5609\u8d77\u6e90\u4e2d\u5f15\u53d1\u4e00\u4e2a\u201c\u4e0d\u53ef\u601d\u8bae\u7684\u5c71\u8c37\u201d\u53cd\u5e94\u3002\n\u6709\u5f88\u591a\u5e16\u5b50\u7684\u4e00\u4e2a\u597d\u5904\u662f\u6211\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u94fe\u63a5\u5230\u5b83\u4eec\u3002\u7136\u800c\uff0c\u7531\u4e8e\u6211\u7684\u60f3\u8c61\u529b\u5f80\u5f80\u65e0\u6cd5\u63a7\u5236\u5730\u56db\u5904\u6e38\u8361\uff0c\u5b83\u4eec\u6700\u7ec8\u6709\u70b9\u6df7\u4e71\u3002\u8fd9\u91cc\u5c31\u662f\u8fd9\u6837\u3002\u8428\u7c73\u539f\u5b50\u6ce2\uff08Sammy Atomiswave\uff09\u662f\u6211\u5728\u8fd9\u4e2a\u8857\u673a\u8ff7\u4e2d\u7684\u7b2c\u4e00\u7bc7\u5e16\u5b50\u3002\n\u5173\u4e8eAtomiswave\uff0c\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\u662f\uff0c\u5b83\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u4e16\u5609\u68a6\u60f3\u5e7f\u64ad\uff0c\u5b83\u4f7f\u7528\u7684\u662f\u76d2\u5f0f\u78c1\u5e26\u800c\u4e0d\u662fGD ROM\u3002\u4e0e\u4e16\u5609NAOMI\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u4e0e\u6d88\u8d39\u7c7b\u673a\u5668\u7684\u89c4\u683c\u76f8\u540c\uff0c\u5c3d\u7ba1\u5b83\u662f\u57282001\u5e74Dreamcast\u505c\u64ad\u540e\u63a8\u51fa\u7684\u3002\n\u6211\u8fd8\u8c08\u5230\u4e86\u4e16\u5609ST-V\u3002\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4f7f\u7528\u76d2\u5e26\u7684\u4e16\u5609\u62f1\u5eca\u677f\uff0c\u5b83\u57fa\u4e8e\u4f7f\u7528\u5149\u76d8\u7684\u6d88\u8d39\u786c\u4ef6\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u5b83\u57fa\u4e8e32\u4f4d\u571f\u661f\u63a7\u5236\u53f0\u3002\n\u6211\u4e00\u76f4\u5728\u8bb2\u8ff0\u7684System 1\u57fa\u672c\u4e0a\u57281986\u5e74\u7ed3\u675f\u4e86\u4f7f\u7528\u5bff\u547d\u3002\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u540d\u5b57\u662fVic Tokai 1987\u5e74\u7684Block Gal\uff0c\u5b83\u62cd\u6444\u4e86\u4e16\u5609\u4ee5\u524d\u7684\u65d7\u8230\u786c\u4ef6\uff0c\u5e76\u4ec5\u5c06\u5176\u7528\u4f5c\u5c55\u793a\u4e00\u4e9b\u53ef\u7231\u5973\u5b69\u7167\u7247\u7684\u5de5\u5177\u3002\u5f53\u7136\uff0c\u53ef\u7231\u5973\u5b69\u7684\u7167\u7247\u6ca1\u6709\u95ee\u9898\u3002\u4f46\u73b0\u5728\u662f\u65f6\u5019\u505a\u4e9b\u65b0\u7684\u4e8b\u60c5\u4e86\u3002\nSystem 2\uff0c\u4e00\u4e2a\u5177\u6709\u9ad8\u7ea7\u6eda\u52a8tilemap\u7684System 1\uff0c\u6301\u7eed\u4e86\u51e0\u5e74\uff0cVic Tokai\u518d\u4e5f\u6ca1\u6709\u5f97\u5230\u5b83\u3002\u4f46\u52301988\u5e74\uff0c\u5f53\u5b83\u7684\u6700\u540e\u4e00\u6b3e\u6e38\u620fUFO Senshi Youko Chan\u53d1\u5e03\u65f6\uff0c\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\u3002\u770b\uff0c1988\u5e74\uff0c\u4e16\u5609\u8fd8\u5728\u65e5\u672c\u53d1\u5e03\u4e86\u4ed6\u4eec\u768416\u4f4d\u8d85\u5927\u9a71\u52a8\u5668\u63a7\u5236\u53f0\uff1bSystem 2\u5728\u8d85\u7ea7\u786c\u76d8\u4e0a\u7684\u552f\u4e00\u4f18\u52bf\u5c31\u662f\u5c4f\u5e55\u4e0a\u53ef\u80fd\u540c\u65f6\u51fa\u73b0\u7684\u989c\u8272\u6570\u91cf\u3002\u6b64\u5916\uff0cSystem 2\u4e0d\u592a\u9002\u5408\u4f4e\u7aef\u62f1\u5eca\u677f\uff0c\u56e0\u4e3a\u5b83\u6709\u5927\u91cf\u5b50\u677f\u548c\u5927\u91cf\u79bb\u6563\u903b\u8f91\u3002\n\u770b\uff0c\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff1a\u7cfb\u7edfC\u3002\u5b83\u662f\u4e00\u4e2a\u53ef\u7231\u7684\u5c0f\u677f\uff1b\u548c\u4e4b\u524d\u7684\u4e16\u5609\u7cfb\u7edf1\u4e00\u6837\uff0c\u8fd9\u4e9b\u90fd\u662f\u5355\u6e38\u620f\u677f\uff0c\u6ca1\u6709\u4efb\u4f55\u53ef\u4e92\u6362\u7684\u58a8\u76d2\u3002\u5c06\u5b83\u4e0eSystem 1\uff08\u5728\u672c\u4f8b\u4e2d\u4e3aTeddy Boy Blues\u76d7\u7248\uff09\u8fdb\u884c\u6bd4\u8f83\uff0c\u60a8\u53ef\u4ee5\u770b\u5230\u5b83\u786e\u5b9e\u662f\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u7248\u672c\u3002\u52a0\u4e0a\u4e16\u5609\u8fd9\u6b21\u7ed9\u4e86\u5b83\u4e00\u4e2aJAMMA edge\u8fde\u63a5\u5668\uff01\u6211\u77e5\u9053\u7cfb\u7edf1\u65e9\u4e8e\u6807\u51c6\uff0c\u6240\u4ee5\u6211\u4e0d\u80fd\u8d23\u602a\u4ed6\u4eec\uff0c\u4f46\u6807\u51c6\u5f88\u597d\u3002\n\u8fd9\u662f\u901a\u8fc7\u5171\u4eab\u4e3aSega Genesis\u63d0\u4f9b\u52a8\u529b\u7684\u540c\u4e00\u4e2aVDP\uff08\u89c6\u9891\u663e\u793a\u5904\u7406\u5668\uff09\u5b9e\u73b0\u7684\u3002\u5728\u8fd9\u91cc\uff0c\u5b83\u7684\u6807\u7b7e\u662fSega 315-5313\uff08\u4f60\u4e5f\u53ef\u4ee5\u770b\u5230\u5b83\u88ab\u79f0\u4e3a\u96c5\u9a6c\u54c8YM7101\uff09\uff0c\u4eceMega Drive Development Wiki\u4e0a\u7684\u7167\u7247\u5224\u65ad\uff0c\u8fd9\u662f\u4e00\u4e2a\u65e9\u671f\u7248\u672c\u3002\u8fd9\u5f88\u5408\u9002\uff1b\u8fd9\u4e2a\u8463\u4e8b\u4f1a\u7684\u65e5\u671f\u662f1989\u5e74\uff0c\u8fd9\u7edd\u5bf9\u662f\u65e9\u671f\u7684\u5de8\u578b\u9a71\u52a8\u5668\u3002\n315-5313\u662f\u4e00\u6b3e\u771f\u6b63\u7684\u96c6\u6210\u7535\u8def\uff1b\u5b83\u4e0d\u4ec5\u5305\u542b\u89c6\u9891\u5904\u7406\u5668\uff0c\u8fd8\u5305\u542b\u4e00\u4e2a\u201c\u4e16\u5609PSG\u201d\uff0c\u8fd9\u662f\u4e00\u4e2a4\u901a\u9053TI SN76489\u7684\u514b\u9686\uff0c\u57fa\u672c\u4e0a\u572820\u4e16\u7eaa80\u5e74\u4ee3\u7684\u6240\u6709\u673a\u5668\u4e0a\u90fd\u53ef\u4ee5\u627e\u5230\u3002\u5982\u679c\u4ed6\u4eec\u60f3\uff0c\u4e16\u5609\u53ef\u4ee5\u5c06\u5176\u4e0e\u4e00\u4e2aCPU\u914d\u5bf9\uff0c\u5e76\u79f0\u4e4b\u4e3a\u201c\u4e00\u5929\u201d\uff1b\u963f\u5854\u91cc\u53ef\u80fd\u4f1a\u8fd9\u4e48\u505a\u3002\u8c22\u5929\u8c22\u5730\uff0c\u4ed6\u4eec\u5c06\u5176\u4e0e\u96c5\u9a6c\u54c8FM\u5408\u6210\u5668\u914d\u5bf9\u3002\u5728Genesis\u8f66\u578b1\u4e0a\uff0c\u8fd9\u662f\u96c5\u9a6c\u54c8YM2612\u3002\n\u8fd9\u5c31\u662f\u201c\u795e\u79d8\u8c37\u201d\u5f00\u59cb\u51fa\u73b0\u7684\u5730\u65b9\u3002\u7cfb\u7edfC\u677f\u4f7f\u7528\u96c5\u9a6c\u54c8YM3438\u3002\u5c3d\u7ba1\u6570\u5b57\u4e0d\u540c\uff0c\u4f46\u8fd9\u53ea\u662fYM2612\u7684CMOS\u53d8\u4f53\uff1b\u53ef\u80fd\u4e0eMOS 6502\u548cWDC 65C02\u76f8\u5f53\u3002\u4e00\u4e2a\u4e0d\u540c\u7684\u82af\u7247\u5236\u9020\u8fc7\u7a0b\uff0c\u4e00\u4e9b\u5c0f\u7684\u4e0d\u517c\u5bb9\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5305\u62ec\u97f3\u9891\u8f93\u51fa\u963b\u6297\uff09\uff0c\u4f46\u5982\u679c\u4f60\u6ca1\u6709\u505a\u4efb\u4f55\u592a\u5947\u602a\u7684\u4e8b\u60c5\uff0c\u5728\u5b83\u4eec\u4e4b\u95f4\u5207\u6362\u5e94\u8be5\u4e0d\u4f1a\u592a\u56f0\u96be\u3002\u4e8b\u5b9e\u4e0a\uff0c\u540e\u6765\u7684Genesis\u578b\u53f7\u5305\u62ec\u4e00\u4e2a\u57fa\u4e8eYM3438\u7684\u6838\u5fc3\uff0c\u4f46\u53ea\u662f\u4f5c\u4e3a\u66f4\u5e7f\u6cdb\u7684\u96c6\u6210\u7535\u8def\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u5305\u62ecVDP\u3002\n\u6240\u4ee5\u8fd9\u5e76\u4e0d\u5b8c\u5168\u662f\u9519\u7684\u3002\u5982\u679c\u4f60\u4e60\u60ef\u4e86\u300a\u521b\u4e16\u7eaa\u300b\uff0c\u90a3\u5c31\u6709\u70b9\u5947\u602a\u4e86\u3002\n\u6b63\u5982\u6211\u6240\u6307\u51fa\u7684\uff0c\u8fd9\u4e2a\u677f\u662f\u4e00\u4e2a\u201cSystemC\u201d\u677f\u3002\u4f46\u4e3a\u8fd9\u4e2a\u5e73\u53f0\u53d1\u5e03\u7684\u5927\u591a\u6570\u6e38\u620f\u90fd\u662f\u201c\u7cfb\u7edfC2\u201d\u3002\u6709\u4ec0\u4e48\u533a\u522b\uff1f\u4e00\u4e2aNEC uPD7759 ADPCM\u6837\u672c\u64ad\u653e\u82af\u7247\uff0c\u5b83\u6709\u81ea\u5df1\u7684ROM\u3002\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u9519\u7684\u5347\u7ea7\uff0c\u5728\u5f53\u65f6\uff0c\u8857\u673a\u6e38\u620f\u4e2d\u9ad8\u8d28\u91cf\u7684\u58f0\u97f3\u4ecd\u7136\u662f\u4e00\u4e2a\u65b0\u9c9c\u4e8b\u7269\u3002\u6709\u8da3\u7684\u662f\uff0c\u5c3d\u7ba1\u8fd9\u4e2a1989\u5e74\u7684\u68cb\u76d8\u65e9\u4e8e1990\u5e74\u7684\u7b2c\u4e00\u4e2a\u7cfb\u7edfC2\u6e38\u620f\uff0c\u4f46\u5b83\u5df2\u7ecf\u5728\u68cb\u76d8\u4e0a\u6709\u4e86\u7a7a\u95f4\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5347\u7ea7\u663e\u7136\u662f\u4ece\u65e9\u671f\u5c31\u8ba1\u5212\u597d\u7684\u3002\n\u5f53\u6211\u4eec\u770b\u5230\u4f2a\u88c5\u6210\u82af\u7247\u7684\u5947\u602a\u5c01\u88c5\u7535\u8def\u677fSega 315-5242\u65f6\uff0c\u4f1a\u6709\u66f4\u591a\u7684\u4e50\u8da3\u3002\u8fd9\u6709\u4ec0\u4e48\u7528\uff1f\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e00\u90e8\u5206\u5728\u4e16\u5609\u4e3b\u677f\u4e0a\u6709\u7740\u60a0\u4e45\u7684\u5386\u53f2\uff0c\u5b83\u901a\u5e38\u88ab\u79f0\u4e3a\u201c\u989c\u8272\u7f16\u7801\u5668\u201d\u3002\u5b83\u5728\u8fd9\u91cc\u7684\u4f5c\u7528\uff0c\u6211\u4eec\u5fc5\u987b\u56de\u987e\u300a\u521b\u4e16\u7eaa\u300b\u3002\u4e16\u5609\u521b\u4e16\u7eaa\u662f\u4e00\u6b3e\u51fa\u8272\u7684\u6e38\u620f\u673a\uff0c\u80fd\u591f\u505a\u51fa\u4ee4\u4eba\u60ca\u53f9\u7684\u4e8b\u60c5\uff0c\u4f46\u5373\u4f7f\u662f\u6700\u575a\u5b9a\u7684\u72b9\u8c6b\u4e0d\u51b3\u7231\u597d\u8005\u4e5f\u4f1a\u540c\u610f\uff0c\u5b83\u7684\u81f4\u547d\u5f31\u70b9\u662f\u8c03\u8272\u677f\u3002\nGenesis VDP\u670964\u4e2a\u5185\u90e89\u4f4d\u5b57\uff0c\u7528\u4e8e64\u79cdRGB\u989c\u8272\u3002\u5b83\u4eec\u5206\u4e3a\u56db\u4e2a16\u8272\u8c03\u8272\u677f\uff0c\u7b2c\u4e00\u79cd\u989c\u8272\u662f\u900f\u660e\u7684\uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a\uff0c\u300a\u521b\u4e16\u7eaa\u300b\u5728\u5c4f\u5e55\u4e0a\u53ea\u80fd\u670961\u79cd\u989c\u8272\u3002\uff08\u9634\u5f71\u548c\u9ad8\u4eae\u6a21\u5f0f\uff0c\u52a0\u4e0a\u8ba1\u65f6\u6280\u5de7\u53ef\u4ee5\u6539\u5584\u8fd9\u4e00\u70b9\uff09\u76f8\u6bd4\u4e4b\u4e0b\uff0cPC\u5f15\u64ce\u7684\u89c6\u9891\u989c\u8272\u7f16\u7801\u5668\uff08VCE\uff09\u6709\u5185\u90e8\u8c03\u8272\u677fRAM\uff0c\u53ef\u5bb9\u7eb3512\u4e2a9\u4f4d\u5b57\u3002\n315-5242\u7528\u4e8e\u7ed5\u8fc7Genesis VDP\u7684\u5185\u90e8\u989c\u8272\u7f16\u7801\u5668\u548c\u5185\u90e8\u8c03\u8272\u677fRAM\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5b83\u6709\u81ea\u5df1\u76844\u7ec41024\u5b57\u8282\u7684\u5f69\u8272RAM\u3002\u5b83\u572816\u4f4d\u5b57\u4e2d\u4f7f\u752815\u4f4d\u989c\u8272\uff0c\u6240\u4ee5512\u4e2a\u540c\u65f6\u4f7f\u7528\u7684\u989c\u8272\uff0c32\u4e2a\u540c\u65f6\u4f7f\u7528\u768416\u8272\u8c03\u8272\u677f\u3002\u5982\u524d\u6240\u8ff0\uff0c315-5242\u5f69\u8272\u7f16\u7801\u5668\u88ab\u7528\u4e8e\u8bb8\u591a\u4e16\u5609\u62f1\u5eca\u677f\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u76f8\u5f53\u76f4\u63a5\u7684\u65b9\u5f0f\u6765\u7167\u4eaeSystem C\u7684\u6d88\u8d39\u8005\u89c4\u683cVDP\u3002\nGenesis VDP\u4e0d\u4f7f\u7528\u6a21\u62df\u89c6\u9891\u8f93\u51fa\uff0c\u800c\u662f\u4f7f\u75288\u4f4d\u201c\u989c\u8272\u603b\u7ebf\u201d\u5c06\u6bcf\u4e2a\u50cf\u7d20\u53d1\u9001\u5230\u989c\u8272\u7f16\u7801\u5668\u7535\u8def\u3002\u8be5\u603b\u7ebf\u63d0\u4f9b\u5f53\u524d\u50cf\u7d20\u76844\u4f4d\u8c03\u8272\u677f\u7d22\u5f15\u30012\u4f4d\u8c03\u8272\u677f\u9009\u62e9\u4f4d\uff08\u5bf9\u4e8e\u5e38\u89c1\u7684\u56db\u4e2aGenesis\u8c03\u8272\u677f\uff09\u3001\u4e00\u4f4d\u6307\u793a\u662f\u5426\u6b63\u5728\u4f7f\u7528\u9634\u5f71\u6216\u9ad8\u5149\u6548\u679c\uff08\u4f46\u4e0d\u662f\u54ea\u4e2a\uff09\uff0c\u4ee5\u53ca\u4e00\u4f4d\u6307\u793a\u7cbe\u7075\u6216\u80cc\u666f\u3002\uff08\u6e90\u4ee3\u7801\uff1aCharles MacDonald\u7684\u7cfb\u7edfC2\u786c\u4ef6\u6ce8\u91ca\uff09\u56e0\u4e3a\u8fd9\u53ea\u5141\u8bb8256\u79cd\u53ef\u80fd\u7684\u989c\u8272\uff0c\u5e76\u4e14\u5f53\u4f60\u8ba4\u4e3a\u9634\u5f71/\u9ad8\u4eae\u5728\u8fd9\u4e2a\u603b\u7ebf\u4e0a\u6ca1\u6709\u660e\u786e\u5b9a\u4e49\u65f6\uff0c\u989d\u5916\u7684\u6bd4\u7279\u7531SEGA 317 XXXX\u6e38\u620f\u7279\u5b9a\u4fdd\u62a4\u82af\u7247\u63a7\u5236\u3002\n\u8be5\u82af\u7247\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2aAltera EPM5032 FPGA\uff0c\u8fd9\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6e38\u620f\u4e2d\u8fdb\u884c\u4ea4\u6362\u3002FPGA\u5e76\u4e0d\u662f\u65b0\u6280\u672f\uff0c\u4f46\u8fd9\u4e00\u6280\u672f\u663e\u7136\u592a\u5c0f\uff0c\u65e0\u6cd5\u8fd0\u884cMiSTer core\u3002\u4e3a\u6bcf\u4e2a\u6e38\u620f\u4f7f\u7528\u4e0d\u540c\u7684FPGA\u610f\u5473\u7740\u6211\u4e0d\u80fd\u4ec5\u4ec5\u91cd\u5199\u4e00\u4e9bEPROM\u6765\u5c06\u8fd9\u4e2a\u6e38\u620f\u8f6c\u6362\u6210\u4e0d\u540c\u7684SystemC\u677f\uff1b\u6211\u5f97\u4ece\u4e16\u5609\u516c\u53f8\u4e70\u4e00\u5957\u5b98\u65b9\u88c5\u5907\u3002\uff08\u65e0\u8bba\u5982\u4f55\uff0c\u5bf9\u4ed6\u4eec\u6765\u8bf4\u90fd\u662f\u7406\u60f3\u7684\u9009\u62e9\uff09\n\u5b9e\u9645\u4e0a\uff0c\u6700\u5927\u7684\u89c6\u89c9\u5dee\u5f02\u4f3c\u4e4e\u6765\u81ea15\u4f4d\u989c\u8272\u7684\u4f7f\u7528\uff0c\u800c\u4e0d\u662f9\u4f4dRGB\u989c\u8272\u3002\u6bd4\u8f83Sega CD\u7248\u672c\u7684Columns\u4e0earcade System C\u7248\u672c\u7684\u5c4f\u5e55\u622a\u56fe\u3002\u7cfb\u7edfC\u4f7f\u7528\u4e86\u66f4\u5fae\u5999\u7684\u989c\u8272\u3002\uff08\u5f53\u7136\uff0c\u5728\u4e00\u4e2a\u4fdd\u8bc1\u62e5\u6709\u9ad8\u8d28\u91cfRGB arcade\u663e\u793a\u5668\u7684\u7cfb\u7edf\u4e0a\uff0c\u4e0e\u6a21\u7cca\u5c04\u9891\u8fde\u63a5\u76f8\u6bd4\uff0c\u8fd9\u4e5f\u6709\u6240\u5e2e\u52a9\uff09\n\u8be5\u62f1\u5eca\u7684\u7acb\u67f1\u622a\u56fe\u5b9e\u9645\u4e0a\u662f\u4f7f\u7528\u4e16\u5609\u571f\u661f\u4e0a\u7684\u7acb\u67f1\u62f1\u5eca\u7cfb\u5217\u62cd\u6444\u7684\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u7684System C\u6e38\u620f\u6ca1\u6709\u5728\u5bb6\u53d1\u5e03\u3002\u4e16\u5609\u571f\u661f\u5e94\u8be5\u80fd\u591f\u590d\u5236\u8fd9\u4e9b\u989c\u8272\uff0c\u6216\u8005\u81f3\u5c11\u6bd4\u300a\u521b\u4e16\u7eaa\u300b\u672c\u8eab\u66f4\u63a5\u8fd1\u3002\n\u5b8c\u7f8e\u662f\u5b9e\u73b0\u7684\uff0c\u4e0d\u662f\u5f53\u6ca1\u6709\u66f4\u591a\u7684\u4e1c\u897f\u53ef\u4ee5\u6dfb\u52a0\u65f6\uff0c\u800c\u662f\u5f53\u6ca1\u6709\u4ec0\u4e48\u4e1c\u897f\u53ef\u4ee5\u5e26\u8d70\u65f6\u3002-\u5b89\u6258\u4e07\u00b7\u5fb7\u5723\u57c3\u514b\u82cf\u4f69\u91cc\n\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u4e86System C\u5728\u5176Genesis\u57fa\u7840\u4e0a\u62e5\u6709\u7684\u989d\u5916\u82af\u7247\u3002\u7136\u800c\uff0c\u7535\u8def\u677f\u4e0a\u7f3a\u5c11\u4e86\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u4e1c\u897f\uff1aZilog Z80\u534f\u5904\u7406\u5668\u3002\u4e0d\uff0c\u5b83\u6ca1\u6709\u96c6\u6210\u5728VDP\u4e2d\uff0c\u5c31\u50cf\u540e\u6765\u7684Genesis\u6a21\u578b\u4e00\u6837\u3002\u5b83\u5b8c\u5168\u6d88\u5931\u5728\u8fd9\u91cc\u4e86\u3002\n\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u8981\u62c6\u4e0bZ80\uff1fZ80\u5b58\u5728\u7684\u7b2c\u4e00\u4e2a\u539f\u56e0\u662f\u9700\u8981\u5411\u540e\u517c\u5bb9\u3002\u4e16\u5609\u5f53\u7136\u4e0d\u9700\u8981\u5728\u5176\u62f1\u5eca\u677f\u4e0a\u8fd0\u884c\u4e3b\u7cfb\u7edf\u6e38\u620f\u3002\nZ80\u7684\u53e6\u4e00\u4e2a\u4f5c\u7528\u662f\u4f5c\u4e3a\u97f3\u9891\u534f\u5904\u7406\u5668\u3002\u5728\u8bb8\u591a\u6e38\u620f\u4e2d\uff0cZ80\u5904\u7406\u97f3\u9891\u8d44\u6e90\u3002\u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u90a3\u4e48\u660e\u786e\u3002\u901a\u8fc7\u7403\u8ff7\u4eec\u7684\u8f9b\u52e4\u52aa\u529b\uff0c\u6211\u4eec\u5df2\u7ecf\u4e3a\u4e00\u4e9b\u91cd\u8981\u7684\u521b\u4e16\u6e38\u620f\u89e3\u56f4\u3002\u6bd4\u8f83Sonic the Hedgehog 2\u548cSonic the Hedgehog\u7684Z80\u58f0\u97f3\u9a71\u52a8\u7a0b\u5e8f\u4ee3\u7801\u3002\u5373\u4f7f\u4f60\u4e00\u70b9\u4e5f\u4e0d\u61c2Z80 ASM\uff0c\u4f60\u4e5f\u4f1a\u53d1\u73b0Sonic 2 ASM\u8981\u957f\u5f97\u591a\u3002\u8fd9\u662f\u56e0\u4e3aSonic 1\u7684\u5927\u90e8\u5206\u58f0\u97f3\u9a71\u52a8\u7a0b\u5e8f\u90fd\u572868000 CPU\u4e0a\u8fd0\u884c\uff0c\u800cZ80\u53ea\u7528\u4e8e\u8f93\u5165\u7cbe\u786e\u8ba1\u65f6\u7684\u6837\u672c\u3002\uff08\u5f53\u7136\uff0c\u7cfb\u7edfC2\u4f1a\u6dfb\u52a0\u4e00\u4e2a\u4e13\u7528\u7684\u6837\u672c\u82af\u7247\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u8fd9\u6837\u505a\uff09\u4e0e\u6b64\u540c\u65f6\uff0cSonic 2\u786e\u5b9e\u66f4\u5145\u5206\u5730\u5229\u7528\u4e86Z80\uff0c\u4e3a\u6e38\u620f\u817e\u51fa\u4e8668k\u7684\u65f6\u95f4\u3002\n\u6709\u4e00\u6b3earcade\u7248\u7684Sonic the Hedgehog\uff0c\u4f46\u5b83\u6ca1\u6709\u4f7f\u7528\u7cfb\u7edfC\u6216C2\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u5b83\u4f7f\u7528\u4e86\u540e\u6765\u7684Mega Play\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u51e0\u4e4e\u4e0e\u4e16\u5609\u521b\u4e16\u7eaa\uff08Sega Genesis\uff09\u76f8\u540c\uff0c\u5305\u62ec\u4e24\u4e2aCPU\uff1b\u5b83&#39\uff1b\u5b83\u6700\u80fd\u4e0e\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u7684\u5bf9\u51b3\u76f8\u5ab2\u7f8e\u3002\u3002\nSystemC\u80fd\u591f\u6210\u529f\u7684\u53e6\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5b83\u62e5\u6709\u66f4\u5feb\u7684\u6469\u6258\u7f57\u62c968000\u3002\u5728Genesis\u4e0a\uff0c68k\u7684\u65f6\u949f\u9891\u7387\u4e3a7.67MHz\uff1b\u5728\u7cfb\u7edfC\u4e0a\uff0c\u9891\u7387\u589e\u52a0\u52308.95MHz\u3002\uff08\u6211\u5728\u8fd9\u91cc\u53ea\u4f7f\u7528NTSC\u6570\u5b57\uff09\u4e16\u5609\u590d\u53e4\u58f0\u79f0Genesis 68k\u6bcf\u79d2\u53ef\u4ee5\u6267\u884c1.34 MIPS\uff08\u6570\u767e\u4e07\u6761\u6307\u4ee4\uff09\uff1b\u5047\u8bbe\u5b83\u4e0e\u65f6\u949f\u901f\u5ea6\u6210\u7ebf\u6027\u6bd4\u4f8b\uff08\u5e94\u8be5\u662f\u8fd9\u6837\uff09\uff0c\u7cfb\u7edfC\u53ef\u4ee5\u5b9e\u73b01.56 MIPS\u3002\u8fd9\u5e76\u4e0d\u80fd\u5b8c\u5168\u8865\u507fZ80\u76840.52 MIPS Sega Retro\u5c5e\u6027\uff0c\u4f46\u5b83\u786e\u5b9e\u6d88\u9664\u4e86\u5904\u7406\u5668\u4e4b\u95f4\u901a\u4fe1\u7684\u5f00\u9500\u3002\u65e0\u8bba\u5982\u4f55\uff0cSystemC\u6e38\u620f\u5e76\u4e0d\u662f\u901f\u5ea6\u6076\u9b54\u3002\u4e16\u5609\u6709\u5176\u4ed6\u7684\u8463\u4e8b\u4f1a\u6765\u63a8\u52a8\u6280\u672f\u7684\u8fdb\u6b65\u3002\n\u5982\u679c\u4f60&#39\uff1b\u6211\u4eec\u60f3\u77e5\u9053\u7684\u662f\uff0cNeo Geo\u867d\u7136\u4e5f\u6709\u4e00\u4e2a\u6469\u6258\u7f57\u62c968000 CPU\u548c\u4e00\u4e2aZ80\uff0c\u4f46\u5b83\u6709\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u67b6\u6784\u3002Z80\u548c68000\u4e4b\u95f4\u6ca1\u6709\u5171\u4eabRAM\uff0c\u53ea\u6709Z80\u53ef\u4ee5\u8bbf\u95eeYM2610\u58f0\u97f3\u82af\u7247\u3002\u5982\u679c\u4f60\u60f3\u5728Neo Geo\u4e0a\u8fd0\u884c\u58f0\u97f3\uff0c\u4f60\u5fc5\u987b\u5728\u5b83\u81ea\u5df1\u7684ROM\u4e2d\u7f16\u5199\u4e00\u4e2a\u58f0\u97f3\u9a71\u52a8\u7a0b\u5e8f\uff0c\u800c\u4e14\u8fd9\u4e2a\u58f0\u97f3\u9a71\u52a8\u7a0b\u5e8f\u5fc5\u987b\u53ea\u5728Z80\u4e0a\u8fd0\u884c\u3002\n\u56e0\u6b64\uff0c\u300a\u521b\u4e16\u7eaa\u300b\u91c7\u7528\u4e86\u589e\u5f3a\u7684\u8272\u5f69\uff0c\u52a0\u901f\u7684CPU\uff0c\u4e00\u4e2a\u4e0e\u4ee5\u5f80\u7a0d\u6709\u4e0d\u540c\u7684\u58f0\u97f3\u82af\u7247\uff0c\u6ca1\u6709Z80\u3002\u8fd9\u4e00\u5207\u90fd\u5f88\u597d\uff0c\u4f46\u5b83\u8d77\u5230\u4e86\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\nSystem C\u7684\u9635\u5bb9\u4e2d\u6709\u4e00\u4e2a\u7c7b\u578b\u975e\u5e38\u91cd\uff1a\u4e0b\u843d\u65b9\u5757\u62fc\u56fe\u3002\u8fd9\u662f\u4e00\u4e2a\u6709\u67f1\u5b50\u7684\u7cfb\u7edf\uff0c\u6709Puyo Puyo\uff0c\u8fd8\u6709\u4e00\u4e9b\u4e0d\u592a\u4e3a\u4eba\u6240\u77e5\u7684\u67f1\u5b50\uff0c\u6bd4\u5982Poto Poto\u3002\u8fd9\u80af\u5b9a\u4e0d\u662f\u552f\u4e00\u53d1\u5e03\u7684\u6e38\u620f\u98ce\u683c\uff08\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u300a\u521b\u4e16\u7eaa\u300b\u5c04\u51fb\u6e38\u620f\u300a\u96f7\u9706\u529b\u91cfIII\u300b\u7684\u4e00\u4e2a\u7aef\u53e3Thunder Force AC\u4f7f\u7528\u4e86C2\u7cfb\u7edf\uff09\uff0c\u4f46\u4e3a\u4ec0\u4e48\u4e0d\u63a8\u51fa\u5f88\u591a\u9632\u5760\u65b9\u5757\u6e38\u620f\u5462\uff1fAlexey Pajnitov\u7684\u4fc4\u7f57\u65af\u65b9\u5757\u51e0\u4e4e\u662f\u6700\u63a5\u8fd1\u5b8c\u7f8e\u7684\u7535\u5b50\u6e38\u620f\u3002\n1988\u5e74\uff0c\u4e16\u5609\u5c06\u4fc4\u7f57\u65af\u65b9\u5757\u5e26\u5230\u4e86\u65e5\u672c\u7684\u5546\u573a\u3002\u4f46\u4fc4\u7f57\u65af\u65b9\u5757\u7684\u6743\u5229\u7edd\u5bf9\u662f\u4e00\u56e2\u7cdf\uff1b\u957f\u8bdd\u77ed\u8bf4\uff0cAtari Games\uff08Tengen\uff09\u8ba4\u4e3a\u81ea\u5df1\u62e5\u6709\u8857\u673a\u548c\u6e38\u620f\u673a\u7684\u6743\u5229\uff0c\u4e16\u5609\u5411\u4ed6\u4eec\u8d2d\u4e70\u4e86\u5728\u65e5\u672c\u5236\u4f5c\u8857\u673a\u7248\u672c\u7684\u8bb8\u53ef\u8bc1\u3002Atari\u7684\u6743\u5229\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5408\u6cd5\uff0c\u56e0\u6b64\u4ed6\u4eec\u7684NES\u7248\u672c\uff08\u4ee5\u53ca\u4e16\u5609\u8ba1\u5212\u7684Genesis\u7248\u672c\uff09\u88ab\u4ece\u8d27\u67b6\u4e0a\u64a4\u4e0b\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u9632\u5f39\u8f6f\u4ef6\uff0c\u540e\u8005\u5c06\u897f\u65b9\u6e38\u620f\u673a\u4e1a\u52a1\u8f6c\u7ed9\u4e86\u4efb\u5929\u5802\u3002\u4f46\u662f\u8857\u673a\u6e38\u620f\u7684\u6743\u5229\u88ab\u91cd\u65b0\u534f\u5546\uff0c\u56e0\u6b64\u96c5\u8fbe\u5229\u548c\u4e16\u5609\u80fd\u591f\u7ee7\u7eed\u5236\u4f5c\u8857\u673a\u6e38\u620f\uff0c\u76f4\u52301992\u5e74\uff0c\u96c5\u8fbe\u5229\u51b3\u5b9a\u505c\u6b62\u4ed8\u6b3e\uff0c\u724c\u724c\u5c4b\u5012\u584c\u3002\n\u603b\u4e4b\uff0c\u957f\u8bdd\u77ed\u8bf4\uff0c\u4e16\u5609\u53ef\u4ee5\u57281989\u5e74\u5728\u8857\u673a\u4e0a\u5236\u4f5c\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u3002\u5f53\u7136\uff0c\u4e0d\u9700\u8981\u7f29\u653e\u6216\u534e\u4e3d\u7684\u7cbe\u7075\uff0c\u8fd9\u662f\u4ed6\u4eec\u65b0\u7684\u4f4e\u7aef\u786c\u4ef6\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u4f7f\u7528\u6848\u4f8b\u3002\u4f46\u8857\u673a\u884c\u4e1a\u9760\u65b0\u5947\u800c\u84ec\u52c3\u53d1\u5c55\uff0c\u4fc4\u7f57\u65af\u65b9\u5757\u57281988\u5e7412\u6708\u4e5f\u662f\u5982\u6b64\u3002\u5982\u4f55\u8ba9\u4fc4\u7f57\u65af\u65b9\u5757\u4fdd\u6301\u65b0\u9c9c\u611f\uff1f\nBloxed\u6700\u521d\u662f\u4e3a\u4e16\u5609&#39\u53d1\u5e03\u7684\uff1b\u66f4\u5f3a\u5927\u7684System 18\u786c\u4ef6\u3002\u8fd9\u4e2a\u7248\u672c\u53ea\u5728\u65e5\u672c\u63a8\u51fa\uff0c\u800c\u6211\u8fd9\u91cc\u7684\u897f\u65b9\u7248\u672c\u603b\u662f\u5728\u7cfb\u7edfC\u4e0a\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u6807\u9898\u5c4f\u5e55\u4e0a\u4e16\u5609\u6807\u5fd7\u7684\u4f4d\u7f6e\u6765\u533a\u5206\u7248\u672c\u3002\uff08\u4f7f\u7528MAME\u6a21\u62df\u5668\u62cd\u6444\u7684\u7167\u7247\uff09\n\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0cBloxed\u53ea\u662f\u4fc4\u7f57\u65af\u65b9\u5757\uff0c\u4e0a\u9762\u7c98\u4e86\u4e00\u4e9b\u989d\u5916\u7684\u4e1c\u897f\u3002\u5b83\u9075\u5faa\u4e86\u4e16\u56091988\u5e74\u7684\u8857\u673a\u4fc4\u7f57\u65af\u65b9\u5757\u8bbe\u5b9a\u7684\u6807\u51c6\u884c\u4e3a\uff0c\u5305\u62ec\u5c06\u5404\u79cd\u6570\u7801\u7167\u7247\u4f5c\u4e3a\u6e38\u620f\u80cc\u666f\u3002tetrominos\u662f\u4e00\u6837\u7684\uff0c\u76ee\u7684\u662f\u83b7\u5f97\u7ebf\u6761\u3002\nBloxed\u548c\u4fc4\u7f57\u65af\u65b9\u5757\u6709\u51e0\u4e2a\u4e3b\u8981\u533a\u522b\u3002\u9996\u5148\uff0cBloxed\u4e3a\u8857\u673a\u5f15\u5165\u4e86\u771f\u6b63\u7684\u591a\u4eba\u6e38\u620f\u3002\u8fd9\u5728\u5176\u4ed6\u7248\u672c\u4e2d\u5df2\u7ecf\u505a\u8fc7\uff0c\u4f46Bloxed\u7684\u7edd\u5bf9\u6709\u5f71\u54cd\u529b\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21\u6e05\u9664\u591a\u6761\u7ebf\u5411\u5bf9\u624b\u53d1\u9001\u5783\u573e\u3002\uff08\u6211\u4e0d\u786e\u5b9a\u662fBloxed\u8fd8\u662f\u4efb\u5929\u5802\u7684Game Boy\u7248\u4fc4\u7f57\u65af\u65b9\u5757\u6700\u5148\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff09\n\u5783\u573e\u5728Bloxed\u4e2d\u662f\u4e00\u4e2a\u6301\u7eed\u7684\u5a01\u80c1\uff0c\u8fd9\u5728\u5176\u4ed6\u7248\u672c\u7684\u4fc4\u7f57\u65af\u65b9\u5757\u4e2d\u662f\u6ca1\u6709\u7684\u3002\u5728\u6bcf\u4e2a\u73a9\u5bb6\u7684\u4e00\u4fa7\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4e94\u76cf\u706f\u3002\u8fd9\u4e9b\u662f\u8ba1\u65f6\u5668\uff1b\u5f53\u4ed6\u4eec\u5403\u9971\u65f6\uff0c\u73a9\u5bb6\u6389\u843d\u7684\u4e0b\u4e00\u5757\u6ca1\u6709\u5b8c\u6210\u4e00\u884c\u7684\u68cb\u5b50\u5c06\u5bfc\u81f4\u73a9\u5bb6\u5f97\u5230\u4e00\u884c\u5783\u573e\u6dfb\u52a0\u5230\u4ed6\u4eec\u4e00\u4fa7\u7684\u5e95\u90e8\u3002\u5728\u7ecf\u5178\u7684\u8857\u673a\u98ce\u683c\u4e2d\uff0c\u8fd9\u53ef\u4ee5\u8ba9\u6e38\u620f\u5feb\u901f\u8fdb\u884c\u3002\u4f46\u8fd9\u6b3e\u6e38\u620f\u786e\u5b9e\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e9b\u8ba9\u80dc\u7b97\u5747\u7b49\u7684\u529f\u80fd\uff1a\u7535\u6e90\u5757\u3002\n\u8fd9\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u74f7\u7816\uff0c\u53ef\u4ee5\u4ee3\u66ff\u63d0\u7279\u7f57\u7c73\u8bfa\u7684\u56db\u4e2a\u7ec4\u6210\u90e8\u5206\u4e4b\u4e00\u3002\u5f53\u4e00\u6761\u7ebf\u88ab\u6e05\u9664\u65f6\uff0c\u8fd9\u4e9b\u90fd\u4f1a\u4ea7\u751f\u5f71\u54cd\u3002\u4ece\u6467\u6bc1\u5468\u56f4\u8857\u533a\u7684\u70b8\u5f39\u201cB\u201d\u5230\u6e05\u9664\u591a\u8fbe\u56db\u884c\u968f\u673a\u9009\u62e9\u7684\u884c\u7684\u201c4\u201d\uff0c\u518d\u5230\u66f4\u6709\u8da3\u7684\u884c\u3002\u4f8b\u5982\uff0c\u201cS\u201d\u4ea7\u751f\u4e00\u9897\u536b\u661f\uff0c\u4f60\u53ef\u4ee5\u5728\u5b83\u4e0b\u964d\u65f6\u5236\u9020\u536b\u661f\u5e76\u53d1\u5c04\u6fc0\u5149\u3002\n\u201c16\u201d\u7684\u91cd\u91cf\u4e3a16\u5428\u3002\u5f53\u843d\u5728\u64cd\u573a\u4e0a\u65f6\uff0c\u5b83\u4f1a\u5b8c\u5168\u538b\u788e\u4e09\u6761\u5782\u76f4\u7ebf\uff0c\u5728\u64cd\u573a\u4e0a\u7559\u4e0b\u4e00\u4e2a\u5927\u6d1e\uff0c\u53ef\u4ee5\u5e2e\u52a9\u4f60\u6446\u8131\u68d8\u624b\u7684\u5c40\u9762\u3002\n\u201cF\u201d\u53ec\u5524\u6211\u4eec\u7684\u597d\u670b\u53cbFlicky\uff0cFlicky\u7684\u4e3b\u89d2\u3002\u5728\u8fd9\u4e2a\u65f6\u5019\uff0cFlicky\u80af\u5b9a\u8fd8\u662f\u4e16\u5609\u7684\u5409\u7965\u7269\uff1b\u5728\u8fd9\u91cc\uff0c\u5979\u5728\u4f60\u60f3\u53bb\u7684\u4efb\u4f55\u5730\u65b9\uff0c\u5728\u536b\u661f\u7684\u5bf9\u9762\uff0c\u6295\u4e0b\u4e00\u4e2a\u8857\u533a\u3002\u8fd9\u4e9b\u79ef\u6728\u53ef\u4ee5\u6e05\u9664\u7ebf\u6761\uff0c\u6240\u4ee5\u5979\u7edd\u5bf9\u6709\u7528\u3002\n\u6240\u4ee5Bloxed\u786e\u5b9e\u4e3a\u4fc4\u7f57\u65af\u65b9\u5757\u6dfb\u52a0\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u5143\u7d20\uff0c\u800c\u4e14\u53ef\u4ee5\u8bf4\uff0c\u989d\u5916\u7684\u5783\u573e\u548c\u7535\u6e90\u5757\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u76f8\u4e92\u62b5\u6d88\u4e86\uff1b\u62e5\u6709\u989d\u5916\u7684\u5de5\u5177\u4f1a\u8ba9\u66f4\u5177\u653b\u51fb\u6027\u7684\u5143\u7d20\u770b\u8d77\u6765\u4e0d\u90a3\u4e48\u4e0d\u516c\u5e73\uff0c\u5373\u4f7f\u6574\u4e2a\u6e38\u620f\u73b0\u5728\u53d8\u5f97\u66f4\u52a0\u968f\u673a\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4fc4\u7f57\u65af\u65b9\u5757\u662f\u4e00\u4e2a\u5f88\u96be\u6539\u8fdb\u7684\u6e38\u620f\u3002\u540e\u6765\u7684\u4fc4\u7f57\u65af\u65b9\u5757\u6e38\u620f\u4e5f\u4f1a\u6709\u7c7b\u4f3c\u7684\u57fa\u4e8e\u5783\u573e\u7684\u591a\u4eba\u6e38\u620f\uff0c\u4f46\u4f1a\u5220\u9664Bloxed\u7684\u5176\u4ed6\u521b\u65b0\u3002\u5c31\u50cf\u804c\u4e1a\u73a9\u5bb6\u5728Super Smash Bros\u4e2d\u5173\u95ed\u9053\u5177\u4e00\u6837\uff0c\u6211\u6000\u7591\u4fc4\u7f57\u65af\u65b9\u5757\u7231\u597d\u8005\u4e5f\u66f4\u559c\u6b22\u6ca1\u6709\u9053\u5177\u7684\u6e38\u620f\u3002\n\u5728\u300a\u6cf0\u8fea\u7537\u5b69\u84dd\u8c03\u300b\u7684\u540e\u7eed\u6587\u7ae0\u4e2d\uff0c\u6211\u63d0\u5230\u4e861992\u5e74\u4e00\u6b3e\u540d\u4e3aSegaSonic Bros\u7684\u672a\u53d1\u5e03\u6e38\u620f\u3002\u3002\u8fd9\u662f\u4e00\u6b3e\u4e0b\u843d\u65b9\u5757\u76ca\u667a\u6e38\u620f\uff0c\u5982\u679c\u4f60\u542c\u8bf4\u5b83\u4f1a\u5728\u7cfb\u7edfC2\u786c\u4ef6\u4e0a\u8fd0\u884c\uff0c\u4f60\u53ef\u80fd\u4e0d\u4f1a\u611f\u5230\u60ca\u8bb6\u3002\n\u7531\u4e8e\u4e16\u5609\uff08Sega\uff09\u548c\u963f\u7279\u62c9\u65af\uff08Atlus\uff09\u7684\u6253\u5370\u4ff1\u4e50\u90e8\uff08Print Club\uff09\u7cfb\u5217\u8857\u673a\u6444\u5f71\u68da\uff0cSystem C\u8f6f\u4ef6\u5b9e\u9645\u4e0a\u5df2\u7ecf\u6210\u529f\u5730\u5b58\u6d3b\u5230\u4e8620\u4e16\u7eaa90\u5e74\u4ee3\u540e\u534a\u671f\u3002\u8fd9\u4e9b\u4ea7\u54c1\u5728\u5168\u7403\u8303\u56f4\u5185\u9500\u552e\uff0c\u65e8\u5728\u8ba9\u4f60\u62cd\u7167\uff0c\u7136\u540e\u6253\u5370\u51fa\u5e26\u6709\u7167\u7247\u548c\u5404\u79cd\u989d\u5916\u56fe\u5f62\u7684\u8d34\u7eb8\uff0c\u51e0\u4e4e\u5c31\u50cf\u5e26\u6709\u795e\u5947\u5546\u5e97\u5468\u8fb9\u8bbe\u5907\u7684\u8857\u673a\u7248\u5361\u897f\u6b27Loopy\u3002\u4ed6\u4eec\u4f1a\u5347\u7ea7\u5230\u4e16\u5609ST-V\u4f5c\u4e3a\u540e\u7eed\u7248\u672c\uff0c\u8fd9\u5c31\u662fC\u7cfb\u7edf\u7684\u7ed3\u675f\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5c0f\u578b\u4f4e\u7aef\u7535\u8def\u677f\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u8fd0\u884c\u3002\n\u7cfb\u7edf16\u7684\u4f20\u5355\uff0c\u4e3a\u4e86\u5408\u7406\u4f7f\u7528\u800c\u7f29\u5c0f\uff0c\u4f60\u53ef\u4ee5\u5728\u90a3\u91cc\u770b\u5230\u5b8c\u6574\u7684\u5c3a\u5bf8", "note_en": "There\u2019s a concept called the \u201cUncanny Valley\u201d; when a human looks at a cartoonish face, they\u2019ll generally recognize it as a person. When they\u2019re presented with a photorealistic face, they\u2019ll similarly recognize it. But when presented with an image that is highly realistic but just a bit \u201coff\u201d, the human will tend to find it repulsive or disturbing. Today, we\u2019ll take a look at yet another Sega arcade board: one that would trigger an \u201cuncanny valley\u201d reaction in a Sega Genesis, if you gave it a human brain.\n  A great thing about having a lot of posts is that I can link back to them easily. However, since my fancy tends to wander around uncontrollably, they end up a bit out of order. Such is the case here. One of my first posts in this arcade obsession was the  Sammy Atomiswave.\n  An interesting thing about the Atomiswave is that it was, essentially, a Sega Dreamcast that took cartridges instead of GD-ROMs. Unlike the Sega NAOMI, it shared identical specs with the consumer machine, despite coming out after the Dreamcast\u2019s 2001 discontinuation.\n  I also talked about the  Sega ST-V. This was also a Sega arcade board that used cartridges, which was based off of consumer hardware that used optical discs. In this case, it was based off of the 32-bit Saturn console.\n   The  System 1, which I have covered  relentlessly, basically reached the end of its life in 1986. Its last title, Vic Tokai\u2019s 1987   Block Gal, took Sega\u2019s former flagship hardware and used it solely as a vehicle for uncovering some pictures of cute girls. There\u2019s nothing wrong with pictures of cute girls, of course. But it was time for something new.\n  The System 2, a System 1 with a superior scrolling tilemap, lasted a few more years, and Vic Tokai never got their hands on it. But by 1988, when its last game,  UFO Senshi Youko Chan, was released, there was a problem. See, in 1988, Sega also released their 16-bit Mega Drive console in Japan; and pretty much the only thing the System 2 has over the Mega Drive is the number of possible simultaneous on-screen colors. Plus, the System 2 was poorly suited to a low-end arcade board, with its large daughterboard and huge amount of  discrete logic.\n  Behold, the solution to those problems: the System C. It\u2019s an adorable little board; and like the Sega System 1 before it, these are single-game boards, without any interchangeable cartridges. Compare it to the System 1 (in this case, the  Teddy Boy Blues bootleg), and you can see that it really is a quite small. Plus Sega gave it a JAMMA edge connector this time! I know the System 1 predated the standard so I can\u2019t blame them, but standards are nice.\n  This is made possible by sharing the same VDP (Video Display Processor) that powers the Sega Genesis. Here, it\u2019s labeled Sega 315-5313 (you might also see it referred to as Yamaha YM7101), and judging by the photos on the  Mega Drive Development Wiki, it\u2019s an early revision. That fits; this board is dated 1989, which is definitely early for the Mega Drive.\n  The 315-5313 is a truly integrated circuit; it doesn\u2019t just contain the video processor, but also a \u201cSega PSG\u201d, a clone of the 4-channel TI SN76489 found essentially all over the machines of the 1980\u2019s. If they had wanted to, Sega could\u2019ve paired this with just a CPU and called it a day;  Atari probably would have. Thankfully, they instead paired it with a Yamaha FM synthesizer. On the Genesis model 1, this was the Yamaha YM2612.\n  This is where the \u201cuncanny valley\u201d starts to set in. The System C board uses a Yamaha YM3438. Despite the differing number, this is just a CMOS variant of the YM2612; comparable to perhaps the MOS 6502 vs. the  WDC 65C02. A different chip manufacturing process, some minor incompatibilities (in this case, this includes the audio output impedance), but if you\u2019re not doing anything too weird switching between them shouldn\u2019t be too difficult. In fact, later Genesis models included a core based off the YM3438, but only as part of wider integrated circuits that also included the VDP.\n So it\u2019s not exactly wrong. Just a little weird if you\u2019re used to the Genesis.\n  This board is a \u201cSystem C\u201d board, as I\u2019ve noted. But most games released for this platform were \u201cSystem C2\u201d. What\u2019s the difference? An NEC uPD7759 ADPCM sample playback chip, which has its own ROM. This is a fairly nice upgrade, and high quality voices in arcade games were still a novelty at the time. Interestingly, though, even though this 1989 board predates the first System C2 games in 1990, it already has space on the board, so this upgrade was clearly planned from early on.\n   Some more fun sets in when we look at the odd potted circuitboard masquerading as a chip, the Sega 315-5242. What does this do?\n  It turns out that this part has a long history in Sega boards, it\u2019s generally referred to as a \u201ccolor encoder\u201d. And what it does here, we\u2019ll have to look back at the Genesis. The Sega Genesis was an excellent console capable of amazing things, but even the most hardcore dithering afficionado will agree that its Achilles\u2019 heel was the color palette.\n  The Genesis VDP has 64 internal 9-bit words for 64 RGB colors. These are divided into four 16-color palettes, the first color of which is transparent, so in reality, the Genesis can only have 61 colors on screen. (Shadow and highlight modes, plus timing tricks can improve this) By comparison, the  PC Engine\u2019s Video Color Encoder (VCE) has internal palette RAM with room for 512 9-bit words.\n The 315-5242 is used to bypass the internal color encoder and the internal palette RAM of the Genesis VDP. Instead, it has its own color RAM of 4 banks of 1024 bytes. It uses 15-bit colors in 16-bit words, so 512 simultaneous colors, 32 simultaneous 16-color palettes. And as noted, the 315-5242 color encoder was used on many Sega arcade boards, so this was a fairly straightforward way to shine up the consumer-spec VDP for the System C.\n The analog video outputs are not used on the Genesis VDP, and instead an 8-bit \u201ccolor bus\u201d is used to send each pixel to the color encoder circuit. This bus provides the 4-bit palette index of the current pixel, 2 palette select bits (for the usual four Genesis palettes), a bit to indictate whether the shadow or highlight effect is being used (but not which one), and a bit to indicate sprites or backgrounds. (Source: Charles MacDonald\u2019s  System C2 hardware notes) Because this only allows for 256 possible colors, and fewer when you consider that the shadow/highlight are not well-defined on this bus, the additional bits are controlled by the Sega 317-xxxx game-specific protection chip.\n  This chip is actually an Altera EPM5032 FPGA, which is what allows it to be swapped out for each game. FPGAs are not new technology, though this one is definitely too small to run a MiSTer core. Using a different FPGA for each game means that I can\u2019t just rewrite some EPROMs to convert this game to a different System C board; I\u2019d have to buy an official kit from Sega. (Well, ideally for them anyway)\n In practice, the biggest visual differences seem to be from the use of 15-bit color rather than 9-bit RGB color. Compare the screenshots of the Sega CD version of  Columns with the arcade System C release. The System C used much subtler colors. (Of course, being on a system where you were guaranteed to have a high quality RGB arcade monitor, vs. a fuzzy RF connection, also helped)\n   The screenshots of  Columns for the arcade were actually taken using  Columns Arcade Collection on the Sega Saturn. This is because the System C game I do have did not get a home release. The Sega Saturn should be capable of replicating the colors, or at least much closer than the Genesis can on its own.\n  Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away. \u2014 Antoine de Saint-Exup\u00e9ry\n We\u2019ve talked about extra chips that the System C has over its Genesis base. However, there is something quite notable missing from the circuitboard: the Zilog Z80 coprocessor. And no, it\u2019s not integrated in the VDP, as it would be on later Genesis models. It\u2019s gone entirely here.\n Why would they remove the Z80? Well, the first reason the Z80 is there is because of the need for backwards compatibility. Sega of course had no need to run Master System games on its arcade boards.\n The other role the Z80 plays is as an audio co-processor. In many games, the Z80 handles audio resources. But this isn\u2019t always so clear-cut. We have, through the painstaking efforts of fans, disassemblies for some major Genesis games. Compare the Z80 sound driver code of   Sonic the Hedgehog 2 and that of   Sonic the Hedgehog. Even if you don\u2019t understand a bit of Z80 ASM, you\u2019ll see that the Sonic 2 one is much longer. That\u2019s because most of Sonic 1\u2019s sound driver runs on the 68000 CPU, with the Z80 only used for feeding in samples with exact timing. (And of course, the System C2 would add a dedicated sample chip, so no need for that) Sonic 2, meanwhile, does make much greater use of the Z80, freeing more 68k time for the game.\n There was an arcade variant release of  Sonic the Hedgehog, but it did not use the System C or the C2. Instead, it used the later Mega-Play system, which was nearly identical to the Sega Genesis, including both CPUs; it&#39;s most comparable to something like  Vs. Super Mario Bros..\n The other reason the System C can get away with this is because it has a faster Motorola 68000. On the Genesis the 68k is clocked at 7.67MHz; on the System C, that is increased to 8.95MHz. (I\u2019m going to only use NTSC numbers here)  Sega Retro claims the Genesis 68k can do 1.34 MIPS (millions of instructions per second); assuming that scales linearly with clock speed (and it should), the System C can do 1.56 MIPS. This doesn\u2019t wholly compensate for the 0.52 MIPS Sega Retro attributes to the Z80, but it does remove the overhead of needing to communicate between processors. In any case, the System C games didn\u2019t tend to be speed demons. Sega had other boards to push the edge of technology.\n In case you&#39;re wondering, the Neo Geo, while it also had a Motorola 68000 CPU and a Z80, had a very different architecture. No RAM is shared between the Z80 and the 68000, and only the Z80 can access the YM2610 sound chip. If you want sound on the Neo Geo, you must  write a sound driver in its own ROM, and that sound driver must only run on the Z80.\n  So, a Genesis with souped-up colors, a sped-up CPU, an ever-so-slightly different sound chip, and no Z80. That\u2019s all well and good, but what does it play?\n The System C\u2019s lineup is very heavy on one genre: falling-block puzzles. This is the system with  Columns, with  Puyo Puyo, and with lesser-known ones like  Poto Poto. These definitely aren\u2019t the only style of games that were released (notably,  Thunder Force AC, a port of the Genesis shooter  Thunder Force III, used the System C2) But why not have a lot of falling block games? Alexey Pajnitov\u2019s  Tetris is practically the closest thing to a perfect video game.\n Sega brought  Tetris to the Japanese arcades in 1988. But the  Tetris rights are an absolute mess; long story short, Atari Games (Tengen) believed it had the arcade and console rights, and Sega bought a license from them to make an arcade version in Japan. Atari\u2019s rights were not actually legitimate, and so their NES release (and Sega\u2019s planned Genesis release) were pulled from shelves in favor of Bullet-Proof Software, who sublicensed the western console business to Nintendo. But the arcade rights were renegotiated, and so Atari and Sega were able to keep making arcade games until 1992, when Atari decided to stop paying and the licensing house of cards collapsed.\n  Anyway, long story short, Sega could make  Tetris games in the arcade in 1989. And of course, without the need for scaling or flashy sprites, it was a good use-case for their new low-end hardware. But the arcade business thrives on novelty, and  Tetris was  so December 1988. How to make  Tetris novel to keep the quarters flowing?\n  Bloxeed was originally released for Sega&#39;s more-powerful System 18 hardware. This version only came out in Japan, whereas the western version I have here is always on System C. You can distinguish the versions by the location of the Sega logo on the title screen. (Photo taken using the MAME emulator)\n Bloxeed is, in a sense, just  Tetris with some extra bits glued on. It follows the standard behaviors set about by Sega\u2019s 1988 arcade  Tetris, including having various digitzed photos as the backgrounds for the gameplay. The tetrominos are the same, along with the goal of getting lines.\n  There are a few main differences between  Bloxeed and  Tetris. For one things,  Bloxeed introduces true multiplayer to the arcade. This had already been done before in other releases, but  Bloxeed\u2019s was definitely influential, with the capability of sending garbage to your opponent by clearing multiple lines at once. (I\u2019m not sure whether  Bloxeed or Nintendo\u2019s Game Boy release of  Tetris did this first)\n Garbage is a constant threat in  Bloxeed in a way it isn\u2019t in other versions of  Tetris. On each player\u2019s side, you see five lights. These are a timer; when they are full, the next piece the player drops that doesn\u2019t complete a line will result in the player getting a line of garbage added to the bottom of their side. In classic arcade style, this keeps the gameplay moving fast. But the game does give you some features to even the odds: Power Blocks.\n  These are special tiles that replace one of the four components of a tetromino. When a line is cleared, these have an effect. These range from \u201cB\u201d, a bomb that destroys blocks around it, \u201c4\u201d, which clears up to four randomly-selected rows, to more interesting ones. For example, \u201cS\u201d spawns a satellite, which you can manuever and fire lasers from as it falls downwards.\n  \u201c16\u201d creates a 16-ton weight. When dropped on the playfield, it crushes three vertical lines entirely, leaving a large hole in the playfield that can help you get out of tricky situations.\n  And \u201cF\u201d summons our good friend Flicky, the protagonist of  Flicky. Flicky was definitely still a Sega mascot of sorts at this time; here, she drops single blocks onto the field wherever you wish, the opposite of the satellite. These blocks can clear lines, so she\u2019s definitely useful.\n  So  Bloxeed does add some fun elements to  Tetris, and arguably, the extra garbage and the power blocks cancel out in a way; having extra tools makes the more aggressive elements seem less unfair, even if the whole game is now much more random. On the other hand,  Tetris is a hard game to improve. Later  Tetris games would have similar garbage-based multiplayer, but would remove the other innovations of  Bloxeed. Like how professional players turn off the items in  Super Smash Bros., I suspect  Tetris afficionados prefer their game without them too.\n  In the  follow-up article to  Teddy Boy Blues, I mentioned an unreleased 1992 game called  SegaSonic Bros.. A falling block puzzle game, it probably won\u2019t surprise you to hear that it would have run on the System C2 hardware.\n  The System C software actually managed to live into the latter half of the 1990s thanks to Sega and Atlus\u2019  Print Club series of arcade photo booths. These were sold world-wide, and were designed to let you take photos, and then print out stickers with the resulting photo and various extra graphics, almost like an arcade version of the  Casio Loopy with its   Magical Shop peripheral. They\u2019d upgrade to the  Sega ST-V for the follow-up, and that was the end of the System C. Not a bad run for a little low-end board.\n  Flyer from  System 16, shrunk down for fair use purposes, you can see the full size there", "posttime": "2022-02-15 00:08:46", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d77\u6e90,world,\u6e38\u620f", "title": "\u6765\u81ea\u53e6\u4e00\u4e2a\u4e16\u754c\u7684\u8d77\u6e90\uff1a\u4e16\u5609\u7cfb\u7edfC", "title_en": "Genesis from Another World: The Sega System C", "transed": 1, "url": "https://nicole.express/2022/system-system-c-system-c-c-system.html", "via": "", "real_tags": ["\u8d77\u6e90", "world", "\u6e38\u620f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073190, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f53\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u8f6f\u4ef6\u6216\u4e00\u4e2a\u65b0\u7684\u4f53\u7cfb\u7ed3\u6784\u65f6\uff0c\u4e00\u4e2a\u5e38\u89c1\u7684\u505a\u6cd5\u5c31\u662f\u6211\u6240\u8bf4\u7684\u8bbe\u8ba1\u4e0a\u7684\u6d6a\u8d39\u3002\u901a\u5e38\uff0c\u95ee\u9898\u4e0d\u518d\u662f\u5982\u4f55\u4f7f\u7528\u6280\u672f\u6765\u89e3\u51b3\u7279\u5b9a\u95ee\u9898\uff0c\u800c\u662f\u5982\u4f55\u5728\u6ca1\u6709\u771f\u6b63\u8003\u8651\u7279\u5b9a\u9700\u6c42\u6216\u5b9e\u9645\u9700\u6c42\u7684\u60c5\u51b5\u4e0b\u5c06\u6280\u672f\u786c\u585e\u8fdb\u95ee\u9898\u4e2d\u3002\n\u5f53\u9884\u6d4b\u7684\u53ef\u4f38\u7f29\u6027\u9700\u6c42\u8fc7\u4e8e\u4e50\u89c2\uff0c\u4f46\u8bbe\u8ba1\u4e0a\u7684\u6d6a\u8d39\u4e0e\u6b64\u4e1a\u52a1\u73b0\u5b9e\u65e0\u5173\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1b\u5b83\u662f\u5173\u4e8e\u4e3a\u4e00\u7ec4\u9700\u6c42\u6216\u6570\u5b57\u8bbe\u8ba1\u4e00\u4e2a\u7cfb\u7edf\uff0c\u800c\u4e0d\u8003\u8651\u9700\u8981\u6784\u5efa\u4ec0\u4e48\u3002\n\u90a3\u662f\u4e00\u6392\u6392\u95ea\u95ea\u53d1\u5149\u7684\u7535\u5668\uff1b\u7136\u540e\u662f\u592a\u591a\u7684\u865a\u62df\u673a\uff0c\u5b83\u662f\u201c\u5f39\u6027\u8ba1\u7b97\u201d\uff0c\u7136\u540e\u662f\u5bb9\u5668\uff0c\u7136\u540e\u662fKubernetes\uff0c\u73b0\u5728\u662f\u65e0\u670d\u52a1\u5668\u3002\u6bcf\u51fa\u73b0\u4e00\u79cd\u8d8b\u52bf\uff0c\u5b9e\u7528\u4e3b\u4e49\u5c31\u4f1a\u6d88\u5931\u5728\u5927\u91cf\u79d1\u6280\u503a\u52a1\u4e2d\u3002\n\u5148\u662fSQL\u6570\u636e\u5e93\uff0c\u7136\u540e\u662fNoSQL\uff0c\u7136\u540e\u662f\u65e0\u670d\u52a1\u5668\u6570\u636e\u5e93\u3002\u901a\u5e38\u4e0d\u6e05\u695a\u8ba8\u8bba\u7684\u662f\u4ec0\u4e48\uff0c\u67e5\u8be2\u8bed\u8a00\u3001\u6570\u636e\u5e93\u5f15\u64ce\u3001\u590d\u5236\u6280\u672f\u3001\u5b58\u50a8\u6a21\u5f0f\u8fd8\u662f\u8425\u9500\u672f\u8bed\uff1f\n\u8fd9\u79cd\u56f0\u60d1\u5bfc\u81f4\u4e86\u65e0\u671b\u7684\u9009\u62e9\uff0c\u800c\u8fd9\u5f80\u5f80\u4e0d\u9002\u5408\u9886\u57df\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u770b\u5230MongoDB\u88ab\u7528\u6765\u5f00\u53d1\u94f6\u884c\u8f6f\u4ef6\uff0cKubernetes\u88ab\u7528\u6765\u90e8\u7f72\u9759\u6001\u7f51\u7ad9\uff0cHadoop\u88ab\u7528\u6765\u5904\u7406excel\u89c4\u6a21\u7684\u6570\u636e\u7684\u65b9\u5f0f\u3002\n\u901a\u5e38\uff0c\u5f53\u544a\u8bc9\u67d0\u4eba\u67d0\u9879\u6280\u672f\u9009\u62e9\u6700\u7ec8\u6709\u591a\u4e48\u8352\u8c2c\u65f6\uff0c\u4eba\u4eec\u4f1a\u63d0\u51fa\u8bb8\u591a\u501f\u53e3\u3002\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9\u6700\u521d\u7684\u9886\u57df\u95ee\u9898\u88ab\u5938\u5927\u5230\u8352\u8c2c\u7684\u7a0b\u5ea6\uff0c\u4ee5\u4fbf\u8ba9\u4e00\u4e9b\u52a1\u5b9e\u7684\u4eba\u770b\u5230\u5b83\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u662f\u8bf4\u8981\u5b9e\u9645\uff0c\u800c\u662f\u8981\u8868\u73b0\u4e3a\u4e00\u4e2a\u62e5\u6709\u6df1\u539a\u9886\u57df\u4e13\u4e1a\u77e5\u8bc6\u7684\u4eba\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u5c06\u6279\u8bc4\u63cf\u8ff0\u4e3a\u7f3a\u4e4f\u4e13\u4e1a\u77e5\u8bc6\u6216\u5bf9\u624b\u5934\u95ee\u9898\u7684\u7406\u89e3\u800c\u5728\u6700\u521d\u7684\u9009\u62e9\u4e0a\u7a81\u51fa\u3002\n\u5f53\u4e00\u4e2a\u5de5\u7a0b\u5e08\u8868\u73b0\u51fa\u5b9e\u7528\u4e3b\u4e49\u65f6\uff0c\u4ed6\u73b0\u5728\u662f\u4e00\u4e2a\u60b2\u89c2\u4e3b\u4e49\u8005\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u7f3a\u4e4f\u9009\u62e9\u201c\u6b63\u786e\u201d\u89e3\u51b3\u65b9\u6848\u7684\u80fd\u529b\u7684\u4eba\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u8fd9\u79cd\u601d\u8def\u5bfc\u81f4\u4e86\u57fa\u4e8e\u65f6\u5c1a\u7684\u8bbe\u8ba1\uff0c\u800c\u6700\u540e\u4e00\u79cd\u8d8b\u52bf\u662f\u6b63\u786e\u7684\u5de5\u7a0b\u9009\u62e9\u3002\n\u73b0\u5b9e\u4e16\u754c\u4e2d\u6709\u5f88\u591a\u4f8b\u5b50\uff0c\u6bd4\u5982\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6700\u65b0\u7684\u7ed3\u6784\u6bd4\u65e7\u7684\u597d\uff0c\u4ee5\u53ca\u6846\u67b6\u4e2d\u6700\u65b0\u7684\u8bbe\u8ba1\u6a21\u5f0f\u5fc5\u987b\u53d6\u4ee3\u4ee5\u524d\u7684\u7ed3\u6784\uff0c\u90e8\u7f72\u89e3\u51b3\u65b9\u6848\u4e2d\u6700\u65b0\u7684\u4e0e\u6700\u597d\u7684\u4e00\u81f4\u3002\n\u5f53\u67d0\u4ef6\u4e8b\u53d8\u5f97\u592a\u51fa\u540d\u6216\u592a\u7a81\u51fa\u65f6\uff0c\u5373\u4f7f\u4ee5\u524d\u88ab\u8ba4\u4e3a\u662f\u6700\u5148\u8fdb\u7684\uff0c\u73b0\u5728\u4e5f\u5e94\u8be5\u907f\u514d\u8fd9\u79cd\u7c97\u4fd7\u3002\n\u56e0\u4e3a\u4eba\u4eec\u53ef\u80fd\u4f1a\u66f4\u65e9\u5730\u5b9e\u73b0\u7b80\u5355\u7684\u6982\u5ff5\uff0c\u6240\u4ee5\u8fd9\u4e9b\u6982\u5ff5\u4e0d\u4ec5\u56e0\u4e3a\u65f6\u95f4\u800c\u5e7f\u4e3a\u4eba\u77e5\uff0c\u800c\u4e14\u56e0\u4e3a\u5176\u6613\u4e8e\u6559\u6388\u7684\u6027\u8d28\u800c\u5e7f\u4e3a\u4eba\u77e5\uff1b\u56e0\u6b64\uff0c\u65b0\u6982\u5ff5\u81ea\u7136\u4f1a\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002\n\u6709\u4e9b\u4eba\u4f1a\u56e0\u4e3a\u590d\u6742\u800c\u4f9d\u604b\u590d\u6742\u7684\u6982\u5ff5\u3002\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\u4ed6\u4eec\u4e0d\u60f3\u6d6a\u8d39\u65f6\u95f4\u5b66\u4e60\u4e00\u4e9b\u6982\u5ff5\uff0c\u4e5f\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u53ef\u80fd\u4f1a\u8ba9\u4ed6\u4eec\u89c9\u5f97\u4f7f\u7528\u590d\u6742\u6280\u672f\u5728\u667a\u529b\u4e0a\u66f4\u4f18\u8d8a\u3002\n\u8fc7\u5ea6\u8bbe\u8ba1\u6bd4\u8bbe\u8ba1\u4e00\u4e2a\u6070\u5230\u597d\u5904\u7684\u89e3\u51b3\u65b9\u6848\u66f4\u5bb9\u6613\u3002\u8fc7\u5ea6\u8bbe\u8ba1\u89e3\u51b3\u65b9\u6848\u4f1a\u6d6a\u8d39\u8d44\u6e90\uff0c\u5bfc\u81f4\u5b8c\u5168\u7f3a\u4e4f\u9002\u5f53\u7684\u89c4\u5212\u548c\u7406\u89e3\u3002\n\u5f53\u6280\u672f\u9009\u62e9\u6210\u4e3a\u65f6\u5c1a\u9a71\u52a8\u56e0\u7d20\u65f6\uff0c\u4e13\u5bb6\u77e5\u9053\u6216\u4f7f\u7528\u6700\u65b0\u8d8b\u52bf\u65f6\uff0c\u63a8\u5e7f\u4f4e\u6548\u6216\u4e0d\u6070\u5f53\u7684\u89e3\u51b3\u65b9\u6848\u5c31\u66f4\u5bb9\u6613\u4e86\u3002", "note_en": "When building a new piece of software or a new piece of architecture, a common practice is what I would describe as wasteful by design. Often, it is no longer a question of how to use technology to solve a specific problem but how to shoehorn technology into a problem without a genuine regard for specific requirements or actual needs.\n   A case may be made for when projected scalability requirements are over-optimistic but wasteful by design is not about this business reality; it is about designing a system for a set of requirements or numbers without actually thinking about what is required to build.\n It was racks of shiny appliances; then too many virtual machines, it was \u201celastic compute\u201d then containers, then Kubernetes, and now serverless.Every time one of these trends appears, pragmatism disappears in a swarm of tech debt.\n It was SQL databases, then NoSQL, then serverless databases. It is often unclear what is talked about, a query language, a database engine, a replication technology, a storage paradigm, or a marketing term?\n This confusion makes for hopeless choices, which, more often than not, does not fit the domain problem well. That is how we see MongoDB being used to develop banking software, Kubernetes to deploy static websites, and Hadoop to process excel-scale data.\n  Often, when telling someone how absurd some technology choice ultimately is, a multitude of excuses are brought up. The goal is to make the original domain problem overreach to absurd lengths to appear for someone pragmatic. Nevertheless, that is not about being practical but appearing as someone with deep domain expertise and not protruding on the initial choice by portraying criticism as a lack of expertise or understanding of the problem at hand.\n  When an engineer shows pragmatism, he is now a pessimist or someone lacking proficiency for not choosing the \u201cright\u201d solution. Even worse, this train of thought leads to fashion-based designing, where the last trend is the right engineering choice.\n Many examples exist in the real world, be it in programming languages, where the latest construct is better than the old one, and frameworks where the newest design pattern must replace the previous architecture, in deployment solutions where freshest rhymes with best.\n  When something becomes too well known or too prominent, even when previously considered state-of-the-art, it is now a vulgarity that one should avoid.\n Because people may implement simple concepts earlier on, they become well known not only due to time but also by the nature of being easy to teach; it is then natural for novel concepts to be more convoluted.\n Some people then get attached to complicated concepts just because they are complicated. Be-it through not wanting to lose the time they invested learning about some notion but also because it may make them feel intellectually superior for using convoluted technology.\n  It is easier to over-engineer than to engineer a solution just right. Significantly over-engineering a solution allows for a complete lack of proper planning and understanding by wasting resources.\n When technology choices become fashion-driven, it is even easier to promote inefficient or just inappropriate solutions as an expert knows or uses the latest trend.", "posttime": "2022-02-15 00:06:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d6a\u8d39,wasteful,\u9009\u62e9", "title": "\u6545\u610f\u6d6a\u8d39", "title_en": "Wasteful by Design", "transed": 1, "url": "https://barre.sh/wasteful-by-design/", "via": "", "real_tags": ["\u6d6a\u8d39", "wasteful", "\u9009\u62e9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073189, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6458\u81ea\u4e39\u5c3c\u5c14\u00b7\u9ea6\u5361\u52d2\u59c6&#39\uff1bs&#34\uff1b\u4f0a\u5229\u8ba1\u5212\u548c#34\uff1b\u7ed8\u5236\u4e86\u6a2a\u8de8\u7ebd\u7ea6\u548c\u4f0a\u5229\u94c1\u8def\u7684\u9519\u7efc\u590d\u6742\u7684\u4e0d\u540c\u94c1\u8def\u7ebf&#39\uff1bs\u5728\u7f8e\u56fd\u4e1c\u5317\u90e8\u7684\u884c\u52a8\u3002\u7531\u56fd\u4f1a\u56fe\u4e66\u9986\u63d0\u4f9b\u3002\n\u65e0\u8bba\u662f\u5728\u8d44\u672c\u6295\u8d44\u65b9\u9762\uff0c\u8fd8\u662f\u5728\u7ec4\u7ec7\u7684\u590d\u6742\u6027\u65b9\u9762\uff0c\u94c1\u8def\u73b0\u5728\u90fd\u662f\u8be5\u56fd\u6709\u53f2\u4ee5\u6765\u6700\u5927\u7684\u8fd0\u8425\u3002\u6b63\u5982\u7535\u62a5\u7b49\u65b0\u7684\u7269\u7406\u6280\u672f\u6b63\u5728\u6539\u53d8\u4f01\u4e1a\u7684\u6e38\u620f\u89c4\u5219\u4e00\u6837\uff0c\u94c1\u8def\u7684\u89c4\u6a21\u548c\u89c4\u6a21\u610f\u5473\u7740\u5b83\u4e5f\u9700\u8981\u7ec4\u7ec7\u6280\u672f\u3002\n\u4fdd\u6301\u62a5\u544a\u7ebf\u7684\u6761\u7406\u5316\u4e0d\u4ec5\u6709\u52a9\u4e8e\u8ddf\u8e2a\u6570\u767e\u540d\u4e0d\u540c\u7684\u7ba1\u7406\u8005\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u751f\u6b7b\u6538\u5173\u7684\u95ee\u9898\u3002\n\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\uff08UC Berkeley\uff09\u7f8e\u56fd\u5386\u53f2\u526f\u6559\u6388\u51ef\u7279\u7433\u00b7\u7f57\u68ee\u5854\u5c14\uff08Caitlin Rosenthal\uff09\u535a\u58eb\uff08Dr.Rosenthal\uff09\u4e13\u6ce8\u4e8e\u7ba1\u7406\u5b9e\u8df5\u7684\u53d1\u5c55\uff0c\u4ed6\u8bf4\uff1a\u201c\u6709\u4e86\u94c1\u8def\uff0c\u4f60\u5c31\u662f\u5728\u8fd0\u884c\u6c7d\u8f66\uff08\u901a\u5e38\u662f\u5728\u540c\u4e00\u8f68\u9053\u4e0a\u7684\u4e24\u4e2a\u65b9\u5411\uff09\uff0c\u4f60\u6ca1\u6709\u80fd\u529b\u8fdb\u884c\u73b0\u573a\u4ea4\u6d41\u3002\u201d\u3002\u201c\u8ba1\u5212\u548c\u7ba1\u7406\u6570\u636e\u4e2d\u7684\u7a81\u53d1\u4e8b\u4ef6\u7684\u9700\u6c42\u662f\u7edd\u5bf9\u5de8\u5927\u7684\u3002\u56e0\u4e3a\u5982\u679c\u6bcf\u4e2a\u4eba\u90fd\u4e0d\u77e5\u9053\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u90a3\u4e48\u5c31\u4f1a\u53d1\u751f\u5404\u79cd\u81f4\u547d\u7684\u5d29\u6e83\u3002\u201d\n\u8be5\u94c1\u8def\u7684\u8d1f\u8d23\u4eba\u4e39\u5c3c\u5c14\u00b7\u9ea6\u5361\u52d2\u59c6\uff08Daniel McCallum\uff09\u5f53\u65f6\u4e5f\u662f\u4e00\u4f4d\u9886\u5148\u7684\u7ba1\u7406\u601d\u60f3\u5bb6\uff0c\u4ed6\u7684\u4efb\u52a1\u662f\u63d0\u51fa\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u3002\u9ea6\u5361\u52d2\u59c6\u7ed9\u51fa\u4e86\u4e00\u4e2a\u7b54\u6848\u2014\u2014\u4e00\u4e2a\u590d\u6742\u7684\u3001\u5206\u5c42\u7684\u3001\u6811\u72b6\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u3002\u73b0\u4ee3\u4e16\u754c\u6709\u53f2\u4ee5\u6765\u7684\u7b2c\u4e00\u6b21\u3002\nA&#34\u7684\u526f\u672c\uff1b\u7ec4\u7ec7\u8ba1\u5212&#34\uff1b\u4e39\u5c3c\u5c14\u00b7\u9ea6\u5361\u52d2\u59c61855\u5e74\u521b\u529e\u7684\u7ebd\u7ea6\u548c\u4f0a\u5229\u94c1\u8def\u516c\u53f8\u3002\u7531\u7f57\u68ee\u5854\u5c14\u535a\u58eb\u548c\u56fd\u4f1a\u56fe\u4e66\u9986\u63d0\u4f9b\u3002\n\u4e4d\u4e00\u770b\uff0c\u8fd9\u5f20\u56fe\u8868\u66f4\u50cf\u662f\u4e00\u4e2a\u5e9e\u5927\u7684\u5bb6\u8c31\u6216\u534e\u4e3d\u7684\u5730\u56fe\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u7528\u4e8e\u6570\u636e\u6536\u96c6\u7684\u7ba1\u7406\u5de5\u5177\u3002\n\u8457\u540d\u5546\u4e1a\u5386\u53f2\u5b66\u5bb6\u963f\u5c14\u5f17\u96f7\u5fb7\u00b7\u94b1\u5fb7\u52d2\uff08Alfred Chandler\uff09\u662f\u9ea6\u5361\u52d2\u59c6\uff08McCallum\uff09\u7ec4\u7ec7\u7ed3\u6784\u56fe\u7684\u8d2a\u5a6a\u5b66\u8005\uff0c\u4ed6\u5728\u8457\u4f5c\u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u201c\u4f0a\u5229\u8ba1\u5212\u201d\uff0c\u5e76\u5c06\u8be5\u56fe\u63cf\u8ff0\u5982\u4e0b\uff1a\n\u201c\u56fe\u8868\u7684\u8bbe\u8ba1\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u7684\u6839\u4ee3\u8868\u603b\u7edf\u548c\u8463\u4e8b\u4f1a\uff1b\u5206\u652f\u673a\u6784\u662f\u4e94\u4e2a\u8fd0\u8425\u90e8\u95e8\u548c\u670d\u52a1\u90e8\u95e8\u3001\u53d1\u52a8\u673a\u7ef4\u4fee\u3001\u6c7d\u8f66\u6865\u3001\u7535\u62a5\u3001\u5370\u5237\u4ee5\u53ca\u53f8\u5e93\u548c\u79d8\u4e66\u529e\u516c\u5ba4\uff1b\u800c\u6811\u53f6\u5219\u4ee3\u8868\u5404\u79cd\u5f53\u5730\u7684\u673a\u7968\u3001\u8d27\u8fd0\u548cforwar\u4e01\u4ee3\u7406\u3001\u4e0b\u5c5e\u4e3b\u7ba1\u3001\u5217\u8f66\u5458\u3001\u9886\u73ed\u7b49\u3002\"\n\u9ea6\u5361\u52d2\u59c6\u7684\u4f0a\u5229\u8ba1\u5212\u7684\u4e00\u4e2a\u663e\u8457\u7279\u70b9\u662f\uff0c\u5b83\u65e2\u662f\u4e00\u5f20\u5730\u56fe\uff0c\u53c8\u662f\u4e00\u5f20\u7ec4\u7ec7\u56fe\u3002\n\u201c\u4f60\u53ef\u4ee5\u770b\u5230\u94c1\u8def\u7684\u5b9e\u9645\u5e03\u5c40\uff0c\u201d\u7f57\u68ee\u5854\u5c14\u8bf4\u3002\u201c\u4e0d\u662f\u5728\u5730\u7406\u4f4d\u7f6e\u4e0a\uff0c\u800c\u662f\u6bcf\u6761\u7ebf\u8def\u90fd\u6709\u81ea\u5df1\u7684\u7ec4\u7ec7\u7ed3\u6784\uff0c\u5305\u62ec\u968f\u884c\u4eba\u5458\u548c\u7559\u5728\u7ebf\u8def\u4e0a\u4eba\u5458\u7684\u6df7\u5408\u3002\n\u5979\u8bf4\uff0c\u6b63\u662f\u8fd9\u4e24\u7c7b\u4eba\u4e4b\u95f4\u7684\u6c9f\u901a\uff0c\u5bf9\u4e8e\u5f04\u6e05\u4eba\u4eec\u7684\u8d23\u4efb\u4ee5\u53ca\u5728\u4ed6\u4eec\u5f00\u59cb\u4e4b\u524d\u89e3\u51b3\u6c9f\u901a\u95ee\u9898\u81f3\u5173\u91cd\u8981\u3002\n\u7f57\u68ee\u5854\u5c14\u8fd8\u6307\u51fa\uff0c\u9ea6\u5361\u52d2\u59c6\u7684\u56fe\u8868\u5c06\u516c\u53f8\u4e2d\u6700\u9ad8\u5c42\u7684\u9886\u5bfc\u7f6e\u4e8e\u6700\u5e95\u5c42\uff0c\u8fd9\u4e0e\u6211\u4eec\u4eca\u5929\u770b\u5f85\u5206\u5c42\u7ec4\u7ec7\u56fe\u8868\u7684\u65b9\u5f0f\u76f8\u53cd\u3002\n\u7f57\u68ee\u5854\u5c14\u8bf4\uff1a\u201c\u8fd9\u611f\u89c9\u5c31\u50cf\u662f\u4e00\u4e2a\u4e0d\u540c\u4e8e\u91d1\u5b57\u5854\u7684\u7ec4\u7ec7\uff0c\u91d1\u5b57\u5854\u7684\u9ad8\u5c42\u662f\u9ad8\u7ba1\uff0c\u800c\u4e0d\u662f\u5e95\u5c42\uff0c\u4ed6\u4eec\u5728\u8fd9\u91cc\u652f\u6301\u7ec4\u7ec7\u3002\u201d\n\u9ea6\u5361\u52d2\u59c6\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u7a76\u7adf\u662f\u4e3a\u4e86\u4ec0\u4e48\uff0c\u76ee\u524d\u8fd8\u4e0d\u6e05\u695a\u3002\n\u7f57\u68ee\u5854\u5c14\u8bf4\uff1a\u201c\u6211\u4eec\u77e5\u9053\u8fd8\u6709\u5176\u4ed6\u590d\u5236\u54c1\u3002\u201d\u3002\u201c\u6211\u4eec\u771f\u7684\u4e0d\u77e5\u9053\u5b83\u662f\u4e3a\u4e86\u8ba9\u4eba\u4eec\u770b\u5230\u8c01\u5728\u7ec4\u7ec7\u4e2d\uff0c\u8fd8\u662f\u4e3a\u4e86\u5411\u516c\u4f17\u5c55\u793a\u7ec4\u7ec7\u7684\u6837\u5b50\u800c\u5236\u4f5c\u7684\u3002\u201d\n\u5728\u5185\u6218\u7ed3\u675f\u540e\u7684\u51e0\u5341\u5e74\u91cc\uff0c\u4f5c\u4e3a\u8054\u5408\u592a\u5e73\u6d0b\u94c1\u8def\u516c\u53f8\u548c\u7f8e\u56fd\u519b\u65b9\u7684\u987e\u95ee\uff0c\u9ea6\u5361\u52d2\u59c6\u7ee7\u7eed\u521b\u5efa\u66f4\u591a\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u3002\n\u8fc8\u514b\u5c14\u00b7\u5361\u5854\uff08Michael Cata\uff09\u662f\u4e00\u540d\u72ec\u7acb\u7814\u7a76\u5458\uff0c\u4ed6\u82b1\u4e86\u591a\u5e74\u65f6\u95f4\u7814\u7a76\u4e39\u5c3c\u5c14\u00b7\u9ea6\u5361\u52d2\u59c6\uff08Daniel McCalum\uff09\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u53ca\u5176\u5bf9\u73b0\u4ee3\u4f01\u4e1a\u7684\u5f71\u54cd\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u9ea6\u5361\u52d2\u59c6\uff08McCalum&#39\uff1b\u540e\u6765\uff0c\u5f53\u4ed6\u4e3a\u7f8e\u56fd\u519b\u65b9\u5de5\u4f5c\u65f6\uff0c\u4ed6\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u3002\n\u5361\u5854\u8bf4\uff1a\u201c\u5982\u679c\u4f60\u5c061855\u5e74\u7684\u7ebd\u7ea6\u548c\u4f0a\u5229\u94c1\u8def\u56fe\u4e0e\u8fd9\u5f20\u56fe\u8fdb\u884c\u6bd4\u8f83\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u4e24\u79cd\u4e0d\u540c\u7684\u7b56\u7565\u5728\u4e24\u79cd\u4e0d\u540c\u7684\u7ed3\u6784\u4e2d\u8fd0\u884c\u3002\u201d\u3002\u201c\u9ea6\u5361\u52d2\u59c6\u660e\u786e\u7406\u89e3\u5e76\u5b9e\u65f6\u5b9e\u8df5\u7684\u4e00\u70b9\u662f\uff0c\u4e00\u4e2a\u7ec4\u7ec7\u7684\u5efa\u7acb\u4e0d\u662f\u4e3a\u4e86\u6ee1\u8db3\u804c\u80fd\u7684\u9700\u8981\uff0c\u4e5f\u4e0d\u662f\u4e3a\u4e86\u6ee1\u8db3\u7ec4\u7ec7\u5185\u90e8\u4eba\u5458\u7684\u9700\u8981\uff0c\u800c\u662f\u4e3a\u4e86\u89e3\u51b3\u95ee\u9898\u3002\u201d\n\u5c3d\u7ba1\u9ea6\u5361\u52d2\u59c6\u572819\u4e16\u7eaa\u672b\u53d6\u5f97\u4e86\u4e00\u4e9b\u8fdb\u6b65\uff0c\u4f46\u968f\u7740\u7f8e\u56fd\u5546\u5b66\u9662\u7684\u5174\u8d77\uff0c\u7ec4\u7ec7\u7ed3\u6784\u56fe\u7684\u6d41\u884c\u5728\u8fd1\u767e\u5e74\u5185\u5e76\u6ca1\u6709\u5174\u8d77\u3002Cata\u8868\u793a\uff0c\u5728\u6b64\u4e4b\u524d\uff0c\u7ec4\u7ec7\u7ed3\u6784\u56fe\u5b9e\u9645\u4e0a\u53ea\u662f\u4f5c\u4e3a\u519b\u4e8b\u6216\u6218\u4e89\u52aa\u529b\u7684\u4e00\u90e8\u5206\u51fa\u73b0\u5728\u5386\u53f2\u6587\u732e\u4e2d\u3002\n\u5361\u5854\u8bf4\uff1a\u201c\u5185\u6218\u7ed3\u675f\u540e\u76f4\u52301910\u5e74\uff0c\u60c5\u51b5\u80af\u5b9a\u53d8\u5f97\u9ed1\u6697\u4e86\u3002\u201d\u3002\u201c\u5728\u7b2c\u4e00\u6b21\u4e16\u754c\u5927\u6218\u4e4b\u524d\uff0c\u7ec4\u7ec7\u7ed3\u6784\u56fe\u5f00\u59cb\u53d8\u5f97\u8d8a\u6765\u8d8a\u660e\u663e\u3002\u5b83\u4eec\u572820\u4e16\u7eaa40\u5e74\u4ee3\u53d8\u5f97\u975e\u5e38\u660e\u663e\uff0c\u56e0\u4e3a\u4f60\u9700\u8981\u5b83\u4eec\u6765\u8fd0\u884c\u7b2c\u4e8c\u6b21\u4e16\u754c\u5927\u6218\u3002\u6709\u8da3\u7684\u662f\uff0c\u7ec4\u7ec7\u7ed3\u6784\u56fe\u7684\u9ec4\u91d1\u65f6\u4ee3\u90fd\u4ee5\u6218\u65f6\u4e3a\u4e2d\u5fc3\u3002\u201d\nCata\u8bf4\uff0c\u6211\u4eec\u6240\u77e5\u9053\u7684\u73b0\u4ee3\u7ec4\u7ec7\u7ed3\u6784\u56fe\u51fa\u73b0\u572820\u4e16\u7eaa60\u5e74\u4ee3\u548c70\u5e74\u4ee3\uff0c\u5f53\u65f6\u7f8e\u56fd\u5546\u5b66\u9662\u6b63\u5728\u5174\u8d77\u3002\u6211\u4eec\u4eca\u5929\u90fd\u719f\u6089\u7684\u7b49\u7ea7\u7ed3\u6784\u662f\u8fd9\u4e9b\u5b66\u6821\u540c\u8d28\u5316\u7684\u4e00\u90e8\u5206\u3002\n\u4f46\u9ea6\u5361\u52d2\u59c6\u7684\u590d\u6742\u7684\u3001\u5730\u56fe\u822c\u7684\u7ec4\u7ec7\u7ed3\u6784\u56fe\u4ecd\u7136\u662f\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u660e\u65e9\u671f\u7684\u7ba1\u7406\u601d\u60f3\u5982\u4f55\u5e2e\u52a9\u89e3\u51b3\u5728\u8be5\u56fd\u4e00\u4e9b\u6700\u65e9\u7684\u89c4\u6a21\u5316\u7ec4\u7ec7\u4e2d\u51fa\u73b0\u7684\u590d\u6742\u95ee\u9898\uff0c\u800c\u4e14\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u4eec\u53ef\u80fd\u5e2e\u52a9\u633d\u6551\u4e86\u597d\u51e0\u6761\u751f\u547d\u3002\n\u7528\u516c\u5171\u7ec4\u7ec7\u7ed3\u6784\u56fe\u5c55\u793a\u4f60\u7684\u4f18\u79c0\u56e2\u961f\u3002\u5efa\u7acb\u8ba4\u53ef\u6587\u5316\uff0c\u83b7\u5f97\u66f4\u591a\u66dd\u5149\uff0c\u5438\u5f15\u65b0\u5ba2\u6237\uff0c\u7a81\u51fa\u73b0\u6709\u4eba\u624d\uff0c\u5438\u5f15\u66f4\u591a\u4f18\u79c0\u4eba\u624d\u3002\u70b9\u51fb\u8fd9\u91cc\u5f00\u59cb\u4eca\u5929\u7684\u514d\u8d39\u6d3b\u52a8\u3002", "note_en": "An excerpt from Daniel McCallum&#39;s &#34;Erie Plan,&#34; which mapped out the intricate different railroad lines across the New York and Erie Railroad&#39;s operation in the Northeast United States. Courtesy of the Library of Congress.\n Railroads were now the biggest operations the country had ever seen, both in terms of capital investment and the complexity of the organization. Just as new physical technologies, such as the telegram, were changing the game for businesses, the size and scale of the railroads meant it needed organizational technology too.\n Keeping reporting lines organized not only helped keep track of the hundreds of different managers out on the front lines of the tracks, but was quite literally a matter of life and death.\n \u201cWith a railroad, you are running cars (often in both directions on the same track) and you don\u2019t have the ability to communicate live,\u201d said Dr. Caitlin Rosenthal, an associate professor of U.S. history with a focus on the development of management practices at  UC Berkeley. \u201cThe need to schedule out and manage contingencies in your data is just absolutely huge. Because if everybody doesn&#39;t know what&#39;s happening, then you have all kinds of deadly crashes.\u201d\n The railroad\u2019s superintendent Daniel McCallum, who was also a leading management thinker at the time, was tasked with coming up with a solution. McCallum drew out an answer \u2014 a complex, layered, tree-like org chart. The first the modern world has ever seen.\n  A copy of a &#34;plan of organization&#34; for the New York and Erie Railroad Company that Daniel McCallum penned in 1855. Courtesy of Dr. Rosenthal and the Library of Congress.\n At first glance, the chart looks much more like a sprawling family tree or an ornate map than it does a managerial tool for data collection.\n Renowned business historian Alfred Chandler was a voracious scholar of McCallum\u2019s org charts, and went into great detail about the \u201cErie Plan\u201d in his writings, describing the chart as follows:\n \u201cThe design of the chart was a tree whose roots represented the president and the board of directors; the branches were the five operating divisions and the service departments, engine repairs, car bridge, telegraph, printing and the treasurer&#39;s and secretary\u2019s offices; while the leaves indicated the various local ticket, freight, and forwarding agents, subordinate superintendents, train crews, foreman and so forth.\u201d\n  One distinctive feature of McCallum\u2019s Erie Plan is how it functions as both a map and an organizational chart.\n \u201cYou can see the physical layout of the railroad,\u201d Rosenthal says. \u201cNot where it\u2019s positioned geographically, but each line has its own organizational structure with a mix of people who moved with the train, and a mix of people who stayed on the line.\n She says it is the communication between those two groups of people that became essential for figuring out what people\u2019s responsibilities were and to solve communication problems before they began.\n Rosenthal also points out that McCallum\u2019s chart positions the most senior leaders in the company at the bottom, which is antithetical to how we view hierarchical org charts today.\n \u201cThis just feels like a different kind of organization than the pyramid that has executives perched at the top,\u201d Rosenthal says \u201cRather than at the bottom kind of supporting the organization as they are here.\u201d\n It is still murky on what McCallum\u2019s org chart was exactly intended for.\n \u201cWe know that other copies were made,\u201d Rosenthal said. \u201cWe don&#39;t really know if it&#39;s produced for people to see who are in the organization, or if it&#39;s an outwardly-focused version presenting to the public what the organization is like.\u201d\n McCallum went on to create more organizational charts as a consultant for the Union Pacific Railroad and for the U.S. military in the decades following the Civil War.\n Michael Cata, an independent researcher who has spent years studying Daniel McCallum\u2019s organizational charts and his effect on modern businesses, was eventually able to track down one of McCallum&#39;s later org charts when he was working for the U.S. military.\n \u201cIf you compare the New York and Erie railroad chart, which is the original one from 1855, with this one, you can kind of see two different strategies that are going in two different structures,\u201d Cata said. \u201cSomething that McCallum definitely understood and practiced real-time is that an organization is not set up to serve the needs of functions, or the needs of the people inside the organization, it\u2019s set up to solve problems.\u201d\n Despite McCallum\u2019s advancements in the late 19th century, the prevalence of org charts didn\u2019t take off for nearly another hundred years with the rise of business schools in the U.S. Cata says until then, org charts really only surface in historical documents as part of military or wartime efforts.\n \u201cThe period following the Civil War up until 1910, things definitely went dark,\u201d Cata says. \u201cLeading up to World War One, org charts start to become more and more apparent. They became extremely apparent in the 1940s because you needed them to run World War II. The golden age of org charts interestingly all center around wartime.\u201d\n Cata says the modern org chart as we know it emerged in the 1960s and 70s with the rise of American business schools. The hierarchical structure that we are all familiar with today was part of the homogenization of these schools.\n But McCallum\u2019s complex and map-like org chart lives on as an example of how early management thinking helped solve complex problems that arose in some of the earliest scaling organizations in the country \u2014 and they probably helped save several lives in the process.\n Show off your great team with a public  org chart. Build a culture of recognition, get more exposure, attract new customers, and highlight existing talent to attract more great talent.   Click here to get started for free today.", "posttime": "2022-02-15 00:01:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5d1b\u8d77,rise,\u7ec4\u7ec7", "title": "\u94c1\u8def\u7684\u5d1b\u8d77\u50ac\u751f\u4e86\u7b2c\u4e00\u5f20\u7ec4\u7ec7\u7ed3\u6784\u56fe\uff082017\u5e74\uff09", "title_en": "The rise of railroads gave rise to the first org chart (2017)", "transed": 1, "url": "https://theorg.com/insights/how-the-rise-of-the-railroads-gave-way-to-the-worlds-first-org-chart", "via": "", "real_tags": ["\u5d1b\u8d77", "rise", "\u7ec4\u7ec7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073188, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56fe4\u3002\u5185\u5bb9\u9875\u7684\u8be6\u7ec6\u4fe1\u606f\uff1aa\uff1a\u7ae0\u8282\u548c\u5c0f\u8282\u6807\u9898\u3002B\uff1a\u9875\u7801\u65e5\u671f\uff08\u4ec5\u9650\u6bcf\u65e5\u6ce8\u91ca\u90e8\u5206\uff09\u3002C\uff1a\u7b2c\u4e00\u884c\u76ee\u5f55\u5b57\u6bb5\uff08\u51fa\u73b0\u5728\u76ee\u5f55\u4e2d\uff09\u3002D\uff1a\u5f85\u529e\u4e8b\u9879\u6e05\u5355E\uff1a\u7b2c\u4e00\u6b21\u4f1a\u8bae\u7b14\u8bb0\u7684\u5f00\u59cb\u3002\u6211&#39\uff1b\u6211\u5df2\u7ecf\u4e3a\u4f7f\u7528Proteus\u5236\u5b9a\u4e86\u4e00\u4e2a\u76f8\u5f53\u4e00\u81f4\u7684\u65e5\u5e38\u7a0b\u5e8f\uff1a\u6211\u4ece\u6bcf\u5929\u7684\u9875\u9762\u5f00\u59cb\u3002\u6211\u66f4\u65b0\u9875\u9762\u9876\u90e8\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\uff08\u901a\u5e38\uff0c\u5f53\u5929\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\u5df2\u7ecf\u5f00\u59cb\uff09\u3002\u6211\u5173\u6389Proteus\uff0c\u67e5\u770b\u6211\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u65e5\u5386\u3002\u8fd9\u53ef\u80fd\u4f1a\u8fdb\u4e00\u6b65\u589e\u52a0\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3002\u5982\u679c\u7535\u5b50\u90ae\u4ef6\u4e2d\u6709\u6211\u60f3\u4fdd\u5b58\u7684\u5185\u5bb9\uff0c\u6216\u8005\u6211\u60f3\u7a0d\u540e\u53cd\u601d\u548c\u56de\u590d\u7684\u5185\u5bb9\uff0c\u5219\u53ef\u4ee5\u5c06\u5176\u7c98\u8d34\u5230\u5185\u5bb9\u533a\u57df\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u8eab\u8fb9\u901a\u5e38\u90fd\u6709\u666e\u7f57\u7279\u65af\u3002\u6211\u5c06\u4f7f\u7528Proteus\u66f4\u65b0\u6211\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\uff0c\u8bb0\u4e0b\u7b80\u77ed\u7684\u7b14\u8bb0\uff08\u5982\u7535\u8bdd\u7559\u8a00\u3001\u60f3\u6cd5\uff09\uff0c\u5e76\u64b0\u5199\u548c\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u3002\u5f00\u4f1a\u65f6\uff0c\u6211\u901a\u5e38\u4f1a\u7528Proteus\u505a\u7b14\u8bb0\uff1b\u5982\u679c\u4f1a\u8bae\u89c4\u6a21\u76f8\u5f53\u5927\uff0c\u6d89\u53ca\u7684\u4e8b\u9879\u4e0d\u7b26\u5408&#39\uff1b\u522b\u62c5\u5fc3\u6211\uff0c\u6211&#39\uff1b\u6211\u4f1a\u8bb0\u4e0b\u5176\u4ed6\u4e8b\u60c5\uff0c\u66f4\u65b0\u6211\u7684\u5f85\u529e\u4e8b\u9879\u6e05\u5355\uff0c\u6216\u53d1\u7535\u5b50\u90ae\u4ef6\uff0c\u540c\u65f6\u76d1\u63a7\u4ec0\u4e48&#39\uff1b\u4f1a\u8bae\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\n\u56e0\u6b64\uff0c\u603b\u7684\u6765\u8bf4\uff0c\u9891\u7e41\u4f7f\u7528Proteus\uff08\u4ece\u4e00\u5468\u4e00\u6b21\u6216\u4e24\u6b21\u5230\u4e00\u5929\u591a\u6b21\uff09\u5305\u62ec\uff1a\n\u6211\u4f7f\u7528Proteus\u5b8c\u6210\u8bb8\u591a\u5176\u4ed6\u4efb\u52a1\uff0c\u5c3d\u7ba1\u5b83\u4eec\u7684\u9891\u7387\u4ece\u6bcf\u5468\u4e00\u6b21\u5230\u6bcf\u6708\u4e00\u6b21\u4e0d\u7b49\u3002\u8fd9\u4e9b\u63aa\u65bd\u5305\u62ec\uff1a\n\u53c2\u8003\u6211\u6bcf\u4e2a\u6708\u90fd\u4f1a\u4f7f\u7528search\u547d\u4ee4\u5728Proteus\u4e2d\u641c\u7d22\u597d\u51e0\u6b21\u4fe1\u606f\uff0c\u5076\u5c14\u4e5f\u4f1a\u4ece\u6211&#39\uff1b\u6211\u7ecf\u5e38\u8bfb\u67d0\u4e2a\u4f1a\u8bae\u7684\u7b14\u8bb0\u3002\u603b\u7ed3\u3002\u6211\u6bcf\u4e2a\u6708\u505a\u4e00\u6b21\u6d3b\u52a8\u62a5\u544a\uff1b\u8fd9\u5305\u62ec\u6d4f\u89c8\u4e0a\u4e2a\u6708&#39\uff1b\u8fd9\u662f\u76f8\u5f53\u4e8e\u666e\u7f57\u7279\u65af\u4f5c\u54c1\u7684\u4ef7\u503c\u3002\u5076\u5c14\uff0c\u6211\u9700\u8981\u5bf9\u4e00\u7cfb\u5217\u4f1a\u8bae\u7684\u7ed3\u679c\u8fdb\u884c\u603b\u7ed3\uff0c\u5e76\u641c\u7d22\u4e0e\u7279\u5b9a\u9879\u76ee\u76f8\u5173\u7684\u7b14\u8bb0\u3002\u56fe\u89e3\u3002\u6bcf\u6708\u6709\u51e0\u6b21\uff0c\u6211\u4f1a\u4f7f\u7528Proteus\u7ed8\u5236\u4e0e\u4f1a\u8bae\u6216\u9879\u76ee\u76f8\u5173\u7684\u56fe\u8868\u6216\u6a21\u578b\uff0c\u6211&#39\uff1b\u6211\u8fdb\u5316\u4e86\u3002\uff08\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u51fa\u4e4e\u610f\u6599\u7684\u7528\u9014\uff1a\u6211&#39\uff1b\u6ca1\u6709\u60f3\u5230\uff0c\u9664\u4e86\u6211\u4e4b\u5916\uff0c\u4efb\u4f55\u4eba\u90fd\u60f3\u7528\u4e00\u4e2a\u8f68\u8ff9\u7403\u6765\u753b\u753b\uff01\uff09\u6355\u6349\u9605\u8bfb\u7b14\u8bb0\u3002\u5982\u679c\u6211\u8bfb\u5230\u6709\u7528\u7684\u4e1c\u897f\uff0c\u6211&#39\uff1b\u6211\u7ecf\u5e38\u628a\u5b83\u7684\u8bed\u5f55\u8f6c\u5f55\u5230\u666e\u7f57\u7279\u65af\u7684\u4e00\u4e2a\u7279\u522b\u7ae0\u8282\u91cc\u3002\u8fd9\u79cd\u6d3b\u52a8\u4ee5\u7206\u53d1\u7684\u5f62\u5f0f\u53d1\u751f\uff0c\u7206\u53d1\u4e4b\u95f4\u6709\u51e0\u4e2a\u6708\u7684\u95f4\u9694\u3002\n\u6709\u8da3\u7684\u662f\uff0c\u6211\u5e76\u6ca1\u6709\u50cf\u6211\u6700\u521d\u8ba4\u4e3a\u7684\u90a3\u6837\u4f7f\u7528Proteus\u3002\u5c06Proteus\u4ece\u4e00\u5806\u5f15\u6587\u8f6c\u6362\u6210\u4e00\u4e2a\u529f\u80fd\u9f50\u5168\u7684\u7535\u5b50\u7b14\u8bb0\u672c\u7684\u52a8\u673a\u662f\u80fd\u591f\u4e3a\u4e00\u7bc7\u8bba\u6587\u505a\u7b14\u8bb0\uff0c\u5e76\u5c06\u7b14\u8bb0\u4e0e\u76f8\u5173\u5f15\u6587\u8054\u7cfb\u8d77\u6765\u3002\u7136\u800c\uff0c\u5728\u5b8c\u6210Proteus\u7684\u7f16\u7a0b\u5de5\u4f5c\u540e\uff0c\u6211\u5f88\u5feb\u653e\u5f03\u4e86\u8fd9\u4e2a\u7528\u9014\u3002\u6211\u53d1\u73b0\u8df3\u8f6c\u5230\u5f15\u53f7\u4f1a\u5bfc\u81f4\u4e2d\u65ad\u6027\u7684\u4e0a\u4e0b\u6587\u8f6c\u6362\uff0c\u800cHyperCard\u6587\u672c\u5b57\u6bb5\u63d0\u4f9b\u7684\u529f\u80fd\u662f\u4e0d\u591f\u7684\u3002\u6211\u771f\u6b63\u60f3\u8981\uff08\u5e76\u5f88\u5feb\u8f6c\u5411\uff09\u7684\u662f\u4e00\u4e2a\u5927\u7eb2\u89c6\u56fe\uff0c\u6211\u53ef\u4ee5\u5728\u5176\u4e2d\u590d\u5236\u6211\u7684\u5f15\u6587\uff0c\u5e76\u5728\u5176\u4e2d\u63d2\u5165\u7b14\u8bb0\u548c\u5199\u4f5c\u7247\u6bb5\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4e0d\u4f7f\u7528Proteus\u7f16\u5199\u7ed3\u6784\u5316\u6587\u6863\u3002\n\u5728\u666e\u7f57\u7279\u65af\u4e4b\u524d\uff0c\u6211\u662f\u7eb8\u8d28\u7b14\u8bb0\u672c\u7684\u5fe0\u5b9e\u7528\u6237\u3002\u548cProteus\u4e00\u6837\uff0c\u6211\u4f7f\u7528\u7eb8\u8d28\u7b14\u8bb0\u672c\u4f5c\u4e3a\u4e00\u79cd\u5de5\u4f5c\u65e5\u8bb0\uff1a\u6211\u6bcf\u5929\u4ece\u4e00\u4e2a\u65b0\u7684\u9875\u9762\u5f00\u59cb\uff0c\u4fdd\u7559\u5f85\u529e\u4e8b\u9879\u6e05\u5355\u3001\u4f1a\u8bae\u8bb0\u5f55\uff0c\u5e76\u5c06\u5176\u7528\u4f5c\u5176\u4ed6\u4fe1\u606f\u7684\u5b58\u50a8\u5e93\u3002\u7136\u800c\uff0c\u6709\u4e24\u4e2a\u663e\u8457\u7684\u533a\u522b\uff08\u9664\u4e86\u4e00\u4e2a\u660e\u663e\u7684\u533a\u522b\uff0c\u6211\u6ca1\u6709\u7528\u5b83\u6765\u5199\u7535\u5b50\u90ae\u4ef6\uff09\u3002\u9996\u5148\uff0c\u6211\u53d1\u73b0\u6211\u5728Proteus\u4e2d\u505a\u4e86\u66f4\u591a\u7b14\u8bb0\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6211\u53d1\u73b0\u6253\u5b57\u6bd4\u5199\u4f5c\u66f4\u5bb9\u6613\u3001\u66f4\u5feb\uff0c\u90e8\u5206\u539f\u56e0\u662f\u6211\u5728\u4e0b\u4e00\u8282\u4e2d\u63cf\u8ff0\u7684\u534f\u540c\u6548\u5e94\u3002\u5176\u6b21\uff0c\u6211\u5f88\u5c11\u7ffb\u9605\u7eb8\u8d28\u7b14\u8bb0\u672c\uff0c\u5f53\u6211\u7ffb\u9605\u65f6\uff0c\u6211\u53ea\u503e\u5411\u4e8e\u67e5\u770b\u6700\u8fd1\u7684\u6761\u76ee\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u6211\u7ecf\u5e38\u91cd\u8bfbProteus\u4e2d\u7684\u6761\u76ee\u3002\u8fd9\u6709\u51e0\u4e2a\u539f\u56e0\uff1a\u641c\u7d22\u548c\u6d4f\u89c8\u66f4\u5bb9\u6613\uff1b\u5185\u5bb9\u66f4\u6e05\u6670\uff1b\u5f53\u6211\u53d1\u73b0\u6709\u7528\u7684\u4e1c\u897f\u65f6\uff0c\u5b83\u53ef\u4ee5\u88ab\u590d\u5236\u548c\u91cd\u590d\u4f7f\u7528\u3002\n\u867d\u7136Proteus\u5728\u5f88\u591a\u65b9\u9762\u90fd\u5f88\u6709\u7528\uff0c\u4f46\u6709\u4e24\u79cd\u65b9\u6cd5\u975e\u5e38\u91cd\u8981\uff0c\u4f7f\u5176\u6210\u4e3a\u6211\u5de5\u4f5c\u6d3b\u52a8\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\nProteus\u6700\u91cd\u8981\u7684\u5f71\u54cd\u53ef\u80fd\u662f\u5728\u7b14\u8bb0\u3001\u53c2\u8003\u548c\u4fe1\u606f\u4f20\u9012\u6d3b\u52a8\u4e4b\u95f4\u7684\u534f\u540c\u4f5c\u7528\u3002\u4fe1\u606f\u4f20\u9012\u63a8\u52a8\u4e86\u8fd9\u79cd\u534f\u540c\u6548\u5e94\u3002\u6211\u66f4\u9891\u7e41\u5730\u5199\u7b14\u8bb0\uff0c\u6211\u7684\u7b14\u8bb0\u8d28\u91cf\u4e5f\u66f4\u9ad8\uff0c\u56e0\u4e3a\u6211\u77e5\u9053\u6211\u66f4\u6709\u53ef\u80fd\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u5c06\u5b83\u4eec\u53d1\u9001\u7ed9\u4ed6\u4eba\u3002\u56e0\u4e3a\u6211\u7b14\u8bb0\u7684\u8d28\u91cf\u66f4\u9ad8\uff0c\u6240\u4ee5\u5f53\u6211&#39\uff1b\u6211\u6b63\u5728\u5199\u4e00\u6761\u76f8\u5173\u7684\u4fe1\u606f\u6216\u8bba\u6587\u3002\u6b64\u5916\uff0c\u8d28\u91cf\u7684\u63d0\u9ad8\u610f\u5473\u7740\uff0c\u5f53\u6211\u5728\u516d\u4e2a\u6708\u540e\u56de\u987e\u5b83\u4eec\u65f6\uff0c\u6211\u66f4\u6709\u53ef\u80fd\u7406\u89e3\u5b83\u4eec\u3002\u53cd\u8fc7\u6765\uff0c\u53c2\u8003\u9891\u7387\u7684\u589e\u52a0\u4e5f\u63a8\u52a8\u4e86\u8bb0\u7b14\u8bb0\u548c\u53d1\u4fe1\u606f\uff1a\u6211\u4ece\u4e2d\u5f97\u5230\u7684\u5229\u7528\u8d8a\u591a\uff0c\u6211\u5c31\u8d8a\u52aa\u529b\uff1b\u6211\u613f\u610f\u6295\u5165\u5176\u4e2d\u3002\u56e0\u6b64\uff0c\u5728\u7528Proteus\u5199\u4f5c\u65f6\uff0c\u6709\u4e00\u79cd\u5947\u602a\u7684\u6a21\u7cca\u6027\uff1a\u6211\u7684\u8fd1\u671f\u76ee\u6807\u53ef\u80fd\u662f\u8bb0\u5f55\u4e00\u6b21\u6709\u8da3\u7684\u4f1a\u8bae\uff0c\u4f46\u6211\u4e5f\u77e5\u9053\u5728\u6211\u7684\u8111\u6d77\u6df1\u5904\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u4f1a\u53d8\u6210\u4e00\u6761\u4fe1\u606f\uff0c\u6216\u6210\u4e3a\u672a\u6765\u8bba\u6587\u7684\u7d20\u6750\u3002\n\u53d8\u5f62\u83cc\u7684\u53e6\u4e00\u4e2a\u4e3b\u8981\u65b9\u9762\u662f#39\uff1b\u6709\u7528\u6027\u4e0e\u5b83\u7684\u53ef\u79fb\u690d\u6027\u4ee5\u53ca\u5176\u4e2d\u4e0e\u4e2a\u4eba\u76f8\u5173\u7684\u4fe1\u606f\u91cf\u6709\u5173\u3002\u6211\u901a\u5e38\u968f\u8eab\u643a\u5e26Proteus\uff0c\u56e0\u6b64\u6211\u603b\u662f\u6709\u5404\u79cd\u5927\u5c0f\u7684\u4efb\u52a1\u53ef\u4ee5\u5b8c\u6210\u3002\u5982\u679c\u6211\u63d0\u524d\u5230\u8fbe\u4f1a\u8bae\u5730\u70b9\uff0c\u6211\u53ef\u4ee5\u5728\u7b49\u5f85\u5176\u4ed6\u4eba\u5230\u8fbe\u65f6\u64b0\u5199\u4fe1\u606f\u3001\u67e5\u770b\u7b14\u8bb0\u6216\u66f4\u65b0\u6211\u7684\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3002\u8fd9\u6539\u53d8\u4e86\u6211\u7684\u884c\u4e3a\u3002\u6211\u66f4\u613f\u610f\u53c2\u52a0\u4e00\u4e9b\u6216\u6240\u6709\u5185\u5bb9\u90fd\u672a\u77e5\u76f8\u5173\u7684\u5927\u578b\u4f1a\u8bae\uff1a\u5982\u679c\u4f1a\u8bae\u76f8\u5173\uff0c\u6211\u4f1a\u6ce8\u610f\u5e76\u505a\u7b14\u8bb0\uff1b\u5982\u679c\u90e8\u5206\u5185\u5bb9\u4e0d\u76f8\u5173\uff0c\u6211\u53ef\u4ee5\u5728\u4f1a\u8bae\u4e0a\u4fdd\u6301\u534a\u4e2a\u8033\u6735\u7684\u540c\u65f6\u5904\u7406\u5176\u4ed6\u4e8b\u60c5\u3002\u6211\u5728&#39\uff1b\u5361\u4f4f&#39\uff1b\u5728\u793c\u5802\u4e2d\u95f4\u6392\u6210\u4e00\u6392\u3002\u867d\u7136\u8fd9\u542c\u8d77\u6765\u50cf\u662f\u4e00\u4ef6\u5c0f\u4e8b\uff0c\u4f46\u5b83\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u7f13\u89e3\u4e86\u665a\u5f00\u59cb\u5f00\u4f1a\u65f6\u7684\u607c\u6012\uff0c\u4ee5\u53ca\u88ab\u56f0\u5728\u65e0\u5173\u4f1a\u8bae\u4e0a\u7684\u7126\u8651\uff0c\u8fd9\u5bf9\u6211\u7684\u751f\u6d3b\u4ea7\u751f\u4e86\u91cd\u5927\u5f71\u54cd\u3002\n\u867d\u7136Proteus\u7684\u4e3b\u8981\u7528\u9014\u662f\u505a\u7b14\u8bb0\u3001\u53d1\u6d88\u606f\u548c\u8fdb\u884c\u6d3b\u52a8\u7ba1\u7406\uff0c\u4f46\u4fe1\u606f\u5b58\u50a8\u548c\u68c0\u7d22\u5728\u652f\u6301\u8fd9\u4e9b\u4efb\u52a1\u65b9\u9762\u53d1\u6325\u7740\u91cd\u8981\u4f5c\u7528\uff0c\u5e76\u4e14\u72ec\u7acb\u53d1\u6325\u4f5c\u7528\u3002Proteus\u652f\u6301\u591a\u79cd\u641c\u7d22\u65b9\u5f0f\u3002\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u641c\u7d22\u3001\u4f7f\u7528\u7ae0\u8282\u548c\u5c0f\u8282\u76ee\u5f55\u8fdb\u884c\u6d4f\u89c8\uff0c\u6216\u8005\u641c\u7d22\u4ee5\u5404\u79cd\u65b9\u5f0f\u8fdb\u884c\u4e86\u7279\u6b8a\u6807\u8bb0\u7684\u9879\u76ee\u3002\n\u7535\u5b50\u7b14\u8bb0\u672c\u7684\u4e00\u4e2a\u5047\u5b9a\u597d\u5904\u662f\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6587\u672c\u641c\u7d22\u3002\u8fd9\u5e76\u4e0d\u50cf\u770b\u4e0a\u53bb\u90a3\u4e48\u6709\u7528\u3002\u8fd9\u91cc\u6709\u4e09\u4e2a\u95ee\u9898\uff1a\u9996\u5148\uff0c\u6211\u7684\u4e00\u4e2a\u751f\u6d3b\u4e8b\u5b9e\u662f\uff0c\u7b14\u8bb0\u5199\u5f97\u5f88\u5306\u5fd9\uff0c\u56e0\u6b64\u7ecf\u5e38\u51fa\u73b0\u62fc\u5199\u9519\u8bef\u3001\u6253\u5b57\u9519\u8bef\u548c\u7f29\u5199\uff0c\u6211\u6000\u7591\u8fd9\u5bf9\u5927\u591a\u6570\u7535\u5b50\u7b14\u8bb0\u672c\u7528\u6237\u6765\u8bf4\u4e5f\u662f\u5982\u6b64\u3002\u56e0\u6b64\uff0c\u6807\u51c6\u7684\u5173\u952e\u5b57\u641c\u7d22\u5728\u67e5\u627e\u8f93\u5165\u9519\u8bef\u6216\u5306\u5fd9\u7f29\u5199\u7684\u5355\u8bcd\u65f6\u4e0d\u662f\u5f88\u6709\u6548\u3002\u7b2c\u4e8c\uff0c\u6211\u6bd4\u6211\u66f4\u9891\u7e41\u5730\u4f7f\u7528\u5f88\u591a\u5355\u8bcd&#39\uff1b\u6211\u77e5\u9053\u3002\u50cf\u5bf9\u8c61\u3001\u9690\u55bb\u3001\u63a5\u53e3\u548c\u901a\u4fe1\u8fd9\u6837\u7684\u8bcd\u5982\u6b64\u9891\u7e41\uff0c\u4ee5\u81f3\u4e8e\u4e0d\u503c\u5f97\u641c\u7d22\uff0c\u5e38\u89c1\u7684\u9879\u76ee\u540d\u79f0\u4e5f\u662f\u5982\u6b64\u3002\u5728\u8fd9\u65b9\u9762\uff0c\u4f7f\u7528\u5f85\u529e\u4e8b\u9879\u5217\u8868\u662f\u4e00\u4e2a\u7f3a\u70b9\uff0c\u56e0\u4e3a\u91cd\u8981\u7684\u9879\u76ee\u548c\u9879\u76ee\u5f80\u5f80\u4f1a\u5728\u5f85\u529e\u4e8b\u9879\u5217\u8868\u4e2d\u91cd\u590d\u51fa\u73b0\uff0c\u5e76\u5728\u641c\u7d22\u65f6\u4ea7\u751f\u4e00\u6b21\u53c8\u4e00\u6b21\u7684\u70b9\u51fb\u3002\u6700\u540e\u662fHyperCard\u7684\u5c40\u9650\u6027&#39\uff1bs\u7684\u641c\u7d22\u673a\u5236\uff08\u5b83\u5c06\u4f60\u5e26\u5230\u5361\u7247\uff0c\u53ea\u663e\u793a\u7b2c\u4e00\u4e2a\u5339\u914d\u5b9e\u4f8b\u7684\u7b2c\u4e00\u4e2a\u5355\u8bcd\uff09\u52a0\u5267\u4e86\u4e0a\u8ff0\u95ee\u9898\u3002\u4e00\u79cd\u641c\u7d22\u673a\u5236\u4f1a\u751f\u6210\u6a21\u7cca\u70b9\u51fb\u5217\u8868\uff08\u8fd9\u6837\u5728\u641c\u7d22PowerTalk\u65f6\uff0c\u4f60\u4e5f\u4f1a\u5f97\u5230PowerTlk\u548cPwerTalk\uff09\uff0c\u5e76\u4e0e\u5468\u56f4\u7684\u4e0a\u4e0b\u6587\u4e00\u8d77\u663e\u793a\uff0c\u8fd9\u5c06\u975e\u5e38\u6709\u7528\u3002\u56e0\u6b64\uff0cProteus\u4e2d\u7684\u6587\u672c\u641c\u7d22\u4e3b\u8981\u5728\u4ee5\u4e0b\u60c5\u51b5\u4e0b\u6709\u7528\uff1a1\uff09\u8bd5\u56fe\u6c47\u603b\u9879\u76ee\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\uff08\u5373\uff0c\u8bb8\u591a\u70b9\u51fb\u6b63\u662f\u60a8\u60f3\u8981\u7684\uff09\uff1b2\uff09 \u5728\u641c\u7d22\u53ef\u80fd\u62fc\u5199\u6b63\u786e\u7684\u76f8\u5bf9\u552f\u4e00\u7684\u76ee\u6807\uff08\u4f8b\u5982\uff0c\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u5b57\u7b26\u4e32\u7684\u4e00\u90e8\u5206\uff0c\u5982&#34\uff1bboombox&#34\uff1b\u62163\uff09\u65f6\uff0c\u5df2\u77e5\u9879\u76ee\u7684\u5927\u81f4\u4f4d\u7f6e\uff0c\u4ee5\u4fbf\u5c06\u641c\u7d22\u9650\u5236\u5728\u8be5\u793e\u533a\u3002\n\u5bfb\u627e\u7684\u7b2c\u4e8c\u4e2a\u7b56\u7565\u662f\uff0c\u5f53\u4f60\u8ba4\u4e3a\u4ee5\u540e\u53ef\u80fd\u60f3\u627e\u5230\u5b83\u4eec\u65f6\uff0c\u6807\u8bb0\u5b83\u4eec\u3002Proteus\u63d0\u4f9b\u4e86\u4e24\u79cd\u673a\u5236\uff1a\u90ae\u7968\u548c\u72d7\u8033\u6735\u3002\u90ae\u7968\u662f\u4e00\u79cd\u63d0\u4f9b\u7279\u5b9a\u4e3b\u9898\u56fe\u4e66\u6807\u8bb0\u7684\u65b9\u5f0f\u2014\u2014Proteus\u6709\u5730\u5740\u3001\u53c2\u8003\u6587\u732e\u548c&#39\u7684\u90ae\u7968\uff1b\u6709\u8da3\u7684\u4e1c\u897f&#39; \u7528\u6237\u53ef\u4ee5\u9009\u62e9\u4e00\u79cd\u7c7b\u578b\u7684\u6233\u8bb0\uff0c\u7136\u540e\u53ef\u4ee5\u4ece\u4e00\u4e2a\u6233\u8bb0\u8df3\u5230\u4e0b\u4e00\u4e2a\u6233\u8bb0\u3002\u72d7\u8033\u6735\u4e0e\u90ae\u7968\u76f8\u4f3c\uff0c\u53ea\u662f\u6709\u70b9\u7b80\u5355\uff1a\u5b83\u4eec\u7c7b\u4f3c\u4e8e\u6298\u53e0\u4e00\u9875\u7684\u4e00\u89d2\u3002\u5c31\u50cf\u90ae\u7968\u4e00\u6837\uff0c\u7528\u6237\u53ef\u4ee5\u4ece\u4e00\u53ea\u72d7\u8033\u6735\u8df3\u5230\u4e0b\u4e00\u53ea\u72d7\u8033\u6735\u3002\u6211\u4e00\u4e2a\u6708\u7528\u51e0\u6b21\u72d7\u8033\u6735\uff1b\u7136\u800c\uff0c\u6211\u5f88\u5c11\u4f7f\u7528\u90ae\u7968\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u4e0e\u5f00\u9500\u6709\u5173\u3002\u867d\u7136\u90ae\u7968\u5f88\u5bb9\u6613\u4f7f\u7528\uff0c\u53ea\u9700\u8981\u70b9\u51fb\u4e00\u4e0b\u5c31\u53ef\u4ee5\u5728\u67d0\u7269\u4e0a\u76d6\u7ae0\uff0c\u5982\u679c\u6211&#39\uff1b\u6211\u6b63\u5728\u4ece\u4e8b\u6211\u76ee\u524d\u4e0d\u559c\u6b22\u7684\u6d3b\u52a8&#39\uff1bdon\u2019\u4e0d\u8981\u8003\u8651\u5728\u7269\u54c1\u4e0a\u76d6\u7ae0\u7684\u53ef\u53d6\u6027\uff0c\u6216\u8005\u5982\u679c\u6211\u8fd9\u6837\u505a\u4e86\uff0c\u6211\u901a\u5e38\u4e0d\u4f1a&#39\uff1b\u6211\u4e0d\u60f3\u6253\u65ad\u6211\u7684\u6d3b\u52a8\u3002\u5982\u679c\u6211\u51b3\u5b9a\u6253\u65ad\u81ea\u5df1\uff0c\u6211\u4ecd\u7136\u503e\u5411\u4e8e\u4e0d\u4f7f\u7528\u90ae\u7968\u3002\u76d6\u7ae0\u4e3b\u8981\u662f\u5c06\u884c\u52a8\u63a8\u8fdf\u5230\u4ee5\u540e\u7684\u4e00\u79cd\u65b9\u5f0f\uff1a\u6211\u5728\u5730\u5740\u4e0a\u76d6\u7ae0\uff0c\u4ee5\u4fbf\u5728\u5730\u5740\u6587\u4ef6\u4e2d\u8f93\u5165\u5730\u5740\uff1b\u6211\u5728\u5f15\u6587\u4e0a\u76d6\u7ae0\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u628a\u5b83\u4eec\u653e\u5728\u4e00\u4e2a\u7279\u6b8a\u7684\u5730\u65b9\uff1b\u7b49\u7b49\u5982\u679c\u6211\u51b3\u5b9a\u6253\u65ad\u6211\u7684\u6d3b\u52a8\uff0c\u6211\u901a\u5e38\u4f1a\u7ee7\u7eed\u505a\u6574\u4ef6\u4e8b\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740&#39\uff1b\u6211\u65e0\u6cd5\u89e3\u91ca\u4e3a\u4ec0\u4e48\u72d7\u8033\u6735\u7684\u4f7f\u7528\u9891\u7387\u6bd4\u90ae\u7968\u9ad8\u51fa\u5f88\u591a\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u903b\u8f91\u548c\u529f\u80fd\u4e0a\u90fd\u662f\u7b49\u4ef7\u7684\uff0c\u65e2\u9700\u8981\u70b9\u51fb\u521b\u5efa\uff0c\u4e5f\u9700\u8981\u70b9\u51fb\u6309\u94ae\u641c\u7d22\u3002\u6211\u8ba4\u4e3a\u539f\u56e0\u5728\u4e8e\uff0c\u5728\u67d0\u4e9b\u4e1c\u897f\u4e0a\u76d6\u7ae0\u4f3c\u4e4e\u9700\u8981\u66f4\u591a\u7684\u8ba4\u77e5\u5f00\u9500\u3002\u5728\u52a0\u76d6\u6807\u7b7e\u65f6\uff0c\u7528\u6237\u57fa\u672c\u4e0a\u662f\u5728\u51b3\u5b9a\u5c06\u7279\u5b9a\u6807\u7b7e\u5e94\u7528\u4e8e\u7279\u5b9a\u5185\u5bb9\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u7528\u72d7\u8033\u6735\u6807\u8bb0\u9875\u9762\u53ea\u4e0d\u8fc7\u662f\u8bf4&#39\uff1b\u6211\u53ef\u80fd\u60f3\u518d\u770b\u770b\u8fd9\u4e00\u9875\u4e0a\u7684\u5185\u5bb9&#39; \u72d7\u8033\u6735\u6bd4\u90ae\u7968\u66f4\u8f7b\u3002\nProteus\u6700\u64c5\u957f\u901a\u8fc7\u6d4f\u89c8\u8fdb\u884c\u641c\u7d22\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u67d0\u4e2a\u4e1c\u897f\u7684\u5927\u81f4\u4f4d\u7f6e\u5df2\u77e5\uff0c\u90a3\u4e48\u627e\u5230\u5b83\u7684\u4e00\u4e2a\u5e38\u89c1\u7b56\u7565\u5c31\u662f\u6d4f\u89c8\u76f8\u5e94\u7684\u76ee\u5f55\u3002\u6211\u53ef\u80fd\u8ba4\u8bc6\u6211&#39\uff1b\u6211\u6b63\u5728\u641c\u7d22\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u8df3\u5230\u5b83\u3002\u6216\u8005\u6211\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e9b\u8ba9\u6211\u60f3\u8d77\u4e0a\u4e0b\u6587\u7684\u4e1c\u897f\uff0c\u4ece\u800c\u4ea7\u751f\u66f4\u591a\u5173\u4e8e\u6211&#39\uff1b\u6211\u5728\u5bfb\u627e\u3002\u5c06\u6bcf\u4e2a\u5185\u5bb9\u9875\u7684\u7b2c\u4e00\u884c\u5305\u542b\u5728TOC\u5c0f\u8282\u4e2d\u7684\u51b3\u5b9a\u88ab\u8bc1\u660e\u662f\u4e00\u4e2a\u597d\u7684\u51b3\u5b9a\u3002\uff08\u5f53\u7136\uff0c\u5e94\u8be5\u6ce8\u610f\u7684\u662f\uff0cTOC\u7684\u8bbe\u8ba1\u5e76\u6ca1\u6709\u8003\u8651\u5230\u8fd9\u4e00\u7528\u9014\u3002TOC\u662f\u5728\u539f\u59cb\u5f15\u6587\u5806\u6808\u7684\u80cc\u666f\u4e0b\u53d1\u5c55\u8d77\u6765\u7684\uff08\u89c1\u4e0b\u4e00\u5c0f\u8282\uff09\uff0c\u4f7f\u7528\u6bcf\u9875\u7b2c\u4e00\u884c\u7684\u60f3\u6cd5\u6e90\u81ea\u5bf9\u8bd7\u6b4c\u548c\u5f15\u6587\u9009\u96c6\u7d22\u5f15\u7684\u7c7b\u6bd4\u3002\uff09\nProteus\u4e00\u4e2a\u6709\u8da3\u7684\u65b9\u9762\u662f\uff0c\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u5b83\u7684\u57fa\u672c\u7ed3\u6784\u548c\u529f\u80fd\u4ee5\u53ca\u4f7f\u7528\u65b9\u5f0f\u90fd\u53d1\u751f\u4e86\u5f88\u5927\u7684\u53d8\u5316\u3002\nProteus\u5e76\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u7535\u5b50\u7b14\u8bb0\u672c\uff0c\u4e5f\u4e0d\u662f\u4e00\u4e2a\u63a2\u7d22\u5b9a\u5236\u548c\u957f\u671f\u5b9e\u7528\u6027\u95ee\u9898\u7684\u5de5\u5177\u800c\u8bde\u751f\u7684\u3002\u76f8\u53cd\uff0c\u5b83\u7ecf\u5386\u4e86\u4e00\u4e2a\u6e10\u8fdb\u7684\u6f14\u53d8\u3002Proteus\u6700\u521d\u662f\u4e00\u5806\u5f15\u8bed\u548c\u6ce8\u91ca\uff08\u6211\u7684\u505a\u6cd5\u662f\u4ece\u6700\u559c\u6b22\u7684\u4e66\u6216\u6587\u7ae0\u4e2d\u6284\u5f55\u5f15\u8bed\uff09\u3002\u5927\u7ea6\u4e00\u5e74\u540e\uff0c\u6211\u6709\u4e86\u8db3\u591f\u591a\u7684\u6761\u76ee\uff0c\u4f7f\u7528\u5b83\u4eec\u53d8\u5f97\u5f88\u9ebb\u70e6\uff0c\u6240\u4ee5\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\u76ee\u5f55\uff0c\u53ef\u4ee5\u5728\u6dfb\u52a0\u65b0\u7684\u5f15\u7528\u65f6\u91cd\u65b0\u7f16\u8bd1\u3002\u968f\u7740\u8d8a\u6765\u8d8a\u591a\u7684\u5361\u7247\u88ab\u6dfb\u52a0\u8fdb\u6765\uff0c\u4eba\u4eec\u5e0c\u671b\u628a\u5b83\u5206\u6210\u51e0\u4e2a\u5c0f\u8282\uff0c\u5e76\u6709\u4e00\u4e2a\u5206\u7ea7\u76ee\u5f55\u3002\u5927\u7ea6\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u6211\u610f\u8bc6\u5230&#39\uff1b\u518d\u591a\u505a\u4e00\u70b9\u5de5\u4f5c&#39\uff1b\u6211\u53ef\u4ee5\u6709\u4e00\u4e2a\u7535\u5b50\u7b14\u8bb0\u672c\uff0c\u53ef\u4ee5\u8ba9\u6211\u5728\u4e2a\u4eba\u5c42\u9762\u4e0a\u63a2\u7d22\u4e00\u4e9b\u5df2\u7ecf\u63cf\u8ff0\u8fc7\u7684\u4ee4\u4eba\u6cae\u4e27\u7684\u95ee\u9898\u3002\u5bf9\u4e8e\u666e\u7f57\u7279\u65af\uff0c\u6211\u5fc3\u91cc\u4e5f\u6709\u4e00\u4e2a\u5177\u4f53\u7684\u4efb\u52a1\uff1a\u6211\u4e00\u76f4\u60f3\u5199\u4e00\u7bc7\u8bba\u6587\uff0c\u5f15\u7528\u6211\u5728\u4e66\u5806\u4e2d\u6536\u96c6\u7684\u4e00\u4e9b\u5f15\u6587\uff0c\u6211\u8ba4\u4e3a\u80fd\u591f\u6982\u8ff0\u8fd9\u7bc7\u8bba\u6587\uff0c\u5e76\u5c06\u90e8\u5206\u5185\u5bb9\u4e0e\u76f8\u5173\u5f15\u6587\u8054\u7cfb\u8d77\u6765\u4f1a\u975e\u5e38\u6709\u7528\u3002\n\u4e2a\u4eba\u7535\u5b50\u7b14\u8bb0\u672c\u6709\u4e00\u4e2a\u81ea\u76f8\u77db\u76fe\u7684\u65b9\u9762\uff1a\u5b83\u4eec\u771f\u7684\u6ca1\u6709&#39\uff1b\u5728\u5927\u91cf\u6750\u6599\u88ab\u8f93\u5165\u4e4b\u524d\uff0c\u4f60\u4e0d\u4f1a\u53d8\u5f97\u6709\u7528\u3002\u7136\u800c\uff0c\u5728\u6548\u7528\u663e\u800c\u6613\u89c1\u4e4b\u524d\uff0c\u6709\u591a\u5c11\u4eba\u4f1a\u52aa\u529b\u8f93\u5165\u6750\u6599\uff1f\u6211\u79f0\u4e4b\u4e3a\u542f\u52a8\u95ee\u9898\u3002\u867d\u7136\u4ece\u4e00\u4e2a\u4eba\u7684\u7fa4\u4f53\u4e2d\u8fdb\u884c\u6982\u62ec\u662f\u5371\u9669\u7684\uff0c\u4f46Proteus\u7684\u6848\u4f8b\u4e3a\u521b\u4e1a\u95ee\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u7b54\u6848\u3002\u6700\u521d\uff0c\u666e\u7f57\u7279\u65af\u8bd5\u56fe\u901a\u8fc7\u4f5c\u5f0a\u6765\u89e3\u51b3\u521b\u4e1a\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u59cb\u4e8e\u5927\u91cf\u7684\u5f15\u6587\uff0c\u8fd9\u4e9b\u5f15\u6587\u662f\u5728\u51e0\u5e74\u5185\u9010\u6e10\u5efa\u7acb\u8d77\u6765\u7684\u3002\u7136\u800c\uff0c\u8fd9\u5931\u8d25\u4e86\uff0c\u56e0\u4e3a\u6700\u521d\u8bbe\u60f3\u7684Proteus\u7684\u521b\u4f5c/\u94fe\u63a5\u7528\u9014\u6ca1\u6709&#39\uff1bt pan out:\u592a\u9ebb\u70e6\u4e86\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0cProteus\u4e4b\u6240\u4ee5\u6ca1\u6709\u88ab\u629b\u5f03\uff0c\u662f\u56e0\u4e3a\u5b83\u88ab\u7528\u4f5c\u65e5\u8bb0\uff0c\u800c\u8fd9\u53cd\u8fc7\u6765\u53c8\u662f\u7531\u4fe1\u606f\u529f\u80fd\u7684\u7ed3\u5408\u63a8\u52a8\u7684\u3002\u4fe1\u606f\u4f20\u9012\u4e3aProteus\u7684\u7b14\u8bb0\u529f\u80fd\u589e\u52a0\u4e86\u534f\u4f5c\u4ef7\u503c\uff0c\u5e76\u4f7f\u5176\u53d8\u5f97\u6709\u7528\uff08\u5e76\u9f13\u52b1\u8f93\u5165\u4fe1\u606f\uff09\uff0c\u76f4\u5230\u6709\u8db3\u591f\u7684\u4fe1\u606f\u4f7fProteus\u53ef\u7528\u4e8e\u53c2\u8003\u76ee\u7684\u3002\uff08\u5c31\u50cfTOC\u7684\u60c5\u51b5\u4e00\u6837\uff0c\u4fe1\u606f\u4f20\u9012\u7684\u5168\u90e8\u91cd\u8981\u6027\u662f\u6ca1\u6709\u9884\u6599\u5230\u7684\u3002\u4fe1\u606f\u4f20\u9012\u6700\u521d\u88ab\u7eb3\u5165Proteus\u53ea\u662f\u56e0\u4e3a\u5b83\u5f88\u5bb9\u6613\u6dfb\u52a0\u3002\u6211\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2aX\u547d\u4ee4\u548c\u7528\u4e8e\u4fe1\u606f\u4f20\u9012\u7684\u811a\u672c\uff0c\u6211\u5728\u53e6\u4e00\u4e2a\u5806\u6808\u4e2d\u4f7f\u7528\u4e86\u5b83\uff0c\u6211\u7f16\u8f91\u7684\u4e00\u4efd\u65f6\u4e8b\u901a\u8baf\u7684\u7535\u5b50\u7248\u3002\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4fe1\u606f\u4f20\u9012\u662f\u4e00\u4e2a\u5931\u8d25\uff1bfe\u81f3\u5c11\u6709\u5341\u51e0\u4e2a\u4eba\u4f7f\u7528\u8fc7\u5b83\u3002\uff09\n\u5728\u5236\u4f5cProteus\u7684\u524d\u8eab\uff08\u7535\u5b50\u7b14\u8bb0\u672c\u7684\u539f\u59cb\u5de5\u4f5c\u539f\u578b\uff09\u65f6\uff0c\u6211\u4e0e\u53e6\u4e00\u4f4d\u8bbe\u8ba1\u5e08\u5c31\u4eba\u4eec\u5e0c\u671b\u7535\u5b50\u7b14\u8bb0\u672c\u6709\u591a\u5927\u7684\u7ed3\u6784\u5c55\u5f00\u4e86\u6301\u7eed\u7684\u8fa9\u8bba\u3002\u6211\u58f0\u79f0\uff0c\u6211\u60f3\u8981\u7684\u662f\u975e\u5e38\u7b80\u5355\u7684\u4e1c\u897f\uff1a\u53ea\u662f\u4e00\u5957\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5217\u7684\u9875\u9762\u3002\u4eba\u4eec\u4f1a\u6309\u65f6\u95f4\u8bb0\u4f4f\u4e8b\u60c5\uff0c\u6211\u8bf4\uff0c\u5982\u679c\u4f60\u5141\u8bb8\u4ed6\u4eec\u79fb\u52a8\u9875\u9762\uff0c\u521b\u5efa\u5206\u533a\uff0c\u4ed6\u4eec&#39\uff1b\u6211\u4eec\u53ea\u662f\u5f00\u59cb\u5931\u53bb\u4e00\u4e9b\u4e1c\u897f\uff0c\u800c\u6211\u4eec&#39\uff1bI\u2019\u6211\u5fc5\u987b\u5f15\u5165\u5404\u79cd\u5404\u6837\u7684\u529f\u80fd\u6765\u7ec4\u7ec7\u548c\u5bfc\u822a\u7b14\u8bb0\u672c\u7535\u8111\u3002\u968f\u7740\u666e\u7f57\u7279\u65af\u7684\u8fdb\u5316\uff0c\u5f88\u5feb\u5c31\u53d1\u73b0\u6211\u9519\u4e86\u3002\u800c\u6211\u6ca1\u6709&#39\uff1b\u5f53\u6211\u5bf9\u522b\u4eba\u60f3\u8981\u4ec0\u4e48\u7684\u76f4\u89c9\u662f\u9519\u8bef\u7684\u65f6\uff0c\u6211\u5e76\u4e0d\u611f\u5230\u60ca\u8bb6\uff0c\u6211\u60ca\u8bb6\u5730\u53d1\u73b0\u6211\u5bf9\u81ea\u5df1\u60f3\u8981\u4ec0\u4e48\u7684\u76f4\u89c9\u662f\u9519\u8bef\u7684\u3002\u4f46\u5b83&#39\uff1b\u8fd9\u662f\u65e0\u53ef\u4e89\u8fa9\u7684\u3002\u53d8\u5f62\u83cc\u8fdb\u5316\u8fc7\u7a0b\u4e2d\u6700\u660e\u663e\u7684\u8d8b\u52bf\u662f\u9010\u6e10\u589e\u52a0\u8d8a\u6765\u8d8a\u591a\u7684\u7ed3\u6784\u5c42\u3002\u666e\u7f57\u7279\u65af\u6700\u521d\u53ea\u662f\u4e00\u4e2a\u7b14\u8bb0\u672c\uff1b\u8fc7\u4e86\u4e00\u4f1a\u513f\uff0c\u5b83\u88ab\u5206\u6210\u4e86\u51e0\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u6709\u81ea\u5df1\u7684\u76ee\u5f55\u3002\u5728\u7a0d\u957f\u4e00\u70b9\u4e4b\u540e\uff0c\u589e\u52a0\u4e86\u5c0f\u8282\u548c\u5c0f\u8282TOC\u3002\u6700\u540e\uff0c\u7b14\u8bb0\u672c\u7684\u4e3b\u8981\u90e8\u5206\u88ab\u62c6\u5206\u6210\u5355\u72ec\u7684\u7b14\u8bb0\u672c\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e66\u67b6\u83dc\u5355\u8bbf\u95ee\u3002\u540c\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u4e00\u5f00\u59cb\u6211\u65e2\u4e0d\u60f3\u8981\u4e5f\u4e0d\u9700\u8981\u8fd9\u79cd\u7ed3\u6784\u3002\u53ea\u662f\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u6dfb\u52a0\u4e86\u8d8a\u6765\u8d8a\u591a\u7684\u4fe1\u606f\uff0c\u5e76\u5f00\u59cb\u5f00\u53d1\u4e0e\u4e4b\u4ea4\u4e92\u7684\u4e13\u95e8\u65b9\u5f0f\uff0c\u8fd9\u79cd\u589e\u52a0\u7684\u7ed3\u6784\u624d\u53d8\u5f97\u6709\u7528\uff0c\u53ef\u4ee5\u652f\u6301\u8bbf\u95ee\u548c\u6d4f\u89c8\uff0c\u4ee5\u53ca\u9694\u79bb\u529f\u80fd\u3002\n\u8fd9\u7ed9\u6211\u4eec\u5e26\u6765\u4e86\u53d8\u5f62\u83cc\u8fdb\u5316\u7684\u4e0b\u4e00\u4e2a\u8d8b\u52bf\uff1a\u4efb\u52a1\u7279\u5b9a\u4e13\u4e1a\u5316\u7a0b\u5ea6\u7684\u589e\u52a0\u3002\u5f53\u6211\u5f00\u59cb\u4ee5\u65b0\u7684\u65b9\u5f0f\u4f7f\u7528Proteus\u65f6\uff0c\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u4f1a\u5f00\u53d1\u652f\u6301\u65b0\u4f7f\u7528\u6a21\u5f0f\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u5c06Proteus\u7528\u4f5c\u65e5\u8bb0\u4e00\u5f00\u59cb\u5c31\u76f8\u5f53\u7b80\u5355\uff1a\u6587\u672c\u53ea\u9700\u8f93\u5165\u4e00\u4e2a\u7a7a\u767d\u7684\u975e\u4e13\u4e1a\u5185\u5bb9\u9875\u9762\u3002\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u6211\u5f00\u53d1\u4e86\u5404\u79cd\u7ea6\u5b9a\uff0c\u7136\u540e\u6700\u7ec8\u5b9e\u73b0\u4e86\u652f\u6301\u548c\u52a0\u5f3a\u8fd9\u4e9b\u7ea6\u5b9a\u7684\u529f\u80fd\u3002\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\u65e5\u8bb0\u9875\u4ee5\u65e5\u671f\u5f00\u59cb\u3002\u6700\u521d\uff0c\u65e5\u671f\u662f\u624b\u52a8\u8f93\u5165\u7684\u3002\u8fc7\u4e86\u4e00\u4f1a\u513f\uff0c\u6211\u521b\u9020\u4e86\u4e00\u4e2a&#34\uff1b\u6807\u9898&#34\uff1b\u6309\u94ae\u81ea\u52a8\u751f\u6210\u5f53\u5929\u7684\u65e5\u671f\u3002\u5728\u5199\u8fd9\u7bc7\u6587\u7ae0\u65f6\uff0c\u65b0\u7684\u4e00\u5e74\u7684\u5de5\u4f5c\u7b14\u8bb0\u672c\u5df2\u7ecf\u751f\u6210\uff0c\u65e5\u8bb0\u9875\u9762\u4e2d\u5d4c\u5165\u4e86\u65e5\u671f\u3002\u968f\u7740\u5f85\u529e\u4e8b\u9879\u5217\u8868\u7684\u4f7f\u7528\u8d8a\u6765\u8d8a\u9891\u7e41\uff0c\u652f\u6301\u5176\u7279\u5b9a\u64cd\u4f5c\u7684\u6309\u94ae\u51fa\u73b0\u4e86\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a&#39\uff1b\u62d6\u5ef6\u6309\u94ae&#39\uff1b\uff0c\u5b83\u5c06\u9009\u5b9a\u7684\u5f85\u529e\u4e8b\u9879\u79fb\u52a8\u5230\u660e\u5929\u7684\u9875\u9762\uff1b\u4e00\u4e2a&#39\uff1b\u5f85\u529e\u4e8b\u9879\u6309\u94ae&#39\uff1b\u5b83\u590d\u5236\u9009\u5b9a\u7684\u6587\u672c\uff08\u901a\u5e38\u6765\u81ea\u6ce8\u91ca\uff09\uff0c\u5e76\u5c06\u5176\u63d2\u5165\u5f85\u529e\u4e8b\u9879\u5217\u8868\u3002\uff09\u4e00\u4e2a\u7528\u7834\u6298\u53f7\u5206\u9694\u4e0d\u540c\u9879\u76ee\u7684\u60ef\u4f8b\u662f\u7528&#34---&#34; \u6309\u94ae\uff0c\u5b83\u4f1a\u81ea\u52a8\u7ed8\u5236\u4e00\u6761\u865a\u7ebf\u3002\n\u8fd9\u4e9b\u90fd\u662f\u5c0f\u4e8b\u3002\u7136\u800c\uff0c\u5b83\u4eec\u786e\u5b9e\u5360\u7528\u4e86\u5927\u91cf\u6709\u9650\u7684\u63a7\u5236\u7a7a\u95f4\uff0c\u5e76\u6709\u52a9\u4e8e&#34\uff1b\u6bcf\u65e5\u7b14\u8bb0&#34\uff1b\u4ece\u4e00\u822c\u5185\u5bb9\u9875\u5230\u7279\u5b9a\u4e8e\u65e5\u8bb0\u7684\u9875\u9762\u3002\u4efb\u52a1\u7279\u5b9a\u63a7\u4ef6\u7684\u51fa\u73b0\u4e5f\u589e\u52a0\u4e86\u5c06\u7b14\u8bb0\u672c\u7684\u65e5\u8bb0\u90e8\u5206\u62c6\u5206\u4e3a\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\u7684\u538b\u529b\u3002\u4e5f\u8bb8\u6700\u91cd\u8981\u7684\u662f\uff0c\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\u529f\u80fd\u7684\u51fa\u73b0\u5bfc\u81f4\u4e86\u7b14\u8bb0\u672c\u7535\u8111\u7684\u65b0\u7ed3\u6784\u7279\u5f81\uff0c\u8fd9\u4e9b\u7279\u5f81\u53ef\u4ee5\u7528\u6765\u652f\u6301\u5f00\u53d1\u66f4\u591a\u7279\u5b9a\u4e8e\u4efb\u52a1\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0c\u4e00\u65e6&#34---&#34; \u5b9e\u73b0\u4e86\u7528\u4e8e\u5206\u9694\u9879\u76ee\u7684\u6309\u94ae\uff0c\u5f88\u5bb9\u6613\u521b\u5efa\u4e00\u4e2a\u4ece\u4e00\u4e2a\u9879\u76ee\u8df3\u5230\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u6309\u94ae\uff0c\u56e0\u4e3a\u7cfb\u7edf\u53ef\u4ee5\u5224\u65ad\u4e00\u4e2a\u65b0\u9879\u76ee\u662f\u7531\u7279\u5b9a\u6570\u91cf\u7684\u7834\u6298\u53f7\u6807\u8bb0\u7684\uff1b\u5728\u6b64\u4e4b\u524d\uff0c\u5f53\u865a\u7ebf\u5206\u9694\u7b26\u662f\u624b\u52a8\u751f\u6210\u7684\uff0c\u5e76\u4e14\u53ef\u80fd\u6709\u4efb\u610f\u6570\u91cf\u7684\u7834\u6298\u53f7\u65f6\uff0c\u7f16\u5199\u811a\u672c\u4ee5\u5c06\u5206\u9694\u7b26\u4e0e\u7834\u6298\u53f7\u7684\u5176\u4ed6\u7528\u9014\u533a\u5206\u5f00\u6765\u7684\u4efb\u52a1\u6bd4\u770b\u8d77\u6765\u5408\u7406\u7684\u8981\u591a\u3002\u5173\u4e8e\u666e\u7f57\u7279\u65af\u7684\u5176\u4ed6\u7528\u9014\uff0c\u4e5f\u6709\u7c7b\u4f3c\u7684\u6545\u4e8b\u3002Proteus\u7684\u5f15\u7528\u53c2\u8003\u90e8\u5206\u53d8\u5f97\u66f4\u52a0\u4e13\u4e1a\u5316\uff0c\u5e76\u88ab\u62c6\u5206\u6210\u81ea\u5df1\u7684\u7b14\u8bb0\u672c\u3002Proteus\u7684\u4e00\u90e8\u5206\u6700\u521d\u662f\u652f\u6301\u65e5\u7a0b\u5b89\u6392\u7684\uff0c\u540e\u6765\u9010\u6e10\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u548c\u4e13\u4e1a\u5316\uff0c\u76f4\u5230\u5b83\u88ab\u4e00\u4e2a\u5916\u90e8\u65e5\u5386\u5e94\u7528\u7a0b\u5e8f\u7684\u94fe\u63a5\u6240\u53d6\u4ee3\u3002\u5168\u5c40\u76ee\u5f55\u6700\u521d\u662f\u4e00\u4e2a\u5e38\u89c4\u7684TOC\uff08\u5982\u56fe3\u6240\u793a\uff09\uff0c\u540e\u6765\u624d\u9010\u6e10\u53d1\u5c55\u6210\u5982\u56fe2\u6240\u793a\u7684\u7c7b\u4f3c\u6d4f\u89c8\u5668\u7684\u7ed3\u6784\u3002\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u4ece\u4e00\u822c\u6027\u548c\u7b80\u5355\u6027\u8f6c\u5411\u4e13\u95e8\u5316\u548c\u590d\u6742\u6027\u3002\u867d\u7136\u6709\u5f88\u591a\u7b80\u5316\u7684\u4f8b\u5b50\uff08\u4f8b\u5982\uff0c\u5220\u9664\u672a\u4f7f\u7528\u7684\u529f\u80fd\uff09\uff0c\u4f46\u8fd9\u4e9b\u7b80\u5316\u901a\u5e38\u662f\u7531\u4e3a\u65b0\u529f\u80fd\u817e\u51fa\u7a7a\u95f4\u7684\u613f\u671b\u89e6\u53d1\u7684\u3002\n\u5f53\u6211\u5f00\u59cb\u4f7f\u7528Proteus\u65f6\uff0c\u6211\u6709\u4e00\u4e2a\u76f8\u5bf9\u7b80\u5355\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6613\u4e8e\u4f7f\u7528\u5e76\u5411\u4ed6\u4eba\u89e3\u91ca\u3002\u73b0\u5728\uff0c\u53d8\u5f62\u83cc\u8981\u590d\u6742\u5f97\u591a\uff1b\u5b83\u6709\u5f88\u591a\u53ea\u5bf9\u6211\u6709\u7528\u7684\u7279\u6027\uff0c\u8fd9\u4f7f\u5f97\u754c\u9762\u66f4\u590d\u6742\uff0c\u5176\u4ed6\u4eba\u4e5f\u66f4\u96be\u5b66\u4e60\u3002\u5728\u4e3a\u6211\u7684\u76ee\u7684\u5b9a\u5236\u7684\u8fc7\u7a0b\u4e2d\uff0cProteus\u5df2\u7ecf\u4ece\uff08\u4efb\u4f55\u4eba\uff09\u90fd\u53ef\u4ee5\u4f7f\u7528\u8f6c\u53d8\u4e3a\uff08\u5bf9\u6211\uff09\u6709\u7528\u3002\u8fd9\u5f15\u53d1\u4e86\u4e00\u4e9b\u6709\u8da3\u7684\u95ee\u9898\u3002\u4e00\u65b9\u9762\u7b80\u5355\u6027\u548c\u53ef\u7528\u6027\uff0c\u53e6\u4e00\u65b9\u9762\u4e13\u4e1a\u5316\u548c\u590d\u6742\u6027\u4e4b\u95f4\u7684\u6743\u8861\u6709\u591a\u666e\u904d\uff1f\u50cfOpenDoc\u8fd9\u6837\u627f\u8bfa\u652f\u6301\u5b9a\u5236\u7684\u6280\u672f\u4f1a\u4f53\u73b0\u8fd9\u4e00\u8d8b\u52bf\u5417\uff1f\u6216\u8005\uff0c\u4e0d\u90a3\u4e48\u7b3c\u7edf\u5730\u8bf4\uff0c\u5047\u8bbe\u4e09\u5e74\u524d\u6211\u88ab\u795e\u5947\u5730\u8d4b\u4e88\u4e86\u4eca\u5929\u7684\u7ed3\u6784\uff1a\u6211\u4f1a\u53d1\u73b0\u5b83\u6709\u7528\u8fd8\u662f\u6709\u7528\uff1f\u6211\u6000\u7591\u7b54\u6848\u662f\u5426\u5b9a\u7684\u3002\u6211\u7684\u731c\u6d4b\u662f\uff0c\u6211\u7684\u5de5\u4f5c\u5b9e\u8df5\u5fc5\u987b\u9010\u6e10\u53d1\u5c55\uff0c\u4ee5\u7b26\u5408\u666e\u7f57\u7279\u65af\u7684\u7ed3\u6784\u548c\u529f\u80fd\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e0d\u662f\u6211\u6839\u636e\u81ea\u5df1\u7684\u9700\u6c42\u9010\u6e10\u5b9a\u5236Proteus\u7684\u8fc7\u7a0b\uff0c\u5b83\u66f4\u50cf\u662f\u4e00\u4e2a\u534f\u540c\u8fdb\u5316\u7684\u8fc7\u7a0b\uff0c\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u7535\u5b50\u7b14\u8bb0\u672c\u548c\u6211\u7684\u5de5\u4f5c\u5b9e\u8df5\u76f8\u4e92\u5236\u7ea6\u3002\u4f8b\u5982\uff0c\u5982\u524d\u6240\u8ff0\uff0c\u4f7f\u7528Proteus\u4f7f\u6211\u66f4\u613f\u610f\u53c2\u52a0\u5927\u578b\u4f1a\u8bae\uff0c\u53cd\u8fc7\u6765\uff0c\u5728\u5927\u578b\u4f1a\u8bae\u4e2d\u66f4\u9891\u7e41\u5730\u4f7f\u7528Proteus\u4f7f\u6211\u80fd\u591f\u9002\u5e94\u5404\u79cd\u60c5\u51b5\uff0c\u4ee5\u4fbf\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u66f4\u6709\u6548\u5730\u4f7f\u7528\uff08\u4f8b\u5982\uff0c\u5173\u95ed\u58f0\u97f3\u7684\u7b80\u5355\u65b9\u6cd5\uff09\u3002\n\u5b83&#39\uff1b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u53d8\u5f62\u6746\u83cc\u7684\u8fdb\u5316\u4ec5\u4ec5\u662f\u56e0\u4e3a\n......", "note_en": "Figure 4. Detail of a content page: A: Section and Subsection titles. B: Page date (daily notes section only). C: First line of contents field (appears in tables of contents). D: To Do list E: Beginning of notes for first meeting.    I&#39;ve developed a fairly consistent daily routine for using Proteus:  I begin by going to the page of the day.  I update the To Do list at the top of the page (usually, the To Do list for that day has already been started).  I switch out of Proteus and check my email and calendar. This may result in further additions to the To Do list. Email that has content that I want to save or that I want to reflect on and answer later, may be pasted into the content area.  As the day goes on I usually have Proteus near at hand. I will use Proteus to update my To Do list, to jot brief notes (e.g. telephone messages; thoughts), and to compose and send email. When in meetings, I will usually make notes in Proteus; if the meeting is fairly large and is covering matters that don&#39;t concern me, I&#39;ll make notes on other things, update my To Do list, or do email, while monitoring what&#39;s going on in the meeting.\n So, in summary, frequent uses of Proteus (ranging from once or twice a week to many times a day) include:\n   I use Proteus for a number of other tasks, although their frequency is in the range of from once a week to once a month. These include:\n Reference. I use the search command to search through Proteus for information several times a month- occasionally a particular quotation from something I&#39;ve read, more often notes from a particular meeting.  Summarization. Once a month I do a report on my activities; this involves browsing the last month&#39;s worth of Proteus entries. Occasionally, I need to produce a summary of the results of a series of meetings, and will search for notes relevant to particular projects.  Diagramming. A couple times a month I will use Proteus to draw diagrams or models relevant to meetings or projects in which I&#39;m evolved. (This is a completely unanticipated use: I hadn&#39;t imagined that anyone-let alone me-would want to draw with a track ball!)  Capturing Reading Notes. If I read something useful, I&#39;ll often transcribe quotations from it into a special section of Proteus. This activity occurs in bursts-with several months intervening between bursts.\n  It is interesting to note that I do not use Proteus in the way I originally thought I would. The motivation behind transforming Proteus from a stack of quotations into a full-featured electronic notebook was the vision of being able to make notes for a paper, and link the notes to the relevant quotations. However, after finishing the work of programming Proteus, I quickly abandoned this use. I found that jumping to the quotations caused a disruptive context shift, and that the functionality provided by HyperCard text fields was insufficient. What I really wanted (and soon switched to) was an outliner into which I could copy my quotations, and where I could interleave them with notes and writing fragments. In general, I do not use Proteus to author structured documents.\n  Before Proteus I was a heavy user of paper notebooks. As with Proteus, I used paper notebooks as a sort of work diary: I started each day on a new page, kept a To Do list, meeting notes, and used it as a repository for other information. However, there are couple of striking differences (besides the obvious one that I didn&#39;t use it for composing email). First, I find that I make many more notes in Proteus-in part this is because I find typing easier and faster than writing, and in part because of synergetic effects I describe in the next section. Second, I rarely looked back through my paper notebooks-and when I did, I only tended to look at recent entries. In contrast, I re-read entries in Proteus frequently. There are several reasons for this: it is easier to search and browse; the content is more legible; and when I find something useful it can be copied and re-used.\n   Although there are many ways in which Proteus is quite useful, two are so important as to make it an essential part of my work activity.\n  Probably the most significant impact of Proteus is a sort of synergy among the activities of note making, reference, and messaging. Messaging drives this synergy. I write notes more often-and my notes are of higher quality-because I know that I am more likely to email them to others. Because the quality of my notes is higher, I reference (and reuse) them more when I&#39;m writing a relevant message or paper. Also, the increased quality means that I am more likely to understand them when I look back at them after six months. In turn, the increased frequency of reference also drives note making and messaging: the more use I get out of them, the more effort I&#39;m willing to put into them. Thus, there is a curious sort of ambiguity when writing in Proteus: my proximate goal may be keeping notes on an interesting meeting, but I also know in the back of my mind that they may also turn into a message or serve as grist for a future paper.\n  The other major aspect of Proteus&#39; usefulness has to do with its portability, and with the amount of personally relevant information in it. I typically carry Proteus with me and so I always have a variety of tasks of various sizes that I can work on. If I arrive at a meeting early, I can compose a message, review notes, or update my To Do list while waiting for others to arrive.     This has changed my behavior. I am more willing to go to large meetings where some or all of the content is of unknown relevance: if the meeting is relevant, I pay attention and take notes; if parts are irrelevant, I can work on other things while keeping half an ear on the meeting. I have had extremely productive work sessions when &#39;stuck&#39; in the middle of a row in the auditorium. While this may sound like a small thing, the degree to which it alleviates irritation at late-starting meetings, and anxiety about being stuck in irrelevant meetings, makes a significant difference in my life.\n  Although note making, messaging, and activity management are the primary uses of Proteus, information storage and retrieval plays an important role in supporting these tasks, as well as being useful independently. Proteus supports a variety of ways of searching for things. One can use text search, browse using the section and subsection TOCs, or search for items that have been specially marked in various ways.\n  One of the putative benefits of an electronic notebook is that you can use text search. This is not as useful as it might seem. There are three problems: First, a fact of life for me, and I suspect for most electronic notebook users, is that notes are written hastily, and hence contain frequent misspellings, typos, and abbreviations. Thus, standard keyword searches are not very effective in finding words which have been mistyped or hastily abbreviated. Second, I use many words much more frequently than I&#39;m aware of. Words like object, metaphor, interface, and communications are so frequent as to not be worth searching for, as are common project names. In this respect the use of To Do lists is a drawback, as important projects and items tend to recur in To Do lists and generate hit after hit when searching. Finally, the limitations of HyperCard&#39;s search mechanism (it takes you to the card, and shows only the first word of the first instance that matches) exacerbates the above problems. A search mechanism that would generate a list of fuzzy hits (so that when searching for PowerTalk, you&#39;d also get PowerTlk, and PwerTalk), shown with surrounding context, would be far more useful.    As a consequence of this, text search in Proteus is primarily useful when: 1) trying to put together a summary of what has happened on a project (i.e., many hits are just what you want); 2) when searching for a relatively unique target that is probably spelled correctly (e.g., part of an email address string such as &#34;boombox&#34;; or 3) when the approximate location of the item is known, so that the search can be limited to that neighborhood.\n  A second strategy for finding is to mark things when you think you may want to find them later. Proteus provides two mechanisms for this: stamps and dog-ears. A stamp is a way of providing a sort of topic-specific book mark- Proteus had stamps for addresses, reference citations, and &#39;interesting items.&#39; The user can select a type of stamp and can then jump from one stamp to the next. Dog-ears are similar to stamps except a bit simpler: they are the analog of folding over the corner of a page. Like stamps, the user can jump from one dog-ear to the next.    I use dog-ears several times a month; however, I rarely use stamps. One reason for this has to do with overhead. While stamps are easy to use, requiring no more than a click to stamp something, if I&#39;m engaged in my current activity I don&#39;t think about the desirability of stamping the item, or if I do, I often don&#39;t want to interrupt my flow of activity. If I do decide to interrupt myself, I still tend not to use stamps. Stamps are primarily a way of deferring actions until later: I\u00a0stamp addresses so I can enter them in my address file; I\u00a0stamp citations so I can put those in a special place; and so on. If I\u00a0decide to interrupt my activity, I typically just go ahead and do the whole thing.     However, this doesn&#39;t explain why dog-ears are used so much more frequently than stamps, since they are logically and functionally equivalent, both requiring a click to create, and both requiring clicking a button to search for. I believe that the explanation is that stamping something seems to require more cognitive overhead. In stamping something, the user is basically making the decision to apply a particular label to a particular piece of content. In contrast, marking a page with a dog-ear is simply saying &#39;I may want to look at something on this page again.&#39; Dog-ears are more light weight than stamps.\n  Proteus succeeds best at search by browsing. That is, a common strategy for finding something-if its approximate location is known-is to browse the appropriate table of contents. I may recognize what I&#39;m searching for, and can then jump directly to it. Or I may see something which reminds me of the context, and thus generates more cues about what I&#39;m searching for. The decision to include the first line of each content page in the subsection TOCs turned out to be a good one.     (Of course, it should be noted that TOCs were not designed with this use in mind. TOCs evolved in the context of the original quotations stack (see next subsection), and the idea of using the first line of each page was derived from an analogy to the indices of poetry and quotation anthologies.)\n  One interesting facet of Proteus is that it has changed considerably over time, both in terms of its underlying structure and function, and in how it was used.\n  Proteus did not spring into existence as an electronic notebook, or as a vehicle for exploring issues about customization and long term usefulness. Rather, it went through a gradual evolution.    Proteus began as a stack of quotations and notes (my practice is to copy down quotes from favorite books or articles). After a year or so, I had enough entries that using them became cumbersome, and so I added a table of contents that could be recompiled when new quotations were added. As more cards were added it became desirable to break it into subsections and to have a hierarchical table of contents.     About this time, I realized that with &#39;just a little more work&#39; I could have an electronic notebook that would allow me to explore on a personal level some of the frustrating issues already described. I also had a concrete task in mind for Proteus: I had been wanting to write a paper that drew upon a number of the quotations I had collected in the stack, and I thought it would be very useful to be able to outline the paper, and link parts of it to relevant quotations.\n  Personal electronic notebooks have a paradoxical aspect to them: they really don&#39;t become useful until considerable material has been entered, and yet how many people will exert the effort needed to enter material, before the utility is evident? I call this the start up problem. While it is dangerous to generalize from a population of one, the case of Proteus suggests an interesting answer to the start up problem.    Initially, Proteus tried to solve the start up problem by cheating, in that it began with a large number of quotations that had been gradually built up over a couple of years. However, this failed, in that the initially envisioned authoring/linking use for Proteus didn&#39;t pan out: it was too cumbersome. Instead, what saved Proteus from being abandoned was its use as a diary, and that in turn was driven by the incorporation of messaging functionality. Messaging added collaborative value to the note making functionality of Proteus, and permitted it to be useful (and encouraged the entry of information), until there was enough information to make Proteus useful for reference purposes.     (As in the case of TOCs, the full importance of messaging was not anticipated. Messaging was originally incorporated in Proteus only because it was easy to add. I already had an X-command and script for messaging that I had used in another stack, the electronic edition of a newsletter I edit. Ironically, messaging was a failure in that context; fewer than a dozen people ever made use of it.)\n  When working on the predecessor to Proteus (the original, working prototype of an electronic notebook), I had a running debate with another designer over how much structure people wanted in an electronic notebook. What I wanted, I claimed, was something very simple: just a temporally-ordered set of pages. People remember things by time, I said, and if you allow them to move pages around, and create sections, they&#39;ll just start losing things, and we&#39;ll have to introduce all sorts of functionality for organizing and navigating the notebook.    As Proteus evolved, it quickly became apparent that I was wrong. While I don&#39;t find it surprising when my intuitions about what other people want are wrong, I was surprised to discover that my intuitions about what I wanted were wrong. But it&#39;s incontestable. The most obvious trend in the evolution of Proteus is the gradual addition of more and more layers of structure. Proteus started out as one notebook; after a bit it was broken into sections, each with their own table of contents. After a bit longer subsections and subsection TOCs were added. And finally major sections of the notebooks were broken apart into separate notebooks which can be accessed through a bookshelf menu.    At the same time, it is important to note that at the beginning I neither wanted nor needed the structure. It was only as time went on, and I added more and more information, and begin to develop specialized ways of interacting with it, that the increased structure became useful for supporting access and browsing, and for segregating functionality.\n  This brings us to the next trend in the evolution of Proteus: the increasing degree of task-specific specialization. As I began using Proteus in new ways, after a while I would develop functionality that support the new mode of use. For example, the use of Proteus as a diary started out fairly simply: text was simply entered onto a blank, unspecialized content page. But as time went on I developed various conventions, and then eventually implemented functionality to support and reinforce those conventions. Some instances:\n The diary page begins with the date. Initially the date was entered manually. After a while, I created a &#34;header&#34; button to automatically generate the date for the day. As of this writing, the working notebook for a new year is generated, with the diary pages having the date embedded in them.  As the To Do list became more heavily used, buttons that supported particular operations on it appeared (e.g., a &#39;procrastinate button&#39;, that moves selected To Do items to tomorrow&#39;s page; a &#39;to do button&#39; that copies selected text (usually from notes), and inserts it in the To Do list.)  A convention of separating different items with dashes was codified with the &#34;---&#34; button, which automatically drew a line of dashes.\n These are all minor things. However, they do use up significant amounts of the limited space for controls, and contribute to the transformation of pages in the &#34;daily notes&#34; section from generic content pages to diary-specific pages. The appearance of task-specific controls also increased the pressure to split off the diary portion of the notebook into its own notebook. Perhaps most importantly, the appearance of task-specific functionality resulted in new structural features of the notebook which could then be used to support the development of more task-specific functionality. For example, once the &#34;---&#34; button for separating items was implemented, it was easy to create a button to jump from one item to the next because the system could tell that a new item was marked by the appearance of a particular number of dashes; prior to that, when dashed separators were generated manually and might have any number of dashes, the task of writing a script to distinguish separators from other uses of dashes was more work than seemed justified.    Similar stories can be told about other uses of Proteus. The quotation reference section of Proteus became more specialized, and was split off into its own notebook. A section of Proteus that started out to support scheduling, gradually became more complex and specialized, until it was replaced with links to an external, calendar application. The global Table of Contents began as a regular TOC (as in figure 3), and only gradually developed the browser-like structure shown in figure 2. Again and again there was a move from generality and simplicity towards specialization and complexity. And while there are many instances of periods of simplification (e.g., the removal of unused functionality), these simplifications were often triggered by the desire to make room for new functionality.\n  When\u00a0I began using Proteus, I had a relatively simple application that was easy to use and to explain to others. Now, Proteus is much more complex; it has quite a few features that are useful only to me, and that make the interface more complex and difficult to learn for anyone else. In the process of being customized for my purposes, Proteus has shifted from being usable (by anyone) to being useful (to me).     This raises some interesting questions. How general is this tradeoff between simplicity and usability on the one hand, and specialization and complexity on the other? Will technologies like OpenDoc, which promise to support customization, manifest this trend? Or, less generally, suppose that three years ago I had been magically given Proteus as it is structured today: would I have found it either usable or useful? I suspect the answer is no. My guess is that my work practices had to gradually evolve in consonance with the structure and function of Proteus. That is, rather than this being a process of me gradually customizing Proteus to my needs, it feels more like a process of co-evolution in which the electronic notebook and my work practices have mutually conditioned one another. For example, as previously noted, the use of Proteus resulted in me being more willing to attend large meetings, and in turn, more frequent use of Proteus in large meetings resulted in various adaptations for more effective use in such situations (e.g., an easy way to turn the sound off).\n  It&#39;s important to note that Proteus evolved only because H\n......", "posttime": "2022-02-14 23:56:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u53cd\u5c04,long,proteus", "title": "\u4e2a\u4eba\u7535\u5b50\u7b14\u8bb0\u672c\u7684\u8bbe\u8ba1\u548c\u957f\u671f\u4f7f\u7528\uff1a\u53cd\u5c04\u5206\u6790\uff081996\uff09", "title_en": "Design and Long-Term Use of a Personal Electronic Notebook: Reflective Analysis (1996)", "transed": 1, "url": "https://web.archive.org/web/20090831073107/http://www.visi.com/~snowfall/notebook.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u53cd\u5c04", "long", "proteus"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073187, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u8bf7\u6c42\u6709\u95ee\u9898\u3002\u6211\u4eec&#39\uff1b\u6211\u4eec\u6b63\u5728\u52aa\u529b\u5c3d\u5feb\u628a\u5b83\u4fee\u597d\u3002", "note_en": "There was a problem with this request. We&#39;re working on getting it fixed as soon as we can.", "posttime": "2022-02-14 23:56:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u8bf7\u6c42", "title": "Facebook\u652f\u4ed8", "title_en": "Facebook Pay", "transed": 1, "url": "https://pay.facebook.com/", "via": "", "real_tags": ["facebook", "\u8bf7\u6c42"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073186, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u5728SOSP\u4e0a\u5199\u7684\u6700\u540e\u51e0\u7bc7\u8bba\u6587\u4e4b\u4e00\u2014\u2014\u6211\u6b63\u5728\u5c1d\u8bd5\u4e00\u4e9b\u65b0\u7684\u4e1c\u897f\uff0c\u5e76\u5728\u8fd9\u91cc\u53d1\u5e03\u6211\u8ba1\u5212\u9605\u8bfb\u7684\u8bba\u6587\u961f\u5217\u3002\u8fd9\u4e9b\u8bba\u6587\u8bc4\u8bba\u53ef\u4ee5\u6bcf\u5468\u53d1\u9001\u5230\u4f60\u7684\u6536\u4ef6\u7bb1\uff0c\u4e5f\u53ef\u4ee5\u8ba2\u9605Atom\u8ba2\u9605\u6e90\u3002\u4e00\u5982\u65e2\u5f80\uff0c\u8bf7\u968f\u65f6\u5728Twitter\u4e0a\u53d1\u8868\u53cd\u9988\u6216\u5efa\u8bae\uff01\n\u8fd9\u7bc7ghOSt\u8bba\u6587\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5b9e\u73b0Linux\u8c03\u5ea6\u7684\u7cfb\u7edf\u3002\u8fd9\u7bc7\u8bba\u6587\u662f\u5173\u4e8eCPU\u8c03\u5ea6\u7684\uff0c\u800c\u4e0d\u662f\u6570\u636e\u4e2d\u5fc3\u8c03\u5ea6\u7684\uff08\u5c31\u50cf\u6211\u5728\u4e4b\u524d\u7684\u8bba\u6587\u56de\u987e\u4e2d\u63d0\u5230\u7684\uff09\u3002\u7528\u6237\u7a7a\u95f4\u4e2d\u7684\u7b56\u7565\u67e5\u770b\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u4e4b\u95f4\u7684\u533a\u522b\u3002\u5bf9\u4e8e\u6570\u636e\u4e2d\u5fc3\u5de5\u4f5c\u8d1f\u8f7d\u6765\u8bf4\uff0c\u64cd\u4f5c\u7cfb\u7edf\u8c03\u5ea6\u66f4\u4e3a\u590d\u6742\uff0c\u56e0\u4e3a\u5728\u51b3\u5b9a\u8981\u8fd0\u884c\u4ec0\u4e48\u65f6\u5019\u4ee5\u53ca\u4f55\u65f6\uff08\u4f8b\u5982\uff0c\u786e\u4fdd\u7528\u6237\u67e5\u8be2\u7684\u4f4e\u5ef6\u8fdf\uff09\u65f6\u9700\u8981\u8003\u8651\u5176\u4ed6\u56e0\u7d20\u3002\u4ee5\u524d\u7684\u7814\u7a76\u65e8\u5728\u5728\u505a\u51fa\u8c03\u5ea6\u51b3\u7b56\u65f6\u8003\u8651\u5e94\u7528\u7a0b\u5e8f\u7684\u66f4\u9ad8\u7ea7\u522b\u4e0a\u4e0b\u6587\u3002\u4e00\u4e2a\u793a\u4f8b\u8c03\u5ea6\u5668\u65b0\u5bbf\uff08Shinjuku\uff09\u65e8\u5728\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf\u3002\u901a\u8fc7\u5b9e\u65bd\u5b9a\u5236\u7684\u8c03\u5ea6\u7b56\u7565\uff0c\u8be5\u65b9\u6cd5\u80fd\u591f\u5b9e\u73b0\u9ad8\u8fbe6.6\u500d\u7684\u541e\u5410\u91cf\u548c88%\u7684\u5c3e\u90e8\u5ef6\u8fdf\uff0c\u53d6\u5f97\u4e86\u663e\u8457\u7684\u79ef\u6781\u6210\u679c\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u5b9a\u5236\u8c03\u5ea6\u5668\u53ef\u80fd\u5f88\u96be\u5b9e\u73b0\u3001\u90e8\u7f72\u548c\u7ef4\u62a4\u3002\u65b0\u5bbf\u5c31\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u8bba\u6587\u8fd8\u5f15\u7528\u4e86\u4e00\u7cfb\u5217\u4ee5\u6c99\u4e18\u4e3a\u4e3b\u9898\u7684\u9879\u76ee\uff0c\u6bd4\u5982\u5361\u62c9\u4e39\u548c\u96ea\u5357\u6208\uff0c\u4f5c\u4e3a\u8be5\u9886\u57df\u9047\u5230\u8026\u5408\u95ee\u9898\u7684\u524d\u671f\u5de5\u4f5c\u3002\u4e00\u4e2a\u5b9a\u5236\u8c03\u5ea6\u5668\u9762\u4e34\u8fd9\u4e9b\u95ee\u9898\u7684\u4f8b\u5b50\u2014\u2014\u5b83\u65e8\u5728\u51cf\u5c11\u6570\u636e\u4e2d\u5fc3\u5e94\u7528\u7a0b\u5e8f\u7684\u5c3e\u90e8\u5ef6\u8fdf\uff0c\u4f46\u9700\u8981\u5e94\u7528\u7a0b\u5e8f\u548c\u8c03\u5ea6\u5668\u4e4b\u95f4\u7684\u7d27\u5bc6\u8026\u5408\u3002\u8fd9\u79cd\u7d27\u5bc6\u8026\u5408\u610f\u5473\u7740\u5bf9\u5185\u6838\u7684\u66f4\u6539\u4e5f\u53ef\u80fd\u4f1a\u65e0\u610f\u4e2d\u5f71\u54cd\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8106\u5f31\u7684\u5b9e\u73b0\u548c\u9ad8\u6602\u7684\u6301\u7eed\u7ef4\u62a4\u6210\u672c\u3002\nghOSt\u65e8\u5728\u89e3\u51b3\u5b9a\u5236\u8c03\u5ea6\u5668\u53ca\u5176\u5b9e\u73b0\u8005\u6240\u9762\u4e34\u7684\u95ee\u9898\uff0c\u540c\u65f6\u4fc3\u8fdb\u7279\u5b9a\u4e8e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8c03\u5ea6\u5668\u6240\u5141\u8bb8\u7684\u663e\u8457\u6027\u80fd\u548c\u53ef\u4f38\u7f29\u6027\u63d0\u5347\u3002\u5176\u65b9\u6cd5\u7684\u5173\u952e\u662f\u5206\u79bb\u8c03\u5ea6\u903b\u8f91\u548c\u4e0e\u5185\u6838\u4ea4\u4e92\u7684\u7ec4\u4ef6\u3002\u88ab\u79f0\u4e3a\u7b56\u7565\u7684\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7a0b\u5e8f\u88ab\u79fb\u52a8\u5230\u7528\u6237\u7a7a\u95f4\u4e2d\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u76f4\u63a5\u4e0eLinux\u5185\u6838\u4ea4\u4e92\u7684\u76f8\u5bf9\u7a33\u5b9a\u7684\u4ee3\u7801\u4ecd\u4fdd\u7559\u5728\u5185\u6838\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4e3a\u7528\u6237\u7a7a\u95f4\u8c03\u5ea6\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0e\u4e4b\u4ea4\u4e92\u7684API\u3002\u8fd9\u79cd\u62c6\u5206\u65b9\u6cd5\u610f\u5473\u7740\u5b9a\u5236\u8c03\u5ea6\u5668\u7684\u8fd0\u884c\u4e0e\u4efb\u4f55\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u2014\u2014\u56e0\u6b64\uff0c\u5b83\u4eec\u53ef\u4ee5\u7528\u591a\u79cd\u8bed\u8a00\u5b9e\u73b0\uff0c\u4f7f\u7528\u73b0\u6709\u57fa\u7840\u8bbe\u65bd\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u4ee5\u66f4\u5feb\u7684\u901f\u5ea6\u90e8\u7f72\u5230\u66f4\u5e7f\u6cdb\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u3002\n\u672c\u6587\u7684\u4e3b\u8981\u8d21\u732e\u6709\u4e09\u4e2a\uff1a\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a\u5141\u8bb8\u81ea\u5b9a\u4e49\u8c03\u5ea6\u903b\u8f91\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\u7684\u7cfb\u7edf\uff0c\u4f7f\u7528\u8be5\u7cfb\u7edf\u5b9e\u73b0\u591a\u4e2a\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u4ee5\u53ca\u8bc4\u4f30\u4f53\u7cfb\u7ed3\u6784\uff08\u5305\u62ec\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff09\u3002\n\u7531\u4e8e\u5bf9\u5185\u6838\u4ee3\u7801\u7684\u9650\u5236\uff0c\u5b9e\u73b0\u8c03\u5ea6\u5668\u5f88\u56f0\u96be\uff0c\u6bd4\u5982\u5bf9\u8bed\u8a00\u7684\u9650\u5236\uff0c\u5728\u5185\u6838\u4e2d\u652f\u6301\u751f\u9508\u662f\u4e00\u9879\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u3002\u8c03\u8bd5\u5de5\u5177\u89c1\u524d\u9762\u5173\u4e8eHN\u4e0a\u5185\u6838\u8c03\u8bd5\u56f0\u96be\u7684\u8ba8\u8bba\u3002\n\u90e8\u7f72\u8c03\u5ea6\u7a0b\u5e8f\u66f4\u52a0\u56f0\u96be\uff0c\u56e0\u4e3a\u5347\u7ea7\u5185\u6838\u9700\u8981\u6280\u672f\u652f\u6301\uff0c\u800c\u4e0d\u662f\u6240\u6709\u5bf9\u5185\u6838\u7684\u66f4\u6539\u90fd\u9700\u8981\u91cd\u65b0\u542f\u52a8\u3002\u8f6c\u79fb\u5de5\u4f5c\u8d1f\u8f7d\u548c\u91cd\u65b0\u542f\u52a8\u673a\u5668\u7684\u8017\u65f6\u591a\u6b65\u9aa4\u8fc7\u7a0b\u3002\u5185\u6838\u5347\u7ea7\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff0c\u8fd9\u4f7f\u5f97\u8fd9\u4e2a\u8fc7\u7a0b\u66f4\u52a0\u56f0\u96be\u3002\n\u81ea\u5b9a\u4e49\u8c03\u5ea6\u7a0b\u5e8f\u5fc5\u987b\u8c03\u5ea6\u5185\u6838\u7ea7\u7ebf\u7a0b\uff0c\u800c\u4e0d\u662f\u7528\u6237\u7ea7\u7ebf\u7a0b\u3002\u8bf7\u53c2\u9605\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u652f\u6301\u7ebf\u7a0b\u4e4b\u95f4\u7684\u533a\u522b\uff1f-\u5728\u5185\u6838\u7ea7\u7ebf\u7a0b\u4e4b\u4e0a\u8c03\u5ea6\u7528\u6237\u7ea7\u7ebf\u7a0b\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u76f8\u5173\u7684\u5185\u6838\u7ea7\u7ebf\u7a0b\u5b9e\u9645\u8fd0\u884c\u3002\u672c\u6587\u6307\u51fa\u4e86\u4e24\u79cd\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u514b\u670d\u7528\u6237\u7ea7\u7ebf\u7a0b\u9650\u5236\u7684\u65b9\u6cd5\uff1a\u201c\uff081\uff09\u5c06CPU\u4e13\u7528\u4e8e\u8fd0\u884c\u7528\u6237\u7ebf\u7a0b\u7684\u672c\u673a\u7ebf\u7a0b\uff0c\u4ece\u800c\u4fdd\u8bc1\u9690\u5f0f\u63a7\u5236\u3002\u7136\u800c\uff0c\u6b64\u9009\u9879\u5728\u4f4e\u5de5\u4f5c\u8d1f\u8f7d\u5229\u7528\u7387\u4e0b\u6d6a\u8d39\u8d44\u6e90\uff0c\u56e0\u4e3a\u4e13\u7528CPU\u65e0\u6cd5\u4e0e\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u5171\u4eab\uff08\u8bf7\u53c2\u89c1\u00a74.2\uff09\uff0c\u5e76\u4e14\u9700\u8981\u56f4\u7ed5\u6269\u5c55\u5bb9\u91cf\u8fdb\u884c\u5e7f\u6cdb\u534f\u8c03\u3002\u6216\u8005\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\uff082\uff09\u4efb\u7531\u672c\u673a\u7ebf\u7a0b\u8c03\u5ea6\u5668\u6446\u5e03\uff0c\u5141\u8bb8\u5171\u4eabCPU\uff0c\u4f46\u6700\u7ec8\u4f1a\u5931\u53bb\u5bf9\u54cd\u5e94\u65f6\u95f4\u7684\u63a7\u5236\uff0c\u800c\u8fd9\u6b63\u662f\u4ed6\u4eec\u8f6c\u5411\u7528\u6237\u7ea7\u8fd0\u884c\u65f6\u7684\u539f\u56e0\u3002\" .\n\u4e3a\u7279\u5b9a\u5de5\u4f5c\u8d1f\u8f7d\u5b9a\u5236\u7684\u5b9a\u5236\u8c03\u5ea6\u5668\u4e5f\u5e26\u6765\u4e86\u6311\u6218\uff0c\u56e0\u4e3a\u5b83\u4eec\u4e0d\u80fd\u5f88\u597d\u5730\u9002\u5e94\u4e0d\u540c\u7684\u7528\u4f8b\uff08\u66f4\u4e0d\u7528\u8bf4\u5b83\u4eec\u7684\u5185\u90e8\u7ed3\u6784\u5f88\u590d\u6742\uff0c\u53ef\u80fd\u65e0\u6cd5\u5728\u591a\u4e2a\u8c03\u5ea6\u5668\u4e4b\u95f4\u5171\u4eab\uff09\u3002\n\u73b0\u6709\u7684\u5b9a\u5236\u8c03\u5ea6\u6280\u672f\u662f\u4e0d\u591f\u7684\uff0c\u5c24\u5176\u662f\u4f2f\u514b\u5229\u6570\u636e\u5305\u8fc7\u6ee4\u5668\uff08BPF\uff09Julia Evans\u5728BPF\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u5f88\u597d\u7684\u6587\u7ae0\uff0c\u5b83\u6700\u521d\u8bbe\u8ba1\u7528\u4e8e\u6355\u83b7\u548c\u8fc7\u6ee4\u5185\u6838\u5185\u90e8\u7684\u6570\u636e\u5305\u3002\u6700\u8fd1\uff0ceBPF\u5c06\u8fd9\u4e2a\u60f3\u6cd5\u6269\u5c55\u5230\u4e86\u5185\u6838\u7684\u5176\u4ed6\u90e8\u5206\u2014\u2014\u6709\u5173BPF/eBPF\u5982\u4f55\u5de5\u4f5c\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605eBPF\u7684\u5168\u9762\u4ecb\u7ecd\u3002\u56f4\u7ed5eBPF\u5de5\u5177\u8fd8\u6709\u4e00\u4e2a\u4ee4\u4eba\u5174\u594b\u7684\u751f\u6001\u7cfb\u7edf\u5efa\u8bbe\uff0c\u6bd4\u5982\u8be5\u5de5\u5177\u80cc\u540e\u7684\u516c\u53f8Cilium and Isopalent\u6700\u8fd1\u4eceAndreessen Horowitz\u90a3\u91cc\u7b79\u96c6\u4e86\u8d44\u91d1\u3002\u867d\u7136BPF\u7a0b\u5e8f\u975e\u5e38\u9177\uff0c\u4f46\u5b83\u4eec\u540c\u6b65\u8fd0\u884c\u5e76\u963b\u585eCPU\u2014\u2014\u4ece\u6027\u80fd\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u5e76\u4e0d\u7406\u60f3\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u672c\u6587\u786e\u5b9e\u63d0\u5230\u4f7f\u7528BPF\u5b9e\u73b0\u5feb\u901f\u8def\u5f84\u3002\n\u81ea\u5b9a\u4e49\u8c03\u5ea6\u903b\u8f91\u5e94\u8be5\u6613\u4e8e\u5b9e\u73b0\u548c\u6d4b\u8bd5\uff1a\u5c06\u8c03\u5ea6\u903b\u8f91\u4e0e\u5185\u6838\u5206\u79bb\u53ef\u4ee5\u7b80\u5316\u5f00\u53d1\u548c\u6d4b\u8bd5\u3002\n\u5e94\u8be5\u53ef\u4ee5\u8f7b\u677e\u5730\u4e3a\u8bb8\u591a\u4e0d\u540c\u7684\u7528\u4f8b\u521b\u5efa\u8c03\u5ea6\u903b\u8f91\uff1a\u4e0e\u4ee5\u524d\u5185\u7f6e\u5728\u5185\u6838\u4e2d\u7684\u4e13\u7528\u8c03\u5ea6\u7a0b\u5e8f\u4e0d\u540c\uff0cghOSt\u65e8\u5728\u6210\u4e3a\u4e00\u4e2a\u901a\u7528\u5e73\u53f0\uff0c\u53ef\u4ee5\u5728\u5176\u4e0a\u6784\u5efa\u8c03\u5ea6\u7a0b\u5e8f\u3002\n\u8c03\u5ea6\u5e94\u8be5\u80fd\u591f\u8de8\u591a\u4e2aCPU\u8fd0\u884c\uff1a\u73b0\u6709\u7684Linux\u8c03\u5ea6\u7a0b\u5e8f\u4f1a\u505a\u51fa\u6bcf\u4e2aCPU\u7684\u8c03\u5ea6\u51b3\u7b56\uff0c\u5e76\u4e14\u5f88\u96be\u5728\u4e00\u7ec4CPU\u4e0a\u6267\u884c\u8c03\u5ea6\u51b3\u7b56\u4ee5\u4f18\u5316\u5176\u4ed6\u5c5e\u6027\uff0c\u50cftail latency\u4e00\u6837\uff0c\u672c\u6587\u5f15\u7528\u4e86\u8bb8\u591a\u4ee5\u524d\u7684\u7cfb\u7edf\uff08\u6bd4\u5982Shenango\uff1a\u4e3a\u5ef6\u8fdf\u654f\u611f\u7684\u6570\u636e\u4e2d\u5fc3\u5de5\u4f5c\u8d1f\u8f7d\u5b9e\u73b0\u9ad8CPU\u6548\u7387\uff09\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u901a\u8fc7\u8de8\u591a\u4e2aCPU\u8fdb\u884c\u8c03\u5ea6\u6765\u5b9e\u73b0\u5176\u76ee\u6807\u3002\n\u65e0\u4e2d\u65ad\u66f4\u65b0\u548c\u6545\u969c\u9694\u79bb\uff1a\u5e94\u8be5\u5f88\u5bb9\u6613\u90e8\u7f72\u8c03\u5ea6\u903b\u8f91\uff0c\u5c31\u50cf\u5728\u673a\u5668\u4e0a\u8fd0\u884c\u5176\u4ed6\u4efb\u52a1\u4e00\u6837\uff0c\u5141\u8bb8\u5728\u4e0d\u9700\u8981\u91cd\u65b0\u542f\u52a8\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u66f4\u65b0\u3002\u6b64\u5916\uff0c\u8c03\u5ea6\u7b56\u7565\u4e2d\u7684\u6545\u969c\u6216\u5012\u9000\u4e0d\u5e94\u4f7f\u6574\u4e2a\u673a\u5668\u5d29\u6e83\u3002\n\u4e3a\u4e86\u5b9e\u73b0\u7cfb\u7edf\u7684\u76ee\u6807\uff0cghOSt\u5f15\u5165\u4e86\u7b56\u7565\uff08\u81ea\u5b9a\u4e49\u8c03\u5ea6\u903b\u8f91\uff09\u3002\u7b56\u7565\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u6267\u884c\uff0c\u76f8\u5173\u7684\u8c03\u5ea6\u51b3\u7b56\u88ab\u4f20\u9001\u5230\u5185\u6838\u3002\n\u7b56\u7565\uff08\u53ca\u5176\u8c03\u5ea6\u51b3\u7b56\uff09\u5728\u8fd0\u884c\u4e8e\u5185\u6838\u548c\u7528\u6237\u7a7a\u95f4\u7684\u4e09\u4e2a\u4e3b\u8981\u7ec4\u4ef6\u4e0a\u4f20\u64ad\uff1a\n\u8fd9\u91cc\u7684ghOSt\u8c03\u5ea6\u7c7b\u662f\u4e00\u7bc7\u5173\u4e8e\u8c03\u5ea6\u7c7b\u548cLinux\u7684\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7a0b\u5e8f\u7684\u4f1f\u5927\u6587\u7ae0\u3002\u8fd8\u6709\u4e00\u4e2a\u5173\u4e8e\u76f8\u5173sched\u7cfb\u7edf\u8c03\u7528\u7684\u624b\u518c\u9875\u3002\u5728Linux\u5185\u6838\u5185\u90e8\u8fd0\u884c\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u7cfb\u7edf\u8c03\u7528\u63a5\u53e3\uff0c\u5176\u4ed6\u7ec4\u4ef6\u4f7f\u7528\u8be5\u63a5\u53e3\u6765\u4f20\u8fbe\u8c03\u5ea6\u51b3\u7b56\u3002\n\u4ee3\u7406\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\u7b56\u7565\uff08\u81ea\u5b9a\u4e49\u8c03\u5ea6\u903b\u8f91\uff09\uff0c\u5e76\u505a\u51fa\u8c03\u5ea6\u51b3\u7b56\uff0c\u5e76\u4e0e\u5185\u6838\u7a7a\u95f4\u4e2d\u8fd0\u884c\u7684ghOSt\u8c03\u5ea6\u7c7b\u901a\u4fe1\u3002\n\u98de\u5730\u662f\u4e00\u7fa4\u7279\u5de5\u3002\u6bcf\u4e2a\u98de\u5730\u90fd\u6709\u4e00\u4e2a\u4e3b\u8981\u4ee3\u7406\uff0c\u8d1f\u8d23\u5236\u5b9a\u8c03\u5ea6\u51b3\u7b56\u3002\u5c06\u591a\u4e2a\u4ee3\u7406\u5206\u914d\u7ed9\u4e00\u4e2aenclave\u53ef\u4ee5\u5728\u4e3b\u4ee3\u7406\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\u63d0\u4f9b\u5197\u4f59\u3002\n\u5728\u5185\u6838\u6216\u7528\u6237\u7a7a\u95f4\u4e2d\u8fd0\u884c\u7684ghOSt\u7ec4\u4ef6\u9700\u8981\u4e00\u79cd\u76f8\u4e92\u63d0\u4f9b\u4fe1\u606f\u548c\u53cd\u9988\u7684\u65b9\u5f0f\u3002\u672c\u6587\u8ba8\u8bba\u4e86\u4e24\u79cd\u4e3b\u8981\u7684\u901a\u4fe1\u6d41\uff1a\u5185\u6838\u5230\u4ee3\u7406\u548c\u4ee3\u7406\u5230\u5185\u6838\u3002\n\u5728\u5185\u6838\u5230\u4ee3\u7406\u7684\u6d41\u7a0b\u4e2d\uff0c\u5185\u6838\u4f7f\u7528\u6d88\u606f\u548c\u6d88\u606f\u961f\u5217\u4e0e\u4ee3\u7406\u8fdb\u884c\u901a\u4fe1\u3002\u6b64\u5904\u5b9a\u4e49\u4e86\u6d88\u606f\u3002\u5f53\u5185\u6838\u4e2d\u53d1\u751f\u53ef\u80fd\u5f71\u54cd\u8c03\u5ea6\u51b3\u7b56\u7684\u4e8b\u4ef6\u65f6\uff0c\u5185\u6838\u4f1a\u5728\u961f\u5217\u4e0a\u53d1\u9001\u6d88\u606f\u3002\u6bcf\u4e2aCPU\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u7684\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u90fd\u4e0e\u4e00\u4e2aenclave\u5173\u8054\u3002\u5e76\u975e\u6bcf\u4e2a\u4ee3\u7406\u90fd\u6709\u4e00\u4e2a\u6d88\u606f\u961f\u5217\uff0c\u56e0\u4e3a\u5728\u67d0\u4e9b\u914d\u7f6e\u4e2d\uff0cenclave\u53ea\u6709\u4e00\u4e2a\u4e3b\u4ee3\u7406\u4ece\u5185\u6838\u63a5\u6536\u4fe1\u606f\u2014\u2014\u8bf7\u53c2\u8003\u4e0a\u9762\u7684enclave\u56fe\uff0c\u4ee5\u83b7\u5f97\u6b64\u60f3\u6cd5\u7684\u53ef\u89c6\u5316\u8868\u793a\u3002\u867d\u7136\u6709\u51e0\u79cd\u73b0\u6709\u7684\u961f\u5217\u65b9\u6cd5\uff08\u5305\u62ecio__-uring\u6216BPF\u73af\u5f62\u7f13\u51b2\u533a\uff09\uff0c\u4f46\u5e76\u4e0d\u662f\u6240\u6709\u7684\u5185\u6838\u7248\u672c\u90fd\u652f\u6301\u5b83\u4eec\u2014\u2014\u4f5c\u8005\u8ba4\u4e3a\u8fd9\u4f7f\u5f97ghOSt\u7684\u961f\u5217\u62bd\u8c61\u6210\u4e3a\u5fc5\u8981\u3002\n\u5728\u4ee3\u7406\u5230\u5185\u6838\u7684\u65b9\u5411\u4e0a\uff0c\u4ee3\u7406\u901a\u8fc7\u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u901a\u4fe1\uff0c\u4ee5\u4f20\u8fbe\u8c03\u5ea6\u51b3\u7b56\uff0c\u5e76\u5bf9\u5171\u4eab\u961f\u5217\u6267\u884c\u7ba1\u7406\u64cd\u4f5c\u3002\u4e3a\u4e86\u53d1\u9001\u8c03\u5ea6\u51b3\u7b56\uff0c\u4ee3\u7406\u521b\u5efa\u5e76\u63d0\u4ea4\u4e8b\u52a1\uff08\u6bd4\u5982TXN_CREATE\uff08\uff09\u548cTXNS_COMMIT\uff08\uff09\uff09\u3002\u4e8b\u52a1\u975e\u5e38\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u5141\u8bb8\u7b56\u7565\u8de8\u4e00\u7cfb\u5217CPU\u505a\u51fa\u8c03\u5ea6\u51b3\u7b56\uff0c\u786e\u4fdd\u6240\u6709\u6216\u6240\u6709\u4e8b\u52a1\u90fd\u80fd\u6210\u529f\uff0c\u6279\u5904\u7406\u8c03\u5ea6\u4fe1\u606f\u2014\u2014\u6279\u5904\u7406\u975e\u5e38\u5173\u952e\uff0c\u56e0\u4e3a\u5b83\u9650\u5236\u4e86\u5f71\u54cd\u5f85\u8c03\u5ea6CPU\u7684\u4e2d\u65ad\u6570\u91cf\uff08\u56e0\u4e3aghOSt\u7684\u6838\u5fc3\u7ec4\u4ef6\u9700\u8981\u54cd\u5e94\u4ee3\u7406\u4e8b\u52a1\uff09\u3002\n\u6700\u540e\uff0c\u5185\u6838\u5230\u4ee3\u7406\u548c\u4ee3\u7406\u5230\u5185\u6838\u7684\u901a\u4fe1\u90fd\u9762\u4e34\u4e00\u4e2a\u6311\u6218\uff1a\u8ddf\u4e0a\u7cfb\u7edf\u7684\u72b6\u6001\u3002\u5185\u6838\u9700\u8981\u786e\u4fdd\u5b83\u4e0d\u4f1a\u6267\u884c\u8fc7\u65f6\u7684\u8c03\u5ea6\u51b3\u7b56\uff0c\u4ee3\u7406\u9700\u8981\u786e\u4fdd\u5b83\u4e0d\u4f1a\u6839\u636e\u65e7\u7684\u4e16\u754c\u72b6\u6001\u505a\u51fa\u8c03\u5ea6\u51b3\u7b56\u3002\u7528\u4e8e\u8ddf\u8e2a\u72b6\u6001\u7684\u5173\u952e\u4fe1\u606f\u662f\u5b58\u5728\u4e8e\u6bcf\u4e2a\u4ee3\u7406\u7684\u5e8f\u5217\u53f7\u3002\n\u5728\u5185\u6838\u5230\u4ee3\u7406\u7684\u901a\u4fe1\u4e2d\uff0c\u5185\u6838\u5728\u6bcf\u6761\u6d88\u606f\u548c\u5171\u4eab\u5185\u5b58\u533a\u57df\u4e2d\u4e3a\u4ee3\u7406\u63d0\u4f9b\u5e8f\u5217\u53f7\u3002\u6bcf\u5f53\u5185\u6838\u53d1\u5e03\u65b0\u6d88\u606f\u65f6\uff0c\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5e8f\u5217\u53f7\u5c31\u4f1a\u88ab\u66f4\u65b0\u3002\u5f53\u4ece\u961f\u5217\u4e2d\u8bfb\u53d6\u6d88\u606f\u65f6\uff0c\u4ee3\u7406\u4f1a\u4f7f\u7528\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5e8f\u5217\u53f7\uff0c\u5e76\u5c06\u8be5\u503c\u4e0e\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5e8f\u5217\u53f7\u8fdb\u884c\u6bd4\u8f83\u3002\u5f53\u5df2\u4f7f\u7528\u6d88\u606f\u7684\u5e8f\u5217\u53f7\u4e0e\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u503c\u5339\u914d\u65f6\uff0c\u4ee3\u7406\u77e5\u9053\u5b83\u5df2\u8bfb\u53d6\u6700\u65b0\u72b6\u6001\u3002\n\u5728\u4ee3\u7406\u5230\u5185\u6838\u7684\u901a\u4fe1\u4e2d\uff0c\u4ee3\u7406\u5728\u5411\u5185\u6838\u53d1\u9001\u8c03\u5ea6\u51b3\u7b56\uff08\u901a\u8fc7\u4e8b\u52a1\uff09\u65f6\u5305\u542b\u5e8f\u5217\u53f7\u3002\u5185\u6838\u5c06\u4ee3\u7406\u4e8b\u52a1\u4e2d\u7684\u5e8f\u5217\u53f7\u4e0e\u5185\u6838\u77e5\u9053\u7684\u6700\u65b0\u5e8f\u5217\u53f7\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e8b\u52a1\u7684\u5e8f\u5217\u53f7\u592a\u65e7\uff0c\u5185\u6838\u5c31\u4e0d\u4f1a\u6267\u884c\u8c03\u5ea6\u51b3\u7b56\u3002\n\u4e3a\u4e86\u8bc4\u4f30ghOSt\uff0c\u672c\u6587\u8003\u8651\u4e86\u4e0e\u7cfb\u7edf\u76f8\u5173\u7684\u5f00\u9500\uff0c\u5c06ghOSt\u4e0e\u4ee5\u524d\u7684\u5b9a\u5236\u8c03\u5ea6\u5668\u5b9e\u73b0\u8fdb\u884c\u4e86\u6bd4\u8f83\uff0c\u5e76\u8bc4\u4f30\u4e86\u751f\u4ea7\u4e2d\u7684\u7cfb\u7edf\u3002\n\u4e3a\u4e86\u8bc4\u4f30\u7cfb\u7edf\u7684\u5f00\u9500\uff0c\u672c\u6587\u5305\u62ec\u4e86\u5fae\u57fa\u51c6\uff0c\u663e\u793a\u4e86\u5728\u8c03\u5ea6\u7cfb\u7edf\u7684\u4e0d\u540c\u90e8\u5206\u82b1\u8d39\u7684\u65f6\u95f4\uff0c\u8868\u660e\u5b83\u5177\u6709\u7ade\u4e89\u529b\u3002\n\u672c\u6587\u8fd8\u786e\u5b9a\u4e86\u4f7f\u7528ghOSt\u5b9e\u73b0\u7684\u5168\u5c40\u8c03\u5ea6\u5668\uff08\u5bf9\u7cfb\u7edf\u4e0a\u7684\u6240\u6709\u6838\u5fc3\u8fdb\u884c\u8c03\u5ea6\uff09\u7684\u6027\u80fd\u2014\u2014\u4e4b\u524d\u7684\u7814\u7a76\u8868\u660e\uff0c\u968f\u7740\u8c03\u5ea6\u5668\u5bf9\u7cfb\u7edf\u6709\u66f4\u5168\u9762\u7684\u4e86\u89e3\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7684\u6f5c\u5728\u4f18\u52bf\u3002\u8bc4\u4f30\u8868\u660e\uff0cghOSt\u80fd\u591f\u6269\u5c55\u5230\u6570\u767e\u4e07\u4e2a\u4e8b\u52a1\uff0c\u5373\u4f7f\u5b83\u8d1f\u8d23\u8bb8\u591aCPU\u3002\n\u63a5\u4e0b\u6765\uff0c\u8fd9\u7bc7\u8bba\u6587\u5c06\u9b3c\u9b42\u4e0e\u65b0\u5bbf\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u53c2\u89c1\u65b0\u5bbf\u8bba\u6587\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b9a\u5236\u7684\u8c03\u5ea6\u7cfb\u7edf\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u51cf\u5c11\u5c3e\u90e8\u5ef6\u8fdf\u3002\u6b64\u8bc4\u4f30\u7684\u76ee\u6807\u662f\u67e5\u770bghOSt\u7684\u6027\u80fd\u662f\u5426\u4e0e\u5b9a\u5236\u8c03\u5ea6\u5668\u7c7b\u4f3c\uff08\u7406\u8bba\u4e0a\uff0c\u901a\u8fc7\u4f7f\u7528\u5b9a\u5236\u7684\u4f18\u5316\u6280\u672f\uff0c\u5b9a\u5236\u8c03\u5ea6\u5668\u53ef\u4ee5\u5b9e\u73b0\u66f4\u9ad8\u7684\u6027\u80fd\uff09\u3002\u65b0\u5bbf\u4e0eghOSt\u6709\u5f88\u591a\u4e0d\u540c\u4e4b\u5904\u2014\u2014\u5b83\u4f7f\u7528\u4e13\u7528\u8d44\u6e90\uff08\u5360\u7528\u5168\u90e8CPU\u6216\u4e00\u7ec4CPU\u7684\u65cb\u8f6c\u7ebf\u7a0b\uff09\uff0c\u53d7\u9650\u4e8e\u4e00\u7ec4\u7269\u7406\u5185\u6838\uff0c\u5e76\u5229\u7528\u865a\u62df\u5316\u529f\u80fd\u6765\u63d0\u9ad8\u6027\u80fd\uff08\u5982\u53d1\u5e03\u4e2d\u65ad\uff09\u3002\u4f5c\u8005\u8fd8\u79fb\u690d\u4e86\u65b0\u5bbf\u8c03\u5ea6\u7b56\u7565\u672c\u8eab\uff0c\u4ee5\u4fbf\u4e0eghOSt\u517c\u5bb9\u3002\n\u8fd9\u4e24\u4e2a\u7cfb\u7edf\u8fd0\u884c\u751f\u6210\u7684\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u201c\u5176\u4e2d\u6bcf\u4e2a\u8bf7\u6c42\u90fd\u5305\u62ec\u5bf9\u5185\u5b58\u4e2dRocksDB\u952e\u503c\u5b58\u50a8\u7684GET\u67e5\u8be2\uff0c\u5e76\u6267\u884c\u5c11\u91cf\u5904\u7406\u201d\u3002\n\u9b3c\u9b42\u4e0e\u65b0\u5bbf\u7ade\u4e89\ud835\udf07s\u89c4\u6a21\u7684\u5c3e\u90e8\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5c3d\u7ba1\u5176\u65b0\u5bbf\u7b56\u7565\u7684\u4ee3\u7801\u884c\u6bd4\u5b9a\u5236\u7684\u65b0\u5bbf\u6570\u636e\u5e73\u9762\u7cfb\u7edf\u5c1182%\u3002ghOSt\u5728\u9ad8\u8d1f\u8f7d\u4e0b\u7684\u5c3e\u90e8\u5ef6\u8fdf\u7565\u9ad8\u4e8e\u65b0\u5bbf\uff0c\u5728\u65b0\u5bbf\u9971\u548c\u541e\u5410\u91cf\u76845%\u4ee5\u5185\u3002\n\u6700\u540e\uff0c\u672c\u6587\u9488\u5bf9ghOSt\u8fd0\u884c\u4e86\u4e00\u4e2a\u751f\u4ea7\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5e76\u5c06\u7ed3\u679c\u4e0e\u4f7f\u7528\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7a0b\u5e8f\uff08CFS\uff09\u7684\u673a\u5668\u6267\u884c\u7684\u76f8\u540c\u5de5\u4f5c\u8d1f\u8f7d\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u5173\u4e8e\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7a0b\u5e8f\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64\u5904\u7684\u201c\u8f83\u65e7\u201d\u90e8\u5206\uff0c\u4f46\u5b83\u4f3c\u4e4e\u662f\u6700\u8fd1\u66f4\u65b0\u7684\u3002\n\u5de5\u4f5c\u8d1f\u8f7d\u5305\u542b\u4e09\u79cd\u67e5\u8be2\u7c7b\u578b\uff08CPU\u548c\u5185\u5b58\u7ed1\u5b9a\u3001IO\u548c\u5185\u5b58\u7ed1\u5b9a\u4ee5\u53caCPU\u7ed1\u5b9a\uff09-ghOSt\u80fd\u591f\u51cf\u5c11\u524d\u4e24\u79cd\u8bf7\u6c42\u7684\u5c3e\u90e8\u5ef6\u8fdf\uff0c\u4f46\u662f\u5bf9\u7b2c\u4e09\u4e2a\u6ca1\u6709\u592a\u5927\u7684\u5f71\u54cd\u3002\u8bba\u6587\u786e\u5b9e\u6307\u51fa\uff0c\u901a\u8fc7\u4f7f\u7528\u7c7b\u4f3c\u4e8eLinux\u7684CFS\u5305\u542b\u7684nice\u503c\u7684\u903b\u8f91\u6765\u6269\u5c55ghOSt\u7b56\u7565\uff0c\u53ef\u4ee5\u5f71\u54cd\u8ba1\u7b97\u7ed1\u5b9a\u7684\u4efb\u52a1\u3002\n\u5728\u6211\u770b\u6765\uff0c\u8fd9\u4e00\u90e8\u5206\u6700\u7a81\u51fa\u7684\u662fghOSt\u5bf9\u5f00\u53d1\u4eba\u5458\u751f\u4ea7\u529b\u7684\u5f71\u54cd\uff1a\n\u5728\u5f00\u53d1\u5185\u6838\u8c03\u5ea6\u5668\u65f6\uff0c\u5199\u6d4b\u8bd5\u5199\u5468\u671f\u5305\u62ec\uff08a\uff09\u7f16\u8bd1\u5185\u6838\uff08\u6700\u591a15\u5206\u949f\uff09\uff0c\uff08b\uff09\u90e8\u7f72\u5185\u6838\uff0810-20\u5206\u949f\uff09\uff0c\u4ee5\u53ca\uff08c\uff09\u8fd0\u884c\u6d4b\u8bd5\uff08\u7531\u4e8e\u91cd\u542f\u540e\u6570\u636e\u5e93\u521d\u59cb\u5316\uff0c\u9700\u89811\u5c0f\u65f6\uff09\u3002\u56e0\u6b64\uff0c\u8fd9\u4f4d\u70ed\u5fc3\u7684\u5185\u6838\u5f00\u53d1\u4eba\u5458\u6bcf\u5929\u90fd\u8981\u75285\u79cd\u53d8\u4f53\u8fdb\u884c\u5b9e\u9a8c\u3002\u6709\u4e86ghOSt\uff0c\u65b0\u4ee3\u7406\u7684\u7f16\u8bd1\u3001\u90e8\u7f72\u548c\u542f\u52a8\u53ef\u4ee5\u8f7b\u677e\u5730\u5728\u4e00\u5206\u949f\u5185\u5b8c\u6210\u3002\nghOSt\u8bba\u6587\u5efa\u7acb\u5728\u4e4b\u524d\u7684\u4e00\u7cfb\u5217\u7814\u7a76\u7684\u57fa\u7840\u4e0a\uff0c\u8fd9\u4e9b\u7814\u7a76\u8bc1\u660e\u4e86\u8c03\u5ea6\u5bf9\u6570\u636e\u4e2d\u5fc3\u5de5\u4f5c\u8d1f\u8f7d\u7684\u53ef\u4f38\u7f29\u6027\u548c\u6027\u80fd\u6709\u591a\u4e48\u91cd\u8981\u3002\u8c03\u5ea6\u8fd8\u8fdc\u8fdc\u4e0d\u662f\u4e00\u4e2a\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u56e0\u4e3a\u201c\u6740\u624b\u5fae\u79d2\u7684\u5d1b\u8d77\u201d\u548c\u65b0\u7684\u8bbe\u5907\u7c7b\u578b\u2014\u2014\u6211\u671f\u5f85\u7740\u5728ghOSt\u5f00\u6e90\u9879\u76ee\u7684\u672a\u6765\u5de5\u4f5c\u4e2d\u7ee7\u7eed\u8ddf\u8fdb\uff01", "note_en": "This is one of the last papers I\u2019m writing about from SOSP - I am trying out something new and publishing the queue of papers I plan on reading  here. These paper reviews can  be delivered weekly to your inbox, or you can subscribe to the  Atom feed. As always, feel free to reach out on  Twitter with feedback or suggestions!\n  The ghOSt paper describes a system for implementing Linux scheduling   This paper is about CPU scheduling, not data center scheduling (like I covered in a  previous paper review).  policies in user space   See  What is difference between User space and Kernel space?. . Operating system scheduling is more complicated for data center workloads, as there are additional factors to consider when deciding what to run and when (like ensuring low latency for user queries). Previous research aims to take higher-level context about applications into consideration when making scheduling decisions   One example scheduler,  Shinjuku, is designed to reduce tail latency. The approach is able to achieve up to 6.6\u00d7 higher throughput and 88% lower tail latency by implementing a custom scheduling policy. , with dramatic positive results.\n Unfortunately, custom schedulers can be difficult to implement, deploy, and maintain.  Shinjuku is an example   The paper also cites a set of Dune-themed projects, like  Caladan and  Shenango as prior work in the space that runs into the coupling problem.  of a custom scheduler facing these problems - it is designed to reduce tail latency for data center applications, but requires tight coupling between an application and the scheduler. This tight coupling means that changes to the kernel could also unintentionally impact applications using the approach, potentially causing a brittle implementation with high ongoing maintenance costs.\n ghOSt aims to address the problems faced by custom schedulers and those who implement them, while facilitating the dramatic performance and scalability gains workload-specific schedulers allow. The key to its approach is separating scheduling logic and the components that interact with the kernel. Custom schedulers, called  policies, are moved into user space.\n In contrast, relatively stable code that interacts directly with the Linux kernel remains in kernel-space, and exposes an API for the user-space schedulers to interact with. This split approach means that custom schedulers run just like any other application - as a result, they can be implemented in variety of languages, tested using existing infrastructure, and deployed a faster rate for a wider set of workloads.\n  The paper makes three main contributions: design and implementation of a system that allows custom scheduling logic to run in user space, implementations of several custom schedulers using the system, and evaluation of the architecture (including in a production setting).\n   Implementing schedulers is hard because of the constraints posed on kernel code, like restrictions on languages   Support for  Rust in the kernel is a work in progress.  and debug tooling   See a previous discussion on difficulties with kernel debugging on  HN. .\n Deploying schedulers is even harder because upgrading a kernel requires   Technically, not all changes to the kernel require a  reboot.  a time-consuming multi-step process of shifting workloads and rebooting the machine. The potential for kernel upgrades to introduce performance regressions make the process more difficult.\n Custom schedulers must schedule kernel-level threads, not user-level threads   See  Difference between user-level and kernel-supported threads?.  - scheduling user-level threads on top of kernel-level threads does not guarantee that the associated kernel-level threads are actually run   The paper notes two approaches that allow developers to overcome the limitations of user-level threads: \u201c(1) Dedicate CPUs to the native threads running the user-threads, thus guaranteeing implicit control. However, this option wastes resources at low workload utilization, because the dedicated CPUs cannot be shared with another application (see \u00a74.2), and requires extensive coordination around scaling capacity. Alternatively, developers can (2) stay at the mercy of the native thread scheduler, allowing CPUs to be shared, but ultimately losing the control over response time that they turned to a user-level runtime for.\u201d .\n Custom schedulers tailored to specific workloads pose their own challenges because they do not adapt well to different use cases (not to mention their internals are complex and potentially not shared across multiple schedulers).\n Existing custom scheduling techniques are not sufficient, in particular Berkeley Packet Filter (BPF)   Julia Evans has a great post on  BPF, which was originally designed to capture and filter packets inside of the kernel. More recently,  eBPF extends the idea to other parts of the kernel - see  A thorough introduction to eBPF for more details on how BPF/eBPF works. There is also an exciting ecosystem building around eBPF tooling, like  Cilium and Isovalent, the company behind the tool, recently raised money from  Andreessen Horowitz. . While BPF programs are amazingly cool, they run synchronously and block the CPU - non-ideal from a performance perspective   It is worth noting that the paper does mention using BPF for fast-path .\n  Custom scheduling logic should be easy to implement and test: separating scheduling logic from the kernel simplifies development and testing.\n It should be possible to easily create scheduling logic for many different use cases: unlike previous specialized schedulers built into the kernel,  ghOSt aims to be a generic platform that schedulers can be built on top of.\n Scheduling should be able to operate across multiple CPUs: existing Linux schedulers make per-CPU scheduling decisions and it is difficult to execute scheduling decisions over a set of CPUs to optimize for other properties, like tail latency   The paper cites a number of previous systems (like  Shenango: Achieving high CPU efficiency for latency-sensitive datacenter workloads) that achieve their goals by scheduling across multiple CPUs .\n Non-disruptive updates and fault isolation: it should be easy to deploy scheduling logic like one would with other tasks running on a machine, allowing updates without requiring a reboot. Furthermore, failures or regressions in scheduling policies should not crash the whole machine.\n  To achieve the goals of the system, ghOSt introduces  policies (custom scheduling logic).  Policies are executed in user-space and associated scheduling decisions are communicated to the kernel.\n  Policies (and their scheduling decisions) propagate over three main components running across kernel and user space:\n The  ghOSt scheduling class   Here is a great article about scheduling classes and Linux\u2019s  Completely Fair Scheduler. There is also the  man page about the related  sched system call.  runs inside of the Linux kernel and provides a syscall interface that other components use to communicate scheduling decisions.\n Agents run  policies (custom scheduling logic) in user-space, and make scheduling decisions that they communicate to the  ghOSt scheduling class running in kernel-space.\n Enclaves are groups of  agents. Each  enclave has a primary agent that makes the scheduling decisions. Assigning multiple  agents to an enclave provides redundancy in the case of the primary agent failing.\n   ghOSt components running in kernel or user-space need a way to provide information and feedback to each other. The paper discusses the two primary communication flows:  kernel-to-agent and  agent-to-kernel.\n  In the  kernel-to-agent flow, the  kernel communicates to  agents using messages and message queues   Definition of the messages  here. . The kernel sends messages on queues when events happen in the kernel that could impact scheduling decisions. Each CPU has an associated queue, and each queue is associated with an enclave   Not every agent has a message queue because in some configurations there is a single primary agent for the enclave that is receiving information from the kernel - reference the enclave diagram above for a visual representation of this idea. . While there are several existing queue approaches (including  io_uring or  BPF ring buffers), not all kernel versions support them - the authors argue that this makes ghOSt\u2019s queue abstraction necessary.\n In the  agent-to-kernel direction, the  agent communicates by making system calls to communicate scheduling decisions and to perform management operations on the shared queue. To send scheduling decisions, the  agent creates and commits transactions (like  TXN_CREATE() and  TXNS_COMMIT()). Transactions are important because they allow a policy to make scheduling decisions across a range of CPUs, ensuring all or none succeed, while batching scheduling information - batching is critical because it limits the number of interrupts that impact the to-be-scheduled CPUs (as the kernel component of ghOSt needs to respond to agent transactions).\n Lastly, there is a challenge to both  kernel-to-agent and  agent-to-kernel communication: keeping up to date with the state of the system. The kernel needs to ensure that it doesn\u2019t execute out of date scheduling decisions, and the agent need to make sure that it doesn\u2019t make scheduling decisions based on an old state of the world. The key piece of information used to track state is a  sequence number that exists for every agent.\n In  kernel-to-agent commmunication, the kernel provides the  sequence number to agents in each message, and in a shared memory region. The sequence number in shared memory is updated by the kernel whenever it publishes a new message. The agent consumes the  sequence number from shared memory when reading messages from the queue, comparing the value to the  sequence number in shared memory. When the sequence number from consumed messages matches the value in shared memory, the agent knows it has read an up to date state.\n In  agent-to-kernel communication, the agent includes the  sequence number when sending scheduling decisions (via transactions) to the kernel. The kernel compares the  sequence number from the agent\u2019s transaction with the most recent sequence number the kernel is aware of. If the transaction\u2019s sequence number is too old, the kernel doesn\u2019t execute the scheduling decision.\n  To evaluate ghOSt, the paper considers the overheads associated with the system, compares ghOSt to previous custom scheduler implementations, and evaluates the system in production.\n  To evaluate the overheads of the system, the paper includes microbenchmarks that show the time spent in the different parts of the scheduling system, showing that it is competitive.\n  The paper also determines the performance of a global scheduler (that schedules all cores on a system) implemented with ghOSt - previous research shows the potential advantage of this approach as the scheduler has more complete knowledge of the system. The evaluation shows that ghOSt is able to scale to millions of transactions, even when responsible for many CPUs.\n   Next, the paper compares ghOSt to Shinjuku   See the  Shinjuku paper. , an example of a custom scheduling system tailored to reduce tail latency. The goal of this evaluation is to see whether  ghOSt performs similarly to a custom scheduler (which theoretically could achieve higher performance by using tailored optimization techniques). Shinjuku has a number of differences from  ghOSt - it uses dedicated resources (spinning threads that consume all of a CPU or set of CPUs), is constrained to a physical set of cores, and takes advantage of virtualization features to increase performance (like  posted interrupts). The authors also port the Shinjuku scheduling policy itself so that it is compatible with ghOSt.\n The two systems run a generated workload, \u201cin which each request includes a GET query to an in-memory RocksDB key-value store and performs a small amount of processing\u201d.\n  ghOSt is competitive with Shinjuku for \ud835\udf07s-scale tail workloads, even though its Shinjuku policy is implemented in 82% fewer lines of code than the custom Shinjuku data plane system. ghOSt has slightly higher tail latencies than Shinjuku at high loads and is within 5% of Shinjuku\u2019s saturation throughput.\n   Lastly, the paper runs a production workload against ghOSt and compares the results to the same workload executed by machines using the completely fair scheduler (CFS)   More info on the Completely Fair Scheduler  here - on the older side, but seems like it was updated relatively recently. .\n The workload contains three query types (CPU and memory bound, IO and memory bound, and CPU-bound) - ghOSt is able to reduce tail-latency for the first two types of requests, but doesn\u2019t have a huge impact for the third   The paper does note that it is possible to impact compute bound tasks by extending the ghOSt policy with similar logic to what Linux\u2019s CFS contains around  nice values. .\n What stood out to me the most about this section is actually ghOSt\u2019s impact on developer productivity:\n When developing a kernel scheduler, the write-test-write cycle includes (a) compiling a kernel (up to 15 minutes), (b) deploying the kernel (10-20 minutes), and (c) running the test (1 hour due to database initialization following a reboot). As a result, the enthusiastic kernel developer experiments with 5 variants per day. With ghOSt, compiling, deploying and launching the new agent is comfortably done within one minute.\n  The ghOSt paper builds on a body of previous research that demonstrates how critical scheduling is to the scalability and performance of datacenter workloads. Scheduling is far from a solved problem, especially because of the \u201crise of the killer microsecond\u201d and new device types - I\u2019m looking forward to following along future work on the  ghOSt open source project!", "posttime": "2022-02-14 23:49:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,fast,\u5185\u6838", "title": "GhOSt\uff1aLinux\u8c03\u5ea6\u7684\u5feb\u901f\u7075\u6d3b\u7684\u7528\u6237\u7a7a\u95f4\u59d4\u6d3e", "title_en": "GhOSt: Fast and Flexible User-Space Delegation of Linux Scheduling", "transed": 1, "url": "https://www.micahlerner.com/2021/12/28/ghost-fast-and-flexible-user-space-delegation-of-linux-scheduling.html", "via": "", "real_tags": ["linux", "fast", "\u5185\u6838"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073185, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5357\u4e54\u6cbb\u4e9a\u5dde\uff1b\u5357\u6851\u5a01\u5947\u7fa4\u5c9b\uff08\u82f1\u9551\uff09", "note_en": "South Georgia &amp; South Sandwich Islands  (GBP \u00a3)", "posttime": "2022-02-14 23:49:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u4e54\u6cbb\u4e9a\u5dde", "title": "Simula One\u2013Linux\u865a\u62df\u73b0\u5b9e\u8ba1\u7b97\u673a", "title_en": "Simula One \u2013 Linux VR Computer", "transed": 1, "url": "https://shop.simulavr.com/", "via": "", "real_tags": ["linux", "\u4e54\u6cbb\u4e9a\u5dde"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073184, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "C\u8bed\u8a00\uff08C\uff0cC++\uff0cjava\uff09\u53ef\u4ee5\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f46\u662f\u51e0\u5341\u5e74\u6765\uff0c\u6ca1\u6709\u4ec0\u4e48\u6539\u53d8\u4e86\u4ed6\u4eec\u7684\u4e00\u4e9b\u63a7\u5236\u7ed3\u6784\u7684\u4e0d\u8db3\u4e4b\u5904\u3002\u53e6\u4e00\u65b9\u9762\uff0cFortran\u5df2\u7ecf\u8fdb\u5316\u3002\u4e0b\u9762\u662f\u4e00\u4e9b\u8ba9\u5b9e\u73b0\u4e00\u4e9b\u7b97\u6cd5\u66f4\u5bb9\u6613\u7684\u4e8b\u60c5\u3002\uff08\u662f\u7684\uff0cC\u8bed\u8a00\u4e2d\u6709\u4e00\u4e9b\u53d8\u901a\u65b9\u6cd5\uff0c\u4f46\u5b83\u4eec\u6ca1\u6709\u90a3\u4e48\u4f18\u96c5\uff09\u3002\n\u5728\u7c7bC\u8bed\u8a00\u4e2d\uff0c\u4ece\u6df1\u5ea6\u5d4c\u5957\u7684\u5faa\u73af\u4e2d\u9000\u51fa\u5e76\u4e0d\u662f\u4e00\u4ef6\u5c0f\u4e8b\uff08\u4e0d\u4f7f\u7528goto\uff0c\u6240\u4ee5\u751a\u81f3\u4e0d\u8981\u53bb\u90a3\u91cc\uff09\u3002C\u4e2d\u7684break\u8bed\u53e5\u53ea\u5b58\u5728\u4e8e\u4e2d\u65ad\u6240\u5728\u7684\u5faa\u73af\u4e2d\u3002\u5982\u679c\u4e2d\u65ad\u51fa\u73b0\u5728\u5d4c\u5957\u5faa\u73af\u4e2d\uff0c\u5219\u4e2d\u65ad\u53ea\u4f1a\u79bb\u5f00\u5b83\u6240\u5728\u7684\u5faa\u73af\u3002\u5728C\u8bed\u8a00\u4e2d\uff0c\u6ca1\u6709\u4e00\u4e2abreak\u8bed\u53e5\u53ef\u4ee5\u7a81\u7834\u591a\u4e2a\u5d4c\u5957\u7ea7\u522b\u3002\u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u6761\u4ef6\uff0c\u4f8b\u5982\u5728C\u4e2d\uff1a\n\u7136\u800c\uff0cFortran\u5141\u8bb8\u547d\u540d\u5faa\u73af\uff0c\u56e0\u6b64\u9000\u51fa\u5d4c\u5957\u5faa\u73af\u4e0e\u547d\u540d\u8981\u9000\u51fa\u7684\u5faa\u73af\u4e00\u6837\u7b80\u5355\u3002\nC\u5728switch\u4e2d\u6ca1\u6709\u8303\u56f4\u2026\u597d\u5427\uff0c\u6240\u4ee5\u6709\u4e9b\u7f16\u8bd1\u5668\uff0c\u6bd4\u5982gnu C\uff0c\u63d0\u4f9b\u5b83\u4f5c\u4e3a\u6269\u5c55\uff0c\u4f46\u5b83\u4e0d\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002Fortran\u5141\u8bb8\u5b83\u4f5c\u4e3a\u6807\u51c6\u7684\u4e00\u90e8\u5206\u3002\n\u5982\u679c\u4f60\u5904\u7406\u6570\u7ec4\uff0c\u4f60\u5c31\u4f1a\u77e5\u9053\u5728\u4e00\u79cd\u8bed\u8a00\u4e2d\u8fdb\u884c\u6570\u7ec4\u5207\u7247\u662f\u591a\u4e48\u91cd\u8981\u2014\u2014\u56e0\u4e3a\u5b83\u4f7f\u64cd\u4f5c\u6570\u7ec4\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\u3002\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5199\u5faa\u73af\u5462\uff1f\u4e0b\u9762\u662fFortran\u4e2d\u7684\u4e24\u4e2a\u6570\u7ec4\u58f0\u660e\u3002\n\u5f53\u4f7f\u7528\u4e0a\u9762\u7684\u5355\u4e2a\u8bed\u53e5\u6253\u5370\u65f6\uff0c2D\u4e2d\u7684\u6570\u7ec4\u53ef\u80fd\u4f1a\u5f88\u6df7\u4e71\u3002\u53ef\u4ee5\u4f7f\u7528\u5355\u4e2a\u5faa\u73af\u548c\u5207\u7247\uff0c\u4f7f\u4e8b\u60c5\u770b\u8d77\u6765\u66f4\u597d\u3002\u5faa\u73af\u63a7\u5236\u884c\uff0c\u5217\u90fd\u4f7f\u7528\u201c\uff1a\u201d\u7b26\u53f7\u5305\u542b\u3002\nFortran\u9ed8\u8ba4\u7d22\u5f15\u6570\u7ec4\u4e3a1\u3002\u4f46\u662f\uff0c\u60a8\u5e76\u4e0d\u5c40\u9650\u4e8e\u6b64\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u4efb\u4f55\u6570\u7ec4\u7684\u7d22\u5f15\u8303\u56f4\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4f8b\u5b50\uff1a\n\u4f7f\u8bed\u8a00\u66f4\u5bb9\u6613\u9002\u5e94\u7b97\u6cd5\uff0c\u800c\u4e0d\u662f\u76f8\u53cd\u3002\n\u4e0d\u7ba1\u4eba\u4eec\u600e\u4e48\u8bf4\uff0c\u6302\u8d77else\u786e\u5b9e\u4f1a\u5728\u50cfC\u8fd9\u6837\u7684\u8bed\u8a00\u4e2d\u5f15\u8d77\u95ee\u9898\u3002\u6240\u6709Fortran\u63a7\u5236\u7ed3\u6784\u90fd\u88ab\u7ec8\u6b62\u7684\u4e8b\u5b9e\u963b\u6b62\u4e86\u8fd9\u4e00\u70b9\u3002\u4e5f\u4e0d\u9700\u8981{and}\u6216\u7c7b\u4f3c\u7684\u7b26\u53f7\u6765\u8868\u793a\u63a7\u5236\u5757\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u3002\nFortran\u5f88\u9177\uff0c\u56e0\u4e3a\u5b83\u6613\u4e8e\u5b66\u4e60\uff0c\u5f88\u96be\u4ea7\u751f\u707e\u96be\u6027\u7684\u9519\u8bef\uff0c\u800c\u4e14\u5bf9\u4e8e\u6570\u503c\u8ba1\u7b97\u6765\u8bf4\uff0c\u53ef\u80fd\u6ca1\u6709\u66f4\u5feb\u7684\u8bed\u8a00\u3002\u5f53\u7136\uff0c\u5b83\u53ef\u80fd\u7f3a\u4e4fC\u8bed\u8a00\u7684\u4e00\u4e9b\u4f4e\u7ea7\u529f\u80fd\uff0c\u4f46\u5e76\u975e\u6bcf\u79cd\u8bed\u8a00\u90fd\u5fc5\u987b\u5982\u6b64\u63a5\u8fd1\u7cfb\u7edf\u3002", "note_en": "C-like languages (C, C++, Java) can do many things, but over the decades nothing much has changed with the inadequacies of some of their control structures. Fortran on the other hand, has evolved. Here are some things that just make implementing some algorithms easier. (Yes there are work arounds in C, but they are not as elegant).\n  In C-like languages exiting from a deeply nested loop isn\u2019t exactly trivial (without the use of  goto, so don\u2019t even go there). A  break statement in C will only exist the loop the  break resides in. If the break appears inside a nested loop, the break only leaves the loop it is in. There is no single break statement in C that will break out of more than one level of nesting. It is possible to add an extra condition, for example in C:\n  Fortran however allows loops to be named, so exiting nested loops is as simple as naming the loop to be exited.\n   C doesn\u2019t do ranges in  switch\u2026 okay so some compilers, like gnu C offer it as an extension, but it\u2019s not part of the spec. Fortran allows it as part of the standard.\n   If you deal with arrays, you know how important it is to have array slicing in a language \u2013 because it makes manipulating arrays super easy. Why write loops when you don\u2019t have to? Here are two array declarations in Fortran.\n    Arrays in 2D can be messy when printed using the single statement above. It is possible to use a single loop, and slicing to make things look nicer. The loop controls the row, and the columns are all included using the \u201c:\u201d symbol.\n    Fortran by default indexes arrays at 1. But, you are not restricted to that, you can specify the index range of any array. Some examples are shown below:\n  Makes it much easier to bend a language to an algorithm, rather than the other way around.\n  Regardless of what people say, dangling  else does cause problems in languages like C. The fact that all Fortran control structures are terminated puts a stop to that. There is also no need for { and } or similar to signify the begin and end of a control block.\n  Fortran is cool because it is easy to learn, hard to make catastrophic errors with, and for numerical computation there is likely no faster language. Sure, it may lack some of the low-level features of C, but not every language has to be so close to the system.", "posttime": "2022-02-14 23:46:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u8a00,fortran,\u6570\u7ec4", "title": "\u4ec0\u4e48\u662fFortran\u8bed\u8a00\u6bd4C\u8bed\u8a00\u66f4\u597d", "title_en": "What Fortran does better than C-like languages", "transed": 1, "url": "https://craftofcoding.wordpress.com/2022/02/11/what-fortran-does-better-than-c-like-languages/", "via": "", "real_tags": ["\u8bed\u8a00", "fortran", "\u6570\u7ec4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073183, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Jump to navigation Jump to search Core War\u662f\u7531D.G.Jones\u548ca.K.Dewdney\u4e8e1984\u5e74\u5f00\u53d1\u7684\u4e00\u6b3e\u7f16\u7a0b\u6e38\u620f\uff0c\u5176\u4e2d\u5305\u542b\u4e24\u4e2a\u6216\u591a\u4e2a\u4f5c\u6218\u7a0b\u5e8f\uff08\u79f0\u4e3a&#34\uff1b\u52c7\u58eb&#34\uff1b\uff09\u4e89\u593a\u865a\u62df\u8ba1\u7b97\u673a\u7684\u63a7\u5236\u6743\u3002\u8fd9\u4e9b\u4f5c\u6218\u7a0b\u5e8f\u662f\u7528\u4e00\u79cd\u53eb\u505aRedcode\u7684\u62bd\u8c61\u6c47\u7f16\u8bed\u8a00\u7f16\u5199\u7684\u3002\n\u5728\u6e38\u620f\u5f00\u59cb\u65f6\uff0c\u6bcf\u4e2a\u4f5c\u6218\u7a0b\u5e8f\u90fd\u88ab\u968f\u673a\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u6bcf\u4e2a\u7a0b\u5e8f\u4f9d\u6b21\u6267\u884c\u4e00\u6761\u6307\u4ee4\u3002\u6e38\u620f\u7684\u76ee\u6807\u662f\u4f7f\u5bf9\u7acb\u7a0b\u5e8f\u7684\u8fdb\u7a0b\u7ec8\u6b62\uff08\u5982\u679c\u5b83\u4eec\u6267\u884c\u65e0\u6548\u7684\u6307\u4ee4\uff0c\u5c31\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff09\uff0c\u8ba9\u83b7\u80dc\u7684\u7a0b\u5e8f\u5b8c\u5168\u638c\u63e1\u673a\u5668\u3002\n\u6700\u65e9\u53d1\u5e03\u7684\u7ea2\u7801\u7248\u672c\u53ea\u5b9a\u4e49\u4e86\u516b\u6761\u6307\u4ee4\u3002ICWS-86\u6807\u51c6\u5c06\u6570\u5b57\u589e\u52a0\u523010\uff0c\u800cICWS-88\u6807\u51c6\u5c06\u6570\u5b57\u589e\u52a0\u523011\u3002\u76ee\u524d\u4f7f\u7528\u76841994\u5e74\u6807\u51c6\u8349\u6848\u670916\u6761\u8bf4\u660e\u3002\u7136\u800c\uff0cRedcode\u652f\u6301\u591a\u79cd\u4e0d\u540c\u7684\u5bfb\u5740\u6a21\u5f0f\u548c\u6307\u4ee4\u4fee\u9970\u7b26\uff08\u4ece1994\u5e74\u7684\u6807\u51c6\u8349\u6848\u5f00\u59cb\uff09\uff0c\u8fd9\u4e9b\u4fee\u9970\u7b26\u5c06\u5b9e\u9645\u53ef\u80fd\u7684\u64cd\u4f5c\u6570\u589e\u52a0\u52307168\u3002Redcode\u6807\u51c6\u672a\u5b9a\u4e49\u5e95\u5c42\u6307\u4ee4\u8868\u793a\uff0c\u5e76\u4e14\u4e0d\u63d0\u4f9b\u7a0b\u5e8f\u8bbf\u95ee\u5b83\u7684\u65b9\u6cd5\u3002\u7b97\u672f\u8fd0\u7b97\u53ef\u4ee5\u5728\u6bcf\u6761\u6307\u4ee4\u4e2d\u5305\u542b\u7684\u4e24\u4e2a\u5730\u5740\u5b57\u6bb5\u4e0a\u8fdb\u884c\uff0c\u4f46\u6307\u4ee4\u4ee3\u7801\u672c\u8eab\u652f\u6301\u7684\u552f\u4e00\u64cd\u4f5c\u662f\u590d\u5236\u548c\u6bd4\u8f83\u662f\u5426\u76f8\u7b49\u3002\n\u6bcf\u4e2a\u7ea2\u7801\u6307\u4ee4\u53ea\u5360\u7528\u4e00\u4e2a\u5185\u5b58\u63d2\u69fd\uff0c\u6267\u884c\u5468\u671f\u6b63\u597d\u4e3a\u4e00\u4e2a\u5468\u671f\u3002\u7136\u800c\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u6267\u884c\u6307\u4ee4\u7684\u901f\u5ea6\u53d6\u51b3\u4e8e\u961f\u5217\u4e2d\u5176\u4ed6\u8fdb\u7a0b\u7684\u6570\u91cf\uff0c\u56e0\u4e3a\u5904\u7406\u65f6\u95f4\u662f\u5e73\u5747\u5206\u914d\u7684\u3002\n\u5185\u5b58\u4ee5\u4e00\u6761\u6307\u4ee4\u4e3a\u5355\u4f4d\u5bfb\u5740\u3002\u5185\u5b58\u7a7a\u95f4\uff08\u6216\u5185\u6838\uff09\u5927\u5c0f\u6709\u9650\uff0c\u4f46\u53ea\u4f7f\u7528\u76f8\u5bf9\u5bfb\u5740\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5730\u57400\u603b\u662f\u6307\u5f53\u524d\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5730\u57401\u6307\u5b83\u540e\u9762\u7684\u6307\u4ee4\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002\u6700\u5927\u5730\u5740\u503c\u8bbe\u7f6e\u4e3a\u6bd4\u5185\u5b58\u4f4d\u7f6e\u6570\u5c11\u4e00\u4e2a\uff0c\u5e76\u5728\u5fc5\u8981\u65f6\u73af\u7ed5\u3002\u56e0\u6b64\uff0c\u5730\u5740\u548c\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u5b58\u5728\u4e00\u5bf9\u4e00\u7684\u5bf9\u5e94\u5173\u7cfb\uff0c\u4f46\u7ea2\u7801\u7a0b\u5e8f\u4e0d\u53ef\u80fd\u786e\u5b9a\u4efb\u4f55\u7edd\u5bf9\u5730\u5740\u3002\u6ca1\u6709\u9047\u5230\u65e0\u6548\u6216\u8df3\u8f6c\u6307\u4ee4\u7684\u8fdb\u7a0b\u5c06\u7ee7\u7eed\u65e0\u4f11\u6b62\u5730\u6267\u884c\u8fde\u7eed\u7684\u6307\u4ee4\uff0c\u6700\u7ec8\u8fd4\u56de\u5230\u5b83\u5f00\u59cb\u7684\u6307\u4ee4\u3002\n\u7ea2\u7801\u6a21\u62df\u5668\u4e0d\u662f\u4e00\u4e2a\u5355\u4e00\u7684\u6307\u4ee4\u6307\u9488\uff0c\u800c\u662f\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u4e00\u4e2a\u8fdb\u7a0b\u961f\u5217\uff0c\u5176\u4e2d\u5305\u542b\u6a21\u62df\u5668\u5faa\u73af\u4f7f\u7528\u7684\u6570\u91cf\u53ef\u53d8\u7684\u6307\u4ee4\u6307\u9488\u3002\u6bcf\u4e2a\u7a0b\u5e8f\u53ea\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u5f00\u59cb\uff0c\u4f46\u53ef\u4ee5\u4f7f\u7528SPL\u6307\u4ee4\u5c06\u65b0\u8fdb\u7a0b\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002\u4e00\u4e2a\u8fdb\u7a0b\u5728\u6267\u884cDAT\u6307\u4ee4\u6216\u6267\u884c\u96f6\u9664\u65f6\u6b7b\u4ea1\u3002\u5f53\u4e00\u4e2a\u7a0b\u5e8f\u6ca1\u6709\u5269\u4f59\u7684\u8fdb\u7a0b\u65f6\uff0c\u5b83\u88ab\u8ba4\u4e3a\u662f\u6b7b\u7684\u3002\nRedcode\u548cMARS\u67b6\u6784\u4e0d\u63d0\u4f9b\u8f93\u5165\u6216\u8f93\u51fa\u529f\u80fd\u3002\u6a21\u62df\u5668\u662f\u4e00\u4e2a\u5c01\u95ed\u7cfb\u7edf\uff0c\u552f\u4e00\u7684\u8f93\u5165\u662f\u5185\u5b58\u548c\u8fdb\u7a0b\u961f\u5217\u7684\u521d\u59cb\u503c\uff0c\u552f\u4e00\u7684\u8f93\u51fa\u662f\u6218\u6597\u7684\u7ed3\u679c\uff0c\u5373\u54ea\u4e9b\u7a0b\u5e8f\u6709\u5e78\u5b58\u7684\u8fdb\u7a0b\u3002\u5f53\u7136\uff0c\u5728\u6a21\u62df\u8fd0\u884c\u65f6\uff0c\u6a21\u62df\u5668\u4ecd\u7136\u5141\u8bb8\u5916\u90e8\u68c0\u67e5\u548c\u4fee\u6539\u5185\u5b58\u3002\n\u7ea2\u7801\u6709\u5f88\u591a\u7248\u672c\u3002A.K.\u675c\u5fb7\u5c3c[1]\u6240\u63cf\u8ff0\u7684\u6700\u65e9\u7248\u672c\u5728\u8bb8\u591a\u65b9\u9762\u4e0e\u56fd\u9645\u6838\u5fc3\u6218\u4e89\u534f\u4f1a\uff08International Core War Society\uff09\u540e\u6765\u5236\u5b9a\u7684\u6807\u51c6\u4e0d\u540c\uff0c\u53ef\u4ee5\u88ab\u89c6\u4e3a\u4e00\u79cd\u4e0d\u540c\u7684\u8bed\u8a00\uff0c\u5c3d\u7ba1\u76f8\u5173\u3002\u5982\u4eca\u6700\u5e38\u7528\u7684\u7ea2\u7801\u5f62\u5f0f\u57fa\u4e8e1994\u5e74\u63d0\u4ea4\u7ed9ICWS\u7684\u4e00\u4efd\u6807\u51c6\u8349\u6848\uff0c\u8be5\u8349\u6848\u4ece\u672a\u88ab\u6b63\u5f0f\u63a5\u53d7\uff0c\u56e0\u4e3a\u5f53\u65f6ICWS\u5b9e\u9645\u4e0a\u5df2\u7ecf\u5931\u6548\u3002\u7136\u800c\uff0c\u7ea2\u7801\u7684\u5f00\u53d1\u4ecd\u5728\u4ee5\u975e\u6b63\u5f0f\u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u4e3b\u8981\u662f\u901a\u8fc7rec.games\u7b49\u5728\u7ebf\u8bba\u575b\u3002corewar[2]\u65b0\u95fb\u7ec4\u3002\n\u6218\u58eb\u901a\u5e38\u88ab\u5206\u4e3a\u8bb8\u591a\u5927\u7684\u7c7b\u522b\uff0c\u5c3d\u7ba1\u5b9e\u9645\u7684\u6218\u58eb\u901a\u5e38\u4f1a\u7ed3\u5408\u5176\u4e2d\u4e24\u79cd\u6216\u4e24\u79cd\u4ee5\u4e0a\u7684\u884c\u4e3a\u3002\u4e09\u79cd\u5e38\u89c1\u7684\u7b56\u7565\uff08\u590d\u5236\u5668\u3001\u626b\u63cf\u4eea\u548c\u8f70\u70b8\u673a\uff09\u4e5f\u88ab\u79f0\u4e3a\u7eb8\u3001\u526a\u5200\u548c\u77f3\u5934\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u8457\u540d\u7684\u6e38\u4e50\u573a\u6e38\u620f\u4e2d\u5f7c\u6b64\u7684\u8868\u73b0\u63a5\u8fd1\u540c\u540d\u8005\u3002[3]\n\u590d\u5236\u5668\u5bf9\u81ea\u8eab\u8fdb\u884c\u91cd\u590d\u590d\u5236\u5e76\u5e76\u884c\u6267\u884c\uff0c\u6700\u7ec8\u7528\u5176\u4ee3\u7801\u7684\u526f\u672c\u586b\u5145\u6574\u4e2a\u5185\u6838\u3002\u590d\u5236\u8005\u5f88\u96be\u88ab\u6740\u6b7b\uff0c\u4f46\u901a\u5e38\u5f88\u96be\u6740\u6b7b\u5bf9\u624b\u3002\u56e0\u6b64\uff0c\u590d\u5236\u56e0\u5b50\u5f80\u5f80\u4f1a\u53d6\u5f97\u5f88\u591a\u8054\u7cfb\uff0c\u5c24\u5176\u662f\u4e0e\u5176\u4ed6\u590d\u5236\u56e0\u5b50\u76f8\u6bd4\u3002\n\u4e1d\u7ef8\u662f\u4e00\u79cd\u7279\u6b8a\u7c7b\u578b\u7684\u5feb\u901f\u590d\u5236\u4f53\uff0c\u4ee5Juha Pohjalainen\u7684\u300a\u4e1d\u7ef8\u6218\u58eb\u300b\u547d\u540d\u3002\u5927\u591a\u6570\u73b0\u4ee3\u590d\u5236\u5b50\u90fd\u662f\u8fd9\u79cd\u7c7b\u578b\u7684\u3002Silk Replicator\u4f7f\u7528\u5e76\u884c\u6267\u884c\uff0c\u7528\u4e00\u6761\u6307\u4ee4\u590d\u5236\u6574\u4e2a\u4ee3\u7801\uff0c\u5e76\u5728\u590d\u5236\u5b8c\u6210\u4e4b\u524d\u5f00\u59cb\u6267\u884c\u3002[5]\n\u626b\u63cf\u5668\u662f\u7528\u6765\u6253\u8d25\u590d\u5236\u8005\u7684\u3002\u626b\u63cf\u5668\u4e0d\u4f1a\u76f2\u76ee\u653b\u51fb\uff0c\u4f46\u4f1a\u5728\u53d1\u8d77\u76ee\u6807\u653b\u51fb\u4e4b\u524d\u5c1d\u8bd5\u5b9a\u4f4d\u654c\u4eba\u3002\u8fd9\u4f7f\u5f97\u5b83\u80fd\u66f4\u6709\u6548\u5730\u5bf9\u4ed8\u590d\u5236\u8005\u7b49\u96be\u4ee5\u6740\u6b7b\u7684\u5bf9\u624b\uff0c\u4f46\u4e5f\u4f7f\u5b83\u5bb9\u6613\u53d7\u5230\u8bf1\u9975\u7684\u653b\u51fb\u3002\u626b\u63cf\u4eea\u901a\u5e38\u7528SPL 0\u6307\u4ee4\u8f70\u70b8\u5185\u5b58\u3002\u8fd9\u4f1a\u5bfc\u81f4\u654c\u4eba\u521b\u5efa\u5927\u91cf\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u4ec0\u4e48\u4e5f\u4e0d\u505a\uff0c\u53ea\u4f1a\u521b\u5efa\u66f4\u591a\u8fdb\u7a0b\uff0c\u4ece\u800c\u964d\u4f4e\u6709\u7528\u8fdb\u7a0b\u7684\u901f\u5ea6\u3002\u5f53\u654c\u4eba\u53d8\u5f97\u5982\u6b64\u7f13\u6162\u4ee5\u81f3\u4e8e\u65e0\u6cd5\u505a\u4efb\u4f55\u6709\u7528\u7684\u4e8b\u60c5\u65f6\uff0cDAT\u6307\u4ee4\u4f1a\u8f70\u70b8\u5185\u5b58\u3002\u626b\u63cf\u5668\u901a\u5e38\u4e5f\u6bd4\u5176\u4ed6\u7c7b\u578b\u7684\u6218\u58eb\u66f4\u590d\u6742\uff0c\u56e0\u6b64\u66f4\u5927\u3001\u66f4\u8106\u5f31\u3002[6]\n\u4e00\u6b21\u6027\u626b\u63cf\u5668\u662f\u4e00\u79cd\u975e\u5e38\u7b80\u5355\u7684\u626b\u63cf\u5668\uff0c\u5b83\u53ea\u626b\u63cf\u6838\u5fc3\uff0c\u76f4\u5230\u627e\u5230\u7b2c\u4e00\u4e2a\u76ee\u6807\uff0c\u7136\u540e\u6c38\u4e45\u5207\u6362\u5230\u653b\u51fb\u7b56\u7565\uff0c\u901a\u5e38\u662f\u6838\u5fc3\u6e05\u9664\u3002\u7f57\u4f0a\u00b7\u8303\u00b7\u91cc\u6069\uff08Roy van Rijn\uff09\u7684\u300a\u7c73\u5c14\u7c73\u767b\u300b\uff08Myrmidon[7]\uff09\u5c31\u662f\u4e00\u4e2a\u5355\u67aa\u5339\u9a6c\u7684\u4f8b\u5b50\u3002\n\u8f70\u70b8\u673a\u76f2\u76ee\u590d\u5236&#34\uff1b\u70b8\u5f39&#34\uff1b\u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5728\u6838\u5fc3\uff0c\u5e0c\u671b\u51fb\u4e2d\u654c\u4eba\u3002\u70b8\u5f39\u901a\u5e38\u662fDAT\u6307\u4ee4\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6307\u4ee4\uff0c\u751a\u81f3\u591a\u6307\u4ee4\u70b8\u5f39\u3002\u8f70\u70b8\u673a\u53ef\u4ee5\u4f53\u79ef\u5c0f\u3001\u901f\u5ea6\u5feb\uff0c\u800c\u4e14\u6bd4\u626b\u63cf\u5bf9\u624b\u66f4\u6709\u4f18\u52bf\uff0c\u56e0\u4e3a\u70b8\u5f39\u4e5f\u53ef\u4ee5\u65b9\u4fbf\u5730\u5206\u6563\u6ce8\u610f\u529b\u3002\u8f70\u70b8\u673a\u901a\u5e38\u4e0eimp\u87ba\u65cb\u673a\u7ed3\u5408\uff0c\u4ee5\u83b7\u5f97\u5bf9\u6297\u590d\u5236\u673a\u7684\u989d\u5916\u5f39\u6027\u3002\n\u5438\u8840\u9b3c\u8bd5\u56fe\u8ba9\u5b83\u7684\u5bf9\u624b#39\uff1bs\u8fdb\u7a0b\u8df3\u8f6c\u5230\u4e00\u6bb5\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\uff0c\u79f0\u4e3a&#34\uff1b\u5751&#34\uff1b\u3002\u5438\u8840\u9b3c\u53ef\u4ee5\u57fa\u4e8e\u8f70\u70b8\u673a\u6216\u626b\u63cf\u4eea\u3002\u5438\u8840\u9b3c\u7684\u4e00\u4e2a\u4e3b\u8981\u5f31\u70b9\u662f\uff0c\u4ed6\u4eec\u5f88\u5bb9\u6613\u53d7\u5230\u95f4\u63a5\u653b\u51fb\uff0c\u56e0\u4e3a\u4ed6\u4eec\u5fc5\u987b\u5c06\u6307\u5411\u4ee3\u7801\u7684\u6307\u9488\u5206\u6563\u5230\u6574\u4e2a\u6838\u5fc3\u3002\u4ed6\u4eec\u7684\u653b\u51fb\u901f\u5ea6\u4e5f\u5f88\u6162\uff0c\u56e0\u4e3a\u8fc7\u7a0b\u9700\u8981\u989d\u5916\u4e00\u8f6e\u624d\u80fd\u5230\u8fbe\u77ff\u5751\u3002\u4fdd\u5c14\u68ee\u7684\u300a\u6211\u7684\u978b\u9762\u300b\u5c31\u662f\u5438\u8840\u9b3c\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\nImp\u662f\u4ee5A.K.\u675c\u5fb7\u5c3c\uff08A.K.Dewdney\uff09\u51fa\u7248\u7684\u7b2c\u4e00\u672c\u300a\u52c7\u58eb\u300b\uff08warrior\uff0cImp[9]\uff09\u547d\u540d\u7684\u3002A.K.\u675c\u5fb7\u5c3c\uff08A.K.Dewdney\uff09\u662f\u4e00\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u5355\u6307\u4ee4\u79fb\u52a8\u52c7\u58eb\uff0c\u4e0d\u65ad\u5730\u5728\u5176\u6307\u4ee4\u6307\u9488\u4e4b\u524d\u590d\u5236\u5176\u552f\u4e00\u7684\u6307\u4ee4\u3002\u5c0f\u9b3c\u5f88\u96be\u88ab\u6740\u6b7b\uff0c\u4f46\u5728\u8fdb\u653b\u4e0a\u51e0\u4e4e\u6beb\u65e0\u7528\u5904\u3002\u5b83\u4eec\u7684\u7528\u9014\u5728\u4e8e\uff0c\u5b83\u4eec\u5f88\u5bb9\u6613\u5927\u91cf\u7e41\u6b96\uff0c\u5373\u4f7f\u5176\u4ed6\u6218\u58eb\u88ab\u6740\uff0c\u5b83\u4eec\u4e5f\u53ef\u80fd\u5b58\u6d3b\u4e0b\u6765\u3002\nimp\u73af\uff08\u6216imp\u87ba\u65cb\uff09\u7531\u56f4\u7ed5\u5806\u82af\u7b49\u95f4\u8ddd\u5206\u5e03\u7684imp\u7ec4\u6210\uff0c\u5e76\u4ea4\u66ff\u6267\u884c\u3002\u73af/\u87ba\u65cb\u7684\u6bcf\u4e2a\u81c2\u4e0a\u7684IMP\u5c06\u5176\u6307\u4ee4\u590d\u5236\u5230\u4e0b\u4e00\u4e2a\u81c2\u4e0a\uff0c\u7136\u540e\u7acb\u5373\u518d\u6b21\u6267\u884c\u3002\u73af\u548c\u87ba\u65cb\u6bd4\u7b80\u5355\u7684\u5c0f\u9b3c\u66f4\u96be\u6740\u6b7b\uff0c\u5b83\u4eec\u751a\u81f3\u6709\uff08\u5f88\u5c0f\uff09\u673a\u4f1a\u6740\u6b7b\u6ca1\u6709\u53d7\u5230\u4fdd\u62a4\u7684\u6218\u58eb\u3002imp\u73af\u6216\u87ba\u65cb\u4e2d\u7684\u81c2\u6570\u5fc5\u987b\u4e0e\u6838\u5fc3\u7684\u5927\u5c0f\u76f8\u5bf9\u6700\u4f73\u3002\n\u5feb\u901f\u626b\u63cf\u5668\u8bd5\u56fe\u901a\u8fc7\u5feb\u901f\u5c55\u5f00\u7684\u626b\u63cf\u73af\u5c3d\u65e9\u6293\u4f4f\u5bf9\u624b\u3002\u5feb\u901f\u626b\u63cf\u662f\u4e00\u79cd\u65e9\u671f\u7684\u6e38\u620f\u7b56\u7565\uff0c\u603b\u662f\u9700\u8981\u4e00\u4e9b\u5176\u4ed6\u7b56\u7565\u4f5c\u4e3a\u5907\u4efd\u3002\u5411\u6218\u58eb\u6dfb\u52a0\u5feb\u901f\u626b\u63cf\u7ec4\u4ef6\u53ef\u4ee5\u63d0\u9ad8\u5176\u5728\u5bf9\u6297\u5176\u4ed6\u5feb\u901f\u626b\u63cf\u8005\u7b49\u957f\u6218\u58eb\u65f6\u7684\u5f97\u5206\u3002\u7136\u800c\uff0c\u5c55\u5f00\u626b\u63cf\u53ea\u80fd\u9488\u5bf9\u6709\u9650\u6570\u91cf\u7684\u4f4d\u7f6e\uff0c\u4e0d\u592a\u53ef\u80fd\u6293\u4f4f\u4e00\u4e2a\u5c0f\u5bf9\u624b\u3002\n\u6838\u5fc3\u6e05\u9664\u6309\u987a\u5e8f\u8986\u76d6\u6838\u5fc3\u4e2d\u7684\u6bcf\u6761\u6307\u4ee4\uff0c\u6709\u65f6\u751a\u81f3\u5305\u62ec\u5176\u81ea\u8eab\u3002\u6838\u5fc3\u6e05\u9664\u4f5c\u4e3a\u72ec\u7acb\u6218\u58eb\u5e76\u4e0d\u5e38\u89c1\uff0c\u4f46\u901a\u5e38\u88ab\u8f70\u70b8\u673a\u548c\u626b\u63cf\u5668\u7528\u4f5c\u6700\u7ec8\u7b56\u7565\u3002\n\u6709\u4e86\u5bf9\u6838\u5fc3\u6218\u4e89\u7b56\u7565\u7684\u7406\u89e3\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u521b\u9020\u4e00\u4e2a\u6218\u58eb\u6765\u5b9e\u73b0\u7279\u5b9a\u7684\u76ee\u6807\u3002\u9769\u547d\u601d\u60f3\u65f6\u4e0d\u65f6\u51fa\u73b0\uff1b\u7136\u800c\uff0c\u5927\u591a\u6570\u65f6\u5019\uff0c\u7a0b\u5e8f\u5458\u7684\u7a0b\u5e8f\u90fd\u662f\u57fa\u4e8e\u5df2\u7ecf\u53d1\u5e03\u7684\u52c7\u58eb\u3002\u4f7f\u7528OptiMax\u6216core step optimizer\u5de5\u5177\u7b49\u4f18\u5316\u5668\uff0c\u53ef\u4ee5\u521b\u5efa\u66f4\u6709\u6548\u7684\u52c7\u58eb\u3002\n\u6218\u58eb\u4e5f\u53ef\u4ee5\u901a\u8fc7\u9057\u4f20\u7b97\u6cd5\u6216\u9057\u4f20\u7f16\u7a0b\u751f\u6210\u3002\u96c6\u6210\u8fd9\u79cd\u8fdb\u5316\u6280\u672f\u7684\u7a0b\u5e8f\u79f0\u4e3a\u8fdb\u5316\u7a0b\u5e8f\u3002\u6838\u5fc3\u6218\u4e89\u793e\u533a\u5f15\u5165\u4e86\u51e0\u4e2a\u8fdb\u5316\u8005\uff0c\u4ed6\u4eec\u503e\u5411\u4e8e\u4e3a\u8f83\u5c0f\u7684\u6838\u5fc3\u73af\u5883\u751f\u6210\u6218\u58eb\u3002\u6700\u65b0\u6210\u529f\u7684\u8fdb\u5316\u8005\u662f\u03bcGP[10]\uff0c\u5b83\u4ea7\u751f\u4e86\u4e00\u4e9b\u6700\u6210\u529f\u7684\u7eb3\u7c73\u548c\u5fae\u578b\u6218\u58eb\u3002\u7136\u800c\uff0c\u8fdb\u5316\u7b56\u7565\u4ecd\u7136\u9700\u8981\u5728\u66f4\u5927\u7684\u6838\u5fc3\u73af\u5883\u4e2d\u8bc1\u660e\u5176\u6709\u6548\u6027\u3002[11]\n\u6838\u5fc3\u6218\u4e89\u7684\u7075\u611f\u6765\u81ea\u4e00\u4e2a\u540d\u4e3a\u201c\u722c\u884c\u8005\u201d\u7684\u81ea\u6211\u590d\u5236\u7a0b\u5e8f\u548c\u4e00\u4e2a\u540d\u4e3a\u201c\u6536\u5272\u8005\u201d\u7684\u540e\u7eed\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u9500\u6bc1\u4e86\u722c\u884c\u8005\u7684\u526f\u672c\u3002[12] \u722c\u884c\u52a8\u7269\u662f\u7531BBN\u7684\u9c8d\u52c3\u00b7\u6258\u9a6c\u65af\u521b\u4f5c\u7684\u3002[13] \u675c\u5fb7\u5c3c\u4e0d\u77e5\u9053\u530d\u5310\u690d\u7269\u548c\u6536\u5272\u8005\u7684\u8d77\u6e90\uff0c\u5e76\u5c06\u5176\u79f0\u4e3a\u6e90\u81ea\u8fbe\u5c14\u6587\u4ee5\u53ca\u8096\u8d6b\u548c\u80e1\u666e\u7684\u8815\u866b\u5b9e\u9a8c\u7684\u8c23\u8a00\u3002\u7136\u800c\uff0c1984\u5e74\u300a\u79d1\u5b66\u7f8e\u56fd\u4eba\u300b\u5173\u4e8e\u6838\u5fc3\u6218\u4e89\u7684\u6587\u7ae0[12]\u5f15\u7528\u4e861961\u5e74\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u7684\u7ef4\u514b\u591a\u00b7A\u00b7\u7ef4\u7d22\u8328\u57fa\u3001\u7f57\u4f2f\u7279\u00b7\u83ab\u91cc\u65af\u548c\u9053\u683c\u62c9\u65af\u00b7\u9ea6\u514b\u7f57\u4f0a\u73a9\u7684\u8fbe\u5c14\u6587\u6e38\u620f\u3002\u5355\u8bcd&#34\uff1b\u6838\u5fc3\u548c#34\uff1b\u8fd9\u4e2a\u540d\u5b57\u6765\u81ea\u78c1\u82af\u5b58\u50a8\u5668\uff0c\u4e00\u79cd\u8fc7\u65f6\u7684\u968f\u673a\u5b58\u53d6\u5b58\u50a8\u5668\u6280\u672f\u3002\n1984\u5e743\u6708\uff0cD\u00b7G\u00b7\u743c\u65af\u548cA\u00b7K\u00b7\u675c\u5fb7\u5c3c\u5728\u300a\u6838\u5fc3\u6218\u4e89\u6307\u5357\u300b\u4e2d\u53d1\u8868\u4e86\u5bf9\u7ea2\u7801\u8bed\u8a00\u7684\u9996\u6b21\u63cf\u8ff0\u3002[1] 1984\u5e745\u6708\uff0c\u675c\u5fb7\u5c3c\u5728\u300a\u79d1\u5b66\u7f8e\u56fd\u4eba\u300b\u6742\u5fd7\u4e0a\u53d1\u8868\u6587\u7ae0\uff0c\u5411\u516c\u4f17\u4ecb\u7ecd\u4e86\u8fd9\u6b3e\u6e38\u620f\u3002\u675c\u5fb7\u5c3c\u5728&#34\uff1b\u7535\u8111\u5a31\u4e50&#34\uff1b1985\u5e743\u6708[14]\u548c1987\u5e741\u6708\u7684\u4e13\u680f\u6587\u7ae0\u3002[15]\n\u56fd\u9645\u6838\u5fc3\u6218\u4e89\u534f\u4f1a\uff08ICWS\uff09\u6210\u7acb\u4e8e1985\u5e74\uff0c\u6bd4\u675c\u5fb7\u5c3c39\u5c81\u665a\u4e86\u4e00\u5e74\uff1b\u8fd9\u662f\u4e00\u7bc7\u539f\u521b\u6587\u7ae0\u3002ICWS\u57281986\u5e74\u548c1988\u5e74\u53d1\u5e03\u4e86\u7ea2\u7801\u8bed\u8a00\u7684\u65b0\u6807\u51c6\uff0c\u5e76\u57281994\u5e74\u63d0\u51fa\u4e86\u4e00\u4e2a\u4ece\u672a\u6b63\u5f0f\u8bbe\u5b9a\u4e3a\u65b0\u6807\u51c6\u7684\u66f4\u65b0\u3002[16] \u5c3d\u7ba1\u5982\u6b64\uff0c1994\u5e74\u7684\u8349\u6848\u8fd8\u662f\u88ab\u666e\u904d\u91c7\u7eb3\u548c\u6269\u5c55\uff0c\u5e76\u5f62\u6210\u4e86\u4eca\u5929\u7ea2\u5b57\u4e8b\u5b9e\u6807\u51c6\u7684\u57fa\u7840\u3002ICWS\u7531\u9a6c\u514b\u00b7\u514b\u62c9\u514b\u68ee\uff081985-1987\uff09\u3001\u5a01\u5ec9\u00b7R\u00b7\u5df4\u514b\u5229\uff081987-1992\uff09\u548c\u4e54\u6069\u00b7\u7ebd\u66fc\uff081992-1992\uff09\u6267\u5bfc\uff1b\u76ee\u524dICWS\u5df2\u7ecf\u5931\u6548\u3002[17]\n0000\uff1a\u6dfb\u52a0\u3002AB#4\uff0c$30001:MOV\u3002F$2\uff0c@2 0002:JMP\u3002B$-2\uff0c$0 0003:DAT\u3002F#0\uff0c#0\n\u7ec4\u88c5ICWS-94\u578b\u7ea2\u8272\u4ee3\u7801\nRedcode\u662f\u6838\u5fc3\u6218\u4e89\u4e2d\u4f7f\u7528\u7684\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u7531\u4e00\u4e2a\u540d\u4e3a\u5185\u5b58\u9635\u5217\u7ea2\u7801\u6a21\u62df\u5668\uff08Memory Array Redcode Simulator\uff0c\u7b80\u79f0MARS\uff09\u7684\u865a\u62df\u673a\u6267\u884c\u3002\u7ea2\u7801\u7684\u8bbe\u8ba1\u677e\u6563\u5730\u57fa\u4e8e20\u4e16\u7eaa80\u5e74\u4ee3\u65e9\u671f\u7684\u5b9e\u9645CISC\u6c47\u7f16\u8bed\u8a00\uff0c\u4f46\u5305\u542b\u4e00\u4e9b\u5728\u5b9e\u9645\u8ba1\u7b97\u673a\u7cfb\u7edf\u4e2d\u901a\u5e38\u627e\u4e0d\u5230\u7684\u7279\u6027\u3002\nRedcode\u548cMARS\u73af\u5883\u90fd\u65e8\u5728\u63d0\u4f9b\u4e00\u4e2a\u7b80\u5355\u800c\u62bd\u8c61\u7684\u5e73\u53f0\uff0c\u800c\u4e0d\u9700\u8981\u5b9e\u9645\u8ba1\u7b97\u673a\u548c\u5904\u7406\u5668\u7684\u590d\u6742\u6027\u3002\u867d\u7136Redcode\u4e0e\u666e\u901a\u7684CISC\u6c47\u7f16\u8bed\u8a00\u7c7b\u4f3c\uff0c\u4f46\u76f8\u5bf9\u4e8e&#34\uff0c\u5b83\u76f8\u5f53\u7b80\u5355\uff1b\u96f7\u4e9a\u5c14&#34\uff1b\u6c47\u7f16\uff0c\u5e76\u4e14\u6ca1\u6709\u7edd\u5bf9\u5185\u5b58\u5bfb\u5740\n\u6700\u521d\u76848\u6761\u6307\u4ee4\u63cf\u8ff0\u5982\u4e0b\uff0c\u540e\u6765\u7684\u7248\u672c\u6dfb\u52a0\u4e86NOP\u3001\u4e58\u6cd5\u548c\u66f4\u590d\u6742\u7684\u6bd4\u8f83\u3002[18]\n\u64cd\u4f5c\u7801\u52a9\u8bb0\u7b26\u53c2\u6570\u64cd\u4f5c-------------------------0 DAT B\u521d\u59cb\u5316\u4f4d\u7f6e\u5230\u503cB\u30021 MOV A B\u5c06A\u79fb\u52a8\u5230\u4f4d\u7f6eB\u30022\u6dfb\u52a0A B\u5c06\u64cd\u4f5c\u6570A\u6dfb\u52a0\u5230\u4f4d\u7f6eB\u7684\u5185\u5bb9\u4e2d\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4f4d\u7f6eB\u30023 SUB A B\u5c06\u64cd\u4f5c\u6570A\u4ece\u4f4d\u7f6eB\u7684\u5185\u5bb9\u4e2d\u51cf\u53bb\uff0c\u5e76\u5c06\u7ed3\u679c\u5b58\u50a8\u5728\u4f4d\u7f6eB\u30024JMP B\u8df3\u8f6c\u5230\u4f4d\u7f6eB\u30025 JMZ A B\u5982\u679c\u64cd\u4f5c\u6570A\u4e3a0\uff0c\u8df3\u8f6c\u5230\u4f4d\u7f6eB\uff1b\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6307\u4ee4\u30026 DJZ A B\u5c06\u4f4d\u7f6eA\u7684\u5185\u5bb9\u51cf\u5c111\u3002\u5982\u679c\u4f4d\u7f6eA\u73b0\u5728\u4fdd\u63010\uff0c\u8df3\u5230\u4f4d\u7f6eB\uff1b\u5426\u5219\u7ee7\u7eed\u4e0b\u4e00\u4e2a\u6307\u4ee4\u30027 CMP A B\u6bd4\u8f83\u64cd\u4f5c\u6570A\u548c\u64cd\u4f5c\u6570B\u3002\u5982\u679c\u5b83\u4eec\u4e0d\u76f8\u7b49\uff0c\u8df3\u8fc7\u4e0b\u4e00\u6761\u6307\u4ee4\uff1b\u5426\u5219\u6267\u884c\u4e0b\u4e00\u6761\u6307\u4ee4\u3002\nICWS&#39\uff1b94\u6807\u51c6\u8349\u6848\u589e\u52a0\u4e86\u66f4\u591a\u5bfb\u5740\u6a21\u5f0f\uff0c\u4e3b\u8981\u7528\u4e8e\u5904\u7406A\u5b57\u6bb5\u95f4\u63a5\u5bfb\u5740\uff0c\u603b\u5171\u63d0\u4f9b\u4e868\u79cd\u5bfb\u5740\u6a21\u5f0f\uff1a\n#-\u7acb\u5373$-\u76f4\u63a5\uff08\u53ef\u7701\u7565$\uff09-A-field indirect@-B-field indirect{-A-field indirect with predecrement&lt\uff1b-B-field indirect with predecrement}-A-field indirect with postincrement&gt\uff1b-B-\u5e26\u540e\u589e\u91cf\u7684\u95f4\u63a5\u5b57\u6bb5\n\u51e0\u4f4d\u4f5c\u8005\u591a\u5e74\u6765\u4e00\u76f4\u5728\u5f00\u53d1\u8fd9\u6b3e\u6e38\u620f\u7684\u5b9e\u73b0\u3002\u8fd9\u6b3e\u6e38\u620f\u6709\u591a\u4e2a\u7248\u672c\uff0c\u53ef\u79fb\u690d\u5230\u591a\u4e2a\u5e73\u53f0\u3002\u4f8b\u5982\uff0cpMARS\u662f\u4e00\u79cd\u5f00\u6e90\u8f6f\u4ef6\uff0c\u6e90\u4ee3\u7801\u4f4d\u4e8eSourceForge[20]\u6216\u57fa\u4e8eSDL\u7684SDL pMARS For Windows\u3002[21]\u6700\u8fd1\uff0c\u4e00\u4e2a\u5b8c\u5168\u57fa\u4e8e\u7f51\u7edc\u7684\u6a21\u62df\u5668\u88ab\u521b\u5efa\u51fa\u6765https://www.corewar.io/\u65e0\u9700\u4e0b\u8f7d\u4efb\u4f55\u7279\u5b9a\u4e8e\u5e73\u53f0\u7684\u5de5\u5177\u3002\n\u5728SooC\u953b\u70892000\u52302021\u5e74\u95f4\u5171\u4e0b\u8f7d\u4e8635000\u6b21PMAS\u3002[22]\n^a\u00b7b\u00b7\u743c\u65af\uff0cD\u00b7G\u3002\uff1b\u675c\u5fb7\u5c3c\uff0cA.K.\uff081984\u5e743\u6708\uff09&#34;\u6838\u5fc3\u6218\u4e89\u6307\u5357&#34\u3002\n^\u65fa\u6c99\uff0c\u660e\u5854\u4e54&#34;\u827a\u672f\u5165\u95e8&#39\uff1b88\uff1a\u7eb8-\u77f3-\u526a\u5200\u4e09\u90e8\u66f2&#34\u3002\n^\u6c83\u514b\uff0c\u5df4\u514b\u5229\uff1b\u7b49\u7b49\uff0c\u4e9a\u5386\u5c71\u5927\uff1b\u65bd\u5bc6\u7279\uff0c\u514b\u91cc\u65af\u8482\u5b89&#34;\u4e00\u79cd\u8fdb\u5316\u7684\u65b9\u6cd5\u4ea7\u751f\u4e86\u4eba\u7c7b\u7ade\u4e89\u7684Corewar\u9879\u76ee#34\uff1b\uff08PDF\uff09\u3002\n^\u8096\u8d6b\uff0cJ\u3002\uff1bHupp\uff0cJ.\uff081982\u5e743\u6708\uff09&#34;\u7b2c&#39\uff1b\u8815\u866b&#39\uff1b\u7a0b\u5e8f-\u65e9\u671f\u5206\u5e03\u5f0f\u8ba1\u7b97\u7ecf\u9a8c&#34\uff1b\u3002ACM\u7684\u901a\u8baf\u300225 (3): 172\u2013180.  \u5185\u653f\u90e8\uff1a10.1145/358453.358455\u3002S2CID 1639205\u3002\n^\u675c\u5fb7\u5c3c\uff0cA.K.\uff081985\u5e743\u6708\uff09&#34;\u75c5\u6bd2\u3001\u8815\u866b\u548c\u5176\u4ed6\u5bf9\u8ba1\u7b97\u673a\u5185\u5b58\u7684\u5a01\u80c1\u7684\u6838\u5fc3\u6218\u4e89\u52a8\u7269\uff1b\u3002\u79d1\u5b66\u7f8e\u56fd\u4eba\u3002\n^\u675c\u5fb7\u5c3c\uff0cA.K.\uff081987\u5e741\u6708\uff09&#34;\u4e00\u4e2a\u540d\u4e3aMICE\u7684\u9879\u76ee\u5728\u7b2c\u4e00\u5c4a\u6838\u5fc3\u6218\u4e89\u9526\u6807\u8d5b\u4e0a\u4ee5\u5fae\u5f31\u4f18\u52bf\u53d6\u80dc&#34\uff1b\u3002\u79d1\u5b66\u7f8e\u56fd\u4eba\u3002\n^\u8fbe\u7c73\u6069\u00b7\u591a\u5229\u683c\u65af\uff1b\u9a6c\u514b\u8fbe\u52d2\u59c6\uff081995\u5e7411\u67088\u65e5\uff09&#34;1994\u5e74\u62df\u8bae\u6838\u5fc3\u6218\u4e89\u6807\u51c6\u7684\u6ce8\u91ca\u8349\u6848&#34\u3002", "note_en": "Jump to navigation  Jump to search  Core War is a 1984  programming game created by D. G. Jones and  A. K. Dewdney in which two or more battle programs (called &#34;warriors&#34;) compete for control of a  virtual computer. These battle programs are written in an abstract  assembly language called  Redcode.\n   At the beginning of a game, each battle program is loaded into memory at a random location, after which each program executes one instruction in turn. The goal of the game is to cause the processes of opposing programs to terminate (which happens if they execute an invalid instruction), leaving the victorious program in sole possession of the machine.\n The earliest published version of Redcode defined only eight instructions. The ICWS-86 standard increased the number to 10 while the ICWS-88 standard increased it to 11. The currently used 1994 draft standard has 16 instructions. However, Redcode supports a number of different  addressing modes and (starting from the 1994 draft standard) instruction modifiers which increase the actual number of operations possible to 7168. The Redcode standard leaves the underlying instruction representation undefined and provides no means for programs to access it. Arithmetic operations may be done on the two address fields contained in each instruction, but the only operations supported on the instruction codes themselves are copying and comparing for equality.\n Each Redcode instruction occupies exactly one memory slot and takes exactly one cycle to execute. The rate at which a process executes instructions, however, depends on the number of other processes in the queue, as processing time is shared equally.\n The memory is addressed in units of one instruction. The memory space (or  core) is of finite size, but only  relative addressing is used, that is, address  0 always refers to the currently executing instruction, address  1 to the instruction after it, and so on. The maximum address value is set to equal one less than the number of memory locations, and will wrap around if necessary. As a result, there is a one-to-one correspondence between addresses and memory locations, but it is impossible for a Redcode program to determine any absolute address. A process that encounters no invalid or jump instructions will continue executing successive instructions endlessly, eventually returning to the instruction where it started.\n Instead of a single  instruction pointer a Redcode simulator has a  process queue for each program containing a variable number of instruction pointers which the simulator cycles through. Each program starts with only one process, but new processes may be added to the queue using the  SPL instruction. A process dies when it executes a  DAT instruction or performs a division by zero. A program is considered dead when it has no more processes left.\n Redcode and the MARS architecture provide no input or output functions. The simulator is a closed system, with the only input being the initial values of the memory and the process queues, and the only output being the outcome of the battle, i.e., which programs had surviving processes. Of course, the simulator may still allow external inspection and modification of the memory while the simulation is running.\n  A number of versions of Redcode exist. The earliest version described by  A. K. Dewdney  [1] differs in many respects from the later standards established by the International Core War Society, and could be considered a different, albeit related, language. The form of Redcode most commonly used today is based on a draft standard submitted to the ICWS in 1994 that was never formally accepted, as the ICWS had become effectively defunct around that time. Development of Redcode, however, has continued in an informal manner, chiefly via online forums such as the  rec.games.corewar  [2]  newsgroup.\n  Warriors are commonly divided into a number of broad categories, although actual warriors may often combine the behavior of two or more of these. Three of the common strategies ( replicator,  scanner and  bomber) are also known as  paper, scissors and stone, since their performance against each other approximates that of their namesakes in the well-known playground game.  [3]\n A replicator makes repeated copies of itself and executes them in parallel, eventually filling the entire core with copies of its code. Replicators are hard to kill, but often have difficulty killing their opponents. Replicators therefore tend to score a lot of ties, particularly against other replicators.\n A  silk is a special type of very rapid replicator, named after  Silk Warrior  [4] by Juha Pohjalainen. Most modern replicators are of this type. Silk replicators use parallel execution to copy their entire code with one instruction, and begin execution of the copy before it is finished.  [5]\n A scanner is designed to beat replicators. A scanner does not attack blindly, but tries to locate its enemy before launching a targeted attack. This makes it more effective against hard-to-kill opponents like replicators, but also leaves it vulnerable to decoys. A scanner usually bombs memory with   SPL 0 instructions. This causes the enemy to create a huge number of processes which do nothing but create more processes, slowing down useful processes. When the enemy becomes so slow that it is unable to do anything useful, the memory is bombed with   DAT instructions. Scanners are also generally more complex, and therefore larger and more fragile, than other types of warriors.  [6]\n A  one-shot is a very simple scanner that only scans the core until it finds the first target, and then permanently switches to an attack strategy, usually a core clear.  Myrmidon  [7] by Roy van Rijn is an example of a oneshot.\n A bomber blindly copies a &#34;bomb&#34; at regular intervals in the core, hoping to hit the enemy. The bomb is often a   DAT instruction, although other instructions, or even multi-instruction bombs, may be used. A bomber can be small and fast, and they gain an extra edge over scanning opponents since the bombs also serve as convenient distractions. Bombers are often combined with imp spirals to gain extra resiliency against replicators.\n A vampire tries to make its opponent&#39;s processes jump into a piece of its own code called a &#34;pit&#34;. Vampires can be based on either bombers or scanners. A major weakness of vampires is that they can be easily attacked indirectly, since they must by necessity scatter pointers to their code all over the core. Their attacks are also slow, as it takes an extra round for the processes to reach the pit.  myVamp  [8] by Paulsson is an example of a vampire.\n Imps are named after the first ever published warrior,  Imp  [9] by  A. K. Dewdney, a trivial one-instruction mobile warrior that continually copies its sole instruction just ahead of its  instruction pointer. Imps are hard to kill but next to useless for offense. Their use lies in the fact that they can easily be spawned in large numbers, and may survive even if the rest of the warrior is killed.\n An  imp ring (or  imp spiral) consists of imps spaced at equal intervals around the core and executing alternately. The imps at each arm of the ring/spiral copy their instruction to the next arm, where it is immediately executed again. Rings and spirals are even harder to kill than simple imps, and they even have a (small) chance of killing warriors not protected against them. The number of arms in an imp ring or spiral must be  relatively prime with the size of the core.\n A quickscanner attempts to catch its opponent early by using a very fast unrolled scanning loop. Quickscanning is an early-game strategy, and always requires some other strategy as a backup. Adding a quickscanning component to a warrior can improve its score against long warriors such as other quickscanners. However, the unrolled scan can only target a limited number of locations, and is unlikely to catch a small opponent.\n A core clear sequentially overwrites every instruction in the core, sometimes even including itself. Core clears are not very common as stand-alone warriors, but are often used as an end-game strategy by bombers and scanners.\n  With an understanding of  Core War strategies, a programmer can create a warrior to achieve certain goals. Revolutionary ideas come once in a while; most of the time, however, programmers base their programs on already published warriors. Using optimizers such as OptiMax or core-step optimizer tools, a more effective warrior can be created.\n Warriors can also be generated by  genetic algorithms or  genetic programming. Programs that integrate this evolutionary technique are known as  evolvers. Several evolvers were introduced by the  Core War community and tend to focus on generating warriors for smaller core settings. The latest evolver with significant success was  \u03bcGP  [10] which produced some of the most successful nano and tiny warriors. Nevertheless, evolutionary strategy still needs to prove its effectiveness on larger core settings.  [11]\n  Core War was inspired by a  self-replicating program called  Creeper and a subsequent program called Reaper that destroyed copies of Creeper.  [12] Creeper was created by Bob Thomas at  BBN.  [13] Dewdney was not aware of the origin of Creeper and Reaper and refers to them as a rumor originating from  Darwin and the worm experiments of  Shoch and Hupp. The 1984   Scientific American article on  Core War  [12] nevertheless cites the game   Darwin, played by  Victor A. Vyssotsky,  Robert Morris, and  Douglas McIlroy at  Bell Labs in 1961. The word &#34;Core&#34; in the name comes from  magnetic-core memory, an obsolete  random-access memory technology.\n The first description of the Redcode language was published in March 1984, in  Core War Guidelines by D. G. Jones and  A. K. Dewdney.  [1] The game was introduced to the public in May 1984, in an article written by Dewdney in  Scientific American. Dewdney revisited  Core War in his &#34;Computer Recreations&#34; column in March 1985,  [14] and again in January 1987.  [15]\n The International Core Wars Society (ICWS) was founded in 1985, one year after Dewdney&#39;s original article. The ICWS published new standards for the Redcode language in 1986 and 1988, and proposed an update in 1994 that was never formally set as the new standard.  [16] Nonetheless, the 1994 draft was commonly adopted and extended, and forms the basis of the  de facto standard for Redcode today. The ICWS was directed by Mark Clarkson (1985\u20131987), William R. Buckley (1987\u20131992), and Jon Newman (1992\u2013); currently the ICWS is defunct.  [17]\n  0000 :  ADD . AB  #  4 ,  $  3  0001 :  MOV . F  $  2 ,  @  2  0002 :  JMP . B  $  - 2 ,  $  0  0003 :  DAT . F  #  0 ,  #  0\n Assembled ICWS-94 style Redcode\n Redcode is the  programming language used in  Core War. It is executed by a  virtual machine known as a  Memory Array Redcode Simulator, or  MARS. The design of Redcode is loosely based on actual  CISC  assembly languages of the early 1980s, but contains several features [   vague] not usually found in actual computer systems.\n Both Redcode and the MARS environment are designed to provide a simple and abstract platform without the complexity of actual computers and processors. Although Redcode is meant to resemble an ordinary CISC assembly language, it is quite simplified relative to &#34;real&#34; assembly, and has no absolute memory addressing\n The original 8 instructions are described as follows, later versions added NOP, multiply and more complex comparisons.  [18]\n OPcode Mnemonic Argument(s) Action ------- --------- ----- ----- ---------------------------------- 0 DAT B Initialize location to value B. 1 MOV A B Move A into location B. 2 ADD A B Add operand A to contents of location B and store result in location B. 3 SUB A B Subtract operand A from contents of location B and store result in location B. 4 JMP B Jump to location B. 5 JMZ A B If operand A is 0, jump to location B; otherwise continue with next instruction. 6 DJZ A B Decrement contents of location A by 1. If location A now holds 0, jump to location B; otherwise continue with next instruction. 7 CMP A B Compare operand A with operand B. If they are not equal, skip next instruction; otherwise execute next instruction.\n the ICWS &#39;94 standard draft added more addressing modes, mostly to deal with A-field indirection, to give a total of 8 address modes:\n # \u2014 immediate $ \u2014 direct (the $ may be omitted) * \u2014 A-field indirect @ \u2014 B-field indirect { \u2014 A-field indirect with predecrement &lt; \u2014 B-field indirect with predecrement } \u2014 A-field indirect with postincrement &gt; \u2014 B-field indirect with postincrement\n  Development of implementations of the game continued over the years by several authors. There are multiple versions of the game available,  [19]  ported for several platforms. For instance  pMARS which is  open source software with  source code on  SourceForge,  [20] or the  SDL based  SDL pMARS for Windows.  [21] Recently a fully web based simulator has been created  https://www.corewar.io/ removing the need to download any platform specific tooling.\n The common implementation pMars was downloaded over 35,000 times between 2000 and 2021 from  SourceForge.  [22]\n  ^     a     b   Jones, D. G.;  Dewdney, A. K. (March 1984).  &#34;Core War Guidelines&#34; .\n  ^    Wangsaw, Mintardjo.  &#34;Intro to Art in &#39;88: Paper - Stone - Scissors Trilogy&#34; .\n        ^    Vowk, Barkley; Wait, Alexander; Schmidt, Christian.  &#34;An Evolutionary Approach Generates Human Competitive Corewar Programs&#34;  (PDF) .\n  ^     Shoch, J.; Hupp, J. (March 1982). &#34;The &#39;Worm&#39; Programs - Early Experience with a Distributed Computation&#34;.   Communications of the ACM.  25 (3): 172\u2013180.  doi: 10.1145/358453.358455.  S2CID\u00a0 1639205.\n ^     Dewdney, A.\u00a0K. (March 1985).  &#34;A Core War bestiary of viruses, worms and other threats to computer memories&#34;.  Scientific American .\n ^     Dewdney, A.\u00a0K. (January 1987).  &#34;A program called MICE nibbles its way to victory at the first Core War tournament&#34;.  Scientific American .\n ^    Doligez, Damien; Durham, Mark (8 November 1995).  &#34;Annotated Draft of the Proposed 1994 Core War Standard&#34; .", "posttime": "2022-02-14 23:39:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6838\u5fc3,core,\u6307\u4ee4", "title": "\u6838\u5fc3\u6218\u4e89", "title_en": "Core War", "transed": 1, "url": "https://en.wikipedia.org/wiki/Core_War", "via": "", "real_tags": ["\u6838\u5fc3", "core", "\u6307\u4ee4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073182, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e741\u6708\uff0c\u6211\u53d1\u8868\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u63cf\u8ff0\u4e86\u4e00\u5bb6\u540d\u4e3aPixsy\u7684\u516c\u53f8\u5982\u4f55\u591a\u6b21\u5411\u6211\u53d1\u51fa\u6cd5\u5f8b\u5a01\u80c1\uff0c\u8bd5\u56fe\u8ba9\u6211\u652f\u4ed8600\u7f8e\u5143\u8d2d\u4e70\u6211\u4f7f\u7528\u8fc7\u7684\u521b\u610f\u5171\u4eab\u56fe\u50cf\u2026", "note_en": "In January, I published  an article describing how a company called Pixsy sent me repeated legal threats in a bid to get me to pay $600 for  a Creative Commons image  I\u2019d used\u2026", "posttime": "2022-02-14 23:38:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6cd5\u5f8b,letter,pixsy", "title": "\u4e00\u5c01\u81f4Pixsy\u9996\u5e2d\u6267\u884c\u5b98\u51ef\u6069\u00b7\u743c\u65af\u7684\u516c\u5f00\u4fe1\uff0c\u4ed6\u4e0d\u65ad\u5411\u6211\u53d1\u9001\u6cd5\u5f8b\u5a01\u80c1", "title_en": "An Open Letter to Pixsy CEO Kain Jones, Who Keeps Sending Me Legal Threats", "transed": 1, "url": "https://doctorow.medium.com/an-open-letter-to-pixsy-ceo-kain-jones-who-keeps-sending-me-legal-threats-5dfc54558f2c", "via": "", "real_tags": ["\u6cd5\u5f8b", "letter", "pixsy"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073181, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u600e\u4e48\u4e00\u56de\u4e8b\uff1f\u4e3a\u4ec0\u4e48\uff1f\u660e\u767d\u4e86\u5417\uff1f\u7528\u5b83\uff1f\u627e\u4eba\u5e2e\u5fd9\uff1f\u8d21\u732e\uff1f\u6700\u65b0\u7a33\u5b9a\u7248\u672c\uff1a2.0.5\u2014\u2014\u591c\u95f4\u7248\u672c\uff1a\u76ee\u524d\u4e0d\u53ef\u7528\u4e00\u4e2a\u65b0\u7684\u7f51\u9875\u6b63\u5728\u5236\u4f5c\u4e2d\u2014\u2014\u6709\u4e00\u4e2a\u65b0\u7684SikuliX\u6807\u5fd7\u3002\u3002\u3002\u8bbf\u95ee\u65b0\u95fb\u535a\u5ba2-\u4eab\u53d7\u2026\u5728\u56de\u65cf\u5370\u5ea6\u6587\u5316\u4e2d\uff1a\u770b\u5230\u548c\u7406\u89e3\u672a\u77e5\u4e8b\u7269\u7684\u80fd\u529b\u3002\uff08\u611f\u8c22\u5c55\u793aSikuli\u7684\u56fe\u7247\uff09Sikuli\u4e8e2009\u5e74\u7531\u5f20\u5b97\u7965\uff08Tsung Xiang Chang\uff09\u548cTom Yeh\uff08Tom Yeh\uff09\u5728\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7528\u6237\u754c\u9762\u8bbe\u8ba1\u5c0f\u7ec4\uff08User Interface Design Group\uff09\u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u7814\u7a76\u9879\u76ee\u542f\u52a8\u30022012\u5e74\uff0c\u4e24\u4eba\u90fd\u79bb\u5f00\u4e86Sikuli-X-1.0rc3\u9879\u76ee\uff0c\u5f53\u65f6\u6211\u51b3\u5b9a\u63a5\u7ba1\u5f00\u53d1\u548c\u652f\u6301\uff0c\u5e76\u5c06\u5176\u547d\u540d\u4e3aSikuliX\u3002SikuliX\u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u5728\u8fd0\u884cWindows\u3001Mac\u6216\u67d0\u4e9bLinux/Unix\u7684\u684c\u9762\u8ba1\u7b97\u673a\u5c4f\u5e55\u4e0a\u770b\u5230\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u5b83\u4f7f\u7528OpenCV\u652f\u6301\u7684\u56fe\u50cf\u8bc6\u522b\u6765\u8bc6\u522bGUI\u7ec4\u4ef6\u3002\u8fd9\u5728\u65e0\u6cd5\u8f7b\u677e\u8bbf\u95eeGUI\u7684\u60c5\u51b5\u4e0b\u975e\u5e38\u65b9\u4fbf\uff1b\u60a8\u60f3\u8981\u64cd\u4f5c\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u7684\u5185\u90e8\u4ee3\u7801\u6216\u6e90\u4ee3\u7801\u3002SikuliX\u652f\u6301\u4f5c\u4e3a\u811a\u672c\u8bed\u8a00\u2026\u2026\u60a8\u53ef\u4ee5\u5728Java\u7f16\u7a0b\u4e2d\u4f7f\u7528\u5b83\uff0c\u4e5f\u53ef\u4ee5\u5728\u4efb\u4f55\u652f\u6301Java\u7684\u7f16\u7a0b/\u811a\u672c\u8bed\u8a00\uff08Jython\u3001JRuby\u3001Scala\u3001Clojure\u7b49\uff09\u4e2d\u4f7f\u7528\u5b83\u3002\u5c3d\u7ba1SikuliX\u76ee\u524d\u5728\u4efb\u4f55\u79fb\u52a8\u8bbe\u5907\u4e0a\u90fd\u4e0d\u53ef\u7528\uff0c\u4f46\u5b83\u53ef\u4ee5\u4e0e\u53f0\u5f0f\u8ba1\u7b97\u673a\u4e0a\u7684\u76f8\u5e94\u6a21\u62df\u5668\u4e00\u8d77\u4f7f\u7528\uff0c\u6216\u57fa\u4e8eVNC\u89e3\u51b3\u65b9\u6848\u3002\u57fa\u4e8eADB\uff08\u5b89\u5353\u8c03\u8bd5\u6865\uff09\u7684\u5b89\u5353\u8bbe\u5907\u89e3\u51b3\u65b9\u6848\u5904\u4e8e\u65e9\u671f\u5b9e\u9a8c\u9636\u6bb5\uff0c\u9664\u4e86\u5728\u5c4f\u5e55\u4e0a\u5b9a\u4f4d\u56fe\u50cf\u5916\uff0cSikuliX\u8fd8\u53ef\u4ee5\u8fd0\u884c\u9f20\u6807\u548c\u952e\u76d8\u4e0e\u8bc6\u522b\u7684GUI\u5143\u7d20\u8fdb\u884c\u4ea4\u4e92\u3002\u8fd9\u9002\u7528\u4e8e\u591a\u76d1\u89c6\u5668\u73af\u5883\uff0c\u751a\u81f3\u9002\u7528\u4e8e\u5177\u6709\u67d0\u4e9b\u9650\u5236\u7684\u8fdc\u7a0b\u7cfb\u7edf\u3002SikuliX\u9644\u5e26\u57fa\u672c\u6587\u672c\u8bc6\u522b\uff08OCR\uff09\uff0c\u53ef\u7528\u4e8e\u641c\u7d22\u56fe\u50cf\u4e2d\u7684\u6587\u672c\u3002\u6b64\u529f\u80fd\u7531Tesseract\u63d0\u4f9b\u52a8\u529b\u3002SikuliX\u662f\u4e00\u4e2aJava\u5e94\u7528\u7a0b\u5e8f\uff0c\u9002\u7528\u4e8eWindows\u3001macOS\u548c\u5927\u591a\u6570Linux/Unix\u7cfb\u7edf\u3002-\u56de\u5230\u9876\u7aef-\u4f60\u60f3\u81ea\u52a8\u5316\u4e00\u4e9b\u91cd\u590d\u7684\u4efb\u52a1\u3002\u3002\u3002\u800c\u4e14\u4f60\u624b\u5934\u6ca1\u6709\u8db3\u591f\u7684\u5de5\u5177\u3002\u60a8\u5e0c\u671b\u6d4b\u8bd5\u6b63\u5728\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u3002\u60a8\u5e0c\u671b\u521b\u5efa\u4f7f\u7528\u6587\u6863\u6216\u57f9\u8bad\u6750\u6599\uff0c\u5e76\u5728\u6307\u5b9a\u7684\u5e94\u7528\u7a0b\u5e8f\u6216\u7f51\u9875\u4e0a\u5b9e\u65f6\u8fd0\u884c\u3002\u60a8\u5df2\u7ecf\u6709\u4e86\u8fd9\u65b9\u9762\u7684\u5de5\u5177\u548c\u5de5\u4f5c\u6d41\u7a0b\uff0c\u4f46\u60a8\u5e0c\u671b\u6dfb\u52a0SikuliX\u7684\u7279\u5b9a\u529f\u80fd\uff0c\u4ee5\u589e\u5f3a\u60a8\u7684\u65b9\u6cd5\uff0c\u63d0\u9ad8\u6548\u7387\u548c\u7ed3\u679c\u3002\u4f7f\u7528SikuliX\u610f\u5473\u7740\u505a\u6240\u89c1\u5373\u6240\u5f97\uff1a\u4f60\u770b\u5230\u7684\u5c31\u662f\u4f60\u5199\u7684\uff1b-\uff09-\u56de\u5230\u9876\u90e8\u2014\u2014\u5728\u8003\u8651\u4f7f\u7528SikuliX\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u786e\u4fdd\u60a8\u6709\u4e00\u4e2a\u6709\u6548\u768464\u4f4dJava\u5b89\u88c5\uff08\u7248\u672c8\u6216\u66f4\u9ad8\u7248\u672c\uff09\u3002\u4f46\u5728\u4e0b\u8f7d\u548c\u6446\u5f04\u4e4b\u524d\uff0c\u5f3a\u70c8\u5efa\u8bae\u9605\u8bfbQUICKSTART\u4e2d\u7684\u8840\u6dcb\u6dcb\u7684\u7ec6\u8282\u3002SikuliX\u53ef\u4eceSikuliX\u4e0b\u8f7d&#39\uff1bs Launchpad\u9875\u9762\uff0c\u6216\u8005\u4ece\u8fd9\u91cc\u8fd4\u56de\u5230\u9876\u90e8\uff0c\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\u548c\u5efa\u8bae\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u60a8\u5e94\u8be5\u5df2\u7ecf\u9605\u8bfb\u4e86QUICKSTART\u3002\u5bf9\u4e8eSikuliX\uff0c\u6709\u4e24\u79cd\u622a\u7136\u4e0d\u540c\u7684\u4f7f\u7528\u573a\u666f\uff1a\u4e00\u79cd\u662f\u57fa\u4e8e\u641c\u7d22\u56fe\u50cf\u548c\u4f7f\u7528\u9f20\u6807\u548c\u952e\u76d8\u64cd\u4f5cGUI\u5143\u7d20\u6765\u8bbe\u7f6e\u548c\u8fd0\u884c\u6216\u591a\u6216\u5c11\u590d\u6742\u7684SikuliX\u5de5\u4f5c\u6d41\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u6240\u8c13\u7684SikuliX IDE\uff0c\u5b83\u4e3a\u7f16\u8f91\u548c\u8fd0\u884c\u811a\u672c\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u652f\u6301\u3002\u5728\u811a\u672c\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u60a8\u53ef\u4ee5\u5904\u7406\u540d\u4e3ayou name\u7684SikuliX\u811a\u672c\u3002sikuli\u662f\u5305\u542b\u811a\u672c\u6587\u4ef6\u548c\u5de5\u4f5c\u6d41\u6240\u9700\u56fe\u50cf\u7684\u6587\u4ef6\u5939\u3002\u53ef\u4ee5\u4eceSikuliX IDE\u4e2d\u8fd0\u884c\u811a\u672c\uff0c\u4e5f\u53ef\u4ee5\u4ece\u547d\u4ee4\u884c\u8fd0\u884c\u811a\u672c\u3002\u8981\u4e0a\u8def\uff0c\u4f60\u5e94\u8be5\u81f3\u5c11\u626b\u63cf\u4e00\u6b21\u6587\u6863\u3002\u5728\u6210\u719f\u7684IDE\u4e2d\uff08IntelliJ IDEA\u3001Eclipse\u3001NetBeans\u7b49\uff09\u548c/\u6216\u67d0\u4e2a\u6d4b\u8bd5\u73af\u5883\u4f7f\u7528\u53ef\u7528\u7684API&#39\u5c06SikuliX\u96c6\u6210\u4e3a\u4e00\u4e2a\u529f\u80fd\u5e93\uff1b\u5728\u4f7f\u7528Java\u6216\u57fa\u4e8eJava\u7684\u8bed\u8a00\uff08Jython\u3001JRuby\u3001Scala\u3001Clojure\u7b49\uff09\u7f16\u7a0b\u65f6\u3002\u5982\u679c\u60a8\u5728\u8fd9\u79cd\u4f7f\u7528\u573a\u666f\u4e2d\u5de5\u4f5c\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u81f3\u5c11\u626b\u63cf\u4e00\u6b21\u6587\u6863\uff0c\u5e76\u67e5\u770b\u6709\u5173\u5982\u4f55\u4f7f\u7528Java\u7684\u7279\u6b8a\u4fe1\u606f\u3002-\u56de\u5230\u9876\u7aef\u2014\u2014\u83b7\u5f97\u5e2e\u52a9\u7684\u7b2c\u4e00\u4e2a\u5730\u65b9\u662f\u53c2\u89c2SikuliX&#39\uff1bs\u542f\u52a8\u677f\u9875\u9762\u3002\u4f60\u53ef\u4ee5\u5728\u7b54\u6848\u90e8\u5206\u95ee\u4e00\u4e2a\u95ee\u9898\uff0c\u6216\u8005\u6d4f\u89c8\u4e00\u4e0b\uff0c\u770b\u770b\u6709\u6ca1\u6709\u4ec0\u4e48\u6709\u7528\u7684\u3002\u4f60\u53ef\u4ee5\u67e5\u770b\u5e38\u89c1\u95ee\u9898\u90e8\u5206\u3002\u5373\u4f7f\u662fBugs\u90e8\u5206\u4e5f\u53ef\u80fd\u4f1a\u9610\u660e\u60a8\u5f53\u524d\u7684\u95ee\u9898\u2026\u5373\u4f7f\u53ea\u662f\u95ee\u4e00\u4e0b\u8c37\u6b4c\uff0c\u4e5f\u53ef\u80fd\u4f1a\u4ece\u7f51\u4e0a\u5176\u4ed6\u5730\u65b9\u6cc4\u9732\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u3002\u66f4\u591a\u5173\u4e8e\u5982\u4f55\u83b7\u5f97\u5e2e\u52a9\u548c\u89c1\u89e3\u7684\u4fe1\u606f\u3002-\u56de\u5230\u9876\u90e8\u2014\u2014\u6e90\u4ee3\u7801\u548c\u5f00\u53d1\u57fa\u7840\u90fd\u5728GitHub\u4e0a\u3002\u6b22\u8fce\u60a8\u7684\u4efb\u4f55\u8d21\u732e\uff0c\u5e76\u9ad8\u5ea6\u8d5e\u8d4f\u3002\u4f7f\u7528\u4efb\u4f55\u53ef\u7528\u7684\u6e20\u9053\u8054\u7cfb\u3002\n-\u56de\u5230\u9876\u7aef-", "note_en": "What is it?  \u00a0\u00a0\u00a0   For what is it?  \u00a0\u00a0\u00a0   Get it?  \u00a0\u00a0\u00a0   Use it?  \u00a0\u00a0\u00a0   Get help?  \u00a0\u00a0\u00a0   Contribute?       Latest stable version:   2.0.5  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u2014\u2014 \u00a0\u00a0\u00a0 Nightly builds:   currently not available       A new webpage is on the way \u00a0 -- \u00a0 having a new SikuliX logo     \u00a0\u00a0\u00a0\u00a0\t  ... visit the news blog - enjoy!      \u2026 in Huichol Indian culture: the power to see and understand things unknown.  (Thanks for the  picture showing a Sikuli)  Sikuli was started somewhen in 2009 as an open-source research project at the  User Interface Design Group at  MIT by Tsung-Hsiang Chang and Tom Yeh. Both left the project at Sikuli-X-1.0rc3 during 2012, when I decided to take over development and support and name it  SikuliX.      SikuliX automates anything you see on the screen of your desktop computer running Windows, Mac or some Linux/Unix. It uses  image recognition powered by OpenCV\u00a0to identify GUI components. This is handy in cases when there is no easy access to a GUI&#39;s internals or the source code of the application or web page you want to act on.   SikuliX supports as scripting languages   \u2026 and you can use it in Java programming and programming/scripting with any Java aware programming/scripting language (Jython, JRuby, Scala, Clojure, \u2026).  Though\u00a0 SikuliX\u00a0is currently not available on any mobile device, it can be used with the respective emulators on a desktop computer or based on VNC solutions. A solution for Android devices based on ADB (Android Debugging Bridge) is in an early experimental stage,  Besides locating images on a screen\u00a0 SikuliX\u00a0can run the mouse and the keyboard to interact with the identified GUI elements. This is available for multi monitor environments and even for remote systems\u00a0with some restrictions.   SikuliX\u00a0comes with basic text recognition (OCR) and can be used to search text in images. This feature is  powered by Tesseract.  SikuliX is a Java application, that works on Windows, macOS and most Linux/Unix systems.    \u2014 back to top \u2014     You want to automate some repetitive tasks in   ... and you do not have adequate tools at hand.  You want to test applications or web pages, that are under development.  You want to create usage documentation or training material, that run live on the addressed application or web page.   You already have tools and workflows for that, but you want to add the specific features of  SikuliX to enhance your approach and improve efficiency and outcome. Using  SikuliX means doing  WYSIWYS:  What You See Is What You Script ;-)   \u2014 back to top \u2014     Before thinking about using  SikuliX, you have to assure, that you have a valid 64-Bit Java installation (version 8 or later).    But before downloading and fiddling around,  it is highly recommended to   read about the gory details in QUICKSTART .    SikuliX can be downloaded from \u00a0  SikuliX&#39;s Launchpad page \u00a0or with a bit more information and advices \u00a0  from here   \u2014 back to top \u2014       In any case you should have   read through QUICKSTART .  With  SikuliX there are two rather distinct usage scenarios:    One sets up and runs more or less complex  SikuliX workflows based on searching images and acting on GUI elements with mouse and keyboard. For this one uses the so called  SikuliX  IDE, that brings some basic support for editing and running scripts. In the Scripting usage scenario, you handle  SikuliX scripts named you-name-it.sikuli, which are folders containing the script file and the images you need for the workflow. You either run the scripts from within the  SikuliX  IDE or from the command line.  To get on the road you should  at least once scan the docs.    In a mature IDE (IntelliJ IDEA, Eclipse, NetBeans, ...) and/or some testing environment one integrates  SikuliX as a feature library using the available API&#39;s while programming in Java or Java aware/based languages (Jython, JRuby, Scala, Clojure, ...). If you work in this usage scenario, then you should  at least once scan the docs and look out for special information on how to use with Java.   \u2014 back to top \u2014    The first place to get help is to visit  SikuliX&#39;s Launchpad page. You might ask a question in the Answers section or scan it for anything helpful. You might check the FAQ section. Even the Bugs section might shed light on your current problem. \u2026 and even  just asking Google, might reveal valuable information from elsewhere in the net.  More information on  how to get help and insights.    \u2014 back to top \u2014     The sources and hence the development base is on  GitHub.   Any contribution is welcome and highly appreciated. Use any of the available channels, to get in contact.\n  \u2014 back to top \u2014", "posttime": "2022-02-14 23:38:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u81ea\u52a8\u5316,automate,sikulix", "title": "SikuliX\u2013\u81ea\u52a8\u5316\u60a8\u5728\u8ba1\u7b97\u673a\u663e\u793a\u5668\u4e0a\u770b\u5230\u7684\u5185\u5bb9", "title_en": "SikuliX \u2013 Automate what you see on a computer monitor", "transed": 1, "url": "http://sikulix.com", "via": "", "real_tags": ["\u81ea\u52a8\u5316", "automate", "sikulix"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073179, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ece\u7ec8\u7aef\u89c2\u770b\u7ecf\u5178\u6d77\u7ef5\u5b9d\u5b9d\uff01\u611f\u8c22\u6bcf\u4e00\u4f4d\u4e3b\u6f14\u3001\u5206\u53c9\u3001\u64b0\u5199\u95ee\u9898\u3001\u8bf7\u6c42\u62c9\u62fd\u7684\u4eba\uff0c\u4ee5\u53caspongebob cli\u7684\u7528\u6237\uff01\n#Sudo\u4e0d\u662f&#39\uff1b\u53ea\u8981\u4f60&#39\uff1b\u6211\u4eec\u5728Rootgit\u514b\u9686\u4e2dhttps://github.com/trakBan/spongebob-cli.gitcd spongebob clichmod+x spongebob clisudo python\u5b89\u88c5\u7a0b\u5e8f\u3002py\u5b89\u88c5\n\u5982\u679c\u7a0b\u5e8f\u5728\u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff0c\u5b83\u5c06\u5217\u51fa\u6240\u6709\u7684\u5267\u96c6\uff0c\u5e76\u5141\u8bb8\u60a8\u64ad\u653e\u5b83\u4eec--\u4e0b\u8f7d|-d\uff0c\u7528\u6cd5\u2014\u2014\u4e0b\u8f7d{a number of a\u63d2\u66f2}\uff0c\u8fd9\u5c06\u5728\u8fd0\u884c\u547d\u4ee4\u7684\u76ee\u5f55\u4e0b\u4e0b\u8f7d\u8be5\u89c6\u9891--\u4e0b\u8f7d\u5168\u90e8|-da\uff0c\u7528\u6cd5\u2014\u2014\u4e0b\u8f7d\u5168\u90e8\uff0c\u8fd9\u5c06\u4e0b\u8f7d\u5b83\u522e\u4e0b\u7684\u6bcf\u4e00\u4e2a\u6d77\u7ef5\u5b9d\u5b9d\u89c6\u9891--binge |-b\uff0c\u7528\u6cd5\u6d77\u7ef5\u5b9d\u5b9dcli\u2014\u2014binge\uff0c\u8fd9\u662f\u7528\u6765\u5f00\u59cb\u7b2c\u4e00\u96c6\u5e76\u4e00\u76f4\u73a9\u5230\u6700\u540e\u4e00\u96c6\u7684--list |-l\uff0c\u7528\u6cd5--list\uff0c\u8fd9\u5c06\u5217\u51fa\u6240\u6709\u5267\u96c6\uff0c\u7136\u540e\u9000\u51fa\u8282\u76ee--list |-l\uff0c\u7528\u6cd5--list{number}\u8fd9\u5c06\u663e\u793a\u60a8\u63d0\u4f9b\u7684\u9650\u5236\u7684\u96c6\u6570--play |-p\u7528\u6cd5\u2014\u2014play{a number of a spice}\uff0c\u8fd9\u5c06\u64ad\u653e\u8be5\u63d2\u66f2\u800c\u4e0d\u5217\u51fa\u63d2\u66f2--random |-r\uff0c\u7528\u6cd5\u6d77\u7ef5\u5b9d\u5b9dcli\u2014\u2014random\uff0c\u8fd9\u5c06\u64ad\u653e\u4e00\u4e2a\u968f\u673a\u63d2\u66f2--help |-h\u7528\u6cd5--help\u8fd9\u5c06\u6253\u5370\u6bcf\u4e2a\u53c2\u6570\u7684\u4f5c\u7528\u3002\n\u68c0\u67e5\u662f\u5426\u5b89\u88c5\u4e86mpv\u548cyoutube dl\u3002\u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5b89\u88c5youtube dl\u3002py\u6ca1\u6709\u6b63\u786e\u5b89\u88c5\n\u5982\u679c\u4f60\u6ca1\u6709&#39\uff1byoutube dl\u53ea\u6709\u4e00\u4e2a\u5206\u652f\uff0c\u5728\u4f60\u7684\u3002zshrc\u6216\u3002\u7528bashrc\u641c\u7d22youtube dl\uff0c\u5e76\u5c06\u5176\u6307\u5411\u4f60\u7684\u53c9\u5b50\u3002", "note_en": "Watch classic spongebob from the terminal!Thanks to everyone that is starring, forking, writing issues, pull requesting and just users of spongebob-cli!\n       #Sudo isn&#39;t required as long as you&#39;re in Rootgit clone https://github.com/trakBan/spongebob-cli.git cd spongebob-clichmod +x spongebob-clisudo python setup.py install\n    If the programm was ran without arguments it will list all the episodes and it will let you play them. --download | -d, usage --download {a number of a episode}, This will download that video under a directory the command was run. --download-all | -da, usage --download-all, This will download every spongebob video it scrapes. --binge | -b , usage spongebob-cli --binge, This is used to start the first episode and play until the last episode. --list | -l, usage --list, this will list all the episodes and then exit the program. --list | -l, usage --list {number} this will show the number of episodes with the limit you provided. --play | -p usage --play {a number of a episode}, This will play the episode without listing the episodes. --random | -r, usage spongebob-cli --random, This will play a random episode. --help | -h usage --help this will print what each argument does.\n                   Check if you have mpv and youtube-dl installed. You can also install  youtube-dl through your package manager if  setup.py did not install it correctly\n If you don&#39;t have youtube-dl but a fork of it, make a alias in your .zshrc or .bashrc for youtube-dl and direct it to your fork.", "posttime": "2022-02-14 23:22:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cli,spongebob,\u7528\u6cd5", "title": "Spongebob CLI\u2013\u4ece\u7ec8\u7aef\u89c2\u770b\u7ecf\u5178\u6d77\u7ef5\u5b9d\u5b9d", "title_en": "Spongebob-CLI \u2013 Watch classic spongebob from the terminal", "transed": 1, "url": "https://github.com/trakBan/spongebob-cli", "via": "", "real_tags": ["cli", "spongebob", "\u7528\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073178, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u771f\u7684\u5f88\u559c\u6b22\u56f4\u68cb\u7f16\u7a0b\u8bed\u8a00\u3002\u7b2c\u4e00\u6b21\u4f7f\u7528\u5b83\u65f6\uff0c\u5b83\u770b\u8d77\u6765\u6709\u70b9\u6ed1\u7a3d\uff0c\u4f46\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\uff0c\u5f53\u4f60\u53d1\u73b0\u7f16\u5199\u670d\u52a1\u5668\u8f6f\u4ef6\u662f\u591a\u4e48\u65b9\u4fbf\u65f6\uff0c\u4f60\u4f1a\u89c9\u5f97\u201c\u554a\uff0c\u6211\u660e\u767d\u4e86\u201d\u2014\u2014\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u4f46\u5c31\u50cf\u5728\u4efb\u4f55\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\u6709\u51e0\u4ef6\u4e8b\u771f\u7684\u5f88\u70e6\u4eba\u3002\nJava\u505a\u5f97\u5f88\u597d\u7684\u4e00\u4ef6\u4e8b\u662fJavadoc\u3002\u60a8\u53ef\u80fd\u559c\u6b22\uff0c\u4e5f\u53ef\u80fd\u4e0d\u559c\u6b22\u6587\u6863\u7684\u8bed\u6cd5\u6216\u5448\u73b0\u65b9\u5f0f\uff0c\u4f46\u5b83\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u7279\u6027\u3002\u6bd4\u5982\u80fd\u591f\u663e\u5f0f\u5730\u8bb0\u5f55\u53c2\u6570\u3001\u8fd4\u56de\u503c\u548c\u53ef\u80fd\u4f1a\u88ab\u629b\u51fa\u7684\u5f02\u5e38\u3002\u5728\u8bb0\u5f55\u65b9\u6cd5\u65f6\uff0c\u60a8\u5e0c\u671b\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b83\u4e0e\u60a8\u5e94\u8be5\u5982\u4f55\u6d4b\u8bd5\u548c\u8bc4\u4f30\u4ee3\u7801\u6709\u5173\u3002\n\u7f16\u5199\u65b9\u6cd5\uff0c\u8bb0\u5f55\u53c2\u6570\u3001\u8fd4\u56de\u503c\u548c\u5f02\u5e38\uff0c\u4ee5\u53ca\u524d\u7f6e\u548c\u540e\u7f6e\u6761\u4ef6\u3002\u7136\u540e\uff0c\u5f53\u60a8\u7f16\u5199\u6d4b\u8bd5\u65f6\uff0c\u60a8\u6d4b\u8bd5\u7684\u662f\u6587\u6863\u4e2d\u627f\u8bfa\u7684\u5185\u5bb9\u3002\u4f60\u4e0d\u8003\u8651\u5b9e\u73b0\u2014\u2014\u4f60\u53ea\u4f7f\u7528Javadoc\u3002\u5982\u679c\u8fd9\u4e2a\u65b9\u6cd5\u7b26\u5408tin\u4e0a\u7684\u8bf4\u660e\uff0c\u5f88\u597d\uff0c\u90a3\u4e48\u4f60\u53ef\u4ee5\u7ee7\u7eed\u7f16\u5199\u6d4b\u8bd5\uff0c\u5728\u4e86\u89e3\u65b9\u6cd5\u5185\u90e8\u60c5\u51b5\u7684\u57fa\u7840\u4e0a\u8fdb\u884c\u64cd\u4f5c\u3002\u4f46\u5982\u679c\u4f60\u4e0d\u80fd\u4fe1\u5b88\u627f\u8bfa\uff0c\u4f60\u5fc5\u987b\u5148\u56de\u53bb\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u505a\u6cd5\u3002\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u8fd9\u4f1a\u63ed\u793a\u51fa\u4f60\u7684\u627f\u8bfa\u5e76\u4e0d\u603b\u662f\u4f60\u6240\u80fd\u5b9e\u73b0\u7684\u3002\u8fd4\u56de\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6216\u8005\u7ed9\u65b9\u6cd5\u8f93\u5165\u5f02\u5e38\u7684\u8f93\u5165\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u8fd9\u5c24\u5176\u5bb9\u6613\u641e\u7838\u3002\n\u5bf9\u4e8e\u5e94\u8be5\u5982\u4f55\u5f7b\u5e95\u5730\u8bb0\u5f55\u548c\u6d4b\u8bd5\u4ee3\u7801\uff0c\u6709\u4e0d\u540c\u7684\u601d\u60f3\u6d41\u6d3e\u3002\u6211\u7684\u76ee\u6807\u5f88\u7b80\u5355\uff1a\u7ed9\u5b9a\u6587\u6863\u548c\u6d4b\u8bd5\uff0c\u60a8\u5e94\u8be5\u80fd\u591f\u91cd\u65b0\u521b\u5efa\u6d4b\u8bd5\u4e2d\u7684\u4ee3\u7801\u3002\n\u5c06\u6587\u6863\u548c\u6d4b\u8bd5\u89c6\u4e3a\u4ee3\u7801\u7684\u4e00\u90e8\u5206\u3002\u4f60\u5e94\u8be5\u80fd\u591f\u5220\u9664\u548c\u91cd\u65b0\u521b\u5efa\u4ee3\u7801\uff0c\u53ea\u9700\u8981\u6587\u6863\u548c\u6d4b\u8bd5\u3002\n\u6709\u6e05\u6670\u6807\u8bc6\u53c2\u6570\u3001\u8fd4\u56de\u503c\u7b49\u7684\u6807\u8bb0\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u81ea\u52a8\u68c0\u67e5\u662f\u5426\u786e\u5b9e\u8bb0\u5f55\u4e86\u6240\u6709\u5e94\u8be5\u8bb0\u5f55\u7684\u5185\u5bb9\u3002\u8be5\u5de5\u5177\u53ef\u4ee5\u6307\u51fa\u60a8\u61d2\u60f0\u7684\u5730\u65b9\u3002\n\u6211\u4e0d\u559c\u6b22\u56f4\u68cb\u3002\u5f53\u60a8\u4e60\u60ef\u4e8e\u8ba9\u5de5\u5177\u5e2e\u52a9\u60a8\u4e86\u89e3\u81ea\u5df1\u7684\u9a6c\u864e\u4e4b\u5904\u65f6\uff0cGo\u6587\u6863\u6ce8\u91ca\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u5012\u9000\u3002\u60a8\u6ca1\u6709\u4efb\u4f55\u7528\u4e8e\u6307\u5b9a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7684\u8bed\u6cd5\u3002\u800c\u4e14\u5bf9\u6ce8\u91ca\u7684\u8981\u6c42\u51e0\u4e4e\u6beb\u65e0\u7528\u5904\uff1a\u6ce8\u91ca\u5fc5\u987b\u4ee5\u51fd\u6570\u540d\u5f00\u5934\uff0c\u5e76\u4e14\u540d\u79f0\u540e\u81f3\u5c11\u8fd8\u6709\u4e00\u4e2a\u5355\u8bcd\u3002\u662f\u7684\uff0c\u56e0\u4e3a\u8fd9\u786e\u4fdd\u4e86\u5408\u7406\u7684\u8bc4\u8bba\uff0c\u5bf9\u5417\uff1f\n\u60a8\u5e94\u8be5\u8bb0\u5f55\u53c2\u6570\uff0c\u4f46\u5b9e\u9645\u4e0a\u6ca1\u6709\u4efb\u4f55\u597d\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u7f16\u7a0b\u7cbe\u786e\u5730\u5728\u6ce8\u91ca\u4e2d\u67e5\u627e\u53c2\u6570\u6587\u6863\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u597d\u7684\u65b9\u6cd5\u4ee5HTML\u6216\u5176\u4ed6\u683c\u5f0f\u5448\u73b0\u5b83\u3002\u4f5c\u4e3a\u6587\u6863\u7684\u4f7f\u7528\u8005\uff0c\u60a8\u6700\u7ec8\u4f1a\u626b\u63cf\u6587\u672c\u4e2d\u7684\u53c2\u6570\u548c\u8fd4\u56de\u503c\uff0c\u540c\u65f6\u5fc5\u987b\u5411\u4e0b\u6d4f\u89c8\u51fd\u6570\u7b7e\u540d\u3002\n\u7531\u4e8e\u6ca1\u6709\u8bb0\u5f55\u53c2\u6570\u7684\u597d\u65b9\u6cd5\uff0c\u5f00\u53d1\u4eba\u5458\u5f80\u5f80\u4f1a\u5bf9\u6b64\u9a6c\u864e\u3002\u5305\u62ec\u6211\u81ea\u5df1\u3002\u9605\u8bfb\u6587\u6863\u4f1a\u5e26\u6765\u66f4\u5927\u7684\u8ba4\u77e5\u5f00\u9500\uff0c\u6bcf\u4e2a\u4eba\u90fd\u4f1a\u4e3a\u6b64\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u5c06\u67e5\u627e\u67d0\u4e9b\u5185\u5bb9\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ece\u7cbe\u786e\u6027\u4e2d\u53d7\u76ca\u3002\u6211\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u4e0d\u5f97\u4e0d\u9605\u8bfb\u4ee3\u7801\uff0c\u56e0\u4e3a\u6587\u6863\u4e0d\u591f\u7cbe\u786e\u3002Java\u5b9e\u9645\u4e0a\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\u6211\u6ca1\u53bb\u3002\n\u6700\u521d\u7684Go-linter\u7684\u7ef4\u62a4\u8005\u503e\u5411\u4e8e\u7ad9\u5728\u6ca1\u6709\u5e2e\u52a9\u7684\u4e00\u8fb9\u2014\u2014\u575a\u6301\u8ba4\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6709\u6548\u5b9e\u8df5\u5e94\u8be5\u4ea7\u751flinter\u8b66\u544a\u3002\u4f8b\u5982\uff0c\u5f53linter\u62b1\u6028\u516c\u5171\u51fd\u6570\u8fd4\u56de\u672a\u62a5\u544a\u7684\u7ed3\u6784\u65f6\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u8fd9\u6837\u505a\u662f\u6709\u6b63\u5f53\u7406\u7531\u7684\uff0c\u5e94\u8be5\u53ef\u4ee5\u5173\u95ed\u8b66\u544a\u3002\u4f46\u4efb\u4f55\u8fd9\u6837\u505a\u7684\u8bf7\u6c42\u90fd\u88ab\u62d2\u7edd\u4e86\u3002\n\u6211\u8bb0\u5f97\u770b\u5230\u7684\u4e00\u4e2a\u66f4\u8352\u8c2c\u7684\u5efa\u8bae\u662f\u201c\u597d\u5427\uff0c\u90a3\u5c31\u5ffd\u7565\u6389\u6797\u7279\u5bf9\u6b64\u7684\u62b1\u6028\u5427\u201d\u3002\n\u8fd9\u4e0d\u662f\u597d\u5de5\u5177\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u5982\u679c\u4f60\u4e0d\u5f97\u4e0d\u5141\u8bb8\u751f\u6210\u4ea7\u751f\u8b66\u544a\u7684\u7248\u672c\uff0c\u4f60\u5f88\u5feb\u5c31\u4f1a\u88ab\u8b66\u544a\u6df9\u6ca1\uff0c\u770b\u4e0d\u5230\u4f60\u771f\u6b63\u5173\u5fc3\u7684\u90a3\u4e9b\u3002\u8fd8\u8bb0\u5f97Java\u4e2d\u5178\u578bMaven\u6784\u5efa\u7684\u8f93\u51fa\u5417\uff1f\u592a\u5435\u4e86\uff0c\u4f60\u6839\u672c\u770b\u4e0d\u5230\u6709\u65b0\u7684\u8b66\u544a\u51fa\u73b0\u3002\u56e0\u6b64\uff0c\u8b66\u544a\u53d8\u5f97\u6beb\u65e0\u7528\u5904\u3002\n\u4e0d\u542c\u53d6\u5f00\u53d1\u8005\u610f\u89c1\u7684\u7ed3\u679c\u662f\u4ec0\u4e48\uff1f\u73b0\u5728\u6211\u4eec\u6709\u4e86\u597d\u51e0\u6839\uff0c\u800c\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u7528\u4e00\u6839\u3002\u5fc5\u987b\u5b89\u88c5\u3001\u7406\u89e3\u548c\u7ba1\u7406\u3002\u867d\u7136\u4f60\u53ef\u80fd\u4f1a\u8038\u8038\u80a9\uff0c\u8bf4\u8fd9\u662f\u4ef6\u597d\u4e8b\uff0c\u4f46\u5982\u679c99%\u7684\u5f00\u53d1\u4eba\u5458\u90fd\u80fd\u8fbe\u6210\u4e00\u81f4\uff0c\u5e76\u4e14\u8fd9\u53ef\u4ee5\u6210\u4e3a\u6807\u51c6\u5de5\u5177\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u5c31\u66f4\u6709\u7528\u4e86\u3002\u5b83\u4e0d\u5fc5\u8981\u5730\u5206\u5272\u4e86Go\u7684\u4f7f\u7528\u65b9\u5f0f\u3002\n\u867d\u7136\u6211\u4eec\u8ba8\u8bba\u7684\u662f\u788e\u7247\u5316\uff0c\u4f46Go\u5728\u65e5\u5fd7\u8bb0\u5f55\u65b9\u9762\u4e5f\u53ef\u4ee5\u4eceJava\u5b66\u4e60\u3002\u4e0d\u662f\u56e0\u4e3aJava\u505a\u7684\u6bcf\u4ef6\u4e8b\u90fd\u662f\u5bf9\u7684\uff0c\u800c\u662f\u56e0\u4e3aJava\u505a\u4e86\u5f88\u591a\u9519\u8bef\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece\u4e2d\u5b66\u4e60\u3002\n\u5f53\u65e5\u5fd7\u8bb0\u5f55\u6210\u4e3aJava1.4\u6807\u51c6\u5e93\u7684\u4e00\u90e8\u5206\u65f6\uff0c\u5df2\u7ecf\u5b58\u5728\u5927\u91cf\u65e5\u5fd7\u8bb0\u5f55\u6846\u67b6\u3002\u5176\u4e2d\u4e00\u4e9b\u76f8\u5f53\u53ef\u6015\u7684\u4e1c\u897f\u53c8\u5927\u53c8\u7b28\u53c8\u6162\u3002\u4f46\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u5173\u6ce8\u7684\u662f\u8fd9\u4e9b\u5de5\u5177\u4e2d\u7684\u4e00\u4e9b\uff0c\u5b83\u4eec\u5c06\u65e5\u5fd7\u6d88\u606f\u5448\u73b0\u5230\u78c1\u76d8\u3001\u7f51\u7edc\u6216\u63a7\u5236\u53f0\u4e0a\u3002\u4eba\u4eec\u9009\u62e9\u6846\u67b6\u662f\u57fa\u4e8e\u7f8e\u5b66\uff0c\u800c\u4e0d\u662f\u6280\u672f\u5408\u7406\u6027\u3002\n\u722a\u54c7\u4f10\u6728\u4e1a\u6700\u7ec8\u6210\u4e3a\u4e00\u573a\u5f7b\u5934\u5f7b\u5c3e\u7684\u707e\u96be\u3002\u8981\u60f3\u4ece\u6df7\u4e71\u4e2d\u6446\u8131\u51fa\u6765\uff0c\u9700\u8981\u505a\u5f88\u591a\u5de5\u4f5c\u3002\u662f\u7684\uff0cjava\u3002util\u3002\u4f10\u6728\u786e\u5b9e\u6709\u5f31\u70b9\u3002\u5806\u6808\u8ddf\u8e2a\u751f\u6210\u8fc7\u53bb\u5f88\u6162\uff0c\u4f46\u5f88\u5feb\u5c31\u4e0d\u518d\u662f\u95ee\u9898\u4e86\u3002\u5b83\u5e94\u8be5\u6709\u4e00\u4e2aAPI\uff0c\u5141\u8bb8\u60a8\u5c06\u63d2\u503c\u5ef6\u8fdf\u5230\u60a8\u77e5\u9053\u65e5\u5fd7\u6d88\u606f\u662f\u5426\u4f1a\u88ab\u8f93\u51fa\u65f6\u3002\u4f46\u5b83\u975e\u5e38\u7b80\u5355\uff0c\u6613\u4e8e\u7406\u89e3\uff0c\u975e\u5e38\u6613\u4e8e\u4f7f\u7528\uff0c\u800c\u4e14\u5b83\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u8d77\u70b9\uff0c\u53ef\u4ee5\u4e3a\u5927\u591a\u6570\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u652f\u6301\u3002\n\u6240\u4ee5Go\u80af\u5b9a\u4ece\u4e2d\u5b66\u5230\u4e86\u4ec0\u4e48\uff1f\u4e0d\uff0cGo\u4f3c\u4e4e\u4ec0\u4e48\u90fd\u6ca1\u5b66\u5230\u3002\u5185\u7f6e\u7684\u65e5\u5fd7\u8bb0\u5f55\u662f\u6700\u539f\u59cb\u7684\u3002\u5b83\u751a\u81f3\u6ca1\u6709\u65e5\u5fd7\u7ea7\u522b\u7684\u6982\u5ff5\u3002\u66f4\u4e0d\u7528\u8bf4\u4efb\u4f55\u6709\u7528\u7684\u7ed3\u6784\u4e86\u3002\u4e3a\u4ec0\u4e48\u8bbe\u8ba1\u4eba\u5458\u4e0d\u80fd\u5728\u5f00\u59cb\u4f7f\u7528\u65e5\u5fd7\u5305\u4e4b\u524d\uff0c\u82b1\u4e00\u4e24\u5929\u65f6\u95f4\u4e0e\u7ecf\u9a8c\u4e30\u5bcc\u7684Java\u7a0b\u5e8f\u5458\u4ea4\u8c08\uff0c\u5e76\u5c1d\u8bd5\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u65e5\u5fd7\u7684\u77e5\u8bc6\uff1f\u77e5\u8bc6\u662f\u5b58\u5728\u7684\u3002\u4ed6\u4eec\u53ea\u662f\u6ca1\u6709\u5229\u7528\u5b83\u3002\n\u7ed3\u679c\u5982\u4f55\uff1f\u6211\u4eec\u73b0\u5728\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65e5\u5fd7\u6846\u67b6\uff0c\u62bd\u8c61\u4e0d\u662f\u5f88\u597d\uff0c\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u767b\u5f55Go\uff0c\u800c\u4e14\u95ee\u9898\u4f3c\u4e4e\u6bcf\u5e74\u90fd\u4f1a\u53d8\u5f97\u66f4\u7cdf\u3002\n\u5927\u591a\u6570\u8bed\u8a00\u90fd\u6709strftime\uff083\uff09\u7684\u8bed\u6cd5\u53d8\u4f53\u3002\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u90fd\u77e5\u9053\u8fd9\u79cd\u8bed\u6cd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u9760\u8bb0\u5fc6\u4f60\u4e0d\u5fc5\u67e5\u3002\u90a3\u4e48\uff0c\u4f60\u5230\u5e95\u4e3a\u4ec0\u4e48\u8981\u53d1\u660e\u4e00\u79cd\u65b0\u7684\u65f6\u95f4\u683c\u5f0f\u8bed\u6cd5\uff0c\u8981\u6c42\u4f60\u8bb0\u4f4f\u4e00\u4e2a\u201c\u795e\u5947\u201d\u7684\u65f6\u95f4\u6233\uff0c\u5e76\u8bd5\u56fe\u8bb0\u4f4f\u5b83\u662f\u5426\u9075\u5faa\u4e86\u7f8e\u56fd\u4e0d\u5408\u7406\u7684\u6708/\u65e5\u987a\u5e8f\u7684\u505a\u6cd5\u3002\u4e0d\u8fc7\uff0c\u5b83\u6709\u4e00\u4e2a\u8865\u507f\u529f\u80fd\uff1a\u66f4\u5bb9\u6613\u5728\u5c0f\u6570\u79d2\u5185\u6307\u5b9a\u6240\u9700\u7684\u4f4d\u6570\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u3002\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u5e76\u6ca1\u6709\u964d\u4f4e\u8ba4\u77e5\u5f00\u9500\u3002", "note_en": "I really like the Go programming language. It looks a bit funny the first time you start using it, but after a while you get that \u201cahh, I see\u201d-feeling due when you discover how convenient it is when writing server software. But as in any language there are a few things that are really annoying.\n  One thing that Java did well was Javadoc. You may or may not like the syntax or how the documentation is rendered, but it had some important features. Like being able to explicitly document parameters, return values and exceptions that might get hurled at you. When documenting methods you want this because it ties into how you should be testing and evaluating the code.\n Write the method, document the parameters, return values and exceptions, along with the pre and post-conditions. Then, when you write the test, what you test against is what was promised in the documentation. You don\u2019t think about the implementation - you only use the Javadoc. If the method does what it says on the tin, great, then you can go on to writing the tests that operate with some knowledge of what goes on inside the method. But if you can\u2019t keep your promises, you have to go back and fix that first.\n This is a good practice. Some portion of the time, this will reveal that what you promise isn\u2019t always what you deliver. It is particularly easy to mess up what happens when you return or what happens if you feed a method unusual inputs.\n There are different schools of thought about how thoroughly you should document and test code. My goal for this is simple:  given the documentation and the tests you should be able to re-create the code under test.\n Think of the documentation and tests as a cast of your code. You should be able to delete and re-create the code with only the docs and the tests.\n Having markup that clearly identifies parameters, return values etc means you can automate checking that you have indeed documented everything you should document. The tooling can point out where you have been lazy.\n I\u2019m not fond of Go documentation conventions. When you are used to letting the tooling help you see where you have been sloppy, Go documentation comments are a big step back. You don\u2019t have any syntax for specifying parameters and return values. And the requirements for comments are pretty much useless: comments have to begin with the function name and have at least one more word after the name. Yeah, because that ensures sensible comments, right?\n You should be documenting the parameters, but there really isn\u2019t any good way to programmatically find parameter documentation in the comment with any precision. Which means there is no good way to render it in HTML or other formats. As a consumer of documentation you end up scanning blobs of text for parameters and return values while having to glance down at the function signature.\n Since there is no good way to document parameters developers tend to get sloppy about this. Myself included. Reading documentation carries a greater cognitive overhead which is paid by everyone who is going to look something up and who could benefit from precision. I often find myself having to read the code because the documentation is lacking in precision. Java actually got this right. Go didn\u2019t.\n  The maintainers of the original Go linter tended to be a bit on the unhelpful side - insisting that valid practices that were in widespread use should produce linter warnings. For instance when the linter complains about public functions that return unexported structs. In some cases there are valid reasons to do so and it should be possible to turn off the warning for that. But any requests to do that were just rejected.\n One of the more nonsensical suggestions I remember seeing was \u201cwell, then just ignore that the linter complains about this\u201d.\n That\u2019s not how good tooling works. If you have to allow builds that produce warnings, you will soon drown in warnings and you won\u2019t see the ones that you actually care about. Remember the output from a typical Maven build in Java? It was so noisy you\u2019d never spot a new warning turning up. So warnings became entirely useless.\n The result of not listening to developers? Rather than have one linter that everyone uses, now we have several. Which have to be installed, understood and managed. And while you may shrug and say this is a good thing, it would have been more useful to have a linter 99% of developers can agree on and which can be part of the standard tooling. It unnecessarily fragments how Go is used.\n   And while we are on the topic of fragmentation, Go could also have learned from Java when it comes to logging. Not because Java did everything right, but because Java did a lot of things wrong that we can learn from.\n When logging became part of the standard library in Java 1.4 there already existed a fauna of logging frameworks. Some of them rather beastly things that were big, clumsy and slow. But what most programmers focused on was the bits of these tools that rendered log messages onto disk, network or console. People chose frameworks based on aesthetics - not technical soundness.\n The Java logging landscape ended up as an unmitigated disaster. With a lot of work going into trying to abstract your way out of the mess. Yes,  java.util.logging did have weaknesses. Stack trace generation used to be slow, but that quickly stopped being a problem. And it should have had an API that allowed you to postpone interpolation to when you know if the log message will ever be output. But it was minimal, easy to understand and very easy to use and it was a better starting point for evolving something that could have ticked the boxes of most developers.\n So surely Go learned something from this? No. Go seems to have learnt nothing. The built-in logging is about as primitive as it gets. It doesn\u2019t even have the concept of log levels. Let alone any useful structure. Why couldn\u2019t the designers of this have spent a day or two talking to an experienced Java programmer and try to learn something about logging before embarking on the  log package? The knowledge existed. They just didn\u2019t tap into it.\n The result? We now have lots of different logging frameworks, the abstractions aren\u2019t very good, there is no  one way to do logging in Go, and the problem seems to get a little bit worse every year.\n   Most languages have some variant of the syntax of  strftime(3). Most programmers know how this syntax works. By heart. You don\u2019t have to look it up. Why on earth do you then have to invent a new syntax for time formats that requires you to memorize a \u201cmagic\u201d timestamp, and try to remember if it follows the broken US practice of illogical month/day ordering. It has one redeeming feature though: it is easier to specify how many digits you want in fractional seconds. But this wasn\u2019t a problem in need of fixing. And the solution didn\u2019t make the cognitive overhead any lower.", "posttime": "2022-02-14 23:18:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6446\u8131,annoyances,\u65e5\u5fd7", "title": "\u6446\u8131\u70e6\u607c", "title_en": "Go Annoyances", "transed": 1, "url": "https://borud.no/notes/2022/godoc/", "via": "", "real_tags": ["\u6446\u8131", "\u65e5\u5fd7"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Sun\u7684Fishworks\u56e2\u961f\u7684\u5e03\u4f26\u4e39\u00b7\u683c\u96f7\u683c\uff08Brendan Gregg\uff09\u5728\u8bf1\u5bfc\u78c1\u76d8\u5ef6\u8fdf\u65b9\u9762\u6709\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u53d1\u73b0\u3002\u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Brendan\u7684\u535a\u5ba2\uff1ahttp://blogs...", "note_en": "Brendan Gregg from Sun's Fishworks team makes an interesting discovery about inducing disk latency.  For more details, see Brendan's blog entry: http://blogs...", "posttime": "2022-02-14 23:18:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u786c\u76d8,rotational,brendan", "title": "\u5bf9\u65cb\u8f6c\u786c\u76d8\u5927\u558a\u5927\u53eb\u4f1a\u5f71\u54cd\u6027\u80fd\uff082008\uff09", "title_en": "Yelling at rotational hard disks perturbs performance (2008)", "transed": 1, "url": "https://www.youtube.com/watch?v=tDacjrSCeq4", "via": "", "real_tags": ["\u6027\u80fd", "\u786c\u76d8", "brendan"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec&#39\uff1b\u6211\u5c06\u7ee7\u7eed\u6211\u4eec\u7684\u65c5\u7a0b\uff0c\u5728\u74e6\u62c9\u7f16\u5199hello\uff0cworld\u7a0b\u5e8f\uff0c\u4f46\u8fd9\u6b21\u662fGTK\uff084\uff09\u5e93\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u521b\u5efa\u4e24\u4e2a\u540d\u4e3aHello\u7684\u65b0\u6587\u4ef6\u3002\u74e6\u62c9\u548c\u6885\u56e0\u3002\u74e6\u62c9\u3002\u662f\u7684\uff0c\u6211\u4eec\u7684\u8ba1\u5212\u662f\u4ece\u4e0a\u4e00\u7bc7\u6587\u7ae0\u7684\u7ed3\u5c3e\u7ee7\u7eed\uff0c\u7136\u540e\u4f7f\u7528GTK\u6162\u6162\u6784\u5efahello\uff0cworld\u7684\u5de5\u4f5c\u7248\u672c\u3002\n\u6253\u5f00\u8fd9\u4e2a\u65b0\u521b\u5efa\u7684main\u3002vala\u548ccopy\u7f16\u5199\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4e4b\u524d\u5728hello/main\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u540c\u3002\u74e6\u62c9\u6863\u6848\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cmain\uff08\uff09\u65b9\u6cd5\u3002\nint main\uff08string[]args\uff09{string name=&#39\uff1bworld&#39\uff1bvar hello=new hello\uff08name\uff09\uff1bhello.greet\uff08\uff09\uff1breturn 0\uff1b}\n\u63a5\u4e0b\u6765\uff0c\u6253\u5f00\u65b0\u521b\u5efa\u7684Hello\u3002vala\u548ccopy\u7f16\u5199\u7684\u4ee3\u7801\u4e0e\u6211\u4eec\u4e4b\u524d\u5728hello/hello\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u76f8\u540c\u3002\u74e6\u62c9\u6863\u6848\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5927\u5bb6\u597d\u3002\n\u516c\u5171\u7c7bHello{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}public void greet\uff08\uff09{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0c%s\\n&#34\uff1b\uff0cthis.name\uff09\uff1b}\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u901a\u8fc7Gtk\u6269\u5c55\u8fd9\u4e2aHello\u7c7b\u3002\u5e94\u7528\u7c7b\u5982\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u6b63\u5728\u521b\u5efaGTK\u5e94\u7528\u7a0b\u5e8f\uff01\u6b64\u6269\u5c55\u901a\u8fc7\uff1aoperator\u5b8c\u6210\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}public void greet\uff08\uff09{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0c%s\\n&#34\uff1b\uff0cthis.name\uff09\uff1b}\n\u6211\u4eec\u4e0d\u518d\u9700\u8981\u8fd9\u4e2agreet\uff08\uff09\u65b9\u6cd5\uff0c\u56e0\u4e3a\u6211\u4eec&#39\uff1bWe\u2019\u6211\u4eec\u5bf9\u5728\u7a97\u53e3\uff08\u6216\u5e94\u7528\u7a0b\u5e8f\uff09\u800c\u4e0d\u662f\u7ec8\u7aef\u4e2d\u663e\u793ahello\uff0cworld\u611f\u5174\u8da3\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public string name\uff1bpublic Hello\uff08string name\uff09{this.name=name\uff1b}\n\u6211\u4eec\u4e13\u95e8\u521b\u5efa\u4e86name\u53d8\u91cf\uff0c\u4ee5\u4fbf\u5728greet\uff08\uff09\u65b9\u6cd5\u4e2d\u6253\u5370\u5b83\u7684\u503c\u3002\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u6ca1\u6709greet\uff08\uff09\u65b9\u6cd5\uff0c\u6240\u4ee5\u6211\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u8ba4\u4e3a\u6211\u4eec\u73b0\u5728\u9700\u8981\u4efb\u4f55\u4e0ename\u53d8\u91cf\u5173\u8054\u7684\u4ee3\u7801\u3002\u4f46\u662f\uff0c\u662f\u7684\uff0c\u6211\u4eec\u786e\u5b9e\u9700\u8981\u8fd9\u79cd\u516c\u5f00\u7684\u65b9\u6cd5\u3002\u90a3\u4e48\uff0c\u8ba9&#39\uff1bs\u6709\u7a7a\u7684public\u65b9\u6cd5\u4f9b\u8fdb\u4e00\u6b65\u4f7f\u7528\u3002\n\u6839\u636e\u6587\u6863\uff0c\u6211\u4eec\u9700\u8981\u4ece\u8fd9\u4e2a\u516c\u5171\u65b9\u6cd5\u8c03\u7528Object\uff08\uff09\u65b9\u6cd5\u3002\u8fd9\u4e2aObject\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\u2014\u2014application_id\u3001\u53cd\u5411\u57df\u540d\u8868\u793a\u6cd5\u4e2d\u7684\u552f\u4e00\u5e94\u7528\u7a0b\u5e8fid\u6216RDN\uff0c\u4ee5\u53ca\u5e26\u6709\u5176\u4e2d\u4e00\u4e2a\u9884\u5b9a\u4e49\u503c\u548cApplicationFlags\u7684\u6807\u5fd7\u3002\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\u6ca1\u6709\u4efb\u4f55\u4ef7\u503c\u3002\u603b\u4e4b\uff0c\u4f60\u9700\u8981\u8f93\u5165\u8fd9\u6837\u7684\u5185\u5bb9\u3002\u5982\u679c\u60a8\u6709GitHub/GitLab\u5e10\u6237\uff0c\u8bf7\u6839\u636e\u60a8\u7684\u504f\u597d\u66f4\u6539\u5e94\u7528\u7a0b\u5e8fid\u7684\u503c\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\n\u6211\u4eec&#39\uff1b\u6211\u5c06\u5728\u5c06\u6765\u8ba8\u8bba\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684id\u548c\u6807\u5fd7\u3002\u73b0\u5728\uff0c\u60a8\u9700\u8981\u8f93\u5165\u4e00\u4e9b\u4e1c\u897f\uff0c\u4ee5\u4fbfGTK\u6b63\u786e\u521d\u59cb\u5316\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u3002\u5b83&#39\uff1b\u5b83\u5c31\u50cf\u4e00\u4e2a\u6846\u67b6\uff0c\u5199\u4e0b\u8fd9\u4e2a\u548c\u90a3\u4e2a\uff0c\u8ba9\u6211\u4eec\u6b63\u786e\u5730\u8c03\u7528\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}void activate\uff08\uff09{}\nGtk\u4e2d\u5df2\u5b58\u5728\u6b64activate\uff08\uff09\u65b9\u6cd5\u3002\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u505a\u7684\u662f\uff0c\u4f7f\u7528override\u5173\u952e\u5b57\u91cd\u5199\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\u91cd\u5199void activate\uff08\uff09{}\n\u6211\u60f3\u4f60\u4e0d\u4f1a&#39\uff1b\u4e0d\u8981\u5fd8\u8bb0\u8bbf\u95ee\u4fee\u9970\u7b26\u7684\u89c4\u5219\u3002\u5728\u8fd9\u4e2aactivate\uff08\uff09\u65b9\u6cd5\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u4f7f\u7528\u53d7\u4fdd\u62a4\u7684\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u5982\u4e0b\u6240\u793a&#39\uff1b\u8fd9\u5c31\u662f\u6211\u4eec\u7684\u8981\u6c42\uff01\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}\u53d7\u4fdd\u62a4\u7684\u8986\u76d6\u65e0\u6548\u6fc0\u6d3b\uff08\uff09{}\n\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u6fc0\u6d3b\u5e94\u7528\u7a0b\u5e8f\u3002\u540c\u6837\uff0c\u60a8\u53ef\u80fd\u4f1a\u5bf9\u8fd9\u6bb5\u4ee3\u7801\u611f\u5230\u56f0\u60d1\u3002\u4f46\u662f\uff0c\u8fd9\u662f\u60a8\u9700\u8981\u952e\u5165\u7684\u7c7b\u4f3c\u4e8e\u6846\u67b6\u7684\u5185\u5bb9\uff08\u6211\u77e5\u9053\u5e93\uff0c\u968f\u4fbf\u4ec0\u4e48\uff09\uff01\n\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u88ab\u6fc0\u6d3b\uff0c\u6211\u4eec\u9700\u8981\u505a\u4e9b\u4ec0\u4e48\u3002\u663e\u793a\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u600e\u4e48\u6837\uff1f\u90a3&#39\uff1b\u8fd9\u5c31\u662f\u4f60&#39\uff1b\u6211\u4eec\u5e94\u8be5\u4f7f\u7528\u684c\u9762\u5e94\u7528\u7a0b\u5e8f\uff0c\u5bf9\u5417\uff01\n\u5728\u8fd9\u4e2aactivate\uff08\uff09\u65b9\u6cd5\u4e2d\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u521b\u5efa\u4e00\u4e2a\u7a97\u53e3\u3002\u5728GTK\u4e2d\uff0c\u7a97\u53e3\u662f\u5c0f\u90e8\u4ef6\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u6240\u6709\u56fe\u5f62\u7ec4\u4ef6\u90fd\u662f\u5c0f\u90e8\u4ef6\uff0c\u5305\u62ec\u83dc\u5355\u3001\u6309\u94ae\u3001\u6807\u7b7e\u3001\u590d\u9009\u6846\u3001\u5217\u8868\u7b49\u7b49\u3002\u8fd9\u4e9b\u90fd\u662fGTK\u4e2d\u7684\u5c0f\u90e8\u4ef6\uff0cGTK\u5bf9\u6bcf\u4e2a\u5c0f\u90e8\u4ef6\u90fd\u6709\u5355\u72ec\u7684\u7c7b\uff01\n\u8ba9&#39\uff1bs\u4f7f\u7528ApplicationWindow\u7c7b\u521b\u5efa\u7a97\u53e3\u5c0f\u90e8\u4ef6\u3002\u8fd9\u4e2aApplicationWindow\u7c7b\u63a5\u53d7\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4f5c\u4e3a\u53c2\u6570\uff0c\u8fd9\u4e2a\u53c2\u6570\u5c31\u662f\u8fd9\u4e2a\u7c7b\uff0c\u6216\u8005\u8fd9\u4e2a\u7c7b\u672c\u8eab\u5c31\u662f\u90a3\u4e2a\u5e94\u7528\u7a0b\u5e8f\uff08\u8bb0\u4f4f\uff0c\u6211\u4eec\u6269\u5c55\u4e86Gtk.application\uff0c\u5c06Hello\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\uff09\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1b}\n\u6211\u4eec\u521a\u521a\u4e3a\u5e94\u7528\u7a0b\u5e8f\u521b\u5efa\u4e86\u4e00\u4e2a\u7a97\u53e3\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u8c03\u7528\u3002\u5728\u8fd9\u4e2a\u7a97\u53e3\u5bf9\u8c61\u4e0a\u663e\u793a\uff08\uff09\u65b9\u6cd5\uff0c\u4ee5\u4fbf\u5728activate\uff08\uff09\u65b9\u6cd5\u6267\u884c\u65f6\u5b9e\u9645\u663e\u793a\u5b83\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.show\uff08\uff09\uff1b}\n\u8fd9\u662f\u6211\u4eec\u7684\u7b80\u5355\u7a97\u53e3\u5e94\u7528\u7a0b\u5e8f\uff01\u5728\u6211\u4eec\u7ee7\u7eed\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u5728main\u4e2d\u505a\u4e00\u4e9b\u5c0f\u7684\u4fee\u6539\u3002vala\u4f5c\u4e3a\u5f53\u524d\u4ee3\u7801\uff0c\u521b\u5efaHello\u7c7b\u7684\u5b9e\u4f8b\u5e76\u8fd0\u884cgreet\uff08\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u4e0d\u518d\u6709\u6548\u3002\nint main\uff08string[]args\uff09{string name=&#39\uff1bworld&#39\uff1bvar hello=new hello\uff08name\uff09\uff1b\u8fd4\u56de0\uff1b}\n\u6211\u4eec\u4e5f\u4e0d\u9700\u8981name\u53d8\u91cf\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u521b\u5efa\u5b9e\u4f8b\u65f6\u5c06\u5176\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u3002\n\u5728\u8fd9\u4e2ahello\u5bf9\u8c61\u4e0a\uff0c\u6211\u4eec\u9700\u8981\u6253\u7535\u8bdd\u3002\u65b9\u6cd5\u6765\u5b9e\u9645\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u5b9e\u4f8b\u3002\u6b64\u65b9\u6cd5\u63a5\u53d7args\u4f5c\u4e3a\u53c2\u6570\u3002\n\u8fd9run\uff08\uff09\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6574\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u8be5\u6574\u6570\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u663e\u5f0f\u76840\u3002\n\u6211\u4ece\u4e0a\u4e00\u7bc7\u6587\u7ae0\u4e2d\u590d\u5236\u4e86\u8fd9\u4e2a\u547d\u4ee4\uff0c\u60a8\u77e5\u9053\u8fd9\u5c06\u6839\u636e\u6211\u4eec\u5728\u8fd9\u4e9b\u6587\u4ef6\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u5c06hello\uff0cworld\u6253\u5370\u4e3a\u8f93\u51fa\u3002\n\u8fd9\u662f\u6b63\u786e\u7684\uff01\u4f46\u662f\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u8fd9\u4e2a\u547d\u4ee4\u518d\u505a\u4e00\u6b21\u4fee\u6539\uff0c\u56e0\u4e3a\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u6b63\u5728\u4f7f\u7528GTK\u5e93\u3002\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981\u901a\u77e5Vala\u7f16\u8bd1\u5668\u5728\u7f16\u8bd1\u7a0b\u5e8f\u65f6\u4f7f\u7528--pkg\u6807\u5fd7\uff0c\u540e\u8ddf\u5e93\u540d\u6216gtk4\uff08GTK\u5e93\u7684\u5b89\u88c5\u540d\uff09\u3002\u628a\u6240\u6709\u8fd9\u4e9b\u653e\u5728\u4e00\u8d77\uff0c\u4e0b\u9762\u662f\u6211\u4eec\u9700\u8981\u8fd0\u884c\u7684\u547d\u4ee4\u3002\n\u8fd0\u884c\u6b64\u547d\u4ee4\u540e\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u9ed8\u8ba4\u7684200x200\u7a97\u53e3\uff0c\u5176\u6807\u9898\u4e3a\u5e94\u7528\u7a0b\u5e8f\u540d\uff0c\u4f8b\u5982Hello\u3002\u4f46\u662f\uff0c\u8fd9\u4e0d\u662f\u6211\u4eec\u6240\u8bf4\u7684hello\uff0cworld\u8282\u76ee&#39\uff1b\u4f60\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u90fd\u770b\u4e0d\u5230hello\uff0cworld\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6253\u5370hello\uff0cworld\u800c\u4e0d\u662fhello\u4f5c\u4e3a\u6807\u9898\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u66f4\u65b0\u7a97\u53e3\u5c0f\u90e8\u4ef6\u7684\u5c5e\u6027\u503c\u6765\u5b9e\u73b0\u3002\u7a97\u53e3\u6709\u5f88\u591a\u5c5e\u6027\uff0c\u5305\u62ectitle\uff08\u7a97\u53e3\u7684\u6807\u9898\uff09\u3001default_width\uff08\u7a97\u53e3\u7684\u9ed8\u8ba4\u5bbd\u5ea6\uff09\u3001default_height\uff08\u7a97\u53e3\u7684\u9ed8\u8ba4\u9ad8\u5ea6\uff09\u7b49\u7b49\u3002\n\u6211\u4eec&#39\uff1b\u6211\u4eec\u73b0\u5728\u5c06\u628ahello\uff0cworld\u5206\u914d\u7ed9window&#39\uff1bs title\u548c300\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u5bbd\u5ea6\u548c\u9ed8\u8ba4\u9ad8\u5ea6\uff0c\u4ee5\u521b\u5efa\u5c3a\u5bf8\u4e3a300x300\u7684\u7a97\u53e3\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#height=300\uff1bwindow.default#width=300\uff1bwindow.show\uff08\uff09}\n\u8fd9\u662f\u4f7f\u7528GTK\u5e93\u7684hello\uff0cworld\u7a0b\u5e8f\u7684\u7b2c\u4e00\u4e2a\u7248\u672c\u3002\u6211\u4eec\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f&#39\uff1b\u8fd9\u662f\u7a97\u6237\u3002\n\u8981\u5728\u7a97\u53e3\u4e2d\u663e\u793a\u6587\u672c\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528Gtk\u521b\u5efa\u4e00\u4e2a\u6807\u7b7e\u5c0f\u90e8\u4ef6\u3002\u6807\u7b7e\u7c7b\uff0c\u5c31\u50cf\u6211\u4eec\u4f7f\u7528Gtk\u521b\u5efa\u7a97\u53e3\u4e00\u6837\u3002\u5e94\u7528\u7a0b\u5e8f\u7a97\u53e3\u7c7b\u3002\u5728\u521b\u5efa\u6807\u7b7e\u5c0f\u90e8\u4ef6\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4f20\u9012\u6587\u672c\uff0c\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662fhello\uff0cworld\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6807\u7b7e\u5df2\u521b\u5efa\u3002\u6211\u4eec\u73b0\u5728\u9700\u8981\u5728\u7a97\u53e3\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u6807\u7b7e\uff0c\u4ee5\u4fbf\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528window\u7684set_child\uff08\uff09\u65b9\u6cd5\u5e76\u5c06label\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5b83\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u8fd0\u884c\u6b64\u7a0b\u5e8f\u5e94\u5728\u4e24\u4e2a\u7a97\u53e3&#39\uff1b\u6807\u9898\u548c\u7a97\u53e3&#39\uff1bs\u533a\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\uff0c\u6dfb\u52a0\u4e00\u4e2a\u6309\u94ae\uff0c\u4e0a\u9762\u4f1a\u6709hello\uff0cworld\u6587\u672c\u3002\u8981\u6dfb\u52a0\u6309\u94ae\u5c0f\u90e8\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528Gtk\u3002\u6309\u94ae\u7c7b\u3002\u7136\u540e\u6211\u4eec\u9700\u8981\u5bf9\u521b\u5efa\u7684\u6309\u94ae\u4f7f\u7528set_label\uff08\uff09\u65b9\u6cd5\u6765\u8bbe\u7f6e\u6309\u94ae\u7684\u6807\u7b7e\u6216\u6587\u672c\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u6765\u786e\u8ba4\u8f93\u51fa\u3002\u6211\u4eec\u73b0\u5728\u5e94\u8be5\u770b\u5230hello\uff0cworld\u6587\u672c\u4e0b\u9762\u7684\u6309\u94ae\uff08\u63d0\u793a\uff1a\u5b83\u5c06\u4e0d\u8d77\u4f5c\u7528\uff09\u3002\n\u5b83\u6ca1\u6709\u6309\u9884\u671f\u5de5\u4f5c\uff0c\u539f\u56e0\u662f\uff0c\u7a97\u53e3\u53ea\u80fd\u5bb9\u7eb3\u4e00\u4e2a\u5b50\u9879\u6216\u5c0f\u90e8\u4ef6\uff0c\u800c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6b63\u5728\u5c1d\u8bd5\u6dfb\u52a0\u4e24\u4e2a\u5c0f\u90e8\u4ef6\u2014\u2014\u6807\u7b7e\u548c\u6309\u94ae\u3002\u56e0\u6b64\uff0c\u7a97\u53e3\u5bf9\u8c61\u6301\u6709\u7b2c\u4e00\u4e2a\u4f20\u9012\u7684\u5c0f\u90e8\u4ef6\uff0c\u800c\u5ffd\u7565\u5176\u4ed6\u5c0f\u90e8\u4ef6\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u5bb9\u5668\u5c0f\u90e8\u4ef6\u4f5c\u4e3a\u5bb9\u5668\uff0c\u5e76\u5bb9\u7eb3\u6211\u4eec\u60f3\u8981\u7684\u5c3d\u53ef\u80fd\u591a\u7684\u5c0f\u90e8\u4ef6\u3002\u7136\u540e\u6211\u4eec&#39\uff1b\u6211\u5c06\u4f7f\u7528set_child\uff08\uff09\u65b9\u6cd5\u5c06\u6b64\u5bb9\u5668\u5c0f\u90e8\u4ef6\u8bbe\u7f6e\u4e3a\u7a97\u53e3\u7684\u5b50\u7a97\u53e3\u3002GTK\u4e2d\u6709\u5f88\u591a\u5bb9\u5668\u5c0f\u90e8\u4ef6\uff0c\u6bd4\u5982box\u3001table\u3001grid\u7b49\u7b49\u3002\n\u4e3a\u4e86\u6f14\u793a\u7684\u76ee\u7684\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u4f7f\u7528Gtk\u3002Grid\u521b\u5efa\u7f51\u683c\u5bb9\u5668\u5c0f\u90e8\u4ef6\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u3002\u65b9\u6cd5\u5c06\u5176\u4ed6\u5c0f\u90e8\u4ef6\u6dfb\u52a0\u6216\u6253\u5305\u5230\u7f51\u683c\u5bb9\u5668\u4e2d\u3002\u8fd9attach\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u4e94\u4e2a\u53c2\u6570\uff0c\u6700\u540e\u4e24\u4e2a\u662f\u53ef\u9009\u7684\u2014\u2014\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\u5174\u8da3\u6dfb\u52a0\uff0c\u4ece\u5de6\u5f00\u59cb\u5217\u4e3a\u4f4d\u7f6e\uff0c\u4ece\u4e0a\u5f00\u59cb\u884c\u4e3a\u4f4d\u7f6e\u3002\u6700\u540e\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\u662f\u4ee5\u7a7a\u683c\u5f62\u5f0f\u8868\u793a\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u30021\u662f\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7684\u9ed8\u8ba4\u503c\uff08\u5982\u679c\u672a\u901a\u8fc7\uff09\u3002\n\u4e3a\u4e86\u5305\u88c5\u6807\u7b7e\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u8981\u5199\u4fe1\u4e86\u3002\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u628a\u6807\u7b7e\u5c0f\u90e8\u4ef6\u6253\u5305\u5728\u4ece\u5de6\u5230\u53f30\u548c\u4ece\u4e0a\u5230\u53f30\u7684\u4f4d\u7f6e\u3002\u662f\u7684\uff0c\u6805\u683c\u7684\u4f4d\u7f6e\u51e0\u4f55\u56fe\u5f62\u4ece\uff080\uff0c0\uff09\u5f00\u59cb\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u5bf9\u4e8ebutton\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u8981\u5199\u4fe1\u4e86\u3002\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u628a\u6309\u94ae\u5c0f\u90e8\u4ef6\u653e\u5728\u7b2c\u4e8c\u884c\u5de6\u8fb90\u548c\u4e0a\u97621\u7684\u4f4d\u7f6e\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u9879\uff08\u6807\u7b7e\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b69\u5b50\uff08\u6309\u94ae\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u6700\u540e\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u53d6\u6d88\u901a\u8bdd\u3002\u5c06\u6807\u7b7e\u548c\u6309\u94ae\u7684_child\uff08\uff09\u8bbe\u7f6e\u4e3a&#39\uff1b\u6211\u4eec\u5c06\u628a\u7f51\u683c\u8bbe\u7f6e\u4e3a\u5b50\u7a97\u53e3\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u5bf9\u8c61\uff08\u7f51\u683c\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u73b0\u5728\uff0c\u8fd0\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u5e94\u8be5\u663e\u793ahello\uff0cworld\u4e09\u6b21-\u6807\u9898\uff0c\u6587\u672c\u548cin\u6309\u94ae\u3002\n\u8fd9\u5f88\u597d\uff01\u8ba9&#39\uff1b\u5f53\u70b9\u51fb\u6309\u94ae\u65f6\uff0c\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5728\u7ec8\u7aef\u4e0a\u6253\u5370hello\uff0cworld\u6587\u672c\uff01\u4e3a\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u4fe1\u53f7\u7684\u6982\u5ff5\u3002\u6211\u4eec&#39\uff1b\u5f53\u6309\u94ae\u5b9e\u9645\u88ab\u70b9\u51fb\u65f6\uff0c\u6211\u4eec\u5c06\u6355\u6349\u6309\u94ae\u53d1\u51fa\u7684\u70b9\u51fb\u4fe1\u53f7\u3002\u6355\u6349\u4fe1\u53f7\u662f\u901a\u8fc7\u3002connect\uff08\uff09\u65b9\u6cd5\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5206\u6b65\u5199\u3002\n\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff0c\u5f53\u5355\u51fb\u6309\u94ae\u65f6\uff0c\u8fd0\u884cconnect\uff08\uff09\u65b9\u6cd5\u4e2d\u7f16\u5199\u7684\u4ee3\u7801\u3002\u8fd9\u4e2aconnect\uff08\uff09\u65b9\u6cd5\u63a5\u53d7\u533f\u540d\u65b9\u6cd5\u3002\n\u5728\u8fd9\u4e2a\u533f\u540d\u65b9\u6cd5\u4e2d\u7f16\u5199\u7684\u4efb\u4f55\u4ee3\u7801\u90fd\u5c06\u5728\u5355\u51fb\u6309\u94ae\u65f6\u6267\u884c\u3002\u5c31\u6211\u4eec\u800c\u8a00\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u6709\u5174\u8da3\u5728\u70b9\u51fb\u6309\u94ae\u65f6\u6253\u5370hello\uff0cworld\u6587\u672c\u3002\n\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u628a\u8fd9\u4e09\u53e5\u8bdd\u5199\u5728\u95ee\u5019\u4e2d\u3002vala\u7a0b\u5e8f\u65c1\u8fb9\u7684\u6309\u94ae\u76f8\u5173\u4ee3\u7801\u3002\n\u516c\u5171\u8bfe\u4f60\u597d\uff1aGtk\u3002\u5e94\u7528\u7a0b\u5e8f{public Hello\uff08\uff09{Object\uff08Application#u id:&#34\uff1bcom.github.chauhankiran.repo&#34\uff1b\uff0cflags:ApplicationFlags.flags_NONE\uff09\uff1b}protected override void activate\uff08\uff09{var window=new Gtk.ApplicationWindow\uff08this\uff09\uff1bwindow.title=&#34\uff1bhello\uff0cworld&#34\uff1bwindow.default#u height=300\uff1bwindow.default#u width=300\uff1bvar label=new Gtk.label\uff08&#34\uff1bhello\uff0cworld&#34\uff1b\uff09\uff1bvar\u6309\u94ae=\u65b0Gtk\u3002\u6309\u94ae\uff08\uff09\uff1b\u6309\u94ae\u8bbe\u7f6e\u6807\u7b7e\uff08&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\uff09\uff1b\u6309\u94ae\u70b9\u51fb\u3002\u8fde\u63a5\uff08\uff08\uff09=&gt\uff1b{stdout.printf\uff08&#34\uff1b\u4f60\u597d\uff0cworld\\n&#34\uff1b\uff09\uff1b}\uff09\uff1bvar grid=\u65b0\u7684Gtk\u3002\u7f51\u683c\uff08\uff09\uff1b\u7f51\u683c\u9644\u52a0\uff08\u6807\u7b7e\uff0c0\uff0c0\uff09\uff1b\u7f51\u683c\u8fde\u63a5\uff08\u6309\u94ae\uff0c0\uff0c1\uff09\uff1b\u7a97\u8bbe\u7f6e\u5b50\u5bf9\u8c61\uff08\u7f51\u683c\uff09\uff1b\u7a97show\uff08\uff09\uff1b}\n\u540c\u6837\uff0c\u8fd9\u662f\u4e00\u4e2a\u7406\u60f3\u7684\u95ee\u5019\uff0c\u5728GTK\u7684\u4e16\u754c\u8ba1\u5212\u3002\u5199\u8fd9\u4e2a\u66f4\u5927\u7684hello\uff0cworld\u9879\u76ee\u7684\u60f3\u6cd5\u662f\u8ba9\u6211\u4eec\u5bf9\u4e00\u4e9b\u6982\u5ff5\u4e00\u77a5&#39\uff1b\u6211\u4eec\u5c06\u5728\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4e2d\u4f7f\u7528\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u5728\u4e0b\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u901a\u8fc7\u7ee7\u7eed\u5b66\u4e60\u66f4\u591a\u7684\u6982\u5ff5\u548c\u6280\u672f\u6765\u7f16\u5199\u8fd9\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u73a9\u5177\u5e94\u7528\u7a0b\u5e8f\u3002", "note_en": "We&#39;ll continue our journey with writing the hello, world program in Vala but this time with GTK(4) library.\n      Let&#39;s create two new files with name  Hello.vala and  main.vala. Yes, the plan is to continue from where we end in the  previous article and then slowly build the working version of hello, world using GTK.\n    Open this newly created  main.vala and  copy write the same code we wrote previously in  hello/main.vala file. In other words,  main() method.\n  int main(string[] args) { string name = &#39;world&#39;; var hello = new Hello(name); hello.greet(); return 0;}\n  Next, open that newly created  Hello.vala and  copy write the same code we wrote previously in  hello/Hello.vala file. In other words,  Hello class.\n  public class Hello { public string name; public Hello(string name) { this.name = name; } public void greet() { stdout.printf(&#34;hello, %s\\n&#34;, this.name); }}\n  Let&#39;s extend this  Hello class by   Gtk.Application class as we&#39;re now creating the GTK application! This  extending is done via  : operator.\n  public class Hello : Gtk.Application { public string name; public Hello(string name) { this.name = name; } public void greet() { stdout.printf(&#34;hello, %s\\n&#34;, this.name); }}\n  We do not needed this  greet() method anymore as we&#39;re interested in displaying the hello, world in window (or in application) and not in terminal!\n  public class Hello : Gtk.Application { public string name; public Hello(string name) { this.name = name; }}\n  We created the  name variable specially to print the value of it in  greet() method. As we do not have  greet() method now, I don&#39;t think we now need any code that is associated with  name variable. But, yes, we surely need that public method. So, let&#39;s have the empty public method for further usage.\n    As per documentation, we need to call the  Object() method from this public method. This  Object() method accepts two arguments -  application_id, unique  application id in reverse domain name notation or RDNS and   flags with one of the predefined values and   ApplicationFlags.FLAGS_NONE value in our case. All in all, you need to type something like this. If you have GitHub/GitLab account, change the value of  application_id based on your preference.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); }}\n  We&#39;ll talk about this  application_id and  flags in future. For now, you need to type couple of things for GTK to properly initialize and run the application.  It&#39;s like  framework, write this and that for us to call properly!\n    public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } void activate() { }}\n  This  activate() method already existing in  Gtk.Application and what we actually need to do is, to  override using  override keyword.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } override void activate() { }}\n  I assume you don&#39;t forget the rule about access modifiers. In this  activate() method case, we&#39;ll go with  protected access modifier as that&#39;s what we ask for us!\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { }}\n  And this method  activates the application. Again, it might possible that you get confused with this code. But, this is something you need to type as its like framework (I know library, whatever)!\n  If the application is activated, we need to do something. How about displaying an application widow? That&#39;s what you&#39;re suppose to do with desktop application, right!\n  Within this  activate() method, let&#39;s create a window. In GTK,  window is  widget. I mean everything that is a graphical component is widget including menu, button, label, checkbox, list, and so on. These all are widgets in GTK and GTK has separate class(es) for each of these widgets!\n  Let&#39;s create a  window widget using   ApplicationWindow class. This  ApplicationWindow class accepts the  application as the argument which is  this or class itself as that is the application (remember, we extend the  Gtk.Application to make  Hello as application).\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); }}\n  We just created the window for the application. We now need to invoke the  .show() method on this  window object to actually display it when  activate() method executes.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.show(); }}\n  This is our simple window application! Before we go further and run the application, we need to do some minor modifications in  main.vala as the current code create an instance of  Hello class and run the  greet() method which is not valid anymore.\n    int main(string[] args) { string name = &#39;world&#39;; var hello = new Hello(name); return 0;}\n  We also not need  name variable and also remove it as argument being passed while creating an instance.\n    On this  hello object, we need to call  .run() method to actually run the application instance. This method accepts  args as argument.\n    This  .run() method returns an integer that we can directly return instead of returning the explicit  0.\n          I copied this command from  previous article and you know that this will print the  hello, world as output based on code we wrote in those files.\n  This is correct! But, we need to do one more modification to this command as we&#39;re now using GTK library. We need to inform Vala compiler to use GTK library while compiling the programs using  --pkg flag followed by the library name or  gtk4 (installed name of the GTK library) in our case. Putting all these together, following is the command we need to run.\n      After running this command, you should see the default 200x200 window with title as application name e.g.  Hello. But, this is not the hello, world program as we&#39;re not seeing hello, world at any place within the application.\n  Let&#39;s print  hello, world instead of  Hello as title. This can be done via updating the  attribute value of  window widget.  window has many attributes including  title (for title of the window),  default_width (for default width of window),  default_height (for default height of window), and so on.\n  We&#39;re now going to assign  hello, world to  window&#39;s  title and  300 to both  default_width and  default_height to create 300x300 window in dimension.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; window.show(); }}\n        This is the first version of the hello, world program using GTK library. We can go further and display the hello, world text within application&#39;s window.\n  To display the text in window, we need to create a  label widget using  Gtk.Label class just like we created  window using  Gtk.ApplicationWindow class. While creating a  label widget, we need to pass the text which is  hello, world in our case.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.show(); }}\n  The label is created. We now need to add this label in  window to display on the screen. We can do it using  set_child() method of  window and passing  label as argument to it.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); window.show(); }}\n  Running this program should display the hello, world text on both window&#39;s title and window&#39;s area.\n      Let&#39;s even go further and add button that will have the hello, world text on it. To add a  button widget, we need to use  Gtk.Button class. Then we need use  set_label() method on created  button to set the label or the text of the  button.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.show(); }}\n    public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); window.show(); }}\n  Let&#39;s run this program to confirm the output. We should now see the button below the hello, world text (hint: it&#39;ll not work).\n      It is not working as expected and the reason is,  window can only hold one child or widget whereas we&#39;re trying to add two widgets -  label and  button. Because of this,  window object holding first passed widget and ignoring others. To resolve this problem, we need to use  container widget that act as container and hold as many widgets as we want. Then we&#39;ll set this container widget as child of  window using  set_child() method. There are many container widgets in GTK such as box, table, grid, and so on.\n  For the purpose of the demonstration, we&#39;re going to use  Gtk.Grid to create a  grid container widget.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); window.show(); }}\n  We can now use  .attach() method of grid widget to add or  pack the other widgets inside the  grid container. This  .attach() method accepts five arguments and last two being optional -  widget that we&#39;re interested to add,  column as position from left, and  row as position from top. Last two optional arguments are  width and  height in form of space. 1 is the default values to  height and  width if not passed.\n  To pack the  label, we&#39;re going to write  .attach(label, 0, 0). In other words, we&#39;re going to pack the  label widget at the position of 0 from left and 0 from top. Yes, the position geometry for the grid starts from (0, 0).\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); window.show(); }}\n  For  button, we&#39;re going to write  .attach(button, 0, 1). In other words, we&#39;re going to pack the  button widget at the position of 0 from the left and 1 from top means in second line.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); window.set_child(label); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); window.set_child(button); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.show(); }}\n  Finally, let&#39;s remove the call to  .set_child() for both  label and  button as we&#39;re going to set the  grid as child to  window.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.set_child(grid); window.show(); }}\n  Now, running this program should display hello, world thrice - title, text and in button.\n      This is good! Let&#39;s even go further and print the hello, world text in terminal when button is clicked! For this we need to use the concept of  signal. We&#39;re going to catch the  clicked signal emitted by  button when button is actually clicked. Catching the signal is done via  .connect() method. Let&#39;s write this in steps.\n              You can read this as, when  button is clicked, run the code written inside the  connect() method. This  connect() method accepts the anonymous method.\n    Whatever code you write within this anonymous method is going to be executed when button is clicked. In our case, we&#39;re interested to print the hello, world text when the button is clicked.\n      Let&#39;s put these three lines in our  Hello.vala program next to the  button related code.\n  public class Hello : Gtk.Application { public Hello() { Object( application_id: &#34;com.github.chauhankiran.repo&#34;, flags: ApplicationFlags.FLAGS_NONE ); } protected override void activate() { var window = new Gtk.ApplicationWindow(this); window.title = &#34;hello, world&#34;; window.default_height = 300; window.default_width = 300; var label = new Gtk.Label(&#34;hello, world&#34;); var button = new Gtk.Button(); button.set_label(&#34;hello, world&#34;); button.clicked.connect(() =&gt; { stdout.printf(&#34;hello, world\\n&#34;); }); var grid = new Gtk.Grid(); grid.attach(label, 0, 0); grid.attach(button, 0, 1); window.set_child(grid); window.show(); }}\n        Again, this is ideally a hello, world program in GTK. The idea behind writing this bigger hello, world program is to give a glimpse of some concepts that we&#39;ll use in application development. That being said, in next article, we&#39;ll write the  trivial toy application by continue learning few more concepts and techniques.", "posttime": "2022-02-14 23:06:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "gtk,\u65b9\u6cd5", "title": "\u4f60\u597d\uff0c\u74e6\u62c9\u7684GTK\u4e16\u754c", "title_en": "Hello, World in GTK with Vala", "transed": 1, "url": "https://chauhankiran.github.io/vala2.html", "via": "", "real_tags": ["gtk", "\u65b9\u6cd5"]}]