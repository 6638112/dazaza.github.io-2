[{"category": "", "categoryclass": "", "imagename": "7a53792b19d63d2ee4aeb74637d0edae.jpg", "infoid": 1067151, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "DOM\u662fWeb\u5e73\u53f0\u7f16\u7a0b\u6a21\u578b\u7684\u57fa\u7840\uff0c\u5176\u8bbe\u8ba1\u548c\u6027\u80fd\u5f71\u54cd\u4e86\u6d4f\u89c8\u5668\u7ba1\u9053\u7684\u5176\u4f59\u90e8\u5206\u3002\u7136\u800c\uff0c\u5b83\u7684\u5386\u53f2\u548c\u8fdb\u5316\u8fdc\u79bb\u4e00\u4e2a\u7b80\u5355\u7684\u6545\u4e8b\u3002\n \u5728\u8fc7\u53bb\u7684\u4e09\u5e74\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u5f00\u59cb\u4e86\u5728\u5fae\u8f6f\u8fb9\u7f18\u7684\u4e2d\u578b\u4e2d\u7684\u98de\u884c\u4e2d\u91cd\u6784\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u4e86\u4e00\u4e2a\u73b0\u4ee3\u5316\u7684\u67b6\u6784\uff0c\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u73b0\u5b9e\u6027\u80fd\u548c\u51cf\u5c11\u590d\u6742\u6027\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u901a\u8fc7Internet Explorer\u548cMicrosoft Edge\u4e2d\u7684DOM\u7684\u5386\u53f2\uff0c\u4ee5\u53ca\u6211\u4eec\u6700\u8fd1\u7684\u5de5\u4f5c\u6765\u5b9e\u73b0DOM\u6811\u7684\u5f71\u54cd\uff0c\u8fd9\u5df2\u7ecf\u5bfc\u81f4Windows 10\u521b\u5efa\u8005\u66f4\u65b0\u7684\u6027\u80fd\u5927\u5927\u63d0\u9ad8\u3002\n  \u6211\u4eec\u8ba4\u4e3a\u201cDOM\u201d\u662f\u771f\u6b63\u7684\u51e0\u4e2a\u5b50\u7cfb\u7edf\u7684\u5408\u4f5c\u3002\u5728Microsoft Edge\u4e2d\uff0c\u8fd9\u5305\u62ecJS\u7ed1\u5b9a\uff0c\u4e8b\u4ef6\uff0c\u7f16\u8f91\uff0c\u62fc\u5199\u68c0\u67e5\uff0cHTML\u5c5e\u6027\uff0cCSSOM\uff0c\u6587\u672c\u548c\u5176\u4ed6\u6240\u6709\u5de5\u4f5c\u3002\u5728\u8fd9\u4e9b\u5b50\u7cfb\u7edf\u4e2d\uff0cDOM\u201c\u6811\u201d\u4f4d\u4e8e\u4e2d\u5fc3\u3002\n \u51e0\u5e74\u524d\uff0c\u6211\u4eec\u5f00\u59cb\u66f4\u65b0\u5230\u73b0\u4ee3DOM\u201c\u6811\u201d\uff08\u8282\u70b9\u8fde\u63a5\u7ed3\u6784\uff09\u3002\u901a\u8fc7\u73b0\u4ee3\u5316\u6211\u4eec\u5728Microsoft Edge 14\u5b8c\u6210\u7684\u6838\u5fc3\u6811\uff0c\u6211\u4eec\u964d\u843d\u4e86\u4e00\u4e2a\u65b0\u7684\u57fa\u7ebf\u548c\u811a\u624b\u67b6\uff0c\u4ee5\u63d0\u4f9b\u6211\u4eec\u5feb\u901f\u53ef\u9760\u7684DOM\u7684\u627f\u8bfa\u3002\u51ed\u501fWindows 10\u521b\u4f5c\u8005\u66f4\u65b0\u548cMicrosoft Edge 15\uff0c\u6211\u4eec\u5f00\u59cb\u7684\u65c5\u7a0b\u5f00\u59cb\u8131\u9896\u800c\u51fa\u3002\n  \u6211\u4eec\u53ea\u662f\u522e\u4f24\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u60f3\u501f\u6b64\u673a\u4f1a\u6765\u76ef\u7740\u4e00\u70b9\uff0c\u5e76\u5206\u4eab\u8fd9\u4e00\u65c5\u7a0b\u7684\u4e00\u4e9b\u5185\u90e8\u7ec6\u8282\uff0c\u4eceDOM\u7684\u5965\u672f\u5386\u53f2\u5f00\u59cb\uff0c\u5c55\u793a\u4e86\u6211\u4eec\u7684\u4e00\u4e9b\u6210\u5c31\u3002\n  \u5f53Web\u5f00\u53d1\u4eba\u5458\u4eca\u5929\u60f3\u5230DOM\u65f6\uff0c\u4ed6\u4eec\u901a\u5e38\u4f1a\u60f3\u5230\u4e00\u68f5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u7684\u6811\uff1a\n  \u7136\u800c\uff0c\u5f88\u597d\u800c\u7b80\u5355\uff08\u548c\u663e\u800c\u6613\u89c1\uff09\u8fd9\u4f3c\u4e4e\uff0cInternet Explorer\u7684DOM\u5b9e\u65bd\u7684\u73b0\u5b9e\u66f4\u590d\u6742\u3002 \n\u7b80\u5355\u5730\u8bf4\uff0cInternet Explorer\u7684DOM\u662f\u4e3a90\u5e74\u4ee3\u7684\u7f51\u7edc\u8bbe\u8ba1\u7684\u3002\u5f53\u8bbe\u8ba1\u539f\u59cb\u6570\u636e\u7ed3\u6784\u65f6\uff0cWeb\u4e3b\u8981\u662f\u6587\u6863\u67e5\u770b\u5668\uff08\u5177\u6709\u5c11\u6570\u52a8\u753bGIF\u548c\u629b\u51fa\u7684\u5176\u4ed6\u56fe\u50cf\uff09\u3002\u56e0\u6b64\uff0c\u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784\u66f4\u50cf\u662f\u60a8\u53ef\u80fd\u770b\u5230\u4e3a\u50cfMicrosoft Word\u8fd9\u6837\u7684\u6587\u6863\u67e5\u770b\u5668\u4f9b\u7535\u7684\u90a3\u4e9b\u3002\u5728Web\u7684\u65e9\u671f\u53ec\u56de\uff0c\u6ca1\u6709JavaScript\u5141\u8bb8\u811a\u672c\u811a\u672c\uff0c\u6240\u4ee5\u6211\u4eec\u6240\u77e5\u9053\u7684DOM\u6811\u4e0d\u5b58\u5728\u3002\u6587\u672c\u662f\u56fd\u738b\uff0cDOM\u7684\u5185\u90e8\u7ed3\u6784\u56f4\u7ed5\u5feb\u901f\uff0c\u9ad8\u6548\u7684\u6587\u672c\u50a8\u5b58\u548c\u64cd\u7eb5\u8bbe\u8ba1\u3002\u5185\u5bb9\u7f16\u8f91\uff08WYSIWYG\uff09\u5df2\u7ecf\u662f\u5f53\u65f6\u7684\u7279\u5f81\uff0c\u64cd\u4f5c\u8303\u4f8b\u56f4\u7ed5\u7f16\u8f91\u5149\u6807\uff0c\u7528\u4e8e\u5b57\u7b26\u63d2\u5165\u548c\u6709\u9650\u7684\u683c\u5f0f\u3002\n  \u7531\u4e8e\u5176\u4ee5\u6587\u672c\u4e3a\u4e2d\u5fc3\u7684\u8bbe\u8ba1\uff0cDOM\u7684\u539f\u7406\u7ed3\u6784\u662f\u6587\u672c\u5907\u4efd\u5546\u5e97\uff0c\u4e00\u4e2a\u590d\u6742\u7684\u6587\u672c\u9635\u5217\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u5206\u5272\u5e76\u52a0\u5165\u6700\u5c0f\u6216\u6ca1\u6709\u5185\u5b58\u5206\u914d\u3002\u80cc\u886c\u5546\u5e97\u5c06\u6587\u672c\u548c\u6807\u7b7e\u8868\u793a\u4e3a\u7ebf\u6027\u8fdb\u5c55\uff0c\u53ef\u901a\u8fc7\u5168\u5c40\u7d22\u5f15\u6216\u5b57\u7b26\u4f4d\u7f6e\uff08CP\uff09\u5bfb\u5740\u3002\u5728\u7ed9\u5b9aCP\u5904\u63d2\u5165\u6587\u672c\u662f\u9ad8\u6548\u7684\uff0c\u5e76\u590d\u5236/\u7c98\u8d34\u4e86\u4e00\u7cfb\u5217\u6587\u672c\uff0c\u901a\u8fc7\u6709\u6548\u7684\u201c\u62fc\u63a5\u201d\u64cd\u4f5c\u96c6\u4e2d\u5904\u7406\u3002\u4e0b\u56fe\u5728\u76ee\u89c6\u793a\u51fa\u4e86\u5c06\u5305\u542b\u201cHello World\u201d\u7684\u7b80\u5355\u6807\u8bb0\u88c5\u5165\u6587\u672c\u5907\u4efd\u5546\u5e97\uff0c\u4ee5\u53ca\u5982\u4f55\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u548c\u6807\u8bb0\u5206\u914dCPS\u3002\n  \u4e3a\u4e86\u5b58\u50a8\u975e\u6587\u672c\u6570\u636e\uff08\u4f8b\u5982\u683c\u5f0f\u5316\u548c\u5206\u7ec4\u4fe1\u606f\uff09\uff0c\u4ece\u5907\u7528\u5546\u5e97\u5355\u72ec\u7ef4\u62a4\u53e6\u4e00\u7ec4\u5bf9\u8c61\uff1a\u53cc\u94fe\u63a5\u7684\u6811\u4f4d\u7f6e\u5217\u8868\uff08Treepos\u5bf9\u8c61\uff09\u3002 TreePOS\u5bf9\u8c61\u662fHTML\u6e90\u6807\u8bb0\u4e2d\u6807\u8bb0\u7684\u8bed\u4e49\u7b49\u6548 - \u6bcf\u4e2a\u903b\u8f91\u5143\u7d20\u7531Begin\u548cEnd TreePOS\u8868\u793a\u3002\u8fd9\u79cd\u7ebf\u6027\u7ed3\u6784\u4f7f\u5176\u5728\u6df1\u5ea6\u7b2c\u4e00\u9884\u8ba2\u904d\u5386\u4e2d\u904d\u5386\u6574\u4e2aDOM\u201c\u6811\u201d\uff08\u6839\u636e\u6bcf\u4e2aDOM\u641c\u7d22API\u548cCSS /\u5e03\u5c40\u7b97\u6cd5\u6240\u9700\uff09\u3002\u7a0d\u540e\uff0c\u6211\u4eec\u5c06TreePOS\u5bf9\u8c61\u6269\u5c55\u5230\u5305\u62ec\u53e6\u5916\u4e24\u79cd\u201c\u4f4d\u7f6e\u201d\uff1aTREDATAPOS\uff08\u7528\u4e8e\u6307\u793a\u6587\u672c\u7684\u5360\u4f4d\u7b26\uff09\u548c\u6307\u793a\u5668\uff08\u7528\u4e8e\u6307\u793a\u5361\u7279\uff0c\u8303\u56f4\u8fb9\u754c\u70b9\uff0c\u6700\u7ec8\u4e3a\u201c\u65b0\u201d\u7684\u529f\u80fd\uff0c\u5982\u751f\u6210\u7684\u5185\u5bb9\u8282\u70b9\uff09\u3002\n \u6bcf\u4e2aTreePOS\u5bf9\u8c61\u8fd8\u5305\u62ecCP\u5bf9\u8c61\uff0c\u5b83\u5145\u5f53\u6807\u8bb0\u7684\u5168\u5c40\u5e8f\u7d22\u7d22\u5f15\uff08\u5bf9\u9057\u7559\u6587\u6863\u7b49\u5185\u5bb9\u6709\u7528\uff09\u3002 CPS\u7528\u4e8e\u4eceTreePOS\u5230\u6587\u672c\u5907\u4efd\u5546\u5e97\uff0c\u8f7b\u677e\u6bd4\u8f83\u8282\u70b9\u987a\u5e8f\uff0c\u751a\u81f3\u901a\u8fc7\u51cf\u53bbCP\u7d22\u5f15\u627e\u5230\u6587\u672c\u7684\u957f\u5ea6\u3002\n \u8981\u5c06\u5176\u5168\u90e8\u7ed1\u5728\u4e00\u8d77\uff0c\u4e00\u4e2aTreeNode\u7ed1\u5b9a\u7684\u6811\u4f4d\u7f6e\u5bf9\u5e76\u5efa\u7acb\u4e86JavaScript Dom\u9884\u671f\u7684\u201c\u6811\u201d\u5c42\u6b21\u7ed3\u6784\uff0c\u5982\u4e0b\u6240\u793a\u3002\n   CPS\u7684\u57fa\u7840\u9020\u6210\u4e86\u65e7DOM\u7684\u5927\u90e8\u5206\u590d\u6742\u6027\u3002\u5bf9\u4e8e\u6574\u4e2a\u7cfb\u7edf\u6b63\u5e38\u5de5\u4f5c\uff0cCPS\u5fc5\u987b\u662f\u6700\u65b0\u7684\u3002\u56e0\u6b64\uff0c\u5728\u6bcf\u4e2aDOM\u64cd\u4f5c\u4e4b\u540e\u66f4\u65b0CPS\uff08\u4f8b\u5982\uff0c\u8f93\u5165\u6587\u672c\uff0c\u590d\u5236/\u7c98\u8d34\uff0cDOM API\u64cd\u4f5c\uff0c\u5373\u4f7f\u5355\u51fb\u9875\u9762 - \u5728DOM\u4e2d\u8bbe\u7f6e\u63d2\u5165\u70b9\uff09\u3002\u6700\u521d\uff0cDOM\u64cd\u7eb5\u4e3b\u8981\u7531HTML\u89e3\u6790\u5668\u6216\u7528\u6237\u64cd\u4f5c\u9a71\u52a8\uff0c\u5e76\u4e14CPS\u603b\u662f\u6700\u65b0\u7684\u6a21\u578b\u975e\u5e38\u5408\u7406\u3002\u4f46\u968f\u7740JavaScript\u548cDHTML\u7684\u5174\u8d77\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u53d8\u5f97\u66f4\u52a0\u5e38\u89c1\u548c\u9891\u7e41\u3002\n \u4e3a\u4e86\u8865\u507f\uff0c\u6dfb\u52a0\u4e86\u65b0\u7684\u7ed3\u6784\u4ee5\u4f7f\u8fd9\u4e9b\u66f4\u65b0\u6709\u6548\uff0c\u5e76\u4e14SPLAY TREEN\u51fa\u751f\uff0c\u5c06\u91cd\u53e0\u7cfb\u5217\u7684\u6811\u8fde\u63a5\u6dfb\u52a0\u5230Treepos\u5bf9\u8c61\u4e0a\u3002\u589e\u52a0\u7684\u590d\u6742\u6027\u6709\u52a9\u4e8e\u6027\u80fd - \u9996\u5148;\u53ef\u4ee5\u4f7f\u7528O\uff08log n\uff09\u901f\u5ea6\u6765\u5b9e\u73b0\u5168\u5c40CP\u66f4\u65b0\u3002\u7136\u800c\uff0cSPLAY\u6811\u5b9e\u9645\u4e0a\u4ec5\u9488\u5bf9\u91cd\u590d\u7684\u672c\u5730\u641c\u7d22\u4f18\u5316\uff08\u4f8b\u5982\uff0c\u5bf9\u4e8eDOM\u6811\u4e2d\u7684\u4e00\u4e2a\u5730\u65b9\u56f4\u7ed5\u4e00\u4e2a\u5730\u65b9\u7684\u66f4\u6539\uff09\uff0c\u5e76\u4e14\u6ca1\u6709\u8bc1\u660e\u662fJavaScript\u7684\u4e00\u81f4\u597d\u5904\u53ca\u5176\u66f4\u968f\u673a\u8bbf\u95ee\u6a21\u5f0f\u3002 \n\u53e6\u4e00\u4e2a\u8bbe\u8ba1\u73b0\u8c61\u662f\uff0c\u5148\u524d\u63d0\u5230\u7684\u201c\u526a\u63a5\u201d\u64cd\u4f5c\u5904\u7406\u590d\u5236/\u7cca\u5242\uff0c\u5ef6\u957f\u4e86\u5904\u7406\u6240\u6709\u6811\u7a81\u53d8\u3002\u6838\u5fc3\u201c\u62fc\u63a5\u53d1\u52a8\u673a\u201d\u7684\u5de5\u4f5c\u4e09\u4e2a\u6b65\u9aa4\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\n  \u5728\u6b65\u9aa41\u4e2d\uff0c\u901a\u8fc7\u4ece\u64cd\u4f5c\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u5f00\u59cb\uff0c\u53d1\u52a8\u673a\u5c06\u201c\u8bb0\u5f55\u201d\u62fc\u63a5\u3002\u7136\u540e\u5c06\u62fc\u63a5\u8bb0\u5f55\u5305\u542b\u6b64\u64cd\u4f5c\u7684\u547d\u4ee4\u6307\u4ee4\uff08\u5728\u6d4f\u89c8\u5668\u7684\u64a4\u6d88\u5806\u6808\u4e2d\u91cd\u590d\u4f7f\u7528\u7684\u7ed3\u6784\uff09\u3002\u5728\u6b65\u9aa42\u4e2d\uff0c\u4ece\u6811\u4e2d\u5220\u9664\u4e0e\u64cd\u4f5c\u76f8\u5173\u8054\u7684\u6240\u6709\u8282\u70b9\uff08\u5373\uff0ctrapode\u548ctreepos\u5bf9\u8c61\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u5728IE DOM\u6811\u4e2d\uff0cTREENODE / TEADPOS\u5bf9\u8c61\u4e0e\u811a\u672c\u5f15\u7528\u7684\u5143\u7d20\u5bf9\u8c61\u4e0d\u540c\uff0c\u4ee5\u4fbf\u4e8e\u91cd\u53e0\u6807\u8bb0\uff0c\u56e0\u6b64\u5220\u9664\u5b83\u4eec\u4e0d\u662f\u529f\u80fd\u95ee\u9898\u3002\u6700\u540e\uff0c\u5728\u6b65\u9aa43\u4e2d\uff0c\u62fc\u63a5\u8bb0\u5f55\u7528\u4e8e\u201c\u91cd\u653e\u201d\uff08\u91cd\u65b0\u521b\u5efa\uff09\u76ee\u6807\u4f4d\u7f6e\u4e2d\u7684\u65b0\u5bf9\u8c61\u3002\u4f8b\u5982\uff0c\u4e3a\u4e86\u5b8c\u6210AppendChild DOM\u64cd\u4f5c\uff0c\u62fc\u63a5\u5f15\u64ce\u5728\u8282\u70b9\u5468\u56f4\u521b\u5efa\u4e86\u4e00\u4e2a\u8303\u56f4\uff08\u4eceTREENODE\u7684\u5f00\u59cbTreepos\u5230\u5176\u7ed3\u5c3e\uff09\uff0c\u201c\u62fc\u63a5\u201d\u65e7\u4f4d\u7f6e\u7684\u8303\u56f4\uff0c\u5e76\u521b\u5efa\u4e86\u65b0\u8282\u70b9\u4ee5\u8868\u793a\u8282\u70b9\u53ca\u5176\u513f\u7ae5\u5728\u65b0\u4f4d\u7f6e\u3002\u60a8\u53ef\u4ee5\u60f3\u8c61\uff0c\u9664\u4e86\u7b97\u6cd5\u7684\u4f4e\u6548\u7387\u4e4b\u5916\uff0c\u8fd9\u4f1a\u4ea7\u751f\u5927\u91cf\u5185\u5b58\u5206\u914d\u6d41\u5931\u3002\n  \u8fd9\u4e9b\u53ea\u662fInternet Explorer DOM\u7684\u590d\u6742\u6027\u7684\u4e00\u4e9b\u4f8b\u5b50\u3002\u8981\u589e\u52a0\u4f24\u5bb3\u4f24\u5bb3\uff0c\u65e7DOM\u6ca1\u6709\u5c01\u88c5\uff0c\u56e0\u6b64\u6765\u81ea\u89e3\u6790\u5668\u7684\u4ee3\u7801\u4e00\u76f4\u5230\u663e\u793a\u7cfb\u7edf\u7684\u4f9d\u8d56\u4e8eCP / TreePOS\u4f9d\u8d56\u9879\uff0c\u8fd9\u9700\u8981\u8bb8\u591aDev-octor\u6765\u89e3\u8131\u3002\n \u590d\u6742\u6027\u5177\u6709\u9519\u8bef\uff0cDOM\u4ee3\u7801\u5e93\u662f\u53ef\u9760\u6027\u8d23\u4efb\u3002\u6839\u636e\u5185\u90e8\u8c03\u67e5\uff0c\u4eceIE7\u5230IE11\uff0c\u5927\u7ea628\uff05\u7684\u6240\u6709IE\u53ef\u9760\u6027\u9519\u8bef\u6e90\u81ea\u6838\u5fc3DOM\u7ec4\u4ef6\u4e2d\u7684\u4ee3\u7801\u3002\u8fd9\u79cd\u590d\u6742\u6027\u4e5f\u8868\u73b0\u4e3a\u654f\u6377\u7a0e\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u65b0\u7684HTML5\u529f\u80fd\u90fd\u53d8\u5f97\u66f4\u52a0\u6602\u8d35\uff0c\u56e0\u4e3a\u5b83\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u5730\u6539\u88c5\u5230\u73b0\u6709\u67b6\u6784\u4e2d\u7684\u6982\u5ff5\u3002\n  Project Spartan\u7684\u63a8\u51fa\u521b\u9020\u4e86\u5b8c\u7f8e\u7684\u673a\u4f1a\uff0c\u4f7f\u6211\u4eec\u7684DOM\u73b0\u4ee3\u5316\u3002\u6211\u4eec\u4eceDocModes\u548c\u6761\u4ef6\u8bc4\u8bba\u7b49\u5e73\u53f0\u9057\u8ff9\uff0c\u6211\u4eec\u5f00\u59cb\u4e86\u5927\u89c4\u6a21\u7684\u91cd\u6784\u52aa\u529b\u3002\u6211\u4eec\u7684\u7b2c\u4e00\uff0c\u6700\u5173\u952e\u7684\u76ee\u6807\uff1aDOM\u7684\u6838\u5fc3\u6811\u3002\n \u6211\u4eec\u77e5\u9053\u65e7\u7684\u6587\u672c\u4e2d\u5fc3\u6a21\u578b\u4e0d\u518d\u76f8\u5173;\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5185\u90e8\u6811\u7684DOM\u6811\uff0c\u4ee5\u5339\u914d\u73b0\u4ee3DOM API\u7684\u671f\u671b\u3002\u6211\u4eec\u9700\u8981\u62c6\u9664\u590d\u6742\u6027\u7684\u5c42\u6570\uff0c\u4f7f\u5176\u51e0\u4e4e\u65e0\u6cd5\u8fdb\u884c\u6027\u80fd - \u8c03\u6574\u6811\u548c\u5176\u4ed6\u5468\u56f4\u7cfb\u7edf\u3002\u6700\u540e\uff0c\u6211\u4eec\u6709\u5f3a\u70c8\u5e0c\u671b\u5c01\u88c5\u65b0\u6811\u4ee5\u907f\u514d\u5728\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u4e0a\u521b\u5efa\u4ea4\u53c9\u7ec4\u4ef6\u4f9d\u8d56\u5173\u7cfb\u3002\u6240\u6709\u8fd9\u4e00\u52aa\u529b\u5c06\u5bfc\u81f4\u5177\u6709\u6b63\u786e\u6a21\u578b\u7684DOM\u6811\uff0c\u539f\u7a3f\u5e76\u51c6\u5907\u597d\u8fdb\u5165\u989d\u5916\u6539\u8fdb\u3002\n \u4e3a\u4e86\u4f7f\u73b0\u4ee3DOM\u7684\u8fc7\u6e21\u5c3d\u53ef\u80fd\u5e73\u7a33\u5730\uff08\u5e76\u4e14\u907f\u514d\u5728\u5b64\u7acb\u4e2d\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684DOM\u6811\u5e76\u8bd5\u56fe\u5728\u9879\u76ee\u7ed3\u675f\u65f6\u4e0b\u964d\u5e76\u7a33\u5b9a\u672a\u7ecf\u6d4b\u8bd5\u7684\u4ee3\u7801-AKA\u201c\u5927\u7206\u70b8\u96c6\u6210\u201d\u7684\u5b9a\u4e49\uff0c\u6211\u4eec\u5728\u4e09\u4e2a\u9636\u6bb5\u5c06\u73b0\u6709\u7684\u4ee3\u7801\u5e93\u8f6c\u6362\u4e3a\u3002\u8be5\u9879\u76ee\u7684\u7b2c\u4e00\u9636\u6bb5\u5b9a\u4e49\u4e86\u4e0e\u76f8\u5e94\u7684API\u548c\u5408\u540c\u7684\u6811\u7ec4\u4ef6\u8fb9\u754c\u3002\u6211\u4eec\u9009\u62e9\u5c06API\u8bbe\u8ba1\u4e3a\u5728\u8282\u70b9\u4e0a\u8fd0\u884c\u7684\u201c\u8bfb\u8005\u201d\u548c\u201c\u5199\u5165\u5668\u201d\u529f\u80fd\u3002\u800c\u4e0d\u662f\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u7684API\uff1a \n\u6b64API\u8bbe\u8ba1\u529d\u963b\u547c\u53eb\u8005\u4ee5\u81ea\u5df1\u7684\u72b6\u6001\u601d\u8003\u6811\u5bf9\u8c61\u4f5c\u4e3a\u6f14\u5458\u3002\u7ed3\u679c\uff0c\u6811\u5bf9\u8c61\u4ec5\u662fAPI\u4e2d\u7684\u6807\u8bc6\uff0c\u5141\u8bb8\u66f4\u5f3a\u5927\u7684\u5408\u540c\u548c\u9690\u85cf\u4ee3\u8868\u7ec6\u8282\uff0c\u5176\u8bc1\u660e\u5728\u9636\u6bb53\u4e2d\u6709\u7528\u3002\n \u7b2c\u4e8c\u9636\u6bb5\u8fc1\u79fb\u4e86\u4f9d\u8d56\u4e8e\u4f20\u7edf\u6811\u5185\u90e8\u7684\u6240\u6709\u4ee3\u7801\uff0c\u4ee5\u4f7f\u7528\u65b0\u5efa\u7acb\u7684\u7ec4\u4ef6\u8fb9\u754cAPI\u3002\u5728\u6b64\u8fc1\u79fb\u671f\u95f4\uff0c\u6811API\u7684\u5b9e\u73b0\u5c06\u7ee7\u7eed\u7531\u9057\u7559\u7ed3\u6784\u63d0\u4f9b\u652f\u6301\u3002\u8fd9\u9879\u5de5\u4f5c\u82b1\u4e86\u6700\u591a\u7684\u65f6\u95f4\uff0c\u5e76\u4e14\u662f\u6700\u5c11\u7684\u8ff7\u4eba;\u82b1\u4e86\u51e0\u5e74\u7684\u65f6\u95f4\u6765\u89e3\u5f00\u65e7\u6811\u7ed3\u6784\u7684\u6d88\u8d39\u8005\u5e76\u9002\u5f53\u5730\u5c01\u88c5\u6811\u3002\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u6682\u5b58\uff0c\u8ba9\u6211\u4eec\u901a\u8fc7\u6211\u4eec\u7ecf\u8fc7\u7ecf\u8fc7\u5168\u9762\u7684\u589e\u91cf\u53d8\u5316\uff0c\u6211\u4eec\u53d1\u5e03EdgeHTML 12\u548c13\uff0c\u800c\u4e0d\u4f1a\u6270\u4e71\u8fd0\u8f93\u8ba1\u5212\u3002\n \u5728\u7b2c\u4e09\u4e2a\u548c\u6700\u7ec8\u9636\u6bb5\uff0c\u4f7f\u7528\u65b0\u7684\u6811\u7ec4\u4ef6\u8fb9\u754cAPI\u7684\u6240\u6709\u5916\u90e8\u4ee3\u7801\uff0c\u6211\u4eec\u5f00\u59cb\u91cd\u65b0\u63a8\u8350\u5e76\u66ff\u6362\u6838\u5fc3\u6570\u636e\u7ed3\u6784\u3002\u6211\u4eec\u7edf\u4e00\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u5355\u72ec\u7684Treepos\uff0ctreeNode\u548c\u5143\u7d20\u5bf9\u8c61\uff09\uff0c\u5220\u9664\u4e86splay\u6811\u548c\u526a\u63a5\u5f15\u64ce\uff0c\u5220\u9664\u4e86Pointerpos\u5bf9\u8c61\u7684\u6982\u5ff5\uff0c\u5e76\u5220\u9664\u4e86\u6587\u672c\u5907\u4efd\u5b58\u50a8\uff08\u540d\u79f0\u51e0\u4e2a\uff09\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u6446\u8131CP\u7684\u4ee3\u7801\u3002\n \u65b0\u7684\u6811\u7ed3\u6784\u7b80\u5355\u76f4\u622a\u4e86\u5f53;\u5b83\u4f7f\u7528\u56db\u4e2a\u6307\u9488\u800c\u4e0d\u662f\u901a\u5e38\u7684\u4e94\u4e2a\u6765\u7ef4\u62a4\u8fde\u63a5\uff1a\u7236\uff0c\u7b2c\u4e00\u5b69\u5b50\uff0c\u4e0b\u4e00\u6b65\u548c\u4ee5\u524d\u7684\u5144\u5f1f\uff08\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u88ab\u8ba1\u7b97\u4e3a\u7236\u6bcd\u7684\u7b2c\u4e00\u5b69\u5b50\u7684\u5148\u524d\u5144\u5f1f\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u9690\u85cf\u6211\u4eec\u80cc\u540e\u7684\u6700\u540e\u4e00\u4e2a\u5b69\u5b50\u4f18\u5316TREREADER API\u800c\u4e0d\u66f4\u6539\u5355\u4e2a\u6765\u7535\u8005\u3002\u91cd\u65b0\u5b89\u6392\u6811\u662f\u5feb\u901f\u6548\u7387\u7684\uff0c\u6211\u4eec\u751a\u81f3\u5728\u516c\u5171DOM API\u4e0a\u770b\u5230\u4e86CPU\u6027\u80fd\u7684\u4e00\u4e9b\u6539\u8fdb\uff0c\u8fd9\u5bf9\u91cd\u6784\u5de5\u4f5c\u7684\u526f\u4f5c\u7528\u5f88\u597d\u3002\n  \u901a\u8fc7\u65b0\u7684DOM\u6811\uff0c\u53ef\u9760\u6027\u4e5f\u663e\u7740\u63d0\u9ad8\uff0c\u4ece\u6240\u6709\u53ef\u9760\u6027\u95ee\u9898\u768428\uff05\u4e0b\u964d\u5230\u5927\u7ea6\u572810\uff05\u5de6\u53f3\uff0c\u540c\u65f6\u63d0\u4f9b\u51cf\u5c11\u65f6\u95f4\u82b1\u8d39\u548c\u6539\u5584\u56e2\u961f\u654f\u6377\u6027\u7684\u4e8c\u6b21\u6548\u76ca\u3002\n  \u867d\u7136\u8fd9\u611f\u89c9\u5c31\u50cf\u6211\u4eec\u7684\u65c5\u7a0b\u7ed3\u675f\uff0c\u5176\u5b9e\u8fd9\u53ea\u662f\u4e00\u4e2a\u5f00\u59cb\u3002\u4f7f\u7528\u6211\u4eec\u7684DOM\u6811API\u5230\u4f4d\u5e76\u7531\u4e00\u68f5\u7b80\u5355\u7684\u6811\u63d0\u4f9b\u52a8\u529b\uff0c\u6211\u4eec\u5c06\u6ce8\u610f\u529b\u8f6c\u5411\u5305\u62ecDOM\u7684\u5176\u4ed6\u5b50\u7cfb\u7edf\uff0c\u773c\u775b\u6709\u4e24\u79cd\u6548\u7387\u4f4e\u4e0b\uff1a\u5b50\u7cfb\u7edf\u5185\u7684\u6548\u7387\u4f4e\u4e0b\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u4f4e\u6548\u901a\u4fe1\u3002\n  \u4f8b\u5982\uff0c\u6211\u4eec\u9876\u7ea7\u6162\u7684DOM API\u4e4b\u4e00\uff08\u5373\u4f7f\u5728DOM\u6811\u5de5\u4f5c\u4e4b\u540e\uff09\u5386\u6765\u662fQuerySelectorall\u3002\u8fd9\u662f\u4e00\u4e2a\u901a\u7528\u641c\u7d22API\uff0c\u5e76\u4f7f\u7528\u9009\u9879\u5f15\u64ce\u641c\u7d22DOM\u4ee5\u83b7\u53d6\u7279\u5b9a\u5143\u7d20\u3002\u6beb\u4e0d\u5947\u602a\u5730\uff0c\u8bb8\u591a\u641c\u7d22\u6d89\u53ca\u7279\u5b9a\u7684\u5143\u7d20\u5c5e\u6027\u4f5c\u4e3a\u641c\u7d22\u6761\u4ef6\uff08\u4f8b\u5982\uff0c\u5143\u7d20\u7684ID\u6216\u5176\u7c7b\u6807\u8bc6\u7b26\u4e4b\u4e00\uff09\u3002\u4e00\u65e6\u641c\u7d22\u4ee3\u7801\u8f93\u5165\u4e86\u5c5e\u6027\u5b50\u7cfb\u7edf\uff0c\u5b83\u5c31\u9047\u5230\u4e86\u4e00\u4e2a\u5168\u65b0\u7684\u6548\u7387\u4f4e\u4e0b\uff0c\u4e0e\u65b0DOM\u6811\u5bfb\u5740\u7684\u5168\u90e8\u65e0\u5173\u3002 \n\u5bf9\u4e8e\u5c5e\u6027\u5b50\u7cfb\u7edf\uff0c\u6211\u4eec\u6b63\u5728\u7b80\u5316\u5143\u7d20\u5185\u5bb9\u5c5e\u6027\u7684\u5b58\u50a8\u673a\u5236\u3002\u5728Web\u7684\u65e9\u671f\uff0cDOM\u5c5e\u6027\u4e3b\u8981\u6307\u5411\u6d4f\u89c8\u5668\u5173\u4e8e\u5982\u4f55\u663e\u793a\u4e00\u5757\u6807\u8bb0\u7684\u6d4f\u89c8\u5668\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u662fcolspan\u5c5e\u6027\uff1a\n  Colspan\u5bf9\u6d4f\u89c8\u5668\u5177\u6709\u8bed\u4e49\u542b\u4e49\uff0c\u56e0\u6b64\u5fc5\u987b\u88ab\u89e3\u6790\u3002\u9274\u4e8e\u9875\u9762\u5e76\u975e\u975e\u5e38\u52a8\u6001\u8fd4\u56de\uff0c\u90a3\u4e48\u5c5e\u6027\u901a\u5e38\u4f1a\u50cf\u679a\u4e3e\u5904\u7406\uff0c\u5373\u521b\u5efa\u4e86\u4e00\u4e2a\u5c5e\u6027\u7cfb\u7edf\uff0c\u8fd9\u4e9b\u7cfb\u7edf\u56f4\u7ed5\u6025\u5207\u89e3\u6790\u4f18\u5316\u4ee5\u7528\u4e8e\u683c\u5f0f\u5316\u548c\u5e03\u5c40\u3002\n \u4f46\u662f\uff0c\u5f53\u4eca\u7684\u5e94\u7528\u6a21\u5f0f\uff0c\u975e\u5e38\u4f7f\u7528\u50cfID\uff0c\u7c7b\u548c\u6570\u636e -  *\u8fd9\u6837\u7684\u5c5e\u6027\uff0c\u8fd9\u4e9b\u5c5e\u6027\u662f\u8f83\u5c11\u7684\u6d4f\u89c8\u5668\u6307\u4ee4\u548c\u66f4\u50cf\u901a\u7528\u5b58\u50a8\uff1a\n  \u56e0\u6b64\uff0c\u6211\u4eec\u63a8\u8fdf\u8d85\u51fa\u5b58\u50a8\u5b57\u7b26\u4e32\u6240\u9700\u7684\u6700\u5c0f\u7684\u6700\u5c0f\u5de5\u4f5c\u3002\u6b64\u5916\uff0c\u7531\u4e8eUI\u6846\u67b6\u7ecf\u5e38\u9f13\u52b1\u8de8\u5143\u7d20\u7684\u91cd\u590d\u7684CSS\u7c7b\uff0c\u56e0\u6b64\u6211\u4eec\u8ba1\u5212\u96fe\u5316\u5b57\u7b26\u4e32\u4ee5\u51cf\u5c11\u5185\u5b58\u4f7f\u7528\u7387\u5e76\u63d0\u9ad8API\u7b49QuerySelector\u4e2d\u7684\u6027\u80fd\u3002\n \u867d\u7136\u6211\u4eec\u4ecd\u7136\u6709\u8db3\u591f\u7684\u5de5\u4f5c\u8ba1\u5212\uff0c\u4f46\u662fWindows 10\u521b\u4f5c\u8005\u66f4\u65b0\uff0c\u6211\u4eec\u5f88\u4e50\u610f\u5206\u4eab\u6211\u4eec\u53d6\u5f97\u4e86\u91cd\u5927\u8fdb\u5c55\uff01\n  \u53ef\u9760\u5730\u6d4b\u91cf\u548c\u63d0\u9ad8\u6027\u80fd\u8270\u96be\uff0c\u57fa\u51c6\u7684\u9677\u9631\u826f\u597d\u8bb0\u5f55\u3002\u4e3a\u4e86\u83b7\u5f97\u53ef\u80fd\u7684\u6d4f\u89c8\u5668\u6027\u80fd\u7684\u6700\u6574\u4f53\u89c6\u56fe\uff0cMicrosoft Edge\u56e2\u961f\u4f7f\u7528\u7528\u6237\u9065\u6d4b\uff0c\u63a7\u5236\u6d4b\u91cf\u771f\u5b9e\u4e16\u754c\u573a\u666f\u4ee5\u53ca\u5408\u6210\u57fa\u51c6\u7684\u7ec4\u5408\u6765\u6307\u5bfc\u6211\u4eec\u7684\u4f18\u5316\u3002\n  \u7528\u6237\u9065\u6d4b\u201c\u7528\u5bbd\u5237\u6d82\u6599\u201d\uff0c\u4f46\u6839\u636e\u5b9a\u4e49\u6d4b\u91cf\u6700\u6709\u5f71\u54cd\u529b\u7684\u5de5\u4f5c\u3002\u4ee5\u4e0b\u662f\u6211\u4eec\u7528\u6237\u7fa4\u4e2d\u7684FirstChild API\u7684\u6784\u5efa\u8ddf\u8e2a\u7684\u793a\u4f8b\u3002\u6b64\u6570\u636e\u4e0d\u53ef\u76f4\u63a5\u53ef\u64cd\u4f5c\uff0c\u56e0\u4e3a\u5b83\u6ca1\u6709\u63d0\u4f9b\u6027\u80fd\u8c03\u6574\u6240\u9700\u7684API\u8c03\u7528\u7684\u6240\u6709\u8be6\u7ec6\u4fe1\u606f\uff08\u5373\uff0cDOM\u6811\uff09\u6240\u9700\u7684\u6240\u6709\u7ec6\u8282\uff0c\u4f46\u8fd9\u662f\u7528\u6237\u4f53\u9a8c\u7684\u552f\u4e00\u76f4\u63a5\u6d4b\u91cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u4f9b\u89c4\u5212\u548c\u56de\u987e\u7684\u53cd\u9988\u3002 \n\u6211\u4eec\u7a81\u51fa\u4e86\u6211\u4eec\u7684\u8868\u73b0\u5b9e\u9a8c\u5ba4\u548c\u77ac\u95f4\u6d4b\u91cf\u6d4f\u89c8\u5668\u6027\u80fd\u7684\u7ec6\u8282\uff0c\u800c\u5b9e\u9a8c\u5ba4\u7684\u6d4b\u8bd5\u672c\u8eab\u548c\u5b9e\u9a8c\u5ba4\u7684\u786c\u4ef6\u5df2\u7ecf\u6539\u53d8\uff0c\u65b9\u6cd5\u4ecd\u7136\u662f\u76f8\u5173\u7684\u3002\u901a\u8fc7\u5728\u590d\u6742\u7684\u7f51\u7ad9\u548c\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6355\u83b7\u548c\u91cd\u64ad\u73b0\u5b9e\u4e16\u754c\u7684\u7528\u6237\u65b9\u6848\uff0c\u5982Bing\u5730\u56fe\u548cOffice 365\uff0c\u6211\u4eec\u4e0d\u592a\u53ef\u80fd\u5728\u4e0d\u53d7\u7528\u6237\u53d7\u76ca\u7684\u72ed\u9698\u4f18\u5316\u4e2d\u6ea2\u51fa\u3002\u6b64\u56fe\u8868\u662f\u6211\u4eec\u5bf9Bing\u6620\u5c04\u4e0a\u7684\u6a21\u62df\u7528\u6237\u7684\u62a5\u544a\u7684\u793a\u4f8b\u3002\u6bcf\u4e2a\u6570\u636e\u70b9\u90fd\u662f\u6d4f\u89c8\u5668\u7684\u6784\u5efa\uff0c\u5e76\u4e14\u60ac\u505c\u63d0\u4f9b\u6709\u5173\u6d4b\u91cf\u7edf\u8ba1\u5206\u5e03\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u53ca\u5bf9\u8c03\u67e5\u66f4\u6539\u7684\u66f4\u591a\u4fe1\u606f\u7684\u94fe\u63a5\u3002\n  \u6211\u4eec\u7684\u8868\u73b0\u5b9e\u9a8c\u5ba4\u7684\u57fa\u672c\u8d23\u4efb\u662f\u63d0\u4f9b\u6d4b\u8bd5\u548c\u8bc4\u4f30\u4ee3\u7801\u53d8\u66f4\u548c\u5b9e\u65bd\u9009\u9879\u6240\u9700\u7684\u53ef\u91cd\u590d\u6027\u3002\u8fd9\u79cd\u91cd\u590d\u6027\u4e5f\u7528\u4f5c\u5408\u6210\u57fa\u51c6\u7684\u5e73\u53f0\u3002\n \u5728\u57fa\u51c6\u7c7b\u522b\u4e2d\uff0c\u6211\u4eec\u6700\u4ee4\u4eba\u5174\u594b\u7684\u6539\u8fdb\u662f\u8f66\u901f\u8868\u3002 Liqueometer\u4f7f\u7528Todomvc\u5e94\u7528\u7a0b\u5e8f\u6a21\u62df\u51e0\u4e2a\u6d41\u884c\u7684Web\u6846\u67b6\uff0c\u5305\u62ecember\uff0c\u9aa8\u5e72\uff0cjquery\uff0c\u89d2\u5ea6\u548c\u53cd\u5e94\u3002\u5728\u9002\u5f53\u7684DOM\u6811\u548c\u5176\u4ed6\u6d4f\u89c8\u5668\u5b50\u7cfb\u7edf\u4e2d\u7684\u5176\u4ed6\u6539\u8fdb\uff0c\u5982Chakra JavaScript\u5f15\u64ce\uff0c\u8fd0\u884c\u901f\u5ea6\u8ba1\u57fa\u51c6\u7684\u65f6\u95f4\u51cf\u5c11\u4e8630\uff05;\u5728\u521b\u4f5c\u8005\u66f4\u65b0\u4e2d\uff0c\u6211\u4eec\u7684\u6027\u80fd\u7126\u70b9\u51c0\u5316\u4e8635\uff05\u7684\u53e6\u4e00\u79cd\u6539\u8fdb\uff08\u8bf7\u6ce8\u610f\uff0c\u8f66\u901f\u8868\u7684\u5f97\u5206\u662f\u901f\u5ea6\u7684\u8861\u91cf\u6807\u51c6\uff0c\u56e0\u6b64\u662f\u65f6\u95f4\u7684\u9006\u51fd\u6570\uff09\u3002\n  \u5f53\u7136\uff0c\u6700\u91cd\u8981\u7684\u7ee9\u6548\u6307\u6807\u662f\u7528\u6237\u7684\u770b\u6cd5\uff0c\u6240\u4ee5\u867d\u7136\u5b8c\u5168\u4e0d\u79d1\u5b66\uff0c\u6211\u4eec\u4e00\u76f4\u5f88\u9ad8\u5174\u770b\u5230\u5176\u4ed6\u4eba\u901a\u77e5\u6211\u4eec\u7684\u5de5\u4f5c\uff01\n   \u5bf9Microsoft\u7684\u8363\u8a89\uff0c\u6700\u65b0\u7684Edge\u7248\u672c\u5728https://t.co/kfx8y4spdi\u4e0a\u901f\u5ea6\u901f\u5ea6\u8fd150\uff05\uff08\u73b0\u5728\u7c89\u788eFirefox\uff09\n  \u6700\u65b0\u7684Edge\u4e5f\u9002\u7528\u4e8eember\u76842\u500d\u3002\u6700\u540e\uff0c\u6211\u53ef\u4ee5\u76f8\u4fe1\u7684\u4e00\u4e9b\u6539\u53d8\uff01\u826f\u597d\u7684\u5de5\u4f5c\u8fb9\u7f18\u56e2\u961f\u3002 ???? pic.twitter.com/nj6qld4atw.\n  \u6211\u4eec\u8fd8\u6ca1\u6709\u5b8c\u6210\uff0c\u6211\u4eec\u77e5\u9053Microsoft Edge\u5c1a\u672a\u6700\u5feb\u7684\u8f66\u901f\u8868\u57fa\u51c6\u3002\u6211\u4eec\u7684\u5206\u6570\u5c06\u7ee7\u7eed\u6539\u5584\u6211\u4eec\u7684\u7ee9\u6548\u5de5\u4f5c\u7684\u526f\u4f5c\u7528\uff0c\u6211\u4eec\u5c06\u4f7fDEV\u793e\u533a\u4fdd\u6301\u66f4\u65b0\u6211\u4eec\u7684\u8fdb\u5c55\u3002 \n\u5feb\u901f\u7684DOM\u5bf9\u4e8e\u5f53\u4eca\u7684Web\u5e94\u7528\u7a0b\u5e8f\u548c\u7ecf\u9a8c\u81f3\u5173\u91cd\u8981\u3002 Windows 10\u521b\u5efa\u8005\u66f4\u65b0\u662f\u7b2c\u4e00\u7cfb\u5217\u7248\u672c\u7684\u7b2c\u4e00\u4e2a\u4e13\u6ce8\u4e8e\u91cd\u65b0\u5f52\u6863DOM\u6811\u7684\u6027\u80fd\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed\u63d0\u9ad8\u6211\u4eec\u7684\u6027\u80fd\u9065\u6d4b\u548c\u793e\u533a\u8d44\u6e90\uff0c\u5982CSS\u4f7f\u7528\u548cAPI\u76ee\u5f55\u3002  \u6211\u4eec\u521a\u521a\u5f00\u59cb\u5212\u4f24\u6211\u4eec\u7684\u65b0DOM\u6811\u7684\u8868\u9762\uff0c\u5e76\u4e14\u524d\u65b9\u4ecd\u7136\u5b58\u5728\u5f88\u957f\u7684\u65c5\u7a0b\uff0c\u4f46\u6211\u4eec\u5f88\u9ad8\u5174\u770b\u5230\u5b83\u5f15\u5bfc\u5e76\u4e0e\u60a8\u5206\u4eab\u5b83\uff01 \u8c22\u8c22\uff01 ", "note_en": "The DOM is the foundation of the web platform programming model, and its design and performance impacts the rest of the browser pipeline. However, its history and evolution is far from a simple story.\n Over the past three years, we\u2019ve embarked on an in-flight refactoring of the DOM in Microsoft Edge, with our eye on a modernized architecture offering better real-world performance and reduced complexity. In this post, we\u2019ll walk you through the history of the DOM in Internet Explorer and Microsoft Edge, and the impact of our recent work to modernize the DOM Tree, which is already resulting in substantially improved performance in the Windows 10 Creators Update.\n  What we think of as \u201cthe DOM\u201d is really the cooperation of several subsystems. In Microsoft Edge, this includes JS binding, events, editing, spellchecking, HTML attributes, CSSOM, text, and others, all working together. Of these subsystems, the DOM \u201ctree\u201d is at the center.\n Several years ago, we began a long journey to update to a modern DOM \u201ctree\u201d (node connectivity structures). By modernizing the core tree, which we completed in Microsoft Edge 14, we landed a new baseline and the scaffolding to deliver on our promise of a fast and reliable DOM. With Windows 10 Creators Update and Microsoft Edge 15, the journey we started is beginning to bear fruit.\n  We\u2019re just scratching the surface, but want to take this opportunity to  geek out a bit, and share some of the internal details of this journey, starting with the DOM\u2019s arcane history and showcasing some of our accomplishments along the way.\n  When web developers today think of the DOM, they usually think of a tree that looks something like this:\n  However nice and simple (and obvious) this seems, the reality of Internet Explorer\u2019s DOM implementation was much more complicated.\n Simply put, Internet Explorer\u2019s DOM was designed for the web of the 90s. When the original data structures were designed, the web was primarily a document viewer (with a few animated GIFs and other images thrown in). As such, algorithms and data structures more closely resembled those you might see powering a document viewer like Microsoft Word. Recall in the early days of the web that there was no JavaScript to allow scripting a web page, so the DOM tree as we know it didn\u2019t exist.  Text was king, and the DOM\u2019s internals were designed around fast, efficient text storage and manipulation. Content editing (WYSIWYG) was already a feature at the time, and the manipulation paradigm centered around the editing cursor for character insertion and limited formatting.\n  As a result of its text-centric design, the principle structure of the DOM was the  text backing store, a complex system of text arrays that could be efficiently split and joined with minimal or no memory allocations. The backing store represented both text  and tags as a linear progression, addressable by a global index or  Character Position (CP). Inserting text at a given CP was highly efficient and copy/pasting a range of text was centrally handled by an efficient \u201csplice\u201d operation. The figure below visually illustrates how a simple markup containing \u201chello world\u201d was loaded into the text backing store, and how CPs were assigned for each character and tag.\n  To store non-textual data (e.g. formatting and grouping information), another set of objects was separately maintained from the backing store: a doubly-linked list of  tree positions (TreePos objects).  TreePos objects were the semantic equivalent of tags in HTML source markup \u2013 each logical element was represented by a begin and end  TreePos. This linear structure made it very fast to traverse the entire DOM \u201ctree\u201d in depth-first pre-order traversal (as required for nearly every DOM search API and CSS/Layout algorithm). Later, we extended the  TreePos object to include two other kinds of \u201cpositions\u201d:  TreeDataPos (for indicating a placeholder for text) and  PointerPos (for indicating things like the caret, range boundary points, and eventually for \u201cnew\u201d features like  generated content nodes).\n Each  TreePos object also included a  CP object, which acted as the tag\u2019s global ordinal index (useful for things like the legacy  document.all API).  CPs were used to get from a  TreePos into the text backing store, easily compare node order, or even find the length of text by subtracting  CP indices.\n To tie it all together, a  TreeNode bound pairs of tree positions together and established the \u201ctree\u201d hierarchy expected by the JavaScript DOM as illustrated below.\n   The foundation of  CPs caused much of the complexity of the old DOM. For the whole system to work properly,  CPs had to be up-to-date. Thus,  CPs were updated after  every DOM manipulation (e.g. entering text, copy/paste, DOM API manipulations, even clicking on the page\u2014which set an insertion point in the DOM). Initially, DOM manipulations were driven primarily by the HTML parser, or by user actions, and the  CPs-always-up-to-date model was perfectly rational. But with rise of JavaScript and DHTML, these operations became much more common and frequent.\n To compensate, new structures were added to make these updates efficient, and the  splay tree was born, adding an overlapping series of tree connections onto TreePos objects. The added complexity helped with performance\u2014at first; global  CP updates could be achieved with  O(log n) speed. Yet, a splay tree is really only optimized for repeated local searches (e.g., for changes centered around one place in the DOM tree), and did not prove to be a consistent benefit for JavaScript and its more random-access patterns.\n Another design phenomenon was that the previously-mentioned \u201csplice\u201d operations that handled copy/paste, were extended to handle all tree mutations. The core \u201csplice engine\u201d worked in three steps, as illustrated in the figure below.\n  In step 1, the engine would \u201crecord\u201d the splice by traversing the tree positions from the start of the operation to the end. A splice record was then created containing command instructions for this action (a structure re-used in the browser\u2019s Undo stack). In step 2, all nodes (i.e.,  TreeNode and  TreePos objects) associated with the operation were deleted from the tree. Note that in the IE DOM tree,  TreeNode/ TreePos objects were distinct from the script-referenced  Element objects to facilitate overlapping tags, so deleting them was not a functional problem. Finally, in step 3, the splice record was used to \u201creplay\u201d (re-create) new objects in the target location. For example, to accomplish an  appendChild DOM operation, the splice engine created a range around the node (from the  TreeNode\u2018s begin  TreePos to its end), \u201cspliced\u201d the range out of the old location, and created new nodes to represent the node and its children in the new location. As you can imagine, this created a lot of memory allocation churn, in addition to the inefficiencies of the algorithm.\n  These are just a few of the examples of the complexity of the Internet Explorer DOM. To add insult to injury, the old DOM had no encapsulation, so code from the Parser all the way to the Display systems had  CP/ TreePos dependencies, which required many dev-years to detangle.\n With complexity comes errors, and the DOM code base was a reliability liability. According to an internal investigation, from IE7 to IE11, approximately 28% of all IE reliability bugs originated from code in core DOM components. This complexity also manifested as a tax on agility, as each new HTML5 feature became more expensive to implement as it became harder to retrofit concepts into the existing architecture.\n  The launch of  Project Spartan created the perfect opportunity modernize our DOM. Free from platform vestiges like  docmodes and  conditional comments, we began a massive refactoring effort. Our first, and most critical target: the DOM\u2019s core tree.\n We knew the old text-centric model was no longer relevant; we needed a DOM tree that actually  was a tree internally in order to match the expectations of the modern DOM API. We needed to dismantle the layers of complexity that made it nearly impossible to performance-tune the tree and the other surrounding systems. And finally, we had a strong desire to encapsulate the new tree to avoid creating cross-component dependencies on core data structures. All of this effort would lead to a DOM tree with the right model in place, primed and ready for additional improvements to come.\n To make the transition to the modern DOM as smooth as possible (and to avoid building a new DOM tree in isolation and attempting to drop and stabilize untested code at the end of the project\u2014a.k.a. the very definition of \u201cbig bang integration\u201d), we transitioned the existing codebase in-place in three phases. The first phase of the project defined our tree component boundary with corresponding APIs and contracts. We chose to design the APIs as a set of \u201creader\u201d and \u201cwriter\u201d functions that operated on nodes. Instead of APIs that look like this:\n    This API design discourages callers from thinking about tree objects as actors with their own state. As a result, a tree object is only an identity in the API, allowing for more robust contracts and hiding  representational details, which proved useful in phase 3.\n The second phase migrated all code that depended on legacy tree internals to use the newly established component boundary APIs instead. During this migration, the implementation of the tree API would continue to be powered by the legacy structures. This work took the most time and was the least glamorous; it took several dev-years to detangle consumers of the old tree structures and properly encapsulate the tree. Staging the project this way let us release EdgeHTML 12 and 13 with our fully-tested incremental changes, without disrupting the shipping schedule.\n In the third and final phase, with all external code using the new tree component boundary APIs, we began to refactor and replace the core data structures. We consolidated objects (e.g., the separate  TreePos,  TreeNode, and  Element objects), removed the splay tree and splice engine, dropped the concept of  PointerPos objects, and removed the text backing storage (to name a few). Finally, we could rid the code of  CPs.\n The new tree structure is simple and straightforward; it uses four pointers instead of the usual five to maintain connectivity: parent, first-child, next, and previous sibling (last-child is computed as the parent\u2019s first-child\u2019s previous sibling) and we could hide this last-child optimization behind our  TreeReader APIs without changing a single caller. Re-arranging the tree is fast and efficient, and we even saw some improvements in CPU performance on public DOM APIs, which were nice side-effects of the refactoring work.\n  With the new DOM tree, reliability also improved significantly, dropping from 28% of all reliability issues to just around 10%, and at the same time providing secondary benefits of reducing time spent debugging and improving team agility.\n  While this feels like the end of our journey, in fact it\u2019s just the beginning. With our DOM tree APIs in place and powered by a simple tree, we turned our attention to the other subsystems that comprise the DOM, with an eye towards two classes of inefficiencies: inefficient implementations inside the subsystems, and inefficient communication between them.\n  For example, one of our top slow DOM APIs (even after the DOM tree work) has historically been  querySelectorAll. This is a general-purpose search API, and uses the selectors engine to search the DOM for specific elements. Not surprisingly, many searches involve particular element  attributes as search criteria (e.g., an element\u2019s  id, or one of its class identifiers). As soon as the search code entered the attributes subsystem, it ran into a whole new class of inefficiencies, completely unrelated to those addressed by the new DOM tree.\n For the attributes subsystem, we are simplifying the storage mechanism for element content attributes. In the early days of the web, DOM attributes were primarily directives to the browser about how to display a piece of markup. A great example of this is the colspan attribute:\n  colspan has semantic meaning to the browser and thus has to be parsed. Given that pages weren\u2019t very dynamic back then and attributes were generally treated like enums, IE created an attribute system that was optimized around eager parsing for use in formatting and layout.\n Today\u2019s app patterns, however, heavily use attributes like  id,  class, and  data-*, which are treated less like browser directives and more like generic storage:\n  Thus, we\u2019re deferring most work beyond the bare minimum necessary to store the string. Additionally, since UI frameworks often encourage  repeated CSS classes across elements, we plan to  atomize strings to reduce memory usage and improve performance in APIs like  querySelector.\n Though we still have plenty of work planned, with Windows 10 Creators Update, we\u2019re happy to share that we\u2019ve made significant progress!\n  Reliably measuring and improving performance is  hard and the  pitfalls of  benchmarking are  well documented. To get the most holistic view of browser performance possible, the Microsoft Edge team uses a combination of user telemetry, controlled measurement real-world scenarios, and synthetic benchmarks to guide our optimizations.\n  User telemetry \u201cpaints with a broad brush\u201d, but by definition measures the most impactful work. Below is an example of our build-over-build tracking of the  firstChild API across our user base. This data isn\u2019t directly actionable, since it doesn\u2019t provide all the details of the API call (i.e. what shape and size is the DOM tree) needed for performance tuning, but it\u2019s the only direct measurement of the user\u2019s experience and can provide feedback for planning and retrospectives.\n  We highlighted our  Performance lab and the nitty-gritty details of measuring browser performance a while ago, and while the tests themselves and the hardware in the lab has changed since then, the methodology is still relevant. By capturing and replaying real-world user scenarios in complex sites and apps like Bing Maps and Office 365, we\u2019re less likely to overinvest in narrowly applicable optimizations that don\u2019t benefit users. This graph is an example of our reports for a simulated user on Bing Maps. Each data point is a build of the browser, and hovering provides details about the statistical distribution of measurements and links to more information for investigating changes.\n  Our Performance lab\u2019s fundamental responsibility is to provide the repeatability necessary to test and evaluate code changes and implementation options. That repeatability also serves as the platform for synthetic benchmarks.\n In the benchmark category, our most exciting improvement is in  Speedometer. Speedometer simulates using the  TodoMVC app for several popular web frameworks including Ember, Backbone, jQuery, Angular, and React. With the new DOM tree in place and other improvements across other browser subsystems like the Chakra JavaScript engine, the time to run the Speedometer benchmark decreased by 30%; in the Creators update, our performance focus netted another improvement of 35% (note that Speedometer\u2019s scores are a measure of speed and thus an  inverse function of time).\n  Of course the most important performance metric is the user\u2019s perception, so while totally unscientific, we\u2019ve been super excited to see others notice our work!\n   kudos to Microsoft, latest Edge version is nearly 50% faster on  https://t.co/KFX8Y4SpDI (and now crushes Firefox)\n  Latest Edge also 2x faster for Ember. Finally, some change I can believe in! Good work Edge team. ????  pic.twitter.com/nj6Qld4aTW\n  We\u2019re not done yet, and we know that Microsoft Edge is not yet the fastest on the Speedometer benchmark. Our score will continue to improve as a side effect of our performance work and we\u2019ll keep the dev community updated on our progress.\n  A fast DOM is critical for today\u2019s web apps and experiences. Windows 10 Creators Update is the first of a series of releases focused on performance on top of a re-architected DOM tree. At the same time, we\u2019ll continue to improve our performance telemetry and community resources like the  CSS usage and  API catalog.\n We\u2019re just beginning to scratch the surface of what\u2019s possible with our new DOM tree, and there\u2019s still a long journey ahead, but we\u2019re excited to see where it leads and to share it with you! Thanks!", "posttime": "2021-06-21 14:51:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,edge,dom", "title": "\u5728Microsoft Edge\u4e2d\u7684DOM\u6811\u73b0\u4ee3\u5316 -  Microsoft Edge Blog ", "title_en": "Modernizing the DOM Tree in Microsoft Edge \u2013 Microsoft Edge Blog", "transed": 1, "url": "https://blogs.windows.com/msedgedev/2017/04/19/modernizing-dom-tree-microsoft-edge/", "via": "", "real_tags": ["microsoft", "edge", "dom"]}, {"category": "", "categoryclass": "", "imagename": "e4523fe3ac8444c11f8c32d53e4a6ac3.jpg", "infoid": 1067150, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\nWarning: Can only detect less than 5000 characters\n\u7136\u540e\uff0c\u5728\u73b0\u5728\uff0c\u4fdd\u5b88\u6d3e\u62c5\u5fc3\u8bb8\u591a\u4eba\u4f1a\u9075\u5faa\u5c11\u6570\u51e0\u4e2a\u3002 1837\u5e74\uff0c\u6ce2\u58eb\u987f\u7684\u4e00\u4e2a\u5b97\u6559\u4fdd\u62a4\u8005\u8b66\u544a\u8bf4\uff0c\u914b\u957f\u79f0\u4e4b\u4e3a\u201cTransing\u201d\u53ef\u80fd\u201c\u6210\u4e3a\u666e\u904d\u7684\u201d\u3002\u572819\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u7f8e\u56fd\u5404\u56fd\u548c\u57ce\u5e02\u5f00\u59cb\u5236\u5b9a\u6cd5\u5f8b\uff0c\u4f7f\u5176\u6210\u4e3a\u5987\u5973\u72af\u7f6a\u7684\u7f6a\u884c\uff0c\u4f5c\u4e3a\u5987\u5973\u7684\u7537\u4eba\u548c\u7537\u4eba\u3002\u5982\u679c\u6ca1\u6709\u5173\u4e8e\u4f7f\u7528\u516c\u5171\u5395\u6240\u7684\u8de8\u8d8a\u4eba\u6c11\u7684\u8de8\u8d8a\u6b47\u65af\u65af\u7279\u00b7\u6b47\u65af\u65af\u7279\uff0c\u90a3\u4e48\u5b83\u53ea\u662f\u56e0\u4e3a\u6709\u8fd9\u4e48\u5c11\u7684\u516c\u5171\u5395\u6240\u3002\u90a3\u4e9b\u786e\u5b9e\u5b58\u5728\u7684\u786e\u662f\u6027\u522b\u95ee\u9898\u7684\u9057\u5740\u3002\u4f8b\u5982\uff0c\u57281870\u5e74\uff0cFanny\uff08N\u00e9eFrederick\uff09\u516c\u56ed\u548c\u65af\u7279\u62c9\uff08N\u00e9eThomas\uff09Boulton\u88ab\u6355\uff0c\u56e0\u4e3a\u6270\u4e71\u548c\u5e73\u800c\u88ab\u6355\uff0c\u7136\u540e\u5728\u4f26\u6566\u5267\u9662\u4f7f\u7528\u5973\u58eb\u9000\u4f11\u623f\u95f4\u540e\u6536\u53d6\u9634\u8c0b\u4ee5\u72af\u4e0bSodomy\u3002\n Mesch\u548cManion\u6b63\u786e\u5730\u6307\u51fa\uff0c\u5973\u6743\u4e3b\u4e49\u8005\u548c\u5973\u540c\u6027\u604b\u5b66\u8005\u957f\u671f\u65e0\u89c6\u6216\u843d\u540e\u4e8e\u90a3\u4e9b\u4e3a\u751f\u6d3b\u800c\u575a\u6301\u4ed6\u4eec\u4e0d\u662f\u5973\u6027\u7684\u4eba\u7684\u81ea\u6211\u5b9a\u4e49\u3002 Mesch Cites Cites Rachilde\u7684\u65ad\u8a00\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f\u201c\u4e0d\u662f\u5973\u6027\u4e3b\u4e49\u8005\u201d\uff0c\u56e0\u4e3a\u4ed6\u4eec\u662f'\u4e0d\u662f\u4e00\u4e2a\u5973\u4eba'\u3002\u4f46\u662f\uff0c\u6885\u897f\u514b\u548c\u914b\u957f\u7684\u70ed\u60c5\u643a\u5e26\u8fd9\u4e9b\u5b66\u8005\u7684\u4efb\u52a1\u8868\u660e\u4ed6\u4eec\u8ba4\u4e3a\u5973\u540c\u6027\u604b\u8005\u548c\u5973\u6743\u4e3b\u4e49\u8005\u7279\u522b\u654c\u5bf9\u53cd\u8f6c\u3002\u8fd9\u662f\u8bb8\u591a\u5e74\u8f7b\u4eba\u5171\u4eab\u7684\u89c2\u70b9\uff0c\u4ed6\u4eec\u5c06\u672f\u8bed\u201c\u5973\u540c\u6027\u604b\u201d\u672f\u8bed\u4e0e\u4f20\u9012\u4f20\u9012\u7684\u60f3\u6cd5\u8054\u7cfb\u8d77\u6765\uff0c\u5173\u4e8e\u8c01\u662f\u8c01\uff0c\u4e0d\u662f\u4e00\u4e2a\u5973\u4eba\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5973\u6743\u4e3b\u4e49\u7ec4\u7ec7\u548c\u4e2a\u4eba\u6765\u652f\u6301\u53d8\u6027\u6743\u5229\uff0c\u8fd9\u66f4\u4e3a\u666e\u904d\u3002 2019\u5e74\uff0c\u8d85\u8fc7\u4e03\u5341\u4e2a\u81ea\u6211\u8ba4\u540c\u7684\u82f1\u56fd\u5987\u5973\u6743\u5229\u5021\u5bfc\u8005\u7b7e\u7f72\u4e86\u4e00\u5c01\u4fe1\uff0c\u8ddd\u79bb\u8de8\u7a7a\u6d3e\u6d3b\u52a8\u5bb6\u4eec\u503e\u659c\u3002\u51b0\u5c9b\u7684\u6240\u6709\u4e3b\u8981\u5973\u6743\u4e3b\u4e49\u7ec4\u7ec7\u90fd\u652f\u63012019\u5e74\u7684\u6cd5\u5f8b\uff0c\u5141\u8bb8\u4eba\u4eec\u5728\u6ca1\u6709\u533b\u5b66\u8bca\u65ad\u7684\u60c5\u51b5\u4e0b\u5408\u6cd5\u6539\u53d8\u4ed6\u4eec\u7684\u6027\u522b\uff0c\u5e76\u5728\u6240\u6709\u5b98\u65b9\u6587\u4ef6\u4e2d\u521b\u9020\u4e86\u7b2c\u4e09\u4e2a\u6027\u522b\u7684\u9009\u62e9\u3002\u4e00\u4e9b\u5973\u540c\u6027\u604b\u8005\uff0c\u5973\u6743\u4e3b\u4e49\u8005\uff0c\u8de8\u4eba\u548c\u4ed6\u4eec\u7684\u652f\u6301\u8005\u4e4b\u95f4\u7684\u7d27\u5f20\u5c40\u52bf\u662f\u771f\u5b9e\u7684\u3002\u4f46\u8fd9\u4e9b\u7fa4\u4f53\u4e5f\u6709\u5171\u540c\u7684\u654c\u4eba\u548c\u5171\u540c\u7684\u76ee\u6807\uff0c\u4ece\u89e3\u653e\u6211\u4eec\u7684\u6240\u6709\u6765\u81ea\u51fa\u751f\u524d\u5f00\u59cb\u7684\u65e0\u60c5\u7684\u6027\u522b\u8b66\u52a1\u3002 ", "note_en": "J \u200b   was working for a London shipwright when he was killed by a falling piece of timber in 1829. He had been married to his wife, Abigail, for more than twenty years. The medical students who performed the autopsy declared Allen\u2019s body anatomically female, but the coroner continued to call the deceased \u2018he\u2019 because \u2018I considered it impossible for him to be a woman, as he had a wife.\u2019 The marriage certificate convinced the coroner to ignore Allen\u2019s anatomy: social gender trumped biological gender. The rest of the community agreed. Allen wore trousers, worked as a manual labourer, had a wife and was called James. He was \u2018sober, steady, strong and active\u2019. Of course he was a man. Only after Allen\u2019s death, as news of the autopsy spread, did some people begin to express different opinions: they\u2019d always noticed his lack of facial hair, they said, and oddly high voice. But, even then, for every person who feminised Allen in retrospect, another insisted on his masculine traits \u2013 a face roughened by a life spent outdoors, large hands hardened by decades of work as a groom and sawyer.\n As Jen Manion\u2019s  Female Husbands and Rachel Mesch\u2019s  Before Trans show, a considerable number of people assigned female at birth lived as men, between genders, and outside gender during the 18th and 19th centuries \u2013 long before the rise of endocrinology and gender affirmation surgery. The people documented in these books were rich and poor, rural and urban, fixed and itinerant, literate and illiterate, French, British and American. Some had sex with men, some with women, some with both, some with no one at all. Almost all were white and, Manion shows, on the rare occasions when journalists and police did interact with trans people of colour, they focused on race. Femininity was so bound up with whiteness that a black woman who passed as a man was not seen to be making as great a gender leap as a white woman who did so. And because blackness was associated with enslavement, what white people noticed most about a black female sailor, say, was not that a woman had taken on a man\u2019s role but that an African American had exercised an unusual degree of freedom.\n As the title  Before Trans suggests, Mesch doesn\u2019t use \u2018trans\u2019 to refer to her book\u2019s three French gender-nonconformists, although they sometimes used masculine titles and pronouns. Mesch refers to them as \u2018she\u2019 throughout, arguing that none fully renounced the use of female pronouns, even as they sought to defy the rules imposed by the obsessively gendered French language. \u2018They\u2019, now widely adopted as a singular pronoun by individuals who combine or move between genders, seems to me the more appropriate choice for these figures. Because Manion\u2019s female husbands chose to live as men, I refer to them using male pronouns.\n Mesch\u2019s first subject, Jane Dieulafoy (b. 1851), was a French patriot, a Catholic, an archaeologist and a sharpshooter in the Franco-Prussian War. They were married to the engineer and archaeologist Marcel-Auguste Dieulafoy and together the couple undertook a number of expeditions to Persia. Their \u2018common dress\u2019 reflected their common interests (one journalist wrote that Dieulafoy\u2019s male attire enabled \u2018man and wife\u2019 to enjoy \u2018unbroken companionship\u2019). Joan of Arc served as inspiration and precedent, legitimising the expansion of \u2018femininity\u2019 to include defending the nation, but Dieulafoy\u2019s activities included the modest as well as the epic: writing novels about women warriors and designing gender-neutral costumes for amateur theatrics.\n The novelist Rachilde, born Marguerite Eymery in 1860, also made use of an external authority to gain a degree of gender autonomy. Aged sixteen, they claimed to be possessed by the spirit of Rachilde, a 17th-century Swedish count, and soon afterwards began to wear men\u2019s clothes and ordered calling cards printed with \u2018Man of Letters\u2019. Rachilde, Mesch writes, was \u2018never entirely sure\u2019 of their identity, but \u2018had long been sure\u2019 they were not a woman. Raoule, the protagonist of  Monsieur V\u00e9nus (1884) , Rachilde\u2019s most famous novel, alternates between male and female dress and becomes a female husband to an effeminate young man. Asked to account for the book by the Paris police, Rachilde described it as a tale about a woman who sexually penetrates men, \u2018noting that anything was possible with the help of technology\u2019. They stopped wearing trousers after marrying Alfred Vallette in 1889, but continued to respond to both \u2018Monsieur\u2019 and \u2018Madame\u2019.\n Mesch\u2019s third subject, the art critic Marc de Montifaud (1845-1912), born Marie-Am\u00e9lie Chartroule de Montifaud, rejected gender categories altogether, insisting on a radical individualism: not \u2018he\u2019 or \u2018she\u2019 but \u2018I am me.\u2019 Montifaud used both male and female pronouns and took male and female lovers; after they married, both partners went by \u2018Monsieur Montifaud\u2019. Montifaud\u2019s salacious short stories weren\u2019t safe from French obscenity laws, however, and resulted in prison sentences, confinement in asylums and temporary flights into exile.\n Mesch\u2019s gender renegades were wealthy and educated, so records of their inner lives survive. They wrote memoirs, letters and novels, commissioned portraits and compiled scrapbooks. By contrast, Manion\u2019s working-class British and American subjects rarely had much control over the way they were represented by journalists and balladeers. Most female husbands made the news only after something went wrong in their lives. Some were blackmailed while others were exposed after falling ill or getting arrested.\n Female husbands expressed their masculinity through their choice of clothing, names, behaviours and, above all, their labour and their marriage status. As tavern keepers, soldiers, sailors, mountebanks, builders and itinerant tinkers, they rejected the belief that those born female couldn\u2019t do men\u2019s work. Husbands were not born, but made. Because most people believed that marriage could exist only between a man and woman, having a wife was just as convincing a proof of manhood as physical strength, a long stride and a tendency to drink too much and get into fights.\n Some female husbands remained in stable unions for decades. Others, revealed to have been born female, moved to new places and continued to live as men, or were forced to dissolve their marriages, in some cases resuming female attire. The way women responded to their female husbands varied with the state of their relationships. Some wives pressed charges. In 1838, Henry Stoake, an oven builder from Manchester who had lived as a man since his late teens, was exposed by his wife of 22 years. Angry that he was holding back her housekeeping allowance, she sought a legal separation and tried to secure a claim to his assets by telling her lawyer that Stoake had been born female. (In fact, her revelation cast doubt on whether she was legally married at all.) Other wives stood by female husbands who ended up on the wrong side of the law. When George Wilson was arrested for vagrancy after fainting in a New York street in 1836 (there wasn\u2019t yet a crime of dressing as the other sex to charge him with), Elisabeth, his wife of fifteen years, fetched him from the police station to the house the couple shared with her father. Samuel Bundy, born Sarah Paul, a sailor, was jailed in 1760 on a charge of fraud for marrying a woman (his initial defence was that a shark had eaten his penis). Bundy was reportedly visited in prison by a dozen women to whom he had paid court; his wife refused to press charges and eventually he was released. Nine months later, living as a woman, Bundy married a man.\n Female husbands troubled their communities because they proved it wasn\u2019t always straightforward to tell men and women apart, despite the notion of \u2018opposite sexes\u2019. The consequences of this unease could be severe. In 1746, Charles Hamilton, an itinerant quack doctor in the southwest of England, was reported to the authorities by his wife of two months for \u2018pretending herself a man\u2019. He was publicly whipped in four different towns, then sentenced to six months\u2019 hard labour. (By the time Hamilton\u2019s story surfaced in a Boston newspaper, he was reported to have had fourteen wives.) But many female husbands were supported by their communities, and press coverage could be sympathetic. James Howe began to live as a man in 1732, aged sixteen, and had been married for thirty years before his desperation at being blackmailed by a childhood acquaintance led him to reveal his secret. After his friends and neighbours learned that Howe had been born female, they took the news in their stride. The blackmailer was sentenced to four years in prison for extortion. A widely circulated account of the trial, Manion notes, portrayed Howe as \u2018a person of integrity \u2013 despite their gender ambiguity\u2019.\n Female husbands had varied relationships to masculinity. Some transitioned to maleness early in adolescence, others much later; some lived as men for most of their lives, some only briefly and others moved between genders. In 1852, 17-year-old Mary Robins met the 32-year-old Mrs Panton, who claimed to be an illegitimate royal \u2013 born male but forced to disguise himself as female to avoid scandal. Mrs Panton dropped that disguise to wed Mary Robins as Albert Guelph. During the honeymoon, Mary learned that Albert was the mother of three children, and the marriage was annulled. Guelph resurfaced four years later in Syracuse, New York, when the father of his next bride reported him to the authorities, this time against his daughter\u2019s wishes.\n In both these books, gender has more to do with habit than biology. According to Manion, female husbands knew that \u2018what makes a man is not the sex they are assigned at birth but the life they live.\u2019 In the  Nicomachean Ethics, Aristotle argued for a form of knowledge he called practical: one learns to become a swimmer by swimming. One might say that a person becomes a man by living as a man. Mesch proposes that gender isn\u2019t a label so much as a story, although judging by these accounts, it\u2019s not just one story but many. The stories trans people told about themselves often collided with the way others understood them. Family members, neighbours, employers, spouses, lovers, police officers and doctors could make or unmake the tale and the teller.\n Trans people encounter resistance not only because they challenge widely held notions about gender but also because they threaten society\u2019s conformist tendencies. Dieulafoy, for example, found much more acceptance than Rachilde, because Dieulafoy\u2019s masculinity served the French imperial state. The press lauded them as an \u2018intrepid explorer\u2019 whose Persian expeditions added treasures to the Louvre. The same holds true for some of Manion\u2019s female husbands. Robert Shurtliff, an American soldier in the War of Independence, also known as Deborah Sampson, was celebrated for acting out of the \u2018purest patriotism\u2019 and without \u2018any selfish motives\u2019. When the British soldier James Gray revealed that he had once been Hannah Snell, he was treated as a hero. By contrast, the deliberately perverse Rachilde, determined \u2018to be strange or nothing at all\u2019, was denounced, censored and pathologised. When a judge found Albert Guelph guilty of vagrancy in 1856, he claimed that he had \u2018harmed the entire community\u2019.\n As society\u2019s ideas about gender changed, so too did attitudes towards female husbands. After the rise of feminism in the 1840s, female husbands became associated with the growing numbers of women eager to vote, go to college and work in jobs formerly reserved for men. The press began to fret that a once eccentric phenomenon might soon become widespread. In 1883, the  New York Times announced that \u2018many women \u2026 if they had the opportunity, would select other women as husbands rather than marry men.\u2019 Although reports of female husbands remained rare, agitation about gender-crossing intensified. With the rise of sexology in the 1880s, doctors and journalists began to see female husbands as lesbians, that is, as more female than husband. Sex, now considered a fixed biological essence, began to trump gender: no longer a person successfully living as a man, the female husband was a deviant woman.\n Then as now, conservatives feared that the many would follow the few. In 1837, a religious conservative in Boston warned that what Manion calls \u2018transing\u2019 might \u2018become universal\u2019. In the 1860s, US states and cities began to enact laws that made it a crime for women to dress as men and men as women. If there was no widespread hysteria about trans people using public toilets, it was only because there were so few public toilets. Those that did exist were indeed sites of gender trouble. In 1870, for example, Fanny (n\u00e9e Frederick) Park and Stella (n\u00e9e Thomas) Boulton were arrested for disturbing the peace, then charged with conspiracy to commit sodomy, after using the Ladies\u2019 Retiring Room in a London theatre.\n Mesch and Manion correctly point out that feminist and lesbian scholars long disregarded or downplayed the self-definitions of people who had spent their lives insisting they were not women. Mesch cites Rachilde\u2019s assertion that they were \u2018not a feminist\u2019 because they were \u2018not a woman\u2019. But the zeal with which Mesch and Manion take those scholars to task suggests that they believe lesbians and feminists to be especially hostile to trans existence. This is a view shared by many young people, who associate the term \u2018lesbian\u2019 with transphobic ideas about who is and is not a woman. It is far more common, however, for feminist organisations and individuals to support transgender rights. In 2019, more than seventy self-identified UK women\u2019s rights advocates signed a letter distancing themselves from trans exclusionary activists. All the major feminist organisations in Iceland supported a 2019 law that allows people to legally change their gender without a medical diagnosis and created an option for a third gender on all official documents. The tensions among some lesbians, feminists, trans people and their supporters are real. But these groups also have common enemies and shared goals, beginning with liberating us all from the relentless gender policing that begins before birth.", "posttime": "2021-06-21 14:51:38", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5973\u6027,husband,\u6027\u522b", "title": "\u6bd4\u5973\u6027\u66f4\u591a\u7684\u4e08\u592b ", "title_en": "More Husband Than Female", "transed": 1, "url": "https://www.lrb.co.uk/the-paper/v43/n12/sharon-marcus/more-husband-than-female", "via": "", "real_tags": ["\u5973\u6027", "husband", "\u6027\u522b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067149, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u4eba\u6307\u51fa\uff0c\u6211\u4eec\u7f3a\u5c11\u5173\u4e8e\u5982\u4f55\u4ece\u60f3\u6cd5\u5230\u786c\u4ef6\u5230\u786c\u4ef6\u7684\u9010\u6b65\u6307\u5357\uff0c\u4ee5\u5728Xous\u4e2d\u4e3a\u524d\u4f53\u7684\u5b8c\u5168\u5b9e\u73b0\u7684\u529f\u80fd\u3002\u6240\u4ee5\uff0c\u8fd9\u662f\u3002\n \u56e0\u4e3a\u524d\u4f53\u4e3a\u5176SoC\u4f7f\u7528FPGA\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4e3a\u786c\u4ef6\u201c\u5728\u98de\u884c\u201d\u4e2d\u6dfb\u52a0\u65b0\u529f\u80fd\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u5c06\u4e3a\u6211\u4eec\u7684\u57fa\u672c\u6258\u7ba1TRNG\u5757\u6dfb\u52a0\u4e00\u4e9b\u6539\u8fdb\u3002\u5ba1\u67e5\uff0c\u73b0\u6709\u7684TRNG\u5305\u62ec\u96ea\u5d29\u566a\u58f0\u6e90\u548c\u73af\u5f62\u632f\u8361\u5668\u566a\u58f0\u6e90\uff0c\u4f5c\u4e3a\u57fa\u4e8e\u786c\u4ef6\u7684\u201c\u771f\u5b9e\u201d\u71b5\u7684\u6e90\u3002\u51fa\u4e8e\u4ee5\u4e0b\u539f\u56e0\uff0c\u4f7f\u7528\u4e24\u4e2a\u53d1\u7535\u673a\uff1a\n \u5916\u90e8\u79bb\u6563\u53d1\u7535\u673a\u6613\u4e8e\u68c0\u67e5\uff08\u4ec5\u5728\u96ea\u5d29\u566a\u58f0\u6e90\u4e0a\u653e\u7f6e\u793a\u6ce2\u5668\uff09\uff0c\u4f46\u66f4\u96be\u5730\u9632\u6b62\u7269\u7406\u8bbf\u95ee\u653b\u51fb\n \u82af\u7247\u7684\u7247\u4e0a\u53d1\u751f\u5668\u66f4\u96be\u7834\u89e3\uff08\u5bf9\u6267\u884c\u77ed\u5230\u5730\u9762\u653b\u51fb\u7684\u4e00\u5bf9\u954a\u5b50\u6216RF\u5e72\u6270\u653b\u51fb\u7684\u5bf9\u954a\u5b50\u66f4\u52a0\u5f3a\u5927\uff09\uff0c\u4f46\u66f4\u96be\u68c0\u67e5\uff08\u662f\u6765\u81eaTRNG\u7684\u6570\u636e\uff0c\u6216\u4ec5\u4ec5\u662f\u8bf1\u9975csprng\u690d\u5165\u7269\uff1f\uff09\n \u6240\u6709\u786c\u4ef6\u673a\u5236\u90fd\u662f\u7f3a\u4e4f\u7f3a\u4e4f\u7684;\u62e5\u6709\u4e24\u4e2a\u6765\u6e90\u53ef\u4ee5\u6539\u5584\u5bf9\u77ac\u6001\u8f8d\u5b66\u6216\u8870\u8001\u5931\u8d25\u7684\u9c81\u68d2\u6027\n \u6211\u4eec\u5df2\u7ecf\u5b8c\u6210\u4e86\u5bf9Trng\u6765\u6e90\u7684\u5e7f\u6cdb\uff0c\u6570\u6708\u957f\u7684\u8868\u5f81\uff0c\u5e76\u53d1\u73b0\u5b83\u4eec\u4ea7\u751f\u53ef\u901a\u8fc7\u7684\u539f\u59cb\u71b5\u3002\u4f46\u662f\uff0c\u7cfb\u7edf\u4ecd\u7f3a\u5c11\u4e24\u4e2a\u529f\u80fd\u901a\u5e38\u88ab\u8ba4\u4e3a\u662f\u6700\u4f73\u5b9e\u8df5\uff1a\n \u72ec\u7acb\u7684\uff0c\u5728\u7ebf\u5065\u5eb7\u76d1\u89c6\u5668\u7684\u539f\u59cbTrng\u8f93\u51fa\u3002\u91cd\u8981\u7684\u662f\uff0c\u5728\u539f\u59cb\u6570\u636e\u53d1\u751f\u7684\u4efb\u4f55\u8c03\u7406\u6216\u6df7\u5408\u4e4b\u524d\u53d1\u751f\u5065\u5eb7\u76d1\u6d4b\uff0c\u5e76\u4e14\u663e\u7740\u5730\uff0c\u6ca1\u6709\u4e00\u5b9a\u5c3a\u5bf8\u9002\u5408\u7684\u5168\u90e8\u5065\u5eb7\u76d1\u89c6\u5668\uff1a\u5b83\u5efa\u8bae\uff08nist sp 800-90b sec 4.4\uff09\u5bf9\u566a\u58f0\u6e90\u5b9a\u5236\u7684\u6d4b\u8bd5\u3002 \n\u539f\u59cb\u6570\u636e\u7684\u8c03\u7406\u3002\u5c3d\u7ba1\u6700\u597d\u7684\u52aa\u529b\u4f7fTRNGS\u65e0\u504f\u4e0d\u501a\uff0c\u4f46\u5b83\u4eec\u771f\u7684\u5f88\u96be\u6b63\u786e\u3002\u6b64\u5916\uff0c\u5b83\u4eec\u4ec5\u80fd\u591f\u4ee5\u6709\u9650\u7684\u6570\u636e\u901f\u7387\u751f\u4ea7\u9ad8\u8d28\u91cf\u7684\u71b5\u3002\u56e0\u6b64\uff0c\u5927\u591a\u6570\u5b9e\u9645\u7cfb\u7edf\u91c7\u7528TRNG\u8f93\u51fa\u5e76\u901a\u8fc7\u52a0\u5bc6\u6d41\u5bc6\u7801\u8fd0\u884c\u4ee5\u751f\u6210\u6700\u7ec8\u6570\u636e\u6d41;\u8fd9\u540c\u65f6\u9632\u6b62TRNG\u4e2d\u7684\u8f7b\u5fae\u7f3a\u9677\uff0c\u540c\u65f6\u63d0\u9ad8\u4e86\u968f\u673a\u6570\u7684\u53ef\u7528\u6027\u3002\n \u4ee5\u4e0b\u5197\u957f\u7684\u5e16\u5b50\u901a\u8fc7\u6dfb\u52a0\u8fd9\u4e9b\u529f\u80fd\u7684\u601d\u7ef4\u8fc7\u7a0b\uff0c\u5b9e\u73b0\u548c\u8c03\u8bd5\u8fc7\u7a0b\u6765\u6b65\u884c\u3002\u5f88\u5c11\u6709\u4eba\u751a\u81f3\u4f1a\u6ce8\u610f\u5230\u8fd9\u4e9b\u529f\u80fd\uff0c\u5982\u679c\u4e00\u5207\u6b63\u5e38\u6b63\u5728\u505a\u7684\u5de5\u4f5c\u6743\uff08\u5373\uff0cTrng\u7684\u539f\u59cb\u6570\u636e\u6b63\u5e38\u5de5\u4f5c\uff09\u65e0\u6cd5\u4ece\u6240\u6709\u8fd9\u4e9b\u52aa\u529b\u4e4b\u524d\u65e0\u6cd5\u533a\u5206\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8ba4\u771f\u5bf9\u5f85Trgs;\u5982\u6b64\u591a\u5730\u4e58\u5750\u8fd9\u4e9b\u968f\u673a\u6570\u7684\u8d28\u91cf\uff0c\u8fd9\u53ef\u80fd\u662f\u503c\u5f97\u52aa\u529b\u89e3\u51b3\u5931\u8d25\u7684\u52aa\u529b\uff0c\u4ed6\u4eec\u65e0\u610f\u4e2d\uff0c\u6076\u610f\u6216\u53ea\u662f\u8bbe\u8ba1\u9519\u8bef\u3002\n \u6211\u5fc5\u987b\u8bda\u5b9e\u5730\uff0c\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u6765\u68c0\u67e5\u4e00\u4e2a\u4eba\u5f88\u5c11\u5173\u5fc3\u7684\u76d2\u5b50\uff0c\u4f46\u6211\u6765\u5b9e\u73b0\u8fd9\u662f\u4e00\u4e2a\u5199\u4f5c\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u548c\u56fa\u4ef6\u7684\u4e1c\u897f\u3002\u60a8\u53ef\u4ee5\u5728\u4e0b\u5348\u7684\u5de5\u4f5c\u4e2d\u521b\u9020\u66f4\u591a\u7684\u540d\u671b\u548c\u591a\u5df4\u80fa\uff0c\u4ece\u521b\u9020\u4e00\u4e2a\u9177\u70ab\u7684UI\u4e3b\u9898\u3002\u5bf9\u65e5\u5e38\u7684\u4eba\u6765\u8bf4\uff0c\u4f60\u5bf9\u6240\u6709\u8fd9\u4e00\u70b9\u548c\u52aa\u529b\u505a\u7684\u4e8b\u60c5\u90fd\u975e\u5e38\u96be\u4ee5\u7406\u89e3;\u4f46\u5982\u679c\u6ca1\u6709\u6f5c\u5728\u7684\u6846\u67b6\uff0c\u4f7f\u4e1c\u897f\u8010\u7528\u53ef\u9760\uff0c\u6211\u4eec\u90fd\u53ef\u80fd\u5728\u4fa7\u9762\u7ed8\u5236\u7c89\u7b14\u56fe\u7247\u3002\n \u65e0\u9700\u8fdb\u4e00\u6b65\u7684ADO\uff0c\u8fd9\u91cc\u6709\u4e24\u4e2a\u7528\u4e8e\u6dfb\u52a0\u529f\u80fd\u7684\u6307\u5357\uff0c\u5e16\u5b50\u4e4b\u95f4\u5b58\u5728\u4e00\u4e9b\u91cd\u590d\uff0c\u56e0\u6b64\u53ef\u4ee5\u72ec\u7acb\u8bfb\u53d6\u5b83\u4eec\u3002\n  \u6211\u8fd8\u5c06\u4ece\u8fd9\u4e9bWiki\u6587\u7ae0\u4e2d\u62cd\u6444\u4eae\u70b9\u5e76\u5728\u6b64\u5904\u8f6c\u53d1\u7ed9\u535a\u5ba2\uff0c\u521b\u5efa\u4e00\u4e2a\u201cTL; DR\u201d\u7248\u672c\uff0c\u8be5\u7248\u672c\u4e5f\u6574\u9f50\u5730\u4f20\u9001\u5230\u6211\u7684\u535a\u5ba2\u7535\u5b50\u90ae\u4ef6\u7528\u6237\u7684\u6536\u4ef6\u7bb1\u3002 ", "note_en": "It was pointed out that we\u2019re missing a step-by-step guide on how to go from an idea, to hardware, to a fully implemented feature in Xous for Precursor. So, here it is.\n Because Precursor uses an FPGA for its SoC, we can add new features to the hardware \u201con the fly\u201d. In this case, we\u2019re going to add some improvements to our basic managed TRNG block. To review, the existing TRNG consists of an  avalanche noise source and a  ring oscillator noise source as hardware-based sources of \u201ctrue\u201d entropy. Two generators are used for the following reasons:\n An external discrete generator is easy to check (just put an oscilloscope on the avalanche noise source), but harder to protect against physical access attacks\n An integrated, on-chip generator is harder to hack (more robust against a pair of tweezers executing a short-to-ground attack, or RF interference attacks), but harder to check (is the data from the TRNG, or merely a decoy CSPRNG implant?)\n All hardware mechanisms are fallible; having two sources improves robustness against transient drop-outs or aging failures\n We\u2019ve already done extensive, months-long characterization of both of the TRNG sources and found them to produce passable raw entropy. However, the system is still missing two features that are generally considered to be best practice:\n Independent, on-line health monitors of the raw TRNG outputs. It\u2019s important that the health monitoring happens before any conditioning or mixing of the raw data happens, and significantly, there is no one-size-fits-all health monitor for a TRNG: it\u2019s advised ( NIST SP 800-90B sec 4.4) to have tests that are tailored to the noise source.\n Conditioning of the raw data. Despite best efforts to make TRNGs unbiased and flawless, they are really hard to get right. Furthermore, they are only capable of producing high-quality entropy at a limited data rate. Thus, most practical systems take a TRNG output and run it through a cryptographic stream cipher to generate a final datastream; this simultaneously protects against minor flaws in the TRNG while improving the availability of random numbers.\n The following lengthy posts walk step-by-step through the thought process, implementation and debugging process of adding these features. Few people would even notice these features, and if everything is doing its job right (that is, the TRNG\u2019s raw data is working correctly) is indistinguishable from the state before all this effort. However, we take TRNGs seriously here; so much rides on the quality of these random numbers that it\u2019s probably worth the effort to harden them against failures, be they unintentional, malicious, or just design bugs.\n I have to be honest, I spent a lot of time to check a box that few people care about, but I\u2019ve come to realize that\u2019s mainly what writing OS code and firmware is about. You can get more fame and dopamine from creating a cool UI theme with an afternoon of work. It\u2019s also really hard to explain to everyday people what you\u2019re doing exactly with all this time and effort; but without the underlying frameworks that make things durable and reliable, we all might as well be drawing chalk pictures on the side walk.\n Without further ado, here are the two guides for adding features, there\u2019s some repetition between the posts so they can be read independently.\n  I\u2019ll also take highlights from these wiki articles and repost them to the blog here, creating a \u201cTL;DR\u201d version that is also neatly delivered to the inboxes of my blog\u2019s email subscribers.", "posttime": "2021-06-21 14:47:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u524d\u4f53,precursor,trng", "title": "\u5347\u7ea7\u524d\u4f53\u7684TRNG ", "title_en": "Upgrading Precursor\u2019s TRNG", "transed": 1, "url": "https://www.bunniestudios.com/blog/?p=6094", "via": "", "real_tags": ["\u524d\u4f53", "precursor", "trng"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067148, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters", "note_en": "It was early June in 1987 when Richard Stallman announced the release of the GNU C compiler version 1.0. As I wrote in  Open Sources, it was the most thrilling and most terrifying day of my life (up to that point). Having first read and lightly hacked Emacs code in 1985, having read and lightly hacked GDB code in 1986, I eagerly attended a week-long lecture series on Emacs Stallman gave in Febrary 1987 at MCC in Austin Texas. By day, my appreciation for Stallman and the GNU project grew as I as I began to understand the depth of his technical designs, the beauty of his implementation approaches and the method by which both were protected  for me instead of  from me by the GPL. By night, my curiosity grew as Stallman would steal moments between lectures and especially at the end of the day to hack on a project he was not yet ready to disclose.By the end of the week in February the secret had been revealed to me: he was working on a C compiler and was in the final stages of polishing the optimizer. I was 22 years old at the time, and I still harbored a dream that I might someday write &#34;The Great American Compiler&#34;. I was thrilled to have a chance to see how a master like Stallman would write such a thing, and I was terrified that I would never create something worthy of recognition if he had been there first. When Stallman announced version 1.0, 20 years ago to this day (more or less), I had a decision to make: I could join him, I could compete with him, or I could pick a new dream. I downloaded GCC version 1.0 and began a collaboration that would last for ten years (when, due to RSI, I gave up programming as a mainstream activity.)GCC version 1.0 was a watershed event in my life. The first day I was intent on just learning how it worked--the parser, the lexical analyzer, the intermediate code generator, the optimizers, and the machine-dependent assembly output routines. I printed all the files (consuming three reams of paper) and proceeded to lay them out in piles across my extra-large dining table and any other horizontal surfaces I could see from my central position. I brought out the colored pencils I&#39;d used when learning the art and science of integrated circuit design (red for polycilicon, green for n-diffusion, blue for metal, yellow for n-well, and black for vias and contacts) and gave the colors new meanings to track data, code, and other relationships relevant to compilers. After five days and nights, something &#34;clicked&#34; and I no longer needed the printouts--the data structures and basic organization suddenly became &#34;obvious&#34;. I put away the pencils and began to itch with the desire to hack GCC, and not lightly.I decided to take the next step--to write a completely new port of the compiler to a microprocessor that had always fascinated me: the National Semiconductor 32032. I already had the manual from my days at the Moore School of Engineering at the University of Pennsylvania, and so I began the process of replacing templates used for the VAX and Motorola 68020 processors with templates appropriate for the National chip. I immediately ran into problems--but they were small problems and easily fixed. I had GCC generating code for the National chip within a few days, and I had it generating correct code a few days after that.When I did this work, the typical compiler company charged millions of dollars for the service of delivering a compiler in 12-18 months, and sometimes longer. Two weeks to the day after I downloaded the compiler from the Free Software Foundation, I had it generating code that was 20% faster that the code coming from the National compiler. If I compared the $3000/month salary I earned at the time with what these companies charged, I delivered a product that was 20% better (6-9 months in Moore&#39;s Law time) for 1/1000th the cost in 1/30th the time. It was a heck of a 23rd birthday present to myself!Within hours of posting an announcement of this new port, it became obvious to me and to others that there were many optimizations I had not yet implemented. After another two weeks of work, I was generated code that was 40% faster than the National compiler. 40% was an important number because the 32032 was marketed as a &#34;1 MIPS&#34; chip (meaning able to execute one million instructions per second), but it only benchmarked at 0.75 MIPS and was headed for commercial irrelevancy. With my 32032 port, the chip benchmarked above 1 MIPS, proving to me that the hardware guys had delivered, but the software guys had not. I also realized that even in 1987, there were already sufficiently many people to make a collaborative process very successful.I went on to write many other ports that summer, demonstrating with remarkable consistency that by hacking on GNU, I could routinely generate better product faster than whole teams of compiler-writers employed by much larger companies. By the end of that year I went on to achieve a new goal, which was to write the GNU C++ compiler. To me, GNU C++ was &#34;The Great American C++ Compiler&#34;, a new, improved version of my original goal. And because I benefited so much, both by what others shared with me before I started hacking, and by the helpful suggestions and bugfixes I received after I started hacking, I, too, shared freely the knowledge I had gained. I wrote and delivered the first comprehensive training on the GNU compiler internals, giving my 100+ LaTeX slides to Stallman so he, too, could earn money by teaching others how to hack. Two years later, I formally commercialized the commercial advantages of GNU software, and the rest, as they say, is history.I wonder what the next 20 years will bring...", "posttime": "2021-06-21 14:46:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eca\u5929,years,warning", "title": "\u597d\u5427\uff0c\u5b83\u662f\u4e8c\u5341\u591a\u5e74\u524d\u4eca\u5929\uff082007\u5e74\uff09 ", "title_en": "Well It Was Twenty Years Ago Today (2007)", "transed": 1, "url": "https://opensource.org/node/155", "via": "", "real_tags": ["\u4eca\u5929", "years", "warning"]}, {"category": "", "categoryclass": "", "imagename": "e492a7568242d1ed8f079e2558c390e1.jpg", "infoid": 1067147, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Google Chrome\u4fdd\u7559\u4e86Web\u6d4f\u89c8\u5668\u5e02\u573a\u4efd\u989d\u7684\u94c1\u6293\u5730\u529b\uff0c\u8d85\u8fc720\u4ebf\u7528\u6237\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6240\u6709\u8fd9\u4e9b\u7528\u6237\u90fd\u9700\u8981\u5728\u9ad8\u8b66\u62a5\u4e0a\uff0c\u56e0\u4e3a\u8c37\u6b4c\u521a\u521a\u5728\u4e00\u5468\u5185\u53d1\u51fa\u4e86\u7b2c\u4e8c\u6b21\u7d27\u6025\u5347\u7ea7\u8b66\u544a\u3002\n           \u5728\u5b98\u65b9\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u8c37\u6b4c\u5df2\u786e\u8ba4\u5728\u533f\u540d\u63d0\u793a\u540e\uff0c\u5728Chrome\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u201c\u96f6\u65e5\u201d\u6f0f\u6d1e\u3002\u5728\u4ed6\u4eec\u8fdb\u5165\u91ce\u5916\u4e4b\u524d\u53d1\u73b0\u5e76\u4fee\u8865\u4e86\u5927\u591a\u6570\u5b89\u5168\u7f3a\u9677\uff0c\u4f46\u96f6\u5929\u5206\u7c7b\u662f\u6307\u6f0f\u6d1e\u5df2\u77e5\u9ed1\u5ba2\u5e76\u79ef\u6781\u88ab\u5265\u524a\u3002\n    \u5173\u4e8e\u6f0f\u6d1e\uff08CVE-2021-30554\uff09\u7684\u6f0f\u6d1e\uff0c\u9664\u4e86\u5728WebGL\u4e2d\uff0c\u5448\u73b0\u51fa\u7528\u4e8e\u6e32\u67d3\u7684JavaScript API\u7684\u6f0f\u6d1e\u3002\u5b83\u662f\u8c37\u6b4c\u7684\u6807\u51c6\u505a\u6cd5\uff0c\u4f7f\u96f6\u65e5\u7ec6\u8282\u4fdd\u6301\u6700\u5c0f\uff0c\u4ee5\u4fbf\u66f4\u591a\u5730\u8d2d\u4e70Chrome\u7528\u6237\u66f4\u591a\u65f6\u95f4\u5347\u7ea7\u3002 \u201c\u8c37\u6b4c\u610f\u8bc6\u5230CVE-2021-30554\u7684\u6f0f\u6d1e\u5b58\u5728\u4e8e\u91ce\u5916\uff0c\u201d\u6240\u6709Chrome\u6280\u672f\u65b9\u6848\u7ecf\u7406Sista\u90fd\u8868\u793a\u3002\n    \u8981\u6253\u51fb\u8fd9\u79cd\u5a01\u80c1\uff0cChrome\u7528\u6237\u5e94\u8be5\u7acb\u5373\u8fdb\u5165\u8bbe\u7f6e\uff06gt;\u5e2e\u52a9\uff06gt;\u5173\u4e8eGoogle Chrome\u3002\u5982\u679c\u60a8\u7684Linux\u4e0a\u7684\u6d4f\u89c8\u5668\u7248\u672c\uff0cMacOS\u548cWindows\u4e0a\u5217\u4e3a91.0.4472.114\u6216\u4ee5\u4e0a\u60a8\u662f\u5b89\u5168\u7684\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u624b\u52a8\u68c0\u67e5\u66f4\u65b0\u5e76\u91cd\u65b0\u542f\u52a8\u6d4f\u89c8\u5668\u4e00\u65e6\u66f4\u65b0\u5c31\u7eea\u3002\u8c37\u6b4c\u8fd8\u786e\u8ba4\uff0c\u5728\u6b64\u7248\u672c\u7684Chrome\u4e2d\u4fee\u8865\u4e86\u5176\u4ed6\u4e09\u4e2a\u201c\u9ad8\u201d\u5a01\u80c1\u3002\n    CVE-2021-30554\u662f\u81ea\u5e74\u5e74\u5c4a\u81ea\u5e74\u5c81\u53ca\u4e00\u5468\u4e4b\u4e8c\u7684\u94ec\u4e03\u4e2d\u53d1\u73b0\u7684\u7b2c\u4e03\u5f20\u96f6\u70b9\u8106\u5f31\u6027\u3002\u8c37\u6b4c\u901a\u5e38\u4f1a\u91ca\u653e\u4fee\u590d\u7684\u7cbe\u7ec6\u5de5\u4f5c\uff0c\u4f46\u5b83\u4eec\u7684\u6709\u6548\u6027\u4e5f\u53d6\u51b3\u4e8eChrome\u7528\u6237\u66f4\u65b0\u5176\u6d4f\u89c8\u5668\u7684\u901f\u5ea6\u3002\n    \u76ee\u524d\uff0cChrome\u7528\u6237\u4e5f\u660e\u667a\u5730\u4fdd\u6301\u989d\u5916\u7684\u8b66\u60d5\u3002\u4e0a\u5468\u5411BleepingComputer\u53d1\u8868\u8bb2\u8bdd\uff0c\u8b66\u544aKaspersky\u8b66\u544a\u8bf4\uff0c\u4e00\u7fa4\u65b0\u7684\u9ed1\u5ba2\u79f0\u547c\u81ea\u5df1\u201cPuzzlemaker\u201d\u5728\u94fe\u63a5Chrome\u96f6\u65e5\u9519\u8bef\u4e2d\u90fd\u662f\u6210\u529f\u7684\uff0c\u4ee5\u5728Windows\u7cfb\u7edf\u4e0a\u5b89\u88c5\u6076\u610f\u8f6f\u4ef6\u3002\u4e0a\u5468\uff0c\u5fae\u8f6f\u672c\u8eab\u4e3aWindows\u7528\u6237\u53d1\u51fa\u4e86\u7d27\u6025\u5b89\u5168\u8b66\u544a\u3002\n  \u73b0\u5728\uff0c\u5b83\u4f3c\u4e4e\u662f\u94ec\u9ed1\u5ba2\u7684\u65fa\u5b63\uff0c\u6240\u4ee5\u4fdd\u6301\u8b66\u62a5\u5e76\u786e\u4fdd\u60a8\u7684\u6d4f\u89c8\u5668\u548c\u64cd\u4f5c\u7cfb\u7edf\u5b89\u5168\u6027\u90fd\u4fdd\u6301\u6700\u65b0\u3002 ", "note_en": "Google Chrome retains an iron grip on  web browser market share with well over two billion users. Unfortunately, all those users need to be on high alert because Google has just issued its second urgent upgrade warning in a week.\n           In an  official blog post, Google has confirmed that a new \u2018zero-day\u2019 exploit has been found in Chrome after an anonymous tip-off. Most security flaws are discovered and patched before they get out into the wild, but a zero-day classification means the vulnerability is known to hackers and actively being exploited.\n    Little is known about the vulnerability (CVE-2021-30554) other than it being found in  WebGL, a JavaScript API for rendering. It is standard practice for Google to keep zero-day details to a minimum to buy Chrome users more time to upgrade. \u201cGoogle is aware that an exploit for CVE-2021-30554 exists in the wild,\u201d is all Chrome technical program manager Srinivas Sista  has said.\n    To combat this threat, Chrome users should immediately go to  Settings &gt; Help &gt; About Google Chrome. If your browser version on Linux, macOS and Windows is listed as 91.0.4472.114 or above you are safe. If not, manually check for updates and restart the browser once the update is ready. Google also confirmed that three other \u2018High\u2019 level threats are patched in this version of Chrome.\n    CVE-2021-30554 is the seventh zero-day vulnerability found in Chrome since the turn of the year and the second in a week. Google typically does a fine job releasing fixes quickly but their effectiveness is also determined by the speed with which Chrome users update their browsers.\n    Chrome users would also be wise to be extra vigilant at this time. Speaking to  BleepingComputer last week, security vendor Kaspersky warned that a new group of hackers calling themselves \u2018PuzzleMaker\u2019 have been successful in chaining together Chrome zero-day bugs to install malware on Windows systems. Microsoft itself issued  an urgent security warning for Windows users about this last week.\n  Right now, it appears to be high season for Chrome hackers so stay alert and make sure both your browser and operating system security are kept up to date.", "posttime": "2021-06-21 14:46:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "chrome,google,issues", "title": "Google\u53d1\u51fa2b Chrome\u7528\u6237\u7684\u8b66\u544a ", "title_en": "Google Issues Warning for 2B Chrome Users", "transed": 1, "url": "https://www.forbes.com/sites/gordonkelly/2021/06/19/google-chrome-warning-zero-day-security-exploit-free-upgrade-chrome-users/", "via": "", "real_tags": ["chrome", "google", "issues"]}]