[{"category": "", "categoryclass": "", "imagename": "abeab896cb32c8447d87ff09ab7f7ab8.jpeg", "infoid": 1071259, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u4e0d\u77e5\u540d\u7684\u7537\u4eba\uff0c\u975e\u5e38\u4f4e\u8c03\u3002\u6211\u78b0\u5de7\u9047\u5230\u4ed6\u5e76\u5f00\u59cb\u4ea4\u8c08\uff0c\u8fd9\u5bfc\u81f4\u4e86\u5348\u9910\u65f6\u7684\u53e6\u4e00\u6b21\u4ea4\u8c08\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u6709\u673a\u98df\u54c1\u5e02\u573a\u5750\u4e0b\u6765\u5403\u5348\u996d\uff0c\u4ed6\u5f00\u59cb\u544a\u8bc9\u6211\u4ed6\u7684\u6545\u4e8b\u3002 ISO 9000 \u662f\u5168\u7403\u91c7\u7528\u7684\u8d28\u91cf\u4e1a\u52a1\u7ba1\u7406\u6807\u51c6\uff0c\u88ab\u62e5\u6709\u5168\u7403\u652f\u6301\u4e1a\u52a1\u7684\u5927\u578b\u54c1\u724c\u4f7f\u7528\u3002\u5b83\u5b58\u5728\u7684\u539f\u56e0\u662f\u5229\u76ca\u76f8\u5173\u8005\u53ef\u4ee5\u653e\u5fc3\u5730\u76f8\u4fe1\u4f4d\u4e8e\u53e6\u4e00\u4e2a\u56fd\u5bb6\u7684\u5236\u9020\u5de5\u5382\u5c06\u5b8c\u5168\u6309\u7167\u5408\u540c\u89c4\u5b9a\u751f\u4ea7\uff0c\u800c\u65e0\u9700\u524d\u5f80\u8be5\u5de5\u5382\u8fdb\u884c\u5927\u89c4\u6a21\u68c0\u67e5\u3002\u5982\u679c\u5de5\u5382\u901a\u8fc7\u4e86 ISO 9000 \u6216 ISO 9001 \u8ba4\u8bc1\uff0c\u90a3\u4e48\u4ed6\u4eec\u77e5\u9053\u5b83\u5c06\u6309\u7167\u6807\u51c6\u8fd0\u884c\u3002 ISO 9000 \u57fa\u4e8e 7 \u9879\u8d28\u91cf\u7ba1\u7406\u539f\u5219\u3002\u8ffd\u968f\u8005\u5305\u62ec\u6c7d\u8f66\u3001\u5316\u5de5\u548c\u822a\u7a7a\u822a\u5929\u5236\u9020\u884c\u4e1a\u7684\u516c\u53f8\uff0c\u5982\u901a\u7528\u6c7d\u8f66\u3001\u514b\u83b1\u65af\u52d2\u3001\u6ce2\u97f3\u3001\u901a\u7528\u7535\u6c14\u3001\u8bfa\u65af\u7f57\u666e\u683c\u9c81\u66fc\u516c\u53f8\u3001\u963f\u91cc\u5df4\u5df4\u548c\u4f0a\u58eb\u66fc\u5316\u5b66\u516c\u53f8\u3002\u8fd9\u4e2a\u4eba\u544a\u8bc9\u6211\uff0c\u4ed6\u5c06\u4ed6\u5728 ISO 9000 \u4e2d\u5e2e\u52a9\u5efa\u7acb\u7684\u8d28\u91cf\u7ba1\u7406\u539f\u5219\u5e94\u7528\u4e8e\u4ed6\u4eca\u5929\u7ecf\u8425\u7684\u5341\u4e2a\u72ec\u7acb\u4f01\u4e1a\u3002\u4ed6\u7684\u4e1a\u52a1\u5305\u62ec\u6ed1\u677f\u548c BMX \u5546\u5e97\u3001\u5f53\u94fa\u7f51\u7edc\u3001\u54a8\u8be2\u4e1a\u52a1\u3001\u4e50\u5668\u5546\u5e97\u3001\u4e92\u8054\u7f51\u9500\u552e\u4e1a\u52a1\u3001\u623f\u5730\u4ea7\u5f00\u53d1\u548c\u7ba1\u7406\u516c\u53f8\u3001\u67aa\u652f\u5546\u5e97\u3001\u6d77\u6d0b\u4ea7\u54c1\u5728\u7ebf\u5546\u5e97\u3001\u7ad9\u7acb\u5f0f\u6868\u677f\u5546\u5e97\uff0c\u548c\u4e00\u4e2a\u89c6\u89c9\u663e\u793a\u5546\u5e97\u3002\u4f60\u4f1a\u8ba4\u4e3a\u8fd9\u5341\u5bb6\u516c\u53f8\u4f1a\u4e3b\u5bb0\u4ed6\u7684\u65f6\u4ee3\u3002\u4e0d\u662f\u8fd9\u6837\u3002\u4ed6\u82b1\u65f6\u95f4\u4e0e\u59bb\u5b50\u548c\u5bb6\u4eba\u4e58\u5750\u4ed6\u7684\u4e00\u8258\u5e06\u8239\u201cZephyr\u201d\u6216\u201cWhispering Eye\u201d\u73af\u6e38\u4e16\u754c\u3002\u8fd9\u662f\u4ed6\u544a\u8bc9\u6211\u7684\u5173\u4e8e\u751f\u6d3b\u548c\u5546\u4e1a\u7684\u5185\u5bb9\u3002\u7528\u5f15\u53f7\u5c06\u4e0b\u9762\u7684\u6240\u6709\u5185\u5bb9\u53ef\u89c6\u5316\u3002\n\u5982\u679c\u4f60\u53ea\u770b\u6211\u62e5\u6709\u7684\u5341\u5bb6\u4f01\u4e1a\u4e4b\u4e00\uff0c\u90a3\u5c31\u4e0d\u4f1a\u90a3\u4e48\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u4e86\u3002\u5b83\u5c06\u4e3a\u4e00\u4e2a\u5c0f\u5bb6\u5ead\u63d0\u4f9b\u7b80\u5355\u3001\u4f53\u9762\u7684\u751f\u6d3b\uff0c\u4ec5\u6b64\u800c\u5df2\u3002\u8fd9\u662f\u4e00\u9879\u4e0d\u8d77\u773c\u4f46\u7a33\u5b9a\u3001\u89c4\u6a21\u5c0f\u3001\u91cd\u70b9\u7a81\u51fa\u3001\u76c8\u5229\u7684\u4e1a\u52a1\u3002\u5c31\u5176\u672c\u8eab\u800c\u8a00\uff0c\u5b83\u662f\u57fa\u672c\u800c\u666e\u901a\u7684\u3002\u4f60\u4eec\u8fd9\u4e9b\u5e74\u8f7b\u7684\u3001\u75af\u72c2\u7684\u521b\u4e1a\u8005\u4eec\u60f3\u8981\u4e00\u4e9b\u5982\u6b64\u5f15\u4eba\u6ce8\u76ee\u548c\u7acb\u5373\u75c5\u6bd2\u5316\u7684\u4e1c\u897f\u3002\u6211\u7684\u4e1a\u52a1\u4e0d\u662f\u75c5\u6bd2\u5f0f\u4f20\u64ad\uff0c\u4f46\u5b83\u4eec\u901a\u8fc7\u4e00\u904d\u53c8\u4e00\u904d\u5730\u63d0\u4f9b\u4f18\u8d28\u89e3\u51b3\u65b9\u6848\u6765\u5e2e\u52a9\u7279\u5b9a\u7c7b\u578b\u7684\u4eba\u3002\u5c06\u4e00\u4e2a\u5c0f\u578b\u3001\u53e4\u6734\u4e14\u6709\u5229\u53ef\u56fe\u7684\u4e1a\u52a1\u4e58\u4ee5 10\uff0c\u60a8\u5c31\u62e5\u6709\u4e86\u4e00\u4e2a\u591a\u5143\u5316\u7684\u3001\u4ef7\u503c\u6570\u767e\u4e07\u7f8e\u5143\u7684\u6295\u8d44\u7ec4\u5408\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u63d0\u4f9b\u5e2e\u52a9\uff0c\u8bf7\u4e0d\u8981\u4e0e\u4efb\u4f55\u4eba\u5408\u4f5c\u3002\u60a8\u62e5\u6709\u7684\u5408\u4f5c\u4f19\u4f34\u8d8a\u591a\uff0c\u60a8\u5c31\u8d8a\u9700\u8981\u5206\u5f97\u4e00\u676f\u7fb9\u3002\u60a8\u62e5\u6709\u7684\u5408\u4f5c\u4f19\u4f34\u8d8a\u591a\uff0c\u60a8\u5c31\u8d8a\u9700\u8981\u4e3a\u81ea\u5df1\u7684\u89c2\u70b9\u800c\u594b\u6597\u3002\u60a8\u62e5\u6709\u7684\u5408\u4f5c\u4f19\u4f34\u8d8a\u591a\uff0c\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u6240\u9700\u7684\u65f6\u95f4\u5c31\u8d8a\u591a\u3002\u8054\u5408\u521b\u59cb\u4eba\u88ab\u9ad8\u4f30\u4e86\u3002\u6211\u4eec\u5728\u4e00\u4e2a\u5c0f\u5e02\u573a\u3002\u6211\u4eec\u4e0d\u5728\u65e7\u91d1\u5c71\u3001\u5df4\u9ece\u6216\u7ebd\u7ea6\u3002\u6211\u5df2\u7ecf\u770b\u5230\u8f83\u5c0f\u7684\u5e02\u573a\u6bd4\u8f83\u5927\u7684\u5e02\u573a\u843d\u540e\u4e24\u5230\u4e09\u5e74\uff1b\u5728\u5927\u57ce\u5e02\u9500\u552e\u7684\u4e1c\u897f\uff0c\u4e0d\u4f1a\u540c\u65f6\u5728\u6211\u4eec\u7684\u57ce\u5e02\u9500\u552e\u3002\u4f46\u662f\u7ed9\u5b83\u4e24\u5230\u4e09\u5e74\u7684\u65f6\u95f4\uff0c\u5b83\u5c31\u4f1a\u50cf\u70ed\u86cb\u7cd5\u4e00\u6837\u7545\u9500\u3002\u627e\u51fa\u8fd9\u662f\u4ec0\u4e48\uff0c\u5e76\u6210\u4e3a\u7b2c\u4e00\u4e2a\u5728\u60a8\u7684\u5c0f\u5e02\u573a\u5f00\u5e97\u7684\u4eba\u3002\u6211\u7684\u5458\u5de5\u53ef\u4ee5\u5728\u4e1a\u52a1\u7ebf\u4e4b\u95f4\u8f6c\u79fb\u3002\u6bcf\u4e2a\u5458\u5de5\u90fd\u662f\u591a\u6280\u80fd\u7684\u3002\u67dc\u53f0\u540e\u9762\u7684\u5973\u5b69\u6b63\u5728\u5ba2\u6237\u7ed3\u8d26\u4e4b\u95f4\u8fdb\u884c\u5728\u7ebf\u793e\u4ea4\u5a92\u4f53\u8425\u9500\u3002\n\u6bcf\u5bb6\u4f01\u4e1a\u90fd\u6709\u4e00\u540d\u6301\u6709\u94f6\u884c\u5361\u7684\u7ecf\u7406\u3002\u6bcf\u4f4d\u7ecf\u7406\u90fd\u63a5\u53d7\u4e86 ISO 9000 \u76f8\u540c\u539f\u5219\u7684\u57f9\u8bad\uff0c\u5e76\u5b8c\u5168\u63a7\u5236\u4e86\u4ed6\u4eec\u7684\u4e1a\u52a1\u3002\u901a\u8fc7\u4e25\u683c\u7684\u6fc0\u52b1\u8ba1\u5212\uff0c\u6211\u786e\u4fdd\u5982\u679c\u4f01\u4e1a\u505a\u5f97\u597d\uff0c\u4ed6\u4eec\u5c31\u4f1a\u505a\u5f97\u597d\u3002\u5982\u679c\u4ed6\u4eec\u60f3\u8ba2\u8d2d\u6700\u70ed\u95e8\u7684\u65b0\u4ea7\u54c1\u5728\u4ed6\u4eec\u7684\u5e97\u91cc\u9500\u552e\uff0c\u4ed6\u4eec\u5fc5\u987b\u5356\u51fa\u8db3\u591f\u7684\u94b1\u6765\u586b\u6ee1\u94f6\u884c\u8d26\u6237\uff0c\u8d2d\u4e70\u5e93\u5b58\u3002\u6211\u5bfb\u627e\u72ec\u7acb\u548c\u8d1f\u8d23\u7684\u4eba\uff0c\u4ed6\u4eec\u5b8c\u5168\u62e5\u6709\u81ea\u5df1\u7684\u4e1a\u52a1\u3002\u8fd9\u4f7f\u6211\u80fd\u591f\u4ee5\u81ea\u5df1\u7684\u65b9\u5f0f\u65c5\u884c\uff0c\u56e0\u4e3a\u6211\u77e5\u9053\u6211\u7684\u5458\u5de5\u6b63\u5728\u4e3a\u81ea\u5df1\u52aa\u529b\u5de5\u4f5c\u3002\u54e6\uff0c\u6211\u4eec\u7ecf\u5e38\u5f00\u6d3e\u5bf9\u3002\u6211\u4eec\u968f\u4fbf\u5206\u4eab\u4e86\u4e00\u4e9b\u5173\u4e8e\u54ea\u4e9b\u8425\u9500\u7b56\u7565\u5728\u4e00\u4e2a\u4f01\u4e1a\u4e2d\u6709\u6548\u800c\u5728\u53e6\u4e00\u4e2a\u4f01\u4e1a\u4e2d\u6709\u6548\u7684\u60f3\u6cd5\uff0c\u6211\u4eec\u6709\u7ee9\u6548\u5956\uff0c\u6211\u4eec\u4e00\u8d77\u505a\u6709\u8da3\u7684\u4e8b\u60c5\u3002\u8fd9\u662f\u6211\u6240\u6709\u516c\u53f8\u7684\u4f7f\u547d\u5ba3\u8a00\uff0c\u975e\u5e38\u7b80\u5355\uff1a\u5728\u5546\u4e1a\u4e0a\u53d6\u5f97\u6210\u529f\u5e76\u4e0d\u610f\u5473\u7740\u6539\u53d8\u4e16\u754c\u3002\u8fd9\u610f\u5473\u7740\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u826f\u597d\u4e14\u53ef\u9760\u5730\u6ee1\u8db3\u9700\u6c42\uff08\u65e0\u8bba\u5927\u5c0f\uff09\u3002\u5356\u4e1c\u897f\u3002\u5982\u679c\u662f\u4ea7\u54c1\uff0c\u8bf7\u786e\u4fdd\u5176\u8d28\u91cf\uff0c\u7136\u540e\u4ee5\u5408\u7406\u7684\u4ef7\u683c\u51fa\u552e\uff0c\u5e76\u786e\u4fdd\u76c8\u4e8f\u5e73\u8861\u70b9\u5bf9\u60a8\u4f5c\u4e3a\u4f01\u4e1a\u4e3b\u6765\u8bf4\u662f\u53ef\u884c\u7684\u3002\u5982\u679c\u5b83\u662f\u4e00\u9879\u670d\u52a1\uff0c\u8bf7\u786e\u4fdd\u6709\u9644\u52a0\u503c\uff0c\u56e0\u4e3a\u60a8\u5728\u81ea\u5df1\u7684\u9886\u57df\u975e\u5e38\u51fa\u8272\u4e14\u77e5\u8bc6\u6e0a\u535a\uff0c\u5e76\u4e14\u6240\u63d0\u4f9b\u7684\u670d\u52a1\u662f\u72ec\u4e00\u65e0\u4e8c\u7684\uff0c\u81f3\u5c11\u5728\u60a8\u6240\u5728\u7684\u5e02\u573a\u4e2d\u662f\u8fd9\u6837\u3002\u5f53\u4ed6\u548c\u6211\u8bf4\u8bdd\u65f6\uff0c\u6211\u5c3d\u91cf\u4fdd\u6301\u76ee\u5149\u63a5\u89e6\uff0c\u540c\u65f6\u5728 Evernote \u7b14\u8bb0\u4e2d\u75af\u72c2\u5730\u7ffb\u9605\u5355\u8bcd\u3002\u6211\u4eec\u5403\u5b8c\u5348\u996d\uff0c\u8bf4\u518d\u89c1\u3002\u8c22\u5929\u8c22\u5730\uff0c\u6211\u4fdd\u7559\u4e86\u90a3\u5f20\u7eb8\u6761\uff0c\u5e76\u60f3\u4e0e\u60a8\u5206\u4eab\u3002\n\u4e5f\u8bb8\uff0c\u6709\u4e00\u5929\u6211\u4f1a\u548c\u5bb6\u4eba\u4e00\u8d77\u4e58\u5750\u4e00\u8258\u5e06\u8239\u73af\u6e38\u4e16\u754c\uff0c\u540c\u65f6\u7ecf\u8425 10 \u5bb6\u4f01\u4e1a\u2026\u2026\u4f46\u5728\u90a3\u4e4b\u524d\uff0c\u6211\u4f1a\u7ee7\u7eed\u5199\u90a3\u4e9b\u505a\u8fd9\u884c\u7684\u4eba\u3002\u7ecf\u5178\u63d2\u4ef6\uff1a\u5982\u679c\u60a8\u8ba4\u4e3a\u8fd9\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u8bf7\u5728\u4e0b\u65b9\u63a8\u8350\uff0c\u6216\u5199\u56de\u590d\u3002", "note_en": "This man, who shall remain nameless, keeps a very low profile. I happen to run into him and strike up a conversation, which led to another conversation over lunch.\n We sat down at an organic food market for lunch and he began to tell me his story.\n   The ISO 9000 is a globally-adopted, quality business management standard used by huge brands with support businesses located internationally. The reason why it exists is so stakeholders can believe with confidence that a manufacturing plant located in another country will produce exactly what the contract says, without having to travel to that plant to conduct a huge inspection. If the plant is ISO 9000- or ISO 9001-certified, then they know it will perform to standard.\n The ISO 9000 is based on  7 quality management principles. Adherers include companies in the automotive, chemical, and aerospace manufacturing industries such as GM, Chrysler, Boeing, General Electric, Northrop Grumman, Alibaba, and Eastman Chemical Company.\n This man told me that he applied the quality management principles he helped establish in the ISO 9000 to the ten separate businesses he operates today. His businesses include a skateboard and BMX shop, a network of pawnshops, a consulting practice, a musical instruments shop, an Internet sales business, a real estate development and management firm, a firearms shop, a marine products online store, a standup paddleboards shop, and a visual displays store.\n You would think these ten companies would dominate his time. Not so. He spends his time sailing around the world with his wife and family in one of his sailboats, the \u201cZephyr\u201d or the \u201cWhispering Eye.\u201d\n Here\u2019s what he told me about life and business. Visualize everything below in quotes.\n  If you were to look at just one of the ten businesses I have, it would not be that impressive. It would provide for a simple, decent living for a small family, not much more than that. It\u2019s an unglamorous yet stable, small and focused, profitable operation.\n By itself, it\u2019s basic and ordinary. You young, startup-crazy whippersnappers want something so high-profile and instantly viral. My businesses aren\u2019t viral, but they help a specific type of person by providing a quality solution, over and over again.\n Multiply a small, quaint, and profitable business by ten and you\u2019ve got a diversified, multi-million dollar portfolio.\n  If you can help it, do not partner with anyone. The more partners you have, the more you have to split the pie. The more partners you have, the more you have to fight for your point of view. The more partners you have, the more time it will take to execute anything. Co-founding is overrated.\n   We are in a small market. We are not in San Francisco, Paris, or New York. I\u2019ve seen that smaller markets are two to three years behind the larger markets; whatever is selling in the big cities, will not be selling in ours at the same time. But give it two to three years and it will be selling like hotcakes.\n Find out what this is, and be the first to open a shop in your small market.\n  My employees are transferable between business lines. Each employee is multi-skilled. The girl behind the counter is doing social media marketing online in between customers checking out.\n Each business has a manager with a bank card. Each manager is trained in the same principles of the ISO 9000 and is given full control of their business. Through a tight incentive plan, I make sure that if the business does well, they do well. If they want to order the hottest, new products to sell in their shop, they have to sell enough to fill up the bank account, to purchase the inventory.\n I look for people who are independent and responsible, who take complete ownership of their business. This allows me to travel the way I do, because I know my employees are working hard for themselves.\n Oh, and we have parties OFTEN. We casually share ideas about what marketing tactics are working in one business that may work in another, we have performance awards, and we do fun things together.\n  Here is the mission statement for all of my companies, it\u2019s very simple:\n  To be successful in business does not mean changing the world. It means meeting a need (regardless of size) well and dependably over time.\n Sell something. If it\u2019s a product, make sure its quality, then sell it at a fair price, and make sure the breakeven point is doable for you as the business owner. If it\u2019s a service, make sure there is added value, as in you are very good and knowledgeable in your field, and the service provided is unique, at least in your market.\n  As he was speaking to me, I tried my best to maintain eye contact while thumbing words furiously into an Evernote note. We finished lunch and said our goodbyes. Thankfully, I\u2019ve kept that note and I wanted to share it with you.\n Perhaps, one day I\u2019ll be sailing across the world in one of my sailboats with my family while running ten businesses\u2026 but until then, I\u2019ll keep writing about the people who do.\n Classic plug: if you thought this was helpful, please recommend it below, or write a response.", "posttime": "2021-08-03 03:01:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f01\u4e1a\u5bb6,entrepreneurs,\u4e1a\u52a1", "title": "\u767e\u4e07\u5bcc\u7fc1\u7ed9\u4f01\u4e1a\u5bb6\u7684\u5efa\u8bae", "title_en": "Advice to Entrepreneurs from a Millionaire", "transed": 1, "url": "https://entrepreneurshandbook.co/i-sat-down-with-a-millionaire-who-operates-10-businesses-while-sailing-around-the-world-with-his-338929c4e8c9", "via": "", "real_tags": ["\u4f01\u4e1a\u5bb6", "\u4e1a\u52a1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071258, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a \u8df3\u8f6c\u5230\u641c\u7d22 \u5386\u53f2\u8bed\u8a00\u5b66\u4e2d\u7684\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u5176\u4e2d\u4e00\u4e2a\u6700\u521d\u6e90\u81ea\u4e00\u4e2a\u6765\u6e90\u7684\u8bcd\u88ab\u5206\u89e3\u6216\u62ec\u5728\u4e00\u7ec4\u4e0d\u540c\u7684\u56e0\u7d20\u4e2d\u4e00\u4e2a\u6765\u6e90\u88ab\u5206\u89e3\u6216\u5f52\u5165\u4e00\u7ec4\u4e0d\u540c\u7684\u56e0\u7d20\u3002\u5b83\u901a\u5e38\u662f\u6c11\u95f4\u8bcd\u6e90\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u5176\u4e2d\u65b0\u7684\u56e0\u7d20\u53ef\u80fd\u663e\u5f97\u6709\u610f\u4e49\uff08\u4f8b\u5982\uff0chamburger \u610f\u4e3a\u5e26\u6709\u706b\u817f\u7684\u6c49\u5821\uff09\uff0c\u6216\u8005\u4f3c\u4e4e\u662f\u6709\u6548\u5f62\u6001\u8fc7\u7a0b\u7684\u7ed3\u679c\u3002\u91cd\u65b0\u62ec\u53f7\u901a\u5e38\u4fa7\u91cd\u4e8e\u9ad8\u5ea6\u53ef\u80fd\u7684\u5355\u8bcd\u8fb9\u754c\uff1a\u201ca noodle\u201d\u53ef\u80fd\u4f1a\u53d8\u6210\u201can oodle\u201d\uff0c\u56e0\u4e3a\u201can oodle\u201d\u5728\u8bed\u6cd5\u4e0a\u542c\u8d77\u6765\u4e0e\u201ca noodle\u201d\u4e00\u6837\u6b63\u786e\uff0c\u540c\u6837\u201can eagle\u201d\u53ef\u80fd\u4f1a\u53d8\u6210\u201ca n\u200b\u200beagle\u201d\uff0c\u4f46\u662f\u201c\u7897\u201d\u4e0d\u4f1a\u53d8\u6210\u201c\u7897\u201d\uff0c\u201c\u98ce\u7b5d\u201d\u4e0d\u4f1a\u53d8\u6210\u201cak ite\u201d\u3002\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u62ec\u53f7\u662f\u5c06\u8bdd\u8bed\u5206\u89e3\u4e3a\u5176\u7ec4\u6210\u90e8\u5206\u7684\u8fc7\u7a0b\u3002\u8be5\u672f\u8bed\u7c7b\u4f3c\u4e8e\u89e3\u6790\u8f83\u5927\u7684\u53e5\u5b50\uff0c\u4f46\u5b83\u901a\u5e38\u4ec5\u9650\u4e8e\u4e9a\u8bcd\u6c47\u7ea7\u522b\u7684\u5f62\u6001\u8fc7\u7a0b\uff0c\u5373\u5728\u7279\u5b9a\u5355\u8bcd\u6216\u8bcd\u7d20\u5185\u3002\u4f8b\u5982\uff0c\u901a\u5e38\u7528 [un+[event+ful]] \u62ec\u8d77\u6765\uff0c\u800c\u7528\u62ec\u8d77\u6765\u7684 [[un+event]+ful] \u4f1a\u5bfc\u81f4\u5b8c\u5168\u4e0d\u540c\u7684\u8bed\u4e49\u3002\u91cd\u65b0\u62ec\u53f7\u662f\u5c06\u540c\u4e00\u4e2a\u8bcd\u89c6\u4e3a\u4e0d\u540c\u5f62\u6001\u5206\u89e3\u7684\u8fc7\u7a0b\uff0c\u5c24\u5176\u662f\u5728\u65b0\u8bcd\u6e90\u6210\u4e3a\u5e38\u89c4\u89c4\u8303\u7684\u60c5\u51b5\u4e0b\u3002\u540d\u79f0\u9519\u8bef\u62c6\u5206\uff0c\u4e5f\u79f0\u4e3a\u8bef\u5206\uff0c\u901a\u5e38\u7528\u4e8e\u4e24\u4e2a\u8bcd\u6df7\u5408\u4f46\u4ecd\u4fdd\u7559\u4e24\u4e2a\u8bcd\u7684\u60c5\u51b5\uff08\u5982\u4e0a\u9762\u7684\u201c\u9762\u6761\u201d\u548c\u201c\u9e70\u201d\u793a\u4f8b\uff09\u3002\u540d\u79f0 juncture loss \u53ef\u4ee5\u4e13\u95e8\u7528\u4e8e\u6307\u4ee3\u7269\u54c1\u548c\u540d\u8bcd\u878d\u5408\u7684\u60c5\u51b5\uff08\u4f8b\u5982\uff0c\u5982\u679c\u201cthe jar\u201d\u53d8\u6210\u201c(the) thejar\u201d\u6216\u201can apple\u201d\u53d8\u6210\u201c(an) anapple \u201d\uff09\u3002\u5728\u5916\u6765\u8bcd\u548c\u5916\u6765\u77ed\u8bed\u7684\u60c5\u51b5\u4e0b\uff0c\u5931\u53bb\u63a5\u5408\u70b9\u5c24\u5176\u5e38\u89c1\uff0c\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u63a5\u6536\u8005\u8bed\u8a00\u7684\u4f7f\u7528\u8005\u5728\u8be5\u8bcd\u7684\u4ecb\u7ecd\u65f6\u6ca1\u6709\u610f\u8bc6\u5230\u6587\u7ae0\u5df2\u7ecf\u5b58\u5728\uff08\u4f8b\u5982\uff0c\u8bb8\u591a\u4ee5\u201cal-\u201d\u5f00\u5934\u7684\u963f\u62c9\u4f2f\u8bed\u884d\u751f\u8bcd\uff08\u201c &#39;\uff09\uff0c\u5305\u62ec\u201c\u7b97\u6cd5\u201d\u3001\u201c\u9152\u7cbe\u201d\u3001\u201c\u70bc\u91d1\u672f\u201d\u7b49\uff09\u3002\u7279\u522b\u662f\u5728\u8d37\u6b3e\u671f\u9650\u7684\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u662f\u666e\u904d\u5b58\u5728\u7684\u5173\u53e3\u635f\u5931\u4e5f\u53ef\u80fd\u88ab\u786e\u8ba4\u4e3a\u4e0d\u5408\u683c\uff1b\u4f8b\u5982\uff0c\u201cthe hoi polloi\u201d\uff0c\u5176\u4e2d\u5e0c\u814a\u8bed hoi = \u201cthe\u201d\uff0c\u4ee5\u53ca\u201cthe Magna Carta\u201d\uff0c\u5176\u4e2d\u4e0d\u9700\u8981\u51a0\u8bcd\uff0c\u56e0\u4e3a magna carta \u662f\u501f\u7528\u800c\u4e0d\u662f calqued\uff08\u62c9\u4e01\u8bed\u4e2d\u51a0\u8bcd\u7684\u7f3a\u5931\u4f7f\u5f97\u539f\u59cb\u672f\u8bed\u542b\u84c4\u5730\u786e\u5b9a\u6216\u4e0d\u786e\u5b9a\u5173\u4e8e\u786e\u5b9a\u6027[\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u524d\u8005]\uff0c\u5e76\u4e14\u82f1\u8bed\u77ed\u8bed\u7684\u4e13\u6709\u540d\u8bcd\u5730\u4f4d\u4f7f\u5f97\u901a\u8fc7\u4f7f\u7528\u51a0\u8bcd\u8fdb\u4e00\u6b65\u786e\u5b9a\u662f\u4e0d\u5fc5\u8981\u7684\uff09\u3002\u4f5c\u4e3a\u4e00\u79cd\u8bed\u8a00\u5728\u4efb\u4f55\u4e16\u7eaa\u5185\u7684\u7edf\u8ba1\u53d8\u5316\uff0c\u91cd\u65b0\u62ec\u8d77\u6765\u662f\u4e00\u79cd\u975e\u5e38\u5f31\u7684\u7edf\u8ba1\u73b0\u8c61\u3002\u5373\u4f7f\u5728\u8bed\u97f3\u6a21\u677f\u8f6c\u6362\u671f\u95f4\uff0c\u5728\u4efb\u4f55\u7ed9\u5b9a\u7684\u4e16\u7eaa\u4e2d\u6700\u591a\u4e5f\u53ea\u6709 0.1% \u7684\u8bcd\u6c47\u53ef\u80fd\u4f1a\u88ab\u91cd\u65b0\u62ec\u8d77\u6765\u3002\u91cd\u65b0\u62ec\u53f7\u662f\u8bed\u8a00\u53d8\u5316\u8fc7\u7a0b\u7684\u4e00\u90e8\u5206\uff0c\u901a\u5e38\u4e0e\u4fc3\u8fdb\u65b0\u8bcd\u6e90\u7684\u58f0\u97f3\u53d8\u5316\u4e00\u8d77\u8fd0\u4f5c\u3002\n\u91cd\u65b0\u7f16\u6392\u6709\u65f6\u7528\u4e8e\u5f00\u73a9\u7b11\u7684\u76ee\u7684\uff0c\u4f8b\u5982\uff0c\u5fc3\u7406\u6cbb\u7597\u5e08\u53ef\u4ee5\u88ab\u5f00\u73a9\u7b11\u5730\u91cd\u65b0\u7f16\u4e3a\u5f3a\u5978\u72af Psycho\uff0c\u5e76\u4e14\u4e00\u8d77\u9677\u5165\u56f0\u5883\u53ef\u4ee5\u88ab\u5f00\u73a9\u7b11\u5730\u91cd\u65b0\u7f16\u6210\u8ba9\u5979\u9677\u5165\u9ebb\u70e6\u3002 [1] \u5728\u73b0\u4ee3\u82f1\u8bed\u8bed\u8a00\u6807\u51c6\u5316\u7a0b\u5ea6\u63d0\u9ad8\u4e4b\u524d\uff0c\u8bb8\u591a\u65b0\u8bcd\u5b8c\u5168\u6309\u7167\u521a\u624d\u63cf\u8ff0\u7684\u65b9\u5f0f\u8fdb\u5165\u5176\u8bcd\u5178\u3002\u4e00\u4f4d 15 \u4e16\u7eaa\u7684\u82f1\u56fd\u53a8\u5e08\u53ef\u80fd\u66fe\u7ecf\u8bf4\u8fc7\u8fd9\u6837\u7684\u8bdd\uff1a\u201c\u554a\uff0c\u6211\u5728\u70e4\u9ebb\u997c\u65f6\u5728\u6211\u7684\u9910\u5dfe\u7eb8\u91cc\u53d1\u73b0\u4e86\u8fd9\u4e2a ewt \u548c\u8fd9\u4e2a nadder\u3002\u201d\u51e0\u4ee3\u4e4b\u540e\uff0c\u53a8\u5e08\u7684\u540e\u4ee3\u4f1a\u8bf4\uff1a\u201c\u554a\uff0c\u6211\u5728\u70e4 (h)umble-pie \u65f6\u5728\u6211\u7684\u56f4\u88d9\u91cc\u53d1\u73b0\u4e86\u8fd9\u53ea\u877e\u8788\u548c\u8fd9\u53ea\u877e\u8788\u3002\u201d\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u4e9b\u8bcd\u88ab\u8bef\u542c\u5e76\u91cd\u65b0\u5212\u5206\uff1aewt\u53d8\u6210\u4e86newt\uff0cnadder\u53d8\u6210\u4e86adder\uff0cnapron\u53d8\u6210\u4e86\u56f4\u88d9\uff0cnumble-pie\u53d8\u6210\u4e86(h)umble pie\u3002\u8fd9\u4e9b\u7279\u5b9a\u91cd\u65b0\u5206\u5272\u80cc\u540e\u7684\u529b\u91cf\uff0c\u4ee5\u53ca\u8fc4\u4eca\u4e3a\u6b62\u5728\u82f1\u8bed\u4e2d\u4efb\u4f55\u6b64\u7c7b\u91cd\u65b0\u5206\u5272\u80cc\u540e\u6700\u5f3a\u5927\u7684\u529b\u91cf\uff0c\u662f\u4e0d\u5b9a\u51a0\u8bcd a(n)\u3001\u6240\u6709\u683c\u4ee3\u8bcd my(n) \u548c thy( n)\uff0c\u4ee5\u53ca\u65e7\u7684\u5b9a\u51a0\u8bcd the(n) \u7684\u4e0e\u683c\u3002\u53cc\u5f62\u5f0f no/none\u3001\u4ecb\u8bcd in \u548c on\u3001\u6761\u4ef6\u8fde\u8bcd an &#39;even&#39;\u3001\u7f29\u5199\u5f62\u5f0f &#39;n &#39;and&#39; \u548c -n \u4e2d\u7684\u5c48\u6298\u7ed3\u5c3e\u4e5f\u53ef\u80fd\u8d77\u4f5c\u7528\u3002\u901a\u8fc7\u5047\u4f53\u7684\u8fc7\u7a0b\uff0c\u5c06\u8bcd\u5c3e\u7684\u58f0\u97f3\u8f6c\u79fb\u5230\u4e0b\u4e00\u4e2a\u8bcd\u7684\u5f00\u5934\uff0c\u6216\u8005\u53cd\u8fc7\u6765\u8bf4\uff0c\u5c06\u8bcd\u9996\u7684\u58f0\u97f3\u8f6c\u79fb\u5230\u524d\u4e00\u4e2a\u8bcd\u7684\u672b\u5c3e\uff0c\u65e7\u8bcd\u88ab\u91cd\u65b0\u5206\u5272\u5e76\u5f62\u6210\u65b0\u8bcd\u3002\u6240\u4ee5\u901a\u8fc7\u5047\u80a2\uff0c\u877e\u8788\u53d8\u6210\u4e86\u877e\u8788\u3002\u76f8\u53cd\uff0c\u901a\u8fc7\u5355\u91c7\u7ec6\u80de\u6cd5\uff0cnadder \u53d8\u6210\u4e86 adder\uff0cnapron \u53d8\u6210\u4e86\u56f4\u88d9\uff0cnumble-pie \u53d8\u6210\u4e86 (h)umble-pie\u3002\u82f1\u8bed\u4e2d\u7684\u8bb8\u591a\u5176\u4ed6\u8bcd\u7684\u5b58\u5728\u6b63\u662f\u7531\u4e8e\u8fd9\u79cd\u7c7b\u578b\u7684\u91cd\u65b0\u5206\u5272\uff1a\u4f8b\u5982\uff0c\u6635\u79f0\u3001ninny\u3001namby-pamby\u3001nidiot/nidget\u3001nonce-word\u3001nother \u548c notch \u901a\u8fc7 n \u7684\u5047\u4f53\uff1b\u87ba\u65cb\u94bb\u3001\u88c1\u5224\u5458\u3001\u6a59\u5b50\u3001\u57c3\u4e9a\u65af\u3001\u827e\u591a\u7f8e\u3001\u57c3\u83ab\u5c3c\u3001\u54ce\u54df\u548c aitch-bone\uff0c\u901a\u8fc7 n \u7684 aphaeresis\u3002 [2] \u6c49\u5821\u8fd9\u4e2a\u8bcd\u7684\u8d77\u6e90\u662f\u4e00\u79cd\u6e90\u81ea\u5fb7\u56fd\u6c49\u5821\u7684\u788e\u8089\u83dc\u80b4\uff08\u5728\u90a3\u91cc\u5b83\u4ecd\u7136\u88ab\u79f0\u4e3a\u9791\u977c\u725b\u6392\uff09\u3002\u539f\u7248\u7684\u4e00\u4e2a\u53ef\u80fd\u7684\u62ec\u53f7\u53ef\u80fd\u662f [[ham+burg]+er]\uff0c\u4f46\u5728\u5b83\u88ab\u5f15\u5165\u7f8e\u56fd\u540e\uff0c\u5b83\u5f88\u5feb\u88ab\u5206\u89e3\u4e3a [ham+burger]\uff08\u706b\u817f\u662f\u4e00\u79cd\u8089\u7684\u5f62\u5f0f\uff09\u3002\u8fd9\u5bfc\u81f4\u4e86\u72ec\u7acb\u7684\u540e\u7f00-burger\uff1achickenburger\u3001fishburger\u7b49\u3002\u5728\u539f\u59cb\u8bcd\u6e90\u4e2d\uff0cburg\u662f\u57ce\u9547\uff0cburger\u662f\u5c45\u6c11\uff0c\u6216\u4e0e\u57ce\u9547\u6709\u5173\u7684\u4e8b\u7269\uff1b\u91cd\u6784\u540e\uff0c\u5b83\u53d8\u6210\u4e86\u4e00\u5757\u8089\u6765\u505a\u4e09\u660e\u6cbb\uff0c\u867d\u7136\u6c49\u5821\u5305\u4e0d\u542b\u706b\u817f\u3002 [3] \u82f1\u8bed\u5355\u8bcdoutrage\u662f\u6cd5\u8bed\u7684\u501f\u8bcd\uff0c\u7531\u526f\u8bcdoutre\uff08\u610f\u4e3a\u201c\u8d85\u8d8a\u201d\uff09\u4e0e\u540e\u7f00-age\u7ec4\u5408\u800c\u6210\uff1b\u56e0\u6b64\uff0c\u6700\u521d\u7684\u5b57\u9762\u610f\u601d\u662f\u201c\u8d85\u8d8a\u201d\u2014\u2014\u5373\u8d85\u8d8a\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u3002\u4f5c\u4e3a\u540d\u8bcd\u6216\u52a8\u8bcd rage \u7684 out- \u7684\u590d\u5408\u91cd\u65b0\u62ec\u8d77\u6765\u5bfc\u81f4\u4e86\u4e0e\u8fd9\u79cd\u501f\u8bcd\uff08\u6bd4\u8f83 umbrage\uff09\u7684\u9884\u671f\u53d1\u97f3\u4e0d\u540c\u7684\u53d1\u97f3\u4ee5\u53ca\u6cd5\u8bed\u4e2d\u4e0d\u5b58\u5728\u7684\u201c\u6124\u6012\u7684\u53cd\u5e94\u201d\u7684\u9644\u52a0\u542b\u4e49\u3002\u82f1\u8bed\u76f4\u5347\u673a\u2022pter\uff08\u6765\u81ea\u5e0c\u814a\u8bedheliko-\uff08&#39;\u8f6c\u5411&#39;\uff09\u548cpteron\uff08&#39;\u7ffc&#39;\uff09\uff09\u5df2\u88ab\u91cd\u65b0\u5b9a\u4e49\u4e3a\u73b0\u4ee3\u76f4\u5347\u673a\u2022\u76f4\u5347\u673a\uff08\u5982\u55b7\u6c14\u5f0f\u76f4\u5347\u673a\u3001\u76f4\u5347\u673a\u573a\uff09\u3002 Cyber\u200b\u200bn\u2022etics\uff1a\uff08\u6765\u81ea\u5e0c\u814a\u8bedkubern\u0101n \u548c-\u0113t\u0113s\uff09\u5df2\u7ecf\u6210\u4e3a\u73b0\u4ee3cyber\u2022netics\uff08\u5982\u5728\u7f51\u7edc\u7a7a\u95f4\u4e2d\uff09\u3002 prosthodontics (= \u5047\u7259) \u6765\u81ea prosth(o)- + \u5e0c\u814a\u8bed odont-\uff1b odont- = \u201ctooth\u201d\uff0c\u800c prostho- \u56e0\u201cprosthetic\u201d\u7684\u9519\u8bef\u5212\u5206\u800c\u4ea7\u751f\uff0c\u5b83\u88ab\u89c6\u4e3a\u5047\u5b9a\u7684\u8bcd\u5e72 prosth- \u548c\u540e\u7f00 -etic\uff0c\u4f46\u5b9e\u9645\u4e0a\u6765\u81ea\u5e0c\u814a\u8bed pros = \u201c\u5728\u524d\u9762\u201d\u548c th\u0113-\uff08\u52a8\u8bcdtith\u0113mi =\u201c\u6211\u653e\u7f6e\u201d\uff09\u3002\n\u72ac\u79cd\u62c9\u5e03\u62c9\u591a\u72ac\uff08\u62c9\u5e03\u62c9\u591a\u730e\u72ac\u548c\u8d35\u5bbe\u72ac\u4e4b\u95f4\u7684\u6742\u4ea4\uff09\u5df2\u91cd\u65b0\u5f52\u5165\u62c9\u5e03\u62c9\u591a\u72ac\uff0c\u4ece\u800c\u5bfc\u81f4\u5176\u4ed6\u8d35\u5bbe\u72ac\u6742\u4ea4\u54c1\u79cd\u4e2d\u7684\u201cdoodle\u201d\u540e\u7f00\uff0c\u5982 Goldendoodle \u548c Aussiedoodle\u3002 alco\u2022holic \u8fd9\u4e2a\u8bcd\u6765\u6e90\u4e8e\u9152\u7cbe\uff08\u5b83\u672c\u8eab\u662f\u963f\u62c9\u4f2f\u8bed al-ku\u1e25l \u7684\u65e0\u63a5\u7f1d\u91cd\u65b0\u62ec\u53f7\uff09\u548c ic\u3002\u5176\u4ed6\u6210\u763e\u7684\u8bcd\u662f\u901a\u8fc7\u5c06 holic \u89c6\u4e3a\u540e\u7f00\u800c\u5f62\u6210\u7684\uff1aworkaholic\u3001chocoholic \u7b49\u3002\u901a\u8fc7\u4ece\u4e0d\u5b9a\u51a0\u8bcd un) \u91cd\u65b0\u52a0\u62ec\u53f7\u6765\u6dfb\u52a0 n\uff0c\u6216\u8005\u76f8\u53cd\u3002\u793a\u4f8b\u5305\u62ec\uff1a [4] \u62c9\u4e01\u8bed * libellu\uff08\u82f1\u8bed\u7ea7\u522b\uff09\u5728\u8461\u8404\u7259\u8bed\u3001\u7f57\u9a6c\u5c3c\u4e9a\u8bed\u548c\u897f\u73ed\u7259\u8bed\u4e2d\u53d8\u4e3a nivel\uff0c\u5728\u6cd5\u8bed\u4e2d\u53d8\u4e3a niveau\u3002\u62c9\u4e01\u8bed unicornuus\uff08\u82f1\u8bed\u72ec\u89d2\u517d\uff09\u5728\u6cd5\u8bed\u4e2d\u53d8\u6210\u4e86\u72ec\u89d2\u517d\uff0c\u901a\u8fc7 unicorne &gt;&gt; une icorne\uff08\u72ec\u89d2\u517d\uff09\uff0c\u6700\u540e\uff0c\u968f\u7740 juncture loss\uff0cl&#39;icorne\uff08\u72ec\u89d2\u517d\uff09&gt;&gt; licorne\u3002\u5728\u65af\u74e6\u5e0c\u91cc\u8bed\u4e2d\uff0ckitabu\uff08\u201c\u4e66\u201d\uff09\u6e90\u81ea\u963f\u62c9\u4f2f\u8bed kit\u0101b\u3002\u4f46\u662f\uff0c\u8be5\u8bcd\u88ab\u62c6\u5206\u4e3a\u65af\u74e6\u5e0c\u91cc\u8bed\u672c\u571f\u8bcd (ki + tabu) \u5e76\u76f8\u5e94\u5730\u62d2\u7edd\u4e86 (\u590d\u6570 vitabu)\u3002\u8fd9\u8fdd\u53cd\u4e86\u539f\u59cb\u963f\u62c9\u4f2f\u8bed (KTB) \u7684\u539f\u59cb\u4e09\u5b57\u6839\u3002\u8bb8\u591a\u5728\u79d1\u5b66\u4e0a\u4e0b\u6587\u4e2d\u521b\u9020\u7684\u8bcd\u4f5c\u4e3a\u65b0\u8bcd\u662f\u901a\u8fc7\u91cd\u65b0\u62ec\u8d77\u73b0\u6709\u672f\u8bed\u800c\u5f62\u6210\u7684\u540e\u7f00\u3002\u4e00\u4e2a\u4f8b\u5b50\u662f\u540e\u7f00 -ol \u7528\u4e8e\u547d\u540d\u9187\uff0c\u4f8b\u5982\u7532\u9187\u3002\u5b83\u7684\u8d77\u6e90\u662f\u5c06 al\u2022cohol \u91cd\u65b0\u547d\u540d\u4e3a alcoh\u2022ol\u3002\u9152\u7cbe\u4e00\u8bcd\u6e90\u81ea\u963f\u62c9\u4f2f\u8bed al-ku\u1e25l\uff0c\u5176\u4e2d al \u662f\u5b9a\u51a0\u8bcd\uff0cku\u1e25l\uff08\u5373 kohl\uff09\u57fa\u4e8e\u95ea\u7c73\u7279\u8bed\u7684\u4e09\u5b57\u8bcd\u6839 K-\u1e24-L\u3002 [5] \u57fa\u56e0\u7ec4\u4e2d\u7684\u540e\u7f00 -ome \u6709\u65f6\u88ab\u8ba4\u4e3a\u662f\u5c06 chromo\u2022some \u91cd\u65b0\u62ec\u4e3a chromos\u2022ome\uff0c[6] \u4f46\u8bf7\u53c2\u9605 Omics \u4e0a\u7684\u8ba8\u8bba\uff0c\u58f0\u79f0\u6e90\u81ea\u5176\u4ed6\u7c7b\u4f3c\u7684\u9020\u5e01\u3002\u5728\u82cf\u683c\u5170\u76d6\u5c14\u8bed\u4e2d\uff0c\u5b9a\u51a0\u8bcd\u4e0e\u5143\u97f3-\u8bcd\u9996\u540d\u8bcd\u4e00\u8d77\u53d1\u97f3\uff0c\u6ca1\u6709\u53ef\u542c\u95f4\u9694\u3002 \uff08\u6bd4\u8f83\u6cd5\u8bed\u3002\uff09\u8fd9\u79cd\u7ed3\u5408\u4e3a\u91cd\u65b0\u62ec\u8d77\u6765\u63d0\u4f9b\u4e86\u4e30\u5bcc\u7684\u673a\u4f1a\u3002\u4ece\u5386\u53f2\u4e0a\u770b\uff0c\u6587\u7ae0\u7684\u5404\u79cd\u5927\u5c0f\u5199\u3001\u6570\u5b57\u548c\u6027\u522b\u7279\u5b9a\u5f62\u5f0f\u4ee5\u5143\u97f3\u3001\u9f3b\u97f3\u6216 /s/ \u7ed3\u5c3e\uff0c\u540e\u8005\u540e\u6765\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53d8\u6210\u4e86 /h/\u3002\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u51a0\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u97f3\u8282\u8981\u4e48\u88ab\u5b8c\u5168\u4fb5\u8680\uff0c\u8981\u4e48\u88ab\u524a\u5f31\u548c\u90e8\u5206\u4e22\u5931\uff0c\u4f46\u5728\u53d1\u751f\u91cd\u65b0\u62ec\u53f7\u7684\u5730\u65b9\uff0c\u51a0\u8bcd\u7684\u6700\u540e\u4e00\u4e2a\u8f85\u97f3\u88ab\u89c6\u4e3a\u540e\u9762\u540d\u8bcd\u7684\u9996\u5b57\u6bcd\u3002\u793a\u4f8b\uff1a inghnean ( &lt; *(s)ind\u0101 inigen\u0101) \u4ea7\u751f\u4e86\u53e6\u4e00\u79cd\u5f62\u5f0f ighean &#39;the girl&#39; \u8fd9\u53cd\u8fc7\u6765\u53c8\u53d8\u6210\u4e86 nighean\u3002\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u66f4\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u82cf\u683c\u5170\u76d6\u5c14\u8bed\u4e2d\u7684\u201c\u8368\u9ebb\u201d\u5305\u62ec neanntag\u3001eanntag\u3001deanntag \u751a\u81f3 feanntag\u3002\u6b64\u5916\uff0c\u51a0\u8bcd\u7684\u8bb8\u591a\u5f62\u5f0f\u4f1a\u5bfc\u81f4\u4ee5\u4e0b\u540d\u8bcd\u7684\u8bed\u6cd5\u6761\u4ef6\u58f0\u6bcd\u53d8\u5f02\u3002\u51ef\u5c14\u7279\u8bed\u8a00\u4e2d\u8fd9\u79cd\u7a81\u53d8\u7684\u6700\u521d\u539f\u56e0\u662f\u67d0\u4e9b\u975e\u53cc\u8f85\u97f3\u7684\u53d1\u97f3\u53d1\u751f\u4e86\u5168\u9762\u53d8\u5316\uff0c\u5b83\u4eec\u8981\u4e48\u88ab\u56f0\u5728\u4e24\u4e2a\u5143\u97f3\u4e4b\u95f4\uff0c\u8981\u4e48\u88ab\u56f0\u5728\u4e00\u4e2a\u5143\u97f3\u6216\u67d0\u4e9b\u5176\u4ed6\u8f85\u97f3\u4e4b\u95f4\u3002\u7a81\u53d8\u4e3a\u91cd\u65b0\u5206\u6790\u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u53ef\u80fd\u6027\uff0c\u524d\u9762\u63d0\u5230\u7684 feanntag \u5f62\u5f0f\u53ef\u80fd\u5c31\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002 Calder &#39;A Gaelic Grammar&#39; (1923) \u6709\u4e00\u4e2a\u6709\u7528\u7684\u5217\u8868\u3002\n\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u82f1\u8bed\u4e2d juncture loss \u7684\u4e3b\u8981\u539f\u56e0\u662f\u201ca\u201d\u548c\u201can\u201d\u4e4b\u95f4\u7684\u6df7\u6dc6\u3002\u5728\u4e2d\u4e16\u7eaa\u7684\u6587\u5b57\u4e2d\uff0c\u5355\u8bcd\u901a\u5e38\u5199\u5f97\u5f88\u8fd1\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u4e8e\u4e00\u4e9b\u4e2d\u53e4\u82f1\u8bed\u5b66\u8005\u6765\u8bf4\uff0c\u5f88\u96be\u5206\u8fa8\u4e00\u4e2a\u8bcd\u4ece\u54ea\u91cc\u5f00\u59cb\uff0c\u53e6\u4e00\u4e2a\u8bcd\u4ece\u54ea\u91cc\u7ed3\u675f\u3002\u7ed3\u679c\u5305\u62ec\u4ee5\u4e0b\u82f1\u8bed\u5355\u8bcd\uff1aanother\uff0c\u901a\u8fc7\u5c06\u201can other\u201d\u7ec4\u5408\u6210\u4e00\u4e2a\u5355\u8bcd\u800c\u5f62\u6210\uff0c\u6709\u65f6\u901a\u4fd7\u5730\u62c6\u5206\u4e3a\u201canother\u201d\u548c\u63d2\u5165\u7684\u9650\u5b9a\u8bcd\uff0c\u5982\u201ca whole another issue\u201d\u3002\u8bf1\u9975\uff1a\u6700\u5e38\u88ab\u8ba4\u4e3a\u6e90\u81ea\u8377\u5170\u8bed de kooi\uff0c\u5176\u4e2d de \u662f\u5b9a\u51a0\u8bcd\uff0ckooi \u7684\u610f\u601d\u662f\u7b3c\u5b50\u3002\u53e6\u4e00\u79cd\u7406\u8bba\u662f\uff0c\u8377\u5170\u590d\u5408\u540d\u8bcdeendenkooi\uff0c\u65e9\u671f\u62fc\u5199eendekooi\uff0c\u610f\u601d\u662f\u201c\u9e2d\u5b50\u8bf1\u9975\u201d\uff0c\u6765\u81eaeend\u201cduck\u201d+kooi\uff0c\u5728\u8f6c\u4e3a\u82f1\u8bed\u7684\u8fc7\u7a0b\u4e2d\u88ab\u91cd\u65b0\u5206\u6790\u548c\u5206\u88c2\uff0c\u5982een dekooi\uff0c\u5176\u4e2deen\u662f\u8377\u5170\u8bed\u4e0d\u5b9a\u51a0\u8bcd\u3002 eyas\uff1a\u4e2d\u53e4\u82f1\u8bed a niyas\uff08\u6765\u81ea\u665a\u671f\u62c9\u4e01\u8bed nidiscus \u7684\u6cd5\u8bed niais\uff08\u6765\u81ea\u62c9\u4e01\u8bed nidus =\u201c\u5de2\u201d\uff09\uff09\u7528\u4e8e eias\u3002\u8c26\u865a\u6d3e\uff1a \u4e2d\u53e4\u82f1\u8bed a numble \u8868\u793a umble\uff08\u6700\u7ec8\u6765\u81ea\u62c9\u4e01\u8bed lumbulus\uff0c\u8fd9\u4e5f\u662f\u540c\u8d28\u6027\u7684\u4e00\u4e2a\u4f8b\u5b50\uff09\u3002 omelette\uff1a17 \u4e16\u7eaa\u6765\u81ea\u6cd5\u8bed\u7684\u82f1\u8bed\u501f\u8bcd\uff0c\u901a\u8fc7\u65e9\u671f\u5f62\u5f0f amelette\u3001alemette \u548c alemelle \u53d1\u5c55\u800c\u6765\uff0c\u6765\u81ea la lemelle\uff08\u201c\u714e\u86cb\u5377\u201d\uff09\uff0c\u53d6\u81ea l&#39;alemelle\uff1b\u6700\u7ec8\u6765\u81ea\u62c9\u4e01\u8bed lamella\uff08\u201c\u5200\u7247\u201d\uff09\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u714e\u86cb\u5377\uff08SOED\uff09\u7684\u5f62\u72b6\u5f88\u8584\u3002 ought [&quot;zero&quot;]: \u4e2d\u53e4\u82f1\u8bed a naught (&quot;a nothing&quot;) \u88ab\u8ba4\u4e3a\u662f ought\u3002\u6700\u7ec8\u533a\u522b\u4e8e\u53e4\u82f1\u8bed naught (\u201cnothing\u201d)\uff0c\u590d\u6742\u800c\u8d8b\u540c\u7684\u8bcd\u6e90\uff0c\u4ece na (\u201cnot\u201d) \u548c wight (\u201c\u6d3b\u7269\uff0c\u4eba\u201d)\uff0c\u4f46\u53c2\u89c1\u3002 aught\uff08\u201c\u4efb\u4f55\u4e1c\u897f\u201d\u3001\u201c\u503c\u5f97\u7684\u201d\u7b49\uff09\uff0c\u5176\u672c\u8eab\u6700\u7ec8\u6765\u81ea aye\uff08\u201cever\u201d\uff09\u548c wight\uff08SOED\uff09\u3002\n\u5728\u6cd5\u8bed\u4e2d\uff0c\u201cle/la\u201d\u548c\u201cl&#39;-\u201d\u4ee5\u53ca\u201cde\u201d\u548c\u201cd&#39;-\u201d\u4e4b\u95f4\u4e5f\u51fa\u73b0\u4e86\u7c7b\u4f3c\u7684\u6df7\u6dc6\u3002\u53e4\u6cd5\u8bed lonce (&quot;lynx&quot;) \u8868\u793a l&#39;once\uff0c\u56e0\u6b64\u4ea7\u751f\u4e86\u4e00\u6b21\uff08\u56e0\u6b64\u82f1\u8bed\uff1aounce\uff09\uff0c\u73b0\u5728\u66f4\u5e38\u7528\u4e8e\u96ea\u8c79\u3002\u6e90\u81ea\u5e0c\u814a\u8bed\u62c9\u4e01\u8bed apotheca \u7684\u7cbe\u54c1\u5e97\uff0c\u5728\u4e00\u4e9b\u7f57\u66fc\u8bed\u8bed\u8a00\uff08\u4f8b\u5982\u610f\u5927\u5229\u8bed bottega\u3001\u897f\u73ed\u7259\u8bed bodega\u3001\u897f\u897f\u91cc\u8bed put\u00eca\uff09\u4e2d\u53d1\u73b0\u7684\u53d8\u5316\uff0c\u5047\u5b9a\u7684\u539f\u59cb\u7f57\u66fc\u8bed l&#39;aboteca \u6216 l&#39;abodega \u53d6\u4e3a la + lexeme\u3002\u8377\u5170\u8bed\u4e0e\u82f1\u8bed\u5206\u4eab\u4e86\u51e0\u4e2a\u4f8b\u5b50\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u81ea\u5df1\u7684\u4f8b\u5b50\u3002\u8bb8\u591a\u793a\u4f8b\u662f\u901a\u8fc7\u91cd\u65b0\u5206\u6790\u4f5c\u4e3a\u524d\u4e00\u7bc7\u6587\u7ae0\u6216\u6848\u4f8b\u7ed3\u5c3e\u7684\u4e00\u90e8\u5206\u7684\u521d\u59cb n- \u800c\u521b\u5efa\u7684\u3002 arreslee\uff08\u9a6c\u62c9\u96ea\u6a47\uff09\uff1a\u6765\u81ea\u65e9\u671f\u73b0\u4ee3\u8377\u5170\u8bed een (n)arreslede\uff0c\u6765\u81ea nar\u201c\u50bb\u74dc\uff0c\u5c0f\u4e11\u201d+\u96ea\u6a47\u201c\u96ea\u6a47\u201d\u3002 spijt \u201c\u601c\u60af\uff0c\u9057\u61be\u201d\uff1a\u6e90\u81ea\u4e2d\u53e4\u8377\u5170\u8bed despijt\uff0c\u6e90\u81ea\u53e4\u6cd5\u8bed despit \u201cspite\u201d\u3002\u91cd\u65b0\u5206\u6790\u4e3a de spijt \u201c\u9057\u61be\u201d\u3002 Rijsel &quot;Lille&quot; \uff1a\u6765\u81ea ter IJsel &quot;at the Isle&quot;\uff0c\u91cd\u65b0\u5206\u6790\u4e3a te Rijsel &quot;at Lille&quot;\u3002\n\u5728\u963f\u62c9\u4f2f\u8bed\u4e2d\uff0c\u6df7\u6dc6\u901a\u5e38\u4e0e\u4ee5\u201cal-\u201d\u5f00\u5934\u7684\u975e\u963f\u62c9\u4f2f\u8bed\u8bcd\u6709\u5173\uff08al \u662f\u963f\u62c9\u4f2f\u8bed\u4e2d\u7684\u201cthe\u201d\uff09\u3002\u4e9a\u5386\u5c71\u5927\u5927\u5e1d\u5728\u963f\u62c9\u4f2f\u8bed\u4e2d\u88ab\u89e3\u91ca\u4e3a\u4f9d\u65af\u5e72\u8fbe\uff1b\u5f15\u7533\u4e3a al Exandreia \u5e0c\u814a\u8bed Alexandreia\uff08\u4e9a\u5386\u5c71\u5927\uff09\uff08\u56e0\u6b64 Al-Iskandariyah\uff1b\u8fd9\u4e5f\u662f\u590d\u5206\u89e3\u7684\u4e00\u4e2a\u4f8b\u5b50\uff09\u3002\u5e0c\u814a\u8bed Alexandretta \u88ab\u89c6\u4e3a al Exandretta\uff08\u56e0\u6b64\u662f Iskenderun\uff1b\u8fd9\u4e5f\u662f\u590d\u5206\u89e3\u7684\u4e00\u4e2a\u4f8b\u5b50\uff09\u3002 Negroponte (Euboea) \u4ece \u03c3\u03c4\u1f78 \u039d\u03b5\u03cd\u03c1\u03b9\u03c0\u03bf\u03bd &#39;\u5230 Nevripos&#39;\uff0c\u91cd\u65b0\u62ec\u8d77 \u03c3\u03c4\u1f78\u03bd \u0395\u1f54\u03c1\u03b9\u03c0\u03bf\u03bd &#39;\u5230 Evripos&#39;\uff0c\u7136\u540e\u662f\u4e00\u4e2a\u6c11\u95f4\u8bcd\u6e90\uff0c\u5c06\u5b83\u4e0e\u610f\u5927\u5229\u8bed ponte &#39;bridge&#39; [8] \u5361\u5854\u7f57 (Dec\u03c4\u03b5\u03c1\u03b1) \u5206\u88c2\u5230Catera\uff09\u5728\u610f\u5927\u5229\u8bed\u4e2d\uff0c\u7136\u540e\u5230 Cattaro/Kotor\u3002\u4e5f\u8bb8\u82f1\u8bed\u4e2d\u6700\u5e38\u89c1\u7684 juncture loss \u6765\u81ea\u963f\u62c9\u4f2f\u8bed al\uff08\u5982\u4e0a\u6240\u8ff0\uff09\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u897f\u73ed\u7259\u8bed\u3001\u8461\u8404\u7259\u8bed\u548c\u4e2d\u4e16\u7eaa\u62c9\u4e01\u8bed\uff1a\u963f\u62c9\u4f2f\u8bed az-zahr\uff08\u201c\u9ab0\u5b50\u201d\uff09\u5728\u897f\u73ed\u7259\u8bed\u4e2d\u4f5c\u4e3a azar\u3001\u201c\u968f\u673a\u6027\u201d\u548c\u5728\u6cd5\u8bed\u548c\u82f1\u8bed\u4e2d\u79f0\u4e3a\u201c\u5371\u9669\u201d\n\u963f\u62c9\u4f2f\u8bed al-f\u012bl\uff08\u201c\u5927\u8c61\u201d\uff09\u5728\u897f\u73ed\u7259\u8bed\u4e2d\u4e3a alfil\u201c\u8c61\u68cb\u4e3b\u6559\u201d\uff0c\u5728\u610f\u5927\u5229\u8bed\u4e2d\u4e3a alfiere\u201c\u8c61\u68cb\u4e3b\u6559\u201d\uff08\u5176\u4fc4\u8bed\u540d\u5b57 \u0441\u043b\u043e\u043d &#39;slon&#39; \u4e5f\u610f\u5473\u7740\u201c\u5927\u8c61\u201d\uff09\u3002\u963f\u62c9\u4f2f\u8bed al-ku\u1e25l\uff08\u7c89\u72b6\u9511\uff09\u5728\u4e2d\u4e16\u7eaa\u62c9\u4e01\u8bed\u4e2d\u4f5c\u4e3a\u9152\u7cbe\uff0c\u7528\u4e8e\u8868\u793a\u610f\u4e49\u7684\u53d8\u5316\u3002\u963f\u62c9\u4f2f\u8bed al-ku\u0127l \u5728\u53e4\u6cd5\u8bed\u4e2d\u4f5c\u4e3a\u9152\u7cbe\uff08\u73b0\u4ee3\u6cd5\u8bed alcool\uff09\uff0c\u5728\u82f1\u8bed\u4e2d\u4f5c\u4e3a\u9152\u7cbe\u3002\u5728\u5e0c\u814a\u6587\u5b66\u7684\u6700\u65e9\u65f6\u671f\uff1a\u5728\u8377\u9a6c\u53f2\u8bd7\u7684\u53e3\u5934\u4f20\u64ad\u671f\u95f4\uff0c\u4ea4\u754c\u5143\u5206\u6790\u5728\u65b0\u8bcd\u7684\u53d1\u5c55\u4e2d\u53d1\u6325\u4e86\u4f5c\u7528\u3002\u8377\u9a6c\u53f2\u8bd7\u4e2d\u7684\u8bb8\u591a\u5728\u8bcd\u6e90\u5b66\u4e0a\u65e0\u6cd5\u901a\u8fc7\u6b63\u5e38\u8bed\u8a00\u5206\u6790\u89e3\u91ca\u7684\u8bcd\uff0c\u5f53\u5047\u8bbe\u5728\u4f20\u64ad\u7684\u67d0\u4e2a\u9636\u6bb5\u8fdb\u884c\u7ed3\u5408\u5143\u5206\u6790\u65f6\uff0c\u5f00\u59cb\u53d8\u5f97\u6709\u610f\u4e49\uff1a\u4f8b\u5982\uff0c\u516c\u5f0f eche nedumos hypnos\u201csweet sleep hold (him)\u201d\u4f3c\u4e4e\u662f\u4e00\u4e2aechen edumos hypnos \u7684\u91cd\u65b0\u5206\u5272\u3002 Steve Reece \u5728\u8377\u9a6c\u4e2d\u53d1\u73b0\u4e86\u51e0\u5341\u4e2a\u7c7b\u4f3c\u7684\u5143\u5206\u6790\u5b9e\u4f8b\uff0c\u4ece\u800c\u4e3a\u4ed6\u4eec\u7684\u8bcd\u6e90\u63d0\u4f9b\u4e86\u65b0\u7684\u7ebf\u7d22\u3002 [9] \u63a5\u5408\u70b9\u4e22\u5931\u5728\u540e\u671f\u5e0c\u814a\u8bed\u4e2d\u4e5f\u5f88\u5e38\u89c1\uff0c\u5c24\u5176\u662f\u5728\u5730\u540d\u4e2d\uff0c\u6216\u5728\u610f\u5927\u5229\u8bed\u548c\u571f\u8033\u5176\u8bed\u4e2d\u501f\u7528\u5e0c\u814a\u8bed\u540d\u79f0\u65f6\uff0c\u7c92\u5b50\uff08\u03b5\u03b9\u03c2\u3001\u03c3\u03c4\u03b7\u03bd\u3001\u03c3\u03c4\u03bf\u03bd\u3001\u03c3\u03b5\uff09\u4e0e\u539f\u59cb\u540d\u79f0\u878d\u5408\u5728\u4e00\u8d77\u3002 [10] [11] [12] \u5728\u514b\u91cc\u7279\u5c9b\u65b9\u8a00\u4e2d\uff0cse- \u524d\u7f00\u4e5f\u51fa\u73b0\u5728\u666e\u901a\u540d\u8bcd\u4e2d\uff0c\u4f8b\u5982 secambo \u6216 tsecambo &lt; se- + cambo &#39;a plain&#39;\u3002 [13] \u524d\u7f00 &quot;stan&quot; &lt; \u03c3\u03c4\u03ae\u03bd &#39;at&#39;, &#39;to&#39; \u4f0a\u65af\u5766\u5e03\u5c14\u6216 Stamboul \u548c Stimpoli, \u514b\u91cc\u7279\u5c9b\uff0c\u6765\u81ea &quot;\u03c3\u03c4\u03b7\u03bd \u03a0\u03cc\u03bb\u03b7&quot; [stim\u02c8boli], &#39;in the city&#39; \u6216 &#39;to the city&#39; ^ \u6709\u5173\u91cd\u65b0\u5206\u6bb5\u7684\u793a\u4f8b\u5404\u79cd\u8bed\u97f3\u73af\u5883\u4e2d\u7684\u4e2d\u53e4\u82f1\u8bed\uff0c\u53c2\u89c1 Steve Reece, Junctural Metanalysis in Middle English, in Reece, Steve, Homer&#39;s Winged Words (Leiden: Brill, 2009) 15-26\u3002 Reece, Steve\uff0c\u201c\u6839\u636e\u53e3\u5934\u516c\u5f0f\u7406\u8bba\u7684\u4e00\u4e9b\u8377\u9a6c\u8bcd\u6e90\u201d\uff0c\u53e4\u5178\u4e16\u754c 93.2 (1999) 185-199\u3002 https://www.academia.edu/30641357/Some_Homeric_Etymologies_in_the_Light_of_Oral-Formulaic_Theory\n^ \u201c\u6a59\u8272 n. 1 \u548c adj. 1\u201d\u3002\u725b\u6d25\u82f1\u8bed\u8bcd\u5178\u5728\u7ebf\u3002\u725b\u6d25\uff1a\u725b\u6d25\u5927\u5b66\u51fa\u7248\u793e\u3002 2013 \u5e74\u3002 \uff08\u9700\u8981\u8ba2\u9605\uff09^ Reece, Steve (2009)\u3002\u8377\u9a6c\u7684\u6709\u7ffc\u8bcd\uff1a\u4ece\u53e3\u5934\u7406\u8bba\u7684\u89d2\u5ea6\u770b\u65e9\u671f\u5e0c\u814a\u53f2\u8bd7\u8f9e\u5178\u7684\u6f14\u53d8\u3002\u83b1\u987f\u548c\u6ce2\u58eb\u987f\uff1a\u5e03\u91cc\u5c14\u3002 ISBN 978-90-04-17441-2\u3002\u6b64\u5916\uff0c\u91cc\u65af\uff0c\u53f2\u8482\u592b\uff0c\u201c\u6839\u636e\u53e3\u5934\u516c\u5f0f\u7406\u8bba\u7684\u4e00\u4e9b\u8377\u9a6c\u8bcd\u6e90\u201d\uff0c\u53e4\u5178\u4e16\u754c 93.2 (1999) 185-199\u3002\u6839\u636e\u53e3\u5934\u516c\u5f0f\u7406\u8bba\u7684\u4e00\u4e9b\u8377\u9a6c\u8bcd\u6e90 ^ ab Bourne, Edward G. (1887)\u3002 \u201c\u65af\u5766\u5e03\u5c14\u7684\u63a8\u5bfc\u201d\u3002\u7f8e\u56fd\u8bed\u8a00\u5b66\u6742\u5fd7\u3002\u7ea6\u7ff0\u970d\u666e\u91d1\u65af\u5927\u5b66\u51fa\u7248\u793e\u3002 8 (1): 78\u201382\u3002 doi\uff1a10.2307/287478\u3002 JSTOR 287478\u3002^ Marek Stachowski\u3001Robert Woodhouse\uff0c\u201c\u4f0a\u65af\u5766\u5e03\u5c14\u7684\u8bcd\u6e90\uff1a\u5145\u5206\u5229\u7528\u8bc1\u636e\u201d Studia Etymologica Cracoviensia 20: 221\u2013245 (2015) doi: 10.4467/20841582015c^a.sim.sim, 2015c . Belgrano, eds., &quot;Atlante Idrografico del Medio Evo posseduto dal Prof. Tammar Luxoro, Pubblicata a Fac-Simile ed Annotato&quot;, Atti della Societ\u00e0 Ligure di Storia Patria, Genoa, 1867 5: 103 cf. Luxoro Atlas ^ ab Thomas Abel Briimage Spratt, Travels and Researchs in Crete, 1865, Chapter XIX, p\u3002 201 \u4ea8\u5fb7\u91cc\u514b\u68ee\uff0c\u7f57\u4f2f\u7279\u3002 QPB \u8bcd\u53e5\u8d77\u6e90\u767e\u79d1\u5168\u4e66\u3002\u7ebd\u7ea6\uff1aFacts on File, Inc.\uff0c1998 \u5e74\u3002\n\u91cc\u65af\uff0c\u53f2\u8482\u592b\u3002\u8377\u9a6c\u7684\u6709\u7ffc\u8bcd\uff1a\u4ece\u53e3\u5934\u7406\u8bba\u7684\u89d2\u5ea6\u770b\u65e9\u671f\u5e0c\u814a\u53f2\u8bd7\u8f9e\u5178\u7684\u6f14\u53d8\u3002\u83b1\u987f\u548c\u6ce2\u58eb\u987f\uff1a\u5e03\u91cc\u5c14\uff0c2009 \u5e74\u3002 [\u672c\u4e66\u4e3b\u8981\u5173\u6ce8\u53e4\u5e0c\u814a\u8bed\u4e2d\u7684\u7ed3\u5408\u5143\u5206\u6790\uff0c\u4f46\u5176\u4e2d\u5305\u62ec\u4e00\u7ae0\u5173\u4e8e\u4e2d\u53e4\u82f1\u8bed\u7684\u7ae0\u8282\uff0c\u5e76\u5217\u51fa\u4e86\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u7684\u793a\u4f8b\uff1a\u68b5\u8bed\u3001\u5410\u706b\u7f57\u8bed\u3001\u53e4\u6559\u4f1a\u65af\u62c9\u592b\u8bed\u3001\u62c9\u4e01\u8bed\u3001\u6cd5\u5170\u514b\u8bed\u3001\u5a01\u5c3c\u65af\u8bed\u3001\u571f\u8033\u5176\u8bed\u3001\u610f\u5927\u5229\u8bed\u3001\u6cd5\u8bed\u3001\u897f\u73ed\u7259\u8bed\u3001\u6d77\u5730\u8bed\u3001\u5fb7\u8bed\u3001\u8377\u5170\u8bed\u3001\u7231\u5c14\u5170\u8bed\u3001\u76d6\u5c14\u8bed\u3001\u5a01\u5c14\u58eb\u8bed\u548c\u963f\u62c9\u4f2f\u8bed\u3002] Pickett, Joseph P. \u7f8e\u56fd\u4f20\u7edf\u82f1\u8bed\u8bcd\u5178\u3002-\u7b2c 4 \u7248\u3002\u7ebd\u7ea6\uff1aHoughton Mifflin Co.\uff0c2000\u3002[\u4e5f\uff1a*\u83ab\u91cc\u65af\uff0c\u5a01\u5ec9\u3002\u7f8e\u56fd\u4f20\u7edf\u82f1\u8bed\u8bcd\u5178\u3002-\u65b0\u5927\u5b66\u7248\u3002\u6ce2\u58eb\u987f\uff1aHoughton Mifflin Co.\uff0c1976 \u5e74\u3002[\u4e5f\uff1a\u201c\u65b0\u5927\u5b66\u7f16\u8f91\u201d\uff0c\u7f16\u8f91\u3002\u5a01\u5ec9\u00b7\u83ab\u91cc\u65af\u3002 1976] Vizetelly, Frank H. Funk &amp; Wagnalls \u5b9e\u7528\u6807\u51c6\u82f1\u8bed\u8bcd\u5178\u7ebd\u7ea6\uff1aFunk &amp; Wagnalls Co., 1931\u3002", "note_en": "Jump to navigation  Jump to search  Process in historical linguistics where a word originally derived from one source is broken down or bracketed into a different set of factors\n   Rebracketing (also known as  resegmentation or  metanalysis) is a process in  historical linguistics where a word originally derived from one source is broken down or bracketed into a different set of factors. It is usually a form of  folk etymology, where the new factors may appear meaningful (e.g.   hamburger taken to mean a  burger with  ham), or may seem to be the result of valid  morphological processes.\n Rebracketing often focuses on highly probable word boundaries: &#34;a noodle&#34; might become &#34;an oodle&#34;, since &#34;an oodle&#34; sounds just as grammatically correct as &#34;a noodle&#34;, and likewise &#34;an eagle&#34; might become &#34;a neagle&#34;, but &#34;the bowl&#34; would not become &#34;th ebowl&#34; and &#34;a kite&#34; would not become &#34;ak ite&#34;.\n Technically, bracketing is the process of breaking an utterance into its constituent parts. The term is akin to  parsing for larger sentences, but it is normally restricted to morphological processes at the sublexical level, i.e. within the particular word or  lexeme. For example, the word  uneventful is conventionally bracketed as [un+[event+ful]], and the bracketing [[un+event]+ful] leads to completely different  semantics. Re-bracketing is the process of seeing the same word as a different morphological decomposition, especially where the new  etymology becomes the conventional norm. The name  false splitting, also called  misdivision, in particular is often reserved for the case where two words mix but still remain two words (as in the &#34;noodle&#34; and &#34;eagle&#34; examples above).\n The name  juncture loss may be specially deployed to refer to the case of an article and a noun fusing (such as if &#34;the jar&#34; were to become &#34;(the) thejar&#34; or &#34;an apple&#34; were to become &#34;(an) anapple&#34;). Loss of  juncture is especially common in the cases of  loanwords and loan phrases in which the recipient language&#39;s speakers at the time of the word&#39;s introduction did not realize an article to be already present (e.g. numerous Arabic-derived words beginning &#39;al-&#39; (&#39;the&#39;), including &#34;algorithm&#34;, &#34;alcohol&#34;, &#34;alchemy&#34;, etc.). Especially in the case of loan phrases, juncture loss may be recognized as substandard even when widespread; e.g. &#34;the   hoi polloi&#34;, where Greek  hoi = &#34;the&#34;, and &#34;the  Magna Carta&#34;, in which no article is necessary because  magna carta is borrowed rather than  calqued (Latin&#39;s lack of articles makes the original term either implicitly definite or indeterminate with respect to definiteness [in this context, the former], and the English phrase&#39;s proper-noun status renders unnecessary any further determination through the use of an article).\n As a statistical change within a language within any century, rebracketing is a very weak statistical phenomenon. Even during phonetic template shifts, it is at best only probable that 0.1% of the vocabulary may be rebracketed in any given century.\n Rebracketing is part of the process of  language change, and often operates together with  sound changes that facilitate the new etymology.\n Rebracketing is sometimes used for jocular purposes, for example  psychotherapist can be rebracketed jocularly as  Psycho the rapist, and  together in trouble can be rebracketed jocularly as  to get her in trouble.  [1]\n   Before the increased standardization of the English language in the modern period, many new words entered its lexicon in exactly the way just described. A 15th century English cook may once have said something like: &#34;Ah, I found this ewt and this nadder in my napron while baking numble-pie.&#34; A few generations later the cook&#39;s descendant would have said: &#34;Ah, I found this newt and this adder in my apron while baking (h)umble-pie.&#34; Over the course of time these words were misheard and resegmented: ewt became newt, nadder became adder, napron became apron, numble-pie became (h)umble pie. The force behind these particular resegmentations, and by far the most powerful force behind any such resegmentations in the English language, was the &#39;movable-n&#39; of the indefinite article a(n), of the possessive pronouns my(n) and thy(n), and of the old dative case of the definite article the(n). The biforms no/none, the prepositions in and on, the conditional conjunction an &#39;even,&#39; the shortened form &#39;n &#39;and,&#39; and the inflectional endings in -n may also have played a part. Through the process of prothesis, in which the sound at the end of a word is transferred to the beginning of the word following, or conversely aphaeresis, in which the sound at the beginning of a word is transferred to the end of the word preceding, old words were resegmented and new words formed. So through prothesis an ewt became a newt. Conversely through aphaeresis a nadder became an adder, a napron became an apron, and a numble-pie became an (h)umble-pie. Many other words in the English language owe their existence to just this type of resegmentation: e.g., nickname, ninny, namby-pamby, nidiot/nidget, nonce-word, nother, and notch through prothesis of n; auger, umpire, orange, eyas, atomy, emony, ouch, and aitch-bone, through aphaeresis of n.  [2]\n  The word  hamburger&#39;s origins were in a form of ground meat dish originating from  Hamburg,  Germany (where it is still called  Tartar steak). A possible bracketing for the original may be  [[ham+burg]+er], but after its introduction into the  United States, it was soon factorized as  [ham+burger] (helped by  ham being a form of meat). This led to the independent suffix  -burger: chickenburger, fishburger, etc. In the original etymology,  burg was town and  burger was a resident, or something related to the town; after refactorization it becomes a chunk of meat for a sandwich, although a hamburger does not contain ham.  [3]\n The English word  outrage is a  loanword from French, where it was formed by combining the adverb   outre (meaning &#34;beyond&#34;) with the suffix   -age; thus, the original literal meaning is &#34;beyondness&#34; \u2013 that is, beyond what is acceptable. The rebracketing as a compound of  out- with the noun or verb  rage has led to both a different pronunciation than the one to be expected for such a loanword (compare  umbrage) and an additional meaning of &#34;angry reaction&#34; not present in French.\n The English  helico\u2022pter (from  Greek  heliko- (&#39;turning&#39;) and  pteron (&#39;wing&#39;)) has been rebracketed to modern  heli\u2022copter (as in  jetcopter,  heliport).\n cybern\u2022etics: (from Greek  kubern\u0101n and  -\u0113t\u0113s) has become modern  cyber\u2022netics (as in  cyberspace).\n prosthodontics (=  false teeth) is from  prosth(o)- + Greek  odont-;  odont- = &#34; tooth&#34;, and  prostho- arose by misdivision of &#34; prosthetic&#34;, which was treated as supposed stem  prosth- and suffix  -etic, but actually came from Greek  pros = &#34;in front of&#34; and  th\u0113- (the  root of the verb  tith\u0113mi = &#34;I place&#34;).\n The dog breed,   Labrad\u2022oodle (a cross between a  Labrador Retriever and  Poodle) has been rebracketed to  Labra\u2022doodle, leading to the &#34;doodle&#34; suffix in other Poodle crossbreeds such as the  Goldendoodle and Aussiedoodle.\n The word   alco\u2022holic derives from   alcohol (itself a junctureless rebracketing of Arabic  al-ku\u1e25l) and  ic. Words for other addictions have formed by treating  holic as a suffix:   workaholic,  chocoholic, etc.\n In Romance languages, repeated rebracketing can change an initial  l to an  n (first removing the  l by analyzing it as the definite article  l &#39;, and then adding  n by rebracketing from the indefinite article  un), or the reverse. Examples include:  [4] Latin * libellu (English  level) becoming  nivel in Portuguese, Romanian, and Spanish, and  niveau in French.\n Latin  unicornuus (English  unicorn) became  licorne in French, via  unicorne &gt;&gt;  une icorne (a unicorn), and finally, with juncture loss,  l&#39;icorne (the unicorn) &gt;&gt;  licorne.\n In  Swahili,  kitabu (&#34;book&#34;) is derived from  Arabic  kit\u0101b. However, the word is split as a native Swahili word ( ki +  tabu) and declined accordingly (plural  vitabu). This violates the original  triliteral root of the original Arabic (  K-T-B).\n Many words coined in a scientific context as neologisms are formed with suffixes arising from rebracketing existing terms. One example is the suffix  -ol used to name  alcohols, such as  methanol. Its origin is the rebracketing of  al\u2022cohol as  alcoh\u2022ol. The word  alcohol derives from the Arabic  al-ku\u1e25l, in which  al is the definite article and  ku\u1e25l (i.e.,  kohl), is based on the Semitic triliteral root    K-\u1e24-L.  [5] The suffix  -ome as in   genome, is occasionally suggested as being a rebracketing of  chromo\u2022some as  chromos\u2022ome,  [6] but see discussion at  Omics asserting a derivation from other, similar coinages.\n In  Scottish Gaelic the  definite article is pronounced run together with vowel-initial nouns without audible gap. (Compare  French.) This union has provided a rich source of opportunities for rebracketing. Historically the article&#39;s various case-, number- and gender-specific forms ended in either a vowel, a nasal or an /s/, the latter later becoming an /h/ over time. Over time, the last syllable of the article was either eroded completely or weakened and partially lost, but where rebracketing had occurred, what had been the final consonant of the article came to be treated as the initial of the following noun. Example:  an inghnean ( &lt;  *(s)ind\u0101 inigen\u0101) gave rise to an alternative form  an ighean &#39;the girl&#39; this in turn becoming  an nighean. As a second, more extreme example, the Scottish Gaelic words for &#39;nettle&#39; include  neanntag, eanntag, deanntag and even  feanntag. In addition, many forms of the article cause grammatically-conditioned  initial consonant mutation of the following noun. The original cause of this mutation in the  Celtic languages was an across-the-board  change of pronunciation of certain non- geminate consonants where they were either trapped between two vowels, or else between a vowel or certain other consonants. Mutation gave rise to yet more possibilities for reanalysis, the form  feanntag mentioned earlier possibly being one such example. Calder &#39;A Gaelic Grammar&#39; (1923) has a useful list.\n    As demonstrated in the examples above, the primary reason of juncture loss in English is the confusion between &#34;a&#34; and &#34;an&#34;. In  Medieval script, words were often written so close together that for some  Middle English scholars it was hard to tell where one began and another ended. The results include the following words in English:\n another, formed by combining &#34;an other&#34; into one word, is sometimes colloquially split into &#34;a nother&#34; and a qualifier inserted as in &#34;a whole nother issue&#34;.\n   decoy: Most commonly thought to stem from Dutch  de kooi, in which  de is the definite article and  kooi means cage. An alternative theory is that the Dutch compound noun  eendenkooi, earlier spelled  eendekooi, meaning &#34;duck decoy&#34;, from  eend &#34;duck&#34; +  kooi, was reanalyzed and split, in the process of being transferred to English, as  een dekooi, in which  een is the Dutch indefinite article.\n eyas: Middle English  a niyas (from French  niais from Late Latin  nidiscus (from Latin  nidus = &#34;nest&#34;)) taken for  an eias.\n humble pie: Middle English  a numble taken for  an umble (ultimately from Latin  lumbulus, this is also an example of  homorganicness).\n      omelette: Seventeenth-century English loanword from French, developed there via earlier forms  amelette,  alemette and  alemelle from  la lemelle (&#34;the omelette&#34;) taken for  l&#39;alemelle; ultimately from Latin  lamella (&#34;blade&#34;), perhaps because of the thin shape of the omelette ( SOED).\n ought [&#34;zero&#34;]: Middle English  a nought (&#34;a nothing&#34;) taken for  an ought. Ultimately distinct from Old English  naught (&#34;nothing&#34;), of complex and convergent etymology, from  na (&#34;not&#34;) and  wight (&#34;living thing, man&#34;), but cf.  aught (&#34;anything&#34;, &#34;worthy&#34;, etc.), itself ultimately from  aye (&#34;ever&#34;) and  wight ( SOED).\n  In  French similar confusion arose between &#34;le/la&#34; and &#34;l&#39;-&#34; as well as &#34;de&#34; and &#34;d&#39;-&#34;.\n Old French  lonce (&#34; lynx&#34;) taken for  l&#39;once, thus giving rise to  once (hence English:  ounce), now more often applied to the  snow leopard.\n  boutique from Greek-derived Latin  apotheca, a change found in some Romance languages (e.g. Italian  bottega, Spanish  bodega, Sicilian  put\u00eca), a putative proto-Romance  l&#39;aboteca or  l&#39;abodega taken for  la +  lexeme.\n  Dutch shares several examples with English, but also has some of its own. Many examples were created by reanalysing an initial  n- as part of a preceding article or case ending.\n arreslee ( horse-drawn  sleigh): From early modern Dutch  een (n)arreslede, from  nar &#34;fool, jester&#34; +  slede &#34;sleigh&#34;.\n   spijt &#34;pity, regret&#34;: From Middle Dutch  despijt, from Old French  despit &#34;spite&#34;. Reanalysed as  de spijt &#34;the pity&#34;.\n Rijsel &#34;Lille&#34;\u00a0: from  ter IJsel &#34;at the Isle&#34;, reanalyzed as  te Rijsel &#34;at Lille&#34;.\n  In  Arabic the confusion is generally with non-Arabic words beginning in &#34;al-&#34; ( al is Arabic for &#34;the&#34;).\n Alexander the Great has been interpreted in Arabic as  Iskandar; by extension Greek  Alexandreia ( Alexandria) taken for  al Exandreia (and thus  Al-Iskandariyah; this is also an example of  metathesis).\n Greek  Alexandretta taken for  al Exandretta (and thus  Iskenderun; this too is an example of metathesis).\n  Negroponte ( Euboea) from \u03c3\u03c4\u1f78 \u039d\u03b5\u03cd\u03c1\u03b9\u03c0\u03bf\u03bd &#39;to Nevripos&#39;, rebracketing of \u03c3\u03c4\u1f78\u03bd \u0395\u1f54\u03c1\u03b9\u03c0\u03bf\u03bd &#39;to Evripos&#39;, and then a  folk etymology connecting it to Italian  ponte &#39;bridge&#39;  [8]\n Cattaro ( Kotor) from \u0394\u03b5\u03ba\u03ac\u03c4\u03b5\u03c1\u03b1,  Decatera splitting to De Catera (of Catera) in Italian, then to Cattaro/Kotor.\n    Perhaps the most common case of juncture loss in English comes from the Arabic  al (mentioned above), mostly via Spanish, Portuguese, and Medieval Latin:\n  Arabic  az-zahr (&#34;the dice&#34;) in Spanish as  azar, &#34;randomness&#34;, and in French and English as &#34; hazard&#34;\n Arabic  al-f\u012bl (&#34;the elephant&#34;) in Spanish as  alfil &#34;chess bishop&#34; and in Italian as  alfiere &#34;chess bishop&#34;  (whose Russian name \u0441\u043b\u043e\u043d &#39;slon&#39; also means &#34;elephant&#34;).\n  Arabic  al-ku\u1e25l (powdered  antimony) in Medieval Latin as   alcohol, which see for the change of meaning.\n  Arabic  al-ku\u0127l in Old French as alcohol (modern French alcool), and in English as  alcohol.\n  Junctural metanalysis played a role in the development of new words in the earliest period of Greek literature: during the oral transmission of the Homeric epics. Many words in the Homeric epics that are etymologically inexplicable through normal linguistic analysis begin to make some sense when junctural metanalysis at some stage in the transmission is assumed: e.g., the formula  eche nedumos hypnos &#34;sweet sleep held (him)&#34; appears to be a resegmentation of  echen edumos hypnos. Steve Reece has discovered several dozen similar instances of metanalysis in Homer, thereby shedding new light on their etymologies.  [9]\n Juncture loss is common in later Greek as well, especially in place names, or in borrowings of Greek names in Italian and Turkish, where particles (\u03b5\u03b9\u03c2, \u03c3\u03c4\u03b7\u03bd, \u03c3\u03c4\u03bf\u03bd, \u03c3\u03b5) are fused with the original name.  [10]  [11]  [12] In  Cretan dialect, the se- prefix was also found in common nouns, such as  secambo or  tsecambo &lt;  se- +  cambo &#39;a plain&#39;.  [13]\n  Prefix &#34;stan&#34; &lt; \u03c3\u03c4\u03ae\u03bd &#39;at&#39;, &#39;to&#39; Istanbul or Stamboul and  Stimpoli, Crete, from &#34;\u03c3\u03c4\u03b7\u03bd \u03a0\u03cc\u03bb\u03b7&#34; [stim\u02c8boli], &#39;in the city&#39; or &#39;to the city&#39;\n    ^  For examples of resegmentation in Middle English in various phonetic environments, see Steve Reece,  Junctural Metanalysis in Middle English, in Reece, Steve,  Homer&#39;s Winged Words (Leiden: Brill, 2009) 15-26. Also Reece, Steve, &#34;Some Homeric Etymologies in the Light of Oral-Formulaic Theory,&#34; Classical World 93.2 (1999) 185-199. https://www.academia.edu/30641357/Some_Homeric_Etymologies_in_the_Light_of_Oral-Formulaic_Theory\n     ^     &#34;orange  n. 1 and  adj. 1&#34;.  Oxford English Dictionary online. Oxford: Oxford University Press. 2013 .  (subscription required)\n  ^    Reece, Steve (2009).  Homer&#39;s Winged Words: The Evolution of Early Greek Epic Diction in the Light of Oral Theory. Leiden and Boston: Brill.  ISBN\u00a0  978-90-04-17441-2.  Also, Reece, Steve, &#34;Some Homeric Etymologies in the Light of Oral-Formulaic Theory,&#34;  Classical World 93.2 (1999) 185-199.  Some Homeric Etymologies in the Light of Oral-Formulaic Theory\n ^     a     b    Bourne, Edward G. (1887). &#34;The Derivation of Stamboul&#34;.  American Journal of Philology. The Johns Hopkins University Press.  8 (1): 78\u201382.  doi: 10.2307/287478.  JSTOR\u00a0 287478.\n ^  Marek Stachowski, Robert Woodhouse, &#34;The Etymology of \u0130stanbul: Making Optimal Use of the Evidence&#34;  Studia Etymologica Cracoviensia  20: 221\u2013245 (2015)  doi: 10.4467/20843836SE.15.015.2801\n ^     a     b     c  C. Desimoni, V. Belgrano, eds., &#34;Atlante Idrografico del Medio Evo posseduto dal Prof. Tammar Luxoro, Pubblicata a Fac-Simile ed Annotato&#34;,  Atti della Societ\u00e0 Ligure di Storia Patria, Genoa, 1867  5: 103  cf.  Luxoro Atlas\n ^     a     b   Thomas Abel Brimage Spratt,  Travels and Researches in Crete, 1865, chapter XIX,  p. 201\n   Hendrickson, Robert.  QPB Encyclopedia of Word and Phrase Origins. New York: Facts on File, Inc., 1998.\n Reece, Steve.  Homer&#39;s Winged Words: The Evolution of Early Greek Epic Diction in the Light of Oral Theory. Leiden and Boston: Brill, 2009. [This book is concerned primarily with junctural metanalysis in ancient Greek, but it includes a chapter on Middle English, and it catalogs examples in many other languages: Sanskrit, Tocharian, Old Church Slavic, Latin, Frankish, Venetian, Turkish, Italian, French, Spanish, Haitian, German, Dutch, Irish, Gaelic, Welsh, and Arabic.]\n  Pickett, Joseph P.  The American Heritage dictionary of the English language.\u20144th ed. New York: Houghton Mifflin Co., 2000. [also: * Morris, William.  The American Heritage dictionary of the English language.\u2014new college ed. Boston: Houghton Mifflin Co., 1976. [also: &#34;New college edn&#34;, ed. William Morris. 1976]\n Vizetelly, Frank H.  Funk &amp; Wagnalls Practical Standard Dictionary of the English Language New York: Funk &amp; Wagnalls Co., 1931.", "posttime": "2021-08-03 03:01:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5305\u56f4,rebracketing,\u82f1\u8bed", "title": "\u91cd\u65b0\u5305\u56f4", "title_en": "Rebracketing", "transed": 1, "url": "https://en.wikipedia.org/wiki/Rebracketing", "via": "", "real_tags": ["\u5305\u56f4", "\u82f1\u8bed"]}, {"category": "", "categoryclass": "", "imagename": "6676e88cac20c507ab0737b0613c4954.jpeg", "infoid": 1071257, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8377\u5170\u963f\u7eb3\u59c6\uff08\u66fe\u683c\u65b0\u95fb\uff09\u2014\u2014\u5728\u8377\u5170\u963f\u7eb3\u59c6\u9547\u9644\u8fd1\uff0c\u4e00\u540d\u4e1a\u4f59\u6444\u5f71\u5e08\u62cd\u4e0b\u4e86\u4e00\u53ea\u5012\u98de\u7684\u6df1\u7070\u68d5\u8272\u8c46\u9e45\u3002\u8fd9\u79cd\u52a8\u4f5c\u79f0\u4e3a\u201c\u55d6\u55d6\u201d\uff0c\u662f\u6307\u5927\u96c1\u5c06\u8eab\u4f53\u5012\u8f6c\uff0c\u5c06\u9888\u90e8\u548c\u5934\u90e8\u65cb\u8f6c 180 \u5ea6\u5230\u6b63\u5e38\u4f4d\u7f6e\u3002\u8fd9\u79cd\u7a7a\u4e2d\u6742\u6280\u7c7b\u4f3c\u4e8e\u843d\u53f6\uff0c\u53ef\u7528\u4e8e\u8eb2\u907f\u9e1f\u7c7b\u6355\u98df\u8005\u6216\u5728\u6709\u8fd0\u52a8\u6216\u98df\u7269\u730e\u4eba\u7684\u5730\u533a\u957f\u65f6\u95f4\u7f13\u6162\u4e0b\u964d\u3002", "note_en": "ARNHEM, Netherlands (Zenger News) &mdash; A dark gray-brown Bean goose flying upside down was snapped by an amateur photographer near the Dutch town of Arnhem. The maneuver, called whiffling, is when geese roll their body upside down and twist their neck and head 180 degrees around to its normal position. This aerial acrobatic resembles a falling leaf and may be used to avoid avian predators or a long, slow descent over an area where hunters for sport or food are present.", "posttime": "2021-08-03 03:01:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u98de\u884c,flying,\u963f\u7eb3\u59c6", "title": "\u4e13\u5bb6\u8bf4\uff0c\u9e45\u5012\u7acb\u98de\u884c\u53ea\u662f\u5728\u70ab\u8000", "title_en": "Goose flying upside down is simply showing off, say experts", "transed": 1, "url": "https://wgme.com/news/offbeat/goose-flying-upside-down-is-simply-showing-off-say-experts", "via": "", "real_tags": ["\u98de\u884c", "flying", "\u963f\u7eb3\u59c6"]}, {"category": "", "categoryclass": "", "imagename": "2332b9ac4bd4797d1fcc0e08b2ff9aac.png", "infoid": 1071256, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5b8c\u5168\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e00\u70b9\u3002\u6709\u5f88\u591a\u4e8b\u60c5\u6211\u6ca1\u6709\u5199\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684 SO \u7b54\u6848\uff0c\u6709\u51e0\u4e2a\u66ff\u4ee3\u65b9\u6848\uff0c\u5df2\u7ecf\u5b58\u5728\u3002\u4f46\u6211\u610f\u8bc6\u5230\uff0c\u6839\u636e\u4f7f\u7528\u5de5\u5177\u7684\u7ecf\u9a8c\u6216\u975e\u5e38\u5177\u4f53\u7684\u7528\u4f8b\u6765\u63cf\u8ff0\u89e3\u51b3\u65b9\u6848\u7684\u6280\u672f\u5185\u5bb9\u4ecd\u6709\u7a7a\u95f4\u3002\u6b64\u7c7b\u5185\u5bb9\u4e0e SO \u7684\u76ee\u6807\u53d7\u4f17\u4e0d\u540c\u3002\u5b83\u9002\u7528\u4e8e\u5e0c\u671b\u89e3\u51b3\u975e\u5e38\u5177\u4f53\u95ee\u9898\u7684\u66f4\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u3002\u66f4\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u592a\u53ef\u80fd\u9996\u5148\u53d1\u5e03\u95ee\u9898\uff0c\u5e76\u4e14\u66f4\u6709\u53ef\u80fd\u7834\u89e3\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5bf9\u4e8e Stack Overflow \u6765\u8bf4\uff0c\u5b83\u4e5f\u592a\u5c0f\u4f17\u4e86\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5927\u91cf\u65f6\u95f4\u6765\u7814\u7a76\u5e76\u4e14\u901a\u5e38\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cStack Overflow \u7684\u7b54\u6848\u901a\u5e38\u53ea\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u60a8\u5fc5\u987b\u5c06\u5b83\u4eec\u62fc\u51d1\u5728\u4e00\u8d77\u4ee5\u9002\u5e94\u60a8\u7684\u7528\u4f8b\u3002\u4f8b\u5982\uff0c\u6211\u7684\u535a\u5ba2\u5728\u4e00\u7bc7\u63cf\u8ff0\u5982\u4f55\u5728 Rails \u4e0a\u5e76\u884c\u8bbe\u7f6e Active Directory \u548c\u6570\u636e\u5e93\u767b\u5f55\u7684 5 \u5e74\u591a\u524d\u7684\u5e16\u5b50\u4e2d\u83b7\u5f97\u4e86\u6570\u5343\u6b21\u70b9\u51fb\u3002\u5f53\u6211\u5199\u5b83\u65f6\uff0cStack Overflow \u4e0a\u6709\u51e0\u4e2a\u5173\u4e8e\u5982\u4f55\u8bbe\u7f6e LDAP \u767b\u5f55\u7684\u7b54\u6848\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u6db5\u76d6\u4e86\u6211\u7684\u6574\u4e2a\u7528\u4f8b\u3002\u89e3\u51b3\u65b9\u6848\u6216\u60a8\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u60a8\u80fd\u591f\u9605\u8bfb\u6e90\u4ee3\u7801\u6216\u6587\u6863\n\u9605\u8bfb\u6587\u6863\u548c\u6e90\u4ee3\u7801\u662f\u5b66\u4e60\u6280\u80fd\u3002\u5982\u679c\u60a8\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u63d0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u6216\u8005\u5b66\u5230\u4e86\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u503c\u5f97\u5199\u7684\u3002\u4f8b\u5982\uff0c\u6211\u590d\u5236\u4e86 mysql2 gem \u7248\u672c\u548c MySQL \u670d\u52a1\u5668\u7684\u517c\u5bb9\u6027\u5217\u8868\uff0c\u8be5\u5217\u8868\u4ec5\u5728 mysql gem \u7684 rdoc \u9875\u9762\u5e95\u90e8\u4ee5\u70b9\u5217\u8868\u5f62\u5f0f\u627e\u5230\uff0c\u6211\u4e4b\u524d\u81f3\u5c11\u9519\u8fc7\u4e86 3 \u6b21\u3002\u60a8\u60f3\u51fa\u7684\u89e3\u51b3\u65b9\u6848\u662f\u56e0\u4e3a\u60a8\u6709\u8db3\u591f\u7684\u6280\u80fd\u6765\u8986\u76d6\u6216\u6269\u5c55\u5e93\u7684\u4e00\u90e8\u5206 \u51ed\u501f\u7ecf\u9a8c\uff0c\u60a8\u53ef\u4ee5\u60f3\u51fa\u4fee\u6539\u5e93\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u5355\u72ec\u5904\u7406\u6bcf\u4e2a\u6848\u4f8b\u3002\u76f8\u53cd\uff0c\u56fe\u4e66\u9986\u5c06\u80fd\u591f\u59cb\u7ec8\u5982\u4e00\u5730\u5904\u7406\u5b83\u4eec\u3002\u5728\u5bf9\u5de5\u5177\u6709\u66f4\u591a\u7ecf\u9a8c\u7684\u540c\u65f6\uff0c\u60a8\u4e00\u5b9a\u4f1a\u53d1\u73b0\u4e0d\u90a3\u4e48\u660e\u663e\u7684\u4e8b\u60c5\u3002\u5b83\u4eec\u53ef\u80fd\u88ab\u8bb0\u5f55\u5728\u6848\uff0c\u4f46\u6709\u526f\u4f5c\u7528\u6216\u4e0d\u5b8c\u5168\u76f4\u89c2\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5e76\u53ef\u80fd\u8ba4\u4e3a\u4ed6\u4eec\u7684\u4ee3\u7801\u8fd8\u6709\u5176\u4ed6\u95ee\u9898\u3002\u4e00\u4e2a\u7ecf\u5178\uff08\u4f46\u4f17\u6240\u5468\u77e5\uff09\u7684\u4f8b\u5b50\u662f JavaScript \u7684 atob \u548c btoa\u3002\u4f8b\u5982\uff0c\u6211\u53d1\u73b0 MySQL \u65e0\u6cd5\u89e3\u6790\u6ca1\u6709\u65e5\u671f\u7684 yyyy-ww \u65e5\u671f\u683c\u5f0f\uff0c\u5e76\u4e14\u5728\u6587\u6863\u4e2d\u6ca1\u6709\u660e\u786e\u63d0\u5230\u7684\u65f6\u95f4\u3002\u5373\u4f7f\u6587\u6863\u786e\u5b9e\u63d0\u5230\u73b0\u5728\u6211\u4ecd\u7136\u5076\u5c14\u4f1a\u70b9\u51fb\u8be5\u5e16\u5b50\u3002\u5f53\u65b0\u5de5\u5177\u53d1\u5e03\u65f6\uff0c\u9488\u5bf9\u521d\u5b66\u8005\u7684\u6559\u7a0b\u901a\u5e38\u5e76\u4e0d\u90a3\u4e48\u5145\u5b9e\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5\u65b0\u4e8b\u7269\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5b83\u4eec\u7f16\u5199\u66f4\u597d\u7684\u6559\u7a0b\u3002\u8fd9\u53ef\u80fd\u662f\u6210\u719f\u7684\u6559\u7a0b\u6216\u53ea\u662f\u7279\u5b9a\u7684\u90e8\u5206\u3002\n\u4f8b\u5982\uff0c\u5f53\u6211\u5c1d\u8bd5\u4f7f\u7528 Flutter \u65f6\uff0c\u8bbf\u95ee\u5171\u4eab\u9996\u9009\u9879\u548c\u6d88\u606f\u4f20\u9012\u7684\u6559\u7a0b\u4e0d\u662f\u5f88\u6e05\u695a\u3002\u4ed6\u4eec\u5c06\u51e0\u4e2a\u4e0d\u540c\u7684\u4e3b\u9898\u5408\u5e76\u5230\u4e00\u4e2a\u6559\u7a0b\u4e2d\uff0c\u4f46\u9057\u6f0f\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u6211\u7f16\u5199\u4e86\u6709\u5173\u5728 Flutter \u4e2d\u8bbf\u95ee\u5171\u4eab\u9996\u9009\u9879\u4ee5\u53ca\u672c\u673a\u4ee3\u7801\u548c\u6d88\u606f\u4f20\u9012\u7684\u7b80\u5355\u6307\u5357\u3002\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u4ed6\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u6570\u5343\u6b21\u89c2\u770b\u3002\u5982\u679c\u60a8\u603b\u662f\u5fd8\u8bb0\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u90a3\u4e48\u5176\u4ed6\u4eba\u4e5f\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u3002\u6240\u4ee5\uff0c\u5199\u4e0b\u4e1c\u897f\u4f9b\u60a8\u53c2\u8003\u662f\u6709\u4ef7\u503c\u7684\u3002\u6211\u7684\u7b2c\u4e00\u7bc7\u535a\u6587\u662f\u5982\u4f55\u5411 Ubuntu 14.0 \u6dfb\u52a0\u4ea4\u6362\u5206\u533a\uff0c\u867d\u7136\u5b83\u53ef\u80fd\u4e0d\u662f\u6700\u53d7\u6b22\u8fce\u7684\u535a\u6587\uff0c\u4f46\u5b83\u5bf9\u6211\u6765\u8bf4\u4ecd\u7136\u975e\u5e38\u6709\u4ef7\u503c\uff0c\u56e0\u4e3a\u6211\u603b\u662f\u77e5\u9053\u8be5\u5f15\u7528\u4ec0\u4e48\u3002\u968f\u7740\u60a8\u8d8a\u6765\u8d8a\u6709\u7ecf\u9a8c\uff0c\u60a8\u4f1a\u60f3\u51fa\u81ea\u5df1\u7684\u505a\u4e8b\u65b9\u5f0f\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u53ef\u80fd\u4e0d\u662f\u516c\u8ba4\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u4f46\u5bf9\u60a8\u6709\u7528\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u5199\u4f5c\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u7ecf\u9a8c\u521b\u4f5c\u5927\u91cf\u5185\u5bb9\u3002\u5199\u4e0b\u975e\u5e38\u5177\u4f53\u7684\u60c5\u51b5\u53ef\u80fd\u610f\u5473\u7740\u5982\u679c\u4f60\u5148\u5230\u90a3\u91cc\uff0c\u4e00\u4e2a\u95ee\u9898\u751a\u81f3\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u53d1\u5e03\u3002", "note_en": "I can absolutely relate to this. There are many things I didn\u2019t write about because a complete SO answer, with several alternatives, already existed.\n But I\u2019ve realized that there is room for technical content that describes solutions based on experience with tools or with a very specific use-case.\n This type of content is not for the same target audience as SO. It\u2019s for a more experienced dev who is looking to solve a very specific issue. The more experienced dev is less likely to post the question in the first place and more likely to hack a solution of their own.\n It would also be too niche for Stack Overflow because it takes a lot of time to research and is often dependant on context.\n   There are often situations where Stack Overflow answers offer only individual pieces of the solution and you must then piece them together to fit your use-case.\n  For example, my blog has had thousands of hits on a 5+ year old post describing how to  set up Active Directory and database login in parallel on Rails. When I wrote it there were several answers on Stack Overflow on how to set up LDAP login but none of them covered my entire use case.\n Solutions or things you learned because you\u2019re able to read the source or the docs\n Reading the docs and the source code are learned skills. If you\u2019re able to do that, and you come up with solutions, or learn interesting things, then that\u2019s worth writing about.\n For example,  I copied the compatibility list for  mysql2 gem versions and MySQL server that was only found on the bottom of the rdoc page of the mysql gem in point list form that I had missed at least three times previously.\n Solutions you came up with because you are skilled enough to override or extend part of a library\n With experience, you can come up with solutions that modify libraries. This is helpful because it means not having to handle each case individually in your code. Instead, the library would be able to consistently handle them.\n    While getting more experienced with tools you\u2019re bound to discover things that are less obvious. They might be documented but have side effects or aren\u2019t entirely intuitive. Others might not be aware of these things and might think there\u2019s something else wrong with their code. A classic (but well known) example of this is JavaScript\u2019s   atob and  btoa.\n For instance, I found out that  MySQL cannot parse yyyy-ww date format without a day and at the time that was not explicitly mentioned in the docs. Even though the docs do mention that now I still get occasional hits on that post.\n  When new tools are released, tutorials for beginners often aren\u2019t all that fleshed out. So, if you\u2019re into experimenting with new things, you can also write better tutorials for them. This might be full-fledged tutorials or just specific pieces.\n For instance, when I experimented with Flutter, the tutorials for accessing shared preferences and message passing were not very clear. They combined several different topics into one tutorial and missed some common edge cases. So, I wrote simple guides on  accessing shared preferences in Flutter and native code and  message passing. Over the past two years they\u2019ve had thousands of views.\n  If you keep forgetting something simple, chance are others are too. So, there is value in writing down things for your reference.\n One of my first posts was  how to add a swap partition to Ubuntu 14.0 and while it might not be the most popular of posts it was still very valuable to me because I always knew what to refer to.\n  As you get more experienced, you\u2019ll come up with your own ways of doing things that might not be the accepted best practice but work for you.\n   So, if you would like to write, there\u2019s plenty of content you can create based on your experience. Writing about very specific situations might mean that a question never even ends up being posted if you got there first.", "posttime": "2021-08-03 03:00:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u535a\u5ba2,overflow,blogging,\u53ef\u80fd", "title": "Stack Overflow \u65f6\u4ee3\u7684\u6280\u672f\u535a\u5ba2", "title_en": "Technical blogging in the era of Stack Overflow", "transed": 1, "url": "https://ognjen.io/technical-blogging-in-time-of-stack-overflow/", "via": "", "real_tags": ["\u535a\u5ba2", "overflow", "blogging", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u603b\u7ed3\u6211\u4ece\u5c1d\u8bd5\u66f4\u6df1\u5165\u5730\u7406\u89e3\u7f16\u7a0b\u4e2d\u7684\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\uff1aPython \u7684\u751f\u6210\u5668\u548c Scheme \u7684\u5ef6\u7eed\u3002\u76ee\u7684\u4e0d\u662f\u6559\u6388 Python \u6216 Scheme \u7f16\u7a0b\u3002\u76f8\u53cd\uff0c\u6211\u60f3\u8981\u505a\u7684\u662f\u8bc1\u660e\u751f\u6210\u5668\u662f\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u6784\u9020\u7684\u7279\u4f8b - \u5ef6\u7eed\u3002\u5ef6\u7eed\u5141\u8bb8\u7a0b\u5e8f\u5458\u53d1\u660e\u65b0\u7684\u63a7\u5236\u7ed3\u6784\uff0c\u5b83\u662f\u6784\u5efa\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668\u3001\u534f\u540c\u7a0b\u5e8f\u548c\u8bb8\u591a\u5176\u4ed6\u6709\u7528\u7ed3\u6784\u7684\u57fa\u7840\u3002\u6211\u53d1\u73b0\u4ece\u66f4\u6df1\u5165\u548c\u66f4\u5e7f\u6cdb\u7684\u5ef6\u7eed\u89d2\u5ea6\u7406\u89e3\u751f\u6210\u5668\u7684\u5de5\u4f5c\u539f\u7406\u975e\u5e38\u6709\u7528\u3002\u5ef6\u7eed\u5728\u7f16\u7a0b\u8bed\u8a00\u7406\u8bba\u4e2d\u5df2\u7ecf\u5f88\u6210\u719f\uff08\u5b83\u662f\u5728 70 \u5e74\u4ee3\u5f15\u5165\u7684\uff09\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u8fd8\u6ca1\u6709\u6210\u4e3a\u4e3b\u6d41\u3002\u4f46\u662f\uff0c\u6211\u6000\u7591\u5728\u4e91\u8ba1\u7b97\u548c\u5927\u6570\u636e\u65f6\u4ee3\uff0c\u60f0\u6027\u6c42\u503c\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u5ef6\u7eed\u4f1a\u53d8\u5f97\u66f4\u52a0\u7a81\u51fa\uff0c\u5c31\u50cf\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u8bb8\u591a\u5176\u4ed6\u6982\u5ff5\u4e00\u6837\u3002\u6211\u8ba4\u4e3a\u503c\u5f97\u4f60\u82b1\u65f6\u95f4\u5728\u4f60\u7684\u5468\u8fb9\u89c6\u89c9\u4e2d\u4e3a\u8fd9\u4e2a\u6982\u5ff5\u4fdd\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089 Scheme \u7684\u4eba\uff1aScheme \u662f\u6700\u53e4\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff1aLISP \u7684\u4e00\u79cd\u76f8\u5bf9\u73b0\u4ee3\u7684\u65b9\u8a00\u3002 Scheme \u662f\u4e00\u79cd\u6781\u7b80\u4f46\u6781\u5bcc\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u8fd9\u4f7f\u5176\u6210\u4e3a\u8bd5\u9a8c\u9ad8\u7ea7\u7f16\u7a0b\u6982\u5ff5\u7684\u7406\u60f3\u5de5\u5177\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Scheme \u7ecf\u5e38\u88ab\u7528\u4f5c\u6559\u6388\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5de5\u5177\uff0c\u4ee5\u53ca\u7f16\u7a0b\u8bed\u8a00\u7814\u7a76\u4eba\u5458\u7684\u6e38\u4e50\u573a\u3002\u5ef6\u7eed\u5e76\u4e0d\u662f Scheme \u72ec\u6709\u7684\uff0c\u4f46 Scheme \u662f\u7b2c\u4e00\u79cd\u5c06\u5ef6\u7eed\u89c6\u4e3a\u4e00\u6d41\u5b9e\u4f53\u7684\u8bed\u8a00\uff0c\u4ece\u800c\u4f7f\u5b83\u4eec\u6613\u4e8e\u64cd\u4f5c\u3002\u8fd9\u662f\u63a2\u7d22\u5ef6\u7eed\u7684\u6700\u81ea\u7136\u7684\u573a\u6240\u3002\u5728 Python \u4e2d\uff0c\u751f\u6210\u5668\u4e3b\u8981\u7528\u4e8e\u4f7f\u590d\u6742\u7684\u5faa\u73af\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u7ef4\u62a4\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u662f\u8fed\u4ee3\u5668\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u5728\u50cf c \u8fd9\u6837\u7684\u4f20\u7edf\u8bed\u8a00\u4e2d\uff0cfor \u5faa\u73af\u5982\u4e0b\u6240\u793a\uff1a \u7b2c\u4e00\u884c\u6307\u5b9a\u8981\u8fed\u4ee3\u7684\u6570\u5b57\u5e8f\u5217\u3002\u7b2c\u4e8c\u884c\u662f\u6211\u4eec\u60f3\u7528\u8fd9\u4e9b\u6570\u5b57\u505a\u4ec0\u4e48\u3002\u4f7f\u7528 Python \u4e2d\u7684\u751f\u6210\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u7ed9\u51fa\u7684\u793a\u4f8b\u4e00\u6837\u7f16\u5199\u8fd9\u79cd\u7c7b\u578b\u7684\u5faa\u73af\u3002\u5728\u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 squared_ints() \u751f\u6210\u5668\u4e00\u4e2a\u4e00\u4e2a\u5730\u4ea7\u751f\u4e00\u4e2a\u5e73\u65b9\u6574\u6570\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528 sum_of_squares() \u51fd\u6570\u5c06\u5b83\u4eec\u7d2f\u52a0\uff0c\u76f4\u5230\u603b\u548c\u5927\u4e8e\u7a0b\u5e8f\u5458\u6307\u5b9a\u7684\u754c\u9650\uff1a def squared_ints()\uff1a &#39;&#39;&#39; Infinite generator Return i^2 for i = 1, 2, ... &#39;&#39;&#39; i = 1 while True: yield i *i # \u6b63\u662f\u8fd9\u4e2a yield \u4f7f\u8fd9\u4e2a\u51fd\u6570\u6210\u4e3a\u4e00\u4e2a generator i += 1 def sum_of_squares( bound): &#39;&#39;&#39; \u8fd4\u56de\u5927\u4e8e\u754c\u9650\u7684\u5e73\u65b9\u6574\u6570\u7684\u6700\u5c0f\u603b\u548c &#39;&#39;&#39; g = squared_ints() s = 0 for i in g: # \u8fed\u4ee3\u751f\u6210\u5668 gs += i # \u5982\u679c s &gt;bound\uff0c\u5219\u7d2f\u79ef\u603b\u548c s : # \u5982\u679c s \u5927\u4e8e n \u5219\u9000\u51fa\u5faa\u73af return s squared-ints() \u7684\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u4f46\u662f yield \u5173\u952e\u5b57\u7684\u5b58\u5728\u4f7f\u5b83\u6210\u4e3a\u4e00\u4e2a\u751f\u6210\u751f\u6210\u5668\u7684\u51fd\u6570 [1]\u3002\u5728\u751f\u6210\u5668 g \u4e0a\u4f7f\u7528 next() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6570\u5b57\u662f\u4e00\u4e00\u751f\u6210\u7684\u3002\u751f\u6210\u5668\u4e0e Python \u4e2d\u7684\u5faa\u73af\u914d\u5408\u5f97\u5f88\u597d\u3002\u5728 sum_of_squares() \u4e2d\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u7528 for \u5faa\u73af\u8fed\u4ee3\u751f\u6210\u5668\u3002\n\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53d6\u5f97\u7684\u6210\u5c31\u3002\u5728 c \u98ce\u683c\u7684\u5faa\u73af\u4e2d\uff0c\u5e8f\u5217\u7684\u751f\u6210\u548c\u6d88\u8017\u662f\u7d27\u5bc6\u8026\u5408\u7684\u3002\u7136\u800c\uff0c\u5728\u4e0a\u9762\u7684 Python \u4ee3\u7801\u4e2d\uff0c\u5b83\u4eec\u88ab\u5206\u89e3\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u5b9e\u4f53\u3002\u7531\u4e8e\u751f\u6210\u5668\u53ef\u4ee5\u6784\u5efa\u5728\u5176\u4ed6\u751f\u6210\u5668\u4e0a\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u751f\u6210\u5668\u8fdb\u4e00\u6b65\u5206\u89e3\u4e3a\u66f4\u7b80\u5355\u7684\u751f\u6210\u5668\u94fe\u3002\u8fd9\u4f7f\u5f97\u590d\u6742\u7684\u5faa\u73af\u66f4\u52a0\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\uff0c\u56e0\u6b64\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u7ef4\u62a4\u3002\u53e6\u4e00\u4e2a\u6539\u8fdb\u662f\u751f\u6210\u5668\u4ee3\u7801\u6ca1\u6709\u5bf9\u5e8f\u5217\u7684\u957f\u5ea6\u8bbe\u7f6e\u9650\u5236\u3002\u7406\u8bba\u4e0a\u662f\u65e0\u9650\u7684\u3002\u751f\u6210\u7684\u5e8f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u7531\u6d88\u8017\u8be5\u5e8f\u5217\u7684\u4ee3\u7801\u51b3\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u751f\u6210\u5668\u4ee3\u7801\u53ef\u4ee5\u5c3d\u53ef\u80fd\u901a\u7528\uff0c\u5c06\u8ba1\u7b97\u6548\u7387\u7559\u7ed9\u6d88\u8d39\u8005\u3002\u5728\u751f\u6210\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u8ba1\u7b97\u6210\u672c\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u201c\u61d2\u60f0\u201d\u662f\u975e\u5e38\u53ef\u53d6\u7684\u3002\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5173\u952e\u5b57\u6536\u76ca\u5b9e\u73b0\uff01\u8fd9\u5f88\u795e\u5947\uff0c\u4e0d\u662f\u5417\uff1f\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u6bcf\u6b21\u8c03\u7528 yield \u65f6\uff0c\u51fd\u6570\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u51bb\u7ed3\uff0c\u5e76\u4e14\u63a7\u5236\u6d41\u8fde\u540c\u751f\u6210\u7684\u503c\u4e00\u8d77\u4ea4\u7ed9\u8c03\u7528\u8005 [2]\u3002\u4e0b\u4e00\u6b21\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u63a7\u5236\u6d41\u8fd4\u56de\u5230\u751f\u6210\u5668\u7684\u51bb\u7ed3\u72b6\u6001\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u884c\u4e3a\u6765\u8bf4\uff0c\u591a\u4e48\u7b80\u5355\u800c\u4f18\u96c5\u7684\u8bed\u6cd5\uff01\u8fd9\u5c31\u50cf\u9b54\u672f\u3002\u7136\u800c\uff0c\u6211\u7684\u4e00\u90e8\u5206\uff08\u4e5f\u8bb8\u662f\u6211\u7684\u7406\u8bba\u5bb6\uff09\u5bf9\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u795e\u5947\u884c\u4e3a\u611f\u5230\u4e0d\u8212\u670d\u3002 yield \u5982\u4f55\u4ece\u51fd\u6570\u5b9a\u4e49\u4e2d\u521b\u5efa\u751f\u6210\u5668\uff08\u5373\u751f\u6210\u5668\u7c7b\u7684\u5bf9\u8c61\uff09\uff1f\u4e3a\u4ec0\u4e48\u5728\u8bed\u8a00\u7684\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u53d1\u73b0\u8fd9\u79cd\u9b54\u6cd5\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u8c03\u7528 yield\uff1f\u6b64\u5916\uff0c\u751f\u6210\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7528\u4e8e\u5236\u4f5c\u534f\u7a0b\u7684\u5de5\u5177\u2014\u2014\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u4e3b\u9898\u3002\u8d27\u5e01\u4e0e\u8fed\u4ee3\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u7531\u4e8e\u6240\u6709\u8fd9\u4e9b\u884c\u4e3a\u4f3c\u4e4e\u90fd\u4ee5\u4e00\u79cd\u7279\u522b\u7684\u65b9\u5f0f\u4e0e\u4ea7\u91cf\u76f8\u5173\u8054\uff0c\u6211\u503e\u5411\u4e8e\u6309\u7167\u60ef\u7528\u7684\u65b9\u5f0f\u7f16\u5199\u751f\u6210\u5668\uff0c\u9075\u5faa\u719f\u8bb0\u7684\u914d\u65b9\u800c\u4e0d\u8003\u8651\u5e55\u540e\u7684\u91cd\u578b\u673a\u68b0\u3002\u6211\u603b\u662f\u6709\u4e00\u79cd\u5520\u53e8\u7684\u611f\u89c9\uff0c\u6709\u4e00\u4e2a\u6211\u770b\u4e0d\u5230\u7684\u66f4\u5927\u7684\u56fe\u666f\u3002\u90a3\u65f6\u6211\u610f\u8bc6\u5230\u6211\u4ee5\u524d\u66fe\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u9605\u8bfb\u8fc7\u7c7b\u4f3c\u7684\u60f3\u6cd5\u3002\u5f53\u6211\u5728\u5927\u5b66\u5b66\u4e60\u7f16\u7a0b\u65f6\uff0c\u6211\u6709\u4e00\u4efd Springer \u548c Friedman \u6240\u8457\u7684 Scheme \u548c\u7f16\u7a0b\u827a\u672f\u3002\u6709\u4e00\u7ae0\u662f\u5173\u4e8e\u201c\u5ef6\u7eed\u201d\u8fd9\u4e2a\u795e\u79d8\u6982\u5ff5\u7684\uff0c\u5728\u90a3\u91cc\u8ba8\u8bba\u4e86\u6240\u6709\u8fd9\u4e9b\u4e1c\u897f\u3002\u6211\u8df3\u8fc7\u4e86\u6574\u7ae0\uff0c\u56e0\u4e3a\u6211\u65e0\u6cd5\u7406\u89e3\u5ef6\u7eed\u6709\u4ec0\u4e48\u597d\u5904\u3002\u4e5f\u8bb8\u662f\u65f6\u5019\u91cd\u65b0\u5ba1\u89c6\u8fd9\u4e2a\u8bdd\u9898\u4e86\u3002\u5728\u6211\u4eec\u7ee7\u7eed\u8ba8\u8bba\u5ef6\u7eed\u4e4b\u524d\uff0c\u8bf7\u653e\u5fc3\uff0cScheme \u4e2d\u63d0\u4f9b\u4e86 Python \u98ce\u683c\u7684\u751f\u6210\u5668\u3002\u5b83\u4eec\u4e0d\u662f\u8bed\u8a00\u672c\u8eab\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u901a\u8fc7\u51c6\u6807\u51c6\u5e93\uff08\u5373 SRFI-158\uff09\u4e2d\u7684 make-coroutine-generator \u51fd\u6570\uff0c\u524d\u9762\u8ba8\u8bba\u7684 squared-ints \u751f\u6210\u5668\u53ef\u4ee5\u5728 Scheme \u4e2d\u7f16\u5199\u4e3a\uff1a\uff08\u5b9a\u4e49 squared- ints ;;; squared-ints \u662f\u4e00\u4e2a\u51fd\u6570 (lambda)\uff0c\u5b83\u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668 ( lambda() ( make-coroutine-generator ( lambda ( yield) ( let loop (( i 1)) ) ;;; \u5b9a\u4e49\u9012\u5f52\u51fd\u6570\u201c\u5faa\u73af\u201d\u5b83\u589e\u52a0\u4e86 i\uff0c\u4ece 1 ( yield ( * ii)) ( loop ( + i 1)))))))(define g (squared-ints)) \u5f00\u59cb\uff1b;;\u5236\u4f5c\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u5c06\u5176\u8d4b\u503c\u7ed9\u201cg\u201d \u8fd9\u770b\u8d77\u6765\u4e0d\u50cf Python \u4ee3\u7801\u90a3\u4e48\u4f18\u96c5\uff0c\u4f46\u903b\u8f91\u51e0\u4e4e\u76f8\u540c [3]\u3002\u8fd9\u91cc\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cScheme \u4e2d\u7684 yield \u4e0d\u662f\u5d4c\u5165\u5230\u89e3\u91ca\u5668\u4e2d\u7684\u4fdd\u7559\u5173\u952e\u5b57\u3002\u76f8\u53cd\uff0c\u4ea7\u751f\u63a7\u5236\u7684\u673a\u5236\u662f\u901a\u8fc7\u64cd\u7eb5\u201c\u5ef6\u7eed\u201d\u6765\u5b9e\u73b0\u7684\u2014\u2014\u8fd9\u662f\u8bed\u8a00\u7684\u57fa\u672c\u6784\u5efa\u5757\uff0c\u8868\u793a\u5f85\u6267\u884c\u7684\u8ba1\u7b97\u6b65\u9aa4\u3002\u4e8b\u5b9e\u4e0a\uff0cmake-coroutine-generator \u53ea\u662f\u4e00\u4e2a\u7531\u5927\u7ea6 10 \u884c\u4ee3\u7801\u7ec4\u6210\u7684\u5e38\u89c4 Scheme \u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u7531\u4efb\u4f55\u6709\u80fd\u529b\u7684 Scheme \u7a0b\u5e8f\u5458\u5b9e\u73b0\uff0c\u65e0\u9700\u592a\u591a\u5de5\u4f5c\u3002\u8fd9\u600e\u4e48\u53ef\u80fd\uff1f\u795e\u5947\u7684\u662f\u5728 make-coroutine-generator \u4e2d\u4f7f\u7528 call/cc\uff08\u4ee3\u8868\u201c\u5f53\u524d\u7ee7\u7eed\u8c03\u7528\u201d\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u6d89\u53ca\u7279\u6b8a\u7684\u7c7b\u6216\u5173\u952e\u5b57\u3002 make-coroutine-generator\u3001yield \u548c g \u90fd\u53ea\u4e0d\u8fc7\u662f\u5e38\u89c4\u51fd\u6570\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u901a\u8fc7\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u5b83\u6765\u8bf7\u6c42\u4e0b\u4e00\u4e2a\u503c\uff1a\nScheme \u751f\u6210\u5668\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\u8be5\u5e93\u6ca1\u6709\u5f15\u5165\u65b0\u7684\u5b9e\u4f53\u7c7b\uff0c\u56e0\u6b64\u751f\u6210\u5668\u53ef\u4ee5\u4e0e\u8bed\u8a00\u7684\u5176\u4f59\u90e8\u5206\u65e0\u7f1d\u96c6\u6210\u3002\u7b80\u5355\u5730\u8bf4\uff0ccontinuation \u662f\u4e00\u7cfb\u5217\u5f85\u6267\u884c\u7684\u8ba1\u7b97\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c0 + 1 + 2 \u5728 Scheme \u4e2d\u8868\u793a\u4e3a (+ 2 (+ 1 0))\u3002\u4ece0\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u662f\u5c061\u52a0\u5230\u5b83\uff0c\u7136\u540e\u5c062\u52a0\u5230\u7ed3\u679c\u4e2d\u3002\u56e0\u6b64\uff0c\u5728\u6b64\u4e0a\u4e0b\u6587\u4e2d 0 \u7684\u5ef6\u7eed\u662f\u8fd9\u4e24\u4e2a\u52a0\u6cd5\u3002 Scheme \u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\u5ef6\u7eed\u4e0d\u662f\u4e00\u4e2a\u5947\u7279\u7684\u6784\u9020\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8f7b\u677e\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5ef6\u7eed\u5c31\u662f (lambda (x) (+ 2 (+ 1 x)))\u3002\u5b83\u7b49\u4ef7\u4e8e Python \u4e2d\u7684 lambda x: x + 1 + 2\u3002\u5728 Scheme \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a call-with-current-continuation\uff08\u6216\u7b80\u79f0 call/cc\uff09\u7684\u51fd\u6570\u6765\u6355\u83b7\u5f53\u524d\u7684 continuation\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6709\u65f6\u79f0\u4e3a\u63a5\u6536\u5668\u3002\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u8fd9\u4e2a\u7ed3\u6784\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u6765\u9002\u5e94\u5b83\u3002\u8003\u8651\u8fd9\u4e2a\u7b80\u5355\u7684\u63a5\u6536\u5668\uff0c\u5b83\u53ea\u662f\u5c06\u5ef6\u7eed\u5b58\u50a8\u5728\u5168\u5c40\u53d8\u91cf\u201cc\u201d\u4e2d\u3002 (\u5b9a\u4e49 c #f) ;;;\u6700\u521d\uff0c\u5168\u5c40\u53d8\u91cf c \u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\uff08\u5b9a\u4e49 store-continuation ;;; \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 store-continuation ( lambda ( cc) ;;; \u5b83\u63a5\u6536\u4e00\u4e2a continuation ( set! c cc) ;;; \u5c06\u5b83\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf c 0 )) ;;;\u5e76\u8fd4\u56de 0 \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6355\u83b7 (+ 2 (+ 1 0)) \u4e2d 0 \u7684\u5ef6\u7eed\uff1a &gt; c ;; c #f \u4e2d\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9 &gt; ( + 2 ( + 1 ( call/cc store-continuation))) 3 &gt; c # &lt;procedure ( continuation . results1887) &gt;\n(+2 (+ 1 (call/cc store-continuation))) \u7684\u8fd4\u56de\u503c\u5e76\u4e0d\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\uff0c\u5728call/cc\u8c03\u7528\u4e4b\u540e\uff0cc\u53d8\u91cf\u5b58\u50a8\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u662f\u6211\u4eec\u6355\u83b7\u7684continuation\uff01\u6211\u4eec\u770b\u4e0d\u5230\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u88ab\u7f16\u8bd1\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u5b83\u662f\u6709\u6548\u7684(lambda (x) (+2 (+ 1 x)))\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u5b57\u8c03\u7528c\u65f6\uff0c\u8fd4\u56de\u503c\u662f\u8f93\u5165\u52a0 3\u3002\u8ba9\u6211\u4eec\u4f7f\u7528 call/cc \u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u7528\u5b83\u6765\u5b9e\u73b0Scheme\u4e2dPython\u51fd\u6570sum_of_squares()\u7684\u903b\u8f91\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5728\u5faa\u73af\u4e2d\u8fed\u4ee3\u751f\u6210\u5668\uff0c\u7d2f\u52a0\u603b\u548c\uff0c\u5f53\u603b\u548c\u5927\u4e8e\u67d0\u4e2a\u754c\u9650\u65f6\u505c\u6b62\u3002 (define sum-of-squares ( lambda ( bound) ;;define (sum-of-squares bound) ( call/cc ( lambda ( break) ;; \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536\u8005\uff1a\u9996\u5148\u6355\u83b7\u5230break ( let (( g ( squared-ints))) ;; \u4f7f\u751f\u6210\u5668 g ( let loop (( s 0)) ;; \u5b9a\u4e49\u9012\u5f52\u51fd\u6570\uff08loop s\uff09\uff0c\u5176\u4e2d s \u662f\u7d2f\u52a0\u503c\uff08 let (( new-s ( + s ( g )))) ;; \u8ba1\u7b97\u65b0\u7684\u7d2f\u52a0\u503c ( if ( &gt; new-s bound) ;; \u5982\u679c\u65b0\u7d2f\u52a0\u503c\u5927\u4e8e bound ( break new-s) ;; \u9000\u51fa\u5faa\u73af (loop new-s))) )))))));;\u5426\u5219\uff0c\u4f7f\u7528\u65b0\u7684\u7d2f\u79ef\u503c\u7ee7\u7eed\u5faa\u73af &gt; (sum-of-squares 100) 140 \u5728\u5e73\u65b9\u548c\u51fd\u6570\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u4e4b\u524d\uff0c\u6211\u4f7f\u7528 call/cc \u6765\u6355\u83b7\u5ef6\u7eed\uff0c\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u53d8\u91cf break\u3002\u8bf7\u6ce8\u610f\uff0c\u5728 Scheme \u7684\u8bed\u6cd5\u4e2d\uff0c\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u6b65\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u5728\u4f55\u5904\u8c03\u7528\uff0c\u8c03\u7528break\u90fd\u4f1a\u7acb\u5373\u5b58\u5728\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002\u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u5e76\u4e0d\u592a\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u5927\u578b\u4e14\u6df1\u5ea6\u5d4c\u5957\u7684\u6570\u636e\u7ed3\u6784\uff08\u4f8b\u5982\uff0c\u6811\u6216\u56fe\uff09\uff0c\u60a8\u53ef\u4ee5\u4f18\u96c5\u5730\u8fdb\u884c\u7f16\u7a0b\u9012\u5f52\uff0c\u4f46\u80fd\u591f\u5728\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u65f6\u7acb\u5373\u653e\u5f03\u9012\u5f52\u3002\u8fd9\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u3002\u6709\u4eba\u5c06 call/cc \u79f0\u4e3a\u51fd\u6570\u5f0f\u8bed\u8a00\u7684 GOTO \u8bed\u53e5\uff0c\u4f46\u66f4\u597d\u7684\u8868\u5f81\u662f\u5b83\u662f\u7a0b\u5e8f\u5458\u521b\u5efa\u6838\u5fc3\u8bed\u8a00\u4e2d\u4e0d\u5b58\u5728\u7684\u65b0\u63a7\u5236\u7ed3\u6784\u7684\u901a\u7528\u673a\u5236\u3002\u4f7f\u7528 call/cc\uff0c\u53ef\u4ee5\u6784\u5efa\u6240\u6709\u5f62\u5f0f\u7684\u63a7\u5236\uff0c\u5305\u62ec\u5f02\u5e38\u3001\u56de\u6eaf\u548c\u534f\u7a0b\u3002\u7531\u4e8e\u4e0d\u6d89\u53ca\u9b54\u6cd5\uff0c\u5982\u679c\u60a8\u4e0d\u559c\u6b22\u5b83\u4eec\u7684\u884c\u4e3a\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u8fd9\u4e9b\u7ed3\u6784\u7684\u81ea\u5b9a\u4e49\u7248\u672c\u3002\u8fd8\u53ef\u4ee5\u53d1\u660e\u7279\u5b9a\u4e8e\u95ee\u9898\u57df\u7684\u65b0\u578b\u63a7\u5236\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u5728 Web \u7f16\u7a0b\u4e2d\uff0ccontinuation \u5df2\u88ab\u7528\u4e8e\u63a7\u5236\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u903b\u8f91\uff08\u8bf7\u53c2\u9605\u6b64\u5904\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u7f16\u5199\u4e86\u4e0a\u9762\u7684\u7a0b\u5e8f\u6765\u53cd\u6620 Python \u4ee3\u7801\u7684\u903b\u8f91\u3002\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u9012\u5f52\u6216\u8c03\u7528/cc \u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u76f8\u540c\u7684\u76ee\u6807\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4f7f\u7528\u751f\u6210\u5668\u5e93\u521b\u5efa\u4e86\u7b2c\u4e8c\u4e2a\u65e0\u9650\u751f\u6210\u5668 acc \u6765\u7d2f\u52a0 gen \u751f\u6210\u5668\u4e2d\u5143\u7d20\u7684\u603b\u548c\uff0c\u7136\u540e\u4f7f\u7528 generator-find \u51fd\u6570\u83b7\u53d6 acc \u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8fb9\u754c\u3002\u8fd9\u662f\u94fe\u63a5\u8fed\u4ee3\u5668\u4ee5\u5236\u4f5c\u66f4\u590d\u6742\u8fed\u4ee3\u5668\u7684\u793a\u4f8b\u3002 ( \u5b9a\u4e49\u5e73\u65b9\u548c ( lambda ( bound) ( let* (( gen ( squared-ints) ) ) ;; \u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668 gen ( acc ( make-unfold-generator ;; \u521b\u5efa\u7b2c\u4e8c\u4e2a\u751f\u6210\u5668 acc ( lambda ( s) #f) ;; \u65e0\u505c\u6b62\u6761\u4ef6\uff0c\u4f7f acc \u6210\u4e3a\u65e0\u9650\u751f\u6210\u5668 ( lambda ( s) s) ( lambda ( s) ( + s ( gen))) ;; \u4ece gen 0))) \u7d2f\u79ef\u4e0b\u4e00\u4e2a\u503c ;; \u4ece0 ( generator-find ;; \u5728 acc \u751f\u6210\u5668\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e bound \u7684\u503c ( lambda ( s) ( &gt; s bound)) acc))))\n\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 call/cc \u6765\u4e2d\u65ad\u8fed\u4ee3\u751f\u6210\u5668\u7684\u5faa\u73af\u3002\u8ba9\u6211\u4eec\u7528 call/cc \u6765\u5b9e\u73b0\u751f\u6210\u5668\u672c\u8eab\u3002\u4e3a\u4e86\u5b9e\u73b0\u5b83\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6765\u8ba9\u6b65\u2014\u2014\u5728\u51fd\u6570\u6b63\u5e38\u7ed3\u675f\u4e4b\u524d\u9000\u51fa\u5b83\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5b83\u662f\u5982\u4f55\u5b8c\u6210\u7684\u3002\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4ea7\u751f\u540e\u6062\u590d\u51fd\u6570\u3002\u4e0d\u96be\u770b\u51fa\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u5ef6\u7eed\u3002 (define squared-ints ( lambda () ( let* (( break #f) ;;; \u5c06\u5b58\u50a8\u4e00\u4e2a\u7ee7\u7eed\u4ee5\u4e2d\u65ad\u51fd\u6570 ( resume #f) ;;; \u5c06\u5b58\u50a8\u4e00\u4e2a\u7ee7\u7eed\u4ee5\u5728\u5c48\u670d\u540e\u6062\u590d ( yield ; ) ;; \u5b9a\u4e49\u51fd\u6570 &quot;yield&quot; ( lambda ( value) ( call/cc ;;; \u6355\u83b7\u5f53\u524d\u7684\u5ef6\u7eed ( lambda ( r) ( set!resume r) ;;; \u5c06\u5b83\u5b58\u50a8\u5728 &quot;resume&quot; ( break value))) ))) ;;; \u548c break out ( lambda () ;;; \u5c06\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff08\u4e00\u4e2a\u95ed\u5305\uff09\uff08 call/cc ;;; \u6355\u83b7\u5f53\u524d\u7684\u5ef6\u7eed...\uff08 lambda ( cc) ( set!break cc) ; ;; ...\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u201cbreak\u201d\u4e2d\uff08\u5982\u679c resume ;;; \u5982\u679c\u6b64\u751f\u6210\u5668\u4e4b\u524d\u5df2\u88ab\u8c03\u7528...\uff08 resume &#39;()) ;;; ... \u6062\u590d\u5b83\uff08 let loop (( i 1) ) ;;; \u5426\u5219\uff0c\u5faa\u73af i=1, 2, 3, 4... ( yield ( * ii)) ;;; \u4ea7\u751f i \u7684\u5e73\u65b9 ( loop ( + i 1))))))))) )(define g ( squared-ints)) &gt; ( g) 1 &gt; ( g) 4 &gt; ( g) 9 \u6211\u4ece Vasilij Schneidermann \u5bf9 SRFI-158 \u5e93\u7684\u5b9e\u73b0\u4e2d\u7a0d\u5fae\u4fee\u6539\u4e86\u8fd9\u6bb5\u4ee3\u7801\uff08\u5b8c\u6574\u6e90\u4ee3\u7801\u89c1\u8fd9\u91cc\uff09\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u662f\u4e13\u4e1a Scheme \u7a0b\u5e8f\u5458\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u5413\u4eba\uff0c\u4f46\u903b\u8f91\u975e\u5e38\u7b80\u5355\uff1a\u5bf9\u4e8e\u5faa\u73af\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57 i\uff0c\u9996\u5148\u5c06\u8ba1\u7b97\u7684\u672a\u6765\u5b58\u50a8\u5230\u4e00\u4e2a\u540d\u4e3a resume \u7684\u5185\u90e8\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u5c06 break \u7ee7\u7eed\u8c03\u7528\u4e3a\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u5b58\u5728\u7684\u529f\u80fd\u3002\u4e0b\u4e00\u6b21\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u8c03\u7528 resume continuation\uff0c\u5b83\u5c06\u524d\u8fdb\u5230\u5faa\u73af\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06\u751f\u6210\u5668\u4f5c\u4e3a\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u8fd4\u56de\u3002\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5411\u51fd\u6570\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u8fed\u4ee3\u5f00\u59cb\u540e\u5c06\u6d88\u606f\u53d1\u9001\u5230\u751f\u6210\u5668\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\uff0c\u4f7f\u5f97 (g &#39;reset) \u5c06\u91cd\u7f6e\u8fed\u4ee3\u3002\u7531\u4e8e\u751f\u6210\u5668\u53ea\u662f Scheme \u4e2d\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5e38\u89c4\u51fd\u6570\u8c03\u7528\u81ea\u7136\u5730\u4e0e\u751f\u6210\u5668\u8fdb\u884c\u901a\u4fe1\u3002\u5728 Python \u4e2d\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5411\u751f\u6210\u5668\u53d1\u9001\u6d88\u606f\uff0c\u4f46\u5b83\u9700\u8981\u4f7f\u7528 yield \u5173\u952e\u5b57\u7684\u7279\u6b8a\u8bed\u6cd5\u548c\u751f\u6210\u5668\u7c7b\u7684 .send() \u65b9\u6cd5\u3002\u540c\u6837\uff0c\u5728 Python \u4e2d\u4f7f\u7528\u751f\u6210\u5668\u662f\u60ef\u7528\u7684\uff0c\u5728\u5e55\u540e\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\u3002\u6211\u672c\u6765\u6253\u7b97\u8be6\u7ec6\u4ecb\u7ecd\u534f\u7a0b\uff0c\u56e0\u4e3a Python \u7684\u751f\u6210\u5668\u6559\u7a0b\u548c Scheme \u7684\u5ef6\u7eed\u6559\u7a0b\u90fd\u503e\u5411\u4e8e\u4ee5\u534f\u7a0b\u7ed3\u5c3e\uff08\u591a\u6709\u8da3\uff01\uff09\u3002\u4f46\u662f\uff0c\u6211\u51b3\u5b9a\u53cd\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4f7f\u8ba8\u8bba\u8131\u8f68\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u9886\u57df\u3002\u4f46\u662f\u975e\u5e38\u7b80\u5355\uff0cPython \u4e2d\u7684 yield \u901a\u5e38\u88ab\u8868\u793a\u4e3a\u7f16\u5199\u751f\u6210\u5668\u7684\u7b80\u5316\u65b9\u6cd5\uff0c\u4f46\u5b83\u6240\u505a\u7684\uff0c\u6682\u505c\u51fd\u6570\u7684\u6267\u884c\u5e76\u5177\u6709\u6062\u590d\u5b83\u7684\u80fd\u529b\uff0c\u662f\u4e00\u4e2a\u6bd4\u8fed\u4ee3\u66f4\u901a\u7528\u7684\u6982\u5ff5\u3002\u5b83\u4f7f\u4e00\u4e2a\u4f8b\u7a0b\u53ef\u4ee5\u505a\u5c11\u91cf\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u4f8b\u7a0b\uff0c\u4ece\u800c\u5141\u8bb8\u5b83\u4eec\u5e76\u53d1\u8fd0\u884c\u3002\u8fd9\u4f7f\u6570\u636e\u80fd\u591f\u7531\u4f8b\u7a0b\u7f51\u7edc\u5904\u7406\uff0c\u800c\u4e0d\u5fc5\u5c06\u5176\u7ec4\u7ec7\u4e3a\u7ebf\u6027\u7ba1\u9053\u3002\u5b83\u6bd4\u8fed\u4ee3\u66f4\u7075\u6d3b\u3001\u66f4\u5f3a\u5927\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u867d\u7136\u751f\u6210\u5668\u7528\u4e8e\u8fed\u4ee3\uff0c\u4f46\u4ea7\u91cf\u4e0d\u4e00\u5b9a\u662f\u3002 Scheme\u4e2d\u7684\u6545\u4e8b\u8981\u7b80\u5355\u5f97\u591a\u3002\u7531\u4e8e Scheme \u4e2d\u7684\u5b9e\u4f53\u4e0d\u662f\u6309\u7c7b\u5206\u5c42\u7ec4\u7ec7\u7684\uff0c\u56e0\u6b64\u60a8\u4e0d\u4f1a\u6709\u4f7f\u7528\u4e3b\u8981\u4e3a\u8fed\u4ee3\u800c\u8bbe\u8ba1\u7684\u7c7b\u6765\u5b9e\u73b0\u534f\u7a0b\u7684\u5c34\u5c2c\u3002\u5728 Scheme \u4e2d\uff0c\u534f\u7a0b\u548c\u751f\u6210\u5668\u53ea\u662f\u4ee5\u4e0d\u540c\u65b9\u5f0f\u64cd\u4f5c\u5ef6\u7eed\u7684\u666e\u901a\u51fd\u6570\u3002\n\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u662f\u4e3a\u4e86\u603b\u7ed3\u6211\u5b66\u5230\u7684\u65b0\u4e1c\u897f\u3002\u6211\u4e5f\u628a\u5b83\u4f5c\u4e3a\u827a\u672f\u6b23\u8d4f\u7684\u7ec3\u4e60\u3002\u5f88\u591a\u4eba\u559c\u6b22\u8c08\u8bba\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u559c\u6b22\u4e00\u9996\u6b4c\u3001\u4e00\u90e8\u7535\u89c6\u8282\u76ee\u6216\u4e00\u90e8\u5c0f\u8bf4\u3002\u6211\u5e0c\u671b\u770b\u5230\u66f4\u591a\u7684\u6587\u5b57\u6765\u9610\u660e\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u60f3\u6cd5\u662f\u4f18\u96c5\u7684\u3001\u5f3a\u5927\u7684\u6216\u806a\u660e\u7684\u3002 Scheme \u662f\u4e00\u79cd\u6781\u7b80\u4e3b\u4e49\u7684\u4e0d\u5bfb\u5e38\u8bed\u8a00\u3002\u5b83\u7684\u8bbe\u8ba1\u8005\u5e0c\u671b\u5b83\u5177\u6709\u9ad8\u5ea6\u7684\u8868\u73b0\u529b\uff08\u610f\u5473\u7740\u53ef\u4ee5\u7b80\u6d01\u5730\u8868\u8fbe\u590d\u6742\u7684\u903b\u8f91\uff09\uff0c\u540c\u65f6\u53c8\u5c3d\u53ef\u80fd\u7b80\u5355\u3002\u8fd9\u53ea\u80fd\u901a\u8fc7\u5728\u5c11\u6570\u5f3a\u5927\u7684\u60f3\u6cd5\u4e0a\u6784\u5efa\u8bed\u8a00\u6765\u5b9e\u73b0\u3002\u4e00\u4e2a\u5f3a\u5927\u7684\u60f3\u6cd5\u7684\u8303\u56f4\u5e76\u4e0d\u7a84\u3002\u4e00\u4e2a\u5f3a\u5927\u7684\u60f3\u6cd5\u5bf9\u81ea\u5df1\u4fdd\u6301\u771f\u5b9e\uff0c\u4f46\u662f\u5f53\u5b83\u4e0e\u5176\u4ed6\u5f3a\u5927\u7684\u60f3\u6cd5\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5c31\u4f1a\u51fa\u73b0\u65b0\u7684\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u8868\u73b0\u529b\u7684\u6765\u6e90\u3002\u8868\u8fbe\u8fd9\u79cd\u9b54\u529b\u7684\u4e00\u79cd\u8bd7\u610f\u65b9\u5f0f\uff08\u7531\u4e8e\u7ea6\u7ff0\u9ea6\u5361\u9521\uff09\u662f\u5b83\u51e0\u4e4e\u611f\u89c9\u8bed\u8a00\u662f\u88ab\u53d1\u73b0\u800c\u4e0d\u662f\u88ab\u53d1\u660e\u7684\u3002\u4e00\u65e6\u638c\u63e1\u4e86\u5b83\uff0c\u5c31\u5f88\u96be\u60f3\u8c61\u5982\u4f55\u4ee5\u4efb\u4f55\u5176\u4ed6\u65b9\u5f0f\u8bbe\u8ba1\u4e00\u79cd\u8bed\u8a00\uff0c\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u7ec4\u4ef6\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u4f3c\u4e4e\u90fd\u662f\u4e0d\u5b8c\u6574\u7684\u3002\u6211\u663e\u7136\u662f\u8fd9\u79cd\u54f2\u5b66\u7684\u7c89\u4e1d\u3002\u7136\u800c\uff0c\u6211\u5bf9\u5f3a\u5927\u7684\u60f3\u6cd5\u66f4\u96be\u638c\u63e1\u8fd9\u4e00\u4e8b\u5b9e\u5e76\u4e0d\u89c6\u800c\u4e0d\u89c1\u3002\u7eed\u96c6\u5f88\u96be\u7406\u89e3\uff0c\u4e5f\u5f88\u96be\u5199\u3002\u5728\u4e0a\u5b8c\u5927\u5b66\u7f16\u7a0b\u8bfe\u8fd9\u4e48\u591a\u5e74\u540e\uff0c\u6211\u4ecd\u7136\u5728\u8003\u8651\u5ef6\u7eed\u8fd9\u4e00\u4e8b\u5b9e\u5e94\u8be5\u544a\u8bc9\u4f60\u4e00\u4e9b\u5173\u4e8e\u8fbe\u5230\u7eaf\u7cb9 lambda \u542f\u8499\u7684\u5e78\u798f\u72b6\u6001\u6240\u9700\u7684\u5949\u732e\u6c34\u5e73\u3002\u8fd9\u8ba9\u6211\u60f3\u5230\u4e86 Python\u3002\u6b63\u5982\u6211\u4e4b\u524d\u6240\u8bf4\uff0c\u6211\u7684\u6781\u7b80\u4e3b\u4e49\u8005\u88ab\u53d1\u7535\u673a\u80cc\u540e\u9690\u85cf\u7684\u673a\u68b0\u6240\u56f0\u6270\u3002\u4f46\u662f\u4f7f\u7528 yield \u5173\u952e\u5b57\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728 10 \u5206\u949f\u5185\u5b66\u4e60\u4e60\u8bed\u5e76\u5f00\u59cb\u4f7f\u7528\u751f\u6210\u5668\u3002\u5b83\u53ef\u80fd\u4e0d\u50cf continuation \u90a3\u6837\u5f3a\u5927\uff0c\u4f46\u5b83\u8db3\u591f\u5f3a\u5927\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e\u5faa\u73af\u878d\u5408\uff0c\u4f7f\u590d\u6742\u7684\u5faa\u73af\u66f4\u5bb9\u6613\u7f16\u5199\u3002\u8fd9\u662f\u4e00\u4e2a\u7f8e\u4e3d\u7684\u60f3\u6cd5\u3002\u6700\u540e\uff0c\u6211\u4e0d\u5f97\u4e0d\u56de\u5230Scheme\u3002 Python \u751f\u6210\u5668\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\uff0cyield \u662f\u5f3a\u5927\u601d\u60f3\u7684\u6700\u5c0f\u63a5\u53e3\u3002\u60a8\u53ef\u80fd\u5bf9 Scheme \u7684\u5ef6\u7eed\u548c\u5b8f\u6709\u540c\u6837\u7684\u770b\u6cd5\u3002\u901a\u8fc7 call/cc \u548cdefine-macro\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8bbf\u95ee\u89e3\u91ca\u5668\u7684\u673a\u5236\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u7f16\u7a0b\u548c\u5143\u7f16\u7a0b\u4e4b\u95f4\u7684\u754c\u9650\u3002\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u5df2\u7ecf\u5199\u4e86\u5f88\u591a\uff0c\u6240\u4ee5\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u91cd\u590d\uff08\u53c2\u89c1\u8fd9\u91cc\uff09\uff0c\u4f46\u89e3\u6790\uff08\u53ef\u901a\u8fc7\u5b8f\u8bbf\u95ee\uff09\u548c\u6267\u884c\u63a7\u5236\uff08\u53ef\u901a\u8fc7 call/cc \u8bbf\u95ee\uff09\u57fa\u672c\u4e0a\u662f\u89e3\u91ca\u5668\u6240\u505a\u7684\u3002\u6211\u5bf9\u89e3\u91ca\u5668\u7684 API \u5982\u6b64\u4e4b\u5c11\u611f\u5230\u60ca\u8bb6\u3002\u90a3\u4e2a\u597d\u6f02\u4eae\u3002 [1] \u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528 yield \u5e76\u4e0d\u662f\u5728 Python \u4e2d\u6784\u5efa\u751f\u6210\u5668\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u8bf7\u67e5\u9605\u6709\u5173\u751f\u6210\u5668\u7684\u4efb\u4f55\u4e00\u822c\u6559\u7a0b\u3002 [2] \u66f4\u51c6\u786e\u5730\u8bf4\uff0cyield \u5728\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u5b83\u5728\u5b9a\u4e49\u4e2d\u51fa\u73b0 yield \u7684\u5730\u65b9\u6682\u505c\u6267\u884c\u3002\u8fd9\u4e2a\u7279\u5f81\u66f4\u96be\u9605\u8bfb\uff0c\u6240\u4ee5\u6211\u4f1a\u5199\u5f97\u597d\u50cf yield \u5b9e\u9645\u4e0a\u505a\u4e86\u5c48\u670d\u3002\u8bed\u6cd5\u7684\u76ee\u7684\u662f\u521b\u9020\u8fd9\u79cd\u9519\u89c9\u3002 [3] \u8bf7\u6ce8\u610f\uff0c\u9012\u5f52\u662f Scheme \u7f16\u5199\u5faa\u73af\u7684\u9996\u9009\u65b9\u5f0f\u3002\u521b\u5efa\u751f\u6210\u5668\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u7531\u4e8e\u8fd9\u662f\u5c3e\u9012\u5f52\u7684\u4e00\u79cd\u5f62\u5f0f\uff0cScheme \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5c06\u9012\u5f52\u8f6c\u6362\u4e3a\u5faa\u73af\u3002", "note_en": "In this post, I\u2019ll summarize what I\u2019ve learned from an attempt to gain a deeper understanding of two important concepts in programming: Python\u2019s  generators and Scheme\u2019s  continuation. The aim is not to teach Python or Scheme programming. Rather, what I want to do is to demonstrate that generators are special cases of a much more powerful construct - continuations. Continuations allow programmers to invent new control structures, and it is the foundation upon which iterators, generators, coroutines, and many other useful constructs can be built. I have found it very useful to understand how generators work from the deeper and broader perspective of continuations.\n Continuation is well-established in programming language theory (it was introduced in the 70\u2019s), but its use has not become mainstream. However, I suspect that in the age of cloud computing and big data, where lazy evaluation is becoming increasingly important, continuation will become more prominent, like many other concepts in functional programming. I think it\u2019s worthy of your time to reserve a place for this concept in your peripheral vision.\n For those who are not familiar with Scheme:  Scheme is a relatively modern dialect of one of the oldest programming languages: LISP. Scheme is a minimalist but highly expressive language, which makes it an ideal vehicle for experimenting with advanced concepts in programming. This is why Scheme is often used as a tool for teaching computer science, and as a playground for programming language researchers. Continuation is not unique to Scheme, but Scheme is the first language that treats continuations as first-class entities, thus making them easily manipulatable. It is the most natural venue for exploring continuations.\n  In Python, generators are primarily used to make complex loops easier to write and to maintain. That\u2019s why they are special cases of iterators. In a traditional language like c, a  for loop looks like this:\n  The first line specifies the sequence of numbers to iterate over with. The second line is what we want to do with those numbers. With generators in Python, we can write this type of loops like the example given below. In it, we use the  squared_ints() generator to produce a sequence of squared integers one by one, and then use the  sum_of_squares() function to accumulate them until the sum is greater than a bound specified by the programmer:\n def  squared_ints():  &#39;&#39;&#39; Infinite generator  Return i^2 for i = 1, 2, ...  &#39;&#39;&#39; i  =  1  while True:  yield i *i  # it is this yield that makes this function a generator i  +=  1 def  sum_of_squares(bound):  &#39;&#39;&#39; Return the smallest sum of squared integers greater than the bound  &#39;&#39;&#39; g  = squared_ints() s  =  0  for i  in g:  # iterate over generator g s  += i  # accumulate the sum s  if s &gt;bound:  # exit the loop if s is larger than n  return s\n The definition of  squared-ints() looks like a regular function, but the presence of the  yield keyword makes it a function that produces generators [1]. Using the  next() function on a generator  g, we can see that the numbers are generated one by one. Generators work nicely with loops in Python. An example can be seen in  sum_of_squares(), where we iterate over a generator with a  for loop.\n  Let\u2019s review what we have accomplished so far. In c-style loops, the generation and the consumption of the sequence are tightly coupled. In the Python code above, however, they are decomposed into two independent entities. Because generators can be build on other generators, you can further decompose a complex generator into a chain of simpler generators. This makes complex loops more modular and reusable, and therefore easier to write and maintain. Another improvement is that the generator code does not set a limit on the length of the sequence. It is theoretically infinite. The actual length of the sequence generated is determined by the code that consumes the sequence. This means that the generator code can be as general as possible, leaving computational efficiency to the consumer. This \u201claziness\u201d is highly desirable in situations where generating the next item in the sequence is computationally expensive.\n All of this is made possible by one single keyword  yield! It\u2019s pretty amazing, isn\u2019t it? What happens is that every time  yield is called, the state of the function is frozen, and the flow of control is yielded to the caller, along with the generated value [2]. The next time the generator is evoked, the control flow is returned to the frozen state of the generator.\n What a simple and elegant syntax for a complex behavior! It\u2019s like magic. However, there is a part of me (perhaps the theorist in me) that is uncomfortable with magical behaviors in programming languages. How does  yield create a generator (i.e., an object of the generator class) from a function definition? Why isn\u2019t this magic found in other places in the language? Why can\u2019t you call  yield outside a function? In addition, generators provide some facilities for making coroutines - a topic in concurrent programming. What does currency have anything to do with iteration? Since all these behaviors appears to be associated with  yield in an  ad hoc way, I tend to write generators idiomatically, following a memorized recipe without thinking about the heavy machinery behind the curtain. I always have a nagging feeling that there is a bigger picture that I don\u2019t see.\n This was when I realized that I had read about similar ideas in a different context before. When I learned to program in college, I had a copy of  Scheme and the Art of Programming by Springer and Friedman. There was a chapter on the mysterious concept of \u201ccontinuation\u201d, where all of this stuff was discussed. I skipped the entire chapter because I couldn\u2019t understand what continuations were good for. Maybe it\u2019s time to revisit this topic.\n  Before we move on to continuations, rest assured that Python-style generators are available in Scheme. They are not part of the language itself, but with the  make-coroutine-generator function in a quasi-standard library (i.e.,  SRFI-158), the  squared-ints generator discussed previously can be written in Scheme as:\n ( define  squared-ints  ;;; squared-ints is a function (lambda) that makes a generator ( lambda () ( make-coroutine-generator ( lambda ( yield) ( let  loop (( i  1))  ;;; define recursive function &#34;loop&#34; which increases i, starting from 1 \t ( yield ( *  i  i))\t ( loop ( +  i  1)))))))( define  g ( squared-ints))  ;;; make a generator, assign it to &#34;g&#34;\n This doesn\u2019t look as elegant as the Python code, but logic is almost identical [3]. What is different here is that  yield in Scheme is not a reserved keyword baked into the interpreter. Rather, the mechanism for yielding control is achieved by manipulating \u201ccontinuations\u201d - a fundamental building block of the language that represents computational steps that are pending execution. In fact,  make-coroutine-generator is just a regular Scheme function consisting of ~10 lines of code. It can be implemented by any competent Scheme programmer without too much work. How is it possible? The magic is the use of  call/cc (which stands for \u201ccall with current continuation\u201d) in  make-coroutine-generator. Note that nothing in this code refers to a special class or keyword.  make-coroutine-generator,  yield, and  g are all nothing more than regular functions. This is why we ask for the next value by calling it like a function:\n  The beauty of Scheme generators is that the library does not introduce a new class of entities, so generators can integrate seamlessly with the rest of the language.\n  Simply put, a continuation is a series of computational steps that are pending execution. For example,  0 + 1 + 2 is expressed in Scheme as  (+ 2 (+ 1 0)). From the perspective of  0, what will happen is that 1 will be added to it, and then 2 will be added to the result. The continuation of  0 in this context is therefore these two additions. The beauty of Scheme is that a continuation is not an exotic construct. Rather, it is just a function that can be easily manipulated by the programmer. In this example, the continuation is nothing other than  (lambda (x) (+ 2 (+ 1 x))). It is equivalent to  lambda x: x + 1 + 2 in Python.\n In Scheme, we can use a function named  call-with-current-continuation (or  call/cc for short) to capture the current continuation, and then pass it to a different function, which is sometimes called the  receiver. Most programming languages don\u2019t have this construct, so it will take a little bit of time to get used to it.\n Consider this simple receiver, which simply stores the continuation in a global variable \u2018c\u2019.\n ( define  c  #f)  ;;; initially, global variable c stores nothing( define  store-continuation  ;;; define a function store-continuation ( lambda ( cc)  ;;; which receives a continuation ( set!  c  cc)  ;;; store it to the global variable c  0))  ;;; and returns 0\n We can now use it to capture the continuation of  0 in  (+ 2 (+ 1 0)):\n &gt;  c  ;; nothing is stored in c #f  &gt; ( +  2 ( +  1 ( call/cc  store-continuation))) 3 &gt;  c # &lt;procedure ( continuation  .  results1887) &gt;\n The returned value of  (+2 (+ 1 (call/cc store-continuation))) is not important. The important part is that after the  call/cc call, the  c variable stores a function, which is the continuation we captured! We can\u2019t see the code, because it is compiled, but we can verify that it is effectively  (lambda (x) (+2 (+ 1 x))), because when we call  c with a number, the returned value is the input plus 3.\n   Let\u2019s use  call/cc to do something useful. Let\u2019s use it to implement the logic of the Python function  sum_of_squares() in Scheme. As before, we iterate over the generator in a loop, accumulate the sum, and stop when the sum is bigger than a certain bound.\n ( define  sum-of-squares ( lambda ( bound)  ;; define (sum-of-squares bound) ( call/cc ( lambda ( break)  ;; define a reciever: first capture the continuation into break\t ( let (( g ( squared-ints)))  ;; make the generator g\t ( let  loop (( s  0))  ;; define the recursive function (loop s), where s is the accumulated value\t ( let (( new-s ( +  s ( g))))  ;; compute the new accumulated value\t ( if ( &gt;  new-s  bound)  ;; if the new accumulated value is larger than bound\t\t ( break  new-s)  ;; exit the loop\t\t ( loop  new-s)))))))))  ;; otherwise, continue the loop with the new accumulated value &gt; ( sum-of-squares  100) 140\n Before the  sum-of-square function does anything, I use  call/cc to capture the continuation, and assign it to the variable  break. Notice that in the syntax of Scheme, this is the last step of the function. Therefore, calling  break will immediately exist the function with a returned value, no matter where it is called. This doesn\u2019t seem to be too impressive in this simple example, but what is means is that if you have to work with a big and deeply nested data structure (for example, a tree or a graph), you can program with the elegance of recursion, but with the ability to abandon the recursion as soon as some condition is met. This can dramatically reduce unnecessary computation.\n Some people call  call/cc the  GOTO statement of functional languages, but a better characterization is that it is a general mechanism for programmers to created new control structures that don\u2019t exist in the core language. With  call/cc, all forms of control, including exceptions, backtracking, and coroutines can be built. Since no magic is involved, you can create your customized versions of these structures if you don\u2019t like how they behave. Novel control structures that are specific to the problem domain can also be invented. For example, in web programming, continuations have been used to control the logic of server applications (see  here).\n Note that I wrote the program above to mirror the logic of the Python code. There are better ways to achieve the same without recursion or  call/cc. For example, in the example below, I used the generator library to create a second infinite generator  acc to accumulate the sum of elements in the  gen generator, and then use the  generator-find function to get the first value in  acc that is larger than  bound. This is an example of chaining iterators to make more complex iterators.\n ( define  sum-of-squares\t( lambda ( bound)\t\t( let* (( gen ( squared-ints))  ;; create a generator gen\t\t ( acc ( make-unfold-generator  ;; create a second generator acc\t\t ( lambda ( s)  #f)  ;; no stop condition, make acc an infinite generator\t\t ( lambda ( s)  s) \t\t ( lambda ( s) ( +  s ( gen)))  ;; accumulate the next value from gen\t\t  0)))  ;; accumulate from 0\t\t\t\t\t ( generator-find  ;; find the first value bigger than bound in the acc generator ( lambda ( s) ( &gt;  s  bound))  acc))))\n  In the previous section, we use  call/cc to break from a loop that iterates over a generator. Let\u2019s implement the generator itself with  call/cc. To make it happen, we need a mechanism to yield - to exit a function before it ends normally. We have already seen how it is done. Now, we need a mechanism that resumes the function after it has yielded. It\u2019s not hard to see that we need two continuations.\n ( define  squared-ints ( lambda () ( let* (( break  #f)  ;;; will store a continuation to break out of the function\t ( resume  #f)  ;;; will store a continuation to resume after yielding\t ( yield  ;;; define the function &#34;yield&#34;\t ( lambda ( value)\t ( call/cc   ;;; capture the current continuation\t ( lambda ( r)\t\t ( set!  resume  r)  ;;; store it in &#34;resume&#34;\t\t ( break  value))))))  ;;; and break out  ( lambda ()  ;;; will return a function (a closure)\t ( call/cc   ;;; capture the current continuation...\t ( lambda ( cc)\t ( set!  break  cc)  ;;; ...and store it in &#34;break&#34;\t ( if  resume  ;;; if this generator has been called before...\t ( resume  &#39;())  ;;; ... resume it\t ( let  loop (( i  1))  ;;; otherwise, loop through i=1, 2, 3, 4...\t\t ( yield ( *  i  i))  ;;; yield the square of i\t\t ( loop ( +  i  1))))))))))( define  g ( squared-ints)) &gt; ( g) 1 &gt; ( g) 4 &gt; ( g) 9\n I modified this code slightly from Vasilij Schneidermann\u2019s implementation of the SRFI-158 library (see  here for the full source code). It looks a bit intimidating to those who are not expert Scheme programmers, but the logic is very straightforward: for every number  i in the loop, first store the future of the computation into an internal variable called  resume, and then call the  break continuation as we have done before to exist the function. The next time the generator is called, call the  resume continuation, which will progress to the next number in the loop.\n Note that in the code above, we return a generator as a function with no argument. We can easily add an argument to the function, so that messages can be sent to the generator after the iteration has started. For example, we can modify the code such that  (g &#39;reset) will reset the iteration. Since generators are just functions in Scheme, communicating with generators can be done naturally with regular function calls. In Python, you can also send messages to generators, but it requires a special syntax of the  yield keyword, and the  .send() method of the generator class. Again, working with generators in Python is idiomatic, with lots of things happening behind the curtain.\n  I had planned to go into details about coroutines, because Python\u2019s tutorials on generators and Scheme\u2019s tutorials on continuations both tend to end with coroutines (How interesting!). However, I have decided against the idea because it will derail the discussion into a different territory.\n But very briefly,  yield in Python is often presented as a simplified method for writing generators, but what it does, suspending the execution of a function with the ability to resume it, is a much general concept than iteration. It enable a routine to do a small amount of work, and then pass the control to another routine, thus allowing them to run concurrently. This enables data to be processed by a network of routines, which do not have to be organized as a linear pipeline. It is more flexible and powerful than iteration. In other words, although generators are used for iterations,  yield doesn\u2019t have to be.\n The story is much simpler in Scheme. Since entities in Scheme are not organized hierarchically as classes, you don\u2019t have the awkwardness of implementing coroutines with a class that is designed primarily for iterations. In Scheme, coroutines and generators are just normal functions that manipulate continuations in different ways.\n  I wrote this post primarily to summarize something new that I have learned. I also did it as an exercise in art appreciation. A lot of people like to talk about why they love a song, a TV show, or a novel. I would like to see more words spent on articulating why an idea is elegant, powerful, or clever.\n Scheme is an unusual language in its minimalism. Its designers want it to be highly expressive (meaning that complex logic can be expressed succinctly), and yet as simple as possible. This can only be achieved by building the language on a small number of powerful ideas. A powerful idea is not narrow in scope. A powerful idea stays true to itself, but when it is used in combination with other powerful ideas, new functionalities emerge. This is where the expressiveness comes from. A poetic way to express this magic (due to  John McCarthy) is that it almost feel like the language was discovered rather than invented. Once you get it, it\u2019s hard to imagine how a language can be designed in any other way, because every component seems to be incomplete without the others.\n I am obviously a fan of this philosophy. However, I am not blind to the fact that powerful ideas are much harder to master. Continuations are hard to understand and hard to write. The fact that I am still thinking about continuations so many years after my college programming class should tell you something about the level of devotion needed to reach the blissful state of pure lambda enlightenment. This brings me to Python. As I said before, the minimalist in me is bothered by the hidden machinery behind generators. But with the  yield keyword, anybody can learn the idioms and start to use generators in 10 minutes. It is perhaps not as powerful an idea as continuations, but it is powerful enough that it blends in nicely with loops, making complex loops dramatically easier to write. It\u2019s a beautiful idea.\n In the end, I feel compelled to circle back to Scheme. What is beautiful about Python\u2019s generators is that  yield is a minimal interface to a powerful idea. You might say the same about Scheme\u2019s continuations and macros. With  call/cc and  define-macro, the machinery of the interpreter become accessible to the programmer, thus erasing the boundary between programming and metaprogramming. A lot has been written on this topic so I won\u2019t repeat it here (see  here), but parsing (accessible via macros) and execution control (accessible via  call/cc) are basically what the interpreter does. I am amazed by how minimal the API to the interpreter is. That is beautiful.\n  [1] Using  yield in a function definition is not the only way in which generators can be constructed in Python. Please consult any general tutorial on generators.\n [2] More accurately,  yield in a function creates a generator, which suspends its execution at the point where  yield appears in the definition. This characterization is harder to read, so I will write as if  yield actually does the yielding. The intention of the syntax is to create this illusion.\n [3] Note that recursion is Scheme\u2019s preferred way for writing loops. It isn\u2019t necessary for creating generators. Since this is a form of tail recursion, the Scheme interpreter automatically translates the recursion into a loop.", "posttime": "2021-08-03 02:59:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u610f,programming,\u7f16\u7a0b,\u751f\u6210\u5668,ideas", "title": "\u7f16\u7a0b\u4e2d\u7684\u7edd\u5999\u521b\u610f\uff1a\u751f\u6210\u5668\u548c\u5ef6\u7eed", "title_en": "Beautiful ideas in programming: generators and continuations", "transed": 1, "url": "https://www.hhyu.org/posts/generator_and_continuation/", "via": "", "real_tags": ["\u521b\u610f", "\u7f16\u7a0b", "\u751f\u6210\u5668", "ideas"]}]