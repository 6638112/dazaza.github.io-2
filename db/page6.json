[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1074970, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5929\u524d\uff0c\u6211\u770b\u5230\u4e00\u7bc7\u8bba\u575b\u5e16\u5b50\uff0c\u6307\u5411\u4e00\u7bc7\u94fe\u63a5\u5230\n\u8fd9\u79cd\u5bf9\u7ecf\u5178PC\u684c\u9762\u6a21\u5f0f\u6beb\u65e0\u610f\u4e49\u7684\u4e91\u5316\u6c38\u8fdc\u4e0d\u4f1a\u505c\u6b62\u3002\u5b83\u8d62\u4e86&#39\uff1b\u4e0d\u8981\u7b49\u5230\n\u9996\u5148\uff0c\u6211\u9700\u8981\u7ed9\u4f60\u4eec\u66f4\u591a\u7684\u80cc\u666f\u77e5\u8bc6\uff0c\u8fd9\u6837\u4f60\u4eec\u5c31\u80fd\u5b8c\u5168\u7406\u89e3\u6211\u7684\u60f3\u6cd5\u3002\u4e00\uff0c\u6211\n\u76ee\u524d\uff0c\u6211\u7684\u751f\u4ea7Windows\u5b89\u88c5\u7a0b\u5e8f\u7531Windows 10 Pro\u548c\u4e00\u4e2a\u5947\u602a\u7684\u9057\u7559\u8f6f\u4ef6\u7ec4\u6210\uff0c\u6211\u4eec\u6b63\u5728\u4f7f\u7528\u5b83\n\u96ea\u4e0a\u52a0\u971c\u7684\u662f\uff0cWindows 11\u8fd8\u6709\u4e00\u4e2a\u5b8c\u5168\u5947\u602a\u7684TPM\u8981\u6c42\uff0c\u8fd9\u662f\u6beb\u65e0\u610f\u4e49\u7684\n\u8fd9\u610f\u5473\u7740\u6211\u5fc5\u987b\u79bb\u5f00\u7a97\u6237\u3002\u4f46\u6211\u60f3\u7528\u4e00\u79cd\u4f18\u96c5\u7684\u7b56\u7565\n\u8fd9\u6bb5\u65c5\u7a0b\u4ecd\u5904\u4e8e\u975e\u5e38\u65e9\u671f\u7684\u9636\u6bb5\u3002\u4f46\u5927\u81f4\u8ba1\u5212\u5982\u4e0b\u3002\u4ece\u73b0\u5728\u5230\u73b0\u5728\n\u8fd9\u91cc&#39\uff1b\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u77ed\u7684\u5217\u8868\uff0c\u5217\u51fa\u4e86\u6211\u76ee\u524d\u60f3\u5230\u7684\u4e00\u4e9b\u4e8b\u60c5\uff1a\n\u6211\u9700\u8981\u901a\u8fc7\u6d4b\u8bd5Kerkythea\u3001Foxit Reader\u548cKompoZer\u7684Windows\u7248\u672c\n\u6211\u5c06\u5c1d\u8bd5\u4ee5\u540c\u6837\u7684\u65b9\u5f0f\u5b89\u88c5Office 2010\u7684\u65e7\u7248\u672c\u3002\u6216\u8005\u4e70\u4e00\u5f20\u9a7e\u9a76\u6267\u7167\n\u6211\u5c06\u4fdd\u7559\u6216\u5c06\u6211\u7684\u684c\u9762\u8f6c\u6362\u4e3a\u53cc\u542f\u52a8\u8bbe\u7f6e\uff0c\u5e76\u5728\u8fc7\u671f\u540e\u4f7f\u7528Windows 10\n\u6211\u5f88\u53ef\u80fd\u4f1a\u8d2d\u4e70\u4e00\u53f0\u65b0\u7684Slimbook/Linux\u684c\u9762\u5de5\u4f5c\u7ad9\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u6211\u7684\u4e3b\u8981\u8bbe\u5907\n\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u53ef\u80fd\u53d1\u751f\u7684\u3002\u6709\u53ef\u80fd\u5b58\u5728\u67d0\u4e2a\u89d2\u843d\u7684\u7528\u4f8b\n\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u5728\u76ee\u524d\uff0c\u8003\u8651\u5230\u53ef\u7528\u7684\u6280\u672f\u548c\u89e3\u51b3\u65b9\u6848\uff0c\u5c31\u50cf\u6211\u60f3\u8c61\u7684\u90a3\u6837\n\u5982\u679c\u6ca1\u6709\uff0c\u8bf7\u521b\u5efa\u53cc\u542f\u52a8\u8bbe\u7f6e\uff0c\u7136\u540e\u4ece\u4e2d\u624b\u52a8\u6e05\u9664\u5e76\u5220\u9664\u8054\u673a\u5e10\u6237\n\u5728\u672a\u6765\u7684\u67d0\u4e2a\u9065\u8fdc\u7684\u65f6\u523b\uff0c\u5373\u4f7f\u8fd9\u6837\u4e5f\u53ef\u80fd\u4e0d\u53ef\u884c\u3002\u4e5f\u8bb8\u5982\u679c\u7a97\u6237\n\u5c31\u65f6\u95f4\u800c\u8a00\uff0c\u5373\u4f7f\u57282025\u5e74\u4ee5\u540e\uff0cWindows 10\u4ecd\u5c06\u5728\u76f8\u5f53\u957f\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\u4fdd\u6301\u76f8\u5173\u6027\uff0c\u800c\u540c\u6837\u7684\u65b9\u5f0f\n\u5bf9\u4f60\u53ef\u80fd\u4e5f\u8bfb\u8fc7&#34\uff1b\u5b89\u5168\u82af\u7247&#34\uff1b\u6df1\u6210\u5ca9\u4f53\u3002\u53ef\u4fe1\u8ba1\u7b97\u548c\u6240\u6709\n\u4f46\u662f\u8fd9\u8fd8\u6ca1\u6709&#39\uff1b\u6ca1\u6709\u53d1\u751f\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709&#39\uff1b2004\u5e74\u5de6\u53f3\uff0c\u5927\u7ea6\u5728\n\u7528\u6211\u7684\u9884\u8a00\u80fd\u529b\u6765\u770b\uff0c\u81f3\u5c115-10\u5e74\u540e\uff0c\u8fd9\u5f88\u53ef\u80fd\u518d\u6b21\u53d1\u751f\u3002\u5c31\u50cf\n\u4e16\u754c\u53d8\u4e86\u3002\u4e16\u754c\u6b63\u5728\u6539\u53d8\u3002\u5b83&#39\uff1b\u8fd9\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u800c\u4e14\u5f88\u6b63\u5e38\u3002\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u6bcf\u4e00\u6b21\n\u5728\u672a\u6765\u7684\u67d0\u4e2a\u65f6\u523b\uff0c\u8ba1\u7b97\u6a21\u5f0f\u5c06\u6c38\u8fdc\u6539\u53d8\u300215-20\u5e74\u540e\uff0c\u4e0d\u4f1a\n15-20\u5e74\u540e\uff0c\u6211\u6253\u7b97\u5728\u67d0\u4e2a\u5c0f\u5c9b\u4e0a\uff0c\u5f00\u4e00\u5bb6\u9762\u5305\u5e97\u6216\u5176\u4ed6\u4fbf\u5229\u5e97\n\u5728\u90a3\u4e4b\u524d\uff0c\u6211\u4ecd\u7136\u5fc5\u987b\u4e0e\u5076\u5c14\u7684\u611a\u8822\u4f5c\u6597\u4e89\u3002\u6211\u5df2\u7ecf\u8bf4\u8fc7\u6211\u6ca1\u6709", "note_en": "A couple of days ago, I came across a forum post that pointed to a Web article that linked to\r\t\t\tthe Windows 11 Insider preview Dev channel \r\t\t\t \r\t\t\trelease notes, which mention a new requirement for Windows 11 Pro setup. Not Home edition, mind,\r\t\t\tbut Pro. Internet access and Microsoft account will (or most likely will) be needed to finish the\r\t\t\tsystem setup. And I decided, that&#39;s it, I had enough stupidity for one lifetime.\n  This pointless cloudification of the classic PC desktop formula will never stop. It won&#39;t stop until\r\t\t\tdesktop as a service is a reality and all that nonsense. No. I&#39;m not going to cooperate with that plan.\r\t\t\tAnd so I&#39;ve now finally decided that I&#39;m going to properly start moving my production workflows away\r\t\t\tfrom Windows. That won&#39;t be an easy task. After all, I&#39;ve been using Windows since 1992. But I have \r\t\t\t zero intention of using Windows 11, as it&#39;s pointless\r\t\t\tin its own right, and I have even less intention of being a subscription monkey. Services yes, products\r\t\t\tnever. This article is a start of a journey whereby I plan to wean myself off Windows. Let&#39;s begin.\n      First, I need to give you a bit more context, so you fully understand what I have in mind. One, I\r\t\t\tuse Windows, mostly because I need it for gaming and Office (publishers and such). Most other things\r\t\t\twork just fine in Linux, which is my second, secondary-primary setup. Two, I use Linux extensively,\r\t\t\ttoo, and the experience is rather decent. It&#39;s not perfect just yet, but things are slowly improving. A\r\t\t\tbit too slowly. But hey. You can read more about this in my now three-year-long \r\t\t\t series of articles on \r\t\t\t Slimbook Pro2 laptop &amp; Kubuntu. That&#39;s going\r\t\t\tencouragingly well.\n  At the moment, my production Windows setup consists of Windows 10 Pro, plus an odd relic, which we\r\t\t\twill ignore for the time being. Windows 10 will be supported until 2025, so there is no immediate\r\t\t\tproblem here. We have almost four full years ahead, and even then, things won&#39;t suddenly stop or become\r\t\t\tirrelevant. After all, people still use Windows 7 and such. But there are scenarios where you should or\r\t\t\treally must have a fully up-to-date operating system.\n  To add insult to the injury, Windows 11 also has the utterly bizarre TPM requirement nonsense, which\r\t\t\tmeans that \r\t\t\t my beefy desktop, which has TPM disabled in BIOS, is not\r\t\t\tcompatible with Windows 11 (excellent), and will technically become &#34;useless&#34; for new editions of\r\t\t\tWindows even if I do decide to install them. But then, when you combine all the different stupidities\r\t\t\tbeing piled into Windows - Weather icon, Teams being installed without anyone asking, Rewards crap\r\t\t\tshown in the header of the Settings menu, Edge protocol hardcoding, no easy way to disable updates or\r\t\t\tDefender, and then some, one has to realize that there is no future for people with triple-digit IQ in\r\t\t\tthis space.\n  This means I have to move away from Windows. But I want to do that in a nice, elegant, strategic\r\t\t\tmanner that doesn&#39;t leave me functionally impaired. That means slowly, carefully, methodically mapping\r\t\t\tout all of my usecases to the finest detail, and then porting them over to Linux.\n      The journey is still in the very early stages. But roughly, the plan is as follows. From now till\r\t\t\t2025, I will write a series of tutorials and guides, covering every step of my migration effort,\r\t\t\tshowing you how and what I did with this or that particular usecase. For example, how to install \r\t\t\t SketchUp 2017 in Linux. Check! I will also focus on games\r\t\t\tand the office suite usage, of course, because among the many different usage scenarios, those\r\t\t\thave always remained as outstanding gaps in the Windows-Linux parity.\n  Here&#39;s a quick list of some of the things that come to mind, for the time being:\n  I will need to test the Windows builds of Kerkythea, Foxit Reader and KompoZer through\r\t\t\t\tWINE.\n  I will try to install my old copy of Office 2010 in the same manner. Or maybe buy a license for\r\t\t\t\tsomething like the OnlyOffice desktop suite. Or I will pay professional book editors to convert my\r\t\t\t\tscripts and stories. I will rather pay hundreds or thousands of dollars to people for their work\r\t\t\t\tthan participate in the must-online fest. This will be a conscious financial decision, and while it\r\t\t\t\twon&#39;t be in my favor, the MuSt-HaVe-OnLiNe crowd will not see a dime of it. A penny or a cent, if\r\t\t\t\tyou prefer.\n  I will keep or convert my desktop to a dual-boot setup and use Windows 10 beyond its expiration\r\t\t\t\tdate for gaming. Maybe it&#39;s a bit inconvenient, but \r\t\t\t\t my favorite desktop, Plasma, has a superb save-workspace\r\t\t\t\tsettings, including all your programs and files, so you can resume an old session without a\r\t\t\t\thitch.\n  I will most likely buy a new Slimbook/Linux desktop workstation and make it my primary\r\t\t\t\tsystem.\n        Realistically, that could happen. It is possible that there might be some corner usecase where one\r\t\t\tmust have an up-to-date Windows workflow for something, I don&#39;t know, to be able to use a government\r\t\t\tsite or fill in a government form somewhere or do online banking. This will be a difficult scenario to\r\t\t\tsolve. I have no easy answers for that just yet.\n  If that happens, at the moment, given the technology and solutions available, the way I imagine\r\t\t\tit:\n  If not, create a dual-boot setup, and then purge and delete the online account manually from\r\t\t\t\tLinux.\n  At some distant point in the future, even this may not be a feasible scenario. Perhaps if Windows\r\t\t\tgoes subscription-only. Again, I have no easy answer for how to resolve this. But I will leave this\r\t\t\tbattle for when it becomes relevant. At the moment, my focus will be on moving my CURRENT Windows setup\r\t\t\tto an equivalent Linux setup. That&#39;s my plan for 2025.\n  Timewise, even beyond 2025, Windows 10 will remain relevant for quite a way while, the same way\r\t\t\tWindows 7 is today. At the very least, this is because the LTSC version of Windows 10 will be around\r\t\t\tfor another 5-6 years thereafter, and that means the software that runs on Windows 10 will remain\r\t\t\tavailable and supported. Especially if the pointless TPM requirement suddenly renders a huge, huge\r\t\t\tswath of Windows machines un-upgradable.\n    Yes. You may also have read about the &#34;security chip&#34; Pluton thingie. Trusted computing and all\r\t\t\tthat. It is also something that could (emphasis on could, pure speculation for now) block other\r\t\t\toperating systems from running on the machine. Theoretically, you may end up with hardware that is\r\t\t\tlocked to specific operating systems and/or doesn&#39;t support certain features in the BIOS, which may\r\t\t\tpreclude Linux from being used on these machines. That could be a difficult scenario, too. In a way,\r\t\t\tthis is not that different from what you have today with Secure Boot.\n  But. This hasn&#39;t happened, and it hasn&#39;t happened since 2004 or so, roughly when the concept of\r\t\t\tTrusted computing started making headlines in the tech journalism. Since, Microsoft and various other\r\t\t\tcompanies have tried to implement &#34;enhanced&#34; security features on the hardware and BIOS level, and for\r\t\t\tthe most part, it didn&#39;t really make any big difference. For the most part, you can disable Secure\r\t\t\tBoot, and a variety of Linux distributions supports it (Secure Boot) nonetheless. I have personally not\r\t\t\tencountered any system that prevents you from turning Secure Off in the BIOS menu.\n    Again, this is most likely to happen, using my prophetic skills, at least 5-10 years off. Like the\r\t\t\tmust-use Windows scenario outlined earlier, that is a battle for after this current challenge I have.\r\t\t\tPeace and quiet until 2025, slow preparation for the cutoff. By then, I&#39;d like to hope that Steam &amp;\r\t\t\tLinux becomes a given, and I can put the whole corporate greed hysteria behind me. It&#39;s not a fun thing\r\t\t\tthinking about this problem, but ignoring it will not make the stupidity go away. You must face it,\r\t\t\tembrace it, and then fend it off.\n    The world changes. The world is changing. It&#39;s inevitable. And normal. But that does not mean every\r\t\t\tchange is good, or that one should accept stupid or pointless things with a grin on their face. Nope. I\r\t\t\tam aware that the young generations are more accustomed and more accepting of the online-always\r\t\t\taccount-everywhere computing, especially on their smartphones. But my desktop is not a phone, and I&#39;m\r\t\t\tnot willing to play stupid games of marketing greed and silly touch ideas on something that has &#34;Pro&#34;\r\t\t\tin its label. If I pay money for a supposedly top-tier product, I want to be left alone, and I don&#39;t\r\t\t\twant any of the modern crap.\n  There will come a point in the future when the computing model changes for good. In 15-20 years, no\r\t\t\tone will talk about the &#34;offline&#34; and &#34;local&#34; and such stuff. That will be the reign of dinosaurs, and\r\t\t\tthe young people will of course ignore us, the same way &#34;we&#34; ignore people when they talk about radio\r\t\t\tor cable TV or any old idea that feels silly and cumbersome today. You can&#39;t win that battle. But\r\t\t\tthere&#39;s one battle you can win. And that&#39;s where you put your hard-earned money. I for sure will not be\r\t\t\tgiving money for a touchfest-inspired version of a classic desktop operating system. Call it &#34;Low-IQ&#34;\r\t\t\tedition, I might consider it. Call it &#34;Pro&#34;, I don&#39;t want any of the nonsense. Simple.\n  In 15-20 years, I intend to be on a small island somewhere, open a bakery or some other post-IT\r\t\t\tdetox syndrome business that people do once they get fed up with chewing on the sour end of the\r\t\t\tcorporate stick. By then, I hope my biggest concerns will be the weather for the day and who I invite\r\t\t\tto my BBQ. And I hope to go online only when I need to shoot or race some friends in a game, or to\r\t\t\tcheck email once a week because that&#39;s what you do when you live on a small island somewhere.\n  Until then, I still must wrestle with occasional stupidity. I have already stated that I have no\r\t\t\tintention of using Windows 11, and the additional constraint on the Pro version seals the deal for\r\t\t\tgood. I hope you find this little rant entertaining. The really interesting bits will be the follow up\r\t\t\tarticles, over the next months and years, in which I will painstaking detail my migration experiences\r\t\t\tand hurdles. Hopefully, everything will work, but even if not, I&#39;ll do my best to solve the problems\r\t\t\tthat arise. It took me five years to get SketchUp working again in Linux, and if it takes me another\r\t\t\tfive to sort out a dozen other issues, so be it. But I will not give up.", "posttime": "2022-02-25 20:28:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,\u53ef\u80fd", "title": "\u79bb\u5f00\u7a97\u6237\u2014\u2014\u5f00\u59cb\u4e86", "title_en": "Moving away from Windows \u2013 It begins", "transed": 1, "url": "https://www.dedoimedo.com/computers/windows-moving-away.html", "via": "", "real_tags": ["windows", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074969, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u8bde\u751f\u4ee5\u6765\uff0c\u8c37\u6b4c\u7684\u4e3b\u9875\u5c31\u6709\u4e00\u4e2a\u4e09\u4f4d\u4e00\u4f53\u7684\u7279\u70b9\uff1a\u5728\u4e94\u989c\u516d\u8272\u7684logo\u4e0b\u9762\u662f\u4e00\u4e2a\u641c\u7d22\u8868\u5355\u3001\u4e00\u4e2a\u641c\u7d22\u6309\u94ae\uff0c\u6700\u540e\u662f\u4e00\u4e2a\u5199\u7740\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u7684\u6309\u94ae\u8fd9\u4e2a\u53e4\u602a\u7684\u529f\u80fd\u7ed5\u8fc7\u5178\u578b\u7684\u7ed3\u679c\u7d22\u5f15\uff0c\u5c06\u7528\u6237\u8f6c\u79fb\u5230\u7ed9\u5b9a\u641c\u7d22\u8bcd\u7684\u9876\u90e8\u7ed3\u679c\u3002\u4f8b\u5982\uff0c\u5728\u8c37\u6b4c\u641c\u7d22\u4e2d\u8f93\u5165\u201cReal Life\u201d\u540e\uff0c\u4f7f\u7528\u8be5\u6309\u94ae\uff0c\u4f1a\u5f39\u51faBurna Boy\u548cStormzy\u540c\u540d\u6b4c\u66f2\u7684\u97f3\u4e50\u89c6\u9891\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u90a3\u4e9b\u5904\u4e8e\u751f\u5b58\u5371\u673a\u75db\u82e6\u4e2d\u7684\u4eba\u53ef\u80fd\u4f1a\u5bfb\u627e\u201c\u6709\u795e\u5417\uff1f\u201d\u767b\u9646\u4e00\u4e2a\u5927\u578b\u57fa\u7763\u6559\u7ec4\u7ec7\u4e3b\u6301\u7684\u7688\u4f9d\u9875\u9762\u3002\u5c06\u641c\u7d22\u680f\u7559\u7a7a\uff0c\u7528\u4e8e\u751f\u6210\u968f\u673a\u7f51\u9875\uff1b\u73b0\u5728\uff0c\u5c06\u9f20\u6807\u60ac\u505c\u5728\u6309\u94ae\u4e0a\u65b9\u4f1a\u4ea7\u751f\u4e00\u4e2a\u7c7b\u4f3c\u8001\u864e\u673a\u7684\u201c\u6211\u201d\u8bed\u53e5\uff08\u201c\u6211\u611f\u5230\u597d\u5947\u201d\u3001\u201c\u6211\u611f\u5230\u997f\u4e86\u201d\u7b49\u7b49\uff09\u3002\u70b9\u51fb\u6d4f\u89c8\uff0c\u7136\u540e\u968f\u673a\u63d0\u4f9b\u4e00\u4e2a\u8c37\u6b4c\u54c1\u724c\u7684\u7f51\u9875\u3002\n\u300a\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u300b\u6240\u627f\u8bfa\u7684\u5404\u79cd\u53ef\u80fd\u6027\uff0c\u8ba9\u4eba\u60f3\u8d77\u4e86\u4e00\u4e2a\u57fa\u672c\u4e0a\u5df2\u7ecf\u901d\u53bb\u7684\u4e92\u8054\u7f51\u6587\u5316\u65f6\u4ee3\uff0c\u8fd9\u4e2a\u65f6\u4ee3\u88ab\u4e00\u79cd\u968f\u610f\u3001\u8f7b\u6d6e\u548c\u60a0\u95f2\u7684\u7cbe\u795e\u6240\u5b9a\u4e49\u3002\u5728\u6309\u94ae\u8bde\u751f\u65f6\uff0c\u201c\u4e0a\u7f51\u201d\u4ec5\u9650\u4e8e\u7279\u5b9a\u7684\u56fd\u5185\u548c\u4e13\u4e1a\u7ec8\u7aef\u3002\u8fd9\u662f\u4e00\u9879\u72ec\u7acb\u7684\u6d3b\u52a8\uff0c\u4e00\u4e2a\u4eba\u9009\u62e9\u53c2\u52a0\u6216\u4e0d\u53c2\u52a0\u2014\u2014\u4f60\u5728\u7ebf\u6216\u4e0d\u5728\u7ebf\u2014\u2014\u5bf9\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u79cd\u7231\u597d\u3002\u5728\u4e00\u4e2a\u66f4\u5c0f\u3001\u66f4\u201c\u4eba\u6027\u5316\u201d\u7684\u7f51\u7edc\u7a7a\u95f4\u4e2d\u822a\u884c\u662f\u53ef\u4ee5\u7ba1\u7406\u7684\u3002\u5b83\u5e26\u6765\u4e86\u4e00\u79cd\u81ea\u7531\u611f\uff1a\u201c\u767b\u5f55\u201d\u662f\u4e3a\u4e86\u9009\u62e9\u81ea\u5df1\u7684\u5192\u9669\uff0c\u800c\u4e0d\u662f\u88ab\u6a21\u7cca\u7684\u7b97\u6cd5\u6240\u5f15\u5bfc\uff0c\u6216\u662f\u4e2a\u4eba\u6570\u636e\u88ab\u7a83\u53d6\u3002\u201c\u6211\u611f\u5230\u5e78\u8fd0\u201d\u5c31\u662f\u8fd9\u79cd\u7cbe\u795e\u7684\u7f29\u5f71\u3002\u63b7\u9ab0\u5b50\uff0c\u90a3\u4e9b\u65e9\u671f\u7684\u7528\u6237\u53ef\u4ee5\u611f\u89c9\u5230\u547d\u8fd0\u5728\u4ed6\u4eec\u8fd9\u8fb9\u3002\n\u201c\u6211\u89c9\u5f97\u5f88\u5e78\u8fd0\u201d\u73b0\u5728\u57fa\u672c\u4e0a\u6ca1\u7528\u4e86\u30022007\u5e74\uff0c\u65f6\u4efb\u8c37\u6b4c\u9ad8\u7ba1\u7684\u739b\u4e3d\u838e\u00b7\u6885\u8036\uff08Marissa Mayer\uff09\u5206\u4eab\u8bf4\uff0c\u53ea\u67091%\u7684\u8c37\u6b4c\u641c\u7d22\u662f\u901a\u8fc7\u6309\u94ae\u8fdb\u884c\u7684\uff1b\u5185\u90e8\u5206\u6790\u8fdb\u4e00\u6b65\u4f30\u8ba1\uff0c\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u8ba9\u516c\u53f8\u6bcf\u5e74\u635f\u5931\u8d85\u8fc71\u4ebf\u7f8e\u5143\u7684\u6536\u5165\uff0c\u56e0\u4e3a\u5b83\u8df3\u8fc7\u4e86\u5145\u6ee1\u5e7f\u544a\u7684\u641c\u7d22\u9875\u9762\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u8c37\u6b4c\u7684\u4e00\u9879\u5df2\u6709\u5341\u5e74\u5386\u53f2\u7684\u641c\u7d22\u529f\u80fd\u201c\u77e5\u8bc6\u56fe\u201d\uff08Knowledge Graph\uff09\u8fdb\u4e00\u6b65\u6d88\u9664\u4e86\u7acb\u5373\u8bbf\u95ee\u9876\u7ea7\u641c\u7d22\u7ed3\u679c\u7684\u9700\u8981\u3002\u8be5\u529f\u80fd\u76f4\u63a5\u5728\u641c\u7d22\u9875\u9762\u4e0a\u63d0\u4f9b\u67e5\u8be2\u7b54\u6848\u3002\n\u5982\u4eca\uff0c\u4ece\u4e92\u8054\u7f51\u5e74\u9274\u4e2d\u968f\u673a\u83b7\u5f97\u4e00\u4e2a\u7f51\u9875\u7684\u60f3\u6cd5\u662f\u4e00\u79cd\u9690\u7ea6\u7684\u5a01\u80c1\uff08\u81f3\u5c11\u662f\u4e4f\u5473\u7684\uff09\uff0c\u800c\u4e0d\u662f\u50cf\u4ee5\u524d\u770b\u8d77\u6765\u7684\u90a3\u6837\u5076\u7136\u3002\u6709\u53ef\u80fd\u5f88\u591a\uff08\u5982\u679c\u4e0d\u662f\u5927\u591a\u6570\u7684\u8bdd\uff09\u8c37\u6b4c\u7528\u6237\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6309\u94ae\u662f\u7528\u6765\u505a\u4ec0\u4e48\u7684\uff0c\u800c\u90a3\u4e9b\u5f88\u5c11\u60f3\u5230\u5b83\u7684\u4eba\u3002\u8fd9\u4e00\u7279\u5f81\u4ecd\u7136\u662f\u4e00\u4e2a\u5947\u602a\u7684\u9057\u8ff9\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u50cf\u9f39\u9f20\u6216\u9f7f\u9699\u8fd9\u6837\u7684\u7ec6\u8282\uff1a\u4e00\u4e2a\u4ee4\u4eba\u8d39\u89e3\u7684\u7279\u5f81\uff0c\u8ba9\u539f\u672c\u719f\u6089\u7684\u666f\u8c61\u6709\u4e00\u79cd\u5fae\u5c0f\u7684\u3001\u65e0\u6cd5\u6bd4\u62df\u7684\u795e\u79d8\u611f\u3002\u4f46\u5b83\u4f3c\u4e4e\u6ca1\u4ec0\u4e48\u4f5c\u7528\u3002\n\u662f\u4ec0\u4e48\u8ba9\u8c37\u6b4c\u4e0d\u4f1a\u50cf\u5728\u5176\u884c\u4e3a\u51c6\u5219\u4e2d\u6700\u5c0f\u5316\u201c\u4e0d\u8981\u4f5c\u6076\u201d\u4e00\u6837\uff0c\u8ba9\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\uff1f\u65e9\u57282007\u5e74\uff0c\u6885\u8036\u5c14\u5c31\u8ba4\u4e3a\u8c37\u6b4c\u4e00\u76f4\u5728\u6309\u52a8\u6309\u94ae\uff0c\u4ee5\u63d0\u9192\u5176\u5ba2\u6237\u7fa4\u8be5\u516c\u53f8\u7684\u4eba\u6027\uff1a\u6709\u201c\u771f\u4eba\u201d\u638c\u8235\uff0c\u8c37\u6b4c\u662f\u4e00\u5bb6\u53cb\u597d\u7684\u4f01\u4e1a\uff0c\u5e76\u4e0d\u201c\u592a\u6ce8\u91cd\u8d5a\u94b1\u201d\u5982\u679c\u8fd9\u4e00\u89e3\u91ca\u57282007\u5e74\u663e\u5f97\u7ad9\u4e0d\u4f4f\u811a\u7684\u8bdd\uff0c\u90a3\u4e48\u9274\u4e8e\u516c\u4f17\u5bf9\u8be5\u516c\u53f8\u519b\u56fd\u4e3b\u4e49\u503e\u5411\u3001\u8d2a\u5a6a\u7684\u76d1\u89c6\u8ba1\u5212\u548c\u767d\u4eba\u81f3\u4e0a\u7684\u610f\u8bc6\uff0c\u5b83\u5728\u6b64\u540e\u768415\u5e74\u91cc\u5df2\u7ecf\u5d29\u6e83\u4e86\u3002\n\u53f2\u8482\u6587\u00b7\u5229\u7ef4\uff08Steven Levy\uff09\u662f\u300a\u5728\u4e1b\u4e2d\uff1a\u8c37\u6b4c\u5982\u4f55\u601d\u8003\u3001\u5de5\u4f5c\u548c\u5851\u9020\u6211\u4eec\u7684\u751f\u6d3b\u300b\u4e00\u4e66\u7684\u4f5c\u8005\uff0c\u4ed6\u89e3\u91ca\u8bf4\uff0c\u8c37\u6b4c\u7684\u8054\u5408\u521b\u59cb\u4eba\u5728\u4ed6\u4eec\u7684\u7f51\u9875\u4e0a\u5199\u4e0b\u4e86\u201c\u6211\u611f\u5230\u5f88\u5e78\u8fd0\u201d\uff0c\u8fd9\u662f\u201c\u4e00\u6b21\u4ee4\u4eba\u9707\u60ca\u7684\u4fe1\u5fc3\u6295\u6807\uff0c\u8fd9\u610f\u5473\u7740\uff0c\u4e0e\u7ade\u4e89\u5bf9\u624b\u4e0d\u540c\uff0c\u8c37\u6b4c\u80fd\u591f\u5728\u7b2c\u4e00\u6b21\u5c1d\u8bd5\u65f6\u5c31\u6ee1\u8db3\u4f60\u7684\u8981\u6c42\u3002\u201d\u5f02\u60f3\u5929\u5f00\u3001\u63a7\u5236\u8bba\u5fc3\u7075\u611f\u5e94\u7684\u51fa\u73b0\u662f\u4e00\u4e2a\u72ec\u7279\u7684\u5356\u70b9\uff0c\u53ef\u4ee5\u8ba9\u641c\u7d22\u5f15\u64ce\u8d85\u8d8a\u5176\u4ed6\u9009\u62e9\u3002\u8fd9\u79cd\u529b\u91cf\u6700\u521d\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u6709\u5438\u5f15\u529b\uff0c\u4e5f\u5f88\u6e29\u548c\uff1a\u767b\u5f55\u540e\uff0c\u4f60\u52c7\u6562\u5730\u6309\u7167\u81ea\u5df1\u7684\u6761\u4ef6\u8fdb\u884c\u641c\u7d22\u3002\u8c37\u6b4c\u662f\u4e00\u79cd\u8d44\u6e90\uff0c\u4e00\u79cd\u4f60\u662f\u7528\u6237\u7684\u5de5\u5177\u3002\n\u4f46\u8fd9\u4e2a\u6309\u94ae\u603b\u662f\u6697\u793a\u7740\u66f4\u5927\u7684\u57fa\u7840\u8bbe\u65bd\u613f\u671b\u3002\u8c37\u6b4c\u8054\u5408\u521b\u59cb\u4eba\u62c9\u91cc\u00b7\u4f69\u5947\uff08Larry Page\uff09\u540e\u6765\u627f\u8ba4\uff0c\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u662f\u4e3a\u4e86\u53d6\u4ee3\u4e92\u8054\u7f51\u4e0a\u57fa\u4e8e\u57df\u540d\u7684\u5bfc\u822a\uff1a\u7528\u6237\u4f1a\u201c\u53bb\u8c37\u6b4c\u201d\u8bbf\u95ee\u4efb\u4f55\u4e3b\u9875\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u524d\u5f80\u4e3b\u9875\u3002\u8fd9\u4e00\u9884\u8a00\u5728\u8bb8\u591a\u65b9\u9762\u5df2\u7ecf\u5b9e\u73b0\u3002\u4e00\u79cd\u4ea4\u53c9\u5f15\u7528\u641c\u7d22\u7b97\u6cd5\u5e2e\u52a9\u8c37\u6b4c\u6700\u597d\u5730\u8ba9\u5b83\u7684\u7ade\u4e89\u5bf9\u624b\u6210\u4e3a\u4e00\u4e2a\u52a8\u8bcd\uff1bChrome\u5360\u636e\u4e86\u8be5\u884c\u4e1a\u7684\u4e3b\u5bfc\u5730\u4f4d\uff1b\u8fd9\u4e2a\u66fe\u7ecf\u88ab\u4fdd\u7559\u7528\u4e8e\u5728\u7f51\u7edc\u6d4f\u89c8\u5668\u4e0a\u952e\u5165URL\u7684\u7a7a\u95f4\u73b0\u5728\u4e5f\u53ef\u4ee5\u7528\u4f5c\u8c37\u6b4c\u641c\u7d22\u95e8\u6237\u3002\n\u8c37\u6b4c\u4e00\u76f4\u662f\u4e92\u8054\u7f51\u4e0a\u8bbf\u95ee\u91cf\u6700\u5927\u7684\u57df\u540d\uff0c\u76f4\u5230\u53bb\u5e7412\u6708\u88abTikTok\u53d6\u4ee3\u3002\u8be5\u516c\u53f8\u8fd8\u6839\u636e\u81ea\u5df1\u7684\u613f\u666f\u5851\u9020\u4e86\u5546\u4e1a\u6d41\uff0c\u652f\u6301\u6570\u636e\u6536\u96c6\u2014\u2014\u5f97\u5230in-Q-Tel\u7b49\u56fd\u5bb6\u76d1\u63a7\u673a\u6784\u7684\u8ba4\u53ef\u2014\u2014\u4ee5\u53ca\u5e7f\u544a\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u3001\u770b\u4f3c\u65e0\u9650\u7684\u6536\u5165\u6765\u6e90\u3002\u5728\u8fd9\u79cd\u80cc\u666f\u4e0b\u9605\u8bfb\uff0c\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u611f\u89c9\u4e0d\u50cf\u662f\u7528\u6237\u7684\u58f0\u660e\uff0c\u66f4\u50cf\u662f\u4e3b\u4eba\u7684\u58f0\u660e\u2014\u2014\u8fd9\u662f\u8c37\u6b4c\u76f8\u4fe1\u81ea\u5df1\u7edd\u5bf9\u6b63\u786e\u7684\u8c61\u5f81\uff0c\u4ee5\u53ca\u4ee5\u81ea\u5df1\u7684\u5f62\u8c61\u91cd\u5851\u4e92\u8054\u7f51\u7684\u80fd\u529b\u3002\n\u4f5c\u4e3a\u8c37\u6b4c\u7684\u7b2c\u4e00\u6b21\u4e2a\u4eba\u6f14\u8bb2\uff0c\u201c\u6211\u611f\u5230\u5f88\u5e78\u8fd0\u201d\u662f\u8be5\u516c\u53f8\u5bf9\u5723\u7ecf\u201c\u6211\u5c31\u662f\u6211\u81ea\u5df1\u201d\u7684\u7248\u672c\uff1a\u4e00\u4e2a\u65e0\u6240\u4e0d\u80fd\u7684\u5ba3\u8a00\u3002\u8fd9\u79cd\u80c6\u5927\u5984\u4e3a\u5728\u7845\u8c37\u5176\u4ed6\u673a\u6784\u7684\u5c31\u804c\u58f0\u660e\u4e2d\u4e5f\u6709\u5148\u4f8b\u3002\u4f8b\u5982\uff0c\u65af\u56fe\u5c14\u7279\u00b7\u5e03\u5170\u5fb7\uff08Stewart Brand\uff09\u7684\u300a\u5168\u5730\u7403\u76ee\u5f55\u300b\uff08Whole Earth Catalog\uff09\u4e00\u5f00\u59cb\u5c31\u53d1\u8868\u4e86\u4e00\u4efd\u5ba3\u8a00\uff0c\u5ba3\u79f0\u201c\u6211\u4eec\u90fd\u662f\u795e\uff0c\u4e0d\u59a8\u597d\u597d\u5b66\u4e60\u3002\u201d\u548c\u76ee\u5f55\u4e00\u6837\uff0c\u8c37\u6b4c\u8bde\u751f\u4e8e\u4e00\u4e2a\u4e0e\u6211\u4eec\u4e0d\u540c\u7684\u79d1\u6280\u6587\u5316\u4e2d\u2014\u2014\u4e00\u4e2a\u4e0e\u8c37\u6b4c\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u521b\u9020\u7684\u4e92\u8054\u7f51\u4e0d\u540c\u7684\u4e92\u8054\u7f51\u3002\u5728\u6210\u7acb\u4e4b\u65f6\uff0c\u8be5\u516c\u53f8\u7684\u54c1\u724c\u4f20\u64ad\u4e86\u4e00\u79cd\u666e\u904d\u7684\u4f11\u95f2\u3001\u4e50\u89c2\u548c\u6c11\u4e3b\u60c5\u611f\uff1a\u4e92\u8054\u7f51\uff0c\u751a\u81f3\u5176\u4f01\u4e1a\u6587\u5316\uff0c\u90fd\u662f\u5173\u4e8e\u5c06\u89c2\u4f17\u8f6c\u5316\u4e3a\u53c2\u4e0e\u8005\uff0c\u5c06\u5c40\u5916\u4eba\u8f6c\u5316\u4e3a\u5c40\u5185\u4eba\u3002\u8fd9\u79cd\u60c5\u611f\u65e9\u5c31\u51dd\u7ed3\u6210\u4e86\u4e0e\u4e4b\u76f8\u53cd\u7684\u4e1c\u897f\u3002\u4f60\u7684\u641c\u7d22\u4e0d\u662f\u4f60\u81ea\u5df1\u7684\uff1b\u8fd9\u662f\u8c37\u6b4c\u7684\u3002\n\u968f\u7740\u8c37\u6b4c\u8d8a\u6765\u8d8a\u6210\u4e3a\u4e92\u8054\u7f51\u4e0a\u7684\u5439\u6367\u8005\uff0c\u201c\u6211\u611f\u5230\u5e78\u8fd0\u201d\u83b7\u5f97\u4e86\u4e00\u4e2a\u9634\u9669\u7684\u53cc\u91cd\u542b\u4e49\uff1a\u4e00\u65b9\u9762\u662f\u5bf9\u8c37\u6b4c\u81ea\u6211\u5b9e\u73b0\u7684\u96c4\u5fc3\u7684\u603b\u7ed3\uff0c\u53e6\u4e00\u65b9\u9762\u4f3c\u4e4e\u575a\u6301\u8ba4\u4e3a\u4eba\u4eec\u4ecd\u7136\u53ef\u4ee5\u5206\u4eab\u5b83\u7684\u4e50\u89c2\u3002\u8fd9\u4e2a\u6309\u94ae\u7684\u6548\u7528\u662f\u516c\u53f8\u7684\uff0c\u800c\u4e0d\u662f\u7528\u6237\u7684\uff0c\u5b83\u7684\u4ef7\u503c\u6700\u7ec8\u662f\u64cd\u7eb5\u6027\u7684\uff1a\u5b83\u5728\u8c37\u6b4c\u7684\u725b\u68da\u91cc\u5524\u8d77\u4e86\u4e00\u79cd\u81ea\u4e3b\u611f\uff0c\u8ba9\u4eba\u56de\u60f3\u8d77\u4e00\u79cd\u6b3a\u9a97\u6027\u7684\u81ea\u7531\u611f\u3002\n\u57282008\u5e74\u7684\u4e00\u7bc7\u7814\u7a76\u8bba\u6587\u4e2d\uff0c\u52a0\u62ff\u5927\u7687\u540e\u5927\u5b66\uff08Queen\u2019s University\uff09\u7684\u6559\u80b2\u56fe\u4e66\u9986\u5458\u521b\u9020\u4e86\u4e00\u79cd\u79f0\u4e3a\u201c\u6211\u611f\u5230\u5e78\u8fd0\u7efc\u5408\u5f81\u201d\uff08I\u2019m Feeling Lucky Syndrome\uff09\u7684\u4e1c\u897f\uff0c\u610f\u601d\u662f\u201c\u4e00\u4e2a\u7f51\u7ad9\u53ef\u4ee5\u56de\u7b54\u4e00\u4e2a\u95ee\u9898\u201d\u8fd9\u4e2a\u6309\u94ae\u201c\u6982\u62ec\u4e86\u7f51\u7edc\u641c\u7d22\u5f88\u5bb9\u6613\u7684\u6982\u5ff5\u201d\uff0c\u800c\u66f4\u590d\u6742\u7684\u641c\u7d22\u9700\u8981\u6df1\u5165\u7684\u601d\u8003\u548c\u6280\u80fd\u3002\u8fd9\u4e2a\u6846\u67b6\u610f\u5473\u7740\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u4e0d\u9f13\u52b1\u81ea\u5bfc\u641c\u7d22\u7684\u6df7\u4e71\u548c\u9ad8\u6548\uff0c\u800c\u652f\u6301\u4ee5\u8c37\u6b4c\u4e3a\u4e2d\u5fc3\u7684\u4fbf\u6377\u5947\u70b9\u3002\u65e2\u7136\u201c\u767b\u5f55\u201d\u65e0\u5173\u7d27\u8981\uff0c\u4e92\u8054\u7f51\u4e0d\u662f\u4e00\u4e2a\u53ef\u4f9b\u9009\u62e9\u7684\u533a\u57df\uff0c\u800c\u662f\u6211\u4eec\u6240\u77e5\u4e16\u754c\u7684\u4e00\u4e2a\u65e5\u5e38\u65b9\u9762\uff0c\u90a3\u4e48\u6307\u5bfc\u6211\u4eec\u81ea\u5df1\u7684\u4f53\u9a8c\u5c31\u6210\u4e86\u4e00\u4e2a\u66f4\u5927\u7684\u6311\u6218\u3002\n\u8fd9\u4e2a\u6309\u94ae\u6709\u4e00\u4e2a\u6a21\u7cca\u7684\u529f\u80fd\uff0c\u5c06\u5176\u7f6e\u4e8e\u4e00\u957f\u4e32\u5728\u63a7\u5236\u8303\u56f4\u5185\u5524\u8d77\u81ea\u4e3b\u6027\u7684\u6280\u672f\u4e2d\uff1a\u5404\u79cd\u5404\u6837\u7684\u201c\u5b89\u6170\u5242\u6309\u94ae\u201d\uff1b\u4e3b\u9898\u516c\u56ed\u6216\u767e\u8d27\u516c\u53f8\u7684\u5e03\u5c40\uff1b\u590d\u6742\u7684\u9690\u79c1\u8bbe\u7f6e\uff0c\u7528\u6237\u6781\u6709\u53ef\u80fd\u9009\u62e9\u9ed8\u8ba4\u8bbe\u7f6e\u3002\u5b83\u5c06\u81ea\u6cbb\u672c\u8eab\u5177\u4f53\u5316\uff0c\u5c06\u5176\u53d8\u6210\u4e00\u79cd\u5916\u90e8\u5546\u54c1\u3002\u8fd9\u4e00\u6218\u7565\u662f\u6570\u5b57\u8d44\u672c\u4e3b\u4e49\u84dd\u56fe\u7684\u4e00\u90e8\u5206\uff0c\u5982\u4eca\u5728\u4ece\u795e\u5947\u5b9d\u8d1dGO\u5230Roblox\u7b49\u5e7f\u53d7\u6b22\u8fce\u7684\u6e38\u620f\u548c\u6e38\u620f\u5e73\u53f0\u4e0a\u5927\u884c\u5176\u9053\uff0c\u5b83\u5141\u8bb8\u7528\u6237\u5728\u6e38\u620f\u5236\u4f5c\u7684\u4e16\u754c\u4e2d\u81ea\u7531\u6f2b\u6e38\uff0c\u540c\u65f6\u5438\u8d70\u4ed6\u4eec\u7684\u52b3\u52a8\u3002\n\u57fa\u4e8e\u8fd9\u4e9b\u53e6\u7c7b\u9886\u57df\u6240\u627f\u8bfa\u7684\u5947\u8ff9\u611f\uff0c\u5b8c\u5168\u865a\u62df\u7ecf\u6d4e\u7684\u4f20\u64ad\u8005\u590d\u5236\u4e86\u4e4c\u5c14\u6e38\u620f\u5316\u7684\u201c\u6211\u611f\u5230\u5e78\u8fd0\u201d\u6a21\u578b\uff0c\u4e3a\u65b0\u7684\u5947\u70b9\u8fa9\u62a4\u3002\u201c\u5143\u5b87\u5b99\u201d\u672c\u8eab\u662f\u4e00\u79cd\u5728\u53d7\u63a7\u73af\u5883\u4e2d\u9009\u62e9\u7684\u5e7b\u89c9\u2014\u2014\u5728\u989d\u5916\u7ef4\u5ea6\u4e2d\u201c\u6211\u611f\u5230\u5e78\u8fd0\u201d\u3002\u50cf\u6309\u94ae\u4e00\u6837\uff0c\u8fd9\u4e9b\u6700\u8fd1\u7684\u5021\u8bae\u5c06\u5931\u53bb\u5bf9\u4e92\u8054\u7f51\u7684\u63a7\u5236\u8bf4\u6559\u4e3a\u79ef\u6781\u3001\u5a31\u4e50\u548c\u6f5c\u5728\u7684\u89e3\u653e\uff1b\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u4e0e\u201cweb 2.0\u201d\u7684\u5931\u671b\u4e0d\u540c\uff0c\u672a\u6765\u7684\u5728\u7ebf\u7ed3\u7b97\u5c06\u66f4\u52a0\u81ea\u7531\uff0c\u56de\u5f52\u4e92\u8054\u7f51\u8d77\u6e90\u7684\u524d\u6cbf\u548cDIY\u7cbe\u795e\u3002\u4f46\u4f17\u8bae\u9662\u603b\u662f\u8d62\u3002\nAdam Willems\u662f\u897f\u96c5\u56fe\u7684\u81ea\u7531\u64b0\u7a3f\u4eba\u548c\u8bb0\u8005\u3002\u4ed6\u4eec\u64b0\u5199\u300a\u795e\u6027\u521b\u65b0\u300b\uff0c\u8fd9\u662f\u4e00\u4efd\u5173\u4e8e\u7075\u6027\u548c\u6280\u672f\u7684\u6709\u70b9\u539a\u989c\u65e0\u803b\u7684\u65f6\u4e8b\u901a\u8baf\u3002", "note_en": "Since its   genesis, Google\u2019s homepage has featured a trinity: Beneath the multicolored logo lies a search form, a search button, and, finally, a button that reads \u201cI\u2019m Feeling Lucky.\u201d The quirky feature transports the user to the top result for a given search term, bypassing the typical index of results. Using the button after typing  \u201cReal Life\u201d into Google search, for instance, brings up the   music video for Burna Boy and Stormzy \u2019s song of the same name. Those in the throes of an existential crisis, meanwhile, might search  \u201cIs there a god?\u201d and land on a   conversion page hosted by a large Christian organization. Leaving the search bar blank used to yield a random webpage; now, hovering over the button produces a slot machine-like roll of \u201cI\u2019m\u201d statements (\u201cI\u2019m Feeling Curious,\u201d \u201cI\u2019m Feeling Hungry,\u201d etc.). Clicking through then furnishes a Google-branded Web page at random.\n The range of possibilities promised by  \u201cI \u2019m Feeling Lucky\u201d harkens to a largely bygone era of internet culture defined by an aleatory, frivolous, and leisurely ethos. At the time of the button\u2019s birth, \u201cgoing online\u201d was limited to specific domestic and professional terminals. It was a discrete activity that one opted into or didn\u2019t \u2014  you\u2019re online or you\u2019re not \u2014 and, for many, a hobby.  Navigating a smaller and more \u201chuman\u201d cyberspace was manageable. It came with a sense of freedom: To \u201clog on\u201d was to choose one\u2019s own adventure, not to be shepherded by shadowy algorithms or bled of one\u2019s personal data.  \u201cI\u2019m Feeling Lucky\u201d epitomized this spirit. Rolling the dice, those early users could feel as though fate was on their side.\n  \u201cI \u2019m Feeling Lucky\u201d is now largely unused. In 2007, Marissa Mayer, then a Google exec, shared that only one percent of Google searches went through the button; internal analysis further estimated that  \u201cI \u2019m Feeling Lucky\u201d cost the company more than $100 million in revenue per year because it skipped over ad-filled search pages. And since then, Knowledge Graph, a decade-old Google   search feature that provides answers to queries directly on the search page, has further obviated the need to immediately access a top-search result.\n Today, the idea of being served a random webpage from the internet\u2019s annals is vaguely menacing (at least, tedious), not serendipitous as it once seemed. It\u2019s possible that many, if not most, Google users have no idea what the button is for, and those who do rarely think about it. The feature persists as a curious relic, or a detail like a mole or tooth gap: a puzzling characteristic that gives an otherwise familiar sight a minor, unassimilable mystique. But it doesn\u2019t seem to  do much.\n What keeps Google from sunsetting  \u201cI \u2019m Feeling Lucky\u201d the same way it minimized  \u201c  Don \u2019 t Be Evil \u201d in its code of conduct? Back in 2007, Mayer argued that Google kept the button around to remind its customer base of the company \u2019s humanity: With  \u201creal people\u201d at the helm, Google was a friendly business and not  \u201ctoo much about making money.\u201d If that explanation seemed tenuous in 2007, it has collapsed in the 15 years since, given public awareness of the company \u2019s   militaristic proclivities,   ravenous surveillance schemes, and   white supremacy.\n Steven Levy, author of    In the Plex: How Google Thinks, Works, and Shapes Our Lives, explains that Google \u2019s co-founders included  \u201cI \u2019m Feeling Lucky\u201d on their webpage in  \u201ca startling bid of confidence that implied that, unlike the competition, Google was capable of nailing your request on the first try.\u201d The appearance of whimsical, cybernetic telepathy was a unique selling point that could place the search engine above its alternatives. This power might have initially seemed attractive and benign: Logging on, you ventured intrepidly into your own search and on your own terms. Google was a resource, a tool of which you were the user.\n  But the button always hinted at larger infrastructural aspirations. Google co-founder Larry Page later admitted that  \u201cI \u2019m Feeling Lucky\u201d was intended to replace domain name-based navigation on the internet: Users would  \u201cgo to Google\u201d to visit any homepage, rather than head to a homepage directly. This prophecy has in many ways come to fruition. A cross-referential search algorithm helped Google   best its competitors to become a verb; Chrome has dominated its sector; and the void once reserved for typing in a URL on Web browsers can now also be used as a Google search portal.\n Google stood as the most-visited domain on the internet until it was   dethroned by TikTok in December. The company has also shaped commercial flows in line with its vision, championing data collection \u2014 with the endorsement of state-surveillance institutions like   In-Q-Tel \u2014 as well as advertisements as definitive, seemingly limitless sources of income.  Read in this context, \u201cI\u2019m Feeling Lucky\u201d feels less like the user\u2019s declaration, and more like the host\u2019s \u2014 a symbol of Google\u2019s belief in its own infallibility, as well as its capacity to remake the internet in its own image.\n As Google \u2019s first personal utterance,  \u201cI \u2019m Feeling Lucky\u201d was the company \u2019s version of the Biblical  \u201c  I Am Who I Am\u201d: a declaration of omnipotence. Such  audacity finds precedent in the inaugural  statements of other Silicon Valley institutions. Stewart Brand \u2019s  Whole Earth Catalog, for instance, began with a manifesto declaring that  \u201cwe  are as gods and might as well get good at it.\u201d  Like the  Catalog, Google  was born in a different tech culture from our own \u2014 a different internet than Google in large part created. At the time of its founding, the company\u2019s branding channeled a  prevailing sense of leisure and optimism,  and a democratic sensibility: The internet, and even its corporate culture, was about converting spectators to participants, outsiders to insiders. That sensibility has long since congealed into something resembling its opposite. Your search is not your own; it\u2019s Google\u2019s.\n  As Google has increasingly become the internet  tout court, \u201cI\u2019m Feeling Lucky\u201d has obtained a sinister double meaning: at once a summary of Google\u2019s self-fulfilling ambition, and an artifact that seems to insist one could still share in its optimism. The button\u2019s utility is the company\u2019s, not the user\u2019s, and its value is ultimately manipulative: It conjures a sense of autonomy within Google\u2019s bullpen, hearkening back to a deceptive sense of freedom.\n In a 2008 research paper, education librarians at Queen \u2019s University in Canada  coined something called the \u201cI \u2019m Feeling Lucky Syndrome,\u201d meaning the belief \u201cthat a single query can be answered by a single website.\u201d The button \u201cepitomizes the notion that web searching is easy,\u201d whereas deep thought and skill are required for more sophisticated search. This framework implies that  \u201cI \u2019m Feeling Lucky\u201d discourages the messy, productive chaos of self-directed search in favor of a convenient, Google-centric singularity. Now that \u201clogging on\u201d is irrelevant, and the internet is not an alternative zone but an everyday aspect of the world we know, directing our own experience becomes a more sprawling challenge.\n The button has an obfuscating function that places it within a long list of techniques for evoking autonomy within control: all manner of \u201c  placebo buttons\u201d; the layout of a theme park or department store; complicated privacy settings where users are overwhelmingly likely to choose the default. It reifies autonomy itself, turning it into an external commodity. This strategy, part of the blueprint for digital capitalism, is today writ large in massively popular games and gaming platforms \u2014 from Pok\u00e9mon GO to Roblox \u2014 which allow a user the freedom to roam within a world of the game\u2019s making, while siphoning off their labor.\n Trading on the sense of wonder these alternative realms promise, evangelists of fully virtual economies have copied the Ur-gamifying \u201cI\u2019m Feeling Lucky\u201d model to justify new singularities. The \u201cmetaverse\u201d itself is an illusion of choice in a controlled environment \u2014 \u201cI\u2019m Feeling Lucky\u201d in extra dimensions. Like the button, these recent initiatives moralize losing control on the internet as positive, entertaining, and potentially liberating; they suggest that, unlike the disappointment of \u201cweb 2.0,\u201d future online settlement will be freer, returning to the frontierist and DIY ethos of the internet\u2019s genesis. But the house always wins.\n Adam\u00a0 Willems\u00a0is a Seattle-based freelance writer and reporter. They write  Divine Innovation, a somewhat cheeky newsletter on spirituality and technology.", "posttime": "2022-02-25 20:25:59", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,feeling", "title": "\u4e3a\u4ec0\u4e48\u8c37\u6b4c\u8fd8\u6709\u201c\u6211\u611f\u89c9\u5f88\u5e78\u8fd0\u201d\u6309\u94ae\uff1f", "title_en": "Why does Google still have the \u201cI\u2019m Feeling Lucky\u201d button?", "transed": 1, "url": "https://reallifemag.com/search-party/", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "feeling"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074967, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "FreeBSD\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5185\u7f6e\u7684NFS\u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u7406\u89e3NFSv3\u548cNFSv4\u534f\u8bae\u3002\u5982\u679c\u60a8\u662fNFS\u65b0\u624b\uff0c\u300aFreeBSD\u624b\u518c\u300b\u7684\u8fd9\u4e00\u90e8\u5206\u5f88\u597d\u5730\u6982\u8ff0\u4e86NFS\u53ca\u5176\u7ec4\u4ef6\u3002\n\u5982\u679c\u60a8\u4ee5\u524d\u5728FreeBSD\u4e0a\u914d\u7f6e\u8fc7NFS\uff0c\u5219\u4f7f\u7528\u8fc7\u4ee5\u4e0b\u914d\u7f6e\u5de5\u4f5c\u6d41\uff1a\n\u901a\u8fc7\u5411/etc/exports\u914d\u7f6e\u6587\u4ef6\u6dfb\u52a0\u6761\u76ee\uff0c\u63a7\u5236\u7cfb\u7edf\u5bf9\u5171\u4eab\u76ee\u5f55\u7684\u6743\u9650\u3002\n\u60a8\u53ef\u80fd\u542c\u8bf4OpenZFS\u63d0\u4f9b\u4e86\u81ea\u5df1\u7684sharenfs\u5c5e\u6027\u3002\u6b64\u5c5e\u6027\u5982\u4f55\u66f4\u6539NFS\u914d\u7f6e\u5de5\u4f5c\u6d41\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u5b83\uff1f\u7b80\u800c\u8a00\u4e4b\uff0c\u5f53\u60a8\u4f7f\u7528zfs set sharenfs\u800c\u4e0d\u662f\u76f4\u63a5\u7f16\u8f91/etc/exports\u6765\u6307\u5b9a\u914d\u7f6e\u9009\u9879\u65f6\uff0c\u5b83\u6539\u53d8\u4e86\u7b2c#2\u6b65\u3002\n\u4eca\u5929\u7684\u6587\u7ae0\u56de\u7b54\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u95ee\u9898\uff0c\u6bd4\u5982\u4e3a\u4ec0\u4e48\u8981\u5728NFS\u914d\u7f6e\u4e2d\u4f7f\u7528sharenfs\u5c5e\u6027\uff0c\u4ee5\u53ca\u5982\u4f55\u4f7f\u7528\u3002\nexports\u662fmountd\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8be5\u670d\u52a1\u76d1\u542c\u6765\u81eaNFS\u5ba2\u6237\u7aef\u7684NFS\u88c5\u8f7d\u8bf7\u6c42\u3002\u7531\u4e8emountd\u4ec5\u5728\u542f\u52a8\u65f6\u8bfb\u53d6\u5176\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u6bcf\u5f53\u7f16\u8f91/etc/exports\u65f6\uff0c\u60a8\u5fc5\u987b\u8bb0\u4f4f\u670d\u52a1mountd reload\uff0c\u4ee5\u4fbf\u8ba9\u670d\u52a1\u77e5\u9053\u5176\u914d\u7f6e\u6709\u66f4\u6539\u3002\nsharenfs\u662f\u4e00\u4e2aZFS\u5c5e\u6027\uff0c\u7528\u4e8e\u6307\u793a\u5171\u4eab\u662f\u5426\u53ef\u7528\uff08\u6253\u5f00/\u5173\u95ed\uff09\u4ee5\u53ca\u8be5\u5171\u4eab\u7684\u914d\u7f6e\u8be6\u7ec6\u4fe1\u606f\u3002\u7531\u4e8e\u914d\u7f6e\u8be6\u7ec6\u4fe1\u606f\u6ca1\u6709\u7ed1\u5b9a\u5230mountd\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56e0\u6b64\u5bf9\u8be5\u5c5e\u6027\u7684\u4efb\u4f55\u66f4\u6539\u90fd\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\uff0c\u800c\u65e0\u9700\u9996\u5148\u91cd\u65b0\u52a0\u8f7dmountd\u3002\n\u867d\u7136\u4e0d\u5fc5\u8bb0\u4f4f\u91cd\u65b0\u52a0\u8f7dmountd\u5f88\u65b9\u4fbf\uff0c\u4f46sharenfs\u4f5c\u4e3aZFS\u5c5e\u6027\u8fd8\u6709\u5176\u4ed6\u597d\u5904\uff1a\n\u53ef\u4ee5\u5c06sharenfs\u5c5e\u6027\u6307\u5b9a\u7ed9zfs get\u547d\u4ee4\uff0c\u4ee5\u786e\u5b9a\u5f53\u524d\u901a\u8fc7NFS\u5171\u4eab\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u5e76\u67e5\u770b\u6bcf\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684NFS\u5171\u4eab\u8be6\u7ec6\u4fe1\u606f\u3002\n\u901a\u8fc7\u8bbe\u7f6ezfs\uff0c\u5c06sharenfs\u8bbe\u7f6e\u4e3aon\u6216off\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u57fa\u7840\u4e0a\u542f\u7528/\u7981\u7528\u8be5\u5c5e\u6027\u3002\n\u5b50\u6570\u636e\u96c6\u81ea\u52a8\u4ece\u5176\u7236\u6570\u636e\u96c6\u7ee7\u627fsharenfs\u5c5e\u6027\u3002\u4f5c\u4e3aZFS\u5c5e\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u5b50\u6570\u636e\u96c6\u4e0a\u7684ZFS\u96c6\u8986\u76d6\u7ee7\u627f\u7684\u9ed8\u8ba4\u503c\uff0c\u4ee5\u6307\u5b9a\u8be5\u6570\u636e\u96c6\u6240\u9700\u7684\u5185\u5bb9\u3002\n\u5982\u679c\u60a8\u5728\u5e26\u6709OpenZFS\u6587\u4ef6\u7cfb\u7edf\u7684FreeBSD\u7cfb\u7edf\u4e0a\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5de5\u4f5c\u7684NFS\u914d\u7f6e\uff0c\u90a3\u4e48\u4f7f\u7528zfs set\u5f88\u5bb9\u6613\u91cd\u65b0\u521b\u5efa\u60a8\u7684\u914d\u7f6e\u3002\u4f8b\u5982\uff0c/etc/exports\u4e2d\u7684\u8fd9\u4e00\u884c\uff1a\n\u8fd9\u610f\u5473\u7740\u60a8\u53ea\u9700\u5bf9/etc/exports\u6587\u4ef6\u4e2d\u7684\u6bcf\u4e00\u884c\u8fd0\u884c\u7b49\u6548\u7684zfs set sharenfs='on\uff0c\u7528_YOUR_OPTIONS\u7684poolname/filesystem\u547d\u4ee4\u66ff\u6362_\u5373\u53ef\u3002\nZFS\u5bf9\u8bb8\u591a\u516c\u53f8\u81f3\u5173\u91cd\u8981\u3002\u6211\u4eec\u6307\u5bfc\u516c\u53f8\u548c\u56e2\u961f\u5b9e\u73b0\u5b89\u5168\u7684ZFS\u767d\u76ae\u4e66\u5b9e\u65bd\uff0c\u4ee5\u589e\u5f3a\u548c\u6539\u8fdb\u57fa\u7840\u8bbe\u65bd\u4e3a\u60a8\u7684\u4e1a\u52a1\u63d0\u4f9b\u652f\u6301\u7684\u65b9\u5f0f\u3002\n\u60a8\u53ef\u4ee5\u4f7f\u7528\u5bfc\u51fa\uff085\uff09\u4e2d\u5217\u51fa\u7684\u4efb\u4f55\u9009\u9879\u3002\u57fa\u672c\u4e0a\uff0c\u5982\u679c\u60a8\u73b0\u5728\u5728/etc/exports\u4e2d\u4f7f\u7528\u5b83\uff0c\u53ef\u4ee5\u4f7f\u7528zfs set\u6307\u5b9a\u5b83\u3002\n\u522b\u5fd8\u4e86\u5728\u9009\u9879\u524d\u9762\u52a0\u4e0aon\uff0c\u4ee5\u4fbf\u5728\u6307\u5b9a\u7684\u6570\u636e\u96c6\u4e0a\u542f\u7528NFS\u5171\u4eab\u3002\n\u8bf7\u6ce8\u610f\uff0czfs sharenfs\u9009\u9879\u7528\u9017\u53f7\u5206\u9694\uff0c\u800c\u4e0d\u662f\u5bfc\u51fa\u6587\u4ef6\u4f7f\u7528\u7684\u7a7a\u683c\u3002\u5728\u811a\u672c\u4e2d\u4f7f\u7528\u547d\u4ee4\u65f6\uff0c\u4f7f\u7528\u9017\u53f7\u53ef\u4ee5\u907f\u514d\u5f15\u7528\u6bcf\u4e2a\u9009\u9879\u3002\nZFS\u5c06\u81ea\u52a8\u66f4\u65b0\u5176/etc/ZFS/exports\u6587\u4ef6\u3002\u6c38\u8fdc\u4e0d\u8981\u76f4\u63a5\u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6\uff01\u60a8\u5e94\u8be5\u59cb\u7ec8\u4f7f\u7528zfs set\u6765\u66f4\u6539sharenfs\u9009\u9879\u3002\n\u65e0\u8bba\u4f55\u65f6\u8fdb\u884c\u66f4\u6539\uff0c\u90fd\u8981\u82b1\u65f6\u95f4\u4eceNFS\u5ba2\u6237\u7aef\u9a8c\u8bc1\u5171\u4eab\u662f\u5426\u6309\u9884\u671f\u8fd0\u884c\u3002\u6b64\u5916\uff0c\u8bf7\u4ed4\u7ec6\u68c0\u67e5/var/log/messages\uff0c\u4ee5\u786e\u5b9a\u662f\u5426\u5b58\u5728\u4efb\u4f55\u9700\u8981\u89e3\u51b3\u7684\u4e0eNFS\u76f8\u5173\u7684\u9519\u8bef\u3002\n\u60a8\u53ef\u80fd\u4e0d\u5e0c\u671b\u5728\u6570\u636e\u96c6\u4e0a\u8fd0\u884czfs set sharenfs=on\u800c\u4e0d\u5305\u542b\u4e00\u4e9b\u9650\u5236\uff0c\u56e0\u4e3a\u672a\u6307\u5b9a\u7684\u9ed8\u8ba4\u503c\u662f\u5141\u8bb8rw\u8bbf\u95ee\u4efb\u4f55\u7f51\u7edc\u4e0a\u7684\u4efb\u4f55\u5ba2\u6237\u7aef\u3002\u5728\u672c\u4f8b\u4e2d\uff0c/usr/ports\u4ec5\u9650\u4e8e\u6307\u5b9a\u7684\u7f51\u7edc\uff0c\u4f46/usr/home\u5bf9\u4efb\u4f55\u7f51\u7edc\u4e0a\u7684\u4efb\u4f55\u4eba\u5f00\u653e\uff1a\n\u5982\u679c\u60a8\u5728\u81ea\u5df1\u7684\u914d\u7f6e\u4e2d\u770b\u5230\u6ca1\u6709maproot\u8bbe\u7f6e\u7684\u6761\u76ee\uff0c\u60a8\u5e94\u8be5\u8bc4\u4f30\u662f\u5426\u9700\u8981\u5bf9\u8be5\u6587\u4ef6\u7cfb\u7edf\u7684sharenfs\u5c5e\u6027\u6dfb\u52a0\u9650\u5236\u3002\nzfs share\u548czfs unshare\u547d\u4ee4\u53ef\u7528\u4e8e\u542f\u7528\u6216\u7981\u7528NFS\u5171\u4eab\u3002\u9700\u8981\u8bb0\u4f4f\u7684\u51e0\u70b9\uff1a\n\u8981\u5168\u5c40\u542f\u52a8\u6216\u505c\u6b62\u6240\u6709\u5171\u4eab\uff0c\u8bf7\u5c06-a\uff08\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\uff09\u4e0ezfs share\u6216zfs unshare\u4e00\u8d77\u4f7f\u7528\u3002\n\u8fd0\u884czfs share\u53ea\u4f1a\u5f71\u54cd\u5df2\u5b9a\u4e49\uff08\u5e76\u8bbe\u7f6e\u4e3aon\uff09sharenfs\u5c5e\u6027\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\u7236\u6587\u4ef6\u7cfb\u7edf\u4e0a\u8fd0\u884czfs share\uff0c\u4f46\u53ea\u6709\u5b9a\u4e49\u4e3aon\u7684\u5b50\u6570\u636e\u96c6\u624d\u4f1a\u5f00\u59cb\u5171\u4eab\u3002\nzfs share/unshare\u53ea\u5173\u6ce8sharenfs\u5c5e\u6027\u3002\u8fd9\u5047\u8bbe\u60a8\u5c06\u7ba1\u7406\u5e95\u5c42\u670d\u52a1\uff0c\u5e76\u6839\u636e\u9700\u8981\u542f\u52a8/\u505c\u6b62\u5b83\u4eec\u3002\nFreeBSD\u5bf9OpenZFS\u548cNFS\u7684\u5185\u7f6e\u96c6\u6210\u4f7f\u7ba1\u7406\u5458\u53ef\u4ee5\u8f7b\u677e\u914d\u7f6e\u548c\u7ba1\u7406NFS\u5171\u4eab\u3002\u901a\u8fc7\u4f7f\u7528OpenZFS\u7684sharenfs\u5c5e\u6027\uff0c\u53ef\u4ee5\u5c06\u7ba1\u7406NFS\u5171\u4eab\u6dfb\u52a0\u5230\u7528\u4e8e\u76d1\u89c6\u548c\u7ef4\u62a4\u5b58\u50a8\u5728OpenZFS\u6587\u4ef6\u7cfb\u7edf\u4e0a\u7684\u6570\u636e\u7684\u811a\u672c\u548c\u8fc7\u7a0b\u5e93\u4e2d\u3002\nZFS\u5bf9\u8bb8\u591a\u516c\u53f8\u81f3\u5173\u91cd\u8981\u3002\u6211\u4eec\u6307\u5bfc\u516c\u53f8\u548c\u56e2\u961f\u5b9e\u73b0\u5b89\u5168\u7684ZFS\u767d\u76ae\u4e66\u5b9e\u65bd\uff0c\u4ee5\u589e\u5f3a\u548c\u6539\u8fdb\u57fa\u7840\u8bbe\u65bd\u4e3a\u60a8\u7684\u4e1a\u52a1\u63d0\u4f9b\u652f\u6301\u7684\u65b9\u5f0f\u3002", "note_en": "FreeBSD provides a built-in NFS server and client which understand the NFSv3 and NFSv4 protocols. If you\u2019re new to NFS, this\u00a0 section of the FreeBSD Handbook\u00a0provides a good overview of NFS and its components.\n If you\u2019ve configured NFS on FreeBSD before, you\u2019ve used this configuration workflow:\n Control the permissions systems have to shared directories by adding entries to the / etc/exports\u00a0configuration file.\n You may have heard that OpenZFS provides its own\u00a0 sharenfs property. How does this property change the NFS configuration workflow and why would you use it? In a nutshell, it changes step #2 as you specify your configuration options using\u00a0 zfs set sharenfs\u00a0instead of by editing / etc/exports\u00a0directly.\n Today\u2019s article answers some common questions about why you would use the\u00a0 sharenfs\u00a0property for NFS configuration and how to do so.\n   exports\u00a0is the configuration file used by\u00a0 mountd, the service that listens for NFS mount requests from NFS clients. Since\u00a0 mountd\u00a0only reads its configuration file when it starts, you have to remember to\u00a0 service mountd reload\u00a0whenever you edit / etc/exports\u00a0in order to let the service know that there are changes to its configuration.\n sharenfs\u00a0is a ZFS property that indicates whether the share is available (on/off) and the configuration details for that share. Since the configuration details are not tied to\u00a0  mountd\u2019s configuration file, any changes to this property are available immediately without needing to first reload\u00a0 mountd.\n While it is convenient to not have to remember to reload\u00a0mountd, there are other benefits that come from\u00a0 sharenfs\u00a0being a ZFS property:\n You can specify the \u00a0 sharenfs\u00a0property to the\u00a0 zfs get\u00a0command to determine which filesystems are currently sharing via NFS and to view per-filesystem NFS sharing details.\n You can enable/disable the property on a per-filesystem basis by setting\u00a0 sharenfs\u00a0to\u00a0 on\u00a0or\u00a0 off\u00a0with\u00a0 zfs set.\n Child datasets automatically inherit the\u00a0 sharenfs\u00a0property from their parent. As a ZFS property, you can override the inherited defaults using\u00a0 zfs set\u00a0on the child dataset to specify what you want for that dataset.\n  If you already have a working NFS configuration on a FreeBSD system with OpenZFS filesystems, it is easy to recreate your configuration using\u00a0 zfs set. For example, this line from / etc/exports:\n    This means you can simply run the equivalent\u00a0 zfs set sharenfs=\u2019on,REPLACE_WITH_YOUR_OPTIONS\u2019 poolname/filesystem\u00a0command for each line in your / etc/exports\u00a0file.\n ZFS is crucial to many companies. We guide companies and teams towards safe, whitepaper implementations of ZFS that enhance and improve the way the infrastructure is enabling your business.\n  You can use any option listed in\u00a0 exports(5). Basically, if you\u2019re using it now in\u00a0 /etc/exports, you can specify it with zfs set.\n Don\u2019t forget to prepend your options with\u00a0 on\u00a0to enable NFS sharing on the specified dataset.\n Note that\u00a0 zfs sharenfs\u00a0options are separated with commas instead of the spaces the exports file uses. Using commas gives the bonus of not having to quote each option when using the command in a script.\n ZFS will update its\u00a0 /etc/zfs/exports\u00a0file automatically. Never edit this file directly! You should always use\u00a0 zfs set\u00a0to change\u00a0 sharenfs\u00a0options .\n Whenever you make a change, take the time to verify from an NFS client that the share is behaving as expected. Also, double-check / var/log/messages\u00a0to determine if there are any NFS-related errors that need to be resolved.\n You probably don\u2019t want to run\u00a0 zfs set sharenfs=on\u00a0on a dataset without including some restrictions, since the unspecified default is to allow rw access to any client on any network. In this example, / usr/ports\u00a0is restricted to the specified network but / usr/ home is wide open to anyone on any network:\n  If you see entries with no\u00a0 maproot\u00a0setting in your own configuration, you should evaluate if you need to add restrictions to that filesystem\u2019s\u00a0 sharenfs\u00a0property.\n  The\u00a0 \u00a0zfs share\u00a0and\u00a0 zfs unshare\u00a0commands can be used to enable or disable NFS sharing. Some points to keep in mind:\n To globally start or stop all sharing, use\u00a0 -a\u00a0(all filesystems) with either\u00a0 zfs share\u00a0or \u00a0zfs unshare.\n  Running\u00a0 zfs share\u00a0only affects the filesystems where you have defined (and set to\u00a0 on) the\u00a0 sharenfs\u00a0property. For example, you could run\u00a0 zfs share\u00a0on a parent filesystem but only the child datasets that have been defined as\u00a0 onwill start sharing.\n zfs share/unshare\u00a0only concerns itself with the\u00a0 sharenfs\u00a0property. This assumes that you will manage the underlying services and will start/stop them as needed.\n  FreeBSD\u2019s built-in integration of OpenZFS and NFS makes it easy for an administrator to configure and manage NFS shares. By using OpenZFS\u2019\u00a0 sharenfs\u00a0property, managing NFS shares can be added to your arsenal of scripts and procedures for monitoring and maintaining the data stored on OpenZFS filesystems.\n ZFS is crucial to many companies. We guide companies and teams towards safe, whitepaper implementations of ZFS that enhance and improve the way the infrastructure is enabling your business.", "posttime": "2022-02-25 20:13:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "zfs,shares,nfs", "title": "NFS\u4e0eZFS\u5171\u4eab", "title_en": "NFS Shares with ZFS", "transed": 1, "url": "https://klarasystems.com/articles/nfs-shares-with-zfs/", "via": "", "real_tags": ["zfs", "shares", "nfs"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074965, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7279\u5fb7\u00b7\u7eb3\u5c14\u900a\u53d1\u660e\u4e86\u8d85\u6587\u672c\uff0c\u4f46\u4e0d\u662f\u7f51\u7edc\u3002\u4ed6\u8ba4\u4e3a\u5b83\u6ca1\u6709\u53d1\u6325\u51fa\u771f\u6b63\u7684\u6f5c\u529b\uff0c\u6211\u4e5f\u540c\u610f\u3002\n\u4ed6\u7684\u4e00\u4e2a\u597d\u4e3b\u610f\u662fstretchtext\uff0c\u7f51\u7edc\u5e76\u4e0d\u771f\u6b63\u652f\u6301\u5b83\u3002stretchtext\u662f\u6839\u636e\u8bfb\u8005\u7684\u5174\u8da3\u800c\u6269\u5c55\u6216\u6536\u7f29\u7684\u6587\u672c\u3002\n\u5728\u6211\u770b\u6765\uff0c\u8fd9\u662f\u975e\u5e38\u9700\u8981\u7684\u3002\u6211\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5728\u7f51\u4e0a\u9605\u8bfb\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u662f\u7565\u8bfb/\u901f\u8bfb\u3002\u4f8b\u5982\uff0c\u6211\u7ecf\u5e38\u6d4f\u89c8\u6587\u672c\uff0c\u53ea\u9605\u8bfb\u6bcf\u4e2a\u6bb5\u843d\u7684\u524d\u51e0\u53e5\uff0c\u9664\u975e\u6211\u627e\u5230\u4e86\u6709\u8da3\u7684\u4e1c\u897f\u3002\n\u6211\u4e0d\u4f1a\u8bd5\u56fe\u8868\u8fbe\u7eb3\u5c14\u900a\u7684\u786e\u5207\u60f3\u6cd5\uff0c\u6211\u4e0d\u4f1a\u8bd5\u56fe\u4e3a\u4ed6\u8bf4\u8bdd\u3002\u76f8\u53cd\uff0c\u6211\u5c06\u4ee5\u62c9\u4f38\u6587\u672c\u7684\u57fa\u672c\u6982\u5ff5\u4e3a\u51fa\u53d1\u70b9\uff0c\u63d0\u51fa\u6211\u81ea\u5df1\u7684\u5404\u79cd\u60f3\u6cd5\u3002\u5982\u679c\u4ed6\u4eec\u4e2d\u6709\u4e9b\u4eba\u5f88\u7a77\uff0c\u90a3\u662f\u6211\u7684\u9519\uff0c\u4e0d\u662f\u7eb3\u5c14\u900a\u7684\u9519\u3002\n\u53ef\u80fd\u6700\u7b80\u5355\u3001\u6700\u660e\u663e\u7684\u62c9\u4f38\u6587\u672c\u5f62\u5f0f\u5c31\u662f\u6211\u6240\u8bf4\u7684\u4e0b\u62c9\u6587\u672c\u3002\u4f60\u6709\u65f6\u4f1a\u5728\u7f51\u4e0a\u770b\u5230\u5b83\u3002\u6587\u672c\u5206\u4e3a\u591a\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u6709\u4e00\u4e2a\u90e8\u5206\u6807\u9898\u3002\u4f46\u4f60\u770b\u4e0d\u5230\u7ae0\u8282\uff0c\u53ea\u6709\u6807\u9898\u3002\u7136\u800c\u5728\u6bcf\u4e2a\u6807\u9898\u7684\u5f00\u5934\u90fd\u6709\u4e00\u4e2a\u7bad\u5934\u6307\u5411\u53f3\u8fb9\u3002\u5982\u679c\u5355\u51fb\u7bad\u5934\uff0c\u7bad\u5934\u5c06\u6307\u5411\u4e0b\u65b9\uff0c\u8be5\u90e8\u5206\u5c06\u663e\u793a\uff08\u4e0b\u62c9\uff09\u3002\nDrop text\u7701\u53bb\u4e86\u4f60\u9605\u8bfb/\u6d4f\u89c8\u9690\u85cf\u90e8\u5206\u7684\u65f6\u95f4\u2014\u2014\u53ef\u89c1\u7684\u6807\u9898\u5e94\u8be5\u8db3\u4ee5\u51b3\u5b9a\u4f60\u662f\u5426\u611f\u5174\u8da3\u3002\u5b83\u8fd8\u53ef\u4ee5\u8ba9\u4f60\u4e0d\u5fc5\u770b\u90a3\u4e9b\u663e\u7136\u4e0d\u76f8\u5173\u7684\u6750\u6599\uff0c\u4f8b\u5982\u201c\u83b7\u5f97\u5de5\u4f5c\u7b7e\u8bc1\u201d\uff08\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e86\u5de5\u4f5c\u7b7e\u8bc1\uff09\u3002\n\u60a8\u5076\u5c14\u4f1a\u770b\u5230\u62d6\u653e\u6587\u672c\u7684\u53d8\u4f53\uff0c\u6700\u5e38\u89c1\u7684\u60c5\u51b5\u662f\uff0c\u5f53\u8282\u88ab\u9690\u85cf\u65f6\uff0c\u6846\u4e2d\u7684\u7bad\u5934\u4e0d\u662f\u52a0\u53f7\uff0c\u5f53\u8282\u88ab\u5220\u9664\u65f6\uff0c\u6846\u4e2d\u7684\u7bad\u5934\u662f\u51cf\u53f7\u3002\ndrop text\u7684\u4e00\u4e9b\u53d8\u4f53\uff08\u76ee\u524d\u975e\u5e38\u7f55\u89c1\uff09\u5c06\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\uff0c\u5355\u51fb\u7bad\u5934\u53ef\u4ee5\u5c06\u5176\u5411\u4e0b\u65cb\u8f6c\u5230\u4ec545\u5ea6\uff0c\u4ece\u800c\u4ec5\u663e\u793a\u90e8\u5206\u7684\u7b2c\u4e00\u884c\u6216\u4e24\u884c\u3002\u8fd9\u4f1a\u8ba9\u4f60\u66f4\u597d\u5730\u4e86\u89e3\u4f60\u662f\u5426\u60f3\u770b\u5230\u6574\u4e2a\u90e8\u5206\u3002\u5982\u679c\u4f60\u8fd9\u6837\u505a\u4e86\uff0c\u4f60\u53ef\u4ee5\u70b9\u51fb\u7bad\u5934\u4e0b\u65b9\u7684\u7bad\u5934\u5c06\u5176\u8c03\u4f4e\u523090\u5ea6\u3002\u5426\u5219\uff0c\u5355\u51fb\u5176\u4e0a\u65b9\u5c06\u5176\u53d1\u56de\u5e76\u9690\u85cf\u8be5\u90e8\u5206\u3002\n\u6709\u65f6\u5019\uff0c\u5373\u4f7f\u53ea\u662f\u6807\u9898\u4e5f\u4f1a\u8ba9\u4eba\u5206\u5fc3\uff0c\u4f60\u60f3\u8ba9\u5b83\u4eec\u6d88\u5931\u3002\u8fd9\u5c31\u662f\u6740\u77ed\u4fe1\u7684\u60f3\u6cd5\u3002\n\u5728\u4e0b\u62c9\u6587\u672c\u7bad\u5934\u7684\u5de6\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u5927X\u3002\u70b9\u51fbX\u4f1a\u5bfc\u81f4\u6574\u4e2a\u6807\u9898\u6d88\u5931\uff0c\u7bad\u5934\u548cX\u672c\u8eab\u4e5f\u6d88\u5931\u4e86\u3002\u4ec0\u4e48\u90fd\u6ca1\u7559\u4e0b\u3002\n\u5f53\u4f60\u770b\u5230\u4e00\u4e2a\u6807\u9898\u5217\u8868\u65f6\uff0c\u4f60\u53ef\u4ee5\u5feb\u901f\u5220\u9664\u90a3\u4e9b\u4f60\u4e0d\u611f\u5174\u8da3\u7684\u6807\u9898\uff0c\u7136\u540e\u5c1d\u8bd5\u5269\u4e0b\u7684\u6807\u9898\u3002\u6e05\u9664\u90a3\u4e9b\u4e0e\u4f60\u65e0\u5173\u7684\u6750\u6599\u53ef\u4ee5\u8282\u7701\u4f60\u7684\u65f6\u95f4\u548c\u6ce8\u610f\u529b\uff0c\u8ba9\u4f60\u4e13\u6ce8\u4e8e\u91cd\u8981\u7684\u4e8b\u60c5\u3002\u6b64\u5916\uff0c\u4e00\u65e6\u4f60\u8bfb\u5b8c\u4e00\u4e2a\u7ae0\u8282\uff0c\u4f60\u4e5f\u53ef\u4ee5\u628a\u5b83\u6740\u6389\u3002\u6700\u7ec8\uff0c\u4f60\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8fd9\u6837\u6216\u90a3\u6837\u7684\u539f\u56e0\u628a\u6240\u6709\u7684\u4e1c\u897f\u90fd\u6740\u6389\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u7559\u4e0b\u2014\u2014\u4f60\u4f1a\u77e5\u9053\u4f60\u5df2\u7ecf\u770b\u5b8c\u4e86\uff08\u6bd4\u5982\uff09\u90a3\u4e00\u9875\u3002\n\u56fe\u50cf\u4e5f\u53ef\u80fd\u4f1a\u88ab\u6740\u6b7b\uff08\u6216\u8005\u5728\u6211\u4eec\u62cd\u6444\u65f6\u7f29\u5c0f\uff09\u3002\u5e7f\u544a\u4e5f\u662f\u5982\u6b64\uff0c\u4e0d\u8fc7\u8fd9\u6837\u7684\u529f\u80fd\u4f1a\u906d\u5230\u5f3a\u70c8\u62b5\u5236\u3002\u5982\u679c\u80fd\u591f\u5220\u6389\u4e00\u7bc7\u6587\u7ae0\u4e2d\u7684\u4e2a\u522b\u6bb5\u843d\uff0c\u6216\u8005\u5220\u9664\u6240\u6709\u5185\u5bb9\uff0c\u76f4\u5230\u6700\u540e\uff0c\u8fd9\u5c06\u662f\u975e\u5e38\u6709\u7528\u7684\u3002\n\u5728\u6587\u7ae0\u4e2d\u4f7f\u7528kill\u6587\u672c\u5728\u6587\u5b66\u4e0a\u7b49\u540c\u4e8e\u88c1\u526a\u7167\u7247\u3002\u6b63\u5982\u7ecf\u9a8c\u4e30\u5bcc\u7684\u6444\u5f71\u5e08\u6240\u77e5\uff0c\u88c1\u526a\u901a\u5e38\u4f1a\u901a\u8fc7\u53bb\u9664\u65e0\u8da3\u7684\u90e8\u5206\u6765\u663e\u8457\u63d0\u9ad8\u56fe\u7247\u7684\u8d28\u91cf\u3002kill\u6587\u672c\u4e5f\u53ef\u80fd\u5982\u6b64\u3002\n\u5982\u679c\u62c9\u4f38\u6587\u672c\u610f\u5473\u7740\u8ba9\u4e0d\u9700\u8981\u7684\u6587\u672c\u6d88\u5931\uff0c\u90a3\u4e48\u6740\u6b7b\u6587\u672c\u5c31\u662f\u5b83\u7684\u903b\u8f91\u7ed3\u8bba\u3002\u53e6\u4e00\u79cd\u4f7f\u7528\u65b9\u6cd5\u662f\u5728\u9605\u8bfb\u65f6\u3002\u9605\u8bfb\u5b8c\u4e00\u6bb5\u540e\uff0c\u5feb\u901f\u6d4f\u89c8\uff0c\u8ba9\u6587\u7ae0\u7684\u5269\u4f59\u90e8\u5206\u5411\u4e0a\u6eda\u52a8\u3002\n\u5f53\u7136\uff0c\u4f60\u4e0d\u5fc5\u5728\u5199\u5b8c\u4e4b\u524d\u901a\u8bfb\u6574\u6bb5\u3002\u5b83\u4eec\u90fd\u53ef\u4ee5\u9884\u8bbe\u4e3a45\u5ea6\uff0c\u8ba9\u4f60\u53ef\u4ee5\u9009\u62e9\u6269\u5927\u5b83\u6216\u6740\u6b7b\u5b83\u3002\u8fd9\u57fa\u672c\u4e0a\u5c31\u662f\u5f53\u4f60\u6d4f\u89c8\u4e00\u7bc7\u6587\u7ae0\u65f6\uff0c\u4f60\u4f1a\u4e00\u6bb5\u4e00\u6bb5\u5730\u51b3\u5b9a\u662f\u8bfb\u8fd8\u662f\u8df3\u8fc7\u3002\n\u8fd8\u6709\u53e6\u4e00\u4e2a\u4e0ekill text\u4e92\u8865\u7684\u6982\u5ff5\uff0c\u5373\u6211\u6240\u8bf4\u7684grow text\u3002\u5728\u9875\u9762\u5e95\u90e8\u6709\u4e00\u4e2a\u5fbd\u6807\uff0c\u6bd4\u5982\u79cd\u5b50\u7684\u56fe\u50cf\u3002\u5982\u679c\u4f60\u70b9\u51fb\u5b83\uff0c\u5b83\u4f1a\u201c\u751f\u957f\u201d\u6210\u4e00\u6bb5\u5de6\u53f3\uff0c\u4e0b\u9762\u8fd8\u6709\u4e00\u4e2a\u79cd\u5b50\u3002\u4f60\u53ef\u4ee5\u70b9\u51fb\u79cd\u5b50\uff0c\u76f4\u5230\u4f60\u6392\u5217\u597d\u4e00\u4e9b\u9605\u8bfb\u6750\u6599\uff0c\u7136\u540e\u5728\u9605\u8bfb\u7684\u8fc7\u7a0b\u4e2d\u9010\u6e10\u5c06\u5176\u6d88\u706d\u3002\u8fd9\u53ef\u80fd\u662f\u4e00\u79cd\u6709\u8da3\u7684\u6f14\u8bb2\u65b9\u5f0f\uff08\u5728\u5927\u5c4f\u5e55\u4e0a\uff0c\u652f\u6301\u62c9\u4f38\u6587\u672c\uff09\u3002\n\u5f53\u7136\uff0c\u4f60\u4e0d\u5fc5\u6740\u5149\u6240\u6709\u7684\u4e1c\u897f\u3002\u4f60\u53ef\u80fd\u4f1a\u7559\u4e0b\u91cd\u8981\u7684\u90e8\u5206\uff0c\u4e5f\u8bb8\u4f1a\u6682\u65f6\u5012\u584c\u3002\u901a\u8fc7\u8fd9\u6837\u505a\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u6587\u6863\u6458\u8981\uff0c\u4ee5\u5907\u5c06\u6765\u53c2\u8003\u3002\nNelson\u60f3\u5230\u7684\u4e00\u4e2a\u60f3\u6cd5\u662f\uff0c\u6587\u672c\u53ef\u4ee5\u901a\u8fc7\u6539\u53d8\u201c\u6df1\u5ea6\u201d\u6760\u6746\u8fdb\u884c\u6269\u5c55\u6216\u6536\u7f29\u3002\u5728\u5176\u8303\u56f4\u7684\u4e00\u7aef\uff0c\u4f60\u4f1a\u5f97\u5230\u5b8c\u6574\u7684\u6587\u6863\uff0c\u5728\u53e6\u4e00\u7aef\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u7b80\u77ed\u7684\u6458\u8981\u3002\n\u6211\u4eec\u6216\u8bb8\u53ef\u4ee5\u8ba9\u4eba\u5de5\u667a\u80fd\u6765\u505a\u603b\u7ed3\uff0c\u4f46\u66f4\u73b0\u5b9e\u7684\u505a\u6cd5\u662f\u8ba9\u4f5c\u8005\u51c6\u5907\u603b\u7ed3\u3002\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u7279\u6b8a\u7684\u62ec\u53f7\uff08\u4f8b\u5982\u5927\u62ec\u53f7\uff09\u6765\u5206\u9694\u5728\u8f83\u77ed\u7248\u672c\u4e2d\u8981\u7701\u7565\u7684\u6587\u672c\u3002\u6240\u4ee5\u5982\u679c\u4ed6\u4eec\u5199\n\u5b83\u6307\u5b9a\u4ece\u8f83\u77ed\u7684\u7248\u672c\u4e2d\u7701\u7565\u77ed\u8bed\u548c\u589e\u957f\u6587\u672c\u3002\u4e00\u79cd\u6539\u8fdb\u662f\u5141\u8bb8\u66ff\u6362\u8f83\u77ed\u7248\u672c\u7684\u6587\u672c\uff0c\u4f8b\u5982\u3002\n\u53e6\u4e00\u4e2a\u60f3\u6cd5\u662f\u5141\u8bb8\u5d4c\u5957\u7684\u82b1\u62ec\u53f7\u6307\u5b9a\u591a\u4e2a\u7ea7\u522b\u7684\u7f29\u77ed\uff08\u8bf7\u6ce8\u610f\uff0c\u62ec\u53f7\u4e2d\u7684\u77ed\u8bed\u5fc5\u987b\u4ece\u5185\u5230\u5916\u6298\u53e0\uff09\u3002\n\u957f\u5ea6\u53ea\u662f\u6d45\u5ea6/\u6df1\u5ea6\u7684\u4e00\u4e2a\u8861\u91cf\u6807\u51c6\u3002\u6211\u4eec\u53ef\u4ee5\u6709\u5176\u4ed6\u7ef4\u5ea6\uff0c\u6bd4\u5982\u9605\u8bfb\u6c34\u5e73\u6216\u6280\u672f\u5185\u5bb9\u3002\u4f60\u53ef\u4ee5\u8ba2\u8d2d\u5168\u6587\uff0c\u4f46\u6280\u672f\u542b\u91cf\u8f83\u4f4e\uff08\u4f8b\u5982\uff0c\u7701\u7565\u6570\u5b66\u516c\u5f0f\uff09\u3002\u521b\u4f5c\u8fd9\u6837\u591a\u5c42\u9762\u7684\u6587\u672c\u53ef\u80fd\u662f\u4e2a\u95ee\u9898\u3002\n\u5047\u8bbe\u4e00\u4e2a\u7269\u7406\u7cfb\u7684\u5b66\u751f\u6709\u4e00\u672c\u652f\u6301\u5ef6\u4f38\u6587\u672c\u7684\u4e66\u3002\u5f53\u5979\u8bfb\u5230\u5b83\u7684\u65f6\u5019\uff0c\u5979\u6740\u4e86\u4eba\uff0c\u53c8\u7f29\u4e86\u56de\u53bb\u3002\u9996\u5148\u662f\u5411\u524d\u770b\uff08\u4e00\u8bfb\u5c31\u591f\u4e86\uff09\uff0c\u7136\u540e\u662f\u4ecb\u7ecd\u3002\u7136\u540e\u5979\u628a\u5979\u5df2\u7ecf\u77e5\u9053\u7684\u80cc\u666f\u6750\u6599\uff08\u6bd4\u5982\u725b\u987f\u5b9a\u5f8b\uff09\u8fde\u540c\u725b\u987f\u548c\u4ed6\u90a3\u68f5\u8457\u540d\u7684\u6811\u7684\u7167\u7247\u4e00\u8d77\u5220\u6389\u3002\n\u5979\u6709\u4e00\u4efd\u8bfe\u7a0b\u4e3b\u9898\u6e05\u5355\uff0c\u6240\u4ee5\u5979\u5220\u6389\u4e86\u6240\u6709\u4e0d\u9700\u8981\u7684\u7ae0\u8282\u3002\u5f53\u5979\u8bfb\u5b8c\u5269\u4e0b\u7684\u7ae0\u8282\u65f6\uff0c\u5979\u4e0d\u518d\u9605\u8bfb\u975e\u6b63\u5f0f\u7684\u89e3\u91ca\u548c\u4e00\u4e9b\u56fe\u8868\u3002\u4f46\u662f\u4fdd\u7559\u4e86\u6240\u6709\u7684\u516c\u5f0f\u3002\n\u8fd9\u6837\u4e00\u6765\uff0c\u5979\u6700\u7ec8\u60f3\u8981\u4fdd\u7559\u4e00\u4efd\u66f4\u7b80\u6d01\u7684\u6587\u4ef6\u3002\u91cd\u8981\u7684\u662f\u5979\u80fd\u4fdd\u5b58\u5b83\uff0c\u56e0\u4e3a\u5b83\u662f\u5979\u81ea\u5df1\u7684\u4e2a\u4eba\u603b\u7ed3\u6587\u672c\uff0c\u6ca1\u6709\u91cd\u8981\u5185\u5bb9\u4e4b\u95f4\u7684\u6240\u6709\u7cdf\u7c95\u3002\n\u5979\u8fd8\u4fdd\u7559\u4e86\u4e00\u4e9b\u96be\u5ea6\u8f83\u5927\u7684\u7ec3\u4e60\uff0c\u6bcf\u4e00\u4e2a\u7ec3\u4e60\u90fd\u4ee5\u4e00\u7c92\u79cd\u5b50\u7ed3\u675f\uff0c\u79cd\u5b50\u4f1a\u957f\u6210\u7b54\u6848\u3002\n\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\u662f\uff0c\u6211\u4e3a\u4ec0\u4e48\u4e0d\u81ea\u5df1\u5403\u72d7\u7cae\u5462\uff1f\u8fd9\u7bc7\u6587\u7ae0\u662f\u4e25\u683c\u7684\u3001\u4e0d\u53ef\u62c9\u4f38\u7684\u3001\u4e0d\u53ef\u538b\u7f29\u7684\uff0c\u56e0\u4e3a\u5b83\u663e\u7136\u53ef\u4ee5\u4ece\u6240\u63cf\u8ff0\u7684\u4e00\u4e9b\u7279\u6027\u4e2d\u83b7\u76ca\u3002\n\u95ee\u9898\u662f\uff0c\u76ee\u524d\u8fd9\u4e9b\u90fd\u6ca1\u6709\u5b9e\u65bd\u3002\u5b83\u66fe\u7ecf\u662f\u2014\u2014\u6211\u6709\u4e00\u4e2a\u4f7f\u7528MMP\u5b8f\u5904\u7406\u5668\u7684\u521b\u4f5c\u7cfb\u7edf\u3002\u6709\u4e9b\u5b8f\u7f16\u5199\u8d77\u6765\u76f8\u5f53\u590d\u6742\uff0c\u4f46\u4f7f\u7528\u8d77\u6765\u5f88\u7b80\u5355\uff0c\u4f60\u53ef\u4ee5\u5feb\u901f\u6807\u8bb0\u6389\u6587\u672c\u3001\u5220\u9664\u6587\u672c\u3001\u589e\u957f\u6587\u672c\u548c\u6d45\u6587\u672c\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u5207\u8fd0\u884c\u7684\u673a\u5668\u6700\u7ec8\u88ab\u653e\u5728\u4e86\u7267\u573a\u4e0a\uff0c\u73b0\u5728\u6211\u5f97\u5230\u4e86nuthin'\u3002\nMMP\u7684\u4e00\u4e2a\u91cd\u8981\u7279\u5f81\u662f\u7248\u672c\u63a7\u5236\u3002\u968f\u7740\u8bfb\u8005\u7684\u6b7b\u4ea1\u3001\u6210\u957f\u3001\u4e0b\u964d\u7b49\uff0c\u8fd9\u4e9b\u51b3\u5b9a\u88ab\u8bb0\u5f55\u5728\u4e00\u4e2a\u7248\u672c\u8868\u8fbe\u5f0f\u4e2d\uff0c\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\uff08\u6700\u7ec8\uff09\u5927\u91cf\u53c2\u6570\u8bbe\u7f6e\u7684\u96c6\u5408\u3002\u53ea\u8981\u60a8\u6709\u539f\u59cb\u6587\u6863\u548c\u7248\u672c\uff0c\u5c31\u53ef\u4ee5\u91cd\u65b0\u521b\u5efa\u9605\u8bfb\u8fc7\u7a0b\u7684\u6700\u7ec8\u7ed3\u679c\u3002\u56e0\u6b64\uff0c\u53ea\u9700\u8981\u4fdd\u5b58\u7248\u672c\u3002\n\u597d\u5427\uff0c\u6211\u8ba1\u5212\u4ee5\u67d0\u79cd\u65b9\u5f0f\u590d\u6d3bMMP\uff0c\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u8fd9\u4e9bTed Nelson\u542f\u53d1\u7684\u8ba1\u5212\u3002", "note_en": "Ted Nelson invented hypertext but not the web. He thinks it hasn\u2019t fulfilled its real potential, and I agree.\n One of his good ideas that the web doesn\u2019t really support is  stretchtext \u2013 text that expands or contracts in response to the reader\u2019s (dis)interest.\n  In my opinion it\u2019s sorely needed. I spend a lot of time reading on the web and most of it is skimming/speedreading. For example, I often scan down text reading only the first sentences of each paragraph, unless I hit something interesting.\n I won\u2019t try to present Nelson\u2019s exact ideas, I won\u2019t try to speak for him. Instead I\u2019ll take the basic idea of stretch text as a starting point and propose various of my own ideas. If some of them are poor, it\u2019s my fault not Nelson\u2019s.\n  Probably the simplest and most obvious form of stretch text is what I call  drop text. You sometimes see it on the Web. You have a text divided into sections, each with a section heading. But you don\u2019t see the sections, just the headings. However at the beginning of each heading there is (say) an arrow pointing to the right. If you click the arrow, the arrow points down and the section appears (drops).\n Drop text saves you having to read/skim the hidden sections \u2014 the visible title should be enough to determine whether you\u2019re interested. It could also save you from having to look at material that is clearly not relevant e.g. \u201cObtaining a work visa\u201d if you already have one.\n You occasionally see variants of drop text, most commonly instead of an arrow a plus in a box (when the section is hidden) or a minus in a box when the section has dropped.\n There are variations of drop text (currently very rare) that would be useful. For example, clicking on the arrow could rotate it down to only 45 degrees, causing only the first line or two of the section to appear. This would give you a better idea of whether you want to see the whole section. If you do, you click (say) below the arrow to turn it down to 90 degrees. Otherwise you click above it to send it back and hide the section.\n  Sometimes even just the headlines are distracting and you \u2018d like to make them go away. That\u2019s the idea of  kill text.\n To the left of the drop text arrow we could have (say) a big X. Clicking on the X would cause the whole headline to disappear, along with the arrow and the X itself. Nothing left.\n When you come across a list of headings you can quickly zap the ones you\u2019re not interested in then try out the remains ones. Clearing out the irrelevant (to you) material saves you time and attention and allows you to focus on what\u2019s important. Furthermore, once you\u2019re finished reading a section you could kill it too. Eventually you could kill off everything for one reason or the other leaving nothing left \u2013 you\u2019d know you\u2019re done with that (say) page.\n Images could also be killable (or shrinkable, while we\u2019re at it). Ads too, though there would be strong resistance to such a feature. It would be useful to to be able to kill off individual paragraphs in an article, or delete everything up to the end.\n Using kill text on an article is the literary equivalent of cropping a photo. As experienced photographers know, cropping often makes a major improvement in the quality of a picture, by removing uninteresting parts. The same could be true of kill text.\n  If stretch text means making unwanted text disappear, kill text is its logical conclusion. Another way to use it is while reading. Once you\u2019ve read a paragraph, zap it and let the remaining part of the article scroll up.\n Of course you don\u2019t have to read the whole paragraph before killing it. They could all be preset at 45 degrees giving you the choice of expanding it or killing it. This is basically what happens when you skim an article, you decide paragraph by paragraph whether to read or skip.\n There is another notion complementary to kill text, namely what I call  grow text. At the bottom of the page you have a logo, say the image of a seed. If you click it it \u2018grows\u2019 into a paragraph or so, with another seed below it. You could click away at the seeds till you\u2019ve lined up some reading material, then kill it off gradually as you read it. This could be an interesting way to present a lecture (on big screen with stretch text enabled).\n Of course you don\u2019t have to kill off everything. You could leave important parts behind, perhaps temporarily collapsed. By so doing you create your own summary of the document that you could save for future reference.\n  One idea Nelson had in mind was text that could be expanded or contracted by changing a \u2018depth\u2019 lever. At one end of its range you would get the full document, at the other a brief summary.\n We could perhaps enlist AI to do the summarizing but it\u2019s more realistic to expect the author to prepare the summarization. One idea is to use special parentheses (e.g. curly braces) to delimit text to be omitted in the shorter versions. So if they write\n  that specifies that the phrase  and grow text be omitted from the shorter version. One refinement is to allow replacement text in the shorter version, e.g.\n     Another idea is to allow nested curly brackets to specify more than one level of shortening (note that the parenthesized phrases must be collapsed from the inside out).\n Length is just one measure of shallowness/depth. We could have other dimensions, like reading level or technical content. This you could order the full length article but with lower technical content (e.g., omitting math formulas). Authoring such multidimensional texts could be a problem.\n   Suppose a Physics student has a stretch text enabled version of the book for the course. As she reads it she kills and shrinks. The first to go is the forward (one reading is enough) and then the introduction. Then she zaps background material (like Newton\u2019s laws) that she already knows, together with the pictures of Newton and his famous tree.\n She has a list of topics for the course so she kills off whole chapters that aren\u2019t required. As she works through the remaining chapters she reads then eliminates the informal explanations and some of the diagrams. But keeps all the formulas.\n In this way she ends up wanting to retain a much more concise document. It\u2019s vital that she be able to save it, because it\u2019s her own personal summary text without all \u00a0the dross between the important \u00a0stuff.\n She\u2019d also keep a selection of the harder exercises, each terminated with a seed that grows into the answer.\n  The obvious question is, why don\u2019t I eat my own dog food? This article is rigid, unstretchable, unzapple when it could clearly benefit from some of the features described.\n The problem is that currently none of this is implemented. It used to be \u2013 I had an authoring system using the  MMP macro processor. Some of the macros were pretty intricate to write but easy to use and you could quickly mark up drop text, kill text, grow text and shallow text. However the machine it all ran on was eventually put out to pasture, and now I got nuthin\u2019.\n One of the important features of MMP was  versioning. As the reader kills, grows, drops etc these decisions are recorded in a version expression, essentially an (eventually) large collection of parameter settings. As long as you have the original document and the version, you can recreate the final result of the reading process. Thus only the version need \u00a0be saved.\n Well, I plan to resurrect MMP somehow and then we can try out these Ted Nelson inspired schemes.", "posttime": "2022-02-25 20:04:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "stretchtext,bust,\u6587\u672c", "title": "Stretchtext\u6216\u534a\u8eab\u50cf\u2014\u2014\u7279\u5fb7\u00b7\u7eb3\u5c14\u900a\u672a\u5b9e\u73b0\u7684\u613f\u666f", "title_en": "Stretchtext or Bust \u2013 Ted Nelson\u2019s unrealized vision", "transed": 1, "url": "https://billwadge.com/2022/02/24/stretchtext-or-bust-ted-nelsons-unrealized-vision/", "via": "", "real_tags": ["bust", "\u6587\u672c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074963, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8df3\u8f6c\u5230\u5bfc\u822a\u8df3\u8f6c\u5230\u641c\u7d22\u65af\u5185\u514b\u5c9b\u6218\u5f79\u53d1\u751f\u57282022\u5e742\u670824\u65e5\uff0c\u53d1\u751f\u57282022\u5e74\u4fc4\u7f57\u65af\u5165\u4fb5\u4e4c\u514b\u5170\u671f\u95f4\u7684\u65af\u5185\u514b\u5c9b\u3002\n\u65af\u5185\u514b\u5c9b\u662f\u4e4c\u514b\u5170\u5357\u90e8\u6d77\u5cb8\u9644\u8fd1\u7684\u4e00\u4e2a\u5ca9\u77f3\u5c0f\u5c9b\uff0c\u7531\u4e8e\u5176\u4f4d\u7f6e\u9760\u8fd1\u7f57\u9a6c\u5c3c\u4e9a\uff0c\u4f4d\u4e8e\u9ed1\u6d77\u4e4c\u514b\u5170\u9886\u6d77\u7684\u8fb9\u7f18\uff0c\u56e0\u6b64\u5728\u6218\u7565\u4e0a\u5bf9\u4e4c\u514b\u5170\u6709\u5229\u3002\u30142\u3015\u30143\u30152021\u5e748\u6708\uff0c\u4e4c\u514b\u5170\u603b\u7edfVolodymyr Zelenskyy\u5728\u86c7\u5c9b\u4e3e\u884c\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u671f\u95f4\u4ed6\u8bf4\u201c34\u201d\uff1b\u8fd9\u4e2a\u5c9b\u548c\u6211\u4eec\u7684\u5176\u4ed6\u9886\u571f\u4e00\u6837\uff0c\u662f\u4e4c\u514b\u5170\u7684\u9886\u571f\uff0c\u6211\u4eec\u5c06\u7aed\u5c3d\u5168\u529b\u4fdd\u536b\u5b83\uff1b\u3002[3]\n2022\u5e742\u670824\u65e5\u5f53\u5730\u65f6\u95f418\u70b9\u5de6\u53f3\uff0c\u4e4c\u514b\u5170\u56fd\u5bb6\u8fb9\u9632\u519b\u5ba3\u5e03\uff0c\u57282022\u5e74\u4fc4\u7f57\u65af\u5165\u4fb5\u4e4c\u514b\u5170\u7684\u7b2c\u4e00\u5929\uff0c\u4f4d\u4e8e\u9ed1\u6d77\u4e4c\u514b\u5170\u9886\u6d77\u7684\u65af\u5185\u514b\u5c9b\u906d\u5230\u4fc4\u7f57\u65af\u8239\u53ea\u7684\u88ad\u51fb\u3002[4] [5]\u83ab\u65af\u79d1\u5de1\u6d0b\u8230\u548c\u74e6\u897f\u91cc\u00b7\u522b\u79d1\u592b\u5de1\u903b\u8247\u4f7f\u7528\u7532\u677f\u70ae\u53c2\u4e0e\u4e86\u88ad\u51fb\u3002[6]\n\u6839\u636eUkrayinska Pravda\u5206\u4eab\u7684\u97f3\u9891\uff0c\u5f53\u4fc4\u7f57\u65af\u519b\u8230\u8868\u660e\u8eab\u4efd\u5e76\u6307\u793a\u9a7b\u624e\u5728\u8be5\u5c9b\u7684\u4e4c\u514b\u5170\u58eb\u5175\u6295\u964d\u65f6\uff0c\u4ed6\u4eec\u7684\u53cd\u5e94\u662f&#34\uff1b\u4fc4\u7f57\u65af\u6218\u8230\uff0c\u53bb\u4f60\u5988\u7684&#34\uff1b\uff08\u4fc4\u8bed\uff1a&#39\uff1b####39\uff1b######\uff1b#####\u3002[7]  [8]\n\u665a\u4e0a\u665a\u4e9b\u65f6\u5019\uff0c\u56fd\u5bb6\u8fb9\u9632\u5c40\u8868\u793a\uff0c\u4e0e\u8be5\u5c9b\u7684\u901a\u8baf\u5df2\u7ecf\u4e2d\u65ad[9]\uff0c\u5e76\u4e8e22:00\uff08\u83ab\u65af\u79d1\u65f6\u95f41:00\uff0cUTC+2\uff09\u5ba3\u5e03\uff0c\u4fc4\u7f57\u65af\u519b\u961f\u5728\u6d77\u7a7a\u8f70\u70b8\u6467\u6bc1\u8be5\u5c9b\u6240\u6709\u57fa\u7840\u8bbe\u65bd\u540e\u5360\u9886\u4e86\u8be5\u5c9b\u3002[10] [11]13\u540d\u8fb9\u9632\u8b66\u536b\u5728\u62d2\u7edd\u6295\u964d\u540e\u5728\u6218\u6597\u4e2d\u4e27\u751f\uff0c\u4ed6\u4eec\u4ee3\u8868\u4e86\u4e4c\u514b\u5170\u5728\u8be5\u5c9b\u7684\u5168\u90e8\u519b\u4e8b\u5b58\u5728\u3002[12] [13]\u4fc4\u7f57\u65af\u519b\u8230\u5f00\u706b\u65f6\uff0c\u4e00\u540d\u4e4c\u514b\u5170\u58eb\u5175\u73b0\u573a\u76f4\u64ad\u3002[14]\n\u540c\u4e00\u5929\uff0c\u603b\u7edf\u6c83\u6d1b\u8482\u7c73\u5c14\u00b7\u6cfd\u4f26\u65af\u57fa\u5ba3\u5e03\uff0c\u6240\u670913\u540d\u536b\u5175\u5c06\u88ab\u8ffd\u6388\u4e4c\u514b\u5170\u82f1\u96c4\u79f0\u53f7\uff0c\u8fd9\u662f\u4e4c\u514b\u5170\u6700\u9ad8\u519b\u4e8b\u8363\u8a89\u3002[8]\n\u4e4c\u514b\u5170\u8fb9\u9632\u536b\u961f&#39\uff1b\u6311\u8845\u7684\u4e34\u7ec8\u9057\u8a00&#34\uff1b\u4fc4\u7f57\u65af\u6218\u8230\uff0c\u53bb\u4f60\u5988\u7684&#34\uff1b\u75c5\u6bd2\u6027\u4f20\u64ad\uff0c\u6210\u4e3a\u4e4c\u514b\u5170\u4eba\u53ca\u5176\u4e16\u754c\u5404\u5730\u652f\u6301\u8005\u7684\u96c6\u4f1a\u53e3\u53f7\u3002[15] \u672c\u5468\u5c06\u8be5\u77ed\u8bed\u4e0e&#34\uff1b\u8bb0\u4f4f\u963f\u62c9\u83ab&#34\uff1b\u6765\u81ea19\u4e16\u7eaa\u7684\u5fb7\u514b\u8428\u65af\u5171\u548c\u56fd\u3002[16]\n^34\u5c81\uff1b\u9ed1\u6d77\u7684Zmiinyi\u5c9b\u906d\u5230\u4fc4\u7f57\u65af\u8239\u53ea\u2014\u2014\u8fb9\u5883\u670d\u52a1\u5c40\u7684\u88ad\u51fb\uff1b\u3002ukranews_com\u30022022\u5e742\u670824\u65e5\u30022022\u5e742\u670824\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;13\u540d\u4e4c\u514b\u5170\u58eb\u5175\u544a\u8bc9\u4fc4\u7f57\u65af&#39\uff1b\u4f60\u81ea\u5df1\u53bb\u5427&#39\uff1b\u5728\u53cd\u6297\u7684\u6700\u540e\u4e00\u7ad9&#34\uff1b\u3002\u8036\u8def\u6492\u51b7\u90ae\u62a5\u3002\n^34\u5c81\uff1b\u4e4c\u514b\u5170\u58eb\u5175\u544a\u8bc9\u4fc4\u7f57\u65af&#34\uff1b\u4f60\u81ea\u5df1\u53bb\u5427&#34\uff1b\u5728\u88ab\u51b7\u51b0\u51b0\u7684\u97f3\u9891\u6740\u6b7b\u4e4b\u524d&#34\uff1b\u3002\u65b0\u95fb\u5468\u520a\u30022022\u5e742\u670825\u65e5\u3002\n^\uff082022\u5e742\u670824\u65e5\uff09&#34;\u9ed1\u6d77\u7684Zmiinyi\u5c9b\u906d\u5230\u4fc4\u7f57\u65af\u8239\u53ea\u2014\u2014\u8fb9\u5883\u670d\u52a1\u5c40\u7684\u88ad\u51fb\uff1b\u3002\u4e4c\u514b\u5170\u901a\u8baf\u793e\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u4fc4\u7f57\u65af\u6d77\u519b\u5360\u9886\u4e4c\u514b\u5170&#39\uff1b\u65af\u5185\u514b\u5c9b\u7684\u524d\u54e8\u7ad9&#34\uff1b\u3002\u6d77\u4e8b\u4e3b\u7ba1\u30022022\u5e742\u670824\u65e5\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34; &#34;\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u043a\u043e\u0440\u0430\u0431\u043b\u044c, \u0438\u0434\u0438 \u043d\u0430 \u0445.\u0439!&#34;: \u0437\u0430\u0445\u0438\u0441\u043d\u0438\u043a\u0438 \u0417\u043c\u0456\u0457\u043d\u043e\u0433\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u043b\u0438 \u0432\u043e\u0440\u043e\u0433\u043e\u0432\u0456&#34; [f.y\uff01&#34\uff1b\u4fc4\u7f57\u65af\u6218\u8230\uff0c\u7ee7\u7eed\u524d\u8fdb\uff01&#34\uff1b\uff1a\u86c7\u7684\u634d\u536b\u8005\u5bf9\u654c\u4eba\u505a\u51fa\u4e86\u56de\u5e94]\u3002\u0430\u0430\u0430\u0430\u0430\u0430\u0430\u0430\u0430\u0430\u0430\uff08\u4e4c\u514b\u5170\u8bed\uff09\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^\u4e00\u4e2ab\u7ea7\u7684\u6b4c\u624b\uff0c\u8482\u59c6\uff1bJosh Pennington\uff082022\u5e742\u670824\u65e5\uff09&#34;\u4fc4\u7f57\u65af\u5165\u4fb5\u4e4c\u514b\u5170\uff1b\u3002CNN\u3002p\u3001 \u51fa\u73b0\u7684\u58f0\u97f3\u4f3c\u4e4e\u662f\u4e4c\u514b\u5170\u58eb\u5175\u5728\u9632\u5fa1\u4fc4\u7f57\u65af\u519b\u8230\u7684\u88ad\u51fb\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u88ab\u56f0\u5728\u86c7\u5c9b\u7684\u4e4c\u514b\u5170\u4eba\u5411\u4fc4\u7f57\u65af\u4eba\u8981\u6c42\u6295\u964d\uff1a\uff1b\u53bb\u6b7b\u5427&#39; &#34;. 2022\u5e742\u670825\u65e5\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u041e\u0441\u0442\u0440\u0456\u0432 \u0417\u043c\u0456\u0457\u043d\u0438\u0439 \u0437\u0430\u0445\u043e\u043f\u0438\u043b\u0438 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u0456 \u043e\u043a\u0443\u043f\u0430\u043d\u0442\u0438 - \u0414\u041f\u0421\u0423&#34; \u3010\u86c7\u5c9b\u88ab\u4fc4\u7f57\u65af\u5360\u9886\u8005\u5360\u9886\u2014\u2014SBGS\u3011\u3002Gazeta UA\u30022022\u5e742\u670824\u65e5\u30022022\u5e742\u670824\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^\u54c8\u52d2\u59c6\uff0c\u7ea6\u7ff0\u5c3c\uff082022\u5e742\u670824\u65e5\uff09&#34;\u4e4c\u514b\u5170&#39\uff1b\u7f8e\u56fd\u56fd\u5bb6\u8fb9\u5883\u8b66\u536b\u961f\u79f0\u8be5\u5c9b\u4f4d\u4e8e\u8be5\u56fd\u5357\u90e8&#39\uff1b\u7f8e\u56fd\u6d77\u5cb8\u843d\u5165\u4fc4\u7f57\u65af\u624b\u4e2d\uff1b\u3002CNN\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u4e4c\u514b\u5170&#39\uff1b\u6fb3\u5927\u5229\u4e9a\u7684\u86c7\u5c9b\u906d\u5230\u88ad\u51fb\uff0c\u8fb9\u5883\u8b66\u536b\u5f00\u59cb\u9632\u5b88\uff1b\u3002UATV\u30022022\u5e742\u670824\u65e5\u30022022\u5e742\u670824\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u4e4c\u514b\u5170\u5c9b\u4e0a13\u540d\u9047\u96be\u8005\u4e2d\u7684\u4e00\u4eba\u5728\u76f4\u64ad\u88ad\u51fb\u4e2d\u4e27\u751f\uff1b\u3002\u65b0\u95fb\u5468\u520a\u30022022\u5e742\u670824\u65e5\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^\u6770\u592b\u00b7\u9f50\u7956\u5217\u7ef4\u5947\uff082022\u5e742\u670825\u65e5\uff09&#34;\u88ab\u56f0\u5728\u86c7\u5c9b\u7684\u4e4c\u514b\u5170\u4eba\u5411\u4fc4\u7f57\u65af\u4eba\u8981\u6c42\u6295\u964d\uff1a\uff1b\u53bb\u6b7b\u5427&#39; &#34;.  \u6d77\u519b\u65f6\u62a5\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002\n^     &#34;\u5982\u4f55&#39\uff1b\u4fc4\u7f57\u65af\u6218\u8230\uff0c\u4f60\u81ea\u5df1\u53bb&#39\uff1b\u6210\u4e3a\u4e4c\u514b\u5170&#39\uff1bs&#39\uff1b\u8bb0\u4f4f\u963f\u62c9\u83ab&#39; &#34;.  \u8fd9\u5468\u30022022\u5e742\u670825\u65e5\u4ece\u539f\u4ef6\u5b58\u6863\u3002", "note_en": "Jump to navigation  Jump to search  The  Battle of Snake Island took place on 24 February 2022 on  Snake Island ( Ukrainian:  \u041e\u0441\u0442\u0440\u0456\u0432 \u0417\u043c\u0456\u0457\u043d\u0438\u0439,    Ostriv Zmiinyi) during the  2022 Russian invasion of Ukraine.\n   Snake Island is a small rocky island off the southern coast of Ukraine, which is strategically beneficial to Ukraine due to its location near Romania and at the edge of Ukrainian territorial waters in the  Black Sea.  [2]  [3] In August 2021, Ukrainian president  Volodymyr Zelenskyy held a press event on Snake Island, during which he said &#34;This island, like the rest of our territory, is Ukrainian land, and we will defend it with all our might&#34;.  [3]\n  At around 18:00 local time on 24 February 2022,  Ukrainian State Border Guards announced that Snake Island, located in Ukrainian territorial waters in the Black Sea, had come under attack from Russian ships, during the first day of the  2022 Russian invasion of Ukraine.  [4]  [5] The cruiser   Moskva and patrol boat   Vasily Bykov were involved in the attack, using their deck guns.  [6]\n According to audio shared by the   Ukrayinska Pravda, when the Russian warship identified itself and instructed the Ukrainian soldiers stationed on the island to surrender, their response was &#34;Russian warship, go fuck yourself&#34; ( Russian:  &#39;\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u0432\u043e\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0440\u0430\u0431\u043b\u044c, \u0438\u0434\u0438 \u043d\u0430 \u0445\u0443\u0439&#39;,    Russkiy voyennyy korabl&#39;, idi na khuy).  [7]  [8]\n Later in the evening, the State Border Guard Service stated that communication with the island had been lost  [9] and at 22:00 (01:00 Moscow Time,  UTC+2), announced that Russian forces had captured the island following a naval and air bombardment that destroyed all infrastructure on the island.  [10]  [11] Thirteen border guards, representing the entirety of the Ukrainian military presence on the island, were killed during the battle after refusing to surrender.  [12]  [13] One of the Ukrainian soldiers live-streamed the moment that the Russian warship opened fire.  [14]\n On the same day, President  Volodymyr Zelenskyy announced that all thirteen guards will be posthumously awarded the title of  Hero of Ukraine, the highest Ukrainian military honor.  [8]\n  The Ukrainian border guards&#39; defiant  last words &#34;Russian warship, go fuck yourself&#34;  went viral and became a rallying cry for Ukrainians and their supporters around the world.  [15]   The Week compared the phrase to &#34; Remember the Alamo&#34; from the 19th century  Republic of Texas .  [16]\n    ^     a     b     c    &#34;Zmiinyi Island In Black Sea Attacked From Russian Ships - Border Service&#34;.  ukranews_com. 24 February 2022.  Archived from the original on 24 February 2022 .\n ^     &#34;13 Ukraine soldiers tell Russia &#39;go f*** yourself&#39; in defiant last stand&#34;.  The Jerusalem Post .\n ^     a     b     &#34;Ukraine soldiers tell Russia &#34;go f*** yourself&#34; before being killed in chilling audio&#34;.  Newsweek. 25 February 2022 .\n ^    \u0417\u0443\u0431\u043a\u043e\u0432\u0430, \u0414\u0430\u0448\u0430 (24 February 2022).  &#34;Zmiinyi Island In Black Sea Attacked From Russian Ships - Border Service&#34;.  Ukrainian News Agency.  Archived from the original on 25 February 2022 .\n  ^     &#34;Russian Navy Captures Ukraine&#39;s Outpost on Snake Island&#34;.  The Maritime Executive. 24 February 2022.  Archived from the original on 25 February 2022 .\n ^     &#34; &#34;\u0420\u0443\u0441\u0441\u043a\u0438\u0439 \u043a\u043e\u0440\u0430\u0431\u043b\u044c, \u0438\u0434\u0438 \u043d\u0430 \u0445.\u0439!&#34;: \u0437\u0430\u0445\u0438\u0441\u043d\u0438\u043a\u0438 \u0417\u043c\u0456\u0457\u043d\u043e\u0433\u043e \u0432\u0456\u0434\u043f\u043e\u0432\u0456\u043b\u0438 \u0432\u043e\u0440\u043e\u0433\u043e\u0432\u0456&#34; [&#34;Russian ship, go on f.y!&#34;: Defenders of the Serpent responded to the enemy].  \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 \u043f\u0440\u0430\u0432\u0434\u0430 (in Ukrainian).  Archived from the original on 25 February 2022 .\n ^     a     b    Lister, Tim; Pennington, Josh (24 February 2022).  &#34;Russia invades Ukraine&#34;.   CNN. p.\u00a0Audio emerges appearing to be of Ukrainian fighters defending island from Russian warship.  Archived from the original on 25 February 2022 .\n ^     &#34;Ukrainians trapped on Snake Island to the Russians demanding their surrender: &#39;go f*ck yourself.&#39; &#34;. 25 February 2022.  Archived from the original on 25 February 2022 .\n ^     &#34;\u041e\u0441\u0442\u0440\u0456\u0432 \u0417\u043c\u0456\u0457\u043d\u0438\u0439 \u0437\u0430\u0445\u043e\u043f\u0438\u043b\u0438 \u0440\u043e\u0441\u0456\u0439\u0441\u044c\u043a\u0456 \u043e\u043a\u0443\u043f\u0430\u043d\u0442\u0438 - \u0414\u041f\u0421\u0423&#34; [Snake Island was captured by the Russian occupiers - SBGS]. Gazeta UA. 24 February 2022.  Archived from the original on 24 February 2022 .\n ^    Hallam, Johnny (24 February 2022).  &#34;Ukraine&#39;s State Border Guard says island south of country&#39;s coast falls into Russian hands&#34;.   CNN.  Archived from the original on 25 February 2022 .\n ^     &#34;Ukraine&#39;s Snake Island under attack, border guards took up defense&#34;.  UATV. 24 February 2022.  Archived from the original on 24 February 2022 .\n  ^     &#34;One of 13 killed on Ukrainian island live-streamed attack&#34;.   Newsweek. 24 February 2022.  Archived from the original on 25 February 2022 .\n ^    Ziezulewicz, Geoff (25 February 2022).  &#34;Ukrainians trapped on Snake Island to the Russians demanding their surrender: &#39;go f*ck yourself.&#39; &#34;.  Navy Times.  Archived from the original on 25 February 2022 .\n ^     &#34;How &#39;Russian warship, go f--k yourself&#39; became Ukraine&#39;s &#39;Remember the Alamo!&#39; &#34;.  The Week.  Archived from the original on 25 February 2022 .", "posttime": "2022-02-25 19:59:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u86c7\u5c9b,snake,\u4e4c\u514b\u5170", "title": "\u86c7\u5c9b\u4e4b\u6218", "title_en": "The Battle of Snake Island", "transed": 1, "url": "https://en.wikipedia.org/wiki/Battle_of_Snake_Island", "via": "", "real_tags": ["\u86c7\u5c9b", "snake", "\u4e4c\u514b\u5170"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074962, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u300a\u9ece\u660e\u90ae\u62a5\u300b\u7684\u6700\u540e\u4e00\u7bc7\u57fa\u7840\u6587\u7ae0\u4e2d\uff0c\u6211\u6b63\u5f0f\u5b9a\u4e49\u4e86\u975e\u7c7b\u578b\uff08\u5355\u5806\u6808\uff09\u8fde\u63a5\u6f14\u7b97\uff08UCC\uff09\uff0c\u6f14\u793a\u4e86\u5e03\u5c14\u6570\u548c\u81ea\u7136\u6570\u7684\u7f16\u7801\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u79cd\u57fa\u4e8eUCC\u7684\u73a9\u5177\u7f16\u7a0b\u8bed\u8a00\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u5bf9\u975e\u7c7b\u578b\u5316\u591a\u7ea7\u7ea7\u8054\u6f14\u7b97\uff08UMCC\uff09\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5b83\u901a\u8fc7\u4efb\u610f\u6570\u91cf\u7684\u4efb\u610f\u547d\u540d\u5806\u6808\u6765\u589e\u5f3aUCC\u3002\u8fd9\u4e9b\u989d\u5916\u7684\u5806\u6808\u51cf\u8f7b\u4e86UCC\u4e2d\u4e0e\u5806\u6808\u6d17\u724c\u76f8\u5173\u7684\u8bb8\u591a\u75db\u82e6\u3002\u5b83\u4eec\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5176\u4ed6\u597d\u5904\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6587\u4e2d\u5f00\u59cb\u4ecb\u7ecd\uff0c\u5e76\u5728\u672a\u6765\u7684\u6587\u7ae0\u4e2d\u8fdb\u4e00\u6b65\u63a2\u8ba8\u3002\n\u5982\u679c\u60a8\u5728\u672c\u6587\u6216\u76f8\u5173\u73a9\u5177\u7f16\u7a0b\u8bed\u8a00\u4e2d\u53d1\u73b0\u4efb\u4f55\u9519\u8bef\u6216\u9057\u6f0f\uff0c\u5982\u679c\u60a8\u80fd\u901a\u77e5\u6211\uff0c\u6211\u5c06\u4e0d\u80dc\u611f\u6fc0\u3002\u6211\u5f88\u4e50\u610f\u7ed9\u51fa\u4efb\u4f55\u66f4\u6b63\u6216\u5efa\u8bae\u7684\u5f52\u5c5e\u3002\nUMCC\u7684\u8bed\u6cd5\u901a\u8fc7\u5f15\u5165\u5806\u6808\u4e0a\u4e0b\u6587\u7684\u6982\u5ff5\u6269\u5c55\u4e86UCC\u7684\u8bed\u6cd5\uff0c\u6211\u4eec\u7528\uff08s\uff09\u8868\u793a\u5806\u6808\u4e0a\u4e0b\u6587\u2223 |e | e | s\u2223 e\uff09\uff0c\u5176\u4e2ds\u662f\u5806\u6808\u6807\u8bc6\u7b26\uff0ce\u662f\u8868\u8fbe\u5f0f\uff1a\n\u8868\u8fbe\u5f0fe=i\u2223    [e]\u5f15\u7528\u2223     e 1 e 2\u3002\u4f5c\u66f2\u2223    \uff08s\uff09\u2223 e\uff09\u5728\u54ea\u91cc\u2209 S\uff08e\uff09\u5806\u6808\u4e0a\u4e0b\u6587\\begin{array}{l}\\text{Expressions}&amp\uff1be&amp\uff1b=&amp\uff1bi&amp&amp\uff1b\\\u6587\u672c{injective}\\\\\\\\&amp&|&amp\uff1b[e] &amp&amp\uff1b\\\u6587\u672c{quote}\\\\\\\\&amp&|&amp\uff1be_1~e_2~~e_n&amp&amp\uff1b\\\u6587\u672c{compose}\\\\\\\\&amp&|&amp\uff1b\uff08\u4e1c\u5357\uff09\u53ca\uff1b\\\u6587\u672c{where}~s\\notin\\mathbb{s}\uff08e\uff09&amp\uff1b\\\u6587\u672c{stack context}\\\\\\\u7ed3\u675f{array}\u8868\u8fbe\u5f0f\u200b             E\u200b             =    \u2223    \u2223    \u2223 \u200b             i[e]e 1\u200b    E2\u200b    \u00a0 ... \u4f0a\u6069\u200b       \uff08s\uff09\u2223 \uff08e\uff09\u200b                       \u5728\u54ea\u91cc\u2208       /    S\uff08e\uff09\u200b              \u5185\u90e8\u5f15\u7528\u7ec4\u5408\u5806\u6808\u4e0a\u4e0b\u6587\u200b\nS\uff08i\uff09={S\uff08[e]\uff09={S\uff08e1e2\u2026en\uff09=S\uff08e1\uff09\u22c3 S\uff08E2\uff09\u22c3 . . . \u22c3 S\uff08e n\uff09S\uff08\uff08S\uff09\u2223 e\uff09\uff09={s}\u22c3 S\uff08e\uff09\\begin{array}{l}\\mathbb{S}\uff08i\uff09&amp\uff1b=&amp\\{\\}\\\\\\mathbb{S}\uff08[e]\uff09&amp\uff1b=&amp\\{\\\\\\\\mathbb{S}\uff08e_1~e_2~\u2026~e_n\uff09&amp\uff1b=&amp\uff1b\\mathbb{S}\uff08e_1\uff09\\bigcup\\mathbb{S}\uff08e_2\uff09\\bigcup\u3002\u3002\u3002\\bigcup\\mathbb{S}\uff08e_n\uff09\\\\\\mathbb{S}\uff08\uff08S|e\uff09\uff09&amp\uff1b=&amp\\{s\\}\\bigcup\\mathbb{s}\uff08e\uff09\\\\\\end{array}s\uff08i\uff09s\uff08[e]\uff09s\uff08e1\uff09\u200b    E2\u200b    \u00a0 ... \u4f0a\u6069\u200b    )    S\uff08\uff08S\uff09\u2223 \uff08e\uff09\u200b             =    =    =    = \u200b             {}{}S\uff08e1\uff09\u200b    )    S\uff08E2\uff09\u200b    )    ...    S\uff08e\uff09n\u200b    )    {s}s\uff08e\uff09\u200b\ns\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      S\uff08e\uff09\u9650\u5236\u672c\u8d28\u4e0a\u610f\u5473\u7740\u5d4c\u5957\u7684\u3001\u4e0d\u5e26\u5f15\u53f7\u7684\u5806\u6808\u4e0a\u4e0b\u6587\u5fc5\u987b\u5177\u6709\u4e0d\u76f8\u4ea4\u7684\u5806\u6808\u6807\u8bc6\u7b26\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u7684\u540e\u9762\uff0c\u6211\u4eec\u5c06\u770b\u770b\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      \u5c06\u8be5\u6f14\u7b97\u4f5c\u4e3a\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u89e3\u9664S\uff08e\uff09\u9650\u5236\u3002\n\u8be5\u6f14\u7b97\u7684\u8bed\u4e49\u7531\u8868\u8fbe\u5f0f\u5bf9\u503c\u591a\u4e2a\u5806\u6808\u7684\u5f71\u54cd\u5b9a\u4e49\uff0c\u8fd9\u4e9b\u503c\u591a\u4e2a\u5806\u6808\u672c\u8d28\u4e0a\u662f\u4ece\u5806\u6808\u6807\u8bc6\u7b26\u5230\u503c\u5806\u6808\u7684\u6620\u5c04\uff1a\nValues v=[e]\u5f15\u7528\u7684\u8868\u8fbe\u5f0f\u503c\u5806\u6808\u27e8  s\u2223 \u4e94\u3001\u27e9   =   \u27e8  s\u2223 \u27e9    \u7a7a\u6808\u2223   \u27e8  s\u2223 V V\u27e9    \u5c06v\u63a8\u5230\u5806\u6808s\u503c\u591a\u4e2a\u5806\u6808v=v\u03f5\u7a7a\u591a\u4e2a\u5806\u6808\u2223    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9    \u6dfb\u52a0\u5806\u6808s\\begin{array}{l}\\text{Values}&amp\uff1bv&amp\uff1b=&amp\uff1b[e] &amp\uff1b\\text{quoted expression}\\text{Value Stacks}&amp\uff1b\\\u5e03\u62c9\u514b\u7279{s|V}&amp\uff1b=&amp\uff1b\\\u5e03\u62c9\u514b\u7279{s|}\uff1b\\\u6587\u672c{empty stack}~s\\\\&amp&|&amp\uff1b\\\u5e03\u62c9\u514b\u7279{s|V~V}&amp\uff1b\\text{push}~v~\\text{on stack}~s\\text{Value multistack}&amp\uff1b\\mathbb{V}&amp\uff1b=&amp\uff1b\\mathbb{V}\\epsilon&amp\uff1b\\\u6587\u672c{empty multistack}\\\\\\\\&amp&|&amp\uff1b\\mathbb{V}\\braket{s|V}&amp\uff1b\\\u6587\u672c{add stack}~s\\\\\\end{array}\u503c\u5806\u6808\u503c\u591a\u4e2a\u5806\u6808\u200b             \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9       \u4e94\u3001\u200b             =    =    \u2223    =    \u2223 \u200b             [e]\u27e8  s\u2223 \u27e9     \u27e8  s\u2223 V V\u27e9     V\u03f5\u200b       \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9 \u200b              \u5f15\u7528\u8868\u8fbe\u5f0f\u7a7a\u5806\u6808s\u5c06v\u63a8\u5230\u5806\u6808s\u7a7a\u591a\u5806\u6808\u6dfb\u52a0\u5806\u6808s\u200b\n\u4e0eUCC\u76f8\u6bd4\uff0c\u5728UMCC\u4e2d\uff0c\u6211\u4eec\u7528push\\text{push}push\u548cpop\\text{pop}pop\u6765\u66ff\u6362swap\\text{swap}swap\u5185\u5728\u51fd\u6570\uff0c\u5b83\u4eec\u5728\u5806\u6808\u4e4b\u95f4\u79fb\u52a8\u503c\u3002\u56e0\u6b64\uff0c\u5728UMCC\u4e2d\u6709\u4e03\u4e2a\u5185\u5728\u7684\u8fde\u63a5\u672f\u8bed\uff0cpush\\text{push}push\u3001pop\\text{pop}pop\u3001clone\\text{clone}clone\u3001drop\\text{drop}drop\u3001quote\\text{quote}quote\u3001compose\\text{compose}compose\u548capply\\text{apply}apply\uff0c\u7531\u4ee5\u4e0b\u5c0f\u6b65\u8bed\u4e49\u5b9a\u4e49\uff1a\n\u4e94\u3001\u27e8  s\u2223 V V\u27e9 \u27e8   s\u2032\u2223  V'V'\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u63a8\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 V\u2032\u27e9 \u27e8   s\u2032\u2223  V\u2032\u27e9     \u4e94\u3001\u27e8  s\u2223 V V\u27e9 \u27e8   s\u2032\u2223  V'V'\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u6d41\u884c\u97f3\u4e50\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9 \u27e8   s\u2032\u2223  V\u2032V\u2032V\u27e9     \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u514b\u9686\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 V V V\u27e9     \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u4e0b\u964d\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9     \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u5f15\u7528\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 V[V]\u27e9     \u4e94\u3001\u27e8  s\u2223 V[e1\u2026en][e1\u2032\u2026en\u2032]\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \u4f5c\u66f2\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 V[e1\u2026e1\u2032\u2026enn\u2032]\u27e9     \u4e94\u3001\u27e8  s\u2223 V[e]\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \uff08\u9002\u7528\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9 \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 e\uff09\uff09\\begin{array}{l}\\mathbb{V}\\braket{s|V~V}\\braket{s&#39\uff1b|V&#39\uff1b~V&#39\uff1b}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{push}\uff09\uff09\u548c\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V~V~V&#39\uff1b}\\\u5e03\u62c9\u514b\u7279{s&#39\uff1b|V&#39\uff1b}\\\\\\mathbb{V}\\braket{s|V~V}\\braket{s&#39\uff1b|V&#39\uff1b~V&#39\uff1b}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{pop}\uff09\uff09\u548c\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V}\\braket{s&#39\uff1b|V&#39\uff1b~V&#39\uff1b~V}\\\\\\ mathbb{V}\\braket{s | V~V}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{clone}\uff09\uff09&amp\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V~V~V}\\\\\\ mathbb{V}\\braket{s|V~V}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{drop}\uff09\uff09&amp\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V}\\\\\\ mathbb{V}\\braket{s|V~V}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{quote}\uff09\u548c\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V~[V]}\\\\\\ mathbb{V}\\braket{s|V~[e|u 1~~~e#n]~[e&#39\uff1b#u 1~~~e&#39\uff1b#n]&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{compose}\uff09\uff09\u548c\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V~[e|1~~~e|n~e&#39\uff1b_1~~~e&#39\uff1b#n]\\\\\\\\ mathbb{V}\\braket{s|V~[e]}&amp\uff1b\uff08s&#39\uff1b|\uff08s | \\text{apply}\uff09\uff09&amp\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V}\uff08s&#39\uff1b|\uff08s|e\uff09\uff09\\\\\\end{array}V\u27e8  s\u2223 V V\u27e9   \u27e8   s\u2032\u2223  V'V'\u27e9    \u4e94\u3001\u27e8  s\u2223 V V\u27e9   \u27e8   s\u2032\u2223  V'V'\u27e9    \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \u4e94\u3001\u27e8  s\u2223 V V\u27e9    \u4e94\u3001\u27e8  s\u2223 V[e 1\u200b    \u00a0 ... \u4f0a\u6069\u200b    ] [e1\u2032\u201d\u200b    \u00a0 ... e n\u2032\u7684\u200b    ] \u27e9    \u4e94\u3001\u27e8  s\u2223 V[e]\u27e9 \u200b             \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \u63a8\uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \uff08\u6d41\u884c\u97f3\u4e50\uff09\u2223 \uff08s\uff09\u2223  \u514b\u9686\uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \u4e0b\u964d\uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \uff08\u5f15\u8bed\uff09\u2223 \uff08s\uff09\u2223  \u7ec4\u5408\uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \uff08\u9002\u7528\uff09\u200b             \u27f6    \u27f6    \u27f6    \u27f6    \u27f6    \u27f6    \u27f6 \u200b             \u4e94\u3001\u27e8  s\u2223 V\u2032\u27e9   \u27e8   s\u2032\u2223  V\u2032\u27e9    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9   \u27e8   s\u2032\u2223  V\u2032V\u2032V\u27e9    \u4e94\u3001\u27e8  s\u2223 V V V\u27e9    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9    \u4e94\u3001\u27e8  s\u2223 V[V]\u27e9    \u4e94\u3001\u27e8  s\u2223 V[e 1\u200b    \u00a0 ... \u4f0a\u6069\u200b    e1\u2032\u200b    \u00a0 ... e n\u2032\u7684\u200b    ] \u27e9    \u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9  \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \uff08e\uff09\u200b\n\u4e94\u3001\u27e8  s\u2223 \u4e94\u3001\u27e9    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 [e]\uff09\uff09\u27f6    \u4e94\u3001\u27e8  s\u2223 V[e]\u27e9 \\\u5f00\u59cb{array}{l}\\mathbb{V}\\braket{s|V}&amp\uff1b\uff08s&#39\uff1b|\uff08s |[e]\uff09\uff09&amp\uff1b\\longrightarrow&amp\uff1b\\mathbb{V}\\braket{s|V~[e]}\\\\\\ end{array}V\u27e8  s\u2223 \u4e94\u3001\u27e9 \u200b             \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 [e]\uff09\uff09\u200b             \u27f6 \u200b             \u4e94\u3001\u27e8  s\u2223 V[e]\u27e9 \u200b\nve1e2\u3002eN=\uff08\uff08ve1\uff09e2\uff09en\uff09\\begin{array}{l}\\mathbb{V}~e_1~e_2~~e_n&amp\uff1b=&amp\uff1b\uff08\uff08\uff08\\mathbb{V}~e_1\uff09~e_2\uff09~.\uff09~e_n\uff09\\\\\\end{array}V e 1\u200b    E2\u200b    \u00a0 ... \u4f0a\u6069\u200b    \u200b             = \u200b             \uff08\uff08\uff08V\uff09e 1\uff09\u200b    ) E2\u200b    ) \u00a0 ... ) \u4f0a\u6069\u200b    ) \u200b\n\u4e0eUCC\u76f8\u6bd4\uff0c\u4e3a\u4e86\u51cf\u5c11\u6240\u6709\u6709\u6548\u7684UMCC\u8868\u8fbe\u5f0f\uff0c\u8fd8\u9700\u8981\u4e09\u6761\u989d\u5916\u7684\u89c4\u5219\u3002\u9996\u5148\uff0c\u5806\u6808\u4e0a\u4e0b\u6587\u5206\u5e03\u5728\u7ec4\u5408\u7684\u5b50\u8868\u8fbe\u5f0f\u4e0a\uff1a\n\uff08s\uff09\u2223  e 1 e 2\u3002e\uff08n\uff09\u27f7    \uff08s\uff09\u2223  e 1\uff09\uff08s\uff09\u2223  e 2\uff09\u3002\uff08s\uff09\u2223  \u5f00\u59cb{array}{l}\uff08s|e_1~e_2~\u2026~e_n\uff09&amp\uff1b\\longleftrightarrow&amp\uff1b\uff08s|e_1\uff09\uff5e\uff08s|e_2\uff09\uff5e~\uff08s | e_n\uff09\\\\\\end{array}\uff08s\uff09\u2223  e 1\u200b    E2\u200b    \u00a0 ... \u4f0a\u6069\u200b    ) \u200b             \u27f7 \u200b             \uff08s\uff09\u2223  e 1\u200b    ) \uff08s\uff09\u2223  E2\u200b    ) \u00a0 ... \uff08s\uff09\u2223  \u4f0a\u6069\u200b    ) \u200b\n\u5176\u6b21\uff0c\u5f53\u4e24\u4e2a\u4ee5\u4e0a\u7684\u5806\u6808\u4e0a\u4e0b\u6587\u76f4\u63a5\u5d4c\u5957\u65f6\uff0c\u6700\u5916\u5c42\u7684\u4e0a\u4e0b\u6587\u662f\u5197\u4f59\u7684\uff0c\u53ef\u4ee5\u5220\u9664\uff1a\n\uff08s\u2032\uff09\u2223 \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \uff08e\uff09\u27f6    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 e\uff09\uff09\\begin{array}{l}\uff08s&#39\uff1b&#39\uff1b|\uff08s&#39\uff1b|\uff08s | e\uff09\uff09&amp\uff1b\\longrightarrow&amp\uff1b\uff08s&#39\uff1b|\uff08s|e\uff09\uff09\\\\\\end{array}\uff08s\u2032\uff09\u2223 \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \uff08e\uff09\u200b             \u27f6 \u200b             \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223 \uff08e\uff09\u200b\n\uff08s\u2032\uff09\u2223 ) )   \u27f6    \uff08s\u2032\uff09\u2223 )   \u27f6   . \\\u5f00\u59cb{array}{l}\uff08s&#39\uff1b\uff08s|\uff09\u548c\uff1b\\longrightarrow&amp\uff1b\uff08s&#39\uff1b|\uff09\u548c\uff1b\\longrightarrow&amp\\\\\\\u7ed3\u675f{array}\uff08s\u2032\uff09\u2223 )) \u200b             \u27f6 \u200b             \uff08s\u2032\uff09\u2223 ) \u200b             \u27f6 \u200b             . \u200b\n\u8fd9\u5c31\u5b8c\u6210\u4e86UMCC\u7684\u64cd\u4f5c\u8bed\u4e49\u3002\u901a\u8fc7\u4f7f\u7528\u5806\u6808\u4e0a\u4e0b\u6587\u6269\u5c55UCC\u3001\u51cf\u5c11\u5b83\u4eec\u7684\u4e00\u4e9b\u65b0\u89c4\u5219\uff0c\u4ee5\u53ca\u5728\u5806\u6808\u4e4b\u95f4\u79fb\u52a8\u503c\u7684\u4e24\u4e2a\u65b0\u5185\u90e8\u51fd\u6570\uff0c\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u7ea7\u8054\u6f14\u7b97\uff0c\u5b83\u4ecd\u7136\u975e\u5e38\u5c0f\u548c\u7b80\u5355\uff0c\u540c\u65f6\u5bf9\u4e8e\u7f16\u5199\u6709\u7528\u7684\u7a0b\u5e8f\u6765\u8bf4\u66f4\u5b9e\u7528\u3002\u6b63\u5982\u6211\u5728\u4ecb\u7ecdDawn\uff08\u7b2c1\u90e8\u5206\uff09\u4e2d\u5f00\u59cb\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u4e0e\u5176\u4ed6\u7ea7\u8054\u8bed\u8a00\u76f8\u6bd4\uff0cMultistack\u51cf\u8f7b\u4e86\u5806\u6808\u6d17\u724c\u7684\u75db\u82e6\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u53ef\u8bfb\u6027\u548c\u53ef\u5199\u6027\uff0c\u540c\u65f6\u4fdd\u7559\u4e86\u7ea7\u8054\u8bed\u8a00\u7684\u79ef\u6781\u65b9\u9762\u3002\u6b64\u5916\uff0c\u6b63\u5982\u6211\u4eec\u5c06\u5728\u672c\u6587\u540e\u9762\u5f00\u59cb\u770b\u5230\u7684\uff0c\u591a\u7ea7\u8fde\u63a5\u8bed\u8a00\u8fd8\u6709\u5176\u4ed6\u6709\u8da3\u7684\u7279\u6027\uff0c\u6bd4\u5982\u5168\u5c40\u53d8\u91cf\uff0c\u4f46\u6ca1\u6709\u5168\u5c40\u53d8\u91cf\u901a\u5e38\u5e26\u6765\u7684\u7f3a\u70b9\u3002\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7ffb\u8bd1\u4efb\u4f55UCC\u8868\u8fbe\u5f0f\u6765\u5c06UCC\u5d4c\u5165\u5230UMCC\u4e2d\u200b   , \u5728\u76f8\u5e94\u7684UMCC\u8868\u8fbe\u5f0f\u4e2d\uff0ceum C=\uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  e U C C\uff09e_{UMCC}=\uff08s&#39\uff1b|\uff08s|e_{UCC}\uff09\uff09e U MCC\u200b     =    \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  e U CC\u200b    )), \u901a\u8fc7\u5b9a\u4e49swap\\text{swap}\u4ea4\u6362\u9879\u3002\u8981\u5b9a\u4e49swap\\text{swap}swap\uff0c\u6211\u4eec\u53ea\u9700\u8981\u9009\u62e9\u4e24\u4e2a\u65b0\u7684\u5806\u6808\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982s1 s_1 s1\u200b    s1&#39_1s1\u2032\u200b   , \u5c06\u6700\u4e0a\u9762\u7684\u4e24\u4e2a\u503c\u6309\u5728\u4e0a\u9762\uff0c\u7136\u540e\u6309\u4ea4\u6362\u987a\u5e8f\u5c06\u5176\u5f39\u51fa\uff1a\n\u4e92\u6362=\uff08s1\uff09\u2223 \u63a8\uff08s1\u2032\uff09\u2223 \u63a8\uff08s1\uff09\u2223 pop\uff09\uff08s1\u2032\uff09\u2223 pop\uff09\\qquad\\text{swap}=\uff08s|1 | \\text{push}\uff09\uff08s&#39\uff1b|1 | \\text{push}\uff09\uff08s|u 1 | \\text{pop}\uff09\uff08s&#39\uff1b|1 | \\text{pop}\uff09swap=\uff08s1\u200b    \u2223  \u63a8\uff08s1\u2032\uff09\u200b    \u2223  \u63a8\uff08s1\uff09\u200b    \u2223  pop\uff09\uff08s1\u2032\uff09\u200b    \u2223  \uff08\u6d41\u884c\u97f3\u4e50\uff09\n\u5728\u5c06UMCC\u4f5c\u4e3a\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u65f6\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u7528\u6237\u5b9a\u4e49\u7684\u672f\u8bed\u6269\u5c55\u6838\u5fc3\u6f14\u7b97\u3002\u4e0d\u5e78\u7684\u662f\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      S\uff08e\uff09\u5bf9\u5806\u6808\u4e0a\u4e0b\u6587\u7684\u9650\u5236\u63d0\u51fa\u4e86\u4e00\u4e2a\u6211\u4eec\u5fc5\u987b\u89e3\u51b3\u7684\u95ee\u9898\u3002\u5982\u679c\u7528\u6237\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u5806\u6808\u6807\u8bc6\u7b26\u7684\u672f\u8bed\uff0c\u5219\u9075\u5faa\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      S\uff08e\uff09\u9650\u5236\u5c06\u963b\u6b62\u5728\u4efb\u4f55\u5176\u4ed6S\u5806\u6808\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8be5\u672f\u8bed\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53d7\u6b22\u8fce\u7684\u9650\u5236\u3002\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u5ffd\u7565\u8fd9\u4e2a\u9650\u5236\u800c\u4e0d\u505a\u4efb\u4f55\u5176\u4ed6\u66f4\u6539\uff0c\u90a3\u4e48\u8fd9\u4e2a\u672f\u8bed\u7684\u884c\u4e3a\u5c31\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u5b83\u662f\u5426\u5728s\u7684\u5806\u6808\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u76f8\u5f53\u5927\u7684\u6df7\u4e71\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba9\u89e3\u91ca\u5668/\u7f16\u8bd1\u5668\u5728\u5bf9\u5916\u90e8\u5806\u6808\u4e0a\u4e0b\u6587\u8fdb\u884c\u9634\u5f71\u5904\u7406\u65f6\u81ea\u52a8\u91cd\u547d\u540d\u672a\u5f15\u7528\u7684\u5806\u6808\u6807\u8bc6\u7b26\u6765\u8f7b\u677e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u4eec\u5c06\u6b64\u8f6c\u6362\u79f0\u4e3a\u5806\u6808\u6807\u8bc6\u7b26\u53bb\u9634\u5f71\u3002\u6709\u4e24\u79cd\u60c5\u51b5\u9700\u8981\u53bb\u9634\u5f71\uff0c\u7b2c\u4e00\u79cd\u662f\u5728\u8bc4\u4f30apply\\text{apply}apply\u5185\u5728\u65f6\uff0c\u7b2c\u4e8c\u79cd\u662f\u5728\u8bc4\u4f30\uff08\u5373\u6269\u5c55\uff09\u7528\u6237\u5b9a\u4e49\u7684\u672f\u8bed\u65f6\u3002\u4e3a\u4e86\u8ba9\u7528\u6237\u5373\u4f7f\u5728\u672f\u8bed\u5b9a\u4e49\u5305\u542b\u65e0\u5f15\u53f7\u7684\u9634\u5f71\u5806\u6808\u6807\u8bc6\u7b26\u65f6\u4e5f\u53ef\u4ee5\u5185\u8054\u672f\u8bed\u5b9a\u4e49\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5728\u5b9a\u4e49\u65b0\u672f\u8bed\u4ee5\u53ca\u5f00\u59cb\u51cf\u5c11\u89e3\u91ca\u5668\u7684read-eval-print\u5faa\u73af\uff08REPL\uff09\u4e2d\u7684\u65b0\u8868\u8fbe\u5f0f\u65f6\u5e94\u7528\u53bb\u9634\u5f71\u3002\u5982\u679c\u5728\u8fd9\u56db\u79cd\u60c5\u51b5\u4e0b\u90fd\u4f7f\u7528\uff0c\u53bb\u9634\u5f71\u53ef\u4ee5\u6709\u6548\u5730\u63d0\u5347\u9634\u5f71\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      \u5b8c\u5168\u662fS\uff08e\uff09\u9650\u5236\u3002\n\u5c31\u50cfUCC\u4e00\u6837\uff0c\u4e3a\u4e86\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u672c\u6587\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u6211\u4e3a\u4e00\u79cd\u57fa\u4e8e\u8fd9\u79cd\u6f14\u7b97\u7684\u73a9\u5177\u7f16\u7a0b\u8bed\u8a00\u5b9e\u73b0\u4e86\u4e00\u4e2a\u89e3\u91ca\u5668UMCCI\u3002toy\u7f16\u7a0b\u8bed\u8a00\u4f7f\u7528\u7528\u6237\u5b9a\u4e49\u7684\u672f\u8bed\u6269\u5c55\u4e86\u6838\u5fc3\u6f14\u7b97\uff0c\u8fd9\u4e9b\u672f\u8bed\u53ef\u4ee5\u76f4\u63a5\u6216\u76f8\u4e92\u9012\u5f52\uff0c\u5e76\u4f7f\u7528\u5806\u6808\u6807\u8bc6\u7b26\u53bb\u9634\u5f71\u6765\u63d0\u5347\u2209 S\uff08e\uff09S\\notin\\mathbb{S}\uff08e\uff09S\u2208       /      S\uff08e\uff09\u9650\u5236\uff0c\u5982\u4e0a\u6240\u8ff0\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u7b80\u5316\u6837\u677f\u6587\u4ef6\uff0c\u5f53\u5728\u6ca1\u6709\u4efb\u4f55\u5806\u6808\u4e0a\u4e0b\u6587\u7684\u60c5\u51b5\u4e0b\u8ba1\u7b97\u8868\u8fbe\u5f0f\u65f6\uff0c\u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5c06\u8868\u8fbe\u5f0f\u5305\u88c5\u5728\u9ed8\u8ba4\u5806\u6808\u4e0a\u4e0b\u6587\u4e2d\u3002\n\u89e3\u91ca\u5668\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8bd5\u7528\uff0c\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728Github\u4e0a\u83b7\u5f97\u3002\u672c\u6587\u4e2d\u63cf\u8ff0\u7684\u5927\u591a\u6570\u672f\u8bed\u90fd\u662f\u9884\u5b9a\u4e49\u7684\uff0c\u4f46\u4efb\u4f55\u672f\u8bed\u90fd\u53ef\u4ee5\u7531\u7528\u6237\u91cd\u65b0\u5b9a\u4e49\u3002\u793a\u4f8b\u4f1a\u8bdd\u5c06\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\u663e\u793a\u3002\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u770b\u770b\u5982\u4f55\u5728\u8fd9\u4e2a\u5fae\u79ef\u5206\u4e2d\u6267\u884c\u4e00\u4e9b\u8ba1\u7b97\uff0c\u5c31\u50cf\u6211\u4eec\u5728UCC\u4e2d\u6240\u505a\u7684\u90a3\u6837\u3002\u8fd9\u4e2a\u6f14\u7b97\u4ecd\u7136\u4e0d\u5305\u62ec\u4efb\u4f55\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u4ecd\u7136\u5c06\u6570\u636e\u7c7b\u578b\u7f16\u7801\u4e3a\u5e26\u5f15\u53f7\u7684\u8868\u8fbe\u5f0f\u3002\u867d\u7136\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0eUCC\u4e2d\u76f8\u540c\u7684\u5e03\u5c14\u548c\u81ea\u7136\u6570\u7f16\u7801\uff0c\u4f46\u6211\u4eec\u5c06\u4f7f\u7528\u66f4\u901a\u7528\u3001\u66f4\u7cfb\u7edf\u7684\u7f16\u7801\uff0c\u6211\u4eec\u5c06\u5229\u7528\u591a\u4e2a\u5806\u6808\u6765\u6539\u8fdb\u4eba\u4f53\u5de5\u7a0b\u5b66\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u5c06\u4ece\u975e\u7c7b\u578b\u5316lambda\u6f14\u7b97\u4e2d\u4efb\u610f\uff08\u5305\u62ec\u9012\u5f52\uff09\u4ee3\u6570\u6570\u636e\u7c7b\u578b\uff08ADT\uff09\u7684Scott\u7f16\u7801\u4e2d\u83b7\u5f97\u7075\u611f\uff0c\u5e76\u5c06\u76f8\u540c\u7684\u6982\u5ff5\u5e94\u7528\u4e8eUMCC\u3002\u9996\u5148\uff0c\u6211\u4eec\u5c06\u6b63\u5f0f\u5b9a\u4e49\u7f16\u7801\uff0c\u7136\u540e\u6211\u4eec\u5c06\u770b\u51e0\u4e2a\u4f8b\u5b50\uff0c\u5305\u62ec\u5e03\u5c14\u6570\u548c\u81ea\u7136\u6570\u3002\nScott\u7f16\u7801\u80cc\u540e\u7684\u57fa\u672c\u601d\u60f3\u662f\u5c06\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u7684\u6bcf\u4e2a\u53d8\u91cf\u7f16\u7801\u4e3a\u4e00\u4e2a\u9ad8\u9636\u9879\uff0c\u8be5\u9879\u540c\u65f6\u5145\u5f53\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\uff08\u4e5f\u79f0\u4e3a\u6d88\u9664\u5668\uff09\u3002\u5f53\u5e94\u7528\u4e8e\u53d8\u91cf\u7684\u8f93\u5165\u6570\u636e\u65f6\uff0c\u6784\u9020\u51fd\u6570\u8fd4\u56de\u8be5\u8f93\u5165\u6570\u636e\u7684\u95ed\u5305\u3002\u7136\u540e\uff0c\u5f53\u8be5\u95ed\u5305\u5e94\u7528\u4e8e\u6bcf\u4e2a\u53ef\u80fd\u53d8\u91cf\u7684case\u8868\u8fbe\u5f0f\u65f6\uff0c\u5b83\u4ec5\u5c06\u7f16\u7801\u53d8\u91cf\u7684case\u8868\u8fbe\u5f0f\u5e94\u7528\u4e8e\u95ed\u5408\u7684over\u6570\u636e\u3002\u6240\u4ee5\u95ed\u5305\u5145\u5f53\u6790\u6784\u51fd\u6570\u3002\u5728\u975e\u7c7b\u578b\u5316lambda\u6f14\u7b97\u4e2d\uff0c\u6790\u6784\u51fd\u6570\u6309\u7279\u5b9a\u987a\u5e8f\u5e94\u7528\u4e8ecase\u8868\u8fbe\u5f0f\u3002\u7c7b\u4f3c\u5730\uff0c\u5728UCC\u4e2d\uff0c\u6211\u4eec\u5c06\u6309\u7279\u5b9a\u987a\u5e8f\u5c06\u5e26\u5f15\u53f7\u7684\u5927\u5c0f\u5199\u8868\u8fbe\u5f0f\u653e\u5728\u5806\u6808\u9876\u90e8\uff0c\u7136\u540e\u5e94\u7528\u6790\u6784\u51fd\u6570\u3002\u5728UMCC\u4e2d\uff0c\u6211\u4eec\u5c06\u628a\u5e26\u5f15\u53f7\u7684\u5927\u5c0f\u5199\u8868\u8fbe\u5f0f\u653e\u5728\u7279\u5b9a\u5806\u6808\u7684\u9876\u90e8\uff0c\u7136\u540e\u5e94\u7528\u6790\u6784\u51fd\u6570\u3002\n\u5f62\u5f0f\u4e0a\uff0c\u8bbeD\u662f\u4e00\u4e2a\u5177\u6709N\u4e2a\u6784\u9020\u51fd\u6570\u7684\u4ee3\u6570\u6570\u636e\u7c7b\u578b\uff0c{C i}i=1 N\\{C_i\\}{i=1}^N{C i\u200b     }         i=1N\u200b   , \u8fd9\u6837\u6784\u9020\u51fd\u6570ci_{i}ci\u200b    \u6709arity A i_{i}A i\u5417\u200b   . \u6784\u9020\u51fd\u6570ci_{i}ci\u7684\u7f16\u7801\u200b    \u6570\u636e\u7c7b\u578bD\u7684\nC i=quote A i[C i\u2032]\u7ec4\u5408\\qquad C_i=\\text{quote}{A_i}~[C&#39\uff1b_i]~\\text{compose}C i\u200b     =      \u5f15\u7528\u6211\u7684\u8bdd\u200b    \u200b    [ci\u2032\u7684\u200b    ] \u8c31\u5199\nC i\u2032=\uff08\u6848\u4f8b1\uff09\u2223 \u653e\u4e0b\uff09\u3002\uff08\u6848\u4f8b\u4e00\uff09\u2212 1.\u2223 \uff08\u7b2c\u4e00\u79cd\u60c5\u51b5\uff09\u2223 \uff08pop\uff09\uff08\u6848\u4f8b1+1\uff09\u2223 \u653e\u4e0b\uff09\u3002\uff08\u6848\u4f8bN\uff09\u2223 \u4e0b\u62c9\uff09\u5e94\u7528\\qquad C\u548c#39_i=\uff08\\text{case\\}C_1 | \\text{drop}\uff09\u3002\u3002\u3002\uff08\\text{case\\}C{i-1}| \\text{drop}\uff09\uff08\\text{case\\}C_i | \\text{pop}\uff09\uff08\\text{case\\}C{i+1}| \\text{drop}\uff09\u3002\u3002\u3002\uff08\\text{case\\\\}C|N | \\text{drop}\uff09~\\text{apply}ci\u2032\u200b     =    \uff08\u6848\u4f8b1\uff09\u200b    \u2223  \u653e\u4e0b\uff09\u3002\u3002\u3002\uff08\u6848\u4f8b\u4e00\uff09\u2212 1.\u200b    \u2223  \uff08\u7b2c\u4e00\u79cd\u60c5\u51b5\uff09\u200b    \u2223  \uff08pop\uff09\uff08\u6848\u4f8b1+1\uff09\u200b    \u2223  \u653e\u4e0b\uff09\u3002\u3002\u3002\uff08\u6848\u4f8bN\uff09\u200b    \u2223  \u653e\u5f03\uff09\u7533\u8bf7\n\u5176\u4e2dquote n\\text{quote}{n}quote n\u200b    \u63a5\u53d7n\u4e2a\u8f93\u5165\u5e76\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u8f93\u5165\u7684\u5355\u5f15\u53f7\uff1a\n\u4e94\u3001\u27e8  s\u2223 v1\u3002v n\u27e9 \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223  \u5f15\u7528\uff08n\uff09\uff09\u21d3 \u4e94\u3001\u27e8  s\u2223 V[v1\u2026vn]\u27e9 \\qquad\\mathbb{V}\\braket{s|V~V|1\u2026V|n}\uff08s&#39\uff1b|\uff08s | \\text{quote}n\uff09\uff09\\Downarrow\\mathbb{V}\\braket{s|V~[V|1\u2026V|n]}V\u27e8  s\u2223 v1\u200b    ...  v n\u200b    \u27e9  \uff08s\u2032\uff09\u2223 \uff08s\uff09\u2223   \u5f15\u7528n\u200b    ))  \u21d3    \u4e94\u3001\u27e8  s\u2223 V[v1\u200b    ...  v n\u200b    ] \u27e9\n\u5f15\u7528n&gt\uff1b1=\uff08s n\uff09\u2223 \u63a8\uff09\u3002\uff08s 1\uff09\u2223 \u63a8\uff08s1\uff09\u2223 \u5f15\u7528\u6d41\u884c\u97f3\u4e50\uff09\u3002\uff08s\uff09n\u2223 quote pop\uff09\u7ec4\u5408n\\qquad\\text{quote}{n&gt\uff1b1}=\uff08s_n | \\text{push}\uff09\u3002\u3002\u3002\uff08s|1 | \\text{push}\uff09~\uff08s|1 | \\text{quote}~\\text{pop}\uff09\u3002\u3002\u3002\uff08s|n | \\text{quote}~\\text{pop}\uff09~\\text{compose}n quote n&gt\uff1b1.\u200b     =    \uff08s\uff09n\u200b    \u2223  \u63a8\uff09\u3002\u3002\u3002\uff08s 1\uff09\u200b    \u2223  \u63a8\uff08s1\uff09\u200b    \u2223  \u5f15\u7528\u6d41\u884c\u97f3\u4e50\uff09\u3002\u3002\u3002\uff08s\uff09n\u200b    \u2223  \u5f15\u7528\u6d41\u884c\u8bed\u200b\n\u5176\u4e2dcompose n\\text{compose}n compose n\u200b    \u7531n\u4e2a\u5f15\u53f7\u7ec4\u6210\uff0c\u5b9a\u4e49\u4e0eUCC\u4e0a\u7684\u524d\u4e00\u7bc7\u6587\u7ae0\u76f8\u540c\u3002\n\u8981\u5206\u89e3\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u7f16\u7801\u7684ADT\uff0c\u8bf7\u5728\u6bcf\u4e2acase\u5806\u6808\u7684\u9876\u90e8\u653e\u7f6e\u4e00\u4e2a\u5e26\u5f15\u53f7\u7684case\u8868\u8fbe\u5f0f\uff0c\u7136\u540e\u5e94\u7528\u6790\u6784\u51fd\u6570\uff1a\n\uff08\u6848\u4f8b1\uff09\u2223 [e 1]\uff09\u3002\uff08\u6848\u4f8bN\uff09\u2223 [en]\uff09\u5e94\u7528\\qquad\uff08\\text{case\\}C_1 |[e_1]\uff09\u3002\u3002\u3002\uff08\\text{case\\}C|N |[e_N]\uff09~\\text{apply}\uff08case_c1\u200b    \u2223 [e 1\u200b    ]) ... \uff08\u6848\u4f8bN\uff09\u200b    \u2223 [e N\u200b    ]) \u7533\u8bf7\n\u6b63\u5982\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u770b\u5230\u7684\uff0c\u89e3\u6784\u975e\u5e38\u7c7b\u4f3c\u4e8eML\u5bb6\u65cf\u8bed\u8a00\u4e2d\u7684\u7b80\u5355\u7a77\u4e3e\u6a21\u5f0f\u5339\u914d\u3002\u6700\u7ec8\uff0cDawn\u5c06\u5305\u62ec\u66f4\u591a\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u7684\u6a21\u5f0f\u5339\u914d\u5f62\u5f0f\uff0c\u5982\u9012\u5f52\u548c\u591a\u503c\u5339\u914d\u3002\u5728\u672a\u6765\u7684\u5e16\u5b50\u4e2d\uff0c\u6211\u4eec\u5c06\u7814\u7a76\u8fd9\u79cd\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u7684\u6a21\u5f0f\u5339\u914d\u5f62\u5f0f\uff0c\u5e76\u63a8\u5bfc\u51fa\u5982\u4f55\u5c06\u5b83\u4eec\u964d\u4f4e\u5230UMCC\u4e2d\u53ef\u7528\u7684\u6709\u9650\u7834\u574f\u5f62\u5f0f\u3002\n\u5728UCC\u4e0a\u7684\u6700\u540e\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u5e03\u5c14\u503c\u7f16\u7801\u4e3a\u5f15\u7528\u7684\u9ad8\u9636\u9879\uff0c\u5f53\u5e94\u7528\u65f6\uff0c\u5b83\u4eec\u63a5\u53d7\u4e24\u4e2a\u503c\uff0c\u4e00\u4e2a\u7528\u4e8efalse case\uff0c\u4e00\u4e2a\u7528\u4e8etrue case\uff0c\u5220\u9664\u4e0d\u5339\u914d\u7684case\u503c\uff0c\u5e76\u4fdd\u7559\u5339\u914d\u7684case\u503c\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u7684\u5e03\u5c14\u7f16\u7801\u5c06\u63a5\u53d7\u4e24\u4e2a\u5e26\u5f15\u53f7\u7684\u5927\u5c0f\u5199\u8868\u8fbe\u5f0f\uff0c\u4e00\u4e2a\u7528\u4e8e\u5047\u5927\u5c0f\u5199\uff0c\u4e00\u4e2a\u7528\u4e8e\u771f\u5927\u5c0f\u5199\uff0c\u5220\u9664\u4e0d\u5339\u914d\u7684\u5e26\u5f15\u53f7\u7684\u5927\u5c0f\u5199\u8868\u8fbe\u5f0f\uff0c\u4fdd\u7559\u5e76\u5e94\u7528\u5339\u914d\u7684\u5e26\u5f15\u53f7\u7684\u5927\u5c0f\u5199\u8868\u8fbe\u5f0f\u3002\u7ed3\u679c\u662f\uff0c\u5e94\u7528\u5e03\u5c14\u503c\u7c7b\u4f3c\u4e8e\u5728ML\u5bb6\u65cf\u8bed\u8a00\uff08\u5982Haskell\uff09\u4e2d\u5bf9\u5e03\u5c14\u503c\u8fdb\u884c\u7b80\u5355\u7684\u7a77\u4e3e\u6a21\u5f0f\u5339\u914d\u3002\u56e0\u6b64\uff0c\u4ee5\u4e0bHaskell\u548cUMCC\u5b9a\u4e49\u662f\u7b49\u6548\u7684\uff1a\n\u6570\u636eBool=False | Truenot a=False\u7684\u60c5\u51b5a-&gt\uff1b\u6b63\u786e-\u6b63\u786e-&gt\uff1bFalseor a b=\u60c5\u51b5b\u4e3aFalse-&gt\uff1b\u9519\u8bef\u6848\u4f8ba-&gt\uff1b\u5047-\u771f-&gt\uff1b\u6b63\u786e-\u6b63\u786e-&gt\uff1bTrue\u548ca b=\u60c5\u51b5b\u4e3aFalse-&gt\uff1b\u5047-\u771f-&gt\uff1b\u9519\u8bef\u6848\u4f8ba-&gt\uff1b\u5047-\u771f-&gt\uff1b\u7b26\u5408\u4e8b\u5b9e\u7684\n{term False=quote0[_False]compose}{term True=quote0[_\u771f]compose}{term _False=\uff08case | False | pop\uff09\uff08case | True | drop\uff09apply}{term(case | False | drop)_\n......", "note_en": "In the  last  Foundations of Dawn post, I formally defined the untyped (single stack) concatenative calculus (UCC), demonstrated encodings for booleans and natural numbers, and provided a toy programming language based on the UCC. In this post I will do the same for the untyped multistack concatenative calculus (UMCC), which enhances the UCC with an arbitrary number of arbitrarily named stacks. These extra stacks relieve much of the pain associated with stack shuffling in the UCC. They also provide some other benefits that we\u2019ll begin to look at in this post and explore further in future posts.\n If you identify any errors or omissions in this post or in the associated toy programming language, I would greatly appreciate it if you would  notify me. I would be happy to give attribution for any corrections or suggestions.\n  The syntax of the UMCC extends that of the UCC by introducing the concept of stack contexts, which we denote by       ( s \u2223 e ) (s|e)    ( s \u2223 e ), where       s s    s is a stack identifier and       e e    e is an expression:\n Expressions   e   =   i      intrinsic          \u2223    [ e ]      quote          \u2223     e 1 \u00a0  e 2 \u00a0 . . . \u00a0  e n      compose          \u2223    ( s \u2223 e )    where\u00a0 s \u2209 S ( e )   stack\u00a0context \\begin{array}{ l l l l l l }\\text{Expressions} &amp; e &amp; = &amp; i &amp; &amp; \\text{intrinsic} \\\\ &amp; &amp; | &amp; [e] &amp; &amp; \\text{quote} \\\\ &amp; &amp; | &amp; e_1~e_2~...~e_n &amp; &amp; \\text{compose} \\\\ &amp; &amp; | &amp; (s|e) &amp; \\text{where}~s\\notin \\mathbb{S}(e) &amp; \\text{stack context} \\\\\\end{array}               Expressions          \u200b             e          \u200b             =    \u2223    \u2223    \u2223 \u200b             i    [ e ]     e        1 \u200b    \u00a0  e        2 \u200b    \u00a0 ... \u00a0  e        n \u200b       ( s \u2223 e ) \u200b                       where \u00a0 s    \u2208       /    S ( e ) \u200b              intrinsic     quote     compose     stack\u00a0context \u200b\n  S ( i )   =    { }     S ( [ e ] )   =    { }     S (  e 1 \u00a0  e 2 \u00a0 . . . \u00a0  e n )   =    S (  e 1 ) \u22c3 S (  e 2 ) \u22c3 . . . \u22c3 S (  e n )     S ( ( s \u2223 e ) )   =    { s } \u22c3 S ( e ) \\begin{array}{ l l l l l l }\\mathbb{S}(i ) &amp; = &amp; \\{\\} \\\\\\mathbb{S}([e] ) &amp; = &amp; \\{\\} \\\\\\mathbb{S}(e_1~e_2~...~e_n) &amp; = &amp; \\mathbb{S}(e_1) \\bigcup \\mathbb{S}(e_2) \\bigcup ... \\bigcup \\mathbb{S}(e_n) \\\\\\mathbb{S}((s|e) ) &amp; = &amp; \\{s\\} \\bigcup \\mathbb{S}(e) \\\\\\end{array}              S ( i )    S ([ e ])    S (  e        1 \u200b    \u00a0  e        2 \u200b    \u00a0 ... \u00a0  e        n \u200b    )    S (( s \u2223 e )) \u200b             =    =    =    = \u200b             { }    { }    S (  e        1 \u200b    )    S (  e        2 \u200b    )    ...    S (  e        n \u200b    )    { s }    S ( e ) \u200b\n The       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction essentially means that nested, unquoted stack contexts must have disjoint stack identifiers. Later in this post, we\u2019ll look at how the       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction can effectively be lifted when implementing this calculus as a programming language.\n  The semantics of this calculus are defined by the effects that expressions have on value multistacks, which are essentially maps from stack identifiers to value stacks:\n Values   v   =    [ e ]   quoted\u00a0expression        Value\u00a0Stacks   \u27e8  s \u2223 V \u27e9   =   \u27e8  s \u2223 \u27e9    empty\u00a0stack\u00a0 s          \u2223   \u27e8  s \u2223 V \u00a0 v \u27e9    push\u00a0 v \u00a0onto\u00a0stack\u00a0 s        Value\u00a0Multistacks   V   =    V \u03f5   empty\u00a0multistack          \u2223    V \u27e8  s \u2223 V \u27e9    add\u00a0stack\u00a0 s \\begin{array}{ l l r l l }\\text{Values}&amp; v &amp; = &amp; [e] &amp; \\text{quoted expression} \\\\\\\\\\text{Value Stacks}&amp; \\braket{s|V} &amp; = &amp; \\braket{s|} &amp; \\text{empty stack}~s \\\\&amp; &amp; | &amp; \\braket{s|V~v} &amp; \\text{push}~v~\\text{onto stack}~s \\\\\\\\\\text{Value Multistacks}&amp; \\mathbb{V} &amp; = &amp; \\mathbb{V}_\\epsilon &amp; \\text{empty multistack} \\\\&amp; &amp; | &amp; \\mathbb{V} \\braket{s|V} &amp; \\text{add stack}~s \\\\\\end{array}               Values        Value\u00a0Stacks           Value\u00a0Multistacks    \u200b             v     \u27e8  s \u2223 V \u27e9       V    \u200b             =    =    \u2223    =    \u2223 \u200b             [ e ]     \u27e8  s \u2223 \u27e9     \u27e8  s \u2223 V \u00a0 v \u27e9     V        \u03f5 \u200b       V   \u27e8  s \u2223 V \u27e9 \u200b              quoted\u00a0expression     empty\u00a0stack \u00a0 s     push \u00a0 v \u00a0  onto\u00a0stack \u00a0 s     empty\u00a0multistack     add\u00a0stack \u00a0 s \u200b\n Compared to the UCC, in the UMCC we replace the       swap \\text{swap}     swap intrinsic with       push \\text{push}     push and       pop \\text{pop}     pop, which move values between stacks. So, in the UMCC there are seven intrinsic concatenative terms,       push \\text{push}     push,       pop \\text{pop}     pop,       clone \\text{clone}     clone,       drop \\text{drop}     drop,       quote \\text{quote}     quote,       compose \\text{compose}     compose, and       apply \\text{apply}     apply, which are defined by the following small-step semantics:\n V \u27e8  s \u2223 V \u00a0 v \u27e9 \u27e8   s \u2032 \u2223  V \u2032 \u00a0  v \u2032 \u27e9    (  s \u2032 \u2223 ( s \u2223 push ) )   \u27f6    V \u27e8  s \u2223 V \u00a0 v \u00a0  v \u2032 \u27e9 \u27e8   s \u2032 \u2223  V \u2032 \u27e9     V \u27e8  s \u2223 V \u00a0 v \u27e9 \u27e8   s \u2032 \u2223  V \u2032 \u00a0  v \u2032 \u27e9    (  s \u2032 \u2223 ( s \u2223 pop ) )   \u27f6    V \u27e8  s \u2223 V \u27e9 \u27e8   s \u2032 \u2223  V \u2032 \u00a0  v \u2032 \u00a0 v \u27e9     V \u27e8  s \u2223 V \u00a0 v \u27e9    (  s \u2032 \u2223 ( s \u2223 clone ) )   \u27f6    V \u27e8  s \u2223 V \u00a0 v \u00a0 v \u27e9     V \u27e8  s \u2223 V \u00a0 v \u27e9    (  s \u2032 \u2223 ( s \u2223 drop ) )   \u27f6    V \u27e8  s \u2223 V \u27e9     V \u27e8  s \u2223 V \u00a0 v \u27e9    (  s \u2032 \u2223 ( s \u2223 quote ) )   \u27f6    V \u27e8  s \u2223 V \u00a0 [ v ] \u27e9     V \u27e8  s \u2223 V \u00a0 [  e 1 \u00a0 . . . \u00a0  e n ] \u00a0 [  e 1 \u2032 \u00a0 . . . \u00a0  e n \u2032 ] \u27e9    (  s \u2032 \u2223 ( s \u2223 compose ) )   \u27f6    V \u27e8  s \u2223 V \u00a0 [  e 1 \u00a0 . . . \u00a0  e n \u00a0  e 1 \u2032 \u00a0 . . . \u00a0  e n \u2032 ] \u27e9     V \u27e8  s \u2223 V \u00a0 [ e ] \u27e9    (  s \u2032 \u2223 ( s \u2223 apply ) )   \u27f6    V \u27e8  s \u2223 V \u27e9 (  s \u2032 \u2223 ( s \u2223 e ) ) \\begin{array}{ l l l l }\\mathbb{V}\\braket{s|V~v}\\braket{s&#39;|V&#39;~v&#39;} &amp; (s&#39;|(s|\\text{push})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V~v~v&#39;}\\braket{s&#39;|V&#39;} \\\\\\mathbb{V}\\braket{s|V~v}\\braket{s&#39;|V&#39;~v&#39;} &amp; (s&#39;|(s|\\text{pop})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V}\\braket{s&#39;|V&#39;~v&#39;~v} \\\\\\mathbb{V}\\braket{s|V~v} &amp; (s&#39;|(s|\\text{clone})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V~v~v} \\\\\\mathbb{V}\\braket{s|V~v} &amp; (s&#39;|(s|\\text{drop})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V} \\\\\\mathbb{V}\\braket{s|V~v} &amp; (s&#39;|(s|\\text{quote})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V~[v]} \\\\\\mathbb{V}\\braket{s|V~[e_1~...~e_n]~[e&#39;_1~...~e&#39;_n]} &amp; (s&#39;|(s|\\text{compose})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V~[e_1~...~e_n~e&#39;_1~...~e&#39;_n]} \\\\\\mathbb{V}\\braket{s|V~[e]} &amp; (s&#39;|(s|\\text{apply})) &amp; \\longrightarrow &amp; \\mathbb{V}\\braket{s|V} (s&#39;|(s|e)) \\\\\\end{array}              V   \u27e8  s \u2223 V \u00a0 v \u27e9   \u27e8   s         \u2032 \u2223  V         \u2032 \u00a0  v         \u2032 \u27e9    V   \u27e8  s \u2223 V \u00a0 v \u27e9   \u27e8   s         \u2032 \u2223  V         \u2032 \u00a0  v         \u2032 \u27e9    V   \u27e8  s \u2223 V \u00a0 v \u27e9    V   \u27e8  s \u2223 V \u00a0 v \u27e9    V   \u27e8  s \u2223 V \u00a0 v \u27e9    V   \u27e8  s \u2223 V \u00a0 [  e        1 \u200b    \u00a0 ... \u00a0  e        n \u200b    ] \u00a0 [  e        1     \u2032 \u200b    \u00a0 ... \u00a0  e        n     \u2032 \u200b    ] \u27e9    V   \u27e8  s \u2223 V \u00a0 [ e ] \u27e9 \u200b             (  s         \u2032 \u2223 ( s \u2223  push ))    (  s         \u2032 \u2223 ( s \u2223  pop ))    (  s         \u2032 \u2223 ( s \u2223  clone ))    (  s         \u2032 \u2223 ( s \u2223  drop ))    (  s         \u2032 \u2223 ( s \u2223  quote ))    (  s         \u2032 \u2223 ( s \u2223  compose ))    (  s         \u2032 \u2223 ( s \u2223  apply )) \u200b             \u27f6    \u27f6    \u27f6    \u27f6    \u27f6    \u27f6    \u27f6 \u200b             V   \u27e8  s \u2223 V \u00a0 v \u00a0  v         \u2032 \u27e9   \u27e8   s         \u2032 \u2223  V         \u2032 \u27e9    V   \u27e8  s \u2223 V \u27e9   \u27e8   s         \u2032 \u2223  V         \u2032 \u00a0  v         \u2032 \u00a0 v \u27e9    V   \u27e8  s \u2223 V \u00a0 v \u00a0 v \u27e9    V   \u27e8  s \u2223 V \u27e9    V   \u27e8  s \u2223 V \u00a0 [ v ] \u27e9    V   \u27e8  s \u2223 V \u00a0 [  e        1 \u200b    \u00a0 ... \u00a0  e        n \u200b    \u00a0  e        1     \u2032 \u200b    \u00a0 ... \u00a0  e        n     \u2032 \u200b    ] \u27e9    V   \u27e8  s \u2223 V \u27e9  (  s         \u2032 \u2223 ( s \u2223 e )) \u200b\n  V \u27e8  s \u2223 V \u27e9    (  s \u2032 \u2223 ( s \u2223 [ e ] ) )   \u27f6    V \u27e8  s \u2223 V \u00a0 [ e ] \u27e9 \\begin{array}{ l l l l }\\mathbb{V}\\braket{s|V} &amp; (s&#39;|(s|[e])) &amp; \\longrightarrow &amp; \\mathbb{V} \\braket{s|V~[e]} \\\\\\end{array}              V   \u27e8  s \u2223 V \u27e9 \u200b             (  s         \u2032 \u2223 ( s \u2223 [ e ])) \u200b             \u27f6 \u200b             V   \u27e8  s \u2223 V \u00a0 [ e ] \u27e9 \u200b\n  V \u00a0  e 1 \u00a0  e 2 \u00a0 . . . \u00a0  e n   =    ( ( ( ( V \u00a0  e 1 ) \u00a0  e 2 ) \u00a0 . . . ) \u00a0  e n ) \\begin{array}{ l l l }\\mathbb{V}~e_1~e_2~...~e_n &amp; = &amp; ((((\\mathbb{V}~e_1)~e_2)~...)~e_n) \\\\\\end{array}              V \u00a0  e        1 \u200b    \u00a0  e        2 \u200b    \u00a0 ... \u00a0  e        n \u200b    \u200b             = \u200b             (((( V \u00a0  e        1 \u200b    ) \u00a0  e        2 \u200b    ) \u00a0 ... ) \u00a0  e        n \u200b    ) \u200b\n Compared to the UCC, three additional rules are needed in order to reduce all valid UMCC expressions. First, stack contexts distribute over composed sub-expressions:\n ( s \u2223  e 1 \u00a0  e 2 \u00a0 . . . \u00a0  e n )   \u27f7    ( s \u2223  e 1 ) \u00a0 ( s \u2223  e 2 ) \u00a0 . . . \u00a0 ( s \u2223  e n ) \\begin{array}{ l l l }(s|e_1~e_2~...~e_n) &amp; \\longleftrightarrow &amp; (s|e_1)~(s|e_2)~...~(s|e_n) \\\\\\end{array}              ( s \u2223  e        1 \u200b    \u00a0  e        2 \u200b    \u00a0 ... \u00a0  e        n \u200b    ) \u200b             \u27f7 \u200b             ( s \u2223  e        1 \u200b    ) \u00a0 ( s \u2223  e        2 \u200b    ) \u00a0 ... \u00a0 ( s \u2223  e        n \u200b    ) \u200b\n Second, when more than two stack contexts are directly nested, the outer-most context is redundant and can be removed:\n (  s  \u2032 \u2032 \u2223 (  s \u2032 \u2223 ( s \u2223 e ) ) )   \u27f6    (  s \u2032 \u2223 ( s \u2223 e ) ) \\begin{array}{ l l l }(s&#39;&#39;|(s&#39;|(s|e))) &amp; \\longrightarrow &amp; (s&#39;|(s|e)) \\\\\\end{array}              (  s         \u2032\u2032 \u2223 (  s         \u2032 \u2223 ( s \u2223 e ))) \u200b             \u27f6 \u200b             (  s         \u2032 \u2223 ( s \u2223 e )) \u200b\n  (  s \u2032 ( s \u2223 ) )   \u27f6    (  s \u2032 \u2223 )   \u27f6   . \\begin{array}{ l l l l l }(s&#39;(s|)) &amp; \\longrightarrow &amp; (s&#39;|) &amp; \\longrightarrow &amp; . \\\\\\end{array}              (  s         \u2032 ( s \u2223 )) \u200b             \u27f6 \u200b             (  s         \u2032 \u2223 ) \u200b             \u27f6 \u200b             . \u200b\n This completes the operational semantics for the UMCC. By extending the UCC with stack contexts, a few new rules for reducing them, and two new intrinsics for moving values between stacks, we arrive at a concatenative calculus that is still incredibly small and simple while being considerably more practical for writing useful programs. As I began describing in   Introducing Dawn (Part 1), multistacks alleviate the pain of stack shuffling and significantly improve readability and writability compared to other concatenative languages, while retaining the positive aspects of concatenative languages. Furthermore, as we\u2019ll begin to see later in this post, multistack concatenative languages have other interesting features such as something like global variables but without the drawbacks that global variables typically entail.\n  We can embed the UCC in the UMCC by translating any UCC expression,        e  U C C e_{UCC}     e         U CC \u200b   , into the corresponding UMCC expression,        e  U M C C = (  s \u2032 \u2223 ( s \u2223  e  U C C ) ) e_{UMCC} = (s&#39;|(s|e_{UCC}))     e         U MCC \u200b     =    (  s         \u2032 \u2223 ( s \u2223  e         U CC \u200b    )), and by defining a       swap \\text{swap}     swap term. To define       swap \\text{swap}     swap, we simply need to pick two fresh stack identifiers, e.g.        s 1 s_1     s        1 \u200b    and        s 1 \u2032 s&#39;_1     s        1     \u2032 \u200b   , push the top two values onto them, and then pop them off in swapped order:\n swap = (  s 1 \u2223 push ) (  s 1 \u2032 \u2223 push ) (  s 1 \u2223 pop ) (  s 1 \u2032 \u2223 pop ) \\qquad\\text{swap} = (s_1|\\text{push}) (s&#39;_1|\\text{push}) (s_1|\\text{pop}) (s&#39;_1|\\text{pop})      swap  =    (  s        1 \u200b    \u2223  push ) (  s        1     \u2032 \u200b    \u2223  push ) (  s        1 \u200b    \u2223  pop ) (  s        1     \u2032 \u200b    \u2223  pop )\n  When implementing the UMCC as a programming language, we will want to extend the core calculus with user-defined terms. Unfortunately, the       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction on stack contexts presents a problem that we must address. If the user defines a term that contains the stack identifier       s s    s, then obeying the       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction would preclude use of that term inside of any other       s s    s stack context, which is an undesirable limitation. If we ignore this restriction without any other changes, though, then that term would behave differently depending on whether or not it\u2019s used inside an       s s    s stack context, which could result in considerable confusion.\n Luckily, we can easily resolve this issue by having the interpreter/compiler automatically rename unquoted stack identifiers when they shadow an outer stack context. We will refer to this transformation as stack identifier  deshadowing. There are two situations in which deshadowing is necessary\u2014first, when evaluating the       apply \\text{apply}     apply intrinsic, and second, when evaluating (i.e. expanding) a user-defined term. In order to make it trivial for users to inline term definitions even when they contain unquoted shadowing stack identifiers, we can additionally apply deshadowing when defining new terms and when beginning to reduce a new expression in the interpreter\u2019s read-eval-print loop (REPL). If applied in all four of these situations, deshadowing effectively lifts the       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction, entirely.\n  Just as for the UCC, in order to test and validate everything written in this post, I have implemented an interpreter, the UMCCI, for a toy programming language based on this calculus. The toy programming language extends the core calculus with user-defined terms, which can be directly or mutually recursive, and uses stack identifier deshadowing to lift the       s \u2209 S ( e ) s\\notin \\mathbb{S}(e)    s    \u2208       /      S ( e ) restriction, as described above. In addition, in order to reduce boilerplate, when evaluating an expression without any stack contexts, the interpreter automatically wraps the expression in default stack contexts.\n The interpreter is available to  try in your browser, and the  source code is available on Github. Most of the terms described in this post come predefined, but any and all terms can be redefined by the user. Example sessions will be shown in the remainder of this post.\n  Next, we\u2019ll take a look at how we might perform some computations in this calculus, just as we did for the UCC. This calculus still does not include any built-in data types, so we will still encode data types as quoted expressions. While we  could use the same encodings for booleans and natural numbers that we did in the UCC, we\u2019ll instead use a more general and systematic encoding, and we\u2019ll take advantage of multistacks to improve ergonomics. In particular, we will take inspiration from the  Scott encoding for arbitrary (including recursive) algebraic data types (ADTs) in the untyped lambda calculus, and apply the same concept to the UMCC. First, we\u2019ll formally define the encoding, and then we\u2019ll take a look at several examples including booleans and natural numbers.\n  The basic idea behind  Scott encoding is to encode each variant of an algebraic data type as a higher-order term that acts as both the constructor and destructor (a.k.a. eliminator). When applied to a variant\u2019s input data, the constructor returns a closure over that input data. When that closure is then applied to a case expression for each possible variant, it applies only the case expression for the encoded variant to the closed-over data. So the closure acts as the destructor. In the untyped lambda calculus, the destructor is applied to case expressions in a particular order. Similarly, in the UCC, we would place quoted case expressions on top of the stack in a particular order and then apply the destructor. In the UMCC, we\u2019ll instead place quoted case expressions on top of particular stacks and then apply the destructor.\n Formally, let       D D    D be an algebraic data type with       N N    N constructors,       {  C i  }  i = 1 N \\{C_i\\}_{i=1}^N    {  C        i \u200b     }         i = 1    N \u200b   , such that constructor        C i C_{i}     C         i \u200b    has arity        A i A_{i}     A         i \u200b   . The encoding of constructor        C i C_{i}     C         i \u200b    of the data type       D D    D is given by\n C i =  quote  A i \u00a0 [  C i \u2032 ] \u00a0compose \\qquad C_i = \\text{quote}_{A_i}~[C&#39;_i]~\\text{compose}      C        i \u200b     =      quote          A        i \u200b    \u200b    \u00a0 [  C        i     \u2032 \u200b    ] \u00a0  compose\n  C i \u2032 = ( case_  C 1 \u2223 drop ) . . . ( case_  C  i \u2212 1 \u2223 drop ) ( case_  C i \u2223 pop ) ( case_  C  i + 1 \u2223 drop ) . . . ( case_  C N \u2223 drop ) \u00a0apply \\qquad C&#39;_i = (\\text{case\\_}C_1|\\text{drop}) ... (\\text{case\\_}C_{i-1}|\\text{drop})(\\text{case\\_}C_i|\\text{pop})(\\text{case\\_}C_{i+1}|\\text{drop})... (\\text{case\\_}C_N|\\text{drop})~\\text{apply}      C        i     \u2032 \u200b     =    (  case_  C        1 \u200b    \u2223  drop ) ... (  case_  C         i \u2212 1 \u200b    \u2223  drop ) (  case_  C        i \u200b    \u2223  pop ) (  case_  C         i + 1 \u200b    \u2223  drop ) ... (  case_  C        N \u200b    \u2223  drop ) \u00a0  apply\n and where        quote n \\text{quote}_{n}      quote         n \u200b    accepts       n n    n inputs and returns a single quote containing all of the inputs:\n V \u27e8  s \u2223 V \u00a0  v 1 . . .  v n \u27e9 (  s \u2032 \u2223 ( s \u2223  quote n ) ) \u21d3 V \u27e8  s \u2223 V \u00a0 [  v 1 . . .  v n ] \u27e9 \\qquad\\mathbb{V}\\braket{s|V~v_1...v_n} (s&#39;|(s|\\text{quote}_n)) \\Downarrow \\mathbb{V}\\braket{s|V~[v_1...v_n]}     V   \u27e8  s \u2223 V \u00a0  v        1 \u200b    ...  v        n \u200b    \u27e9  (  s         \u2032 \u2223 ( s \u2223   quote        n \u200b    ))  \u21d3    V   \u27e8  s \u2223 V \u00a0 [  v        1 \u200b    ...  v        n \u200b    ] \u27e9\n    quote  n &gt; 1 = (  s n \u2223 push ) . . . (  s 1 \u2223 push ) \u00a0 (  s 1 \u2223 quote\u00a0pop ) . . . (  s n \u2223 quote\u00a0pop ) \u00a0  compose n \\qquad\\text{quote}_{n&gt;1} = (s_n| \\text{push})...(s_1| \\text{push})~(s_1|\\text{quote}~\\text{pop})...(s_n|\\text{quote}~\\text{pop})~\\text{compose}_n       quote         n &gt; 1 \u200b     =    (  s        n \u200b    \u2223  push ) ... (  s        1 \u200b    \u2223  push ) \u00a0 (  s        1 \u200b    \u2223  quote \u00a0  pop ) ... (  s        n \u200b    \u2223  quote \u00a0  pop ) \u00a0   compose        n \u200b\n where        compose n \\text{compose}_n      compose        n \u200b    composes       n n    n quotes and has the same definition as in the  previous post on the UCC.\n To destructure an ADT encoded in this way, place a quoted case expression on top of each case stack and then apply the destructor:\n ( case_  C 1 \u2223 [  e 1 ] ) . . . ( case_  C N \u2223 [  e N ] ) \u00a0apply \\qquad(\\text{case\\_}C_1|[e_1]) ... (\\text{case\\_}C_N|[e_N])~\\text{apply}     (  case_  C        1 \u200b    \u2223 [  e        1 \u200b    ]) ... (  case_  C        N \u200b    \u2223 [  e        N \u200b    ]) \u00a0  apply\n As we\u2019ll see in the examples below, destructuring closely resembles simple exhaustive pattern matching in ML-family languages. Ultimately, Dawn will include more ergonomic forms of pattern matching, such as recursive and multi-value matching. In a future post, we\u2019ll examine such ergonomic pattern matching forms and derive how they can be lowered to the limited form of destructing available in the UMCC.\n  In the last post on the UCC, we encoded booleans as quoted higher-order terms that, when applied, accepted two  values, one for the false case and one for the true case, dropped the non-matching case value, and kept the matching case value. Here, our encoding of booleans will accept two  quoted case expressions, one for the false case and one for the true case, drop the non-matching quoted case expression, and keep  and apply the matching quoted case expression. The result is that applying a boolean is analogous to simple exhaustive pattern matching on a boolean in an ML-family language, such as Haskell. Thus, the following Haskell and UMCC definitions are equivalent:\n  data Bool = False | Truenot a = case a of False -&gt; True True -&gt; Falseor a b = case b of False -&gt; case a of False -&gt; False True -&gt; True True -&gt; Trueand a b = case b of False -&gt; False True -&gt; case a of False -&gt; False True -&gt; True\n  {term False = quote0 [_False] compose}{term True = quote0 [_True] compose}{term _False = (case_False|pop) (case_True|drop) apply}{term _True = (case_False|drop) (case_\n......", "posttime": "2022-02-25 19:51:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ece\u660e,dawn,\u5806\u6808", "title": "\u9ece\u660e\u7684\u57fa\u7840\uff1a\u975e\u7c7b\u578b\u591a\u7ea7\u7ea7\u8054\u6f14\u7b97", "title_en": "Foundations of Dawn: The Untyped Multistack Concatenative Calculus", "transed": 1, "url": "https://www.dawn-lang.org/posts/foundations-umcc/", "via": "", "real_tags": ["\u9ece\u660e", "dawn", "\u5806\u6808"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074961, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56fe1\u3002\u7535\u78c1\u9a71\u52a8\u53ef\u91cd\u6784\u673a\u5668\u4eba\u7684\u5143\u4ef6\u3002\uff08\u4e0a\u56fe\uff09\u5355\u4e2a\u6a21\u5757\u3002\uff08\u4e2d\uff09\u7531\u56db\u4e2a\u6a21\u5757\u7ec4\u6210\u7684\u9635\u5217\u3002\uff08\u4e0b\u56fe\uff09\u5728\u7a7a\u6c14\u5de5\u4f5c\u53f0\u548c\u5fae\u91cd\u529b\u73af\u5883\u4e0b\u8fdb\u884c\u7684\u4e8c\u7ef4\u548c\u4e09\u7ef4\u91cd\u6784\u5b9e\u9a8c\u3002\n\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u79cd\u57fa\u4e8e\u7acb\u65b9\u4f53\u7684\u53ef\u91cd\u6784\u673a\u5668\u4eba\uff0c\u8be5\u673a\u5668\u4eba\u5229\u7528\u57fa\u4e8e\u7535\u78c1\u94c1\u7684\u9a71\u52a8\u6846\u67b6\u901a\u8fc7\u65cb\u8f6c\u8fdb\u884c\u4e09\u7ef4\u91cd\u6784\u3002\u867d\u7136\u4eba\u4eec\u5df2\u7ecf\u63a2\u7d22\u4e86\u5404\u79cd\u7528\u4e8e\u81ea\u91cd\u6784\u673a\u5668\u4eba\u7684\u9a71\u52a8\u673a\u5236\uff0c\u4f46\u5b83\u4eec\u5f80\u5f80\u53d7\u5230\u6210\u672c\u3001\u590d\u6742\u6027\u3001\u88c5\u914d\u548c\u5c3a\u5bf8\u8981\u6c42\u7684\u5f71\u54cd\uff0c\u4ece\u800c\u963b\u788d\u4e86\u6b64\u7c7b\u673a\u5668\u4eba\u7684\u89c4\u6a21\u5316\u751f\u4ea7\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e00\u6311\u6218\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u79cd\u57fa\u4e8e\u5d4c\u5165\u6bcf\u4e2a\u7acb\u65b9\u4f53\u8fb9\u7f18\u7684\u7535\u78c1\u94c1\u7684\u9a71\u52a8\u673a\u5236\uff0c\u4ee5\u4e92\u6362\u65b9\u5f0f\u521b\u5efa\u76f8\u540c\u6216\u76f8\u53cd\u6781\u5316\u7684\u7535\u78c1\u94c1\u5bf9\uff0c\u5206\u522b\u4ea7\u751f\u6392\u65a5\u529b\u6216\u5438\u5f15\u529b\u3002\u901a\u8fc7\u5229\u7528\u94f0\u94fe\u5f62\u6210\u7684\u5438\u5f15\u529b\u548c\u9a71\u52a8\u65cb\u8f6c\u52a8\u4f5c\u7684\u6392\u65a5\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u673a\u5668\u4eba\u4f53\u7d20\u5316\u5e76\u901a\u8fc7\u7535\u78c1\u9a71\u52a8\u65cb\u8f6c\u9a71\u52a8\u5176\u7ec4\u6210\u6a21\u5757\uff08\u79f0\u4e3a\u7535\u4f53\u7d20\uff09\u6765\u91cd\u65b0\u914d\u7f6e\u673a\u5668\u4eba\u3002\u4e3a\u4e86\u8bc1\u660e\u8fd9\u4e00\u70b9\uff0c\u6211\u4eec\u5f00\u53d1\u4e86\u5b8c\u5168\u4e0d\u53d7\u7ea6\u675f\u7684\u4e09\u7ef4\u81ea\u91cd\u6784\u673a\u5668\u4eba\uff0c\u5e76\u5728\u7a7a\u4e2d\u5e73\u53f0\u548c\u5fae\u91cd\u529b\u629b\u7269\u7ebf\u98de\u884c\u4e2d\u6f14\u793a\u4e86\u4f7f\u7528\u67a2\u8f74\u548c\u6a2a\u5411\u673a\u52a8\u7684\u4e8c\u7ef4\u548c\u4e09\u7ef4\u81ea\u91cd\u6784\u3002\u672c\u6587\u63cf\u8ff0\u4e86\u6211\u4eec\u7684\u673a\u5668\u4eba\u7684\u786c\u4ef6\u8bbe\u8ba1\u3001\u5176\u65cb\u8f6c\u6846\u67b6\u3001\u6211\u4eec\u7684\u91cd\u6784\u89c4\u5212\u8f6f\u4ef6\uff0c\u4ee5\u53ca\u5bf9\u6211\u4eec\u7cfb\u7edf\u7684\u52a8\u6001\u548c\u7535\u6c14\u7279\u6027\u7684\u8bc4\u4f30\uff0c\u4ee5\u6307\u5bfc\u53ef\u4f38\u7f29\u7684\u81ea\u91cd\u6784\u673a\u5668\u4eba\u7684\u8bbe\u8ba1\u3002\u7b80\u4ecb30\u591a\u5e74\u6765\uff0c\u673a\u5668\u4eba\u5b66\u5bb6\u4e00\u76f4\u5728\u8ffd\u6c42\u6a21\u5757\u5316\u81ea\u91cd\u6784\u673a\u5668\u4eba\u7684\u613f\u666f[1]\u2013[3]\u3002\u6a21\u5757\u5316\u81ea\u91cd\u6784\u673a\u5668\u4eba\uff08MSRR\uff09\u5728\u9002\u5e94\u6027\u3001\u53ef\u6269\u5c55\u6027\u548c\u9c81\u68d2\u6027\u65b9\u9762\u8868\u73b0\u51fa\u72ec\u7279\u7684\u4f18\u52bf\uff0c\u6709\u671b\u5e94\u7528\u4e8e\u5305\u62ec\u7a7a\u95f4\u63a2\u7d22[4]\u3001[5]\u3001\u53ef\u91cd\u6784\u73af\u5883[6]\u3001[7]\u3001\u641c\u7d22\u548c\u6551\u63f4[8]\u4ee5\u53ca\u6539\u53d8\u5f62\u72b6\u7684\u7528\u6237\u754c\u9762[9]\u5728\u5185\u7684\u5e94\u7528\u9886\u57df\u3002\u673a\u5668\u4eba\u4e13\u5bb6\u901a\u5e38\u901a\u8fc7\u4e34\u65f6\u63a5\u5934\u8fde\u63a5\u7684\u5355\u72ec\u9a71\u52a8\u6a21\u5757\u6765\u5efa\u9020MSRR[6]\u3001[10]\u3001[11]\u3002\u6b64\u5916\uff0c\u57fa\u4e8e\u7acb\u65b9\u6a21\u5757\u7684MSRR\u8fd8\u901a\u8fc7\u6ed1\u52a8[12]\u548c\u62c6\u5378[13]\u5b9e\u73b0\u4e86\u4e8c\u7ef4\u81ea\u91cd\u6784\uff0c\u4ee5\u53ca\u901a\u8fc7\u65cb\u8f6c[14]\u3001[15]\u5b9e\u73b0\u4e86\u4e09\u7ef4\u81ea\u91cd\u6784\u3002\u7136\u800c\uff0c\u81ea\u91cd\u6784\u673a\u5668\u4eba\u9762\u4e34\u7684\u4e00\u4e2a\u91cd\u5927\u6311\u6218\u662f\u5176\u53ef\u6269\u5c55\u6027[16]\u2014\u2014\u73b0\u6709\u8bbe\u8ba1\u901a\u5e38\u9700\u8981\u5355\u72ec\u7684\u9a71\u52a8\u548c\u8fde\u63a5\u673a\u5236[6]\u3001[14]\uff0c\u6b64\u5916\uff0c\u8fd8\u9700\u8981\u7535\u673a\u3001\u9f7f\u8f6e\u548c\u53d8\u901f\u7bb1\u7b49\u673a\u68b0\u90e8\u4ef6\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u901a\u5e38\u4f53\u79ef\u5e9e\u5927\u3001\u590d\u6742\u4e14\u6602\u8d35\uff0c\u963b\u788d\u4e86\u5b83\u4eec\u7684\u5c0f\u578b\u5316\u548c\u53ef\u6269\u5c55\u6027\u3002\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u7684\u4e00\u4e2a\u6709\u5e0c\u671b\u7684\u65b9\u6cd5\u662f\u5229\u7528\u7535\u78c1\u529b\uff0c\u7528\u5355\u4e2a\u7ec4\u4ef6\u540c\u65f6\u8fde\u63a5\u548c\u9a71\u52a8\u6a21\u5757\u3002\u7531\u4e8e\u662f\u56fa\u6001\u7684\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\u2014\u2014\u672c\u8eab\u6ca1\u6709\u8fd0\u52a8\u90e8\u4ef6\uff0c\u56e0\u6b64\u5bf9\u4e8e\u5927\u578b\u7cfb\u7edf\u6765\u8bf4\uff0c\u7ef4\u62a4\u548c\u5236\u9020\u4e5f\u5f88\u5bb9\u6613\u3002\u7279\u522b\u662f\uff0cNisser\u7b49\u4eba[17]\u63d0\u51fa\u5e76\u6a21\u62df\u4e86\u4f7f\u7528\u5d4c\u5165\u7acb\u65b9\u4f53\u8fb9\u7f18\u7684\u5ec9\u4ef7\u7535\u78c1\u94c1\uff0c\u901a\u8fc7\u65a5\u529b\u9a71\u52a8\u76f8\u90bb\u6a21\u5757\u4e4b\u95f4\u7684\u67a2\u8f74\uff0c\u540c\u65f6\u901a\u8fc7\u5438\u5f15\u529b\u521b\u5efa\u4e34\u65f6\u94f0\u94fe\u3002\u4e0e\u4f20\u7edf\u94f0\u94fe\u4e0d\u540c\uff0c\u4f20\u7edf\u94f0\u94fe\u9700\u8981\u4e24\u4e2a\u5143\u4ef6\u4e4b\u95f4\u7684\u673a\u68b0\u8fde\u63a5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u9700\u8981\u4e13\u95e8\u7684\u7269\u7406\u673a\u5236\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u7535\u78c1\u94c1\u5bf9\u4e4b\u95f4\u52a8\u6001\u5f62\u6210\u3002Kubits[18]\u5229\u7528\u8fd9\u79cd\u7535\u78c1\u9a71\u52a8\u7684\u65cb\u8f6c\u6846\u67b6\u6784\u5efa\u4e86\u7b2c\u4e00\u4e2a\u7269\u7406\u539f\u578b\uff0c\u5e76\u7528\u53ef\u7f16\u7a0b\u78c1\u94c1\u53d6\u4ee3\u7535\u78c1\u94c1\u4ee5\u8282\u7701\u7535\u529b\u3002\u4ed6\u4eec\u8fd8\u6f14\u793a\u4e86\u7535\u78c1\u9a71\u52a8\u7684\u65cb\u8f6c\u6846\u67b6\u5982\u4f55\u4ea7\u751f\u8db3\u591f\u5927\u7684\u529b\uff0c\u4ee5\u4fbf\u5728\u65bd\u52a0\u5927\u7535\u6d41\u7684\u60c5\u51b5\u4e0b\u4f7f\u6a21\u5757\u76f8\u5bf9\u4e8e\u91cd\u529b\u529b\u77e9\u65cb\u8f6c\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u7cfb\u7edf\u4e2d\u7684\u6a21\u5757\u4e0e\u975e\u8f66\u8f7d\u7535\u5b50\u8bbe\u5907\u76f8\u8fde\uff0c\u7531\u4e8e\u7acb\u65b9\u4f53\u8fb9\u7f18\u4ec5\u90e8\u5206\u5d4c\u5165\u4e86\u7535\u78c1\u94c1\uff0c\u56e0\u6b64\u65e0\u6cd5\u89c2\u5bdf\u5230\u7cfb\u7edf\u4e2d\u6240\u6709\u7535\u78c1\u94c1\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\uff0c\u4f8b\u5982\u5728\u7a7f\u8d8a\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7535\u78c1\u94c1\u6765\u7ef4\u6301\u56fa\u5b9a\u7acb\u65b9\u4f53\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u9996\u6b21\u6f14\u793a\u4e86\u5229\u7528\u7535\u78c1\u9a71\u52a8\u65cb\u8f6c\u6846\u67b6\u7684\u53ef\u91cd\u6784\u673a\u5668\u4eba\uff0c\u8be5\u6846\u67b6\u662f{\\\u5b8c\u5168\u4e0d\u53d7\u7ea6\u675f\u7684}\uff0c\u7531\u53ef\u91cd\u6784\u89c4\u5212\u8f6f\u4ef6\u548c\u5b9e\u9a8c\u9a8c\u8bc1\u7684\u7535\u78c1\u529b\u9884\u6d4b\u652f\u6301\u3002\u4e00\u4e2a\u5173\u952e\u76ee\u6807\u662f\u9a8c\u8bc1\u8fd9\u4e9b\u673a\u5668\u4eba#39\uff1b\u7528\u4e8e\u5fae\u91cd\u529b\u73af\u5883\uff0c\u4ee5\u5b9e\u73b0\u77ed\u671f\u822a\u5929\u5de5\u4e1a\u5e94\u7528[4]\u3001[16]\u2013[18]\uff0c\u5176\u4e2d\u65e0\u63a8\u8fdb\u5242\u9a71\u52a8\u548c\u53ef\u91cd\u6784\u6027\u89e3\u51b3\u4e86\u4e0e\u5f53\u4eca\u53d1\u5c04\u8d28\u91cf\u548c\u4f53\u79ef\u9650\u5236\u76f8\u5173\u7684\u8bb8\u591a\u6311\u6218\uff0c\u5e76\u4fc3\u8fdb\u4e86\u53d1\u5c04\u671f\u95f4\u7684\u88c5\u8f7d\u3002\u53ef\u91cd\u6784\u6a21\u5757\u53ef\u4ee5\u5728\u591a\u6b21\u53d1\u5c04\u4e2d\u6269\u5145\u548c\u66f4\u6362\u7ed3\u6784\uff0c\u5f62\u6210\u4e34\u65f6\u7ed3\u6784\u4ee5\u5e2e\u52a9\u822a\u5929\u5668\u68c0\u67e5\u548c\u5b87\u822a\u5458\u534f\u52a9\uff0c\u5145\u5f53\u81ea\u5206\u62e3\u5b58\u50a8\u5bb9\u5668\uff0c\u5e76\u5141\u8bb8\u822a\u5929\u5668\u4e3b\u52a8\u6539\u53d8\u5176\u60ef\u6027\u7279\u6027\u3002\u5fae\u91cd\u529b\u51cf\u8f7b\u4e86\u5bf9\u9a71\u52a8\u529b\u7684\u8981\u6c42\uff0c\u901a\u8fc7\u5728\u8239\u4e0a\u79fb\u52a8\u7535\u5b50\u8bbe\u5907\uff0c\u6709\u52a9\u4e8e\u89e3\u9664\u6a21\u5757\u7684\u8fde\u63a5\uff0c\u6211\u4eec\u9009\u62e9\u4e86\u7535\u78c1\u94c1\u53c2\u6570\uff0c\u5982\u7ed5\u7ec4\u6570\u3001\u94c1\u82af\u534a\u5f84\u548c\u6750\u6599\u6765\u9650\u5236\u7535\u6d41\u3002\u6211\u4eec\u8fd8\u6839\u636e\u8fd9\u4e9b\u53c2\u6570\u5bf9\u5b89\u57f9\u529b\u5b9a\u5f8b\u8fdb\u884c\u4e86\u53c2\u6570\u5316\uff0c\u4ee5\u6269\u5927\u672a\u6765\u6a21\u5757\u7535\u78c1\u6267\u884c\u5668\u7684\u8bbe\u8ba1\u7a7a\u95f4&#39\uff1b\u529b\u548c\u8d28\u91cf\u8981\u6c42\u3002\u6211\u4eec\u4f7f\u7528\u6c14\u57ab\u6a21\u62df\u5fae\u91cd\u529b\u73af\u5883\uff0c\u5e76\u5c06\u6a21\u5757\u90e8\u7f72\u5728\u629b\u7269\u7ebf\u98de\u884c\u4e0a\uff0c\u4ee5\u5c55\u793a\u5728\u592a\u7a7a\u4e2d\u4e0d\u53d7\u7ea6\u675f\u7684\u4e09\u7ef4\u53ef\u91cd\u6784\u6027\u3002\u76f8\u5bf9\u4e8e\u73b0\u6709\u7684\u81ea\u91cd\u6784\u673a\u5668\u4eba[14]\uff0c[15]\uff0c\u6211\u4eec\u7684\u673a\u5668\u4eba\u91cd\u91cf\u8f7b\uff08103g\uff09\uff0c\u4ef7\u683c\u4fbf\u5b9c\uff0868\u7f8e\u5143\uff09\uff0c\u6613\u4e8e\u5236\u9020\uff0880\u5206\u949f/\u7acb\u65b9\uff09\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u3002\u6b64\u5916\uff0c\u4f7f\u7528\u5b8c\u6574\u7684\u7ec4\u88c5\uff0c\u6211\u4eec\u5c55\u793a\u4e86Sung\u7b49\u4eba\u548c#39\uff1bs[19]\u4e24\u4e2a\u91cd\u6784\u539f\u8bed\uff0c\u67a2\u8f74\u548c\u904d\u5386\uff0c\u5c55\u793a\u4e86\u7535\u78c1\u9a71\u52a8\u7684\u67a2\u8f74\u6846\u67b6#39\uff1b\u5b83\u4e0e\u5141\u8bb8\u5728\u4efb\u610f3D\u5f62\u72b6\u4e4b\u95f4\u91cd\u65b0\u914d\u7f6e\u5927\u91cf\u57fa\u4e8e\u7acb\u65b9\u4f53\u7684\u673a\u5668\u4eba\u7684\u7b97\u6cd5\u517c\u5bb9\u3002\u4e3a\u4e86\u5c55\u793a\u6846\u67b6\u5982\u4f55\u7b26\u5408[19]\u7684\u8981\u6c42\u6765\u91cd\u65b0\u914d\u7f6e\u66f4\u590d\u6742\u7684\u5f62\u72b6\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u4e00\u4e2aweb\u754c\u9762\uff0c\u6a21\u62df\u7528\u6237\u5b9a\u4e49\u5f62\u72b6\u4e4b\u95f4\u7684\u91cd\u65b0\u914d\u7f6e\u3002\u65cb\u8f6c\u7acb\u65b9\u4f53\u7684\u9a71\u52a8\u673a\u5236\u548c\u6a21\u62df\u91cd\u65b0\u914d\u7f6e\u7b97\u6cd5[19]\uff0c[20]\u6f14\u793a\u4e86\u5728\u4efb\u610f\u914d\u7f6e\u76843D\u6676\u683c\u4e4b\u95f4\u7684\u8f6c\u6362\uff0c\u8fd9\u4e9b\u6676\u683c\u5728O\uff08n^2\uff09\u4ee5\u4e0b\u79fb\u52a8\u4e2d\u662f\u53ef\u8bc1\u660e\u6b63\u786e\u7684\uff0c\u7981\u6b62\u4e09\u4e2a\u4e0d\u5141\u8bb8\u7684\u5b50\u914d\u7f6e\u3002\u8fd9\u4e9b\u91cd\u6784\u7b56\u7565\u4f9d\u8d56\u4e8e\u4e24\u4e2a\u91cd\u6784\u539f\u8bed\uff1b\u6cbf\u7740\u5171\u4eab\u8fb9\uff08\u56fe2\uff0c\u7b2c1\u884c\uff09\u5728\u4e24\u4e2a\u7acb\u65b9\u4f53\u4e4b\u95f4\u7684\u7b80\u5355{\\it pivot}\u548c\u4e00\u4e2a\u7acb\u65b9\u4f53\u7684\u9762\u4e0e\u53e6\u4e00\u4e2a\u7acb\u65b9\u4f53\u7684\u9762\u4e4b\u95f4\u7684\u904d\u5386\uff08\u56fe2\uff0c\u7b2c2\u884c\uff09\u3002\u5728\u6211\u4eec\u7684\u5de5\u4f5c\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u4e00\u79cd\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u63cf\u8ff0\u4e86\u5355\u4e2a\u7acb\u65b9\u4f53\u7684\u7535\u78c1\u9a71\u52a8\u6846\u67b6\u5982\u4f55\u4e0e\u8fd9\u4e9b\u4e09\u7ef4\u91cd\u6784\u89c4\u5212\u7b97\u6cd5\u517c\u5bb9\u3002\u56fe2\u3002\u7528\u4e8e\uff08\u4e0a\u65b9\uff09\u65cb\u8f6c\u548c\uff08\u4e0b\u65b9\uff09\u904d\u5386\u7684\u91cd\u65b0\u914d\u7f6e\u64cd\u4f5c\u3002\u7535\u78c1\u94c1\u7528\u7ea2\u8272\u548c\u84dd\u8272\u9634\u5f71\u8868\u793a\u6781\u5316w.r.t.\u5168\u7403\u5750\u6807\u7cfb\uff1b\u76f8\u4f3c\u7684\u6781\u5316\u76f8\u4e92\u6392\u65a5\uff0c\u4e0d\u540c\u7684\u6781\u5316\u76f8\u4e92\u5438\u5f15\u3002\n\u9a71\u52a8\u673a\u5236\u65cb\u8f6c\u548c\u6a2a\u5411\u673a\u52a8\u7684\u6781\u5316\u987a\u5e8f\u6709\u4e09\u4e2a\u6b65\u9aa4\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u53d1\u5c04\u3001\u884c\u8fdb\u548c\u6355\u83b7\u9636\u6bb5\uff08\u56fe2\uff09\u3002\u5728\u6bcf\u4e2a\u9636\u6bb5\u4e2d\uff0c\u90fd\u6d89\u53ca\u4e09\u4e2a\u7acb\u65b9\u4f53\uff1a\u79fb\u52a8\u7acb\u65b9\u4f53\uff08\u9009\u62e9\u79fb\u52a8\u7684\u7acb\u65b9\u4f53\uff09\u3001\u539f\u59cb\u7acb\u65b9\u4f53\uff08\u79fb\u52a8\u7acb\u65b9\u4f53\u4ece\u4e2d\u542f\u52a8\uff09\u548c\u76ee\u6807\u7acb\u65b9\u4f53\uff08\u6355\u83b7\u79fb\u52a8\u7acb\u65b9\u4f53\uff09\u3002\u5bf9\u4e8e\u67a2\u8f74\uff08\u56fe2\uff0c\u7b2c1\u884c\uff09\uff0c\u539f\u70b9\u548c\u76ee\u6807\u7acb\u65b9\u4f53\u5bf9\u5e94\u4e8e\u76f8\u540c\u7684\u7269\u7406\u7acb\u65b9\u4f53\uff1b\u5bf9\u4e8e\u904d\u5386\uff08\u56fe2\uff0c\u7b2c\u4e8c\u884c\uff09\uff0c\u5b83\u4eec\u5bf9\u5e94\u4e8e\u4e0d\u540c\u7684\u7acb\u65b9\u4f53\u3002\u7b97\u6cd5\u8f93\u5165\u4e3a\u7acb\u65b9\u4f53ID\u3001\u5176\u6240\u9700\u7684\u65cb\u8f6c\u8f74\u548c\u65cb\u8f6c\u65b9\u5411\u3002\u7ed9\u5b9a\u8fd9\u4e9b\u8f93\u5165\uff0c\u6240\u6709\u7535\u78c1\u94c1\u5206\u914d\uff08\u6392\u65a5\u3001\u5438\u5f15\u6216\u5173\u95ed\uff09\u90fd\u7531\u6211\u4eec\u7684\u8f6f\u4ef6\u552f\u4e00\u5b9a\u4e49\u548c\u8bc6\u522b\u3002\u5728\u53d1\u5c04\u9636\u6bb5\uff08\u56fe2 A\u548cD\uff09\uff0c\u6211\u4eec\u5bf9\u4e00\u5bf9\u7535\u78c1\u94c1\u8fdb\u884c\u76f8\u540c\u7684\u6781\u5316\u4ee5\u542f\u52a8\u673a\u52a8\uff0c\u540c\u65f6\u5bf9\u53e6\u4e00\u5bf9\u7535\u78c1\u94c1\u8fdb\u884c\u76f8\u53cd\u7684\u6781\u5316\u4ee5\u5f62\u6210\u4e00\u4e2a\u6709\u5438\u5f15\u529b\u7684\u94f0\u94fe\u3002\u5bf9\u4e8e\u904d\u5386\uff08\u56fe2\uff0c\u5e95\u90e8\uff09\uff0c\u6211\u4eec\u7ed9\u53e6\u5916\u4e24\u5bf9\u7535\u78c1\u94c1\u901a\u7535\uff0c\u4ee5\u4fdd\u6301\u975e\u79fb\u52a8\u7acb\u65b9\u4f53\u76f8\u4e92\u8fde\u63a5\uff1b\u4e3a\u6b64\uff0c\u6211\u4eec\u9009\u62e9\u4e0e\u53d1\u5c04\u7535\u78c1\u94c1\u6b63\u4ea4\u7684\u7535\u78c1\u94c1\uff0c\u4ee5\u907f\u514d\u8fd9\u4e9b\u7535\u78c1\u94c1\u5bf9\u4e4b\u95f4\u4ea7\u751f\u4e0d\u5fc5\u8981\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u5728\u884c\u7a0b\u9636\u6bb5\uff08\u56fe2 B\u548cE\uff09\uff0c\u5728\u77ed\u8109\u51b2\u540e\uff0c\u6211\u4eec\u5173\u95ed\u53d1\u5c04\u7535\u78c1\u94c1\uff0c\u800c\u5269\u4e0b\u7684\u7535\u78c1\u94c1\u5bf9\u4fdd\u6301\u5438\u5f15\u529b\u4ee5\u4fdd\u6301\u94f0\u94fe\u3002\u5728\u6355\u6349\u9636\u6bb5\uff08\u56fe2 C\u548cF\uff09\uff0c\u6211\u4eec\u7ed9\u4e00\u5bf9\u65b0\u7684\u5438\u5f15\u7535\u78c1\u94c1\u901a\u7535\uff0c\u4ee5\u5728\u65b0\u83b7\u5f97\u7684\u914d\u7f6e\u4e2d\u5f62\u6210\u7a33\u5b9a\u7684\u952e\u3002\u4eff\u771f\u548c\u63a7\u5236\u754c\u9762\u5bf9\u4e8e\u51e0\u4e2a\u4ee5\u4e0a\u7684\u7acb\u65b9\u4f53\u6765\u8bf4\uff0c\u624b\u52a8\u89c4\u5212\u65cb\u8f6c\u673a\u52a8\u53ca\u5176\u76f8\u5173\u7684\u7535\u78c1\u94c1\u5206\u914d\u53d8\u5f97\u975e\u5e38\u56f0\u96be\u3002\u4e3a\u4e86\u8ba9\u7528\u6237\u53ef\u89c6\u5316\u5e76\u8ba1\u5212\u91cd\u65b0\u914d\u7f6e\u64cd\u4f5c\uff0c\u6211\u4eec\u5f00\u53d1\u4e86\u4e00\u4e2a\u6a21\u62df\uff08\u56fe3\uff09\uff0c\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684\u9884\u671f\u91cd\u65b0\u914d\u7f6e\u64cd\u4f5c\u8ba1\u7b97\u6240\u6709\u7535\u78c1\u94c1\u5206\u914d\u3002\u6a21\u62df\u57fa\u4e8e\u6d4f\u89c8\u5668\uff0c\u4f7f\u7528React\u3001TypeScript\u548cThree\u6784\u5efa\u3002JS\u3002\u5b83\u7531\u4e09\u90e8\u5206\u7ec4\u6210\uff1a\uff08A\uff09\u4e0e\u7acb\u65b9\u4f53\u4ea4\u4e92\u7684\u4e0d\u540c\u65b9\u5f0f\uff08\u901a\u8fc7\u6309\u94ae\u3001\u76f4\u63a5\u64cd\u4f5c\u6216\u4ee3\u7801\uff09\uff0c\uff08B\uff09\u6a21\u62df\u7acb\u65b9\u4f53\u5e76\u63d0\u4f9b\u5176\u76f4\u63a5\u64cd\u4f5c\u7684\u89c6\u53e3\uff0c\u4ee5\u53ca\uff08C\uff09\u5207\u6362\u6a21\u62df\u529f\u80fd\u7684\u8bbe\u7f6e\u9762\u677f\uff08\u4f8b\u5982\uff0c\u7acb\u65b9\u4f53\u7684\u4e0d\u540c\u6e32\u67d3\u6a21\u5f0f\uff09\u3002\u56fe3\u3002\u7528\u4e8e\u89c4\u5212\u91cd\u65b0\u914d\u7f6e\u548c\u8ba1\u7b97\u76f8\u5173\u7535\u78c1\u94c1\u547d\u4ee4\u7684Web\u4eff\u771f\u3002\uff08A\uff09 \u89c4\u5b9a\u7684\u7b56\u7565\u3002\uff08B\uff09 \u89c6\u53e3\u3002\uff08C\uff09 \u8bbe\u7f6e\u3002\n\u6211\u4eec\u63d0\u4f9b\u4e86\u4e09\u79cd\u5b9a\u4e49\u673a\u52a8\u7684\u65b9\u6cd5\u3002\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u5355\u51fb\u7acb\u65b9\u4f53\u548c\u7bad\u5934\u65b9\u5411\u76f4\u63a5\u542f\u52a8\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u65b9\u5411\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u67a2\u8f74\u3002\u6216\u8005\uff0c\u4ed6\u4eec\u53ef\u4ee5\u901a\u8fc7\u5bf9\u591a\u4e2a\u8fde\u7eed\u65cb\u8f6c\u8fdb\u884c\u7f16\u7801\u7684\u6309\u94ae\u542f\u52a8\u9884\u5b9a\u4e49\u811a\u672c\u3002\u6700\u540e\uff0c\u53ef\u4ee5\u968f\u65f6\u5728\u5e95\u5c42Typescript\u6587\u4ef6\u4e2d\u6dfb\u52a0\u7f16\u7801\u4e0d\u540c\u91cd\u65b0\u914d\u7f6e\u64cd\u4f5c\u7684\u65b0\u6309\u94ae\u3002\u4e3a\u6b64\uff0c\u7528\u6237\u901a\u8fc7\uff08x\uff0cy\uff0cz\uff09\u5750\u6807\u5b9a\u4e49\u8d77\u59cb\u7acb\u65b9\u4f53\u7684\u6570\u91cf\u548c\u4f4d\u7f6e\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a\u7acb\u65b9\u4f53\u6570\u91cf\u548c\u8f74\u5fc3\u65b9\u5411\u5b9a\u4e49\u6bcf\u4e2a\u540e\u7eed\u52a8\u4f5c\u3002\u89c6\u53e3\u4e2d\u7684\u7acb\u65b9\u4f53\u9644\u7740\u5728\u5355\u4f4d\u957f\u5ea6\u7684\u7acb\u65b9\u4f53\u5355\u5143\u7f51\u683c\u4e0a\uff0c\u6bcf\u4e2a\u7acb\u65b9\u4f53\u5360\u636e\u5750\u6807\uff08x\u3001y\u3001z\uff09\u4e0a\u7684\u6574\u6570\u5730\u5740\u3002\u5141\u8bb8\u6cbf\u6b63\u4ea4\u8f74X\u3001Y\u3001Z\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u65b9\u5411\u65cb\u8f6c\u3002\u56e0\u4e3a\u7269\u7406\u65cb\u8f6c\u9700\u8981\u7acb\u65b9\u4f53\u5f62\u6210\u6392\u65a5\u8fb9\u548c\u5438\u5f15\u8fb9\uff0c\u7acb\u65b9\u4f53\u5fc5\u987b\u4e0e\u53e6\u4e00\u4e2a\u7acb\u65b9\u4f53\u5171\u4eab\u4e00\u4e2a\u9762\u624d\u80fd\u6267\u884c\u6709\u6548\u7684\u67a2\u8f74\u3002\u5047\u8bbe\u6bcf\u4e2a\u7acb\u65b9\u4f53\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5176\u76f8\u90bb\u5355\u5143\u7684\u672c\u5730\u5360\u7528\u4fe1\u606f\u3002\u5728\u6267\u884c\u67a2\u8f74\u4e4b\u524d\uff0c\u4f1a\u68c0\u67e5\u8be5\u5360\u7528\u60c5\u51b5\uff0c\u4ee5\u786e\u5b9a\u9009\u5b9a\u7684\u65cb\u8f6c\u662f\u5bfc\u81f4\u67a2\u8f74\u8fd8\u662f\u904d\u5386\u3002\u5982\u679c\u673a\u52a8\u8def\u5f84\u53d7\u963b\uff0c\u89c6\u53e3\u5c06\u8fd4\u56de\u9519\u8bef\u6d88\u606f\u3002\u7ed9\u5b9a\u4e00\u4e2a\u8f74\u5fc3\u65b9\u5411\u548c\u65e0\u969c\u788d\u8def\u5f84\uff0c\u6bcf\u4e2a\u7acb\u65b9\u4f53\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6709\u6548\u8fb9\uff0c\u56f4\u7ed5\u8be5\u8fb9\u5f62\u6210\u94f0\u94fe\uff0c\u4f46\u6700\u591a\u6709\u4e24\u4e2a\u6709\u6548\u8fb9\u7528\u4e8e\u6392\u65a5\u548c\u9a71\u52a8\u673a\u52a8\uff1b\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9009\u62e9\u4e0e\u6784\u6210\u94f0\u94fe\u7684\u7acb\u65b9\u4f53\u76f8\u5bf9\u5e94\u7684\u8fb9\u3002\u6211\u4eec\u4f7f\u7528\u56db\u5143\u6570\u8868\u793a\u6240\u6709\u65cb\u8f6c\uff0c\u4ee5\u4fbf\u4e8e\u56f4\u7ed5\u591a\u4e2a\u8f74\u8fdb\u884c\u65e0\u5e8f\u65cb\u8f6c\u3002\u6700\u540e\uff0c\u201c\u8bbe\u7f6e\u201d\u9762\u677f\u5141\u8bb8\u7528\u6237\u8bbe\u7f6e\u6e32\u67d3\u529f\u80fd\u3002\u5176\u4e2d\u5305\u62ec\u663e\u793a\u7acb\u65b9\u4f53\u7684ID\u3001\u5b83\u4eec\u7684\u7535\u78c1\u94c1\u548c\u5b83\u4eec\u7684\u6781\u5316\u503c\u3001\u663e\u793a\u76f8\u90bb\u5355\u5143\u7684\u5360\u7528\u8981\u6c42\u4ee5\u9632\u6b62\u6240\u9700\u673a\u52a8\u7684\u78b0\u649e\u3001\u5207\u6362\u52a8\u753b\u901f\u5ea6\u4ee5\u53ca\u8bbe\u7f6e\u6e32\u67d3\u4fdd\u771f\u5ea6\u3002\u4e00\u65e6\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u52a8\u4f5c\uff0c\u76f8\u5173\u7684\u7535\u78c1\u94c1\u5206\u914d\u5c31\u53ef\u4ee5\u79fb\u690d\u5230\u53d1\u5c04\u5fae\u63a7\u5236\u5668\u4e0a\uff0c\u4ee5\u4fbf\u5728\u786c\u4ef6\u4e0a\u90e8\u7f72\u3002\u7535\u78c1\u94c1\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u63cf\u8ff0\u4e86\u7cfb\u7edf\u7535\u78c1\u94c1\u53c2\u6570\u7684\u9009\u62e9\u3002\u4e3a\u4e86\u652f\u6301\u8fdb\u4e00\u6b65\u63a2\u7d22\u7535\u78c1\u9a71\u52a8\u7684\u65cb\u8f6c\u7acb\u65b9\u4f53\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u529b\u6a21\u578b\uff0c\u5141\u8bb8\u4f7f\u7528\u5b89\u57f9&#39\uff1bs\u529b\u5b9a\u5f8b\uff0c\u7528\u4e8e\u53c2\u6570\u5316\u8ba1\u7b97\u7ed9\u5b9a\u7535\u78c1\u94c1\u5bf9\u7684\u78c1\u52a8\u52bf\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u8fd9\u4e2a\u529b\u5e94\u7528\u4e8e\u4e00\u4e2a2\u7acb\u65b9\u7cfb\u7edf\u7684\u521d\u6b65\u52a8\u529b\u5b66\u6a21\u578b\u3002\u7535\u78c1\u94c1\u53c2\u6570\u5b89\u57f9\u548c#39\u7684\u7406\u60f3\u60c5\u51b5\uff1bs\u5b9a\u5f8b\u7ed9\u51fa\uff0c\u7535\u78c1\u94c1\u7684\u529b\u4e0e\uff08NI\uff092\u03bc\u6210\u6b63\u6bd4\uff0c\u5176\u4e2d\u03bc\u662f\u5176\u78c1\u82af\u7684\u78c1\u5bfc\u7387\uff0cN\u662f\u531d\u6570\uff0cI\u662f\u65bd\u52a0\u7684\u7535\u6d41\u3002\u4e3a\u4e86\u9650\u5236\u6bcf\u4e2a\u7acb\u65b9\u4f53\u7684\u8d28\u91cf\u548c\u5c3a\u5bf8\uff0c\u6211\u4eec\u9996\u5148\u9009\u62e9\u4e86\u6700\u7a84\u7684COTS\u94c1\u6c27\u4f53\u78c1\u82af\uff0c\u534a\u5f84R\u4e3a1.625mm\uff0c\u521d\u59cb\u78c1\u5bfc\u7387\u03bc0\u4e3a2000\u3002\u6b64\u5916\uff0c\u4e8b\u5b9e\u8bc1\u660e\uff0c\u572860mm\u4fa7\u8fb9\u7684\u7acb\u65b9\u4f53\u5360\u5730\u9762\u79ef\u4e0a\uff0c\u66f4\u5927\u7684\u5ca9\u82af\u5f88\u96be\u7531\u6211\u4eec\u7684\u6c14\u57ab\u5e8a\u7684\u989d\u5b9a\u538b\u529b\u652f\u6491\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9009\u62e9\u4e86COTS SMD\u9a71\u52a8\u5668\uff0c\u6211\u4eec\u53d1\u73b0\u5b83\u80fd\u591f\u4ee51.2A\u7684\u8fde\u7eed\u7535\u6d41\u63d0\u4f9b\u6700\u9ad8\u7684\u7535\u6d41\u3002\u901a\u8fc7\u63a2\u7d22\u6027\u5b9e\u9a8c\uff0c\u6211\u4eec\u786e\u5b9a800\u7684N\u8db3\u4ee5\u57282\u79d2\u7684\u4ea4\u4e92\u65f6\u95f4\u5185\u65cb\u8f6c100\u514b\u539f\u578b\u7acb\u65b9\u4f53\u3002\u6700\u540e\uff0c\u5728\u8be5NI\u5904\u9009\u62e9AWG 34\u7ebf\u89c4\u4ea7\u751f\u7684\u7ebf\u5708\u7535\u963b\u4e3a10.5\u2126, \u5141\u8bb8\u4ece\u4e00\u4e2a11.1V-12.6V\u7684\u72ec\u7acb\u7535\u6e90\u9a71\u52a8\u7535\u78c1\u94c1\u3001\u5fae\u63a7\u5236\u5668\u548c\u8f85\u52a9\u7535\u5b50\u8bbe\u5907\u3002\u56fe4\u3002\u8ba1\u7b97\u7535\u78c1\u529b\u3002\u6b64\u5904\u6240\u793a\u4e3aD1\uff0cD2=10\uff0c\u57281\u5708\u7ebf\u5708\u4e4b\u95f4\uff08\u529b\u77e2\u91cf\u4ee5\u6d0b\u7ea2\u8272\u8868\u793a\uff09\u3002\n\u7535\u78c1\u94c1\u529b\u6a21\u578b\u901a\u5e38\u7528\u4e8e\u8ba1\u7b97\u7535\u78c1\u94c1\u78c1\u573a\u5f3a\u5ea6\u7684\u5076\u6781\u5b50\u8fd1\u4f3c\u5728\u77ed\u8ddd\u79bb\u5185\u65e0\u6548\uff0c\u4f8b\u5982\u5f53\u76f8\u90bb\u7acb\u65b9\u4f53\u63a5\u89e6\u65f6\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u5b89\u57f9&#39\uff1bs\u529b\u5b9a\u5f8b\uff081\uff09\uff0c\u5c06\u7ebf\u57082\u5bf9\u7ebf\u57081\u65bd\u52a0\u7684\u529bF1,2\u8868\u793a\u4e3a\u6bcf\u4e2a\u7ebf\u5708\u51e0\u4f55\u5f62\u72b6\u4e0a\u7684\u53cc\u7ebf\u79ef\u5206\uff0c\u5176\u4e2d\u5bfc\u7ebf1\u548c2\u4e2d\u7684\u65e0\u9650\u591a\u4e2a\u5bfc\u7ebf\u5143\u4ef6dl1\u548cdl2\u5206\u522b\u901a\u8fc7\u7535\u6d41I1\u548cI2\u901a\u7535\uff0cr12\u662f\u4ece\u5bfc\u7ebf1\u4e0a\u7684\u6bcf\u4e2a\u5143\u4ef6\u5230\u5bfc\u7ebf2\u4e0a\u7684\u5143\u4ef6\u7684\u5355\u4f4d\u5411\u91cf\uff0c\u7531\u8ddd\u79bbr\u9694\u5f00\uff0c\u03bc\uff08I\uff09\u662f\u7535\u78c1\u94c1\u78c1\u82af\u7684\u78c1\u5bfc\u7387\uff0c\u662f\u7535\u6d41\u7684\u51fd\u6570\u3002\u65b9\u7a0b\u5f0f\uff081\uff09\u6ca1\u6709\u5df2\u77e5\u7684\u89e3\u6790\u89e3\uff0c\u5c06\u5176\u79bb\u6563\u4e3a\uff082\uff09\uff0c\u5176\u4e2dD1\u548cD2\u8868\u793a\u5bfc\u7ebf1\u548c2\u4e2d\u79bb\u6563\u5316\u5143\u7d20\u7684\u6570\u91cf\u3002\u6211\u4eec\u5c06\uff082\uff09\u53c2\u6570\u5316\u4e3a\u534a\u5f84\u3001\u957f\u5ea6\u3001\u5708\u6570\u548c\u87ba\u8ddd\uff0c\u5e76\u5bf9\u7535\u78c1\u94c1\u53c2\u6570\u8fdb\u884c\u6570\u503c\u6c42\u89e3\uff0c\u6bcf\u4e2a\u7ebf\u5708\u4f7f\u75288000\u4e2a\u5143\u7d20\uff08D1\uff0cD2=8000\uff09\uff0c\u4ee50.5mm\u7684\u589e\u91cf\uff08\u5728\u5243\u987b\u5200\u5200\u7247Intel\uff08R\uff09Core\uff08TM\uff09i7-8750H\u4e0a\uff0c85\u5206\u949f/\u589e\u91cf\uff09\u4ece0.5mm\u523020mm\u7684\u95f4\u9694\u8ddd\u79bb\u4e0a\u768464000000\u4e2a\u529b\u77e2\u91cf\u4e4b\u548c\u8ba1\u7b97F1,2\u3002\u56fe4\u663e\u793a\u4e86\u5355\u5708\u7535\u78c1\u94c1\u7ebf\u5708\u7684\u8ba1\u7b97\uff0c\u6bcf\u4e2a\u7ebf\u5708\u670910\u4e2a\u5143\u4ef6\uff08100\u4e2a\u529b\u77e2\u91cf\uff09\u3002\u52a8\u6001\u6a21\u578b\u6211\u4eec\u5c06\u8fd9\u4e9b\u529b\u5e94\u7528\u4e8e\u521d\u6b65\u6a21\u578b\uff08\u56fe5\uff09\u3002\u6211\u4eec\u5c06\u4e24\u4e2a60 mm\u8fb9\u957f\u7684\u7acb\u65b9\u4f53\u5efa\u6a21\u4e3a\u4e00\u4e2a2\u8fde\u6746\u6446\uff0c\u7531\u4e24\u4e2a\u70b9\u8d28\u91cfm\u7ec4\u6210\uff0c\u653e\u7f6e\u5728\u4e24\u4e2a\u65e0\u8d28\u91cf\u8fde\u6746\uff08\u957f\u5ea6L\uff09\u7684\u8fdc\u7aef\uff0c\u5c06\u94f0\u94fe\u8fde\u63a5\u5230\u6bcf\u4e2a\u7acb\u65b9\u4f53\u7684\u8d28\u91cf\u4e2d\u5fc3\u3002\u7535\u78c1\u529b\u6cbf\u7740\u8fde\u63a5\u5b83\u4eec\u7684\u77e2\u91cf\u65bd\u52a0\u5728\u4e0e\u673a\u52a8\u76f8\u5173\u7684\u5176\u4ed6\u4e24\u4e2a\u7535\u78c1\u94c1\u5bf9\u7684\u4f4d\u7f6e\u3002\u6211\u4eec\u63a8\u5bfc\u4e86\u8fd0\u52a8\u65b9\u7a0b\uff0c\u5e76\u4f7f\u7528Python\u7684Symphy\u8f6f\u4ef6\u5305\u7528\u51ef\u6069\u7684\u65b9\u6cd5\u8fdb\u884c\u4e86\u6c42\u89e3\u3002\u56fe5\u3002\u52a8\u529b\u5b66\u6a21\u578b\u3002\u957f\u5ea6\u4e3aL\uff08\u5b9e\u7ebf\uff09\u7684\u65e0\u8d28\u91cf\u8fde\u6746\u8fde\u63a5\u70b9\u8d28\u91cfm\u3002\u529bF\u901a\u8fc7\u65a5\u529b\u9a71\u52a8\u67a2\u8f74\uff1bG\u5438\u5f15\u7535\u78c1\u94c1\u5f62\u6210\u65b0\u7684\u7a33\u5b9a\u952e\u3002\n\u786c\u4ef6\u7535\u78c1\u94c1\u7531800\u570834 AWG\u78c1\u94c1\u7ebf\u7ec4\u6210\uff0c\u7ed5\u5728\u76f4\u5f84\u4e3a3.25\u6beb\u7c73\u3001\u957f\u5ea6\u4e3a55.5\u6beb\u7c73\u3001\u521d\u59cb\u78c1\u5bfc\u7387\uff08\u03bci\uff09\u4e3a2000\u7684\u94c1\u78c1\u82af\uff08fair rite 77\uff09\u4e0a\uff0c\u5176\u5e73\u5747\u7535\u6c14\u7279\u6027\u4e3a\u7535\u5bb9\u4e3a118.1\u03bcF\u3001\u7535\u611f\u4e3a21.44 mH\u3001\u7535\u963b\u4e3a10.65\u2126 Q\u7cfb\u6570\u4e3a1.265\u3002\u6bcf\u4e2a\u6267\u884c\u5668\uff08\u94c1\u82af+\u7ed5\u7ec4\uff09\u7684\u6210\u672c\u4ec5\u4e3a0.66\u7f8e\u5143\u3002\u5e26\u670912\u4e2a\u7535\u78c1\u94c1\u7684\u65e0\u7ea6\u675f\u7acb\u65b9\u4f53\u7684\u7535\u8def\u7531\u4e00\u4e2a\u5fae\u63a7\u5236\u5668\uff08Arduino Nano\uff09\u548c\u4e00\u4e2a\u65e0\u7ebf\u6536\u53d1\u5668\uff08nRF24L01\uff09\u3001\u4e24\u4e2a16\u901a\u9053GPIO\u6269\u5c55\u5668\uff08Semtech SX1509\uff09\u548c6\u4e2a\u5168\u53ccH\u6865\uff08\u4e1c\u829dTB6612FNG\uff09\u7ec4\u6210\u3002\u5b83\u4eec\u5747\u5300\u5206\u5e03\u5728\u4e24\u4e2a\u65b9\u5f62\u6a2a\u622a\u9762\uff08\u8fb9\u957f42mm\uff09\u7684\u53cc\u97620.78mm PCB\u4e4b\u95f4\uff0c\u5176\u4e2d\u5939\u7740\u4e09\u4e2a\u4e32\u8054\u76843.7V\u7535\u6c60\uff08ENGPOW 3.7V 150mAh Lipo\uff0c4.2V\u6ee1\u8f7d\uff09\u3002\u7ed3\u5408\u8d77\u6765\uff0c\u8fd9\u5141\u8bb8\u63a7\u5236\u6bcf\u4e2a\u7535\u78c1\u94c1\uff0c\u4ee5\u4fbf\u5728\u4e09\u4e2a\u6b63\u4ea4\u8f74\u4e0a\u5b9e\u73b0\u53cc\u5411\u65cb\u8f6c\u3002\u6211\u4eec\u4f7f\u7528\u914d\u5907NRF\u7684Arduino Nano\u4f5c\u4e3a\u96c6\u4e2d\u63a7\u5236\u5668\uff0c\u901a\u8fc7\u65e0\u7ebf\u7535\u5c06\u547d\u4ee4\u4ece\u7b14\u8bb0\u672c\u7535\u8111\u4f20\u8f93\u5230\u6a21\u5757\u3002\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u5f00\u73afbang-bang\u63a7\u5236\u65b9\u6848\u3002\u4e3a\u4e86\u5bb9\u7eb3\u5bfb\u5740N\u4e2a\u7acb\u65b9\u4f53\uff0c\u6bcf\u4e2a\u7acb\u65b9\u4f53\u670912\u4e2a\u7535\u78c1\u94c1\uff0c\u5176\u4e2d\u6bcf\u4e2a\u7535\u78c1\u94c1\u53ef\u4ee5\u5728\u4e24\u4e2a\u65b9\u5411\u4e0a\u6781\u5316\u6216\u5173\u95ed\uff0c\u6bcf\u4e2a\u547d\u4ee4\u7531\u4e00\u4e2a16\u4f4d\u6709\u7b26\u53f7\u6574\u6570\u7ec4\u6210\uff0c\u8be5\u6574\u6570\u5bf9\u7acb\u65b9\u4f53ID[1..N]\u3001\u7535\u78c1\u94c1ID[1..12]\u53ca\u5176\u6781\u6027\u8fdb\u884c\u7f16\u7801[\u22121,0,1]. \u5355\u4e2a\u4fe1\u606f\u572820\u6beb\u79d2\u5185\u4f20\u8f93\uff0c\u53ef\u4ee5\u4f20\u8f93\u5355\u72ec\u7684\u547d\u4ee4\uff0c\u4ee5\u914d\u7f6e\u5355\u4e2a\u7acb\u65b9\u4f53\uff0c\u4ee5\u5728\u9009\u5b9a\u7684\u5360\u7a7a\u6bd4[0..255]\u4e0b\u4f7f\u7528PWM\u9a71\u52a8\u9009\u5b9a\u7684\u7535\u78c1\u94c1\u3002\u673a\u68b0\u8bbe\u8ba1\u6bcf\u4e2a\u6a21\u5757\uff08\u56fe1\u548c\u56fe6\uff09\u90fd\u662f\u4e00\u4e2a\u8fb9\u957f\u4e3a60mm\u7684\u7acb\u65b9\u4f53\uff0c\u53ef\u4ee5\u63cf\u8ff0\u4e3a\u539f\u59cb\u7acb\u65b9\u5e03\u62c9\u74e6\u6676\u683c\u7684\u5355\u5143\uff0c\u8fb9\u4ee3\u8868\u7535\u78c1\u94c1\uff0c\u7535\u78c1\u94c1\u8fde\u63a5\u5230\u9876\u70b9\u4ee3\u8868\u89d2\u8fde\u63a5\u5668\u3002\u5728\u7acb\u65b9\u4f53\u7684\u4e2d\u90e8\uff0c\u4e24\u4e2aPCB\u5939\u5fc3\u4e09\u4e2a\u7535\u6c60\uff0c\u4ee5\u7cfb\u7edf\u8d28\u91cf\u4e3a\u4e2d\u5fc3\u6765\u9650\u5236\u60ef\u6027\u77e9\uff0c\u5e76\u7531\u652f\u67b6\u901a\u8fc7\u652f\u67b6\u8fde\u63a5\u5230\u6240\u67098\u4e2a\u89d2\u8fde\u63a5\u5668\u3002\u89d2\u8fde\u63a5\u4ef6\u4f7f\u7528\u575a\u97e7\u76842000\u6811\u81023D\u6253\u5370\u5728Formlabs 2\u4e0a\uff0c\u652f\u67b6\u4f7f\u7528Ultimaker 3\u4ecePLA\u83b7\u5f97\u3002\u8868\u4e00\u8be6\u7ec6\u5217\u51fa\u4e86\u7acb\u65b9\u4f53\u7684\u6210\u672c\u548c\u8d28\u91cf\u5206\u7c7b\uff1b\u8d28\u91cf\u548c\u6210\u672c\u4e3a\u6bcf\u884c\u7684\u603b\u8ba1\uff0c\u7ed3\u6784\u6210\u672c\u57fa\u4e8e\u539f\u6750\u6599\u5b9a\u4ef7\u3002\u4e24\u6761\u83ab\u4ed5\u7535\u7f06\u8fde\u63a5\u4e0a\u90e8\u548c\u4e0b\u90e8PCB\uff0c\u56db\u6761\u7535\u7f06\u5404\u67096\u6839\u5bfc\u7ebf\uff082\u6839\u5bfc\u7ebf/\u7535\u78c1\u94c1\uff09\uff0c\u5c06\u4e09\u4e2a\u7535\u78c1\u94c1\u7684\u4e09\u5143\u7ec4\u7ebf\u675f\u8fde\u63a5\u5230PCB\u3002\u8fd9\u56db\u4e2a\u4e09\u5143\u7ec4\u5c06\u6240\u6709\u7535\u78c1\u94c1\u5e03\u7ebf\u6574\u5408\u5230\u4e24\u5bf9\u622a\u7136\u76f8\u53cd\u7684\u89d2\u4e0a\uff0c\u4ee5\u7b80\u5316\u5e03\u7ebf\uff1b\u6bcf\u4e2a\u4e09\u5143\u7ec4\u5c06\u4e09\u4e2a\u6b63\u4ea4\u5b9a\u4f4d\u7684\u7535\u78c1\u94c1\u6309\u8f74\u7684\u987a\u5e8f\u8fde\u63a5\u5230PCB\u4e0a\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u7acb\u65b9\u4f53\u4e4b\u95f4\u7684\u5bf9\u79f0\u6027\uff0c\u4ece\u800c\u4f7f\u5b83\u4eec\u5bf9\u7ed9\u5b9a\u547d\u4ee4\u505a\u51fa\u76f8\u540c\u7684\u54cd\u5e94\u3002\u6bcf\u4e2a\u7acb\u65b9\u4f53\u9700\u898180\u5206\u949f\u6765\u7ec4\u88c5\uff0c\u7701\u53bb\u4e86\u91cd\u65b0\u710a\u63a5PCB\u548c\u624b\u52a8\u7f20\u7ed5\u7535\u78c1\u94c1\u7684\u65f6\u95f4\u3002\u5b9e\u9a8c\u548c\u7ed3\u679c\u4eff\u771f\u8be5\u4eff\u771f\u4e3a\u4efb\u4f55\u6709\u6548\u7684\u91cd\u65b0\u914d\u7f6e\u63d0\u4f9b\u65cb\u8f6c\u673a\u52a8\uff0c\u5e76\u8f93\u51fa\u6b63\u786e\u7684\u7535\u78c1\u94c1ID\u548c\u6781\u6027\u5206\u914d\uff1b\u901a\u8fc7\u91cd\u65b0\u914d\u7f6e\u6240\u6709\u5c3a\u5bf8\u548c\u7535\u78c1\u94c1\uff0c\u5728\u786c\u4ef6\u4e0a\u9a8c\u8bc1\u5206\u914d\u3002\u4eff\u771f\u652f\u6301\u4e0e\u591a\u8fbe200\u4e2a\u6a21\u5757\u8fdb\u884c\u5b9e\u65f6\u4ea4\u4e92\uff0c\u540c\u65f6\u5448\u73b0\u76f8\u5173\u7684CAD\u6587\u4ef6\uff081.1Mb.STL\uff09\uff0c\u7528\u4f4e\u5206\u8fa8\u7387\u4ee3\u7406\u7acb\u65b9\u4f53\u66ff\u6362\u8fd9\u4e9b\u6587\u4ef6\uff0c\u53ef\u4ee5\u4e0e1000\u4e2a\u6a21\u5757\u8fdb\u884c\u4ea4\u4e92\u3002\u56fe7\uff08\u53c2\u89c1\u8865\u5145\u89c6\u9891\uff09\u5c55\u793a\u4e86\u89c6\u53e3\u6a21\u62df\u548c\u8ba1\u7b97\u7535\u78c1\u94c1\u5206\u914d\uff0c\u7528\u4e8e\u5c0619\u4e2a\u7acb\u65b9\u4f53\u4eceachair\u91cd\u65b0\u914d\u7f6e\u4e3a\u684c\u5b50\uff08\u901a\u8fc722\u4e2a\u52a8\u4f5c\uff09\u518d\u914d\u7f6e\u4e3a\u6c99\u53d1\uff0840\u4e2a\u52a8\u4f5c\uff09\u30022D\u5b9e\u9a8c\uff1a\u6c14\u52a8\u53f0\u5c06\u6a21\u5757\u90e8\u7f72\u5728\u6c14\u52a8\u53f0\uff08ScienceFirst#12000\uff09\u4e0a\uff0c\u5e76\u7f16\u7a0b\u6267\u884c\u4e24\u4e2a\u91cd\u65b0\u914d\u7f6e\u539f\u8bed\uff1b\u4e00\u4e2a\u652f\u70b9\u548c\u4e00\u4e2a\u904d\u5386\uff08\u89c1\u8865\u5145\u89c6\u9891\uff09\u3002\u5728\u673a\u52a8\u8fc7\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u7535\u78c1\u94c1\u4ece11.7W\uff08\u540d\u4e49\u4e0a\u4e3a11.1V x 1.06A\uff09\u53d8\u4e3a15.1W\uff08\u5b8c\u5168\u5145\u7535\uff0c12.6V x 1.2A\uff09\uff0c\u67a2\u8f74\u4e3a1.53s\uff0c\u6a2a\u5411\u4e3a1.03s\u3002\u8fdb\u884c\u4e8652\u6b21\u65cb\u8f6c\u548c30\u6b21\u6a2a\u5411\u673a\u52a8\uff0c\u6210\u529f\u7387\u5206\u522b\u4e3a100%\u548c94%\u3002\u4e3a\u4e86\u83b7\u5f97\u8fd9\u6837\u7684\u6210\u529f\u7387\uff0c\u624b\u52a8\u7ec4\u88c5\u7acb\u65b9\u4f53\u7684\u7535\u78c1\u94c1\u9700\u8981\u4ed4\u7ec6\u5b9a\u4f4d\uff1b\u5fae\u5c0f\u7684\u9519\u4f4d\u5bfc\u81f4\u7acb\u65b9\u4f53\u65e0\u6cd5\u4ea7\u751f\u8db3\u591f\u7684\u5438\u5f15\u529b\u6765\u7a33\u5b9a\u6293\u6355\uff0c\u6a2a\u5411\u673a\u52a8\u7531\u4e8e\u6d89\u53ca\u66f4\u591a\u7535\u78c1\u94c1\u800c\u663e\u793a\u51fa\u66f4\u9ad8\u7684\u5931\u8d25\u53ef\u80fd\u6027\u30023D\u5b9e\u9a8c\uff1a\u629b\u7269\u7ebf\u98de\u884c\u6a21\u5757\u90e8\u7f72\u5728\u5fae\u578b\n......", "note_en": "Figure 1. Elements of an electromagnetically actuated reconfigurable robot. (Above) A single module. (Middle) An array of four modules. (Bottom) 2D and 3D reconfiguration experiments on an air table and a microgravity environment.\n  \t\tThis paper introduces a cube-based reconfigurable robot that utilizes an electromagnet-based actuation framework to reconfigure in three dimensions via pivoting. While a variety of actuation mechanisms for self-reconfigurable robots have been explored, they often suffer from cost, complexity, assembly and sizing requirements that prevent scaled production of such robots. To address this challenge, we use an actuation mechanism based on electromagnets embedded into the edges of each cube to interchangeably create identically or oppositely polarized electromagnet pairs, resulting in repulsive or attractive forces, respectively. By leveraging attraction for hinge formation, and repulsion to drive pivoting maneuvers, we can reconfigure the robot by voxelising it and actuating its constituent modules - termed Electrovoxels - via electromagnetically actuated pivoting. To demonstrate this, we develop fully untethered, three-dimensional self-reconfigurable robots and demonstrate 2D and 3D self-reconfiguration using pivot and traversal maneuvers on an air-table and in microgravity on a parabolic flight. This paper describes the hardware design of our robots, its pivoting framework, our reconfiguration planning software, and an evaluation of the dynamical and electrical characteristics of our system to inform the design of scalable self-reconfigurable robots.\t\t   \t\tIntroduction\t\t  Roboticists have pursued a vision of modular self-reconfigurable robots for over 30 years [1]\u2013[3]. Exhibiting unique benefits in adaptability, scalability, and robustness, modular self-reconfigurable robots (MSRR) promise application domains that include space exploration [4], [5], reconfigurable environments [6], [7], search and rescue [8], and shape-changing user interfaces [9]. Roboticists have typically built MSRR via individually actuated modules connected by temporary joints [6], [10], [11]. MSRR based on cubic modules have moreover achieved self-reconfigurability in two dimensions via sliding [12] and disassembly [13], as well as in three dimensions via pivoting [14], [15]. However, a grand challenge facing self-reconfigurable robots is their scalability [16]\u2014existing designs often require separate mechanisms for actuation and attachment [6], [14], and in addition, require mechanical components such as motors, gears, and transmissions. However, these components are often bulky,complex, and expensive, hindering their miniaturization and scalability.One promising approach to addressing these challenges is to leverage electromagnetic forces to connect and actuate modules at the same time with a single component. Being solid-state - that is - having no moving parts itself it is also easy to maintain and manufacture for a large-scale system. In particular, Nisser et al. [17] proposed and simulated theuse of inexpensive electromagnets embedded into cube edges to actuate pivots between adjacent modules via repulsion while creating temporary hinges via attraction. Unlike traditional hinges that require mechanical attachments between two elements, this approach requires no dedicated physical mechanism and can be formed between any electromagnet pair dynamically. Kubits [18] built the first physical prototype leveraging this electromagnetically actuated pivoting framework and replaced electromagnets with programmable magnets to conserve power. They also demonstrated how the electromagnetically actuated pivoting framework can generate forces significant enough to pivot modules against gravity moments if large currents are applied. However, the modules in their system were tethered to off-board electronics, and because cube edges were only partially embedded with electromagnets, interactions between all electromagnets in the system could not be observed, such as using electromagnets to maintain bonds between stationary cubes during traversals. In this paper, we contribute the first demonstration of reconfigurable robots leveraging the electromagnetically actuated pivoting framework that are {\\it fully untethered}, supported by reconfiguration planning software and electromagnet force predictions verified experimentally. A key goal is to validate these robots&#39; use for microgravity environments to enable near-term space industry applications [4], [16]\u2013[18], where propellant-free actuation and reconfigurability address many challenges associated with today\u2019s limitations on launch mass and volume, as well as facilitating stowage during launch. Reconfigurable modules can enable the augmentation and replacement of structures over multiple launches, form temporary structures to aid in spacecraft inspection and astronaut assistance, function as self-sorting storage containers, and allow spacecraft to actively change their inertia properties. Microgravity alleviates demands placed on actuation forces, facilitating untethering of the modules by moving electronics onboard, and we chose electromagnet parameters such as winding number, core radius and material to limit current. We also parameterized Amp\\`ere\u2019s Force law in terms of these parameters to expand the design space of electromagnetic actuators for future modules&#39; force and mass requirements. We simulate a microgravity environment using an air table, and deploy our modules on a parabolic flight to demonstrate untethered three-dimensional reconfigurability in space. Relative to existing self-reconfigurable robots [14], [15], our robots are light (103g), inexpensive ($68), and easy to fabricate (80 min/cube), promising scalability. In addition, using full assemblies, we demonstrate Sung et al.&#39;s [19] two reconfiguration primitives, the pivot and traversal, demonstrating the electromagnetically actuated pivoting framework&#39;s compatibility with algorithms that allow reconfiguring large numbers of cube-based robots between arbitrary 3D shapes. To show how the framework complies with [19] to reconfigure more complex shapes, we constructed a web interface that simulates reconfiguration between user-defined shapes.   \t\tActuation Mechanism and Simulation\t\t  Reconfiguration algorithms for pivoting cubes [19], [20], demonstrate transitioning between arbitrarily configured 3D lattices that are provably correct in under O(n^2) moves, barring three inadmissible sub-configurations. These reconfiguration maneuvers rely on two reconfiguration primitives; a simple {\\it pivot} between two cubes along a shared edge (Fig. 2, 1st row) and a traversal between the face of one cube and another (Fig. 2, 2nd row). In our work, we introduce an algorithm that describes how the electromagnetically actuated framework for individual cubes is compatible with these reconfiguration planning algorithms in three dimensions.      Figure 2. Reconfiguration maneuvers for (above) Pivoting and (below) Traversal. Electromagnets are shaded in red and blue to indicate polarization w.r.t. a global co-ordinate system; like polarizations repel, unlike polarizations attract.\n    Actuation Mechanism There are three steps to the polarization sequence for both the pivot and traversal maneuvers, which we call the Launch, the Travel, and Catch phases (Fig. 2). In each of these phases, three cubes are involved: a traveling cube (the cube selected for moving), an origin cube (from which the traveling cube launches), and a destination cube (which catches the traveling cube). For the pivot (Fig. 2, 1st row), the origin and destination cubes correspond to the same physical cubes; for the Traversal (Fig. 2, 2nd row), they correspond to different cubes. The algorithm inputs are a cube ID, its desired rotation axis and rotation direction. Given these inputs, all electromagnet assignments (repulse, attract, or OFF) are uniquely defined and identified by our software. During the Launch phase (Fig. 2 A and D), we polarize one electromagnet pair identically to launch the maneuver, while oppositely polarizing a second pair to form an attractive hinge. For the Traversal (Fig. 2, bottom), we energize twoadditional pairs of electromagnets to keep the non-traveling cubes attached to one another; for this, we choose electromagnets oriented orthogonally to the launching electromagnets in order to avoid unwanted interactions between these pairs. During the Travel phase (Fig. 2 B and E), after a short pulse we switch the launching electromagnets off, while the remaining electromagnet pair remain attractive to maintain the hinge. During the Catch phase (Fig. 2 C and F), we energize a new pair of attractive electromagnets to form a stable bond in the newly acquired configuration. Simulation and Control InterfaceManually planning pivoting maneuvers and their associated electromagnet assignments becomes intractable for more than a few cubes. To let users visualize and plan reconfiguration maneuvers, we developed a simulation (Fig. 3) that computes all electromagnet assignments based on desired reconfiguration maneuvers specified by the user. The simulation is browser-based and built using React, TypeScript, and Three.JS. It consists of three parts: (A) different ways to interact with the cubes (via buttons, direct manipulation, or code), (B) a viewport that simulates the cubes and affords their direct manipulation, and (C) a settings panel to toggle simulation features (e.g., different render modes for the cubes).    Figure 3. Web simulation for planning reconfigurations and calculating the associated electromagnet commands. (A) Prescripted maneuvers. (B) Viewport. (C) Settings.\nWe provide three ways to define maneuvers. Users can initiate maneuvers directly by clicking cubes and arrow directions, each resulting in a single pivot. Alternatively, they can launch pre-defined scripts via the buttons that encode multiple consecutive rotations. And finally, new buttons encoding different reconfiguration maneuvers can be added at any time in the underlying Typescript file. To do so, users define the number and locations of starting cubes addressed by (x,y,z) coordinates, and define each subsequent maneuver by specifying the cube number and pivot direction. Cubes in the viewport are affixed to a grid of cubic cells of unit length, with each cube occupying an integer address on coordinates (x,y,z). Rotations are permitted along orthogonal axes X,Y,Z, in clockwise or counter-clockwise directions. Because physical rotations require cubes to form both repulsive and attractive edges, cubes must share a face with another cube to execute a valid pivot. Each cube is assumed to have access to the local occupancy information of its neighboring cells. Prior to executing a pivot, this occupancy is checked in order to determine whether a selected rotation results in a pivot or a traversal. If the maneuver path is obstructed, the viewport returns an error message. Given a pivot direction and unobstructed path, there exists for each cube a unique valid edge about which to form a hinge, but up to two valid edges to repel and actuate the maneuver; in this case, we choose the edge corresponding to the cube with which the hinge is formed. We represent all rotations using quaternions in order to facilitate unordered rotations about multiple axes.Finally, the settings panel allows users to set rendering features. These include displaying IDs for cubes, their electromagnets and their polarization values, displaying occupancy requirements of neighboring cells to prevent collisions for desired maneuvers, toggling animation speed, and setting rendering fidelity. Once a sequence of maneuvers is defined, the associated electromagnet assignments can be ported to a transmitting microcontroller for deployment on the hardware.  \t\tElectromagnets\t\t  In this section, we first describe the selection of the electromagnet parameters for our system. To support further exploration of electromagnetically driven pivoting cubes, we then provide a force model to allow generating candidate electromagnets by using Ampere&#39;s Force law to compute magnetomotive force for a given electromagnet pair parametrically. We finally apply this force to a preliminary dynamical model of a 2-cube system. Electromagnet ParametersThe idealized case of Ampere&#39;s law gives that an electromagnet\u2019s force is proportional to (NI)2\u03bc, where \u03bc is the permeability of its core, N the number of turns and I the current applied. To limit each cube\u2019s mass and size, we first selected the narrowest COTS ferrite cores available, at 1.625mm radius R and initial permeability \u03bc0 of 2000. In addition, larger cores proved difficult to be supported by the rated pressure of our air table on a 60mm-side cube footprint. We next chose the COTS SMD drivers we found capable of delivering the highest current, at 1.2A continuous. Using exploratory experiments, we determined that an N of 800 provided sufficient force to pivot 100g prototype cubes within interactive times of 2s. Finally, choosing a wire gauge of AWG 34 at this NI yielded a coil resistance of 10.5\u2126, allowing driving the electromagnets, microcontroller and auxiliary electronics from a single untethered power source of 11.1V-12.6V.   Figure 4. Computing electromagnet forces. Shown here for D1,D2=10 between 1-turn coils (force vectors in magenta).\n Electromagnet Force ModelThe dipole approximation commonly used to find electromagnets\u2019 magnetic field strengths is invalid over short separation distances, such as when neighboring cubes are in contact. As such, we use Ampere&#39;s force law (1), which expresses the force F1,2 exerted on coil 1 due to coil 2 as a double line integral over each coil\u2019s geometry where infinitesmal wire elements dl1 and dl2 in wires 1 and 2 are energized with currents I1 and I2, respectively, r12 is a unit vector from each element on wire 1 to those on wire 2 separated by distance r, and \u03bc(I) is the permeability of the electromagnet core as a function of current.  Equation (1) has no known analytical solution and is discretized to give (2), where D1 and D2 represent the number of discretized elements in wires 1 and 2.\t\t We parameterize (2) in terms of radius, length, turns, and pitch, and solve this numerically for our electromagnet parameters, using 8000 elements (D1,D2 = 8000) per coil to compute F1,2 from the sum of 64,000,000 force vectors over separation distances of 0.5mm to 20mm in 0.5mm increments (85 minutes/increment on a Razer Blade Intel(R) Core(TM) i7-8750H). Fig. 4 illustrates this computation for single-turn electromagnet coils with 10 elements each (100 force vectors). Dynamic ModelWe apply these forces to a preliminary model (Fig. 5). We model two 60-mm side length cubes as a 2-link pendulum consisting of two point masses m placed at the distal ends of two massless links (length L) connecting the hinge to each cube\u2019s center of mass. Electromagnet forces are applied at locations that correspond to the positions of the other two electromagnet pairs associated with the maneuver along vectors that connect them. We derive the equations of motion and solve with Kane\u2019s Method using Python\u2019s SymPy package.   Figure 5. Dynamical model. Massless links of length L (solid lines) connect point masses m. Force F actuates the pivot via repulsion; G attracts electromagnets to form a new stable bond.\n  \t\tHardware\t\t   ElectronicsEach electromagnet is comprised of 800 turns of 34 AWG magnet wire wound around a ferromagnetic core (fair-rite 77) of 3.25mm diameter, 55.5mm length and initial permeability (\u03bci) of 2000, with average electrical properties characterized by a capacitance of 118.1\u03bcF, an inductance of 21.44mH, a resistance of 10.65\u2126 and a Q factor of 1.265. Each actuator (core + winding) costs just $0.66. The circuitry for an untethered cube with 12 electromagnets consists of a microcontroller (Arduino Nano) integrated with a wireless transceiver (nRF24L01), two 16-channel GPIO expanders (Semtech SX1509) and 6 full dual H-bridges (Toshiba TB6612FNG). These are distributed evenly between two double-sided 0.78mm PCBs of square cross-section (side length 42mm) which sandwich three serially connected 3.7V batteries (ENGPOW 3.7v 150mAh Lipo, 4.2V at full charge). Combined, this allows controlling each electromagnet as to enable bidirectional pivoting in three orthogonal axes. We use an NRF-equipped Arduino Nano as a centralized controller to transmit commands from a laptop to modules via radio. We utilize a simple open-loop bang-bang control scheme. To accommodate addressing N cubes, each with 12 electromagnets, where each electromagnet can be polarized in two directions or turned off, each command consists of a 16-bit signed integer that encodes the cube ID [1..N], electromagnet ID [1..12] and its polarity [\u22121,0,1]. Individual messages are transmitted in 20 milliseconds, and separate commands can be transmitted to configure individual cubes to drive selected electromagnets using PWM at a chosen duty cycle [0..255]. Mechanical Design   Each module (Figures 1 and 6) is a 60mm side length cube and can be described as a unit cell of a primitive cubic Bravais lattice, with edges representing electromagnets that connect to vertices representing corner connectors. In the middle of the cube, two PCBs sandwich three batteries, centering the system\u2019s mass to limit moment of inertia, and are fixated by a scaffold that interfaces via struts to all 8 corner connectors. The corner connectors are 3D printed on a Formlabs 2 using Tough 2000 resin and the scaffold from PLA using an Ultimaker 3. Table I details the cost and mass breakdown of a cube; mass and cost are for total in each row, and structure costs are based on raw material pricing.     Two Molex cables connect the upper and lower PCBs, and four cables of 6 wires each (2 leads/electromagnet) harness triads of three electromagnets to the PCBs. These four triads consolidate all electromagnet wirings to two pairs of diametrically opposed corners to simplify wire routing; each triad connects three orthogonally positioned electromagnets to the PCBs in order of axis to ensure symmetry between all cubes such that they respond identically for a given command. Each cube took 80 minutes to assemble, discounting time to reflow-solder PCBs and manually wind electromagnets.  \t\tExperiments and Results\t\t   SimulationThe simulation renders pivoting maneuvers and outputs correct electromagnet IDs and polarity assignments for any valid reconfiguration; assignments were verified on hardware by reconfigurations across all dimensions and electromagnets. The simulation supports real-time interaction with up to 200 modules while rendering the associated CAD files (1.1Mb .STL), and replacing these with low resolution proxy cubes permits interaction with 1000 modules. Fig. 7 (see supplementary video) illustrates the viewport simulating and computing electromagnet assignments for reconfiguring 19 cubes from achair to a table (via 22 maneuvers) to a couch (40 maneuvers).    2D Experiments: Air TableThe modules were deployed on an air table (ScienceFirst #12000) and programmed to perform the two reconfiguration primitives; a pivot and a traversal (see supplemental video).Each electromagnet drew 11.7W (nominally 11.1V x 1.06A) to 15.1W (fully charged, 12.6V x 1.2A) for the duration of the maneuver, which was 1.53s for pivots and 1.03s for traversals.52 pivots and 30 traversal maneuvers were performed, with a success rate of 100% and 94%, respectively. To yield this success rate, the electromagnets of the manually assembledcubes required careful positioning; small misalignments resulted in failures of the cubes to generate sufficient attractive forces to catch stably, and traversal maneuvers showed a higherlikelihood of failure due to involving more electromagnets. 3D Experiments: Parabolic FlightThe modules were deployed in micro\n......", "posttime": "2022-02-25 19:48:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u673a\u5668\u4eba,\u7535\u78c1,electromagnetically,\u7acb\u65b9\u4f53", "title": "\u7535\u4f53\u7d20\uff1a\u7535\u78c1\u9a71\u52a8\u7684\u81ea\u91cd\u6784\u673a\u5668\u4eba", "title_en": "ElectroVoxel: Electromagnetically Actuated Self-Reconfigurable Robots", "transed": 1, "url": "https://hcie.csail.mit.edu/research/Electrovoxel/electrovoxel.html", "via": "", "real_tags": ["\u673a\u5668\u4eba", "\u7535\u78c1", "\u7acb\u65b9\u4f53"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074960, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u563f\uff0c\u4e16\u754c\uff0c\u8fd9\u573a\u6218\u4e89\u4e0e\u4e4c\u514b\u5170\u65e0\u5173\u3002\u5b83&#39\uff1b\u8fd9\u662f\u5173\u4e8e\u4f60\u4eec\u6240\u6709\u4eba\u7684\u3002\u4f5c\u4e3a\u300a\u798f\u5e03\u65af\u300b\u4e4c\u514b\u5170\u7248\u7684\u79d1\u6280\u7f16\u8f91\uff0c\u8ba9\u6211\u4ee5\u6700\u76f4\u63a5\u7684\u65b9\u5f0f\u5411\u5927\u5bb6\u89e3\u91ca\u4e00\u4e0b\uff0c\u7528\u4e4c\u514b\u5170\u8bed\u547d\u540d\u4ea7\u54c1\u548c\u6280\u672f\u3002\n\u2014\u2014\u7531\u4e4c\u514b\u5170\u79fb\u6c11\u626c\u00b7\u5e93\u59c6\u521b\u7acb\u3002\u4ed6\u51fa\u751f\u5728\u6cd5\u65af\u8482\u592b\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u542c\u5230\u4fc4\u7f57\u65af\u706b\u7bad\u7684\u58f0\u97f3\u3002\u642c\u5230\u6211\u4eec\u8fd9\u91cc\u6765\u4e86\u3002\n\u2014\u2014\u7531\u9a6c\u514b\u65af\u00b7\u5217\u592b\u94a6\u5171\u540c\u521b\u7acb\uff0c\u4ed6\u4e5f\u662f\u4ece\u8fd9\u91cc\u79fb\u6c11\u8fc7\u6765\u7684\u3002BNPL service@Affirm\u662f\u4ed6\u7684\u65b0\u516c\u53f8\u3002\n\u7531\u57fa\u8f85\u7684@MacPaw\u516c\u53f8\u5f00\u53d1\u3002\u5982\u679c\u4f60\u6709\u4e00\u53f0Mac\u7535\u8111\uff0c\u4f60\u5c31\u77e5\u9053\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5bf9\u4e8e\u6e05\u7406\u5783\u573e\u6709\u591a\u68d2\u3002\n\u6216\u8005\u4f60\u53ef\u80fd\u559c\u6b22\u82b1\u54e8\u7684\u7535\u5b50\u90ae\u4ef6\u548c\u65e5\u5386\u5ba2\u6237\uff1f\u8fd9\u662f\u5173\u4e8e@Readdle\u7684\uff0c\u4ed6\u5236\u4f5c\u4e86@SparkMailApp\uff0c\u51fa\u751f\u5728\u6556\u5fb7\u8428\u3002\u4ee5\u4e0b\u662f\u6211\u4e3a\u300a\u798f\u5e03\u65af\u300b\u62a5\u9053\u7684\u5176\u4ed6\u51e0\u4f4d\u6556\u5fb7\u8428\u4f01\u4e1a\u5bb6\u3002\n\u4f7f\u7528@Snapchat\uff1f\u55ef\uff0c\u63a9\u853d\u6280\u672f\u662f\u7531Looksery\u56e2\u961f\u5e26\u6765\u7684\uff0c\u8be5\u56e2\u961f\u4e3b\u8981\u9a7b\u624e\u5728\u6556\u5fb7\u8428\uff0c\u7531\u5c24\u91cc\u00b7\u83ab\u7eb3\u65af\u8482\u5c14\u7533\uff08Yuri Monastyrshin\uff09\u7684\u806a\u660e\u5934\u8111\u9886\u5bfc\u3002Snap\u5728\u57fa\u8f85\u548c\u624e\u6ce2\u91cc\u624e\u4e5f\u6709\u4e00\u4e2a\u5de8\u5927\u7684\u529e\u516c\u5ba4\u3002\n\u4f46\u662f\u8ba9\u6211\u4eec&#39\uff1b\u8ba9\u6211\u4eec\u7ee7\u7eed\u3002\u5982\u679c\u4f60\u5728\u4e00\u5bb6\u8d22\u5bcc500\u5f3a\u4f01\u4e1a\u5de5\u4f5c\uff0c\u4f60\u7684\u9500\u552e\u56e2\u961f\u5f88\u53ef\u80fd\u4f1a\u96c7\u4f63\u5458\u5de5\u3002\u4eba\u5de5\u667a\u80fd\u8f6f\u4ef6\u3002\u8fd9\u53ea\u72ec\u89d2\u517d\u662f\u7531\u51fa\u751f\u4e8e\u7b2c\u8042\u4f2f\u7684\u4f01\u4e1a\u5bb6\u5965\u5217\u683c\u00b7\u7f57\u91d1\u65af\u57fa\u9001\u7ed9\u4f60\u7684\u3002\n\u8ba9&#39\uff1bLet\u2019\u522b\u5fd8\u4e86\u623f\u95f4\u91cc\u7684\u5927\u8c61\u3002\u4f60\u4eec\u90fd\u5728\u901a\u8fc7@Grammarly\u68c0\u67e5\u81ea\u5df1\u7684\u5199\u4f5c\u3002\u5b83&#39\uff1b\u8fd9\u5bb6\u516c\u53f8\u76ee\u524d\u5e02\u503c130\u4ebf\u65b0\u5143\uff0c\u7531\u4e09\u540d\u4e4c\u514b\u5170\u4eba\u521b\u5efa\u3002\u5176\u6700\u5927\u7684\u5f00\u53d1\u529e\u516c\u5ba4\u4ecd\u5728\u57fa\u8f85\u3002\n\u4f46\u5982\u679c\u4f60\u66f4\u559c\u6b22\u8d5a\u94b1@RevolutionApp\u8054\u5408\u521b\u59cb\u4eba\u662f\u5f17\u62c9\u5fb7\u00b7\u4e9a\u68ee\u79d1\u3002\u4ed6\u6765\u81ea\u7c73\u79d1\u62c9\u4f0a\u592b\uff0c\u8fd9\u91cc\u73b0\u5728\u662f\u4fc4\u7f57\u65af\u5165\u4fb5\u7684\u70ed\u70b9\u3002\n\u4e9a\u9a6c\u900a\u7684\u7231\u73af\u76f8\u673a\uff1f\u5927\u591a\u6570\u786c\u4ef6\u548c\u8f6f\u4ef6\u90fd\u662f\u7531\u8fd9\u5bb6\u62e5\u6709\u8fd11000\u4eba\u7684\u516c\u53f8\u5728\u57fa\u8f85\u8bde\u751f\u7684\uff0c\u5c3d\u7ba1\u4e9a\u9a6c\u900a\u957f\u671f\u5426\u8ba4\u4e0e\u5f53\u5730\u627f\u5305\u5546\u6709\u8054\u7cfb\u3002\n\u52a0\u5bc6\u3002\u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u63ed\u793a\uff0c\u4f46\u4ec5\u4e3e\u51e0\u4e2a\u4f8b\u5b50\u2014\u2014@solana\u521b\u59cb\u4ebaAlex Yakovenko\u548c@NEARProtocol\u521b\u59cb\u4eba\u4f0a\u5229\u4e9a\u00b7\u6ce2\u6d1b\u82cf\u94a6\u51fa\u751f\u4e8e\u4e4c\u514b\u5170\u3002\u4ed6\u4eec\u73b0\u5728\u6b63\u5728\u5236\u9020\u6700\u5148\u8fdb\u3001\u6700\u9ad8\u6548\u7684\u5206\u6563\u5f0f\u4ea7\u54c1\uff0c\u5e76\u5728\u4e4c\u514b\u5170\u62e5\u6709\u5de8\u5927\u7684\u5f71\u54cd\u529b", "note_en": "Hey, world, this war is not about Ukraine. It&#39;s about all of you. Let me \u2013 as a tech editor at Forbes Ukraine \u2013 explain it to you in the most direct way, by naming products and technologies with Ukrainian roots.\n \u2013 founded by Ukrainain emigrant Jan Koum. He was born in Fastiv where you can hear Russian rockets right now. Moved to US.\n \u2013 cofounded by Max Levchin, who also emigrated from here. BNPL service  @Affirm is his new company.\n is developed by Kyiv based company  @MacPaw. If you own a Mac, you know how great is this app for decluttering.\n Or may be you like fancy email and calendar clients? Thats on  @Readdle, who made  @SparkMailApp and was born in Odessa. Here are a few others Odessa entrepreneurs I have covered for Forbes.\n  Using  @Snapchat? Well, the masking technology was brought by Looksery team, mostly stationed in Odessa and led by bright mind of Yuri Monastyrshin. Snap also have a huge office in Kyiv and Zaporizha.\n But let&#39;s move on. If you are working in a Fortune-500 business, there is a chance you sales team use  People.ai software. Well, this unicorn is broght to you by Dnipro-born entrepreneur Oleg Roginskiy.\n And let&#39;s not forget the elephant in the room. You all are checking you writing via  @Grammarly. It&#39;s $13 bln company by now, and it was founded by three Ukrainians. Its largest dev office is still here, in Kyiv.\n But if you are more of a money guy.  @RevolutApp cofounder is Vlad Yatsenko. He is from Mykolaiv which is now a hot point for Russian invasion.\n Love Ring cameras from Amazon? Most of the hardware and software was born in Kyiv by the company of almost 1000 people, even though Amazon for a long time denies its connections to local contractors.\n Crypto. There is A LOT to uncover, but to name just a few \u2013  @solana founder Alex Yakovenko and  @NEARProtocol founder Illia Polosukhin were born in Ukraine. They are now building the most advanced and efficient decentralized products and have huge engendering presence in Ukraine", "posttime": "2022-02-25 19:46:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e4c\u514b\u5170,world", "title": "\u563f\uff0c\u4e16\u754c\uff0c\u8fd9\u573a\u6218\u4e89\u4e0e\u4e4c\u514b\u5170\u65e0\u5173", "title_en": "Hey, world, this war is not about Ukraine", "transed": 1, "url": "https://preview.journa.ls/sapitonmix/62186f3ca27bdd15db80e451", "via": "", "real_tags": ["\u4e4c\u514b\u5170", "world"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074959, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eba\u4eec\u603b\u662f\u95ee\u6211\u5173\u4e8e\u6d41\u7a0b\u7684\u95ee\u9898\u3002\u8ba1\u5212\u6d41\u7a0b\u3001\u7ee9\u6548\u8bc4\u4f30\u6d41\u7a0b\u3001OKR\u7b49\u3002\u6211\u60f3\u8fd9\u662f\u56e0\u4e3a\u6211\u66fe\u7ecf\u662f\u9996\u5e2d\u8fd0\u8425\u5b98\uff0c\u4eba\u4eec\u628a\u9996\u5e2d\u8fd0\u8425\u5b98\u89c6\u4e3a\u6d41\u7a0b\u6076\u9b54\u3002\u8ba9\u706b\u8f66\u51c6\u65f6\u8fd0\u884c\u7684\u4eba\u3002\u5468\u56f4\u6709\u5f88\u591a\u7518\u7279\u56fe\u7684\u4eba\u3002\n\u6211\u4e0d\u53cd\u5bf9\u7a0b\u5e8f\u30021\u4f46\u6211\u8ba4\u4e3a\u521d\u521b\u516c\u53f8\u901a\u5e38\u8fc7\u65e9\u3001\u9891\u7e41\u5730\u5b9e\u65bd\u5b83\u4eec\u3002\n\u6bcf\u6b21\u6709\u4eba\u95ee\u6211\u4e00\u4e9b\u65b0\u63d0\u8bae\u7684\u6d41\u7a0b\u65f6\uff0c\u6211\u90fd\u4f1a\u95ee\uff1a\u201c\u4f60\u4e3a\u4ec0\u4e48\u8ba4\u4e3a\u4f60\u9700\u8981\u8fd9\u4e2a\uff1f\u201d\u7b54\u6848\u901a\u5e38\u662f\u67d0\u79cd\u7248\u672c\u7684\u201c[\u806a\u660e\u4eba]\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u6709\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u73b0\u5728\u6211\u4eec\u6b63\u5728\u53d8\u5f97\u66f4\u5927\u3002\u201d\u901a\u5e38\u8fd9\u4e2a\u806a\u660e\u4eba\u6765\u81ea\u4e00\u5bb6\u5927\u516c\u53f8\u3002\n\u522b\u8bef\u4f1a\uff0c\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u5f88\u70c2\u3002\u5728\u67d0\u4e00\u70b9\u4e0a\uff0c\u4ed6\u4eec\u548c\u4f60\u4e00\u6837\u3002\u4e00\u5bb6\u521d\u521b\u516c\u53f8\u4e3a\u4ea7\u54c1\u5e02\u573a\u5339\u914d\u5ea6\u800c\u594b\u6597\uff0c\u6216\u5728\u4e0a\u5e02\u65f6\u521b\u9020\u53ef\u9884\u6d4b\u6027\uff0c\u6216\u5728\u5730\u7406\u4f4d\u7f6e\u4e0a\u8fdb\u884c\u6269\u5f20\uff0c\u6216\u5176\u4ed6\u771f\u6b63\u91cd\u8981\u7684\u4e8b\u60c5\u3002\u4ed6\u4eec\u5f88\u4e13\u6ce8\u3002\u4e13\u6ce8\u4e8e\u96c7\u4f63\u6539\u53d8\u8f68\u8ff9\u7684\u4eba\uff0c\u5e76\u8d4b\u4e88\u4ed6\u4eec\u6bd4\u4ed6\u4eec\u77e5\u9053\u8be5\u600e\u4e48\u529e\u66f4\u591a\u7684\u8d23\u4efb\u3002\u4ed6\u4eec\u52aa\u529b\u5de5\u4f5c\uff0c\u4ece\u65e0\u5230\u6709\u5730\u521b\u9020\u51fa\u4e00\u4e9b\u4e1c\u897f\u3002\u4ed6\u4eec\u56e0\u7edd\u671b\u800c\u4e13\u6ce8\u3002\n\u4f46\u73b0\u5728\u4ed6\u4eec\u4e0d\u540c\u4e86\u3002\u5927\u591a\u6570\u5927\u516c\u53f8\u5e76\u4e0d\u4e13\u6ce8\u4e8e\u51ed\u7a7a\u521b\u9020\u3002\u5176\u4ed6\u4eba\u5236\u9020\u4e86\u795e\u5947\u7684\u8d5a\u94b1\u673a\u5668\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u5b83\u4f1a\u7ee7\u7eed\u5de5\u4f5c\u3002\u8003\u8651\u5230\u4e00\u4ef6\u771f\u6b63\u91cd\u8981\u7684\u4e8b\u60c5\uff0c\u4ed6\u4eec\u5173\u5fc3\u5962\u4f88\u54c1\uff0c\u6bd4\u5982\u786e\u4fdd\u5c3d\u53ef\u80fd\u591a\u7684\u516c\u53f8\u6210\u5458\u53c2\u4e0e\u5230\u8ba1\u5212\u8fc7\u7a0b\u4e2d\u3002\u6216\u8005\u521b\u5efa\u5305\u542b\u4e0d\u65ad\u589e\u52a0\u7684\u65b9\u6846\u548c\u7c7b\u522b\u7684\u7ee9\u6548\u8bc4\u4f30\u6846\u67b6\u3002\u6216\u8005\u5176\u4ed6\u6bd4\u8fd9\u66f4\u91cd\u8981\u7684\u4e8b\u60c5\u3002\u8fd9\u79cd\u7f3a\u4e4f\u4e13\u6ce8\u662f\u4e00\u79cd\u5962\u4f88\uff0c\u4e5f\u662f\u4e00\u79cd\u75be\u75c5\u3002\n\u5f53\u4eba\u4eec\u8003\u8651\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684\u6d41\u7a0b\u65f6\uff0c\u6211\u7ed9\u4ed6\u4eec\u7684\u5efa\u8bae\u662f\uff0c\u5728\u767d\u677f2\u4e0a\u5199\u4e0b\u8fd9\u4e2a\u95ee\u9898\u7684\u7b54\u6848\uff1a\u201c\u5982\u679c\u4f60\u4eca\u5e74\u53ea\u80fd\u5b8c\u6210\u4e00\u4ef6\u4e8b\uff0c\u90a3\u4f1a\u662f\u4ec0\u4e48\uff1f\u201d\u3002\u5982\u679c\u7b54\u6848\u662f\u201c\u5236\u5b9a\u4e00\u4e9b\u65b0\u7684\u6d41\u7a0b\u201d\uff0c\u90a3\u5c31\u53bb\u505a\u5427\u3002\u4f46\u5982\u679c\u662f\u201c\u5c06\u5e02\u573a\u4efd\u989d\u4ece30%\u63d0\u9ad8\u523060%\u201d\u6216\u201c\u63a8\u51fa\u8fd9\u4e2a\u65b0\u4ea7\u54c1\uff0c\u5c06\u4f7f\u6211\u4eec\u7684TAM\u589e\u52a0\u4e00\u500d\u201d\uff0c\u4e0d\u8981\u5728\u5176\u4ed6\u4efb\u4f55\u4e8b\u60c5\u4e0a\u6d6a\u8d39\u65f6\u95f4\u3002\u53ea\u8981\u5e26\u4e0a\u4f60\u6700\u597d\u7684\u4eba\uff08\u5305\u62ec\u9996\u5e2d\u6267\u884c\u5b98\uff09\uff0c\u8ba9\u4ed6\u4eec\u8d1f\u8d23\u89e3\u51b3\u95ee\u9898\uff0c\u5e76\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\u6240\u9700\u7684\u4e00\u5207\u548c\u6240\u6709\u4eba\u3002\n\u5b9e\u9645\u4e0a\uff0c\u8fc7\u7a0b\u4e0d\u662f\u6211\u7684\u95ee\u9898\u3002\u8fd9\u662f\u56f4\u7ed5\u65b0\u6d41\u7a0b\u7684\u8ba8\u8bba\u5728\u516c\u53f8\u5185\u90e8\u7ecf\u5e38\u9884\u89c8\u7684\u5185\u5bb9\u3002\u6ce8\u610f\u529b\u4e0d\u96c6\u4e2d\u3002\u548c\u5e73\u65f6\u671f\u7684\u601d\u8003\u3002\u81ea\u6ee1\n\u5f53\u6211\u60f3\u8d77\u5728Instacart\u7684\u65f6\u5149\u65f6\uff0c\u6211\u60f3\u8d77\u4e86\u7edd\u671b\u3002\u8fd9\u5f88\u75db\u82e6\u3002\u4f46\u5b83\u4e5f\u5f88\u5f3a\u5927\u3002\u4f5c\u4e3a\u4e00\u5bb6\u516c\u53f8\uff0c\u5f53\u6211\u4eec\u6709\u7740\u5171\u540c\u7684\u76ee\u6807\u65f6\uff0c\u6211\u4eec\u6700\u7f8e\u597d\u7684\u65f6\u523b\u5230\u6765\u4e86\u3002\u4f5c\u4e3a\u4e00\u4e2a\u56e2\u961f\uff0c\u6211\u4eec\u6700\u6709\u8da3\u7684\u65f6\u523b\u51fa\u73b0\u5728\u6211\u4eec\u80cc\u9760\u5899\u58c1\u7684\u65f6\u5019\u3002\n\u6839\u636e\u6211\u7684\u7ecf\u9a8c\uff0c\u4f5c\u4e3a\u4e00\u5bb6\u521d\u521b\u516c\u53f8\uff0c\u7edd\u671b\u662f\u4f60\u6700\u5927\u7684\u4f18\u52bf\u3002\u5b83\u4f1a\u628a\u4f60\u5e26\u5230\u6700\u5e95\u5c42\u7684\u7ec6\u8282\u30023.\u7edd\u671b\u6fc0\u53d1\u521b\u9020\u529b\u548c\u5f3a\u70c8\u7684\u4e13\u6ce8\u529b\u3002\u5b83\u662f\u6253\u9020\u4f18\u79c0\u4ea7\u54c1\u548c\u670d\u52a1\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\n\u6240\u4ee5\uff0c\u4e0b\u4e00\u6b21\u4f60\u611f\u5230\u7edd\u671b\u7684\u65f6\u5019\uff0c\u9760\u8fdb\u53bb\u3002\u62e5\u62b1\u5b83\u3002\u7528\u5b83\u4f5c\u4e3a\u71c3\u6599\uff0c\u4e3a\u4f60\u7684\u516c\u53f8\u521b\u9020\u4e0b\u4e00\u4e2a\u521b\u59cb\u65f6\u523b4\u3002\n\u4e0b\u4e00\u6b21\uff0c\u5f53\u6709\u4eba\u56e0\u4e3a\u4e00\u5bb6\u5927\u516c\u53f8\u800c\u8bd5\u56fe\u544a\u8bc9\u4f60\u53bb\u505a\u67d0\u4ef6\u4e8b\u65f6\uff0c\u8981\u591a\u7591\u3002\n\u4e0d\u8981\u8ba9\u4ed6\u4eec\u7528\u6b63\u5728\u6162\u6162\u6740\u6b7b\u4ed6\u4eec\u7684\u4e1c\u897f\u611f\u67d3\u4f60\u7684\u516c\u53f8\u3002\n1.\u8fd9\u662f\u8c0e\u8a00\u3002\u6211\u6709\u70b9\u8ba8\u538c\u5927\u591a\u6570\u8fc7\u7a0b\u3002\u6211\u53ea\u662f\u73b0\u5728\u4e0d\u60f3\u548c\u4f60\u5435\u67b6\u3002\u6709\u4e9b\u8fc7\u7a0b\u662f\u6709\u4ef7\u503c\u7684\uff08\u6bd4\u5982\u90a3\u4e9b\u521b\u9020\u51fa\u53ef\u4ee5\u52a0\u901f\u51b3\u7b56\u7684\u5171\u540c\u8bed\u8a00\u7684\u8fc7\u7a0b\uff09\uff0c\u4f46\u7edd\u5927\u591a\u6570\u8fc7\u7a0b\u90fd\u5f88\u7cdf\u7cd5\u3002\u7136\u800c\uff0c\u8fd9\u4e0d\u5e94\u4e0e\u4efb\u4f55\u5bf9\u201c\u4fe1\u4efb\u8fc7\u7a0b\u201d\u7684\u4e0d\u826f\u60c5\u7eea\u76f8\u6df7\u6dc6\u3002\u5c71\u59c6\u00b7\u8f9b\u57fa\u662f\u4e2a\u5929\u624d\uff0c\u4ed6\u505a\u5f97\u5bf9\u3002\n3.\u5f53\u6211\u4eec\u7684\u767d\u677f\u4e0a\u53ea\u6709\u4e24\u4e2a\u8bcd\uff08\u201c\u5355\u4f4d\u7ecf\u6d4e\u201d\uff09\u65f6\uff0c\u6211\u4ecd\u7136\u8bb0\u5f97\u4eba\u4eec\u5728\u68b3\u7406\u53bf\u7ea7\u5173\u4e8e\u74f6\u5b50\u62bc\u91d1\u7684\u89c4\u5b9a\u65f6\uff0c\u7ed9\u6211\u4eec\u6bcf\u4e2a\u8ba2\u5355\u51e0\u7f8e\u5206\u3002\u592a\u68d2\u4e86\u3002\n4\u7f57\u6d1b\u592b\u00b7\u535a\u5854\u4e0e\u6211\u4eec\u5206\u4eab\u4e86\u6770\u514b\u00b7\u591a\u5c14\u897f\u4ecb\u7ecd\u7684\u8fd9\u4e2a\u6982\u5ff5\u3002\u663e\u7136\uff0c\u591a\u5c14\u897f\u8ba4\u4e3a\u516c\u53f8\u6709\u591a\u4e2a\u201c\u521b\u59cb\u65f6\u523b\u201d\u3002\u6211\u559c\u6b22\u8fd9\u4e2a\u3002\u8fd9\u662f\u4e00\u79cd\u591a\u4e48\u4e0d\u53ef\u601d\u8bae\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u6269\u5c55\u201c\u6211\u4eec\u59cb\u7ec8\u662f\u4e00\u5bb6\u521d\u521b\u4f01\u4e1a\u201d\u7684\u5fc3\u6001\uff0c\u5e76\u6fc0\u52b1\u90a3\u4e9b\u5728\u516c\u53f8\u7ec4\u5efa\u65f6\u6ca1\u6709\u53c2\u4e0e\u7684\u4eba\u3002", "note_en": "People ask me about processes all the time. Planning processes, performance review processes, OKRs, et cetera. I think it\u2019s because I was once a COO and people have this vision of COOs as process fiends. People who make the trains run on time. People with lots of Gantt charts all around them.\n  I have nothing against process. 1 But I think startups generally implement them way too early and way too often.\n  Every time I\u2019m asked about some newly proposed process, I ask: \u201cWhy do you think you need this?\u201d The answer is usually some version of \u201c[Smart Person] said that we need to have a process now that we are getting bigger.\u201d Usually this Smart Person TM is from a big company.\n    Don\u2019t get me wrong\u2014they didn\u2019t always suck. At some point they were just like you. A startup fighting for product market fit or creating predictability in go-to-market or expanding geographically or something else that actually matters. They were focused. Focused on hiring trajectory-changing people and giving them more responsibility than they knew what to do with. They were working their a**es off to create something out of nothing. They had desperation-induced focus.\n  But now they are different. Most big companies aren\u2019t focused on creating things out of nothing. Someone else made the magic money-making machine, and they assume that it will just keep working. With the one thing that actually matters taken care of, they care about luxuries like making sure as high a percentage of the company as possible feels included in the planning process. Or creating performance review frameworks with an ever-increasing number of boxes and categories. Or something else that matters even less than that. This lack of focus is a luxury and a disease.\n  My advice to people when they are thinking about instituting a new process is to go to a whiteboard 2 and write down the answer to this question: \u201cIf you could only get one thing done this year, what would it be?\u201d. If that answer is \u201cinstitute some new process\u201d, go for it. But if it\u2019s something like \u201cincrease market share from 30% to 60%\u201d or \u201claunch this new product that will 2x our TAM\u201d, don\u2019t waste your time on anything else. Just take your best person (up to and including the CEO), make them responsible for solving that problem, and give them everything and everyone they need to make it happen.\n  In reality, process is not my problem. It\u2019s what discussions around new processes often preview within a company. Lack of focus. Peacetime thinking. Complacency.\n  When I think of my time at Instacart, I remember desperation. It was painful. But it was also powerful. Our best moments as a company came when we shared a singular purpose. Our most fun moments as a team came when our backs were against the wall.\n  In my experience, desperation is the single greatest advantage you have as a startup. It takes you down to the lowest level of detail. 3 Desperation inspires creativity and intense focus. It is an essential ingredient to building  great products and services.\n  So, the next time you feel desperate, lean in. Embrace it. Use it as the fuel to create the next founding moment 4 for your company.\n  And the next time someone tries to tell you to do something because a big company does it, be suspicious.\n  Don\u2019t let them infect your company with the thing that is slowly killing theirs.\n  1 This is a lie. I kind of hate most processes. I just don\u2019t want to fight about it with you right now. Some processes are valuable (like ones that create common language which can speed up decision making) but the vast majority of them stink. However, this should not be confused with any ill feelings towards \u201cTrust The Process\u201d. Sam Hinkie is a genius and he had it right.\n    3 When our whiteboard only had two words on it (\u201cUnit Economics\u201d), I still remember people combing through county-level rules on bottle deposits to get us a couple of cents per order. So awesome.\n  4 Roelof Botha shared this concept with us that Jack Dorsey introduced. Apparently Dorsey has this concept of companies having multiple \u201cfounding moments\u201d. I love this. What an incredible way to scale the \u201cwe are always a startup\u201d mindset and to inspire people who weren\u2019t there at company formation.", "posttime": "2022-02-25 19:43:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f15\u8d77,induced", "title": "\u7edd\u671b\u5f15\u8d77\u7684\u4e13\u6ce8", "title_en": "Desperation-Induced Focus", "transed": 1, "url": "https://rkg.blog/desperation-induced-focus.php", "via": "", "real_tags": ["\u5f15\u8d77", "induced"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074958, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u60a8\u5fd8\u8bb0\u4e86\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b58\u50a8\u6587\u4ef6\u7684\u4f4d\u7f6e\uff0c\u60a8\u77e5\u9053\u627e\u5230\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u6311\u6218\u3002\u6587\u4ef6\u7cfb\u7edf\u5141\u8bb8\u60a8\u5c06\u4efb\u4f55\u6587\u4ef6\u5b58\u50a8\u5728\u4efb\u4f55\u6587\u4ef6\u5939\u4e2d\uff0c\u800c\u4e0d\u7ba1\u6587\u4ef6\u5939\u8def\u5f84\u662f\u5426\u9002\u5408\u8be5\u6587\u4ef6\u3002\u5373\u4f7f\u60a8\u8bb0\u5f97\u6587\u4ef6\u540d\u7684\u67d0\u4e9b\u90e8\u5206\uff0c\u4e5f\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u5728\u5927\u578b\u6587\u4ef6\u5939\u6811\u4e2d\u641c\u7d22\u5b83\u3002\u6709\u65f6\uff0c\u5f53\u4f60\u70b9\u51fb\u201c\u4fdd\u5b58\u201d\u6309\u94ae\u65f6\u5b58\u50a8\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\u751a\u81f3\u61d2\u5f97\u544a\u8bc9\u4f60\u5b83\u653e\u5728\u54ea\u91cc\u3002\n\u6587\u6863\u3001\u7167\u7247\u548c\u5176\u4ed6\u5e38\u89c1\u7c7b\u578b\u7684\u6587\u4ef6\u901a\u5e38\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u683c\u5f0f\uff08\u4ee5\u53ca\u968f\u9644\u7684\u6587\u4ef6\u6269\u5c55\u540d\uff09\uff0c\u56e0\u6b64\u6309\u6587\u4ef6\u6269\u5c55\u540d\u641c\u7d22\u53ef\u80fd\u4f1a\u6216\u53ef\u80fd\u4e0d\u4f1a\u627e\u5230\u60a8\u8981\u67e5\u627e\u7684\u6587\u4ef6\u3002\u6587\u4ef6\u7cfb\u7edf\u4e5f\u88ab\u8bbe\u8ba1\u4e3a\u53ea\u77e5\u9053\u5176\u7ba1\u7406\u5377\u4e2d\u7684\u6587\u4ef6\uff0c\u56e0\u6b64\u5373\u4f7f\u5728\u540c\u4e00\u7269\u7406\u786c\u76d8\u9a71\u52a8\u5668\u4e0a\u5b58\u50a8\u4e86\u591a\u4e2a\u76f8\u540c\u6587\u4ef6\u7cfb\u7edf\u7c7b\u578b\u7684\u5377\uff08\u4f8b\u5982NTFS\u6216Ext4\uff09\uff1b\u5fc5\u987b\u72ec\u7acb\u641c\u7d22\u6bcf\u4e2a\u5377\u3002\n\u67e5\u627e\u6587\u4ef6\u6240\u9700\u7684\u65f6\u95f4\u901a\u5e38\u53d6\u51b3\u4e8e\u7cfb\u7edf\u4e2d\u8fd8\u6709\u591a\u5c11\u5176\u4ed6\u6587\u4ef6\u3002\u5c31\u50cf\u5728\u5e72\u8349\u5806\u4e2d\u627e\u5230\u4e00\u6839\u9488\u4e00\u6837\uff0c\u5b83\u5b9e\u9645\u4e0a\u53d6\u51b3\u4e8e\u5e72\u8349\u5806\u7684\u5927\u5c0f\uff0c\u5f53\u8ba1\u7b97\u51fa\u627e\u5230\u9488\u53ef\u80fd\u9700\u8981\u591a\u957f\u65f6\u95f4\u65f6\u3002\n\u6587\u4ef6\u7cfb\u7edf\u662f\u51e0\u5341\u5e74\u524d\u53d1\u660e\u7684\uff0c\u5f53\u65f6\u6700\u5927\u7684\u7269\u7406\u9a71\u52a8\u5668\u4ee5\u5146\u5b57\u8282\u4e3a\u5355\u4f4d\uff0c\u53ea\u80fd\u5b58\u50a8\u51e0\u767e\u4e2a\u6587\u4ef6\u3002\u4eca\u5929\u7684\u786c\u76d8\u9a71\u52a8\u5668\uff08HDD\uff09\u548c\u56fa\u6001\u9a71\u52a8\u5668\uff08SDD\uff09\u7684\u6d4b\u91cf\u5355\u4f4d\u662fTB\uff08\u5927\u51e0\u767e\u4e07\u500d\uff09\u3002\u786c\u76d8\u5236\u9020\u5546\u6700\u8fd1\u5ba3\u5e03\uff0c\u786c\u76d8\u5bb9\u91cf\u5c06\u8d85\u8fc720TB\u3002\u5982\u679c\u6587\u4ef6\u7684\u5e73\u5747\u5927\u5c0f\u4e3a100000\u5b57\u8282\uff1b\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u9a71\u52a8\u5668\u6ee1\u4e4b\u524d\u5b58\u50a8\u5927\u7ea62\u4ebf\u4e2a\u6587\u4ef6\u3002\u90a3\u662f\u4e00\u4e2a\u5927\u8349\u5806\uff01\n\u5c3d\u7ba1\u591a\u5e74\u6765\u5bf9\u6587\u4ef6\u7cfb\u7edf\u8fdb\u884c\u4e86\u5927\u91cf\u6539\u8fdb\uff1b\u5b83\u4eec\u4ecd\u7136\u57fa\u4e8e\u51e0\u5341\u5e74\u524d\u76f8\u540c\u7684\u57fa\u672c\u67b6\u6784\u3002\u5b83\u4eec\u7684\u8bbe\u8ba1\u76ee\u7684\u4e0d\u662f\u5bf9\u6587\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u5feb\u901f\u641c\u7d22\u5355\u4e2a\u6587\u4ef6\u6216\u6587\u4ef6\u7ec4\u3002\u6709\u52a9\u4e8e\u641c\u7d22\u7684\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u9700\u8981\u4f7f\u7528\u987a\u5e8f\u641c\u7d22\u51fd\u6570\uff08\u4f8b\u5982findNext\u6216readdir\uff09\u8fdb\u884c\u5206\u5c42\u6811\u904d\u5386\uff0c\u8fd9\u4e9b\u51fd\u6570\u672c\u8d28\u4e0a\u6bd4\u8f83\u6162\u3002\n\u62e5\u6709\u72ec\u7acb\u7684\u7d22\u5f15\u670d\u52a1\uff0c\u5982\u5fae\u8f6f\u7684Windows\u641c\u7d22\u6216\u82f9\u679c\u7684Spotlight\uff0c\u53ef\u4ee5\u5927\u5927\u52a0\u5feb\u641c\u7d22\u901f\u5ea6\uff1b\u4f46\u5b83\u4eec\u4e0d\u662f\u6587\u4ef6\u7cfb\u7edf\u4e0d\u53ef\u5206\u5272\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5b83\u4eec\u5fc5\u987b\u5c06\u7d22\u5f15\u4fe1\u606f\u5b58\u50a8\u5728\u5355\u72ec\u7684\u6570\u636e\u5e93\u4e2d\u3002\u6570\u636e\u5e93\u5f88\u5bb9\u6613\u4e0e\u6587\u4ef6\u7cfb\u7edf\u5931\u53bb\u540c\u6b65\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u52a0\u5feb\u7d22\u5f15\u8fc7\u7a0b\uff0c\u7528\u6237\u901a\u5e38\u53ea\u4e3a\u6587\u4ef6\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\u7f16\u5236\u7d22\u5f15\uff0c\u56e0\u6b64\u4f7f\u7528\u7d22\u5f15\u53ef\u80fd\u4e0d\u4f1a\u663e\u793a\u60a8\u8981\u67e5\u627e\u7684\u6587\u4ef6\u3002\n\u5feb\u901f\u641c\u7d22\u53ea\u662f\u56f0\u6270\u5f53\u4eca\u6587\u4ef6\u7cfb\u7edf\u7684\u95ee\u9898\u4e4b\u4e00\u3002\u4f5c\u4e3a\u4e00\u4e2a\u81ea20\u4e16\u7eaa80\u5e74\u4ee3\u4ee5\u6765\u4e00\u76f4\u4ece\u4e8b\u6587\u4ef6\u7cfb\u7edf\u548c\u6570\u636e\u5e93\u5de5\u4f5c\u7684\u4eba\uff0c\u6211\u63d0\u51fa\u4e86\u4e00\u957f\u4e32\u6570\u636e\u5b58\u50a8\u7cfb\u7edf\u5e94\u8be5\u505a\u5f97\u66f4\u597d\u7684\u4e8b\u60c5\u3002\u8bb8\u591a\u95ee\u9898\u90fd\u65e0\u6cd5\u901a\u8fc7\u5bf9\u73b0\u6709\u6587\u4ef6\u7cfb\u7edf\u4f53\u7cfb\u7ed3\u6784\u7684\u5fae\u5c0f\u66f4\u6539\u6765\u89e3\u51b3\u3002\u6211\u76f8\u4fe1\u662f\u65f6\u5019\u7528\u66f4\u597d\u7684\u4e1c\u897f\u5b8c\u5168\u53d6\u4ee3\u6587\u4ef6\u7cfb\u7edf\u4e86\uff01\n\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u6211\u4e0d\u4f1a\u5728\u672c\u6587\u4e2d\u5217\u51fa\u6240\u6709\u95ee\u9898\uff0c\u800c\u662f\u5c06\u5176\u9650\u5236\u5728\u6211\u7684\u201c\u524d\u4e94\u5927\u201d\u95ee\u9898\u4e0a\u3002\u6211\u8bbe\u8ba1\u5e76\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3a\u201cDidgets\u201d\u7684\u65b0\u7cfb\u7edf\uff0c\u6211\u8ba4\u4e3a\u5b83\u89e3\u51b3\u4e86\u8fd9\u4e9b\u95ee\u9898\u548c\u8bb8\u591a\u5176\u4ed6\u95ee\u9898\u3002DIDGET\uff08\u6570\u636e\u5c0f\u90e8\u4ef6\u7684\u7f29\u5199\uff09\u662f\u667a\u80fd\u6570\u636e\u5bf9\u8c61\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u7ba1\u7406\u5927\u91cf\u975e\u7ed3\u6784\u5316\u6216\u7ed3\u6784\u5316\u6570\u636e\u3002\u65e0\u8bba\u6587\u4ef6\u7cfb\u7edf\u88abDidget\u6216\u5176\u4ed6\u7c7b\u4f3c\u7cfb\u7edf\u53d6\u4ee3\uff0c\u8fd9\u4e9b\u95ee\u9898\u90fd\u5c06\u6301\u7eed\u5b58\u5728\uff0c\u76f4\u5230\u8fd9\u4e9b\u95ee\u9898\u5f97\u5230\u89e3\u51b3\uff1a\n\u6bcf\u4e2a\u6587\u4ef6\u7684\u56fa\u5b9a\u5927\u5c0f\u5143\u6570\u636e\u8bb0\u5f55\u592a\u5927\u3002\u8bfb\u53d6\u548c\u7f13\u5b58\u6574\u4e2a\u6587\u4ef6\u8868\u9700\u8981\u7684\u65f6\u95f4\u592a\u957f\uff0c\u5360\u7528\u7684\u5185\u5b58\u592a\u591a\u3002\n\u5143\u6570\u636e\u8bb0\u5f55\u6ca1\u6709\u6587\u4ef6\u5206\u7c7b\u7cfb\u7edf\u3002\u8981\u786e\u5b9a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\uff0c\u5fc5\u987b\u68c0\u67e5\u6587\u4ef6\u540d\u6216\u6570\u636e\u6d41\u3002\n\u6587\u4ef6\u7cfb\u7edf\u6ca1\u6709\u4e00\u4e2a\u7edf\u4e00\u7684\u6807\u7b7e\u7cfb\u7edf\uff0c\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u8f7b\u677e\u5feb\u901f\u5730\u641c\u7d22\u8be5\u7cfb\u7edf\u3002\n\u6bcf\u4e2a\u6587\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u662f\u5176\u5b8c\u6574\u8def\u5f84\u540d\u3002\u5982\u679c\u540d\u79f0\u66f4\u6539\u6216\u6587\u4ef6\u88ab\u79fb\u52a8\u5230\u5176\u4ed6\u6587\u4ef6\u5939\uff0c\u5219\u5b58\u50a8\u7684\u5bf9\u8be5\u6587\u4ef6\u7684\u4efb\u4f55\u5f15\u7528\u90fd\u5c06\u65e0\u6548\u3002\n\u65e0\u6cd5\u4fdd\u62a4\u6587\u4ef6\u514d\u53d7\u6076\u610f\u4ee3\u7801\u7684\u653b\u51fb\u3002\u75c5\u6bd2\u68c0\u6d4b\u8f6f\u4ef6\u5fc5\u987b\u68c0\u67e5\u6bcf\u4e2a\u6587\u4ef6\uff0c\u4ee5\u786e\u4fdd\u7cfb\u7edf\u5b89\u5168\u3002\n\u6bcf\u4e2a\u6587\u4ef6\u7cfb\u7edf\u90fd\u6709\u4e00\u4e2a\u6587\u4ef6\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6587\u4ef6\u7684\u8bb0\u5f55\u3002\u5728\u6d41\u884c\u7684\u6587\u4ef6\u7cfb\u7edf\u4e2d\uff0c\u6b64\u8bb0\u5f55\u7684\u5927\u5c0f\u53ef\u4ee5\u4ece256\u5b57\u8282\uff08Ext4\uff09\u52301024\u5b57\u8282\uff08NTFS\uff09\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u8868\u4e2d\u67092\u4ebf\u6761\u8bb0\u5f55\uff1b\u7136\u540e\uff0c\u5982\u679c\u4f60\u60f3\u8fdb\u884c\u5927\u91cf\u5feb\u901f\u641c\u7d22\uff0c\u5c31\u5fc5\u987b\u8bfb\u5165\u5e76\u7f13\u5b5850GB\u5230200GB\u7684\u6570\u636e\u3002\u78c1\u76d8\u4f20\u8f93\u901f\u5ea6\u80af\u5b9a\u63d0\u9ad8\u4e86\uff0c\u5185\u5b58\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u4fbf\u5b9c\uff0c\u4f46\u8fd9\u4ecd\u7136\u662f\u5927\u91cf\u7684\u6570\u636e\u3002\u5728Didgets\u4e2d\uff0c\u6bcf\u6761\u8bb0\u5f55\u53ea\u670964\u5b57\u8282\uff0c\u8fd9\u610f\u5473\u7740\u4e00\u4e2a\u67092\u4ebf\u6761\u8bb0\u5f55\u7684\u8868\u7684\u603b\u5bb9\u91cf\u4e0d\u523013GB\uff0c\u8fd9\u66f4\u6613\u4e8e\u7ba1\u7406\u3002\n\u5bf9\u4e8eDidgets\uff0c\u5b83\u7684\u5143\u6570\u636e\u8bb0\u5f55\u4e2d\u6709\u4e00\u4e2a\u5c0f\u5b57\u6bb5\uff0c\u7528\u4e8e\u5224\u65ad\u6587\u4ef6\u662f\u7167\u7247\u3001\u6587\u6863\u3001\u89c6\u9891\u8fd8\u662f\u5176\u4ed6\u7c7b\u578b\u3002\u641c\u7d22\u901f\u5ea6\u53ef\u80fd\u975e\u5e38\u5feb\u3002\u5728\u6211\u7684\u663e\u5f71\u673a\u4e0a\uff0c\u6211\u53ef\u4ee5\u57282\u79d2\u949f\u5185\u627e\u5230\u6240\u67092000\u4e07\u5f20\u7167\u7247\uff082\u4ebf\u4e2a\u6587\u4ef6\u4e2d\uff09\u3002\u5982\u679c\u5fc5\u987b\u6bd4\u8f83\u6587\u4ef6\u6269\u5c55\u540d\uff0c\u8fd9\u6837\u7684\u5feb\u901f\u641c\u7d22\u662f\u4e0d\u53ef\u80fd\u7684\u3002\n\u6587\u4ef6\u7cfb\u7edf\u4f7f\u7528\u6587\u4ef6\u5939\u540d\u79f0\u4f5c\u4e3a\u7ec4\u7ec7\u6570\u636e\u7684\u4e00\u822c\u65b9\u5f0f\u3002\u6709\u4e9b\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\u6269\u5c55\u5c5e\u6027\u7b49\u529f\u80fd\uff0c\u53ef\u4ee5\u5c06\u6807\u7b7e\u9644\u52a0\u5230\u6587\u4ef6\u4e2d\u3002\u5b83\u4eec\u90fd\u4e0d\u80fd\u4f7f\u57fa\u4e8e\u5143\u6570\u636e\u6807\u8bb0\u7684\u6587\u4ef6\u67e5\u627e\u53d8\u5f97\u7b80\u5355\u5feb\u6377\u3002Didget\u5141\u8bb8\u60a8\u5c06\u591a\u8fbe255\u4e2a\u6807\u8bb0\u9644\u52a0\u5230\u4efb\u4f55Didget\u4e0a\uff0c\u5e76\u5728\u51e0\u79d2\u949f\u5185\u627e\u5230\u6240\u6709\u5171\u4eab\u4e00\u4e2a\u516c\u5171\u6807\u8bb0\u7684\u6807\u8bb0\u3002\nDidget\u7684\u552f\u4e00\u6807\u8bc6\u7b26\u662f64\u4f4d\u6570\u5b57\u3002\u5b83\u5728\u90a3\u4e2a\u50bb\u74dc\u7684\u4e00\u751f\u4e2d\u59cb\u7ec8\u4fdd\u6301\u4e00\u81f4\u3002\u5f53\u60a8\u4e3a\u5176\u6307\u5b9a\u4e0d\u540c\u7684\u540d\u79f0\uff08\u540d\u79f0\u53ea\u662f\u53e6\u4e00\u4e2a\u6807\u8bb0\uff09\u6216\u5c06\u5176\u653e\u5165\u4e0d\u540c\u7684\u5217\u8868\uff08\u4f8b\u5982\u6587\u4ef6\u5939\uff09\u65f6\uff0c\u5b83\u4e0d\u4f1a\u6539\u53d8\u3002\u4efb\u4f55\u5b58\u50a8\u7684\u5bf9Didget\u7684\u5f15\u7528\u5728\u88ab\u5220\u9664\u4e4b\u524d\u4fdd\u6301\u6709\u6548\u3002\n\u4e0e\u6587\u4ef6\u4e0d\u540c\uff0cDidget\u7684\u6570\u636e\u6d41\u53ef\u4ee5\u662f\u6c38\u4e45\u4e0d\u53d8\u7684\u3002\u6587\u4ef6\u7cfb\u7edf\u53ea\u8bfb\u5c5e\u6027\u53ea\u662f\u5bf9\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u7684\u5efa\u8bae\uff0c\u5b83\u4eec\u53ef\u4ee5\u5ffd\u7565\u5b83\u3002\u5bf9\u4e8edidget\uff0c\u4e0d\u53ef\u53d8\u5c5e\u6027\u7531\u7cfb\u7edf\u5f3a\u5236\u6267\u884c\uff0c\u65e0\u6cd5\u7ed5\u8fc7\u3002\u4efb\u4f55\u5e94\u7528\u7a0b\u5e8f\u90fd\u4e0d\u80fd\u4fee\u6539\u53ea\u8bfbDidget\u7684\u5185\u5bb9\uff0c\u65e0\u8bba\u5b83\u53ef\u80fd\u62e5\u6709\u4f55\u79cd\u7528\u6237\u6743\u9650\u3002\n\u5982\u679cHDD\u548cSDD\u7684\u5bb9\u91cf\u7ee7\u7eed\u4fdd\u6301\u5728\u5f53\u524d\u7684\u8f68\u9053\u4e0a\uff0c\u5728\u672a\u6765\u5341\u5e74\u5185\uff0c\u5b58\u50a8\u7cfb\u7edf\u7684\u5e73\u5747\u7528\u6237\u5bb9\u91cf\u53ef\u80fd\u4f1a\u8d85\u8fc7100TB\u3002\u6587\u4ef6\u5c06\u88ab\u6c38\u4e45\u4fdd\u5b58\uff0c\u5982\u679c\u6587\u4ef6\u7cfb\u7edf\u4e0d\u88ab\u66f4\u597d\u7684\u4e1c\u897f\u53d6\u4ee3\uff0c\u67e5\u627e\u5355\u4e2a\u6216\u4e00\u7ec4\u6587\u4ef6\u5c06\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u548c\u8017\u65f6\u3002", "note_en": "If you have ever forgotten where you stored a file in a file system, you know that finding it can be a real challenge. File systems let you store any file in any folder, regardless of whether the folder path is appropriate for the file. Even if you remember some parts of the file name, it can take a long time to search through a large folder tree looking for it. Sometimes the application that stored it when you hit the \u2018save\u2019 button, didn\u2019t even bother to tell you where it put it.\n Documents, photos, and other common types of files often have several different formats (and the file extensions that accompany them) so searching by file extension may or may not turn up the file you were looking for. File systems are also designed to know only about the files in their managed volume, so even if you have multiple volumes of the same file system type (e.g. NTFS or Ext4) stored on the same physical hard disk drive; you must search each volume independently.\n The time it takes to find a file is often dependent upon how many other files are present in the system. Like finding a needle in a haystack, it really depends upon the size of the haystack when figuring out how long it might take to find the needle.\n File systems were invented decades ago when the largest physical drives were measured in megabytes and could only store a few hundred files on them. Today\u2019s hard drives (HDDs) and solid state drives (SDDs) are measured in terabytes (millions of times bigger). HDD manufacturers have recently announced drives that will hold more than 20TB. If the average size of a file is 100,000 bytes; this means you can store about 200 million files before the drive is full. That is one big haystack!\n Even though numerous improvements have been made to file systems over the years; they are all still based on the same basic architecture from decades ago. They are not designed to classify files and quickly search for a single file or groups of files easily. Applications that help with searching are still required to do a hierarchical tree traversal using sequential search functions (e.g. findNext or readdir) which are slow by nature.\n Having a separate indexing service such as Microsoft\u2019s Windows Search or Apple\u2019s Spotlight, can greatly speed up searching; but these are not an integral part of the file system so they have to store their indexing information in a separate database. It is easy for the database to become out of synchronization with the file system. Also, to speed up the indexing process, users often only index a portion of the file system so using the index might not turn up the file(s) you were looking for.\n Fast searching is just one of the problems that plague today\u2019s file systems. As someone who has worked with file systems and databases since the 1980s, I have come up with a long laundry list of things a data storage system should do better. Many of the problems cannot be solved with just minor changes to the existing file system architecture. I believe that the time has come to completely replace file systems with something better!\n Rather than list all the problems in this article, I will limit it to my \u2018Top 5\u2019 problems for brevity. I have designed and developed a new system called \u2018Didgets\u2019 that I think solves these problems and many others. Didgets (short for data widgets) are intelligent data objects that can efficiently manage large amounts of unstructured or structured data. Whether file systems are replaced by Didgets or some other similar system, the problems will persist until these issues are addressed:\n The fixed-size metadata record for each file is too big. Reading in and caching the entire file table takes too long and uses too much memory.\n The metadata record does not have a file classification system. To determine what is in a file, the file name or the data stream must be examined.\n File systems do not have a uniform tagging system that is easily and quickly searchable by applications.\n Each file\u2019s unique identifier is its full path name. If the name changes or the file is moved to a different folder, any stored references to it become invalid.\n Files cannot be protected against malicious code. Virus detection software must examine every single file to ensure the system is safe.\n Every file system has a file table that stores a record for each file. The size of this record in popular file systems can range from 256 bytes (Ext4) to 1024 bytes (NTFS). This means that if you have 200 million records in the table; then between 50GB and 200GB of data must be read in and cached if you want to do lots of fast searches. Disk transfer speeds have certainly increased and memory is cheaper than ever, but that is still a lot of data. With Didgets, each record is only 64 bytes which means a table with 200 million records is less than 13GB total, which is much more manageable.\n With Didgets, there is a small field in its metadata record that tells whether the file is a photo or a document or a video or some other type. Searches can be exceptionally fast. On my development machine, I can find all 20 million photos (out of 200 million files) in under 2 seconds. Fast searches like this are impossible if you have to compare file name extensions.\n File systems use folder names as a general way to organize data. Some file systems support things like extended attributes that let you attach tags to your files. None of them make finding files based off metadata tags quick and easy. Didgets let you attach up to 255 tags to any Didget and find all of them that share a common tag in seconds.\n The unique identifier for a Didget is a 64 bit number. It remains consistent throughout the life of that Didget. It doesn\u2019t change when you assign it a different name (names are just another tag) or put it in a different list (e.g. folder). Any stored references to the Didget remain valid until it is deleted.\n Unlike a file, a Didget\u2019s data stream can be permanently immutable. The file system read-only attribute is just a suggestion to any application, which can ignore it. For Didgets, the immutable attribute is enforced by the system with no way around it. No application can modify the contents of a read-only Didget no matter what user permissions it might have.\n If HDD and SDD capacities continue on their current trajectory, storage systems may exceed 100TB for the average user within the next decade. Files will be kept forever and finding a single file or a group of them will become harder and more time consuming if file systems are not replaced with something better.", "posttime": "2022-02-25 19:39:37", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d6\u4ee3,replace,\u6587\u4ef6", "title": "\u53d6\u4ee3\u6587\u4ef6\u7cfb\u7edf\u7684\u65f6\u5019\u5230\u4e86", "title_en": "The time has come to replace file systems", "transed": 1, "url": "https://didgets.substack.com/p/where-did-i-put-that-file", "via": "", "real_tags": ["\u53d6\u4ee3", "replace", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074955, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b63\u5728\u9a8c\u8bc1\u60a8\u7684\u8bf7\u6c42\uff0c\u8bf7\u7a0d\u5019\u3002\u3002\u3002", "note_en": "Please wait while your request is being verified...", "posttime": "2022-02-25 19:23:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,lisp,\u9a8c\u8bc1", "title": "\uff08\u5982\u4f55\u7f16\u5199\uff08Lisp\uff09\u89e3\u91ca\u5668\uff08Python\uff09\uff09\uff082010\uff09", "title_en": "(How to Write a (Lisp) Interpreter (In Python)) (2010)", "transed": 1, "url": "https://norvig.com/lispy.html", "via": "", "real_tags": ["python", "lisp", "\u9a8c\u8bc1"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074953, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "RoarVM\u4ee5\u524d\u88ab\u79f0\u4e3a\u590d\u5174\u865a\u62df\u673a\uff08Renaissance Virtual Machine\uff0cRVM\uff09\uff0c\u662fIBM\u7814\u7a76\u9879\u76ee\u7684\u4e00\u90e8\u5206\uff0c\u65e8\u5728\u7814\u7a76\u672a\u6765\u8bb8\u591a\u6838\u5fc3\u7cfb\u7edf\u7684\u7f16\u7a0b\u8303\u5f0f\u548c\u8bed\u8a00\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u4e2a\u865a\u62df\u673a\u610f\u5473\u7740\u652f\u6301\u672a\u6765\u8d85\u8fc71000\u4e2a\u5185\u6838\u7684\u591a\u6838\u7cfb\u7edf\u3002\nRVM\u7531IBM Research\u6839\u636eEclipse\u516c\u5171\u8bb8\u53ef\u8bc1\u8fdb\u884c\u5f00\u6e90\u3002\u6709\u5173\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u5f00\u6e90\u516c\u544a\u3002\n\u5982\u4eca\uff0cRoarVM\u652f\u6301\u5728x86\u517c\u5bb9\u7684\u591a\u6838\u7cfb\u7edf\u548c\u57fa\u4e8eTilera TILE64\u7684\u591a\u6838\u7cfb\u7edf\u4e0a\u5e76\u884c\u6267\u884cSmalltalk\u7a0b\u5e8f\u3002\u5b83\u4f7f\u7528\u6807\u51c6\u7684Squeak 4.1\u95ed\u5305\u56fe\u50cf\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u5e76\u4f7f\u7528\u4e86\u57fa\u4e8eMVC\u7684Squeak 3.9\u56fe\u50cf\u7684\u5265\u79bb\u7248\u672c\u3002\nRoarVM\u63d0\u4f9b\u4e86Smalltalk\u8fdb\u7a0b\u7684\u5e76\u884c\u6267\u884c\uff0c\u56e0\u6b64\uff0c\u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u578b\u662f\u4e00\u4e2a\u5178\u578b\u7684\u5171\u4eab\u5185\u5b58\u6a21\u578b\uff0c\u7c7b\u4f3c\u4e8eJava\uff0c\u5176\u7ebf\u7a0b\u548cC/C++\u7684\u7ecf\u5178pthread\u3002\nRoarVM\u4e0eSqueak\u53ca\u5176\u53c9\u5b50\u517c\u5bb9\u3002\u7136\u800c\uff0cSmalltalkimages\u9700\u8981\u8fdb\u884c\u5927\u91cf\u66f4\u6539\uff0c\u4ee5\u4f7f\u5176\u80fd\u591f\u5229\u7528\u591a\u4e2aCore\u5e76\u4e0eVM\u6b63\u786e\u4ea4\u4e92\u3002\nRoarVM\u7684\u6e90\u4ee3\u7801\u5df2\u4f5c\u4e3a\u5f00\u6e90\u53d1\u5e03\uff0c\u4ee5\u4f7fMallTalk\u793e\u533a\u80fd\u591f\u8bc4\u4f30\u8fd9\u4e9b\u60f3\u6cd5\uff0c\u5e76\u53ef\u80fd\u5c06\u5176\u96c6\u6210\u5230\u73b0\u6709\u7cfb\u7edf\u4e2d\u3002RoarVM\u63d0\u4f9b\u4e86\u5728\u591a\u6838\u548c\u591a\u6838\u673a\u5668\u4e0a\u4f7f\u7528Smalltalk\u7cfb\u7edf\u8fdb\u884c\u5b9e\u9a8c\u6240\u9700\u7684\u529f\u80fd\uff0c\u8fd9\u662f\u6211\u4eec\u5e0c\u671b\u9f13\u52b1\u7684\u3002\n\u7136\u800c\uff0c\u6211\u4eec\u4e5f\u6b22\u8fce\u6240\u6709\u5bf9RoarVM\u672c\u8eab\u7684\u8d21\u732e\u3002\u8981\u4e48\u5c06\u5176\u5347\u7ea7\u5230\u73b0\u6709\u865a\u62df\u673a\u7684\u901f\u5ea6\uff0c\u8981\u4e48\u5c06\u5176\u6269\u5c55\u4ee5\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u5b9e\u9a8c\u3002\nRoarVM\u662f\u4e00\u4e2a\u7814\u7a76\u9879\u76ee\uff0c\u5728\u6027\u80fd\u65b9\u9762\u4e0d\u5982\u6807\u51c6Squeak VM\u4f18\u5316\u3002\u56e0\u6b64\uff0c\u5176\u987a\u5e8f\u6027\u80fd\u8f83\u6162\u3002\u8fd9\u662f\u56e0\u4e3aRoarVM\u5ffd\u7565\u4e86\u4f18\u5316\uff0c\u6bd4\u5982\u4f7f\u7528GCC labelas\u503c\u6269\u5c55\u6765\u52a0\u901f\u89e3\u91ca\u5668\u3002\n\u5f53RoarVM\u5728\u591a\u4e2a\u5185\u6838\u4e0a\u8fd0\u884c\u65f6\uff0c\u7a7a\u95f2\u8fdb\u7a0b\u4e0d\u4f1a\u4ea7\u751f\u54cd\u5e94\u3002\u4e8b\u4ef6\u5904\u7406\u5c1a\u672a\u5b8c\u5168\u9002\u5e94\uff0c\u56e0\u6b64\uff0c\u7a7a\u95f2\u8fdb\u7a0b\u6b63\u5fd9\u4e8e\u7b49\u5f85\u6027\u80fd\u539f\u56e0\n\u57fa\u4e8eX11\u7684\u56fe\u5f62\u5b50\u7cfb\u7edf\u4e0e\u5982\u4eca\u7684Squeak\u865a\u62df\u673a\uff08\u5c24\u5176\u662fOS X\u7248\u672c\uff09\u76f8\u6bd4\uff0cRoarVM\u4ec5\u4f7f\u7528X11\uff0c\u6ca1\u6709\u50cfSqueak\u865a\u62df\u673a\u90a3\u6837\u96c6\u6210\u5230OSas\u4e2d\nDavid Ungar\u548cSam S.Adams\u8457\uff0c\u300a\u7b2c\u4e94\u5c4a\u52a8\u529b\u5b66\u8bed\u8a00\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\u300b\uff0cACM\uff082009\uff09\uff0c\u7b2c99-110\u9875\u3002http://portal.acm.org/citation.cfm?id=1640134.1640149\n\u7f16\u7a0b\u73af\u5883\u7531Joseph Pallas\u548cDavid Ungar\u64b0\u5199\uff0c1988\u5e74ACM Sigplan\u7f16\u7a0b\u8bed\u8a00\u8bbe\u8ba1\u4e0e\u5b9e\u73b0\u4f1a\u8bae\u8bb0\u5f55\uff0cACM\uff081988\uff09\uff0c\u7b2c268-277\u9875\u3002http://portal.acm.org/citation.cfm?id=54017\nROARVM\u7c7b\u4f3c\u4e8eSimeAcK\uff0fSLUN\u4e2d\u7684SueAK VM\uff0c\u4f46\u662f\u5b83\u5728C++\u4e2d\u88ab\u6539\u5199\uff0c\u4ee5\u4fbf\u4e8e\u5728\u8bb8\u591aCARICAL\u4f53\u7cfb\u7ed3\u6784\u4e0a\u8fdb\u884c\u5f00\u53d1\u3002\u4f8b\u5982Squeak VM\u63d2\u4ef6\u7684C\u6e90\u4ee3\u7801\u5df2\u7ecf\u88ab\u76f4\u63a5\u91cd\u7528\u3002\u6b64\u4ee3\u7801\u4f4d\u4e8e/src/from squeak/\u3002\n\u5bf9x86\u517c\u5bb9\u591a\u6838\u7cfb\u7edf\u7684\u652f\u6301\u76ee\u524d\u57fa\u4e8ePOSIXthreads\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528\u5728\u4e0d\u540c\u5904\u7406\u5668\u5185\u6838\u4e0a\u6267\u884c\u7684\u591a\u4e2a\u7ebf\u7a0b\u542f\u52a8RoarVM\u3002\u5728\u57fa\u4e8eTilera TILE64\u7684\u7cfb\u7edf\u4e0a\uff0c\u4f7f\u7528iLiblibrary\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u5904\u7406\u5668\u6838\u5fc3\u542f\u52a8\u4e00\u4e2a\u5355\u72ec\u7684\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u6267\u884c\u4e00\u4e2a\u89e3\u91ca\u5668\u5b9e\u4f8b\u3002\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u4f53\u7cfb\u7ed3\u6784\uff0cvm\u90fd\u4e3aSmalltalk\u7528\u6237\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8de8\u8d8a\u6240\u6709\u6838\u5fc3\u7684\u5355\u4e00\u5bf9\u8c61\u5806\u7684\u5047\u8c61\u3002Smalltalk\u8fdb\u7a0b\u7531\u53ef\u7528\u5904\u7406\u5668\u5185\u6838\u4e0a\u7684\u5355\u4e2a\u8c03\u5ea6\u5668\u8c03\u5ea6\uff0c\u56e0\u6b64\uff0c\u8fd9\u4e9b\u8fdb\u7a0b\u53ef\u4ee5\u5e76\u884c\u6267\u884c\u3002\u5bf9\u4e8e\u540c\u6b65\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684Smalltalk\u673a\u5236\u3002\u4fe1\u53f7\u91cf\u548c\u4e92\u65a5\u91cf\u7684\u5de5\u4f5c\u539f\u7406\u4e0e\u7ecf\u5178\u7cfb\u7edf\u76f8\u540c\u3002\u76ee\u524d\uff0cRoarVM\u4f7f\u7528\u4e00\u4e2a\u57fa\u4e8ePallas[2]\u8bbe\u8ba1\u7684\u4e2d\u592e\u8c03\u5ea6\u5668\u3002\u5b83\u7684\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u4ece\u56fe\u50cf\u4e2d\u8bbf\u95ee\uff0c\u53ea\u9700\u8981\u5bf9\u56fe\u50cf\u8fdb\u884c\u6700\u5c0f\u7684\u4fee\u6539\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4f1a\u6539\u53d8\u6267\u884c\u7684\u4e00\u822c\u6a21\u578b\u3002\nRoarVM\u7684\u4e00\u4e2a\u663e\u8457\u7279\u70b9\u662f\u4f7f\u7528\u4e86\u5bf9\u8c61\u8868\u3002\u5b83\u7684\u5f15\u5165\u662f\u4e3a\u4e86\u964d\u4f4e\u5728\u8bb8\u591a\u6838\u5fc3\u4f53\u7cfb\u7ed3\u6784\u7684\u5806\u4e4b\u95f4\u8fdb\u884c\u5bf9\u8c61\u8fc1\u79fb\u6240\u9700\u7684\u590d\u6742\u6027\u3002\n\u7248\u6743\u6240\u6709\uff08c\uff092008-2010 IBM\u516c\u53f8\u548c\u5176\u4ed6\u516c\u53f8\u3002\u7248\u6743\u6240\u6709\u3002\u6839\u636eEclipse\u516c\u5171\u8bb8\u53ef\u8bc1v1\u7684\u6761\u6b3e\uff0c\u672cRoarVM\u53ca\u5176\u9644\u5e26\u7684\u8d44\u6599\u662f\u53ef\u7528\u7684\u30020\uff0c\u53ef\u4ece\u4ee5\u4e0b\u7f51\u5740\u83b7\u5f97\uff1a\n\u76f4\u63a5\u4ece\u539f\u59cbSqueak\u6e90\u4ee3\u7801\u4e2d\u63a5\u7ba1\u7684\u6240\u6709\u90e8\u5206\u90fd\u5728\u5176\u539f\u59cb\u8bb8\u53ef\u8bc1\u4e0b\u83b7\u5f97\u8bb8\u53ef\u3002\n\u7531\u4e8eRoarVM\u57fa\u4e8e\u4e3aSqueak\u6240\u505a\u7684\u5de5\u4f5c\uff0c\u6211\u4eec\u60f3\u611f\u8c22Squeak\u793e\u533a\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u6240\u505a\u7684\u5b9d\u8d35\u5de5\u4f5c\u3002", "note_en": "RoarVM, formerly known as the Renaissance Virtual Machine (RVM) is developedas part of a IBM Research project to investigate programming paradigms andlanguages for manycore systems of the future. Specifically, this VM is meantto support manycore systems with more than 1000 cores in the future.\n The RVM was open sourced by IBM Research under the  Eclipse Public License.Please see the  open source announcement for further information.\n Today, the RoarVM supports the parallel execution of Smalltalk programs on x86compatible multicore systems and Tilera TILE64-based manycore systems. It istested with standard Squeak 4.1 closure-enabled images, and with a strippeddown version of a MVC-based Squeak 3.9 image.\n The RoarVM provides parallel execution of Smalltalk processes and thus, theprogramming model is a typical shared-memory model similar to Java with itsthreads and classical Pthreads for C/C++.\n      The RoarVM is compatible with Squeak and its forks. However, the Smalltalkimages needs a number of changes to enable it to utilize more than one coreand to interact with the VM correctly.\n    The source code of the RoarVM has been released as open source to enable theSmalltalk community to evaluate the ideas and possibly integrate them intotheir existing systems. The RoarVM provides the necessary functionality toexperiment with Smalltalk systems on multi- and manycore machines, which wewould like to encourage.\n However, we also welcome all contributions to the RoarVM itself. Either tobring it up to the speed of the existing VMs or to extend it for furtherexperiments.\n   The RoarVM is a research project and is not as optimized for performance asthe standard Squeak VM. Thus, its sequential performance is slower. This isdue to the fact that the RoarVM misses optimizations like using the GCC labelas value extension to speed up the interpreter.\n idle process does not yield when the RoarVM is run on more than one core the event processing is not adapted fully yet, thus, the idle processis busy-waiting for performance reasons\n  Graphical subsystem based on X11 in contrast to todays Squeak VM, especially the OS X version,the RoarVM uses solely X11 and does not integrate as well into the OSas Squeak does\n    by David Ungar, and Sam S. Adams, in Proceedings of the 5th Symposium onDynamic Languages, ACM (2009), p. 99-110. http://portal.acm.org/citation.cfm?id=1640134.1640149\n  Programming Environmentby Joseph Pallas, and David Ungar, in Proceedings of the ACM SIGPLAN1988 Conference on Programming Language Design and Implementation,ACM (1988), p. 268-277. http://portal.acm.org/citation.cfm?id=54017\n The RoarVM resembles the Squeak VM which is written in Smalltalk/Slang,however, it is rewritten in C++ to facilitate the development on manycorearchitectures. The C source code of for instance plugins to the Squeak VM hasbeen reused directly. This code is located in /src/from squeak/.\n The support for x86 compatible multicore systems is currently based on POSIXthreads. Thus, the RoarVM can be started with a number of threads which areexecuted on distinct processor cores. On Tilera TILE64-based systems, the iLiblibrary is used and for each processor core a separate processes is startedwhich executes an interpreter instance each. For both architectures, the VMprovides the illusion of a single object heap, spanning all of the cores, tothe Smalltalk user. Smalltalk processes are scheduled by a single scheduler onthe available processor cores, and thus, the processes can execute inparallel. For synchronization, the standard Smalltalk mechanisms areavailable. Semaphores as well as mutexes work as in classical systems.Currently, the RoarVM uses a single central scheduler which is based on thedesign of Pallas[2]. Its data structures are accessible from the image andonly require minimal modifications to the image, since the do not change thegeneral model of execution.\n A distinct feature of the RoarVM is its use of an object table. It wasintroduced to reduce the necessary complexity to enable object migrationbetween heaps on manycore architectures.\n    Copyright (c) 2008 - 2010 IBM Corporation and others.All rights reserved. This RoarVM and the accompanying materials are madeavailable under the terms of the Eclipse Public License v1.0 which accompaniesthis distribution, and is available at:\n  All parts directly taken over from the original Squeak source code arelicensed under their original licenses.\n   Since the RoarVM is based on the work which has been done for Squeak, we wouldlike to acknowledge the Squeak community as a whole for its valuable work.", "posttime": "2022-02-25 19:15:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "roarvm,manycore,squeak", "title": "RoarVM\u2013\u591a\u82af\u5431\u5431\u58f0", "title_en": "RoarVM \u2013 The Manycore SqueakVM", "transed": 1, "url": "https://github.com/smarr/RoarVM", "via": "", "real_tags": ["roarvm", "manycore", "squeak"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074952, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53d6\u6d88\u8c37\u6b4c\u641c\u7d22\u751f\u6d3b\u548c\u4e1a\u52a1\u7684\u6700\u7b80\u5355\u65b9\u6cd5\uff1a\u5f00\u6e90\u6536\u4ef6\u7bb1\u3001\u65e5\u5386\u3001\u6587\u4ef6\u3001\u8054\u7cfb\u4eba\u7b49\u7b49\u3002", "note_en": "The easiest way to de-Google your life and business: Open Source Inbox, Calendar, Files, Contacts & much more.", "posttime": "2022-02-25 19:15:28", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,source,\u751f\u6d3b", "title": "\u4e00\u4f53\u5f0f\u5f00\u6e90\u6536\u4ef6\u7bb1\u3001\u65e5\u5386\u3001\u6587\u4ef6\u3001\u8054\u7cfb\u4eba\u7b49\u7b49", "title_en": "The all-in-one Open Source Inbox, Calendar, Files, Contacts and much more", "transed": 1, "url": "https://bloom.sh/", "via": "", "real_tags": ["\u5f00\u6e90", "source", "\u751f\u6d3b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074950, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u770b\u5230\u4e86\u5f88\u591a\u5173\u4e8e\u5982\u4f55\u5f00\u59cb\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528js ipfs\u7684\u95ee\u9898\u3002\u672c\u6587\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u5168\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528js ipfs\u7684\u804a\u5929\u793a\u4f8b\u3002\u5b83\u4f7f\u7528WebRTC\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u6d4f\u89c8\u5668\u5230\u6d4f\u89c8\u5668\u7684\u8fde\u63a5\uff0c\u5e76\u4f7f\u7528\u7535\u8def\u4e2d\u7ee7\u5728\u4e0d\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u8fde\u63a5\u6d4f\u89c8\u5668\u8282\u70b9\u3002\u6d88\u606f\u4f20\u9012\u662f\u901a\u8fc7libp2p\u548c#39\u5b8c\u6210\u7684\uff1b\u9152\u5427\u3002\n\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u770b\u5230\u5b9e\u65f6\u6f14\u793a\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u3002\u5982\u679c\u4f60&#39\uff1b\u6211\u60f3\u8981\u4e00\u4efd\u672c\u5730\u526f\u672c\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u7f16\u8f91\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528IPFS\u4e0b\u8f7d\u6574\u4e2a\u76ee\u5f55\uff1a\n\u7136\u540e\u7b80\u5355\u5730\u6253\u5f00\u7d22\u5f15\u3002\u7f51\u9875\u6d4f\u89c8\u5668\u4e2d\u7684html\u548c\u4f60&#39\uff1b\u6211\u4eec\u5c06\u7acb\u5373\u5f00\u59cb\u81ea\u52a8\u8fde\u63a5\u5230\u8282\u70b9\u5e76\u5bfb\u627e\u5bf9\u7b49\u8282\u70b9\uff01\n\u4f60\u4e5f\u53ef\u4ee5\u5728GitHub\u4e0a\u6253\u5f00Discordian/browser ipfs\u804a\u5929\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\uff0c\u5b83&#39\uff1bI\u2019\u6211\u9a6c\u4e0a\u5c31\u51c6\u5907\u597d\u6d4b\u8bd5\uff01\u5982\u679c\u60a8\u60f3\u90e8\u7f72\u81ea\u5df1\u7684\u7248\u672c\uff0c\u53ea\u9700\u7f16\u8f91\u7d22\u5f15\u5373\u53ef\u3002\u5e76\u6309\u7167\u4e0b\u9762\u7684\u8bbe\u7f6e\u4fe1\u606f\u8fdb\u884c\u64cd\u4f5c\u3002\n\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684\u5e93\u662fjs ipfs\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u548cBootstrap\uff08\u53ea\u662f\u5b83\u4eec\u7684\u7f29\u5c0fCSS\uff09\u3002\u5982\u679c\u4f60\u60f3\u8981\u66f4\u65b0\u7248\u672c\u7684js ipfs\uff0c\u53ef\u4ee5\u5728\u8fd9\u91cc\u4e0b\u8f7d\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u4ee5\u4f7f\u7528\u6700\u65b0\u7248\u672c\ud83d\ude03.\n\u5728\u6d4f\u89c8\u5668\u4e2d\uff0c\u53d1\u73b0\u548c\u8fde\u63a5\u540c\u9f84\u4eba\u53ef\u80fd\u975e\u5e38\u56f0\u96be\uff0c\u5c31\u50cf\u6211\u4eec\u4e00\u6837&#39\uff1b\u4e0d\u8981\u503e\u542c\u65b0\u540c\u4e8b\u7684\u58f0\u97f3\uff0c\u6211\u4eec\u4e5f\u4e0d\u4f1a&#39\uff1b\u6211\u65e0\u6cd5\u4f7f\u7528DHT\u3002\u4e3a\u4e86\u83b7\u5f97\u5728\u6d4f\u89c8\u5668\u4e2d\u5de5\u4f5c\u7684\u6700\u4f73\u4f53\u9a8c\uff0c\u5b83&#39\uff1b\u4e86\u89e3\u5982\u4f55\u627e\u5230\u540c\u9f84\u4eba\u5e76\u4e0e\u4ed6\u4eec\u4fdd\u6301\u8054\u7cfb\u5f88\u91cd\u8981\u3002\n\u804a\u5929\u793a\u4f8b\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u4f7f\u7528WebRTC\u661f\uff0c\u5b9e\u73b0\u4e86\u6d4f\u89c8\u5668\u4e0e\u6d4f\u89c8\u5668\u7684\u76f4\u63a5\u901a\u4fe1\uff0c\u5e76\u901a\u8fc7\u7535\u8def\u7ee7\u7535\u5668\uff0c\u5728\u4e2d\u95f4\u6709\u4e00\u4e2a\u7ee7\u7535\u5668\u3002\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u5728\u5de6\u4e0a\u89d2\u8fd8\u6709\u4e00\u4e2a\u72b6\u6001\u6307\u793a\u5668\uff0c\u53ef\u4ee5\u8ba9\u4f60\u77e5\u9053\u4f60\u7684\u8fde\u63a5\u7c7b\u578b\u3002\u7eff\u8272\u610f\u5473\u7740\u4f60&#39\uff1b\u91cd\u65b0\u8fde\u63a5\u5230\u7ee7\u7535\u5668\uff0c\u5373\u4f7f\u5b83&#39\uff1b\u901a\u8fc7\u53e6\u4e00\u4e2a\u540c\u9f84\u4eba\uff1b\u9ec4\u8272\u8868\u793a\u4f60&#39\uff1b\u6211\u4eec\u53ea\u770b\u5230\u76f4\u63a5\u7684\u540c\u9f84\u4eba\uff1b\u7ea2\u8272\u8868\u793a\u4f60\u6ca1\u6709\u540c\u4f34\uff08\u81f3\u5c11\u6ca1\u6709\u4f7f\u7528\u804a\u5929\u5e94\u7528\u7a0b\u5e8f\u7684\u540c\u4f34\uff09\u3002\n\ud83c\udf1f \u4e0a\u56fe\u5c55\u793a\u4e86\u4e09\u7528\u6237\u7f51\u7edc\u7684\u6837\u5b50\u3002\u5b83&#39\uff1b\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6d4f\u89c8\u5668\u8282\u70b9\u4e5f\u53ef\u4ee5\u4e0ego IPF\u901a\u4fe1\uff0c\u56e0\u6b64BrowserC\u4e0d&#39\uff1b\u4e0d\u5fc5\u662f\u6d4f\u89c8\u5668\uff0c\u4f46\u53ef\u4ee5\u662fgo ipfs\u8282\u70b9\uff01\n\u5728\u672c\u8282\u4e4b\u540e\uff0c\u6211\u4eec&#39\uff1b\u6211\u5c06\u4ecb\u7ecdWebRTC Star\u548c\u7535\u8def\u7ee7\u7535\u5668\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u5982\u4f55\u8bbe\u7f6e\u5b83\u4eec\u3002\u7136\u800c\uff0c\u5982\u679c\u4f60&#39\uff1b\u6211\u60f3\u7528Docker\uff0cI&#39\uff1b\u6211\u51c6\u5907\u4e86\u4e00\u5f20\u4f60\u53ef\u4ee5\u4f7f\u7528\u7684\u56fe\u7247\u3002\u8fd9\u53ef\u80fd\u4e0d\u662f\u6700\u597d\u7684\u957f\u671f\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5982\u679c\u4f60\u60f3\u5feb\u901f\u5f00\u59cb\u5e76\u8fdb\u884c\u5b9e\u9a8c\uff0c\u8fd9\u5e94\u8be5\u662f\u5f88\u597d\u7684\u3002\n\u60a8\u9700\u8981\u4e00\u4e2a\u57df\u548cSSL\u624d\u80fd\u5c06\u6b64\u5de5\u5177\u5305\u4e0e\u6d4f\u89c8\u5668\u8282\u70b9\u4e00\u8d77\u4f7f\u7528\u3002\u4e0b\u9762\u6709\u4e24\u4e2a\u9009\u9879\uff1a\u4e00\u4e2a\u5c06\u8fd0\u884ccertbot\u5e76\u81ea\u52a8\u83b7\u53d6\u6240\u63d0\u4f9b\u57df\u540d\u7684\u8bc1\u4e66\u3002\u53e6\u4e00\u4e2a\u9009\u9879\u8d62\u4e86&#39\uff1b\u6211\u4e0d\u80fd\u4e3a\u4f60\u5904\u7406SSL\uff0c\u76f8\u53cd\uff0c\u4f60&#39\uff1b\u6211\u4eec\u5fc5\u987b\u5c06\u4ee3\u7406\u7aef\u53e39091\u53cd\u8f6c\u4e3a9090\uff08SSL\uff09\uff0c\u5c06\u7aef\u53e34011\u53cd\u8f6c\u4e3a4430\uff08SSL\uff09\u3002\n\u5f53\u60a8\u6267\u884c\u4efb\u4e00\u547d\u4ee4\u65f6\uff0c\u60a8\u7684IPFS\u8282\u70b9\u4e5f\u5c06\u7b2c\u4e00\u6b21\u88ab\u8bbe\u7f6e\uff0c\u4e3a\u60a8\u63d0\u4f9b\u5176\u5bf9\u7b49\u5730\u5740\u548c\u7535\u8def\u4e2d\u7ee7\u5730\u5740\u7b49\u4fe1\u606f\u3002\u6ce8\u610f\u8fd9\u4e9b\u2014\u2014\u4f60&#39\uff1bI\u2019\u6211\u60f3\u5c06\u5b83\u4eec\u7f16\u8f91\u5230\u804a\u5929\u5ba2\u6237\u7aef\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528\u81ea\u5df1\u7684\u8282\u70b9\uff08\u53c2\u89c1WebRTC Star Usage\u548cp2p circuit Usage\u4e86\u89e3\u7528\u6cd5\u793a\u4f8b\uff0c\u6216\u8005\u7f16\u8f91index.html\u5e76\u5c06my node&#39\uff1bs multiaddresses\u66f4\u6539\u4e3a\u4f60\u81ea\u5df1\u7684\uff09\u3002\n\u786e\u4fdd\u7aef\u53e380\u4e3a&#39\uff1b\u5982\u679c\u6b63\u5728\u4f7f\u7528\uff0c\u8bf7\u9075\u5faa\u4e0b\u9762\u7684\u68c0\u67e5\u8868\uff0c\u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a\ndocker run\u2014\u2014mount source=ipfs_bundle\uff0cdestination=/root-p9091:9091-p4011:4011-p9090:9090-p4430:4430-p80:80-it trdiscordian/ipfsbundle certbot\u57df\u3002\u7ec4\u4ef6\u5bf9\u8c61\u6a21\u578b\n\u5982\u679c\u60a8\u9009\u62e9\u6b64\u9009\u9879\uff0c\u5219\u5bb9\u5668\u5c06\u8d62\u5f97&#39\uff1b\u6839\u672c\u65e0\u6cd5\u5904\u7406SSL\uff0c\u800c\u60a8&#39\uff1b\u6211\u4eec\u5fc5\u987b\u5c06\u4ee3\u7406\u7aef\u53e39091\u53cd\u8f6c\u4e3a9090\uff08SSL\uff09\uff0c\u5c06\u7aef\u53e34011\u53cd\u8f6c\u4e3a4430\uff08SSL\uff09\u3002\n\u786e\u4fdd\u57df\u6b63\u786e\u5730\u6307\u5411\u60a8\u7684\u673a\u5668&#39\uff1b\u5728\u4e0a\u91cd\u65b0\u8fd0\u884c\u5bb9\u5668\uff08\u5b50\u57df\u4e5f\u53ef\u4ee5\u6b63\u5e38\u5de5\u4f5c\uff09\n\u4e00\u65e6\u4f60&#39\uff1b\u91cd\u65b0\u914d\u7f6e\u540e\uff0c\u8fd0\u884c\u5bb9\u5668\u5f88\u7b80\u5355\u3002\u786e\u4fdd\u81f3\u5c11\u8f6c\u53d1\u7aef\u53e34430\u548c9090\u3002\n\ud83c\udf89 \u73b0\u5728\uff0c\u60a8\u5e94\u8be5\u53ef\u4ee5\u5c06\u8be5\u673a\u5668\u7528\u4f5cWebRTC\u661f\u5f62\u8282\u70b9\u548cp2p\u7535\u8def\u8282\u70b9\u3002\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528WebRTC Star\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u8282\u70b9\u6765\u5e2e\u52a9\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6d4f\u89c8\u5668\u5230\u6d4f\u89c8\u5668\u8fde\u63a5\u7684\u5176\u4ed6\u8282\u70b9\u3002\u6211\u53d1\u73b0\u5f88\u5bb9\u6613\u5c06\u5176\u89c6\u4e3a\u7c7b\u4f3c\u4e8eSTUN\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\uff0c\u5982\u679c\u4f60&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u719f\u6089\u8fd9\u4e2a\u6982\u5ff5\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u6bcf\u4e2a\u8fde\u63a5\u8282\u70b9\u90fd\u5c06\u83b7\u5f97\u4e00\u4e2aWebRTC\u661f\u5f62\u591a\u5730\u5740\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\uff0c\u5176\u4ed6\u8282\u70b9\u53ef\u4ee5\u4f7f\u7528\u8be5\u5730\u5740\u76f4\u63a5\u53d1\u73b0\u5e76\u8fde\u63a5\u5230\u6d4f\u89c8\u5668\u3002\u8fd9\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u4e0e\u4f7f\u7528\u661f\u578b\u8282\u70b9\u7684\u4eba\u8fdb\u884c\u5bf9\u7b49\uff0c\u800c\u661f\u578b\u8282\u70b9\u79bb\u7ebf\uff0c\u4f60\u5c06\u4fdd\u6301\u8fde\u63a5\uff01\nipfs=\u7b49\u5f85ipfs\u3002\u521b\u5efa\uff08{repo:&#39\uff1bok&#39\uff1b+Math.random\uff08\uff09\uff0c//random\uff0c\u8fd9\u6837\u6211\u4eec\u6bcf\u6b21\u90fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u7684peerid\uff0c\u7528\u4e8e\u6d4b\u8bd5\u914d\u7f6e\uff1a{Addresses:{Swarm:[&#39\uff1b/dns4/star.thedisco.zone/tcp/9090/wss/p2p webrtc star#39\uff1b&#39\uff1b/dns6/star thedisco.zone/tcp/9090/wss/p2p webrtc star 39\uff1b}\uff0c}\uff09\uff1b\n\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4f7f\u7528\u4e86\u6211\u81ea\u5df1\u7684\u661f\u578b\u8282\u70b9\u2014\u2014\u7136\u800c\uff0c\u8fd9\u4e9b\u8282\u70b9\u8d62\u4e86&#39\uff1b\u5728\u90a3\u91cc\u4e0d\u4e00\u5b9a\u603b\u80fd\u627e\u5230\u3002\u76ee\u524d\u4e3a&#39\uff1b\u91cd\u8981\u7684\u662f\u627e\u5230\u4e00\u4e2a\u53ef\u9760\u7684\u661f\u578b\u8282\u70b9\u6216\u81ea\u5df1\u7684\u4e3b\u673a\u3002\u60a8\u53ea\u9700\u6309\u7167\u6b64\u5904\u7684\u8bf4\u660e\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u8fdb\u884c\u672c\u673a\u8bbe\u7f6e\uff0c\u5e76\u6309\u7167\u6b64\u5904\u7684\u8bf4\u660e\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u8fdb\u884cDocker\u5bb9\u5668\u7684\u6258\u7ba1\uff0c\u8be5\u5bb9\u5668\u5305\u542bNginx\uff08\u7528\u4e8eSSL\uff09\u3002\u5982\u679c\u60a8\u9009\u62e9\u672c\u673a\u8bbe\u7f6e\uff0c\u6211\u4eec\u5c06\u5728\u672c\u6587\u540e\u9762\u4ecb\u7ecdNginx\u53cd\u5411\u4ee3\u7406\u8fc7\u7a0b\u548cSSL\u8bc1\u4e66\u68c0\u7d22\u3002\n\ud83d\ude80 \u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u5e72\u51c0\u6709\u6548\u7684P2P\u901a\u4fe1\u65b9\u6cd5\uff1b\u7136\u800c\uff0c\u6709\u65f6NAT\u4f1a\u788d\u4e8b\u3002\u6211\u4eec\u4f7f\u7528p2p\u7535\u8def\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\u4f7f\u7528p2p circuit\u5bf9\u590d\u6742\u7684NAT\uff08\u6216VPN\uff0c\u6216\u5176\u4ed6\u4efb\u4f55\u4e1c\u897f\uff09\u80cc\u540e\u7684\u5bf9\u7b49\u65b9\u6765\u8bf4\u771f\u7684\u5f88\u6709\u5e2e\u52a9\u3002\u6211\u53d1\u73b0p2p\u7535\u8def\u7684\u4e2d\u7ee7\u7c7b\u4f3c\u4e8eTURN\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\uff0c\u6240\u4ee5\u5b83&#39\uff1b\u5982\u679c\u4f60&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u5f88\u719f\u6089\u4e86\u3002\n\u4e00\u65e6p2p\u7535\u8def\u7684\u6240\u6709\u670d\u52a1\u90fd\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u8fde\u63a5\u5230\u8282\u70b9\u3002\u9996\u5148\uff0c\u8981\u5728\u542f\u52a8\u65f6\u4ec5\u8fde\u63a5\u5230\u6211\u4eec\u7684\u8282\u70b9\uff1a\n\u5982\u679c\u4f60&#39\uff1b\u5982\u679c\u4f60\u5e0c\u671b\u5728\u4e0d\u590d\u5236\u793a\u4f8b\u7684\u60c5\u51b5\u4e0b\u5f00\u53d1\u81ea\u5df1\u7684\u5ba2\u6237\uff0c\u8bf7\u786e\u4fdd&#39\uff1b\u91cd\u65b0\u4e0e\u516c\u544a\u9891\u9053\u8fdb\u884c\u6c9f\u901a\uff0c\u8be6\u89c1\u5e7f\u544a\u90e8\u5206\u3002\u804a\u5929\u6f14\u793a\u4e2d\u7684\u76f8\u5173\u4ee3\u7801\u5982\u4e0b\uff08\u7b80\u5316\uff09\uff1a\nvar ipfs\uff1b//\u5b58\u50a8\u60a8\u9700\u8981\u7684IPFS\u8282\u70b9&#39\uff1b\u5728\u8fd9\u4e2a\u53d8\u91cf\u4e2d\u91cd\u65b0\u4f7f\u7528//\u901a\u8fc7pubsub\u5f02\u6b65\u51fd\u6570processannound\uff08addr\uff09{//get our peerid me=await ipfs.id\uff08\uff09\uff1bme=me.id\uff1b//\u5982\u679c\u5b83\u662f\u4ece\u6211\u4eec\u8fd9\u91cc\u53d1\u51fa\u7684\uff0c\u90a3\u4e48\u5b83\u5c31\u4e0d\u662f\u771f\u6b63\u7684\u901a\u544a\uff0c\u5982\u679c\uff08addr.from==me\uff09{return\uff1b}\u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2akeep alive\uff0c\u5982\u679c\uff08addr==&#34\uff1bkeep alive&#34\uff1b\uff09\u5c31\u6ca1\u4ec0\u4e48\u53ef\u505a\u7684\u4e86{console.log\uff08addr\uff09\uff1breturn\uff1b}peer=addr\u3002\u62c6\u5206\uff08&#34\uff1b/&#34\uff1b\uff09[ 9 ] ; \u5b89\u6170\u65e5\u5fd7\uff08&#34\uff1b\u5bf9\u7b49\uff1a&#34\uff1b+\u5bf9\u7b49\uff09\uff1b\u5b89\u6170\u65e5\u5fd7\uff08&#34\uff1bMe:&#34\uff1b+Me\uff09\uff1bif\uff08peer==me\uff09{//return\u5982\u679c\u6240\u5ba3\u5e03\u7684peer\u662fus return\uff1b}//\u83b7\u53d6\u5bf9\u7b49\u70b9\u5217\u8868=\u7b49\u5f85IPF\u3002\u4e00\u5927\u7fa4\u540c\u9f84\u4eba\uff08\uff09\uff1b\u5bf9\u4e8e\uff08\u5bf9\u7b49\u4f53\u4e2d\u7684i\uff09{//\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u8fde\u63a5\u5230\u5bf9\u7b49\u4f53\uff0c\u90a3\u4e48\u4e0d\u8981\u8d39\u5fc3\u505a//\u7535\u8def\u8fde\u63a5\uff0c\u5982\u679c\uff08\u5bf9\u7b49\u4f53[i].peer==peer\uff09{return\uff1b}//\u5728\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u5c1d\u8bd5\u8fde\u63a5\u63a7\u5236\u53f0\u3002\u65e5\u5fd7\uff08\u5730\u5740\uff09\uff1b//\u8fde\u63a5\u51e0\u4e4e\u603b\u662f\u7b2c\u4e00\u6b21\u5931\u8d25\uff0c\u4f46\u51e0\u4e4e\u603b\u662f//\u7b2c\u4e8c\u6b21\u6210\u529f\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u6837\u505a\uff1a\u5c1d\u8bd5{wait ipfs.swarm.connect\uff08addr\uff09\uff1b}catch\uff08err\uff09{console.log\uff08err\uff09\uff1bwait ipfs.swarm.connect\uff08addr\uff09\uff1b}}//\u901a\u8fc7\u4e2d\u7ee7\u7f51\u7edc\u5904\u7406\u516c\u544a\uff0c\u5e76\u53d1\u5e03\u6211\u4eec\u81ea\u5df1\u7684//keep alives\u4ee5\u4fdd\u6301\u9891\u9053\u7684\u6d3b\u529b\uff0c\u7b49\u5f85IPF\u3002pubsub\u3002\u8ba2\u9605\uff08&#34\uff1b\u516c\u544a\u7535\u8def&#34\uff1b\uff0c\u6d41\u7a0b\u516c\u544a\uff09\uff1bsetInterval\uff08\u51fd\u6570\uff08\uff09{ipfs.pubsub.publish\uff08&#34\uff1b\u516c\u544a\u7535\u8def&#34\uff1b\uff0c&#34\uff1b\u5bf9\u7b49\u6d3b\u52a8&#34\uff1b\uff09\uff1b\uff09\uff0c15000 ) ;\n\u4e0e\u661f\u5f62\u8282\u70b9\u4e00\u6837\uff0c\u5b83&#39\uff1bWe\u2019\u91cd\u8981\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u81ea\u5df1\u7ba1\u7406\u81ea\u5df1\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u7684\u4e1c\u897f\u968f\u65f6\u90fd\u53ef\u80fd\u79bb\u7ebf\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u60a8&#39\uff1b\u6211\u9700\u8981\u5728\u6258\u7ba1\u81ea\u5df1\u7684go ipfs\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u8282\u70b9\u7684\u670d\u52a1\u5668\u4e0a\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u4f60&#39\uff1b\u6211\u8fd8\u9700\u8981\u4e00\u4e2a\u6b63\u5e38\u5de5\u4f5c\u7684Nginx\u5b89\u88c5\u7a0b\u5e8f\uff0c\u5b83\u5c06\u7528\u4e8eSSL\uff0c\u8fd9\u662f\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8981\u6c42\u3002\n\u9996\u5148\u914d\u7f6eGo\u8282\u70b9\uff0c\u542f\u7528WebSocket\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u652f\u6301\uff0c\u5e76\u5c06\u5176\u6307\u5b9a\u4e3a\u4e2d\u7ee7\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7f16\u8f91~/\u4ece\u6d4f\u89c8\u5668\u4e0e\u5b83\u901a\u4fe1\u3002ipfs/config\u4ee5\u6dfb\u52a0\u4ee5\u4e0b\u8bbe\u7f6e\uff1a\n{&#34\uff1b\u5730\u5740&#34\uff1b\uff1a{&#34\uff1bSwarm&#34\uff1b\uff1a[&#34\uff1b/ip4/0.0.0/tcp/4011/ws&#34\uff1b\uff0c&#34\uff1b/ip6/\uff1a\uff1a/tcp/4011/ws&#34\uff1b]&#34;Swarm&#34\uff1b\uff1a{&#34\uff1bEnableRelayHop&#34\uff1b\uff1atrue}\n\u4ee5\u6b63\u5e38\u65b9\u5f0f\u91cd\u65b0\u542f\u52a8go ipfs\u8282\u70b9\uff08\u53ef\u80fd\u662fsystemctl\u2014\u2014\u7528\u6237\u91cd\u65b0\u542f\u52a8ipfs\uff09\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff01\u6211\u4eec&#39\uff1b\u6211\u4eec\u5df2\u7ecf\u542f\u7528\u4e86\u5177\u6709\u4e2d\u7ee7\u652f\u6301\u7684\u5e38\u89c4WebSocket\uff0c\u4f46\u662f\u6211\u4eec\u9700\u8981\u5b89\u5168\u7684WebSocket\uff08\u5728\u4e0b\u9762\u7684SSL\u90e8\u5206\u4e2d\u6982\u8ff0\uff09\u2014\u2014\u5426\u5219\u6d4f\u89c8\u5668\u5c06\u8d62\u5f97&#39\uff1b\u6211\u65e0\u6cd5\u4e0e\u6211\u4eec\u8054\u7cfb\u3002\n\u4f7f\u7528p2p\u7535\u8def\u53ef\u80fd\u6709\u70b9\u68d8\u624b\u3002\u4e00\u65e6\u6211\u4eec\u4ece\u6d4f\u89c8\u5668\u8fde\u63a5\u5230\u4e2d\u7ee7\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u4e0d\u662f\u5728\u5ba3\u4f20\u6211\u4eec&#39\uff1b\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u8054\u7cfb\u5230\u4f60\uff01\u4e3a\u6b64\uff0c\u6211&#39\uff1b\u6211\u521b\u5efa\u4e86\u4e00\u4e2aPython\u811a\u672c\uff0c\u5b83\u4e0ego ipfs\u4e00\u8d77\u8fd0\u884c\uff0c\u5e76\u7528\u4e00\u4e2ap2p\u56de\u8def\u591a\u5730\u5740\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u5728PubSub\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u4e0a\u516c\u5e03\u5b83\u9047\u5230\u7684\u6d4f\u89c8\u5668js ipfs\u5bf9\u7b49\u70b9\u3002\n\u60a8\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230Python\u811a\u672c\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\u3002\u5b83\u53ef\u4ee5\u7528\u4e00\u4e2a\u7b80\u5355\u7684python ipfs_peeradvertiser\u8fd0\u884c\u3002\u76ae\u8036\u3002\u4f46\u662f\uff0c\u8bf7\u786e\u4fdd\u9996\u5148\u4f7f\u7528\u81ea\u5df1\u7684\u8282\u70b9\u7f16\u8f91\u56de\u8def&#39\uff1b\u8fd9\u662f\u4f60\u7684\u4fe1\u606f\uff0c\u5426\u5219\u4f60\u8d62\u4e86&#39\uff1b\u6ca1\u6709\u6b63\u786e\u5730\u5ba3\u5e03\u540c\u9f84\u4eba\uff0c\u4ed6\u4eec\u8d62\u4e86&#39\uff1b\u6211\u4e0d\u77e5\u9053\u5982\u4f55\u4f7f\u7528\u4e2d\u7ee7\u8fde\u63a5\u5230\u5176\u4ed6\u540c\u9f84\u4eba\u3002\n\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u68c0\u7d22\u81ea\u5df1\u7684\u7535\u8def\u4fe1\u606f\u3002\u53ea\u9700\u5728go ipfs\u8282\u70b9\u4e0a\u8fd0\u884cipfs id\u5373\u53ef\u83b7\u5f97PeerID\uff0c\u7136\u540e\u6309\u5982\u4e0b\u65b9\u5f0f\u5f62\u6210\u56de\u8defURL\uff1a\n\u4f60\u5e94\u8be5\u5728\u8fd9\u91cc\u770b\u5230\uff0c\u4f60\u53ea\u9700\u586b\u5199\u4f60\u83b7\u5f97SSL\u8bc1\u4e66\u7684\u57df\u540d\uff0c\u4ee5\u53ca\u4f60\u7684\u8282\u70b9&#39\uff1b\u8fd9\u662f\u76ae\u5229\u5fb7\u3002\u5bf9\u4e8e\u811a\u672c\uff0c\u524d\u5bfc\u659c\u6760\u548c\u5c3e\u968f\u659c\u6760\u4e5f\u662f\u5fc5\u9700\u7684\u3002\n\u786e\u4fdd\u6307\u5b9aDNS6\u6216DNS4\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e&#39\uff1b\u6b63\u5728\u91cd\u65b0\u5f62\u6210IPv6\u6216IPv4\u5730\u5740\u3002\u5b83&#39\uff1b\u786e\u4fdd\u4f7f\u7528DNS\u5f88\u91cd\u8981\uff0c\u5426\u5219\u6d4f\u89c8\u5668\u8282\u70b9\u53ef\u80fd\u4f1a\u8d62#39\uff1b\u6211\u65e0\u6cd5\u8fde\u63a5\u3002\u8fd8\u8981\u6ce8\u610f\u7aef\u53e34430\uff1b\u5982\u679c\u4f60\u7528\u4e86\u53e6\u4e00\u4e2a\uff0c\u4f60&#39\uff1b\u6211\u9700\u8981\u5177\u4f53\u8bf4\u660e\u4e00\u4e0b\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec&#39\uff1bve\u8bbe\u7f6e\u4e0d\u5e26SSL\u7684WebRTC Star\u548cp2p\u7535\u8def\uff08\u9664\u975e\u4f7f\u7528WebRTC Star docker\u8bbe\u7f6e\uff09\u3002\u5982\u679c\u4f60\u60f3\u5728\u4e92\u8054\u7f51\u4e0a\u901a\u8fc7\u6d4f\u89c8\u5668\u4f7f\u7528\u4f60\u7684\u8282\u70b9\uff0c\u5b83\u4eec\u9700\u8981\u652f\u6301SSL\u3002\u5982\u679c\u4f60&#39\uff1b\u91cd\u65b0\u4f7f\u7528\u9ed8\u8ba4\u8bbe\u7f6e\u5f53\u524dWebRTC Star\u5e94\u5728\u7aef\u53e39090\uff08\u65e0SSL\uff09\u4e0a\u8fd0\u884c\uff0cp2p\u7535\u8def\u5c06\u5728\u7aef\u53e34011\uff08\u65e0SSL\uff09\u4e0a\u8fd0\u884c\u3002\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u628a\u5b83\u4eec\u5206\u522b\u653e\u5728\u7aef\u53e39091\uff08SSL\uff09\u548c\u7aef\u53e34430\uff08SSL\uff09\u4e0a\u3002\n\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u4ece\u4e0b\u9762\u7684\u6a21\u677f\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\u3002\u786e\u4fdd\u4f60&#39\uff1b\u91cd\u65b0\u7f16\u8f91\u50cfYOURDOMAIN\u8fd9\u6837\u7684\u6761\u76ee\u3002COM\u4e0e\u60a8\u8ba1\u5212\u7528\u4e8e\u670d\u52a1\u7684\u5b8c\u6574\u57df\uff08\u5305\u62ec\u5b50\u57df\uff09\u8fdb\u884c\u901a\u4fe1\u3002\nmap$http#u upgrade$connection#u upgrade{default upgrade\uff1b&#39\uff1b&#39\uff1bclose\uff1b}\u4e0a\u6e38ipfs{server127.0.0.1:4011\uff1b}\u670d\u52a1\u5668{server_name YOURDOMAIN.COM\uff1blisten 4430 ssl\uff1bssl_certificate/etc/letsencrypt/live/YOURDOMAIN.COM/fullchain.pem\uff1bssl_certificate_key/etc/letsencrypt/live/YOURDOMAIN.COM/privkey.pem\uff1b\u4f4d\u7f6e/{proxy_set_header X-Forwarded-For$proxy_add_X_Forwarded_For\uff1bproxy_pass http://ipfs\uff1bproxy_http_version 1.1\uff1bproxy_set_header Upgrade$http_Upgrade\uff1bproxy_set_header Connection$Connection_Upgrade\uff1bproxy_set_header Host$Host\uff1b}\nmap$http#u upgrade$connection#u upgrade{default upgrade\uff1b&#39\uff1b&#39\uff1bclose\uff1b}\u4e0a\u6e38\u661f\u578b{Server127.0.0.1:9090\uff1b}\u670d\u52a1\u5668{server_name YOURDOMAIN.COM\uff1blisten 9091 ssl\uff1bssl_certificate/etc/letsencrypt/live/YOURDOMAIN.COM/fullchain.pem\uff1bssl_certificate_key/etc/letsencrypt/live/YOURDOMAIN.COM/privkey.pem\uff1b\u4f4d\u7f6e/{proxy_set_header X-Forwarded-For$proxy_add_X_Forwarded_For\uff1bproxy_pass http://star\uff1bproxy_http_version 1.1\uff1bproxy_set_header Upgrade$http_Upgrade\uff1bproxy_set_header Connection$Connection_Upgrade\uff1bproxy_set_header Host$Host\uff1b}\n\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u6211\u4eec&#39\uff1b\u91cd\u65b0\u63a5\u53d7\u7aef\u53e34430\u4e0a\u7684SSL-\u8fd9\u662f\u6211\u4eec\u7684&#34\uff1bwss\u7aef\u53e3&#34\uff1b\uff08WebSocket\u5b89\u5168\uff09-\u7136\u540e\u57284011\u672c\u5730\u5c06\u5176\u4f20\u9012\u5230\u4e0d\u5b89\u5168\u7684\u7aef\u53e3-\u8fd9\u662f\u6211\u4eec\u7684&#34\uff1bws-port&#34\uff1b\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u60f3\u4ece\u6d4f\u89c8\u5668\u8fde\u63a5\u5230\u8fd9\u4e2a\u8282\u70b9\uff0c\u6211\u4eec&#39\uff1bd\u4f7f\u7528\u7aef\u53e34430\u3002\nsudo systemctl stop nginx sudo certbot-d YOURDOMAIN\u3002COM--\u72ec\u7acb#\u7f16\u8f91\u4f60\u7684\u57df\u540d\u3002COM\u5230\u60a8\u60f3\u8981\u8bc1\u4e66\u7684\u57df\uff0c\u5982\u679c\u9700\u8981\u591a\u4e2a\uff0c\u8bf7\u586b\u5199\u591a\u4e2a\u6216\u591a\u6b21\u8fd0\u884c\u547d\u4ee4sudo ln-s/etc/nginx/sites available/ipfs/etc/nginx/sites enabled/ipfs sudo ln-s/etc/nginx/sites available/star/etc/nginx/sites enabled/star sudo systemctl start nginx\n\u5537\uff01\u65e2\u7136\u4f60\u8d70\u4e86\u8fd9\u4e48\u8fdc\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3&#34\uff1b\u6c9f\u901a\u662f\u4ec0\u4e48\u6837\u7684&#34; \u5e78\u8fd0\u7684\u662f\uff0c\u7b54\u6848\u662f&#39\uff1b\u4e0e\u5bfb\u627e\u540c\u9f84\u4eba\u76f8\u6bd4\uff0c\u8fd9\u5f88\u5bb9\u6613\uff0c\u53ea\u6709\u4e00\u4e9b\u5c0f\u7f3a\u9677\u3002\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u6211\u4eec&#39\uff1b\u5728\u804a\u5929\u793a\u4f8b\u4e2d\u91cd\u65b0\u4f7f\u7528PubSub\uff08\u6253\u5f00\u65b0\u7a97\u53e3\uff09\uff0c\u4ee5\u53ca\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53d1\u73b0\u4e86\u54ea\u4e9b\u9677\u9631\u3002\n\u4f7f\u7528PubSub\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u53ef\u4ee5\u8ba2\u9605\u4e3b\u9898\u5e76\u68c0\u7d22\u53d1\u5e03\u5230\u8fd9\u4e9b\u4e3b\u9898\u7684\u4efb\u4f55\u6d88\u606f\u3002\u5728js ipfs\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u7f6e\u4e00\u4e2a\u56de\u8c03\u51fd\u6570\uff0c\u5728\u6536\u5230\u6d88\u606f\u65f6\u8c03\u7528\u8be5\u51fd\u6570\uff1a\n\u8fd9\u5b9e\u9645\u4e0a\u5c31\u662f\u804a\u5929\u6f14\u793a\u6240\u505a\u7684\u3002\u5b83&#39\uff1bs\u8ba2\u9605\u4e00\u4e2a\u5168\u7403\u4e3b\u9898\uff08\u540d\u4e3a&#34\uff1bdiscochat global&#34\uff1b\uff09\uff0c\u7b80\u5355\u5730\u4f20\u9012\u4eba\u4eec\u5728PubSub\u4e0a\u952e\u5165\u7684\u4fe1\u606f\u3002\n\u6240\u4ee5\u8ba9\u6211\u4eec&#39\uff1b\u6bd4\u5982\u8bf4\u4f60&#39\uff1b\u6211\u4e00\u5207\u90fd\u505a\u5bf9\u4e86\u3002\u4f60&#39\uff1b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528WebRTC Star\u548cp2p circuit\u627e\u5230\u540c\u9f84\u4eba\u2014\u2014\u592a\u68d2\u4e86\uff01\u7136\u800c\uff0c\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u4f60\u7684\u8fde\u63a5\u8fc7\u671f\u4e86\uff0c\u4f60&#39\uff1b\u6211\u4eec\u65e0\u6cd5\u6062\u590d\u5b83\u4eec\u3002\u6211&#39\uff1b\u6211\u4e0d\u5b8c\u5168\u786e\u5b9a\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8fd9\u79cd\u884c\u4e3a\uff08\u53ef\u80fd\u662f\u4e00\u4e9b\u6d4f\u89c8\u5668\u7b56\u7565\uff09\uff1b\u7136\u800c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c3d\u6700\u5927\u52aa\u529b\u7f13\u89e3\u8fd9\u4e9b\u95ee\u9898\uff01\n\u6211\u4eec\u901a\u8fc7\u51e0\u79cd\u65b9\u5f0f\u4e0e\u540c\u9f84\u4eba\u4fdd\u6301\u8054\u7cfb\u3002\u7b2c\u4e00\u79cd\u65b9\u5f0f\u66f4\u76f4\u63a5\uff1a\u8ba2\u9605\u5e76\u53d1\u9001&#34\uff1b\u4fdd\u6301\u6d3b\u529b&#34\uff1b\u6bcf4\u79d2\u901a\u8fc7discochat keepalive\u53d1\u5e03\u4e00\u6b21\u516c\u544a\uff1a\n\u8fd9\u5c06\u6709\u52a9\u4e8e\u786e\u4fdd\u6211\u4eec\u4f18\u5148\u8003\u8651\u5e0c\u671b\u804a\u5929\u7684\u540c\u9f84\u4eba\u3002\u6b64\u5916\uff0c\u6211\u4eec\u6bcf15\u79d2\u62a5\u544a\u4e00\u6b21\u7535\u8def\uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u4e0e\u7535\u8def\u7ee7\u7535\u5668\u4fdd\u6301\u8fde\u63a5\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u8fde\u63a5\u5230NAT\u540e\u9762\u7684\u5bf9\u7b49\u65b9\u3002\u90a3&#39\uff1b\u4ed6\u662f\u8fd9\u6837\u5b8c\u6210\u7684\uff1a\n//\u901a\u8fc7\u4e2d\u7ee7\u7f51\u7edc\u5904\u7406\u516c\u544a\uff0c\u5e76\u53d1\u5e03\u6211\u4eec\u81ea\u5df1\u7684keep alives\uff0c\u4ee5\u4fdd\u6301\u9891\u9053\u7684\u6d3b\u529b\uff0c\u7b49\u5f85IPF\u3002pubsub\u3002\u8ba2\u9605\uff08&#34\uff1b\u516c\u544a\u7535\u8def&#34\uff1b\uff0c\u6d41\u7a0b\u516c\u544a\uff09\uff1bsetInterval\uff08\u51fd\u6570\uff08\uff09{ipfs.pubsub.publish\uff08&#34\uff1b\u516c\u544a\u7535\u8def&#34\uff1b\uff0c&#34\uff1b\u5bf9\u7b49\u6d3b\u52a8&#34\uff1b\uff09\uff1b\uff09\uff0c15000 ) ;\n\u7535\u8def\u7ee7\u7535\u5668\u4e0a\u7684Python\u811a\u672c\u5c06\u6bcf4\u79d2\u62a5\u544a\u4e00\u6b21keepalive\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230\u6211\u4eec&#39\uff1b\u91cd\u65b0\u62a5\u544a&#34\uff1b\u6d3b\u7740\u7684\u540c\u4f34&#34\uff1b\u800c\u4e0d\u662f&#34\uff1b\u4fdd\u6301\u6d3b\u529b&#34\uff1b\uff1b\u8fd9\u662f\u4e3a\u4e86\u5c06\u5bf9\u7b49\u8bf7\u6c42\u4e0e\u4e2d\u7ee7\u8bf7\u6c42\u5206\u5f00\uff0c\u4ee5\u4fbf\u5728\u6211\u4eec\u4e0d\u518d\u770b\u5230\u4e2d\u7ee7\u65f6\u66f4\u5bb9\u6613\u5224\u65ad\u3002\n\u9664\u4e86ProcessAnnound\u7684\u7b80\u5316\u7248\u672c\u5916\uff0c\u5728\u771f\u5b9e\u7248\u672c\u4e2d\uff0c\u8fd8\u6709\u4e00\u4e9b\u7528\u4e8e\u8ddf\u8e2akeep alive\u548cpeer alive\u7684\u53d8\u91cf\u3002\u5b83\u4eec\u5206\u522b\u662flastAlive\u548clastPeer\u3002\u6211\u4eec\u751a\u81f3\u901a\u8fc7lastBootstrap\u8ddf\u8e2a\u4e0a\u6b21\u5f15\u5bfc\u7684\u65f6\u95f4\u3002\u4f7f\u7528\u6240\u6709\u8fd9\u4e9b\uff0c\u6211\u4eec\u53ef\u4ee5\u5728&#39\uff1b\u6211\u4eec\u53ea\u8fde\u63a5\u5230\u5bf9\u7b49\u70b9\uff08\u901a\u8fc7lastPeer\u8ddf\u8e2a\uff09\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u8fde\u63a5&#39\uff1b\u572835\u79d2\u5185\u6ca1\u6709\u770b\u5230\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\uff08\u6211\u4eec\u572860\u79d2\u5185\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u5f15\u5bfc\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u91cd\u65b0\u8fde\u63a5\u5f15\u5bfc\u7ee7\u7535\u5668\uff08\u5e76\u663e\u793a\u7ea2\u8272\u72b6\u6001\uff09\u3002\u8fd9\u662f\u8fd9\u6837\u5b8c\u6210\u7684\uff1a\nconst bootstraps=[&#39\uff1b/dns6/ipfs.thedisco.zone/tcp/4430/wss/p2p/12d3koowchhfgdb9gj1gbhghakcur99ocymmevs4eucey67nt&#39\uff1b&#39\uff1b/dns4/ipfs.thedisco.zone/tcp/4430/wss/p2p/12d3koowchhfgdb9gy1gbhghakcur99ocymmevs4eucey67nt&#39\uff1b]\uff1bvar lastAlive=0\uff1b//\u6211\u4eec\u4ece\u7ee7\u7535\u5668var lastPeer=0\u770b\u5230\u7684\u6700\u540e\u4e00\u4e2a\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\uff1b//\u4e0a\u6b21\u6211\u4eec\u4ece\u53e6\u4e00\u4e2a\u5bf9\u7b49\u670d\u52a1\u5668\u4e0a\u770b\u5230\u7684\u4fdd\u6301\u6d3b\u52a8var lastBootstrap=0\uff1b//\u7528\u4e8e\u8ddf\u8e2a\u4e0a\u6b21\u5c1d\u8bd5\u5f15\u5bfc\u65f6\uff08\u53ef\u80fd\u91cd\u65b0\u8fde\u63a5\u5230\u7ee7\u7535\u5668\uff09//\u5982\u679c\u91cd\u65b0\u8fde\u63a5\u4e3a\u771f\uff0c\u5219\u4e3a&#39\uff1bll\u9996\u5148\u5c1d\u8bd5\u65ad\u5f00\u4e0e\u5f15\u5bfc\u8282\u70b9\u5f02\u6b65\u51fd\u6570dobootstrap\uff08reconnect\uff09{now=new\uff08\uff09.getTime\uff08\uff09\uff1bif\uff08now-lastBootstrap&lt\uff1b60000\uff09{//don&#39\uff1b\u5982\u679c\u6211\u4eec\u5728\u6700\u540e60\u79d2\u5185\u5c1d\u8bd5\uff0c\u8bf7\u4e0d\u8981\u518d\u6b21\u5c1d\u8bd5\u5f15\u5bfc\u8fd4\u56de\uff1b}lastBootstrap=now\uff1b\u5bf9\u4e8e\uff08\u5f15\u5bfc\u4e2d\u7684i\uff09{if\uff08\u91cd\u65b0\u8fde\u63a5\uff09{try{wait ipfs.swarm.disconnect\uff08\u5f15\u5bfc[i]\uff09\uff1b}catch\uff08e\uff09{console.log\uff08e\uff09\uff1b}else{wait ipfs.bootstrap.add\uff08bootstraps[i]\uff09\uff1b}\u7b49\u5f85ipfs\u3002\u4e00\u5927\u7fa4\u8fde\u63a5\uff08\u5f15\u5bfc[i]\uff09\uff1b}}//\u68c0\u67e5\u6211\u4eec\u662f\u5426&#39\uff1bre\u4ecd\u7136\u8fde\u63a5\u5230\u7535\u8def\u4e2d\u7ee7\u51fd\u6570checkalive\uff08\uff09{now=new\uff08\uff09.getTime\uff08\uff09\uff1bif\uff08now-lastAlive&gt\uff1b=35000\uff09{if\uff08now-lastPeer&gt\uff1b=35000\uff09{document.getElementById\uff08&#34\uff1b\u72b6\u6001\u7403&#34\uff1b\uff09\u3002\u98ce\u683c\u989c\u8272=&#34\uff1b\u7ea2\u8272&#34\uff1b\uff1b}else{document.getElementById\uff08&#34\uff1b\u72b6\u6001\u7403&#34\uff1b\uff09\u3002\u98ce\u683c\u989c\u8272=&#34\uff1b\u9ec4\u8272&#34\uff1b\uff1b}dobootstrap\uff08\u6b63\u786e\uff09\uff1b//\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5c1d\u8bd5\u91cd\u65b0\u8fde\u63a5}else{document.getElementById\uff08&#34\uff1b\u72b6\u6001\u7403&#34\uff1b\uff09\u3002\u98ce\u683c\u989c\u8272=&#34\uff1b\u9178\u6a59\u8bbe\u7f6e\u95f4\u9694\uff08checkalive\uff0c1000\uff09\uff1b\n\ud83c\udf1f \u4ee5\u4e0a\u5185\u5bb9\u5e94\u4e0e\u5b8c\u6574\u7248\u672c\u7684ProcessAnnound\u4e00\u8d77\u4f7f\u7528\uff0c\u56e0\u4e3a\u5b83\u4f9d\u8d56\u4e8elastAlive\u548clastPeer\uff0c\u8fd9\u4e24\u4e2a\u7248\u672c\u4e0d\u662f&#39\uff1bt\u5728\u7b80\u5316\u7248\u672c\u4e2d\u66f4\u65b0\u3002\n\u6211\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u80fd\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f\uff0c\u8ba9\u6211\u4eec\u5f00\u59cb\u884c\u52a8\u3002\u5982\u679c\u4f60\u6210\u529f\u5730\u9075\u5faa\u4e86\u6574\u4e2a\u6307\u5357\uff0c\u4f60\u73b0\u5728\u5c31\u53ef\u4ee5\u90e8\u7f72\u5b8c\u5168\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u5f3a\u5927IPFS\u5e94\u7528\u7a0b\u5e8f\uff0c\u5e76\u5c3d\u53ef\u80fd\u5229\u7528\u5206\u6563\u7684p2p\uff01\u6211&#39\uff1b\u6211\u9009\u62e9\u4e86\u4e00\u4e9b\u6709\u7528\u7684\u8d44\u6e90\uff0c\u5e76\u5728\u4e0b\u9762\u5206\u4eab\u5b83\u4eec\uff0c\u4ee5\u4f9b\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a", "note_en": "We see a lot of questions about how to get started with using  js-ipfs in the browser. This post demonstrates a minimal chat example in  js-ipfs entirely in the browser. It uses WebRTC to achieve browser-to-browser connectivity where possible, and a circuit relay to connect browser nodes where not. Message passing is done with libp2p&#39;s pubsub.\n    You can see the live demo  here       (opens new window). If you&#39;d like a local copy you can edit yourself, you can download the whole directory using IPFS:\n   Then simply open  index.html in your web browser and you&#39;ll immediately begin automatically connecting to nodes and looking for peers!\n  You can also fork  TheDiscordian/browser-ipfs-chat       (opens new window) on GitHub, and it&#39;ll be ready to test right away! If you want to deploy your own version, simply edit  index.html and follow the setup information below.\n  The libraries used in this example are   js-ipfs       (opens new window) and Bootstrap (just their minified CSS). If you want a newer version of  js-ipfs, feel free to download  this one here       (opens new window) to use the latest version available \ud83d\ude03.\n          In a browser, discovering and connecting to peers can be very hard, as we can&#39;t listen for new peers and we don&#39;t have access to the DHT. In order to have the best experience working in a browser, it&#39;s important to understand how to both find peers and stay connected with them.\n  The chat example achieves this in two ways. Using WebRTC-Star, we achieve direct browser-to-browser communication, and with a circuit relay, we have a relay in the middle. The chat application also has a status indicator in the top left to let you know what kind of connection you have. Green means you&#39;re connected to the relay, even if it&#39;s via another peer; yellow means you&#39;re only seeing direct peers; and red means you have no peers (at least none using the chat application).\n    \ud83c\udf1f The diagram above demonstrates what a three-user network can look like. It&#39;s worth noting that the browser nodes can communicate with  go-ipfs as well, so BrowserC doesn&#39;t have to be a browser at all, but instead could be a  go-ipfs node!\n      After this section we&#39;ll go over what WebRTC-Star and circuit relay do, and how to set them up. However, if you&#39;d like to quickly roll your own kit using Docker, I&#39;ve prepared an image you can use. It might not be the best long-term solution, but it should be great if you want to quickly get rolling and experiment.\n         You need a domain and SSL to use this kit with browser nodes. There are two options below: One will run certbot and automatically grab a certificate for the provided domain name. The other option won&#39;t handle SSL for you, and instead you&#39;ll have to reverse proxy port 9091 to 9090 (SSL), and port 4011 to 4430 (SSL).\n  When you execute either commands, your IPFS node will also be set up for the first time giving you information such as its  PeerID and circuit relay addresses. Take note of these \u2014 you&#39;ll want to edit them into the chat client so you can use your own node (see  WebRTC-Star Usage and  p2p-circuit Usage for usage examples, or edit  index.html and change my node&#39;s multiaddresses out for your own).\n    Ensure port 80 isn&#39;t being used, follow the checklist below, and then run the following command:\n  docker run --mount  source =ipfs_bundle,destination =/root -p  9091:9091 -p  4011:4011 -p  9090:9090 -p  4430:4430 -p  80:80 -it trdiscordian/ipfsbundle certbot DOMAIN.COM\n   If you do this option, the container won&#39;t handle SSL at all, and you&#39;ll have to reverse proxy port 9091 to 9090 (SSL), and port 4011 to 4430 (SSL).\n     Ensure the domain is correctly pointing to the machine you&#39;re running the container on (subdomains work fine too)\n    Once you&#39;re configured, running the container is simple. Ensure that, at minimum, ports 4430 and 9090 are forwarded.\n   \ud83c\udf89 You should now be able to use this machine as both a WebRTC-Star node and a p2p-circuit node.\n    We can use  WebRTC-Star       (opens new window) nodes to help discover other peers we can connect with directly browser-to-browser. I find it easy to think of this as similar to  STUN       (opens new window), if you&#39;re already familiar with that concept. Effectively, each connecting node will be given a WebRTC-Star  multiaddress       (opens new window) that other nodes can use to discover and connect to your browser directly. This means that if you peer with someone using the star node, and the star node goes offline, you remain connected!\n      ipfs  =  await Ipfs . create ( { repo :  &#39;ok&#39;  + Math . random ( ) ,  // random so we get a new peerid every time, useful for testing config :  { Addresses :  { Swarm :  [  &#39;/dns4/star.thedisco.zone/tcp/9090/wss/p2p-webrtc-star&#39; ,  &#39;/dns6/star.thedisco.zone/tcp/9090/wss/p2p-webrtc-star&#39;  ]  } , } } ) ;\n   Please note that this example uses my own star nodes \u2014 however, those won&#39;t necessarily always be accessible there. Currently it&#39;s important to either find a reliable star node or host your own. You can host your own quite simply by following the instructions  here       (opens new window) for a native setup and  here       (opens new window) for a Docker container which includes Nginx (for SSL). If you opt for the native setup, we cover the Nginx reverse proxy process and SSL cert retrieval later in this post.\n  \ud83d\ude80 This is a very clean and effective method of P2P communications; however, sometimes NATs get in the way. We use   p2p-circuit       (opens new window) to get around that.\n    Using  p2p-circuit is really helpful for peers behind tricky NATs (or a VPN, or anything really). I find the relaying of  p2p-circuit to be similar to  TURN       (opens new window), so it&#39;s easy to think of it that way if you&#39;re already familiar with it.\n    Once all the services for  p2p-circuit are put together, connecting to the node can be achieved in a few different ways. First, to connect on startup to  only our node(s):\n      If you&#39;re looking to do your own client without copying the example, ensure you&#39;re also communicating with the announce channel, which is described under  Advertising. The relevant code in the chat demo is this (simplified):\n  var ipfs ;  // store the IPFS node you&#39;re using in this variable // processes a circuit-relay announce over pubsub async  function  processAnnounce ( addr )  {  // get our peerid me  =  await ipfs . id ( ) ; me  = me .id ;  // not really an announcement if it&#39;s from us  if  (addr .from  == me )  {  return ;  }  // if we got a keep-alive, nothing to do  if  (addr  ==  &#34;keep-alive&#34; )  { console . log (addr ) ;  return ;  } peer  = addr . split ( &#34;/&#34; ) [ 9 ] ; console . log ( &#34;Peer: &#34;  + peer ) ; console . log ( &#34;Me: &#34;  + me ) ;  if  (peer  == me )  {  // return if the peer being announced is us  return ;  }  // get a list of peers peers  =  await ipfs .swarm . peers ( ) ;  for  (i  in peers )  {  // if we&#39;re already connected to the peer, don&#39;t bother doing a  // circuit connection  if  (peers [i ] .peer  == peer )  {  return ;  }  }  // log the address to console as we&#39;re about to attempt a connection console . log (addr ) ;  // connection almost always fails the first time, but almost always  // succeeds the second time, so we do this:  try  {  await ipfs .swarm . connect (addr ) ;  }  catch (err )  { console . log (err ) ;  await ipfs .swarm . connect (addr ) ;  } } // process announcements over the relay network, and publish our own // keep-alives to keep the channel alive await ipfs .pubsub . subscribe ( &#34;announce-circuit&#34; , processAnnounce ) ; setInterval ( function ( ) {ipfs .pubsub . publish ( &#34;announce-circuit&#34; ,  &#34;peer-alive&#34; ) ; } ,  15000 ) ;\n   Like the star nodes, it&#39;ll be important to host your own things as the ones in this post could go offline at any moment.\n  For the purposes of this example, you&#39;ll need to do a few things on a server hosting your own  go-ipfs       (opens new window) node. You&#39;ll also need a working Nginx install setup, which will be used for SSL, which is a requirement for browsers.\n  First configure the Go node, enabling  WebSocket       (opens new window) support, and designate it as a relay so we can communicate with it from a browser by editing  ~/.ipfs/config to add the following settings:\n  {  &#34;Addresses&#34; :  {  &#34;Swarm&#34;  :  [  &#34;/ip4/0.0.0.0/tcp/4011/ws&#34; ,  &#34;/ip6/::/tcp/4011/ws&#34;  ]  } ,  &#34;Swarm&#34; :  {  &#34;EnableRelayHop&#34; :  true  } }\n Restart your  go-ipfs node however you normally do (possibly  systemctl --user restart ipfs), and we&#39;re mostly set up! We&#39;ve enabled regular WebSockets with relaying support, however we need secure WebSockets (outlined in the SSL section below) \u2014 otherwise browsers won&#39;t be able to connect to us.\n    Using  p2p-circuit can be a bit tricky. Once we connect to the relay from a browser, we&#39;re not advertising that we&#39;re able to be reached through it! For this purpose, I&#39;ve created a Python script that runs alongside  go-ipfs and advertises the browser  js-ipfs peers it encounters over  PubSub       (opens new window) with a  p2p-circuit  multiaddress       (opens new window).\n  You can find the Python script  here       (opens new window). It can be run with a simple  python ipfs_peeradvertiser.py. However, ensure you first edit  CIRCUIT with your own node&#39;s information, or you won&#39;t announce the peers correctly, and they won&#39;t know how to use your relay to connect to other peers.\n  You can retrieve your own circuit info quite easily. Simply run  ipfs id on your  go-ipfs node to get your PeerID, then form the circuit URL like so:\n   You should see here where you simply fill out your domain name you got the SSL cert for, as well as your node&#39;s PeerID. For the script, the leading and trailing slash are required, too.\n    Ensure you specify DNS6 or DNS4, depending on if you&#39;re forming an IPv6 or IPv4 address.  It&#39;s important to ensure you use DNS, otherwise browser nodes likely won&#39;t be able to connect. Also note the port 4430; if you used a different one, you&#39;ll need to specify that.\n    So far we&#39;ve setup WebRTC-Star and  p2p-circuit without SSL (unless you used the WebRTC-Star docker setup). If you want to use your nodes over the Internet, with a browser, they need to support SSL. If you&#39;re using the defaults currently WebRTC-Star should be running on port 9090 (no-SSL) and p2p-circuit will be on port 4011 (no-SSL). We&#39;re going to put those on port 9091 (SSL) and port 4430 (SSL), respectively.\n    We&#39;re going to create two files from templates below. Ensure you&#39;re editing entries like  YOURDOMAIN.COM with the full domain (including subdomain) you plan to use for your services.\n    map  $http_upgrade  $connection_upgrade  {\tdefault upgrade ;\t &#39;&#39; close ; } upstream ipfs  {\t server  127.0 .0 .1 : 4011 ; } server  {\t server_name YOURDOMAIN .COM ;\t listen  4430  ssl ;\t ssl_certificate  /etc /letsencrypt /live /YOURDOMAIN .COM /fullchain .pem ;\t ssl_certificate_key  /etc /letsencrypt /live /YOURDOMAIN .COM /privkey .pem ;\t location  /  {\t\t proxy_set_header X -Forwarded -For  $proxy_add_x_forwarded_for ;\t\t proxy_pass  http : / /ipfs ;\t\t proxy_http_version  1.1 ;\t\t proxy_set_header Upgrade  $http_upgrade ;\t\t proxy_set_header Connection  $connection_upgrade ;\t\t proxy_set_header Host  $host ;\t } }\n     map  $http_upgrade  $connection_upgrade  {\tdefault upgrade ;\t &#39;&#39; close ; } upstream star  {\t server  127.0 .0 .1 : 9090 ; } server  {\t server_name YOURDOMAIN .COM ;\t listen  9091  ssl ;\t ssl_certificate  /etc /letsencrypt /live /YOURDOMAIN .COM /fullchain .pem ;\t ssl_certificate_key  /etc /letsencrypt /live /YOURDOMAIN .COM /privkey .pem ;\t location  /  {\t\t proxy_set_header X -Forwarded -For  $proxy_add_x_forwarded_for ;\t\t proxy_pass  http : / /star ;\t\t proxy_http_version  1.1 ;\t\t proxy_set_header Upgrade  $http_upgrade ;\t\t proxy_set_header Connection  $connection_upgrade ;\t\t proxy_set_header Host  $host ;\t } }\n So in this example you can see we&#39;re accepting SSL on port 4430 \u2014 this is our &#34;wss port&#34; (WebSocket Secure) \u2014 and then passing it to the unsecured port locally on 4011 \u2014 this is our &#34;ws port&#34;. So if we want to connect to this node from a browser, we&#39;d use port 4430.\n    sudo systemctl stop nginx sudo certbot -d YOURDOMAIN.COM --standalone  # Edit YOURDOMAIN.COM to the domain you want a cert for, if you need multiple, fill in multiple or run the command multiple times sudo  ln -s /etc/nginx/sites-available/ipfs /etc/nginx/sites-enabled/ipfs sudo  ln -s /etc/nginx/sites-available/star /etc/nginx/sites-enabled/star sudo systemctl start nginx\n     Whew! Since you made it this far, you might be wondering &#34;what is communication like?&#34; Luckily the answer is that it&#39;s  very easy in comparison to finding the peers, with only minor pitfalls. We&#39;re going to simply cover how we&#39;re using  PubSub       (opens new window) in the chat example, and exactly what pitfalls were found while it was developed.\n    Using PubSub, we&#39;re able to subscribe to topics and retrieve any messages posted to those topics. In  js-ipfs, we can set a callback function, which gets called whenever a message is received:\n      This is effectively what the chat demo is doing. It&#39;s subscribing to a global topic (named &#34;discochat-global&#34;), and simply relaying the messages people type around over PubSub.\n    So let&#39;s say you&#39;ve done everything correctly. You&#39;re able to find peers using WebRTC-Star and  p2p-circuit \u2014 awesome! However, you might find your connections expire, and you&#39;re unable to restore them. I&#39;m not completely sure what causes this behaviour (probably some browser policy); however, we can do our best to mitigate these issues!\n    We stay connected to peers in a couple of ways. The first way is more direct: by subscribing to and sending a &#34;keepalive&#34; announcement over  discochat-keepalive every 4 seconds:\n   This should help ensure we give peers looking to chat a high priority. Additionally, we report over  announce-circuit every 15 seconds to make sure we keep a connection to the circuit relay so we can connect to peers stuck behind a NAT. That&#39;s accomplished like so:\n  // process announcements over the relay network, and publish our own keep-alives to keep the channel alive await ipfs .pubsub . subscribe ( &#34;announce-circuit&#34; , processAnnounce ) ; setInterval ( function ( ) {ipfs .pubsub . publish ( &#34;announce-circuit&#34; ,  &#34;peer-alive&#34; ) ; } ,  15000 ) ;\n   The Python script on the circuit relay will report a keepalive every 4 seconds. You may have noticed we&#39;re reporting &#34;peer-alive&#34; instead of &#34;keep-alive&#34;; this is to separate peer requests from relay requests, making it easier to tell when we no longer see a relay.\n    Outside of the simplified version of  processAnnounce, in the real version there are a few variables used for tracking keep-alive and peer-alive. These are  lastAlive and  lastPeer, respectively. We even track the last time we bootstrapped via  lastBootstrap. Using all this, we can display the yellow status when we&#39;re only connected to peers (tracked via  lastPeer), and if we don&#39;t see a keep-alive for 35 seconds (and we haven&#39;t attempted a bootstrap in 60 seconds), we can attempt to re-connect to the bootstrap relay (and display a red status). This is accomplished like so:\n  const bootstraps  =  [  &#39;/dns6/ipfs.thedisco.zone/tcp/4430/wss/p2p/12D3KooWChhhfGdB9GJy1GbhghAAKCUR99oCymMEVS4eUcEy67nt&#39; ,  &#39;/dns4/ipfs.thedisco.zone/tcp/4430/wss/p2p/12D3KooWChhhfGdB9GJy1GbhghAAKCUR99oCymMEVS4eUcEy67nt&#39; ] ; var lastAlive  =  0 ;\t // last keep-alive we saw from a relay var lastPeer  =  0 ; \t // last keep-alive we saw from another peer var lastBootstrap  =  0 ;  // used for tracking when we last attempted to bootstrap (likely to reconnect to a relay) // if reconnect is true, it&#39;ll first attempt to disconnect from the bootstrap nodes async  function  dobootstrap ( reconnect )  { now  =  new   ( ) . getTime ( ) ;  if  (now -lastBootstrap  &lt;  60000 )  {  // don&#39;t try to bootstrap again if we just tried within the last 60 seconds  return ;  } lastBootstrap  = now ;  for  (i  in bootstraps )  {  if  (reconnect )  {  try  {  await ipfs .swarm . disconnect (bootstraps [i ] ) ;  }  catch  (e )  { console . log (e ) ;  }  }  else  {  await ipfs .bootstrap . add (bootstraps [i ] ) ;  }  await ipfs .swarm . connect (bootstraps [i ] ) ;  } } // check if we&#39;re still connected to the circuit relay function  checkalive ( )  { now  =  new   ( ) . getTime ( ) ;  if  (now -lastAlive  &gt;=  35000 )  {  if  (now -lastPeer  &gt;=  35000 )  { document . getElementById ( &#34;status-ball&#34; ) .style .color  =  &#34;red&#34; ;  }  else  { document . getElementById ( &#34;status-ball&#34; ) .style .color  =  &#34;yellow&#34; ;  }  dobootstrap ( true ) ;  // let&#39;s try to reconnect  }  else  { document . getElementById ( &#34;status-ball&#34; ) .style .color  =  &#34;lime&#34; ;  } } setInterval (checkalive ,  1000 ) ;\n \ud83c\udf1f The above should be used with the full version of  processAnnounce, as it relies on  lastAlive and  lastPeer, which aren&#39;t updated in the simplified version.\n    I hope this was informative enough to get rolling. If you were successful in following this entire guide, you now have the ability to deploy powerful IPFS apps that run entirely in the browser, and leverage decentralized p2p whenever you can! I&#39;ve selected some helpful resources and shared them below for further reading:", "posttime": "2022-02-25 19:02:02", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d4f\u89c8\u5668,ipfs", "title": "\u7f51\u7edc\u6d4f\u89c8\u5668\u4e2dIPFS\u8fde\u63a5\u6307\u5357", "title_en": "A guide to IPFS connectivity in web browsers", "transed": 1, "url": "https://blog.ipfs.io/2021-06-10-guide-to-ipfs-connectivity-in-browsers/", "via": "", "real_tags": ["\u6d4f\u89c8\u5668", "ipfs"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074949, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8e\u535a\u5ba2\u7684\u7d22\u5f15\u4e3b\u9875\uff1amash@mash.engr.sgi.com\u65b0\u95fb\u7ec4\uff1acomp\u3002\u963f\u5947\uff0c\u5eb7\u666e\u3002lang.cSubject:Re:64\u4f4d\u82af\u7247\uff0c32\u4f4d\u517c\u5bb9\u6027\uff1f\u65e5\u671f\uff1a1995\u5e749\u670828\u65e502:36:19 GMTOR\u7ec4\u7ec7\uff1aSilicon Graphics\uff0cInc.In article&lt\uff1b44boso$ies@dg-rtp\u3002dg\u3002com&gt\uff1b\uff0ckahn@romulus.rtp.dg.com\uff08\u5965\u5f17\u5361\u6069\uff09\u5199\u9053\uff1a|&gt&gt\uff1b\u672a\u676530\u5e74\u7684\u5efa\u7b51\uff0c\u6211&#39\uff1bd\u660e\u786e\u8868\u793a&#39\uff1b\u5b83\u5b9e\u9645\u4e0a\u662f64\u4f4d\u7684\uff0c|&gt^^^^^^^^^^^^^^^^^^^^^^|&gt\uff1b\u55ef\uff0c\u6211\u4f1a\u5c0f\u5fc3\u8fd9\u4e9b\u58f0\u660e\u3002\u8fdc\u4f4e\u4e8e30 |&gt\uff1b\u51e0\u5e74\u524d\uff0c\u4eba\u4eec\u8ba4\u4e3a16\u4f4d\u662f\u5f88\u591a\uff0c32\u4f4d\u6bd4|&gt\uff1b\u6211\u4eec\u9700\u8981\u8fd9\u4e2a\u4e16\u7eaa\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5c1d\u8bd5\u66f4\u8be6\u7ec6\u7684\u5206\u6790\uff0c\u6211&#39\uff1b\u6211\u4ee5\u524d\u53d1\u5e03\u8fc7\u7c7b\u4f3c\u7684\u5185\u5bb9\uff0c\u4f46\u5fd8\u4e86\u4fdd\u5b58\uff0c\u6240\u4ee5\u8ba9\u6211\u518d\u8bd5\u4e00\u6b21\uff1a\u591a\u5e74\u6765\uff0cDRAM\u6bcf3\u5e74\u53d8\u59274\u500d\uff0c\u6216\u6bcf3\u5e74\u53d8\u59272\u4f4d\u30022\uff09 \u56e0\u6b64\uff0c\u4e00\u4e2a\u7528\u4e8e\u5904\u7406\u9ad8\u7aef\u7cfb\u7edf\u7684CPU\u7cfb\u5217\u901a\u5e38\u4f1a\u6bcf3\u5e74\u589e\u52a02\u4f4d*\u7269\u7406\u5730\u5740*\uff0c\u5176\u5927\u5c0f\u901a\u5e38\u4f1a\u9002\u5408\u60a8\u6253\u7b97\u5efa\u9020\u7684*\u6700\u5927*\u673a\u5668\u3002\u8003\u8651\u5230\u6b63\u5e38\u7684\u8fdb\u5ea6\uff0c\u4ee5\u53ca\u901a\u5e38\u9700\u8981\u8986\u76d62-3\u4ee3\u5185\u5b58\u7684\u60c5\u51b5\uff0c\u6839\u636e\u4ea7\u54c1\u7684\u65f6\u95f4\uff0c\u60a8\u81f3\u5c11\u9700\u89814:1\u7684\u8303\u56f4\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\u53ef\u80fd\u9700\u898116:1\u7684\u8303\u56f4\u3002\u4f8b\u5982\uff0c36\u4f4d\u7269\u7406\u5730\u5740\u652f\u630116GB\u5185\u5b58\u3002\u3002\u3002\u76ee\u524d\u5df2\u7ecf\u670916GB\u7684\u5355\u673a\u67b6\u5fae\u5904\u7406\u5668\u76d2\uff0c\u4ec5\u4f7f\u752816Mb\u7684DRAM\uff1b\u5f53\u7136\uff0c4GB-8GB\u8303\u56f4\u5185\u8fd8\u6709\u66f4\u591a\u3002\u5f53\u7136\uff0c32\u4f4d\u7269\u7406\u5bfb\u5740\u673a\u53ef\u4ee5\u901a\u8fc7\u5916\u90e8\u6620\u5c04\u5bc4\u5b58\u5668\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u3002\u3002\u5047\u8bbe\u4f60\u53ef\u4ee5\u5ffd\u7565\u5185\u6838\u7a0b\u5e8f\u5458\u7684\u62b1\u6028\uff1a-\uff09\u5f53\u7136\uff0c\u6709\u4e9b\u7cfb\u7edf\u8bbe\u8ba1\u6d88\u8017\u7269\u7406\u5185\u5b58\u5730\u5740\u7684\u901f\u5ea6\u6bd4\u4f60\u5feb&#39\uff1b\u6211\u5e0c\u671b\u5982\u6b64\u3002\u7279\u522b\u662f\uff0c\u5047\u8bbe\u60a8\u6784\u5efa\u4e86\u4e00\u4e2a\u5305\u542b\u591a\u4e2a\u5185\u5b58\u7cfb\u7edf\u7684\u7cfb\u7edf\u3002\u6700\u5c0f/\u81ea\u7136\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u5730\u5740\u7684\u9ad8\u9636\u4f4d\u6765\u9009\u62e9\u8981\u8bbf\u95ee\u7684\u5185\u5b58\u3002\u6700\u7b80\u5355\u7684\u8bbe\u8ba1\u6700\u7ec8\u4f1a\u4e3a*\u6700\u5927*\u7684\u5355\u4e2a\u5185\u5b58\u7559\u4e0b\u5bfb\u5740\u7a7a\u95f4\uff0c\u56e0\u6b64\u8f83\u5c0f\u7684\u5185\u5b58\u4f1a\u7559\u4e0b\u5bfb\u5740\u5b54\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5047\u8bbe\u6bcf\u4e2a\u5185\u5b58\u53ef\u80fd\u572864MB\u52301GB\uff0830\u4f4d\uff09\u4e4b\u95f4\u3002\u4f7f\u752836\u4f4d\u5730\u5740\uff0c\u53ef\u4ee5\u65b9\u4fbf\u5730\u540c\u65f6\u4f7f\u75282**6\u621664\u4e2aCPU\u3002\u5f53\u7136\uff0c\u5982\u679c\u5355\u4e2a\u5185\u5b58\u53ef\u80fd\u8fbe\u52304GB\uff084\u7684\u56e0\u6570\uff09\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u53ea\u670916\u4e2aCPU\u4e86\u3002\u6ce8\uff1a\u5728\u4e0b\u4e00\u6279\u82af\u7247\u4e2d\uff0c\u7269\u7406\u5730\u5740\u5927\u5c0f\u4f3c\u4e4e\u572836\u4f4d\u548c40\u4f4d\u4e4b\u95f4\u5206\u5f00\u3002\u3002\u3002\u865a\u62df\u5730\u57401\uff09\u5bf9\u7528\u6237\u7ea7\u4ee3\u7801\u53ef\u89c1\uff0c\u800c\u7269\u7406\u5730\u5740\u901a\u5e38\u4e0d\u53ef\u89c1\u30022\uff09 \u6211&#39\uff1bWe\u2019\u6211\u58f0\u79f0\u4e00\u6761\u7ecf\u9a8c\u6cd5\u5219\u662f\uff0c\u6709\u4e9b\u5b9e\u7528\u7a0b\u5e8f\u7684\u865a\u62df\u5185\u5b58\u4f7f\u7528\u91cf\u662f\u7269\u7406\u5185\u5b58\u5927\u5c0f\u76844\u500d\u3002\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u770b\u5230\u4e86\u4e00\u4e9b\u8fd9\u6837\u7684\u60c5\u51b5\u2026\u2026\u5e76\u4e14\u770b\u5230\u5982\u679c\u4ed6\u4eec\u5f00\u59cb\u66f4\u591a\u5730\u5bfb\u547c\uff0c\u4ed6\u4eec\u4f1a\u53d8\u5f97\u6bd4\u4eba\u4eec\u80fd\u5fcd\u53d7\u7684\u6162\u3002\uff1a-\uff09\u3002\u8f69\u5c3c\u8bd7\u58f0\u79f0\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u4f4e\u4f30\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u968f\u7740\u5185\u5b58\u6620\u5c04\u6587\u4ef6\u5f97\u5230\u66f4\u591a\u7684\u4f7f\u7528\uff0c\u4ee5\u53ca\u6709\u6f0f\u6d1e\u7684\u6587\u4ef6\uff0c\u4eba\u4eec\u53ef\u4ee5\u66f4\u5feb\u5730\u6d88\u8017\u865a\u62df\u5185\u5b58\u3002\u3002\u3002\u6211\u540c\u610f\uff0c\u4f46\u5f88\u96be\u4f30\u8ba1\u8fd9\u79cd\u5f71\u54cd\u3002\u9884\u6d4b64-&gt\uff1b128\u4f4d\u8f6c\u6362\uff1a1\uff09\u5982\u679c\u5185\u5b58\u5bc6\u5ea6\u7ee7\u7eed\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u589e\u52a0\uff0c\u865a\u62df\u5185\u5b58\u538b\u529b\u4fdd\u63014:1\u7684\u6bd4\u4f8b\uff0c\u6211\u4eec\u8ba4\u4e3a\u6211\u4eec&#39\uff1b\u6211\u4eec\u521a\u521a\u53c8\u589e\u52a0\u4e8632\u4f4d\uff0c\u6d88\u8017\u4e862\u4f4d/3\u5e74\uff0c\u6211\u4eec\u5f97\u5230\u4e86\uff1a3*32/2=48\u5e74\uff0c\u6211\u4efb\u610f\u9009\u62e91995\u5e74\u4f5c\u4e3a\u4e00\u4e2a\u5e74\u4efd\uff1aa\uff09\u4e00\u4e9b\u5ba2\u6237\u5bf94GB+\u7269\u7406\u5185\u5b58\u6709\u660e\u663e\u7684\u538b\u529b\uff0c\u4e00\u4e9b\u4eba\u8d2d\u4e70\u4e86\u66f4\u591a\uff0c\u5728&#34\uff1b\u9999\u8349\u548c#34\uff1b\u7cfb\u7edf\u3002b\uff09\u53ef\u4ee5\u9884\u671f\u67094\u5bb6\u4f9b\u5e94\u5546\u5c06\u63d0\u4f9b64\u4f4d\u82af\u7247\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5b8c\u5168\u5947\u602a\u7684\u73b0\u8c61\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u4f30\u8ba1\u503c\u4e3a1995+48=2043\uff0c\u5904\u4e8e64-&gt\uff1b128\u4f4d\u8f6c\u6362\uff0c\u57fa\u4e8e*\u7269\u7406\u5185\u5b58*\u538b\u529b\u3002\u4e5f\u5c31\u662f\u8bf4\uff1a\u538b\u529b\u6765\u81ea\u4e8e\u60f3\u8981\u65b9\u4fbf\u5730\u5904\u7406\u4eba\u4eec\u53ef\u80fd\u5b9e\u9645\u8d2d\u4e70\u7684\u8bb0\u5fc6\u3002\u5f53\u7136\uff0c\u4e0a\u9762\u63d0\u5230\u7684\u591a\u5185\u5b58\u7cfb\u7edf\u95ee\u9898\u5728\u51e0\u5e74\u5185\u5c31\u89e3\u51b3\u4e86\u3002\u3002\u3002\u7136\u800c\uff0c\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0Extra\u6620\u5c04\u4fe1\u606f\u8fd9\u4e00\u65f6\u95f4\u795e\u5723\u7684\u65b9\u5f0f\u6765\u5904\u7406\u8fd9\u4e00\u95ee\u9898\uff0c\u800c\u65e0\u9700\u4fee\u6539\u7528\u6237\u7ea7\u4ee3\u7801\u30022\uff09 \u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6709\u6d1e\u7684\u6587\u4ef6\u548c\u5927\u6587\u4ef6\u7684\u6587\u4ef6\u6620\u5c04\u5f97\u5230\u4e86\u66f4\u5927\u7684\u4f7f\u7528\uff0c\u90a3\u4e48*\u865a\u62df\u5185\u5b58*\u538b\u529b\u7684\u589e\u957f\u8981\u6bd4\u7269\u7406\u5927\u5c0f\u4ee5\u4e0a\u7684\u5e38\u6570\u56e0\u5b50\u5feb\u5f97\u591a\u3002\u3002\u3002\u6211\u6700\u597d\u7684\u731c\u6d4b\u662f2020\u5e74\u3002\u6ce8\u610f&#34\uff1b\u5c0f\u8c03&#34\uff1b\u82af\u7247\u7a7a\u95f4\u3001\u5e03\u7ebf\u548c\u95e8\u5ef6\u8fdf\u7b49\u5b9e\u73b0\u95ee\u9898\uff0c\u5c24\u5176\u662f128\u4f4d\u52a0\u6cd5\u5668&amp\uff1b\u642c\u5bb6\u4e0d\u662f\u5c0f\u4e8b\uff0c\u6240\u4ee5\u4eba\u4eec\u4e0d\u662f&#39\uff1b\u522b\u6025\u7740\u53bb\u4e70128\u79cd\u82e6\u5473\u9152\u6765\u6d88\u9063\uff0c\u5c31\u50cf\u4eba\u4eec\u628a64\u79cd\u82e6\u5473\u9152\u7684\u4e0a\u5e02\u65e5\u671f\u548c\u4ed6\u4eec\u9884\u671f\u7684\u5e02\u573a\u76f8\u5339\u914d\u4e00\u6837\u3002\u5f53\u7136\uff0c\u5982\u679c\u6709\u4eba\u505a\u4e86\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5b83\u4f7f\u7528128\u4f4d\u5bfb\u5740\u6765\u552f\u4e00\u5730\u5bfb\u5740\u4e16\u754c\u4e0a\u7684\u6bcf\u4e2a\u5b57\u8282\uff0c*\u5e76\u4e14*\u8fd9\u63a5\u7ba1\u4e86\u4e16\u754c\uff0c\u5b83\u53ef\u80fd\u4f1a\u6210\u4e3a128\u4e2a\u5b57\u8282\u7684\u52a8\u529b\uff1a-\uff09\u5f53\u7136\uff0c\u5404\u79cd\u5404\u6837\u7684\u60ca\u559c\u53ef\u80fd\u4f1a\u53d1\u751f\uff0c\u4ee5\u7834\u574f\u8fd9\u4e9b\u573a\u666f\u3002\u7136\u800c\uff0c\u8bf7\u6ce8\u610f\uff0c\u901a\u5e38\u7684\u5047\u8bbe\u662f\uff0c\u4ece32\u5c81\u5f00\u59cb\uff0c\u9700\u8981N\u5e74\u65f6\u95f4\uff1b64\u610f\u5473\u7740\u4ece64\u5e74\u5f00\u59cb\u9700\u8981N\u5e74\u65f6\u95f4-&gt\uff1b128 ... \u4e0e\u6b63\u5e38\u8bb0\u5fc6\u8fdb\u7a0b\u4e0d\u517c\u5bb9\uff0c\u537364-&gt\uff1b128\u662f2N-john mashey\u514d\u8d23\u58f0\u660e\uff1a&lt\uff1b\u4e00\u822c\u514d\u8d23\u58f0\u660e\uff0c\u6211\u4ec5\u4ee3\u8868\u6211\u53d1\u8a00\uff0c\u7b49\u7b49&gt\uff1bUUCP\uff1amash@sgi.comDDD:415-390-3090\u4f20\u771f\uff1a415-967-8496USPS:Silicon Graphics 6L-005\uff0c2011\u5317\u6d77\u5cb8\u5927\u9053\uff0c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5c71\u666f\u57ce94039-7311\n\u53d1\u4ef6\u4eba\uff1amash@mash.engr.sgi.com\u65b0\u95fb\u7ec4\uff1acomp\u3002\u4e3b\u9898\uff1aRe:64\u4f4d\u82af\u7247\uff0c32\u4f4d\u517c\u5bb9\u6027\uff1f\u65e5\u671f\uff1a1995\u5e749\u670828\u65e502:56:40 GMTOR\u7ec4\u7ec7\uff1aSilicon Graphics\uff0cInc.In article&lt\uff1b\u8428\u5c14\u66fc-2709951544340001@198.95.245.190&gt\uff1b\uff0czalman@macromedia.com\uff08\u8428\u5c14\u66fc\u00b7\u65af\u7279\u6069\uff09\u5199\u9053\uff1a|&gt\uff1b\u4ece25\u5e74\u540e\u6240\u9700\u7684\u5b57\u6570\u548c\u5730\u5740\u7a7a\u95f4\u6765\u770b\uff0cAlpha |&gt\uff1b\u4e0eMIPS\u3001SPARC\u548c|&gt\uff1bPowerPC\u7b49\u4ece32\u4f4d\u53d8\u4e3a64\u4f4d\u3002\u7136\u800c\uff0c360\u7684\u4f8b\u5b50\u663e\u793a|&gt\uff1b\u8fd9\u53ef\u80fd\u6ca1\u6709\u5fc5\u8981\u3002\u8bf7\u6ce8\u610f\uff0c\u5df2\u5b8c\u6210|&gt\uff1b32\u4f4d\u523064\u4f4d\u7684\u8f6c\u6362\u5c06\u5f88\u96be\u8fbe\u5230128\u4f4d\u3002\uff08\u6240\u6709\u8fd9\u4e9b\u82af\u7247\u90fd\u652f\u6301\u6bd4Alpha\u66f4\u591a\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u610f\u5473\u7740\u4f7f\u7528\u4e86\u66f4\u591a\u7684\u64cd\u4f5c\u7801\u7a7a\u95f4\u7b49\u7b49\uff09\u6ca1\u4ec0\u4e48\u5927\u4e0d\u4e86\u7684\u3002\u3002\u3002\u6211\u4eec\u4e2d\u7684\u5927\u591a\u6570\u4eba\u4ecd\u7136\u6709\u64cd\u4f5c\u7801\u7a7a\u95f4\uff0c\u5c3d\u7ba1\u53ef\u80fd\u6ca1\u6709\u4eba\u4eec\u5e0c\u671b\u7684\u90a3\u4e48\u5e72\u51c0\uff0c\u800c\u4e14\u5bf9\u4e8e\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u80af\u5b9a\u6709\u4e00\u4e2a\u5b8c\u5584\u7684\u6a21\u578b-john mashey\u514d\u8d23\u58f0\u660e\uff1a&lt\uff1b\u4e00\u822c\u514d\u8d23\u58f0\u660e\uff0c\u6211\u4ec5\u4ee3\u8868\u6211\u53d1\u8a00\uff0c\u7b49\u7b49&gt\uff1bUUCP\uff1amash@sgi.comDDD:415-390-3090\u4f20\u771f\uff1a415-967-8496USPS:Silicon Graphics 6L-005\uff0c2011\u5317\u6d77\u5cb8\u5927\u9053\uff0c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5c71\u666f\u57ce94039-7311\n\u53d1\u4ef6\u4eba\uff1amash@mash.engr.sgi.com\u65b0\u95fb\u7ec4\uff1acomp\u3002\u4e3b\u9898\uff1aRe:32 vs 1024\u4f4d\u5904\u7406\u5668\u65e5\u671f\uff1a1996\u5e741\u670831\u65e522:07:09 GMTIn\u6587\u7ae0&lt\uff1b4eo5d5$go6@info.epfl.ch&gt&#34;\u65af\u7279\u51e1\u00b7\u8499\u5c3c\u5c14&#34&\u4e66\u4fe1\u7535\u62a5\uff1b\u65af\u7279\u51e1\u3002monnier@lia.di.epfl.ch&gt\uff1b\u5199\u9053\uff1a|&gt\uff1b\u6211\u4e0d&#39\uff1b\u6211\u4e0d\u8ba4\u4e3a\u8fd9\u4e2a\u95ee\u9898\u4ec5\u4ec5\u662f\u6280\u672f\u95ee\u9898|&gt\uff1b\u5b83&#39\uff1b\u66f4\u53ef\u80fd\u662f\uff1a|&gt|&gt\uff1b\u4f60\u4f1a\u7528\u8fd9\u4e9b1024\u6bd4\u7279\u505a\u4ec0\u4e48|&gt\uff1b\u4ec0\u4e48&#39\uff1b\u91cd\u70b9\u662f\u4ec0\u4e48|&gt|&gt\uff1b\u5982\u679c\u4f60\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u6765\u5229\u7528\u66f4\u591a\u76841024\u4f4d\u6570\u636e\u8def\u5f84|&gt\uff1b\u6bd4\u8d77\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff08\u6bd4\u5982\u5bc6\u7801\u5b66\uff09\uff0c\u4e5f\u8bb8\u4f60\u53ef\u4ee5\u8bf4\u670d|&gt\uff1b\u4eba\u4eec\u5f00\u59cb\u601d\u8003\u5b83\u3002\u6ce8\uff1a\u6211\u8ba4\u4e3aN\u4f4dCPU\u6709N\u4f4d\u5bbd\u7684\u6574\u6570\u5bc4\u5b58\u5668\u548c\u6570\u636e\u8def\u5f84\u30021\uff09 \u5728R10000\u4e2d\uff0c64\u4f4d\u5bbd\u7684\u6574\u6570\u6570\u636e\u8def\u5f84\u7ea6\u4e3a\u5bbd\u5ea6\u768420%\u30021024\u662f16\u500d\u5927\u3002\u8981\u4f7f1024\u4f4d\u7684\u6570\u636e\u8def\u5f84\u4e0e\u76f8\u540c\u5927\u5c0f\u82af\u7247\u7684\u5bbd\u5ea6\u76f8\u540c\uff0c\u53ea\u9700\u898110\u6b21\u7f29\u5c0f\uff0c\u537310\u6b21\u82af\u7247\u751f\u6210\uff1b\u5047\u8bbe\u6bcf\u4eba3\u5e74\uff0c\u5373&#39\uff1b\u6bd4\u4f60\u65e930\u5e74&#39\uff1b\u5fb7\u6587\u60f3\u8003\u8651\u4e00\u4e0b\u3002\u5982\u679c\u4f60\u613f\u610f\u8ba9\u5b83\u6210\u4e3a\u82af\u7247\u4e2d\u66f4\u5927\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u80fd\u4f1a\u62ef\u6551\u4e24\u4ee3\u4eba\u3002\uff08\u4f60\u53ef\u4ee5\u6447\u52a8\u6570\u5b57\uff0c\u4f46\u8fd9\u5c31\u662f\u60f3\u6cd5\u3002\uff092\uff09 \u5f53\u7136\uff0c\u56e0\u4e3a\u7535\u7ebf\u901a\u5e38\u4e0d\u4f1a&#39\uff1bt\u6536\u7f29\u5f97\u50cf\u6676\u4f53\u7ba1\u4e00\u6837\u5feb\uff0c\u6709&#34\uff1b\u5c0f\u8c03&#34\uff1b\u5728\u82af\u7247\u5468\u56f4\u8fd0\u884c\u5927\u91cf1024\u4f4d\u5bbd\u603b\u7ebf\u7684\u95ee\u9898\u30023\uff09\u9664\u4e86\u7a7a\u95f4\u95ee\u9898\uff0c\u8003\u8651\u5230\u8bbe\u8ba1\u5e08\u4eec\u6b63\u5728\u52aa\u529b\u6d88\u9664\u82af\u7247\u4e0a\u957f\u7684\u5bfc\u7ebf\u9020\u6210\u7684\u5ef6\u8fdf\u3002\u5e76\u4e14\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u9700\u8981\u505a1024\u4f4d\u5bbd\u7684\u52a0\u6cd5\u5668\u548c\u79fb\u4f4d\u5668\u800c\u5174\u594b\u30024\uff09 \u6b63\u5982\u65af\u7279\u51e1\u6240\u8bf4\uff0c\u4f60\u751a\u81f3\u9700\u8981\u4e00\u4e2a\u201c\u597d\u7406\u7531\u201d\u6765\u601d\u8003\uff1a\u6211&#39\uff1bwe's lost the post\uff0c\u4f46\u662f\u6211\u4eec\u5728\u53bb\u5e74\u5b8c\u6210\u4e86\u8fd9\u9879\u5de5\u4f5c\uff0c\u53ea\u662f\u8ba8\u8bba\u4e86*128*\u4f4d\u4ec0\u4e48\u65f6\u5019\u53ef\u4ee5\u8fdb\u6765\u3002\u81ea\u4ece\u6211\u4eec&#39\uff1b\u572832/64\u4f4d\u7684\u8fb9\u754c\u4e0a\uff0c64\u4f4d\u5bfb\u5740\u53c8\u589e\u52a0\u4e8632\u4f4d\uff0c\u4f60\u53ef\u4ee5\u8bf4\u6211\u4eec\u6bcf3\u5e74\u6d88\u80172\u4f4d\uff08\u8ddf\u8e2aDRAM\uff09\uff0c\u5373&#39\uff1b3*32/2\uff0c\u621648\u5e74\u3002\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211&#39\uff1b\u6211\u66fe\u9884\u6d4b\uff0c\u5047\u8bbe\u76ee\u524d\u7684\u589e\u957f\u7387\uff0c\u6709\u4eba\u4f1a\u66f4\u65e9\u5730\u8fd9\u6837\u505a\uff0c\u53ef\u80fd\u57282020\u5e74\u62162030\u5e74\u5de6\u53f3\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5173\u4e8e\u4f60\u53ef\u80fd\u8ba4\u4e3a1024\u53ef\u80fd\u7684\u65f6\u95f4\uff0c\u4f60\u548c39\uff1b\u6211\u4f1a\u8003\u8651\u505a128\u3002\u4e00\u53e5\u8bdd\uff1aa\uff0932\u4f4dCPU\u5df2\u7ecf\u4e0d\u8db3\u4ee5\u6ee1\u8db3\u67d0\u4e9b\u7528\u9014\u3002b\uff0964\u4f4dCPU\u53ef\u80fd\u8db3\u591f\u957f\u65f6\u95f4\u4f7f\u7528\uff1b\u8bf7\u6ce8\u610f\uff0c\u5df2\u7ecf\u6709&lt$35\u4e2a64\u4f4d\u5fae\u63a7\u5236\u5668\u53ef\u7528\uff0c\u6240\u4ee5\u8fd9\u5e76\u4e0d\u5947\u602a\u3002--john mashey\u514d\u8d23\u58f0\u660e\uff1a&lt\uff1b\u4e00\u822c\u514d\u8d23\u58f0\u660e\uff0c\u6211\u4ec5\u4ee3\u8868\u6211\u53d1\u8a00\uff0c\u7b49\u7b49&gt\uff1bUUCP\uff1amash@sgi.comDDD:415-933-3090\u4f20\u771f\uff1a415-967-8496USPS:Silicon Graphics 6L-005\uff0c2011\u5317\u6d77\u5cb8\u5927\u9053\uff0c\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5c71\u666f\u57ce94039-7311\n\u5173\u4e8e\u535a\u5ba2\u7684\u7d22\u5f15\u4e3b\u9875", "note_en": "Index Home About Blog   From: mash@mash.engr.sgi.com (John R. Mashey)Newsgroups: comp.arch,comp.lang.cSubject:  Re: 64-bit chips, 32-bit compatibility?Date: 28 Sep 1995 02:36:19 GMTOrganization: Silicon Graphics, Inc.In article &lt;44boso$ies@dg-rtp.dg.com&gt;, kahn@romulus.rtp.dg.com (OpherKahn) writes:|&gt; &gt;architecture for the next 30 years, i&#39;d make it clear that it&#39;s really 64-bit,|&gt; ^^^^^^^^^^^^^^^^^^^^^^|&gt; Well, I would be careful about such statements. It was MUCH LESS than 30|&gt; years ago that people thought that 16 bits was a lot and 32 bits was more than|&gt; we would need this century.Let&#39;s try a more detailed analysis, I&#39;ve posted something like this before,but forgot to save it, so let me try again:PHYSICAL ADDRESSING1) For many years DRAM gets 4X larger every 3 years, or 2 bits/3 years.2) Thus, a CPU family intended to address higher-end systems will typicallyadd 2 more bits of *physical address* every 3 years, and will typicallybe sized to fit the *largest* machine you intend to be built.Given the normal progress, and usual need to cover 2-3 generations ofDRAMs, depending on timing of products, you need at least a 4:1 range,and maybe a 16:1 range for extreme cases.For example, 36-bit physical addresses support 16GB memories ...and there already have been shipped single-rack microprocessor boxes with16GB using just 16Mb DRAMs; there are of course, more in the 4GB-8GB range.Of course, a 32-bit physical addressing machine can get around this with extraexternal-mapping registers ... assuming one can ignore the moaning fromthe kernel programmers :-)Of course, some kinds of system designs burn physical memory addressesfaster than you&#39;d expect. In particular, suppose you build a systemwith multiple memory systems. A minimal/natural approach is to use thehigh-order bits of an address to select the memory to be accessed.The simplest design ends up leaving addressing space for the *largest*individual memory, so that smaller memories leave addressing holes.I.e., suppose each memory might range from 64MB to 1GB (30 bits).With a 36-bit address, one can conveniently use 2**6 or 64 CPUstogether. Of course, if individual memories might go to 4GB (factor of 4),then you are now down to 16 CPUs.Note: of the next crop of chips, the physical address sizes seem splitbetween 36 and 40 bits...VIRTUAL ADDRESSING1) Is visible to user-level code, unlike physical addresses, which usuallyare not.2) I&#39;ve claimed that one rule of thumb says that there are practicalprograms whose virtual memory use is 4X the physical memory size. (I.e.,having seen some like this ... and seeing that if they start paging much more,they get slower than people can stand. :-). Hennessy claims this isa drastic under-estimate, i.e., that as memory-mapped files get more use,and files-with-holes, one can consume virtual memory much faster ...and I agree, but it is hard to estimate this effect.FORECASTS for 64-&gt;128-bit transition:1) If memory density continues to increase at the same rate,and virtual memory pressure retains the 4:1 ratio, and we think we&#39;ve justadded 32 more bits, to be consumed 2 bits/3 years, we get:\t3*32/2 = 48 yearsand I arbitrarily pick 1995 as a year when:\ta) There was noticable pressure from some customers for 4GB+\tphysical memories, and a few people buying more, in &#34;vanilla&#34;\tsystems.\tb) One can expect 4 vendors to be shipping 64-bit chips,\ti.e., not a a complete oddity.Hence, one estimate would be 1995+48 = 2043 to be in leading edge of64-&gt;128-bit transition, based on *physical memory* pressure.That is: the pressure comes from the wish to conveniently address thememory that one might actually buy.Of course, the multiple-memory system issue above pulls that in a fewyears ... however, one can deal with that in the time-hallowed way of addingextra mapping information, without bothering user-level code with changes.2) On the other hand, if files-with-holes and file-mapping of largefiles get much heavier use, the *virtual memory* pressure grows much fasterthan a constant factor above the physical size ... and my best guess yieldsaround 2020. Note that &#34;minor&#34; implementation issues like die space,routing, and gate delays, especially of 128-bit adders &amp; shifters arenon-trivial, so people aren&#39;t going to rush out and build 128-bitters forfun, just as people matched timing dates of their 64-bitters to theirexpected markets. Of course, if somebody does an operating system thatuses 128-bit addressing to address every byte in the world uniquely, *and* thistakes over the world, it might be an impetus for 128-bitters :-)Of course, all sorts of surprises could occur to disrupt these scenarios.Note however, that the common assumption that it took N years to gofrom 32-&gt;64 means that it would take N years from 64-&gt;128 ... isincompatible with the normal memory progress, i.e., 64-&gt;128 is 2N.-john mashey DISCLAIMER: &lt;generic disclaimer, I speak for me only, etc&gt;UUCP: mash@sgi.com DDD: 415-390-3090\tFAX: 415-967-8496USPS: Silicon Graphics 6L-005, 2011 N. Shoreline Blvd, Mountain View, CA 94039-7311\n   From: mash@mash.engr.sgi.com (John R. Mashey)Newsgroups: comp.archSubject:  Re: 64-bit chips, 32-bit compatibility?Date: 28 Sep 1995 02:56:40 GMTOrganization: Silicon Graphics, Inc.In article &lt;zalman-2709951544340001@198.95.245.190&gt;,zalman@macromedia.com (Zalman Stern) writes:|&gt; In terms of word size and address space needed 25 years from now, Alpha|&gt; will have little difficulty going to 128 bits much as MIPS, SPARC,|&gt; PowerPC, etc. went from 32 to 64 bits. However, the 360 example shows that|&gt; this might not be necessary. Note that the RISCs which have already done a|&gt; 32 to 64 bit transition will have a harder time going to 128 bits. (All of|&gt; those chips also support more data types than Alpha meaning more opcode|&gt; space used, etc.)Not a big deal ... most of us still have opcode space left, althoughperhaps not as cleanly as one might prefer, and there is certainly awell-established model for how you do this.-john mashey DISCLAIMER: &lt;generic disclaimer, I speak for me only, etc&gt;UUCP: mash@sgi.com DDD: 415-390-3090\tFAX: 415-967-8496USPS: Silicon Graphics 6L-005, 2011 N. Shoreline Blvd, Mountain View, CA 94039-7311\n   From: mash@mash.engr.sgi.com (John R. Mashey)Newsgroups: comp.archSubject:  Re: 32 vs 1024 Bit ProcessorDate: 31 Jan 1996 22:07:09 GMTIn article &lt;4eo5d5$go6@info.epfl.ch&gt;, &#34;Stefan Monnier&#34; &lt;stefan.monnier@lia.di.epfl.ch&gt; writes:|&gt; I don&#39;t think the problem is merely technological.|&gt; It&#39;s much more likely to be:|&gt; |&gt; what would you do with those 1024bits ?|&gt; what&#39;s the point ?|&gt;|&gt; if you can find a way to take advantage of a 1024bits datapath in more|&gt; than a few special cases (like cryptography), maybe you could convince|&gt; people to start thinking about it.Note: I think an N-bit CPU has N-bit wide integer registers and datapath.1) In an R10000, the 64-bit-wide integer datapath is about 20% of the width.1024 is 16X larger. To get a 1024-bit datapath to be the same fraction ofthe width of a same size chip, you only need about 10 shrinks, i.e. 10chip generations; assuming 3 years apiece, that&#39;s 30 years before you&#39;deven want to think about this. If you were willing for it to be alarger fraction of a chip, you might save 2 generations.(You can jiggle the numbers, but that&#39;s the idea.)2) Of course, since wires often don&#39;t shrink as fast a transistors, there isthe &#34;minor&#34; issue of running a lot of 1024-bit wide busses around the chip.3) Besides the space issue, consider that designers are fighting hard toreduce the delays caused by long wires on chips ... and are not likely tobe thrilled by needing to do 1024-bit-wide adders and shifters.4) And as Stefan notes, you need a *good reason* to even think aboutit:I&#39;ve lost the posting, but we went thru this last year, but just discussingwhen *128*-bit could come in. Since we&#39;re right on the 32/64-bit boundary,and 64 bits addressing has added 32 more bits, and you can argue that weconsume 2 bits every 3 years (to track DRAM), that&#39;s 3*32/2, or 48 years.For various reasons, I&#39;ve predicted that somebody would do it earlier,maybe around 2020 or 2030, assuming current growth rates.Put another way, about the time you *might* consider 1024 to be possible,you&#39;ll be *thinking* about doing 128.BOTTOM LINE:\ta) 32-bit CPUs are already insufficient for some uses.\tb) 64-bit CPUs are likely to be sufficient for a *long time*;\t Note that there are already &lt;$35 64-bit micros available, so this\t is not exotica.-- -john mashey DISCLAIMER: &lt;generic disclaimer, I speak for me only, etc&gt;UUCP: mash@sgi.com DDD: 415-933-3090\tFAX: 415-967-8496USPS: Silicon Graphics 6L-005, 2011 N. Shoreline Blvd, Mountain View, CA 94039-7311\n  Index Home About Blog", "posttime": "2022-02-25 19:00:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5904\u7406\u5668,bit,gt", "title": "128\u4f4d\u5904\u7406\u5668\u7684\u524d\u666f\uff081995\uff09", "title_en": "The prospects for 128 bit processors (1995)", "transed": 1, "url": "https://yarchive.net/comp/128bit.html", "via": "", "real_tags": ["\u5904\u7406\u5668", "bit", "gt"]}]