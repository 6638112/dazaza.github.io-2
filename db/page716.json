[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1014618, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6765\u81ea\u4f26\u6566\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u7684\u4e00\u5c0f\u5757\u9668\u77f3\u5c06\u88ab\u63a2\u7d22\u7ea2\u8272\u661f\u7403\u7684\u706b\u661f\u8f66\u4f7f\u7528\u3002\n\u672c\u5468\uff0c\u4e00\u5c0f\u5757\u5ca9\u77f3\u5c06\u88ab\u629b\u5165\u592a\u7a7a\uff0c\u8fd9\u662f\u6709\u53f2\u4ee5\u6765\u5c1d\u8bd5\u8fc7\u7684\u6700\u5947\u602a\u7684\u661f\u9645\u65c5\u884c\u4e4b\u4e00\u3002\u5468\u56db\uff0c\u4e00\u679a10\u4fbf\u58eb\u786c\u5e01\u5927\u5c0f\u7684\u706b\u661f\u7384\u6b66\u5ca9\u5c06\u642d\u8f7d\u5728\u7f8e\u56fd\u673a\u5668\u4eba\u63a2\u6d4b\u5668\u4e0a\u53d1\u5c04\uff0c\u5e76\u5c06\u5411\u8fd9\u9897\u7ea2\u8272\u661f\u7403\u63a8\u8fdb\uff0c\u8fdb\u884c\u4e3a\u671f7\u4e2a\u6708\u7684\u8fd4\u56de\u5176\u6bcd\u661f\u7684\u65c5\u7a0b\u3002\n\u8fd9\u4e00\u975e\u51e1\u7684\u5192\u9669\u4e4b\u65c5\uff0c\u76f8\u5f53\u4e8e\u5c06\u7164\u70ad\u9001\u5230\u7ebd\u5361\u65af\u5c14\uff0c\u5c06\u6210\u4e3a\u7f8e\u56fd\u5b87\u822a\u5c40\u5373\u5c06\u8fdb\u884c\u76842020\u5e74\u706b\u661f\u63a2\u9669\u7684\u5173\u952e\u90e8\u5206\u3002\u592a\u7a7a\u5de5\u7a0b\u5e08\u8868\u793a\uff0c\u8fd9\u5757\u7531\u4f26\u6566\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u6350\u8d60\u7684\u5ca9\u77f3\u5c06\u5728\u201c\u6bc5\u529b\u201d\u53f7\u673a\u5668\u4eba\u7740\u9646\u5e76\u5f00\u59cb\u5bfb\u627e\u5730\u7403\u4e0a\u8fc7\u53bb\u751f\u547d\u7684\u8ff9\u8c61\u540e\uff0c\u7528\u6765\u6821\u51c6\u8f66\u4e0a\u7684\u63a2\u6d4b\u5668\u3002\n\u6211\u4eec\u62e5\u6709\u7684\u4e00\u4e9b\u706b\u661f\u9668\u77f3\u975e\u5e38\u8106\u5f31\uff0c\u4f46\u6211\u4eec\u7279\u522b\u9009\u62e9\u4e86\u8fd9\u5757\uff0c\u56e0\u4e3a\u5b83\u50cf\u65e7\u9774\u5b50\u4e00\u6837\u575a\u786c\u3002\n\u201c\u5f53\u4f60\u6253\u5f00\u4eea\u5668\uff0c\u5e76\u5728\u4f7f\u7528\u5b83\u4eec\u8fdb\u884c\u7814\u7a76\u4e4b\u524d\u5f00\u59cb\u8c03\u6574\u5b83\u4eec\u65f6\uff0c\u4f60\u5c31\u662f\u5728\u5373\u5c06\u7814\u7a76\u7684\u672a\u77e5\u7269\u8d28\u7684\u6750\u6599\u4e0a\u5bf9\u5b83\u4eec\u8fdb\u884c\u6821\u51c6\u3002\u6240\u4ee5\u7814\u7a76\u706b\u661f\u4e0a\u7684\u5ca9\u77f3\u8fd8\u6709\u4ec0\u4e48\u6bd4\u8d77\u6e90\u4e8e\u90a3\u91cc\u7684\u80bf\u5757\u66f4\u597d\u7684\u5462\uff1f\u201c\u3002\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u9668\u77f3\u9996\u5e2d\u9986\u957f\u5361\u7f57\u7433\u00b7\u53f2\u5bc6\u65af\u6559\u6388\u8bf4\u3002\n\u53f2\u5bc6\u65af\u8865\u5145\u8bf4\uff0c\u79d1\u5b66\u5bb6\u4eec\u76f8\u4fe1\u4ed6\u4eec\u8981\u8fd4\u56de\u706b\u661f\u7684\u5ca9\u77f3\u6765\u81ea\u5730\u7403\uff0c\u4ed6\u4e5f\u662f\u706b\u661f2020\u79d1\u5b66\u56e2\u961f\u7684\u6210\u5458\u3002\u201c\u88ab\u56f0\u5728\u9668\u77f3\u4e2d\u7684\u5fae\u5c0f\u6c14\u6ce1\u4e0e\u706b\u661f\u5927\u6c14\u7684\u6210\u5206\u5b8c\u5168\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u77e5\u9053\u6211\u4eec\u7684\u5ca9\u77f3\u6765\u81ea\u90a3\u91cc\u3002\u201d\n\u636e\u8ba4\u4e3a\uff0c\u706b\u661f\u9668\u77f3\u662f\u5927\u7ea660\u4e07\u81f370\u4e07\u5e74\u524d\u4e00\u9897\u5c0f\u884c\u661f\u6216\u5f57\u661f\u649e\u4e0a\u706b\u661f\uff0c\u5411\u592a\u7a7a\u55b7\u5c04\u788e\u7247\u65f6\u4ea7\u751f\u7684\u3002\u5176\u4e2d\u4e00\u5757\u788e\u77f3\u5e2d\u5377\u4e86\u592a\u9633\u7cfb\uff0c\u6700\u7ec8\u5760\u6bc1\u5728\u5730\u7403\u4e0a\u3002\u8fd9\u5757\u9668\u77f3-\u73b0\u5728\u88ab\u79f0\u4e3aSAU 008-\u662f1999\u5e74\u5728\u963f\u66fc\u53d1\u73b0\u7684\uff0c\u4ece\u90a3\u65f6\u8d77\u5c31\u4e00\u76f4\u7531\u81ea\u7136\u5386\u53f2\u535a\u7269\u9986\u4fdd\u7ba1\u3002\n\u5728\u5b89\u88c5\u5728\u6bc5\u529b\u6708\u7403\u8f66\u4e0a\u7684\u4eea\u5668\u4e2d\uff0c\u6709\u4e00\u53f0\u540d\u4e3aSHERLOC\u7684\u9ad8\u7cbe\u5ea6\u6fc0\u5149\uff0c\u5b83\u5c06\u88ab\u7528\u6765\u7834\u8bd1\u5ca9\u77f3\u7684\u5316\u5b66\u6210\u5206\uff0c\u5e76\u786e\u5b9a\u5b83\u4eec\u662f\u5426\u53ef\u80fd\u542b\u6709\u6709\u673a\u7269\u8d28\uff0c\u8fd9\u4e9b\u7269\u8d28\u8868\u660e\u706b\u661f\u4e0a\u66fe\u7ecf\u5b58\u5728\u8fc7\u751f\u547d\uff0c\u6216\u8005\u4ecd\u7136\u5b58\u5728\u3002\u5305\u62ec\u4e00\u5757SAU 008\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u786e\u4fdd\u4ee5\u6700\u9ad8\u7684\u7cbe\u5ea6\u5b8c\u6210\u8fd9\u9879\u5de5\u4f5c\u3002\n\u53f2\u5bc6\u65af\u8865\u5145\u8bf4\uff1a\u201c\u6211\u4eec\u7279\u522b\u9009\u62e9\u4e86\u8fd9\u5757\u5ca9\u77f3\uff0c\u56e0\u4e3a\u5b83\u5728\u5316\u5b66\u65b9\u9762\u662f\u6b63\u786e\u7684\u6750\u6599\uff0c\u4f46\u4e5f\u662f\u4e00\u5757\u975e\u5e38\u575a\u786c\u7684\u5ca9\u77f3\u3002\u201d\u201c\u6211\u4eec\u62e5\u6709\u7684\u4e00\u4e9b\u706b\u661f\u9668\u77f3\u975e\u5e38\u6613\u788e\u3002\u8fd9\u5757\u9668\u77f3\u5c31\u50cf\u65e7\u9774\u5b50\u4e00\u6837\u575a\u786c\u3002\u201c\u3002\n\u4e00\u65e6\u6bc5\u529b\u53f7\u9009\u62e9\u4e86\u5b83\u80fd\u627e\u5230\u7684\u6700\u6709\u5e0c\u671b\u7684\u5ca9\u77f3\uff0c\u5b83\u5c31\u4f1a\u628a\u5b83\u4eec\u503e\u5012\u5728\u706b\u661f\u8868\u9762\u7684\u50a8\u85cf\u5e93\u91cc\u3002\u7136\u540e\uff0c\u8fd9\u4e9b\u6570\u636e\u5c06\u88ab\u540e\u7eed\u7684\u673a\u5668\u4eba\u4efb\u52a1\u53d6\u56de\uff0c\u5e76\u5411\u592a\u7a7a\u53d1\u5c04\u5230\u5730\u7403\u4e0a\u8fdb\u884c\u5206\u6790\u3002\n\u00b7\u8fd9\u7bc7\u6587\u7ae0\u57282020\u5e747\u670827\u65e5\u88ab\u4fee\u6539\uff0c\u56e0\u4e3a\u4e4b\u524d\u7248\u672c\u7684\u6807\u9898\u662f\u4e0d\u6b63\u786e\u7684\uff0c\u6ca1\u6709\u63d0\u5230\u9668\u77f3\u5728\u201c\u5730\u7403\u4e0a60\u4e07\u5e74\u540e\u201d\u8fd4\u56de\u706b\u661f\u3002\u8fd9\u5c31\u662f\u5b83\u8fd4\u56de\u5730\u7403\u7684\u5927\u81f4\u957f\u5ea6\u3002\u5b83\u8fd8\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u4ee5\u6ce8\u610f\u5230\u5361\u7f57\u7433\u00b7\u53f2\u5bc6\u65af(Caroline Smith)\u4f5c\u4e3a\u56fd\u5bb6\u5386\u53f2\u535a\u7269\u9986\u9668\u77f3\u9996\u5e2d\u9986\u957f\u7684\u89d2\u8272\u3002", "note_en": "Tiny piece of meteorite from London\u2019s Natural History Museum will be used by rover exploring red planet\n    A small piece of rock will be hurled into space this week on one of the strangest interplanetary voyages ever attempted. A tiny piece of Martian basalt the size of a 10p coin will be launched on board a US robot probe on Thursday and propelled towards the red planet on a seven-month journey to its home world.\n This extraordinary odyssey, the interplanetary equivalent of sending coals to Newcastle, will form a key part of Nasa\u2019s forthcoming Mars 2020 expedition. Space engineers say the rock \u2013 which has been donated by the Natural History Museum in London \u2013 will be used to calibrate detectors on board  the robot rover  Perseverance after it lands and begins its search for signs of past life on the planet.\n  Some of the Martian meteorites we have are very fragile, but we chose this one specifically because it\u2019s as tough as old boots\n \u201cWhen you turn on instruments and begin to tune them up before using them for research, you calibrate them on materials that are going to be like the unknown substances you are about to study. So what better for studying rocks on Mars than a lump that originated there?\u201d said Professor Caroline Smith, the Natural History Museum\u2019s principal curator of meteorites.\n Scientists were confident that the rock they were returning to Mars originated on the planet, added Smith, who is also a member of the Mars 2020 science team. \u201cTiny bubbles of gas trapped inside that meteorite have exactly the same composition as the atmosphere of Mars, so we know our rock came from there.\u201d\n It is thought that the Martian meteorite was created when an asteroid or comet plunged into the planet about 600,000 to 700,000 years ago, spraying debris into space. One of those pieces of rubble swept across the solar system and eventually crashed on to Earth. That meteorite \u2013 now known as SAU 008 \u2013 was discovered in Oman in 1999 and has been in the care of the Natural History Museum since then.\n Among the instruments fitted to the Perseverance rover is a high-precision laser called Sherloc, which will be used to decipher the chemical composition of rocks and determine if they might contain organic materials that indicate life once existed \u2013 or still exists \u2013 on Mars. The inclusion of a piece of SAU 008 is intended to ensure this is done with maximum accuracy.\n  \u201cThe piece of rock we are sending was specifically chosen because it is the right material in terms of chemistry, but also it is a very tough rock,\u201d added Smith. \u201cSome of the Martian meteorites we have are very fragile. This meteorite is as tough as old boots.\u201d\n Once Perseverance has selected the most promising rocks it can find, it will dump them in caches on the Martian surface. These will then be retrieved by subsequent robot missions and blasted into space towards Earth for analysis.\n \u2022 This article was amended on 27 July 2020 because the headline of an earlier version was incorrect to refer to the meteorite heading home to Mars \u201cafter 600,000 years on Earth\u201d. That was the approximate length of its journey to Earth. It was also amended to note Caroline Smith\u2019s role as principal curator of meteorites at the National History Museum.", "posttime": "2020-07-28 15:09:13", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u706b\u661f,\u592a\u7a7a,odyssey", "title": "\u6765\u81ea\u706b\u661f\u7684\u5ca9\u77f3\u572860\u4e07\u5e74\u7684\u592a\u7a7a\u6f2b\u6e38\u540e\u56de\u5bb6", "title_en": "Rock From Mars Heads Home After 600,000 Year Odyssey Across Space", "transed": 1, "url": "https://www.theguardian.com/science/2020/jul/26/rock-from-mars-heads-home-after-600000-years-on-earth", "via": "", "real_tags": ["\u706b\u661f", "\u592a\u7a7a", "odyssey"]}, {"category": "", "categoryclass": "", "imagename": "3bb7fdfa189efc5b1d2131a3fa4d5bee.jpg", "infoid": 1014617, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\uff0c\u201c\u7ebd\u7ea6\u65f6\u62a5\u201d(New York Times)\u5728\u5934\u7248\u520a\u767b\u4e86\u4e00\u7bc7\u5173\u4e8e\u4e9a\u9a6c\u900a\u767d\u9886\u5de5\u4f5c\u6761\u4ef6\u7684\u62a5\u9053\u3002\u5b83\u63ed\u793a\u4e86\u4e00\u4e2a\u5de5\u4f5c\u573a\u6240\uff0c\u7a81\u7136\u89e3\u96c7\u5f88\u5e38\u89c1\uff0c\u6210\u5e74\u7537\u6027\u548c\u5973\u6027\u5728\u529e\u516c\u684c\u524d\u54ed\u6ce3\uff0c\u4eba\u4eec\u56e0\u4e3a\u5348\u591c\u540e\u6ca1\u6709\u56de\u590d\u7535\u5b50\u90ae\u4ef6\u800c\u53d7\u5230\u65a5\u8d23\u3002\u8fd9\u4e2a\u6545\u4e8b\u6e05\u695a\u5730\u8868\u660e\u4e86\u7f8e\u56fd\u52b3\u52a8\u529b\u7684\u53d8\u5316\u6709\u591a\u5927\u3002\u66fe\u51e0\u4f55\u65f6\uff0c\u5bcc\u88d5\u9636\u5c42\u5728\u65e0\u4ea7\u9636\u7ea7\u7684\u80cc\u4e0a\u8fc7\u7740\u60a0\u95f2\u7684\u751f\u6d3b\uff0c\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u4eca\u5929\uff0c\u6700\u80fd\u627e\u5230\u5408\u7406\u5de5\u4f5c\u65f6\u95f4\u548c\u9ad8\u85aa\u7684\u662f\u6280\u672f\u884c\u4e1a\u7684\u4eba\uff1b\u7f8e\u56fd\u4e13\u4e1a\u4eba\u58eb\u662f\u90a3\u4e9b\u906d\u53d7\u7f9e\u8fb1\u548c\u50cf\u8d1f\u91cd\u91ce\u517d\u4e00\u6837\u88ab\u9a71\u4f7f\u7684\u4eba\u4e4b\u4e00\u3002\n\u6ca1\u6709\u4eba\u60f3\u5230\u4e8b\u60c5\u4f1a\u662f\u8fd9\u6837\u7684\u3002\u7ecf\u6d4e\u5b66\u5bb6\u7ea6\u7ff0\u00b7\u6885\u7eb3\u5fb7\u00b7\u51ef\u6069\u65af(John Maynard Keynes)\u66fe\u8457\u540d\u5730\u9884\u6d4b\u6bcf\u5929\u5de5\u4f5c\u65f6\u95f4\u4e3a3\u5c0f\u65f6\u30021964\u5e74\uff0c\u201c\u751f\u6d3b\u201d(Life)\u6742\u5fd7\u7528\u4e00\u4e2a\u7531\u4e24\u90e8\u5206\u7ec4\u6210\u7684\u7cfb\u5217\u6587\u7ae0\uff0c\u63a2\u8ba8\u4e86\u5b83\u8ba4\u4e3a\u7f8e\u56fd\u793e\u4f1a\u9762\u4e34\u7684\u4e00\u4e2a\u201c\u771f\u6b63\u5a01\u80c1\u201d\uff1a\u5373\u5c06\u5230\u6765\u7684\u592a\u591a\u95f2\u6687\u65f6\u95f4\u7684\u6d41\u884c\u75c5\u3002\u5728\u201c\u592a\u591a\u4f11\u95f2\u7684\u7a7a\u865a\u201d\u4e00\u4e66\u4e2d\uff0c\u5b83\u65ad\u8a00\u201c\u4e00\u4e9b\u5173\u4e8e\u81ea\u52a8\u5316\u6b63\u5728\u7ed9\u6211\u4eec\u7684\u7ecf\u6d4e\u5e26\u6765\u4ec0\u4e48\u7684\u4e2d\u95f4\u6d3e\u9884\u8a00\u5bb6\u8ba4\u4e3a\uff0c\u6211\u4eec\u6b63\u5904\u4e8e\u6bcf\u5468\u5de5\u4f5c30\u5c0f\u65f6\u7684\u8fb9\u7f18\u3002\u201d\u540e\u7eed\u6d3b\u52a8\u7684\u6807\u9898\u662f\u201c\u524d\u65b9\u7684\u4efb\u52a1\uff1a\u5982\u4f55\u8f7b\u677e\u5730\u751f\u6d3b\u201d(The Task Ahead\uff1aHow to Take Life Easy)\u3002\n\u4e94\u5341\u5e74\u540e\uff0c\u53ef\u4ee5\u516c\u5e73\u5730\u8bf4\uff0c\u8feb\u5728\u7709\u776b\u7684\u4f11\u95f2\u5371\u673a\u5df2\u7ecf\u88ab\u514b\u670d\u4e86\u3002\u5f8b\u5e08\u4e8b\u52a1\u6240\u3001\u94f6\u884c\u548c\u9ad8\u79d1\u6280\u516c\u53f8\u7b49\u5730\u65b9\u7684\u6bcf\u5468\u5de5\u4f5c\u65f6\u95f4\u7a33\u6b65\u589e\u52a0\uff0c\u8fbe\u5230\u4e86\u8bb8\u591a\u4eba\u8ba4\u4e3a\u65e0\u6cd5\u5fcd\u53d7\u7684\u6c34\u5e73\u3002\u4e8b\u5b9e\u4e0a\uff0c\u57282006\u5e74\uff0c\u6536\u5165\u6700\u9ad8\u768420%\u7684\u4eba\u6bcf\u5468\u5de5\u4f5c\u8d85\u8fc750\u5c0f\u65f6\u7684\u53ef\u80fd\u6027\u662f\u6536\u5165\u6700\u4f4e\u768420%\u7684\u4eba\u7684\u4e24\u500d\uff0c\u8fd9\u4e0e\u5386\u53f2\u6761\u4ef6\u76f8\u53cd\u3002\n\u7a76\u7adf\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u65e2\u662f\u4e00\u4e2a\u8c1c\uff0c\u4e5f\u662f\u4e00\u4e2a\u6096\u8bba\u3002\u5728\u8fc7\u53bb\u7684\u4e94\u5341\u5e74\u91cc\uff0c\u6211\u4eec\u770b\u5230\u4e86\u751f\u4ea7\u529b\u7684\u5927\u5e45\u63d0\u9ad8\uff0c\u65e0\u6570\u7701\u529b\u8bbe\u5907\u7684\u53d1\u660e\uff0c\u4ee5\u53ca\u5927\u91cf\u5973\u6027\u8fdb\u5165\u6b63\u5f0f\u52b3\u52a8\u529b\u5927\u519b\u3002\u5982\u679c\u6211\u4eec\u5047\u8bbe\uff0c\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u793e\u4f1a\u9700\u8981\u4e00\u5b9a\u6570\u91cf\u7684\u5de5\u4f5c\u624d\u80fd\u8fd0\u8f6c\uff0c\u6211\u4eec\u600e\u4e48\u80fd\u7acb\u523b\u63d0\u9ad8\u751f\u4ea7\u529b\uff0c\u62e5\u6709\u66f4\u591a\u7684\u5de5\u4eba\uff0c\u4f46\u4ecd\u7136\u5de5\u4f5c\u66f4\u591a\u7684\u65f6\u95f4\u5462\uff1f\u4e00\u5b9a\u6709\u522b\u7684\u4e8b\u60c5\u5728\u53d1\u751f\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e2a\u95ee\u9898\u5f15\u8d77\u4e86\u7ecf\u6d4e\u5b66\u5bb6\u548c\u4f5c\u5bb6\u7684\u5174\u8da3\uff0c\u6bd4\u5982\u534e\u76db\u987f\u90ae\u62a5\u8bb0\u8005\u5e03\u91cc\u5409\u5fb7\u00b7\u8212\u5c14\u7279(Brigid Schulte)\uff0c\u4ed6\u5199\u4e86\u4e00\u7bc7\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u4e2a\u4eba\u8c03\u67e5\u3002(\u5979\u6700\u7ec8\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u602a\u7f6a\u4e86\u5979\u7684\u4e08\u592b\uff0c\u4ed6\u6ca1\u6709\u5e73\u5747\u5206\u62c5\u7ba1\u7406\u5bb6\u5ead\u7684\u8d1f\u62c5\u3002)\u3002\u6b63\u5982\u4f0a\u4e3d\u838e\u767d\u00b7\u79d1\u5c14\u4f2f\u7279(Elizabeth Kolbert)\u6240\u5199\u7684\u90a3\u6837\uff0c\u6bcf\u4e2a\u4eba\u90fd\u540c\u610f\uff0c\u8fd9\u4e2a\u95ee\u9898\u6ca1\u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7b54\u6848\u3002\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u7f8e\u56fd\u4eba\u53ea\u662f\u66f4\u559c\u6b22\u5de5\u4f5c\u800c\u4e0d\u662f\u4f11\u95f2\uff1b\u6839\u636e\u8fd9\u4e00\u7406\u8bba\uff0c\u5f3a\u70c8\u7684\u804c\u4e1a\u9053\u5fb7\u5df2\u7ecf\u6210\u4e3a\u4efb\u4f55\u62e5\u6709\u5927\u5b66\u5b66\u4f4d\u7684\u4eba\u7684\u8363\u8a89\u5fbd\u7ae0\u3002\u5982\u679c\u4f60\u5f88\u5fd9\uff0c\u4f60\u770b\u8d77\u6765\u5f88\u91cd\u8981\u3002\u4eba\u4eec\u8fd8\u53ef\u4ee5\u5728\u5de5\u4f5c\u4e2d\u611f\u5230\u81ea\u8c6a\uff1b\u4ed6\u4eec\u8fd8\u53ef\u4ee5\u5728\u5de5\u4f5c\u573a\u6240\u627e\u5230\u7231\u60c5\u548c\u514d\u8d39\u98df\u7269\uff0c\u5e76\u5c06\u53c2\u52a0\u4f1a\u8bae\u4f5c\u4e3a\u5ea6\u5047\u7684\u4e00\u79cd\u5f62\u5f0f\u3002\u5176\u4ed6\u4eba\u8ba4\u4e3a\u5de5\u4f5c\u7684\u589e\u52a0\u4e00\u5b9a\u4e0e\u4e0d\u5e73\u7b49\u6709\u5173\uff1a\u5904\u4e8e\u6536\u5165\u9636\u68af\u9876\u7aef\u7684\u4eba\u8d5a\u7684\u94b1\u8d8a\u591a\uff0c\u4ed6\u4eec\u5de5\u4f5c\u7684\u6bcf\u4e00\u4e2a\u5c0f\u65f6\u5c31\u53d8\u5f97\u66f4\u6709\u4ef7\u503c\u3002\u8fd8\u6709\u4e00\u79cd\u7406\u8bba\u8ba4\u4e3a\uff0c\u6211\u4eec\u7684\u9700\u6c42\u548c\u6b32\u671b\u968f\u7740\u6211\u4eec\u6d88\u8d39\u7684\u589e\u52a0\u800c\u589e\u957f\uff0c\u4ece\u800c\u4ea7\u751f\u4e86\u66f4\u5927\u7684\u5de5\u4f5c\u9700\u6c42\u3002\n\u6240\u6709\u8fd9\u4e9b\u89e3\u91ca\u7684\u5171\u540c\u70b9\u662f\uff0c\u7b54\u6848\u6765\u81ea\u4e8e\u68c0\u67e5\u5458\u5de5\u7684\u51b3\u5b9a\u548c\u6fc0\u52b1\u63aa\u65bd\u3002\u8fd9\u91cc\u7f3a\u5c11\u4e00\u4e9b\u4e1c\u897f\uff1a\u95ee\u9898\u662f\uff0c\u7f8e\u56fd\u7684\u5236\u5ea6\u672c\u8d28\u4e0a\u662f\u5426\u62b5\u5236\u8fc7\u591a\u4f11\u95f2\u7684\u53ef\u80fd\u6027\uff0c\u5373\u4f7f\u8fd9\u662f\u4eba\u4eec\u771f\u6b63\u60f3\u8981\u7684\uff0c\u5373\u4f7f\u4ed6\u4eec\u6709\u80fd\u529b\u5b9e\u73b0\u5b83\u3002\u6362\u8a00\u4e4b\uff0c\u957f\u65f6\u95f4\u7684\u5de5\u4f5c\u53ef\u80fd\u65e2\u4e0d\u662f\u6211\u4eec\u771f\u6b63\u60f3\u8981\u7684\u7ed3\u679c\uff0c\u4e5f\u4e0d\u662f\u65e7\u7684\u9a6c\u514b\u601d\u4e3b\u4e49\u7406\u8bba-\u7edf\u6cbb\u9636\u7ea7\u5bf9\u5de5\u4eba\u7684\u538b\u8feb\u3002\u5b83\u4eec\u53ef\u80fd\u662f\u4f53\u7cfb\u548c\u673a\u6784\u7684\u526f\u4ea7\u54c1\uff0c\u8fd9\u4e9b\u4f53\u7cfb\u548c\u673a\u6784\u81ea\u751f\u81ea\u706d\uff0c\u6ca1\u6709\u4e3a\u4efb\u4f55\u4eba\u7684\u5229\u76ca\u670d\u52a1\u3002\u5982\u679c\u4e00\u4e9b\u884c\u4e1a\u7b80\u5355\u5730\u53d8\u6210\u4e86\u5de8\u5927\u7684\u5236\u9020\u6027\u5de5\u4f5c\u9879\u76ee\uff0c\u5c06\u6bcf\u4e2a\u4eba\u90fd\u56f0\u5728\u5176\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u4f1a\u53d1\u751f\u3002\n\u5728\u6280\u672f\u719f\u7ec3\u7684\u884c\u4e1a\u4e2d\uff0c\u4ec0\u4e48\u7b97\u5f97\u4e0a\u5de5\u4f5c\u662f\u6709\u5185\u5728\u9650\u5236\u7684\uff1b\u4e00\u65e6\u5efa\u9020\u4e86\u4e00\u5ea7\u623f\u5b50\u6216\u4e00\u5ea7\u6865\uff0c\u5b83\u5c31\u7ed3\u675f\u4e86\u3002\u4f46\u5728\u767d\u9886\u5de5\u4f5c\u4e2d\uff0c\u901a\u8fc7\u865a\u5047\u5fc5\u9700\u54c1\u7684\u4ea7\u751f\uff0c\u5de5\u4f5c\u91cf\u53ef\u4ee5\u65e0\u9650\u6269\u5927--\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0e\u771f\u5b9e\u7684\u793e\u4f1a\u6216\u7ecf\u6d4e\u9700\u6c42\u65e0\u5173\u7684\u9a71\u4f7f\u4eba\u4eec\u5c3d\u53ef\u80fd\u52aa\u529b\u5de5\u4f5c\u7684\u539f\u56e0\u3002\u60f3\u60f3\u8bc9\u8bbc\u7cfb\u7edf\uff0c\u5728\u8fd9\u4e2a\u7cfb\u7edf\u4e2d\uff0c\u5927\u578b\u5f8b\u5e08\u4e8b\u52a1\u6240\u7684\u5f8b\u5e08\u5de5\u4f5c\u65f6\u95f4\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u62b1\u6028\u3002\u5982\u679c\u89e3\u51b3\u7ea0\u7eb7\u662f\u6cd5\u5f8b\u7684\u793e\u4f1a\u529f\u80fd\uff0c\u6211\u4eec\u6240\u62e5\u6709\u7684\u8fdc\u4e0d\u662f\u6700\u6709\u6548\u7684\u516c\u5e73\u5408\u7406\u7684\u89e3\u51b3\u65b9\u5f0f\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u73b0\u4ee3\u8bc9\u8bbc\u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u4e00\u573a\u5927\u89c4\u6a21\u7684\u3001\u793e\u4f1a\u4e0a\u4e0d\u5fc5\u8981\u7684\u519b\u5907\u7ade\u8d5b\uff0c\u5f8b\u5e08\u4eec\u4ec5\u4ec5\u56e0\u4e3a\u6709\u80fd\u529b\u5c31\u8ba9\u5bf9\u65b9\u627f\u53d7\u75db\u82e6\u7684\u52b3\u52a8\u91cf\u3002\u5728\u65e7\u65f6\u4ee3\uff0c\u6280\u672f\u7684\u9650\u5236\u548c\u4e00\u79cd\u4e13\u4e1a\u7cbe\u795e\u9020\u6210\u4e86\u8fd9\u79cd\u519b\u5907\u7ade\u8d5b\u7684\u81ea\u7136\u9650\u5236\uff0c\u4f46\u4eca\u5929\u53cc\u65b9\u90fd\u4e0d\u80fd\u9000\u8ba9\uff0c\u4ee5\u514d\u4f7f\u81ea\u5df1\u5904\u4e8e\u7ade\u4e89\u52a3\u52bf\u3002\n\u5178\u578b\u7684\u5206\u6790\u5c06\u75af\u72c2\u7684\u65f6\u95f4\u5f52\u548e\u4e8e\u8d2a\u5a6a\u7684\u4f34\u4fa3\uff0c\u4f46\u5177\u6709\u8bbd\u523a\u610f\u5473\u7684\u662f\uff0c\u6700\u9ad8\u5c42\u7684\u4eba\u5f80\u5f80\u548c\u4f60\u4e00\u6837\n\u8bc9\u8bbc\u53ef\u80fd\u662f\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff0c\u4f46\u6211\u6beb\u4e0d\u6000\u7591\uff0c\u8bb8\u591a\u5176\u4ed6\u884c\u4e1a\u4e5f\u6709\u81ea\u5df1\u7684\u519b\u5907\u7ade\u8d5b\uff0c\u521b\u9020\u4e86\u4ee4\u4eba\u6000\u7591\u7684\u5fc5\u8981\u6027\u7684\u5de5\u4f5c\u3002\u89e3\u836f\u5f88\u5bb9\u6613\u5f00\u51fa\uff0c\u4f46\u5f88\u96be\u5b9e\u73b0\uff1a\u5b83\u662f\u5bf9\u5de5\u4f5c\u6548\u7387\u76ee\u6807\u7684\u56de\u5f52-\u4f5c\u4e3a\u4e00\u4e2a\u793e\u4f1a\uff0c\u7528\u6700\u5c11\u7684\u52aa\u529b\u6ee1\u8db3\u6211\u4eec\u7684\u4efb\u4f55\u9700\u6c42\uff0c\u540c\u65f6\u628a\u9009\u62e9\u66f4\u591a\u5de5\u4f5c\u4f5c\u4e3a\u4e00\u79cd\u7231\u597d\u7559\u7ed9\u90a3\u4e9b\u78b0\u5de7\u559c\u6b22\u5de5\u4f5c\u7684\u4eba\u3002\u5728\u8fd9\u65b9\u9762\uff0c\u4e9a\u9a6c\u900a\u8868\u9762\u4e0a\u7684\u6307\u5bfc\u539f\u5219\u662f\u8ba9\u4eba\u4eec\u7684\u751f\u6d3b\u53d8\u5f97\u66f4\u597d\uff0c\u4f46\u5b83\u7adf\u7136\u662f\u4e00\u4e2a\u6b8b\u9177\u7684\u5de5\u4f5c\u573a\u6240\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u4e0d\u5c0f\u7684\u8bbd\u523a\u3002\u4e00\u5b9a\u6709\u66f4\u597d\u7684\u529e\u6cd5\u3002", "note_en": "Recently, the New York  Times ran a front-page story  about the conditions for white-collar workers at Amazon. It revealed a workplace where abrupt firings are common, grown men and women cry at their desks, and people are scolded for not responding to e-mails after\u00a0midnight. The story made clear how much things have changed in the American workforce. Once upon a time, it was taken for granted that the wealthier classes enjoyed a life of leisure on the backs of the proletariat. Today it is people in skilled trades who can most find reasonable hours coupled with good pay; the American professional is among those subject to humiliation and driven like a beast of burden.\n  No one thought things would be this way. The economist John Maynard Keynes  famously forecast a three-hour workday, and in 1964  Life\u00a0magazine devoted a two-part series to what it considered a \u201creal threat\u201d facing American society: the coming epidemic of too much leisure time. In \u201cThe Emptiness of Too Much Leisure,\u201d it asserted that \u201csome of the middle-of-the-road prophets of what automation is doing to our economy think that we are on the verge of a 30-hour week.\u201d The follow-up was titled \u201cThe Task Ahead: How to Take Life Easy.\u201d\n Fifty years later, it\u2019s fair to say that the looming leisure crisis has been licked. The work week at places like law firms, banks, and high-tech companies has steadily increased, to levels considered intolerable by many people. Indeed, in 2006, the top twenty per cent of earners were  twice as likely to work more than fifty hours a week than the bottom twenty per cent, a reversal of historic conditions.\n  Just why this has happened is both a mystery and a paradox. The past fifty years have seen massive gains in productivity, the invention of countless labor-saving devices, and the mass entry of women into the formal workforce. If we assume that there is, to a certain degree, a fixed amount of work necessary for society to function, how can we at once be more productive, have more workers, and yet still be working more hours? Something else must be going on.\n  The question has proved a source of fascination for economists and writers, such as Brigid Schulte, a Washington  Post reporter, who  wrote a personal investigation of the question. (She ended up, in large part, blaming her husband, who wasn&#39;t sharing equally in the burden of running their home.) As  Elizabeth Kolbert has written, everyone agrees that there is no one simple answer to the question. Some people think that Americans just prefer work to leisure; a strong work ethic, according to this theory, has become a badge of honor for anyone with a college degree. If you\u2019re busy, you seem important. There is also the pride that people can have in their work; they also find love and free food at workplaces, and go to conferences as a form of vacation. Others think the rise in work must somehow be related to inequality: as people at the top of the income ladder earn more money, each hour they work becomes more valuable. And there\u2019s the theory that our needs and desires grow as we consume more, producing an even greater need to work.\n What all of these explanations have in common is the idea that the answer comes from examining workers&#39; decisions and incentives. There\u2019s something missing: the question of whether the American system, by its nature, resists the possibility of too much leisure, even if that\u2019s what people actually want, and even if they have the means to achieve it. In other words, the long hours may be neither the product of what we really want nor the oppression of workers by the ruling class, the old Marxist theory. They may be the byproduct of systems and institutions that have taken on lives of their own and serve no one\u2019s interests. That can happen if some industries have simply become giant make-work projects that trap everyone within them.\n What counts as work, in the skilled trades, has some intrinsic limits; once a house or bridge is built, that\u2019s the end of it. But in white-collar jobs, the amount of work can expand infinitely through the generation of false necessities\u2014that is, reasons for driving people as hard as possible that have nothing to do with real social or economic needs. Consider the litigation system, in which the hours worked by lawyers at large law firms are a  common complaint. If dispute resolution is the social function of the law, what we have is far from the most efficient way to reach fair or reasonable resolutions. Instead, modern litigation can be understood as a massive, socially unnecessary arms race, wherein lawyers subject each other to torturous amounts of labor just because they can. In older times, the limits of technology and a kind of professionalism created a natural limit to such arms races, but today neither side can stand down, lest it put itself at a competitive disadvantage.\n A typical analysis blames greedy partners for crazy hours, but the irony is that the people at the top are often as unhappy and overworked as those at the bottom: it is a system that serves almost no one. Moreover, our many improvements in the technologies of productivity make the arms-race problem worse. The fact that employees are now always reachable eliminates what was once a natural barrier of sorts, the idea that work was something that happened during office hours or at the physical office. With no limits, work becomes like a football game where the whistle is never blown.\n Litigation may be an extreme example, but I do not doubt that many other industries have their own arms races that create work that is of dubious necessity. The antidote is simple to prescribe but hard to achieve: it is a return to the goal of efficiency in work\u2014fulfilling whatever needs we have, as a society, with the minimal effort required, while leaving the option of more work as a hobby for those who happen to love it. In this respect, it seems like no little irony that Amazon should be a brutal workplace when its ostensible guiding principle is making people\u2019s lives better. There must be a better way.", "posttime": "2020-07-28 15:02:35", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9700\u8981,don", "title": "\u6211\u4eec\u4e0d\u9700\u8981\u505a\u592a\u591a\u5de5\u4f5c(2015)", "title_en": "We Don\u2019t Need to Work So Much (2015)", "transed": 1, "url": "https://www.newyorker.com/news/daily-comment/you-really-dont-need-to-work-so-much", "via": "", "real_tags": ["\u9700\u8981", "don"]}, {"category": "", "categoryclass": "", "imagename": "bff9b83f625492d27e8dc992a9843757.jpeg", "infoid": 1014616, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6709\u6bd2\u7684\u4eba\u3001\u8d2c\u4f4e\u7684\u8bc4\u8bba\u548c\u6563\u5e03\u7684\u611a\u8822\u53ea\u662f\u8868\u9762\u4e0a\u7684\u3002\u4e0b\u9762\u662f\u6211\u4eec\u6700\u7cdf\u7cd5\u7684\u81ea\u6211\u3002\n\u4f60\u4e0a\u4e00\u6b21\u53d1(RT\uff0c\u4e0d\u662f\u56de\u590d)\u4e00\u6761\u8352\u5510\u53ef\u7b11\u7684\u63a8\u6587\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u8bc1\u660e\u53d1\u5e16\u662f\u9519\u7684\uff0c\u662f\u4ec0\u4e48\u65f6\u5019\uff1f\n\u4f60\u591a\u4e45\u6d4f\u89c8\u4e00\u6b21\u4f60\u7684\u8ba2\u9605\u6e90\uff0c\u5bfb\u627e\u4e0b\u4e00\u4e2a\u8981\u53d6\u7b11\u7684\u201c\u611a\u8822\u7684\u4eba\u201d\uff1f\n\u4f60\u5199\u63a8\u6587\u7684\u4e3b\u8981\u52a8\u673a\u662f\u4ec0\u4e48\uff1f\u4f60\u53d1\u63a8\u7279\u662f\u4e3a\u4e86\u63d0\u4f9b\u4e00\u4e9b\u65b0\u7684\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u5417\uff1f\u6765\u5956\u52b1\u4e00\u4e2a\u4f60\u5173\u6ce8\u548c\u94a6\u4f69\u7684\u8d26\u6237\u5417\uff1f\u6216\u8005\u5411\u4efb\u4f55\u4eba\u5c55\u793a\u4f60\u6bd4\u5176\u4ed6\u4eba\u66f4\u806a\u660e\uff1f\n\u6211\u82b1\u4e86\u516b\u5e74\u65f6\u95f4\u548c\u8d85\u8fc730.000\u6761\u63a8\u6587\u624d\u610f\u8bc6\u5230\u6211\u662f\u4e00\u4e2a\u8ba9\u6211\u96be\u8fc7\u7684\u793e\u533a\u7684\u4e00\u90e8\u5206\u3002\u63a8\u7279\u662f\u4e00\u79cd\u5a92\u4ecb\uff0c\u4e00\u5207\u8352\u8c2c\u90fd\u88ab\u5ba3\u626c\uff0c\u4e00\u5207\u6781\u7aef\u90fd\u88ab\u4f20\u64ad\uff0c\u4e00\u5207\u7406\u667a\u90fd\u88ab\u6076\u6bd2\u653b\u51fb\u3002\n\u6211\u628a\u6539\u53d8\u8fd9\u4e00\u5207\u4f5c\u4e3a\u6211\u7684\u4f7f\u547d\u3002\u6211\u4e00\u76f4\u5728\u5bfb\u627e\u4e00\u4e2a\u6bd4\u6211\u66f4\u4e0d\u806a\u660e\u7684\u4eba\u6765\u6298\u78e8\u3002\u6211\u5728\u7f51\u4e0a\u5bfb\u627e\u9519\u8bef(tweet\u3001\u5a92\u4f53\u6807\u9898\u7b49)\uff0c\u6211\u786e\u4fdd\u6211\u628a\u5b83\u4eec\u5e7f\u64ad\u7ed9\u5168\u4e16\u754c(\u5b9e\u9645\u4e0a\u662f\u6211\u7684\u8ffd\u968f\u8005)\uff0c\u8ba9\u6211\u770b\u8d77\u6765\u66f4\u806a\u660e\u3002\u5728\u6211\u51fa\u73b0\u7684\u6700\u540e\u4e00\u5e74\u91cc\uff0c\u6211\u5f88\u751f\u6c14\uff0c\u5bf9\u4e00\u5207\u90fd\u5486\u54ee\u4e0d\u5df2\u3002\n\u6211\u82b1\u4e868\u5e74\u65f6\u95f4\uff0c\u53d1\u4e8630.000\u591a\u6761\u63a8\u6587\uff0c\u624d\u610f\u8bc6\u5230\u6211\u662f\u4e00\u4e2a\u8ba9\u6211\u96be\u8fc7\u7684\u793e\u533a\u7684\u4e00\u90e8\u5206\u3002\n\u5927\u591a\u6570\u4eba\u6ca1\u6709\u610f\u8bc6\u5230\uff0c\u5982\u679c\u4f60\u60f3\u6279\u8bc4\u67d0\u4e8b\uff0c\u4f60\u9996\u5148\u5fc5\u987b\u5ba3\u4f20\u5b83\u3002\u5f53\u4f60\u63a8\u5e7f\u5b83\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u88ab\u4eba\u77e5\u9053\uff0c\u5b83\u4f1a\u4f20\u64ad\uff0c(\u6709\u65f6)\u8fd8\u4f1a\u50cf\u75c5\u6bd2\u4e00\u6837\u4f20\u64ad\u3002\u7136\u540e\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u8fd9\u4ef6\u4e8b\uff0c\u5f53\u4f60\u7684\u89c2\u70b9\u5728\u55a7\u56a3\u4e2d\u6d88\u5931\u65f6\uff0c\u5927\u5bb6\u90fd\u5728\u8c08\u8bba\u5b83\u3002\n\u606d\u559c\u4f60\uff0c\u4f60\u521a\u521a\u88ab\u4e00\u4e2a\u611a\u8822\u7684\u4eba\u667a\u80dc\u4e86\u3002\u8fd9\u90fd\u662f\u4f60\u7684\u9519\u3002\n\u201c\u6297\u8bae\u63a8\u6587\u201d(\u6bd4\u5982\u6297\u8bae\u6295\u7968)\u901a\u5e38\u662f\u9519\u8bef\u7684\u3002\u5728\u6700\u597d\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u8ba9\u4e00\u4e2a\u54d1\u5df4\u51fa\u540d\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u5e2e\u52a9\u6781\u7aef\u4e3b\u4e49\u89c2\u70b9\u548c\u8fb9\u7f18\u89c2\u70b9\u4f20\u64ad\uff0c\u4ece\u800c\u4f7f\u5176\u6b63\u5e38\u5316\u3002\n\u4e00\u5343\u4e2a\u806a\u660e\u4eba\u4f1a\u4e50\u4e8e\u53cd\u9a73\u4e00\u4e2a\u611a\u8822\u7684\u89c2\u70b9\u6765\u6279\u8bc4\u5b83\uff0c\u8ba9\u5b83\u5728\u6e29\u548c\u6216\u6df1\u601d\u719f\u8651\u7684\u89c2\u70b9\u4e0a\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u3002\u4e00\u5343\u4e2a\u611a\u8822\u7684\u4eba\u6c38\u8fdc\u4e0d\u4f1a\u53cd\u9a73\u4e00\u4e2a\u6df1\u601d\u719f\u8651\u7684\u60f3\u6cd5(\u4ed6\u4eec\u5c31\u662f\u4e0d\u660e\u767d)\uff0c\u4f46\u4ed6\u4eec\u4f1a\u5f88\u9ad8\u5174\u5730\u4f20\u64ad\u5176\u4ed6\u611a\u8822\u7684\u8bc4\u8bba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u540c\u610f\u8fd9\u4e9b\u60f3\u6cd5\uff0c\u6216\u8005\u89c9\u5f97\u5b83\u4eec\u5f88\u6709\u8da3\u3002\u5047\u65b0\u95fb\u5c31\u662f\u8fd9\u6837\u4f20\u64ad\u7684\uff0c\u6781\u7aef\u4e3b\u4e49\u89c2\u70b9\u5c31\u662f\u8fd9\u6837\u6b63\u5e38\u5316\u7684\u3002\n\u4e00\u5343\u4e2a\u806a\u660e\u4eba\u4f1a\u9ad8\u5174\u5730\u6279\u8bc4\u4e00\u4e2a\u611a\u8822\u7684\u89c2\u70b9\u3002\u4e00\u5343\u4e2a\u611a\u8822\u7684\u4eba\u6c38\u8fdc\u4e0d\u4f1a\u62d2\u7edd\u6df1\u601d\u719f\u8651\u7684\u610f\u89c1\u3002\u4ed6\u4eec\u5c31\u662f\u4e0d\u660e\u767d\u3002\nTwitter\u662f\u4e00\u4e2a\u611a\u8822\u4ec5\u51ed\u6570\u5b57\u53d6\u80dc\u7684\u5730\u65b9\u3002\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u7406\u667a\u548c\u6e29\u548c\u7684\u4eba\uff0c\u4f60\u60f3\u8981\u83b7\u5f97\u4eba\u6c14\uff0c\u8ffd\u968f\u8005\u548c\u5373\u65f6\u901a\u8baf\uff0c\u4f60\u5fc5\u987b\u6309\u7167\u5927\u591a\u6570\u4eba\u7684\u89c4\u5219\u73a9\u3002\u8fd9\u610f\u5473\u7740\u8981\u548c\u7334\u5b50\u4e00\u8d77\u8fdb\u5165\u7b3c\u5b50\u3002\n\u6162\u6162\u5730\uff0c\u4f46\u6301\u7eed\u5730\uff0c\u4f60\u91c7\u7528\u4ed6\u4eec\u6700\u7cdf\u7cd5\u7684\u505a\u6cd5\u3002\u4f60\u51b3\u5b9a\u201c\u4ee5\u7259\u8fd8\u7259\u201d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u8981\u50cf\u4ed6\u4eec\u4e00\u6837\u3002\u60a8\u63a0\u593a\u5176\u4ed6\u7528\u6237\uff0c\u968f\u65f6\u51c6\u5907\u653b\u51fb\u4ed6\u4eec\u6700\u8f7b\u5fae\u7684\u9519\u8bef\u3002\u5492\u9a82\u8fc5\u901f\u53d6\u4ee3\u4f60\u7684\u8bbd\u523a\u3002\u4f60\u7684\u673a\u667a\u662f\u6ca1\u7528\u7684\uff0c\u4f60\u8bf4\u7684\u662f\u6d45\u663e\u660e\u4e86\u7684\u8d2c\u4f4e\u4e4b\u8bcd\u3002\u4f60\u7684\u5728\u7ebf\u4f53\u9a8c\u53d8\u6210\u4e86\u5bf9\u660e\u663e\u9519\u8bef\u7684\u89c2\u70b9\u3001\u4e8b\u5b9e\u548c\u4e3b\u5f20\u7684\u65e0\u60c5\u7684\u201c\u641c\u7d22\u548c\u7834\u574f\u201d(\u6216\u8005\u8bf4\u4f60\u662f\u8fd9\u4e48\u8bf4\u7684)\u3002\n\u8fd9\u662f\u4e00\u79cd\u4f60\u6b7b\u6211\u6d3b\u7684\u5c40\u9762\uff0c\u4f60\u7684\u654f\u6377\u6280\u80fd\u4e00\u6587\u4e0d\u503c\uff0c\u4f60\u9700\u8981\u7684\u662f\u4e00\u5bf9\u5c16\u7259\uff0c\u4e24\u5bf9\u5feb\u901f\u7684\u817f\u548c\u4e00\u4e2a\u80cc\u5305\u6765\u52a0\u5165\u3002\n\u73b0\u5728\u4f60\u6700\u7cdf\u7cd5\u7684\u4e00\u9762\u5df2\u7ecf\u66b4\u9732\u51fa\u6765\u4e86\u3002\u8fd9\u662f\u4e00\u79cd\u4f60\u6b7b\u6211\u6d3b\u7684\u5c40\u9762\uff0c\u4f60\u7684\u654f\u6377\u6280\u80fd\u4e00\u6587\u4e0d\u503c\uff0c\u4f60\u9700\u8981\u7684\u662f\u4e00\u5bf9\u5c16\u7259\uff0c\u4e24\u5bf9\u5feb\u901f\u7684\u817f\uff0c\u4ee5\u53ca\u4e00\u4e2a\u80cc\u5305\u6765\u52a0\u5165\u3002\u8fd9\u5c31\u50cf\u4e00\u4e2a\u201c\u884c\u5c38\u8d70\u8089\u201d\u7684\u60c5\u51b5\uff0c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u662f\u6d3b\u7740\u7684\u4eba\u4e2d\u7684\u4e00\u5458\uff0c\u6709\u4e00\u5929\uff0c\u4f60\u610f\u8bc6\u5230\u4f60\u548c\u5b83\u5f97\u5230\u7684\u4e00\u6837\u6b7b\u4e86\uff0c\u8d70\u8def\uff0c\u5c16\u53eb\uff0c\u8f6c\u53d1\u63a8\u7279\u3002", "note_en": "Toxic people, demeaning comments and spreading stupidity are just the surface. Underneath lies our own worst self.\n   When was the last time you RT\u2019d (RT, not a reply) a ridiculous and absurd tweet, just to prove that the poster is wrong?\n How often do you browse through your feed to find the next \u201cstupid person\u201d to make fun of?\n What is your primary motive when you write a tweet? Do you tweet to offer some new and valuable information? To reward an account that you follow and admire? Or to show to anyone that you are smarter than the others?\n It took me eight years and over 30.000 tweets to realize that I was part of a community that made me sad. Twitter a medium that everything absurd is promoted, everything extreme is spread, and everything sane is attacked viciously.\n  I made it my mission to alter this. I was continually searching for someone less smart than me to torment. I was looking for mistakes online (tweets, media titles, etc.), and I made sure I broadcasted them to the world (my followers, actually) to make me seem smarter. Over the last year of my presence, I was angry, ranting about everything.\n It took me 8 years and more than 30.000 tweets to realize that I was part of a community that made me sad.\n  Most people don\u2019t realize that if you want to criticize something, you first have to promote it. And when you promote it, it becomes known, it is spread and (sometimes) gets viral. And then everyone knows about it and talks about it while your opinion is lost in the buzz.\n Congratulations, you \u2019ve just been outsmarted by a stupid person. And it\u2019s all your fault.\n  A \u201cprotest tweet\u201d (like a protest vote) is usually wrong. In the best-case scenario, you make a dumb person famous. In the worst case, you help extremist views and fringe opinions to spread, thus normalize them.\n  A thousand smart people will happily RT a stupid view to criticize it, giving it a dominant position over moderate or well-thought opinions. A thousand stupid people will never RT a well-thought idea (they just don\u2019t get it), but they will happily spread other stupid comments because they agree with them or find them interesting. That\u2019s how fake news is spread, that\u2019s how extremist views are normalized.\n A thousand smart people will happily RT a stupid view in order to criticize it. A thousand stupid people will never RT a well thought opinion. They just don\u2019t get it.\n Twitter is a place where stupidity wins just by sheer numbers. If you are a sane and moderate person, and you want to gain popularity, followers, and RTs, you have to play by the rules of the majority. And that means to enter the cage with the monkeys.\n  Slowly, but continuously, you adopt their worst practices. You decide to fight \u201cfire with fire,\u201d which, in this case, means to be just like them. You prey over other users, ready to attack at their slightest mistake. Swears rapidly replace your sarcasm. Your wit is useless; you use plain and clear demeaning words. Your online experience becomes a relentless \u201csearch and destroy\u201d for opinions, facts, and claims that are obviously wrong (or so you say).\n It\u2019s a dog-eat-dog situation where your agility skills are worthless and what you need is a pair of fangs, two pairs of fast legs and a pack to join.\n Now your worst self is out in the open. It\u2019s a dog-eat-dog situation where your agility skills are worthless, and what you need is a pair of fangs, two pairs of fast legs, and a pack to join. It\u2019s like a \u201cWalking Dead\u201d situation where you think you \u2019re among the living people, and one day, you realize that you are as dead as it gets, walking, screaming, and retweeting.", "posttime": "2020-07-28 14:26:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u63a8\u7279,\u9000\u51fa,quit,\u89c2\u70b9", "title": "\u9000\u51fa\u63a8\u7279(2019\u5e74)", "title_en": "Quit Twitter (2019)", "transed": 1, "url": "https://medium.com/swlh/why-you-should-quit-twitter-9b93396def2d", "via": "", "real_tags": ["\u63a8\u7279", "\u9000\u51fa", "quit", "\u89c2\u70b9"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014614, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Infinno\u00ae\u662f\u4e00\u6b3e\u7d27\u51d1\u578b\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e13\u4e3a\u5728\u5404\u79cd\u8bbe\u5907\u548c\u5e73\u53f0\u4e0a\u6784\u5efa\u5206\u5e03\u5f0f\u548c\u8054\u7f51\u7cfb\u7edf\u800c\u8bbe\u8ba1\u3002\u51ed\u501f\u8bb8\u591a\u5148\u8fdb\u548c\u72ec\u7279\u7684\u529f\u80fd\uff0cInferno\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4e00\u5957\u65e0\u4e0e\u4f26\u6bd4\u7684\u5de5\u5177\uff0c\u60a8\u73b0\u5728\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u81ea\u7531\u8f6f\u4ef6\u83b7\u53d6\uff0c\u6761\u4ef6\u7c7b\u4f3c\u4e8eLinux\u6216xBSD\u3002\n\u8de8\u5e73\u53f0\u53ef\u79fb\u690d\u6027Inferno\u53ef\u4ee5\u4f5c\u4e3a\u7528\u6237\u5e94\u7528\u7a0b\u5e8f\u5728\u73b0\u6709\u64cd\u4f5c\u7cfb\u7edf\u4e4b\u4e0a\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u72ec\u7acb\u64cd\u4f5c\u7cfb\u7edf\u8fd0\u884c\u3002\u652f\u6301\u5927\u591a\u6570\u6d41\u884c\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\uff1a\u4f5c\u4e3a\u6f14\u793a\uff0cInferno\u8fd8\u5728Internet Explorer\u7248\u672c4\u4e0b\u4f5c\u4e3a\u63d2\u4ef6\u8fd0\u884c\u3002\u6bcf\u4e2aInferno\u7cfb\u7edf\u90fd\u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u76f8\u540c\u7684\u73af\u5883\uff0c\u800c\u4e0e\u5e95\u5c42\u4e3b\u673a\u64cd\u4f5c\u7cfb\u7edf\u6216\u4f53\u7cfb\u7ed3\u6784\u65e0\u5173\uff0c\u4ece\u800c\u5141\u8bb8\u5f00\u53d1\u4eba\u5458\u8de8\u591a\u4e2a\u4e0d\u540c\u7684\u5e73\u53f0\u4f7f\u7528\u771f\u6b63\u7684\u540c\u6784\u73af\u5883\u3002\u4fbf\u643a\u5e94\u7528\u7a0b\u5e8fInferno\u5e94\u7528\u7a0b\u5e8f\u662f\u7528LIMBO\u00ae\u7f16\u5199\u7684\uff0cLIMBO\u00ae\u662f\u4e00\u79cd\u4f7f\u7528\u7c7b\u4f3cC\u7684\u8bed\u6cd5\u7684\u73b0\u4ee3\u3001\u5b89\u5168\u3001\u6a21\u5757\u5316\u7684\u5e76\u53d1\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u6bd4C\u66f4\u5f3a\u5927\uff0c\u4f46\u6bd4C++\u6216Java\u66f4\u5bb9\u6613\u7406\u89e3\u548c\u8c03\u8bd5\u3002\u5f88\u5bb9\u6613\u76f4\u63a5\u7528Libo\u7684\u8bed\u6cd5\u6765\u8868\u8fbe\u7269\u7406\u4e16\u754c\u4e2d\u7684\u5e76\u53d1\u6027\u3002\u4efb\u4f55Inferno\u5e94\u7528\u7a0b\u5e8f\u90fd\u5c06\u5728\u6240\u6709Inferno\u5e73\u53f0\u4e0a\u5b8c\u5168\u76f8\u540c\u5730\u8fd0\u884c\u3002\u53ef\u79fb\u690d\u4ee3\u7801\u8fb9\u7f18\u4ee3\u7801\u88ab\u7f16\u8bd1\u6210\u7528\u4e8eDIS\u00ae\u865a\u62df\u673a\u7684\u72ec\u7acb\u4e8e\u4f53\u7cfb\u7ed3\u6784\u7684\u4ee3\u7801\uff0c\u5177\u6709\u7d27\u51d1\u7684\u8868\u793a\u5f62\u5f0f\u3002DIS\u53ef\u4ee5\u76f4\u63a5\u89e3\u91ca(\u8282\u7701\u7a7a\u95f4)\uff0c\u4e5f\u53ef\u4ee5\u9488\u5bf9\u7ed9\u5b9a\u7684\u76ee\u6807\u5904\u7406\u5668\u8fdb\u884c\u52a8\u6001\u7f16\u8bd1(\u8282\u7701\u65f6\u95f4)\u3002\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6309\u6a21\u5757\u8fdb\u884c\u9009\u62e9\u3002DIS\u4f53\u7cfb\u7ed3\u6784\u7ecf\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u53ef\u4ee5\u76f4\u63a5\u751f\u6210\u5373\u65f6\u4ee3\u7801\u3002\u5176\u6307\u4ee4\u6613\u4e8e\u5b9e\u73b0\u3002Transparent Resources Inferno\u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u4f46\u529f\u80fd\u5f3a\u5927\u7684\u547d\u540d\u7a7a\u95f4\u7cfb\u7edf\u63d0\u4f9b\u5b8c\u5168\u900f\u660e\u7684\u8d44\u6e90\u548c\u6570\u636e\u3002\u901a\u8fc7\u5c06\u8d44\u6e90\u8868\u793a\u4e3a\u6587\u4ef6\u5e76\u5177\u6709\u4e00\u4e2a\u6807\u51c6\u901a\u4fe1\u534f\u8bae-9P(Styx\u00ae)-\u53ef\u4ee5\u5728Inferno\u7cfb\u7edf\u4e4b\u95f4\u8f7b\u677e\u5171\u4eab\u6570\u636e\u5b58\u50a8\u3001\u670d\u52a1\u548c\u5916\u90e8\u8bbe\u5907\u7b49\u8d44\u6e90\u3002\u8d44\u6e90\u63a5\u53e3\u53ef\u4ee5\u88ab\u5bfc\u5165\u5230\u672c\u5730\u7cfb\u7edf\u5e76\u7531\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\uff0c\u800c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u77e5\u9053\u6216\u4e0d\u9700\u8981\u77e5\u9053\u5b83\u662f\u672c\u5730\u7684\u8fd8\u662f\u8fdc\u7a0b\u7684\u3002\u5b89\u5168\u6027\u9ad8\u7ea7\u5b89\u5168\u6027\u662f\u5730\u72f1\u7cfb\u7edf\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u901a\u8fc7\u5bf9\u6240\u6709\u7f51\u7edc\u901a\u4fe1\u4f7f\u7528\u4e00\u4e2a\u6807\u51c6\u534f\u8bae\uff0c\u53ef\u4ee5\u5c06\u5b89\u5168\u96c6\u4e2d\u5728\u4e00\u4e2a\u70b9\u4e0a\uff0c\u5e76\u5728\u7cfb\u7edf\u7ea7\u522b\u63d0\u4f9b\u5b89\u5168\u3002Inferno\u4f7f\u7528\u57fa\u4e8e\u8bc1\u4e66\u7684\u7528\u6237\u8bc6\u522b\u65b9\u6848\u548c\u5404\u79cd\u7b97\u6cd5\u4e3a\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u52a0\u5bc6\u8fde\u63a5\u63d0\u4f9b\u5168\u9762\u652f\u6301\uff0c\u5305\u62ec\uff1a\u5b8c\u6574\u7684\u89e3\u51b3\u65b9\u6848Inferno\u4e0d\u4ec5\u662f\u4e00\u4e2a\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd8\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5f00\u53d1\u73af\u5883\uff0c\u63d0\u4f9b\u521b\u5efa\u3001\u6d4b\u8bd5\u548c\u8c03\u8bd5\u5728\u5176\u4e2d\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u9700\u7684\u6240\u6709\u5de5\u5177\u3002\u8981\u4e86\u89e3Vita Nuova\u548cInferno\u5982\u4f55\u4e3a\u60a8\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\u6216\u9009\u62e9\u4ee5\u4e0b\u94fe\u63a5\u4e4b\u4e00\u3002\nCOMPACT\u53ef\u4ee5\u5728\u53ea\u67091MB\u5185\u5b58\u7684\u8bbe\u5907\u4e0a\u8fd0\u884c\u5b8c\u6574\u7684\u5f00\u53d1\u73af\u5883\uff0c\u5305\u62ecAcme IDE\u3001\u7f16\u8bd1\u5668\u3001shell\u3001\u7c7bUNIX\u547d\u4ee4&amp\uff1bGraphical Debugger Limbo\u00ae\u662f\u4e00\u79cd\u9ad8\u7ea7\u6a21\u5757\u5316\u3001\u5b89\u5168\u7684\u5e76\u53d1\u7f16\u7a0b\u8bed\u8a00\uff0c\u91c7\u7528\u7c7b\u4f3cC\u7684\u8bed\u6cd5\u3002\u5e93\u6a21\u5757\u7528\u4e8e\u7f51\u7edc\u3001\u56fe\u5f62(\u5305\u62ecGUI\u5de5\u5177\u5305)\u3001\u5b89\u5168\u7b49\u7684\u8fb9\u7f18\u6a21\u5757...\u3002DIS\u00ae\u865a\u62df\u673a\u865a\u62df\u673a\uff0c\u63d0\u4f9b\u76ee\u6807\u7cfb\u7edf\u72ec\u7acb\u6027\u548c\u7d27\u51d1\u4ee3\u7801\u3002JIT\u7f16\u8bd1\u901a\u8fc7\u52a8\u6001(\u53ca\u65f6)\u7f16\u8bd1\u76ee\u6807\u4ee3\u7801\u6765\u63d0\u9ad8\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u3002\u4f7f\u7528\u5355\u4e00\u901a\u4fe1\u534f\u8bae9p\u7684\u540d\u79f0\u7a7a\u95f4\u5f3a\u5927\u7684\u8d44\u6e90\u8868\u793a\u3002\u5b8c\u5168\u900f\u660e\u5730\u5bfc\u5165\u548c\u5bfc\u51fa\u8d44\u6e90\u3002\u5b8c\u6574\u6e90\u4ee3\u7801\u6574\u4e2a\u7cfb\u7edf\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u5b8c\u6574\u6e90\u4ee3\u7801\uff0c\u53d7\u8bb8\u53ef\u6761\u6b3e\u9650\u5236", "note_en": "Inferno\u00ae is a compact operating system designed for building distributed and networked systems on a wide variety of devices and platforms. With many advanced and unique features, Inferno puts an unrivalled set of tools into your hands.You can  fetch it now as Free Software, on similarterms to Linux or xBSD.\n  Cross-Platform Portability Inferno can run as a user application on top of an existing operating system or as a stand alone operating system. Most of the popular operating systems and processor architectures are supported: As a demonstration, Inferno also ran as a  plug-in under Internet Explorer version 4. Each Inferno system presents an identical environment to the applications, irrespective of the underlying host OS or architecture, allowing the developer to work with a truly homogeneous environment across multiple different platforms. Portable Applications Inferno applications are written in  Limbo\u00ae, a modern, safe, modular, concurrent programming language with C-like syntax. It is more powerful than C but considerably easier to understand and debug than C++ or Java. It is easy to express the concurrency in the physical world directly in Limbo&#39;s syntax.Any Inferno application will run identically on all Inferno platforms. Portable Code Limbo code is compiled into architecture independent code for the  Dis\u00aeVirtual Machine, with a compact representation.Dis can be interpreted directly (saving space), or compiled on the fly for a given target processor (saving time).The choice can be made at run-time, per module.The Dis architecture was  carefully designed to make on-the-fly code generation straightforward.Its instructions are easy to implement. Transparent Resources Inferno offers complete transparency of resources and data using a simple but powerful &#39;namespace&#39; system. By representing resources as files and having one standard communication protocol \u2014  9P (Styx\u00ae) \u2014 resources such as data stores, services and external devices can easily be shared between Inferno systems. A resource interface may be imported to the local system and used by the applications without them knowing, or needing to know, whether it is local or remote. Security High level security is an important part of the Inferno system. By using one standard protocol for all network communication, security can be focused on one point and provided at a system level. Inferno offers full support for authenticated, encrypted connections using a certificate based user identification scheme and variety of algorithms including:  A Complete Solution Inferno is not only an operating system, it is also a complete development environment, providing all the tools necessary for creating, testing and debugging the applications that run within it.  To see how Vita Nuova and Inferno can provide a solution for you,  contact us or select one of the links below.\n  Compact Runs on devices with as little as 1MB of RAM Complete Development Environment Including Acme IDE, compilers, shell, UNIX like commands &amp; graphical debugger Limbo\u00ae An advanced modular, safe, concurrent programming language with C like syntax. Library Modules Limbo modules for networking, graphics (including GUI toolkit), security and more... Dis\u00ae Virtual Machine Virtual machine providing target system independence and compact code. JIT Compilation Improves application performance by compiling object code on the fly (Just In Time). Namespaces Powerful resource representation using a single communication protocol,  9P. Import and export resources completely transparently. Full Source Code Full source code for the whole system and applications, subject to  licence terms", "posttime": "2020-07-28 14:26:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u64cd\u4f5c\u7cfb\u7edf,\u5730\u72f1,inferno", "title": "\u5730\u72f1\u64cd\u4f5c\u7cfb\u7edf", "title_en": "Inferno OS", "transed": 1, "url": "http://www.vitanuova.com/inferno/index.html", "via": "", "real_tags": ["\u64cd\u4f5c\u7cfb\u7edf", "\u5730\u72f1", "inferno"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014613, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8f6f\u4ef6\u751f\u6001\u7cfb\u7edf\u6709\u5f88\u591a\u6709\u7528\u4f46\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\uff0c\u7528\u6c99\u7bb1\u4fdd\u62a4\u8fd9\u4e9b\u4ee3\u7801\u8d8a\u5bb9\u6613\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c31\u8d8a\u7ecf\u5e38\u53d1\u751f\u3002\u5982\u679c\u53ea\u9700\u5411\u7f16\u8bd1\u5668\u4f20\u9012\u4e00\u4e2a--sandbox\u6807\u5fd7\uff0c\u4f7f\u4e0d\u5b89\u5168\u7684\u5e93\u65e0\u6cd5\u770b\u5230\u6216\u5f71\u54cd\u5176\u5916\u90e8\u7684\u4efb\u4f55\u5185\u5bb9\uff0c\u90a3\u5c31\u592a\u4e0d\u53ef\u601d\u8bae\u4e86\uff01\u6211\u4eec\u4e0d\u80fd\u5f88\u5bb9\u6613\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u7bc7\u6587\u7ae0\u63cf\u8ff0\u4e86WasmBoxC\uff0c\u4e00\u79cd\u975e\u5e38\u5bb9\u6613\u4f7f\u7528\u7684\u6c99\u7bb1\u65b9\u6cd5\u3002\u60a8\u9700\u8981\u505a\u7684\u5c31\u662f\uff1a\n\u4f7f\u7528WebAssembly(Wasm)\u7f16\u8bd1\u5668\u800c\u4e0d\u662f\u666e\u901a\u7684\u7cfb\u7edf\u7f16\u8bd1\u5668\u7f16\u8bd1\u4e0d\u5b89\u5168\u7684\u5e93\u3002\u8fd9\u5728\u5185\u90e8\u4f7f\u7528wasm\uff0c\u4f46\u60a8\u4e0d\u9700\u8981\u5173\u5fc3\u8fd9\u4e00\u70b9-\u60a8\u6240\u770b\u5230\u7684\u5c31\u662f\u5b83\u53d1\u51fa\u4e00\u4e2a\u5e26\u6709\u6c99\u7bb1\u4ee3\u7801\u7684C\u6587\u4ef6\u3002\n\u7f16\u5199\u4e00\u4e9bC\u6765\u4e0e\u4e0d\u5b89\u5168\u5e93\u7684\u7f16\u8bd1\u540e\u7684C\u8fdb\u884c\u63a5\u53e3\u3002(\u8fd9\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6c99\u7bb1\u4ee3\u7801\u4e0d\u80fd\u8bbf\u95ee\u5916\u90e8\u5185\u5b58\uff0c\u800c\u4e14\u5b83\u8fd8\u4f7f\u7528\u53ef\u79fb\u690d\u7684wasm ABI\u3002)\u3002\n\u7f16\u8bd1\u5e76\u94fe\u63a5C\u4ee3\u7801\uff0c\u73b0\u5728\u4e0d\u5b89\u5168\u7684\u5e93\u4e0e\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4f59\u90e8\u5206\u88ab\u6c99\u7bb1\u9694\u5f00\u4e86\uff01\u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u770b\u5230\u8fd9\u4e24\u4e2a\u6b65\u9aa4\u662f\u591a\u4e48\u5bb9\u6613\u7684\u5177\u4f53\u793a\u4f8b\u3002\n\u901a\u8fc7\u7f16\u8bd1\u5230wasm\uff0c\u6211\u4eec\u7528\u6c99\u7bb1\u4fdd\u62a4\u4ee3\u7801\uff0c\u9632\u6b62\u5b83\u8bbf\u95ee\u5916\u90e8\u7684\u4efb\u4f55\u4e1c\u897f\u3002\u8fd9\u5305\u62ec\u5185\u5b58(\u6c99\u7bb1\u4ee3\u7801\u4e0d\u80fd\u8bfb\u5199\u5b83\u4ee5\u5916\u7684\u4efb\u4f55\u5730\u65b9)\u548c\u529f\u80fd-\u6c99\u7bb1\u4ee3\u7801\u9664\u4e86\u7eaf\u8ba1\u7b97\u4e4b\u5916\u4e0d\u80fd\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u9664\u975e\u60a8\u7ed9\u5b83\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u7528\u5b83\u6765\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u5982\u8bfb\u53d6\u6587\u4ef6\u3001\u544a\u77e5\u65f6\u95f4\u7b49\u3002\u6211\u4eec\u8fd8\u5f97\u5230\u4e86\u5176\u4f59\u7684wasm\u5b89\u5168\u6027\u548c\u53ef\u79fb\u690d\u6027\u4fdd\u8bc1\u3002Wasmsandboxing\u751a\u81f3\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u4e0e\u5176\u4ed6\u4ee3\u7801\u76f8\u540c\u7684\u8fdb\u7a0b\u4e2d\u8fd0\u884c(\u81f3\u5c11\u662f\u6a21\u9891\u8c31\u7c7b\u578b\u7684\u6f0f\u6d1e)\uff0c\u8fd9\u4e0e\u8f6f\u4ef6\u6545\u969c\u9694\u79bb(SFI)\u975e\u5e38\u76f8\u4f3c\u3002\n\u5728\u6211\u4eec\u7f16\u8bd1\u4e86\u4e00\u4e2a\u4e0d\u5b89\u5168\u7684wasm\u5e93\u4e4b\u540e\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u5176\u4f5c\u4e3a\u5e94\u7528\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u6765\u8fd0\u884c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u96c6\u6210\u4e00\u4e2awasm VM\u5e76\u5728\u90a3\u91cc\u8fd0\u884cwasm\u3002\u4f46\u662f\uff0c\u4f7f\u7528WasmBoxC\u65f6\uff0c\u6211\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u65e0VM\u7684\u65b9\u6cd5\uff0c\u5c06wasm\u7f16\u8bd1\u6210\u672c\u673a\u4ee3\u7801\uff0c\u540c\u65f6\u4fdd\u7559\u4e86wasm\u8bed\u4e49\uff0c\u5305\u62ec\u6c99\u7bb1\uff0c\u8be5\u672c\u673a\u4ee3\u7801\u53ef\u4ee5\u6b63\u5e38\u94fe\u63a5\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd9\u6bd4\u96c6\u6210wasm VM\u7b80\u5355\u5f97\u591a\u3002\nWasmBoxC\u5c06wasm\u7f16\u8bd1\u4e3a\u672c\u673a\u4ee3\u7801\u7684\u5177\u4f53\u65b9\u6cd5\u662f\u4f7f\u7528wabt\u7684wam2c\u5de5\u5177\u5c06\u5176\u7f16\u8bd1\u4e3aC\uff0c\u7136\u540e\u5728\u5176\u4e0a\u8fd0\u884c\u6807\u51c6C\u7f16\u8bd1\u5668\u3002\u4e8b\u5b9e\u4e0a\uff0cWasmBoxC\u7684\u65b9\u6cd5\u7f16\u8bd1\u6210C\u7684\u4e00\u4e2a\u7b80\u5355\u5b50\u96c6\uff0c\u8fd9\u662f\u8be5\u65b9\u6cd5\u5982\u6b64\u7b80\u5355\u7684\u5f88\u5927\u4e00\u90e8\u5206\u539f\u56e0\uff0c\u5e76\u5e26\u6765\u4e86\u51e0\u4e2a\u4f18\u70b9\uff1a\n\u5b83\u8ba9\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u50cfclang\u6216GCC\u8fd9\u6837\u7684C\u7f16\u8bd1\u5668\u6765\u5feb\u901f\u7f16\u5199\u6c99\u76d2\u4ee3\u7801\u3002\n\u5355\u4e2a\u6784\u5efa\u7684C\u4ee3\u7801\u51e0\u4e4e\u53ef\u4ee5\u5728\u4efb\u4f55\u5e73\u53f0\u4e0a\u7f16\u8bd1\u548c\u8fd0\u884c\uff0c\u5e76\u4e14\u4e0e\u6c99\u7bb1\u4ea4\u4e92\u7684\u4ee3\u7801\u4e5f\u53ea\u9700\u8981\u7f16\u5199\u4e00\u6b21\u3002\n\u5c3d\u7ba1\u4f7f\u7528C\u5f88\u7b80\u5355\uff0c\u4f46WasmBoxC\u6c99\u7bb1\u7684\u5f00\u9500\u5f88\u4f4e\uff1a\u4f7f\u7528\u4e00\u4e9b\u4e0d\u53ef\u79fb\u690d\u7684C\u4ee3\u7801(\u201c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6280\u5de7\u201d\uff0c\u89c1\u540e\u6587)\u53ea\u670914%\uff0c\u800c\u5728100%\u53ef\u79fb\u690d\u7684C\u4e2d\u53ea\u670942%(\u6839\u672c\u6ca1\u6709\u7279\u5b9a\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u6216CPU\u7684\u64cd\u4f5c)\u3002\u6211\u4eec\u8fd8\u5c06\u770b\u5230\u572814%\u548c42%\u7684\u6570\u5b57\u4e4b\u95f4\u6709\u9009\u9879\u3002\nWasmBoxC\u7684\u57fa\u672c\u601d\u60f3\u5f88\u7b80\u5355\uff0c\u4e0d\u662f\u72ec\u521b\u7684\u3002\u8fd9\u7bc7\u6587\u7ae0\u7684\u521b\u65b0\u4e4b\u5904\u5728\u4e8e\u5c55\u793a\u4e86\u8be5\u65b9\u6cd5\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u5bf9\u771f\u5b9e\u4e16\u754c\u7684\u4ee3\u7801\u8fdb\u884c\u4e86\u57fa\u51c6\u6d4b\u8bd5\u4ee5\u8bc1\u660e\u5b83\u662f\u5feb\u901f\u7684\uff0c\u7ed9\u51fa\u4e86\u7528\u6c99\u7bb1\u5bf9\u771f\u5b9e\u4e16\u754c\u7684\u5e93\u8fdb\u884c\u6c99\u7bb1\u662f\u591a\u4e48\u5bb9\u6613\u7684\u5b8c\u6574\u793a\u4f8b\uff0c\u5e76\u8be6\u7ec6\u63cf\u8ff0\u4e86\u8be5\u65b9\u6cd5\u7684\u4f18\u70b9(\u7279\u522b\u53c2\u89c1\u5173\u4e8e\u5185\u5b58\u5b89\u5168\u8bed\u8a00\u7684\u4e00\u8282)\u3002\u8fd9\u7bc7\u6587\u7ae0\u8fd8\u4e3a\u8be5\u6280\u672f\u8d77\u4e86\u4e00\u4e2a\u540d\u5b57\u3002\n\u4e3a\u4e86\u4e86\u89e3WasmBoxC\u7684\u901f\u5ea6\uff0c\u8ba9\u6211\u4eec\u6765\u770b\u770b20\u4e2a\u57fa\u51c6\u6d4b\u8bd5\uff0c\u6bd4\u8f83\u4e00\u4e0bclang 9.0.1\u3001clang 11(\u622a\u6b62\u52302020\u5e745\u670823\u65e5\u7684\u5f00\u53d1\u7248\u672c)\u3001GCC 9.2.1\u548cWasmBoxC\u3002\u6240\u6709\u6570\u5b57\u90fd\u5f52\u4e00\u5316\u4e3aclang 9(\u56e0\u6b64\u7b49\u4e8e1\uff1b\u6570\u5b57\u8d8a\u5c0f\u8d8a\u597d)\u3002\n\u8fd9\u4e9b\u57fa\u51c6\u6d4b\u8bd5\u5305\u62ec\u5404\u79cd\u5404\u6837\u7684\u4ee3\u7801\uff0c\u4ee5zzz_\u4e3a\u524d\u7f00\u7684\u662f\u771f\u5b9e\u7684\u4ee3\u7801\u5e93\u6216\u57fa\u51c6\u6d4b\u8bd5\uff1aBox2D\u548cBulletPhysical\u5f15\u64ce\u3001CoreMark\u548cLINPACK\u57fa\u51c6\u6d4b\u8bd5\u3001Lua VM(\u4e00\u4e2aGC\u548c\u4e00\u4e2a\u8ba1\u7b97\u57fa\u51c6\u6d4b\u8bd5)\u3001LZMA\u548czlib\u538b\u7f29\u5e93\u4ee5\u53caSQLite\u6570\u636e\u5e93\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u8868\u660eWasmBoxC\u73b0\u5728\u53ef\u4ee5\u8fd0\u884c\u6240\u6709\u8fd9\u4e9b\uff01\nWasmBoxC\u663e\u793a\u4e86\u4e24\u4e2a\u7ed3\u679c\uff0c\u4ee3\u8868\u4e86\u5185\u5b58\u6c99\u7bb1\u7684\u4e24\u4e2a\u5b9e\u73b0\u3002\u7b2c\u4e00\u79cd\u662f\u663e\u5f0f\u6c99\u7bb1\uff0c\u5176\u4e2d\u4f7f\u7528\u663e\u5f0f\u68c0\u67e5(\u5373\uff0c\u5728\u6bcf\u6b21\u5185\u5b58\u8bbf\u95ee\u4e4b\u524d\u6267\u884cIF\u8bed\u53e5)\u6765\u663e\u5f0f\u9a8c\u8bc1\u6bcf\u4e2a\u5185\u5b58\u52a0\u8f7d\u548c\u5b58\u50a8\u662f\u5426\u5728\u6c99\u7bb1\u5185\u5b58\u4e2d\u3002\u8fd9\u670942%\u7684\u5f00\u9500\u3002\n\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u4f7f\u7528wasm VM\u7684\u201c\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6280\u5de7\u201d\u3002\u8be5\u6280\u672f\u5728\u6709\u6548\u8303\u56f4\u5185\u4fdd\u7559\u5927\u91cf\u5185\u5b58\uff0c\u5e76\u4f9d\u8d56CPU\u786c\u4ef6\u5728\u8bbf\u95ee\u8d8a\u754c\u65f6\u7ed9\u51fa\u4fe1\u53f7(\u6709\u5173\u66f4\u591a\u80cc\u666f\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605Tan\uff0c2017\u4e2d\u76843.1.4\u8282)\u3002\u8fd9\u662f\u5b8c\u5168\u5b89\u5168\u7684\uff0c\u5e76\u4e14\u5177\u6709\u907f\u514d\u663e\u5f0f\u8fb9\u754c\u68c0\u67e5\u7684\u597d\u5904\u3002\u5b83\u53ea\u670914%\u7684\u5f00\u9500\uff01\u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u7528\u4e8e\u6240\u6709\u5730\u65b9(\u5b83\u9700\u8981\u4fe1\u53f7\u548cCPU\u5185\u5b58\u4fdd\u62a4\uff0c\u5e76\u4e14\u53ea\u80fd\u572864\u4f4d\u7cfb\u7edf\u4e0a\u8fd0\u884c)\u3002\n\u5728\u8fd914%\u523042%\u7684\u6570\u5b57\u4e4b\u95f4\u6709\u66f4\u591a\u7684\u9009\u62e9\u3002\u663e\u5f0f\u548c\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u6c99\u7bb1\u5b8c\u7f8e\u5730\u4fdd\u7559\u4e86wasm\u8bed\u4e49\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u9677\u9631\u5c06\u6070\u597d\u5728wasm VM\u5c06\u88ab\u6355\u83b7\u65f6\u53d1\u751f\u3002\u5982\u679c\u6211\u4eec\u613f\u610f\u653e\u677e\u8fd9\u4e00\u70b9(\u4f46\u5982\u679c\u6211\u4eec\u8fd9\u6837\u505a\u4e86\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u60f3\u79f0\u4e4b\u4e3awasm)\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6539\u7528\u63a9\u853d\u6c99\u7bb1(\u53c2\u89c1Tan\uff0c2017\u4e2d\u76843.1.3\u8282)\uff0c\u5b83\u662f100%\u53ef\u79fb\u690d\u7684\uff0c\u5c31\u50cf\u663e\u5f0f\u6c99\u7bb1\u4e00\u6837\uff0c\u8fd8\u53ef\u4ee5\u9632\u6b62\u4efb\u4f55\u6c99\u7bb1\u5916\u7684\u8bbf\u95ee\uff0c\u5e76\u4e14\u5f00\u9500\u4e3a29%\uff0c\u7565\u5feb\u4e00\u4e9b\u3002\u6c99\u7bb1\u7684\u5176\u4ed6\u6539\u8fdb\u4e5f\u662f\u53ef\u80fd\u7684--\u51e0\u4e4e\u8fd8\u6ca1\u6709\u4eba\u5728\u8fd9\u65b9\u9762\u505a\u8fc7\u4efb\u4f55\u52aa\u529b\u3002\n\u5728lua_binarytree\u548chavlak\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u53d1\u751f\u4e86\u4e00\u4ef6\u6709\u8da3\u7684\u4e8b\u60c5\uff0c\u5728\u6240\u6709\u6c99\u7bb1\u6a21\u5f0f\u4e0b\uff0cWasmBoxC\u5b9e\u9645\u4e0a\u90fd\u6bd4GCC\u548cCang\u90fd\u5feb\uff0c\u9ad8\u8fbe32%\uff01\u6211\u4eec\u5982\u4f55\u624d\u80fd\u51fb\u8d25\u666e\u901a\u7684\u672c\u673a\u6784\u5efa\uff0c\u5e76\u4e14\u9886\u5148\u8fd9\u4e48\u591a\u5462\uff1f\u8003\u8651\u5230\u8fd9\u4e00\u70b9\uff0c\u8fd9\u4e24\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u90fd\u4f7f\u7528\u4e86\u5927\u91cf\u7684\u9519\u8bef\u9501\u5b9a\u548c\u5e26\u6709\u6307\u9488\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4e0ex32ABI\u4e00\u6837\uff0cwasm\u662f32\u4f4d\u7684\uff0c\u6240\u4ee5\u6307\u9488\u5360\u7528\u4e86\u4e00\u534a\u7684\u7a7a\u95f4\u3002\u5728\u6d4b\u91cflua_binarytree\u4e2d\u4f7f\u7528\u7684\u6700\u5927\u8fdb\u7a0b\u5185\u5b58\u65f6\uff0cWasmBoxC\u4f7f\u7528\u7684\u5185\u5b58\u51cf\u5c11\u4e8633%\uff0c\u8fd9\u5bf9CPU\u9ad8\u901f\u7f13\u5b58\u7684\u4f7f\u7528\u6709\u5f88\u5927\u5e2e\u52a9\u3002\u867d\u7136\u8fd9\u5bf9\u8fd9\u4e24\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u6709\u5f88\u5927\u7684\u5f71\u54cd\uff0c\u4f46\u7531\u4e8e\u8fd9\u4e2a\u56e0\u7d20\uff0c\u6211\u4eec\u5f88\u53ef\u80fd\u4e5f\u4f1a\u5728\u5176\u4ed6\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u83b7\u5f97\u4e00\u4e9b\u52a0\u901f\uff0c\u56e0\u4e3a\u5e73\u5747\u800c\u8a00\uff0cx32\u6bd4\u6b63\u5e38\u7684x64\u5feb5-8%\u3002Wasm\u662f\u83b7\u5f97\u7c7b\u4f3cx32\u7684\u597d\u5904\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u65b9\u6cd5\uff01\n\u8fd9\u91cc\u7684\u57fa\u51c6\u6d4b\u8bd5\u8861\u91cf\u6c99\u7bb1\u4e2d\u7684\u6027\u80fd\u3002\u5b83\u4e0d\u6d4b\u91cf\u4ece\u5916\u5230\u5185\u6216\u4ece\u5185\u5230\u5916\u7684\u547c\u53eb\u901f\u5ea6\u3002\u8fd9\u6837\u7684\u8c03\u7528\u53ef\u4ee5\u975e\u5e38\u5feb\uff0c\u56e0\u4e3a\u6c99\u7bb1\u4ee3\u7801\u53ea\u6709C\u8bed\u8a00\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5b89\u5168\u5730\u5185\u8054\u8de8\u8d8a\u6c99\u7bb1\u8fb9\u754c\uff01-\u5982\u679c\u6211\u4eecDolto\u7684\u8bdd\u3002\u6211\u5728\u4e0b\u4e00\u8282\u7684\u6c99\u7bb1\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u4e86\u8fd9\u4e00\u70b9\uff0c\u8bf7\u53c2\u89c1\u540e\u9762\u7684\u5185\u5bb9\u3002(\u4f46\u662f\u8bf7\u6ce8\u610f\uff0c\u90a3\u4e48\u4f7f\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u6280\u5de7\u53ef\u80fd\u4f1a\u4f7f\u8fd9\u91cc\u7684\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u590d\u6742\u3002)\u3002\n\u6211\u4eec\u53ef\u4ee5\u7528\u4efb\u4f55\u672c\u673a\u7f16\u8bd1\u5668\u7f16\u8bd1WasmBoxC\u7684C\u4ee3\u7801\u3002\u5728\u4e0a\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u603b\u662f\u4f7f\u7528clang 9\u3002\u5f53\u6539\u53d8\u7f16\u8bd1\u5668\u65f6\uff0c\u7ed3\u679c\u7565\u6709\u4e0d\u540c\uff0c\u4f8b\u5982\uff0c\u201c\u663e\u5f0f\u201d\u6c99\u7bb1\u7ed3\u679c\u5728GCC 9.2\u4e2d\u4ece14%\u4e0a\u5347\u523016%\uff0c\u6216\u8005\u5728clang11\u4e2d\u4e0b\u964d\u523011%\u300214%\u8fd9\u4e2a\u6570\u5b57\u6ca1\u6709\u4ec0\u4e48\u795e\u5947\u4e4b\u5904--\u6211\u4eec\u6b63\u5904\u4e8e\u672c\u673a\u7f16\u8bd1\u5668\u5dee\u5f02\u7684\u5173\u952e\u65f6\u523b\u3002\n\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u7ed3\u679c\u5e94\u8be5\u4f1a\u6709\u6240\u6539\u5584\uff0c\u56e0\u4e3awasm\u6dfb\u52a0\u4e86\u66f4\u591a\u7684\u6027\u80fd\u7279\u6027\uff0c\u6bd4\u5982SIMD(\u8bf7\u6ce8\u610f\uff0c\u4e0e\u672c\u673a\u7f16\u8bd1\u5668\u76f8\u6bd4\uff0c\u672c\u673a\u7f16\u8bd1\u5668\u53ef\u80fd\u5df2\u7ecf\u4ece\u81ea\u52a8\u77e2\u91cf\u5316\u4e2d\u83b7\u5f97\u4e86\u4f18\u52bf)\u3002\nWasmBoxC\u53ef\u4ee5\u8fbe\u523014%\u7684\u5f00\u9500\uff0c\u8fd9\u8868\u660e\u901a\u8fc7wasm\u7f16\u8bd1\u7684\u6210\u672c(\u4f8b\u5982\uff0c\u5b83\u4e0d\u80fd\u4ee3\u8868\u4e0d\u53ef\u51cf\u5c11\u7684\u63a7\u5236\u6d41)\u76f8\u5f53\u4f4e\uff0c\u800c\u4e14\u76ee\u524d\u7684wasm\u7f16\u8bd1\u5668\u5e76\u6ca1\u6709\u5f15\u5165\u5927\u91cf\u4e0d\u5fc5\u8981\u7684\u5f00\u9500\u3002\n\u6211\u5df2\u7ecf\u5c3d\u4e86\u6700\u5927\u52aa\u529b\u4ed4\u7ec6\u800c\u51c6\u786e\u5730\u6d4b\u91cf\u8fd9\u91cc\u7684\u4e00\u5207\uff0c\u4f46\u6211\u4e5f\u6709\u53ef\u80fd\u5728\u4ec0\u4e48\u5730\u65b9\u5f04\u9519\u4e86\u3002\u8bf7\u68c0\u67e5\u6211\u7684\u5de5\u4f5c\uff0c\u770b\u770b\u60a8\u662f\u5426\u5f97\u5230\u7c7b\u4f3c\u7684\u7ed3\u679c\uff01\n//my-code.c#include&lt\uff1bstdint.h&gt\uff1b#include&lt\uff1bstdio.h&gt\uff1b//\u6211\u4eec\u4e5f\u53ef\u4ee5\u5305\u542b\u8fd9\u4e9b\u6587\u4ef6\u7684.wasm.h\u6587\u4ef6\uff0c//\u4f46\u8ba9&#39\uff1b\u624b\u52a8\u58f0\u660eexterns\u4f5c\u4e3a\u793a\u4f8b\u3002Extern void wambox_init(Void)\uff1bextern uint32_t(*Z_twiceZ_ii)(Uint32_T)\uff1bextern uint32_t(*Z_do_ad_thingZ_ii)(Uint32_T)\uff1bint main(){put(&#34\uff1b\u521d\u59cb\u5316\u6c99\u76d2\u4e0d\u5b89\u5168\u5e93&#34\uff1b)\uff1bwasmbox_init()\uff1bprintf(&#34\uff1b\u8c03\u752821\u4e24\u6b21\u8fd4\u56de%d\\n&#\u3002\u73b0\u5728\u8c03\u7528\u574f\u4e1c\u897f...&#34\uff1b)\uff1bZ_DO_BAD_ThingZ_II(1)\uff1b\u653e\u7f6e(&#34\uff1b(\u8fd9\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u6253\u5370\uff0c\u56e0\u4e3a\u574f\u4e1c\u897f\u4f1a\u9677\u5165\u9677\u9631)&#34\uff1b)\uff1b}\u3002\nMain()\u975e\u5e38\u7b80\u5355\uff1a\u521d\u59cb\u5316\uff0c\u5728\u6c99\u7bb1\u4e2d\u8c03\u7528\u4e3a\u6211\u4eec\u6267\u884c\u8ba1\u7b97\u7684\u4e1c\u897f\uff0c\u7136\u540e\u8c03\u7528\u5c06\u88ab\u56f0\u5728\u6c99\u7bb1\u4e2d\u7684\u4e1c\u897f\u3002(Z_Stuff\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u8bf7\u53c2\u89c1\u540e\u9762\u7684\u201cAPI\u201d\u90e8\u5206\u3002)\n//unsafe-lib.c#include&lt\uff1bstdlib.h&gt\uff1b__ATTRIBUTE__((USED))INT TWORE(Int X){return x+x\uff1b}__ATTRIBUTE__((USED))INTO DO_BAD_THING(INT SIZE){//\u5728\u6b64\u5206\u914d\u672a\u77e5\u5927\u5c0f(\u56e0\u6b64LLVM\u4f18\u5316\u5668\u4e0d\u77e5\u9053//\u7a0d\u540e\u7684\u5b58\u50a8\u662f\u5426\u6709\u6548)\u3002Char*x=malloc(Size)\uff1b//\u5199\u5165\u4e00\u4e2a\u7edd\u5bf9\u4e0d\u5728\u6c99\u7bb1\u4e2d\u7684\u5730\u5740(\u9ed8\u8ba4//\u5185\u5b58\u5927\u5c0f\u8981\u5c0f\u5f97\u591a)\uff0c\u8fd9\u5728wasm\u4e2d\u4f1a\u9677\u5165\u9677\u9631\u3002X[1024*1024*1024]=42\uff1b//\u907f\u514d\u4f18\u5316\u5668\u77e5\u9053\u5b58\u50a8\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u89c2\u5bdf\u5230\u3002Return(Int)x\uff1b}\u3002\nTwo()\u505a\u4e86\u60a8\u6240\u671f\u671b\u7684\u4e8b\u60c5\uff0c\u800cDo_Bad_Thing\u505a\u4e86\u4e00\u4e2a\u80af\u5b9a\u4f1a\u9677\u5165\u9677\u9631\u7684\u5546\u5e97\u3002(\u5ffd\u7565\u90a3\u91cc\u7684\u7ec6\u8282\uff1b\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u9700\u8981LLVM\u4f18\u5316\u5668\u4e0d\u8981\u5c06\u9519\u8bef\u4ee3\u7801\u4f5c\u4e3a\u672a\u5b9a\u4e49\u7684\u884c\u4e3a\u5220\u9664\uff01)\u3002\n\u4e0b\u9762\u662f\u4f7f\u7528WasmBoxC\u83b7\u5f97\u4e0e\u6211\u4eec\u7684\u6b63\u5e38\u4ee3\u7801\u94fe\u63a5\u7684\u5b8c\u5168\u6c99\u7bb1\u5e93\u662f\u591a\u4e48\u5bb9\u6613\uff1a\n#\u901a\u5e38\u5c06\u6211\u4eec\u7684\u4e3b\u4ee3\u7801\u6784\u5efa\u4e3a\u5bf9\u8c61$clang my-code.c-c-O3-o my-code.o#\u4f7f\u7528emcc$emcc unsafe-lib.c-O3-o unsafe-lib.wasm-s WASM2C--no-entry#\u5c06\u4e0d\u5b89\u5168\u5e93\u6784\u5efa\u4e3aC\uff0c\u901a\u5e38\u4e3a$clang unsafe-lib.wasm.c-c-O3-o unsafe-lib.o#link Normal$\u3002\n\u975e\u5e38\u7b80\u5355\uff01\u8fd9\u91cc\u552f\u4e00\u201c\u6709\u8da3\u201d\u7684\u90e8\u5206\u662f\uff0c\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u4f7f\u7528wasm\u5de5\u5177\u94fe\u5c06\u5e93\u7f16\u8bd1\u4e3awasm\uff0c\u7136\u540e\u518d\u7f16\u8bd1\u4e3aC\u3002\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528Emscripten(\u6709\u5173\u5982\u4f55\u83b7\u53d6\u5b83\u7684\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u8f7d\u8bf4\u660e\uff1b\u4e0b\u4e00\u5c0f\u8282\u4e2d\u7684zlib\u793a\u4f8b\u4e5f\u5c06\u4ecb\u7ecd\u8fd9\u4e00\u70b9)\u3002\u6ce8\u610f\uff0c\u90a3\u91cc\u6ca1\u6709-c\uff0c\u56e0\u4e3a\u4eceEMCC\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5b83\u662f\u5230wasm\u7684\u5b8c\u6574\u7f16\u8bd1+\u94fe\u63a5\uff0c\u4e4b\u540e\u5b83\u4f1a\u4e3a\u6211\u4eec\u8fd0\u884cwam2c\uff0c\u4e3a\u6b64\u6211\u4eec\u4f20\u9012-s WASM2C\u3002\u8fd8\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u544a\u8bc9\u5b83--\u56e0\u4e3a\u6211\u4eec\u8981\u5728\u8fd9\u91cc\u5efa\u4e00\u4e2a\u56fe\u4e66\u9986\uff0c\u6240\u4ee5\u4e0d\u80fd\u8fdb\u5165\u3002\n$./Program\u521d\u59cb\u5316\u6c99\u76d2\u4e0d\u5b89\u5168\u5e93\u572821\u4e0a\u8c03\u7528\u4e24\u6b21\u4f1a\u8fd4\u56de42\u73b0\u5728\u8c03\u7528\u4e86\u4e00\u4e9b\u9519\u8bef\u7684\u4e1c\u897f...\u3002[WASM\u9677\u9631%1\uff0c\u6b63\u5728\u505c\u6b62]\u3002\n\u9664\u4e86\u4f7f\u7528WasmBoxC\u6784\u5efa\u4ee3\u7801\u5f88\u5bb9\u6613\u4e4b\u5916\uff0c\u8fd8\u5f88\u5bb9\u6613\u4e86\u89e3\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1a\u53ea\u9700\u8bfb\u53d6\u751f\u6210\u7684C\u4ee3\u7801\u5373\u53ef\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u4e4b\u524d\u8c03\u7528\u4e86Z_twiceZ_II\u3002\u5982\u679c\u6211\u4eec\u5f88\u597d\u5947\u90a3\u662f\u4ec0\u4e48\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6C\uff0c\u5e76\u770b\u5230\u9664\u4e86\u51fd\u6570\u6307\u9488\u95f4\u63a5\u4e4b\u5916\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684C\u51fd\u6570\uff1a\nStatic u32 w2c_Two(U32 W2c_P0){//[..\u6b63\u6587\u4e2d\u7684\u4ee3\u7801\uff0c\u4ee5Return..]}\n\u6211\u4eec\u53ef\u4ee5\u786e\u5207\u5730\u770b\u5230\u5b83\u9700\u8981\u54ea\u4e9b\u53c2\u6570\u3001\u8fd4\u56de\u4ec0\u4e48\u3001\u8bfb\u53d6u32\u7684typedef\u503c\u7b49\u7b49\u3002\u6b63\u6587\u4e2d\u7684\u5b9e\u9645\u7f16\u8bd1\u4ee3\u7801(\u8fd9\u91cc\u7701\u7565)\u53ef\u8bfb\u6027\u4e0d\u662f\u5f88\u597d\uff0c\u4f46\u5b83\u4ecd\u7136\u662fC\u4ee3\u7801\u3002\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u4e9b\u4e8b\u60c5\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b9\u4fbf\u7684printf\u8fdb\u884c\u8c03\u8bd5\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u524d\u9762\u8bf4LTO\u53ef\u4ee5\u8de8\u6c99\u7bb1\u5185\u8054\uff1a\u6c99\u7bb1\u4e2d\u7684\u4ee3\u7801\u53ea\u662f\u66f4\u591a\u7684C\u4ee3\u7801\u3002\u4e0b\u9762\u662f\u5bf9Twice\u7684\u8c03\u7528\u53ca\u5176\u7ed3\u679c\u7684\u6253\u5370(\u5728LLVM IR\u4e2d\uff0c\u5728LLVM LTO\u4e4b\u524d)\uff1a\n\u5b9a\u4e49I32@Main()#0{[..]%2=\u52a0\u8f7dI32(I32)*\uff0cI32(I32)**@Z_twiceZ_II\uff0cAlign 8\uff0c\uff01tbaa\uff011%3=\u5c3e\u90e8\u8c03\u7528I32%2(I32 21)#8%4=\u5c3e\u90e8\u8c03\u7528I32(i8*\uff0c...)@printf(i8*getelementptr\u5165\u7ad9([32 x i8]\uff0c[32 x i8]*@.str\uff0ci64\u3002I32%3)\u3002\n\u5b9a\u4e49I32@main()#0{[..]%6=\u5c3e\u90e8\u8c03\u7528I32(i8*\uff0c...)@printf(i8*\u975e\u7a7a\u53ef\u53d6\u6d88\u5f15\u7528(1)getelementptr\u5165\u7ad9([32 x i8]\uff0c[32 x i8]*@.str\uff0ci64 0\uff0ci64 0)\uff0cI32 42)\u3002\n\u6ce8\u610f\u5728LTO\u4e4b\u524d\uff0c\u6211\u4eec\u5982\u4f55\u52a0\u8f7d\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u7136\u540e\u752821\u8c03\u7528\u5b83\uff0c\u7136\u540e\u6253\u5370\u7ed3\u679c\u3002\u51fd\u6570\u6307\u9488\u5728\u90a3\u91cc\u662f\u56e0\u4e3awam2c\u53d1\u51fa\u4e86\u975e\u5e38\u7075\u6d3b\u7684\u4ee3\u7801\uff0c\u6bd4\u6211\u4eec\u5b9e\u9645\u4e0a\u9700\u8981\u7684\u66f4\u591a\u3002\u6211\u4eec\u53ef\u80fd\u60f3\u8981\u6dfb\u52a0\u4e00\u4e2a\u9009\u9879\u6765\u907f\u514d\u8fd9\u79cd\u95f4\u63a5\u6027\uff0c\u4f46\u6b63\u5982\u60a8\u6240\u770b\u5230\u7684\uff0cLTO\u5df2\u7ecf\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff1a\u4e8b\u5b9e\u4e0a\uff0c\u5b83\u8bbe\u6cd5\u5c06\u5bf9\u4e24\u6b21(21)\u7684\u8c03\u7528\u66ff\u6362\u4e3amain\u4e2d\u7684\u5e38\u91cf42\uff0c\u5b8c\u5168\u907f\u514d\u4e86\u8c03\u7528\uff01\u8de8\u6c99\u7bb1\u8fb9\u754c\u7684\u4f18\u5316\u53ef\u4ee5\u5e26\u6765\u5de8\u5927\u7684\u597d\u5904\uff0c\u800c\u4e14\u5b83\u662f\u5b8c\u5168\u5b89\u5168\u7684\u3002\n\u5173\u4e8e\u53d1\u51fa\u7684C\u4ee3\u7801\u7684\u6700\u540e\u4e00\u70b9\u8bf4\u660e\uff1a\u5982\u679c\u60a8\u771f\u7684\u9605\u8bfb\u4e86\u5b83\uff0c\u60a8\u4f1a\u6ce8\u610f\u5230\u5b83\u770b\u8d77\u6765\u5e76\u4e0d\u662f\u975e\u5e38\u4f18\u5316\u3002\u8fd9\u662f\u56e0\u4e3awasm\u672c\u8eab\u7684\u7ea7\u522b\u975e\u5e38\u4f4e\uff0c\u5e76\u4e14wam2c\u8f6c\u6362\u4ee5\u4e00\u79cd\u7b80\u5355\u800c\u51c6\u786e\u7684\u65b9\u5f0f\u8fdb\u884c-\u5b83\u4e0d\u4f1a\u8bd5\u56fe\u53d1\u51fa\u201c\u6700\u4f73\u7684\u201dC\u4ee3\u7801\uff0c\u8fd9\u79cd\u7b80\u5355\u6027\u610f\u5473\u7740\u8981\u5feb\u901f\u5730\u4f9d\u8d56\u4e8eC\u7f16\u8bd1\u5668\u4f18\u5316\uff0c\u8fd9\u5c31\u662f\u8fd9\u4e2a\u793a\u4f8b\u4f7f\u7528-O3\u7f16\u8bd1\u7684\u539f\u56e0\u3002\n\u6709\u5173\u79fb\u690d\u6574\u4e2a\u4e16\u754c\u7684\u5e93(\u800c\u4e0d\u4ec5\u4ec5\u662f\u5355\u4e2a\u6587\u4ef6)\u7684\u66f4\u5b8c\u6574\u7684\u6f14\u7ec3\uff0c\u8bf7\u53c2\u89c1\u8fd9\u4e2a\u7b80\u5355\u7684\u6f14\u793a\uff0c\u5b83\u5c55\u793a\u4e86\u7528\u6c99\u7bb1\u4fdd\u62a4zlib\u538b\u7f29\u5e93\u662f\u591a\u4e48\u5bb9\u6613\u3002\u8fd9\u5305\u62ec\u5982\u4f55\u83b7\u5f97wasm\u5de5\u5177\u94fe\u7684\u5168\u90e8\u7ec6\u8282\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u4ece\u5934\u5f00\u59cb\u4e00\u6b65\u4e00\u6b65\u5730\u9075\u5faa\u8fd9\u4e9b\u8bf4\u660e\u3002\n\u8fd9\u8fd8\u5c55\u793a\u4e86\u5982\u4f55\u5728\u6c99\u7bb1\u4e2d\u8fdb\u884c\u5185\u5b58\u7ba1\u7406\u7684\u793a\u4f8b\uff0c\u8fd9\u975e\u5e38\u7b80\u5355\uff1a\n\u6c99\u7bb1\u4ee3\u7801\u770b\u5230\u7684\u201c\u5185\u5b58\u201d\u662f\u8fd0\u884c\u65f6\u9519\u8bef\u5206\u914d\u7684\u5355\u4e2a\u5185\u5b58\u7f13\u51b2\u533a\u3002\u6c99\u7bb1\u786e\u4fdd\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u53ea\u80fd\u8bbf\u95ee\u8be5\u7f13\u51b2\u533a\uff0c\u800c\u4e0d\u80fd\u8bbf\u95ee\u5176\u4ed6\u7f13\u51b2\u533a\u3002\n\u5f53\u60a8\u4ece\u6c99\u7bb1\u83b7\u53d6\u6307\u9488\u65f6\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8bfb\u53d6\u8be5\u5185\u5b58(\u4e5f\u5c31\u662f\u8bf4\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u963b\u6b62\u5916\u90e8\u67e5\u770b)\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bfb\u53d6\u8be5\u6307\u9488\u504f\u79fb\u5904\u7684\u7f13\u51b2\u533a\u6765\u6267\u884c\u6b64\u64cd\u4f5c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u7f13\u51b2\u533a\u4f4d\u4e8e\u7edd\u5bf9(\u6b63\u5e38\uff0c\u4e0d\u5728\u6c99\u76d2\u4e2d)\u5730\u5740buf\uff0c\u5e76\u4e14\u60a8\u60f3\u8981\u5728\u503c\u4e3aptr\u7684\u6c99\u76d2\u6307\u9488\u5f15\u7528\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u5219\u60a8\u5c06\u5728\u7edd\u5bf9\u5730\u5740buf+ptr\u8bfb\u53d6\u6570\u636e\u3002\n\u6c99\u7bb1\u4ee3\u7801\u6709\u81ea\u5df1\u7684malloc\u548cfree\uff0c\u5bf9\u8be5\u4ee3\u7801\u6765\u8bf4\u8fd9\u770b\u8d77\u6765\u5f88\u6b63\u5e38\uff0c\u4f46\u53ea\u4fdd\u7559\u548c\u91ca\u653e\u4e86\u5355\u4e2a\u7f13\u51b2\u533a\u4e2d\u7684\u5185\u5b58\u8303\u56f4\u3002\u5982\u679c\u60a8\u60f3\u8981\u5c06\u4e00\u4e9b\u6570\u636e\u4f20\u9012\u5230\u6c99\u7bb1\u4e2d\uff0c\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5728\u6c99\u7bb1\u4e2dmalloc(\u4f7f\u7528\u6c99\u7bb1\u7684malloc)\u5e76\u5c06\u6570\u636e\u590d\u5236\u8fdb\u53bb\u3002\n\u5982\u679c\u6211\u4eec\u4e00\u76f4\u4f7f\u7528\u53ee\u5f53\u58f0\u800c\u4e0d\u662fEMCC\uff0c\u8fd9\u53ef\u80fd\u4f1a\u66f4\u7b80\u5355\u3002\u6211\u4eec\u4e5f\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff01\u5173\u4e8eWasmBoxC\u65b9\u6cd5\u6ca1\u6709\u7279\u5b9a\u4e8eEmscripten\uff0c\u6211\u4eec\u6240\u9700\u8981\u7684\u53ea\u662f\u4e00\u4e2a\u7f16\u8bd1\u5668\u6765wasm\u3001wam2c\u4ee5\u53cawasm2c\u8f93\u51fa\u7684\u8fd0\u884c\u65f6\u652f\u6301\u3002\u666e\u901a\u7684clang\u4e5f\u53ef\u4ee5\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5b83\u652f\u6301wasm\uff1b\u5047\u8bbe\u60a8\u5df2\u7ecf\u5728\u4f7f\u7528eclang\uff0c\u90a3\u4e48\u60a8\u552f\u4e00\u9700\u8981\u6dfb\u52a0\u7684\u65b0\u6784\u5efa\u5de5\u5177\u5c31\u662fwam2c\u3002\u6216\u8005\u60a8\u53ef\u4ee5\u4f7f\u7528WASI SDK\u6216\u5176\u4ed6\u4efb\u4f55\u5de5\u5177\u3002\u5728Emscripten\u4e2d\u6dfb\u52a0wam2c\u96c6\u6210\u548c\u8fd0\u884c\u65f6\u652f\u6301\u5e76\u4e0d\u592a\u96be\uff0c\u5728\u5176\u4ed6\u5730\u65b9\u53ef\u80fd\u4e5f\u4f1a\u7c7b\u4f3c\u3002\n\u6211\u4e13\u6ce8\u4e8eEmscripten\uff0c\u56e0\u4e3a\u65e0\u8bba\u5982\u4f55\u51fa\u4e8e\u5176\u4ed6\u539f\u56e0\uff0c\u6211\u5df2\u7ecf\u5728\u90a3\u91cc\u505a\u4e86\u96c6\u6210wasm2c\u7684\u5de5\u4f5c\u3002Emscripten\u8fd8\u652f\u6301\u79fb\u690d\u76ee\u524d\u6700\u5e7f\u6cdb\u7684\u8f6f\u4ef6\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u57fa\u51c6\u6d4b\u8bd5\u90e8\u5206\u4e2d\u63d0\u5230\u7684\u6240\u6709\u4ee3\u7801\u5e93\u7684\u65b9\u6cd5\u3002Emscripten\u505a\u4e86\u8bb8\u591a\u6709\u7528\u7684\u4f18\u5316\uff0c\u4ee5\u4ea7\u751f\u5feb\u901f\u7684wasm\uff0c\u8fd9\u6709\u52a9\u4e8e\u4e86\u89e3WasmBoxC\u53ef\u4ee5\u6709\u591a\u5feb\u3002\n\u5728\u5f15\u8a00\u4e2d\u5df2\u7ecf\u63d0\u5230\u4e86\u8f6f\u4ef6\u6545\u969c\u9694\u79bb\uff0cWasmBoxC\u4e0e\u5b83\u7684\u4e3b\u8981\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u4f7f\u7528wasm\u548c\u901a\u8fc7C\u8fdb\u884c\u7f16\u8bd1\u3002\u56e0\u6b64\uff0cWasmBoxC\u65b9\u6cd5\u7684\u4e00\u4e2a\u5177\u4f53\u9650\u5236\u662f\u60a8\u5fc5\u987b\u4ece\u6e90\u4ee3\u7801\u7f16\u8bd1\u4ee3\u7801\uff0c\u8fd9\u4e0e\u53ef\u4ee5\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fdb\u884c\u64cd\u4f5c\u7684SFI\u65b9\u6cd5\u4e0d\u540c\u3002\n\u4f7f\u7528\u63a9\u853d\u7684SFI\u53ef\u4ee5\u5b9e\u73b012%\u7684\u5f00\u9500\uff0c\u8fd9\u660e\u663e\u597d\u4e8e\u6211\u4eec\u89c2\u5bdf\u5230\u768429%\u3002WasmBoxC\u7684\u4efb\u52a1\u6c99\u7bb1\u53ef\u80fd\u4f1a\u6539\u8fdb--\u76ee\u524d\u8fd8\u6ca1\u6709\u4eba\u5728\u8fd9\u65b9\u9762\u4e0b\u529f\u592b\u3002\nWasmBoxC\u7c7b\u4f3c\u4e8eMinSFI(\u5176\u7075\u611f\u6765\u6e90\u4e8easm.js\uff0cwasm\u7684\u524d\u8eab\u4e4b\u4e00)\uff0c\u5176\u5173\u952e\u601d\u60f3\u662f\u5c06\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u6c99\u76d2\u5f62\u5f0f\u3002\u5b83\u5728LLVM IR\u4e0a\u8fd9\u6837\u505a\uff0c\u800cWasmBoxC\u8f6c\u6362\u4e3awasm\uff0c\u5b83\u672c\u8eab\u5c31\u662f\u6c99\u7bb1\u7684(\u8fd9\u4e2a\u9886\u57df\u7684\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662fKroll\u3001Stewart\u548cAppel\uff0c2014\uff0c\u5b83\u5728CompCert\u7684IR\u4e0a\u5de5\u4f5c)\u3002\n\u8fd9\u79cd\u65b9\u6cd5\u7684\u5927\u90e8\u5206\u5de5\u4f5c\u662f\u6b63\u786e\u5b9a\u4e49\u6c99\u7bb1\u8868\u5355(\u4e0d\u72af\u4efb\u4f55\u5b89\u5168\u9519\u8bef)\uff0c\u5e76\u5b9e\u73b0\u5b83(\u8fd9\u610f\u5473\u7740\u5927\u91cf\u7684\u5de5\u5177\u5de5\u4f5c-\u6211\u4eec\u9700\u8981\u80fd\u591f\u5c06\u73b0\u5b9e\u4e16\u754c\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u8be5\u8868\u5355)\u3002\u5f53MinSFI\u88ab\u521b\u5efa\u65f6\uff0cwasm\u8fd8\u4e0d\u5b58\u5728\uff0c\u4e5f\u6ca1\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u4f46\u4eca\u5929\u7684wasm\u975e\u5e38\u9002\u5408\u8fd9\u4e2a\u9700\u8981\uff1a\u6307\u5b9a\u548c\u5b9e\u73b0\u5b83\u7684\u6240\u6709\u8270\u82e6\u5de5\u4f5c\u90fd\u5df2\u7ecf\u5b8c\u6210\uff0c\u6211\u4eec\u53ef\u4ee5\u5728WasmBoxC\u4e2d\u4f7f\u7528\u5b83\u3002\nRLBox\u63cf\u8ff0\u4e86\u5bf9\u4e0d\u53ef\u4fe1\u4ee3\u7801\u8fdb\u884c\u7ec6\u7c92\u5ea6\u9694\u79bb\u7684\u6846\u67b6\u3002\u5176\u4e2d\u4e00\u79cd\u9694\u79bb\u673a\u5236(\u53c2\u89c1\u672c\u6587\u7b2c9\u8282)\u4f7f\u7528wasm\uff1b\u79f0\u4e4b\u4e3a\u201crlbox-wasm\u201d\u3002\n\u4e0erlbox-wasm\u7c7b\u4f3c\uff0cWasmBoxC\u5148\u7f16\u8bd1\u6210wasm\uff0c\u7136\u540e\u7f16\u8bd1\u6210\u672c\u673a\u4ee3\u7801\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u751f\u6210\u672c\u673a\u4ee3\u7801\u7684\u65b9\u5f0f\u3002Wasm\u4f7f\u7528Lucet\u7684\u5b9a\u5236\u7248\u672c\uff0c\u4f7f\u7528CraneLift\u751f\u6210\u672c\u673a\u4ee3\u7801\uff0c\u800cWasmBoxC\u7f16\u8bd1\u4e3aC\uff0c\u7136\u540e\u4f7f\u7528\u6807\u51c6\u7684C\u7f16\u8bd1\u5668\uff0c\u5982clang\u6216GCC\u3002\u4e3a\u4e86\u8003\u8651\u7531\u6b64\u9020\u6210\u7684\u6027\u80fd\u5dee\u5f02\uff0c\u8ba9\u6211\u4eec\u770b\u4e00\u4e0bRLBox\u8bba\u6587\u4e2d\u7684\u8fd9\u6bb5\u8bdd\uff1a\n\u6211\u4eec\u53d1\u73b0\uff0cWasm\u6c99\u7bb1[\u7ed3\u5408\u4f7f\u7528RLBox\u548cLucet]\u4f1a\u5e26\u676585%\u7684\u5f00\u9500[..]\u3002\u6211\u4eec\u5c06\u8fd9\u79cd\u653e\u7f13\u5f88\u5927\u7a0b\u5ea6\u4e0a\u5f52\u56e0\u4e8e\u65b0\u751f\u7684Wasm\u5de5\u5177\u94fe\uff0c\u6bd4\u5982LLVM\uff0c\u5b83\u4eec\u8fd8\u4e0d\u652f\u6301\u4e0e\u4e4b\u76f8\u63d0\u5e76\u8bba\u7684\u6027\u80fd\u4f18\u5316\u3002\nWasmBoxC\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u7528\u7684\u6bd4\u8f83\u70b9\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4f7f\u7528LLVM\u3002\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8eWasmBoxC\u670914%-42%\u7684\u5f00\u9500\uff0c\u5b83\u652f\u6301\u62a5\u4ef7\u7684\u65ad\u8a00\uff0c\u5373RLBox-wasm\u5f53\u524d85%\u7684\u5f00\u9500\u5f88\u5927\u4e00\u90e8\u5206\u662f\u7531\u4e8eCraneLift\u662f\u76f8\u5f53\u65b0\u7684(\u4f46\u5b83\u6b63\u5728\u53d6\u5f97\u826f\u597d\u7684\u8fdb\u5c55)\u3002(\u7136\u800c\uff0cRLBox-wasm\u53ea\u57fa\u4e8e\u4e00\u4e2a\u57fa\u51c6\uff0clibGraphite\uff0c\u8fd9\u9650\u5236\u4e86\u6211\u4eec\u7684\u63a8\u5e7f\u80fd\u529b\u3002)\u3002\nRLBox-wasm\u548cWasmBoxC\u4e4b\u95f4\u7684\u53e6\u4e00\u4e2a\u6027\u80fd\u5dee\u5f02\u662fRLBox-WASMHAS\u5728\u6c99\u7bb1\u548c\u5916\u90e8\u4e4b\u95f4\u7684\u8e66\u5e8a\u3002\u901a\u5e38\uff0c\u8fd9\u6837\u7684\u8e66\u5e8a\u8fdb\u884c\u4e0a\u4e0b\u6587\u548c\u5806\u6808\u4ea4\u6362\u7b49\uff0c\u5e76\u4e14\u53ef\u80fd\u5177\u6709\u663e\u8457\u7684\u5f00\u9500\u3002\u5728RLBox-wasm\u4e2d\uff0c\u4ed6\u4eec\u5728Lucet\u4e2d\u4f7f\u7528\u4e86\u81ea\u5b9a\u4e49\u8e66\u5e8a\uff0c\u5c06\u5f00\u9500\u964d\u4f4e\u4e86800%\uff0c\u51e0\u4e4e\u4e3a\u96f6\u3002\u4e0eWasmBoxC\u76f8\u6bd4\uff0c\u6b63\u5982\u6211\u4eec\u524d\u9762\u770b\u5230\u7684\uff0c\u6c99\u76d2\u4ee3\u7801\u53ea\u662f\u7eafC\uff0c\u6839\u672c\u6ca1\u6709\u8e66\u5e8a\uff0c\u751a\u81f3\u8de8\u8fb9\u754c\u7684\u5185\u8054\u4e5f\u53ef\u4ee5\u5de5\u4f5c\u3002\nRLBox-wasm\u7684\u4e00\u4e2a\u4f18\u52bf\u662fCraneLift\u662f\u4e00\u4e2a\u4e13\u7528\u7684wasm\u7f16\u8bd1\u5668\uff0c\u56e0\u6b64\u5b83\u53ef\u4ee5\u4f7f\u7528\u7279\u5b9a\u4e8ewasm\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0c\u5b83\u53ef\u80fd\u4e3a\u6c99\u7bb1\u5185\u5b58\u56fa\u5b9a\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u6216\u8005\u5b83\u53ef\u80fd\u5728\u6c99\u7bb1\u4e2d\u4f7f\u7528\u975e\u6807\u51c6\u7684\u8c03\u7528\u7ea6\u5b9a\u3002\u4f7f\u7528WasmBoxC\u7684\u666e\u901aC\u4ee3\u7801\u65e0\u6cd5\u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u3002\u73b0\u5728\u770b\u6765\uff0cLLVM\u7684\u603b\u4f53\u4f18\u52bf\u8d85\u8fc7\u4e86\u4f7f\u7528\u7279\u5b9a\u4e8ewasm\u7684\u7f16\u8bd1\u5668\uff0c\u4f46\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ef\u80fd\u4f1a\u6539\u53d8\u3002\n\u4e0eWasmBoxC\u76f8\u6bd4\uff0cRLBox-wasm\u7684\u53e6\u4e00\u4e2a\u4f18\u52bf\u662f\u6784\u5efa\u65f6\u95f4\uff1aWasmBoxC\u7f16\u8bd1TOC\uff0c\u7136\u540e\u8fd0\u884c\u5b8c\u6574\u7684C\u7f16\u8bd1\u5668\uff0c\u800cCraneLift\u8bbe\u8ba1\u7528\u4e8e\u7f16\u8bd1wamto\u672c\u673a\u4ee3\u7801\u3002WasmBoxC\u65b9\u6cd5\u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u56fa\u6709\u5730\u589e\u52a0\u4e86\u989d\u5916\u7684\u6b65\u9aa4\u3002\u7136\u800c\uff0c\u6b63\u5982\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u6240\u63d0\u5230\u7684\uff0c\u4f7f\u7528C\u8bed\u8a00\u4e0d\u4ec5\u5bf9\u901f\u5ea6\u6709\u597d\u5904\uff0c\u800c\u4e14\u5bf9\u6613\u7528\u6027\u4e5f\u6709\u597d\u5904\uff0c\u6240\u4ee5\u603b\u4f53\u6765\u8bf4\uff0c\u5728\u8fd9\u4e2a\u9886\u57df\u6709\u4e00\u4e9b\u6709\u8da3\u7684\u6743\u8861\u3002\n\u7f16\u8f91\uff1a\u6709\u4eba\u5411\u6211\u6307\u51fa\uff0cRLBox\u57282019\u5e741\u6708\u7684\u4e00\u4e2a\u65e9\u671f\u7248\u672c\u4f7f\u7528\u4e86wam2c\uff0c\u8fd9\u4e00\u70b9\u6211\u5e76\u4e0d\u77e5\u9053\u3002\nWasmBoxC\u6709\u591a\u5b89\u5168\uff1f\u4e0e\u4efb\u4f55\u65b0\u4e8b\u7269\u4e00\u6837\uff0c\u60a8\u73b0\u5728\u5e94\u8be5\u5047\u8bbe\u5b83\u662f\u8bd5\u9a8c\u6027\u7684\u3002\u4f46\u662f\uff0c\u5b83\u662f\u5efa\u7acb\u5728\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u57fa\u7840\u4e0a\u7684\uff0c\u7279\u522b\u662fwasm\u672c\u8eab\u3001wasm\u5de5\u5177\u94fe\u7ec4\u4ef6(\u5982clang)\u548c\u6807\u51c6C\u7f16\u8bd1\u5668\u3002\u636e\u6211\u6240\u77e5\uff0c\u5173\u952e\u7684wam2c\u7ec4\u4ef6\u8fd8\u6ca1\u6709\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u826f\u597d\u7684\u8ff9\u8c61\u8868\u660e\uff0cwam2c\u901a\u8fc7\u4e86wasm spec\u6d4b\u8bd5\u5957\u4ef6\uff0c\u8be5\u6d4b\u8bd5\u5957\u4ef6\u6db5\u76d6\u4e86\u8bb8\u591a\u5305\u88c5\u7bb1\u548c\u53ef\u79fb\u690d\u6027\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5df2\u7ecf\u5bf9\u5176\u8fdb\u884c\u4e86\u6a21\u7cca\u5316\u3002\n\u53e6\u4e00\u4ef6\u6709\u7528\u7684\u4e8b\u60c5\u662f\u53ef\u4ee5\u68c0\u67e5C\u8f93\u51fa\u7684\u5b89\u5168\u6027\u3002\u5f88\u5bb9\u6613\u770b\u5230\uff0c\u6240\u6709\u5185\u5b58\u8bbf\u95ee\u90fd\u8981\u7ecf\u8fc7\u76f8\u540c\u7684\u51e0\u4e2a\u52a0\u8f7d/\u5b58\u50a8\u65b9\u6cd5\uff0c\u5e76\u4e14\u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4fdd\u8bc1\u9a7b\u7559\u5728\u6c99\u7bb1\u4e2d\u3002\u867d\u7136C\u4e0d\u662f\u4e00\u79cd\u5185\u5b58\u5b89\u5168\u7684\u8bed\u8a00\uff0c\u4f46\u6211\u4eec\u53d1\u51fa\u7684\u975e\u5e38\u7b80\u5355\u7684C\u5f62\u5f0f\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u5b89\u5168\u7684\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u88ab\u770b\u4f5c\u662f\u5b89\u5168\u7684\u3002\n\u5982\u679c\u5b89\u5168\u4eba\u5458\u53ef\u4ee5\u770b\u770bWasmBoxC\uff0c\u90a3\u5c31\u592a\u597d\u4e86--\u8bf7\u5e2e\u5e2e\u5fd9\uff01\n\u5c31\u73b0\u5728\u54ea\u4e9b\u4ee3\u7801\u53ef\u4ee5\u6c99\u7bb1\u800c\u8a00\uff0c\u5728\u5f53\u524d\u7684\u5b9e\u73b0\u4e2d\uff0c\u5b83\u57fa\u672c\u4e0a\u662fEmscripten\u53ef\u4ee5\u79fb\u690d\u5230WASM\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u8fd9\u662f\u76f8\u5f53\u591a\u7684-\u4f8b\u5982\uff0c\u5b83\u88ab\u7528\u6765\u79fb\u690d\u8bb8\u591a\u6574\u4e2a\u6e38\u620f\u5f15\u64ce\uff0c\u6b63\u5982\u6211\u4eec\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b83\u53ef\u4ee5\u79fb\u690d\u6211\u4eec\u57fa\u51c6\u7684\u6240\u6709\u4ee3\u7801\u5e93\u3002\n.", "note_en": "The software ecosystem has a lot of useful but unsafe code, and the easier it is to sandbox that code, the moreoften that\u2019ll happen. If it were as simple as passing the compiler a  --sandbox flagthat makes an unsafe library unable to see or affect anythingoutside of it, that would be incredible! We can\u2019t get it quite that easy,but this post describes  WasmBoxC, a sandboxing approach that isvery simple to use. All you need to do is:\n Compile the unsafe library using a  WebAssembly (wasm) compiler instead of the normal system compiler.That uses wasm internally, but you don\u2019t need to care about that \u2014all you see is it emits a C file with sandboxed code.\n  Write some C to interface with the compiled C of the unsafe library. (This isnecessary because the sandboxed code can\u2019t access outside memory, and also ituses the portable wasm ABI.)\n Compile and link that C code, and now that unsafe library is sandboxed from the rest of your application!In a later section we\u2019ll see concrete examples of how easy both those steps are.\n   By  compiling to wasm we sandbox the code, preventing it from accessinganything on the outside.That includes both  memory - the sandboxed code can\u2019t read or write to anywhere outside it -and  capabilities - the sandboxed code can\u2019t do anything but pure computation,unless you give it a function to call to do things like read from a file, tellthe time, etc.We also get the rest of the wasm guarantees on safety and portability. Wasmsandboxing is even safe to run in the same process as other code (at least modulo Spectre-typevulnerabilities), much like Software Fault Isolation (SFI).\n After we\u2019ve compiled an unsafe library to wasm, how can we run it as part of ourapplication?We could integrate a wasm VM and run the wasm there. But instead,with WasmBoxC we take a  VM-less approach and compile the wasm into nativecode, while preserving the wasm semantics, including the sandboxing.That native code can be linked normally into an application, whichis much simpler than integrating a wasm VM.\n The specific approach WasmBoxC takes to compile wasm into native code is to compile it to C using wabt\u2019s wasm2c tool,and then run a standard C compiler on it. In fact,WasmBoxC\u2019s approach compiles into a  simple subset of C.This is a big part of what makes this approach so simple, andbrings several advantages:\n It lets us use a C compiler like clang or gcc to make the sandboxedcode very fast.\n      A single build of C code can be compiled and run on practically any platform,and code to interact with the sandbox also only needs to be written once.\n Despite the simplicity of using C, WasmBoxC sandboxing has lowoverhead: just  14% with some non-portable C code (the\u201csignal handler trick\u201d, see later), or  42% in 100% portable C(with no OS- or CPU-specific operations at all). We\u2019ll also see that there are optionsin between those 14% and 42% numbers.\n The basic idea in WasmBoxC is simple and not original.What isnew in this post is showing that the approach works, doingbenchmarking on real-world code to show it is fast, presenting complete examples of howeasy it is to sandbox real-world libraries, and writing up the approach indetail to describe the benefits (see in particular the section on memory-safelanguages).This post also invents a name for the technique.\n  To get an idea of WasmBoxC\u2019s speed, let\u2019s take a look at 20 benchmarks,comparing clang 9.0.1, clang 11 (dev version as of May 23 2020), gcc 9.2.1, andWasmBoxC. All numbers are normalized to clang 9 (which is therefore equal to 1; lower numbers are better).\n   These benchmarks include a wide variety of code, and the ones prefixed with  zzz_ are real-worldcodebases or benchmarks:the  Box2D and Bulletphysics engines, the CoreMark and LINPACKbenchmarks, the Lua VM (one GC and one computational benchmark),the LZMAand zlibcompression libraries,and the SQLite database.Incidentally, this shows WasmBoxC can run all ofthese today!\n Two results are shown for WasmBoxC, representing two implementations of memory sandboxing. The first is  explicit sandboxing, in which each memory load and store is explicitly verified to be within the sandboxed memory using an explicit check (that is, an  if statement is done before each memory access). This has  42% overhead.\n The  OS-based implementation uses the\u201c signal handler trick\u201d that wasm VMsuse.This technique reserves lots of memory around the valid range and relies onCPU hardware to give us a signal if an access is out of bounds(for more background see section 3.1.4 in Tan, 2017).That is fully safe and has the benefit of avoiding explicit bounds checks. It hasjust  14% overhead! However, it cannot be used everywhere (it needssignals and CPU memory protection, and only works on 64-bit systems).\n There are more options in between those 14% and 42% figures.Explicit and OS-based sandboxing preserve wasm semantics perfectly, that is, a trapwill happen exactly when a wasm VM would have trapped. If we are willing to relaxthat(but we may not want to  call it wasm if we do)then we can use masking sandboxing instead(see section 3.1.3 in Tan, 2017),which is 100% portable like explicit sandboxing and also prevents any accessesoutside of the sandbox, and is somewhat faster at  29% overhead. Other sandboxingimprovements are possible too - almost no effort has gone into this yet.\n An interesting thing happens in the  lua_binarytrees and  havlak benchmarks,where WasmBoxC is actually faster than both gcc and clang in all sandboxing modes,up to 32%! How can we beat normal native builds, and by so much? Looking into this,both of these benchmarks use a lot of  mallocs and data structures with pointers.Like the  x32 ABI, wasm is 32-bit,so pointers take half the space. Measuring the maximum process memory usedin  lua_binarytrees, WasmBoxC uses 33% less which helps a lot with CPU cache usage.While this makes a big difference on these two benchmarks, we are likelygetting some speedup on the others as well due to this factor, as on average x32is faster than normal x64 by around 5-8%.Wasm is a nice way to get somethinglike x32\u2019s benefits!\n The benchmarking here measures performance  within the sandbox. Itdoes not measure the speed of calls from the outside in or inside out. Suchcalls can be very fast because the sandboxed code is just C, which means thatwe can even inline across the sandbox boundary \u2014 safely! \u2014 if we doLTO. I verified that happens in the sandboxing example in the next section,see later. (Note, however, then using the signal handler trick may make thingsmore complicated here.)\n  We can compile WasmBoxC\u2019s C code with any native compiler. In theabove we did so always with clang 9 for simplicity. The results vary a littlewhen changing the compiler, for example the \u201cexplicit\u201d sandboxing results go from14% up to 16% with gcc 9.2 or down to 11% with clang 11. There\u2019s nothing magical aboutthat 14% figure \u2014 we are at the point where native compiler differences matter.\n  Results should improve over time as wasm adds more performance featureslike  simd (note that the native compilers wecompared to may have gained an advantage from autovectorization).\n  That WasmBoxC can reach 14% overhead shows that thecost of compiling through wasm (which cannot represent irreducible controlflow, for example) is fairly low, and also that current compilers to wasm arenot introducing significant unnecessary overhead.\n I\u2019ve done my best to measure everything here carefully and accurately, butit\u2019s possible I\u2019ve made a mistake somewhere. Please check my work and see if youget similar results!\n   // my-code.c #include &lt;stdint.h&gt;#include &lt;stdio.h&gt; // We could also include the .wasm.h file for these, // but let&#39;s declare externs manually for the example. extern  void  wasmbox_init ( void ); extern  uint32_t  ( * Z_twiceZ_ii )( uint32_t ); extern  uint32_t  ( * Z_do_bad_thingZ_ii )( uint32_t ); int  main ()  {  puts ( &#34;Initializing sandboxed unsafe library&#34; );  wasmbox_init ();  printf ( &#34;Calling twice on 21 returns %d \\n &#34; ,  Z_twiceZ_ii ( 21 ));  puts ( &#34;Calling something bad now...&#34; );  Z_do_bad_thingZ_ii ( 1 );  puts ( &#34;(this will never be printed, as the bad thing will trap)&#34; ); }\n main() is pretty simple: Initialize, call something in the sandbox that does acomputation for us, and call something that will trap inside the sandbox.(What\u2019s with the  Z_ stuff? See later in \u201cAPI\u201d.)\n // unsafe-lib.c #include &lt;stdlib.h&gt; __attribute__ (( used )) int  twice ( int  x )  {  return  x  +  x ; } __attribute__ (( used )) int  do_bad_thing ( int  size )  {  // Allocate an unknown size here (so the LLVM optimizer doesn&#39;t know if the  // store later down is valid or not).  char *  x  =  malloc ( size );  // Write to an address that is definitely not in the sandbox (the default  // memory size is much smaller), which in wasm will trap.  x [ 1024  *  1024  *  1024 ]  =  42 ;  // Avoid the optimizer knowing the store can never be observed.  return  ( int ) x ; }\n twice() does what you\u2019d expect, and  do_bad_thing does a store that willdefinitely trap. (Ignore the details there; for this example we need the LLVM optimizer not toremove the bad code as undefined behavior!)\n And here\u2019s how easy it is to use WasmBoxC to get a fully sandboxed library linked with our normal code:\n # build our main code to an object normally $ clang my-code.c  -c  -O3  -o my-code.o # build the unsafe library to C with emcc $ emcc unsafe-lib.c  -O3  -o unsafe-lib.wasm  -s WASM2C  --no-entry # build the unsafe library&#39;s C to an object normally $ clang unsafe-lib.wasm.c  -c  -O3  -o unsafe-lib.o # link normally $ clang my-code.o unsafe-lib.o  -o program\n Pretty simple! The only \u201cinteresting\u201d part here is that the second command usesa wasm toolchain to compile the library to wasm and then to C. Here we use Emscripten(see the  download instructionsfor how to get it; the zlib example in the next subsection also covers that). Note that there isno  -c there, since from  emcc\u2019s point of view it is a full compile+link to wasm,after which it runs wasm2c for us, for which we pass  -s WASM2C. Note also thatwe tell it --no-entry since we are building a library here.\n  $ ./programInitializing sandboxed unsafe libraryCalling twice on 21 returns 42Calling something bad now... [wasm  trap 1, halting]\n  Aside from it being easy to build code with WasmBoxC, it\u2019s also easy to seehow it works: just read the generated C code. For example, we called Z_twiceZ_ii earlier. If we\u2019re curious what that is, we can just read the Cand see that aside from the function pointer indirection it\u2019s just a plain C function:\n static  u32  w2c_twice ( u32  w2c_p0 )  {  // [..the code in the body, ending in a return..] }\n We can see exactly what parameters it takes, what it returns, read the typedeffor  u32, and so forth. Theactual compiled code in the body (omitted here) is not very readable, but it is still C code.That lets us do things like add convenient printfs for debugging for example.This is also why we said earlier that LTO can inline across thesandbox: the sandboxed code is just more C code. Here is the call to  twiceand the printing of its result (in LLVM IR, and before LLVM LTO):\n define  i32  @main ()  #0  {  [..]  %2  =  load  i32  ( i32 )*,  i32  ( i32 )**  @Z_twiceZ_ii ,  align  8 ,  !tbaa  !1  %3  =  tail  call  i32  %2 ( i32  21 )  #8  %4  =  tail  call  i32  ( i8 *,  ...)  @printf ( i8 *  getelementptr  inbounds  ([ 32  x  i8 ],  [ 32  x  i8 ]*  @.str ,  i64  0 ,  i64  0 ),  i32  %3 )\n  define  i32  @main ()  #0  {  [..]  %6  =  tail  call  i32  ( i8 *,  ...)  @printf ( i8 *  nonnull  dereferenceable ( 1 )  getelementptr  inbounds  ([ 32  x  i8 ],  [ 32  x  i8 ]*  @.str ,  i64  0 ,  i64  0 ),  i32  42 )\n Note how before LTO we load a function pointer, then call that with  21, then printf that result. The function pointer is there because wasm2c emits veryflexible code, more than we need in fact. We may want to add an option to avoidthat indirection, but as you can see, LTO can fix that up already: in fact itmanages to replace the call to  twice(21) to a constant  42 in  main,avoiding a call entirely!Optimizing across the sandbox boundary can be hugely beneficial, and it\u2019sfully safe.\n A final note on the emitted C code: if you do read it you\u2019ll notice it doesn\u2019t look veryoptimized. That\u2019s because wasm is very low level itself and wasm2c translatesit in a simple and accurate way \u2014 it doesn\u2019t try to emit \u201coptimal\u201d C code.That simplicity means that to be fast wedepend on C compiler optimizations, which iswhy the example builds with  -O3.\n  For a more complete walkthrough of porting an entirereal-world library and not just a single file, see this simple gistwhich shows how easy it is to sandbox the zlib compression library. Thatincludes the full details of how to get the wasm toolchain, so you can followthose instructions step-by-step from scratch.\n That also shows examples of how to do memory management in the sandbox,which is very simple:\n The \u201cmemory\u201d seen by the sandboxed code is a single buffer of memory that is malloced by the runtime. The sandboxing guarantees that the compiled code canonly access that buffer, and nothing else.\n    When you get a pointer from the sandbox, you can read that memory directly(that is, there is nothing that prevents the outside from looking in). You cando so by reading from the buffer at the offset of that pointer. That is, ifthe buffer is at absolute (normal, not in the sandbox) address  BUF and you wantto read data at the location a sandbox pointer of value  ptr refers to, youwould read at absolute address  BUF + ptr.\n  The sandboxed code has its own  malloc and  free, which look normal tothat code, but only reserve and release ranges of memory in the singleton buffer.If you want to pass some data into the sandbox, a simple way is to  malloc inthe sandbox (using the sandbox\u2019s  malloc) and copy the data in.\n  This could be even simpler if we used clang foreverything and not emcc. We can do that too!There is nothing specific to Emscriptenabout the WasmBoxC approach, all we need is a compiler to wasm, wasm2c, andC runtime support for wasm2c\u2019s output.Plain clang could work too since it has wasm support; assuming you already useclang, the only new build tool you\u2019d need to add is wasm2c. Or you coulduse the WASI SDK or anything else. Adding wasm2c integration and runtime support in Emscriptenwas not too hard and it probably would be similar elsewhere.\n I focused on Emscripten because I\u2019ve already done the work to integratewasm2c there for other reasonsanyhow. Emscripten also supports porting thewidest range of software currently which is how we couldrun all the codebases mentioned in the benchmark section.And Emscripten does a lotof useful optimizationsto emit fast wasm which helps see how fast WasmBoxC can be.\n   Software Fault Isolation has already been mentioned in the introduction, withWasmBoxC mainly differing from it in the use of wasm and compiling that throughC. As a result, one specific limitation in the WasmBoxC approach is that you must compilethe code from source, unlike SFI methods that can operate on a binary.\n SFI using masking can achieve overheads of 12%, whichis significantly better than the 29% we observed. It is possible that WasmBoxC\u2019smasking sandboxing could be improved \u2014 no effort has gone into that yet.\n  WasmBoxC is similar to MinSFI(itself inspired by asm.js, one of the predecessors ofwasm), whose key idea is to convert unsafe code to a sandboxed form. It does so onLLVM IR, while WasmBoxC converts to wasm which is inherently sandboxed(another example in this space is in Kroll, Stewart, and Appel, 2014which works on CompCert\u2019s IR).\n Most of the work in such an approach is to properly define the sandboxed form(without making any security mistakes),and to implement it (which means a lot of tooling work \u2014 we need to beable to convert real-world code to that form). When MinSFI was created wasm didn\u2019tyet exist, and there wasn\u2019t a good alternative, but today wasm fits that needvery well: all the hard work of speccing and implementing it has been done, andwe can just use that in WasmBoxC.\n  RLBoxdescribes a framework for fine-grain isolation of untrusted code. One of theisolation mechanisms (see section 9 in the paper) uses wasm;call that \u201cRLBox-wasm\u201d.\n Like RLBox-wasm, WasmBoxC compiles to wasm and then to native code.The difference is how the native code is generated. RLBox-wasm uses a customized build of Lucet which uses CraneLift togenerate native code, while WasmBoxC compiles to C and thenuses a standard C compiler like clang or gcc. To consider the performancedifference caused by that, let\u2019s look at this quote from the RLBox paper:\n We find that Wasm sandboxing [using RLBox with Lucet] imposes a 85% overhead [..] We attribute this slowdown largely to the nascent Wasm toolchains, which don\u2019t yet support performance optimization on par with, say LLVM.\n WasmBoxC offers a useful comparison point in this context since it can use LLVM.Indeed, as WasmBoxC has 14%-42% overhead, itsupports the quote\u2019s assertion that a large part of RLBox-wasm\u2019s current 85%overhead is due to CraneLift being fairly new (but it is making good progress).(However, RLBox-wasm is only measured on one benchmark, libGraphite, whichlimits our ability to generalize.)\n Another performance difference between RLBox-wasm and WasmBoxC is that RLBox-wasmhas trampolines between the sandbox and the outside. Normally such trampolinesdo context and stack switching, etc., and can have significant overhead. InRLBox-wasm they use a custom trampoline in Lucet which reduced the overhead by800%, almost to nothing.In comparison, with WasmBoxC as we saw earlier the sandboxed code is just plain Cand there are no trampolines at all, and even inlining across the boundary works.\n An advantage RLBox-wasm has is that CraneLift is a dedicated wasm compiler, andso it may use techniques specific to wasm. For example, it might pin a registerfor the sandboxed memory, or it might use a nonstandard calling convention insidethe sandbox. Those things could not be done with plain C code with WasmBoxC.For now it looks like LLVM\u2019s general advantage outweighs using a wasm-specificcompiler, but in time that might change.\n Another advantage RLBox-wasm has over WasmBoxC is build times: WasmBoxC compiles toC and then runs a full C compiler while CraneLift is designed to compile wasmto native code.The WasmBoxC approachinherently adds extra steps in the compilation process. However, as mentionedthroughout this post, going through C has benefits not just to speed but also toease of use, so overall there are interesting tradeoffs in this space.\n edit: It was pointed out to methat an early version of RLBox in January 2019used wasm2c, which I was not aware of.\n   How secure is WasmBoxC? As with anything new you should assume it is experimentalfor now. However, it is built on well-tested foundations, in particular, wasm itself,wasm toolchain components like clang, and standard C compilers. The key wasm2ccomponent has not been used in production yet to my knowledge, but goodindications are that wasm2c passes the wasm spec test suite which covers manysandboxing and portability corner cases, and we\u2019ve fuzzed it.\n Another useful thing is that the C output can be inspected for safety. It\u2019s easy to see that all memory accesses gothrough the same few load/store methods, and that those are guaranteed to staywithin the sandbox. While C isn\u2019t a memory-safe language, the very simple form of C we emitshould in fact be safe and easily seen as such.\n It would be great for security people to take a look at WasmBoxC \u2014 please help out!\n  In terms of what code can be sandboxed right now, in the current implementation it\u2019sbasically anything Emscripten can port to wasm, which is quite a lot \u2014 it\u2019s usedto port many entire game engines,for example, and as we saw it can port all the codebases we benchmarked.In particular it includes support for \n......", "posttime": "2020-07-28 14:25:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u865a\u62df\u673a,wasmboxc,simple,wasm", "title": "WasmBoxC\uff1a\u7b80\u5355\u3001\u8f7b\u677e\u3001\u5feb\u901f\u7684\u65e0\u865a\u62df\u673a\u6c99\u7bb1", "title_en": "WasmBoxC: Simple, Easy, and Fast VM-Less Sandboxing", "transed": 1, "url": "https://kripken.github.io/blog/wasm/2020/07/27/wasmboxc.html", "via": "", "real_tags": ["\u865a\u62df\u673a", "wasmboxc", "simple", "wasm"]}, {"category": "", "categoryclass": "", "imagename": "a35ff4de436a85b63c78adc2d61ba93f.jpg", "infoid": 1014612, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65e5\u5fd7\u8bb0\u5f55\u5e76\u4e0d\u4fbf\u5b9c\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u5c06\u4ee3\u7801\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u4e2d\u65f6\uff0c\u901a\u5e38\u4f1a\u7981\u7528\u8c03\u8bd5\u7ea7\u522b\u65e5\u5fd7(\u6216\u66f4\u4f4e\u7ea7\u522b)\u3002\u5f53\u4e8b\u60c5\u8fdb\u5c55\u987a\u5229\u65f6\uff0c\u8fd9\u4e0d\u662f\u95ee\u9898\u3002\u4f46\u662f\uff0c\u5f53\u9519\u8bef\u65e5\u5fd7\u5f39\u51fa\u65f6\uff0c\u4e0e\u4ee3\u7801\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u76f8\u5173\u7684\u5927\u90e8\u5206\u4e0a\u4e0b\u6587\u90fd\u4f1a\u4e22\u5931\u3002\u5173\u4e8e\u5806\u6808\u8ddf\u8e2a\u7684\u4e00\u884c\u5185\u5bb9\u901a\u5e38\u662f\u4e0d\u591f\u7684\u3002\u5982\u679c\u80fd\u5bf9\u5931\u8d25\u65f6\u53d1\u751f\u7684\u4e8b\u60c5\u6709\u4e00\u4e2a\u66f4\u8be6\u7ec6\u7684\u63cf\u8ff0\uff0c\u90a3\u5c31\u592a\u597d\u4e86\u3002\u5982\u679c\u6211\u4eec\u6253\u5f00\u4e86\u8fd9\u4e9b\u8c03\u8bd5\u548c\u8ddf\u8e2a\u65e5\u5fd7\u5c31\u597d\u4e86\u3002\n\u55ef\uff0c\u6211\u4eec\u4e0d\u4e70\u662f\u6709\u539f\u56e0\u7684\u3002\u7b80\u5355\u5730\u8bf4\uff0c\u5b83\u5f88\u8d35\u3002\u901a\u5e38\uff0c\u8c03\u8bd5\u548c\u8ddf\u8e2a\u7ea7\u522b\u7684\u65e5\u5fd7\u6bd4\u6240\u6709\u5176\u4ed6\u65e5\u5fd7\u7ea7\u522b\u7684\u603b\u548c\u591a\u4e00\u4e2a\u6570\u91cf\u7ea7\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u8981\u5c06\u5176\u5168\u90e8\u8bb0\u5f55\u4e0b\u6765\uff0c\u6211\u4eec\u5c06\u4e0d\u5f97\u4e0d\u591a\u82b1\u51e0\u500d\u7684\u94b1\u3002\n\u8fd9\u662f\u56f4\u7ed5\u8fd9\u4e00\u7aef\u7684\u5927\u591a\u6570\u8c08\u8bdd\u7684\u5730\u65b9\u3002\u9009\u98792\u4e0d\u80fd\u542f\u52a8\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u9009\u98791\u3002\u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u6211\u4eec\u5c1d\u8bd5\u5728\u8c03\u8bd5\u5f00\u59cb\u65f6\u5728\u672c\u5730\u590d\u5236\u9519\u8bef\uff0c\u5e76\u4ece\u90a3\u91cc\u5f00\u59cb\u5de5\u4f5c\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u662f\u4e00\u79cd\u9519\u8bef\u7684\u4e8c\u5206\u6cd5\u3002\u6211\u4eec\u8fd8\u6709\u7b2c\u4e09\u4e2a\u9009\u62e9\u3002\u4f7f\u7528\u73af\u5f62\u7f13\u51b2\u533a\u5b58\u50a8\u8c03\u8bd5\u65e5\u5fd7\uff0c\u5e76\u5728\u53d1\u751f\u9519\u8bef\u65f6\u5237\u65b0\u5b83\u3002\n\u8fd9\u9879\u6280\u672f\u5728\u6982\u5ff5\u4e0a\u5f88\u7b80\u5355\u3002\u8fd9\u53ea\u9700\u8981\u4e00\u53e5\u8bdd\u6765\u63cf\u8ff0\uff0c\u5e76\u4e14\u8bb0\u5f55\u7684\u65b9\u5f0f\u6ca1\u6709\u592a\u591a\u6539\u53d8\u3002\u6211\u4eec\u4ecd\u7136\u4f7f\u7528\u76f8\u540c\u7684\u65e5\u5fd7\u5e93\u548c\u76f8\u540c\u7684\u65e5\u5fd7\u8f6f\u4ef6\u6a21\u5f0f\uff0c\u4f46\u73b0\u5728\u5f53\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbf\u95ee\u65e5\u5fd7\u4e2d\u66f4\u591a\u7684\u4fe1\u606f\u3002\n\u4f60\u53ef\u4ee5\u65e2\u5403\u86cb\u7cd5\u53c8\u5403\u86cb\u7cd5\u3002\u60a8\u53ef\u4ee5\u907f\u514d\u5197\u957f\u7684\u65e5\u5fd7\u8bb0\u5f55\uff0c\u540c\u65f6\u5728\u91cd\u8981\u7684\u65f6\u5019\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u5197\u957f\u7684\u65e5\u5fd7\u3002\n\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u4e3a\u6211\u4eec\u7684\u5728\u7ebf\u5c0f\u5de5\u5177\u5546\u5e97\u6784\u5efa\u4e00\u4e2aDjango\u540e\u7aef\uff0c\u5e76\u8bf4\u4e0b\u9762\u7684\u4f2a\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u6709\u4e00\u4e2abug\u3002\n#Handle the order def handle_order_post_request(Req)\uff1aCustomer=Get_Customer(Req)if not is_Authorized_Customer(Customer)\uff1areturn HttpStatusUnAuthorized()Orders=Get_Orders(Req)VERIFY_PRICES(ORDERS)#\u9a8c\u8bc1\u4ef7\u683c\u662f\u5426\u4e3a\u6700\u65b0VERIFY_INSTORY(ORDERS)#\u5982\u679c\u7f3a\u8d27CHECKOUT_INFO=PROCESS_ORDER(ORDER)SAVE_CHECKOUT(CHECUOUT_INFO)RETURN HttpStatusOk\uff0c\u5219\u4ece\u7ed3\u8d26\u4e2d\u5220\u9664\u3002Order(Orders\uff1aList[OrderItems])-&gt\uff1bCheckoutInfo\uff1a\u8bb0\u5f55\u5668.debug(&#34\uff1b\u603b\u4ef7\uff1a%d&#34\uff1b\uff0corder.price)TOTAL_PRICE=SUM([Order.Price for Orders in Orders])MOST_EXPICAL_ITEM=max(Orders\uff0cKey=lambda Order\uff1aOrder.Price)return CheckoutInfo(TOTAL_PRICE\uff0cMOST_EXPICAL_ITEM\uff0c)\n\u6211\u4e00\u76f4\u5728\u6784\u5efa\u8fd9\u4e2apython\u5de5\u5177\uff0c\u5b83\u8ba9\u60a8\u65e0\u9700\u91cd\u542f\u5373\u53ef\u5728\u8fd0\u884c\u7684python\u4e2d\u52a8\u6001\u63d2\u5165\u65b0\u65e5\u5fd7\u3002\u67e5\u770bGitHub\u4e0a\u7684\u56de\u8d2d\u3002\n\u5982\u679c\u60a8\u77e5\u9053\u6211\u9519\u8fc7\u7684\u4efb\u4f55\u5176\u4ed6\u94fe\u63a5\uff0c\u6216\u8005\u53ea\u662f\u60f3\u8054\u7cfb\uff0c\u8bf7\u7ed9\u6211\u53d1\u7535\u5b50\u90ae\u4ef6\u5230&lt\uff1bmy-first-name&gt\uff1b@&lt\uff1bmy-last-name&gt\uff1b.com", "note_en": "Logging isn&#39;t cheap, so we often disable debug level logs (and lower) when we deploy our code to production. When things are going well, this isn&#39;t an issue. But when an error log pops up, much of the context around what was happening in the code is missing. A single line about the stack trace often just isn&#39;t enough. It&#39;d be pretty nice to have a more detailed picture of what was happening at the time of failure. If only we had turned on those debug and trace logs.\n Well, there&#39;s a reason we don&#39;t. Simply put, it&#39;s expensive. Often, there&#39;s an order of magnitude more debug and trace level logs than all other logging levels combined. So if we were to log it all, we&#39;d have to spend multiples more.\n   This is where most conversations around this end. Option 2 is a non-starter so we go option 1. If an error pops up we try to replicate the bug locally with debugging on and work from there.\n  Luckily, this is a  false dichotomy. We have a third option. Use a ring buffer to store debug logs and flush it when an error occurs.\n This technique is conceptually simple. It takes just a sentence to describe, and not much has changed about the way things are logged. We still use the same logging libraries and the same logging software patterns, but now we have access to far more information in our logs when things go wrong.\n You can have your cake and eat it too. You can avoid logging verbosely while at the same time having access to those verbose logs when it matters.\n  Say that we&#39;re building a Django backend for our online widget store, and say that there&#39;s a bug somewhere inthe pseudo code below.\n # handles the order def  handle_order_post_request (req ) : customer  = get_customer (req )  if  not is_authorized_customer (customer ) :  return HttpStatusUnauthorized ( ) orders  = get_orders (req ) verify_prices (orders )  # verify that prices are up to date verify_inventory (orders )  # removes items from checkout if their out of stock checkout_info  = process_order (order ) save_checkout (checkout_info )  return HttpStatusOk (checkout_info ) # the code for processing orders def  process_order (orders : List [OrderItems ] )  - &gt; CheckoutInfo : logger .debug ( &#34;total price: %d&#34; , order .price ) total_price  =  sum ( [order .price  for order  in orders ] ) most_expensive_item  =  max ( orders , key = lambda order : order .price  )  return CheckoutInfo ( total_price , most_expensive_item ,  )\n We&#39;ve launched our widget store, and it&#39;s a hit. The widgets our flying off the shelves. Things are goinggreat but every once in a while our backend errors and a would-be customer leaves our site unhappy.Without ring buffer logging, here are the logs.\n  Something is going wrong, but what is it? with just a single line error it&#39;s difficult to tell what&#39;s goingwrong even if we had the stack trace. However, if we had all the contextual debug logs we&#39;d have far moreuseful information:\n [INFO handle_order_post_request ] POST /checkout [DEBUG get_orders ] [ring_id  2022 ] number of orders:  2 [DEBUG verify_prices ] [ring_id  2022 ] prices changes:  1 [DEBUG verify_inventory ] [ring_id  2022 ] items out of stock:  2 [DEBUG total_price ] [ring_id  2022 ] total price:  0.0 [ERROR save_receipt ] [ring_id  2022 ] non-nullable field most_expensive_item is None\n Now we see a more full picture of the story. The transaction began by processing two orders from the customer. Oneof the prices were updated, but both items were out of stock.\n Aha! when items were out of stock, they were removed from the checkout meaning that there was no most expensiveitem since the list was empty. Now we know what to do to fix this problem.\n Now, this example isn&#39;t enough to tell you whether or not ring buffer logging is worth it for your codebase. I&#39;m not goingto make an argument telling you what you should be doing when I have no context in what you deal with. But I definitely dorecommend playing around with it to see if it works for you.\n   Brian Marick made has this pdf that&#39;s a great reference for the use cases of this method.\n Will Sargent made has this blog post. It shed&#39;s some light on the history of this method. Turns out we used it to go to the moon in the 70s.\n  I&#39;ve been building this python tool that let&#39;s you dynamicallyinsert new logs to running python without restarts.  Check out the repo on GitHub\n  If you know any other links that I missed, or just want to get in touch, email me at &lt;my-first-name&gt;@&lt;my-last-name&gt;.com", "posttime": "2020-07-28 14:24:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f13\u51b2\u533a,buffer,orders", "title": "\u73af\u5f62\u7f13\u51b2\u533a\u4f10\u6728\uff0c\u8da3\u5473\u76ce\u7136\uff0c\u5229\u6da6\u4e30\u539a", "title_en": "Ring Buffer Logging For Fun And Profit", "transed": 1, "url": "https://yiblet.com/posts/ring-buffer-logging", "via": "", "real_tags": ["\u7f13\u51b2\u533a", "buffer", "orders"]}, {"category": "", "categoryclass": "", "imagename": "be92daa74e60a532e5f04f39c4138046.png", "infoid": 1014611, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u8bd5\u56fe\u4f18\u5316\u4e00\u4e2abash\u811a\u672c\uff0c\u4e0d\u77e5\u9053\u6709\u591a\u5c11\u56de\u663e\u8bed\u53e5\u4f1a\u51cf\u6162\u5b83\u7684\u901f\u5ea6\uff0c\u6240\u4ee5\u6211\u505a\u4e86\u51e0\u4e2a\u6d4b\u8bd5\u3002\u6211\u7279\u522b\u60f3\u77e5\u9053\uff0c\u4e0e\u5b8c\u5168\u5220\u9664ECHO\u8bed\u53e5\u76f8\u6bd4\uff0c\u5728ECHO\u8bed\u53e5\u4e4b\u524d\u6dfb\u52a0\u8be6\u7ec6\u68c0\u67e5\u662f\u5426\u4f1a\u5bf9\u8fd0\u884c\u65f6\u4ea7\u751f\u91cd\u5927\u5f71\u54cd\u3002\n\u6211\u4f7f\u7528\u6b64\u811a\u672c\u8fd0\u884c\u57fa\u51c6\uff1aexport TIMEFORMAT=%R Verbose=1 ECHO=foo ECHO=01234567890123456789012345678901234567890123456789 for i in{1..10}\uff1bdo time(for i in{1..10}\uff1bdo[[Verbose-eq1]]&amp\uff1b&amp\uff1bECHO$ECHO\uff1bDone&gt\uff1b/tmp/file.log)2\uff1b&gt;\uff1bfoocheckTrue.log\u65f6\u95f4(\u5bf9\u4e8e{1..1000000}\u4e2d\u7684i)\uff1bdo[[Verbose-eq0\u3002ECHO$ECHO\uff1bDone&gt\uff1b/tmp/file.log)2&gt\uff1b&gt\uff1bfoocheckFalse.log\u65f6\u95f4(\u5bf9\u4e8e{1..1000000}\u4e2d\u7684i\uff1bDo Echo$ECHO\uff1bDone&gt\uff1b/tmp/file.log)2&gt\uff1b&gt\uff1bfoonoCheck.log\u65f6\u95f4(\u5bf9\u4e8e{1..1000000}\uff1bDo\uff1a\uff1bDone)2&gt\uff1bfoonoPrint.log\u5b8c\u6210\u3002\n\u5728\u5bf9\u957f\u7684ECHO\u8bed\u53e5\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u6211\u5c06ECHO\u8bbe\u7f6e\u4e3a01234567890123456789012345678901234567890123456789\uff0c\u5728\u5bf9\u77ed\u7684ECHO\u8bed\u53e5\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u65f6\uff0c\u6211\u5c06\u5176\u8bbe\u7f6e\u4e3aFOO\u3002\n\u4e0d\u540c\u7684\u9009\u9879\u5728\u8fd0\u884c\u65f6\u6709\u663e\u8457\u5dee\u5f02\u3002\u68c0\u67e5\u5197\u957f\u548c\u4e0d\u6253\u5370\u5e73\u5747\u82b1\u8d39\u7684\u65f6\u95f4\u662f\u6839\u672c\u4e0d\u6253\u5370\u76841.5-1.7\u500d\uff01\u5728\u51b3\u5b9a\u6211\u7684bash\u811a\u672c\u771f\u6b63\u9700\u8981\u54ea\u4e9becho\u8bed\u53e5\u65f6\uff0c\u6211\u7edd\u5bf9\u8003\u8651\u5230\u4e86\u8fd9\u4e00\u70b9\u3002\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u6b64\u57fa\u51c6\u57fa\u4e8e\u56de\u663e\u5230\u6587\u4ef6\u3002\u901a\u8fc7\u5411\u63a7\u5236\u53f0\u56de\u663e\uff0c\u6253\u5370\u9009\u9879\u6240\u9700\u7684\u65f6\u95f4\u4f1a\u957f\u5f97\u591a\u3002", "note_en": "I was trying to optimize a bash script and wondered how much echo statements would slow it down, so I did a few tests. I was specifically wondering if adding a check for verbosity before an echo statement would have a significant affect on runtime, vs just removing the echo statement all together.\n  I used this script to run the benchmark: export  TIMEFORMAT =%R\t verbose =1\t echo =foo\t echo =01234567890123456789012345678901234567890123456789\t for i in  {1..10 } ;  do\t\t time  ( for i in  {1..1000000 } ;  do  [[ verbose -eq  1  ]]  &amp;&amp;  echo  $echo ;  done &gt; /tmp/file.log ) 2&gt;&gt; foocheckTrue.log\t time  ( for i in  {1..1000000 } ;  do  [[ verbose -eq  0  ]]  &amp;&amp;  echo  $echo ;  done &gt; /tmp/file.log ) 2&gt;&gt; foocheckFalse.log\t time  ( for i in  {1..1000000 } ;  do  echo  $echo ;  done &gt; /tmp/file.log ) 2&gt;&gt; foonoCheck.log\t time  ( for i in  {1..1000000 } ;  do :  ;  done ) 2&gt;&gt; foonoPrint.log done\n I set  echo to  01234567890123456789012345678901234567890123456789 when benchmarking for long echo statements, and to  foo when benchmarking short echo statements.\n       The different options had significant differences in runtime. Checking for verbosity and not printing took an average of  1.5 - 1.7 times as long as not printing anything at all! I definitely took this into consideration when deciding which echo statements were really necessary for my bash script.\n It\u2019s worth noting that this benchmark is based on  echoing to a file. By echoing to the console the options that print would take significantly longer.", "posttime": "2020-07-28 14:18:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bed\u53e5,statements,echo", "title": "Echo\u8bed\u53e5\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u964d\u4f4e\u4e86Bash\u811a\u672c\u7684\u901f\u5ea6\uff1f", "title_en": "How Much Do Echo Statements Slow Down a Bash Script?", "transed": 1, "url": "https://colekillian.com/posts/how-much-do-echo-statements-slow-down-a-bash-script-/", "via": "", "real_tags": ["\u8bed\u53e5", "echo"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014610, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u54e6\uff0c\u5929\u54ea\uff0c\u5f53\u6211\u8bd5\u56fe\u5728Confluence\u4e2d\u7f16\u8f91\u6587\u6863\u65f6\uff0c\u6211\u975e\u5e38\u6cae\u4e27\uff0c\u5b83\u7834\u574f\u4e86\u6211\u6240\u6709\u7684\u6587\u672c\uff0c\u8bd5\u56fe\u8c03\u6574\u4efb\u4f55\u6807\u7b7e\u90fd\u4f1a\u5bfc\u81f4\u66f4\u591a\u7684\u6587\u672c\u4e2d\u65ad\u3002\u5f53Slake\u63a8\u51fa\u4ed6\u4eec\u7684\u6240\u89c1\u5373\u6240\u5f97(WYSIWYG)\u7f16\u8f91\u5668\u89e3\u51b3\u4e86\u4ece\u6765\u4e0d\u5b58\u5728\u7684\u95ee\u9898\u65f6\uff0c\u6211\u7684\u611f\u89c9\u662f\u4e00\u6837\u7684\uff0c\u4f46\u81f3\u5c11\u4ed6\u4eec\u589e\u52a0\u4e86\u4e00\u4e2a\u7981\u7528\u5b83\u7684\u9009\u9879\u3002\n\u4f7f\u7528Git\u5b58\u50a8\uff0c\u4ee5\u964d\u4ef7\u5199\u5165\uff0c\u81ea\u52a8\u4e0eConfluence\u540c\u6b65\u3002\u6709\u610f\u601d\u7684?\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528Git\u5b58\u50a8\u6587\u6863\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5728Confluence\u4e2d\u7f16\u8f91\u6587\u6863\uff0c\u90a3\u4e48\u8ba9\u6211\u544a\u8bc9\u60a8\u4e03\u4e2a\u597d\u5904\uff1a\nGit Confluence\u6709\u4e00\u4e2a\u4e0d\u65ad\u53d8\u5316\u7684\u5386\u53f2\uff0c\u4f46\u5b83\u975e\u5e38\u6709\u9650\uff1a\u60a8\u4e0d\u80fd\u5bf9git\u8fdb\u884c\u6307\u8d23\uff0c\u4e0d\u80fd\u4f7f\u7528git log-S\u6765\u641c\u7d22\u8c01\u6dfb\u52a0\u4e86\u7279\u5b9a\u7684\u6587\u672c\u3002\n\u73b0\u5728\uff0c\u62e5\u6709\u5168\u65b0\u773c\u5149\u7684\u4eba\u53ef\u4ee5\u53d1\u73b0\u95ee\u9898\u5e76\u4e3a\u533b\u751f\u63d0\u4f9b\u5efa\u8bae\u3002\u4f60\u7f16\u5199\u4ee3\u7801-\u6709\u4eba\u5ba1\u9605\u5b83\uff0c\u4f60\u5199\u4e00\u672c\u4e66-\u6709\u4eba\u5ba1\u9605\u5b83\u3002\u73b0\u5728\uff0c\u4f60\u5199\u6587\u6863-\u6709\u4eba\u5ba1\u9605\u5b83\u3002\n\u5de5\u5177\u6211\u4eec\u6709\u4e00\u4e9b\u5f88\u68d2\u7684\u5de5\u5177\uff0c\u6bd4\u5982VSCode\uff0cNeovim\uff0cSublime\uff0c\u6216\u8005IDEA\uff0c\u5b83\u4eec\u90fd\u6709\u4e00\u5957\u5fc5\u8981\u7684\u6269\u5c55\uff0c\u4f7f\u6211\u4eec\u7684\u7f16\u7801\u66f4\u6709\u6548\u7387\uff0c\u66f4\u4e0d\u4ee4\u4eba\u6cae\u4e27\u3002\n\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u7528\u5b83\u6765\u5199\u6587\u6863\u5462\uff1f\u5b83\u80af\u5b9a\u6bd4\u6240\u89c1\u5373\u6240\u5f97\u66f4\u6709\u6548\u7387\u3002\n\u6ca1\u6709\u4e0a\u4e0b\u6587\u5207\u6362\uff0c\u4e0d\u9700\u8981\u8df3\u6765\u8df3\u53bb\u9605\u8bfb\u4e00\u4e9b\u6587\u6863\u3002\u53ea\u9700\u5728\u60a8\u7684\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u5b83\uff0c\u56e0\u4e3a\u60a8\u5c06\u6587\u6863\u5b58\u50a8\u5728\u4ee3\u7801\u9644\u8fd1\u3002\n\u6258\u7ba1\u4e0d\u53ef\u77e5\u8bba\u5982\u679c\u4f60\u60f3\u5f00\u6e90\u7684\u8bdd\uff0c\u4f60\u53ef\u4ee5\u628a\u4f60\u7684\u6587\u6863\u63a8\u9001\u5230GitHub\u4e0a\u3002\n\u6301\u7eed\u96c6\u6210\u5982\u679c\u60a8\u6709\u6211\u5c06\u8981\u4ecb\u7ecd\u7684\u9002\u5f53\u5de5\u5177\uff0c\u60a8\u53ef\u4ee5\u5728\u4e00\u6b21\u6210\u529f\u7684git\u63a8\u9001\u4e4b\u540e\u81ea\u52a8\u66f4\u65b0\u60a8\u7684\u6587\u6863inConfluence\u3002\nMark\u8bfb\u53d6Markdown\u6587\u4ef6\uff0c\u5982\u679c\u4e0d\u8bfb\u53d6\uff0c\u5219\u521b\u5efa\u4e00\u4e2aConfluence\u9875\u9762\uff0c\u5982\u679c\u6709\u9644\u4ef6\uff0c\u5219\u4e0a\u4f20\u9644\u4ef6\uff0c\u5c06Markdown\u8f6c\u6362\u4e3aHTML\uff0c\u5e76\u901a\u8fc7REST API\u66f4\u65b0\u9875\u9762\u5185\u5bb9\u3002\n\u8fd9\u5c31\u50cf\u60a8\u751a\u81f3\u4e0d\u518d\u9700\u8981\u5728\u60a8\u7684Confluence\u4e2d\u521b\u5efa\u5206\u533a/\u9875\u9762\uff0c\u53ea\u9700\u5728\u60a8\u7684.md\u6587\u4ef6\u4e2d\u63d0\u53ca\u5b83\u4eec\u5373\u53ef\u3002\nMark\u4f7f\u7528\u4e86\u4e00\u79cd\u6269\u5c55\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5b83\u4ecd\u7136\u662f\u6709\u6548\u7684\u6807\u8bb0\uff0c\u5305\u542b\u51e0\u4e2aHTML-ish\u5143\u6570\u636e\u5934\uff0c\u53ef\u4ee5\u7528\u6765\u5728Confluence\u5b9e\u4f8b\u4e2d\u5b9a\u4f4d\u9875\u9762\u5e76\u76f8\u5e94\u5730\u66f4\u65b0\u5b83\u3002\n&lt\uff1b\uff01--\u7a7a\u683c\uff1a&lt\uff1b\u7a7a\u683c\u952e&gt\uff1b--&gt\uff1b&lt\uff1b\uff01--\u7236\u9879\uff1a&lt\uff1b\u7236\u98791&&gt;\uff1b--&lt\uff1b&lt\uff1b\uff01--\u7236\u9879\uff1a&lt\uff1b\u7236\u98792&&gt;\uff1b--&gt\uff1b&lt\uff1b\uff01--\u6807\u9898\uff1a&lt\uff1b\u6807\u9898&&gt;\uff1b--&&gt;\uff1b&-\u9644\u4ef6\uff1a&lt\uff1b\u672c\u5730\u8def\u5f841&&gt;\uff1b--\u3002\u672c\u5730\u8def\u5f842&gt\uff1b--&gt\uff1b\u6b64\u5904\u6709\u4e00\u4e9b\u6587\u672c\u3002\n&lt\uff1b\uff01--\u7a7a\u95f4\uff1aDev--&gt\uff1b&lt\uff1b\uff01--Parent\uff1aAutomation--&gt\uff1b&lt\uff1b\uff01--Parent\uff1aDocumentation--&gt\uff1b&lt\uff1b\uff01--Title\uff1aSync Markdown to Confluence--&gt\uff1b&lt\uff1b\uff01--\u9644\u4ef6\uff1aImage/Screenshot.png--&gt\uff1b\u6b64\u5904\u7684\u6587\u7ae0\u6587\u672c\u3002\uff01[\u622a\u56fe](image/Architecture ture.png)\u3002\nMark\u5c06\u4e0a\u4f20\u6587\u4ef6image/creenshot.png\u4f5c\u4e3a\u9644\u4ef6\uff0c\u901a\u8fc7\u4ee5\u4e0b\u8def\u5f84\u5728Confluence\u4e2d\u521b\u5efa\u4e00\u4e2a\u9875\u9762\uff1a\u5f00\u53d1\u4eba\u5458/\u81ea\u52a8\u5316/Documentation\u2192\u540c\u6b65Markdown\u5230Confluence\uff0c\u7136\u540erender Markdown as Html\u5e76\u4ee3\u8868\u7528\u6237\u901a\u8fc7rest API\u653e\u7f6e\u5185\u5bb9\u3002\n\u5c06Mark\u96c6\u6210\u5230CI/CD\u7cfb\u7edf\u975e\u5e38\u7b80\u5355\uff0c\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f7f\u7528Snake Ciin\u7684\u793a\u4f8b\uff0c\u7528\u4e8e\u81ea\u6258\u7ba1Bitbucket\u670d\u52a1\u5668/\u6570\u636e\u4e2d\u5fc3\u3002\n\u9636\u6bb5\uff1a-\u540c\u6b65\u540c\u6b65\u6587\u6863\uff1a\u9636\u6bb5\uff1a\u4ec5\u540c\u6b65\uff1a\u5206\u652f\uff1a-\u4e3b\u56fe\u50cf\uff1akovetski/\u6807\u8bb0\u547d\u4ee4\uff1a-\u5bf9\u4e8e$(find-type f-name&#39\uff1b*.md&#39\uff1b)\u4e2d\u7684\u6587\u4ef6\uff1b\u6267\u884cECHO&#34\uff1b&gt\uff1bSYNC$FILE&#34\uff1b\uff1bMARK-u$MARK_USER-p$MARK_PASS-b$MARK_URL-f$FILE||EXIT 1\uff1bECHO\uff1b\u5b8c\u6210\u3002\n\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4f7f\u7528kovetski/mark\u6620\u50cf\u521b\u5efa\u4e00\u4e2a\u4f5c\u4e1a\u5bb9\u5668\uff0c\u5176\u4e2d\u5c06\u514b\u9686\u5305\u542b\u6587\u6863\u7684\u5b58\u50a8\u5e93\u3002\u4ee5\u4e0b\u547d\u4ee4\u67e5\u627e\u6240\u6709*.md\u6587\u4ef6\uff0c\u5e76\u9010\u4e2a\u9488\u5bf9\u5b83\u4eec\u8fd0\u884c\u6807\u8bb0\uff1a\n\u5bf9\u4e8e$(find-type f-name&#39\uff1b*.md&#39\uff1b)\uff1b\u4e2d\u7684\u6587\u4ef6\uff0c\u6267\u884cECHO&#34\uff1b&gt\uff1b\u540c\u6b65$FILE&#34\uff1b\uff1bmark-u$Mark_user-p$Mark_pass-b$Mark_URL-f$file||\u9000\u51fa1\uff1bECHO\uff1b\u5b8c\u6210\u3002\n\u4ee5\u4e0b\u6307\u4ee4\u544a\u8bc9CI\u4ec5\u5728\u5c06\u66f4\u6539\u63a8\u9001\u5230\u4e3b\u5206\u652f\u65f6\u624d\u8fd0\u884c\u6b64\u7279\u5b9a\u4f5c\u4e1a\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5b89\u5168\u5730\u5c06\u60a8\u7684\u66f4\u6539\u63a8\u9001\u5230\u529f\u80fd\u5206\u652f\u4e2d\uff0c\u800c\u4e0d\u5fc5\u62c5\u5fc3\u5b83\u4eec\u4f1a\u81ea\u52a8\u663e\u793a\u5728Confluence\u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u5ba1\u67e5\u8fc7\u7a0b\uff0c\u5e76\u5728PR\u5408\u5e76\u65f6\u81ea\u52a8\u90e8\u7f72\u5b83\u4eec\u3002", "note_en": "Oh man, I was so frustrated when I was trying to edit docs in Confluence, and itbroke all my text, trying to adjust any tags led to breaking the text even more.I felt the same when Slack introduced their Wysiwyg editor that solved problems that never existed,but at least they added an option to disable it.\n  Store with Git, write in Markdown, automatically sync with Confluence. Interesting? Let me tell youabout seven benefits that you could have if you could use Git for storing your docs instead of editingthem directly in Confluence:\n Git Confluence has a history of changes, but it\u2019s very limited: you can\u2019t do  git blame,you can\u2019t do  git log -S to search who added a specific text.\n Pull Requests Now, someone with a fresh set of eyes can identify problems and provide suggestions for docs.You write code \u2014 someone reviews it, you write a book \u2014 someone reviews it.Now, you write docs \u2014 someone reviews it.\n Instruments We have some great tools like VSCode, Neovim, Sublime, or Idea with all required set ofextensions that make our coding even more efficient and less frustrating.\n Then why not using it for writing docs? It\u2019s more efficient than Wysiwyg for sure.\n No context switching No need to jump around to read docs a bit. Just open it up in your editorbecause you store the docs near to the code.\n Hosting Agnostic You can just push your docs on GitHub if you want to open source it.\n  Continuous Integration If you have a proper tool that I\u2019m going to introduce, you can automatically update your docs inConfluence after a successful  git push.\n   Mark reads your Markdown file, creates a Confluence page if it doesn\u2019t, uploadsattachments if any, translates Markdown into HTML, and updates the contents of the page via REST API.\n It\u2019s like you don\u2019t even need to create sections/pages in your Confluence anymore, just mention them inyour .md files.\n Mark uses an extended file format, which, still being valid markdown, contains several HTML-ishmetadata headers, which can be used to locate page inside Confluence instance and update itaccordingly.\n &lt;!-- Space: &lt;space key&gt; --&gt; &lt;!-- Parent: &lt;parent 1&gt; --&gt; &lt;!-- Parent: &lt;parent 2&gt; --&gt; &lt;!-- Title: &lt;title&gt; --&gt; &lt;!-- Attachment: &lt;local path 1&gt; --&gt; &lt;!-- Attachment: &lt;local path 2&gt; --&gt;Some text here.\n   &lt;!-- Space: DEV --&gt; &lt;!-- Parent: Automation --&gt; &lt;!-- Parent: Documentation --&gt; &lt;!-- Title: Sync Markdown to Confluence --&gt; &lt;!-- Attachment: images/screenshot.png --&gt;Article text here.![ screenshot]( images/architecture.png)\n  Mark will upload file  images/screenshot.png as an attachment, create a page in Confluence by thefollowing path:  Dev / Automation / Documentation \u2192 Sync Markdown to Confluence, then renderMarkdown as HTML and put the contents via REST API on the user\u2019s behalf.\n  It\u2019s quite trivial to integrate Mark into a CI/CD system, here is an example with  Snake CIin case of self-hosted Bitbucket Server / Data Center.\n stages :   - sync    Sync documentation :    stage :  sync    only :    branches :   - main    image :  kovetskiy/mark    commands :   - for  file  in  $(find  -type  f  -name   &#39;*.md&#39;);  do   echo   &#34;&gt; Sync $file&#34;;   mark  -u  $MARK_USER  -p  $MARK_PASS  -b  $MARK_URL  -f  $file  ||  exit   1;   echo;   done\n In this example, I\u2019m using the  kovetskiy/mark image for creating a job container where therepository with documentation will be cloned to. The following command finds all  *.md files and runs mark against them one by one:\n for file in  $(find -type f -name  &#39;*.md&#39; ) ;  do  echo  &#34;&gt; Sync  $file &#34; ; mark -u  $MARK_USER -p  $MARK_PASS -b  $MARK_URL -f  $file  ||  exit 1 ; echo ; done\n The following directive tells the CI to run this particular job only if the changes are pushed into the main branch. It means you can safely push your changes into feature branches without being afraidthat they automatically shown in Confluence, then go through the reviewal process and automaticallydeploy them when PR got merged.", "posttime": "2020-07-28 14:17:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7528\u4e8e,markdown,confluence", "title": "\u5c06\u964d\u4ef7\u7528\u4e8e\u6c47\u6d41", "title_en": "Use Markdown for Confluence", "transed": 1, "url": "https://samizdat.dev/use-markdown-for-confluence/", "via": "", "real_tags": ["\u7528\u4e8e", "markdown"]}, {"category": "", "categoryclass": "", "imagename": "45e9bbb10327771de28702b4d302e612.png", "infoid": 1014609, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "OpenSource Analytical Databases\u9886\u57df\u6709\u4e24\u4e2a\u65b0\u7248\u672c\uff0c\u8fd9\u8ba9\u6211\u60f3\u8bc4\u4f30\u5b83\u4eec\u5728\u661f\u578b\u67b6\u6784\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u7684\u8868\u73b0\u3002\nMariaDB10.5\u9644\u5e26\u4e86\u5185\u7f6e\u7684ColumnStore\u548c\u4e00\u4e2a\u6709\u8da3\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u5728\u540c\u4e00\u5b9e\u4f8b\u4e2d\u5c06\u6570\u636e\u4eceInnoDB\u5b9e\u65f6\u590d\u5236\u5230ColumnStore\uff0c\u4ed6\u4eec\u5c06\u5176\u547d\u540d\u4e3a\u201c\u6df7\u5408\u4e8b\u52a1\u548c\u5206\u6790\u5904\u7406\u201d\u3002\n\u5bf9\u4e8eClickHouse\uff0c\u4e0d\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u7248\u672c\uff0c\u800c\u662f\u5728\u8fc7\u53bb\u4e09\u5e74\u4e2d\u4e0d\u65ad\u6539\u8fdb\uff0c\u4ee5\u652f\u6301\u8054\u63a5\u67e5\u8be2\u3001\u652f\u6301\u66f4\u65b0\u6570\u636e\u4ee5\u53ca\u6539\u8fdb\u4e0eMySQL\u7684\u96c6\u6210\u3002\n\u5bf9\u4e8e\u57fa\u51c6\u6d4b\u8bd5\uff0c\u6211\u5c06\u4f7f\u7528\u6bd4\u4f8b\u56e0\u5b50\u4e3a2500\u7684\u661f\u578b\u67b6\u6784\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5176\u5927\u5c0f\u4e3a\uff1a\nStar Schema\u57fa\u51c6\u6d4b\u8bd5\u89c4\u5b9a\u6267\u884c13\u4e2a\u67e5\u8be2\uff0c\u6211\u5c06\u6d4b\u91cf\u6bcf\u4e2a\u67e5\u8be2\u7684\u6267\u884c\u65f6\u95f4\u3002\n\u9644\u6ce8\uff1aClickHouse\u6587\u6863\u63d0\u4f9b\u4e86\u661f\u578b\u67b6\u6784\u67e5\u8be2\u7684\u793a\u4f8b\uff0c\u4f46\u662f\uff0c\u5b83\u4eec\u91c7\u7528\u4e86\u4e00\u79cd\u53cd\u89c4\u683c\u5316\u65b9\u6cd5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u662f\u6709\u6548\u7684\uff0c\u4f46\u4e0d\u5141\u8bb8\u6d4b\u8bd5\u4f7f\u75283\u5411\u8054\u63a5\u7684\u539f\u59cb\u67e5\u8be2\u7684\u6267\u884c\u60c5\u51b5\uff0c\u8fd9\u662f\u6211\u5728\u672c\u5b9e\u9a8c\u4e2d\u7684\u76ee\u6807\u3002\n\u6211\u60f3\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u7ed3\u679c\u662f\u5c06150\u4ebf\u884c\u52a0\u8f7d\u5230\u6570\u636e\u5e93\u9700\u8981\u591a\u957f\u65f6\u95f4\uff0c\u4ee5\u53ca\u6700\u7ec8\u7684\u8868\u5927\u5c0f\u662f\u591a\u5c11\u3002\n\u73b0\u5728\uff0c\u6211\u60f3\u6bd4\u8f83ColumnStore\u548cClickHouse\u7684\u67e5\u8be2\u6267\u884c\u65f6\u95f4\u3002\u6211\u5c06\u4f7f\u7528\u5c3d\u53ef\u80fd\u63a5\u8fd1\u539f\u59cb\u7684\u67e5\u8be2\uff0c\u4f46\u662f\u5bf9\u4e8eClickHouse\uff0c\u6211\u4ecd\u7136\u9700\u8981\u8c03\u6574\u67e5\u8be2\u4ee5\u4fbf\u80fd\u591f\u6267\u884c\u5b83\u4eec\u3002\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0cClickHouse\u5728\u9664\u4e00\u4e2a\u67e5\u8be23.1\u4e4b\u5916\u7684\u6240\u6709\u67e5\u8be2\u4e2d\u7684\u8868\u73b0\u90fd\u8981\u597d\u4e8e\u5176\u4ed6\u67e5\u8be2\uff0c\u6709\u65f6\u8fd8\u4f1a\u6709\u5f88\u5927\u7684\u5dee\u8ddd\u3002\u53e6\u5916\uff0c\u67e5\u8be24.1\u5bf9\u4e8eClickHouse\u6765\u8bf4\u5c24\u5176\u56f0\u96be\u3002\n\u6211\u63d0\u5230\u8fc7\u8981\u5728ClickHouse\u4e2d\u8fd0\u884c\u67e5\u8be2\uff0c\u5b83\u4eec\u4ecd\u7136\u9700\u8981\u4fee\u6539\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u770b\u770b\u3002\n\u5982\u679c\u4e09\u5e74\u524d(\u8bf7\u53c2\u9605\u6211\u524d\u9762\u63d0\u5230\u7684\u535a\u5ba2\uff0cClickHouse in a General Analytical Workload-based a Star Schema Benchmark)\uff0c\u4e00\u4e2a3\u5411\u8054\u63a5\u67e5\u8be2\uff0c\u5982\uff1a\nSELECT SUM(LO_REAGE)\uff0cP_MFGR\uff0cTO Year(LO_ORDERDATE)YOD FROM LINORDERFULL\uff0cCUSTERFULL\uff0cPARTFULL WHERE C_REGION=C_CUSTKEY=C_CUSTKEY AND P_PARTKEY=LO_PARTKEY GROUP BY BY P_MFGR\uff0cYOD ORDER BY P_MFGR\uff0cYOD\uff1b\nSELECT SUM(LO_REAGE)\u3001P_MFGR\u3001TOYear(LO_ORDERDATE)as yodFROM(SELECT LO_PARTKEY\uff0cLO_ORDERDATE\uff0cLO_REAGENT FROM LINEL ALL INTER JOIN(SELECT C_REGION\uff0cC_CUSTKEY AS LO_CUSTKEY FROM customerFull)WHERE C_CUSTKEY=&#39\uff1bASIA&#39)\u4f7f\u7528(LO_CUSTKEY)WHERE(LO_CUSTKEY)WHERE C_REGION=&#39\uff1bASIA&#39\u3002\nSELECT to Year(LO_ORDERDATE)AS Year\uff0cC_Nation\uff0cSUM(LO_REAGENT-LO_SUPPLYCOST)AS ProfitfROM linderINNER JOIN CUSTKEY=LO_CUSTKEYNER JOIN SUPPORTER ON LO_SUPPKEY=S_SUPPKEYINNER JOIN PART ON P_PARTKEY=LO_PARTKEYWHERE(C\u3002))\u6309\u5e74\u5206\u7ec4\uff0cC_NATIONORER\u6309\u5e74ASC\uff0cC_\u56fd\u5bb6ASC\u3002\nWHERE(C_Region=&#39\uff1bAmerica&#39\uff1b)AND(S_Region=&#39\uff1bAmerica&#39\uff1b)AND((P_MFGR=&#39\uff1bMFGR#1&#39\uff1b)OR(P_MFGR=&#39\uff1bMFGR#2&#39\uff1b))\u3002\n\u5c3d\u7ba1ClickHouse\u4e2d\u7684\u67e5\u8be2\u770b\u8d77\u6765\u50cf\u666e\u901a\u8054\u63a5\u67e5\u8be2\uff0c\u4f46ClickHouse\u6ca1\u6709\u67e5\u8be2\u4f18\u5316\u5668\u3002\u8fd9\u610f\u5473\u7740\u8868\u5c06\u6309\u7167\u60a8\u7f16\u5199\u7684\u987a\u5e8f\u8fdb\u884c\u8054\u63a5\uff0c\u5e76\u4e14ClickHouse\u4e0d\u4f1a\u5c1d\u8bd5\u66f4\u6539\u8868\u987a\u5e8f\u4ee5\u5b9e\u73b0\u6700\u4f73\u6267\u884c\u3002\u8fd9\u9879\u4efb\u52a1\u4ecd\u7531\u5f00\u53d1\u4eba\u5458\u8d1f\u8d23\u3002\n\u5728\u4eba\u5de5\u5e72\u9884\u4e0b\uff0c\u5982\u679c\u6211\u4eec\u4ee5\u4ee5\u4e0b\u5f62\u5f0f\u7f16\u5199ClickHouse\u7684\u67e5\u8be23.1\uff0c\u4ecd\u7136\u6709\u53ef\u80fd\u6539\u8fdb\u5b83(\u611f\u8c22Altinity\u7684Alexander Zaytsev\u7684\u5e2e\u52a9\uff01)\uff1a\nSELECT C_NION\uff0cS_NION\uff0cTO Year(LO_ORDERDATE)\u4f5c\u4e3a\u5e74\u4efd\uff0cSUM(LO_REAGE)\u4f5c\u4e3a\u6536\u5165FROM LINEORDER INNER JOIN\u5ba2\u6237on C_CUSTKEY=LO_CUSTKEYNER\u52a0\u5165\u4f9b\u5e94\u5546On LO_SUPPKEY=S_SUPPKEYWHERE LO_CUSTKEY in(SELECT DISTINCT C_CUSTKEY from Customer WHERE WHERE C_Region=&#39\uff1bAsia)(SELECT DISTINCT C_CUSTKEY from Customer WHERE where C_Region=&#39\uff1bAsia\u3002=1997GROUP BY C_NION\uff0cS_NION\uff0cYear ORDER By Year ASC\uff0cIncome DESC\uff1b\n\u67e5\u8be23.1\u7684\u6267\u884c\u65f6\u95f4\u4ece7\u520633\u79d2\u51cf\u5c11\u52305\u520644\u79d2\u3002\n\u4e5f\u53ef\u4ee5\u6539\u8fdb\u5176\u4ed6\u67e5\u8be2\uff0c\u4f46\u6211\u5e0c\u671b\u5c06\u5b83\u4eec\u4fdd\u7559\u5728\u539f\u59cb\u5f62\u5f0f\u3002\n\u66f4\u65b0\u67e5\u8be2\u4e0d\u662f\u661f\u578b\u67b6\u6784\u57fa\u51c6\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u8fd9\u4e2a\u95ee\u9898\u5f88\u5e38\u89c1\u3002\n\u6211\u4eec\u662f\u5426\u53ef\u4ee5\u66f4\u65b0\u6570\u636e\u4ee5\u53ca\u66f4\u65b0\u67e5\u8be2\u7684\u6267\u884c\u60c5\u51b5\uff0c\u56e0\u4e3a\u8fd9\u5bf9\u5206\u6790\u6570\u636e\u5e93\u6765\u8bf4\u53ef\u80fd\u662f\u4e00\u4e2a\u6311\u6218\uff1f\n\u4e3a\u6b64\uff0cClickHouse\u5f15\u5165\u4e86\u4e00\u79cd\u7279\u6b8a\u7684\u66f4\u65b0\u8bed\u6cd5\uff0c\u7c7b\u4f3c\u4e8eALTER TABLE\u2026\u3002UPDATE\u7a81\u51fa\u663e\u793a\u8fd9\u4e0d\u662f\u5178\u578b\u7684UPDATE\u8bed\u53e5\u3002\n\u540c\u6837\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cClickHouse\u4e2d\u7684ALTER TABLE UPDATE\u662f\u4ee5\u5f02\u6b65\u65b9\u5f0f\u6267\u884c\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u5b8c\u6210\u4e4b\u524d\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u5e94\u7528\u66f4\u6539\u671f\u95f4\u7684\u4e0d\u4e00\u81f4\u3002\n\u8bf7\u6ce8\u610f\uff0c\u6b64\u67e5\u8be2\u5c06\u66f4\u65b015BN\u884c\uff0c\u8fd9\u4e0d\u662f\u4e00\u9879\u5fae\u4e0d\u8db3\u9053\u7684\u4efb\u52a1\uff01\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5e94\u7528\u8fd9\u4e9b\u66f4\u6539\u9700\u8981\u591a\u957f\u65f6\u95f4\u3002\u4e3a\u6b64\uff0c\u6211\u5c06\u8fd0\u884c\u4ee5\u4e0b\u67e5\u8be2\u3002\n\u7ed3\u679c\uff1a\u5728ALTER TABLE\u67e5\u8be2\u4e4b\u540e\uff0cSELECT\u67e5\u8be2\u5927\u7ea6\u9700\u89812\u5206\u949f\u6765\u53cd\u6620\u65b0\u503c\u3002\n\u6211\u7b49\u4e866\u4e2a\u5c0f\u65f6\u624d\u5b8c\u6210\u67e5\u8be2\uff0c\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4e0d\u5f97\u4e0d\u7ec8\u6b62\u5b83\uff0c\u56e0\u4e3a\u6211\u4e0d\u80fd\u518d\u7b49\u4e86\u3002\nClickHouse-\u66f4\u65b0\u662f\u5f02\u6b65\u8fd0\u884c\u7684\uff0c\u5e76\u4e14\u4e0d\u662f\u4e8b\u52a1\u6027\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8bfb\u53d6\u67e5\u8be2\u5728\u8fd0\u884c\u66f4\u65b0\u65f6\u8fd4\u56de\u4e0d\u4e00\u81f4\u7684\u7ed3\u679c\u3002\nColumnStore-\u66f4\u65b0\u662f\u540c\u6b65\u7684\u548c\u4e8b\u52a1\u6027\u7684\u3002\u8fd9\u53ef\u80fd\u5c31\u662f\u66f4\u65b0150\u4ebf\u884c\u9700\u8981\u8fd9\u4e48\u957f\u65f6\u95f4\u7684\u539f\u56e0\u3002\n\u56e0\u6b64\uff0c\u5f88\u660e\u663e\uff0c\u5982\u679c\u8981\u9009\u62e9\u9996\u9009\u9879\uff0c\u6211\u4f1a\u5728\u7ed9\u5b9a\u67e5\u8be2\u6267\u884c\u65f6\u95f4\u3001\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\u548c\u65b0\u6539\u8fdb\u7684\u8fde\u63a5\u8bed\u6cd5\u7684\u60c5\u51b5\u4e0b\u9009\u62e9ClickHouse\u3002\nColumnStore\u7684\u597d\u5904\u662f\u5b83\u4f4d\u4e8e\u5355\u4e2a\u7c7b\u4f3c\u4e8eMySQL\u7684\u5305(MariaDB\u98ce\u683c)\u4e2d\uff0c\u5e76\u4e14\u6709\u4e00\u79cd\u5c06\u6570\u636e\u6d41\u4eceInnoDB\u96c6\u6210\u5230ColumnStore\u7684\u7b80\u5355\u65b9\u6cd5\u3002\nClickHouse\u5bf9\u4e0eMySQL\u7684\u96c6\u6210\u8fdb\u884c\u4e86\u6539\u8fdb(\u53c2\u89c1ClickHouse\u548cMySQL-\u66f4\u597d\u5730\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u4ecd\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\uff01)\u3002\n\u67b6\u6784\uff1a\u652f\u6301x86_64 CPU\uff1a\u652f\u630148\u4e2a\u5728\u7ebfCPU\u5217\u8868\uff1a0-47\u4e2a\u7ebf\u7a0b/\u6838\uff1a\u6bcf\u4e2a\u63d2\u69fd\u652f\u63012\u4e2a\u6838\uff1a\u652f\u630112\u4e2a\u63d2\u69fd\uff1a\u652f\u63012\u4e2aNUMA\u8282\u70b9\uff1a\u652f\u63012\u4e2aCPU\u5bb6\u65cf\uff1a\u652f\u63016\u4e2a\u578b\u53f7\uff1a\u652f\u6301\u652f\u630163\u4e2aCPU\u578b\u53f7\uff1a\u652f\u63010-47\u4e2a\u7ebf\u7a0b/\u5185\u6838\uff1a\u652f\u630112\u4e2a\u63d2\u69fd\uff1a\u652f\u63012\u4e2aNUMA\u8282\u70b9\uff1a\u652f\u63012\u4e2aCPU\u5bb6\u65cf\uff1a\u652f\u63016\u4e2a\u578b\u53f7\uff1a\u652f\u63018\u4e2a\u82f1\u7279\u5c14(R)\u81f3\u5f3a(R)CPU E5-2680\u4e2a\u578b\u53f7\u540d\u79f0\uff1a\u652f\u6301\u82f1\u7279\u5c14(R)\u81f3\u5f3a(R)CPU E5-2680", "note_en": "There were two new releases in the OpenSource Analytical Databases space, which made me want to evaluate how they perform in the Star Schema Benchmark.\n    MariaDB 10.5 comes with built-in ColumnStore and an interesting capability to replicate data from InnoDB to ColumnStore in real-time within the same instance, and they named it \u201chybrid transactional and analytical processing\u201d.\n For ClickHouse, there was not a single release, but continuous improvements for the last three years to support JOIN queries, support of updating data, and improved integration with MySQL.\n   For the benchmark I will Star Schema Benchmark with scale factor 2500, which in sizes is:\n  Star Schema Benchmark prescribes to execute 13 queries and I will measure execution time for each query.\n   Side note: ClickHouse documentation provides examples for Star Schema queries, however, they took a denormalization approach, which is valid, but does not allow to test how original queries with 3-way JOINs would perform, which is my goal in this experiment.\n  The first result I want to see is how long it would take to load 15bln rows into the database and what the final table size will be.\n              Now I want to compare query execution times for ColumnStore and ClickHouse. I will use queries as close to the original as possible, but for ClickHouse I still need to adjust queries in order to be able to execute them.\n  We can see that ClickHouse outperforms, sometimes by a huge margin, in all queries but one \u2013 Query 3.1. Also, query 4.1 is particularly hard for ClickHouse.\n  I mentioned that to run queries in ClickHouse they still need modifications, so let\u2019s take a look.\n If three years ago (see the blog I mentioned earlier,  ClickHouse in a General Analytical Workload \u2013 Based on a Star Schema Benchmark), a 3-way JOIN query like:\n SELECT sum(LO_REVENUE),P_MFGR, toYear(LO_ORDERDATE) yod FROM lineorderfull ,customerfull,partfull WHERE C_REGION = &#39;ASIA&#39; andLO_CUSTKEY=C_CUSTKEY and P_PARTKEY=LO_PARTKEY GROUP BY P_MFGR,yod ORDER BY P_MFGR,yod;\n   SELECT sum(LO_REVENUE), P_MFGR, toYear(LO_ORDERDATE) AS yodFROM ( SELECT LO_PARTKEY, LO_ORDERDATE, LO_REVENUE FROM lineorderfull ALL INNER JOIN ( SELECT C_REGION, C_CUSTKEY AS LO_CUSTKEY FROM customerfull ) USING (LO_CUSTKEY) WHERE C_REGION = &#39;ASIA&#39;) ALL INNER JOIN ( SELECT P_MFGR, P_PARTKEY AS LO_PARTKEY FROM partfull ) USING (LO_PARTKEY)GROUP BY P_MFGR, yodORDER BY P_MFGR ASC, yod ASC\n   SELECT toYear(LO_ORDERDATE) AS year, C_NATION, SUM(LO_REVENUE - LO_SUPPLYCOST) AS profitFROM lineorderINNER JOIN customer ON C_CUSTKEY = LO_CUSTKEYINNER JOIN supplier ON LO_SUPPKEY = S_SUPPKEYINNER JOIN part ON P_PARTKEY = LO_PARTKEYWHERE (C_REGION = &#39;AMERICA&#39;) AND (S_REGION = &#39;AMERICA&#39;) AND ((P_MFGR = &#39;MFGR#1&#39;) OR (P_MFGR = &#39;MFGR#2&#39;))GROUP BY year, C_NATIONORDER BY year ASC, C_NATION ASC\n WHERE   ( C_REGION   =   &#39;AMERICA&#39; )   AND   ( S_REGION   =   &#39;AMERICA&#39; )   AND   ( ( P_MFGR   =   &#39;MFGR#1&#39; )   OR   ( P_MFGR   =   &#39;MFGR#2&#39; ) )\n    Even though queries in ClickHouse look like normal JOIN queries, ClickHouse DOES NOT HAVE query optimizer. That means that tables will be joined in the order you have written them, and ClickHouse will not try to change table order for the optimal execution. This task is still on developers.\n With human intervention, it is still possible to improve Query 3.1 for ClickHouse, if we write it in the following form (Thanks to Alexander Zaytsev from  Altinity for the help!):\n SELECT C_NATION, S_NATION, toYear(LO_ORDERDATE) AS year, SUM(LO_REVENUE) AS revenueFROM lineorderINNER JOIN customer ON C_CUSTKEY = LO_CUSTKEYINNER JOIN supplier ON LO_SUPPKEY = S_SUPPKEYWHERE LO_CUSTKEY in (select distinct C_CUSTKEY from customer where C_REGION = &#39;ASIA&#39;) ANDLO_SUPPKEY in (select distinct S_SUPPKEY from supplier where S_REGION = &#39;ASIA&#39;) AND AND year &gt;= 1992 AND year &lt;= 1997GROUP BY C_NATION, S_NATION, yearORDER BY year ASC, revenue DESC;\n  Execution time for query 3.1 is reduced from  7 min 33 sec to  5 min 44 sec.\n It is possible that other queries also can be improved, but I want to keep them in the original form.\n  Update queries are not part of Star Schema Benchmark, but this question is quite regular.\n Can we update data AND how well UPDATE queries are performing, because it can be a challenge for analytical databases?\n For this, ClickHouse introduced a special UPDATE syntax, which looks like ALTER TABLE \u2026 UPDATE to highlight this is not a typical UPDATE statement.\n Also it is worth noting that ALTER TABLE UPDATE in ClickHouse is executed in an asynchronous way, meaning that until it is finished you may see inconsistencies during the period while changes are applied.\n     Please note this query will update  15 bln rows, which is not a trivial task!\n We can see how long it will take to apply the changes. For this, I will run the following query\n    The result: It took about  2 mins after ALTER TABLE query for SELECT query to reflect new values.\n      I waited  6 hours for the query to finish, and at that point, I had to kill it, as I could not wait any longer.\n  ClickHouse \u2013 the update is run asynchronous and is NOT transactional, which likely will result in read queries returning inconsistent results while UPDATE is running.\n ColumnStore \u2013 the update is synchronous and transactional. Likely this is why it takes that long to update 15bln rows.\n  So obviously, if it comes to preference, I would choose ClickHouse given query execution times, data load times, and new improved JOIN syntax.\n The benefit of ColumnStore is that it comes in a single MySQL-like package (MariaDB-flavor) and there is an easy way to integrate data flow from InnoDB to ColumnStore.\n ClickHouse makes improvements for integrations with MySQL (see  ClickHouse and MySQL \u2013 Better Together, but there is still room for improvements!\n   Architecture:\u00a0 \u00a0 \u00a0 \u00a0 x86_64  CPU(s):\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 48  On-line CPU(s) list: 0-47  Thread(s) per core:\u00a0 2  Core(s) per socket:\u00a0 12  Socket(s): \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 2  NUMA node(s):\u00a0 \u00a0 \u00a0 \u00a0 2  CPU family:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 6  Model: \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 63  Model name:\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz  and SATA SSD storage and 128GB of RAM", "posttime": "2020-07-28 14:17:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u67b6\u6784,columnstore,\u67e5\u8be2", "title": "\u661f\u578b\u67b6\u6784\u57fa\u51c6\u4e2d\u7684ClickHouse\u548cColumnStore", "title_en": "ClickHouse and ColumnStore in the Star Schema Benchmark", "transed": 1, "url": "https://www.percona.com/blog/2020/07/27/clickhouse-and-columnstore-in-the-star-schema-benchmark/", "via": "", "real_tags": ["\u67b6\u6784", "\u67e5\u8be2"]}, {"category": "", "categoryclass": "", "imagename": "a5afe0fd253c9fa20dde54fd0951fde0.jpeg", "infoid": 1014608, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u6211\u8bad\u7ec3\u7ecf\u7eaa\u4eba\u626e\u6f14\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u7684Python\u6e90\u4ee3\u7801\u3002\u5229\u7528\u672c\u6587\u63d0\u51fa\u7684\u6700\u8fd1\u7b56\u7565\u4f18\u5316\u7b97\u6cd5(PPO)\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7b56\u7565\u4f18\u5316\u7b97\u6cd5--PPO(Proximal Policy Optimization)\u7b97\u6cd5\u3002\n\u8c08\u5230\u6027\u80fd\uff0c\u6211\u7684PPO\u57f9\u8bad\u7684\u4ee3\u7406\u53ef\u4ee5\u5b8c\u621029/32\u7ea7\uff0c\u8fd9\u6bd4\u6211\u4e00\u5f00\u59cb\u9884\u671f\u7684\u8981\u597d\u5f97\u591a\u3002\n\u8bf7\u6ce8\u610f\uff0cPPO\u662fOpenAI\u63d0\u51fa\u7684\u7528\u4e8e\u8bad\u7ec3OpenAI Five\u7684\u7b97\u6cd5\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728ESPORTS\u6e38\u620f\u4e2d\u51fb\u8d25\u4e16\u754c\u51a0\u519b\u7684AI\u3002\u5177\u4f53\u5730\u8bf4\uff0c2018\u5e748\u6708\uff0cOpenAI\u4e94\u4eba\u7ec4\u6d3e\u51fa\u4e86\u4e00\u652f\u7531\u6cd5\u5e08\u548c\u524d\u804c\u4e1a\u7403\u5458\u7ec4\u6210\u7684\u56e2\u961f\uff0c\u4ed6\u4eec\u7684MMR\u6392\u540d\u5728DOTA 2\u7403\u5458\u7684\u7b2c99.95\u4e2a\u767e\u5206\u4f4d\u6570\u4e2d\u3002\n\u6211\u5df2\u7ecf\u6709\u4e00\u6bb5\u65f6\u95f4\u6ca1\u6709\u53d1\u5e03\u6211\u7684A3C\u5b9e\u73b0(A3C\u4ee3\u7801)\u6765\u8bad\u7ec3\u7ecf\u7eaa\u4eba\u73a9\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u4e86\u3002\u5c3d\u7ba1\u8bad\u7ec3\u6709\u7d20\u7684\u4ee3\u7406\u53ef\u4ee5\u76f8\u5f53\u5feb\u5730\u3001\u76f8\u5f53\u597d\u5730\u5b8c\u6210\u5173\u5361(\u81f3\u5c11\u6bd4\u6211\u73a9\ud83d\ude05\u66f4\u5feb\u3001\u66f4\u597d)\uff0c\u4f46\u5b83\u4ecd\u7136\u4e0d\u80fd\u5b8c\u5168\u8ba9\u6211\u6ee1\u610f\u3002\u4e3b\u8981\u539f\u56e0\u662f\uff0cA3C\u57f9\u8bad\u7684\u4ee3\u7406\u53ea\u80fd\u5b8c\u62109/32\u7ea7\uff0c\u65e0\u8bba\u6211\u600e\u4e48\u5fae\u8c03\u548c\u6d4b\u8bd5\u3002\u5b83\u6fc0\u52b1\u6211\u5bfb\u627e\u4e00\u79cd\u65b0\u7684\u65b9\u6cd5\u3002\n\u5728\u6211\u51b3\u5b9a\u9009\u62e9PPO\u4f5c\u4e3a\u6211\u7684\u4e0b\u4e00\u4e2a\u5b8c\u6574\u5b9e\u73b0\u4e4b\u524d\uff0c\u6211\u5df2\u7ecf\u90e8\u5206\u5b9e\u73b0\u4e86\u5176\u4ed6\u51e0\u4e2a\u7b97\u6cd5\uff0c\u5305\u62ecA2C\u548cRainbow\u3002\u867d\u7136\u524d\u8005\u5728\u6027\u80fd\u4e0a\u6ca1\u6709\u8868\u73b0\u51fa\u5f88\u5927\u7684\u8dc3\u5347\uff0c\u4f46\u540e\u8005\u66f4\u9002\u5408\u4e8e\u66f4\u968f\u673a\u7684\u73af\u5883/\u6e38\u620f\uff0c\u6bd4\u5982\u4e52\u4e53\u7403\u6216\u592a\u7a7a\u5165\u4fb5\u8005\u3002\n\u901a\u8fc7\u8fd0\u884cpython train.py\u6765\u8bad\u7ec3\u60a8\u7684\u6a21\u578b\u3002\u4f8b\u5982\uff1aPython Training.py--world 5--\u9636\u6bb52--lr 1e-4\u3002\n\u901a\u8fc7\u8fd0\u884cpython test.py\u6d4b\u8bd5\u60a8\u8bad\u7ec3\u8fc7\u7684\u6a21\u578b\u3002\u4f8b\u5982\uff1aPython test.py--world 5--\u9636\u6bb52\u3002\n\u6ce8\u610f\uff1a\u5982\u679c\u4f60\u5728\u4efb\u4f55\u7ea7\u522b\u90fd\u88ab\u5361\u4f4f\u4e86\uff0c\u8bd5\u7740\u7528\u4e0d\u540c\u7684\u5b66\u4e60\u901f\u5ea6\u518d\u8bad\u7ec3\u4e00\u6b21\u3002\u4f60\u53ef\u4ee5\u50cf\u6211\u4e00\u6837\u653b\u514b29/32\u7ea7\uff0c\u53ea\u9700\u6539\u53d8\u5b66\u4e60\u901f\u5ea6\u3002\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u5c06\u5b66\u4e60\u901f\u7387\u8bbe\u7f6e\u4e3a1e-3\u30011e-4\u62161e-5\u3002\u4f46\u662f\uff0c\u4e5f\u6709\u4e00\u4e9b\u96be\u5ea6\u5f88\u5927\u7684\u7ea7\u522b\uff0c\u5305\u62ec1-3\u7ea7\uff0c\u572870\u6b21\u5931\u8d25\u4e4b\u540e\uff0c\u6211\u7ec8\u4e8e\u4ee57E-5\u7684\u5b66\u4e60\u7387\u8bad\u7ec3\u6210\u529f\u4e86\u3002\n\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u63d0\u4f9b\u4e86\u53ef\u7528\u4e8e\u8dd1\u6b65\u8bad\u7ec3\u548c\u6d4b\u8bd5\u9636\u6bb5\u7684Dockerfile\u3002\n\u5047\u8bbe\u7801\u5934\u6620\u50cf\u7684\u540d\u79f0\u662fPPO\u3002\u60a8\u53ea\u60f3\u4f7f\u7528\u7b2c\u4e00\u4e2aGPU\u3002\u60a8\u5df2\u7ecf\u5c06\u6b64\u5b58\u50a8\u5e93\u548cCD\u514b\u9686\u5230\u5176\u4e2d\u3002\n\u7136\u540e\u5728docker\u5bb9\u5668\u4e2d\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u8fd0\u884c\u5982\u4e0a\u6240\u8ff0\u7684Train.py\u6216test.py\u811a\u672c\u3002\n\u6ce8\u610f\uff1a\u4f7f\u7528docker\u65f6\u5b58\u5728\u6e32\u67d3\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5f53\u60a8\u4f7f\u7528docker\u8fdb\u884c\u8bad\u7ec3\u6216\u6d4b\u8bd5\u65f6\uff0c\u8bf7\u5728\u811a\u672csrc/process.py\u4e0a\u6ce8\u91caenv.ender()\u884c\u4ee5\u8fdb\u884c\u57f9\u8bad\uff0c\u6216\u6ce8\u91catest.py\u884c\u4ee5\u8fdb\u884c\u6d4b\u8bd5\u3002\u7136\u540e\uff0c\u60a8\u5c06\u65e0\u6cd5\u518d\u770b\u5230\u7528\u4e8e\u53ef\u89c6\u5316\u7684\u5f39\u51fa\u7a97\u53e3\u3002\u4f46\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\uff0c\u56e0\u4e3a\u57f9\u8bad\u8fc7\u7a0b\u4ecd\u5c06\u8fd0\u884c\uff0c\u800c\u6d4b\u8bd5\u8fc7\u7a0b\u6700\u7ec8\u5c06\u8f93\u51faMP4\u6587\u4ef6\u4ee5\u8fdb\u884c\u53ef\u89c6\u5316\u3002\n\u5728\u4e16\u754c4-4\u30017-4\u548c8-4\u4e2d\uff0c\u5730\u56fe\u7531\u8c1c\u9898\u7ec4\u6210\uff0c\u73a9\u5bb6\u5fc5\u987b\u9009\u62e9\u6b63\u786e\u7684\u8def\u5f84\u624d\u80fd\u524d\u8fdb\u3002\u5982\u679c\u4f60\u9009\u62e9\u4e86\u4e00\u6761\u9519\u8bef\u7684\u8def\uff0c\u4f60\u5fc5\u987b\u518d\u8d70\u4e00\u904d\u4f60\u53bb\u8fc7\u7684\u8def\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u7684\u7ecf\u7eaa\u4eba\u76ee\u524d\u4e0d\u80fd\u5b8c\u6210\u8fd93\u4e2a\u7ea7\u522b\u7684\u539f\u56e0\u3002", "note_en": "Here is my python source code for training an agent to play super mario bros. By using Proximal Policy Optimization (PPO) algorithm introduced in the paper  Proximal Policy Optimization Algorithms  paper.\n Talking about performance, my PPO-trained agent could complete 29/32 levels, which is much better than what I expected at the beginning.\n For your information, PPO is the algorithm proposed by OpenAI and used for training OpenAI Five, which is the first AI to beat the world champions in an esports game. Specifically, The OpenAI Five dispatched a team of casters and ex-pros with MMR rankings in the 99.95th percentile of Dota 2 players in August 2018.\n   It has been a while since I have released my A3C implementation ( A3C code) for training an agent to play super mario bros. Although the trained agent could complete levels quite fast and quite well (at least faster and better than I played  \ud83d\ude05), it still did not totally satisfy me. The main reason is, agent trained with A3C could only complete 9/32 levels, no matter how much I fine-tuned and tested. It motivated me to look for a new approach.\n Before I decided to choose PPO as my next complete implementation, I had partially implemented a couple of other algorithms, including A2C and Rainbow. While the former did not show a big jump in performance, the latter is more suitable for more randomized environments/games, like ping-pong or space invaders.\n   Train your model by running  python train.py. For example:  python train.py --world 5 --stage 2 --lr 1e-4\n Test your trained model by running  python test.py. For example:  python test.py --world 5 --stage 2\n Note: If you got stuck at any level, try training again with different  learning rates. You could conquer 29/32 levels like what I did, by changing only  learning rate. Normally I set  learning rate as  1e-3,  1e-4 or  1e-5. However, there are some difficult levels, including level  1-3, in which I finally trained successfully with  learning rate of  7e-5 after failed for 70 times.\n  For being convenient, I provide Dockerfile which could be used for running training as well as test phases\n Assume that docker image&#39;s name is ppo. You only want to use the first gpu. You already clone this repository and cd into it.\n     Then inside docker container, you could simply run  train.py or  test.py scripts as mentioned above.\n Note: There is a bug for rendering when using docker. Therefore, when you train or test by using docker, please comment line  env.render() on script  src/process.py for training or  test.py for test. Then, you will not be able to see the window pop up for visualization anymore. But it is not a big problem, since the training process will still run, and the test process will end up with an output mp4 file for visualization\n  In world 4-4, 7-4 and 8-4, map consists of puzzles where the player must choose the correct the path in order to move forward. If you choose a wrong path, you have to go through path you visited again. That&#39;s why my agent at the moment can not complete these 3 levels", "posttime": "2020-07-28 13:48:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9a6c\u91cc\u5965,policy,\u8bad\u7ec3", "title": "\u73a9\u201c\u8d85\u7ea7\u9a6c\u91cc\u5965\u5144\u5f1f\u201d\u7684\u6700\u8fd1\u7b56\u7565\u4f18\u5316", "title_en": "Proximal Policy Optimization for Playing Super Mario Bros", "transed": 1, "url": "https://github.com/uvipen/Super-mario-bros-PPO-pytorch", "via": "", "real_tags": ["\u9a6c\u91cc\u5965", "policy", "\u8bad\u7ec3"]}, {"category": "", "categoryclass": "", "imagename": "5b367ad8a7ff4ffc532e6e895d163057.png", "infoid": 1014607, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd1\u4e09\u5341\u5e74\u524d\u6211\u51fa\u751f\u7684\u90a3\u5929\uff0c\u6211\u7238\u7238\u5f97\u5230\u4e86\u4ed6\u7684\u7b2c\u4e00\u53f0\u6444\u50cf\u673a\u3002\u201c\u8ddf\u955c\u5934\u6253\u4e2a\u62db\u547c\uff01\u201d\u8fd9\u662f\u4ed6\u5f55\u4e0b\u7684\u7b2c\u4e00\u4e2a\u8bcd\uff0c\u5f53\u65f6\u4ed6\u6307\u7740\u533b\u9662\u6447\u7bee\u91cc\u7684\u4e00\u4e2a\u7ea2\u80bf\u7684\u5a74\u513f(\u6211)\u8bf4\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u526a\u8f91\u53d8\u5f97\u66f4\u52a0\u5c34\u5c2c\uff0c\u56e0\u4e3a\u4ed6\u7ee7\u7eed\u62cd\u6444\u8bb8\u591a\u6362\u5c3f\u5e03\uff0c\u53d1\u813e\u6c14\uff0c\u4ee5\u53ca-\u6700\u7cdf\u7cd5\u7684\u662f-\u9752\u6625\u671f\u3002\n\u8fd9\u4e9b\u6f5c\u5728\u7684\u52d2\u7d22\u4ee4\u724c\u5927\u591a\u88ab\u56f0\u5728MiniDV\u78c1\u5e26\u4e0a\uff0c\u6216\u8005\u6563\u843d\u5728SD\u5361\u4e0a\uff0c\u76f4\u5230\u4e24\u5e74\u524d\uff0c\u6211\u7236\u4eb2\u628a\u5b83\u4eec\u90fd\u4e0a\u4f20\u5230\u4e86Google Drive\u4e0a\u3002\u4ece\u7406\u8bba\u4e0a\u8bb2\uff0c\u56e0\u4e3a\u5b83\u4eec\u73b0\u5728\u5b58\u50a8\u5728\u4e91\u4e2d\uff0c\u6211\u548c\u6211\u7684\u5bb6\u4eba\u53ef\u4ee5\u968f\u65f6\u89c2\u770b\u5b83\u4eec\u3002\u4f46\u7531\u4e8e\u6709\u8d85\u8fc7456\u4e2a\u5c0f\u65f6\u7684\u955c\u5934\uff0c\u89c2\u770b\u8fd9\u4e00\u5207\u5c06\u662f\u4e00\u9879\u8270\u5de8\u7684\u52aa\u529b\u3002\u4f60\u53ea\u80fd\u770b\u7740\u5bb6\u91cc\u7684\u8001\u670b\u53cb\u62c6\u5723\u8bde\u793c\u7269\u90a3\u4e48\u591a\u6b21\u3002\u56e0\u6b64\uff0c\u4f5c\u4e3a\u4e00\u540d\u5e94\u7528\u4eba\u5de5\u667a\u80fd\u5de5\u7a0b\u5e08\uff0c\u6211\u5f00\u59cb\u7740\u624b\u505a\u751f\u610f\uff0c\u5e76\u5efa\u7acb\u4e86\u4e00\u4e2a\u7531\u4eba\u5de5\u667a\u80fd\u652f\u6301\u7684\u5bb6\u5ead\u89c6\u9891\u53ef\u641c\u7d22\u6863\u6848\u3002\n\u5982\u679c\u4f60\u66fe\u7ecf\u4f7f\u7528\u8fc7\u8c37\u6b4c\u7167\u7247\uff0c\u4f60\u5df2\u7ecf\u770b\u5230\u4e86\u4f7f\u7528\u4eba\u5de5\u667a\u80fd\u641c\u7d22\u548c\u7ec4\u7ec7\u56fe\u50cf\u548c\u89c6\u9891\u7684\u529b\u91cf\u3002\u8fd9\u6b3e\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6765\u8bc6\u522b\u4eba\u548c\u5ba0\u7269\uff0c\u4ee5\u53ca\u56fe\u50cf\u4e2d\u7684\u5bf9\u8c61\u548c\u6587\u672c\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6211\u5728\u8c37\u6b4c\u7167\u7247\u5e94\u7528\u7a0b\u5e8f\u4e2d\u641c\u7d22\u201c\u6cf3\u6c60\u201d\uff0c\u5b83\u4f1a\u663e\u793a\u6211\u62cd\u6444\u7684\u6240\u6709\u6cf3\u6c60\u7167\u7247\u548c\u89c6\u9891\u3002\n\u4f46\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u9879\u76ee\uff0c\u6211\u9700\u8981\u4e00\u4e9b\u7167\u7247\u6ca1\u6709\u7684\u529f\u80fd(\u76ee\u524d\u8fd8\u6ca1\u6709\uff01)\u3002\u652f\u6301\u3002\u9996\u5148\uff0c\u7531\u4e8e\u6211\u7236\u4eb2\u7684\u7b2c\u4e00\u53f0\u6444\u50cf\u673a\u5c06\u955c\u5934\u5f55\u5236\u5230\u4e86MiniDV\u78c1\u5e26\u4e0a\uff0c\u8fd9\u4e9b\u89c6\u9891\u88ab\u4e0a\u4f20\u4e3a\u4e24\u4e2a\u5c0f\u65f6\u957f\u7684\u8089\u7247\uff0c\u6ca1\u6709\u6709\u7528\u7684\u5143\u6570\u636e\u3002\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\uff0c\u6211\u7238\u7238\u4f1a\u5728\u4e00\u6bb5\u89c6\u9891\u7684\u5f00\u5934\u8bf4\uff0c\u201c\u8ba9\u6211\u628a\u65e5\u671f\u653e\u5728\u5c4f\u5e55\u4e0a\u2026\u2026\u201d\u6846\u67b6\u7684\u53f3\u4e0b\u89d2\u4f1a\u51fa\u73b0\u4e00\u4e2a\u5c0f\u7684\u767d\u8272\u6587\u672c\u7247\u6bb5\u3002\u5728\u4e00\u4e2a\u955c\u5934\u7684\u95f4\u9699\uff0c\u4ed6\u4f1a\u8bf4\uff1a\u201c\u8bf4\u518d\u89c1\uff0c\u6211\u73b0\u5728\u8981\u6de1\u51fa\u4e86\u3002\u201d\u5f53\u5c4f\u5e55\u892a\u8272\u6210\u9ed1\u8272\u65f6\uff0c\u6211\u4f1a\u5c16\u53eb\uff0c\u201c\u4e0d\uff0c\u4e0d\u8981\u6de1\u51fa\u3002\u201d\u56e0\u6b64\uff0c\u6211\u7684\u7b2c\u4e00\u6b65\u662f\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6765\u81ea\u52a8\u89e3\u6790\u5c4f\u5e55\u4e0a\u663e\u793a\u7684\u65e5\u671f\uff0c\u5e76\u5728\u6bcf\u4e2a\u6de1\u51fa\u540e\u5c06\u5355\u4e2a\u957f\u89c6\u9891\u5206\u5272\u6210\u8f83\u77ed\u7684\u526a\u8f91\u3002", "note_en": "My dad got his first video camera the day I was born nearly three decades ago. \u201cSay hello to the camera!\u201d are the first words he caught on tape, as he pointed it at a red, puffy baby (me) in a hospital bassinet. The clips got more embarrassing from there, as he continued to film through many diaper changes, temper tantrums and\u2014worst of all\u2014puberty.\n Most of those potential blackmail tokens sat trapped on miniDV tapes or scattered across SD cards until two years ago when my dad uploaded them all to Google Drive. Theoretically, since they were now stored in the cloud, my family and I could watch them whenever we wanted. But with more than 456 hours of footage, watching it all would have been a herculean effort. You can only watch old family friends open Christmas gifts so many times. So, as an Applied AI Engineer, I got down to business and built an AI-powered searchable archive of our family videos.\n If you\u2019ve ever used Google Photos, you\u2019ve seen the power of using AI to search and organize images and videos. The app uses machine learning to identify people and pets, as well as objects and text in images. So, if I search \u201cpool\u201d in the Google Photos app, it\u2019ll show me all the pictures and videos I ever took of pools.\n But for this project, I needed a couple of features Photos doesn\u2019t (yet!) support. First, because my dad\u2019s first camera recorded footage to miniDV tapes, those videos were uploaded as meaty, two-hour-long movies with no useful metadata. Instead, my dad would start a clip by saying, \u201clet me put a date on the screen here...\u201d and a little white text snippet would appear in the bottom right corner of the frame. In between shots on a single reel, he\u2019d say: \u201cSay goodbye, I\u2019m going to fade out now.\u201d I would scream, \u201cNO, DON\u2019T FADE OUT,\u201d while the screen faded to black. So, my first step was to use machine learning to automatically parse the date shown on the screen, and split the single long video into shorter clips after each fade out.", "posttime": "2020-07-28 13:47:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4eba\u5de5\u667a\u80fd,family,\u89c6\u9891", "title": "\u4eba\u5de5\u667a\u80fd\u5b58\u6863\u4e2d\u768430\u5e74\u5bb6\u5ead\u89c6\u9891", "title_en": "30 years of family videos in an AI archive", "transed": 1, "url": "https://blog.google/products/photos/30-years-family-videos-ai-archive/", "via": "", "real_tags": ["\u4eba\u5de5\u667a\u80fd", "family", "\u89c6\u9891"]}, {"category": "", "categoryclass": "", "imagename": "2385e756ad6cfe09eda2e986fa0e50ef.jpg", "infoid": 1014606, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5e74\uff0c\u5927\u7ea6\u6709230\u4e07\u7f8e\u56fd\u79df\u623f\u8005\u5bb6\u5ead\u5728\u67d0\u4e2a\u65f6\u5019\u6536\u5230\u9a71\u9010\u6587\u4ef6\u3002\u5728\u65b0\u51a0\u80ba\u708e\u5927\u6d41\u884c\u671f\u95f4\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u770b\u5230\u4e00\u4e2a\u6708\u5185\u6709\u5f88\u591a\u4eba\u88ab\u9a71\u9010\u3002\n\u5168\u7403\u54a8\u8be2\u516c\u53f8Stout\u5728\u5168\u56fd\u516c\u6c11\u6cd5\u5f8b\u6743\u5229\u8054\u76df(NCCRC)\u7684\u6295\u5165\u4e0b\uff0c\u5229\u7528\u4eba\u53e3\u666e\u67e5\u8c03\u67e5\u7ed3\u679c\u548c\u6536\u5165\u6570\u636e\u5f00\u53d1\u4e86\u4e00\u79cd\u65b0\u7684\u9a71\u9010\u4f30\u8ba1\u5de5\u5177\uff0c\u4f30\u8ba1\u968f\u7740\u6682\u505c\u4ee4\u7ed3\u675f\u3001\u6cd5\u9662\u91cd\u65b0\u5f00\u5ead\u548c\u79df\u91d1\u51cf\u514d\u52aa\u529b\u7684\u4e0d\u8db3\uff0c\u53ef\u80fd\u6709\u591a\u5c11\u5bb6\u5ead\u9762\u4e34\u9a71\u9010\u7684\u98ce\u9669\u3002\u6839\u636e\u8be5\u5de5\u5177\uff0c\u8d85\u8fc71600\u4e07\u6237\u79df\u6237\u9762\u4e34\u88ab\u9a71\u9010\u7684\u98ce\u9669\uff0c\u672a\u6765\u56db\u4e2a\u6708\u53ef\u80fd\u4f1a\u54111100\u591a\u4e07\u6237\u5bb6\u5ead\u9001\u8fbe\u9a71\u9010\u6587\u4ef6\u3002\n\u81ea4\u6708\u4efd\u4ee5\u6765\uff0c\u6bcf\u5468\u4e00\u6b21\u7684\u4eba\u53e3\u666e\u67e5\u4e00\u76f4\u5728\u8be2\u95ee\u7f8e\u56fd\u4eba\u662f\u5426\u6309\u65f6\u652f\u4ed8\u4e0a\u4e2a\u6708\u7684\u79df\u91d1\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5bf9\u4e0b\u4e2a\u6708\u652f\u4ed8\u80fd\u529b\u7684\u4fe1\u5fc3\u6709\u591a\u5927\uff0c\u4ee5\u53ca\u65e8\u5728\u8bc4\u4f30\u5c31\u4e1a\u72b6\u51b5\u3001\u98df\u54c1\u5b89\u5168\u548c\u65b0\u51a0\u80ba\u708e\u75ab\u60c5\u5176\u4ed6\u5f71\u54cd\u7684\u95ee\u9898\u3002Stout\u9a71\u9010\u4f30\u8ba1\u5de5\u5177\u5c06\u8fd9\u4e00\u70b9\u4e0e\u6709\u5173\u7f8e\u56fd\u4eba\u6309\u6536\u5165\u6c34\u5e73\u8ba1\u7b97\u79df\u91d1\u8d1f\u62c5\u60c5\u51b5\u7684\u6570\u636e\u7ed3\u5408\u5728\u4e00\u8d77\u3002\nNccrc\u534f\u8c03\u5458john pollock\u2028\u8868\u793a\uff0c\u968f\u7740\u623f\u79df\u8d1f\u62c5\u7684\u52a0\u91cd\uff0c\u4e00\u4e9b\u4eba\u5bf9\u81ea\u5df1\u6709\u80fd\u529b\u652f\u4ed8\u623f\u79df\u7684\u56de\u7b54\uff0c\u5b9e\u9645\u4e0a\u66f4\u6709\u53ef\u80fd\u8f6c\u5316\u4e3a\u9a71\u9010\u6216\u66f4\u591a\u7684\u79df\u91d1\u4e0d\u7a33\u5b9a\u3002nccrc\u81f4\u529b\u4e8e\u63a8\u8fdb\u4e3a\u4f4f\u623f\u7b49\u57fa\u672c\u4eba\u7c7b\u9700\u6c42\u63d0\u4f9b\u54a8\u8be2\u670d\u52a1\u7684\u6743\u5229\uff0c\u4ed6\u8bf4\uff0c\u968f\u7740\u623f\u79df\u8d1f\u62c5\u7684\u52a0\u91cd\uff0c\u4e00\u4e9b\u4eba\u5bf9\u81ea\u5df1\u6709\u80fd\u529b\u652f\u4ed8\u623f\u79df\u7684\u56de\u7b54\u5b9e\u9645\u4e0a\u4f1a\u8f6c\u5316\u4e3a\u9a71\u9010\u6216\u66f4\u591a\u7684\u79df\u91d1\u4e0d\u7a33\u5b9a\u3002\u5728\u7f8e\u56fd\u5927\u90e8\u5206\u5730\u533a\uff0c\u4f4f\u623f\u6cd5\u5ead\u6ca1\u6709\u6cd5\u5f8b\u987e\u95ee\u7684\u6743\u5229\uff1b\u5e73\u5747\u800c\u8a00\uff0c90%\u7684\u623f\u4e1c\u5728\u6cd5\u5ead\u4e0a\u6709\u5f8b\u5e08\u4ee3\u8868\uff0c\u4f46\u53ea\u670910%\u6216\u66f4\u5c11\u7684\u623f\u5ba2\u6709\u5f8b\u5e08\u51fa\u5ead\uff0c\u6ce2\u6d1b\u514b\u8bf4\uff0c\u8fd9\u51b3\u5b9a\u4e86\u623f\u5ba2\u8d62\u5f97\u9a71\u9010\u6848\u4ef6\u7684\u53ef\u80fd\u6027\u6709\u591a\u5927\u3002\n\u8be5\u5de5\u5177\u5c06\u6bcf\u5468\u66f4\u65b0\u4eba\u53e3\u666e\u67e5\u6570\u636e\uff0c\u9488\u5bf9\u7684\u662f\u653f\u7b56\u5236\u5b9a\u8005\u3002\u7528\u6237\u53ef\u4ee5\u67e5\u770b\u5404\u5dde\u6216\u5168\u56fd\u7684\u4f30\u8ba1\u9a71\u9010\u6570\u636e\uff0c\u4ee5\u53ca\u53ef\u80fd\u7a33\u5b9a\u8fd9\u4e9b\u5bb6\u5ead\u6240\u9700\u7684\u79df\u91d1\u51cf\u514d\u91d1\u989d-\u76ee\u524d\uff0c\u5168\u56fd\u4f30\u8ba1\u79df\u91d1\u7f3a\u53e3\u603b\u8ba1220\u4ebf\u7f8e\u5143\u3002\n\u4f60\u8fd8\u53ef\u4ee5\u6309\u79cd\u65cf\u8fc7\u6ee4\u8c03\u67e5\u7ed3\u679c\uff0c\u8fd9\u4f1a\u663e\u793a\u51fa\u660e\u663e\u7684\u5dee\u5f02\u3002\u201c\u767d\u4eba\u79df\u6237\u5bf9\u79df\u623f\u8005\u7684\u4fe1\u5fc3\u4e0e\u9ed1\u4eba\u548c\u62c9\u4e01\u88d4\u79df\u6237\u4e4b\u95f4\u7684\u5dee\u522b\u4e0d\u5c0f\u3002\u5b83\u662f\u5de8\u5927\u7684\uff0c\u201c\u6ce2\u6d1b\u514b\u8bf4\u3002\u57287\u670822\u65e5\u7684\u8c03\u67e5\u4e2d\uff0c\u7ea647%\u7684\u9ed1\u4eba\u548c\u62c9\u4e01\u88d4\u79df\u6237\u8868\u793a\uff0c\u4ed6\u4eec\u51e0\u4e4e\u6ca1\u6709\u4fe1\u5fc3\u652f\u4ed8\u4e0b\u4e2a\u6708\u7684\u79df\u91d1\uff1b\u767d\u4eba\u79df\u6237\u7684\u8fd9\u4e00\u6bd4\u4f8b\u7ea6\u4e3a20%\u3002\u201c\u4f60\u4eec\u5df2\u7ecf\u67d3\u4e0a\u4e86\u4e00\u79cd\u6b63\u5728\u6467\u6bc1\u9ed1\u4eba\u793e\u533a\u7684\u75be\u75c5\u3002\u3002\u3002\u56e0\u6b64\uff0c\u5f53\u4f60\u770b\u5230\u8fd9\u4e9b\u6570\u5b57\u5728\u4e0a\u9762\uff0c\u4f60\u628a\u8fd9\u4e0e\u6211\u4eec\u5386\u53f2\u4e0a\u77e5\u9053\u7684\u9ed1\u4eba\u79df\u6237\u5728\u4f4f\u623f\u6cd5\u5ead\u4e0a\u4e0d\u6210\u6bd4\u4f8b\u7684\u60c5\u51b5\u4e00\u81f4\uff0c\u8fd9\u662f\u6211\u4eec\u5e0c\u671b\u56fd\u4f1a\u770b\u5230\u7684\u7d27\u8feb\u6027\u7684\u53e6\u4e00\u4e2a\u65b9\u9762\uff0c\u201c\u4ed6\u8bf4\u3002\n\u51e0\u5468\u6765\uff0c\u4e13\u5bb6\u4eec\u4e00\u76f4\u5728\u9884\u6d4b\u4e00\u573a\u201c\u96ea\u5d29\u201d\u5f0f\u7684\u9a71\u9010\uff0c\u8fd9\u4e2a\u5de5\u5177\u547c\u5e94\u4e86\u5373\u5c06\u5230\u6765\u7684\u707e\u96be(\u963f\u65af\u5f6d\u7814\u7a76\u6240(Aspen Institute)\u9884\u6d4b\uff0c\u67092000\u4e07\u79df\u6237\u9762\u4e34\u88ab\u9a71\u9010\u7684\u98ce\u9669\uff1b\u8fd9\u4e2a\u5de5\u5177\u53ea\u5173\u6ce8\u79df\u623f\u8005\u5bb6\u5ead\uff0c\u56e0\u4e3a\u4eba\u53e3\u666e\u67e5\u662f\u4ee5\u5bb6\u5ead\u4e3a\u57fa\u7840\u7684\uff0c\u5b83\u4e0d\u4f1a\u8bd5\u56fe\u4f30\u8ba1\u6bcf\u6237\u6709\u591a\u5c11\u4eba)\u3002\u6ce2\u6d1b\u514b\u8bf4\uff0c\u867d\u7136\u8fd9\u4e2a\u5de5\u5177\u6ca1\u6709\u7ed9\u51fa\u9010\u6708\u9a71\u9010\u7684\u786e\u5207\u4f30\u8ba1\uff0c\u4f46\u5206\u6790\u5e08\u4eec\u7c97\u7565\u9884\u6d4b8\u6708\u548c9\u6708\u5404\u6709\u8d85\u8fc7200\u4e07\u6b21\u9a71\u9010\u3002\u201c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ed6\u4eec\u662f\u5728\u8bf4\uff0c\u4e00\u4e2a\u6708\u5185\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u770b\u5230\u6bd4\u6211\u4eec(\u901a\u5e38)\u5728\u4e00\u6574\u5e74\u4e2d\u770b\u5230\u7684\u66f4\u591a\u7684\u9a71\u9010\u4e8b\u4ef6\uff0c\u201d\u4ed6\u8bf4\u3002\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u623f\u4e1c\u96c6\u4f53\u9a71\u9010\u662f\u6709\u610f\u4e49\u7684\uff0c\u6ce2\u6d1b\u514b\u8bf4\uff0c\u5766\u7387\u5730\u8bf4\uff0c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u4ed6\u56de\u5fc6\u8d77\u4e00\u7bc7\u6587\u7ae0\uff0c\u6307\u51fa\u6211\u4eec\u9700\u8981\u8054\u90a6\u653f\u5e9c\u6682\u505c\u9a71\u9010\uff0c\u4ee5\u201c\u62ef\u6551\u623f\u4e1c\u201d\u3002\u5982\u679c\u623f\u4e1c\u9a71\u9010\u6240\u6709\u79df\u5ba2\uff0c\u4ed6\u4eec\u5c06\u5f88\u96be\u627e\u5230\u66ff\u4ee3\u8005\uff0c\u56e0\u4e3a\u79df\u8d41\u5e02\u573a\u975e\u5e38\u4e0d\u7a33\u5b9a\u3002\u7a7a\u7f6e\u7684\u5efa\u7b51\u4f1a\u635f\u5bb3\u623f\u4ea7\u4ef7\u503c\uff0c\u5e76\u610f\u5473\u7740\u7a0e\u6536\u51cf\u5c11\u3002\u201c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u8fd9\u4e5f\u4f24\u5bb3\u4e86\u623f\u4e1c\uff0c\u201d\u4ed6\u8bf4\u3002\u201c\u4ed6\u4eec\u4e0d\u5e94\u8be5\u8fd9\u6837\u505a\uff0c\u4f46\u623f\u4e1c\u5e76\u4e0d\u603b\u662f\u505a\u751a\u81f3\u7b26\u5408\u81ea\u5df1\u7ecf\u6d4e\u5229\u76ca\u7684\u4e8b\u60c5\uff0c\u773c\u5149\u6700\u957f\u8fdc.\u201d\n\u4e00\u4e9b\u623f\u4e1c\u53ef\u80fd\u5f88\u6709\u8fdc\u89c1\uff0c\u4e0d\u4f1a\u9a71\u9010\u4ed6\u4eec\u7684\u79df\u6237\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u9a71\u9010\u7684\u786e\u5207\u6570\u5b57\u5982\u6b64\u96be\u4ee5\u9884\u6d4b(\u5c3d\u7ba1\u5728\u4e00\u4e9b\u5730\u65b9\uff0c\u9a71\u9010\u5df2\u7ecf\u5728\u53d1\u751f)\u3002\u56fd\u4f1a\u4e5f\u5728\u7814\u7a76\u53e6\u4e00\u9879\u523a\u6fc0\u65b9\u6848\uff0c\u5c3d\u7ba1\u5c1a\u4e0d\u6e05\u695a\u5b83\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u4f18\u5148\u8003\u8651\u4f4f\u623f\u95ee\u9898\u3002\u5373\u4f7f\u6709\u4e86\u8fd9\u6837\u7684\u63f4\u52a9\uff0cNCCRC\u4ecd\u547c\u5401\u4e09\u4ef6\u4e8b\u6765\u89e3\u51b3\u8fd9\u573a\u5371\u673a\uff1a\u8054\u90a6\u6682\u505c\u7acb\u5373\u505c\u6b62\u6240\u6709\u9a71\u9010\u884c\u4e3a\uff1b\u79df\u91d1\u51cf\u514d\uff0c\u8fd9\u6837\u5f53\u9a71\u9010\u884c\u4e3a\u518d\u6b21\u5f00\u59cb\u65f6\uff0c\u8fd9\u4e2a\u95ee\u9898\u5c31\u4e0d\u4f1a\u7ee7\u7eed\u5b58\u5728\uff1b\u4ee5\u53ca\u4e3a\u79df\u6237\u4ee3\u8868\u63d0\u4f9b\u8d44\u91d1\uff0c\u4ee5\u5e2e\u52a9\u90a3\u4e9b\u5df2\u7ecf\u5f00\u59cb\u9a71\u9010\u7a0b\u5e8f\u6216\u53ef\u80fd\u6ca1\u6709\u8d44\u683c\u83b7\u5f97\u6551\u6d4e\u7684\u4eba\u3002", "note_en": "Every year, about  2.3 million American renter households receive eviction papers at some point. During the COVID-19 pandemic, we might see that many evictions in one month.\n   Global advisory firm Stout, with input from the National Coalition for a Civil Right to Counsel (NCCRC), used census survey results and income data to develop a new  eviction estimation tool that estimates how many households could be at risk of eviction as moratoriums end, courts reopen, and rent relief efforts fall short. More than 16 million renter households are at risk of eviction, according to the tool, and more than 11 million households could be served with eviction papers over the next four months.\n Since April,  weekly census surveys have been asking Americans if they paid their last month\u2019s rent on time and how confident they are that they\u2019ll be able to pay next month, along with  questions meant to assess employment status, food security, and other impacts of the COVID-19 pandemic. The Stout eviction estimation tool combines that with data about how rent-burdened Americans are by income level.\n With a heavier rent burden, there\u2019s a greater chance that someone\u2019s answer of having \u201cmoderate confidence\u201d or \u201cno confidence\u201d that they can pay rent will actually translate to an eviction or more rent instability, says John Pollock\u2028, coordinator of NCCRC, which works to advance the right to counsel for basic human needs such as housing. In most of the U.S., there\u2019s  no right to counsel for housing court; on average, 90% of landlords are represented in court, but only 10% or less of tenants are, which Pollock says skews how likely tenants are to win eviction cases.\n The tool, which will be updated with census survey data each week, is aimed at policy makers. Users can look at state-by-state or national data on estimated evictions, along with the amount of rent relief needed to possibly stabilize these households\u2014currently, the national estimated rent shortfall totals $22 billion.\n You can also filter survey results by ethnicity, which reveals a stark disparity. \u201cThis isn\u2019t a small difference between renter confidence for white tenants versus Black and Latinx tenants. It\u2019s massive,\u201d Pollock says. In the July 22 survey, about 47% of both Black and Latinx tenants said they have little to no confidence they can pay next month\u2019s rent; for white tenants, it was about 20%. \u201cYou already have a disease that is decimating Black communities . . . and so when you see these numbers on top of that and you put that in line with what we know historically about how Black tenants have been disproportionately in housing court, it\u2019s another aspect of the urgency that we want Congress to see,\u201d he says.\n Experts have been predicting an \u201cavalanche\u201d of evictions for weeks, and this tool echoes that coming catastrophe (the Aspen Institute predicted that 20 million renters were at risk of eviction; this tool looks at renter households only, since the census is based on households, and it does not try to estimate how many people are in each household). Though this tool doesn\u2019t give exact month-to-month eviction estimates, Pollock says the analysts roughly predict more than 2 million evictions each in August and September. \u201cIn other words, they\u2019re saying that in one month, we may see more evictions than we [usually] see in an entire year,\u201d he says.\n  As for why it makes sense for landlords to evict en masse, Pollock says, frankly, that it doesn\u2019t. He recalls an article that noted how we need a federal eviction moratorium to \u201c save landlords from themselves.\u201d If landlords evict all their tenants, they will have a hard time finding replacements because of how unstable the rental market is. Empty buildings harm property values and mean less tax revenue. \u201cIt hurts landlords in the long run, too,\u201d he says. \u201cThey shouldn\u2019t do this, but landlords don\u2019t always do what is even in their own economic interests, with the longest foresight.\u201d\n Some landlords might have the foresight to not evict their tenants, which is why an exact number of evictions is so hard to predict (though in some places, evictions  are already happening). Congress is also working on another stimulus package, though it\u2019s not clear how much it prioritizes housing. Even with that aid, NCCRC is calling for three things to address this crisis: a federal moratorium to stop all evictions immediately, rent relief so the problem doesn\u2019t persist when evictions start up again, and funding for tenant representation, to help those for which eviction proceedings have already begun or who might not qualify for relief.", "posttime": "2020-07-28 13:47:11", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53ef\u80fd,evicted,\u9a71\u9010", "title": "\u5728\u63a5\u4e0b\u6765\u7684\u56db\u4e2a\u6708\u91cc\uff0c1100\u4e07\u6237\u5bb6\u5ead\u53ef\u80fd\u4f1a\u88ab\u9a71\u9010\u51fa\u53bb\u3002", "title_en": "11M households could be evicted over the next four months", "transed": 1, "url": "https://www.fastcompany.com/90532305/11-million-households-could-be-evicted-over-the-next-four-months", "via": "", "real_tags": ["\u53ef\u80fd", "evicted", "\u9a71\u9010"]}, {"category": "", "categoryclass": "", "imagename": "2819ed6204ae19936d79fa7a7fad8f17.png", "infoid": 1014604, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5168\u5957\u5de5\u7a0b\u5e08(\u5458\u5de5/\u8d1f\u8d23\u4eba)", "note_en": "Full Stack Engineer (Staff / Principal)", "posttime": "2020-07-28 13:46:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "build,\u5458\u5de5", "title": "BuildZoom(\u66f4\u597d\u7684\u5b9a\u5236\u623f\u5c4b\u5efa\u9020\u65b9\u5f0f)\u6b63\u5728\u65af\u79d1\u8328\u4ee3\u5c14\u62db\u8058", "title_en": "BuildZoom (better way to build custom homes) is hiring in Scottsdale", "transed": 1, "url": "https://jobs.lever.co/buildzoom", "via": "", "real_tags": ["build", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "116e6aead6e4d3f7f279dd8fe0b724c3.png", "infoid": 1014603, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u751f\u6d3b\u5728\u592a\u9633\u56fe\u7247\u7684\u9ec4\u91d1\u65f6\u4ee3\u3002\u867d\u7136\u6211\u4eec\u7684\u6052\u661f\u5e76\u4e0d\u662f\u7279\u522b\u5bb9\u6613\u6216\u5b89\u5168\u5730\u6210\u50cf\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u4ee4\u4eba\u773c\u82b1\u7f2d\u4e71\u7684\u6838\u805a\u53d8\u7403\u4f53\uff0c\u4f46\u79d1\u5b66\u5bb6\u4eec\u4ecd\u7136\u8bbe\u6cd5\u62cd\u6444\u4e86\u6709\u53f2\u4ee5\u6765\u6700\u63a5\u8fd1\u5b83\u7684\u7167\u7247\uff0c\u4ee5\u53ca\u6700\u8be6\u7ec6\u7684\u592a\u9633\u8868\u9762\u7167\u7247\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\u62cd\u6444\u7684\u3002\n\u8fd9\u4e9b\u65b0\u4efb\u52a1\u662f\u7ee7\u592a\u9633\u548c\u65e5\u7403\u5c42\u5929\u6587\u53f0(SOHO)\u7b49\u7ecf\u9a8c\u4e30\u5bcc\u7684\u767e\u53f6\u866b\u6210\u529f\u4e4b\u540e\u8fdb\u884c\u7684\uff0cSOHO\u662f\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40(NASA)\u548c\u6b27\u6d32\u822a\u5929\u5c40(ESA)\u5171\u540c\u5f00\u53d1\u7684\u822a\u5929\u5668\uff0c\u81ea1995\u5e74\u53d1\u5c04\u4ee5\u6765\u4e00\u76f4\u5728\u62cd\u6444\u4ee4\u4eba\u60ca\u53f9\u7684\u592a\u9633\u56fe\u50cf\u3002\n\u7136\u800c\uff0c\u5982\u679c\u4f60\u672c\u5468\u641c\u7d22SOHO\u7684\u6700\u65b0\u592a\u9633\u7167\u7247\uff0c\u4f60\u53ef\u80fd\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u5c0f\u62a5\u62a5\u9053\u8bf4\uff0c\u822a\u5929\u5668\u73b0\u5728\u62cd\u6444\u4e86\u4e00\u5f20\u6bd4\u5730\u7403\u5927\u5341\u500d\u7684\u5916\u661f\u7acb\u65b9\u4f53\u98de\u8239\u7684\u7167\u7247\u3002\nSOHO\u9879\u76ee\u79d1\u5b66\u5bb6\u548c\u4efb\u52a1\u7ecf\u7406\u4f2f\u6069\u54c8\u5fb7\u00b7\u5f17\u83b1\u514b(Bernhard Fleck)\u5bf9\u8fd9\u79cd\u5173\u4e8e\u592a\u9633\u7cfb\u4e2d\u7c7b\u4f3c\u535a\u683c\u4eba\u7684\u4e0d\u660e\u98de\u884c\u7269\u7684\u75af\u72c2\u731c\u6d4b\u505a\u51fa\u4e86\u7b80\u5355\u7684\u56de\u5e94\u3002\n\u201c\u8fd9\u5f53\u7136\u662f\u5f7b\u5934\u5f7b\u5c3e\u7684\u80e1\u8bf4\u516b\u9053\uff0c\u201d\u5f17\u83b1\u514b\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u8bf4\u3002\u201c\u9ed1\u8272\u65b9\u5757\u662f\u7531\u4e8e\u4e22\u5931(\u635f\u574f)\u7684\u9065\u6d4b\u5757\u9020\u6210\u7684\u3002\u201d\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u56fe\u50cf\u4e2d\u5947\u602a\u7684\u9ed1\u6697\u7acb\u65b9\u4f53\u4e0d\u662f\u4e00\u4e2a\u7269\u4f53\uff0c\u66f4\u4e0d\u7528\u8bf4\u4e00\u8258\u5de8\u5927\u7684\u5916\u661f\u4eba\u5b87\u5b99\u98de\u8239\u4e86\u3002\u5b83\u662f\u7531SOHO\u548c\u5730\u7403\u4e4b\u95f4\u7684\u4f20\u8f93\u9519\u8bef\u9020\u6210\u7684\u56fe\u50cf\u4eba\u5de5\u5236\u54c1-\u7167\u7247\u672c\u8eab\u7684\u4e00\u4e2a\u5c0f\u6545\u969c\u3002\nSOHO\u4f4d\u4e8e\u4e00\u4e2a\u8ddd\u79bb\u5730\u7403\u7ea6\u4e00\u767e\u4e07\u82f1\u91cc\u7684\u5149\u6655\u8f68\u9053\u4e0a\uff0c\u5b83\u901a\u8fc7\u8fd9\u4e2a\u8ddd\u79bb\u53d1\u9001\u7ed9\u6211\u4eec\u7684\u56fe\u50cf\u6709\u65f6\u4f1a\u6cc4\u6f0f\u51e0\u4e2a\u50cf\u7d20\uff0c\u8fd9\u662f\u53ef\u4ee5\u7406\u89e3\u7684\u3002\u5f53\u822a\u5929\u5668\u91cd\u65b0\u53d1\u9001\u6570\u636e\u65f6\uff0c\u8fd9\u4e9b\u7f3a\u53e3\u901a\u5e38\u4f1a\u88ab\u586b\u8865\u3002\nFleck\u89e3\u91ca\u8bf4\uff1a\u201c\u6211\u4eec\u7684\u6d41\u6c34\u7ebf\u5904\u7406\u786e\u5b9e\u586b\u5145\u4e86\u5927\u591a\u6570\u4e22\u5931\u7684\u5757\uff0c\u4f46\u8fd9\u5e76\u4e0d\u603b\u662f\u6709\u6548\u7684\uff0c\u800c\u4e14\u5e76\u4e0d\u662f\u6240\u6709\u4e22\u5931\u7684\u5757\u90fd\u88ab\u6b63\u786e\u586b\u5145\u3002\u201d\u201c\u6700\u7ec8\u76840\u7ea7\u79d1\u5b66\u6570\u636e\u4e0d\u53d7\u6b64\u5f71\u54cd\u3002\u201d\nNASA\u5728\u4e00\u4e2a\u7ecf\u5e38\u66f4\u65b0\u7684\u753b\u5eca\u4e2d\u4e0e\u516c\u4f17\u5206\u4eab\u201c\u6700\u65b0\u7684\u201dSOHO\u56fe\u50cf\u3002\u8fd9\u4e9b\u7167\u7247\u662f\u521a\u4ece\u592a\u7a7a\u4f20\u6765\u7684\u5149\u6ce2\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7f8e\u56fd\u5b87\u822a\u5c40\u5728\u753b\u5eca\u7f51\u7ad9\u4e0a\u8b66\u544a\u8bf4\uff0c\u8fd9\u4e9b\u6570\u636e\u201c\u53ea\u662f\u4e3a\u4e86\u89c6\u89c9\u68c0\u67e5\uff0c\u800c\u4e0d\u662f\u5206\u6790\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u79d1\u5b66\u8d28\u91cf\u201d\u3002\n\u4e22\u5931\u7684\u533a\u5757\u5728\u65b0\u7684SOHO\u56fe\u50cf\u4e2d\u5f88\u5e38\u89c1\uff0c\u5305\u62ec\u6700\u8fd1\u62cd\u6444\u4e8e7\u670815\u65e5\u7684\u90a3\u5f20\uff0c\u91cd\u65b0\u70b9\u71c3\u4e86\u4e00\u4e9bUFO\u4fe1\u5f92\u7684\u60f3\u8c61\u529b\u3002\n\u5f17\u83b1\u514b\u8bf4\uff1a\u201c\u6211\u53ef\u4ee5\u7ed9\u4f60\u53d1\u51e0\u5341\u5f20\uff0c\u5982\u679c\u4e0d\u662f\u51e0\u767e\u5f20\u7c7b\u4f3c\u7684\u56fe\u7247(\u8fd8\u6709\u66f4\u5927\u7684\u2018\u4e0d\u660e\u98de\u884c\u7269\u2019)\u3002\u201d\n\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u7f3a\u5931\u7684\u533a\u5757\u662f32x32\u50cf\u7d20\u7684\u500d\u6570\uff0c\u8fd9\u662f\u9065\u6d4b\u533a\u5757\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u201d\u56e0\u6b64\uff0c\u5373\u4f7f\u53ea\u6709\u4e00\u4e2a\u5b57\u8282\u635f\u574f\uff0c\u6574\u4e2a32x32\u6570\u636e\u5757\u4e5f\u4f1a\u88ab\u5c4f\u853d\u3002\n\u7a7a\u767d\u50cf\u7d20\u5e76\u4e0d\u662fSOHO\u552f\u4e00\u5438\u5f15\u5916\u661f\u730e\u4eba\u6ce8\u610f\u7684\u6210\u50cf\u6587\u7269\u30022003\u5e74\uff0c\u7f8e\u56fd\u56fd\u5bb6\u822a\u7a7a\u822a\u5929\u5c40\u53d1\u5e03\u4e86\u4e00\u4efd\u540d\u4e3a\u201c\u5982\u4f55\u5236\u4f5c\u81ea\u5df1\u7684\u98de\u789f\u201d\u7684\u89e3\u8bf4\u4e66\uff0c\u6982\u8ff0\u4e86\u4e3a\u4ec0\u4e48SOHO\u62cd\u6444\u7684\u5b8c\u5168\u81ea\u7136\u73b0\u8c61\u7684\u56fe\u50cf\u6700\u7ec8\u5177\u6709\u7c7b\u4f3c\u98de\u789f\u7684\u7279\u5f81\uff0c\u6216\u8005\u53ef\u4ee5\u589e\u5f3a\u4e3a\u770b\u8d77\u6765\u50cf\u5916\u661f\u822a\u5929\u5668\u3002\n\u7f8e\u56fd\u5b87\u822a\u5c40\u57282003\u5e74\u7684\u6587\u7ae0\u4e2d\u8bf4\uff1a\u201c\u81ea\u4ece\u53d1\u5c04\u4ee5\u6765\uff0c\u5df2\u7ecf\u6709\u5f88\u591a\u4eba\u58f0\u79f0\u5728SOHO\u7684\u56fe\u50cf\u4e2d\u770b\u5230\u8fc7\u98de\u789f\u548c\u5176\u4ed6\u795e\u79d8\u7684\u7269\u4f53\u3002\u201d\u57282003\u5e74\u7684\u4e00\u7bc7\u6587\u7ae0\u4e2d\uff0cNASA\u8bf4\uff1a\u201c\u81ea\u4ece\u53d1\u5c04\u4ee5\u6765\uff0c\u5df2\u7ecf\u6709\u5f88\u591a\u4eba\u58f0\u79f0\u5728SOHO\u7684\u56fe\u50cf\u4e2d\u770b\u5230\u8fc7\u98de\u789f\u548c\u5176\u4ed6\u795e\u79d8\u7684\u7269\u4f53\u3002\u201d\u201c\u867d\u7136\u5176\u4e2d\u4e00\u4e9b\u5047\u60f3\u7684\u4e0d\u660e\u98de\u884c\u7269\u7167\u7247\u770b\u8d77\u6765\u76f8\u5f53\u8010\u4eba\u5bfb\u5473\uff0c\u4f46\u5f53\u7ecf\u9a8c\u4e30\u5bcc\u7684SOHO\u79d1\u5b66\u5bb6\u7814\u7a76\u5b83\u4eec\u65f6\uff0c\u5b83\u4eec\u603b\u662f\u6709\u4e00\u4e2a\u76f8\u5f53\u666e\u901a\u7684\u539f\u56e0\u3002\u201d\n\u540c\u6837\uff0c\u5f17\u83b1\u514b\u8bf4\uff0c\u4ed6\u4e0d\u786e\u5b9a\u201c\u6211\u4eec\u7a7f\u7740\u9521\u7eb8\u7684\u9634\u8c0b\u8bba\u8005\u4f1a\u4e0d\u4f1a\u76f8\u4fe1\u201d\u884c\u4eba\u9065\u6d4b\u7684\u5dee\u8ddd\uff0c\u56e0\u4e3a\u76f8\u4fe1\u5916\u661f\u7acb\u4f53\u6d3e\u6b63\u5728\u56db\u5904\u6e38\u8361\u662f\u4e00\u4ef6\u975e\u5e38\u6709\u8da3\u7684\u4e8b\u60c5\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u6240\u6709\u9635\u8425\u90fd\u80fd\u5728\u4e00\u4ef6\u4e8b\u4e0a\u8fbe\u6210\u4e00\u81f4\uff1aSOHO\u56fe\u50cf\u4ee4\u4eba\u60ca\u53f9\uff0c\u770b\u770b\u4efb\u52a1\u7684\u56fe\u7247\u5e93\u662f\u975e\u5e38\u503c\u5f97\u4f60\u82b1\u65f6\u95f4\u7684\u3002\n\u7b7e\u7f72\u201c\u8272\u60c5\u901a\u8baf\u201d\uff0c\u5373\u8868\u793a\u60a8\u540c\u610f\u63a5\u6536\u6765\u81ea\u201c\u8272\u60c5\u901a\u8baf\u201d\u7684\u7535\u5b50\u901a\u8baf\uff0c\u5176\u4e2d\u6709\u65f6\u53ef\u80fd\u5305\u62ec\u5e7f\u544a\u6216\u8d5e\u52a9\u5185\u5bb9\u3002", "note_en": "We are living in a golden age of Sun pictures. While our star is not particularly easy or safe to image, given that it is a blindingly bright ball of nuclear fusion, scientists have still managed to snap the  closest pictures ever taken of it, as well as the  most detailed shots of the solar surface, all within the past year.\n  These new missions follow on the success of veteran shutterbugs such as the Solar and Heliospheric Observatory (SOHO), a spacecraft developed by NASA and the European Space Agency (ESA) that has been taking breathtaking images of the Sun since its launch in 1995.\n   If you were to search for SOHO\u2019s latest Sun pictures this week, however, you might be surprised to find tabloid reports that the spacecraft has now taken a picture of an ALIEN CUBE SHIP that is TEN TIMES bigger than Earth.\n   Bernhard Fleck, SOHO project scientist and mission manager, has a simple response to this wild speculation of Borg-like UFOs in our solar system.\n  \u201cThis is of course complete and utter nonsense,\u201d Fleck said in an email. \u201cThe black square is due to a missing (corrupted) telemetry block.\u201d\n  In other words, the weird dark cube in the image is not an object, let alone a massive alien spaceship. It\u2019s an image artifact\u2014a glitch in the picture itself\u2014caused by transmission errors between SOHO and Earth.\n  SOHO is located in a halo orbit about a million miles from Earth, and the images it sends to us across that distance understandably leak a few pixels from time to time. Those gaps are normally plugged when the spacecraft resends its data.\n  \u201cMost missing blocks are indeed filled by our pipeline processing, but this doesn&#39;t always work, and not all missing blocks are filled correctly,\u201d Fleck explained. \u201cThe final level-0 science data are not affected by this.\u201d\n  NASA shares  the \u201cvery latest\u201d SOHO images with the public in a frequently updated gallery. These images are arriving fresh off of light waves from space, which is why NASA warns that the data is \u201cintended just for visual inspection, not analysis as it is not of science quality\u201d on the gallery website.\n   The missing blocks are common in new SOHO images, including the recent one,  taken on July 15, that reignited the imagination of some UFO believers.\n  \u201cI can send you tens, if not hundreds of similar images (with even bigger \u2018UFOs\u2019),\u201d Fleck said.\n  \u201cMissing blocks are multiples of 32x32 pixels, which is the smallest unit of a telemetry block,\u201d he added. \u201cSo even if only one byte was corrupted, a whole 32x32 block is blacked out.\u201d\n  The blank pixels are not the only imaging artifact from SOHO that has attracted the attention of alien hunters. In 2003, NASA posted  an explainer called \u201cHow to Make Your Own UFO\u201d that outlined why SOHO images of completely natural phenomena end up with features that resemble flying saucers, or can be enhanced to look like alien spacecraft.\n  \u201cEver since launch, there&#39;s been a number of people who&#39;ve claimed to have seen flying saucers and other esoteric objects in SOHO images,\u201d NASA said in the 2003 article. \u201cAlthough some of these supposed pictures of UFOs can seem quite intriguing, they have always turned out to have a quite ordinary cause when examined by experienced SOHO scientists.\u201d\n  Likewise, Fleck said he is not sure that \u201cour tin-foil wearing conspiracy theorists will be convinced\u201d by pedestrian telemetry gaps when it is so much fun to believe that extraterrestrial cubists are on the prowl.\n  Fortunately, all camps can agree on one thing: SOHO imagery is awesome, and checking out the  mission\u2019s photo galleries is well-worth your time.\n  By signing up to the VICE newsletter you agree to receive electronic communications from VICE that may sometimes include advertisements or sponsored content.", "posttime": "2020-07-28 13:46:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nasa,\u9ed1\u8272,black,soho", "title": "\u5728\u8fd9\u5f20NASA\u7684\u65b0\u56fe\u50cf\u4e2d\uff0c\u592a\u9633\u4e0a\u5947\u602a\u7684\u9ed1\u8272\u7acb\u65b9\u4f53\u662f\u4ec0\u4e48\uff1f", "title_en": "What Is the Weird Black Cube on the Sun in This New NASA Image?", "transed": 1, "url": "https://www.vice.com/en_us/article/wxq45w/what-is-the-weird-black-cube-on-the-sun-in-this-new-nasa-image", "via": "", "real_tags": ["nasa", "\u9ed1\u8272", "black", "soho"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1014602, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2014\u5e7411\u67089\u65e5\uff0c\u5404\u79cd\u57fa\u672c\u6d6e\u70b9\u6570\u5b66\u8fd0\u7b97\u7684\u8ba1\u7b97\u6210\u672c\u6709\u591a\u9ad8\uff1f\u8fd9\u91cc\u6709\u4e00\u4e2a\u5feb\u901f\u800c\u80ae\u810f\u7684\u57fa\u51c6\uff0c\u867d\u7136\u80af\u5b9a\u76f8\u5f53\u5929\u771f\uff0c\u4f46\u4f3c\u4e4e\u6355\u6349\u5230\u4e86\u4e00\u4e9b\u8fd0\u7b97\u7684\u7c97\u7565\u548c\u76f8\u5bf9\u6210\u672c\u3002\n\u8fd9\u4e2a\u5b63\u5ea6\u6211\u8981\u4e0a\u4e00\u95e8\u5173\u4e8e\u6570\u503c\u7ebf\u6027\u4ee3\u6570\u7684\u8bfe\u7a0b\u3002\u5f53\u7136\uff0c\u6211\u4eec\u6db5\u76d6\u4e86\u6d6e\u70b9\u7b97\u672f\u57fa\u7840\u3001\u6570\u503c\u7a33\u5b9a\u6027\u3001\u77e9\u9635\u5206\u89e3\u548c\u7b97\u6cd5\u5206\u6790\u7b49\u4e3b\u9898\u3002\n\u5728\u6211\u4eec\u7684\u4e00\u4e9b\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u7684\u4efb\u52a1\u662f\u786e\u5b9a\u6267\u884c\u67d0\u4e9b\u7279\u5b9a\u7b97\u6cd5\u6240\u9700\u7684\u6d6e\u70b9\u64cd\u4f5c(FLOP)\u7684\u786e\u5207\u6570\u91cf\u3002\u5206\u6790\u7b97\u6cd5\u7684\u590d\u6742\u6027\u5f53\u7136\u662f\u4e00\u9879\u6709\u7528\u7684\u7ec3\u4e60\uff0c\u4f46\u662f\u7ed9\u4eba\u7559\u4e0b\u8fd9\u6837\u7684\u5370\u8c61\u662f\u611a\u8822\u7684\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u4ea7\u751f\u51c6\u786e\u7684\u5931\u8d25\u8ba1\u6570\u3002\u6211\u4e0d\u662f\u4e00\u4e2a\u5f88\u559c\u6b22\u786c\u4ef6\u7684\u4eba\uff0c\u4f46\u6211\u81f3\u5c11\u77e5\u9053\u73b0\u4ee3\u7684CPU\u975e\u5e38\u590d\u6742\uff0c\u6211\u4eec\u5728\u68c0\u67e5\u4f2a\u4ee3\u7801\u540e\u53ef\u4ee5\u5199\u5728\u7eb8\u4e0a\u7684\u4efb\u4f55\u5931\u8d25\u8ba1\u6570\u90fd\u6ca1\u6709\u673a\u4f1a\u4ee5\u4efb\u4f55\u6709\u610f\u4e49\u7684\u65b9\u5f0f\u201c\u51c6\u786e\u201d\u3002\n\u9664\u4e86\u8fd9\u4e9b\u7ec3\u4e60\u7684\u6574\u4f53\u5f92\u52b3\u65e0\u76ca\u5916\uff0c\u6211\u4eec\u8fd8\u5949\u547d\u5c06\u4ee5\u4e0b\u6bcf\u4e00\u79cd\u8fd0\u7b97\u90fd\u89c6\u4e3a\u4e00\u4e2a\u201c1\u7ffb\u8f6c\u201d\u7684\u57fa\u51c6\uff1a\u52a0\u6cd5\u3001\u51cf\u6cd5\u3001\u4e58\u6cd5\u3001\u9664\u6cd5\u3001\u5e73\u65b9\u6839\u3002\u201c\u6b63\u5982\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u7684\u90a3\u6837\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u5728\u73b0\u5b9e\u4e16\u754c\u7684\u8ba1\u7b97\u8d39\u7528\u65b9\u9762\u751a\u81f3\u6ca1\u6709\u63a5\u8fd1\u76f8\u7b49\uff0c\u6240\u4ee5\u628a\u8fd9\u4e9b\u90fd\u7b97\u4f5c\u76f8\u7b49\u7684\u8ba1\u7b97\u539f\u5b50\u662f\u6709\u8bef\u5bfc\u6027\u7684\u3002\n\u4e0d\u7ba1\u600e\u6837\uff0c\u2026\u3002\u5728\u6700\u8fd1\u7684\u4e00\u6b21\u4efb\u52a1\u4e2d\uff0c\u6211\u4eec\u88ab\u8981\u6c42\u67e5\u770b\u4f7f\u7528\u65cb\u8f6c\u77e9\u9635\u7684\u4e00\u4e9b\u6280\u672f\u7684\u7ffb\u8f6c\u8ba1\u6570\u3002\u6b63\u5982\u60a8\u53ef\u80fd\u5bf9\u65cb\u8f6cy\u5143\u7d20\u6240\u671f\u671b\u7684\u90a3\u6837\uff0c\u77e9\u9635\u6761\u76ee\u57fa\u4e8e\u5404\u79cd\u4e09\u89d2\u51fd\u6570(\u6b63\u5f26\u3001\u4f59\u5f26\u3001\u53cd\u6b63\u5f26)\u3002\u201c\u6211\u5728\u505a\u4f5c\u4e1a\u7684\u65f6\u5019\u5f88\u5306\u5fd9\uff0c\u6240\u4ee5\u6211\u968f\u968f\u4fbf\u4fbf\u5730\u7ed9\u8fd9\u4e9bTRIG\u51fd\u6570\u6bcf\u4e2a\u5206\u914d\u4e861\u4e2aFLUP\u3002\u6211\u89c9\u5f97\u8fd9\u6837\u505a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u662f\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u6211\u521a\u521a\u4e86\u89e3\u5230\uff0c\u5728\u73b0\u4ee3Intelx86\u4e2d\uff0c\u8fd9\u4e9bTRIG\u51fd\u6570\u5b9e\u9645\u4e0a\u662f\u4f5c\u4e3a\u5355CPU\u6307\u4ee4\u63d0\u4f9b\u7684\u3002\u8003\u8651\u5230\u6211\u4eec\u5df2\u7ecf\u7c89\u9970\u4e86\u8fd9\u4e48\u591a\uff0c\u5c06\u7406\u8bba\u4e0a\u53ef\u4ee5\u5728\u4e00\u6761CPU\u6307\u4ee4\u4e2d\u5b8c\u6210\u7684\u4efb\u4f55\u4e8b\u60c5\u89c6\u4e3a\u539f\u5b50\u4f3c\u4e4e\u662f\u60c5\u6709\u53ef\u539f\u7684\u3002\u4e0d\u7ba1\u600e\u6837\uff0c\u6211\u88ab\u6263\u5206\u4e86\u3002\u54fc\u3002\n\u597d\u5427\uff0c\u597d\u5427\uff0c\u6211\u4e0d\u662f\u5f88\u62c5\u5fc3\u5206\u6570\uff0c\u4f46\u73b0\u5728\u6211\u5f88\u597d\u5947\u8fd9\u4e9b\u624b\u672f\u5230\u5e95\u6709\u591a\u8d35\u3002\u5982\u679c\u201c\u5e73\u65b9\u6839\u201d\u662f1\u4e2a\u7ffb\u8f6c\uff0c\u90a3\u4e48\u628a\u201c\u6b63\u5f26\u201d\u4e5f\u5f52\u4e3a1\u4e2a\u7ffb\u8f6c\u771f\u7684\u662f\u9519\u7684\u5417\uff1f\n\u6211\u6e05\u7406\u4e86\u5927\u8111\u7684C++\u533a\u57df\uff0c\u7f16\u5199\u4e86\u4ee5\u4e0b\u6d4b\u8bd5\u7a0b\u5e8f\u3002\u5728\u8fd9\u91cc\u5927\u91cf\u4f7f\u7528\u5b8f\u5f88\u6709\u8da3\u3002\n#include&lt\uff1bmath.h&gt\uff1b#include&lt\uff1bchrono&gt\uff1b\u4f7f\u7528\u547d\u540d\u7a7a\u95f4std\uff1a\uff1achrono\uff1b//\u4ece//https://gist.github.com/gongzhitaao/7062087class\u590d\u5236\u7684\u8ba1\u65f6\u5668{PUBLIC\uff1aTIMER()\uff1aBEG_(CLOCK_\uff1a\uff1aNOW()){}VALID RESET(){BEG_=CLOCK_\uff1a\uff1aNOW()\uff1b}Double Lapsed()const{Return Duration_Cast&lt\uff1bSecond_&gt\uff1b(CLOCK_\uff1a\uff1aNOW()\u3002}PRIVATE\uff1atyfinf HIGH_RESOLUTION_CLOCK CLOCK_\uff1btyfinf Duration&lt\uff1bDouble\uff0cRatio&lt\uff1b1&gt\uff1b&gt\uff1bSecond_\uff1btime_point&lt\uff1block_&gt\uff1bbeg_\uff1b}\uff1bint main(char*argv){Double Total\uff1bTimer tmr\uff1b#Define randf()((Double)Rand())/((Double)(RAND_Max))#\u5b9a\u4e49OP_TEST(name\uff0cexpr)\\total=0.0\uff1b\\for(int i=0\uff1bi&lt\uff1b100000000\uff1bi++){\\Double R1=Randf()\uff1b\\Double R2=Randf()\uff1b\\Total+=expr\uff1b\\}\\Double Name=tmr.elapsed()\uff1b\\printf(#name)\uff1b\\printf(&#34\uff1b%.7f\\n&#34\uff1b\uff0cname-Baseline)\uff1b//\u8ba1\u65f6\u57fa\u7ebf\u4ee3\u7801\uff1a//for\u5faa\u73af\uff0c\u6ca1\u6709\u989d\u5916\u7684\u6570\u5b66OP_TEST(Baseline\uff0c1.0)/\u3002//\u51cf\u53bb\u57fa\u7ebf\u65f6\u95f4\uff0c\u5f97\u5230//\u66f4\u597d\u7684\u6210\u672c\u8fd1\u4f3c\u503c//\u5bf9\u4e8e\u6307\u5b9a\u7684\u64cd\u4f5cop_test(\u52a0\uff0cR1+R2)op_test(\u51cf\uff0cR1-R2)op_test(mult\uff0cR1*R2)op_test(div\uff0cR1/R2)op_test(sqrt\uff0csqrt(R1))op_test(sin\uff0csin(R1))op_test(cos\uff0ccos(R1))op_test(tan\uff0ctan(R1))op_test\n\u7f16\u8bd1\u8fd9\u4e2a\u672a\u7ecf\u4f18\u5316\u7684\u57fa\u51c6\u6d4b\u8bd5(\u8fd9\u6837\u5c31\u4e0d\u4f1a\u64e6\u9664\u6216\u91cd\u65b0\u6392\u5217\u4efb\u4f55\u5185\u5bb9)\uff0c\u5e76\u5728\u6211\u7684Intel Corei7\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6211\u4f1a\u5f97\u5230\u4ee5\u4e0b\u7ed3\u679c\u3002\u6211\u5df2\u7ecf\u6b63\u5e38\u5316\u4e86\uff0c\u6240\u4ee5\u7ed3\u679c\u662f\u76f8\u5bf9\u4e8e\u201c\u52a0\u201d\u7684\u6210\u672c\u7684\u3002\n\u56e0\u6b64\uff0c\u5728\u201c1\u7ffb\u8f6c\u201d\u8fd0\u7b97\u4e2d\uff0c\u9664\u6cd5\u548c\u5e73\u65b9\u6839\u7684\u6210\u672c\u5b9e\u9645\u4e0a\u5206\u522b\u662f\u52a0\u6cd5\u57fa\u7ebf\u76844\u500d\u548c6\u500d\u5de6\u53f3\u3002Trig\u51fd\u6570\u4f3c\u4e4e\u843d\u572815x-20x\u8303\u56f4\u5185\u7684\u67d0\u4e2a\u5730\u65b9\uff0c\u800cexp\u5927\u7ea6\u662f10x\u3002\n\u6240\u4ee5\uff0c\u662f\u7684\uff0c\u89e6\u53d1\u5668\u51fd\u6570\u786e\u5b9e\u6bd4+-*\u221a\u6602\u8d35\u5f97\u591a(\u5c3d\u7ba1\u5c06sqrt\u548c\u9664\u6cd5\u7b97\u4f5c1\u6b21FLUP\u4f3c\u4e4e\u4ecd\u7136\u6709\u70b9\u6b66\u65ad)\u3002", "note_en": "Nov 9, 2014    How computationally expensive are various fundamental floating point mathematical operations? \u00a0Here\u2019s a quick and dirty benchmark, which, although surely quite naive, seems to capture the rough\u00a0relative cost of a few operations.\n  This quarter I am taking a course on\u00a0numerical linear algebra. \u00a0Naturally, we are covering topics like the fundamentals of floating point arithmetic, numerical stability, matrix decompositions, and algorithm analysis.\n In a few of our assignments, we are\u00a0tasked with determining the  exact number of floating point operations (FLOPs) required to execute some particular algorithm. Analyzing the complexity of algorithms is certainly a useful exercise, but it\u2019s silly to give the impression that we can produce the  exact FLOP count. \u00a0I\u2019m not much of a hardware guy, but I at least know that modern CPUs are stupendously complex, and any FLOP count we can write down on paper after inspecting pseudocode has no chance at being \u201cexact\u201d in any meaningful way.\n Besides the overall futility of these exercises, we are instructed to\u00a0consider each of the following operations as a\u00a0baseline of \u201c1 FLOP\u201d: addition, subtraction, multiplication, division, square root. \u00a0As we will see shortly, these operations are not even close to equivalent in terms of real-world computational expense, so it\u2019s misleading to count these all as\u00a0equal atoms\u00a0of computation.\n Anyways\u2026 on one recent assignment we were asked to look at the FLOP count for some technique that used a rotation matrix. \u00a0As you might expect for rotation-y stuff, the matrix entries were based on various trigonometric functions (sine, cosine, arctan). \u00a0I was in a rush when doing the assignment, so I casually assigned 1 FLOP to each of these trig functions. \u00a0I felt partially justified in doing this, as I had  just learned that these trig functions are in fact offered as single CPU instructions in modern Intel x86. \u00a0Given that we were glossing over so much already, it seemed excusable\u00a0to consider as atomic anything that can theoretically be done in a single CPU instruction. Regardless, I was\u00a0docked points. Hmph.\n OK fine, I\u2019m not\u00a0worried about the points, but now I\u2019m\u00a0curious about how expensive these operations really are. \u00a0If \u201csquare root\u201d qualifies as 1 FLOP, is it really so wrong to lump in \u201csine\u201d as 1 FLOP, too?\n  I dusted off the C++ region of my brain, and hacked up the following test program. It was fun to (ab)use macros heavily here.\n #include &lt;math.h&gt;#include &lt;chrono&gt;using namespace std;using namespace std::chrono;// timer cribbed from// https://gist.github.com/gongzhitaao/7062087class Timer{public: Timer() : beg_(clock_::now()) {} void reset() { beg_ = clock_::now(); } double elapsed() const { return duration_cast&lt;second_&gt; (clock_::now() - beg_).count(); }private: typedef high_resolution_clock clock_; typedef duration&lt;double, ratio&lt;1&gt;&gt; second_; time_point&lt;clock_&gt; beg_;};int main(char* argv){ double total; Timer tmr;#define randf() ((double) rand()) / ((double) (RAND_MAX))#define OP_TEST(name, expr) \\ total = 0.0; \\ srand(42); \\ tmr.reset(); \\ for (int i = 0; i &lt; 100000000; i++) { \\ double r1 = randf(); \\ double r2 = randf(); \\ total += expr; \\ } \\ double name = tmr.elapsed(); \\ printf(#name); \\ printf(&#34; %.7f\\n&#34;, name - baseline); // time the baseline code: // for loop with no extra math op OP_TEST(baseline, 1.0) // time various floating point operations. // subtracts off the baseline time to give // a better approximation of the cost // for just the specified operation OP_TEST(plus, r1 + r2) OP_TEST(minus, r1 - r2) OP_TEST(mult, r1 * r2) OP_TEST(div, r1 / r2) OP_TEST(sqrt, sqrt(r1)) OP_TEST(sin, sin(r1)) OP_TEST(cos, cos(r1)) OP_TEST(tan, tan(r1)) OP_TEST(atan, atan(r1)) OP_TEST(exp, exp(r1))}\n  Compiling this benchmark non-optimized (so that nothing gets erased or rearranged) and running on my Intel Core i7 machine, I get the following results. \u00a0I\u2019ve normalized so results are relative to the cost of \u201cplus.\u201d\n  So\u00a0of the \u201c1 FLOP\u201d operations, it turns out\u00a0division and square root are really about 4x and 6x as expensive, respectively, as the baseline of addition.\u00a0Trig functions appear to land somewhere in the 15x-20x range, and exp about 10x.\n So yes, trig functions\u00a0really are significantly more expensive than +-*\u221a (though it still seems a bit arbitrary to count sqrt\u00a0and division as 1 FLOP).", "posttime": "2020-07-28 13:45:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u5b66,benchmark,r1", "title": "\u5404\u79cd\u6570\u5b66\u8fd0\u7b97\u7684\u7b80\u5355\u57fa\u51c6", "title_en": "A simple benchmark of various math operations", "transed": 1, "url": "https://latkin.org/blog/2014/11/09/a-simple-benchmark-of-various-math-operations/", "via": "", "real_tags": ["\u6570\u5b66", "benchmark", "r1"]}]