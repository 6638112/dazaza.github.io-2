[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1066541, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2006\u5e741\u670824\u65e5\u7531John Mashey\u9875\u6570\uff1a1 2 3 4 5\u7f16\u8f91\u6ce8\u610f\u4e8b\u9879\uff1a\u8fd9\u4e00\u7cfb\u5217\u6587\u7ae0\u9996\u6b21\u51fa\u73b0\u5728Comp.Arch\u65b0\u95fb\u7ec4\u7684\u6700\u540e\u4e00\u7cfb\u5217\u5e16\u5b50\u7531John Mashey\u3002\u4ece\u90a3\u65f6\u8d77\uff0c\u5b83\u5df2\u7ecf\u66f4\u65b0\uff0c\u7f16\u8f91\u548c\u4e30\u5bcc\u4e86David Kanter\u7684\u9644\u52a0\u6750\u6599\u548c\u56fe\u8868\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4f5c\u8005\u8bb8\u53ef\u7684\u3002 VAX\u662f\u7531\u6570\u5b57\u8bbe\u5907\u516c\u53f8\u751f\u4ea7\u7684\u6b63\u4ea4\uff0c32\u4f4dCISC\u6307\u4ee4\u96c6\u67b6\u6784\u548c\u76f8\u5173\u7684CPU\u548c\u7cfb\u7edf\u7cfb\u5217\u3002 VAX\u88ab\u8ba4\u4e3a\u662f\u5178\u578b\u7684CISC\u67b6\u6784\u548cVAX\u7cfb\u7edf\uff08\u901a\u5e38\u79f0\u4e3aVAXEN\uff09\u901a\u5e38\u4f7f\u7528\u79f0\u4e3aVMS\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u5e76\u4ece1977\u5e74\u53d1\u8d27\uff0c\u76f4\u52301992\u5e74\uff0c\u5f53\u8be5\u7ebf\u8def\u7ec8\u6b62\u6709\u5229\u4e8ealpha\u65f6\u3002\u5728alpha\u67b6\u6784\u7684\u6b7b\u4ea1\u4e4b\u540e\uff0c\u6709\u5f88\u591a\u5173\u4e8e1990\u5e74\u4ee3\u65e9\u671f\u5ec9\u4ef7\uff0c\u5feb\u901f\uff0c\u53ca\u65f6\u7684vaxen\u7684\u53ef\u884c\u6027\u7684\u8ba8\u8bba\u3002\u8bb8\u591a\u4eba\u5df2\u7ecf\u65ad\u8a00\uff0c\u5982\u679cDEC\u7ee7\u7eedvax\uff0c\u800c\u4e0d\u662f\u8f6c\u53d8\u4e3a\u516c\u53f8\u53ca\u5176\u4ea7\u54c1\u7684alpha\u4eca\u5929\u4f1a\u66f4\u597d\u5730\u5f62\u6210\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5927\u90e8\u5206\u8ba8\u8bba\u90fd\u5145\u6ee1\u4e86\u5173\u4e8e\u53ef\u80fd\u5df2\u7ecf\u6709\u4ec0\u4e48\u5e7b\u60f3\u7684\u5e7b\u60f3;\u8fd9\u4e2a\u95ee\u9898\u4e0d\u4ec5\u4ec5\u662f\u6280\u672f\u4e0a\u53ef\u884c\u7684\uff0c\u800c\u4e14\u662f\u4ec0\u4e48\u662f\u7ecf\u6d4e\u7ade\u4e89\u529b\u548c\u4e0a\u5e02\u65f6\u95f4\u7684\u7ade\u4e89\u529b\u3002\n \u8fd9\u4e00\u7cfb\u5217\u7269\u54c1\u5c06\u572820\u4e16\u7eaa90\u5e74\u4ee3\u521d\u671f\u5ba1\u67e512\u6708\u548cVAX\u67b6\u6784\u9762\u4e34\u7684\u95ee\u9898\u3002\u7b2c\u4e00\u90e8\u5206\u6db5\u76d6\u4e86\u7cfb\u7edf\u548c\u5fae\u5904\u7406\u5668\u7684\u4e00\u4e9b\u7ecf\u6d4e\u5b66\u3002\u672c\u7cfb\u5217\u4e2d\u7684\u7b2c\u4e8c\u90e8\u5206\u5c06\u89e3\u51b3DEC\u9762\u4e34\u7684\u7ade\u4e89\u6311\u6218\uff0c\u56f4\u7ed5alpha\u7684\u65f6\u95f4\u3002\u7b2c\u4e09\u4e2a\u548c\u6700\u540e\u4e00\u90e8\u5206\u5c06\u6bd4\u8f83\u6307\u4ee4\u96c6\u9762\u4e34\u4ee4\u4eba\u6ee1\u610f\u7684VAX\uff0cX86\u548cS / 360\u5fae\u5904\u7406\u5668\u7684\u56f0\u96be\uff0c\u5e76\u5c06\u6240\u6709\u5185\u5bb9\u5e26\u5728\u4e00\u8d77\u3002\n  \u5047\u8bbe\u8bbe\u8ba1\u82af\u724750,000,000\u7f8e\u5143\uff0c\u5e76\u8fdb\u5165\u751f\u4ea7\u3002\u5de5\u7a0b\u4e0e\u603b\u5355\u5143\u4f53\u79ef\u7684\u6bcf\u4e2a\u82af\u7247\u7684\u644a\u9500\u6210\u672c\u5982\u4e0b\u56fe1\u6240\u793a\u3002\n    \u56fe1  - \u6bcf\u4e2aCPU\u7684\u5047\u8bbe\u5f00\u53d1\u6210\u672c\u6216\u8005\uff0c\u5982\u679c\u60a8\u53ef\u4ee5\u9500\u552e5,000,000\u82af\u7247\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u82b1\u8d39500,000,000\u7f8e\u5143\u7684\u5f00\u53d1\uff0c\u4ecd\u7136\u53ea\u6709100\u7f8e\u5143\u7684\u5de5\u7a0b\u6210\u672c\u3002\u5f88\u5bb9\u6613\u770b\u51fa\uff0c\u7531\u4e8e\u8fd9\u4e9b\u7ecf\u6d4e\u5b66\uff0c\u9ad8\u6279\u91cf\u8bbe\u8ba1\u5177\u6709\u76f8\u5bf9\u5bb9\u6613\u5b9e\u73b0\u7684\u9ad8\u6027\u80fd\u3002\u6b64\u5916\uff0cFAB\u7684\u66f4\u9ad8\u4ea7\u91cf\u589e\u52a0\u4e86\u7845\u7684\u8d28\u91cf\uff0c\u8fdb\u4e00\u6b65\u63d0\u9ad8\u4e86\u5927\u5bb9\u91cf\u8bbe\u8ba1\u7684\u6027\u80fd\u3002\n \u8981\u5c06\u5176\u900f\u89c6\uff0c\u6211\u5df2\u7ecf\u57281985-1987\u671f\u95f4\u5305\u62ecMicrovax-II\u548cIBM PC\u5377\u3002\u5728\u8fd9\u79cd\u5047\u8bbe\u6a21\u578b\uff0c\u5047\u8bbe\u5177\u6709\u540c\u7b49\u7684\u5f00\u53d1\u6210\u672c\uff0c\u6bcf\u5355\u4f4dR\uff06amp\u7684\u5dee\u5f02\u5927\u7ea6\u662f\u4e24\u4e2a\u6570\u91cf\u548c\u534a\u6570\u91cf\u7ea7\u3002\n  \u9875\u6570\uff1a1 2 3 4 5\u4e0b\u4e00\u9875\u00bb\u8ba8\u8bba\uff084\u6761\u8bc4\u8bba\uff09 ", "note_en": "January 24, 2006 by    John Mashey  Pages:  1  2  3  4  5 Editor\u2019s Note: This series of articles first appeared last summer in the comp.arch newsgroup, in a series of posts by John Mashey. Since then, it has been updated, edited and enriched with additional material and graphs by David Kanter, all with permission of the author.  The VAX was an orthogonal, 32-bit CISC instruction set architecture and an associated family of CPUs and systems, produced by the Digital Equipment Corporation. The VAX is considered to be the quintessential CISC architecture and VAX systems (often called VAXen) typically used an operating system known as VMS and were shipped from 1977 till 1992, when the line was discontinued in favor the Alpha. In the wake of the death of the Alpha architecture, there have been many discussions regarding the feasibility of cheap, fast and timely VAXen in the early 1990\u2019s. Many have asserted that if DEC had continued with the VAX, rather than transitioning to the Alpha that the company and its products would be in better shape today. Unfortunately, most of this discussion is filled with fantasies about what could have been; the issue is not just what was technically feasible, but what was cost-competitive and time-to-market competitive.\n This series of articles will examine the issues confronting DEC and the VAX architecture in the early 1990\u2019s. The first part covers some of the economics of systems and microprocessors. The second part in this series will address the competitive challenges that DEC faced around the time of the Alpha. The third and last part will compare the instruction set difficulties facing out-of-order VAX, x86 and s/360 microprocessors and bring everything together.\n  Suppose it costs $50,000,000 to design a chip and get into to production. \u00a0The amortized cost per chip for engineering versus total unit volume is shown below in Figure 1.\n    Figure 1 \u2013 Hypothetical Development Costs per CPU Alternatively, if you can sell 5,000,000 chips, then you could spend $500,000,000 on development, and still only have an engineering cost per chip of $100. It is easy to see that as a result of these economics, high volume designs achieve high performance with relative ease. Additionally, higher production at a fab increases the quality of silicon, further improving the performance of a high volume design.\n To put this in perspective, I have included the MicroVAX-II and IBM PC volumes over the periods 1985-1987. Under this hypothetical model that assumes equal development costs, the difference in per unit R&amp;D costs is roughly two and a half orders of magnitude.\n  Pages:  \u00a0  1  2  3  4  5\u00a0\u00a0 Next \u00bb  Discuss (4 comments)", "posttime": "2021-06-18 03:07:33", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ecf\u6d4e\u5b66,\u770b\u770b,vax,alpha", "title": "\u5386\u53f2\u770b\u770bVAX\uff1a\u5fae\u5904\u7406\u5668\u7ecf\u6d4e\u5b66\uff082006\uff09 ", "title_en": "A Historical Look at the VAX: Microprocessor Economics (2006)", "transed": 1, "url": "https://www.realworldtech.com/vax-cpu-economics/", "via": "", "real_tags": ["\u7ecf\u6d4e\u5b66", "\u770b\u770b", "vax", "alpha"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066539, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u6700\u8fd1\u5199\u4e86\u53e6\u4e00\u4e2a\u62e8\u6b3e\u7533\u8bf7\u3002\u9664\u4e86\u901a\u5e38\u7684\u4e0d\u5b89\u5168\u548c\u5192\u540d\u9876\u66ff\u7efc\u5408\u75c7\u5916\uff0c\u6211\u5fc5\u987b\u4e0e\u5927\u91cf\u7684\u6d88\u4ea1\u548c\u6cae\u4e27\u4e00\u8d77\u5de5\u4f5c\u3002\u6211\u63d0\u4ea4\u4e86\u5b83\uff0c\u56e0\u4e3a\u903b\u8f91\u4e0a\u8fd9\u662f\u6211\u57286\u5e74\u540e\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\uff1a\u6211\u5e94\u8be5\u52aa\u529b\u5f00\u59cb\u6211\u81ea\u5df1\u7684\u7814\u7a76\u5c0f\u7ec4\u3002\u6211\u771f\u7684\u5f88\u60f3\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u6211\u559c\u6b22\u5174\u8d77\u65b0\u7684\u60f3\u6cd5\u5e76\u4e0e\u4eba\u4eec\u4e00\u8d77\u643a\u624b\u5171\u8fdb\u3002\u6211\u5bf9\u7ed3\u679c\u4e0d\u662f\u5f88\u4e50\u89c2\u7684\u539f\u56e0\u662f\uff1a\u7531\u4e8e\u5fc3\u7406\u5065\u5eb7\u95ee\u9898\u5728\u8fc7\u53bb6\u5e74\u4e2d\uff0c\u7531\u4e8e\u75c5\u5047\u548c\u517c\u804c\u5408\u540c\uff0c\u6211\u53ea\u5de5\u4f5c\u4e860.62\u82f1\u5c3a\uff084\u5c81\u4ee5\u4e0b\uff09\u3002\n  \u5728\u6211\u7684\u535a\u58eb\u5b66\u4f4d\u4e4b\u540e\uff0c6\u5e74\u524d\uff0c\u6211\u6765\u5230Maastricht\u5927\u5b66\u4f5c\u4e3a\u4e00\u4e2a\u535a\u58eb\u540e\u7814\u7a76\u5458\uff0c\u611f\u89c9\u50cf\u6574\u4e2a\u4e16\u754c\u90fd\u662f\u6211\u7684\u7261\u86ce\u3002\u6211\u70ed\u60c5\u5730\u8df3\u8fdb\u4e86\u65b0\u7684\u9879\u76ee\uff0c\u4e86\u89e3\u57ce\u5e02\u5e76\u7ed3\u4ea4\u65b0\u670b\u53cb\u3002\u534a\u5e74\u540e\uff0c\u6211\u5f00\u59cb\u6291\u90c1\u75c7\uff0c\u8fd9\u6700\u7ec8\u8db3\u591f\u4e25\u91cd\uff0c\u56e0\u4e3a\u6211\u65e0\u6cd5\u79bb\u5f00\u623f\u5b50\u6216\u505a\u57fa\u672c\u4efb\u52a1\uff0c\u5e76\u4e14\u4e0d\u5f97\u4e0d\u5728\u75c5\u50474\u4e2a\u6708\u5185\u3002\u81ea\u4ece\u6b64\u4ee5\u6765\uff0c\u6211\u65e0\u6cd5\u5168\u804c\u5de5\u4f5c\u3002\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u6211\u6bcf\u5468\u5de5\u4f5c15\u5c0f\u65f6\uff0c\u5b66\u672f\u754c\u4efb\u4f55\u4eba\u90fd\u4f1a\u544a\u8bc9\u4f60\u5f88\u53ef\u7b11\u3002\u5373\u4f7f\u6211\u505a\u4e86\u826f\u597d\u7684\u5de5\u4f5c\uff0c\u6211\u6709\u4e00\u4e9b\u6f02\u4eae\u7684\u8bba\u6587\uff08\u5982\u679c\u4f60\u5728\u60a3\u6709\u6291\u90c1\u75c7\u7684\u65f6\u95f4\u597d\u591a\u4e86\u89e3\u4e86\u6211\u7684Linkedin\u6216Research Gate\u66f2\u7ebf\uff0c\u90a3\u4e48\u5982\u679c\u4f60\u6709\u591a\u4e48\u597d\uff0c\u90a3\u4e48\u6211\u7684\u6388\u6743\u5e94\u7528\u7a0b\u5e8f\u7684\u53cd\u9988\u603b\u662f\u540c\u6837\u7684\uff1a\u5bf9\u6211\u804c\u4e1a\u751f\u6daf\u7684\u8fd9\u4e2a\u9636\u6bb5\u6ca1\u6709\u8db3\u591f\u7684\u79d1\u5b66\u4ea7\u51fa\u3002\u5982\u679c\u60a8\u5b9e\u9645\u4e0a\u8bbe\u6cd5\u627e\u5230\u4e86\u53ef\u6301\u7eed\u7684\u4f59\u989d\u548c\u5de5\u4f5c\u73af\u5883\uff0c\u90a3\u4e48\u878d\u8d44\u673a\u6784\u6ca1\u6709\u5148\u4f8b\uff0c\u6ca1\u6709\u5148\u4f8b\u7684\u878d\u8d44\u673a\u6784\uff0c\u8fd9\u662f\u652f\u6301\u60a8\u5c3d\u53ef\u80fd\u591a\u5730\u5de5\u4f5c\u7684\u5de5\u4f5c\u73af\u5883\u3002\n  \u6211\u8bd5\u56fe\u8fdb\u5165\u8fd9\u4e2a\u538b\u529b\u5e76\u6bd4\u6211\u73b0\u5b9e\u5730\u5de5\u4f5c\u7684\u66f4\u591a\uff0c\u5b83\u4e0d\u53ef\u907f\u514d\u5730\u5bfc\u81f4\u5026\u6020\u548c\u66f4\u591a\u51e0\u4e2a\u6708\u7684\u5b8c\u5168\u65e0\u6cd5\u505a\u4efb\u4f55\u4e8b\u60c5\uff0c\u66f4\u4e0d\u7528\u8bf4\u5de5\u4f5c\u3002\u4f60\u4e5f\u6709\u9519\u8bef\u7684\u8ba4\u4e3a\uff0c\u8fd9\u5728\u5b66\u672f\u754c\u4ee5\u5916\u66f4\u597d - \u6211\u5df2\u7ecf\u5728\u5de5\u4e1a\u4e2d\u7533\u8bf7\u4e86\u7814\u7a76\u5de5\u4f5c\uff0c\u5e76\u5728\u6211\u63d0\u5230\u7684\u5de5\u4f5c\u517c\u804c\u65f6\u5173\u95ed\u4e86\u9762\u8bd5\u5c0f\u7ec4\uff0c\u8ba9\u62db\u8058\u4eba\u5458\u4f38\u51fa\u63f4\u624b\uff0c\u7136\u540e\u4e0d\u518d\u56de\u590d\u5728\u6211\u8bf40.5 FTE\u662f\u6211\u7684\u6700\u5927\u503c\u4e4b\u540e\uff0c\u6216\u8005\u88ab\u62db\u8058\u4eba\u5458\u544a\u8bc9\u751a\u81f3\u4ee4\u4eba\u8d39\u610f\u7533\u8bf7\u3002\u8fd9\u4e00\u5207\u90fd\u5f88\u96be\u4e0d\u9f13\u52b1\u3002\u7136\u800c\uff0c\u4e8b\u60c5\u5e76\u4e0d\u5b8c\u5168\u53ef\u6015\u3002\u6211\u662f\u79d1\u5b66\u5bb6\uff0c\u6211\u4ec0\u4e48\u90fd\u4e0d\u662f\u4e0d\u662f\u8d44\u683c\u3002\u6211\u5728\u79d1\u5b66\u5199\u4f5c\u548c\u7f16\u8f91\u4e2d\u8bad\u7ec3\u81ea\u5df1\uff0c\u8fd9\u662f\u6211\u53ef\u80fd\u505a\u81ea\u7531\u804c\u4e1a\u8005\u7684\u4e1c\u897f\uff0c\u4f46\u6211\u60f3\u8981\u7684\u51e0\u4e2a\u5c0f\u65f6\u3002\u7136\u800c\uff0c\u5f53\u5b83\u770b\u8d77\u6765\u8d8a\u6765\u8d8a\u5c11\u7684\u65f6\u5019\uff0c\u6211\u7684\u5fc3\u810f\u6b63\u5728\u6253\u7834\uff0c\u6211\u80fd\u591f\u505a\u597d\u7814\u7a76\u3002\n  \u867d\u7136\u8377\u5170\u7684\u5fc3\u7406\u533b\u7597\u4fdd\u5065\u6709\u6539\u8fdb\u7684\u7a7a\u95f4\uff08\u8fd9\u5c06\u662f\u4e00\u4e2a\u5168\u65b0\u7684\u6545\u4e8b\u7684\u6750\u6599\uff09\uff0c\u4f46\u6211\u4e00\u76f4\u80fd\u591f\u4ee5\u67d0\u79cd\u5f62\u5f0f\u8bbf\u95ee\u652f\u6301\uff08\u5e76\u4e14\u6211\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u7279\u6743\uff09\u3002\u6211\u4e00\u76f4\u5728\u63a5\u53d7\u6cbb\u7597\uff0c\u6211\u6b63\u5728\u670d\u7528\u836f\u7269\uff08\u6ca1\u6709\uff0c\u745c\u4f3d\uff0c\u7cbe\u6cb9\u548c\u8fd0\u52a8\u4e0d\u8db3\u4ee5\u6cbb\u7597\u7cbe\u795e\u75be\u75c5\uff09\u3002\u6211\u6709\u7cdf\u7cd5\u7684\u65e5\u5b50\uff0c\u6211\u6709\u7f8e\u597d\u7684\u65e5\u5b50\uff0c\u540e\u8005\u7684\u4eba\u6570\u4f3c\u4e4e\u4f3c\u4e4e\u6b63\u5728\u589e\u52a0\uff0c\u5c3d\u7ba1Covid-19\u6d41\u884c\u80af\u5b9a\u6ca1\u6709\u5e2e\u52a9\u3002\u5728\u7cdf\u7cd5\u7684\u65e5\u5b50\u91cc\uff0c\u6211\u8981\u4e48\u505a\u4e00\u4e2a\u9700\u8981\u66f4\u5c11\u7684\u7126\u70b9\u6216\u4e0d\u663e\u793a\u7684\u4efb\u52a1\u3002\u6211\u65e0\u6cd5\u5f3a\u8c03\u6709\u8db3\u591f\u7684\u4e1c\u897f\uff0c\u5b83\u610f\u5473\u7740\u62e5\u6709\u4e00\u4e2a\u652f\u6301\u6027\u7684\u8001\u677f\u548c\u540c\u4e8b\uff0c\u5e76\u89c9\u5f97\u8fd9\u6ca1\u5173\u7cfb\u3002\u867d\u7136\u6211\u90e8\u95e8\u7684\u5927\u591a\u6570\u540c\u4e8b\u4eec\u4f3c\u4e4e\u51e0\u4e4e\u4e0d\u4e86\u89e3\u8fd9\u7b14\u4ea4\u6613\u4e0e\u6211\u6709\u4ec0\u4e48\u5173\u7cfb\uff0c\u4f46\u4e00\u4e9b\u63a5\u8fd1\u7684\u540c\u4e8b\u4eec\u603b\u662f\u8ba9\u5b83\u77e5\u9053\u5982\u679c\u6211\u4e0d\u7ba1\u7406\uff0c\u90a3\u5c31\u53ef\u4ee5\u7528\u4e1c\u897f\u6c42\u6551\u3002\n  \u6211\u8c08\u8bba\u6211\u7684\u5fc3\u7406\u5065\u5eb7\u7ed9\u4efb\u4f55\u503e\u542c\u7684\u4eba\uff0c\u4e5f\u8bd5\u56fe\u90a3\u4e9b\u4e0d\u4f1a\u7684\u4eba\u3002\u6211\u6ca1\u6709\u63a8\u52a8\u6211\u751f\u547d\u548c\u6574\u4e2a\u75be\u75c5\u53f2\u7684\u6545\u4e8b\uff0c\u4f46\u6211\u9700\u8981\u5927\u5bb6\u4e86\u89e3\u6291\u90c1\u75c7\u662f\u5f71\u54cd\u6211\u751f\u547d\u4e2d\u5404\u4e2a\u65b9\u9762\u7684\u4e1c\u897f\u3002 \u201c\u7f8e\u597d\u7684\u4e00\u5929\u201d\u5e76\u4e0d\u610f\u5473\u7740\u4e00\u5207\u90fd\u5f88\u597d\u3002\u5f53\u6211\u968f\u4fbf\u63d0\u53ca\u6211\u7684\u6291\u90c1\u75c7\u65f6\uff0c\u5927\u591a\u6570\u4eba\u4ecd\u7136\u4e0d\u8212\u670d\uff0c\u4f46\u8fd9\u5e76\u4e0d\u6c89\u9ed8\u6211\u3002\u6211\u8fd9\u6837\u505a\u4e0d\u662f\u5f15\u8d77\u601c\u60af\uff0c\u6216\u8005\u662f\u5bf9\u514b\u670d\u969c\u788d\u7684\u542f\u53d1\u8272\u60c5\uff0c\u4f46\u662f\u8981\u4f7f\u8fd9\u4e00\u70b9 - \u50cf\u6211\u8fd9\u6837\u7684\u4eba\u5728\u8fd9\u91cc\uff0c\u5230\u5904\u90fd\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u4f60\u751f\u547d\u4e2d\u7684\u4efb\u4f55\u65f6\u5019\u90fd\u53ef\u4ee5\u6210\u4e3a\u6211\u3002\u5f88\u96be\u50cf\u8fd9\u6837\uff0c\u5728\u5f88\u591a\u65b9\u9762\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u652f\u6301\u3002\u610f\u8bc6\u6d3b\u52a8\u5f88\u597d\uff0c\u4f46\u5982\u679c\u6ca1\u6709\u8ddf\u968f\u5b9e\u9645\u53d8\u5316\uff0c\u8fd8\u4e0d\u591f\u3002\u5982\u679c\u4eba\u4eec\u5bf9\u7cfb\u7edf\u5982\u4f55\u5931\u8d25\u7684\u58f0\u97f3\uff0c\u5b66\u672f\u754c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\uff0c\u4efb\u4f55\u4e8b\u60c5\u90fd\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u5fc3\u7406\u5065\u5eb7\u95ee\u9898\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u5c06\u5728\u8fd9\u91cc\uff0c\u7b49\u5f85\u53e6\u4e00\u6b21\u62d2\u7edd\u6211\u7684\u6388\u6743\u7533\u8bf7\u3002 ", "note_en": "I recently wrote another grant application. Apart from the usual insecurity and impostor syndrome, I had to work with a lot of demotivation and discouragement. I submitted it, because logically this is the right thing for me to do after 6 years of postdoc-ing: I should work towards starting my own research group. I would really like to do that, I love coming up with new ideas and working with people to bring them to life. The reason why I\u2019m not very optimistic about the outcome is this: because of mental health problems in these last 6 years I have only worked 0.62 FTE (a bit under 4 years), due to sick leave and part-time contracts.\n  After my PhD, 6 years ago, I came to Maastricht University to work as a postdoctoral researcher, feeling like the whole world was my oyster. I enthusiastically jumped into new projects, getting to know the city and making new friends. Half a year later I started coming down with depression, which ended up severe enough that I was unable to leave the house or do basic tasks, and had to go on sick leave for 4 months. I haven\u2019t been able to work full time since. For the last two years, I\u2019ve been working 15 hours per week, which anyone in academia will tell you is laughable. Even though I have done good work and I have some nice papers (feel free to check out my LinkedIn or Research gate profiles if you\u2019re curious about how much can be done while living with depression), the feedback from my grant applications is always the same: not enough scientific output for this stage of my career. Sick leave or parental care is taken into account, but there is no precedent with funding bodies if you actually managed to find a sustainable balance and a working environment, which supports you working as much as you can or want to.\n  I\u2019ve tried giving into this pressure and working more than I realistically can, it inevitably leads to burnout and more months of complete inability to do anything, let alone work. You\u2019d also be wrong to think that this is much better outside of academia \u2013 I\u2019ve applied to research jobs in industry and had the interview panel shut down when I mentioned working part time, had recruiters reach out and then not reply any more after I said that 0.5 FTE is my maximum, or been told by recruiters not to even bother applying at all. It\u2019s hard not to get discouraged by all this. Things are not completely dire, though. I\u2019m a scientist, I\u2019m nothing if not resourceful. I trained myself in scientific writing and editing and that is something I can possibly do freelance, however many hours I want. However, my heart is breaking when it\u2019s looking less and less like I will be able to do research.\n  While mental healthcare in the Netherlands has room for improvement (this would be material for a whole new story), I have always been able to access support in some form (and I realise it\u2019s a privilege). I\u2019ve been in therapy on and off and I\u2019m taking meds (and no, yoga, essential oils and exercise are not sufficient to treat mental illness). I have bad days and I have good days, the number of latter thankfully seems to be increasing, although the Covid-19 pandemic definitely hasn\u2019t helped. On bad days I either do tasks requiring less focus or not show up to work altogether. I can\u2019t emphasize enough what it means to have a supportive boss and colleagues and know and feel that this is ok. While most co-workers in my department seem barely aware of what the deal is with me, a few close colleagues always make it known that it\u2019s ok to ask for help with stuff if I\u2019m not managing.\n  I talk about my mental health to anyone who will listen, and also try to those who won\u2019t. I don\u2019t launch into the story of my life and whole disease history but I need everyone to understand that depression is something that affects every aspect of my life. That a \u201cgood day\u201d doesn\u2019t mean everything is fine. The majority of people are still uncomfortable when I casually mention my depression, but that doesn\u2019t silence me. I do this not to elicit pity, or to be inspiration porn about overcoming obstacles, but to normalise this \u2013 people like me are here, everywhere, you could be me at any point in your life. It\u2019s difficult to be like this and in many ways there just isn\u2019t enough support. Awareness campaigns are good, but not enough if not followed by actual changes. Nothing will change in academia if people are not vocal about how the system is failing us, people with mental health problems. In the meantime I will be here, waiting for yet another rejection of my grant application.", "posttime": "2021-06-18 03:06:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c08\u8bba,talk", "title": "\u6211\u6c38\u8fdc\u4e0d\u4f1a\u8c08\u8bba\u6211\u7684\u6291\u90c1\u75c7 ", "title_en": "I will never not talk about my depression", "transed": 1, "url": "https://annaschueth.com/?p=428", "via": "", "real_tags": ["\u8c08\u8bba", "talk"]}, {"category": "", "categoryclass": "", "imagename": "0b7dd89deb10f64617bdd585525270cc.png", "infoid": 1066538, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1977\u5e74\uff0c\u4f18\u80dc\u7f8e\u5730\u56fd\u5bb6\u516c\u56ed\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u3002\u6500\u5ca9\u4eba\u4eec\u5728\u91ce\u8425\u5305\u88c5\u4e2d\u65c5\u884c\u8fc7\u4e0a\u8c26\u865a\u7684\u751f\u6d3b\uff0c\u4eab\u53d7\u4e16\u754c\u4e0a\u4e0d\u5f97\u4e0d\u63d0\u4f9b\u7684\u4e00\u4e9b\u6700\u5927\u548c\u6700\u4f73\u8352\u91ce\u3002\u5b09\u76ae\u58eb\u6765\u81ea\u897f\u6d77\u5cb8\u5404\u5730\uff0c\u4eab\u53d7LSD\uff0c\u4eab\u53d7\u5de8\u5927\u7684\u5ca9\u5c42\u3002\u60a8\u4eca\u5929\u770b\u5230\u7684\u65c5\u6e38\u6ce2\u6d6a\u5728750,000\u82f1\u4ea9\u7684\u516c\u56ed\u4e2d\u4e0d\u5b58\u5728\uff0c\u5e76\u4e14\u53ef\u4ee5\u627e\u5230\u771f\u6b63\u7684\u9690\u5c45\u3002\n \u8be5\u5730\u533a\u7531\u4e00\u4e2a\u5c0f\u578b\u793e\u533a\uff0c\u70ed\u5fc3\u5e74\u8f7b\u4eba\u5c45\u4f4f\u5728\u660e\u4eae\u7684Hobo\u8fd0\u52a8\u5458\u7684\u751f\u6d3b\uff0c\u5e76\u79f0\u81ea\u5df1\u4e3a\u71d5\u5b50\u3002\u4ed6\u4eec\u8ff7\u604b\u6500\u5ca9\uff0c\u4ed6\u4eec\u5f88\u5dee - \u76f4\u52301977\u5e741\u6708\uff0c\u5373\u3002\u90a3\u4e2a\u51ac\u5929\u4f1a\u770b\u5230\u90a3\u4e2a\u5e78\u8fd0\u7fa4\u7684\u4f18\u80dc\u7f8e\u5730\u5fe0\u8bda\u8005\u548c\u8352\u91ce\u763e\u541b\u5b50\u7684\u7ecf\u6d4e\u7e41\u8363\uff0c\u8fd9\u662f\u4e00\u79cd\u7eff\u8272\u690d\u7269\u7684\u5f62\u5f0f\u3002\n  1977\u5e741\u6708\uff0c\u4e24\u4f4d\u4f18\u80dc\u7f8e\u5730\u7684Ahwahnee\u9152\u5e97\u7684\u5458\u5de5\u51b3\u5b9a\u53bb\u96ea\u978b\u5f92\u6b65\u65c5\u884c\u3002\u516c\u56ed\u5728\u4e00\u767e\u5e74\u5185\uff0c\u5728\u5176\u6700\u7cdf\u7cd5\u7684\u5e72\u65f1\u4e2d\u95f4\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5728\u4e00\u5e74\u4e2d\u7684\u90a3\u4e2a\u65f6\u95f4\u8fdb\u4e00\u6b65\u5f92\u6b65\u65c5\u884c\u3002\u90a3\u4e00\u5929\uff0c\u4ed6\u4eec\u80fd\u591f\u4e00\u76f4\u5230\u8fbe\u6885\u5fb7\u5fb7\u901a\u884c\u6e56\u7684\u4e00\u8def\uff0c\u5728\u90a3\u91cc\u4ed6\u4eec\u505a\u51fa\u4e86\u6050\u6016\u7684\u53d1\u73b0\u3002\n \u5728\u6e56\u4e2d\u94fa\u8bbe\u9f3b\u5b50\u662f\u4e00\u4e2a\u5760\u6bc1\u7684\u970d\u534e\u5fb7500 500\uff0c\u4e00\u67b6\u5e26\u6709\u7f3a\u5931\u7684\u7fc5\u8180\u7684\u53cc\u55b7\u5c04\u673a\u3002\u5760\u6bc1\u7684\u98de\u673a\u5df2\u7ecf\u5728\u90a3\u91cc\u5960\u5b9a\u4e86\u4e00\u4e2a\u6708\uff0c\u4ee5\u53ca\u98de\u673a\u7684\u4e58\u5ba2 - \u98de\u884c\u5458\uff0c\u4e58\u5ba2\u548c6000\u78c5\u7684\u58a8\u897f\u54e5\u5927\u9ebb\u3002\n  \u5f92\u6b65\u65c5\u884c\u8005\u5411\u5f53\u5c40\u62a5\u544a\u4e86\u5d29\u6e83\uff0c\u5f88\u5feb\uff0c\u516c\u56ed\u5145\u6ee1\u4e86\u6bcf\u4e00\u4e2a\u6267\u6cd5\uff0c\u4f60\u53ef\u4ee5\u60f3\u5230\u4f60\u53ef\u4ee5\u60f3\u5230\u7684 -  NTSB\uff0cDEA\uff0cFAA  - \u6240\u6709\u4eba\u90fd\u8bd5\u56fe\u5f04\u6e05\u695a\u8fd9\u67b6\u98de\u673a\u5982\u4f55\u5145\u6ee1\u4e86\u9505\u91cc\u5728\u8fd9\u4e2a\u504f\u8fdc\u7684\u4f18\u80dc\u7f8e\u5730\u843d\u5728\u4e86\u8fd9\u4e2a\u504f\u8fdc\u7684\u4f18\u80dc\u7f8e\u5730\u6e56\u3002\u5f53\u5f53\u5c40\u5230\u8fbe\u5d29\u6e83\u7f51\u7ad9\u65f6\uff0c\u4ed6\u4eec\u5728\u6563\u843d\u5728\u6e56\u8fb9\u7684\u7c97\u9ebb\u5e03\u888b\u4e2d\u6062\u590d\u4e86200\u78c5\u7684\u534a\u51b7\u51bb\u5927\u9ebb\u3002\u4ed6\u4eec\u628a\u888b\u5b50\u62d6\u5230\u5c71\u4e0a\uff0c\u628a\u5b83\u7c98\u5728\u4ed6\u4eec\u7684\u4e00\u4e2a\u5c0f\u76d1\u72f1\u91cc\u3002\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u6cd5\u5f8b\u6267\u6cd5\u5f97\u5206\uff0c\u4ed6\u4eec\u80fd\u591f\u5728\u8857\u9053\u4e0a\u83b7\u5f97\u5927\u91cf\u7684\u975e\u6cd5\u6bd2\u54c1\u3002\u4f46\u4ed6\u4eec\u4e0d\u77e5\u9053\u7684\u662f\u98de\u673a\u4ecd\u7136\u4e0d\u6b62\u4e8e\u6b64\u3002\n \u5728\u672c\u6708\uff0c\u7fbd\u7ed2\u98de\u673a\u5750\u5728\u90a3\u91cc\uff0c\u6e56\u6cca\u5df2\u7ecf\u51b7\u51bb\u4e86\uff0c\u9020\u6210\u4e86\u6cc4\u6f0f\u7684\u6cc4\u6f0f\u6cb9\u548c\u5e9f\u91d1\u5c5e\u7684\u5bd2\u51b7\uff0c\u6c34\u4e0b\u6d74\u3002\u5f53\u5c40\u5728\u4e1a\u52a1\u4e2d\u5e26\u6765\u6700\u597d\u7684\u6f5c\u6c34\uff0c\u5e0c\u671b\u6062\u590d\u5c38\u4f53\u5e76\u6293\u4f4f\u4efb\u4f55\u5927\u9ebb\u4ecd\u5728\u673a\u8eab\u4e2d\u3002\u4f46\u6761\u4ef6\u4f7f\u5176\u592a\u56f0\u96be\uff0c\u800c\u4e14\u968f\u7740\u5de8\u5927\u7684\u98ce\u66b4\u63a5\u8fd1\uff0c\u4ed6\u4eec\u51b3\u5b9a\u7b49\u5230\u65e9\u6625\u5b8c\u6210\u6062\u590d\u4f7f\u547d\u3002\u4ed6\u4eec\u4e0d\u4f1a\u518d\u56de\u5230\u7f51\u7ad9\u4e0a\u4e09\u4e2a\u6708\u3002\n  Word\u5df2\u7ecf\u5728\u516c\u56ed\u7684\u57fa\u5730\u8fbe\u5230\u4e86\u6500\u5ca9\u5b09\u76ae\u58eb\u7684\u6b96\u6c11\u5730\uff0c\u5728\u4f18\u80dc\u7f8e\u5730\u7684\u504f\u8fdc\u8352\u91ce\u4e2d\u81ea\u7531\u6742\u8349\u3002\u5e76\u8bf4\u51fa\u4f60\u5bf9\u5b09\u76ae\u58eb\u7684\u4e1c\u897f\uff0c\u4f46\u4ed6\u4eec\u7684\u4f01\u4e1a\u5bb6\u7cbe\u795e\u8e22\u5230\u9ad8\u901f\u516c\u8def\u3002\u4ed6\u4eec\u5c06\u82b1\u8d39\u63a5\u4e0b\u6765\u7684\u51e0\u4e2a\u6708\u5c06\u8f83\u4f4e\u7684\u6885\u5fb7\u5fb7\u901a\u884c\u8bc1\u6e56\u53d8\u6210\u4e86\u4f20\u8bf4\u4e2d\u7684\u6c89\u6dc0\u6e56\u3002 \n\u4ed6\u4eec\u5f00\u59cb\u5c06\u6f2b\u957f\u800c\u8270\u5de8\u7684\u5f92\u6b65\u65c5\u884c\u5230\u964d\u4f4e\u6885\u5fb7\u901a\u884c\u6e56\uff0c\u5728\u90a3\u91cc\u4ed6\u4eec\u4f1a\u628a\u65a7\u5934\u5e26\u5230\u51b0\u51bb\u7684\u51b0\u5e8a\u4e0a\uff0c\u4ee5\u6062\u590d\u5927\u9ebb\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5f92\u6b65\u4e0b\u5c71\u3002\u6d3e\u7cfb\u5f00\u59cb\u805a\u96c6\u5728\u5bd2\u51b7\u7684\u6e56\u6cca\u5468\u56f4\uff0c\u7e41\u5fd9\u7684\u5de5\u4eba\u4e0d\u65ad\u5bfb\u627e\u4ed6\u4eec\u53ef\u4ee5\u5728\u9ed1\u5e02\u4e0a\u9500\u552e\u7684\u4e0b\u4e00\u7bc7\u7eff\u5b9d\u85cf\u3002\u6709\u4e9b\u4eba\u636e\u8bf4\u5df2\u7ecf\u4ece\u4ed6\u4eec\u7684\u8c03\u67e5\u7ed3\u679c\u4e2d\u83b7\u5f97\u4e86\u9ad8\u8fbe20,000\u7f8e\u5143\uff0c\u76f8\u5f53\u4e8e\u4eca\u5929\u7684125,000\u7f8e\u5143\u3002\n  \u968f\u7740\u8f83\u4f4e\u9ed8\u514b\u901a\u884c\u8bc1\u6e56\u7684\u5b09\u76ae\u58eb\u53d1\u73b0\u7684\u65b0\u7ecf\u6d4e\u8d22\u5bcc\uff0c\u4ed6\u4eec\u521b\u9020\u4e86\u4e00\u4e2a\u4e34\u65f6\u68da\u6237\u9547\uff0c\u5f00\u53d1\u6062\u590d\u6e56\u4e2d\u51b7\u51bb\u5927\u9ebb\u7684\u57fa\u7840\u8bbe\u65bd\u3002\u8c23\u8a00\u5411\u516c\u56ed\u5e26\u6765\u4e86\u626b\u9664\u8005\uff0c\u516c\u56ed\u670d\u52a1\u6ce8\u610f\u5230\u4e86\u516c\u56ed\u6d3b\u52a8\u548c\u51ac\u5b63\u79df\u8d41\u8bbe\u5907\u7684\u597d\u5947\u7684\u4e0a\u5347\u3002\u5f53\u516c\u56ed\u670d\u52a1\u4e8e4\u6708\u4efd\u8fd4\u56de\u8be5\u7f51\u7ad9\u65f6\uff0c\u6574\u4e2a\u64cd\u4f5c\u88ab\u6253\u65ad\uff0c\u53ea\u662f\u4ee4\u4eba\u5c34\u5c2c\u7684\u662f\u53d1\u73b0\u4e86\u5d29\u6e83\u3002\n \u201c\u6211\u4eec\u4f4e\u4f30\u4e86\u793e\u533a\u67d0\u4e9b\u6210\u5458\u7684\u521b\u4e1a\u7cbe\u795e\uff0c\u201d\u516c\u56edRanger Tim Setnicka\u5411\u7537\u58eb\u6742\u5fd7\u8868\u793a\u3002\n \u968f\u7740\u5b09\u76ae\u58eb\u7684\u6e05\u9664\u8005\u5206\u6563\u5230\u8352\u91ce\u4e2d\uff0c\u6267\u6cd5\u90e8\u95e8\u53ea\u902e\u6355\u4e86\u4e24\u4e2a\u4eba\uff0c\u4f46\u6ca1\u6709\u4eba\u88ab\u5b9a\u7f6a\u3002\u4ece\u90a3\u4e00\u523b\u8d77\uff0c\u6267\u6cd5\u5728\u6e56\u6cca\u5168\u804c\u9732\u8425\uff0c\u9001\u56de\u4efb\u4f55\u542c\u5230\u63ba\u6742\u6e56\u7684\u8c23\u8a00\u7684\u4eba\u3002\u5f53\u6e56\u7ec8\u4e8e\u57286\u6708\u4efd\u89e3\u51bb\u65f6\uff0c\u641c\u6551\u5b98\u5458\u80fd\u591f\u6062\u590d\u98de\u673a\u4e24\u540d\u4e58\u5458\u7684\u5c38\u4f53\uff0c\u4f46\u6240\u6709\u5927\u9ebb\u90fd\u8d77\u6765\u4e86\u3002\n \u5982\u4eca\uff0cDope Lake\u7684\u4f20\u5947\u4f5c\u4e3a\u63d0\u9192\u66f4\u7b80\u5355\u7684\u65f6\u95f4\uff0c\u4e00\u4e2a\u6ca1\u6709\u793e\u4ea4\u5a92\u4f53\u548c\u6e38\u5ba2\u9677\u9631\uff0c\u5728\u4f18\u80dc\u7f8e\u5730\u8086\u8650\u3002\u5b83\u5f15\u53d1\u4e86\u5f15\u7528\u201c\u6211\u5728\u8f83\u4f4e\u7684\u6885\u5fb7\u901a\u884c\u6e56\u4e2d\u5f97\u5230\u4e86\u6211\u7684\u3002\u201d ", "note_en": "In 1977, Yosemite National Park was a much different place. Rock climbers traveled the world over to live modest lives in their camping packs and enjoy some of the biggest and best wilderness the world had to offer. Hippies came from all over the west coast to take LSD and enjoy the massive rock formations. Waves of tourism that you see today didn\u2019t exist in the 750,000-acre park and true seclusion could be found.\n The area consisted of a small community of enthusiastic youngsters living the lives of bright-eyed hobo sportsmen and calling themselves The Dirtbags. They were obsessed with rock climbing and they were poor \u2013 until January of 1977, that is. That winter would see an economic boom for that lucky group of Yosemite loyalists and wilderness junkies, one that came in the form of a green plant.\n  In January of 1977, two employees of Yosemite\u2019s\u00a0Ahwahnee Hotel decided to go for a snowshoe hike. The park was in the middle of one of its worst droughts in a hundred years, so they could hike further than usual for that time of year. That day, they were able to reach all the way up to the\u00a0Lower Merced Pass Lake, where they made a terrifying discovery.\n Laying nose first in the lake was a crashed Howard 500, a twin-jet aircraft with a missing wing. The crashed plane had laid there for a month, along with occupants of the plane \u2013 a pilot, a passenger and 6,000 pounds of Mexican marijuana.\n  The hikers reported the crash to authorities and soon enough, the park was filled with every law enforcement with an acronym you could think of \u2013 NTSB, DEA, FAA \u2013 all trying to figure out how this plane full of pot had landed in this remote Yosemite lake. When the authorities arrived at the crash site, they recovered 2,000 pounds of half-frozen marijuana in burlap bags scattered around the lake. They hauled the bags down the hill and stuck it in one of their small jail cells. They thought it was a great score for law enforcement who were able to get the significant amount of illegal drugs off the streets. But what they didn\u2019t know is the plane was carrying much more than that.\n During the month the downed aircraft had sat there, the lake had frozen over, creating a cold, underwater bath of leaked oil and scrap metal. Authorities brought in the best in the business to dive into the water and hopefully recover the bodies and grab any marijuana still in the fuselage. But the conditions made it much too difficult, and with a massive storm approaching, they decided to wait until early-spring to finish the recovery mission. They wouldn\u2019t return to the site for another three months.\n  Word had reached the colony of rock climbing hippies at the base of the park that there was free weed up in the remote wilderness of Yosemite. And say what you will about hippies, but their entrepreneurial spirit kicked into high gear. They would spend the following months turning Lower Merced Pass Lake into the legendary Dope Lake.\n They began making the long and arduous hike up to\u00a0Lower Merced Pass Lake, where they would take axes to the frozen sheet of ice to recover as much marijuana they could hike down the mountain. Factions were beginning to congregate around the cold lake, with busy workers constantly in search of their next bag of green treasure they could sell on the black market. Some were said to have made up to $20,000 from their findings, the equivalent to $125,000 today.\n  With the new economic fortune found by the hippies at Lower Merced Pass Lake, they created a makeshift shantytown, developing the infrastructure needed to recover the frozen marijuana in the lake. The rumors had brought scavengers to the park, and the Park Service noticed a curious uptick in park activity and winter rental equipment. The whole operation was interrupted when the Park Service returned to the site in April, only to be embarrassed that the crash was discovered.\n \u201cWe underestimated the entrepreneurial spirit of certain members of the community,\u201d said Park Ranger Tim Setnicka   to The Men\u2019s Journal.\n As the hippy scavengers scattered into the wilderness, law enforcement only arrested two people, but no one was ever convicted. From that moment on, law enforcement camped at the lake full-time, sending back anybody who had heard the rumors of Dope Lake. When the lake finally thawed in June, Search and Rescue officials were able to recover the bodies of the two occupants of the airplane, but all the marijuana was up and gone.\n Today, the legend of Dope Lake serves as a reminder of a simpler time, one without social media and tourists traps that run ragged in Yosemite. It sparked the quote \u201cI Got Mine at Lower Merced Pass Lake.\u201d", "posttime": "2021-06-18 03:06:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4f18\u80dc,\u516c\u56ed", "title": "\u8bb0\u4f4f\u5b83\u5728\u4f18\u80dc\u7f8e\u5730\uff082019\u5e74\uff09\u4e0a\u4e0b\u96e8\u4e866K\u78c5\u5927\u9ebb ", "title_en": "Remembering the time it rained 6k pounds of marijuana on Yosemite (2019)", "transed": 1, "url": "https://activenorcal.com/remembering-the-time-it-rained-6000-pounds-of-marijuana-on-yosemite/", "via": "", "real_tags": ["\u4f18\u80dc", "\u516c\u56ed"]}, {"category": "", "categoryclass": "", "imagename": "48039d15efa0dbfdaa8d9177dd202494.png", "infoid": 1066537, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u6709\u5173\u62db\u8058\u4eba\u5458\u5bf9\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u6240\u505a\u7684\u5185\u5bb9\u7684\u8be6\u7ec6\u4fe1\u606f\u3002\u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u8ddf\u8e2a\u516c\u53f8\u5982\u4f55\u4e0e\u60a8\u7684\u7533\u8bf7\u8fdb\u884c\u4e92\u52a8\u7684\u80fd\u529b\u3002\u6211\u4eec\u544a\u8bc9\u60a8\u62db\u8058\u4eba\u5458\u662f\u5426\u67e5\u770b\u60a8\u7684\u7533\u8bf7\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5728\u54ea\u4e9b\u90e8\u5206\u3002\u6211\u4eec\u8fd8\u4e3a\u60a8\u63d0\u4f9b\u5173\u4e8e\u5404\u516c\u53f8\u4e0e\u5176\u4ed6\u7533\u8bf7\u4eba\u6709\u9009\u62e9\u6027\u7684\u6570\u636e\u3002\n \u5c31\u4e1a\u673a\u6784\u7684\u7ed3\u6784\u5316\uff0c\u5de5\u7a0b\u7279\u5b9a\u6570\u636e\uff08\u4f8b\u5982\uff0c\u91ca\u653eCadence\uff09\u3002\u6bcf\u4e2a\u5de5\u4f5c\u7f51\u7ad9\u90fd\u8ba9\u60a8\u6309\u7167\u6807\u9898\u6216\u4f4d\u7f6e\u641c\u7d22\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u60f3\u641c\u7d22\u516c\u53f8\u662f\u5426\u4f7f\u7528\u914d\u5bf9\u7f16\u7a0b\uff1f\u6216\u8005\u4ed6\u4eec\u5982\u4f55\u5c06\u65b0\u7684\u4ee3\u7801\u53d1\u8d27\u9891\u7387\uff1f\u6211\u4eec\u6b63\u5728\u4e3aTripleByte\u4e0a\u53d1\u5e03\u7684\u6bcf\u4e2a\u804c\u4f4d\u516c\u53f8\u6536\u96c6\u8fd9\u4e9b\u6570\u636e - \u6211\u4eec\u5047\u8bbe\u4efb\u4f55\u7f3a\u5c11\u7684\u4fe1\u606f\u662f\u4e0d\u5229\u7684\uff0c\u4ee5\u786e\u4fdd\u516c\u53f8\u59cb\u7ec8\u5411\u6211\u4eec\u63d0\u4f9b\u6b64\u4fe1\u606f\u3002\n \u6ca1\u6709\u6d4b\u9a8c\u6216\u9762\u8bd5\u8981\u6c42\u52a0\u5165TripleByte\u3002\u6211\u4eec\u7684\u6d4b\u9a8c\u4e3a\u7f3a\u4e4f\u4f20\u7edf\u51ed\u8bc1\u7684\u5de5\u7a0b\u5e08\u5f00\u653e\u95e8\uff0c\u4f46\u5728\u8fc7\u53bb\u4f7f\u7528Triplebyte\u9501\u5b9a\u4e86\u8bb8\u591a\u5176\u4ed6\u5de5\u7a0b\u5e08\u3002\u6211\u4eec\u7684\u8bc4\u4f30\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u53ef\u9009\u65b9\u6cd5\uff0c\u5de5\u7a0b\u5e08\u53ef\u4ee5\u5411\u96c7\u4e3b\u5c55\u793a\u4ed6\u4eec\u7684\u6280\u80fd\uff08\u8c01\u538b\u5012\u6027\u5730\u544a\u8bc9\u6211\u4eec\u4ed6\u4eec\u76f8\u4fe1\u6211\u4eec\u5f97\u5206\uff09\uff0c\u800c\u4e0d\u662f\u8fdb\u5165\u7684\u8981\u6c42\u3002\n \u6709\u5173\u8fd9\u4e9b\u66f4\u6539\u7684\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff08\u4ee5\u53ca\u6211\u4eec\u4e00\u76f4\u5728\u52aa\u529b\u7684\u5176\u4ed6\u4e00\u4e9b\u4e8b\u60c5\uff09\uff0c\u8bf7\u53c2\u9605\u6b64\u5904\u3002\n  \u6211\u4eec\u7684\u4f7f\u547d\u662f\u4fee\u590d\u62db\u8058\u5de5\u7a0b\u5e08\u3002\u5f53\u6211\u4eec\u5fd8\u8bb0\u4e86\u8fd9\u9879\u4efb\u52a1\u65f6\uff0c\u6211\u4eec\u7684\u6700\u4f4e\u70b9\u5df2\u7ecf\u5230\u6765\uff0c\u6211\u5f88\u9ad8\u5174\u80fd\u591f\u524d\u8fdb\u5230\u4e00\u4e2a\u5148\u8fdb\u7684\u65b9\u5411\u3002\u6211\u4eec\u7684\u4e3b\u5bfcPM\uff0cRachel Wolford\uff0c\u6211\u4e0b\u5468\u62ff\u7740\u529e\u516c\u65f6\u95f4\uff0c\u6211\u4eec\u5f88\u4e50\u610f\u6536\u5230\u4f60\u7684\u6765\u4fe1\u3002\u6211\u5bf9\u6c42\u804c\u5e73\u53f0\u53ef\u4ee5\u4ee5\u65b0\u65b9\u5f0f\u63a7\u5236\u7684\u65b9\u5f0f\u7279\u522b\u611f\u5174\u8da3\u3002 ", "note_en": "TL;DR:   Triplebyte is pivoting . We no longer require a quiz or interview to join. Engineers are almost completely unique as a labor force. There is far more demand for engineers than there is supply, and that makes engineers powerful in a way other professions are not. We want to stop being a placement agency, and instead become a job search platform that leverages that unique power to create a better hiring process for engineers.\n If you\u2019re not interested in the history that drove this change, click   here  to read about what we\u2019re building and the case for why we think it will work.\n Our mission is to fix hiring for engineers. This was what Harj, Guillaume, and I set out to do when we started Triplebyte. Our first step was to create a quiz and interview process to pre-screen engineers, then require that companies skip screening steps for engineers who did well on these screens. A lot about this worked. We got jobs for over 1000 engineers,  many of whom had non-traditional backgrounds and had previously been totally ignored by recruiters. Helping these people has been by far the most exciting part of working at Triplebyte.  Still, our original model did not succeed as often as it could have, and the problems with that model became more obvious as we scaled. There were always more engineers who we failed to help than there were exciting successes. And we couldn\u2019t change that without resolving fundamental tensions in our model. Two of those tensions in particular were a problem:  First,  our approach made us gatekeepers. Companies didn\u2019t want to skip screening steps, and we could only get them to do so by rejecting everyone except the top few percent of engineers on our assessment. Even if our tests had been perfect, this would have left out many capable engineers. Worse, while we work to make them as good as possible, our assessments are certainly not perfect, which meant we also left out some great engineers (who were understandably unhappy about that). Rather than fixing hiring, we\u2019d replaced companies\u2019 arbitrary requirements with our own.  Second,  we combined two conflicting values. We provided an expedited process to onsites and we focused on testing as a replacement for traditional credentials. Engineers with strong resumes benefitted from our expedited process at companies, but didn\u2019t care about testing. In fact, by de-emphasizing experience, we undersold them. Engineers from non-traditional backgrounds, on the other hand, loved the way our quizzes opened doors for them, but did not care about skipping screening steps. And in fact, the process restrictions we placed on companies stopped them from reaching out to candidates who they would have otherwise been willing to talk to. And so both groups of engineers ended up underserved and less successful than they could have been.  Over time, these problems compounded. Engineers who we rejected held that against us (which was completely understandable). We found ourselves pushing an increasingly varied pool of both engineers and companies into a narrow set of predefined assessments, which hurt both our ability to evaluate engineers and our ability to help companies find the expertise they needed. And these tensions were built so deeply into our business model that they proved impossible to solve without making fundamental changes.\n  Our first effort to fix these problems was a fiasco. We began with an idea that made sense on the surface: create engineer-specific profiles that would offer features that other job search sites like LinkedIn or Indeed couldn\u2018t, then use the enormous number of engineers who had already created Triplebyte profiles to transition Triplebyte into a more general job-search site.  But I made a big mistake. I decided to make these profiles public by default. Our users objected  immediately and forcefully. We canceled this change before it shipped, but our users were right:  this would have been an egregious violation of our users\u2019 privacy.  My first instinct was to talk about why we made this decision (a mix of bad incentives, poor cultural practices that led me to not listen to other people on the team, perhaps just bad judgment). But that wasn\u2019t the point. If literally a thousand people show up at your door to tell you that you violated their trust, then you violated their trust. Doing this was stupid and wrong, and it is not a mistake I intend to repeat.\n  We learned a painful lesson from this incident: we get into trouble when we don\u2019t put engineers first. We threw out our entire product roadmap and made internal changes to be sure we wouldn\u2019t repeat the same mistakes. And then we began to search for a new direction for what Triplebyte would be in the future. We went back to basics. We spoke to hundreds of engineers. And we sketched out a product that would solve the problems in their job search. What we\u2019re announcing today is the end result.\n  What are we pivoting towards? To explain, let\u2019s talk about economics for a second.   Almost everybody (engineer or not) hates job searching \u2014 and why wouldn\u2019t they? In most hiring processes, especially outside of engineering, companies hold all the cards. They know how many applicants they\u2019re talking to. They have access to better salary data. And in most industries, there are more people applying than there are jobs, which makes hiring in those industries inherently an employer\u2019s market. Job seekers don\u2019t have much leverage, so companies have no incentive to create a better hiring experience, to be less credentialist, or to give more feedback to applicants.  Worse still, most job search sites recognize this state of affairs. They  know companies are holding the cards, and as a result, they skew their sites towards serving companies over applicants. This skew makes the existing unfairness in the job search even worse by giving companies even more ways to gain the upper hand over applicants.  Engineers, however, have unique leverage. As more and more of the world becomes software-driven, every company needs to hire engineers. Under our old business model, for example, companies paid us tens of thousands of dollars per hire  and skipped screening steps that they really wanted to do. That\u2019s how badly they wanted to hire engineers.  In short, there is more demand for engineers than there is supply, and that makes engineers powerful.   So why isn\u2019t that power represented in a better job search experience for engineers? Because individual engineers can\u2019t wield it effectively.  Let\u2019s consider an anecdote. One senior engineer we spoke to, who was mostly looking to maximize his salary, told us in frustrated tones about his job search. Early in a recruiting process he would tell a recruiter his salary target, and the recruiter would smile and nod. He\u2019d then go through a couple of calls and two or three interview screening steps, get to the end of the process, and receive an offer \u2014 only to find a number much lower than what he\u2019d asked for.  This engineer was as credentialed as anyone. He had a CS degree from a top school, had worked at Apple, was pretty senior, and (as measured by our quizzes, which he had taken in the past) was exceptionally skilled. He  had leverage! But if we think about it for a moment, we can see that these recruiters did not have much incentive to be honest about their offer upfront. If they had been honest, they\u2019d have had a 0% chance of hiring this great engineer. If they strung him along, they might have perhaps a 10% chance of hiring him. And since their low offer eventually had relatively low cost to them (beyond some wasted time), they were willing to make that gamble.  An individual engineer can ask about culture or salary. But companies aren\u2019t incentivized to be honest unless they think it will make them a hire. They will never tell you that they think their culture is a bad fit or that their salaries are below market rates, because right now they\u2019re never incentivized to do so while they\u2019re still trying to make a hire. They would rather be evasive and noncommittal, because that gives them (say) a 10% chance of making a hire later, instead of a 0% chance.  An individual engineer can ask for detailed feedback if a company rejects them. But once the company has decided to reject an engineer, they have (from a purely self-interested perspective) very little reason to give feedback. After all, they\u2019ve already decided not to make a hire: they no longer have anything to gain by making the engineer\u2019s experience better. It doesn\u2019t improve their chances of hiring someone else by very much, if at all.  Engineers might avoid applying to companies with hiring or engineering processes that they disapprove of. But discovering those practices before every application is impractical. A very motivated engineer could perhaps research the practices of  one company (if they\u2019re large or established enough for that information to exist), but realistic job seekers are applying to dozens of different jobs. Companies often have no incentive to be transparent about their practices, especially when they might be unpopular.  This pattern repeats over and over. Hate whiteboard interviews? Okay, but you\u2019re probably not going to turn down a job offer over them. Want to work for a company that values test coverage? Good luck finding one in a pile of job listings.  Engineers have the power. But they can\u2019t use it alone!\n  That\u2019s where we come in.  Triplebyte has hundreds of thousands of engineers on our platform, and that means we can flip the script on companies. The collective power of thousands of engineers is enough to change their incentives in a way that individual engineers cannot.  We can change their incentives directly by rewarding or punishing certain behavior. For example, companies aren\u2019t normally incentivized to provide salary and culture data. But we can force their hand by promoting transparent companies in our search rankings. When a company\u2019s access to thousands of engineers is on the line, their incentives are very different. The same goes for honesty: a company often has no reason to be honest with any one engineer, but we can disincentivize lying by making their behavior with one engineer affect their access to the next. Recall the Apple engineer I mentioned ten or so paragraphs ago, and imagine that at the end of the hiring process he had a big red \u201cthis company lied to me\u201d button that he could press to punish them and hurt their access to other engineers. Now  that would change recruiter incentives!  We can change their incentives indirectly, too. A company will think twice about adopting engineer-unfriendly practices when they know that applicants know about those practices upfront. And by the same token, a company that genuinely wants to be better, that wants to provide a truly excellent experience for engineers, can be rewarded by having that good behavior visible to everyone.  That\u2019s the idea behind the new Triplebyte. We want to be the job search platform that puts engineers in control. We\u2019re in the same space as companies like LinkedIn or Indeed, but with a focus on engineers and with the philosophy that their interests need to come first.  Here are our first product changes, all of which are already live:\n Detailed information on what a recruiter did with your application. We give you the ability to track how companies interact with your application. We tell you whether recruiters look at your application and, if so, at what parts. We also give you data on how selective each company has been with other applicants.\n Structured, engineering-specific data (e.g. release cadence) on jobs. Every job site lets you search by things like title or location. But what if you want to search by whether a company uses pair programming? Or by how often they ship new code to production? We\u2019re collecting this data for every role companies post on Triplebyte \u2014 and we assume any missing information is unfavorable to ensure companies always give us this information.\n No quiz or interview requirement to join Triplebyte. Our quizzes open doors for engineers who lack traditional credentials, but have locked many other engineers out of using Triplebyte in the past. Going forward, our assessments are a purely optional means by which engineers can show their skills to employers (who overwhelmingly tell us that they trust our scoring), rather than a requirement for entry.\n For more details on these changes (and some of the other things we\u2019ve been working on), see  here.\n  Our mission is to fix hiring for engineers. Our lowest points have come when we\u2019ve forgotten that mission, and I\u2019m excited to be moving in a direction that puts engineers first. Our lead PM, Rachel Wolford, and I are holding  office hours next week , and we\u2019d love to hear from you. I\u2019m especially interested in ways that a job search platform could put you in control in new ways.", "posttime": "2021-06-18 03:06:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u601d\u8003,rethinking", "title": "\u91cd\u65b0\u601d\u8003\u7684TripleByte. ", "title_en": "Rethinking Triplebyte", "transed": 1, "url": "https://triplebyte.com/blog/rethinking-triplebyte", "via": "", "real_tags": ["\u601d\u8003"]}, {"category": "", "categoryclass": "", "imagename": "7cf484ceeae6bc7fc2161eddc603cd15.jpg", "infoid": 1066536, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5439\u98ce\u673a\u4e8b\u4ef6\u53ef\u80fd\u662f\u6211\u5728\u6211\u5de5\u4f5c\u7684\u7cbe\u795e\u75c5\u9662\u89c1\u8fc7\u7684\u6700\u5927\u4e89\u8bae\u3002\u5927\u591a\u6570\u65f6\u5019\u6240\u6709\u7684\u7cbe\u795e\u79d1\u533b\u751f\u90fd\u4f1a\u76f8\u5904\uff0c\u5bf9\u91cd\u8981\u4e8b\u7269\u7684\u770b\u6cd5\u51e0\u4e4e\u76f8\u540c\uff0c\u4f46\u4eba\u4eec\u5bf9\u5f7c\u6b64\u7684\u5589\u5499\u6709\u5173\u5439\u98ce\u673a\u4e8b\u4ef6\u3002\n \u57fa\u672c\u4e0a\uff0c\u8fd9\u4e2a\u5f3a\u8feb\u75c7\u7684\u5973\u4eba\u6bcf\u5929\u65e9\u4e0a\u90fd\u4f1a\u5f00\u8f66\u4e0a\u73ed\uff0c\u62c5\u5fc3\u5979\u5df2\u7ecf\u79bb\u5f00\u4e86\u5439\u98ce\u673a\uff0c\u5b83\u4f1a\u70e7\u6389\u5979\u7684\u623f\u5b50\u3002\u6240\u4ee5\u5979\u5f00\u8f66\u56de\u5bb6\u68c0\u67e5\u5439\u98ce\u673a\u662f\u5426\u5173\u95ed\uff0c\u7136\u540e\u9001\u56de\u5de5\u4f5c\uff0c\u7136\u540e\u62c5\u5fc3\u5979\u8fd8\u6ca1\u6709\u771f\u6b63\u68c0\u67e5\u5f97\u8db3\u591f\u597d\uff0c\u7136\u540e\u9a7e\u9a76\u540e\uff0c\u6bcf\u5929\u5341\u5230\u4e8c\u5341\u6b21\u3002\n \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u5178\u578b\u7684\u5f3a\u8feb\u6027\u75be\u75c5\u7684\u60c5\u51b5\uff0c\u4f46\u5b83\u771f\u7684\u5e72\u6270\u4e86\u5979\u7684\u751f\u6d3b\u3002\u5979\u5de5\u4f5c\u4e86\u4e00\u4e9b\u9ad8\u7ea7\u5de5\u4f5c - \u6211\u89c9\u5f97\u5f8b\u5e08 - \u800c\u4e14\u7531\u4e8e\u8fd9\u4e2a\u6765\u56de\u9a7e\u9a76\uff0c\u5979\u7684\u804c\u4e1a\u751f\u6daf\u5728\u5510\u5954\u4eba\u7684\u5730\u6b65\uff0c\u5979\u4e0d\u65ad\u8fdf\u5230\uff0c\u5979\u8ba4\u4e3a\u5979\u5fc5\u987b\u9000\u51fa\u5e76\u6212\u9664\u6b8b\u75be\u3002\u5979\u65e0\u6cd5\u548c\u670b\u53cb\u4e00\u8d77\u51fa\u53bb\uff0c\u5979\u751a\u81f3\u4e0d\u80fd\u53bb\u9910\u9986\uff0c\u56e0\u4e3a\u5979\u4f1a\u7ee7\u7eed\u70e6\u607c\u5979\u5728\u5bb6\u91cc\u79bb\u5f00\u5439\u98ce\u673a\uff0c\u5e76\u4e0d\u5f97\u4e0d\u51b2\u56de\u53bb\u3002\u5979\u770b\u5230\u4e86\u65e0\u6570\u7684\u7cbe\u795e\u75c5\u5b66\u5bb6\uff0c\u5fc3\u7406\u5b66\u5bb6\u548c\u8f85\u5bfc\u5458\uff0c\u5979\u505a\u4e86\u5404\u79cd\u5404\u6837\u7684\u6cbb\u7597\uff0c\u5979\u5728\u8fd9\u672c\u4e66\u4e2d\u670d\u7528\u4e86\u6bcf\u4e00\u79cd\u836f\u7269\uff0c\u4ed6\u4eec\u90fd\u6ca1\u6709\u5e2e\u52a9\u3002\n \u6240\u4ee5\u5979\u6765\u5230\u4e86\u6211\u7684\u533b\u9662\uff0c\u88ab\u6211\u7684\u4e00\u4f4d\u540c\u4e8b\u6240\u770b\u5230\u7684\uff0c\u4ed6\u544a\u8bc9\u5979\u201c\u563f\uff0c\u4f60\u6709\u6ca1\u6709\u60f3\u8fc7\u5e26\u6709\u4f60\u7684\u5439\u98ce\u673a\uff1f\u201d\n  \u5979\u4f1a\u5f00\u8f66\u53bb\u65e9\u4e0a\u5de5\u4f5c\uff0c\u5979\u5f00\u59cb\u62c5\u5fc3\u5979\u4f1a\u79bb\u5f00\u5439\u98ce\u673a\uff0c\u5b83\u4f1a\u70e7\u6389\u5979\u7684\u623f\u5b50\uff0c\u6240\u4ee5\u5979\u770b\u770b\u5979\u65c1\u8fb9\u7684\u5ea7\u4f4d\uff0c\u90a3\u4e48\u5c31\u4f1a\u662f\u5439\u98ce\u673a\uff0c\u5c31\u5728\u90a3\u91cc\u3002\u5979\u53ea\u6709\u4e00\u4e2a\u5439\u98ce\u673a\uff0c\u73b0\u5728\u5df2\u7ecf\u5360\u4e86\u3002\u6240\u4ee5\u5979\u4f1a\u653e\u677e\u4e00\u4e2a\u5bbd\u6170\uff0c\u5e76\u7ee7\u7eed\u5f00\u8f66\u53bb\u4e0a\u73ed\u3002\n \u6211\u533b\u9662\u7684\u7cbe\u795e\u79d1\u533b\u751f\u5927\u7ea6\u662f\u4e00\u534a\uff0c\u8ba4\u4e3a\u8fd9\u7edd\u5bf9\u662f\u8bfd\u8c24\u6027\u7684\uff0c\u8fd9\u5e76\u4e0d\u662f\u4e00\u79cd\u5bf9\u75f4\u8ff7\u7684\u5f3a\u8feb\u6027\u75be\u75c5\u8fdb\u884c\u6cbb\u7597\uff0c\u5982\u679c\u5b83\u5411\u66f4\u5e7f\u6cdb\u7684\u7cbe\u795e\u75c5\u7fa4\u4f53\u62ff\u51fa\u6765\uff0c\u800c\u4e0d\u662f\u7ed9\u4e88\u6240\u6709\u8fd9\u4e9b\u9ad8\u79d1\u6280\u836f\u7269\u548c\u590d\u6742\u7684\u7597\u6cd5\u6211\u4eec\u53ea\u662f\u544a\u8bc9\u4eba\u4eec\u5c06\u4ed6\u4eec\u7684\u5439\u98ce\u673a\u653e\u5728\u8f66\u7684\u524d\u6392\u5ea7\u4f4d\u4e0a\uff1f\n \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u6211\u542c\u8fc7\u7684\u6700\u597d\u7684\u75af\u72c2\u6545\u4e8b\uff0c\u90a3\u5bb6\u4f19\u5e94\u8be5\u6210\u4e3a\u5956\u724c\u3002\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u65e0\u6cd5\u6cbb\u7597\u7684\u666e\u901a\u65b9\u6cd5\uff0c\u5177\u6709\u8870\u5f31\u7684\u6761\u4ef6\uff0c\u4ee5\u53ca\u4e00\u6ef4\u6b7b\u4ea1\u7684\u7b80\u5355\u5e72\u9884\uff0c\u6ca1\u6709\u4eba\u60f3\u5230\u5979\u7684\u751f\u547d\u3002\u5982\u679c\u6709\u4e00\u5929\u6211\u5f00\u8f9f\u4e86\u81ea\u5df1\u7684\u7cbe\u795e\u75c5\u5b9e\u8df5\uff0c\u6211\u5c31\u4f1a\u8003\u8651\u4f7f\u7528\u4e00\u5f20\u5439\u98ce\u673a\u4f5c\u4e3a\u6807\u8bc6\u7684\u7167\u7247\uff0c\u53ea\u662f\u4e3a\u4e86\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u6211\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u7684\u4f4d\u7f6e\u3002 ", "note_en": "The Hair Dryer Incident was probably the biggest dispute I\u2019ve seen in the mental hospital where I work. Most of the time all the psychiatrists get along and have pretty much the same opinion about important things, but people were at each other\u2019s  throats about the Hair Dryer Incident.\n Basically, this one obsessive compulsive woman would drive to work every morning and worry she had left the hair dryer on and it was going to burn down her house. So she\u2019d drive back home to check that the hair dryer was off, then drive back to work, then worry that maybe she hadn\u2019t  really checked well enough, then drive back, and so on ten or twenty times a day.\n It\u2019s a pretty typical case of obsessive-compulsive disorder, but it was really interfering with her life. She worked some high-powered job \u2013 I think a lawyer \u2013 and she was  constantly late to everything because of this driving back and forth, to the point where her career was in a downspin and she thought she would have to quit and go on disability. She wasn\u2019t able to go out with friends, she wasn\u2019t even able to go to restaurants because she would keep fretting she left the hair dryer on at home and have to rush back. She\u2019d seen countless psychiatrists, psychologists, and counselors, she\u2019d done all sorts of therapy, she\u2019d taken every medication in the book, and none of them had helped.\n So she came to my hospital and was seen by a colleague of mine, who told her \u201cHey, have you thought about just bringing the hair dryer with you?\u201d\n  She would be driving to work in the morning, and she\u2019d start worrying she\u2019d left the hair dryer on and it was going to burn down her house, and so she\u2019d look at the seat next to her, and there would be the hair dryer, right there. And she only had the one hair dryer, which was now accounted for. So she would let out a sigh of relief and keep driving to work.\n And approximately half the psychiatrists at my hospital thought this was  absolutely scandalous, and This Is Not How One Treats Obsessive Compulsive Disorder, and what if it got out to the broader psychiatric community that instead of giving all of these high-tech medications and sophisticated therapies we were just telling people  to put their hair dryers on the front seat of their car?\n I, on the other hand, thought it was the best fricking story I had ever heard and the guy deserved a medal. Here\u2019s someone who was totally untreatable by the normal methods, with a debilitating condition, and a drop-dead simple intervention that nobody else had thought of gave her her life back. If one day I open up my own psychiatric practice, I am half-seriously considering using a picture of a hair dryer as the logo, just to let everyone know where I stand on this issue.", "posttime": "2021-06-18 03:06:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5439\u98ce\u673a,dryer", "title": "\u5439\u98ce\u673a\u4e8b\u4ef6\uff082014\uff09 ", "title_en": "The Hair Dryer Incident (2014)", "transed": 1, "url": "http://quotulatiousness.ca/blog/2016/02/02/qotd-the-hair-dryer-incident/", "via": "", "real_tags": ["\u5439\u98ce\u673a", "dryer"]}, {"category": "", "categoryclass": "", "imagename": "a15c83e7e8abc15a76ac2b5c4fb126b3.png", "infoid": 1066535, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ebd\u7ea6\u7f8e\u8054\u50a8\u8868\u793a\uff0c\u7ebd\u7ea66\u670817\u65e5\uff08\u8def\u900f\u793e\uff09 - \u8054\u90a6\u50a8\u5907\u63a5\u53d7\u4e86\u6bcf\u65e5\u53cd\u56de\u8d2d\u672f\u7684755.8\u4ebf\u7f8e\u5143\uff0c\u4ee50.05\uff05\uff0c\u7ebd\u7ea6\u9001\u798f\u8bf4\u3002  \u5468\u4e09\u7f8e\u56fd\u4e2d\u592e\u94f6\u884c\u5728\u5176\u4e3a\u671f\u4e24\u5929\u7684\u653f\u7b56\u4f1a\u8bae\u7ed3\u675f\u65f6\u5bf9\u5229\u7387\u8fdb\u884c\u4e86\u6280\u672f\u8c03\u6574\uff0c\u65e8\u5728\u5c06\u5176\u5173\u952e\u7684\u9694\u591c\u57fa\u51c6\u5229\u7387\u8dcc\u81f3\u592a\u4f4e\u3002  \u7f8e\u8054\u50a8\u63d0\u9ad8\u4e86\u5728\u7f8e\u56fd\u4e2d\u592e\u94f6\u884c\u4e3e\u884c\u7684\u50a8\u5907\u91d1\u652f\u4ed8\u7684\u5229\u7387\u81f30.15\uff05\uff0c\u5e76\u63d0\u5347\u4e86\u5b83\u5728\u4e00\u591c\u4e4b\u95f4\u9006\u8f6c\u56de\u8d2d\u534f\u8bae\u7684\u5229\u7387\uff0c\u7528\u4e8e\u5728\u77ed\u671f\u5229\u7387\u4e0a\u8bbe\u5b9a\u697c\u5c42\u7684\u5de5\u5177\u3002 ", "note_en": "NEW YORK, June 17 (Reuters) - The Federal Reserve accepted $755.8 billion in its daily reverse repurchase operation on Thursday at a rate of 0.05%, the New York Fed said.\n The U.S. central bank on Wednesday made a technical adjustment to interest rates it manages, at the end of its two-day policy meeting, aimed at keeping its key overnight benchmark interest rate from falling too low.\n The Fed raised the interest rate it pays banks on reserves held at the U.S. central bank to 0.15% and also lifted the rate it pays on overnight reverse repurchase agreements to 0.05%, a tool used to set a floor on short-term interest rates.", "posttime": "2021-06-18 03:05:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,daily,\u5229\u7387", "title": "\u7f8e\u56fd\u7f8e\u8054\u50a8\u5728\u65e5\u5e38\u53cd\u9988\u64cd\u4f5c\u4e2d\u63a5\u53d7755.8\u7f8e\u5143\u7684BLN ", "title_en": "U.S. Fed accepts $755.8 bln in daily reverse repo operation", "transed": 1, "url": "https://www.reuters.com/article/usa-fed-reverse-repo/u-s-fed-accepts-755-8-bln-in-daily-reverse-repo-operation-ny-fed-idUSAQN04ASM9", "via": "", "real_tags": ["\u7f8e\u56fd", "daily", "\u5229\u7387"]}, {"category": "", "categoryclass": "", "imagename": "800234bb1639264944b7f67d8ca59f40.jpg", "infoid": 1066533, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u53ef\u89c2\u5bdf\u6027\u5e73\u53f0Gradabal Labs\u4eca\u5929\u5ba3\u5e03\u5df2\u6536\u8d2dK6\uff0c\u8fd9\u662f\u4e00\u4e2a\u65af\u5fb7\u54e5\u5c14\u6469\u603b\u90e8\u542f\u52a8\uff0c\u8be5\u542f\u52a8\u4e3a\u5de5\u7a0b\u56e2\u961f\u6784\u5efa\u5f00\u6e90\u8d1f\u8377\u6d4b\u8bd5\u5de5\u5177\u3002 Grafana\u8868\u793a\uff0c\u5b83\u548cK6\u5c06\u4f5c\u4e3aGrafana\u7684\u6280\u672f\u5806\u6808\u7684\u4e00\u90e8\u5206\uff0c\u63d0\u4f9b\u4e00\u79cd\u65b9\u6cd5\u6765\u76d1\u89c6\u548c\u8fde\u63a5\u65e5\u5fd7\uff0c\u6307\u6807\u548c\u8ffd\u8e2a\u5e94\u7528\u7a0b\u5e8f\u6027\u80fd\u95ee\u9898\u7684\u65b9\u6cd5\u3002\n \u201c\u5f53\u6211\u4eec\u7b2c\u4e00\u6b21\u4e0eK6\u7684\u56e2\u961f\u4ea4\u8c08\u65f6\uff0c\u4ed6\u4eec\u7acb\u5373\u5bf9\u4ed6\u4eec\u4e0e\u683c\u62c9\u591a\u7eb3\u4e4b\u95f4\u7684\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u76f8\u4f3c\u6027\u5370\u8c61\u6df1\u523b\uff0c\u5305\u62ec\u6211\u4eec\u5bf9\u5f00\u6e90\u7684\u70ed\u60c5\u4ee5\u53ca\u5b83\u4eec\u5982\u4f55\u73b0\u4ee3\u5316\u7684\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u201dGrafana Cofounder\u548c\u9996\u5e2d\u6267\u884c\u5b98Raj Dutt\u5728\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\u3002 \u201c\u8fc7\u53bb\uff0c\u8d1f\u8f7d\u6d4b\u8bd5\u9700\u8981\u6602\u8d35\u7684\u57fa\u7840\u8bbe\u65bd\u6295\u8d44\u6765\u8fd0\u884c\uff0c\u5bfc\u81f4\u53ea\u83b7\u5f97\u4e86\u6700\u826f\u597d\u7684\u8d44\u91d1\u52aa\u529b\u3002\u8fd9\u4e9b\u5929\uff0c\u8ba1\u7b97\u53ef\u6839\u636e\u9700\u6c42\u548c\u5fae\u670d\u52a1\u662f\u77ed\u6682\u7684\uff0c\u56e0\u6b64\u8fd0\u884c\u6d4b\u8bd5\u6a21\u62df\u7684\u6210\u672c\u8fdc\u8fdc\u8f83\u4f4e\u3002\u56e0\u4e3aK6\u662f\u5f00\u6e90\uff0c\u4e5f\u6709\u4e91\u4ea7\u54c1\uff0c\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u66f4\u5feb\u5730\u5b9e\u73b0\u597d\u5904\u3002\u201c\n  2000\u5e74\uff0cK6\u7684\u521b\u59cb\u56e2\u961f\u6b63\u5728\u7814\u7a76\u4e00\u573a\u5927\u578b\u591a\u4eba\u5728\u7ebf\u89d2\u8272\u626e\u6f14\u6e38\u620f\uff08MMORPG\uff09\uff0c\u5176\u76ee\u6807\u662f\u540c\u65f6\u652f\u6301\u6570\u767e\u540d\u73a9\u5bb6\u3002\u9700\u8981\u65e9\u671f\u8d1f\u8f7d\u6d4b\u8bd5\uff0c\u5e76\u9009\u62e9\u5f00\u653e\u652f\u6301\u652f\u6301\u5305\u62ec\u6b27\u6d32\u7a7a\u95f4\u673a\u6784\u5728\u5185\u7684\u7ec4\u7ec7\u7684\u54a8\u8be2\u3002 2008\u5e74\uff0c\u8be5\u56e2\u961f\u67a2\u8f6c\uff0c\u5c06\u5176\u8d1f\u8f7d\u6d4b\u8bd5\u5de5\u5177\u4f5c\u4e3a\u7f51\u7ad9\u57fa\u51c6\u4ea7\u54c1\u63a8\u5e7f\u3002\u57282016\u5e74\uff0cK6\u5f00\u59cb\u7814\u7a76\u65b0\u7684\u5f00\u6e90\u8d1f\u8f7d\u6d4b\u8bd5\u5de5\u5177\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u6027\u80fd\u6d4b\u8bd5\u3002\n  \u201cGrafana\u662f\u53ef\u89c2\u5bdf\u6027\u7a7a\u95f4\u4e2d\u65e0\u7591\u7684\u9886\u5bfc\u8005\uff0c[\u4ed6\u4eec]\u5bf9\u4ed6\u4eec\u7684\u7528\u6237\u8fdb\u884c\u4e86\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5de5\u4f5c\uff0c\u4e3a\u4ed6\u4eec\u7684\u7528\u6237\u5efa\u7acb\u4e86\u4e00\u4e2a\u5f00\u653e\u548c\u53ef\u534f\u8c03\u7684\u53ef\u89c2\u5bdf\u6027\u5806\u6808 - \u90fd\u5728\u5f00\u6e90\u548c\u4f01\u4e1a\u524d\u6cbf\uff0c\u201dK6\u9996\u5e2d\u6267\u884c\u5b98Robin Gustafasson\u8bf4\u3002 \u201c\u52a0\u5165Grafana\u5bb6\u65cf\u5c06\u52a0\u901f\u6211\u4eec\u4e3a\u73b0\u4ee3\u5de5\u7a0b\u56e2\u961f\u63d0\u4f9b\u66f4\u597d\u7684\u65b9\u6cd5\u6765\u89c2\u5bdf\u548c\u5efa\u7acb\u53ef\u9760\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u80fd\u529b\u3002\u201d\n  Grafana\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e00\u7cfb\u5217\u4ea7\u54c1\u66f4\u65b0\uff0c\u5305\u62ecGrafana 8.0\u548cGrafana Tempo 1.0\u7684\u4e00\u822c\u53ef\u7528\u6027\uff0c\u4ee5\u53ca\u65b0\u7684\u673a\u5668\u5b66\u4e60\u80fd\u529b\u4e4b\u540e\uff0ck6\u6b21\u91c7\u96c6\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u3002 Grafana\u7684\u6700\u65b0\u53d1\u5e03\u5305\u62ec\u589e\u5f3a\u7684\u53ef\u89c6\u5316\uff0c\u7edf\u4e00\u7684\u8b66\u62a5\u7cfb\u7edf\u548cGrafana Tempo\u5206\u5e03\u5f0f\u8ddf\u8e2a\u7684\u9996\u6b21\u4eae\u76f8\u3002\n \u6839\u636eGrafana CofounderTorkel\u00d6degaard\u7684\u8bf4\u6cd5\uff0c\u8d85\u8fc7740,000\u4eba\u6b63\u5728\u79ef\u6781\u5730\u4f7f\u7528Grafana\u5e73\u53f0\u6765\u53ef\u89c6\u5316\u667a\u80fd\u5bb6\u5c45\u8bbe\u5907\uff0c\u5546\u4e1a\u5e94\u7528\u7a0b\u5e8f\u7b49\u6570\u636e\u3002 Grafana\u62e5\u6709\u8d85\u8fc71,000\u4e2a\u4ed8\u8d39\u5ba2\u6237\uff0c\u5305\u62ec\u5f6d\u535a\uff0c\u6469\u6839\u5927\u901a\u8ffd\u9010\uff0ceBay\uff0cPayPal\u548c\u7d22\u5c3c\u3002\n \u5168\u9762\u7684\u8f6f\u4ef6\u76d1\u63a7\u89e3\u51b3\u65b9\u6848\u4ee5\u53ca\u8bb8\u591a\u5176\u4ed6\u6280\u672f\u5b9e\u8df5\uff0c\u6709\u53ef\u80fd\u79ef\u6781\u8d21\u732e\u8fde\u7eed\u4ea4\u4ed8\u3002\u6839\u636eVMware Tanzu\u7684\u8bf4\u6cd5\uff0c92\uff05\u7684\u4f01\u4e1a\u6b63\u5728\u4f7f\u7528\u53ef\u89c2\u5bdf\u5de5\u5177\u6765\u5b9e\u73b0\u66f4\u6709\u6548\u7684\u4e1a\u52a1\u51b3\u7b56\u3002\u9274\u4e8e\u5173\u4e8e\u5206\u5e03\u5f0f\u5e94\u7528\u7a0b\u5e8f\u73af\u5883\u7684\u884c\u4e3a\u6536\u96c6\u7684\u5927\u91cf\u6307\u6807\uff0c\u4f7f\u7528\u53ef\u89c2\u5bdf\u6027\u5de5\u5177\u53ef\u4ee5\u51fa\u73b0\u5b9e\u65f6\u4e1a\u52a1\u6d1e\u5bdf\uff0c\u4ece\u800c\u4e3a\u5229\u76ca\u76f8\u5173\u8005\u521b\u9020\u4ef7\u503c\u3002 \nVidtureBeat\uff06\uff0339; S\u4f7f\u547d\u662f\u6210\u4e3a\u6280\u672f\u51b3\u7b56\u8005\u7684\u6570\u5b57\u57ce\u5e02\u5e7f\u573a\uff0c\u4ee5\u83b7\u5f97\u6709\u5173\u8f6c\u578b\u6280\u672f\u548cTransact\u7684\u77e5\u8bc6\u3002\u60a8\u7f51\u7ad9\u63d0\u4f9b\u6709\u5173\u6570\u636e\u6280\u672f\u548c\u7b56\u7565\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u4ee5\u6307\u5bfc\u60a8\u7684\u9886\u5bfc\u60a8\u7684\u7ec4\u7ec7\u3002 \u6211\u4eec\u9080\u8bf7\u60a8\u6210\u4e3a\u793e\u533a\u7684\u6210\u5458\uff0c\u8bbf\u95ee\uff1a\u95e8\u63a7\u601d\u60f3\u9886\u5bfc\u8005\u5185\u5bb9\u548c\u5bf9\u6211\u4eec\u5956\u5316\u4e8b\u4ef6\u7684\u6298\u6263\u8bbf\u95ee\uff0c\u5982\u8f6c\u63622021\uff1a\u4e86\u89e3\u66f4\u591a  \u6210\u4e3a\u4f1a\u5458 ", "note_en": "Observability platform  Grafana Labs today announced it has acquired  K6, a Stockholm-headquartered startup that\u2019s building an open source load testing tool for engineering teams. Grafana says it and K6 will work together on an integrated offering as part of Grafana\u2019s tech stack, providing a way to monitor and connect logs, metrics, and traces to diagnose app performance issues.\n \u201cWhen we first spoke with the team at K6, we were immediately impressed by the incredible similarities between them and Grafana, including our  passion for open source and how they modernized load testing,\u201d Grafana cofounder and CEO Raj Dutt said in a press release. \u201cIn the past, load testing required costly infrastructure investments to run, resulting in only the most well-funded efforts reaping the benefits. These days, compute is available on demand and microservices are ephemeral, so it is far less costly to run test simulations. Because K6 is open source and also has a cloud offering, developers can realize the benefits much more rapidly.\u201d\n  In 2000, K6\u2019s founding team was working on a massively multiplayer online role-playing game (MMORPG), with the goal of supporting hundreds of players simultaneously. The need for early load testing arose, and the team opted to open a consultancy to support organizations including the European Space Agency. In 2008, the team pivoted to bring its load testing tool to market as a website benchmarking product. And in 2016, K6 started working on a new open source load testing tool for automating performance tests.\n  \u201cGrafana is the unquestioned leader in the observability space, and [they] have done an incredible job building an open and composable observability stack for their users \u2014 both on the  open source and enterprise fronts,\u201d K6 CEO Robin Gustafasson said. \u201cJoining the Grafana family will accelerate our ability to give modern engineering teams better ways to observe and build reliable applications.\u201d\n  The K6 acquisition comes a week after Grafana  detailed a series of product updates, including the general availability of Grafana 8.0 and Grafana Tempo 1.0, as well as new machine learning capabilities. The latest release of Grafana includes enhanced visualizations, a unified alerting system, and the debut of Grafana Tempo distributed tracing.\n More than 740,000 people are actively using the Grafana platform to visualize data from smart home devices, business apps, and more, according to Grafana cofounder Torkel \u00d6degaard. And Grafana has over 1,000 paying customers, including Bloomberg, JP Morgan Chase, eBay, PayPal, and Sony.\n A comprehensive software monitoring solution, along with a number of other technical practices, has the potential to positively contribute to  continuous delivery.  According to VMWare Tanzu, 92% of businesses are using observability tools to enable more effective business decision-making.\u00a0 Given the large number of metrics collected about the behavior of distributed app environments, real-time business insights can emerge with the use of observability tools, creating value for stakeholders.\n VentureBeat&#39;s mission is to be a digital town square for technical decision-makers to gain knowledge about transformative technology and transact.Our site delivers essential information on data technologies and strategies to guide you as you lead your organizations. We invite you to become a member of our community, to access: gated thought-leader content and discounted access to our prized events, such as   Transform 2021: Learn More\n Become a member", "posttime": "2021-06-18 03:05:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "labs,grafana", "title": "Grafana Labs\u83b7\u53d6\u8d1f\u8f7d\u6d4b\u8bd5\u542f\u52a8K6 ", "title_en": "Grafana Labs acquires load-testing startup K6", "transed": 1, "url": "https://venturebeat.com/2021/06/17/grafana-labs-acquires-load-testing-startup-k6/", "via": "", "real_tags": ["labs", "grafana"]}, {"category": "", "categoryclass": "", "imagename": "13590132001f6f461e04f07311a70a5e.png", "infoid": 1066532, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u516d\u5468\u524d\uff0c\u6211\u751a\u81f3\u5728\u6211\u7684\u8def\u7ebf\u56fe\u4e0a\u6ca1\u6709v2.2\uff0c\u4f46\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4eca\u5929\u5728\u8fd9\u91cc\uff0c\u5176\u4e2d\u4e00\u4e2a\u6700\u5927\u7684Tailwind CSS\u529f\u80fd\u91ca\u653e\u4e86\u4e00\u4e0b\uff1f\uff01\n \u6b64\u7248\u672c\u52a0\u8f7d\u4e86\u5927\u91cf\u7684\u9177\u9177\u65b0\u4e1c\u897f\uff0c\u4e3b\u8981\u9488\u5bf9\u65b0\u7684\u5373\u65f6\u6a21\u5f0f\uff0c\u89e3\u9501\u4e86\u6211\u4eec\u53ef\u80fd\u65e0\u6cd5\u91ca\u653e\u7684\u8bb8\u591a\u9177\u60f3\u6cd5\uff0c\u5982\u679c\u6211\u4eec\u4e0d\u5f97\u4e0d\u7ee7\u7eed\u6ce8\u610f\u5230CSS\u6587\u4ef6\u5927\u5c0f\uff0c\u6211\u4eec\u5df2\u7ecf\u9000\u51fa\u4e86\u53d1\u5c55\u3002\n   \u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u5fc5\u987b\u4e3aJIT\u5f15\u64ce\u8fdb\u884c\u51e0\u4e2a\u5c0f\u53d8\u5316\uff0c\u56e0\u4e3a\u6211\u4eec\u6dfb\u52a0\u4e86\u529f\u80fd\uff0c\u56fa\u5b9a\u7684\u9519\u8bef\uff0c\u5e76\u63d0\u9ad8\u4e86\u6574\u4f53\u53ef\u9760\u6027\uff0c\u56e0\u6b64\u8bf7\u52a1\u5fc5\u5728\u5347\u7ea7\u5982\u679c\u60a8\u5347\u7ea7\u65f6\u66f4\u6539\u548c\u5f03\u7528\u4f7f\u7528\u5373\u65f6\u6a21\u5f0f\u3002\n       \u6211\u4eec\uff06\uff0339; ve\u4ece\u4e0a\u9762\u7684\u9876\u5c42\u91cd\u5199\u4e86Tailwind CLI\u5de5\u5177\uff0c\u540c\u65f6\u4e5f\u4e3a\u4e00\u5806\u65b0\u529f\u80fd\u6dfb\u52a0\u4e86\u652f\u6301\u3002\n   \u65e0\u9700\u5b89\u88c5\u6216\u914d\u7f6e - \u4ec5\u9650NPX TailWindcss -o Output.css\u4ece\u968f\u65f6\u968f\u5730\u7f16\u8bd1Tailwind\u3002\u60a8\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528--jit\u6807\u5fd7\u542f\u7528JIT\u6a21\u5f0f\u5e76\u4f7f\u7528--purge\u9009\u9879\u4f20\u9012\u5728\u5185\u5bb9\u6587\u4ef6\u4e2d\uff0c\u800c\u65e0\u9700\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u3002\n \u89c2\u770b\u6a21\u5f0f - \u6240\u4ee5\u60a8\u53ef\u4ee5\u968f\u65f6\u81ea\u52a8\u91cd\u5efaCSS\u3002\n JIT\u6027\u80fd\u4f18\u5316 - \u7531\u4e8e\u6211\u4eec\u7684CLI\u662fTailwind\u7684\u6211\u4eec\uff0c\u6211\u4eec\u5df2\u7ecf\u80fd\u591f\u5236\u9020\u5927\u91cf\u4f18\u5316\uff0c\u4f7f\u5176\u6210\u4e3a\u7f16\u8bd1JIT\u6a21\u5f0f\u4e2dCSS\u7684\u7edd\u5bf9\u6700\u5feb\u7684\u6784\u5efa\u5de5\u5177\u3002 \n\u7f29\u5c0f\u652f\u6301 - \u73b0\u5728\u60a8\u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0-minify\u6807\u5fd7\u4f7f\u7528CSSnano\u7f29\u5c0fCSS\u3002\n PostCSS\u63d2\u4ef6\u652f\u6301 - \u65b0\u7684CLI\u5c06\u8bfb\u53d6\u548c\u5c0a\u91cd\u60a8\u4f7f\u7528Postcss.Config.js\u6587\u4ef6\u914d\u7f6e\u7684\u4efb\u4f55\u989d\u5916\u63d2\u4ef6\u3002\n \u5b83\u4e0e\u4e0a\u4e00\u4e2aCLI\u5b8c\u5168\u5411\u540e\u517c\u5bb9\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u5df2\u7ecf\u8bbe\u7f6e\u4e86\u4efb\u4f55\u811a\u672c\uff0c\u6240\u4ee5\u60a8\u5e94\u8be5\u80fd\u591f\u5347\u7ea7\u5230V2.2\u800c\u4e0d\u5bf9\u811a\u672c\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u3002\n  \u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fTailWindCSS-CLI\u5305\u88c5\u5305\uff0c\u60a8\u53ef\u4ee5\u5b89\u5168\u5730\u5207\u6362\u5230TailWindcs\uff0c\u56e0\u4e3a\u6211\u4eec\u8bbe\u6cd5\u89e3\u51b3\u4e86\u5f3a\u8feb\u6211\u4eec\u9996\u5148\u521b\u5efa\u5305\u88c5\u5305\u7684\u5bf9\u7b49\u4f9d\u8d56\u6027\u95ee\u9898\u3002\n    \u4eba\u4eec\u4e00\u76f4\u5728\u8981\u6c42\u8fd9\u4e00\u5e74\uff0c\u5b83\u7ec8\u4e8e\u5728\u8fd9\u91cc\uff06\uff0339;\u6211\u4eec\uff06\uff0339;\u5728\u4e4b\u524d\u548c\u4e4b\u540e\uff0c\u4e3a\u6837\u5f0f\u4f2a\u5143\u7d20\u6dfb\u52a0\u4e86\u7b2c\u4e00\u65b9\u652f\u6301\uff1a\n  \u6211\u4eec\u8bbe\u7f6e\u4e86\u5185\u5bb9\uff1a\uff06\uff0334;\uff06\uff0334;\u81ea\u52a8\u4f7f\u7528\u524d\u4e00\u9875\u6216\u4e4b\u540e\u7684\u4efb\u4f55\u65f6\u95f4\u6765\u786e\u4fdd\u5143\u7d20\u5448\u73b0\uff0c\u4f46\u60a8\u53ef\u4ee5\u4f7f\u7528\u5177\u6709\u5b8c\u5168\u4efb\u610f\u503c\u652f\u6301\u7684\u65b0\u5185\u5bb9\u5b9e\u7528\u7a0b\u5e8f\u6765\u8986\u76d6\u5b83\uff1a\n    \u5f53\u60a8\u7684\u5185\u5bb9\u5177\u6709\u7a7a\u683c\u65f6\uff0c\u8fd9\u53ef\u4ee5\u8d85\u7ea7\u4e50\u4e8e\u52a9\u4eba\uff0c\u56e0\u4e3a\u7a7a\u95f4\u53ef\u4ee5\uff06\uff0339; t\u5728CSS\u7c7b\u540d\u79f0\u4e2d\u4f7f\u7528\u3002 \n\u6211\u4eec\uff06\uff0339; ve\u6dfb\u52a0\u4e86\u7b2c\u4e00\u7ebf\u548c\u4e00\u7ebf\u4f2a\u5143\u7d20\u7684\u53d8\u4f53\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u505a\u50cf\u6389\u7ebf\u5e3d\u7684\u4e1c\u897f\uff1a\n \uff06lt; p class =\uff06\uff0334;\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff1aText-4xl\u7b2c\u4e00\u5b57\u6bcd\uff1aFont-Bold\u7b2c\u4e00\u4e2a\u5b57\u6bcd\uff1a\u6d6e\u52a8 - \u5de6\u548c\uff0334; \uff06gt;\u591c\u665a\u662f1996\u5e743\u670831\u65e5\uff0c\u7ec8\u4e8e\u4e3aBret Hart\u9762\u5bf9\u8096\u6297Michaels\u5728\u957f\u671f\u9884\u671f\u7684\u94a2\u94c1\u4fa0\u6bd4\u8d5b\u4e2d - \u662f\u4e00\u4e2a60\u5206\u949f\u7684\u8010\u529b\u6218\u4e89\uff0c\u90a3\u91cc\u88ab\u5212\u5206\u6700\u591a\u7684\u7011\u5e03\u7684\u4eba\u4f1a\u8d70\u5f00\u4e16\u754c\u81ea\u7136\u57fa\u91d1\u4f1a\u4e16\u754c\u91cd\u91cf\u7ea7\u51a0\u519b\u3002 \uff06lt; / p\uff06gt;\n    \u6211\u4eec\uff06\uff0339; ve\u6dfb\u52a0\u4e86\u4e00\u4e2a\u65b0\u7684\u9009\u62e9\u53d8\u4f53\uff0c\u4f7f\u5176\u8d85\u7ea7\u6613\u4e8e\u7a81\u51fa\u663e\u793a\uff0c\u4ee5\u7b26\u5408\u60a8\u7684\u8bbe\u8ba1\uff1a\n \uff06lt; p class =\uff06\uff0334;\u9009\u62e9\uff1aBG-PINK-200\uff06\uff0334; \uff06gt;\u7ecf\u8fc7\u51e0\u4e4e\u662f\u4e00\u5c0f\u65f6\u7684\u6218\u4e89\u65f6\u671f\uff0c\u65e2\u4e0d\u662f\u6454\u5012\u7684\u79cb\u5929\uff0c\u54c8\u7279\u9501\u5728\u950b\u5229\u7684\u65f6\u5019\uff0c\u4ed6\u7684\u7b7e\u540d\u63d0\u4ea4\u6301\u6709\u3002\u968f\u7740\u8fc8\u514b\u5c14\u65af\u5728\u75db\u82e6\u4e2d\u5c16\u53eb\u7740\uff0c\u4eba\u7fa4\u80af\u5b9a\u54c8\u7279\u5373\u5c06\u79bb\u5f00WRESTLEMANIA XII\u4f5c\u4e3a\u5267\u7167\u4e16\u754c\u91cd\u91cf\u7ea7\u51a0\u519b\u3002 \uff06lt; / p\uff06gt;\n \u6211\u4eec\u751a\u81f3\u5efa\u7acb\u4e86\u8fd9\u4e2a\u529f\u80fd\uff0c\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u53ef\u4ee5\u5c06\u5176\u5e94\u7528\u4e8e\u7236\u5143\u7d20\u548c\u7ea7\u8054\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u5b9e\u7528\u7a0b\u5e8f\u5e94\u7528\u4e8e\u8eab\u4f53\u6765\u4e3a\u6574\u4e2a\u7ad9\u70b9\u8bbe\u7f6e\u7a81\u51fa\u663e\u793a\u989c\u8272\uff1a\n \uff06lt;\u8eab\u4f53\u7c7b=\uff06\uff0334;\u9009\u62e9\uff1aBG-PINK-200\uff06\uff0334; \uff06gt; \uff06lt;\uff01 -  ...  -  ...  - \uff06gt; \uff06lt; P\uff06GT;\u4f46\u8fc8\u514b\u5c14\u65af\u5e76\u6ca1\u6709\u653e\u5f03 - \u4ed6\u4e3e\u884c\uff0c\u76f4\u5230\u949f\u58f0\u54cd\u8d77\uff0c\u6307\u5b9a\u768460\u5206\u949f\u8d77\u6765\u3002\u54c8\u7279\u8d70\u5f00\u4e86\u5185\u5bb9\uff0c\u8ba4\u4e3a\u6ca1\u6709\u660e\u786e\u7684\u80dc\u5229\u8005\uff0c\u6807\u9898\u662f\u4ed6\u7684\u6301\u6709\u3002\u4ed6\u6ca1\u6709\u51c6\u5907\u597d\u63a5\u4e0b\u6765\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u5f53\u5927\u7329\u7329\u5b63\u98ce\u5ba3\u5e03\u8fd9\u573a\u6bd4\u8d5b\u7a81\u7136\u5728\u7a81\u7136\u7684\u6b7b\u4ea1\u89c4\u5219\u4e0b\u4f1a\u7ee7\u7eed\u3002 \uff06lt; / p\uff06gt; \uff06lt; / body\uff06gt;\n    \u60a8\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684\u6807\u8bb0\u53d8\u4f53\u5728\u5217\u8868\u5f00\u5934\u65f6\u6837\u5f0f\u7b26\u53f7\u6216\u6570\u5b57\uff1a \n\uff06lt; H1\uff06gt; Wrestlemania XII\u7ed3\u679c\uff06lt; / h1\uff06gt; \uff06lt; OL Class =\uff06\uff0334;\u6807\u8bb0\uff1a\u6587\u672c - \u7070\u8272500\u6807\u8bb0\uff1aFont-Medium\uff06\uff0334; \uff06gt; \uff06lt; Li\uff06gt;\u82f1\u56fd\u6597\u725b\u72ac\uff0c\u6b27\u6587\u54c8\u7279\u548c\u74e6\u8fea\u5c14\u51fb\u8d25\u4e86\u827e\u54c8\u8fc8\u5fb7\u7ea6\u7ff0\u900a\uff0c\u6770\u514b\u7f57\u4f2f\u8328\u548c\u6a2a\u662d\u6cb3\uff06lt; / li\uff06gt; \uff06lt; Li\uff06Gt;\u7f57\u8fea\u5439\u7b1b\u8005\u51fb\u8d25\u4e86Goldust\uff06lt; / li\uff06gt; \uff06lt; Li\uff06Gt; Stone Cold Steve Austin\u51fb\u8d25Savio Vega\uff06lt; / Li\uff06Gt; \uff06lt; Li\uff06Gt;\u7ec8\u6781\u6218\u58eb\u51fb\u8d25\u4e86\u730e\u4eba\u8d6b\u5c14\u59c6\u65af\u5229\uff06lt; / li\uff06gt; \uff06lt; Li\uff06Gt;\u627f\u8bfa\u88ab\u51fb\u8d25\u67f4\u6cb9\uff06lt; / li\uff06gt; \uff06lt;\u674e\uff06gt;\u8096\u6069\u8fc8\u514b\u5c14\u65af\u51fb\u8d25\u4e86BRET HART\uff06lt; / Li\uff06gt; \uff06lt; / ol\uff06gt;\n \u50cf\u9009\u62e9\u53d8\u4f53\u4e00\u6837\uff0c\u6211\u4eec\u4ee5\u4e00\u79cd\u4ece\u7236\u6bcd\u7ea7\u8054\u7684\u65b9\u5f0f\u5b9e\u65bd\u4e86\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u4f60\u4e0d\u5fc5\u4e3a\u6bcf\u4e2a\u5217\u8868\u9879\u91cd\u590d\u5b83\u3002\n    TaiLwind CSS V2.2\u6dfb\u52a0\u4e86\u65b0\u7684\u5bf9\u7b49\u4f53\u53d8\u91cf\uff0c\u8be5\u53d8\u4f53\u8868\u73b0\u5f97\u5f88\u591a\u50cf\u7fa4\u4f53 -  *\u53d8\u4f53\uff0c\u4f46\u7528\u4e8e\u9488\u5bf9\u5144\u5f1f\u5143\u7d20\u800c\u4e0d\u662f\u7236\u5143\u7d20\u3002\n \u8fd9\u5bf9\u4e8e\u5728\u9009\u4e2d\u524d\u4e00\u7bc7\u590d\u9009\u6846\u65f6\u6837\u5f0f\u7684\u5185\u5bb9\uff0c\u8fd9\u662f\u6709\u7528\u7684\uff0c\u5982\u6d6e\u52a8\u6807\u7b7e\u7b49\u6d6e\u52a8\u6807\u7b7e\uff0c\u66f4\u591a\uff1a\n  \u5c31\u50cf\u5c0f\u7ec4\u4e00\u6837\u53ef\u4ee5\u4e0e\u4efb\u4f55\u5176\u4ed6\u53d8\u4f53\u7ec4\u5408\uff0c\u540c\u884c\u4e5f\u53ef\u4ee5\uff0c\u6240\u4ee5\u60a8\u6709\u50cf\u5bf9\u65b9\u60ac\u505c\uff0c\u540c\u884c\u5bf9\u7126\uff0c\u5bf9\u7b49\u7981\u7528\u7b49\u7684\u53d8\u4f53\uff0c\u5e76\u5728\u6307\u5c16\u4e0a\u52a0\u8f7d\u66f4\u591a\u3002\n   \u6240\u4ee5\u5c31\u50cf\u5728vanilla css\u4e00\u6837\uff0c\u5b83\u53ea\u9002\u7528\u4e8e\u76ee\u6807\u4ee5\u524d\u7684\u5144\u5f1f\u59d0\u59b9\uff0c\u800c\u4e0d\u662f\u5728DOM\u7a0d\u540e\u51fa\u73b0\u7684\u5144\u5f1f\u59d0\u59b9\u3002\n    \u6211\u4eec\uff06\uff0339;\u5728\u6b64\u7248\u672c\u4e2d\u57fa\u672c\u4e0a\u6bcf\u6b21\u4e22\u5931\u7684\u4f2a\u8bfe\u7a0b\u90fd\u6dfb\u52a0\u4e86Ve ve ve ve ve ve\u3002 \n\u5217\u8868\u4e2d\u7684\u4e2a\u4eba\u6700\u7231\u662f\u5360\u4f4d\u7b26 - \u663e\u793a - \u4e0e\u65b0\u7684\u5144\u5f1f\u9009\u62e9\u5668\u53d8\u4f53\u76f8\u7ed3\u5408\uff0c\u5b83\u53ef\u4ee5\u8fdb\u884c\u6d6e\u52a8\u6807\u7b7e\u7b49\u51b7\u5374\u7684\u4e1c\u897f\uff1a\n     Tailwind CSS V2.2\u4e3a\u60a8\u63d0\u4f9b\u4e86\u65b0\u7684\u5f69\u8272\u900f\u660e\u5ea6\u901f\u5ea6\uff0c\u800c\u4e0d\u662f\u4f7f\u7528BG-Opacity-50\uff0cText-Opacity-50\u6216\u5360\u4f4d\u7b26-Opacity-40\u7b49\u5b9e\u7528\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u65b0\u7684\u5f69\u8272\u900f\u660e\u5ea6\u901f\u5ea6\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u76f4\u63a5\u8c03\u6574\u989c\u8272\u7684alpha\u901a\u9053\u989c\u8272\u5b9e\u7528\u7a0b\u5e8f\u672c\u8eab\uff1a\n  \u8fd9\u610f\u5473\u7740\u60a8\u73b0\u5728\u53ef\u4ee5\u66f4\u6539Tailwind\u7684\u4efb\u4f55\u5730\u65b9\u7684\u900f\u660e\u5ea6\uff0c\u5373\u4f7f\u6211\u4eec\u4ee5\u524d\u6ca1\u6709\u7279\u5b9a\u7684\u900f\u660e\u5ea6\u5b9e\u7528\u7a0b\u5e8f\uff0c\u4f8b\u5982\u5728\u6e10\u53d8\u4e2d\uff0c\u4f8b\u5982\uff1a\n  \u4e0d\u900f\u660e\u5ea6\u503c\u53d6\u81ea\u900f\u6790\u91cf\u8868\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u65b9\u62ec\u53f7\u8868\u793a\u6cd5\u4f7f\u7528\u4efb\u610f\u900f\u660e\u5ea6\u503c\uff1a\n  \u5982\u679c\u6211\u662f\u8bda\u5b9e\u7684\uff0c\u6211\u66f4\u5174\u594b\uff0c\u4ece\u6765\u4e0d\u5fc5\u4e3a\u4f60\u7684\u4eba\u518d\u6b21\u4e3a\u4f60\u7684\u4eba\u521b\u9020\u53e6\u4e00\u4e2a\u6838\u5fc3\u63d2\u4ef6\u800c\u4e0d\u662f\u5b9e\u9645\u4f7f\u7528\u8be5\u529f\u80fd\u3002\u548c\u6211\u771f\u7684\u5f88\u5174\u594b\u8fd9\u4e2a\u529f\u80fd\uff0c\u6240\u4ee5\u8fd9\u8bf4\u4e86\u4e9b\u4ec0\u4e48\u3002\n    \u6211\u4eec\u5728Tailwind\u4e2d\u7684\u6bcf\u4e2a\u6838\u5fc3\u63d2\u4ef6\u90fd\u6d88\u5931\u4e86\uff0c\u5c1d\u8bd5\u52a0\u5165\u6211\u4eec\u53ef\u80fd\u7684\u6700\u7075\u6d3b\u7684\u4efb\u610f\u4ef7\u503c\u652f\u6301\uff0c\u6211\u8ba4\u4e3a\u6211\u4eec\u5728\u8fd9\u4e00\u70b9\u4e0a\u8986\u76d6\u4e86\u51e0\u4e4e\u6240\u6709\u4e1c\u897f\u3002\n \u60a8\u5e94\u8be5\u80fd\u591f\u5728\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u4efb\u610f\u4ef7\u503c\u89c2\uff0c\u53ea\u8981\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u5730\u65b9\uff1a \n\u9664\u4e86\u4f7f\u4efb\u610f\u4ef7\u503c\u652f\u6301\u66f4\u5168\u9762\uff0c\u6211\u4eec\u8fd8\u6dfb\u52a0\u4e86\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\u63d0\u793a\u8bed\u6cd5\u6765\u5904\u7406\u6a21\u7cca\u60c5\u51b5\u3002\u4f8b\u5982\uff0c\u5982\u679c\u60a8\u4f7f\u7528CSS\u53d8\u91cf\u4f5c\u4e3a\u4efb\u610f\u503c\uff0c\u5b83\u5e76\u4e0d\u603b\u662f\u6e05\u9664\u751f\u6210\u7684CSS\u5e94\u8be5\u662f\uff1a\n  \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528\u7c7b\u578b\u540d\u79f0\u524d\u7f00\u4efb\u610f\u503c\u6765\u5411\u5f15\u64ce\u63d0\u4f9b\u63d0\u793a\uff1a\n    \u968f\u7740\u4eba\u4eec\u53d1\u73b0\u65b0\u7684\u8fb9\u7f18\u6848\u4f8b\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5f97\u66f4\u52a0\u56f0\u6270\u8fd9\u4e00\u70b9\uff0c\u4f46\u8fd9\u5e94\u8be5\u8ba9\u4f60\u8d70\u5f97\u592a\u8fdc\u3002\n   \u7531\u4e8eTailwind\u5f15\u5165\u4e86\u8bb8\u591a\u975e\u6807\u51c6\u7684CSS\uff0c\u5982@Tailwind\u548c@apply\uff0c\u56e0\u6b64\u60a8\u901a\u5e38\u53ef\u4ee5\u5728\u5c06\u5176\u4e0ePostcs-\u5d4c\u5957\u6216PostCss-\u5d4c\u5957\u7b49Postcss\u5d4c\u5957\u63d2\u4ef6\u7ec4\u5408\u65f6\u9047\u5230\u5947\u602a\u7684\u8f93\u51fa\u3002\n \u4e3a\u4e86\u7f13\u89e3\u6b64\u5904\u7684\u75bc\u75db\uff0c\u6211\u4eec\u5728\u5c3e\u968f\u5305\u88c5\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u65b0\u7684Postcs\u63d2\u4ef6\uff0c\u8be5\u8f6f\u4ef6\u5305\u5145\u5f53\u73b0\u6709\u5d4c\u5957\u63d2\u4ef6\u548c\u5c3e\u98ce\u672c\u8eab\u4e4b\u95f4\u7684\u8f7b\u91cf\u7ea7\u517c\u5bb9\u6027\u5c42\u3002\n \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u9879\u76ee\u4e2d\u9700\u8981\u5d4c\u5957\u652f\u6301\uff0c\u8bf7\u4f7f\u7528\u6211\u4eec\u7684\u63d2\u4ef6\uff0c\u7136\u540e\u5728Postcss\u63d2\u4ef6\u5217\u8868\u4e2d\u5c06\u5176\u7c98\u5728Tailwind\u4e4b\u524d\uff1a\n  \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f7f\u7528\u5f15\u64ce\u76d6\u4e0b\u7684Postcss-\u5d4c\u5957\uff08\u81ea\u90a3\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u662f\u6211\u4eec\u7528\u6765\u652f\u6301\u5d4c\u5957\u5728Tailwind\u63d2\u4ef6\u4e2d\uff09\uff0c\u4f46\u5982\u679c\u60a8\u559c\u6b22\u4f7f\u7528Postcss\u5d4c\u5957\uff0c\u8bf7\u81f4\u7535\u6211\u4eec\u7684\u63d2\u4ef6\u4f5c\u4e3a\u4e00\u4e2a\u529f\u80fd\u5e76\u901a\u8fc7PostCs-\u5d4c\u5957\u63d2\u4ef6\uff1a \n\u5728\u5f15\u64ce\u76d6\u4e0b\uff0c\u8fd9\u5c06\u4f7f\u7528\u65b0\u7684\u5c4f\u5e55\uff08\uff09\u51fd\u6570\u6211\u4eec\uff06\uff0339; VE\u4ecb\u7ecd\u4e86\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u4ecb\u7ecd\u4ece\u4efb\u4f55\u914d\u7f6e\u7684\u65ad\u70b9\u83b7\u53d6\u6269\u5c55\u7684\u5a92\u4f53\u8868\u8fbe\u5f0f\uff1a  / *\u8f93\u5165* / @Media\u5c4f\u5e55\uff08SM\uff09{/ * ... * /} / *\u8f93\u51fa* / @media\uff08min-widey\uff1a640 px\uff09{/ * ... * /}  \u4f60\u53ef\u80fd\u4f1a\u8d62\u5f97\u81ea\u5df1\uff0c\u5982\u679c\u4f60\uff06\uff0339;\u91cd\u65b0\u5c06\u5c3e\u98ce\u4e0e\u7406\u89e3@Media\u7684\u53e6\u4e00\u4e2a\u5de5\u5177\u6574\u5408\u5230@Media\u4f46\u662f\u6b63\u786e\u5904\u7406@Screen\u7684\u5de5\u5177\uff0c\u5b83\u53ef\u80fd\u4f1a\u6709\u6240\u5e2e\u52a9\u3002  -  @screen sm {/ * ... * /} + @media\u5c4f\u5e55\uff08sm\uff09{/ * ... * /}  \u60a8\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u65b0\u7684Caret-{Color}\u5b9e\u7528\u7a0b\u5e8f\u8bbe\u7f6e\u8868\u5355\u5b57\u6bb5\u4e2d\u5149\u6807\u7684\u989c\u8272\uff1a  \u8fd9\u4e9b\u662f\u53ef\u81ea\u5b9a\u4e49\u7684\uff0c\u4f7f\u7528tailwind.config.js\u6587\u4ef6\u7684\u4e3b\u9898\u90e8\u5206\u4e2d\u7684CaretColor\u952e\u3002  \u6211\u4eec\u4e3a\u80cc\u666f\u539f\u70b9\u5c5e\u6027\u6dfb\u52a0\u4e86\u65b0\u7684\u5b9e\u7528\u7a0b\u5e8f\uff0c\u8ba9\u60a8\u63a7\u5236\u5143\u7d20\uff06\uff0339; storks\u76f8\u5bf9\u4e8e\u5143\u7d20\uff0c\u586b\u5145\u6846\u6216\u5185\u5bb9\u6240\u5b9a\u4f4d\u7684\u4f4d\u7f6e\uff0c\uff06\uff0339; \n\uff06lt; div\u7c7b=\uff06\uff0334; BG-\u6e90 - \u8fb9\u754cP-4\u8fb9\u6846-4\u8fb9\u754c\u865a\u7ebf...\uff06\uff0334;\u98ce\u683c=\uff06\uff0334;\u80cc\u666f - \u56fe\u7247\uff1aURL\uff08...\uff09\uff06\uff0334; \uff06gt;\u80cc\u666f\u662f\u5728\u8fb9\u754c\u4e0b\u5448\u73b0\u7684\u6e32\u67d3\u3002 \uff06lt; div\u7c7b=\uff06\uff0334; BG-\u6e90 - \u586b\u5145P-4\u8fb9\u6846-4\u8fb9\u754c\u5212\u7ebf...\uff06\uff0334;\u98ce\u683c=\uff06\uff0334;\u80cc\u666f - \u56fe\u7247\uff1aURL\uff08...\uff09\uff06\uff0334; \uff06gt;\u80cc\u666f\u662f\u5728\u8fb9\u754c\u5185\u5448\u73b0\uff0c\u800c\u662f\u5728\u4efb\u4f55\u586b\u5145\u7269\u7684\u9876\u90e8\u5448\u73b0\u3002 \uff06lt; div\u7c7b=\uff06\uff0334; BG-\u6e90 - \u5185\u5bb9P-4\u8fb9\u6846-4\u8fb9\u754c\u865a\u7ebf...\uff06\uff0334;\u98ce\u683c=\uff06\uff0334;\u80cc\u666f - \u56fe\u7247\uff1aURL\uff08...\uff09\uff06\uff0334; \uff06gt;\u80cc\u666f\u662f\u5728\u4efb\u4f55\u586b\u5145\u548c\u5185\u5bb9\u4e0b\u5448\u73b0\u5728\u5185\u5bb9\u4e2d\u3002\n     \u53d8\u6362\uff0c\u8fc7\u6ee4\u5668\u548c\u80cc\u666f\u8fc7\u6ee4\u7c7b\u522b\u4e0d\u518d\u9700\u8981\uff06\uff0334;\u542f\u7528\uff06\uff0334;\u4ed6\u4eec\u5404\u81ea\u7684\u53ef\u7ec4\u5408\u5b9e\u7528\u7a0b\u5e8f\u3002\n  \u73b0\u5728\uff0c\u5728\u4f7f\u7528\u4efb\u4f55\u76f8\u5173\u7684\u5b50\u5b9e\u7528\u7a0b\u5e8f\u7684\u4efb\u4f55\u65f6\u95f4\u90fd\u4f1a\u81ea\u52a8\u542f\u7528\u8fd9\u4e9b\u529f\u80fd\u3002\n \u91cd\u8981\u7684\u662f\u8981\u7406\u89e3\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u516c\u7528\u4e8b\u4e1a\u516c\u53f8\u4e0d\u518d\u9700\u8981\uff0c\u6240\u4ee5\u4e0d\u518d\u9700\u8981\uff0c\u4f60\u4e0d\u80fd\u518d\u671f\u671b\u53d8\u6362\u548c\u8fc7\u6ee4\u5668\u662f\uff06\uff0334;\u4f11\u7720\uff06\uff0334;\u9ed8\u8ba4\u3002\u5982\u679c\u4f60\u6709\u6761\u4ef6\u5730\u4f9d\u9760\uff06\uff0334;\u6fc0\u6d3b\uff06\uff0334;\u901a\u8fc7\u5220\u9664\u8fd9\u4e9b\u7c7b\u6765\u8f6c\u6362\u6216\u8fc7\u6ee4\u5668\uff0c\u60a8\u9700\u8981\u786e\u4fdd\u60a8\u81ea\u5df1\u5207\u6362\u5b50\u5b9e\u7528\u7a0b\u5e8f\uff1a\n  \u6211\u4e0d\u671f\u5f85\u8fd9\u5c06\u662f\u5927\u591a\u6570\u4eba\u7684\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\uff0c\u4f46\u5b83\u7684\u6280\u672f\u4e0a\u662f\u4e00\u4e2a\u7a81\u7834\u7684\u53d8\u5316\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\uff06\uff0339; ve\u53ea\u9650\u4e8eJIT\u53d1\u52a8\u673a\u7684\u6539\u5584\u3002\n    \u5728\u8fc7\u53bb\u7684\u56db\u5e74\u91cc\uff0c\u81f3\u5c11\u9700\u8981\u6bcf\u6708\u4e00\u6b21\uff0c\u6211\u5f88\u9ad8\u5174\u5730\u5206\u4eab\u6211\u4eec\uff06\uff0339; ve\u7ec8\u4e8e\u589e\u52a0\u4e86\u6bcf\u4fa7\u8fb9\u754c\u989c\u8272\u7684\u652f\u6301\uff0c\u73b0\u5728\u6211\u4eec\u4e0d\u5fc5\u5192\u6c57\u53d1\u5c55\u6837\u5f0f\u8868\u5927\u5c0f\u3002\n  \u8d70\u51fa\u5e76\u5efa\u7acb\u4e11\u964b\u7684\u7f51\u7ad9\uff01 \uff08\u5f00\u73a9\u7b11\uff0c\u5f00\u73a9\u7b11\uff0c\u6211\u77e5\u9053\u4ed6\u4eec\u6709\u7528\u89e3\u51b3\u4e86\u5730\u72f1\u3002\uff09 \n\u6211\u4eec\u4e3a\u4e00\u7fa4\u91cd\u8981\u7684Puregcss\u4ea7\u54c1\u6dfb\u52a0\u4e86\u4e00\u6d41\u7684\u652f\u6301\uff0c\u5e76\u5728JIT\u53d1\u52a8\u673a\u4e0a\u5de5\u4f5c\uff0c\u8fd9\u4e5f\u662f\u5b83\u5b9e\u9645\u4e0a\u751a\u81f3\u4f7f\u7528PURGECS\u3002\n \u9996\u5148\u662f\u5b89\u5168\u6027\uff0c\u5982\u679c\u60a8\u9700\u8981\u4fdd\u62a4\u7279\u5b9a\u7c7b\u4ece\u751f\u4ea7CSS\u5220\u9664\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u5b83\u4eec\u7528\u4e8e\u6765\u81ea\u6570\u636e\u5e93\u6216\u7c7b\u4f3c\u7684\u5185\u5bb9\uff1a\n // tailwind.config.js\u6a21\u5757\u3002 Exports = {purge\uff1a{content\uff1a[\uff06\uff0339; ./ src / ** / *\u3002html\uff06\uff0339; ]\uff0c\u5b89\u5168\u4e3b\u4e49\u8005\uff1a[\uff06\uff0339; bg-blue-500\uff06\uff0339; \uff0c\uff06\uff0339;\u6587\u672c\u4e2d\u5fc3\uff06\uff0339; \uff0c\uff06\uff0339;\u60ac\u505c\uff1a\u900f\u660e\u5ea6-100\uff06\uff0339; \uff0c// ...\uff06\uff0339; lg\uff1a\u6587\u672c\u53f3\u548c\uff0339; \uff0c]\uff0c}\uff0c// ...}\n \u8bf7\u6ce8\u610f\uff0c\u867d\u7136\u7ecf\u5178\u5f15\u64ce\u5728\u6b64\u5904\u63a5\u53d7\u6b63\u5219\u8868\u8fbe\u5f0f\u65f6\uff0cJIT\u5f15\u64ce\u5c06\u4e0d\u4f1a\u3002\u90a3\u4e2a\uff06\uff0339; s\u56e0\u4e3a\u5f53\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u751f\u6210\u8bfe\u7a0b\u65f6\uff0c\u8bfe\u7a0b\u4e0d\u5b58\u5728\uff0c\u76f4\u5230\u5b83\uff06\uff0339; s\u4f7f\u7528\uff0c\u6240\u4ee5\u6211\u4eec\u6ca1\u6709\u4ec0\u4e48\u53ef\u4ee5\u5339\u914d\u7684\u8868\u8fbe\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\uff06\uff0339;\u91cd\u65b0\u4f7f\u7528\u5373\u65f6\u6a21\u5f0f\uff0c\u8bf7\u786e\u4fdd\u4e3a\u60a8\u63d0\u4f9b\u5b8c\u6574\u7684\u7c7b\u540d\u6765\u83b7\u53d6\u9884\u671f\u7ed3\u679c\u3002\n \u63a5\u4e0b\u6765\u662fTransform\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u626b\u63cf\u6f5c\u5728\u7c7b\u540d\u4e4b\u524d\u8f6c\u6362\u4e0d\u540c\u6587\u4ef6\u6269\u5c55\u4e4b\u524d\u7684\u5185\u5bb9\uff1a\n // tailwind.config.js\u8ba9\u5907\u6ce8=\u9700\u8981\uff08\uff06\uff0339;\u5907\u6ce8\u548c\uff0339;\uff09\u6a21\u5757\u3002 Exports = {purge\uff1a{\u5185\u5bb9\uff1a[\uff06\uff0339; ./ src / ** / *\u3002{html\uff0cmd}\uff06\uff0339; ]\uff0c\u53d8\u6362\uff1a{MD :(\u5185\u5bb9\uff09=\uff06gt; {\u8fd4\u56de\u5907\u6ce8\uff08\uff09\u3002\u8fdb\u7a0b\uff08\u5185\u5bb9\uff09}\uff0c}\uff0c}\uff0c// ...}\n \u5982\u679c\u60a8\u6709\u4ee5\u4ee5\u7f16\u8bd1\u7ed9HTML\u7684\u8bed\u8a00\u7f16\u5199\u7684\u6a21\u677f\uff0c\u5219\u8fd9\u975e\u5e38\u6709\u7528\uff0c\u5982Marrown\u3002 \n\u6700\u540e\uff0c\u6211\u4eec\u6709\u63d0\u53d6\u7269\uff0c\u5b83\u5141\u8bb8\u60a8\u81ea\u5b9a\u4e49Tailwind\u7528\u4e8e\u68c0\u6d4b\u7279\u5b9a\u6587\u4ef6\u7c7b\u578b\u4e2d\u7c7b\u540d\u7684\u903b\u8f91\uff1a\n // tailwind.config.js\u6a21\u5757\u3002 Exports = {purge\uff1a{\u5185\u5bb9\uff1a[\uff06\uff0339; ./ src / ** / *\u3002{html\uff0cmd}\uff06\uff0339; ]\uff0c\u63d0\u53d6\u7269\uff1a{\u54c8\u5df4\u72d7:(\u5185\u5bb9\uff09=\uff06gt; {\u8fd4\u56de/ [^\uff06gt;\uff06\uff0334;\uff06\uff0339;`\\ s] * /\u3002\u5339\u914d\uff08\u5185\u5bb9\uff09}\uff0c}\uff0c}\uff0c// ...}\n \u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u529f\u80fd\uff0c\u5927\u591a\u6570\u7528\u6237\u90fd\u4e0d\u9700\u8981\u5b83\u3002 Tailwind\u4e2d\u7684\u9ed8\u8ba4\u63d0\u53d6\u903b\u8f91\u5bf9\u4e8e\u51e0\u4e4e\u6240\u6709\u9879\u76ee\u90fd\u975e\u5e38\u597d\u3002\n     \u6b64\u7248\u672c\u5bf9\u53ef\u80fd\u5f71\u54cd\u60a8\u7684JIT\u5f15\u64ce\u5f15\u5165\u4e86\u4e00\u4e9b\u5c0f\u578b\u66f4\u6539\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5f03\u7528\uff1a\n  \u5b83\u8fd8\u4e3a\u4e24\u4e2a\u5f15\u64ce\u5f15\u5165\u4e86\u4e24\u200b\u200b\u6b21\u8f83\u5c0f\u7684\u6298\u65e7\uff0c\u73b0\u5728\u662f\u4e0d\u7834\u574f\u7684\uff0c\u4f46\u5c06\u5728V3.0\u4e2d\u7a81\u7834\u53d8\u5316\uff0c\u56e0\u6b64\u60a8\u88ab\u9f13\u52b1\u60a8\u5360\uff1a\n    \u5728Tailwind CSS V2.1\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u81ea\u5df1\u7684\u5355\u72ec\u76d1\u89c6\u8fc7\u7a0b\u8ddf\u8e2a\u5230\u5373\u65f6\u6a21\u5f0f\u7684\u6a21\u677f\u6587\u4ef6\u4e2d\u7684\u66f4\u6539\uff0c\u56e0\u4e3a\u5f53\u4f7f\u7528Watch\u7cfb\u7edf\u5efa\u7acb\u7684Watch\u7cfb\u7edf\u66f4\u6539\u65f6\uff0c\u5927\u591a\u6570\u6784\u5efa\u5de5\u5177\u90fd\u7f3a\u5c11\u6211\u4eec\u9700\u8981\u91cd\u5efaCSS\u7684API\u3002 -in\u5230\u6784\u5efa\u5de5\u5177\u3002\n \u6211\u4eec\u5728\u8fc7\u53bb\u51e0\u4e2a\u6708\u91cc\u52aa\u529b\u6539\u5584\u6d41\u884c\u7684\u6784\u5efa\u5de5\u5177\u5e76\u6539\u53d8\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u4f7f\u7528\u81ea\u5df1\u7684\u624b\u8868\u8fc7\u7a0b\u4f7f\u5f97\u6613\u4e8e\u7ade\u4e89\u7684\u6761\u4ef6\uff0c\u5e76\u4e14\u5f88\u96be\u8c03\u8bd5\u95ee\u9898\u3002 \n\u56e0\u6b64\uff0c\u7531\u4e8eTailwind CSS V2.2\uff0cJIT\u5f15\u64ce\u9ed8\u8ba4\u4f9d\u8d56\u4e8e\u6784\u5efa\u5de5\u5177\u4e2d\u7684\u672c\u673a\u4f9d\u8d56\u6027\u8ddf\u8e2a\uff0c\u5982\u679c\u60a8\u7684\u6784\u5efa\u5de5\u5177\u6ca1\u6709\u652f\u6301\u6211\u4eec\u6240\u9700\u7684API\uff0c\u5219\u53ef\u4ee5\u9009\u62e9\u9009\u62e9\u65e7\u7cfb\u7edf\u3002\n \u5982\u679c\u60a8\uff06\uff0339;\u5728Github\u4e0a\u7d27\u8ddf\u8fd1\u4f3c\u7684\u8155\u8868\u6a21\u5f0f\uff0c\u60a8\u53ef\u80fd\u5df2\u7ecf\u770b\u5230\u6211\u4eec\u5efa\u8bae\u6211\u4eec\u4f7f\u7528tailwind_disable_touch = true\u6807\u5fd7 - \u8be5\u6a21\u5f0f\u73b0\u5728\u662fv2.2\u4e2d\u7684\u7f3a\u7701\u60c5\u51b5\u3002\n     \u5982\u679c\u60a8\u53d1\u73b0\u6784\u5efa\u5de5\u5177ISN\uff06\uff0339; t\u4f46\u662f\u4e0e\u65b0\u7684\u4f9d\u8d56\u8ddf\u8e2a\u7cfb\u7edf\u517c\u5bb9\uff0c\u5219\u60a8\u6709\u4e24\u4e2a\u9009\u9879\uff1a\n \u4f7f\u7528\u65b0\u7684Tailwind CLI\u5355\u72ec\u7f16\u8bd1CSS\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5c06\u4e00\u4e9b\u811a\u672c\u6dfb\u52a0\u5230\u60a8\u7684\u9879\u76ee\u4e2d\uff0c\u4f7f\u7528\u50cfNPM-Run-all-all\u6216\u540c\u65f6\u4f7f\u7528\u5e38\u89c4\u5f00\u53d1\u547d\u4ee4\u7f16\u8bd1CSS\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n // package.json {// ...\uff06\uff0334;\u811a\u672c\uff06\uff0334 ;: {\uff06\uff0334; dev\uff06\uff0334 ;:\uff06\uff0334; npm-run-all -parallel dev\uff1a*\uff06\uff0334; \uff0c\uff06\uff0334; dev\uff1a\u670d\u52a1\u5668\uff06\uff0334 ;:\uff06\uff0334; vite\uff06\uff0334; \uff0c\uff06\uff0334; dev\uff1acss\uff06\uff0334 ;:\uff06\uff0334; tailwindcss -o src / tailwind.css -w\uff06\uff0334; \uff0c\uff06\uff0334; build\uff06\uff0334 ;:\uff06\uff0334; tailwindcss -o src / tailwind.css\uff06amp;\uff06amp; Vite Build\uff06\uff0334; \uff0c\uff06\uff0334;\u670d\u52a1\uff06\uff0334 ;:\uff06\uff0334; vite preview\uff06\uff0334; }\uff0c}\n \u8bbe\u7f6eTailWind_Mode = WANDEL\u4ee5\u9009\u62e9\u65e7\u4f9d\u8d56\u8ddf\u8e2a\u7cfb\u7edf\u3002\u5982\u679c\u4e0a\u4e00\u4e2a\u9ed8\u8ba4\u503c\u4e3a\u60a8\u5de5\u4f5c\uff0c\u5219\u4f1a\u8ba9\u60a8\u7ee7\u7eed\u4f7f\u7528\u8be5\u7cfb\u7edf\uff0c\u76f4\u5230\u6784\u5efa\u5de5\u5177\u4e3a\u60a8\uff06\uff0339;\u91cd\u65b0\u4f7f\u7528\u5df2\u66f4\u65b0\u4ee5\u652f\u6301\u65b0\u7cfb\u7edf\u3002\n // package.json {// ...\u811a\u672c\uff1a{// set tailwind_mode =\u624b\u8868\u5728\u542f\u52a8dev server\uff06\uff0334\u65f6; dev\uff06\uff0334 ;:\uff06\uff0334; tailwind_mode = watch vite\uff06\uff0334; \uff0c//\u4e0d\u8981\u4e3a\u4e00\u4e2aoff\u6784\u5efa\u548c\uff0334\u8bbe\u7f6etailwind_mode; build\uff06\uff0334 ;:\uff06\uff0334; vite build\uff06\uff0334; \uff0c// ...}\uff0c// ...} \n\u8bf7\u6ce8\u610f\uff0c\u8bbe\u7f6etailwind_mode = watch\u5c06\u5728\u540e\u53f0\u542f\u52a8\u4e00\u4e2a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u624b\u8868\u8fc7\u7a0b\uff0c\u56e0\u6b64\u5982\u679c\u5728\u5c1d\u8bd5\u6267\u884c\u4e00\u6b21\u6027\u6784\u5efa\u65f6\u8bbe\u7f6e\u8be5\u73af\u5883\u53d8\u91cf\uff0c\u5b83\u5c06\u770b\u8d77\u6765\u50cf\u6784\u5efa\u6302\u8d77\u3002\u5f53\u60a8\u5b9e\u9645\u8fd0\u884cDev Server / Watch\u6d41\u7a0b\u65f6\uff0c\u60a8\u5e94\u8be5\u53ea\u8bbe\u7f6eTailWind_Mode =\u624b\u8868\u3002\n   \u53d8\u6362\uff0c\u8fc7\u6ee4\u5668\u548c\u80cc\u666f\u6ee4\u6ce2\u5668\u7c7baren\uff06\uff0339; t\uff06\uff0334\u6240\u5fc5\u9700\u7684;\u542f\u7528\uff06\uff0334;\u4f7f\u7528JIT\u5f15\u64ce\u65f6\u7684\u529f\u80fd\uff1a\n  \u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u518d\u671f\u671b\u53d8\u6362\u548c\u8fc7\u6ee4\u5668\u662f\u4f11\u7720\u72b6\u6001\uff0c\u5e76\u4e14\u901a\u8fc7\u6dfb\u52a0\u53d8\u6362\uff0c\u8fc7\u6ee4\u5668\u6216\u80cc\u666f\u8fc7\u6ee4\u5668\u6709\u6761\u4ef6\u5730\u6fc0\u6d3b\u3002\n     \u7528\u4e8e\u6ce8\u518cJIT\u5f15\u64ce\u4e2d\u7684\u6309\u9700\u516c\u7528\u4e8b\u4e1a\u7684PATCHUTIONITIONS\u529f\u80fd\u663e\u7740\u53d8\u5316\u3002\n \u6211\u4eec\u8003\u8651\u8fc7\u8fd9\u4ef6\u79c1\u4eba\u7684API\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u6ca1\u6709\u8bb0\u5f55\u5b83\uff0c\u4f46\u6211\u77e5\u9053\u4e00\u4e9b\u5077\u5077\u6478\u6478\u7684\u4eba\u5728\u90a3\u91cc\u73a9\u5b83\u3002\n \u8981\u4e86\u89e3API\u5982\u4f55\u5728v2.2\u4e2d\u5de5\u4f5c\uff0c\u8bf7\u9605\u8bfb\u89e3\u91ca\u66f4\u6539\u7684\u62c9\u51fa\u8bf7\u6c42\u3002\n   \u5728\u7ecf\u5178\u5f15\u64ce\u4e2d\uff0c\u6240\u6709\u5b9e\u7528\u7a0b\u5e8f\u53d8\u91cf\u90fd\u88ab\u6ce8\u5165@Tailwind\u5b9e\u7528\u7a0b\u5e8f\u6307\u4ee4\u7684\u4e00\u90e8\u5206\u3002 \n\u5728JIT\u53d1\u52a8\u673a\u4e2d\uff0c\u50cf\u60ac\u505c\u548c\u7126\u70b9\u8fd9\u6837\u7684\u53d8\u4f53\u88ab\u6ce8\u5165\u4e0e\u54cd\u5e94\u53d8\u4f53\u76f8\u540c\u7684\u5730\u65b9\uff0c\u4f20\u7edf\u4e0a\u662f\u6837\u5f0f\u8868\u7684\u975e\u5e38\u7ec8\u7ed3\uff0c\u5982\u679c\u60a8\u660e\u786e\u5305\u542b\u5b83\uff0c\u5219\u5728@Tailwind\u5c4f\u5e55\u4e0a\u3002\n \u7531\u4e8eV2.2\uff0c@Tailwind\u5c4f\u5e55\u6307\u4ee4\u5df2\u91cd\u547d\u540d\u4e3a@tailwind\u53d8\u4f53\uff0c\u56e0\u4e3a\u5b83\u73b0\u5728\u662f\u6240\u6709\u53d8\u4f53\u7684\u6ce8\u5c04\u70b9\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u54cd\u5e94\u53d8\u79cd\u3002\n \u6b64\u6307\u4ee4\u662f\u53ef\u9009\u7684\uff08\u5c31\u50cf@Tailwind\u5c4f\u5e55\u59cb\u7ec8\u5448\u73b0\uff09\uff0c\u53ea\u6709\u5e0c\u671b\u5728\u6ce8\u5165\u5b9e\u7528\u7a0b\u5e8f\u53d8\u91cf\u7684\u4f4d\u7f6e\uff0c\u53ea\u6709\u5f88\u6709\u7528\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4eec\u59cb\u7ec8\u5728\u6837\u5f0f\u8868\u7684\u6700\u7ec8\u6ce8\u5165\u3002\n \u5982\u679c\u60a8\u4e4b\u524d\u4f7f\u7528\u8fc7@Tailwind\u5c4f\u5e55\uff0c\u5219\u5e94\u66f4\u65b0\u4ee3\u7801\u4ee5\u4f7f\u7528@tailwind\u53d8\u4f53\uff1a\n @Tailwind\u57fa\u7840; @tailwind\u7ec4\u4ef6; @tailwind\u5b9e\u7528\u7a0b\u5e8f; -  @tailwind\u5c4f\u5e55; + @tailwind\u53d8\u4f53; / *\u4e00\u4e9b\u81ea\u5b9a\u4e49CSS ... * /\n @tailwind\u53d8\u4f53\u529f\u80fd\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u9ad8\u7ea7\u9003\u751f\u8231\u53e3\uff0c\u6211\u4eec\u5efa\u8bae\u9ed8\u8ba4\u7701\u7565\u5b83\u3002\u5982\u679c\u60a8\u7684\u9879\u76ee\u5728\u6ca1\u6709\u5b83\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\uff0c\u90a3\u4e48\u60a8\u5e94\u8be5\u53ea\u4f7f\u7528\u5b83\u975e\u5e38\u7ed3\u675f\u6837\u5f0f\u8868\u7684\u5de5\u4f5c\u3002\n   \u6269\u5c55\u8c03\u8272\u677f\u4e2d\u7684\u95ea\u70c1\u989c\u8272\u5df2\u66f4\u540d\u4e3aSky\u3002\u8fd9\u662f\u6ca1\u6709\u82b1\u54e8\u7684\u540d\u5b57\uff08\u5982\u7956\u6bcd\u7eff\u6216\u73ab\u7470\uff09\u7684\u540d\u5355\u4e2d\u552f\u4e00\u7684\u53e4\u602a\u989c\u8272\uff0c\u6211\u4eec\u624d\u80fd\u518d\u6765\uff06\uff0339;\u5b83\u4e86\u3002 \n\u4f7f\u7528LightBlue\u4ecd\u7136\u53ef\u4ee5\u5de5\u4f5c\uff0c\u76f4\u5230v3.0\uff0c\u4f46\u662f\u4f60\uff06\uff0339; ll\u770b\u5230\u63a7\u5236\u53f0\u4e2d\u7684\u8b66\u544a\uff0c\u5efa\u8bae\u60a8\u4f7f\u7528\u65b0\u540d\u79f0\u3002\n \u8bf7\u6ce8\u610f\uff0c\u5b83\u5b8c\u5168\u53ef\u4ee5\u5728\u6ca1\u6709\u5b9e\u9645\u66f4\u65b0\u60a8\u7684HTML\u7684\u60c5\u51b5\u4e0b\u5f00\u59cb\u4f7f\u7528\u5929\u7a7a\uff0c\u800c\u4e14\u53ea\u5728\u5bfc\u5165\u8fd9\u4e2a\u540d\u79f0\u7684\u60c5\u51b5\u4e0b\uff0c\uff06\uff0339;\n // tailwind.config.js\u8ba9\u989c\u8272=\u9700\u8981\uff08\uff06\uff0339; tailwindcss / colors\uff06\uff0339;\uff09module.exports = {\u4e3b\u9898\uff1a{\u989c\u8272\uff1a{// ...  - \uff06\uff0339;\u6d45\u84dd\u8272\uff06\uff0339; \uff1aColors.Lightlule\uff0c+\uff06\uff0339;\u6d45\u84dd\u8272\uff06\uff0339 ;: colors.sky\uff0c}}}\n   \u51fa\u4e8e\u4e00\u4e9b\u672a\u77e5\u7684\u539f\u56e0\uff0c\u5f53\u6211\u53d1\u5e03Tailwind CSS V2.1\u65f6\uff0c\u6211\u8ba4\u4e3aBlur-0\u662f\u6bd4Blur-None\u66f4\u597d\u7684\u540d\u79f0 - \u5373\u4f7f\u4f7f\u7528\u547d\u540d\u5927\u5c0f\u523b\u5ea6\uff08\u5982\u820d\u5386-MD\u548cShadow-LG\uff09\u7684\u5176\u4ed6\u5b9e\u7528\u7a0b\u5e8f\u4f7f\u7528\u65e0\uff0c\u4e0d\u662f0\u3002\n \u5728v2.2\u4e2d\uff0c\u6211\u4eec\uff06\uff0339; ve\u6dfb\u52a0\u4e86\u6a21\u7cca - \u65e0\u5e76\u505c\u6b62\u8bb0\u5f55\u6a21\u7cca-0\u3002\u5b83\u4ecd\u7136\u6709\u6548\uff0c\u4f46\u5b83\uff06\uff0339; ll\u4ecev3.0\u4e2d\u7684\u9ed8\u8ba4\u4e3b\u9898\u914d\u7f6e\u4e2d\u5220\u9664\u3002\n     \u9664\u4e86\u65b0\u529f\u80fd\uff0c\u6b64\u7248\u672c\u4ecb\u7ecd\uff0c\u6211\u4eec\u8fd8\u4fee\u590d\u4e86\u4e00\u5806\u53ef\u80fd\u4e00\u76f4\u56f0\u6270\u7740\u4f60\u7684\u5c0f\u4e8b\u3002\n \u5728\u8fd9\u91cc\uff06\uff0339;\u6839\u636e\u6700\u540e\u4e00\u4e2a\u7248\u672c\u4ee5\u6765\uff0c\u6211\u4eec\u5236\u4f5c\u7684\u4fee\u590d\u548c\u6539\u8fdb\u7684\u5217\u8868\uff0c\u4e0e\u76f8\u5173\u7684\u62c9\u51fa\u8bf7\u6c42\u7684\u94fe\u63a5\u4e86\u89e3\u66f4\u591a\uff1a \nJIT\uff1a\u5728\u8282\u70b9\u6e29\u5ea6\u76ee\u5f55\u4fdd\u5b58\u5728\u4e0d\u540c\u7684\u9a71\u52a8\u5668\u4e0a\u65f6\u4fee\u590dTEMP\u6587\u4ef6\u5b58\u50a8\uff0c\u800c\u4e0d\u662f\u9879\u76ee\u672c\u8eab\uff08\uff034044\uff09  \u5982\u679c\u4f60\u8bfb\u5230\u8fd9\u4e00\u5207\uff0c\u90a3\u4e48\u8be5\u6b7b\u7684\uff0c\u505a\u5f97\u5f88\u597d\u3002 \u611f\u8c22\u4e00\u5982\u65e2\u5f80\u7684\u662f\u793e\u533a\u7684\u4e00\u90e8\u5206\uff0c\u6211\u5e0c\u671b\u60a8\u53ef\u4ee5\u4e0e\u65b0\u7684\u597d\u5403\u7684\u4e1c\u897f\u73a9\u5f97\u5f00\u5fc3\uff01 ", "note_en": "Six weeks ago I didn&#39;t even have v2.2 on my roadmap and yet somehow here we are today, with one of the biggest Tailwind CSS feature releases of all-time?!\n This release is loaded with  tons of cool new stuff, mostly targeting the new  Just-in-Time mode which unlocks so many cool ideas we probably couldn&#39;t have pulled off if we had to keep being mindful of the CSS file size in development.\n   Note that we&#39;ve had to make a couple small changes to the JIT engine as we&#39;ve added features, fixed bugs, and improved the overall reliability, so make sure to read about the  changes and deprecations when upgrading if you are using just-in-time mode.\n       We&#39;ve rewritten the Tailwind CLI tool from the ground-up with a performance-first mindset, while also adding support for a bunch of new features.\n   No installation or configuration necessary \u2014 simply  npx tailwindcss -o output.css to compile Tailwind from anywhere. You can even enable JIT mode with the  --jit flag and pass in your content files using the  --purge option, all without creating a config file.\n Watch mode \u2014 so you can automatically rebuild your CSS whenever you make any changes.\n JIT performance optimizations \u2014 since our CLI is Tailwind-specific we&#39;ve been able to make tons of optimizations that make it the absolute fastest build tool for compiling your CSS in JIT mode.\n Minification support \u2014 now you can minify your CSS with  cssnano just by adding the  --minify flag.\n PostCSS plugin support \u2014 the new CLI will read and respect any extra plugins you configure using a  postcss.config.js file.\n It&#39;s fully backwards-compatible with the previous CLI, so if you&#39;ve got any scripts set up already you should be able to upgrade to v2.2 without making any changes to your scripts.\n  Note that if you were using the  tailwindcss-cli wrapper package, you can safely switch to  tailwindcss as we&#39;ve managed to resolve the peer-dependency issues that forced us to create the wrapper package in the first place.\n    People have been asking for this for years and it&#39;s finally here! We&#39;ve added first-party support for styling pseudo-elements like  before and  after:\n  We set  content: &#34;&#34; automatically any time you use a  before or  after variant to make sure the elements are rendered, but you can override it using the new  content utilities which have full arbitrary value support:\n    This can be super helpful when your content has spaces in it, since spaces can&#39;t be used in CSS class names.\n    We&#39;ve added variants for the  first-letter and  first-line pseudo-elements, so you can do stuff like drop caps:\n &lt; p  class=&#34; first-letter:text-4xl first-letter:font-bold first-letter:float-left&#34; &gt; The night was March 31, 1996, and it was finally time for Bret Hart to face off against Shawn Michaels in the long anticipated Iron Man match \u2014 a 60 minute war of endurance where the man who scored the most number of falls would walk away as the WWF World Heavyweight Champion. &lt;/ p &gt;\n    We&#39;ve added a new  selection variant that makes it super easy to style highlighted to match your design:\n &lt; p  class=&#34; selection:bg-pink-200&#34; &gt; After nearly a grueling hour of warfare with neither man scoring a fall, Hart locked in the Sharpshooter, his signature submission hold. As Michaels screamed in pain, the crowd were certain that Hart was about to walk away from WrestleMania XII as the still-World Heavyweight Champion. &lt;/ p &gt;\n We&#39;ve even built this feature in such a way that it can be applied to a parent element and cascade down, so you can set a highlight color for your whole site by applying a utility to the body:\n &lt; body  class=&#34; selection:bg-pink-200&#34; &gt;  &lt;!-- ... --&gt;  &lt; p &gt; But Michaels didn&#39;t give up \u2014 he held on until the bell rang and the designated 60 minutes was up. Hart walked away content, thinking that without a clear winner, the title was his to hold. He was not prepared for what would happen next, when Gorilla Monsoon declared the match would continue under sudden death rules.  &lt;/ p &gt; &lt;/ body &gt;\n    You can use the new  marker variant to style the bullets or numbers at the beginning of a list:\n &lt; h1 &gt;WrestleMania XII Results &lt;/ h1 &gt; &lt; ol  class=&#34; marker:text-gray-500 marker:font-medium&#34; &gt;  &lt; li &gt; The British Bulldog, Owen Hart, and Vader defeated Ahmed Johnson, Jake Roberts, and Yokozuna  &lt;/ li &gt;  &lt; li &gt;Roddy Piper defeated Goldust &lt;/ li &gt;  &lt; li &gt;Stone Cold Steve Austin defeated Savio Vega &lt;/ li &gt;  &lt; li &gt;The Ultimate Warrior defeated Hunter Hearst Helmsley &lt;/ li &gt;  &lt; li &gt;The Undertaker defeated Diesel &lt;/ li &gt;  &lt; li &gt;Shawn Michaels defeated Bret Hart &lt;/ li &gt; &lt;/ ol &gt;\n Like the  selection variant, we&#39;ve implemented this in a way that it cascades from the parent, so you don&#39;t have to repeat it for each list item.\n    Tailwind CSS v2.2 adds new  peer-* variants that behave much like the  group-* variants, but for targeting sibling elements instead of parent elements.\n This is useful for things like styling an element when a preceding checkbox is checked, doing things like floating labels, and lots more:\n  Just like  group can be combined with any other variant,  peer can as well, so you have variants like  peer-hover,  peer-focus,  peer-disabled, and loads more at your fingertips.\n   So just like in vanilla CSS, it will only work for targeting  previous siblings, not siblings that appear later in the DOM.\n    We&#39;ve added variants for basically every single missing pseudo-class we could think of in this release:\n  Personal favorite in the list is  placeholder-shown \u2014 when combined with the new sibling selector variants it makes it possible to do cool stuff like floating labels:\n     Instead of using utilities like  bg-opacity-50,  text-opacity-25, or  placeholder-opacity-40, Tailwind CSS v2.2 gives you a new color opacity shorthand you can use to tweak the alpha channel of a color directly in the color utility itself:\n  This means you can now change the opacity of colors anywhere in Tailwind, even where we previously didn\u2019t have specific opacity utilities, like in gradients for example:\n  The opacity values are taken from your  opacity scale, but you can also use arbitrary opacity values using square bracket notation:\n  If I&#39;m being honest, I am more excited about never having to create another core plugin like  placeholderOpacity.js for you people again than I am about actually using the feature. And I&#39;m really excited about the feature, so that says something.\n    We&#39;ve gone over every core plugin in Tailwind to try and add the most flexible arbitrary value support we possibly could, and I think we&#39;ve covered pretty much everything at this point.\n You should be able to whatever arbitrary values you want, just about wherever you want:\n   In addition to making arbitrary value support more comprehensive, we&#39;ve also added a new type-hint syntax to handle ambiguous situations. For example, if you are using a CSS variable as an arbitrary value, it&#39;s not always clear what the generated CSS should be:\n  Now you can provide a hint to the engine by prefixing the arbitrary value with the type name:\n    We&#39;ll probably flesh this out even more over time as people discover new edge cases but this should get you very far.\n   Since Tailwind introduces a lot of non-standard CSS at-rules like  @tailwind and  @apply, you can often run into weird output when combining it with a PostCSS nesting plugin like  postcss-nested or  postcss-nesting.\n To ease the pain here, we&#39;ve included a new PostCSS plugin in the  tailwindcss package that acts as a lightweight compatibility layer between existing nesting plugins and Tailwind itself.\n So if you need nesting support in your project, use our plugin, and stick it before Tailwind in your PostCSS plugin list:\n  By default, it uses  postcss-nested under the hood  (since that&#39;s what we use to support nesting in Tailwind plugins), but if you&#39;d like to use  postcss-nesting instead, just call our plugin as a function and pass through the  postcss-nesting plugin:\n  Under the hood, this uses a new  screen() function we&#39;ve introduced that you can use to get the expanded media expression from any of your configured breakpoints:\n /* Input */ @media screen(sm) {  /* ... */} /* Output */ @media ( min-width :  640 px) {  /* ... */}\n You probably won&#39;t need to use this yourself but it could be helpful if you&#39;re ever integrating Tailwind with another tool that understands  @media but doesn&#39;t handle  @screen properly.\n - @screen sm { /* ... */ }  + @media screen(sm) { /* ... */ }\n    You can now set the color of the cursor in form fields using the new  caret-{color} utilities:\n  These are customizable using the  caretColor key in the  theme section of your  tailwind.config.js file.\n   We&#39;ve added new utilities for the  background-origin property, which let you control where an element&#39;s background is positioned relative to the element&#39;s border, padding box, or content:\n &lt; div  class=&#34; bg-origin-border p-4 border-4 border-dashed ...&#34;  style=&#34; background-image: url(...)&#34; &gt; Background is rendered under the border &lt;/ div &gt; &lt; div  class=&#34; bg-origin-padding p-4 border-4 border-dashed ...&#34;  style=&#34; background-image: url(...)&#34; &gt; Background is rendered within the border but on top of any padding &lt;/ div &gt; &lt; div  class=&#34; bg-origin-content p-4 border-4 border-dashed ...&#34;  style=&#34; background-image: url(...)&#34; &gt; Background is rendered within any padding and under the content &lt;/ div &gt;\n     The  transform,  filter, and  backdrop-filter classes are no longer necessary to &#34;enable&#34; their respective set of composable utilities.\n  Now those features are automatically enabled any time you use any of the relevant sub-utilities.\n It&#39;s important to understand though that because these utilities aren&#39;t needed anymore, you can no longer expect transforms and filters to be &#34;dormant&#34; by default. If you were relying on conditionally &#34;activating&#34; transforms or filters by toggling these classes, you will want to make sure you are toggling the sub-utilities themselves instead:\n  I don&#39;t expect this will be a real problem for most people, but it&#39;s technically a breaking change which is why we&#39;ve limited this improvment to the JIT engine only.\n    Requested at least once a month for the last four years, I&#39;m excited to share that we&#39;ve finally added per-side border color support now that we don&#39;t have to sweat the development stylesheet size.\n  Go forth and build ugly websites!  (Kidding, kidding, I know they are useful settle the hell down.)\n   We&#39;ve added first-class support for a bunch of important PurgeCSS features and made them work in the JIT engine as well, which doesn&#39;t actually even use PurgeCSS.\n First is  safelist, which is super useful if you need to protect specific classes from being removed from your production CSS, perhaps because they are used in content that comes from a database or similar:\n // tailwind.config.js module . exports  =  {  purge:  {  content:  [ &#39;./src/**/*.html&#39; ] ,  safelist:  [  &#39;bg-blue-500&#39; ,  &#39;text-center&#39; ,  &#39;hover:opacity-100&#39; ,  // ...  &#39;lg:text-right&#39; ,  ] ,  } ,  // ... }\n Note that while the classic engine will accept regular expressions here, the JIT engine will not. That&#39;s because when we&#39;re generating classes on demand, the class doesn&#39;t exist until it&#39;s used so we have nothing to match the expression against. So if you&#39;re using just-in-time mode, make sure you&#39;re providing complete class names to get the expected result.\n Next is  transform, which lets you transform content for different file extensions before scanning it for potential class names:\n // tailwind.config.js let  remark  =  require ( &#39;remark&#39; ) module . exports  =  {  purge:  {  content:  [ &#39;./src/**/*.{html,md}&#39; ] ,  transform:  {  md:  ( content )  =&gt;  {  return  remark ( ) . process ( content )  } ,  } ,  } ,  // ... }\n This is really useful if you have templates that are written in a language that compiles to HTML, like Markdown.\n Finally we have  extract, which lets you customize the logic that Tailwind uses to detect class names in specific file types:\n // tailwind.config.js module . exports  =  {  purge:  {  content:  [ &#39;./src/**/*.{html,md}&#39; ] ,  extract:  {  pug:  ( content )  =&gt;  {  return   / [^&lt;&gt;&#34;&#39;` \\s ] * / . match ( content )  } ,  } ,  } ,  // ... }\n This is an advanced feature and most users won\u2019t need it. The default extraction logic in Tailwind works extremely well for almost all projects.\n     This release introduces a few small changes to the JIT engine that might impact you, and one deprecation:\n  It also introduces two minor deprecations for both engines, which are non-breaking for now but will become breaking changes in v3.0 so you are encouraged to account for:\n    In Tailwind CSS v2.1, we tracked changes to your template files in just-in-time mode using our own separate watch process because most build tools were missing the APIs we needed to rebuild your CSS when template files changed using the watch system built-in to the build tool.\n We&#39;ve worked hard to make improvements to popular build tools over the past few months and change this, because using our own watch process makes builds prone to race conditions and very hard to debug problems.\n So as of Tailwind CSS v2.2, the JIT engine relies on native dependency tracking in build tools by default, with an option to opt-in to the old system if your build tool doesn&#39;t support the APIs we need.\n If you&#39;ve followed along closely on GitHub or reported issues with watch mode, you may have seen us suggest using the  TAILWIND_DISABLE_TOUCH=true flag \u2014 that mode is the default now in v2.2.\n     If you discover your build tool isn&#39;t yet compatible with the new dependency tracking system, you have two options:\n Compile your CSS separately using the new Tailwind CLI. You can use packages like  npm-run-all or  concurrently to compile your CSS alongside your usual development command by adding some scripts to your project like this:\n // package.json {  // ...  &#34;scripts&#34;:  {  &#34;dev&#34;:  &#34;npm-run-all --parallel dev:*&#34; ,  &#34;dev:server&#34;:  &#34;vite&#34; ,  &#34;dev:css&#34;:  &#34;tailwindcss -o src/tailwind.css -w&#34; ,  &#34;build&#34;:  &#34;tailwindcss -o src/tailwind.css &amp;&amp; vite build&#34; ,  &#34;serve&#34;:  &#34;vite preview&#34;  } , }\n Set  TAILWIND_MODE=watch to opt-in to the old dependency tracking system. If the previous default was working for you, this will let you just keep using that system until the build tool you&#39;re using has been updated to support the new system.\n // package.json {  // ...  scripts:  {  // Set TAILWIND_MODE=watch when starting your dev server  &#34;dev&#34;:  &#34;TAILWIND_MODE=watch vite&#34; ,  // Do not set TAILWIND_MODE for one-off builds  &#34;build&#34;:  &#34;vite build&#34; ,  // ...  } ,  // ... }\n Note that setting  TAILWIND_MODE=watch will start a long-running watch process in the background, so if you set that environment variable when trying to do a one-off build, it will look like the build is hanging. You should only set  TAILWIND_MODE=watch when you are actually running a dev server/watch process.\n   The  transform,  filter, and  backdrop-filter classes aren&#39;t necessary for &#34;enabling&#34; those features when using the JIT engine:\n  This means you can no longer expect transforms and filters to be dormant by default, and conditionally activated by adding  transform,  filter, or  backdrop-filter.\n     The  matchUtilities function that is used to register on-demand utilities in the JIT engine has changed significantly.\n We consider this private API still which is why we haven&#39;t documented it, but I know a few sneaky people out there are playing with it anyways.\n To understand how the API works in v2.2,  read the pull request that explains the changes.\n   In the classic engine, all utility variants are injected as part of the  @tailwind utilities directive.\n In the JIT engine, variants like  hover and  focus are injected in the same place as your responsive variants, which has traditionally been the very end of the stylesheet, or at  @tailwind screens if you&#39;ve included it explicitly.\n As of v2.2, the  @tailwind screens directive has been renamed to  @tailwind variants, since it is now the injection point for  all variants, not just responsive variants.\n This directive is optional  (just like  @tailwind screens always has been) and is only useful if you want explicit control over where utility variants are injected. By default, they are always injected at the very end of your stylesheet.\n If you were using  @tailwind screens before, you should update your code to use  @tailwind variants:\n @tailwind base; @tailwind components; @tailwind utilities;  - @tailwind screens;  + @tailwind variants; /* Some custom CSS... */\n The  @tailwind variants feature is considered an advanced escape hatch and we recommend omitting it by default. You should only use it if your project won&#39;t work properly without it, which is only ever really true if you are introducing Tailwind to a legacy system with a very fragile existing CSS codebase that has styles that absolutely  need to be at the very end of the stylesheet for things to work.\n   The  lightBlue color in the extended color palette has been renamed to  sky. It was the only oddball color in the list without a fancy name (like  emerald or  rose) and we just couldn&#39;t stomach it anymore.\n Using  lightBlue will still work until v3.0, but you&#39;ll see a warning in the console suggesting you use the new name.\n Note that it&#39;s totally okay to start using  sky without actually updating your HTML, it&#39;s only at the place of import that the name matters:\n // tailwind.config.js let colors = require(&#39;tailwindcss/colors&#39;) module.exports = { theme: { colors: { // ...  - &#39;light-blue&#39;: colors.lightBlue,  + &#39;light-blue&#39;: colors.sky, } } }\n   For some unknown reason when I released Tailwind CSS v2.1 I thought  blur-0 was a better name than  blur-none, even though every other utility that uses a named size scale (like  rounded-md and  shadow-lg) use  none, not  0.\n In v2.2, we&#39;ve added  blur-none and stopped documenting  blur-0. It still works, but it&#39;ll be removed from the default theme configuration in v3.0.\n     Alongside the new features this release introduces, we&#39;ve also fixed a bunch of little things that might have been bugging you.\n Here&#39;s a list of the fixes and improvements we&#39;ve made since the last release, with links to the relevant pull requests to learn more:\n JIT: Fix temp file storage when node temp directories are kept on a different drive than the project itself ( #4044)\n  If you read this whole thing well damn, well done. Thanks as always for being part of the community and I hope you have fun with the new goodies!", "posttime": "2021-06-18 03:04:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "css", "title": "Tailewind CSS V2.2. ", "title_en": "Tailwind CSS v2.2", "transed": 1, "url": "https://github.com/tailwindlabs/tailwindcss/releases/tag/v2.2.0", "via": "", "real_tags": ["css"]}, {"category": "", "categoryclass": "", "imagename": "4befe7b896f53fb16883a6b337a09fd3.jpeg", "infoid": 1066531, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5458\u5de5\u6d41\u5931\u5982\u6b64\u4e4b\u9ad8\uff0c\u636e\u62a5\u9053\uff0c\u4e00\u4e9b\u4e9a\u9a6c\u900a\u6267\u884c\u59d4\u5458\u4f1a\u62c5\u5fc3\u4eba\u4eec\u7f3a\u4e4f\u4eba\u3002\n \u8be5\u516c\u53f8\u4e00\u76f4\u5728\u62db\u8058\u72c2\u6b22\uff0c\u5728\u5927\u6d41\u884c\u671f\u95f4\u8ddf\u4e0a\u8d2d\u7269\u589e\u52a0\u3002\n \u6839\u636e\u7ebd\u7ea6\u65f6\u62a5\u4e8e\u5468\u4e8c\u53d1\u8868\u7684\u5de8\u5927\u62a5\u544a\uff0c\u4e9a\u9a6c\u900a\u5728\u5176\u4ed3\u5e93\u4e2d\u62db\u8058\u4e86\u6570\u5341\u4e07\u540d\u5458\u5de5\u7684\u4ed3\u5e93\uff0c\u4f46\u5458\u5de5\u51e0\u4e4e\u53ef\u4ee5\u50cf\u96c7\u7528\u7684\u5de8\u989d\u62a5\u544a\u4e00\u6837\u5feb\u3002\n \u8d85\u8fc7350,000\u540d\u5de5\u4eba\u4e9a\u9a6c\u900a\u7684\u8bb8\u591a\u4eba\u4ece7\u6708\u523010\u6708\u8058\u7528\u4e86\u516c\u53f8\uff06\uff0334;\u53ea\u6709\u51e0\u5929\u6216\u51e0\u5468\uff0c\uff06\uff0334;\u62a5\u544a\u8bf4\u3002\n \u6bcf\u5c0f\u65f6\u5458\u5de5\u6bcf\u5e74\u7684\u8425\u4e1a\u989d\u7387\u7ea6\u4e3a150\uff05\uff0c\u6570\u636e\u5ba1\u67e5\u6240\u793a\u7684\u6570\u636e\u3002\u8be5\u62a5\u544a\u79f0\uff0c\u8fd9\u5bfc\u81f4\u4e00\u4e9b\u4e9a\u9a6c\u900a\u9ad8\u7ba1\u62c5\u5fc3\u62c5\u5fc3\u5728\u7f8e\u56fd\u62c5\u4efb\u5360\u7528\u7684\u5458\u5de5\u3002\n \u4e9a\u9a6c\u900a\u4e8e2020\u5e74\u57282020\u5e74\u5ef6\u4f38\u5174\u594b\uff0c\u56e0\u4e3a\u5b83\u8bd5\u56fe\u5728Coronavirus\u9501\u5b9a\u671f\u95f4\u4fdd\u6301\u5de8\u5927\u7684\u5c16\u5cf0\u3002\u7531\u4e8e\u7f8e\u56fd\u4eba\u8d8a\u6765\u8d8a\u8f6c\u5411\u4e9a\u9a6c\u900a\uff0c\u5982\u6d17\u6f31\u7528\u54c1\u548c\u6742\u8d27\u7b49\u4e1c\u897f\uff0c\u516c\u53f8\u53cd\u590d\u5439\u6367\u62db\u8058\u4e13\u4e1a\u63a8\u52a8\u3002\n \u52302021\u5e745\u6708\uff0c\u4e9a\u9a6c\u900a\u751a\u81f3\u4e3a\u65b0\u5458\u5de5\u63d0\u4f9b\u4e861,000\u7f8e\u5143\u7684\u7b7e\u7ea6\u5956\u91d1 - \u90e8\u5206\u662f\u96c7\u7528\u96c7\u4e3b\u9762\u4e34\u5404\u79cd\u884c\u4e1a\u7684\u62db\u8058\u95ee\u9898\u7684\u75c7\u72b6\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u4e9a\u9a6c\u900a\u7684\u6f5c\u5728\u8425\u4e1a\u989d\u663e\u9ad8\u4f4d\u3002 \n\u4e00\u4f4d\u524d\u4e9a\u9a6c\u900a\u7ecf\u7406\u76d1\u7763\u4eba\u529b\u8d44\u6e90\u7684\u52aa\u529b\uff0c\u4e13\u6ce8\u4e8e\u4ed3\u5e93\u5de5\u4eba\u5c06\u4e9a\u9a6c\u900a\u4ed3\u5e93\u4e2d\u7684\u5de5\u4eba\u6d41\u5931\u4e0e\u5316\u77f3\u71c3\u6599\u7684\u4f7f\u7528\u60c5\u51b5\u76f8\u6bd4\u3002 \uff06\uff0334;\u6211\u4eec\u7ee7\u7eed\u4f7f\u7528\u5b83\u4eec\uff0c\u5373\u4f7f\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6162\u6162\u70f9\u996a\u81ea\u5df1\uff0c\uff06\uff0334; \u4ed6\u544a\u8bc9\u65f6\u4ee3\u3002  \u6709\u4e00\u4e2a\u63d0\u793a\uff1f \u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\uff08bgilbert@insider.com\uff09\u6216Twitter DM\uff08@realbengilbert\uff09\u8054\u7cfbInsider\u9ad8\u7ea7\u8bb0\u8005Ben Gilbert\u3002 \u6211\u4eec\u53ef\u4ee5\u8ba9\u6765\u6e90\u533f\u540d\u3002 \u4f7f\u7528\u975e\u5de5\u4f5c\u8bbe\u5907\u4f38\u51fa\u3002 \u8bf7\u4ec5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u6295\u7403\u3002 ", "note_en": "Employee churn is so high that some Amazon execs are reportedly worried about running out of people.\n The company has been on a hiring spree to keep up with increased shopping during the pandemic.\n Amazon has been hiring hundreds of thousands of workers for roles in its warehouses, which it calls fulfillment centers, but those employees have been quitting almost as fast as they can be hired,  according to a huge report from The New York Times published on Tuesday.\n Many of the over 350,000 workers Amazon hired from July to October stayed with the company &#34;just days or weeks,&#34; the report said.\n Hourly employees had a turnover rate of about 150% every year, data reviewed by The Times indicated. That led some Amazon executives to worry about running out of hirable employees in the US, the report said.\n Amazon went on an  extended hiring spree in 2020 as it attempted to keep up with a massive spike in demand during coronavirus lockdowns. As Americans  increasingly turned to Amazon for things like toiletries and groceries, the company repeatedly touted major hiring pushes.\n By May 2021, Amazon was even  offering $1,000 signing bonuses to new employees - partially a symptom of  hiring issues that employers are facing in a variety of industries, and potentially of Amazon&#39;s remarkably high turnover rate.\n One former Amazon manager who oversaw human-resources efforts focused on warehouse workers compared the situation with worker churn at Amazon warehouses to the use of fossil fuels. &#34;We keep using them, even though we know we&#39;re slowly cooking ourselves,&#34; he told The Times.\n  Got a tip? Contact Insider senior correspondent Ben Gilbert via email ( bgilbert@insider.com), or Twitter DM ( @realbengilbert). We can keep sources anonymous. Use a nonwork device to reach out. PR pitches by email only, please.", "posttime": "2021-06-18 03:04:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e9a\u9a6c\u900a,amazon,\u71c3\u70e7,burns,\u62db\u8058", "title": "\u4e9a\u9a6c\u900a\u5982\u6b64\u8fc5\u901f\u5730\u901a\u8fc7\u5de5\u4eba\u71c3\u70e7\uff0c\u4ed6\u4eec\u4f1a\u7528\u5c3d\u4eba\u4eec\u96c7\u7528 ", "title_en": "Amazon burns through workers so quickly, they'll run out of people to employ", "transed": 1, "url": "https://www.yahoo.com/news/amazon-burns-workers-quickly-executives-133348404.html", "via": "", "real_tags": ["\u4e9a\u9a6c\u900a", "amazon", "\u71c3\u70e7", "burns", "\u62db\u8058"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066530, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8bf8\u5982\u81ea\u52a8\u6276\u68af\u7684\u53d7\u9650\u5236\u7684\u7a7a\u95f4\u53ef\u4ee5\u8212\u9002\u5730\u6301\u6709\u6563\u6b65\u884c\u4eba\u7684\u5e38\u8bbe\u884c\u4eba\u7684\u4e24\u500d\u4ee5\u4e0a\u3002\u6240\u4ee5\u505c\u6b62\u8d70\u4ed6\u4eec\u3002 https://t.co/7dey11cxvp.\n - \u77f3\u82f1\uff08@QZ\uff092019\u5e7410\u670830\u65e5\n  \u6211\u7684\u7b2c\u4e00\u6b21\u53cd\u5e94\u662f\u201c\u90a3\u662f\u611a\u8822\u7684 - \u9ad8\u901f\u516c\u8def\u53ef\u4ee5\u572820mph\u4e0a\u6301\u6709\u66f4\u591a\u7684\u6c7d\u8f66\u8d85\u8fc765mph;\u8fd9\u662f\u91cd\u8981\u7684\u4e8b\u60c5\u3002\u201c\u7136\u540e\u6211\u8bfb\u4e86\u8fd9\u7bc7\u6587\u7ae0\u5e76\u610f\u8bc6\u5230\u6458\u8981\u662f\u611a\u8822\u7684\u3002\u5b9e\u9645\u7684\u7814\u7a76\u4e0d\u662f\uff0c\u5e76\u8bf4\u660e\u4e86\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u6982\u5ff5\uff0c\u56e0\u4e3a\u6211\u4f1a\u89e3\u91ca\uff1a\n \u8bb8\u591a\u7cfb\u7edf\u7684\u91cd\u8981\u6307\u6807\u662f\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u3002\u541e\u5410\u91cf\u662f\u6bcf\u5355\u4f4d\u65f6\u95f4\u5b8c\u6210\u591a\u5c11\u5de5\u4f5c\uff08\u56e0\u6b64\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4eba\u4eec\u6bcf\u5206\u949f\u8fd0\u8f93\uff09\uff0c\u5e76\u4e14\u5ef6\u8fdf\u662f\u6bcf\u4e2a\u5de5\u4f5c\u4f5c\u54c1\u6240\u82b1\u8d39\u7684\u65f6\u95f4\uff08\u6bcf\u4e2a\u4eba\u5728\u81ea\u52a8\u6276\u68af\u4e0a\u6709\u591a\u957f\uff09\u3002\n \u8fd9\u4e24\u4e2a\u6982\u5ff5\u662f\u76f8\u5173\u7684\uff0c\u5f88\u5c11\u7684\u6cd5\u5f8b\u7ed9\u51fa\u4e86\u6700\u7b80\u5355\u7684\u5173\u7cfb\u3002\u5b83\u8bf4\uff0c\u81ea\u52a8\u6276\u68af\u7684\u4eba\u6570\u7b49\u4e8e\u4eba\u4eec\u4e58\u4ee5\u5e73\u5747\u65f6\u95f4\u7684\u4eba\u4eec\u5728\u81ea\u52a8\u6276\u68af\u4e0a\u82b1\u8d39\u7684\u5e73\u5747\u65f6\u95f4\u3002\n \uff08\u8bf7\u6ce8\u610f\uff0c\u4e0a\u53f0\u7684\u901f\u5ea6\u548c\u4e0b\u964d\u7684\u901f\u5ea6\u66f4\u597d\u5730\u76f8\u540c\uff0c\u6216\u8005\u6709\u4e00\u4e9b\u975e\u5e38\u5947\u602a\u7684\u4e8b\u60c5\u3002\uff09\n \u5c0f\u7684\u6cd5\u5f8b\u901a\u5e38\u88ab\u5199\u4e3al =\u03bbw\uff0c\u6240\u4ee5\u5728\u6211\u4eec\u7684\u60c5\u51b5\u4e0b\uff0cl\u662f\u81ea\u52a8\u6276\u68af\u4e0a\u7684\u4eba\u6570\uff0c\u03bb\u662f\u6bcf\u5206\u949f\u7684\u4eba\u4eec\u643a\u5e26\uff0c\u800cW\u662f\u4e58\u5750\u81ea\u52a8\u6276\u68af\u7684\u65f6\u95f4\u3002\u4e09\u4ef6\u4e8b\u4e2d\uff0c\u6211\u4eec\u5173\u5fc3\u7684\u552f\u4e00\u7684\u4e8b\u60c5\u662f......\u4ec0\u4e48\uff1f ...... \n\u5f53\u7136\u6211\u4eec\u5173\u5fc3\u03bb\uff0c\u5bf9\u5417\uff1f\u6211\u7684\u610f\u601d\u662f\uff0c\u5982\u679c\u706b\u8f66\u6bcf4\u5206\u949f\u4e0b\u964d200\u4eba\uff0c\u6211\u4eec\u6700\u597d\u80fd\u591f\u5728\u81ea\u52a8\u6276\u68af\u4e0a\u6bcf\u5206\u949f\u79fb\u52a8\u81f3\u5c1150\u4eba\uff0c\u5427\uff1f\u5bf9\uff0c\u4f46\u662f\u3002\u4f46\u662f\uff0c\u4f60\u7684\u5ba2\u6237\u5173\u5fc3\u7684\u662fW  - \u4e3a\u6574\u4e2a\u7cfb\u7edf\u3002\n \u4f5c\u4e3a\u706b\u8f66\u9a91\u624b\uff0c\u6211\u53ea\u5173\u5fc3\u6211\u3002\u5f53\u6211\u5728\u8868\u9762\u79bb\u5f00\u706b\u8f66\u65f6\u9700\u8981\u591a\u957f\u65f6\u95f4\uff1f\u56e0\u6b64\uff0c\u81ea\u52a8\u6276\u68af\uff08\u03bb\uff09\u7684\u541e\u5410\u91cf\u662f\u4e8b\u9879\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5f71\u54cd\u6bcf\u4e2a\u4eba\u7684\u603b\u7cfb\u7edf\u3002\n \u5982\u679c\u81ea\u52a8\u6276\u68af\u53ea\u80fd\u6bcf\u5206\u949f\u79fb\u52a850\u4eba\uff0c\u90a3\u4e48\u5b83\u5c06\u9700\u89814\u5206\u949f\u624d\u80fd\u6e05\u9664\u6bcf\u4e2a\u706b\u8f66\u7684\u8d1f\u8377\u3002\u8fd9\u610f\u5473\u7740\u6709\u4eba\u7b49\u5f854\u5206\u949f\uff0c\u00bd\u4f60\u7684\u4e58\u5ba2\u81f3\u5c11\u7b49\u5f852.\u4f46\u662f\u5982\u679c\u5b83\u53ef\u4ee5\u79fb\u52a8100\uff0c\u90a3\u4e48\u6700\u957f\u7684\u7b49\u5f85\u662f2\u548c\u4e00\u534a\u662f\u572860\u79d2\u5185\u5b8c\u6210\u7684\u3002\n \u8fd9\u79cd\u5173\u7cfb\u4e0e\u541e\u5410\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u975e\u5e38\u91cd\u8981\u3002\u5f53\u6211\u5728\u4ecb\u7ecd\u4e2d\u5199\u5165\u8fd9\u4e2a\u7ebf\u7a0b\u65f6\uff0c\u201c\u8fd9\u662f\u541e\u5410\u91cf\u7684\u541e\u5410\u91cf\u201d\uff0c\u6211\u771f\u6b63\u7684\u610f\u601d\u662f\u5b83\u7684\u91cd\u8981\u6027\u8d85\u8fc7\u4e86\u5f71\u54cd\u5ef6\u8fdf\u7684\u80fd\u529b\u3002\n \u4f46\u662f\u66f4\u591a\u7684\u541e\u5410\u91cf\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u964d\u4f4e\u5ef6\u8fdf\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u6211\u6709\u4e00\u4e2a200\u4eba\u7684\u7535\u68af\uff0c\u4ece\u5e73\u53f0\u5230\u8fbe\u66f2\u9762\uff0c\u800c\u6211\u4eec\u7684\u81ea\u52a8\u6276\u68af\u6bcf\u5206\u949f\u79fb\u52a850\u4eba\u3002\n \u03bb\u5bf9\u4e8e\u4e24\u4e2a\u7cfb\u7edf\u76f8\u540c - \u6bcf\u5206\u949f50\u4eba\u3002\u4f46\u81ea\u52a8\u6276\u68af\u4e25\u683c\u66f4\u597d\u3002\u5bf9\u4e8e\u7535\u68af\uff0c\u6bcf\u4e2a\u4eba\u9700\u89812\u5206\u949f\u624d\u80fd\u5230\u8fbe\u8868\u9762\u3002\u5bf9\u4e8e\u81ea\u52a8\u6276\u68af\uff0c50\u4eba\u9700\u898160\u79d2\u6216\u66f4\u77ed\u65f6\u95f4\uff0c\u53ea\u6709\u6700\u7cdf\u7cd5\u7684\u8f66\u624b\u9700\u89812\u5206\u949f\u3002\n \u6b64\u5916\uff0c\u5982\u679c\u964d\u4f4eW.\u5982\u679c\u6211\u7684\u7535\u68af\u53ef\u4ee5\u643a\u5e26800\u540d\u4e58\u5ba2\uff0c\u90a3\u4e48\u5b83\u7684\u541e\u5410\u91cf\u6bd4\u6211\u7684\u81ea\u52a8\u6276\u68af\u66f4\u9ad8\uff0c\u800c\u4e14\u989d\u5916\u7684\u5bb9\u91cf\u5b9e\u9645\u4e0a\u6ca1\u6709\u5bf9\u7cfb\u7edf\u7684\u4efb\u4f55\u597d\u5904\u3002 \nStuart Cheshire\u5199\u4e86\u4e00\u4e2a\u5486\u54ee\u7684\u9898\u4e3a\u201c\u8fd9\u662f\u5ef6\u8fdf\uff0c\u611a\u8822\u7684\u201d\uff0c\u751a\u81f3\u8fdb\u5165\u8fd9\u79cd\u5173\u7cfb\u3002\u5bf9\u4e8e\u4efb\u4f55\u4e3a\u4eba\u7c7b\u63d0\u4f9b\u7684\u8ba1\u7b97\u673a\u7cfb\u7edf\u800c\u8a00\uff0c\u5b83\u975e\u5e38\u91cd\u8981\u3002\u901a\u8fc7\u524a\u51cf\u4e00\u534a\u800c\u4e0d\u662f\u901a\u8fc7\u589e\u52a0L\u6765\u66f4\u597d\u5730\u52a0\u500d\u03bb\u3002\n \u597d\u7684\u3002\u56de\u5230\u6587\u7ae0\u3002\u5934\u6761\u65b0\u95fb\u662f\u201c\u8d70\u8def\u4e0a\u7684\u4eba\uff0c\u5b9e\u9645\u4e0a\u8d70\u5728\u81ea\u52a8\u6276\u68af\u4e0a\uff0c\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u653e\u6162\u4e86\u201d\uff0c\u7136\u540e\u63a8\u6587\u8c08\u5230\u4e86\u4e00\u4e2a\u62b1\u7740\u66f4\u591a\u4eba\u7684\u81ea\u52a8\u6276\u68af\uff0c\u5982\u679c\u4ed6\u4eec\u90fd\u7ad9\u7740\u3002\u4f60\u53ef\u80fd\u4f1a\u5728\u8fd9\u4e2a\u63a8\u7406\u4e2d\u770b\u5230\u7f3a\u9677\u3002\n \u5206\u6790\uff0c\u6211\u4eec\u9700\u8981\u6709\u70b9\u5c0f\u5fc3\u3002\u8fd9\u91cc\u771f\u7684\u6709\u4e24\u4e2a\u7cfb\u7edf\u3002\u9a91\u624b\u5173\u5fc3\u6574\u4e2aW\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u89e3\u5230\u7b49\u5f85\u5e73\u53f0\u4e0a\u7684\u65f6\u95f4\u6765\u83b7\u5f97\u81ea\u52a8\u6276\u68af\uff08W\u209a\uff09\u52a0\u4e0a\u9a91\u81ea\u52a8\u6276\u68af\u7684\u65f6\u95f4\uff08W\u2091\uff09\u3002\n \u5f71\u54cdW\u209a\u7684\u552f\u4e00\u4e8b\u60c5\u662f\u03bb\u2091\uff08\u81ea\u52a8\u6276\u68af\u7684\u541e\u5410\u91cf\uff09\u3002\u4eba\u4eec\u6bcf\u5206\u949f\u53ef\u4ee5\u83b7\u5f97\u81ea\u52a8\u6276\u68af\uff0c\u4eba\u4eec\u5fc5\u987b\u5728\u5e73\u53f0\u4e0a\u7b49\u5f85\u7684\u65f6\u95f4\u8d8a\u5c11\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u66f4\u9ad8\u7684\u03bb\u662f\u660e\u786e\u7684\u3002\n \u56de\u60f3\u4e00\u4e0b\u5c0f\u7684\u6cd5\u5f8b\u662fl =\u03bbw\u3002\u91cd\u65b0\u6392\u5217\u672f\u8bed\uff0c\u6211\u4eec\u770b\u5230\u03bb= l / w\u3002\u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u52a0\u500d\u6bcf\u4e2a\u81ea\u52a8\u6276\u68af\u7684\u627f\u8f7d\u80fd\u529b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u83b7\u5f97\u66f4\u591a\u4eba\uff0c\u8fd9\u5c06\u662fW\u209a\u7684\u80dc\u5229\u3002\u6848\u4ef6\u5173\u95ed\uff0c\u53f3\uff1f\u597d\u5427\uff0c\u5982\u679c\u662f\u8fd9\u6837\uff0c\u6211\u4e0d\u4f1a\u5199\u8fd9\u4e2a\uff01 \ud83d\ude04\n \u5206\u6790\u4e2d\u7684\u7f3a\u9677\u662f\u6211\u4eec\u5ffd\u7565\u4e86\u5bf9W\u2091\u7684\u5f71\u54cd\u3002\u5982\u679c\u4eba\u4eec\u81f3\u5c11\u4ece\u81ea\u52a8\u6276\u68af\u79fb\u52a8\uff08\u5408\u7406\u7684\u5047\u8bbe\uff09\u81f3\u5c11\u548c\u81ea\u52a8\u6276\u68af\u4e00\u6837\u5feb\uff0c\u90a3\u4e48\u5728\u884c\u8d70\u65f6\uff0c\u81ea\u52a8\u6276\u68af\u4e0a\u7684\u603b\u65f6\u95f4\u5c31\u662f\u7ad9\u7acb\u65f6\u7684\u4e00\u534a\u3002\n \u770b\u7740\u8fd9\u4e24\u4e2a\u672f\u8bed\u5728\u4e00\u8d77\uff0c\u4f60\u770b\uff0c\u5982\u679c\u4eba\u4eec\u7ad9\u5728vs\u8d70\u8def\uff0cl\u53cc\u6253\uff08\u597d\uff01\uff09\uff0c\u4f46\u662fw\u4e5f\u662f\u5982\u6b64\uff08\u574f\uff01\uff09\u3002\u4e8b\u5b9e\u4e0a\uff0c\u03bb\u2091\u5c06\u4fdd\u6301\u5927\u81f4\u76f8\u540c\uff0c\u610f\u601d\u662fw\u209a\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46W\u2091\u4f1a\u52a0\u500d\u3002\u603b\u7684\u6765\u8bf4\uff0c\u7ad9\u7acb\u4f1a\u589e\u52a0\u603b\u7b49\u5f85\u65f6\u95f4\uff01 \n\u8bf7\u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u901a\u8fc7\u52a0\u500d\u81ea\u52a8\u6276\u68af\u7684\u6570\u91cf\u589e\u52a0\u5bb9\u91cf\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u7eaf\u7cb9\u7684\u80dc\u5229\uff0c\u56e0\u4e3a\u5b83\u4f1a\u589e\u52a0\u03bb\u2091\u800c\u4e0d\u4f1a\u5f71\u54cdw\u2091\u3002\u7cfb\u7edf\u4e2d\u7684\u6574\u4f53\u7b49\u5f85\u65f6\u95f4\u5c06\u4e0b\u964d\u3002\n \u4f46\u662f\uff0c\u867d\u7136\u5934\u6761\u65b0\u95fb\u8bef\u5bfc\uff0c\u4f46\u6587\u7ae0\u4e2d\u5f15\u7528\u7684\u7814\u7a76\u5f88\u597d\u3002\u4ed6\u4eec\u5b9e\u9645\u4e0a\u6d4b\u91cf\u4e86\u603b\uff0c\u5f53\u4eba\u4eec\u624d\u7ad9\u7acb\u65f6\uff0c\u5b83\u4f1a\u4e0b\u964d\u3002\u8fd9\u662f\u4e3a\u4ec0\u4e48\uff1f\n \u63a8\u6587\u4e2d\u7684\u56fe\u7247\u5305\u542b\u4e00\u4e2a\u7ebf\u7d22\u3002\u6bd4\u8f83\u4e0d\u662f\u6bcf\u4e2a\u4eba\u8d70\u8def\u548c\u6bcf\u4e2a\u4eba\u90fd\u7ad9\u7740\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u884c\u8d70\u65f6\uff0c\u4eba\u4eec\u9700\u8981\u7684\u5206\u79bb\u91cf\u662f\u4e00\u4e2a\u5b8c\u5168\u7684\u7ea2\u9cb1\u9c7c\u3002\u95ee\u9898\u4e0d\u4e0e\u6c83\u514b\u65af\uff0c\u4f46\u5177\u6709\u6587\u5316\u89c4\u8303\u3002\n \u95ee\u9898\u662f\uff0c\u81ea\u52a8\u6276\u68af\u5c06\uff08\u6309\u5e38\u91cf\uff09\u5212\u5206\u4e3a\u4e00\u534a\uff0c\u4ee5\u4fbf\u6b65\u884c\uff0c\u4e00\u534a\u7528\u4e8e\u7ad9\u7acb\u3002\u5982\u679c\u6b65\u884c\u534a\u5b8c\u5168\u88ab\u5229\u7528\uff0c\u6b63\u5982\u6211\u4eec\u4e0a\u9762\u6240\u770b\u5230\u7684\u90a3\u6837\uff0c\u5b83\u5c06\u662f\u7eaf\u7cb9\u7684\u826f\u54c1 - \u76f8\u540c\u7684\u541e\u5410\u91cf\uff0c\u6b65\u884c\u8005\u7684\u5ef6\u8fdf\u964d\u4f4e\u3002\n \u4f46\u6b65\u884c\u7684\u4e00\u534a\u6ca1\u6709\u5145\u5206\u5229\u7528\uff0c\u56e0\u4e3a\u4e0d\u523050\uff05\u7684\u4eba\u60f3\u8981\u8d70\u8def\u3002\u6240\u4ee5\u73b0\u5728\u81ea\u52a8\u6276\u68af\u541e\u5410\u91cf\u4e0b\u964d\uff0c\u8fd9\u610f\u5473\u7740\u5e73\u53f0\u7b49\u5f85\u65f6\u95f4\u4e0a\u5347\uff0c\u9a91\u624b\u4e0d\u5f00\u5fc3\u3002\u6216\u8005\u81f3\u5c11\u559c\u6b22\u9a91\u81ea\u52a8\u6276\u68af\u7684\u8f66\u624b\u90fd\u662f\u3002\n \u8be5\u7814\u7a76\u8868\u660e\uff0c\u5f53\u8fc7\u5883\u7cfb\u7edf\u5f3a\u5236\u6267\u884c\u4e86\u65e0\u884c\u8d70\u89c4\u5219\u65f6\uff0c\u4f7f\u7528\u6574\u4e2a\u81ea\u52a8\u6276\u68af\uff0c\u8fd9\u610f\u5473\u7740\u603b\u5e73\u5747W\u51cf\u5c0f\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4e0d\u662f\u7eaf\u7cb9\u7684\u5584\u826f\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u8fd9\u4e2a\u95ee\u9898\u7684\u75c7\u7ed3\u3002\n \u867d\u7136\u5b9e\u65bd\u4e00\u4e2a\u65e0\u884c\u8d70\u89c4\u5219\u6539\u5584\u4e86\u5e73\u5747\u7b49\u5f85\u65f6\u95f4\uff0c\u4f46\u5b83\u4f1a\u589e\u52a0\u81ea\u52a8\u6276\u68af\u6b65\u884c\u8005\u7684\u7b49\u5f85\u65f6\u95f4\u3002\u4e4b\u524d\uff0c\u4eba\u4eec\u5306\u5fd9\u7684\u4eba\u53ef\u4ee5\u5728\u81ea\u52a8\u6276\u68af\u4e0a\u8fdb\u884c\u5de1\u822a\uff0c\u5de1\u822a\uff0c\u5bf9\u4ed6\u4eec\u6765\u8bf4\u5ef6\u8fdf\u5f97\u591a\uff0c\u4f46\u4ee5\u727a\u7272\u72ec\u7acb\u8005\u7684\u66f4\u9ad8\u5ef6\u8fdf\u4e3a\u4ee3\u4ef7\u3002 \n\u4e00\u822c\u6765\u8bf4\uff0c\u6211\u4eec\u4e0d\u559c\u6b22\u201c\u4e0d\u516c\u5e73\u201d\u7684\u7ed3\u679c\uff0c\u6709\u4e9b\u4eba\u5728\u5171\u540c\u7684\u793e\u4f1a\u73af\u5883\u4e2d\u5bf9\u4ed6\u4eba\u53d7\u5230\u9752\u7750\u3002 \u6240\u4ee5\u7ad9\u7acb\u8005\u4e0d\u559c\u6b22\uff0c\u4ed6\u4eec\u5fc5\u987b\u7b49\u5f85\u66f4\u957f\u65f6\u95f4\uff0c\u800c\u5176\u4ed6\u4eba\u201c\u5229\u7528\u201d\u7cfb\u7edf\u3002  \u53e6\u4e00\u65b9\u9762\uff0c\u4e3a\u6b65\u884c\u8005\u7559\u4e0b\u4e00\u534a\u7684\u81ea\u52a8\u6276\u68af\uff0c\u8fd9\u610f\u5473\u7740\u4f11\u606f\u9762\u8bd5\u7684\u4eba\u6216\u4efb\u4f55\u53ef\u4ee5\u83b7\u5f97\u66f4\u5feb\u7684\u4eba\u3002 \u6211\u7684\u89c2\u70b9\u662f\u8fd9\u91cc\u6ca1\u6709\u201c\u6570\u5b66\u4e0a\u6b63\u786e\u201d\u7684\u7b54\u6848\u3002 \u8fd9\u4e9b\u662f\u793e\u4f1a\u95ee\u9898\u3002  \u8fd4\u56de\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\u4e4b\u95f4\u7684\u5173\u7cfb\u901a\u5e38\u8f83\u5c11\u5c11\u4e8e\u793e\u4f1a\u516c\u5e73\u6027\uff0c\u66f4\u591a\u5173\u4e8e\u5e73\u8861\u5e73\u5747\u5ef6\u8fdf\uff0c\u5ef6\u8fdf\u9ad8\u767e\u5206\u5ea6\uff08\u4e3a\u4ec0\u4e48\u9ad8\u767e\u5206\u5ea6\u5ef6\u8fdf\u95ee\u9898\uff09\u3002  \u4f46\u8981\u8bb0\u4f4f\u7684\u91cd\u8981\u4e8b\u9879\u662f\u5ba2\u6237\u53ea\u5173\u5fc3\u5ef6\u8fdf\u3002 \u901a\u8fc7\u589e\u52a0\u5e76\u884c\u6027\u6765\u63d0\u9ad8\u541e\u5410\u91cf\u901a\u5e38\u662f\u5fc5\u8981\u7684\uff0c\u4f46\u51e0\u4e4e\u4e0e\u76f4\u63a5\u964d\u4f4e\u5ef6\u8fdf\u4e5f\u6ca1\u6709\u826f\u597d\u3002 ", "note_en": "A constrained space such as an escalator can comfortably hold more than twice the number of standing pedestrians as walking pedestrians.  So stop walking up them.  https://t.co/7Dey11CXvP\n\u2014 Quartz (@qz)  October 30, 2019\n  My first reaction was \u201cthat\u2019s dumb - a highway can hold more cars at 20mph than 65mph; it\u2019s throughput that matters.\u201d Then I read the article and realized that the summary was what was dumb. The actual study was not, and illustrates computer systems concepts, as I\u2019ll explain:\n The important metrics for a lot of systems are latency and throughput. Throughput is how much work gets done per unit time (so in this case, people transported per minute), and latency is how long each individual piece of work takes (how long each person is on the escalator).\n These two concepts are related, and  Little\u2019s Law gives the simplest relation. It says that the number of people on the escalator is equal to the rate of people getting on multiplied by the average time each person spends on the escalator.\n (Note that the rate of getting on and the rate of getting off had better be the same, or there\u2019s something very strange going on.)\n Little\u2019s Law is usually written as L = \u03bbW, so in our case, L is the number of people on the escalator, \u03bb is the people per minute carried, and W is the time spent riding the escalator. Of the three things, the only thing we care about is W. \u2026 What?? \u2026\n Surely we care about \u03bb, right? I mean, if a train drops off 200 people every 4 minutes, we\u2019d better be able to move at least 50 people per minute on the escalator, right? Yes\u2026 but. The but is that the only thing your customer cares about is W - for the whole system.\n As a train rider, I only care about me. How long does it take from when I exit the train to when I\u2019m at the surface? So the throughput of the escalator (\u03bb) matters because it impacts total system W for everybody.\n If the escalator can only move 50 people per minute, then it\u2019ll take 4 minutes to clear each train\u2019s load. That means somebody is waiting 4 minutes, and \u00bd your passengers are waiting at least 2. But if it can move 100, then the longest wait is 2 and half are done in 60 seconds.\n This relationship between latency and throughput is really important. When I wrote in the intro to this thread that \u201cit\u2019s throughput that matters,\u201d what I really meant was that it matters more than carrying capacity in impacting latency.\n But more throughput doesn\u2019t necessarily mean lower latency. For example, let\u2019s say I had a 200-person elevator that took 4 minutes to go from platform to surface, versus our escalator that can move 50 people per minute.\n \u03bb is the same for both systems - 50 people per minute. But the escalator is strictly better. For the elevator, everybody takes 2 minutes to get to the surface. For the escalator, 50 people take 60 seconds or less, and only the worst-off riders take 2 minutes.\n Furthermore, higher \u03bb is only better, if it decreases W. If my elevator could carry 800 passengers, then it has higher throughput than my escalator, but that extra capacity doesn\u2019t actually provide any benefits to the system.\n Stuart Cheshire wrote a  rant entitled \u201cIt\u2019s the Latency, Stupid\u201d that gets into this relationship even more. It\u2019s super important for anybody building computer systems that serve humans. It\u2019s much better to double \u03bb by cutting W in half than by increasing L.\n OK. Getting back to the article. The headlines was \u201cPeople who walk on the escalator actually slow everyone down,\u201d and the tweet talked about an escalator holding more people if they are all standing. You can probably see the flaw in this reasoning.\n To analyze, we need to be a little careful. There are really two systems here. Riders care about the overall W, which we can decompose into the time waiting on the platform to get on the escalator (W\u209a) plus the time riding the escalator (W\u2091).\n The only thing impacting W\u209a is \u03bb\u2091 (the throughput of the escalator). The more people can get on the escalator each minute, the less time people have to wait on the platform. So for W\u209a higher \u03bb is unambiguously better.\n Recall Little\u2019s Law is L = \u03bbW. Rearranging terms, we see that \u03bb = L / W. Indeed, if we double the carrying capacity of each escalator, we can get more people through the system, which is going to be a win for W\u209a. Case closed, right? Well, if so, I wouldn\u2019t be writing this! \ud83d\ude04\n The flaw in the analysis is that we\u2019ve ignored the impact on W\u2091. If people are walking up an escalator at least as fast as the escalator moves (a reasonable assumption), then the total time on the escalator when walking is half of that when standing.\n Looking at both terms together, you see that if people are standing vs walking, L doubles (good!), but W doubles as well (bad!). In fact, \u03bb\u2091 will stay roughly the same, meaning W\u209a will stay the same, but W\u2091 will double. Overall, standing will increase total wait time!\n Note that if we increase capacity by doubling the number of escalators, that would be a pure win, since it would increase \u03bb\u2091 without impacting W\u2091. Overall wait time in the system will go down.\n But while the headlines were misleading, the studies cited in the article were good. They actually measured total W, and it went down when people were only standing. Why is that?\n The picture in the tweet holds a clue. The comparison isn\u2019t between everybody walking and everybody standing. In fact, the amount of separation people need when walking is a total red herring. The problem is not with the walkers, but with cultural norms.\n The problem is that the escalators are divided up (by norm) into half for walking and half for standing. If the walking half were fully utilized, as we saw above, it would be pure goodness - same throughput, lower latency for walkers.\n But the walking half is not fully utilized, because less than 50% of people want to walk. So now escalator throughput drops, which means that platform wait times go up, and riders are unhappy. Or at least riders who like to stand on escalators are.\n The study showed that when the transit system enforced a no-walking rule, then the whole escalator was used, which meant that total average W decreased. Unfortunately, this isn\u2019t pure goodness, and I think that\u2019s the crux of this problem.\n While enforcing a no-walking rule improved average wait times, it increase wait times for escalator walkers. Before, people in a hurry could get right on the escalator and cruise up, yielding much lower latency for them, but at the expense of higher latency for standers.\n Generally, we dislike \u201cunfair\u201d outcomes, where some people are favored over others in a shared social setting. So the standers don\u2019t like that they have to wait longer while other people \u201ctake advantage\u201d of the system.\n On the other hand, leaving half of the escalator open for walkers means that people who are late for a job interview or whatever can get where they are going faster. My point is that there\u2019s no \u201cmathematically correct\u201d answer here. These are social questions.\n Back to computer systems, the relationship between latency and throughput is usually less about social fairness and more about balancing average latency with high percentile latency ( why high-percentile latency matters).\n But the important thing to remember is that customers only care about latency. Improving throughput by increasing parallelism is often necessary, but isn\u2019t nearly as good as reducing latency directly.", "posttime": "2021-06-18 03:03:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u541e\u5410\u91cf,throughput,\u81ea\u52a8\u6276\u68af", "title": "\u5ef6\u8fdf\uff0c\u541e\u5410\u91cf\u548c\u81ea\u52a8\u6276\u68af\u884c\u8d70 ", "title_en": "Latency, Throughput, and Walking on Escalators", "transed": 1, "url": "https://blog.tacertain.com/latency-throughput-and-escalators/", "via": "", "real_tags": ["\u541e\u5410\u91cf", "\u81ea\u52a8\u6276\u68af"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066529, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u5728\u9012\u589e\u6211\u4eec\u7684\u9a6c\u94c3\u85af\u540e\uff0c\u6211\u4eec\u5207\u6362\u5230\u4e0b\u4e00\u4e2a\u70ed\u70b9\u51fd\u6570.Seems\u76f4\u89c2\u3002\u6240\u4ee5\u4e3a\u4ec0\u4e48DO / while\u548cswitchtofiber\u56de\u5230\u4e3b\u7ebf\u7a0b\uff1f\u8003\u8651\u66ff\u4ee3\u51fd\u6570\uff0cBadhotpotatoone\uff1a\n void __stdcall badhotpotatoone\uff08lpvoid lpparam\uff09{unsigned int * potato_local =\uff08unsigned int *\uff09getfiberdata\uff08\uff09; * potato_local + = 1; Printf\uff08\uff06\uff0334;\u70ed\u9a6c\u94c3\u85af\u4e00\u6b21\u6dfb\u52a01\uff0c\u9a6c\u94c3\u85af\u73b0\u5728\u662f\uff05d\uff01\\ n\uff06\uff0334 ;, * potato_local\uff09; switchtofiber\uff08hot_potatoes [fiber_hp_two]\uff09; if\uff08* potato_local\uff06gt; 1337\uff09{switchtofiber\uff08hot_potatoes [mainfiber]\uff09; }}\n Badhotpotatoone\u5207\u6362\u5230Hotpotatotwo Hotpotatotwo\u5f00\u5173\u5230Hotpotatothree Hotpotatothree\u4ea4\u6362\u673a\u5230Badhotpotatoone\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u5f53HotpotatoThree\u5c06SwitchTofiBer\u547c\u53eb\u56de\u5230BadhotPotatoone\u65f6\uff0cSwitchTofiBer\u5f00\u59cb\u57fa\u4e8eBadhotPotatoone\u547c\u53eb\u540e\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u6267\u884c\uff0c\u7136\u540e\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7684\u5f52\u5c5e\u540e\u7684\u4e0b\u4e00\u4e2a\u6307\u4ee4\u5230Badhotpotatoone\u662f\u6211\u4eec\u7684if\u8bed\u53e5\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u5149\u7ea4\u7684\u5f00\u5934\u3002\n void __stdcall badhotpotatoone\uff08lpvoid lpparam\uff09{unsigned int * potato_local =\uff08unsigned int *\uff09getfiberdata\uff08\uff09; * potato_local + = 1; Printf\uff08\uff06\uff0334;\u70ed\u9a6c\u94c3\u85af\u4e00\u6b21\u6dfb\u52a01\uff0c\u9a6c\u94c3\u85af\u73b0\u5728\u662f\uff05d\uff01\\ n\uff06\uff0334 ;, * potato_local\uff09; switchtofiber\uff08hot_potatoes [fiber_hp_two]\uff09; \uff06lt;  - \u5207\u6362\u5230\u70ed\u67f1\uff0c\u7136\u540e\u5207\u6362\u5230\u70ed\u67f1\uff0c\u7136\u540e - \u5982\u679c\uff08* potato_local\uff06gt; 1337\uff09{\uff06lt;  - \u6267\u884c\u5f53\u70ed\u6591\u70b9\u4ea4\u6362\u673a\u540e\u9762\u7684switchtofiber\u65f6\u8fd4\u56de\u4e0b\u4e00\u4e2a\u8bed\u53e5\uff08hot_potatoes [mainfiber]\uff09; }}\n \u56e0\u6b64\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u6211\u4eec\u7684\u671f\u671b\u884c\u4e3a\u662f\u5faa\u73af\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\uff0c\u5728\u6211\u4eec\u547c\u53ebSwitchTofiBer\u4e4b\u540e\u3002\u5728\u6211\u4eec\u7684\u826f\u597d\u529f\u80fd\uff0c\u70ed\u70b9\uff0c\u4e0b\u4e00\u4e2a\u6307\u4ee4\u662fA\uff06\uff0334;\uff06\uff0334;\u6bd4\u8f83\uff0c\u7136\u540e\u662f\u4e00\u4e2a\uff06\uff0334;\u505a\uff06\uff0334;\u5c06\u6211\u4eec\u5e26\u56de\u70ed\u67f1\u7684\u5faa\u73af\u3002\u8fd9\u6761\u8def\uff0c\u5f53\u6267\u884c\u4ece\u70ed\u6591\u70b9\u7684\u70ed\u70b9\u5207\u6362\u5230\u70ed\u6591\u70b9\u65f6\uff0c\u6211\u4eec\u5faa\u73af\u800c\u4e0d\u662f\u8fd4\u56de\u3002\n  void __stdcall\u70ed\u70b9\uff08lpvoid lpparam\uff09{// step 3 unsigned int * potato_local =\uff08unsigned int *\uff09getfiberdata\uff08\uff09; do {* potato_local + = 1; Printf\uff08\uff06\uff0334;\u70ed\u9a6c\u94c3\u85af\u4e00\u6b21\u6dfb\u52a01\uff0c\u9a6c\u94c3\u85af\u73b0\u5728\u662f\uff05d\uff01\\ n\uff06\uff0334 ;, * potato_local\uff09; // step 4 switchtofiber\uff08hot_potatoes [fiber_hp_two]\uff09; \uff06lt;  - \u5207\u6362\u5230\u70ed\u67f1\uff0c\u7136\u540e\u662fhotpotatothree\uff0c\u7136\u540e - }\uff08* potato_local\uff06lt; 1337\uff09; \uff06lt;  - \u6267\u884c\u8fd4\u56de\u6bd4\u8f83\uff0c\u4fdd\u6301\u5faa\u73af\u5230* potato_local\uff06gt; 1337 switchtofiber\uff08hot_potatoes [fiber_main]\uff09; }\n   \u6587\u6863\u662f\u4e00\u4e2a\u8c0e\u8a00\u3002\u6ca1\u6709\u8ba4\u771f\u3002\u51fa\u8272\u5730\u3002\u7c7b\u578b\u7684.creadiber\u548cconvertthreadtofiber\u7684MSDN\u6587\u6863\u544a\u8bc9\u6211\u4eec\u8fd4\u56de\u503c\u662f\u5149\u7ea4\u7684\u5730\u5740\u3002\u8fd9\u662f\uff06\uff0334;\u771f\uff0c\uff06\uff0334;\u4f46\u8bef\u5bfc\u4e3a\uff06\uff0334;\u7ea4\u7ef4\uff06\uff0334;\u7ed3\u6784\u672a\u8bb0\u5f55\u3002\u6211\u6700\u521d\u5c06\u5176\u89e3\u91ca\u4e3a\u4f8b\u7a0bI\uff06\uff0339; m\u8f6c\u6362\u4e3a/\u521b\u5efa\u4f5c\u4e3a\u5149\u7ea4\u7684\u57fa\u7840\u5730\u5740\u3002\u8fd9\u4e9b\u51fd\u6570\u7684\u5b9e\u9645\u8fd4\u56de\u503c\u662f\u5149\u7ea4\u5bf9\u8c61\u3002 \uff08\u4ee3\u8868\u6027\u7684\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\u7684\u611f\u89c9\uff09.This\u6570\u636e\u7ed3\u6784\u4f3c\u4e4e\u4e0eGet / SetThreadContext\u51fd\u6570\u4e2d\u4f7f\u7528\u7684\u7ebf\u7a0b\u548c\uff0339; scountcuts\u7ed3\u6784\u975e\u5e38\u76f8\u4f3c\u3002\uff06\uff0339; s\u4ed4\u7ec6\u7814\u7a76\u6bcf\u4e2a\u529f\u80fd\u6211\u4eec\u8c03\u7528\u5b83\u8fd4\u56de\u4e00\u4e2aLPVOID\u5149\u7ea4\u5bf9\u8c61\uff08ConvertThreadtofiber\uff0cCreatefiber\uff09\u3002ReactOS\u7684\u7f5a\u6b3e\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2aConvertThreadTofiber / Ex.let\u548c\uff0339; S\u770b\u90a3\u4e2a\u6765\u6e90\u5e76\u4e0eKernelbase\u7684\u62c6\u5378\u8fdb\u884c\u6bd4\u8f83\uff01convertThreadtofiberex.reactos convertthreadtofiberex\uff1a \nlpvoidwinapiconvertthreadtofiberex\uff08_in_opt_ lpvoid lpparameter\uff0c_in_ dword dwflags\uff09{pteb teb; Pfiber\u7ea4\u7ef4; dprint1\uff08\uff06\uff0334;\u5c06\u7ebf\u7a0b\u8f6c\u6362\u4e3a\u5149\u7ea4\\ n\uff06\uff0334;\uff09; / *\u68c0\u67e5\u65e0\u6548\u6807\u5fd7* / if\uff08dwflags\uff06amp;\u301cfiber_flag_float_switch\uff09{/ * fall * / setLasterror\uff08error_invalid_parameter\uff09;\u8fd4\u56denull; } / *\u6211\u4eec\u5df2\u7ecf\u662f\u7ea4\u7ef4\u5417\uff1f * / teb = ntcurrentteb\uff08\uff09; if\uff08teb-\uff06gt; hasfiberdata\uff09{/ * fall * / setLasterror\uff08Error_Already_Fiber\uff09;\u8fd4\u56denull; } / *\u5206\u914d\u5149\u7ea4* / fible = rtlallocateHeap\uff08RTLGetProcessheap\uff08\uff09\uff0c0\uff0csizeof\uff08\u5149\u7ea4\uff09\uff09; if\uff08\uff01fible\uff09{/ * fall * / setLasterror\uff08error_not_enough_memory\uff09;\u8fd4\u56denull; }\u3002 \u3002 \u3002\u88ab\u622a\u65ad\u7684\uff0c\u65e0\u804a\u7684\u72d7\u5c4e\u6211\u4e0d\u5728\u4e4e\u3002 \u3002 \u3002 / *\u5c06\u5149\u7ea4\u4e0e\u5f53\u524d\u7ebf\u7a0b* / teb-\uff06gt\u76f8\u5173\u8054; nttiib.fiberdata =\u5149\u7ea4; teb-\uff06gt; hasfiberdata = true; //\u6211\u4eec\u771f\u6b63\u5173\u5fc3/ *\u8fd4\u56de\u4e0d\u900f\u660e\u5149\u7ea4\u6570\u636e* /\u8fd4\u56de\uff08LPVOID\uff09\u5149\u7ea4; // msdn\u8868\u793a\u8fd9\u662f\u6307\u5411\u5149\u7ea4\u7684\u6307\u9488\uff0c\u800c\u4e0d\u662f\u5149\u7ea4\u5bf9\u8c61// hmmmmmmmm}\n  KERNELBASE\uff01CONVERTTHREADTOFIBR\uff1a00007FFC`CDD58160 48895C2408 MOV QWORD PTR [RSP + 8]\uff0cRBX SS\uff1a000000C4`533BF970 = {FibleBlog\uff01_NullBlog + 0x22015\uff09\uff0800007FF6`CDD58165 4889742410 MOV QWORD PTR [RSP + 10H ]\uff0cRSI00007FFC`CDD5816A 57\u63a8\u9001RDI00007FFC`CDD5816B 4883EC20\u5b50RSP\uff0c20H 00007FFC`CDD5816F 65488B3C253000000000 MOV RDI\uff0cQWORD PTR GS\uff1a[30H]; RDI\u83b7\u53d6\u6307\u5411\u5f53\u524d_nt_tib\u7684\u6307\u9488\u3002 \u3002 \u3002 t r u n c a t e d\u3002 \u3002 \u3002 00007FFC`CDD58252 66838FEE17000004\u6216Word PTR [RDI + 17EEH]\uff0c4;\u8bbe\u7f6eteb-\uff06gt; hasfiberdata\u6807\u5fd7\u5230true 00007ffc`cdd5825a 48895720 mov qword ptr [rdi + 20h]\uff0crdx;\u8bbe\u7f6eTeb-\uff06GT; FiberData00007ffc`cdd5825e 488b742438 MOV RSI\uff0cqword\u7684PTR [RSP + 38H] 00007ffc`cdd58263 488bc3 MOV RAX\uff0crbx00007ffc`cdd58266 488b5c2430 MOV RBX\uff0cqword\u7684PTR [RSP + 30H] 00007ffc`cdd5826b 4883c420\u52a0RSP\uff0c20h00007ffc`cdd5826f 5F POP RDI00007FFC`CDD58270 C3 RET\n \u5bf9\u4e8e\u6240\u6709\u8bed\u4e49\u76ee\u7684\uff0c\u884c\u4e3a\u662f\u76f8\u540c\u7684\u3002\u8c22\u8c22Reactos\u56e2\u961f\uff1a\uff09\u6240\u4ee5\uff0c\u4e0eTEB\u548cTIB\u7684\u4ea4\u6613\u662f\u4ec0\u4e48\uff06\uff0339;\u597d\u5427\uff0c\u6211\u5f88\u9ad8\u5174\u4f60\u95ee\u4f60\u8be2\u95ee\u3002\u4ece\u62c6\u5378\u4e2d\u53d6\u51fa\u4e24\u6761\u8bf4\u660e\u5e76\u68c0\u67e5\u4ed6\u4eec\u7684\u62b5\u6d88\u53c2\u8003\uff0339;\u91cd\u65b0\u5f15\u7528\u3002 \uff08RDI == TEB\uff09\n 00007FFC`CDD58252 66838FEE17000004\u6216Word PTR [RDI + 17EEH]\uff0c4;\u8bbe\u7f6eteb-\uff06gt; hasfiberdata\u6807\u5fd7\u5230true 00007ffc`cdd5825a 48895720 mov qword ptr [rdi + 20h]\uff0crdx;\u8bbe\u7f6eteb-\uff06gt; fiberdata\n \u68c0\u67e5TEB\u7ed3\u6784\uff0c\u6211\u4eec\u53d1\u73b0*\uff08rdi + 0x17ee\uff09\u5f15\u7528\u7684\u5355\u8bcd\u5b9e\u9645\u4e0a\u4ee3\u8868\u4e86\u8be5\u8fc7\u7a0b\u4e2d\u4e0d\u540c\u529f\u80fd\u7684\u4f4d\u6807\u5fd7\u3002\n 0\uff1a000\uff06gt; dt nt\uff01_tebntdll\uff01_teb + 0x17ee sametebflags\uff1auint2b + 0x17ee safethunkcall\uff1apos 0\uff0c1\u4f4d+ 0x17ee indebugprett\uff1apos 1\uff0c1\u4f4d+ 0x17ee hasfiberdata\uff1apos 2\uff0c1 bit; \uff06\uff0334;\u6216word ptr [rdi + 17eeh]\uff0c4\uff06\uff0334;\u5c06\u5176\u8bbe\u7f6e\u4e3aTrue + 0x17ee SkipthreaTach\uff1aPOS 3\uff0c1\u4f4d+ 0x17ee WerInshipAstCode\uff1aPOS 4\uff0c1\u4f4d+ 0x17EE RanProcessInit\uff1aPOS 5\uff0c1\u4f4d+ 0x17ee ClonedThread\uff1aPOS 6\uff0c1\u4f4d+ 0x17ee SuppressDebugMSG\uff1aPOS 7\uff0c1\u4f4d+ 0x17ee disableSertackWalk\uff1aPOS 8,1\u6bd4\u7279+ 0x17EE rttlexceptionattached\uff1apos 9,1 bit + 0x17ee initialThread\uff1aPOS 10\uff0c1\u4f4d+ 0x17ee SessawAware\uff1aPOS 11\uff0c1\u4f4d+ 0x17ee Loadowner\uff1aPOS 12\uff0c1\u4f4d+ 0x17ee LoaderWorker\uff1aPOS 13 \uff0c1\u4f4d+ 0x17ee skiploaderInit\uff1aPOS 14\uff0c1\u4f4d+ 0x17ee Sparesametebbits\uff1aPOS 15\uff0c1\u4f4d\n \u6211\u4eec\u8fd8\u53ef\u4ee5\u770b\u5230*\uff08rdi + 0x20\uff09\u5f15\u7528\u7684qword ptr\u662f\u8fc7\u7a0b\u4e2d\u7684\u5149\u7ea4\u6307\u9488; tib\u3002 \nWarning: Can only detect less than 5000 characters", "note_en": "The Windows fiber API has been described as one of the &#34;most elegant&#34; APIs available to the Windows programmer for manual execution scheduling.I&#39;m by no means an expert in how fibers work, nor how to deploy them into a large-scale application.There is not a lot of documentation about how fibers work internally, so I thought it might be at least interesting or helpful to write about some of what I found.\n     &#34;What is the Windows Fiber API?&#34;WELL, I&#39;m very glad you asked. I mean, why else would you be here?The Windows Fiber API exposes a means of manually &#34;scheduling&#34; execution within a process thread. To quote MSDN:&#34;A fiber is a unit of execution that must be manually scheduled by the application. Fibers run in the context of the threads that schedule them. Each thread can schedule multiple fibers. In general, fibers do not provide advantages over a well-designed multithreaded application.&#34;In regular terms, the Windows Fiber API provides developers with a means to manually schedule execution of many routines (converted to fibers) with a simple, lightweight API in  one thread.  (Many Fibers, One Thread, Manually Switched)A similar, thread-based API exists as the User Mode Scheduler API (UMS) which provides similar, more robust (read: complex),  thread-based scheduling capabilities for developers.  (Many Threads, One Scheduler Routine)While not the topic of this post, I found it relevant to call out because I think both APIs are pretty cool.\n  The example MSDN code is very nice, and can be located  here.For this much, MUCH simpler example, let&#39;s consider the following scenario:We would like to create three routines  HotPotatoOne,  HotPotatoTwo, and  HotPotatoThree.Within one thread we want to schedule  HotPotatoOne,  HotPotatoTwo, and  HotPotatoThree to &#34;pass&#34; eachother a &#34;potato&#34; (unsigned int).Each fiber will receive one unsigned int parameter and add it&#39;s respective number to it, and return:  HotPotatoOne adds 1  HotPotatoOne switches to  HotPotatoTwo  HotPotatoTwo adds 2  HotPotatoTwo switches to  HotPotatoThree  HotPotatoThree adds 3  HotPotatoThree switches to  HotPotatoOneWe will call each routine in a loop until the number is greater than 1337.A sane programmer would not use fibers for this.Luckily, as an IT consultant, I lost my sanity a while ago.Let&#39;s consider what we need to do in order to accomplish this task: 1. Convert the instatniating (main, in our case) thread to a fiber  (ConvertThreadToFiber) 2. Create a fiber for each of the HotPotato routines  (CreateFiber) 3. Set the fiber data to a pointer to our starting number  (GetFiberData, within the fiber) 4. Switch to each of the HotPotato fibers  (SwitchToFiber) 5. Exit if the number is greater than 1337 Now, let&#39;s see how the code looks!\n #include &lt;Windows.h&gt;#include &lt;stdio.h&gt;void __stdcall HotPotatoOne(LPVOID lpParam);void __stdcall HotPotatoTwo(LPVOID lpParam);void __stdcall HotPotatoThree(LPVOID lpParam);#define FIBER_MAIN 0#define FIBER_HP_ONE 1#define FIBER_HP_TWO 2#define FIBER_HP_THREE 3unsigned int potato = 0;LPVOID HOT_POTATOES[4] = { NULL, NULL, NULL, NULL };int main() {\t// Step 1\tLPVOID AddrMainFiber = ConvertThreadToFiber(NULL);\t// Step 2\tLPVOID AddrHotPotatoOne = CreateFiber(0, (LPFIBER_START_ROUTINE)HotPotatoOne, &amp;potato);\tLPVOID AddrHotPotatoTwo = CreateFiber(0, (LPFIBER_START_ROUTINE)HotPotatoTwo, &amp;potato);\tLPVOID AddrHotPotatoThree = CreateFiber(0, (LPFIBER_START_ROUTINE)HotPotatoThree, &amp;potato);\tif (!(AddrMainFiber &amp;&amp; AddrHotPotatoOne &amp;&amp; AddrHotPotatoTwo &amp;&amp; AddrHotPotatoThree)) {\t\tputs(&#34;Couldn&#39;t create one of the fibers :(\\nQuitting&#34;);\t\treturn 0;\t}\t\tHOT_POTATOES[FIBER_HP_ONE] = AddrHotPotatoOne;\tHOT_POTATOES[FIBER_HP_TWO] = AddrHotPotatoTwo;\tHOT_POTATOES[FIBER_HP_THREE] = AddrHotPotatoThree;\tHOT_POTATOES[FIBER_MAIN] = AddrMainFiber;\t// Step 4\tSwitchToFiber(AddrHotPotatoOne);\tDeleteFiber(HOT_POTATOES[FIBER_HP_ONE]);\tDeleteFiber(HOT_POTATOES[FIBER_HP_TWO]);\tDeleteFiber(HOT_POTATOES[FIBER_HP_THREE]);\tDeleteFiber(HOT_POTATOES[FIBER_MAIN]);\treturn 1;}void __stdcall HotPotatoOne(LPVOID lpParam) { // Step 3 unsigned int* potato_local = (unsigned int*)GetFiberData(); do { *potato_local += 1; printf(&#34;Hot Potato One adds 1, potato is now %d!\\n&#34;, *potato_local); // Step 4 SwitchToFiber(HOT_POTATOES[FIBER_HP_TWO]); } while (*potato_local &lt; 1337); // Step 5 SwitchToFiber(HOT_POTATOES[FIBER_MAIN]);}void __stdcall HotPotatoTwo(LPVOID lpParam) { // Step 3 unsigned int* potato_local = (unsigned int*)GetFiberData(); do { *potato_local += 2; printf(&#34;Hot Potato Two adds 2, potato is now %d!\\n&#34;, *potato_local); // Step 4 SwitchToFiber(HOT_POTATOES[FIBER_HP_THREE]); } while (*potato_local &lt; 1337); // Step 5 SwitchToFiber(HOT_POTATOES[FIBER_MAIN]);}void __stdcall HotPotatoThree(LPVOID lpParam) { // Step 3 unsigned int* potato_local = (unsigned int*)GetFiberData(); do { *potato_local += 3; printf(&#34;Hot Potato Three adds 3, potato is now %d!\\n&#34;, *potato_local); // Step 4 SwitchToFiber(HOT_POTATOES[FIBER_HP_ONE]); } while (*potato_local &lt; 1337); // Step 5 SwitchToFiber(HOT_POTATOES[FIBER_MAIN]);}\n  Hot Potato One adds 1, potato is now 1! Hot Potato Two adds 2, potato is now 3! Hot Potato Three adds 3, potato is now 6! Hot Potato One adds 1, potato is now 7! Hot Potato Two adds 2, potato is now 9!  . . .  TRUNCATED  . . . Hot Potato Three adds 3, potato is now 1332! Hot Potato One adds 1, potato is now 1333! Hot Potato Two adds 2, potato is now 1335! Hot Potato Three adds 3, potato is now 1338!\n Looking at each fiber method, the avid reader might notice something really odd about how we&#39;re handling control flow.Let&#39;s take a look at how we&#39;re *switching* to our HotPotato routines.For example, the first function,  HotPotatoOne:\n void __stdcall HotPotatoOne(LPVOID lpParam) { // Step 3 unsigned int* potato_local = (unsigned int*)GetFiberData(); do { *potato_local += 1; printf(&#34;Hot Potato One adds 1, potato is now %d!\\n&#34;, *potato_local); // Step 4 SwitchToFiber(HOT_POTATOES[FIBER_HP_TWO]); } while (*potato_local &lt; 1337); // Step 5 SwitchToFiber(HOT_POTATOES[MAINFIBER]);}\n After incrementing our potato, we switch to the next HotPotato function.Seems intuitive.So why the do/while and the SwitchToFiber back to the main thread?Consider an alternative function,  BadHotPotatoOne:\n void __stdcall BadHotPotatoOne(LPVOID lpParam) { unsigned int* potato_local = (unsigned int*)GetFiberData(); *potato_local += 1; printf(&#34;Hot Potato One adds 1, potato is now %d!\\n&#34;, *potato_local); SwitchToFiber(HOT_POTATOES[FIBER_HP_TWO]); if(*potato_local &gt; 1337){ SwitchToFiber(HOT_POTATOES[MAINFIBER]); } }\n BadHotPotatoOne switches to  HotPotatoTwo HotPotatoTwo switches to  HotPotatoThree HotPotatoThree switches to  BadHotPotatoOne What happens next?When  HotPotatoThree calls SwitchToFiber back to  BadHotPotatoOne, SwitchToFiber begins execution based on the next instruction of  BadHotPotatoOne after the call to SwitchToFiber.In this case, the next instruction following our return to  BadHotPotatoOne is our if statement, not the beginning of our fiber.\n void __stdcall BadHotPotatoOne(LPVOID lpParam) { unsigned int* potato_local = (unsigned int*)GetFiberData(); *potato_local += 1; printf(&#34;Hot Potato One adds 1, potato is now %d!\\n&#34;, *potato_local);  SwitchToFiber(HOT_POTATOES[FIBER_HP_TWO]); &lt;- Switches to HotPotatoTwo, then HotPotatoThree, then -  if(*potato_local &gt; 1337){ &lt;- Execution returns to the next statement when HotPotatoThree switches back SwitchToFiber(HOT_POTATOES[MAINFIBER]); } }\n As such we want to make sure our desired behavior of looping is the next instruction after our call to SwitchToFiber.In our good function,  HotPotatoOne, the next instruction is a &#34;while&#34; comparison, then a &#34;do&#34; loop which brings us back to  HotPotatoTwo.This way, when execution is switched back to  HotPotatoOne from  HotPotatoThree, we loop rather than return.\n  void __stdcall HotPotatoOne(LPVOID lpParam) { // Step 3 unsigned int* potato_local = (unsigned int*)GetFiberData(); do { *potato_local += 1; printf(&#34;Hot Potato One adds 1, potato is now %d!\\n&#34;, *potato_local); // Step 4  SwitchToFiber(HOT_POTATOES[FIBER_HP_TWO]); &lt;- Switches to HotPotatoTwo, then HotPotatoThree, then -  } while (*potato_local &lt; 1337); &lt;- Execution returns to comparison, keeps looping until *potato_local &gt; 1337 SwitchToFiber(HOT_POTATOES[FIBER_MAIN]); }\n   The documentation is a lie.No, seriously. Well. Kind of.The MSDN documentation for CreateFiber and ConvertThreadToFiber tells us that the return value is the  address of the fiber.This is &#34;true,&#34; but misleading as the &#34;FIBER&#34; structure is not documented. I originally interpreted it as the base address of the routine I&#39;m Converting into/Creating as a fiber.The ACTUAL return value of these functions is a fiber object. (Object in a representative sense, not the type sense).This data structure seems to be very similar to a thread&#39;s CONTEXT struct used in the Get/SetThreadContext functions.Let&#39;s take a closer look into each function we called that returns an LPVOID fiber object (ConvertThreadToFiber, CreateFiber).The fine folks at ReactOS have written an implementation of ConvertThreadToFiber/Ex.Let&#39;s look at that source and compare with the disassembly of KernelBase!ConvertThreadToFiberEx.ReactOS  ConvertThreadToFiberEx:\n LPVOIDWINAPIConvertThreadToFiberEx(_In_opt_ LPVOID lpParameter, _In_ DWORD dwFlags){ PTEB Teb; PFIBER Fiber; DPRINT1(&#34;Converting Thread to Fiber\\n&#34;); /* Check for invalid flags */ if (dwFlags &amp; ~FIBER_FLAG_FLOAT_SWITCH) { /* Fail */ SetLastError(ERROR_INVALID_PARAMETER); return NULL; } /* Are we already a fiber? */ Teb = NtCurrentTeb(); if (Teb-&gt;HasFiberData) { /* Fail */ SetLastError(ERROR_ALREADY_FIBER); return NULL; } /* Allocate the fiber */ Fiber = RtlAllocateHeap(RtlGetProcessHeap(), 0, sizeof(FIBER)); if (!Fiber) { /* Fail */ SetLastError(ERROR_NOT_ENOUGH_MEMORY); return NULL; }  . . .   TRUNCATED, boring shit I don&#39;t care about   . . . /* Associate the fiber to the current thread */  Teb-&gt;NtTib.FiberData = Fiber; Teb-&gt;HasFiberData = TRUE; // what we really care about /* Return opaque fiber data */  return (LPVOID)Fiber; // MSDN says this is a pointer to the fiber, rather than the fiber object // HMMMMMMM  }\n  KERNELBASE!ConvertThreadToFiber:00007ffc`cdd58160 48895c2408 mov qword ptr [rsp+8], rbx ss:000000c4`533bf970={FiberBlog!_NULL_IMPORT_DESCRIPTOR   (FiberBlog+0x22015) (00007ff6`49e62015)}00007ffc`cdd58165 4889742410 mov qword ptr [rsp+10h], rsi00007ffc`cdd5816a 57 push rdi00007ffc`cdd5816b 4883ec20 sub rsp, 20h 00007ffc`cdd5816f 65488b3c2530000000 mov rdi, qword ptr gs:[30h] ; rdi gets a pointer to the current _NT_TIB . . .  T R U N C A T E D  . . . 00007ffc`cdd58252 66838fee17000004 or word ptr [rdi+17EEh], 4; Setting the Teb-&gt;HasFiberData flag to True 00007ffc`cdd5825a 48895720 mov qword ptr [rdi+20h], rdx; Setting Teb-&gt;FiberData00007ffc`cdd5825e 488b742438 mov rsi, qword ptr [rsp+38h]00007ffc`cdd58263 488bc3 mov rax, rbx00007ffc`cdd58266 488b5c2430 mov rbx, qword ptr [rsp+30h]00007ffc`cdd5826b 4883c420 add rsp, 20h00007ffc`cdd5826f 5f pop rdi00007ffc`cdd58270 c3 ret\n The behavior is, for all semantic purposes, identical. Thank you ReactOS team :)So what&#39;s the deal with the TEB and TIB?WELL, I&#39;m glad you asked.Let&#39;s take the two instructions from the disassembly and check to see what offsets they&#39;re referencing. (rdi == TEB)\n 00007ffc`cdd58252 66838fee17000004 or word ptr [rdi+17EEh], 4; Setting the Teb-&gt;HasFiberData flag to True 00007ffc`cdd5825a 48895720 mov qword ptr [rdi+20h], rdx; Setting Teb-&gt;FiberData\n Examining the TEB structure, we find that the WORD referenced by  *(rdi+0x17ee) actually represents bit flags for different features in the process.\n 0:000&gt; dt nt!_TEBntdll!_TEB +0x17ee SameTebFlags : Uint2B +0x17ee SafeThunkCall : Pos 0, 1 Bit +0x17ee InDebugPrint : Pos 1, 1 Bit  +0x17ee HasFiberData : Pos 2, 1 Bit ; &#34;or word ptr [rdi+17EEh], 4&#34; sets this to TRUE +0x17ee SkipThreadAttach : Pos 3, 1 Bit +0x17ee WerInShipAssertCode : Pos 4, 1 Bit +0x17ee RanProcessInit : Pos 5, 1 Bit +0x17ee ClonedThread : Pos 6, 1 Bit +0x17ee SuppressDebugMsg : Pos 7, 1 Bit +0x17ee DisableUserStackWalk : Pos 8, 1 Bit +0x17ee RtlExceptionAttached : Pos 9, 1 Bit +0x17ee InitialThread : Pos 10, 1 Bit +0x17ee SessionAware : Pos 11, 1 Bit +0x17ee LoadOwner : Pos 12, 1 Bit +0x17ee LoaderWorker : Pos 13, 1 Bit +0x17ee SkipLoaderInit : Pos 14, 1 Bit +0x17ee SpareSameTebBits : Pos 15, 1 Bit\n We can also see that the  QWORD PTR referenced by  *(rdi+0x20) is a FiberData pointer in the process&#39; TIB.\n 0:000&gt; dt nt!_NT_TIBntdll!_NT_TIB +0x000 ExceptionList : Ptr64 _EXCEPTION_REGISTRATION_RECORD +0x008 StackBase : Ptr64 Void +0x010 StackLimit : Ptr64 Void +0x018 SubSystemTib : Ptr64 Void  +0x020 FiberData : Ptr64 Void ; This is what GetFiberData fetches +0x020 Version : Uint4B +0x028 ArbitraryUserPointer : Ptr64 Void +0x030 Self : Ptr64 _NT_TIB\n Neat. So our FiberData pointer and HasFiberData flag both live in the TEB.One could define a GetFiberData macro essentially as a few intrinsic functions equivalent to:\n void* GetFiberData(){ #ifdef _WIN64 return __readgsqword(0x20) // mov rax, gs:[20] #else return __readfsdword(0x20) // mov eax, fs:[20] #endif}\n So how does CreateFiber store the instruction pointer of the function we desire?Let&#39;s again go back to ReactOS for definition of  CreateFiberEx (this time without truncation):\n /** @implemented*/LPVOIDWINAPICreateFiberEx(_In_ SIZE_T dwStackCommitSize, _In_ SIZE_T dwStackReserveSize, _In_ DWORD dwFlags, _In_ LPFIBER_START_ROUTINE lpStartAddress, _In_opt_ LPVOID lpParameter){  PFIBER Fiber; !! Note this NTSTATUS Status; INITIAL_TEB InitialTeb; PACTIVATION_CONTEXT_STACK ActivationContextStackPointer; DPRINT(&#34;Creating Fiber\\n&#34;); /* Check for invalid flags */ if (dwFlags &amp; ~FIBER_FLAG_FLOAT_SWITCH) { /* Fail */ SetLastError(ERROR_INVALID_PARAMETER); return NULL; } /* Allocate the Activation Context Stack */ ActivationContextStackPointer = NULL; Status = RtlAllocateActivationContextStack(&amp;ActivationContextStackPointer); if (!NT_SUCCESS(Status)) { /* Fail */ BaseSetLastNTError(Status); return NULL; } /* Allocate the fiber */ Fiber = RtlAllocateHeap(RtlGetProcessHeap(), 0, sizeof(FIBER)); if (!Fiber) { /* Free the activation context stack */ RtlFreeActivationContextStack(ActivationContextStackPointer); /* Fail */ SetLastError(ERROR_NOT_ENOUGH_MEMORY); return NULL; } /* Create the stack for the fiber */ Status = BaseCreateStack(NtCurrentProcess(), dwStackCommitSize, dwStackReserveSize, &amp;InitialTeb); if (!NT_SUCCESS(Status)) { /* Free the fiber */ RtlFreeHeap(GetProcessHeap(), 0, Fiber); /* Free the activation context stack */ RtlFreeActivationContextStack(ActivationContextStackPointer); /* Failure */ BaseSetLastNTError(Status); return NULL; } /* Clear the context */ RtlZeroMemory(&amp;Fiber-&gt;FiberContext, sizeof(CONTEXT)); /* Copy the data into the fiber */ Fiber-&gt;StackBase = InitialTeb.StackBase; Fiber-&gt;StackLimit = InitialTeb.StackLimit; Fiber-&gt;DeallocationStack = InitialTeb.AllocatedStackBase; Fiber-&gt;FiberData = lpParameter; Fiber-&gt;ExceptionList = EXCEPTION_CHAIN_END; Fiber-&gt;GuaranteedStackBytes = 0; Fiber-&gt;FlsData = NULL; Fiber-&gt;ActivationContextStackPointer = ActivationContextStackPointer; /* Save FPU State if requested, otherwise just the basic registers */ Fiber-&gt;FiberContext.ContextFlags = (dwFlags &amp; FIBER_FLAG_FLOAT_SWITCH) ? (CONTEXT_FULL | CONTEXT_FLOATING_POINT) : CONTEXT_FULL; /* Initialize the context for the fiber */ BaseInitializeContext( &amp;Fiber-&gt;FiberContext, // AHA! We found the CONTEXT we were looking for! lpParameter,  lpStartAddress InitialTeb.StackBase, 2); /* Return the Fiber */ return Fiber;}\n  TRIMMED FOR BREVITY 00007ffc`cdcf5511 48ff1598a31b00 call qword ptr [KERNELBASE!_imp_RtlAllocateHeap (00007ffc`cdeaf8b0)] ; Allocating the fiber object on the heap00007ffc`cdcf5518 0f1f440000 nop dword ptr [rax+rax] 00007ffc`cdcf551d 488bf8 mov rdi, rax ; store it&#39;s pointer in rdi00007ffc`cdcf5520 4885c0 test rax, rax00007ffc`cdcf5523 0f8418f80800 je KERNELBASE!CreateFiberEx+0x8f8b1 (00007ffc`cdd84d41)00007ffc`cdcf5529 8b05c9682800 mov eax, dword ptr [KERNELBASE!SysInfo+0x18 (00007ffc`cdf7bdf8)]00007ffc`cdcf552f 488d4dd0 lea rcx, [rbp-30h]00007ffc`cdcf5533 448b0dae682800 mov r9d, dword ptr [KERNELBASE!SysInfo+0x8 (00007ffc`cdf7bde8)]00007ffc`cdcf553a 4533c0 xor r8d, r8d00007ffc`cdcf553d 48894c2428 mov qword ptr [rsp+28h], rcx00007ffc`cdcf5542 488bd3 mov rdx, rbx00007ffc`cdcf5545 498bcf mov rcx, r1500007ffc`cdcf5548 4889442420 mov qword ptr [rsp+20h], rax00007ffc`cdcf554d 48ff1524a01b00 call qword ptr [KERNELBASE!_imp_RtlCreateUserStack (00007ffc`cdeaf578)]00007ffc`cdcf5554 0f1f440000 nop dword ptr [rax+rax]00007ffc`cdcf5559 85c0 test eax, eax00007ffc`cdcf555b 0f885ff80800 js KERNELBASE!CreateFiberEx+0x8f930 (00007ffc`cdd84dc0)00007ffc`cdcf5561 33c0 xor eax, eax00007ffc`cdcf5563 4c896dc8 mov qword ptr [rbp-38h], r1300007ffc`cdcf5567 f3480f1ec8 rdsspq rax00007ffc`cdcf556c 4885c0 test rax, rax00007ffc`cdcf556f 0f8582f80800 jne KERNELBASE!CreateFiberEx+0x8f967 (00007ffc`cdd84df7)00007ffc`cdcf5575 33d2 xor edx, edx 00007ffc`cdcf5577 488d4f30 lea rcx, [rdi+30h] ; Remember how the fiber object&#39; CONTEXT is offset 0x30 from it&#39;s base? Load that into rcx00007ffc`cdcf557b 41b8d0040000 mov r8d, 4D0h 00007ffc`cdcf5581 e839c90800 call KERNELBASE!memset (00007ffc`cdd81ebf) ; Zero it 00007ffc`cdcf5586 488b5550 mov rdx, qword ptr [rbp+50h]00007ffc`cdcf558a 488d4f30 lea rcx, [rdi+30h]00007ffc`cdcf558e 488917 mov qword ptr [rdi], rdx ds:000002aa`f96b23a0=000002aaf96a015000007ffc`cdcf5591 4080e601 and sil, 100007ffc`cdcf5595 488b45e0 mov rax, qword ptr [rbp-20h]00007ffc`cdcf5599 4d8bc4 mov r8, r1200007ffc`cdcf559c 48894710 mov qword ptr [rdi+10h], rax00007ffc`cdcf55a0 488b45e8 mov rax, qword ptr [rbp-18h]00007ffc`cdcf55a4 48894718 mov qword ptr [rdi+18h], rax00007ffc`cdcf55a8 488b45f0 mov rax, qword ptr [rbp-10h]00007ffc`cdcf55ac 48834f08ff or qword ptr [rdi+8], 0FFFFFFFFFFFFFFFFh00007ffc`cdcf55b1 48894720 mov qword ptr [rdi+20h], rax00007ffc`cdcf55b5 4c89af00050000 mov qword ptr [rdi+500h], r1300007ffc`cdcf55bc 4c89af10050000 mov qword ptr [rdi+510h], r1300007ffc`cdcf55c3 4489af18050000 mov dword ptr [rdi+518h], r13d00007ffc`cdcf55ca 664489af1c050000 mov word ptr [rdi+51Ch], r13w00007ffc`cdcf55d2 488b45c0 mov rax, qword ptr [rbp-40h]00007ffc`cdcf55d6 48898708050000 mov qword ptr [rdi+508h], rax00007ffc`cdcf55dd 488b4710 mov rax, qword ptr [rdi+10h]00007ffc`cdcf55e1 483305e0672800 xor rax, qword ptr [KERNELBASE!BasepFiberCookie (00007ffc`cdf7bdc8)]00007ffc`cdcf55e8 4833c7 xor rax, rdi00007ffc`cdcf55eb 4c89742420 mov qword ptr [rsp+20h], r1400007ffc`cdcf55f0 48898720050000 mov qword ptr [rdi+520h], rax00007ffc`cdcf55f7 40f6de neg sil00007ffc`cdcf55fa 488b45c8 mov rax, qword ptr [rbp-38h]00007ffc`cdcf55fe 48898728050000 mov qword ptr [rdi+528h], rax00007ffc`cdcf5605 1bc0 sbb eax, eax00007ffc`cdcf5607 2508001000 and eax, 100008h00007ffc`cdcf560c 894760 mov dword ptr [rdi+60h], eax00007ffc`cdcf560f 4c8b4de0 mov r9, qword ptr [rbp-20h] 00007ffc`cdcf5613 e828000000 call KERNELBASE!BaseInitializeFiberContext (00007ffc`cdcf5640) ; Initialize the CONTEXT with the created fiber&#39;s routine address00007ffc`cdcf5618 488bc7 mov rax, rdi00007ffc`cdcf561b 4c8d5c2470 lea r11, [rsp+70h]00007ffc`cdcf5620 498b5b30 mov rbx, qword ptr [r11+30h]00007ffc`cdcf5624 498b7338 mov rsi, qword ptr [r11+38h]00007ffc`cdcf5628 498b7b40 mov rdi, qword ptr [r11+40h]00007ffc`cdcf562c 498be3 mov rsp, r1100007ffc`cdcf562f 415f pop r1500007ffc`cdcf5631 415e pop r1400007ffc`cdcf5633 415d pop r1300007ffc`cdcf5635 415c pop r1200007ffc`cdcf5637 5d pop rbp000\n......", "posttime": "2021-06-18 03:03:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "windows,fun,\u5149\u7ea4", "title": "\u4e00\u4e2a\u798f\u96f7\u4e50\u8da3\u8fdb\u5165Windows\u7ea4\u7ef4 ", "title_en": "A Foray for Fun into Windows Fibers", "transed": 1, "url": "https://malicious.dev/0x00.html", "via": "", "real_tags": ["windows", "fun", "\u5149\u7ea4"]}, {"category": "", "categoryclass": "", "imagename": "c65bcc1dc3c7952af28460216d2a5818.jpeg", "infoid": 1066528, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\nWarning: Can only detect less than 5000 characters\n\u8d1d\u8328\u548c\u5c11\u6570\u6bd5\u4e1a\u751f\u5f88\u5feb\u5f00\u59cb\u5728\u4e00\u4e2a\u53eb\u505aOZ\u7684\u4ea4\u4e92\u5f0f\u53d9\u4e8b\u5f15\u64ce\u4e0a\u5de5\u4f5c\uff0c\u4ee5\u5171\u540c\u7684Lisp-then\u8bed\u8a00\u7f16\u5199\uff0c\u7136\u540e\u662f\u4e0e\u4eba\u5de5\u667a\u80fd\u76f8\u5173\u7684\u4efb\u4f55\u4e1c\u897f\u7684\u8bed\u8a00\u3002\u6700\u521d\u5de5\u4f5c\u5206\u4e3a\u201c\u516d\u7ec4\u95ee\u9898\u6216\u95ee\u9898\uff1a\u201d\n \u5982\u4f55\u6a21\u62df\u7269\u7406\u4e16\u754c[\u201c\u4e3a\u201d\u63d0\u4f9b\u8db3\u591f\u7684\u7269\u7406\u73b0\u5b9e\uff0c\u8ba9\u4f5c\u8005\u6784\u5efa\u6709\u8da3\u7684\u89d2\u8272\u548c\u6545\u4e8b\u201c]\uff0c\u5982\u4f55\u6a21\u62df\u5b57\u7b26\u7684\u601d\u60f3\uff0c\u5982\u4f55\u8bbe\u8ba1\u7528\u6237\u754c\u9762\uff0c\u5982\u4f55\u6784\u5efa\u620f\u5267\u7684\u5de5\u4f5c\u7406\u8bba\uff0c\u5982\u4f55\u8bbe\u8ba1\u4e16\u754c\u5efa\u8bbe\u73af\u5883\uff0c\u4ee5\u53ca\u5982\u4f55\u4fc3\u8fdb\u7cfb\u7edf\u7684\u827a\u672f\u4f7f\u7528\u3002\n \u968f\u7740\u66f4\u591a\u6e10\u8fdb\u7684\u5b66\u751f\u4e58\u5750\u4ee4\u4eba\u5174\u594b\u7684\u9879\u76ee\uff0c\u6bcf\u4e2a\u4eba\u90fd\u8bbe\u5b9a\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u4e00\u4e2a\u65b9\u9762\uff0c\u8bb8\u591a\u6574\u4f53OZ\u67b6\u6784\u7684\u65b0\u7ec4\u4ef6\u7684\u8bbe\u8ba1\u548c\u539f\u578b\u8bbe\u8ba1\u3002\u5927\u591a\u6570\u6a21\u5757\u4ee5L. Frank Baum\u7684\u7740\u540d\u4e66\u7c4d\u7684\u89d2\u8272\u547d\u540d\u3002\u53d1\u52a8\u673a\u4ee5\u4ea7\u751f\u6a21\u62df\u4e16\u754c\u7684\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u88ab\u79f0\u4e3aGlinda;\u89e3\u6790\u5668\u7406\u89e3\u66f4\u5e7f\u6cdb\u7684\u81ea\u7136\u8bed\u8a00\u8f93\u5165\u88ab\u79f0\u4e3a\u7599\u7629;\u5728Dorothy\u7684\u673a\u68b0\u4f34\u4fa3Tik-tik-tik-tok\u4e4b\u540e\uff0c\u5728\u865a\u62df\u4e16\u754c\u5185\u8fd0\u8425\u7684\u4ee3\u7406\u4eba\u89d2\u8272 - \u5728\u865a\u62df\u4e16\u754c\u5185\u8fd0\u8425\u7684\u6838\u5fc3\u6846\u67b6\u88ab\u547d\u540d\u4e3aTIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-TIK-tok\u3002\n \u4e00\u4e2aCMU\u6bd5\u4e1a\u751f\uff0c\u65af\u79d1\u7279\u5c3c\u00b7\u83b1\u5229\uff0c\u4e13\u6ce8\u4e8e\u901a\u8fc7\u4e00\u4e2a\u540d\u4e3aEM\u7684\u7a0b\u5e8f\u63d0\u4f9bTOK\u5b57\u7b26\u548c\u793e\u4f1a\u7406\u89e3\u7684\u95ee\u9898\uff0c\u4e3a\u60c5\u611f\uff08\u548c\u591a\u841d\u897f\u7684\u963f\u59e8\uff09\u3002 \u201c\u5efa\u7acb\u53ef\u4fe1\u4ee3\u7406\u7684\u76ee\u6807\u662f\u672c\u8d28\u4e0a\u7684\u827a\u672f\u4e4b\u4e00\uff0c\u201dReilly\u5199\u9053\uff1a\n \u521b\u5efa\u80fd\u529b\u548c\u5efa\u7b51\u6a21\u578b\u7684\u4f20\u7edfAI\u76ee\u6807\u53ea\u6709\u5207\u5411\u76f8\u5173\uff0c\u56e0\u4e3a\u521b\u9020\u4e86\u53ef\u4fe1\u5ea6\u4e0e\u521b\u9020\u667a\u529b\u6216\u73b0\u5b9e\u4e3b\u4e49\u4e0d\u540c\u3002\u56e0\u6b64\uff0c\u4e3a\u8fd9\u4e9b\u4efb\u52a1\u8bbe\u8ba1\u7684\u5de5\u5177\u4e0d\u5408\u9002\u3002\n \u201c\u53ef\u4fe1\u201d\u4ee3\u7406\u4eba\uff0c\u8d56\u5229\u601d\u60f3\uff0c\u4e0d\u4f1a\u4ee5\u6700\u6709\u6548\u7684\u65b9\u5f0f\u5236\u5b9a\u5b8c\u7f8e\u7684\u8ba1\u5212\u5e76\u4ee5\u6700\u6709\u6548\u7684\u65b9\u5f0f\u6267\u884c\u5b83\u4eec\u3002\u4ed6\u4eec\u7684\u8ba1\u5212\u53ef\u80fd\u662f\u4e0d\u660e\u667a\u7684\uff0c\u5982\u679c\u4ed6\u4eec\u66fe\u7ecf\u65e8\u5728\u63ed\u793a\u4ed6\u4eec\u7684\u6027\u683c\uff0c\u5e76\u4f7f\u7403\u5458\u4e0e\u4ed6\u4eec\u8054\u7cfb\uff0c\u6b22\u547c\u4ed6\u4eec\uff0c\u6216\u9119\u89c6\u4ed6\u4eec\uff0c\u4ed6\u4eec\u5e94\u8be5\u5728\u6210\u529f\u4e4b\u524d\u5f88\u591a\u6b21\u5931\u8d25\u3002\u50cf\u8bb8\u591a\u76ce\u53f8\u7684\u5b66\u751f\u4e00\u6837\uff0cReilly\u5bfb\u627e\u4e86\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u7684\u7075\u611f\uff0c\u7814\u7a76\u4e86\u4f5c\u5bb6\u548c\u8fea\u58eb\u5c3c\u52a8\u753b\u5e08\uff0c\u4ed6\u4eec\u7528\u4e8e\u5c06\u96be\u5fd8\u7684\u4eba\u7269\u5e26\u5230\u751f\u6d3b\u4e2d\u3002 \u201c\u827a\u672f\u5bb6\u77e5\u9053\u5982\u4f55\u521b\u5efa\u53ef\u4fe1\u7684\u89d2\u8272\uff0c\u201d\u4ed6\u5199\u9053\uff0c\u4f46\u201cAI\u7814\u7a76\u4eba\u5458\u77e5\u9053\u5982\u4f55\u521b\u5efa\u81ea\u6cbb\u4ee3\u7406\u5546\u3002\u201d\u95ee\u9898\u5728\u5bfb\u627e\u4e00\u79cd\u65b9\u6cd5\u6765\u5c06\u8fd9\u4e9b\u4e0d\u540c\u7684\u4e16\u754c\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u627e\u5230\u4e00\u6761\u9053\u8def\u201c\u827a\u672f\u4e0e\u4eba\u5de5\u667a\u80fd\u4e4b\u95f4\u7684\u67d0\u4e2a\u5730\u65b9\u201d\uff1a\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u4f60\u53ef\u80fd\u4f1a\u8bf4\uff0c\u5728\u5f69\u8679\u4e0a\u3002\n \u5728\u4ed6\u8bba\u6587\u7684\u8fc7\u7a0b\u4e2d\uff0cReilly\u5c06\u5efa\u7acb\u51e0\u4e2a\u5c0f\u6a21\u62df\u6765\u6d4b\u8bd5EM\u3002\u5176\u4e2d\u4e00\u4e2a\u662f\u6e38\u4e50\u573a\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5b66\u6821\u7684\u5b69\u5b50\uff0c\u4e0e\u540c\u9f84\u4eba\u4ea4\u6613\u68d2\u7403\u5361\u7684\u76ee\u6807\uff1aMelvin\uff0c\u53cb\u597d\u7684\u661f\u9645\u8dcb\u6d89\u87ba\u6bcd\u548c\u65af\u83b1\u666e\u6208\uff0c\u4e00\u4e2a\u4e0d\u592a\u660e\u4eae\u7684\u6b3a\u8d1f\u3002\u5728\u4e00\u4e2a\u5c0f\u578b\u7684\u6a21\u578b\u4e16\u754c\u4e2d\u64ad\u653e\u7684\u884c\u52a8\u4f3c\u4e4e\u5728\u8868\u9762\u4e0a\u7684\u4f3c\u4e4e\u5c31\u50cf\u4e00\u4e2a\u4f20\u7edf\u7684\u4e92\u52a8\u5c0f\u8bf4\uff1a \nWarning: Can only detect less than 5000 characters\n...... ", "note_en": "The recess bell has just rung and it\u2019s time to really start working. Math, English, and Social Studies are nothing compared to the harsh competition out on the playground.Try to collect baseball cards of players you like by trading with the other kids on the playground. Who knows, this may even be your big chance to get that Willie Mays card you\u2019ve been trying to get for so long! Have fun!\n On a spring day in 1990, in a tiny studio theater at Carnegie Mellon\u2014the first university in the world to offer a degree in drama\u2014a most unusual performance took place. The seats were empty except for a handful of computer science researchers, and the only audience member was on the stage. She stood amidst a minimalist set representing a bus station along with a small troupe of improv actors wearing headsets. She\u2019d been told she was taking part in an experiment in \u201cinteractive drama,\u201d but her only guidance was to try to buy a bus ticket: she had no script, and neither did the actors with their headsets. Not even the director, whispering to the actors through an off-stage microphone, had the lines. All he had was a graph of possible outcomes, and a straightforward goal: whatever the woman on stage did, keep the story around her compelling.\n The play was an experiment by an ambitious campus research group that called themselves the Oz project. They were hoping to solve what they saw as a glaring problem in the still-teething world of computer games. While the software behind the bestsellers then on shelves was capable of all kinds of interesting simulations\u2014of 3D spaces, of realistic lighting, of airplane aerodynamics, of the growth of virtual cities\u2014one aspect still depressingly static was their stories. Scholar Espen Aarseth would later  write of the difference between a  simulated door in a video game\u2014one the player can open, move through, perhaps lock and unlock or use for cover\u2014and a merely  fictional door: a painted-on texture, leading nowhere, not understood as a door by the system or able to be operated as one by the player. While simulated and fictional doors might look the same at first glance, a merely fictional door can\u2019t take part in the make-believe world of a video game except as set dressing. You can\u2019t  play with it. By the 1990s many games featured increasingly elaborate stories\u2014some laden with video clips and famous actors\u2014but those stories were not, in any meaningful way, simulated. Like the stories in other media, they were merely fictional, painted on: unable to change in response to the player\u2019s actions except perhaps through brute-force authoring of alternatives.\n But as computing power continued to increase, some researchers had begun to wonder whether you could teach a computer enough about stories and characters and dramatic arcs\u2014the same way flight sims encoded wisdom about lift and drag and throttles\u2014that the system could tell a story that could be playful: reacting to the player, reshaping itself to whatever they tried to do while still telling the same core tale the author had devised. \u201cOne approach is to see them [the player and the system] in a kind of two-player game, such as chess,\u201d  wrote Joseph Bates, the Oz project\u2019s founder:\n The director and user are taking turns, the user acting as a free agent in the world, the director looking down from above and very gently pushing the elements of the world in various ways. The director is constantly trying to maximize the chances of a pleasing overall experience, no matter what the user does along the way. ...The director wins if the complete history of the world is consistent with the creator\u2019s aesthetic goals, thereby (presumably) pleasing the user.\n \u201cOur idea is to gently guide the users experience so it conforms in some way to an artistic destiny,\u201d another Oz researcher  posted on the rec.arts.int-fiction newsgroup in 1991, \u201cwhile at the same time allowing the user complete freedom of action.\u201d And while new technologies like virtual reality seemed imminently on the horizon, the easiest medium in which to prototype such a system was text games: projects like   LambdaMOO had already demonstrated how compelling and complex a text-based virtual world could become. The Oz project, at least at first, would  focus on \u201cdeveloping technology for high quality interactive fiction.\u201d\n In the experimental play, the actors and director were standing in for components of a yet-unbuilt computer program. The director represented a future algorithmic \u201cPlaywright\u201d who could re-plot a scenario in real-time based on the player\u2019s actions by feeding new instructions to the actors in their headsets. The actors in turn stood in for NPCs who would have some autonomy of their own, but could also pivot on a whim to adapt to the Playwright\u2019s new instructions. The details of the scenario, involving a troubled bus station customer who begins to turn violent, weren\u2019t really important: the point was to gather data on the strategies the Playwright and actors invented to keep the plot moving, and how the lone audience member experienced a performance tailored just for her. The goal was a first step toward  learning how to \u201ccreate a medium beyond \u2018static stories\u2019... [of] constructed yet unpredictable worlds.\u201d\n The project had evolved out of a line of academic thinking traced back to two 1986 dissertations, both by women, which would later become the foundations of modern digital game studies. Mary Ann Buckles\u2019 \u201cInteractive Fiction: The Computer Storygame \u2018Adventure\u2019\u201d had been one of the first book-length scholarly works to seriously study interactive fiction as new and unique medium, breaking down how  Crowther and Woods\u2019 genre-defining game both connected to earlier literary traditions and also functioned as a legitimately new medium. Brenda Laurel\u2019s \u201cToward the Design of a Computer-Based Interactive Fantasy System\u201d went a step further, positing a theory of how truly interactive and responsive stories might function. Inspired by Aristotle\u2019s  Poetics and live theatre traditions, Laurel defined an \u201cinteractive drama\u201d as \u201ca first-person experience within a fantasy world, in which the user may create, enact, and observe a character whose choices and actions affect the course of events just as they might in a play.\u201d Contemporary adventure games were a start, but entirely different from the truly interactive experience Laurel envisioned, driven by a digital Playwright trying its best to marry a human player\u2019s improvisations with a human author\u2019s story.\n Laurel had first developed these ideas at  an extraordinary meeting of minds arranged by computing pioneer Alan Kay, who in the 1960s had helped popularize many foundational concepts of modern computing, from windowed interfaces to word processing. In the early eighties, Atari had hired Kay as their chief scientist, and he promptly set up a think-tank and research lab to explore the future of games and entertainment technology. \u201cAlan\u2019s strategy was simple,\u201d remembers Laurel, part of Kay\u2019s cohort:\n create the richest possible environment and plop creative people into it, and something wonderful is bound to be the result. Atari in 1981-82 was the perfect place for such a grand experiment\u2014with revenues in excess of a billion dollars, the company was in a position to build a \u201cdream lab\u201d for creating the future of high-tech consumer products.\n Members of the group had wide leeway to devise their own experimental projects, requisitioning equipment and hiring contractors as needed. Surviving memos are filled with truly heady concepts: one from Laurel  wondered \u201cIs there a video game we could imagine that a human and a dolphin could play  together?\u201d In those days it felt like the sky could be the limit for the future of computer-enabled play, and the dreams were big. Kay believed that \u201cin order to do good research, one needs a \u2018grand idea\u2019\u2014a vision of something that might exist, far in the future and beyond our abilities to imagine it fully.\u201d Laurel\u2019s grand idea (after the dolphins, perhaps, got little traction) was a pitch for an ambitious game prototype that would immerse a player in an environment created by wraparound screens and simulated sound and lighting effects, maybe even smells. Inspired by the immersive nursery playroom in the Ray Bradbury story  \u201cThe Veldt,\u201d she imagined a rich multimedia experience where a concealed human Playwright would manipulate the projected images and deploy live actors to adapt an ongoing story to the player\u2019s actions. Laurel got as far as convincing Bradbury himself to be the system\u2019s first Playwright of a scenario based on his classic  Something Wicked This Way Comes. But it was not to be. Atari, hit hard by the videogame crash and suddenly more interested in immediate than distant futures, disbanded Kay\u2019s research group by early 1984.\n Laurel carried her work over into a PhD dissertation, which would in turn inspire another brilliant mind: Joseph Bates, a  child prodigy who\u2019d enrolled in college at age 13 and graduated before he could vote. Fifteen years later, he\u2019d started a research group at Carnegie Mellon devoted to inventing the future of interactive stories. Like Kay and Laurel, Bates was a big dreamer: \u201cyou have to be able to invent new, strange stuff, and you have to be able to throw out most of it,\u201d he once  noted. His initial missives for the Oz project were beyond ambitious: in an early critique of Laurel\u2019s thesis, he  wrote that her ideas of dynamic storytelling were too limiting because\n in these situations [an example from Laurel of an interactive  Hamlet] the user never ceases to be himself, in Hamlet\u2019s position. What if the user  is Hamlet... what if the user\u2019s mind is manipulated by the system to try to make the user think/feel like Hamlet, not just experience Hamlet\u2019s objective experiences?\n In lieu of any means for realizing this rather revisionist take on the nature of storytelling itself, Bates and his group hoped as a first step to at least build something like Laurel\u2019s hypothetical interactive drama system. They deconstructed  Infocom games like  Deadline to understand how they created the illusion of dynamic plot, and staged a variant of Laurel\u2019s unrealized theatre experiment with a human Playwright directing live actors, enlisting the help of Margaret Kelso, a professor in the CMU drama department. While small in scale, the experiment was nothing like what other researchers into games or A.I. were doing. It was \u201cnew, strange stuff\u201d indeed.\n Bates and a handful of graduate students soon began work on an interactive narrative engine called Oz, written in Common Lisp\u2014then the language of choice for anything connected to artificial intelligence. Initially the work was divided into  \u201csix sets of questions or problems:\u201d\n how to simulate the physical world [to \u201cprovide just enough of a physical reality to let authors construct interesting characters and stories\u201d], how to simulate the minds of characters, how to design the user interface, how to build a working theory of drama, how to design the world-building environment, and how to facilitate artistic use of the system.\n As more grad students came aboard the exciting project, each was set to work on one facet of the problem, many designing and prototyping new components of the overall Oz architecture. Most modules were named after a character from  L. Frank Baum\u2019s famous books. An engine to generate natural language descriptions of a simulated world was called Glinda; a parser to understand a wider range of natural language input was dubbed the Gump; a core framework for agents\u2014characters\u2014to operate within a virtual world was named Tok, after Dorothy\u2019s mechanical companion Tik-Tok who \u201cThinks, Speaks, Acts, and Does Everything but Live.\u201d\n One CMU grad student, Scott Neal Reilly, focused in on the problem of giving Tok characters more realistic behaviors and social understanding through a program called Em, for emotion (and Dorothy\u2019s aunt). \u201cThe goal of building believable agents is inherently an artistic one,\u201d Reilly  wrote:\n Traditional AI goals of creating competence and building models of human cognition are only tangentially related because creating believability is not the same as creating intelligence or realism. Therefore, the tools that have been designed for those tasks are not appropriate.\n \u201cBelievable\u201d agents, Reilly thought, would not make perfect plans and execute them in the most efficient way possible. Their plans might be ill-advised, and they ought to endearingly fail many times before succeeding, if they ever did, in ways designed to reveal their character and make players relate to them, cheer them, or despise them. Like many Oz students, Reilly had looked for inspiration outside computer science research, studying writers and Disney animators for the techniques they\u2019d used to bring memorable characters to life. \u201cArtists know how to create believable characters,\u201d he wrote, but \u201cAI researchers know how to create autonomous agents.\u201d The problem was finding a way to bring those disparate worlds together, to find a path \u201csomewhere between the arts and artificial intelligence\u201d: somewhere, you might say, over the rainbow.\n In the course of his dissertation work Reilly would build several small simulations to test Em. One of these,  The Playground, casts you as a school kid with the goal of trading baseball cards with your peers: Melvin, a friendly Star Trek nut, and Sluggo, a not-too-bright bully. The action played out in a small model world that seemed on the surface much like a traditional interactive fiction:\n You are in the playground.The sand box, the jungle gym and the tree house are in the playground.Sluggo is in the tree house.Sluggo is holding a Willie Mays trading card, a Jose Canseco trading card and a Catfish Hunter trading card.Melvin is in the sand box.Melvin is holding a Tom Seaver trading card, a Mickey Mantle trading card and a Reggie Jackson trading card.Melvin is wearing his eye glasses.You are holding a Babe Ruth trading card, a Ted Williams trading card and a Henry Aaron trading card.PLAYER&gt;  get in the sandboxYou go into the sand box.Sluggo spits.Melvin is now smiling.Melvin is speaking to you.Melvin\u2019s voice says ``Salutations, Vulcan ambassador! The Klingon high command has sent me in search of baseball cards.&#39;&#39;.PLAYER&gt;  melvin: What cards do the Klingon high command want?You are speaking to Melvin.Player\u2019s voice says ``What cards do the Klingon high command want?\u2019\u2019.Sluggo smokes.Melvin is speaking to you.Melvin\u2019s voice says ``The Klingon Emperor wants to know if you would be willing to part with Babe Ruth for Reggie Jackson?\u2019\u2019.PLAYER&gt;  Melvin: No way!You are speaking to Melvin.Player\u2019s voice says ``No way!\u2019\u2019.Sluggo spits.Melvin is speaking to you.Melvin\u2019s voice says ``I wouldn&#39;t be hasty if I were you. Reggie Jackson for Babe Ruth is a trade any Ferengi would be proud of.\u2019\u2019.PLAYER&gt;  Melvin: How about Ruth for Jackson and Mantle?\n While  Playground featured only a simple parser and text narration system\u2014the player\u2019s lines in the example above are mostly recognized through basic keyword matches, and the stilted output comes from a system that simply reports the status of the underlying simulation with no attempts at artifice\u2014the code driving character behavior was far more complex than any commercial text game had shipped with. Most games create NPC behavior with some equivalent of a list of if-then statements accounting for specific foreseen eventualities: something like \u201c If player offers Melvin a trade evaluated as good,  then say Melvin smiles and accepts the trade.\u201d But the Oz framework with Reilly\u2019s extensions broke this process down into many more steps, each of which had its own possibility to influence the outcome.\n For example: an earlier Oz prototype designed as a test bed for Tok and Em had simulated a cat named Lyotard, who would actually perceive things about the world through specific senses and use those impressions to update an internal representation of his model of reality. Lyotard might remember where he had last eaten food, for instance, and return there when hungry even if the player had since moved his tins of sardines. The tactile sensation of a comfy chair might cause an emotion of contentedness that could change Lyotard\u2019s reactions to events like a human walking into the room, or cause him to develop an attachment to fuzzy objects. Mistreating the virtual cat could make him develop long-term emotions of hatred towards you that would in turn affect his actions in your presence. Lyotard made decisions about what to do\u2014whether to allow an unfamiliar hand to pet him, for instance, or bite it\u2014based on a constantly shifting bank of sensory inputs, emotional states, and memories. While the results might not have seemed much different from a well-implemented cat in a traditional text adventure (like, say, the one in Graham Nelson\u2019s   Curses) the behind-the-scenes systems were laying the groundwork for worlds with truly emergent characters who could believably respond to unexpected events. They were characters transitioning from merely fictional to meaningfully simulated.\n Characters in Tok used a three-stage cycle of  sense,  think,  act to plan their behaviors, doing so in the context of goals they wished to achieve. Lyotard\u2019s goals might be taking a nap, or eating food when hungry. But Reilly hoped to introduce more complex emotional and social reasoning into the  think step that could handle human NPCs with more complex goals and drives than a house cat\u2019s. He began to extend Em to support more advanced emotional reasoning, using a language called Hap (also an Oz invention) to write reactive planner rules that defined how a character\u2019s simulated emotions might influence the formation and performance of goals. For instance, Hap code to define a trigger for a frustration emotion\u2014when an attempt to take steps toward completing a plan fails\u2014might look like this:\n (sequential-production update-frustration () (demon em-update-frustration-demon ;; LHS ;; Fire when a failed behavior has been put in ;; the $plan-failures slot and the importance of the ;; behavior is greater than 0 (and (match $plan-failures (list-containing ?plan)) (match (call importance ?plan) ?intensity) (&gt; ?intensity 0) ;; Create an emotion structure. Set the variable ;; ?emotion-structure to the structure (match (make frustration-emotion actor self cause ?plan frustration-production ?intensity) ?emotion-structure)) ;; RHS ;; Store the structure (mental-act (call add-emotion (slot emotion-type-hierarchy $em) $$emotion-structure `frustration)) ;; Remove the behavior from the $plan-failures slot (mental-act (setf $plan-failures (remove $$plan $plan-failures)))))\n Reilly created a library of a few dozen emotions that could each be defined as a consequence of interactions between an agent\u2019s goals and the model world. Fear, for instance, was the emotion \u201cwhen a goal is considered to be likely to fail and it is important to the agent that the goal not fail.\u201d Various events might cause happiness, such as \u201cA goal succeeds that the agent hoped would succeed.\u201d Resentment was felt \u201cwhen an agent dislikes another agent who is happy.\u201d Each emotion had an intensity and a rate of decay (hatred would linger much longer than disappointment) and could also be attached to the person or event that had caused it.\n Interacting with the world, then, each agent would accrue a set of active emotions which might alter their future behavior. While some behaviors were general, Reilly noted that most would be character-specific: in a traditional game the writer\u2019s prose would do most of the work of defining character, but an Oz game would lean much more on the way its characters behaved and reacted. In  The Playground, for instance, Trekkie Melvin feels joy when the player uses Star Trek lingo in their interactions with him; enjoys the social interaction of trading cards more than the specifics of making a good trade; and feel\n......", "posttime": "2021-06-18 03:03:06", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6e38\u620f,text,\u8bbe\u8ba1", "title": "50\u5e74\u7684\u6587\u672c\u6e38\u620f -  CMU\u7684OZ\u9879\u76ee\uff081994\uff09 ", "title_en": "50 Years of Text Games \u2013 CMU's Oz Project (1994)", "transed": 1, "url": "https://if50.substack.com/p/1994-the-playground", "via": "", "real_tags": ["\u6e38\u620f", "text", "\u8bbe\u8ba1"]}, {"category": "", "categoryclass": "", "imagename": "e727e10aa9ea71d5d9b6816c63df8db0.jpg", "infoid": 1066526, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\nIC\uff1a\u5c11\u6570\u4eba\u8003\u8651\u4f60\uff06\uff0339; Zen\uff06\uff0339\u7684\u7236\u4eb2\uff0c\u4f60\u89c9\u5f97\u4f60\u4f1a\u5212\u5230\u90a3\u4e2a\u804c\u4f4d\u5417\uff1f\u6216\u8005\u5e94\u8be5\u53bb\u522b\u4eba\u5417\uff1f\n  jk\uff1a\u4e5f\u8bb8\u662f\u5176\u4e2d\u4e00\u4e2a\u53d4\u53d4\u3002\u7985\u4e0a\u6709\u5f88\u591a\u771f\u6b63\u7684\u4f1f\u4eba\u3002\u5728\u5168\u7403\u8303\u56f4\u5185\uff0cSoC\u56e2\u961f\u90e8\u5206\u5728\u5965\u65af\u6c40\u548c\u90e8\u5206\u5728\u5370\u5ea6\u7684\u65b9\u6cd5\u4e2d\uff0c\u6d6e\u70b9\u7f13\u5b58\u662f\u5728\u79d1\u7f57\u62c9\u591a\u5dde\u5b8c\u6210\u7684\uff0c\u6838\u5fc3\u6267\u884c\u524d\u7aef\u5728\u5965\u65af\u6c40\uff0c\u6b66\u5668\u524d\u7aef\u662f\u6851\u5c3c\u7ef4\u5c14\uff0c\u6211\u4eec\u6709\u826f\u597d\u7684\u6280\u672f\u9886\u5bfc\u8005\u3002\u6211\u5728\u65e5\u5e38\u6c9f\u901a\u65f6\u6709\u4e00\u6bb5\u65f6\u95f4\u6c9f\u901a\uff0c\u82cf\u4e39\u6d85\u00b7\u666e\u62c9\u59c6\u548c\u53f2\u8482\u592b\u5e0c\u83b1\u6709\u70b9\u5efa\u9020\u7985\u5b97\u6838\u5fc3\u7684\u524d\u7aef\uff0c\u4ee5\u53ca\u79d1\u7f57\u62c9\u591a\u961f\u3002\u8fd9\u771f\u7684\u5f88\u68d2\u7684\u4eba\u3002 Mike Clark\uff06\uff0339;\u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u5efa\u7b51\u5e08\uff0c\u6240\u4ee5\u6211\u4eec\u6709\u5f88\u591a\u4e50\u8da3\uff0c\u6210\u529f\u3002\u6210\u529f\u6709\u5f88\u591a\u4f5c\u8005 - \u5931\u8d25\u6709\u4e00\u4e2a\u3002\u6240\u4ee5\u8fd9\u53d6\u5f97\u4e86\u6210\u529f\u3002\u7136\u540e\u4e00\u4e9b\u7403\u961f\u52a0\u5f3a\u4e86 - \u6211\u4eec\u5c06\u6316\u6398\u673a\u79fb\u52a8\u5230\u6ce2\u58eb\u987f\u56e2\u961f\uff0c\u4ed6\u4eec\u63a5\u7ba1\u4e86\u6574\u7406\u8bbe\u8ba1\u548c\u7269\u8d28\uff0c\u54c8\u5229\u535a\u89c8\u4f1a\u548c\u4ed6\u7684\u5bb6\u4f19\u5bf9\u6b64\u505a\u5f97\u5f88\u597d\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6240\u505a\u7684\u4e00\u4e9b\u76f8\u5f53\u538b\u529b\u7684\u7ec4\u7ec7\u53d8\u9769\uff0c\u7ecf\u5386\u4e86\u8fd9\u4e00\u70b9\u3002\u56e2\u961f\u90fd\u805a\u96c6\u5728\u4e00\u8d77\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u5b83\u6709\u5f88\u591aCamaraderie\u3002\u6240\u4ee5\u6211\u8d62\u5f97\u4e86\uff06\uff0339;\u636e\u79f0\u662f\u201c\u7236\u4eb2\u201d - \u6211\u88ab\u5e26\u5230\u4e86\uff0c\u4f60\u77e5\u9053\uff0c\u4f5c\u4e3a\u717d\u52a8\u8005\u548c\u9996\u5e2d\u63a8\u8fdb\uff0c\u4f46\u67b6\u6784\u5e08\u90e8\u95e8\u7684\u8f6c\u578b\u9886\u5bfc\u8005\u3002\u86ee\u597d\u73a9\u7684\u3002\n  IC\uff1a\u4f60\u73b0\u5728\u5728AMD\u5de5\u4f5c\u7684\u4e00\u5207\uff0c\u8fd8\u662f\u8fd8\u5728\u90a3\u91cc\uff0c\u6709\u70b9\u8def\u7ebf\u56fe\u4ecd\u7136\u51fa\u73b0\uff0c\u4f60\u89c9\u5f97\u4f60\u4ece\u4f60\u5e2e\u52a9\u5ba3\u4f20\u7684\u60f3\u6cd5\u4e2d\u601d\u8003\u5417\uff1f\n  JK\uff1a\u6240\u4ee5\u5f53\u4f60\u5efa\u9020\u4e00\u53f0\u65b0\u7535\u8111\u65f6\uff0cZen\u662f\u4e00\u53f0\u65b0\u7535\u8111\u65f6\uff0c\u8fd8\u5728\u8fdb\u884c\u5de5\u4f5c\u3002\u4f60\u57fa\u672c\u4e0a\u5efa\u7acb\u4e86\u4e00\u4e2a\u8def\u7ebf\u56fe\uff0c\u6240\u4ee5\u6211\u6b63\u5728\u8003\u8651\u82af\u7247\u540e\u7684\u4e94\u5e74\u6765\u505a\u4e9b\u4ec0\u4e48\u3002\u5f53\u6211\u4eec\u5728\u82f9\u679c\u5efa\u9020\u7b2c\u4e00\u4e2a\u5927\u6838\u5fc3\u65f6\uff0c\u6211\u4eec\u4e5f\u5728\u82f9\u679c\u4e2d\u505a\u5230\u4e86\u8fd9\u4e00\u70b9 - \u6211\u4eec\u5efa\u9020\u4e86\u5927\u9aa8\u5934[\u8fdb\u5165\u8bbe\u8ba1]\u3002\u5f53\u60a8\u66f4\u5feb\u5730\u8fdb\u884c\u8ba1\u7b97\u673a\u65f6\uff0c\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9 - \u4f60\u4f7f\u57fa\u672c\u7ed3\u6784\u66f4\u5927\uff0c\u6216\u8005\u4f60\u7684\u8c03\u6574\u529f\u80fd\uff0c\u7985\u6709\u4e00\u4e2a\u5927\u7ed3\u6784\u3002\u7136\u540e\u51e0\u4ee3\u4eba\u9075\u5faa\u4e86\u660e\u663e\u7684\u4e8b\u60c5\u8981\u505a\u3002\u4ed6\u4eec\u4e00\u76f4\u5728\u5173\u6ce8\u8fd9\u4e00\u70b9\u3002\n  \u6240\u4ee5\u5728\u67d0\u4e9b\u65f6\u5019\uff0c\u4ed6\u4eec\u5c06\u4e0d\u5f97\u4e0d\u505a\u53e6\u4e00\u4e2a\u5927\u5199\u548c\u6539\u53d8\u3002\u6211\u4e0d\u77e5\u9053\u4ed6\u4eec\u662f\u5426\u5f00\u59cb\u4e86\u3002\u6211\u4eec\u4e3a\u5efa\u7b51\u7ee9\u6548\u6539\u8fdb\u8ba1\u5212\u7684\u8ba1\u5212\u662f\u76f8\u5f53\u5927\u7684\uff0c\u51e0\u5e74\u6765\uff0c\u4ed6\u4eec\u4f3c\u4e4e\u6b63\u5728\u505a\u51fa\u5f88\u5927\u7684\u5de5\u4f5c\u3002\u4f46\u662f\u6211\u5df2\u7ecf\u79bb\u5f00\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e86\u4e00\u6bb5\u65f6\u95f4 - \u73b0\u5728\u56db\u5230\u4e94\u5e74\u3002\n  IC\uff1a\u662f\u7684\uff0c\u6211\u8ba4\u4e3a\u4ed6\u4eec\u8bf4Zen 3\uff0c\u6700\u540e\u4e00\u4e2a\u521a\u51fa\u6765\u7684\u662f\u91cd\u5199\u3002\u6240\u4ee5\u6211\u8ba4\u4e3a\u6709\u4e9b\u4eba\u5728\u601d\u8003\u4ecd\u7136\u5728\u4f60\u7684\u65b9\u5411\u4e4b\u4e0b\u3002\n  JK\uff1a\u662f\u7684\uff0c\u5b83\u5f88\u96be\u8bf4\uff06\uff0339;\u5373\u4f7f\u6211\u4eec\u505a\u4e86\u7985\u5b97\uff0c\u6211\u4eec\u4e5f\u4ece\u5934\u5f00\u59cb\u8bbe\u8ba1\u4e86 - \u9876\u90e8\u7684\u6e05\u6d01\u8bbe\u8ba1\u3002\u4f46\u662f\u5f53\u4ed6\u4eec\u5efa\u9020\u5b83\u65f6\uff0c\u6709\u4e00\u5806\u6765\u81ea\u63a8\u571f\u673a\u7684RTL\u548c\u6377\u8c79\uff0c\u8fd9\u662f\u5b8c\u5168\u826f\u597d\u7684\u4f7f\u7528\u3002\u4ed6\u4eec\u521a\u521a\u88ab\u4fee\u6539\u5e76\u5185\u7f6e\u4e8e\u65b0\u7684\u7985\u5b97\u7ed3\u6784\u4e2d\u3002\u6240\u4ee5\u786c\u4ef6\u5bb6\u4f19\u5728\u4f7f\u7528\u4ee3\u7801\u65f6\u975e\u5e38\u64c5\u957f\uff06\uff0339;\u597d\u3002 \n\u6240\u4ee5\u5f53\u4ed6\u4eec\u8bf4\u4ed6\u4eec\u505a\u4e86\u4e00\u4e2a\u5927\u5199\u7684\u65f6\u5019\uff0c\u4ed6\u4eec\u53ef\u80fd\u62ff\u4e86\u4e00\u4e9b\u788e\u7247\u5e76\u5728\u9876\u90e8\u91cd\u65b0\u5f52\u6863\u5b83\u4eec\uff0c\u4f46\u662f\u5f53\u4ed6\u4eec\u5efa\u7acb\u4ee3\u7801\u65f6\uff0c\u5b83\u4f1a\u5728\u4ee3\u7801\u768420\uff05\u548c80\uff05\u4e4b\u95f4\u7ed9\u6211\u4e00\u4e2a\u60ca\u559c\u3002\u662f\u76f8\u540c\u7684\u4e1c\u897f\uff0c\u8fd8\u662f\u6e29\u548c\u5730\u4fee\u6539\uff0c\u4f46\u662f\u90a3\u4e2a\uff06\uff0339;\u975e\u5e38\u6b63\u5e38\u3002\u5173\u952e\u662f\u8981\u83b7\u5f97\u7ed3\u6784\u6743\uff0c\u7136\u540e\u6839\u636e\u9700\u8981\u91cd\u590d\u4f7f\u7528\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u91c7\u53d6\uff06\uff0339; s\u590d\u6742\uff0c\u8bd5\u56fe\u8c03\u6574\u5b83\u4ee5\u67d0\u4e2a\u5730\u65b9\u7684\u4e1c\u897f\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4ed6\u4eec\u505a\u4e86\u91cd\u5199\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4fee\u590d\u7ed3\u6784\u3002\n      IC\uff1a\u6211\u77e5\u9053\u5b83\u4ecd\u7136\u662f\u65b0\u9c9c\u7684\uff0c\u6240\u4ee5\u6211\u4e0d\u786e\u5b9a\u4f60\u8fd8\u5728\u7684\u5185\u5bb9\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u4f46\u4f60\u5728\u82f1\u7279\u5c14\u7684\u5de5\u4f5c - \u8fd9\u662f\u4e00\u4e2a\u5e72\u51c0\u7684\u77f3\u677f\uff1f\u4f60\u80fd\u8be6\u7ec6\u4ecb\u7ecd\u4f60\u5728\u90a3\u91cc\u505a\u4e86\u4ec0\u4e48\u5417\uff1f\n  JK\uff1a\u6211\u4e0d\u80fd\u8bf4\u592a\u591a\uff0c\u663e\u7136\u3002\u6211\u66fe\u5728\u7845\u5de5\u7a0b\u96c6\u56e2\u7684\u9ad8\u7ea7\u526f\u603b\u88c1\uff0c\u8be5\u56e2\u961f\u4e3a10,000\u4eba\u3002\u4ed6\u4eec\u505a\u4e86\u8fd9\u4e48\u591a\u4e0d\u540c\u7684\u4e1c\u897f\uff0c\u5b83\uff06\uff0339;\u53ea\u662f\u60ca\u4eba\u3002\u8fd9\u662f60\u621670\u4e2aSOC\u7684\u4e1c\u897f\u662f\u4e00\u6b21\u98de\u884c\uff0c\u4ece\u5b57\u9762\u4e0a\u4ece\u8bbe\u8ba1\u5230\u539f\u578b\uff0c\u8c03\u8bd5\u548c\u751f\u4ea7\u4e2d\u3002\u56e0\u6b64\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f8\u5f53\u591a\u6837\u7684\u7fa4\u4f53\uff0c\u6211\u7684\u5458\u5de5\u662f\u526f\u603b\u88c1\u548c\u9ad8\u7ea7\u7814\u7a76\u5458\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u4e2a\u5927\u578b\u7ec4\u7ec7\u7684\u4e8b\u60c5\u3002\n  \u6211\u4ee5\u4e3a\u6211\u8981\u53bb\u90a3\u91cc\uff0c\u56e0\u4e3a\u6709\u4e00\u5806\u65b0\u6280\u672f\u6765\u5efa\u7acb\u3002\u6211\u82b1\u4e86\u5927\u90e8\u5206\u65f6\u95f4\u4e0e\u56e2\u961f\u5408\u4f5c\u6709\u5173\u7ec4\u7ec7\u548c\u65b9\u6cd5\u7684\u8f6c\u578b\uff0c\u5982\u65b0\u7684CAD\u5de5\u5177\uff0c\u65b0\u65b9\u6cd5\uff0c\u5efa\u7acb\u82af\u7247\u7684\u65b0\u65b9\u6cd5\u3002\u5728\u6211\u52a0\u5165\u4e4b\u524d\uff0c\u4ed6\u4eec\u5f00\u59cb\u4e86\uff06\uff0339; s\u79f0\u4e3a\u5efa\u7b51\u7b79\u7801\u7684SoC IP\u89c6\u56fe\uff0c\u4e0e\u82f1\u7279\u5c14\uff06\uff0339; S\u5386\u53f2\u7684\u6574\u4f53\u89c6\u56fe\u3002\u8fd9\u662f\u8bda\u5b9e\u7684\u4e0d\u662f\uff0c\u56e0\u4e3a\u4ed6\u4eec\u62ff\u4e86\u6574\u4f53\u7b79\u7801\uff0c\u4ed6\u4eec\u62ff\u8d70\u4e86\u4f1f\u5927\u7684\u5ba2\u6237\u548c\u670d\u52a1\u5668\u96f6\u4ef6\uff0c\u53ea\u9700\u5c06\u5176\u6253\u5165\u788e\u7247\u3002\u4f60\u53ef\u4ee5\uff06\uff0339; t\u53ea\u662f\u5c06\u5b83\u5206\u6210\u788e\u7247 - \u4f60\u5fc5\u987b\u5b9e\u9645\u91cd\u5efa\u8fd9\u4e9b\u788e\u7247\uff0c\u4e00\u4e9b\u65b9\u6cd5\u4e0e\u5b83\u4e00\u8d77\u4f7f\u7528\u3002\n  \u6211\u4eec\u53d1\u73b0\u4e86\u4e00\u7fa4\u4eba[\u5185\u90e8]\u8c01\u771f\u7684\u5f88\u5174\u594b\u5730\u52aa\u529b\u5de5\u4f5c\uff0c\u6211\u4e5f\u82b1\u4e86\u5f88\u591a\u65f6\u95f4\u5bf9\u77e5\u8bc6\u4ea7\u6743\u8d28\u91cf\uff0cIP\u5bc6\u5ea6\uff0c\u56fe\u4e66\u9986\uff0c\u8868\u5f81\uff0c\u8fc7\u7a0b\u6280\u672f\u3002\u4f60\u53eb\u5b83\uff0c\u6211\u5728\u4e0a\u9762\u3002\u6211\u7684\u65e5\u5b50\u6709\u70b9\u72c2\u91ce - \u6709\u4e9b\u65e5\u5b50\u6211\u6709\u4e00\u5929\u670914\u4e2a\u4e0d\u540c\u7684\u542b\u4e49\u3002\u5b83\u53ea\u662f\u70b9\u51fb\uff0c\u5355\u51fb\uff0c\u5355\u51fb\uff0c\u70b9\u51fb\uff0c\u5982\u6b64\u591a\u7684\u4e8b\u60c5\u6b63\u5728\u8fdb\u884c\u4e2d\u3002\n    JK\uff1a\u6211\u4e0d\u5728\u6280\u672f\u4e0a\u5b8c\u6210\u4efb\u4f55\u4e8b\u60c5\uff01\u6211\u88ab\u544a\u77e5\u6211\u662f\u9ad8\u7ea7\u526f\u603b\u88c1 - \u5b83\uff06\uff0339; S\u8bc4\u4f30\uff0c\u8bbe\u7f6e\u65b9\u5411\uff0c\u505a\u51fa\u5224\u65ad\u7535\u8bdd\uff0c\u6216\u8005\u8ba9\u6211\u4eec\u8bf4\u5c1d\u8bd5\u4e00\u4e9b\u7ec4\u7ec7\u53d8\u9769\uff0c\u6216\u8005\u4eba\u4eec\u6539\u53d8\u3002\u8fd9\u662f\u4e00\u6bb5\u65f6\u95f4\u540e\u52a0\u8d77\u6765\u3002\u77e5\u9053\uff0c\u5230\u8fbe\u67d0\u4e2a\u5730\u65b9\u7684\u5173\u952e\u662f\u8981\u77e5\u9053\u4f60\u8981\u53bb\u54ea\u91cc\uff0c\u7136\u540e\u628a\u4e00\u4e2a\u7ec4\u7ec7\u653e\u5728\u9002\u5f53\u7684\u5730\u65b9\uff0c\u77e5\u9053\u5982\u4f55\u505a\u5230\u8fd9\u4e00\u70b9 - \u8fd9\u9700\u8981\u5f88\u591a\u5de5\u4f5c\u3002\u6240\u4ee5\u6211\u5728\u5199\u4e86\u5f88\u591a\u4ee3\u7801\uff0c\u4f46\u6211\u786e\u5b9e\u53d1\u9001\u4e86\u5f88\u591a\u77ed\u4fe1\u3002\n  IC\uff1a\u73b0\u5728\u82f1\u7279\u5c14\u5728\u5e15\u7279\u76d6\u6797\u683c\u62e5\u6709\u4e00\u4e2a\u65b0\u7684\u5de5\u7a0b\u4e13\u6ce8\u7684\u9996\u5e2d\u6267\u884c\u5b98\u3002\u5982\u679c\u6b63\u786e\u7684\u673a\u4f1a\u63d0\u51fa\u6765\uff0c\u4f60\u4f1a\u8003\u8651\u56de\u6765\u5417\uff1f \nJK\uff1a\u6211\u4e0d\u77e5\u9053\u3002\u6211\u73b0\u5728\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u8da3\u7684\u5de5\u4f5c\uff0c\u5728\u4e00\u4e2a\u975e\u5e38\u7206\u70b8\u7684\u589e\u957f\u5e02\u573a\u4e2d\u3002\u6240\u4ee5\u6211\u795d\u613f\u4ed6\u662f\u6700\u597d\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u9009\u62e9[\u62cd\u540d\u9996\u5e2d\u6267\u884c\u5b98]\uff0c\u6211\u5e0c\u671b\u5b83\uff06\uff0339;\uff06\uff0339;\u6211\u4eec\uff06\uff0339; ll\u770b\u5230\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u4ed6\u80af\u5b9a\u5173\u5fc3\u82f1\u7279\u5c14\u7684\u5f88\u591a\u5173\u4e8e\u82f1\u7279\u5c14\u7684\u5f88\u591a\uff0c\u4ed6\u66fe\u7ecf\u6709\u8fc7\u771f\u6b63\u7684\u6210\u529f\u3002\u4ed6\u80af\u5b9a\u4f1a\u7ed9\u516c\u53f8\u5e26\u6765\u66f4\u591a\u7684\u6280\u672f\u7126\u70b9\u3002\u4f46\u6211\u559c\u6b22\u548c\u9c8d\u52c3\u5929\u9e45\u4e00\u8d77\u5de5\u4f5c\uff0c\u6240\u4ee5\u6211\u4eec\uff06\uff0339;\u8bf7\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\n      IC\uff1a\u60a8\u73b0\u5728\u662f\u6765\u81eaAMD\u7684\u51e0\u5bb6\u516c\u53f8\uff0c\u5728\u4e00\u5bb6\u540d\u4e3aTonstorrent\u7684\u516c\u53f8\uff0c\u5728Ljubisa Bajic\u7684\u4e00\u4f4d\u8001\u670b\u53cb\u3002\u60a8\u5df2\u4ece\u516c\u53f8\u8df3\u5230\u516c\u53f8\u5230\u516c\u53f8\uff0c\u57fa\u672c\u4e0a\u662f\u60a8\u7684\u6574\u4e2a\u804c\u4e1a\u751f\u6daf\u3002\u4f60\u603b\u662f\u627e\u5230\u53e6\u4e00\u4e2a\u9879\u76ee\uff0c\u53e6\u4e00\u4e2a\u673a\u4f1a\uff0c\u53e6\u4e00\u4e2a\u89d2\u5ea6\u3002\u4e0d\u8981\u592a\u50bb\u4e86\uff0c\u4f46\u662f\u8981\u6210\u4e3a\u4e00\u4e2a\u6c38\u8fdc\u7684\u5bb6\u5417\uff1f\n  JK\uff1a\u9996\u5148\uff0c\u6211\u662f\u6570\u5b57\uff08DEC\uff0915\u5e74\uff0c\u5bf9\u5427\uff01\u73b0\u5728\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u804c\u4e1a\u751f\u6daf\uff0c\u56e0\u4e3a\u6211\u5728\u4e2d\u6863\u96c6\u56e2\u4e2d\uff0c\u6211\u4eec\u5efa\u9020\u4e86ECL\u7684\u7535\u8111 - \u8fd9\u4e9b\u662f\u51b0\u7bb1\u5927\u5c0f\u7684\u76d2\u5b50\u3002\u6211\u5728DEC Alpha\u56e2\u961f\u4e2d\uff0c\u6211\u4eec\u6784\u5efa\u4e86\u5c0f\u5fae\u5904\u7406\u5668\uff0c\u5c0f\u5c0f\u7684\u4e1c\u897f\uff0c\u5f53\u65f6\u6211\u4eec\u8ba4\u4e3a\u662f\u5de8\u5927\u7684\u3002\u8fd9\u4e9b\u662f50\u74e6\u7684300\u5e73\u65b9\u7c73\uff0c\u5439\u8fc7\u6bcf\u4e2a\u4eba\u548c\uff0339;\n  \u6240\u4ee5\u6211\u5728\u90a3\u91cc\u6709\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u5306\u5306\u53bb\u4e86AMD\uff0c\u6211\u4eec\u5728\u51e0\u5e74\u5185\u5b8c\u6210\u4e86\u4e00\u5927\u5806\u7684\u4e1c\u897f\u3002\u6211\u4eec\u5f00\u59cbOpteron\uff0cHyperTransport\uff0c2P\u670d\u52a1\u5668 - \u5b83\u662f\u4e00\u4e2a\u65cb\u98ce\u7684\u5730\u65b9\u3002\u4f46\u6211\u88ab\u5438\u5165\u6216\u9677\u5165\u4e92\u8054\u7f51\u7684\u70ed\u60c5\uff0c\u6211\u53bb\u4e86Sibyte\uff0c\u7531Broadcom\u4e70\u4e86\u4e00\u4e0b\uff0c\u6211\u603b\u5171\u6709\u56db\u5e74\u3002\u6211\u4eec\u63d0\u4f9b\u4e86\u51e0\u4ee3\u4ea7\u54c1\u3002\n  \u7136\u540e\u6211\u5728P.A Semi\u4e0a\uff0c\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u68d2\u7684\u4ea7\u54c1\uff0c\u4f46\u4ed6\u4eec\u771f\u7684\u60f3\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u9500\u552e\u4ea7\u54c1\uff0c\u6216\u8005\u4ed6\u4eec\u8ba4\u4e3a\u4ed6\u4eec\u4f1a\u628a\u5b83\u5356\u7ed9\u82f9\u679c\u3002\u6211\u5b9e\u9645\u4e0a\u53bb\u4e86\u82f9\u679c\uff0c\u7136\u540e\u82f9\u679c\u4e70\u4e86p.a\u534a\uff0c\u7136\u540e\u6211\u4e3a\u90a3\u652f\u7403\u961f\u5de5\u4f5c\uff0c\u6240\u4ee5\u4f60\u77e5\u9053\u6211\u5728p.a\u534a\u548c\u82f9\u679c\u4e4b\u95f4\u3002\u90a3\u662f\u4e03\u5e74\u7684\uff0c\u6240\u4ee5\u6211\u6ca1\u6709\u771f\u7684\u89c9\u5f97\u8fd9\u592a\u8df3\u4e86\u592a\u591a\u4e86\u3002\n  \u7136\u540e\u6211\u89c9\u5f97\u6211\u731c\u5230\u4e86AMD\uff0c\u8fd9\u5f88\u6709\u8da3\u3002\u7136\u540e\u6211\u53bb\u4e86Tesla\uff0c\u6211\u4eec\u63d0\u4f9b\u786c\u4ef63\uff08Tesla Autopilot\uff09\u3002\u6240\u4ee5\u90a3\u79cd\u6709\u70b9\u8c61\u5f81\u3002\u4ece\u7ad9\u7acb\u5f00\u59cb\u572818\u4e2a\u6708\u5f00\u8f66 - \u6211\u4e0d\u60f3\u4ee5\u524d\u66fe\u7ecf\u505a\u8fc7\uff0c\u5e76\u4e14\u8be5\u4ea7\u54c1\u771f\u7684\u6210\u529f\u5730\u53d1\u8d27\u4e86\u3002\u4ed6\u4eec\u53bb\u5e74\u5efa\u7acb\u4e86\u4e00\u767e\u4e07\u3002\u7279\u65af\u62c9\u548c\u82f1\u7279\u5c14\u662f\u4e00\u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u65cb\u98ce\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u8bf4\u6211\u8df3\u8fdb\u53bb\u4e86\u3002\u6211\u80af\u5b9a\u6709\u5f88\u591a\u4e50\u8da3\u3002\n  \u6240\u4ee5\u662f\u7684\uff0c\u6211\u4e00\u76f4\u5728\u5de6\u53f3\u3002\u6211\u559c\u6b22\u8ba4\u4e3a\u6211\u4e3b\u8981\u5b8c\u6210\u6211\u6240\u5f00\u653e\u7684\u4e8b\u60c5\u3002\u6211\u7684\u6210\u529f\u5c31\u5728\u63d0\u4f9b\u6301\u4e45\u4ef7\u503c\u7684\u4ea7\u54c1\u65b9\u9762\u975e\u5e38\u9ad8\u3002\u6211\u4e0d\u662f\u90a3\u5bb6\u4f19\u5728\u751f\u4ea7\u4e2d\u8c03\u6574\u7684\u4eba - \u5b83\u662f\u4e00\u5f20\u5e72\u51c0\u7684\u7eb8\u5f20\u6216\u5b8c\u6574\u7684\u707e\u96be\u3002\u8fd9\u4f3c\u4e4e\u662f\u6211\u6700\u597d\u7684\u4e8b\u60c5\u3002\u5b83\uff06\uff0339;\u5f88\u9ad8\u5174\u77e5\u9053\u81ea\u5df1 - \u6211\u4e0d\u662f\u8fd0\u8425\u7ecf\u7406\u3002\u6240\u4ee5tonstorrent\u66f4\u52a0\u6e05\u6670\u7684\u7eb8\u5f20\u3002 AI\u7a7a\u95f4\u6b63\u5728\u7206\u70b8\u3002\u516c\u53f8\u672c\u8eab\u5df2\u7ecf\u591a\u5e74\u4e86\uff0c\u4f46\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5efa\u7acb\u65b0\u4e00\u4ee3\u96f6\u4ef6\uff0c\u5e76\u5f00\u59cb\u4e0a\u5e02\u5e76\u5f00\u59cb\u9500\u552e\u4e1c\u897f\u3002\u6211CTO\u548c\u603b\u7edf\uff0c\u5728\u516c\u53f8\u6709\u5f88\u5927\u7684\u80a1\u4efd\uff0c\u5728\u7ecf\u6d4e\u4e0a\u4ee5\u53ca\u5bf9\u6211\u7684\u670b\u53cb\u7684\u627f\u8bfa\uff0c\u6240\u4ee5\u6211\u8ba1\u5212\u5728\u8fd9\u91cc\u5f85\u4e00\u6bb5\u65f6\u95f4\u3002 \nIC\uff1a\u6211\u89c9\u5f97\u4f60\u5728\u8d85\u8d8a\u4e86\u77e9\u9635\u4e4b\u5916\uff0c\u4f60\u6700\u7ec8\u5f97\u5230\u4e86\u5927\u89c4\u6a21\u7684\u56fe\u5f62\u7ed3\u6784\uff0c\u7279\u522b\u662f\u5bf9\u4e8eAI\u548cML\uff0c\u4ee5\u53ca\u5173\u4e8eTenstorrent\u7684\u6574\u70b9\uff0c\u5b83\u662f\u4e00\u4e2a\u56fe\u7f16\u8bd1\u5668\u548c\u56fe\u5f62\u8ba1\u7b97\u5f15\u64ce\uff0c\u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u7b80\u5355\u77e9\u9635\u4e58\u4ee5\u3002\n  JK\uff1a\u6765\u81ea\u65e7\u6570\u5b66\uff0c\u6211\u4e0d\u662f\u4e00\u4e2a\u6570\u5b66\u5bb6\uff0c\u6240\u4ee5\u6570\u5b66\u5bb6\u4f1a\u754f\u7f29\u4e00\u70b9\uff0c\u4f46\u662f\u6709\u6807\u91cf\u6570\u5b66\uff0c\u50cfA = B + C X D.\u5f53\u4f60\u6709\u5c11\u91cf\u6676\u4f53\u7ba1\u65f6\uff0c\u4f60\u53ef\u4ee5\u505a\u7684\u6570\u5b66\u6570\u5b66\u3002\u73b0\u5728\u6211\u4eec\u6709\u66f4\u591a\u7684\u6676\u4f53\u7ba1\uff0c\u4f60\u53ef\u4ee5\u8bf4'\u6211\u53ef\u4ee5\u505a\u90a3\u4e9b'\u7684\u77e2\u91cf'\uff0c\u5c31\u50cf\u4e00\u6b65\u4e2d\u6b63\u786e\u7684\u7b49\u5f0f\u4e00\u6837\u3002\u7136\u540e\u6211\u4eec\u6709\u66f4\u591a\u7684\u6676\u4f53\u7ba1\uff0c\u6211\u4eec\u53ef\u4ee5\u4e58\u4ee5\u77e9\u9635\u3002\u7136\u540e\uff0c\u968f\u7740\u6211\u4eec\u83b7\u5f97\u66f4\u591a\u6676\u4f53\u7ba1\uff0c\u60a8\u5e0c\u671b\u62cd\u6444\u90a3\u4e9b\u5927\u578b\u64cd\u4f5c\u5e76\u6253\u7834\u5b83\u4eec\uff0c\u56e0\u4e3a\u5982\u679c\u60a8\u4f7f\u77e9\u9635\u4e58\u6570\u592a\u5927\uff0c\u5219\u521a\u521a\u8de8\u8d8a\u5355\u4f4d\u7684\u529b\u91cf\u662f\u6d6a\u8d39\u80fd\u91cf\u3002\n  \u6240\u4ee5\u4f60\u53d1\u73b0\u4f60\u60f3\u5efa\u7acb\u8fd9\u4e2a\u6700\u4f18\u5927\u5c0f\u7684\u5757\uff0c\u8fd9\u4e0d\u662f\u592a\u5c0f\u7684\uff0c\u5c31\u50cfGPU\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u4f46\u5b83\u5e76\u4e0d\u592a\u5927\uff0c\u5c31\u50cf\u7528\u4e00\u4e2a\u77e9\u9635\u4e58\u6570\u8986\u76d6\u6574\u4e2a\u82af\u7247\u4e00\u6837\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u975e\u5e38\u611a\u8822\u7684\u89c2\u70b9\u3002\u6240\u4ee5\u90a3\u4e48\u4f60\u5f97\u5230\u8fd9\u4e2a\u4e2d\u7b49\u5927\u5c0f\u7684\u5904\u7406\u5668\u6570\u7ec4\uff0c\u5176\u4e2d\u4ecb\u8d28\u662f\u56db\u4e2a\u9876\u90e8\u3002\u8fd9\u5bf9\u6211\u6765\u8bf4\u4ecd\u7136\u5f88\u5174\u594b\uff0c\u56e0\u4e3a\u6211\u8bb0\u5f97\u90a3\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57\u3002\u4e00\u65e6\u4f60\u6253\u7834\u4e86\u90a3\u4e2a\uff0c\u73b0\u5728\u4f60\u5fc5\u987b\u91c7\u53d6\u5927\u578b\u64cd\u4f5c\u5e76\u5c06\u5b83\u4eec\u6620\u5c04\u5230\u5904\u7406\u5668\u6570\u7ec4\uff0cAI\u770b\u8d77\u6765\u50cf\u662f\u975e\u5e38\u5927\u7684\u64cd\u4f5c\u56fe\u3002\u5b83\u4ecd\u7136\u662f\u4e00\u4e2a\u56fe\u8868\uff0c\u7136\u540e\u5c06\u5927\u578b\u64cd\u4f5c\u9677\u5165\u8f83\u5c0f\u7684\u56fe\u5f62\u3002\u73b0\u5728\uff0c\u60a8\u5fc5\u987b\u5728\u5177\u6709\u8bb8\u591a\u5904\u7406\u5668\u7684\u82af\u7247\u4e0a\u94fa\u8bbe\u51fa\u6765\uff0c\u5e76\u56f4\u7ed5\u5b83\u6d41\u52a8\u3002\n  \u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u4e0d\u540c\u7684\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u8fd0\u884c\u5411\u91cf\u6216\u77e9\u9635\u7a0b\u5e8f\u3002\u6240\u4ee5\u6211\u4eec\u6709\u65f6\u79f0\u4e3a\u6807\u91cf\u77e2\u91cf\u77e9\u9635\u3002 Raja\u66fe\u7ecf\u8c03\u7528\u5b83\u7a7a\u95f4\u8ba1\u7b97\uff0c\u8fd9\u53ef\u80fd\u662f\u4e00\u4e2a\u66f4\u597d\u7684\u8bcd\u3002\n  IC\uff1a\u4e0eTensix Cores\u4e00\u8d77\uff0cTenstorrent\u8fd8\u5728\u5411\u4e0b\u4e00\u4ee3\u4e2d\u6dfb\u52a0\u5411\u91cf\u53d1\u52a8\u673a\u8fdb\u5165\u60a8\u7684\u6838\u5fc3\uff1f\u8fd9\u662f\u5982\u4f55\u9002\u5408\u7684\uff1f\n  JK\uff1a\u8bb0\u4f4f\u5b83\u4eec\u4e0a\u6709\u5411\u91cf\u5f15\u64ce\u7684\u901a\u7528CPU  - \u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u4f60\u8fd0\u884cAI\u7a0b\u5e8f\u65f6\uff0c\u60a8\u53ea\u9700\u8981\u6709\u4e00\u4e9b\u901a\u7528\u8ba1\u7b97\u3002\u5728\u56fe\u4e2d\u8fd8\u6709\u4e00\u4e9b\u65f6\u95f4\uff0c\u60a8\u5e0c\u671b\u5728AI\u64cd\u4f5c\u7684\u7ed3\u679c\u4e0a\u8fd0\u884cC\u7a0b\u5e8f\uff0c\u56e0\u6b64\u5c06\u8ba1\u7b97\u91cd\u7d27\u8026\u5408\uff0c\u56e0\u6b64\u5f88\u597d\u3002 [\u901a\u8fc7\u4fdd\u6301]\u5b83\u5728\u540c\u4e00\u82af\u7247\u4e0a\uff0c\u5ef6\u8fdf\u8d85\u4f4e\uff0c\u5e76\u4e14\u6765\u56de\u5230\u6765\u7684\u7535\u6e90\u662f\u5408\u7406\u7684\u3002\u6240\u4ee5\u662f\u7684\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u7814\u7a76\u4e00\u4e2a\u6709\u8da3\u7684\u8def\u7ebf\u56fe\u3002\u8fd9\u662f\u4e00\u4e2a\u5c0f\u578b\u8ba1\u7b97\u673a\u67b6\u6784\u7814\u7a76\u9886\u57df\uff0c\u5982\uff0c\u4e0e\u52a0\u901f\u8ba1\u7b97\u548c\u603b\u7528\u9014\u8ba1\u7b97\u7684\u5408\u9002\u6df7\u5408\uff0c\u4eba\u4eec\u5982\u4f55\u4f7f\u7528\u5b83\u3002\u90a3\u4e48\u5982\u4f55\u5728\u7a0b\u5e8f\u5458\u5b9e\u9645\u4f7f\u7528\u5b83\u7684\u65b9\u5f0f\u5efa\u7acb\u5b83\uff1f\u90a3\u4e2a\uff06\uff0339;\u8bc0\u7a8d\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u7533\u3002\n      IC\uff1a\u5982\u679c\u6211\u7ecf\u5386\u4e86\u4f60\u7684\u804c\u4e1a\u751f\u6daf\uff0c\u4f60\u5df2\u7ecf\u5728\u9ad8\u6027\u80fd\u8ba1\u7b97\u548c\u4f4e\u529f\u8017\u7684\u6709\u6548\u8ba1\u7b97\u4e4b\u95f4\u6d88\u5931\u4e86\u3002\u73b0\u5728\u4f60\u662fAI\u52a0\u901f\u7684\u4e16\u754c\u3002\u5b83\u6709\u65e0\u804a\u5417\uff1f \nJK\uff1a\u6ca1\u6709\uff0c\u5b83\u771f\u7684\u5f88\u5947\u602a\uff01\u5b83\u53d8\u5316\u4e86\u5b83\u548c\uff0339;\u5b83\u7684\u53d8\u5316\u4e86\u8fd9\u4e48\u591a\uff0c\u4f46\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5b83\u5e76\u6ca1\u6709\u6539\u53d8\u3002\u5e95\u90e8\u7684\u8ba1\u7b97\u673a\uff0c\u4ed6\u4eec\u53ea\u662f\u5728\u4e00\u8d77\u6dfb\u52a0\u4e00\u4e2a\u548c\u96f6\u3002\u5b83\uff06\uff0339\u5f88\u5bb9\u6613\u3002 011011100\uff0c\u5b83\u5e76\u4e0d\u590d\u6742\u3002\n  \u4f46\u6211\u5728VAX 8800\u4e0a\u5de5\u4f5c\uff0c\u5728\u90a3\u91cc\u6211\u4eec\u5728\u6bcf\u4e2a\u82af\u7247\u4e2d\u7684\u95e8\u9635\u5217\u4e2d\u5efa\u7acb\u51fa\u6765\u7684\u95e8\u9635\u5217\u3002\u50cf200\uff0c\u5427\uff1f\u73b0\u5728\uff0c\u5728Tenstorrent\uff0c\u6211\u4eec\u7684\u5c0f\u578b\u8ba1\u7b97\u673a\uff0c\u6211\u4eec\u79f0\u4ed6\u4eec\u7684Tensix\u6838\u5fc3\uff0c\u6bcf\u79d2\u6bcf\u79d2\u56db\u4e07\u4ebf\uff0c\u5e76\u4e14\u5728\u82af\u7247\u4e2d\u6709\u56db\u4e2a\u6570\u91cf\u3002\u56e0\u6b64\uff0c\u6784\u5efa\u5757\u5df2\u4ece200\u4e2a\u95e8\u8f6c\u79fb\u5230\u56db\u4e2aTera OPS\u3002\u90a3\u79cd\u72c2\u653e\u7684\u8f6c\u578b\u3002\n  \u7136\u540e\u5de5\u5177\u6bd4\u4ee5\u524d\u66f4\u597d\u3002\u60a8\u73b0\u5728\u53ef\u4ee5\u505a\u4e9b\u4ec0\u4e48 - \u60a8\u53ef\u4ee5\uff06\uff0339;\u9664\u975e\u62bd\u8c61\u7ea7\u522b\u7684\u53d8\u5316\u548c\u5de5\u5177\u66f4\u6539\uff0c\u5426\u5219\u6784\u5efa\u66f4\u590d\u6742\u7684\u4e1c\u897f\u3002\u8fd9\u7c7b\u4e1c\u897f\u6709\u5f88\u591a\u53d8\u5316\u3002\u5f53\u6211\u8fd8\u662f\u4e2a\u5b69\u5b50\u7684\u65f6\u5019\uff0c\u6211\u66fe\u7ecf\u8ba4\u4e3a\u6211\u5fc5\u987b\u81ea\u5df1\u505a\u4e00\u5207 - \u800c\u4e14\u6211\u50cf\u75af\u5b50\u4e00\u6837\u5de5\u4f5c\u5e76\u4e00\u76f4\u7f16\u7801\u3002\u73b0\u5728\u6211\u77e5\u9053\u5982\u4f55\u4e0e\u4eba\u548c\u7ec4\u7ec7\u5408\u4f5c\u5e76\u503e\u542c\u3002\u7c7b\u4f3c\u7684\u4e1c\u897f\u3002\u4eba\u9645\u4ea4\u5f80\u80fd\u529b\u3002\u6211\u53ef\u80fd\u4f1a\u5bf9\u4eba\u4eec\u7684\u6280\u80fd\u6709\u4e00\u4e2a\u6f02\u4eae\u7684\u4e0d\u5747\u8861\u7684\u8bb0\u5206\u5361\uff01\u6211\u6709\u51e0\u4e2a\u3002\n  IC\uff1a\u4f60\u4f1a\u8bf4\u5de5\u7a0b\u5e08\u8fd9\u4e9b\u5929\u9700\u8981\u66f4\u591a\u7684\u4eba\u6280\u80fd\u5417\uff1f\u56e0\u4e3a\u4e00\u5207\u90fd\u5f88\u590d\u6742\uff0c\u4e00\u5207\u90fd\u6709\u5355\u72ec\u7684\u62bd\u8c61\u5c42\uff0c\u5982\u679c\u4f60\u60f3\u5728\u4ed6\u4eec\u4e4b\u95f4\u5de5\u4f5c\uff0c\u4f60\u5fc5\u987b\u8ba9\u57fa\u672c\u9762\u4e0b\u964d\u3002\n  JK\uff1a\u73b0\u5728\u8fd9\u662f\u57fa\u672c\u7684\u771f\u7406\uff0c\u4eba\u4eec\u9003\u79bb\u4e86\u3002\u806a\u660e\u3002\u6240\u4ee5\u4eba\u4eec\u53ef\u4ee5\u5728\u8d8a\u6765\u8d8a\u591a\u7684\u4e8b\u60c5\u4e0a\u7ee7\u7eed\u5de5\u4f5c - \u8fd9\u53ea\u662f\u611a\u8822\u7684\u3002\u4f46\u662f\u60a8\u5fc5\u987b\u5efa\u7acb\u652f\u6301\u4eba\u5458\u7684\u5de5\u5177\u548c\u7ec4\u7ec7\u548c\u7ec4\u7ec7\u80fd\u529b\u505a\u590d\u6742\u7684\u4e1c\u897f\u3002 vax 8800\u961f\u662f150\u4eba\u3002\u4f46\u662f\u5728\u82f9\u679c\u516c\u53f8\u5efa\u7acb\u4e86\u7b2c\u4e00\u6216\u7b2c\u4e8c\u4e2a\u5904\u7406\u5668\u7684\u56e2\u961f\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5927\u578b\u5b9a\u5236\u6838\u5fc3\uff0c\u662f150\u4eba\u3002\u73b0\u5728\uff0cCAD\u5de5\u5177\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u66f4\u597d\uff0c\u6211\u4eec\u4f7f\u75281000\u53f0\u7535\u8111\u6765\u505a\u6a21\u62df\uff0c\u800c\u6211\u4eec\u6709\u80fd\u591f\u653e\u7f6e\u7684\u5de5\u5177\u548c200\u4e07\u76d6\u8328\u4e0e200\u3002\u6240\u4ee5\u6709\u4e9b\u4e1c\u897f\u53d1\u751f\u4e86\u6839\u672c\u6027\u7684\u53d8\u5316\uff0c\u4f46\u5de5\u7a0b\u5e08\u53ef\u80fd\u4f1a\u8c08\u8bba\u7684\u4eba\u6570\u5728\u7ed9\u5b9a\u7684\u4e00\u5929\u4e2d\uff0c\u6ca1\u6709\u6539\u53d8\uff06\uff0339\u3002\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u5de5\u7a0b\u5e08\u6bcf\u5929\u8c08\u8bba\u8d85\u8fc7\u4e94\u4e2a\u4eba\uff0c\u4ed6\u4eec\u4f1a\u5931\u53bb\u4ed6\u4eec\u7684\u601d\u60f3\u3002\u6240\u4ee5\uff0c\u6709\u4e9b\u4e8b\u60c5\u771f\u7684\u662f\u4e0d\u53d8\u7684\u3002\n      IC\uff1a\u60a8\u5df2\u7ecf\u8c08\u8fc7\u8fc7\u53bb\u7684CPU\u6307\u4ee4\u96c6\uff0c\u4ee5\u53ca\u6211\u5bf9\u6b64\u9762\u8bd5\u7684\u6700\u5927\u8bf7\u6c42\u4e4b\u4e00\u662f\u5173\u4e8eCPU\u6307\u4ee4\u96c6\u7684\u770b\u6cd5\u3002\u7279\u522b\u662f\u5173\u4e8e\u6211\u4eec\u5982\u4f55\u5904\u7406\u5b83\u4eec\u7684\u57fa\u672c\u9650\u5236\u7684\u95ee\u9898\uff0c\u6211\u4eec\u5982\u4f55\u67a2\u8f6c\u5230\u66f4\u597d\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u6e38\u620f\u4e2d\u7684\u76ae\u80a4\u5728ARM\u4e0eX86\u4e0eRISC V\u800c\u8a00\u3002\u6211\u89c9\u5f97\u5927\u591a\u6570\u8ba1\u7b97\u53d1\u751f\u5728\u51e0\u5341\u4e2aOP-CODES\u4e0a\u3002\u6211\u8bb0\u5f97\u6cf0\u5417\n...... ", "note_en": "I&#39;ve \u00a0spoken about Jim Keller many times on AnandTech. In the world of semiconductor design, his name draws attention, simply by the number of large successful projects he has worked on, or led, that have created billions of dollars of revenue for those respective companies. His career spans DEC, AMD, SiByte, Broadcom, PA Semi, Apple, AMD (again), Tesla, Intel, and now he is at Tenstorrent as CTO, developing the next generation of scalable AI hardware. Jim&#39;s work ethic has often been described as &#39;enjoying a challenge&#39;, and over the years when I&#39;ve spoken to him, he always wants to make sure that what he is doing is both that challenge, but also important for who he is working for. More recently that means working on the most exciting semiconductor direction of the day, either high-performance compute, self-driving, or AI.\n    I have recently\u00a0 interviewed Tenstorrent&#39;s CEO, Ljubisa Bajic, alongside Jim discussing the next generation of AI semiconductors.\u00a0Today we&#39;re publishing a transcript of a recent chat with Jim, now five months into his role at Tenstorrent, but moreso to talk about Jim\u00a0the person, rather than simply Jim the engineer.\n              Ian Cutress: Most of the audience questions are focused on your time at AMD, so let\u2019s start there. You worked at AMD on Zen, and on the Skybridge platform - AMD is now gaining market share with the Zen product line, and you&#39;re off on to bigger and better things. But there has been a lot of confusion as to your exact role at AMD during that project. Some people believe you were integral in nailing down Zen\u2019s design, then Zen 2 and Zen 3 high-level microarchitecture. Others believe that you put the people in place, signed off at high level, and then went to focus on the Arm version of Skybridge, K12. Can you give us any clarity as to your role there, how deep you went with Zen versus K12, or your involvement in things like Infinity Fabric?\n  Jim Keller: Yeah, it was a complicated project, right? At AMD when I joined, they had Bulldozer and Jaguar, and they both had some charming features but they weren&#39;t successful in the market. The roadmaps weren&#39;t aggressive, they were falling behind Intel, and so that&#39;s not a good thing to do if you&#39;re already behind - you better be catching up, not falling behind. So I took the role, and I was president of the CPU team which I think when I joined was 500 people. Then over the next three years the SoC team, the Fabric team, and some IP teams joined my little gang. I think when I left, it was 2400 people I was told. So I was a VP with a staff. I had senior directors reporting to me, and the senior fellows, and my staff was 15 people. So I was hardly writing RTL!\n  That said we did a whole bunch of things. I&#39;m a computer architect, I\u2019m not really a manager. I wanted the management role, which was the biggest management role I&#39;d had at the time. Up to that point I&#39;d been the VP of a start-up, but that was 50 people, and we all got along - this was a fairly different play for me. I knew that the technical changes we had to make would involve getting people aligned to it. I didn&#39;t want to be the architect on the side arguing with the VP about why somebody could or couldn\u2019t do the job, or why this was the right or wrong decision. I spoke to Mark Papermaster, I told him my theory, and he said \u2018okay, we&#39;ll give it a try\u2019, and it worked out pretty good.\n  With that I had direct authority as it were - but people don&#39;t really do what they&#39;re told to do, right? They do what they&#39;re inspired to do. So you have to lay out a plan, and part of it was finding out who were the right people to do these different things, and sometimes somebody is really good, but people get very invested in what they did last time, or they believe things can&#39;t be changed, and I would say my view was things were so bad that almost everything had to change. So I went in with that as a default. Does that make sense?\u00a0Now, it wasn&#39;t that we didn&#39;t find a whole bunch of stuff that was good to use. But you had to prove that the old thing was good, as opposed to prove the new thing was good, so we changed that mindset.\n  Architecturally, I had a pretty good idea what I wanted to build and why. I found people inside the company, such as  Mike Clark,  Leslie Barnes,  Jay Fleischman, and others. There are quite a few really great people that once we describe what we wanted to do, they were like, \u2018yeah, we want to do that\u2019. Architecturally, I had some input. There was often decisions and analysis, and people have different opinions, so I was fairly hands-on doing that. But I wasn&#39;t doing block diagrams or writing RTL. We had multiple projects going on - there was Zen, there was the Arm cousin of that, the follow-on, and some new SoC methodology. But we did more than just CPU design - we did methodology design, IP refactoring, very large organizational changes. I was hands-on top to bottom with all that stuff, so it makes sense.\n  IC: A few people consider you &#39;The Father of Zen&#39;, do you think you\u2019d scribe to that position? Or should that go to somebody else?\n  JK: Perhaps one of the uncles. There were a lot of really great people on Zen. There was a methodology team that was worldwide, the SoC team was partly in Austin and partly in India, the floating-point cache was done in Colorado, the core execution front end was in Austin, the Arm front end was in Sunnyvale, and we had good technical leaders. I was in daily communication for a while with  Suzanne Plummer and Steve Hale, who kind of built the front end of the Zen core, and the Colorado team. It was really good people. Mike Clark&#39;s a great architect, so we had a lot of fun, and success. Success has a lot of authors - failure has one. So that was a success. Then some teams stepped up - we moved Excavator to the Boston team, where they took over finishing the design and the physical stuff,  Harry Fair and his guys did a great job on that. So there were some fairly stressful organizational changes that we did, going through that. The team all came together, so I think there was a lot of camaraderie in it. So I won&#39;t claim to be the \u2018father\u2019 - I was brought in, you know, as the instigator and the chief nudge, but part architect part transformational leader. That was fun.\n  IC: Is everything that you worked on now out at AMD, or is there still, kind of roadmap stuff still to come out, do you think from the ideas that you helped propagate?\n  JK: So when you build a new computer, and Zen was a new computer, there was already work underway. You build in basically a roadmap, so I was thinking about what we were going to do for five years, chip after chip. We did this at Apple too when we built the first big core at Apple - we built big bones [into the design]. When you make a computer faster, there&#39;s two ways to do it - you make the fundamental structure bigger, or you tweak features, and Zen had a big structure. Then there were obvious things to do for several generations to follow. They&#39;ve been following through on that.\n  So at some point, they will have to do another big rewrite and change. I don&#39;t know if they started that yet. What we had planned for the architectural performance improvements were fairly large, over a couple of years, and they seem to be doing a great job of executing to that. But I&#39;ve been out of there for a while - four or five years now.\n  IC: Yeah, I think they said that Zen 3, the last one that just came out was a rewrite. So I think some people are thinking that was still under your direction.\n  JK: Yeah, it&#39;s hard to say. Even when we did Zen, we did a from-scratch design - a clean design at the top. But then when they built it, there was a whole bunch of pieces of RTL that came from Bulldozer, and Jaguar, which were perfectly good to use. They just had to be modified and built into the new Zen structure. So hardware guys are super good at using code when it&#39;s good.\n  So when they say they did a big rewrite, they probably took some pieces and re-architected them at the top, but when they built the code, it wouldn&#39;t surprise me if somewhere between 20% and 80% of the code was the same stuff, or mildly modified, but that&#39;s pretty normal. The key is to get the structure right, and then reuse code as needed, as opposed to taking something that&#39;s complicated and trying to tweak it to get somewhere. So if they did a rewrite, they probably fixed the structure.\n      IC: I know it\u2019s still kind of fresh, so I\u2019m not sure what kind of NDAs you are still under, but your work at Intel - was that more of a clean slate? Can you go into any detail about what you did there?\n  JK: I can\u2019t talk too much, obviously. The role I had was Senior Vice President of Silicon Engineering Group, and the team was 10,000 people. They&#39;re doing so many different things, it&#39;s just amazing. It was something like 60 or 70 SoCs is in flight at a time, literally from design to prototyping, debugging, and in production. So it was a fairly diverse group, and there my staff was vice presidents and senior fellows, so it was a big organizational thing.\n  I had thought I was going there because there was a bunch of new technology to go build. I spent most of my time working with the team about both organizational and methodology transformation, like new CAD tools, new methodologies, new ways to build chips. A couple of years before I joined, they started what&#39;s called the SoC IP view of building chips, versus Intel&#39;s historic monolithic view. That to be honest wasn&#39;t going well, because they took the monolithic chips, they took the great client and server parts, and simply broke it into pieces. You can&#39;t just break it into pieces - you have to actually rebuild those pieces and some of the methodology goes with it.\n  We found a bunch of people [internally] who were really excited about working on that, and I also spent a lot of time on IP quality, IP density, libraries, characterization, process technology. You name it, I was on it. My days were kind of wild - some days I\u2019d have 14 different meanings in one day. It was just click, click, click, click, so many things going on.\n    JK: I don&#39;t get anything done technically! I got told I was the senior vice president - it&#39;s evaluation, set direction, make judgment calls, or let\u2019s say try some organizational change, or people change. That adds up after a while. Know that the key thing about getting somewhere is to know where you are going, and then put an organization in place that knows how to do that - that takes a lot of work. So I didn&#39;t write much code, but I did send a lot of text messages.\n  IC: Now Intel has a new engineering-focused CEO in Pat Gelsinger. Would you ever consider going back if the right opportunity came up?\n  JK: I don&#39;t know. I have a really fun job now, and in a really explosive growth market. So I wish him the best. I think it was a good choice [for Pat as CEO], and I hope it&#39;s a good choice, but we&#39;ll see what happens. He definitely cares a lot about Intel, and he&#39;s had real success in the past. He\u2019s definitely going to bring a lot more technical focus to the company. But I liked working with Bob Swan just fine, so we&#39;ll see what happens.\n      IC: You are now several companies on from AMD, at a company called Tenstorrent, with an old friend in Ljubisa Bajic. You\u2019ve been jumping from company to company to company for basically your whole career. You\u2019re always finding another project, another opportunity, another angle. Not to be too blunt, but is Tenstorrent going to be a forever home?\n  JK:\u00a0First, I was at Digital ( DEC) for 15 years, right! Now that was a different career because I was in the mid-range group where we built computers out of\u00a0 ECL\u00a0- these were refrigerator-sized boxes. I was in the DEC Alpha team where we built little microprocessors, little teeny things, which at the time we thought were huge. These were 300 square millimeters at 50 watts, which blew everybody&#39;s mind.\n  So I was there for a while, and I went to AMD right during the internet rush, and we did a whole bunch of stuff in a couple of years. We started Opteron, HyperTransport, 2P servers - it was kind of a whirlwind of a place. But I got sucked up or caught up in the enthusiasm of the internet, and I went to SiByte, which got bought by Broadcom, and I was there for four years total. We delivered several generations of products.\n  I was then at P.A Semi, and we delivered a great product, but they didn&#39;t really want to sell the product for some reason, or they thought they were going to sell it to Apple. I actually went to Apple, and then Apple bought P.A Semi, and then I worked for that team, so you know I was between P.A Semi and Apple. That was seven years, so I don&#39;t really feel like that was jumping around too much.\n  Then I jumped to AMD I guess, and that was fun for a while. Then I went to Tesla where we delivered Hardware 3 (Tesla Autopilot).\u00a0 So that was kind of phenomenal. From a standing start to driving a car in 18 months - I don&#39;t think that&#39;s ever been done before, and that product shipped really successfully. They built a million of them last year. Tesla and Intel were a different kind of a whirlwind, so you could say I jumped in and jumped out. I sure had a lot of fun.\n  So yeah, I&#39;ve been around a little bit. I like to think I mostly get done what I set out to accomplish. My success right there is pretty high in terms of delivering products that have lasting value. I&#39;m not the guy to tweak things in production \u2013 it\u2019s either a clean piece of paper or a complete disaster. That seems to be the things I do best at. It&#39;s good to know yourself - I&#39;m not an operational manager. So Tenstorrent is more the clean piece of paper. The AI space is exploding. The company itself is already many years old, but we&#39;re building a new generation of parts and going to market and starting to sell stuff. I&#39;m CTO and president, have a big stake in the company, both financially and also a commitment to my friends there, so I plan on being here for a while.\n  IC: I think you said before that going beyond the sort of matrix, you end up with massive graph structures, especially for AI and ML, and the whole point about Tenstorrent, it\u2019s a graph compiler and a graph compute engine, not just a simple matrix multiply.\n  JK:\u00a0From old math, and I&#39;m not a mathematician, so mathematicians are going to cringe a little bit, but there was scalar math, like A = B + C x D. When you had a small number of transistors, that&#39;s the math you could do. Now we have more transistors you could say \u2018I can do a vector of those\u2019, like an equation properly in a step. Then we got more transistors, we could do a matrix multiply. Then as we got more transistors, you wanted to take those big operations and break them up, because if you make your matrix multiplier too big, the power of just getting across the unit is a waste of energy.\n  So you find you want to build this optimal size block that\u2019s not too small, like a thread in a GPU, but it&#39;s not too big, like covering the whole chip with one matrix multiplier. That would be a really dumb idea from a power perspective. So then you get this array of medium size processors, where medium is something like four TOPs. That is still hilarious to me, because I remember when that was a really big number. Once you break that up, now you have to take the big operations and map them to the array of processors and AI looks like a graph of very big operations. It\u2019s still a graph, and then the big operations are factored down into smaller graphs. Now you have to lay that out on a chip with lots of processors, and have the data flow around it.\n  This is a very different kind of computing than running a vector or a matrix program. So we sometimes call it a scalar vector matrix. Raja used to call it spatial compute, which would probably be a better word.\n  IC: Alongside the Tensix cores, Tenstorrent is also adding in vector engines into your cores for the next generation? How does that fit in?\n  JK:\u00a0Remember the general-purpose CPUs that have vector engines on them \u2013 it turns out that when you&#39;re running AI programs, there is some general-purpose computing you just want to have. There are also some times in the graph where you want to run a C program on the result of an AI operation, and so having that compute be tightly coupled is nice. [By keeping] it on the same chip, the latency is super low, and the power to get back and forth is reasonable. So yeah, we&#39;re working on an interesting roadmap for that. That&#39;s a little computer architectural research area, like, what&#39;s the right mix with accelerated computing and total purpose computing and how are people using it. Then how do you build it in a way programmers can actually use it? That&#39;s the trick, which we&#39;re working on.\n      IC: If I go through your career, you\u2019ve gone between high-performance computing and low-powered efficient computing. Now you\u2019re in the world of AI acceleration. Has it ever got boring?\n  JK: No, and it&#39;s really weird! Well it&#39;s changed, and it&#39;s changed so much, but at some level it doesn&#39;t change at all. Computers at the bottom, they just add ones and zeros together. It&#39;s pretty easy. 011011100, it&#39;s not that complicated.\n  But I worked on the VAX 8800 where we built it out of gate arrays that had 200 OR gates in each chip. Like 200, right? Now at Tenstorrent, our little computers, we call them Tensix cores, are four trillion operations per second per core, and there&#39;s 100 of them in a chip. So the building block has shifted from 200 gates to four Tera Ops. That&#39;s kind of a wild transformation.\n  Then the tools are way better than they used to be. What you can do now - you can&#39;t build more complicated things unless the abstraction levels change and the tools change. There have been so many changes on that kind of stuff. When I was a kid, I used to think I had to do everything myself - and I worked like a maniac and coded all the time. Now I know how to work with people and organizations and listen. Stuff like that. People skills. I probably would have a pretty uneven scorecard on the people skills! I do have a few.\n  IC: Would you say that engineers need more people skills these days? Because everything is complex, everything has separate abstraction layers, and if you want to work between them you have to have the fundamentals down.\n  JK: Now here\u2019s the fundamental truth, people aren&#39;t getting any smarter. So people can&#39;t continue to work across more and more things - that&#39;s just dumb.\u00a0But you do have to build tools and organizations that support people&#39;s ability to do complicated things. The VAX 8800 team was 150 people. But the team that built the first or second processor at Apple, the first big custom core, was 150 people. Now, the CAD tools are unbelievably better, and we use 1000s of computers to do simulations, plus we have tools that could place and route 2 million gates versus 200. So something has changed radically, but the number of people an engineer might talk to in a given day didn&#39;t change at all. If you have an engineer talk to more than five people a day, they&#39;ll lose their mind. So, some things are really constant.\n      IC: You\u2019ve spoken about CPU instruction sets in the past, and one of the biggest requests for this interview I got was around your opinion about CPU instruction sets. Specifically questions came in about how we should deal with fundamental limits on them, how we pivot to better ones, and what your skin in the game is in terms of ARM versus x86 versus RISC V. I think at one point, you said most compute happens on a couple of dozen op-codes. Am I remembering tha\n......", "posttime": "2021-06-18 03:02:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u91c7\u8bbf,interview,\u5efa\u7acb", "title": "\u5409\u59c6\u51ef\u52d2\u7684Anandtech\u91c7\u8bbf\uff1a'Tesla\u7684\u6700\u61d2\u60f0\u7684\u4eba' ", "title_en": "An AnandTech Interview with Jim Keller: 'The Laziest Person at Tesla'", "transed": 1, "url": "https://www.anandtech.com/show/16762/an-anandtech-interview-with-jim-keller-laziest-person-at-tesla", "via": "", "real_tags": ["\u91c7\u8bbf", "interview", "\u5efa\u7acb"]}, {"category": "", "categoryclass": "", "imagename": "a5ca6c7bdb86a255218c3ff94705bbf1.jpg", "infoid": 1066525, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Facebook\u548c\u5bc6\u6b47\u6839\u5dde\u7acb\u5927\u5b66\u7684\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u4eba\u5458\u8868\u793a\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u6b3e\u65b0\u7684\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u63ed\u793a\u6240\u8c13\u7684Deewakes\u6765\u81ea\u54ea\u91cc\u3002\n Deepfakes\u662f\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u4e0eAI\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8fdb\u884c\u6570\u5b57\u6539\u53d8\u7684\u89c6\u9891\u3002\u8fd1\u5e74\u6765\uff0c\u4ed6\u4eec\u53d8\u5f97\u8d8a\u6765\u8d8a\u771f\u5b9e\u5730\u53d8\u5f97\u8d8a\u6765\u8d8a\u771f\u5b9e\uff0c\u4f7f\u4eba\u7c7b\u66f4\u52a0\u8270\u96be\u5730\u786e\u5b9a\u4e92\u8054\u7f51\u4e0a\u7684\u771f\u5b9e\uff06\uff0339;\u5b9e\u9645\u4e0a\u662fFacebook\uff0c\u4ee5\u53ca\u4ec0\u4e48\uff06\uff0339;\u6ca1\u6709\u3002\n  Facebook\u7684\u7814\u7a76\u4eba\u5458\u58f0\u79f0\u4ed6\u4eec\u7684AI\u8f6f\u4ef6 - \u5468\u4e09\u5ba3\u5e03 - \u53ef\u4ee5\u63a5\u53d7\u57f9\u8bad\uff0c\u4ee5\u5efa\u7acb\u4e00\u6bb5\u5a92\u4f53\u662f\u4e00\u79cd\u6765\u81ea\u9759\u6b62\u56fe\u50cf\u6216\u5355\u4e2a\u89c6\u9891\u5e27\u7684\u767e\u6b21\u3002\u4e0d\u4ec5\u5982\u6b64\uff0c\u4ed6\u4eec\u8bf4\u8be5\u8f6f\u4ef6\u8fd8\u53ef\u4ee5\u8bc6\u522b\u7528\u4e8e\u9996\u5148\u521b\u5efaDeepFake\u7684AI\uff0c\u65e0\u8bba\u5982\u4f55\u65b0\u5efa\u6280\u672f\u3002\n \u5728Facebook\u4e0a\u7684\u5e94\u7528\u7814\u7a76\u94c5\u5854\u00b7\u54c8\u65af\u7eb3\u544a\u8bc9CNBC\uff0c\u5b83\u53ef\u4ee5\u57f9\u8badAI\u8f6f\u4ef6\uff06\uff0334;\u8981\u67e5\u770b\u7167\u7247\u5e76\u4ee5\u5408\u7406\u7684\u51c6\u786e\u6027\u544a\u8bc9\u60a8\uff0cAI\u6a21\u578b\u7684\u8bbe\u8ba1\u662f\u4ec0\u4e48\uff1f\u751f\u6210\u90a3\u5f20\u7167\u7247\u3002\uff06\uff0334;\n \u5728\u53bb\u5e74\u7684MSU\u5b9e\u73b0\u5b83\u4e4b\u540e\uff0c\u8fd9\u9879\u7814\u7a76\u53ef\u4ee5\u786e\u5b9a\u5b83\uff06\uff0339;\u53ef\u4ee5\u786e\u5b9a\u4f7f\u7528\u4ec0\u4e48\u6a21\u578b\u7528\u4e8e\u62cd\u6444\u7279\u5b9a\u7684\u7167\u7247 -  Hassner\u8868\u793aFacebook\uff06\uff0339;\u4f7f\u7528MSU\u7684\u5de5\u4f5c\u3002\n  DeepFakes\u5bf9Facebook\u662f\u4e0d\u826f\u6d88\u606f\uff0c\u8fd9\u4e0d\u65ad\u4e89\u593a\u5176\u4e3b\u8981\u5e73\u53f0\u7684\u5047\u5185\u5bb9\uff0c\u4ee5\u53caMessenger\uff0cInstagram\u548cWhatsapp\u3002\u8be5\u516c\u53f8\u4e8e1920\u5e741\u6708\u7981\u6b62\u4e86Deepfakes\uff0c\u4f46\u5b83\u6323\u624e\u7740\u4ece\u5176\u5e73\u53f0\u4e0a\u8fc5\u901f\u5220\u9664\u6240\u6709\u8fd9\u4e9b\u3002\n \u54c8\u5179\u7eb3\u8bf4\uff0c\u4fa6\u63a2\u5fb7\u56fd\u4eba\u662f\uff06\uff0334;\u732b\u548c\u8001\u9f20\u6e38\u620f\uff0c\uff06\uff0334;\u6dfb\u52a0\u5b83\u4eec\uff06\uff0339;\u91cd\u65b0\u8d8a\u6765\u8d8a\u5bb9\u6613\u751f\u4ea7\u548c\u66f4\u96be\u68c0\u6d4b\u3002 \n\u8fc4\u4eca\u4e3a\u6b62\uff0cDeepeakes\u7684\u4e3b\u8981\u5e94\u7528\u4e4b\u4e00\u662f\u5728\u4e00\u4e2a\u4eba\u548c\uff0339; s\u8138\u4e0a\u4ea4\u6362\u7ed9\u522b\u4eba\u7684\u8272\u60c5\u5185\u5bb9\uff06\uff0339; ve\u4e5f\u88ab\u7528\u6765\u4f7f\u540d\u4eba\u770b\u8d77\u6765\u597d\u50cf\u4ed6\u4eec\uff06\uff0339 ;\u91cd\u65b0\u505a\u6216\u8bf4\u51fa\u4ed6\u4eec\u7684\u4e1c\u897f\uff06\uff0339;\u91cd\u590d\u3002\n \u5b9e\u9645\u4e0a\uff0cTiktok\u7684\u4e00\u5957\u8d85\u73b0\u5b9e\u548c\u5947\u602a\u7684\u6c64\u59c6\u5de1\u822aDeepfake\u73b0\u5728\u5df2\u7ecf\u89c2\u770b\u4e865000\u591a\u4e07\u6b21\uff0c\u5f88\u591a\u52aa\u529b\u770b\u4ed6\u4eec\u5982\u4f55\uff06\uff0339;\u91cd\u590d\u4e0d\u662f\u771f\u5b9e\u7684\u3002\n \u4eca\u5929\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528\u50cfFakeapp\u6216Faceswap\u8fd9\u6837\u7684\u514d\u8d39\u5e94\u7528\u7a0b\u5e8f\u6765\u5236\u4f5c\u81ea\u5df1\u7684Deewakes\u3002\n DeepFake\u4e13\u5bb6\u5c3c\u5a1c\u8096\u514b\uff0c\u4ed6\u5728\u5468\u4e00\u7684Cogx Ai\u4f1a\u8bae\u4e0a\u8bb2\u8ff0\u4e86\u7f8e\u56fd\u603b\u7edfJoe Biden\u548c\u6cd5\u56fd\u603b\u7edf\u57c3\u59c6\u66fc\u7ebd\u5c14MACRON\u8868\u793a\uff0c\u4fa6\u6d4bDeepfakes Isn\uff06\uff0339; t\u5f88\u5bb9\u6613\u3002\n \u5728\u540e\u7eed\u7535\u5b50\u90ae\u4ef6\u4e2d\uff0c\u5979\u544a\u8bc9CNBC\uff0cFacebook\u548cMSU\uff06\uff0339;\u5de5\u4f5c\uff06\uff0334;\u770b\u8d77\u6765\u50cf\u68c0\u6d4b\u7684\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u4ea4\u6613\u3002\u4f46\u5f3a\u8c03\u5b83\u7684\uff06\uff0339\u662f\u91cd\u8981\u7684\uff0c\u4e86\u89e3Deepfake\u68c0\u6d4b\u6a21\u578b\u5728\u91ce\u5916\u5b9e\u9645\u4e0a\u6709\u591a\u5de5\u4f5c\u3002\n \uff06\uff0334;\u5b83\uff06\uff0339;\uff06\uff0339;\u5728\u53d7\u63a7\u73af\u5883\u4e2d\u7684\u4e00\u5957\u57f9\u8bad\u6570\u636e\u4e0a\uff0c\uff06\uff0339;\u5979\u8bf4\uff0c\u6dfb\u52a0\u90a3\u4e2a\uff06\uff0334;\u4e00\u4e2a\u5927\u6311\u6218\u4e4b\u4e00\u4f3c\u4e4e\u6709\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u6b3a\u9a97\u68c0\u6d4b\u6a21\u578b - \u5373\u901a\u8fc7\u538b\u7f29\u56fe\u50cf\u6216\u89c6\u9891\u3002\uff06\uff0334;\n Tassner\u627f\u8ba4\uff0c\u7cdf\u7cd5\u7684\u6f14\u5458\u53ef\u80fd\u6709\u53ef\u80fd\u7ed5\u8fc7\u63a2\u6d4b\u5668\u3002 \uff06\uff0334;\u5b83\u80fd\u51fb\u8d25\u6211\u4eec\u7684\u7cfb\u7edf\u5417\uff1f\u6211\u8ba4\u4e3a\u5b83\u4f1a\uff0c\uff06\uff0334;\u4ed6\u8bf4\u3002 \n\u5e7f\u6cdb\u5730\u8bf4\uff0c\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5fb7\u56fd\u3002\u90a3\u4e9b\u7531AI\u5b8c\u5168\u751f\u6210\u7684\u4eba\uff0c\u4f8b\u5982\u5047\u88c5\u5728WWW\u4e0a\u3002 thispersondoesnotexist.com\uff0c\u4ee5\u53ca\u4f7f\u7528ai\u5143\u7d20\u6765\u64cd\u7eb5\u771f\u5b9e\u5a92\u4f53\u7684\u5176\u4ed6\u4eba\u3002\n Schick\u8d28\u7591Facebook\uff06\uff0339; S\u5de5\u5177\u662f\u5426\u4f1a\u5728\u540e\u8005\u5de5\u4f5c\uff0c\u6dfb\u52a0\u90a3\u4e2a\uff06\uff0334;\u6c38\u8fdc\u4e0d\u4f1a\u6709\u4e00\u4e2a\u5c3a\u5bf8\u9002\u5408\u6240\u6709\u63a2\u6d4b\u5668\u3002\uff06\uff0334;\u4f46\u5218\u5c0f\u5b81\u5218\uff0cFacebook\uff06\uff0339;\u5728\u5bc6\u6b47\u6839\u5dde\u56fd\u5bb6\u7684\u5408\u4f5c\u8005\u8868\u793a\uff0c\u8fd9\u9879\u5de5\u4f5c\u6709\uff06\uff0334;\u5728\u8fd9\u4e24\u79cd\u6848\u4f8b\u4e2d\u8fdb\u884c\u4e86\u8bc4\u4f30\u548c\u9a8c\u8bc1\u3002\uff06\uff0334;\u5218\u8865\u5145\u8bf4\uff0c\uff06\uff0334;\u6027\u80fd\u53ef\u80fd\u662f\u8f83\u4f4e\u7684\uff06\uff0334;\u5728\u64cd\u7eb5\u53ea\u5728\u4e00\u4e2a\u975e\u5e38\u5c0f\u7684\u533a\u57df\u53d1\u751f\u7684\u60c5\u51b5\u4e0b\u3002\n \u6c64\u59c6\u514b\u9c81\u65af\u00b7\u5fb7\u5fb7\u65af\u76ae\u514b\u80cc\u540e\u7684\u7efc\u5408\u5a92\u4f53\u827a\u672f\u5bb6\u514b\u91cc\u65af\u6885\u5728Cogx\u5468\u4e00\u8868\u793a\uff0cDeepFake\u6280\u672f\u6b63\u5728\u8fc5\u901f\u53d1\u5c55\u3002\n \uff06\uff0334;\u6709\u5f88\u591a\u4e0d\u540c\u7684ai\u5de5\u5177\u548c\u6c64\u59c6\u5de1\u822a\uff0c\u4f8b\u5982\uff0c\u6211\u7ec4\u5408\u4e86\u5f88\u591a\u4e0d\u540c\u7684\u5de5\u5177\uff0c\u4ee5\u83b7\u5f97\u60a8\u5728\u6211\u7684\u9891\u9053\u4e0a\u770b\u5230\u7684\u8d28\u91cf\uff0c\uff06\uff0334;\u4ed6\u8bf4\u3002\n \uff06\uff0339;\u5c1a\u4e0d\u6e05\u695aFacebook\u5c06\u5982\u4f55\u5c06Tassner\uff06\uff0339;\u8f6f\u4ef6\u5e94\u7528\u4e8e\u5176\u5e73\u53f0\u3002 \uff06\uff0334;\u6211\u4eec\u751a\u81f3\u6ca1\u6709\u8ba8\u8bba\u4ea7\u54c1\uff0c\uff06\uff0334;\u8bf4Tassner\uff0c\u5e76\u5728\u5176\u4e2d\u6dfb\u52a0\u4e86\u51e0\u79cd\u6f5c\u5728\u7528\u4f8b\uff0c\u5305\u62ec\u53d1\u73b0\u534f\u8c03\u7684DeepFake\u653b\u51fb\u3002\n \uff06\uff0334;\u5982\u679c\u6709\u4eba\u60f3\u6ee5\u7528\u4ed6\u4eec\uff08\u751f\u6210\u6a21\u578b\uff09\u5e76\u901a\u8fc7\u4ece\u4e0d\u540c\u6765\u6e90\u4e0a\u4f20\u4e1c\u897f\u8fdb\u884c\u534f\u8c03\u653b\u51fb\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u53d1\u73b0\u53ea\u662f\u901a\u8fc7\u8bf4\u6240\u6709\u8fd9\u4e9b\u6765\u81ea\u540c\u4e00\u6a21\u5177\u6211\u4eec\u4ece\u672a\u89c1\u8fc7\u7684\u4f46\u5b83\u5177\u6709\u8fd9\u4e9b\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u7279\u5b9a\u5c5e\u6027\uff0c\uff06\uff0334;\u4ed6\u8bf4\u3002\n \u4f5c\u4e3a\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0cFacebook\u8868\u793a\uff0c\u5b83\u5df2\u6536\u96c6\u548c\u7f16\u76ee100\u79cd\u4e0d\u540c\u7684DeepFake\u6a21\u578b\u3002 ", "note_en": "Artificial intelligence researchers at  Facebook and Michigan State University say they have developed a new piece of software that can reveal where so-called deepfakes have come from.\n Deepfakes are videos that have been digitally altered in some way with AI. They&#39;ve become  increasingly realistic in recent years, making it harder for humans to determine what&#39;s real on the internet, and indeed Facebook, and what&#39;s not.\n  The Facebook researchers claim that their AI software \u2014 announced on Wednesday \u2014 can be trained to establish if a piece of media is a deepfake or not from a still image or a single video frame. Not only that, they say the software can also identify the AI that was used to create the deepfake in the first place, no matter how novel the technique.\n Tal Hassner, an applied research lead at Facebook, told CNBC that it&#39;s possible to train AI software &#34;to look at the photo and tell you with a reasonable degree of accuracy what is the design of the AI model that generated that photo.&#34;\n The research comes after  MSU realized last year that it&#39;s possible to determine what model of camera was used to take a specific photo \u2014 Hassner said that Facebook&#39;s work with MSU builds on this.\n  Deepfakes are bad news for Facebook, which is constantly battling to keep fake content off of its main platform, as well as Messenger, Instagram and WhatsApp. The company  banned deepfakes in Jan. 2020 but it struggles to swiftly remove all of them from its platform.\n Hassner said that detecting deepfakes is a &#34;cat and mouse game,&#34; adding that they&#39;re becoming easier to produce and harder to detect.\n  One of the main applications of deepfakes so far has been in pornography where a person&#39;s face is swapped onto someone else&#39;s body, but they&#39;ve also been used to make celebrities appear as though they&#39;re doing or saying something they&#39;re not.\n Indeed, a  set of hyper realistic and bizarre Tom Cruise deepfakes on TikTok have now been watched over 50 million times, with many struggling to see how they&#39;re not real.\n Today, it&#39;s possible for anyone to make their own deepfakes using free apps like FakeApp or Faceswap.\n Deepfake expert Nina Schick, who has advised U.S. President Joe Biden and French President Emmanuel Macron, said at the CogX AI conference on Monday that detecting deepfakes isn&#39;t easy.\n In a follow up email she told CNBC that Facebook and MSU&#39;s work &#34;looks like a pretty big deal in terms of detection&#34; but stressed that it&#39;s important to find out how well deepfake detection models actually work in the wild.\n &#34;It&#39;s all well and good testing it on a set of training data in a controlled environment,&#34; she said, adding that &#34;one of the big challenges seems that there are easy ways to fool detection models \u2014 i.e. by compressing an image or a video.&#34;\n Tassner admitted that it might be possible for a bad actor to get around the detector. &#34;Would it be able to defeat our system? I assume that it would,&#34; he said.\n Broadly speaking, there are two types of deepfakes. Those that are wholly generated by AI, such as the fake human faces on www. thispersondoesnotexist.com, and others that use elements of AI to manipulate authentic media.\n Schick questioned whether Facebook&#39;s tool would work on the latter, adding that &#34;there can never be a one size fits all detector.&#34; But Xiaoming Liu, Facebook&#39;s collaborator at Michigan State, said the work has &#34;been evaluated and validated on both cases of deepfakes.&#34; Liu added that the &#34;performance might be lower&#34; in cases where the manipulation only happens in a very small area.\n Chris Ume, the synthetic media artist behind the Tom Cruise deepfakes, said at CogX on Monday that deepfake technology is moving rapidly.\n &#34;There are a lot of different AI tools and for the Tom Cruise, for example, I&#39;m combining a lot of different tools to get the quality that you see on my channel,&#34; he said.\n It&#39;s unclear how or indeed if Facebook will look to apply Tassner&#39;s software to its platforms. &#34;We&#39;re not at the point of even having a discussion on products,&#34; said Tassner, adding that there&#39;s several potential use cases including spotting coordinated deepfake attacks.\n &#34;If someone wanted to abuse them (generative models) and conduct a coordinated attack by uploading things from different sources, we can actually spot that just by saying all of these came from the same mold we&#39;ve never seen before but it has these specific properties, specific attributes,&#34; he said.\n As part of the work, Facebook said it has collected and catalogued 100 different deepfake models that are in existence.", "posttime": "2021-06-18 03:01:50", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "facebook,\u79d1\u5b66\u5bb6,scientists,ai", "title": "Facebook\u79d1\u5b66\u5bb6\u8868\u793a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u8bb2\u8ff0Deepfakes\u6765\u81ea\u54ea\u91cc ", "title_en": "Facebook scientists say they can tell where deepfakes come from", "transed": 1, "url": "https://www.cnbc.com/2021/06/16/facebook-scientists-say-they-can-tell-where-deepfakes-come-from.html", "via": "", "real_tags": ["facebook", "\u79d1\u5b66\u5bb6", "ai"]}, {"category": "", "categoryclass": "", "imagename": "69c5d72ff333870746e82e61b85e7fd4.jpg", "infoid": 1066523, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5f7c\u5f97\u6770\u514b\u900a\uff06\uff0339;\u4e0b\u4e00\u4e2a\u516d\u4e2a\u5c0f\u65f6\u7684\u53f2\u8bd7\u7ec8\u4e8e\u51fa\u73b0\u5728\u4eca\u5e74 - \u5e76\u5728\u9996\u5148\u662f\u8d5e\u8a89\u8463\u4e8b\uff0c\u8fd9\u90e8\u7535\u5f71\u5c06\u76f4\u63a5\u53d1\u5c04\u5230\u6d41\u5a92\u4f53\u670d\u52a1\u3002\u5b83\u4e5f\u5c06\u88ab\u5206\u89e3\u4e3a\u96c6\u4e2d\u3002\n \u7532\u58f3\u866b\u4e50\u961f\uff1a\u56de\u6765\uff0c\u4e00\u4e2a\u5e7f\u9614\u7684\u7eaa\u5f55\u7247\u6700\u521d\u5ba3\u5e03\u4eca\u5e748\u6708\u7684\u620f\u5267\u8fd0\u884c\uff0c\u5df2\u7ecf\u91ca\u653e\u4e86\u7b56\u7565\u8c03\u6574\u3002\u5468\u56db\uff0c\u6770\u514b\u900a\u548c\u8fea\u58eb\u5c3c\u786e\u8ba4\u6574\u4e2a\u9879\u76ee\u5c06\u5728\u4eca\u5e74\u7684\u8fea\u58eb\u5c3c+\u4e0a\u63a8\u51fa\uff0c\u800c\u4e14\u7f8e\u56fd\u611f\u6069\u8282\u5047\u671f\u4e13\u95e8\u63a8\u51fa\u8fea\u58eb\u5c3c+\u3002\u7eaa\u5f55\u7247\u4e2d\u7684\u6bcf\u4e2a\u4e09\u5206\u4e4b\u4e00\u90fd\u5c06\u4e8e11\u670825\u65e5\uff0c26\u65e5\u548c27\u65e5\u53d1\u5e03\u6d41\u5a92\u4f53\u670d\u52a1\u3002\u4f5c\u4e3a\u65b0\u95fb\u65f6\u95f4\uff0c\u8fea\u58eb\u5c3c\u4eba\u548c\uff0339; T\u8868\u793a\uff0c\u8fd9\u90e8\u7535\u5f71\u5982\u4f55\u5728\u8fea\u58eb\u5c3c+\u548c\u7b2c39\u4f4d\u7684\u652f\u6301\u8303\u56f4\u5185\u5230\u8fbe\u89c2\u4f17\u3002\u6770\u514b\u900a\u548c\u8fea\u58eb\u5c3c\u90fd\u6ca1\u6709\u6f84\u6e05\u539f\u6765\u7684\u620f\u5267\u8fd0\u884c\u53ef\u80fd\u662f\u5982\u4f55\u5de5\u4f5c\u6216\u5168\u7403\u5927\u6d41\u884c\u8feb\u4f7f\u4efb\u4f55\u4eba\u548c\uff0339; s\u624b\u3002\n    \u4eca\u5929\uff06\uff0339;\u65b0\u95fb\u8bc1\u5b9e\u6770\u514b\u900a\u6709\u4e30\u5bcc\u7684\u955c\u5934\u624d\u80fd\u4e0e\u4e4b\u5408\u4f5c\u3002\u5927\u7ea6\u4e09\u5e74\u524d\uff0c\u5269\u4e0b\u7684\u7532\u58f3\u866b\u4e50\u961f\u9012\u7ed9\u4ed6\u8bbf\u95ee\u97f3\u4e50\u5723\u676f\uff1a\u8d85\u8fc760\u5c0f\u65f6\u7684\u4ee5\u524d\u770b\u8fc7\u770b\u4e0d\u89c1\u7684\u89c6\u9891\u5f55\u5236\uff0c\u5927\u591a\u6570\u6355\u83b7\u5728\u4e13\u8f91\u4e0a\u5de5\u4f5c\u7684\u62ab\u5934\u58eb\u4e50\u961f\u8ba9\u5b83\u548c\u6392\u7ec3\uff0c\u7136\u540e\u6267\u884c\u4e50\u961f\uff06\uff0339;\u5728\u4f26\u6566\u7684\u4f20\u59471969\u5e74\u76841969\u5e74\u5c4b\u9876\u97f3\u4e50\u4f1a\u3002\n  \u6770\u514b\u900a\u4e0e\u8bbf\u95ee\u8fea\u65af\u5c3c\u547c\u53eb\u548c\uff0334\u7684\u8bbf\u95ee\u4e00\u8d77\u7f1d\u5408\u4e86\u955c\u5934;\u8d85\u8fc7150\u5c0f\u65f6\u7684\u95fb\u6240\u672a\u95fb\uff0c\u6062\u590d\u4e86\u97f3\u9891\uff06\uff0334;  - \u7f8e\uff0c\u4ee5\u67d0\u79cd\u65b9\u5f0f\u82f9\u679c\u516c\u53f8\u3002\u4ecd\u7136\u6709\u4e00\u4e9b\u80f6\u5e26\u85cf\u5728\u8fd9\u6b3e\u62ab\u5934\u58eb\u4e13\u8f91\u4e13\u8f91\uff0c\u9009\u7968\uff0c\u89c6\u9891\u6e38\u620f\u548cCirque du Soleil\u5408\u4f5c\u4e4b\u540e\u3002\u5bf9\u4e8e\u8ba9\u5b83\u8fdb\u884c\u5f55\u5236\u4f1a\u8bdd\u7684\u8fdb\u4e00\u6b65\u4e0a\u4e0b\u6587\uff0c\u7535\u5f71\u5c06\u4e0e\u5145\u6ee1\u7167\u7247\u548c\u539f\u59cb\u8bbf\u8c08\u7684\u7269\u7406\u4e66\u914d\u5bf9\uff0c\u73b0\u5728\u63a8\u8fdf\u523010\u6708\u53d1\u5e03\u3002\u6770\u514b\u900a\uff06\uff0339;\u5728\u4eca\u5929\u7684\u8bc4\u8bba\u4e2d\uff06\uff0339;\u65b0\u95fb\uff0c\u8fea\u58eb\u5c3c\u5411\u5a92\u4f53\u6210\u5458\u63d0\u4f9b\u7684\uff0c\u6697\u793a\u4ed6\u786e\u5b9e\u5bfb\u6c42\u53d1\u5e03\u957f\u7eaa\u5f55\uff1a\uff06\uff0334;\u6211\u975e\u5e38\u611f\u8c22\u62ab\u5934\u58eb\u4e50\u961f\uff0c\u82f9\u679c\u516c\u53f8\uff0c\u800c\u8fea\u58eb\u5c3c\u5141\u8bb8\u6211\u5728\u5e94\u8be5\u88ab\u544a\u77e5\u7684\u65b9\u5f0f\u5448\u73b0\u8fd9\u4e2a\u6545\u4e8b\u3002\uff06\uff0334;\u4ed6\u8fd8\u8bc4\u8bba\u4e86\u539f\u6765\u7684\u7eaa\u5f55\u7247\uff0c\u7531Michael Lindsay-Hogg\u62cd\u6444\uff0c\u4f5c\u4e3a\uff06\uff0334;\u4e0d\u662f\u6000\u65e7 - \u5b83\u7684\u4e1c\u897f\uff06\uff0339; s\u539f\u59cb\uff0c\u8bda\u5b9e\u548c\u4eba\u7c7b\u3002\uff06\uff0334;\n \u62ab\u5934\u58eb\u4e50\u961f\uff1a\u56de\u6765\u5c06\u4e8e\u5468\u56db\u63a8\u51fa\uff0c\u4ece\u800c\u7a81\u7834\u8fea\u58eb\u5c3c+\uff06\uff0339;\u5728\u5468\u4e09\u800c\u4e0d\u662f\u661f\u671f\u4e94\u63a8\u51fa\u65b0\u7cfb\u5217\u96c6\u7684\u6700\u65b0\u5021\u8bae\u3002\u5982\u679c\u6709\u4eba\u53ef\u4ee5\u6253\u7834\u4e00\u4e2a\u65b0\u7684Sackisanct\u8fea\u58eb\u5c3c+\u89c4\u5219\uff0c\u5b83\u5fc5\u987b\u662f\u7532\u58f3\u866b\u4e50\u961f\u3002 ", "note_en": "Peter Jackson&#39;s next six-hour epic is finally coming out this year\u2014and in a first for the acclaimed director, the film will launch directly to a streaming service. It will also be broken up into episodes.\n The Beatles: Get Back, an expansive documentary originally announced for a theatrical run this August, has had its release strategy tweaked. On Thursday, Jackson and Disney confirmed that the entire project will launch  exclusively on Disney+ during this year&#39;s American Thanksgiving holiday. Each third of the documentary will launch on the streaming service on November 25, 26, and 27. As of press time, Disney hasn&#39;t said how the film will reach audiences outside of Disney+&#39;s supported territories. Neither Jackson nor Disney clarified how the original theatrical run might have worked or whether the global pandemic forced anyone&#39;s hand.\n    Today&#39;s news confirms that Jackson had an abundance of footage to work with. Roughly three years ago, the remaining Beatles\u00a0handed him access to a musical holy grail: over 60 hours of previously unseen video recordings, mostly capturing the Beatles working on the album  Let It Be and rehearsing for, and then performing, the band&#39;s legendary 1969 rooftop concert in London.\n  Jackson stitched the footage together with access to what Disney calls &#34;over 150 hours of unheard, restored audio&#34;\u2014meaning yes, somehow Apple Corps. still has some tapes in hiding after this many Beatles special edition albums, anthologies,  video games, and  Cirque du Soleil collaborations. For further context on the  Let It Be recording sessions, the film will be paired with a physical book full of photos and original interviews, now delayed to an October launch. Jackson&#39;s comments in today&#39;s news, as provided by Disney to members of the press, imply that he indeed sought to release a long documentary: &#34;I&#39;m very grateful to the Beatles, Apple Corps., and Disney for allowing me to present this story in exactly the way it should be told.&#34; He also commented on the original documentary footage, filmed by Michael Lindsay-Hogg, as something that is &#34;not nostalgia\u2014it&#39;s raw, honest, and human.&#34;\n The Beatles: Get Back will launch on a Thursday, thus breaking  Disney+&#39;s latest initiative of launching new series episodes on Wednesdays\u00a0instead of Fridays. If anyone can break a newly sacrosanct Disney+ rule, it has to be the Beatles.", "posttime": "2021-06-18 01:17:29", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u62ab\u5934\u58eb,jackson,\u8fea\u58eb\u5c3c", "title": "\u5f7c\u5f97\u6770\u514b\u900a\u76846\u5c0f\u65f6\u62ab\u5934\u58eb\u7eaa\u5f55\u7247\u5df2\u786e\u8ba4\u8fea\u58eb\u5c3c+\u4eca\u5e7411\u6708 ", "title_en": "Peter Jackson\u2019s 6-hour Beatles documentary confirmed for Disney+ this November", "transed": 1, "url": "https://arstechnica.com/gaming/2021/06/peter-jacksons-six-hour-beatles-documentary-confirmed-for-disney-this-november/", "via": "", "real_tags": ["\u62ab\u5934\u58eb", "jackson", "\u8fea\u58eb\u5c3c"]}]