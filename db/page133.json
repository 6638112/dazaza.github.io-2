[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1072096, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f Napkin Math \u65f6\u4e8b\u901a\u8baf\u7684\u4e00\u4e2a\u7248\u672c\uff0c\u662f\u5173\u4e8e\u4f7f\u7528\u9910\u5dfe\u5f0f\u6570\u5b66\u548c\u7b2c\u4e00\u6027\u539f\u7406\u601d\u7ef4\u6765\u4f30\u8ba1\u7cfb\u7edf\u6027\u80fd\u7684\u65f6\u4e8b\u901a\u8baf\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u3002\u60a8\u662f\u5426\u77e5\u9053\uff0c\u5982\u679c\u60a8\u7684\u7f51\u7ad9\u4f4e\u4e8e 12kb\uff0c\u7b2c\u4e00\u9875\u7684\u52a0\u8f7d\u901f\u5ea6\u4f1a\u660e\u663e\u52a0\u5feb\uff1f\u5f53 TCP \u6b63\u5728\u9884\u70ed\uff08\u79f0\u4e3a TCP \u6162\u542f\u52a8\uff09\u65f6\uff0c\u670d\u52a1\u5668\u5728\u521d\u59cb\u5f80\u8fd4\u4e2d\u4ec5\u53d1\u9001\u51e0\u4e2a\u6570\u636e\u5305\uff08\u901a\u5e38\u4e3a 10 \u4e2a\uff09\u3002\u53d1\u9001\u5b8c\u7b2c\u4e00\u7ec4\u6570\u636e\u5305\u540e\uff0c\u9700\u8981\u7b49\u5f85\u5ba2\u6237\u7aef\u786e\u8ba4\u6536\u5230\u6240\u6709\u8fd9\u4e9b\u6570\u636e\u5305\u3002\u4f7f\u7528 10 \u4e0e 30 \u7684\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\uff08\u4e5f\u79f0\u4e3a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u6216 initcwnd\uff09\u4f20\u8f93\u7ea6 15kb \u7684\u5feb\u901f\u8bf4\u660e\uff1a\u521d\u59cb\u7a97\u53e3\u8d8a\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u7b2c\u4e00\u6b21\u5f80\u8fd4\u4e2d\u4f20\u8f93\u7684\u8d8a\u591a\uff0c\u60a8\u7684\u7ad9\u70b9\u8d8a\u5feb\u5728\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\u3002\u5bf9\u4e8e\u8f83\u957f\u7684\u5f80\u8fd4\u65f6\u95f4\uff08\u4f8b\u5982\u7a7f\u8d8a\u6d77\u6d0b\uff09\uff0c\u8fd9\u5c06\u5f00\u59cb\u53d8\u5f97\u5f88\u91cd\u8981\u3002\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5e38\u89c1\u6258\u7ba1\u670d\u52a1\u63d0\u4f9b\u5546\u7684\u521d\u59cb\u7a97\u53e3\u7684\u5927\u81f4\u5927\u5c0f\uff1a \u4e3a\u4e86\u751f\u6210\u8fd9\u4e2a\uff0c\u6211\u7f16\u5199\u4e86\u4e00\u4e2a\u811a\u672c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 sirupsen/initcwnd \u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7ad9\u70b9\u3002\u6839\u636e\u62a5\u544a\uff0c\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u8c03\u6574\u9875\u9762\u5927\u5c0f\uff0c\u6216\u8c03\u6574\u670d\u52a1\u5668\u7684\u521d\u59cb\u6162\u542f\u52a8\u7a97\u53e3\u5927\u5c0f (initcwnd)\uff08\u53c2\u89c1\u6587\u7ae0\u5e95\u90e8\uff09\u3002\u8bf7\u7ee7\u7eed\u9605\u8bfb\uff0c\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\uff01\u4eb2\u7231\u7684\u9910\u5dfe\u9a6c\u745f\u65af\uff0c\u592a\u4e45\u4e86\u3002\u81ea\u4e0a\u6b21\u4ee5\u6765\uff0c\u6211\u5728\u4ee4\u4eba\u60ca\u53f9\u7684 8 \u5e74\u4e4b\u540e\u79bb\u5f00\u4e86 Shopify\u3002\u4e00\u751f\u7684\u9a91\u884c\u3002\u5c31\u76ee\u524d\u800c\u8a00\uff0c\u6211\u6b63\u5728\u901a\u8fc7\u8010\u529b\u51b2\u6d6a\uff08\u5728\u6211\u79bb\u5f00\u540e\u7684\u4e00\u5468\u8fdb\u884c 125K \u4e3a\u671f 3 \u5929\u7684\u65c5\u884c\uff09\u3001\u4f11\u95f2\u7f16\u7a0b\uff08\u5176\u4e2d\u9910\u5dfe\u7eb8\u6570\u5b66\u80af\u5b9a\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff09\u548c\u5b66\u4e60\u4e00\u4e9b\u975e\u8ba1\u7b97\u673a\u7684\u4e1c\u897f\u3002\u5728\u672c\u671f\u4e2d\uff0c\u6211\u4eec\u5c06\u6df1\u5165\u4e86\u89e3\u5f53\u6211\u4eec\u901a\u8fc7 HTTP \u5bf9\u7f51\u7ad9\u8fdb\u884c\u521d\u59cb\u9875\u9762\u52a0\u8f7d\u65f6\uff0c\u5728\u7ebf\u8def\u4e0a\u7a76\u7adf\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u6b63\u5982\u6211\u5df2\u7ecf\u6697\u793a\u7684\u90a3\u6837\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u5728\u4f18\u5316\u77ed\u671f\u3001\u7a81\u53d1 TCP \u4f20\u8f93\u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u795e\u5947\u7684\u5b57\u8282\u9608\u503c\u3002\u5982\u679c\u4f60\u4f4e\u4e8e\u8fd9\u4e2a\u9608\u503c\uff0c\u6216\u8005\u589e\u52a0\u5b83\uff0c\u5b83\u53ef\u80fd\u4f1a\u4f7f\u5ba2\u6237\u7aef\u514d\u4e8e\u591a\u6b21\u5f80\u8fd4\u3002\u7279\u522b\u662f\u5bf9\u4e8e\u7ecf\u5e38\u4ece\u9065\u8fdc\u7684\u5730\u65b9\uff08\u5373\u9ad8\u5f80\u8fd4\u65f6\u95f4\uff09\u8bf7\u6c42\u7684\u5177\u6709\u5355\u4e00\u4f4d\u7f6e\u7684\u7ad9\u70b9\uff0c\u4f8b\u5982\u7f8e\u56fd - &gt; \u6fb3\u5927\u5229\u4e9a\uff0c\u8fd9\u53ef\u4ee5\u4ea7\u751f\u5de8\u5927\u7684\u5dee\u5f02\u3002\u5982\u679c\u60a8\u6b63\u5728\u8fd0\u8425 SaaS \u98ce\u683c\u7684\u670d\u52a1\uff0c\u8fd9\u5f88\u53ef\u80fd\u5c31\u662f\u60a8\u6240\u5904\u7684\u60c5\u51b5\u3002\u867d\u7136\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u7684 HTTP\uff0c\u4f46 TCP \u6162\u542f\u52a8\u5bf9\u6570\u636e\u4e2d\u5fc3\u5185\u7684 RPC \u4e5f\u5f88\u91cd\u8981\uff0c\u5c24\u5176\u662f\u5728\u5b83\u4eec\u4e4b\u95f4\u3002\n\u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u9996\u5148\u5c55\u793a\u5173\u4e8e\u6211\u4eec\u5728\u7b2c 4 \u5c42\u601d\u8003\u52a0\u8f7d\u7f51\u7ad9\u5982\u4f55\u5de5\u4f5c\u7684\u6734\u7d20\u5fc3\u7406\u6a21\u578b\u3002\u7136\u540e\u6211\u4eec\u5c06\u5bf9\u9884\u671f\u6027\u80fd\u8fdb\u884c\u9910\u5dfe\u7eb8\u6570\u5b66\u8ba1\u7b97\uff0c\u5e76\u5c06\u6211\u4eec\u8106\u5f31\u3001\u6734\u7d20\u7684\u6a21\u578b\u4e0e\u73b0\u5b9e\u9762\u5bf9\u9762\uff0c\u770b\u770b\u5b83\u662f\u5426\u7b26\u5408\u8981\u6c42.\u90a3\u4e48\u5f53\u6211\u4eec\u8bf7\u6c42\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u6211\u4eec\u8ba4\u4e3a\u5728 TCP \u7ea7\u522b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u4e3a\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u4eec\u5c06\u6392\u9664\u538b\u7f29\u3001DOM \u6e32\u67d3\u3001Javascript \u7b49\uff0c\u5e76\u4ec5\u9650\u4e8e\u4e0b\u8f7d HTML\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a curl --http1.1 https://sirupsen.com &gt; /dev/null \uff08\u6ce8\u610f sirupsen/initcwnduses -- \u7528 curl \u538b\u7f29\u4ee5\u53cd\u6620\u73b0\u5b9e\uff09\u3002\u4e3a\u4e86\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u6709\u8da3\uff0c\u6211\u4eec\u5c06\u9009\u62e9\u4e00\u4e2a\u5728\u5730\u7406\u4e0a\u79bb\u6211\u66f4\u8fdc\u4f46\u6ca1\u6709\u8fc7\u5ea6\u4f18\u5316\u7684\u7ad9\u70b9\uff1ainformation.dk\uff0c\u4e00\u5bb6\u4e39\u9ea6\u62a5\u7eb8\u3002\u901a\u8fc7\u4ece\u4e0d\u540c\u5730\u7406\u533a\u57df\u7684\u670d\u52a1\u5668\u8fdb\u884c\u7684\u4e00\u4e9b DNS \u67e5\u627e\u5e76\u4f7f\u7528\u89c2\u5bdf\u955c\uff0c\u6211\u53ef\u4ee5\u786e\u5b9a\u5b83\u4eec\u7684\u6240\u6709 HTML \u6d41\u91cf\u59cb\u7ec8\u8def\u7531\u5230\u54e5\u672c\u54c8\u6839\u7684\u6570\u636e\u4e2d\u5fc3\u3002\u5982\u4eca\uff0c\u8bb8\u591a\u7ad9\u70b9\u90fd\u901a\u8fc7 Cloudflare POP \u8def\u7531\uff0c\u8fd9\u4e9b\u7ad9\u70b9\u9644\u8fd1\u6709\u4e00\u4e2a\u6570\u636e\u4e2d\u5fc3\uff0c\u4e3a\u4e86\u7b80\u5316\u6211\u4eec\u7684\u5206\u6790\uff0c\u6211\u4eec\u5e0c\u671b\u786e\u4fdd\u60c5\u51b5\u5e76\u975e\u5982\u6b64\u3002\u6211\u76ee\u524d\u5750\u5728\u9b41\u5317\u514b\u897f\u5357\u90e8\uff0c\u4f7f\u7528 LTE \u8fde\u63a5\u3002\u6211\u53ef\u4ee5\u901a\u8fc7 traceroute(1) \u786e\u5b9a\u6211\u7684\u6d41\u91cf\u6b63\u5728\u901a\u8fc7\u8def\u5f84\u8499\u7279\u5229\u5c14 -&gt; \u7ebd\u7ea6 -&gt; \u963f\u59c6\u65af\u7279\u4e39 -&gt; \u54e5\u672c\u54c8\u6839\u524d\u5f80\u54e5\u672c\u54c8\u6839\u3002\u5f80\u8fd4\u65f6\u95f4\u7ea6\u4e3a 140 \u6beb\u79d2\u3002\u5982\u679c\u6211\u4eec\u5c06\u4e0a\u8ff0\u9910\u5dfe\u7eb8\u6a21\u578b\u7684\u5f80\u8fd4\u6b21\u6570\u76f8\u52a0\uff08\u4e0d\u5305\u62ec DNS\uff09\uff0c\u6211\u4eec\u9884\u8ba1\u52a0\u8f7d\u4e39\u9ea6\u7ad9\u70b9\u9700\u8981 4 * 140 \u6beb\u79d2 = 560 \u6beb\u79d2\u3002\u56e0\u4e3a\u6211\u4f7f\u7528\u7684\u662f LTE \u8fde\u63a5\uff0c\u4f46\u6211\u6ca1\u6709\u5f97\u5230\u8fdc\u9ad8\u4e8e 15 mbit/s\uff0c\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u9664\u4e86 4 \u6b21\u5f80\u8fd4\u4e4b\u5916\uff0c\u8fd8\u9700\u8981\u5927\u7ea6 100 \u6beb\u79d2\u6765\u4f20\u8f93\u6570\u636e\u3002\u56e0\u6b64\uff0c\u6839\u636e\u6211\u4eec\u7684\u9910\u5dfe\u7eb8\u6570\u5b66\uff0c\u6211\u4eec\u671f\u671b\u6211\u4eec\u5e94\u8be5\u80fd\u591f\u5728\u5927\u7ea6 660 \u6beb\u79d2\u7684\u65f6\u95f4\u5185\u4ece\u54e5\u672c\u54c8\u6839\u7684\u670d\u52a1\u5668\u4e0b\u8f7d 160kb \u7684 HTML\u3002\u7136\u800c\uff0c\u73b0\u5b9e\u8fd8\u6709\u5176\u4ed6\u8ba1\u5212\u3002\u5f53\u6211\u8fd0\u884c\u65f6 curl --http1.1 https://www.information.dk \u9700\u8981 1.3 \u79d2\uff01\u901a\u5e38\u6211\u4eec\u4f1a\u8bf4\uff0c\u5982\u679c\u9910\u5dfe\u6570\u5b66\u5728 ~10 \u500d\u4ee5\u5185\uff0c\u9910\u5dfe\u6570\u5b66\u53ef\u80fd\u4e0e\u73b0\u5b9e\u76f8\u7b26\uff0c\u4f46\u8fd9\u901a\u5e38\u662f\u6211\u4eec\u5904\u7406\u7eb3\u79d2\u548c\u5fae\u79d2\u7684\u60c5\u51b5\u3002\u672a\u5173\u95ed~ 640ms\uff01\u90a3\u4e48\u8fd9\u91cc\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f\u5f53\u9910\u5dfe\u7eb8\u6570\u5b66\u548c\u73b0\u5b9e\u4e4b\u95f4\u5b58\u5728\u5dee\u5f02\u65f6\uff0c\u8fd9\u662f\u56e0\u4e3a\uff081\uff09\u4e16\u754c\u7684\u9910\u5dfe\u7eb8\u6a21\u578b\u4e0d\u6b63\u786e\uff0c\u6216\u8005\uff082\uff09\u7cfb\u7edf\u4e2d\u6709\u4f18\u5316\u7a7a\u95f4\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u6709\u70b9\u4e24\u8005\u517c\u800c\u6709\u4e4b\u3002\u8ba9\u6211\u4eec\u8ffd\u6355\u90a3 640 \u6beb\u79d2\u3002 \ud83d\udc40\n\u4e3a\u6b64\uff0c\u6211\u4eec\u5fc5\u987b\u4f7f\u7528 Wireshark \u5206\u6790\u539f\u59cb\u7f51\u7edc\u6d41\u91cf\u3002 Wireshark \u5e26\u56de\u4e86\u8bb8\u591a\u56de\u5fc6\u2026\u2026\u6709\u4e9b\u559c\u6b22\uff0c\u4f46\u4e3b\u8981\u662f\u2026\u2026\u5728\u8bd5\u56fe\u627e\u51fa\u95f4\u6b47\u6027\u7f51\u7edc\u95ee\u9898\u7684\u539f\u56e0\u65f6\u611f\u5230\u6cae\u4e27\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e00\u6b21\u662f\u4e3a\u4e86\u597d\u73a9\u548c\u6e38\u620f\uff01\u6211\u4eec\u5c06\u5728 Wireshark \u4e2d\u8f93\u5165 host www.information.dk \u4ee5\u4f7f\u5176\u6355\u83b7\u5230\u7ad9\u70b9\u7684\u6d41\u91cf\u3002\u5728\u6211\u4eec\u7684\u7ec8\u7aef\u4e2d\uff0c\u6211\u4eec\u8fd0\u884c\u4e0a\u9762\u7684 curl \u547d\u4ee4\u8ba9 Wireshark \u6709\u4e00\u4e9b\u4e1c\u897f\u8981\u6355\u83b7\u3002 Wireshark \u7136\u540e\u4f1a\u7ed9\u6211\u4eec\u4e00\u4e2a\u5f88\u597d\u7684 GUI \u6765\u5e2e\u52a9\u6211\u4eec\u8ffd\u6355\u6211\u4eec\u6ca1\u6709\u8003\u8651\u7684\u5927\u7ea6\u534a\u79d2\u3002\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4ef6\u4e8b\u662f\uff0c\u4e3a\u4e86\u8ba9 Wireshark \u4e86\u89e3\u4f1a\u8bdd\u7684 TLS/SSL \u5185\u5bb9\uff0c\u5b83\u9700\u8981\u77e5\u9053\u4e0e\u670d\u52a1\u5668\u534f\u5546\u7684\u79d8\u5bc6\u3002\u8fd9\u91cc\u6709\u4e00\u4e2a\u5b8c\u6574\u7684\u6307\u5357\uff0c\u4f46\u7b80\u800c\u8a00\u4e4b\uff0c\u60a8\u5c06 SSLKEYLOGFILE=log.log \u4f20\u9012\u7ed9 curl \u547d\u4ee4\uff0c\u7136\u540e\u5728 TLS \u914d\u7f6e\u4e2d\u7684 Wireshark \u4e2d\u6307\u5411\u8be5\u6587\u4ef6\u3002\u6211\u4eec\u770b\u5230\u4e86\u9884\u671f\u7684 TCP \u5f80\u8fd4\uff0c\u6765\u81ea\u5ba2\u6237\u7aef\u7684 SYN\uff0c\u7136\u540e\u6765\u81ea\u670d\u52a1\u5668\u7684 SYN+ACK\u3002\u5e03\u57c3\u8bfa\u3002\u4f46\u5728\u90a3\u4e4b\u540e\u5b83\u770b\u8d77\u6765\u5f88\u53ef\u7591\u3002\u6211\u4eec\u770b\u5230\u4e86 3 \u6b21 TLS/SSL \u5f80\u8fd4\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u56fe\u4e2d\u9884\u671f\u7684 2 \u6b21\uff01\u4e3a\u4e86\u786e\u4fdd\u6211\u6ca1\u6709\u8bef\u4f1a\uff0c\u6211\u518d\u6b21\u68c0\u67e5\u4e86 sirupsen.com\uff0c\u679c\u7136\uff0c\u5b83\u663e\u793a Wireshark \u4e2d\u7684\u4e24\u6b21\u5f80\u8fd4\u90fd\u7b26\u5408\u9884\u671f\uff1a\u5982\u679c\u6211\u4eec\u4ed4\u7ec6\u7814\u7a76\u4e0a\u9762\u4e3a\u4e39\u9ea6\u62a5\u7eb8\u5e26\u6ce8\u91ca\u7684 Wireshark \u8f6c\u50a8\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u95ee\u9898\u662f\uff0c\u65e0\u8bba\u51fa\u4e8e\u4f55\u79cd\u539f\u56e0\uff0c\u670d\u52a1\u5668\u5728\u4f20\u8f93\u8bc1\u4e66\uff08\u6570\u636e\u5305 9\uff09\u7684\u8fc7\u7a0b\u4e2d\u90fd\u5728\u7b49\u5f85 TCP \u786e\u8ba4\u3002\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u5728\u4f20\u8f93\u7ea6 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u540e\u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684 TCP ACK\uff1f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u4e0d\u4e00\u6b21\u53d1\u9001\u6574\u4e2a\u8bc1\u4e66\uff1f\u5728 TCP \u4e2d\uff0c\u670d\u52a1\u5668\u4f1a\u4ed4\u7ec6\u76d1\u63a7\u5b83\u5728\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305/\u5b57\u8282\u6570\u3002\u901a\u5e38\uff0c\u6bcf\u4e2a\u6570\u636e\u5305\u662f\u5927\u7ea6 1460 \u5b57\u8282\u7684\u5e94\u7528\u7a0b\u5e8f\u6570\u636e\u3002\u670d\u52a1\u5668\u4e0d\u5fc5\u4e00\u6b21\u53d1\u9001\u5b83\u62e5\u6709\u7684\u6240\u6709\u6570\u636e\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u4e0d\u77e5\u9053\u7ba1\u9053\u5bf9\u5ba2\u6237\u7aef\u7684\u201c\u80d6\u201d\u7a0b\u5ea6\u3002\u5982\u679c\u5ba2\u6237\u7aef\u53ea\u80fd\u63a5\u6536 64 kbit/scurrent\uff0c\u90a3\u4e48\u53d1\u9001\u4f8b\u5982 100 \u4e2a\u6570\u636e\u5305\u53ef\u80fd\u4f1a\u5b8c\u5168\u963b\u585e\u7f51\u7edc\u3002\u7f51\u7edc\u5f88\u53ef\u80fd\u4f1a\u4e22\u5f03\u4e00\u4e9b\u968f\u673a\u6570\u636e\u5305\uff0c\u4e0e\u4ee5\u66f4\u53ef\u6301\u7eed\u7684\u901f\u5ea6\u4e3a\u5ba2\u6237\u7aef\u53d1\u9001\u6570\u636e\u5305\u76f8\u6bd4\uff0c\u8fd9\u4e9b\u6570\u636e\u5305\u7684\u8865\u507f\u901f\u5ea6\u751a\u81f3\u66f4\u6162\u3002\nTCP \u534f\u8bae\u7684\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\u662f\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u5c1d\u8bd5\u53d1\u9001\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u7684\u5e73\u8861\u884c\u4e3a\uff0c\u540c\u65f6\u786e\u4fdd\u670d\u52a1\u5668\u4e0d\u4f1a\u4f7f\u5230\u5ba2\u6237\u7aef\u7684\u8def\u5f84\u8fc7\u5ea6\u9971\u548c\u5e76\u4e22\u5931\u6570\u636e\u5305\u3002\u4e22\u5305\u5bf9 TCP \u4e2d\u7684\u5e26\u5bbd\u975e\u5e38\u4e0d\u5229\u3002\u670d\u52a1\u5668\u5728\u4efb\u4f55\u7ed9\u5b9a\u65f6\u95f4\u53ea\u4fdd\u7559\u4e00\u5b9a\u6570\u91cf\u7684\u6570\u636e\u5305\u3002 TCP \u672f\u8bed\u4e2d\u7684\u201c\u4f20\u8f93\u4e2d\u201d\u610f\u5473\u7740\u201c\u672a\u786e\u8ba4\u201d\u7684\u6570\u636e\u5305\uff0c\u5373\u670d\u52a1\u5668\u5df2\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u4f46\u5ba2\u6237\u7aef\u5c1a\u672a\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u786e\u8ba4\u7684\u6570\u636e\u5305\u5b83\u6536\u5230\u7684\u670d\u52a1\u5668\u3002\u901a\u5e38\u5bf9\u4e8e\u6bcf\u4e2a\u6210\u529f\u786e\u8ba4\u7684\u6570\u636e\u5305\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5c06\u51b3\u5b9a\u5c06\u5141\u8bb8\u7684\u4f20\u8f93\u4e2d\u6570\u636e\u5305\u7684\u6570\u91cf\u589e\u52a0 1\u3002\u60a8\u53ef\u80fd\u542c\u8bf4\u8fc7\u8fd9\u79cd\u7b80\u5355\u7684\u7b97\u6cd5\uff0c\u79f0\u4e3a\u201cTCP \u6162\u542f\u52a8\u201d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5982\u679c\u6570\u636e\u5305\u5df2\u88ab\u4e22\u5f03\uff0c\u5219\u670d\u52a1\u5668\u5c06\u51b3\u5b9a\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u6570\u7565\u5c11\u3002\u5728 TCP \u8fde\u63a5\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u4e2d\uff0c\u8fd9\u79cd\u821e\u8e48\u5c06\u4e0d\u77e5\u75b2\u5026\u5730\u8fdb\u884c\u3002\u5728 TCP \u672f\u8bed\u4e2d\uff0c\u6211\u4eec\u6240\u8bf4\u7684\u201c\u98de\u884c\u4e2d\u201d\u88ab\u79f0\u4e3a\u201c\u62e5\u585e\u7a97\u53e3\u201d\uff08\u6216\u7b80\u79f0 cwnd\uff09\u3002\u901a\u5e38\u5728\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u4e22\u5931\u540e\uff0cTCP \u5b9e\u73b0\u4ece\u7b80\u5355\u7684 TCP \u6162\u542f\u52a8\u7b97\u6cd5\u5207\u6362\u5230\u66f4\u590d\u6742\u7684\u201c\u62e5\u585e\u63a7\u5236\u7b97\u6cd5\u201d\uff0c\u5176\u4e2d\u6709\u51e0\u5341\u4e2a\u3002\u4ed6\u4eec\u7684\u5de5\u4f5c\u662f\uff1a\u6839\u636e\u6211\u4eec\u5bf9\u7f51\u7edc\u7684\u89c2\u5bdf\uff0c\u6211\u4eec\u5e94\u8be5\u6709\u591a\u5c11\u6d41\u91cf\u624d\u80fd\u6700\u5927\u5316\u5e26\u5bbd\uff1f\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u56de\u8fc7\u5934\u6765\u7406\u89e3\u4e3a\u4ec0\u4e48 TLS \u63e1\u624b\u9700\u8981 3 \u6b21\u5f80\u8fd4\u800c\u4e0d\u662f 2 \u6b21\u3002\u5728\u5ba2\u6237\u7aef\u5f00\u59cb\u4e0e TLS HELLO \u7684 TLS \u63e1\u624b\u540e\uff0c\u4e39\u9ea6\u670d\u52a1\u5668\u771f\u7684\u3001\u771f\u7684\u60f3\u8981\u4f20\u8f93\u8fd9\u4e2a ~6908 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5c3d\u7ba1\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\uff09\u5f53\u65f6\u53ea\u662f\u4e0d\u591f\u5927\uff0c\u65e0\u6cd5\u5bb9\u7eb3\u6574\u4e2a\u8bc1\u4e66\uff01\u6362\u53e5\u8bdd\u8bf4\uff0c\u670d\u52a1\u5668\u7684 TCP \u5b9e\u73b0\u5df2\u7ecf\u51b3\u5b9a\u5b83\u4e0d\u76f8\u4fe1\u53ef\u601c\u7684\u5ba2\u6237\u7aef\u53ef\u4ee5\u4e00\u6b21\u63a5\u6536\u90a3\u4e48\u591a\u7f8e\u5473\u7684\u5b57\u8282\u2014\u2014\u6240\u4ee5\u5b83\u53d1\u9001\u4e86\u4e00\u4e2a 4398 \u5b57\u8282\u7684\u8bc1\u4e66\u3002\u5f53\u7136\uff0c63% \u7684\u8bc1\u4e66\u4e0d\u8db3\u4ee5\u7ee7\u7eed\u8fdb\u884c TLS \u63e1\u624b\u2026\u2026\u6240\u4ee5\u5ba2\u6237\u7aef\u53f9\u4e86\u53e3\u6c14\uff0c\u5c06 TCP ACK \u53d1\u9001\u56de\u670d\u52a1\u5668\uff0c\u7136\u540e\u670d\u52a1\u5668\u53d1\u9001\u8bc1\u4e66\u5269\u4f59\u7684 2510\uff0c\u4ee5\u4fbf\u5ba2\u6237\u7aef\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u5176TLShandshake \u7684\u4e00\u90e8\u5206\u3002\u5f53\u7136\uff0c\u8fd9\u4e00\u5207\u770b\u8d77\u6765\u6709\u70b9\u50bb\u2026\u2026\u9996\u5148\uff0c\u4e3a\u4ec0\u4e48\u8bc1\u4e66\u662f6908\u5b57\u8282\uff1f\uff01\u4e3a\u4e86\u6bd4\u8f83\uff0c\u6211\u7684\u7f51\u7ad9\u662f 2635\u3002\u867d\u7136\u8fd9\u5bf9\u6211\u6765\u8bf4\u4e0d\u662f\u592a\u6709\u8da3\u3002\u66f4\u6709\u8da3\u7684\u662f\u4e3a\u4ec0\u4e48\u670d\u52a1\u5668\u53ea\u53d1\u90016908\u4e2a\u5b57\u8282\uff1f\u5bf9\u4e8e\u73b0\u4ee3 Web \u670d\u52a1\u5668\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u5f88\u5c11\uff01\u5728 TCP \u4e2d\uff0c\u5728\u6211\u4eec\u5bf9\u5ba2\u6237\u7aef\u4e00\u65e0\u6240\u77e5\u4e4b\u524d\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5168\u65b0\u8fde\u63a5\u4e0a\u53d1\u9001\u591a\u5c11\u6570\u636e\u5305\u79f0\u4e3a\u201c\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u201d\u3002\u5728\u914d\u7f6e\u4e0a\u4e0b\u6587\u4e2d\uff0c\u8fd9\u79f0\u4e3a initcwnd\u3002\u5982\u679c\u60a8\u5728\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u4e2d\u5f15\u7528\u4e86\u4e0a\u9762\u7684\u9ec4\u8272\u56fe\u8868\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u7b2c\u4e00\u6b21\u5f80\u8fd4\u65f6\u7684\u503c\u3002\n\u73b0\u5728\uff0cLinux \u670d\u52a1\u5668\u7684\u9ed8\u8ba4\u503c\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u6216 10 * 1460 = 14600 \u5b57\u8282\uff0c\u5176\u4e2d 1460 \u5927\u81f4\u662f\u6bcf\u4e2a\u6570\u636e\u5305\u7684\u6570\u636e\u8d1f\u8f7d\u3002\u90a3\u5c06\u7b26\u5408\u4e39\u9ea6\u62a5\u7eb8\u7684\u602a\u7269\u8bc1\u4e66\u3002\u5f88\u660e\u663e\uff0c\u8fd9\u4e0d\u662f\u4ed6\u4eec\u7684 initcwd\uff0c\u4ece\u90a3\u65f6\u8d77\u670d\u52a1\u5668\u5c31\u4e0d\u4f1a\u8010\u5fc3\u7b49\u5f85\u6211\u7684 ACK\u3002\u901a\u8fc7\u4e00\u4e9b\u6316\u6398\uff0c\u4f3c\u4e4e\u5728 Linux 3.0.0 \u4e4b\u524d initcwnd \u662f 3\uff0c\u6216 ~ 3 * 1460 = 4380 \u5b57\u8282\uff01\u5927\u81f4\u5bf9\u9f50\uff0c\u6240\u4ee5\u4e39\u9ea6\u62a5\u7eb8\u7684 initcwnd \u4f3c\u4e4e\u662f 3\u3002\u6211\u4eec\u4e0d\u786e\u5b9a\u5b83\u662f Linux\uff0c\u4f46\u6211\u4eec\u77e5\u9053 initcwnd \u662f 3\u3002\u7531\u4e8e\u98de\u884c\u4e2d\u7684\u6570\u636e\u5305\u5448\u6307\u6570\u589e\u957f\uff0c\u56e0\u6b64 initcwnd \u7684\u91cd\u8981\u6027\u6211\u4eec\u53ef\u4ee5\u5728\u524d\u51e0\u6b21\u5b9d\u8d35\u7684\u5f80\u8fd4\u4e2d\u53d1\u9001\u5f88\u591a\u6570\u636e\uff1a\u6b63\u5982\u6211\u4eec\u5728\u4ecb\u7ecd\u4e2d\u770b\u5230\u7684\uff0c\u5728 CDN \u4e2d\u5c06\u503c\u4ece\u9ed8\u8ba4\u503c\u63d0\u9ad8\u5230\u4f8b\u5982 32 (~46kb) \u662f\u5f88\u5e38\u89c1\u7684\u3002\u8fd9\u662f\u6709\u9053\u7406\u7684\uff0c\u56e0\u4e3a\u60a8\u53ef\u80fd\u6b63\u5728\u4f20\u8f93\u8bb8\u591a\u5146\u5b57\u8282\u7684\u56fe\u50cf\u3002\u7b49\u5f85 TCP \u6162\u542f\u52a8\u5230\u8fd9\u4e00\u70b9\u53ef\u80fd\u9700\u8981\u51e0\u6b21\u5f80\u8fd4\u3002\u53e6\u4e00\u4e2a\u5176\u4ed6\u539f\u56e0\uff0c\u8fd9\u4e5f\u662f HTTP2/HTTP3 \u671d\u7740\u901a\u8fc7\u76f8\u540c\u8fde\u63a5\u79fb\u52a8\u66f4\u591a\u6570\u636e\u7684\u65b9\u5411\u53d1\u5c55\u7684\u539f\u56e0\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6709\u4e00\u4e2a\u201c\u70ed\u201d\u7684 TCP \u4f1a\u8bdd\u3002 \u201c\u6e29\u6696\u201d\u610f\u5473\u7740\u4f20\u8f93\u4e2d\u7684\u62e5\u585e\u7a97\u53e3/\u5b57\u8282\u5df2\u7ecf\u4ece\u6700\u521d\u88ab\u670d\u52a1\u5668\u6177\u6168\u5730\u589e\u52a0\u4e86\u3002 TCP \u6162\u542f\u52a8\u7a97\u53e3\u4e5f\u662f\u5b58\u5728\u70b9 (POP) \u6709\u7528\u7684\u90e8\u5206\u539f\u56e0\u3002\u5982\u679c\u60a8\u8fde\u63a5\u5230\u8ddd\u79bb\u60a8\u7f51\u7ad9\u524d 10 \u6beb\u79d2\u7684 POP\uff0c\u8bf7\u4e0e POP \u534f\u5546 TLS\uff0c\u5e76\u4e14 POP \u5df2\u7ecf\u4e0e 100 \u6beb\u79d2\u4e4b\u5916\u7684\u540e\u7aef\u670d\u52a1\u5668\u5efa\u7acb\u4e86\u70ed\u8fde\u63a5\u2014\u2014\u8fd9\u4f1a\u663e\u7740\u63d0\u9ad8\u6027\u80fd\uff0c\u6ca1\u6709\u5176\u4ed6\u53d8\u5316\u3002\u4ece 4 * 100ms = 400ms \u5230 3 * 10ms + 100ms = 130ms\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u4e3a\u4ec0\u4e48\u6211\u4eec\u6709 3 \u6b21 TLS \u5f80\u8fd4\u800c\u4e0d\u662f\u9884\u671f\u7684 2 \u6b21\uff1a\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u5f88\u5c0f\u3002\u62e5\u585e\u7a97\u53e3\uff08\u670d\u52a1\u5668\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u540c\u6837\u9002\u7528\u4e8e\u670d\u52a1\u5668\u53d1\u56de\u7ed9\u6211\u4eec\u7684 HTTP \u6709\u6548\u8d1f\u8f7d\u3002\u5982\u679c\u5b83\u4e0d\u9002\u5408\u62e5\u585e\u7a97\u53e3\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u591a\u6b21\u5f80\u8fd4\u6765\u63a5\u6536\u6240\u6709 HTML\u3002\u5728 Wireshark \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u62c9\u51fa\u4e00\u4e2a TCP \u89c6\u56fe\uff0c\u5b83\u53ef\u4ee5\u8ba9\u6211\u4eec\u4e86\u89e3\u5b8c\u6210\u8bf7\u6c42\u9700\u8981\u591a\u5c11\u6b21\u5f80\u8fd4\uff08sirupsen/initcwnd \u5c1d\u8bd5\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7b97\u6cd5\u4e3a\u4f60\u731c\u6d4b\uff09\uff1a\n\u6211\u4eec\u770b\u5230 TCP \u5f80\u8fd4\u30013 \u6b21 TLS \u5f80\u8fd4\uff0c\u7136\u540e\u662f 5-6 \u4e2a HTTP \u5f80\u8fd4\u4ee5\u83b7\u53d6 ~160kb \u9875\u9762\uff01\u56fe\u4e2d\u7684\u6bcf\u4e2a\u5c0f\u70b9\u90fd\u8868\u793a\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u56e0\u6b64\u60a8\u4f1a\u6ce8\u610f\u5230\u62e5\u585e\u7a97\u53e3\uff08\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\uff09\u5728\u6bcf\u6b21\u5f80\u8fd4\u65f6\u5927\u81f4\u52a0\u500d\u3002\u670d\u52a1\u5668\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u589e\u52a0\u7a97\u53e3\u7684\u5927\u5c0f\u3002 \u201c\u6210\u529f\u7684\u5f80\u8fd4\u201d\u662f\u6307\u6ca1\u6709\u4e22\u5305\u7684\u5f80\u8fd4\uff0c\u5728\u4e00\u4e9b\u8f83\u65b0\u7684\u7b97\u6cd5\u4e2d\uff0c\u662f\u6307\u4e0d\u9700\u8981\u592a\u591a\u65f6\u95f4\u7684\u5f80\u8fd4\u3002\u901a\u5e38\uff0c\u670d\u52a1\u5668\u5c06\u7ee7\u7eed\u4e3a\u6bcf\u6b21\u6210\u529f\u7684\u5f80\u8fd4\u5c06\u6570\u636e\u5305\u6570\u91cf\u52a0\u500d\uff08\u6bcf\u4e2a\u7ea6 1460 \u5b57\u8282\uff09\uff0c\u76f4\u5230\u53d1\u751f\u4e0d\u6210\u529f\u7684\u5f80\u8fd4\uff08\u6162\u901f\u6216\u4e22\u5931\u6570\u636e\u5305\uff09\uff0c\u6216\u8005\u4f20\u8f93\u4e2d\u7684\u5b57\u8282\u5c06\u8d85\u8fc7\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u3002\u5f53 TCP \u4f1a\u8bdd\u5f00\u59cb\u65f6\uff0c\u5ba2\u6237\u7aef\u5c06\u901a\u544a\u5b83\u5141\u8bb8\u4f20\u8f93\u7684\u5b57\u8282\u6570\u3002\u8fd9\u901a\u5e38\u6bd4\u670d\u52a1\u5668\u613f\u610f\u7acb\u5373\u53d1\u9001\u7684\u8981\u5927\u5f97\u591a\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u521d\u59cb SYN \u5305\u4e2d\u63d0\u53d6\u5b83\uff0c\u5e76\u770b\u5230\u5b83\u5927\u7ea6\u4e3a 65kb\uff1a\u5982\u679c\u4f1a\u8bdd\u66f4\u957f\u5e76\u4e14\u6211\u4eec\u5c06\u5176\u63a8\u5411\u8be5\u7a97\u53e3\uff0c\u5ba2\u6237\u7aef\u5c06\u53d1\u9001\u4e00\u4e2a TCP \u5305\u66f4\u65b0\u63a5\u6536\u7684\u5927\u5c0f\u7a97\u6237\u3002\u6240\u4ee5\u6709\u4e24\u4e2a\u7a97\u53e3\u5728\u8d77\u4f5c\u7528\uff1a\u670d\u52a1\u5668\u7ba1\u7406\u4f20\u8f93\u4e2d\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a\u62e5\u585e\u7a97\u53e3\u3002\u62e5\u585e\u7a97\u53e3\u7531\u670d\u52a1\u5668\u7684\u62e5\u585e\u7b97\u6cd5\u63a7\u5236\uff0c\u8be5\u7b97\u6cd5\u6839\u636e\u6210\u529f\u7684\u5f80\u8fd4\u6b21\u6570\u8fdb\u884c\u8c03\u6574\uff0c\u4f46\u59cb\u7ec8\u4ee5\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e3a\u4e0a\u9650\u3002\u6211\u4eec\u6765\u770b\u770b\u670d\u52a1\u5668\u6bcf\u6b21\u5f80\u8fd4\u4f20\u8f93\u7684\u6570\u636e\u5305\u6570\u91cf\uff1a HTTP \u5f80\u8fd4 5: 48 (~69kb\uff0c\u8fd9\u5728\u7406\u8bba\u4e0a\u4f1a\u8d85\u8fc7 64kb \u5f53\u524d\u63a5\u6536\u7a97\u53e3\uff0c\u56e0\u4e3a\u5ba2\u6237\u7aef\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\u6ca1\u6709\u653e\u5927\u5b83\u3002\u670d\u52a1\u5668\u53ea\u4f20\u8f93~ 64kb) \u62e5\u585e\u7a97\u53e3\u7684\u589e\u957f\u662f\u6559\u79d1\u4e66\u7684\u4e09\u6b21\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u5b8c\u7f8e\u7684\u62df\u5408\uff1a\n\u6211\u4e0d\u5b8c\u5168\u786e\u5b9a\u4e3a\u4ec0\u4e48\u5b83\u9075\u5faa\u4e09\u6b21\u51fd\u6570\u3002\u6211\u9884\u8ba1 TCP \u6162\u542f\u52a8\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\u3002 \ud83e\udd37 \u636e\u6211\u6240\u77e5\uff0c\u5728\u73b0\u4ee3 TCP \u5b9e\u73b0\u4e2d\uff0c\u62e5\u585e\u7a97\u53e3\u6bcf\u6b21\u5f80\u8fd4\u90fd\u4f1a\u52a0\u500d\uff0c\u76f4\u5230\u6570\u636e\u5305\u4e22\u5931\uff08\u5c31\u50cf\u6211\u5206\u6790\u8fc7\u7684\u5927\u591a\u6570\u5176\u4ed6\u7ad9\u70b9\u4e00\u6837\uff0c\u4f8b\u5982\u4e0b\u9762\u5c4f\u5e55\u622a\u56fe\u4e2d\u7684\u4f1a\u8bdd\uff09\u3002\u5728\u90a3\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u80fd\u4f1a\u8f6c\u5411\u4e09\u6b21\u589e\u957f\u3002\u8fd9\u53ef\u80fd\u540e\u6765\u6539\u53d8\u4e86\uff1f\u8fd9\u5b8c\u5168\u53d6\u51b3\u4e8e TCP \u5b9e\u73b0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u5199\u4e86 sirupsen/initcwnd \u6765\u5410\u51fa windows \u7684\u5927\u5c0f\u7684\u90e8\u5206\u539f\u56e0\uff0c\u6240\u4ee5\u4f60\u4e0d\u5fc5\u505a\u4efb\u4f55\u6570\u5b66\u6216\u731c\u6d4b\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a Github \u5b58\u50a8\u5e93\uff08\u672a\u538b\u7f29\uff09\uff1a\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u89e3\u91ca\u6211\u4eec\u7684\u7b80\u5355\u5316\u4e4b\u95f4\u7684\u5dee\u5f02\u9910\u5dfe\u7eb8\u6570\u5b66\u6a21\u578b\u548c\u73b0\u5b9e\u3002\u6211\u4eec\u5047\u8bbe\u6709 2 \u6b21 TLS \u5f80\u8fd4\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 3 \u6b21\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u521d\u59cb\u62e5\u585e\u7a97\u53e3\u8f83\u4f4e\u3002\u6211\u4eec\u8fd8\u5047\u8bbe\u4e86 1 \u4e2a HTTProundtrip\uff0c\u4f46\u5b9e\u9645\u4e0a\u6709 6 \u4e2a\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u7684\u62e5\u585e\u7a97\u53e3\u548c\u5ba2\u6237\u7aef\u7684\u63a5\u6536\u7a97\u53e3\u4e0d\u5141\u8bb8\u4e00\u6b21\u53d1\u9001\u6240\u6709\u5185\u5bb9\u3002\u8fd9\u4f7f\u6211\u4eec\u7684\u603b\u5f80\u8fd4\u6b21\u6570\u8fbe\u5230 1 + 3 + 6 = 10 \u6b21\u5f80\u8fd4\u3002\u6211\u4eec\u7684\u5f80\u8fd4\u65f6\u95f4\u4e3a 130 \u6beb\u79d2\uff0c\u8fd9\u4e0e\u6211\u4eec\u5728\u5e16\u5b50\u9876\u90e8\u89c2\u5bdf\u5230\u7684 1.3 \u79d2\u7684\u603b\u65f6\u95f4\u5b8c\u5168\u4e00\u81f4\uff01\u8fd9\u8868\u660e\u6211\u4eec\u65b0\u7684\u3001\u66f4\u65b0\u7684\u7cfb\u7edf\u5fc3\u667a\u6a21\u578b\u5f88\u597d\u5730\u53cd\u6620\u4e86\u73b0\u5b9e\u3002\u73b0\u5728\u6211\u4eec\u5df2\u7ecf\u4e00\u8d77\u5206\u6790\u4e86\u8fd9\u4e2a\u7f51\u7ad9\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u5206\u6790\u60a8\u81ea\u5df1\u7684\u7f51\u7ad9\u5e76\u5bf9\u5176\u8fdb\u884c\u4f18\u5316\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u5bf9\u60a8\u7684\u7f51\u7ad9\u8fd0\u884c sirupsen/initcwnd \u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u3002\u5b83\u4f7f\u7528\u4e00\u4e9b\u975e\u5e38\u7b80\u5355\u7684\u542f\u53d1\u5f0f\u65b9\u6cd5\u6765\u731c\u6d4b\u7a97\u53e3\u53ca\u5176\u5927\u5c0f\u3002\u5b83\u4eec\u5e76\u4e0d\u603b\u662f\u6709\u6548\uff0c\u7279\u522b\u662f\u5982\u679c\u60a8\u7684\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u6216\u7f51\u7ad9\u5c06\u54cd\u5e94\u6d41\u5f0f\u4f20\u8f93\u56de\u5ba2\u6237\u7aef\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u53d1\u9001\u6240\u6709\u54cd\u5e94\u3002\u9700\u8981\u6ce8\u610f\u7684\u53e6\u4e00\u4ef6\u4e8b\u662f Linux \u5185\u6838\uff08\u53ef\u80fd\u8fd8\u6709\u5176\u4ed6\u5185\u6838\uff09\u901a\u8fc7\u8def\u7531\u7f13\u5b58\u4e0e\u5ba2\u6237\u7aef\u7f13\u5b58\u62e5\u585e\u7a97\u53e3\u5927\u5c0f\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\u8fd9\u5f88\u68d2\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u5f53\u5ba2\u6237\u7aef\u91cd\u65b0\u8fde\u63a5\u65f6\uff0c\u6211\u4eec\u4e0d\u5fc5\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u534f\u5546\u3002\u4f46\u8fd9\u53ef\u80fd\u610f\u5473\u7740\u9488\u5bf9\u540c\u4e00\u4e2a\u7f51\u7ad9\u7684\u540e\u7eed\u8fd0\u884c\u4f1a\u7ed9\u4f60\u4e00\u4e2a\u66f4\u5927\u7684 initcwnd\u3002\u6700\u4f4e\u7684youencounter\u5c06\u662f\u6b63\u786e\u7684\u3002\u8fd8\u8981\u6ce8\u610f\uff0c\u4e00\u4e2a\u7ad9\u70b9\u53ef\u80fd\u6709\u4e00\u4e2a\u961f\u5217\uff0c\u5176\u4e2d\u7684\u670d\u52a1\u5668\u5177\u6709\u4e0d\u540c\u7684 initcwnd \u503c\uff01\u5728\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u770b\u5230 TCP \u7a97\u53e3\u7684\u5927\u5c0f\u3002 Github.com \u7684\u521d\u59cb\u7a97\u53e3\u662f 10 \u4e2a\u6570\u636e\u5305\uff0c\u7136\u540e\u6bcf\u6b21\u5f80\u8fd4\u589e\u52a0\u4e00\u500d\u3002\u6700\u540e\u4e00\u4e2a\u7a97\u53e3\u4e0d\u662f\u4e00\u4e2a\u5b8c\u6574\u7684 80 \u4e2a\u6570\u636e\u5305\uff0c\u56e0\u4e3a\u670d\u52a1\u5668\u6ca1\u6709\u8db3\u591f\u7684\u5b57\u8282\u6570\u3002\u6709\u4e86\u8fd9\u4e2a\u7ed3\u679c\uff0c\u6211\u4eec\u53ef\u4ee5\u51b3\u5b9a\u5c06 initcwnd \u66f4\u6539\u4e3a\u66f4\u9ad8\u7684\u503c\uff0c\u4ee5\u5c1d\u8bd5\u5728\u66f4\u5c11\u7684\u5f80\u8fd4\u4e2d\u5c06\u5176\u53d1\u56de\u3002\u4f46\u662f\uff0c\u8fd9\u5bf9\u4e8e\u8fde\u63a5\u901f\u5ea6\u8f83\u6162\u7684\u5ba2\u6237\u7aef\u53ef\u80fd\u6709\u7f3a\u70b9\uff0c\u5e94\u8c28\u614e\u64cd\u4f5c\u3002 CDN \u5728 30 \u5e74\u4ee3\u5c31\u5177\u6709\u4ef7\u503c\uff0c\u8fd9\u786e\u5b9e\u8868\u660e\u4e86\u4e00\u4e9b\u627f\u8bfa\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u6ca1\u6709\u8db3\u591f\u7684\u6d41\u91cf\u6765\u4eb2\u81ea\u67e5\u770b\u6765\u7814\u7a76\u8fd9\u4e00\u70b9\uff0c\u5c31\u50cf\u8c37\u6b4c\u652f\u6301\u5c06\u9ed8\u8ba4\u503c\u4ece 3 \u66f4\u6539\u4e3a 10 \u65f6\u6240\u505a\u7684\u90a3\u6837\u3002\u8be5\u6587\u6863\u8fd8\u66f4\u8be6\u7ec6\u5730\u89e3\u91ca\u4e86\u6f5c\u5728\u7684\u7f3a\u70b9\u3002\n\u6700\u5b9e\u7528\u7684\u65e5\u5e38\u5916\u5356\u53ef\u80fd\u662f\u4f8b\u5982 base64 \u5185\u8054\u56fe\u50cf\u548c CSS\uff0c\u5982\u679c\u5b83\u4f7f\u60a8\u7684\u7ad9\u70b9\u8d85\u8fc7\u62e5\u585e\u7a97\u53e3\u9608\u503c\uff0c\u5219\u5b83\u53ef\u80fd\u4f1a\u5e26\u6765\u4e25\u91cd\u7684\u7f3a\u70b9\u3002\u60a8\u53ef\u4ee5\u5728 Linux \u4e0a\u4f7f\u7528 ip(1) \u547d\u4ee4\u66f4\u6539 initcwnd\uff0c\u4ece\u8fd9\u91cc\u5230\u9ed8\u8ba4\u7684 10 \u5230 32\uff1a simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 10010.164.0. dhcp scope link src 10.164.0.2 metric 100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 32 initrwnd 32 initrwnd.1032 initrwnd@10332 initrwnd@1000.10 dev ens4 proto dhcp src ens4 proto dhcp src 10.164.0.2 metric 100 initcwnd 32 initrwnd 3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric 100 \u53e6\u4e00\u4e2a\u91cd\u8981\u7684 TCP \u8bbe\u7f6e\uff0c\u5b83\u503c\u5f97\u5728 .tcpslow \u4e4b\u540e\u5f00\u59cb\u8c03\u6574 TCP _ cpslow \u662f .tcpslow \u7684\u5f00\u59cb\u8fd9\u662f\u4e00\u4e2a\u597d\u540d\u5b57\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5f53\u8bbe\u7f6e\u4e3a 1 \u65f6\uff0c\u5b83\u4f1a\u5728\u51e0\u79d2\u949f\u6ca1\u6709\u6d3b\u52a8\uff08\u5f53\u60a8\u5728\u7f51\u7ad9\u4e0a\u9605\u8bfb\u65f6\uff09\u540e\u91cd\u65b0\u534f\u5546\u62e5\u585e\u7a97\u53e3\u3002\u60a8\u53ef\u80fd\u5e0c\u671b\u5728 /proc/sys/net/ipv4/tcp_slow_start_after_idle \u4e2d\u5c06\u5176\u8bbe\u7f6e\u4e3a 0\uff0c\u4ee5\u4fbf\u5b83\u8bb0\u4f4f\u4e0b\u4e00\u4e2a\u9875\u9762\u52a0\u8f7d\u7684\u62e5\u585e\u7a97\u53e3\u3002", "note_en": "This is an edition of the  Napkin Math newsletter,a newsletter about using napkin math and first-principle thinking toestimate the performance of systems.You can  subscribe through email.\n Did you know that if your site\u2019s under ~12kb the first page will loadsignificantly faster? Servers only send a few packets (typically 10)in the initial round-trip while TCP is warming up (referred to as TCP slowstart). After sending the first set of packets, it needs to wait forthe client to acknowledge it received all those packets.\n Quick illustration of transferring ~15kb with an initial TCP slow start window(also referred to as initial congestion window or  initcwnd) of 10 versus 30:\n  The larger the initial window, the more we can transfer in the first roundtrip,the faster your site is on the initial page load. For a large roundtrip time(e.g. across an ocean), this will start to matter a lot. Here is the approximatesize of the initial window for a number of common hosting providers:\n  To generate this, I wrote a script that you can use   sirupsen/initcwnd toanalyze your own site. Based on the report, you can attempt to tune your pagesize, or tune your server\u2019s initial slow start window size ( initcwnd) (seebottom of article). Read on, and we\u2019ll go into far more detail!\n   Dear Napkin Mathers, it\u2019s been too long. Since last, I\u2019ve left Shopify after 8amazing years. Ride of a lifetime. For the time being, I\u2019m passing the time withstandup paddleboarding (did a 125K 3-day trip the week after I left),recreational programming (of which napkin math surely is a part), and learningsome non-computer things.\n In this issue, we\u2019ll dig into the details of exactly what happens on the wirewhen we do the initial page load of a website over HTTP. As I\u2019ve already hintedat, we\u2019ll show that there\u2019s a magical byte threshold to be aware of whenoptimizing for short-lived, bursty TCP transfers. If you\u2019re under this threshold,or increase it, it\u2019ll potentially save the client from several roundtrips.Especially for sites with a single location that are often requested from faraway (i.e. high roundtrip times), e.g. US -&gt; Australia, this can make a  hugedifference. That\u2019s likely the situation you\u2019re in if you\u2019re operating aSaaS-style service. While we\u2019ll focus on HTTP over the public internet, TCP slowstart can also matter to RPC inside of your data-centre, and especially acrossthem.\n As always, we\u2019ll start by laying out our naive mental model about how we  thinkloading a site works at layer 4. Then we\u2019ll do the napkin math on expectedperformance, and confront our fragile, naive model with reality to see if itlines up.\n So what do we think happens at the TCP-level when we request a site? Forsimplicity, we will exclude compression, DOM rendering, Javascript, etc., andlimit ourselves exclusively to downloading the HTML. In other words:  curl --http1.1 https://sirupsen.com &gt; /dev/null (note that   sirupsen/initcwnduses  --compressed with  curl to reflect reality).\n    To make things a little more interesting, we\u2019ll choose a site that isgeographically further from me that isn\u2019t overly optimized:  information.dk, aDanish newspaper. Through some DNS lookups from servers in different geographiesand by using  a looking glass, I can determine that all their HTML trafficis always routed to a datacenter in Copenhagen. These days, many sites arerouted through e.g. Cloudflare POPs which will have a nearby data-centre, tosimplify our analysis, we want to make sure that\u2019s not the case.\n I\u2019m currently sitting in South-Western Quebec on an LTE connection. I candetermine  through  traceroute(1) that my traffic is travelling toCopenhagen through the path Montreal -&gt; New York -&gt; Amsterdam -&gt; Copenhagen. Round-trip time is ~140ms.\n  If we add up the number of round-trips from our napkin model above (excludingDNS), we\u2019d expect loading the Danish site would take us  4 * 140ms = 560ms.Since I\u2019m on an LTE connection where I\u2019m not getting much above 15 mbit/s, wehave to factor in that it takes another  ~100ms to transfer the data,in addition to the 4 round-trips. So with our napkin math, we\u2019re expecting thatwe should be able to download the 160kb of HTML from a server in Copenhagenwithin a ballpark of  ~660ms.\n Reality, however, has other plans. When I run time  curl --http1.1 https://www.information.dk it takes 1.3s! Normally we say that if the napkinmath is within ~10x, the napkin math is likely in line with reality, butthat\u2019s typically when we deal with nano and microseconds. Not off by~ 640ms!\n So what\u2019s going on here? When there\u2019s a discrepancy between the napkin math andreality, it\u2019s because either (1) the napkin model of the world is incorrect, or(2) there\u2019s room for optimization in the system. In this case, it\u2019s a bit ofboth. Let\u2019s hunt down those 640ms. \ud83d\udc40\n To do that, we have to analyze the raw network traffic with Wireshark. Wiresharkbrings back many memories.. some fond, but mostly\u2026 frustration trying tofigure out causes of intermittent network problems. In this case, for once it\u2019sfor fun and games! We\u2019ll type  host www.information.dk into Wireshark to makeit capture traffic to the site. In our terminal we run the  curl command abovefor Wireshark to have something to capture.\n Wireshark will then give us a nice GUI to help us hunt down the roughly half asecond we haven\u2019t accounted for. One thing to note is that in order to getWireshark to understand the TLS/SSL contents of the session it needs to know thesecret negotiated with the server. There\u2019s a complete guide  here, butin short you pass  SSLKEYLOGFILE=log.log to your  curl command and then pointto that file in Wireshark in the TLS configuration.\n   We see the TCP roundtrip as expected,  SYN from the client, then  SYN+ACK fromthe server. Bueno. But after that it looks fishy. We\u2019re seeing  3 round-tripsfor TLS/SSL instead of the expected 2 from our drawing above!\n  To make sure I wasn\u2019t misunderstanding something, I double-checked with sirupsen.com, and sure enough, it\u2019s showing the two roundtrips in Wireshark asanticipated:\n  If we carefully study the annotated Wireshark dump above for the Danishnewspaper, we can see that the problem is that for whatever reason the server iswaiting for a TCP ack in the middle of transmitting the certificate (packet 9).\n   Why is the server waiting for a TCP ACK from the client after transmitting ~4398bytes of the certificate? Why doesn\u2019t the server just send the whole certificateat once?\n  In TCP, the server carefully monitors how many packets/bytes it has in flight.Typically, each packet is ~1460 bytes of application data. The server doesn\u2019tnecessarily send  all the data it has at once, because the server doesn\u2019t knowhow \u201cfat\u201d the pipes are to the client. If the client can only receive 64 kbit/scurrently, then sending e.g. 100 packets could completely clog the network. Thenetwork most likely will drop some random packets which would be even slower tocompensate from than sending the packets at a more sustainable pace for theclient.\n A  major part of the TCP protocol is the balancing act of trying to send asmuch data as possible at any given time, while ensuring the server doesn\u2019tover-saturate the path to the client and lose packets. Losing packets is verybad for bandwidth in TCP.\n The server only keeps a certain amount of packets in flight at any given time.\u201cIn flight\u201d in TCP terms means \u201cunacknowledged\u201d packets, i.e. packets of datathe server has sent to the client that the client hasn\u2019t yet sent anacknowledgement to the server that it has received. Typically for everysuccessfully acknowledged packet the server\u2019s TCP implementation will decide toincrease the number of allowed in-flight packets by 1. You may have heard thissimple algorithm referred to as \u201cTCP slow start.\u201d On the flip-side, if a packethas been dropped then the server will decide to have slightly less bytes inflight. Throughout the existence of the TCP connection\u2019s lifetime this dancewill be tirelessly performed. In TCP terms what we\u2019ve called \u201cin-flight\u201d isreferred to as the \u201ccongestion window\u201d (or  cwnd in short-form).\n  Typically after the first packet has been lost the TCP implementation switchesfrom the simple TCP slow start algorithm to a more complicated  \u201cCongestionControl Algorithm\u201d of which there are dozens. Their job is: Based on whatwe\u2019ve observed about the network, how much should we have in flight to maximizebandwidth?\n Now we can go back and understand why the TLS handshake is taking 3 roundtripsinstead of 2. After the client\u2019s starts the TLS handshake with  TLS HELLO, theDanish server really, really wants to transfer this ~6908 byte certificate.Unfortunately though the server\u2019s congestion window (packets in flight allowed) atthe time just isn\u2019t large enough to accommodate the whole certificate!\n Put another way, the server\u2019s TCP implementation has decided it\u2019s  notconfident the poor client can receive that many tasty bytes all at once yet \u2013so it sends a petty 4398 bytes of the certificate. Of course, 63% of acertificate isn\u2019t enough to move on with the TLS handshake\u2026 so the clientsighs, sends a TCP ACK back to the server, which then sends the meager 2510 leftof the certificate so the client can move on to perform its part of the TLShandshake.\n Of course, this all seems a little silly\u2026 first of all, why is the certificate6908 bytes?! For comparison, it\u2019s 2635 for my site. Although that\u2019s not toointeresting to me. What\u2019s more interesting is why is the server only sending6908 bytes? That seems scanty for a modern web server!\n In TCP how many packets we can send on a brand new connection before we know anything about the client is called the \u201cinitial congestion window.\u201d In aconfiguration context, this is called  initcwnd. If you reference the yellowgraph above with the packets in flight, that\u2019s the value at the first roundtrip.\n These days, the default for a Linux server is 10 packets, or  10 * 1460 = 14600 bytes, where 1460 is roughly the data payload of each packet. That would\u2019ve fitthat monster certificate of the Danish newspaper. Clearly that\u2019s not their initcwd since then the server wouldn\u2019t have patiently waited for my ACK.Through some digging it appears that prior to  Linux 3.0.0  initcwnd was3, or ~ 3 * 1460 = 4380 bytes! That approximately lines up, so it seemsthat the Danish newspaper\u2019s  initcwnd is 3. We don\u2019t know for sure it\u2019s Linux,but we know the  initcwnd is 3.\n Because of the exponential growth of the packets in flight,  initcwnd mattersquite a bit for how much data we can send in those first few preciousroundtrips:\n  As we saw in the intro, it\u2019s common among CDNs to raise the values from thedefault to e.g. 32 (~46kb). This makes sense, as you might be transmittingimages of many megabytes. Waiting for TCP slow start to get to this point cantake a few roundtrips.\n Another other reasons, this is also why HTTP2/HTTP3 moved in the direction ofmoving more data through the same connection as it has an already \u201cwarm\u201d TCPsession. \u201cWarm\u201d meaning that the congestion window / bytes in flight has alreadybeen increased generously from the initial by the server.\n The TCP slow start window is also part of why points of presence (POPs) areuseful. If you connect to a POP in front of your website that\u2019s 10msaway, negotiate TLS with the POP, and the POP already has a warm connectionwith the backend server 100ms away \u2013 this improves performance dramatically,with no other changes. From  4 * 100ms = 400ms to  3 * 10ms + 100ms = 130ms.\n  Now we\u2019ve gotten to the bottom of why we have 3 TLS roundtrips rather than theexpected 2: the initial congestion window is small. The congestion window(allowed bytes in flight by the server) applies equally to the HTTP payloadthat the server sends back to us. If it doesn\u2019t fit inside the congestionwindow, then we need multiple round-trips to receive all the HTML.\n In Wireshark, we can pull up a TCP view that\u2019ll give us an idea of how manyroundtrips was required to complete the request (  sirupsen/initcwnd tries toguess this for you with an embarrassingly simple algorithm):\n  We see the TCP roundtrip, 3 TLS roundtrips, and then 5-6 HTTP roundtrips to getthe ~160kb page! Each little dot in the picture shows a packet, so you\u2019ll noticethat the congestion window (allowed bytes in flight) is roughly doubling everyroundtrip. The server is increasing the size of the window for every successfulroundtrip. A \u2018successful roundtrip\u2019 means a roundtrip that didn\u2019t drop packets, andin some  newer algorithms, a roundtrip that didn\u2019t take too much time.\n Typically, the server will continue to double the number of packets (~1460 bytes each) for each successful roundtrip until either an unsuccessful roundtrip happens (slow or dropped packets),  or the bytes in flight would exceed the  client\u2019s receive window.\n When a TCP session starts, the client will advertise how many bytes  it allows in flight. This typically is much larger than the server is wiling to send off the bat. We can pull this up in the initial  SYN package from the client and see that it\u2019s ~65kb:\n  If the session had been much longer and we pushed up against that window, the client would\u2019ve sent a TCP package updating the size of the receive window. So there\u2019s two windows at play: the server manages the number of packets in flight: the  congestion window. The congestion window is controlled by the server\u2019s  congestion algorithm which is adjusted based on the number of successful roundtrips, but always capped by the client\u2019s  receive window.\n Let\u2019s look at the amount of packets transmitted by the server in each roundtrip:\n HTTP roundtrip 5: 48 (~69kb, this in theory would have exceeded the 64kb currentreceive window since the client didn\u2019t enlarge it for some reason. The serveronly transmitted ~64kb)\n The growth of the congestion window is a  textbook cubic function, it has a perfect fit:\n  I\u2019m not entirely sure why it follows a cubic function. I expected TCP slow startto just double every roundtrip. \ud83e\udd37 As far as I can gather, on modern TCPimplementation the congestion window is doubled every roundtrip until a packetis lost (as is the case for most other sites I\u2019ve analyzed, e.g. the session inthe screenshot below). After  that we might move to a cubic growth. Thismight\u2019ve changed later on? It\u2019s completely up to the TCP implementation.\n This is part of why I wrote  sirupsen/initcwnd to spit out the size of thewindows, so you don\u2019t have to do any math or guesswork, here for a Github repo(uncompressed):\n   So now we can explain the discrepancy between our simplistic napkin math modeland reality. We assumed 2 TLS roundtrips, but in fact there was 3, because ofthe low initial congestion window by the server. We also assumed 1 HTTProundtrip, but in fact there was 6, because the server\u2019s congestion window andclient\u2019s receive window didn\u2019t allow sending everything at once. This brings ourtotal roundtrips to  1 + 3 + 6 = 10 roundtrips. With our roundtrip time at130ms, this lines up perfectly with the 1.3s total time we observed at the topof the post! This suggests our new, updated mental model of the system reflectsreality well.\n  Now that we\u2019ve analyzed this website together, you can use this to analyze yourown website and optimize it. You can do this by running  sirupsen/initcwnd against your website. It uses some very simpleheuristics to guess the windows and their size. They don\u2019t work always,especially not if you\u2019re on a slow connection or the website streams theresponse back to the client, rather than sending it all at once.\n Another thing to be aware of is that the Linux kernel (and likely other kernels)caches the congestion window size (among other things) with clients via theroute cache. This is great, because it means that we don\u2019t have to renegotiateit from scratch when a client reconnects. But it might mean that subsequent runsagainst the same website will give you a far larger  initcwnd. The lowest youencounter will be the right one. Note also that a site might have a fleet withservers that have different  initcwnd values!\n   Here we can see the size of the TCP windows. The initial window was 10 packetsfor Github.com, and then doubles every roundtrip. The last window isn\u2019t a full80 packets, because there wasn\u2019t enough bytes left from the server.\n With this result, we could decide to change the  initcwnd to a higher value totry to send it back in fewer roundtrips. This might, however, have drawbacksfor clients on slower connections and should be done with care. It does showsome promise that CDNs have values in the 30s. Unfortunately I don\u2019t have accessto enough traffic to see for myself to study this, as  Google did whenthey championed the change from a default of 3 to 10. That document alsoexplains potential drawbacks in more detail.\n The most practical day-to-day takeaway might be that e.g. base64 inlining imagesand CSS may come with serious drawbacks if it throws your site over a congestionwindow threshold.\n You can change  initcwnd with the  ip(1) command on Linux, from here to thedefault 10 to 32:\n simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  10010.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100simon@netherlands:~$ sudo ip route change default via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  32simon@netherlands:~$ ip route showdefault via 10.164.0.1 dev ens4 proto dhcp src 10.164.0.2 metric  100 initcwnd  32 initrwnd  3210.164.0.1 dev ens4 proto dhcp scope link src 10.164.0.2 metric  100\n Another key TCP setting it\u2019s worth tuning for TCP is tcp_slow_start_after_idle. It\u2019s a good name: by default when set to 1, it\u2019llrenegotiate the congestion window after a few seconds of no activity (while youread on the site). You probably want to set this to 0 in /proc/sys/net/ipv4/tcp_slow_start_after_idle so it remembers the congestionwindow for the next page load.", "posttime": "2021-08-08 17:50:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,\u521d\u59cb,http,\u670d\u52a1\u5668", "title": "\u901a\u8fc7\u9002\u5e94\u521d\u59cb TCP \u6162\u542f\u52a8\u7a97\u53e3\u6765\u63d0\u9ad8 HTTP \u6027\u80fd", "title_en": "Increase HTTP performance by fitting in the initial TCP slow start window", "transed": 1, "url": "https://sirupsen.com/napkin/problem-15/", "via": "", "real_tags": ["\u6027\u80fd", "\u521d\u59cb", "http", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "76417e719282d12a0889e1761958421c.png", "infoid": 1072095, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Epic \u5bf9\u8c37\u6b4c\u7684\u53cd\u5784\u65ad\u6cd5\u5ead\u6848\u4ef6\u4e2d\u65b0\u5f00\u5c01\u7684\u6587\u4ef6\u79f0\uff0c\u8fd9\u5bb6\u79d1\u6280\u5de8\u5934\u8003\u8651\u8d2d\u4e70\u201c\u90e8\u5206\u6216\u5168\u90e8\u201dEpic Games\uff0c\u51fa\u4e8e\u5bf9 Fortnite \u5f00\u53d1\u5546\u6709\u610f\u56de\u907f Google Play \u5e94\u7528\u5546\u5e97\u7684\u62c5\u5fe7\u3002\u8be5\u6587\u4ef6\u4e0d\u5305\u542b\u8003\u8651\u6b64\u7c7b\u8ba1\u5212\u7684\u4efb\u4f55\u5185\u90e8\u6d88\u606f\uff0c\u4f46\u6b63\u5982 The Verge \u6628\u5929\u62a5\u9053\u7684\u90a3\u6837\uff0c\u4e4b\u524d\u7f16\u8f91\u8fc7\u7684\u6bb5\u843d\u73b0\u5728\u5305\u542b\u5728\u6cd5\u5ead\u6587\u4ef6\u4e2d\uff1a\u201c\u4f8b\u5982\uff0c\u8c37\u6b4c\u751a\u81f3\u5206\u4eab\u4e86\u5b83\u7684\u4e0e\u5546\u4e1a\u4f19\u4f34\u7684\u5784\u65ad\u5229\u6da6\uff0c\u4ee5\u786e\u4fdd\u4ed6\u4eec\u540c\u610f\u6392\u9664\u7ade\u4e89\uff0c\u5df2\u7ecf\u5f00\u53d1\u4e86\u4e00\u7cfb\u5217\u5185\u90e8\u9879\u76ee\u6765\u89e3\u51b3\u5b83\u4ece Epic \u548c\u5176\u4ed6\u516c\u53f8\u4e3a\u6d88\u8d39\u8005\u548c\u5f00\u53d1\u5546\u63d0\u4f9b\u6709\u7ade\u4e89\u529b\u7684\u66ff\u4ee3\u54c1\u7684\u52aa\u529b\u4e2d\u611f\u53d7\u5230\u7684\u201c\u4f20\u67d3\u201d\uff0c\u751a\u81f3\u8003\u8651\u8d2d\u4e70\u4e00\u4e9b\u6216\u6574\u4e2a Epic \u6765\u538b\u5236\u8fd9\u79cd\u5a01\u80c1\u3002\u201d\u5728\u56de\u5e94 Twitter \u4e0a\u7684 Verge \u6587\u7ae0\u65f6\uff0cEpic Games \u9996\u5e2d\u6267\u884c\u5b98\u8868\u793a\uff0c\u4ed6\u4eec\u73b0\u5728\u624d\u53d1\u73b0\u201c\u5173\u4e8e\u8c37\u6b4c\u7684\u8003\u8651\u201d\uff1a\u5f53\u65f6\u6211\u4eec\u5e76\u4e0d\u77e5\u9053\u8fd9\u4e00\u70b9\uff0c\u800c\u4e14\u7531\u4e8e\u6cd5\u9662\u7684\u4fdd\u62a4\u4ee4\uff0c\u6211\u4eec\u73b0\u5728\u624d\u53d1\u73b0\u8c37\u6b4c\u7684\u8003\u8651\u8d2d\u4e70 Epic \u4ee5\u7ec8\u6b62\u6211\u4eec\u4e0e Google Play \u7ade\u4e89\u7684\u52aa\u529b\u3002 https://t.co/HSS1edUrQm \u2014 Tim Sweeney (@TimSweeneyEpic) 2021 \u5e74 8 \u6708 6 \u65e5\u8981\u67e5\u770b\u6b64\u5185\u5bb9\uff0c\u8bf7\u542f\u7528\u5b9a\u4f4d cookie\u3002\u5728\u6cd5\u5ead\u6587\u4ef6\u7684\u5176\u4ed6\u5730\u65b9\uff0cEpic \u8fd8\u58f0\u79f0\u8c37\u6b4c\u5411\u4ed6\u4eec\u63d0\u4f9b\u4e86\u4e00\u9879\u201c\u7279\u522b\u4f18\u60e0\u201d\uff0c\u8ba9\u4ed6\u4eec\u5728 Google Play \u5546\u5e97\u63a8\u51fa Fortnite\uff0c\u4f46\u906d\u5230\u62d2\u7edd\uff0c\u5e76\u79f0\u5728\u5546\u5e97\u5916\u7684 Android \u624b\u673a\u4e0a\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u7684\u4f53\u9a8c\u201c\u5766\u7387\u5730\u8bf4\u662f\u7cdf\u7cd5\u900f\u4e86\u201d .\u201d\n\u8be5\u6587\u4ef6\u7684\u5927\u90e8\u5206\u58f0\u660e\u548c\u63d0\u4f9b\u7684\u8bc1\u636e\u4ecd\u7136\u88ab\u7f16\u8f91\uff0c\u4f46 Epic \u8fdb\u4e00\u6b65\u58f0\u79f0\uff0c\u5728\u4ed6\u4eec\u4e0e\u4e09\u661f\u7684 Android \u5e94\u7528\u7a0b\u5e8f\u5546\u5e97\u7b7e\u7f72 Fortnite \u7684\u5206\u9500\u534f\u8bae\u540e\uff0c\u8c37\u6b4c\u201c\u91c7\u53d6\u884c\u52a8\u786e\u4fdd OEM \u4e0d\u4f1a\u4e0e\u50cf Epic \u8fd9\u6837\u7684\u5206\u9500\u5546\u5efa\u7acb\u5408\u4f5c\u4f19\u4f34\u5173\u7cfb\u201d\u3002 Epic \u5bf9\u82f9\u679c\u5e94\u7528\u5546\u5e97\u9650\u5236\u7684\u8bc9\u8bbc\u5f15\u8d77\u4e86\u5f88\u591a\u5173\u6ce8\uff0c\u4f46\u4ed6\u4eec\u5bf9\u8c37\u6b4c\u7684\u8bc9\u8bbc\u662f\u5728\u540c\u4e00\u5929\u542f\u52a8\u7684\uff0c\u5e76\u4e14\u4e0e\u540c\u4e00\u95ee\u9898\u6709\u5173\u3002 Epic \u58f0\u79f0\u82f9\u679c\u548c\u8c37\u6b4c\u5bf9\u5176\u5e94\u7528\u5546\u5e97\u7684\u63a7\u5236\u6784\u6210\u4e86\u5784\u65ad\uff0c\u5e76\u5e0c\u671b\u80fd\u591f\u4e3a\u7528\u6237\u63d0\u4f9b\u66ff\u4ee3\u9014\u5f84\u6765\u8d2d\u4e70\u4ed6\u4eec\u7684\u6e38\u620f\uff0c\u4f8b\u5982 Fortnite\u2014\u2014\u800c\u4e0d\u5fc5\u7ed9\u82f9\u679c\u6216\u8c37\u6b4c 30% \u7684\u5206\u6210\u3002\u8fd9\u4e24\u4e2a\u6848\u4f8b\u7684\u7ed3\u679c\u5bf9\u82f9\u679c\u548c\u8c37\u6b4c\u7684\u56f4\u5899\u82b1\u56ed\u4ee5\u53ca\u5728\u8fd9\u4e9b\u5e73\u53f0\u4e0a\u53d1\u5e03\u7684\u6bcf\u4e2a\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\u90fd\u4ea7\u751f\u4e86\u5de8\u5927\u7684\u5f71\u54cd\u3002\u5b83\u8fd8\u53ef\u80fd\u5bf9\u5305\u62ec\u6e38\u620f\u673a\u5728\u5185\u7684\u5176\u4ed6\u5e73\u53f0\u548c Steam \u7b49\u5176\u4ed6\u6570\u5b57\u5546\u5e97\u4ea7\u751f\u5f71\u54cd\u3002", "note_en": "Newly  unsealed documents in Epic&#39;s antitrust court case against Google allege that the tech giant considered buying &#34;some or all&#34; of Epic Games, out of concern over the Fortnite developer&#39;s intention to sidestep the Google Play app store.\n The document doesn&#39;t contain any of the internal messages where such a plan is considered, but a previously redacted paragraph is now included in court documents, as reported  by The Verge yesterday:\n &#34;For example, Google has gone so far as to share its monopoly profits with business partners to secure their agreement to fence out competition, has developed a series of internal projects to address the &#39;contagion&#39; it perceived from efforts by Epic and others to offer consumers and developers competitive alternatives, and has even contemplated buying some or all of Epic to squelch this threat.&#34;\n Responding to the Verge article on Twitter, Epic Games CEO said that they were only finding out now &#34;about Google&#39;s consideration&#34;:\n This was unbeknownst to us at the time, and because of the court\u2019s protective order we\u2019re just finding out now about Google\u2019s consideration of buying Epic to shut down our efforts to compete with Google Play. https://t.co/HSS1edUrQm\n\u2014 Tim Sweeney (@TimSweeneyEpic)  August 6, 2021\n   To see this content please enable targeting cookies.  Elsewhere in the court documents, Epic also allege that Google offered them a &#34;special deal&#34; to launch Fortnite on the Google Play store, which they rejected, and referred to the experience of installing apps on Android phones outside of the store as &#34;frankly abysmal.&#34;\n  Much of the document&#39;s claims and offered evidence remains redacted, but Epic further allege that after they signed a distribution agreement for Fortnite with Samsung&#39;s Android app store, Google &#34;took action to ensure that OEMs would not enter into partnerships with distributors like Epic.&#34;\n A lot of attention has been paid to  Epic&#39;s lawsuit against Apple regarding restrictions on the app store, but their lawsuit against Google was launched on the same day and is related to the same issue. Epic claim that Apple and Google&#39;s control of their app store&#39;s constitutes a monopoly, and want to be able to offer users alternative routes to buying their games such as Fortnite - without having to give Apple or Google a 30% cut. The outcomes of both cases have enormous ramifications for Apple and Google&#39;s walled gardens, and for every software developer who releases on those platforms. It could also have consequences for other platforms including consoles, and other digital stores such as Steam.", "posttime": "2021-08-08 17:50:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,\u8003\u8651,contemplated,epic", "title": "\u8c37\u6b4c\u201c\u8003\u8651\u8d2d\u4e70\u90e8\u5206\u6216\u5168\u90e8 Epic\u201d\u4ee5\u963b\u6b62\u201c\u4f20\u67d3\u201d", "title_en": "Google \u201ccontemplated buying some or all of Epic\u201d to stop \u201ccontagion\u201d", "transed": 1, "url": "https://www.rockpapershotgun.com/google-contemplated-buying-some-or-all-of-epic-to-stop-contagion-court-documents-say", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "\u8003\u8651", "epic"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072094, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u662f\u4e00\u7bc7\u5173\u4e8eshell\u6ce8\u5165\u7684\u4ecb\u7ecd\u6027\u6587\u7ae0\uff0c\u4e00\u4e2a\u5141\u8bb8\u653b\u51fb\u8005\u5728\u7528\u6237\u673a\u5668\u4e0a\u6267\u884c\u4efb\u610f\u4ee3\u7801\u7684\u5b89\u5168\u6f0f\u6d1e\u3002\u8fd9\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5145\u5206\u7814\u7a76\u7684\u95ee\u9898\uff0c\u5e76\u4e14\u6709\u7b80\u5355\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u6837\u53ef\u4ee5\u4fdd\u62a4\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u514d\u53d7 shell \u6ce8\u5165\u7684\u98ce\u9669\u3002\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u539f\u56e0\u6709\u4e24\u4e2a\u3002\u7b2c\u4e00\uff0c\u4eca\u5e74\u6211\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u5e93\u4e2d\u6307\u51fa\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u770b\u6765\u8fd9\u4e2a\u95ee\u9898\u867d\u7136\u7814\u7a76\u5f97\u5f88\u597d\uff0c\u4f46\u5e76\u4e0d\u4e3a\u4eba\u6240\u77e5\uff0c\u6240\u4ee5\u53ea\u91cd\u590d\u4e00\u4e9b\u4e8b\u60c5\u53ef\u80fd\u4f1ahelp. \u5176\u6b21\uff0c\u6211\u6700\u8fd1\u62a5\u544a\u4e86\u4e00\u4e2a\u5173\u4e8e VS Code API \u7684\u76f8\u5173\u95ee\u9898\uff0c\u6211\u60f3\u5c06\u8fd9\u7bc7\u6587\u7ae0\u7528\u4f5c GitHub \u7684\u6269\u5c55\u8bc4\u8bba:-) Shell \u6ce8\u5165\u53ef\u80fd\u53d1\u751f\u5728\u4e00\u4e2a\u7a0b\u5e8f\u9700\u8981\u6267\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4e00\u4e2a\u53c2\u6570\u7531\u7528\u6237/\u653b\u51fb\u8005\u63a7\u5236\u3002\u4f5c\u4e3a\u6a21\u578b\u793a\u4f8b\uff0c\u8ba9\u6211\u4eec\u7f16\u5199\u4e00\u4e2a\u5feb\u901f\u811a\u672c\u6765\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6 URL \u5217\u8868\uff0c\u5e76\u4e3a\u6bcf\u4e2a URL \u8fd0\u884c curl\u3002\u8fd9\u4e0d\u73b0\u5b9e\uff0c\u4f46\u5c0f\u800c\u8bf4\u660e\u6027\u3002\u8fd9\u5c31\u662f\u811a\u672c\u5728 NodeJS \u4e2d\u7684\u6837\u5b50\uff1a const readline = require ( &#39; readline &#39; ); const util = require(&#39;util&#39;); const exec = util \u3002\u627f\u8bfa\uff08\u8981\u6c42\uff08&#39;child_process&#39;\uff09\u3002exec\uff09\uff1b\u5f02\u6b65\u51fd\u6570 main () { const input = readline . createInterface\uff08{\u8f93\u5165\uff1a\u8fc7\u7a0b\u3002\u6807\u51c6\u8f93\u5165\uff0c\u8f93\u51fa\uff1a\u8fc7\u7a0b\u3002\u6807\u51c6\u8f93\u51fa\uff0c\u7ec8\u7aef\uff1a\u5047\uff0c}\uff09\uff1b for await (const line of input) { if ( line .trim ().length &gt; 0 ) { const { stdout , stderr } = await exec ( `curl ${ line } ` );\u5b89\u6170 \u3002\u65e5\u5fd7\uff08{\u6807\u51c6\u8f93\u51fa\uff0c\u6807\u51c6\u9519\u8bef}\uff09\uff1b main () \u6211\u4f1a\u7528 Rust \u5199\u8fd9\u4e2a\uff0c\u4f46\u662f\uff0c\u5509\uff0c\u5b83\u4e0d\u5bb9\u6613\u53d7\u5230\u8fd9\u79cd\u7279\u6b8a\u7684\u653b\u51fb:) \u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u6765\u81ea\u8282\u70b9\u7684 exec API \u6765\u4ea7\u751f\u4e00\u4e2a\u5b50 curl \u8fdb\u7a0b\uff0c\u5c06\u4e00\u884c\u8f93\u5165\u4f5c\u4e3a\u4e00\u4e2a\u8bba\u70b9\u3002\n$ cat urls.txthttps://example.com$ node curl-all.js &lt; urls.txt{ stdout: &#39;&lt;!doctype html&gt;...&lt;/html&gt;\\n&#39;, stderr: &#39;% Total % Received \u3002 ..&#39;} $ node main.js &lt; malice_in_the_wonderland.txt{ stdout: &#39;PWNED, \u4ece /etc/passwd \u8bfb\u53d6\u4f60\u7684\u79d8\u5bc6\\n&#39; + &#39;root:x:0:0:System administrator:/root:/bin/fish \\n&#39; + &#39;...&#39; + &#39;matklad:x:1000:100::/home/matklad:/bin/fish\\n&#39;, stderr: &quot;curl: try &#39;curl --help&#39; \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\\n &quot;} \u611f\u89c9\u5f88\u7cdf\u7cd5\u2014\u2014\u811a\u672c\u4f3c\u4e4e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8bfb\u53d6\u4e86\u6211\u7684 /etc/passwd \u7684\u5185\u5bb9\u3002\u8fd9\u662f\u600e\u4e48\u53d1\u751f\u7684\uff0c\u6211\u4eec\u53ea\u8c03\u7528\u4e86 curl\uff1f\u4e3a\u4e86\u7406\u89e3\u521a\u521a\u53d1\u751f\u7684\u4e8b\u60c5\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u5173\u4e8e\u8fdb\u7a0b\u751f\u6210\u7684\u4e00\u822c\u5de5\u4f5c\u539f\u7406\u3002\u8fd9\u4e00\u8282\u6709\u70b9\u7279\u5b9a\u4e8e UNIX \u2014 \u5728 Windows \u4e0a\u5b9e\u73b0\u7684\u4e1c\u897f\u6709\u70b9\u4e0d\u540c\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u5927\u5c40\u7ed3\u8bba\u4e5f\u6210\u7acb\u3002\u8fd0\u884c\u5e26\u6709\u547d\u4ee4\u884c\u53c2\u6570\u7684\u7a0b\u5e8f\u7684\u4e3b\u8981 API \u662f exec \u7cfb\u5217\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u8fd9\u91cc\u662f execve\uff1a\u5b83\u63a5\u53d7\u7a0b\u5e8f\u540d\u79f0\uff08\u8def\u5f84\u540d\uff09\u3001\u547d\u4ee4\u884c\u53c2\u6570\u5217\u8868\uff08argv\uff09\u548c\u73af\u5883\u5217\u8868\u65b0\u8fdb\u7a0b (envp) \u7684\u53d8\u91cf\uff0c\u5e76\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u6765\u8fd0\u884c\u6307\u5b9a\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u7a76\u7adf\u662f\u5982\u4f55\u53d1\u751f\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f15\u4eba\u5165\u80dc\u7684\u6545\u4e8b\uff0c\u60c5\u8282\u4e2d\u6709\u8bb8\u591a\u5206\u652f\uff0c\u4f46\u8fd9\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002\u5947\u602a\u7684\u662f\uff0c\u867d\u7136\u5e95\u5c42\u7cfb\u7edf API \u9700\u8981\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\uff0c\u4f46\u6765\u81ea node \u7684 child_process.exec \u51fd\u6570\u53ea\u9700\u8981\u4e00\u4e2a\u5b57\u7b26\u4e32\uff1aexec(&quot;curl http://example.com&quot;)\u3002\n\u8ba9\u6211\u4eec\u627e\u51fa\u6765\uff01\u4e3a\u6b64\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 strace \u5de5\u5177\u3002\u8be5\u5de5\u5177\u68c0\u67e5\uff08\u8ddf\u8e2a\uff09\u7a0b\u5e8f\u8c03\u7528\u7684\u6240\u6709\u7cfb\u7edf\u8c03\u7528\u3002\u6211\u4eec\u5c06\u8981\u6c42 strace \u7279\u522b\u67e5\u627e execve\uff0c\u4ee5\u4e86\u89e3\u8282\u70b9\u7684 exec \u5982\u4f55\u6620\u5c04\u5230\u5e95\u5c42\u7cfb\u7edf\u7684 API\u3002\u6211\u4eec\u9700\u8981 --follow \u53c2\u6570\u6765\u8ddf\u8e2a\u6240\u6709\u8fdb\u7a0b\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u9876\u7ea7\u8fdb\u7a0b\u3002\u4e3a\u4e86\u51cf\u5c11\u8f93\u51fa\u91cf\u5e76\u4e14\u53ea\u6253\u5370 execve\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 --trace \u6807\u5fd7\uff1a strace --follow --trace execve node main.js &lt; urls.txtexecve(&quot;/bin/node&quot;, [&quot;node&quot;, &quot;curl-all.js&quot;], 0x7fff97776be0)...execve(&quot;/bin/sh &quot;, [&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;curl https://example.com&quot;], 0x3fcacc0)...execve(&quot;/bin/curl&quot;, [&quot;curl&quot;, &quot;https:/ /example.com&quot;], 0xec4008) \u6211\u4eec\u5728\u8fd9\u91cc\u770b\u5230\u7684\u7b2c\u4e00\u4e2a execve \u662f\u6211\u4eec\u5bf9\u8282\u70b9\u4e8c\u8fdb\u5236\u6587\u4ef6\u672c\u8eab\u7684\u539f\u59cb\u8c03\u7528\u3002\u6700\u540e\u4e00\u4e2a\u662f\u6211\u4eec\u60f3\u8981\u505a\u7684 - \u7528\u4e00\u4e2a\u53c2\u6570\u751f\u6210 curl\uff0c\u4e00\u4e2a url\u3002\u4e2d\u95f4\u7684\u662f\u8282\u70b9\u7684 exec \u5b9e\u9645\u4e0a\u505a\u4e86\u4ec0\u4e48\u3002\u5728\u8fd9\u91cc\uff0cnode \u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\u8c03\u7528 sh \u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u7cfb\u7edf\u7684 shell\uff09\uff1a-c \u548c\u6211\u4eec\u6700\u521d\u4f20\u9012\u7ed9 child_process.exec \u7684\u5b57\u7b26\u4e32\u3002 -c \u4ee3\u8868 command\uff0c\u5e76\u6307\u793a shell \u5c06\u503c\u89e3\u91ca\u4e3a shell \u547d\u4ee4\uff0c\u89e3\u6790\u5b83\uff0c\u7136\u540e\u8fd0\u884c\u5b83\u3002\u6362\u53e5\u8bdd\u8bf4\uff0cnode \u4e0d\u662f\u76f4\u63a5\u8fd0\u884c\u547d\u4ee4\uff0c\u800c\u662f\u8ba9 shell \u505a\u7e41\u91cd\u7684\u5de5\u4f5c\u3002\u4f46\u662f shell \u662f shell \u8bed\u8a00\u7684\u89e3\u91ca\u5668\uff0c\u901a\u8fc7\u7cbe\u5fc3\u5236\u4f5c exec \u7684\u8f93\u5165\uff0c\u6211\u4eec\u53ef\u4ee5\u8981\u6c42\u5b83\u8fd0\u884c\u4efb\u610f\u4ee3\u7801.\u7279\u522b\u662f\uff0c\u8fd9\u5c31\u662f\u6211\u4eec\u5728\u4e0a\u9762\u7684\u574f\u4f8b\u5b50\u4e2d\u7528\u4f5c\u6709\u6548\u8d1f\u8f7d\u7684\u5185\u5bb9\uff1a\u8282\u70b9\u4e2d\u6709\u4e00\u4e2a\u7b49\u6548\u7684\u5b89\u5168 API\uff1aspawn.unlike exec\uff0c\u5b83\u4f7f\u7528\u53c2\u6570\u6570\u7ec4\u800c\u4e0d\u662f\u5355\u4e2a\u5b57\u7b26\u4e32\u3002\u5728\u5185\u90e8\uff0c\u8be5 API \u7ed5\u8fc7 shell \u5e76\u76f4\u63a5\u4f7f\u7528 execve\u3002\u56e0\u6b64\uff0c\u8be5 API \u4e0d\u6613\u53d7\u5230 shell \u6ce8\u5165\u7684\u5f71\u54cd\u2014\u2014\u88ab\u653b\u51fb\u53ef\u4ee5\u8fd0\u884c\u5e26\u6709\u9519\u8bef\u53c2\u6570\u7684 curl\uff0c\u4f46\u9664\u4e86 curl \u4e4b\u5916\uff0c\u5b83\u4e0d\u80fd\u8fd0\u884c\u5176\u4ed6\u4e1c\u897f\u3002\n\u6709\u4e00\u4e2a exec \u98ce\u683c\u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u5728\u540e\u53f0\u751f\u6210 /bin/sh -c\uff0c\u8fd9\u4e2a\u51fd\u6570\u7684\u6587\u6863\u5305\u62ec\u4e00\u4e2a\u5de8\u5927\u7684\u514d\u8d23\u58f0\u660e\uff0c\u8bf4\u5c06\u5b83\u4e0e\u7528\u6237\u8f93\u5165\u4e00\u8d77\u4f7f\u7528\u662f\u4e00\u4e2a\u574f\u4e3b\u610f\uff0c\u6709\u4e00\u4e2a\u5b89\u5168\u7684\u66ff\u4ee3\u65b9\u6848\u53c2\u6570\u4f5c\u4e3a\u6570\u7ec4\u5e76\u76f4\u63a5\u751f\u6210\u8fdb\u7a0b\u3002\u4e3a\u4ec0\u4e48\u8981\u63d0\u4f9b\u4e00\u4e2a\u53ef\u5229\u7528\u7684API\uff0c\u800c\u4e00\u4e2a\u5b89\u5168\u7684\u7248\u672c\u662f\u53ef\u80fd\u7684\u5e76\u4e14\u66f4\u76f4\u63a5\uff1f\u6211\u4e0d\u77e5\u9053\uff0c\u4f46\u6211\u7684\u731c\u6d4b\u662f\u5b83\u4e3b\u8981\u53ea\u662f\u5386\u53f2\u3002C\u6709\u7cfb\u7edf\uff0cPerl\u7684\u53cd\u5f15\u53f7\u76f4\u63a5\u5bf9\u5e94\uff0cRuby\u4ecePerl\u5f97\u5230\u53cd\u5f15\u53f7\uff0c Python \u53ea\u662f\u6709\u7cfb\u7edf\uff0cnode \u53ef\u80fd\u53d7\u6240\u6709\u8fd9\u4e9b\u811a\u672c\u8bed\u8a00\u7684\u5f71\u54cd\u3002\u8bf7\u6ce8\u610f\uff0c\u5b89\u5168\u6027\u5e76\u4e0d\u662f\u57fa\u4e8e /bin/sh -c \u7684 API \u7684\u552f\u4e00\u95ee\u9898\u3002\u9605\u8bfb\u53e6\u4e00\u7bc7\u6587\u7ae0\u4ee5\u4e86\u89e3\u5176\u4f59\u95ee\u9898\u3002\u5982\u679c\u60a8\u662f\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\uff0c\u8bf7\u6ce8\u610f\u5b58\u5728\u6b64\u95ee\u9898\u3002\u8bf7\u4ed4\u7ec6\u9605\u8bfb\u8bed\u8a00\u6587\u6863 \u2014 \u6700\u6709\u53ef\u80fd\u7684\u662f\uff0c\u8fdb\u7a0b\u751f\u6210\u51fd\u6570\u6709\u4e24\u79cd\u98ce\u683c\u3002\u8bf7\u6ce8\u610f shell \u6ce8\u5165\u4e0e SQL \u6ce8\u5165\u548c XSS \u7684\u76f8\u4f3c\u4e4b\u5904\u3002\u5982\u679c\u60a8\u5f00\u53d1\u4e00\u4e2a\u5e93\u4ee5\u65b9\u4fbf\u5730\u5904\u7406\u5916\u90e8\u8fdb\u7a0b\uff0c\u8bf7\u4ec5\u4f7f\u7528\u548c\u516c\u5f00\u5e95\u5c42\u5e73\u53f0\u7684\u65e0\u58f3 API\u3002\n\u5982\u679c\u4f60\u6784\u5efa\u4e00\u4e2a\u65b0\u5e73\u53f0\uff0c\u9996\u5148\u4e0d\u8981\u63d0\u4f9b bin/sh -c API\u3002\u50cf deno\uff08\u8fd8\u6709 Go\u3001Rust\u3001Julia\uff09\uff0c\u4e0d\u8981\u50cf node\uff08\u8fd8\u6709 Python\u3001Ruby\u3001Perl\u3001 C).\u5982\u679c\u60a8\u51fa\u4e8e\u9057\u7559\u539f\u56e0\u5fc5\u987b\u7ef4\u62a4\u6b64\u7c7b API\uff0c\u8bf7\u6e05\u695a\u8bb0\u5f55\u6709\u5173 shell \u6ce8\u5165\u7684\u95ee\u9898\u3002\u8bb0\u5f55\u5982\u4f55\u624b\u52a8\u6267\u884c /bin/sh -c \u4e5f\u53ef\u80fd\u662f\u4e00\u4e2a\u597d\u4e3b\u610f\u3002\u5982\u679c\u60a8\u6b63\u5728\u8bbe\u8ba1\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0c\u8bf7\u6ce8\u610f\u5b57\u7b26\u4e32\u63d2\u503c\u8bed\u6cd5\u3002\u91cd\u8981\u7684\u662f\u53ef\u4ee5\u4f7f\u7528\u5b57\u7b26\u4e32\u63d2\u503c\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u751f\u6210\u547d\u4ee4\u3002\u8fd9\u4e3b\u8981\u610f\u5473\u7740\u5e93\u4f5c\u8005\u5e94\u8be5\u80fd\u591f\u89e3\u6784\u201ccmd -j $arg1 -f $arg2&quot; \u5c06\u5b57\u9762\u91cf\u8f6c\u6362\u4e3a\u4e24\u4e2a\uff08\u7f16\u8bd1\u65f6\uff09\u6570\u7ec4\uff1a[&quot;cmd -j &quot;, &quot; -f &quot;] \u548c [arg1, arg2]\u3002\u5982\u679c\u60a8\u5728\u8bed\u8a00\u4e2d\u4e0d\u63d0\u4f9b\u6b64\u529f\u80fd\uff0c\u5e93\u4f5c\u8005\u5c06\u62c6\u5206\u5185\u63d2\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u5c06\u662f\u4e0d\u5b89\u5168\u7684\uff08\u4e0d\u4ec5\u5bf9\u4e8e\u70ae\u51fb - \u5bf9\u4e8e SQLing \u6216 HTMLing \u4e5f\u662f\u5982\u6b64\uff09\u3002\u53ef\u4ee5\u5b66\u4e60\u7684\u597d\u4f8b\u5b50\u662f JavaScript \u7684\u6807\u8bb0\u6a21\u677f\u548c Julia \u7684\u53cd\u5f15\u53f7\u3002\u54e6\uff0c\u5bf9\u4e86\uff0c\u6211\u5199\u8fd9\u4e2a\u4e1c\u897f\u7684\u771f\u6b63\u539f\u56e0\u3002\u672c\u8282\u7684 TL;DR \u662f\u6211\u60f3\u62b1\u6028\u4e00\u4e0b\u7279\u5b9a\u7684 API \u8bbe\u8ba1\u3002\u6211\u5f88\u9ad8\u5174\u5730\u5728\u4e00\u4e9b Rust \u5e93\u4e0a\u8fdb\u884c\u9ed1\u5ba2\u653b\u51fb\u3002\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u6309\u4e0b\u4e86 rust-analyzer \u4e2d\u7684\u201c\u8fd0\u884c\u6d4b\u8bd5\u201d\u6309\u94ae\u3002\u800c\u4e14\uff0c\u5f88\u60ca\u8bb6\uff0c\u4e0d\u5c0f\u5fc3\u5f04\u5de7\u4e86\u81ea\u5df1\uff01\u6267\u884c\u4efb\u52a1\uff1acargo test --doc -- Plotter&lt;D&gt;::line_fill --nocapturewarning: An error occurred while redirecting file &#39;D&#39;open: No such file or directory The terminal process/bin/fish &#39;-c&#39;, &#39;cargo test --doc -- Plotter&lt;D&gt;::line_fill --nocapture&#39;\u542f\u52a8\u5931\u8d25\uff08\u9000\u51fa\u4ee3\u7801\uff1a1\uff09\u3002\u7ec8\u7aef\u5c06\u88ab\u4efb\u52a1\u91cd\u7528\uff0c\u6309\u4efb\u610f\u952e\u5173\u95ed\u5b83\u3002\u592a\u4ee4\u4eba\u5931\u671b\u4e86\u3002\u6765\u5427\uff0c\u6211\u5e2e\u52a9\u7ef4\u62a4\u7684\u4ee3\u7801\u4e2d\u600e\u4e48\u4f1a\u6709\u4e00\u4e2a shell \u6ce8\u5165\uff1f\u867d\u7136\u8fd9\u5bf9\u4e8e rust-analyzer \u6765\u8bf4\u4e0d\u662f\u4e00\u4e2a\u5927\u95ee\u9898\uff08\u6211\u4eec\u7684\u5b89\u5168\u6a21\u578b\u5047\u8bbe\u4ee3\u7801\u662f\u53ef\u4fe1\u7684\uff0c\u56e0\u4e3a rustup\u3001cargo \u548c rustc\u53ef\u4ee5\u6309\u8bbe\u8ba1\u6267\u884c\u4efb\u610f\u4ee3\u7801\uff09\uff0c\u8fd9\u7edd\u5bf9\u662f\u5bf9\u6211\u7684\u5ba1\u7f8e\u611f\u53d7\u7684\u5de8\u5927\u6253\u51fb\uff01\u67e5\u770b git \u5386\u53f2\uff0c\u662f\u6211\u5728\u5ba1\u67e5\u671f\u95f4\u9519\u8fc7\u4e86\u201c\u5c06\u53c2\u6570\u8fde\u63a5\u6210\u5355\u4e2a\u5b57\u7b26\u4e32\u201d\u3002\u6240\u4ee5\u6211\u80af\u5b9a\u662f\u8fd9\u91cc\u95ee\u9898\u7684\u4e00\u90e8\u5206\u3002\u4f46\u53e6\u4e00\u90e8\u5206\u662f\u63a5\u53d7\u5355\u4e2a\u5b57\u7b26\u4e32\u7684 API \u6839\u672c\u5b58\u5728.\nexport class ShellExecution { /** * \u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u5b8c\u6574\u547d\u4ee4\u884c\u7684 shell \u6267\u884c\u3002 * * @param commandLine \u8981\u6267\u884c\u7684\u547d\u4ee4\u884c\u3002 * @param options \u542f\u52a8\u5916\u58f3\u7684\u53ef\u9009\u9009\u9879\u3002 */ \u6784\u9020\u51fd\u6570 ( commandLine : string , options ?: ShellExecutionOptions ); /* ... */ } \u6240\u4ee5\uff0c\u8fd9\u6b63\u662f\u6211\u6240\u63cf\u8ff0\u7684\u2014\u2014\u4e00\u4e2a\u63a5\u53d7\u5355\u4e2a\u5b57\u7b26\u4e32\u7684\u8fdb\u7a0b\u751f\u6210 API\u3002\u6211\u60f3\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8fd9\u751a\u81f3\u53ef\u80fd\u662f\u5408\u7406\u7684\u2014\u2014API \u5728 GUI \u4e2d\u6253\u5f00\u4e00\u4e2a\u6587\u5b57 shell \uff0c\u7528\u6237\u53ef\u4ee5\u5728\u547d\u4ee4\u5b8c\u6210\u540e\u4e0e\u5176\u8fdb\u884c\u4ea4\u4e92\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u73af\u987e\u56db\u5468\u540e\uff0c\u6211\u5f88\u5feb\u627e\u5230\u4e86\u53e6\u4e00\u4e2a API\uff0c\u5b83\u770b\u8d77\u6765\uff08\u80cc\u666f\u4e2d\u7684\u4e0d\u7965\u97f3\u4e50\uff09\u5c31\u50cf\u6211\u8981\u627e\u7684\uff1a export class ShellExecution { /** * \u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u547d\u4ee4\u548c\u53c2\u6570\u7684 shell \u6267\u884c\u3002 * \u5bf9\u4e8e\u771f\u6b63\u7684\u6267\u884c\uff0c\u7f16\u8f91\u5668\u5c06\u6839\u636e\u547d\u4ee4\u548c\u53c2\u6570\u6784\u9020\u4e00\u4e2a * \u547d\u4ee4\u884c\u3002\u8fd9\u4e2a * \u6709\u5f85\u89e3\u91ca\uff0c\u5c24\u5176\u662f\u5728\u6d89\u53ca * \u5f15\u7528\u65f6\u3002\u5982\u679c\u9700\u8981\u5b8c\u5168\u63a7\u5236\u547d\u4ee4\u884c * \u8bf7\u4f7f\u7528\u521b\u5efa\u5e26\u6709\u5b8c\u6574\u547d\u4ee4\u884c\u7684 `ShellExecution` \u7684\u6784\u9020\u51fd\u6570\u3002 * * @param command \u8981\u6267\u884c\u7684\u547d\u4ee4\u3002 * @param args \u547d\u4ee4\u53c2\u6570\u3002 * @param options \u542f\u52a8\u5916\u58f3\u7684\u53ef\u9009\u9009\u9879\u3002 */ \u6784\u9020\u51fd\u6570 ( command : string | ShellQuotedString , args : ( string | ShellQuotedString )[], options ?: ShellExecutionOptions ); API \u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u5b83\u8fd8\u8bd5\u56fe\u8bf4\u660e\u4e00\u4e9b\u5173\u4e8e\u5f15\u7528\u7684\u5185\u5bb9\uff0c\u8fd9\u662f\u4e00\u4e2a\u597d\u5146\u5934\uff01\u63aa\u8f9e\u4ee4\u4eba\u56f0\u60d1\uff0c\u4f46\u4f3c\u4e4e\u5f88\u96be\u5411\u6211\u89e3\u91ca\u4f20\u9012 [&quot;ls&quot;, &quot;&gt;&quot;, &quot; out.txt&quot;] \u5b9e\u9645\u4e0a\u4e0d\u4f1a\u91cd\u5b9a\u5411\uff0c\u56e0\u4e3a &gt; \u4f1a\u88ab\u5f15\u7528\u3002\u8fd9\u6b63\u662f\u6211\u60f3\u8981\u7684\uff01\u4e24\u4e2a API \u4e0a\u90fd\u6ca1\u6709\u4efb\u4f55\u7c7b\u578b\u7684\u5b89\u5168\u8bf4\u660e\u662f\u4ee4\u4eba\u62c5\u5fe7\u7684\uff0c\u4f46\u662f\u54e6\u3002\u56e0\u6b64\uff0c\u6211\u91cd\u6784\u4e86\u4ee3\u7801\u4ee5\u4f7f\u7528\u7b2c\u4e8c\u4e2a\u6784\u9020\u51fd\u6570\uff0c\u5e76\u4e14\uff0c\ud83e\udd41 \ud83e\udd41 \ud83e\udd41\uff0c\u5b83\u4ecd\u7136\u5177\u6709\u5b8c\u5168\u76f8\u540c\u7684\u884c\u4e3a\uff01\u539f\u6765\u8fd9\u4e2a API \u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\u6570\u7ec4\uff0c\u5e76\u4e14\u53ea\u662f\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u9664\u975e\u6211\u660e\u786e\u8bf4\u6bcf\u4e2a\u53c2\u6570\u90fd\u9700\u8981\u88ab\u9003\u8131\u3002\u8fd9\u5c31\u662f\u6211\u6240\u62b1\u6028\u7684\u2014\u2014API \u770b\u8d77\u6765\u5bf9\u4e8e\u4e0d\u53d7\u4fe1\u4efb\u7684\u7528\u6237\u8f93\u5165\u662f\u5b89\u5168\u7684\uff0c\u800c\u4e8b\u5b9e\u5e76\u975e\u5982\u6b64\u3002\u8fd9\u5c31\u662f\u6297\u6ee5\u7528\u3002", "note_en": "This is an introductory article about  shell injection, a security vulnerability allowing an attacker to execute arbitrary code on the user\u2019s machine.This is a well-studied problem, and there are simple and efficient solutions to it.It\u2019s relatively easy to design library API in such a way as to shield the application developer from the risk of shell injections.\n There are two reasons why I am writing this post.First, this year I\u2019ve pointed out this issue in  three  different  libraries.It seems that, although the problem is well-studied, its not well known, so just repeating some things might help.Second, I\u2019ve recently reported a related problem about one of the VS Code APIs, and I want to use this piece as an extended GitHub comment :-)\n Shell injection can happen when a program needs to execute another program, and one of the arguments is controlled by the user/attacker.As a model example, let\u2019s write a quick script to read a list of URLs from stdin, and run  curl for each one of those.\n That\u2019s not realistic, but small and illustrative.This is what the script could look like in NodeJS:\n const  readline  =  require ( &#39; readline &#39; ); const  util  =  require ( &#39; util &#39; ); const  exec  =  util . promisify ( require ( &#39; child_process &#39; ). exec ); async  function  main ()  {  const  input  =  readline . createInterface ({  input :  process . stdin ,  output :  process . stdout ,  terminal :  false ,  });  for  await  ( const  line  of  input )  {  if  ( line . trim (). length  &gt;  0 )  {  const  {  stdout ,  stderr  }  =  await  exec ( `curl  ${ line } ` );  console . log ({  stdout ,  stderr  });  }  } } main ()\n I would have written this in Rust, but, alas, it\u2019s not vulnerable to this particular attack :)\n   Here, we use are using   exec API from node to spawn a child  curl process, passing a line of input as an argument.\n  $ cat urls.txthttps://example.com$ node curl-all.js &lt; urls.txt{ stdout: &#39;&lt;!doctype html&gt;...&lt;/html&gt;\\n&#39;, stderr: &#39;% Total % Received ...&#39;}\n  $ node main.js &lt; malice_in_the_wonderland.txt{ stdout: &#39;PWNED, reading your secrets from /etc/passwd\\n&#39; + &#39;root:x:0:0:System administrator:/root:/bin/fish\\n&#39; + &#39;...&#39; + &#39;matklad:x:1000:100::/home/matklad:/bin/fish\\n&#39;, stderr: &#34;curl: try &#39;curl --help&#39; for more information\\n&#34;}\n That feels bad\u2009\u2014\u2009seems that the script somehow reads the contents of my  /etc/passwd.How did this happen, we\u2019ve only invoked  curl?\n To understand what have just happened, we need to learn a bit about how spawning a process works in general.This section is somewhat UNIX-specific\u2009\u2014\u2009things are implemented a bit differently on Windows.Nonetheless, the big picture conclusions hold there as well.\n The main API to run a program with command line arguments is the  exec family of functions.For example, here\u2019s  execve:\n  It takes the name of the program ( pathname), a list of command line arguments ( argv), and a list of environment variable for the new process ( envp), and uses those to run the specified binary.How exactly this happens is a fascinating story with many forks in the plot, but it is beyond the scope of the article.\n What is curious though, is that while the underlying system API wants an array of arguments, the  child_process.exec function from node takes only a single string:  exec(&#34;curl http://example.com&#34;).\n Let\u2019s find out!To do that, we\u2019ll use the  strace tool.This tool inspects (traces) all the system calls invoked by the program.We\u2019ll ask  strace to look for  execve in particular, to understand how node\u2019s  exec maps to the underlying system\u2019s API.We\u2019ll need the  --follow argument to trace all processes, and not just the top-level one.To reduce the amount of output and only print  execve, we\u2019ll use the  --trace flag:\n $ strace --follow --trace execve node main.js &lt; urls.txtexecve(&#34;/bin/node&#34;, [&#34;node&#34;, &#34;curl-all.js&#34;], 0x7fff97776be0)...execve(&#34;/bin/sh&#34;, [&#34;/bin/sh&#34;, &#34;-c&#34;, &#34;curl https://example.com&#34;], 0x3fcacc0)...execve(&#34;/bin/curl&#34;, [&#34;curl&#34;, &#34;https://example.com&#34;], 0xec4008)\n The first  execve we see here is our original invocation of the  node binary itself.The last one is what we want to do\u2009\u2014\u2009spawn  curl with a single argument, an url.And the middle one is what node\u2019s  exec actually does.\n   Here, node invokes the  sh binary (system\u2019s shell) with two arguments:  -c and the string we originally passed to  child_process.exec. -c stands for command, and instructs the shell to interpret the value as a shell command, parse, it and then run it.\n In other words, rather then running the command directly, node asks the shell to do the heavy lifting.But the shell is an interpreter of the shell language, and, by carefully crafting the input to  exec, we can ask it to run arbitrary code.In particular, that\u2019s what we used as a payload in the bad example above:\n There\u2019s an equivalent safe API in node:   spawn.unlike  exec, it uses an array of arguments rather then a single string.\n  Internally, the API bypasses the shell and uses  execve directly.Thus, this API is not vulnerable to shell injection\u2009\u2014\u2009attacked can run  curl with bad arguments, but it can\u2019t run something else than  curl.\n    there\u2019s an  exec-style function that takes a string and spawns  /bin/sh -c under the hood,\n the docs for this function include a giant disclaimer, saying that using it with user input is a bad idea,\n there\u2019s a safe alternative which takes arguments as an array and spawns the process directly.\n Why provide an exploitable API, while a safe version is possible and is more direct?I don\u2019t know, but my guess is that it\u2019s mostly just history.C has   system, Perl\u2019s backticks correspond directly to that, Ruby got backticks from Perl, Python just has  system, node was probably influenced by all these scripting languages.\n Note that security isn\u2019t the only issue with  /bin/sh -c based API.Read  this other post to learn about the rest of the problems.\n If you are an  application developer, be aware that this issue exists.Read the language documentation carefully\u2009\u2014\u2009most likely, there are two flavors of process spawning functions.Note how shell injection is similar to  SQL injection and  XSS.\n If you  develop a library for conveniently working with external processes, use and expose only the shell-less API from the underlying platform.\n If you  build a new platform, don\u2019t provide  bin/sh -c API in the first place.Be like  deno (and also Go, Rust, Julia), don\u2019t be like  node (and also Python, Ruby, Perl, C).If you  have to maintain such API for legacy reasons, clearly document the issue about shell injection.Documenting how to do  /bin/sh -c by hand might also be a good idea.\n If you are  designing a programming language, be careful with string interpolation syntax.It\u2019s important that string interpolation can be used to spawn a command in a safe way.That mostly means that library authors should be able to deconstruct a  &#34;cmd -j $arg1 -f $arg2&#34; literal into two (compile-time) arrays:  [&#34;cmd -j &#34;, &#34; -f &#34;] and  [arg1, arg2].If you don\u2019t provide this feature in the language, library authors will split the interpolated string, which would be unsafe (not only for shelling out\u2009\u2014\u2009for SQLing or HTMLing as well).Good examples to learn from are JavaScript\u2019s tagged templatesand Julia\u2019s backticks.\n Oh, right, the actual reason why I am writing this thing.The TL;DR for this section is that I want to complain about a specific API design a bit.\n  I was happily hacking on some Rust library.At some point I pressed the \u201crun tests\u201d button in  rust-analyzer.And, surprised, accidentally pwned myself!\n Executing task: cargo test --doc -- Plotter&lt;D&gt;::line_fill --nocapturewarning: An error occurred while redirecting file &#39;D&#39;open: No such file or directoryThe terminal process/bin/fish &#39;-c&#39;, &#39;cargo test --doc -- Plotter&lt;D&gt;::line_fill --nocapture&#39;failed to launch (exit code: 1).Terminal will be reused by tasks, press any key to close it.\n That was disappointing.C\u2019mon, how come there\u2019s a shell injection in the code I help to maintain?While this is not a big problem for rust-analyzer (our security model assumes trusted code, as each of  rustup,  cargo, and  rustc can execute arbitrary code by design), it\u2019s definitely was big blow to my aesthetics sensibilities!\n Looking at the git history, it was me who had missed \u201cconcatenate arguments into a single string\u201d during review.So I was definitely a part of the problem here.But the other part is that the API that takes a single string exists at all.\n  export  class  ShellExecution  {  /** * Creates a shell execution with a full command line. * * @param commandLine The command line to execute. * @param options Optional options for the started the shell. */  constructor (  commandLine :  string ,  options ?:  ShellExecutionOptions  );  /* ... */ }\n So, this is exactly what I am describing\u2009\u2014\u2009a process-spawning API that takes a single string.I guess, in this case this  might even be justified\u2009\u2014\u2009the API opens a literal shell in the GUI, and the user can interact with it after the command finishes.\n Anyway, after looking around I quickly found another API, which  seemed (ominous music in the background) like what I was looking for:\n export  class  ShellExecution  {  /** * Creates a shell execution with a command and arguments. * For the real execution the editor will construct a * command line from the command and the arguments. This * is subject to interpretation especially when it comes to * quoting. If full control over the command line is needed * please use the constructor that creates a `ShellExecution` * with the full command line. * * @param command The command to execute. * @param args The command arguments. * @param options Optional options for the started the shell. */  constructor (  command :  string  |  ShellQuotedString ,  args :  ( string  |  ShellQuotedString )[],  options ?:  ShellExecutionOptions  ); }\n The API takes a array of strings.It also tries to say something about quoting, which is a good sign!The wording is perplexing, but seems that it struggles to explain to me that passing  [&#34;ls&#34;, &#34;&gt;&#34;, &#34;out.txt&#34;] won\u2019t actually redirect, because  &gt; will get quoted.This is exactly what I want!The absence of any kind of a security note on both APIs is concerning, but oh well.\n So, I refactored the code to use this second constructor, and, \ud83e\udd41 \ud83e\udd41 \ud83e\udd41, it still had the exact same behavior!Turns out that this API takes an array of arguments, and just concatenates them, unless I explicitly say that each argument needs to be escaped.\n And  this is what I am complaining about\u2009\u2014\u2009that the API looks like it is safe for an untrusted user input, while it is not.This is misuse resistance resistance.", "posttime": "2021-08-08 17:50:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5916\u58f3,shell,api", "title": ";\u56de\u58f0\u201c\u5916\u58f3\u6ce8\u5c04\u201d", "title_en": "; Echo \u201cShell Injection\u201d", "transed": 1, "url": "https://matklad.github.io//2021/07/30/shell-injection.html", "via": "", "real_tags": ["\u5916\u58f3", "shell", "api"]}, {"category": "", "categoryclass": "", "imagename": "c9151850241f8c8481bf981b294e1969.jpg", "infoid": 1072093, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0d\u4e45\u524d\uff0c\u5728\u82f1\u683c\u5170\u897f\u5357\u90e8\uff0c\u4e00\u4e2a\u5f53\u5730\u793e\u533a\u7740\u624b\u5c06\u4e00\u6240 1960 \u5e74\u4ee3\u7684\u8001\u5f0f\u5b66\u6821\u66ff\u6362\u4e3a\u4e00\u680b\u91c7\u7528\u4e09\u5c42\u73bb\u7483\u7a97\u548c\u8d85\u7ea7\u9694\u70ed\u5899\u7684\u65b0\u5efa\u7b51\uff0c\u4ee5\u5b9e\u73b0\u5c3d\u53ef\u80fd\u9ad8\u7684\u80fd\u6e90\u6548\u7387\u3002\u65b0\u5b66\u6821\u81ea\u8c6a\u5730\u4e0e\u65e7\u5b66\u6821\u5728\u540c\u4e00\u5730\u70b9\u5f00\u5b66\uff0c\u62e5\u6709\u76f8\u540c\u6570\u91cf\u7684\u5b66\u751f\u548c\u76f8\u540c\u7684\u6821\u957f\u2014\u2014\u800c\u4e14\u5f88\u5feb\u4e00\u4e2a\u6708\u6d88\u8017\u7684\u80fd\u91cf\u6bd4\u65e7\u5efa\u7b51\u4e00\u5e74\u6d88\u8017\u7684\u80fd\u91cf\u8fd8\u591a\u3002\u65b0\u5927\u697c\u7684\u5730\u6696\u7cfb\u7edf\u8bbe\u8ba1\u5f97\u975e\u5e38\u7cdf\u7cd5\uff0c\u5373\u4f7f\u5728\u51ac\u5929\uff0c\u7a97\u6237\u6bcf\u5929\u4e5f\u4f1a\u81ea\u52a8\u6253\u5f00\u51e0\u6b21\u4ee5\u6392\u51fa\u70ed\u91cf\u3002\u505c\u8f66\u573a\u91cc\u7684\u4e00\u4e2a\u6444\u50cf\u5934\u4e0d\u77e5\u600e\u4e48\u8fde\u7ebf\u4e86\uff0c\u5c31\u597d\u50cf\u5b83\u662f\u4e00\u4e2a\u70ed\u4f20\u611f\u5668\u4e00\u6837\uff0c\u53ea\u8981\u6709\u4efb\u4f55\u4e1c\u897f\u4ece\u955c\u5934\u524d\u9762\u7ecf\u8fc7\uff0c\u5c31\u4f1a\u53d1\u51fa\u80fd\u91cf\u547c\u53eb\u3002\u636e\u53c2\u4e0e\u8c03\u67e5\u7684\u5df4\u65af\u5927\u5b66\u4e13\u5bb6\u6234\u7ef4\u00b7\u79d1\u5229 (David Coley) \u8bf4\uff0c\u8fd9\u662f\u201c\u707e\u96be\u76ee\u5f55\u201d\u3002\u8bb8\u591a\u707e\u96be\u90fd\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5efa\u7b51\u80fd\u6e90\u6a21\u578b\uff0c\u8fd9\u662f\u4e00\u79cd\u80fd\u6e90\u4f7f\u7528\u7684\u8f6f\u4ef6\u6a21\u62df\uff0c\u662f\u8bbe\u8ba1\u4efb\u4f55\u7eff\u8272\u5efa\u7b51\u7684\u5173\u952e\u4e00\u6b65\u3002\u9664\u5176\u4ed6\u9519\u8bef\u5916\uff0c\u8bbe\u8ba1\u5e08\u4ece\u4e00\u4e2a\u5b64\u7acb\u7684\u6559\u5ba4\u7684\u7b80\u5316\u6a21\u578b\u4e2d\u63a8\u65ad\u51fa\u4ed6\u4eec\u7684\u8ba1\u5212\uff0c\u8be5\u6a21\u578b\u8bbe\u7f6e\u5728\u5e73\u5766\u7684\u666f\u89c2\u4e2d\uff0c\u4e00\u5929\u4e2d\u7684\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5145\u6ee1\u9633\u5149\u3002\u8fd9\u51b3\u5b9a\u4e86\u7a97\u6237\u7740\u8272\u548c\u906e\u9633\u4ee5\u51cf\u5c11\u592a\u9633\u80fd\u589e\u76ca\u3002\u4f3c\u4e4e\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u65b0\u5b66\u6821\u5b9e\u9645\u4e0a\u5750\u843d\u5728\u4e00\u4e2a\u88ab\u906e\u836b\u6811\u73af\u7ed5\u7684\u5c71\u8c37\u4e2d\uff0c\u9700\u8981\u5b83\u6240\u80fd\u83b7\u5f97\u7684\u6240\u6709\u592a\u9633\u80fd\u3002\u6559\u5ba4\u592a\u6697\u4e86\uff0c\u4e0d\u5f97\u4e0d\u6574\u5929\u5f00\u7740\u706f\u3002\u8fd9\u662f\u4e00\u4e2a\u6781\u7aef\u7684\u6848\u4f8b\u3002\u4f46\u636e Coley \u8bf4\uff0c\u8fd9\u4e5f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8bf4\u660e\u8fc7\u4e8e\u4e50\u89c2\u7684\u80fd\u6e90\u5efa\u6a21\u5982\u4f55\u5bfc\u81f4\u201c\u80fd\u6e90\u7ee9\u6548\u5dee\u8ddd\u201d\uff0c\u8fd9\u4e2a\u95ee\u9898\u5728\u7eff\u8272\u5efa\u7b51\u9879\u76ee\u4e2d\u5df2\u7ecf\u53d8\u5f97\u975e\u5e38\u719f\u6089\u3002\u6027\u80fd\u5dee\u8ddd\u662f\u6307\u80fd\u6e90\u6539\u8fdb\uff08\u901a\u5e38\u82b1\u8d39\u5de8\u5927\uff09\u672a\u80fd\u5b9e\u73b0\u627f\u8bfa\u7684\u90e8\u5206\uff08\u6216\u6709\u65f6\u5168\u90e8\uff09\u8282\u80fd\u3002\u4f8b\u5982\uff0c\u53bb\u5e74\u5bf9\u5fb7\u56fd\u7ffb\u65b0\u516c\u5bd3\u697c\u7684\u4e00\u9879\u7814\u7a76\u53d1\u73b0\uff0c\u4ed6\u4eec\u672a\u8fbe\u5230\u9884\u671f\u7684\u8282\u80fd 5% \u5230 28%\u3002\u5728\u82f1\u56fd\uff0c\u5bf9\u4ece\u8d85\u5e02\u5230\u533b\u7597\u4fdd\u5065\u4e2d\u5fc3\u7684 50 \u5ea7\u201c\u524d\u6cbf\u73b0\u4ee3\u5efa\u7b51\u201d\u8fdb\u884c\u7684\u8bc4\u4f30\u62a5\u544a\u79f0\uff0c\u5b83\u4eec\u201c\u901a\u5e38\u4f7f\u7528\u7684\u80fd\u6e90\u6bd4\u8bbe\u8ba1\u5141\u8bb8\u7684\u9ad8\u51fa 3.5 \u500d\u201d\u2014\u2014\u5e73\u5747\u751f\u4ea7\u91cf\u662f\u5176\u8bbe\u8ba1\u5141\u8bb8\u7684 3.8 \u500d\u3002\u9884\u6d4b\u7684\u78b3\u6392\u653e \u7528\u4e00\u4f4d\u5efa\u7b51\u6280\u672f\u4e13\u5bb6\u7684\u8bdd\u6765\u8bf4\uff0c\u6027\u80fd\u5dee\u8ddd\u662f\u201c\u4e00\u4e2a\u5de8\u5927\u7684\u3001\u53ef\u6015\u7684\u5de8\u5927\u95ee\u9898\u201d\uff0c\u8fd9\u5e76\u4e0d\u5938\u5f20\u3002\u5c3d\u7ba1\u516c\u4f17\u5bf9\u80fd\u6e90\u6d88\u8017\u548c\u6c14\u5019\u53d8\u5316\u7684\u5173\u6ce8\u4e3b\u8981\u96c6\u4e2d\u5728\u6c7d\u8f66\u6bcf\u52a0\u4ed1\u82f1\u91cc\u6570\u4e0a\uff0c\u4f46\u6574\u4e2a\u8fd0\u8f93\u90e8\u95e8\u2014\u2014\u5305\u62ec\u706b\u8f66\u3001\u98de\u673a\u3001\u8f6e\u8239\u3001\u5361\u8f66\u548c\u6c7d\u8f66\u2014\u2014\u4ec5\u5360\u7f8e\u56fd\u6c14\u5019\u53d8\u5316\u6392\u653e\u91cf\u7684 26%\u3002\u6839\u636e\u7f8e\u56fd\u7eff\u8272\u5efa\u7b51\u59d4\u5458\u4f1a\u7684\u6570\u636e\uff0c\u5efa\u7b51\u7269\u5360 40%\uff0c\u5b83\u4eec\u662f\u589e\u957f\u6700\u5feb\u7684\u6392\u653e\u6e90\u3002\u6d88\u9664\u7ee9\u6548\u5dee\u8ddd\u5bf9\u6b27\u76df\u56fd\u5bb6\u5c24\u5176\u91cd\u8981\uff0c\u5b83\u4eec\u5177\u6709\u6cd5\u5f8b\u7ea6\u675f\u529b\u7684\u627f\u8bfa\uff0c\u5373\u5230\u672c\u4e16\u7eaa\u4e2d\u53f6\u5c06\u6392\u653e\u91cf\u6bd4 1990 \u5e74\u7684\u6c34\u5e73\u51cf\u5c11 80% \u81f3 95%\u3002\u4f46\u662f\uff0c\u5bf9\u4e8e\u4efb\u4f55\u8bd5\u56fe\u5f04\u6e05\u695a\u5728\u7279\u5b9a\u80fd\u6e90\u6539\u8fdb\u4e0a\u6295\u8d44\u591a\u5c11\u7684\u4eba\u6765\u8bf4\uff0c\u6709\u4fe1\u5fc3\u77e5\u9053\u4f1a\u5e26\u6765\u4ec0\u4e48\u8282\u7701\u662f\u5f88\u91cd\u8981\u7684\u3002\u7814\u7a76\u4eba\u5458\u666e\u904d\u5c06\u6027\u80fd\u5dee\u8ddd\u5f52\u548e\u4e8e\u5efa\u7b51\u5546\u7684\u7c97\u5fc3\u5de5\u4f5c\u3001\u8fc7\u4e8e\u590d\u6742\u7684\u8282\u80fd\u6280\u672f\u6216\u5efa\u7b51\u7269\u6700\u7ec8\u5c45\u4f4f\u8005\u7684\u4e0d\u826f\u884c\u4e3a\u3002\u4f46\u5728\u4e00\u9879\u65b0\u7814\u7a76\u4e2d\uff0c\u79d1\u5229\u548c\u4ed6\u7684\u5408\u8457\u8005\u5c06\u5927\u90e8\u5206\u8d23\u4efb\u5f52\u548e\u4e8e\u65e0\u80fd\u7684\u80fd\u91cf\u5efa\u6a21\u3002\u8be5\u7814\u7a76\u7684\u6807\u9898\u63d0\u51fa\u4e86\u4e00\u4e2a\u6311\u8845\u6027\u7684\u95ee\u9898\u201c\u5efa\u6a21\u8005\u662f\u5426\u8bc6\u5b57\uff1f\u201d\u66f4\u5177\u6311\u8845\u6027\u7684\u662f\uff0c\u5df4\u65af\u5927\u5b66\u7684\u4e00\u4efd\u65b0\u95fb\u7a3f\u5c06\u6709\u5173\u5efa\u7b51\u80fd\u6e90\u6027\u80fd\u7684\u8bef\u5bfc\u6027\u58f0\u660e\u6bd4\u4f5c\u5927\u4f17\u6c7d\u8f66\u6392\u653e\u4e11\u95fb\uff0c\u5176\u4e2d\u67f4\u6cb9\u53d1\u52a8\u673a\u6c7d\u8f66\u7684\u5b9e\u9645\u6392\u653e\u91cf\u6bd4\u201c\u6c7d\u8f66\u5236\u9020\u5546\u627f\u8bfa\u7684\u6027\u80fd\u201d\u9ad8\u51fa 40 \u500d\u3002 \u201d\n\u5728\u4ed6\u4eec\u7684\u7814\u7a76\u4e2d\uff0cColey \u548c\u4ed6\u7684\u5408\u8457\u8005\u8c03\u67e5\u4e86 108 \u540d\u5efa\u7b51\u884c\u4e1a\u4e13\u4e1a\u4eba\u58eb\u2014\u2014\u5efa\u7b51\u5e08\u3001\u5de5\u7a0b\u5e08\u548c\u80fd\u6e90\u987e\u95ee\u2014\u2014\u4ed6\u4eec\u7ecf\u5e38\u4f7f\u7528\u80fd\u6e90\u6027\u80fd\u6a21\u578b\u3002\u4e3a\u4e86\u8ba9\u95ee\u9898\u7b80\u5355\u5316\uff0c\u7814\u7a76\u4eba\u5458\u8981\u6c42\u53c2\u4e0e\u8005\u67e5\u770b\u6700\u8fd1\u66f4\u65b0\u7684\u5178\u578b\u82f1\u56fd\u534a\u72ec\u7acb\u5f0f\u4f4f\u5b85\uff0c\u4ee5\u6ee1\u8db3\u5f53\u524d\u7684\u5efa\u7b51\u89c4\u8303\u3002\u7136\u540e\u4ed6\u4eec\u8981\u6c42\u6d4b\u8bd5\u5bf9\u8c61\u5bf9\u54ea\u4e9b\u6539\u8fdb\u5bf9\u80fd\u91cf\u8868\u73b0\u7684\u5f71\u54cd\u6700\u5927\u3002\u4ed6\u4eec\u7684\u7b54\u6848\u4e0e\u5ba2\u89c2\u73b0\u5b9e\u51e0\u4e4e\u6ca1\u6709\u76f8\u5173\u6027\uff0c\u6b63\u5982\u4e00\u9879\u7814\u7a76\u5728\u4e00\u5e74\u4e2d\u9010\u5c0f\u65f6\u76d1\u6d4b\u8be5\u5bb6\u5ead\u7684\u5b9e\u9645\u80fd\u6e90\u6027\u80fd\u6240\u786e\u5b9a\u7684\u90a3\u6837\u3002\u6839\u636e\u8be5\u7814\u7a76\uff0c\u56db\u5206\u4e4b\u4e00\u7684\u6d4b\u8bd5\u5bf9\u8c61\u505a\u51fa\u7684\u5224\u65ad\u201c\u770b\u8d77\u6765\u6bd4\u968f\u673a\u54cd\u5e94\u7684\u4eba\u66f4\u7cdf\u7cd5\u201d\uff0c\u8be5\u7814\u7a76\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0c\u5efa\u6a21\u4eba\u5458\u7684\u6837\u672c\u201c\u4ee5\u53ca\u5efa\u7b51\u5efa\u6a21\u4eba\u5458\u7684\u4eba\u53e3\uff0c\u4e0d\u80fd\u88ab\u89c6\u4e3a\u5177\u6709\u5efa\u6a21\u77e5\u8bc6\u3002\u201d\u4e0d\u51fa\u6240\u6599\uff0c\u8fd9\u4e2a\u7ed3\u8bba\u5f15\u8d77\u4e86\u8f69\u7136\u5927\u6ce2\u3002 \u201c\u8fd9\u4e2a\u6837\u672c\u5bf9\u6211\u6765\u8bf4\u4f3c\u4e4e\u5f88\u5947\u602a\uff0c\u201d\u52b3\u4f26\u65af\u4f2f\u514b\u5229\u56fd\u5bb6\u5b9e\u9a8c\u5ba4\u7684\u5efa\u7b51\u6280\u672f\u4e13\u5bb6\u57c3\u6587\u7c73\u5c14\u65af\u8bf4\uff0c\u201c\u5305\u62ec\u8fd9\u4e48\u591a\u5728\u5b9e\u8df5\u4e2d\u521d\u7ea7\u7684\u4eba\uff0c\u7136\u540e\u5bf9\u6574\u4e2a\u884c\u4e1a\u8fdb\u884c\u6279\u8bc4\u3002\u201d\u4ed6\u6307\u51fa\uff0c\u5728 108 \u540d\u6d4b\u8bd5\u5bf9\u8c61\u4e2d\uff0c\u51e0\u4e4e\u4e09\u5206\u4e4b\u4e8c\u7684\u4eba\u62e5\u6709\u4e94\u5e74\u6216\u66f4\u77ed\u7684\u5efa\u7b51\u7ecf\u9a8c\u3002\u4f46\u662f Coley \u548c\u4ed6\u7684\u5408\u8457\u8005\u53d1\u73b0\uff0c\u5373\u4f7f\u662f\u5177\u6709\u201c\u66f4\u9ad8\u6c34\u5e73\u7684\u8d44\u683c\uff0c\u6216\u5177\u6709\u591a\u5e74\u5efa\u6a21\u7ecf\u9a8c\u201d\u7684\u6d4b\u8bd5\u5bf9\u8c61\uff0c\u4e5f\u4e0d\u6bd4\u4ed6\u4eec\u7684\u540e\u8f88\u66f4\u51c6\u786e\u3002\u65e0\u8bba\u5982\u4f55\uff0c\u7c73\u5c14\u65af\u627f\u8ba4\uff0c\u201c\u6027\u80fd\u5dee\u8ddd\u662f\u771f\u5b9e\u7684\uff0c\u6211\u4eec\u5fc5\u987b\u610f\u8bc6\u5230\u6a21\u578b\u6ca1\u6709\u6b63\u786e\u6355\u6349\u4e8b\u7269\u3002\u5728\u6211\u4eec\u7684\u6848\u4f8b\u4e2d\uff0c\u5efa\u6a21\u8005\u4f1a\u63d0\u51fa\u6bd4\u623f\u5c4b\u80fd\u6e90\u4f7f\u7528\u91cf\u66f4\u591a\u7684\u8282\u80fd\u63aa\u65bd\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ea\u662f\u5728\u4f7f\u7528\u6a21\u578b\uff0c\u800c\u6ca1\u6709\u5173\u6ce8\u771f\u6b63\u7684\u623f\u5c4b\u3002\u7f8e\u56fd\u7eff\u8272\u5efa\u7b51\u59d4\u5458\u4f1a\u7684\u76d6\u5c14\u6c49\u666e\u65af\u8fc8\u5c14\u8bf4\uff0c\u8fd9\u7c7b\u95ee\u9898\u2014\u2014\u80fd\u6e90\u6a21\u578b\u663e\u793a\u4e0d\u5408\u7406\u7684\u7ed3\u679c\u2014\u2014\u5728 50% \u7684\u901a\u8fc7 LEED \u8ba4\u8bc1\u8fc7\u7a0b\u7684\u9879\u76ee\u7684\u521d\u6b65\u9636\u6bb5\u4e5f\u4f1a\u51fa\u73b0\u3002\u5979\u8bf4\uff0c\u8bbe\u8ba1\u5e08\u503e\u5411\u4e8e\u91c7\u7528\u201c\u9ed1\u5323\u5b50\u201d\u65b9\u6cd5\uff0c\u63d0\u4f9b\u7279\u5b9a\u80fd\u6e90\u6a21\u578b\u6240\u9700\u7684\u4efb\u4f55\u8f93\u5165\uff0c\u7136\u540e\u201c\u4e0d\u8bc4\u4f30\u8fd9\u4e9b\u7ed3\u679c\u7684\u5408\u7406\u6027\u201d\u5c31\u63a5\u53d7\u8f93\u51fa\u3002 \u201c\u60a8\u603b\u662f\u4f1a\u9047\u5230\u5783\u573e\u8fdb/\u51fa\u7684\u95ee\u9898\uff0c\u5efa\u6a21\u4eba\u5458\u786e\u5b9a\u4ed6\u4eec\u662f\u5426\u6b63\u5728\u5c06\u5783\u573e\u6392\u51fa\u7684\u80fd\u529b\u81f3\u5173\u91cd\u8981\u3002\u201d\u90a3\u4e48\u6709\u4ec0\u4e48\u89e3\u51b3\u529e\u6cd5\u5462\uff1f Coley \u8bf4\uff0c\u76ee\u524d\u5bf9\u80fd\u6e90\u5efa\u6a21\u5e08\u7684\u8ba4\u8bc1\u8981\u6c42\u201c\u975e\u5e38\u6e29\u548c\u201d\uff0c\u4f46\u662f\u201c\u5f53\u4f60\u8bd5\u56fe\u76f8\u5bf9\u8f83\u5feb\u5730\u5f00\u59cb\u5de5\u4f5c\u65f6\uff0c\u4f60\u4e0d\u80fd\u8ba9\u6bcf\u4e2a\u4eba\u90fd\u56de\u5230\u5927\u5b66\u4e09\u5e74\u3002\u201d\u65e0\u8bba\u5982\u4f55\uff0c\u95ee\u9898\u4e0d\u5728\u4e8e\u6b63\u5f0f\u610f\u4e49\u4e0a\u7684\u6559\u80b2\u3002 \u201c\u8fd9\u4e0e\u53cd\u9988\u6709\u5173\uff0c\u201d\u4ed6\u8bf4\uff0c\u6216\u8005\u662f\u7f3a\u4e4f\u53cd\u9988\u3002\u5efa\u7b51\u6587\u5316\u8ba4\u4e3a\uff0c\u5efa\u7b51\u5e08\u2014\u2014\u4f46\u4e0d\u662f\u80fd\u6e90\u5efa\u6a21\u5e08\u2014\u2014\u65c5\u884c\u6570\u767e\u82f1\u91cc\uff0c\u770b\u770b\u5b9e\u9645\u5efa\u7b51\u4e0e\u4ed6\u4eec\u8bbe\u8ba1\u7684\u5efa\u7b51\u76f8\u6bd4\u5982\u4f55\uff0c\u8fd9\u662f\u5b8c\u5168\u5408\u7406\u7684\u3002\u5bf9\u4e8e\u80fd\u6e90\u5efa\u6a21\u4eba\u5458\u6765\u8bf4\uff0c\u4ed6\u4eec\u751a\u81f3\u4e0d\u5e0c\u671b\u5728\u7b2c\u4e00\u5e74\u5c31\u4e0e\u5efa\u7b51\u7ecf\u7406\u901a\u7535\u8bdd\uff0c\u8be2\u95ee\u80fd\u6e90\u4f7f\u7528\u60c5\u51b5\u4e0e\u539f\u59cb\u6a21\u578b\u76f8\u6bd4\u5982\u4f55\u3002\u56e0\u6b64\uff0cColey \u8bf4\uff0c\u80fd\u91cf\u5efa\u6a21\u53ef\u4ee5\u53d8\u5f97\u50cf\u7406\u8bba\u7269\u7406\u5b66\uff1a\u201c\u4f60\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u521b\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u7406\u8bba\u7f51\u7edc\uff0c\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u81ea\u5df1\u7814\u7a76\u7684\u662f\u7406\u8bba\u7684\u7269\u7406\u5b66\uff0c\u800c\u4e0d\u662f\u73b0\u5b9e\u4e16\u754c\u7684\u7269\u7406\u5b66\u3002\u201d\u4ed6\u5efa\u8bae\uff0c\u7b54\u6848\u662f\u76d1\u7ba1\u8981\u6c42\uff0c\u5efa\u6a21\u4eba\u5458\u901a\u8fc7\u5b9a\u671f\u68c0\u67e5\u4ed6\u4eec\u7684\u9884\u6d4b\u4e0e\u5efa\u7b51\u7269\u7684\u5b9e\u9645\u80fd\u8017\u6765\u8ddf\u8fdb\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\u9002\u5ea6\u6fc0\u52b1\u7684\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u4f7f\u53cd\u9988\u66f4\u5e7f\u6cdb\u5730\u53ef\u7528\u2014\u2014\u4f8b\u5982\uff0c\u627f\u8bfa\u4e3a\u627f\u8bfa\u5c06\u5b9e\u9645\u80fd\u6e90\u4f7f\u7528\u60c5\u51b5\u53d1\u5e03\u5230\u5728\u7ebf\u6570\u636e\u5e93\u7684\u5f00\u53d1\u5546\u5728\u89c4\u5212\u8bb8\u53ef\u8fc7\u7a0b\u4e2d\u62bd\u51fa\u4e09\u5468\u65f6\u95f4\u3002\u6c49\u666e\u65af\u8fc8\u5c14\u8868\u793a\uff0c\u7eff\u8272\u5efa\u7b51\u59d4\u5458\u4f1a\u5df2\u5f00\u59cb\u8981\u6c42\u4e3a\u5bfb\u6c42 LEED \u8ba4\u8bc1\u7684\u9879\u76ee\u63d0\u4f9b\u6b64\u7c7b\u62a5\u544a\uff0c\u76ee\u524d\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u5728\u7ebf\u5e73\u53f0\uff0c\u201c\u4ee5\u4fbf\u5efa\u7b51\u4e1a\u4e3b\u8ddf\u8e2a\u81ea\u5df1\u7684\u8868\u73b0\u5e76\u5c06\u5176\u4e0e\u5176\u4ed6\u5efa\u7b51\u8fdb\u884c\u6bd4\u8f83\u3002\u201d\nColey \u8ba4\u4e3a\uff0c\u7b2c\u4e8c\u4e2a\u95ee\u9898\u662f\u653f\u5e9c\u673a\u6784\u503e\u5411\u4e8e\u5728\u8bbe\u8ba1\u8fc7\u7a0b\u5f00\u59cb\u65f6\u8981\u6c42\u7b80\u5316\u80fd\u6e90\u6a21\u578b\u3002\u8fd9\u4e9b\u8981\u6c42\u901a\u5e38\u5305\u62ec\u5173\u4e8e\u80fd\u6e90\u4f7f\u7528\u7684\u67d0\u4e9b\u7edf\u4e00\u5047\u8bbe\uff0c\u4ece\u800c\u66f4\u5bb9\u6613\u5c06\u4e00\u680b\u5efa\u7b51\u4e0e\u53e6\u4e00\u680b\u5efa\u7b51\u8fdb\u884c\u6bd4\u8f83\u3002 \u201c\u56e0\u4e3a\u4f60\u5fc5\u987b\u5728\u4e00\u5f00\u59cb\u5c31\u8fd9\u6837\u505a\uff0c\u6240\u4ee5\u5b83\u6210\u4e3a\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u8fd9\u5c31\u5efa\u7acb\u4e86\u4e00\u79cd\u2018\u7231\u4e3d\u4e1d\u68a6\u6e38\u4ed9\u5883\u2019\u7684\u4e16\u754c\uff0c\u5efa\u6a21\u8005\u5bf9\u8fd9\u4e2a\u4eba\u9020\u4e16\u754c\u8fdb\u884c\u5efa\u6a21\u4e5f\u5c31\u4e0d\u8db3\u4e3a\u5947\u4e86\u3002\u201d\u4f46\u6839\u636e\u6c49\u666e\u65af\u8fc8\u5c14\u7684\u8bf4\u6cd5\uff0c\u81f3\u5c11\u5728\u7f8e\u56fd\uff0c\u8fd1\u5e74\u6765\u8fd9\u5df2\u7ecf\u4e0d\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u5979\u8bf4\uff0c\u76ee\u524d\u7684\u5efa\u7b51\u89c4\u8303\u8981\u6c42\u201c\u76f8\u5f53\u597d\u201d\u3002 \u201c\u4ed6\u4eec\u4e0d\u4f1a\u8bf4\uff0c&#39;\u6a21\u62df\u4e00\u5ea7\u5efa\u7b51\u7269\u6bcf\u5929\u5360\u7528\u516b\u5c0f\u65f6\u7684\u80fd\u6e90\u4f7f\u7528\u60c5\u51b5&#39;\u201d\u6216\u5176\u4ed6\u4e00\u4e9b\u968f\u610f\u7684\u6807\u51c6\u3002\u76f8\u53cd\uff0c\u201c\u4ed6\u4eec\u660e\u786e\u6307\u51fa\uff0c\u6240\u6709\u80fd\u6e90\u4f7f\u7528\u90fd\u5fc5\u987b\u6309\u7167\u9884\u671f\u8fdb\u884c\u5efa\u6a21\u3002\u201d\u4ece\u8fd9\u4e00\u5207\u4e2d\u5f97\u51fa\u7684\u7ed3\u8bba\u4e0d\u662f\u8bcb\u6bc1\u80fd\u6e90\u5efa\u6a21\uff0c\u800c\u662f\u6539\u8fdb\u5b83\u3002 Coley \u8bf4\uff0c\u5efa\u7b51\u5546\u8d8a\u6765\u8d8a\u9700\u8981\u771f\u5b9e\u7684\u5efa\u6a21\uff0c\u8fd9\u4e9b\u5efa\u6a21\u8005\u9700\u8981\u5bf9\u5efa\u7b51\u7269\u7406\u5b66\u6709\u6df1\u5165\u4e86\u89e3\uff0c\u5e76\u4e14\u5bf9\u771f\u5b9e\u5efa\u7b51\u7684\u7ecf\u9a8c\u81f3\u5c11\u4e0e\u80fd\u6e90\u6a21\u578b\u4e00\u6837\u591a\u3002\u5426\u5219\uff0c\u7ed3\u679c\u5c06\u662f\u4ef7\u503c 5 \u4ebf\u7f8e\u5143\u7684\u529e\u516c\u5927\u697c\uff0c\u5728\u5357\u9762\u7684\u73bb\u7483\u592a\u591a\uff0c\u5bfc\u81f4\u91cc\u9762\u7684\u6bcf\u4e2a\u4eba\u90fd\u5728\u708e\u70ed\u7684\u590f\u65e5\u5348\u540e\u70d8\u70e4\u3002\u5982\u679c\u6ca1\u6709\u667a\u80fd\u80fd\u6e90\u5efa\u6a21\uff0c\u7ed3\u679c\u5c06\u662f\u4e16\u754c\u5c06\u66f4\u5feb\u5730\u9677\u5165\u5931\u63a7\u7684\u6c14\u5019\u53d8\u5316\u3002 \u201c\u8fd9\u4e0d\u662f\u706b\u7bad\u79d1\u5b66\uff0c\u201d\u4f2f\u514b\u5229\u5b9e\u9a8c\u5ba4\u7684\u7c73\u5c14\u65af\u8bf4\u3002\u4f46\u968f\u540e\u4ed6\u53c8\u8865\u5145\u9053\uff0c\u201c\u8fd9\u6bd4\u706b\u7bad\u79d1\u5b66\u8fd8\u96be\u3002\u201d", "note_en": "Not long ago in the southwest of England, a local community set out to replace a 1960s-vintage school with a new building using triple-pane windows and super-insulated walls to achieve the highest possible energy efficiency. The new school proudly opened on the same site as the old one, with the same number of students, and the same head person\u2014and was soon burning more energy in a month than the old building had in a year.\n        The underfloor heating system in the new building was so badly designed that the windows automatically opened to dump heat several times a day even in winter.\u00a0 A camera in the parking lot somehow got wired as if it were a thermal sensor, and put out a call for energy any time anything passed in front of the lens.\u00a0 It was \u201ca catalogue of disasters,\u201d according to David Coley, a University of Bath specialist who came in to investigate.\n Many of the disasters were traceable to the building energy model, a software simulation of energy use that is a critical step in designing any building intended to be green. Among other errors, the designers had extrapolated their plan from a simplified model of an isolated classroom set in a flat landscape, with full sun for much of the day. That dictated window tinting and shading to reduce solar gain. Nobody seems to have noticed that the new school actually stood in a valley surrounded by shade trees and needed all the solar gain it could get.\u00a0 The classrooms were so dark the lights had to be on all day.\n It was an extreme case.\u00a0 But it was also a good example, according to Coley, of how overly optimistic energy modeling helps cause the \u201cenergy performance gap,\u201d a problem that has become frustratingly familiar in green building projects. \u00a0 The performance gap refers to the failure of energy improvements, often undertaken at great expense, to deliver some (or occasionally all) of the promised savings. A  study last year of refurbished apartment buildings in Germany, for instance, found that they missed the predicted energy savings by anywhere from 5 to 28 percent.\u00a0In Britain,  an evaluation of 50 \u201cleading-edge modern buildings,\u201d from supermarkets to health care centers, reported that they \u201cwere routinely using up to 3.5 times more energy than their design had allowed for\u201d \u2014 and producing on average 3.8 times the predicted carbon emissions\n    The performance gap is \u201ca vast, terrible enormous problem,\u201d in the words of one building technology specialist, and that\u2019s not an exaggeration.\u00a0 Though much of the public concern about energy consumption and climate change focuses on automotive miles-per-gallon, the entire transport sector \u2014 including trains, planes, ships, trucks, and cars \u2014 accounts for just 26 percent of U.S. climate change emissions.\u00a0 Buildings come in at 40 percent, and they are the fastest growing source of emissions, according to the U.S. Green Building Council.\n Eliminating the performance gap matters particularly for European Union nations, which have a legally binding commitment to  reduce emissions by 80 to 95 percent below 1990 levels by mid-century.\u00a0 But knowing with confidence what savings will result matters for anybody trying to figure out how much to invest in a particular energy improvement.\n Researchers have generally blamed the performance gap on careless work by builders, overly complicated energy-saving technology, or the bad behaviors of the eventual occupants of a building.\u00a0 But in a  new study, Coley and his co-authors put much of the blame on inept energy modeling.\u00a0 The title of the study asks the provocative question \u201cAre Modelers Literate?\u201d\u00a0Even more provocatively, a  press release from the University of Bath likens the misleading claims about building energy performance to the Volkswagen emissions scandal, in which actual emissions from diesel engine cars were up to 40 times higher than \u201cthe performance promised by the car manufacturer.\u201d\n For their study, Coley and his co-authors surveyed 108 building industry professionals \u2014 architects, engineers, and energy consultants \u2014 who routinely use energy performance models.\u00a0 To keep the problem simple, the researchers asked participants to look at a typical British semi-detached home recently updated to meet current building codes. Then they asked test subjects to rank which improvements made the most difference to energy performance. Their answers had little correlation with objective reality, as determined by a study monitoring the actual energy performance of that home hour-by-hour over the course of a year. A quarter of the test subjects made judgments \u201cthat appeared worse than a person responding at random,\u201d according to the study, which concluded that the sample of modelers, \u201cand by implication the population of building modelers, cannot be considered modeling literate.\u201d\n    Predictably, that conclusion raised hackles. \u201cThe sample seems odd to me,\u201d said Evan Mills, a building technology specialist at Lawrence Berkeley National Laboratory, \u201cto include so many people who are junior in the practice, and then to be criticizing the industry at large.\u201d He noted that almost two-thirds of the 108 test subjects had five years or less experience in construction.\u00a0 But Coley and his co-authors found that even test subjects with \u201chigher-level qualifications, or having many years of experience in modeling,\u201d were no more accurate than their juniors.\n In any case, Mills acknowledged, \u201cthe performance gap is real, and we must be aware of models not properly capturing things. We have cases where modelers will come up with a savings measure that is more than the energy use of the house, because they are just working with the model,\u201d and not paying attention to the real house.\n That sort of problem \u2014 energy models showing unreasonable results \u2014 also turns up at the preliminary stage on 50 percent of projects going through the LEED certification process, said Gail Hampsmire of the U.S. Green Building Council. \u00a0 Designers have a tendency to take a \u201cblack box\u201d approach, providing whatever inputs a particular energy model requires and then accepting the outputs \u201cwithout evaluating the reasonability of those results,\u201d she said. \u201cYou always have the issue of garbage in/garbage out, and the capability of the modeler to identify whether they are getting garbage out is critical.\u201d\n So what\u2019s the fix?\u00a0 The current accreditation requirements for energy modelers are \u201cvery gentle,\u201d said Coley, but \u201cwhen you\u2019re trying to get something off the ground relatively quickly, you can\u2019t send everybody back to college for three years.\u201d In any case, the problem isn\u2019t really education in the formal sense.\n \u201cIt has to do with feedback,\u201d he said, or the lack of it. The culture of building construction says it\u2019s perfectly reasonable for architects \u2014 but not energy modelers \u2014to travel hundreds of miles to see how the actual building compares with what they designed.\u00a0 For energy modelers, there\u2019s not even an expectation that they\u2019ll get on the phone with the building manager at year one and ask how energy usage compares with the original model. As a result, said Coley, energy modeling can become like theoretical physics: \u201cYou can very easily create a whole web of theories, and then you find yourself studying the physics of your theories, not the physics of the real world.\u201d\n    The answer, he suggested, is a regulatory requirement that modelers follow up on their work by routinely checking their predictions against a building\u2019s actual energy consumption. A system of modest inducements could also make that feedback more broadly available \u2014 for instance, by promising to take three weeks off the planning permissions process for developers who commit to posting actual energy usage to an online database. The Green Building Council has begun to require that sort of reporting for projects seeking LEED certification, said Hampsmire, with an online platform now in development \u201cfor building owners to track their own performance and compare it with other buildings.\u201d\n A second problem, according to Coley, is the tendency of government agencies to require simplified energy models at the start of the design process.\u00a0 The requirements often include certain uniform assumptions about energy use, making it easier to compare one building with another.\u00a0 \u201cBecause you have to do that at the start, it becomes the default, and this sets up a kind of \u2018Alice in Wonderland\u2019 world, and it\u2019s not surprising that modelers model this artificial world.\u201d\u00a0 But at least in the United States that has become less of a problem in recent years, according to Hampsmire.\u00a0 Current building code requirements are \u201cfairly good,\u201d she said. \u201cThey don\u2019t say, \u2018Model energy use for a building occupied eight hours a day,\u2019\u201d or some other arbitrary standard. Instead, \u201cthey specifically state that all energy use has to be modeled  as anticipated.\u201d\n The takeaway from all this isn\u2019t to discredit energy modeling but to improve it.\u00a0 Builders increasingly need realistic modeling, said Coley, by people with a deep knowledge of building physics and at least as much experience with real buildings as with energy models. Without that, the result will be even more $500-million office blocks with too much glass on the southern exposure, causing everybody inside to bake on a hot summer afternoon.\u00a0 Without smart energy modeling, the result will be a world spinning even faster into out-of-control climate change.\n \u201cThis isn\u2019t rocket science,\u201d said the Berkeley Laboratory\u2019s Mills.\u00a0 But then he added, \u201cIt\u2019s harder than rocket science.\u201d", "posttime": "2021-08-08 17:49:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5efa\u7b51,\u80fd\u6e90,green", "title": "\u4e3a\u4ec0\u4e48\u7eff\u8272\u5efa\u7b51\u4e0d\u8f9c\u8d1f\u80fd\u6e90\u6548\u7387\u7684\u7092\u4f5c\uff1f", "title_en": "Why Don\u2019t Green Buildings Live Up to Hype on Energy Efficiency?", "transed": 1, "url": "https://e360.yale.edu/features/why-dont-green-buildings-live-up-to-hype-on-energy-efficiency", "via": "", "real_tags": ["\u5efa\u7b51", "\u80fd\u6e90", "green"]}, {"category": "", "categoryclass": "", "imagename": "00f0fed62dbf6f94136623a8473935d5.jpg", "infoid": 1072092, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Original Essays \u4e0d\uff0c\u77f3\u6cb9\u4e0d\u662f\u6765\u81ea\u6050\u9f99\u3002\u8fd9\u662f\u4e00\u4e2a\u6301\u4e45\u7684\u795e\u8bdd\uff0c\u6211\u7ecf\u5e38\u88ab\u95ee\u5230\u8fd9\u4e2a\u95ee\u9898\u3002\u4f60\u53ef\u80fd\u5728\u5b66\u6821\u91cc\u542c\u8bf4\u8fc7\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u5728\u4e66\u4e2d\u8bfb\u5230\u8fc7\u5b83\uff0c\u6216\u8005\u4ece\u90a3\u4e9b\u5bf9\u6211\u4eec\u661f\u7403\u7684\u6027\u8d28\u63d0\u51fa\u5f02\u8bae\u7684\u5b66\u8005\u90a3\u91cc\u5f97\u5230\u4e86\u6743\u5a01\u3002\u6700\u8fd1\uff0c\u4e00\u4e2a\u4e92\u8054\u7f51\u6a21\u56e0\u4e00\u76f4\u5728\u6d41\u884c\uff0c\u5b83\u5c55\u793a\u4e86\u4e00\u7cfb\u5217\u5c0f\u6050\u9f99\u73a9\u5177\u3002\u5957\u5370\u4e0a\u5199\u7740\uff1a\u201c\u5982\u679c\u77f3\u6cb9\u662f\u7531\u5206\u89e3\u7684\u6050\u9f99\u5236\u6210\uff0c\u5851\u6599\u662f\u7531\u77f3\u6cb9\u5236\u6210\uff0c\u90a3\u4e48\u6050\u9f99\u73a9\u5177\u662f\u7531\u771f\u6b63\u7684\u6050\u9f99\u5236\u6210\u7684\u5417\uff1f\u201d\u8fd9\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u60f3\u6cd5\uff0c\u4f46\u4e0d\u662f\u3002\u8fd9\u79cd\u8bef\u89e3\u662f\u5982\u4f55\u4ea7\u751f\u7684\uff1f\u5f88\u96be\u77e5\u9053\u3002\u957f\u671f\u4ee5\u6765\uff0c\u4eba\u4eec\u4e00\u76f4\u5728\u8003\u8651\u77f3\u6cb9\u3002\u77f3\u6cb9\u3001\u7126\u6cb9\u548c\u6ca5\u9752\u4e3a\u6211\u4eec\u524d\u5de5\u4e1a\u65f6\u4ee3\u7684\u5148\u8f88\u4eec\u6240\u719f\u77e5\uff0c\u5e76\u4ee5\u6709\u9650\u7684\u65b9\u5f0f\u88ab\u4ed6\u4eec\u4f7f\u7528\u3002 2000\u5e74\u524d\uff0c\u56db\u5ddd\u4eba\u7528\u7af9\u7ba1\u4e0a\u7684\u94c1\u5934\u94bb\u63a2\u77f3\u6cb9\u548c\u5929\u7136\u6c14\u3002\u6c14\u4f53\u901a\u8fc7\u7af9\u7ba1\u8fdb\u5165\u5bb6\u5ead\uff0c\u5728\u90a3\u91cc\u63d0\u4f9b\u70ed\u91cf\u548c\u7167\u660e\u3002\u516b\u4e16\u7eaa\u65f6\uff0c\u53e4\u8001\u7684\u5df4\u683c\u8fbe\u7684\u8857\u9053\u90fd\u662f\u7528\u5929\u7136\u6ca5\u9752\u94fa\u6210\u7684\u3002\u957f\u671f\u4ee5\u6765\uff0c\u77f3\u6cb9\u7126\u6cb9\u88ab\u7528\u6765\u5bc6\u5c01\u8239\u8236\u7684\u6728\u8239\u4f53\u3002\u4f46\u8fd9\u4e9b\u65e9\u671f\u91c7\u7528\u8005\u5e76\u6ca1\u6709\u5c06\u6050\u9f99\u4e0e\u5730\u7403\u6cb9\u6027\u4ea7\u54c1\u7684\u5f62\u6210\u8054\u7cfb\u8d77\u6765\u3002\u4ed6\u4eec\u4e0d\u77e5\u9053\u6050\u9f99\u3002\u5c3d\u7ba1\u6211\u4eec\u4eba\u7c7b\u4e00\u76f4\u751f\u6d3b\u5728\u4e00\u4e2a\u5728\u6211\u4eec\u811a\u4e0b\u7684\u5ca9\u77f3\u548c\u5316\u77f3\u4e2d\u9690\u85cf\u7740\u8fc7\u53bb\u7684\u4e16\u754c\uff0c\u4f46\u76f4\u5230\u6700\u8fd1\u6211\u4eec\u624d\u5bf9\u5730\u7403\u7684\u53e4\u8001\u8fd0\u4f5c\u89c6\u800c\u4e0d\u89c1\u3002\u6211\u4eec\u6b63\u5728\u5206\u79bb\u9176\uff0c\u6d4b\u91cf\u4e0e\u6052\u661f\u7684\u8ddd\u79bb\uff0c\u5e76\u7528\u786b\u5316\u6a61\u80f6\u5236\u9020\u8f6e\u80ce\uff0c\u7136\u540e\u6211\u4eec\u624d\u786e\u5b9a\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6709\u6050\u9f99\u7684\u60f3\u6cd5\u3002\u90a3\u53d1\u751f\u5728 1842 \u5e74\uff0c\u5f53\u65f6\u82f1\u56fd\u89e3\u5256\u5b66\u5bb6\u7406\u67e5\u5fb7\u6b27\u6587\u7235\u58eb\u5c06\u4e09\u53ea\u201c\u8725\u8734\u722c\u884c\u52a8\u7269\u201d\u7684\u9057\u9ab8\u5f52\u4e3a\u4e00\u4e2a\u65b0\u7684\u201c\u90e8\u843d\u201d\uff0c\u4ed6\u79f0\u4e4b\u4e3a\u6050\u9f99\u3002\u56e0\u6b64\uff0c\u77f3\u6cb9\u6765\u81ea\u6050\u9f99\u7684\u795e\u8bdd\u4e00\u5b9a\u662f\u73b0\u4ee3\u7684\u3002\u73b0\u4ee3\u77f3\u6cb9\u5de5\u4e1a\u7684\u8d77\u6e90\u53ef\u4ee5\u8ffd\u6eaf\u5230\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u7684\u91ce\u732b\uff0c\u4ed6\u4eec\u4e8e 1859 \u5e74\u5f00\u59cb\u5f00\u53d1\u6d45\u5c42\u963f\u5df4\u62c9\u5951\u4e9a\u6cb9\u7530\u2014\u2014\u77f3\u6cb9\u7684\u4f4e\u5782\u679c\u5b9e\u3002\u8fd9\u4e9b\u6c89\u79ef\u7269\u53ef\u4ee5\u8ffd\u6eaf\u5230\u53e4\u751f\u4ee3\uff0c\u6050\u9f99\u4e4b\u524d\u7684\u65f6\u4ee3\u3002\u4e16\u754c\u4e0a\u53ea\u6709\u5927\u7ea6 25% \u7684\u77f3\u6cb9\u53ef\u4ee5\u5728\u5982\u6b64\u53e4\u8001\u7684\u5ca9\u77f3\u4e2d\u627e\u5230\u3002\u5927\u591a\u6570\u77f3\u6cb9\uff0854%\uff09\u88ab\u53d1\u73b0\u5b58\u5728\u4e8e\u6050\u9f99\u65f6\u4ee3\u7684\u4e2d\u751f\u4ee3\u4f8f\u7f57\u7eaa\u548c\u767d\u57a9\u7eaa\u65f6\u671f\u7684\u5ca9\u77f3\u4e2d\u3002\u5e0c\u671b\u5f00\u91c7\u5730\u7403\u9ed1\u91d1\u7684\u5730\u8d28\u5b66\u5bb6\u6cbf\u7740\u5730\u5c42\u5411\u897f\u5ef6\u4f38\u5230\u5927\u5e73\u539f\u53ca\u66f4\u8fdc\u7684\u5730\u65b9\uff0c\u5230\u8fbe\u843d\u57fa\u5c71\u8109\u3001\u79d1\u7f57\u62c9\u591a\u9ad8\u539f\u4ee5\u53ca\u76c6\u5730\u548c\u5c71\u8109\uff0c\u5728\u90a3\u91cc\u5e7f\u9614\u7684\u4e2d\u751f\u4ee3\u77ff\u5e8a\u8574\u85cf\u7740\u6211\u4eec\u661f\u7403\u77f3\u6cb9\u8d22\u5bcc\u7684\u5f88\u5927\u4e00\u90e8\u5206.\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5bf9\u666e\u901a\u4eba\u8bf4\u201c\u5316\u77f3\u201d\u8fd9\u4e2a\u8bcd\uff0c\u5373\u4f7f\u662f\u5728\u201c\u5316\u77f3\u71c3\u6599\u201d\u7684\u80cc\u666f\u4e0b\uff0c\u4f60\u4f1a\u60f3\u5230\u4ec0\u4e48\uff1f\u6050\u9f99\uff01\u5316\u77f3\u71c3\u6599\u5c31\u662f\u8fd9\u6837\u2014\u2014\u4fdd\u5b58\u5728\u5ca9\u77f3\u4e2d\u7684\u53e4\u8001\u751f\u7269\u6765\u6e90\u7684\u53ef\u71c3\u7269\u3002\u4f46\u5b83\u4eec\u4e0d\u662f\u7531\u6050\u9f99\u5236\u6210\u7684\u3002\u4e16\u754c\u4e0a\u4ece\u6765\u6ca1\u6709\u8db3\u591f\u7684\u6050\u9f99\u6765\u751f\u4ea7\u5730\u7403\u4e0a\u7684\u5927\u91cf\u77f3\u6cb9\u3002\u6050\u9f99\u751f\u6d3b\u5728\u9519\u8bef\u7684\u73af\u5883\u4e2d\u3002\u4ed6\u4eec\u90fd\u662f\u9646\u751f\u751f\u7269\u3002\u77f3\u6cb9\u6765\u81ea\u8150\u70c2\u7684\u6d77\u6d0b\u751f\u7269\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60\u5bf9\u666e\u901a\u4eba\u8bf4\u201c\u5316\u77f3\u201d\u8fd9\u4e2a\u8bcd\uff0c\u5373\u4f7f\u662f\u5728\u201c\u5316\u77f3\u71c3\u6599\u201d\u7684\u80cc\u666f\u4e0b\uff0c\u4f60\u4f1a\u60f3\u5230\u4ec0\u4e48\uff1f\u6050\u9f99\uff01\u6050\u9f99\u6bd4\u4efb\u4f55\u5176\u4ed6\u751f\u7269\u90fd\u66f4\u80fd\u4ee3\u8868\u8fc7\u53bb\u3002\u5b83\u4eec\u662f\u53e4\u4ee3\u7684\u8c61\u5f81\u3002\u5f53\u66fe\u7ecf\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u706d\u7edd\u7684\u8154\u68d8\u9c7c\u88ab\u53d1\u73b0\u8fd8\u6d3b\u7740\u65f6\uff0c\u5b83\u88ab\u79f0\u4e3a\u201c\u6050\u9f99\u9c7c\u201d\u3002\u4e0e\u74e6\u52d2\u8fc8\u677e\u76f8\u540c\uff1b\u5f53\u8fd9\u79cd\u88ab\u8ba4\u4e3a\u5df2\u7ecf\u706d\u7edd\u7684\u6811\u51fa\u73b0\u5728\u6fb3\u5927\u5229\u4e9a\u7684\u68ee\u6797\u4e2d\u65f6\uff0c\u62a5\u7eb8\u79f0\u5b83\u4e3a\u201c\u6050\u9f99\u6811\u201d\u3002\u6050\u9f99\u7edf\u6cbb\u4e86 1.65 \u4ebf\u5e74\u3002\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u4f46\u4ecd\u7136\u662f\u5730\u7403\u56db\u5e74\u534a\u5386\u53f2\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5c3d\u7ba1\u6050\u9f99\u662f\u7279\u6b8a\u7684\uff0c\u4f46\u6574\u4e2a\u7fa4\u4f53\u53ea\u5360\u636e\u4e86\u5de8\u5927\u800c\u4e30\u5bcc\u7684\u751f\u547d\u4e4b\u6811\u4e0a\u7684\u4e00\u4e2a\u5206\u652f\u3002\u7136\u800c\uff0c\u6309\u7167\u4e00\u822c\u7684\u8bf4\u6cd5\uff0c\u5316\u77f3\u7b49\u540c\u4e8e\u6050\u9f99\u3002\u56e0\u6b64\uff0c\u96be\u602a\u8f9b\u514b\u83b1\u77f3\u6cb9\u516c\u53f8\u7684\u8425\u9500\u4e3b\u7ba1\u51b3\u5b9a\u5229\u7528\u8fd9\u4e9b\u6d41\u884c\u7684\u534f\u4f1a\u8fdb\u884c\u5e7f\u544a\u6d3b\u52a8\u3002 1930 \u5e74\uff0c\u8f9b\u514b\u83b1\u5f00\u59cb\u5728\u4ed6\u4eec\u7684\u8425\u9500\u6750\u6599\u4e2d\u4f7f\u7528\u96f7\u9f99\u7684\u5f62\u8c61\u3002\u4eba\u4eec\u559c\u6b22\u5b83\u3002\u7136\u540e\uff0c\u5728 1933 \u5e74\u5728\u829d\u52a0\u54e5\u4e3e\u884c\u7684\u4e16\u7eaa\u8fdb\u6b65\u4e16\u754c\u535a\u89c8\u4f1a\u4e0a\uff0c\u4ed6\u4eec\u8d5e\u52a9\u4e86\u4e00\u4e2a\u5927\u578b\u6237\u5916\u5c55\u89c8\uff0c\u5c55\u793a\u4e86\u4e5d\u53ea\u5168\u5c3a\u5bf8\u6050\u9f99\uff0c\u5b83\u4eec\u88ab\u7f6e\u4e8e\u91cd\u5efa\u7684\u4e2d\u751f\u4ee3\u666f\u89c2\u4e2d\u3002\u53cd\u5e94\u662f\u538b\u5012\u6027\u7684\u3002\u4e00\u5343\u516d\u767e\u4e07\u4eba\u76ee\u77aa\u53e3\u5446\u5730\u770b\u7740\u4ece\u5730\u7403\u4e0a\u4e00\u4e2a\u4f1f\u5927\u65f6\u4ee3\u5f52\u6765\u7684\u5de8\u517d\u3002\u5728\u300a\u8f9b\u514b\u83b1\u6050\u9f99\u4e66\u300b\uff081934 \u5e74\uff09\u4e2d\uff0c\u8fd9\u662f\u4ed6\u4eec\u53d7\u6b22\u8fce\u7684\u5c55\u89c8\u7684\u540e\u7eed\u4f5c\u54c1\uff0c\u8f9b\u514b\u83b1\u5bf9\u6050\u9f99\u4e0e\u77f3\u6cb9\u7684\u5173\u7cfb\u8fdb\u884c\u4e86\u7ec6\u81f4\u5165\u5fae\u7684\u63cf\u8ff0\uff0c\u5c06\u77f3\u6cb9\u5199\u6210\u4e00\u79cd\u7f8e\u9152\uff1a\u8f9b\u514b\u83b1\u7528\u6050\u9f99\u8c61\u5f81\u7740\u4eba\u7c7b\u7684\u5e7f\u9614\u65f6\u4ee3\u539f\u6cb9\u88ab\u63d0\u70bc\u6210 Sinclair Opaline Motor Oil \u548c Sinclair Pennsylvania Motor Oil\uff08\u603b\u7684\u6765\u8bf4\uff0c\u6700\u53e4\u8001\u7684\u539f\u6cb9\u53ef\u4ee5\u5236\u9020\u6700\u597d\u7684\u6da6\u6ed1\u6cb9\uff09\u3002\u6b63\u662f\u5728\u8fd9\u4e9b\u53f2\u524d\u751f\u7269\u7684\u6709\u751f\u4e4b\u5e74\uff0c\u5927\u81ea\u7136\u5728\u5730\u4e0b\u9187\u5316\u548c\u8fc7\u6ee4\u539f\u6cb9\uff0c\u8fd9\u4e9b\u539f\u6cb9\u88ab\u63d0\u70bc\u6210\u8f9b\u514b\u83b1\u673a\u6cb9\u3002\u5728 The Century of Progress \u53d6\u5f97\u4e00\u9e23\u60ca\u4eba\u7684\u6210\u529f\u540e\uff0cSinclair \u4ece\u672a\u653e\u5f03\u8fc7\u6050\u9f99\u7684\u5f62\u8c61\u3002\u76f4\u5230\u4eca\u5929\uff0c\u60a8\u8fd8\u53ef\u4ee5\u770b\u5230\u7eff\u8272\u7684\u8f9b\u514b\u83b1\u96f7\u9f99\u5728\u5168\u56fd\u5404\u5730\u76d1\u89c6\u71c3\u6cb9\u6cf5\u3002\u6211\u8ba4\u4e3a\uff0c\u4ed6\u4eec\u72e1\u733e\u7684\u8425\u9500\u6d3b\u52a8\u5728\u516c\u4f17\u7684\u60f3\u8c61\u4e2d\u5c06\u6050\u9f99\u4e0e\u77f3\u6cb9\u4e4b\u95f4\u7684\u8054\u7cfb\u5bc6\u5c01\u8d77\u6765\uff0c\u5c06\u9519\u8bef\u7684\u8054\u7cfb\u6df1\u5165\u5230\u51e0\u4e4e\u6bcf\u4e2a\u4eba\u7684\u8111\u6d77\u4e2d\u3002\u7cdf\u7cd5\u7684\u7ebf\u8def\u662f\u8fd9\u6837\u7684\uff1a\u77f3\u6cb9\u662f\u5316\u77f3\u71c3\u6599\uff0c\u5176\u4e2d\u5927\u90e8\u5206\u6765\u81ea\u6050\u9f99\u65f6\u4ee3\u3002\u5316\u77f3\u7b49\u4e8e\u6050\u9f99\uff0c\u56e0\u6b64\u6050\u9f99\u7b49\u4e8e\u77f3\u6cb9\u3002\u4f46\u5982\u679c\u5316\u77f3\u71c3\u6599\u4e0d\u662f\u6765\u81ea\u6050\u9f99\uff0c\u90a3\u4e48\u5b83\u6765\u81ea\u54ea\u91cc\u5462\uff1f\u6d6e\u6e38\u751f\u7269\u3002\u8fd9\u662f\u6b63\u786e\u7684\u3002\u77f3\u6cb9\u5e76\u975e\u6e90\u81ea\u5730\u7403\u4e0a\u6700\u5927\u7684\u751f\u7269\uff1b\u5b83\u4ece\u6700\u5c0f\u7684\u5f00\u59cb\u3002\u4efb\u4f55\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u5927\u90e8\u5206\u751f\u7269\u91cf\u90fd\u5305\u542b\u5728\u5176\u6700\u5351\u5fae\u7684\u6210\u5458\u4f53\u5185\uff0c\u5373\u9760\u8fd1\u98df\u7269\u94fe\u5e95\u90e8\u7684\u90a3\u4e9b\u6210\u5458\u3002\u5728\u6d77\u6d0b\u4e2d\uff0c\u8fd9\u662f\u6d6e\u6e38\u690d\u7269\uff0c\u4e5f\u79f0\u4e3a\u5fae\u85fb\u3002\u8fd9\u4e9b\u5fae\u751f\u7269\uff0c\u4e3b\u8981\u662f\u7845\u85fb\u548c\u97ad\u6bdb\u85fb\uff0c\u80fd\u591f\u5c06\u661f\u5149\u8f6c\u5316\u4e3a\u98df\u7269\u3002\u901a\u8fc7\u5149\u5408\u4f5c\u7528\uff0c\u5b83\u4eec\u4ea7\u751f\u86cb\u767d\u8d28\u3001\u8102\u80aa\u548c\u78b3\u6c34\u5316\u5408\u7269\u2014\u2014\u590d\u6742\u7684\u78b3\u57fa\u5206\u5b50\u3002\u50cf\u5927\u591a\u6570\u5fae\u5c0f\u751f\u7269\u4e00\u6837\uff0c\u5b83\u4eec\u7684\u4e16\u4ee3\u66f4\u66ff\u5f88\u5feb\u3002\u5f53\u5b83\u4eec\u5230\u671f\u65f6\uff0c\u5b83\u4eec\u5fae\u5c0f\u7684\u8eab\u4f53\u4f1a\u843d\u5230\u6d77\u5e95\uff0c\u5728\u90a3\u91cc\u5f62\u6210\u53ef\u80fd\u6709\u6570\u82f1\u91cc\u539a\u7684\u6709\u673a\u8f6f\u6ce5\u3002\u5982\u679c\u8fd9\u4e9b\u751f\u7269\u6c89\u79ef\u7269\u88ab\u8f83\u5e74\u8f7b\u7684\u6c89\u79ef\u7269\u63a9\u57cb\uff0c\u5e76\u4ee5\u6b63\u786e\u7684\u65b9\u5f0f\u52a0\u70ed\u548c\u52a0\u538b\uff0c\u53ef\u80fd\u4f1a\u5f62\u6210\u77f3\u6cb9\u548c\u5929\u7136\u6c14\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u77f3\u6cb9\u786e\u5b9e\u662f\u4e00\u79cd\u592a\u9633\u80fd\u3002\u8fd9\u53ef\u80fd\u542c\u8d77\u6765\u4e0d\u9519\uff0c\u4f46\u5e76\u975e\u65e0\u5bb3\u3002\u5f53\u6211\u4eec\u71c3\u70e7\u5b83\u65f6\uff0c\u6211\u4eec\u4ece\u53e6\u4e00\u4e2a\u65f6\u4ee3\u5438\u6536\u4e86\u88ab\u8fdc\u53e4\u6d6e\u6e38\u751f\u7269\u9694\u79bb\u7684\u78b3\uff0c\u7136\u540e\u5c06\u5176\u503e\u5012\u5230\u4eca\u5929\u7684\u5927\u6c14\u4e2d\u3002\u5728\u90a3\u91cc\uff0c\u5b83\u5438\u6536\u70ed\u91cf\uff0c\u5bfc\u81f4\u5168\u7403\u53d8\u6696\uff0c\u5e76\u4f7f\u6d77\u6d0b\u9178\u5316\u3002\u4ece\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c\u6211\u4eec\u6b63\u5728\u5c06\u53e4\u4ee3\u4e2d\u751f\u4ee3\u592a\u9633\u7684\u529b\u91cf\u52a0\u5230\u4eca\u5929\u7684\u592a\u9633\u4e0a\uff0c\u5b83\u4f7f\u6211\u4eec\u7684\u661f\u7403\u8fc7\u70ed\u3002\u6211\u76f8\u4fe1\u8fd9\u4e0d\u4f1a\u4ee4\u4eba\u9707\u60ca\uff0c\u4f46\u4e0d\u8981\u76f8\u4fe1\u60a8\u5728 Internet \u4e0a\u9605\u8bfb\u7684\u6240\u6709\u5185\u5bb9\u3002\u6050\u9f99\u73a9\u5177\u4e0d\u662f\u7531\u6050\u9f99\u5236\u6210\u7684\uff0c\u800c\u662f\u7531\u97ad\u6bdb\u85fb\u5236\u6210\u7684\uff0c\u8fd9\u4e9b\u97ad\u6bdb\u85fb\u5229\u7528\u53e6\u4e00\u4e2a\u65f6\u4ee3\u7684\u661f\u5149\u5c06\u78b3\u57fa\u5206\u5b50\u7f1d\u5408\u5728\u4e00\u8d77\uff0c\u4eca\u5929\u6211\u4eec\u5c06\u8fd9\u4e9b\u5206\u5b50\u53d8\u6210\u4e86\u5851\u6599\u3002\u5feb\u901f\u641c\u7d22\u53d1\u73b0\u7f51\u4e0a\u5b9e\u9645\u4e0a\u6709\u5851\u6599\u6d6e\u6e38\u751f\u7269\u73a9\u5177\uff0c\u7531\u6d6e\u6e38\u751f\u7269\u5236\u6210\u7684\u5851\u6599\u6d6e\u6e38\u751f\u7269\u73a9\u5177\u3002\u80af\u5c3c\u601d\u00b7\u62c9\u79d1\u74e6\u62c9 (Kenneth Lacovara) \u535a\u58eb\u53d1\u73b0\u4e86\u4e00\u4e9b\u6709\u53f2\u4ee5\u6765\u5728\u6211\u4eec\u661f\u7403\u4e0a\u884c\u8d70\u7684\u6700\u5927\u6050\u9f99\uff0c\u5305\u62ec\u8d85\u5927\u7684\u65e0\u754f\u9f99\uff0c\u5b83\u91cd\u8fbe 65 \u5428\uff0c\u91cd\u91cf\u8d85\u8fc7\u4e03\u53ea\u9738\u738b\u9f99\u3002\u901a\u8fc7\u4ed6\u7684\u4f5c\u54c1\uff0c\u5c06\u63a2\u7d22\u4e0e\u533b\u5b66\u548c\u5de5\u7a0b\u7684\u6700\u65b0\u6280\u672f\u76f8\u7ed3\u5408\uff0c\u62c9\u79d1\u74e6\u62c9\u5c06\u6050\u9f99\u63cf\u7ed8\u6210\u5145\u6ee1\u6d3b\u529b\u3001\u80fd\u5e72\u7684\u751f\u7269\u2014\u2014\u4e00\u4e2a\u65f6\u4ee3\u7684\u9002\u5e94\u6027\u5f3a\u8005\u3002\u4e3a\u4ec0\u4e48\u6050\u9f99\u5f88\u91cd\u8981\u662f\u4ed6\u7684\u7b2c\u4e00\u672c\u4e66\u3002", "note_en": "Original Essays    No, oil doesn\u2019t come from dinosaurs. It\u2019s a persistent myth and I\u2019m asked about it a lot. You may have heard this idea in school, read it in books, or taken it on authority from learned persons holding forth about the nature of our planet. Recently, an Internet meme has been bouncing around that shows a collection of small dinosaur toys. The overprinting reads, \u201cIf oil is made from decomposed dinosaurs, and plastic is made from oil, are dinosaur toys made from real dinosaurs?\u201d It\u2019s a fun idea, but no.  How did this misconception arise? It\u2019s hard to know. People have been thinking about petroleum for a long time. Oil, tar, and asphalt were known to our preindustrial forbears and used by them in limited ways. Two thousand years ago, Szechuan Chinese drilled for oil and natural gas using iron bits attached to bamboo pipes. The gas was channeled through bamboo conduits into homes where it provided heat and illumination. In the eighth century, the streets of ancient Baghdad were paved with natural asphalt. And petroleum tar has long been used to seal the wooden hulls of ships. But these early adopters did not implicate dinosaurs in the formation of the Earth\u2019s oily products. They didn\u2019t know about dinosaurs.  Although we humans have always lived in a world that secreted its past in the rocks and fossils beneath our feet, we were blind to the ancient workings of the Earth until quite recently. We were isolating enzymes, measuring the distance to stars, and making tires from vulcanized rubber before we crystallized the thought that there were dinosaurs in this world. That occurred in 1842, when British anatomist, Sir Richard Owen, grouped the remains of three \u201csaurian reptiles\u201d into a new \u201ctribe,\u201d which he called  Dinosauria. Thus, the myth that petroleum comes from dinosaurs must be a modern construct.  The modern oil industry traces its origin back to the wildcatters of Pennsylvania, who began tapping into shallow Appalachian oilfields in 1859 \u2014 the low-hanging fruit of petroleum. These deposits date all the way back to the Paleozoic Era, the age before dinosaurs. Only about 25% of the world\u2019s supply of oil can be found in rocks this old. Most petroleum, 54%, is found trapped in the rocks of the Jurassic and Cretaceous periods of the Mesozoic Era, the age of the dinosaurs. Geologists hoping to tap the Earth\u2019s black gold followed the strata out west to the Great Plains and beyond, to the Rocky Mountains, the Colorado Plateau, and the Basin and Range, where vast expanses of Mesozoic deposits host a significant percentage of our planet\u2019s petroleum wealth.  But, if you say the word &#34;fossil&#34; to the average person, even in the context of &#34;fossil fuel,&#34; what comes to mind? Dinosaurs!\nFossils fuels are just that \u2014 combustibles of ancient biological origin, preserved in rock. But they\u2019re not made of dinosaurs. There were never enough dinosaurs in the world to generate the Earth\u2019s great stores of oil. And dinosaurs lived in the wrong environment. They were all terrestrial creatures. Oil comes from decaying marine organisms. But, if you say the word &#34;fossil&#34;  to the average person, even in the context of &#34;fossil fuel,&#34; what comes to mind?  Dinosaurs!  Dinosaurs, more than any other creatures, stand in for the past. They are emblematic of the ancient. When the coelacanth fish, once thought extinct, was found alive, it was dubbed the \u201cdinosaur fish.\u201d Same with the Wollemi Pine; when the tree, thought to be extinct, turned up in Australian forests, newspapers called it the \u201cdinosaur tree.\u201d Dinosaurs reigned for 165 million years. A long time, but still a thin fraction of Earth\u2019s four and a half billion year history. And though dinosaurs were speciose, the complete group occupies but a single branch on the vast and bountiful tree of life. Nevertheless, in common parlance,  fossils equal  dinosaurs. It\u2019s no wonder, then, that marketing executives at the Sinclair Oil Corporation decided to play off of these popular associations for an ad campaign.  In 1930, Sinclair began using the image of  Brontosaurus on their marketing material. People loved it. Then, in 1933 at the Century of Progress World\u2019s Fair in Chicago, they sponsored a large outdoor exhibition, featuring nine full-size dinosaurs set into a reconstructed Mesozoic landscape. The response was overwhelming. Sixteen million people came to gawk slack-jawed at the giant beasts returned from Earth\u2019s last great age. In  The Sinclair Dinosaur Book (1934), a follow-up to their popular exhibition, Sinclair is nuanced about the relationship of dinosaurs to petroleum, writing about oil as if it were a fine wine:   Sinclair uses dinosaurs to symbolize the vast age of the crude oils which are refined into Sinclair Opaline Motor Oil and Sinclair Pennsylvania Motor Oil (by and large, the oldest crudes make the finest lubricants). It was during the lifetime of such prehistoric creatures that nature was mellowing and filtering under the earth the crude oils which are refined into Sinclair Motor Oils.\nAfter their blockbuster success at The Century of Progress, Sinclair never let go of the iconography of dinosaurs. To this day, you can find the green Sinclair  Brontosaurus watching over fuel pumps across the country. Their crafty marketing campaign, I think, sealed the link between dinosaurs and oil in the public imagination, drilling the faulty connection into the minds of nearly everyone. The bad wiring goes something like this: Oil is fossil fuel, and most of it comes from the age of the dinosaurs. Fossils equals dinosaurs, therefore dinosaurs equals oil.  But if fossil fuel does not come from dinosaurs, then where does it come from? Plankton. That\u2019s right. Petroleum does not originate with the Earth\u2019s largest organisms; it begins with its smallest. Most of the biomass in any ecosystem is contained within the bodies of its humblest members, the ones way down near the base of the food chain. In the oceans, that\u2019s phytoplankton, also known as microalgae. These microscopic organisms, mostly diatoms and dinoflagellates, are wondrously able to turn starlight into food. Through photosynthesis, they produce proteins, fats, and carbohydrates \u2014 complex carbon-based molecules. Like most tiny organisms, their generations turn over rapidly. When they expire, their minuscule bodies rain down upon the sea floor, where they form organic oozes that may be miles thick. If these biogenic deposits are buried by younger sediments, and cooked by heat and pressure in just the right way, oil and natural gas may form.  Taking the long view, petroleum is really a type of solar energy. That may sound nice, but it\u2019s not innocuous. When we burn it, we take carbon from another age, sequestered by ancient plankton, and dump it into today\u2019s atmosphere. There, it traps heat, causes global warming, and acidifies the oceans. In a sense, we\u2019re adding the power of the ancient Mesozoic Sun to today\u2019s Sun, and it\u2019s overheating our planet.  I\u2019m sure this won\u2019t come as a shock, but don\u2019t believe everything you read on the Internet. Dinosaur toys are not made from dinos, but they are made from dinoflagellates that used starlight from another era to stitch together the carbon-based molecules that today we turn into plastic. A quick search revealed that there are actually plastic plankton toys available online, plastic plankton toys made of \u2014 plankton.   Dr. Kenneth Lacovara has unearthed some of the largest dinosaurs ever to walk our planet, including the super-massive  Dreadnoughtus, which at 65 tons weighs more than seven  Tyrannosaurus rex. Through his work, blending exploration with the latest techniques from medicine and engineering, Lacovara portrays dinosaurs as vigorous, competent creatures \u2014 the adaptable champions of an age.   Why Dinosaurs Matter is his first book.", "posttime": "2021-08-08 17:49:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6765\u81ea,oil,\u6050\u9f99", "title": "\u77f3\u6cb9\u6765\u81ea\u6050\u9f99\u5417\uff1f", "title_en": "Does Oil Come from Dinosaurs?", "transed": 1, "url": "https://www.powells.com/post/original-essays/does-oil-come-from-dinosaurs", "via": "", "real_tags": ["\u6765\u81ea", "oil", "\u6050\u9f99"]}]