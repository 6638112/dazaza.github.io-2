[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1072165, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e72\u51c0\u7684 git \u63d0\u4ea4\u5386\u53f2\u901a\u5e38\u88ab\u4f4e\u4f30\uff0c\u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u5ba1\u67e5\u548c\u7406\u89e3\u672a\u6765\u7684\u53d8\u5316\uff08\u53ef\u80fd\u5728\u505c\u673a\u671f\u95f4\uff09\u975e\u5e38\u6709\u7528\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u662f\u63d0\u4ea4\u5230\u5171\u4eab\u5b58\u50a8\u5e93\u7684\u6700\u7ec8\u5386\u53f2\u8bb0\u5f55\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u5904\u7406\u4ee3\u7801\u65f6\u7684\u4e2d\u95f4\u5386\u53f2\u8bb0\u5f55\u3002\u6709\u65f6\u4e2d\u95f4\u5386\u53f2\u8db3\u4ee5\u76f4\u63a5\u63a8\u9001\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u76f8\u5f53\u7f55\u89c1\u3002\u6e05\u7406\u5386\u53f2\u8bb0\u5f55\u4e00\u5f00\u59cb\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u4e4f\u5473\uff0c\u53ea\u662f\u4e3a\u4e86\u83b7\u5f97\u5fae\u4e0d\u8db3\u9053\u7684\u7f8e\u5bb9\u6548\u679c\uff0c\u4f46\u968f\u7740\u5b9e\u8df5\uff0c\u5b83\u4f1a\u53d8\u5f97\u66f4\u5bb9\u6613\u3001\u66f4\u5feb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u6536\u96c6\u4e86\u4e00\u4e9b\u5728\u5c06 git \u63d0\u4ea4\u5386\u53f2\u53d1\u5e03\u7ed9\u5176\u4ed6\u4eba\u4e4b\u524d\u6e05\u7406\u5b83\u7684\u6280\u5de7\uff0c\u4f8b\u5982\u4ee5\u62c9\u53d6\u8bf7\u6c42\u7684\u5f62\u5f0f\u3002\u53e6\u4e00\u4e2a\u6e05\u7406\u5386\u53f2\u8bb0\u5f55\u7684\u597d\u65f6\u673a\u662f\u5728\u5408\u5e76\u4e4b\u524d\uff0c\u5982\u679c\u6211\u4eec\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u63d0\u4ea4\u6765\u5904\u7406\u5ba1\u67e5\u8bc4\u8bba\u3002\u4e0d\u8981\u5408\u5e76\u53ea\u662f\u4e3a\u4e86\u89e3\u51b3\u8bc4\u8bba\u800c\u5b58\u5728\u7684\u63d0\u4ea4\uff0c\u4fee\u590d\u539f\u59cb\u7684\u9519\u8bef\u63d0\u4ea4\u3002\u5e72\u51c0\u7684\u63d0\u4ea4\u5386\u53f2\u662f\u4ec5\u5305\u542b\u826f\u597d\u63d0\u4ea4\u7684\u5386\u53f2\u3002\u4f46\u662f\u4ec0\u4e48\u4f7f\u63d0\u4ea4\u597d\u5462\uff1f\u8fd9\u6709\u4e24\u90e8\u5206\uff0c\u63d0\u4ea4\u7684\u5185\u5bb9\u548c\u63d0\u4ea4\u63cf\u8ff0\u3002\u63d0\u4ea4\u6d88\u606f\u6709\u5f88\u591a\u6807\u51c6\uff0c\u4f46\u6211\u4e2a\u4eba\u4f7f\u7528 OTP \u63d0\u4ea4\u6307\u5357\u4f5c\u4e3a\u57fa\u7840\u3002\u7136\u540e\u6211\u5c1d\u8bd5\u5728\u6d88\u606f\u4e2d\u5305\u542b\u4efb\u4f55\u91cd\u8981\u7684\u6280\u672f\u548c\u4ea7\u54c1\u8003\u8651\u56e0\u7d20\uff0c\u4f8b\u5982\u66f4\u6539\u7684\u52a8\u673a\uff0c\u4ee5\u53ca\u6280\u672f\u4e0a\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u4f8b\u5982\u8003\u8651\u7684\u66ff\u4ee3\u5b9e\u73b0\u548c\u6743\u8861\u3002\u53c2\u89c1 Dan Carley \u7684\u60ca\u4eba\u4f8b\u5b50\u3002\u63d0\u4ea4\u7684\u5185\u5bb9\u6709\u70b9\u6a21\u7cca\uff0c\u4f46\u8fd9\u662f\u6211\u8981\u5bfb\u627e\u7684\uff1a\u6bcf\u4e2a\u63d0\u4ea4\u672c\u8eab\u90fd\u5e94\u8be5\u6709\u610f\u4e49\u3002\u63d0\u4ea4\u7684\u5927\u5c0f\u6070\u5230\u597d\u5904\uff0c\u65e0\u9700\u6dfb\u52a0\u4efb\u4f55\u5185\u5bb9\uff0c\u4e5f\u65e0\u9700\u5220\u9664\u4efb\u4f55\u5185\u5bb9\u3002\u6211\u4eec\u5e0c\u671b\u5728\u6bcf\u6b21\u63d0\u4ea4\u4e2d\u6dfb\u52a0/\u5220\u9664/\u66f4\u6539\u4e00\u4ef6\u4e8b\u3002\u5982\u679c\u6211\u4eec\u52aa\u529b\u60f3\u51fa\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u6458\u8981\uff0c\u90a3\u5c31\u6697\u793a\u6211\u4eec\u7684\u63d0\u4ea4\u8303\u56f4\u4e0d\u660e\u786e\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u5ba1\u67e5\u8005\u53ef\u4ee5\u9010\u4e2a\u63d0\u4ea4\u5ba1\u67e5\u6211\u4eec\u7684\u66f4\u6539\u3002\u6211\u4eec\u5c1d\u8bd5\u5728\u63d0\u4ea4\u4e2d\u8bb2\u8ff0\u4e00\u4e2a\u6545\u4e8b\u3002\n\u6bcf\u4e2a\u63d0\u4ea4\u90fd\u5e94\u8be5\u662f\u53ef\u8fd0\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5e94\u8be5\u80fd\u591f gitcheckout \u4efb\u4f55\u63d0\u4ea4\u5e76\u83b7\u5f97\u4e00\u4e2a\u529f\u80fd\u6027\u7684\u4ee3\u7801\u5e93\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u201cWIP\u201d\u63d0\u4ea4\u6216\u4ec5\u5728\u6700\u540e\u6062\u590d\u529f\u80fd\u7684\u63d0\u4ea4\u94fe\u3002\u8fd9\u5f88\u91cd\u8981\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4e8b\u60c5\u6a2a\u5411\u53d1\u5c55\u65f6\u6062\u590d\u6216\u56de\u6eda\u4efb\u4f55\u63d0\u4ea4\u3002 Git \u975e\u5e38\u7075\u6d3b\uff0c\u5bf9\u4e8e\u8fd9\u91cc\u63cf\u8ff0\u7684\u8bb8\u591a\u6280\u672f\uff0c\u6709\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u66f4\u5feb\u65b9\u6cd5\u3002\u6211\u6b63\u5728\u63cf\u8ff0\u591a\u6b65\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5c06\u591a\u4e2a\u5355\u72ec\u7684\u63d0\u4ea4\u4fdd\u7559\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u5408\u5e76\u4e24\u4e2a\u63d0\u4ea4\u6bd4\u62c6\u5206\u5355\u4e2a\u63d0\u4ea4\u5bb9\u6613\u5f97\u591a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6211\u8fdb\u884c\u6700\u7ec8\u7684\u4ea4\u4e92\u5f0f rebase \u4ee5\u89e3\u51b3\u6240\u6709\u66f4\u6539\u4e4b\u524d\uff0c\u6211\u5bf9\u5386\u53f2\u8fdb\u884c\u4e86\u5927\u91cf\u4fee\u8865\uff0c\u5728\u6b64\u5904\u7ed3\u5408\u4e86\u5176\u4e2d\u7684\u51e0\u79cd\u6280\u672f\u3002\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5728\u4e2d\u9014\u6539\u53d8\u4e3b\u610f\uff0c\u800c\u4e0d\u4f1a\u5728\u64a4\u6d88\u4efb\u4f55\u4e8b\u60c5\u65f6\u9047\u5230\u4efb\u4f55\u9ebb\u70e6\u3002\u6211\u4eec\u8fd8\u5c06\u6240\u6709\u6807\u5fd7\u7684\u957f\u7248\u7528\u4e8e\u6559\u80b2\u76ee\u7684\u3002\u6709\u5173\u7b80\u77ed\u7248\u672c\uff0c\u8bf7\u53c2\u9605\u624b\u518c\u9875\u3002\u4ea4\u4e92\u5f0f\u53d8\u57fa\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u7528\u4e8e\u6267\u884c\u8bb8\u591a\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u907f\u514d\u8bb0\u4f4f\u8bb8\u591a\u5176\u4ed6\u4e13\u95e8\u4e3a\u505a\u4e00\u4ef6\u4e8b\u800c\u91cf\u8eab\u5b9a\u5236\u7684\u547d\u4ee4\u3002\u5b83\u901a\u5e38\u4e5f\u4e0d\u540c\u4e8e\u5e38\u89c4\u7684\u53d8\u57fa\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u63d0\u4ea4\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u57fa\u7840\u4e0a\uff08\u56e0\u6b64\u53d8\u57fa\uff09\u3002\u5f53\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u53d8\u57fa\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u7f16\u8f91 HEAD \u548c &lt;ref&gt; \u4e4b\u95f4\u7684\u6240\u6709\u63d0\u4ea4\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9 &lt;ref&gt; \u4f5c\u4e3a\u6211\u4eec\u8981\u7f16\u8f91\u7684\u8303\u56f4\u7684\u53e6\u4e00\u7aef\u3002\u5f53\u60a8\u542f\u52a8\u4ea4\u4e92\u5f0f\u53d8\u57fa\u65f6\uff0c\u5c06\u5728 $EDITOR \u4e2d\u6253\u5f00\u4e00\u4e2a\u7279\u6b8a\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u53d8\u57fa\u8303\u56f4\u5185\u7684\u6240\u6709\u63d0\u4ea4\u548c\u5bf9\u5b83\u4eec\u7684\u64cd\u4f5c\u3002 Git \u5c06\u5728\u63cf\u8ff0\u53ef\u7528\u64cd\u4f5c\u7684\u5217\u8868\u4e0b\u65b9\u63d2\u5165\u4e00\u4e2a\u6307\u5357\u3002\u4e00\u65e6\u6211\u4eec\u5bf9\u884c\u52a8\u611f\u5230\u6ee1\u610f\uff0c\u6211\u4eec\u5c31\u4f1a\u786e\u8ba4\u8ba1\u5212\u5e76\u89e3\u51b3\u884c\u52a8\u3002\u60f3\u60f3\u68cb\u76d8\u6e38\u620f\u6216\u7eb8\u724c\u6e38\u620f\u3002\u867d\u7136\u6211\u9f13\u52b1\u5728\u63d0\u4ea4\u65f6\u76f4\u63a5\u7f16\u5199\u5b8c\u6574\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u65e9\u671f\u63d0\u4ea4\u6d88\u606f\u8fdb\u884c\u6dfb\u52a0\u6216\u66f4\u6539\u3002\u8981\u4ec5\u66f4\u6539\u73b0\u6709\u63d0\u4ea4\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a\n\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u521b\u5efa\u9644\u52a0\u5230\u6211\u4eec\u5386\u53f2\u8bb0\u5f55\u672b\u5c3e\u7684\u9644\u52a0\u201c\u4fee\u590d\u63d0\u4ea4\u201d\u3002\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u901a\u8fc7\u5176\u6807\u9898\u94fe\u63a5\u5230\u53e6\u4e00\u4e2a\u63d0\u4ea4\u3002\u4e3a\u4e86\u5b9e\u9645\u5c06\u4e24\u8005\uff08\u6216\u66f4\u591a\uff09\u7ed3\u5408\u8d77\u6765\uff0c\u6211\u4eec\u4f7f\u7528\uff1a \u8fd9\u5e94\u8be5\u8bbe\u7f6e\u4ea4\u4e92\u5f0f rebase \u6765\u505a\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u901a\u8fc7\u4fdd\u5b58\u548c\u5173\u95ed\u6587\u4ef6\u6765\u786e\u8ba4\u5efa\u8bae\u7684\u64cd\u4f5c\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2a\u63d0\u4ea4\uff0c\u7136\u540e\u6ce8\u610f\u5230\u8fd9\u4e2a\u63d0\u4ea4\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u5c0f\u6539\u52a8\u3002\u6211\u4eec\u53ea\u60f3\u4fee\u590d\u73b0\u6709\u7684\u63d0\u4ea4\uff0c\u800c\u4e0d\u662f\u7f16\u5199\u65b0\u7684\u63d0\u4ea4\u3002\u53ea\u9700\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\uff1a\u5982\u679c\u6211\u4eec\u4ec5\u5728\u6dfb\u52a0\u5176\u4ed6\u63d0\u4ea4\u540e\u624d\u53d1\u73b0\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u8981\u8ffd\u6eaf\u6dfb\u52a0\u5bf9\u8f83\u65e9\u63d0\u4ea4\u7684\u66f4\u6539\uff0c\u5219\u6b64\u547d\u4ee4\u53d8\u4e3a\uff1a \u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8fd9\u5c06\u521b\u5efa\u53ef\u4ee5\u4e0e\u4ea4\u4e92\u5f0f\u53d8\u57fa\u7ed3\u5408\u7684\u4fee\u590d\u63d0\u4ea4\u548c --autosquash \u6807\u5fd7\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u5386\u53f2\u8bb0\u5f55\u4e2d\u5df2\u6709\u7684\u4e24\u4e2a\u63d0\u4ea4\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ea4\u4e92\u5f0f rebase\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u79fb\u5230\u7b2c\u4e00\u4e2a\u63d0\u4ea4\u4e4b\u540e\uff0c\u7136\u540e\u9009\u62e9\u538b\u7f29\u9009\u9879\u3002\u5728\u89e3\u51b3 rebase \u65f6\uff0cgit \u5c06\u5728\u6b64\u65f6\u505c\u6b62\u5e76\u4e3a\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u7ec4\u5408\u63d0\u4ea4\u6d88\u606f\u3002\u6211\u4eec\u80af\u5b9a\u8981\u7f16\u8f91\u8fd9\u4e2a\uff0c\u800c\u4e0d\u662f\u575a\u6301\u4f7f\u7528\u4e24\u6761\u539f\u59cb\u6d88\u606f\u7684\u9ed8\u8ba4\u8fde\u63a5\u3002\n\u5982\u679c\u6211\u4eec\u60f3\u66f4\u6539\u63d0\u4ea4\u7684\u987a\u5e8f\uff0c\u60a8\u5df2\u7ecf\u731c\u5230\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u4e92\u5f0f rebase \u6765\u5b9e\u73b0\uff0c\u53ea\u9700\u66f4\u6539\u5217\u8868\u4e2d\u63d0\u4ea4\u7684\u987a\u5e8f\u5373\u53ef\u3002\u5982\u679c\u4e00\u4e2a\u63d0\u4ea4\u7ed3\u679c\u5305\u542b\u51e0\u4e2a\u72ec\u7acb\u7684\u66f4\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u62c6\u5206\u63d0\u4ea4\u4ee5\u9694\u79bb\u8fd9\u4e9b\u66f4\u6539\u3002\u6211\u4eec\u518d\u6b21\u4f7f\u7528\u4ea4\u4e92\u5f0f\u53d8\u57fa\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u4e3a\u8981\u62c6\u5206\u7684\u63d0\u4ea4\u9009\u62e9\u7f16\u8f91\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u5230\u8fbe\u6b64\u63d0\u4ea4\u65f6\uff0c\u8fd9\u5c06\u5bfc\u81f4 rebase \u6682\u505c\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u589e\u91cf\u6dfb\u52a0\u6587\u4ef6\u7684\u90e8\u5206\u3002\u8fd9\u5728\u7f16\u8f91\u73b0\u6709\u6587\u4ef6\u65f6\u6548\u679c\u6700\u597d\uff0c\u56e0\u4e3a\u8865\u4e01\u754c\u9762\u6709\u70b9\u7f3a\u4e4f\uff0c\u4f46\u5b83\u6709\u6548\u3002\u90a3\u91cc\u7684 Emacs \u7528\u6237\u53ef\u80fd\u4f1a\u719f\u6089\u975e\u5e38\u51fa\u8272\u7684 Magit \u754c\u9762\uff0c\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u5bf9\u5404\u4e2a\u884c\u8fdb\u884c\u5206\u6bb5\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u65b0\u7684\u63d0\u4ea4\u3002\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u521b\u5efa\u65b0\u63d0\u4ea4\u66ff\u6362\u65e7\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u679c\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u6709\u4e00\u4e2a\u6211\u4eec\u51b3\u5b9a\u4e0d\u518d\u9700\u8981\u7684\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u5220\u9664\u5b83\u3002\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u6240\u505a\u7684\u66f4\u6539\uff0c\u4f46\u540e\u6765\u610f\u8bc6\u5230\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\uff0c\u6216\u8005\u7c7b\u4f3c\u4e8e GitHub\u201c\u66f4\u65b0\u5206\u652f\u201d\u5408\u5e76\u63d0\u4ea4\u566a\u97f3\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4ea4\u4e92\u5f0f rebase \u5e76\u4e3a\u76f8\u5173\u63d0\u4ea4\u9009\u62e9\u653e\u7f6e\u64cd\u4f5c\u3002 git \u624b\u518c\u9875\u6309\u547d\u4ee4\u62c6\u5206\uff0c\u56e0\u6b64\u6709\u5173 gitrebase \u7684\u6587\u6863\uff0c\u8bf7\u67e5\u770b man git-rebase\u3002\u624b\u518c\u9875\u5f88\u597d\uff0c\u4f46\u66f4\u591a\u7684\u662f\u53c2\u8003\u800c\u4e0d\u662f\u4f7f\u7528\u6307\u5357\u3002\n\u54e6\u8be5\u6b7b\uff0c\u5409\u7279\uff01\uff1f\uff01\u6709\u4e00\u4e2a\u4ee4\u4eba\u96be\u5fd8\u7684\u57df\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u5728\u53d1\u751f\u5927\u91cf git \u4e8b\u6545\u540e\u8fdb\u884c\u81ea\u6551\u7684\u4fe1\u606f\u3002", "note_en": "A clean git commit history is often underrated and can be immensely useful to ease code reviews and understand changes in the future (potentially in the midst of an outage).\n Of course we are talking about the final history here as committed to the shared repository, not the intermediate history while we are working on the code. Sometimes the intermediate history is good enough to be pushed directly, but this is actually fairly rare.\n Cleaning up the history might seem tedious at first for marginal cosmetic benefits, but it gets much easier and faster with practice. Here I am collecting some tips for cleaning up a git commit history before publishing it to others, for example in the form of a pull request.    Another good time to clean up the history is before merging, if we have added additional commits to address review comments. Don\u2019t merge commits that just exist to address comments, fix the original bad commits.\n  A clean commit history is one that is comprised only of good commits. But what makes a commit good? There are two parts to this, the content of the commit, and the commit description.\n There are many standards for commit messages, but I personally use the  OTP commit guidelines as the base. I then try to include any important technical and product consideration in the message, such as the motivation for the change, and maybe technical nuances such as alternative implementations considered and tradeoffs. See  Dan Carley\u2019s amazing example.\n The content of the commit is a bit more fuzzy, but here is what I am looking for:\n Every commit should make sense by itself. There is a  just right size for commits, where there is nothing to add and nothing to remove. We want to add/remove/change exactly one thing in each commit. If we are struggling to come up with a good commit summary, that is a hint that our commit is not well scoped. Ideally this means a reviewer can review our changes commit-by-commit. We try to tell a story in commits.\n Every commit should be runnable, that is we should be able to  gitcheckout any commit and get a functional code base. This means no \u201c WIP\u201d commits or commit chains that only restore functionality at the end. This is important so that we can revert or rollback to any commit if things go sideways.\n  Git is very flexible, and for many of the techniques described here there are faster ways of performing the same actions. I am describing multi-step methods which preserve several individual commits for longer, as it is much easier to combine two commits than to split a single commit.    Specifically I tinker a lot with the history, combining several of these techniques here, before I do the final interactive rebase to resolve all changes. This way I can change my mind halfway through without any trouble undoing anything.\n We are also using the long version of all flags for educational purposes. Refer to the man pages for the short versions.\n   Interactive rebase is incredibly powerful and can be used to perform many different operations. We can use it to avoid having to memorise many other commands that are specifically tailored to doing just one thing.\n It is also usually used differently from regular rebasing, where we move one or several commits onto a different base (hence rebasing). When rebasing interactively we usually want to edit all commits between  HEAD and  &lt;ref&gt; instead. Thus we need to chose  &lt;ref&gt; as the other end of the range we want to edit.\n When you start an interactive rebase, a special file will be opened in  $EDITOR with all commits in the rebase range and actions for them. Git will insert a guide below the list describing the available actions. Once we are happy with the actions, we confirm the plan and the actions resolve.    Think board games or  card games.\n  While I encourage the writing of the full commit message directly at commit time, sometimes we can think of additions or changes to earlier commit messages. To change just the commit message of an existing commit, we can use:\n  These commands create additional \u201cfixup commits\u201d which are appended to the end of our history. Each of them is linked to another commit via its title. To actually combine the two (or more), we use:\n  This should setup the interactive rebase to do the right thing, so we just confirm the actions proposed by saving and closing the file.\n  Let us assume we have written a commit, and then notice a small change necessary that falls within the scope of this commit. Instead of writing a new commit, we want to just fix up the existing commit. This is done simply by running:\n  If we notice our error only after adding additional commits, and want to retroactively add a change to an earlier commit, this command becomes:\n  Just as before, this creates fixup commits that can be combined with an interactive rebase and the  --autosquash flag.\n  If we have two already existing commits in our history that we would like to combine into a single one, we can use an interactive rebase, move the second commit after the first one if required, and select the  squash option.\n When resolving the rebase, git will stop at this point and open up a combined commit message for us. We definitely want to edit this one instead of sticking with the default concatenation of the two original messages.\n  If we want to change the order of commits, you have guessed it, we can do this with an interactive rebase and just changing the order of the commits in the list.\n  If a commit turns out to contain several independent changes, we can opt to split the commit to isolate those changes. Again we use an interactive rebase, but this time we select the  edit action for the commit we want to split. This will cause the rebase to pause when we reach this commit. At this point we want to use\n    to incrementally add sections of our files. This works best when editing existing files, as the patch interface is a bit lacking, but it works.    Emacs users out there will probably be familiar with  the vastly superior Magit interface, which allows easy staging of individual lines.   We can then use\n  to create the new commits. Once we are done creating new commits replacing the old one, we can use\n    If we find ourselves with a commit that we decide we just do not need anymore, we can simply remove it from the history. This could be a change that we made but later realised we did not need after all, or something like the GitHub \u201cupdate branch\u201d merge commit noise.\n The easiest way to do this is just using an interactive rebase and selecting the  drop action for the commit in question.\n  The git man pages are split by command, so for documentation on  gitrebase, check  man git-rebase. The man pages are good, but more of a reference than a usage guide.\n Oh Shit, Git!?! has a memorable domain and provides some information for how to perform self-rescue after a lot of git accidents.", "posttime": "2021-08-09 02:59:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "git,\u63d0\u4ea4", "title": "\u6e05\u7406 Git \u5386\u53f2\u8bb0\u5f55", "title_en": "Cleaning Up Git History", "transed": 1, "url": "https://blog.sulami.xyz/posts/cleaning-up-git-history/", "via": "", "real_tags": ["git", "\u63d0\u4ea4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072164, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1999 \u5e74\uff0cLutz Prechelt \u5728 COMMUNICATIONS OF THE ACM\uff081999 \u5e74 10 \u6708/\u7b2c 42 \u5377\uff0c\u7b2c 10 \u671f\uff09\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u5f00\u521b\u6027\u7684\u6587\u7ae0\uff0c\u540d\u4e3a Comparing Java vs. C/C++ Efficiency Differences to Interpersonal Differences\uff0c\u5373 Java VS C\uff0c\u5b83\u4f3c\u4e4e\u5177\u6709\u540e\u6765\uff082000 \u5e74 3 \u6708\uff09\u88ab\u6269\u5c55\u6210\u4e00\u7bc7\u5b8c\u6574\u7684\u8bba\u6587\uff0c\u5bf9 C\u3001C++\u3001Java\u3001Perl\u3001Python\u3001Rexx \u548c Tcl \u8fdb\u884c\u641c\u7d22/\u5b57\u7b26\u4e32\u5904\u7406\u7a0b\u5e8f\u7684\u5b9e\u8bc1\u6bd4\u8f83\uff0c\u6b64\u540e\u79f0\u4e3a Scripting VS Java/C\u3002\u5728\u90a3\u7bc7\u8bba\u6587\u4e2d\uff0c\u4ed6\u4eec\u5206\u6790\u4e86\u4e00\u9879\u7814\u7a76\u7684\u6570\u636e\uff08\u8be5\u7814\u7a76\u662f\u4e3a\u53e6\u4e00\u7bc7\u8bba\u6587\u8fd0\u884c\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff09\u5728\u8be5\u7814\u7a76\u4e2d\uff0c\u53c2\u4e0e\u8005\u88ab\u8981\u6c42\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u5305\u62ec\u5c06\u7535\u8bdd\u53f7\u7801\u7f16\u7801\u4e3a\u5b57\u5178\u4e2d\u7684\u6570\u5b57\u548c\u5355\u8bcd\u7684\u7ec4\u5408\uff0c\u5927\u6982\u662f\u4e3a\u4e86\u4f7f\u4eba\u7c7b\u66f4\u5bb9\u6613\u8bb0\u4f4f\u4ed6\u4eec\u4ee5\u540e\u53ef\u80fd\u60f3\u8981\u56de\u5fc6\u7684\u7535\u8bdd\u53f7\u7801\uff08\u8fd9\u662f\u5728\u79fb\u52a8\u7535\u8bdd\u666e\u53ca\u4e4b\u524d\u7684\u65f6\u671f\uff09\u3002\u540c\u6837\u7684\u95ee\u9898\u540e\u6765\u88ab Ron Garret\uff08\u53c8\u540d Erann Gat\uff09\u5728\u4ed6\u7684\u77ed\u8bba\u6587 Lisp \u4f5c\u4e3a Java \u7684\u66ff\u4ee3\u54c1\uff0c\u5373 Lisp VS Java\uff0c\u4ece 2000 \u5e74\u5f00\u59cb\u4f7f\u7528\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u91cd\u65b0\u5ba1\u89c6\u8fd9\u4e9b\u8bba\u6587\uff0c\u5206\u6790\u5b83\u4eec\u65b9\u6cd5\u548c\u7ed3\u8bba\uff0c\u5e76\u8bd5\u56fe\u627e\u51fa\u81ea\u8fd9\u4e9b\u6587\u7ae0\u53d1\u8868\u4ee5\u6765\u7684 21 \u5e74\u4e2d\u662f\u5426\u53d1\u751f\u4e86\u4efb\u4f55\u53d8\u5316\uff0c\u6211\u81ea\u5df1\u7f16\u5199\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5c31\u597d\u50cf\u6211\u81ea\u5df1\u53c2\u4e0e\u4e86\u5176\u4e2d\u4e00\u9879\u7814\u7a76\u4e00\u6837\u3002\u6211\u7528 Java \u7f16\u5199\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u6ca1\u6709\u7814\u7a76\u4efb\u4f55\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u4e86\u89e3\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff08\u548c Java 16\uff09\u5982\u679c\u53c2\u4e0e\u5176\u4e2d\u4f1a\u5982\u4f55\u5b8c\u6210\u3002\u4e4b\u540e\uff0c\u6211\u5206\u6790\u4e86\u5176\u4ed6\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u5e76\u5c06\u5b83\u4eec\u4e0e\u6211\u7684\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u6839\u636e\u6211\u7684\u53d1\u73b0\u548c Prechelt \u672c\u4eba\u5728\u4ed6\u7684\u8bba\u6587\u4e2d\u7684\u4e00\u4e9b\u8bc4\u8bba\uff0c\u6211\u51b3\u5b9a\u7f16\u5199\u7b2c\u4e8c\u4e2a Java \u7a0b\u5e8f\u6765\u5339\u914d\u5728\u66f4\u52a8\u6001\u7684\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u5b8c\u5168\u4e0d\u540c\u7684\u7b56\u7565\u3002\u6211\u4e5f\u5728 Rustin \u4e2d\u5b9e\u73b0\u4e86\u76f8\u540c\u7684\u7b97\u6cd5\uff0c\u4ee5\u4fbf\u4e86\u89e3\u4e00\u79cd\u975e\u5e38\u73b0\u4ee3\u7684\u7cfb\u7edf\u8bed\u8a00\u4f1a\u5982\u4f55\u505a\u3002\u8fd9\u5e94\u8be5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u76f8\u540c\u7684\u7cbe\u786e\u7b97\u6cd5\uff08\u5728\u53ef\u80fd\u7684\u8303\u56f4\u5185\uff09\u66f4\u76f4\u63a5\u5730\u6bd4\u8f83\u73b0\u4ee3\u8bed\u8a00\uff0c\u6d88\u9664\u7a0b\u5e8f\u5458\u9009\u62e9\u7684\u4e0d\u540c\u7b97\u6cd5\u53ef\u80fd\u4ea7\u751f\u7684\u6f5c\u5728\u5de8\u5927\u5dee\u5f02\u3002\nPrechelt \u7684 Java VS C \u4e2d\u4f7f\u7528\u7684\u6240\u6709\u6570\u636e\uff0c\u4ee5\u53ca Scripting VS Java/C \u4e2d\u4f7f\u7528\u7684 Java/C/C++ \u89e3\u51b3\u65b9\u6848\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u6570\u636e\uff0c\u90fd\u6765\u81ea\u5bf9\u79f0\u4e3a PSP\uff08\u4e2a\u4eba\u8f6f\u4ef6\u8fc7\u7a0b\uff09\u7684\u8f6f\u4ef6\u5f00\u53d1\u6280\u672f\u7684\u65e9\u671f\u7814\u7a76\u3002\u8fd9\u9879\u7814\u7a76\u5b9e\u9645\u4e0a\u662f\u5728 1996 \u5e74 8 \u6708\u548c 1998 \u5e74 10 \u6708\u4e4b\u95f4\u8fdb\u884c\u7684\uff01\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u53c2\u4e0e\u8005\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u662f JDK \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff01\u8be5\u7814\u7a76\u7684\u76ee\u7684\u4e0e\u7814\u7a76 Java \u548c C/C++ \u4e4b\u95f4\u7684\u5dee\u5f02\u65e0\u5173\uff0c\u800c\u662f\u7814\u7a76 PSP \u7684\u6709\u6548\u6027\uff08\u7ed3\u679c\u8868\u660e\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cPSP \u5b9e\u8df5\u8005\u5177\u6709\u66f4\u53ef\u9884\u6d4b\u3001\u66f4\u7a33\u5b9a\u7684\u6027\u80fd\uff0c\u4f46\u5de5\u4f5c\u901f\u5ea6\u4e5f\u7a0d\u6162\uff09\u3002 55 \u540d\u7814\u7a76\u751f\u53c2\u4e0e\u4e86\u8fd9\u9879\u7814\u7a76\uff0c\u5176\u4e2d 24 \u540d\u4f7f\u7528 Java\uff0c9 \u540d\u4f7f\u7528 C\uff0c13 \u540d\u4f7f\u7528 C++\uff0c\u53e6\u5916\u4e24\u540d\u4f7f\u7528Modula-2 \u548c\u540d\u4e3a Sather-K \u7684\u4e1c\u897f\uff01\u5927\u591a\u6570\u5b66\u751f\u6765\u81ea PSP \u8bfe\u7a0b\u6216 Java \u9ad8\u7ea7\u8bfe\u7a0b\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u662f Java VS C \u8bba\u6587\u6240\u57fa\u4e8e\u7684\u6570\u636e\u3002\u5b83\u5305\u62ec 24 \u4e2a\u7528 Java \u7f16\u5199\u7684\u7a0b\u5e8f\uff0c11 \u4e2a\u7528 C++ \u7f16\u5199\uff0c5 \u4e2a\u7528 C \u7f16\u5199\u3002\u63d0\u4f9b\u7ed9\u7814\u7a76\u53c2\u4e0e\u8005\u7684\u8bf4\u660e\uff0c\u7a0d\u5fae\u6539\u7f16\u4e3a Lisp VS Java \u6587\u7ae0\uff0c\u53ef\u4ee5\u5728 flownet.com \u4e0a\u627e\u5230\u3002\u6240\u6709\u7a0b\u5e8f\u90fd\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u5373\u7535\u8bdd\u53f7\u7801\u5230\u5b57\u4e32\u7684\u8f6c\u6362....\u8f6c\u6362\u662f\u7531\u5b57\u7b26\u5230\u6570\u5b57\u7684\u56fa\u5b9a\u6620\u5c04\u5b9a\u4e49\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1aejnqrwxdsyftamcivbkul opgh z0 1 1 1 2 2 2 3 3 3 4 4 5 5 6 6 6 7 7 7 8 8 8 9 9 9 \u7a0b\u5e8f\u7684\u4efb\u52a1\u662f\u627e\u5230\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\uff0c\u4f7f\u8fd9\u4e9b\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u5e8f\u5217\u4e0e\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u6570\u5b57\u5e8f\u5217\u5b8c\u5168\u5bf9\u5e94\u3002\u5fc5\u987b\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u5e76\u6253\u5370\u3002\u89e3\u51b3\u65b9\u6848\u662f\u9010\u5b57\u521b\u5efa\u7684\uff0c\u5982\u679c\u5728\u8be5\u8fc7\u7a0b\u4e2d\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u65e0\u6cd5\u63d2\u5165\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\uff0c\u5219\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u4e00\u4f4d\u6570\u5b57\u4f1a\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e2d\u3002\u8bb8\u591a\u7535\u8bdd\u53f7\u7801\u6839\u672c\u6ca1\u6709\u89e3\u51b3\u65b9\u6848.\n\u5982\u679c\u60a8\u60f3\u201c\u53c2\u4e0e\u201d\u7814\u7a76\uff0c\u8bf7\u5c3d\u53ef\u80fd\u6309\u7167\u6b64\u94fe\u63a5\u4e2d\u7ed9\u51fa\u7684\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684 GitHub \u5b58\u50a8\u5e93\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u4e0e\u6211\u7684\u548c\u5176\u4ed6\u4eba\u7684\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u5982\u4f55\u8f7b\u677e\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u6dfb\u52a0\u5230\u5f53\u524d\u57fa\u51c6\u6d4b\u8bd5\u5e76\u8fd0\u884c\u5b83\u7684\u8bf4\u660e\uff01\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u592a\u5bb9\u6613\uff0c\u4f46\u4e5f\u4e0d\u662f\u5f88\u96be\u3002\u5728\u7814\u7a76\u53d1\u8868 21 \u5e74\u540e\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u968f\u673a\u5076\u7136\u53d1\u73b0\u4e86\u5b83\uff0c\u6211\u53d1\u73b0\u5b83\u5f88\u6709\u8da3\uff0c\u60f3\u81ea\u5df1\u53c2\u4e0e\uff01\u663e\u7136\uff0c\u6211\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u3002 Ron Garret\uff08\u5f53\u65f6\u5728\u7f8e\u56fd\u5b87\u822a\u5c40\u5de5\u4f5c\uff0c\u540e\u6765\u5728\u65e9\u671f\u7684\u8c37\u6b4c\u5de5\u4f5c\uff09\u53d1\u73b0\u5b83\u5f88\u6709\u8da3\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ed6\u81ea\u5df1\u7684\u7814\u7a76\uff08\u5df2\u7ecf\u63d0\u5230\u7684 Lisp VS Java \u4e4b\u4e00\uff09\uff0c\u91cd\u7528\u540c\u6837\u7684\u95ee\u9898\uff0c\u4f46\u53ea\u8981\u6c42 Lisp \u7a0b\u5e8f\u5458\u89e3\u51b3\u5b83\u3002\u4ed6\u4ece\u4e92\u8054\u7f51\u65b0\u95fb\u7ec4\u62db\u52df\u7684\u5fd7\u613f\u8005\u90a3\u91cc\u5f97\u5230\u4e86 16 \u4e2a\u89e3\u51b3\u65b9\u6848\u3002\u751a\u81f3\u6211\u8ba4\u4e3a\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u540d\u4eba\u7684 Peter Norvig \u4e5f\u5728\u4ed6\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u4ed6\u81ea\u5df1\u7528 Common Lisp \u7f16\u5199\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u3002\u55ef\uff0c\u57fa\u672c\u4e0a\uff0cJava \u5f88\u6162\uff0c\u4f7f\u7528\u592a\u591a\u5185\u5b58\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7f16\u5199\u4e00\u4e9b\u4e1c\u897f\u81f3\u5c11\u9700\u8981\u4e0e C \u6216 C++ \u4e00\u6837\u591a\u7684\u52aa\u529b\u3002\u6b64\u5916\uff0c\u81f3\u5c11\u5728 Prechalt \u7684\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5458\u4e4b\u95f4\u7684\u5dee\u5f02\u901a\u5e38\u5927\u4e8e\u8bed\u8a00\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u4ece JDK 1.2 \u5f00\u59cb\uff0cJava \u7a0b\u5e8f\u901a\u5e38\u6bd4\u7528 C \u6216 C++ \u7f16\u5199\u7684\u7a0b\u5e8f\u6162\u5f97\u591a\u3002\u5b83\u4eec\u4e5f\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u3002\u7136\u800c\uff0c\u5373\u4f7f\u5728\u4e00\u79cd\u8bed\u8a00\u4e2d\uff0c\u7531\u4e0d\u540c\u7a0b\u5e8f\u5458\u7f16\u5199\u7684\u540c\u4e00\u7a0b\u5e8f\u7684\u5b9e\u73b0\u4e4b\u95f4\u7684\u4eba\u9645\u5dee\u5f02\uff08\u574f/\u597d\u6bd4\uff09\u4e5f\u8fdc\u5927\u4e8e Java \u548c C/C++ \u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\u3002\n...\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f16\u7a0b\u95ee\u9898\uff0c\u201c\u811a\u672c\u8bed\u8a00\u201d\uff08Perl\u3001Python\u3001Rexx\u3001Tcl\uff09\u6bd4\u4f20\u7edf\u8bed\u8a00\u66f4\u6709\u6548\u7387\u3002\u5728\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017\u65b9\u9762\uff0c\u5b83\u4eec\u901a\u5e38\u6bd4 Java \u597d\uff0c\u4e5f\u4e0d\u6bd4 C \u5dee\u591a\u5c11\u6216 C++\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7531\u4e8e\u540c\u4e00\u8bed\u8a00\u4e2d\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u5dee\u5f02\u5f80\u5f80\u5c0f\u4e8e\u5178\u578b\u5dee\u5f02\u3002 ... Lisp \u7684\u6027\u80fd\u5728\u6267\u884c\u901f\u5ea6\u4e0a\u4e0e C++ \u76f8\u5f53\u6216\u66f4\u597d ...\u5b83\u8fd8\u5177\u6709\u663e\u7740\u66f4\u4f4e\u7684\u53ef\u53d8\u6027\uff0c\u8fd9\u8f6c\u5316\u4e3a\u964d\u4f4e\u7684\u9879\u76ee\u98ce\u9669\u3002\u6b64\u5916\uff0c\u4e0e C++ \u6216 Java \u76f8\u6bd4\uff0c\u5f00\u53d1\u65f6\u95f4\u663e\u7740\u7f29\u77ed\u4e14\u53ef\u53d8\u6027\u66f4\u5c0f\u3002\u5185\u5b58\u6d88\u8017\u53ef\u4e0e Java \u76f8\u5ab2\u7f8e... Prechelt \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u7684\u5b9e\u9a8c\u8bbe\u7f6e\u548c\u53c2\u4e0e\u8005\u7684\u6982\u51b5\uff0c\u4ee5\u53ca\u6bcf\u9879\u7814\u7a76\u4e2d\u6d89\u53ca\u7684\u8bb8\u591a\u6ce8\u610f\u4e8b\u9879\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u6d4f\u89c8 PSP \u8bba\u6587\uff0c\u8fd9\u662f\u4ed6\u540e\u6765\u53d1\u8868\u7684\u6587\u7ae0\u7684\u5f00\u7aef\u3002\u8bf7\u6ce8\u610f\uff0c\u539f\u59cb\u7814\u7a76\u4e2d\u6709\u4e24\u7ec4\u4e0d\u540c\u7684\u5b66\u751f\uff1aPSP \u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u4f7f\u7528\u4e00\u79cd\u6280\u672f (PSP) \u6765\u660e\u786e\u5730\u63d0\u9ad8\u4ed6\u4eec\u7684\u5de5\u4f5c\u8d28\u91cf\uff0c\u800c\u5bf9\u7167\u7ec4\uff0c\u4e3b\u8981\u662f Java \u8bfe\u7a0b\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5fc5\u987b\u53c2\u52a0\u7814\u7a76\u3002\u5927\u591a\u6570 C/C++ \u63d0\u4ea4\u90fd\u6765\u81ea PSP \u7ec4\uff0817 VS 5\uff09\uff0c\u4f46 Java \u63d0\u4ea4\u7684\u5206\u5e03\u66f4\u5747\u5300\uff0814 VS 10\uff09\u3002\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0cPSP \u5b66\u751f\u5df2\u7ecf\u4e60\u60ef\u4e8e\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u95ee\u9898\u5e76\u8bd5\u56fe\u9632\u6b62\u4ed6\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u7f3a\u9677\uff0c\u800c\u4e14\u8fd9\u9879\u7814\u7a76\u6700\u91cd\u8981\u7684\u8981\u6c42\u662f\u4f7f\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u53ef\u9760\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528 Java \u4e0e C/C++ \u7684\u5b66\u751f\u7c7b\u578b\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\u3002\u5728 Java VS C \u4e2d\uff0cPrechalt \u751a\u81f3\u63d0\u5230\uff0c\u5e73\u5747\u800c\u8a00\uff0cJava \u7a0b\u5e8f\u5458\u5728 Java \u65b9\u9762\u7684\u7f16\u7a0b\u7ecf\u9a8c\u53ea\u6709 C/C++ \u7a0b\u5e8f\u5458\u5728 C/C++ \u65b9\u9762\u7684\u4e00\u534a\uff0c\u8fd9\u662f\u5f88\u81ea\u7136\u7684\uff0c\u56e0\u4e3a\u8fd9\u9879\u7814\u7a76\u662f\u5728 Java \u521a\u521a\u53d1\u5e03\u7684\u65f6\u5019\u8fdb\u884c\u7684\u3002\u7b2c\u4e00\u6b21\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u5728 PSP \u8bba\u6587\u548c Java VS C \u4e2d\uff0cPrechelt \u5bf9\u7814\u7a76\u7684\u5c40\u9650\u6027\u975e\u5e38\u771f\u8bda\uff0c\u9274\u4e8e\u6570\u636e\uff08\u4ee5\u53ca\u4ed6\u4eec\u4f7f\u7528 1998 \u5e74\u53d1\u5e03\u7684 Java 1.2 \u7684\u4e8b\u5b9e\uff09\uff0c\u4ed6\u7684\u7ed3\u8bba\u975e\u5e38\u53ef\u9760\u3002\u7136\u800c\uff0c\u4f7f\u7528 Scripting VS Java/C\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u6a21\u7cca\u3002\u8bf7\u6ce8\u610f\uff0cPrechelt \u518d\u6b21\u4e3a Java \u548c C/C++ \u7a0b\u5e8f\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u6570\u636e\uff0c\u4f46\u5bf9\u4e8e\u811a\u672c\u8bed\u8a00\u7ec4\uff0c\u53c2\u4e0e\u8005\u57fa\u672c\u4e0a\u662f\u5728\u4e92\u8054\u7f51\u7ec4\u4e2d\u53d1\u73b0\u7684\u968f\u673a\u4eba\u5458\uff1aPerl\u3001Python\u3001Rexx \u548c Tcl \u7a0b\u5e8f\u90fd\u662f\u540e\u671f\u63d0\u4ea4\u76841999 \u5e74\uff0c\u5728\u6211\u5728\u51e0\u4e2a Usenet \u65b0\u95fb\u7ec4\uff08comp.lang.perl.misc\u3001de.comp.lang.perl.misc\u3001comp.lang.rexx\u3001comp.lang.tcl\u3001comp. lang.tcl.announce\u3001comp.lang.python\u3001comp.lang.python.announce\uff09\u548c\u4e00\u4e2a\u90ae\u4ef6\u5217\u8868\uff08\u79f0\u4e3a\u201cFun with Perl\u201d\uff0cfwp@technofile.org\uff09\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u89e3\u51b3\u89e3\u51b3\u65b9\u6848\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u662f\u81ea\u6211\u62a5\u544a\u7684\uff0c\u811a\u672c\u8bed\u8a00\u53c2\u4e0e\u8005\u6ca1\u6709\u4ee5\u4efb\u4f55\u65b9\u5f0f\u53d7\u5230\u76d1\u63a7\uff0c\u8fd9\u4e0e\u53c2\u52a0\u7b2c\u4e00\u9879\u7814\u7a76\u7684\u53c2\u4e0e\u8005\u975e\u5e38\u4e0d\u540c\uff08\u5176\u4e2d\u8bb8\u591a\u4eba\u4e60\u60ef\u4e8e\u82b1\u66f4\u591a\u65f6\u95f4\u601d\u8003\u95ee\u9898\uff0c\u6b63\u5982 PSP \u6240\u9f13\u52b1\u7684\u90a3\u6837\uff09\u3002 Prechelt \u63d0\u5230\u811a\u672c\u7a0b\u5e8f\u5458\u62a5\u544a\u7684\u5de5\u4f5c\u65f6\u95f4\u53ef\u80fd\u4e0d\u51c6\u786e\u3002\u55ef\uff0c\u8fd9\u53ef\u80fd\u662f\u4ed6\u6240\u6709\u8bba\u6587\u4e2d\u6700\u5927\u7684\u8f7b\u63cf\u6de1\u5199\u3002\u8be5\u8bba\u6587\u53d1\u73b0\u811a\u672c\u7684\u4e2d\u4f4d\u65f6\u95f4\u4e3a 3.1 \u5c0f\u65f6\uff0c\u800c\u975e\u811a\u672c\u7ec4\u4e3a 10.0 \u5c0f\u65f6\u3002\u8bf7\u6ce8\u610f\uff0c\u6839\u636e\u60a8\u67e5\u770b\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u81ea\u6211\u62a5\u544a\u65f6\u95f4\u7684\u53c2\u4e0e\u8005\u6bd4\u5b9e\u9645\u76d1\u63a7\u7684\u53c2\u4e0e\u8005\u5feb 3 \u500d\u3002\u539f\u59cb PSP \u7814\u7a76\u4e2d\u8d85\u8fc7\u4e00\u534a\u7684\u5b66\u751f\u82b1\u8d39\u4e86\u8d85\u8fc7\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u5de5\u4f5c\u4e86\u4e00\u5929\uff0c\u4ed6\u4eec\u4e0d\u4ec5\u5728\u90a3\u4e2a\u7814\u7a76\u4e2d\u4f7f\u7528\u4e86 Java\uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u4f7f\u7528\u4e86\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u8bed\u8a00\uff08\u5c3d\u7ba1 Prechelt \u4f3c\u4e4e\u53ea\u5728\u4ed6\u540e\u6765\u7684\u8bba\u6587\u4e2d\u4f7f\u7528\u4e86 Java \u7ed3\u679c\uff09\uff01\n\u4e0d\u8fc7\uff0c\u8fd8\u6709\u4e00\u4e9b\u66f4\u6709\u8da3\u7684\u53d1\u73b0\u3002\u4f8b\u5982\uff0c\u811a\u672c\u6bd4\u975e\u811a\u672c\u77ed\u4e24\u5230\u4e09\u500d\uff0c\u7a0b\u5e8f\u53ef\u9760\u6027\u5dee\u5f02\u7684\u7ed3\u679c\u76f8\u4e92\u77db\u76fe\uff0c\u8fd9\u4e00\u53d1\u73b0\u8ba9\u8bb8\u591a\u5176\u4ed6\u7814\u7a76\u7684\u4f5c\u8005\u611f\u5230\u56f0\u60d1\uff0c\u7279\u522b\u662f\u5728\u9759\u6001 VS \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u9886\u57df\uff08\u56e0\u4e3a\u8fd9\u8868\u660e\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u5bfc\u81f4\u66f4\u53ef\u9760\u7684\u7a0b\u5e8f\uff09\u3002\u5982\u679c Prechelt \u4e3b\u8981\u662f\u76f4\u8a00\u4e0d\u8bb3\u5730\u6307\u51fa\u4ed6\u7684\u53d1\u73b0\u7684\u6ce8\u610f\u4e8b\u9879\uff0c\u90a3\u4e48 Garret \u5c31\u5c11\u5f97\u591a\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5982\u4f55\u4e3a\u4ed6\u7684\u7814\u7a76\u6536\u96c6\u6570\u636e\uff0c\u56e0\u4e3a\u9664\u4e86\u8bf4\u660e\u6211\u4eec\u5c3d\u53ef\u80fd\u590d\u5236\u539f\u59cb\u7814\u7a76\u7684\u60c5\u51b5\u5916\uff0c\u6839\u672c\u6ca1\u6709\u63cf\u8ff0\u8be5\u7a0b\u5e8f\u3002\u8003\u8651\u5230\u53c2\u4e0e\u8005\u662f\u4ece\u7f51\u7edc\u7ec4\u62db\u52df\u7684\uff0c\u6211\u6000\u7591\u53d7\u8bd5\u8005\u88ab\u76d1\u63a7\u5230\u4f4d\uff0c\u8fd9\u8ba9\u6211\u89c9\u5f97\u6536\u96c6\u7684\u5f00\u53d1\u65f6\u95f4\u6570\u636e\u5e94\u8be5\u662f\u4e00\u7c92\u76d0\u3002\u7136\u800c\uff0c\u62a5\u544a\u7684\u65f6\u95f4\u4f3c\u4e4e\u4e0e Prechelt \u7814\u7a76\u4e2d\u811a\u672c\u7f16\u5199\u7ec4\u81ea\u6211\u62a5\u544a\u7684\u65f6\u95f4\u76f8\u4f3c\uff1aLisp \u7528\u6237\u4e3a 2 \u5230 8.5 \u5c0f\u65f6\uff0cPrechelt \u7814\u7a76\u4e2d\u811a\u672c\u7f16\u5199\u7ec4\u4e3a 3 \u5230 10 \u5c0f\u65f6\u3002 ... \u4e00\u4e2a\u53e4\u8001\u7684\u7ecf\u9a8c\u6cd5\u5219\uff0c\u5b83\u8bf4\u7a0b\u5e8f\u5458\u6bcf\u5c0f\u65f6\u7684\u4ee3\u7801\u5185\u8054\u91cf\uff08LOC/\u5c0f\u65f6\uff09\u5927\u81f4\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u3002\u4ed6\u7528\u8fd9\u4e2a\u63a8\u7406\u5f97\u51fa\u7ed3\u8bba\uff0c\u5982\u679c\u8fd9\u662f\u771f\u7684\uff0c\u90a3\u4e48\u81ea\u6211\u62a5\u544a\u7684\u65f6\u95f4\u5e94\u8be5\u79bb\u73b0\u5b9e\u4e0d\u8fdc\u3002 Lisp \u5728\u8fd0\u884c\u65f6\u4f18\u4e8e Java\uff0c\u4e0e C++ \u76f8\u5ab2\u7f8e\uff0c\u5728\u7f16\u7a0b\u5de5\u4f5c\u91cf\u548c\u7ed3\u679c\u53ef\u53d8\u6027\u65b9\u9762\u90fd\u4f18\u4e8e C++\u3002\u57fa\u4e8e\u50cf Garret \u8fd9\u6837\u7684\u5c0f\u578b\u7814\u7a76\uff0c\u6211\u53d1\u73b0 Lisp \u5982\u6b64\u4f1f\u5927\u7684\u524d\u63d0\u662f\u6ca1\u6709\u6839\u636e\u7684\u3002\u5f53\u7136\uff0c\u4ed6\u53ef\u80fd\u4f1a\u7528\u81ea\u5df1\u7684\u7ecf\u5386\uff0c\u4e5f\u53ef\u80fd\u662f\u5176\u4ed6\u4eba\u7684\u8bc1\u8bcd\u6765\u5c06\u5176\u89c6\u4e3a\u4e8b\u5b9e\uff0c\u4f46\u662f\u5728\u8fd9\u6837\u7684\u8bba\u6587\u4e2d\uff0c\u60a8\u5fc5\u987b\u5728\u505a\u51fa\u8fd9\u6837\u7684\u6ed1\u52a8\u9648\u8ff0\u65f6\u63d0\u4f9b\u60a8\u7684\u6765\u6e90\u3002\u4e2a\u4eba\u611f\u89c9\u4e0d\u591f\u597d\u3002\n\u7136\u800c\uff0c\u6570\u636e\u786e\u5b9e\u8868\u660e Lisp \u7684\u751f\u4ea7\u529b\u4e0e\u5f53\u65f6\u7684\u811a\u672c\u8bed\u8a00\u4e00\u6837\u591a\uff0c\u5e76\u4e14\u901f\u5ea6\u53ef\u4e0e C \u548c C++ \u76f8\u5ab2\u7f8e\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u9879\u4e86\u4e0d\u8d77\u7684\u6210\u5c31\u3002\u6211\u5728\u9605\u8bfb\u4e00\u7bc7\u5173\u4e8e Juliain \u7684\u6587\u7ae0\u65f6\u9047\u5230\u4e86 Prechelt \u7684\u7535\u8bdd\u53f7\u7801\u95ee\u9898\uff0c\u4f5c\u8005\u8bf4\uff1a\u6211\u7684\u5fc3\u788e\u4e86\uff0c\u56e0\u4e3a Common Lisp \u662f\u4e00\u79cd\u5f88\u597d\u7684\u8bed\u8a00\uff0c\u5de5\u4f5c\u5f88\u6109\u5feb\uff0c\u4f46\u5728\u5de5\u4e1a\u754c\u51e0\u4e4e\u6ca1\u6709\u4eba\u4f7f\u7528\u5b83\u3002 Java \u4e2d\u7684\u5927\u91cf\u4ee3\u7801\uff0c\u5373\u4f7f\u5728 Lisp \u4e2d\u7f16\u5199\u4ee3\u7801\u6240\u9700\u7684\u65f6\u95f4\u66f4\u5c11**\u3002\u7a0b\u5e8f\u5458\u7684\u65f6\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\u6bd4\u673a\u5668\u7684\u65f6\u95f4\u66f4\u91cd\u8981\uff1f\u6b64\u7c7b\u58f0\u660e\u7684\u6765\u6e90\u662f Garret \u7684 Lisp VS Java\u3002\u5f53\u6211\u7b2c\u4e00\u6b21\u9605\u8bfb\u90a3\u7bc7\u8bba\u6587\u65f6\uff0c\u6211\u5bf9\u5b83\u7684\u7ed3\u8bba\u5f88\u7740\u8ff7\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u201c\u53c2\u4e0e\u201d\u8fd9\u9879\u7814\u7a76\uff0c\u770b\u770b\u4ed6\u4eec\u7684\u7ed3\u8bba\u662f\u5426\u73b0\u5b9e\uff0c\u4e5f\u8bb8 Java 16\uff08\u5199\u4f5c\u65f6\u7684\u6700\u65b0\u7248\u672c\uff09\u81f3\u5c11\u6539\u8fdb\u4e86\u4e00\u4e2a\u4e0e Common Lisp \u7684\u4f1f\u5927\u76f8\u6bd4\u4e00\u70b9\u70b9\u3002\u6211\u9605\u8bfb\u4e86 Garret \u8bba\u6587\u4e2d\u94fe\u63a5\u7684\u8bf4\u660e\uff0c\u5e76\u7acb\u5373\u5f00\u59cb\u7740\u624b\u7814\u7a76\u3002\u6211\u8bbe\u6cd5\u5728\u5927\u7ea6 1 \u5c0f\u65f6\u5185\u7f16\u5199\u4e86\u6240\u6709\u6837\u677f\u4ee3\u7801\uff08\u8bfb\u53d6\u8f93\u5165\u3001\u6e05\u7406\u5b83\u3001\u6536\u96c6\u548c\u6253\u5370\u7ed3\u679c\u3001\u57fa\u672c\u6d4b\u8bd5\uff09\u3002\u540c\u65f6\uff0c\u6211\u6b63\u5728\u51b3\u5b9a\u4f7f\u89e3\u51b3\u65b9\u6848\u9ad8\u6548\u7684\u6700\u4f73\u7b56\u7565\uff0c\u5e76\u51b3\u5b9a\u4f7f\u7528\u6211\u5df2\u7ecf\u719f\u6089\u7684 Trie \u6570\u636e\u7ed3\u6784\u3002\u6211\u53c8\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\u7684\u65f6\u95f4\uff0c\u6839\u636e\u8bf4\u660e\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u66f4\u591a\u7684\u6d4b\u8bd5\u6765\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848......\u4f46\u5b9e\u9645\u4e0a\u5b8c\u6210\u4e86\u7b97\u6cd5\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u82b1\u4e86\u6211\u66f4\u591a\u7684\u65f6\u95f4\uff08\u6211\u4e0d\u5199\u8fd9\u6837\u7684\u7b97\u6cd5\u6bcf\u5929\uff09\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u4e00\u4e2a\u6211\u65e0\u6cd5\u8f7b\u6613\u89e3\u51b3\u7684\u5c0f\u9519\u8bef\uff08\u5f53\u6211\u5728\u4efb\u4f55\u4f4d\u7f6e\u90fd\u627e\u4e0d\u5230\u5355\u8bcd\u65f6\uff0c\u6211\u8bd5\u56fe\u6ce8\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u4ec5\u5728\u6f5c\u5728\u5355\u8bcd\u7684\u5f00\u5934......\u4e00\u65e6\u627e\u5230\u539f\u56e0\uff0c\u4fee\u590d\u8d77\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff09\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4f30\u8ba1\u6211\u7684\u603b\u65f6\u95f4\u7ea6\u4e3a 3.5 \u5c0f\u65f6\u3002\u8fd9\u51e0\u4e4e\u662f Norvig \u7684\u4e24\u500d\uff0c\u4f46\u81f3\u5c11\u8ba9\u6211\u611f\u5230\u6b23\u6170\u7684\u662f\uff0c\u4e0e\u7814\u7a76\u4e2d\u7684\u5176\u4ed6\u53c2\u4e0e\u8005\u76f8\u6bd4\uff0c\u6211\u8bbe\u6cd5\u505a\u5f97\u76f8\u5f53\u597d\uff08\u540c\u6837\uff0c\u90a3\u4e9b\u88ab\u5b9e\u9645\u76d1\u63a7\u7684\u4eba\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u81ea\u6211\u62a5\u544a\u7684\u4eba\uff09\uff1a3 \u5230C/C++ \u4e3a 25 \u5c0f\u65f6\uff0cJava \u4e3a 4 \u5230 63 \u5c0f\u65f6\u3002\u672a\u53d7\u76d1\u63a7\u7684\u53c2\u4e0e\u8005\u62a5\u544a\u8bf4 Lisp \u9700\u8981 2 \u5230 8.5 \u4e2a\u5c0f\u65f6\uff0c\u811a\u672c\u8bed\u8a00\u9700\u8981\u5927\u7ea6 1 \u5230 10 \u4e2a\u5c0f\u65f6\u3002\u6211\u7684\u89e3\u51b3\u65b9\u6848\u4f7f\u7528 Java 16 \u9700\u8981 167 \u884c\u4ee3\u7801\uff0c\u800c Lisp \u7684\u8303\u56f4\u4e3a 51 \u5230 182\uff0cJava \u4e3a 107 \u5230 500+\uff0cC/C++ \u4e3a 130 \u5230 500+\uff0c\u811a\u672c\u8bed\u8a00\u5927\u7ea6\u4e3a 50 \u5230 200\u3002\u7531\u4e8e\u8ba1\u7b97\u673a\u5728\u8fc7\u53bb 21 \u5e74\u4e2d\u53d6\u5f97\u4e86\u957f\u8db3\u7684\u8fdb\u6b65\uff0c\u539f\u59cb\u8f93\u5165\u6587\u4ef6\u548c\u5b57\u5178\u592a\u5c0f\u4e86\uff0c\u65e0\u6cd5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u4e00\u79d2\u949f\u4ee5\u4e0a\uff01\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u751f\u6210\u4e00\u4e9b\u66f4\u957f\u7684\u8f93\u5165\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u6211\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6027\u80fd\u3002\u9274\u4e8e\u4f3c\u4e4e\u6ca1\u6709\u4e00\u9879\u7814\u7a76\u53d1\u5e03\u4e86\u4ed6\u4eec\u6536\u96c6\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4f7f\u7528 Peter Norvig \u7684 CLimplementation \u4f5c\u4e3a\u57fa\u51c6\u3002\u5728 Lisp VS Java \u4e2d\uff0c\u5927\u591a\u6570 Common Lisp \u89e3\u51b3\u65b9\u6848\u5177\u6709\u975e\u5e38\u76f8\u4f3c\u7684\u901f\u5ea6\u548c\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u56e0\u6b64\u6211\u8ba4\u4e3a Norvig \u7684\u5b9e\u73b0\u4e5f\u5c06\u4e0e\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u76f8\u8fd1\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a GitHub \u5b58\u50a8\u5e93\u4e0a\u9605\u8bfb\u5b8c\u6574\u7684\u8bf4\u660e\u6765\u81ea\u5df1\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5176\u4e2d\u5305\u62ec\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u7684\u5176\u4ed6\u51e0\u4e2a\uff0c\u9664\u4e86\u6211\u5bf9 Norvig \u7684 Java \u548c Rust \u89e3\u51b3\u65b9\u6848\u6240\u505a\u7684\u7aef\u53e3\u3002\n\u5728\u6211\u4eec\u8ba8\u8bba\u53ef\u7528\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u4e0d\u540c\u7b56\u7565\u540e\uff0c\u8be5\u5206\u6790\u7684\u7ed3\u679c\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u663e\u793a\u3002\u811a\u672c\u7ec4\u4e2d\u7684\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u4f7f\u7528\u4ed6\u4eec\u8bed\u8a00\u63d0\u4f9b\u7684\u5173\u8054\u6570\u7ec4\uff0c\u5e76\u5b58\u50a8\u8981\u901a\u8fc7\u5176\u6570\u5b57\u7f16\u7801\u68c0\u7d22\u7684\u5b57\u5178\u5355\u8bcd\u3002\u641c\u7d22\u7b97\u6cd5\u53ea\u662f\u5c1d\u8bd5\u4ece\u8be5\u6570\u7ec4\u4e2d\u68c0\u7d22\uff0c\u4f7f\u7528\u5f53\u524d\u624b\u673a\u5269\u4f59\u90e8\u5206\u7684\u589e\u52a0\u957f\u5ea6\u7684\u524d\u7f00number \u4f5c\u4e3akey\u3002\u627e\u5230\u7684\u4efb\u4f55\u5339\u914d\u90fd\u4f1a\u5bfc\u81f4\u7a0d\u540e\u5b8c\u6210\u65b0\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u7684\u975e\u811a\u672c\u7a0b\u5e8f\u5458\u90fd\u9009\u62e9\u4e86\u4ee5\u4e0b\u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u3002\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u53ea\u662f\u5c06\u6574\u4e2a\u5b57\u5178\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u901a\u5e38\u4ee5\u539f\u59cb\u5b57\u7b26\u5f62\u5f0f\u548c\u76f8\u5e94\u7684\u7535\u8bdd\u53f7\u7801\u8868\u793a\u5f62\u5f0f\u3002\u7136\u540e\u4ed6\u4eec\u4e3a\u8981\u7f16\u7801\u7684\u7535\u8bdd\u53f7\u7801\u7684\u6bcf\u4e2a\u6570\u5b57\u9009\u62e9\u5e76\u6d4b\u8bd5\u6574\u4e2a\u5b57\u5178\u7684\u5341\u5206\u4e4b\u4e00\uff0c\u4ec5\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6570\u5b57\u4f5c\u4e3a\u5173\u952e\u5b57\u6765\u9650\u5236\u641c\u7d22\u7a7a\u95f4\u3002\u8fd9\u5bfc\u81f4\u4e00\u4e2a\u7b80\u5355\u4f46\u6548\u7387\u4f4e\u4e0b\u7684\u89e3\u51b3\u65b9\u6848\u3002\u66f4\u590d\u6742\u7684\u60c5\u51b5\u4f7f\u7528\u4e00\u4e2a 10 \u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u67d0\u4e2a\u6570\u5b57\uff0c\u9ad8\u5ea6\u4e3a n rep \u7684\u8282\u70b9\u91cd\u53d1\u5355\u8bcd\u7684\u7b2cn\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u4ece\u6839\u5230\u8be5\u8282\u70b9\u7684\u8def\u5f84\u4ee3\u8868\u5355\u8bcd\u7684\u7f16\u53f7\u7f16\u7801\uff0c\u5219\u5c06\u5355\u8bcd\u5b58\u50a8\u5728\u8be5\u8282\u70b9\u4e0a\u3002\u8fd9\u662f\u6700\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u9700\u8981\u6bd4\u8f83\u5927\u91cf\u7684\u8bed\u53e5\u6765\u5b9e\u73b0\u6811\u7ed3\u6784\u3002\u8fd9\u4e2a\u5206\u6790\u5728\u6211\u770b\u6765\u662f\u6b63\u786e\u7684\uff01\u7ed3\u679c\u8bc1\u660e\u6211\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4ed6\u6240\u8bf4\u7684\u6700\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff08\u4ed6\u63cf\u8ff0\u4e86\u4e00\u79cd Trie \u6570\u636e\u7ed3\u6784\uff09\uff0cNorvig \u7684\u89e3\u51b3\u65b9\u6848\u6b63\u662f\u5927\u591a\u6570\u811a\u672c\u7ec4\u63d0\u51fa\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\u8fd9\u79cd\u7b56\u7565\u4e0a\u7684\u5dee\u5f02\u5bf9\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u957f\u5ea6\u53ca\u5176\u6548\u7387\u90fd\u6709\u660e\u663e\u7684\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u6bd4\u8f83\u4f7f\u7528\u5e7f\u6cdb\u4e0d\u540c\u7b56\u7565\u7684\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u771f\u6b63\u5c06\u6211\u4eec\u7684\u7ed3\u8bba\u63a8\u65ad\u4e3a\u6240\u4f7f\u7528\u8bed\u8a00\u7684\u5dee\u5f02\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u8bed\u8a00\uff0c\u4f7f\u7528 trie \u7b56\u7565\u7684\u7a0b\u5e8f\uff08\u5927\u591a\u6570\u975e\u811a\u672c\u7a0b\u5e8f\uff09\u90fd\u5c06\u6bd4\u4f7f\u7528\u5173\u8054\u6570\u7ec4\u7684\u7a0b\u5e8f\uff08\u5927\u591a\u6570\u811a\u672c\u7a0b\u5e8f\uff09\u66f4\u957f\u3002\u7136\u800c\uff0c\u6ce8\u610f\u5230\u8be5\u8bed\u8a00\u4f3c\u4e4e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5f15\u5bfc\u7a0b\u5e8f\u5458\u4f7f\u7528\u4e00\u79cd\u6216\u53e6\u4e00\u79cd\u7b56\u7565\u4ecd\u7136\u5f88\u6709\u8da3\u3002\u4e3a\u4e86\u770b\u770b\u5982\u679c\u6211\u9009\u62e9 Norvig \u7684\u7b56\u7565\u800c\u4e0d\u662f\u4f7f\u7528 Trie \u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6211\u51b3\u5b9a\u5c06\u4ed6\u7684 CL \u4ee3\u7801\u5c3d\u53ef\u80fd\u5730\u79fb\u690d\u5230 Java\u3002\u6211\u4e5f\u9488\u5bf9 Rust \u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4ee5\u4fbf\u83b7\u5f97\u7b97\u6cd5\u8fd0\u884c\u901f\u5ea6\u7684\u57fa\u51c6\uff08\u6216\u8005\u6211\u8ba4\u4e3a\uff09\u3002\n\u66f4\u65b0\uff082021 \u5e74 7 \u6708 25 \u65e5\uff09\uff1a\u6211\u73b0\u5728\u4e5f\u5728 Dartand Julia \u4e2d\u6dfb\u52a0\u4e86\u89e3\u51b3\u65b9\u6848\uff01\u8bf7\u53c2\u9605 Incl\u3002\u98de\u9556\u548c\u5305\u62ec\u3002 Julia \u6807\u7b7e\u5728\u4e0b\u9762\u94fe\u63a5\u7684\u7ed3\u679c\u4e2d\uff0c\u4ee5\u67e5\u770b\u5b83\u4eec\u7684\u8868\u73b0\u3002 Java 1 \u5b9e\u73b0\u4e86\u4e0e\u5176\u4ed6\u5b9e\u73b0\u4e0d\u540c\u7684\u7b97\u6cd5\uff08Trie\uff0c\u800c\u4e0d\u662f\u5173\u8054\u6620\u5c04\uff09\u3002\u8fd0\u884c\u5e26\u6709\u9650\u5236\u5185\u5b58\u4f7f\u7528\u7684\u6807\u5fd7\u7684 Java \u4f1a\u4f7f Java \u7ed3\u679c\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u4e0d\u4f1a\u592a\u591a\u3002\u8bf7\u53c2\u9605\u7ed3\u679c\u7535\u5b50\u8868\u683c\u4e0a\u7684\u7b2c\u4e09\u6b21\u8fd0\u884c\u4ee5\u4e86\u89e3 Java \u7ed3\u679c\u5982\u4f55\u53d8\u5316\u3002 Rust \u89e3\u51b3\u65b9\u6848\u968f\u7740\u8f93\u5165\u6570\u91cf\u7684\u589e\u52a0\u800c\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6211\u5728 Rust Discord Channel \u4e0a\u5411 Rust \u5f00\u53d1\u4eba\u5458\u8be2\u95ee\u4e86\u4e3a\u4ec0\u4e48\u5b83\u8fd9\u4e48\u6162\uff0c\u4f46\u7ecf\u8fc7\u591a\u6b21\u5efa\u8bae\uff0c\u7ed3\u679c\u5e76\u6ca1\u6709\u663e\u7740\u6539\u5584\uff08\u4e0a\u9762\u663e\u793a\u7684\u7ed3\u679c\u5305\u62ec\u4e00\u4e9b\u5efa\u8bae\uff09\u3002\u6211\u4ec0\u81f3\u751f\u6210\u4e86\u4e00\u4e2a\u706b\u7130\u56fe\u6765\u5206\u6790 Rust \u4ee3\u7801\uff0c\u4f46\u627e\u4e0d\u5230\u4efb\u4f55\u5feb\u901f\u4fee\u590d\u3002\u7f16\u8f91 (2021-07-31)\uff1a\u6211\u4e3a\u6b64\u57fa\u51c6\u7f16\u5199\u7684 Rust \u4ee3\u7801\u6709\u51e0\u4e2a\u95ee\u9898\uff0c\u6211\u51b3\u5b9a\u5728\u4e0b\u4e00\u7bc7\u535a\u6587\u4e2d\u8be6\u7ec6\u8ba8\u8bba\uff01\u5982\u679c\u60a8\u6ca1\u6709\u65f6\u95f4\uff1aRust \u53ef\u4ee5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u4f46\u5176\u4ed6\u8bed\u8a00\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u800c\u4e14\u6839\u636e\u65b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0cJava \u5b9e\u73b0\u53ef\u80fd\u6bd4 Rust \u6700\u5feb\u7684\u5b9e\u73b0\u8fd0\u884c\u5f97\u66f4\u5feb\u5e2e\u52a9\u4f7f Rust \u66f4\u5feb\u3002 Common Lisp \u53ef\u80fd\u5df2\u7ecf\u843d\u540e\u4e86\uff0c\u4f46\u8fd9\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u5b83\u6ca1\u6709\u50cf Java \u548c Rust \u5b9e\u73b0\u90a3\u6837\u4f18\u5316\u3002\u51fa\u4e4e\u610f\u6599\u7684\u662f\uff0cCommon Lisp \u662f\u603b\u4f53\u4e0a\u6700\u597d\u7684\u8bed\u8a00\uff0c\u8fd0\u884c\u901f\u5ea6\u6700\u5feb\uff0c\u9664\u4e86\u6700\u5927\u7684\u8f93\u5165\u5927\u5c0f\uff08\u5373\u4fbf\u5982\u6b64\uff0c\u5b83\u4e5f\u53ea\u88ab Java \u5b9e\u73b0\u7684\u4e0d\u540c\u7b97\u6cd5\u6253\u8d25\uff09\u5e76\u4e14\u6d88\u8017\u5f88\u5c11\u7684\u5185\u5b58\u3002\nJava \u4f3c\u4e4e\u4ecd\u7136\u6bd4\u4f4e\u7ea7\u8bed\u8a00\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e3a Rust\uff09\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\uff0c\u73b0\u5728\u751a\u81f3\u6bd4Common Lisp\uff08\u53c2\u89c1\u6211\u4e0a\u9762\u5173\u4e8e\u8c03\u6574 JVM \u5185\u5b58\u8bbe\u7f6e\u7684\u8bc4\u8bba\uff0c\u8fd9\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u5e2e\u52a9\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u3002 Rust \u89e3\u51b3\u65b9\u6848\u663e\u793a\u4e86\u8fd0\u884c\u4efb\u610f\u6570\u91cf\u7684\u8f93\u5165\u6240\u9700\u7684\u5185\u5b58\u662f\u591a\u5c11\uff08\u5bf9\u4e8e\u4efb\u4f55\u8f93\u5165\u5927\u5c0f\uff0c\u5185\u5b58\u90fd\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u662f\u9884\u671f\u7684\uff0c\u56e0\u4e3a\u52a0\u8f7d\u5b57\u5178\u4f1a\u5360\u7528\u5927\u90e8\u5206\u5185\u5b58\uff09\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\u6027\u80fd\u4e0b\u964d\u8f93\u5165\u6570\u91cf\u589e\u52a0\uff08\u89c1\u4e0a\u6587\u6ce8\u91ca\uff09\u3002\u8fd9\u4f3c\u4e4e\u8868\u660e\uff0c\u5373\u4f7f\u901f\u5ea6\u81f3\u5173\u91cd\u8981\uff0c\u4f7f\u7528 Rust \u4e5f\u53ef\u80fd\u4e0d\u4f1a\u81ea\u52a8\u83b7\u80dc\u3002 Java \u7aef\u53e3\uff08Java 2\uff09\u5bf9\u4e8e\u539f\u59cb CL \u6709 99 LOC VS 74 LOC\u3002Java \u4e2d\u7684\u5927\u591a\u6570\u989d\u5916\u884c\u5b9e\u9645\u4e0a\u6765\u81ea\u6211\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u7684\u51e0\u4e2a\u51fd\u6570\uff1a&lt;T&gt; List&lt;T&gt; append( List&lt; T&gt; list, T item ) - \u9700\u8981\u4ee5\u4fbf\u5728 Trie \u7684\u6bcf\u4e2a\u5206\u652f\u4e0b\u9012\u5f52\u800c\u4e0d\u5f71\u54cd\u5f53\u524d\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u3002 char[] removeIfNotLetterOr ......", "note_en": "In 1999,  Lutz Prechelt published a seminal article on the COMMUNICATIONS OF THE ACM (October 1999/Vol. 42, No. 10) called  Comparing Java vs. C/C++ Efficiency Differences to Interpersonal Differences,henceforth  Java VS C, which seems to have later (March 2000) been expanded into a full paper,  An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl for a search/string-processing program,henceforth  Scripting VS Java/C.\n In that paper, they analysed data from a study (which was run for another paper, as we\u2019ll see later) where participantswere asked to solve a problem consisting of encoding phone numbers into a combination ofdigits and words from a dictionary, presumably to make it easier for humans to remember phone numbers they might wantto recall later (this was in a time before mobile phones were widespread).\n The same problem was later used by  Ron Garret (aka Erann Gat) in his short paper, Lisp as an alternative to Java,henceforth  Lisp VS Java, from the year 2000.\n  In this article, I would like to revisit these papers, analyse their methodology and conclusions, andtry to find out whether anything has changed in the 21 years since those articles were published by writing my ownsolutions to the problem as if I, myself, had participated in one of the studies.\n I wrote a solution in Java without looking into any other solutions in order to find out how my solution (and Java 16)would\u2019ve done if it had participated.\n After that, I analysed some other solutions and compared them against mine. Based on my findings and some comments byPrechelt himself in his paper, I decided to write a second Java program to match a completely different strategy thatwas commonly used in the more dynamic languages. I implemented the same algorithm also in  Rustin order to get an idea of how a very modern systems-language would do.\n That should allow us to compare modern languages more directly by usingthe same exact algorithm (to the extent possible), eliminating the potentially big differences that could arise fromthe different algorithms chosen by the programmer.\n  All data used in Prechelt\u2019s  Java VS C, as well as the Java/C/C++ solutions used in  Scripting VS Java/C, come from an earlier studyon a software development technique called PSP (Personal Software Process). This study actually ran between August 1996and October 1998!\n That means that some participants were actually using the very first release of the JDK!\n The objective of that study had nothing to do with studying the differences between Java and C/C++, it was about investigatinghow effective PSP was (the results indicated that, mostly, PSP practictioners had more predictable, stable performancebut also worked a bit slower).\n 55 graduate students participated in that study, 24 of which used Java, 9 used C, 13 used C++, and the other two usedModula-2 and something called Sather-K! Most students came from either the PSP course or a Java Advanced Course.\n Nevertheless, this was the data the  Java VS C paper was based on. It included 24 programs written inJava, 11 in C++ and 5 in C.\n The instructions given to participants of the study, slightly adapted for the  Lisp VS Java article,can be found at  flownet.com.\n  All programs implement the same functionality, namely a conversion of telephone numbers into word strings....The conversion is defined by a fixed mapping of characters to digits as follows:e j n q r w x d s y f t a m c i v b k u l o p g h z0 1 1 1 2 2 2 3 3 3 4 4 5 5 6 6 6 7 7 7 8 8 8 9 9 9The task of the program is to find a sequence of words such that the sequence of charactersin these words exactly corresponds to the sequence of digits in the phone number.All possible solutions must be found and printed.The solutions are created word by word and if no word from the dictionary can be inserted at some pointduring that process, a single digit from the phone number can appear in the result at that position.Many phone numbers have no solution at all.\n If you would like to \u201cparticipate\u201d in the study, follow the instructions given in this link as closely as possible. You can thencompare your solution against mine and other\u2019s using  my GitHub repositorywhich has instructions on how to easily add your solution to the current benchmark and run it!\n This is a nice problem, not too easy, but not very hard either. I found it interesting enough to want to participatemyself after I randomly stumbled upon it on the internet, 21 years after the study was published!\n Apparently, I was not the only one. Ron Garret (who worked at Nasa at the time and later went to work at early Google)found it interesting enough to run his own study (the already mentioned  Lisp VS Java one), re-using the sameproblem but asking only Lisp programmers to solve it. He got 16 solutions from  volunteers recruited from an Internet newsgroup.\n Even  Peter Norvig, who I consider a Computer Science celebrity, posted  his own solutionto the problem, written in  Common Lisp, on his website.\n  Well, basically, that Java is slow, uses too much memory and that it takes at least as much effort as C or C++ to writesomething using it. Also, at least in Prechalt\u2019s case, that the difference between programmers is generally greaterthan the difference between languages.\n   As of JDK 1.2, Java programs are typically much slower than programs written in C or C++.They also consume much more memory.\n  However, even within one language the interpersonal differences between implementationsof the same program written by different programmers (bad/good ratio) are much largerthan the average difference between Java and C/C++.\n  ... for the given programming problem, \u201cscripting languages\u201d (Perl, Python, Rexx, Tcl)are more productive than conventional languages.In terms of run time and memory consumption, they often turn out better than Java andnot much worse than C or C++.\n  In general, the differences between languages tend to be smaller than the typical differencesdue to different programmers within the same language.\n  ... Lisp\u2019s performance is comparable to or better than C++ in execution speed ...it also has significantly lower variability, which translates into reduced project risk.Furthermore, development time is significantly lower and less variable than either C++ or Java.Memory consumption is comparable to Java...\n  Prechelt describes in detail the setup of his experiments and the profile of participants, as well as the many caveatsinvolved in each study. I highly recommend skimming through the  PSP paperthat kicked off his later publications.\n Notice that there were two different groups of students in the original study: PSP students, who had learned how touse a technique (PSP) to explicitly increase the quality of their work, and the  control group,mostly students from a Java course who were obliged to participate in the study. Most of the C/C++ submissionsoriginated from the PSP group (17 VS 5), but the Java submissions were more evenly divided (14 VS 10).\n It\u2019s important to remember that PSP students had been conditioned to spend more time analysing the problem and attemptingto prevent defects in their programs, and that the most important requirement of the study was for programs to beas reliable as possible.\n This implies some difference in the  types of students working in Java VS C/C++. In  Java VS C, Prechalt even mentionsthat  on average, the Java programmers had only half as much programming experience in Java as the C/C++ programmershad in C/C++, which is natural given that the study ran when Java had just barely been released for the first time.\n Anyway, in both the PSP paper and  Java VS C, Prechelt was very sincere about the limitations of the study andhis conclusions were pretty solid given the data (and the fact they were using Java 1.2, released in 1998).\n However, things get murkier with  Scripting VS Java/C. Notice that Prechelt uses the same data again for the Java andC/C++ programs, but for the group of scripting languages, the participants were basically random people found onearly internet groups:\n The Perl, Python, Rexx, and Tcl programs were all submitted in late 1999 by volunteers after I had posted a \u201cCall for Programs\u201d on several Usenet newsgroups (comp.lang.perl.misc, de.comp.lang.perl.misc, comp.lang.rexx, comp.lang.tcl, comp.lang.tcl.announce, comp.lang.python, comp.lang.python.announce) and one mailing list (called \u201cFun with Perl\u201d, fwp@technofile.org).\n Notice also that the time taken to solve the solutions was self-reported and the script language participants were notmonitored in any way, quite unlike those who took part in the first study (many of whom had been conditioned to spendmore time thinking about the problem, as PSP encouraged).\n Prechelt mentions that  the work times reported by the script programmers may be inaccurate. Well, this is probably thebiggest understatement in all of his papers.\n The paper finds that the scripts\u2019 median time was 3.1 hours, compared to 10.0 hours for the non-script group.\n Notice that depending on how you look at the data, you could also have concluded that the participants who self-reportedtheir times were 3 times faster than those who were actually monitored.More than half of the students in the original PSP study spent more than a working day on the problem, and they were notonly using Java in that study, but basically whatever language they wanted to use (though Prechelt seems to have onlyused the Java results in his later paper)!\n There\u2019s some more interesting findings, though. For example, the fact that scripts were two to three times shorter thannon-scripts, and that there\u2019s conflicting results regarding differences in the reliability of programs, a finding thathas been puzzling many other study\u2019s authors, specially in the area of static VS dynamically typed languages (as thatsuggests that using static types do not actually result in more reliable programs).\n If Prechelt was mostly forthcoming in pointing out caveats to his findings, Garret was much less so.\n It\u2019s unclear how the data was collected for his study as the procedure was not described at all apart from a note sayingthat  to the extent possible we duplicated the circumstances of the original study. Given that the participants wererecruited from internet groups, I doubt that the subjects were monitored in place, which makes me think that the Development time data collected should be taken with a giant grain of salt. However, the reported times do seemsimilar to the scripting group self-reported times in Prechelt\u2019s study: 2 to 8.5 hours for Lisp users, 3 to 10 forthe scripting group in Prechelt\u2019s study.\n  ... an old rule of thumb, which says that programmer productivity measured inlines of code per hour (LOC/hour) is roughly independent of the programming language.\n He uses that reasoning to conclude that, if that\u2019s true, the self-reported times should not be far from reality.\n  Lisp is superior to Java and comparable to C++ in runtime, and it is superiorto both in programming effort and variability of results.\n    Based on a small study like Garret\u2019s, I find that the premise that  Lisp is so great is unwarranted. Sure, he maybe using his own experience and perhaps others\u2019 testimonies to take that as a fact, but in a paper like that, you mustprovide your sources when making swiping statements such as this one. Personal feeling is not good enough.\n However, the data does suggest that Lisp is about as productive as the scripting languages of the day and has a speedcomparable to C and C++, which is indeed a remarkable achievement.\n  I came across Prechelt\u2019s phone number problem when reading an  article about Juliain which the author said:\n My heart was broken because Common Lisp is such a fine fine languageand it is a joy to work in and hardly anyone uses it in industry.The industry has a lot of code in Java even when it takes **much less time** to write code in Lisp.What happened to the programmer\u2019s time is more important than the machine\u2019s?\n The  source for such statement was Garret\u2019s  Lisp VS Java. I was fascinated by the conclusion of that paper whenI first read it, so I decided to \u201cparticipate\u201d in the study to see if their conclusions had been realistic and if,perhaps, Java 16 (latest version as of writing) improved at least a little bit compared to the greatnessof Common Lisp.\n I read the instructions linked from Garret\u2019s paper and immediately started working on it.\n   I managed to write all the boilerplate code (read input, clean it up, collect and print results, basic tests) in justabout 1 hour. Meanwhile, I was deciding the best strategy to make the solution efficient and decided to use a Trie data structure, which was already familiar to me.\n It took me another hour or so to write a basic solution to the problem with a few more tests based on the examplesgiven in the instructions\u2026 but actually finishing thealgorithm off, unfortunately, took me some more time (I don\u2019t write algorithms like that every day), specially becauseof a small bug that I couldn\u2019t easily figure out how to fix (I was trying to inject a digit when I could not find a word on any position, instead of only at the beginning of a potential word\u2026once the reason was found, it was trivial to fix).\n  All in all, I estimate  my total time was around 3.5 hours. That\u2019s almost twice as much as Norvig, but at least I can takesome comfort in knowing I managed to do quite well when compared with other participants in the study (again, those whowere actually monitored, and did not just self-report):  3 to 25 hours for C/C++, 4 to 63 hours for Java.\n The non-monitored participants reported between  2 to 8.5 hours for Lisp, and  around 1 to 10 hours for the scriptinglanguages.\n  My solution required  167 lines of code using Java 16, compared with a range of  51 to 182 for Lisp, 107 to 500+ for Java,  130 to 500+ for C/C++,  around 50 to 200 for the scripting languages.\n   Because computers have come a long way in the last 21 years, the original input file and dictionary were far too smallto make the programs run for more than a second! So I had to generate some longer inputsin order to get a better sense of how performant my solution was.\n Given that none of the studies seem to have published the solutions they collected, I used Peter Norvig\u2019s CLimplementation as the baseline.\n In  Lisp VS Java, most Common Lisp solutions had very similar speed and memory usage, so I assume Norvig\u2019simplementation would also be close to the others.\n You can read the full instructions to run the test yourself on this  GitHub Repository,which includes my solution, several others I found around the internet, besides the ports I did of Norvig\u2019ssolution to Java and Rust.\n The results of this analysis will be shown in the next section after we discuss the different strategies that can beused to solve the problem.\n   Most of the programmers in the script group used the associative arrays providedby their language and stored the dictionary words to be retrieved by their numberencodings.The search algorithm simply attempts to retrieve from this array, using prefixesof increasing length of the remaining rest of the current phone number as the key.Any match found leads to a new partial solution to be completed later.In contrast, essentially all of the non-script programmers chose either of the followingsolutions.In the simple case, they simply store the whole dictionary in an array, usually in boththe original character form and the corresponding phone number representation.They then select and test one tenth of the whole dictionary for each digit of the phonenumber to be encoded, using only the first digit as a key to constrain the search space.This leads to a simple, but inefficient solution.The more elaborate case uses a 10-ary tree in which each node represents a certain digit,nodes at height n representing the n-th character of a word.A word is stored at a node if the path from the root to this node represents the numberencoding of the word.This is the most efficient solution, but it requires a comparatively large number ofstatements to implement the tree construction.\n This analysis is spot on in my opinion! My solution turned out to be the one he called  the most efficient one (he\u2019s describinga  Trie data structure), Norvig\u2019s solution was exactly the one most of the script group came up with, which was easier to implement.\n This difference in strategy has obvious consequences to the length of each program, as well as its efficiency. So whenwe compare programs that use widely different strategies, we cannot really extrapolate our conclusions to differencesin the languages being used. In other words, programs that used the trie strategy (most of the non-scripting ones)are going to be longer than the ones that used associative arrays (most of the scripting ones) regardless of thelanguage used.\n However, it is still quite interesting to note that the language seems to somehow guide programmers to use one oranother strategy.\n  To see what would\u2019ve happened if I had chosen Norvig\u2019s strategy instead of using a Trie, I decided to port his CL codeas closely as possible to Java.\n I did the same thing targeting Rust as well in order to get a baseline for how fast the algorithm could go(or so I thought).\n   UPDATE (25th July 2021): I\u2019ve now added solutions in Dartand  Julia as well!See the  Incl. Dart and  Incl. Julia tabs in the results linked just below to see how they performed.\n    Java 1 implements a different algorithm (a Trie, not an associative map) than the other implementations.\n   Running Java with flags to limit memory usage brings Java results down somewhat, but not much.See  Third runs on the results spreadsheetto see how the Java results change.\n   The Rust solution gets very slow with a higher number of inputs. I asked Rust developers on the Rust Discord Channelfor help figuring out why it was so slow, but after several suggestions, the results did not improve significantly(the result shown above includes some suggestions). I even generated a flamegraph to profile the Rust code,but was unable to find any quick fix.\n EDIT (2021-07-31): the Rust code I wrote for this benchmark has several issues, which I decided to discussat length in my  next blog post!\n  If you don\u2019t have time: Rust can run much faster, but so can the other languages, and it turns out that theJava implementation might run faster than the Rust fastest implementation, according to the new benchmarksI\u2019ve run after many Rust developers came to assist in making Rust faster. Common Lisp may have fallen behind,but that\u2019s likely just because it was not nearly as optimised as the Java and Rust implementations were.\n Quite unexpectedly, Common Lisp was the best language overall, running the fastest with all but the largest input size(and even then, it was beaten only by a different algorithm implemented in Java) and consuming very little memory.\n Java still appears to consume much more memory than low-level languages (Rust in this case) and, these days, even thanCommon Lisp (see my remarks above about tweaking the JVM memory settings, which don\u2019t really help). On the other hand,it can be very fast.\n The Rust solution shows how little memory can be necessary to run through any number of inputs (the memory is the samefor any input size, which is expected as most of the memory is taken up by loading the dictionary), but has someunfortunate performance degradation with an increased number of inputs (see notes above).\n This seems to indicate that even when speed is of the essence, using Rust may not give automatic wins.\n  The  Java port ( Java 2)has 99 LOC VS 74 LOC for the  original CL.Most of the extra lines in Java are actually from a couple of functions I had to implement by hand:\n &lt;T&gt; List&lt;T&gt; append( List&lt;T&gt; list, T item ) - needed in order to recurse under each arm of the Trie without affectingthe current, partial solution.\n char[] removeIfNotLetterOr\n......", "posttime": "2021-08-09 02:58:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,c++,\u8bba\u6587,lisp,prechelt", "title": "\u91cd\u6e29 Prechelt \u6bd4\u8f83 Java\u3001Lisp\u3001C/C++ \u548c\u811a\u672c\u8bed\u8a00\u7684\u8bba\u6587", "title_en": "Revisiting Prechelt\u2019s paper comparing Java, Lisp, C/C++ and scripting languages", "transed": 1, "url": "https://renato.athaydes.com/posts/revisiting-prechelt-paper-comparing-languages.html", "via": "", "real_tags": ["java", "c++", "\u8bba\u6587", "lisp", "prechelt"]}, {"category": "", "categoryclass": "", "imagename": "ce679cb345dc8217167a24ebeda37503.png", "infoid": 1072163, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6765\u5230 Signals And Threads\uff0c\u6df1\u5165\u8ba8\u8bba\u6765\u81ea Jane Street \u7684\u6280\u672f\u5806\u6808\u7684\u6bcf\u4e00\u5c42\u3002\u6211\u662f\u7f57\u6069\u00b7\u660e\u65af\u57fa\u3002\u4eca\u5929\u6211\u4eec\u8981\u8ba8\u8bba\u4e00\u4e2a\u770b\u4f3c\u7b80\u5355\u7684\u8bdd\u9898\uff1a\u65f6\u949f\u540c\u6b65\u3002\u6211\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u6bd4\u5c1d\u8bd5\u7f16\u5199\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6765\u64cd\u7eb5\u65f6\u95f4\u6765\u8ba9\u4f60\u76f8\u4fe1\u65f6\u95f4\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u5b83\u4ee5 16 \u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u590d\u6742\uff0c\u4ece\u65f6\u533a\u5230\u95f0\u79d2\u518d\u5230\u5404\u79cd\u5176\u4ed6\u75af\u72c2\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u4e2d\u4e4b\u4e00\u8fd9\u4e2a\u4e16\u754c\u771f\u6b63\u6709\u8da3\u7684\u89d2\u843d\u662f\u5982\u4f55\u8ba9\u5927\u578b\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u65f6\u949f\u5927\u81f4\u4e00\u81f4\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u65f6\u949f\u540c\u6b65\u3002\u6240\u4ee5\u6211\u4eec\u5c06\u4e0e Chris Perl \u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ed6\u662f\u4e00\u540d\u7cfb\u7edf\u7ba1\u7406\u5458\uff0c\u81ea 2012 \u5e74\u4ee5\u6765\u4e00\u76f4\u5728 Jane Street \u5de5\u4f5c\u3002Chris \u6bd4\u6211\u66fe\u7ecf\u5408\u4f5c\u8fc7\u7684\u4efb\u4f55\u4eba\u90fd\u8981\u597d\uff0c\u5728\u6df1\u5165\u7814\u7a76\u590d\u6742\u7cfb\u7edf\u7684\u53ef\u6015\u7ec6\u8282\u5e76\u4e86\u89e3\u5b83\u4eec\u5982\u4f55\u5de5\u4f5c\u65b9\u9762\u4ee5\u53ca\u5982\u4f55\u4f7f\u5b83\u4eec\u66f4\u597d\u5730\u5de5\u4f5c\uff0c\u4ed6\u5728\u8fd9\u91cc\u505a\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u5728\u65f6\u949f\u540c\u6b65\u65b9\u9762\uff0c\u5e76\u4e14\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u91cd\u505a\u4e86\u6211\u4eec\u7684\u6574\u4e2a\u7cfb\u7edf\u6765\u8fdb\u884c\u65f6\u949f\u540c\u6b65\uff0c\u6240\u4ee5\u4ed6\u6709\u673a\u4f1a\u771f\u6b63\u5b66\u4e60\u5f88\u591a\u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u3002\u514b\u91cc\u65af\uff0c\u9996\u5148\uff0c\u60a8\u80fd\u5426\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u8ba1\u7b97\u673a\u65f6\u949f\u7684\u5de5\u4f5c\u539f\u7406\uff1f\u6240\u4ee5\uff0c\u6211\u60f3\u7c97\u7565\u7684\u8981\u70b9\u662f\u4f60\u6709\u4e00\u4e9b\u632f\u8361\u5668\uff0c\u4e00\u4e2a\u5c0f\u6676\u4f53\u6709\u6548\u5730\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4ee5\u67d0\u4e2a\u9891\u7387\u632f\u8361\uff0c\u8fd9\u9a71\u52a8\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5904\u7406\u7684\u4e2d\u65ad - \u53ef\u80fd\u6709\u5f88\u591a\u6211\u53ea\u662f\u7565\u8fc7\u8fd9\u91cc\u7684\u4e00\u4e9b\u7ec6\u8282\u2014\u2014\u4f46\u8fd9\u4f1a\u5bfc\u81f4\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u53d1\u751f\u7684\u4e2d\u65ad\u3002\u64cd\u4f5c\u7cfb\u7edf\u6b63\u5728\u4f7f\u7528\u5b83\u6765\u63a8\u5bfc\u5b83\u7684\u65f6\u95f4\u6982\u5ff5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u771f\u6b63\u9ad8\u8d28\u91cf\u7684\u632f\u8361\u5668\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b9a\u65f6\u5668\u4e2d\u65ad\u4ee5\u6b63\u786e\u7684\u901f\u7387\u53d1\u751f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5b9e\u65f6\u8ddf\u8e2a\u53ef\u80fd\u521a\u521a\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u7684\u632f\u8361\u5668\u975e\u5e38\u597d\u4e14\u975e\u5e38\u7a33\u5b9a\uff0c\u90a3\u4e48\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u975e\u5e38\u63a5\u8fd1\u6b63\u786e\u7684\u65f6\u95f4\u3002\u4f46\u4e8b\u5b9e\u662f\uff0c\u5927\u591a\u6570\u8ba1\u7b97\u673a\u90fd\u5e26\u6709\u76f8\u5f53\u7cdf\u7cd5\u7684\u632f\u8361\u5668\uff0c\u5b83\u4eec\u4f1a\u56e0\u5404\u79cd\u539f\u56e0\uff08\u4f8b\u5982\u53d1\u70ed\uff09\u6539\u53d8\u5b83\u4eec\u7684\u9891\u7387\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u4f7f\u7528\u8ba1\u7b97\u673a\u7f16\u8bd1 Linux \u5185\u6838\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u90a3\u53ef\u80fd\u4f1a\u6539\u53d8\u70ed\u91cf\u5206\u5e03\uff0c\u6539\u53d8\u9891\u7387\u632f\u8361\u5668\uff0c\u5b9e\u9645\u4e0a\u4f1a\u6539\u53d8\u4f60\u4fdd\u6301\u5b9e\u65f6\u7684\u6548\u679c\u3002\u5f53\u6211\u4eec\u5929\u771f\u5730\u5c06\u65f6\u949f\u540c\u6b65\u89c6\u4e3a\u4eba\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u5176\u89c6\u4e3a\u201c\u6211\u8981\u53bb\u8bbe\u7f6e\u6211\u7684\u65f6\u949f\u201d\u3002\u6211\u5c06\u67e5\u770b\u73b0\u5728\u7684\u65f6\u95f4\u5e76\u8c03\u6574\u6211\u7684\u65f6\u949f\u4ee5\u5339\u914d\u4efb\u4f55\u5b9e\u65f6\u65f6\u95f4\uff0c\u4f46\u60a8\u5b9e\u9645\u4e0a\u5728\u8fd9\u91cc\u8c08\u8bba\u7684\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u4f60\u8bf4\u7684\u4e0d\u4ec5\u4ec5\u662f\u8bbe\u7f6e\u73b0\u5728\u7684\u6b63\u786e\u65f6\u95f4\uff0c\u800c\u662f\u4fdd\u6301\u90a3\u4e2a\u65f6\u95f4\u6b63\u786e\uff0c\u672c\u8d28\u4e0a\u4fdd\u6301\u540c\u6b65\u524d\u8fdb\u7684\u901f\u5ea6\u3002\u6b63\u786e\u7684\u3002\u5982\u679c\u60a8\u80fd\u5728\u6240\u6709\u8ba1\u7b97\u673a\u4e2d\u4ee5\u8d85\u4fbf\u5b9c\u7684\u4ef7\u683c\u83b7\u5f97\u771f\u6b63\u3001\u771f\u6b63\u9ad8\u8d28\u91cf\u7684\u632f\u8361\u5668\uff0c\u90a3\u4e48\u60a8\u4f1a\u559c\u6b22\u5b83\uff0c\u7136\u540e\u60a8\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u5927\u91cf\u8c03\u6574\u6765\u8ba9\u5b83\u4eec\u4fdd\u6301\u6b63\u786e\u7684\u65f6\u95f4\uff0c\u4f46\u8fd9\u786e\u5b9e\u662f\u6602\u8d35\u7684\u3002\u4f60\u53ef\u4ee5\u4e70\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u53ea\u662f\u8981\u82b1\u5f88\u591a\u94b1\u3002\u56e0\u6b64\uff0c\u60a8\u8bf4\u8ba1\u7b97\u673a\u4e2d\u53d1\u751f\u7684\u70ed\u91cf\u548c\u5176\u4ed6\u5404\u79cd\u4e8b\u60c5\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u673a\u5185\u90e8\u51fa\u73b0\u8fd9\u79cd\u5411\u524d\u79fb\u52a8\u7684\u901f\u5ea6\u3002\u8fd9\u4e9b\u6709\u591a\u51c6\u786e\uff1f\u80fd\u4e0d\u80fd\u7ed9\u6211\u4e00\u79cd\u6570\u5b57\u611f\uff0c\u8fd9\u4e9b\u4e1c\u897f\u98d8\u4e86\u591a\u8fdc\uff1f\u6211\u4eec\u8fd0\u884c\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u6355\u83b7\u5176\u4e2d\u7684\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\uff0c\u6211\u4eec\u770b\u5230\u5bf9\u5b83\u4eec\u5e94\u7528\u4e86\u9891\u7387\u6821\u6b63\u7684\u673a\u5668\uff0c\u6bd4\u5982\u8bf4\uff0c\u767e\u4e07\u5206\u4e4b 50\uff0c\u8fd9\u5c31\u50cf\u6bcf\u79d2\u5fae\u79d2\uff0c\u6240\u4ee5\u5927\u7ea6\u6bcf\u79d2\u949f\u51e0\u79d2\u4e00\u5929\uff0c\u8fd9\u5c31\u662f\u4f60\u5982\u4f55\u7ed3\u675f\u6f02\u6d41\u3002\u4f46\u6211\u6562\u80af\u5b9a\uff0c\u5982\u679c\u4f60\u7684\u684c\u5b50\u5e95\u4e0b\u6709\u4e00\u4e2a\u8d85\u7ea7\u65e7\u7684\u684c\u9762\uff0c\u4f60\u4ece\u4f60\u7236\u6bcd\u90a3\u91cc\u5077\u6765\u7684\u4e1c\u897f\uff0c\u7136\u540e\u4f60\u8bd5\u56fe\u91cd\u5efa\u6210\u4e00\u4e2a Linux \u673a\u5668\uff0c\u90a3\u4e48\u4f60\u7684\u6570\u5b57\u53ef\u80fd\u6bd4\u8fd9\u66f4\u7cdf\u7cd5\u3002\u5c31\u50cf\u6765\u81ea\u77e5\u540d\u4f9b\u5e94\u5546\u7684\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684\u4e00\u4ee3\u670d\u52a1\u5668\uff0c\u60a8\u6b63\u5728\u8c08\u8bba\u5927\u7ea6\u6bcf\u79d2 50 \u5230 100 \u5fae\u79d2\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u504f\u79bb\u6821\u51c6\u3002\u597d\u7684\uff0c\u56e0\u6b64\u65f6\u949f\u540c\u6b65\u662f\u5c1d\u8bd5\u4f7f\u60a8\u5728\u6574\u4e2a\u6570\u636e\u4e2d\u5fc3\u548c\u591a\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e2d\u62e5\u6709\u7684\u6240\u6709\u65f6\u949f\u5f7c\u6b64\u540c\u6b65\u7684\u8fc7\u7a0b\u3002\u8fd9\u662f\u6b63\u786e\u7684\u601d\u8003\u65b9\u5f0f\u5417\uff1f\n\u6211\u8ba4\u540c\u3002 \u201c\u540c\u6b65\u201d\uff0c\u662f\u4e00\u79cd\u6709\u8da3\u7684\u8bf4\u6cd5\uff0c\u5bf9\u5427\uff1f\u5982\u679c\u60a8\u80fd\u591f\u7acb\u5373\u8be2\u95ee\u7f51\u7edc\u4e0a\u7684\u4e24\u4e2a\u968f\u673a\u670d\u52a1\u5668\uff0c\u5728\u540c\u4e00\u786e\u5207\u65f6\u95f4\u70b9\u662f\u4ec0\u4e48\u65f6\u95f4\uff0c\u5982\u679c\u60a8\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u795e\u5947\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4ed6\u4eec\u4f1a\u540c\u610f\u4e00\u4e9b\u76f8\u5bf9\u8f83\u5c0f\u7684\u8fb9\u9645\u9519\u8bef\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u949f\u540c\u6b65\u7684\u610f\u601d\u3002\u5982\u679c\u4f60\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u795e\u5947\u5730\u51bb\u7ed3\u65f6\u95f4\u5e76\u53bb\u8be2\u95ee\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\uff0c\u201c\u563f\u3002\u4f60\u89c9\u5f97\u73b0\u5728\u51e0\u70b9\u4e86\uff1f\u201d\u4ed6\u4eec\u90fd\u4f1a\u5728\u60a8\u53ef\u4ee5\u5b9a\u4e49\u7684\u67d0\u4e2a\u9519\u8bef\u8303\u56f4\u5185\u5927\u81f4\u540c\u610f\u3002\u5bf9\u3002\u8fd9\u4e2a\u57fa\u672c\u6a21\u578b\u5b9e\u9645\u4e0a\u5047\u8bbe\u6709\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u7684\u6982\u5ff5\uff0c\u5373\u77ac\u95f4\u540c\u65f6\u5b58\u5728\u7684\u542b\u4e49\uff0c\u7531\u4e8e\u76f8\u5bf9\u8bba\u548c\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u8fd9\u5e76\u4e0d\u5b8c\u5168\u6b63\u786e\uff0c\u4f46\u6211\u4eec\u5c06\u4e3b\u8981\u5ffd\u7565\u8fd9\u4e00\u70b9\u3002\u6240\u4ee5\uff0c\u6211\u60f3\u4f60\u5728\u8fd9\u91cc\u5f3a\u8c03\u7684\u4e00\u4e2a\u5c5e\u6027\u662f\u8ba9\u65f6\u949f\u5f7c\u6b64\u4e00\u81f4\uff0c\u8fd9\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u8fd8\u6709\u53e6\u4e00\u90e8\u5206\uff0c\u5bf9\uff0c\u5c31\u662f\u8ba9\u65f6\u949f\u4e0e\u67d0\u4e9b\u5916\u90e8\u53c2\u8003\u4e00\u81f4\u3002\u6709\u4e00\u4e9b\u7c7b\u4f3c\u7684\u6982\u5ff5\uff0c\u4e16\u754c\u8ba4\u4e3a\u65f6\u95f4\u662f\u591a\u5c11\uff1f\u90a3\u4e48\uff0c\u5916\u90e8\u53c2\u8003\u6765\u81ea\u54ea\u91cc\uff1f\u6211\u4e0d\u662f\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u4f46\u6211\u4f1a\u7ed9\u4f60\u4e00\u79cd 10,000 \u82f1\u5c3a\u7684\u89c6\u91ce\u3002\u60a8\u5728\u4e16\u754c\u5404\u5730\u90fd\u6709\u5404\u79cd\u7269\u7406\u5b9e\u9a8c\u5ba4\uff0c\u4f8b\u5982\u82f1\u56fd\u7684 NPL \u548c\u4e16\u754c\u5176\u4ed6\u5730\u65b9\u3002\u4ed6\u4eec\u90fd\u53ef\u4ee5\u6d4b\u91cf\u4ed6\u4eec\u8ba4\u4e3a\u7684\u65f6\u95f4\uff0c\u4f7f\u7528\u8bf8\u5982\u6c22\u8109\u6cfd\u4e4b\u7c7b\u7684\u4e1c\u897f\u548c\u67d0\u79cd\u975e\u5e38\u51c6\u786e\u7684\u539f\u5b50\u65b9\u6cd5\u3002\u4ed6\u4eec\u5c06\u6240\u6709\u8fd9\u4e9b\u4e1c\u897f\u63d0\u4f9b\u7ed9\u4e00\u4e2a\u5355\u4e00\u7684\u6765\u6e90\uff0c\u8be5\u6765\u6e90\u5bf9\u5176\u8fdb\u884c\u5e73\u5747\u6216\u8fdb\u884c\u67d0\u79cd\u52a0\u6743\uff0c\u4ee5\u5f97\u51fa\u6b63\u786e\u7684\u65f6\u95f4\uff0c\u7136\u540e\u60a8\u5c06\u8fd9\u79cd\u9b54\u6cd5\u4f20\u9012\u7ed9\u7a7a\u519b\uff0c\u7136\u540e\u7531\u7a7a\u519b\u53d1\u9001\u76f4\u5230 GPS \u661f\u5ea7\u3002 GPS \u6709\u4e00\u79cd\u673a\u5236\u53ef\u4ee5\u4ece GPS \u536b\u661f\u83b7\u53d6\u65f6\u95f4\u5230 GPS \u63a5\u6536\u5668\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u8fd0\u884c\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4eba\uff0c\u5e76\u4e14\u4f60\u6709\u5174\u8da3\u5c06\u4f60\u7684\u65f6\u949f\u4e0e UTC \u4e4b\u7c7b\u7684\u4e1c\u897f\u540c\u6b65\u5230\u76f8\u5bf9\u8f83\u9ad8\u7684\u7cbe\u5ea6\uff0c\u5b9e\u9645\u4e0a\u662f\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff0c\u5b83\u53ea\u662f\u4e00\u79cd\u6ca1\u6709\u5e94\u7528\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u4ee5\u505a\u7684\u662f\u4f60\u53ef\u4ee5\u53bb\u4e00\u4e2a\u4f9b\u5e94\u5546\u90a3\u91cc\u4e70\u4e00\u4e2a\u53eb\u505a GPS \u8bbe\u5907\u7684\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u8fde\u63a5\u5230\u5c4b\u9876\u4e0a\u7684\u5c0f\u5929\u7ebf\u3002\u5b83\u53ef\u4ee5\u4ece GPS \u661f\u5ea7\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u57fa\u672c\u4e0a\u7ed9\u4f60\u65f6\u95f4\uff0c\u51c6\u786e\u5ea6\u5927\u6982\u5728 100 \u7eb3\u79d2\u5de6\u53f3\u3002\u56e0\u6b64\uff0c\u60a8\u5df2\u7ecf\u83b7\u5f97\u4e86\u4e00\u79cd\u88ab\u9988\u9001\u5230 GPS \u661f\u5ea7\u7684\u539f\u5b50\u6d4b\u91cf\uff0c\u76f4\u5230\u60a8\u4f5c\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u8fd0\u8425\u5546\u53ef\u4ee5\u8d2d\u4e70\u7684 GPS \u63a5\u6536\u5668\u3002\u51fa\u4e8e\u672c\u6b21\u5bf9\u8bdd\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b GPS \u63a5\u6536\u5668\u89c6\u4e3a\u63a5\u6536\u5230\u7684\u5173\u4e8e\u65f6\u95f4\u7684\u667a\u6167\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u662f\u5f04\u6e05\u695a\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u5185\u90e8\u5236\u9020\u6240\u6709\u4e0d\u540c\u7684\u8bbe\u5907\u5f7c\u6b64\u540c\u610f\u5e76\u540c\u610f\u8be5\u5916\u90e8\u53c2\u8003\u3002\u5982\u679c\u4f60\u5c06\u81ea\u5df1\u7f6e\u4e8e\u91d1\u878d\u76d1\u7ba1\u673a\u6784\u7684\u5730\u4f4d\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b\u4e0d\u540c\u7684\u53c2\u4e0e\u8005\u90fd\u5728\u90a3\u91cc\u7528\u8ba1\u7b97\u673a\u7cfb\u7edf\u505a\u4e8b\uff0c\u7136\u540e\u53d1\u751f\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14\u4f60\u60f3\u5bf9\u5bfc\u81f4\u7684\u4e8b\u4ef6\u8fdb\u884c\u603b\u4f53\u6392\u5e8f\u8fd9\u4ef6\u75af\u72c2\u7684\u4e8b\u60c5\u2014\u2014\u6216\u8005\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8fd9\u4ef6\u597d\u4e8b\uff0c\u8c01\u77e5\u9053\u5462\u2014\u2014\u4f46\u4f60\u60f3\u8981\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5168\u9762\u6392\u5e8f\u3002\u5982\u679c\u4eba\u4eec\u6ca1\u6709\u826f\u597d\u7684\u65f6\u949f\u540c\u6b65\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5916\u90e8\u6765\u6e90\uff0c\u60a8\u65e0\u6cd5\u5c06\u53c2\u4e0e\u8005 A \u7684\u65f6\u95f4\u6233\u4e0e\u53c2\u4e0e\u8005 B \u7684\u65f6\u95f4\u6233\u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u8981\u89c4\u5b9a\u6bcf\u4e2a\u4eba\u90fd\u5fc5\u987b\u6709\u5728\u67d0\u4e2a\u8bef\u5dee\u8303\u56f4\u5185\u7684\u65f6\u95f4\uff0c\u60a8\u77e5\u9053\u8fd9\u4e9b\u65f6\u95f4\u6233\u662f\u5426\u5728\u8be5\u9519\u8bef\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u65e0\u6cd5\u786e\u5b9a\u6392\u5e8f\uff0c\u4f46\u5982\u679c\u5b83\u4eec\u6bd4\u8fd9\u66f4\u8fdc\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u786e\u5b9a\u6392\u5e8f\u3002\u6211\u53ef\u4ee5\u77e5\u9053\u54ea\u4e2a\u5148\u6765\uff0c\u54ea\u4e2a\u7b2c\u4e8c\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u4eec\u884c\u4e1a\u7279\u6709\u7684\u52a8\u673a\uff0c\u4f46\u5176\u4ed6\u884c\u4e1a\u7684\u4eba\u4e0d\u662f\u4e5f\u5f88\u5173\u5fc3\u65f6\u949f\u540c\u6b65\u5417\uff1f\u6211\u539f\u4ee5\u4e3a\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\u4f1a\u4fc3\u4f7f\u60a8\u60f3\u8981\u540c\u6b65\u7f51\u7edc\u4e0a\u7684\u673a\u5668\u3002\u54e6\u6ca1\u95ee\u9898\u3002\u6709\u5f88\u591a\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u5c31\u50cf\u4e00\u822c\u7684\u7cfb\u7edf\u7ba1\u7406\u5458\u4e3b\u9898\u4e00\u6837\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u60f3\u4ece\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u7cfb\u7edf\u6536\u96c6\u65e5\u5fd7\uff0c\u5e76\u4e14\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\u60f3\u8981\u5206\u6790\u5b83\u4eec\u3002\u4e5f\u8bb8\u662f\u56e0\u4e3a\u60a8\u62c5\u5fc3\u5165\u4fb5\u8005\u3002\u6216\u8005\u53ef\u80fd\u662f\u56e0\u4e3a\u60a8\u53ea\u662f\u60f3\u4e86\u89e3\u4e8b\u7269\u7684\u8fd0\u4f5c\u65b9\u5f0f\uff0c\u5982\u679c\u60a8\u7684\u65f6\u949f\u4e0d\u540c\u6b65\uff0c\u5219\u5f88\u96be\u7406\u89e3\u7cfb\u7edf B \u4e0a\u53ef\u80fd\u53d1\u751f\u7684\u4e8b\u60c5\u4ee5\u53ca\u5b83\u4eec\u4e0e\u7cfb\u7edf A \u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e24\u8005\u65f6\u95f4\u6233\u4e0d\u662f - \u5982\u679c\u5b83\u4eec\u4e0d\u540c\u6b65\uff0c\u60a8\u5c31\u65e0\u6cd5\u6bd4\u8f83\u5b83\u4eec\u3002\n\u6211\u60f3\u4e5f\u6709\u4e00\u4e9b\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u9700\u8981\u65f6\u949f\u7684\u7b97\u6cd5\u539f\u56e0\u3002\u5f53\u7136\uff0c\u67d0\u4e9b\u7c7b\u578b\u7684\u5206\u5e03\u5f0f\u7b97\u6cd5\u6700\u7ec8\u4f1a\u4f7f\u7528\u65f6\u949f\u4f5c\u4e3a\u6253\u7834\u7cfb\u7edf\u4e4b\u95f4\u8054\u7cfb\u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u8fd9\u81f3\u5c11\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5408\u7406\u540c\u6b65\u3002\u5f53\u7136\u3002\u8fd8\u6709\u5176\u4ed6\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f51\u7edc\u534f\u8bae\u9700\u8981\u65f6\u949f\u540c\u6b65\uff0c\u4f46\u65f6\u949f\u540c\u6b65\u7684\u7cbe\u786e\u5ea6\u8981\u4f4e\u5f97\u591a\u3002 Kerberos \u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u534f\u8bae\uff0c\u5b83\u8981\u6c42\u65f6\u949f\u5728\u4e94\u5206\u949f\u5185\u540c\u6b65\uff0c\u5176\u60f3\u6cd5\u662f\u963b\u6b62\u91cd\u653e\u653b\u51fb\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u786e\u4fdd\u6709\u4eba\u5728\u51e0\u5929\u5185\u65e0\u6cd5\u83b7\u53d6\u60a8\u7684\u51ed\u636e\u4e4b\u524d\u518d\u4f7f\u7528\u5b83\u4eec\uff0c\u90a3\u79cd\u4e1c\u897f\u3002\u6240\u4ee5\u5728\u90a3\u91cc\uff0c\u8bef\u5dee\u7ebf\u5f88\u5bbd\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u67d0\u79cd\u540c\u6b65\u3002\u5bf9\u3002\u6211\u60f3\u8fd9\u662f\u8003\u8651\u540c\u6b65\u65f6\u7684\u4e00\u4e2a\u666e\u904d\u4e3b\u9898\uff1a\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u540c\u6b65\uff0c\u4f46\u66f4\u7d27\u5bc6\u7684\u540c\u6b65\u6c38\u8fdc\u4e0d\u4f1a\u53d7\u5230\u4f24\u5bb3\u3002\u5f53\u4f60\u5f00\u59cb\u8fdb\u5165\u4e0b\u9650\u65f6\u80af\u5b9a\u4f1a\u6709\u6743\u8861\uff0c\u4f46\u662f\u662f\u7684\u3002\u5982\u679c\u5b83\u4eec\u90fd\u662f\u514d\u8d39\u7684\uff0c\u5f53\u7136\uff0c\u6211\u5e0c\u671b\u5b83\u4eec\u5b8c\u5168\u4e00\u6837\u3002\u4eba\u4eec\u901a\u5e38\u5982\u4f55\u89e3\u51b3\u65f6\u949f\u540c\u6b65\u8fd9\u4e2a\u95ee\u9898\uff1f\u4ec0\u4e48\u662f\u6807\u51c6\u5de5\u5177\uff1f\u5927\u591a\u6570\u4eba\uff0c\u60a8\u53ea\u662f\u5c06\u60a8\u7684\u53d1\u884c\u7248\u4f5c\u4e3a NTP \u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\u3002 NTP \u4ee3\u8868\u7f51\u7edc\u65f6\u95f4\u534f\u8bae\uff0c\u76f4\u5230\u4e0d\u4e45\u524d\uff0c\u6211\u8fd8\u8ba4\u4e3a\u5b83\u4f7f\u7528\u4e86\u67d0\u79cd\u9b54\u6cd5\uff0c\u5b83\u77e5\u9053\u5982\u4f55\u4e0e Internet \u4e0a\u7684\u67d0\u4e9b\u670d\u52a1\u5668\u6216\u67d0\u4e9b\u672c\u5730\u670d\u52a1\u5668\u901a\u4fe1\u3002\u53ef\u80fd\u7136\u540e\u4e0e\u4e92\u8054\u7f51\u4e0a\u7684\u670d\u52a1\u5668\u4ea4\u8c08\uff0c\u5b83\u4f1a\u5c06\u60a8\u7684\u65f6\u949f\u4e0e\u8fd9\u4e9b\u670d\u52a1\u5668\u540c\u6b65\u3002\u5b83\u4ea4\u6362\u4e00\u4e9b\u6570\u636e\u5305\uff0c\u4e5f\u8bb8\u9700\u8981\u4e00\u70b9\u65f6\u95f4\uff0c\u4e5f\u8bb8\u51e0\u5206\u949f\uff0c\u4e5f\u8bb8\u66f4\u957f\u3002\u4f60\u53ef\u80fd\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\uff0c\u4f46\u6700\u7ec8\uff0c\u4f60\u7684\u65f6\u949f\u76f8\u5bf9\u540c\u6b65\u5230\u51e0\u5341\u6beb\u79d2\u5de6\u53f3\u3002\u5c31\u50cf\u6211\u8bf4\u7684\uff0c\u6709\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u53ea\u662f\u5047\u8bbe\u5b83\u662f\u9b54\u672f\uff0c\u5e76\u6ca1\u6709\u60f3\u592a\u591a\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u63a5\u5230\u4efb\u52a1\uff0c\u5728\u7b80\u8857\uff0c\u5b9e\u9645\u770b\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\u5e76\u5c1d\u8bd5\u6ee1\u8db3\u4e00\u4e9b\u6bd4\u6807\u51c6\u7684\u51e0\u5341\u6beb\u79d2\u540c\u6b65\u66f4\u96be\u7684\u8981\u6c42\u3002\u6240\u4ee5\u6211\u5b9e\u9645\u4e0a\u53bb\u4e86\uff0c\u5c31\u50cf\uff0c\u201c\u597d\u5427\u3002\u597d\u3002 NTP \u5982\u4f55\u4ece\u7b2c\u4e00\u539f\u5219\u505a\u5230\u8fd9\u4e00\u70b9\uff1f\u201d\u5bf9\uff1f\u5c31\u50cf\uff0c\u8ba9\u6211\u4eec\u53bb\u8bfb\u4e00\u4e9b\u5927\u536b\u7c73\u5c14\u65af\u7684\u8bba\u6587\u3002\u8ba9\u6211\u4eec\u53bb\u770b\u770b\u6211\u4eec\u662f\u5426\u771f\u7684\u53ef\u4ee5\u81ea\u5df1\u63a8\u7406\u51fa\u6765\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u53ea\u6709\u56db\u4e2a\u65f6\u95f4\u6233\u3002\u5b83\u5468\u56f4\u6709\u5f88\u591a\u66f4\u590d\u6742\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u7684\u6838\u5fc3\u662f\u8fd9\u56db\u4e2a\u65f6\u95f4\u6233\u3002\u5047\u8bbe\u6211\u662f\u5ba2\u6237\u7aef\uff0c\u800c\u4f60\u662f\u670d\u52a1\u5668\u3002\u9996\u5148\uff0c\u6211\u4f1a\u5411\u60a8\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u4f46\u5728\u6b64\u4e4b\u524d\u6211\u4f1a\u5199\u4e0b\u65f6\u95f4\u6233\u3002\u5f53\u60a8\u6536\u5230\u8be5\u6570\u636e\u5305\u65f6\uff0c\u60a8\u4f1a\u8bb0\u4e0b\u65f6\u95f4\u6233\u3002\u7136\u540e\uff0c\u60a8\u5411\u6211\u53d1\u9001\u56de\u590d\uff0c\u7136\u540e\u5728\u6b64\u4e4b\u524d\u5199\u4e0b\u65f6\u95f4\u6233\u3002\u6700\u540e\uff0c\u5f53\u6211\u6536\u5230\u90a3\u4e2a\u56de\u590d\u65f6\uff0c\u6211\u4f1a\u5199\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u5f00\u521b\u6027\u7684\uff0c\u4f46\u4ec5\u51ed\u8fd9\u56db\u4e2a\u65f6\u95f4\u6233\u6211\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e24\u4e2a\u91cd\u8981\u7684\u6570\u5b57\uff0c\u504f\u79fb\u91cf\u548c\u5ef6\u8fdf\u3002\u504f\u79fb\u91cf\u662f\u6211\u7684\u65f6\u949f\u4e0e\u4f60\u7684\u65f6\u949f\u76f8\u5dee\u591a\u8fdc\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u8ba4\u4e3a\u73b0\u5728\u662f\u4e0b\u5348 12 \u70b9\uff0c\u800c\u6211\u8ba4\u4e3a\u662f\u4e0b\u5348 12:05\uff0c\u90a3\u4e48\u504f\u79fb\u91cf\u5c31\u662f\u4e94\u5206\u949f\u3002\u5ef6\u8fdf\u662f\u8fd9\u4e9b\u6570\u636e\u5305\u7a7f\u8d8a\u7f51\u7edc\u6240\u7528\u7684\u65f6\u95f4\u3002\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e9b\u6570\u5b57\uff0c\u4f60\u57fa\u672c\u4e0a\u9700\u8981\u4e00\u4e2a\u65b9\u7a0b\u7ec4\uff0c\u5bf9\u6211\u6765\u8bf4\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u5b9e\u9645\u4e0a\u662f\u7528\u4e00\u5f20\u7eb8\u548c\u4e00\u652f\u94c5\u7b14\u5199\u4e0b\u6765\uff0c\u81ea\u5df1\u89e3\u51b3\u8fd9\u4e9b\u65b9\u7a0b\uff0c\u662f\u7406\u89e3\u8fd9\u91cc\u9762\u6709\u4e00\u79cd\u5de8\u5927\u7684\u5047\u8bbe\u534f\u8bae\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u7684\u5ef6\u8fdf\uff0c\u6211\u6253\u4e0a\u65f6\u95f4\u6233\u7136\u540e\u4f60\u505a\u7684\uff0c\u4ee5\u53ca\u7b2c\u4e8c\u4e2a\u6570\u636e\u5305\u7684\u5ef6\u8fdf\uff0c\u4f60\u6253\u4e0a\u65f6\u95f4\u6233\u7136\u540e\u6211\u505a\uff0c\u5047\u8bbe\u8fd9\u4e9b\u65f6\u95f4\u662f\u76f8\u540c\u7684\uff0c\u5982\u679c\u5b83\u4eec\u4e0d\u76f8\u540c\u4ed6\u4eec\u5f15\u5165\u4e86\u6240\u8c13\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u65b9\u9762\u3002\u8fd9\u662f\u4e00\u4e2a\u5047\u8bbe\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5b9e\u9645\u6c42\u89e3\u8fd9\u4e9b\u65b9\u7a0b\u4ee5\u83b7\u5f97\u504f\u79fb\u548c\u5ef6\u8fdf\u3002\n\u60a8\u80fd\u5426\u89e3\u91ca\u4e00\u4e0b\u53d6\u51b3\u4e8e\u53d1\u9001\u65f6\u95f4\u548c\u63a5\u6536\u65f6\u95f4\u4e4b\u95f4\u7684\u5bf9\u79f0\u6027\u7684\u8ba1\u7b97\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e9b\u5ef6\u8fdf\u662f\u5c06\u5b83\u4eec\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u539f\u56e0\uff0c\u5bf9\u5417\uff1f\u60a8\u77e5\u9053\u5982\u679c\u65f6\u949f\u540c\u6b65\uff0c\u60a8\u5c31\u77e5\u9053\u60a8\u4f7f\u7528\u7684\u65f6\u95f4\u6233\u51cf\u53bb\u6211\u4f7f\u7528\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u7b49\u4e8e\u6570\u636e\u5305\u5230\u8fbe\u60a8\u7684\u5ef6\u8fdf\uff0c\u5bf9\u5417\uff1f\u53cd\u4e4b\u4ea6\u7136\u3002\u6211\u7684\u65f6\u95f4\u6233\uff0c\u4ece\u6211\u6536\u5230\u7684\u7b2c\u4e8c\u4e2a\u5f00\u59cb\uff0c\u51cf\u53bb\u4f60\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u7b49\u4e8e\u6570\u636e\u5305\u4ece\u4f60\u5230\u6211\u7684\u5ef6\u8fdf\u3002\u4f60\u5c31\u50cf\uff0c\u201c\u597d\u5427\u3002\u6211\u7528\u8fd9\u4e9b\u4fe1\u606f\u505a\u4ec0\u4e48\uff1f\u201d\u7136\u540e\u4f60\u8bf4\uff0c\u201c\u5982\u679c\u6211\u5047\u8bbe\u8fd9\u4e24\u4e2a\u5ef6\u8fdf\u662f\u76f8\u7b49\u7684\u5462\uff1f\u201d\u5982\u679c\u6211\u5047\u8bbe\u8fd9\u4e24\u4e2a\u5ef6\u8fdf\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u5f00\u59cb\u91cd\u65b0\u6392\u5217\u7b49\u5f0f\u7684\u5404\u4e2a\u90e8\u5206\u3002\u7136\u540e\u8fd9\u5c31\u662f\u60a8\u5982\u4f55\u5b9e\u9645\u89e3\u51b3\u5ef6\u8fdf\u548c\u504f\u79fb\u7684\u65b9\u6cd5\u3002\u8fd9\u4e24\u4e2a\u65f6\u95f4\u6233\u5728\u670d\u52a1\u7aef\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u95ee\u6211\u73b0\u5728\u51e0\u70b9\u4e86\uff0c\u6211\u4f1a\u5728\u6536\u5230\u7684\u65f6\u5019\u5199\u4e0b\u6765\uff0c\u7136\u540e\u5199\u4e0b\u6211\u5bc4\u56de\u7684\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u53ea\u6709\u4e09\u4e2a\u65f6\u95f4\u6233\u7684\u66f4\u7b80\u5355\u7684\u534f\u8bae\u3002\u7136\u540e\u4f60\u5c31\u5047\u8bbe\u6211\u8bb0\u4e0b\u7684\u65f6\u95f4\u53d1\u751f\u5728\u90a3\u4e2a\u65f6\u95f4\u95f4\u9694\u7684\u4e2d\u95f4\uff0c\u4e5f\u5c31\u662f\u4f60\u53d1\u9001\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u548c\u63a5\u6536\u7b2c\u4e8c\u4e2a\u6d88\u606f\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u3002\u4f60\u600e\u4e48\u77e5\u9053\u4e2d\u95f4\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u5bf9\u5427\uff1f\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u53d1\u751f\u5f88\u591a\u53d8\u5e7b\u83ab\u6d4b\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u5982\u679c\u4f60\u5728\u4e24\u7aef\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u4e00\u65e6\u4f60\u6536\u5230\u6570\u636e\u5305\u5c31\u7ed9\u5b83\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u7136\u540e\u4e5f\u8bb8\u4f60\u5fc5\u987b\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u7136\u540e\u5c31\u5728\u4f60\u53d1\u56de\u4e4b\u524d\u7ed9\u5b83\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u8fd9\u5c31\u662f\u4f60\u5982\u4f55\u6700\u63a5\u8fd1\u6211\u63d0\u5230\u7684\u90a3\u4e9b\u4ee3\u8868\u4ece\u4e00\u4e2a\u5230\u53e6\u4e00\u4e2a\u7684\u5b9e\u9645\u7f51\u7edc\u5ef6\u8fdf\u7684\u5dee\u5f02\u3002\u6211\u731c\u4f60\u5728\u8fd9\u91cc\u505a\u7684\u4e00\u4e2a\u989d\u5916\u5047\u8bbe\u662f\uff0c\u5728\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6233\u548c\u7b2c\u4e8c\u4e2a\u65f6\u95f4\u6233\u4e4b\u95f4\u7684\u90a3\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u6700\u597d\u5047\u8bbe\u65f6\u949f\u524d\u8fdb\u7684\u901f\u5ea6\u662f\u6b63\u786e\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u4f1a\u7ed9\u7b49\u5f0f\u5e26\u6765\u53e6\u4e00\u4e2a\u9519\u8bef\u9879\u3002\u6211\u8ba4\u4e3a\uff0c\u5b83\u901a\u5e38\u975e\u5e38\u5c0f\uff0c\u5bf9\u5417\uff1f\u5982\u679c\u4f60\u53ea\u662f\uff0c\u5b83\u80af\u5b9a\u770b\u8d77\u6765\u662f\u4f60\u53ef\u4ee5\u5728\u5b9e\u8df5\u4e2d\u5ffd\u7565\u7684\u4e1c\u897f\u3002\u56e0\u4e3a\u5982\u679c\u4f60\u53ea\u770b\u767e\u4e07\u5206\u4e4b\u51e0\uff0c\u6216\u8005\u4e0d\u7ba1\u4f60\u5728\u8bf4\u4ec0\u4e48\uff0c\u5c31\u771f\u6b63\u7684\u8ba1\u7b97\u673a\u65f6\u949f\u6709\u591a\u5c11\u6f02\u79fb\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5b9e\u9645\u4e0a\u975e\u5e38\u5c0f\u3002\u662f\u7684\uff0c\u60a8\u5df2\u7ecf\u5f97\u5230\u4e86\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u65f6\u95f4\u5b88\u62a4\u7a0b\u5e8f\u5e94\u7528\u7684\u66f4\u6b63\uff0c\u5b83\u4f7f\u65f6\u949f\u4fdd\u6301\u540c\u6b65\u3002\u636e\u63a8\u6d4b\uff0c\u8fd9\u79cd\u901a\u4fe1\u7684\u670d\u52a1\u5668\u7aef\u4e5f\u4ece\u67d0\u4e2a\u53c2\u8003\u65f6\u949f\u6216 NTP \u4e2d\u67d0\u79cd\u66f4\u9ad8\u4e0a\u6e38\u5c42\u7684\u67d0\u4e2a\u5730\u65b9\u82b1\u8d39\u65f6\u95f4\uff0c\u4f8b\u5982\u6bd4\u5b83\u66f4\u597d\u7684\u65f6\u949f\uff0c\u4f8b\u5982 GPS \u63a5\u6536\u5668\uff0c\u5e76\u4e14\u5b83\u5df2\u7ecf\u5e94\u7528\u4e86\u67d0\u79cd\u6821\u6b63\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8bf4\uff1a\u201c\u563f\uff0c\u6211\u76ee\u524d\u8ba4\u4e3a\u9891\u7387\u4e0b\u964d\u4e86\u8fd9\u4e48\u591a\u3002\u5f53\u4f60\u628a\u65f6\u95f4\u8fd8\u7ed9\u6211\u65f6\uff0c\u8bf7\u7ea0\u6b63\u8fd9\u4e00\u70b9\u3002\u201d\u6240\u4ee5\uff0c\u6211\u89c9\u5f97\u4f60\u6700\u5927\u7684\u2014\u2014\u6211\u731c\u4f60\u5728\u5b9e\u8df5\u4e2d\u53ef\u4ee5\u5ffd\u7565\u2014\u2014\u4f60\u6700\u5927\u7684\u62c5\u5fe7\u662f\u5728\u8fd9\u4e24\u4e2a\u65f6\u95f4\u6233\u4e4b\u95f4\u662f\u5426\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u6e29\u5ea6\u4e0a\u5347\u6216\u4e0b\u964d\u4e86\u5f88\u591a\u5f88\u591a\u5ea6\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u90a3\u4e2a\u9891\u7387\u6821\u6b63\u73b0\u5728\u5b8c\u5168\u4e0d\u6b63\u786e\u3002\u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u7f51\u7edc\u534f\u8bae\u3002\u653e\u7f6e\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53d1\u9001\u4e00\u6761\u6d88\u606f\uff0c\u53e6\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53e6\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u4f60\u4f1a\u5f97\u5230\u5b83\u3002\u73b0\u5728\u542f\u52a8\u8fd9\u4e00\u5207\u7684\u8ba1\u7b97\u673a\u5df2\u7ecf\u4f30\u8ba1\u4e86\u5b83\u7684\u65f6\u949f\u5173\u95ed\u4e86\u591a\u5c11\u3002\u90a3\u5b83\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\n\u5728\u7b80\u5355\u7684\u4e16\u754c\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u53ea\u662f\uff0c\u4f60\u53ef\u4ee5\u8bf4\uff0c\u201c\u65f6\u95f4\u5e94\u8be5\u662f X\u201d\uff0c\u4f46\u8fd9\u901a\u5e38\u4e0d\u662f\u5927\u591a\u6570\u7f51\u7edc\u65f6\u95f4\u534f\u8bae\u5b88\u62a4\u8fdb\u7a0b\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u4ed6\u4eec\u4f1a\u505a\u7684\u662f\uff0c\u4ed6\u4eec\u4f1a\u4ece\u5355\u4e2a\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u5927\u91cf\u6837\u672c\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u60a8\u914d\u7f6e\u4e86\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u56e0\u6b64\u60a8\u5c06\u4ece\u591a\u4e2a\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u8bb8\u591a\u6837\u672c\uff0c\u5e76\u4e14\u60a8\u5c06\u5bf9\u8fd9\u4e9b\u4e8b\u60c5\u5e94\u7528\u4e0d\u540c\u7684\u6807\u51c6\u51b3\u5b9a\u4f60\u662f\u5426\u5e94\u8be5\u8003\u8651\u5b83\u4eec\u3002\u6211\u8ba4\u4e3a NTPD \u7684\u53c2\u8003\u5b9e\u73b0\u6709\u4e00\u4e2a\u201c\u7206\u7c73\u82b1\u5c16\u5cf0\u201d\u7684\u6982\u5ff5\uff0c\u5982\u679c\u4f60\u7684\u504f\u79fb\u91cf\uff0c\u4f60\u77e5\u9053\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u53d6\u56de 30 \u4e2a\u6837\u672c\uff0c\u800c\u4e14\u5b83\u4eec\u770b\u8d77\u6765\u90fd\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u975e\u5e38\u75af\u72c2\u7684\u5173\u95ed\uff0c\u4f60\u53ea\u662f\u8bf4\uff0c\u201c\u6211\u4f1a\u5ffd\u7565\u90a3\u4e2a\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u53ea\u662f\u7531\u4e8e\u7f51\u7edc\u4e2d\u67d0\u5904\u7684\u75af\u72c2\u6392\u961f\u6216\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u201d\u4f60\u53ef\u4ee5\u628a\u8fd9\u770b\u4f5c\u662f\u4e00\u79cd\u6295\u7968\u7b97\u6cd5\uff1a\u4f60\u6709\u4e00\u5806\u4e0d\u540c\u7684\u9884\u8a00\u673a\u544a\u8bc9\u4f60\u65f6\u95f4\u662f\u4ec0\u4e48\uff0c\u4f60\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77\uff0c\u5e76\u6709\u67d0\u79cd\u65b9\u6cd5\u6765\u8ba1\u7b97\u5173\u4e8e\u4ec0\u4e48\u7684\u805a\u5408\u5047\u8bbe\u76ee\u524d\u7684\u65f6\u95f4\u662f\u8bd5\u56fe\u5bf9\u9519\u8bef\u548c\u5220\u9664\u5f02\u5e38\u503c\u7b49\u4fdd\u6301\u9c81\u68d2\u6027\u3002\u662f\u7684\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u5bf9\u7684\u3002\u4f60\u8bd5\u56fe\u627e\u51fa\u5bf9\u4f60\u6492\u8c0e\u7684\u4eba\uff0c\u5bf9\u5417\uff1f\u60a8\u53ef\u80fd\u6b63\u5728\u4e0e\u4e0a\u6e38\u4ea4\u8c08\u7684\u4e00\u4e9b\u670d\u52a1\u5668\u53ef\u80fd\u53ea\u662f\u544a\u8bc9\u60a8\u4e0d\u6b63\u786e\u7684\u4e8b\u60c5\u3002\u5b83\u4eec\u901a\u5e38\u4ee5 NTP \u7684\u8bf4\u6cd5\u88ab\u79f0\u4e3a falsetickers\uff0c\u800c\u90a3\u4e9b\u4e0d\u662f falseticker \u7684\u5c31\u662f\u771f\u6b63\u7684\u5d4c\u5408\u4f53\u3002\u6211\u4e0d\u786e\u5b9a\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u4e9b\u540d\u79f0\uff0c\u4f46\u5982\u679c\u60a8\u5728 Internet \u4e0a\u6d4f\u89c8\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u8fd9\u4e9b\u540d\u79f0\u3002\u6240\u4ee5\u4f60\u8bd5\u7740\u6311\u51fa\u90a3\u4e9b\u544a\u8bc9\u4f60\u771f\u76f8\u7684\u4eba\u3002\u60a8\u5bf9\u5b83\u4eec\u5e94\u7528\u4e86\u4e00\u4e9b\u5176\u4ed6\u5404\u79cd\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u4ee5\u5c1d\u8bd5\u627e\u51fa\u60a8\u8ba4\u4e3a\u6700\u597d\u7684\u65b9\u6cd5\uff0c\u5bf9\u5417\uff1f\u54ea\u4e9b\u53ef\u80fd\u5177\u6709\u6700\u5c0f\u7684\u8bef\u5dee\u7ebf\u2014\u2014\u5c3d\u7ba1\u60a8\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u4e9b\u662f\u4f7f\u7528\u5b83\u4eec\u7684\u4e0d\u9519\u6765\u6e90\uff0c\u4f46\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u5177\u6709\u6bd4\u5176\u4ed6\u66f4\u5bbd\u7684\u8bef\u5dee\u7ebf\uff0c\u5bf9\uff0c\u5c31\u50cf\u60a8\u7684\u6837\u672c\u53ef\u80fd\u6bd4\u5176\u4ed6\u6837\u672c\u4ee3\u8868\u7684\u8303\u56f4\u66f4\u5e7f\u2014\u2014\u6240\u4ee5\u4f60\u8bd5\u7740\u627e\u51fa\u54ea\u4e9b\u662f\u6700\u597d\u7684\uff0c\u7136\u540e\u4f60\u7528\u5b83\u6765\u544a\u8bc9\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u6548\u5730\u52a0\u5feb\u6216\u51cf\u6162\u5b83\u7684\u9891\u7387\u6821\u6b63\uff0c\u4ee5\u4e86\u89e3\u5b83\u7684\u504f\u5dee\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5c1d\u8bd5\u6d88\u9664\u8be5\u9519\u8bef\u3002\u60a8\u4e0d\u4f1a\u53ea\u662f\u7a81\u7136\u8c03\u6574\u7cfb\u7edf\u8ba4\u4e3a\u7684\u65f6\u95f4\u3002\u5927\u591a\u6570\u65f6\u95f4\u5b88\u62a4\u8fdb\u7a0b\u4e0d\u4f1a\u4e3b\u52a8\u5730\u8ba1\u65f6\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5728\u65f6\u95f4\u6025\u5267\u53d8\u5316\u65f6\u4eab\u53d7\uff0c\u5c24\u5176\u662f\u5f53\u5b83\u5728\u8d1f\u65b9\u5411\u4e0a\u6025\u5267\u53d8\u5316\u65f6\u3002\u8fd9\u7a81\u51fa\u4e86\u60a8\u5e0c\u671b\u65f6\u949f\u5177\u6709\u7684\u53e6\u4e00\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u89e6\u53ca\uff0c\u5373\uff1a\u6211\u4eec\u8bf4\u8fc7\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u65f6\u949f\u51c6\u786e\u3002\u4f60\u5224\u65ad\u4ed6\u4eec\u6b63\u786e\u7684\u6807\u51c6\u662f\u4f60\u53bb\u627e\u4ed6\u4eec\u95ee\u4ed6\u4eec\u73b0\u5728\u51e0\u70b9\u4e86\uff0c\u4ed6\u4eec\u7ed9\u51fa\u7684\u6570\u5b57\u975e\u5e38\u63a5\u8fd1\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u4f60\u60f3\u8981\u7684\u7279\u6027\uff0c\u90a3\u5c31\u662f\u4f60\u60f3\u8ba9\u65f6\u949f\uff0c\u5728\u5fae\u89c2\u610f\u4e49\u4e0a\uff0c\u6bcf\u79d2\u524d\u8fdb\u5927\u7ea6\u4e00\u79d2\uff0c\u5e76\u4e14\u4f60\u7279\u522b\u5e0c\u671b\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5012\u9000\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e0a\u6709\u5f88\u591a\u7b97\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u9690\u542b\u5730\u5047\u8bbe\uff0c\u4f60\u77e5\u9053\uff0c\u5929\u771f\u5730\u5408\u7406\uff0c\u65f6\u949f\u53ea\u4f1a\u5411\u524d\uff0c\u5f53\u4f60\u5141\u8bb8\u65f6\u949f\u5411\u540e\u8df3\u65f6\uff0c\u5f88\u591a\u4e8b\u60c5\u90fd\u4f1a\u641e\u7838\u3002\u5bf9\u3002\u90a3\u4e48\uff0c\u4e00\u79cd\u65b9\u5f0f......", "note_en": "Welcome to Signals And Threads, in-depth conversations about every layer of the tech stack from Jane Street. I\u2019m Ron Minsky.  Today we\u2019re going to talk about a deceptively simple topic: clock synchronization. I think there\u2019s nothing like trying to write computer programs to manipulate time to convince you that time is an incredibly complicated thing, and it\u2019s complicated in like 16 different ways, from time zones to leap seconds to all sorts of other crazy things, but one of the really interesting corners of this world is how do you get all of the clocks on your big computer network to roughly agree with each other? In other words, clock synchronization.  So we\u2019re going to talk about that with Chris Perl, who\u2019s a sysadmin, who\u2019s worked at Jane Street since 2012. Chris is better than anyone I have ever worked with, at diving into the horrible details of complex systems and understanding how they work and how they can be made to work better, and he\u2019s done a lot of work here, specifically on clock synchronization, and has, in the course of that, redone our entire system for doing clock synchronization, so he\u2019s had an opportunity to really learn a lot about the topic. Chris, to get started, can you give us just a quick overview of how computer clocks work in the first place?\n   So, I guess the rough gist is something like you have some oscillator, a little crystal effectively that\u2019s inside the computer that is oscillating at some frequency, and that\u2019s driving an interrupt that the operating system is going to handle in some level \u2013 there\u2019s probably lots of details here that I\u2019m just skipping over \u2013 but that\u2019s driving an interrupt that\u2019s going happen in the operating system. And the operating system is using that to derive its notion of time, and so if you have a really high-quality oscillator, and those timer interrupts happen at the right rate so that you\u2019re tracking real-time that might just happen, and if your oscillator\u2019s very good, and very stable you could actually just be pretty close to the correct time just by virtue of that. But the truth is that most computers come with fairly bad oscillators and they change their frequencies for various reasons like heat, so if you are using your computer to compile the Linux kernel or something like that, that could change the heat profile, change the frequency of the oscillator, and actually change how well you\u2019re doing of keeping real time.\n   When we naively think of clock synchronization as people, we think of it as like, \u201cI\u2019m going to go set my clock\u201d. I\u2019m going to look at what time it is and adjust my clock to match whatever real-time is, but you\u2019re actually talking about a different thing here. You\u2019re talking not just about setting what the right time is right now but keeping that time correct, essentially keeping the rate at which time is going forward in sync.\n   Correct. You\u2019d love it if you could get like a really, really high-quality oscillator for super cheap in all your computers and then you wouldn\u2019t need a lot of adjustment to get them to keep the correct time, but that would be really expensive. You can buy such things, they just cost a lot of money.\n   So, you say that heat and various other things that are going on in the computer will cause this rate at which time is appearing to march forward inside of your computer to drift around. How accurate are these? Can give me a kind of numerical sense of how far these things drift away?\n   The stuff that we run, we capture some of these statistics, we see machines that have a frequency correction applied to them of, say, 50 parts per million, which is like microseconds per second, so that works out to roughly a couple seconds per day, is how you would wind up drifting off. But I\u2019m sure that if you had a super old desktop under your desk, that you stole from your parents or something and you were trying to rebuild into a Linux box, you might have worse numbers than that. Like a sort of relatively current generation server from a well-known vendor, you\u2019re talking somewhere around 50 to 100 microseconds per second that they can sort of walk-off out of alignment.\n   Okay, so clock synchronization is the process of trying to get all of those clocks that you have across your whole data center and across multiple data centers to be in sync with each other. Is that the right way of thinking about it?\n   I think so. \u201cIn sync\u201d, is an interesting sort of thing to say, right? You kind of would like that if you were able to instantaneously ask two random servers on your network, what time it was at the same exact point in time, if you could somehow magically do that, that they would agree to some relatively small margin of error, and I think that that\u2019s kind of what we mean by clock synchronization. That if you could somehow magically freeze time and go ask every single computer on your network, \u201cHey. What time do you think it is?\u201d that they would all roughly agree to within some error bound that you can define.\n   Right. And this basic model actually assumes that there is a well-defined notion of what it means to be instantaneously at the same time, which isn\u2019t exactly true because of relativity and stuff like that, but we\u2019re going to mostly ignore that. So, I guess one property that you\u2019re highlighting here is having the clocks agree with each other, and that\u2019s part of it, but there\u2019s another piece, right, which is having the clocks agree with some external reference. There\u2019s some notion of like, what does the world think the time is? So, where does that external reference come from?\n   I\u2019m not an expert on this stuff, but I\u2019ll give you the sort of 10,000-foot view. You have various physics laboratories all over the world, like NPL in the UK, and other places across the world. They all have measurements of what they think time is, using things like hydrogen masers and sort of very accurate atomic methods. They contribute all of that stuff to a single source who kind of averages it, or does some sort of weighting, to come up with what the correct time is, and then you kind of magic that over to the Air Force, who then sends it up to the GPS constellation. And GPS has a mechanism for getting time from the GPS satellites down to GPS receivers, and so if you\u2019re a person who runs a computer network and you\u2019re interested in synchronizing your clocks to a relatively high degree of accuracy with something like UTC, which is effectively Greenwich Mean Time, it is just sort of the current time without time zones applied.   If you\u2019re interested in doing that, what you can do is you can just go out to a vendor and you can buy a thing called a GPS appliance, which can hook up to a little antenna that goes onto the roof. It can receive this signal from the GPS constellation and basically gives you out time, and the accuracy there is something like maybe 100 nanoseconds or so. So you\u2019ve got the sort of atomic measurements being fed up to a GPS constellation, down to GPS receivers that you, as an operator of a computer network, can buy.\n   And for the purposes of this conversation, we\u2019re going to treat those GPS receivers as the received wisdom as to what time it is, and our job is to figure out how, inside of a computer network, you make all of the different devices agree with each other and agree with that external reference.\n         If you put yourself in the shoes of a financial regulatory authority, and you have all these different participants out there doing stuff with computer systems, and something weird happens, and you\u2019d like to come up with a total ordering of events of what led to this crazy thing \u2013 or what led to this good thing, who knows \u2013 but you want to have a total ordering of events. If people don\u2019t have good clock synchronization, to some external source, you can\u2019t compare the timestamp from participant A to the timestamp from participant B, so if you were to decree everybody must have time that is within some error bound, you know if these timestamps are within that error bound, well, then I can\u2019t be sure about the ordering, but if they\u2019re farther away than that then I can be sure about the ordering. I can know which one came first and which one came second, and that can be very useful.\n   So that\u2019s the motivation that\u2019s very specific to our industry, but don\u2019t people in other industries care a lot about clock synchronization, too? I would have thought that there are other reasons that would drive you to want to synchronize the machines on the network.\n   Oh, sure. There\u2019s lots of different things. I mean, just like a general sysadmin topic, a lot of times you want to gather logs from all the systems on your computer network, and you want to analyze them for various reasons. Maybe it\u2019s because you\u2019re concerned about intruders. Or maybe it\u2019s because you\u2019re just trying to understand the way things are functioning, and if your clocks aren\u2019t synchronized it\u2019s very hard to kind of understand things that might have happened on system B and how they relate to system A because the two timestamps are just not \u2013 you just can\u2019t compare them if they\u2019re not synchronized.\n   And I suppose there are also some distributed systems, algorithmic reasons to want clocks. Certainly, some kinds of distributed algorithms end up using clocks as ways of breaking ties between systems, and so that requires at least some reasonable level of synchronization.\n   For sure. There\u2019s also other network protocols that are widely used that require clock synchronization, but much less precise levels of clock synchronization. Kerberos is a widely used authentication protocol, and that requires that the clocks be synchronized to within five minutes, and the idea there is to thwart replay attacks, and stuff like that, making sure that somebody can\u2019t obtain your credentials from a couple days ago and use them again, that kind of thing. So there, it\u2019s like the error bars are very wide but there\u2019s still some sort of synchronization necessary.\n   Right. And I guess that\u2019s a general theme when thinking about synchronization: different applications require different levels of synchronization, but more closely synchronized never hurts.\n   There\u2019s definitely tradeoffs as you start to get into the lower bounds, but yeah. If they were all free, sure, I\u2019d like to have them exactly the same.\n   How do people normally approach this problem of clock synchronization? What are the standard tools out there?\n   Most people, you just kind of run whatever your distribution shipped as an NTP daemon. NTP stands for the Network Time Protocol, and it is a protocol that up until not that long ago, I just kind of assumed used some kind of magic, and it knows how to talk to some servers on the Internet or some local servers that you probably then having talking to servers on the Internet, and it synchronizes your clocks with those servers. It exchanges some packets, maybe it takes a little while, maybe a few minutes, maybe longer. You probably don\u2019t understand exactly why, but eventually, your clocks are relatively in sync to within maybe tens, or so, of milliseconds.\n      Like I said, for a long time, I just kind of assumed it was magic and didn\u2019t really think too hard about it, and then at some point, I got tasked, within Jane Street, to actually look at some of this stuff and try and meet some requirements that were a little bit harder than the sort of standard tens of milliseconds synchronization. So I actually went and just was like, \u201cOkay. Well. How does NTP do this from first principles?\u201d right? Like, let\u2019s go read some of the papers from David Mills. Let\u2019s just go see if we can actually reason this out ourselves. At the end of the day, it\u2019s just four timestamps. There\u2019s a lot more complicated stuff around it, but the sort of core of it is these four timestamps.   Let\u2019s say I\u2019m the client, and you\u2019re the server. First, I send you a packet, but before I do I write down a timestamp. When you receive that packet, you write down a timestamp. Then, you send me a reply, and before you do you write down a timestamp. Finally, when I receive that reply, I write down a timestamp.   It may not seem that groundbreaking, but with just those four timestamps I can compute two important numbers, the offset, and the delay. The offset is how far my clock is off from yours, so if you think it\u2019s 12 pm and I think it\u2019s 12:05 pm then the offset would be five minutes. The delay is how long it took those packets to traverse the network. To compute those numbers you basically take a system of equations, and for me, an important aspect was actually writing down, with a piece of paper and a pencil, and solving these equations myself, was understanding that there\u2019s a sort of huge assumption in this protocol, that the delay for that first packet, where I timestamped then you did, and the delay for the second packet, where you timestamped and then I did, the assumption is that those times are the same and if they\u2019re not the same they introduce what\u2019s called error, and that is a sort of very important aspect. That is an assumption that is made so that you can actually solve those equations to get the offset and the delay.\n   Can you maybe explain what it is about the calculation that depends on the symmetry between the send time and the received time?\n   Those delays are kind of what tie it together, right? You know that if the clocks were in sync you know that the timestamp that you took minus the timesstamp that I took should be equal to the delay of the packet to get to you, right? And vice versa. My timestamp, from the second one that I received, minus your timestamp should be equal to the delay that it took for the packet to get from you to me. And you\u2019re like, \u201cWell. What do I do with this information?\u201d And you say, \u201cWhat if I just assume that those two delays are equal?\u201d and if I assume that those two delays are equal, then I can start rearranging the various pieces of the equation. And then that\u2019s how you can actually solve for the delay and the offset.\n   What\u2019s the role of the two timestamps on the server-side? So, if you ask me what time it is, I write down when I receive it, and then I write down the time where I send it back. You could imagine a simpler protocol with just three timestamps. Then you just assume that that time that I wrote down happened in the middle of that interval, the interval between the time you sent the first method and received the second message.\n   How do you know when in the middle is, right? There\u2019s lots of vagaries that happen with operating systems like if you timestamp it on either end, as soon as you receive the packet you timestamp it, and then maybe you have to do some work, and then right before you send it back you timestamp it, and that\u2019s sort of how you get closest to those differences I mentioned representing the actual network delay from one to the other.\n   And I guess an extra assumption that you\u2019re making here is that in that period between the first timestamp and the second timestamp you had better assume that the rate at which the clock is going forward is about right. I think that throws another error term into the equation. It\u2019s, I think, typically extremely small, right? If you just, it certainly seems like something you can, in practice, ignore. Because if you just look at the number of parts per million, or whatever that you were talking about, in terms of how much drift there is in a real computer clock, I think that is, in fact, pretty tiny.\n   Right, well you\u2019ve got the correction being applied by the time daemon that\u2019s running on the computer, which is keeping the clock in sync. Presumably, the server-side of this communication is also taking time from somewhere either reference clock or some sort of higher upstream stratum in NTP, like clocks that are better than it, something like a GPS receiver, and it has applied a sort of correction to the operating system to say, \u201cHey, I currently believe that the frequency is off by this much. Please correct that when you hand me back time.\u201d So, I feel like your biggest \u2013 I guess to your point of being able to ignore in practice \u2013 your biggest concern would be if in between those two timestamps something massive changed, like the temperature rose or dropped by many, many degrees or something such that, that frequency correction was now just wildly incorrect.\n   Okay, so we have now a network protocol. Put a timestamp, send a message, another timestamp, another timestamp, you get it back. Now the computer that started all this has some estimate for how much it\u2019s clock is off. What does it do then?\n   In the simple world, you could just set your time. You could just, you could just sort of say like, \u201cAnd the time should be X,\u201d but that\u2019s not generally how most Network Time Protocol daemons work. What they\u2019ll do is they\u2019ll take a number of samples from a single server, but many times you have multiple servers configured so you\u2019ll take many samples from multiple servers, and you\u2019ll sort of apply different criteria to these things to decide if you should even consider them. I think the reference implementation of NTPD has this notion of a \u201cpopcorn spike,\u201d where if your offset, you know, if you\u2019ve gotten back 30 samples and they all kind of look about the same, but then you get one that\u2019s wildly off, you just kind of say like, \u201cI\u2019m gonna ignore that one, because likely that was just due to some crazy queueing somewhere in the network or something like that.\u201d\n   You can sort of think of this as a kind of voting algorithm: You have a bunch of different oracles that are telling you things about what time is, you kind of bring them all together and have some way of computing an aggregate assumption about what the time currently is that tries to be robust to errors and drop outliers and the like.\n   Yeah, I think that\u2019s right. You try to pick out the people who are lying to you, right? Some of those servers you might be talking to upstream might just be telling you incorrect things. They\u2019re generally referred to in sort of NTP parlance as falsetickers, and the ones who are not falsetickers are truechimers.\n      I\u2019m not sure why exactly these are the names, but these are some of the names you might see if you\u2019re looking around the internet. So you try and pick out the ones that are telling you the truth. You apply some other various heuristics to them to try and figure out which ones you think are the best, right? Which ones maybe have the smallest error bars \u2013 even though you might think that these are decent sources to use some of them might have wider error bars than others, right, like your samples may represent a sort of wider range than the other ones \u2013 so you try and figure out which ones are the best and then you use that to sort of tell your operating system to effectively speed up or slow down its frequency correction for how off it is, and try and sort of remove that error over time. You don\u2019t just abruptly adjust the time that the system thinks it is. Most time daemons will not aggressively step the clock. The reason for that is that most applications do not enjoy when the time just changes drastically, especially not when it changes drastically in the negative direction.\n   This highlights another property you want out of your clocks, which we haven\u2019t touched on yet, which is: we said we want our clocks to be accurate. Your criterion for what it means for them to be right is you go to them and ask them what time it is, and they give numbers pretty close to each other. But there\u2019s another property you want, which is you want the clocks to, in a micro sense, advance about a second per second and you especially want it to never go backwards, because there are lots of algorithms on a computer, which are making the assumption implicitly and you know, naively reasonably, that the clocks only go forward, and lots of things can get screwed up when you allow clocks to jump backwards.\n   Right. So, a way\n......", "posttime": "2021-08-09 02:58:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u65f6\u949f,clock,\u65f6\u95f4", "title": "\u65f6\u949f\u540c\u6b65 (2020)", "title_en": "Clock Synchronization (2020)", "transed": 1, "url": "https://signalsandthreads.com/clock-synchronization/", "via": "", "real_tags": ["2020", "\u65f6\u949f", "clock", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "abc583fc1a4aecb759f34e079b198bb5.png", "infoid": 1072162, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u5386\u5c71\u5927\u00b7\u963f\u52a0\u76ae\u6258\u592b\uff08Aleksandr Agapitov\uff09\u8ba8\u8bba\u4e86\u56f4\u7ed5\u4ed6\u51b3\u5b9a\u4ece Xsolla \u88c1\u5458\u7ea6 150 \u540d\u5458\u5de5\u7684\u6700\u65b0\u4e89\u8bae\u3002\u4ed6\u89e3\u91ca\u4e86\u5982\u4f55\u51c6\u786e\u8bc4\u4f30\u5458\u5de5\u7ee9\u6548\u4ee5\u53ca\u4ed6\u5bf9\u6279\u8bc4\u4ed6\u7684\u4eba\u7684\u770b\u6cd5\u3002 Meduza \u4e8e 8 \u6708 6 \u65e5\u53d1\u8868\u4e86\u5bf9 Agapitov \u7684\u91c7\u8bbf\u3002\u4ee5\u4e0b\u662f\u91c7\u8bbf\u6458\u8981\u3002\u516c\u53f8\u88c1\u5458\u51b3\u5b9a\u7684\u7075\u611f\u6765\u81ea Netflix\u3001Harward \u548c\u5176\u4ed6\u7ec4\u7ec7\uff0c\u8fd9\u4e9b\u7ec4\u7ec7\u5b9a\u671f\u89e3\u96c7 10% \u6700\u4e0d\u656c\u4e1a\u548c\u6548\u7387\u6700\u4f4e\u7684\u5458\u5de5\u3002\u7136\u800c\uff0cXsolla \u6ca1\u6709\u8ba1\u5212\u89e3\u96c7\u8fd9\u4e48\u591a\u4eba\uff0c\u76f4\u5230\u5b83\u505c\u6b62\u540c\u6bd4\u589e\u957f 40%\u3002\u7ee9\u6548\u8bc4\u4f30\u7cfb\u7edf\u4e8e 2021 \u5e74\u521d\u5b9e\u65bd\u3002\u516c\u53f8\u6839\u636e 30 \u4e2a\u7279\u5f81\u4ee5 100 \u5206\u5236\u8861\u91cf\u5458\u5de5\u7684\u6548\u7387\u3002\u8be5\u5217\u8868\u5305\u62ec\u5728\u5185\u90e8 Wiki \u4e2d\u64b0\u5199\u548c\u9605\u8bfb\u6587\u7ae0\u3001\u521b\u5efa\u548c\u5173\u95ed\u4efb\u52a1\u5de5\u5355\uff0c\u4ee5\u53ca\u4eea\u8868\u677f\u6d3b\u52a8\u548c\u53c2\u4e0e\u5185\u90e8\u4f1a\u8bae\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u5199\u4f5c\u548c\u9605\u8bfb\u6587\u672c\u6bd4\u505a\u6f14\u8bb2\u66f4\u6709\u6548\u7387\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4ed6\u8ba4\u4e3a\u6bcf\u4e2a\u5458\u5de5\u90fd\u5e94\u8be5\u9605\u8bfb Xsolla Wiki \u4e2d\u6709\u5173\u4e1a\u52a1\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4fe1\u606f\u3002 \u201c\u6709\u4e9b\u4eba\u53ea\u662f\u4e0d\u60f3\u81ea\u5b66\u6216\u4e86\u89e3\u516c\u53f8\u7684\u8ba1\u5212\u3002\u6211\u4eec\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u4e30\u539a\u7684\u9063\u6563\u8d39\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002\u827e\u514b\u7d22\u62c9\u53ea\u8ddf\u8e2a\u5de5\u4f5c\u65e5\u5fd7\uff0c\u6240\u4ee5\u521b\u59cb\u4eba\u8ba4\u4e3a\u516c\u53f8\u6ca1\u6709\u4fb5\u72af\u5458\u5de5\u9690\u79c1\u3002\u4ed6\u58f0\u79f0\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u201c\u6570\u5b57\u8db3\u8ff9\u201d\u4e0d\u53ef\u89c1\uff0c\u4ed6\u4eec\u5c31\u4e0d\u5e94\u8be5\u5728 Xsolla \u5de5\u4f5c\u3002\u8be5\u516c\u53f8\u8fd8\u8ba1\u5212\u5b9e\u65bd\u6240\u8c13\u7684\u201c\u6570\u5b57\u955c\u50cf\u201d\uff0c\u4ee5\u4fbf\u6bcf\u4f4d\u5458\u5de5\u90fd\u80fd\u4e86\u89e3\u4eba\u5de5\u667a\u80fd\u5bf9\u4ed6\u4eec\u7684\u5de5\u4f5c\u548c\u656c\u4e1a\u5ea6\u7684\u770b\u6cd5\u3002\u7136\u800c\uff0c\u5f00\u53d1\u56e2\u961f\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\u5e76\u4e0d\u70ed\u60c5\u200b\u200b\uff0c\u6240\u4ee5\u5b83\u7684\u63a8\u51fa\u6b63\u5728\u7b49\u5f85\u4e2d\u3002\n\u7531\u4e8e\u5927\u6d41\u884c\u5bf9\u6e38\u620f\u884c\u4e1a\u7684\u5f71\u54cd\uff0cXsolla \u53bb\u5e74\u7684\u6536\u5165\u589e\u957f\u4e86 80%\u3002\u7136\u800c\uff0c\u589e\u957f\u653e\u7f13\u662f\u56e0\u4e3a\u7f3a\u4e4f\u7ebf\u4e0b\u6d3b\u52a8\u4f7f\u5f97\u5e73\u53f0\u66f4\u96be\u5438\u5f15\u65b0\u5ba2\u6237\u3002\u6839\u636e Agapitov \u7684\u8bf4\u6cd5\uff0cXsolla \u5728\u8fc7\u53bb\u516d\u4e2a\u6708\u4e2d\u505c\u6b62\u4e86 40% \u7684\u589e\u957f\uff0c\u56e0\u6b64\u4ed6\u51b3\u5b9a\u88c1\u5458\u3002\u5927\u7ea6150\u540d\u4e0b\u5c97\u5458\u5de5\u5360\u516c\u53f8500\u4eba\u5de6\u53f3\u5458\u5de5\u7684\u4e09\u5206\u4e4b\u4e00\u3002\u76ee\u6807\u662f\u5c06\u5de5\u8d44\u9884\u7b97\u51cf\u5c11 10%\uff0c\u800c\u4e0d\u662f\u89e3\u96c7 10% \u7684\u5458\u5de5\u3002\u963f\u52a0\u76ae\u6258\u592b\u51c6\u5907\u5728\u5fc5\u8981\u65f6\u4ece\u8bc4\u7ea7\u5e95\u90e8\u89e3\u96c7\u5c3d\u53ef\u80fd\u591a\u7684\u8868\u73b0\u4e0d\u4f73\u7684\u4eba\uff0c\u4ee5\u51cf\u5c11 10% \u7684\u5de5\u8d44\u57fa\u91d1\u3002\u5927\u591a\u6570\u88c1\u5458\u53d1\u751f\u5728\u827e\u514b\u7d22\u62c9\u6700\u521d\u6210\u7acb\u7684\u5f7c\u5c14\u59c6\u3002\u963f\u52a0\u76ae\u6258\u592b\u89e3\u96c7\u4e86 6 \u540d\u7f8e\u56fd\u5458\u5de5\uff0850 \u540d\u7f8e\u56fd\u5458\u5de5\uff09\u548c 2 \u540d\u4e9a\u6d32\u5458\u5de5\uff0812 \u540d\u5728\u97e9\u56fd\u529e\u516c\u5ba4\u5de5\u4f5c\u7684\u5458\u5de5\uff09\u3002\u516c\u53f8\u88c1\u6389\u4e86\u4e0d\u540c\u9886\u57df\u7684\u4e13\u804c\u4eba\u5458\u3002 \u201c\u6700\u5dee\u7684\u7a0b\u5e8f\u5458\u3001\u6700\u5dee\u7684\u8425\u9500\u4eba\u5458\u3001\u6700\u5dee\u7684\u529e\u516c\u5ba4\u7ecf\u7406\u3001\u6700\u5dee\u7684\u7ba1\u7406\u5458\uff0c\u751a\u81f3\u6700\u5dee\u7684\u4f1a\u8ba1\u5e08\uff0c\u201dAgapitov \u8bc4\u8bba\u9053\u3002 Xsolla \u8ba1\u5212\u6bcf 12 \u4e2a\u6708\u524a\u51cf 10% \u7684\u9884\u7b97\uff0c\u76f4\u5230\u5b83\u518d\u6b21\u5f00\u59cb\u663e\u793a\u81f3\u5c11 40% \u7684\u589e\u957f\u3002\u8be5\u516c\u53f8\u76ee\u524d\u6b63\u5728\u4e9a\u6d32\u548c\u6b27\u6d32\u5bfb\u627e\u65b0\u7684\u4eba\u624d\u3002\n\u963f\u52a0\u76ae\u6258\u592b\u8fd8\u627f\u8ba4\uff0c\u4ed6\u7684\u76f4\u8a00\u4e0d\u8bb3\u53ef\u80fd\u4f1a\u5413\u5230\u5f88\u591a\u5458\u5de5\u3002 \u201c\u6211\u610f\u8bc6\u5230\u6211\u7684\u60c5\u5546\u6709\u95ee\u9898\uff0c\u4f46\u6211\u6b63\u5728\u52aa\u529b\uff0c\u201d\u4ed6\u8bf4\u3002\u5c3d\u7ba1\u5927\u89c4\u6a21\u88c1\u5458\uff0c\u4ed6\u5e76\u4e0d\u5bb3\u6015\u53ef\u80fd\u7684\u8c03\u67e5\u3002\u4ed6\u8ba4\u4e3a Xsolla \u5e76\u6ca1\u6709\u8fdd\u53cd\u4fc4\u7f57\u65af\u7684\u52b3\u52a8\u6cd5\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709\u6b63\u5f0f\u89e3\u96c7\u4efb\u4f55\u4eba\u3002 \u201c\u5bf9\u4e8e\u6536\u5230\u8fd9\u5c01\u4fe1\u7684\u6240\u6709\u5458\u5de5\uff0c\u6211\u4eec\u8bf4\u516c\u53f8\u4e0d\u91cd\u89c6\u4f60\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u4e3a\u4f60\u627e\u5230\u4e00\u4efd\u85aa\u6c34\u66f4\u9ad8\u7684\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bc4\u8bba\u9053\u3002 \u201c\u540c\u6837\uff0c\u4f60\u5bf9 Xsolla \u7684\u672a\u6765\u4e5f\u4e0d\u611f\u5174\u8da3\u3002\u6240\u4ee5\u8fd9\u662f\u4f60\u6177\u6168\u7684\u9063\u6563\u8d39\uff0c\u795d\u4f60\u597d\u8fd0\u3002\u201d\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u4e5f\u610f\u8bc6\u5230\uff0c\u5728\u8fd9\u573a\u4e89\u8bae\u4e4b\u540e\uff0c\u6709\u4e9b\u4eba\u53ef\u80fd\u60f3\u8981\u79bb\u5f00\u3002\u4f46\u4ed6\u8ba4\u4e3a\u4ed6\u7684\u516c\u53f8\u53ea\u9700\u8981\u5173\u5fc3\u4e2a\u4eba\u548c\u804c\u4e1a\u53d1\u5c55\u7684\u656c\u4e1a\u5458\u5de5\u3002\u4ed6\u58f0\u79f0\u7f8e\u56fd\u5a92\u4f53\u4f1a\u8ba4\u4e3a\u8fd9\u4e00\u51b3\u5b9a\u975e\u5e38\u79ef\u6781\uff0c\u56e0\u4e3a Xsolla \u9075\u5faa\u201c\u8be5\u5730\u533a\u5e38\u89c1\u7684\u505a\u6cd5\u201d\u3002\u963f\u52a0\u76ae\u6258\u592b\u63a5\u7740\u8bf4\uff0c\u5982\u4eca\u7684\u516c\u53f8\u5982\u4f55\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4\uff0c\u5982\u679c\u4e0d\u5f97\u4e0d\u89e3\u96c7\u4ed6\u4eec\u7684\u4ee3\u8868\uff0c\u53ef\u80fd\u4f1a\u8fc7\u4e8e\u8c28\u614e\uff0c\u8fd9\u4f1a\u4f7f\u8fd9\u4e9b\u5458\u5de5\u51e0\u4e4e\u4e0d\u53d7\u88c1\u5458\u7684\u5f71\u54cd\u3002 \u201c\u6211\u4eec\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u5c3d\u53ef\u80fd\u65e0\u504f\u89c1\u3002\u56e0\u6b64\uff0c\u4ece\u7f8e\u56fd\u5a92\u4f53\u548c\u793e\u4f1a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\uff08\u6839\u636e\u7b97\u6cd5\u89e3\u96c7\u4e00\u4e2a\u4eba\uff09\u6bd4\u67d0\u4e9b\u7ecf\u7406\u6839\u636e\u4ed6\u4eec\u81ea\u5df1\u7684\u89c2\u70b9\u8fd9\u6837\u505a\u8981\u597d\u5f97\u591a\uff0c\u201c\u4ed6\u8bf4\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u6574\u4e2a\u4e89\u8bae\u59cb\u4e8e\u4fc4\u7f57\u65af\u7684\u8fdc\u7a0b\u5de5\u4f5c\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u95ee\u9898\u3002\u4ed6\u58f0\u79f0\u6709\u4e9b\u4eba\u89c9\u5f97\u5728\u5bb6\u5de5\u4f5c\u5f88\u56f0\u96be\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4eba\u6279\u8bc4\u4ed6\u7684\u51b3\u5b9a\uff0c\u90a3\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u610f\u8bc6\u5230\u81ea\u5df1\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u8fd8\u6307\u51fa\uff0c\u4e0e\u4ed6\u5408\u4f5c\u7684\u7f8e\u56fd\u516c\u5173\u516c\u53f8\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u662f\u516c\u53f8\u7684\u5371\u673a\u3002 \u201c\u65e0\u8bba\u4f60\u544a\u8bc9\u5a92\u4f53\u4ec0\u4e48\uff0c\u53ea\u6709\u4e24\u79cd\u6545\u4e8b\u2014\u2014\u6050\u60e7\u7684\u6545\u4e8b\u548c\u5e0c\u671b\u7684\u6545\u4e8b\u3002\u6050\u60e7\u5356\u5f97\u66f4\u597d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5356\u5f97\u5f88\u597d\u7684\u53ef\u6015\u6545\u4e8b\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002", "note_en": "Aleksandr Agapitov discussed the latest controversy surrounding his decision to lay off around 150 employees from Xsolla. He explained how exactly employee performance has been evaluated and what he thinks of people criticizing him.\n  An interview with Agapitov was   published by Meduza  on August 6. Below is the summary of that interview.\n  The company\u2019s decision regarding layoffs was inspired by Netflix, Harward, and other organizations that lay off 10% of the most unengaged and ineffective employees on a regular basis. However, Xsolla had no plans to fire these many people until it stopped growing by 40% year-over-year.\n The performance rating system was implemented in early 2021. The company measures its employees\u2019 efficiency on a 100-point scale, based on 30 characteristics. The list includes writing and reading articles in the internal Wiki, creating and closing task tickets, as well as dashboard activity and participation in internal meetings.\n According to Agapitov, writing and reading texts is way more efficient than making presentations. That\u2019s why he thinks that every employee should read the information about the business and other companies in Xsolla\u2019s Wiki. \u201cSome people just didn\u2019t really want to educate themselves or learn about the company\u2019s plans. We offered them a generous severance pay,\u201d Agapitov said.\n Xsolla only tracks work logs, so the founder thinks that the company doesn\u2019t violate employees\u2019 privacy. He claimed that if a person\u2019s \u201cdigital footprint\u201d is not visible, they shouldn\u2019t work at Xsolla.\n The company also planned to implement the so-called \u201cdigital mirror,\u201d so every employee could learn what AI thinks of their work and engagement. However, the development team wasn\u2019t enthusiastic about this idea, so its rollout is pending.\n  Xsolla\u2019s revenue increased by 80% last year, thanks to the effect that the pandemic had on the games industry.\n However, the growth slowed down because the lack of offline events made it harder to attract new customers to the platform.\n According to Agapitov, Xsolla stopped showing a 40% growth during the last six months, so he decided to reduce the staff.\n  Roughly 150 laid-off employees account for a third of the company\u2019s staff of around 500 people. The goal was to reduce the salary budget by ten percent, not to fire 10 percent of the employees. Agapitov was prepared to fire as many low-performing people from the bottom of the rating as necessary to achieve a 10% salary fund reduction.\n Most layoffs happened in Perm, where Xsolla was initially founded. Agapitov fired six people from the US (out of 50 US-based staff) and two people from Asia (out of 12 employees working at the South Korean office).\n The company laid off people specializing in different spheres. \u201cWorst programmers, worst marketers, worst office managers, worst admins, and even worst accountants,\u201d Agapitov commented.\n Xsolla plans to cut 10% of its budget every 12 months until it starts showing at least a 40% growth again. The company is now looking for new talent in Asia and Europe.\n Agapitov also admitted that his blunt statements could have scared a lot of employees. \u201cI realize I\u2019m having trouble with my emotional intelligence but I\u2019m working on it,\u201d he said.\n Despite the mass layoffs, he isn\u2019t afraid of possible investigations. He thinks that Xsolla hasn\u2019t violated Russian labor laws and, formally, hasn\u2019t fired anyone yet. \u201cTo all employees who received the letter, we said that the company doesn\u2019t value you, so we will find you a better job with a better salary,\u201d Agapitov commented. \u201cLikewise, you aren\u2019t interested in Xsolla\u2019s future either. So here is your generous severance pay, good luck.\u201d\n The Xsolla founder also realizes that some people might want to leave in the wake of this controversy. But he thinks that his company only needs engaged employees who care about their personal and professional growth.\n  He claimed that the US media would have seen the decision as quite positive, as Xsolla follows the \u201cpractices common for this region.\u201d\n Agapitov went on to say how companies nowadays protect minorities and can be overly cautios if they have to fire their representatives, which can make these employees almost immune to layoffs. \u201cOur algorithm-based solution is as unbiased as possible. Therefore, from the point of view of the US media and society, it is much better for us [to fire a person based on the algorithm] rather than some manager doing it, based on their own views,\u201d he said.\n According to Agapitov, the whole controversy started because remote work in Russia is a huge problem. He claimed that some find it difficult to work from home, so if someone criticizes his decision, it is only because they realize that they are inefficient employees themselves.\n The Xsolla founder also noted that the US PR firm he worked with doesn\u2019t see this situation as a crisis for the company. \u201cWhatever you tell the press, there are only two kinds of stories  \u00a0\u2014  stories of fear and stories of hope. Fear sells better, and this is a scary story that sells very well,\u201d Agapitov said.", "posttime": "2021-08-09 02:57:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u6267\u884c\u5b98,ceo", "title": "\u827e\u514b\u7d22\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u8868\u793a\uff0c\u4f7f\u7528\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u89e3\u96c7\u53ef\u4ee5\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4", "title_en": "Xsolla CEO says firing using an algorithm-based solution protect minorities", "transed": 1, "url": "https://gameworldobserver.com/2021/08/06/xsolla-founder-on-mass-layoffs-and-ai-based-employee-appraisal-system", "via": "", "real_tags": ["\u7b97\u6cd5", "\u6267\u884c\u5b98", "ceo"]}, {"category": "", "categoryclass": "", "imagename": "111c6720bb4383460be17dcfe7dffeaf.jpeg", "infoid": 1072160, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u82cf\u683c\u5170\u5a01\u58eb\u5fcc\u5236\u9020\u5546\u683c\u5170\u83f2\u8fea (Glenfiddich) \u5ba3\u5e03\uff0c\u5c06\u6539\u9020\u5176\u9001\u8d27\u5361\u8f66\uff0c\u4ee5\u4f7f\u7528\u7531\u5176\u81ea\u5df1\u7684\u5a01\u58eb\u5fcc\u84b8\u998f\u8fc7\u7a0b\u4ea7\u751f\u7684\u5e9f\u7269\u5236\u6210\u7684\u4f4e\u6392\u653e\u6cbc\u6c14\u3002\u8be5\u516c\u53f8\u8868\u793a\u5df2\u5728\u5176\u4f4d\u4e8e\u82cf\u683c\u5170\u4e1c\u5317\u90e8\u7684 Dufftown \u917f\u9152\u5382\u5b89\u88c5\u4e86\u52a0\u6cb9\u7ad9\uff0c\u4f7f\u7528\u5176\u6bcd\u516c\u53f8 William Grant and Sons \u5f00\u53d1\u7684\u6280\u672f\u3002\u5b83\u5c06\u5176\u751f\u4ea7\u5e9f\u7269\u548c\u6b8b\u7559\u7269\u8f6c\u5316\u4e3a\u4ea7\u751f\u6700\u5c11\u4e8c\u6c27\u5316\u78b3\u548c\u5176\u4ed6\u6709\u5bb3\u6392\u653e\u7269\u7684\u8d85\u4f4e\u78b3\u71c3\u6599 (ULCF) \u6c14\u4f53\u3002 Glenfiddich \u8868\u793a\uff0c\u5411\u4f7f\u7528\u7531\u9152\u5382\u5e9f\u54c1\u5236\u6210\u7684\u71c3\u6599\u7684\u8fc7\u6e21\u662f\u201c\u95ed\u73af\u201d\u53ef\u6301\u7eed\u53d1\u5c55\u8ba1\u5212\u7684\u4e00\u90e8\u5206\u3002 William Grant \u917f\u9152\u5382\u4e3b\u7ba1 Stuart Watts \u8868\u793a\uff0c\u4f20\u7edf\u4e0a\uff0c\u683c\u5170\u83f2\u8fea\u51fa\u552e\u9ea6\u82bd\u5236\u9020\u8fc7\u7a0b\u4e2d\u5269\u4e0b\u7684\u8c37\u7269\uff0c\u7528\u4e8e\u9ad8\u86cb\u767d\u725b\u9972\u6599\u3002\u7136\u800c\uff0c\u901a\u8fc7\u538c\u6c27\u6d88\u5316\u2014\u2014\u7ec6\u83cc\u5206\u89e3\u6709\u673a\u7269\u8d28\uff0c\u4ea7\u751f\u6cbc\u6c14\u2014\u2014\u917f\u9152\u5382\u8fd8\u53ef\u4ee5\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u6db2\u4f53\u5e9f\u7269\u6765\u5236\u9020\u71c3\u6599\uff0c\u5e76\u6700\u7ec8\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u56de\u6536\u6240\u6709\u5e9f\u7269\u3002 \u201c\u8fd9\u80cc\u540e\u7684\u601d\u8003\u8fc7\u7a0b\u662f&#39;\u6211\u4eec\u80fd\u505a\u4e9b\u4ec0\u4e48\u5bf9\u6211\u4eec\u6240\u6709\u4eba\u90fd\u66f4\u597d\uff1f&#39;\uff0c\u201d\u74e6\u8328\u8bf4\u3002\u8fd9\u5bb6\u84b8\u998f\u5382\u6bcf\u5e74\u9500\u552e\u8d85\u8fc7 1400 \u4e07\u74f6\u5355\u4e00\u9ea6\u82bd\u5a01\u58eb\u5fcc\uff0c\u8868\u793a\u5176\u57fa\u4e8e\u5a01\u58eb\u5fcc\u5e9f\u6599\u7684\u6cbc\u6c14\u5df2\u7ecf\u4e3a\u4e09\u8f86\u7ecf\u8fc7\u7279\u6b8a\u6539\u88c5\u7684\u5361\u8f66\u63d0\u4f9b\u52a8\u529b\uff0c\u8fd9\u4e9b\u5361\u8f66\u5c06\u683c\u5170\u83f2\u8fea\u70c8\u9152\u4ece\u8fbe\u592b\u6566\u7684\u751f\u4ea7\u8fd0\u8f93\u5230\u88c5\u74f6\u548c\u5305\u88c5\uff0c\u8986\u76d6\u5a01\u5ec9\u683c\u5170\u7279\u7684\u56db\u200b\u200b\u4e2a\u5730\u70b9\u5728\u82cf\u683c\u5170\u4e2d\u90e8\u548c\u897f\u90e8\u3002 16 \u4e16\u7eaa\u7684\u82f1\u56fd\u7f16\u5e74\u53f2\u5bb6\u62c9\u6590\u5c14\u00b7\u970d\u6797\u8c22\u5fb7 (Raphael Holinshed) \u5199\u9053\uff0c\u9002\u5ea6\u996e\u7528\u5a01\u58eb\u5fcc\u7684\u8bb8\u591a\u836f\u7528\u76ca\u5904\u5305\u62ec\u9632\u6b62\u201c\u5934\u90e8\u65cb\u8f6c\u3001\u820c\u5934\u6253\u55dd\u2026\u2026\u624b\u98a4\u6296\uff0c\u9aa8\u9abc\u75bc\u75db\u201d\u3002\n\u4e13\u5bb6\u73b0\u5728\u8865\u5145\u8bf4\uff0c\u5b83\u7684\u5e9f\u54c1\u4e5f\u6709\u5229\u4e8e\u73af\u5883\u3002\u683c\u5170\u83f2\u8fea\u8868\u793a\uff0c\u4e0e\u67f4\u6cb9\u548c\u5176\u4ed6\u5316\u77f3\u71c3\u6599\u76f8\u6bd4\uff0c\u5a01\u58eb\u5fcc\u751f\u4ea7\u8fc7\u7a0b\u4e2d\u6392\u653e\u7684\u6cbc\u6c14\u53ef\u5c06\u4e8c\u6c27\u5316\u78b3\u6392\u653e\u91cf\u51cf\u5c11 95% \u4ee5\u4e0a\uff0c\u5e76\u5c06\u5176\u4ed6\u6709\u5bb3\u9897\u7c92\u7269\u548c\u6e29\u5ba4\u6c14\u4f53\u6392\u653e\u91cf\u51cf\u5c11\u591a\u8fbe 99%\u3002 Glenfiddich \u4f7f\u7528\u7684\u5361\u8f66\u662f\u5361\u8f66\u5236\u9020\u5546\u4f9d\u7ef4\u67ef\u7684\u6539\u88c5\u8f66\u8f86\uff0c\u901a\u5e38\u4f7f\u7528\u6db2\u5316\u5929\u7136\u6c14\u3002\u636e\u84b8\u998f\u5382\u79f0\uff0c\u6bcf\u8f86\u6cbc\u6c14\u5361\u8f66\u6bcf\u5e74\u5c06\u6392\u653e\u591a\u8fbe 250 \u5428\u7684\u4e8c\u6c27\u5316\u78b3\u3002 Glenfiddich \u62e5\u6709\u5927\u7ea6 20 \u8f86\u5361\u8f66\u7684\u8f66\u961f\uff0cWatts \u76f8\u4fe1\u8be5\u6280\u672f\u53ef\u4ee5\u5e94\u7528\u4e8e William Grant and Sons \u5a01\u58eb\u5fcc\u54c1\u724c\u7684\u6574\u4e2a\u9001\u8d27\u8f66\u961f\u3002\u5b83\u8fd8\u53ef\u4ee5\u6269\u5927\u89c4\u6a21\uff0c\u4e3a\u5176\u4ed6\u516c\u53f8\u7684\u5361\u8f66\u63d0\u4f9b\u71c3\u6599\u3002\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0cNova Innovation \u5728\u82cf\u683c\u5170\u897f\u6d77\u5cb8\u5b89\u88c5\u4e86\u4e00\u7cfb\u5217\u6c34\u4e0b\u6da1\u8f6e\u673a\uff0c\u5176\u6da1\u8f6e\u673a\u4ea7\u751f\u53ef\u518d\u751f\u80fd\u6e90\uff0c\u4e3a\u5f53\u5730\u7684\u82cf\u683c\u5170\u5a01\u58eb\u5fcc\u9152\u5382\u4f9b\u7535\u3002\u683c\u5170\u83f2\u8fea\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u4f7f\u7528\u5176\u5e9f\u54c1\u4e3a\u6c7d\u8f66\u63d0\u4f9b\u71c3\u6599\u7684\u516c\u53f8\u3002 2012 \u5e74\uff0c\u72ec\u7acb\u5a01\u58eb\u5fcc\u5236\u9020\u5546\u56fe\u5229\u5df4\u4e01 (Tullibardine) \u6210\u4e3a\u4e16\u754c\u4e0a\u7b2c\u4e00\u5bb6\u4e3a\u6c7d\u8f66\u63d0\u4f9b\u751f\u7269\u71c3\u6599\u539f\u6599\u7684\u917f\u9152\u5382\u3002\u6ce8\u518c E&amp;T \u65b0\u95fb\u7535\u5b50\u90ae\u4ef6\uff0c\u6bcf\u5929\u5c06\u8fd9\u6837\u7684\u7cbe\u5f69\u6545\u4e8b\u53d1\u9001\u5230\u60a8\u7684\u6536\u4ef6\u7bb1\u3002", "note_en": "Scotch whisky maker Glenfiddich has announced that it will convert its delivery trucks to run on low-emission biogas made from waste products from its own whisky distilling process.\n    The company said it has installed fuelling stations at its Dufftown distillery in north-eastern Scotland which use technology developed by its parent company William Grant and Sons. It will convert its production waste and residues into an Ultra-Low Carbon Fuel (ULCF) gas that produces minimal carbon dioxide and other harmful emissions.\n Glenfiddich said the transition to using fuel made from the distillery\u2019s waste product is part of a \u201cclosed-loop\u201d sustainability initiative. Stuart Watts, distillery director at William Grant, said traditionally Glenfiddich has sold off spent grains left over from the malting process to be used for a high-protein cattle feed.\n However, through  anaerobic digestion \u2013 where bacteria break down organic matter, producing biogas \u2013 the distillery can also use the liquid waste from the process to make fuel and eventually recycle all of its waste products this way.\n \u201cThe thought process behind this was \u2018What can we do that\u2019s better for us all?\u2019,\u201d Watts said.\n  The distiller, which sells over 14 million bottles of single-malt whisky a year, said its whisky waste-based biogas is already powering three specially converted trucks that transport Glenfiddich spirit from production at Dufftown through to bottling and packaging, covering four William Grant sites in central and western Scotland.\n Sixteenth-century English chronicler Raphael Holinshed wrote that, when consumed moderately, whisky\u2019s many medicinal benefits include preventing the \u201chead from whirling, the tongue from lisping... the hands from shivering, the bones from aching.\u201d\n Experts now\u00a0add\u00a0that\u00a0its waste products could also benefit the environment. The biogas emitted by whisky&#39;s production process cuts CO2 emissions by over 95 per cent compared to diesel and other fossil fuels and reduces other harmful particulates and greenhouse gas emissions by up to 99 per cent, Glenfiddich said.\n The trucks Glenfiddich is using are converted vehicles from truck maker Iveco that normally run on liquefied natural gas.\u00a0Each biogas truck will displace up to 250 tonnes of CO2 annually, according to the distiller.\n Glenfiddich has a fleet of around 20 trucks and Watts believes the technology could be applied throughout the delivery fleets of William Grant\u00a0and Sons\u2019 whisky brands. It could also be scaled up to fuel other company\u2019s trucks.\n   Earlier this year,  Nova Innovation installed a series of underwater turbines off the west coast of Scotland, with its turbines generating renewable energy to power local Scotch whisky distilleries.\n  Glenfiddich is not the only one using its waste products to fuel its vehicles. In 2012,  independent whisky maker Tullibardine became the world\u2019s first distillery to supply ingredients to make biofuel for vehicles from its waste products.\n        Sign up to the  E&amp;T News e-mail to get great stories like this delivered to your inbox every day.", "posttime": "2021-08-09 02:57:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "whisky,\u5a01\u58eb\u5fcc", "title": "Glenfiddich \u4f7f\u7528\u81ea\u5df1\u7684\u5a01\u58eb\u5fcc\u5e9f\u6599\u4e3a\u5176\u5361\u8f66\u63d0\u4f9b\u71c3\u6599", "title_en": "Glenfiddich uses its own whisky waste to fuel its trucks", "transed": 1, "url": "https://eandt.theiet.org/content/articles/2021/07/glenfiddich-uses-own-whisky-waste-to-fuel-trucks/", "via": "", "real_tags": ["whisky", "\u5a01\u58eb\u5fcc"]}]