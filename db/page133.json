[{"category": "", "categoryclass": "", "imagename": "28ac4f3a7e6550a5ffe82d9ed8068891.jpg", "infoid": 1066979, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51fa\u4e8e\u67d0\u79cd\u539f\u56e0\uff0c\u4e0d\u6b62\u4e00\u4f4d\u54c8\u4f5b\u6559\u6388\u4f7f\u65b0\u95fb\u6210\u4e3a\u514b\u91cc\u5a01\u5c14\u4eba\u7684\u7b80\u4fbf\u3002\u62c5\u4efb\u6cd5\u5f8b\u6559\u6388\u5728\u56db\u5e74\u5185\uff0c\u53d1\u73b0\u81ea\u5df1\u88ab\u5438\u5f15\u5230\u4e00\u4e2a\u6b3a\u8bc8\u548c\u865a\u5047\u6307\u8d23\u7684\u7f51\u7edc\u4e2d\uff0c\u76f4\u5230\u4ed6\u7ec8\u4e8e\u6ca1\u6709\u5de5\u4f5c\uff0c\u65e0\u5bb6\u53ef\u5f52\u8005\uff0c\u5e76\u4e14\u5728\u6cd5\u5f8b\u8d39\u7528\u4e2d\u5360\u7528\u4e86300,000\u7f8e\u5143\u6765\u4fdd\u62a4\u81ea\u5df1\u3002\n \u5728\u53e6\u4e00\u4e2a\u6848\u4f8b\u4e2d\uff0c\u4e00\u540d\u54c8\u4f5b\u5927\u5b66\u79d1\u5b66\u5bb6\u5728\u764c\u75c7\u7814\u7a76\u4e2d\u5de5\u4f5c\u65e0\u60c5\u5730\u81f4\u529b\u4e8e\u4ed6\u81ea\u5df1\u7684\u4fe1\u4efb\u670b\u53cb\u548c\u540c\u4e8b\uff0c\u5176\u4e2d\u4e00\u4e9b\u4eba\u5931\u53bb\u4e86\u4ed6\u4eec\u7684\u623f\u5c4b\u548c\u50a8\u84c4\uff0c\u8d85\u8fc7600,000\u7f8e\u5143\u3002\u4ed6\u8fc5\u901f\u4f46\u5929\u771f\u5730\u6d3e\u4e86\u4e00\u5207\u5230\u5c3c\u65e5\u5229\u4e9a\u8bc8\u9a97\u8005\uff0c\u4ed6\u4eec\u7b54\u5e94\u4e86\u4ed6\u4e00\u4e2a\u9177\u76845000\u4e07\u7f8e\u5143\u56de\u62a5\u3002\u88ab\u6355\u540e\uff0c\u4ed6\u4ecd\u7136\u65e0\u6cd5\u627f\u8ba4\u5728\u611a\u5f04\u5468\u56f4\u7684\u4eba\u4e4b\u540e\u88ab\u611a\u5f04\u81ea\u5df1\u3002\n   \u5982\u679c\u6761\u4ef6\u662f\u6b63\u786e\u7684\uff0c\u5b83\u4ecd\u7136\u53ef\u4ee5\u5c55\u793a\u5373\u4f7f\u662f\u6700\u806a\u660e\u7684\u4eba\u4ecd\u7136\u53ef\u4ee5\u50cf\u6211\u4eec\u5176\u4f59\u7684\u90a3\u6837\u5bb9\u6613\u5fcd\u53d7\u6216\u8d2a\u5a6a\u3002\n \u7814\u7a76\u4eba\u5458\u5f80\u5f80\u601d\u8003\u4e86\u5982\u4f55\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u67d0\u4e9b\u4eba\u4e3a\u8bc8\u9a97\u7684\u4eba\uff0c\u7279\u522b\u662f\u5bf9\u4ed6\u4eba\u6765\u8bf4\u4f3c\u4e4e\u5982\u6b64\u660e\u663e\u7684\u5fc3\u7406\u3002\u8bc8\u9a97\u8005\u9488\u5bf9\u67d0\u4e9b\u4eba\u7684\u7279\u5f81\uff0c\u5305\u62ec\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u5229\u7528\u7684\u8106\u5f31\u6027\uff0c\u4f8b\u5982Naivet\u00e9\uff0c\u8fc7\u5ea6\u5229\u7528\uff0c\u5728\u4e00\u4e2a\u4eba\u7684\u667a\u529b\u6216\u80fd\u529b\u4e2d\u8fc7\u5ea6\u81ea\u4fe1\uff0c\u5bf9\u751f\u6d3b\u7acb\u5373\u53d6\u5f97\u6210\u529f\u7684\u8fc7\u5ea6\u4e50\u89c2\uff0c\u6216\u8005\u5bf9\u5e2e\u52a9\u4ed6\u4eba\u611f\u5230\u6109\u5feb\u7684\u613f\u671b\u3002\u968f\u7740\u4e92\u8054\u7f51\u7684\u6c9f\u901a\u53d8\u5f97\u66f4\u52a0\u590d\u6742\uff0c\u6240\u4ee5\u9a97\u5c40\u6240\u4ee5\u3002\u8bb8\u591a\u4eba\u4ecd\u7136\u843d\u5728\u5b83\uff0c\u56e0\u4e3a\u9a97\u5b50\u827a\u672f\u5bb6\u7ee7\u7eed\u7784\u51c6\u4f01\u4e1a\u4ee5\u53ca\u4e2a\u4eba\u3002\n \u7136\u800c\uff0c\u5728\u60a8\u751a\u81f3\u4e0e\u795e\u79d8\u7684\u5c3c\u65e5\u5229\u4e9a\u738b\u5b50\u8fbe\u5230\u4e2a\u4eba\u4e92\u52a8\u7684\u6c34\u5e73\u4e4b\u524d\uff0c\u8fd9\u6b21\u77ed\u6682\u7684\u8bed\u8a00\u5b66\u5bb6Deborah Schaffer\u53ef\u4ee5\u4e3a\u60a8\u63d0\u4f9b4-1-9\u7684\u5173\u4e8e\u5982\u4f55\u5728\u9996\u6b21\u8fdb\u5165\u65f6\u8bc6\u522b\u9a97\u5c40\u7535\u5b50\u90ae\u4ef6\u7684\u8bed\u8a00\u6a21\u5f0f\u4f60\u7684\u6536\u4ef6\u7bb1\u5e76\u5728\u8ba8\u4eba\u559c\u6b22\u7684\u8bdd\uff0c\u5982\u679c\u88ab\u6253\u7834\uff0c\u534e\u800c\u65e0\u4eba\u7684\u8bed\u8a00\u3002\n    \u5c3c\u65e5\u5229\u4e9a419\u7f3a\u70b9\uff08\u8be5\u53f7\u7801\u662f\u6307\u5c3c\u65e5\u5229\u4e9a\u5211\u6cd5\u7684\u6b3a\u8bc8\u90e8\u5206\uff09\u5b9e\u9645\u4e0a\u662f\u4e92\u8054\u7f51\u4e0a\u6700\u53e4\u8001\u7684\u9a97\u5c40\u3002\u4ed6\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u8ffd\u6eaf\u523020\u4e16\u7eaa20\u5e74\u4ee3\uff0c\u4ee5\u826f\u597d\u79f0\u4e3a\u897f\u73ed\u7259\u56da\u72af\u7684\u4fe1\u5fc3\u6280\u5de7\u7684\u5f62\u5f0f\u3002\u88ab\u8981\u6c42\u8d8a\u6765\u8d8a\u591a\u7684\u53d7\u5bb3\u8005\u8d8a\u6765\u8d8a\u591a\u7684\u8d44\u91d1\u6765\u91ca\u653e\u4f60\u6240\u5c0a\u91cd\u7684\u5916\u56fd\u8bb0\u8005\uff08\u81ea\u7136\u4e0d\u5b58\u5728\u7684\u4eba\uff09\uff0c\u5728\u897f\u73ed\u7259\u6b8b\u9177\u88ab\u76d1\u7981\uff0c\u4ee5\u6362\u53d6\u5927\u91cf\u5956\u52b1\uff08\u4ece\u672a\u6765\u8fc7\uff09\u3002\n \u5728\u66f4\u65b0\u7684419\u5c3c\u65e5\u5229\u4e9a\u9a97\u5c40\u4e2d\uff0c\u8981\u6c42\u6f5c\u5728\u7684\u6807\u8bb0\u652f\u4ed8\u5c0f\u989d\u9884\u4ed8\u6b3e\u8d39\u7528\uff0c\u6216\u8005\u8981\u6c42\u53d1\u9001\u4ed6\u4eec\u7684\u94f6\u884c\u4fe1\u606f\u6216\u4e2a\u4eba\u8be6\u7ec6\u4fe1\u606f\uff0c\u4ee5\u5e2e\u52a9\u79fb\u52a8\u5df2\u88ab\u9501\u5b9a\u7684\u8d44\u91d1\uff0c\u4e5f\u8bb8\u5728\u5916\u56fd\uff0c\u6216\u8005\u67d0\u4e2a\u5730\u65b9\u56f0\u96be\u3002\u4f5c\u4e3a\u56de\u62a5\uff0c\u4ed6\u4eec\u627f\u8bfa\u4e86\u4e00\u4e2a\u66f4\u5927\u7684\u57fa\u91d1\u56de\u62a5\u3002\u7531\u4e8e\u6545\u4e8b\u6765\u8bf4\uff0c\u4e5f\u8bb8\u5b83\u6765\u81ea\u4e00\u4f4d\u653f\u5e9c\u5b98\u5458\u7684\u6d41\u4ea1\u738b\u5b50\u7684\u91d1\u5e93\uff0c\u6216\u8005\u5782\u6b7b\u7684\u6148\u5584\u5bb6\u6025\u4e8e\u7559\u4e0b\u4ed6\u6216\u5979\u7684\u8d22\u5bcc\uff0c\u5728\u503c\u5f97\u7684\u7535\u5b50\u90ae\u4ef6\u6536\u4ef6\u4eba\u4e0a\u3002 \n\u867d\u7136Schafer\u53d1\u73b0\u4e86\u5979\u7684419\u5c01\u7535\u5b50\u90ae\u4ef6\u7684\u4e00\u534a\u8d77\u6e90\u4e8e\u5c3c\u65e5\u5229\u4e9a\uff0c\u5176\u4f59\u7684\u662f\u6765\u81ea\u5176\u4ed6\u5730\u65b9\uff0c\u901a\u5e38\u662f\u5176\u4ed6\u975e\u6d32\u548c\u4e2d\u4e1c\u56fd\u5bb6\u3002\u771f\u6b63\u6709\u8da3\u7684\u662f\u5982\u4f55\u5728\u8fd9\u4e9b\u914d\u7f6e\u4e2d\u4f7f\u7528\u8bed\u8a00\u3002\u8fd9\u4e9b\u6545\u4e8b\u662f\u5f7c\u6b64\u591a\u5f69\u7684\u53d8\u5316\uff0c\u4f46\u7528\u4e8e\u544a\u8bc9\u4ed6\u4eec\u7684\u8bed\u8a00\u662f\u6355\u6349\u6f5c\u5728\u6807\u8bb0\uff08\u8d2a\u5a6a\uff09\u60f3\u8c61\u529b\uff0c\u7f13\u89e3\u4ed6\u4eec\u7684\u6050\u60e7\uff0c\u5e76\u5efa\u7acb\u6301\u7eed\u53d7\u5bb3\u8005\u548c\u50f5\u5c40\u4e4b\u95f4\u7684\u5173\u7cfb\u7684\u5173\u952e\u3002\n \u4f17\u6240\u5468\u77e5\uff0c\u5927\u591a\u6570\u7535\u5b50\u90ae\u4ef6\u7531\u82f1\u8bed\u7684\u975e\u626c\u58f0\u5668\u7ec4\u6210\uff0c\u4ece\u8bb8\u591a\u8bed\u6cd5\u548c\u6807\u70b9\u9519\u8bef\uff0c\u7834\u788e\u7684\u8bed\u6cd5\uff0c\u7f3a\u5931\u7684\u5355\u8bcd\u548c\u6076\u6bd2\u4eba\u58eb\uff08\u201c\u5c06\u7acb\u9762\u8fbe\u5230\u5176\u5b9e\u9645\u7ed3\u8bba\u7684\u610f\u613f\u201d\u4e2d\uff0c\u8fd9\u662f\u660e\u786e\u7684\u201c\u8ffd\u6c42\u590f\u6d1b\u201d\uff09\u3002\u6709\u4e86\u8fd9\u4e48\u591a\u9519\u8bef\uff0c\u8fd9\u95e8\u8bed\u8a00\u600e\u4e48\u6b3a\u9a97\u4efb\u4f55\u4eba\uff1f\u901a\u5e38\uff0c\u53d7\u5bb3\u8005\u77e5\u9053\u8be5\u6d88\u606f\u6765\u81ea\u975e\u626c\u58f0\u5668\uff0c\u6216\u8005\u4ed6\u4eec\u53ef\u80fd\u662f\u975e\u6b63\u5f0f\u7684\u82f1\u8bed\u626c\u58f0\u5668\u672c\u8eab\uff0c\u53ef\u80fd\u5e76\u4e0d\u603b\u662f\u8bc6\u522b\u8bed\u6cd5\u9519\u8bef\u3002\u8fd9\u4e9b\u662f\u4e11\u964b\u7684\u8bed\u8a00\u8b66\u544a\u6807\u5fd7\uff0c\u6709\u52a9\u4e8e\u5220\u9664\u5927\u591a\u6570\u4eba\u7684\u5927\u591a\u6570\u4eba\u8db3\u4ee5\u9003\u907f\u9677\u9631\u5e76\u7559\u4e0b\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6545\u4e8b\u7559\u4e0b\u5174\u8da3\u7684\u8f83\u5c0f\u767e\u5206\u6bd4\u3002\n \u5c3d\u7ba1\u7f3a\u4e4f\u82f1\u8bed\u6d41\u7545\u6027\uff0c\u4f46\u8bc8\u9a97\u8005\u4f3c\u4e4e\u5df2\u9605\u8bfb\u5e76\u5438\u6536\u4e86\u6700\u5927\u7684\u8bed\u8a00Derring\u6545\u4e8b\u3002 419\u8bc8\u9a97\u7535\u5b50\u90ae\u4ef6\u5145\u6ee1\u4e86\u5f02\u5e38\u7684\u4f5b\u7f57\u91cc\u8fbe\u8bed\uff0c\u610f\u601d\u662f\u8bf4\u670d\u548c\u54c4\u9a97\u8bfb\u8005\u54ac\u4f4f\u5b50\u5f39\u5e76\u9075\u5b88\uff0c\u5982\u5f00\u653e\u95ee\u5019\uff08\u201c\u8d5b\u5b63\u7684\u8d5e\u7f8e\uff0c\u6211\u7948\u7977\u8fd9\u5c01\u4fe1\u5c31\u4f1a\u8fce\u63a5\u4f60\u201d\uff09\u548c\u9053\u6b49\uff08\u8d66\u514d\u8fd9\u5c01\u4fe1\u7684\u7a81\u7136;\u5b83\u662f\u7531\u4e8e\u5b83\u7684\u5feb\u901f\u6027\u201c\uff09\u3002\u8bc8\u9a97\u8005\u4f7f\u5949\u627f\u7684\u81ea\u7531\u5229\u7528\u5949\u627f\uff08\u201c\u60a8\u5df2\u7ecf\u88ab\u526f\u624b\u5411\u6211\u4fdd\u8bc1\u4e86\u5bf9\u60a8\u7684\u80fd\u529b\u548c\u53ef\u9760\u6027\u7684\u4fe1\u5fc3\u548c\u53ef\u9760\u6027\uff0c\u4ee5\u63a7\u5236\u9700\u8981\u6700\u5927\u673a\u5bc6\u6027\u7684\u9ad8\u51c0\u503c\u7684\u4f01\u4e1a\u4ea4\u6613\u3002\u201d\uff09\uff0c\u5b97\u6559\u4e0a\u8bc9\u63f4\u5f15\u4e0a\u5e1d\u7684\u5e0c\u671b\u5bfb\u627e\u5171\u540c\u7684\u5730\u9762\uff0c\u751a\u81f3\u4fdd\u5bc6\u548c\u9634\u8c0b\uff08\u201c\u7b2c\u4e00\uff0c\u6211\u5fc5\u987b\u5f81\u6c42\u60a8\u5bf9\u8fd9\u7b14\u4ea4\u6613\u7684\u6700\u4e25\u683c\u7684\u4fe1\u5fc3;\u8fd9\u662f\u5176\u6027\u8d28\u5b8c\u5168\u4fdd\u5bc6\u548c\u6700\u91cd\u8981\u7684\u79d8\u5bc6\u3002\u201d\uff09\u3002\n Schaffer\u8fd8\u5c55\u793a\u4e86419\u4e2a\u8bc8\u9a97\u8005\u4f7f\u7528\u7b56\u7565\uff0c\u4f8b\u5982\u5c06\u8bfb\u8005\u65bd\u52a0\u538b\u529b\uff0c\u73b0\u5728\u4e3a\u65f6\u5df2\u665a\uff08\u8feb\u5207\u5730\u56de\u590d\u6211\uff01\u201c\uff09\u5e76\u786e\u4fdd\u6240\u63d0\u51fa\u7684\u8ba1\u5212\u662f\u76f8\u5f53\u5b89\u5168\u7684\uff08\u201d\u6b64\u4ea4\u6613\u662f100\uff05\u65e0\u98ce\u9669\u201c\uff09\u800c\u4e14\u5de8\u5927\u7684\u4ef7\u503c\u548c\u4ef7\u503c\u3002\u8bc8\u9a97\u8005\u5728\u7b28\u62d9\u7684\u6f2b\u753b\u4e2d\u4f7f\u7528\u6280\u672f\uff0c\u519b\u4e8b\uff0c\u91d1\u878d\u6216\u5176\u4ed6\u4e13\u4e1a\u8bed\u8a00\u8fdb\u884c\u4e86\u975e\u51e1\u7684\u52aa\u529b\uff08\u201c\u653f\u5e9c\u5b98\u5458\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u3002\u6388\u4e88\u5404\u90e8\u59d4\u548c\u5bc4\u751f\u866b\u5728\u4f17\u591a\u7ecf\u53d1\u653e\u7684\u5408\u540c\u201d \uff09\u4e3a\u4e86\u4fdd\u6301\u4f5c\u4e3a\u5f8b\u5e08\uff0c\u4e00\u822c\u94f6\u884c\u6216\u94f6\u884c\u5b98\u5458\u7684\u501f\u53e3\u3002\n  \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u4efb\u4f55\u8425\u9500\u4fe1\u606f\u7684\u63d0\u4f9b\u94fe\u63a5\u968f\u65f6\u53d6\u6d88\u8ba2\u9605\u3002\n  \u8fd9\u4e00\u5207\u90fd\u4ee5\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u800c\u4e14\u5f88\u6709\u8da3\u7684\u53d9\u8ff0\uff0c\u8bb8\u591a\u666e\u901a\u4eba\u4e0d\u719f\u6089\uff0c\u6b7b\u4ea1\u767e\u4e07\u5bcc\u7fc1\u4eb2\u621a\u7684\u751f\u6d3b\uff0c\u62b5\u6d88\u4e86\u4ed6\u4eec\u7684\u8fd0\u6c14\uff0c\u6148\u5584\u5bb6\u548c\u738b\u5b50\uff0c\u4ed6\u4eec\u60f3\u8981\u4e3a\u4ed6\u4eba\u505a\u597d\u4e8b\uff0c\u4ee4\u4eba\u75db\u82e6\u7684\u5546\u4e1a\u7ba1\u7406\u4eba\u5458\u548c\u77f3\u6cb9Tycoons\uff0c\u6240\u6709\u4eba\u90fd\u5931\u53bb\u4e86\u4ed6\u4eec\u7684\u65b9\u5f0f\uff0c\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002\u901a\u8fc7\u8bb2\u8ff0\u8fd9\u4e9b\u9ad8\u5927\u7684\u6545\u4e8b\uff0c\u5e76\u5728\u540c\u60c5\u4e0a\u6f14\u594f\u540c\u60c5\uff0cGrifters\u8bd5\u56fe\u5c06\u4ed6\u4eec\u7684\u53d7\u5bb3\u8005\u4fb5\u5165\u4e00\u4e2a\u503a\u5238\uff0c\u4f7f\u4ed6\u4eec\u80fd\u591f\u6df1\u5165\u6295\u5165\u8ba1\u5212\u548c\u5c3d\u53ef\u80fd\u957f\u65f6\u95f4\u7684\u7ed3\u679c\u3002\u4ed6\u4eec\u611f\u5230\u6295\u5165\u548c\u5fe0\u8bda\u7684\u65f6\u95f4\u8d8a\u957f\uff0c\u4ed6\u4eec\u5c31\u8d8a\u8d8a\u5426\u8ba4\u5b83\u662f\u4e00\u4e2a\u9a97\u5c40\u3002\u6709\u65f6\u4ed6\u4eec\u4ece\u6765\u6ca1\u6709\u3002\n \u8bed\u8a00\u8bc8\u9a97\u8005\u7528\u6765\u7559\u4e0b\u6df1\u523b\u5370\u8c61\u548c\u5949\u627f\u662f\u5982\u6b64\u660e\u663e\u548c\u4e1a\u4f59\u7684\uff0c\u8fd9\u4f3c\u4e4e\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u88ab\u5e26\u8d70\u3002\u7136\u800c\uff0c\u8bb8\u591a\u666e\u901a\u4eba\u6bcf\u5e74\u90fd\u4f1a\u9677\u5165\u9677\u9631\u3002\u7136\u800c\uff0c\u8fd9\u79cd\u8bed\u8a00\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u4f5c\u4e3a\u6545\u4e8b\u53d7\u5bb3\u8005\u7684\u4e00\u90e8\u5206\u5f80\u5f80\u662f\u6709\u8bf4\u670d\u529b\u7684\uff0c\u5f80\u5f80\u5e0c\u671b\u548c\u60f3\u8981\u771f\u5b9e\u3002\u8fd9\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u9a97\u5c40\uff0c\u4f46\u4f3c\u4e4e\u6709\u6548\uff0c\u5f53\u5b83\u8fbe\u5230\u613f\u610f\u5ffd\u89c6\u8b66\u544a\u6807\u5fd7\u4ee5\u5bfb\u627e\u53ef\u4ee5\u4f7f\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u751f\u547d\u7684\u6551\u751f\u75c7\u6765\u8bf4\uff0c\u8fd9\u4e00\u5207\u90fd\u4ee5\u60b2\u4f24\u7ed3\u675f\u3002 \nJSTOR\u662f\u5b66\u8005\uff0c\u7814\u7a76\u4eba\u5458\u548c\u5b66\u751f\u7684\u6570\u5b57\u56fe\u4e66\u9986\u3002 JSTOR\u65e5\u5e38\u8bfb\u8005\u53ef\u4ee5\u5728JSTOR\u4e0a\u514d\u8d39\u8bbf\u95ee\u6211\u4eec\u7684\u6587\u7ae0\u80cc\u540e\u7684\u539f\u59cb\u7814\u7a76\u3002  \u60a8\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb\u4efb\u4f55\u8425\u9500\u4fe1\u606f\u7684\u63d0\u4f9b\u94fe\u63a5\u968f\u65f6\u53d6\u6d88\u8ba2\u9605\u3002 ", "note_en": "For some reason, more than one Harvard professor has made the news for being the easy mark of grifters. Take  the law professor who, over the course of four years, found himself drawn into a web of fraud and false accusations, until he was finally out of a job, homeless, and out $300,000 in legal fees to defend himself.\n In another case,  a Harvard scientist working in cancer research heartlessly conned his own trusting friends and colleagues, some of whom lost their homes and savings, out of $600,000. He promptly, but naively, sent it all to Nigerian scammers, who had promised him a cool $50 million in return. After being arrested, he still could not admit to having been fooled himself after fooling so many of the people around him.\n   It just goes to show that even the smartest person can still be as gullible or as greedy as the rest of us, if the conditions are right.\n Researchers often have pondered  the psychology of how and why certain people fall for scams, especially ones that appear to be so obvious to others.  Scammers target certain human traits, including vulnerabilities that can be easily exploited, such as naivet\u00e9,\u00a0overconfidence in one\u2019s intelligence or abilities, an overly optimistic expectation of immediate success in life, or a desire to feel good about helping others. As communication on the internet has gotten more sophisticated,  so have the scams. Many still fall for it, as con artists continue to target businesses as well as individuals.\n Before you even get to the level of a personal interaction with a mysterious Nigerian prince, however,  this short study by linguist Deborah Schaffer can give you the 4-1-9 on how to recognize the linguistic patterns of a scam email when it first enters your inbox and greets you in flattering, if broken, flowery language.\n    Nigerian 419 cons (the number refers to the fraud section of the Nigerian Criminal Code) are practically the oldest scams on the internet. They can actually be traced back to the 1920s, in the form of a confidence trick most gothically known as the Spanish Prisoner. The victims are asked to pay out more and more money to release the wealthy relative of your respectable foreign correspondents (who naturally doesn\u2019t exist), cruelly imprisoned in Spain, in return for a large reward (that never comes).\n In the updated 419 Nigerian scam, the potential mark is asked to pay a small advance fee, or asked to send their bank information or personal details to help move funds that have been locked up, perhaps in a foreign country, or somewhere plausibly difficult. In return, they\u2019re promised a much larger fund in return. As the story goes, perhaps it comes from the coffers of a prince in exile, a government official on the take, or a dying philanthropist anxious to bequeath his or her wealth upon a deserving email recipient.\n While Schaffer found half of her collection of 419 emails originated from Nigeria, the rest were from elsewhere, often other African and Middle Eastern countries. What\u2019s really interesting is how language is used in these con jobs. The stories are colorful variations of each other, but the language used to tell them are key to capturing a potential mark\u2019s (greedy) imagination, relieving their fears, and building a bond and relationship between an ongoing victim and grifter.\n It\u2019s well-known that most of the emails are composed by nonnative speakers of English, as is clear from the many grammatical and punctuation mistakes, broken syntax, missing words, and malapropisms ( \u201cthe will to personify the fa\u00e7ade to its practical conclusion\u201d for  \u201cpursue the charade\u201d). With so many mistakes, how can this language really fool anyone? Often, victims know the message comes from a nonnative speaker, or they may be nonnative English speakers themselves and may not always recognize grammatical errors. These are the ludicrous linguistic warning signs that helpfully remove most people who are savvy enough to escape the trap and leave the much smaller percentage who stay to be intrigued, starry-eyed, by an implausible story.\n Despite this lack of English fluency, the scammers seem to have read and absorbed the most swashbuckling tales of linguistic derring do. 419 scam emails are full of unusually florid language, meant to persuade and cajole the reader into biting the bullet and complying, such as in opening greetings ( \u201cCompliments of the season, and I pray that this mail meet you in go\u201d) and apologies ( \u201cPardon the abruptness of this letter; it is due to its exigency\u201d). Scammers make liberal use of flattery ( \u201cYou have been recommended by an associate who assured me in confidence of your ability and reliability in prosecuting a business transaction of high net value requiring maximum confidentiality.\u201d), religious appeals invoking God in the hopes of finding common ground, even secrecy and intrigue ( \u201cFirst, I must solicit your strictest confidence in this transaction; this is by virtue of its nature as being utterly confidential and top secret.\u201d).\n Schaffer also shows how 419 scammers use strategies such as pressuring readers to act now before it\u2019s too late ( \u201cGet Back To Me Urgently!\u201d) and assuring them that the proposed schemes are quite safe ( \u201cThis transaction is 100% risk free\u201d) and of immense worth and value. The scammers make extraordinary efforts to use technical, military, financial or otherwise professional language in a clumsy caricature of what formal, educated English sounds like ( \u201cgovernment officials . . . awarded themselves contracts that were grossly over-invoiced in various ministries and parastatals\u201d) to keep up the pretence of being a barrister, a brigadier-general, or a bank official.\n  You may unsubscribe at any time by clicking on the provided link on any marketing message.\n  This is all wrapped up in unrealistic, yet intriguing narratives that many ordinary people are not familiar with, of the lives of dead millionaires\u2019 relatives, down on their luck, philanthropists and princes who want to do good for others, distressed business executives and oil tycoons, all who\u2019ve lost their way and need your help. By telling these tall tales, and playing on sympathy, grifters try to entice their victims into a bond that keeps them deeply invested in the scheme and the outcome for as long as possible. The longer they feel invested and loyal, the more they\u2019ll continue to deny it\u2019s a scam. Sometimes they never do.\n The language scammers use to impress and flatter is so obvious and amateurish that it can seem astonishing that anyone could ever be taken in. Yet many ordinary people do fall into the trap every year. The language, however puzzling, is designed to be persuasive as part of story victims are often wishing and wanting to be real. It\u2019s a simple scam, but appears to be effective when it reaches credulous types who are willing to ignore the warning signs in search of a treasure hunting adventure that can make a life extraordinary for a while, before it all ends in grief.\n        JSTOR is a digital library for scholars, researchers, and students. JSTOR Daily readers can access the original research behind our articles for free on JSTOR.\n  You may unsubscribe at any time by clicking on the provided link on any marketing message.", "posttime": "2021-06-20 12:29:23", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "language,\u8bed\u8a00", "title": "\u8bc8\u9a97\u8005\u5982\u4f55\u4f7f\u7528\u8bed\u8a00\u6765\u6b3a\u9a97\u53d7\u5bb3\u8005 ", "title_en": "How scammers use language to trick their victims", "transed": 1, "url": "https://daily.jstor.org/the-life-changing-linguistics-of-nigerian-scam-emails/", "via": "", "real_tags": ["language", "\u8bed\u8a00"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1066978, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u751f\u9508\u662f\u4e00\u79cd\u4ee4\u4eba\u5174\u594b\u7684\u8bed\u8a00\u3002\u6211\u6700\u8fd1\u4e70\u4e86\u94c1\u9508\u7f16\u7a0b\u8bed\u8a00\u4e66\u3002\u5f88\u591a\u5f88\u591a\uff0c\u5f88\u591a\u6982\u5ff5\u6211\u4ece\u5927\u5b66\u91cc\u6ca1\u6709\u60f3\u8fc7\u3002\u5728\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5de5\u4f5c\uff0c\u5982Java\uff0cPython\u548cCypeScript\uff0c\u5141\u8bb8\u6211\u5fd8\u8bb0\u4e86\u4f4e\u7ea7\u7f16\u7a0b\u7684\u56f0\u5883\u3002 Rust\u4e24\u8005\u90fd\u91cd\u65b0\u4ecb\u7ecd\u4e86\u8fd9\u4e9b\u95ee\u9898\uff0c\u7136\u540e\u7acb\u5373\u89e3\u51b3\u4e86\u5176\u7f16\u8bd1\u5668\u63d0\u4f9b\u7684\u5148\u8fdb\u7684\u9759\u6001\u5206\u6790\u3002\n \u6211\u8fd8\u662f\u521d\u5b66\u8005\u7684\u751f\u9508\u3002\u8fd9\u662f\u4ee4\u4eba\u5174\u594b\u7684\u90e8\u5206\u3002\u6211\u6709\u8fd9\u4e48\u591a\u7684\u95ee\u9898;\u5f88\u591a\u4e8b\u60c5\u8981\u5f04\u660e\u767d\u3002\u8fd9\u662f\u4e00\u9879\u6311\u6218\u3002\u5b66\u4e60\u5f88\u591a\u3002\u5b83\u8ba9\u6211\u60f3\u8d77\u4e86\u6211\u7b2c\u4e00\u6b21\u5f00\u59cb\u7f16\u7a0b\u7684\u65f6\u5019\u3002\u6709\u4e00\u5ea7\u5de5\u4f5c\u5c71\uff0c\u4ee5\u53ca\u5f04\u6e05\u695a\u7684\u65e0\u7a77\u65e0\u5c3d\u7684\u4e8b\u60c5\u3002\u6700\u7ec8\u53d8\u5f97\u66f4\u5bb9\u6613\uff0c\u4f60\u53d8\u5f97\u5bcc\u6709\u6210\u6548\u3002\u60a8\u53ea\u56e0\u4e3a\u60a8\u53ef\u4ee5 - \u56e0\u4e3a\u60a8\u60f3\u8bc1\u660e\u60a8\u77e5\u9053\u60a8\u7684\u77e5\u8bc6\u6240\u77e5\uff0c\u8bf7\u5199\u4e0b\u5c0f\u578b\u5e94\u7528\u7a0b\u5e8f\u3002\n \u751f\u9508\u5145\u6ee1\u4e86\u529f\u80fd\u3002\u5176\u4e2d\u8bb8\u591a\u4eba\u5904\u7406\u5b89\u5168\uff0c\u5982\u6240\u6709\u6743\u7cfb\u7edf\u548c\u501f\u6b3e\u68c0\u67e5\u5458\u3002\u5b83\u6709\u52a9\u4e8e\u4fdd\u8bc1\u5185\u5b58\u5b89\u5168\u6027\uff0c\u5e76\u4e14\u5728\u7f16\u5199\u5c06\u540c\u65f6\u6267\u884c\u7684\u4ee3\u7801\u65f6\u5de7\u5408\u4e5f\u6709\u52a9\u4e8e\u3002\u8fd9\u4e9b\u529f\u80fd\u5f88\u91cd\u8981\uff0c\u4f46\u6211\u771f\u6b63\u5174\u594b\u7684\u662f\u8bed\u8a00\u7279\u5f81 - \u4f7f\u8bed\u8a00\u6210\u4e3a\u5de5\u4f5c\u7684\u529f\u80fd\u3002Rust\u6709\u5f88\u591a\u3002\u4e0eC\uff0c\u6a21\u5f0f\u5339\u914d\uff0c\u7f3a\u5c11\u7a7a\u578b\uff0c\u8d27\u7269\uff0c\u9010\u9ed8\u8ba4\uff0c\u529f\u80fd\u6027\u7f16\u7a0b\u6784\u5efa\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u5185\u7f6e\uff0c\u5b8f\uff0c\u4e00\u4e2a\u5177\u6709\u6211\u89c1\u8fc7\u7684\u6700\u6709\u7528\u7684\u9519\u8bef\u6d88\u606f\u7684\u7f16\u8bd1\u5668\uff0c\u5143\u7ec4\u548c\u6a21\u5f0f - \u5339\u914d\u3002\u6211\u53ea\u662f\u522e\u4f24\u4e86\u8fd9\u9879\u670d\u52a1\u3002\u7c7b\u578b\u7cfb\u7edf\u548c\u8bed\u6cd5\u5e76\u4e0d\u50cfTypeScript\u4e00\u6837\u597d\uff0c\u6211\u4f5c\u4e3a\u7edd\u5bf9\u91d1\u6807\u51c6\uff08\u5373\u4f7f\u5b83\u4e0d\u5b8c\u7f8e\uff09\u3002\n \u4ec0\u4e48\u7279\u522b\u4ee4\u4eba\u5174\u594b\u7684\u662f\u751f\u9508\u7684\u9002\u7528\u6027\u3002\u6211\u503e\u5411\u4e8e\u4f7f\u7528Python\u6216Java\u8fdb\u884c\u5c0fshell\u811a\u672c/\u7a0b\u5e8f\u3002\u5b83\u9002\u5408\u6211\uff0c\u4f46\u5b83\u4e0d\u662f\u7279\u522b\u4fbf\u643a\u3002\u5982\u679c\u6211\u60f3\u4e0e\u6211\u7684\u56e2\u961f\u6210\u5458\u5171\u4eab\u6211\u7684\u521b\u4f5c\uff0c\u6211\u5fc5\u987b\u63d0\u4f9b\u6709\u5173\u5fc5\u987b\u4f7f\u7528\u7684\u8fd0\u884c\u65f6\u7248\u672c\u7684\u663e\u5f0f\u6307\u4ee4\u4ee5\u53ca\u4efb\u4f55\u53ef\u80fd\u7684\u4f9d\u8d56\u9879\u3002\u751f\u9508\u6709\u70b9\u4e0d\u540c\u3002\u7531\u4e8e\u5b83\u751f\u6210\u4e86\u672c\u673a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u6211\u53ef\u4ee5\u7b80\u5355\u5730\u5c06\u5176\u4ea4\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\uff08\u63d0\u4f9b\u4f9d\u8d56\u5173\u7cfb\u6346\u7ed1\u5728\u4e00\u8d77\uff09\u5e76\u8ba9\u5b83\u4eec\u5177\u6709\u5b83\u3002\n \u6211\u5f88\u9ad8\u5174\u518d\u6b21\u6210\u4e3a\u4e00\u4e2a\u521d\u5b66\u8005\u3002\u6211\u5f88\u9ad8\u5174\u4e86\u89e3\u6211\u5728\u65e5\u5e38\u5de5\u4f5c\u4e2d\u6211\u6c38\u8fdc\u4e0d\u4f1a\u4f7f\u7528\u7684\u4e8b\u60c5\u3002\u6211\u5f88\u9ad8\u5174\u80fd\u591f\u5584\u4e8e\u7f16\u5199\u751f\u9508\u4ee3\u7801\u3002\u6211\u5bf9\u672a\u6765\u7684\u7f16\u7a0b\u8bed\u8a00\u611f\u5230\u5174\u594b\uff0c\u5e0c\u671b\u5728Rust\u7684\u811a\u6b65\u4e0a\u8ffd\u968f\u3002 ", "note_en": "Rust is an exciting language. I recently bought  The Rust Programming Language Book. It\u2019s quite dense with a lot of concepts I haven\u2019t thought about since college. Working in high-level programming languages such as Java, Python, and TypeScript have allowed me to mostly forget about the woes of low-level programming. Rust has both re-introduced me to these problems, and then immediately solved them with the advanced static analysis that its compiler provides.\n I\u2019m still a beginner with Rust. That\u2019s the exciting part. I have so many questions; so many things to figure out. It\u2019s a challenge. It\u2019s a lot to learn. It reminds me of when I first started programming. There was a mountain of work to do, and an endless number of things to figure out. Eventually it gets easier and you become productive. You write small applications just because you can \u2014 because you want to prove that you know what you think you know.\n Rust is full of features. Many of them deal with safety, such as the ownership system and borrow checker. It helps to guarantee memory safety, and coincidentally also helps when writing code that will be executed concurrently. These features are important, but what I\u2019m really excited about are the language features \u2014 the features that make a language a joy to work in. Rust has plenty of these. Interoperability with C, pattern matching, the lack of a null type, Cargo, immutability-by-default, functional programming constructs built-in, macros, a compiler with the most helpful error messages I\u2019ve ever seen, tuples, and pattern-matching. I\u2019m just scratching the service. The type system and syntax isn\u2019t quite as good as TypeScript, which I hold as the absolute gold standard (even if it  isn\u2019t perfect).\n What\u2019s particularly exciting is the applicability of Rust. I tend to use Python or Java for small shell scripts/programs. It works great for me, but it\u2019s not especially portable. If I want to share my creations with my team members I have to provide explicit instructions about which runtime versions must be used, and any possible dependencies. Rust is a bit different. Since it produces native binaries I can simply hand them the executable (provided the dependencies are bundled) and let them have at it.\n I\u2019m excited to be a beginner again. I\u2019m excited to learn about things I\u2019ll never use in my day job. I\u2019m excited to get good at writing Rust code. I\u2019m excited for the future of programming languages, which will hopefully follow in Rust\u2019s footsteps.", "posttime": "2021-06-20 12:29:09", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "rust,\u751f\u9508", "title": "\u751f\u9508\u662f\u4ee4\u4eba\u5174\u594b\u7684 ", "title_en": "Rust Is Exciting", "transed": 1, "url": "https://shepherdjerred.substack.com/p/rust-is-exciting", "via": "", "real_tags": ["rust", "\u751f\u9508"]}, {"category": "", "categoryclass": "", "imagename": "5b09f145f2bd3ec3044a485150ba50da.png", "infoid": 1066977, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u81ea\u4e0a\u6b21CP4SPACE\u6587\u7ae0\u7684\u4e09\u4e2a\u6708\u4e3b\u8981\u82b1\u4e86\u89e3\u4e86\u4e00\u4e2a\u540d\u4e3aUrbit\u7684\u6709\u8da3\u9879\u76ee\u3002\u5728Riva-Melissa Tez\uff08\u4ee5\u524d\u7684\u82f1\u7279\u5c14\uff09\u5728\u8c08\u8bdd\u4e2d\uff0c\u6211\u7684\u6ce8\u610f\u529b\u88ab\u5438\u5f15\u5230\u5b83\u7684\u5b58\u5728\u6027\u4e0a\u7ee7\u7eed\u6539\u5584\u786c\u4ef6\u8ba1\u7b97\u6548\u7387\u7684\u91cd\u8981\u6027\u3002\n \u5728\u4e92\u8054\u7f51\u4e0a\u5199\u4e86\u4e00\u4e2a\u4f53\u9762\u7684\u91d1\u989d\u5173\u4e8eURBit\uff0c\u4f46\u5b83\u5f80\u5f80\u662f\u975e\u6280\u672f\u6027\u7684\uff0c\u89e3\u91ca\u9879\u76ee\u7684\u91cd\u8981\u6027\uff0c\u6216\u8005\u5728\u9ad8\u5ea6\u975e\u4f20\u7edf\u7684\u9879\u76ee\u7279\u5b9a\u7684\u884c\u8bdd\u4e2d\u7f16\u5199\u7684\u6280\u672f\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u5c06\u901a\u8fc7\u5ba1\u67e5\u6570\u5b66\u5bb6\u548c\u7406\u8bba\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u6700\u6709\u53ef\u80fd\u611f\u5174\u8da3\u7684Urbit\u7684\u65b0\u9896\u5185\u5bb9\u6765\u79bb\u5f00\u8fd9\u4e9b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002\n \u7136\u800c\uff0c\u5728\u6211\u4eec\u8fd9\u6837\u505a\u4e4b\u524d\uff0c\u503c\u5f97\u8be2\u95eeUrbit\u662f\u4ec0\u4e48\u3002\u8fd9\u901a\u5e38\u662f\u6df7\u4e71\u7684\u6e90\u6cc9\uff0c\u56e0\u4e3a\u5b83\u662f\u65e8\u5728\u878d\u5408\u5728\u4e00\u8d77\u7684\u591a\u4e2a\u4ea4\u4e92\u7ec4\u4ef6\u7684\u751f\u6001\u7cfb\u7edf\u3002\u5982\u679c\u60a8\u8981\u5728ulbit\u7ec4\u4ef6\u96c6\u4e0a\u9690\u55bb\u5730\u8fd0\u884c2-\u5747\u503c\uff0c\u5219\u5b83\u4eec\u5c06\u5e72\u51c0\u5730\u5206\u4e3a\u64cd\u4f5c\u7cfb\u7edf\uff08URBit OS\uff09\u548cIdentity System\uff08URBit ID\uff09\u3002\n  NOCK\uff1a\u4e00\u79cd\u975e\u5e38\u4f4e\u7ea7\u522b\u7684\u529f\u80fd\u7f16\u7a0b\u8bed\u8a00\u3002\u5b83\u5728\u7b80\u7ea6\u7684LISP\u65b9\u8a00\u548c\u6ed1\u96ea\u7ec4\u5408\u5668\u5fae\u79ef\u5206\u4e4b\u95f4\u5927\u81f4\u4e00\u534a\u3002\u5728URBIT\u751f\u6001\u7cfb\u7edf\u4e2d\uff0cNOCK\u662fURBit OS\u8fd0\u884c\u7684\u865a\u62df\u673a\u7684\u673a\u5668\u4ee3\u7801\u3002\n Vere\uff1aNOCK\u865a\u62df\u673a\u7684\u8f6f\u4ef6\u5b9e\u73b0\uff08\u5199\u5165C\uff09\uff0c\u80fd\u591f\u5728UNIX\u73af\u5883\u4e2d\u8fd0\u884cVM\u3002\n \u55e8\uff1a\u4e00\u79cd\u66f4\u9ad8\u7ea7\u522b\u7684\u529f\u80fd\u7f16\u7a0b\u8bed\u8a00\uff0c\u5176\u4e2d\u76f4\u63a5\u5199\u5165URBit OS\u3002\u8fd9\u6700\u7ec8\u4f1a\u7f16\u5236\u5230Nock\u3002\n Identity System\uff0cURBit ID\u662f\u79f0\u4e3aAzimuth\u70b9\u7684\u6574\u6570\u5730\u5740\uff08\u7c7b\u4f3c\u4e8eIPv4\u5730\u5740\uff09\u7684\u5206\u5c42\u7cfb\u7edf\u3002\u65b9\u4f4d\u70b9\u70b9\u4e0e\u516c\u94a5\uff08\u53ef\u53d8\u6216\u4e0d\u65ad\uff09\u5b89\u5168\u5730\u76f8\u5173\u8054\uff0c\u5e76\u4e14\u5728\u8be5\u516c\u94a5\u57fa\u7840\u8bbe\u65bd\u4e0a\u5efa\u7acb\u8fd0\u884cURBit\u7684\u673a\u5668\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \n\u8fd9\u4e9b\u53ef\u4ee5\u7d2f\u79ef\u5730\u7531\u6570\u636e\u7c7b\u578bUINT8\uff0cUINT16\uff0cUINT32\uff0cUINT64\u548cUINT128\u8868\u793a\u3002\u8fd9\u4e9b\u6570\u636e\u7c7b\u578b\u5177\u6709\u719f\u6089\u7684\u6807\u51c6\u201c\u9650\u5236\u6027\u56fe\u201d\uff0c\u719f\u6089C\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982C\uff1a\n  \u4f8b\u5982\uff0c\u5728\u5176\u4e2d\u901a\u8fc7\u53d6\u4e0b\u534a\u90e8\u5206\uff08\u6216\u7b49\u6548\uff0c\u51cf\u5c11\u6a212 ^ 16\uff09\u5c0632\u4f4d\u6574\u6570\u88ab\u80c1\u8feb\u4e3a16\u4f4d\u6574\u6570\u3002\u5728\u8fd92 ^ n\u4f4d\u6570\u636e\u7c7b\u578b\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e0a\u90fd\u6709\u4e24\u4e2a\u4f18\u96c5\u7684\u65b9\u6cd5\u6765\u5f3a\u52a0\u632f\u94c3\u7ed3\u6784\uff1a\n  \u7b2c\u4e00\u9009\u62e9\u662f\u719f\u6089\u7684\u4e00\u4e2a\uff08\u5728C\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8fd0\u7b97\u7b26{+\uff0c*\uff0c -   -   - }\u5728z /\uff082 ^ 2 ^ n\uff09z\uff09\u4e2d\u4e0e\u6a21\u5757\u5316\u7b97\u6cd5\u4e00\u81f4\u3002\u5728\u7b2c\u4e8c\u9009\u62e9\u4e2d\uff0c\u73af\u52a0\u662f\u6309\u4f4dXOR\uff0c\u73af\u4e58\u6cd5\u7a0d\u5fae\u590d\u6742\u5730\u5b9a\u4e49\u3002\n  \u73b0\u5728\uff0c\u8fd9\u4e9b\u9650\u5236\u6027\u6620\u5c04\u5982\u4f55\u4e0eURBIT\u76f8\u5173\uff1f\u5b83\u4eec\u5728\u4e00\u7ec4\u65b9\u4f4d\u70b9\u4e0a\u65bd\u52a0\u90e8\u5206\u987a\u5e8f\uff0c\u5176\u4e2dx\u2264y\u5982\u679cx\u662fy\u5728\u9650\u5236\u56fe\u4e0b\u7684\u56fe\u50cf\u3002\u8fd9\u79cd\u90e8\u5206\u987a\u5e8f\u7684\u54c8\u65af\u56fe\u56fe\u662f256\u68f5\u6811\u7684\u68ee\u6797\uff0c\u6bcf\u4e2a\u68ee\u6797\u90fd\u6709\u4e00\u4e2a\u5728\u5176\u6839\u7684\u661f\u7cfb\u3002\u5bf9\u4e8e\u4e0d\u662fGalaxy\u6216Comet\u7684\u6bcf\u4e2a\u65b9\u4f4d\u89d2\uff0c\u6b64\u54c8\u5217\u56fe\u786e\u5b9a\u4e86\u90a3\u4e2a\u65b9\u4f4d\u89d2\u7684\u552f\u4e00\u7236\u7ea7\u3002\u4f8b\u5982\uff0c\u5927\u591a\u6570\u884c\u661f\u90fd\u6709\u660e\u661f\u4f5c\u4e3a\u7236\u6bcd\u3002\n \u5f57\u661f\u7684\u7236\u6bcd\u8eab\u4efd\u662f\u4e0d\u540c\u7684\uff1a\u5f57\u661f\u7684\u7236\u7ea7\u662f\u5176\u5728\u9650\u5236\u56feUINT128\u2192UINT16\u4e0b\u7684\u56fe\u50cf\uff0c\u8fd9\u5fc5\u987b\u662f\u613f\u610f\u4e3b\u6301\u5f57\u661f\u7684\u4e94\u661f\u4e4b\u4e00\u3002\u5f57\u661f\u662f\u516c\u5171\u94a5\u5319\u7684\u76f4\u63a5\u6563\u5e03\uff08\u6240\u4ee5\uff0c\u4e0e\u884c\u661f\u4e0d\u540c\uff0c\u4e0d\u80fd\u5728\u4e0d\u540c\u7684\u6240\u6709\u8005\u4e4b\u95f4\u4f20\u8f93\uff09\u3002\n \u884c\u661f\uff0c\u661f\u661f\u548c\u661f\u7cfb\u662f\u5728Ethereum Blockchain\u4e0a\u7684\u975e\u5a31\u4e50\u6807\u8bb0\u7684\u53ef\u4ea4\u6613\u3002\u8fd9\u7ed9\u51fa\u4e86\u4ece\u6bcf\u4e2a\u65b9\u4f4d\u89d2\u70b9\uff0832\u4f4d\uff0c\u5e76\u4e14\u5bb9\u6613\u96be\u5fd8\uff09\u5230Etereum\u5730\u5740\uff08160\u4f4d\u548c\u52a0\u5bc6\u5b89\u5168\uff09\u7684\u53ef\u4fee\u6539\u7684\u5206\u6563\u6620\u5c04\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u65e0\u4fe1\u4efb\u5730\u9a8c\u8bc1\u65b9\u4f4d\u89d2\u6307\u5411\u7684\u6240\u6709\u8005\uff0c\u5e76\u56e0\u6b64\u8bbe\u7f6e\u5177\u6709\u8be5\u65b9\u4f4d\u70b9\u7684\u5b89\u5168\u901a\u4fe1\u4fe1\u9053;\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5efa\u7acb\u8fd0\u884cUrbit OS\u7684\u673a\u5668\u4e4b\u95f4\u7684\u6240\u6709\u901a\u4fe1\u3002\n  \u8868\u793a\u65b9\u4f4d\u70b9\u70b9\u7684\u6574\u6570\u901a\u8fc7\u4ee5\u4e0b\u8fc7\u7a0b\u5c06\u8868\u793a\u65b9\u4f4d\u70b9\u70b9\u8f6c\u6362\u4e3a\u4eba\u7c7b\u53ef\u8bfb\u540d\u79f0\uff08\u79f0\u4e3a\u201c@P\u201d\uff09\uff1a \n\u5bf9\u4e8e\u884c\u661f\u548c\u536b\u661f\uff08\u4e0d\u662f\u6052\u661f\u548c\u661f\u7cfb\uff09\uff0c\u5c06Feistel\u5bc6\u7801\u5e94\u7528\u4e8e\u6574\u6570\u7684\u6700\u4f4e32\u4f4d\u3002\u8fd9\u662f\u4e00\u79cd\u53ef\u9006\u6392\u5217\uff0c\u65e8\u5728\u6df7\u6dc6\u884c\u661f\u548c\u7236\u9897\u661f\u7684\u540d\u79f0\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u53cd\u6620\u4e86\u884c\u661f\u88ab\u5141\u8bb8\u5728\u661f\u7a7a\u4e4b\u95f4\u81ea\u7531\u79fb\u52a8\u7684\u4e8b\u5b9e\u3002\n \u751f\u6210\uff08\u52a0\u5bc6\uff09\u6574\u6570\u7684\u5b57\u8282\u6bcf\u4e2a\u90fd\u5c06\u6bcf\u4e2a\u7528\u4e8e\u5747\u5300\u7d22\u5f15\u5b57\u8282\uff08\u540e\u7f00\uff09\u548c\u5947\u6570\u7d22\u5f15\u5b57\u8282\uff08\u524d\u7f00\uff09\u7684\u5355\u72ec\u67e5\u627e\u8868\u8f6c\u6362\u4e3a\u4e09\u4e2a\u5b57\u6bcd\u7684\u97f3\u8282\u3002\u6bcf\u4e2a\u97f3\u8282\u7531\u4e24\u4e2a\u8f85\u97f3\u7684\u4fa7\u7ffc\u4fa7\u7ffc\u3002\n \u97f3\u8282\u7528\u5927\u7aef\u7f16\u5199\uff0c\u5728\u5f00\u59cb\u65f6\u6bcf\u4e2a16\u4f4d\u5b57\u548c\u4e09\u89d2\u5f62\u4e4b\u95f4\u7684\u8fde\u5b57\u7b26\u3002\n 32\u4f4d\u884c\u661f\u540d\u79f0\u7684\u793a\u4f8b\u662f\u301csorreg-namtyv\uff0c\u5c5e\u4e8eurbit\u7684Deposited\u521b\u59cb\u4eba\u3002\n \u5728\u6b64StackOverFlow\u7b54\u6848\u4e2d\u7ed9\u51fa\u4e86\u5bf9\u8fc7\u7a0b\u7684\u66f4\u5168\u9762\u63cf\u8ff0\uff0c\u5305\u62ec\u4e24\u4e2a256\u5143\u7d20\u97f3\u8282\u67e5\u627e\u8868\u3002\n \u9664\u4e86\u53d1\u97f3\u7684'@P'\u6807\u8bc6\u7b26\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u540d\u4e3aSIGIL\u7684\u89c6\u89c9\u7f16\u7801\u3002\u8fd9\u5c06\u57282\u00d72\u6392\u5217\u7684\u5355\u72ec\u8c61\u9650\u4e2d\u5b58\u50a8\uff08\u52a0\u5bc6\u7684\uff01\uff0932\u4f4d\u6574\u6570\u7684\u6bcf\u4e2a\u5b57\u8282\u5b58\u50a8\uff0c\u518d\u6b21\u4f7f\u7528\u4e00\u5bf9256\u5143\u7d20\u67e5\u627e\u8868\u3002\u8fd9\u91cc\u663e\u793a\u4e86\u8fd9\u4e2a\u661f\u7403\u7684SIGIL\uff1a\n  Gavin Atkinson\u63cf\u8ff0\u4e86\u521b\u5efaSigils\u7cfb\u7edf\u6240\u6d89\u53ca\u7684\u8bbe\u8ba1\u51b3\u7b56\u3002\u7531\u4e8e\u7a00\u7f3a\u548c\u5ba1\u7f8e\u5438\u5f15\u529b\u7684\u7ec4\u5408\uff0c\u5177\u6709\u5706\u5f62SIGIL\u548c/\u6216\u6709\u610f\u4e49\u7684@P\u540d\u79f0\uff08\u4f8b\u5982\uff0c~~\u6728\u58c1\uff09\u5f80\u5f80\u66f4\u6602\u8d35\u7684\u884c\u661f\u5f80\u5f80\u66f4\u52a0\u6602\u8d35\u3002 \n\u624b\u52a8\u586b\u5145\u5230\u8c61\u9650\u56fe\u5757\u7684\u67e5\u627e\u8868\u6620\u5c04\u5230\u8c61\u9650\u5757\uff08\u901a\u8fc7\u7ed8\u5236512\u74e6\u8bbe\u8ba1\uff09\uff0c\u56e0\u6b64\u53ef\u4ee5\u8ba4\u4e3aURBit Sigils\u5728\u7a0b\u5e8f\u4e0a\u751f\u6210\u3002 [\u5b8c\u5168\u7a0b\u5e8f\u751f\u6210\u7684\u7cfb\u7edf\u4e5f\u53ef\u80fd\u5df2\u7ecf\u6709\u6548\uff0c\u4f8b\u59822009\u5e74\u7684\u8fd9\u4e2aWolfram\u535a\u5ba2\u6587\u7ae0\u4e2d\u7684\u7cfb\u7edf\uff0c\u4f46\u73b0\u5728\u4e0d\u592a\u53ef\u80fd\u6539\u53d8\u3002]\u8fd9\u662f\uff0c\u4ecd\u7136\u662f\u4e0e@P\u540d\u79f0\u9ad8\u5ea6\u4e00\u81f4\u7684;\u8fd8\u624b\u52a8\u586b\u5145\u97f3\u8282\u67e5\u627e\u8868\u3002\n   nock\u662f\u8fd9\u91cc\u63cf\u8ff0\u7684\u4f4e\u7ea7\u7eaf\u529f\u80fd\u7f16\u7a0b\u8bed\u8a00\u3002\u4ee3\u7801\u548c\u6570\u636e\u53ea\u662f\u4e8c\u8fdb\u5236\u6811\uff08\u540d\u4e3a\u540d\u8bcd\uff09\uff0c\u5176\u79bb\u5f00\u662f\u975e\u8d1f\u6574\u6570\u7684\u3002 NOCK\u89e3\u91ca\u5668\u662f\u4e00\u9879\u673a\u667a\u51fd\u6570*\uff0c\u5176\u57df\u548cCodomain\u90fd\u662f\u540d\u8bcd\u7684\u7a7a\u95f4;\u5b83\u7684\u8bed\u4e49\u5728\u5176\u81ea\u8eab\u548c\u5176\u4ed6\u4e00\u5143\u804c\u80fd\u65b9\u9762\u9012\u5f52\u5b9a\u4e49\u3002\n \u6211\u5bf9\u8fd9\u4e9b\u51fd\u6570\u7684\u6700\u7231\u662f\u6811\u5bfb\u5740\u8fd0\u7b97\u7b26\uff0c/\uff0c\u5b83\u5b9a\u4e49\u5982\u4e0b\uff1a\n / [1 a] a / [2 ab] a / [3 ab] b / [\uff08a + a\uff09b] / [2 / [ab] / [\uff08a + a + 1\uff09b] / [3 / [ab]] / a / a\n \u7279\u522b\u5730\uff0c\u5982\u679c\u6211\u4eec\u8ba9L\uff08x\uff09\u548cr\uff08x\uff09\u5f15\u7528\u6811x\u7684\u5de6\u548c\u53f3\u5b50\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u6709\uff1a\n   \u7528'r'\u7528'l'\u66ff\u6362\u6bcf\u4e2a'0'\uff08\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u201crlrrlllllrr\u201d\uff09;\n \u670d\u7528x\u5e76\u987a\u5e8f\u5730\u5c06\u6bcf\u4e2a\u5b57\u7b26\u5e94\u7528\u4e8e\u5b83\uff08\u5728\u8be5\u793a\u4f8b\u4e2d\uff0c\u7ed9\u51far\uff08l\uff08l\uff08l\uff08l\uff08l\uff08l\uff08l\uff08r\uff08r\uff08r\uff08r\uff08r\uff08r\uff08r\uff08x\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff09\uff0c\u6ce8\u610f\u6700\u5916\u9762\u7684\u51fd\u6570\u662f\u6700\u4f4e\u6709\u6548\u4f4d\uff09\u3002 \n\u5982\u679c\u6211\u4eec\u6839\u636e\u4f7f\u7528/\u8fd0\u7b97\u7b26\u5728\u8be5\u8282\u70b9\u4e0a\u624e\u6839\u4e8e\u8be5\u8282\u70b9\u6240\u9700\u7684\u81ea\u7136\u6570\u6240\u9700\u7684\u81ea\u7136\u6570\u6765\u679a\u4e3e\u65e0\u9650\u4e8c\u53c9\u6811\u4e2d\u7684\u8282\u70b9\uff0c\u5219\u8fd9\u4e0e\u6811\u7684\u5e7f\u5ea6\u904d\u5386\u4e00\u81f4\u3002\u8fd9\u4e0eCalkin-Wilf\u5e8f\u5217\u4e0eCalkin-Wilf\u6811\u76f8\u540c\u7684\u679a\u4e3e\uff08\u4e0b\u9762\u7684\u9c91\u9c7c\u87ba\u65cb\uff09\uff0c\u5728\u8be5\u56fe\u4e2d\u663e\u793a\u4e86David Eppstein\uff1a\n  \u64cd\u4f5c\u5458/\u662f\u6709\u7528\u7684\uff0c\u5373LISP\u5206\u5e03\u901a\u5e38\u4e3a\u6240\u67092\u2264N\u226415\u5b9e\u73b0\u6b64\u529f\u80fd\u7684\u7279\u6b8a\u60c5\u51b5\uff0c\u8bf7\u53c2\u9605\u4f5c\u4e3a{CAR\uff0cCDR\uff0c...\uff0cCDDDDDDDDDDDR}\u3002\n NOCK\uff0c\u5982\u679c\u5929\u771f\u5730\u8bc4\u4f30\uff0c\u5c06\u662f\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u4f4e\u6548\uff1a\u9012\u51cf\u6574\u6570N\u9700\u8981\u65f6\u95f4\u6210\u6bd4\u4f8b\u3002\u56e0\u6b64\uff0c\u4eff\u771f\u5668\u4f7f\u7528\u79f0\u4e3a\u55b7\u5c04\u7684\u5de7\u5999\u60f3\u6cd5\uff1a\u4eff\u771f\u5668\u6a21\u5f0f\u4e0e\u5404\u79cd\u6a21\u5f0f\uff08\u4f8b\u5982\u5e94\u7528\u4e8e\u6574\u6570\u7684\u9012\u51cf\u51fd\u6570\uff09\u5e76\u547c\u53eb\u76f4\u63a5\u9012\u51cf\u6574\u6570\u7684\u8fd0\u884c\u65f6\u4f18\u5316\u3002\n URBit\u9879\u76ee\u6210\u529f\u5730\u5b9e\u73b0\u4e86\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\u4f5c\u4e3a\u8fd9\u79cd\u8bed\u8a00\u7684\u51fd\u6570\uff0c\u7531\u4e8e\u4f7f\u7528\u55b7\u6c14\u673a\uff0c\u5b83\u5728\u5b9e\u8df5\u4e2d\u8868\u73b0\u3002 Hoon Compiler\uff08\u5c06\u4ee5\u66f4\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u7f16\u8bd1\u4e3a\u4f4e\u7ea7Nock Language\uff09\u751f\u6210\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u5c06\u6210\u529f\u5339\u914d\u8fd9\u4e9b\u55b7\u5c04\u5668\u3002\n \u7528\u55b7\u6c14\u673a\uff0c\u5b83\u53ef\u80fd\u6bd4NOCK\u66f4\u4f4e\u3002 URBIT\u6ca1\u6709\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u89c2\u70b9\uff0c\u9664\u4e86\u5728\u66f4\u7b80\u5355\u7684\u8bed\u8a00\u65b9\u9762\u7ed9\u51fa\u4e86NOCK\u7684\u6b63\u5f0f\u5b9a\u4e49\uff1a\n  \u5982\u679c\u6211\u4eec\u9009\u62e9\u7edd\u5bf9\u7b80\u5355\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5168\u7a0b\uff1f\u5b83\u53ef\u4ee5\u5728\u6ca1\u6709\u578b\u53f7\u7684Lambda\u5fae\u79ef\u5206\u4e2d\u6216\u5728SK\u7ec4\u5408\u8f68\u9053\u5fae\u79ef\u5206\u4e2d\u5b9e\u65bdNOCK\u3002\n  \u540d\u8bcd\u6811\u53f6\u7684\u975e\u8d1f\u6574\u6570\u53ef\u4ee5\u4f7f\u7528\u6559\u5802\u6570\u5b57\u6765\u8868\u793a\uff1an\u662f\u5c06\u5176\u53c2\u6570f\u6620\u5c04\u5230\u5176n\u500d\u51fd\u6570\u7ec4\u5408\u7269f ^ n\u7684\u9ad8\u9636\u51fd\u6570\u3002 \n\u7136\u800c\uff0c\u9057\u61be\u7684\u662f\uff0c\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u67e5\u8be2\u540d\u8bcd\u662f\u5426\u662f\u6574\u6570\u6216\u4e00\u5bf9\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528\u7a0d\u5fae\u66f4\u590d\u6742\u7684NOCK\u540d\u8bcd\u7f16\u7801\uff0c\u5176\u4e2d\u6211\u4eec\u6807\u8bb0\u4e3a\u6bcf\u4e2a\u540d\u8bcd\u7684\u7c7b\u578b\uff1a\n  \u7528\u4e8e\u5b9a\u4e49NOCK\u89e3\u91ca\u5668\u7684\u673a\u6784\u51fd\u6570\u73b0\u5728\u53ef\u4ee5\u81ea\u884c\u5b9e\u73b0\u4e3a\u7ec4\u5408\u5668\uff0c\u6700\u591a\u53ef\u8fbe\u548c\u5305\u62ecNOCK\u89e3\u91ca\u5668*\u672c\u8eab\u3002\n \u4f8b\u5982\uff0c\u95ee\u53f7\u8fd0\u7b97\u7b26\u53ef\u4ee5\u901a\u8fc7\u62cd\u6444\u6559\u4f1a\u5bf9\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff08\u8fd9\u662f\u6559\u5802\u6570\u5b570\u62161\uff09\uff0c\u7136\u540e\u5c06\u5176\u201c\u62f3\u51fb\u201d\u4f5c\u4e3a\u4e00\u4e2aNoun\uff0c\u800c\u4e0d\u662f'\u88f8\u9732\u7684\u6559\u5802\u6570\u5b57\uff1a\n  \u5728\u7ef4\u57fa\u767e\u79d1\u6587\u7ae0\u4e2d\u5b9a\u4e49\u4e86\u201c\u5bf9\u201d\u548c\u201c\u7b2c\u4e00\u201d\u529f\u80fd\u7684\u4f4d\u7f6e\u3002\n \u9012\u589e\u8fd0\u7b97\u7b26\u9700\u8981\u53d6\u6d88\u586b\u5199\u6574\u6570\uff0c\u53d6\u5176\u540e\u7ee7\uff0c\u7136\u540e\u91cd\u65b0\u952e\u5165\uff1a\n  \u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u4f5c\u5f0a\uff0c\u56e0\u4e3a\u6839\u636eNOCK\u5b9a\u4e49\uff0c\u9700\u8981\u5728\u6709\u5e8f\u5bf9\u548c\u6574\u6570\u4e0a\u5b9a\u4e49+\uff08x\uff09\u3002\u7279\u522b\u662f\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528first\uff08x\uff09\u6765\u63d0\u53d6\u6559\u5802\u6570\u5b57\uff0c\u6307\u5b9ax\u662f\u5426\u662f\u6709\u5e8f\u5bf9\u6216\u6574\u6570\u548c\u5206\u652f\uff1a\u5982\u679c\u6559\u5802\u6570\u5b57\u662f1\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8fd4\u56de\u4e00\u5bf9\uff081\uff0csupm\uff08\u7b2c\u4e8c\uff08X\uff09\uff09\uff09;\u5982\u679c\u6559\u5802\u6570\u5b57\u662f0\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u8fd4\u56de+\uff08x\uff09\u3002\u901a\u8fc7\u56fa\u5b9a\u70b9\u7ec4\u5408\u5668\u53ef\u4ee5\u4ece\u8be5\u9012\u5f52\u5b9a\u4e49\u4e2d\u5220\u9664\u81ea\u5f15\u7528\u3002\n \u5269\u4f59\u7684\u8fd0\u8425\u5546\u90fd\u662f\u9012\u5f52\uff0c\u56e0\u6b64\u4ed6\u4eec\u540c\u6837\u9700\u8981\u5728\u5176\u5b9e\u73b0\u4e2d\u9700\u8981\u56fa\u5b9a\u70b9\u7ec4\u5408\u5668\u3002 \n\u5c1d\u8bd5\u4e3aSK\u7ec4\u5408\u5668\u5fae\u79ef\u5206\u7f16\u5199\u55b7\u5c04\u63a8\u8fdb\u7684\u4eff\u771f\u5668\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u7ec3\u4e60\uff0c\u5305\u62ec\u4f18\u5316\uff0c\u4f8b\u5982\u5185\u90e8\u4ee3\u8868\u6559\u5802\u6570\u5b57\u4f5c\u4e3a\u6574\u6570\uff08\u5177\u6709\u8bf8\u5982GMP\u7684\u5e93\uff0c\u5141\u8bb8\u4efb\u610f\u5927\u578b\u6574\u6570\uff09\u5e76\u4f7f\u7528\u55b7\u5c04\u6765\u8c03\u7528 \u9002\u5f53\u65f6GMP\u5b9e\u73b0\u7b97\u672f\u8fd0\u7b97\u3002  \u901a\u8fc7\u4f7f\u7528\u201c\u538b\u7f29\u76f8\u540c\u7684\u5b50\u6811\u201d\u7684\u60f3\u6cd5\uff0c\u719f\u6089\u6563\u5217\u548c\u5e93\u7684\u56fe\u4e66\u9986\u6765\u64cd\u7eb5\u4e8c\u8fdb\u5236\u51b3\u7b56\u56fe\uff0c\u6211\u4eec\u907f\u514d\u8fc7\u5ea6\u7f16\u7801\u5f00\u9500\uff0c\u5e76\u80fd\u591f\u5b9e\u73b0\u8bf8\u5982\u9012\u51cf\u8fd0\u7b97\u7b26\u4e4b\u7c7b\u7684\uff08\u6807\u51c6\u5b9e\u73b0\u7684\u6807\u51c6\u5b9e\u73b0\uff09\u7684\u6052\u5b9a\u65f6\u95f4\u8bc6\u522b\u3002 ", "note_en": "The three months since the  last cp4space article have largely been spent learning about an interesting project called  Urbit. My attention was drawn to its existence during  a talk by Riva-Melissa Tez (formerly of Intel) on the importance of continued improvements to the computational efficiency of hardware.\n A decent amount has been written on the Internet about Urbit, but it tends to either be  non-technical, explaining the importance of the project, or technical but written in highly unconventional project-specific jargon. Instead, we\u2019ll depart from either of these by examining the novel internals of Urbit that are most likely to be of interest to mathematicians and theoretical computer scientists.\n Before we can do so, however, it is worth asking  what Urbit is. This is often a source of confusion, because it is an ecosystem of multiple interacting components designed to mesh well together. If you were to metaphorically run  2-means on the set of Urbit components, they would cleanly separate into the operating system ( Urbit OS) and identity system ( Urbit ID).\n  Nock: a very low-level functional programming language. It\u2019s roughly halfway between a minimalistic Lisp dialect and the  SKI combinator calculus. In the Urbit ecosystem, Nock is the machine code for the virtual machine in which the Urbit OS runs.\n Vere: a software implementation (written in C) of the Nock virtual machine, capable of running the VM inside a Unix environment.\n Hoon: a higher-level functional programming language in which the Urbit OS is directly written. This ultimately compiles down to Nock.\n The identity system, Urbit ID, is a hierarchical system of integer addresses (analogous to IPv4 addresses) called  Azimuth points. Azimuth points are securely associated to public keys (either mutably or immutably), and communication between machines running Urbit is built upon this public key infrastructure.\n    These can  cumulatively be represented by the datatypes uint8, uint16, uint32, uint64, and uint128, respectively. These datatypes possess standard \u2018restriction maps\u2019 familiar from using a programming language such as C:\n  where, for instance, a 32-bit integer is coerced into a 16-bit integer by taking the lower half (or, equivalently, reducing modulo 2^16). There are two elegant ways to impose a ring structure on each of these 2^ n-bit datatypes:\n  The first choice is the familiar one (in the C programming language, the operators {+, *, -} coincide with modular arithmetic in Z/(2^2^n)Z). In the second choice, ring addition is bitwise XOR, and ring multiplication is slightly more complicated to define.\n  Now, how do these restriction maps relate to Urbit? They impose a partial order on the set of Azimuth points, where  x \u2264  y if  x is the image of  y under a restriction map. The  Hasse diagram of this partial order is a forest of 256 trees, each of which has a galaxy at its root. This Hasse diagram determines, for each Azimuth point that\u2019s not a galaxy or comet, a unique  parent of that Azimuth point. Most planets, for instance, have stars as parents.\n The parenthood relationship for comets is different: the parent of a comet is its image under the restriction map uint128 \u2192 uint16, which must be one of five stars willing to host comets. Comets are direct hashes of public keys (so, unlike planets, can\u2019t be transferred between different owners).\n Planets, stars, and galaxies are tradable as non-fungible tokens on the Ethereum blockchain. This gives a modifiable decentralised mapping from each Azimuth point (32 bits and easily memorable) to an Ethereum address (160 bits and cryptographically secure). As such, it\u2019s possible to trustlessly verify the owner of an Azimuth point and therefore set up a secure communication channel with that Azimuth point; all communications between machines running Urbit OS are established in this manner.\n  The integer representing an Azimuth point is converted into a human-readable name (called an \u2018@p\u2019) through the following process:\n For planets and moons (not for stars and galaxies), a Feistel cipher is applied to the lowest 32 bits of the integer. This is a reversible permutation designed to obfuscate the relationship between the name of a planet and its parent star, reflecting the fact that planets are permitted to move freely between stars.\n The bytes of the resulting (enciphered) integer are each converted to a three-letter syllable, using a separate lookup table for even-indexed bytes (suffixes) and odd-indexed bytes (prefixes). Each syllable consists of a generalised vowel flanked by two consonants.\n The syllables are written in big-endian, with a hyphen between each 16-bit word and a tilde at the beginning.\n An example of a 32-bit planet name is  ~sorreg-namtyv, which belongs to the  departed founder of Urbit.\n A more comprehensive description of the process, including the two 256-element syllable lookup tables, is given in  this StackOverflow answer.\n In addition to the pronounceable \u2018@p\u2019 identifier, there is a visual encoding called a  sigil. This stores each byte of the (enciphered!) 32-bit integer in a separate quadrant of a 2-by-2 arrangement, again using a pair of 256-element lookup tables. The sigil for the planet ~firmer-hatful is shown here:\n  Gavin Atkinson  describes the design decisions involved in creating this system of sigils. Planets with circular sigils and/or meaningful @p names (e.g. ~timber-walled) tend to be in greater demand, and therefore more expensive, due to the combination of higher scarcity and aesthetic appeal.\n The lookup tables mapping bytes to quadrant tiles were populated manually (by drawing 512 tile designs), so the Urbit sigils can be thought of as  partially procedurally generated. [A  fully procedurally-generated system may also have worked, such as the system in  this Wolfram blog post from 2009, but this is unlikely to change now.] This is, nonetheless, highly consistent with the @p names; the syllable lookup tables were also manually populated.\n   Nock is a low-level pure functional programming language described  here. Code and data are simply binary trees (called  nouns) whose leaves are nonnegative integers. The Nock interpreter is a unary function * whose domain and codomain are both the space of nouns; its semantics are defined recursively in terms of itself and other unary functions.\n My favourite of these functions is the tree-addressing operator, /, which is defined as follows:\n /[1 a] a/[2 a b] a/[3 a b] b/[(a + a) b] /[2 /[a b]]/[(a + a + 1) b] /[3 /[a b]]/a /a\n In particular, if we let L(x) and R(x) refer to the left and right subtrees of a tree x, then we have:\n   replacing each \u20180\u2019 with \u2018L\u2019 and \u20181\u2019 with \u2018R\u2019 (in this example, \u201cRLRRLLLLLR\u201d);\n taking  x and sequentially applying each of the characters to it (in this example, giving R(L(L(L(L(L(R(R(L(R(x)))))))))), noting that the outermost function is the least significant bit).\n If we enumerate the nodes in an infinite binary tree according to the natural number required to address the subtree rooted at that node using the / operator, this agrees with a breadth-first traversal of the tree. This is the same enumeration (the salmon spiral below) that relates the  Calkin-Wilf sequence to the Calkin-Wilf tree, shown in this illustration by David Eppstein:\n  The operator / is useful enough that Lisp distributions typically implement the special-cases of this function for all 2 \u2264  n \u2264 15, referring to them as {car, cdr, \u2026, cddddr}.\n Nock, if evaluated naively, would be incredibly inefficient: decrementing an integer  n takes time proportional to  n. The emulator therefore uses a clever idea called  jets: runtime optimisations where the emulator pattern-matches various patterns (such as the decrementation function applied to an integer) and calls a native C function to decrement the integer directly.\n The Urbit project has succeeded in implementing an entire operating system kernel as a function in this language, and it is performant in practice owing to the use of jets. The Hoon compiler (which compiles programs written in the higher-level language Hoon into the low-level Nock language) generates code that will be successfully pattern-matched by these jets.\n With jets, it\u2019s possible to go even lower-level than Nock. Urbit doesn\u2019t do this because there\u2019s not really much point in doing so, except to give a  formal definition of Nock in terms of an even simpler language:\n  If we\u2019re opting for absolute simplicity, why not go the whole way? It\u2019s possible to implement Nock in the untyped lambda calculus or in the  SK combinator calculus.\n  The nonnegative integers at the leaves of noun trees can be represented using Church numerals:  n is the higher-order function which maps its argument  f to its\u00a0 n-fold functional composition,  f^ n.\n However, unfortunately there isn\u2019t a way to query whether a noun is an integer or a pair. As such, we\u2019ll need to use a slightly more complicated encoding of Nock nouns where we \u2018tag\u2019 each noun with its type:\n  The unary functions used to define the Nock interpreter can now be themselves implemented as combinators, up to and including the Nock interpreter * itself.\n For example, the question-mark operator can be implemented by taking the first element of the Church pair (which is the Church numeral 0 or 1) and then \u2018boxing\u2019 it as a Nock noun instead of a \u2018bare\u2019 Church numeral:\n  where the \u2018pair\u2019 and \u2018first\u2019 functions are defined in  the Wikipedia article.\n The incrementation operator needs to unbox the integer, take its successor, and then rebox it, like so:\n  Technically, we\u2019ve cheated here, because according to the Nock definition, +(x) needs to also be defined on ordered pairs as well as integers. In particular, we need to use first(x) to extract a Church numeral specifying whether x is an ordered pair or an integer and branch on that: if the Church numeral is 1, then we can just return pair(1, succ(second(x))); if the Church numeral is 0, then we need to return +(x). The self-reference can be removed from this recursive definition by means of a  fixed-point combinator.\n The remaining operators are all recursive, so they\u2019ll similarly require the fixed-point combinator in their implementations.\n It would be a fun exercise to attempt to write a jet-propelled emulator for the SK combinator calculus, including optimisations such as internally representing Church numerals as integers (with a library such as GMP to allow arbitrarily large integers) and using jets to call the GMP implementations of arithmetic operations when appropriate.\n By using the \u2018compress identical subtrees\u2019 idea, familiar from  Hashlife and libraries for manipulating binary decision diagrams, we avoid excessive encoding overhead as well as enabling constant-time recognition of (standard implementations of!) functions such as the decrement operator.", "posttime": "2021-06-20 12:28:20", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6570\u5b66\u5bb6,urbit", "title": "\u6570\u5b66\u5bb6\u7684\u5c3f\u5e03 ", "title_en": "Urbit for Mathematicians", "transed": 1, "url": "https://cp4space.hatsya.com/2021/05/12/urbit-for-mathematicians/", "via": "", "real_tags": ["\u6570\u5b66\u5bb6", "urbit"]}, {"category": "", "categoryclass": "", "imagename": "f9a9a8495c0f13edc7cff2a3e45409e4.jpg", "infoid": 1066976, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6269\u5c55\u5de5\u4f5c\u8d1f\u8f7d\u9700\u8981\u6027\u80fd\u548c\u4ef7\u683c\u7684\u6700\u4f73\u7ec4\u5408\uff0c\u4ee5\u964d\u4f4e\u63d0\u4f9b\u5e94\u7528\u7a0b\u5e8f\u7684\u6210\u672c\uff0c\u540c\u65f6\u63d0\u4f9b\u51fa\u8272\u7684\u7528\u6237\u4f53\u9a8c\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u5ba3\u5e03\u65b0\u7684\u865a\u62df\u673a\uff08VM\uff09Taug VMS\uff0c\u5373\u5c06\u5230\u6765\u8c37\u6b4c\u4e91\u3002 TAU VMS\u6269\u5c55Compute Engine\u7684VM\u4ea7\u54c1\uff0c\u5e76\u901a\u8fc7\u65b0\u7684\u9009\u9879\u8fdb\u884c\u4e86\u4f18\u5316\u7684\uff0c\u4ee5\u5b9e\u73b0\u7f29\u653e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u7ecf\u6d4e\u9ad8\u6548\u6027\u80fd\u3002\n T2D\u662fTIAD VM\u7cfb\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b9e\u4f8b\u7c7b\u578b\uff0c\u662f\u57fa\u4e8e3RD Gen AMD EPYC TM\u5904\u7406\u5668\uff0c\u5e76\u5728\u7ee9\u6548\u548c\u5de5\u4f5c\u91cf\u603b\u4f53\u62e5\u6709\u6210\u672c\u65b9\u9762\u8de8\u8d8aVMS\u7684\u7f29\u653e\u5de5\u4f5c\u8d1f\u8f7d\u3002 \uff08TCO\uff09\u3002\u57fa\u4e8eAMD EPYC\u5904\u7406\u5668\u7684VM\u63d0\u4f9b\u7684X86\u517c\u5bb9\u6027\u4e3a\u60a8\u63d0\u4f9b\u5e02\u573a\u9886\u5148\u7684\u6027\u80fd\u6539\u8fdb\u548c\u6210\u672c\u8282\u7701\uff0c\u800c\u65e0\u9700\u5c06\u5e94\u7528\u7a0b\u5e8f\u79fb\u690d\u5230\u65b0\u7684\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u3002\n \u5982\u4e0b\u6240\u793a\uff0cTAU VMS\u63d0\u4f9b56\uff05\u7684\u7edd\u5bf9\u6027\u80fd\u548c42\uff05\u7684\u4ef7\u683c - \u6027\u80fd\uff08EST.Spectrate2017_Int_Base\uff09\u4e0e\u6765\u81ea\u4efb\u4f55\u9886\u5148\u7684\u516c\u5171\u4e91\u4f9b\u5e94\u5546\u7684\u901a\u7528VM\u76f8\u6bd4\u3002\n    Snap\u201c\u5728Snap\u4e2d\uff0c\u6211\u4eec\u7684\u4f01\u4e1a\u5c06\u7ee7\u7eed\u6539\u8fdb\u6211\u4eec\u7684\u7f29\u653e\u8ba1\u7b97\u57fa\u7840\u8bbe\u65bd\uff0c\u4ee5\u83b7\u5f97AR\uff0c\u955c\u5934\uff0c\u805a\u5149\u706f\u548c\u5730\u56fe\u7b49\u5173\u952eSnapchat\u529f\u80fd\uff0c\u201dCody Powell\uff0cSnap Inc.\u201c\u6211\u4eec\u88ab\u5370\u8c61\u6df1\u523b\u6211\u4eec\u7528Google Kubernetes\u5f15\u64ce\u6d4b\u8bd5\u4e86Google Cloud\u7684\u65b0Tau VM\u3002\u867d\u7136\u5b83\uff06\uff0339;\u65e9\u671f\uff0c\u6211\u4eec\u76f8\u4fe1\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u57fa\u7840\u8bbe\u65bd\u6027\u80fd\u6539\u8fdb\u7684\u4e24\u4f4d\u6570\uff0c\u4ee5\u4fbf\u6211\u4eec\u901a\u8fc7\u8f83\u5c11\uff0c\u4e3a\u6211\u4eec\u7684\u60ca\u4eba\u7684Snapchat\u793e\u533a\u63d0\u4f9b\u66f4\u591a\u7684\u65b0\u529f\u80fd\u3002\uff06\uff0334;\n Twitter\uff06\uff0334;\u5728\u6b63\u786e\u7684\u4ef7\u683c\u70b9\u7684\u9ad8\u6027\u80fd\u662f\u6211\u4eec\u52aa\u529b\u670d\u52a1\u5168\u7403\u516c\u5171\u4ea4\u8c08\u7684\u5173\u952e\u8003\u8651\u56e0\u7d20\uff0c\u800c\uff0334;\u8bf4\u5c3c\u514b\u00b7\u6cf0\u8bfa\uff0c\u5e73\u53f0\u94c5\uff0c\u63a8\u7279\u3002 \u201c\u6211\u4eec\u88ab\u521d\u59cb\u6d4b\u8bd5\u5174\u594b\uff0c\u663e\u793a\u4e86\u4e24\u4f4d\u6570\u6027\u80fd\u6539\u8fdb\u7684\u6f5c\u529b\u3002\u6211\u4eec\u6b63\u5728\u4e0eGoogle Cloud\u8fdb\u884c\u5408\u4f5c\uff0c\u66f4\u6df1\u5165\u5730\u8bc4\u4f30\u4ef7\u683c\u548c\u6027\u80fd\u7684\u4f18\u60e0\uff0c\u4ee5\u4fbf\u901a\u8fc7\u4f7f\u7528\u65b0\u7684Tau VM\u7cfb\u5217\u6765\u5b9e\u73b0\u3002\u201c\n DOIT\uff06\uff0334; DOIT International yoav Toussia-Cohen\u8bf4\uff0c\u4e0e\u4e3b\u8981\u4e91\u4f9b\u5e94\u5546\u7684\u5a5a\u793c\u4f9b\u5e94\u5546\u8fdb\u884c\u4e86\u878d\u5408\u7684\u4e91\u5382\u5546\u3002\u201c \u201c\u5728\u6211\u4eec\u5bf9\u5e26\u6709Coremark\u57fa\u51c6\u7684\u8c37\u6b4c\u7684\u65b0TAU VMS\u521d\u6b65\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u5f88\u6fc0\u70c8\u5730\u770b\u5230\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6027\u80fd\uff0c\u6bd4\u53e6\u4e00\u4e2a\u9886\u5148\u7684\u516c\u5171\u4e91\u7684\u6bd4\u8f83\u96c4\u6027\u7684\u53d1\u552e\u66f4\u597d\u5730\u770b\u5230\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u6027\u80fd\u3002\u4f7f\u7528TAU VMS\uff0cGoogle Cloud\u5df2\u4e3a\u4ef7\u683c\u6027\u80fd\u8bbe\u7f6e\u65b0\u680f\uff0c\u4f7f\u4e91\u66f4\u80fd\u8bbf\u95ee\u6570\u5b57\u6bcd\u8bed\u516c\u53f8\u3002\u6211\u4eec\u5f88\u9ad8\u5174\u80fd\u591f\u5c06\u8c37\u6b4c\u7684Tau VM\u5e26\u5230\u6211\u4eec\u7684\u8054\u5408\u5ba2\u6237\u3002\uff06\uff0334;\n  TAU VMS\u4e3a\u8c37\u6b4c\u7684\u957f\u671f\u4f53\u9a8c\u5de5\u7a0b\u5e73\u53f0\u5e26\u6765\u4e86\u5bbd\u5bb9\u6027\u7684\u5de5\u4f5c\u8d1f\u8f7d\u7ed9\u6211\u4eec\u7684\u5ba2\u6237\u3002\u5b83\u4eec\u4ee5\u591a\u79cd\u9884\u5b9a\u4e49\u7684VM\u5f62\u72b6\uff0c\u6bcfVM\u6700\u591a60Vcpus\uff0c\u6bcf\u4e2aVCPU\u4e3a4GB\u5185\u5b58\u3002\u5b83\u4eec\u63d0\u4f9b\u9ad8\u8fbe32 Gbps\u7684\u7f51\u7edc\u5e26\u5bbd\u548c\u5404\u79cd\u7f51\u7edc\u8fde\u63a5\u5b58\u50a8\u9009\u9879\uff0c\u4f7fTAU VMS\u9002\u7528\u4e8e\u6269\u5c55\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5305\u62ecWeb\u670d\u52a1\u5668\uff0c\u96c6\u88c5\u7bb1\u5fae\u670d\u52a1\uff0c\u6570\u636e\u8bb0\u5f55\u5904\u7406\uff0c\u5a92\u4f53\u8f6c\u7801\u548c\u5927\u578bJava\u5e94\u7528\u7a0b\u5e8f\u3002 \nGoogle Kubernetes Engine\uff08GKE\uff09\u662f\u5bfb\u627e\u9ad8\u7ea7\u5bb9\u5668\u7f16\u6392\u7684\u7ec4\u7ec7\u7684\u4e8b\u5b9e\u6807\u51c6\uff0c\u63d0\u4f9b\u6700\u9ad8\u7ea7\u522b\u7684\u53ef\u9760\u6027\uff0c\u5b89\u5168\u6027\u548c\u53ef\u6269\u5c55\u6027\u3002 GKE\u5728\u7b2c1\u5929\u652f\u6301TAU VM\uff0c\u5e2e\u52a9\u60a8\u4f18\u5316\u6ee1\u8db3\u60a8\u7684Containized\u5de5\u4f5c\u8d1f\u8f7d\u7684\u4ef7\u683c\u6027\u80fd\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\u5728GKE\u8282\u70b9\u6c60\u4e2d\u6307\u5b9aT2D\u673a\u5668\u7c7b\u578b\u5c06TAU VM\u6dfb\u52a0\u5230GKE\u7fa4\u96c6\u3002  TAU VMS\u5c06\u88ab\u5b9a\u4ef7\uff0c\u4ee5\u652f\u6301\u4e91\u5e94\u7528\u7a0b\u5e8f\u7684\u663e\u7740TCO\u548c\u4ef7\u683c\u6027\u80fd\u6539\u8fdb\u3002 32VCPU VM\uff0c\u5e26128GB RAM\u768432VCPU VM\u5c06\u4ee51.3520\u7f8e\u5143\u7684\u4ef7\u683c\u4e3a\u6bcf\u5c0f\u65f6$ 1.3520\uff0c\u4ee5\u4fbf\u5728US-Central1\u4e2d\u6309\u9700\u4f7f\u7528\u3002  \u5982\u679c\u60a8\u6709\u5174\u8da3\u5728Q3 2021\u5728Q3 2021\u83b7\u5f97\u65f6\u5c1d\u8bd5T2D VM\uff0c\u8bf7\u5728\u6b64\u5904\u6ce8\u518c\u3002 ", "note_en": "Scale-out workloads demand the best combination of performance and price to bring down the cost of delivering applications, all while providing an excellent user experience. We are excited to announce a new virtual machine (VM) family,  Tau VMs, coming to Google Cloud. Tau VMs extend  Compute Engine\u2019s VM offerings with a new option optimized for cost-effective performance of scale-out workloads.\n T2D, the first instance type in the Tau VM family, is based on 3rd Gen AMD EPYC TM processors and leapfrogs the VMs for scale-out workloads of any leading public cloud provider available today, both in terms of performance and workload total cost of ownership (TCO). The x86 compatibility provided by these AMD EPYC processor-based VMs gives you market-leading performance improvements and cost savings, without having to port your applications to a new processor architecture.\n As illustrated below, Tau VMs offer 56% higher absolute performance and 42% higher price-performance (est. SPECrate2017_int_base) compared to general-purpose VMs from any of the leading public cloud vendors.\n    Snap \u201cAt Snap, it is critical for our business to continue improving our scale-out compute infrastructure for key Snapchat capabilities like AR, Lenses, Spotlight and Maps,\u201d said Cody Powell, Senior Engineering Manager, Snap Inc. \u201cWe were impressed when we tested Google Cloud\u2019s new Tau VMs with Google Kubernetes Engine. While it&#39;s early days, we believe we can gain double digits in infrastructure performance improvements for key workloads\u2014enabling us to do more with less and invest even more in new features for our amazing Snapchat community.&#34;\n Twitter &#34;High performance at the right price point is a critical consideration as we work to serve the global public conversation,&#34; said Nick Tornow, Platform Lead, Twitter. \u201cWe are excited by initial tests that show potential for double digit performance improvement. We are collaborating with Google Cloud to more deeply evaluate benefits on price and performance for specific compute workloads that we can realize through use of the new Tau VM family.\u201d\n DoiT &#34;DoiT partners with leading cloud vendors who are focused on growth and cost optimization,\u201d said Yoav Toussia-Cohen, CEO,  DoiT International. \u201cIn our preliminary testing of Google\u2019s new Tau VMs with the Coremark benchmark, we were thrilled to see the incredible performance at 50% better than a comparable ARM-based offering from another leading public cloud. With Tau VMs, Google Cloud has set a new bar for price-performance, making the cloud even more accessible to digital-native companies. We are excited to bring Google\u2019s Tau VMs to our joint customers.&#34;\n  Tau VMs bring the benefit of Google\u2019s long-standing experience engineering platforms for scale-out workloads to our customers. They come in multiple predefined VM shapes, with up to 60vCPUs per VM, and 4GB of memory per vCPU. They offer up to 32 Gbps networking bandwidth and a wide range of network attached storage options, making Tau VMs ideal for scale-out workloads including web servers, containerized microservices, data-logging processing, media transcoding, and large-scale Java applications.\n  Google Kubernetes Engine (GKE) is the de facto standard for organizations looking for advanced container orchestration, delivering the highest levels of reliability, security, and scalability. GKE supports Tau VMs on day 1, helping you optimize price-performance for your containerized workloads. You can add Tau VMs to your GKE clusters by specifying the T2D machine type in your  GKE node-pools.\n  Tau VMs will be priced to support significant TCO and price-performance improvements for your cloud applications. A 32vCPU VM with 128GB RAM will be priced at $1.3520 per hour for on-demand usage in us-central1.\n  If you are interested in trying out T2D VMs when they become available in Q3 2021 please sign-up  here.", "posttime": "2021-06-20 12:28:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6027\u80fd,vms,vm", "title": "\u65b0\u7684TAU VMS\u4e3a\u6269\u5c55\u5de5\u4f5c\u8d1f\u8f7d\u63d0\u4f9b\u524d\u77bb\u6027\u6027\u80fd ", "title_en": "New Tau VMs deliver leading price-performance for scale-out workloads", "transed": 1, "url": "https://cloud.google.com/blog/products/compute/google-cloud-introduces-tau-vms", "via": "", "real_tags": ["\u6027\u80fd", "vms", "vm"]}, {"category": "", "categoryclass": "", "imagename": "04c7085958dc06d2dbdcb891a42d2694.jpg", "infoid": 1066975, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65b0\u7684SQLite-Utils Memory\u547d\u4ee4\u53ef\u4ee5\u5c06CSV\u548cJSON\u6570\u636e\u76f4\u63a5\u5bfc\u5165\u5185\u5b58\u7684SQLite Datbase\uff0c\u4f7f\u7528SQL\u7ec4\u5408\u548c\u67e5\u8be2\u5b83\uff0c\u5e76\u5c06\u7ed3\u679c\u8f93\u51fa\u4e3aCSV\uff0cJSON\u6216\u5404\u79cd\u5176\u4ed6\u683c\u5f0f\u7684\u7eaf\u6587\u672c\u8868\u3002\n   \u6211\u5f55\u5236\u4e86\u8fd9\u4e2a\u89c6\u9891\u6f14\u793a\u4e86\u65b0\u529f\u80fd - \u5728\u4e0b\u9762\u7684\u5b8c\u6574\u4f34\u594f\u7b14\u8bb0\u3002\n SQLite-utils\u5df2\u7ecf\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c06CSV\u548cJSON\u6570\u636e\u5bfc\u5165SQLite-Utils Insert\u547d\u4ee4\u7684SQLite\u6570\u636e\u5e93\u6587\u4ef6\u7684\u673a\u5236\u3002\u4f7f\u7528\u6b64\u5904\u7406\u6570\u636e\u6d89\u53ca\u4e24\u4e2a\u6b65\u9aa4\uff1a\u9996\u5148\u5c06\u5176\u5bfc\u5165TEMP.DB\u6587\u4ef6\uff0c\u7136\u540e\u4f7f\u7528SQLite-Utils\u67e5\u8be2\u8fd0\u884c\u67e5\u8be2\u5e76\u8f93\u51fa\u7ed3\u679c\u3002\n \u4f7f\u7528SQL\u91cd\u65b0\u5f62\u72b6\u6570\u636e\u771f\u5b9e\u6709\u7528 - \u7531\u4e8eSQLite-Utils\u53ef\u4ee5\u4ee5\u591a\u79cd\u4e0d\u540c\u7684\u683c\u5f0f\u8f93\u51fa\uff0c\u6211\u7ecf\u5e38\u53d1\u73b0\u81ea\u5df1\u5728CSV\u6587\u4ef6\u4e2d\u52a0\u8f7d\u5e76\u5c06\u5176\u9000\u56de\u4e3aJSON\uff0c\u6216\u53cd\u4e4b\u4ea6\u7136\u3002\n \u672c\u5468\u6211\u610f\u8bc6\u5230\u6211\u6709\u5927\u90e8\u5206\u7684\u4f5c\u54c1\u6765\u51cf\u5c11\u8fd9\u4e00\u6b65\u3002\u65b0\u7684SQLite-utils Memory\u547d\u4ee4\uff08\u6b64\u5904\u5b8c\u6574\u6587\u6863\uff09\u9488\u5bf9\u4e34\u65f6\u5185\u5b58\u7684SQLite\u6570\u636e\u5e93\u8fd0\u884c\u3002\u5b83\u53ef\u4ee5\u5bfc\u5165\u6570\u636e\uff0c\u6267\u884cSQL\u5e76\u8f93\u51fa\u4e00\u4e2a\u886c\u57ab\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u9700\u8981\u6cbf\u9014\u7684\u4efb\u4f55\u4e34\u65f6\u6570\u636e\u5e93\u6587\u4ef6\u3002\n \u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\u3002\u6211\u7684dogsheep github\u7ec4\u7ec7\u6709\u5f88\u591a\u5b58\u50a8\u5e93\u3002 github\u901a\u8fc7https://api.github.com/users/dogshep/repos at authentication-\u53ef\u9009\u7684api\u7aef\u70b9\u6765\u5236\u4f5c\u90a3\u4e9b\u53ef\u7528\u7684\u90a3\u4e9b\uff0c\u5b83\u8fd4\u56de\u770b\u8d77\u6765\u50cf\u8fd9\u6837\u7684json\uff08\u7b80\u4f53\uff09\uff1a\n [{\uff06\uff0334; id\uff06\uff0334 ;: 197431109\uff0c\uff06\uff0334;\u540d\u79f0\uff06\uff0334 ;:\uff06\uff0334; dogsheep-beta\uff06\uff0334 ;,\uff06\uff0334; full_name\uff06\uff0334 ;:\uff06\uff0334; Dogsheep / Dogsheep-beta\uff06\uff0334 ;,\uff06\uff0334; size\uff06\uff0334 ;:61\uff0c\uff06\uff0334; stargazers_count\uff06\uff0334 ;:79\uff0c\uff06\uff0334; thepers_count\uff06\uff0334 ;:79\uff0c\uff06\uff0334;\u53c9\u5b50\uff06\uff0334 ;: 0\uff0c\uff06\uff0334; open_issues\uff06\uff0334 ;:11}\uff0c{\uff06\uff0334; id\uff06\uff0334 ;: 256834907\uff0c\uff06\uff0334;\u59d3\u540d\uff06\uff0334 ;:\uff06\uff0334; dogsheep-\u7167\u7247\uff06\uff0334;\uff06\uff0334; full_name\uff06\uff0334 ;:\uff06\uff0334; dogsheep / dogsheep-photos\uff06\uff0334 ;,\uff06\uff0334; size\uff06\uff0334 ;: 64\uff0c\uff06\uff0334; stargazers_count\uff06\uff0334 ; 116\uff0c\uff06\uff0334;\u770b\u770b\u8005_Count\uff06\uff0334 ;:116\uff0c\uff06\uff0334;\u53c9\u5b50\uff06\uff0334 ;: 5\uff0c\uff06\uff0334; Open_issues\uff06\uff0334 ;:18}] \n\u4f7f\u7528SQLite-Utils Memory\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd93\u4e2a\u6700\u53d7\u6b22\u8fce\u7684Repos\u6309\u50cf\u8fd9\u6837\u7684\u661f\u661f\u6570\uff1a\n $ curl -s\uff06\uff0339; https\uff1a//api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils\u8bb0\u5fc6 - \uff06\uff0339;\u9009\u62e9full_name\uff0cforks_count\uff0cstargazers_count\uff0c\u4eceStdin Order by Stars\u4e2d\u7684\u661f\u661fDESC\u9650\u52363\uff06\uff0339; -tifull_name forks_count stars ------------------------------------- Dogsheep / Twitter-to-sqlite 12 225dogsheep / github-to-sqlite 14 139dogsheep / dogsheep-photos 5 116\n \u6211\u4eec\u6b63\u5728\u4f7f\u7528CURL\u5c06JSON\u83b7\u53d6\uff0c\u5e76\u5c06\u5176\u7ba1\u9053\u8fdb\u5165SQLite-Utils Memory-The-Meary\u201c\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u201d\u3002\u7136\u540e\u6211\u4eec\u901a\u8fc7\u4ee5\u4e0bSQL\u67e5\u8be2\uff1a\n  STDIN\u662f\u4e3a\u5de5\u5177\u4e2d\u7684\u6570\u636e\u63d0\u4f9b\u7684\u6570\u636e\u521b\u5efa\u7684\u4e34\u65f6\u8868\u3002\u67e5\u8be2\u9009\u62e9\u4e86\u4e09\u4e2aJSON\u5c5e\u6027\uff0c\u5c06Stargazers_Count\u91cd\u65b0\u521b\u5efa\u5230\u660e\u661f\uff0c\u6309\u661f\u7ea7\u6392\u5e8f\u5e76\u8fd4\u56de\u524d\u4e09\u4e2a\u3002\n \u8fd9\u91cc\u7684-t\u9009\u9879\u610f\u5473\u7740\u201c\u4f5c\u4e3a\u683c\u5f0f\u5316\u8868\u7684\u8f93\u51fa\u201d - \u6211\u4eec\u83b7\u53d6json\uff1a\n $ curl -s\uff06\uff0339; https\uff1a//api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils\u8bb0\u5fc6 - \uff06\uff0339;\u9009\u62e9full_name\uff0cforks_count\uff0cstargazers_count\uff0c\u4eceStdin Order by Stars\u4e2d\u7684\u661f\u661fDESC\u9650\u52363\uff06\uff0339; [{\uff06\uff0334; full_name\uff06\uff0334 ;:\uff06\uff0334; dogsheep / twitter-to-sqlite\uff06\uff0334;\uff06\uff0334; forks_count\uff06\uff0334 ;: 12\uff0c\uff06\uff0334;\u661f\u661f\uff06\uff0334;\uff1a225}\uff0c{ \uff06\uff0334; full_name\uff06\uff0334 ;:\uff06\uff0334; dogsheep / github-to-sqlite\uff06\uff0334 ;,\uff06\uff0334; forks_count\uff06\uff0334 ;:14\uff0c\uff0334;\u661f\u661f\uff06\uff0334;\uff1a139}\uff0c{\uff06\uff03 34; full_name\uff06\uff0334 ;:\uff06\uff0334; dogsheep / dogsheep-photos\uff06\uff0334;\uff06\uff0334; forks_count\uff06\uff0334 ;: 5\uff0c\uff06\uff0334;\u661f\u661f\uff06\uff0334;\uff1a116}]\n  $ curl -s\uff06\uff0339; https\uff1a//api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils\u8bb0\u5fc6 - \uff06\uff0339;\u9009\u62e9full_name\uff0cforks_count\uff0cstargazers_count\uff0c\u4eceStdin Order by Stars\u4e2d\u7684\u661f\u661fDESC\u9650\u52363\uff06\uff0339; --csvfull_name\uff0cforks_count\uff0cstarsdogsheep / twitter-to-sqlite\uff0c12,225dogsheep / github-to-sqlite\uff0c14,139dogsheep / dogsheep-photos\uff0c5,116 \n-t\u9009\u9879\u652f\u6301\u4f7f\u7528--fmt\u6307\u5b9a\u7684\u8bb8\u591a\u4e0d\u540c\u683c\u5f0f\u3002\u5982\u679c\u6211\u60f3\u901a\u8fc7\u661f\u661f\u751f\u6210\u9876\u90e8Reos\u7684\u4e73\u80f6\u8868\uff0c\u6211\u53ef\u4ee5\u8fd9\u6837\u505a\uff1a\n $ curl -s\uff06\uff0339; https\uff1a//api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils\u8bb0\u5fc6 - \uff06\uff0339;\u9009\u62e9full_name\uff0cforks_count\uff0cstargazers_count\uff0c\u4eceStdin Order by Stars\u4e2d\u7684\u661f\u661fDESC\u9650\u52363\uff06\uff0339; -t --fmt = laTex \\ begin {\u8868\u683c} {lrr} \\ hline full \\ _name\uff06amp; forks \\ _count\uff06amp;\u661f\u661f\\\\\\ hine dogsheep / twitter-to-sqlite\uff06amp; 12\uff06amp; 225 \\\\ dogsheep / github-to-sqlite\uff06amp; 14\uff06amp; 139 \\\\ dogsheep / dogsheep-photos\uff06amp; 5\uff06amp; 116 \\\\\\ hline \\\u7ed3\u675f{\u8868\u683c}\n \u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd0\u884c\u805a\u5408\u67e5\u8be2 - \u8ba9\u6211\u4eec\u5728\u6240\u6709\u5b58\u50a8\u5e93\u4e2d\u6dfb\u52a0\u603b\u4f53\u5927\u5c0f\u548c\u661f\u6570\uff1a\n $ curl -s\uff06\uff0339; https\uff1a//api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils\u8bb0\u5fc6 - \uff06\uff0339;\u4eceStdin\uff06\uff0339\u9009\u62e9sum\uff08size\uff09\uff0csum\uff08stargazers_count\uff09; -t sum\uff08size\uff09sum\uff08stargazers_count\uff09----------- ---------------------843 934\n \uff08\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u5c3a\u5bf8\u662f\u4ee5\u5343\u5b57\u8282\u6d4b\u91cf\u7684\uff1aGitHub API\u6587\u6863\u5728\u8fd9\u4e00\u70b9\u4e0a\u4e0d\u6e05\u695a\u3002\uff09\n  \u6240\u6709\u8fd9\u4e9b\u793a\u4f8b\u90fd\u4f7f\u7528JSON\u6570\u636e\u5904\u7406\u5230\u5de5\u5177\u4e2d - \u4f46\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5141\u8bb8\u60a8\u5bf9\u5176\u6267\u884c\u8fde\u63a5\u7684\u65b9\u5f0f\u4f20\u9012\u4e00\u4e2a\u6216\u591a\u4e2a\u4e0d\u540c\u683c\u5f0f\u7684\u6587\u4ef6\u3002\n  \u7ebd\u7ea6\u65f6\u62a5\u901a\u8fc7\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u5728Covid\u6848\u4ef6\u548c\u6b7b\u4ea1\u4e2d\u53d1\u5e03\u4e86\u7f8e\u56fd\u7684\u7f8e\u56fd\u9648\u8ff0\u3002 \nCDC\u6709\u4e00\u4e2a\u672a\u8bb0\u5f55\u7684JSON\u7aef\u70b9\uff08\u6211\u5728\u8fd9\u91cc\u5f52\u6863\uff09\u8ddf\u8e2a\u4e0d\u540c\u72b6\u6001\u75ab\u82d7\u63a5\u79cd\u7684\u8fdb\u5c55\u60c5\u51b5\u3002\n \u6211\u4eec\u5c06\u4ece\u8be5CSV\u6570\u636e\u5230\u8be5JSON\u6570\u636e\u8fd0\u884c\u52a0\u5165\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u8868\u3002\n \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4e0b\u8f7d\u6587\u4ef6\u3002\u4e3a\u4e86\u6211\u4eec\u7684\u76ee\u7684\uff0cCDC JSON\u6570\u636e\u5e76\u4e0d\u662f\u6b63\u786e\u7684\u5f62\u72b6\uff1a\n  sqlite-utils\u9884\u671f\u4e00\u4e2a\u5e73\u5766\u7684json armet\u5bf9\u8c61 - \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528JQ\u91cd\u65b0\u5851\u9020\u6570\u636e\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n    \u65e2\u7136\u6211\u4eec\u5728\u672c\u5730\u62e5\u6709\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u8fde\u63a5\u4ee5\u5c06\u5176\u7ec4\u5408\uff1a\n $ sqlite-utils memory us-solual.csv vaccination_data.json\uff06\uff0334;\u4eceT1\u52a0\u5165T2\u4e0a\u9009\u62e9max\uff08t1.date\uff09\uff0ct1.state\uff0ct1.cases\uff0ct1.dearts\uff0ct2.census2019\uff0ct2.dist_per_100k\u5728t1.state = replace\uff08t2.longname\uff0c\uff06\uff0339;\u7ebd\u7ea6\u5dde\uff06\uff0339; 39;\uff0c\uff06\uff0339;\u7ebd\u7ea6\uff06\uff0339;\uff09\u7531t1\u7ec4\u7ec4.State Order by dist_per_100k desc\uff06\uff0334; -tmax\uff08t1.date\uff09\u5dde\u75c5\u4f8b\u6b7b\u4ea1\u4eba\u53e3\u666e\u67e52019 dist_per_100k ----------------------------------- ------- -------- ------------------------2021-06-18\u54e5\u4f26\u6bd4\u4e9a49243 1141 705749 1492482021-06-18\u4f5b\u8499\u7279\u5dde24360 256 623989 1462572021-06-18\u7f57\u5fb7\u5c9b152383 2724\u4e2a1059361\u4e2a1412912021-06-18\u9a6c\u8428\u8bf8\u585e709263 17960 6892503 1396922021-06-18\u9a6c\u91cc\u5170461852 9703 6045680 1381932021-06-18\u7f05\u56e0\u5dde68753 854 1344212 1368942021 -06-18\u590f\u5a01\u593735903 507 1415872 136024 ...\n \u6211\u5728\u8fd9\u91cc\u4f7f\u7528\u81ea\u52a8\u521b\u5efa\u6570\u5b57\u522b\u540dT1\u548cT2\uff0c\u4f46\u6211\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ed6\u4eec\u7684\u5b8c\u6574\u8868\u59d3\u540d\u548c\uff0334;\u7f8e\u56fd\u56fd\u5bb6\uff06\uff0334; \uff08\u7531\u4e8e\u8fde\u5b57\u7b26\u6240\u9700\u7684\u5f15\u53f7\uff09\u548cVaccination_data\u4ee3\u66ff\u3002 \nreplace\uff08\uff09\u64cd\u4f5c\u9700\u8981\uff0c\u56e0\u4e3avaccination_data.json\u6587\u4ef6\u8c03\u7528\u7ebd\u7ea6\u201c\u7ebd\u7ea6\u72b6\u6001\u201d\uff0c\u800c\u7f8e\u56fd\u9648\u8ff0.CSV\u6587\u4ef6\u53ea\u9700\u79f0\u4e4b\u4e3a\u201c\u7ebd\u7ea6\u201d\u3002\n max\uff08t1.date\uff09\u548ct1\u7ec4.state\u662f\u4e00\u4e2a\u6709\u7528\u7684sqlite\u6280\u5de7\uff1a\u5982\u679c\u6267\u884c\u4e00\u4e2a\u7ec4\uff0c\u7136\u540e\u8be2\u95ee\u503c\u7684max\uff08\uff09\uff0c\u5219\u4ece\u8be5\u8868\u8fd4\u56de\u7684\u5176\u4ed6\u5217\u5c06\u662f\u5217\u7684\u5217\u5305\u542b\u6700\u5927\u503c\u7684\u884c\u3002\n \u8fd9\u4e2a\u6f14\u793a\u662f\u4e00\u4e2a\u5ef6\u4f38\u7684\u4e00\u70b9 - \u4e00\u65e6\u6211\u8fbe\u5230\u8fd9\u79cd\u590d\u6742\u7a0b\u5ea6\uff0c\u6211\u66f4\u6709\u53ef\u80fd\u5c06\u6587\u4ef6\u52a0\u8f7d\u5230\u78c1\u76d8\u4e0a\u7684SQLite\u6570\u636e\u5e93\u6587\u4ef6\u4e2d\uff0c\u5e76\u5728\u6570\u636e\u7f29\u653e\u4e2d\u6253\u5f00\u5b83\u4eec - \u4f46\u8fd9\u662f\u4e00\u4e2a\u66f4\u590d\u6742\u7684\u52a0\u5165\u7684\u6709\u8da3\u793a\u4f8b\u884c\u52a8\u3002\n  SQLite-utils Memred\u547d\u4ee4\u5177\u6709\u53e6\u4e00\u4e2a\u65b0\u6ce1\u6cab\u7684\u5957\u7b52\uff1a\u5b83\u4f1a\u81ea\u52a8\u68c0\u6d4bCSV\u6216TSV\u6587\u4ef6\u4e2d\u7684\u54ea\u4e2a\u5217\u5305\u542b\u6574\u6570\u6216\u6d6e\u70b9\u503c\uff0c\u5e76\u4ee5\u6b63\u786e\u7684\u7c7b\u578b\u521b\u5efa\u76f8\u5e94\u7684\u5185\u5b58\u4e2d\u7684SQLite\u8868\u3002\u8fd9\u53ef\u4ee5\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u786e\u4fddMax\uff08\uff09\u548cSum\uff08\uff09\u5e76\u6309\u5de5\u4f5c\u987a\u5e8f\uff0c\u800c\u4e0d\u4f1a\u610f\u5916\u5730\u5c061\u6392\u5e8f\u4e3a\u9ad8\u4e8e11\u3002\n \u6211\u4e0d\u60f3\u6253\u7834sqlite-utils\u63d2\u5165\u547d\u4ee4\u7684\u73b0\u6709\u7528\u6237\u7684\u5411\u540e\u517c\u5bb9\u6027\uff0c\u6240\u4ee5\u6211\u6dfb\u52a0\u4e86\u90a3\u91cc\u7684\u7c7b\u578b\u68c0\u6d4b\uff0c\u4f5c\u4e3a\u65b0\u7684\u9009\u9879\uff0c--detect-types\u6216-d for short\uff1a\n $ sqlite-utils\u63d2\u5165my.db us_states us-solues.csv --csv -d [############################# ######] 100\uff05$ sqlite-utils\u67b6\u6784my.dbcreate\u8868\uff06\uff0334; us_states\uff06\uff0334; \uff08[\u65e5\u671f]\u6587\u672c\uff0c[\u72b6\u6001]\u6587\u672c\uff0c[FIPS]\u6574\u6570\uff0c[\u6848\u4f8b]\u6574\u6570\uff0c[Deaths] Integer\uff09;\n   Sqlite-utils\uff1a3.10-\uff08\u603b\u517178\u4e2a\u7248\u672c\uff09-2021-06-19 Python CLI\u5b9e\u7528\u7a0b\u5e8f\u548c\u7528\u4e8e\u64cd\u7eb5SQLite\u6570\u636e\u5e93\u7684\u5e93 \ndogsheep-beta\uff1a0.10.2-\uff0820\u7248\u672c\u603b\u8ba1\uff09-2021-06-13\u4ece\u591a\u4e2aSQLite\u6570\u636e\u5e93\u8868\u4e2d\u6784\u5efa\u4e86\u5185\u5bb9\u7684\u641c\u7d22\u7d22\u5f15\uff0c\u5e76\u4f7f\u7528Databette\u5bf9\u5176\u8fd0\u884c\u523b\u9762\u641c\u7d22  Markdown-to-sqlite\uff1a1.0-\uff082\u7248\u672c\u603b\u8ba1\uff09-2021-06-13 CLI\u5de5\u5177\uff0c\u7528\u4e8e\u5c06\u6807\u8bb0\u6587\u4ef6\u52a0\u8f7d\u5230SQLite\u6570\u636e\u5e93\u4e2d ", "note_en": "The new  sqlite-utils memory command can import CSV and JSON data directly into an in-memory SQLite datbase, combine and query it using SQL and output the results as CSV, JSON or various other formats of plain text tables.\n   I\u2019ve recorded  this video demonstrating the new feature\u2014with full accompanying notes below.\n sqlite-utils already offers a mechanism for importing CSV and JSON data into a SQLite database file, in the form of the  sqlite-utils insert command. Processing data with this involves two steps: first import it into a  temp.db file, then use  sqlite-utils query to run queries and output the results.\n Using SQL to re-shape data is really useful\u2014since  sqlite-utils can output in multiple different formats, I frequently find myself loading in a CSV file and exporting it back out as JSON, or vice-versa.\n This week I realized that I had most of the pieces in place to reduce this to a single step. The new  sqlite-utils memory command ( full documentation here) operates against a temporary, in-memory SQLite database. It can import data, execute SQL and output the result in a one-liner, without needing any temporary database files along the way.\n Here\u2019s an example. My  Dogsheep GitHub organization has a number of repositories. GitHub make those available via an authentication-optional API endpoint at  https://api.github.com/users/dogsheep/repos\u2014which returns JSON that looks like this (simplified):\n [ {   &#34;id &#34;:  197431109,   &#34;name &#34;:   &#34;dogsheep-beta &#34;,   &#34;full_name &#34;:   &#34;dogsheep/dogsheep-beta &#34;,   &#34;size &#34;:  61,   &#34;stargazers_count &#34;:  79,   &#34;watchers_count &#34;:  79,   &#34;forks &#34;:  0,   &#34;open_issues &#34;:  11 }, {   &#34;id &#34;:  256834907,   &#34;name &#34;:   &#34;dogsheep-photos &#34;,   &#34;full_name &#34;:   &#34;dogsheep/dogsheep-photos &#34;,   &#34;size &#34;:  64,   &#34;stargazers_count &#34;:  116,   &#34;watchers_count &#34;:  116,   &#34;forks &#34;:  5,   &#34;open_issues &#34;:  18 }]\n With  sqlite-utils memory we can see the 3 most popular repos by number of stars like this:\n $ curl -s &#39;https://api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils memory - &#39; select full_name, forks_count, stargazers_count as stars from stdin order by stars desc limit 3 &#39; -tfull_name forks_count stars-------------------------- ------------- -------dogsheep/twitter-to-sqlite 12 225dogsheep/github-to-sqlite 14 139dogsheep/dogsheep-photos 5 116\n We\u2019re using  curl to fetch the JSON and pipe it into  sqlite-utils memory\u2014the  - means \u201cread from standard input\u201d. Then we pass the following SQL query:\n  stdin is the temporary table created for the data piped in to the tool. The query selects three of the JSON properties, renames  stargazers_count to  stars, sorts by stars and return the first three.\n The  -t option here means \u201coutput as a formatted table\u201d\u2014without that option we get JSON:\n $ curl -s &#39;https://api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils memory - &#39; select full_name, forks_count, stargazers_count as stars from stdin order by stars desc limit 3 &#39; [{&#34;full_name&#34;: &#34;dogsheep/twitter-to-sqlite&#34;, &#34;forks_count&#34;: 12, &#34;stars&#34;: 225}, {&#34;full_name&#34;: &#34;dogsheep/github-to-sqlite&#34;, &#34;forks_count&#34;: 14, &#34;stars&#34;: 139}, {&#34;full_name&#34;: &#34;dogsheep/dogsheep-photos&#34;, &#34;forks_count&#34;: 5, &#34;stars&#34;: 116}]\n  $ curl -s &#39;https://api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils memory - &#39; select full_name, forks_count, stargazers_count as stars from stdin order by stars desc limit 3 &#39; --csvfull_name,forks_count,starsdogsheep/twitter-to-sqlite,12,225dogsheep/github-to-sqlite,14,139dogsheep/dogsheep-photos,5,116\n The  -t option supports a number of different formats, specified using  --fmt. If I wanted to generate a LaTeX table of the top reos by stars I could do this:\n $ curl -s &#39;https://api.github.com/users/dogsheep/repos&#39; \\ | sqlite-utils memory - &#39; select full_name, forks_count, stargazers_count as stars from stdin order by stars desc limit 3 &#39; -t --fmt=latex\\begin{tabular}{lrr}\\hline full\\_name &amp; forks\\_count &amp; stars \\\\\\hline dogsheep/twitter-to-sqlite &amp; 12 &amp; 225 \\\\ dogsheep/github-to-sqlite &amp; 14 &amp; 139 \\\\ dogsheep/dogsheep-photos &amp; 5 &amp; 116 \\\\\\hline\\end{tabular}\n We can run aggregate queries too\u2014let\u2019s add up the total size and total number of stars across all of those repositories:\n $ curl -s &#39;https://api.github.com/users/dogsheep/repos&#39; \\| sqlite-utils memory - &#39; select sum(size), sum(stargazers_count) from stdin&#39; -t sum(size) sum(stargazers_count)----------- ----------------------- 843 934\n (I believe size here is measured in kilobytes: the GitHub API documentation isn\u2019t clear on this point.)\n  All of these examples have worked with JSON data piped into the tool\u2014but you can also pass one or more files, of different formats, in a way that lets you execute joins against them.\n  The New York Times publish a  us-states.csv file with Covid cases and deaths by state over time.\n The CDC have an  undocumented JSON endpoint (which I\u2019ve been  archiving here) tracking the progress of vaccination across different states.\n We\u2019re going to run a join from that CSV data to that JSON data, and output a table of results.\n First, we need to download the files. The  CDC JSON data isn\u2019t quite in the right shape for our purposes:\n  sqlite-utils expects a flat JSON array of objects\u2014we can use  jq to re-shape the data like so:\n    Now that we have the data locally, we can run a join to combine it using the following command:\n $ sqlite-utils memory us-states.csv vaccination_data.json &#34; select max(t1.date), t1.state, t1.cases, t1.deaths, t2.Census2019, t2.Dist_Per_100K from t1 join t2 on t1.state = replace(t2.LongName, &#39;New York State&#39;, &#39;New York&#39;) group by t1.state order by Dist_Per_100K desc&#34; -tmax(t1.date) state cases deaths Census2019 Dist_Per_100K-------------- ------------------------ ------- -------- ------------ ---------------2021-06-18 District of Columbia 49243 1141 705749 1492482021-06-18 Vermont 24360 256 623989 1462572021-06-18 Rhode Island 152383 2724 1059361 1412912021-06-18 Massachusetts 709263 17960 6892503 1396922021-06-18 Maryland 461852 9703 6045680 1381932021-06-18 Maine 68753 854 1344212 1368942021-06-18 Hawaii 35903 507 1415872 136024...\n I\u2019m using automatically created numeric aliases  t1 and  t2 for the files here, but I can also use their full table names  &#34;us-states&#34; (quotes needed due to the hyphen) and  vaccination_data instead.\n The  replace() operation there is needed because the  vaccination_data.json file calls New York \u201cNew York State\u201d while the  us-states.csv file just calls it \u201cNew York\u201d.\n The  max(t1.date) and  group by t1.state is  a useful SQLite trick: if you perform a  group by and then ask for the  max() of a value, the other columns returned from that table will be the columns for the row that contains that maximum value.\n This demo is a bit of a stretch\u2014once I reach this level of complexity I\u2019m more likely to load the files into a SQLite database file on disk and open them up in  Datasette\u2014but it\u2019s a fun example of a more complex join in action.\n  The  sqlite-utils memory command has another new trick up its sleeve: it automatically detects which columns in a CSV or TSV file contain integer or float values and creates the corresponding in-memory SQLite table with the correct types. This ensures  max() and  sum() and  order by work in a predictable manner, without accidentally sorting  1 as higher than  11.\n I didn\u2019t want to break backwards compatibility for existing users of the  sqlite-utils insert command so I\u2019ve added type detection there as a new option,  --detect-types or  -d for short:\n $ sqlite-utils insert my.db us_states us-states.csv --csv -d [####################################] 100%$ sqlite-utils schema my.dbCREATE TABLE &#34;us_states&#34; ( [date] TEXT, [state] TEXT, [fips] INTEGER, [cases] INTEGER, [deaths] INTEGER);\n   sqlite-utils:  3.10\u2014( 78 releases total)\u20142021-06-19 Python CLI utility and library for manipulating SQLite databases\n dogsheep-beta:  0.10.2\u2014( 20 releases total)\u20142021-06-13 Build a search index across content from multiple SQLite database tables and run faceted searches against it using Datasette\n  markdown-to-sqlite:  1.0\u2014( 2 releases total)\u20142021-06-13 CLI tool for loading markdown files into a SQLite database", "posttime": "2021-06-20 11:45:39", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "sqlite,\u6570\u636e\u5e93,database,\u5185\u5b58,csv", "title": "\u4f7f\u7528\u5185\u5b58\u4e2d\u7684SQLite\u6570\u636e\u5e93\u52a0\u5165CSV\u548cJSON\u6570\u636e ", "title_en": "Joining CSV and JSON data with an in-memory SQLite database", "transed": 1, "url": "https://simonwillison.net/2021/Jun/19/sqlite-utils-memory/", "via": "", "real_tags": ["sqlite", "\u6570\u636e\u5e93", "database", "\u5185\u5b58", "csv"]}]