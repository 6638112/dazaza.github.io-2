[{"category": "", "categoryclass": "", "imagename": "c106ce82fbc7c7d28936993aba2132a8.png", "infoid": 1067172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u5305\u5305\u542b\u9ad8\u6027\u80fd\uff0c\u67f1\u72b6\u5185\u5b58\u5b58\u50a8\u5f15\u64ce\uff0c\u652f\u6301\u5feb\u901f\u67e5\u8be2\uff0c\u66f4\u65b0\u548c\u8fed\u4ee3\uff0c\u5177\u6709\u96f6\u5206\u914d\u548c\u4f4d\u56fe\u7d22\u5f15\u3002\n    \u4e00\u822c\u601d\u60f3\u662f\u5229\u7528\u5728\u9635\u5217\uff08SOA\uff09\u7ed3\u6784\u4e2d\u7ec4\u7ec7\u6570\u636e\u7684\u7f13\u5b58\u53cb\u597d\u65b9\u5f0f\uff0c\u5426\u5219\u4ee5\u5176\u4ed6\u65b9\u5f0f\u77e5\u9053\uff06\uff0334;\u67f1\u72b6\uff06\uff0334;\u5b58\u50a8\u5728\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u3002\u8fd9\u53c8\u5141\u8bb8\u6211\u4eec\u975e\u5e38\u6709\u6548\u5730\u8fed\u4ee3\u548c\u8fc7\u6ee4\u5217\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u6b64\u5305\u8fd8\u5c06\u4f4d\u56fe\u7d22\u5f15\u6dfb\u52a0\u5230\u67f1\u72b6\u5b58\u50a8\uff0c\u5141\u8bb8\u4f7f\u7528\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\uff0c\u800c\u4e0d\u662f\u6216XOR\u6784\u5efa\u8fc7\u6ee4\u5668\u67e5\u8be2\uff08\u8bf7\u53c2\u9605\u4e0eSIMD\u652f\u6301\u7684Kelindar / Bitmap\uff09\u3002\n   \u4e3a\u4e86\u5c06\u6570\u636e\u653e\u5165\u5546\u5e97\uff0c\u60a8\uff06\uff0339; ll\u9700\u8981\u9996\u5148\u901a\u8fc7\u8c03\u7528newcollection\uff08\uff09\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u6bcf\u4e2a\u96c6\u5408\u90fd\u9700\u8981\u6a21\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528CreateColumn\uff08\uff09\u591a\u6b21\u6216\u901a\u8fc7\u8c03\u7528CreateColumnSof\uff08\uff09\u51fd\u6570\u4ece\u5bf9\u8c61\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u624b\u52a8\u6307\u5b9a\u3002\n \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u901a\u8fc7\u4f7f\u7528JSON.UNMARSHAL\uff08\uff09\u548c\u57fa\u4e8e\u52a0\u8f7d\u5207\u7247\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u81ea\u52a8\u521b\u5efaCOLUM\u6765\u52a0\u8f7d\u4e00\u4e9bJSON\u6570\u636e\u3002\u5b8c\u6210\u6b64\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5bf9\u8c61\u9010\u4e00\u63d2\u5165\u96c6\u5408\u6765\u52a0\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002\u8fd9\u662f\u901a\u8fc7\u91cd\u590d\u8c03\u7528\u96c6\u5408\u672c\u8eab\u7684INSERT\uff08\uff09\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\u3002\n \u6570\u636e\uff1a= loadfromjson\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67f1\u72b6\u96c6\u5408\u64ad\u653e\u5668\uff1a=\u5217\u3002 newcollection\uff08\uff09\u73a9\u5bb6\u3002 CreateColumnSof\uff08\u6570\u636e[0]\uff09//\u4ece\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u4e2d\u63d2\u5165\u6bcf\u4e2a\u9879\u76eefor _\uff0cv\uff1a=\u8303\u56f4\u6570\u636e{\u64ad\u653e\u5668\u3002\u63d2\u5165\uff08v\uff09}\n \u73b0\u5728\uff0c\u8ba9\uff06\uff0339; s\u8bf4\u6211\u4eec\u53ea\u60f3\u8981\u6dfb\u52a0\u7279\u5b9a\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u8c03\u7528CreateColumn\uff08\uff09\u65b9\u6cd5\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u4ee5\u521b\u5efa\u6240\u9700\u5217\u3002\n //\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u5217\u64ad\u653e\u5668\u521b\u5efa\u4e00\u4e2a\u65b0\u7684colument\u96c6\u5408\uff1a=\u5217\u3002 newcollection\uff08\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\uff0c\u5217\u3002forstring\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u7c7b\uff06\uff0334;\uff0c\u5217\u3002forstring\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\uff0c\u5217\u3002forfloat64\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\uff0c\u5217\u3002forint16\uff08\uff09\uff09//\u4ece\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u4e2d\u63d2\u5165\u6765\u81ea\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u7684_\uff0cv\uff1a=\u8303\u56f4loadfromjson\uff08\uff06\uff0334;\u64ad\u653e\u5668\u3002just\uff0334;\uff09{\u73a9\u5bb6\u3002\u63d2\u5165\uff08v\uff09} \n\u867d\u7136\u524d\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u63d2\u5165\u8bb8\u591a\u5bf9\u8c61\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\u5b83\u5e76\u4e14\u76f8\u5f53\u6548\u7387\u3002\u8fd9\u662f\u7531\u4e8e\u6bcf\u4e2a\u63d2\u5165\uff08\uff09\u76f4\u63a5\u5728\u96c6\u5408\u4e0a\u547c\u53eb\uff0c\u53d1\u8d77\u4e00\u4e2a\u5355\u72ec\u7684\u8d8a\u91ce\uff0c\u5e76\u4e14\u5728\u90a3\u91cc\u4e14\uff06\uff0339;\uff06\uff0339; s\u7684\u5c0f\u578b\u6027\u80fd\u6210\u672c\u3002\u5982\u679c\u8981\u6267\u884c\u6279\u91cf\u63d2\u5165\u5e76\u63d2\u5165\u8bb8\u591a\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u4e8b\u52a1\u4e0a\u8c03\u7528Insert\uff08\uff09\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u6240\u793a\u3002\u8bf7\u6ce8\u610f\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u901a\u8fc7\u8c03\u7528Query\uff08\uff09\u65b9\u6cd5\u5e76\u5728\u4e8b\u52a1\u4e0a\u8c03\u7528Txn.insert\uff08\uff09\u65b9\u6cd5\u800c\u4ee3\u66ff\u96c6\u5408\u4e0a\u7684\u5dee\u5f02\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08func\uff08txn * txn\uff09\u9519\u8bef{for _\uff0cv\uff1a= loadfromjson\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09{txn\u3002\u63d2\u5165\uff08v\uff09} return nil // commit}\uff09\n  \u8be5\u5546\u5e97\u5141\u8bb8\u60a8\u6839\u636e\u67d0\u4e9b\u5c5e\u6027\u7684\u5b58\u5728\u6216\u5176\u503c\u67e5\u8be2\u6570\u636e\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u67e5\u8be2\u6211\u4eec\u7684\u96c6\u5408\u5e76\u5728\u4e8b\u52a1\u4e0a\u4f7f\u7528withValue\uff08\uff09\u65b9\u6cd5\u5e94\u7528\u8fc7\u6ee4\u64cd\u4f5c\u3002\u6b64\u65b9\u6cd5\u626b\u63cf\u503c\u5e76\u68c0\u67e5\u67d0\u4e2a\u8c13\u8bcd\u662f\u5426\u8bc4\u4f30\u4e3atrue\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\uff06\uff0339;\u5982\u679c\u4ed6\u4eec\u7684\u73ed\u7ea7\u7b49\u4e8e\uff06\uff0334; rogue\uff06\uff0334;\u6211\u4eec\u8df3\u8fc7\u4ed6\u4eec\u7684\u8bfe\u7a0b\uff0c\u626b\u63cf\u4ed6\u4eec\u7684\u8bfe\u7a0b\uff0c\u62ac\u5934\u770b\u4ed6\u4eec\u7684\u8bfe\u7a0b\u3002\u5728\u6700\u540e\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8c03\u7528count\uff08\uff09\u65b9\u6cd5\uff0c\u53ea\u8ba1\u7b97\u7ed3\u679c\u96c6\u3002\n //\u6b64\u67e5\u8be2\u6267\u884c\uff06\uff0334;\u7c7b\uff06\uff0334;\u5217\u7403\u5458\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{COUNT\uff1a= TXN\u3002\u6709value\uff08\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334; rogue\uff06\uff0334;} \uff09\u3002count\uff08\uff09\u8fd4\u56denil}\uff09\n \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\uff06\uff0339; ll\u9700\u8981\u7ecf\u5e38\u505a\u8fd9\u4e2a\u67e5\u8be2\u5417\uff1f\u53ef\u4ee5\u7b80\u5355\u5730\u521b\u5efa\u5177\u6709\u76f8\u540c\u8c13\u8bcd\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u6bcf\u6b21\uff08a\uff09\u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u96c6\u5408\u4e2d\u5e76\u4e14\uff08b\uff09\u66f4\u65b0\u4f9d\u8d56\u5217\u7684\u503c\u3002\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u4f9d\u8d56\u4e8e\uff06\uff0334\u7684\u6d41\u6c13\u6307\u6570\u7684\u62f3\u5934;\u67f1\u5b50\u3002\u6b64\u7d22\u5f15\u9002\u7528\u4e8e\u76f8\u540c\u7684\u8c13\u8bcd\uff0c\u5982\u679c\u7c7b\u662f\uff06\uff0334;\u6d41\u6c13\uff06\uff0334; rogue\uff06\uff0334;\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u8c03\u7528\uff08\uff09\u65b9\u6cd5\u5e76\u63d0\u4f9b\u7d22\u5f15\u540d\u79f0\u6765\u67e5\u8be2\u8fd9\u4e00\u70b9\u3002\n \u7d22\u5f15\u57fa\u672c\u4e0a\u7c7b\u4f3c\u4e8e\u5e03\u5c14\u5217\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u9009\u62e9\u5b83\uff06\uff0339; QUENCEITY\u3002\u73b0\u5728\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u67e5\u8be2\u5c06\u572810-100\u500d\u7684\u901f\u5ea6\u5de6\u53f3\u624d\u80fd\u66f4\u5feb\u5730\u6267\u884c\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528Bitmap\u7d22\u5f15\u4e3a\uff06\uff0334; Rogue\uff06\uff0334;\u7d22\u5f15\u5e76\u5728\u67e5\u8be2\u65f6\u5bf9\u4e24\u4e2a\u4f4d\u56fe\u6267\u884c\u7b80\u5355\u7684\u903b\u8f91\u548c\u64cd\u4f5c\u3002\u8fd9\u907f\u514d\u4e86\u5728\u67e5\u8be2\u671f\u95f4\u7684\u6574\u4e2a\u626b\u63cf\u548c\u5e94\u7528\u8c13\u8bcd\u3002\n //\u521b\u5efa\u7d22\u5f15\uff06\uff0334; rogue\uff06\uff0334;\u63d0\u524d\u3002 createIndex\uff08\uff06\uff0334; rogue\uff06\uff0334;\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334; rogue\uff06\uff0334;}\uff09//\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\u4ee5\u524d\u7684\u67e5\u8be2\uff0c\u4f46\u73a9\u5bb6\u66f4\u5feb\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{count\uff1a= txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002count\uff08\uff09\u8fd4\u56denil}\uff09 \n\u67e5\u8be2\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u7d22\u5f15\u4ea4\u53c9\u53e3\uff0c\u5dee\u5f02\u548c\u8054\u5408\u64cd\u4f5c\u3002\u8fd9\u5141\u8bb8\u60a8\u63d0\u51fa\u66f4\u590d\u6742\u7684\u96c6\u5408\u95ee\u9898\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5047\u8bbe\u6211\u4eec\u5728\u7c7b\u5217\u4e2d\u62e5\u6709\u4e00\u5806\u7d22\u5f15\uff0c\u6211\u4eec\u5e0c\u671b\u63d0\u51fa\u4e0d\u540c\u7684\u95ee\u9898\u3002\n \u9996\u5148\uff0c\u8ba9Let\uff06\uff0339; s\u5c1d\u8bd5\u901a\u8fc7\u5e94\u7528\u540c\u4e00\u547d\u540d\u7684\u65b9\u6cd5\u6765\u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9996\u5148\u9009\u62e9\u53ea\u9009\u62e9\u76d7\u8d3c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e0e\u6cd5\u5e08\u5408\u5e76\uff0c\u5bfc\u81f4\u5305\u542b\u76d7\u8d3c\u548c\u6cd5\u5e08\u7684\u9009\u62e9\u3002\n  \u63a5\u4e0b\u6765\uff0c\u8ba9\uff06\uff0339;\u7edf\u8ba1\u6bcf\u4e2a\u4eba\u90fd\u6ca1\u6709\u4e00\u4e2a\u6d41\u6c13\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\uff08\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5728\u96c6\u5408\u4e0a\u6267\u884c\u5dee\u5f02\uff08\u5373\u4e8c\u8fdb\u5236\u800c\u4e0d\u662f\u64cd\u4f5c\uff09\u3002\u9664\u4e86\u76d7\u8d3c\u4e4b\u5916\uff0c\u8fd9\u5c06\u5bfc\u81f4\u96c6\u5408\u4e2d\u6240\u6709\u73a9\u5bb6\u7684\u8ba1\u6570\u3002\n  \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u7ec4\u5408\u6240\u6709\u65b9\u6cd5\u5e76\u4fdd\u6301\u66f4\u590d\u6742\u7684\u67e5\u8be2\u3002\u5f53\u67e5\u8be2\u7d22\u5f15\u548c\u975e\u7d22\u5f15\u5b57\u6bb5\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\uff0c\u56e0\u4e3a\u6bcf\u6b21\u626b\u63cf\u90fd\u5c06\u4ec5\u9002\u7528\u4e8e\u9009\u62e9\uff0c\u52a0\u5feb\u67e5\u8be2\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u7279\u5b9a\u7d22\u5f15\u4e0a\u6709\u8fc7\u6ee4\u5668\uff0c\u53ef\u9009\u62e950\uff05\u7684\u64ad\u653e\u5668\uff0c\u7136\u540e\u60a8\u5bf9\u6b64\u8fdb\u884c\u626b\u63cf\uff08\u4f8b\u5982\uff0cvalue\uff08\uff09\uff09\uff0c\u5b83\u53ea\u626b\u63cf50\uff05\u7684\u7528\u6237\uff0c\u56e0\u6b64\u5c06\u66f4\u5feb\u5730\u626b\u63cf50\uff05\u3002\n //\u8d85\u8fc730\u5c81\u7684\u76d7\u8d3c\uff1f\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u7528float\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v float64\uff09bool {return v\uff06gt; = 30}\uff09 \u3002count\uff08\uff09\u8fd4\u56denil}\uff09\n  \u5728\u4ee5\u524d\u7684\u6240\u6709\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u505a\u4e86\u8ba1\u7b97\u7ed3\u679c\u96c6\u4e2d\u5143\u7d20\u6570\u7684\u8ba1\u6570\uff08\uff09\u64cd\u4f5c\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\uff06\uff0339; ll\u770b\u770b\u6211\u4eec\u5982\u4f55\u8fed\u4ee3\u7ed3\u679c\u96c6\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u67092\u4e2a\u4e3b\u8981\u65b9\u6cd5\uff0c\u8ba9\u6211\u4eec\u8fd9\u6837\u505a\uff1a\n range\uff08\uff09\u65b9\u6cd5\u4ee5\u5217\u540d\u4e3a\u53c2\u6570\uff0c\u5141\u8bb8\u66f4\u5feb\u7684get / set\u4e3a\u8be5\u5217\u7684\u503c\u3002 \nSELECT\uff08\uff09\u65b9\u6cd5\u5e76\u672a\u9884\u9009\u62e9\u4efb\u4f55\u7279\u5b9a\u5217\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u6709\u70b9\u6162\uff0c\u5b83\u4e5f\u4e0d\u5141\u8bb8\u4efb\u4f55\u66f4\u65b0\u3002\n \u9996\u5148\u68c0\u67e5\uff06\uff0339;\u9996\u5148\u68c0\u67e5\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528Range\uff08\uff09\u65b9\u6cd5\u548c\u63d0\u4f9b\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\u9009\u62e9\u6240\u6709\u6d41\u6c13\u5e76\u901a\u8fc7\u4f7f\u7528\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u6765\u6253\u5370\u51fa\u4ed6\u4eec\u7684\u540d\u79f0\u3002\u5217\u5230\u5b83\u3002\u5305\u542b\u5149\u6807\u7684\u56de\u8c03\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u5b57\u7b26\u4e32\uff08\uff09\u65b9\u6cd5\u6765\u5feb\u901f\u83b7\u53d6\u5217\u7684\u503c\u6765\u68c0\u7d22\u5b57\u7b26\u4e32\u503c\u3002\u5b83\u8fd8\u5305\u542bint\uff08\uff09\uff0cuint\uff08\uff09\uff0cfloat\uff08\uff09\u6216\u66f4\u591a\u901a\u7528\u503c\uff08\uff09\u7684\u65b9\u6cd5\uff0c\u4ee5\u63d0\u53d6\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {println\uff08\uff06\uff0334; Rogue name\uff06\uff0334;\uff0cv\u3002\u5b57\u7b26\u4e32\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09return nil}\n \u73b0\u5728\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e24\u5217\u600e\u4e48\u529e\uff1f\u8be5\u8303\u56f4\u4ec5\u5141\u8bb8\u60a8\u5feb\u901f\u9009\u62e9\u5355\u4e2a\u5217\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728\u8fed\u4ee3\u671f\u95f4\u901a\u8fc7\u5176\u540d\u79f0\u68c0\u7d22\u5176\u4ed6\u5217\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u76f8\u5e94\u7684StringAt\uff08\uff09\uff0cfloatat\uff08\uff09\uff0cIntat\uff08\uff09\uff0cUIntat\uff08\uff09\u6216ValueAt\uff08\uff09\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {println\uff08\uff06\uff0334; Rogue\u540d\u79f0\uff06\uff0334;\uff0cv\u3002\u5b57\u7b26\u4e32\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0println\uff08\uff06\uff0334;\u6d41\u6c13\u65f6\u4ee3\uff06\uff0334; v\u3002Intat\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\uff09\uff09//\u6253\u5370\u5e74\u9f84\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09\n \u53e6\u4e00\u65b9\u9762\uff0cSELECT\uff08\uff09\u5141\u8bb8\u60a8\u6267\u884c\u63d0\u4f9b\u9009\u62e9\u5149\u6807\u7684\u53ea\u8bfb\u9009\u62e9\u3002\u6b64\u5149\u6807\u4e0d\u5141\u8bb8\u4efb\u4f55\u66f4\u65b0\uff0c\u5220\u9664\u6216\u63d2\u5165\uff0c\u4e5f\u4e0d\u5141\u8bb8\u9884\u9009\u62e9\u4efb\u4f55\u7279\u5b9a\u5217\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u9009\u62e9\u5668\u6253\u5370\u51fa\u6240\u6709\u6d41\u6c13\u7684\u6240\u6709\u76d7\u8d3c\u7684\u540d\u79f0\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u9009\u62e9\uff08func\uff08v\u5217\u9009\u62e9\u5668\uff09bool {println\uff08\uff06\uff0334; rogue name\uff06\uff0334; v\u3002 Stringat\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334;\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09 \n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u9700\u8981\u5feb\u901f\u5220\u9664\u96c6\u5408\u4e2d\u7684\u6240\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdeleteAll\uff08\uff09\u6216deleteIf\uff08\uff09\u65b9\u6cd5\u6d3e\u4e0a\u7528\u65b9\u4fbf\u4e86\u3002\u8fd9\u4e9b\u65b9\u6cd5\u975e\u5e38\u5feb\uff08\u5c24\u5176\u662fdeleteAll\uff08\uff09\uff09\uff0c\u5e76\u5141\u8bb8\u60a8\u5feb\u901f\u5220\u9664\u9002\u5f53\u7684\u7ed3\u679c\uff0c\u540c\u610f\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u5728\u4e8b\u52a1\u4e2d\u9009\u62e9\u5b83\u4eec\u5e76\u8c03\u7528DeleteAll\uff08\uff09\u65b9\u6cd5\uff0c\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u76d7\u8d3c\u3002\n   \u4e3a\u4e86\u66f4\u65b0\u96c6\u5408\u4e2d\u7684\u67d0\u4e9b\u9879\u76ee\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u8c03\u7528\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u548c\u76f8\u5e94\u7684\u5149\u6807\uff06\uff0339; s\u66f4\u65b0\uff08\uff09\u6216updateateate\uff08\uff09\u65b9\u6cd5\uff0c\u5141\u8bb8\u539f\u5b50\u5730\u66f4\u65b0\u67d0\u4e2a\u5217\u7684\u503c\u3002\u5982\u679c\u5546\u5e97\u652f\u6301\u4ea4\u6613\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u5df2\u63d0\u4ea4\u4e8b\u52a1\u65f6\uff0c\u624d\u4f1a\u5c06\u66f4\u65b0\u76f4\u63a5\u53cd\u6620\uff0c\u4f46\u624d\u80fd\u5c06\u66f4\u65b0\u5e94\u7528\u4e8e\u96c6\u5408\u3002\u8fd9\u5141\u8bb8\u9694\u79bb\u548c\u56de\u6eda\u3002\n \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u6240\u6709\u6d41\u6c13\u5e76\u66f4\u65b0\u5b83\u4eec\u7684\u5e73\u8861\u548c\u5e74\u9f84\uff0c\u4ee5\u67d0\u4e9b\u503c\u3002\u4e8b\u52a1\u8fd4\u56denil\uff0c\u56e0\u6b64\u5b83\u5c06\u5728query\uff08\uff09\u65b9\u6cd5\u8fd4\u56de\u65f6\u81ea\u52a8\u63d0\u4ea4\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09 //\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\u523010.0 v\u3002Updateat\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; 50\uff09//\u66f4\u65b0\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\u523050 return true} //\u9009\u62e9\u4f59\u989d\u8fd4\u56denil}\uff09\n \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u9012\u5f52\u6216\u51cf\u5c11\u6570\u503c\u3002\u4e3a\u4e86\u5b8c\u6210\u6b64\u64cd\u4f5c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5149\u6807\u6216\u9009\u62e9\u5668\u7684\u63d0\u4f9b\u7684\u6dfb\u52a0\uff08\uff09\u6216addat\uff08\uff09\u64cd\u4f5c\u3002\u6ce8\u610f\uff0c\u8fd8\u5c06\u76f8\u5e94\u5730\u66f4\u65b0\u7d22\u5f15\uff0c\u5e76\u4e14\u8c13\u8bcd\u4ee5\u6700\u65b0\u7684\u503c\u91cd\u65b0\u8bc4\u4f30\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c06\u6240\u6709\u76d7\u8d3c\u7684\u5e73\u8861\u5f52\u56e0\u4e8e\u539f\u5b50\u800c\u50cf\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN * TXN\uff09\u9519\u8bef{TXN\u3002\u4e0e\uff08\uff06\uff0334; rogue\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u6dfb\u52a0\uff08500.0\uff09 //\u9012\u589e\uff06\uff0334;\u4f59\u989d\uff06\uff0334; by 500\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09\n  \u6709\u65f6\uff0c\u5728\u4e0d\u518d\u9700\u8981\u5b83\u4eec\u65f6\u81ea\u52a8\u5220\u9664\u67d0\u4e9b\u884c\u662f\u6709\u7528\u7684\u3002\u4e3a\u6b64\uff0c\u5e93\u4f1a\u81ea\u52a8\u5c06expire\u5217\u6dfb\u52a0\u5230\u6bcf\u4e2a\u65b0\u96c6\u5408\u4e2d\uff0c\u5e76\u540c\u65f6\u542f\u52a8\u6e05\u9664Goroutine\uff0c\u5468\u671f\u6027\u5730\u8fd0\u884c\u5e76\u6e05\u9664\u5df2\u8fc7\u671f\u7684\u5bf9\u8c61\u3002\u8981\u8bbe\u7f6e\u6b64\u9879\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u96c6\u5408\u4e0a\u4f7f\u7528INSERTWITHTL\uff08\uff09\u65b9\u6cd5\uff0c\u5141\u8bb8\u4f7f\u7528\u5b9a\u4e49\u7684\u65f6\u95f4\u6301\u7eed\u65f6\u95f4\u63d2\u5165\u5bf9\u8c61\u3002 \n\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5bf9\u8c61\u63d2\u5165\u96c6\u5408\u5e76\u4ece\u5f53\u524d\u65f6\u95f4\u5c06\u65f6\u95f4\u8bbe\u7f6e\u4e3a5\u79d2\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u5c06\u81ea\u52a8\u4ece\u96c6\u5408\u4e2d\u81ea\u52a8\u9a71\u9010\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u56de\u6536\u5176\u7a7a\u95f4\u3002\n \u73a9\u5bb6\u3002 InsertWithttl\uff08\u6620\u5c04[String]\u63a5\u53e3{} {\uff06\uff0334;\u59d3\u540d\uff06\uff0334 ;:\uff06\uff0334; merlin\uff06\uff0334 ;,\uff06\uff0334;\u7c7b\uff06\uff0334 ;:\uff06\uff0334;\u6cd5\u5e08\u548c\uff0334 ;,\uff06\uff0334;\u5e74\u9f84\uff06\uff0334 ;:55\uff0c\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\uff1a500\uff0c}\uff0c5 *\u65f6\u95f4\u3002\u7b2c\u4e8c\uff09//\u65f6\u95f4\u52305\u79d2\n \u5728\u4e00\u4e2a\u6709\u8da3\u7684\u8282\u70b9\u4e0a\uff0c\u7531\u4e8e\u81ea\u52a8\u6dfb\u52a0\u5230\u6bcf\u4e2a\u96c6\u5408\u7684\u5230\u671f\u5217\u662f\u4e00\u4e2a\u5b9e\u9645\u7684\u666e\u901a\u5217\uff0c\u60a8\u53ef\u4ee5\u67e5\u8be2\u751a\u81f3\u66f4\u65b0\u5b83\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u67e5\u8be2\u5e76\u6709\u6761\u7406\u5730\u66f4\u65b0\u5230\u671f\u5217\u3002\u793a\u4f8b\u52a0\u8f7d\u65f6\u95f4\uff0c\u6dfb\u52a0\u4e00\u5c0f\u65f6\u5e76\u66f4\u65b0\u5b83\uff0c\u4f46\u5728\u7ec3\u4e60\u4e2d\uff0c\u5982\u679c\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5219\u5e94\u4f7f\u7528\u53ef\u4ee5\u539f\u5b50\u6267\u884c\u7684Add\uff08\uff09\u65b9\u6cd5\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{RETURN TXN\u3002\u8303\u56f4\uff08\uff06\uff0334; expire\uff06\uff0334; func\uff08v\u5217\uff09bool {oldexpire\uff1a= time\u3002unix\uff080\uff0cv\u3002int\uff08\uff09\uff09 //\u5c06\u5230\u671f\u5230\u671f.Time.Time NewExt\uff1a= ExpiReat\u3002\u6dfb\u52a0\uff081 *\u65f6\u95f4\u3002\u5c0f\u65f6\uff09\u3002Unixnano\uff08\uff09//\u6dfb\u52a0\u4e00\u4e9b\u65f6\u95f4v\u3002\u66f4\u65b0\uff08newext\uff09return true}\uff09}\uff09\n  \u4e8b\u52a1\u5141\u8bb8\u5728\u4e24\u4e2a\u5e76\u53d1\u64cd\u4f5c\u4e4b\u95f4\u9694\u79bb\u3002\u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u6279\u5904\u7406\u67e5\u8be2\u90fd\u5fc5\u987b\u901a\u8fc7\u6b64\u5e93\u4e2d\u7684\u4e8b\u52a1\u8fdb\u884c\u3002\u67e5\u8be2\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5360\u636e\u4e86\u5217\u7684\u5217\u6307\u9488\uff0c\u8be5\u6307\u9488\u5305\u542b\u652f\u6301\u67e5\u8be2\u7684\u5404\u79cd\u8f85\u52a9\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c1d\u8bd5\u8fed\u4ee3\u6240\u6709\u73a9\u5bb6\u5e76\u901a\u8fc7\u5c06\u5176\u8bbe\u7f6e\u4e3a10.0\u6765\u66f4\u65b0\u5b83\u4eec\u7684\u4f59\u989d\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de\uff0c\u5219\u67e5\u8be2\u65b9\u6cd5\u4f1a\u81ea\u52a8\u8c03\u7528txn.commit\uff08\uff09\uff0c\u800c\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u3002\u5728\u7ffb\u76d6\u65b9\u9762\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u51fd\u6570\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u67e5\u8be2\u5c06\u81ea\u52a8\u8c03\u7528txn.rollback\uff08\uff09\uff0c\u56e0\u6b64\u5c06\u5e94\u7528\u4efb\u4f55\u66f4\u6539\u3002\n //\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09//\u5426\u9519\u8bef\uff0ctxn.commit\uff08\uff09\u5c06\u88ab\u79f0\u4e3areturn nil}\uff09\n \u73b0\u5728\uff0c\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u66f4\u65b0\u4f59\u989d\uff0c\u4f46\u67e5\u8be2\u56de\u8c03\u8fd4\u56de\u9519\u8bef\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5747\u672a\u5728\u5e95\u5c42\u96c6\u5408\u4e2d\u53cd\u6620\u51fa\u66f4\u65b0\u3002 \n//\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09//\u8fd4\u56de\u9519\u8bef\uff0ctxn.rollback\uff08\uff09\u5c06\u88ab\u79f0\u4e3areturn fmt\u3002errorf\uff08\uff06\uff0334; bug\uff06\uff0334;\uff09}\uff09\n \u60a8\u53ef\u4ee5\uff08\u4f46\u662fprobablety won\uff06\uff0339; t\u9700\u8981\uff09\u624b\u52a8\u8c03\u7528comment\uff08\uff09\u6216\u6eda\u52a8\uff08\uff09\uff0c\u6839\u636e\u9700\u8981\u591a\u6b21\u3002\u8fd9\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u90e8\u5206\u66f4\u65b0\uff0c\u4f46\u662f\u8c03\u7528\u5b83\u4eec\u901a\u5e38\u4f1a\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u51fb\u4e2d\u7ee9\u6548\u3002\n //\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09txn\u3002commit\uff08\uff09//\u624b\u52a8\u63d0\u4ea4\u6240\u6709\u66f4\u6539\u8fd4\u56denil //\u8fd9\u5c06\u518d\u6b21\u8c03\u7528txn.commit\uff08\uff09\uff0c\u4f46\u5c06\u662f\u4e00\u4e2ano-op}\uff09\n  \u6b64\u5e93\u8fd8\u652f\u6301\u5c06\u6240\u6709\u4ea4\u6613\u59cb\u7ec8\u62e8\u51fa\u7684\u6d41\u5f0f\u4f20\u8f93\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u751f\u3002\u8fd9\u5141\u8bb8\u60a8\u5b9e\u73b0\u81ea\u5df1\u7684\u66f4\u6539\u6570\u636e\u6355\u83b7\uff08CDC\uff09\u4fa6\u542c\u5668\uff0c\u5c06\u6570\u636e\u6d41\u5165Kafka\u6216\u8fdc\u7a0b\u6570\u636e\u5e93\u4ee5\u8fdb\u884c\u8010\u7528\u3002\u8981\u542f\u7528\u5b83\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u521b\u5efa\u96c6\u5408\u671f\u95f4\u63d0\u4f9bCommit.Writer\u63a5\u53e3\u7684\u5b9e\u73b0\u3002\n \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5229\u7528Commit.Whannel\u5b9e\u73b0\u4e86Commit.Writer\uff0c\u5176\u7b80\u5355\u5730\u5c06\u63d0\u4ea4\u53d1\u5e03\u5230Go\u9891\u9053\u4e2d\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7f13\u51b2\u7684\u901a\u9053\u5e76\u7ee7\u7eed\u4f7f\u7528\u5355\u72ec\u7684Goroutine\u6d88\u8017\u63d0\u4ea4\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u5546\u5e97\u4e2d\u53d1\u751f\u65f6\u67e5\u770b\u4e8b\u52a1\u3002\n //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d0\u4ea4\u7f16\u5199\u5668\uff08\u7b80\u5355\u9891\u9053\uff09\u548c\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\u7f16\u5199\u5668\uff1a= make\uff08\u63d0\u4ea4\u3002\u9891\u9053\uff0c1024\uff09\u64ad\u653e\u5668\uff1a= newCollection\uff08\u5217\u3002\u9009\u9879{writer\uff1awriter\uff0c}\uff09//\u8bfb\u53d6\u6765\u81ea\u9891\u9053\u7684\u66f4\u6539func\uff08\uff09{for commit\uff1a= writer {println\uff08\uff06\uff0334; commit\uff06\uff0334;\u63d0\u4ea4\u3002\u952e\u5165\u3002string\uff08\uff09\uff09}}\uff08\uff09// ...\u63d2\u5165\uff0c\u66f4\u65b0\u6216\u5220\u9664\n \u5728\u5355\u72ec\u7684\u5907\u6ce8\u4e0a\uff0c\u4fdd\u8bc1\u6b64\u66f4\u6539\u6d41\u662f\u4e00\u81f4\u548c\u5e8f\u5217\u5316\u7684\u3002\u8fd9\u610f\u5473\u7740\u60a8\u8fd8\u53ef\u4ee5\u590d\u5236\u5176\u4ed6\u6570\u636e\u5e93\u4e0a\u7684\u8fd9\u4e9b\u66f4\u6539\u5e76\u540c\u6b65\u4e24\u8005\u3002\u5b9e\u9645\u4e0a\uff0c\u6b64\u5e93\u8fd8\u5728\u96c6\u5408\u4e0a\u63d0\u4f9b\u5141\u8bb8\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u91cd\u64ad\uff08\uff09\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91cd\u64ad\uff08\uff09\u65b9\u6cd5\u4e0e\u66f4\u6539\u6d41\u4e00\u8d77\u521b\u5efa\u4e24\u4e2a\u96c6\u5408\u4e3b\u548c\u526f\u672c\u548casucronouse\u5c06\u6240\u6709\u63d0\u4ea4\u4ece\u4e3b\u5230\u526f\u672c\u590d\u5236\u5230\u526f\u672c\u3002 \n//\u521b\u5efa\u4e00\u4e2ap rimary\u96c6\u5408\u7f16\u5199\u5668\uff1a= make\uff08\u63d0\u4ea4\u3002\u9891\u9053\uff0c1024\uff09primary\uff1a=\u5217\u3002 newcollection\uff08\u4e13\u680f\u3002\u9009\u9879{writer\uff1a\uff06amp; writer\uff0c}\uff09\u4e3b\u8981\u3002\u5177\u6709\u76f8\u540c\u67b6\u6784\u526f\u672c\u7684CreateColumnSof\uff08Object\uff09//\u526f\u672c\uff1a=\u5217\u3002 newcollection\uff08\uff09\u526f\u672c\u3002 CreateColumnSof\uff08\u5bf9\u8c61\uff09// in sync go func\uff08\uff09{for change\uff1a= Range Writer {\u526f\u672c\u3002\u91cd\u64ad\uff08\u66f4\u6539\uff09}}\uff08\uff09\n  func main\uff08\uff09{//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67f1\u72b6\u96c6\u5408\u64ad\u653e\u5668\uff1a=\u5217\u3002 newcollection\uff08\uff09//\u4eba\u7c7b\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 createIndex\uff08\uff06\uff0334;\u4eba\u548c\uff0334 ;,\uff0334;\u8d5b\u8dd1\uff06\uff0334; func\uff08v interface {}\uff09bool {return v ==\uff06\uff0334; mages\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 CreateIndex\uff08\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334;\u65e7\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 createIndex\uff08\uff06\uff0334;\u65e7\uff06\uff0334;\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v interface {}\uff09bool {return v\u3002\uff08float64\uff09\uff06gt; = 30}\uff09//\u5c06\u9879\u76ee\u52a0\u8f7d\u5230\u52a0\u8f7d\u7684\u96c6\u5408\u4e2d\uff1a= loadfixture\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09\u73a9\u5bb6\u3002 CreateColumnSof\uff08\u52a0\u8f7d[0]\uff09\u5bf9\u4e8e_\uff0cv\uff1a= loaded {\u64ad\u653e\u5668\u3002\u63d2\u5165\uff08v\uff09} //\u8fd9\u57283\u4e2a\u4e0d\u540c\u7684\u5217\u4e0a\u6267\u884c\u5168\u626b\u63cf\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u6307\u5b9a\u7684\u8c13\u8bcd\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u4e0d\u662f\u7d22\u5f15\uff0c\u4f46\u662f\u67f1\u72b6\u626b\u63cf\u662f//\u7f13\u5b58\u53cb\u597d\u7684\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{println\uff08txn\u3002withstring\uff08\uff06\uff0334; func\uff08v string\uff09bool {return v ==\uff06\uff0334;\u4eba\u548c\uff0334;}\uff09\u3002\u6709\u4e86\uff08\uff06\uff0334;\u7c7b\uff06\uff0334;\uff0cfunc\uff08v string\uff09bool {return v ==\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;}\uff09\u3002\u7528float\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v float64\uff09bool {\u8fd4\u56dev\uff06gt; = 30}\uff09\u3002count\uff08\uff09\uff09//\u6253\u5370\u8ba1\u6570\u8fd4\u56denil}\uff09//\u8fd9\u6267\u884c\u4e86cound\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u6574\u4e2a\u6570\u636e\u96c6\u626b\u63cf\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u9884\u6784\u5efa\u7684\u7d22\u5f15\u626b\u63cf//\u4f7f\u7528\u903b\u8f91\u548c\u64cd\u4f5c\u3002\u7ed3\u679c//\u5c06\u4e0e\u4e0a\u9762\u7684\u67e5\u8be2\u76f8\u540c\uff0c\u4f46\u67e5\u8be2\u7684\u6027\u80fd\u53d6\u51b3\u4e8e\u5e95\u5c42\u6570\u636e\u7684\u5927\u5c0f\uff0c\u66f4\u5feb\u5730\u4e3a10x-100x //\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{Println\uff08TXN\u3002\u4e0e\uff08\uff06\uff0334;\u4eba\u548c\uff0334;\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff06\uff0334;\u65e7\uff06\uff0334;\uff09\u3002count\uff08\uff09\uff09 //\u6253\u5370\u8ba1\u6570\u8fd4\u56denil}\uff09//\u76f8\u540c\u7684\u6761\u4ef6\u5982\u4e0a\u6240\u8ff0\uff0c\u4f46\u6211\u4eec\u8fd8\u9009\u62e9//\u64ad\u653e\u5668\u7684\u5b9e\u9645\u540d\u79f0\u5e76\u8fed\u4ee3\u5b83\u4eec\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u4e0e\uff08\uff06\uff0334;\u4eba\u548c\uff0334;\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff0c\uff06\uff0334;\u65e7\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334;\uff0cfunc\uff08v\u5217\u3002\u5149\u6807\uff09bool {println\uff08v.ring string\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09//\u5217\u9009\u62e9return nil}\uff09}\n  \u4e0b\u9762\u7684\u57fa\u51c6\u5728\u5305\u542b\u5341\u51e0\u4e2a\u5217\u7684500\u9879\u7684\u96c6\u5408\u4e0a\u8fd0\u884c\u3002\u968f\u610f\u63a2\u7d22\u57fa\u51c6\uff0c\u4f46\u6211\u5f3a\u70c8\u5efa\u8bae\u5728\u5b9e\u9645\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u5b83\u3002\n CPU\uff1a\u82f1\u7279\u5c14\uff08R\uff09\u6838\u5fc3\uff08TM\uff09I7-9700K CPU @ 3.60GHzBenchmarkCollection / Insert-8 5013795 239.9 NS / OP 27 B / OP 0 Allocs / OpbenchmarkCollection / Fetch-8 23730796 50.63 NS / OP 0 B / OP 0 Allocs / OpbenchMarkCollection / Scan-8 234990 4743 NS / OP 0 B / OP 0 Allocs / OpbenchmarkColection / Count-8 7965873 152.7 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Range-8 1512513 799.9 NS / OP 0 B / OP 0 Allocs / OpbenchMarkCollection / Update-AT-8 5409420 224.7 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Update-All-8 196626 6099 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Delete-8 2006052 594.9 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Delete-All-8 1889685 643.2 NS / OP 0 B / OP 0 Allocs / Op\n \u5f53\u6d4b\u8bd5\u66f4\u5927\u7684\u96c6\u5408\u65f6\uff0c\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5c0f\u793a\u4f8b\uff08\u8bf7\u53c2\u9605\u793a\u4f8b\u6587\u4ef6\u5939\uff09\u5e76\u4f7f\u75282000\u4e07\u884c\u63d2\u5165\uff0c\u6bcf\u4e2a\u6761\u76ee\u90fd\u670912\u5217\uff0c\u9700\u8981\u8ba1\u7b974\u4e2a\u7d22\u5f15\uff0c\u4ee5\u53ca\u4e00\u4e9b\u67e5\u8be2\u548c\u626b\u63cf\u5468\u56f4\u7684\u626b\u63cf\u3002\n \u8fd0\u884c\u63d2\u5165\u5200\u7247\u4e3a20000000\u884c....  - \uff06gt;\u63d2\u5165\u7387\u4e3a52.8255618SRunning\u5168\u626b\u63cf\u65f6\u4ee3\uff06gt; = 30 ...  - \uff06gt;\u7ed3\u679c= 10200000-\uff06gt;\u5168\u90e8SCA.\n...... ", "note_en": "This package contains a  high-performance, columnar, in-memory storage engine that supports fast querying, update and iteration with zero-allocations and bitmap indexing.\n    The general idea is to leverage cache-friendly ways of organizing data in  structures of arrays (SoA) otherwise known &#34;columnar&#34; storage in database design. This, in turn allows us to iterate and filter over columns very efficiently. On top of that, this package also adds  bitmap indexing to the columnar storage, allowing to build filter queries using binary  and,  and not,  or and  xor (see  kelindar/bitmap with SIMD support).\n   In order to get data into the store, you&#39;ll need to first create a  Collection by calling  NewCollection() method. Each collection requires a schema, which can be either specified manually by calling  CreateColumn() multiple times or automatically inferred from an object by calling  CreateColumnsOf() function.\n In the example below we&#39;re loading some  JSON data by using  json.Unmarshal() and auto-creating colums based on the first element on the loaded slice. After this is done, we can then load our data by inserting the objects one by one into the collection. This is accomplished by calling  Insert() method on the collection itself repeatedly.\n data  :=  loadFromJson( &#34;players.json&#34;) // Create a new columnar collection players  :=  column. NewCollection() players. CreateColumnsOf( data[ 0]) // Insert every item from our loaded data for  _,  v  :=  range  data {\t players. Insert( v)}\n Now, let&#39;s say we only want specific columns to be added. We can do this by calling  CreateColumn() method on the collection manually to create the required columns.\n // Create a new columnar collection with pre-defined columns players  :=  column. NewCollection() players. CreateColumn( &#34;name&#34;,  column. ForString()) players. CreateColumn( &#34;class&#34;,  column. ForString()) players. CreateColumn( &#34;balance&#34;,  column. ForFloat64()) players. CreateColumn( &#34;age&#34;,  column. ForInt16()) // Insert every item from our loaded data for  _,  v  :=  range  loadFromJson( &#34;players.json&#34;) {\t players. Insert( v)}\n While the previous example demonstrated how to insert many objects, it was doing it one by one and is rather inefficient. This is due to the fact that each  Insert() call directly on the collection initiates a separate transacion and there&#39;s a small performance cost associated with it. If you want to do a bulk insert and insert many values, faster, that can be done by calling  Insert() on a transaction, as demonstrated in the example below. Note that the only difference is instantiating a transaction by calling the  Query() method and calling the  txn.Insert() method on the transaction instead the one on the collection.\n players. Query( func( txn  * Txn)  error {\t for  _,  v  :=  range  loadFromJson( &#34;players.json&#34;) {\t\t txn. Insert( v)\t}\t return  nil  // Commit})\n  The store allows you to query the data based on a presence of certain attributes or their values. In the example below we are querying our collection and applying a  filtering operation bu using  WithValue() method on the transaction. This method scans the values and checks whether a certain predicate evaluates to  true. In this case, we&#39;re scanning through all of the players and looking up their  class, if their class is equal to &#34;rogue&#34;, we&#39;ll take it. At the end, we&#39;re calling  Count() method that simply counts the result set.\n // This query performs a full scan of &#34;class&#34; column players. Query( func( txn  *column. Txn)  error {\t count  :=  txn. WithValue( &#34;class&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;rogue&#34;\t}). Count()\t return  nil})\n Now, what if we&#39;ll need to do this query very often? It is possible to simply  create an index with the same predicate and have this computation being applied every time (a) an object is inserted into the collection and (b) an value of the dependent column is updated. Let&#39;s look at the example below, we&#39;re fist creating a  rogue index which depends on &#34;class&#34; column. This index applies the same predicate which only returns  true if a class is &#34;rogue&#34;. We then can query this by simply calling  With() method and providing the index name.\n An index is essentially akin to a boolean column, so you could technically also select it&#39;s value when querying it. Now, in this example the query would be around  10-100x faster to execute as behind the scenes it uses  bitmap indexing for the &#34;rogue&#34; index and performs a simple logical  AND operation on two bitmaps when querying. This avoid the entire scanning and applying of a predicate during the  Query.\n // Create the index &#34;rogue&#34; in advance out. CreateIndex( &#34;rogue&#34;,  &#34;class&#34;,  func( v  interface{})  bool {\t return  v  ==  &#34;rogue&#34;}) // This returns the same result as the query before, but much faster players. Query( func( txn  *column. Txn)  error {\t count  :=  txn. With( &#34;rogue&#34;). Count()\t return  nil})\n The query can be further expanded as it allows indexed  intersection,  difference and  union operations. This allows you to ask more complex questions of a collection. In the examples below let&#39;s assume we have a bunch of indexes on the  class column and we want to ask different questions.\n First, let&#39;s try to merge two queries by applying a  Union() operation with the method named the same. Here, we first select only rogues but then merge them together with mages, resulting in selection containing both rogues and mages.\n  Next, let&#39;s count everyone who isn&#39;t a rogue, for that we can use a  Without() method which performs a difference (i.e. binary  AND NOT operation) on the collection. This will result in a count of all players in the collection except the rogues.\n  Now, you can combine all of the methods and keep building more complex queries. When querying indexed and non-indexed fields together it is important to know that as every scan will apply to only the selection, speeding up the query. So if you have a filter on a specific index that selects 50% of players and then you perform a scan on that (e.g.  WithValue()), it will only scan 50% of users and hence will be 2x faster.\n // How many rogues that are over 30 years old? players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). WithFloat( &#34;age&#34;,  func( v  float64)  bool {\t\t return  v  &gt;=  30\t}). Count()\t return  nil})\n  In all of the previous examples, we&#39;ve only been doing  Count() operation which counts the number of elements in the result set. In this section we&#39;ll look how we can iterate over the result set. In short, there&#39;s 2 main methods that allow us to do it:\n Range() method which takes in a column name as an argument and allows faster get/set of the values for that column.\n Select() method which doesn&#39;t pre-select any specific column, so it&#39;s usually a bit slower and it also does not allow any updates.\n Let&#39;s first examine the  Range() method. In the example below we select all of the rogues from our collection and print out their name by using the  Range() method and providing &#34;name&#34; column to it. The callback containing the  Cursor allows us to quickly get the value of the column by calling  String() method to retrieve a string value. It also contains methods such as  Int(),  Uint(),  Float() or more generic  Value() to pull data of different types.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t println( &#34;rogue name &#34;,  v. String())  // Prints the name\t\t return  true\t})\t return  nil})\n Now, what if you need two columns? The range only allows you to quickly select a single column, but you can still retrieve other columns by their name during the iteration. This can be accomplished by corresponding  StringAt(),  FloatAt(),  IntAt(),  UintAt() or  ValueAt() methods as shown below.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t println( &#34;rogue name &#34;,  v. String())  // Prints the name\t\t println( &#34;rogue age &#34;,  v. IntAt( &#34;age&#34;))  // Prints the age\t\t return  true\t})\t return  nil})\n On the other hand,  Select() allows you to do a read-only selection which provides a  Selector cursor. This cursor does not allow any updates, deletes or inserts and is also not pre-select any particular column. In the example below we print out names of all of the rogues using a selector.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Select( func( v column. Selector)  bool {\t\t println( &#34;rogue name &#34;,  v. StringAt( &#34;name&#34;))  // Prints the name\t\t return  true\t})\t return  nil})\n Now, what if you need to quickly delete all some of the data in the collection? In this case  DeleteAll() or  DeleteIf() methods come in handy. These methods are very fast (especially  DeleteAll()) and allow you to quickly delete the appropriate results, transactionally. In the example below we delete all of the rogues from the collection by simply selecting them in the transaction and calling the  DeleteAll() method.\n   In order to update certain items in the collection, you can simply call  Range() method and the corresponding  Cursor&#39;s  Update() or  UpdateAt() methods that allow to update a value of a certain column atomically. The updates won&#39;t be directly reflected given that the store supports transactions and only when transaction is commited, then the update will be applied to the collection. This allows for isolation and rollbacks.\n In the example below we&#39;re selecting all of the rogues and updating both their balance and age to certain values. The transaction returns  nil, hence it will be automatically committed when  Query() method returns.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t v. UpdateAt( &#34;age&#34;,  50)  // Update the &#34;age&#34; to 50\t\t return  true\t})  // Select the balance\t return  nil})\n In certain cases, you might want to atomically increment or decrement numerical values. In order to accomplish this you can use the provided  Add() or  AddAt() operations of the  Cursor or  Selector. Note that the indexes will also be updated accordingly and the predicates re-evaluated with the most up-to-date values. In the below example we&#39;re incrementing the balance of all our rogues by  500 atomically.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Add( 500.0)  // Increment the &#34;balance&#34; by 500\t\t return  true\t})\t return  nil})\n  Sometimes, it is useful to automatically delete certain rows when you do not need them anymore. In order to do this, the library automatically adds an  expire column to each new collection and starts a cleanup goroutine aynchronously that runs periodically and cleans up the expired objects. In order to set this, you can simply use  InsertWithTTL() method on the collection that allows to insert an object with a time-to-live duration defined.\n In the example below we are inserting an object to the collection and setting the time-to-live to  5 seconds from the current time. After this time, the object will be automatically evicted from the collection and its space can be reclaimed.\n players. InsertWithTTL( map[ string] interface{}{\t &#34;name&#34;:  &#34;Merlin&#34;,\t &#34;class&#34;:  &#34;mage&#34;,\t &#34;age&#34;:  55,\t &#34;balance&#34;:  500,},  5  *  time. Second)  // The time-to-live of 5 seconds\n On an interestig node, since  expire column which is automatically added to each collection is an actual normal column, you can query and even update it. In the example below we query and conditionally update the expiration column. The example loads a time, adds one hour and updates it, but in practice if you want to do it you should use  Add() method which can perform this atomically.\n players. Query( func( txn  *column. Txn)  error {\t return  txn. Range( &#34;expire&#34;,  func( v column. Cursor)  bool {\t\t oldExpire  :=  time. Unix( 0,  v. Int())  // Convert expiration to time.Time\t\t newExpire  :=  expireAt. Add( 1  *  time. Hour). UnixNano()  // Add some time\t\t v. Update( newExpire)\t\t return  true\t})})\n  Transactions allow for isolation between two concurrent operations. In fact, all of the batch queries must go through a transaction in this library. The  Query method requires a function which takes in a  column.Txn pointer which contains various helper methods that support querying. In the example below we&#39;re trying to iterate over all of the players and update their balance by setting it to  10.0. The  Query method automatically calls  txn.Commit() if the function returns without any error. On the flip side, if the provided function returns an error, the query will automatically call  txn.Rollback() so none of the changes will be applied.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t // No error, txn.Commit() will be called\t return  nil})\n Now, in this example, we try to update balance but a query callback returns an error, in which case none of the updates will be actually reflected in the underlying collection.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t // Returns an error, txn.Rollback() will be called\t return  fmt. Errorf( &#34;bug&#34;) })\n You can (but probablty won&#39;t need to) call  Commit() or  Rollback() manually, as many times as required. This could be handy to do partial updates but calling them too often will have a performance hit on your application.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t txn. Commit()  // Manually commit all of the changes\t return  nil  // This will call txn.Commit() again, but will be a no-op})\n  This library also supports streaming out all transaction commits consistently, as they happen. This allows you to implement your own change data capture (CDC) listeners, stream data into kafka or into a remote database for durability. In order to enable it, you can simply provide an implementation of a  commit.Writer interface during the creation of the collection.\n In the example below we take advantage of the  commit.Channel implementation of a  commit.Writer which simply publishes the commits into a go channel. Here we create a buffered channel and keep consuming the commits with a separate goroutine, allowing us to view transactions as they happen in the store.\n // Create a new commit writer (simple channel) and a new collection writer  :=  make(commit. Channel,  1024) players  :=  NewCollection(column. Options{\t Writer:  writer,}) // Read the changes from the channel go  func(){\t for  commit  :=  writer{\t\t println( &#34;commit&#34;,  commit. Type. String())\t}}() // ... insert, update or delete\n On a separate note, this change stream is guaranteed to be consistent and serialized. This means that you can also replicate those changes on another database and synchronize both. In fact, this library also provides  Replay() method on the collection that allows to do just that. In the example below we create two collections  primary and  replica and asychronously replicating all of the commits from the  primary to the  replica using the  Replay() method together with the change stream.\n // Create a p rimary collection writer  :=  make(commit. Channel,  1024) primary  :=  column. NewCollection(column. Options{\t Writer:  &amp; writer,}) primary. CreateColumnsOf( object) // Replica with the same schema replica  :=  column. NewCollection() replica. CreateColumnsOf( object) // Keep 2 collections in sync go  func() {\t for  change  :=  range  writer {\t\t replica. Replay( change)\t}}()\n  func  main(){\t // Create a new columnar collection\t players  :=  column. NewCollection()\t // index on humans\t players. CreateIndex( &#34;human&#34;,  &#34;race&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;human&#34;\t})\t // index for mages\t players. CreateIndex( &#34;mage&#34;,  &#34;class&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;mage&#34;\t})\t // index for old\t players. CreateIndex( &#34;old&#34;,  &#34;age&#34;,  func( v  interface{})  bool {\t\t return  v.( float64)  &gt;=  30\t})\t // Load the items into the collection\t loaded  :=  loadFixture( &#34;players.json&#34;)\t players. CreateColumnsOf( loaded[ 0])\t for  _,  v  :=  range  loaded {\t\t players. Insert( v)\t}\t // This performs a full scan on 3 different columns and compares them given the \t // specified predicates. This is not indexed, but does a columnar scan which is\t // cache-friendly.\t players. Query( func( txn  *column. Txn)  error {\t\t println( txn. WithString( &#34;race&#34;,  func( v  string)  bool {\t\t\t return  v  ==  &#34;human&#34;\t\t}). WithString( &#34;class&#34;,  func( v  string)  bool {\t\t\t return  v  ==  &#34;mage&#34;\t\t}). WithFloat( &#34;age&#34;,  func( v  float64)  bool {\t\t\t return  v  &gt;=  30\t\t}). Count())  // prints the count\t\t return  nil\t})\t // This performs a cound, but instead of scanning through the entire dataset, it scans\t // over pre-built indexes and combines them using a logical AND operation. The result\t // will be the same as the query above but the performance of the query is 10x-100x\t // faster depending on the size of the underlying data.\t players. Query( func( txn  *column. Txn)  error {\t\t println( txn. With( &#34;human&#34;,  &#34;mage&#34;,  &#34;old&#34;). Count())  // prints the count\t\t return  nil\t})\t // Same condition as above, but we also select the actual names of those \t // players and iterate through them.\t players. Query( func( txn  *column. Txn)  error {\t\t txn. With( &#34;human&#34;,  &#34;mage&#34;,  &#34;old&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t\t println( v. String())  // prints the name\t\t\t return  true\t\t})  // The column to select\t\t return  nil\t})}\n  The benchmarks below were ran on a collection of  500 items containing a dozen columns. Feel free to explore the benchmarks but I strongly recommend testing it on your actual dataset.\n cpu: Intel(R) Core(TM) i7-9700K CPU @ 3.60GHzBenchmarkCollection/insert-8 5013795 239.9 ns/op 27 B/op 0 allocs/opBenchmarkCollection/fetch-8 23730796 50.63 ns/op 0 B/op 0 allocs/opBenchmarkCollection/scan-8 234990 4743 ns/op 0 B/op 0 allocs/opBenchmarkCollection/count-8 7965873 152.7 ns/op 0 B/op 0 allocs/opBenchmarkCollection/range-8 1512513 799.9 ns/op 0 B/op 0 allocs/opBenchmarkCollection/update-at-8 5409420 224.7 ns/op 0 B/op 0 allocs/opBenchmarkCollection/update-all-8 196626 6099 ns/op 0 B/op 0 allocs/opBenchmarkCollection/delete-at-8 2006052 594.9 ns/op 0 B/op 0 allocs/opBenchmarkCollection/delete-all-8 1889685 643.2 ns/op 0 B/op 0 allocs/op\n When testing for larger collections, I added a small example (see  examples folder) and ran it with  20 million rows inserted, each entry has  12 columns and 4 indexes that need to be calculated, and a few queries and scans around them.\n running insert of 20000000 rows...-&gt; insert took 52.8255618srunning full scan of age &gt;= 30...-&gt; result = 10200000-&gt; full sca\n......", "posttime": "2021-06-21 18:05:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,\u6027\u80fd,\u67f1\u72b6,performance,\u65b9\u6cd5", "title": "\u9ad8\u6027\u80fd\uff0c\u67f1\u72b6\uff0c\u5185\u5b58\u5b58\u50a8\uff0c\u8fdb\u5165\u4f4d\u56fe\u7d22\u5f15 ", "title_en": "High-performance, columnar, in-memory store with bitmap indexing in Go", "transed": 1, "url": "https://github.com/kelindar/column", "via": "", "real_tags": ["\u5185\u5b58", "\u6027\u80fd", "\u67f1\u72b6", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067171, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "LibleCellular\u9879\u76ee\u65e8\u5728\u4f7f\u5176\u66f4\u5bb9\u6613\u521b\u5efa4G\u8702\u7a9d\u7f51\u7edc\u5f00\u6e90\u8f6f\u4ef6\u548c\u4f4e\u6210\u672c\u8f6f\u4ef6\u5b9a\u4e49\u7684\u65e0\u7ebf\u7535\uff08SDR\uff09Hardware.Seeking\u901a\u8fc7\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u914d\u7f6e\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u968f\u7740\u989d\u5916\u7684\u5de5\u5177\u548c\u7f16\u53f7\u4ee5\u53ca\u7528\u4e8e\u989d\u5916\u7684\u5de5\u5177\u548c\u7f16\u53f7\u53ef\u91cd\u590d\u90e8\u7f72\u3002\n LibleCellular\u5c06\u5728\u8bb8\u591a\u73b0\u6709\u5f00\u6e90\u8f6f\u4ef6\u8f6f\u4ef6\u9879\u76ee\u7684\u5de5\u4f5c\u4e2d\u6784\u5efa\uff0c\u4e0e\u8702\u7a9d\u5e73\u53f0\u672c\u8eab\u548c\u5927\u540c\u7c7b\u7684\u6d4b\u8bd5\u57fa\u7840\u67b6\u6784\u76f8\u5173\u3002\u5fc5\u8981\u989d\u5916\u7684\u7ec4\u4ef6\u5c06\u88ab\u643a\u5e26\uff0c\u4efb\u4f55\u8f6f\u4ef6\u6e90\u4ee3\u7801\u548c\u786c\u4ef6\u8bbe\u8ba1\u90fd\u53d1\u5e03\u4e86operoper\u6e90\u8bb8\u53ef\u8bc1\u3002\u91cd\u70b9\u662f\u5728\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u7684\u96c6\u6210\uff0c\u6d4b\u8bd5\uff0c\u5305\u88c5\u548c\u6587\u6863\uff0c\u91cd\u7528\u548c\u6784\u5efa\u65b9\u9762\u3002\n \u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\u653e\u7f6e\u4e00\u4e2a\u8fde\u7eed\u7684\u96c6\u6210\uff08CI\uff09\u5e73\u53f0\uff0c\u914d\u6709SDR\u57fa\u7ad9\uff0c\u6d4b\u8bd5\u8bbe\u5907\uff0cRF\u5206\u914d\u7f51\u7edc\u548cLTEMODEM\u94f6\u884c\u3002\u4e00\u65e6\u8fd0\u884c\uff0c\u7126\u8ddd\u5c31\u4f1a\u5207\u6362\u5230CellularStack\u96c6\u6210\uff0c\u5305\u88c5\u548c\u6587\u6863\u3002 ", "note_en": "The LibreCellular project aims to make it easier to create 4G cellular networkswith open source software and low cost software-defined radio (SDR) hardware.Seeking to achieve this via validated hardware and software configurations thatare subjected to rigorous testing, together with additional tooling anddocumentation for repeatable deployment.\n LibreCellular will build on the work of numerous existing open source softwareand hardware projects, related to both the cellular platform itself andassociated test infrastructure. Where necessary additional components will bedeveloped, with any software source code and hardware designs published underopen source licences. The focus is very much on integration, testing, packagingand documentation, reusing and building upon existing solutions.\n The first task is to put in place a continuous integration (CI) platform,complete with SDR base station, test equipment, RF distribution network and LTEmodem banks. Once this is operational the focus will then switch to cellularstack integration, packaging and documentation.", "posttime": "2021-06-21 18:05:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5929\u7a7a,librecellular,\u8f6f\u4ef6", "title": "\u5929\u7a7a\u3002 ", "title_en": "LibreCellular", "transed": 1, "url": "https://librecellular.org/", "via": "", "real_tags": ["\u5929\u7a7a", "\u8f6f\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "19d12bd44fdea3f2a2a070be6ea0b996.png", "infoid": 1067170, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4ee5\u4e0b\u4eba\u5458\u5bf9JPEG XL\u9879\u76ee\u548cLibjxl\uff0cLuca Versari\uff0cJon Sneyers\uff0cZoltan Szabadka\uff0cJan Wassenberg\uff0cLode Vandevenne\uff0cSami Boukortt\uff0cAlex Deymo\uff0cAlexander Rhatushnyak\uff0cEvgenii Kliuchnikov\uff0cMoritz Flasching\uff0cThomas Fisching\uff0c Martin Bruse\uff0cRenata Khasanova\uff0cRobert Obryk\uff0cSebastian Gomez-Gonzalez\uff0cIulia-MariaCom\u015fa\uff0cKrzysztof Potempa\uff0cPieter Wuille\u3002 \u6211\u4eec\u8fd8\u60f3\u627f\u8ba4\u5728JPEG XL\u6807\u51c6\u7684\u53d1\u5c55\u4e2d\u53d1\u6325\u4f5c\u7528\u7684JPEG\u4e13\u5bb6\u4e2d\u7684\u4ee5\u4e0b\u4eba\u5458\uff1aJan De\u516c\u9e21\uff0cTouradj Ebrahimi\uff0cWalt Husak\uff0cAndy Kuzma\uff0c\u8d39\u5c14\u5357\u591aPereira\uff0cAntonio Pinheiro\uff0cThomas Richter\uff0cPeter Schelkens\uff0c Takaaki Ishikawa\uff0cSeungcheol Choi\uff0cOh-Jin Kwon\uff0cGary Sullivan\uff0cEvgeniy Upenik\uff0cOsamu Watanabe\u3002 ", "note_en": "The following people made key contributions to the JPEG XL project and libjxl: Jyrki Alakuijala, Luca Versari, Jon Sneyers, Zoltan Szabadka, Jan Wassenberg, Lode Vandevenne, Sami Boukortt, Alex Deymo, Alexander Rhatushnyak, Evgenii Kliuchnikov, Moritz Firsching, Thomas Fischbacher, Martin Bruse, Renata Khasanova, Robert Obryk, Sebastian Gomez-Gonzalez, Iulia-Maria Com\u0219a, Krzysztof Potempa, Pieter Wuille.   We would also like to acknowledge the following persons among JPEG experts who played a role in the development of the JPEG XL standard: Jan De Cock, Touradj Ebrahimi, Walt Husak, Andy Kuzma, Fernando Pereira, Antonio Pinheiro, Thomas Richter, Peter Schelkens, Takaaki Ishikawa, Seungcheol Choi, Oh-Jin Kwon, Gary Sullivan, Evgeniy Upenik, Osamu Watanabe.", "posttime": "2021-06-21 18:05:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "jpeg", "title": "JPEG XL. ", "title_en": "JPEG XL", "transed": 1, "url": "https://jpegxl.info", "via": "", "real_tags": ["jpeg"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067169, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6d41\u4f53\u6d82\u6599\u4eff\u771f ", "note_en": "Fluid paint simulation", "posttime": "2021-06-21 18:04:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d41\u4f53,fluid", "title": "\u6d41\u4f53\u6d82\u6599 ", "title_en": "Fluid Paint", "transed": 1, "url": "https://david.li/paint/", "via": "", "real_tags": ["\u6d41\u4f53", "fluid"]}, {"category": "", "categoryclass": "", "imagename": "5919d6362792af4c30c43ccf2c509879.jpg", "infoid": 1067168, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "https://llvm.org/devmtg/2020-09/-checked c\uff1a\u5c06\u5185\u5b58\u5b89\u5168\u6dfb\u52a0\u5230llvm  -  mandeep singh grang\uff0ckatherine kjeerslides\uff1ahttps\uff1a//llvm.org/devmtg/2020-09/slides ... ", "note_en": "https://llvm.org/devmtg/2020-09/\u2014Checked C: Adding Memory Safety to LLVM - Mandeep Singh Grang, Katherine KjeerSlides: https://llvm.org/devmtg/2020-09/slides...", "posttime": "2021-06-21 18:04:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,\u5f00\u53d1,2020,llvm", "title": "2020 LLVM\u5f00\u53d1\u4eba\u5458\u4f1a\u8bae\uff1a\u201c\u68c0\u67e5C\uff1a\u5c06\u5185\u5b58\u5b89\u5168\u6dfb\u52a0\u5230LLVM\u201d ", "title_en": "2020 LLVM Developers\u2019 Meeting: \u201cChecked C: Adding Memory Safety to LLVM\u201d", "transed": 1, "url": "https://www.youtube.com/watch?v=EuxAzvtX9CI", "via": "", "real_tags": ["\u5185\u5b58", "\u5f00\u53d1", "2020", "llvm"]}]