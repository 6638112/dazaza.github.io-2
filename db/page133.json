[{"category": "", "categoryclass": "", "imagename": "f8e2ff4e0de90139f6a47559d14c2e17.png", "infoid": 1067175, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u6587\u7684\u76ee\u6807\u662f\u5411\u60a8\u4ecb\u7ecd\u524d\u4e94\u540d\u65e0\u670d\u52a1\u5668\u7684AWS\u670d\u52a1\uff0c\u6211\u8ba4\u4e3a\u6bcf\u4e2a\u6280\u672f\u521b\u59cb\u4eba\u6216\u72ec\u7acb\u9ed1\u5ba2\u5e94\u8be5\u77e5\u9053\u3002\u8fd9\u4e0d\u662f\u5bf9\u8fd9\u4e9b\u670d\u52a1\u7684\u6df1\u8fdc\u6f5c\u6c34\uff0c\u6211\u60f3\u4ee5\u9ad8\u6c34\u5e73\u7684\u65b9\u5f0f\u89e3\u91ca\u5b83\u4eec\uff0c\u5e76\u544a\u8bc9\u4f60\u4e3a\u4ec0\u4e48\u4ed6\u4eec\u503c\u5f97\u4f7f\u7528\u548c\u5b66\u4e60\u3002\u4f7f\u7528\u8fd9\u4e9b\u670d\u52a1\uff0c\u60a8\u53ef\u4ee5\u6784\u5efa\u51e0\u4e4e\u6bcf\u4e2a\u53ef\u4ee5\u601d\u8003\u7684\u7f51\u7edc\u548c\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u3002\u51e0\u4e4e\u6240\u6709\u9ad8\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u5982Python\uff0cTypeScript\uff0cJavaScript\u548cJava\u90fd\u53ef\u4ee5\u4e0e\u8fd9\u4e9b\u670d\u52a1\u4e00\u8d77\u4f7f\u7528\u3002\u6240\u4ee5\uff0c\u8ba9\u6211\u4eec\u76f4\u5954\u3002\n   \u6211\u4ece\u660e\u663e\u7684\u5f00\u59cb\uff0c\u653e\u5927\u3002\u91cd\u8981\u7684\u662f\u8981\u6ce8\u610f\uff0c\u6709\u4e24\u4e2a\uff08\u8fd1\u4e09\u4e2a\uff09\u7684\u201c\u670d\u52a1\u201d\u79f0\u4e3aAWS\u4e2d\u7684\u653e\u5927\u3002\u6211\u4eec\u5fc5\u987b\u533a\u5206\uff1a\n  \u6211\u4eec\u5728\u6b64\u8c08\u8bba\u6269\u589eCLI\u3002\u4f7f\u7528Amplify CLI\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u754c\u9762\u4e2d\u7684\u4e00\u4e9b\u547d\u4ee4\u5f15\u5bfc\u540e\u7aef\u3002\u653e\u5927\u6709\u51e0\u7c7b\u53ef\u4ee5\u6dfb\u52a0\uff0c\u4f8b\u5982\uff1a\n  \u6709\u4e86\u4e00\u4e9b\u547d\u4ee4\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5f15\u5bfcCLI\u6784\u5efa\u5b8c\u6574\u7684\u586b\u5145\u5e94\u7528\u7a0b\u5e8f\u3002\n \u6211\u773c\u4e2d\u7684\u4e3b\u8981\u597d\u5904\u662fGraphQL-TranForm\u5e93\u3002\u6b64\u5e93\u4f7f\u60a8\u53ef\u4ee5\u4f7f\u7528\u578b\u53f7\u6216\u8fde\u63a5\u7b49\u81ea\u5b9a\u4e49\u6ce8\u91ca\u521b\u5efa\u6570\u636e\u67b6\u6784\uff0c\u5e76\u4e14\u5e93\u5c06\u6b64\u6a21\u5f0f\u8f6c\u6362\u4e3a\u6709\u6548\u7684GraphQL\u67b6\u6784\uff0c\u540c\u65f6\u521b\u5efa\u7528\u4e8e\u521b\u5efa\u540e\u7aef\u8d44\u6e90\u7684CloudFormation\u6a21\u677f\uff0c\u4f8b\u5982DynamoDB\u8868\uff0cCognito Connection\u7b49\u3002\n   \u5b83\u521b\u9020\u4e86\u578b\u53f7\u6301\u6709\u3002\u6a21\u578b\u6ce8\u91ca\u5728DynamoDB\u4e2d\u521b\u5efa\u4e00\u4e2a\u8868\uff0c\u5176\u4e2dID\u4e3a\u4e3b\u952e\u3002 CurrentPrice\u5c06\u7531Lambda\u51fd\u6570Priceresolver\u89e3\u6790\u3002\n \u6211\u773c\u4e2d\u7684\u4e3b\u8981\u7f3a\u70b9\u662f\uff0c\u4e0e\u5178\u578b\u7684IAC\u89e3\u51b3\u65b9\u6848\u4e00\u6837\uff0c\u4e0eCDK\u6216Terraform\u7b49\u5178\u578b\u7684IAC\u89e3\u51b3\u65b9\u6848\u4e00\u8d77\u5efa\u7acb\u57fa\u7840\u67b6\u6784\u5e76\u4e0d\u7075\u6d3b\u3002\u7531\u4e8e\u5927\u91cf\u9b54\u6cd5\u6b63\u5728\u53d1\u751f\u6269\u5927\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u4f1a\u9047\u5230\u4e00\u4e9b\u95ee\u9898\uff0c\u7279\u522b\u662f\u5f53\u60a8\u4f7f\u7528\u51e0\u4e2a\u56e2\u961f\u73af\u5883\u548cLambda\u5c42\u65f6\u3002 \n\u5c3d\u7ba1\u5982\u6b64\uff0c\u5b83\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u5de5\u5177\uff0c\u5b83\u62e5\u6709\u4e00\u4e2a\u4f1f\u5927\u7684\u793e\u533a\uff0c\u56e2\u961f\u4ecd\u7136\u8fdb\u4e00\u6b65\u5f00\u53d1\u670d\u52a1\u3002\u5b58\u6b3e\u7684\u540e\u7aef\u5b8c\u5168\u88ab\u653e\u5927\u4e86\u3002\u5982\u679c\u60a8\u60f3\u5b66\u4e60\u4e00\u4e2a\u670d\u52a1\uff0c\u8bf7\u5b66\u4e60\u8fd9\u4e2a\uff01\n   \u8fd9\u4e3a\u6211\u4eec\u5e26\u6765\u4e86\u4e0b\u4e00\u4e2a\u670d\u52a1AppSync\u3002 Appsync\u662fAWS\u5b8c\u5168\u6258\u7ba1\u7684GraphQL API\u3002 GraphQL\u4f7f\u60a8\u80fd\u591f\u6210\u4e3a\u5f00\u53d1\u4eba\u5458\uff0c\u4ee5\u4fbf\u5b8c\u5168\u83b7\u53d6\u6240\u9700\u7684\u6570\u636e\uff0c\u800c\u65e0\u9700\u62c5\u5fc3\u83b7\u53d6\u592a\u591a\u6216\u592a\u5c11\u7684\u6570\u636e\u8986\u76d6\uff06amp;\u6b20\u51dd\u56fa\uff09\u3002\u901a\u5e38\uff0cAppSync\u4e2d\u6709\u4e09\u4e2a\u4e3b\u8981\u51fd\u6570\u3002\u8fd9\u4e9b\u662f\u67e5\u8be2\uff0c\u7a81\u53d8\u548c\u8ba2\u9605\u3002\n \u4f7f\u7528\u67e5\u8be2\uff0c\u60a8\u53ef\u4ee5\u67e5\u8be2\u6765\u81ea\u4e0d\u540c\u6570\u636e\u6e90\u7684\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u62e5\u6709\u4e00\u4e2a\u7c7b\u578b\u7684\u952e\uff0c\u4f8b\u5982\u4ece\u4e0d\u540c\u6765\u6e90\u83b7\u53d6\u6570\u636e\u3002\u8ba9\u6211\u4eec\u518d\u6b21\u62cd\u6444\u6211\u4eec\u7684\u793a\u4f8b\uff1a\n  \u5c5e\u6027ISIN\u662f\u6765\u81eaDynamoDB\u7684\u5b57\u7b26\u4e32\uff0cCurrentPrice\u901a\u8fc7\u540d\u4e3aPricEresolver\u7684Lambda\u51fd\u6570\u8fdb\u884c\u89e3\u6790\u3002 Lambda Resolvers\u5728\u6b64\u63d0\u4f9b\u4e3b\u8981\u7684\u7075\u6d3b\u6027\u3002\u5728Lambda\u51fd\u6570\u4e2d\uff0c\u60a8\u53ef\u4ee5\u62e5\u6709\u50cf\u6240\u9700\u7684\u4e00\u6837\u591a\u7684\u81ea\u5b9a\u4e49\u4ee3\u7801\uff08\u8bf7\u6c42\u4e24\u4e2a\u4e0d\u540c\u7684API\uff0cClean\uff06amp; preprocess\u6570\u636e\uff0c......\uff09\u5e76\u7528\u60a8\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u786e\u5207\u7684\u54cd\u5e94\u6b64\u6570\u636e\u3002\u60a8\u7684\u6570\u636e\u751f\u6d3b\u5728\u54ea\u91cc\uff0cAppSync\u5728\u7533\u8bf7\u7684\u4e00\u4e2a\u5f15\u64ce\u76d6\u4e0b\u63d0\u4f9b\u4e86\u89e3\u51b3\u5b83\u7684\u673a\u4f1a\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u5927\u7684\u7075\u6d3b\u6027\u3002\n     \u4f7f\u7528\u7a81\u53d8\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u6570\u636e\u5e76\u66f4\u65b0\u5b83\u3002\u8ba2\u9605\u4f7f\u60a8\u80fd\u591f\u5b9e\u73b0\u60a8\u7684\u6570\u636e\u66f4\u65b0\u3002\n  \u4f60\u4e3a\u4ec0\u4e48\u8981\u5c06AppSync\u4f5c\u4e3a\u521b\u59cb\u4eba\u5b66\u4e60\uff1f\u9996\u5148\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u4f7f\u7528GraphQL\u7684\u4e3b\u8981\u597d\u5904\uff0c\u5b83\u4f7f\u7528\u7c7b\u578b\u5b89\u5168\u6027\uff0c\u5e76\u4e3a\u524d\u7aef\u5f00\u53d1\u4eba\u5458\u63d0\u4f9b\u6240\u9700\u6570\u636e\u7684\u5f3a\u5927\u529f\u80fd\u3002\u5176\u6b21\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u6240\u9700\u7684\u6bcf\u4e2a\u6570\u636e\u6e90\u5177\u6709\u5982\u6b64\u591a\u7684\u7075\u6d3b\u6027\u3002\u7b2c\u4e09\uff0c\u4f60\u8ba9AWS\u505a\u5927\u90e8\u5206\u5de5\u4f5c\u3002\u60a8\u6709\u4e00\u4e2a\u5355\u4e00\u7aef\u70b9\uff0c\u6ca1\u6709\u9ebb\u70e6\uff0c\u5177\u6709\u89e3\u6790\u8bf7\u6c42\u5e76\u5c06\u4e0d\u540c\u7684AWS\u670d\u52a1\u8fde\u63a5\u5728\u4e00\u8d77\u3002\u5b83\u5c06\u51cf\u5c11\u60a8\u7684\u53d1\u5c55\u65f6\u95f4\u3002\n   \u73b0\u5728\u8ba9\u6211\u4eec\u56de\u5230\u6839\u6e90\uff0c\u5170\u5df4\u5fb7\u3002 Lambda\u662f\u6700\u5e38\u89c1\u7684\u77e5\u540d\u670d\u52a1\u5668\u670d\u52a1\u3002\u5f53\u4eba\u4eec\u8c08\u8bba\u65e0\u670d\u52a1\u5668\u7684\u65f6\u5019\uff0c\u5f88\u591a\u4eba\u5c31\u53ef\u4ee5\u53c2\u8003\u5170\u5e03\u3002 Lambda\u670d\u52a1\u80cc\u540e\u7684\u57fa\u672c\u60f3\u6cd5\u662f\u8fd0\u884c\u4ee3\u7801\u800c\u4e0d\u8003\u8651\u57fa\u7840\u8bbe\u65bd\u3002 AWS\u7684\u627f\u8bfa\u53ea\u662f\u60a8\u7684\u4ee3\u7801\u5c06\u88ab\u6267\u884c\u3002 Lambda\u652f\u6301\u51e0\u4e2a\u8fd0\u884c\u65f6\uff0c\u5982Python\uff0cJavaScript\uff0cJava\uff0cC\uff03\uff0cRust\uff0cGo\u7b49\u7b49\u3002\u6700\u65b0\u529f\u80fd\u4e4b\u4e00\u662f\u81ea\u5b9a\u4e49Docker\u5bb9\u5668\u53ef\u4ee5\u7528\u4f5c\u8fd0\u884c\u65f6\uff0c\u5e76\u4e14\u6bcf\u6beb\u79d2\u800c\u4e0d\u662f\u6bcf100\u6beb\u79d2\u90fd\u4f1a\u53d1\u751f\u6bcf\u6beb\u79d2\u3002 Lambda\u7684\u6700\u5927\u8fd0\u884c\u65f6\u95f4\u4e3a15\u5206\u949f\uff0c\u5728\u6784\u5efa\u60a8\u7684\u7533\u8bf7\u65f6\u8003\u8651\u5230\u8fd9\u4e00\u70b9\u3002\u552f\u4e00\u7684\u57fa\u7840\u67b6\u6784\u8bbe\u7f6e\u662f\u5185\u5b58\u8bbe\u7f6e\u3002 \n\u5b9a\u4ef7\uff1aLambda\u4fbf\u5b9c\u3002\u6bcf\u6708\u7684\u7b2c\u4e00\u767e\u4e07\u8981\u6c42\u662f\u514d\u8d39\u7684\u3002\u4ece\u8be5\u70b9\u5f00\u59cb\uff0c\u5b83\u5c06\u57fa\u4e8eLambda\u8fd0\u884c\u7684\u5206\u949f\u8ba1\u7b97\u3002\n  \u59cb\u7ec8\u5c06\u5185\u5b58\u589e\u52a0\u5230\u5927\u7ea64 GB\uff0c\u8fd0\u884c\u66f4\u4fbf\u5b9c\u7684\u901f\u5ea6\u8d8a\u5feb\u3002\u6709\u4e00\u4e2a\u4f1f\u5927\u7684\u56fe\u4e66\u9986\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u5047\u8bbe\n \u58f0\u660e\u60a8\u7684\u6240\u6709\u9759\u6001\u53d8\u91cf\uff0c\u5982DynamoDB\uff0cBoto3\u5728\u60a8\u7684\u5904\u7406\u7a0b\u5e8f\u529f\u80fd\u4e4b\u5916 - \uff06gt;\u51cf\u5c11\u51b7\u542f\u52a8\n \u5728\u8bbe\u8ba1\u7533\u8bf7\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u51b7\u9177\u3002\u5982\u679c\u60a8\u9700\u8981\u67d0\u4e9b\u54cd\u5e94\u65f6\u95f4\u9884\u70ed\u60a8\u7684LAMBDA\u6216\u4e4b\u524d\u63d0\u4f9b\u7684\u5e76\u53d1\u6027\u3002\n  Lambda\u4e3a\u60a8\u63d0\u4f9b\u4e86\u6267\u884c\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u800c\u4e0d\u62c5\u5fc3\u57fa\u7840\u8bbe\u65bd\u3002\u5b9a\u4ef7\u771f\u7684\u5f88\u68d2\u3002\u60a8\u7684\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u57fa\u4e8eLambda\u3002\u5b83\u53d6\u51b3\u4e8e\u7528\u4f8b\u548c\u6574\u4f53\u67b6\u6784\uff08Go Event-Drive\uff01\uff09\uff0c\u4f46\u6211\u6240\u77e5\u9053\u7684\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u90fd\u53ef\u4ee5\u8f7b\u677e\u91c7\u7528\u51e0\u4e2aLambda\u51fd\u6570\u3002\u60a8\u53ea\u9700\u6309\u9700\u652f\u4ed8\uff0c\u60a8\u6709\u5c0f\u7684\u5f00\u53d1\u5468\u671f\uff0c\u90e8\u7f72\u66f4\u5bb9\u6613\u3002\n   \u8ba9\u6211\u4eec\u6765\u770b\u770b\u8eab\u4efd\u9a8c\u8bc1\u3002 Cognito\u662fAWS\u7684\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u7684\u670d\u52a1\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6ce8\u518c\u548c\u767b\u5f55\u76ee\u7684\uff0c\u7ec6\u7c92\u5ea6\u7684\u7528\u6237\u7ec4\u63a7\u5236\u751a\u81f3\u8054\u5408\u767b\u5f55\uff0c\u5982Facebook\uff0cGoogle\uff06amp; Apple\u767b\u5f55\u3002\u5982\u679c\u60a8\u542f\u52a8SaaS\u4e1a\u52a1\uff0c\u60a8\u771f\u7684\u5e0c\u671b\u4e3a\u7528\u6237\u63d0\u4f9b\u65e0\u7f1d\u8ba4\u8bc1\u4f53\u9a8c\u5e76\u63d0\u4f9b\u793e\u4ea4\u767b\u5f55\u3002 Cognito\u5f88\u5bb9\u6613\u3002 Cognito\u533a\u522b\u4e86\u7528\u6237\u6c60\uff06amp;\u8eab\u4efd\u6c60\u3002\n  Identity Pools\uff1aIdentity Pools\u7528\u4e8e\u4e3a\u7528\u6237\u521b\u5efa\u552f\u4e00\u8eab\u4efd\uff0c\u5e76\u63d0\u4f9b\u5bf9\u5176\u4ed6AWS\u670d\u52a1\u7684\u8bbf\u95ee\u3002\u4f8b\u5982\uff0c\u9700\u8981\u4e3a\u533f\u540d\u7528\u6237\u751f\u6210\u4e34\u65f6\u51ed\u636e\u3002 \n\u4e3a\u4ec0\u4e48\uff1f\u4e3a\u60a8\u7684\u7528\u6237\u63d0\u4f9b\u4ed6\u4eec\u5e94\u5f97\u7684\u65e0\u7f1d\u7684\u8eab\u4efd\u9a8c\u8bc1\u4f53\u9a8c\u3002\u62e5\u6709Cognito\uff0c\u60a8\u53ef\u4ee5\u5728\u4efb\u4f55\u89c4\u6a21\u90a3\u6837\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u60a8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u60a8\u7684\u6ce8\u518c\u548c\u767b\u5f55\u9875\u9762\uff0c\u4f46\u60a8\u60f3\u8981\u6216\u60a8\u751a\u81f3\u53ef\u4ee5\u901a\u8fc7AWS\u4f7f\u7528\u9884\u6784\u5efa\u7684\u9875\u9762\u3002\u4f7f\u7528\u8054\u5408\u767b\u5f55\uff0c\u60a8\u53ef\u4ee5\u5728\u5355\u51fb\u5355\u51fb\u767b\u5f55\u65f6\u63d0\u4f9b\u3002\n   \u6211\u60f3\u8981\u4ecb\u7ecd\u7684\u6700\u540e\u4e00\u9879\u670d\u52a1\u662fDynamoDB\u3002 DynamoDB\u662f\u4e00\u4e2a\u5b8c\u5168\u7ba1\u7406\u7684NoSQL\u6570\u636e\u5e93\uff0c\u5b83\u662f\u9ad8\u5ea6\u53ef\u6269\u5c55\u4e14\u9ad8\u5ea6\u53ef\u7528\u7684\u3002\u6211\u51e0\u4e4e\u6bcf\u4e2a\u7528\u4f8b\u548c\u9879\u76ee\u73b0\u5728\u4f7f\u7528dynamodb\uff0c\u6211\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u7c89\u4e1d\u3002\n  \u6d41\uff1a\u60a8\u53ef\u4ee5\u5728\u8868\u683c\u4e0a\u7684\u6bcf\u4e00\u4e2a\u66f4\u65b0\u4e2d\u89e6\u53d1\u67d0\u4e9b\u4e1c\u897f\uff08\u4f8b\u5982lambda\u51fd\u6570\uff09\u7684\u6d41\n DynamoDB\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u5bc6\u94a5\uff0c\u503c\u6570\u636e\u5e93\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u5b58\u50a8\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u503c\u3002\u503c\u4e5f\u53ef\u4ee5\u662f\u5d4c\u5957\u5217\u8868\u6216\u5d4c\u5957\u5bf9\u8c61\u5217\u8868\uff08\u5982JSON\uff09\u3002 dynamodb\u9879\u770b\u8d77\u6765\u50cf\uff1a\n  \u5bc6\u94a5\u662f\u5217\u540d\uff08ISIN\uff09\uff0c\u503c\u662f\u5177\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e\u7c7b\u578b\uff08s\uff1astring\uff09\u3002\u8be5\u9879\u76ee\u4e5f\u53ef\u4ee5\u7528\u5178\u578b\u7684JSON\u8bed\u6cd5\u663e\u793a\uff1a\n   DynamoDB\u5177\u6709\u4e00\u4e9b\u5de8\u5927\u7684\u529f\u80fd\uff0c\u53ef\u4ee5\u63d0\u9ad8\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u5982\u5168\u7403\u8868\uff0cDynamoDB\u52a0\u901f\u5668\uff0c\u65f6\u95f4\u70b9\u6062\u590d\u7b49\u7b49\u3002\u5728\u8bbe\u8ba1DynamoDB\u8868\u65f6\uff0c\u8bf7\u8bb0\u4f4f\u8bbf\u95ee\u6a21\u5f0f\u59cb\u7ec8\u662f\u91cd\u8981\u7684\u3002\u745e\u514b\u6b63\u5728\u505a\u51fa\u4e00\u4e2a\u7cbe\u5f69\u7684\u5de5\u4f5c\u89e3\u91ca\u4e86\u8fd9\u4e2a\u89c6\u9891\u4e2d\u7684DynamoDB\u7b56\u7565\u3002\n \u5b9a\u4ef7\uff1a\u5b9a\u4ef7\u662f\u57fa\u4e8e\u9605\u8bfb\uff0c\u5199\u4f5c\u548c\u5b58\u50a8\u6570\u636e\u3002\u518d\u6b21\uff0c\u5982\u679c\u4f60\u521a\u521a\u5f00\u59cb\u4f60\u7684SaaS\u4ea7\u54c1\uff0c\u4ef7\u683c\u5982\u6b64\u4e4b\u4f4e\uff0c\u5b83\u4e0d\u4f1a\u82b1\u8d39\u4f60\u4e00\u7f8e\u5143\u3002\u5982\u679c\u60a8\u6709\u53ef\u9884\u6d4b\u7684\u8bfb\u5199\u8bf7\u6c42\uff0c\u60a8\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528\u751a\u81f3\u66f4\u4fbf\u5b9c\u7684\u914d\u7f6e\u5bb9\u91cf\u3002 \n\u5c31\u662f\u8fd9\u6837\uff01 \u8fd9\u4e9b\u662f\u60a8\u5728\u6784\u5efa\u7533\u8bf7\u65f6\u5e94\u8003\u8651\u7684\u670d\u52a1\u3002 \u6240\u6709\u8fd9\u4e9b\u670d\u52a1\u90fd\u5177\u6709\u4ee5\u4e91\u539f\u4f4f\u65b9\u5f0f\u5f00\u53d1\u60a8\u7684\u7533\u8bf7\u7684\u5927\u6548\u76ca\u3002 \u8fd9\u4e9b\u90fd\u662f\uff1a  \u6ca1\u6709\u98ce\u9669\u3002 \u5982\u679c\u6ca1\u6709\u4eba\u4f7f\u7528\u60a8\u7684\u5e94\u7528\uff0c\u5219\u4e0d\u4f1a\u6536\u53d6\u8d39\u7528\u3002 \u8fd9\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u98ce\u9669\u3002  \u5b89\u5168\u7684\u3002 \u968f\u7740AWS\u5de5\u7a0b\u5e08\uff0c\u60a8\u4e0d\u4f1a\u5c06\u60a8\u7684\u670d\u52a1\u5668\u548c\u5e94\u7528\u7a0b\u5e8f\u5b89\u5168\u5730\u4fdd\u62a4\u60a8\u7684\u670d\u52a1\u5668\u548c\u5e94\u7528\u7a0b\u5e8f\u3002 \u4e13\u6ce8\u4e8e\u60a8\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u8ba9\u65e0\u804a\u7684\u4e1c\u897f\u5427\u3002  \u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u6982\u8ff0\u5f53\u7136\uff0c\u5e76\u4e0d\u662f\u4f5c\u4e3a\u5355\u4e00\u670d\u52a1\u7684\u6df1\u5ea6\u6f5c\u6c34\u6216\u5b8c\u6574\u3002 \u6709\u8bb8\u591a\u4f1f\u5927\u7684\u670d\u52a1AWS\u63d0\u4f9b\u3002 \u5982\u679c\u60a8\u60f3\u4e86\u89e3\u66f4\u591a\u5173\u4e8e\u5728AWS\u4e0a\u5efa\u7acbSaaS\u670d\u52a1\u7684\u4fe1\u606f\uff0c\u8bf7\u6309\u7167\u6211\u7684\u63a8\u7279\uff01 ", "note_en": "The goal of this article is to introduce you to the top 5 serverless AWS services which I think every tech-founder or Indie Hacker should know. This is not a deep dive on these services and I want to explain them in a high level fashion and tell you why they are worth using and learning. With these services you are able to build almost every web- and mobile application you can think of. Almost all high level programming languages such as Python, TypeScript, JavaScript and Java can be used with these services. So, let\u2019s jump straight in.\n   I   start with the obvious one, Amplify. Important to note is, that there are two (almost three) \u201cservices\u201d called Amplify within AWS. We have to distinguish between:\n  We talk about  Amplify CLI here. With the Amplify CLI you are able to bootstrap your backend with a few commands within the Command Line Interface. Amplify has several categories you can add, for example these are:\n  With a few commands you are able to build fullstack applications with a guided CLI.\n The  main benefit in my eyes is the  graphql-tranform library. This library enables you to create your data schema with custom annotations like  model or  connection and the library transforms this schema to a valid GraphQL schema and at the same time creates CloudFormation templates for creating your backend resources such as DynamoDB tables, Cognito connections, etc.\n   It creates the type Holding. The  model annotation creates a table in DynamoDB with id as the primary key.  currentPrice will be resolved by the lambda function  priceResolver.\n The  main drawback in my eyes is that you are not as flexible as with building up your infrastructure with a typical IaC solution like CDK or Terraform. Since a lot of magic is happening with Amplify you will likely run into some issues, especially when you are working with several team environments and lambda layers.\n Nevertheless, it is a great tool, it has a great community and the team is still developing the services further. The backend of  deposur was completely bootstrapped with Amplify. If you want to learn one service, learn this one!\n   This brings us to the next service, AppSync. AppSync is a fully managed GraphQL API by AWS. GraphQL enables you as a developer to get exactly the data you need without worrying about fetching too much or too less data overfetching &amp; underfetching). In general you have three main functions within AppSync. These are  Queries, Mutations and  Subscriptions.\n With  Queries you can query data from different data sources. That means that you can have a type  Holding for example which gets data from different sources. Lets take our example schema again:\n  The attribute  ISIN   is a string which comes from DynamoDB, the  currentPrice gets resolved by a Lambda function called  priceResolver. Lambda resolvers give you the main flexibility here. In the lambda function you can have as much customised code as you need (request two different APIs, clean &amp; preprocess data, \u2026) and respond with exactly this data you need in your application. It doesn\u2019t matter where your data lives, AppSync gives you the opportunity of resolving it under one hood for the application. This is a great deal of flexibility.\n     With  Mutations you can change your data and update it.  Subscriptions give you the ability to live update your data.\n  Why should you learn AppSync as a founder? First of all you get the main benefit of using GraphQL which is working with type safety and giving the frontend developer the power of requesting exactly the data it needs. Secondly, you have so much flexibility by connecting every data source you need. Third, you let AWS doing most of the work. You have one single endpoint and no hassle with parsing requests and connecting different AWS services together. It will reduce your development time immensely.\n   Now let\u2019s go back to the roots, Lambda. Lambda is the most common known serverless service. When people talk about serverless many people just refer to lambda. The basic idea behind the lambda service is to run your code without ever thinking about infrastructure. AWS\u2019s promise is just that your code will be executed. Lambda supports several runtimes such as Python, JavaScript, Java, C#, Rust, Go and many more. One of the latest features is that custom docker containers can be used as a runtime and that pricing happens every millisecond instead of every 100 ms. The maximum runtime of lambda is 15 minutes, take that into consideration when building your application. The only infrastructure setting is the memory setting.\n Pricing: Lambda is  cheap. The first million requests per month are free. From that point on it will be calculated based on the minutes the lambda runs.\n  Always increase memory to about 4 GB, the faster it runs the cheaper it is. There is a great  library to test this assumption\n Declare all your static variables such as DynamoDb from boto3 outside of your handler function -&gt; Decreases cold starts\n Keep cold starts in mind when designing your application. If you need certain response times pre-heat your lambda or  provision concurrency before.\n  Lambda gives you the ability of executing code without ever worrying about infrastructure. The pricing is really awesome. Your whole application can be based on Lambda. It depends on the use case and the overall architecture (go event-driven!) but most of the applications I know can be easily adopted to several lambda functions. You just pay on-demand, you have small development cycles and the deployment is way easier.\n   Let\u2019s look at Authentication. Cognito is AWS\u2019s service for authentication and authorisation. You can use it for Sign-Up and Sign-In purposes, fine granular user group control and even federated logins such as Facebook, Google &amp; Apple Login. If you start your SaaS business you really want to give users a seamless authentication experience and offer social logins. This is easily possible with Cognito. Cognito differentiates  User Pools &amp; Identity Pools.\n  Identity Pools: Identity pools are for creating unique identities for users and giving them access to other AWS services. This is needed for example for generating temporary credentials for anonymous users.\n   Why? Give your users the seamless authentication experience they deserve. With Cognito you are able to do that at any scale. You can customise your Sign-Up and Sign-In pages however you want or you can even use pre-built ones by AWS. With federated logins you are able to offer on-click logins.\n   The last service I want to introduce is DynamoDB. DynamoDB is a fully-managed NoSQL database which is highly scalable and highly available. I build almost every use case and project now with DynamoDB and I am a huge fan of it.\n  Streams: You can have streams for triggering something (e.g. a lambda function) on every update on a table\n DynamoDB is basically a key, value database where you can store different datatypes as a value. A value can also be a nested list or nested list of objects (like JSON). A DynamoDB Item looks like that:\n  The key is the column name (ISIN) and the value is the data type (S: String) with the actual value. The item can also be shown with a typical JSON syntax:\n   DynamoDB has some great features for increasing the performance even more such as Global Tables, DynamoDB Accelerator, Point-In-Time recovery and many more. When designing DynamoDB tables it is always important to keep you access patterns in mind. Rick is doing a wonderful job explaining DynamoDB strategies in this  video.\n Pricing: Pricing is based on reading, writing and storing data. Again, if you just start out your SaaS product the price is so low that it won\u2019t cost you a Dollar. If you have a predictable amount of read and write requests you can even use provisioned capacity which is even cheaper.\n  Thats it! These are the services you should consider when building your application. All of these services have the great benefit of developing your application in a cloud-native way. These are:\n Risk-Free. If nobody uses your app you won\u2019t be charged. That minimises your risk immensely.\n  Secure. You won\u2019t secure your servers and applications as good as AWS engineers do. Concentrate on your business logic and let the boring stuff AWS do.\n  This was a high level overview of course and was not intended as a deep dive for the single services or to be complete. There are many more great services AWS offers. If you want to know more about building your SaaS service on AWS follow my  Twitter!", "posttime": "2021-06-21 18:48:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ed1\u5ba2,\u670d\u52a1\u5668,serverless", "title": "\u524d5\u540d\u65e0\u670d\u52a1\u5668AWS\u670d\u52a1\u521b\u59cb\u4eba\u548c\u72ec\u7acb\u9ed1\u5ba2\u5e94\u8be5\u77e5\u9053 ", "title_en": "Top 5 Serverless AWS Services Founders and Indie Hackers Should Know", "transed": 1, "url": "https://medium.com/@sandro_volpicella/top-5-serverless-aws-services-founders-indie-hackers-should-know-7ef62707f766", "via": "", "real_tags": ["\u9ed1\u5ba2", "\u670d\u52a1\u5668"]}, {"category": "", "categoryclass": "", "imagename": "5c5f91ca41df4fea4627a6fdcc0a7d7c.jpg", "infoid": 1067174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u5c31\u50cf\u7d22\u5c3cWF-1000xm4\u4e00\u6837\uff0c\u7cbe\u82f175T\u5c31\u6709\u4e00\u4e2a\u5174\u594b\u7684\u58f0\u97f3\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5b83\u4f1a\u5f3a\u8c03\u4f4e\u97f3\u548c\u4e0a\u90e8\u4e2d\u95f4\uff0c\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u4f1a\u53d1\u73b0\u538b\u5012\u6027\uff0c\u4f46\u5176\u4ed6\u4eba\u53ef\u80fd\u4f1a\u559c\u6b22\u6d41\u884c\u97f3\u4e50\u3002\u7136\u800c\uff0c\u867d\u7136\uff0c\u90a3\u4e9b\u60f3\u8981\u4e00\u4e2a\u66f4\u53d7\u9650\u5236\u7684\u58f0\u97f3\u914d\u7f6e\u6587\u4ef6\u7684\u4eba\u53ef\u4ee5\u901a\u8fc7Jabra\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u83b7\u5f97\u4e00\u4e2a\uff0c\u6ca1\u6709jabra\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u5177\u6709EQ\u5de5\u5177\u548c\u51e0\u79cd\u6709\u6548\u7684\u58f0\u97f3\u9884\u8bbe\u3002\u7136\u540e\uff0c\u60a8\u9009\u62e9\u7684\u4efb\u4f55\u504f\u597d\u90fd\u4f1a\u4fdd\u5b58\u8033\u585e\u672c\u8eab\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u91cd\u590d\u6316\u6398\u5e94\u7528\u7a0b\u5e8f\u3002 JABRA\u901a\u8fc7\u542f\u52a8\u8033\u673a\u540e\u7684\u56fa\u4ef6\u66f4\u65b0\u65f6\u95f4\u4e3aElite 75T\u6dfb\u52a0\u4e86\u79ef\u6781\u7684\u566a\u58f0\u6d88\u9664\uff0c\u56e0\u6b64\u6548\u679c\u5e76\u4e0d\u50cf\u5728\u4ece\u5730\u4e0a\u4e3aANC\u6784\u5efa\u7684\u8bbe\u5907\u4e0a\u7684\u90a3\u6837\u5f3a\u52b2\u3002\u5b83\uff06\uff0339;\u7edd\u5bf9\u4e0d\u662f\u7d22\u5c3cWF-1000xm4\u6216Airpods Pro\u7684\u6c34\u5e73\u3002\u90a3\u8bf4\uff0c\u5b83\u8fdc\u975e\u65e0\u7528;\u4f4e\u9891\u97f3\u8c03\u8db3\u4ee5\u6ee1\u8db3\u4e0d\u65ad\u9700\u8981ANC\u6d3b\u8dc3\u7684\u4eba\u3002\u540c\u6837\uff0c\u6709\u4e00\u79cd\u900f\u660e\u6a21\u5f0f\uff0c\u8fd0\u884c\u826f\u597d\uff0c\u5185\u7f6eMIC\u5728\u547c\u53eb\u4e0a\u6e05\u695a\u5730\u63d0\u4f9b\u58f0\u97f3\u3002\n  \u4e0eWH-1000XM4\u4e0d\u540c\uff0cElite 75T\u786e\u5b9e\u5728\u5e02\u573a\u4e0a\u6709\u5347\u7ea7\u3002 Jabra\u7684Elite 85T\u53bb\u5e74\u5e74\u5e95\u63a8\u51fa\u4e86\u672c\u673a\u566a\u58f0\u6d88\u9664\u652f\u6301\uff0c\u7565\u9ad8\u4e8eIPX4\u9632\u6c34\u7b49\u7ea7\uff0c\u65e0\u7ebf\u5145\u7535\u76d2\uff0c\u66f4\u4e2d\u6027\u9ed8\u8ba4\u58f0\u97f3\u914d\u7f6e\u6587\u4ef6\uff0c\u4ee5\u53ca\u7565\u6e05\u6670\u7684MIC\u8bbe\u7f6e\u3002\u8fd9\u5bf9\u5728\u5976\u5b50\u65e5\u5185\uff0c\u8fd9\u5bf9\u552e\u4ef7\u4e3a170\u7f8e\u5143\u3002\u6211\u4eec\u4e0d\u8ba4\u4e3a\u5347\u7ea7\u8db3\u4ee5\u5bb9\u6613\u90a3\u4e48\u4ef7\u503c\u5dee\u5f02;\u5982\u679c\u6709\u7684\u8bdd\uff0c\u7cbe\u82f175T\u5728\u8212\u9002\u548c\u7535\u6c60\u5bff\u547d\u65b9\u9762\u4ecd\u7136\u66f4\u597d\u3002\u7136\u800c\uff0c\u6700\u8fd1\u53d1\u5e03\u7684\u8282\u62cd\u5de5\u4f5c\u5ba4\u82bd\u53ef\u80fd\u66f4\u65b9\u4fbf\u7684iPhone\u6240\u6709\u8005\u3002\u5bf9\u4e8e\u90a3\u4e9b\u613f\u610f\u4ed8\u51fa\u66f4\u591a\u652f\u4ed8\u7684\u4eba\uff0c\u4e0a\u8ff0WF-1000XM4\u548cAirpods Pro\u6574\u4f53\u8868\u73b0\u66f4\u597d\u3002\u4f46\u5bf9\u4e8e\u4e0d\u5230100\u7f8e\u5143\u7684\u4ef7\u683c\uff0c\u7cbe\u82f175T\u662f\u5bf9\u90a3\u4e9b\u5bfb\u6c42\u5b8c\u5168\u65e0\u7ebf\u7684\u4eba\u7684\u5f3a\u70c8\u8d2d\u4e70\u3002\n \u6ce8\u610f\uff1aARS Technica\u53ef\u4ee5\u901a\u8fc7\u8054\u76df\u8ba1\u5212\u83b7\u5f97\u4ece\u672c\u5e16\u5b50\u7684\u94fe\u63a5\u9500\u552e\u7684\u8d54\u507f\u3002 ", "note_en": "Today is the start of Amazon\u2019s Prime Day sales event, which means a ton of gadgets that may or may not be worth buying are currently on sale. We have a  big curated roundup of the best deals we can find, but I wanted to give special mention to a couple of particularly notable deals on headphones we&#39;ve reviewed positively:  Sony\u2019s noise-canceling WH-1000XM4 for $248\u00a0and  Jabra\u2019s true wireless Elite 75t earbuds for $100. Both deals match the lowest prices we\u2019ve tracked from major retailers. If you\u2019d rather not give more money to Amazon, the\u00a0 Sony deal is available at other stores as well. In Sony\u2019s case, the WH-1000XM4 have an MSRP of $350 but have recently averaged  closer to $315 on Amazon. The Elite 75t, meanwhile, retail for $150 but have had a few  dips to $130 over the last few months.\n  We\u2019ve  recommended the WH-1000XM4 in a few buying guides since  they launched last August, and they remain our preferred pick among wireless noise-canceling headphones. They aren\u2019t the absolute best of their kind in a vacuum:  Apple\u2019s AirPods Max are bit better in audio quality, noise-canceling strength, and build quality. But that pair costs $549; for $300 less, the WH-1000XM4 come more than close enough.\n  The design here is well-padded and relatively light on the head, which should keep the headphones comfortable to wear for hours at a time. They can fold up for easier storage, and Sony packs them with a sturdy little carrying case. Battery life sits at a strong 30-35 hours, depending on how loud you play, and the whole thing charges over USB-C. While they use touch controls instead of more predictable physical buttons, we haven\u2019t found changing tracks or adjusting volume to be overly finicky in long-term testing. They also let you connect to a couple of devices simultaneously. The main selling point here is Sony\u2019s active noise cancellation tech, which is excellent at muting out low-frequency sounds like a bus or plane engine and does better than most at countering higher-pitched noises like nearby voices. Alongside this is an effective \u201ctransparency\u201d mode, which blends outside noise with your music when you want to be better aware of your surroundings. Sony\u2019s companion app includes a number of useful bonus features beyond that, such as a \u201cspeak to chat\u201d setting that can automatically pause your music and let in ambient sound when you start speaking to somebody else.\n     In terms of audio quality, the WH-1000XM4 go heavy on the bass by default. It\u2019s a full, punchy sound that many will appreciate with hip-hop and pop music, but those looking for a more neutral profile can still get it through Sony\u2019s app, which has a customizable EQ tool with several preset audio profiles that genuinely affect the sound. You can also listen passively through a cable. There\u2019s no  aptX support, but you  can listen through Sony\u2019s higher-quality  LDAC codec if you\u2019re the type that can hear a difference in quality there. The WH-1000XM4\u2019s main drawback is microphone quality, which is  fine but makes voices sound more muffled than other wireless pairs in this price range. Bose\u2019s Noise Cancelling Headphones 700, which are  on sale for $229 today, do better there. That pair also has the nifty ability to customize the strength of its noise-canceling effect. If you don\u2019t want to pay more than $200, meanwhile, we  also like Anker\u2019s Soundcore Life Q30 as a budget pick; those are  on sale for $60.\n  Still, for those interested in a set of premium wireless headphones, the WH-1000XM4 are an excellent value at this price. They probably aren\u2019t worth the upgrade if you own the  older Sony XM3s, but given that there was a two-year gap between the launches of those two pairs, we wouldn\u2019t expect another upgrade in this line until sometime next year.  It\u2019s a similar story with the Elite 75t: higher-end alternatives like the  Sony WF-1000XM4 and  Apple AirPods Pro\u00a0(which is  on sale for $190) do many things better, but,  as we&#39;ve written before, Jabra\u2019s pair has the right blend of price and feature set for most people.\n  The ear pieces here are small and light, with soft silicon tips that helps the earphones remain comfortable for extended listening. The in-ear design creates a snug seal that stays secure while on the move and isolates a fair amount of outside noise naturally. It\u2019s also IP55 rated, so it can survive a bit of sweat or light rain. The one-button controls on each ear piece are straightforward enough for adjusting playback and volume. They&#39;re also difficult to press by accident. The earphones will automatically pause once one is removed from your ear, and you can listen with just the right earphone as well. Battery life is solid at about seven hours per charge with active noise cancellation off and a little over five hours with it on. The easily pocketable charging case adds another 20 or hours and recharges over USB-C.\n    While all true wireless earbuds are more susceptible to connection hiccups than a larger over-ear pair, we\u2019ve had few issues along those lines in long-term testing. The earbuds support multi-device pairing as well\u2014though this can be finicky with certain laptops, so it\u2019s worth confirming that you\u2019ll have no issues within the device\u2019s return window if you do take the plunge.\n  Like the Sony WF-1000XM4, the Elite 75t have an excited sound out of the box. It puts heavy emphasis on the bass and upper-mids by default, which some might find overwhelming but others might enjoy with popular music. Again, though, those who want a more restrained sound profile can get one without much effort through Jabra\u2019s app, which has an EQ tool and several effective sound presets. Any preferences you select are then saved the earbuds themselves, so you don\u2019t have to dig into the app repeatedly. Jabra  added active noise cancellation to the Elite 75t through a firmware update months after the earphones launched, so the effect isn\u2019t quite as strong as it\u2019d be on a device built for ANC from the ground up. It&#39;s definitely not on the level of the Sony WF-1000XM4 or AirPods Pro. That said, it\u2019s far from useless; low-frequency tones are cut down enough that it should satisfy people who don\u2019t constantly need ANC active. Likewise, there\u2019s a transparency mode that works well, and the built-in mics present voices clearly enough on calls.\n  Unlike the WH-1000XM4, the Elite 75t  do have an upgrade already on the market. Jabra\u2019s Elite 85t launched late last year with native noise-canceling support, a slightly stronger IPX4 water resistance rating, a wireless charging case, a more neutral default sound profile, and a slightly clearer mic setup. That pair is\u00a0 on sale for $170 during Prime Day. We don\u2019t think the upgrade is significant enough to be worth that price difference, though; if anything, the Elite 75t is still a bit better in terms of comfort and battery life. The  recently released Beats Studio Buds might be more convenient for iPhone owners, though. And for those willing to pay more, the aforementioned WF-1000XM4 and AirPods Pro perform better on the whole. But for less than $100, the Elite 75t are a strong buy for those looking to go fully wireless.\n Note: Ars Technica may earn compensation for sales from links on this post through\u00a0 affiliate programs.", "posttime": "2021-06-21 18:13:18", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u8033\u673a,excellent,\u58f0\u97f3", "title": "\u7d22\u5c3c\u7684\u4f18\u79c0Wh-1000xm4\u8033\u673a\u5012\u5728\u5e95\u5c3e ", "title_en": "Sony\u2019s excellent WH-1000XM4 headphones are down to a new low for Prime Day", "transed": 1, "url": "https://arstechnica.com/gadgets/2021/06/best-amazon-prime-day-deals-2021-headphones-earbuds-sony-jabra/", "via": "", "real_tags": ["\u8033\u673a", "excellent", "\u58f0\u97f3"]}, {"category": "", "categoryclass": "", "imagename": "43b2206a069567f110c9c1db4ef2cded.jpeg", "infoid": 1067173, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f26\u6566 - \u6b27\u6d32\u6280\u672f\u6469\u64e6\u80a9\u8180\u4e0a\u7684\u6570\u767e\u540d\u6700\u5927\u7684\u540d\u5b57\u4e0e\u653f\u5ba2\u548c\u5bcc\u88d5\u7684\u6295\u8d44\u8005\u5728\u82f1\u56fd\u519c\u6751\u519c\u6751\u79c1\u4eba\u6210\u5458\u4ff1\u4e50\u90e8\u7684\u8349\u576a\u4e0a\uff0c\u5728\u4e00\u5e74\u591a\u7684\u7b2c\u4e00\u4e2a\u4e3b\u8981\u6280\u672f\u6d3b\u52a8\u4e4b\u4e00\u3002\n \u5468\u56db\u7684\u5e74\u5ea6\u521b\u59cb\u4eba\u8bba\u575b\u6d3b\u52a8\u7684\u4e0e\u4f1a\u8005\u5305\u62ec\u524dU.K.\u603b\u7406\u5927\u536b\u5361\u6885\u4f26\uff08\u4ed6\u4f4f\u5728\u8def\u4e0a\uff09\uff0c\u524d\u91d1\u878d\u90e8\u957f\u4e54\u6cbb\u5965\u65af\u4f2f\u6069\u548c\u8fc7\u53bb\u548c\u5c55\u793a\u4e86U.K.\u6280\u672f\u90e8\u957f\uff1aEd Vaizey\u548cOliver Dowden\u3002\n  \u8c37\u6b4c\uff06\uff0339; S Matt Brittin\u548cSalesforce\uff06\uff0339; s Zahra Bahroloumi\uff0cSilicon Valley\u91cd\u91cf\u7ea7\u7684\u6b27\u6d32\u8001\u677f\u51fa\u73b0\uff0c\u6b27\u6d32Tiktok\u7684\u603b\u7ecf\u7406\uff0c\u5bcc\u88d5\u7684Waterworth\uff0c\u4ed6\u5728\u5927\u9646\u4e0a\u8dd1\u4e86YouTube\u8425\u9500\u3002\n Ex-Google CEO Eric Sc\u200b\u200bhmidt\uff0cLinkedIn\u8054\u5408\u521b\u59cb\u4ebaReid Hoffman\u548cZoom\u8054\u5408\u521b\u59cb\u4ebaEric Yuan\u4ece\u7f8e\u56fd\u5f00\u59cb\u4e86\u81ea\u5df1\u7684\u89c6\u9891\u8bbf\u8c08\uff0c\u800cDeepmind\u8054\u5408\u521b\u59cb\u4ebaMustafa Suleyman\u5728\u4ed6\u9000\u51fa\u516c\u53f8\u8fdb\u5165\u8c37\u6b4c\u540e\u91cd\u65b0\u5b89\u88c5\u3002\u8fc8\u514b\u6797\u5947\u6b63\u5728\u6218\u6597\u5411\u7f8e\u56fd\u5f15\u6e21\u5230\u7f8e\u56fd\u7684\u6b3a\u8bc8\u7d22\u8d54\u3002\u5728\u9500\u552e\u4ed6\u7684\u8f6f\u4ef6\u542f\u52a8\u81ea\u6cbb\u540e\uff0c\u60e0\u666e\u8d85\u8fc7110\u4ebf\u7f8e\u5143\uff0c\u4e5f\u5728\u51fa\u5e2d\u3002 Palantir\u8054\u5408\u521b\u59cb\u4eba\u517c\u9996\u5e2d\u6267\u884c\u5b98Alex Karp\u662f\u7531\u4e8e\u53c2\u52a0\uff0c\u4f46\u5728U.K\u4e2d\u4e0d\u5f97\u4e0d\u8f8d\u5b66\u3002\u63a8\u8fdf\u4e86\u5176\u5168\u9501\u5bbd\u677e\u7684\u65e5\u671f\u3002\n \uff06\uff0334;\u6211\u60f3\u5728\u6b27\u6d32\u89c1\u9762\u7684\u6bcf\u4e2a\u4eba\u90fd\u5728\u8fd9\u91cc\uff0c\uff06\uff0334;\u4ece\u8d5b\u4e8b\u4e0a\u8bfb\u51fa\u65bd\u5bc6\u7279\u7684\u62a5\u4ef7\uff06\uff0339; s\u7f51\u7ad9\u3002 \uff06\uff0334;\u521b\u59cb\u4eba\u8bba\u575b\u5df2\u6210\u4e3a\u6b27\u6d32\u6280\u672f\u7684\u524d\u5f80\u76ee\u7684\u5730\u3002\uff06\uff0334;\n \u50cf\u8499\u4f50\u4e00\u6837\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u9996\u5e2d\u6267\u884c\u5b98\uff0c\u660e\u667a\uff08\u4ee5\u524d\u8f6c\u79fb\uff09\uff0cCityMapper\u7b49\uff0c\u8fd8\u6709\u66f4\u591a\u4e5f\u8f6c\u5411\u7f51\u7edc\uff0c\u5e76\u503e\u542c\u8c08\u8bba\u4ece\u5b58\u5728\u7684\u6240\u6709\u98ce\u9669\u8c08\u8bba\u5a01\u80c1\u4eba\u7c7b\u4ece\u5730\u7403\u4e0a\u593a\u53d6\u62db\u8058\u4eba\u624d\u7684\u6240\u6709\u98ce\u9669\u4eba\u5de5\u667a\u80fd\u3002\n \u5728\u5176\u4ed6\u5730\u65b9\uff0c\u5728\u4ed6\u4eec\u7684\u4f7f\u7528\u60c5\u51b5\u4e0b\uff0c\u4e0e\u516c\u53f8\u7684\u6570\u5341\u4ebf\u7f8e\u5143\u7684\u4f01\u4e1a - \u4f8b\u5982SemoIa\uff0cIndex Ventures\uff0cAtomico\u548cBalderton  - \u4e5f\u5b58\u5728\uff0c\u5c31\u50cf\u4e00\u4e9bU.K\u3002\uff06\uff0339;\u6700\u6d3b\u8dc3\u7684\u5929\u4f7f\u6295\u8d44\u8005\u3002 \n\u5bf9\u4e8e\u8bb8\u591a\u4eba\u6765\u8bf4\uff0c\u5b83\u662f\u4ed6\u4eec\u7684\u7b2c\u4e00\u4e2a\uff06\uff0339; ve\u80fd\u591f\u5728\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u7ed3\u679c\u4e2d\u51fa\u5e2d\u4e00\u5e74\u591a\u3002\n \u5168\u5929\uff0c\u4eba\u4eec\u4e00\u76f4\u5728\u8bf4\u5982\u4f55\uff06\uff0334;\u5947\u602a\u7684\uff06\uff0334;\u5f53\u4ed6\u4eec\u649e\u5230\u62f3\u5934\u548c\u8098\u90e8\u78b0\u5230\u5f7c\u6b64\u65f6\uff0c\u5c31\u5728\u90a3\u91cc\u3002\u6bcf\u4e2a\u4eba\u90fd\u5fc5\u987b\u5f55\u5236\u81ea\u5df1\u5728\u5141\u8bb8\u53c2\u52a0\u660e\u667a\u7684\u8054\u5408\u521b\u59cb\u4eba\u5854\u74e6\u7279\u00b7\u54c8\u91cc\u514b\u5f00\u53d1\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u83b7\u53d6Covid-19\u6d4b\u8bd5\u5e76\u83b7\u5f97\u8d1f\u9762\u7684\u7ed3\u679c\u3002\n   \u54c1\u724c\uff06\uff0334;\u50cfTech\uff06\uff0334\u7684\u8fbe\u6c83\u65af\u8fd9\u6837\u7684\u4e1c\u897f;\u7531\u5b88\u62a4\u62a5\uff0c\u521b\u59cb\u4eba\u8bba\u575b\u88ab\u8fde\u7eed\u4f01\u4e1a\u5bb6\u548c\u6295\u8d44\u8005\u5e03\u4f26\u7279\u970d\u5fb7\u66fc\u6234\u4e0a\u3002\n \u5171\u540c\u521b\u7acb\u4e86Lastminute.com\u548c\u6700\u8fd1\u88ab\u5217\u51fa\u7684\u5236\u4f5c\u7684\u524dEton\u548c\u725b\u6d25\u5b66\u751f\uff0c\u4ee5\u6b27\u6d32\u6280\u672f\u573a\u666f\u4e2d\u6700\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u7f51\u7edc\u4f17\u6240\u5468\u77e5\u3002\u4ed6\u7684\u8bb8\u591a\u670b\u53cb\u548c\u6295\u8d44\u8005\u6bcf\u5e74\u90fd\u88ab\u9080\u8bf7\u53c2\u52a0\u521b\u59cb\u4eba\u8bba\u575b\u3002\n \u7ec4\u7ec7\u8005\u5c06\u5176\u63cf\u8ff0\u4e3a\u4e16\u754c\u5404\u5730\u7684\u79c1\u4eba\u7f51\u7edc\uff06\uff0339;\u7855\u58eb\u4f01\u4e1a\u5bb6\uff0cCEOS\u548c\u6765\u81ea\u6280\u672f\uff0c\u5a92\u4f53\u548c\u6570\u5b57\u7684\u6295\u8d44\u8005\u3002\n \u4ee5\u524d\u7684\u5ba2\u4eba\u5305\u62ecSnap Ceo Evan Spiegel\uff0c\u524dApple Design Boss Jony Ive\uff0cBroadcaster David Attenborough\uff0c\u4ee5\u53ca\u524d\u96c5\u864e\u9996\u5e2d\u6267\u884c\u5b98Marissa Mayer\u3002\u5a01\u5ec9\u738b\u5b50\uff0c\u82f1\u56fd\u738b\u5ba4\u6210\u5458\u4e5f\u53c2\u52a0\u4e86\u3002\n \u901a\u5e38\u5728\u4e94\u661f\u7ea7\u683c\u7f57\u592b\u9152\u5e97\u4e3e\u884c\uff0c\u4eca\u5e74\u662f\u7b2c\u4e00\u6b21\u521b\u59cb\u4eba\u8bba\u575b\u5728Soho Farmhouse\u4e3e\u884c\u3002 Aston Martins\uff0cMaseratis\uff0cRange Rovers\u548cTeslas\u90fd\u53ef\u4ee5\u5728\u6d3b\u52a8\u5f53\u5929\u5728\u505c\u8f66\u573a\u53d1\u73b0\u3002 \n\uff06\uff0334;\u6709\u4e00\u4e2a\u6d3b\u52a8\u6709\u75af\u72c2\u7684\u94b1\uff0c\uff06\uff0334;\u62e5\u6709Soho Farmhouse\u7684Soho House\u7684\u6210\u5458\u544a\u8bc9CNBC\uff0c\u7531\u4e8e\u8ba8\u8bba\u7684\u654f\u611f\u6027\u8d28\uff0c\u8981\u6c42\u4fdd\u6301\u533f\u540d\u3002\n \u5bf9\u4e8e\u4e00\u4e9b\u4eba\u6765\u8bf4\uff0c\u8fd9\u4e00\u5929\u7684\u4eae\u70b9\u662f\u76ee\u7779\u82f1\u56fd\u55b7\u6c14\u5f0f\u897f\u88c5\u53d1\u660e\u4ebaRichard Browning\u5728\u5730\u4e0a\u51e0\u82f1\u5c3a\u5904\u7684\u98de\u884c\u3002\n  \u5728\u5168\u5929\u5582\u98df\u540e\uff0c\u5ba2\u4eba\u5728\u665a\u4e0a\u88ab\u5bf9\u5f85\u70e4\u9f99\u867e\u548c\u8349\u8393\u548c\u5976\u6cb9\u3002\u5728\u56de\u5bb6\u7684\u8def\u4e0a\uff0c\u4ed6\u4eec\u88ab\u8d50\u7ed9\u4e86\u5496\u5561\u888b\uff0c\u5176\u4e2d\u5305\u542b\u6765\u81ea\u725b\u4ed4\u548c\u590f\u6d1b\u7279\u00b7\u8482\u5c14\u4f2f\u91cc\u7684\u559c\u6b22\u7684\u4ea7\u54c1\u3002\n Fanbytes\u7684CEO CITOTHY ARMOO\uff0c\u8fd9\u662f\u4e00\u5bb6\u5e2e\u52a9\u54c1\u724c\u901a\u8fc7\u793e\u4ea4\u89c6\u9891\u5ba3\u4f20\u7684\u516c\u53f8\uff0c\u544a\u8bc9CNBC\u4ed6\u4eab\u53d7\u4e86\u8fd9\u4e00\u6d3b\u52a8\u3002\n  \uff06\uff0334;\u8fd9\u662f\u4eba\u4eec\u5076\u5c14\u7684\u7b2c\u4e00\u4e2a\u4e3b\u8981\u6d3b\u52a8\uff0c\u6709\u5371\u9669\u4f7f\u5b83\u6210\u4e3a\u4e00\u4e2a\uff06\uff0339;\u8d76\u4e0a\uff06\uff0339;\u670b\u53cb\u7684\u4f1a\u8bae\uff0c\u4f46\u90a3\u662f\u4e0d\u662f\u6848\u4ef6\u3002\u6709\u610f\u4e49\u7684\u8fde\u63a5\u88ab\u57f9\u517b\uff0c\u800c\u4e14\u4f60\uff06\uff0339;\u4f60\u5728\u53bb\u8fd9\u4e9b\u6d3b\u52a8\u65f6\u5bfb\u627e\u4ec0\u4e48\u3002\u6211\u4e5f\u975e\u5e38\u94a6\u4f69\u4ed6\u4eec\u5982\u4f55\u5904\u7406\u793e\u4ea4\u5ef6\u8fdf\u89c4\u5219\u3002\u4eba\u4eec\u5c0a\u91cd\uff0c\u91c7\u53d6\u8003\u8bd5\u7684\u9884\u5904\u7406\u975e\u5e38\u5b89\u6170\u3002\uff06\uff0334;\n \u66f4\u6b63\uff1a\u6b64\u62a5\u544a\u5df2\u66f4\u65b0\uff0c\u4ee5\u5220\u9664Facebook\uff06\uff0339; S Nicola Mendelsohn\u53c2\u52a0\u7684\u9519\u8bef\u5f15\u7528\u3002 ", "note_en": "LONDON \u2014 Hundreds of the biggest names in European tech rubbed shoulders with politicians and wealthy investors on the lawns of the Soho Farmhouse private members club in rural England at what was one of the first major tech events to happen in over a year.\n Attendees of the annual Founders Forum event on Thursday included the former U.K. Prime Minister David Cameron (who lives just up the road), ex-Finance Minister George Osborne, and the past and present U.K. tech ministers: Ed Vaizey and Oliver Dowden, respectively.\n  Google&#39;s Matt Brittin and   Salesforce&#39;s Zahra Bahrololoumi, the European bosses of the Silicon Valley heavyweights, showed up, as did the general manager for TikTok in Europe, Rich Waterworth, who previously ran marketing for YouTube on the continent.\n Ex-Google CEO Eric Schmidt, LinkedIn co-founder Reid Hoffman and  Zoom co-founder Eric Yuan beamed themselves in from the U.S. for video interviews, while DeepMind co-founder Mustafa Suleyman resurfaced after he exited the company in  controversial circumstances to join Google. Mike Lynch, who is  fighting extradition to the U.S. on fraud claims after selling his software start-up Autonomy to HP for over $11 billion, was also in attendance.  Palantir co-founder and CEO Alex Karp was due to attend but had to drop out after the U.K. pushed back the date for its full lockdown easing.\n &#34;Everyone I want to meet in Europe is here,&#34; reads a quote from Schmidt on the event&#39;s website. &#34;Founders Forum has emerged as the go-to destination for tech in Europe.&#34;\n The founders and CEOs of apps like Monzo, Wise (formerly TransferWise), Citymapper, and many more also turned up to network and listen to talks on everything from existential risks that threaten to wipe humanity off the face of the Earth to hiring top talent in artificial intelligence.\n Elsewhere, venture capitalists from firms with billions of dollars at their disposal \u2014 such as Sequoia, Index Ventures, Atomico and Balderton \u2014 were also present, as were some of the U.K.&#39;s most active angel investors.\n  For many, it was the first in-person tech event they&#39;ve been able to attend in over a year as a result of the coronavirus pandemic.\n Throughout the day, people kept saying how &#34;weird&#34; it was to be there as they fist-bumped and elbow-bumped one another. Everyone had to record themselves taking a Covid-19 test and getting a negative result in an app developed by Wise co-founder Taavet Hinrikus before they were allowed to attend.\n   Branded as &#34; something like the Davos of tech&#34; by The Guardian newspaper, Founders Forum is put on by serial entrepreneur and investor Brent Hoberman.\n The former Eton and Oxford student, who co-founded Lastminute.com and the recently listed Made.com, is well-known for having one of the most impressive networks in the European tech scene. Many of his friends and investors are invited to Founders Forum each year.\n The organizers describe it as a private network of the world&#39;s top-tier entrepreneurs, CEOs and investors from technology, media and digital.\n Previous guests have included Snap CEO Evan Spiegel, former Apple design boss Jony Ive, broadcaster David Attenborough, and former Yahoo CEO Marissa Mayer. Prince William, a member of the British royal family, has also attended.\n Normally held at the five-star Grove Hotel, this year marks the first time Founders Forum has been held at Soho Farmhouse. Aston Martins, Maseratis, Range Rovers and Teslas could all be spotted in the car park on the day of the event.\n &#34;To have an event there is crazy money,&#34; a member of Soho House, which owns Soho Farmhouse, told CNBC, asking to remain anonymous due to the sensitive nature of the discussion.\n For some, one of the highlights of the day was witnessing British jet suit inventor Richard Browning flying around a few feet above the ground.\n  After being fed throughout the day, guests were treated to grilled lobster and strawberries and cream in the evening. On their way home, they were given goodie bags containing products from the likes of Cowshed and Charlotte Tilbury.\n Timothy Armoo, CEO of Fanbytes, a company that helps brands advertise through social video, told CNBC he enjoyed the event.\n  &#34;With this being the first major event that people have been to in a while, there is the danger that it becomes more of a &#39;catch up&#39; session for friends, but that wasn&#39;t the case at all. Meaningful connections were fostered, and that&#39;s what you&#39;re looking for when you go to these events. I also really admired how they handled social-distancing rules. People were respectful, and the pre-process of taking tests was quite comforting.&#34;\n Correction: This report was updated to delete an incorrect reference that Facebook&#39;s Nicola Mendelsohn was in attendance.", "posttime": "2021-06-21 18:06:05", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u521b\u59cb\u4eba,forum", "title": "\u770b\u770b\u521b\u59cb\u4eba\u8bba\u575b\uff0c\u6b27\u6d32\u9876\u7ea7\u9996\u5e2d\u6267\u884c\u5b98\u548c\u6765\u81ea\u6280\u672f\u548c\u5a92\u4f53\u6295\u8d44\u8005\u7684\u201c\u79d1\u6280\u8fbe\u6c83\u65af\u8fbe\u6c83\u65af\u201d ", "title_en": "A look at Founders Forum, the annual UK event branded as the \u201cDavos of tech\u201d attended by Europe's top CEOs and investors from technology and media", "transed": 1, "url": "https://www.cnbc.com/2021/06/18/founders-forum-the-uk-tech-event-attended-by-the-rich-and-famous.html", "via": "", "real_tags": ["\u521b\u59cb\u4eba", "forum"]}, {"category": "", "categoryclass": "", "imagename": "c106ce82fbc7c7d28936993aba2132a8.png", "infoid": 1067172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b64\u5305\u5305\u542b\u9ad8\u6027\u80fd\uff0c\u67f1\u72b6\u5185\u5b58\u5b58\u50a8\u5f15\u64ce\uff0c\u652f\u6301\u5feb\u901f\u67e5\u8be2\uff0c\u66f4\u65b0\u548c\u8fed\u4ee3\uff0c\u5177\u6709\u96f6\u5206\u914d\u548c\u4f4d\u56fe\u7d22\u5f15\u3002\n    \u4e00\u822c\u601d\u60f3\u662f\u5229\u7528\u5728\u9635\u5217\uff08SOA\uff09\u7ed3\u6784\u4e2d\u7ec4\u7ec7\u6570\u636e\u7684\u7f13\u5b58\u53cb\u597d\u65b9\u5f0f\uff0c\u5426\u5219\u4ee5\u5176\u4ed6\u65b9\u5f0f\u77e5\u9053\uff06\uff0334;\u67f1\u72b6\uff06\uff0334;\u5b58\u50a8\u5728\u6570\u636e\u5e93\u8bbe\u8ba1\u4e2d\u3002\u8fd9\u53c8\u5141\u8bb8\u6211\u4eec\u975e\u5e38\u6709\u6548\u5730\u8fed\u4ee3\u548c\u8fc7\u6ee4\u5217\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u6b64\u5305\u8fd8\u5c06\u4f4d\u56fe\u7d22\u5f15\u6dfb\u52a0\u5230\u67f1\u72b6\u5b58\u50a8\uff0c\u5141\u8bb8\u4f7f\u7528\u4e8c\u8fdb\u5236\u6587\u4ef6\u548c\uff0c\u800c\u4e0d\u662f\u6216XOR\u6784\u5efa\u8fc7\u6ee4\u5668\u67e5\u8be2\uff08\u8bf7\u53c2\u9605\u4e0eSIMD\u652f\u6301\u7684Kelindar / Bitmap\uff09\u3002\n   \u4e3a\u4e86\u5c06\u6570\u636e\u653e\u5165\u5546\u5e97\uff0c\u60a8\uff06\uff0339; ll\u9700\u8981\u9996\u5148\u901a\u8fc7\u8c03\u7528newcollection\uff08\uff09\u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u96c6\u5408\u3002\u6bcf\u4e2a\u96c6\u5408\u90fd\u9700\u8981\u6a21\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528CreateColumn\uff08\uff09\u591a\u6b21\u6216\u901a\u8fc7\u8c03\u7528CreateColumnSof\uff08\uff09\u51fd\u6570\u4ece\u5bf9\u8c61\u81ea\u52a8\u63a8\u65ad\u51fa\u6765\u624b\u52a8\u6307\u5b9a\u3002\n \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u901a\u8fc7\u4f7f\u7528JSON.UNMARSHAL\uff08\uff09\u548c\u57fa\u4e8e\u52a0\u8f7d\u5207\u7247\u4e0a\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u81ea\u52a8\u521b\u5efaCOLUM\u6765\u52a0\u8f7d\u4e00\u4e9bJSON\u6570\u636e\u3002\u5b8c\u6210\u6b64\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5c06\u5bf9\u8c61\u9010\u4e00\u63d2\u5165\u96c6\u5408\u6765\u52a0\u8f7d\u6211\u4eec\u7684\u6570\u636e\u3002\u8fd9\u662f\u901a\u8fc7\u91cd\u590d\u8c03\u7528\u96c6\u5408\u672c\u8eab\u7684INSERT\uff08\uff09\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684\u3002\n \u6570\u636e\uff1a= loadfromjson\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67f1\u72b6\u96c6\u5408\u64ad\u653e\u5668\uff1a=\u5217\u3002 newcollection\uff08\uff09\u73a9\u5bb6\u3002 CreateColumnSof\uff08\u6570\u636e[0]\uff09//\u4ece\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u4e2d\u63d2\u5165\u6bcf\u4e2a\u9879\u76eefor _\uff0cv\uff1a=\u8303\u56f4\u6570\u636e{\u64ad\u653e\u5668\u3002\u63d2\u5165\uff08v\uff09}\n \u73b0\u5728\uff0c\u8ba9\uff06\uff0339; s\u8bf4\u6211\u4eec\u53ea\u60f3\u8981\u6dfb\u52a0\u7279\u5b9a\u5217\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u624b\u52a8\u8c03\u7528CreateColumn\uff08\uff09\u65b9\u6cd5\u6765\u5b8c\u6210\u6b64\u64cd\u4f5c\u4ee5\u521b\u5efa\u6240\u9700\u5217\u3002\n //\u4f7f\u7528\u9884\u5b9a\u4e49\u7684\u5217\u64ad\u653e\u5668\u521b\u5efa\u4e00\u4e2a\u65b0\u7684colument\u96c6\u5408\uff1a=\u5217\u3002 newcollection\uff08\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\uff0c\u5217\u3002forstring\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u7c7b\uff06\uff0334;\uff0c\u5217\u3002forstring\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\uff0c\u5217\u3002forfloat64\uff08\uff09\uff09\u73a9\u5bb6\u3002 CreateColumn\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\uff0c\u5217\u3002forint16\uff08\uff09\uff09//\u4ece\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u4e2d\u63d2\u5165\u6765\u81ea\u6211\u4eec\u52a0\u8f7d\u7684\u6570\u636e\u7684_\uff0cv\uff1a=\u8303\u56f4loadfromjson\uff08\uff06\uff0334;\u64ad\u653e\u5668\u3002just\uff0334;\uff09{\u73a9\u5bb6\u3002\u63d2\u5165\uff08v\uff09} \n\u867d\u7136\u524d\u9762\u7684\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u63d2\u5165\u8bb8\u591a\u5bf9\u8c61\uff0c\u4f46\u5b83\u662f\u4e00\u4e2a\u63a5\u4e00\u4e2a\u5730\u6267\u884c\u5b83\u5e76\u4e14\u76f8\u5f53\u6548\u7387\u3002\u8fd9\u662f\u7531\u4e8e\u6bcf\u4e2a\u63d2\u5165\uff08\uff09\u76f4\u63a5\u5728\u96c6\u5408\u4e0a\u547c\u53eb\uff0c\u53d1\u8d77\u4e00\u4e2a\u5355\u72ec\u7684\u8d8a\u91ce\uff0c\u5e76\u4e14\u5728\u90a3\u91cc\u4e14\uff06\uff0339;\uff06\uff0339; s\u7684\u5c0f\u578b\u6027\u80fd\u6210\u672c\u3002\u5982\u679c\u8981\u6267\u884c\u6279\u91cf\u63d2\u5165\u5e76\u63d2\u5165\u8bb8\u591a\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u4e8b\u52a1\u4e0a\u8c03\u7528Insert\uff08\uff09\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\u6240\u793a\u3002\u8bf7\u6ce8\u610f\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u901a\u8fc7\u8c03\u7528Query\uff08\uff09\u65b9\u6cd5\u5e76\u5728\u4e8b\u52a1\u4e0a\u8c03\u7528Txn.insert\uff08\uff09\u65b9\u6cd5\u800c\u4ee3\u66ff\u96c6\u5408\u4e0a\u7684\u5dee\u5f02\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08func\uff08txn * txn\uff09\u9519\u8bef{for _\uff0cv\uff1a= loadfromjson\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09{txn\u3002\u63d2\u5165\uff08v\uff09} return nil // commit}\uff09\n  \u8be5\u5546\u5e97\u5141\u8bb8\u60a8\u6839\u636e\u67d0\u4e9b\u5c5e\u6027\u7684\u5b58\u5728\u6216\u5176\u503c\u67e5\u8be2\u6570\u636e\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u6b63\u5728\u67e5\u8be2\u6211\u4eec\u7684\u96c6\u5408\u5e76\u5728\u4e8b\u52a1\u4e0a\u4f7f\u7528withValue\uff08\uff09\u65b9\u6cd5\u5e94\u7528\u8fc7\u6ee4\u64cd\u4f5c\u3002\u6b64\u65b9\u6cd5\u626b\u63cf\u503c\u5e76\u68c0\u67e5\u67d0\u4e2a\u8c13\u8bcd\u662f\u5426\u8bc4\u4f30\u4e3atrue\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\uff06\uff0339;\u5982\u679c\u4ed6\u4eec\u7684\u73ed\u7ea7\u7b49\u4e8e\uff06\uff0334; rogue\uff06\uff0334;\u6211\u4eec\u8df3\u8fc7\u4ed6\u4eec\u7684\u8bfe\u7a0b\uff0c\u626b\u63cf\u4ed6\u4eec\u7684\u8bfe\u7a0b\uff0c\u62ac\u5934\u770b\u4ed6\u4eec\u7684\u8bfe\u7a0b\u3002\u5728\u6700\u540e\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u8c03\u7528count\uff08\uff09\u65b9\u6cd5\uff0c\u53ea\u8ba1\u7b97\u7ed3\u679c\u96c6\u3002\n //\u6b64\u67e5\u8be2\u6267\u884c\uff06\uff0334;\u7c7b\uff06\uff0334;\u5217\u7403\u5458\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{COUNT\uff1a= TXN\u3002\u6709value\uff08\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334; rogue\uff06\uff0334;} \uff09\u3002count\uff08\uff09\u8fd4\u56denil}\uff09\n \u73b0\u5728\uff0c\u5982\u679c\u6211\u4eec\uff06\uff0339; ll\u9700\u8981\u7ecf\u5e38\u505a\u8fd9\u4e2a\u67e5\u8be2\u5417\uff1f\u53ef\u4ee5\u7b80\u5355\u5730\u521b\u5efa\u5177\u6709\u76f8\u540c\u8c13\u8bcd\u7684\u7d22\u5f15\uff0c\u5e76\u4e14\u6bcf\u6b21\uff08a\uff09\u5c06\u5bf9\u8c61\u63d2\u5165\u5230\u96c6\u5408\u4e2d\u5e76\u4e14\uff08b\uff09\u66f4\u65b0\u4f9d\u8d56\u5217\u7684\u503c\u3002\u770b\u770b\u4e0b\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u4f9d\u8d56\u4e8e\uff06\uff0334\u7684\u6d41\u6c13\u6307\u6570\u7684\u62f3\u5934;\u67f1\u5b50\u3002\u6b64\u7d22\u5f15\u9002\u7528\u4e8e\u76f8\u540c\u7684\u8c13\u8bcd\uff0c\u5982\u679c\u7c7b\u662f\uff06\uff0334;\u6d41\u6c13\uff06\uff0334; rogue\uff06\uff0334;\u7136\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u7b80\u5355\u5730\u8c03\u7528\uff08\uff09\u65b9\u6cd5\u5e76\u63d0\u4f9b\u7d22\u5f15\u540d\u79f0\u6765\u67e5\u8be2\u8fd9\u4e00\u70b9\u3002\n \u7d22\u5f15\u57fa\u672c\u4e0a\u7c7b\u4f3c\u4e8e\u5e03\u5c14\u5217\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5728\u6280\u672f\u4e0a\u4e5f\u53ef\u4ee5\u9009\u62e9\u5b83\uff06\uff0339; QUENCEITY\u3002\u73b0\u5728\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u67e5\u8be2\u5c06\u572810-100\u500d\u7684\u901f\u5ea6\u5de6\u53f3\u624d\u80fd\u66f4\u5feb\u5730\u6267\u884c\uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528Bitmap\u7d22\u5f15\u4e3a\uff06\uff0334; Rogue\uff06\uff0334;\u7d22\u5f15\u5e76\u5728\u67e5\u8be2\u65f6\u5bf9\u4e24\u4e2a\u4f4d\u56fe\u6267\u884c\u7b80\u5355\u7684\u903b\u8f91\u548c\u64cd\u4f5c\u3002\u8fd9\u907f\u514d\u4e86\u5728\u67e5\u8be2\u671f\u95f4\u7684\u6574\u4e2a\u626b\u63cf\u548c\u5e94\u7528\u8c13\u8bcd\u3002\n //\u521b\u5efa\u7d22\u5f15\uff06\uff0334; rogue\uff06\uff0334;\u63d0\u524d\u3002 createIndex\uff08\uff06\uff0334; rogue\uff06\uff0334;\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334; rogue\uff06\uff0334;}\uff09//\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\u4ee5\u524d\u7684\u67e5\u8be2\uff0c\u4f46\u73a9\u5bb6\u66f4\u5feb\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{count\uff1a= txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002count\uff08\uff09\u8fd4\u56denil}\uff09 \n\u67e5\u8be2\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6269\u5c55\uff0c\u56e0\u4e3a\u5b83\u5141\u8bb8\u7d22\u5f15\u4ea4\u53c9\u53e3\uff0c\u5dee\u5f02\u548c\u8054\u5408\u64cd\u4f5c\u3002\u8fd9\u5141\u8bb8\u60a8\u63d0\u51fa\u66f4\u590d\u6742\u7684\u96c6\u5408\u95ee\u9898\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u5047\u8bbe\u6211\u4eec\u5728\u7c7b\u5217\u4e2d\u62e5\u6709\u4e00\u5806\u7d22\u5f15\uff0c\u6211\u4eec\u5e0c\u671b\u63d0\u51fa\u4e0d\u540c\u7684\u95ee\u9898\u3002\n \u9996\u5148\uff0c\u8ba9Let\uff06\uff0339; s\u5c1d\u8bd5\u901a\u8fc7\u5e94\u7528\u540c\u4e00\u547d\u540d\u7684\u65b9\u6cd5\u6765\u5408\u5e76\u4e24\u4e2a\u67e5\u8be2\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9996\u5148\u9009\u62e9\u53ea\u9009\u62e9\u76d7\u8d3c\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4e0e\u6cd5\u5e08\u5408\u5e76\uff0c\u5bfc\u81f4\u5305\u542b\u76d7\u8d3c\u548c\u6cd5\u5e08\u7684\u9009\u62e9\u3002\n  \u63a5\u4e0b\u6765\uff0c\u8ba9\uff06\uff0339;\u7edf\u8ba1\u6bcf\u4e2a\u4eba\u90fd\u6ca1\u6709\u4e00\u4e2a\u6d41\u6c13\uff0c\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6ca1\u6709\uff08\uff09\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5728\u96c6\u5408\u4e0a\u6267\u884c\u5dee\u5f02\uff08\u5373\u4e8c\u8fdb\u5236\u800c\u4e0d\u662f\u64cd\u4f5c\uff09\u3002\u9664\u4e86\u76d7\u8d3c\u4e4b\u5916\uff0c\u8fd9\u5c06\u5bfc\u81f4\u96c6\u5408\u4e2d\u6240\u6709\u73a9\u5bb6\u7684\u8ba1\u6570\u3002\n  \u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u7ec4\u5408\u6240\u6709\u65b9\u6cd5\u5e76\u4fdd\u6301\u66f4\u590d\u6742\u7684\u67e5\u8be2\u3002\u5f53\u67e5\u8be2\u7d22\u5f15\u548c\u975e\u7d22\u5f15\u5b57\u6bb5\u65f6\uff0c\u91cd\u8981\u7684\u662f\u8981\u77e5\u9053\uff0c\u56e0\u4e3a\u6bcf\u6b21\u626b\u63cf\u90fd\u5c06\u4ec5\u9002\u7528\u4e8e\u9009\u62e9\uff0c\u52a0\u5feb\u67e5\u8be2\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u5728\u7279\u5b9a\u7d22\u5f15\u4e0a\u6709\u8fc7\u6ee4\u5668\uff0c\u53ef\u9009\u62e950\uff05\u7684\u64ad\u653e\u5668\uff0c\u7136\u540e\u60a8\u5bf9\u6b64\u8fdb\u884c\u626b\u63cf\uff08\u4f8b\u5982\uff0cvalue\uff08\uff09\uff09\uff0c\u5b83\u53ea\u626b\u63cf50\uff05\u7684\u7528\u6237\uff0c\u56e0\u6b64\u5c06\u66f4\u5feb\u5730\u626b\u63cf50\uff05\u3002\n //\u8d85\u8fc730\u5c81\u7684\u76d7\u8d3c\uff1f\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u7528float\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v float64\uff09bool {return v\uff06gt; = 30}\uff09 \u3002count\uff08\uff09\u8fd4\u56denil}\uff09\n  \u5728\u4ee5\u524d\u7684\u6240\u6709\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u505a\u4e86\u8ba1\u7b97\u7ed3\u679c\u96c6\u4e2d\u5143\u7d20\u6570\u7684\u8ba1\u6570\uff08\uff09\u64cd\u4f5c\u3002\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\uff06\uff0339; ll\u770b\u770b\u6211\u4eec\u5982\u4f55\u8fed\u4ee3\u7ed3\u679c\u96c6\u3002\u7b80\u800c\u8a00\u4e4b\uff0c\u67092\u4e2a\u4e3b\u8981\u65b9\u6cd5\uff0c\u8ba9\u6211\u4eec\u8fd9\u6837\u505a\uff1a\n range\uff08\uff09\u65b9\u6cd5\u4ee5\u5217\u540d\u4e3a\u53c2\u6570\uff0c\u5141\u8bb8\u66f4\u5feb\u7684get / set\u4e3a\u8be5\u5217\u7684\u503c\u3002 \nSELECT\uff08\uff09\u65b9\u6cd5\u5e76\u672a\u9884\u9009\u62e9\u4efb\u4f55\u7279\u5b9a\u5217\uff0c\u56e0\u6b64\u5b83\u901a\u5e38\u6709\u70b9\u6162\uff0c\u5b83\u4e5f\u4e0d\u5141\u8bb8\u4efb\u4f55\u66f4\u65b0\u3002\n \u9996\u5148\u68c0\u67e5\uff06\uff0339;\u9996\u5148\u68c0\u67e5\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7\u4f7f\u7528Range\uff08\uff09\u65b9\u6cd5\u548c\u63d0\u4f9b\uff06\uff0334;\u59d3\u540d\uff06\uff0334;\u9009\u62e9\u6240\u6709\u6d41\u6c13\u5e76\u901a\u8fc7\u4f7f\u7528\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u6765\u6253\u5370\u51fa\u4ed6\u4eec\u7684\u540d\u79f0\u3002\u5217\u5230\u5b83\u3002\u5305\u542b\u5149\u6807\u7684\u56de\u8c03\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u8c03\u7528\u5b57\u7b26\u4e32\uff08\uff09\u65b9\u6cd5\u6765\u5feb\u901f\u83b7\u53d6\u5217\u7684\u503c\u6765\u68c0\u7d22\u5b57\u7b26\u4e32\u503c\u3002\u5b83\u8fd8\u5305\u542bint\uff08\uff09\uff0cuint\uff08\uff09\uff0cfloat\uff08\uff09\u6216\u66f4\u591a\u901a\u7528\u503c\uff08\uff09\u7684\u65b9\u6cd5\uff0c\u4ee5\u63d0\u53d6\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {println\uff08\uff06\uff0334; Rogue name\uff06\uff0334;\uff0cv\u3002\u5b57\u7b26\u4e32\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09return nil}\n \u73b0\u5728\uff0c\u5982\u679c\u4f60\u9700\u8981\u4e24\u5217\u600e\u4e48\u529e\uff1f\u8be5\u8303\u56f4\u4ec5\u5141\u8bb8\u60a8\u5feb\u901f\u9009\u62e9\u5355\u4e2a\u5217\uff0c\u4f46\u60a8\u4ecd\u7136\u53ef\u4ee5\u5728\u8fed\u4ee3\u671f\u95f4\u901a\u8fc7\u5176\u540d\u79f0\u68c0\u7d22\u5176\u4ed6\u5217\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u76f8\u5e94\u7684StringAt\uff08\uff09\uff0cfloatat\uff08\uff09\uff0cIntat\uff08\uff09\uff0cUIntat\uff08\uff09\u6216ValueAt\uff08\uff09\u65b9\u6cd5\u6765\u5b8c\u6210\uff0c\u5982\u4e0b\u6240\u793a\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {println\uff08\uff06\uff0334; Rogue\u540d\u79f0\uff06\uff0334;\uff0cv\u3002\u5b57\u7b26\u4e32\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0println\uff08\uff06\uff0334;\u6d41\u6c13\u65f6\u4ee3\uff06\uff0334; v\u3002Intat\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\uff09\uff09//\u6253\u5370\u5e74\u9f84\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09\n \u53e6\u4e00\u65b9\u9762\uff0cSELECT\uff08\uff09\u5141\u8bb8\u60a8\u6267\u884c\u63d0\u4f9b\u9009\u62e9\u5149\u6807\u7684\u53ea\u8bfb\u9009\u62e9\u3002\u6b64\u5149\u6807\u4e0d\u5141\u8bb8\u4efb\u4f55\u66f4\u65b0\uff0c\u5220\u9664\u6216\u63d2\u5165\uff0c\u4e5f\u4e0d\u5141\u8bb8\u9884\u9009\u62e9\u4efb\u4f55\u7279\u5b9a\u5217\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u9009\u62e9\u5668\u6253\u5370\u51fa\u6240\u6709\u6d41\u6c13\u7684\u6240\u6709\u76d7\u8d3c\u7684\u540d\u79f0\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u9009\u62e9\uff08func\uff08v\u5217\u9009\u62e9\u5668\uff09bool {println\uff08\uff06\uff0334; rogue name\uff06\uff0334; v\u3002 Stringat\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334;\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09 \n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u9700\u8981\u5feb\u901f\u5220\u9664\u96c6\u5408\u4e2d\u7684\u6240\u6709\u4e00\u4e9b\u6570\u636e\uff0c\u8be5\u600e\u4e48\u529e\uff1f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cdeleteAll\uff08\uff09\u6216deleteIf\uff08\uff09\u65b9\u6cd5\u6d3e\u4e0a\u7528\u65b9\u4fbf\u4e86\u3002\u8fd9\u4e9b\u65b9\u6cd5\u975e\u5e38\u5feb\uff08\u5c24\u5176\u662fdeleteAll\uff08\uff09\uff09\uff0c\u5e76\u5141\u8bb8\u60a8\u5feb\u901f\u5220\u9664\u9002\u5f53\u7684\u7ed3\u679c\uff0c\u540c\u610f\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u53ea\u9700\u5728\u4e8b\u52a1\u4e2d\u9009\u62e9\u5b83\u4eec\u5e76\u8c03\u7528DeleteAll\uff08\uff09\u65b9\u6cd5\uff0c\u4ece\u96c6\u5408\u4e2d\u5220\u9664\u6240\u6709\u76d7\u8d3c\u3002\n   \u4e3a\u4e86\u66f4\u65b0\u96c6\u5408\u4e2d\u7684\u67d0\u4e9b\u9879\u76ee\uff0c\u53ef\u4ee5\u7b80\u5355\u5730\u8c03\u7528\u8303\u56f4\uff08\uff09\u65b9\u6cd5\u548c\u76f8\u5e94\u7684\u5149\u6807\uff06\uff0339; s\u66f4\u65b0\uff08\uff09\u6216updateateate\uff08\uff09\u65b9\u6cd5\uff0c\u5141\u8bb8\u539f\u5b50\u5730\u66f4\u65b0\u67d0\u4e2a\u5217\u7684\u503c\u3002\u5982\u679c\u5546\u5e97\u652f\u6301\u4ea4\u6613\uff0c\u5e76\u4e14\u53ea\u6709\u5728\u5df2\u63d0\u4ea4\u4e8b\u52a1\u65f6\uff0c\u624d\u4f1a\u5c06\u66f4\u65b0\u76f4\u63a5\u53cd\u6620\uff0c\u4f46\u624d\u80fd\u5c06\u66f4\u65b0\u5e94\u7528\u4e8e\u96c6\u5408\u3002\u8fd9\u5141\u8bb8\u9694\u79bb\u548c\u56de\u6eda\u3002\n \u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u9009\u62e9\u6240\u6709\u6d41\u6c13\u5e76\u66f4\u65b0\u5b83\u4eec\u7684\u5e73\u8861\u548c\u5e74\u9f84\uff0c\u4ee5\u67d0\u4e9b\u503c\u3002\u4e8b\u52a1\u8fd4\u56denil\uff0c\u56e0\u6b64\u5b83\u5c06\u5728query\uff08\uff09\u65b9\u6cd5\u8fd4\u56de\u65f6\u81ea\u52a8\u63d0\u4ea4\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08txn * txn\uff09\u9519\u8bef{txn\u3002\u4e0e\uff08\uff06\uff0334;\u6d41\u6c13\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09 //\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\u523010.0 v\u3002Updateat\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; 50\uff09//\u66f4\u65b0\uff06\uff0334;\u5e74\u9f84\uff06\uff0334;\u523050 return true} //\u9009\u62e9\u4f59\u989d\u8fd4\u56denil}\uff09\n \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u60f3\u8981\u9012\u5f52\u6216\u51cf\u5c11\u6570\u503c\u3002\u4e3a\u4e86\u5b8c\u6210\u6b64\u64cd\u4f5c\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u5149\u6807\u6216\u9009\u62e9\u5668\u7684\u63d0\u4f9b\u7684\u6dfb\u52a0\uff08\uff09\u6216addat\uff08\uff09\u64cd\u4f5c\u3002\u6ce8\u610f\uff0c\u8fd8\u5c06\u76f8\u5e94\u5730\u66f4\u65b0\u7d22\u5f15\uff0c\u5e76\u4e14\u8c13\u8bcd\u4ee5\u6700\u65b0\u7684\u503c\u91cd\u65b0\u8bc4\u4f30\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c06\u6240\u6709\u76d7\u8d3c\u7684\u5e73\u8861\u5f52\u56e0\u4e8e\u539f\u5b50\u800c\u50cf\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN * TXN\uff09\u9519\u8bef{TXN\u3002\u4e0e\uff08\uff06\uff0334; rogue\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u6dfb\u52a0\uff08500.0\uff09 //\u9012\u589e\uff06\uff0334;\u4f59\u989d\uff06\uff0334; by 500\u8fd4\u56detrue}\uff09\u8fd4\u56denil}\uff09\n  \u6709\u65f6\uff0c\u5728\u4e0d\u518d\u9700\u8981\u5b83\u4eec\u65f6\u81ea\u52a8\u5220\u9664\u67d0\u4e9b\u884c\u662f\u6709\u7528\u7684\u3002\u4e3a\u6b64\uff0c\u5e93\u4f1a\u81ea\u52a8\u5c06expire\u5217\u6dfb\u52a0\u5230\u6bcf\u4e2a\u65b0\u96c6\u5408\u4e2d\uff0c\u5e76\u540c\u65f6\u542f\u52a8\u6e05\u9664Goroutine\uff0c\u5468\u671f\u6027\u5730\u8fd0\u884c\u5e76\u6e05\u9664\u5df2\u8fc7\u671f\u7684\u5bf9\u8c61\u3002\u8981\u8bbe\u7f6e\u6b64\u9879\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u96c6\u5408\u4e0a\u4f7f\u7528INSERTWITHTL\uff08\uff09\u65b9\u6cd5\uff0c\u5141\u8bb8\u4f7f\u7528\u5b9a\u4e49\u7684\u65f6\u95f4\u6301\u7eed\u65f6\u95f4\u63d2\u5165\u5bf9\u8c61\u3002 \n\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06\u5bf9\u8c61\u63d2\u5165\u96c6\u5408\u5e76\u4ece\u5f53\u524d\u65f6\u95f4\u5c06\u65f6\u95f4\u8bbe\u7f6e\u4e3a5\u79d2\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u5c06\u81ea\u52a8\u4ece\u96c6\u5408\u4e2d\u81ea\u52a8\u9a71\u9010\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u56de\u6536\u5176\u7a7a\u95f4\u3002\n \u73a9\u5bb6\u3002 InsertWithttl\uff08\u6620\u5c04[String]\u63a5\u53e3{} {\uff06\uff0334;\u59d3\u540d\uff06\uff0334 ;:\uff06\uff0334; merlin\uff06\uff0334 ;,\uff06\uff0334;\u7c7b\uff06\uff0334 ;:\uff06\uff0334;\u6cd5\u5e08\u548c\uff0334 ;,\uff06\uff0334;\u5e74\u9f84\uff06\uff0334 ;:55\uff0c\uff06\uff0334;\u4f59\u989d\uff06\uff0334;\uff1a500\uff0c}\uff0c5 *\u65f6\u95f4\u3002\u7b2c\u4e8c\uff09//\u65f6\u95f4\u52305\u79d2\n \u5728\u4e00\u4e2a\u6709\u8da3\u7684\u8282\u70b9\u4e0a\uff0c\u7531\u4e8e\u81ea\u52a8\u6dfb\u52a0\u5230\u6bcf\u4e2a\u96c6\u5408\u7684\u5230\u671f\u5217\u662f\u4e00\u4e2a\u5b9e\u9645\u7684\u666e\u901a\u5217\uff0c\u60a8\u53ef\u4ee5\u67e5\u8be2\u751a\u81f3\u66f4\u65b0\u5b83\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u67e5\u8be2\u5e76\u6709\u6761\u7406\u5730\u66f4\u65b0\u5230\u671f\u5217\u3002\u793a\u4f8b\u52a0\u8f7d\u65f6\u95f4\uff0c\u6dfb\u52a0\u4e00\u5c0f\u65f6\u5e76\u66f4\u65b0\u5b83\uff0c\u4f46\u5728\u7ec3\u4e60\u4e2d\uff0c\u5982\u679c\u8981\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u5219\u5e94\u4f7f\u7528\u53ef\u4ee5\u539f\u5b50\u6267\u884c\u7684Add\uff08\uff09\u65b9\u6cd5\u3002\n \u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{RETURN TXN\u3002\u8303\u56f4\uff08\uff06\uff0334; expire\uff06\uff0334; func\uff08v\u5217\uff09bool {oldexpire\uff1a= time\u3002unix\uff080\uff0cv\u3002int\uff08\uff09\uff09 //\u5c06\u5230\u671f\u5230\u671f.Time.Time NewExt\uff1a= ExpiReat\u3002\u6dfb\u52a0\uff081 *\u65f6\u95f4\u3002\u5c0f\u65f6\uff09\u3002Unixnano\uff08\uff09//\u6dfb\u52a0\u4e00\u4e9b\u65f6\u95f4v\u3002\u66f4\u65b0\uff08newext\uff09return true}\uff09}\uff09\n  \u4e8b\u52a1\u5141\u8bb8\u5728\u4e24\u4e2a\u5e76\u53d1\u64cd\u4f5c\u4e4b\u95f4\u9694\u79bb\u3002\u5b9e\u9645\u4e0a\uff0c\u6240\u6709\u6279\u5904\u7406\u67e5\u8be2\u90fd\u5fc5\u987b\u901a\u8fc7\u6b64\u5e93\u4e2d\u7684\u4e8b\u52a1\u8fdb\u884c\u3002\u67e5\u8be2\u65b9\u6cd5\u9700\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u5360\u636e\u4e86\u5217\u7684\u5217\u6307\u9488\uff0c\u8be5\u6307\u9488\u5305\u542b\u652f\u6301\u67e5\u8be2\u7684\u5404\u79cd\u8f85\u52a9\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u5c1d\u8bd5\u8fed\u4ee3\u6240\u6709\u73a9\u5bb6\u5e76\u901a\u8fc7\u5c06\u5176\u8bbe\u7f6e\u4e3a10.0\u6765\u66f4\u65b0\u5b83\u4eec\u7684\u4f59\u989d\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de\uff0c\u5219\u67e5\u8be2\u65b9\u6cd5\u4f1a\u81ea\u52a8\u8c03\u7528txn.commit\uff08\uff09\uff0c\u800c\u6ca1\u6709\u4efb\u4f55\u9519\u8bef\u3002\u5728\u7ffb\u76d6\u65b9\u9762\uff0c\u5982\u679c\u63d0\u4f9b\u7684\u51fd\u6570\u8fd4\u56de\u9519\u8bef\uff0c\u5219\u67e5\u8be2\u5c06\u81ea\u52a8\u8c03\u7528txn.rollback\uff08\uff09\uff0c\u56e0\u6b64\u5c06\u5e94\u7528\u4efb\u4f55\u66f4\u6539\u3002\n //\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09//\u5426\u9519\u8bef\uff0ctxn.commit\uff08\uff09\u5c06\u88ab\u79f0\u4e3areturn nil}\uff09\n \u73b0\u5728\uff0c\u5728\u6b64\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u66f4\u65b0\u4f59\u989d\uff0c\u4f46\u67e5\u8be2\u56de\u8c03\u8fd4\u56de\u9519\u8bef\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5747\u672a\u5728\u5e95\u5c42\u96c6\u5408\u4e2d\u53cd\u6620\u51fa\u66f4\u65b0\u3002 \n//\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09//\u8fd4\u56de\u9519\u8bef\uff0ctxn.rollback\uff08\uff09\u5c06\u88ab\u79f0\u4e3areturn fmt\u3002errorf\uff08\uff06\uff0334; bug\uff06\uff0334;\uff09}\uff09\n \u60a8\u53ef\u4ee5\uff08\u4f46\u662fprobablety won\uff06\uff0339; t\u9700\u8981\uff09\u624b\u52a8\u8c03\u7528comment\uff08\uff09\u6216\u6eda\u52a8\uff08\uff09\uff0c\u6839\u636e\u9700\u8981\u591a\u6b21\u3002\u8fd9\u53ef\u4ee5\u65b9\u4fbf\u5730\u8fdb\u884c\u90e8\u5206\u66f4\u65b0\uff0c\u4f46\u662f\u8c03\u7528\u5b83\u4eec\u901a\u5e38\u4f1a\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0a\u51fb\u4e2d\u7ee9\u6548\u3002\n //\u8303\u56f4\u5728\u6240\u6709\u73a9\u5bb6\u548c\u66f4\u65b0\uff08\u6210\u529f\u4e3a\u5e73\u8861\uff09\u73a9\u5bb6\u3002\u67e5\u8be2\uff08FUNC\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u8303\u56f4\uff08\uff06\uff0334;\u4f59\u989d\uff06\uff0334; func\uff08v\u5217\u3002\u6e38\u6807\uff09bool {v\u3002\u66f4\u65b0\uff0810.0\uff09//\u66f4\u65b0\uff06\uff0334;\u4f59\u989d\uff06\uff03 34;\u81f310.0\u8fd4\u56detrue}\uff09txn\u3002commit\uff08\uff09//\u624b\u52a8\u63d0\u4ea4\u6240\u6709\u66f4\u6539\u8fd4\u56denil //\u8fd9\u5c06\u518d\u6b21\u8c03\u7528txn.commit\uff08\uff09\uff0c\u4f46\u5c06\u662f\u4e00\u4e2ano-op}\uff09\n  \u6b64\u5e93\u8fd8\u652f\u6301\u5c06\u6240\u6709\u4ea4\u6613\u59cb\u7ec8\u62e8\u51fa\u7684\u6d41\u5f0f\u4f20\u8f93\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d1\u751f\u3002\u8fd9\u5141\u8bb8\u60a8\u5b9e\u73b0\u81ea\u5df1\u7684\u66f4\u6539\u6570\u636e\u6355\u83b7\uff08CDC\uff09\u4fa6\u542c\u5668\uff0c\u5c06\u6570\u636e\u6d41\u5165Kafka\u6216\u8fdc\u7a0b\u6570\u636e\u5e93\u4ee5\u8fdb\u884c\u8010\u7528\u3002\u8981\u542f\u7528\u5b83\uff0c\u60a8\u53ef\u4ee5\u7b80\u5355\u5730\u5728\u521b\u5efa\u96c6\u5408\u671f\u95f4\u63d0\u4f9bCommit.Writer\u63a5\u53e3\u7684\u5b9e\u73b0\u3002\n \u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5229\u7528Commit.Whannel\u5b9e\u73b0\u4e86Commit.Writer\uff0c\u5176\u7b80\u5355\u5730\u5c06\u63d0\u4ea4\u53d1\u5e03\u5230Go\u9891\u9053\u4e2d\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u7f13\u51b2\u7684\u901a\u9053\u5e76\u7ee7\u7eed\u4f7f\u7528\u5355\u72ec\u7684Goroutine\u6d88\u8017\u63d0\u4ea4\uff0c\u5141\u8bb8\u6211\u4eec\u5728\u5546\u5e97\u4e2d\u53d1\u751f\u65f6\u67e5\u770b\u4e8b\u52a1\u3002\n //\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u63d0\u4ea4\u7f16\u5199\u5668\uff08\u7b80\u5355\u9891\u9053\uff09\u548c\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\u7f16\u5199\u5668\uff1a= make\uff08\u63d0\u4ea4\u3002\u9891\u9053\uff0c1024\uff09\u64ad\u653e\u5668\uff1a= newCollection\uff08\u5217\u3002\u9009\u9879{writer\uff1awriter\uff0c}\uff09//\u8bfb\u53d6\u6765\u81ea\u9891\u9053\u7684\u66f4\u6539func\uff08\uff09{for commit\uff1a= writer {println\uff08\uff06\uff0334; commit\uff06\uff0334;\u63d0\u4ea4\u3002\u952e\u5165\u3002string\uff08\uff09\uff09}}\uff08\uff09// ...\u63d2\u5165\uff0c\u66f4\u65b0\u6216\u5220\u9664\n \u5728\u5355\u72ec\u7684\u5907\u6ce8\u4e0a\uff0c\u4fdd\u8bc1\u6b64\u66f4\u6539\u6d41\u662f\u4e00\u81f4\u548c\u5e8f\u5217\u5316\u7684\u3002\u8fd9\u610f\u5473\u7740\u60a8\u8fd8\u53ef\u4ee5\u590d\u5236\u5176\u4ed6\u6570\u636e\u5e93\u4e0a\u7684\u8fd9\u4e9b\u66f4\u6539\u5e76\u540c\u6b65\u4e24\u8005\u3002\u5b9e\u9645\u4e0a\uff0c\u6b64\u5e93\u8fd8\u5728\u96c6\u5408\u4e0a\u63d0\u4f9b\u5141\u8bb8\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u91cd\u64ad\uff08\uff09\u65b9\u6cd5\u3002\u5728\u4e0b\u9762\u7684\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u91cd\u64ad\uff08\uff09\u65b9\u6cd5\u4e0e\u66f4\u6539\u6d41\u4e00\u8d77\u521b\u5efa\u4e24\u4e2a\u96c6\u5408\u4e3b\u548c\u526f\u672c\u548casucronouse\u5c06\u6240\u6709\u63d0\u4ea4\u4ece\u4e3b\u5230\u526f\u672c\u590d\u5236\u5230\u526f\u672c\u3002 \n//\u521b\u5efa\u4e00\u4e2ap rimary\u96c6\u5408\u7f16\u5199\u5668\uff1a= make\uff08\u63d0\u4ea4\u3002\u9891\u9053\uff0c1024\uff09primary\uff1a=\u5217\u3002 newcollection\uff08\u4e13\u680f\u3002\u9009\u9879{writer\uff1a\uff06amp; writer\uff0c}\uff09\u4e3b\u8981\u3002\u5177\u6709\u76f8\u540c\u67b6\u6784\u526f\u672c\u7684CreateColumnSof\uff08Object\uff09//\u526f\u672c\uff1a=\u5217\u3002 newcollection\uff08\uff09\u526f\u672c\u3002 CreateColumnSof\uff08\u5bf9\u8c61\uff09// in sync go func\uff08\uff09{for change\uff1a= Range Writer {\u526f\u672c\u3002\u91cd\u64ad\uff08\u66f4\u6539\uff09}}\uff08\uff09\n  func main\uff08\uff09{//\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u67f1\u72b6\u96c6\u5408\u64ad\u653e\u5668\uff1a=\u5217\u3002 newcollection\uff08\uff09//\u4eba\u7c7b\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 createIndex\uff08\uff06\uff0334;\u4eba\u548c\uff0334 ;,\uff0334;\u8d5b\u8dd1\uff06\uff0334; func\uff08v interface {}\uff09bool {return v ==\uff06\uff0334; mages\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 CreateIndex\uff08\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff06\uff0334;\u7c7b\uff06\uff0334; func\uff08v\u63a5\u53e3{}\uff09bool {return v ==\uff06\uff0334;\u65e7\u73a9\u5bb6\u7684\u7d22\u5f15\u3002 createIndex\uff08\uff06\uff0334;\u65e7\uff06\uff0334;\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v interface {}\uff09bool {return v\u3002\uff08float64\uff09\uff06gt; = 30}\uff09//\u5c06\u9879\u76ee\u52a0\u8f7d\u5230\u52a0\u8f7d\u7684\u96c6\u5408\u4e2d\uff1a= loadfixture\uff08\uff06\uff0334; players.json\uff06\uff0334;\uff09\u73a9\u5bb6\u3002 CreateColumnSof\uff08\u52a0\u8f7d[0]\uff09\u5bf9\u4e8e_\uff0cv\uff1a= loaded {\u64ad\u653e\u5668\u3002\u63d2\u5165\uff08v\uff09} //\u8fd9\u57283\u4e2a\u4e0d\u540c\u7684\u5217\u4e0a\u6267\u884c\u5168\u626b\u63cf\uff0c\u5e76\u5c06\u5b83\u4eec\u4e0e\u6307\u5b9a\u7684\u8c13\u8bcd\u8fdb\u884c\u6bd4\u8f83\u3002\u8fd9\u4e0d\u662f\u7d22\u5f15\uff0c\u4f46\u662f\u67f1\u72b6\u626b\u63cf\u662f//\u7f13\u5b58\u53cb\u597d\u7684\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{println\uff08txn\u3002withstring\uff08\uff06\uff0334; func\uff08v string\uff09bool {return v ==\uff06\uff0334;\u4eba\u548c\uff0334;}\uff09\u3002\u6709\u4e86\uff08\uff06\uff0334;\u7c7b\uff06\uff0334;\uff0cfunc\uff08v string\uff09bool {return v ==\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;}\uff09\u3002\u7528float\uff08\uff06\uff0334;\u5e74\u9f84\uff06\uff0334; func\uff08v float64\uff09bool {\u8fd4\u56dev\uff06gt; = 30}\uff09\u3002count\uff08\uff09\uff09//\u6253\u5370\u8ba1\u6570\u8fd4\u56denil}\uff09//\u8fd9\u6267\u884c\u4e86cound\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u6574\u4e2a\u6570\u636e\u96c6\u626b\u63cf\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u9884\u6784\u5efa\u7684\u7d22\u5f15\u626b\u63cf//\u4f7f\u7528\u903b\u8f91\u548c\u64cd\u4f5c\u3002\u7ed3\u679c//\u5c06\u4e0e\u4e0a\u9762\u7684\u67e5\u8be2\u76f8\u540c\uff0c\u4f46\u67e5\u8be2\u7684\u6027\u80fd\u53d6\u51b3\u4e8e\u5e95\u5c42\u6570\u636e\u7684\u5927\u5c0f\uff0c\u66f4\u5feb\u5730\u4e3a10x-100x //\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{Println\uff08TXN\u3002\u4e0e\uff08\uff06\uff0334;\u4eba\u548c\uff0334;\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff06\uff0334;\u65e7\uff06\uff0334;\uff09\u3002count\uff08\uff09\uff09 //\u6253\u5370\u8ba1\u6570\u8fd4\u56denil}\uff09//\u76f8\u540c\u7684\u6761\u4ef6\u5982\u4e0a\u6240\u8ff0\uff0c\u4f46\u6211\u4eec\u8fd8\u9009\u62e9//\u64ad\u653e\u5668\u7684\u5b9e\u9645\u540d\u79f0\u5e76\u8fed\u4ee3\u5b83\u4eec\u3002\u73a9\u5bb6\u3002\u67e5\u8be2\uff08Func\uff08TXN *\u5217\uff09\u9519\u8bef{TXN\u3002\u4e0e\uff08\uff06\uff0334;\u4eba\u548c\uff0334;\uff06\uff0334;\u6cd5\u5e08\uff06\uff0334;\uff0c\uff06\uff0334;\u65e7\uff06\uff0334;\uff09\u3002\u8303\u200b\u200b\u56f4\uff08\uff06\uff0334;\u540d\u79f0\uff06\uff0334;\uff0cfunc\uff08v\u5217\u3002\u5149\u6807\uff09bool {println\uff08v.ring string\uff08\uff09\uff09//\u6253\u5370\u540d\u79f0\u8fd4\u56detrue}\uff09//\u5217\u9009\u62e9return nil}\uff09}\n  \u4e0b\u9762\u7684\u57fa\u51c6\u5728\u5305\u542b\u5341\u51e0\u4e2a\u5217\u7684500\u9879\u7684\u96c6\u5408\u4e0a\u8fd0\u884c\u3002\u968f\u610f\u63a2\u7d22\u57fa\u51c6\uff0c\u4f46\u6211\u5f3a\u70c8\u5efa\u8bae\u5728\u5b9e\u9645\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5\u5b83\u3002\n CPU\uff1a\u82f1\u7279\u5c14\uff08R\uff09\u6838\u5fc3\uff08TM\uff09I7-9700K CPU @ 3.60GHzBenchmarkCollection / Insert-8 5013795 239.9 NS / OP 27 B / OP 0 Allocs / OpbenchmarkCollection / Fetch-8 23730796 50.63 NS / OP 0 B / OP 0 Allocs / OpbenchMarkCollection / Scan-8 234990 4743 NS / OP 0 B / OP 0 Allocs / OpbenchmarkColection / Count-8 7965873 152.7 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Range-8 1512513 799.9 NS / OP 0 B / OP 0 Allocs / OpbenchMarkCollection / Update-AT-8 5409420 224.7 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Update-All-8 196626 6099 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Delete-8 2006052 594.9 NS / OP 0 B / OP 0 Allocs / OpbenchmarkCollection / Delete-All-8 1889685 643.2 NS / OP 0 B / OP 0 Allocs / Op\n \u5f53\u6d4b\u8bd5\u66f4\u5927\u7684\u96c6\u5408\u65f6\uff0c\u6211\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5c0f\u793a\u4f8b\uff08\u8bf7\u53c2\u9605\u793a\u4f8b\u6587\u4ef6\u5939\uff09\u5e76\u4f7f\u75282000\u4e07\u884c\u63d2\u5165\uff0c\u6bcf\u4e2a\u6761\u76ee\u90fd\u670912\u5217\uff0c\u9700\u8981\u8ba1\u7b974\u4e2a\u7d22\u5f15\uff0c\u4ee5\u53ca\u4e00\u4e9b\u67e5\u8be2\u548c\u626b\u63cf\u5468\u56f4\u7684\u626b\u63cf\u3002\n \u8fd0\u884c\u63d2\u5165\u5200\u7247\u4e3a20000000\u884c....  - \uff06gt;\u63d2\u5165\u7387\u4e3a52.8255618SRunning\u5168\u626b\u63cf\u65f6\u4ee3\uff06gt; = 30 ...  - \uff06gt;\u7ed3\u679c= 10200000-\uff06gt;\u5168\u90e8SCA.\n...... ", "note_en": "This package contains a  high-performance, columnar, in-memory storage engine that supports fast querying, update and iteration with zero-allocations and bitmap indexing.\n    The general idea is to leverage cache-friendly ways of organizing data in  structures of arrays (SoA) otherwise known &#34;columnar&#34; storage in database design. This, in turn allows us to iterate and filter over columns very efficiently. On top of that, this package also adds  bitmap indexing to the columnar storage, allowing to build filter queries using binary  and,  and not,  or and  xor (see  kelindar/bitmap with SIMD support).\n   In order to get data into the store, you&#39;ll need to first create a  Collection by calling  NewCollection() method. Each collection requires a schema, which can be either specified manually by calling  CreateColumn() multiple times or automatically inferred from an object by calling  CreateColumnsOf() function.\n In the example below we&#39;re loading some  JSON data by using  json.Unmarshal() and auto-creating colums based on the first element on the loaded slice. After this is done, we can then load our data by inserting the objects one by one into the collection. This is accomplished by calling  Insert() method on the collection itself repeatedly.\n data  :=  loadFromJson( &#34;players.json&#34;) // Create a new columnar collection players  :=  column. NewCollection() players. CreateColumnsOf( data[ 0]) // Insert every item from our loaded data for  _,  v  :=  range  data {\t players. Insert( v)}\n Now, let&#39;s say we only want specific columns to be added. We can do this by calling  CreateColumn() method on the collection manually to create the required columns.\n // Create a new columnar collection with pre-defined columns players  :=  column. NewCollection() players. CreateColumn( &#34;name&#34;,  column. ForString()) players. CreateColumn( &#34;class&#34;,  column. ForString()) players. CreateColumn( &#34;balance&#34;,  column. ForFloat64()) players. CreateColumn( &#34;age&#34;,  column. ForInt16()) // Insert every item from our loaded data for  _,  v  :=  range  loadFromJson( &#34;players.json&#34;) {\t players. Insert( v)}\n While the previous example demonstrated how to insert many objects, it was doing it one by one and is rather inefficient. This is due to the fact that each  Insert() call directly on the collection initiates a separate transacion and there&#39;s a small performance cost associated with it. If you want to do a bulk insert and insert many values, faster, that can be done by calling  Insert() on a transaction, as demonstrated in the example below. Note that the only difference is instantiating a transaction by calling the  Query() method and calling the  txn.Insert() method on the transaction instead the one on the collection.\n players. Query( func( txn  * Txn)  error {\t for  _,  v  :=  range  loadFromJson( &#34;players.json&#34;) {\t\t txn. Insert( v)\t}\t return  nil  // Commit})\n  The store allows you to query the data based on a presence of certain attributes or their values. In the example below we are querying our collection and applying a  filtering operation bu using  WithValue() method on the transaction. This method scans the values and checks whether a certain predicate evaluates to  true. In this case, we&#39;re scanning through all of the players and looking up their  class, if their class is equal to &#34;rogue&#34;, we&#39;ll take it. At the end, we&#39;re calling  Count() method that simply counts the result set.\n // This query performs a full scan of &#34;class&#34; column players. Query( func( txn  *column. Txn)  error {\t count  :=  txn. WithValue( &#34;class&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;rogue&#34;\t}). Count()\t return  nil})\n Now, what if we&#39;ll need to do this query very often? It is possible to simply  create an index with the same predicate and have this computation being applied every time (a) an object is inserted into the collection and (b) an value of the dependent column is updated. Let&#39;s look at the example below, we&#39;re fist creating a  rogue index which depends on &#34;class&#34; column. This index applies the same predicate which only returns  true if a class is &#34;rogue&#34;. We then can query this by simply calling  With() method and providing the index name.\n An index is essentially akin to a boolean column, so you could technically also select it&#39;s value when querying it. Now, in this example the query would be around  10-100x faster to execute as behind the scenes it uses  bitmap indexing for the &#34;rogue&#34; index and performs a simple logical  AND operation on two bitmaps when querying. This avoid the entire scanning and applying of a predicate during the  Query.\n // Create the index &#34;rogue&#34; in advance out. CreateIndex( &#34;rogue&#34;,  &#34;class&#34;,  func( v  interface{})  bool {\t return  v  ==  &#34;rogue&#34;}) // This returns the same result as the query before, but much faster players. Query( func( txn  *column. Txn)  error {\t count  :=  txn. With( &#34;rogue&#34;). Count()\t return  nil})\n The query can be further expanded as it allows indexed  intersection,  difference and  union operations. This allows you to ask more complex questions of a collection. In the examples below let&#39;s assume we have a bunch of indexes on the  class column and we want to ask different questions.\n First, let&#39;s try to merge two queries by applying a  Union() operation with the method named the same. Here, we first select only rogues but then merge them together with mages, resulting in selection containing both rogues and mages.\n  Next, let&#39;s count everyone who isn&#39;t a rogue, for that we can use a  Without() method which performs a difference (i.e. binary  AND NOT operation) on the collection. This will result in a count of all players in the collection except the rogues.\n  Now, you can combine all of the methods and keep building more complex queries. When querying indexed and non-indexed fields together it is important to know that as every scan will apply to only the selection, speeding up the query. So if you have a filter on a specific index that selects 50% of players and then you perform a scan on that (e.g.  WithValue()), it will only scan 50% of users and hence will be 2x faster.\n // How many rogues that are over 30 years old? players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). WithFloat( &#34;age&#34;,  func( v  float64)  bool {\t\t return  v  &gt;=  30\t}). Count()\t return  nil})\n  In all of the previous examples, we&#39;ve only been doing  Count() operation which counts the number of elements in the result set. In this section we&#39;ll look how we can iterate over the result set. In short, there&#39;s 2 main methods that allow us to do it:\n Range() method which takes in a column name as an argument and allows faster get/set of the values for that column.\n Select() method which doesn&#39;t pre-select any specific column, so it&#39;s usually a bit slower and it also does not allow any updates.\n Let&#39;s first examine the  Range() method. In the example below we select all of the rogues from our collection and print out their name by using the  Range() method and providing &#34;name&#34; column to it. The callback containing the  Cursor allows us to quickly get the value of the column by calling  String() method to retrieve a string value. It also contains methods such as  Int(),  Uint(),  Float() or more generic  Value() to pull data of different types.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t println( &#34;rogue name &#34;,  v. String())  // Prints the name\t\t return  true\t})\t return  nil})\n Now, what if you need two columns? The range only allows you to quickly select a single column, but you can still retrieve other columns by their name during the iteration. This can be accomplished by corresponding  StringAt(),  FloatAt(),  IntAt(),  UintAt() or  ValueAt() methods as shown below.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t println( &#34;rogue name &#34;,  v. String())  // Prints the name\t\t println( &#34;rogue age &#34;,  v. IntAt( &#34;age&#34;))  // Prints the age\t\t return  true\t})\t return  nil})\n On the other hand,  Select() allows you to do a read-only selection which provides a  Selector cursor. This cursor does not allow any updates, deletes or inserts and is also not pre-select any particular column. In the example below we print out names of all of the rogues using a selector.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Select( func( v column. Selector)  bool {\t\t println( &#34;rogue name &#34;,  v. StringAt( &#34;name&#34;))  // Prints the name\t\t return  true\t})\t return  nil})\n Now, what if you need to quickly delete all some of the data in the collection? In this case  DeleteAll() or  DeleteIf() methods come in handy. These methods are very fast (especially  DeleteAll()) and allow you to quickly delete the appropriate results, transactionally. In the example below we delete all of the rogues from the collection by simply selecting them in the transaction and calling the  DeleteAll() method.\n   In order to update certain items in the collection, you can simply call  Range() method and the corresponding  Cursor&#39;s  Update() or  UpdateAt() methods that allow to update a value of a certain column atomically. The updates won&#39;t be directly reflected given that the store supports transactions and only when transaction is commited, then the update will be applied to the collection. This allows for isolation and rollbacks.\n In the example below we&#39;re selecting all of the rogues and updating both their balance and age to certain values. The transaction returns  nil, hence it will be automatically committed when  Query() method returns.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t v. UpdateAt( &#34;age&#34;,  50)  // Update the &#34;age&#34; to 50\t\t return  true\t})  // Select the balance\t return  nil})\n In certain cases, you might want to atomically increment or decrement numerical values. In order to accomplish this you can use the provided  Add() or  AddAt() operations of the  Cursor or  Selector. Note that the indexes will also be updated accordingly and the predicates re-evaluated with the most up-to-date values. In the below example we&#39;re incrementing the balance of all our rogues by  500 atomically.\n players. Query( func( txn  * Txn)  error {\t txn. With( &#34;rogue&#34;). Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Add( 500.0)  // Increment the &#34;balance&#34; by 500\t\t return  true\t})\t return  nil})\n  Sometimes, it is useful to automatically delete certain rows when you do not need them anymore. In order to do this, the library automatically adds an  expire column to each new collection and starts a cleanup goroutine aynchronously that runs periodically and cleans up the expired objects. In order to set this, you can simply use  InsertWithTTL() method on the collection that allows to insert an object with a time-to-live duration defined.\n In the example below we are inserting an object to the collection and setting the time-to-live to  5 seconds from the current time. After this time, the object will be automatically evicted from the collection and its space can be reclaimed.\n players. InsertWithTTL( map[ string] interface{}{\t &#34;name&#34;:  &#34;Merlin&#34;,\t &#34;class&#34;:  &#34;mage&#34;,\t &#34;age&#34;:  55,\t &#34;balance&#34;:  500,},  5  *  time. Second)  // The time-to-live of 5 seconds\n On an interestig node, since  expire column which is automatically added to each collection is an actual normal column, you can query and even update it. In the example below we query and conditionally update the expiration column. The example loads a time, adds one hour and updates it, but in practice if you want to do it you should use  Add() method which can perform this atomically.\n players. Query( func( txn  *column. Txn)  error {\t return  txn. Range( &#34;expire&#34;,  func( v column. Cursor)  bool {\t\t oldExpire  :=  time. Unix( 0,  v. Int())  // Convert expiration to time.Time\t\t newExpire  :=  expireAt. Add( 1  *  time. Hour). UnixNano()  // Add some time\t\t v. Update( newExpire)\t\t return  true\t})})\n  Transactions allow for isolation between two concurrent operations. In fact, all of the batch queries must go through a transaction in this library. The  Query method requires a function which takes in a  column.Txn pointer which contains various helper methods that support querying. In the example below we&#39;re trying to iterate over all of the players and update their balance by setting it to  10.0. The  Query method automatically calls  txn.Commit() if the function returns without any error. On the flip side, if the provided function returns an error, the query will automatically call  txn.Rollback() so none of the changes will be applied.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t // No error, txn.Commit() will be called\t return  nil})\n Now, in this example, we try to update balance but a query callback returns an error, in which case none of the updates will be actually reflected in the underlying collection.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t // Returns an error, txn.Rollback() will be called\t return  fmt. Errorf( &#34;bug&#34;) })\n You can (but probablty won&#39;t need to) call  Commit() or  Rollback() manually, as many times as required. This could be handy to do partial updates but calling them too often will have a performance hit on your application.\n // Range over all of the players and update (successfully their balance) players. Query( func( txn  *column. Txn)  error {\t txn. Range( &#34;balance&#34;,  func( v column. Cursor)  bool {\t\t v. Update( 10.0)  // Update the &#34;balance&#34; to 10.0\t\t return  true\t})\t txn. Commit()  // Manually commit all of the changes\t return  nil  // This will call txn.Commit() again, but will be a no-op})\n  This library also supports streaming out all transaction commits consistently, as they happen. This allows you to implement your own change data capture (CDC) listeners, stream data into kafka or into a remote database for durability. In order to enable it, you can simply provide an implementation of a  commit.Writer interface during the creation of the collection.\n In the example below we take advantage of the  commit.Channel implementation of a  commit.Writer which simply publishes the commits into a go channel. Here we create a buffered channel and keep consuming the commits with a separate goroutine, allowing us to view transactions as they happen in the store.\n // Create a new commit writer (simple channel) and a new collection writer  :=  make(commit. Channel,  1024) players  :=  NewCollection(column. Options{\t Writer:  writer,}) // Read the changes from the channel go  func(){\t for  commit  :=  writer{\t\t println( &#34;commit&#34;,  commit. Type. String())\t}}() // ... insert, update or delete\n On a separate note, this change stream is guaranteed to be consistent and serialized. This means that you can also replicate those changes on another database and synchronize both. In fact, this library also provides  Replay() method on the collection that allows to do just that. In the example below we create two collections  primary and  replica and asychronously replicating all of the commits from the  primary to the  replica using the  Replay() method together with the change stream.\n // Create a p rimary collection writer  :=  make(commit. Channel,  1024) primary  :=  column. NewCollection(column. Options{\t Writer:  &amp; writer,}) primary. CreateColumnsOf( object) // Replica with the same schema replica  :=  column. NewCollection() replica. CreateColumnsOf( object) // Keep 2 collections in sync go  func() {\t for  change  :=  range  writer {\t\t replica. Replay( change)\t}}()\n  func  main(){\t // Create a new columnar collection\t players  :=  column. NewCollection()\t // index on humans\t players. CreateIndex( &#34;human&#34;,  &#34;race&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;human&#34;\t})\t // index for mages\t players. CreateIndex( &#34;mage&#34;,  &#34;class&#34;,  func( v  interface{})  bool {\t\t return  v  ==  &#34;mage&#34;\t})\t // index for old\t players. CreateIndex( &#34;old&#34;,  &#34;age&#34;,  func( v  interface{})  bool {\t\t return  v.( float64)  &gt;=  30\t})\t // Load the items into the collection\t loaded  :=  loadFixture( &#34;players.json&#34;)\t players. CreateColumnsOf( loaded[ 0])\t for  _,  v  :=  range  loaded {\t\t players. Insert( v)\t}\t // This performs a full scan on 3 different columns and compares them given the \t // specified predicates. This is not indexed, but does a columnar scan which is\t // cache-friendly.\t players. Query( func( txn  *column. Txn)  error {\t\t println( txn. WithString( &#34;race&#34;,  func( v  string)  bool {\t\t\t return  v  ==  &#34;human&#34;\t\t}). WithString( &#34;class&#34;,  func( v  string)  bool {\t\t\t return  v  ==  &#34;mage&#34;\t\t}). WithFloat( &#34;age&#34;,  func( v  float64)  bool {\t\t\t return  v  &gt;=  30\t\t}). Count())  // prints the count\t\t return  nil\t})\t // This performs a cound, but instead of scanning through the entire dataset, it scans\t // over pre-built indexes and combines them using a logical AND operation. The result\t // will be the same as the query above but the performance of the query is 10x-100x\t // faster depending on the size of the underlying data.\t players. Query( func( txn  *column. Txn)  error {\t\t println( txn. With( &#34;human&#34;,  &#34;mage&#34;,  &#34;old&#34;). Count())  // prints the count\t\t return  nil\t})\t // Same condition as above, but we also select the actual names of those \t // players and iterate through them.\t players. Query( func( txn  *column. Txn)  error {\t\t txn. With( &#34;human&#34;,  &#34;mage&#34;,  &#34;old&#34;). Range( &#34;name&#34;,  func( v column. Cursor)  bool {\t\t\t println( v. String())  // prints the name\t\t\t return  true\t\t})  // The column to select\t\t return  nil\t})}\n  The benchmarks below were ran on a collection of  500 items containing a dozen columns. Feel free to explore the benchmarks but I strongly recommend testing it on your actual dataset.\n cpu: Intel(R) Core(TM) i7-9700K CPU @ 3.60GHzBenchmarkCollection/insert-8 5013795 239.9 ns/op 27 B/op 0 allocs/opBenchmarkCollection/fetch-8 23730796 50.63 ns/op 0 B/op 0 allocs/opBenchmarkCollection/scan-8 234990 4743 ns/op 0 B/op 0 allocs/opBenchmarkCollection/count-8 7965873 152.7 ns/op 0 B/op 0 allocs/opBenchmarkCollection/range-8 1512513 799.9 ns/op 0 B/op 0 allocs/opBenchmarkCollection/update-at-8 5409420 224.7 ns/op 0 B/op 0 allocs/opBenchmarkCollection/update-all-8 196626 6099 ns/op 0 B/op 0 allocs/opBenchmarkCollection/delete-at-8 2006052 594.9 ns/op 0 B/op 0 allocs/opBenchmarkCollection/delete-all-8 1889685 643.2 ns/op 0 B/op 0 allocs/op\n When testing for larger collections, I added a small example (see  examples folder) and ran it with  20 million rows inserted, each entry has  12 columns and 4 indexes that need to be calculated, and a few queries and scans around them.\n running insert of 20000000 rows...-&gt; insert took 52.8255618srunning full scan of age &gt;= 30...-&gt; result = 10200000-&gt; full sca\n......", "posttime": "2021-06-21 18:05:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5185\u5b58,\u6027\u80fd,\u67f1\u72b6,performance,\u65b9\u6cd5", "title": "\u9ad8\u6027\u80fd\uff0c\u67f1\u72b6\uff0c\u5185\u5b58\u5b58\u50a8\uff0c\u8fdb\u5165\u4f4d\u56fe\u7d22\u5f15 ", "title_en": "High-performance, columnar, in-memory store with bitmap indexing in Go", "transed": 1, "url": "https://github.com/kelindar/column", "via": "", "real_tags": ["\u5185\u5b58", "\u6027\u80fd", "\u67f1\u72b6", "\u65b9\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1067171, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "LibleCellular\u9879\u76ee\u65e8\u5728\u4f7f\u5176\u66f4\u5bb9\u6613\u521b\u5efa4G\u8702\u7a9d\u7f51\u7edc\u5f00\u6e90\u8f6f\u4ef6\u548c\u4f4e\u6210\u672c\u8f6f\u4ef6\u5b9a\u4e49\u7684\u65e0\u7ebf\u7535\uff08SDR\uff09Hardware.Seeking\u901a\u8fc7\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u786c\u4ef6\u548c\u8f6f\u4ef6\u914d\u7f6e\u5b9e\u73b0\u8fd9\u4e00\u76ee\u6807\uff0c\u968f\u7740\u989d\u5916\u7684\u5de5\u5177\u548c\u7f16\u53f7\u4ee5\u53ca\u7528\u4e8e\u989d\u5916\u7684\u5de5\u5177\u548c\u7f16\u53f7\u53ef\u91cd\u590d\u90e8\u7f72\u3002\n LibleCellular\u5c06\u5728\u8bb8\u591a\u73b0\u6709\u5f00\u6e90\u8f6f\u4ef6\u8f6f\u4ef6\u9879\u76ee\u7684\u5de5\u4f5c\u4e2d\u6784\u5efa\uff0c\u4e0e\u8702\u7a9d\u5e73\u53f0\u672c\u8eab\u548c\u5927\u540c\u7c7b\u7684\u6d4b\u8bd5\u57fa\u7840\u67b6\u6784\u76f8\u5173\u3002\u5fc5\u8981\u989d\u5916\u7684\u7ec4\u4ef6\u5c06\u88ab\u643a\u5e26\uff0c\u4efb\u4f55\u8f6f\u4ef6\u6e90\u4ee3\u7801\u548c\u786c\u4ef6\u8bbe\u8ba1\u90fd\u53d1\u5e03\u4e86operoper\u6e90\u8bb8\u53ef\u8bc1\u3002\u91cd\u70b9\u662f\u5728\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u7684\u96c6\u6210\uff0c\u6d4b\u8bd5\uff0c\u5305\u88c5\u548c\u6587\u6863\uff0c\u91cd\u7528\u548c\u6784\u5efa\u65b9\u9762\u3002\n \u7b2c\u4e00\u4e2a\u4efb\u52a1\u662f\u653e\u7f6e\u4e00\u4e2a\u8fde\u7eed\u7684\u96c6\u6210\uff08CI\uff09\u5e73\u53f0\uff0c\u914d\u6709SDR\u57fa\u7ad9\uff0c\u6d4b\u8bd5\u8bbe\u5907\uff0cRF\u5206\u914d\u7f51\u7edc\u548cLTEMODEM\u94f6\u884c\u3002\u4e00\u65e6\u8fd0\u884c\uff0c\u7126\u8ddd\u5c31\u4f1a\u5207\u6362\u5230CellularStack\u96c6\u6210\uff0c\u5305\u88c5\u548c\u6587\u6863\u3002 ", "note_en": "The LibreCellular project aims to make it easier to create 4G cellular networkswith open source software and low cost software-defined radio (SDR) hardware.Seeking to achieve this via validated hardware and software configurations thatare subjected to rigorous testing, together with additional tooling anddocumentation for repeatable deployment.\n LibreCellular will build on the work of numerous existing open source softwareand hardware projects, related to both the cellular platform itself andassociated test infrastructure. Where necessary additional components will bedeveloped, with any software source code and hardware designs published underopen source licences. The focus is very much on integration, testing, packagingand documentation, reusing and building upon existing solutions.\n The first task is to put in place a continuous integration (CI) platform,complete with SDR base station, test equipment, RF distribution network and LTEmodem banks. Once this is operational the focus will then switch to cellularstack integration, packaging and documentation.", "posttime": "2021-06-21 18:05:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5929\u7a7a,librecellular,\u8f6f\u4ef6", "title": "\u5929\u7a7a\u3002 ", "title_en": "LibreCellular", "transed": 1, "url": "https://librecellular.org/", "via": "", "real_tags": ["\u5929\u7a7a", "\u8f6f\u4ef6"]}]