[{"category": "", "categoryclass": "", "imagename": "b995e6b8711098d47d50e81ab49789dd.png", "infoid": 1068408, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "CloudProxy\u7684\u76ee\u7684\u662f\u9690\u85cf\u4e91\u5c42\u540e\u9762\u7684\u522e\u5200IP\u3002\u5b83\u5141\u8bb8\u60a8\u4f7f\u7528\u6d41\u884c\u7684\u4e91\u63d0\u4f9b\u5546\u65cb\u8f6c\u4e00\u4e2a\u4ee3\u7406\u6c60\uff0c\u53ea\u9700\u4e00\u4e2aAPI\u4ee4\u724c\u3002\u65e0\u9700\u914d\u7f6e\u3002\n        CloudProxy\u8fc7\u5ea6\u514b\u62c9\u5e15\u6bd2\u7684\u4e3b\u8981\u4f18\u70b9\u662fCloudProxy\u53ea\u9700\u8981\u6765\u81ea\u4e91\u63d0\u4f9b\u5546\u7684API\u4ee4\u724c\u3002 CloudProxy\u81ea\u52a8\u90e8\u7f72\u5e76\u5728\u4e91\u5b9e\u4f8b\u4e0a\u914d\u7f6e\u4ee3\u7406\uff0c\u800c\u65e0\u9700\u7528\u6237\u9700\u8981\u9884\u914d\u7f6e\u6216\u590d\u5236\u56fe\u50cf\u3002\n            age_limit  - \u4ee5\u79d2\u4e3a\u5355\u4f4d\u8bbe\u7f6e\u524d\u5411\u4ee3\u7406\u7684\u5e74\u9f84\u9650\u5236\u3002\u8fbe\u5230\u5e74\u9f84\u9650\u5236\u540e\uff0c\u4ee3\u7406\u88ab\u66ff\u6362\u3002\u503c0\u7981\u7528\u8be5\u529f\u80fd\u3002\u9ed8\u8ba4\u503c\uff1a0\u3002\n    docker\u8fd0\u884c-e username =\uff06\uff0339; change_this_username\uff06\uff0339; \\ -e password =\uff06\uff0339; change_this_password\uff06\uff0339; \\ -e digitalocean_enabled = true \\ -e digitalocean_access_token =\uff06\uff0339;\u60a8\u7684\u79d8\u5bc6\u8bbf\u95ee\u952e\uff06\uff0339; \\ -IT -P 8000\uff1a8000\u8089\u7c7b/ CloudProxy\uff1a\u6700\u65b0\n \u5efa\u8bae\u4f7f\u7528\u7801\u5934\u56fe\u50cf\u6807\u8bb0\u4e3av\u7248\u672c\u3002 Laffin / CloudProxy\uff1a0.3.0-Beta\uff0c\u8bf7\u53c2\u9605\u6700\u65b0\u7248\u672c\u3002\n  CloudProxy\u5728localhost\u4e0a\u516c\u5f00API\uff1a8000\u3002\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bAPI\u68c0\u7d22\u5e26\u6709\u90e8\u7f72\u4ee3\u7406\u670d\u52a1\u5668\u7684Auth\u7684IP\u3002\u7136\u540e\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9bIP\u6765\u4ee3\u7406\u3002\n \u4f8b\u5982\uff0c\u5faa\u73af\u901a\u8fc7IPS\u8fdb\u884c\u66ff\u4ee3\u7684\u903b\u8f91\u5c06\u9700\u8981\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4f8b\u5982\uff1a \n\u5c06\u968f\u673a\u5bfc\u5165\u8bf7\u6c42\u4f5c\u4e3aRequests\uff03\u4eceCloudProxy Def Randum_Proxy\uff08\uff09\u8fd4\u56de\u4e00\u4e2a\u968f\u673a\u4ee3\u7406\u7a0b\u5e8f\uff1aIPS =\u8bf7\u6c42\u3002\u5f97\u5230\uff08\uff06\uff0334; http\uff1a// localhost\uff1a8000\uff06\uff0334;\uff09\u3002 json\uff08\uff09\u968f\u673a\u8fd4\u56de\u3002\u9009\u62e9\uff08IPS [\uff06\uff0339; IPS\uff06\uff0339;]\uff09\u4ee3\u7406= {\uff06\uff0334; http\uff06\uff0334 ;: randum_proxy\uff08\uff09\uff0c\uff06\uff0334; https\uff06\uff0334 ;: random_proxy\uff08\uff09} my_request =\u8bf7\u6c42\u3002\u83b7\u5f97\uff08\uff06\uff0334; https\uff1a//api.ipify.org&#34;\uff0c\u4ee3\u7406=\u4ee3\u7406\uff09\n   \u60a8\u53ef\u4ee5\u901a\u8fc7API\u548cUI\u7ba1\u7406CloudProxy\u3002\u60a8\u53ef\u4ee5\u8bbf\u95eehttp\uff1a// localhost / ui\u7684UI\u3002\n \u60a8\u53ef\u4ee5\u901a\u8fc7UI\u5411\u4e0a\u548c\u5411\u4e0b\u7f29\u653e\u4ee3\u7406\u5e76\u5c06\u5176\u5220\u9664\u6bcf\u4e2a\u63d0\u4f9b\u5546\u3002\n                                CloudProxy\u5728\u6bcf30\u79d2\u7684\u65f6\u95f4\u8868\u4e2d\u8fd0\u884c\uff0c\u5b83\u5c06\u68c0\u67e5\u6700\u5c0f\u7f29\u653e\u662f\u5426\u5df2\u6ee1\u8db3\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u5b83\u5c06\u90e8\u7f72\u6240\u9700\u6570\u91cf\u7684\u4ee3\u7406\u3002\u65b0\u7684\u4ee3\u7406\u4fe1\u606f\u5c06\u5728\u90e8\u7f72\u5e76\u51c6\u5907\u4f7f\u7528\u540e\u663e\u793a\u5728IP\u4e2d\u3002\n  \u8be5\u9879\u76ee\u5904\u4e8e\u65e9\u671f\u7684Alpha\uff0c\u5177\u6709\u6709\u9650\u7684\u529f\u80fd\u3002\u5c06\u6765\uff0c\u5c06\u652f\u6301\u66f4\u591a\u63d0\u4f9b\u5546\uff0c\u5c06\u5b9e\u65bd\u81ea\u52a8\u9636\u6bb5\uff0c\u5e76\u81f4\u5bcc\u4e3a\u5bcc\u6709\u7684API\uff0c\u4ee5\u5141\u8bb8\u5bf9\u4ee3\u7406\u5546\u7684\u9ed1\u540d\u5355\u548c\u56de\u6536\u3002\n   \u8d21\u732e\u662f\u4f7f\u5f00\u6e90\u793e\u533a\u6210\u4e3a\u4e00\u4e2a\u4ee4\u4eba\u60ca\u53f9\uff0c\u6fc0\u52b1\u548c\u521b\u9020\u7684\u4ee4\u4eba\u60ca\u53f9\u3002\u60a8\u6240\u505a\u7684\u4efb\u4f55\u8d21\u732e\u90fd\u975e\u5e38\u611f\u8c22\u3002 ", "note_en": "The purpose of CloudProxy is to hide your scrapers IP behind the cloud. It allows you to spin up a pool of proxies using popular cloud providers with just an API token. No configuration needed.\n        The primary advantage of CloudProxy over Scrapoxy is that CloudProxy only requires an API token from a cloud provider. CloudProxy automatically deploys and configures the proxy on the cloud instances without the user needing to preconfigure or copy an image.\n            AGE_LIMIT - set the age limit for your forward proxies in seconds. Once the age limit is reached, the proxy is replaced. A value of 0 disables the feature. Default value: 0.\n    docker run -e USERNAME=  &#39;CHANGE_THIS_USERNAME &#39; \\ -e PASSWORD=  &#39;CHANGE_THIS_PASSWORD &#39; \\ -e DIGITALOCEAN_ENABLED=True \\ -e DIGITALOCEAN_ACCESS_TOKEN=  &#39;YOUR SECRET ACCESS KEY &#39; \\ -it -p 8000:8000 laffin/cloudproxy:latest\n It is recommended to use a Docker image tagged to a version e.g.  laffin/cloudproxy:0.3.0-beta, see  releases for latest version.\n  CloudProxy exposes an API on localhost:8000. Your application can use the below API to retrieve the IPs with auth for the proxy servers deployed. Then your application can use those IPs to proxy.\n The logic to cycle through IPs for proxying will need to be in your application, for example:\n import  random import  requests  as  requests # Returns a random proxy from CloudProxy def  random_proxy():  ips  =  requests. get( &#34;http://localhost:8000&#34;). json()  return  random. choice( ips[ &#39;ips&#39;]) proxies  = { &#34;http&#34;:  random_proxy(),  &#34;https&#34;:  random_proxy()} my_request  =  requests. get( &#34;https://api.ipify.org&#34;,  proxies = proxies)\n   You can manage CloudProxy via an API and UI. You can access the UI at  http://localhost/ui.\n You can scale up and down your proxies and remove them for each provider via the UI.\n                                CloudProxy runs on a schedule of every 30 seconds, it will check if the minimum scaling has been met, if not then it will deploy the required number of proxies. The new proxy info will appear in IPs once they are deployed and ready to be used.\n  The project is at early alpha with limited features. In the future more providers will be supported, autoscaling will be implemented and a rich API to allow for blacklisting and recycling of proxies.\n   Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are  greatly appreciated.", "posttime": "2021-06-26 17:32:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9690\u85cf,hide,\u4ee3\u7406", "title": "CloudProxy  - \u9690\u85cf\u4e91\u80cc\u540e\u7684\u522e\u5200IP ", "title_en": "Cloudproxy \u2013 hide your scrapers IP behind the cloud", "transed": 1, "url": "https://github.com/claffin/cloudproxy", "via": "", "real_tags": ["\u9690\u85cf", "hide", "\u4ee3\u7406"]}, {"category": "", "categoryclass": "", "imagename": "b87673dd3d9f33462ab823fcad449b7c.jpg", "infoid": 1068407, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1999\u5e74\uff0c\u5f53\u957f\u671f\u9ebb\u7701\u7406\u5de5\u5b66\u9662\u7f57\u6069\u91cc\u7ef4\u65af\u7279\u6559\u6388\u521b\u9020\u4e86\u4e00\u4e2a\u52a0\u5bc6\u62fc\u56fe\uff0c\u4ee5\u5e86\u795d\u5b66\u6821\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5b9e\u9a8c\u5ba435\u5468\u5e74\uff0c\u4ed6\u8868\u793a\u5c06\u5728\u4efb\u4f55\u4eba\u53ef\u80fd\u89e3\u51b3\u4e4b\u524d\u518d\u8fc735\u5e74\u3002  RIVEST\u8868\u793a\uff0c\u62fc\u56fe\u9700\u898135\u5e74\u7684\u8fde\u7eed\u8ba1\u7b97\uff0c\u4ee5\u53ca\u6bcf\u5e74\u7528\u4e0b\u4e00\u4e2a\u6700\u5feb\u7684\u6a21\u578b\u5207\u6362\u6267\u884c\u5b83\u7684\u8ba1\u7b97\u673a\u3002 \u4ed6\u8bf4\u5b83\u9700\u8981\u51e0\u4e4e\u4e0d\u53ef\u60f3\u8c61\u7684\u6b65\u9aa4\u3002  \u201c\u5927\u591a\u6570\u5de5\u4f5c\u5c06\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\u771f\u6b63\u5b8c\u6210\uff0c\u4f46\u662f\uff0c\u201d\u6700\u8fd1\u51e0\u5e74\u6765\u7684\u662f\uff0c\u201c\u5f53\u65f6\u6700\u8fd1\u3002  \u4ed6\u6ca1\u60f3\u5230\u7684\u662f\u5728\u51e0\u5e74\u5185\u5b8c\u6210\u7684\u6240\u6709\u5de5\u4f5c - \u4ee5\u53ca\u5341\u5e74\u548c\u5341\u5e74\u7684\u65f6\u95f4\u8868\u3002 ", "note_en": "In 1999, when longtime MIT professor Ron Rivest created a cryptographic puzzle to celebrate the 35th anniversary of the school\u2019s Laboratory for Computer Science, he said it would be another 35 years before anyone could possibly solve it.\n Rivest said the puzzle would take 35 years of continuous computing, along with switching out the computer performing it with the next fastest model each year. He said it would require a virtually unimaginable number of steps.\n \u201cMost of the work will really be done in the last few years, however,\u201d Rivest\u00a0said at the time.\n What he didn\u2019t expect was for\u00a0 all of the work to be finished in a few years \u2014 and a decade and a half ahead of schedule.", "posttime": "2021-06-26 17:28:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7a0b\u5e8f,\u89e3\u51b3,solve,\u62fc\u56fe", "title": "\u7a0b\u5e8f\u5458\u89e3\u51b3\u4e86MIT\u768420\u5c81\u52a0\u5bc6\u62fc\u56fe ", "title_en": "Programmers solve MIT\u2019s 20-year-old cryptographic puzzle", "transed": 1, "url": "https://www.boston.com/news/local-news/2019/05/21/bernard-fabrot-mit-puzzle/", "via": "", "real_tags": ["\u7a0b\u5e8f", "\u89e3\u51b3", "solve", "\u62fc\u56fe"]}, {"category": "", "categoryclass": "", "imagename": "c381752bccaec104ff585f4c4e1fb98d.png", "infoid": 1068406, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u5bf9\u4efb\u4f55\u89c2\u770b\u4e86\u8bb8\u591a\u52a8\u4f5c\u7535\u5f71\u6216\u626e\u6f14\u804c\u8d23\u7684\u4eba\u6765\u8bf4\u662f\u4e00\u4e2a\u719f\u6089\u7684\u613f\u666f\uff1a\u4e00\u4e2a\u4f7f\u4e0d\u53ef\u89c1\u7269\u4f53\u53ef\u89c1\u7684\u5e7d\u7075\u822c\u7684\u7eff\u8272\u56fe\u50cf\u3002\u81ea20\u4e16\u7eaa60\u5e74\u4ee3\u4e2d\u671f\u5f00\u53d1\u7b2c\u4e00\u591c\u89c6\u8bbe\u5907\u4ee5\u6765\uff0c\u8be5\u6280\u672f\u5df2\u6355\u83b7\u4e86\u6d41\u884c\u7684\u60f3\u8c61\u529b\u3002\n \u591c\u89c6\u62a4\u76ee\u955c\uff0c\u7ea2\u5916\u6444\u50cf\u673a\u548c\u5176\u4ed6\u7c7b\u4f3c\u7684\u8bbe\u5907\u68c0\u6d4b\u4ece\u7269\u4f53\u53cd\u5c04\u7684\u7ea2\u5916\u5149\u6216\u8005\u4ee5\u70ed\u91cf\u7684\u5f62\u5f0f\u68c0\u6d4b\u4ece\u7269\u4f53\u53d1\u51fa\u7684\u7ea2\u5916\u5149\u3002\u4eca\u5929\uff0c\u8fd9\u4e9b\u8bbe\u5907\u4e0d\u4ec5\u7531\u519b\u961f\u800c\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4e5f\u662f\u7531\u6267\u6cd5\u548c\u7d27\u6025\u670d\u52a1\uff0c\u5b89\u5168\u548c\u76d1\u7763\u884c\u4e1a\uff0c\u91ce\u751f\u52a8\u7269\u730e\u4eba\u548c\u9732\u8425\u7231\u597d\u8005\u7684\u7231\u597d\u8005\u3002\n \u4f46\u76ee\u524d\u7684\u6280\u672f\u5e76\u975e\u6ca1\u6709\u95ee\u9898\u3002\u5546\u7528\u7ea2\u5916\u76f8\u673a\u963b\u6321\u53ef\u89c1\u5149\uff0c\u6270\u4e71\u6b63\u5e38\u89c6\u89c9\u3002\u9f7f\u8f6e\u5e9e\u5927\u548c\u91cd\uff0c\u9700\u8981\u4f4e\u6e29 - \u5e76\u4e14\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5373\u4f7f\u662f\u4f4e\u6e29\u51b7\u5374 - \u5de5\u4f5c\u3002\n  \u6211\u4eec\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u6280\u672f\uff0c\u8be5\u6280\u672f\u91c7\u7528\u8d85\u8584\u5c42\u7684\u7eb3\u7c73\u6676\u4f53\u6765\u4f7f\u7ea2\u5916\u5149\u53ef\u89c1\uff0c\u89e3\u51b3\u4e86\u5f53\u524d\u8bbe\u5907\u7684\u8bb8\u591a\u957f\u671f\u5b58\u5728\u7684\u95ee\u9898\u3002\u6211\u4eec\u7684\u7814\u7a76\u53d1\u8868\u4e8e\u5148\u8fdb\u7684\u5149\u5b50\u5b66\u3002\n  \u6211\u4eec\u7684\u6700\u7ec8\u76ee\u6807\u662f\u751f\u4ea7\u4e00\u79cd\u706f\uff0c\u53ef\u4ee5\u5750\u5728\u773c\u955c\u6216\u5176\u4ed6\u955c\u7247\u4e0a\uff0c\u7531\u5fae\u5c0f\u7684\u5185\u7f6e\u6fc0\u5149\u5668\u63d0\u4f9b\u52a8\u529b\uff0c\u8ba9\u4eba\u4eec\u5728\u9ed1\u6697\u4e2d\u770b\u5230\u3002\n  \u5546\u7528\u7ea2\u5916\u6444\u50cf\u673a\u5c06\u7ea2\u5916\u5149\u8f6c\u6362\u4e3a\u7535\u4fe1\u53f7\uff0c\u7136\u540e\u5728\u663e\u793a\u5c4f\u4e0a\u663e\u793a\u3002\u7531\u4e8e\u7ea2\u5916\u5149\u7684\u80fd\u91cf\u548c\u9891\u7387\u4f4e\uff0c\u5b83\u4eec\u9700\u8981\u4f4e\u6e29\u3002\u8fd9\u4f7f\u5f97\u4f20\u7edf\u7684\u7ea2\u5916\u63a2\u6d4b\u5668\u5e9e\u5927\u548c\u91cd\u6c89\u91cd - \u4e00\u4e9b\u5b89\u5168\u4eba\u5458\u7531\u4e8e\u7ecf\u5e38\u4f7f\u7528\u591c\u89c6\u62a4\u76ee\u955c\u800c\u5bfc\u81f4\u6162\u6027\u9888\u90e8\u635f\u4f24\u3002\n \u76ee\u524d\u6280\u672f\u7684\u53e6\u4e00\u4e2a\u7f3a\u70b9\u662f\u5b83\u963b\u65ad\u4e86\u53ef\u89c1\u5149\u7684\u4f20\u8f93\uff0c\u4ece\u800c\u6270\u4e71\u6b63\u5e38\u89c6\u89c9\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5c06\u7ea2\u5916\u56fe\u50cf\u53d1\u9001\u5230\u663e\u793a\u76d1\u89c6\u5668\uff0c\u7559\u4e0b\u6b63\u5e38\u7684\u89c6\u89c9\u3002\u4f46\u662f\uff0c\u5f53\u7528\u6237\u6b63\u5728\u79fb\u52a8\u65f6\uff0c\u6b64\u89e3\u51b3\u65b9\u6848\u662f\u4e0d\u53ef\u884c\u7684\u3002 \n\u8fd8\u6709\u4e00\u4e9b\u5168\u5149\u5b66\u66ff\u4ee3\u54c1\uff0c\u4e0d\u6d89\u53ca\u7535\u4fe1\u53f7\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u76f4\u63a5\u5c06\u7ea2\u5916\u5149\u8f6c\u6362\u6210\u53ef\u89c1\u5149\u3002\u7136\u540e\u53ef\u4ee5\u901a\u8fc7\u773c\u775b\u6216\u76f8\u673a\u6355\u83b7\u53ef\u89c1\u5149\u3002\n \u8fd9\u4e9b\u6280\u672f\u901a\u8fc7\u5c06\u8fdb\u5165\u7684\u7ea2\u5916\u5149\u4e0e\u5f3a\u5149\u6e90\u7ec4\u5408 - \u4e00\u79cd\u6fc0\u5149\u675f - \u5728\u79f0\u4e3a\u201c\u975e\u7ebf\u6027\u6676\u4f53\u201d\u7684\u6750\u6599\u5185\u3002\u7136\u540e\u6676\u4f53\u5728\u53ef\u89c1\u5149\u8c31\u4e2d\u53d1\u5149\u3002\n \u7136\u800c\uff0c\u975e\u7ebf\u6027\u6676\u4f53\u5e9e\u5927\u4e14\u6602\u8d35\uff0c\u5e76\u4e14\u53ea\u80fd\u68c0\u6d4b\u5728\u7ea2\u5916\u9891\u7387\u7a84\u5e26\u4e2d\u7684\u5149\u3002\n  \u6211\u4eec\u7684\u5de5\u4f5c\u63a8\u8fdb\u4e86\u8fd9\u79cd\u5168\u5149\u5b66\u65b9\u6cd5\u3002\u6211\u4eec\u5f00\u59cb\u4f7f\u7528\u88ab\u79f0\u4e3a\u201cMetasurfaces\u201d\u7684\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u7eb3\u7c73\u6676\u4f53\u5c42\uff0c\u800c\u4e0d\u662f\u975e\u7ebf\u6027\u6676\u4f53\u3002 Metasurfaces\u662f\u8d85\u8584\u548c\u8d85\u5149\u7ebf\uff0c\u53ef\u4ee5\u8c03\u6574\u4ee5\u64cd\u7eb5\u7a7f\u8fc7\u5b83\u4eec\u7684\u5149\u7684\u989c\u8272\u6216\u9891\u7387\u3002\n \u8fd9\u4f7f\u5f97Metasurfaces\u6210\u4e3a\u5c06\u7ea2\u5916\u5149\u5b50\u8f6c\u6362\u4e3a\u53ef\u89c1\u7684\u6709\u5438\u5f15\u529b\u7684\u5e73\u53f0\u3002\u91cd\u8981\u7684\u662f\uff0c\u900f\u660e\u5143\u4ef6\u53ef\u4ee5\u4f7f\u7ea2\u5916\u6210\u50cf\u80fd\u591f\u540c\u65f6\u8fdb\u884c\u6b63\u5e38\u89c6\u89c9\u3002\n \u6211\u4eec\u7684\u5c0f\u7ec4\u65e8\u5728\u5c55\u793a\u4e0eMetasurfaces\u7684\u7ea2\u5916\u6210\u50cf\u3002\u6211\u4eec\u8bbe\u8ba1\u4e86\u7531\u6570\u767e\u4e2a\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\u7684\u5fae\u5c0f\u6676\u4f53\u5929\u7ebf\u7ec4\u6210\u7684\u5143\u8868\u9762\uff0c\u7531\u7837\u5316\u9553\u5236\u6210\u3002\n \u8fd9\u79cd\u5143\u8868\u9762\u8bbe\u8ba1\u7528\u4e8e\u901a\u8fc7\u67d0\u4e9b\u7ea2\u5916\u9891\u7387\u7684\u5171\u632f\u653e\u5927\u5149\uff0c\u4ee5\u53ca\u6fc0\u5149\u5668\u7684\u9891\u7387\u548c\u53ef\u89c1\u5149\u8f93\u51fa\u3002\u7136\u540e\u6211\u4eec\u5236\u9020\u4e86\u91d1\u5c5e\u8868\u9762\u5e76\u5c06\u5176\u8f6c\u79fb\u5230\u900f\u660e\u73bb\u7483\u4e0a\uff0c\u5728\u73bb\u7483\u8868\u9762\u4e0a\u5f62\u6210\u4e00\u5c42\u7eb3\u7c73\u6676\u4f53\u3002 \n\u4e3a\u4e86\u6d4b\u8bd5\u6211\u4eec\u7684\u5143\u66f2\u9762\uff0c\u6211\u4eec\u7528\u76ee\u6807\u7684\u7ea2\u5916\u56fe\u50cf\u7167\u4eae\u5b83\uff0c\u5e76\u770b\u5230\u7ea2\u5916\u56fe\u50cf\u88ab\u8f6c\u6362\u4e3a\u200b\u200b\u53ef\u89c1\u7684\u7eff\u8272\u56fe\u50cf\u3002\u6211\u4eec\u7528\u76ee\u6807\u7684\u5404\u79cd\u4f4d\u7f6e\u6d4b\u8bd5\u4e86\u8fd9\u4e00\u70b9\uff0c\u4e5f\u6ca1\u6709\u76ee\u6807 - \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u770b\u5230Metasurface\u672c\u8eab\u7684\u7eff\u8272\u6392\u653e\u3002\u5728\u83b7\u5f97\u7684\u56fe\u50cf\u4e2d\uff0c\u6697\u6761\u7eb9\u5bf9\u5e94\u4e8e\u7ea2\u5916\u76ee\u6807\uff0c\u88ab\u7eff\u8272\u53ef\u89c1\u53d1\u5c04\u5305\u56f4\u3002\n \u5c3d\u7ba1\u901a\u8fc7\u7ec4\u5408\u5143\u8868\u9762\u7684\u72ec\u7acb\u7eb3\u7c73\u6676\u4f53\u4e0a\u5347\u7684\u7ea2\u5916\u56fe\u50cf\u7684\u4e0d\u540c\u90e8\u5206\uff0c\u4f46\u662f\u5728\u53ef\u89c1\u5149\u4e2d\u518d\u73b0\u56fe\u50cf\u3002\n  \u867d\u7136\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u662f\u4e00\u4e2a\u6982\u5ff5\u8bc1\u660e\uff0c\u4f46\u8be5\u6280\u672f\u539f\u5219\u4e0a\u53ef\u4ee5\u505a\u5f88\u591a\u4e0d\u53ef\u80fd\u4e0e\u4f20\u7edf\u7cfb\u7edf\u4e0d\u53ef\u80fd\u7684\u4e8b\u60c5\uff0c\u4f8b\u5982\u66f4\u5e7f\u6cdb\u7684\u89c6\u89d2\u548c\u591a\u8272\u7ea2\u5916\u6210\u50cf\u3002\n  \u7531\u4e8e\u591c\u89c6\u4e4b\u5916\u7684\u5404\u79cd\u5e94\u7528\uff0c\u5bf9\u4eba\u773c\u4e0d\u53ef\u89c1\u7684\u7ea2\u5916\u5149\u7684\u9700\u6c42\u4e0d\u65ad\u589e\u957f\u3002\u8be5\u6280\u672f\u53ef\u7528\u4e8e\u519c\u4e1a\u4ea7\u4e1a\uff0c\u4ee5\u5e2e\u52a9\u76d1\u63a7\u548c\u7ef4\u6301\u98df\u54c1\u8d28\u91cf\u63a7\u5236\uff0c\u4ee5\u53caLIDAR\u7684\u9065\u611f\u6280\u672f - \u4e00\u79cd\u6709\u52a9\u4e8e\u6620\u5c04\u81ea\u7136\u548c\u4eba\u9020\u73af\u5883\u7684\u6280\u672f\u3002\n \u5728\u66f4\u5e7f\u6cdb\u7684\u80cc\u666f\u4e0b\uff0c\u4f7f\u7528Metasurfaces\u6765\u68c0\u6d4b\uff0c\u4ea7\u751f\u548c\u64cd\u7eb5\u5149\u7ebf\u84ec\u52c3\u53d1\u5c55\u3002\u5229\u7528Metasurfaces\u7684\u529b\u91cf\u5c06\u4f7f\u6211\u4eec\u66f4\u63a5\u8fd1\u5b9e\u65f6\u5168\u606f\u663e\u793a\u5668\uff0c\u81ea\u4e3b\u7cfb\u7edf\u7684\u4eba\u5de5\u89c6\u89c9\uff0c\u4ee5\u53ca\u8d85\u5feb\u901f\u7684\u57fa\u4e8eWiFi\u7684\u6280\u672f\u3002 ", "note_en": "It\u2019s a familiar vision to anyone who has watched a lot of action movies or played Call of Duty: a ghostly green image that makes invisible objects visible. Since the development of the first night-vision devices in the mid-1960s, the technology has captured the popular imagination.\n Night vision goggles, infrared cameras and other similar devices detect infrared light reflected from objects or rather detect infrared light emitted from objects in the form of heat. Today these devices are widely used not only by the military, but also by law enforcement and emergency services, the security and surveillance industries, wildlife hunters, and camping enthusiasts.\n But current technology is not without its problems. Commercial infrared cameras block visible light, disrupting normal vision. The gear is bulky and heavy, and requires low temperatures \u2014 and, in some cases, even cryogenic cooling \u2014 to work.\n  We have proposed a new technology that uses ultra-thin layers of nanocrystals to make infrared light visible, addressing many of the longstanding problems with current devices. Our research is published in  Advanced Photonics.\n  Our eventual goal is to produce a light, film-like layer that can sit on glasses or other lenses, powered by a tiny built-in laser, allowing people to see in the dark.\n  Commercial infrared cameras convert infrared light to an electric signal, which is then shown on a display screen. They require low temperatures, because of the low energy and frequency of infrared light. This makes conventional infrared detectors bulky and heavy \u2013 some security personnel have reported chronic neck injury due to  regular use of night vision goggles .\n Another drawback of the current technology is that it blocks the transmission of visible light, thereby disrupting normal vision. In some cases, infrared images could be sent to a display monitor, leaving normal vision intact. However, this solution is not feasible when users are on the move.\n     There are also some all-optical  alternatives, which do not involve electrical signals. Instead, they directly convert infrared light into visible light. The visible light can then be captured by the eye or a camera.\n These technologies work by combining incoming infrared light with a strong light source \u2013 a laser beam \u2013 inside a material known as \u201cnonlinear crystal\u201d. The crystal then emits light in the visible spectrum.\n However, nonlinear crystals are bulky and expensive, and can only detect light in a narrow band of infrared frequencies.\n  Our work advances this all-optical approach. Instead of a non-linear crystal, we set out to use carefully designed layers of nanocrystal called \u201cmetasurfaces\u201d. Metasurfaces are ultra-thin and ultra-light, and can be tweaked to manipulate the color or frequency of the light that passes through them.\n This makes metasurfaces an attractive platform to convert infrared photons to the visible. Importantly, transparent metasurfaces could enable infrared imaging and allow for normal vision at the same time.\n Our group set out to demonstrate infrared imaging with metasurfaces. We designed a metasurface composed of hundreds of incredibly tiny crystal antennas made of the semiconductor gallium arsenide.\n This metasurface was designed to amplify light by resonance at certain infrared frequencies, as well as the frequency of the laser and the visible light output. We then fabricated the metasurface and transferred it to a transparent glass, forming a layer of nanocrystals on a glass surface.\n  To test our metasurface, we illuminated it with infrared images of a target and saw that the infrared images were converted to visible green images. We tested this with various positions of the target, and also with no target at all \u2014 so we could see the green emission of the metasurface itself. In the images obtained, the dark stripes correspond to the infrared target, surrounded by the green visible emission.\n Despite different parts of the infrared images being up-converted by independent nanocrystals composing the metasurface, the images were well reproduced in visible light.\n  While our experiment is only a proof of concept, this technology can in principle do many things that are not possible with conventional systems, such as a broader angle of view and multi-colour infrared imaging.\n  The demand for detecting infrared light, invisible to human eyes, is constantly growing, due to a wide variety of applications beyond night vision. The technology could be used in the agricultural industry to help monitor and maintain food quality control, and in remote sensing techniques such as LIDAR \u2013 a technology that is helping to map natural and manmade environments.\n In a wider context, the use of metasurfaces to detect, generate and manipulate light is booming. Harnessing the power of metasurfaces will bring us closer to technologies such as real-time holographic displays, artificial vision for autonomous systems, and ultra-fast light-based wifi.", "posttime": "2021-06-26 16:41:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8584\u819c,crystal,\u7ea2\u5916", "title": "\u5fae\u578b\u6676\u4f53\u8584\u819c\u53ef\u4ee5\u8ba9\u591c\u89c6\u6210\u4e3a\u65e5\u5e38\u7684\u73b0\u5b9e ", "title_en": "Tiny crystal films could make night vision an everyday reality", "transed": 1, "url": "https://theconversation.com/seeing-the-invisible-tiny-crystal-films-could-make-night-vision-an-everyday-reality-162615", "via": "", "real_tags": ["\u8584\u819c", "crystal", "\u7ea2\u5916"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068405, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Warning: Can only detect less than 5000 characters\n\u53d1\u8868\u4e8e3\u670822\u65e5\uff0c2021 20:52 UTC\uff08Mon\uff09\u7531Cyber\u200b\u200bax\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0352523\uff09[\u94fe\u63a5]\n  \u591a\u5e74\u6765\u6211\u53d1\u73b0\u5976\u725b\u5f88\u7cdf\u7cd5\uff0c\u6700\u597d\u907f\u514d\u5b83\u4eec\u3002\n \u5982\u679c\u4f60\uff06\uff0339;\u91cd\u65b0\u6253\u7834API\u517c\u5bb9\u6027\uff0c*\u7136\u540e\u4f60\u53ef\u80fd\u53ea\u662f\u544a\u8bc9\u4eba\u4eec\u4f7f\u7528vfork\uff08\uff09\u6216posix_spawn\uff08\uff09\uff0c\u56e0\u4e3a\u90a3\u4e9b\u5df2\u7ecf\u6210\u719f\u5e76\u4e14\u5f88\u597d\u5730\u7406\u89e3\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u540e\u8005\u751a\u81f3\u662f\u4fbf\u643a\u5f0f\u7684\u3002\u987a\u4fbf\u63d0\u4e00\u4e0b\uff0c\u5728\u7814\u7a76\u8fd9\u4e00\u8bc4\u8bba\u65f6\uff0c\u6211\u5076\u7136\u53d1\u73b0\u4e86\u6765\u81ea\u514b\u9686\uff082\uff09\uff1a\uff06gt\u7684TIDBIT;\u4e0eGlibc\u5305\u88c5\u5668\u76f8\u6bd4\uff0c\u539f\u59cb\u514b\u9686\uff08\uff09\u7cfb\u7edf\u8c03\u7528\uff06gt;\u63a5\u53d7\u7a7a\u503c\u4f5c\u4e3a\u5806\u6808\u53c2\u6570\uff08\u514b\u96863\uff08\uff09\u540c\u6837\u5141\u8bb8\uff06gt; cl_args.stack\u4e3anull\uff09\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b69\u5b50\u4f7f\u7528A\uff06gt;\u7236\u6bcd\uff06\uff0339; s\u5806\u6808\u7684\u526f\u672c\u3002 \uff08\u7f16\u5199\u7f16\u5199\u7684\u8bed\u4e49\u4fdd\u8bc1\uff06gt;\u5f53\u5b69\u5b50\uff06gt\u65f6\uff0c\u5b69\u5b50\u4f1a\u5728\uff06gt;\u8fc7\u7a0b\u4fee\u6539\u5806\u6808\u65f6\u5355\u72ec\u7684\u5806\u53e0\u526f\u672c\u3002\uff09\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e\u6b63\u786e\u800cGT;\u64cd\u4f5c\uff0c\u4e0d\u5e94\u6307\u5b9aCLONE_VM\u9009\u9879\u3002 \uff08\u5982\u679c\u662f\uff06gt;\u5b69\u5b50\u56e0\u4f7f\u7528\uff06gt; clone_vm\u6807\u5fd7\u800c\u5206\u4eab\u7236\u7ea7\uff06\uff0339; s\u5185\u5b58\uff0c\u90a3\u4e48\u6ca1\u6709\u53d1\u751f\u7f16\u5199\u7684\u590d\u5236\u590d\u5236\u548c\u6df7\u4e71\u548cgt;\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u3002\uff09\u542c\u8d77\u6765\u50cf\u662f\u8fd9\u6837\u7684\u58f0\u97f3\u6253\u7535\u8bdd\u7684\u4e50\u8da3\u3002\u73b0\u5728\u6211\u60f3\u77e5\u9053\u662f\u5426\u6709\u4efb\u4f55\u5f00\u53d1\u8005\u5df2\u7ecf\u51b3\u5b9a\u4ed6\u4eec\uff06\uff0334;\u9700\u8981\uff06\uff0334;\u7ed5\u8fc7Glibc\u5e76\u5728\u6211\u7684\u4efb\u4f55\u7cfb\u7edf\u4e0a\u62c9\u8fd9\u7c7b\u6697\u793a......\uff08\u6211\u662f\u4e00\u4e2aSRE\uff0c\u6240\u4ee5\u5982\u679c\u5b83\u5728\u751f\u4ea7\u4e2d\u95ef\u5165\uff0c\u90a3\u4e48\u6211\u7684\u95ee\u9898\u662f\u6211\u7684\u95ee\u9898\u3002 \uff06\uff0334;\u5e78\u8fd0\u7684\u662f\uff0c\uff06\uff0334;\u5927\u591a\u6570\u866b\u5b50I\uff06\uff0339;\u5df2\u7ecf\u770b\u5230\u7684\u5f80\u5f80\u6bd4\u8fd9\u66f4\u9ad8\uff0c\u4f46\u5b83\u4ecd\u7136\u6709\u70b9\u53ef\u6015\uff0c\u5373\u5185\u6838\u5c06\u8ba9\u4f60\u505a\u90a3\u6837\u7684\u4e8b\u60c5\u3002 *\u8fd9\u663e\u7136\u4e0d\u4f1a\u5728\u5185\u6838\u548c\uff0339;\u4e0d\u6253\u7834\u7528\u6237\u7a7a\u95f4\u7684\u7c89\u4e1d\u5949\u732e\uff0c\u4f46\u662f\u5047\u88c5\u4e00\u4f1a\u513f\u3002\n \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021\u5e7410:08 UTC\uff08Tue\uff09\u7531Pbonzini\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0360935\uff09[\u94fe\u63a5]\n  posix_spawn\uff08\uff09\u4e0d\u662f\u5355\u4e2a\u7cfb\u7edf\u8c03\u7528\uff08\u6280\u672f\u4e0a\uff0cFork\uff08\uff09\u548cvfork\uff08\uff09\u662f\u514b\u9686\uff082\uff09\u5468\u56f4\u7684\u5305\u88c5\u5668\uff0c\u4f46\u81f3\u5c11\u540e\u8005\u662f\u5355\u4e2a\u7cfb\u7edf\u8c03\u7528\uff09\u3002\n \u80af\u5b9a\uff0c\u4f46\u5728\uff08\u8352\u8c2c\uff09\u5047\u8bbe\u6211\u4eec\uff06\uff0339;\u91cd\u65b0\u6d88\u9664\u725b\u7684\u5047\u8bbe\uff0c\u5185\u6838\u53ef\u80fd\u9700\u8981\u5ef6\u4f38\u4e0e\u7c7b\u4f3c\u4e8eFork + Exec\u7684\u80fd\u529b\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u8be5\u63a5\u53e3\u7684POSIX\u6807\u51c6\u540d\u79f0\u662fposix_spawn\u3002\n \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021 23:00 UTC\uff08Tue\uff09\u7531Cyber\u200b\u200bax\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff0352523\uff09[\u94fe\u63a5] \n\u663e\u7136\uff0c\u4eba\u4eec\u4e0d\u559c\u6b22posix_spawn\u3002\u4e5f\u8bb8\u6211\u4eec\u4f1a\u5c55\u73b0\u4e00\u4e2a\u5b8c\u6574\u7684\u66f4\u6362\uff0c\u5141\u8bb8\u521b\u5efa\u6682\u505c\u7684\u8fc7\u7a0b\uff0c\u8c03\u6574\u5176\u5c5e\u6027\uff08\u4f7f\u7528\u57fa\u4e8e\u6587\u4ef6\u53e5\u67c4\u7684API\uff09\uff0c\u7136\u540e\u6062\u590d\u5b83\u3002\u4f46\u6211\u89c9\u5f97\u6211\u4eec\u5b9e\u9645\u4e0a\u7684\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u57fa\u4e8eIO_URE\u7684API\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528BPF\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n \u6211\u4eec_almost_\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2aAPI\uff1aPtrace\u3002\u8f7b\u5fae\u7684\u95ee\u9898\u662fptrace\u771f\u7684\u5f88\u7cdf\u7cd5\u3002\u5b83\u7684\u5efa\u8bae\u4e5f\u592a\u7cdf\u7cd5\u4e86\uff0c\u6dfb\u52a0\u4e86\u57fa\u4e8eSaner\u5904\u7406\u7684\u7248\u672c\u3002\n  \u51e0\u5e74\u524d\u6211\u4eec\u8ba8\u8bba\u4e86\u8fd9\u7bc7\u8bba\u6587\uff0c\u8fd9\u4e89\u8fa9\u8bf4\uff0cFork\uff08\uff09\u57fa\u672c\u4e0a\u662f\u9519\u8bef\u7684\u539f\u59cb\u539f\u59cb\uff0c\u53ef\u4ee5\u6784\u5efaOS\u6d41\u7a0b\u7ba1\u7406\uff1ahttps://lwn.net/arlicle/785430/\n  \u53d1\u8868\u4e8e3\u670823\u65e5\uff0c2021\u5e7414:17 UTC\uff08TUE\uff09\u901a\u8fc7ABATTERS\uff08\u272d\u652f\u6301\u8005\u272d\uff0c\uff036932\uff09[\u94fe\u63a5]\n  \u6211\u6700\u8fd1\u8003\u8651\u8fc7vfork\uff08\uff09\uff0c\u4f46\u5728\u9047\u5230\u6709\u5173\u5b83\u7684\u8b66\u544a\u592a\u591a\u65f6\u6700\u7ec8\u4f1a\u53cd\u5bf9\u5b83\u3002\u4f8b\u5982\uff0c\u8bf7\u53c2\u9605Posix_spawn\uff08\uff09\u7684Vfork\uff08\uff09\u7684glibc\u5386\u53f2\uff1aglibc\uff06lt; = 2.23\uff1aposix_spawn\uff08\uff09\u4f7f\u7528vfork\uff08\uff09\u5982\u679c\u8bbe\u7f6e\u4e86posix_spawn_usevfork\uff0c\u6216\u8005\u5982\u679c\u5728IT Exec\uff083\uff09\u4e4b\u524d\u6ca1\u6709\u9884\u671f\u7684\u6e05\u9664\uff0c\u5219S\u8bf7\u6c42\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u8fd9\u79cdvfork\uff08\uff09\u7684\u5b9e\u73b0\u662f\u8bb8\u591a\u9519\u8bef\u7684\u6765\u6e90\u3002 Linux Glibc\uff06gt; = 2.24\uff1aglibc\u63d0\u4ea49ff72da471a509a8c19791fe4697910469791046979105C19791046979110POSIX_SPAWN\uff08\uff09\u4ecevfork\uff08\uff09\u4ea4\u6362\u5230\u514b\u9686\uff08\u514b\u9686_vm | clone_vfork\uff09\uff0c\u5b83\u4f7f\u7528\u5355\u72ec\u7684\u5806\u6808\u4e3a\u5b69\u5b50\u3002\u8fd9\u4fee\u590d\u4e86\u8bb8\u591avfork\uff08\uff09 - \u76f8\u5173\u7684\u9519\u8bef\uff08\uff06\uff0334;\u53ef\u80fd\u7684\u7236clobber\u5230\u671f\u5806\u6808\u6ea2\u51fa\uff06\uff0334;\uff09\uff0c\u4f7f\u5176\u53ef\u4ee5\u901a\u8fc7\u9ed8\u8ba4\u548c\u5ffd\u7565posix_spawn_usevfork\u6765\u5b9e\u73b0\u3002\u6700\u8fd1\u7684\u975eLinux Glibc Glibc\u63d0\u4ea4CCFB2964726512F6669FEA99A43AFA714E2E6A80 POSIX_SPAWN_USEVFORK\u88ab\u5ffd\u7565\uff0c\u59cb\u7ec8\u4f7f\u7528\u5e38\u89c4\u53c9\uff08\uff09\uff0c\u7531\u4e8e\u96be\u70b9vfork\uff08\uff09\u5728\u6ca1\u6709Linux\u7279\u5b9a\u7684\u514b\u9686\uff08\uff09\u8bed\u4e49\u7684\u60c5\u51b5\u4e0b\u5de5\u4f5c\u3002\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528CLONE\uff08CLONE_VM | CLONE_VFORK\uff09\u5b89\u5168\u5730\u9700\u8981\u963b\u6b62\u6240\u6709\u4fe1\u53f7\uff0c\u5305\u62ecNPTL\u5185\u90e8\u4fe1\u53f7\u3002\u4f46\u662fGlibc\u5305\u88c5\u5668Don\uff06\uff0339; t\u8ba9\u60a8\u963b\u6b62NPTL-Internal Signal\uff0c\u4f7f\u5f97\u5728Glibc\u4e4b\u5916\u66f4\u96be\u4ee5\u505a\u5230\u3002\u67e5\u770b\u6240\u6709\u8840\u8165\u7ec6\u8282\u7684Glibc\u5b9e\u73b0\u3002\n  Na\u00efve\u975e\u5185\u6838\u5f00\u53d1\u4eba\u5458\u89c6\u89d2\uff1a\u8fd9\u4f3c\u4e4e_intually_\u5c31\u50cf\u95ee\u9898\u7684\u9519\u8bef\u89e3\u51b3\u65b9\u6848\u4e00\u6837\u3002\u5b69\u5b50\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u6240\u4ee5\u80af\u5b9a\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u53ea\u8981\u5b83\u786e\u5b9e\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u5047\u88c5\u5b83\u5e76\u6ca1\u6709\u8bbf\u95ee\u8be5\u9875\u9762\u53ea\u662f\u56e0\u4e3a\u5b83\u662fmunmap\uff06\uff0339; d\u3002\u53ea\u662f\u56e0\u4e3a\u9875\u9762\u5df2\u7ecf\u662fMunmap\uff06\uff0339; d\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\uff06\uff0339; t\u4ece\u4e2d\u8bfb\u53d6\uff0c\u4e3a\u4ec0\u4e48\u9875\u8868\u8868\u5220\u9664\u4e86\uff1f\u4f46\u662f\uff0c\u6211\u5047\u8bbe\u5b83\u662f\u4e00\u4e2a\u975e\u5e38\u597d\u7684\u539f\u56e0\uff0c\u4e3a\u4ec0\u4e48\u8fd9\u6837\u505a\u4e86\u3002\u6709\u4eba\u53ef\u4ee5\u6e05\u7406\u6211\u7684\u8bef\u89e3\u5417\uff1f\n \uff06gt;\u5b69\u5b50\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u6240\u4ee5\u80af\u5b9a\u5e94\u8be5\u88ab\u6807\u8bb0\u4e3a\u8bbf\u95ee\u8be5\u9875\u9762\uff0c\u53ea\u8981\u5b83\u786e\u5b9e\u6709\u4e00\u4e2a\u5f15\u7528\uff0c\u800c\u4e0d\u662f\u5047\u88c5\u5b83\u5e76\u6ca1\u6709\u8bbf\u95ee\u8be5\u9875\u9762\u53ea\u662f\u56e0\u4e3a\u5b83\u662fmunmap\uff06\uff0339; d\u3002\u6211\u4e0d\u786e\u5b9a\u6211\u7406\u89e3\u4f60\u7684\u89c2\u70b9\uff0c\u4f46\u662f\u901a\u8fc7\u63d0\u4ea4\u6765\u963b\u6b62\u8fd9\u4e2a\u95ee\u9898\u3002\u5f53\u5b69\u5b50\u60f3\u8981\u91c7\u53d6\u989d\u5916\u7684\u53c2\u8003\uff08\u5bf9\u4e8eVMSPLICE\uff08\uff09\uff09\uff0c\u5b83\u4f1a\u83b7\u5f97\u526f\u672c\u800c\u4e0d\u662f\u4e0e\u7236\u7ea7\u5171\u4eab\u7684\u9875\u9762\u3002\u4e4b\u540e\uff0c\u5b69\u5b50\u7684\u9875\u9762\u8868\u548c\u7ba1\u9053\u70b9\u6301\u6709\u7684\u5f15\u7528\u70b9\u5bf9\u6b64\u65b0\u526f\u672c\uff0c\u4ee5\u53ca\u5bf9\u7236\u7ea7\u7684\u8bbf\u95ee\u4e22\u5931\u3002 \uff06gt;\u53ea\u662f\u56e0\u4e3a\u9875\u9762\u5df2\u7ecf\u662fMunmap\uff06\uff0339; d\u5e76\u4e0d\u610f\u5473\u7740\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\uff06\uff0339; t\u4ece\u4e2d\u8bfb\u53d6\uff0c\u4e3a\u4ec0\u4e48\u9875\u8868\u8868\u5220\u9664\u4e86\uff1f\u8fd9\u53ea\u662fMunmap\uff08\uff09\u7684\u8bed\u4e49 - \u5b83 - \u5b83\u5fc5\u987b\u8c03\u6574VMA\u6811\u548cZAP Page\u8868\u6761\u76ee\uff0c\u4ee5\u4fbf\u5728\u90a3\u91cc\u4e0d\u518d\u8868\u793aMunmapped Range\u3002\u7136\u540e\uff0c\u5982\u679c\u8be5\u8fc7\u7a0b\u5c1d\u8bd5\u8bfb\u53d6/\u5199\u5165\u8be5\u533a\u57df\u5185\u7684\u5730\u5740\uff0cIT SEGFAULTS\u3002\u6211\u4eec\u53ef\u4ee5\uff06\uff0339; t\u7559\u4e0b\u9875\u8868\u6761\u76ee\uff0c\u4ec5\u662f\u56e0\u4e3a\u53e6\u4e00\u4e2a\u5f15\u7528\u5b58\u5728\u3002\u4ece\u7ba1\u9053\u8bfb\u53d6\u5e76\u901a\u8fc7\u8fd9\u4e9b\u9875\u9762\u8868\u3002 \n\u4f5c\u4e3a\u975e\u5185\u6838\u5f00\u53d1\u4eba\u5458\uff0c\u6211\uff06\uff0339;\u597d\u5947\uff1a\u56de\u60f3\u8d77\u6765\uff0c\u8fd9\u5934\u725b\u662f\u6839\u672c\u9519\u8bef\u7684\u5417\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u6cbb\u7597VMSplice\u53c2\u8003\uff06\uff0334;\u53c2\u8003\u8d44\u6599\uff06\uff0334;\u5728Munmap\u4e4b\u540e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6237\u7a7a\u95f4\u8fc7\u7a0b\u65e0\u6cd5\u8fdb\u5165\u7684\u9875\u9762\uff0c\u540c\u65f6\u4ecd\u7136\u4fdd\u6301\u5185\u6838\uff06\uff0339; s\u5f15\u7528\uff1f\n \u539f\u5219\u662f\uff0c\u4f46\u662f\u4f60\u6709\u5176\u4ed6\u95ee\u9898\u3002\u4f8b\u5982\uff0cMMAP\u53ef\u7528\u4e8e\u5728\u56fa\u5b9a\u5730\u5740\u5904\u5206\u914d\u5185\u5b58\u3002\u96be\u4ee5\u5224\u65ad\u4efb\u4f55\u7ed9\u5b9a\u7684\u5730\u5740\u662f\u5426\u5408\u9002\uff08\u56e0\u4e3a\u5176\u4ed6\u9875\u9762\u7b49\u53ef\u80fd\u662f\u5728\u8def\u4e0a\uff09\uff0c\u4f46\u5982\u679c\u60a8\u53ea\u662f\u521a\u521a\u6620\u5c04\u5b83\uff0c\u90a3\u4e48\u5728\u540c\u4e00\u5730\u5740\u548c\u5927\u5c0f\u7684\u540e\u7eedMMAP\u4e2d\uff0c\u5b83\u5c06\u771f\u7684\u5f88\u5947\u602a\u3002\u7528\u6237\u4f69\u52e4\u53ef\u80fd\u4f1a\u5047\u8bbe\u5b83\u4e0d\u9700\u8981\u68c0\u67e5\u8be5\u6848\u4f8b\u4e2dmmap\u7684\u9519\u8bef\u4ee3\u7801\uff08\u6216\u8005\u5b83\u53ef\u80fd\u6ca1\u6709\u5408\u9002\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u547c\u53eb\u4e2d\u6b62\uff083\uff09\uff09\u3002\u56e0\u6b64\uff0c\u73b0\u5728\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u9700\u8981\u5728\u9690\u85cf\u9875\u9762\u9876\u90e8\u5806\u53e0\u5806\u53e0\u65b0\u9875\u9762\uff0c\u6216\u91cd\u65b0\u5b9a\u4f4d\u9690\u85cf\u9875\u9762\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u90fd\u662f\u4e0d\u52a8\u7684\u3002\u751a\u81f3\u6ca1\u6709\u63d0\u5230\u60a8\u9700\u8981\u6559\u5bfcVMSplice\u4ee5\u4e0ePages Do\u76f8\u540c\u7684\u65b9\u5f0f\u8ddf\u8e2aVMSplice\u4ee5\u8ddf\u8e2a\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5f15\u7528\uff0c\u800c\u6ca1\u6709\u7528\u6237\u7a7a\u95f4\u9875\u9762\u6620\u5c04\u4e2d\u5b9e\u9645\u5b58\u5728\u7684\u9875\u9762\u3002\u8fd9\u4e9b\u90fd\u662f\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b89\u5168\u95ee\u9898\uff0c\u56e0\u6b64\u89e3\u51b3\u4e86\u96be\u9898\u4e0d\u662f\u4fee\u590d\u7684\u7406\u60f3\u5f62\u5f0f\u3002\u5728\u7b80\u5355\u7684\u725b\u4f11\u606f\u4e2d\u6295\u63b7\u662f\u4e00\u79cd\u66f4\u76f4\u63a5\u7684\u89e3\u51b3\u65b9\u6848\uff08\u4f46\u662f\uff0c\u4f5c\u4e3a\u6545\u4e8b\u6697\u793a\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u5e76\u53d1\u75c7\uff0c\u4ed6\u4eec\u672a\u80fd\u89e3\u91ca\uff09\u3002\n \uff06gt;\u5982\u679c\u60a8\u53ea\u662f\u521a\u521aMunmapped\u5b83\uff0c\u5bf9\u4e8e\u540c\u4e00\u5730\u5740\u548c\u5927\u5c0f\u7684\u540e\u7eedMMAP\uff0c\u5b83\u5c06\u975e\u5e38\u5947\u602a\u3002\u7528\u6237\u4f69\u52e4\u53ef\u80fd\u4f1a\u5047\u8bbe\u5b83\u4e0d\u9700\u8981\u68c0\u67e5\u8be5\u6848\u4f8b\u4e2dmmap\u7684\u9519\u8bef\u4ee3\u7801\uff08\u6216\u8005\u5b83\u53ef\u80fd\u6ca1\u6709\u5408\u9002\u7684\u6062\u590d\u4ee3\u7801\uff0c\u5e76\u4e14\u53ea\u9700\u547c\u53eb\u4e2d\u6b62\uff083\uff09\uff09\u3002\u8fd9\u8ba9\u6211\u60f3\u8d77\u4e86\u4e00\u4e2a\u53e4\u8001\u7684\u9519\u8bef\uff1a\u5927\u7ea6\u5341\u5e74\u524d\uff0cFirefox\uff08\u4f7f\u7528Jemalloc\u7684\u4ee3\u7801\uff09\u4f1a\u5c1d\u8bd5\u505a\u4e00\u4e2a\u5927\u7684\u5bf9\u9f50\u5206\u914d\uff0c\u5982\uff06\uff0334; p = mmap\uff08null\uff0csize * 2\uff09; Munmap\uff08P\uff09; p = mmap\uff08round_up\uff08p\uff0c\u5bf9\u9f50\uff09\uff0c\u5927\u5c0f\uff09;\uff06\uff0334;\u5373\uff0c\u4f7f\u7528\u7b2c\u4e00\u4e2aMMAP + MUNMAP\u5728\u5730\u5740\u7a7a\u95f4\u4e2d\u53d1\u73b0\u8db3\u591f\u5927\u7684\u5b54\uff0c\u7136\u540e\u5728\u8be5\u5b54\u4e2d\u7684\u6b63\u786e\u5bf9\u9f50\u5730\u5740\u5904\u5206\u914d\u3002\u5982\u679c\u7b2c\u4e8c\u4e2aMMAP and\uff0339; t\u8fd4\u56de\u8bf7\u6c42\u7684\u5730\u5740\uff0c\u5fc5\u987b\u6709\u4e00\u4e2a\u7ade\u4e89\u6761\u4ef6\u4e0e\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u5728\u540c\u4e00\u4e2a\u5b54\u4e2d\uff0c\u56e0\u6b64\u5b83\u4f1a\u5faa\u73af\u5e76\u518d\u6b21\u5c1d\u8bd5\uff0c\u5e76\u5e0c\u671b\u4e0b\u6b21\u66f4\u597d\u8fd0\u6c14\u3002\u8fd9\u6b63\u5e38\u5de5\u4f5c\u597d\uff0c\u76f4\u5230\u5b83\u5728\u5185\u6838\u4e0a\u8fd0\u884c\u4e86\u968f\u673aMMAP\u7684\u5b89\u5168\u529f\u80fd\uff0c\u5e76\u5b8c\u5168\u5ffd\u7565\u4e86\u5730\u5740\u53c2\u6570\uff08\u4ece\u6280\u672f\u4e0a\u90fd\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a\u5b83\u88ab\u5b9a\u4e49\u4e3a\u53ea\u662f\u4e00\u4e2a\u63d0\u793a\uff0c\u800c\u4e0d\u662f\u8981\u6c42\uff09\uff0c\u56e0\u6b64\u4ee3\u7801\u88ab\u56f0\u5728\u65e0\u9650\u5faa\u73af\u3002\u8fd9\u662f\u56fa\u5b9a\u7684\u5e74\u9f84\uff0c\u4f46\u5b83\u786e\u5b9e\u53ef\u4ee5\u5408\u7406\u4e8e\u67d0\u4e9b\u7528\u6237\u7a7a\u95f4\u4ee3\u7801\u53ef\u80fd\u4ecd\u7136\u540c\u6837\u4e0d\u660e\u667a\u7684\u5047\u8bbe\u3002\n  PTE\u5fc5\u987b\u6d88\u5931\uff0c\u56e0\u4e3a\u90a3\u4e2a\uff06\uff0339; s\u88ab\u6307\u5b9a\u4e3adummap\uff08\uff09\u662f\u4ec0\u4e48\u3002\u6b64\u5916\uff0c\u5b83\u7684\u4e8b\u5b9e\uff06\uff0339; s t\n...... ", "note_en": "Please consider subscribing to LWN Subscriptions are the lifeblood of LWN.net. If you appreciate this content and would like to see more of it, your subscription will help to ensure that LWN continues to thrive. Please visit  this page to join up and keep LWN on the net.\n   The kernel&#39;s memory-management subsystem is built upon many concepts, oneof which is called &#34;copy on write&#34;, or &#34;COW&#34;.The idea behind COW is conceptually simple, but itsdetails are tricky and its past is troublesome. Any change to itsimplementation can have unexpected consequences and cause subtle breakagefor existing workloads. So it is somewhat surprising that last year we sawtwo major changes the kernel&#39;s COW code; less surprising is the fact that,both times, these changes had unexpected consequences and broke things. Some of the resulting problems are still not fixedtoday, almost ten months after the first change, while the original reasonfor the changes \u2014 a security vulnerability \u2014 is also not fully fixed. Readon for a description of COW, the vulnerability, and the initial fix; theconcluding article in the series will describe the complications that arosethereafter.  Copy on write is a standard mechanism for sharing a single instance of anobject between processes in a situation where each process has the illusionof an independent, private copy of that object. Examples include memorypages shared between processes or data extents shared between files. Tosee how COW is used in the memory-management subsystem, consider whathappens when a process calls  fork(): the pages in that process&#39;sprivate memory areas should no longer be shared between the parent andchild. But, instead of creating new copies of those pages for the childprocess during the  fork() call, the kernel will simply map theparent&#39;s pages in the child&#39;s page tables. Importantly, the page-tableentries in both parent and child are set as read-only (write-protected). If either process attempts to write to one of thesepages, a page fault will occur, and the kernel&#39;s page-fault handler willcreate a new copy of the page, replacing the page-table entry (PTE) in thefaulting process with a PTE that references the new page, but which allowsthe write to proceed. This action is often referred to as &#34;breakingCOW&#34;. If the other process then tries to write to that same page, anotherpage fault will occur, as that process&#39;s PTE is still marked read-only. But now thepage-fault handler will recognize that the page is no longer shared, sothe PTE can just be made writable and the process can resume. The benefits of this scheme are lower memory consumption and a reduction ofCPU time spent copying pages during  fork() calls. Often the priceof copying is never paid for many of the pages because the childmight call  exit() or  exec() before either the parent orthe child writes to those pages. While the COW mechanism looks simple, the devil is in the details, as hasbeen  shown already in the past. The recenttrouble in this area started in 2020; it resulted in two major changes whileattempting to fix a vulnerability \u2014 which is actually still not fixed in allscenarios \u2014 and resulted in many corner cases, some of which are still notfully ironed out. The first public sign of issues with the COW mechanism appeared in the form of commit 17839856fd58(&#34;gup: document and work around &#39;COW can break either way&#39;issue&#34;) at the end of May 2020. The changelog doesn&#39;t fully describe theproblem scenario, but what is there is ominous enough: End result: the get_user_pages() call might result in a page pointer that is no longer associated with the original VM, and is associated with - and controlled by - another VM having taken it over instead.\n Any doubts about whether the commit fixed a security vulnerability vanishwhen one notices the Reported-by tag mentioning Jann Horn; presumablyHorn&#39;s report went through the appropriate non-public securitychannels. The practice of making fixes to some vulnerabilities immediatelypublic without explicitly marking them as such is not new, especially inthe COW area. Nevertheless, the related  ProjectZero issue was made public in August, and CVE-2020-29374 was assignedin December; both point to the above-mentioned commit as the fix. As the Project Zero issue includes proof-of-concept (PoC) code, we can look atthe fix with that code in mind and not rely on the incomplete commit log. Themost important parts of the PoC are the following: static void *data; posix_memalign(&amp;data, 0x1000, 0x1000); strcpy(data, &#34;BORING DATA&#34;); if (fork() == 0) {\t// child\tint pipe_fds[2];\tstruct iovec iov = {.iov_base = data, .iov_len = 0x1000 };\tchar buf[0x1000];\tpipe(pipe_fds);\tvmsplice(pipe_fds[1], &amp;iov, 1, 0);\tmunmap(data, 0x1000);\tsleep(2);\tread(pipe_fds[0], buf, 0x1000);\tprintf(&#34;read string from child: %s\\n&#34;, buf); } else {\t// parent\tsleep(1);\tstrcpy(data, &#34;THIS IS SECRET&#34;); }\n The code starts by allocating an anonymous, private page and writing somedata there; it then calls  fork(). At that point, the page becomesa COW page \u2014 it is write-protected for the parent process by making thecorresponding page-table entry read-only, and for the child process anidentical PTE is created. Then, while the parent is blocked inside sleep(), the child creates a pipe and passes the page to that pipewith  vmsplice(), a system call that is similar to  write()but which allows a zero-copy data transfer of the page&#39;s contents. In orderto achieve that, the kernel takes a reference on the source page (by increasing itsreference count) through  get_user_page() or one of its variants;the set of these functions is often referred to as &#34;GUP&#34;. The child thenunmaps the page from its own page tables (but retains the reference in thepipe) and goes to sleep. The parent wakes up from its sleep and writes new data to the page. Thepage table entry is write-protected, so the write causes a page fault. Thepage-fault handler can tell that this is fault on a COW page because thethe mapping allows write access while the PTE is write protected. If therewere more processes mapping the page then the content would have to becopied (breaking COW), but if there is a single mapping, the page canbe just made writeable. The kernel relies on the value returned by  page_mapcount()to determine how many mappings exist. Here is the problem:  page_mapcount() at this point in the PoC&#39;sexecution includes only the parent&#39;s mapping, because the child has alreadycalled  munmap() on that page. This function does not take intoaccount the fact that the child can still access the parent&#39;s page throughthe pipe; it ignores the elevated page reference count. Thus, the kernel allowsthe parent process to write new data into the page, which is no longerconsidered to be a COW page. Finally, the child wakes up and reads that newdata from the pipe, which might include sensitive information that theparent did not expect the child to see. One might rightfully ask why this potential of leaking data from parent tochild can matter in practice, as both processes are normally executing thecode from the same binary and the  fork() only acts as a branch inthe code. So we can assume that, either the binary is trusted and thus thechild process is too, or it is not and then we probably should not let theparent access any sensitive data in the first place. And, in the scenariowhere  fork() from a trusted binary is followed by an exec() of a potentially malicious binary,  exec() removesall shared pages from the address space of the child process before loadingthe new binary. But, as the Project Zero issue mentions, there areenvironments, such as Android, where each process is forked from a zygoteprocess without a subsequent  exec(), for performance reasons.That could lead to a situation that looks a lot like the PoC exploit forthis bug. Moreover, the  vmsplice() syscall might just be a symptom of abroader issue, since there are many other callers of the GUP functions inthe kernel. So it is a good idea in general not to let a child processhold on to a page shared through the COW mechanism with the parent whileletting the parent write new contents to the page. To prevent exploits of this behavior,commit 17839856fd58 made it impossible to get areference (even a read-only reference) via GUP to a COW-shared page. Allsuch attempts now result in breaking COW and returning a reference to the new copy instead. Thus,in the PoC code above, calling  vmsplice() now causes the childprocess to replace the shared COW page in the corresponding page tableentry with a new page, which is then passed to the pipe. Afterward, thechild no longer has any way to access the parent&#39;s page and the newcontents written there. The commit notes the possibility of worse performance for some GUP users,especially those that rely on a lockless variant of the interface like get_user_pages_fast(). The changelog continues that finer-grainedrules could be added later for situations where it is clear that it is safe tokeep sharing the COW page because it can never be overwritten with new,potentially sensitive contents. The system-wide zero-page would be oneexample of this sort of situation. But otherwise, Linus Torvalds (theauthor of the change) expectedno fundamental issues with this aggressively COW-breaking approach forGUP. Linux 5.8 was duly released with this commit. And this, one might think, was the end of the problem. But, as wasmentioned at the outset, COW is a complicated and subtle beast. In truth,the problems were just beginning. The second half of this article willdelve into how the COW fix led to a stampede of new problems that stillhave yet to be completely solved.     ( Log in to post comments)\n  What a cliffhanger!  I certainly am glad that project zero is there to root out these bugs (pun intended).\n &#34;But, as the Project Zero issue mentions, there are environments, such as Android, where each process is forked from a zygote process without a subsequent exec(), for performance reasons. That could lead to a situation that looks a lot like the PoC exploit for this bug.&#34;\n  It&#39;s definitely a problem because it doesn&#39;t match the user&#39;s mental model of how fork() is supposed to work. It&#39;s clear that either COW must be broken in this case or a mapping must be retained (or the refcounts split into per-mm versions, which seems likely to be far more expensive). The conceptually ideal approach would have everything act just like normal data, i.e. recognise things like vmsplice references *as* references so you don&#39;t need to specially break COW early for them -- but this seems likely to be viciously complex and of only minor benefit. Of course, hunting down every single way a reference can be taken by a child and arranging to COW-break on all of them seems likely to be a nightmarish game of whack-a-mole too...\n  Posted Mar 22, 2021 20:52 UTC (Mon) by  Cyberax ( \u272d supporter \u272d, #52523) [ Link]\n  Over the years I found that COWs are just bad and it&#39;s best to avoid them altogether.\n If you&#39;re going to break API compatibility anyway,* then you might as well just tell people to use vfork() or posix_spawn(), as those are already mature and well-understood interfaces, and the latter is even portable.  Incidentally, while researching this comment, I stumbled across this tidbit from clone(2):  &gt; In contrast to the glibc wrapper, the raw clone() system call  &gt; accepts NULL as a stack argument (and clone3() likewise allows  &gt; cl_args.stack to be NULL). In this case, the child uses a  &gt; duplicate of the parent&#39;s stack. (Copy-on-write semantics ensure  &gt; that the child gets separate copies of stack pages when either  &gt; process modifies the stack.) In this case, for correct  &gt; operation, the CLONE_VM option should not be specified. (If the  &gt; child shares the parent&#39;s memory because of the use of the  &gt; CLONE_VM flag, then no copy-on-write duplication occurs and chaos  &gt; is likely to result.)  That sounds like it would be fun to debug. Now I&#39;m wondering if any developers have decided that they &#34;need to&#34; bypass glibc and pull this sort of chicanery on any of my systems... (I&#39;m an SRE, so if it broke in production, it would be my problem to fix it). &#34;Fortunately,&#34; most of the bugs I&#39;ve seen have tended to be higher-level than this, but it&#39;s still a bit frightening that the kernel will just let you do something like that.  * Which is obviously not going to happen given the kernel&#39;s fanatical devotion to not breaking userspace, but let&#39;s pretend for a moment.\n Posted Mar 23, 2021 10:08 UTC (Tue) by  pbonzini ( \u272d supporter \u272d, #60935) [ Link]\n  posix_spawn() is not a single system call (technically both fork() and vfork() are wrappers around clone(2), but at least the latter is a single system call).\n Well sure, but in the (absurd) hypothetical where we&#39;re eliminating COW, the kernel would presumably need to grow an interface with capabilities similar to fork+exec, and the POSIX standard name for that interface is posix_spawn.\n Posted Mar 23, 2021 23:00 UTC (Tue) by  Cyberax ( \u272d supporter \u272d, #52523) [ Link]\n  Apparently, people dislike posix_spawn. Perhaps we would grow a full replacement that would allow to create a suspended process, tweak its attributes (using file handle-based API) and then resume it.  But I feel what we might actually get is a io_uring-based API that does this using BPF.\n We _almost_ have that api already: ptrace.  Minor problem being that ptrace is really awful. It&#39;s too bad the proposals to add a saner handle based version have all died off.\n  A couple of years ago we discussed this paper, which argues that fork() is fundamentally the wrong primitive to build OS process management around:  https://lwn.net/Articles/785430/\n  Posted Mar 23, 2021 14:17 UTC (Tue) by  abatters ( \u272d supporter \u272d, #6932) [ Link]\n  I considered using vfork() recently, but ultimately decided against it after encountering too many warnings about it. For example, see the history of glibc using vfork() for posix_spawn():  glibc &lt;= 2.23: posix_spawn() uses vfork() if POSIX_SPAWN_USEVFORK is set or if there is no cleanup expected in the child before it exec(3)s the requested file. However, this implementation of vfork() was the source of a number of bugs.  Linux glibc &gt;= 2.24: glibc commit 9ff72da471a509a8c19791efe469f47fa6977410 posix_spawn() switches from vfork() to clone(CLONE_VM | CLONE_VFORK) which uses a separate stack for the child. This fixes a number of vfork()-related bugs (&#34;possible parent clobber due stack spilling&#34;), making it possible to enable by default and ignore POSIX_SPAWN_USEVFORK.  recent non-Linux glibc glibc commit ccfb2964726512f6669fea99a43afa714e2e6a80 POSIX_SPAWN_USEVFORK is ignored and regular fork() is always used, due to difficulties getting vfork() to work without the Linux-specific clone() semantics.  Note that using clone(CLONE_VM | CLONE_VFORK) safely requires blocking all signals, including NPTL-internal signals. But the glibc wrappers don&#39;t let you block NPTL-internal signals, making it much more difficult to do outside of glibc. See the glibc implementation for all the gory details.\n  Na\u00efve non-kernel-developer perspective: this seems _intuitively_ like the wrong solution to the problem. The child still has access to the page, so surely it should still be marked as having access to that page as long as it does indeed have a reference to it, rather than pretending it doesn&#39;t have access to the page just because it&#39;s been munmap&#39;d. Just because the page has been munmap&#39;d doesn&#39;t mean that the process can&#39;t read from it, so why is the page table entry removed? I assume there&#39;s a very good reason why it&#39;s done this way, though. Could someone clear up my misunderstanding?\n &gt; The child still has access to the page, so surely it should still be marked as having access to that page as long as it does indeed have a reference to it, rather than pretending it doesn&#39;t have access to the page just because it&#39;s been munmap&#39;d.  I&#39;m not sure I understand your point, but that problem is prevented by the commit. When the child wants to take that extra reference (for vmsplice()) it gets a copy instead of the page shared with the parent. Afterwards both the page tables of the child and the reference held by the pipe point to this new copy, and the access to parent&#39;s page is lost.  &gt; Just because the page has been munmap&#39;d doesn&#39;t mean that the process can&#39;t read from it, so why is the page table entry removed?  That&#39;s simply the semantic of munmap() - it has to adjust the VMA tree and zap page table entries so that the munmapped range is no longer represented there. Then if the process tries to read/write to an address within the area, it segfaults. We can&#39;t leave the page table entry there just because another reference exists. The read from the pipe doesn&#39;t go through these page tables.\n As a non-kernel developer, I&#39;m curious:  In retrospect, is this COW breaking fundamentally wrong? Why not treat vmsplice reference &#34;as references&#34;? Is is possible to make the page inaccessible to the userspace process after munmap while still keep the kernel&#39;s reference?\n In principle yes, but then you have other problems.  For example, mmap can be used to allocate memory at a fixed address. It can be difficult to tell whether any given address is suitable (because other pages etc. might be in the way), but if you had just munmapped it, it would be really weird for a subsequent mmap of the same address and size to fail. Userspace might assume that it doesn&#39;t need to check the error code for mmap in that case (or it might not have suitable recovery code, and just call abort(3)).  So now your solution needs to accommodate stacking a new page on top of the hidden page, or relocating the hidden page, either of which is nontrivial. That&#39;s not even mentioning the fact that you need to teach vmsplice to track per-process references in the same way as pages do, without that page actually existing in the userspace page map. These are all rather difficult problems to solve, and this is a security issue, so solving hard problems is not the ideal form of a fix. Throwing in a simple COW break is a much more straightforward solution (but, as the story alludes, there was presumably some complication which they failed to account for).\n &gt; if you had just munmapped it, it would be really weird for a subsequent mmap of the same address and size to fail. Userspace might assume that it doesn&#39;t need to check the error code for mmap in that case (or it might not have suitable recovery code, and just call abort(3)).  That reminds me of an old bug: About a decade ago, Firefox (using code from jemalloc) would try to do a large aligned allocation like &#34;p = mmap(NULL, size*2); munmap(p); p = mmap(round_up(p, alignment), size);&#34; i.e. using the first mmap+munmap to discover a large-enough hole in the address space, then allocating at a correctly-aligned address within that hole. If the second mmap didn&#39;t return the address that was requested, there must have been a race condition with another thread that allocated in the same hole, so it would loop around and try again and hope for better luck next time.  That worked okay until it ran on kernels with a security feature that randomised mmap and entirely ignored the address parameter (which is technically okay since it&#39;s defined as just a hint, not a requirement), so the code got stuck in an infinite loop.  That was fixed ages ago, but it does seem plausible that some userspace code may still make similarly unwise assumptions.\n  The PTE has to go away because that&#39;s what munmap() is specified to do. Furthermore, the fact that it&#39;s t\n......", "posttime": "2021-06-26 16:41:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u76f4\u5230,cows,vfork", "title": "\u4fee\u8865\uff0c\u76f4\u5230\u5976\u725b\u56de\u5bb6 ", "title_en": "Patching until the COWs come home", "transed": 1, "url": "https://lwn.net/Articles/849638/", "via": "", "real_tags": ["\u76f4\u5230", "cows", "vfork"]}, {"category": "", "categoryclass": "", "imagename": "f2f261ee9b23f9cbef78336888cc285f.jpg", "infoid": 1068404, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7ecf\u8fc7\u8bb8\u591a\u8d8a\u6765\u8d8a\u591a\u7684\u94f2\u5b50\u5728\u70e7\u7126\u7684\u6fb3\u5927\u5229\u4e9a\u9633\u5149\u4e0b\u7684\u6c61\u57a2\u65f6\uff0c\u8096\u6069\u5076\u50cf\u5f00\u59cb\u8ba4\u4e3a\u4ed6\u5df2\u7ecf\u4ee4\u4eba\u5c34\u5c2c\u7684\u9519\u8bef\uff0c\u5e76\u4e14\u662f - \u975e\u5e38\u5b57\u9762\u4e0a\u6316\u6398\u81ea\u5df1\u7684\u6d1e\u3002\n Doody\u662f\u5357\u4f5b\u7f57\u91cc\u8fbe\u5927\u5b66\u7684\u722c\u866b\u5b66\u5bb6\uff0c\u4ed6\u4eec\u5171\u5ea6\u7814\u7a76\u4e86\u6fb3\u5927\u5229\u4e9a\u9ec4\u8272\u6591\u70b9\u7684Goanna-A\u6355\u98df\u8005\u76d1\u89c6\u5668\u8725\u8734\uff0c\u957f\u722a\uff0c\u4e00\u4e2a\u97ad\u72b6\u7684\u5c3e\u5df4\u548c\u873f\u8712\u7684\u808c\u8089\u673a\u8eab\uff0c\u53ef\u4ee5\u8fbe\u52305\u82f1\u5c3a\u7684\u957f\u5ea6\u3002\u5b83\u7684\u8303\u56f4\u4e0e\u6b27\u6d32\u4e00\u6837\u5927\uff0c\u4f46\u542b\u6709300\u4e07\u4eba\uff0c\u6240\u4ee5\u5c3d\u7ba1\u5927\u5c0f\uff0c\u5f88\u5c11\u89c1\uff0c\u4ecd\u7136\u662f\u795e\u79d8\u7684\u3002\u76f4\u5230\u6700\u8fd1\uff0c\u4f8b\u5982\uff0c\u6ca1\u6709\u4eba\u77e5\u9053\u5b83\u5728\u54ea\u91cc\u5960\u5b9a\u4e86\u9e21\u86cb\u3002 Doody\u8c08\u5230\u4e86\u539f\u59cb\u7684\u6fb3\u5927\u5229\u4e9a\u4eba\uff0c\u4ed6\u4eec\u7ecf\u5e38\u6355\u6349\u6000\u5b55\u7684\u5973\u6027\uff0c\u9644\u8fd1\u770b\u8d77\u6765\u50cf\u6d1e\u7a74\u5165\u53e3\u3002 \u201c\u4f46\u6bcf\u6b21\u6709\u4eba\u8bd5\u56fe\u5230\u8fbe\u65f6\uff0c\u4ed6\u4eec\u90fd\u4f1a\u9760\u8fd1\u4ed6\u4eec\u7684\u80a9\u8180\u5e76\u51fb\u4e2d\u6b7b\u53bb\u7684\u7ec8\u70b9\uff0c\u201d\u4ed6\u544a\u8bc9\u6211\u3002\n \u4ed6\u57282012\u5e74\u53d1\u73b0\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u5f53\u4ed6\u548c\u56db\u4e2a\u540c\u4e8b\u6316\u5230\u4e86\u4e00\u4e2a\u52a0\u5165\u52c7\u6562\u7684\u6d1e\u7a74\u3002\u4ece\u8868\u9762\uff0c\u5728\u7a81\u7136\u505c\u6b62\u4e4b\u524d\uff0c\u96a7\u9053\u4ec5\u7565\u5fae\u5bbd\u8f83\u5bbd\u7684\u808c\u8089\u4e0b\u964d\u7ea6\u4e24\u82f1\u5c3a\u3002\u4f46\u662f\uff0c\u5f53Doody\u4ea4\u6613\u4ed6\u7684\u94f2\u5b50\u52fa\u5b50\u65f6\uff0c\u8f7b\u8f7b\u5730\u63a8\u52a8\u66b4\u9732\u7684\u6c61\u57a2\uff0c\u4ed6\u610f\u8bc6\u5230\u96a7\u9053\u7684\u672b\u7aef\u6bd4\u5176\u5899\u58c1\u7565\u5fae\u67d4\u8f6f\u3002\u8fd9\u610f\u5473\u7740\u6d1e\u7a74\u6bd4\u4f3c\u4e4e\u66f4\u6df1;\u521b\u9020\u5b83\u7684\u52a0\u6cd5\u8005\u5df2\u7ecf\u7528\u571f\u58e4\u56de\u586b\u3002\u6709\u8da3\u7684\uff0c\u505a\u7684\uff0c\u4ed6\u7684\u56e2\u961f\u6316\u5f97\u66f4\u6df1\u3002\n \u5f53\u4ed6\u4eec\u4e09\u82f1\u5c3a\u4e0b\u6765\u65f6\uff0c\u6ca1\u6709\u4efb\u4f55\u4e1c\u897f\u53ef\u4ee5\u5c55\u793a\u4ed6\u4eec\u7684\u52aa\u529b\uff0cDoody\u5f88\u56f0\u60d1\u3002\u5f53\u5927\u591a\u6570\u722c\u884c\u52a8\u7269\u57cb\u5165\u5375\u5b50\u65f6\uff0c\u5b83\u4eec\u5728\u8868\u9762\u4e0b\u9762\u5c11\u4e8e\u4e00\u82f1\u5c3a\u3002\u751a\u81f3\u5927\u6d77\u9f9f\u6316\u6398\u6d45\u5de2\u3002\u4f46\u662f\u56de\u586b\u7684Goanna Burrow\u4e00\u76f4\u5f85\u547d\u3002\u964c\u751f\u4eba\u4ecd\u7136\uff0c\u5b83\u7684\u9053\u8def\u5f00\u59cb\u626d\u66f2\uff0c\u5f00\u74f6\u5668\u4e0b\u964d\u3002 \u201c\u6211\u7684\u4f34\u4fa3\uff0c\u4e5f\u662f\u722c\u866b\u533b\u751f\uff0c\u5728\u7535\u8bdd\u4e0a\uff0c\u8bf4\uff0c\u201d\u4f60\u77e5\u9053\uff0c\u8096\u6069\uff0c\u722c\u884c\u52a8\u7269\u4e0d\u4f1a\u6df1\u6df1\u5730\u6316\u6398\uff0c\u201c\u4ed6\u544a\u8bc9\u6211\u3002 \u201c\u6211\u5f00\u59cb\u6000\u7591\u81ea\u5df1\u3002\u201d\n \u5728\u4e94\u82f1\u5c3a\u7684\u4e0b\u6765\uff0c\u5728\u6316\u6398\u7684\u7b2c\u4e8c\u5929\uff0cDoody\u5728\u4ed6\u4eec\u4e2d\u7684\u4e00\u4e2a\u4eba\u7684\u65f6\u5019\u5bf9\u4ed6\u7684\u540c\u4e8b\u4eec\u7cbe\u795e\u4e0a\u64b0\u5199\u9053\u6b49\uff0c\u4ed6\u7684\u5934\u4e0a\u8eba\u5728\u5730\u4e0a\uff0c\u4ed6\u7684\u624b\u81c2\u8737\u7f29\u5728\u87ba\u65cb\u6d1e\u7a74\uff0c\u5c16\u53eb\u7740\uff0c\u201c\u86cb\uff01\u201d Doodod\u548c\u4ed6\u7684\u56e2\u961f\u7ec8\u4e8e\u627e\u5230\u4e86\u4e00\u4e2a\u5de2\u7a74;\u4ece\u4e2d\uff0c\u4ed6\u4eec\u62d4\u51fa\u4e8610\u4e2a\u9e21\u86cb\uff0c\u5b8c\u6574\u3002\n \u4ece\u90a3\u4ee5\u540e\uff0c\u8be5\u56e2\u961f\u5206\u6790\u4e86\u51e0\u5341\u4e2aGOANNA BOUROWS\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u6709\u76f8\u540c\u7684\u7cbe\u5fc3\u5236\u4f5c\u7ed3\u6784\u3002\u51e0\u53ea\u52a8\u7269\u4e5f\u6316\u6398\uff08\u6216\u6316\u6398\uff09\u87ba\u65cb\u6316\u6d1e\uff0c\u5305\u62ec\u874e\u5b50\uff0c\u53e3\u888b\u8e29\u8e0f\u8005\uff0c\u4e00\u4e2a\u540d\u4e3a\u53e4\u4ee3\u622a\u6b62\u8005\u7684\u706d\u7edd\u6d77\u85fb\uff0c\u4ee5\u53ca\u53eb\u505a\u526f\u722c\u884c\u52a8\u7269\u7684\u54fa\u4e73\u52a8\u7269\uff0c\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u88ab\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u88ab\u79f0\u4e3aDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u662fDiictodon\uff0c\u8fd9\u4e9b\u722c\u884c\u52a8\u7269\u662fDiictodon\uff0c\u8fd9\u662f25500\u4e07\u5e74\u524d\u7684Diictodon\u3002\u4f46\u9ec4\u8272\u6591\u70b9\u7684Goanna\u7684\u5de2\u7a74\u6bd4\u6240\u6709\u8fd9\u4e9b\u751f\u7269\u7684\u5de2\u7a74\u66f4\u6df1\u5165\u5230\u5ef6\u4f38\u5230\u8868\u9762\u4e0b\u65b9\u768413\u82f1\u5c3a\u3002 \u201c\u8fd9\u662f\u4e00\u4e2a\u8352\u8c2c\u7684\u6df1\u5ea6\uff0c\u201dDoody\u544a\u8bc9\u6211\u3002\u4ed6\u8ba4\u4e3a\u9ec4\u8272\u6591\u70b9\u7684\u52a0\u6cd5\u8005\u9762\u4e34\u7740\u72ec\u7279\u7684\u6311\u6218\u3002\u5b83\u7684\u5927\u9e21\u86cb\u9700\u8981\u5728\u5b75\u5316\u524d8\u4e2a\u6708\u5b75\u80b2 - \u4e00\u4e2a\u65f6\u671f\uff0c\u901a\u8fc7\u6fb3\u5927\u5229\u4e9a\u7684\u6b8b\u9177\u65f1\u5b63\uff0c\u5f53\u65f6\u51e0\u4e2a\u6708\u53ef\u80fd\u5728\u6ca1\u6709\u4efb\u4f55\u96e8\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u3002\u5728\u6d45\u5c42\u6df1\u5ea6\uff0c\u9e21\u86cb\u4f1a\u716e\u719f\u548c\u5e72\u71e5\u3002\u53ea\u6709\u5728\u66f4\u6df1\u7684\u571f\u58e4\u4e2d\uff0c\u5b83\u4eec\u5374\u8f83\u51b7\uff0c\u6e7f\u6da6\uff0c\u5b83\u4eec\u662f\u5426\u53ef\u4ee5\u5b58\u6d3b\u3002\n  \u4e3a\u4e86\u521b\u9020\u5979\u7cbe\u5fc3\u5236\u4f5c\u7684\u6d1e\u7a74\uff0c\u4e00\u4e2a\u9884\u671f\u7684\u5973\u6027\u6b4c\u963f\u9996\u5148\u6316\u51fa\u4e24\u82f1\u5c3a\u7684\u571f\u58e4\uff0c\u5e76\u5728\u9644\u8fd1\u7684\u571f\u58a9\u4e2d\u5806\u79ef\u3002\u7136\u540e\u5979\u6709\u6548\u5730\u5411\u4e0b\u6e38\u6cf3\uff0c\u7528\u6b63\u9762\u817f\u6316\u6398\uff0c\u540c\u65f6\u5c06\u677e\u6563\u7684\u6c99\u5b50\u79fb\u52a8\u5230\u5979\u8eab\u540e\u7684\u677e\u6563\u6c99\u5b50\u4ee5\u56de\u586b\u5979\u521b\u9020\u7684\u96a7\u9053\u3002\u8fd9\u9700\u8981\u51e0\u5929\uff0c\u5728\u6b64\u671f\u95f4\uff0c\u5979\u88ab\u5305\u88f9\u5728\u571f\u58e4\u4e2d\u5e76\u88ab\u8db3\u591f\u7684\u7a7a\u6c14\u5305\u56f4\u3002 \u201c\u6211\u4eec\u5728\u8fd9\u4e2a\u884c\u4e3a\u4e2d\u627e\u5230\u4e86\u4e00\u4e2a\uff0c\u5979\u5728\u90a3\u91cc\u7559\u4e0b\u4e86\u4e00\u4e2a\u571f\u8c46\uff0c\u201dDoofy\u544a\u8bc9\u6211\u3002\u8fd9\u53ef\u80fd\u662f\u5979\u5728\u5f00\u74f6\u5668\u4e2d\u79fb\u52a8\u7684\u539f\u56e0\uff0c\u4ed6\u8865\u5145\u8bf4\uff1a\u201c\u4efb\u4f55\u6454\u5012\u7684\u6c99\u5b50\u88ab\u5979\u7684\u8eab\u4f53\u963b\u6321\u4e86\uff0c\u4e8b\u5b9e\u662f\u5979\u8f6c\u5411\u7684\u4e8b\u5b9e\u3002\u201d\u4e00\u65e6\u5979\u5230\u8fbe\u6b63\u786e\u7684\u6df1\u5ea6\uff0c\u5979\u5c31\u6316\u4e86\u4e00\u4e2a\u5f00\u653e\u5f0f\u95ed\u5408\u62f3\u7684\u5c3a\u5bf8\u3002\u5979\u6492\u4e0a\u5979\u7684\u9e21\u86cb\uff0c\u7136\u540e\u6316\u51fa\u5979\u7684\u65b9\u5f0f\uff0c\u5728\u5979\u9996\u6b21\u6df9\u6ca1\u540e\u4e03\u523010\u5929\u3002 \n\u51e0\u4e2a\u6708\u540e\uff0c\u5f53\u5a74\u513f\u9175\u6bcd\u5b75\u5316\u65f6\uff0c\u4ed6\u4eec\u5ffd\u7565\u4e86\u4ed6\u4eec\u6bcd\u4eb2\u7684\u87ba\u65cb\u6d1e\u3002\u76f8\u53cd\uff0c\u4ed6\u4eec\u81ea\u5df1\u51fa\u53bb\u4e86\uff0c\u76f4\u884c\u5411\u4e0a\u522e\u4f24\u3002 \u201c\u6d77\u9f9f\u4e0d\u5f97\u4e0d\u6316\u6398\u6f02\u4eae\uff0c\u677e\u6563\u7684\u6c99\u5b50\uff0c\u6709100\u4e2a\uff0c\u201dDoofy\u8bf4\u3002 \u201c\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u80fd\u6709\u516b\u4e2a\u5b75\u5316\u8725\u8734\u7ecf\u8fc7\u7c73\u7684\u6297\u6027\u571f\u58e4\u3002\u201d\n Goanna Burrows\u4e0d\u4f1a\u7a00\u758f\u5206\u5e03\u3002\u8bb8\u591a\u8fd9\u4e9b\u8725\u8734\u7b51\u5de2\uff0c\u521b\u9020\u4e86\u5927\u578b\u516c\u5171\u6c83\u6717\u3002\u8be5\u56e2\u961f\u66fe\u7ecf\u53d1\u73b0\u8fc7100\u591a\u4e2a\u5355\u72ec\u7684\u79bb\u5408\u5668\uff0c\u5c0f\u578b\u5ba2\u5385\u7684\u5927\u5c0f\u3002\u7814\u7a76\u4eba\u5458\u7684\u91cd\u5efa\u662f\u4e00\u4e2a\u5145\u6ee1\u7d27\u5bc6\u5305\u88c5\u7684\u7ebf\u5708\u7684\u5f39\u7c27\u5e8a\u57ab\u3002 Goannas\u5728\u5e74\u590d\u4e00\u5e74\u540e\u91cd\u590d\u4f7f\u7528\u4e86\u8fd9\u4e9b\u7f51\u7ad9\uff0c\u5e76\u4e14\u968f\u7740\u5355\u72ec\u7684\u6d1e\u7a74\u5408\u5e76\uff0c\u6298\u53e0\u548c\u4fb5\u8680\uff0c\u6c83\u4f26\u6210\u4e3a\u5145\u6ee1\u5f00\u653e\u7a7a\u95f4\u7684\u590d\u6742\u8ff7\u5bab\u3002\n \u8fd9\u4e9b\u804c\u4f4d\u7a7a\u7f3a\u957f\u671f\u4ee5\u6765\u4e0d\u4f1a\u7559\u7a7a\u3002 Doody\u7684\u56e2\u961f\u53d1\u73b0\u4e86\u4e00\u4e2a\u4e0d\u540c\u7684\u52a8\u7269\u52a8\u7269\u5e87\u62a4\u548c\u7b51\u5de2\u5728Goanna Bourrows\u4e2d\u3002\u8fd9\u4e9b\u5305\u62ec\u5176\u4ed6\u8725\u8734\uff0c\u86c7\uff0c\u874e\u5b50\uff0c\u8708\u86a3\uff0c\u7532\u58f3\u866b\uff0c\u8682\u8681\u548c\u79f0\u4e3a\u8102\u80aa\u5c3e\u7684\u5047\u7532\u7d20\u7684\u9f20\u674e\u6ce5\u6d46\u3002\u8bb8\u591a\u9752\u86d9\u901a\u8fc7\u5c06\u81ea\u5df1\u57cb\u5728\u56de\u586b\u7684\u6d1e\u7a74\u7684\u677e\u6563\u571f\u58e4\u4e2d\u5fcd\u53d7\u4e86\u65f1\u5b63\u3002 \u201c\u5f53\u6211\u4eec\u62d4\u51fa\u56de\u586b\u65f6\uff0c\u6211\u4eec\u4e00\u904d\u53c8\u4e00\u904d\u5730\u62d4\u51fa\u51e0\u4e2a\u9752\u86d9\uff0c\u201dDoody\u544a\u8bc9\u6211\u3002\u5728\u4e00\u4e2a\u6c83\u4f26\uff0c\u4ed6\u548c\u4ed6\u7684\u540c\u4e8b\u53d1\u73b0\u4e86418\u86d9\u3002 \u201c\u4f9d\u6258\u8fd9\u4e9b\u6d1e\u7a74\u7684\u5176\u4ed6\u52a8\u7269\u7684\u7eaf\u7cb9\u6570\u91cf\u548c\u5404\u79cd\u5404\u6837\u7684\u4eba\u7269\u662f\u4ee4\u4eba\u60ca\u8bb6\u7684\uff0c\u201d\u535a\u7269\u9986\u7ef4\u591a\u5229\u4e9a\u5dde\u7ef4\u591a\u5229\u4e9a\u5dde\u7684\u7b56\u5c55\u4ebaJane Melville\u544a\u8bc9\u6211\u3002\n  Goannas\u901a\u5e38\u88ab\u79f0\u4e3a\u9876\u7ea7\u6355\u98df\u8005\uff0c\u8fd9\u4e9b\u6355\u98df\u8005\u5c06\u5403\u4efb\u4f55\u4e1c\u897f\uff0c\u4ee5\u53ca\u4ed6\u4eec\u53ef\u4ee5\u7ba1\u7406\u7684\u4e00\u5207\u3002\u4f46\u662fDoodod\u7684\u5de5\u4f5c\u8868\u660e\uff0c\u4ed6\u4eec\u521b\u9020\u4e86\u548c\u200b\u200b\u6bc1\u706d\u3002\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u89c6\u4e3a\u751f\u6001\u7cfb\u7edf\u5de5\u7a0b\u5e08 - \u4ee5\u65e8\u5728\u4e3a\u4ed6\u4eec\u7684\u751f\u7269\u521b\u9020\u673a\u4f1a\u7684\u65b9\u5f0f\u6765\u4fee\u6539\u4ed6\u4eec\u7684\u73af\u5883\u3002\u6d77\u72f8\uff08\u5927\u575d\u6cb3\uff09\uff0c\u73ca\u745a\uff08\u521b\u9020\u7901\u77f3\uff09\u548c\u5544\u6728\u9e1f\uff08\u6811\u6728\u7684\u94bb\u5b54\uff09\u90fd\u662f\u751f\u6001\u7cfb\u7edf\u5de5\u7a0b\u5e08\u3002\u4f46\u9664\u4e86\u51e0\u79cd\u4e4c\u9f9f\u548c\u9f9f\uff0c\u722c\u884c\u52a8\u7269\u5f88\u5c11\u88ab\u8ba4\u4e3a\u662f\u4ed6\u4eec\u7684\u961f\u4f0d\u3002 \u201c\u6211\u8ba4\u4e3a\u8fd9\u53ef\u80fd\u662f\u7531\u4e8e\u4ed6\u4eec\u7684\u7ecf\u5e38\u6d88\u6781\u7684\u516c\u4f17\u611f\u77e5\uff0c\u201dCurtin\u5927\u5b66\u7684\u722c\u866b\u5b66\u5bb6Sophie Cross\u544a\u8bc9\u6211\u3002 \u201c\u722c\u884c\u52a8\u7269\u4e0d\u88ab\u89c6\u4e3a\u9b45\u529b\u3002\u4ed6\u4eec\u53d1\u6325\u7740\u91cd\u8981\u7684\u751f\u6001\u89d2\u8272\uff0c\u4f46\u8fd9\u4e9b\u5e76\u4e0d\u5e7f\u6cdb\u522b\u540d\u3002\u201c\n \u4f8b\u5982\uff0c\u9ec4\u8272\u5bdf\u89c9\u7684\u52a0\u5170\u65af\u5728\u5317\u5317\u90e8\u5927\u90e8\u5206\u5730\u533a\u53d1\u73b0\uff0c\u8fd9\u4f7f\u5176\u6210\u4e3a\u4e00\u4e2a\u201c\u5de8\u5927\u7684\u91cd\u8981\u6027\u201d\u7684\u5de5\u7a0b\u5e08\uff0c\u201c\u6885\u5c14\u7ef4\u5c14\u8bf4\u3002 Doody\u8ba4\u4e3a\u5176\u4ed6Goan\u200b\u200bna\u79cd\u4e5f\u91cd\u5851\u6fb3\u5927\u5229\u4e9a\u7684\u666f\u89c2\uff0c\u5305\u62ec\u8be5\u56fd\u6700\u5927\u7684\u8725\u8734 - \u516b\u82f1\u5c3a\u957f\u7684\u53d7\u9650\u3002\u4ed6\u7684\u5b66\u751fKari Soennichsen\u4e00\u76f4\u5728\u653e\u5c04\u7ebf\u8ddf\u8e2a\u8fd9\u4e9b\u52a8\u7269\uff0c\u4ee5\u4e86\u89e3\u4ed6\u4eec\u7684\u5375\u5b50\u5728\u54ea\u91cc\u4ee5\u53ca\u5982\u4f55\u541e\u566c\u4ed6\u4eec\u7684\u9e21\u86cb\u3002 \u201c\u8fd9\u4e00\u76f4\u5f88\u60b2\u60e8\uff0c\u8bd5\u56fe\u627e\u5230\u8fd9\u4e9b\u5bb6\u4f19\u7684\u5de2\u7a74\uff0c\u201dDoody\u8bf4\u3002 \u201c\u4ed6\u4eec\u662f\u79d8\u5bc6\u7684\uff0c\u4f60\u5fc5\u987b\u4e00\u76f4\u90fd\u5728\u4ed6\u4eec\u8eab\u8fb9\u3002\u201d\u53bb\u5e74\uff0c\u968f\u7740\u56e2\u961f\u6b63\u51c6\u5907\u53e6\u4e00\u4e2a\u91ce\u5916\u5b63\u8282\uff0c\u201cCovid\u771f\u7684\u8e22\u4e86\u6211\u4eec\u5728\u5c41\u80a1\u4e0a\u3002\u201d\n \u4ed6\u4eec\u4e0d\u80fd\u6c38\u8fdc\u7b49\u5f85\u3002 1935\u5e74\uff0c\u7518\u8517\u87fe\u870d\u88ab\u6beb\u4e0d\u7f9e\u4e8e\u4ecb\u7ecd\u7ed9\u6fb3\u5927\u5229\u4e9a\uff0c\u4e00\u76f4\u6162\u6162\u5730\u4f20\u64ad\u4e86\u8be5\u56fd\u7684\u5317\u90e8\u5730\u533a\uff0c\u4ed6\u4eec\u7684\u6bd2\u6027\u5206\u6ccc\u7269\u662f\u9057\u5631\u7684\u9057\u5631\uff0c\u5305\u62ec\u9ec4\u8272\u6591\u70b9\u7684\u96f7\u7eb3\u65af\u3002\u5728\u67d0\u4e9b\u5730\u533a\uff0c\u8725\u8734\u7684\u6570\u91cf\u5df2\u4e0b\u964d\u4e8690\uff05\u3002 Doody\u5f00\u59cb\u5b66\u4e60\u8fd9\u4e9b\u7269\u79cd\u6765\u5b66\u4e60\u5176\u5931\u8e2a\u7684\u540e\u679c\uff0c\u800c\u4ed6\u7684\u7b54\u6848\u6bd4\u4ed6\u9884\u671f\u7684\u66f4\u4ee4\u4eba\u60ca\u8bb6\u548c\u9677\u5165\u56f0\u5883\u3002\u968f\u7740Goannas\u6d88\u5931\uff0c\u4ed6\u4eec\u521b\u9020\u7684\u5730\u4e0b\u4e16\u754c\u4e5f\u662f\u5982\u6b64\u3002 ", "note_en": "After many futile hours of shoveling dirt under the scorching Australian sun, Sean Doody began to think that he had made an embarrassing mistake and was\u2014quite literally\u2014digging himself into a hole.\n Doody is a herpetologist from the University of South Florida who has spent years studying Australia\u2019s yellow-spotted goanna\u2014a predatory monitor lizard with long claws, a whiplike tail, and a sinuous, muscular body that can reach five feet in length. Its range is as large as Europe but contains just 3 million people, so despite the goanna\u2019s size, it is seldom seen and remains mysterious. Until recently, for example, no one knew where it laid its eggs. Doody spoke to Aboriginal Australians who would often catch pregnant females near what looked like burrow entrances. \u201cBut every time someone tried to reach in, they\u2019d get up to their shoulder and hit a dead end,\u201d he told me.\n He found the same thing in 2012, when he and four colleagues dug into a goanna burrow themselves. From the surface, a tunnel that was only slightly wider than a muscular arm descended for about two feet before abruptly stopping. But when Doody traded his shovel for a spoon and gently pushed against the exposed dirt, he realized that the tunnel\u2019s end was slightly softer than its walls. That meant the burrow was deeper than it seemed; the goanna that had created it had backfilled it with soil. Intrigued, Doody and his team dug deeper.\n By the time they were three feet down, with nothing to show for their efforts, Doody was confused. When most reptiles bury their eggs, they do so less than a foot beneath the surface. Even big sea turtles dig shallow nests. But the backfilled goanna burrow kept going. Stranger still, its path began to twist, corkscrewing as it descended. \u201cMy partner, who is also a herpetologist, was on the phone, saying, \u2018You know, Sean, reptiles don\u2019t dig that deep,\u2019\u201d he told me. \u201cI was starting to doubt myself.\u201d\n At five feet down, on the second day of digging, Doody was mentally composing an apology to his colleagues when one of them, lying flat on the ground with his head out of sight and his arm curled down the spiraling burrow, screamed out, \u201cEGGS!\u201d Doody and his team had finally found a nest; from it, they  pulled out 10 eggs, all intact.\n Since then, the team  has analyzed dozens of goanna burrows, all of which had the same elaborate structure. A few animals also dig (or dug) helical burrows, including scorpions, pocket gophers, an extinct beaver called  Palaeocastor, and a mammal-like reptile called  Diictodon that lived 255 million years ago. But the yellow-spotted goanna\u2019s nests are deeper than those of all these creatures\u2014extending as far as 13 feet below the surface. \u201cThat\u2019s a ridiculous depth,\u201d Doody told me. He thinks that the yellow-spotted goanna faces a unique challenge. Its large eggs need to incubate for 8 months before hatching\u2014a period that takes them through Australia\u2019s brutal dry season, when several months might go by without any rain. At shallow depths, the eggs would cook and desiccate. Only in deeper soil, which is cooler and wetter, can they survive.\n  To create her elaborate burrow, an expectant female goanna first digs out about two feet of soil and piles it in a nearby mound. Then she effectively swims downward, digging with her front legs while moving the loose sand behind her to backfill the tunnel she creates. This takes days, during which she is encased in soil and surrounded by just enough air to breathe. \u201cWe found one in the act, and she was lodged in there like a potato,\u201d Doody told me. This might be why she moves in a corkscrew, he added: \u201cAny sand that falls back down gets blocked by her body and the fact that she\u2019s turning.\u201d Once she reaches the right depth, she digs an open chamber the size of two clenched fists. She lays her eggs and digs her way back out, emerging seven to 10 days after she first submerged.\n  Several months later, when the baby goannas hatch, they ignore their mother\u2019s helical burrow. Instead, they punch their own way out, scratching straight upward. \u201cSea turtles have to dig through nice, loose sand, and there\u2019s 100 of them,\u201d Doody said. \u201cHere we have maybe eight hatchling lizards going through meters of resistant soil.\u201d\n The goanna burrows are not sparsely distributed. Many of these lizards nest together, creating large communal warrens.  The team once found more than 100 separate clutches in an area the size of a small living room. The researchers\u2019 reconstruction of the site looks like a spring mattress full of tightly packed coils. The goannas reuse these sites year after year, and as the separate burrows merge, collapse, and erode, the warrens become complex labyrinths full of open spaces.\n These vacancies don\u2019t stay empty for long. Doody\u2019s team has found a diverse menagerie of animals sheltering and nesting within the goanna burrows. These include other lizards, snakes, scorpions, centipedes, beetles, ants, and a mouselike marsupial called the fat-tailed false antechinus. Many frogs endure the dry season by burying themselves in the backfilled burrows\u2019 loose soil. \u201cWhen we pulled out backfill, we\u2019d pull out handfuls of frogs, over and over,\u201d Doody told me. In one warren, he and his colleagues found 418 frogs. \u201cThe sheer number and variety of other animals relying on these burrows is astounding,\u201d Jane Melville, a curator at Museums Victoria who studies reptiles and amphibians, told me.\n  Goannas are typically characterized as top predators that will eat anything and everything they can manage. But Doody\u2019s work shows that they create as well as destroy. They easily count as ecosystem engineers\u2014animals that modify their environment in ways that create opportunities for the creatures around them. Beavers (which dam rivers), corals (which create reefs), and woodpeckers (which drill holes in trees) are all ecosystem engineers. But  other than a few species of tortoise and turtle, reptiles are rarely considered among their ranks. \u201cI think this may be due to their often-negative public perception,\u201d Sophie Cross, a herpetologist at Curtin University told me. \u201cReptiles are not considered charismatic. They play important ecological roles, but these aren\u2019t widely known.\u201d\n The yellow-spotted goanna, for example, is found across much of northern Australia, which makes it an engineer with \u201ccontinent-wide importance,\u201d Melville said. Doody thinks that other goanna species also reshape Australia\u2019s landscape, including the country\u2019s largest lizard\u2014the eight-foot-long perentie. His student Kari Soennichsen has been radio-tracking these animals to find out where and how they lay their eggs. \u201cIt\u2019s been miserable trying to find nests for these guys,\u201d Doody said. \u201cThey\u2019re secretive, and you have to be on them all the time.\u201d And last year, as the team was gearing up for another field season, \u201cCOVID really kicked us in the butt.\u201d\n They can\u2019t wait forever.  Cane toads, which were ill-advisedly introduced to Australia in 1935, have been slowly spreading through the country\u2019s northern region, and their poisonous secretions are lethal to would-be predators, including yellow-spotted goannas. In some areas, the lizards\u2019 numbers have fallen by 90 percent. Doody started studying the species to learn the consequences of its disappearance, and his answer is more surprising and more galling than he could have anticipated. As the goannas vanish, so do the underground worlds they create.", "posttime": "2021-06-26 16:36:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "giant,\u521b\u9020", "title": "\u6ca1\u6709\u4eba\u60f3\u8c61\u7684\u5de8\u578b\u8725\u8734\u5de2\u4f1a\u662f\u8fd9\u79cd\u5947\u602a\u7684 ", "title_en": "No One Imagined Giant Lizard Nests Would Be This Weird", "transed": 1, "url": "https://www.theatlantic.com/science/archive/2021/06/monitor-lizards-australia-dig-incredible-corkscrew-nests/619294/", "via": "", "real_tags": ["giant", "\u521b\u9020"]}]