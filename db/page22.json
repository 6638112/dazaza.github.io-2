[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1073878, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5fae\u8f6f\u6b63\u5728\u4e3aWindows 11\u5e26\u6765\u65b0\u7684\u89e6\u6478\u624b\u52bf\u3001\u5f00\u59cb\u83dc\u5355\u6587\u4ef6\u5939\u3001\u91cd\u65b0\u8bbe\u8ba1\u7684\u4efb\u52a1\u7ba1\u7406\u5668\uff0c\u4ee5\u53ca\u66f4\u591a\u7684\u6539\u8fdb\u3002\u4eca\u5929\uff0c\u6d4b\u8bd5\u4eba\u5458\u53ef\u4ee5\u4f7f\u7528Windows 11\u7684\u65b0\u7248\u672c\uff0c\u5176\u4e2d\u5145\u6ee1\u4e86\u65b0\u529f\u80fd\uff0c\u770b\u8d77\u6765\u5b83\u4eec\u5c06\u663e\u8457\u63d0\u9ad8Windows 11\u7684\u6574\u4f53\u53ef\u7528\u6027\u3002\n\u65b0\u7684\u201c\u5f00\u59cb\u83dc\u5355\u201d\u6587\u4ef6\u5939\u5c06\u5141\u8bb8Windows 11\u7528\u6237\u5c06\u201c\u5f00\u59cb\u83dc\u5355\u201d\u7684\u56fa\u5b9a\u90e8\u5206\u81ea\u5b9a\u4e49\u4e3a\u6587\u4ef6\u5939\u3002\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5e94\u7528\u62d6\u52a8\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u4e0a\uff0c\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u5939\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u6587\u4ef6\u5939\u4e2d\u91cd\u65b0\u6392\u5217\u5e94\u7528\u5e76\u5c06\u5176\u5220\u9664\u3002\u91cd\u547d\u540d\u6587\u4ef6\u5939\u7684\u529f\u80fd\u5c06\u5728\u672a\u6765\u7684\u6d4b\u8bd5\u7248\u672c\u4e2d\u51fa\u73b0\uff0c\u4f46\u8003\u8651\u5230Windows 11\u5728\u542f\u52a8\u65f6\u6ca1\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u8c03\u6574\u83dc\u5355\u8bbe\u8ba1\uff0c\u5728\u201c\u5f00\u59cb\u201d\u83dc\u5355\u4e0a\u770b\u5230\u66f4\u591a\u7684\u5b9a\u5236\u662f\u4ef6\u597d\u4e8b\u3002\n\u5982\u679c\u4f60\u4e00\u76f4\u559c\u6b22Windows 8\u4e2d\u7684\u624b\u52bf\uff0c\u90a3\u4e48\u5fae\u8f6f\u5f88\u5feb\u5c31\u4f1a\u5728Windows 11\u4e2d\u63a8\u51fa\u4e94\u79cd\u65b0\u7684\u89e6\u6478\u624b\u52bf\uff0c\u8fd9\u5c06\u4f7f\u5e73\u677f\u7535\u8111\u7684\u4f7f\u7528\u53d8\u5f97\u66f4\u7b80\u5355\u3002\u7b2c\u4e00\u4e2a\u529f\u80fd\u662f\u5728\u4efb\u52a1\u680f\u4e0a\u5411\u4e0a\u6ed1\u52a8\u4ee5\u6253\u5f00\u201c\u5f00\u59cb\u201d\u83dc\u5355\uff0c\u5411\u4e0b\u6ed1\u52a8\u4ee5\u518d\u6b21\u5173\u95ed\u5b83\u3002\u60a8\u8fd8\u53ef\u4ee5\u5728\u201c\u5f00\u59cb\u201d\u83dc\u5355\u4e0a\u7684\u201c\u9501\u5b9a\u201d\u3001\u201c\u6240\u6709\u5e94\u7528\u201d\u548c\u201c\u63a8\u8350/\u66f4\u591a\u201d\u4e4b\u95f4\u6ed1\u52a8\u3002\n\u7b2c\u4e09\u4e2a\u65b0\u7684\u89e6\u6478\u624b\u52bf\u53ef\u4ee5\u8ba9\u4f60\u4ece\u4efb\u52a1\u680f\u53f3\u4e0b\u89d2\u6ed1\u52a8\u4ee5\u663e\u793a\u5feb\u901f\u8bbe\u7f6e\u83dc\u5355\u2014\u2014\u5982\u679c\u4f60\u9700\u8981\u5feb\u901f\u5207\u6362\u98de\u884c\u6a21\u5f0f\u6216\u8bbf\u95ee\u84dd\u7259\u8bbe\u7f6e\uff0c\u8fd9\u5f88\u6709\u7528\u3002\u542f\u52a8\u901a\u77e5\u4e2d\u5fc3\u7684\u52a8\u753b\u4e5f\u5f97\u5230\u4e86\u6539\u8fdb\uff0c\u9762\u5411\u89e6\u6478\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u6709\u4e00\u4e2a\u65b0\u7684\u5168\u5c4f\u6293\u53d6\u5668\uff0c\u53ef\u4ee5\u963b\u6b62\u4f60\u4ece\u5e73\u677f\u7535\u8111\u5c4f\u5e55\u8fb9\u7f18\u610f\u5916\u6ed1\u52a8\u3002\u5fae\u8f6f\u8fd8\u8868\u793a\uff0c\u5728\u7eb5\u5411\u548c\u6a2a\u5411\u4e4b\u95f4\u65cb\u8f6c\u8bbe\u5907\u4f1a\u53d8\u5f97\u201c\u66f4\u5feb\u201d\u548c\u201c\u66f4\u7075\u654f\u201d\n\u5fae\u8f6f\u5728Windows 11\u4e2d\u7684\u65b0\u5feb\u7167\u5e03\u5c40\u529f\u80fd\u4e5f\u5f97\u5230\u4e86\u6539\u8fdb\uff0c\u5141\u8bb8\u4f60\u5c06\u5e94\u7528\u7a0b\u5e8f\u62d6\u52a8\u5230\u7a97\u53e3\u9876\u90e8\uff0c\u5e76\u663e\u793a\u6240\u6709\u53ef\u4ee5\u4f7f\u7528\u7684\u5e03\u5c40\u3002\u5fae\u8f6f\u4e5f\u5728\u6539\u8fdb\u5176\u805a\u7126\u529f\u80fd\uff0c\u52a0\u5165\u4e86\u4e00\u4e2a\u201c\u8bf7\u52ff\u6253\u6270\u201d\u6a21\u5f0f\u3002\u5b83\u4f7f\u5feb\u901f\u5173\u95ed\u901a\u77e5\u53d8\u5f97\u5bb9\u6613\u5f97\u591a\uff0c\u56e0\u6b64\u60a8\u53ea\u80fd\u770b\u5230\u4f18\u5148\u7ea7\u901a\u77e5\u6216\u8b66\u62a5\u901a\u77e5\u3002\n\u5b9e\u65f6\u5b57\u5e55\u5c06\u5f88\u5feb\u5d4c\u5165Windows 11\uff0c\u53ef\u4ee5\u901a\u8fc7Winkey+CTRL+L\u5feb\u6377\u65b9\u5f0f\u8bbf\u95ee\u3002\u73b0\u573a\u5b57\u5e55\u5c06\u4f7f\u804b\u54d1\u4eba\u6216\u542c\u529b\u969c\u788d\u8005\u53d7\u76ca\u532a\u6d45\uff0c\u4f46\u4e5f\u53ef\u4f9b\u4efb\u4f55\u4eba\u4f7f\u7528\uff0c\u5e76\u5c06\u5728\u8bbe\u5907\u4e0a\u6839\u636e\u5305\u542b\u97f3\u9891\u7684\u4efb\u4f55\u5185\u5bb9\u81ea\u52a8\u751f\u6210\u3002\u5b57\u5e55\u53ef\u4ee5\u5728\u7a97\u53e3\u4e2d\u6d6e\u52a8\uff0c\u4e5f\u53ef\u4ee5\u663e\u793a\u5728\u5c4f\u5e55\u7684\u9876\u90e8\u6216\u5e95\u90e8\u3002\u8fd9\u770b\u8d77\u6765\u5bf9Windows 11\u7684\u53ef\u8bbf\u95ee\u6027\u6709\u5f88\u5927\u7684\u6539\u8fdb\u3002\n\u5176\u4ed6\u6539\u8fdb\u5305\u62ec\u5728Windows 11\u4efb\u52a1\u680f\u4e0a\u62d6\u653e\u7684\u529f\u80fd\u3002\u8fd9\u662f\u9996\u6b21\u53d1\u5e03\u65f6\u7f3a\u5931\u7684\u4e00\u5927\u90e8\u5206\uff0c\u56e0\u6b64Windows 11\u7528\u6237\u5c06\u5f88\u9ad8\u5174\u770b\u5230\u8fd9\u4e00\u56de\u5f52\u3002\u5fae\u8f6f\u8fd8\u5728\u6587\u4ef6\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u66f4\u5bb9\u6613\u67e5\u770bOneDrive\u5b58\u50a8\uff0c\u5e76\u6539\u8fdb\u4e86\u5feb\u901f\u8bbf\u95ee\u529f\u80fd\uff0c\u4f7f\u60a8\u53ef\u4ee5\u9501\u5b9a\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u3002\n\u4e3a\u4e86\u964d\u4f4e\u4e2a\u4eba\u7535\u8111\u7684\u80fd\u8017\uff0c\u5fae\u8f6f\u8fd8\u5728Windows 11\u7684\u7535\u6e90\u8bbe\u7f6e\u4e2d\u66f4\u6539\u7761\u7720\u548c\u5173\u673a\u7684\u9ed8\u8ba4\u503c\u3002\u53ea\u6709\u5f53\u4f60\u6e05\u6d01\u5b89\u88c5Windows 11\u65f6\uff0c\u4f60\u624d\u80fd\u770b\u5230\u8fd9\u4e9b\u65b0\u8bbe\u7f6e\uff0c\u4f46\u672a\u6765\u7684\u65b0PC\u53ef\u80fd\u4f1a\u9644\u5e26\u66f4\u79ef\u6781\u7684\u7761\u7720/\u5c4f\u5e55\u5173\u95ed\u9009\u9879\u3002\n\u6700\u540e\u4f46\u5e76\u975e\u6700\u4e0d\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff0cWindows 11\u4e2d\u4efb\u52a1\u7ba1\u7406\u5668\u7684\u91cd\u65b0\u8bbe\u8ba1\u73b0\u5728\u662f\u6b63\u5f0f\u7684\u3002\u5b83\u5305\u62ec\u4e00\u4e2a\u65b0\u7684\u547d\u4ee4\u680f\u548c\u4e00\u4e2a\u9ed1\u8272\u4e3b\u9898\uff0c\u4ee5\u53ca\u4e00\u4e2a\u53ef\u4ee5\u9650\u5236\u5e94\u7528\u7a0b\u5e8f\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\u7684\u6548\u7387\u6a21\u5f0f\u3002\n\u548c\u5f80\u5e38\u4e00\u6837\uff0c\u8fd9\u4e9b\u65b0\u7684Windows 11\u529f\u80fd\u76ee\u524d\u53ea\u5728\u6d4b\u8bd5\u4e2d\uff0c\u8fd9\u610f\u5473\u7740\u5176\u4e2d\u4e00\u4e9b\u529f\u80fd\u53ef\u80fd\u4f1a\u57282022\u5e74\u7684\u6bcf\u6708\u66f4\u65b0\u4e2d\u51fa\u73b0\u3002\u5fae\u8f6f\u521a\u521a\u53d1\u5e03\u4e86Windows 11\u7684\u7b2c\u4e00\u6b21\u5927\u66f4\u65b0\uff0c\u8be5\u516c\u53f8\u900f\u9732\uff0c\u5b83\u4e0d\u4f1a\u7b49\u5f85\u6bcf\u5e74\u53ea\u63a8\u51fa\u4e00\u6b21\u65b0\u529f\u80fd\u3002", "note_en": "Microsoft is bringing new touch gestures, Start menu folders, a redesigned Task Manager, and lots more improvements to Windows 11. A new build of Windows 11 is  available to testers today, and it\u2019s full of new features that look like they will significantly improve the usability of Windows 11 overall.\n The new Start menu folders will allow Windows 11 users to customize the pinned section of the Start menu into folders. You drag an app on top of another to create a folder, and you can rearrange apps within folders and remove them. The ability to rename folders is coming in future test builds, but it\u2019s good to see more customization on the Start menu, given Windows 11 launched without many ways to tweak the menu design.\n   If you\u2019ve always been a fan of the gestures in Windows 8, Microsoft is bringing five new touch gestures to Windows 11 soon that will make using tablets a little easier. The first is the ability to swipe up on the taskbar to bring up the Start menu and swipe down to dismiss it again. You\u2019ll also be able to swipe between pinned, all apps, and recommended / more on the Start menu.\n The third new touch gesture lets you swipe from the bottom right of the taskbar to show the Quick Settings menu \u2014 useful if you need to toggle airplane mode quickly or access Bluetooth settings. The animations for bringing up the Notification Center have also been improved, and there\u2019s a new full-screen gripper in touch-oriented apps that will stop you accidentally swiping from the edges of a tablet screen. Microsoft also says rotating your device between portrait and landscape orientation is getting \u201csnapper\u201d and \u201cmore responsive.\u201d\n   Microsoft\u2019s new Snap Layouts feature in Windows 11 is also getting improved, allowing you to drag an app to the top of a window and reveal all the layouts you can use. Microsoft is also improving its Focus feature to include a Do Not Disturb mode. It makes it a lot easier to quickly silence notifications, so you only see priority ones or ones for alarms.\n Live Captions will soon be built into Windows 11, accessible from a Winkey + CTRL + L shortcut. Live Captions will greatly benefit people who are deaf or hard of hearing, but they\u2019re also available for anyone to use and will be automatically generated on-device from any content that includes audio. Captions can float in a window or be displayed at the top or bottom of a screen. This looks like a great accessibility improvement to Windows 11.\n     Other improvements on the way include the ability to drag and drop on the Windows 11 taskbar. This was a big missing part of the initial launch, so Windows 11 users will be happy to see this return. Microsoft is also making it easier to see your OneDrive storage within File Explorer and improving the Quick Access feature to let you pin files as well as folders.\n In a push to reduce energy consumption on PCs, Microsoft is also changing the default values for sleep and screen off in the power settings in Windows 11. You\u2019ll only see these new settings if you clean install Windows 11, but new PCs in the future will presumably ship with more aggressive sleep / screen off options.\n   Last but not least, the Task Manager redesign in Windows 11 is now official. It includes a new command bar and a dark theme, alongside an efficiency mode that lets you limit apps from consuming system resources.\n As always, these new Windows 11 features are only in testing right now, which means some of them will likely show up in monthly updates throughout 2022. Microsoft just delivered  Windows 11\u2019s first big update, and the company revealed it won\u2019t wait to bring new features just once a year.", "posttime": "2022-02-17 17:21:08", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "microsoft,windows,\u8bbe\u8ba1,\u53d1\u5e03,\u5fae\u8f6f", "title": "\u5fae\u8f6f\u53d1\u5e03\u4e86\u4e00\u4e2a\u65b0\u7684Windows 11\u9884\u89c8\u7248\uff0c\u5e26\u6709\u53ef\u5b9a\u5236\u7684\u5f00\u59cb\u83dc\u5355\u3001\u4e94\u79cd\u65b0\u7684\u89e6\u6478\u624b\u52bf\u3001\u5b9e\u65f6\u5b57\u5e55\u3001\u4efb\u52a1\u7ba1\u7406\u5668\u91cd\u65b0\u8bbe\u8ba1\u7b49\u7b49", "title_en": "Microsoft releases a new Windows 11 Preview build with a customizable Start menu, five new touch gestures, Live Captions, Task Manager redesign, and more", "transed": 1, "url": "https://www.theverge.com/2022/2/16/22937573/microsoft-windows-11-start-menu-folders-new-touch-gestures-features?scrolla=5eb6d68b7fedc32c19ef33b4", "via": "", "real_tags": ["microsoft", "windows", "\u8bbe\u8ba1", "\u53d1\u5e03", "\u5fae\u8f6f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073876, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u5468\u7684\u8bba\u6587\u6765\u81ea2021\u5e74\u521d\u7684\u4e00\u6b21\u4f1a\u8bae\uff08SIGCOMM 2021\uff09\u3002\u6211\u4e5f\u5728\u5c1d\u8bd5\u4e00\u79cd\u65b0\u7684\u8bba\u6587\u8bc4\u8bba\u683c\u5f0f\uff0c\u975e\u5e38\u611f\u8c22\u60a8\u7684\u60f3\u6cd5\u3002\u8fd9\u4e9b\u8bba\u6587\u8bc4\u8bba\u53ef\u4ee5\u6bcf\u5468\u53d1\u9001\u5230\u4f60\u7684\u6536\u4ef6\u7bb1\uff0c\u4e5f\u53ef\u4ee5\u8ba2\u9605Atom\u8ba2\u9605\u6e90\u3002\u4e00\u5982\u65e2\u5f80\uff0c\u8bf7\u968f\u65f6\u5728Twitter\u4e0a\u53d1\u8868\u53cd\u9988\u6216\u5efa\u8bae\uff01\n\u300a\u89e3\u9664\u7ed1\u5b9a\u7684\u7ebd\u5e26\uff1a\u5c06IP\u4e0eweb\u670d\u52a1\u548c\u5957\u63a5\u5b57\u5206\u79bb\u4ee5\u5b9e\u73b0CDN\u7ea7\u522b\u7684\u5f3a\u5927\u5bfb\u5740\u7075\u6d3b\u6027\u300b\u4e2d\u7684\u7814\u7a76\u63cf\u8ff0\u4e86CloudFlare\u5c06\u7f51\u7edc\u6982\u5ff5\uff08\u4e3b\u673a\u540d\u548c\u5957\u63a5\u5b57\uff09\u4e0eIP\u5730\u5740\u5206\u79bb\u7684\u5de5\u4f5c\u3002\n\u901a\u8fc7\u5c06\u4e3b\u673a\u540d\u548c\u5957\u63a5\u5b57\u4e0e\u5730\u5740\u5206\u79bb\uff0cCloudFlare\u7684\u57fa\u7840\u8bbe\u65bd\u53ef\u4ee5\u5feb\u901f\u66f4\u6539\u4e3a\u7ed9\u5b9a\u4e3b\u673a\u63d0\u4f9b\u6d41\u91cf\u7684\u673a\u5668\uff0c\u4ee5\u53ca\u6bcf\u4e2a\u4e3b\u673a\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u2014\u2014\u4f5c\u8005\u79f0\u8fd9\u79cd\u65b9\u6cd5\u4e3a\u5bfb\u5740\u654f\u6377\u6027\u3002\n\u672c\u6587\u6307\u51fa\uff0c\u51cf\u5c11IP\u5730\u5740\u7684\u4f7f\u7528\u662f\u5c06IP\u5730\u5740\u4e0e\u4e3b\u673a\u540d\u5206\u79bb\u7684\u6700\u521d\u52a8\u673a\u3002\u4f5c\u8005\u8ba4\u4e3a\uff0cCDN\u4e0d\u4e00\u5b9a\u9700\u8981\u5927\u91cfIP\u5730\u5740\u624d\u80fd\u8fd0\u884c\u2014\u2014\u8fd9\u4e0e\u201c\u5927\u578bCDN\u5df2\u7ecf\u83b7\u5f97\u4e86\u5927\u91cfIP\u5730\u5740\uff1a\u5728\u64b0\u5199\u672c\u6587\u65f6\uff0cCloudflare\u62e5\u6709170\u4e07\u4e2aIPv4\u5730\u5740\uff0cAkamai\u62e5\u67091200\u4e07\u4e2a\uff0cAmazon AWS\u62e5\u6709\u8d85\u8fc75100\u4e07\u4e2a\uff01\u201d\u7684\u4e8b\u5b9e\u5f62\u6210\u4e86\u5bf9\u6bd4\n\u4f20\u7edf\u4e0a\uff0c\u8bb8\u591aCDN\u4f7f\u7528\u5927\u91cfIP\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u4f53\u7cfb\u7ed3\u6784\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\u5c06\u5165\u53e3\u70b9\u548c\u51fa\u53e3\u70b9\u653e\u5728\u516c\u5171\u4e92\u8054\u7f51\u4e0a\u2014\u2014\u5165\u53e3\u70b9\u63a5\u6536\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u800c\u51fa\u53e3\u70b9\u5411\u7f13\u5b58\u4e0a\u7684\u6e90\u670d\u52a1\u5668\u53d1\u51fa\u8bf7\u6c42\uff0c\u4f46\u5374\u9519\u8fc7\u4e86\u201c\u4ec0\u4e48\u662f\u6e90\u670d\u52a1\u5668\u201d\u4e0a\u7684\u8fd9\u4e9b\u6587\u6863\u6709\u5e2e\u52a9\u3002\u4e3a\u4e86\u8ba9\u8fd9\u4e9b\u673a\u5668\u53ef\u4ee5\u8bbf\u95ee\uff0c\u5b83\u4eec\u9700\u8981\u516c\u5171IP\u5730\u5740\u3002\n\u5176\u4ed6\u56e0\u7d20\u53ef\u80fd\u4f1a\u589e\u52a0CDN\u7684IP\u5730\u5740\u4f7f\u7528\u7387\u3002CDN\u53ef\u4ee5\u5c06\u7279\u5b9aIP\u7ed1\u5b9a\u5230\u4e3b\u673a\u540d\uff0c\u4ece\u800c\u5728CDN\u670d\u52a1\u7684\u4e3b\u673a\u540d\u6570\u91cf\u548cCDN\u9700\u8981\u7684\u5730\u5740\u6570\u91cf\u4e4b\u95f4\u5efa\u7acb\u5173\u7cfb\u3002\u6b64\u5916\uff0cCDN\u670d\u52a1\u5668\u901a\u5e38\u5728\u7f51\u7edc\u5957\u63a5\u5b57\u4e0a\u6709\u4e00\u4e2a\u4e0a\u9650\uff0c\u7f51\u7edc\u8fde\u63a5\u6709\u7528\u4e8e\u8fde\u63a5\u7684\u8bfb/\u5199\u7f13\u51b2\u533a\uff0c\u4ee5\u53ca\u4e00\u4e2a\u540d\u4e3ask_buff\u7684\u5185\u6838\u6570\u636e\u7ed3\u6784\u3002\u66f4\u591a\u4fe1\u606f\u8bf7\u70b9\u51fb\u8fd9\u91cc\uff0c\u56e0\u6b64\uff0c\u5ba2\u6237\u673a\u4f7f\u7528\u91cf\u7684\u589e\u52a0\u4e5f\u4f1a\u8f6c\u5316\u4e3a\u66f4\u591a\u7684\u673a\u5668\uff08\u4ee5\u53ca\u76f8\u5173\u7684IP\u5730\u5740\uff09\u3002\n\u4e3b\u673a\u540d\u5230\u5730\u5740\u7ed1\u5b9a\u63a7\u5236\u4e3b\u673a\u540d\uff08\u5982www.micahlerner.com\uff09\u5982\u4f55\u6620\u5c04\u5230\u53ef\u4ee5\u670d\u52a1\u8bf7\u6c42\u7684IP\u5730\u5740/\u8ba1\u7b97\u673a\n\u5730\u5740\u5230\u5957\u63a5\u5b57\u7ed1\u5b9a\u63a7\u5236\u673a\u5668\u4e0a\u8fd0\u884c\u7684\u670d\u52a1\u3002\u4f5c\u4e3a\u7f51\u7edc\u5957\u63a5\u5b57\u7684\u53c2\u8003\uff0c\u6211\u975e\u5e38\u559c\u6b22Beej\u7684\u7f51\u7edc\u7f16\u7a0b\u670d\u52a1\u5ba2\u6237\u7aef\u8bf7\u6c42\u6307\u5357\u3002\n\u9996\u5148\uff0c\u672c\u6587\u63cf\u8ff0\u4e86CloudFlare\u5982\u4f55\u901a\u8fc7\u66f4\u6539\u79f0\u4e3a\u7b56\u7565\u7684\u914d\u7f6e\u6765\u5feb\u901f\u3001\u52a8\u6001\u5730\u66f4\u65b0\u4e3b\u673a\u540d\u5230\u5730\u5740\u7ed1\u5b9a\u2014\u2014DNS\u670d\u52a1\u5668\u63a5\u6536\u7b56\u7565\uff0c\u5e76\u4f7f\u7528\u5b83\u4eec\u6765\u51b3\u5b9a\u4e3a\u7ed9\u5b9a\u4e3b\u673a\u540d\u8fd4\u56de\u54ea\u4e9bIP\u5730\u5740\u3002\n\u4e00\u4e2a\u793a\u4f8b\u7b56\u7565\u5141\u8bb8\u4e3b\u673a\u540d\u6620\u5c04\u5230\u4ece\u4e00\u7ec4\u5019\u9009\u4e3b\u673a\uff08\u79f0\u4e3a\u6c60\uff09\u4e2d\u968f\u673a\u9009\u62e9\u7684IP\u5730\u5740\u3002\u4f7f\u7528\u7b56\u7565\u800c\u4e0d\u662f\u4ece\u4e3b\u673a\u540d\u5230IP\u5730\u5740\u7684\u56fa\u5b9a\u6620\u5c04\u4e0e\u5176\u4ed6\u90e8\u7f72\u5f62\u6210\u5bf9\u6bd4\uff0c\u5728\u5176\u4ed6\u90e8\u7f72\u4e2d\uff0c\u66f4\u6539\u4e3b\u673a\u540d\u5230IP\u5730\u5740\u7684\u6620\u5c04\u5728\u64cd\u4f5c\u4e0a\u65e2\u590d\u6742\u53c8\u5bb9\u6613\u51fa\u9519\u3002\n\u901a\u5e38\u4e00\u4e2a\u670d\u52a1\u5728\u4e00\u7ec4\u56fa\u5b9a\u7684\u7aef\u53e3\u4e0a\u63a5\u6536\u6d41\u91cf\u2014\u2014\u8fd9\u79cd\u65b9\u6cd5\u6709\u51e0\u4e2a\u7f3a\u70b9\uff0c\u5305\u62ec\u6bcf\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u5f00\u9500\uff08\u610f\u5473\u7740\u5728\u6bcf\u53f0\u673a\u5668\u4e0a\u53ef\u4ee5\u8fd0\u884c\u56fa\u5b9a\u6570\u91cf\u7684\u670d\u52a1\uff09\uff0c\u5e76\u4e14\u4e0d\u53ef\u80fd\u5728\u540c\u4e00\u53f0\u673a\u5668\u4e0a\u8fd0\u884c\u4e24\u4e2a\u7aef\u53e3\u91cd\u53e0\u7684\u670d\u52a1\u800c\u4e0d\u9020\u6210\u590d\u6742\u6027\u3002\u672c\u6587\u6307\u51fa\u4e86\u4e00\u79cd\u65b9\u6cd5\uff0c\u4f7f\u7528INADDR_ANY\uff08\u6b64\u5904\u4e3a\u76f8\u5173\u6587\u6863\uff09\uff0c\u5141\u8bb8\u4e00\u4e2a\u5957\u63a5\u5b57\u63a5\u6536\u53d1\u9001\u5230\u673a\u5668\u4e0a\u6240\u6709\u63a5\u53e3\u7684\u6570\u636e\u5305\u3002\u8fd9\u79cd\u65b9\u6cd5\u5e76\u975e\u6ca1\u6709\u7f3a\u70b9\uff0c\u6bd4\u5982\u53ef\u80fd\u4f1a\u5e26\u6765\u5b89\u5168\u95ee\u9898\u2014\u2014\u5982\u679c\u5185\u90e8\u6d41\u91cf\u4e0e\u5916\u90e8\u6d41\u91cf\u8fdb\u5165\u540c\u4e00\u4e2a\u5957\u63a5\u5b57\uff0c\u5185\u90e8\u670d\u52a1\u53ef\u80fd\u4f1a\u610f\u5916\u5730\u54cd\u5e94\u5916\u90e8\u8bf7\u6c42\u3002\uff08\u56e0\u4e3a\u5b83\u4eec\u4e0d\u80fd\u91cd\u590d\u4f7f\u7528\u540c\u4e00\u4e2a\u7aef\u53e3\uff09\u3002\n\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u4e9b\u6311\u6218\uff0cCloudFlare\u7684\u7cfb\u7edf\u5f15\u5165\u4e86\u53ef\u7f16\u7a0b\u5957\u63a5\u5b57\u67e5\u627e\u3002CloudFlare\u535a\u5ba2\u63d0\u4f9b\u4e86\u66f4\u591a\u80cc\u666f\u4fe1\u606f\uff0c\u4f7f\u7528BPF eBPF/BPF\u5728\u8fc7\u53bb\u7684\u8bba\u6587\u8bc4\u8bba\u4e2d\u51fa\u73b0\u8fc7\u51e0\u6b21\uff0c\u6211\u975e\u5e38\u559c\u6b22Julia Evans\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u7684\u8fd9\u7bc7\u6587\u7ae0\u3002\uff08\u4f5c\u4e3a\u5b9e\u73b0\u7684\u4e00\u90e8\u5206\uff0c\u4f5c\u8005\u6784\u5efa\u4e86sk_\u67e5\u627e\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e00\u4e2agreta\u6559\u7a0b\u3002\uff09\u3002\u8fd9\u79cd\u65b9\u6cd5\u57fa\u4e8e\u89c4\u5219\u5728\u5185\u6838\u5185\u90e8\u8def\u7531\u6d41\u91cf\u3002\u4e00\u4e2a\u793a\u4f8b\u89c4\u5219\u53ef\u4ee5\u5c06\u5ba2\u6237\u7aef\u6d41\u91cf\u8def\u7531\u5230\u5e76\u884c\u8fd0\u884c\u7684\u540c\u4e00\u670d\u52a1\u7684\u4e0d\u540c\u5b9e\u4f8b\uff0c\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u6709\u4e00\u4e2a\u5355\u72ec\u7684\u5957\u63a5\u5b57\u3002\n\u672c\u6587\u8ba8\u8bba\u4e86\u89e3\u51b3\u654f\u6377\u6027\u95ee\u9898\u6240\u5e26\u6765\u7684\u8bb8\u591a\u6027\u80fd\u548c\u5b89\u5168\u4f18\u52bf\u2014\u2014\u91cd\u8981\u7684\u662f\uff0c\u8fd9\u4e9b\u4f18\u52bf\u5728\u5176\u4ed6\u91cd\u8981\u7cfb\u7edf\u6307\u6807\u6ca1\u6709\u660e\u663e\u53d8\u5316\u7684\u60c5\u51b5\u4e0b\u53ef\u7528\uff01\n\u9996\u5148\uff0c\u5206\u79bb\u4e3b\u673a\u540d\u5230\u5730\u5740\u548c\u5730\u5740\u5230\u5957\u63a5\u5b57\u7ed1\u5b9a\u5141\u8bb8CloudFlare CDN\u3002\u672c\u6587\u6307\u51fa\uff0c\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u8f6c\u79fb\u5230\u5916\u90e8\u90e8\u7f72\uff0c\u4f46\u9700\u8981\u6ce8\u610f\u51e0\u70b9\u3002\u4f7f\u7528\u66f4\u5c11\u7684IP\u8fdb\u884c\u64cd\u4f5c\u3002\u5730\u5740\u4e0d\u518d\u9700\u8981\u4fdd\u7559\u4f9b\u7279\u5b9a\u4e3b\u673a\u540d\u4f7f\u7528\uff0c\u673a\u5668\u73b0\u5728\u53ef\u4ee5\u6709\u66f4\u591a\u7684\u5957\u63a5\u5b57\u3002\u66f4\u5c11\u7684IP\u5730\u5740\u4f1a\u5f71\u54cd\u6210\u672c\u5e76\u964d\u4f4e\u8fdb\u5165\u58c1\u5792\u2014\u2014\u8bba\u6587\u6307\u51fa\uff0c\u4e3b\u8981\u4e91\u63d0\u4f9b\u5546\u62e5\u6709\u7684IP\u7a7a\u95f4\u4ef7\u503c\u4e0d\u8d85\u8fc75\u4ebf\u7f8e\u5143\uff08\u5982\u679c\u4e0d\u662f\u66f4\u591a\u7684\u8bdd\uff09\u3002\nCloudFlare\u7ee7\u7eed\u4f7f\u7528\u7684IP\u5730\u5740\u4e5f\u53d8\u5f97\u66f4\u6613\u4e8e\u7ba1\u7406\u3002\u5c06IP\u5730\u5740\u52a8\u6001\u5206\u914d\u7ed9\u4e3b\u673a\u540d\u5c06\u4f7f\u673a\u5668\uff08\u4ee5\u53ca\u76f8\u5173\u5730\u5740\uff09\u8131\u673a\u7684\u64cd\u4f5c\u4efb\u52a1\u53d8\u6210\u4e86\u4ece\u63d0\u4f9b\u7ed9\u5ba2\u6237\u7aef\u7684\u6c60\u4e2d\u5220\u9664\u5730\u5740\u7684\u95ee\u9898\u3002\n\u6b64\u5916\uff0c\u8bba\u6587\u4e2d\u63cf\u8ff0\u7684\u968f\u673a\u5316\u65b9\u6cd5\uff08\u6c60\u4e2d\u7684IP\u5730\u5740\u54cd\u5e94DNS\u67e5\u8be2\u800c\u8fd4\u56de\uff09\u53ef\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u8d1f\u8f7d\u5e73\u8861\u3002\n\u867d\u7136\u672c\u6587\u8ba8\u8bba\u4e86\u5bfb\u5740\u7075\u6d3b\u6027\u63d0\u4f9b\u7684\u53ef\u6269\u5c55\u6027\u4f18\u52bf\uff0c\u4f46\u4e5f\u8ba8\u8bba\u4e86\u9650\u5236\u5730\u5740\u4f7f\u7528\u4e4b\u5916\u7684\u5176\u4ed6\u5f71\u54cd\u2014\u2014\u4f8b\u5982\uff0c\u8be5\u65b9\u6cd5\u53ef\u4ee5\u5e2e\u52a9\u62b5\u5fa1\u62d2\u7edd\u670d\u52a1\u653b\u51fb\u3002\n\u5982\u679c\u67d0\u4e2a\u7279\u5b9a\u5730\u5740\u53d7\u5230\u653b\u51fb\uff0c\u5219\u8be5\u5730\u5740\u7684\u6d41\u91cf\u53ef\u4ee5\u662fblackholed CloudFlare\u5728Blackhole\u8def\u7531\u4e0a\u7684\u53c2\u8003\u3002\u5982\u679c\u67d0\u4e2a\u4e3b\u673a\u540d\u53d7\u5230\u653b\u51fb\uff0c\u5219\u8be5\u4e3b\u673a\u540d\u7684\u901a\u4fe1\u91cf\u5c06\u5747\u5300\u5206\u5e03\u5728\u5730\u5740\u6c60\u4e2d\u7684\u8ba1\u7b97\u673a\u4e0a\u3002", "note_en": "This week\u2019s paper is from a conference earlier in 2021 (SIGCOMM 2021). I\u2019m also trying out a new format for the paper reviews, your thoughts are greatly appreciated.These paper reviews can  be delivered weekly to your inbox, or you can subscribe to the  Atom feed. As always, feel free to reach out on  Twitter with feedback or suggestions!\n   The research in  The Ties that un-Bind: Decoupling IP from web services and sockets for robust addressing agility at CDN-scale describes CloudFlare\u2019s work to decouple networking concepts (hostnames and sockets) from IP addresses.\n  By decoupling hostnames and sockets from addresses, CloudFlare\u2019s infrastructure can quickly change the machines that serve traffic for a given host, as well as the services running on each host - the authors call this approach  addressing agility.\n  The paper notes  reducing IP address use as the initial motivation for decoupling IP addresses from hostnames. The authors argue that CDNs don\u2019t necessarily need large numbers of IP addresses to operate - this is in contrast with the fact that, \u201clarge CDNs have acquired a massive number of IP addresses: At the time of this writing, Cloudflare has 1.7M IPv4 addresses, Akamai has 12M, and Amazon AWS has over 51M!\u201d\n Traditionally, many CDNs use large numbers of IPs because their architecture (shown in the figure below) places entry and exit points on the public internet - entry points receive requests from clients, while exit points make requests to origin servers on cache miss    These docs on \u201cWhat is an origin server?\u201d are helpful. . For these machines to be reachable, they need public IP addresses.\n  Other factors can increase a CDN\u2019s IP address usage. CDNs may bind specific IPs to hostnames, creating a relationship between the number of hostnames served by the CDN and the number of addresses the CDN requires. Furthermore, CDN servers normally have an upper bound on networking sockets   Network connections have read/write buffers for connections, as well as a kernel data structure called   sk_buff. More info  here. , so increased client usage also translates into more machines (and associated IP addresses).\n   Hostname-to-address bindings control how hostnames (like  www.micahlerner.com) map to IP addresses/machines that can serve requests\n Address-to-socket bindings control how services running on machines   For a reference on network sockets, I have really enjoyed  Beej\u2019s Guide to Networking Programming  service client requests.\n First, the paper describes how CloudFlare can quickly and dynamically update  hostname-to-address bindings by changing configurations called  policies - DNS servers ingest  policies and use them to decide which IP addresses to return for a given hostname.\n  One example policy allows hostnames to map to IP addresses randomly chosen from a set of candidates (called a  pool). Using  policies instead of fixed mappings from hostnames to IP addresses is in contrast with other deployments, where changing  hostname-to-IP address mappings is both operationally complex and error-prone.\n  Normally a service receives traffic on a fixed set of ports - this approach has several downsides, including that each socket has overhead (meaning a fixed number of services can run on each machine) and it isn\u2019t possible to run two services with overlapping ports on the same machine without complications   The paper notes one approach, using  INADDR_ANY (relevant documentation  here), that allows one socket to receive packets sent to all interfaces on a machine. This approach doesn\u2019t come without its downsides, like potentially introducing security issues - if internal traffic goes to the same socket as external traffic, an internal service could accidentally respond to external requests.  (as they can\u2019t re-use the same port).\n  To addresses these challenges, CloudFlare\u2019s system introduces  programmable socket lookup   The CloudFlare blog has more background  here. , using BPF   eBPF/BPF have come up a few times in past paper reviews, and I really like  this post from Julia Evans on the topic.  (as part of the implementation, the authors built   sk_lookup   There is also a greta tutorial  here. ). This approach routes traffic inside of the kernel based on rules. An example rule could route client traffic to different instances of the same service running side-by-side, with a separate socket for every instance.\n   The paper discusses a number of performance and security benefits that  addressing agility provides - importantly, these benefits are available with no discernible change to other important system metrics!\n First, decoupling  hostname-to-address and  address-to-socket bindings allows the CloudFlare CDN   The paper notes that the approach is transferable to external deployments as well, with a few caveats.  to operate with fewer IPs. Addresses no longer need to be reserved for use by a specific host name and machines can now have significantly more sockets. Fewer IP addresses impacts cost and lowers barrier to entry - the paper notes that the IP space owned by the major cloud providers is worth north of 500 million USD (if not more).\n The IP addresses that CloudFlare does continue to use are also become easier to manage. Dynamically allocating IP addresses to hostnames turns the operational task of taking machines (and the associated addresses) offline into a matter of removing addresses from the pool provided to clients.\n Furthermore, the randomization approach described (where IP addressess from a pool are returned in response to DNS queries) by the paper results in better load balancing.\n  While the paper discusses the scalability benefits  addressing agility provides, it also discusses other implications beyond limiting address use - as an example, the approach can help with Denial of Service attacks.\n If a specific address is under attack, the traffic to that address can be blackholed   CloudFlare\u2019s reference on blachole routing  here. . If a hostname is under attack, the traffic to that hostname will be distributed evenly across machines in the address pool.", "posttime": "2022-02-17 17:11:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u670d\u52a1,ip,\u5730\u5740", "title": "\u5c06IP\u4e0e\u670d\u52a1\u548c\u5957\u63a5\u5b57\u5206\u79bb\u4ee5\u63d0\u9ad8\u89e3\u51b3\u7075\u6d3b\u6027", "title_en": "Decoupling IP from services and sockets for addressing agility", "transed": 1, "url": "https://www.micahlerner.com/2022/01/13/the-ties-that-un-bind-decoupling-ip-from-web-services-and-sockets-for-robust-addressing-agility-at-cdn-scale.html", "via": "", "real_tags": ["\u670d\u52a1", "ip", "\u5730\u5740"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073874, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u901a\u8fc7\u5c06\u8d85\u7ec6\u7535\u6781\u690d\u5165\u766b\u75eb\u60a3\u8005\u7684\u989e\u53f6\uff0c\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u53ef\u89c6\u5316\u5927\u8111\u533a\u57df\u7684\u6d3b\u52a8\u3002\n\u5927\u591a\u6570\u5c0f\u5b66\u751f\u53ef\u80fd\u5df2\u7ecf\u77e5\u9053\u4e09\u4e2a\u82f9\u679c\u52a0\u4e24\u4e2a\u82f9\u679c\u52a0\u8d77\u6765\u5c31\u662f\u4e94\u4e2a\u82f9\u679c\u3002\u7136\u800c\uff0c\u5728\u8fd9\u6837\u7684\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u5927\u8111\u4e2d\u53d1\u751f\u4e86\u4ec0\u4e48\u4ecd\u7136\u662f\u4e2a\u672a\u77e5\u6570\u3002\u6ce2\u6069\u5927\u5b66\u548c\u56fe\u5bbe\u6839\u5927\u5b66\u76ee\u524d\u7684\u7814\u7a76\u63ed\u793a\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\n\u7814\u7a76\u4eba\u5458\u53d7\u76ca\u4e8e\u6ce2\u6069\u5927\u5b66\u533b\u9662\u766b\u75eb\u79d1\u7684\u4e00\u4e2a\u7279\u8272\u3002\u5b83\u4e13\u95e8\u7814\u7a76\u766b\u75eb\u60a3\u8005\u5927\u8111\u7684\u5916\u79d1\u624b\u672f\u3002\u5728\u4e00\u4e9b\u60a3\u8005\u4e2d\uff0c\u766b\u75eb\u53d1\u4f5c\u603b\u662f\u8d77\u6e90\u4e8e\u5927\u8111\u7684\u540c\u4e00\u533a\u57df\u3002\u4e3a\u4e86\u7cbe\u786e\u5b9a\u4f4d\u8fd9\u4e2a\u7f3a\u9677\u533a\u57df\uff0c\u533b\u751f\u5728\u75c5\u4eba\u4f53\u5185\u690d\u5165\u4e86\u51e0\u4e2a\u7535\u6781\u3002\u8fd9\u4e9b\u63a2\u9488\u53ef\u4ee5\u7528\u6765\u7cbe\u786e\u5730\u786e\u5b9a\u75c9\u631b\u7684\u8d77\u6e90\u3002\u6b64\u5916\uff0c\u5355\u4e2a\u795e\u7ecf\u5143\u7684\u6d3b\u52a8\u53ef\u4ee5\u901a\u8fc7\u63a5\u7ebf\u6765\u6d4b\u91cf\u3002\n\u4e94\u540d\u5973\u6027\u548c\u56db\u540d\u7537\u6027\u53c2\u4e0e\u4e86\u8fd9\u9879\u7814\u7a76\u3002\u4ed6\u4eec\u5c06\u7535\u6781\u690d\u5165\u6240\u8c13\u7684\u5927\u8111\u989e\u53f6\uff0c\u4ee5\u8bb0\u5f55\u795e\u7ecf\u7ec6\u80de\u7684\u6d3b\u52a8\u3002\u540c\u65f6\uff0c\u53c2\u4e0e\u8005\u5fc5\u987b\u5b8c\u6210\u7b80\u5355\u7684\u7b97\u672f\u4efb\u52a1&#34;\u6211\u4eec\u53d1\u73b0\u4e0d\u540c\u7684\u795e\u7ecf\u5143\u5728\u52a0\u6cd5\u65f6\u6bd4\u51cf\u6cd5\u65f6\u5174\u594b\uff1b\u6ce2\u6069\u5927\u5b66\u533b\u9662\u766b\u75eb\u79d1\u7684Florian Mormann\u6559\u6388\u89e3\u91ca\u9053\u3002\n\u5e76\u975e\u6709\u4e9b\u795e\u7ecf\u5143\u53ea\u5bf9a&#34\u6709\u53cd\u5e94+&#34; \u7b7e\u540d\u548c\u5176\u4ed6\u4ec5\u9002\u7528\u4e8ea&#34-&#34; \u6807\u5fd7\uff1a&#34\uff1b\u5373\u4f7f\u6211\u4eec\u7528\u6587\u5b57\u4ee3\u66ff\u4e86\u6570\u5b66\u7b26\u53f7\uff0c\u6548\u679c\u4ecd\u7136\u662f\u4e00\u6837\u7684\uff0c&#34\uff1b\u57c3\u4e1d\u7279\u00b7\u5e93\u7279\uff08Esther Kutter\uff09\u89e3\u91ca\u9053\uff0c\u5979\u6b63\u5728\u83ab\u5c14\u66fc\u6559\u6388\uff08Prof.Mormann&#39\uff09\u653b\u8bfb\u535a\u58eb\u5b66\u4f4d\uff1b\u7f8e\u56fd\u7684\u7814\u7a76\u5c0f\u7ec4&#34;\u4f8b\u5982\uff0c\u5f53\u53d7\u8bd5\u8005\u88ab\u8981\u6c42\u8ba1\u7b97&#39\uff1b5\u548c3&#39\uff1b\uff0c\u4ed6\u4eec\u6dfb\u52a0\u7684\u795e\u7ecf\u5143\u91cd\u65b0\u5f00\u59cb\u6d3b\u52a8\uff1b\u9274\u4e8e&#39\uff1b7\u51cf4\u548c39\uff1b\u4ed6\u4eec\u7684\u51cf\u6cd5\u795e\u7ecf\u5143\u505a\u5230\u4e86&#34;\n\u8fd9\u8868\u660e\u53d1\u73b0\u7684\u7ec6\u80de\u5b9e\u9645\u4e0a\u7f16\u7801\u4e86\u4e00\u4e2a\u6570\u5b66\u6307\u4ee4\u3002\u56e0\u6b64\uff0c\u5927\u8111\u6d3b\u52a8\u975e\u5e38\u51c6\u786e\u5730\u663e\u793a\u4e86\u53d7\u8bd5\u8005\u76ee\u524d\u6b63\u5728\u8ba1\u7b97\u4ec0\u4e48\u6837\u7684\u4efb\u52a1\uff1a\u7814\u7a76\u4eba\u5458\u7ed9\u7ec6\u80de\u5582\u98df#39\uff1b\u5c06\u6d3b\u52a8\u6a21\u5f0f\u8f6c\u6362\u4e3a\u81ea\u5b66\u8ba1\u7b97\u673a\u7a0b\u5e8f\u3002\u540c\u65f6\uff0c\u4ed6\u4eec\u544a\u8bc9\u8f6f\u4ef6\u53d7\u8bd5\u8005\u76ee\u524d\u662f\u5728\u8ba1\u7b97\u4e00\u4e2a\u548c\u8fd8\u662f\u4e00\u4e2a\u5dee\u3002\u5728\u8fd9\u4e2a\u8bad\u7ec3\u9636\u6bb5\u4e4b\u540e\uff0c\u5f53\u7b97\u6cd5\u9047\u5230\u65b0\u7684\u6d3b\u52a8\u6570\u636e\u65f6\uff0c\u5b83\u80fd\u591f\u51c6\u786e\u5730\u8bc6\u522b\u5728\u54ea\u4e2a\u8ba1\u7b97\u64cd\u4f5c\u671f\u95f4\u8bb0\u5f55\u4e86\u8fd9\u4e9b\u6570\u636e\u3002\n\u6765\u81ea\u4e01\u5bbe\u6839\u5927\u5b66\u7684Andreas Nieder\u6559\u6388\u548cMormann\u6559\u6388\u4e00\u8d77\u76d1\u7763\u4e86\u8fd9\u9879\u7814\u7a76\u300234;\u6211\u4eec\u4ece\u7334\u5b50\u7684\u5b9e\u9a8c\u4e2d\u77e5\u9053\uff0c\u7279\u5b9a\u4e8e\u67d0\u4e9b\u8ba1\u7b97\u89c4\u5219\u7684\u795e\u7ecf\u5143\u4e5f\u5b58\u5728\u4e8e\u5b83\u4eec\u7684\u5927\u8111\u4e2d\uff0c&#34\uff1b\u4ed6\u8bf4&#34;\u7136\u800c\uff0c\u5728\u4eba\u7c7b\u8eab\u4e0a\uff0c\u51e0\u4e4e\u6ca1\u6709\u8fd9\u65b9\u9762\u7684\u6570\u636e&#34; \u5728\u5206\u6790\u8fc7\u7a0b\u4e2d\uff0c\u4e24\u4e2a\u5de5\u4f5c\u7ec4\u9047\u5230\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u73b0\u8c61\uff1a\u7814\u7a76\u7684\u5927\u8111\u533a\u57df\u4e4b\u4e00\u662f\u6240\u8c13\u7684\u6d77\u9a6c\u65c1\u76ae\u8d28\u3002\u5728\u90a3\u91cc\uff0c\u7814\u7a76\u4eba\u5458\u4e5f\u53d1\u73b0\u4e86\u5728\u52a0\u6cd5\u6216\u51cf\u6cd5\u8fc7\u7a0b\u4e2d\u7279\u522b\u653e\u7535\u7684\u795e\u7ecf\u7ec6\u80de\u3002\u7136\u800c\uff0c\u5f53\u603b\u7ed3\u65f6\uff0c\u4e0d\u540c\u7684\u52a0\u6cd5\u795e\u7ecf\u5143\u5728\u540c\u4e00\u4e2a\u7b97\u672f\u4efb\u52a1\u4e2d\u4ea4\u66ff\u6d3b\u8dc3\u3002\u6253\u4e2a\u6bd4\u65b9\uff0c\u8fd9\u5c31\u597d\u50cf\u8ba1\u7b97\u5668\u4e0a\u7684\u52a0\u53f7\u952e\u5728\u4e0d\u65ad\u5730\u6539\u53d8\u5b83\u7684\u4f4d\u7f6e\u3002\u51cf\u6cd5\u4e5f\u662f\u5982\u6b64\u3002\u7814\u7a76\u4eba\u5458\u8fd8\u5c06\u5176\u79f0\u4e3a&#34\uff1b\u52a8\u6001\u7f16\u7801&#34;\n&#34;\u8fd9\u9879\u7814\u7a76\u6807\u5fd7\u7740\u6211\u4eec\u671d\u7740\u66f4\u597d\u5730\u7406\u89e3\u6211\u4eec\u6700\u91cd\u8981\u7684\u7b26\u53f7\u80fd\u529b\u4e4b\u4e00\u8fc8\u51fa\u4e86\u91cd\u8981\u7684\u4e00\u6b65\uff0c\u5373\u7528\u6570\u5b57\u8ba1\u7b97\uff1b\u83ab\u66fc\u5f3a\u8c03\u3002\u6765\u81ea\u6ce2\u6069\u548c\u56fe\u5bbe\u6839\u7684\u4e24\u4e2a\u7814\u7a76\u5c0f\u7ec4\u73b0\u5728\u5e0c\u671b\u786e\u5207\u5730\u8c03\u67e5\u6240\u53d1\u73b0\u7684\u795e\u7ecf\u7ec6\u80de\u5728\u5176\u4e2d\u626e\u6f14\u7684\u89d2\u8272\u3002\u57fa\u91d1\uff1a\n\u51fa\u7248\u7269\uff1aEsther F.Kutter\u3001Jan Bostroem\u3001Christian E.Elger\u3001Andreas Nieder\u3001Florian Mormann\uff1a\u300a\u4eba\u8111\u7b97\u672f\u89c4\u5219\u5904\u7406\u7684\u795e\u7ecf\u5143\u4ee3\u7801\u300b\uff1b\u5f53\u4ee3\u751f\u7269\u5b66\uff1b\u5185\u653f\u90e8\uff1ahttps://doi.org/10.1016/j.cub.2022.01.054\u8054\u7cfb\u4eba\uff1a\n\u5927\u8111\u4e2d\u7684\u4e00\u4e9b\u795e\u7ecf\u5143\u2014\u2014\u5728\u52a0\u6cd5\u4efb\u52a1\u4e2d\u7279\u522b\u6d3b\u8dc3\uff0c\u800c\u5728\u51cf\u6cd5\u4efb\u52a1\u4e2d\u5219\u7279\u522b\u6d3b\u8dc3\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u5c06\u5fae\u578b\u7535\u6781\u690d\u5165\u4e94\u540d\u5973\u6027\u548c\u56db\u540d\u7537\u6027\u7684\u5927\u8111\u4e2d\uff0c\u4ee5\u6d4b\u91cf\u5355\u4e2a\u795e\u7ecf\u5143\u7684\u6d3b\u52a8\u3002", "note_en": "Using ultrafine electrodes - implanted in the temporal lobes of epilepsy patients, researchers can visualize the activity of brain regions.\n    Most elementary school children probably already know that three apples plus two apples add up to five apples. However, what happens in the brain during such calculations is still largely unknown. The current study by the Universities of Bonn and T\u00fcbingen now sheds light on this issue.\n The researchers benefited from a special feature of the Department of Epileptology at the University Hospital Bonn. It specializes in surgical procedures on the brains of people with epilepsy. In some patients, seizures always originate from the same area of the brain. In order to precisely localize this defective area, the doctors implant several electrodes into the patients. The probes can be used to precisely determine the origin of the spasm. In addition, the activity of individual neurons can be measured via the wiring.\n  Five women and four men participated in the current study. They had electrodes implanted in the so-called temporal lobe of the brain to record the activity of nerve cells. Meanwhile, the participants had to perform simple arithmetic tasks. &#34;We found that different neurons fired during additions than during subtractions,&#34; explains Prof. Florian Mormann from the Department of Epileptology at the University Hospital Bonn.\n It was not the case that some neurons responded only to a &#34;+&#34; sign and others only to a &#34;-&#34; sign: &#34;Even when we replaced the mathematical symbols with words, the effect remained the same,&#34; explains Esther Kutter, who is doing her doctorate in Prof. Mormann&#39;s research group. &#34;For example, when subjects were asked to calculate &#39;5 and 3&#39;, their addition neurons sprang back into action; whereas for &#39;7 less 4,&#39; their subtraction neurons did.&#34;\n This shows that the cells discovered actually encode a mathematical instruction for action. The brain activity thus showed with great accuracy what kind of tasks the test subjects were currently calculating: The researchers fed the cells&#39; activity patterns into a self-learning computer program. At the same time, they told the software whether the subjects were currently calculating a sum or a difference. When the algorithm was confronted with new activity data after this training phase, it was able to accurately identify during which computational operation it had been recorded.\n Prof. Andreas Nieder from the University of T\u00fcbingen supervised the study together with Prof. Mormann. &#34;We know from experiments with monkeys that neurons specific to certain computational rules also exist in their brains,&#34; he says. &#34;In humans, however, there is hardly any data in this regard.&#34; During their analysis, the two working groups came across an interesting phenomenon: One of the brain regions studied was the so-called parahippocampal cortex. There, too, the researchers found nerve cells that fired specifically during addition or subtraction. However, when summing up, different addition neurons became alternately active during one and the same arithmetic task. Figuratively speaking, it is as if the plus key on the calculator were constantly changing its location. It was the same with subtraction. Researchers also refer to this as &#34;dynamic coding.&#34;\n &#34;This study marks an important step towards a better understanding of one of our most important symbolic abilities, namely calculating with numbers,&#34; stresses Mormann. The two teams from Bonn and T\u00fcbingen now want to investigate exactly what role the nerve cells found play in this.   Funding:\n  Publication: Esther F. Kutter, Jan Bostroem, Christian E. Elger, Andreas Nieder, Florian Mormann: Neuronal codes for arithmetic rule processing in the human brain; Current Biology; DOI:  https://doi.org/10.1016/j.cub.2022.01.054  Contact:\n  Some neurons in the brain - become active specifically in addition tasks, others in subtraction.\n  For the study, tiny electrodes were implanted in the brains - of five women and four men to measure the activity of individual neurons.", "posttime": "2022-02-17 17:06:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u795e\u7ecf\u5143,active,\u7814\u7a76", "title": "\u6709\u4e9b\u795e\u7ecf\u5143\u5728\u52a0\u6cd5\u65f6\u662f\u6d3b\u8dc3\u7684\uff0c\u6709\u4e9b\u795e\u7ecf\u5143\u5728\u51cf\u6cd5\u65f6\u662f\u6d3b\u8dc3\u7684", "title_en": "Some neurons are active when adding, others when subtracting", "transed": 1, "url": "https://www.uni-bonn.de/en/news/028-2022", "via": "", "real_tags": ["\u795e\u7ecf\u5143", "active", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073873, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8731\u866b\u4e0d\u4ec5\u4ec5\u662f\u4e00\u79cd\u4e0d\u4fbf\u3002\u5728\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u6b27\u6d32\uff0c\u83b1\u59c6\u75c5\u7b49\u5371\u9669\u4e14\u53ef\u80fd\u81f4\u547d\u7684\u8731\u4f20\u64ad\u75be\u75c5\u6b63\u5728\u4e0a\u5347\uff0c\u5bf9\u4efb\u4f55\u5728\u6237\u5916\u5de5\u4f5c\u6216\u91cd\u65b0\u521b\u9020\u7684\u4eba\u6784\u6210\u5a01\u80c1\u3002\u751f\u7269\u5316\u5b66\u4e0e\u5316\u5b66\u7cfb\u52a9\u7406\u6559\u6388\u83ab\u59ae\u5361\u00b7\u53e4\u5229\u4e9a\u00b7\u52aa\u65af\u9886\u5bfc\u7684\u4e00\u9879\u7814\u7a76\u5408\u4f5c\uff1b\u5185\u534e\u8fbe\u5927\u5b66\u91cc\u8bfa\u6821\u533a\u7684\u5206\u5b50\u751f\u7269\u5b66\u4e3a\u8731\u5f00\u53d1\u4e86\u7a81\u7834\u6027\u7684\u57fa\u56e0\u7f16\u8f91\uff0c\u901a\u8fc7\u51cf\u5c11\u8731\u4f5c\u4e3a\u75be\u75c5\u548c\u75c5\u539f\u4f53\u8f6c\u53d8\u7684\u8f7d\u4f53\uff0c\u53ef\u4ee5\u51cf\u8f7b\u8fd9\u79cd\u516c\u5171\u536b\u751f\u5173\u6ce8\u3002\n\u8be5\u7814\u7a76\u56e2\u961f\u7684\u6700\u65b0\u53d1\u73b0\u53d1\u8868\u5728iScience\u6742\u5fd7\u4e0a\uff0c\u8fd9\u662f\u4e00\u9879\u65b0\u7684\u534f\u8bae\uff0c\u5141\u8bb8\u5728\u8731\u866b\u80da\u80ce\u9636\u6bb5\u8fdb\u884c\u57fa\u56e0\u7f16\u8f91\uff0c\u6b64\u524d\u4eba\u4eec\u8ba4\u4e3a\u8fd9\u662f\u4e0d\u53ef\u80fd\u7684\u3002\nGulia Nuss\u5b9e\u9a8c\u5ba4\u7531\u519c\u4e1a\u3001\u517d\u533b\u548c\u517d\u533b\u5b66\u7cfb\u52a9\u7406\u6559\u6388Andrew Nuss\u53c2\u4e0e\u4e86\u8fd9\u9879\u7814\u7a76\uff1b\u6765\u81ea\u5185\u534e\u8fbe\u5927\u5b66\u91cc\u8bfa\u6821\u533a\u7684\u7267\u8349\u79d1\u5b66\u548c\u4ed6\u7684\u5b9e\u9a8c\u5ba4\uff0c\u4ee5\u53ca\u6ee8\u5dde\u5dde\u7acb\u5927\u5b66\u4f20\u67d3\u75c5\u52a8\u529b\u5b66\u4e2d\u5fc3\u548c\u9a6c\u91cc\u5170\u5927\u5b66\u751f\u7269\u79d1\u5b66\u548c\u751f\u7269\u6280\u672f\u7814\u7a76\u6240\u7684\u7814\u7a76\u4eba\u5458\u3002\u8fd9\u9879\u7814\u7a76\u662f\u7531\u7f8e\u56fd\u56fd\u7acb\u536b\u751f\u7814\u7a76\u9662\u8d44\u52a9\u7684\uff0c\u8be5\u9879\u76ee\u5f97\u5230\u4e86\u5185\u534e\u8fbe\u5927\u5b66\u91cc\u8bfa\u6821\u533a\u5185\u534e\u8fbe\u751f\u7269\u4fe1\u606f\u5b66\u4e2d\u5fc3\u7684\u8fdb\u4e00\u6b65\u5e2e\u52a9\u3002\n\u5728\u8fd9\u9879\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u6210\u529f\u5730\u7528CRISPR-Cas9\u5bf9\u8731\u8fdb\u884c\u4e86\u9776\u5411\u57fa\u56e0\u7834\u574f\uff1a\u80da\u80ce\u6ce8\u5c04\u548c\u53d7\u4f53\u4ecb\u5bfc\u7684\u5375\u5de2\u8d27\u7269\u8f6c\u5bfc\uff08ReMOT Control\uff09\uff0c\u8fd9\u662f\u4e00\u79cd\u8282\u80a2\u52a8\u7269\u57fa\u56e0\u7f16\u8f91\u7684\u52b3\u52a8\u5f3a\u5ea6\u8f83\u4f4e\u7684\u65b9\u6cd5\uff0c\u6700\u65e9\u7531\u5bbe\u5915\u6cd5\u5c3c\u4e9a\u5dde\u7acb\u5927\u5b66\u7684\u5408\u4f5c\u8005Jason Rasgon\u5728\u6606\u866b\u4e2d\u5f00\u53d1\u3002\n\u867d\u7136\u83b1\u59c6\u75c5\u662f\u6700\u5e38\u89c1\u7684\u8731\u4f20\u64ad\u75be\u75c5\uff0c\u4f46\u5728\u7f8e\u56fd\uff0c\u81f3\u5c11\u670920\u79cd\u4e0d\u540c\u7684\u611f\u67d3\u7531\u8731\u4f20\u64ad\u3002\u6bcf\u5e74\u8bca\u65ad\u51fa30\u591a\u4e07\u4f8b\u83b1\u59c6\u75c5\u65b0\u75c5\u4f8b\uff0c\u65b0\u75c5\u4f8b\u6570\u91cf\u548c\u53d1\u73b0\u8731\u7684\u5730\u533a\u90fd\u5728\u589e\u52a0\u3002\n2019\u5e74\u83b7\u5f97\u8be5\u5927\u5b66\u65e9\u671f\u804c\u4e1a\u521b\u65b0\u8005\u5956\u7684\u53e4\u5229\u4e9a\u00b7\u52aa\u65af\u8bf4\uff1a\u201c\u8731\u662f\u4e00\u79cd\u516c\u5171\u536b\u751f\u516c\u5bb3\u3002\u5b83\u4eec\u4f20\u64ad\u8bb8\u591a\u75c5\u539f\u4f53\uff0c\u53ef\u5bfc\u81f4\u4eba\u7c7b\u3001\u4f34\u751f\u52a8\u7269\u548c\u91ce\u751f\u52a8\u7269\u60a3\u75c5\u3002\u201d\u3002\u201c\u6211\u4eec\u9700\u8981\u5728\u5206\u5b50\u6c34\u5e73\u4e0a\u4e86\u89e3\u8731\u7684\u751f\u7269\u5b66\u3002\u5982\u679c\u6211\u4eec\u66f4\u597d\u5730\u4e86\u89e3[\u8731]\u8f7d\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230\u65b0\u7684\u65b9\u6cd5\u6765\u7ba1\u7406\u8731\u548c\u8731\u4f20\u64ad\u75be\u75c5\uff0c\u65e0\u8bba\u662f\u901a\u8fc7\u6740\u87a8\u5242\u3001\u75ab\u82d7\u8fd8\u662f\u836f\u7269\u5f00\u53d1\u3002\u201d\nGulia Nuss\u7684\u5de5\u4f5c\u5f15\u8d77\u4e86\u56fd\u4f1a\u6210\u7acb\u7684\u8731\u4f20\u75be\u75c5\u5de5\u4f5c\u7ec4\u7684\u6ce8\u610f\uff0c\u5979\u9080\u8bf7\u5979\u57282021\u5e7412\u67088\u65e5\u7684\u6700\u65b0\u4f1a\u8bae\u4e0a\u53d1\u8868\u5979\u7684\u516c\u4f17\u5f71\u54cd\u529b\u7814\u7a76\u548c\u5f00\u521b\u6027\u7684\u53d1\u73b0\u3002\u5979\u79f0\u8fd9\u662f\u4e00\u6b21\u201c\u4f1f\u5927\u7684\u7ecf\u5386\u201d\uff0c\u5979\u53ef\u4ee5\u8be6\u7ec6\u9610\u8ff0\u4ed6\u4eec\u6b63\u5728\u5f00\u53d1\u7684\u65b9\u6cd5\u5982\u4f55\u5728\u8731\u866b\u7814\u7a76\u9886\u57df\u5e26\u6765\u65b0\u7684\u91cd\u5927\u53d1\u5c55\u3002\n\u53e4\u5229\u4e9a\u00b7\u52aa\u65af\u8bf4\uff1a\u201c\u8fd9\u662f\u8731\u866b\u9996\u6b21\u5728\u57fa\u56e0\u6c34\u5e73\u4e0a\u8fdb\u884c\u4efb\u4f55\u65b9\u5f0f\u7684\u4fee\u6539\uff0c\u56e0\u6b64\u59d4\u5458\u4f1a\u5bf9\u6b64\u975e\u5e38\u611f\u5174\u8da3\u3002\u201d\u3002\u201c\u59d4\u5458\u4f1a\u6210\u5458\u5e0c\u671b\u66f4\u591a\u5730\u4e86\u89e3[\u6211\u4eec\u5c0f\u7ec4\u7684]\u5de5\u4f5c\uff0c\u4ee5\u53ca\u8fd9\u5982\u4f55\u9002\u7528\u4e8e\u8731\u4f20\u75be\u75c5\u7814\u7a76\u7684\u4e0d\u540c\u9886\u57df\u3002\u201d\nGulia Nuss\u548cAndrew Nuss\u7684\u5b9e\u9a8c\u5ba4\u5171\u540c\u5f00\u53d1\u4e86\u8731\u57fa\u56e0\u7f16\u8f91\u7684\u80da\u80ce\u6ce8\u5c04\u65b9\u6848\u3002\u6709\u4e86\u8fd9\u9879\u65b0\u7684\u53d1\u5c55\uff0c\u7814\u7a76\u4eba\u5458\u53ef\u4ee5\u5f00\u59cb\u7f16\u8f91\u57fa\u56e0\u7ec4\u4e2d\u7684\u4efb\u4f55\u57fa\u56e0\uff0c\u8ba9\u4ed6\u4eec\u80fd\u591f\u63d0\u51fa\u4ee5\u524d\u65e0\u6cd5\u56de\u7b54\u7684\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u5f53\u7f16\u8f91\u6216\u5220\u9664\u67d0\u4e9b\u57fa\u56e0\u65f6\uff0c\u4ed6\u4eec\u53ef\u4ee5\u68c0\u67e5\u8731\u866b\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u4ee5\u53ca\u8fd9\u79cd\u6539\u53d8\u662f\u5426\u4ee5\u5bf9\u4eba\u7c7b\u65e0\u5bb3\u7684\u65b9\u5f0f\u5e72\u6270\u75c5\u539f\u4f53\u7684\u53d1\u5c55\u3002\n\u8fd9\u4e00\u53d1\u73b0\u5e76\u975e\u6ca1\u6709\u6311\u6218\u3002Gulia Nuss\u63cf\u8ff0\u7684\u4e00\u9879\u91cd\u5927\u6597\u4e89\u662f\u5f00\u53d1\u4e00\u79cd\u6ce8\u5c04\u8731\u5375\u7684\u65b9\u6cd5\u3002\u8731\u4e4b\u6240\u4ee5\u72ec\u7279\uff0c\u662f\u56e0\u4e3a\u5b83\u4eec\u5728\u5375\u4e0a\u6d82\u4e0a\u4e86\u5927\u91cf\u7684\u8721\uff0c\u800c\u4e14\u5728\u7814\u7a76\u4eba\u5458\u6210\u529f\u6ce8\u5165\u80da\u80ce\u800c\u4e0d\u6740\u6b7b\u5375\u4e4b\u524d\uff0c\u5fc5\u987b\u6e05\u9664\u8fd9\u4e9b\u8721\u3002\u9a6c\u91cc\u5170\u5927\u5b66\u7684Robert Harrell\u548c\u6606\u866b\u80da\u80ce\u6ce8\u5c04\u4e13\u5bb6\u7684\u534f\u4f5c\u5bf9\u4e8e\u5bfb\u627e\u8731\u80da\u80ce\u5408\u9002\u7684\u6ce8\u5c04\u6761\u4ef6\u662f\u5f88\u91cd\u8981\u7684\u3002\n\u519c\u4e1a\u5b66\u9662\u9662\u957f\u6bd4\u5c14\u00b7\u4f69\u6069\uff08Bill Payne\uff09\u8bf4\uff1a\u201c\u83ab\u59ae\u5361\u548c\u5979\u7684\u5408\u4f5c\u8005\u901a\u8fc7\u5728\u57fa\u56e0\u6c34\u5e73\u4e0a\u4fee\u6539\u8731\u866b\u6765\u964d\u4f4e\u83b1\u59c6\u75c5\u7684\u53d1\u75c5\u7387\uff0c\u4e3a\u6211\u4eec\u5728\u8fd9\u6240\u5927\u5b66\u5f00\u5c55\u7684\u5f00\u521b\u6027\u7814\u7a76\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u8fd9\u4e9b\u7814\u7a76\u5bf9\u516c\u5171\u536b\u751f\u95ee\u9898\u4ea7\u751f\u4e86\u771f\u6b63\u7684\u5f71\u54cd\u3002\u6211\u4eec\u975e\u5e38\u611f\u8c22\u4ed6\u4eec\u52a0\u5165\u6211\u4eec\u7684\u56e2\u961f\u3002\u201d\uff0c\u751f\u7269\u79d1\u6280\u53ca\uff1b\u81ea\u7136\u8d44\u6e90\u3002\n\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u662f\u5728Harrell\u4e0e\u5185\u534e\u8fbe\u5927\u5b66\u91cc\u8bfa\u6821\u533a\u5408\u4f5c\u8bbf\u95ee\u671f\u95f4\u8fdb\u884c\u7684\uff0c\u5728\u8fd9\u671f\u95f4\uff0c\u4ed6\u3001Gulia Nuss\u548cAndrew Nuss\u8003\u8651\u8731\u751f\u7269\u5b66\u548c\u8731\u4e2d\u7684\u817a\u4f53\uff0c\u4ea7\u751f\u8721\u5e76\u8986\u76d6\u5176\u4e2d\u7684\u5375\u3002\u4ed6\u4eec\u5047\u8bbe\uff0c\u5982\u679c\u4ed6\u4eec\u80fd\u79fb\u9664\u817a\u4f53\uff0c\u4ed6\u4eec\u7684\u8721\u95ee\u9898\u5c31\u4f1a\u5f97\u5230\u89e3\u51b3\u3002\u53e4\u5229\u4e9a\u00b7\u52aa\u65af\u8bf4\uff0c\u8fd9\u6700\u7ec8\u662f\u6b63\u786e\u7684\uff0c\u5bfc\u81f4\u4e86\u201c\u6280\u672f\u7a81\u7834\u201d\u3002\n\u5b89\u5fb7\u9c81\u00b7\u52aa\u65af\uff08Andrew Nuss\uff09\u8bf4\uff0c\u4ece\u5176\u4ed6\u4eba\u8fc7\u53bb\u7684\u9057\u4f20\u8f6c\u5316\u7814\u7a76\u4e2d\u5b66\u4e60\u5bf9\u4ed6\u4eec\u6700\u7ec8\u7684\u7a81\u7834\u8d77\u5230\u4e86\u5de8\u5927\u7684\u4f5c\u7528\u3002\u4ed6\u8bf4\uff0c\u901a\u8fc7\u89c2\u5bdf\u54ea\u4e9b\u6709\u6548\uff0c\u54ea\u4e9b\u65e0\u6548\uff0c\u4ed6\u4eec\u7684\u5b9e\u9a8c\u5ba4\u83b7\u5f97\u4e86\u6709\u4ef7\u503c\u7684\u89c1\u89e3\uff0c\u4e3a\u4ed6\u4eec\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u4fe1\u606f\u3002\nGulia Nuss\u5e0c\u671b\uff0c\u968f\u7740\u4ed6\u4eec\u7684\u5b9e\u9a8c\u5ba4\u7ee7\u7eed\u5f00\u53d1\u8fd9\u4e9b\u65b9\u6cd5\uff0c\u4ed6\u4eec\u5c06\u5728\u5927\u5b66\u4ee5\u5916\u7684\u5176\u4ed6\u5b9e\u9a8c\u5ba4\u53ef\u4ee5\u8f7b\u677e\u4f7f\u7528\u5b83\u4eec\u7684\u5730\u65b9\u5f97\u5230\u8db3\u591f\u7684\u53d1\u5c55\u3002\u6709\u4e86\u66f4\u591a\u7814\u7a76\u4eba\u5458\u7684\u4e13\u4e1a\u77e5\u8bc6\u548c\u5408\u4f5c\u52aa\u529b\uff0c\u8731\u866b\u7814\u7a76\u53ef\u4ee5\u53d6\u5f97\u66f4\u591a\u8fdb\u5c55\uff0c\u6700\u7ec8\u51cf\u5c11\u8731\u4f20\u64ad\u75be\u75c5\u7684\u5a01\u80c1\u3002", "note_en": "Ticks are more than an inconvenience. Dangerous and potentially fatal tick-borne diseases such as Lyme disease are on the rise in the United States, Canada and Europe, posing threats to anyone who works or recreates outdoors. A research collaboration led by Monika Gulia-Nuss, assistant professor in the  Department of Biochemistry &amp; Molecular Biology at the University of Nevada, Reno, has developed ground-breaking gene-editing for ticks that could mitigate this public health concern by decreasing the ability of ticks to be a vector for disease and pathogen transition.\n  The research team\u2019s latest discovery, published in  iScience Journal, is a new protocol that allows gene editing at the embryo stage in ticks, previously thought to be impossible.\n    The Gulia-Nuss lab was joined in this research by Andrew Nuss, assistant professor in the  Department of Agriculture, Veterinary &amp; Rangeland Sciences and his lab from the University of Nevada, Reno, along with researchers from The Pennsylvania State University\u2019s Center for Infectious Disease Dynamic and University of Maryland\u2019s Institute for Bioscience and Biotechnology Research. The research was funded by the National Institutes of Health and the project was further assisted by the Nevada Bioinformatics Center at the University of Nevada, Reno.\n  In this study, the researchers successfully carried out targeted gene disruption in ticks with CRISPR-Cas9 using two methods: embryo injection and Receptor-Mediated Ovary Transduction of Cargo (ReMOT Control), a less labor-intensive method of gene-editing in arthropods first developed in insects by collaborator Jason Rasgon at Penn State.\n    While Lyme disease is the most common tick-borne disease, there are at least 20 different infections that are transmitted by ticks in the U.S. More than 300,000 new cases of Lyme disease are diagnosed each year, and the number of new cases and the areas where ticks are found are increasing.\n  \u201cTicks are a public health nuisance. They transmit many pathogens that can cause diseases in humans, companion animals and wild animals,\u201d said Gulia-Nuss, a recipient of the University\u2019s Early Career Innovator Award in 2019.\u00a0 \u201cWe need to understand the biology of ticks on a molecular level. If we understand the [tick] vectors better, we can find new ways to manage ticks and tick-borne diseases as well, either through acaricide, vaccines or drug development.\u201d\n    Gulia-Nuss\u2019s work has attracted the attention of the Congressionally established  Tick-Borne Disease Working Group, which invited her to present her public-impact research and pioneering findings at their most recent meeting on Dec. 8, 2021. She described this as a \u201cgreat experience\u201d where she could elaborate on how the methods they are developing can lead to new and significant developments in the tick research space.\n  \u201cThis is the first time ticks have been modified in any way on the genetic level, so that was really interesting for the committee,\u201d said Gulia-Nuss. \u201cThe committee members wanted to hear more about [our group\u2019s] work and how this could be applicable to different areas of tick-borne disease research.\u201d\n  Together Gulia-Nuss\u2019 and Andrew Nuss\u2019 labs are the first to develop the embryo injection protocol for gene editing for ticks. With this new development, researchers can start editing any gene in the genome, allowing them to ask questions that were not possible to answer before. For example, when editing or removing certain genes, they can examine what happens to the tick and if this alteration interferes with the pathogen development in a way that makes it harmless to humans.\n  The discovery did not come without its challenges. A major struggle that Gulia-Nuss described was developing a way to inject tick eggs. Ticks are unique because they put a large amount of wax on their eggs, and that wax must be removed before the researchers can successfully inject the embryo without killing the egg. Collaboration with Robert Harrell, of the University of Maryland and an expert in insect embryo injections, was important for finding appropriate injection conditions for tick embryos.\n  \u201cBy modifying ticks at a genetic level to try to reduce the incidence of Lyme disease, Monika and her collaborators provide an excellent example of the kind of groundbreaking research we do at this University to have real impact on a public health issue. We\u2019re grateful to have them on our team,&#34; said\u00a0Bill Payne, dean, College of Agriculture, Biotechnology &amp; Natural Resources.\n  The solution came about during a collaborative visit by Harrell to the University of Nevada, Reno, during which he, Gulia-Nuss and Andrew Nuss considered tick biology and a gland in ticks that produces the wax and covers the eggs in it. They hypothesized that if they could remove the gland, their wax problem would be solved. This ended up being correct, resulting in a \u201ctechnological breakthrough,\u201d Gulia-Nuss said.\n  Andrew Nuss said learning from others\u2019 past research on genetic transformation played a huge role in their eventual breakthrough. He said that by looking at what has and hasn\u2019t worked, their labs gained valuable insight that informed their research.\n  Gulia-Nuss hopes that as their labs continue to develop these methods, they will evolve enough where other labs outside of the University can easily use them. With the expertise and collaborative efforts of more researchers, more progress can be achieved in tick research, eventually reducing the tick-borne disease threat.", "posttime": "2022-02-17 17:03:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u75be\u75c5,editing,\u7814\u7a76", "title": "\u6297\u51fb\u8731\u4f20\u75be\u75c5\u7684\u57fa\u56e0\u7f16\u8f91\u53d6\u5f97\u7a81\u7834", "title_en": "Gene-editing breakthrough made in the battle against tick-borne diseases", "transed": 1, "url": "https://www.unr.edu/nevada-today/news/2022/tick-transformation-breakthrough", "via": "", "real_tags": ["\u75be\u75c5", "editing", "\u7814\u7a76"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073871, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2022\u5e742\u670816\u65e5\u7531\u4f55\u585e\u00b7\u963f\u5c14\u6885\u8fbe\u3001\u8a79\u59c6\u65af\u00b7\u591a\u6602\u3001\u7ef4\u5c3c\u4fee\u65af\u00b7\u5f17\u62c9\u52a0\u3001\u6731\u585e\u5229\u8bfa\u00b7\u6731\u585e\u5229\u8bfa\u3001\u5927\u536b\u00b7\u674e\u3001\u51ef\u5c14\u00b7\u6ce2\u7279\u3001\u62c9\u6590\u5c14\u00b7\u6cf0\u52d2\u65af\u51fa\u7248\n\u6211\u4eec\u60f3\u4ecb\u7ecdFlight SQL\uff0c\u8fd9\u662fApache Arrow\u793e\u533a\u5f00\u53d1\u7684\u4e00\u79cd\u65b0\u7684\u5ba2\u6237\u673a-\u670d\u52a1\u5668\u534f\u8bae\uff0c\u7528\u4e8e\u4e0eSQL\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u8be5\u6570\u636e\u5e93\u4f7f\u7528\u5185\u5b58\u4e2d\u7684Arrow\u5217\u683c\u5f0f\u548cFlight RPC\u6846\u67b6\u3002\nFlight SQL\u65e8\u5728\u63d0\u4f9b\u4e0eJDBC\u548cODBC\u7b49\u73b0\u6709API\u5927\u81f4\u76f8\u4f3c\u7684\u529f\u80fd\uff0c\u5305\u62ec\u6267\u884c\u67e5\u8be2\uff1b\u5236\u4f5c\u4e8b\u5148\u51c6\u5907\u597d\u7684\u62a5\u8868\uff1b\u4ee5\u53ca\u83b7\u53d6\u6709\u5173\u652f\u6301\u7684SQL\u65b9\u8a00\u3001\u53ef\u7528\u7c7b\u578b\u3001\u5df2\u5b9a\u4e49\u8868\u7b49\u7684\u5143\u6570\u636e\u3002\u7136\u800c\uff0c\u901a\u8fc7\u6784\u5efaApacheArrow\uff0cFlight SQL\u4f7f\u5ba2\u6237\u7aef\u53ef\u4ee5\u8f7b\u677e\u5730\u4e0eArrow\u672c\u673a\u6570\u636e\u5e93\u8fdb\u884c\u5bf9\u8bdd\uff0c\u800c\u65e0\u9700\u8f6c\u6362\u6570\u636e\u3002\u901a\u8fc7\u4f7f\u7528Flight\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u7ebf\u683c\u5f0f\u7684\u9ad8\u6548\u5b9e\u73b0\uff0c\u8be5\u683c\u5f0f\u652f\u6301\u5373\u65f6\u52a0\u5bc6\u548c\u8eab\u4efd\u9a8c\u8bc1\u7b49\u529f\u80fd\uff0c\u540c\u65f6\u5141\u8bb8\u8fdb\u4e00\u6b65\u4f18\u5316\uff0c\u5982\u5e76\u884c\u6570\u636e\u8bbf\u95ee\u3002\n\u867d\u7136\u5b83\u53ef\u4ee5\u76f4\u63a5\u7528\u4e8e\u6570\u636e\u5e93\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u66ff\u4ee3JDBC/ODBC\u3002\u76f8\u53cd\uff0cFlight SQL\u4f5c\u4e3a\u4e00\u4e2a\u5177\u4f53\u7684\u6709\u7ebf\u534f\u8bae/\u9a71\u52a8\u7a0b\u5e8f\u5b9e\u73b0\uff0c\u53ef\u4ee5\u652f\u6301JDBC/ODBC\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5e76\u51cf\u5c11\u6570\u636e\u5e93\u7684\u5b9e\u73b0\u8d1f\u62c5\u3002\n\u867d\u7136\u50cfJDBC\u548cODBC\u8fd9\u6837\u7684\u6807\u51c6\u51e0\u5341\u5e74\u6765\u4e00\u76f4\u4e3a\u7528\u6237\u63d0\u4f9b\u826f\u597d\u7684\u670d\u52a1\uff0c\u4f46\u5b83\u4eec\u5bf9\u4e8e\u5e0c\u671b\u4f7f\u7528Apache Arrow\u6216\u67f1\u72b6\u6570\u636e\u7684\u6570\u636e\u5e93\u548c\u5ba2\u6237\u673a\u6765\u8bf4\u662f\u4e0d\u591f\u7684\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u57fa\u4e8e\u884c\u7684API\uff08\u5982JDBC\u6216PEP 249\uff09\u9700\u8981\u8f6c\u6362\u6570\u636e\uff0c\u800c\u5bf9\u4e8e\u672c\u8eab\u662f\u5217\u5f0f\u7684\u6570\u636e\u5e93\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u5fc5\u987b\u8f6c\u6362\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u4e3a\u4e86\u5728API\u4e2d\u4ee5\u884c\u7684\u5f62\u5f0f\u5448\u73b0\u6570\u636e\uff0c\u4e00\u6b21\u662f\u4e3a\u4e86\u8ba9\u4f7f\u7528\u8005\u5c06\u6570\u636e\u8fd4\u56de\u5230\u5217\u4e2d\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u867d\u7136ODBC\u7b49API\u786e\u5b9e\u63d0\u4f9b\u4e86\u5bf9\u7ed3\u679c\u7f13\u51b2\u533a\u7684\u6279\u91cf\u8bbf\u95ee\uff0c\u4f46\u8fd9\u4e9b\u6570\u636e\u4ecd\u5fc5\u987b\u590d\u5236\u5230Arrow\u9635\u5217\u4e2d\uff0c\u4ee5\u4fbf\u4e0eTurbodbc\u7b49\u9879\u76ee\u5b9e\u73b0\u7684\u66f4\u5e7f\u6cdb\u7684Arrow\u751f\u6001\u7cfb\u7edf\u4e00\u8d77\u4f7f\u7528\u3002Flight SQL\u65e8\u5728\u6446\u8131\u8fd9\u4e9b\u4e2d\u95f4\u6b65\u9aa4\u3002\nFlight SQL\u610f\u5473\u7740\u6570\u636e\u5e93\u670d\u52a1\u5668\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u6807\u51c6\u63a5\u53e3\uff0c\u8be5\u63a5\u53e3\u4ece\u4e00\u5f00\u59cb\u5c31\u662f\u56f4\u7ed5Apache Arrow\u548c\u5217\u6570\u636e\u8bbe\u8ba1\u7684\u3002\u5c31\u50cfArrow\u63d0\u4f9b\u6807\u51c6\u5185\u5b58\u683c\u5f0f\u4e00\u6837\uff0cFlight SQL\u4f7f\u5f00\u53d1\u4eba\u5458\u65e0\u9700\u8bbe\u8ba1\u548c\u5b9e\u73b0\u5168\u65b0\u7684wire\u534f\u8bae\u3002\u5982\u524d\u6240\u8ff0\uff0cFlight\u5df2\u7ecf\u5b9e\u73b0\u4e86\u4e00\u4e9b\u529f\u80fd\uff0c\u6bd4\u5982\u5728\u7ebf\u52a0\u5bc6\u548c\u8bf7\u6c42\u8ba4\u8bc1\uff0c\u800c\u6570\u636e\u5e93\u4e0d\u9700\u8981\u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\u3002\n\u5bf9\u4e8e\u5ba2\u6237\u7aef\uff0cFlight SQL\u63d0\u4f9b\u4e86\u5bf9\u67e5\u8be2\u7ed3\u679c\u7684\u6279\u91cf\u8bbf\u95ee\uff0c\u800c\u65e0\u9700\u4ece\u5176\u4ed6API\u6216\u683c\u5f0f\u8f6c\u6362\u6570\u636e\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u5c06wire\u534f\u8bae\u7684\u5b9e\u73b0\u5de5\u4f5c\u63a8\u8fdb\u5230Flight\u548cFlight SQL\u5e93\u4e2d\uff0c\u9700\u8981\u4e3a\u6bcf\u79cd\u5ba2\u6237\u673a\u8bed\u8a00\u6216\u9a71\u52a8\u7a0b\u5e8f\u7f16\u5199\u7684\u4ee3\u7801\u5c31\u66f4\u5c11\u4e86\u3002\u901a\u8fc7\u4f7f\u7528Flight Underground\uff0c\u5ba2\u6237\u673a\u548c\u670d\u52a1\u5668\u53ef\u4ee5\u5408\u4f5c\u5b9e\u73b0\u4f18\u5316\uff0c\u6bd4\u5982\u5e76\u884c\u6570\u636e\u8bbf\u95ee\uff0c\u8fd9\u662fFlight\u672c\u8eab\u7684\u6700\u521d\u76ee\u6807\u4e4b\u4e00\u3002\u6570\u636e\u5e93\u53ef\u4ee5\u5c06\u591a\u4e2a\u201c\u7aef\u70b9\u201d\u8fd4\u56de\u7ed9Flight SQL\u5ba2\u6237\u7aef\uff0c\u7136\u540e\u5ba2\u6237\u7aef\u53ef\u4ee5\u5e76\u884c\u5730\u4ece\u6240\u6709\u7aef\u70b9\u63d0\u53d6\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u6570\u636e\u5e93\u540e\u7aef\u80fd\u591f\u6c34\u5e73\u6269\u5c55\u3002\nFlight SQL\u5145\u5206\u5229\u7528\u4e86Flight RPC\u6846\u67b6\u53ca\u5176\u53ef\u6269\u5c55\u6027\uff0c\u901a\u8fc7Protobuf\u5b9a\u4e49\u4e86\u989d\u5916\u7684\u8bf7\u6c42/\u54cd\u5e94\u6d88\u606f\u3002\u6211\u4eec\u5c06\u7b80\u8981\u5730\u4ecb\u7ecd\u4e00\u4e0b\u98de\u884cSQL\u534f\u8bae\uff0c\u4f46\u662fC++\u548cjava\u5df2\u7ecf\u5b9e\u73b0\u4e86\u7ba1\u7406\u8fd9\u9879\u5de5\u4f5c\u7684\u5ba2\u6237\u7aef\u3002\u5b8c\u6574\u7684\u534f\u8bae\u53ef\u4ee5\u5728GitHub\u4e0a\u627e\u5230\u3002\n\u5ba2\u6237\u7aef\u901a\u8fc7GetSchema RPC\u65b9\u6cd5\uff08\u83b7\u53d6\u54cd\u5e94\u7684\u6a21\u5f0f\uff09\u6216GetFlightInfo RPC\u65b9\u6cd5\uff08\u6267\u884c\u8bf7\u6c42\uff09\u53d1\u9001\u8bf7\u6c42\u3002\n\u8bf7\u6ce8\u610f\uff0c\u867d\u7136Flight SQL\u662f\u4f5c\u4e3aApache Arrow 7.0.0\u7684\u4e00\u90e8\u5206\u53d1\u5e03\u7684\uff0c\u4f46\u5b83\u4ecd\u5728\u5f00\u53d1\u4e2d\uff0c\u8be6\u7ec6\u7684\u6587\u6863\u5373\u5c06\u53d1\u5e03\u3002\u7136\u800c\uff0c\u5b9e\u73b0\u5df2\u7ecf\u5728C++\u548cjava\u4e2d\u5df2\u7ecf\u63d0\u4f9b\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4e\u7ea7\u522b\u7684\u5ba2\u6237\u7aef\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u53ca\u53ef\u4ee5\u5b9e\u73b0\u7684\u670d\u52a1\u5668\u9aa8\u67b6\u3002\n\u5bf9\u4e8e\u90a3\u4e9b\u611f\u5174\u8da3\u7684\u4eba\u6765\u8bf4\uff0c\u6e90\u4ee3\u7801\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5305\u88c5Apache Derby\u7684\u670d\u52a1\u5668\u5b9e\u73b0\u548c\u4e00\u4e2a\u5305\u88c5SQLite\u7684\u670d\u52a1\u5668\u5b9e\u73b0\u3002\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6f14\u793a\u5ba2\u6237\u7aef\u7684\u7b80\u5355CLI\u3002\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e2a\u6267\u884c\u67e5\u8be2\u548c\u83b7\u53d6\u7ed3\u679c\u7684\u7b80\u5355\u793a\u4f8b\uff1a\nflight:\uff1aFlightCallOptions\u547c\u53eb_options\uff1b//\u6267\u884c\u67e5\u8be2\uff0c\u83b7\u53d6\u63cf\u8ff0\u5982\u4f55\u83b7\u53d6\u7ed3\u679c\u7684FlightInfo std:\uff1acout&lt&lt&#34;\u6267\u884c\u67e5\u8be2\uff1a&#39&#34;  &lt&\u4e66\u4fe1\u7535\u62a5\uff1b\u6807\u5fd7_query&lt&lt&#34;&#39;&#34;  &lt&\u4e66\u4fe1\u7535\u62a5\uff1bstd\uff1a\uff1aendl\uff1b\u7bad\u5934_ASSIGN _\u6216_RAISE\uff08std:\uff1aunique _ptr&lt\uff1bFlightInfo&gt\uff1bFlightInfo&gt\uff1bFlightInfo\uff0c\u5ba2\u6237\u7aef-&gt\uff1b\u6267\u884c\uff08\u8c03\u7528_\u9009\u9879\uff0c\u6807\u8bb0_\u67e5\u8be2\uff09\uff09\uff1b//\u4e3a\uff08const flight:\uff1aFlightEndpoint&amp\uff1bendpoint:flight_info-&gt\uff1bendpoints\uff08\uff09\uff09\u6309\u987a\u5e8f\u83b7\u53d6\u6bcf\u4e2a\u5206\u533a\uff08\u5c3d\u7ba1\u8fd9\u53ef\u4ee5\u5e76\u884c\u5b8c\u6210\uff09{//\u8fd9\u91cc\u6211\u4eec\u5047\u8bbe\u6bcf\u4e2a\u5206\u533a\u90fd\u4f4d\u4e8e\u6211\u4eec\u6700\u521d\u67e5\u8be2\u7684\u540c\u4e00\u53f0\u670d\u52a1\u5668\u4e0a\uff0c\u4f46\u901a\u5e38\u60c5\u51b5\u4e0b\u5e76\u975e\u5982\u6b64\uff1a\u670d\u52a1\u5668\u53ef\u80fd\u4f1a\u5728\u6211\u4eec\u5fc5\u987b\u8fde\u63a5\u7684\u591a\u53f0//\u5176\u4ed6\u670d\u52a1\u5668\u4e4b\u95f4\u5206\u5272\u67e5\u8be2\u7ed3\u679c\u3002//\u7aef\u70b9\u4e2d\u7684&#34\uff1b\u7968\u8bc1&#34\uff1b\u5bf9\u5ba2\u6237\u7aef\u6765\u8bf4\u662f\u4e0d\u900f\u660e\u7684\u3002\u670d\u52a1\u5668\u4f7f\u7528\u5b83\u6765//\u786e\u5b9a\u8981\u8fd4\u56de\u7684\u67e5\u8be2\u7ed3\u679c\u3002\u7bad\u5934_ASSIGN _\u6216_RAISE\uff08\u81ea\u52a8\u6d41\uff0c\u5ba2\u6237\u7aef-&gt\uff1bDoGet\uff08\u8c03\u7528\u9009\u9879\uff0cendpoint.ticket\uff09\uff09\uff1b//\u5c06\u6240\u6709\u7ed3\u679c\u8bfb\u5165\u7bad\u5934\u8868\uff0c\u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u5728\u8bb0\u5f55//\u6279\u5230\u8fbe\u65f6\u8fed\u4ee3\u5904\u7406\u5b83\u4eec\uff0c\u4ee5\u53castd:\uff1ashared_ptr&lt\uff1b\u7bad\u5934\uff1a\u8868\u683c&gt\uff1b\u684c\u5b50\u7bad\u5934_RETURN_NOT_OK\uff08\u6d41-&gt\uff1bReadAll\uff08&amp\uff1btable\uff09\uff09\uff1b\u6807\u51c6\uff1acout&lt&lt&#34;\u8bfb\u4e00\u4e2a\u5206\u533a\uff1a&#34&lt&\u4e66\u4fe1\u7535\u62a5\uff1bstd\uff1a\uff1aendl\uff1b\u6807\u51c6\uff1acout&lt&\u4e66\u4fe1\u7535\u62a5\uff1b\u8868-&gt\uff1bToString\uff08\uff09&lt&\u4e66\u4fe1\u7535\u62a5\uff1bstd:\uff1aendl\uff1b}\n\u4e0ePyODBC\u7b49\u73b0\u6709\u5e93\u76f8\u6bd4\uff0cArrow Flight\u5df2\u7ecf\u5feb\u4e8620\u500d\uff08\u7ea600:21:00\uff09\u3002Flight SQL\u5c06\u628a\u8fd9\u4e9b\u6027\u80fd\u4f18\u52bf\u6253\u5305\u6210\u4e00\u4e2a\u6807\u51c6\u63a5\u53e3\uff0c\u4f9b\u5ba2\u6237\u673a\u548c\u6570\u636e\u5e93\u5b9e\u73b0\u3002\n\u9884\u8ba1\u5c06\u8fdb\u4e00\u6b65\u5b8c\u5584\u548c\u6269\u5c55\u534f\u8bae\u3002\u8fd9\u9879\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\u662f\u4f7f\u5728\u98de\u884cSQL\u4e0a\u5b9e\u73b0\u50cfJDBC\u8fd9\u6837\u7684API\u6210\u4e3a\u53ef\u80fd\uff1bJDBC\u9a71\u52a8\u7a0b\u5e8f\u6b63\u5728\u79ef\u6781\u5f00\u53d1\u4e2d\u3002\u867d\u7136\u8fd9\u518d\u6b21\u5f15\u5165\u4e86\u6570\u636e\u8f6c\u6362\u7684\u5f00\u9500\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u901a\u8fc7\u5b9e\u73b0Flight SQL\uff0c\u6570\u636e\u5e93\u53ef\u4ee5\u8ba9\u672c\u673a\u5ba2\u6237\u7aef\u548c\u4f20\u7edf\u5ba2\u6237\u7aef\u90fd\u53ef\u4ee5\u8bbf\u95ee\u5b83\u81ea\u5df1\u3002\u672a\u6765\u7684\u5176\u4ed6\u6539\u8fdb\u53ef\u80fd\u5305\u62ecPython\u7ed1\u5b9a\u3001ODBC\u9a71\u52a8\u7a0b\u5e8f\u7b49\u3002\n\u5bf9\u4e8e\u4efb\u4f55\u6709\u5174\u8da3\u53c2\u4e0e\u5176\u4e2d\u7684\u4eba\uff0c\u65e0\u8bba\u662f\u4f5c\u4e3a\u8d21\u732e\u8005\u8fd8\u662f\u91c7\u7528\u8005\uff0c\u8bf7\u8054\u7cfb\u90ae\u4ef6\u5217\u8868\u6216\u52a0\u5165GitHub\u4e0a\u7684\u8ba8\u8bba\u3002", "note_en": "Published   16 Feb 2022     By Jos\u00e9 Almeida, James Duong, Vinicius Fraga, Juscelino Junior, David Li, Kyle Porter, Rafael Telles\n  We would like to introduce Flight SQL, a new client-server protocol developed by the Apache Arrow community for interacting with SQL databases that makes use of the Arrow in-memory columnar format and the Flight RPC framework.\n Flight SQL aims to provide broadly similar functionality to existing APIs like JDBC and ODBC, including executing queries; creating prepared statements; and fetching metadata about the supported SQL dialect, available types, defined tables, and so on.By building on Apache Arrow, however, Flight SQL makes it easy for clients to talk to Arrow-native databases without converting data.And by using  Flight, it provides an efficient implementation of a wire format that supports features like encryption and authentication out of the box, while allowing for further optimizations like parallel data access.\n While it can be directly used for database access, it is not a direct replacement for JDBC/ODBC. Instead, Flight SQL serves as a concrete wire protocol/driver implementation that can support a JDBC/ODBC driver and reduces implementation burden on databases.\n   While standards like  JDBC and  ODBC have served users well for decades, they fall short for databases and clients which wish to use Apache Arrow or columnar data in general.Row-based APIs like JDBC or  PEP 249 require transposing data in this case, and for a database which is itself columnar, this means that data has to be transposed twice\u2014once to present it in rows for the API, and once to get it back into columns for the consumer.Meanwhile, while APIs like ODBC do provide bulk access to result buffers, this data must still be copied into Arrow arrays for use with the broader Arrow ecosystem, as implemented by projects like  Turbodbc.Flight SQL aims to get rid of these intermediate steps.\n Flight SQL means database servers can implement a standard interface that is designed around Apache Arrow and columnar data from the start.Just like how Arrow provides a standard in-memory format, Flight SQL saves developers from having to design and implement an entirely new wire protocol.As mentioned, Flight already implements features like encryption on the wire and authentication of requests, which databases do not need to re-implement.\n For clients, Flight SQL provides bulk access to query results without having to convert data from another API or format.Additionally, by pushing the work of implementing the wire protocol into the Flight and Flight SQL libraries, less code has to be written for each client language or driver.And by using Flight underneath, clients and servers can cooperate to implement optimizations like parallel data access,  one of the original goals of Flight itself.Databases can return multiple \u201cendpoints\u201d to a Flight SQL client, which can then pull data from all of them in parallel, enabling the database backend to horizontally scale.\n  Flight SQL makes full use of the Flight RPC framework and its extensibility, defining additional request/response messages via  Protobuf.We\u2019ll go over the Flight SQL protocol briefly, but C++ and Java already implement clients that manage much of this work.The full  protocol can be found on GitHub.\n  The client sends the request via the GetSchema RPC method (to get the schema of the response) or the GetFlightInfo RPC method (to execute the request).\n               Note that while Flight SQL is shipping as part of Apache Arrow 7.0.0, it is still under development, and detailed documentation is forthcoming.However, implementations are already available in C++ and Java, which provide a low-level client that can be used as well as a server skeleton that can be implemented.\n For those interested, a  server implementation wrapping Apache Derby and  one wrapping SQLite are available in the source.A  simple CLI demonstrating the client is also available. Finally, we can look at a brief example of executing a query and fetching results:\n flight :: FlightCallOptions  call_options ; // Execute the query, getting a FlightInfo describing how to fetch the results std :: cout  &lt;&lt;  &#34;Executing query: &#39;&#34;  &lt;&lt;  FLAGS_query  &lt;&lt;  &#34;&#39;&#34;  &lt;&lt;  std :: endl ; ARROW_ASSIGN_OR_RAISE ( std :: unique_ptr &lt; flight :: FlightInfo &gt;  flight_info ,  client -&gt; Execute ( call_options ,  FLAGS_query )); // Fetch each partition sequentially (though this can be done in parallel) for  ( const  flight :: FlightEndpoint &amp;  endpoint  :  flight_info -&gt; endpoints ())  {  // Here we assume each partition is on the same server we originally queried, but this  // isn&#39;t true in general: the server may split the query results between multiple  // other servers, which we would have to connect to.  // The &#34;ticket&#34; in the endpoint is opaque to the client. The server uses it to  // identify which part of the query results to return.  ARROW_ASSIGN_OR_RAISE ( auto  stream ,  client -&gt; DoGet ( call_options ,  endpoint . ticket ));  // Read all results into an Arrow Table, though we can iteratively process record  // batches as they arrive as well  std :: shared_ptr &lt; arrow :: Table &gt;  table ;  ARROW_RETURN_NOT_OK ( stream -&gt; ReadAll ( &amp; table ));  std :: cout  &lt;&lt;  &#34;Read one partition:&#34;  &lt;&lt;  std :: endl ;  std :: cout  &lt;&lt;  table -&gt; ToString ()  &lt;&lt;  std :: endl ; }\n   Compared to existing libraries like PyODBC,  Arrow Flight is already as much as 20x faster (~00:21:00).Flight SQL will package these performance advantages into a standard interface, ready for clients and databases to implement.\n Further protocol refinements and extensions are expected.Some of this work is to make it possible to implement APIs like JDBC on top of Flight SQL; a JDBC driver is being actively worked on.While this again introduces the overhead of data conversion, it means a database can make itself accessible to both Arrow-native clients and traditional clients by implementing Flight SQL.Other improvements in the future may include Python bindings, an ODBC driver, and more.\n For anyone interested in getting involved, either as a contributor or adopter, please reach out on the  mailing list or join the discussion on  GitHub.", "posttime": "2022-02-17 16:53:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "database,\u6570\u636e\u5e93,arrow,flight", "title": "Apache Arrow Flight SQL\uff1a\u52a0\u901f\u6570\u636e\u5e93\u8bbf\u95ee", "title_en": "Apache Arrow Flight SQL: Accelerating Database Access", "transed": 1, "url": "https://arrow.apache.org/blog/2022/02/16/introducing-arrow-flight-sql/", "via": "", "real_tags": ["database", "\u6570\u636e\u5e93", "arrow", "flight"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073870, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Melody\u662f\u4e00\u79cd\u8bbe\u8ba1\u7528\u4e8e\u7f16\u8bd1\u5e76\u4e0e\u6b63\u5219\u8868\u8fbe\u5f0f\u4fdd\u63011-1\u5173\u7cfb\u7684\u8bed\u8a00\uff0c\u540c\u65f6\u66f4\u5177\u53ef\u8bfb\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\nmelody[\u9009\u9879]&lt\uff1b\u8def\u5f84&gt\uff1b\u9009\u9879\uff1a-f\uff0c--file&lt\uff1b\u6587\u4ef6&gt\uff1b\u5199\u5165\u8f93\u51fa\u6587\u4ef6-n\uff0c-\u65e0\u989c\u8272\u6253\u5370\u8f93\u51fa\uff0c\u65e0\u989c\u8272-V\uff0c-\u7248\u672c\u6253\u5370\u7248\u672c\u4fe1\u606f-h\uff0c-\u5e2e\u52a9\u6253\u5370\u5e2e\u52a9\u4fe1\u606f\nof-\u5728\u4e00\u4e2a\u6570\u5b57\u6216\u4e00\u4e2a\u8303\u56f4\u4e4b\u540e\uff0c\u5728\u4e00\u4e2a\u8981\u5339\u914d\u7684\u5e8f\u5217\u4e4b\u524d\u4f7f\u7528\uff0c\u4f8b\u59825 of&#34\uff1bA&#34\uff1b\uff1b\uff0c\u7b49\u4ef7\u4e8e\u6b63\u5219\u8868\u8fbe\u5f0f{5}\nto-\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u8303\u56f4\uff08\u4f5c\u4e3a\u91cf\u8bcd\u6216\u5b57\u7b26\u8303\u56f4\uff09\uff0c\u4f8b\u59825\u52309\uff0c\u76f8\u5f53\u4e8eregex{5,9}if\u5728of\u6216[5-9]\u4e4b\u524d\n\u6355\u83b7-\u7528\u4e8e\u6253\u5f00\u6355\u83b7\u6216\u547d\u540d\u6355\u83b7\u5757\uff0c\u76f8\u5f53\u4e8eregex\uff08\u2026\uff09\nsome-\u4e0eof\u4e00\u8d77\u7528\u4e8e\u8868\u793a\u4e00\u4e2a\u6216\u591a\u4e2a\u6a21\u5f0f\uff0c\u76f8\u5f53\u4e8eregex+", "note_en": "Melody is a language designed to compile to and maintain a 1-1 relationship with regular expressions, while being more readable and maintainable.\n                     melody [OPTIONS]  &lt;PATH &gt;OPTIONS: -f, --file  &lt;FILE &gt; write to an output file -n, --no-color print output with no color -V, --version print version information -h, --help print  help information\n  of - used after a number or a range and before a sequence to be matched, e.g.  5 of &#34;A&#34;;, equivalent to regex  {5}\n to - used to create a range (either as a quantifier or as a character range), e.g.  5 to 9, equivalent to regex  {5,9} if before an  of or  [5-9] otherwise\n capture - used to open a  capture or named  capture block, equivalent to regex  (...)\n     some - used with  of to express 1 or more of a pattern, equivalent to regex  +", "posttime": "2022-02-17 16:52:26", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u8bd1,language,\u7528\u4e8e", "title": "Melody\u2013\u7f16\u8bd1\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8bed\u8a00", "title_en": "Melody \u2013 a language that compiles to regular expressions", "transed": 1, "url": "https://github.com/yoav-lavi/melody", "via": "", "real_tags": ["\u7f16\u8bd1", "language", "\u7528\u4e8e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073869, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "##\u6211\u4eec\u5728Linux/Ubuntu 18.04\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u9996\u5148\u5b89\u88c5Python 3.6+\uff08\u5efa\u8bae\u4f7f\u7528Anaconda\uff09\u3002\u5bfc\u51faPYTHONPATH=\u3002#\u6784\u5efa\u865a\u62df\u73af\u5883\uff08\u63a8\u8350\uff09\u3002python-m venv-venv-source-venv/bin/activate#\u5b89\u88c5\u8981\u6c42\u3002pip\u5b89\u88c5-U pip\u5b89\u88c5Cython numpy==1.19.1pip\u5b89\u88c5\u706b\u70ac==1.9.0#\u706b\u70ac&gt\uff1b=1.9.0\u5efa\u8bae\u7684PIP\u5b89\u88c5-r\u8981\u6c42\u3002txtsudo apt\u5b89\u88c5-y sox libsox-fmt-mp3bash mfa_usr/install_mfa\u3002sh#\u5b89\u88c5\u5f3a\u5236\u5bf9\u51c6\u5de5\u5177\n@\u6587\u7ae0{ren2021portaspeech\uff0c\u6807\u9898={PortaSpeech:\u53ef\u79fb\u690d\u548c\u9ad8\u8d28\u91cf\u751f\u6210\u6587\u672c\u5230\u8bed\u97f3}\uff0c\u4f5c\u8005{Ren\uff0cYi\u548cLiu\uff0cJinglin\u548cZhao\uff0cZhou}\uff0c\u671f\u520a={\u795e\u7ecf\u4fe1\u606f\u5904\u7406\u7cfb\u7edf\u7684\u8fdb\u5c55}\uff0c\u5377={34}\uff0c\u5e74\u4efd={2021}\n@\u6587\u7ae0{liu2021diffsinger\uff0ctitle={Diffsinger:\u901a\u8fc7\u6d45\u5c42\u6269\u6563\u673a\u5236\u8fdb\u884c\u58f0\u97f3\u5408\u6210}\uff0c\u4f5c\u8005{Liu\uff0cJinglin and Li\uff0cChengxi and Ren\uff0cYi and Chen\uff0cFeiyang and Liu\uff0cPeng and Zhao\uff0cZhou}\uff0c\u671f\u520a{arXiv\u9884\u5370\u672carXiv:2105.02446}\uff0c\u5377{2}\uff0c\u5e74\u4efd{2021}", "note_en": "## We tested on Linux/Ubuntu 18.04.   ## Install Python 3.6+ first (Anaconda recommended). export PYTHONPATH=.  # build a virtual env (recommended).python -m venv venv source venv/bin/activate  # install requirements.pip install -U pippip install Cython numpy==1.19.1pip install torch==1.9.0   # torch &gt;= 1.9.0 recommendedpip install -r requirements.txtsudo apt install -y sox libsox-fmt-mp3bash mfa_usr/install_mfa.sh   # install forced alignment tool\n      @article{ ren2021portaspeech,  title=  {PortaSpeech: Portable and High-Quality Generative Text-to-Speech },  author=  {Ren, Yi and Liu, Jinglin and Zhao, Zhou },  journal=  {Advances in Neural Information Processing Systems },  volume=  {34 },  year=  {2021 }}\n  @article{ liu2021diffsinger,  title=  {Diffsinger: Singing voice synthesis via shallow diffusion mechanism },  author=  {Liu, Jinglin and Li, Chengxi and Ren, Yi and Chen, Feiyang and Liu, Peng and Zhao, Zhou },  journal=  {arXiv preprint arXiv:2105.02446 },  volume=  {2 },  year=  {2021 } }", "posttime": "2022-02-17 16:51:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "huggingface,high,\u5b89\u88c5", "title": "NATSpeech\uff1a\u901a\u8fc7HuggingFace\u6f14\u793a\u5b9e\u73b0\u9ad8\u8d28\u91cf\u7684\u6587\u672c\u5230\u8bed\u97f3", "title_en": "NATSpeech: High Quality Text-to-Speech Implementation with HuggingFace Demo", "transed": 1, "url": "https://github.com/NATSpeech/NATSpeech", "via": "", "real_tags": ["high", "\u5b89\u88c5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073868, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2022\u5e741\u670822\u65e5\u8fd9\u662f\u6211\u7684\u60ef\u4f8b\uff1a\u6bcf\u6b21\u6211\u8fdb\u5165\u4e00\u5bb6\u4e8c\u624b\u4e66\u5e97\uff0c\u6211\u90fd\u4f1a\u76f4\u63a5\u53bb\u7406\u79d1\uff0c\u5bfb\u627e\u65e7\u7684\u7535\u8111\u624b\u518c\u3002\u5b83\u4eec\u5f88\u96be\u627e\u5230\uff0c\u56e0\u4e3a\u4e00\u65e6\u5b83\u4eec\u505c\u6b62\u4f7f\u7528\u7279\u5b9a\u7684\u8bbe\u5907\u6216\u8f6f\u4ef6\uff0c\u4e3b\u4eba\u5f80\u5f80\u4f1a\u628a\u5b83\u4eec\u6254\u6389\u3002\u624b\u518c\u5bf9\u5927\u591a\u6570\u4eba\u6765\u8bf4\u4e5f\u4e0d\u662f\u6700\u5438\u5f15\u4eba\u7684\u8bfb\u7269\uff0c\u8fd9\u589e\u52a0\u4e86\u624b\u518c\u7684\u7a00\u6709\u6027\uff1b\u8eba\u5728\u6d77\u6ee9\u4e0a\u65f6\uff0c\u5f88\u5c11\u6709\u4eba\u613f\u610f\u9605\u8bfbIBM AS/400\u7684\u65e7\u624b\u518c\u3002\n\u7136\u800c\uff0c\u628a\u65e7\u624b\u518c\u5f53\u4f5c\u65e0\u7528\u7684\u7eb8\u5806\uff0c\u8fd9\u5bf9\u5b83\u4eec\u662f\u4e00\u79cd\u4e25\u91cd\u7684\u4f24\u5bb3\u3002\u8bda\u7136\uff0c\u5b83\u4eec\u4e2d\u7684\u8bb8\u591a\u90fd\u5f88\u7cdf\u7cd5\u6216\u5b8c\u5168\u65e0\u804a\uff0c\u4f46\u6709\u4e9b\u5df2\u7ecf\u6210\u719f\uff0c\u5df2\u7ecf\u88ab\u9057\u5fd8\u4e86\u6280\u672f\u77e5\u8bc6\u548c\u9ad8\u8d28\u91cf\u7684\u8bbe\u8ba1\u3002\u65e7\u624b\u518c\u7684\u4f5c\u8005\u901a\u5e38\u6bd4\u73b0\u5728\u7684\u79d1\u6280\u4f5c\u5bb6\u4eab\u6709\u66f4\u591a\u7684\u7f16\u8f91\u8d44\u6e90\uff0c\u5e76\u4e14\u66f4\u52a0\u8c28\u614e\u5730\u7f16\u5199\u624b\u518c\u548c\u6307\u5357\uff0c\u56e0\u4e3a\u4ed6\u4eec\u65e0\u6cd5\u627f\u53d7\u51fa\u7248\u65f6\u51fa\u73b0\u7684\u4e25\u91cd\u9519\u8bef\u3002\nZX Spectrum\u7528\u6237\u6307\u5357\uff081984\uff09\u662f\u4e00\u672c\u8272\u5f69\u6591\u6593\u3001\u6447\u5c3e\u4e5e\u601c\u7684\u4e66\uff0c\u7528\u9ad8\u5ea6\u76f4\u89c2\u7684\u8bf4\u660e\u6307\u5bfc\u65b0\u624b\u3002\n\u8ba9\u6211\u5982\u6b64\u7740\u8ff7\u7684\u662f\uff0c\u5b83\u4eec\u8bb0\u5f55\u4e86\u5e94\u7528\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5386\u53f2\u3002\u8fd9\u8ba9\u6574\u4e2a\u9886\u57df\uff0c\u5305\u62ec\u79d1\u6280\u901a\u4fe1\uff0c\u90fd\u6709\u4e86\u8fc7\u53bb\u7684\u76f8\u4f3c\u4e4b\u5904\u3002\u6211\u4eec\u4e0d\u8981\u5ffd\u89c6\u8fd9\u4e00\u70b9\uff1a\u5728\u4e00\u4e2a\u521d\u521b\u4f01\u4e1a\u4f3c\u4e4e\u5728\u6a21\u7cca\u6216\u4e0d\u5b58\u5728\u7684\u57fa\u7840\u4e0a\u521b\u9020\u65b0\u4e8b\u7269\u7684\u884c\u4e1a\uff0c\u9605\u8bfb\u6709\u5173\u65e7\u8f6f\u4ef6\u7684\u6587\u7ae0\u63d0\u9192\u6211\u4eec\uff0c\u786e\u5b9e\u6709\u4e00\u4e2a\u5de8\u4eba\uff0c\u6211\u4eec\u5df2\u7ecf\u722c\u4e0a\u4e86\u4ed6\u7684\u80a9\u8180\u3002\n\u8fd9\u662f\u4e00\u6b21\u4ee4\u4eba\u8c26\u5351\u7684\u7ecf\u5386\uff0c\u4f46\u4e0d\u4ec5\u4ec5\u662f\u656c\u754f\u5730\u770b\u7740\u6614\u65e5\u7684\u8363\u8000\u3002\u8ba9\u6211\u5217\u51fa\u4e00\u4e9b\u5728\u9605\u8bfb\u4e0d\u592a\u8fc7\u65f6\u7684\u624b\u518c\u65f6\u4e0d\u65ad\u83b7\u5f97\u7684\u89c1\u89e3\uff1a\n\u5728\u8fc7\u53bb\uff0c\u6280\u672f\u4f5c\u8005\u51e0\u4e4e\u5b64\u7acb\u5730\u7f16\u5199\u6587\u6863\uff0c\u5468\u56f4\u662f\u590d\u6742\u800c\u7c7b\u4f3c\u5b64\u7acb\u7684\u4f01\u4e1a\u6587\u5316\u3002\u4ece\u4eba\u7c7b\u5b66\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u65e7\u624b\u518c\u5c31\u50cf\u90e8\u843d\u7684\u624b\u5de5\u827a\u54c1\u3002\u7531\u6b64\u4ea7\u751f\u7684\u6587\u6863\u663e\u793a\u51fa\u4ee4\u4eba\u60ca\u8bb6\u7684\u4e30\u5bcc\u8bbe\u8ba1\u548c\u5185\u5bb9\u6a21\u5f0f\uff0c\u6bd4\u8c37\u6b4c\u641c\u7d22\u5806\u6808\u4ea4\u6362\u95ee\u9898\u548c\u5411\u6761\u72b6\u6587\u6863\u97a0\u8eac\u7684\u65f6\u4ee3\u66f4\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\u3002\n\u6700\u521d\u7684Macintosh\u624b\u518c\uff081984\uff09\u4f7f\u7528\u4e86\u7cbe\u5f69\u7684\u63d2\u56fe\u6765\u89e3\u91ca\u590d\u6742\u7684\u6982\u5ff5\u548c\u8fc7\u7a0b\u3002\u91cc\u9762\u51e0\u4e4e\u6ca1\u6709\u6587\u5b57\u3002\n\u6211\u4eec\u4eca\u5929\u4f7f\u7528\u7684\u5927\u90e8\u5206\u6280\u672f\u90fd\u662f\u57fa\u4e8e\u5927\u5b66\u548c\u7814\u7a76\u5b9e\u9a8c\u5ba4\u53d1\u660e\u7684\u6280\u672f\u3002\u4f8b\u5982\uff0cC\u7f16\u7a0b\u8bed\u8a00\uff0c\u4e5f\u79f0\u4e3aK&amp\uff1b\u300a\u6765\u81ea\u4f5c\u8005\u7684R\u300b\u53d1\u8868\u4e8e70\u5e74\u4ee3\uff0c\u4f46\u4ecd\u88ab\u8ba4\u4e3a\u662f\u6280\u672f\u5199\u4f5c\u7684\u6700\u4f73\u8303\u4f8b\u3002\u4e8b\u5b9e\u4e0a\uff0cC\u8bed\u8a00\u4ecd\u7136\u662f\u6700\u6d41\u884c\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u65e7\u624b\u518c\u662f\u5e38\u9752\u7684\u77e5\u8bc6\uff0c\u53ef\u4ee5\u963b\u6b62\u6211\u4eec\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u91cd\u65b0\u53d1\u660e\u8f6e\u5b50\u3002\nK&amp\uff1bR\u4ece\u7b2c\u4e00\u9875\u7684\u4e00\u4e2a\u4f8b\u5b50\u5f00\u59cb\u3002\u5b83\u7684\u7b80\u6d01\u548c\u52a8\u624b\u7cbe\u795e\u542f\u53d1\u4e86\u51e0\u4ee3\u79d1\u6280\u4f5c\u5bb6\u3002\n\u7531\u4e8e\u65e7\u7684\u624b\u518c\u65e0\u6cd5\u901a\u8fc7\u8d85\u94fe\u63a5\u89e3\u51b3\u95ee\u9898\uff0c\u5b83\u4eec\u901a\u5e38\u6bd4\u73b0\u4ee3\u7f51\u7edc\u6587\u6863\u66f4\u52a0\u72ec\u7acb\uff0c\u800c\u73b0\u4ee3\u7f51\u7edc\u6587\u6863\u6c38\u8fdc\u4e0d\u5b8c\u6574\uff0c\u751f\u6d3b\u5728\u4e00\u79cd\u6c38\u4e45\u7684\u3001\u65e0\u5b9a\u5f62\u7684\u7ef4\u57fa\u72b6\u6001\u4e2d\u3002\u5f53\u524d\u7684\u6587\u6863\u5bb3\u6015\u5413\u552c\u901a\u8fc7\u8c37\u6b4c\u767b\u9646\u5e76\u6e34\u671b\u89e3\u51b3\u65b9\u6848\u7684\u7528\u6237\uff1b\u65e7\u6587\u732e\u6ca1\u6709\u8fd9\u6837\u7684\u7591\u8651\uff0c\u5f53\u9700\u8981\u65f6\uff0c\u5b83\u4eec\u4f1a\u4e50\u4e8e\u6df1\u5165\u7814\u7a76\u6982\u5ff5\u548c\u7406\u8bba\u3002\u8fd9\u662f\u4e00\u79cd\u5b8c\u5168\u4e0d\u540c\u7684\u5fc3\u6001\uff0c\u66f4\u50cf\u662f\u5b66\u6821\u6559\u5e08\u7684\u5fc3\u6001\uff0c\u800c\u4e0d\u662f\u793e\u533a\u7ba1\u7406\u8005\u7684\u5fc3\u6001\u3002\nMS-DOS 6.22\u624b\u518c\uff081994\uff09\u5305\u542b\u4e86\u4ee5\u6c34\u679c\u547d\u540d\u7684\u76ee\u5f55\u7684\u534a\u5e7d\u9ed8\u4f8b\u5b50\u3002\u5f00\u73a9\u7b11\u7684\u7b11\u8bdd\u5f88\u5e38\u89c1\u3002\n\u5728\u65e7\u7535\u8111\u624b\u518c\u4e2d\u6709\u4e00\u79cd\u73b0\u4ee3\u533b\u751f\u5e38\u5e38\u7f3a\u4e4f\u7684\u5e73\u9759\u3002\u53e4\u8001\u7684\u624b\u518c\u82b1\u65f6\u95f4\u548c\u7a7a\u95f4\u6765\u89e3\u91ca\u4e8b\u7269\uff0c\u800c\u4e14\u89e3\u91ca\u7684\u901f\u5ea6\u662f\u5f53\u4eca\u7f55\u89c1\u7684\u3002\u4eca\u5929\u7684\u7a0b\u5e8f\u5458\u901a\u8fc7\u6587\u6863\u75af\u72c2\u5730\u63a7\u5236\u7740+Fing\uff0c\u6253\u5f00\u51e0\u5341\u4e2a\u6807\u7b7e\u6765\u641c\u7d22\u7b54\u6848\u7684\u7247\u6bb5\u3002\u6211\u5e76\u4e0d\u662f\u8bf4\u6211\u4eec\u73b0\u5728\u4f7f\u7528\u6587\u6863\u7684\u65b9\u5f0f\u672c\u8d28\u4e0a\u66f4\u7cdf\uff1b\u76f8\u53cd\uff0c\u6211\u7684\u610f\u601d\u662f\uff0c\u5728\u654f\u6377\u5546\u5e97\u91cc\u5236\u4f5c\u7684\u6587\u6863\u8fd8\u4e0d\u6210\u719f\u7684\u65f6\u4ee3\uff0c\u65e7\u6587\u6863\u53ef\u80fd\u662f\u8d28\u91cf\u7684\u706f\u5854\u3002\u6211\u4eec\u8981\u62e5\u62b1\u6162\u533b\u751f\u5417\uff1f\n\u300a\u9ea6\u91d1\u5854\u5723\u7ecf\u300b\uff08Macintosh Bible\uff0c\u7b2c\u516d\u7248\uff0c1996\u5e74\uff09\u4e2d\u5173\u4e8e\u5b57\u4f53\u7684\u7ae0\u8282\u5f88\u96be\u5fd8\u8bb0\uff0c\u8fd9\u8981\u5f52\u529f\u4e8e\u5b83\u60a0\u95f2\u7684\u6f2b\u6e38\u7cfb\u7edf\u548c\u7b2c\u4e09\u65b9\u5b57\u4f53\u3002\u5b83\u539a\u989c\u65e0\u803b\uff0c\u4ee4\u4eba\u6109\u5feb\uff1b\u4e3a\u4ec0\u4e48\u6211\u4eec\u73b0\u5728\u8fd9\u4e48\u8ba4\u771f\uff1f\u6211\u4e0d\u77e5\u9053\u3002\n\u51fa\u4e8e\u4e0a\u8ff0\u6240\u6709\u539f\u56e0\uff0c\u6211\u8ba4\u4e3a\u6536\u96c6\u548c\u9605\u8bfb\u65e7\u7684\u8ba1\u7b97\u673a\u624b\u518c\u662f\u4e00\u4ef6\u597d\u4e8b\uff0c\u4e5f\u662f\u6280\u672f\u4f5c\u5bb6\u5fc5\u987b\u505a\u7684\u4e8b\u3002\u9605\u8bfb\u8fc7\u53bb\u7684\u8f6f\u4ef6\u548c\u786c\u4ef6\u4e0d\u4ec5\u80fd\u7ed9\u6211\u5e26\u6765\u8fc7\u53bb\u7f8e\u597d\u7684\u56de\u5fc6\uff0c\u8fd8\u80fd\u5e2e\u52a9\u6211\u6210\u4e3a\u4e00\u540d\u66f4\u597d\u7684\u6280\u672f\u4f5c\u5bb6\u3002\n\u4f60\u4e5f\u53ef\u4ee5\u4ece\u4eca\u5929\u5f00\u59cb\u4e0b\u8f7dPDF\u7248\u672c\u7684\u65e7\u624b\u518c\u3002\u4ee5\u4e0b\u94fe\u63a5\u5305\u542b\u8bb8\u591a\u65e7\u624b\u518c\u548c\u8ba1\u7b97\u4e66\u7c4d\uff1a", "note_en": "Jan. 22, 2022   It\u2019s my ritual: every time I enter a secondhand bookshop, I go straight to the  Sciences section and search for old computer manuals. They\u2019re very hard to come by, as their owners tend to throw them away once they stop using a particular device or piece of software. Manuals also happen not to be the most engaging read for most people, which adds to their rarity; few want to peruse an old IBM AS/400 handbook while laying at the beach.\n Disregarding old manuals as useless piles of paper does them a grave disservice, though. Many of them are admittedly awful or outright boring, but some are ripe with forgotten tech lore and high-quality design. The writers of old manuals often enjoyed more editorial resources than tech writers are used to today, and produced handbooks and guides with greater care, because they couldn\u2019t afford gross inaccuracies to go to press.\n  The ZX Spectrum User Guide (1984) is a colourful, tail-wagging joy of a book that guides newbies with highly visual instructions.\n What makes old manuals so fascinating to me is that they document the history of applied computer science. This gives the entire field, including tech comms, the resemblance of a past. Let\u2019s not dismiss that: in a sector where startups seem to build new things on top of blurry or nonexistent foundations, reading about old software reminds us that there\u2019s indeed a giant upon whose shoulders we\u2019ve climbed.\n It\u2019s a humbling experience, but there\u2019s more to it than just looking in awe at the old glory. Let me list some of the insights I keep getting when reading not-so-obsolete manuals:\n In the old days, technical writers produced documentation in near isolation, surrounded by complex and similarly isolated corporate cultures. From an anthropological perspective, old manuals are like tribal artefacts. The resulting docs show surprisingly rich design and content patterns, more refreshing than we\u2019re used to in the age of googling for Stack Exchange questions and of bowing to Stripe docs.\n  The original Macintosh manual (1984) uses brilliant illustrations to explain complex concepts and procedures. There\u2019s very little text in it.\n Most of the tech we use today is based on technology invented in universities and research labs. For example,   The C Programming Language , also known as K&amp;R from its authors, was published in the 70s, but is still considered a prime example of technical writing. The C language, in fact, is still one of the most popular programming languages. Old manuals, in this sense, are evergreen knowledge that can prevent us from reinventing the wheel over and over again.\n  K&amp;R starts with an example right on the first page. Its succinctness and hands-on spirit has inspired several generations of tech writers.\n As old manuals couldn\u2019t hyperlink their way out of trouble, they\u2019re usually more self-contained than modern web documentation, which, never being complete, lives in a perennial, amorphous state of  wikiness. Current docs are afraid of scaring users who land via Google and crave for  solutions; old documentation has no such qualms, and happily delves into concepts and theory when the need arises. It\u2019s an entirely different frame of mind, more akin to that of school teachers than to that of community managers.\n  The MS-DOS 6.22 manual (1994) contains semi-humorous examples of directories named after  fruits. Tongue-in-cheek jokes were common.\n There\u2019s a  calmness in old computers manuals that modern docs often lack. Old handbooks took their time and space to explain things, and did so at a pace that\u2019s rare to find nowadays. Today\u2019s programmers furiously  Control+Fing through docs, opening tens of tabs in search for fragments of an answer. I\u2019m not saying that the way we consume docs now is inherently worse; rather, I\u2019m suggesting that old docs could be a beacon of quality in an age of half-baked docs made in agile shops. Shall we embrace  slow docs?\n  The chapter about fonts of The Macintosh Bible, 6th Ed. (1996) is hard to forget thanks to its leisurely walk through system and third-party fonts. It\u2019s cheeky and delightful; why are we so serious now? I don\u2019t know.\n For all the reasons I\u2019ve just stated above, I think that collecting and reading old computer manuals is a good thing to do, and a must for technical writers. Reading about the software and hardware of yore not only brings me good memories of days past: it also helps me be a better technical writer.\n You too can start today by downloading PDF versions of old handbooks. The following links contain numerous old manuals and computing books:", "posttime": "2022-02-17 16:48:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7535\u8111,\u9605\u8bfb,read,\u624b\u518c", "title": "\u6211\u6536\u96c6\u5e76\u9605\u8bfb\u65e7\u7535\u8111\u624b\u518c", "title_en": "I collect and read old computer manuals", "transed": 1, "url": "https://passo.uno/why-collect-read-old-computer-manuals/", "via": "", "real_tags": ["\u7535\u8111", "\u9605\u8bfb", "read", "\u624b\u518c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073867, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u65b0\u7cfb\u5217\u7684\u7b2c\u4e00\u90e8\u5206\u4e2d\uff0cJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u8bbe\u7f6e\u5206\u5e03\u5f0f\u7aef\u53e3\u751f\u6210\u5668\uff08Distributed Ports Builder\uff0c\u7b80\u79f0dpb\uff09\u3002\u5728\u4ecb\u7ecd\u4e86\u57fa\u672c\u77e5\u8bc6\u548c\u4e00\u4e9b\u9700\u8981\u907f\u514d\u7684\u5e38\u89c1\u7f3a\u9677\u4e4b\u540e\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4e0b\u8f7d\u4e00\u7ec4distfiles\u4ee5\u4f9b\u8131\u673a\u673a\u5668\u4f7f\u7528\uff0c\u4ee5\u53ca\u5982\u4f55\u5c06distfiles\u76ee\u5f55\u4ece\u4e00\u4e2a\u7248\u672c\u6574\u9f50\u5730\u4f20\u9001\u5230\u4e0b\u4e00\u4e2a\u7248\u672c\uff0c\u907f\u514d\u8fc7\u591a\u548c\u4e0d\u5fc5\u8981\u7684\u4e0b\u8f7d\u3002\n\u672c\u5468\uff0cJay\u5411\u6211\u4eec\u4ecb\u7ecd\u4e86\u901a\u8fc7\u7f16\u8bd1\u81ea\u5b9a\u4e49\u5185\u6838\u53ef\u80fd\u5b9e\u73b0\u7684\u529f\u80fd\uff0c\u7136\u540e\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u7f16\u8f91\u5185\u6838\u914d\u7f6e\u6587\u4ef6\uff0c\u518d\u6b21\u907f\u514d\u5e38\u89c1\u7684\u9677\u9631\uff0c\u5e76\u4e86\u89e3\u6211\u4eec&#39\uff1b\u6211\u4eec\u5728\u53d8\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u91cd\u65b0\u7f16\u8bd1\u548c\u5b89\u88c5\u65b0\u5185\u6838\u3002\n\u7d27\u8ddf\u7740\u4e0a\u5468&#39\uff1b\u5728\u7b2c\u4e09\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u4e00\u4e9b\u5185\u6838\u4ee3\u7801\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u7136\u540eJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u4fee\u6539\u5b83\u4ee5\u6539\u53d8\u5b57\u4f53\uff0c\u5411\u63a7\u5236\u53f0\u6dfb\u52a0\u5f69\u8272\u6e10\u53d8\u80cc\u666f\uff0c\u6539\u53d8\u5149\u6807\u7684\u5f62\u72b6\uff0c\u7b49\u7b49\uff01\n\u968f\u7740Jay\u67e5\u770b\u952e\u76d8\u5e03\u5c40\u548cwscons\u4ee3\u7801\uff0c\u672c\u5468\u53c8\u6709\u66f4\u591a\u5185\u6838\u9ed1\u5ba2\u653b\u51fb\u3002\u4eca\u5929\uff0c\u6211\u4eec&#39\uff1b\u6211\u4eec\u5c06\u6539\u53d8\u6211\u4eec\u7684\u6309\u952e\u6620\u5c04\uff0c\u5e76\u4e3a\u6570\u5b57\u952e\u76d8\u627e\u5230\u65b0\u7684\u7528\u9014\uff01\n\u5728\u672c\u7cfb\u5217\u7684\u7b2c\u4e94\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u4e86\u89e3\u4e86\u4e00\u4e9bsoftraid\u4ee3\u7801\uff0c\u8c03\u6574\u4e86RAID-1\u955c\u50cf\u96c6\u7684\u6027\u80fd\uff0c\u5e76\u8bbe\u7f6e\u4e86\u65e0\u5bc6\u7801\u78c1\u76d8\u52a0\u5bc6\u3002\n\u672c\u5468\uff0c\u968f\u7740\u6211\u4eec\u5c06\u6ce8\u610f\u529b\u4ece\u4e25\u683c\u5ba1\u67e5\u5185\u6838\u4ee3\u7801\u8f6c\u79fb\u5230\u66f4\u62bd\u8c61\u7684\u78c1\u76d8\u5206\u533a\u6982\u5ff5\u4e0a\uff0c\u60c5\u51b5\u53d1\u751f\u4e86\u8f7b\u5fae\u7684\u53d8\u5316\u3002\u5982\u679c\u4f60\u8ba4\u4e3a\u78c1\u76d8\u6807\u7b7e\u53ea\u662f\u4e00\u76d2\u8f6f\u76d8\u4e2d\u7684\u7c98\u6027\u7c98\u5408\u5242\uff0c\u90a3\u4e48don&#39\uff1b\u522b\u62c5\u5fc3\uff01\u6211\u4eec&#39\uff1b\u6211\u63a9\u62a4\u4f60\uff01\n\u88abSSL\u641e\u7cca\u6d82\u4e86\uff1f\u5510&#39\uff1b\u6211\u4e0d\u77e5\u9053\u4f60\u7684\u4f01\u4e1a\u793e\u4f1a\u8d23\u4efb\u4ece\u4f60\u7684X509\uff1f\u8bd5\u56fe\u4ece\u51e0\u4e2a\u4e0d\u540c\u7684\u5728\u7ebf\u6307\u5357\u4e2d\u62fc\u51d1\u51fa\u4f60\u9700\u8981\u7684\u4fe1\u606f\uff0c\u4f46\u53d1\u73b0\u5b83\u4eec\u90fd\u4f1a\u8ba9\u4f60\u671d\u7740\u7a0d\u5fae\u4e0d\u540c\u7684\u65b9\u5411\u51fa\u53d1\uff1f\u521b\u5efa\u4e86\u4e00\u4e2a\u81ea\u7b7e\u540d\u8bc1\u4e66\uff0c\u5b83\u770b\u8d77\u6765\u5f88\u597d\uff0c\u4f46\u5728\u5b89\u88c5\u5230\u624b\u673a\u4e0a\u65f6\u5374\u5931\u8d25\u5f97\u5f88\u60e8\uff1f\u5510&#39\uff1b\u522b\u62c5\u5fc3\uff01\u6770\u4f0a\u611f\u53d7\u5230\u4e86\u4f60\u7684\u75db\u82e6\uff0c\u5e76\u4e3a\u4f60\u627e\u5230\u4e86\u7b54\u6848&#39\uff1b\u6211\u4e00\u76f4\u5728\u5bfb\u627e\uff01\n\u8fdc\u7a0b\u8bbf\u95ee\u4e00\u53f0\u670d\u52a1\u5668\u662f\u4e00\u56de\u4e8b\uff0c\u4f46\u5728\u4e00\u7ec4\u5206\u5e03\u5f0f\u673a\u5668\u4e0a\u8fd0\u884c\u4e0d\u540c\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4f3c\u4e4e\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u8de8\u8d8a\u67b6\u6784\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u754c\u9650\u5bf9Jay\u6765\u8bf4\u4e0d\u662f\u95ee\u9898\uff0c\u4ed6\u751a\u81f3\u8fd8\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5982\u4f55\u5728\u6df7\u97f3\u4e2d\u52a0\u5165\u97f3\u9891\u3002\n\u6211\u4eec\u901a\u8fc7\u5b9e\u8df5\u6765\u5b66\u4e60\uff0c\u4f46\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u6709\u65f6\u4f1a\u641e\u5f97\u4e00\u56e2\u7cdf\u3002\u5982\u679c\u4ece\u5934\u5f00\u59cb\u91cd\u65b0\u5b89\u88c5OpenBSD\u770b\u8d77\u6765\u50cf\u4e00\u573a\u5669\u68a6\uff0c\u90a3\u4e48\u672c\u5468&#39\uff1bs\u5206\u671f\u4ed8\u6b3e\u53ea\u4e3a\u4f60\u51c6\u5907\uff01\u7ecf\u8fc7\u516b\u5468\u7684\u5b9e\u9a8c\uff0cJay\u5411\u6211\u4eec\u5c55\u793a\u4e86\u5168\u65b0\u7684\u5f00\u59cb\u5982\u4f55\u786e\u4fdd\u7cfb\u7edf\u5e72\u51c0\uff0c\u907f\u514d\u5347\u7ea7\u95ee\u9898\uff0c\u5408\u7406\u7684\u78c1\u76d8\u5206\u533a\uff0c\u5feb\u901f\u7684\u5907\u4efd\u548c\u6062\u590d\uff0c\u4ee5\u53ca\u826f\u597d\u7684\u964d\u7ea7\u80fd\u529b\uff01\n\u5728\u672c\u7cfb\u5217\u6587\u7ae0\u7684\u6700\u540e\uff0cJay\u4ecb\u7ecd\u4e86OpenBSD\u4e2d\u4e00\u4e9b\u5f88\u5c11\u4f7f\u7528\u7684\u529f\u80fd\uff0c\u8fd9\u4e9b\u529f\u80fd\u5b9e\u9645\u4e0a\u975e\u5e38\u6709\u7528\u3002", "note_en": "In the first installment of this new series, Jay shows us how to set up the Distributed Ports Builder, or dpb. After covering the basics, and a few common pitfalls to avoid, we then see how to download a set of distfiles for use on off-line machines, as well as how to carry your distfiles directory neatly from one release to the next, avoiding excessive and unwanted downloads.\n    This week, Jay runs us through what we might achieve by compiling a custom kernel, then shows us how to edit the kernel configuration files, once again avoiding common pitfalls and understanding the options that we&#39;re changing. Finally we cover how to re-compile and install the new kernel.\n    Hot on the heels of last week&#39;s custom kernel configuration, in this third installment we learn how some of the kernel code works, and then Jay shows us how to modify it to change fonts, add a colored gradient background to the console, change the shape of the cursor, and more!\n    More kernel hacking this week, as Jay looks at keyboard layouts and the wscons code. Today, we&#39;ll be changing our key mappings around and finding new uses for the numeric keypad!\n    In the fifth installment of the series, we learn a bit about the softraid code, tweak performance of our RAID-1 mirror set, and set up passwordless disk encryption.\n    This week sees a slight change of gear, as we move our focus away from strictly reviewing kernel code and look at the more abstract concepts of disk partitioning. If you thought a disk label was just a sticky adhesive in a box of floppies, don&#39;t worry! We&#39;ve got you covered!\n    Confused by SSL? Don&#39;t know your CSR from your X509? Tried to piece together the information you need from several different on-line guides, but found that they all send you off in a slightly different direction? Created a self-signed certificate that looks fine but fails miserably when installed on your cell phone? Don&#39;t worry! Jay feels your pain, and has the answers you&#39;ve been searching for!\n    Remote access to a single server is one thing, but seemlessly running different graphical applications across a distributed set of machines is quite another. Crossing architecture and operating system boundaries is no problem for Jay, and he even shows us how to throw audio into the mix too.\n    We learn things by doing them, but in the process we sometimes make a mess. If re-installing OpenBSD from scratch seems like a nightmare, then this week&#39;s installment is just for you! After eight weeks of experiments, Jay shows us how a fresh start ensures a clean system and avoids upgrade woes, with sensible disk partitioning, quick backup and restore, and the ability to downgrade thrown in for good measure!\n    To conclude this ten-part series, Jay looks at some rarely used features of OpenBSD that are actually quite useful.", "posttime": "2022-02-17 16:46:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9c81\u83bd,guide,jay", "title": "OpenBSD\u7684\u9c81\u83bd\u6307\u5357", "title_en": "A Reckless Guide to OpenBSD", "transed": 1, "url": "https://www.exoticsilicon.com/jay/reckless_guide_to_openbsd/", "via": "", "real_tags": ["\u9c81\u83bd", "guide", "jay"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073865, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\uff08Multi-factor Authentication\uff0c\u7b80\u79f0MFA\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3a2FA\uff09\u662f\u4fdd\u62a4\u60a8\u7684Office 365\u5e10\u6237\u4e0d\u53d7\u8bd5\u56fe\u8bbf\u95ee\u5b83\u4eec\u7684\u653b\u51fb\u8005\u653b\u51fb\u7684\u7edd\u4f73\u65b9\u6cd5\u3002\u4f5c\u4e3a\u7b2c\u4e8c\u79cd\u4fdd\u62a4\u5f62\u5f0f\uff0c\u4ee5\u53ca\u5bc6\u7801\uff0c\u5b83\u63d0\u4f9b\u4e86\u9a8c\u8bc1\u8bd5\u56fe\u767b\u5f55\u7684\u7528\u6237\u771f\u5b9e\u8eab\u4efd\u7684\u8fc7\u7a0b\u4e2d\u7684\u53e6\u4e00\u4e2a\u6b65\u9aa4\u3002\u6709\u5f88\u591aMFA\u9009\u9879\uff0c\u5305\u62ec\u77ed\u4fe1\u3001\u4e00\u6b21\u6027\u5bc6\u7801\uff08OTP\uff09\u548c\u5e94\u7528\u7a0b\u5e8f\u7684\u63a8\u9001\u901a\u77e5\u3002\u867d\u7136\u8fd9\u4e9b\u65b9\u6cd5\u7684\u76ee\u7684\u662f\u63d0\u4f9b\u989d\u5916\u7684\u4fdd\u62a4\uff0c\u4f46\u653b\u51fb\u8005\u4e5f\u5f00\u59cb\u5bfb\u627e\u65b9\u6cd5\u6765\u7834\u574f\u672c\u5e94\u589e\u5f3a\u5b89\u5168\u6027\u7684\u505a\u6cd5\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u6b63\u5728\u7814\u7a76MFA\u75b2\u52b3\uff0c\u91cd\u70b9\u662f\u5f53\u524d\u7684\u653b\u51fb\u5411\u91cf\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u3002\u6211\u4eec\u5c06\u63cf\u8ff0\u4ec0\u4e48\u662fMFA\u75b2\u52b3\uff0c\u5b83\u662f\u5982\u4f55\u6267\u884c\u7684\uff0c\u5e76\u8be6\u7ec6\u8bf4\u660eit\u4e13\u4e1a\u4eba\u5458\u5728\u5176\u7ec4\u7ec7\u5185\u68c0\u6d4b\u548c\u7f13\u89e3\u75b2\u52b3\u7684\u6b65\u9aa4\u3002\nGoSecure Titan\u5b9e\u9a8c\u5ba4\u6839\u636e\u6700\u8fd1\u7684\u8c03\u67e5\uff0c\u5229\u7528MFA\u75b2\u52b3\u653b\u51fb\u786e\u5b9a\u4e86\u65b0\u7684\u5a01\u80c1\u5411\u91cf\u3002\u6211\u4eec\u7684\u56e2\u961f\u8fd8\u53d1\u73b0\uff0c\u4f7f\u7528\u8fd9\u79cd\u6280\u672f\u8fdb\u884c\u7684\u653b\u51fb\u6570\u91cf\u663e\u8457\u589e\u52a0\u3002\n\u5728\u91ce\u5916\uff0c\u79ef\u6781\u6027\u5f88\u9ad8\u4e14\u5df2\u77e5\u5b58\u5728\u5a01\u80c1\u7684\u53c2\u4e0e\u8005\u6b63\u5728\u79ef\u6781\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u6e17\u900fOffice 365\u5e10\u6237\u5e76\u5371\u5bb3\u6574\u4e2a\u7ec4\u7ec7\u3002\u968f\u7740\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u8eab\u4efd\u9a8c\u8bc1\u673a\u5236\u8d8a\u6765\u8d8a\u591a\u5730\u88ab\u91c7\u7528\uff0c\u4f5c\u4e3a\u4e00\u79cd\u66f4\u5b89\u5168\u7684\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u65b9\u5f0f\uff08\u76f8\u5bf9\u4e8e\u77ed\u4fe1\u6216\u7535\u8bdd\uff09\uff0c\u9884\u8ba1\u8fd9\u79cd\u8d8b\u52bf\u5728\u672a\u6765\u4f1a\u589e\u957f\uff0c\u751a\u81f3\u4f1a\u53d7\u5230\u5fae\u8f6f\u672c\u8eab\u7684\u9f13\u52b1\u3002\n\u672f\u8bed\u201cMFA\u75b2\u52b3\u201d\u662f\u6307\u901a\u8fc7\u591a\u4e2a\u8d26\u6237\u4e2d\u7684MFA\u5e94\u7528\u7a0b\u5e8f\uff0c\u7528\u6237\u5728\u4e00\u5929\u4e2d\u6536\u5230\u5927\u91cf\u901a\u77e5\u6216\u63d0\u793a\uff0c\u4ee5\u6267\u884c\u767b\u5f55\u6216\u6279\u51c6\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u8fd9\u4e0d\u5e94\u8be5\u4e0e\u201c\u5bc6\u7801\u75b2\u52b3\u201d\u6df7\u6dc6\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7528\u6237\u5fc5\u987b\u8bb0\u4f4f\u591a\u4e2a\u5e10\u6237\u6216\u4e8b\u4ef6\u7684\u5bc6\u7801\u6216PIN\u7801\u7684\u6570\u91cf\u592a\u591a\u3002MFA\u75b2\u52b3\u548c\u5bc6\u7801\u75b2\u52b3\u786e\u5b9e\u6709\u4e00\u4e2a\u76f8\u4f3c\u7684\u4e3b\u9898\uff0c\u5373\u7528\u6237\u201c\u75b2\u60eb\u4e0d\u582a\u201d\uff08\u6216\u88ab\u6d41\u91cf\u6df9\u6ca1\uff09\uff0c\u5e76\u5c06\u5f00\u59cb\u5c06\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\u653e\u5728\u4e00\u8fb9\uff0c\u53d8\u5f97\u7c97\u5fc3\u5927\u610f\uff0c\u4f7f\u4ed6\u4eec\u7684\u7ec4\u7ec7\u548c\u5e10\u6237\u5904\u4e8e\u5371\u9669\u4e4b\u4e2d\u3002\n\u5982\u524d\u6240\u8ff0\uff0cMFA\u53ef\u4ee5\u4f7f\u7528\u591a\u79cd\u4ecb\u8d28\u5bf9\u7528\u6237\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f8b\u5982SMS\u6d88\u606f\u6216\u7535\u8bdd\uff0c\u5176\u4e2d\u7528\u6237\u901a\u8fc7\u9884\u5148\u914d\u7f6e\u7684\u7535\u8bdd\u53f7\u7801\u9a8c\u8bc1\u5176\u8eab\u4efd\u3002\u4e00\u6b21\u6027\u5bc6\u7801\u6216OTP\u662f\u53e6\u4e00\u79cd\u901a\u8fc7\u751f\u6210\u4ee5\u56fa\u5b9a\u65f6\u95f4\u95f4\u9694\u66f4\u65b0\u7684\u5bc6\u7801\u6765\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u7684\u65b9\u6cd5\u3002\u53e6\u4e00\u79cd\u9009\u62e9\u662f\u4ece\u5e94\u7528\u7a0b\u5e8f\u63a8\u9001\u901a\u77e5\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u7684\u8eab\u4efd\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f7f\u653b\u51fb\u8005\u80fd\u591f\u6267\u884c\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u653b\u51fb\u3002\n\u8fd9\u79cd\u6280\u672f\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u5b83\u53ea\u9700\u8981\u653b\u51fb\u8005\u5728\u5c1d\u8bd5\u767b\u5f55\u53d7\u5bb3\u8005\u5e10\u6237\u65f6\u624b\u52a8\u751a\u81f3\u81ea\u52a8\u53d1\u9001\u91cd\u590d\u63a8\u9001\u901a\u77e5\u3002\u4f7f\u7528\u7684\u51ed\u8bc1\u53ef\u4ee5\u901a\u8fc7\u66b4\u529b\u5f3a\u5236\u3001\u5bc6\u7801\u91cd\u590d\u4f7f\u7528\u6216\u55b7\u6d12\u83b7\u5f97\u3002\u4e00\u65e6\u653b\u51fb\u8005\u83b7\u5f97\u6709\u6548\u51ed\u636e\uff0c\u4ed6\u4eec\u5c06\u91cd\u590d\u6267\u884c\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\uff0c\u76f4\u5230\u7528\u6237\u6279\u51c6\u767b\u5f55\u5c1d\u8bd5\u5e76\u5141\u8bb8\u653b\u51fb\u8005\u8bbf\u95ee\u8be5\u5e10\u6237\u3002\u8fd9\u901a\u5e38\u662f\u56e0\u4e3a\u7528\u6237\u88ab\u901a\u77e5\u5206\u6563\u4e86\u6ce8\u610f\u529b\u6216\u4e0d\u77e5\u6240\u63aa\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5b83\u53ef\u80fd\u88ab\u8bef\u89e3\u4e3a\u9519\u8bef\u6216\u4e0e\u5176\u4ed6\u5408\u6cd5\u8eab\u4efd\u9a8c\u8bc1\u8bf7\u6c42\u6df7\u6dc6\u3002\n\u8fd9\u79cd\u653b\u51fb\u4e4b\u6240\u4ee5\u7279\u522b\u6709\u6548\uff0c\u4e0d\u662f\u56e0\u4e3a\u6240\u6d89\u53ca\u7684\u6280\u672f\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u9488\u5bf9\u7684\u662fMFA\u7684\u4eba\u4e3a\u56e0\u7d20\u3002\u8bb8\u591aMFA\u7528\u6237\u4e0d\u719f\u6089\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\uff0c\u4e5f\u4e0d\u7406\u89e3\u4ed6\u4eec\u6279\u51c6\u7684\u662f\u6b3a\u8bc8\u6027\u901a\u77e5\u3002\u5176\u4ed6\u4eba\u53ea\u662f\u60f3\u8ba9\u5b83\u6d88\u5931\uff0c\u6839\u672c\u4e0d\u77e5\u9053\u81ea\u5df1\u5728\u505a\u4ec0\u4e48\uff0c\u56e0\u4e3a\u4ed6\u4eec\u4e00\u76f4\u5728\u6279\u51c6\u7c7b\u4f3c\u7684\u901a\u77e5\u3002\u4ed6\u4eec\u65e0\u6cd5\u901a\u8fc7\u201c\u901a\u77e5\u8fc7\u8f7d\u201d\u6765\u53d1\u73b0\u5a01\u80c1\u3002\n\u5e78\u8fd0\u7684\u662f\uff0c\u901a\u8fc7\u68c0\u67e5\u767b\u5f55\u65e5\u5fd7\uff0c\u53ef\u4ee5\u76f4\u63a5\u4eceAzure\u95e8\u6237\u68c0\u6d4b\u5230\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8baeIT\u4e13\u4e1a\u4eba\u58eb\u91c7\u53d6\u4ee5\u4e0b\u6b65\u9aa4\uff1a\n\u5728\u76d1\u63a7\u4e0b\uff0c\u60a8\u5c06\u770b\u5230\u767b\u5f55\u65e5\u5fd7\uff0c\u5176\u4e2d\u8bb0\u5f55\u4e86\u6709\u5173\u7528\u6237\u767b\u5f55\u548c\u8d44\u6e90\u7684\u4fe1\u606f\u3002\n\u7136\u540e\uff0c\u901a\u8fc7\u65e0\u6cd5\u83b7\u53d6\u62d2\u7edd\u7684MFA\u63a8\u9001\u901a\u77e5\u5217\u8868\u6765\u8fc7\u6ee4\u767b\u5f55\u72b6\u6001\u3002\n\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u5e94\u5728\u6210\u529f\u5217\u4e0b\u4e3afalse\uff0c\u4e14MFA\u88ab\u62d2\u7edd\uff1b\u7528\u6237\u62d2\u7edd\u4e86\u7ed3\u679c\u8be6\u7ec6\u4fe1\u606f\u4e0b\u7684\u8eab\u4efd\u9a8c\u8bc1\u3002\nAzure\u65e5\u5fd7\u5206\u6790\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5206\u6790\u641c\u7d22\u6b64\u7c7b\u884c\u4e3a\u7684\u67e5\u8be2\u3002\u8fd9\u6837\u7684\u67e5\u8be2\u53ef\u4ee5\u68c0\u7d22\u5927\u91cf\u4fe1\u606f\uff0c\u7528\u4e8e\u68c0\u6d4b\u8fd9\u4e9b\u653b\u51fb\uff1a\n\u7b7e\u540d\n\u6b64\u67e5\u8be2\u5e94\u68c0\u7d22\u4e0a\u4e2a\u6708\u627e\u5230\u7684\u6761\u76ee\uff0c\u5e76\u53ef\u8fdb\u884c\u81ea\u5b9a\u4e49\uff0c\u4ee5\u68c0\u7d22\u66f4\u591a\u7ed3\u679c\uff0c\u6216\u6839\u636e\u641c\u7d22\u7ed3\u679c\u521b\u5efa\u8b66\u62a5\u89c4\u5219\u3002\n\u5982\u679cAzure Sentinel\u6b63\u5728\u4f7f\u7528\uff0c\u90a3\u4e48\u72e9\u730e\u67e5\u8be2\u4e5f\u53ef\u4ee5\u5e94\u7528\u4e8e\u6355\u83b7\u3001\u8b66\u62a5\uff0c\u751a\u81f3\u901a\u8fc7\u5b9e\u73b0\u6e38\u620f\u672c\u6765\u54cd\u5e94\u5339\u914d\u6765\u51cf\u8f7b\u8fd9\u4e9b\u653b\u51fb\u3002\u5728Azure Sentinel\u641c\u7d22\u67e5\u8be2\u5b58\u50a8\u5e93\u4e2d\u53ef\u4ee5\u627e\u5230\u4e00\u4e9b\u793a\u4f8b\u3002\n\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u51cf\u8f7b\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u91cd\u70b9\u4ecb\u7ecd\u5176\u4e2d\u7684\u4e00\u4e9b\u529f\u80fd\uff0c\u4ee5\u4fbfM365\u7ba1\u7406\u5458\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u9002\u5408\u4ed6\u4eec\u9700\u8981\u7684\u529f\u80fd\u3002\u6211\u4eec\u5c06\u91cd\u70b9\u5173\u6ce8\u63a8\u9001\u901a\u77e5\uff0c\u56e0\u4e3a\u5bc6\u7801\u590d\u6742\u6027\u89c4\u5219\u548c\u5bc6\u7801\u91cd\u7528\u7f13\u89e3\u63aa\u65bd\u5e94\u8be5\u5df2\u7ecf\u5230\u4f4d\u3002\n\u4fdd\u62a4\u60a8\u7684Microsoft 365\u5e10\u6237\u514d\u53d7\u6b64\u653b\u51fb\u7684\u4e00\u79cd\u6709\u6548\u65b9\u6cd5\u662f\u914d\u7f6e\u591a\u56e0\u7d20\u8eab\u4efd\u9a8c\u8bc1\u670d\u52a1\u7684\u9ed8\u8ba4\u9650\u5236\u3002\u8fd9\u4e9b\u9650\u5236\uff08\u9ed8\u8ba4\u548c\u6700\u5927\uff09\u53ef\u4ee5\u5728Azure\u8d44\u6e90\u7ba1\u7406\u5668\u6587\u6863\u4e2d\u627e\u5230\u3002\n\u901a\u8fc7\u4f7f\u7528Microsoft Authenticator\u7684\u7535\u8bdd\u767b\u5f55\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u7528\u6237\u53ef\u4ee5\u5e2e\u52a9\u9632\u6b62\u610f\u5916\u8bbf\u95ee\u5176\u5e10\u6237\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5c06\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4e24\u4f4d\u6570\u6570\u5b57\uff0c\u5e76\u4e14\u5fc5\u987b\u5728\u4e24\u4fa7\u8fdb\u884c\u786e\u8ba4\u3002\u8fd9\u5bf9\u4e8e\u653b\u51fb\u8005\u6765\u8bf4\u662f\u5f88\u96be\u59a5\u534f\u7684\uff0c\u56e0\u4e3a\u653b\u51fb\u8005\u4f1a\u5728\u624b\u673a\u4e2d\u770b\u5230\u4e00\u4e2a\u5fc5\u987b\u731c\u6d4b\u7684\u53f7\u7801\uff08\u653b\u51fb\u8005\u65e0\u6743\u8bbf\u95ee\uff09\u3002\u53ea\u6709\u653b\u51fb\u8005\u624d\u77e5\u9053\u8be5\u53f7\u7801\uff0c\u8981\u6279\u51c6\u8bbf\u95ee\uff0c\u7528\u6237\u5fc5\u987b\u4ece\u4e09\u4e2a\u9009\u9879\u4e2d\u9009\u62e9\u4e00\u4e2a\u53f7\u7801\u3002\u8fd9\u6837\u4f1a\u51cf\u5c11\u6279\u51c6\u4e0a\u8ff0\u8bbf\u95ee\u7684\u53ef\u80fd\u6027\u3002\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u6709\u5173\u8fd9\u79cd\u9a8c\u8bc1\u65b9\u6cd5\u7684\u4fe1\u606f\u3002\n\u8fd9\u662f\u4e00\u4e2a\u6fc0\u8fdb\u7684\u4e3e\u63aa\uff0c\u4f46\u4e5f\u662f\u4e00\u4e2a\u5feb\u901f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u56e0\u4e3a\u5b83\u5c06\u7981\u6b62\u4f7f\u7528\u63a8\u9001\u901a\u77e5\u4f5c\u4e3a\u9a8c\u8bc1\u65b9\u6cd5\u3002\u4ee5\u4e0b\u662f\u8fdb\u884c\u6b64\u66f4\u6539\u7684\u6b65\u9aa4\uff1a\n\u5728\u201c\u670d\u52a1\u8bbe\u7f6e\u201d\u9875\u9762\u7684\u201c\u9a8c\u8bc1\u9009\u9879\u201d\u4e0b\uff0c\u6e05\u9664\u201c\u901a\u8fc7\u79fb\u52a8\u5e94\u7528\u7a0b\u5e8f\u901a\u77e5\u201d\u590d\u9009\u6846\u3002\n\u6b63\u5982\u6211\u4eec\u5728\u672c\u6587\u4e2d\u6240\u8ba8\u8bba\u7684\uff0cMFA\u75b2\u52b3\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5b83\u53ef\u80fd\u4f1a\u5371\u53caMicrosoft Office 365\u5e10\u6237\uff0c\u4f46\u6709\u8bb8\u591a\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u62a4\u6211\u4eec\u81ea\u5df1\u514d\u53d7MFA\u75b2\u52b3\u548c\u5f53\u524d\u63a8\u9001\u901a\u77e5\u5783\u573e\u90ae\u4ef6\u653b\u51fb\u7684\u589e\u52a0\u3002\u8981\u4e86\u89e3\u66f4\u591a\u5173\u4e8eGoSecure Titan\u5b9e\u9a8c\u5ba4\u7684\u6700\u65b0\u66f4\u65b0\u548c\u7814\u7a76\uff0c\u8bf7\u5b9a\u671f\u67e5\u770b\u6b64\u535a\u5ba2\uff0c\u5e76\u5728Twitter\u548cLinkedIn\u4e0a\u5173\u6ce8GoSecure\u3002", "note_en": "Multi-factor Authentication or MFA (sometimes referred as 2FA) is an excellent way to protect your Office 365 accounts from attackers trying to gain access to them. As a second form of protection, along with passwords, it supplies another step in the process to verify the real identity of the user trying to log in. There are many MFA options including SMS, One Time Passwords (OTP) and push notifications from an app. And while the intent of these methods is to provide extra protection, attackers have also begun to look for ways to compromise what should be a security enhancing practice. In this case, we are examining MFA Fatigue by focusing on a current attack vector\u2014Push Notification Spamming. We\u2019ll describe what MFA fatigue is, how it is carried out and detail the steps for IT professionals to detect and mitigate it within their organizations.\n   GoSecure Titan Labs identified new threat vectors using MFA Fatigue attacks based on recent investigations. Our team has also observed a significant increase in the number of attacks performed using this technique.\n In the wild, highly motivated and known threat actors are  actively using this kind of method to penetrate Office 365 accounts and compromise entire organizations. As app-based authentication mechanisms are being adopted increasingly as a safer way to authenticate a user (versus SMS or phone call) it is expected that this tendency will grow in the future, even be encouraged by  Microsoft itself.\n   The term \u201cMFA Fatigue\u201d refers to the overload of notifications or prompts via MFA applications, in multiple accounts, that the user receives during the day to perform logins or approve different actions. It should not be confused with \u201c Password Fatigue\u201d in which the user is overwhelmed with the number of passwords or PINs they must remember for multiple accounts or events. MFA Fatigue and Password Fatigue do share a similar theme, that the user is \u201cfatigued\u201d (or overwhelmed by volume) and will start setting security best practices aside and become careless, putting their organization and their accounts in danger of compromise.\n As previously mentioned, MFA can use a diverse set of mediums to authenticate the user, such as SMS messages or phone calls where the user authenticates their identity via a pre-configured phone number. One Time Password or OTP is another way to verify the user\u2019s identity by generating a passcode that is updated in fixed time intervals. Another choice is push notifications from an app. This\u00a0 is the authentication method we are going to be focusing on, as it enables an attacker to perform a  push notification spamming attack.\n   This technique is simple as it only requires the attacker to manually, or even automatically, send repeated push notifications while trying to log into the victim\u2019s account. The credentials used could be obtained via brute forcing, password reuse or spraying. Once the attacker obtains valid credentials, they will perform the push notification spamming repeatedly until the user approves the login attempt and lets the attacker gain access to the account. This usually happens because the user is distracted or overwhelmed by the notifications and, in some cases, it can be misinterpreted as a bug or confused with other legitimate authentication requests.\n This attack is particularly effective not because of the technology involved, but because it targets the human factor of MFA. Many MFA users are not familiar with this type of attack\u00a0 and would not understand they are approving a fraudulent notification. Others just want to make it disappear and are simply not aware of what they are doing since they approve similar notifications all the time. They can\u2019t see through the \u2018notification overload\u2019 to spot the threat.\n    Luckily, this type of attack can be detected directly from the  Azure portal by inspecting the  Sign-in Logs. We highly recommend that IT professionals take the following steps:\n Under the  Monitoring you will find  Sign-in Logs, where the information about user\u2019s sign-ins and resources are logged.\n Then filter the sign-in  Status by  Failure to obtain a list of MFA push notifications denied.\n   Push notifications spamming should be  false under the Succeed column and  MFA denied; user declined the authentication under Result detail.\n   Azure Log Analytics can also be used to analyze the queries in search of this kind of behavior. A query like this can retrieve a lot of information that can be used to detect these attacks:\n SigninLogs\u00a0\r| where TimeGenerated &gt;= ago(31d)\u00a0\r| where ResultType == 500121\u00a0\r| where Status has &#34;MFA Denied; user declined the authentication&#34;\n This query should retrieve the entries found in the last month and can be customized to retrieve even more results or  create alert rules to be notified based on the results of searches.\n If Azure Sentinel is in use, then hunting queries can be applied to also catch, alert and even mitigate these attacks by implementing  playbooks in response to matches. Some examples can be found in the  Azure Sentinel hunting queries repository.\n   There are many ways to mitigate this type of attack. Here, we are going to highlight some of them so that M365 administrators can choose whatever fits their needs. We are going focus on push notifications, since password complexity rules and password reuse mitigations should already be in place.\n   One effective way to protect your Microsoft 365 accounts against this attack is to configure the default limits of the Multi-Factor Authentication service. These limits, both default and maximum, can be found in  Azure Resource Manager documentation.\n   A user can help prevent inadvertent access to their account by using the Microsoft Authenticator\u2019s phone sign-in verification method. In this scenario, a unique two-digit number is generated and must be confirmed on both sides. This is very hard for an attacker to compromise since the attacker is shown a number that must be guessed in the phone (which the attacker doesn\u2019t have access to). Only the attacker will know the number and to approve access, the user would have to pick a number out of three options. This way it will diminish the possibilities of approving said access.  Here you can learn more about this verification method.\n    This is a radical move, but a quick solution as will disable the use of push notification as a  verification method. These are the steps to make this change:\n On the  Service Settings page, under  verification options, and clear the  Notification through mobile app checkbox.\n   As we discussed in this post, MFA Fatigue is a real concern with potential implications to compromise Microsoft Office 365 accounts, but there are many ways to protect ourselves from MFA Fatigue and the current rise in Push Notification Spamming attacks. To learn more about GoSecure Titan Labs latest updates and research, check this blog regularly and follow GoSecure on  Twitter and  LinkedIn.", "posttime": "2022-02-17 16:32:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "microsoft,mfa", "title": "\u5f53\u524d\u9488\u5bf9Microsoft Office 365\u7528\u6237\u7684MFA\u75b2\u52b3\u653b\u51fb\u6d3b\u52a8", "title_en": "Current MFA fatigue attack campaign targeting Microsoft Office 365 users", "transed": 1, "url": "https://www.gosecure.net/blog/2022/02/14/current-mfa-fatigue-attack-campaign-targeting-microsoft-office-365-users/", "via": "", "real_tags": ["microsoft", "mfa"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073864, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u4e66\u7684\u76ee\u6807\u662f\u8bb0\u5f55\u53ea\u4f7f\u7528\u5185\u7f6ebash\u7279\u6027\u6765\u5b8c\u6210\u5404\u79cd\u4efb\u52a1\u7684\u5e38\u89c1\u65b9\u6cd5\u548c\u9c9c\u4e3a\u4eba\u77e5\u7684\u65b9\u6cd5\u3002\u4f7f\u7528\u672c\u300a\u5723\u7ecf\u300b\u4e2d\u7684\u7247\u6bb5\u6709\u52a9\u4e8e\u4ece\u811a\u672c\u4e2d\u5220\u9664\u4e0d\u5fc5\u8981\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u4e14\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f7f\u5b83\u4eec\u66f4\u5feb\u3002\u6211\u5728\u5f00\u53d1neofetch\u3001pxltrm\u548c\u5176\u4ed6\u8f83\u5c0f\u7684\u9879\u76ee\u65f6\u9047\u5230\u4e86\u8fd9\u4e9b\u6280\u5de7\uff0c\u5e76\u53d1\u73b0\u4e86\u4e00\u4e9b\u3002\n\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4f7f\u7528shellcheck\u7f16\u5199\u7684\uff0c\u5e76\u5728\u9002\u7528\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u4e86\u6d4b\u8bd5\u3002\u60f3\u8981\u8d21\u732e\u5417\uff1f\u9605\u8bfb\u6295\u7a3f\u3002\u5b83\u6982\u8ff0\u4e86\u5355\u5143\u6d4b\u8bd5\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff0c\u4ee5\u53ca\u5728\u5723\u7ecf\u4e2d\u6dfb\u52a0\u4ee3\u7801\u7247\u6bb5\u65f6\u9700\u8981\u505a\u4ec0\u4e48\u3002\n\u770b\u5230\u4e00\u4e9b\u63cf\u8ff0\u9519\u8bef\u7684\u4e1c\u897f\u4e86\u5417\uff0c\u6709\u95ee\u9898\u8fd8\u662f\u5b8c\u5168\u9519\u4e86\uff1f\u6253\u5f00\u95ee\u9898\u6216\u53d1\u9001\u8bf7\u6c42\u3002\u5982\u679c\u5723\u7ecf\u9057\u6f0f\u4e86\u4ec0\u4e48\uff0c\u6253\u5f00\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u4f1a\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\n\u7eafbash\u66ff\u4ee3\u5916\u90e8\u8fdb\u7a0b\u548c\u7a0b\u5e8f\u7684\u96c6\u5408\u3002bash\u811a\u672c\u8bed\u8a00\u6bd4\u4eba\u4eec\u610f\u8bc6\u5230\u7684\u5f3a\u5927\uff0c\u5927\u591a\u6570\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728\u4e0d\u4f9d\u8d56\u5916\u90e8\u7a0b\u5e8f\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u3002\n\u5728bash\u4e2d\u8c03\u7528\u5916\u90e8\u8fdb\u7a0b\u4ee3\u4ef7\u9ad8\u6602\uff0c\u8fc7\u5ea6\u4f7f\u7528\u4f1a\u5bfc\u81f4\u660e\u663e\u7684\u901f\u5ea6\u51cf\u6162\u3002\u4f7f\u7528\u5185\u7f6e\u65b9\u6cd5\uff08\u5982\u679c\u9002\u7528\uff09\u7f16\u5199\u7684\u811a\u672c\u548c\u7a0b\u5e8f\u5c06\u66f4\u5feb\uff0c\u9700\u8981\u66f4\u5c11\u7684\u4f9d\u8d56\u6027\uff0c\u5e76\u66f4\u597d\u5730\u7406\u89e3\u8bed\u8a00\u672c\u8eab\u3002\n\u672c\u4e66\u7684\u5185\u5bb9\u4e3a\u89e3\u51b3\u5728bash\u4e2d\u7f16\u5199\u7a0b\u5e8f\u548c\u811a\u672c\u65f6\u9047\u5230\u7684\u95ee\u9898\u63d0\u4f9b\u4e86\u53c2\u8003\u3002\u51fd\u6570\u683c\u5f0f\u7684\u793a\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u5408\u5e76\u5230\u4ee3\u7801\u4e2d\u3002\n\u8fd9\u662fsed\u3001awk\u3001perl\u548c\u5176\u4ed6\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\u3002\u4e0b\u9762\u7684\u51fd\u6570\u901a\u8fc7\u67e5\u627e\u6240\u6709\u524d\u5bfc\u548c\u5c3e\u968f\u7a7a\u683c\uff0c\u5e76\u5c06\u5176\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u548c\u7ed3\u5c3e\u79fb\u52a8\u6765\u5de5\u4f5c\u3002\uff1a\u5185\u7f6e\u53d8\u91cf\u7528\u4e8e\u66ff\u4ee3\u4e34\u65f6\u53d8\u91cf\u3002\ntrim#string\uff08\uff09{#\u7528\u6cd5\uff1atrim#string&#34\uff1b\u793a\u4f8bstring&#34\uff1b\uff1a&#34\uff1b${1#&#34\uff1b${1%[\uff01[\uff1aspace:]*}&#34\uff1b}&#34;  :   &#34; ${{uz%&#34\uff1b${u##*[\uff01[\uff1a\u7a7a\u683c\uff1a]}&#34\uff1b}&#34;  printf&#39\uff1b%s\\n\u548c#39&#34; $_ &#34;}\n\u8fd9\u662fsed\u3001awk\u3001perl\u548c\u5176\u4ed6\u5de5\u5177\u7684\u66ff\u4ee3\u54c1\u3002\u4e0b\u9762\u7684\u51fd\u6570\u901a\u8fc7\u6ee5\u7528\u5206\u8bcd\u6765\u521b\u5efa\u4e00\u4e2a\u6ca1\u6709\u524d\u5bfc/\u5c3e\u968f\u7a7a\u683c\u548c\u622a\u65ad\u7a7a\u683c\u7684\u65b0\u5b57\u7b26\u4e32\u3002\n#shellcheck disable=SC2086\uff0cSC2048 trim#all\uff08\uff09{\u7528\u6cd5\uff1atrim#all&#34\uff1b\u793a\u4f8b\u5b57\u7b26\u4e32&#34\uff1bset-f set--$*printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$*&#34\uff1bset+f}\n$trim_all&#34\uff1b\u4f60\u597d\uff0c\u4e16\u754c&#34\uff1b\u4f60\u597d\uff0cWorld$name=&#34\uff1b\u7ea6\u7ff0\u00b7\u5e03\u83b1\u514b\u662f\u6211\u7684\u540d\u5b57&#34;$ \u4fee\u526a\u5168\u90e8&#34$\u59d3\u540d&#34\uff1b\u7ea6\u7ff0\u00b7\u5e03\u83b1\u514b\u662f\u6211\u7684\u540d\u5b57\u3002\nbash\u7684\u7ed3\u679c&#39\uff1bs regex\u5339\u914d\u53ef\u4ee5\u7528\u4e8e\u66ff\u6362\u5927\u91cf\u7528\u4f8b\u4e2d\u7684sed\u3002\n\u8b66\u544a\uff1a\u8fd9\u662f\u5c11\u6570\u4f9d\u8d56\u4e8e\u5e73\u53f0\u7684bash\u7279\u6027\u4e4b\u4e00\u3002bash\u5c06\u4f7f\u7528\u7528\u6237\u5b89\u88c5\u7684\u4efb\u4f55regex\u5f15\u64ce&#39\uff1bs\u7cfb\u7edf\u3002\u5982\u679c\u4ee5\u517c\u5bb9\u6027\u4e3a\u76ee\u6807\uff0c\u8bf7\u575a\u6301\u4f7f\u7528POSIX\u6b63\u5219\u8868\u8fbe\u5f0f\u529f\u80fd\u3002\n\u6ce8\u610f\uff1a\u672c\u4f8b\u4ec5\u6253\u5370\u7b2c\u4e00\u4e2a\u5339\u914d\u7ec4\u3002\u5f53\u4f7f\u7528\u591a\u4e2a\u6355\u83b7\u7ec4\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u4e00\u4e9b\u4fee\u6539\u3002\nregex\uff08\uff09{#\u7528\u6cd5\uff1aregex&#34\uff1bstring&#34\uff1b&#34\uff1bregex&#34\uff1b[$1=~$2]]\u548cprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${BASH#u\u91cd\u65b0\u5339\u914d[1]&#34\uff1b}\n$#\u4fee\u526a\u524d\u5bfc\u7a7a\u767d\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#39\uff1b\u4f60\u597d&#39&#39;^\\s*\uff08*\uff09\u548c#39\uff1b\u4f60\u597d$#\u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u989c\u8272\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#34#FFFFFF&#34&#39;^\uff08#\uff1f\uff08[a-fA-F0-9]{6}|[a-fA-F0-9]{3}\uff09\uff09$&#39#FFFFFF$#\u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u989c\u8272\uff08\u65e0\u6548\uff09\u3002$\u6b63\u5219\u8868\u8fbe\u5f0f&#34\uff1b\u7ea2\u8272\u548c#34&#39;^\uff08#\uff1f\uff08[a-fA-F0-9]{6}|[a-fA-F0-9]{3}\uff09\uff09$&#39\uff1b#\u65e0\u8f93\u51fa\uff08\u65e0\u6548\uff09\n\u662f_hex_color\uff08\uff09{if[$1=~^\uff08#\uff1f\uff08[a-fA-F0-9]{6}}|[a-fA-F0-9]{3}]\uff09$]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34; ${BASH_\u91cd\u8d5b[1]}&#34\uff1belse printf&#39\uff1b%s\\n\u548c#39&#34;\u9519\u8bef\uff1a$1\u662f\u65e0\u6548\u989c\u8272&#34;  \u8fd4\u56de1 fi}read-r coloris_hex_color&#34$\u989c\u8272&#34\uff1b|124;\u989c\u8272=&#34#FFFFFF&#34\uff1b#\u505a\u4e8b\u3002\nsplit\uff08\uff09{#\u7528\u6cd5\uff1asplit&#34\uff1bstring&#34\uff1bdelimiter&#34\uff1bIFS=$&#39\uff1b\\n&#39\uff1bread-d&#34\uff1b&ra arr&lt\uff1b&lt\uff1b&lt\uff1b&lt\uff1b&gt\uff1b&34\uff1b$1/$2/$&39\uff1b\\n&#39\uff1b]&#34;  printf&#39\uff1b%s\\n\u548c#39&#34; ${arr[@]}&#34\uff1b}\n$split\u548c#34\uff1b\u82f9\u679c\u3001\u6a59\u5b50\u3001\u68a8\u3001\u8461\u8404\u548c#34&#34;, &#34;AppleSRangeSpearsgraps$split\u548c#34\uff1b1, 2, 3, 4, 5 &#34;   &#34;,  &#34;12345#\u591a\u5b57\u7b26\u5206\u9694\u7b26\u4e5f\u6709\u6548\uff01$\u5206\u88c2\u548c#34\uff1b\u4f60\u597d---\u4e16\u754c---\u6211\u7684---\u540d\u5b57---\u662f---\u7ea6\u7ff0&#34&#34;--- &#34;\u6211\u7684\u540d\u5b57\u662f\u7ea6\u7ff0\n$strip#all&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[aeiou]\u548c#34\uff1bTh Qck Brwn\u5916\u6c47$strip#u all\u548c#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[\uff1a\u7a7a\u683c\uff1a][]\u548c#34\uff1bQuickBrownFox$strip#all&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;\u5feb&#34\uff1b\u68d5\u8272\u72d0\u72f8\n$strip&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[aeiou]\u548c#34\uff1b\u7b2c\u56db\u5feb\u68d5\u8272\u72d0\u72f8$strip&#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8&#34&#34;[\uff1a\u7a7a\u683c\uff1a][]\u548c#34\uff1b\u654f\u6377\u7684\u68d5\u8272\u72d0\u72f8\nurlencode\uff08\uff09{#\u7528\u6cd5\uff1aurlencode&#34\uff1bstring&#34\uff1blocal LC#u ALL=C for\uff08\uff08i=0\uff1bi&lt\uff1b${#1}\uff1bi++\uff09\uff1bdo:&#34${1:i:1}&#34\uff1b\u6848\u4f8b&#34\uff1b$#&#34;  \u5728[a-zA-Z0-9.~-]\uff09printf\u548c#39\uff1b%s&#39&#34; $_ &#34; ;;  *)  printf&#39\uff1b%%02X\u548c#39&#34;&#39; $_ &#34; ;;  esac\u5b8c\u6210\u4e86\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b}\n\u5982\u679c[[$var==*sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50\u5b57\u7b26\u4e32\u5728\u53d8\u91cf\u548c34\u4e2d\uff1bfi#\u9006\uff08\u5b50\u5b57\u7b26\u4e32\u4e0d\u5728\u5b57\u7b26\u4e32\u4e2d\uff09\u3002\u5982\u679c[$var\uff01=*sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50#u\u5b57\u7b26\u4e32\u4e0d\u5728\u53d8\u91cf&#34\u4e2d\uff1bfi#\u8fd9\u4e5f\u9002\u7528\u4e8e\u9635\u5217\uff01\u5982\u679c[${arr[*]}==*\u5b50\u5b57\u7b26\u4e32*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u5b50\u5b57\u7b26\u4e32\u5728\u6570\u7ec4\u4e2d&#34; \u83f2\n34\u4f8b$var&#34\uff1b\u5728*sub_string*\uff09#\u505a\u4e8b*sub_string2*\uff09#\u505a\u66f4\u591a\u7684\u4e8b\uff1b*\uff09#\u5176\u4ed6\u7684\u4ee5\u6492\n\u5982\u679c[[$var==sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4ee5sub_\u5b57\u7b26\u4e32\u5f00\u5934&#34; fi#\u9006\uff08var\u4e0d\u4ee5sub#u\u5b57\u7b26\u4e32\u5f00\u5934\uff09\u3002\u5982\u679c[[$var\uff01=sub_string*]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u5f00\u5934&#34; \u83f2\n\u5982\u679c[$var==*sub_string]]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e&#34; fi#\u9006\uff08var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff09\u3002\u5982\u679c[$var\uff01=*\u5b50\u5b57\u7b26\u4e32]]\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;var\u4e0d\u4ee5sub_\u5b57\u7b26\u4e32\u7ed3\u5c3e&#34; \u83f2\n\u542f\u7528extdebug\u5141\u8bb8\u8bbf\u95eeBASH_ARGV\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u53cd\u5411\u5b58\u50a8\u5f53\u524d\u51fd\u6570\u7684\u53c2\u6570\u3002\nreverse#array\uff08\uff09{#\u7528\u6cd5\uff1areverse#array&#34\uff1barray&#34\uff1bshopt-s extdebug f\uff08\uff09\uff08printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${BASH#ARGV[@]&#34\uff1b\uff09\uff1bf&#34\uff1b$@&#34;  shopt-u extdebug}\n\u521b\u5efa\u4e34\u65f6\u5173\u8054\u6570\u7ec4\u3002\u5f53\u8bbe\u7f6e\u5173\u8054ArrayValue\u5e76\u53d1\u751f\u91cd\u590d\u8d4b\u503c\u65f6\uff0cbash\u4f1a\u8986\u76d6\u8be5\u952e\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u6709\u6548\u5730\u5220\u9664\u91cd\u590d\u7684\u9635\u5217\u3002\nremove_array_dups\uff08\uff09{#\u7528\u6cd5\uff1aremove_array_dups&#34\uff1barray&#34\uff1bdeclare-tmp_array for i in&#34\uff1b$@&#34\uff1bdo[$i]]\u548cIFS=&#34\uff1b&#34\uff1btmp#u array[&#=1\u5b8c\u6210\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${\uff01tmp_\u6570\u7ec4[@]}&#34\uff1b}\n$remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 5 5 5 5 512345$arr=\uff08\u7ea2-\u7ea2-\u7eff-\u84dd\uff09$remove_array_dups\u548c#34${arr[@]}&#34\uff1b\u7ea2\u7eff\u84dd\n$array=\uff08\u7ea2\u7eff\u84dd\u9ec4\u68d5\u8272\uff09$random_array_element&#34${array[@]}&#34\uff1b\u9ec4\u8272#\u4e5f\u53ef\u4ee5\u4f20\u9012\u591a\u4e2a\u53c2\u6570\u3002$\u968f\u673a\u6570\u7ec4\u5143\u7d2012345673\n\u6bcf\u6b21\u8c03\u7528printf\u65f6\uff0c\u90fd\u4f1a\u6253\u5370\u4e0b\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u3002\u5f53\u6253\u5370\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u6570\u7ec4\u5143\u7d20\u65f6\uff0c\u5b83\u4f1a\u518d\u6b21\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u3002\narr=\uff08\u82f9\u679c\u6a59\u5b50\u756a\u8304\uff09#\u5143\u7d20\u548c\u7d22\u5f15\u3002\u56e0\u4e3a\u6211\u5728&#34${\uff01\u554a[@]}&#34\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${arr[i]}&#34\uff1b\u5b8c\u6210#\u66ff\u4ee3\u65b9\u6cd5\u3002\u5bf9\u4e8e\uff08\uff08i=0\uff1bi&lt\uff1b${#arr[@]}\uff1bi++\uff09\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; ${arr[i]}&#34\uff1b\u5b8c\u6210\n#\u8d2a\u5a6a\u7684\u4f8b\u5b50\u3002\u5b58\u6863*\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u5728dir\u4e2d\u4fdd\u5b58PNG\u6587\u4ef6\u3002\u7528\u4e8e~/Pictures/*\u4e2d\u7684\u6587\u4ef6\u3002\u5df4\u5e03\u4e9a\u65b0\u51e0\u5185\u4e9a\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u904d\u5386\u76ee\u5f55\u3002\u5bf9\u4e8e~/Downloads/*/\u4e2d\u7684dir\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u7f72\u957f&#34\uff1b\u5b8c\u6210#\u652f\u67b6\u6269\u5c55\u3002\u5bf9\u4e8e/path/to/parentdir/{file1\uff0cfile2\uff0csubdir/file3}\u4e2d\u7684\u6587\u4ef6\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210#\u9012\u5f52\u8fed\u4ee3\u3002shopt-s globstar\u7528\u4e8e~/Pictures/***\u4e2d\u7684\u6587\u4ef6\uff1b\u6253\u5370F&#39\uff1b%s\\n\u548c#39&#34; $\u6587\u4ef6&#34\uff1b\u5b8c\u6210shopt-u globstar\n#Bash&lt\uff1b4\uff08\u4e22\u5f03\u7a7a\u884c\uff09\u3002IFS=$\u548c#39\uff1b\\n&#39\uff1b\u9605\u8bfb-d&#34&#34; -ra\u6587\u4ef6_\u6570\u636e&lt&#34;\u6587\u4ef6&#34\uff1b#Bash&lt\uff1b4\uff08\u4fdd\u7559\u7a7a\u884c\uff09\u3002\u800cread-r\u884c\uff1bdo file_data+=\uff08&#34\uff1b$line&#34\uff1b\uff09\u5b8c\u6210&lt&#34;\u6587\u4ef6&#34\uff1b#Bash 4+mapfile-t file_data&lt&#34;\u6587\u4ef6&#34\uff1b\nhead\uff08\uff09{\u7528\u6cd5\uff1ahead&#34\uff1bn&#34\uff1bfile&#34\uff1bmapfile-tn&#34\uff1b$1&#34\uff1bline&lt\uff1b&#34\uff1b$2&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34$#line[@]\ntail\uff08\uff09{\u7528\u6cd5\uff1atail&#34\uff1bn&#34\uff1b&#34\uff1bfile&#34\uff1bmapfile-tn 0\u884c&lt\uff1b&#34\uff1b$2&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${line[@]\uff1a$1&#34\uff1b]\n$tail 2~/\u3002bashrc#\u542f\u7528tmux\u3002#[-z&#34\uff1b$TMUX&#34\uff1b]]&amp&amp\uff1bexec tmux$tail 1~/\u3002bashrc#[-z&#34\uff1b$TMUX&#34\uff1b]]&amp&amp\uff1b\u6267\u884c\u5b98tmux\nlines\uff08\uff09{\u7528\u6cd5\uff1alines&#34\uff1bfile&#34\uff1bmapfile-tn 0 lines&lt\uff1b&#34\uff1b$1&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${#lines[@]}&#34\uff1b}\n\u8be5\u65b9\u6cd5\u4f7f\u7528\u7684\u5185\u5b58\u6bd4mapfile\u65b9\u6cd5\u5c11\uff0c\u5728bash 3\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff0c\u4f46\u5bf9\u4e8e\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5b83\u7684\u901f\u5ea6\u8f83\u6162\u3002\nlines_loop\uff08\uff09{\u7528\u6cd5\uff1alines_loop&#34\uff1bfile&#34\uff1bcount=0\uff0c\u800cIFS=read-r#do\uff08\uff08count++\uff09done&lt\uff1b&#34\uff1b$1&#34\uff1bprintf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$count 34\uff1b}\n\u5176\u5de5\u4f5c\u539f\u7406\u662f\u5c06glob\u7684\u8f93\u51fa\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7136\u540e\u8ba1\u7b97\u53c2\u6570\u7684\u6570\u91cf\u3002\n#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u3002$count~/Downloads/*232#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u76ee\u5f55\u3002$count~/Downloads/*/45#\u8ba1\u7b97\u76ee\u5f55\u4e2d\u7684\u6240\u6709jpg\u6587\u4ef6\u3002$\u8ba1\u6570~/Pictures/*\u3002jpg64\nextract\uff08\uff09{\u7528\u6cd5\uff1aextract file&#34\uff1bopening marker&#34\uff1b&#34\uff1bclosing marker&#34\uff1b\u800cIFS=$&#39\uff1b\\n&#39\uff1bread-r line\uff1bdo[$extract&amp\uff1b$line\uff01=&#34\uff1b$3&#34\uff1b]&amp&amp\uff1bprintf&#39\uff1b%s\\n\u548c#39&#34; $\u7b2c34\u884c\uff1b[$line==&#34\uff1b$2&#34\uff1b]&amp&amp\uff1b\u6458\u5f55=1[$line==&#34\uff1b$3&#34\uff1b]]&amp&amp\uff1b\u63d0\u53d6=\u5b8c\u6210&lt&#34; $1 &#34;}\ndirname\uff08\uff09{#\u7528\u6cd5\uff1adirname&#34\uff1bpath&#34\uff1blocal tmp=${1:-.}[[$tmp\uff01=*[\uff01/]*]&amp&amp\uff1b{printf&#39\uff1b/\\n&#39\uff1breturn}tmp=${tmp%%&#34\uff1b${tmp###*[\uff01/]}&#34\uff1b}[$tmp\uff01=*/*]&amp&amp\uff1b{printf&#39\uff1b\\n&#39\uff1breturn}tmp=${tmp%/*}tmp=${tmp%&#34\uff1b${tmp###*[\uff01/]}&#34\uff1b}printf&#39\uff1b%s\\n\u548c#39&#34; ${tmp:-/}&#34\uff1b}\nbasename\uff08\uff09{\u7528\u6cd5\uff1abasename&#34\uff1bpath&#34\uff1b[&#34\uff1b\u540e\u7f00&#34\uff1b]\u672c\u5730tmp tmp=${1%&#34\uff1b${1##*[\uff01/]}&#34\uff1b}tmp=${tmp##*/}tmp=${tmp%&#34\uff1b${2/&#34\uff1b$tmp&#34\uff1b}&#34;}  printf&#39\uff1b%s\\n\u548c#39&#34; ${tmp:-/}&#34\uff1b}\n$hello_world=&#34\uff1b\u4ef7\u503c&#34\uff1b#\u521b\u5efa\u53d8\u91cf\u540d\u3002$var=&#34\uff1b\u4e16\u754c&#34\uff1b\u7f8e\u5143ref=&#34\uff1b\u4f60\u597d\uff0c$var&#34\uff1b#\u6253\u5370\u5b58\u50a8\u5728&#39\u4e2d\u7684\u53d8\u91cf\u540d\u7684\u503c\uff1b\u4f60\u597d$var&#39\uff1b$printf&#39\uff1b%s\\n\u548c#39&#34; ${\uff01ref}&#34\uff1b\u4ef7\u503c\n\u4e0e\u666e\u904d\u7684\u770b\u6cd5\u76f8\u53cd\uff0c\u5229\u7528\u539f\u59cb\u9003\u9038\u5e8f\u5217\u6ca1\u6709\u95ee\u9898\u3002\u4f7f\u7528tput\u63d0\u53d6\u4e0e\u624b\u52a8\u6253\u5370\u76f8\u540c\u7684ANSI\u5e8f\u5217\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0ctput\u5b9e\u9645\u4e0a\u5e76\u4e0d\u4fbf\u643a\u3002\u6709\u5f88\u591atput\u53d8\u4f53\uff0c\u6bcf\u4e2a\u90fd\u6709\u4e0d\u540c\u7684\u547d\u4ee4\u548c\u8bed\u6cd5\uff08\u5728FreeBSD\u7cfb\u7edf\u4e0a\u5c1d\u8bd5tput setaf 3\uff09\u3002\u539f\u59cb\u5e8f\u5217\u5f88\u597d\u3002\n\u6ce8\u610f\uff1a\u5728\u4e0b\u9762\u4efb\u4f55\u4ee3\u7801\u524d\u52a0\u4e0a2\uff0c\u5c06\u5176\u53d8\u6210&#39\uff1bs\u6548\u679c\u5173\u95ed\uff08\u793a\u4f8b\uff1a21=\u7c97\u4f53\u6587\u672c\u5173\u95ed\uff0c22=\u6a21\u7cca\u6587\u672c\u5173\u95ed\uff0c23=\u659c\u4f53\u6587\u672c\u5173\u95ed\uff09\u3002\n\u5c55\u5f00\u5230\u4ee5VAR\u5f00\u5934\u7684\u53d8\u91cf\u540d\u7684IFS\u5206\u9694\u5217\u8868\u3002\u5982\u679c\u53cc\u5f15\u53f7\uff0c\u6bcf\u4e2a\u53d8\u91cf\u540d\u5c06\u5c55\u5f00\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u5355\u8bcd\u3002\n\u4eceN\u4e2a\u5b57\u7b26\u5230N\u4e2a\u5b57\u7b26\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32\u3002\uff08${VAR:10:10}\uff1a\u4ecechar 10\u5230char 20\u83b7\u53d6\u5b50\u5b57\u7b26\u4e32\uff09\n#\u8bed\u6cd5\uff1a{&lt\uff1b\u5f00\u59cb&gt\uff1b.&lt\uff1b\u7ed3\u675f&gt\uff1b}\u6253\u5370\u6570\u5b571-100\u3002echo{1..100}#\u6253\u5370\u6d6e\u52a8\u8303\u56f4\u3002\u56de\u58f01\u3002{1..9}#\u6253\u5370\u5b57\u7b26a-z.echo{a..z}echo{a..z}#\u5d4c\u5957\u3002echo{A..Z}{0..9}#\u6253\u5370\u96f6\u586b\u5145\u6570\u5b57\u3002#\u8b66\u544a\uff1abash4+echo{01..100}#\u66f4\u6539\u589e\u91cf\u91d1\u989d\u3002#\u8bed\u6cd5\uff1a{&lt\uff1b\u5f00\u59cb&gt\uff1b.&lt\uff1b\u7ed3\u675f&gt\uff1b&lt\uff1b\u9012\u589e&gt\uff1b}\u8b66\u544a\uff1abash4+echo{1..10..2}#\u589e\u52a02\u3002\n\u5982\u679c\u6587\u4ef6\u6bd4\u6587\u4ef62\u65b0\uff08\u4f7f\u7528\u4fee\u6539\u65f6\u95f4\uff09\uff0c\u6216\u8005\u6587\u4ef6\u5b58\u5728\u800c\u6587\u4ef62\u4e0d\u5b58\u5728\u3002\n\u5982\u679c\u6587\u4ef6\u65e9\u4e8e\u6587\u4ef62\uff08\u4f7f\u7528\u4fee\u6539\u65f6\u95f4\uff09\uff0c\u6216\u8005\u6587\u4ef62\u5b58\u5728\u800c\u6587\u4ef6\u4e0d\u5b58\u5728\u3002\n#\u5982\u679cvar2\u5927\u4e8evar\uff0c\u5219\u5c06var\u7684\u503c\u8bbe\u7f6e\u4e3avar2\u3002#var:\u8981\u8bbe\u7f6e\u7684\u53d8\u91cf\u3002#var2&gt\uff1bvar\uff1a\u8981\u6d4b\u8bd5\u7684\u6761\u4ef6\u3002#\uff1fvar2\uff1a\u5982\u679c\u6d4b\u8bd5\u6210\u529f\u3002#\u5982\u679c\u6d4b\u8bd5\u5931\u8d25\u3002\uff08\uff08var=var 2&gt\uff1bvar\uff1fvar 2:var\uff09\uff09\n\u9677\u9631\u5141\u8bb8\u811a\u672c\u5728\u5404\u79cd\u4fe1\u53f7\u4e0a\u6267\u884c\u4ee3\u7801\u3002\u5728pxltrm\uff08\u4e00\u4e2a\u7528bash\u7f16\u5199\u7684\u50cf\u7d20\u827a\u672f\u7f16\u8f91\u5668\uff09\u4e2d\uff0c\u9677\u9631\u7528\u4e8e\u5728\u8c03\u6574\u7a97\u53e3\u5927\u5c0f\u65f6\u91cd\u65b0\u7ed8\u5236\u7528\u6237\u754c\u9762\u3002\u53e6\u4e00\u4e2a\u7528\u4f8b\u662f\u5728\u811a\u672c\u9000\u51fa\u65f6\u6e05\u7406\u4e34\u65f6\u6587\u4ef6\u3002\n\u5e94\u8be5\u5728\u811a\u672c\u5f00\u59cb\u9644\u8fd1\u6dfb\u52a0\u9677\u9631\uff0c\u4ee5\u4fbf\u6355\u83b7\u4efb\u4f55\u65e9\u671f\u9519\u8bef\u3002\n\u5982\u679c\u4e0d\u9700\u8981unicode\uff0c\u53ef\u4ee5\u7981\u7528\u5b83\u4ee5\u63d0\u9ad8\u6027\u80fd\u3002\u7ed3\u679c\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u4f46\u662fneofetch\u548c\u5176\u4ed6\u7a0b\u5e8f\u5df2\u7ecf\u6709\u4e86\u660e\u663e\u7684\u6539\u8fdb\u3002\n\u6ce8\u610f\uff1a\u6709\u65f6\u4eba\u4eec\u53ef\u80fd\u6709\u5145\u5206\u7684\u7406\u7531\u4f7f\u7528#/bin/bash\u6216\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u53e6\u4e00\u4e2a\u76f4\u63a5\u8def\u5f84\u3002\n&#34; $\u4e3b\u673a\u540d&#34\uff1b#\u6ce8\u610f\uff1a\u6b64\u53d8\u91cf\u53ef\u80fd\u4e3a\u7a7a\u3002#\uff08\u53ef\u9009\uff09\u5c06\u56de\u9000\u8bbe\u7f6e\u4e3ahostname\u547d\u4ee4&#34; ${HOSTNAME:-$\uff08HOSTNAME\uff09}&#34\uff1b\n\u8fd9\u53ef\u4ee5\u7528\u4e8e\u4e3a\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u6dfb\u52a0\u6761\u4ef6\u652f\u6301\uff0c\u800c\u65e0\u9700\u8c03\u7528uname\u3002\n\u6bcf\u6b21\u4f7f\u7528$RANDOM\u65f6\uff0c\u90fd\u4f1a\u8fd4\u56de\u4e00\u4e2a\u4ecb\u4e8e0\u548c32767\u4e4b\u95f4\u7684\u4e0d\u540c\u6574\u6570\u3002\u6b64\u53d8\u91cf\u4e0d\u5e94\u7528\u4e8e\u4efb\u4f55\u4e0e\u5b89\u5168\u6027\u76f8\u5173\u7684\u5185\u5bb9\uff08\u5305\u62ec\u52a0\u5bc6\u5bc6\u94a5\u7b49\uff09\u3002\n\u5728\u7eafbash\u548cstty/tput\u4e2d\u7f16\u5199\u811a\u672c\u65f6\uff0c\u8fd9\u5f88\u65b9\u4fbf\u3002\nget_term_size\uff08\uff09{#\u7528\u6cd5\uff1aget_term_size#\uff08\uff1a\uff1a\uff09\u662f\u4e00\u4e2a\u5fae\u7761\u7720\uff0c\u4ee5\u786e\u4fdd\u53d8\u91cf\u7acb\u5373\u5bfc\u51fa\u3002shopt-s checkwinsize\uff1b\uff08\uff1a\uff1a\uff1a\uff09printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b$LINES$COLUMNS&#34\uff1b}\n\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u7528\u6cd5\uff1a\u83b7\u53d6\u7a97\u6237\u5c3a\u5bf8\u56fe\u5c3a\u5bf8\u5370\u5237F\u548c39\uff1b%b\u548c39\uff1bb\u548c[35\uff1b39\uff1bb\u548c[35\uff1b34\uff1bb\u548c39\uff1bb\u548c39\uff1b\u9605\u8bfb-t-t-t-t 0.05-sra\u672f\u8bedt t t-t-t 0.05-sra\u672f\u8bedt-t-0.05-sra\u672f\u8bed\uff08sra\u672f\u8bed\uff09t-t-t-sra\u672f\u8bed\uff09t-t-t-t-0.05-sra\u672f\u8bed\uff08sra\u672f\u8bed\uff09t-t-t-t-t\uff09t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-t-#34\uff1b}\nget_cursor_pos\uff08\uff09{#\u7528\u6cd5\uff1aget_cursor_pos IFS=&#39\uff1b[#&#39\uff1bread-p$&#39\uff1b\\e[6n&#39\uff1b-dr-rs y x#printf 39\uff1b%s\\n&#39\uff1b&#34\uff1b$x$y&#34\uff1b]\nhex_to_rgb\uff08\uff09{\u7528\u6cd5\uff1ahex_to_rgb&#34\uff1b#FFFFFF&#34\uff1b#hex_to_rgb&#34\uff1b000000&#34\uff1b\uff1a&#34\uff1b${1/\\\\\\\\}34\uff1b\uff08r=16#${0:2}\uff0cg=16#${2:2}\uff0cb=16#${4:2}\uff09printf&#39\uff1b%s\\n\u548c#39&#34; $r$g$b&#34\uff1b}\n#\u5c0fC\u98ce\u683c\u3002\u5bf9\u4e8e\uff08\uff1bi++&lt\uff1b10\uff1b\uff09\uff09{echo&#34\uff1b$i&#34\uff1b}\u672a\u8bb0\u5f55\u7684\u65b9\u6cd5\u3002\u56e0\u4e3a{1..10}\u4e2d\u7684i\uff1b{echo&#34\uff1b$i&#34\uff1b}\u81a8\u80c0\u56e0\u4e3a{1..10}\u4e2d\u7684i\uff1b\u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210#C\u98ce\u683c\u3002\uff08i=0\uff1bi&lt\uff1b=10\uff1bi++\uff09\uff1b\u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210\n#\u6b63\u89c4\u65b9\u6cd5f\uff08\uff09{echo hi\uff1b}#\u4f7f\u7528\u5b50shell f\uff08\uff09\uff08echo hi\uff09#\u4f7f\u7528\u7b97\u672f#\u8fd9\u53ef\u4ee5\u7528\u6765\u5206\u914d\u6574\u6570\u503c\u3002#\u793a\u4f8b\uff1afa=1 35; fa++f\uff08\uff09\uff08$1\uff09\uff09#\u4f7f\u7528\u6d4b\u8bd5\u3001\u5faa\u73af\u7b49#\u6ce8\u610f\uff1a'while'\u3001'until'\u3001'case'\u3001'\uff08\uff08\uff09\uff09'\u3001'[[]\uff09\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002f\uff08\uff09\u5982\u679c\u4e3a\u771f\uff1b\u7136\u540e\u662f\u56de\u58f0&#34$1 &#34; ;  fi f\uff08\uff09\u4ee3\u8868i in&#34\uff1b$@&#34;;  \u505a\u56de\u58f0&#34$\u6211&#34\uff1b\u5b8c\u6210\n#\u4e00\u884c#\u6ce8\u610f\uff1a\u7b2c\u4e09\u6761\u8bed\u53e5\u53ef\u80fd\u4f1a\u5728\u7b2c\u4e00\u6761\u8bed\u53e5\u4e3a\u771f\u65f6\u8fd0\u884c[$var==hello]]&amp&amp\uff1becho hi | | echo bye[$var==\u4f60\u597d]]&amp&amp\uff1b{echo hi\uff1becho\u90a3\u91cc\uff1b}||echo bye#\u591a\u884c\uff08\u65e0\u5176\u4ed6\uff0c\u5355\u8bed\u53e5\uff09#\u6ce8\u610f\uff1a\u9000\u51fa\u72b6\u6001\u53ef\u80fd\u4e0eif\u8bed\u53e5[[$var==hello]]\u4e0d\u540c&amp&amp\uff1becho hi#\u591a\u884c\uff08\u65e0\u5176\u4ed6\uff09[$var==hello]]&amp&amp\uff1b{echo hi#..}\n\uff1a\u5185\u7f6e\u53ef\u7528\u4e8e\u907f\u514d\u5728case\u8bed\u53e5\u4e2d\u91cd\u590d\u53d8\u91cf=\u3002$\u53d8\u91cf\u5b58\u50a8\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u7684\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\u59cb\u7ec8\u6210\u529f\uff0c\u4ee5\u4fbf\u53ef\u4ee5\u4f7f\u7528\u5b83\u5b58\u50a8\u53d8\u91cf\u503c\u3002\n#\u4fee\u6539\u4e86Neofetch\u4e2d\u7684\u4ee3\u7801\u7247\u6bb5\u300234\u4f8b$OSTYPE&#34\uff1b\u5728&#34\uff1b\u8fbe\u5c14\u6587&#34\uff1b*\uff09\uff1a&#34;\u9a6c\u79d1\u65af&#34&#34;linux&#34\uff1b*\uff09\uff1a&#34;Linux&#34\uff1b\uff1b*&#34;bsd&#34\uff1b*|&#34;\u873b\u8713&#34\uff1b|&#34;\u6bd4\u7279\u745e\u683c\uff08bitrig&#34\uff1b\uff09\uff1a&#34;BSD&#34&#34;\u897f\u683c\u6e29&#34\uff1b|&#34;msys&#34\uff1b|&#34;win32&#34\uff1b\uff09\uff1a&#34;\u7a97\u6237&#34\uff1b\uff1b*\uff09printf&#39\uff1b%s\\n\u548c#39&#34;\u68c0\u6d4b\u5230\u672a\u77e5\u64cd\u4f5c\u7cfb\u7edf\uff0c\u6b63\u5728\u4e2d\u6b62&#34;  &gt&amp\uff1b2.\u51fa\u53e31\uff1b\uff1besac#\u6700\u540e\uff0c\u8bbe\u7f6e\u53d8\u91cf\u3002os=&#34\uff1b$\\U&#34;\nread#u sleep\uff08\uff09{#\u7528\u6cd5\uff1aread#u sleep 1#read#u sleep 0.2 read-rt&#34\uff1b$1&#34\uff1b&lt\uff1b&gt\uff1b&lt\uff1b\uff08\uff1a\uff09|\uff1a}\n\u5bf9\u4e8e\u6027\u80fd\u5173\u952e\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6253\u5f00\u548c\u5173\u95ed\u8fc7\u591a\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u4e0d\u7ecf\u6d4e\u7684\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6240\u6709\u8bfb\u53d6\u8c03\u7528\uff0c\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5206\u914d\u53ea\u80fd\u8fdb\u884c\u4e00\u6b21\uff1a\n\u6267\u884c{sleep_fd}&lt&gt&\u4e66\u4fe1\u7535\u62a5\uff1b\uff08\uff1a\uff09\u800c\u4e00\u4e9b\u5feb\u901f\u6d4b\u8bd5\uff1bdo#\u76f8\u5f53\u4e8esleep 0.001 read-t0.001-u$sleep#u fd done\n#\u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4efb\u4f55\u4e00\u79cd\u90fd\u53ef\u4ee5\u4f7f\u7528\u3002\u7c7b\u578b-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\u54c8\u5e0c\u53ef\u6267\u884c\u6587\u4ef6\\u name&amp&gt/dev/null\u547d\u4ee4-v\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null#\u4f5c\u4e3a\u6d4b\u8bd5\u3002\u5982\u679c\u7c7b\u578b\u4e3a-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\uff1b\u7136\u540e#\u7a0b\u5e8f\u8fdb\u5165\u8def\u5f84\u3002fi#\u9006\u3002\u5982\u679c\u7c7b\u578b-p\u53ef\u6267\u884c\u6587\u4ef6\u540d\u79f0&amp&gt/dev/null\uff1b\u90a3\u4e48#\u7a0b\u5e8f\u4e0d\u5728\u8def\u5f84\u4e2d\u3002fi#\u793a\u4f8b\uff08\u5982\u679c\u672a\u5b89\u88c5\u7a0b\u5e8f\uff0c\u8bf7\u63d0\u524d\u9000\u51fa\uff09\u3002\u5982\u679c\u7c7b\u578b-p\u8f6c\u6362&amp&gt/dev/null\uff1b\u7136\u540eprintf&#39\uff1b%s\\n\u548c#39&#34;\u9519\u8bef\uff1a\u672a\u5b89\u88c5\u8f6c\u6362\uff0c\u6b63\u5728\u9000\u51fa&#34;  1\u53f7\u51fa\u53e3\nBash\u7684printf\u6709\u4e00\u4e2a\u83b7\u53d6\u65e5\u671f\u7684\u5185\u7f6e\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u6765\u4ee3\u66ffdate\u547d\u4ee4\u3002\ndate\uff08\uff09{\u7528\u6cd5\uff1adate&#34\uff1bformat&#34\uff1b#\u53c2\u89c1\uff1a&#39\uff1bman strftime&#39\uff1b\u83b7\u53d6format.printf&#34\uff1b\uff08$1\uff09T\\\\n&#34\uff1b&#34\uff1b-1&#34\uff1b}\n#\u4f7f\u7528\u4e0a\u8ff0\u529f\u80fd\u3002$\u65e5\u671f&#34\uff1b%a%d%b-%l:%M%p&#34\uff1b6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00#\u76f4\u63a5\u4f7f\u7528printf\u3002$printf&#39\uff1b%\uff08%a%d%b-%l:%M%p\uff09T\\n\u548c#39&#34;-1 &#34;6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00#\u4f7f\u7528printf\u5206\u914d\u53d8\u91cf\u3002$printf-v\u65e5\u671f\u548c#39\uff1b%\uff08%a%d%b-%l:%M%p\uff09T\\n\u548c#39&#39;-1 &#39;$  printf&#39\uff1b%s\\n\u548c#39&#34; $\u65e5\u671f&#34\uff1b6\u670815\u65e5\u661f\u671f\u4e94\u4e0a\u534810:00\n$\uff1a\\\\u#\u5c55\u5f00\u53c2\u6570\uff0c\u5c31\u50cf\u5b83\u662f\u4e00\u4e2a\u63d0\u793a\u5b57\u7b26\u4e32\u4e00\u6837\u3002$printf&#39\uff1b%s\\n\u548c#39&#34; ${@P}&#34\uff1b\u9ed1\u8272\n\uff08N=0\uff1bN&lt\uff1b16\uff1bN&lt\uff1b16\uff1bN\uff1bN&lt\uff1b16\uff1bN\uff1bN&lt\uff1b16\uff1bN\uff1bN\uff1bN&lt\uff1b16\uff1bN+N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff09N\uff08N\uff0934\uff1bN\uff0934\uff1bN\uff08N\uff08N\uff08N\uff08N\uff08N\uff08N\uff09N\uff1bN\uff09N\uff08N\uff09N\uff1bN\uff09N\uff1bN\uff1bN\uff09N\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff09N\uff09N\uff09N\uff09N\uff1bN\uff09N\uff09N\uff09N\uff09N\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff1bN\uff0934\uff1bN\uff09%${#C}:1}&#34&#34;  $\uff08\uff08B%16\uff09\uff09\u548c#34\uff1b\uff1b3 | 5 | 7 | 9\uff09\u6253\u5370\u548c#39\uff1b%02x-#39&#34; $B&#34\uff1b\uff1b*\uff09printf&#39\uff1b%02x\u548c#39&#34; $B&#34\uff1b\uff1besac\u5b8c\u6210\u4e86\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b}\n\u8fd9\u662f\u4e00\u79cd\u7ed8\u5236\u8fdb\u5ea6\u6761\u7684\u7b80\u5355\u65b9\u6cd5\uff0c\u65e0\u9700\u51fd\u6570\u672c\u8eab\u4e2d\u7684for\u5faa\u73af\u3002\nbar\uff08\uff09{#\u7528\u6cd5\uff1abar 1 10#^--\u7ecf\u8fc7\u7684\u767e\u5206\u6bd4\uff080-100\uff09\u3002#^--\u4ee5\u5b57\u7b26\u4e3a\u5355\u4f4d\u7684\u603b\u957f\u5ea6\u3002\uff08\uff08\u7ecf\u8fc7\u7684=$1*$2/100\uff09\uff09#\u7528\u7a7a\u683c\u521b\u5efa\u6761\u5f62\u56fe\uff1bprintf-v\u603b\u8ba1\u548c#34\uff1b%$\uff08\uff08$2-\u5df2\u901d\uff09\uff09s\u548c#34\uff1bprintf&#39\uff1b%s\\r&#39&#34;[${prog//-}${total}]&#34\uff1b}\n\uff08i=0\uff1bi&lt\uff1b=100\uff1bi++\uff09\uff1bdo#Pure bash micro sleeps\uff08\u4f8b\u5982\uff09\u3002\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\uff08\uff1a\uff1b\uff1a\uff09&amp&amp\uff1b\u6253\u5370\u6761\u3002\u9152\u5427&#34$\u6211&#34&#34;10 &#34; \u5b8c\u6210\u6253\u5370F\u548c#39\uff1b\\n&#39\uff1b\nget#u functions\uff08\uff09{#\u7528\u6cd5\uff1aget#u functions IFS=$&#39\uff1b\\n&#39\uff1bread-d&#34\uff1b&#34\uff1b&#ra functions&lt\uff1b\uff1b\uff08declare-F\uff09printf&#39\uff1b%s\\n&#39\uff1b&#34\uff1b${functions[@]//declare-F}&#34\uff1b}\n\u8fd9\u5c06\u8fd0\u884c\u7ed9\u5b9a\u7684\u547d\u4ee4\u5e76\u4fdd\u6301\u5176\u8fd0\u884c\uff0c\u5373\u4f7f\u5728\u7ec8\u7aef\u6216SSH\u8fde\u63a5\u7ec8\u6b62\u540e\u4e5f\u662f\u5982\u6b64\u3002\u6240\u6709\u8f93\u51fa\u90fd\u88ab\u5ffd\u7565\u3002\nbkr\uff08\uff09{\uff08nohup&#34\uff1b$@&#34\uff1b&amp\uff1b&gt\uff1b/dev/null&amp\uff1b\uff09}bkr/\u4e00\u4e9b\u5267\u672c\u3002sh#\u4e00\u4e9b\u811a\u672c\u3002sh\u73b0\u5728\u6b63\u5728\u540e\u53f0\u8fd0\u884c\n\u5b83\u4f7f\u7528\u672c\u5730namerefs\u6765\u907f\u514d\u4f7f\u7528var=$\uff08some_func\uff09\u6837\u5f0f\u7684\u547d\u4ee4\u66ff\u6362\u51fd\u6570\u8f93\u51facaptu\n......", "note_en": "The goal of this book is to document commonly-known and lesser-known methods of doing various tasks using only built-in  bash features. Using the snippets from this bible can help remove unneeded dependencies from scripts and in most cases make them faster. I came across these tips and discovered a few while developing  neofetch,  pxltrm and other smaller projects.\n The snippets below are linted using  shellcheck and tests have been written where applicable. Want to contribute? Read the  CONTRIBUTING.md. It outlines how the unit tests work and what is required when adding snippets to the bible.\n See something incorrectly described, buggy or outright wrong? Open an issue or send a pull request. If the bible is missing something, open an issue and a solution will be found.\n         A collection of pure  bash alternatives to external processes and programs. The  bash scripting language is more powerful than people realise and most tasks can be accomplished without depending on external programs.\n Calling an external process in  bash is expensive and excessive use will cause a noticeable slowdown. Scripts and programs written using built-in methods ( where applicable) will be faster, require fewer dependencies and afford a better understanding of the language itself.\n The contents of this book provide a reference for solving problems encountered when writing programs and scripts in  bash. Examples are in function formats showcasing how to incorporate these solutions into code.\n   This is an alternative to  sed,  awk,  perl and other tools. Thefunction below works by finding all leading and trailing white-space andremoving it from the start and end of the string. The  : built-in is used in place of a temporary variable.\n  trim_string() {   # Usage: trim_string &#34; example string &#34;  :   &#34; ${1 #  &#34; ${1 %%[![:space:]] *} &#34;} &#34;  :   &#34; ${_ %  &#34; ${_ ##*[![:space:]]} &#34;} &#34;  printf   &#39;%s\\n &#39;   &#34; $_ &#34;}\n    This is an alternative to  sed,  awk,  perl and other tools. Thefunction below works by abusing word splitting to create a new stringwithout leading/trailing white-space and with truncated spaces.\n  # shellcheck disable=SC2086,SC2048 trim_all() {   # Usage: trim_all &#34; example string &#34;  set -f  set --  $*  printf   &#39;%s\\n &#39;   &#34; $* &#34;  set +f}\n  $ trim_all   &#34; Hello, World  &#34;Hello, World$ name=  &#34; John Black is my name.  &#34;$ trim_all   &#34; $name &#34;John Black is my name.\n  The result of  bash&#39;s regex matching can be used to replace  sed for alarge number of use-cases.\n CAVEAT: This is one of the few platform dependent  bash features. bash will use whatever regex engine is installed on the user&#39;s system.Stick to POSIX regex features if aiming for compatibility.\n CAVEAT: This example only prints the first matching group. When usingmultiple capture groups some modification is needed.\n  regex() {   # Usage: regex &#34;string&#34; &#34;regex&#34; [[  $1  =~  $2 ]]  &amp;&amp;  printf   &#39;%s\\n &#39;   &#34; ${BASH_REMATCH[1]} &#34;}\n  $   # Trim leading white-space.$ regex   &#39; hello &#39;   &#39;^\\s*(.*) &#39;hello$   # Validate a hex color.$ regex   &#34;#FFFFFF &#34;   &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ &#39;  #FFFFFF$   # Validate a hex color (invalid).$ regex   &#34;red &#34;   &#39;^(#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ &#39;  # no output (invalid)\n  is_hex_color() {  if [[  $1  =~ ^(  #?([a-fA-F0-9]{6}|[a-fA-F0-9]{3}))$ ]]; then  printf   &#39;%s\\n &#39;   &#34; ${BASH_REMATCH[1]} &#34;  else  printf   &#39;%s\\n &#39;   &#34;error:  $1 is an invalid color. &#34;  return 1  fi} read -r coloris_hex_color   &#34; $color &#34;  || color=  &#34;#FFFFFF &#34;  # Do stuff.\n     split() {   # Usage: split &#34;string&#34; &#34;delimiter&#34; IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra arr  &lt;&lt;&lt;   &#34;${1//$2/$&#39;\\n&#39;} &#34;  printf   &#39;%s\\n &#39;   &#34; ${arr[@]} &#34;}\n  $ split   &#34;apples,oranges,pears,grapes &#34;   &#34;, &#34;applesorangespearsgrapes$ split   &#34;1, 2, 3, 4, 5 &#34;   &#34;,  &#34;12345  # Multi char delimiters work too!$ split   &#34;hello---world---my---name---is---john &#34;   &#34;--- &#34;helloworldmynameisjohn\n                            $ strip_all   &#34;The Quick Brown Fox &#34;   &#34;[aeiou] &#34;Th Qck Brwn Fx$ strip_all   &#34;The Quick Brown Fox &#34;   &#34;[[:space:]] &#34;TheQuickBrownFox$ strip_all   &#34;The Quick Brown Fox &#34;   &#34;Quick  &#34;The Brown Fox\n     $ strip   &#34;The Quick Brown Fox &#34;   &#34;[aeiou] &#34;Th Quick Brown Fox$ strip   &#34;The Quick Brown Fox &#34;   &#34;[[:space:]] &#34;TheQuick Brown Fox\n             urlencode() {   # Usage: urlencode &#34;string&#34;  local LC_ALL=C  for   (( i  =  0; i  &lt;  ${ #1}; i ++  )) ;  do  :   &#34; ${1 :i :1} &#34;  case   &#34; $_ &#34;  in [a-zA-Z0-9.~_-])  printf   &#39;%s &#39;   &#34; $_ &#34; ;;  *)  printf   &#39;%%%02X &#39;   &#34;&#39; $_ &#34; ;;  esac  done  printf   &#39;\\n &#39;}\n          if [[  $var  ==  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is in var. &#34; fi  # Inverse (substring not in string). if [[  $var  !=  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is not in var. &#34; fi  # This works for arrays too! if [[  ${arr[*]}  ==  *sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;sub_string is in array. &#34; fi\n  case   &#34; $var &#34;  in  *sub_string *)   # Do stuff ;;  *sub_string2 *)   # Do more stuff ;;  *)   # Else ;; esac\n  if [[  $var  == sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var starts with sub_string. &#34; fi  # Inverse (var does not start with sub_string). if [[  $var  != sub_string * ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var does not start with sub_string. &#34; fi\n  if [[  $var  ==  *sub_string ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var ends with sub_string. &#34; fi  # Inverse (var does not end with sub_string). if [[  $var  !=  *sub_string ]] ;  then  printf   &#39;%s\\n &#39;   &#34;var does not end with sub_string. &#34; fi\n   Enabling  extdebug allows access to the  BASH_ARGV array which storesthe current function\u2019s arguments in reverse.\n   reverse_array() {   # Usage: reverse_array &#34;array&#34;  shopt -s extdebug  f()(printf   &#39;%s\\n &#39;   &#34; ${BASH_ARGV[@]} &#34;); f   &#34; $@ &#34;  shopt -u extdebug}\n    Create a temporary associative array. When setting associative arrayvalues and a duplicate assignment occurs, bash overwrites the key. Thisallows us to effectively remove array duplicates.\n    remove_array_dups() {   # Usage: remove_array_dups &#34;array&#34;  declare -A tmp_array  for  i  in   &#34; $@ &#34; ;  do [[  $i ]]  &amp;&amp; IFS=  &#34;  &#34; tmp_array[  &#34; ${i :- } &#34;]=1  done  printf   &#39;%s\\n &#39;   &#34; ${ !tmp_array[@]} &#34;}\n  $ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 512345$ arr=(red red green blue blue)$ remove_array_dups   &#34; ${arr[@]} &#34;redgreenblue\n     $ array=(red green blue yellow brown)$ random_array_element   &#34; ${array[@]} &#34;yellow  # Multiple arguments can also be passed.$ random_array_element 1 2 3 4 5 6 73\n  Each time the  printf is called, the next array element is printed. Whenthe print hits the last array element it starts from the first elementagain.\n               arr=(apples oranges tomatoes)  # Elements and index. for  i  in   &#34; ${ !arr[@]} &#34; ;  do  printf   &#39;%s\\n &#39;   &#34; ${arr[i]} &#34; done  # Alternative method. for   ((i = 0;i &lt; ${ #arr[@]};i ++ )) ;  do  printf   &#39;%s\\n &#39;   &#34; ${arr[i]} &#34; done\n     # Greedy example. for  file  in  * ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # PNG files in dir. for  file  in  ~/Pictures/ *.png ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # Iterate over directories. for  dir  in  ~/Downloads/ */ ;  do  printf   &#39;%s\\n &#39;   &#34; $dir &#34; done  # Brace Expansion. for  file  in /path/to/parentdir/{file1,file2,subdir/file3} ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done  # Iterate recursively. shopt -s globstar for  file  in  ~/Pictures/ **/ * ;  do  printf   &#39;%s\\n &#39;   &#34; $file &#34; done shopt -u globstar\n        # Bash &lt;4 (discarding empty lines).IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra file_data  &lt;   &#34;file &#34;  # Bash &lt;4 (preserving empty lines). while  read -r line ;  do file_data+=(  &#34; $line &#34;) done  &lt;   &#34;file &#34;  # Bash 4+mapfile -t file_data  &lt;   &#34;file &#34;\n     head() {   # Usage: head &#34;n&#34; &#34;file&#34; mapfile -tn   &#34; $1 &#34; line  &lt;   &#34; $2 &#34;  printf   &#39;%s\\n &#39;   &#34; ${line[@]} &#34;}\n       tail() {   # Usage: tail &#34;n&#34; &#34;file&#34; mapfile -tn 0 line  &lt;   &#34; $2 &#34;  printf   &#39;%s\\n &#39;   &#34; ${line[@] : - $1} &#34;}\n  $ tail 2  ~/.bashrc  # Enable tmux.  # [[ -z &#34;$TMUX&#34; ]] &amp;&amp; exec tmux$ tail 1  ~/.bashrc  # [[ -z &#34;$TMUX&#34; ]] &amp;&amp; exec tmux\n    lines() {   # Usage: lines &#34;file&#34; mapfile -tn 0 lines  &lt;   &#34; $1 &#34;  printf   &#39;%s\\n &#39;   &#34; ${ #lines[@]} &#34;}\n  This method uses less memory than the  mapfile method and works in  bash 3 but it is slower for bigger files.\n lines_loop() {   # Usage: lines_loop &#34;file&#34; count=0  while IFS=  read -r _ ;  do   ((count ++ ))  done  &lt;   &#34; $1 &#34;  printf   &#39;%s\\n &#39;   &#34; $count &#34;}\n    This works by passing the output of the glob to the function and then counting the number of arguments.\n    # Count all files in dir.$ count  ~/Downloads/ *232  # Count all dirs in dir.$ count  ~/Downloads/ */45  # Count all jpg files in dir.$ count  ~/Pictures/ *.jpg64\n      extract() {   # Usage: extract file &#34;opening marker&#34; &#34;closing marker&#34;  while IFS=  $&#39; \\n &#39;  read -r line ;  do [[  $extract  &amp;&amp;  $line  !=   &#34; $3 &#34; ]]  &amp;&amp;  printf   &#39;%s\\n &#39;   &#34; $line &#34; [[  $line  ==   &#34; $2 &#34; ]]  &amp;&amp; extract=1 [[  $line  ==   &#34; $3 &#34; ]]  &amp;&amp; extract=  done  &lt;   &#34; $1 &#34;}\n       dirname() {   # Usage: dirname &#34;path&#34;  local tmp= ${1 :-.} [[  $tmp  !=  *[ !/] * ]]  &amp;&amp; {  printf   &#39;/\\n &#39;  return } tmp= ${tmp %%  &#34; ${tmp ##*[!/]} &#34;} [[  $tmp  !=  */ * ]]  &amp;&amp; {  printf   &#39;.\\n &#39;  return } tmp= ${tmp %/*} tmp= ${tmp %%  &#34; ${tmp ##*[!/]} &#34;}  printf   &#39;%s\\n &#39;   &#34; ${tmp :-/} &#34;}\n      basename() {   # Usage: basename &#34;path&#34; [&#34;suffix&#34;]  local tmp tmp= ${1 %  &#34; ${1 ##*[!/]} &#34;} tmp= ${tmp ##*/} tmp= ${tmp %  &#34; ${2 /  &#34; $tmp &#34;} &#34;}  printf   &#39;%s\\n &#39;   &#34; ${tmp :-/} &#34;}\n     $ hello_world=  &#34;value &#34;  # Create the variable name.$ var=  &#34;world &#34;$ ref=  &#34;hello_ $var &#34;  # Print the value of the variable name stored in &#39;hello_$var&#39;.$  printf   &#39;%s\\n &#39;   &#34; ${ !ref} &#34;value\n      Contrary to popular belief, there is no issue in utilizing raw escape sequences. Using  tput abstracts the same ANSI sequences as if printed manually. Worse still,  tput is not actually portable. There are a number of  tput variants each with different commands and syntaxes ( try  tput setaf 3 on a FreeBSD system). Raw sequences are fine.\n     NOTE: Prepend 2 to any code below to turn it&#39;s effect off(examples: 21=bold text off, 22=faint text off, 23=italic text off).\n        Expand to  IFS separated list of variable names starting with  VAR. If double-quoted, each variable name expands to a separate word.\n      Get substring from  N character to  N character.   ( ${VAR:10:10}: Get sub-string from char  10 to char  20)\n       # Syntax: {&lt;START&gt;..&lt;END&gt;}  # Print numbers 1-100. echo {1..100}  # Print range of floats. echo 1.{1..9}  # Print chars a-z. echo {a..z} echo {A..Z}  # Nesting. echo {A..Z}{0..9}  # Print zero-padded numbers.  # CAVEAT: bash 4+ echo {01..100}  # Change increment amount.  # Syntax: {&lt;START&gt;..&lt;END&gt;..&lt;INCREMENT&gt;}  # CAVEAT: bash 4+ echo {1..10..2}   # Increment by 2.\n       If  file is newer than  file2 ( uses modification time) or  file exists and  file2 does not.\n If  file is older than  file2 ( uses modification time) or  file2 exists and  file does not.\n                    # Set the value of var to var2 if var2 is greater than var.  # var: variable to set.  # var2&gt;var: Condition to test.  # ?var2: If the test succeeds.  # :var: If the test fails.  ((var =var 2 &gt;var ?var 2 :var ))\n  Traps allow a script to execute code on various signals. In  pxltrm ( a pixel art editor written in bash) traps are used to redraw the user interface on window resize. Another use case is cleaning up temporary files on script exit.\n Traps should be added near the start of scripts so any early errors are also caught.\n              If unicode is not required, it can be disabled for a performance increase. Results may vary however there have been noticeable improvements in  neofetch and other programs.\n      NOTE: There are times when one may have a good reason for using  #!/bin/bash or another direct path to the binary.\n                  &#34; $HOSTNAME &#34;  # NOTE: This variable may be empty.  # Optionally set a fallback to the hostname command.  &#34; ${HOSTNAME :-$(hostname)} &#34;\n    This can be used to add conditional support for different OperatingSystems without needing to call  uname.\n        Each time  $RANDOM is used, a different integer between  0 and  32767 is returned. This variable should not be used for anything related to security ( this includes encryption keys etc).\n    This is handy when writing scripts in pure bash and  stty/ tput can\u2019t becalled.\n  get_term_size() {   # Usage: get_term_size   # (:;:) is a micro sleep to ensure the variables are   # exported immediately.  shopt -s checkwinsize ; (: ;:)  printf   &#39;%s\\n &#39;   &#34; $LINES  $COLUMNS &#34;}\n      get_window_size() {   # Usage: get_window_size  printf   &#39;%b &#39;   &#34; ${TMUX :+ \\\\ePtmux; \\\\e} \\\\e[14t ${TMUX :+ \\\\e \\\\\\\\} &#34; IFS=  &#39;;t &#39;  read -d t -t 0.05 -sra term_size  printf   &#39;%s\\n &#39;   &#34; ${term_size[1]}x ${term_size[2]} &#34;}\n      get_cursor_pos() {   # Usage: get_cursor_pos IFS=  &#39;[; &#39;  read -p   $&#39; \\e[6n &#39; -d R -rs _ y x _  printf   &#39;%s\\n &#39;   &#34; $x  $y &#34;}\n      hex_to_rgb() {   # Usage: hex_to_rgb &#34;#FFFFFF&#34;   # hex_to_rgb &#34;000000&#34;  :   &#34; ${1 / \\#} &#34;   ((r = 16# ${_ :0 :2} ,g = 16# ${_ :2 :2} ,b = 16# ${_ :4 :2} ))  printf   &#39;%s\\n &#39;   &#34; $r  $g  $b &#34;}\n          # Tiny C Style.for  ((;i ++&lt; 10; )){  echo   &#34; $i &#34; ;}  # Undocumented method. for  i  in {1..10} ;{  echo   &#34; $i &#34; ;}  # Expansion. for  i  in {1..10} ;  do  echo   &#34; $i &#34; ;  done  # C Style.for  ((i = 0;i &lt;= 10;i ++ )) ;  do  echo   &#34; $i &#34; ;  done\n    # Normal method f(){  echo hi;}  # Using a subshell f()(echo hi)  # Using arithmetic  # This can be used to assign integer values.  # Example: f a=1  # f a++ f()  (( $1 ))  # Using tests, loops etc.  # NOTE: \u2018while\u2019, \u2018until\u2019, \u2018case\u2019, \u2018(())\u2019, \u2018[[]]\u2019 can also be used. f()if  true;  then  echo   &#34; $1 &#34; ;  fi f()for i  in   &#34; $@ &#34;;  do  echo   &#34; $i &#34; ;  done\n  # One line  # Note: The 3rd statement may run when the 1st is true[[  $var  == hello ]]  &amp;&amp;  echo hi  ||  echo bye[[  $var  == hello ]]  &amp;&amp; {  echo hi ;  echo there ; }  ||  echo bye  # Multi line (no else, single statement)  # Note: The exit status may not be the same as with an if statement[[  $var  == hello ]]  &amp;&amp;  echo hi  # Multi line (no else)[[  $var  == hello ]]  &amp;&amp; {  echo hi   # ...}\n  The  : built-in can be used to avoid repeating  variable= in a case statement. The  $_ variable stores the last argument of the last command.  : always succeeds so it can be used to store the variable value.\n # Modified snippet from Neofetch. case   &#34; $OSTYPE &#34;  in   &#34;darwin &#34; *)  :   &#34;MacOS &#34; ;;   &#34;linux &#34; *)  :   &#34;Linux &#34; ;;  *  &#34;bsd &#34; * |   &#34;dragonfly &#34; |   &#34;bitrig &#34;)  :   &#34;BSD &#34; ;;   &#34;cygwin &#34; |   &#34;msys &#34; |   &#34;win32 &#34;)  :   &#34;Windows &#34; ;;  *)  printf   &#39;%s\\n &#39;   &#34;Unknown OS detected, aborting... &#34;  &gt;&amp;2  exit 1 ;; esac  # Finally, set the variable.os=  &#34; $_ &#34;\n      read_sleep() {   # Usage: read_sleep 1   # read_sleep 0.2  read -rt   &#34; $1 &#34;  &lt;&gt;   &lt;(: )  ||  :}\n   For performance-critical situations, where it is not economic to open and close an excessive number of file descriptors, the allocation of a file descriptor may be done only once for all invocations of  read:\n  exec {sleep_fd} &lt;&gt;   &lt;(: ) while some_quick_test ;  do   # equivalent of sleep 0.001  read -t 0.001 -u  $sleep_fd done\n  # There are 3 ways to do this and either one can be used. type -p executable_name  &amp; &gt;/dev/null hash executable_name  &amp; &gt;/dev/null command -v executable_name  &amp; &gt;/dev/null  # As a test. if  type -p executable_name  &amp; &gt;/dev/null ;  then   # Program is in PATH. fi  # Inverse. if  !  type -p executable_name  &amp; &gt;/dev/null ;  then   # Program is not in PATH. fi  # Example (Exit early if program is not installed). if  !  type -p convert  &amp; &gt;/dev/null ;  then  printf   &#39;%s\\n &#39;   &#34;error: convert is not installed, exiting... &#34;  exit 1 fi\n  Bash\u2019s  printf has a built-in method of getting the date which can be used in place of the  date command.\n   date() {   # Usage: date &#34;format&#34;   # See: &#39;man strftime&#39; for format.  printf   &#34;%( $1)T \\\\n &#34;   &#34;-1 &#34;}\n  # Using above function.$ date   &#34;%a %d %b - %l:%M %p &#34;Fri 15 Jun - 10:00 AM  # Using printf directly.$  printf   &#39;%(%a %d %b - %l:%M %p)T\\n &#39;   &#34;-1 &#34;Fri 15 Jun - 10:00 AM  # Assigning a variable using printf.$  printf -v date   &#39;%(%a %d %b - %l:%M %p)T\\n &#39;   &#39;-1 &#39;$  printf   &#39;%s\\n &#39;   &#34; $date &#34;Fri 15 Jun - 10:00 AM\n   $  :  \\\\u  # Expand the parameter as if it were a prompt string.$  printf   &#39;%s\\n &#39;   &#34; ${_ @P} &#34;black\n    uuid() {   # Usage: uuid C=  &#34;89ab &#34;  for   ((N = 0;N &lt; 16; ++N )) ;  do B=  &#34;  $((RANDOM % 256 )) &#34;  case   &#34; $N &#34;  in 6)  printf   &#39;4%x &#39;   &#34;  $((B % 16 )) &#34; ;; 8)  printf   &#39;%c%x &#39;   &#34; ${C : $RANDOM % ${ #C} :1} &#34;   &#34;  $((B % 16 )) &#34; ;; 3|5|7|9)  printf   &#39;%02x- &#39;   &#34; $B &#34; ;;  *)  printf   &#39;%02x &#39;   &#34; $B &#34; ;;  esac  done  printf   &#39;\\n &#39;}\n    This is a simple way of drawing progress bars without needing a for loopin the function itself.\n  bar() {   # Usage: bar 1 10   # ^----- Elapsed Percentage (0-100).   # ^-- Total length in chars.   ((elapsed = $1 * $2 / 100 ))   # Create the bar with spaces.  printf -v prog   &#34;% ${elapsed}s &#34;  printf -v total   &#34;%  $(( $2 -elapsed ))s &#34;  printf   &#39;%s\\r &#39;   &#34;[ ${prog //  /-}${total}] &#34;}\n  for   ((i = 0;i &lt;= 100;i ++ )) ;  do   # Pure bash micro sleeps (for the example). (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)  &amp;&amp; (: ;:)   # Print the bar. bar   &#34; $i &#34;   &#34;10 &#34; done printf   &#39;\\n &#39;\n  get_functions() {   # Usage: get_functions IFS=  $&#39; \\n &#39;  read -d   &#34; &#34; -ra functions  &lt;   &lt;(declare -F )  printf   &#39;%s\\n &#39;   &#34; ${functions[@] //declare -f } &#34;}\n      This will run the given command and keep it running, even after the terminal or SSH connection is terminated. All output is ignored.\n bkr() { (nohup   &#34; $@ &#34;  &amp; &gt;/dev/null  &amp;)}bkr ./some_script.sh   # some_script.sh is now running in the background\n   This uses local namerefs to avoid using  var=$(some_func) style command substitution for function output captu\n......", "posttime": "2022-02-17 16:15:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "bash,\u7528\u6cd5", "title": "Pure Bash Bible\u2013\u5916\u90e8\u8fdb\u7a0b\u7684\u7eafBash\u66ff\u4ee3\u65b9\u6848\u7684\u96c6\u5408", "title_en": "Pure Bash Bible \u2013 A collection of pure bash alternatives to external processes", "transed": 1, "url": "https://github.com/dylanaraps/pure-bash-bible", "via": "", "real_tags": ["bash", "\u7528\u6cd5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073863, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u975e\u5e38\u559c\u6b22\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u6211\u6700\u559c\u6b22\u7684GC\u8bed\u8a00\u662fHaskell\u3002\u6211\u5e0c\u671b\u8bfb\u8005\u4eca\u5929\u8bb0\u4f4f\u8fd9\u4e00\u70b9\u3002\u6211\u5199\u7684\u662f\u4e00\u4e9b\u5173\u4e8e\u6211\u6df1\u7231\u7684\u8bed\u8a00\u7684\u8bc4\u8bba\uff0c\u4e00\u4e9b\u5145\u6ee1\u7231\u7684\u6279\u8bc4\u3002\n\u4e8b\u60c5\u662f\u8fd9\u6837\u7684\uff1a\u51e0\u5929\u524d\uff0c\u6211\u5411\u4e00\u4f4d\u4e3b\u8981\u4f7f\u7528Python\u7f16\u7a0b\u7684\u670b\u53cb\u5c55\u793a\u4e86\u4e00\u4e9bHaskell\u3002\u98ce\u9669\u5f88\u9ad8\u2014\u2014\u6211\u80fd\u8bc1\u660e\u8fd9\u79cd\u5947\u602a\u7684\u8bed\u8a00\u503c\u5f97\u8c03\u67e5\u5417\uff1f\n\u6211\u7684\u4e3b\u8981\u5173\u6ce8\u70b9\u662f\u65e0\u9650\u5217\u8868\uff0c\u5e76\u5c06\u6590\u6ce2\u90a3\u5951\u5b9a\u4e49\u4e3a\u9012\u5f52\u6570\u636e\u7ed3\u6784\u2014\u2014\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u5c55\u793a\u54c8\u65af\u514b\u5c14\u61d2\u60f0\u7684\u6709\u8da3\u4e8b\u60c5\u3002\u4f46\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u6211\u4eec\u610f\u5916\u5730\u7f16\u5199\u4e86\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a\u7c7b\u578b\u9519\u8bef\uff0c\u56e0\u6b64\u6211\u4eec\u4e86\u89e3\u4e86\u7f16\u8bd1\u5668\u662f\u5982\u4f55\u5904\u7406\u8fd9\u4e9b\u4e8b\u60c5\u7684\u3002\u6211\u4e0d\u8bb0\u5f97\u786e\u5207\u7684\u8868\u8fbe\u5f0f\u4e86\u2014\u2014\u5b83\u5728\u4e0a\u4e0b\u6587\u4e2d\u5f88\u6df1\u2014\u2014\u4f46\u95ee\u9898\u662f\u6211\u8bd5\u56fe\u5728\u5217\u8868\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u3002\u4e0e1+[2,3]\u6709\u5173\u7684\u5185\u5bb9\u3002\n\u73b0\u5728\uff0c\u5728\u4e00\u4e9b\u201c\u5f31\u7c7b\u578b\u201d\u8bed\u8a00\u4e2d\uff0c\u8fd9\u79cd\u4e8b\u60c5\u5b9e\u9645\u4e0a\u662f\u5141\u8bb8\u7684\uff0c\u6211\u7684\u4e00\u4f4d\u540c\u4e8b\u6700\u8fd1\u6307\u51fa\uff1a\n\u8fd9\u5f53\u7136\u5f88\u641e\u7b11\u3002\u4f46\u662f\u6211\u4eec\u4e0d\u5e94\u8be5\u7528\u5982\u6b64\u5bbd\u6cdb\u7684\u7b14\u89e6\u63cf\u7ed8\u201c\u5f31\u7c7b\u578b\u201d\u8bed\u8a00\u3002\u5728\u6211\u670b\u53cb\u7684\u539f\u751fPython\u4e2d\uff0c\u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u8fd9\u662f\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u4f46\u5f53\u60a8\u4f7f\u7528\u89e3\u91ca\u6027\u8bed\u8a00\u7f16\u5199\u4e34\u65f6\u811a\u672c\u65f6\uff0c\u8fd9\u53c8\u6709\u4ec0\u4e48\u5173\u7cfb\u5462\u3002\u91cd\u8981\u7684\u662f\uff0c\u5931\u8d25\u88ab\u89c6\u4e3a\u5931\u8d25\uff0c\u5b83\u4e0d\u4f1a\u7ee7\u7eed\u80e1\u8bf4\u516b\u9053\uff1a\n[jim@palatinate[~] Python 3Python 3.810\uff08\u9ed8\u8ba4\u503c\uff0c11\u670826\u65e52021\uff0c20:14:08\uff09[GCC 93.0]\u5728LimuxType\u548c\u03b334\uff1b\u5e2e\u52a9&#34&#34;\u7248\u6743\u6240\u6709&#34&#34;\u5b66\u5206&#34\uff1b\u6216&#34\uff1b\u6267\u7167\u548c#34\uff1b\u4e86\u89e3\u66f4\u591a\u4fe1\u606f&gt&gt&gt\uff1b1+[2,3]\u56de\u6eaf\uff08\u6700\u540e\u4e00\u6b21\u8c03\u7528\uff09\uff1a\u6587\u4ef6\u548c#34&\u4e66\u4fe1\u7535\u62a5\uff1bstdin&gt&#34;, \u7b2c1\u884c\uff0cin&lt\uff1b\u6a21\u5757&gt\uff1bTypeError:\u4e0d\u652f\u6301+\uff1a&#39\u7684\u64cd\u4f5c\u6570\u7c7b\u578b\uff1bint&#39\uff1b\u548c&#39\uff1b\u540d\u5355&#39\uff1b\n\u8fd9\u662f\u4e00\u6761\u9519\u8bef\u6d88\u606f\u3002\u8fd9\u751a\u81f3\u662f\u4e00\u6761\u76f8\u5f53\u4e0d\u9519\u7684\u9519\u8bef\u4fe1\u606f\u3002\u5728Python\u4e2d\uff0c\u6709\u5f88\u591a\u4e1c\u897f\u53ef\u4ee5\u4f20\u9012\u7ed9+\u8fd0\u7b97\u7b26\uff0c\u4f46int\u548clist\u4e0d\u5728\u5176\u4e2d\u3002\n\u90a3\u4e48\u73b0\u5728\uff0c\u54c8\u65af\u514b\u5c14\u505a\u4e86\u4ec0\u4e48\uff0c\u6211\u60f3\u70ab\u8000\u7684\u8bed\u8a00\uff1f\u4e0d\u5e78\u7684\u662f\uff0c\u6211\u7684\u670b\u53cb\u6ca1\u6709\u770b\u5230\u4ee3\u7801\u4e2d\u7684\u5b9e\u9645\u95ee\u9898\uff0c\u4f46\u9996\u5148\u662f\u4ece\u7f16\u8bd1\u5668\u7684\u9519\u8bef\u6d88\u606f\u4e2d\u5f97\u77e5\u7684\u3002\u5982\u679c\u4f60\u4ee5\u524d\u5728Haskell\u505a\u8fc7\u8fd9\u4ef6\u4e8b\uff0c\u4f60\u73b0\u5728\u53ef\u80fd\u4f1a\u9000\u7f29\uff0c\u56e0\u4e3a\u4f60\u77e5\u9053\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u662f\u4ec0\u4e48\uff1a\n[jim@palatinate\uff1a~]$ghciGHCi\uff0c8.6.5\u7248\uff1ahttp://www.haskell.org/ghc/ :? \u5e2e\u52a9\u524d\u594f&gt\uff1b1+[2,3]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a1:1\uff1a\u9519\u8bef\uff1a\u2022\u7ea6\u675f\u4e2d\u7684\u975e\u7c7b\u578b\u53d8\u91cf\u53c2\u6570\uff1aNum[a]\uff08\u4f7f\u7528FlexibleContexts\u5141\u8bb8\u6b64\u64cd\u4f5c\uff09\u2022\u68c0\u67e5\u63a8\u65ad\u7684\u7c7b\u578b\u65f6\uff0c\u5b83\uff1a\uff1aforall a.\uff08Num a\uff0cNum[a]\uff09=&gt\uff1b[a]\n\u73b0\u5728\uff0c\u6211\u7684\u670b\u53cb\u6839\u672c\u4e0d\u7406\u89e3\u8fd9\u4e2a\u9519\u8bef\u4fe1\u606f\u3002\u7531\u4e8e\u6211\u5904\u4e8e\u6f14\u793a\u6a21\u5f0f\uff0c\u6211\u7684\u672c\u80fd\u662f\u5411\u4ed6\u89e3\u91ca\uff0c\u4f46\u5728\u51e0\u4e2a\u9519\u8bef\u7684\u5f00\u59cb\u4e4b\u540e\uff0c\u6211\u610f\u8bc6\u5230\u8fd9\u6839\u672c\u6ca1\u6709\u5e2e\u52a9\uff0c\u5e76\u6307\u51fa\u4e0d\u80fd\u5411\u5217\u8868\u4e2d\u6dfb\u52a0\u6574\u6570\uff0c\u5e76\u5411\u4ed6\u5c55\u793a\u4e86\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u5730\u65b9\uff08\u8fd9\u6bd4\u8fd9\u4e2a\u4f8b\u5b50\u8981\u5fae\u5999\u4e00\u4e9b\uff09\u3002\n\u4f46\u4ece\u90a3\u4ee5\u540e\uff0c\u6211\u548c\u540c\u4e8b\u4eec\u4e00\u76f4\u5728\u8ba8\u8bba\u62c9\u514b\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u7279\u522b\u662fRust\u7684\u9519\u8bef\u4fe1\u606f\u6709\u591a\u597d\uff0c\u7279\u522b\u662f\u5b83\u4eec\u6bd4Haskell\u7684\u597d\u591a\u5c11\u3002\u6240\u4ee5\u6211\u6709\u673a\u4f1a\u5206\u4eab\u6211\u548c\u6211\u7684\u670b\u53cb\u53d1\u73b0\u7684\u975e\u5e38\u7cdf\u7cd5\u7684Haskell\u9519\u8bef\u4fe1\u606f\u3002\u5728\u90a3\u91cc\uff0c\u5b83\u4f5c\u4e3a\u4e00\u4e2a\u6848\u4f8b\u7814\u7a76\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8ba8\u8bba\u5b83\u5728\u591a\u5927\u7a0b\u5ea6\u4e0a\u662f\u4e0d\u53ef\u7406\u89e3\u7684\uff0c\u5f15\u53d1\u4e86\u5f88\u591a\u8ba8\u8bba\uff0c\u6211\u5c06\u5c1d\u8bd5\u4ece\u4e2d\u63d0\u53d6\u6700\u6709\u8da3\u7684\u90e8\u5206\u5230\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u3002\n\u9996\u5148\uff0c\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u4e0e\u5177\u4f53\u95ee\u9898\u51e0\u4e4e\u6ca1\u6709\u5173\u7cfb\u3002\u95ee\u9898\u662f\u2014\u2014\u9519\u8bef\u6d88\u606f\u5e94\u8be5\u8fd9\u6837\u8bf4\u2014\u2014\u4f60\u4e0d\u80fd\u6dfb\u52a0\u5217\u8868\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728Haskell\u4e2d\uff0c\u60a8\u53ea\u80fd\u6dfb\u52a0\u5b9e\u73b0Num typeclass\u7684\u4e1c\u897f\uff08\u5217\u8868\u4e2d\u6ca1\u6709\uff09\uff0c\u56e0\u6b64\u60a8\u53ef\u80fd\u8ba4\u4e3a\u7f16\u8bd1\u5668\u4f1a\u8db3\u591f\u806a\u660e\uff0c\u5728\u8fd9\u4e2a\u9519\u8bef\u6d88\u606f\u7684\u4efb\u4f55\u5730\u65b9\u63d0\u5230\u7c7b\u4f3c\u4e8e\u201c\u671f\u671b[a]\u6709Num instance\uff0c\u4f46\u5b83\u6ca1\u6709\u201d\u8fd9\u6837\u7684\u5185\u5bb9\u8fd9\u624d\u662f\u771f\u6b63\u7684\u95ee\u9898\uff0c\u5373\u4f7f\u6ca1\u6709\u5f97\u5230\u5f88\u597d\u7684\u89e3\u91ca\u3002\n\u4f46\u662f\uff0cghc\u8bd5\u56fe\u5047\u8bbe\u4f60\u7684\u610f\u601d\u662f\u4f60\u6240\u5199\u7684\uff0c\u5e76\u627e\u51fa[a]\u53ef\u4ee5\u62e5\u6709Num\u5b9e\u4f8b\u7684\u65b9\u5f0f\u3002\u8fd9\u5c31\u662f\u5b83\u5931\u8d25\u7684\u539f\u56e0\uff0c\u7136\u540e\u5b83\u7ed9\u51fa\u4e86\u5982\u4f55\u4f7f\u5176\u6210\u529f\u7684\u5efa\u8bae\u3002\u6b63\u5982\u6211\u7684\u6559\u6388\u540c\u4e8b\u6240\u6307\u51fa\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5371\u9669\u7684\u5efa\u8bae\uff0c\u5c24\u5176\u662f\u5bf9\u521d\u5b66\u8005\u6765\u8bf4\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528FlexibleContexts\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u5e2e\u52a9\u7684\u3002\u95ee\u9898\u4e0d\u5728\u4e8e\u8fd9\u4e9b\u5217\u8868\u4e0d\u662f\u7279\u522b\u7684\u6570\u5b57\uff0c\u800c\u5728\u4e8e\u60a8\u53ea\u9700\u8981\u63a5\u53d7\u51fd\u6570\u4e2d\u7684\u6570\u5b57\u5217\u8868\u3002\u95ee\u9898\u662f\u6ca1\u6709\u5217\u8868\u662f\uff08\u6216\u8005\u81f3\u5c11\u5e94\u8be5\u662f\uff09\u6570\u5b57\uff01\u4f46\u662f\u521d\u5b66\u8005\u53ef\u80fd\u53ea\u662f\u6309\u7167\u5efa\u8bae\u53bb\u505a\uff0c\u8bd5\u7740\u5f04\u6e05\u695a\u4ec0\u4e48\u662f\u8be5\u6b7b\u7684\u7075\u6d3b\u73af\u5883\uff0c\u7136\u540e\u53d1\u73b0\u81ea\u5df1\u8eab\u5904\u4e00\u4e2a\u75db\u82e6\u7684\u4e16\u754c\uff0c\u79bb\u89e3\u51b3\u5b9e\u9645\u95ee\u9898\u5df2\u7ecf\u4e0d\u8fdc\u4e86\u3002\n\u90e8\u5206\u539f\u56e0\u662f1\u578b\u672c\u8eab\u3002Haskell\uff0cunlikeRust\uff0c\u5141\u8bb8\u4ee5\u4efb\u4f55\u6570\u5b57\u7c7b\u578b\u89e3\u91ca\u50cf1\u8fd9\u6837\u7684\u6587\u5b57\u3002\u9274\u4e8eHaskell\uff08\u5982Rust\uff09\u5177\u6709\u8fd4\u56de\u7c7b\u578b\u591a\u6001\u6027\uff0c\u5b83\u53ef\u4ee5\u5728\u7c7b\u578b\u7cfb\u7edf\u4e2d\u76f4\u63a5\u8868\u8fbe\u8fd9\u4e00\u70b9\uff1a\n\u5728Rust\u4e2d\uff0c\u8fd9\u7c7b\u4f3c\u4e8eimpl Num\u3002\u8fd9\u610f\u5473\u77401\u53ef\u4ee5\u662fNum\u7684\u4efb\u4f55\u7c7b\u578b\u3002\u7ed3\u5408+\u8981\u6c42\u53c2\u6570\u4e3aNum\u5e76\u5339\u914d\uff08\uff08+\uff09\uff1a\uff1aNum a=&gt\uff1ba-&gt\uff1ba-&gt\uff1ba\uff09 \uff0c\u5f53\u6211\u4eec\u770b\u52301+[2,3]\u65f6\uff0c\u6211\u4eec\u53ea\u662f\u60f3\u5f04\u6e05\u695a[2,3]\u662f\u600e\u4e48\u56de\u4e8b\u3002\n\u5982\u679c\u6211\u4eec\u6ca1\u6709\u591a\u6001\u6587\u5b57\uff0c\u6ca1\u67091\u7684\u542b\u4e49\u662f\u7075\u6d3b\u7684\u8fd9\u4e2a\u6982\u5ff5\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u4e00\u4e2a\u66f4\u5bb9\u6613\u7406\u89e3\u7684\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c1\u7684\u610f\u601d\u4e0e\uff081:\uff1aInteger\uff09\u76f8\u540c\uff08\u6216\u4efb\u610f\u9009\u62e9\uff09\uff0c\u6211\u4eec\u4f1a\u6709\u4e00\u4e2a\u6f02\u4eae\u7684\u89e3\u91ca\uff1a\n\u5e8f\u66f2&gt\uff1b\uff081\uff1a\uff1a\u6574\u6570\uff09+[2,3]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a4:16\uff1a\u9519\u8bef\uff1a\u2022\u65e0\u6cd5&#39\uff1bt\u5728\u201c\uff08+\uff09\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373\u8868\u8fbe\u5f0f\u4e2d\u7684\u201c[2,3]\u201d\uff081:\uff1aInteger\uff09+[2,3]\u4e2d\uff0c\u5c06\u9884\u671f\u7c7b\u578b\u201cInteger\u201d\u4e0e\u5b9e\u9645\u7c7b\u578b\u201c[Integer]\u201d\u5339\u914d\uff1a\u5b83=\uff081:\uff1aInteger\uff09+[2,3]\n\u6216\u8005\uff0c\u5373\u4f7f\u53cc\u65b9\u90fd\u6ca1\u6709\u6570\u5b57\uff0c\u6211\u4eec\u4e5f\u540c\u6837\u4f1a\u6709\u66f4\u597d\u7684\u9519\u8bef\u4fe1\u606f\uff1a\n[jim@palatinate\uff1a~]$ghciGHCi\uff0c8.6.5\u7248\uff1ahttp://www.haskell.org/ghc/ :? \u5e2e\u52a9\u524d\u594f&gt\uff1b\uff08\uff09+[1,2]&lt\uff1b\u4ea4\u4e92\u5f0f&gt\uff1b\uff1a1:6\uff1a\u9519\u8bef\uff1a\u2022\u65e0\u6cd5&#39\uff1bt\u5728\u201c\uff08+\uff09\u201d\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e2d\uff0c\u5373\u8868\u8fbe\u5f0f\u4e2d\u7684\u201c[1,2]\u201d\u4e2d\uff0c\u5c06\u9884\u671f\u7c7b\u578b\u201c\uff08\uff09\u201d\u4e0e\u5b9e\u9645\u7c7b\u578b\u201c[Integer]\u201d\u5339\u914d\uff1a\uff08\uff09+[1,2]\u5728\u201cit\u201d\u7684\u7b49\u5f0f\u4e2d\uff1ait=\uff08\uff09+[1,2]Prelude&gt\uff1b\n\u6211\u7684\u5916\u5356\u662f\u4ec0\u4e48\uff1f\u6211\u4e0d\u8ba4\u4e3a\u7f16\u8bd1\u5668\u5728\u9519\u8bef\u4fe1\u606f\u65b9\u9762\u53d7\u5230\u4e86\u8db3\u591f\u7684\u524a\u5f31\uff0c\u6216\u8005Haskell\u793e\u533a\u5bf9\u521d\u5b66\u8005\u7684\u5173\u6ce8\u4e0d\u591f\u3002Rust\u4f5c\u4e3a\u4e00\u4e2a\u901a\u8baf\u5668\u4f1a\u5c06\u5927\u91cf\u80fd\u91cf\u8f6c\u5316\u4e3a\u826f\u597d\u7684\u9519\u8bef\u6d88\u606f\uff0c\u56e0\u6b64\u5373\u4f7fRust\u4e5f\u6709\u4e00\u4e2a\u7279\u6027\u53ef\u4ee5\u6dfb\u52a0\u5230\u6570\u7ec4\u4e2d\u4ee5\u4f7f+\u5de5\u4f5c\uff0c\u5b83\u4ecd\u7136\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u9519\u8bef\u6d88\u606f\uff1a\n\u9519\u8bef[E0277]\uff1a\u65e0\u6cd5\u5c06`[{integer}\uff1b2]`\u6dfb\u52a0\u5230`{integer}`-&gt\uff1b\u6d4b\u9a8crs:2:7 | 2 | 1+[2,3]| ^\u6ca1\u6709\u5b9e\u73b0`{integer}+[{integer}\uff1b2]`|=help:trait`Add&lt\uff1b[{integer}\uff1b2]&gt\uff1b`\u6ca1\u6709\u4e3a`{integer}\u5b9e\u73b0`\n\u4f46\u6211\u4e5f\u8ba4\u4e3a1\u7684\u8bed\u4e49\u592a\u8fc7\u81ea\u7531\uff0c\u7ed9\u7f16\u8bd1\u5668\u7559\u4e0b\u4e86\u4e00\u4e2a\u5c34\u5c2c\u7684\u4f4d\u7f6e\u3002\u770b\uff0c\u5947\u602a\u7684\u662f\uff0c\u4f60\u53ef\u4ee5\u58f0\u660e[2,3]\u4e00\u4e2a\u6570\u5b57\uff0c\u4f7f1+[2,3]\u6210\u4e3a\u4e00\u4e2a\u6dfb\u52a0\u4e24\u4e2a\u5217\u8868\u7684\u8868\u8fbe\u5f0f\uff1a\n\u5b9e\u4f8b\u7f16\u53f7[a]\uff0c\u5176\u4e2d\uff08+\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\uff08-\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\u2014\u2014\u5443\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u5462\uff1f\uff08*\uff09=\uff08&lt\uff1b&gt\uff1b\uff09\u5426\u5b9a=\u53cd\u5411abs=id signum=const[]from integer i=take\uff08from integer i\uff09$repeat undefinedmain=do print$signum$1+[2,3]\n\u4e00\u65e6\u4f60\u5c06\u5217\u8868\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u6570\u5b57\uff0c1\u5c31\u4f1a\u7a81\u7136\u53d8\u6210\u5b83\u60f3\u8981\u7684\u5217\u8868\u3002\u8fd9\u5c31\u589e\u52a0\u4e86\u627e\u5230\u6b63\u786e\u9519\u8bef\u4fe1\u606f\u7684\u96be\u5ea6\uff1a\u6bd5\u7adf\u4f60\u6240\u8981\u6c42\u7684\u662f\u53ef\u80fd\u7684\u3002\n\u6700\u540e\uff0c\u8fd9\u8ba9\u6211\u89c9\u5f97Haskell\u548cJavascript\u6709\u7740\u5171\u540c\u70b9\uff0c\u8fd9\u8ba9\u6211\u5f88\u96be\u8fc7\u3002\u5f3a\u7c7b\u578b\u8bed\u8a00\u4e0d\u518d\u662f\u5f3a\u7c7b\u578b\u8bed\u8a00\u3002\n\u7531discus\u652f\u6301\u7684\u8bc4\u8bba", "note_en": "I am a big fan of strongly typed languages, and my favorite GC\u2019d languageis Haskell. And I want you, the reader, to keep that in mind today.What I am writing is some commentary about a language I deeply love,some loving criticism.\n So here\u2019s what happened: A few days ago, I was showing off some Haskellfor a friend who primarily programs in Python. The stakes were high\u2013 could I demonstrate that this strange language was worth someinvestigation?\n My primary focus was on infinite lists, and defining  fibonacci as a recursive data structure\u2013 all fun things to show off Haskell\u2019s laziness.But at some point, we wrote an expression by accident that had a typeerror in it, and so we got to see how the compiler treated such things.I don\u2019t remember the exact expression \u2013 it was deep in context \u2013 butthe problem was I was trying to add an integer to an list. Somethinganalogous to  1+[2,3].\n Now, in some  \u201cweakly typed\u201d languages, this sort of thing is actually allowed, asa colleague of mine recently pointed out:\n  This is, of course, hilarious. But! We shouldn\u2019t paint \u201cweakly typed\u201dlanguages with such a broad brush. In my friend\u2019s native Python, itwould have been an error, as it should be. It is a run-time error, butwhat does that matter when you\u2019re working in an interpreted language,writing ad hoc scripts. The important thing is that failure isrecognized as failure, and it doesn\u2019t try to continue with nonsense:\n [jim@palatinate:~]$ python3Python 3.8.10 (default, Nov 26 2021, 20:14:08)[GCC 9.3.0] on linuxType &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information.&gt;&gt;&gt; 1+[2,3]Traceback (most recent call last): File &#34;&lt;stdin&gt;&#34;, line 1, in &lt;module&gt;TypeError: unsupported operand type(s) for +: &#39;int&#39; and &#39;list&#39;\n This is an error message. It\u2019s even a pretty decent error message.There are many things you can pass to the  + operator in Python,but an  int and a  list together are not among them.\n So now, what did Haskell do, this language that I\u2019m trying to show off?Well, unfortunately, my friend didn\u2019t see the actual problem in the code,but was first made aware of it from the compiler\u2019s error message. Andif you\u2019ve ever done this before in Haskell, you\u2019re probably wincing rightnow, because you know what this error message is:\n [jim@palatinate:~]$ ghciGHCi, version 8.6.5: http://www.haskell.org/ghc/ :? for helpPrelude&gt; 1+[2,3]&lt;interactive&gt;:1:1: error: \u2022 Non type-variable argument in the constraint: Num [a] (Use FlexibleContexts to permit this) \u2022 When checking the inferred type it :: forall a. (Num a, Num [a]) =&gt; [a]\n Now, my friend didn\u2019t understand this error message at all.Since I was in Demonstration Mode, my instinct was to explain it to him,but after a few false starts, I realized that this would simply nothelp, and pointed out that you couldn\u2019t add integers to lists,and showed him where this was happening (it was a little moresubtle than this example).\n But since then, my colleagues and I were discussing error messages inSlack, specifically how good Rust\u2019s error messages are, specificallyhow much better they are than Haskell\u2019s. So I had an opportunity topaste that very bad Haskell error message me and my friend discoveredinto the Slack. There, it served as a case study, so we could discuss howproblematically incomprehensible it is, sparking a lot of discussion, fromwhich I shall try to extract the most interesting parts into this post.\n For one, this error message has little to do with the concreteproblem. The problem is \u2013 and the error message should say this \u2013 thatyou can\u2019t add lists. Specifically, in Haskell, you can only add things thatimplement the  Num typeclass (which lists don\u2019t), and so you\u2019d think thecompiler would be smart enough to mention  anywhere in this error messagesomething along the lines of \u201cexpecting  [a] to have  Num instance,but it does not.\u201d That\u2019s the  actual problem, even if not well-explained.\n But instead,  ghc tries to assume you meant what you wrote, and figureout a way in which  [a]  can have the  Num instance. This is whereit fails, and then it gives advice on how to make  that succeed.As my professor-colleague points out, this is dangerous advice, especiallyfor beginners, because there\u2019s no way that using  FlexibleContextswill actually help in that situation. The problem isn\u2019t that theselists aren\u2019t numbers in particular, and that you need to only acceptlists that are numbers in your function. The problem is that no listsare (or at least should be) numbers! But a beginner might just followthe advice, try to figure out what the hell  FlexibleContexts are,and find themselves in a world of pain, and no closer to solving theactual problem.\n Part of what causes this is the type of  1 itself. Haskell, unlikeRust, allows literals like  1 to be interpreted in any number type.Given that Haskell (like Rust) has return-type polymorphism, it can directlyexpress this in the type system:\n  In Rust, this would be something like  impl Num. It means that  1 canbe any type that is  Num. Combine that with the fact that  + requiresits arguments to be  Num and to match ( (+) :: Num a =&gt; a -&gt; a -&gt; a),and when we see  1+[2,3], we\u2019re simply left trying to figure out how [2,3] is  Num.\n If we did not have this  polymorphic literal, this notion that themeaning of  1 is flexible, we would have seen a much more comprehensibleerror message. If  1 meant the same thing as  (1::Integer) (or anyarbitrary choice), we\u2019d have this beautiful explanation:\n Prelude&gt; (1::Integer) + [2,3]&lt;interactive&gt;:4:16: error: \u2022 Couldn&#39;t match expected type \u2018Integer\u2019 with actual type \u2018[Integer]\u2019 \u2022 In the second argument of \u2018(+)\u2019, namely \u2018[2, 3]\u2019 In the expression: (1 :: Integer) + [2, 3] In an equation for \u2018it\u2019: it = (1 :: Integer) + [2, 3]\n Or even if we just had non-numbers on both sides, we\u2019d similarlyhave a better error message:\n [jim@palatinate:~]$ ghciGHCi, version 8.6.5: http://www.haskell.org/ghc/ :? for helpPrelude&gt; () + [1,2]&lt;interactive&gt;:1:6: error: \u2022 Couldn&#39;t match expected type \u2018()\u2019 with actual type \u2018[Integer]\u2019 \u2022 In the second argument of \u2018(+)\u2019, namely \u2018[1, 2]\u2019 In the expression: () + [1, 2] In an equation for \u2018it\u2019: it = () + [1, 2]Prelude&gt;\n What is my take-away here? I don\u2019t think the compiler has been sufficientlytweaked when it comes to error messages, or that the Haskell communitycares sufficiently about beginners. Rust as a communityputs a lot of energy into good error messages, so that even thoughRust also has a trait you could add to arrays to make  + work,it still has a better error message:\n error[E0277]: cannot add `[{integer}; 2]` to `{integer}` --&gt; test.rs:2:7 |2 | 1 + [2,3]; | ^ no implementation for `{integer} + [{integer}; 2]` | = help: the trait `Add&lt;[{integer}; 2]&gt;` is not implemented for `{integer}`\n But I also think the semantics of  1 are too liberal, leaving the compilerin an awkward place. See, the weird thing is, you can declare  [2,3]a number, making  1+[2,3] an expression that adds two lists:\n instance Num [a] where (+) = (&lt;&gt;) (-) = (&lt;&gt;) -- Eh, why not? (*) = (&lt;&gt;) negate = reverse abs = id signum = const [] fromInteger i = take (fromInteger i) $ repeat undefinedmain = do print $ signum $ 1 + [2,3]\n Once you\u2019ve defined lists as a number,  1 is suddenly a list ifit wants to be. And this contributes to the difficulty of findingthe right error message: what you asked for is possible after all.\n And in the end, this leaves me with the feeling that Haskell hasthis in common with Javascript, and that makes me sad. A polymorphicenough strongly typed language is no longer strongly typed.\n   comments powered by  Disqus", "posttime": "2022-02-17 16:10:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9519\u8bef\u4fe1\u606f,error", "title": "Haskell\u9519\u8bef\u4fe1\u606f\uff1a\u52a0\u6cb9", "title_en": "Haskell error messages: come on", "transed": 1, "url": "https://www.thecodedmessage.com/posts/haskell-gripe/", "via": "", "real_tags": ["\u9519\u8bef\u4fe1\u606f", "error"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073862, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4f60\u8ba4\u4e3a\u6709\u4e00\u4e2a\u89d2\u5ea6\u5206\u522b\u4e3a41\u5ea6\u300176\u5ea6\u548c63\u5ea6\u7684\u4e09\u89d2\u5f62\u5417\uff1f\n\u4e00\u5f00\u59cb\uff0c\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u4f3c\u4e4e\u5f88\u5bb9\u6613\u3002\u4ece\u51e0\u4f55\u5b66\u8bfe\u4e0a\u6211\u4eec\u77e5\u9053\u4e09\u89d2\u5f62\u5185\u89d2\u7684\u6d4b\u5ea6\u4e4b\u548c\u662f180\u5ea6\uff0c\u65e2\u713641+76+63=180\uff0c\u7b54\u6848\u4e00\u5b9a\u662f\u80af\u5b9a\u7684\u3002\n\u4f46\u8fd9\u4e2a\u95ee\u9898\u7684\u610f\u4e49\u8fdc\u4e0d\u6b62\u8fd9\u4e9b\u3002\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c\u5728\u5e73\u5766\u7684\u6b27\u51e0\u91cc\u5fb7\u51e0\u4f55\u4e2d\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u5185\u89d2\u7684\u5ea6\u91cf\u4e4b\u548c\u4e3a180\u5ea6\u3002\u4f46\u6211\u4eec\u7684\u95ee\u9898\u5e76\u6ca1\u6709\u7ed9\u6211\u4eec\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\u76f8\u53cd\uff0c\u6211\u4eec\u88ab\u95ee\u5230\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u3002\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u4e0d\u80fd\u76f4\u63a5\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\u3002\u4f46\u5b83\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u6784\u5efa\u6211\u4eec\u60f3\u8981\u7684\u4e09\u89d2\u5f62\u3002\n\u4e3a\u4e86\u6ee1\u8db3\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\uff0c\u4e09\u89d2\u5f62\u4e2d\u7684\u6bcf\u4e2a\u89d2\u90fd\u5fc5\u987b\u5c0f\u4e8e180\u5ea6\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e2d\u4e24\u4e2a\u89d2\u5e03\u7f6e\u5728\u7ebf\u6bb5\u7684\u540c\u4e00\u4fa7\u3002\u8ba9\u6211\u4eec\u628a41\u5ea6\u89d2\u548c76\u5ea6\u89d2\u653e\u5728\u7ebf\u6bb5AB\u7684\u4e24\u7aef\uff0c\u50cf\u8fd9\u6837\u3002\n\u4eceA\u548cB\u5ef6\u4f38\u7684\u5149\u7ebf\u4e0d\u80fd\u5e73\u884c\uff0c\u56e0\u4e3a\u5728\u6b27\u51e0\u91cc\u5fb7\u51e0\u4f55\u4e2d\uff0c\u8fd9\u9700\u8981\u8fd9\u4e9b\u201c\u540c\u4fa7\u5185\u89d2\u201d\u662f\u201c\u8865\u5145\u7684\u201d\u2014\u2014\u4e5f\u5c31\u662f\u8bf4\uff0c\u603b\u548c\u4e3a180\u5ea6\u3002\u8fd9\u4e9b\u89d2\u5ea6\u4e0d\u5e73\u884c\uff0c\u56e0\u6b64\u5149\u7ebf\u4e0d\u5e73\u884c\uff0c\u5982\u679c\u5b83\u4eec\u4e0d\u5e73\u884c\uff0c\u5b83\u4eec\u5fc5\u987b\u76f8\u4ea4\u3002\n\u73b0\u5728\u6211\u4eec\u6709\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u3002\u7b2c\u4e09\u4e2a\u89d2\u5ea6\u5fc5\u987b\u4e3a180\u5ea6\u2212 \uff0841+76\uff09=63\uff0c\u6240\u4ee5$latex\\triangle A B C$\u6b63\u662f\u6211\u4eec\u8981\u627e\u7684\u4e09\u89d2\u5f62\u3002\n\u8fd9\u4e2a\u8bba\u70b9\u53ef\u4ee5\u63a8\u5e7f\u5230\u4efb\u4f55\u4e09\u4e2a180\u5ea6\u7684\u89d2\u5ea6\u6d4b\u5ea6\u90fd\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u4e00\u4e2a\u76f4\u63a5\u7684\u7ed3\u679c\u662f\u5f88\u5bb9\u6613\u627e\u5230\u89d2\u5ea6\u6d4b\u5ea6\uff08\u4ee5\u5ea6\u4e3a\u5355\u4f4d\uff09\u90fd\u662f\u6709\u7406\u6570\u7684\u4e09\u89d2\u5f62\u3002\u4ece\u4efb\u610f\u4e24\u4e2a\u6b63\u6709\u7406\u6570\u5f00\u59cb\uff0c\u5176\u548c\u5c0f\u4e8e180\uff1b\u53eb\u4ed6\u4eecx\u548cy\uff0c\u7136\u540e\u53eb180\u2212 \uff08x+y\uff09\u4e5f\u662f\u4e00\u4e2a\u6709\u7406\u6570\uff0c\u56e0\u4e3ax+y+\uff08180\u2212 \uff08x+y\uff09\uff09=180\uff0c\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e09\u4e2a\u6709\u7406\u89d2\u505a\u4e00\u4e2a\u4e09\u89d2\u5f62\u3002\n\u5c3d\u7ba1\u7528\u6709\u7406\u89d2\u5ea6\u5236\u4f5c\u4e09\u89d2\u5f62\u5f88\u5bb9\u6613\uff0c\u4f46\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e00\u4e2a\u7c7b\u4f3c\u7684\u4e09\u7ef4\u95ee\u9898\u662f\u5982\u6b64\u5177\u6709\u6311\u6218\u6027\uff0c\u4ee5\u81f3\u4e8e\u4e16\u754c\u4e0a\u6700\u597d\u7684\u6570\u5b66\u5bb6\u82b1\u4e86\u51e0\u5341\u5e74\u65f6\u95f4\u624d\u89e3\u51b3\u3002\u662f\u4ec0\u4e48\u8ba9\u8fd9\u79cd\u95ee\u9898\u5728\u4e00\u7ef4\u4e0a\u53d8\u5f97\u5982\u6b64\u56f0\u96be\uff1f\u8981\u7406\u89e3\u8fd9\u4e00\u70b9\uff0c\u5c31\u8981\u66f4\u52a0\u7406\u89e3\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u3002\n\u4e09\u7ef4\u4e2d\u7684\u76f8\u5173\u95ee\u9898\u6d89\u53ca\u56db\u9762\u4f53\u2014\u2014\u4e09\u89d2\u5f62\u9762\u7684\u56db\u8fb9\u5f62\u3002\u4f60\u53ef\u4ee5\u628a\u5b83\u4eec\u60f3\u8c61\u6210\u4e09\u89d2\u5f62\u7684\u4e09\u7ef4\u7248\u672c\u3002\u5728\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e09\u89d2\u5f62\u662f\u6700\u7b80\u5355\u7684\u95ed\u5408\u5f62\u72b6\uff0c\u4f60\u53ef\u4ee5\u7528\u5e73\u8fb9\u6765\u505a\uff0c\u4f60\u9700\u8981\u4e09\u6761\u7ebf\u6bb5\u6765\u505a\u3002\u5728\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u56db\u9762\u4f53\u662f\u6700\u7b80\u5355\u7684\u5c01\u95ed\u5f62\u72b6\uff0c\u4f60\u53ef\u4ee5\u7528\u5e73\u9762\u6765\u505a\uff0c\u5b83\u9700\u8981\u56db\u4e2a\u4e09\u89d2\u5f62\u9762\u6765\u505a\u3002\n\u56db\u9762\u4f53\u7684\u56db\u4e2a\u4e09\u89d2\u5f62\u9762\u5c31\u50cf\u4e09\u89d2\u5f62\u7684\u4e09\u6761\u8fb9\u3002\u4f46\u662f\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u8003\u8651\u89d2\u5ea6\u5462\uff1f\u4f60\u53ef\u4ee5\u60f3\u8c61\u56db\u9762\u4f53\u7684\u56db\u4e2a\u9876\u70b9\u5404\u6709\u4e00\u4e2a\u201c\u7acb\u4f53\u89d2\u201d\u3002\u4f46\u6211\u4eec\u611f\u5174\u8da3\u7684\u95ee\u9898\u6d89\u53ca\u76f8\u4ea4\u9762\u5f62\u6210\u7684\u201c\u4e8c\u9762\u89d2\u201d\u3002\n\u5982\u679c\u4f60\u753b\u4e24\u4e2a\u76f8\u4ea4\u7684\u5e73\u9762\uff0c\u4f60\u4f1a\u53d1\u73b0\u8bb8\u591a\u53ef\u4ee5\u6d4b\u91cf\u7684\u4e0d\u540c\u89d2\u5ea6\u3002\u4f60\u5e94\u8be5\u9009\u62e9\u54ea\u4e00\u4e2a\u6765\u8868\u793a\u4e8c\u9762\u89d2\uff1f\n\u7b54\u6848\u662f\u65cb\u8f6c\u76f8\u4ea4\u7684\u9762\uff0c\u76f4\u5230\u5b83\u4eec\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u4e8c\u7ef4\u89d2\u5ea6\u3002\n\u5728\u56db\u9762\u4f53\u4e2d\uff0c\u56db\u4e2a\u9762\u4e2d\u7684\u6bcf\u4e00\u4e2a\u9762\u4e0e\u53e6\u4e00\u4e2a\u9762\u76f8\u4ea4\uff0c\u5f62\u6210\u516d\u6761\u8fb9\u548c\u516d\u4e2a\u4e8c\u9762\u89d2\u3002\u51e0\u5341\u5e74\u6765\uff0c\u6570\u5b66\u5bb6\u4e00\u76f4\u5728\u60f3\u4ec0\u4e48\u6837\u7684\u56db\u9762\u4f53\u6709\u516d\u4e2a\u6709\u7406\u4e8c\u9762\u89d2\u3002\u5982\u524d\u6240\u8ff0\uff0c\u5982\u679c\u89d2\u5ea6\u7684\u5ea6\u5ea6\u91cf\u662f\u6709\u7406\u6570\uff0c\u5219\u8ba4\u4e3a\u89d2\u5ea6\u662f\u6709\u7406\u7684\u3002\u8fd9\u76f8\u5f53\u4e8e\u5b83\u7684\u5f27\u5ea6\u5ea6\u91cf\u662f\u03c0\u7684\u6709\u7406\u500d\u6570\uff08\u8981\u67e5\u770b\u7b49\u4ef7\u6027\uff0c\u8bf7\u6ce8\u610f\uff0c\u8981\u5c06\u5ea6\u5ea6\u91cf\u4ece\u5ea6\u8f6c\u6362\u4e3a\u5f27\u5ea6\uff0c\u9700\u8981\u5c06\u5ea6\u5ea6\u91cf\u4e58\u4ee5$latex\\frac{\\pi}{180^{\\circ}}$\uff0c\u56e0\u6b64\u5982\u679c\u5ea6\u5ea6\u91cf\u662f\u6709\u7406\u7684\uff0c\u90a3\u4e48\u5f27\u5ea6\u5ea6\u91cf\u662f\u03c0\u7684\u6709\u7406\u500d\u6570\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\uff09\n\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u7528\u6709\u7406\u89d2\u5236\u4f5c\u4e09\u89d2\u5f62\u662f\u591a\u4e48\u5bb9\u6613\uff0c\u4f46\u5bf9\u4e8e\u56db\u9762\u4f53\u6765\u8bf4\uff0c\u95ee\u9898\u8981\u590d\u6742\u5f97\u591a\u3002\u8003\u8651\u4e0b\u9762\u4e00\u4e2a\u7b80\u5355\u7684\u56db\u9762\u4f53$Talk O.A\uff0cA BC $\uff0c\u5b83\u662f\u4ece\u4e00\u4e2a\u7acb\u65b9\u4f53\u7684\u4e00\u4e2a\u89d2\u843d\u4e2d\u5f62\u6210\u7684\u3002\n\u73b0\u5728\u6211\u4eec\u770b\u5230\u8fd9\u4e2a\u56db\u9762\u4f53\u4e2d\u7684\u4e09\u4e2a\u4e8c\u9762\u89d2\u662f\u76f4\u89d2\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u7531\u7acb\u65b9\u4f53\u7684\u9762\u5f62\u6210\u7684\u3002\u53ef\u4ee5\u65b9\u4fbf\u5730\u7528\u8fb9\u6765\u8bc6\u522b\u6bcf\u4e2a\u4e8c\u9762\u89d2\uff0c\u6240\u4ee5\u5728\u8fd9\u4e2a\u56db\u9762\u4f53\u4e2d\uff0c$latex OA$\u3001$latex OB$\u548c$latex OC$\u4e0a\u7684\u4e8c\u9762\u89d2\u90fd\u662f\u76f4\u89d2\u3002\n\u5982\u679c\u5207\u5272\u7acb\u65b9\u4f53\uff0c\u4f7f$latex OA$=$latex OB$=$latex OC$\uff0c\u5219$latexAB$\u3001$latexAC$\u548c$latexBC$\u5904\u7684\u4e8c\u9762\u89d2\u90fd\u662f\u4e00\u81f4\u7684\u3002\u8ba9\u6211\u4eec\u5207\u5272\u7acb\u65b9\u4f53\uff0c\u4f7f$latex OA$=$latex OB$=$latex OC$=1\uff0c\u7136\u540e\u8ba1\u7b97$latex BC$\u5904\u7684\u4e8c\u9762\u89d2\u5ea6\u91cf\u3002\u6d4b\u91cf\u8fd9\u4e2a\u4e8c\u9762\u89d2\u7684\u5173\u952e\u662f\u4ece$latex O$\u548c$latex A$\u5230$latex BC$\u7684\u4e2d\u70b9\u7ed8\u5236\u7ebf\u6bb5\u3002\u6211\u4eec\u628a\u8fd9\u4e00\u70b9\u53eb\u505a$M$\u3002\n\u5982\u679c\u6211\u4eec\u65cb\u8f6c\u56db\u9762\u4f53\uff0c\u4ece\u4fa7\u9762\u770b$latex BC$\u5904\u7684\u4e8c\u9762\u89d2\uff0c\u6211\u4eec\u5c06\u770b\u5230$latex\\angle A M O$\uff0c\u5b83\u5177\u6709\u76f8\u540c\u7684\u5ea6\u91cf\u3002\u8981\u6d4b\u91cf$latex\\angle A M O$\uff0c\u6211\u4eec\u9700\u8981\u957f\u5ea6$latex OA$\u548c$latex OM$\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053$latex OA$=1\uff0c\u8981\u627e\u5230$latex OM$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4ed4\u7ec6\u770b\u770b\u4e09\u89d2\u5f62$latex\\Delta O C B$\u3002\n\u56e0\u4e3a$latex\\angle bo C$\u662f\u76f4\u89d2\uff0c\u8fd9\u662f\u4e00\u4e2a\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6bd5\u8fbe\u54e5\u62c9\u65af\u5b9a\u7406\u6765\u627e\u5230$latex BC$=$latex\\sqrt{2}$\u3002\u56e0\u4e3a$latex M$\u662f$latex BC$\u7684\u4e2d\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u77e5\u9053$latex MC$=$latex\\frac{\\sqrt{2}}{2}$\u3002\u4f46\u662f\u9664\u4e86\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c$latex\\Delta O C B$\u4e5f\u662f\u7b49\u8170\u7684\uff0c\u56e0\u4e3a$latex OB$=$latex OC$\u3002\u8fd9\u4f7f\u5176\u6210\u4e3a45-45-90\u4e09\u89d2\u5f62\uff0c\u8fd9\u610f\u5473\u7740$latex\\angle OBC$\u548c$latex\\angle OCB$\u90fd\u6d4b\u91cf45\u5ea6\u3002$latex\\Delta O C B$\u662f\u7b49\u8170\u7684\u4e8b\u5b9e\u4fdd\u8bc1\u4e86$latex OM$\u4e0e$latex BC$\u5782\u76f4\uff0c\u8fd9\u4f7f\u5f97$latex\\Delta O M C$\u4e5f\u662f\u76f4\u89d2\u4e09\u89d2\u5f62\u3002\u4f46\u662f\u5982\u679c$latex\\angle OmC$=90\u00b0\uff0c\u800c$latex\\angle OcB$=45\u00b0\uff0c\u90a3\u4e48\u4e09\u89d2\u89d2\u548c\u5b9a\u7406\u544a\u8bc9\u6211\u4eec\uff0c$latex\\angle MoC$=45\u00b0\u3002\u8fd9\u4f7f\u5f97\u8f83\u5c0f\u7684\u4e09\u89d2\u5f62$latex\\Delta O M C$\u7b49\u8170\uff0c\u6240\u4ee5$latex OM$=$latex MC$=$latex\\Fract{2}}{2}$\u3002\n\u73b0\u5728\u6211\u4eec\u7ec8\u4e8e\u53ef\u4ee5\u627e\u5230$latex\\angle A M O$\u7684\u5ea6\u91cf\u503c\u4e86\u3002\n\u5728$latex\\Delta A M$\u4e2d\uff0c\u6211\u4eec\u77e5\u9053$latex AO$=1\u548c$latex OM$=$latex\\frac{\\sqrt{2}}}{2}$\uff0c\u7531\u4e8e$latex\\angle A O M$\u662f\u76f4\u89d2\uff0c\u6211\u4eec\u53ef\u4ee5\u5e94\u7528\u4e09\u89d2\u5b66\u3002\u5728\u76f4\u89d2\u4e09\u89d2\u5f62\u4e2d\uff0c\u89d2\u7684\u5207\u7ebf\u662f\u5bf9\u8fb9\u548c\u76f8\u90bb\u8fb9\u7684\u6bd4\u503c\uff1a\n\u56e0\u6b64\uff0c$latex\\angle A M O$\u7684\u5ea6\u91cf\u503c\u662f$latex\\sqrt{2}$\u7684\u53cd\u5207\u7ebf\u6216\u53cd\u6b63\u5207\u3002\u8fd9\u662f\u4e00\u4e2a\u65e0\u7406\u6570\uff0c\u6240\u4ee5\u8fd9\u4e0d\u662f\u4e00\u4e2a\u6709\u7406\u56db\u9762\u4f53\u7684\u4f8b\u5b50\uff0c\u56e0\u4e3a\u5b83\u7684\u4e09\u4e2a\u89d2\u4e0d\u662f\u6709\u7406\u7684\u3002\u5c3d\u7ba1\u8fd9\u4e0d\u662f\u6211\u4eec\u60f3\u8981\u7684\uff0c\u4f46\u8fd9\u4e2a\u65e0\u7406\u56db\u9762\u4f53\u53ef\u4ee5\u544a\u8bc9\u6211\u4eec\u4e00\u4e9b\u5173\u4e8e\u5bfb\u627e\u6709\u7406\u56db\u9762\u4f53\u7684\u91cd\u8981\u4fe1\u606f\u3002\n\u4e3a\u4e86\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u8ba9\u6211\u4eec\u627e\u5230\u65e0\u7406\u56db\u9762\u4f53\u4e2d\u6240\u6709\u4e8c\u9762\u89d2\u7684\u8fd1\u4f3c\u548c\u3002\u4f7f\u7528\u8ba1\u7b97\u5668\u6216\u4e09\u89d2\u8868\uff0c\u6211\u4eec\u53d1\u73b0$latex\\angle a M O$\u7684\u8fd1\u4f3c\u6d4b\u91cf\u503c\u7ea6\u4e3a54.74\u5ea6\u3002\n\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u6c42\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\u548c\uff1a$latex OABC$\uff1a\u4e09\u4e2a\u662f\u6b63\u786e\u7684\uff08\u6d4b\u91cf90\u5ea6\uff09\uff0c\u53e6\u5916\u4e09\u4e2a\u90fd\u4e0e\u6211\u4eec\u521a\u521a\u53d1\u73b0\u7684\u89d2\u4e00\u81f4\u3002\u56e0\u6b64\uff0c\u8be5\u56db\u9762\u4f53\u4e2d\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u7ea6\u4e3a3\u00d790\u00b0+3\u00d754.74\u00b0\u2248 434.22\u00b0.\n\u8fd9\u5c31\u662f\u4e8b\u60c5\u7684\u8f6c\u6298\u70b9\u3002\u8ba9\u6211\u4eec\u56de\u5230\u7acb\u65b9\u4f53\uff0c\u4e0e\u5176\u5207\u5272\u6210$latex OA$=$latex OB$=$latex OC$\uff0c\u4e0d\u5982\u60f3\u8c61\u4e00\u4e0b\u4ece\u89d2\u843d\u91cc\u5207\u4e0b\u4e00\u7247\u975e\u5e38\u8584\u7684\u4e1c\u897f\u3002\n\u8fd9\u4e2a\u65b0\u56db\u9762\u4f53\u5728$latex OP$\uff0c$latex OC$\uff0c$latex OB$\u5904\u4ecd\u7136\u6709\u4e09\u4e2a90\u5ea6\u7684\u4e8c\u9762\u89d2\uff0c\u4f46\u5176\u4ed6\u7684\u4e8c\u9762\u89d2\u5df2\u7ecf\u6539\u53d8\u3002$latex BC$\u7684\u89d2\u5ea6\u73b0\u5728\u770b\u8d77\u6765\u5f88\u5c0f\uff0c$latex PB$\u548c$latex PC$\u7684\u89d2\u5ea6\u770b\u8d77\u6765\u66f4\u50cf$latex OB$\u548c$latex OC$\u7684\u89d2\u5ea6\u3002\n\u4e8b\u5b9e\u4e0a\uff0c\u5982\u679c\u7ee7\u7eed\u4f7f\u7528\u8d8a\u6765\u8d8a\u8584\u7684\u5207\u7247\uff0c$latex P$\u5c06\u63a5\u8fd1$latex O$\uff0c\u4e8c\u9762\u89d2$latex BC$\u5c06\u63a5\u8fd10\u5ea6\uff0c$latex PB$\u548c$latex PC$\u7684\u4e8c\u9762\u89d2\u5c06\u5206\u522b\u63a5\u8fd190\u5ea6\u3002\u6ce8\u610f\u89d2\u5ea6\u7684\u8fd1\u4f3c\u548c\uff1a\n\u5f53$latex P$\u63a5\u8fd1$latex O$\u65f6\uff0c\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u63a5\u8fd1450\u00b0\u3002\u8fd9\u610f\u5473\u7740\u89d2\u5ea6\u7684\u603b\u548c\u5728\u53d8\u5316\uff01\u5728\u6211\u4eec\u6700\u521d\u7684\u56db\u9762\u4f53$latex OABC$\u4e2d\uff0c\u4e8c\u9762\u89d2\u6d4b\u91cf\u503c\u52a0\u8d77\u6765\u7ea6\u4e3a432\u00b0\uff0c\u4f46\u5f53\u6211\u4eec\u6539\u53d8\u89d2\u5ea6\u65f6\uff0c\u6574\u4f53\u603b\u548c\u4f1a\u6539\u53d8\u3002\u5728\u67d0\u4e9b\u65b9\u9762\uff0c\u56db\u9762\u4f53\u53ef\u80fd\u662f\u4e09\u89d2\u5f62\u76843D\u7248\u672c\uff0c\u4f46\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u5b83\u662f\u5b8c\u5168\u4e0d\u540c\u7684\uff1a\u6ca1\u6709\u56db\u9762\u4f53\u4e8c\u9762\u89d2\u548c\u5b9a\u7406\u4fdd\u8bc1\u89d2\u548c\u662f\u5e38\u6570\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u6211\u4eec\u80fd\u505a\u7684\u6700\u597d\u7684\u4e8b\u60c5\u5c31\u662f\u4fdd\u8bc1\u4e00\u4e2a\u56db\u9762\u4f53\u7684\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\u6d4b\u91cf\u503c\u4e4b\u548c\u5728360\u5230540\u5ea6\u4e4b\u95f4\u3002\u5982\u679c\u4f60\u5728\u5bfb\u627e\u5177\u6709\u6709\u7406\u4e8c\u9762\u89d2\u7684\u56db\u9762\u4f53\uff0c\u8fd9\u662f\u4e2a\u95ee\u9898\u3002\u4f60\u4e0d\u80fd\u53ea\u9009\u62e9\u4e94\u4e2a\u6709\u7406\u89d2\uff0c\u7136\u540e\u786e\u4fdd\u7b2c\u516d\u4e2a\u89d2\u662f\u81ea\u52a8\u6709\u7406\u7684\uff0c\u56e0\u4e3a\u4e0e\u4e09\u89d2\u5f62\u4e0d\u540c\uff0c\u4f60\u4e0d\u77e5\u9053\u548c\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\n\u66f4\u7cdf\u7cd5\u7684\u662f\uff0c\u4f60\u4e0d\u80fd\u786e\u5b9a\u4efb\u4f55\u516d\u4e2a\u89d2\u90fd\u53ef\u4ee5\u662f\u56db\u9762\u4f53\u7684\u4e8c\u9762\u89d2\u3002\u8003\u8651\u4e94\u4e2a\u76f4\u89d2\u548c\u9510\u89d2\u3002\u8fd9\u516d\u4e2a\u89d2\u5ea6\u7684\u603b\u548c\u5728450\u5230540\u5ea6\u4e4b\u95f4\uff0c\u8fd9\u5728\u56db\u9762\u4f53\u7684\u53ef\u63a5\u53d7\u8303\u56f4\u5185\u3002\u4f46\u662f\u6ca1\u6709\u4e00\u4e2a\u56db\u9762\u4f53\u6709\u8fd9\u516d\u4e2a\u89d2\u5ea6\u3002\u5982\u679c\u516d\u4e2a\u4e8c\u9762\u89d2\u4e2d\u6709\u4e94\u4e2a\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u5176\u4e2d\u4e00\u4e2a\u9762\u5fc5\u987b\u6709\u4e09\u4e2a\u6b63\u4e8c\u9762\u89d2\u3002\u4f46\u5982\u679c\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u4e9b\u9762\u5c31\u65e0\u6cd5\u95ed\u5408\u5e76\u5f62\u6210\u4e00\u4e2a\u56db\u9762\u4f53\uff1a\u5c31\u50cf\u5e73\u884c\u7ebf\u4e00\u6837\uff0c\u5b83\u4eec\u6c38\u8fdc\u4e0d\u4f1a\u76f8\u4ea4\u3002\n\u56e0\u6b64\uff0c\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u6709\u7406\u56db\u9762\u4f53\u7684\u95ee\u9898\u9700\u8981\u7684\u8fdc\u4e0d\u6b62\u662f\u627e\u5230\u4e94\u4e2a\u6216\u516d\u4e2a\u5177\u6709\u4e00\u5b9a\u603b\u548c\u7684\u6709\u7406\u6570\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u5b83\u8fd8\u9700\u8981\u89e3\u4e00\u4e2a\u5305\u542b105\u9879\u7684\u65b9\u7a0b\uff0c\u5176\u7075\u611f\u6765\u81ea\u7ea6\u7ff0\u00b7\u5eb7\u97e6\u548c\u5b89\u4e1c\u59ae\u4e9a\u00b7\u743c\u65af1976\u5e74\u7684\u4e00\u7bc7\u8bba\u6587\u3002\u4e00\u7fa4\u6570\u5b66\u5bb6\u57282020\u5e74\u5b8c\u6210\u4e86\u8fd9\u9879\u5de5\u4f5c\uff0c\u5176\u7ed3\u679c\u662f\u5bf9\u6240\u6709\u6709\u7406\u56db\u9762\u4f53\u8fdb\u884c\u4e86\u5b8c\u6574\u7684\u5206\u7c7b\u3002\n\u4e09\u89d2\u5f62\u89d2\u548c\u5b9a\u7406\u662f\u6b23\u8d4f\u4e09\u89d2\u5f62\u7684\u7f8e\u4e3d\u548c\u4f18\u96c5\u7684\u4f17\u591a\u539f\u56e0\u4e4b\u4e00\u3002\u5bf9\u4e8e\u56db\u9762\u4f53\u6765\u8bf4\uff0c\u7f3a\u5c11\u8fd9\u6837\u4e00\u4e2a\u5b9a\u7406\u662f\u6b23\u8d4f\u5b83\u4eec\u7684\u7f8e\u4e3d\u548c\u590d\u6742\u6027\u7684\u4e00\u4e2a\u539f\u56e0\uff0c\u4e00\u7ef4\u5411\u4e0a\u3002\n2.\u6b63\u56db\u9762\u4f53\u4e2d\u516d\u4e2a\u4e8c\u9762\u89d2\u7684\uff08\u8fd1\u4f3c\uff09\u548c\u662f\u591a\u5c11\uff1f\n3.\u60f3\u8c61\u4e00\u4e2a\u6b63\u56db\u9762\u4f53\u5750\u5728\u684c\u9762\u4e0a\u3002\u5f53\u4f60\u628a\u4e0a\u9876\u70b9\u5411\u4e0b\u63a8\u5230\u4e0b\u8868\u9762\u65f6\uff0c\u516d\u4e2a\u4e8c\u9762\u89d2\u4e4b\u548c\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1f\n4.\u4efb\u4f55\u56db\u4e2a360\u5ea6\u7684\u89d2\u5ea6\u6d4b\u91cf\u503c\u90fd\u53ef\u4ee5\u662f\u56db\u8fb9\u5f62\u7684\u89d2\u5ea6\u5417\uff1f\n\u4e00\u4e2a\u7acb\u65b9\u4f53\u670912\u6761\u8fb9\uff0c\u6240\u4ee5\u670912\u4e2a\u4e8c\u9762\u89d2\u3002\u6bcf\u4e2a\u90fd\u662f\u4e00\u4e2a\u76f4\u89d2\uff0c\u56e0\u6b64\u603b\u548c\u4e3a12\u00d790\u00b0=1080\u00b0\u3002\n\u6240\u6709\u516d\u4e2a\u4e8c\u9762\u89d2\u90fd\u662f\u5168\u7b49\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u9002\u5f53\u7684\u76f4\u89d2\u4e09\u89d2\u5f62\u6765\u627e\u5230\u5176\u4e2d\u4e00\u4e2a\u4e8c\u9762\u89d2\u7684\u5ea6\u91cf\u3002\u6b63\u56db\u9762\u4f53\u7684\u6240\u6709\u9762\u90fd\u662f\u7b49\u8fb9\u4e09\u89d2\u5f62\uff0c\u56e0\u6b64\u9762\u7684\u4e2d\u4f4d\u6570\uff08\u4ece\u9876\u70b9\u5230\u4e2d\u70b9\u7684\u7ebf\u6bb5\uff09\u7684\u957f\u5ea6\u4e3a$latex\\frac{\\sqrt{3}{2}s$\uff0c\u5176\u4e2ds\u662f\u8fb9\u957f\u3002\u8fd9\u662f\u6240\u9700\u4e09\u89d2\u5f62\u7684\u659c\u8fb9\u3002\u4ece\u56db\u9762\u4f53\u9876\u90e8\u9876\u70b9\u5f00\u59cb\u7684\u9ad8\u5ea6\u5728\u5176\u8d28\u5fc3\u5904\u4e0e\u5e95\u90e8\u7b49\u8fb9\u4e09\u89d2\u5f62\u9762\u76f8\u4ea4\uff0c\u5df2\u77e5\u8be5\u9762\u4f4d\u4e8e\u4ece\u4e2d\u70b9\u5f00\u59cb\u6cbf\u7740\u4e2d\u95f4\u5e26\u7684$latex\\frac{1}{3}$\uff0c\u4f7f\u5f97\u8be5\u4e09\u89d2\u5f62\u7684\u8fd9\u6bb5\u957f\u5ea6\u4e3a$latex\\frac{1}{3}$\u00d7$latex\\frac{3}{2}$\u3002\u4e8c\u9762\u89d2\u662f\u8fd9\u4e24\u6761\u8fb9\u4e4b\u95f4\u7684\u89d2\uff0c\u56e0\u6b64\u7b49\u4e8e$latex\\frac{1}{3}\\times\\frac{3}{2}s}{\\frac{3}{3}s}{\\frac{3}{2}s}$=$latex\\Fract{1}{3}$$\u3002\u81ea$latex\\arccos\\frac{1}{3}$\u2248 70.53\u00b0\uff0c\u6b63\u56db\u9762\u4f53\u7684\u516d\u4e2a\uff08\u5168\u7b49\uff09\u4e8c\u9762\u89d2\u4e4b\u548c\u7ea6\u4e3a6\u00d770.53\u00b0\u2248 423.18\u00b0.\n\u968f\u7740\u56db\u9762\u4f53\u53d8\u5e73\uff0c\u5e95\u9762\u4e0a\u7684\u4e09\u4e2a\u4e8c\u9762\u89d2\u5206\u522b\u63a5\u8fd1\u4e8e\u96f6\uff0c\u5176\u4ed6\u4e09\u4e2a\u4e8c\u9762\u89d2\u5206\u522b\u63a5\u8fd1\u4e8e180\u5ea6\uff0c\u603b\u548c\u4e3a3\u00d70+3\u00d7180\u00b0=540\u00b0\u3002\u8fd9\u662f\u56db\u9762\u4f53\u4e2d\u4e8c\u9762\u89d2\u7684\u6700\u5927\u53ef\u80fd\u548c\u3002\u4e3a\u4e86\u8fbe\u5230\u6700\u5c0f\u53ef\u80fd\u7684\u603b\u548c\uff0c\u60f3\u8c61\u4e00\u4e0b\u5c06\u4e24\u6761\u76f8\u5bf9\u7684\u8fb9\u63a8\u5411\u5bf9\u65b9\uff1a\u8fd9\u5c06\u4f7f\u56db\u4e2a\u89d2\u53d8\u4e3a0\uff0c\u4e24\u4e2a\u89d2\u53d8\u4e3a180\u3002\n\u5bf9\u5047\u8bbe\u6d4b\u91cf\u503c\u4e3aa\u3001b\u3001c\u548cd\uff0ca+b+c+d=360\u3002\u5047\u8bbea\u548cb\u90fd\u5c0f\u4e8e\u6216\u7b49\u4e8ec\u548cd\u3002\u5c06c\u5206\u89e3\u4e3aC1\u548cC2\uff0c\u5e76\u5c06d\u5206\u89e3\u4e3aD1\u548cD2\uff0c\u8fd9\u6837c=C1+C2\uff0cd=D1+D2\uff0ca+C1+D1=180\uff0cb+C2+D2=180\uff08\u53ef\u4ee5\u7528\u8bb8\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u81ea\u7531\u5730\u8fdb\u884c\uff09\u3002\u4f7f\u7528\u8fd9\u4e24\u7ec4\u89d2\u5ea6\u521b\u5efa\u4e24\u4e2a\u4e09\u89d2\u5f62\uff0c\u5e76\u8fdb\u884c\u8c03\u6574\uff0c\u4ee5\u4f7f\u4e0e\u89d2\u5ea6a\u548cb\u76f8\u5bf9\u7684\u8fb9\u5168\u7b49\u3002\u73b0\u5728\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77\uff0c\u8ba9C1\u548cC2\u5408\u5e76\u6210c\uff0cD1\u548cD2\u5408\u5e76\u6210d\uff0c\u8fd9\u6837\u4f60\u5c31\u5f97\u5230\u4e86a\uff0cb\uff0cc\u548cd\u7684\u56db\u8fb9\u5f62\u3002\n\u4e00\u4e2a\u6709\u8da3\u7684\u6311\u6218\u662f\u8003\u8651\u56db\u8fb9\u5f62\u662f\u5426\u603b\u662f\u4ee5\u7279\u5b9a\u7684\u89d2\u5ea6\u6784\u9020\u3002\n\u672c\u4e13\u680f\u5df2\u88ab\u4fee\u6539\uff0c\u4ee5\u7ea0\u6b63\u5370\u5237\u9519\u8bef\u30023 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0\uff08\u4e0d\u662f432.22\u00b0\uff09\u3002", "note_en": "Do you think there\u2019s a triangle whose angles measure 41, 76 and 63 degrees?\n At first, answering this may seem easy. From geometry class we know that the sum of the measures of the interior angles of a triangle is 180 degrees, and since 41 + 76 + 63 = 180, the answer must be yes.\n But there\u2019s more to this question than meets the eye. The triangle angle sum theorem tells us that, given a triangle in flat Euclidean geometry, the sum of the measures of the interior angles is 180 degrees. But our problem doesn\u2019t give us a triangle. Instead, we are asked if one exists. The triangle angle sum theorem doesn\u2019t directly answer that question. But it can help us construct the triangle we want.\n To satisfy the triangle angle sum theorem, each angle in a triangle has to be less than 180 degrees, which means we can always arrange two of them on the same side of a line segment. Let\u2019s put the 41-degree angle and the 76-degree angle at either end of line segment  AB, like this.\n  The rays extending from  A and  B can\u2019t be parallel, because in Euclidean geometry this would require these \u201csame-side interior\u201d angles to be \u201csupplementary\u201d \u2014 that \u00a0is, to sum to 180 degrees. These angles don\u2019t, so the rays aren\u2019t parallel, and if they aren\u2019t parallel, they must intersect.\n  Call their intersection  C. Now we\u2019ve got a triangle, and now we can apply the triangle angle sum theorem. The third angle must measure 180 \u2212 (41 + 76) = 63, and so $latex\u00a0\\triangle A B C$\u00a0is exactly the triangle we were looking for.\n This argument can be generalized to show that any three angle measures that sum to 180 degrees can make a triangle, and one immediate consequence is that it\u2019s easy to find triangles whose angle measures (in degrees) are all rational numbers. Just start with any two positive rational numbers whose sum is less than 180; call them  x and  y. Then 180 \u2212 ( x +  y) is also a rational number, and since  x +  y + (180 \u2212 ( x +  y)) = 180, you can make a triangle with those three rational angles.\n  As easy as it is to make triangles with rational angles, a similar problem in three dimensions proved so challenging that it took decades for the world\u2019s best mathematicians to resolve. What makes this kind of problem so much harder one dimension up? To understand this is to appreciate the triangle angle sum theorem even more.\n The related problem in three dimensions involves tetrahedra \u2014 four-sided shapes with triangular faces. You could think of them as the three-dimensional version of triangles. In two dimensions the triangle is the simplest closed shape you can make with flat sides, and you need three line segments to do it. In three dimensions, the tetrahedron is the simplest closed shape you can make with flat sides, and it takes four triangular faces to do it.\n  The four triangular faces of a tetrahedron are like the three sides of the triangle. But how should we think about the angles? You could imagine a \u201csolid angle\u201d at each of the four vertices of the tetrahedron. But the question we\u2019re interested in involves the \u201cdihedral angles\u201d formed by the intersecting faces.\n If you sketch two intersecting planes, you\u2019ll discover many different angles you could measure. Which one should you choose to represent the dihedral angle?\n  The answer is to rotate the intersecting faces until they look like a two-dimensional angle.\n   In a tetrahedron each of the four faces intersects every other face, making six edges and six dihedral angles. For decades, mathematicians wondered what kinds of tetrahedra have six rational dihedral angles. As before, an angle is considered rational if its degree measure is a rational number. This is equivalent to its radian measure being a rational multiple of\u00a0\u03c0\u00a0(To see the equivalence, note that to convert from degrees to radians you multiply the degree measure by\u00a0$latex\u00a0\\frac{\\pi}{180^{\\circ}}$, so if the degree measure is rational, then the radian measure is a rational multiple of\u00a0\u03c0, and vice versa.)\n We\u2019ve seen how easy it is to make triangles with rational angles, but the problem is much trickier for tetrahedra. Consider the following simple tetrahedron $latex\u00a0O A B C$\u00a0that is formed from a corner sliced off a cube.\n  Right away we see that three of the dihedral angles in this tetrahedron are right angles, since they were formed by the faces of the cube. It\u2019s convenient to identify each dihedral angle with its edge, so in this tetrahedron the dihedral angles on\u00a0$latex\u00a0OA$, $latex\u00a0OB$ and\u00a0$latex\u00a0OC$ are all right angles.\n If you slice the cube so that\u00a0\u00a0$latex\u00a0OA$ = $latex\u00a0OB$ =\u00a0$latex\u00a0OC$, the dihedral angles at $latexAB$, $latexAC$ and $latexBC$ will all be congruent. Let\u2019s cut the cube so that $latex\u00a0OA$ = $latex\u00a0OB$ =\u00a0$latex\u00a0OC$ = 1, and then calculate the measure of the dihedral angle at $latex\u00a0BC$. The key to measuring this dihedral angle is to draw segments from $latex\u00a0O$ and $latex\u00a0A$ to the midpoint of $latex\u00a0BC$. Let\u2019s call that point $latex\u00a0M$.\n  If we rotate the tetrahedron to look at the dihedral angle at $latex\u00a0BC$ from the side, we\u2019ll see $latex \\angle A M O$, which has the same measure. To measure $latex \\angle A M O$ we need the lengths $latex\u00a0OA$ and $latex\u00a0OM$. We already know that $latex\u00a0OA$ = 1, and to find $latex\u00a0OM$ we just need to take a closer look at triangle $latex \\Delta O C B$.\n Since $latex \\angle B O C$ is a right angle, this is a right triangle, so we can use the Pythagorean theorem to find that $latex\u00a0BC$ = $latex \\sqrt{2}$. And because $latex M$ is the midpoint of $latex BC$, we know $latex MC$ = $latex \\frac{\\sqrt{2}}{2}$. But in addition to being a right triangle, $latex \\Delta O C B$ is also isosceles, because $latex\u00a0OB$ = $latex\u00a0OC$. This makes it a 45-45-90 triangle, which means that $latex \\angle OBC$ and $latex \\angle OCB$ both measure 45 degrees. The fact that $latex \\Delta O C B$ is isosceles guarantees that $latex\u00a0OM$ is perpendicular to $latex\u00a0BC$, which makes $latex \\Delta O M C$ a right triangle as well. But if the measure of $latex \\angle O M C$ = 90\u00b0 and the measure of $latex \\angle O C B$ = 45\u00b0, then the triangle angle sum theorem tells us that the measure of $latex \\angle M O C$ = 45\u00b0. That makes the smaller triangle $latex \\Delta O M C$ isosceles, so $latex\u00a0OM$= $latex\u00a0MC$ = $latex \\frac{\\sqrt{2}}{2}$.\n Now we\u2019re finally ready to find the measure of $latex \\angle A M O$.\n  In $latex \\Delta A M O$ we know $latex\u00a0AO$ = 1 and $latex\u00a0OM$ = $latex \\frac{\\sqrt{2}}{2}$, and since $latex \\angle A O M$ is a right angle, we can apply trigonometry. In a right triangle the tangent of an angle is the ratio of the opposite side and the adjacent side:\n  So the measure of $latex \\angle A M O$ is the inverse tangent, or arctangent, of $latex \\sqrt{2}$. This turns out to be an irrational number, so this is not an example of a rational tetrahedron, as three of its angles aren\u2019t rational. But even though it\u2019s not what we\u2019re looking for, this irrational tetrahedron can tell us something important about the search for rational tetrahedra.\n To see this, let\u2019s find the approximate sum of all the dihedral angles in our irrational tetrahedron. Using a calculator or a trig table, we find the approximate measure of $latex\\angle A M O$ to be around 54.74 degrees.\n We can now sum the six dihedral angles of tetrahedron $latex\u00a0OABC$: Three are right (and measure 90 degrees), and the other three are all congruent to the angle we just found. Thus, the sum of the six dihedral angles in this tetrahedron is approximately 3 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0.\n Here\u2019s where things take a turn. Let\u2019s go back to the cube, and instead of cutting it so $latex\u00a0OA$ = $latex\u00a0OB$ = $latex\u00a0OC$, imagine taking a very thin slice off the corner.\n  This new tetrahedron still has three 90-degree dihedral angles at $latex\u00a0OP$, $latex\u00a0OC$, $latex\u00a0OB$, but the other dihedral angles have changed. The angle at $latex\u00a0BC$ now looks quite small, and the angles at $latex\u00a0PB$ and $latex\u00a0PC$ look more like the angles at $latex\u00a0OB$ and $latex\u00a0OC$.\n In fact, if you continue to take thinner and thinner slices, $latex\u00a0P$ will get closer to $latex\u00a0O$, the dihedral angle $latex\u00a0BC$ will approach 0 degrees, and the dihedral angles at $latex\u00a0PB$ and $latex\u00a0PC$ will each approach 90 degrees. Notice the approximate sum of the angles:\n  As $latex\u00a0P$ gets closer to $latex\u00a0O$ the sum of the six dihedral angles of the tetrahedron gets closer to 450\u00b0. Which means the sum of the angles is changing! In our original tetrahedron $latex\u00a0OABC$ the dihedral angle measures added up to around 432\u00b0, but when we change the angles, the overall sum changes. The tetrahedron may be the 3D version of the triangle in some ways, but in one way it\u2019s quite different: There\u2019s no tetrahedron dihedral angle sum theorem guaranteeing that the sum of the angles is constant.\n It turns out the best we can do is guarantee that the sum of the measures of the six dihedral angles of a tetrahedron lies between 360 and 540 degrees. And if you\u2019re searching for tetrahedra with rational dihedral angles, this is a problem. You can\u2019t just pick five rational angles and be sure the sixth is automatically rational because, unlike in a triangle, you have no idea what the sum has to be.\n  Even worse, you can\u2019t be sure any six angles can even be the dihedral angles of a tetrahedron. Consider five right angles and an acute angle. The sum of these six angles is between 450 and 540 degrees, which is inside the acceptable range for a tetrahedron. But there is no tetrahedron that has these six angle measures. If five of the six dihedral angles are right, then one of the faces must have three right dihedral angles. But if this happens, those faces can\u2019t close up and form a tetrahedron: Like parallel lines, they\u2019ll never meet.\n  Thus, the problem of finding all possible rational tetrahedra requires much more than just finding five or six rational numbers with a certain sum. Among other things, it requires solving an equation with 105 terms inspired by a 1976 paper written by John Conway and Antonia Jones. A group of mathematicians accomplished this in 2020, and the result was a complete  classification of all rational tetrahedra.\n The triangle angle sum theorem is one of many reasons to admire the beauty and elegance of triangles. The lack of such a theorem for tetrahedra is a reason to appreciate their beauty and complexity, one dimension up.\n   2. What is the (approximate) sum of the six dihedral angles in a regular tetrahedron?\n 3. Imagine a regular tetrahedron sitting on a tabletop. As you push the top vertex down toward the bottom face, what happens to the sum of the six dihedral angles?\n 4. Can any four angle measures that sum to 360 degrees be the angles of a quadrilateral?\n  There are 12 edges in a cube, so 12 dihedral angles. Each is a right angle, so the sum is 12 \u00d7 90\u00b0 = 1080\u00b0.\n  All six dihedral angles are congruent, so you can use an appropriate right triangle to find the measure of one of the dihedral angles.   All the faces of the regular tetrahedron are equilateral triangles, so the median \u2014 the segment from vertex to midpoint \u2014 of a face has length $latex \\frac{\\sqrt{3}}{2} s$, where  s is the side length. This is the hypotenuse of the desired triangle. The altitude from the top vertex of the tetrahedron meets the bottom equilateral triangular face at its centroid, which is known to lie $latex\\frac{1}{3}$ of the way along the median from the midpoint, making the length of this leg of this triangle $latex\\frac{1}{3}$ \u00d7 $latex\\frac{\\sqrt{3}}{2} s$. The dihedral angle is the angle between these two sides, and so is equal to the inverse cosine of $latex\\frac{\\frac{1}{3} \\times \\frac{\\sqrt{3}}{2} s}{\\frac{\\sqrt{3}}{2} s}$ = $latex\\frac{1}{3}$. Since $latex \\arccos \\frac{1}{3}$ \u2248 70.53\u00b0, the sum of the six (congruent) dihedral angles of the regular tetrahedron is approximately 6 \u00d7 70.53\u00b0 \u2248 423.18\u00b0.\n  As the tetrahedron flattens out, the three dihedral angles on the bottom face each approach zero, and the other three dihedral angles each approach 180 degrees, for a sum of 3 \u00d7 0 + 3 \u00d7 180\u00b0 = 540\u00b0. This is the maximum possible sum of the dihedral angles in a tetrahedron. To achieve the minimum possible sum, imagine pushing two opposite edges toward each other: This will send four of the angles to 0 and two of the angles to 180.\n  Yes. Say the measures are  a,  b,  c and  d, with  a +  b +  c +  d = 360. Assume that  a and  b are each less than or equal to both  c and  d. Split  c into  c 1 and  c 2 and  d into  d 1 and  d 2 so that  c =  c 1 +  c 2,  d =  d 1 +  d 2,  a +  c 1 +  d 1 = 180, and  b +  c 2 +  d 2 = 180 (there is plenty of freedom to do this in many different ways). Use the two sets of angles to create two triangles, adjusting so that the sides opposite angles  a and  b are congruent. Now put them together so  c 1 and  c 2 merge to form  c and  d 1 and  d 2 merge to form  d, and you\u2019ve got your quadrilateral with angles  a,  b,  c and  d.\n  An interesting challenge is to consider if a quadrilateral can always be constructed with the angles in a particular order.\n  This column has been revised to correct a typographic error. 3 \u00d7 90\u00b0 + 3 \u00d7 54.74\u00b0\u2248 434.22\u00b0 (not 432.22).", "posttime": "2022-02-17 16:03:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4e09\u89d2\u5f62,easy,latex", "title": "\u4e09\u89d2\u5f62\u5f88\u5bb9\u6613\uff0c\u56db\u9762\u4f53\u5f88\u96be", "title_en": "Triangles are easy and tetrahedra are hard", "transed": 1, "url": "https://www.quantamagazine.org/triangles-are-easy-tetrahedra-are-hard-20220131/", "via": "", "real_tags": ["\u4e09\u89d2\u5f62", "easy", "latex"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073861, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53d1\u73b0\u5904\u7406\u4e0d\u540c\u4e8e\u6211\u81ea\u5df1\u7684\u89c2\u70b9\u5f88\u5bb9\u6613\u3002\u5f53\u6211\u770b\u5230\u4eba\u4eec\u4ee5\u9519\u8bef\u7684\u7406\u7531\u540c\u610f\u6211\u7684\u89c2\u70b9\u65f6\uff0c\u6211\u4f1a\u611f\u5230\u66f4\u4e0d\u5b89\u3002\n\u6211\u662f\u8f6f\u4ef6\u81ea\u7531\u7684\u70ed\u60c5\u652f\u6301\u8005\uff0c\u8fd9\u5df2\u7ecf\u4e0d\u662f\u4ec0\u4e48\u79d8\u5bc6\u4e86\uff1a\u6211\u5199\u4e86\u4e24\u7bc7\u6587\u7ae0\uff0c\u9610\u8ff0\u4e86\u81ea\u7531\u3001\u81ea\u7531\u548c\u5f00\u6e90\u8f6f\u4ef6\uff08FLOSS\uff09\u5bf9\u7ef4\u62a4\u7528\u6237\u81ea\u4e3b\u6027\u7684\u5fc5\u8981\u6027\uff0c\u4f46\u8fd8\u4e0d\u591f\uff1a\nWhatsapp\u548c\u7528\u6237\u672c\u571f\u5316\u4e00\u7c7b\u63a0\u593a\u6027\u5546\u4e1a\u6a21\u5f0f\u7684\u73b0\u8c61\u6211\u79f0\u4e4b\u4e3a\u201c\u7528\u6237\u672c\u571f\u5316\u201d\u548c\u9632\u5fa1\u63aa\u65bd\uff1a\u7259\u7ebf\u3001\u5f00\u653e\u5e73\u53f0\u548c\u7b80\u5355\u6027\u3002\n\u4fdd\u6301\u5e73\u53f0\u5f00\u653e\u5f00\u653e\u5e73\u53f0\u5982\u4f55\u5931\u53bb\u5f00\u653e\u6027\uff0c\u4ee5\u53ca\u6709\u4ec0\u4e48\u63aa\u65bd\u53ef\u4ee5\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u3002Web\u3001XMPP\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u77e9\u9635\u90fd\u662f\u7a81\u51fa\u95ee\u9898\u53cc\u65b9\u7684\u4f8b\u5b50\u3002\n\u81ea\u7531\u5f00\u6e90\u8f6f\u4ef6\u5b9a\u4e49\u4e2d\u6700\u5927\u7684\u4e00\u4e2a\u90e8\u5206\u662f\u7814\u7a76\u548c\u4fee\u6539\u7a0b\u5e8f\u7684\u81ea\u7531\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u8bbf\u95ee\u53ef\u7f16\u8f91\u7684\u6e90\u4ee3\u7801\u3002\u6211\u540c\u610f\u8fd9\u79cd\u63a5\u89e6\u662f\u5fc5\u8981\u7684\uff1b\u7136\u800c\uff0c\u592a\u591a\u4eba\u51fa\u4e8e\u9519\u8bef\u7684\u539f\u56e0\u652f\u6301\u6e90\u53ef\u7528\u6027\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u6e90\u4ee3\u7801\u5bf9\u8f6f\u4ef6\u7684\u8fd0\u884c\u65b9\u5f0f\u5177\u6709\u4e00\u5b9a\u7a0b\u5ea6\u7684\u900f\u660e\u6027\u662f\u5fc5\u8981\u7684\uff0c\u56e0\u6b64\u6709\u5fc5\u8981\u786e\u5b9a\u5b83\u662f\u5426\u5b89\u5168\u6216\u53ef\u4fe1\u3002\u867d\u7136\u901a\u8fc7\u6a21\u7cca\u6027\u5b9e\u73b0\u5b89\u5168\u6027\u80af\u5b9a\u4e0d\u662f\u4e00\u4e2a\u53ef\u9760\u7684\u63aa\u65bd\uff0c\u4f46\u8fd9\u79cd\u8bf4\u6cd5\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\n\u6e90\u4ee3\u7801\u63cf\u8ff0\u7a0b\u5e8f\u7684\u8bbe\u8ba1\u76ee\u7684\uff1b\u786e\u5b9a\u5176\u5b9e\u9645\u529f\u80fd\u662f\u5426\u4e0e\u9884\u671f\u8bbe\u8ba1\u76f8\u7b26\u662f\u4e0d\u5fc5\u8981\u4e14\u4e0d\u5145\u5206\u7684\u3002\n\u6211\u60f3\u8fdb\u4e00\u6b65\u8ba8\u8bba\u8fd9\u4e9b\u95ee\u9898\uff0c\u4e3b\u8981\u5173\u6ce8\u5df2\u7f16\u8bd1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4e0d\u8ba4\u4e3a\u4ece\u5b89\u5168\u89d2\u5ea6\u6765\u770b\uff0c\u6e90\u53ef\u7528\u6027\u662f\u65e0\u7528\u7684\uff08\u8fd9\u5f53\u7136\u4f1a\u4f7f\u5ba1\u6838\u66f4\u5bb9\u6613\uff09\uff0c\u6211\u786e\u5b9e\u8ba4\u4e3a\u6e90\u53ef\u7528\u6027\u662f\u7528\u6237\u81ea\u7531\u6240\u5fc5\u9700\u7684\u3002\u6211\u53ea\u662f\u8ba4\u4e3a\u6e90\u4e0d\u53ef\u7528\u5e76\u4e0d\u610f\u5473\u7740\u4e0d\u5b89\u5168\uff0c\u6e90\u53ef\u7528\u6027\u4e5f\u4e0d\u610f\u5473\u7740\u5b89\u5168\u3002\u5bf9\u4e8c\u8fdb\u5236\u6587\u4ef6\u6267\u884c\u5b89\u5168\u6027\u5206\u6790\u662f\u53ef\u80fd\u7684\uff08\u800c\u4e14\u901a\u5e38\u66f4\u53ef\u53d6\uff09\uff0c\u800c\u4e0d\u4e00\u5b9a\u8981\u6709\u6e90\u4ee3\u7801\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6f0f\u6d1e\u53d1\u73b0\u901a\u5e38\u4e0d\u4f9d\u8d56\u4e8e\u6e90\u4ee3\u7801\u5206\u6790\u3002\n\u9644\u8a00\uff1a\u8fd9\u79cd\u7acb\u573a\u4e0d\u662f\u7edd\u5bf9\u7684\uff1b\u6211\u627f\u8ba4\u5e95\u90e8\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u53cd\u9a73\uff01\n\u6211\u4e0d\u8ba4\u4e3a\u6709\u4eba\u771f\u7684\u8ba4\u4e3a\u8f6f\u4ef6\u7684\u5b89\u5168\u6027\u4f1a\u5728\u6e90\u4ee3\u7801\u53d1\u5e03\u540e\u7acb\u5373\u5f97\u5230\u6539\u5584\u3002\u6211\u8981\u56de\u5e94\u7684\u8bba\u70b9\u662f\uff0c\u6e90\u4ee3\u7801\u5bf9\u4e8e\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u7684\u529f\u80fd\u548c\u5b89\u5168\u6027\u662f\u5fc5\u8981\u7684\uff0c\u6ca1\u6709\u5b83\u6211\u4eec\u5c31\u65e0\u6cd5\u786e\u5b9a\u3002\n\u5047\u8bbe\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u7a0b\u5e8f\u67b6\u6784\u7684\u91cd\u5199\u4e0d\u662f\u9009\u98791\uff0c\u8f6f\u4ef6\u5b89\u5168\u901a\u5e38\u4f1a\u901a\u8fc7\u7c7b\u4f3c\u4ee5\u4e0b\u8fc7\u7a0b\u7684\u65b9\u5f0f\u4fee\u590d\u6f0f\u6d1e\u6765\u63d0\u9ad8\uff1a\n\u6e90\u4ee3\u7801\u901a\u5e38\u5bf9\u7b2c3\u6b65\u5f88\u6709\u5e2e\u52a9\uff08\u6709\u65f6\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\uff09\u3002\u5982\u679c\u6709\u4eba\u5b8c\u6210\u4e86\u6b65\u9aa43\uff0c\u4ed6\u4eec\u5c06\u9700\u8981\u6e90\u4ee3\u7801\u624d\u80fd\u7ee7\u7eed\u6267\u884c\u6b65\u9aa44\u3002\u6b65\u9aa41\u548c2\u4e0d\u9700\u8981\u6e90\u4ee3\u7801\uff1b\u8fd9\u4e9b\u6b65\u9aa4\u4f9d\u8d56\u4e8e\u7406\u89e3\u7a0b\u5e8f\u7684\u9519\u8bef\u884c\u4e3a\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u9006\u5411\u5de5\u7a0b\u548c/\u6216\u6a21\u7cca\u5316\u3002\n\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u662f\u5982\u4f55\u8bbe\u8ba1\u7684\u548c\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u505a\u4ec0\u4e48\u662f\u4e0d\u4e00\u6837\u7684\u3002\u4e00\u79cd\u7406\u89e3\u7684\u5408\u7406\u6c34\u5e73\u5e76\u4e0d\u610f\u5473\u7740\u53e6\u4e00\u79cd\u3002\n\u6e90\u4ee3\u78012\u5bf9\u4e8e\u63cf\u8ff0\u7a0b\u5e8f\u7684\u9ad8\u7ea7\u3001\u4eba\u7c7b\u53ef\u7406\u89e3\u7684\u8bbe\u8ba1\u81f3\u5173\u91cd\u8981\uff1b\u5b83\u4ee3\u8868\u4e86\u4e00\u4efd\u5408\u540c\uff0c\u6982\u8ff0\u4e86\u5f00\u53d1\u4eba\u5458\u5bf9\u7a0b\u5e8f\u7684\u9884\u671f\u884c\u4e3a\u3002\u7136\u540e\uff0c\u7f16\u8bd1\u5668\u6216\u89e3\u91ca\u56683\u5fc5\u987b\u5c06\u5176\u7ffb\u8bd1\u6210\u673a\u5668\u6307\u4ee4\u3002\u4f46\u6e90\u4ee3\u7801\u5e76\u4e0d\u603b\u662f\u5bb9\u6613\u76f4\u63a5\u6620\u5c04\u5230\u673a\u5668\u6307\u4ee4\uff0c\u56e0\u4e3a\u5b83\u662f\u590d\u6742\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff1a\n\u7f16\u8bd1\u5668\uff08\u6709\u65f6\u751a\u81f3\u662f\u89e3\u91ca\u5668\uff09\u53ef\u4ee5\u5e94\u7528\u96be\u4ee5\u63a8\u7406\u7684\u4f18\u5316\u548c\u5f3a\u5316\u63aa\u65bd\u3002\u5bf9\u4e8e\u5229\u7528\u8fd0\u884c\u65f6\u4fe1\u606f\u7684JIT\u7f16\u8bd1\u5668\u6765\u8bf4\u5c24\u5176\u5982\u6b64\u3002\n\u5f00\u53d1\u4eba\u5458\u53ef\u80fd\u4e0d\u592a\u4e86\u89e3\u64cd\u4f5c\u7cfb\u7edf\u672c\u8eab\uff0c\u5e76\u4e14\u4ee5\u4e0e\u5f00\u53d1\u4eba\u5458\u671f\u671b\u76f8\u77db\u76fe\u7684\u65b9\u5f0f\u8fd0\u884c\u7a0b\u5e8f\u3002\n\u4ee5\u4e0a\u6240\u6709\u8981\u70b9\u90fd\u9002\u7528\u4e8e\u6bcf\u4e2a\u4f9d\u8d56\u9879\u548c\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5f71\u54cd\u7a0b\u5e8f\u7684\u884c\u4e3a\u3002\n\u6b64\u5916\uff0c\u6240\u6709\u7a0b\u5e8f\u5458\u90fd\u662f\u6709\u7f3a\u9677\u7684\u51e1\u4eba\uff0c\u4ed6\u4eec\u5e76\u4e0d\u603b\u662f\u5b8c\u5168\u7406\u89e3\u6e90\u4ee3\u7801\u3002\u6bcf\u4e00\u4e2a\u505a\u8fc7\u5927\u91cf\u7f16\u7a0b\u7684\u4eba\u90fd\u719f\u6089\u5728\u8fd0\u884c\u65f6\u9047\u5230\u9519\u8bef\u7684\u611f\u89c9\uff0c\u539f\u56e0\u662f\u4e0d\u53ef\u80fd\u627e\u5230\u7684\u2026\u2026\u76f4\u5230\u4ed6\u4eec\u6ce8\u610f\u5230\u5b83\u5728\u7b2c12\u884c\u76ef\u7740\u4ed6\u4eec\u770b\u3002\u60f3\u60f3\u90a3\u4e9b\u4e0d\u5bb9\u6613\u88ab\u6ce8\u610f\u5230\u7684\u9519\u8bef\u3002\n\u9605\u8bfb\u6e90\u4ee3\u7801\u3001\u7f16\u8bd1\u5e76\u901a\u8fc7\u6d4b\u8bd5\u5e76\u4e0d\u8db3\u4ee5\u5411\u6211\u4eec\u5c55\u793a\u7a0b\u5e8f\u7684\u6700\u7ec8\u884c\u4e3a\u3002\u77e5\u9053\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u505a\u4ec0\u4e48\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u2026\u8fd0\u884c\u5b83\u30024.\n\u51e0\u4e4e\u6240\u6709\u7684\u7a0b\u5e8f\u5458\u90fd\u5145\u5206\u610f\u8bc6\u5230\u81ea\u5df1\u7684\u80fd\u529b\u6709\u9650\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u5df2\u7ecf\u4f7f\u7528\u4e0d\u4f9d\u8d56\u6e90\u4ee3\u7801\u7684\u6280\u672f\u6765\u5206\u6790\u8fd0\u884c\u65f6\u884c\u4e3a\u3002\u4f8b\u5982\uff0c\u51e0\u79cd\u7f16\u8bd1\u8bed\u8a005\u7684\u5f00\u53d1\u4eba\u5458\u53ef\u4ee5\u6784\u5efa\u5e26\u6709\u51c0\u5316\u7a0b\u5e8f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4ee5\u68c0\u6d4b\u4eba\u773c\u5728\u8bfb\u53d6\u6e90\u4ee3\u7801\u65f6\u53ef\u80fd\u9519\u8fc7\u7684\u672a\u5b9a\u4e49\u884c\u4e3a\u3001\u79cd\u65cf\u3001\u672a\u521d\u59cb\u5316\u8bfb\u53d6\u7b49\u3002\u867d\u7136\u6784\u5efa\u8fd9\u4e9b\u4e8c\u8fdb\u5236\u6587\u4ef6\u9700\u8981\u6e90\u4ee3\u7801\uff0c\u4f46\u6ca1\u6709\u5fc5\u8981\u8fd0\u884c\u5b83\u4eec\u5e76\u89c2\u5bdf\u5931\u8d25\u3002\n\u5411\u6d4b\u8bd5\u4eba\u5458\u5206\u53d1\u5e26\u6709\u6d88\u6bd2\u5668\u548c\u8c03\u8bd5\u4fe1\u606f\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u6536\u96c6\u6709\u5173\u7a0b\u5e8f\u6f5c\u5728\u5b89\u5168\u95ee\u9898\u7684\u6570\u636e\u7684\u6709\u6548\u65b9\u6cd5\u3002\n\u901a\u8fc7\u8bfb\u53d6\u5927\u578b\u7a0b\u5e8f\u7684\u6e90\u4ee3\u7801\uff0c\u5f88\u96be\u786e\u5b9a\u5b83\u9700\u8981\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u548c\u6587\u4ef6\uff0c\u5c24\u5176\u662f\u5728\u67d0\u4e9b\u5e93\uff08\u4f8b\u5982libc\u5b9e\u73b0/\u7248\u672c\uff09\u53ef\u80fd\u4e0d\u540c\u7684\u60c5\u51b5\u4e0b\u3002\u50cfstrace\uff081\uff096\u8fd9\u6837\u7684\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u5668\u4f7f\u8fd9\u4e2a\u8fc7\u7a0b\u53d8\u5f97\u5fae\u4e0d\u8db3\u9053\u3002\n\u4e2a\u4eba\u4f8b\u5b50\uff1a\u6211\u4ecestrace\u90a3\u91cc\u83b7\u5f97\u7684\u7406\u89e3\u5bf9\u6211\u7f16\u5199bubblewrap\u811a\u672c\u662f\u5fc5\u8981\u7684\u3002\u8fd9\u4e9b\u811a\u672c\u4f7f\u7528BubbleRap\uff081\uff09\u4ee5\u5c3d\u53ef\u80fd\u4f4e\u7684\u6743\u9650\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u6c99\u7bb1\u5904\u7406\u3002\u5206\u6790\u6bcf\u4e00\u4e2a\u76f8\u5173\u7684\u7a0b\u5e8f\u548c\u5e93\u7684\u6e90\u4ee3\u7801\u90fd\u4f1a\u82b1\u8d39\u6211\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\uff0c\u800cstrace\u5728\u4e00\u4e2a\u4e0b\u5348\u5c31\u7ed9\u4e86\u6211\u6211\u9700\u8981\u77e5\u9053\u7684\u4e00\u5207\uff1a\u5206\u6790strace\u7684\u8f93\u51fa\u4f1a\u51c6\u786e\u5730\u544a\u8bc9\u6211\u5141\u8bb8\u54ea\u4e9b\u7cfb\u7edf\u8c03\u7528\u4ee5\u53ca\u5141\u8bb8\u8bbf\u95ee\u54ea\u4e9b\u6587\u4ef6\uff0c\u751a\u81f3\u4e0d\u9700\u8981\u77e5\u9053\u7a0b\u5e8f\u662f\u7528\u4ec0\u4e48\u8bed\u8a00\u7f16\u5199\u7684\u3002\u6211\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee47\u751f\u6210\u4e86syscall allow list\u7684\u521d\u59cb\u7248\u672c\uff1a\n\u7a0b\u5e8fargs 2\u7684strace\u540d\u79f0&gt&amp\uff1b1\\|rg&#39^\uff08[a-z]*\uff09\\\uff08.&#39\uff1b--\u66ff\u6362&#39\uff1b$1&#39\uff1b\\|\u6392\u5e8f| uniq\n\u8fd9\u8fd8\u6269\u5c55\u5230\u786e\u5b9a\u7a0b\u5e8f\u5982\u4f55\u5229\u7528\u7f51\u7edc\uff1aWireshark\u7b49\u6570\u636e\u5305\u55c5\u63a2\u5668\u53ef\u4ee5\u786e\u5b9a\u7a0b\u5e8f\u4f55\u65f6\u8fde\u63a5\u5230\u7f51\u7edc\uff0c\u4ee5\u53ca\u8fde\u63a5\u5230\u54ea\u91cc\u3002\n\u8fd9\u4e9b\u65b9\u6cd5\u5e76\u975e\u5b8c\u7f8e\u65e0\u7f3a\u3002\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u5668\u7684\u8bbe\u8ba1\u53ea\u662f\u4e3a\u4e86\u9610\u660e\u7a0b\u5e8f\u5982\u4f55\u4e0e\u5185\u6838\u4ea4\u4e92\u3002\u5185\u6838\u4ea4\u4e92\u544a\u8bc9\u4e86\u6211\u4eec\u5f88\u591a\uff08\u6709\u65f6\u8fd9\u662f\u6211\u4eec\u6240\u9700\u8981\u7684\uff09\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u80fd\u8bf4\u660e\u5168\u90e8\u60c5\u51b5\u3002\u6b64\u5916\uff0c\u901a\u8fc7\u4f20\u8f93\u52a0\u5bc68\uff0c\u5305\u68c0\u67e5\u53ef\u80fd\u4f1a\u6709\u70b9\u75db\u82e6\uff1b\u8ddf\u8e2a\u7a0b\u5e8f\u7684\u6267\u884c\u548c\u6570\u636e\u5305\u68c0\u67e5\u53ef\u4ee5\u63d0\u4f9b\u6e05\u6670\u7684\u4fe1\u606f\uff0c\u4f46\u8fd9\u5e76\u4e0d\u5bb9\u6613\u3002\n\u66f4\u591a\u4fe1\u606f\uff0c\u6211\u4eec\u8f6c\u5411\u6838\u5fc3\u8f6c\u50a8\uff0c\u4e5f\u79f0\u4e3a\u5185\u5b58\u8f6c\u50a8\u3002\u5185\u6838\u8f6c\u50a8\u5171\u4eab\u7a0b\u5e8f\u5728\u6267\u884c\u671f\u95f4\u6216\u5d29\u6e83\u65f6\u7684\u72b6\u6001\uff0c\u8ba9\u6211\u4eec\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u7684\u6570\u636e\u3002\u5305\u542b\u8c03\u8bd5\u7b26\u53f7\uff08\u4f8b\u5982DWARF\uff09\u7684\u6784\u5efa\u6709\u66f4\u8be6\u7ec6\u7684\u6838\u5fc3\u8f6c\u50a8\u3002\u53d1\u5e03\u9884\u53d1\u5e03\u7248\u672c\u7684\u6bcf\u65e5\u5feb\u7167\u7684\u4f9b\u5e94\u5546\u901a\u5e38\u4f1a\u5305\u542b\u4e00\u4e9b\u7b26\u53f7\uff0c\u4ee5\u5411\u6d4b\u8bd5\u4eba\u5458\u63d0\u4f9b\u6709\u5173\u5d29\u6e83\u539f\u56e0\u7684\u66f4\u591a\u7ec6\u8282\u3002Web\u6d4f\u89c8\u5668\u662f\u4e00\u4e2a\u5e38\u89c1\u7684\u4f8b\u5b50\uff1aChrome\u5f00\u53d1\u5feb\u7167\u3001Chrome Canary\u3001Firefox Nightly\u3001WebKit Canary\u6784\u5efa\u7b49\u7b49\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u5305\u62ec\u8c03\u8bd5\u7b26\u53f7\u3002\u76f4\u5230\u6700\u8fd1\uff0cMinecraft:Basefine\u7248\u8fd8\u5305\u62ec\u8c03\u8bd5\u7b26\u53f7\uff0c\u8fd9\u4e9b\u7b26\u53f7\u88abmodding\u793e\u533a\u5927\u91cf\u4f7f\u7528\u30029\n2020\u5e74\uff0cZoom Video Communications\u56e0\u5c06\u5176\u201cZoom\u201d\u8f6f\u4ef6\u4f5c\u4e3a\u5b89\u5168\u7684\u7aef\u5230\u7aef\u52a0\u5bc6\u89c6\u9891\u4f1a\u8bae\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u8425\u9500\u800c\u53d7\u5230\u5ba1\u67e5\u3002Zoom\u7684\u6587\u6863\u58f0\u79f0\u5b83\u4f7f\u7528\u4e86\u201cAES-256\u201d\u52a0\u5bc6\u3002\u5982\u679c\u6ca1\u6709\u6e90\u4ee3\u7801\uff0c\u6211\u4eec\u662f\u5426\u5fc5\u987b\u6309\u7167\u6587\u6863\u7684\u8981\u6c42\u884c\u4e8b\uff1f\n\u516c\u6c11\u5b9e\u9a8c\u5ba4\u6ca1\u6709\u30022020\u5e744\u6708\uff0c\u5b83\u53d1\u5e03\u4e86\u4e00\u4efd\u62a5\u544a\uff0c\u63ed\u793a\u4e86Zoom\u52a0\u5bc6\u7684\u5173\u952e\u7f3a\u9677\u3002\u5b83\u5229\u7528Wireshark\u548cmitmproxy\u5206\u6790\u7f51\u7edc\u6d3b\u52a8\uff0c\u5e76\u68c0\u67e5\u6838\u5fc3\u8f6c\u50a8\u4ee5\u4e86\u89e3\u5176\u52a0\u5bc6\u5b9e\u73b0\u3002\u516c\u6c11\u5b9e\u9a8c\u5ba4\u7684\u7814\u7a76\u4eba\u5458\u53d1\u73b0\uff0cZoom\u5b9e\u9645\u4e0a\u4f7f\u7528\u4e86\u4e00\u4e2a\u7f3a\u9677\u6781\u5927\u7684AES-128\u5f31\u7248\u672c\uff08ECB\u6a21\u5f0f\uff09\u5b9e\u73b0\uff0c\u5e76\u4e14\u5f88\u5bb9\u6613\u7ed5\u8fc7\u5b83\u3002\n\u7cfb\u7edf\u8c03\u7528\u8ddf\u8e2a\u3001\u6570\u636e\u5305\u55c5\u63a2\u548c\u6838\u5fc3\u8f6c\u50a8\u90fd\u5f88\u597d\uff0c\u4f46\u5b83\u4eec\u4f9d\u8d56\u4e8e\u624b\u52a8\u6267\u884c\uff0c\u800c\u624b\u52a8\u6267\u884c\u53ef\u80fd\u4e0d\u4f1a\u547d\u4e2d\u6240\u6709\u6240\u9700\u7684\u4ee3\u7801\u8def\u5f84\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd8\u6709\u5176\u4ed6\u5f62\u5f0f\u7684\u5206\u6790\u53ef\u7528\u3002\n\u8ddf\u8e2a\u6267\u884c\u548c\u68c0\u67e5\u5185\u5b58\u8f6c\u50a8\u53ef\u4ee5\u88ab\u89c6\u4e3a\u9006\u5411\u5de5\u7a0b\u7684\u5f62\u5f0f\uff0c\u4f46\u5b83\u4eec\u53ea\u63d0\u4f9b\u4e86\u6b63\u5728\u53d1\u751f\u7684\u4e8b\u60c5\u7684\u8868\u9762\u89c6\u56fe\u3002\u5f53\u6211\u4eec\u5206\u6790\u4e8c\u8fdb\u5236\u5de5\u4ef6\u65f6\uff0c\u9006\u5411\u5de5\u7a0b\u53d8\u5f97\u66f4\u52a0\u6709\u8da3\u3002\n\u9759\u6001\u4e8c\u8fdb\u5236\u5206\u6790\u662f\u68c0\u67e5\u7a0b\u5e8f\u5e95\u5c42\u8bbe\u8ba1\u7684\u5f3a\u5927\u65b9\u6cd5\u3002\u53cd\u7f16\u8bd1\uff08\u5c24\u5176\u662f\u5728\u6dfb\u52a0\u8c03\u8bd5\u7b26\u53f7\u65f6\uff09\u53ef\u4ee5\u91cd\u65b0\u6784\u9020\u4e8c\u8fdb\u5236\u7a0b\u5e8f\u96c6\u6216\u6e90\u4ee3\u7801\u3002\u7b26\u53f7\u540d\u79f0\u5728\u7cbe\u7b80\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u53ef\u80fd\u770b\u8d77\u6765\u4e0d\u53ef\u7406\u89e3\uff0c\u6ce8\u91ca\u4e5f\u5c06\u4e22\u5931\u3002\u5269\u4e0b\u7684\u8db3\u4ee5\u7834\u8bd1\u63a7\u5236\u6d41\uff0c\u63ed\u793a\u7a0b\u5e8f\u5982\u4f55\u5904\u7406\u6570\u636e\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u80fd\u4f1a\u5f88\u4e4f\u5473\uff0c\u5c24\u5176\u662f\u5f53\u7a0b\u5e8f\u4f7f\u7528\u67d0\u79cd\u5f62\u5f0f\u7684\u4e8c\u8fdb\u5236\u6a21\u7cca\u5904\u7406\u65f6\u3002\n\u76ee\u6807\u4e0d\u4e00\u5b9a\u662f\u5b8c\u5168\u7406\u89e3\u4e00\u4e2a\u7a0b\u5e8f\u7684\u8bbe\u8ba1\uff08\u6ca1\u6709\u6e90\u4ee3\u7801\u662f\u975e\u5e38\u56f0\u96be\u7684\uff09\uff1b\u5b83\u901a\u5e38\u662f\u4e3a\u4e86\u56de\u7b54\u4e00\u4e2a\u7279\u5b9a\u7684\u95ee\u9898\uff0c\u586b\u8865\u8ddf\u8e2a/\u6a21\u7cca\u7559\u4e0b\u7684\u7a7a\u767d\uff0c\u6216\u8005\u627e\u5230\u4e00\u4e2a\u8457\u540d\u7684\u5c5e\u6027\u3002\u5f53\u5f00\u53d1\u4eba\u5458\u53d1\u5e03\u5173\u4e8e\u5176\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u7684\u5b89\u5168\u4f53\u7cfb\u7ed3\u6784\u7684\u6587\u6863\u65f6\uff0c\u53cd\u7f16\u8bd1\u5668\u7b49\u9006\u5411\u5de5\u7a0b\u5de5\u5177\u6b63\u662f\u9a8c\u8bc1\u5176\u8bda\u5b9e\u6027\uff08\u6216\u7f3a\u4e4f\u8bda\u5b9e\u6027\uff09\u6240\u9700\u8981\u7684\u3002\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u53cd\u7f16\u8bd1\u5668\u5f88\u5c11\u5355\u72ec\u4f7f\u7528\u3002\u76f8\u53cd\uff0c\u5b83\u4eec\u901a\u5e38\u662f\u9006\u5411\u5de5\u7a0b\u6846\u67b6\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\u4e5f\u652f\u6301\u5185\u5b58\u5206\u6790\u3001\u8c03\u8bd5\u5de5\u5177\u3001\u811a\u672c\u7f16\u5199\uff0c\u6709\u65f6\u751a\u81f3\u662fIDE\u3002\u6211\u7528\u7684\u662fradare\u9879\u76ee\uff0c\u4f46Ghidra\u4e5f\u5f88\u53d7\u6b22\u8fce\u3002\u5982\u679c\u4f60\u611f\u5174\u8da3\uff0c\u4ed6\u4eec\u7684\u6587\u6863\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5f00\u59cb\u3002\n\u8fd9\u4e9b\u53cd\u5411\u5de5\u7a0b\u6280\u672f\u2014\u2014\u8ffd\u8e2a\u3001\u6570\u636e\u5305\u55c5\u63a2\u3001\u4e8c\u8fdb\u5236\u5206\u6790\u548c\u5185\u5b58\u8f6c\u50a8\u7684\u7ec4\u5408\u2014\u2014\u6784\u6210\u4e86\u5927\u591a\u6570\u73b0\u4ee3\u6076\u610f\u8f6f\u4ef6\u5206\u6790\u7684\u5de5\u4f5c\u539f\u7406\u3002\u8bf7\u53c2\u89c1\u6b64Zoom Windows\u5b89\u88c5\u7a0b\u5e8f\u7684\u5168\u81ea\u52a8\u5206\u6790\u793a\u4f8b\u3002\u5b83\u5217\u4e3e\u4e86\u5927\u91cf\u6709\u5173Zoom\u7684\u4fe1\u606f\uff0c\u800c\u65e0\u9700\u8bbf\u95ee\u5176\u6e90\u4ee3\u7801\uff1a\u8bfb\u53d6\u552f\u4e00\u7684\u673a\u5668\u4fe1\u606f\u3001\u53cdVM\u548c\u53cd\u53cd\u5411\u5de5\u7a0b\u6280\u5de7\u3001\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\u3001\u5404\u79cd\u7c7b\u578b\u7684\u7f51\u7edc\u8bbf\u95ee\u3001\u8bfb\u53d6\u5df2\u88c5\u5165\u5377\u7684\u4fe1\u606f\uff0c\u7b49\u7b49\u3002\n\u8981\u4eb2\u81ea\u5c1d\u8bd5\uff0c\u8bf7\u4f7f\u7528\u4e3a\u52a8\u6001\u5206\u6790\u8bbe\u8ba1\u7684\u6c99\u76d2\u3002\u5e03\u8c37\u9e1f\u662f\u4e00\u79cd\u5e38\u89c1\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u5fb7\u62c9\u514b\u592b\u5219\u66f4\u4e3a\u5148\u8fdb\u3002\n\u82f1\u7279\u5c14\u7ba1\u7406\u5f15\u64ce\uff08ME\uff09\u662f\u6240\u6709\u82f1\u7279\u5c14\u5904\u7406\u5668\uff082008\u5e74\u4e4b\u540e\uff09\u7684\u5fc5\u9009\u5b50\u7cfb\u7edf\uff0c\u5bf9\u4e3b\u673a\u7cfb\u7edf\u5177\u6709\u6781\u9ad8\u7684\u8bbf\u95ee\u6743\u9650\u3002\u4e3b\u52a8\u7ba1\u7406\u6280\u672f\uff08AMT\uff09\u8fd0\u884c\u5728\u5e26\u6709\u201cvPro\u201d\u54c1\u724c\u7684\u82f1\u7279\u5c14\u5904\u7406\u5668\u5b50\u96c6\u4e0a\u3002\u540e\u8005\u53ef\u4ee5\u88ab\u7981\u7528\uff0c\u7528\u4e8e\u7ec4\u7ec7\u8fdc\u7a0b\u7ba1\u7406\u5176\u5e93\u5b58\uff08\u5b89\u88c5\u8f6f\u4ef6\u3001\u76d1\u63a7\u3001\u8fdc\u7a0b\u901a\u7535/\u7761\u7720/\u5524\u9192\u7b49\uff09\u3002\nIntel ME\u5bf9\u4e3b\u673a\u7cfb\u7edf\u7684\u8bbf\u95ee\u5982\u6b64\u6df1\u5165\uff0c\u800c\u4e14\u5b83\u662f\u4e13\u6709\u7684\uff0c\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\u90fd\u4f7f\u5b83\u6210\u4e3a\u4e86\u9ad8\u5ea6\u5ba1\u67e5\u7684\u4e3b\u9898\u3002\u8bb8\u591a\u4eba\uff08\u5927\u591a\u6570\u4eba\u5728\u8fd9\u65b9\u9762\u51e0\u4e4e\u6ca1\u6709\u7ecf\u9a8c\uff09\u5c06\u8fd9\u4e24\u4e2a\u4e8b\u5b9e\u8054\u7cfb\u5728\u4e00\u8d77\uff0c\u58f0\u79f0ME\u662f\u4e00\u4e2a\u540e\u95e8\uff0c\u901a\u5e38\u662f\u901a\u8fc7\u6df7\u6dc6\u5730\u5f15\u7528Intel AMT\u7684\u529f\u80fd\u800c\u4e0d\u662fME\u3002\u771f\u7684\u4e0d\u53ef\u80fd\u786e\u5b9a\u5417\uff1f\n\u6211\u9009\u62e9\u201c\u82f1\u7279\u5c14ME+AMT\u201d\u4f5c\u4e3a\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u5b83\u663e\u793a\u4e86\u6240\u6db5\u76d6\u7684\u5206\u6790\u65b9\u6cd5\u7684\u5a01\u529b\u548c\u5c40\u9650\u6027\u3002ME\u4e0d\u662f\u7531\u7b80\u5355\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7ec4\u6210\u7684\uff0c\u4f60\u53ef\u4ee5\u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u8fd0\u884c\uff0c\u56e0\u4e3a\u5b83\u4f4d\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684\u4e0b\u65b9\uff0c\u6709\u65f6\u88ab\u79f0\u4e3a\u201cRing-3\u201d\u300210\u5206\u6790\u4ec5\u9650\u4e8e\u5916\u90e8\u76d1\u6d4b\uff08\u4f8b\u5982\uff0c\u901a\u8fc7\u76d1\u6d4b\u7f51\u7edc\u6d3b\u52a8\uff09\u548c\u53cd\u5411\u5de5\u7a0b\uff08\u5728\u5b98\u65b9\u6587\u4ef6\u7684\u5e2e\u52a9\u4e0b\uff0c\u672a\u6253\u5305\u7684\u90e8\u5206\u6a21\u7cca\u56fa\u4ef6\u66f4\u65b0\uff09\u3002\u8fd9\u6bd4\u5206\u6790\u5178\u578b\u7684\u53ef\u6267\u884c\u6587\u4ef6\u6216\u5e93\u66f4\u6162\u3001\u66f4\u96be\u3002\n\u7b54\u6848\u6709\u70b9\u590d\u6742\u2026\u2026\u6bd4\u8038\u4eba\u542c\u95fb\u7684\u5934\u6761\u65b0\u95fb\u66f4\u65e0\u804a\u3002\u4f0a\u6208\u5c14\u00b7\u65af\u79d1\u94a6\u65af\u57fa\uff08Igor Skochinsky\uff09\u548c\u5c3c\u53e4\u62c9\u00b7\u79d1\u7eb3\uff08Nicola Corna\uff0c\u5206\u522b\u662fme tools\u548cme_cleaner\u7684\u5f00\u53d1\u8005\uff09\u7b49\u9006\u5411\u5de5\u7a0b\u5e08\u5bf9me\u8fdb\u884c\u4e86\u5206\u6790\uff0c\u800c\u74e6\u897f\u91cc\u5965\u65af\u00b7\u7ef4\u5f17\u91cc\u65af\uff08Vassilios Verververis\uff09\u7b49\u7814\u7a76\u4eba\u5458\u57282010\u5e74\u5bf9AMT\u8fdb\u884c\u4e86\u5f7b\u5e95\u7684\u5206\u6790\u3002\u6709\u8da3\u7684\u662f\uff0c\u524d\u4e24\u4eba\u8ba4\u4e3a\u5ba1\u8ba1\u4e8c\u8fdb\u5236\u4ee3\u7801\u6bd4\u5ba1\u8ba1\u6e90\u4ee3\u7801\u66f4\u53ef\u53d6\u3002\n\u53ea\u9700\u76d1\u63a7\u7f51\u7edc\u6d3b\u52a8\u5e76\u7cfb\u7edf\u5730\u6d4b\u8bd5\u6587\u6863\u4e2d\u7684\u6240\u6709\u58f0\u660e\uff0cVerveris\u5c31\u53ef\u4ee5\u53d1\u73b0Intel AMT\u4e2d\u7684\u5927\u91cf\u5b89\u5168\u95ee\u9898\u3002\u7136\u800c\uff0c\u636e\u6211\u6240\u77e5\uff0c\u8fd8\u6ca1\u6709\u53d1\u73b0\u4efb\u4f55\u672a\u8bb0\u5f55\u7684\u7279\u5f81\u3002\u8fd9\u4e9b\u6709\u95ee\u9898\u7684\u53d1\u73b0\u56f4\u7ed5\u7740\u6709\u7f3a\u9677/\u4e0d\u5b89\u5168\u7684\u6587\u6863\u5316\u529f\u80fd\u5b9e\u73b0\u5c55\u5f00\u3002\u6362\u53e5\u8bdd\u8bf4\uff1a\u6ca1\u6709\u8bc1\u636e\u8868\u660eAMT\u662f\u201c\u540e\u95e8\u201d\uff0c\u4f46\u5b83\u7684\u5b89\u5168\u7f3a\u9677\u53ef\u80fd\u4e5f\u6709\u7c7b\u4f3c\u7684\u5f71\u54cd\u3002\u5e78\u8fd0\u7684\u662f\uff0cAMT\u53ef\u4ee5\u88ab\u7981\u7528\u3002\u90a3\u6211\u5462\uff1f\n\u8fd9\u5c31\u662f\u4e00\u4e9b\u4e8c\u8fdb\u5236\u5206\u6790\u7684\u7528\u6b66\u4e4b\u5730\u3002\u65e0\u8bba\u662f\u65af\u79d1\u94a6\u65af\u57fa\u7684\u300a\u6211\u7684\u79d8\u5bc6\u300b\u6f14\u8bb2\uff0c\u8fd8\u662f\u4e4b\u524d\u4ed6\u4e0e\u79d1\u7eb3\u7684\u5173\u8054\u6f14\u8bb2\uff0c\u4f3c\u4e4e\u90fd\u6ca1\u6709\u5217\u4e3e\u4efb\u4f55\u4e0e\u5b98\u65b9\u6587\u4ef6\u76f8\u77db\u76fe\u7684\u5730\u65b9\u3002\n\u4e0d\u5e78\u7684\u662f\uff0c\u7531\u4e8e\u4f7f\u7528\u54c8\u592b\u66fc\u538b\u7f29\u548c\u672a\u77e5\u5b57\u5178\u8fdb\u884c\u6df7\u6dc6\uff0c\u4e00\u4e9b\u7ec4\u4ef6\u7684\u7406\u89e3\u5f88\u5dee\u3002\u4e86\u89e3\u6a21\u7cca\u7ec4\u4ef6\u7684\u5185\u90e8\u5de5\u4f5c\u539f\u7406\u6a21\u7cca\u4e86\u8f6f\u4ef6\u9006\u5411\u5de5\u7a0b\u548c\u82af\u7247\u5b9e\u9645\u5236\u9020\u4e4b\u95f4\u7684\u754c\u9650\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u8db3\u591f\u7684\u8d44\u91d1\u8fdb\u5165\u82af\u7247\u5b9e\u9a8c\u5ba4\uff0c\u540e\u8005\u51e0\u4e4e\u662f\u4e0d\u53ef\u80fd\u7684\u3002\u7136\u800c\uff0c\u9ed1\u76d2\u5206\u6790\u786e\u5b9e\u544a\u8bc9\u6211\u4eec\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u529f\u80fd\uff1a\u8bf7\u53c2\u9605\u201c\u6211\u7684\u79d8\u5bc6\u201d\u7b2c21\u9875\u3002\u611f\u8c22zdctg\u5bf9\u6b64\u7684\u6f84\u6e05\u3002\nSkochinsky\u548cCorna\u7684\u5206\u6790\u8db3\u4ee5\u6f84\u6e05\uff08\u4f46\u5e76\u975e\u5b8c\u5168\u53cd\u9a73\uff09\u8038\u4eba\u542c\u95fb\u7684\u8bf4\u6cd5\uff0c\u5373ME\u53ef\u4ee5\u8fdc\u7a0b\u9501\u5b9a\u4efb\u4f55PC\uff08\u8fd9\u662f\u4ee5\u524d\u7684\u9009\u62e9\u52a0\u5165\u529f\u80fd\uff09\uff0c\u53ef\u4ee5\u76d1\u89c6\u7528\u6237\u6240\u505a\u7684\u4efb\u4f55\u4e8b\u60c5\uff08\u4ed6\u4eec\u6f84\u6e05\uff0c\u8bbf\u95ee\u4ec5\u9650\u4e8e\u4e3b\u673a\u5185\u5b58\u548c\u96c6\u6210GPU\u7684\u672a\u963b\u585e\u90e8\u5206\uff0c\u4f46\u4e0d\u5305\u62ec\u5e27\u7f13\u51b2\u533a\u7b49\uff09\uff0c\u7b49\u7b49\u3002\n\u867d\u7136\u8bf8\u5982\u201c\u6211\u662f\u4e00\u4e2a\u53ef\u4ee5\u505a\u4efb\u4f55\u4e8b\u60c5\u7684\u9ed1\u5323\u5b50\u201d\u4e4b\u7c7b\u7684\u8bf4\u6cd5\u662f\u8bef\u5bfc\u6027\u7684\uff0c\u4f46\u6211\u5e76\u975e\u6ca1\u6709\u81ea\u5df1\u7684\u5f31\u70b9\u3002\u6211\u6700\u559c\u6b22\u770b\u7684\u95ee\u9898\u662f\u9a6c\u514b\u00b7\u57c3\u83ab\u6d1b\u592b\u548c\u9a6c\u514b\u897f\u59c6\u00b7\u6208\u91cc\u4e9a\u5e0c\u57282017\u5e74\u9ed1\u5e3d\u6b27\u6d32\u5927\u4f1a\u4e0a\u7684\u6f14\u8bb2\uff1a\u5982\u4f55\u7834\u89e3\u5173\u95ed\u7684\u8ba1\u7b97\u673a\uff0c\u6216\u5728\u82f1\u7279\u5c14\u7ba1\u7406\u5f15\u64ce\u4e2d\u8fd0\u884c\u672a\u7b7e\u540d\u7684\u4ee3\u7801\u3002\n\u7b80\u8a00\u4e4b\uff1a\u6211\u62e5\u6709\u6240\u6709\u6743\u5e76\u4e0d\u610f\u5473\u7740\u6211\u4eec\u65e0\u6cd5\u4e86\u89e3\u5b83\u7684\u5b89\u5168\u6027\u3002\u4e8c\u5143\u5206\u6790\u4e0e\u8fd0\u884c\u65f6\u68c0\u67e5\u76f8\u7ed3\u5408\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u5f88\u597d\u5730\u7406\u89e3\u4f7f\u7528\u4e8c\u5143\u5206\u6790\u6240\u505a\u7684\u6743\u8861\u3002\u867d\u7136\u6211\u6709\u8fc7\u4e25\u91cd\u7684\u8106\u5f31\u6027\u5386\u53f2\uff0c\u4f46\u5b83\u4eec\u4e0e\u8fb9\u7f18\u9634\u8c0b\u8bba\u6240\u5ba3\u79f0\u7684\u76f8\u53bb\u751a\u8fdc\u300211\n\uff08\u6ce8\uff1a\u82f1\u7279\u5c14\u5e76\u4e0d\u662f\u552f\u4e00\u4e00\u5bb6\u8fd9\u6837\u505a\u7684\u516c\u53f8\u3002\u5176\u4ed6\u82af\u7247\u901a\u5e38\u4e5f\u6709\u7c7b\u4f3c\u7684\u4ea7\u54c1\uff0c\u4f8b\u5982AMD\u5b89\u5168\u6280\u672f\uff09\u3002\n\u624b\u52a8\u8c03\u7528\u4e00\u4e2a\u4e0estrace\u8fd9\u6837\u7684\u8ddf\u8e2a\u5668\u76f8\u5339\u914d\u7684\u7a0b\u5e8f\u5e76\u4e0d\u603b\u662f\u80fd\u591f\u6267\u884c\u6240\u6709\u4ee3\u7801\u8def\u5f84\u6216\u627e\u5230\u8fb9\u7f18\u60c5\u51b5\u3002\u6a21\u7cca\u5316\u6709\u52a9\u4e8e\u5f25\u5408\u8fd9\u4e00\u5dee\u8ddd\uff1a\u5b83\u901a\u8fc7\u751f\u6210\u968f\u673a\u6216\u683c\u5f0f\u9519\u8bef\u7684\u6570\u636e\u6765\u4e3a\u7a0b\u5e8f\u63d0\u4f9b\u6570\u636e\uff0c\u4ece\u800c\u4f7f\u5bfc\u81f4\u7a0b\u5e8f\u5931\u8d25\u7684\u8fc7\u7a0b\u81ea\u52a8\u5316\u3002\u7136\u540e\uff0c\u7814\u7a76\u4eba\u5458\u7814\u7a76\u6545\u969c\u548c\u6545\u969c\u6761\u4ef6\uff0c\u4ee5\u9694\u79bb\u4e00\u4e2abug\u3002\n\u6a21\u7cca\u4e0d\u4e00\u5b9a\u4f9d\u8d56\u4e8e\u5bf9\u6e90\u4ee3\u7801\u7684\u8bbf\u95ee\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u79cd\u9ed1\u76d2\u6280\u672f\u3002\u50cfAmerican Fuzzy Loop\uff08AFL\uff09\u8fd9\u6837\u7684\u6a21\u7cca\u7a0b\u5e8f\u901a\u5e38\u4f7f\u7528\u7279\u6b8a\u7684\u6784\u5efa\uff0c\u4f46\u5176\u4ed6\u6a21\u7cca\u8bbe\u7f6e\u53ef\u4ee5\u4f7f\u7528\u51e0\u4e4e\u4efb\u4f55\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\u4e8b\u5b9e\u4e0a\uff0c\u67d0\u4e9b\u7c7b\u578b\u7684\u6a21\u7cca\u6d4b\u8bd5\uff08\u4f8b\u5982\uff0c\u6a21\u7ccaweb\u670d\u52a1\u7684API\uff09\u51e0\u4e4e\u4e0d\u9700\u8981\u4efb\u4f55\u5b9e\u73b0\u7ec6\u8282\u3002\nFuzzing\u7ecf\u5e38\u6355\u83b7\u53ea\u6709\u901a\u8fc7\u8fd0\u884c\u7a0b\u5e8f\u800c\u4e0d\u662f\u901a\u8fc7\u8bfb\u53d6\u6e90\u4ee3\u7801\u624d\u80fd\u53d1\u73b0\u7684bug\u3002\u5373\u4fbf\u5982\u6b64\uff0c\u6a21\u7cca\u5316\u7684\u6700\u5927\u53d7\u76ca\u8005\u8fd8\u662f\u5f00\u6e90\u9879\u76ee\u3002cURL\u3001OpenSSL\u3001web\u6d4f\u89c8\u5668\u3001\u6587\u672c\u5448\u73b0\u5e93\uff08HarfBuzz\u3001FreeType\uff09\u548c\u5de5\u5177\u94fe\uff08GCC\u3001Clang\u3001\u5b98\u65b9Go\u5de5\u5177\u94fe\u7b49\uff09\u90fd\u662f\u4e00\u4e9b\u503c\u5f97\u6ce8\u610f\u7684\u4f8b\u5b50\u3002\u5199\u4e86\u5173\u4e8e\u8d77\u6bdb\u5377\u66f2\uff1a\n\u6211&#39\uff1b\u6211\u4ee5\u524d\u8bf4\u8fc7\uff0c\u4f46\u8ba9\u6211\u518d\u8bf4\u4e00\u904d\uff1a\u4e00\u65e6\u6211\u4eec&#39\uff1b\u6211\u4eec\u4fee\u590d\u4e86\u9759\u6001\u5206\u6790\u5668\u6307\u51fa\u7684\u6240\u6709\u7f3a\u9677\u3002curl\u7684\u4e3b\u8981fuzzing\u662f\u7531OSS Fuzz\u5b8c\u6210\u7684\uff0c\u5b83\u4e0d\u61c8\u5730\u4e0d\u65ad\u4fee\u6539\u6700\u65b0\u7684curl\u4ee3\u7801\u3002\n\u5982\u679c\u4f60\u60f3\u5f00\u59cb\u6a21\u7cca\u5316\uff0c\u6211\u5efa\u8bae\u4f60\u770b\u770b\u300a\u7f8e\u56fd\u6a21\u7cca\u5faa\u73af\u5feb\u901f\u5165\u95e8\u6307\u5357\u300b\u3002Go 1.18\u7b49\u4e00\u4e9b\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u4e2d\u4e5f\u63d0\u4f9b\u4e86\u6a21\u7cca\u5de5\u5177\u3002\n\u6700\u8fd1\u7684\u4e00\u4e2a\u4f8b\u5b50\u662fCVE-2022-0185\uff0c\u5b83\u8bf4\u660e\u4e86\u6a21\u7cca\u5904\u7406\u5982\u4f55\u5e2e\u52a9\u53d1\u73b0\u5f00\u6e90\u9879\u76ee\u4e2d\u7684\u6f0f\u6d1e\uff1a\u51e0\u5468\u524d\uff0cCrustaders of Rust\u53d1\u73b0\u4e86\u4e00\u4e2aLinux 0-day\u3002\u5b83\u662f\u4f7f\u7528SyzCaller\u5185\u6838\u6a21\u7cca\u5668\u53d1\u73b0\u7684\u3002\u8be5\u8fc7\u7a0b\u8bb0\u5f55\u5728Will\u7684\u6839\u76ee\u5f55\u4e2d\uff1a\n\u6211\u5f3a\u70c8\u5efa\u8bae\u5927\u5bb6\u8bfb\u4e00\u8bfb\uff1b\u8fd9\u662f\u4e00\u4e2a\u5b8c\u7f8e\u7684\u4f8b\u5b50\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d88\u6bd2\u5242\u8fdb\u884c\u6a21\u7cca\u5904\u7406\uff0c\u627e\u5230\u6f0f\u6d1e\uff0c\u590d\u5236\u6f0f\u6d1e\uff08\u901a\u8fc7\u7f16\u5199\u4e00\u4e2a\u5c0f\u578bC\u7a0b\u5e8f\uff09\uff0c\u7136\u540e\u6df1\u5165\u6e90\u4ee3\u7801\u67e5\u627e\u5e76\u4fee\u590d\u539f\u56e0\uff0c\u6700\u540e\u62a5\u544a\u95ee\u9898\uff08\u4f7f\u7528\u8865\u4e01\uff01\uff09\u3002\u5f53\u6765\u6e90\u4e0d\u53ef\u7528\u65f6\uff0c\u4f9b\u5e94\u5546\u5c06\u627f\u62c5\u201c\u67e5\u627e\u5e76\u4fee\u590d\u201d\u6b65\u9aa4\u7684\u8d23\u4efb\u3002\n\u73b0\u6709\u7684\u4e00\u4e9b\u6700\u5e38\u7528\u7684\u7259\u7ebf\u662f\u8106\u5f31\u6027\u5206\u6790\u4e2d\u6765\u6e90\u4e0d\u53ef\u77e5\u65b9\u6cd5\u7684\u6700\u5927\u53d7\u76ca\u8005\uff0c\u8fd9\u4e00\u4e8b\u5b9e\u5e94\u8be5\u5f88\u6709\u542f\u53d1\u6027\u3002\u8fd9\u4e9b\u9879\u76ee\u7684\u6e90\u4ee3\u7801\u5df2\u7ecf\u53d7\u5230\u4e86\u6570\u767e\u4e07\u4eba\u7684\u5173\u6ce8\uff0c\u4f46\u4ed6\u4eec\u4ecd\u7136\u6295\u8d44\u4e8e\u6a21\u7cca\u57fa\u7840\u8bbe\u65bd\uff0c\u6f0f\u6d1e\u641c\u5bfb\u8005\u66f4\u559c\u6b22\u5206\u6790\u5de5\u4ef6\u800c\u4e0d\u662f\u68c0\u67e5\u6e90\u4ee3\u7801\u3002\n\u4ece\u5b89\u5168\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u5f88\u4e50\u610f\u627f\u8ba4\u51e0\u70b9\u652f\u6301\u6e90\u53ef\u7528\u6027\uff1a\n\u6e90\u4ee3\u7801\u53ef\u4ee5\u901a\u8fc7\u8865\u5145\u4e0e\u6e90\u4ee3\u7801\u65e0\u5173\u7684\u65b9\u6cd5\u6765\u7b80\u5316\u5206\u6790\u3002\u6211\u5728\u56db\u6b65\u6f0f\u6d1e\u4fee\u590d\u8fc7\u7a0b\u4e2d\u63d0\u5230\u7684\u6b65\u9aa4\u4e4b\u95f4\u7684\u754c\u9650\u5f88\u6a21\u7cca\u3002\n\u4fee\u8865\u6f0f\u6d1e\u5f88\u91cd\u8981\u3002\u6e90\u53ef\u7528\u6027\u4f7f\u793e\u533a\u3001\u8f6f\u4ef6\u5305\u7ef4\u62a4\u4eba\u5458\u6216\u62a5\u544a\u8005\u80fd\u591f\u53d1\u73b0\u8865\u4e01\u8f6f\u4ef6\u7684\u6f0f\u6d1e\u3002\u8f6f\u4ef6\u5305\u7ef4\u62a4\u4eba\u5458\u7ecf\u5e38\u901a\u8fc7\u5e2e\u52a9\u9879\u76ee\u4ece\u5e9f\u5f03/\u4e0d\u5b89\u5168\u7684\u4f9d\u8d56\u5173\u7cfb\u4e2d\u8fc1\u79fb\uff0c\u6a21\u7cca\u201c\u6253\u5305\u8005\u201d\u548c\u201c\u8d21\u732e\u8005\u201d\u4e4b\u95f4\u7684\u754c\u9650\u3002\u60f3\u5230\u7684\u4e00\u4e2a\u4f8b\u5b50\u662f\u9488\u5bf9Calibre\u7b49\u9879\u76ee\u7684Python 2\u5230Python 3\u7684\u8f6c\u6362\u300212\u80fd\u591f\u72ec\u7acb\u4e8e\u4e0a\u6e38\u652f\u6301\u89e3\u51b3\u95ee\u9898\uff0c\u662f\u9632\u6b62\u7528\u6237\u9a6f\u5316\u7684\u91cd\u8981\u63aa\u65bd\u3002\n\u4e00\u4e9b\u5f00\u53d1\u4eba\u5458/\u4f9b\u5e94\u5546\u4e0d\u53d1\u5e03\u4f7f\u7528\u73b0\u4ee3\u5de5\u5177\u94fe\u7ea7\u6f0f\u6d1e\u7f13\u89e3\u63aa\u65bd\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u4f8b\u5982PIE\u3001RELRO\u3001stack Canaris\u3001\u81ea\u52a8\u53d8\u91cf\u521d\u59cb\u5316\u3001CFI\u7b4913\uff09\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u81ea\u5df1\u6784\u5efa\u8f6f\u4ef6\uff08\u6216\u5c06\u5176\u59d4\u6258\u7ed9\u5b9e\u65bd\u8fd9\u4e9b\u7f13\u89e3\u63aa\u65bd\u7684\u53d1\u884c\u7248\uff09\u9700\u8981\u6e90\u4ee3\u7801\u53ef\u7528\u6027\uff08\u6216\u81f3\u5c11\u67d0\u79cd\u4e2d\u95f4\u8868\u793a\uff09\u3002\n\u5c01\u95ed\u6e90\u4ee3\u7801\u8f6f\u4ef6\u53ef\u80fd\u6709\u4e5f\u53ef\u80fd\u6ca1\u6709\u5305\u542b\u6d88\u6bd2\u5668\u548c\u8c03\u8bd5\u7b26\u53f7\u7684\u53ef\u7528\u7248\u672c\u3002\n\u867d\u7136\u6a21\u7cca\u5316\u53d1\u5e03\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u53ef\u80fd\u7684\uff0c\u4f46\u5728\u6e90\u4ee3\u7801\u53ef\u7528\u65f6\uff0c\u6a21\u7cca\u5316\u8981\u5bb9\u6613\u5f97\u591a\u3002\u4e13\u6709\u8f6f\u4ef6\u7684\u4f9b\u5e94\u5546\u5f88\u5c11\u53d1\u5e03\u7279\u6b8a\u7684\u6a21\u7cca\u53cb\u597d\u7248\u672c\uff0c\u5982\u679c\u4e0d\u4e86\u89e3\u9ad8\u7ea7\u8bbe\u8ba1\uff0c\u8fc7\u6ee4\u8bef\u62a5\u53ef\u80fd\u4f1a\u975e\u5e38\u7e41\u7410\u3002\n\u5f53\u7136\uff0c\u5728\u6e90\u4ee3\u7801\u4e2d\u53ef\u80fd\u4f1a\u53d1\u73b0\u4e00\u4e2a\u6f0f\u6d1e\u3002\u9664\u4e86\u9759\u6001\u4ee3\u7801\u5206\u6790\u548c\u540c\u884c\u8bc4\u5ba1\u901a\u5e38\u4f1a\u5e26\u6765\u7684\u4f4e\u6548\u6210\u679c\u5916\uff0c\u8fd9\u5e76\u4e0d\u662f\u5f53\u4eca\u53d1\u73b0\u5927\u591a\u6570\u6f0f\u6d1e\u7684\u4e3b\u8981\u65b9\u5f0f\uff08\u611f\u8c22\u60a8\u63d0\u9192\u6211\u6e90\u4ee3\u7801\u5206\u6790\u7684\u4f5c\u7528\uff09\u3002\n\u8f6f\u4ef6\u5373\u670d\u52a1\u7684\u5206\u6790\u53ef\u80fd\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u6211\u4eec\u901a\u5e38\u53ea\u5177\u5907\u67e5\u8be2\u670d\u52a1\u5668\u7684\u80fd\u529b\u3002\u670d\u52a1\u5668\u4e0d\u53d1\u9001\u6838\u5fc3\u8f6c\u50a8\u3001\u670d\u52a1\u5668\u7aef\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216\u8ddf\u8e2a\u65e5\u5fd7\u8fdb\u884c\u5206\u6790\u3002\u6b64\u5916\uff0c\u5f88\u96be\u9a8c\u8bc1\u670d\u52a1\u5668\u6b63\u5728\u8fd0\u884c\u54ea\u4e2a\u8f6f\u4ef6\u300214\u5bf9\u4e8e\u9700\u8981\u4fe1\u4efb\u670d\u52a1\u5668\u7684\u670d\u52a1\uff0c\u4ece\u5b89\u5168\u548c\u7528\u6237\u81ea\u7531\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8bbf\u95ee\u670d\u52a1\u5668\u7aef\u8f6f\u4ef6\u90fd\u5f88\u91cd\u8981\n\u672c\u6587\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u5047\u8bbe\u4e8c\u8fdb\u5236\u6587\u4ef6\u662f\u53ef\u68c0\u67e5\u548c\u53ef\u8ffd\u8e2a\u7684\u3002\u4e8c\u8fdb\u5236\u6df7\u6dc6\u548c\u67d0\u4e9b\u5f62\u5f0f\u7684\u5185\u5bb9\u4fdd\u62a4/DRM\u8fdd\u53cd\u4e86\u8fd9\u4e00\u5047\u8bbe\uff0c\u5b9e\u9645\u4e0a\u4f1a\u4f7f\u5206\u6790\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\n\u9664\u4e86\u6e90\u4ee3\u7801\uff0c\u5f00\u53d1\u8fc7\u7a0b\u7684\u900f\u660e\u5ea6\u6709\u52a9\u4e8e\u786e\u4fdd\u7528\u6237\u9075\u5b88\n......", "note_en": "I find it quite easy to handle views different from my own. I feel more troubled when I see people agree with me for the wrong reasons.\n It\u2019s no secret that I\u2019m a passionate supporter of software freedom: I\u2019ve written two posts about how Free, Libre, and Open-Source software ( FLOSS) is necessary but insufficient to preserve user autonomy:\n Whatsapp and the Domestication of Users The phenomenon of a class of predatory businesses models I call \u201cuser domestication\u201d and defense measures: FLOSS, open platforms, and simplicity.\n Keeping Platforms Open How open platforms can lose their openness, and what measures can prevent this. The Web, XMPP, email, and Matrix are examples that highlight both sides of the issue.\n  One of the biggest parts of the Free and Open Source Software definitions is the freedom to study a program and modify it; in other words, access to editable source code. I agree that such access is essential; however, far too many people support source availability for the  wrong reasons. One such reason is that source code is necessary to have any degree of transparency into how a piece of software operates, and is therefore necessary to determine if it is at all secure or trustworthy. Although security through obscurity is certainly not a robust measure, this claim has two issues:\n Source code describes what a program is designed to do; it is unnecessary and insufficient to determine if what it actually does aligns with its intended design.\n I\u2019d like to expand on these issues, focusing primarily on compiled binaries. Bear in mind that I do not think that source availability is  useless from a security perspective (it certainly makes audits easier), and I  do think that source availability is required for user freedom. I\u2019m arguing only that  source unavailability doesn\u2019t imply insecurity, and  source availability doesn\u2019t imply security. It\u2019s possible (and often preferable) to perform security analysis on binaries, without necessarily having source code. In fact, vulnerability discovery doesn\u2019t typically rely on source code analysis.\n PS: this stance is not absolute; I concede to several good counter-arguments \t at the bottom!\n  I don\u2019t think anyone seriously claims that software\u2019s security instantly improves the second its source code is published. The argument I\u2019m responding to is that source code is necessary to understand what a program does and how (in)secure it is, and without it we can\u2019t know for sure.\n Assuming a re-write that fundamentally changes a program\u2019s architecture is not an option  1, software security typically improves by fixing vulnerabilities via something resembling this process:\n  Source code is typically helpful (sometimes essential) to Step 3. If someone has completed Step 3, they will require source code in order to proceed to Step 4. Source code  isn\u2019t necessary for Steps 1 and 2; these steps rely on understanding how a program misbehaves. For that, we use  reverse engineering and/or  fuzzing.\n  Understanding  how a program is designed is not the same as understanding  what a program does. A reasonable level of one type of understanding does not imply the other.\n Source code  2 is essential to describe a program\u2019s high-level, human-comprehensible design; it represents a contract that outlines how a developer  expects a program to behave. A compiler or interpreter  3 must then translate it into machine instructions. But source code isn\u2019t always easy to map directly to machine instructions because it is part of a complex system:\n Compilers (sometimes even interpreters) can apply optimizations and hardening measures that are difficult to reason about. This is especially true for  JIT compilers that leverage run-time information.\n The operating system itself may be poorly understood by the developers, and run a program in a way that contradicts a developer\u2019s expectations.\n   All of the above points apply to each dependency and the underlying operating system, which can impact a program\u2019s behavior.\n Furthermore, all programmers are flawed mortals who don\u2019t always fully understand source code. Everyone who\u2019s done a non-trivial amount of programming is familiar with the feeling of encountering a bug during run-time for which the cause is impossible to find\u2026until they notice it staring them in the face on Line 12. Think of all the bugs that  aren\u2019t so easily noticed.\n Reading the source code, compiling, and passing tests isn\u2019t sufficient to show us a program\u2019s final behavior. The only way to know what a program does when you run it is to\u2026run it.  4\n  Almost all programmers are fully aware of their limited ability, which is why most already employ techniques to analyze run-time behavior that don\u2019t depend on source code. For example, developers of several compiled languages  5 can build binaries with sanitizers to detect undefined behavior, races, uninitialized reads, etc. that human eyes may have missed when reading source code. While source code is necessary to  build these binaries, it isn\u2019t necessary to run them and observe failures.\n Distributing binaries with sanitizers and debug information to testers is a valid way to collect data about a program\u2019s potential security issues.\n  It\u2019s hard to figure out which syscalls and files a large program program needs by reading its source, especially when certain libraries (e.g. the libc implementation/version) can vary. A syscall tracer like   strace(1)  6 makes the process trivial.\n A personal example: the understanding I gained from  strace was necessary for me to write my  bubblewrap scripts. These scripts use   bubblewrap(1) to sandbox programs with the minimum permissions possible. Analyzing every relevant program and library\u2019s source code would have taken me months, while  strace gave me everything I needed to know in an afternoon: analyzing the  strace output told me exactly which syscalls to allow and which files to grant access to, without even having to know what language the program was written in. I generated the initial version of the syscall allow-lists with the following command  7:\n strace name-of-program program-args 2&gt;&amp;1 \\\t| rg &#39;^([a-z_]*)\\(.*&#39; --replace &#39;$1&#39; \\\t| sort | uniq\n This also extends to determining how programs utilize the network: packet sniffers like  Wireshark can determine when a program connects to the network, and where it connects.\n These methods are not flawless. Syscall tracers are only designed to shed light on how a program interacts with the kernel. Kernel interactions tell us plenty (it\u2019s sometimes all we need), but they don\u2019t give the whole story. Furthermore, packet inspection can be made a bit painful by transit encryption  8; tracing a program\u2019s execution alongside packet inspection can offer clarity, but this is not easy.\n For more information, we turn to   core dumps, also known as memory dumps. Core dumps share the state of a program during execution or upon crashing, giving us greater visibility into exactly what data a program is processing. Builds containing debugging symbols (e.g.  DWARF) have more detailed core dumps. Vendors that release daily snapshots of pre-release builds typically include some symbols to give testers more detail concerning the causes of crashes. Web browsers are a common example: Chromium dev snapshots, Chrome Canary, Firefox Nightly, WebKit Canary builds, etc. all include debug symbols. Until recently,  Minecraft: Bedrock Edition included debug symbols which were used heavily by the modding community.  9\n  In 2020, Zoom Video Communications came under scrutiny for marketing its \u201cZoom\u201d software as a secure, end-to-end encrypted solution for video conferencing. Zoom\u2019s documentation claimed that it used \u201cAES-256\u201d encryption. Without source code, did we have to take the docs at their word?\n The Citizen Lab didn\u2019t. In April 2020, it published  a report revealing critical flaws in Zoom\u2019s encryption. It utilized Wireshark and  mitmproxy to analyze networking activity, and inspected core dumps to learn about its encryption implementation. The Citizen Lab\u2019s researchers found that Zoom actually used an incredibly flawed implementation of a weak version of AES-128 (ECB mode), and easily bypassed it.\n Syscall tracing, packet sniffing, and core dumps are great, but they rely on manual execution which might not hit all the desired code paths. Fortunately, there are other forms of analysis available.\n  Tracing execution and inspecting memory dumps can be considered forms of reverse engineering, but they only offer a surface-level view of what\u2019s going on. Reverse engineering gets much more interesting when we analyze a binary artifact.\n Static binary analysis is a powerful way to inspect a program\u2019s underlying design. Decompilation (especially when supplemented with debug symbols) can re-construct a binary\u2019s assembly or source code. Symbol names may look incomprehensible in stripped binaries, and comments will be missing. What\u2019s left is more than enough to decipher control flow to uncover how a program processes data. This process can be tedious, especially if a program uses certain forms of binary obfuscation.\n The goal doesn\u2019t have to be a complete understanding of a program\u2019s design (incredibly difficult without source code); it\u2019s typically to answer a specific question, fill in a gap left by tracing/fuzzing, or find a well-known property. When developers publish documentation on the security architecture of their closed-source software, reverse engineering tools like decompilers are exactly what you need to verify their honesty (or lack thereof).\n Decompilers are seldom used alone in this context. Instead, they\u2019re typically a component of reverse engineering frameworks that also sport memory analysis, debugging tools, scripting, and sometimes even IDEs. I use  the radare project, but  Ghidra is also popular. Their documentation should help you get started if you\u2019re interested.\n  These reverse-engineering techniques\u2013a combination of tracing, packet sniffing, binary analysis, and memory dumps\u2013make up the workings of most modern malware analysis. See  this example of a fully-automated analysis of the Zoom Windows installer. It enumerates plenty of information about Zoom without access to its source code: reading unique machine information, anti-VM and anti-reverse-engineering tricks, reading config files, various types of network access, reading info on mounted volumes, and more.\n To try this out yourself, use a sandbox designed for dynamic analysis.  Cuckoo is a common and easy-to-use solution, while  DRAKVUF is more advanced.\n  The Intel Management Engine (ME) is a mandatory subsystem of all Intel processors (after 2008) with extremely privileged access to the host system. Active Management Technology (AMT) runs atop it on the subset of Intel processors with \u201cvPro\u201d branding. The latter can be disabled and is intended for organizations to remotely manage their inventory (installing software, monitoring, remote power-on/sleep/wake, etc).\n The fact that Intel ME has such deep access to the host system and the fact that it\u2019s proprietary have both made it the subject of a high degree of scrutiny. Many people (most of whom have little experience in the area) connected these two facts together to allege that the ME is a backdoor, often by confusedly citing functionality of Intel AMT instead of ME. Is it really impossible to know for sure?\n I picked Intel ME+AMT to serve as an extreme example: it shows both the power and limitations of the analysis approaches covered. ME isn\u2019t made of simple executables you can just run in an OS because it sits far below the OS, in what\u2019s sometimes called \u201cRing -3\u201d.  10 Analysis is limited to external monitoring (e.g. by monitoring network activity) and reverse-engineering unpacked partially-obfuscated firmware updates, with help from official documentation. This is slower and harder than analyzing a typical executable or library.\n Answers are a bit complex and\u2026more boring than what sensationalized headlines would say. Reverse engineers such as Igor Skochinsky and Nicola Corna (the developers of  me-tools and  me_cleaner, respectively) have  analyzed ME, while researchers such as Vassilios Ververis have  thoroughly analyzed AMT in 2010. Interestingly, the former pair argues that auditing binary code is preferable to source code.\n Simply monitoring network activity and systematically testing all claims made by the documentation allowed Ververis to uncover a host of security issues in Intel AMT. However, no undocumented features have (to my knowledge) been uncovered. The problematic findings revolved around flawed/insecure implementations of documented functionality. In other words: there\u2019s been no evidence of AMT being \u201ca backdoor\u201d, but its security flaws could have had a similar impact. Fortunately, AMT can be disabled. What about ME?\n This is where some binary analysis comes in. Neither Skochinsky\u2019s  ME Secrets presentation nor the  previously-linked one he gave with Corna seem to enumerate any contradictions with  official documentation.\n Unfortunately, some components are poorly understood due to being obfuscated using  Huffman compression with unknown dictionaries. Understanding the inner workings of the obfuscated components blurs the line between software reverse-engineering and figuring out how the chips are actually made, the latter of which is nigh-impossible if you don\u2019t have access to a chip lab full of cash. However, black-box analysis does tell us about the capabilities of these components: see page 21 of \u201cME Secrets\u201d. Thanks to zdctg for clarifying this.\n Skochinsky\u2019s and Corna\u2019s analysis was sufficient to clarify (but not completely contradict) sensationalism claiming that ME can remotely lock any PC (it was a former opt-in feature), can spy on anything the user does (they clarified that access is limited to unblocked parts of the host memory and the integrated GPU, but doesn\u2019t include e.g. the framebuffer), etc.\n While claims such as \u201cME is a black box that can do anything\u201d are misleading, ME not without its share of vulnerabilities. My favorite look at its issues is a presentation by Mark Ermolov and Maxim Goryachy at Black Hat Europe 2017:  How to Hack a Turned-Off Computer, or Running Unsigned Code in Intel Management Engine.\n In short: ME being proprietary doesn\u2019t mean that we can\u2019t find out how (in)secure it is. Binary analysis when paired with runtime inspection can give us a good understanding of what trade-offs we make by using it. While ME has a history of serious vulnerabilities, they\u2019re nowhere near what  borderline conspiracy theories claim.  11\n (Note: Intel is not alone here. Other chips typically have equivalents, e.g. AMD Secure Technology).\n  Manual invocation of a program paired with a tracer like  strace won\u2019t always exercise all code paths or find edge-cases.  Fuzzing helps to bridge this gap: it automates the process of causing a program to fail by generating random or malformed data to feed it. Researchers then study failures and failure-conditions to isolate a bug.\n Fuzzing doesn\u2019t necessarily depend on access to source code, as it is a black-box technique. Fuzzers like  American Fuzzy Loop (AFL) normally use \t special builds, but  other fuzzing setups can work with just about any binaries. In fact, some types of fuzz tests (e.g.  fuzzing an API for a web service) hardly need any implementation details.\n Fuzzing frequently catches bugs that are only apparent by running a program, not by reading source code. Even so, the biggest beneficiaries of fuzzing are open source projects.  cURL,  OpenSSL, web browsers, text rendering libraries (HarfBuzz, FreeType) and toolchains (GCC, Clang, the official Go toolchain, etc.) are some notable examples.     wrote about  fuzzing curl:\n I&#39;ve said it before but let me say it again: fuzzing is really the top method to find problems in curl once we&#39;ve fixed all flaws that the static analyzers we use have pointed out. The primary fuzzing for curl is done by OSS-Fuzz, that tirelessly keeps hammering on the most recent curl code.\n If you want to get started with fuzzing, I recommend checking out  the quick-start guide for American Fuzzy Loop. Some languages like Go 1.18 also have fuzzing tools available right in the standard library.\n  A recent example of how fuzzing helps spot a vulnerability in an open-source project is  CVE-2022-0185: a Linux 0-day found by the Crusaders of Rust a few weeks ago. It was discovered using the  syzkaller kernel fuzzer. The process was documented on Will\u2019s Root:\n  I  highly encourage giving it a read; it\u2019s the perfect example of fuzzing with sanitizers to find a vulnerability, reproducing the vulnerability (by writing a tiny C program),  then diving into the source code to find and fix the cause, and finally reporting the issue (with a patch!). When source isn\u2019t available, the vendor would assume responsibility for the \u201cfind and fix\u201d steps.\n The fact that some of the most-used pieces of FLOSS in existence have been the biggest beneficiaries of source-agnostic approaches to vulnerability analysis should be quite revealing. The source code to these projects has received attention from millions of eyes, yet they  still invest in fuzzing infrastructure and vulnerability-hunters prefer analyzing artifacts over inspecting the source.\n  I readily concede to several points in favor of source availability from a security perspective:\n Source code can make analysis  easier by  supplementing source-independent approaches. The lines between the steps I mentioned in the \t four-step vulnerability-fixing process are blurry.\n Patching vulnerabilities is important. Source availability makes it possible for the community, package maintainers, or reporters of a vulnerability to patch software. Package maintainers often blur the line between \u201cpackager\u201d and \u201ccontributor\u201d by helping projects migrate away from abandoned/insecure dependencies. One example that comes to mind is the Python 2 to Python 3 transition for projects like Calibre.  12 Being able to fix issues independent of upstream support is an important mitigation against  user domestication.\n Some developers/vendors don\u2019t distribute binaries that make use of modern toolchain-level exploit mitigations (e.g.  PIE,  RELRO, stack canaries, automatic variable initialization,   CFI, etc.  13). In these cases, building software yourself with these mitigations (or delegating it to a distro that enforces them) requires source code availability (or at least some sort of intermediate representation).\n Closed-source software may or may not have builds available that include sanitizers and debug symbols.\n Although fuzzing release binaries is possible, fuzzing is much easier to do when source code is available. Vendors of proprietary software seldom release special fuzz-friendly builds, and filtering out false-positives can be quite tedious without understanding high-level design.\n It is certainly possible to notice a vulnerability in source code. Excluding low-hanging fruit typically caught by static code analysis and peer review, it\u2019s not the main way most vulnerabilities are found nowadays (thanks to    for  reminding me about what source analysis does accomplish).\n Software as a Service can be incredibly difficult to analyze, as we typically have little more than the ability to query a server. Servers don\u2019t send core dumps, server-side binaries, or trace logs for analysis. Furthermore, it\u2019s difficult to verify which software a server is running.  14 For services that require trusting a server, access to the server-side software is important from both a security and a user-freedom perspective\n Most of this post is written with the assumption that binaries are inspectable and traceable. Binary obfuscation and some forms of content protection/ DRM violate this assumption and actually do make analysis more difficult.\n Beyond source code, transparency into the development helps assure users of complianc\n......", "posttime": "2022-02-17 15:50:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9519\u8bef,reasons,\u7a0b\u5e8f", "title": "\u51fa\u4e8e\u9519\u8bef\u7684\u539f\u56e0\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\uff1a\u7259\u7ebf\u5e76\u4e0d\u610f\u5473\u7740\u5b89\u5168", "title_en": "The right thing for the wrong reasons: FLOSS doesn't imply security", "transed": 1, "url": "https://seirdy.one/2022/02/02/floss-security.html", "via": "", "real_tags": ["\u9519\u8bef", "reasons", "\u7a0b\u5e8f"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1073860, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6bcf\u5468\u6216\u6bcf\u5468\u4e24\u6b21\uff0c\u4f60\u90fd\u4f1a\u5728HackerNews\u4e0a\u770b\u5230\u4e00\u6761\u5e16\u5b50\uff0c\u79f0\u8c37\u6b4c\u6b63\u5728\u6d88\u4ea1\u6216\u8c37\u6b4c\u5f88\u7cdf\u7cd5\u3002\u4ed6\u4eec\u7684\u4e00\u4e9b\u8bba\u70b9\u6709\u4e00\u4e9b\u6b63\u786e\u7684\u89c2\u70b9\u3002\u7136\u800c\uff0c\u6211\u8ba4\u4e3a\u8c37\u6b4c\u77ed\u671f\u5185\u4e0d\u4f1a\u6709\u4efb\u4f55\u8fdb\u5c55\u3002\n\u6628\u5929\uff0c\u6211\u770b\u5230\u4e00\u7bc7\u9898\u4e3a\u201c\u8c37\u6b4c\u641c\u7d22\u6b63\u5728\u6d88\u4ea1\u201d\u7684\u5e16\u5b50\uff0c\u8fd9\u7bc7\u5e16\u5b50\u4e2d\u7684\u8bba\u70b9\u662f\u65b0\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4eba\u4eec\u5728\u641c\u7d22\u7ed3\u679c\u7684\u672b\u5c3e\u52a0\u4e0a\u201cReddit\u201d\u4e00\u8bcd\uff0c\u56e0\u4e3aReddit\u6bd4\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u66f4\u80fd\u56de\u7b54\u4eba\u4eec\u6b63\u5728\u641c\u7d22\u7684\u95ee\u9898\u3002\n\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u8fd9\u4e2a\u8bba\u70b9\u662f\u6709\u9053\u7406\u7684\u3002\u751a\u81f3\u6211\u4e5f\u901a\u8fc7\u8c37\u6b4c\u641c\u7d22\u5bfb\u627eReddit\u5e16\u5b50\uff0c\u56e0\u4e3a\u6211\u76f8\u4fe1Reddit\u5df2\u7ecf\u627e\u5230\u4e86\u6211\u60f3\u8981\u7684\u7b54\u6848\u3002\n\u7136\u800c\uff0cReddit\u53ef\u4ee5\u6784\u5efa\u6bd4\u8c37\u6b4c\u66f4\u597d\u7684\u641c\u7d22\u7684\u8bf4\u6cd5\u662f\u6709\u7f3a\u9677\u7684\u3002\u800c\u8fd9\u4e2a\u7f3a\u9677\u6b63\u662f\u5bfc\u81f4\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u7cdf\u7cd5\u7684\u540c\u4e00\u4e2a\u7f3a\u9677\u3002\u800c\u8fd9\u4e2a\u7f3a\u9677\u5c31\u662f\u91d1\u94b1\u3002\n\u8c37\u6b4c\u521a\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u6211\u8fd8\u592a\u5c0f\uff0c\u65e0\u6cd5\u4f7f\u7528\u5b83\uff0c\u4f46\u636e\u8bb8\u591a\u4eba\u8bf4\uff0c\u5728\u4e00\u5f00\u59cb\uff0c\u8c37\u6b4c\u6709\u66f4\u597d\u6216\u66f4\u51c6\u786e\u7684\u641c\u7d22\u7ed3\u679c\u3002\u5176\u4e2d\u4e00\u4e2a\u539f\u56e0\u662f\uff0c\u5f53\u65f6\u7684\u5927\u591a\u6570\u7f51\u7ad9\u90fd\u662f\u72ec\u7acb\u7f51\u7ad9\uff0c\u5b83\u4eec\u4e0d\u5173\u5fc3\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u548c\u91d1\u94b1\uff0c\u521b\u5efa\u4e86\u7528\u4e8e\u5171\u4eab\u4fe1\u606f\u7684\u7f51\u7ad9\u3002\n\u4f46\u6211\u8ba4\u4e3a\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u540c\u610f\uff0c\u5f53\u4eba\u4eec\u5f00\u59cb\u73a9\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u521b\u5efa\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u7684\u5783\u573e\u7f51\u7ad9\u65f6\uff0c\u8c37\u6b4c\u7684\u641c\u7d22\u7ed3\u679c\u51cf\u5c11\u4e86\u3002\u56e0\u4e3a\u66f4\u591a\u7684\u6d41\u91cf\u610f\u5473\u7740\u66f4\u591a\u7684\u5e7f\u544a\u6536\u5165\u3002\u8c37\u6b4c\u641c\u7d22\u7ed3\u679c\u9875\u9762\u4e5f\u662f\u5982\u6b64\u3002\u5728\u5f00\u59cb\u8d5a\u94b1\u4e4b\u540e\uff0c\u4ed6\u4eec\u5f00\u59cb\u7528\u8d8a\u6765\u8d8a\u591a\u7684\u5e7f\u544a\u586b\u5145\u641c\u7d22\u7ed3\u679c\u9875\u9762\u3002\nReddit\u5e16\u5b50\u5f88\u597d\uff0c\u56e0\u4e3a\u521b\u5efa\u8fd9\u4e9b\u5e16\u5b50\u6216\u53d1\u8868\u8bc4\u8bba\u7684\u4eba\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\u800c\u4e14\u6ca1\u6709\u4e0e\u4e4b\u76f8\u5173\u7684\u7ecf\u6d4e\u6fc0\u52b1\u3002\u4ed6\u4eec\u77e5\u9053\u8fd9\u6837\u505a\u662f\u4e3a\u4e86\u5206\u4eab\u4ed6\u4eec\u7684\u77e5\u8bc6\u3002\n\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u4eba\u4eec\u5728\u98df\u54c1\u535a\u5ba2\u548c\u5176\u4ed6\u7f51\u7ad9\u4e0a\u9605\u8bfbYelp\u8bc4\u8bba\u6216\u7ef4\u57fa\u767e\u79d1\u6587\u7ae0\u7684\u539f\u56e0\u3002\u56e0\u4e3a\u90a3\u91cc\u7684\u4eba\u4eec\u521b\u9020\u5185\u5bb9\u65f6\u77e5\u9053\u4ed6\u4eec\u6ca1\u6709\u4efb\u4f55\u7ecf\u6d4e\u6fc0\u52b1\u3002\uff08Yelp\u9664\u5916\uff0c\u5728Yelp\u4e2d\uff0c\u9910\u5385\u53ef\u4ee5\u5438\u5f15\u66f4\u591a\u987e\u5ba2\uff0c\u4f46\u8fd9\u4e0e\u76f4\u63a5\u5728\u7ebf\u5e7f\u544a\u4e0d\u540c\uff09\n\u7136\u800c\uff0c\u4e00\u65e6Reddit\u521b\u5efa\u4e86\u4e00\u4e2a\u641c\u7d22\u5f15\u64ce\uff0c\u4e00\u65e6\u4eba\u4eec\u77e5\u9053\u6709\u673a\u4f1a\u73a9\u8fd9\u4e2a\u7cfb\u7edf\u5e76\u521b\u9020\u4e00\u4e2a\u8d22\u52a1\u673a\u4f1a\uff0c\u4eba\u4eec\u5c31\u4f1a\u6ee5\u7528\u8fd9\u4e2a\u7cfb\u7edf\uff0c\u6211\u4eec\u5c31\u4f1a\u56de\u5230\u73b0\u5728\u7684\u4f4d\u7f6e\u3002\u641c\u7d22\u5f15\u64ce\u4f18\u5316\u586b\u5145\u7f51\u7ad9\u3002\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fee\u590d\u8fd9\u4e2a\u7cfb\u7edf\u5462\uff1f\u4fee\u590d\u8fd9\u4e2a\u7cfb\u7edf\u7684\u6700\u4f73\u65b9\u6cd5\u662f\u4f18\u5148\u8003\u8651\u90a3\u4e9b\u4e3a\u4e86\u5206\u4eab\u77e5\u8bc6\u800c\u5b58\u5728\u7684\u7f51\u7ad9\uff0c\u800c\u4e0d\u662f\u90a3\u4e9b\u4ee5\u5e7f\u544a\u6536\u5165\u4e3a\u4e3b\u8981\u76ee\u7684\u7684\u7f51\u7ad9\u3002\n\u6211\u4e0d\u662f100%\u53cd\u5bf9\u5e7f\u544a\uff0c\u6211\u8fd8\u662f\u66f4\u559c\u6b22\u6709\u9488\u5bf9\u6027\u7684\u5e7f\u544a\uff0c\u800c\u4e0d\u662f\u4e0e\u6211\u65e0\u5173\u7684\u968f\u673a\u5e7f\u544a\u3002\u4f46\u5728\u5185\u5bb9\u8d28\u91cf\u3001\u5e7f\u544a\u6570\u91cf\u548c\u76ee\u6807\u6570\u91cf\u4e4b\u95f4\u5e94\u8be5\u4fdd\u6301\u5e73\u8861\u3002\n\u7136\u800c\uff0c\u8ba4\u4e3aReddit\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u66f4\u597d\u7684\u641c\u7d22\u5f15\u64ce\u7684\u8bf4\u6cd5\u548c\u8c37\u6b4c\u4e00\u6837\u662f\u6709\u7f3a\u9677\u7684\u3002\n\u5728\u6b64\u6d4f\u89c8\u5668\u4e2d\u4fdd\u5b58\u6211\u7684\u59d3\u540d\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u7f51\u7ad9\uff0c\u4ee5\u5907\u4e0b\u6b21\u53d1\u8868\u8bc4\u8bba\u3002", "note_en": "Every week or twice a week, you will come across a post on HackerNews that Google is dying or Google is awful. There are some valid points to some of their arguments. However, I don\u2019t see Google going anywhere anytime soon.\n Yesterday, I came across a post titled, \u2018 Google search is Dying\u2018 and the argument in that post was something new. That is, people append the word \u2018Reddit\u2019 to the end of the results because Reddit has better answers to questions people are searching than Google search results.\n In a way, this argument has a point. Even I have looked for Reddit posts through Google search because I believed that Reddit had the answers that I\u2019m looking for.\n However, the argument that Reddit can build a better search than Google is a flawed argument. And that flaw is the same flaw that makes Google results bad. And that flaw is money.\n I was too young to use Google when it first got started, but according to many, in the beginning, Google had better or more accurate search results. One reason for this was the fact that most of the sites back then were indie websites, which did not care about SEO and money and created websites for sharing information.\n But I think all can agree that Google results reduced when people started to game the algorithm and create search engine optimized garbage websites. Because more traffic meant more advertising revenue. It\u2019s the same about the Google search results page. After beginning to monetize they started filling their search results page with more and more ads.\n Reddit posts are good because the people who create these posts or make comments are doing it to share their knowledge. And there is no financial incentive associated with it. They know that do it to share their knowledge.\n This is the same reason why people read Yelp reviews, or Wikipedia articles over food blogs and other websites about a given topic. Because people there create content knowing that they don\u2019t get any financial incentive. (Except in Yelp where restaurant can get more customers, but that is not similar to direct online advertising)\n However, once Reddit creates a search engine, and once people get to know that there is an opportunity to game the system and create a financial opportunity, people will abuse that system and we will be back to the place where we are now. SEO stuffed websites.\n So how can we fix the system? The best way to fix the system is to prioritize websites that are there to share knowledge, not websites with their primary priority to make ad revenue.\n I\u2019m not 100% against advertising, I\u2019d still prefer a targeted ad over a random ad that is unrelated to me. But there should be a balance between the quality of the content, the number of ads, and the amount of targetting.\n However, the argument that Reddit can build a better search engine is flawed as Google.\n  Save my name, email, and website in this browser for the next time I comment.", "posttime": "2022-02-17 15:48:17", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e0\u6cd5,build,\u8c37\u6b4c", "title": "Reddit\u65e0\u6cd5\u6784\u5efa\u66f4\u597d\u7684\u641c\u7d22\u5f15\u64ce", "title_en": "Reddit can't build a better search engine", "transed": 1, "url": "https://ruky.me/2022/02/17/reddit-can-build-a-better-search-engine/", "via": "", "real_tags": ["\u65e0\u6cd5", "build", "\u8c37\u6b4c"]}]