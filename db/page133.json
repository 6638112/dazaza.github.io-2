[{"category": "", "categoryclass": "", "imagename": "3c039aa2326c56d4766bba35777c9890.jpg", "infoid": 1068277, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u63a2\u9669\u961f\u690d\u6839\u4e8e\u73bb\u7483\u8461\u8404\u9152\u7d22\u5fb7\u5c14\u7684\u8bc4\u8bba\uff0c\u4ed6\u5728\u7f8e\u56fd\u8bf4\u4e30\u5bcc\u7684\u79cd\u5b50\u8d44\u672c\u5141\u8bb8\u521b\u59cb\u4eba\u5728\u7b79\u96c6\u4e00\u7cfb\u5217A\u7684\u7b79\u7801\u4e4b\u524d\u8fdb\u884c\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u6709\u6548\u63a8\u8fdf\u8fd9\u4e9b\u8f6e\u3002\u4f46\u662f\uff0c\u5728\u90a3\u4e9b\u521b\u59cb\u4eba\u63d0\u9ad8\u4e86\u4e00\u4e2a\u540e\uff0c\u7531\u4e8e\u5728\u65e9\u671f\u7684\u9636\u6bb5\u4ea4\u6613\u4e2d\u8868\u73b0\u51fa\u4e86\u6301\u7eed\u7684\u516c\u53f8\uff0c\u4ed6\u4eec\u7684\u7b2cB\u8f6e\u8fc5\u901f\u8fc5\u901f\u5730\u9075\u5faa\u666e\u904d\u7684\u516c\u53f8\u3002\n  \u4e0eSeseri\u804a\u5929\u540e\u66f4\u591a\u548c\u4e00\u4e9b\u5176\u4ed6\u98ce\u9669\u8d44\u672c\u5bb6\u5173\u4e8e\u8be5\u6982\u5ff5\uff0c\u7b2c\u4e8c\u4e2a\u52a8\u6001\u51fa\u73b0\u4e86\u3002\u5373\u201c\u5178\u578b\u7684\u201d\u65e9\u671f\u8d44\u91d1\u5faa\u73af\uff0c\u6b63\u5982Seseri\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0c\u662f\u201c\u6210\u4e3a\u975e\u5178\u578b\u7684\uff0c\u56e0\u4e3a\u5148\u53d1\u5236\u4eba\u7684\u5faa\u73af[\u5176\u4e2d]\u5bf9\u7a97\u5916\u7684\u5178\u578b\u671f\u671b\u8d70\u51fa\u7a97\u5916\u3002\u201d\n  \u4ea4\u6613\u6240\u63a2\u7d22\u521d\u521b\u516c\u53f8\uff0c\u5e02\u573a\u548c\u91d1\u94b1\u3002\u6bcf\u5929\u65e9\u4e0a\u90fd\u5728\u989d\u5916\u7684\u7d27\u7f29\u6216\u6bcf\u5468\u516d\u83b7\u5f97\u4ea4\u6362\u65f6\u4e8b\u901a\u8baf\u3002\n  Series\uff0c\u5979\u8bf4\uff0c\u5728\u79cd\u5b50\u4ea4\u6613\u540e\uff0c\u53ef\u80fd\u4f1a\u5728\u51e0\u4e2a\u6708\u540e\u6765\uff0cB\u578b\u961f\u4f0d\u770b\u5230\u9884\u671f\u7684\u6536\u5165\u9608\u503c\uff0c\u90e8\u5206\u5730\u70b9\u662f\u201c\u5df2\u7ecf\u4e0b\u8dcc\u7684\u5927\u578b\u591a\u8d44\u4ea7\u7403\u5458\uff0c\u5e76\u63d0\u4f9b\u4e0d\u540c\u7684\u4ea7\u54c1\u800c\u4e0d\u662f\u5178\u578b\u7684VCS\u7684\u4e0d\u540c\u4ea7\u54c1 - \u975e\u5e38\u5feb\u901f\u7684\u672f\u8bed\u5e8a\u5355\uff0c\u6ca1\u6709\u79ef\u6781\u53c2\u4e0e\u6295\u8d44\u540e\uff0c\u5927\u91cf\u6295\u8d44\u6570\u989d\u548c\u9ad8\u4f30\u503c\u3002\u201c\n \u4e13\u6ce8\u4e8e\u7cfb\u5217\u52a8\u6001\uff0c\u65e7\u62c7\u6307\u7684\u521d\u6b65\u521d\u6b65\u6301\u7eed\u5230\u6bcf\u5e74\u91cd\u590d\u6536\u5165\uff08ARR\uff09\u7684\u8fbe\u5230100\u4e07\u7f8e\u5143\uff0c\u73b0\u5728\u7ecf\u5e38\u53d1\u751f\u5b9e\u9645\u610f\u4e49\u3002\u6709\u4e9b\u521d\u521b\u516c\u53f8\u5ef6\u8fdf\u4e86\u4ed6\u4eec\u7684\u4e00\u8f6e\uff0c\u76f4\u5230\u4ed6\u4eec\u8fbe\u52302\u4ebf\u7f8e\u5143\u7684ARR\uff0c\u5f52\u529f\u4e8e\u8db3\u591f\u7684\u79cd\u5b50\u8d44\u672c\u3002\n \u867d\u7136\u6709\u4e9b\u521d\u521b\u516c\u53f8\u5ef6\u8fdf\u4e86\u4ed6\u4eec\u7684\u4e00\u8f6e\uff0c\u4f46\u5176\u4ed6\u4eba\u65e9\u4e9b\u65f6\u5019\u63d0\u9ad8\u4e86\u5371\u6025\u6295\u8d44\uff0c\u4e5f\u8bb8\u751a\u81f3\u5728arr\u4e2d\u7684\u51e0\u5341\u4e07\u3002\n \u4e24\u7ec4\u4e4b\u95f4\u6709\u4ec0\u4e48\u4e0d\u540c\uff1f\u5177\u6709\u201c\u7cbe\u82f1\u72b6\u6001\u201d\u7684\u521d\u521b\u516c\u53f8\u80fd\u591f\u5411\u4ed6\u4eec\u7684\u7cfb\u5217\u5c55\u5f00A\uff0c\u800c\u5176\u4ed6\u521b\u59cb\u4eba\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u5c06\u5145\u8db3\u7684\u79cd\u5b50\u8d44\u672c\u6c47\u96c6\u5728\u4e00\u8d77\u200b\u200b\u4ee5\u83b7\u5f97\u8db3\u591f\u7684\u89c4\u6a21\u6765\u5438\u5f15A. \n\u52a8\u6001\u4e0d\u4ec5\u4ec5\u662f\u7f8e\u56fd\u73b0\u8c61\u3002\u53cc\u5c42\u98ce\u9669\u6295\u8d44\u5e02\u573a\u4e5f\u5728\u62c9\u4e01\u7f8e\u6d32\u51fa\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u5168\u7403\u91cd\u8981\u7684\uff0c\u8fc5\u901f\u6269\u5927\u7684\u542f\u52a8\u5730\u533a\u3002 \uff08\u4f8b\u5982\uff0c\u5df4\u897fFintech Startup Nubank\uff0c\u53ea\u662f\u5173\u95ed\u4e867.5\u4ebf\u7f8e\u5143\u3002\uff09\n \u4eca\u5929\u65e9\u4e0a\uff0c\u6211\u4eec\u6f5c\u5165\u62c9\u4e01\u7f8e\u6d32\u98ce\u9669\u6295\u8d44\u5e02\u573a\u53ca\u5176\u65e9\u671f\u52a8\u6001\u3002\u6211\u4eec\u8fd8\u6709\u5173\u4e8e\u6b27\u6d32\u73b0\u573a\u7684\u7968\u636e\uff0c\u56e0\u6b64\u5728\u4e0b\u5468\u671f\u5f85\u8be5\u4e3b\u9898\u66f4\u591a\u3002\u6211\u4eec\u8d70\u5427\uff01\n  \u5de8\u578b\u961f\u4e0d\u518d\u662f\u62c9\u4e01\u7f8e\u6d32\u7684\u4f8b\u5916;\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u8d8b\u52bf\uff0c\u5728\u8fc7\u53bb\u51e0\u4e2a\u6708\u91cc\u5ba3\u5e03\u4e86\u4e00\u7cfb\u5217\u7684\u8d8b\u52bf\u3002\n \u8be5\u516c\u544a\u672c\u8eab\u7ecf\u5e38\u5f3a\u8c03\u5706\u5f62\u89c4\u6a21\uff1a\u4f8b\u5982\uff0c\u8fd1\u671f1\u4ebf\u7f8e\u5143\u7684B\u6b21\u8f6c\u5411\u54e5\u4f26\u6bd4\u4e9a\u7684Proptech\u542f\u52a8Habi\u88ab\u5ba3\u4f20\u4e3a\u201c\u6700\u5927\u7684Birts Bersted\u5728\u54e5\u4f26\u6bd4\u4e9a\u3002\u201d\u8fd9\u9075\u5faa\u5176\u4ed62021\u6761\u8bb0\u5f55\uff0c\u5982\u201c\u58a8\u897f\u54e5\u6700\u5927\u7684\u7cfb\u5217\u201d - \u5728\u7ebf\u6742\u8d27\u5e97j\u00fcsto\u4e3a6500\u4e07\u7f8e\u5143 - \u5e76\u201c\u7531\u62c9\u4e01\u7f8e\u6d32\u91d1\u878d\u91d1\u5c5e\u7b79\u96c6\u7684\u6700\u5927\u7cfb\u5217\u201d -  4300\u4e07\u7f8e\u5143\u7528\u4e8e\u62c9\u4e01\u7f8e\u6d32\u7684\u683c\u5b50\u201cBelvo\u3002 ", "note_en": "The expedition was rooted in commentary from  Rudina Seseri of Glasswing Ventures, who said abundant seed capital in the United States allows founders to get a lot done before they raise a Series A, effectively delaying these rounds. But that after those founders did raise that A, their Series B round could rapidly follow thanks to later-stage money showing up in earlier-stage deals in hopes of snagging ownership in hot companies.\n  After chatting with Seseri more and a number of other venture capitalists about the concept, a second dynamic emerged. Namely that the \u201ctypical\u201d early-stage funding round, as Seseri described it, was \u201cbecoming the atypical because of the rise of preemptive rounds [in which] typical expectations on metrics go out the window.\u201d\n  The Exchange explores startups, markets and money.   Read it  every morning on Extra Crunch or get  The Exchange newsletter every Saturday.\n  Series As, she said, could come mere months after a seed deal, and Series B rounds were seeing expected revenue thresholds tumble in part to \u201clarge, multi-asset players that have come down market and are offering a different product than typical VCs \u2014 very fast term sheets, no active involvement post-investment, large investments amounts and high valuations.\u201d\n Focusing on just the Series A dynamic, the old rule of thumb that a startup would need to reach $1 million in annual recurring revenue (ARR) is now often moot. Some startups are delaying their A rounds until they reach $2 million in ARR thanks to ample seed capital.\n While some startups delay their A rounds, others raise the critical investment earlier and earlier, perhaps with even a few hundred thousand in ARR.\n What\u2019s different between the two groups? Startups with \u201celite status\u201d are able to jump ahead to their Series A, while other founders spend more time cobbling together adequate seed capital to get to sufficient scale to attract an A.\n The dynamic is not merely a United States phenomenon. The two-tier venture capital market is also showing up in Latin America, a globally important and rapidly expanding startup region. (Brazilian fintech startup Nubank, for example,  just closed a $750 million round.)\n This morning, we\u2019re diving into the Latin American venture capital market and its early-stage dynamics. We also have notes on the European scene, so expect more on the topic next week. Let\u2019s go!\n  Mega-rounds are no longer an exception in Latin America; in fact, they have become a trend, with ever-larger rounds being announced over the last few months.\n The announcements themselves often emphasize round size: For instance, the recent $100 million Series B round into Colombian proptech startup Habi was  touted as \u201cthe largest Series B for a startup headquartered in Colombia.\u201d This follows other 2021 records such as \u201cthe largest Series A for Mexico \u201d \u2014  $65 million for online grocer J\u00fcsto \u2014 and \u201cthe largest Series A ever raised by a Latin American fintech\u201d \u2014\u00a0  $43 million for  \u201cPlaid for Latin America\u201d Belvo.", "posttime": "2021-06-26 01:20:27", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u98ce\u9669\u6295\u8d44,\u7f8e\u56fd,venture,\u62c9\u4e01\u7f8e\u6d32", "title": "\u50cf\u7f8e\u56fd\u4e00\u6837\uff0c\u4e00\u4e2a\u53cc\u5c42\u98ce\u9669\u6295\u8d44\u5e02\u573a\u6b63\u5728\u62c9\u4e01\u7f8e\u6d32\u51fa\u73b0 ", "title_en": "\n\t\t\t\tLike the US, a two-tier venture capital market is emerging in Latin America\t\t\t", "transed": 1, "url": "https://techcrunch.com/2021/06/25/like-the-us-a-two-tier-venture-capital-market-is-emerging-in-latin-america/", "via": "", "real_tags": ["\u98ce\u9669\u6295\u8d44", "\u7f8e\u56fd", "venture", "\u62c9\u4e01\u7f8e\u6d32"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068276, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u65b0\u6d88\u606f\u8b66\u544a\u7ed3\u679c\uff0c\u7ed3\u679c\u662f\u201c\u5feb\u901f\u53d8\u5316\u201d\uff0c\u53ef\u80fd\u8fd8\u4e0d\u5305\u62ec\u53ef\u9760\u7684\u6765\u6e90\n    \u8c37\u6b4c\u5728\u641c\u7d22\u53ef\u80fd\u5177\u6709\u8f83\u5dee\u7ed3\u679c\u7684\u4e3b\u9898\u65f6\uff0c\u8c37\u6b4c\u5df2\u542f\u52a8\u8b66\u544a\u7528\u6237\uff0c\u4f5c\u4e3a\u5176\u52aa\u529b\u89e3\u51b3\u641c\u7d22\u5f15\u64ce\u4e0a\u7684\u201c\u6570\u636e\u7a7a\u767d\u201d\u7684\u4e00\u90e8\u5206\u3002\n \u65b0\u7684\u8b66\u544a\u662f\u7531Renee Diresta\u53d1\u73b0\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5728\u65af\u5766\u798f\u5927\u5b66\u8bef\u5bfc\u7684\u5b66\u672f\u754c\u3002 \u201c\u5b83\u770b\u8d77\u6765\u50cf\u8fd9\u4e9b\u7ed3\u679c\u6b63\u5728\u5feb\u901f\u53d8\u5316\uff0c\u201d\u8c37\u6b4c\u73b0\u5728\u5c0f\u5fc3\u7528\u6237\u3002 \u201c\u5982\u679c\u8fd9\u4e2a\u4e3b\u9898\u662f\u65b0\u7684\uff0c\u5b83\u6709\u65f6\u9700\u8981\u82b1\u65f6\u95f4\u4ee5\u901a\u8fc7\u53ef\u9760\u7684\u6765\u6e90\u6dfb\u52a0\u7ed3\u679c\u3002\u201d\n  \u201c\u6211\u7b2c\u4e00\u6b21\u770b\u5230\u8c37\u6b4c\u641c\u7d22\u7684\u8fd9\u79cd\u56de\u590d\uff0c\u201dDiresta\u8bf4\u3002 \u201c\u6c9f\u901a\u67d0\u4e8b\u7684\u79ef\u6781\u6b65\u9aa4\u662f\u65b0\u95fb/\u7a81\u7834\uff08\u6211\u7684\u641c\u7d22\u662f\u4e3a\u4e86\u6253\u7834\u6587\u5316\u6218\u4e89\u6545\u4e8b\uff09\uff0c\u5e76\u7a81\u51fa\u8fd9\u4e2a\u4e8b\u5b9e\u5e76\u975e\u6240\u6709\u5df2\u77e5\u6216\u4e0e\u53d1\u751f\u7684\u4e8b\u60c5\u5171\u8bc6\u3002\u201d\n \u867d\u7136\u793e\u4ea4\u5a92\u4f53\u7ecf\u5e38\u4e0e\u9519\u8bef\u4fe1\u606f\u76f8\u5173\u8054\uff0c\u4f46\u7814\u7a76\u4eba\u5458\u957f\u671f\u4ee5\u6765\u4e00\u76f4\u6ce8\u610f\u5230\u641c\u7d22\u5f15\u64ce\u53ef\u4ee5\u6210\u4e3a\u4f20\u64ad\u865a\u5047\u7684\u5f3a\u5927\u5de5\u5177\u3002\u6570\u636e\u7a7a\u767d\uff0c\u641c\u7d22\u5f15\u64ce\u67e5\u8be2\u51e0\u4e4e\u6ca1\u6709\u7ed3\u679c\uff0c\u901a\u5e38\u53ef\u80fd\u5bfc\u81f4\u504f\u51fa\u8fc7\u5ea6\u7684\u7a81\u51fa - \u6253\u7834\u65b0\u95fb\u7684\u7279\u522b\u5173\u6ce8\u3002\n \u5728\u4e00\u4e2aBlogpost\uff0cDanny Sullivan\uff0c\u8c37\u6b4c\u641c\u7d22\u7684\u516c\u5171\u8054\u7edc\u4eba\u8bf4\uff1a\u201c\u6211\u4eec\u5df2\u7ecf\u8bad\u7ec3\u8fc7\u6211\u4eec\u7684\u7cfb\u7edf\u6765\u68c0\u6d4b\u4e00\u4e2a\u4e3b\u9898\u5feb\u901f\u53d1\u5c55\u7684\u8bdd\uff0c\u5c1a\u672a\u79f0\u91cd\u3002\u6211\u4eec\u73b0\u5728\u5c06\u663e\u793a\u901a\u77e5\u8868\u793a\u53ef\u4ee5\u6700\u597d\u5730\u56de\u987e\u4e00\u4e0b\u4ece\u66f4\u5e7f\u6cdb\u7684\u6765\u6e90\u8303\u56f4\u7684\u4fe1\u606f\u3002\u201c\n \u8b66\u544a\u5f80\u5f80\u4f1a\u51fa\u73b0\u6709\u5f88\u591a\u6700\u8fd1\u70b9\u51fb\u7684\u641c\u7d22\uff0c\u4f46\u5f88\u5c11\u6709\u4fe1\u8a89\u826f\u597d\u7684\u7f51\u7ad9\u3002\u4f8b\u5982\uff0c\u6700\u8fd1\u5173\u4e8e\u5728\u5a01\u5c14\u58eb\u7684\u4e0d\u660e\u98de\u884c\u7269\u7784\u51c6\u7684\u62a5\u544a\u8fc5\u901f\u5728\u9634\u8c0b\u7406\u8bba\u5bb6\u4e2d\u8fc5\u901f\u4f20\u64ad\uff0c\u4f46\u6ca1\u6709\u5c11\u7684\u4e3b\u6d41\u5173\u6ce8\u3002\u8fd9\u610f\u5473\u7740\u641c\u7d22\u201cUFO 106\u82f1\u91cc/\u5c0f\u65f6\u201d\u672f\u8bed\u77ed\u6682\u63d0\u51fa\u8b66\u544a\uff0cSullivan\u544a\u8bc9Tech\u7f51\u7ad9\u91cd\u65b0\u6c47\u7f16\u3002 \n\u201c\u6709\u4eba\u5728\u5a01\u5c14\u58eb\u91ca\u653e\u51fa\u6765\u7684\u8b66\u5bdf\u62a5\u544a\u89c6\u9891\uff0c\u5b83\u6709\u4e00\u70b9\u70b9\u65b0\u95fb\u62a5\u9053\u3002 \u4f46\u5b83\u4ecd\u7136\u6ca1\u6709\u5f88\u591a\u5173\u4e8e\u5b83\u7684\u4e8b\u60c5\uff0c\u201c\u6c99\u5229\u6587\u8bf4\u3002 \u201c\u4f46\u662f\u4eba\u4eec\u53ef\u80fd\u6b63\u5728\u5bfb\u627e\u5b83\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u8fdb\u884c\u89e3\u51b3 - \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u544a\u8bc9\u5b83\u5f00\u59cb\u8d8b\u52bf\u3002 \u6211\u4eec\u4e5f\u53ef\u4ee5\u544a\u8bc9\u90a3\u91cc\u7684\u4e1c\u897f\u5e76\u6ca1\u6709\u5f88\u591a\u5fc5\u7136\u7684\u4e1c\u897f\u3002 \u6211\u4eec\u4e5f\u8ba4\u4e3a\u53ef\u80fd\u662f\u65b0\u7684\u4e1c\u897f\u4f1a\u51fa\u73b0\u3002\u201c ", "note_en": "New message warns that results are \u2018changing quickly\u2019 and may not yet include reliable sources\n    Google has started warning users when they search for a topic that is likely to have poor results, as part of its effort to tackle \u201cdata voids\u201d on the search engine.\n The new warning was spotted by  Renee DiResta, an academic who studies misinformation at Stanford University. \u201cIt looks like these results are changing quickly,\u201d Google will now caution users. \u201cIf this topic is new, it can sometimes take time for results to be added by reliable sources.\u201d\n  \u201cFirst time I\u2019ve seen this response from Google Search,\u201d DiResta said. \u201cPositive step to communicating that something is newsy/breaking (my search was for a breaking culture war story), and highlighting that facts are not all known or consensus on what happened is still being formed.\u201d\n While social media is regularly linked with misinformation, researchers have long cautioned that search engines can be powerful tools for spreading falsehoods.  Data voids, search engine queries that have little to no results, can often lead to fringe claims being given undue prominence \u2013 a particular concern for breaking news.\n In a blogpost, Danny Sullivan, public liaison for search at Google, said: \u201cWe\u2019ve trained our systems to detect when a topic is rapidly evolving and a range of sources hasn\u2019t yet weighed in. We\u2019ll now show a notice indicating that it may be best to check back later when more information from a wider range of sources might be available.\u201d\n The warning tends to appear for searches with a lot of recent hits, but few from reputable sites. For instance, a recent report of a UFO sighting in Wales had spread rapidly among conspiracy theorists, but had little mainstream attention. That meant that a search for the terms \u201cufo 106 mph\u201d briefly brought up the warning, Sullivan  told the tech site Recode.\n \u201cSomeone had gotten this police report video released out in Wales, and it\u2019s had a little bit of press coverage. But there\u2019s still not a lot about it,\u201d Sullivan said. \u201cBut people are probably searching for it, they may be going around on social media \u2013 so we can tell it\u2019s starting to trend. And we can also tell that there\u2019s not a lot of necessarily great stuff that\u2019s out there. And we also think that maybe new stuff will come along.\u201d", "posttime": "2021-06-26 01:14:25", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "google,\u8c37\u6b4c,\u8b66\u544a,starts,\u53ef\u80fd", "title": "\u5982\u679c\u641c\u7d22\u7ed3\u679c\u53ef\u80fd\u5f88\u5dee\uff0c\u8c37\u6b4c\u5f00\u59cb\u8b66\u544a\u7528\u6237 ", "title_en": "Google Starts Warning Users If Search Results Are Likely To Be Poor", "transed": 1, "url": "https://www.theguardian.com/technology/2021/jun/25/google-starts-warning-users-if-search-results-are-likely-to-be-poor", "via": "", "real_tags": ["google", "\u8c37\u6b4c", "\u8b66\u544a", "starts", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068275, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u53ea\u60f3\u5728\u51e0\u4e2a\u6708\u5185\u4f7f\u7528\u5b83\u540e\u5206\u4eab\u6211\u5bf9Kafka\u7684\u60f3\u6cd5\uff0c\u59cb\u7ec8\u4ece\u5b9e\u9645\u7684\u89d2\u5ea6\u6765\u770b\u3002\u6211\u5bf9Kafka Internals\u7684\u57fa\u7840\u77e5\u8bc6\u4e0d\u4e86\u89e3\u3002\u6211\u77e5\u9053\u65e5\u5fd7\u5904\u7406\u7684\u539f\u5219\u7b49\uff0c\u4f46\u4ece\u6765\u6ca1\u6709\u8ba9\u6211\u7684\u624b\u810f\u4e86\u3002\u6240\u4ee5\u8fd9\u53ea\u662f\u65b0\u4eba\u7684\u610f\u89c1\uff0c\u800c\u4e0d\u662f\u4e13\u5bb6\u3002\n  \u4e00\u5207\u90fd\u5f00\u59cb\uff0c\u56e0\u4e3a\u6211\u4eec\u5f00\u59cb\u770b\u5230\u6d3b\u52a8\u6536\u96c6\u7528\u4f8b\uff1a\u4e00\u4e2a\u7f51\u7ad9\uff0c\u5177\u6709\u76f8\u5f53\u5927\u7684\u6d41\u91cf\uff0c\u60f3\u8981\u6536\u96c6\u6d3b\u52a8\uff0c\u4ee5\u5b9e\u65f6\u6d4b\u91cf\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u50cfGoogle Analytics\u7684\u5b9a\u5236\u7248\u672c\uff0c\u4f46\u6ca1\u6709\u91c7\u6837\u3002\u6211\u4eec\u5728\u8fc7\u53bb\u51e0\u4e2a\u6708\u91cc\u5de5\u4f5c\u4e86\u4e0eKafka\u4e00\u4f53\u5316\uff0c\u4ee5\u6db5\u76d6\u8fd9\u4e9b\u7528\u4f8b\u3002\n  \u6211\u5fc5\u987b\u627f\u8ba4\u6211\u504f\u5411\u4e86Kafka\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u4e00\u4e2a\u5927\u578b\uff0c\u590d\u6742\u7684\u6280\u672f\uff0c\u53ea\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u590d\u6742\u6027\u3002\n  \u6211\u4ecd\u7136\u8ba4\u4e3a\u662f\u4e00\u6837\u7684\uff0c\u5b83\u5f88\u590d\u6742\uff0c\u5c06Kafka\u6dfb\u52a0\u5230\u60a8\u7684\u5806\u6808\u5c06\u6dfb\u52a0\u4e00\u5806\u670d\u52a1\u548c\u4e00\u4e9b\u989d\u5916\u7684\u51b3\u7b56\uff0c\u4ee5\u4fbf\u8fdb\u884c\u914d\u7f6e\u7b49\u3002\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5c06\u6570\u636e\u53d1\u9001\u5230\u6587\u4ef6\u7684\u5355\u4e2a\u8fdb\u7a0b\u5e94\u7528\u7a0b\u5e8f\u548c\u670d\u52a1\u5668\u7684\u5c0f\u578bHTTP\u670d\u52a1\u5668\uff0c\u5728\u66f4\u5c11\u7684\u505c\u673a\u65f6\u95f4\u5185\u5c06\u6267\u884c\u66f4\u597d\u3002\u5982\u679c\u60a8\u6bd4\u8f83\u4e86\u89e3\uff0c\u8bbe\u7f6e\uff0c\u914d\u7f6e\u548c\u5f00\u59cb\u4f7f\u7528\u7684\u8d1f\u62c5\uff0c\u4f8b\u5982Redis\uff0c\u8fd9\u662f\u4e00\u4e2a\u5927\u91cf\u7684\u5de5\u4f5c\u3002\n  \u5f53\u7136\uff0c\u5f53\u4e8b\u60c5\u53d8\u5f97\u56f0\u96be\u65f6\uff0c\u5f53Kafka\u95ea\u8000\u4ee5\u53ca\u6240\u6709\u590d\u6742\u6027\u7684\u65f6\u5019\uff0c\u8fd9\u4e9b\u590d\u6742\u6027\u4f7f\u60a8\u53ef\u4ee5\u7075\u6d3b\u5730\u89e3\u51b3\u5927\u91cf\u8d1f\u8f7d\u548c\u590d\u6742\u7684\u751f\u4ea7\u8005\uff0c\u6d88\u8d39\u8005\uff0c\u5904\u7406\u5668\u7528\u4f8b\u3002\u4f46\u5373\u4f7f\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e5f\u9700\u8981\u4e0d\u4ec5\u4ec5\u662fKafka 101\u3002\n  \u4e3a\u4e86\u8bda\u5b9e\uff0c\u8fd9\u662f\u771f\u7684\uff0c\u65e0\u8bba\u4f60\u4f7f\u7528\u4ec0\u4e48\u6280\u672f\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u8d1f\u8f7d\u5e73\u8861\u5668\u90fd\u53ef\u4ee5\u6210\u4e3a\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u4fdd\u6301\u7684\u5669\u68a6\u3002\u9ad8\u8d1f\u8377\u8f6f\u4ef6\u9879\u76ee\u603b\u662f\u4ee5\u67d0\u79cd\u65b9\u5f0f\u53d8\u5f97\u590d\u6742\uff0c\u4e0eF1\u6c7d\u8f66\u9700\u8981\u9ad8\u5ea6\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u4e00\u5806\u5de5\u7a0b\u5e08\u548c\u529b\u5b66\uff0c\u5e76\u6301\u7eed\u7ef4\u62a4\u5feb\u901f\uff0c\u8f6f\u4ef6\u9879\u76ee\u4e5f\u662f\u5982\u6b64\u3002\n  \u8fd9\u91cc\u7684\u5173\u952e\u662f\u4f60\u591a\u4e45\u8fbe\u5230\u590d\u6742\u7a0b\u5ea6;\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u5de5\u5177\u5e94\u5728\u60a8\u7684\u9879\u76ee\u4e2d\u53d8\u5f97\u590d\u6742\u3002 \n\u65e0\u8bba\u5982\u4f55\uff0c\u5173\u4e8eKafka\u6700\u6709\u8da3\u7684\u4e8b\u60c5\u662f\u5b83\u4f7f\u5f97\u5b83\u53ef\u4ee5\u5728\u89c4\u6a21\u4e0a\u5b9e\u73b0\u4e00\u4e9b\u975e\u5e38\u6709\u7528\u7684\u4e1c\u897f\uff1a\u4e00\u4e2a\u660e\u786e\u7684\u65b9\u5f0f\u6765\u534f\u8c03\u548c\u6d4b\u91cf\u548c\u7f29\u653e\u6570\u636e\u6d88\u8017\u3002\u6211\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48HTTP\u8d1f\u8f7d\u5e73\u8861\u5668\u6ca1\u6709\u5f97\u5230Kafka\u7684\u6d88\u8d39\u8005\u65b9\u6cd5\u3002\u548c\u540c\u6837\u7684\u6307\u6807\u3002\u548c\u4e00\u4e2a\u975eHTTP\u534f\u8bae\u548c\u534f\u8c03\u5de5\u4f5c\u4eba\u5458\u7684\u65b9\u5f0f:)\n  \u5750\u6807\uff1aKafka\u4e0d\u4ec5\u4f9d\u9760\u670d\u52a1\u5668\u505a\u4e8b\uff0c\u5ba2\u6237\u77e5\u9053\u201c\u6211\u5e94\u8be5\u6d88\u8017\u7684\u5206\u533a\u662f\u4ec0\u4e48\u5206\u533a\u201d\u3002\u6216\u8005\u5728\u7ecf\u7eaa\u4e4b\u95f4\u7684\u8d1f\u8f7d\u5e73\u8861\u3002\n  \u7f29\u653e\uff1a\u5f53\u60a8\u901a\u8fc7\u67e5\u770b\u672a\u5904\u7406\u7684\u6d88\u606f\u7684\u6570\u91cf\u65f6\uff0c\u60a8\u53ef\u4ee5\u6e05\u695a\u5730\u8017\u5c3d\u66f4\u591a\u7684\u8ba1\u7b97\u80fd\u529b\u3002\u8fd9\u542c\u8d77\u6765\u5f88\u660e\u663e\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\uff0c\u81f3\u5c11\u5bf9\u6211\u6765\u8bf4\u3002\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u53e4\u8001\u7684\u6392\u961f\u95ee\u9898\uff0c\u53ef\u4ee5\u7406\u89e3\u548c\u8861\u91cf\uff08\u4ece\u7535\u4fe1\u7cfb\u7edf\u7684\u65e9\u671f\u5f81\u6536\u6709\u5f88\u591a\u5173\u4e8e\u6392\u961f\u7684\u7406\u8bba\uff09\uff0c\u4f46\u901a\u5e38\u9690\u85cf\u5728\u5927\u591a\u6570\u8f6f\u4ef6\u4e2d\u3002\n  Kafka\u4e0d\u662f\u552f\u4e00\u505a\u8fd9\u4e9b\u4e8b\u60c5\u7684\u5de5\u5177\uff0c\u6211\u731c\u6240\u6709\u7559\u8a00\u7ecf\u7eaa\u4eba\u90fd\u8fd9\u6837\u505a\uff0c\u4f46\u6211\u4ece\u672a\u4f7f\u7528\u8fc7\u4ed6\u4eec\u3002\n  \u65e0\u8bba\u5982\u4f55\uff0c\u6211\u4e0d\u77e5\u9053\u7684\u4e00\u4e9b\u5b9e\u7528\u4fe1\u606f\uff0c\u4f46\u5e0c\u671b\u6211\u77e5\u9053\uff1a\n  \u60a8\u9700\u8981\u4e86\u89e3\u66f4\u591a\u7684\u4e8b\u60c5\uff0c\u800c\u4e0d\u662f\u9884\u671f\u7684\u80fd\u591f\u4f7f\u7528\u5b83\uff1a\u5206\u533a\uff0c\u6d88\u606f\uff0c\u5206\u914d\uff0c\u7ecf\u7eaa\u4eba\uff0c\u6d88\u8d39\u8005\uff0c\u4e0d\u540c\u7c7b\u578b\u7684\u8d85\u65f6......\u90a3\u5c31\u662f\u8868\u9762\u3002\n  \u81ea\u884c\u5efa\u7acb\u7fa4\u96c6\u662f\u5c41\u80a1\u7684\u75db\u82e6\u3002\u4f7f\u7528\u6c47\u5408\u4e91\u662f\u6602\u8d35\u7684\uff0c\u4f46\u5b83\u53ea\u662f\u6709\u6548\uff0c\u8fd9\u5c31\u662f\u4eba\u4eec\u4f7f\u7528\u5b83\u7684\u539f\u56e0\u3002 \n\u5373\u4f7f\u5bf9\u4e8e\u672c\u5730\u5b89\u88c5\uff0cKafka\u4e5f\u662f\u4e00\u4e2a\u76ae\u5854\u997c\u3002\u6211\u5efa\u8bae\u4f7f\u7528RedPanda\uff0c\u4e00\u4e2a\u547d\u4ee4\uff0c\u4f60\u6709\u4e00\u4e2a\u517c\u5bb9Kafka\u517c\u5bb9API\u548c\u8fd0\u884c\u3002\u6ca1\u6709\u52a8\u7269\u56ed\uff0c\u6ca1\u6709docker-compose\uff0c\u6ca1\u6709kubernetes\u3002\n  Kafka\u6ca1\u6709\u4e00\u4e2a\u5f88\u597d\u7684HTTP\u754c\u9762\uff08\u6709\u5145\u5206\u7684\u539f\u56e0\uff09\u3002 HTTP\u4ee3\u7406\u662f\u9ed8\u8ba4\u9009\u62e9\uff0c\u4f46\u4e91\u4e91\u4e0d\u63d0\u4f9b\uff08RedPanda Do\uff09\u3002\u6211\u8ba4\u4e3a\u4f7f\u7528\u81ea\u5b9a\u4e49\u534f\u8bae\u662f\u6b63\u786e\u7684\u9009\u62e9\uff0c\u4f46\u662f\u5728\u57fa\u4e8eHTTP\u7684\u7cfb\u7edf\u548cKafka\u4e4b\u95f4\u5b58\u5728\u963b\u6297\u4e0d\u5339\u914d\uff08\u867d\u7136\u4e0d\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff09\u3002\n    \u7ba1\u7406\u6d88\u8d39\u8005\u7684\u9519\u8bef\u5f88\u96be\u3002\u597d\u7684\u90e8\u5206\u662f\u6570\u636e\u5728kafka\u4e2d\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u91cd\u64ad\u5b83\uff0c\u4f46\u662f\u5982\u679c\u95ee\u9898\u662f\u4f60\u5904\u4e8e\u66f4\u5927\u7684\u9ebb\u70e6\u7684\u903b\u8f91\u95ee\u9898\uff08\u4e0d\u662f\u989e\u5c0f\u6545\u969c\uff09\u3002\u672c\u6587\u89e3\u91ca\u8bf4\u5f88\u597d\u3002\n  \u6240\u4ee5\uff0c\u5982\u679c\u4f60\u95ee\u6211\uff0c\u4f60\u9700\u8981\u77e5\u9053\u5728\u5c06Kafka\u6dfb\u52a0\u5230\u5806\u6808\u4e4b\u524d\u8981\u505a\u4ec0\u4e48\uff0c\u4f46\u5b83\u786e\u5b9e\u4f1a\u5728\u60a8\u7684\u5e73\u53f0\u4f7f\u7528\u5f00\u59cb\u589e\u957f\u65f6\u5e26\u6765\u975e\u5e38\u597d\u7684\u67b6\u6784\u6a21\u5f0f\u3002\n  \u6211\u4eec\u73b0\u5728\u5e78\u798f\u5730\u6444\u53d6\u4e86\u6570\u767e\u4e07\u7684\u6bcf\u5206\u949f\u6d3b\u52a8\uff0c\u51e0\u4e2a\u6708\uff0c\u6ca1\u6709\u4efb\u4f55\u91cd\u5927\u95ee\u9898\u3002\u5b9e\u9645\u4e0a\uff0cKafka\u4ece\u4e00\u4e9b\u590d\u6742\u7684\u60c5\u51b5\u4e0b\u6551\u4e86\u6211\u4eec\u3002\u53ef\u80fd\u662f\u4e00\u4e2a\u5feb\u901f\u7684HTTP\u670d\u52a1\u5668\u5199\u5165\u6587\u4ef6\u7684\u6279\u5904\u7406\u4e5f\u5c06\u6709\u6548\uff0c\u4f46\u6211\u8ba4\u4e3a\u5f53\u4f60\u60f3\u5728\u6ca1\u6709\u592a\u591a\u75db\u82e6\u7684\u60c5\u51b5\u4e0b\u7f29\u653e\u7f62\u5de5\u65f6\uff0cKafka\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002 ", "note_en": "I just want to share my thoughts on Kafka after using it for a few months, always from a practical point of view. I don\u2019t know anything more than the basics about Kafka internals. I knew the principles of log processing and so on but had never got my hands dirty. So this is just the opinion of a newcomer, not an expert.\n  Everything began because we started seeing event-gathering use cases: a website, with a reasonably high amount of traffic that wants to gather events, to measure in real-time what\u2019s going on. Like a customized version of Google analytics but without sampling. We\u2019ve spent the last few months working on an integration with Kafka to cover these use cases.\n  I have to admit that I was biased against Kafka, I thought it was a large, complex piece of technology that added nothing but an extra layer of complexity.\n  I still think the same, it is complex, adding Kafka to your stack will add a bunch of services and some extra decisions to make about configuration and so on. In most cases, a single process app sending data to a file and a small HTTP server serving it will perform much better with less downtime. If you compare the burden of understanding, setting-up, configuring and starting to use compared to, for example, Redis, it\u2019s a massive amount of work.\n  Of course, when things get difficult is when Kafka shines and all that complexity gives you the flexibility to tackle massive amounts of load and complex producer, consumer, processor use cases. But even in this situation, you\u2019ll need to know much more than just Kafka 101.\n  To be honest, this is true no matter what tech you use, a simple load balancer can become a nightmare to maintain under certain circumstances. High-load software projects always get complex somehow, in the same way that an F1 car needs a highly complex system, a good bunch of engineers and mechanics, and constant maintenance to go fast, so does a software project.\n  The key here is how soon you hit the complexity; ideally, a tool should become complex as your project does.\n  Anyway, the most interesting thing about Kafka is that it enables something pretty useful for projects at scale: a clear way to coordinate and measure and scale data consumption. I\u2019m wondering why HTTP load balancers didn\u2019t get the consumer approach of Kafka. And the same kind of metrics. And a non-HTTP protocol and a way to coordinate workers :)\n  Coordinate: Kafka doesn\u2019t only rely on the server to do things, clients know things like \u201cWhat partition I should consume.\u201d or load-balancing between brokers.\n  Scale: when consuming it is clear when you need more computing power just by looking at the number of unprocessed messages. This sounds obvious to do but it\u2019s not, at least to me. This is a pretty old queueing problem that is useful to understand and measure (there is a lot of theory written about queueing from the early days in telecommunication systems) but it\u2019s usually hidden in most pieces of software.\n  Kafka is not the only tool that does these things, I guess all message brokers do this but I never used them.\n  Anyway, some practical information that I didn\u2019t know but wish I had known:\n  You need to know more things than I expected to be able to use it: partitions, messages, assignments, brokers, consumers, different kinds of timeouts\u2026 and that\u2019s just the surface.\n  Setting up a cluster by yourself is a pain in the ass. Using Confluent cloud is expensive but it just works, that\u2019s why people use it.\n  Even for a local install, Kafka is a PITA. I recommend using  Redpanda, a single command and you have a Kafka compatible API up and running. No Zookeeper, no docker-compose up, no Kubernetes.\n  Kafka does not have a good HTTP interface (for a good reason). HTTP Proxy is the default choice but Confluent cloud does not provide it (Redpanda does). I think using a custom protocol is the right choice but there is an impedance mismatch between HTTP based systems and Kafka (although not in all cases).\n    Managing errors in consumers is hard. The good part is that the data is in Kafka so you can replay it but the bad part is that if the problem is a logic problem (not a temporal glitch) you are in bigger trouble.  This article explains it pretty well.\n  So, if you ask me, you need to know what you are doing before you add Kafka to your stack but it does bring really good architectural patterns when your platform usage starts to grow.\n  We have been happily ingesting millions of events per minute for some months now, without any major problems. Actually, Kafka saved us from some complicated situations. Probably a fast HTTP server writing batches to a file would also have worked but I think that when you want to scale things up without much pain Kafka is a good solution.", "posttime": "2021-06-26 01:13:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "kafka,starting", "title": "\u4eceKafka\u5f00\u59cb ", "title_en": "Starting with Kafka", "transed": 1, "url": "https://blog.tinybird.co/2021/06/25/starting-with-kafka/", "via": "", "real_tags": ["kafka", "starting"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1068274, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u4eec\u4f7f\u7528cookie\u786e\u4fdd\u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u6700\u4f73\u4f53\u9a8c\u3002  \u4f3c\u4e4e\u60a8\u7684\u6d4f\u89c8\u5668\u5e76\u4e0d\u652f\u6301\u5b83\u4eec\uff0c\u8fd9\u4f1a\u5f71\u54cd\u7f51\u7ad9\u529f\u80fd\u3002 ", "note_en": "We use cookies to ensure that we give you the best experience on our website.\n  It seems your browser doesn&#39;t support them and this affects the site functionality.", "posttime": "2021-06-26 01:13:25", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5b58\u50a8,storage,\u786e\u4fdd", "title": "\u6211\u7684256 GB\u53bb\u4e86\u54ea\u91cc\uff1f \u79fb\u52a8\u5b58\u50a8\u5206\u6790 ", "title_en": "Where did my 256 GB go? Mobile storage Analysis", "transed": 1, "url": "https://dl.acm.org/doi/pdf/10.1145/3460095", "via": "", "real_tags": ["\u5b58\u50a8", "storage", "\u786e\u4fdd"]}, {"category": "", "categoryclass": "", "imagename": "591f4cc4871bdebe0f949a6a045a9605.jpg", "infoid": 1068273, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "TL; DR\u901a\u8fc7\u4f7f\u7528\u5229\u7528HTML\u89e3\u6790\u903b\u8f91\u7684\u7279\u6b8aHTML\u6807\u7b7e\uff0c\u5373\u4f7f\u5728\u8bcd\u6c47\u89e3\u6790\u5668\u7528\u4e8e\u65e0\u6548\u5371\u9669\u5185\u5bb9\u7684\u60c5\u51b5\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u8de8\u7ad9\u70b9\u811a\u672c\uff08XSS\uff09\u3002\u5229\u7528\u8fd9\u4e9b\u7c7b\u578b\u7684XSS\u6f0f\u6d1e\u7684\u4e3b\u8981\u76ee\u6807\u662f\u8ba9Sunitize Lexical\u89e3\u6790\u5668\u5c06\u6570\u636e\u89c6\u4e3a\u6587\u672c\u6570\u636e\u800c\u4e0d\u662f\u8ba1\u7b97\u673a\u6307\u4ee4\uff08\u4f8b\u5982\uff0cJavaScript\u6307\u4ee4\uff09\u3002\u5f53HTML\u89e3\u6790\u5668\u548c\u6d88\u6bd2\u8bcd\u6cd5\u89e3\u6790\u4e0d\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u89e3\u6790\u6570\u636e\u65f6\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u653b\u51fb\u662f\u53ef\u80fd\u7684\u3002\n   \u6ce8\u610f\uff1a\u6b64\u535a\u5ba2\u6587\u7ae0\u5047\u5b9a\u4ee5\u524d\u7684XSS\u77e5\u8bc6\uff08\u66f4\u597d\u5730\u63cf\u8ff0\u4e3aJavaScript\u6ce8\u5165\uff09\u4ee5\u53ca\u5bf9HTML\u7684\u57fa\u672c\u4e86\u89e3\u3002\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u7ea7\u5e95\u6f06\uff0c\u8bf7\u5c06\u8fd4\u56de\u5230\u6211\u4eec\u7684XSS\u6982\u8ff0\u5199\u4f5c\u3002\n  XSS\u4fdd\u62a4\u6709\u591a\u79cd\u5f62\u5f0f\u3002\u5728\u9884\u9632XS\u7684\u65e9\u671f\u548c\u5076\u5c14\u4eca\u5929\uff0c\u6b63\u5219\u8868\u8fbe\u5f0f\uff08REGEX\uff09\u7528\u4e8e\u68c0\u67e5\uff06\uff0334\u7684\u7528\u6237\u8f93\u5165;\u5371\u9669\uff06\uff0334;\u5b57\u7b26\u4e32\u3002\u4e00\u4e2a\u7b80\u5316\u7684\u4f8b\u5b50\u662f\uff0c\u5982\u679c\u7528\u6237\u63d0\u4f9b\u4e86\u5305\u542b\uff06lt; script\uff06gt\u7684\u8f93\u5165\u3002 \uff0cRegex\u4f1a\u5339\u914d\u7ec6\u5219\u5b57\u7b26\u4e32\u5e76\u5c06\u5176\u5220\u9664\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u57fa\u4e8eREGEX\u7684XSS\u4fdd\u62a4\u901a\u5e38\u4f1a\u9519\u8fc7\u6807\u8bb0\uff0c\u56e0\u4e3a\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u5236\u5b9aJavaScript\u4e32\u4ee5\u7ed5\u8fc7\u4fdd\u62a4\u3002\u5728\u76f8\u540c\u7684\u7b80\u5316\u793a\u4f8b\u4e2d\uff0c\u7b80\u5355\u7b80\u5355\u5730\u5c06\uff06lt; script\uff06gt\u4e2d\u7684\u5b57\u6bcd\u5927\u5199\u5b57\u6bcd\u3002\u4f1a\u7ed5\u8fc7\u8fc7\u6ee4\u5668\u5e76\u5bfc\u81f4XSS\u3002\u56e0\u6b64\uff0c\u4e0d\u5efa\u8bae\u5c1d\u8bd5\u6b63\u5219\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u5668\u4ee5\u9632\u6b62XSS\u3002\n \u6240\u4ee5\uff0c\u8ba9\uff06\uff0339;\u8c08\u8bba\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002\u4e0a\u4e0b\u6587\u8f93\u51fa\u7f16\u7801\u662fXSS\u4fdd\u62a4\u7684\u4e00\u79cd\u5f62\u5f0f\uff0c\u53ef\u4ee5\u5c06\u7279\u6b8a\u5b57\u7b26\uff08\u5982\uff06\uff0334\uff09\u8f6c\u6362\u4e3a\uff06\uff0334; \uff06lt; 34;\u548c\uff0334; \uff06gt;\uff06\uff0334;\u8fdb\u5165\u65e0\u5bb3\u7684HTML\u7f16\u7801\u8f93\u51fa\uff08\u4f8b\u5982\uff0c\uff06\uff0334;\uff06amp;\uff06\uff0334;\u548c\uff0334;\uff06amp; gt;\uff06\uff0334;\uff09\u3002\u8fd9\u79cd\u5f62\u5f0f\u7684\u4fdd\u62a4\u5c06\u7528\u6237\uff06\uff0339;\u6e90\u4e2d\u7684\u8f93\u5165\u653e\u7f6e\u5728\u6e90\u4e2d\u7684\u8f93\u5165\uff0c\u4ee5\u786e\u4fdd\u53ef\u80fd\u5bfc\u81f4JavaScript\u6267\u884c\u6216HTML\u5448\u73b0\u7684\u4efb\u4f55JavaScript\u6216HTML\u53ef\u7528\u5b57\u7b26\u8f6c\u79fb\u5230\u975e\u5371\u9669\u7684HTML\u5b9e\u4f53\u7f16\u7801\u8868\u5355\u4e2d\u3002\u8fd9\u662f\u5904\u7406\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5448\u73b0\u7684\u7528\u6237\u8f93\u5165\u7684\u597d\u65b9\u6cd5;\u5b9e\u9645\u4e0a\uff0c\u8bb8\u591a\u5f53\u4ee3\u524d\u7aef\u6846\u67b6\u73b0\u5728\u5c06\u9ed8\u8ba4\u6267\u884c\u8f93\u51fa\u7f16\u7801\uff08\u4f8b\u5982\uff0c\u53cd\u5e94js\u548c\u89d2\u5ea6\uff09\u3002\u4f46\u662f\uff0c\u8fd9\u79cd\u4fdd\u62a4\u5f62\u5f0f\u53ef\u4ee5\u9650\u5236\u5e94\u7528\u7a0b\u5e8f\u5141\u8bb8\u7528\u6237\u5305\u542b\u67d0\u4e9b\u7c7b\u578b\u7684HTML\u7684\u4e30\u5bcc\u6587\u672c\u7684\u80fd\u529b\u3002\n \u5982\u679c\u7528\u6237\u9700\u8981\u80fd\u591f\u5728\u56fe\u50cf\uff0c\u94fe\u63a5\u548c\u4e30\u5bcc\u7684\u6587\u672c\u7b49HTML\u4e2d\u5305\u542b\u4e00\u4e9bHTML\uff0c\u90a3\u4e48\u600e\u4e48\u6837\uff1f\u8fd9\u662f\u8bcd\u6c47\u89e3\u6790\u53d1\u6325\u4f5c\u7528\u7684\u5730\u65b9\u3002\n  \u8bcd\u6c47\u89e3\u6790\u662f\u4e00\u79cd\u975e\u5e38\u590d\u6742\u7684\u9632\u6b62XS\u7684\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u5728\u6267\u884c\u8bf8\u5982\u963b\u585e\u6216\u7f16\u7801\u6570\u636e\u7684\u9644\u52a0\u903b\u8f91\u4e4b\u524d\uff0c\u8bc4\u4f30\u6570\u636e\u662f\u5426\u662f\u6307\u4ee4\u6216\u660e\u6587\u3002\u5728\u9ad8\u7ea7\uff0c\u53ef\u4ee5\u5c06\u8bcd\u6c47\u89e3\u6790\u63cf\u8ff0\u4e3a\u89e3\u6790\uff0c\u5176\u5c06\u4ece\u8ba1\u7b97\u673a\u6307\u4ee4\uff08\u5373\uff0cJavaScript\u548c\u67d0\u4e9b\u5371\u9669\u7684HTML\u6807\u8bb0\uff09\u5206\u79bb\u7528\u6237\u6570\u636e\uff08\u5373\u975e\u5371\u9669\u6587\u672c\u5185\u5bb9\uff09\u3002\u5728\u7528\u6237\u5141\u8bb8\u7528\u6237\u901a\u8fc7\u8bbe\u8ba1\u5141\u8bb8HTML\u5b50\u96c6\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u7c7b\u578b\u7684\u89e3\u6790\u53ef\u7528\u4e8e\u786e\u5b9a\u5141\u8bb8\u5185\u5bb9\u4ee5\u53ca\u5c06\u88ab\u963b\u6b62\u6216\u6d88\u6bd2\u7684\u5185\u5bb9\u3002\n \u5141\u8bb8\u8bbe\u8ba1\u7684HTML\u5b50\u96c6\u7684\u4e00\u4e9b\u793a\u4f8b\u662fRich-Text\u7f16\u8f91\u5668\uff0c\u7535\u5b50\u90ae\u4ef6\u5ba2\u6237\u7aef\uff0c\u60a8\u8ba4\u4e3a\u7684\u5185\u5bb9\uff08WysiWyg\uff09\u4e0eTinymce\u6216Froala\u7b49HTML\u7f16\u8f91\u5668\uff0c\u4ee5\u53caDompurify\u7b49\u6d88\u6bd2\u5e93\u3002\u5728\u8fd9\u4e9b\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u79cd\u5f62\u5f0f\u7684\u8bcd\u6c47\u89e3\u6790\u4fdd\u62a4\u662f\u5e38\u89c1\u7684\u3002 \n\u4f46\u662f\uff0c\u5f53HTML\u89e3\u6790\u5668\u548c\u6d88\u6bd2\u8bcd\u6c47\u89e3\u6790\u5668\u4e0d\u4ee5\u5b8c\u5168\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5229\u7528\u4f5c\u4e3aXSS\u4fdd\u62a4\u5f62\u5f0f\u7684\u8bcd\u6c47\u89e3\u6790\u3002\u6b64\u535a\u5ba2\u6587\u7ae0\u4fa7\u91cd\u4e8e\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5982\u4f55\u901a\u8fc7\u5229\u7528HTML\u89e3\u6790\u903b\u8f91\u6765\u5f15\u5165JavaScript\u6765\u6b3a\u9a97\u8bcd\u6c47\u89e3\u6790\u5668\uff0c\u5c3d\u7ba1\u5b58\u5728\u590d\u6742\u7684\u4fdd\u62a4\u3002\u4e3a\u4e86\u4e86\u89e3\u5982\u4f55\u5229\u7528\u8fd9\u4e9bXSS\u95ee\u9898\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u68c0\u67e5\u5982\u4f55\u89e3\u6790HTML;\u5728\u5904\u7406\u6570\u636e\u671f\u95f4\u8b66\u544a\u548c\u7279\u6b8a\u60c5\u51b5;\u4ee5\u53ca\u6d88\u6bd2\u89e3\u91ca\u8005\u5982\u4f55\u5de5\u4f5c\u3002\n   \u8981\u4e86\u89e3\u6211\u4eec\u5982\u4f55\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u8bcd\u6c47\u5206\u6790\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5b9e\u73b0XSS\uff0c\u6211\u4eec\u9996\u5148\u5fc5\u987b\u67e5\u770bHTML\u5982\u4f55\u89e3\u6790\uff0c\u4ee5\u53ca\u5982\u4f55\u786e\u5b9a\u5185\u5bb9\u662f\u6570\u636e\u6216\u6307\u4ee4\u3002\u4e0b\u56fe\u662fHTML\u89e3\u6790\u5668\u7684\u53ef\u89c6\u5316\uff06\uff0339;\u64cd\u4f5c\u987a\u5e8f\uff1a\n  \u7f51\u7edc - \u8be5\u9636\u6bb5\u662f\u6307\u5c06\u8f93\u5165\u4f5c\u4e3a\u5b57\u8282\u4f20\u8f93\u5230\u89e3\u6790\u5668\u3002\n \u9500\u552e\u5668 - \u4ee4\u724c\u5316\u662f\u8bcd\u6c47\u89e3\u6790\u53d1\u751f\u7684\u5730\u65b9\u3002\u89e3\u6790\u5668\u5c06\u4ece\u8ba1\u7b97\u673a\u6307\u4ee4\u5206\u5f00\u6587\u672c\u6570\u636e\u3002\u4e3a\u6b64\uff0c\u9500\u8bb0\u5b50\u5c06\u6839\u636eIT\u9047\u5230\u7684\u5143\u7d20\u5207\u6362\u6570\u636e\u72b6\u6001\u4e4b\u95f4\u7684\u4e0a\u4e0b\u6587\u5e76\u5c06\u503c\u8fd4\u56de\u4e3a\u4ee4\u724c\u3002\u8fd9\u5728\u4e0a\u4e0b\u6587\u72b6\u6001\u90e8\u5206\u4e2d\u66f4\u8be6\u7ec6\u5730\u4ecb\u7ecd\u3002\n \u6811\u65bd\u5de5 - \u4ece\u724c\u72b6\u9636\u6bb5\u8fd4\u56de\u7684\u4ee4\u724c\u653e\u5728\u6811\u7ed3\u6784\u4e2d;\u6bcf\u4e2a\u6811\u679d\u90fd\u79f0\u4e3a\u8282\u70b9\u3002\u5bf9\u4e8e\u7ec3\u4e60\u4e2d\u7684\u90a3\u79cd\u770b\u8d77\u6765\u66f4\u6e05\u695a\u7684\u56fe\u7247\uff0c\u8ba9\uff06\uff0339\u68c0\u67e5\u4ee5\u4e0bHTML\u7247\u6bb5\uff1a\u4e0b\u56fe\u663e\u793a\u4e86\u6587\u6863\u5bf9\u8c61\u6a21\u578b\uff08DOM\uff09\u6811\u7ed3\u6784\u4e2d\u7684\u5185\u5bb9\uff1a\u6211\u4eec\u4f5c\u4e3a\u653b\u51fb\u8005\u7684\u76ee\u6807\u662f\u63a7\u5236HTML\u89e3\u6790\u7684\u6b64\u9636\u6bb5\u4e2d\u7684\u8282\u70b9\u3002\u5f53\u6211\u7684\u5bfc\u5e08Joe Demesy\u4e00\u65e6\u63cf\u8ff0\u4e86\u6211\uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u63a7\u5236\u8282\u70b9\uff06\uff0339; s\u7684\u4e0a\u4e0b\u6587\u548c\u5185\u5bb9\uff0c\u4f60\u5c06\u6709xss\u3002\n \u811a\u672c\u6267\u884c - \u6b64\u9636\u6bb5\u662f\u6307JavaScript\u53d1\u751f\u4e86DOM\u3002\u6709\u5173\u6b64\u9636\u6bb5\u7684\u5176\u4ed6\u8be6\u7ec6\u4fe1\u606f\u4e0d\u5c5e\u4e8e\u6b64\u535a\u5ba2\u6587\u7ae0\u7684\u8303\u56f4\u3002\n DOM  - \u6784\u5efa\u6587\u6863\u5bf9\u8c61\u6a21\u578b\u7684\u5904\u7406\u7684\u7ed3\u675f\u72b6\u6001\u3002 \n\u5173\u952e\u5916\u5356\uff1a\u73b0\u5728\u60a8\u5e94\u8be5\u5bf9\u6570\u636e\u5982\u4f55\u6d41\u8fc7HTML\u89e3\u6790\u8fc7\u7a0b\u4ee5\u53ca\u5982\u4f55\u7ec4\u7ec7\u4fe1\u606f\uff0c\u8fd9\u5c06\u6709\u4e00\u4e2a\u9ad8\u7ea7\u522b\u7684\u7406\u89e3\uff0c\u5e76\u4e14\u5982\u4f55\u5728\u5265\u524a\u671f\u95f4\u53d1\u6325\u4f5c\u7528\u3002\n  \u5728\u4ee4\u53eb\u5316\u9636\u6bb5\uff0cHTML\u89e3\u6790\u5668\u5c06\u5c06HTML\u5143\u7d20\u5bf9\u79f0\u4e3a\u4e0a\u4e0b\u6587\u72b6\u6001\u7684\u4e0d\u540c\u7c7b\u522b\u3002 HTML\u89c4\u8303\u5217\u51fa\u4e86\u4e0a\u4e0b\u6587\u72b6\u6001\u5207\u6362\u5143\u7d20\uff0c\u5982\u4e0b\u6240\u793a\uff1a\n \u8bbe\u7f6e\u5982\u4e0b\u6240\u793a\u7684HTML\u89e3\u6790\u5668\u548c\uff0339; s\u4ee4\u724c\u5316\u9636\u6bb5\u7684\u72b6\u6001\uff0c\u5728\u4e0a\u4e0b\u6587\u5143\u7d20\u4e0a\u5207\u6362\uff1aTitle TextArea\u5c06\u4ee4\u724c\u7a0b\u5e8f\u5207\u6362\u5230RCData\u72b6\u6001\u3002 STYLE XMP IFRAME Noembed NoframeS\u5c06\u4ee4\u724c\u7a0b\u5e8f\u5207\u6362\u5230RawText\u72b6\u6001\u3002\u811a\u672c\u5c06\u4ee4\u724c\u7a0b\u5e8f\u5207\u6362\u5230\u811a\u672c\u6570\u636e\u72b6\u6001\u3002 NOScript\u5982\u679c\u542f\u7528\u4e86\u811a\u672c\u6807\u5fd7\uff0c\u5c06\u4ee4\u724c\u7a0b\u5e8f\u5207\u6362\u5230RawText\u72b6\u6001\u3002\u5426\u5219\uff0c\u8bf7\u5c06\u4ee4\u724c\u7a0b\u5e8f\u7559\u5728\u6570\u636e\u72b6\u6001\u3002\u660e\u6587\u5c06\u4ee4\u724c\u724c\u5668\u5207\u6362\u5230\u660e\u6587\u72b6\u6001\u3002\u4efb\u4f55\u5176\u4ed6\u5143\u7d20\u90fd\u4f1a\u5728\u6570\u636e\u72b6\u6001\u4e0b\u7559\u4e0b\u4ee4\u724c\u5316\u5668\u3002\n \u4e0b\u9762\u7684\u53ef\u89c6\u5316\u663e\u793a\u4e86\u5176\u4e2d\u4e00\u4e9b\u4e0a\u4e0b\u6587\u72b6\u6001\u5728\u5b9e\u8df5\u4e2d\u770b\u8d77\u6765\u50cf\uff1aRCData\u793a\u4f8b\uff1a\n                            \u8bf7\u6ce8\u610f\uff0c\u6570\u636e\u72b6\u6001\u662f\u5c1d\u8bd5\u52a0\u8f7d\u56fe\u50cf\u7684\u552f\u4e00\u72b6\u6001\u3002\u8fd9\u662f\u56e0\u4e3a\u6570\u636e\u662f\u8ba1\u7b97\u673a\u6307\u4ee4\uff0c\u800c\u4e0d\u662f\u7b80\u5355\u7684\u6587\u672c\u6570\u636e\u3002\n \u5173\u952e\u5916\u5e26\uff1a\u4e0d\u540c\u63d0\u4f9b\u7684\u5143\u7d20\u901a\u8fc7\u5207\u6362\u6570\u636e\u7684\u4e0a\u4e0b\u6587\u72b6\u6001\u6765\u6539\u53d8\u8fd9\u4e9b\u5143\u7d20\u4e2d\u7684\u6570\u636e\u5982\u4f55\u89e3\u6790\u548c\u5448\u73b0\u3002\n   \u6d4f\u89c8\u5668\u7684HTML\u89e3\u6790\u5668\u4e0d\u4ec5\u4ec5\u662fHTML;\u5b83\u53ef\u4ee5\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u540d\u79f0\u7a7a\u95f4\u4e4b\u95f4\u5207\u6362\uff1aHTML\uff0cMATHML\u548cSVG\u3002 \n\u5728HTML\u89e3\u6790\u671f\u95f4\uff0c\u5982\u679c\u662f\uff06lt; svg\uff06gt;\u6216\uff06lt; math\uff06gt;\u9047\u5230\u547d\u540d\u7a7a\u95f4\u5143\u7d20\uff08\u6807\u8bb0\uff09\uff0c\u89e3\u6790\u5668\u5c06\u5207\u6362\u4e0a\u4e0b\u6587\u5230\u76f8\u5e94\u7684\u547d\u540d\u7a7a\u95f4\u3002\u8be5\u4e0a\u4e0b\u6587\u5207\u6362\u5230\u6211\u4eec\u7684\u610f\u601d\u662f\u89e3\u6790\u5668\u4e0d\u518d\u88ab\u89e3\u6790\u4e3aHTML\u4f46\u662fMathml\u6216SVG\u3002\n \u5f53HTML\u5d4c\u5165Mathml / SVG\u4e2d\u65f6\uff0c\u6b64\u547d\u540d\u7a7a\u95f4\u4e0a\u4e0b\u6587\u5207\u6362\u4f1a\u5bfc\u81f4\u610f\u5916\u884c\u4e3a\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u547d\u540d\u7a7a\u95f4\u90fd\u6709\u81ea\u5df1\u7684\u4e0d\u540c\u5143\u7d20\uff0c\u5e76\u7565\u6709\u4e0d\u540c\u3002\u4f5c\u4e3a\u6e17\u900f\u6d4b\u8bd5\u4eea\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u5229\u7528\u6b64\u903b\u8f91\u5c06\u89e3\u6790\u5668\u6df7\u4e3a\u5141\u8bb8XSS\u3002\n Micha\u0142Bentkowski\uff06\uff0339; S Dompurify Bypass Workup\u63d0\u4f9b\u4e86\u66f4\u6df1\u5165\u7684\u540d\u79f0\u7a7a\u95f4\u6df7\u4e71\uff0c\u5305\u62ec\u5c16\u7aef\u7814\u7a76\u548c\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\u3002\n \u5173\u952e\u5916\u5e26\uff1aHTML\u89e3\u6790\u5668\u5c06\u5728\u9047\u5230MATHML\u6216SVG\u5143\u7d20\u65f6\uff0c\u5c06\u5207\u6362\u5230\u5355\u72ec\u7684\u547d\u540d\u7a7a\u95f4\uff0c\u8be5\u5143\u7d20\u53ef\u7528\u4e8e\u6df7\u6dc6\u89e3\u6790\u5668\u3002\n   \u4e3a\u4e86\u5229\u7528\u6d88\u6bd2\u8bcd\u6c47\u89e3\u6790\u5668\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4ed6\u4eec\u5982\u4f55\u5de5\u4f5c\u7684\u4e00\u822c\u6d41\u7a0b\u3002\u5728\u9ad8\u6c34\u5e73\uff0c\u4e00\u822c\u6d41\u7a0b\u5982\u4e0b\uff1a\n    \u5265\u524a\u7684\u76ee\u6807\u662f\u63d0\u4f9bHTML\uff0c\u5b83\u5c06\u6b3a\u9a97\u6d88\u6bd2\u89e3\u6790\u5668\uff0c\u76f8\u4fe1\u63d0\u4f9b\u7684\u8f93\u5165\u662f\u5b9e\u9645\u4e0a\u8ba1\u7b97\u673a\u6307\u4ee4\uff08\u6570\u636e\u72b6\u6001\uff09\u7684\u975e\u5371\u9669\u6587\u672c\u6570\u636e\uff08RCData\uff0c\u660e\u6587\u6216Rawtext\uff09\u3002\u8fd9\u901a\u5e38\u662f\u53ef\u80fd\u7684\u51e0\u79cd\u539f\u56e0\uff1aHTML\u4e0d\u662f\u8bbe\u8ba1\u7684\u4e24\u6b21;\u5728\u521d\u59cbHTML\u89e3\u6790\u5668\u548c\u6d88\u6bd2\u89e3\u6790\u5668\u4e4b\u95f4\u4f1a\u53d1\u751f\u89e3\u6790\u7684\u7565\u6709\u53d8\u5316;\u6d88\u6bd2\u89e3\u6790\u5668\u7ecf\u5e38\u5b9e\u65bd\u81ea\u5df1\u7684\u5904\u7406\u903b\u8f91\u3002\n   Tinymce\u662f\u4e00\u4e2a\u4f60\u662f\u4e00\u4e2a\u4f60\u770b\u5230\u7684 - \u4ec0\u4e48 - \u4f60\u5f97\u5230\uff08wysiwyg\uff09html\u6587\u672c\u7f16\u8f91\u5668\u548cjavascript\u5e93\u3002\u5b83\u901a\u5e38\u5305\u542b\u5728\u7b2c\u4e09\u65b9\u7f51\u7ad9\u4e2d\uff0c\u4ee5\u63d0\u4f9b\u6587\u672c\u7f16\u8f91\u529f\u80fd\uff0c\u5305\u62ecHTML\u6587\u672c\u3002 \n\u7531George Stekee\u548cI\u53d1\u73b0\u7684CVE-2020-12648\uff08Tinymce\u4e2d\u7684XSS\uff09\u5c06\u4f5c\u4e3a\u5982\u4f55\u5229\u7528HTML\u89e3\u6790\u8b66\u544a\u5728\u4f7f\u7528\u6d88\u6bd2\u89e3\u6790\u5668\u7684\u60c5\u51b5\u4e0b\u5229\u7528HTML\u89e3\u6790\u8b66\u544a\u7684\u6d4b\u8bd5\u7528\u4f8b\u3002\u5728TinyMCE\u54a8\u8be2\u4e2d\uff0cXSS\u662f\u901a\u8fc7\u4ee5\u4e0b\u6709\u6548\u8f7d\u8377\u5b9e\u73b0\u7684\uff1a\n   \u7531\u4e8e\u4ee4\u724c\u5316\u548c\u6811\u65bd\u5de5\u9636\u6bb5\uff0c\u6b64\u6709\u6548\u8f7d\u8377\u6210\u529f\u3002\u7279\u522b\u662f\uff0c\u5f53LEXICAL\u89e3\u6790\u5668\u5f52\u5e93HTML\u65f6\uff0c\u5728\u5206\u914d\u4e0a\u4e0b\u6587\u72b6\u6001\u4e4b\u524d\uff0c\u5b83\u4e0d\u4f1a\u6b63\u786e\u5730\u5360\u5143\u7d20\u7684\u987a\u5e8f\u3002\n \uff06lt; iframe\uff06gt;\u5143\u7d20\u5bfc\u81f4\u4e0a\u4e0b\u6587\u72b6\u6001\u5207\u6362\u5230RawText\uff0c\u8fd9\u610f\u5473\u7740Iframe\u540e\u9762\u7684\u6570\u636e\u88ab\u8ba4\u4e3a\u662f\u4e0d\u5371\u9669\u7684\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u6d88\u6bd2\u3002\u8be5\u4e0a\u4e0b\u6587\u5207\u6362\u7ed3\u675f\u4e8e\u622a\u6b62\u6807\u7b7e\u7684\uff06lt; / iframe\uff06gt;\u4f46\u662f\uff0c\uff06lt; textarea\uff06gt;\u5143\u7d20\u8fd8\u6307\u793a\u89e3\u6790\u5668\u5207\u6362\u5230RCData\u4e0a\u4e0b\u6587\uff0c\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u975e\u5371\u9669\u6587\u672c\u6570\u636e\u3002\u5f53HTML\u89e3\u6790\u5668\u5904\u7406\u65f6\uff0c\u4e0a\u4e0b\u6587\u5207\u6362\u5230IFrame\u5143\u7d20\u4e2d\u5305\u542b\u5728IFrame\u5143\u7d20\u4e2d\u3002\u8fd9\u79cd\u904f\u5236\u662fTinyMCE\u89e3\u6790\u5668\u672a\u80fd\u5b9e\u73b0\u7684\u5185\u5bb9\u3002\n \u89e3\u6790\u6b64\u5185\u5bb9\u65f6\uff0cTinyMCE\u89e3\u6790\u5668\u65e0\u6cd5\u8003\u8651\u64cd\u4f5c\u987a\u5e8f\u548c\u4e0a\u4e0b\u6587\u5207\u6362\u3002\u56e0\u6b64\uff0c\u7531\u6700\u7ec8\u6d88\u6bd2\u540e\u7684DOM\u6811\u5efa\u8bbeHTML\u89e3\u6790\u5668\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n   \u8bf7\u6ce8\u610f\uff0c\u5177\u6709\u6d3b\u52a8\u5185\u5bb9OnError\u4e8b\u4ef6\u7684IMG\u5143\u7d20\u5728DOM\u6811\u4e2d\u7684\u6587\u672c\u4e0a\u4e0b\u6587\u4e2d;\u5728\u8bcd\u6c47\u89e3\u6790\u65f6\uff0c\u8fd9\u5c06\u6ce8\u518c\u4e3a\u975e\u5371\u9669\u800c\u4e0d\u662f\u88ab\u5265\u79bb\u6216\u8f93\u51fa\u7f16\u7801\u3002\u7531\u4e8eTextArea\u5143\u7d20\u5305\u542b\u5728IF\u5e27\u4e2d\uff0c\u56e0\u6b64IMG\u5143\u7d20\u5b9e\u9645\u4e0a\u5e76\u4e0d\u5728TextArea\u5143\u7d20\u4e2d\u3002\u56e0\u6b64\uff0c\u6267\u884c\u4e86\u6267\u884c\u7684\u6d3b\u52a8\u5185\u5bb9\uff08JavaScript\uff09\u548cXSS\u3002\n   Froala\u662f\u4e00\u4e2a\u4f60\u7684evis-is-get\uff08wysiwyg\uff09html\u6587\u672c\u7f16\u8f91\u5668\u548cjavascript\u5e93\uff0c\u5b83\u4e0etinymce\u76f8\u4f3c\u3002\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6211\u4eec\u5c06\u5ba1\u6838\u4f5c\u4e3a\u672c\u7814\u7a76\u7684\u4e00\u90e8\u5206\uff08CVE-2021-28114\uff09\u627e\u5230\u7684XSS\u6f0f\u6d1e\u3002\u5728\u6b64CVE\u7684\u54a8\u8be2\u4e2d\uff0c\u6211\u8be6\u7ec6\u8bf4\u660e\u4e86\u5982\u4f55\u4f7f\u7528\u4ee5\u4e0b\u6709\u6548\u8f7d\u8377\u5b9e\u73b0XSS\uff1a\n  \u6b64\u6709\u6548\u8f7d\u8377\u4e0e\u7528\u4e00\u4e2a\u8b66\u544a\u7684\u6d4b\u8bd5\u7528\u4f8b1\u4e2d\u8ba8\u8bba\u7684TinyMCE XS\u5728\u529f\u80fd\u76f8\u540c\u3002\u8fdb\u5165MathML\u547d\u540d\u7a7a\u95f4\u4ee5\u5bfc\u81f4\u89e3\u6790\u6df7\u6dc6\uff08\u5728Froala\uff06\uff0339; s\u5b9e\u4f8b\u4e2d\uff0c\u9650\u5236iframe\u5143\u7d20\u4e2d\u7684\u6ce8\u91ca\uff09\u4e0d\u8db3\u4ee5\u6df7\u6dc6Froala Parser\u3002\u4f46\u662f\uff0cFroala\uff06\uff0339; SARSER\u4e0d\u4e86\u89e3MATHML\u547d\u540d\u7a7a\u95f4\u6807\u7b7e\uff0c\u5e76\u5220\u9664\u6807\u7b7e\uff0c\u4f46\u7ee7\u7eed\u89e3\u6790\u5269\u4f59\u5185\u5bb9\u3002\u7ed3\u679c\u662fHTML\u89e3\u6790\u5668\u521b\u5efa\u5177\u6709\u9650\u5236\u4e3a\u6587\u672c\u6570\u636e\u7684\u6709\u6548\u8f7d\u8377\u7684\u8282\u70b9\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a \n\u4f46\u662f\uff0c\u7531\u4e8eFroala\uff06\uff0339; S\u89e3\u6790\u5668\u7701\u7565\u4e86\uff06lt; math\uff06gt;\u5143\u7d20\uff0c\u5b83\u4ecd\u5c06\u9519\u8bef\u5730\u5c06IMG\u5143\u7d20\u6709\u6548\u8f7d\u8f7d\u89c6\u4e3a\u975e\u5371\u9669\u7684\u8bc4\u8bba\u3002\u5f53\u6700\u540e\u9636\u6bb5HTML\u89e3\u6790\u5668\u5904\u7406JavaScript\u6709\u6548\u8f7d\u8377\u5e76\u5c06\u5176\u653e\u5165DOM\u4e2d\u65f6\uff0c\u5b83\u4f1a\u5982\u4e0b\u6240\u793a\uff1a\n  \u7ed3\u679c\u662fXSS\u6709\u6548\u8f7d\u8377\u6267\u884c\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u68c0\u67e5\u6316\u6398\u540e\u6e90\u4ee3\u7801\u6765\u8fdb\u4e00\u6b65\u53ef\u89c6\u5316\uff1a\n   Froala\u89e3\u6790\u5668\u79fb\u9664\u4e86\uff06lt; math\uff06gt;\u5143\u7d20\u5e76\u6dfb\u52a0\u4e86 - \uff06gt;\u5173\u95ed\u5b83\u8ba4\u4e3a\u662f\u4e00\u4e2a\u8bc4\u8bba\u3002\u6700\u540e\u9636\u6bb5HTML\u89e3\u6790\u5668\u67e5\u770b\u4e86IFrame\u5143\u7d20\u4e2d\u5305\u542b\u7684\u5f00\u653e\u6ce8\u91ca\uff0c\u5e76\u5c06Froala Parser\u6dfb\u52a0\u5230RCData\u72b6\u6001\u7684Closing Regure Comment\u5143\u7d20\uff0c\u4ee5\u5ffd\u7565\u5176\u4f5c\u4e3a\u6709\u6548\u7684\u622a\u6b62\u6807\u8bb0\u3002\u7ed3\u679c\u662f\u6d3b\u52a8\u5185\u5bb9\u6267\u884c\uff08XS\uff09\u3002\n   \u5728\u5b9e\u73b0\u5141\u8bb8\u67d0\u4e9b\u7528\u6237\u63a7\u5236\u7684HTML\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u907f\u514d\u8fd9\u4e9b\u7c7b\u578b\u9519\u8bef\u7684\u952e\u662f\u5904\u7406\u5c3d\u53ef\u80fd\u9760\u8fd1\u539f\u59cb\u89e3\u6790\u7684HTML\u3002\u867d\u7136\u8fd9\u6837\u505a\uff0c\u4f46\u8981\u8003\u8651\u5143\u7d20\u7684\u987a\u5e8f\u5e76\u5d4c\u5165\u5143\u7d20\u7684\u4e0a\u4e0b\u6587\u662f\u5f88\u91cd\u8981\u7684\u3002\u5982\u679c\u5b58\u5728HTML\u89e3\u6790\u5668\u89c6\u56fe\u5982\u4f55\u4e0eSunitize\u89e3\u6790\u5668\u89c6\u56fe\u5982\u4f55\u89c6\u56fe\u8282\u70b9\u7684\u53d8\u5316\uff0c\u5219\u4f1a\u51fa\u73b0\u8bcd\u6c47\u5206\u6790\u4e2d\u7684\u8fd9\u4e9bXSS\u95ee\u9898\u3002\u5f53\u4e0d\u9700\u8981\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5efa\u8bae\u9ed1\u540d\u5355MathML\u548cSVG\u547d\u540d\u7a7a\u95f4\u5143\u7d20\uff0c\u5e76\u5b8c\u5168\u5220\u9664\u5305\u542b\u8fd9\u4e9b\u7684\u4efb\u4f55\u8bf7\u6c42\uff08\u5373\uff0c\u4e0d\u7ee7\u7eed\u5c06\u6570\u636e\u5199\u5165DOM\uff09\u3002\n \u5bf9\u4e8e\u6ca1\u6709\u521b\u5efa\u8fd9\u4e9b\u7c7b\u578b\u7684\u89e3\u51b3\u65b9\u6848\u4f46\u5728\u5176\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5305\u62ec\u5b83\u4eec\u7684\u7ec4\u7ec7\uff0c\u826f\u597d\u7684\u8865\u4e01\u653f\u7b56\u5c06\u5728\u9884\u9632\u5265\u524a\u65b9\u9762\u8fdb\u884c\u5f88\u5927\u7684\u8865\u4e01\u653f\u7b56\u3002\u6211\u5efa\u8bae\u60a8\u68c0\u67e5\u8fd9\u4e9b\u5e93\u7684\u6700\u65b0\u7248\u672c\uff0c\u5e76\u5728\u5e38\u89c4\u548c\u7ec4\u7ec7\u5b9a\u4e49\u7684\u57fa\u7840\u4e0a\u4fee\u8865\u5b83\u4eec\u3002\n \u9664\u4e86\u4ee3\u7801/\u5e94\u7528\u7a0b\u5e8f\u7ea7\u522b\u7684\u5b89\u5168\u63a7\u4ef6\u4e4b\u5916\uff0c\u7ec4\u7ec7\u8fd8\u5e94\u8003\u8651\u5c06\u5185\u5bb9\u5b89\u5168\u7b56\u7565\uff08CSP\uff09\u5b9e\u65bd\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u660e\u786e\u5b9a\u4e49\u7684CSP\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u5b9a\u4e49\u7684\u7ea7\u522b\u963b\u6b62JavaScript\u6ce8\u5165\uff0c\u4ece\u800c\u521b\u5efa\u6297\u8fa9\u5b89\u5168\u59ff\u52bf\u3002\u6b64\u5916\uff0cCSP\u5e94\u8be5\u907f\u514d\u6307\u4ee4\uff0c\u4f8b\u5982\u4e0d\u5b89\u5168\u5185\u8054\u6216\u4e0d\u5b89\u5168 -  eval\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u6307\u4ee4\u53ef\u4ee5\u5141\u8bb8\u7528\u6237\u5b9a\u4e49\u7684\u5185\u8054JavaScript\u6267\u884c\u3002\u6709\u5173CSP\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u6b64\u4fe1\u606f\u6587\u7ae0\u3002\n   \u5373\u4f7f\u5728\u8f93\u5165\u8f93\u5165\u7684\u8f93\u5165\u65f6\uff0cxss\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5229\u7528HTML\u5982\u4f55\u89e3\u6790\u548c\u5f52\u5e93\uff0c\u901a\u8fc7\u4efb\u4f55\u6d88\u6bd2\u5e93\u90fd\u5728\u4f7f\u7528\u3002\u5728\u6d4b\u8bd5\u6b64\u7c7b\u7c7b\u578b\u7684XS\u65f6\uff0c\u6211\u5efa\u8bae\u4f7f\u7528\u5404\u79cd\u547d\u540d\u7a7a\u95f4\u548c\u4e0a\u4e0b\u6587\u5207\u6362\u5143\u7d20\u8fdb\u884c\u6a21\u7cca\u8f93\u5165\uff0c\u8bb0\u5f55\u4efb\u4f55\u6709\u8da3\u7684\u7ed3\u679c\uff0c\u5e76\u89e3\u51b3\u8fd9\u4e9b\u7ed3\u679c\u3002 ", "note_en": "TL;DR   By using special HTML tags that leverage HTML parsing logic, it is possible to achieve cross-site scripting (XSS) even in instances where lexical parsers are used to nullify dangerous content. The primary goal in exploiting these types of XSS vulnerabilities is to get the sanitizing lexical parser to view the data as text data and not computer instructions (e.g., JavaScript instructions). This type of attack is possible when the HTML parser and the sanitizing lexical parsing do not parse the data in the same manner.\n   Note: this blog post assumes some previous knowledge of XSS (better described as JavaScript injection) and a basic understanding of HTML. For a high-level primer,  head over to our XSS overview writeup.\n  XSS protections come in many forms. In the early days of preventing XSS and occasionally still today, regular expressions (regex) were used to examine user input for &#34;dangerous&#34; strings. A simplified example is that if a user provided input containing   &lt;script&gt; , the regex would match that exact string and remove it. However, this type of regex-based XSS protection often misses the mark, as there are many ways to formulate a JavaScript string of code to bypass the protection. In the same simplified example, simply capitalizing a letter in   &lt;scRipt&gt;\u00a0would bypass the filter and result in XSS. It is therefore not advisable to attempt a regex filter to prevent XSS.\n So, let&#39;s talk about a better solution. Contextual output encoding is a form of XSS protection that transforms special characters such as &#34; &lt;&#34; and &#34; &gt;&#34; into harmless HTML encoded output (e.g., &#34;  &amp;lt;&#34; and &#34;  &amp;gt;&#34;). This form of protection places the user&#39;s input within the source to ensure any JavaScript or HTML-usable characters that could result in JavaScript execution or HTML rendering are transferred into a non-dangerous, HTML entity encoded form. This is a great way to handle user input that renders in the application; in fact, many contemporary front-end frameworks will now perform output encoding by default (e.g., ReactJS and Angular). However, this form of protection can limit an application\u2019s ability to allow users to include some types of HTML-enabled rich text.\n What if users require the ability to include some HTML such as images, links, and rich text? This is where lexical parsing comes into play.\n  Lexical parsing is a very sophisticated way of preventing XSS because it evaluates whether the data is instructions or plaintext before performing additional logic such as blocking or encoding the data. At a high level, lexical parsing can be described as parsing that will separate user data (i.e., non-dangerous textual content) from computer instructions (i.e., JavaScript and certain dangerous HTML tags). In instances where the user is allowed a subset of HTML by design, this type of parsing can be used to determine what is allowed content and what will be blocked or sanitized.\n Some examples that allow a subset of HTML by design are rich-text editors, email clients, What-You-See-Is-What-You-Get (WYSIWYG) HTML editors like TinyMCE or Froala, and sanitization libraries such as DOMPurify. Among these examples, this form of lexical parsing protection is commonplace.\n However, lexical parsing as a form of XSS protection can be exploited when the HTML parser and sanitizing lexical parser do not process the data in the exact same manner. This blog post focuses on how in some cases it is possible to trick lexical parsers by leveraging the HTML parsing logic to inject JavaScript despite the sophisticated protections. In order to understand how to exploit these XSS issues, we must first examine how HTML is parsed; caveats and special cases during processing of data; and how the sanitizing parsers work.\n   To understand how we can achieve XSS in an application that uses lexical analysis on HTML input, we first must look at how HTML is parsed and how content is determined to be either data or instructions. The figure below is a visualization of the HTML parser&#39;s order of operations:\n  Network \u2013 This stage refers to the transfer of input as bytes to the parser.\n Tokenizer \u2013 Tokenization is where the lexical parsing occurs. The parser will separate text data from computer instructions. To do this, the tokenizer will switch contexts between data states depending on the element it encounters and return the values as tokens. This is covered in more detail in the Context State section.\n Tree Construction \u2013 The tokens returned from the tokenization stage are placed in a tree structure; each of the tree branches is known as a node. For a clearer picture of what this looks like in practice, let&#39;s examine the following HTML snippet:  The figure below shows what this looks like in the document object model (DOM) tree structure:    Our goal as an attacker is to control the node in this stage of HTML parsing.  As my mentor Joe DeMesy once described it to me, if you can control a node&#39;s context and content, you will have XSS.\n Script Execution \u2013 This stage refers to when JavaScript alters the DOM. Additional details about this stage are out of the scope of this blog post.\n DOM \u2013 The end state of the processing where the document object model is built.\n KEY TAKEAWAY:   Now you should have a high-level understanding of how data flows through the HTML parsing process and how the information is organized, which will come into play during exploitation.\n  During the    tokenization stage, the HTML parser will sort the HTML elements into different categories of data states known as the   Context State. The  HTML specification lists the   Context State\u00a0switching elements as follows:\n Set the state of the\u00a0 HTML parser &#39;s\u00a0 tokenization \u00a0stage as follows, switching on the\u00a0  context \u00a0element:    title    textarea  Switch the tokenizer to the\u00a0 RCDATA state .    style   xmp   iframe   noembed    noframes  Switch the tokenizer to the\u00a0 RAWTEXT state .    script  Switch the tokenizer to the\u00a0 script data state .    noscript  If the\u00a0 scripting flag \u00a0is enabled, switch the tokenizer to the\u00a0 RAWTEXT state . Otherwise, leave the tokenizer in the\u00a0 data state .   plaintext  Switch the tokenizer to the\u00a0 PLAINTEXT state .   Any other element  Leave the tokenizer in the\u00a0 data state .\n The visualization below shows what some of these context states look like in practice:     RCDATA\u00a0example:\n                            Note that the   data state\u00a0is the only state that attempted to load an image. This is because data is a computer instruction and not simply text data.\n KEY TAKEAWAY: Different supplied elements alter how data in those elements is parsed and rendered by switching the   Context State of the data.\n   The browser\u2019s HTML parser understands more than just HTML; it can switch between three distinct namespaces: HTML, MathML, and SVG.\n During HTML parsing, if either a   &lt;svg&gt; or   &lt;math&gt;\u00a0namespace element (tag) is encountered, the parser will switch context to the respective namespace. What this context switch means to us is the parser is no longer parsing as HTML but rather MathML or SVG.\n This namespace context switch results in unexpected behavior when HTML is embedded in MathML/SVG, as each namespace has its own distinct elements and parses slightly differently. As penetration testers, we can exploit this logic in some instances to confuse the parser into allowing XSS.\n Micha\u0142 Bentkowski&#39;s DOMPurify   bypass  writeup provides a more in-depth look on namespace confusion, including cutting-edge research and a great example.\n KEY TAKEAWAY:  The HTML parser will context switch to separate namespaces when it encounters MathML or SVG elements, which can be used to confuse the parser.\n   To exploit sanitizing lexical parsers, we need to understand the general flow of how they work. At a high level, the general flow is as follows:\n    The goal of exploitation is to provide HTML that will trick the sanitizing parser into believing the provided input is non-dangerous text data (  RCDATA,   PLAINTEXT , or   RAWTEXT) when it is actually computer instructions (  data state). This is often possible for several reasons: HTML is not designed to be parsed twice; slight variations in parsing can occur between the initial HTML parser and the sanitizing parser; and sanitizing parsers often implement their own processing logic.\n   TinyMCE is a What-You-See-Is-What-You-Get (WYSIWYG) HTML text editor and JavaScript library. It is typically included in third-party websites to provide text editing functionality, including HTML text.\n CVE-2020-12648 (XSS in TinyMCE), which was discovered by George Steketee and I, will serve as a test case for how HTML parsing caveats can be leveraged to gain XSS in cases where a sanitizing parser is used. In the TinyMCE advisory, XSS was achieved with the following payload:\n   This payload was successful because of an issue in the tokenization and tree construction phases. In particular, when the HTML was reparsed by the lexical parser, it did not properly account for the order of elements before assigning the context state.\n The   &lt;iframe&gt;\u00a0element caused the context state to switch to   RAWTEXT, which meant that the data following the   iframe was considered not dangerous and did not require sanitization. This context switch ended at the closing tag of   &lt;/iframe&gt;. However, the   &lt;textarea&gt;\u00a0element also instructed the parser to switch to the   RCDATA\u00a0context, another form of non-dangerous text data. The context switch to   RCDATA was contained within the   iframe\u00a0elements when they were processed by the HTML parser. This containment is what the TinyMCE parser failed to realize.\n When this was parsed, the TinyMCE parser failed to consider the proper order of operations and context switches. Therefore, the DOM tree construction performed by the final post-sanitization HTML parser looked like this:\n   Note that the   img element with the active content   onerror\u00a0 event is within the   text\u00a0context in the DOM tree; when lexically parsed, this would register as non-dangerous and not be stripped or output encoded. Since the   textarea element was contained in the   iframe , the   img element was not actually within a   textarea\u00a0element. Therefore, the active content (JavaScript) executed and XSS was achieved.\n   Froala is a What-You-See-Is-What-You-Get (WYSIWYG) HTML text editor and JavaScript library that is similar in functionality to TinyMCE. For a second test case, we will review an XSS vulnerability that was found as a part of this research ( CVE-2021-28114). In the advisory for this CVE, I detailed how XSS was achieved using the following payload:\n  This payload is functionally the same as the TinyMCE XSS discussed in Test Case 1 of this blog post with one caveat. Entering the   MathML namespace to cause parsing confusion (in Froala&#39;s instance, restricting a comment within   iframe\u00a0elements) was not enough to confuse the Froala parser. However, Froala&#39;s parser did not understand   MathML namespace tags and would drop the tags but continue parsing the remaining content. The result was the HTML parser creating nodes with the payload restricted to text data, as shown in the tree below:\n  However, since Froala&#39;s parser omitted the    &lt;math&gt; element, it would still incorrectly view the    img\u00a0element payload as a non-dangerous comment. When the JavaScript payload was processed by the final-stage HTML parser and placed into the DOM, it would do so as follows:\n  The result was the XSS payload execution. This can be further visualized by examining the post-exploitation source code:\n   The Froala parser removed the    &lt;math&gt; element and added a    --&gt; to close what it believed was a comment. The final-stage HTML parser viewed the opening comment as contained within   iframe\u00a0elements and set the closing comment element added by the Froala parser to the    RCDATA\u00a0state, ignoring it as a valid closing tag. The result was active content execution (XSS).\n   When implementing applications that allow some user-controlled HTML by design, the key to avoiding these types of bugs is to process the HTML as close to the original parse as possible. While doing so, it is important to account for the order of elements and embed the elements\u2019 context. These XSS issues within lexical analysis will arise if there is a variation in how the HTML parser views a node versus how the sanitizing parser views a node. It is also advisable to blacklist MathML and SVG namespace elements when they are not required and completely drop any request containing these (i.e., do not continue to write the data into the DOM).\n For organizations that are not creating these types of solutions but rather including them in their applications, a good patch policy will go a long way in preventing exploitation. I recommend checking for the latest versions of these libraries and patching them on a regular and organizationally defined basis.\n In addition to security controls at the code/application level, organizations should consider implementing a content security policy (CSP) into the application. A well-defined CSP can block JavaScript injection at a browser-defined level, creating a defense-in-depth security posture. Additionally, the CSP should avoid directives such as     unsafe-inline or    unsafe-eval, as these can allow user-defined inline JavaScript execution. For more on CSP, please refer to this informative  article.\n   Even when input is lexically analyzed, XSS may still be possible by exploiting caveats in how HTML is parsed and reparsed by whatever sanitization library is in use. When testing for this type of XSS, I recommend fuzzing inputs with various namespace and context switching elements, recording any interesting results, and working off those results.", "posttime": "2021-06-26 01:12:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7ed5\u8fc7,bypassing,html", "title": "Lexs\uff1a\u7ed5\u8fc7\u8bcd\u6c47\u89e3\u6790\u5b89\u5168\u63a7\u5236 ", "title_en": "Lexss: Bypassing Lexical Parsing Security Controls", "transed": 1, "url": "https://labs.bishopfox.com/tech-blog/lexss-bypassing-lexical-parsing-security-controls", "via": "", "real_tags": ["\u7ed5\u8fc7", "bypassing", "html"]}]