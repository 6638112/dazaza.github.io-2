[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1074753, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u50cf\u6211\u4e00\u6837\u5728\u897f\u6d77\u5cb8\u957f\u5927\uff0c\u4f60\u53ef\u80fd\u5df2\u7ecf\u4e60\u60ef\u4e86\u770b\u5230\u77ed\u800c\u7c97\u7684\u9ec4\u6cb9\u68d2\u3002\u4f46\u4e00\u8f86\u4e1c\u8fc7\u5c71\u8f66\u53ef\u80fd\u4f1a\u8fc7\u6765\u95ee\uff1a\u201c\u4e3a\u4ec0\u4e48\u9ec4\u6cb9\u68d2\u8fd9\u4e48\u7c97\uff1f\u201d\u5728\u843d\u57fa\u5c71\u8109\u4ee5\u4e1c\u7684\u5927\u90e8\u5206\u5730\u533a\uff0c\u9ec4\u6cb9\u68d2\u66f4\u957f\u3001\u66f4\u8584\u3002\u8fd9\u662f\u600e\u4e48\u56de\u4e8b\uff1f\uff08\u4e3a\u4ec0\u4e48\u4f60\u73b0\u5728\u624d\u77e5\u9053\u5462\uff1f\uff09\n\u6211\u4eec\u57282014\u5e74\u8bbe\u8ba1\u9ec4\u6cb9\u76d8\u65f6\u53d1\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002OXO\u54c1\u7c7b\u603b\u76d1Lua\u6b63\u5728\u7814\u7a76\u5bb6\u5f97\u5b9d\uff08Home Depot\uff09\u5404\u79cd\u51b0\u7bb1\u578b\u53f7\u4e2d\u7684\u9ec4\u6cb9\u9694\u95f4\uff0c\u4ee5\u786e\u5b9a\u6211\u4eec\u7684\u76d8\u5b50\u5e94\u8be5\u6709\u591a\u5927\uff1b\u5979\u5f88\u5feb\u610f\u8bc6\u5230\u5b83\u4eec\u7684\u5927\u5c0f\u4e0d\u5c3d\u76f8\u540c\u3002\n\u4e8b\u5b9e\u8bc1\u660e\uff0c\u4e1c\u6d77\u5cb8\u98ce\u683c\u7684\u9ec4\u6cb9\uff0c\u6216\u201c\u57c3\u5c14\u91d1\u201d\uff0c\u662f\u4ee5\u4f0a\u5229\u8bfa\u4f0a\u5dde\u57c3\u5c14\u91d1\u7684\u4e00\u4e2a\u8457\u540d\u5976\u725b\u573a\u547d\u540d\u7684\u300220\u4e16\u7eaa60\u5e74\u4ee3\uff0c\u5f53\u897f\u6d77\u5cb8\u8d76\u4e0a\u4e2d\u897f\u90e8\u7684\u4e73\u54c1\u751f\u4ea7\u65f6\uff0c\u57c3\u5c14\u91d1\u98ce\u683c\u7684\u9ec4\u6cb9\u6253\u5370\u673a\uff08\u6216\u7528\u6765\u5236\u4f5c\u9ec4\u6cb9\u7684\u6a21\u5177\uff09\u5c31\u4e0d\u518d\u53ef\u7528\u4e86\u3002\u897f\u6d77\u5cb8\u7684\u4e73\u54c1\u5382\u5f00\u59cb\u4f7f\u7528\u65b0\u7684\u9ec4\u6cb9\u6253\u5370\u673a\uff08\u6211\u4eec\u80fd\u505c\u4e0b\u6765\u6b23\u8d4f\u4e00\u4e0b\u9ec4\u6cb9\u6253\u5370\u673a\u5417\uff1f\uff09\u5b83\u4ea7\u751f\u4e86\u66f4\u77ed\u3001\u66f4\u4e30\u6ee1\u7684\u6811\u679d\u3002\u867d\u7136\u5927\u591a\u6570\u9ec4\u6cb9\u76d8\u7684\u5927\u5c0f\u90fd\u9002\u5408\u57c3\u5c14\u91d1\u98ce\u683c\u7684\u68cd\u68d2\uff08\u5728\u7f8e\u56fd\u66f4\u5e38\u89c1\uff09\uff0c\u4f46OXO\u7684\u9ec4\u6cb9\u76d8\u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u53ef\u4ee5\u5bb9\u7eb3\u4e24\u79cd\u68cd\u68d2\u5927\u5c0f\uff0c\u65e0\u8bba\u4f60\u4f4f\u5728\u54ea\u91cc\uff0c\u6bcf\u79cd\u98ce\u683c\u90fd\u6709\u6d4b\u91cf\u6807\u8bb0\u3002\u8bb0\u5f55\u5728\u6848\uff0c\u4e24\u4e2a\u9ec4\u6cb9\u68d2\u90fd\u542b\u67098\u6c64\u5319\uff0c\u5373\u4f7f\u77ed\u6897\u68d2\u770b\u8d77\u6765\u66f4\u5c0f\uff0c\u6240\u4ee5\u786e\u4fdd\u4f60\u7684\u997c\u5e72\u4e0d\u7f3a\u9ec4\u6cb9\u3002\u5bf9\u6211\u4eec\u5982\u4f55\u8bbe\u8ba1\u4ea7\u54c1\u611f\u5174\u8da3\uff1f\u770b\u770b\u6211\u4eec\u7684\u5e55\u540e\u90e8\u5206\u3002", "note_en": "If you grew up on the West Coast like I did, you were probably used to seeing short, stubby butter sticks. But an East Coaster might come along and wonder, \u201cwhy is that butter stick so stubby?\u201d In most regions east of the Rockies, butter sticks are longer and skinnier in shape. What\u2019s up with this bicoastal butter disparity? (And why are you only finding out about this now?)\n We found out when designing our   Butter Dish  in 2014. OXO Category Director Lua was researching butter compartments in various fridge models at Home Depot to figure out what size our dish should be; she quickly realized they weren\u2019t all the same size.\n  Turns out, the East Coast-style butter, or \u201cElgin,\u201d is named for a once-prominent dairy farm in Elgin, Illinois. Once the West Coast caught up with the Midwest\u2019s dairy production in the 1960s, the Elgin-style butter printers (or molds used to shape butter) were no longer available. West Coast dairies began using new butter printers (can we stop to appreciate butter printers for a second?) which produced shorter, chubbier sticks. While most butter dishes are sized to fit the Elgin-style sticks (more common throughout the States), OXO\u2019s Butter Dish is unique in that it can accommodate both stick sizes, no matter where you live, with measurement markings for each style.  For the record, both butter sticks contain 8 tablespoons, even if the stubbier sticks look smaller\u2014so make sure you don\u2019t short your cookies any butter. Interested in how we design products? Check out our   Behind the Scenes section .", "posttime": "2022-02-25 02:01:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u9ec4\u6cb9,coast", "title": "\u4e1c\u6d77\u5cb8\u548c\u897f\u6d77\u5cb8\u9ec4\u6cb9\u2014\u2014\u6709\u4ec0\u4e48\u533a\u522b\uff1f(2019)", "title_en": "East Coast vs. West Coast Butter \u2013 What Is the Difference? (2019)", "transed": 1, "url": "https://www.oxo.com/blog/behind-the-scenes/bicoastal-butter-research/", "via": "", "real_tags": ["\u9ec4\u6cb9", "coast"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074752, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u5728\u67d0\u79cd\u8ba1\u7b97\u673a\u6216IT\u884c\u4e1a\u5de5\u4f5c\uff0c\u5f53\u4f60\u542c\u5230\u9632\u706b\u5899\u65f6\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\u5230\u7684\u4e3b\u8981\u662f\u7f51\u7edc\u9632\u706b\u5899\uff0c\u5373\u5b89\u88c5\u5728\u4f60\u8106\u5f31\u7684\u8d44\u4ea7\u548c\u4e92\u8054\u7f51\u4e4b\u95f4\u76841U\u5de6\u53f3\u7684\u8bbe\u5907\u3002\u8fd9\u4e9b\u662f\u4ecb\u4e8e\u8bbe\u5907\u4e4b\u95f4\u7684\uff0c\u5b83\u4eec\u63a5\u6536\u5176\u4ed6\u4eba#39\uff1b\u6839\u636e\u4f60\u5fc5\u987b\u63d0\u4ea4\u4e00\u5f20\u7968\u8bc1\u624d\u80fd\u66f4\u6539\u7684\u96be\u4ee5\u6349\u6478\u7684\u89c4\u5219\u6765\u51b3\u5b9a\u662f\u5426\u4f20\u9012\u5b83\u4eec\u3002\n\u4f46\u662f\u6709&#39\uff1b\u8fd9\u4e5f\u662f\u4e00\u4e2a\u4e0d\u540c\u7684\u9632\u706b\u5899\u4e16\u754c\uff0c\u57fa\u4e8e\u4e3b\u673a\u7684\u9632\u706b\u5899\u76f4\u63a5\u5728\u5404\u79cd\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u3002Linux\u6709iptables\uff0cBSD\u6709pf\uff0cWindows\u6709Windows Defender\u9632\u706b\u5899\uff0c\u663e\u7136\u5177\u6709\u9ad8\u7ea7\u5b89\u5168\u6027\u3002\u4ece\u6765\u6ca1\u6709\u4eba\u5728\u4ea7\u54c1\u547d\u540d\u4e0a\u79f0\u8d5e\u8fc7\u5fae\u8f6f\u3002\u4f46\u662f\u6709&#39\uff1b\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u4e3b\u8981\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u6216\u591a\u6216\u5c11\u90fd\u5b58\u5728\u4e00\u4e2a\u4e3b\u673a\u9632\u706b\u5899\uff0c\u53ea\u662f\u6709\u4e00\u5927\u7fa4\u4eba\u5ffd\u7565\u4e86\u5b83\u3002\u5bf9\u4e8eLinux\uff0c\u5386\u53f2\u4e0a\uff0c\u5982\u679c\u4f60\u5ffd\u7565\u5b83\uff0c\u5b83\u901a\u5e38\u662f\u5b8c\u5168\u5f00\u653e\u7684\uff0c\u6ca1\u6709\u89c4\u5219\uff0c\u5c3d\u7ba1\u4e00\u4e9b\u53d1\u884c\u7248\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4f1a\u5207\u6362\u5230\u6709\u9650\u5236\u7684\u89c4\u5219\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cWindows\u4e2d\u6709&#39\uff1b\u8fd9\u662f\u4e00\u6574\u5957\u89c4\u5219\uff0c\u54ea\u4e9b\u89c4\u5219\u662f\u6709\u6548\u7684\u53d6\u51b3\u4e8e\u4f60\u662f\u5426\u544a\u8bc9\u5b83\u4e00\u4e2a\u7f51\u7edc\u662f&#34\uff1b\u79c1\u4eba&#34\uff1b\u6216&#34\uff1b\u516c\u4f17&#34; \u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u5b83&#39\uff1b\u5b83\u4ecd\u7136\u975e\u5e38\u5f00\u653e\u3002\n\u90a3\u91cc&#39\uff1b\u5b83\u4e5f\u6709\u70b9\u50cf\u53e6\u4e00\u79cd\u4e3b\u673a\u9632\u706b\u5899\uff0c\u8d5b\u95e8\u94c1\u514bkind\u7684Norton Defender McAfeeMalwareBytes\u3002\u8fd9\u4e9b\u5927\u591a\u57282000\u5e74\u8fc7\u65f6\u4e86\uff0c\u56e0\u4e3a\u5766\u7387\u5730\u8bf4\uff0c\u5b83\u4eec\u975e\u5e38\u607c\u4eba\u3002\u4f46\u5b83\u4e5f\u6709\u4e00\u4e9b\u4ef7\u503c\uff0c\u8fd9\u4e9b\u4ef7\u503c\u5728\u5c11\u6570\u7279\u5b9a\u7fa4\u4f53\u4e4b\u5916\u57fa\u672c\u4e0a\u88ab\u9057\u5fd8\u4e86\u3002\n\u4e3b\u673a\u9632\u706b\u5899\u7684\u4f1f\u5927\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7f51\u7edc\u673a\u67b6\u4e0a\u7684\u7b2c\u4e09\u4ee3\u667a\u80fd\u9632\u706b\u5899\u6240\u80fd\u505a\u5230\u7684\u4e8b\u60c5&#39\uff1bt\u3001 \u662f\u4e00\u79cd\u79d8\u5bc6\u6b66\u5668\uff1a\u4e3b\u673a\u9632\u706b\u5899\u4e0d\u4ec5\u53ef\u4ee5\u6839\u636e\u6570\u636e\u5305\uff0c\u8fd8\u53ef\u4ee5\u6839\u636e\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e\u5305\u7684\u8fdb\u7a0b\u6765\u505a\u51fa\u51b3\u5b9a\u3002\n\u5bf9\u4e8eWindows\u7ba1\u7406\u5458\u6765\u8bf4\uff0c\u8fd9\u79cd\u4e8b\u60c5\u5e76\u4e0d\u65b0\u9c9c\u3002Windows\u9632\u706b\u5899\uff0c\u5373\u7ba1\u7406\u754c\u9762\u7684\u6784\u5efa\u65b9\u5f0f\uff0c\u6216\u591a\u6216\u5c11\u5730\u5c06\u53d1\u9001/\u63a5\u6536\u8fc7\u7a0b\u89c6\u4e3a\u51b3\u7b56\u4e2d\u4f7f\u7528\u7684\u4e3b\u8981\u4fe1\u606f\u3002TCP\u3001UDP\u3001\u7aef\u53e3\u3001\u5b50\u7f51\uff0c\u8fd9\u4e9b\u90fd\u662f\u5fae\u5999\u7684\u6280\u672f\u8003\u8651\uff0c\u5176\u6b21\u662f\u91cd\u8981\u7684\u90e8\u5206\uff1a\u8d1f\u8d23\u4ec0\u4e48\u8fdb\u7a0b\uff1f\n\u5bf9\u4e8e\u5927\u591a\u6570Linux\u7528\u6237\u6765\u8bf4\uff0c\u8fd9\u542c\u8d77\u6765\u5f88\u964c\u751f\u3002\u3002\u3002\u5b83&#39\uff1b\u5e76\u4e0d\u662f\u8bf4Linux\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u6709\u8fd9\u79cd\u80fd\u529b\u3002iptables\u6a21\u5757&#34\uff1b\u6240\u6709\u8005&#34\uff1b\u5141\u8bb8\u60a8\u6839\u636e\u751f\u6210\u6570\u636e\u5305\u5e76\u968feveryLinux\u53d1\u884c\u7248I&#39\u4e00\u8d77\u63d0\u4f9b\u7684\u8fdb\u7a0b\u3001uid\u3001gid\u8fdb\u884c\u5339\u914d\uff1b\u6211\u8bd5\u8fc7\u4e86\u3002\u5b83&#39\uff1b\u6839\u636e\u4ec0\u4e48\u8fdb\u7a0b\u5c06\u63a5\u6536\u6570\u636e\u5305\uff08\u5373\u6b63\u5728\u76d1\u542c\uff09\u7f16\u5199\u89c4\u5219\u8981\u590d\u6742\u4e00\u4e9b\uff0c\u56e0\u4e3a\u8fd9\u65b9\u9762\u7684\u57fa\u7840\u7ba1\u9053\u6bd4\u8f83\u590d\u6742\u3002\u5b83&#39\uff1b\u8fd9\u662f\u53ef\u884c\u7684\uff0c\u4f60&#39\uff1b\u6211\u5f97\u628a\u4f60\u7684\u624b\u5f04\u810f\u4e00\u70b9\u3002\u4f46\u662f\uff0c\u8001\u5b9e\u8bf4\uff0c\u8fd9\u4e2a\u7528\u4f8b\u4e0d\u592a\u5e38\u89c1\u3002\u6b63\u5728\u4fa6\u542c\u7684\u8fdb\u7a0b\uff08\u901a\u5e38\uff09\u5728\u56fa\u5b9a\u7aef\u53e3\u4e0a\u4fa6\u542c\uff0c\u6211\u4eec\uff08\u901a\u5e38\uff09\u6839\u636e\u7aef\u53e3\u53f7\u9650\u5236\u6216\u5141\u8bb8\u5bf9\u5b83\u4eec\u7684\u8bbf\u95ee\u3002\n\u7136\u800c\u4f60\u6ca1\u6709&#39\uff1b\u8fd9\u5728Linux\u4e0a\u6839\u672c\u770b\u4e0d\u5230\u7ecf\u5e38\u4f7f\u7528\u3002\u6709\u8da3\u7684\u662f\uff0c\u5f88\u591a\u4eba\u4e0d&#39\uff1b\u6211\u751a\u81f3\u4e0d\u77e5\u9053\u5b83&#39\uff1b\u8fd9\u662f\u53ef\u80fd\u7684\u3002\u5b83&#39\uff1b\u8fd9\u4e0d\u662f\u4ed6\u4eec\u60f3\u7684&#34\uff1b\u5339\u914d\u539f\u59cbpid\u548c#34\uff1b\u662fiptables\u65e0\u6cd5&#39\uff1b\u4f46\u662f\uff0c\u4ed6\u4eec\u751a\u81f3\u4ece\u6765\u6ca1\u6709\u60f3\u8fc7\u8fd9\u662f\u4ed6\u4eec\u53ef\u80fd\u60f3\u505a\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u5927\u591a\u6570Linux\u7528\u6237\u548c\u7ba1\u7406\u5458\u5b8c\u5168\u6c89\u6d78\u5728\u4ee5\u7f51\u7edc\u4e3a\u4e2d\u5fc3\u7684\u89c2\u70b9\u4e2d\uff0c\u5c06\u9632\u706b\u5899\u89c6\u4e3a\u8003\u8651\u5730\u5740\u548c\u7aef\u53e3\u7684\u8bbe\u5907\uff0c\u800c\u4e0d\u662f\u8fdb\u7a0b\u8868\u3002\u7136\u800c\uff0ciptables\u5c31\u5728\u5185\u6838\u4e2d\u8fdb\u7a0b\u8868\u7684\u65c1\u8fb9\u3002\n\u8fd9\u8ba9\u6211\u4eec\u56de\u5230\u4e86\u90a3\u4e9b\u4e3aWindows\u8bbe\u8ba1\u7684\u7cbe\u81f4\u7684\u5546\u4e1a\u9632\u706b\u5899\uff0c\u6bcf\u5f53\u7528\u6237\u70b9\u51fb\u4efb\u4f55\u4e1c\u897f\u65f6\uff0c\u5b83\u90fd\u4f1a\u8ba9\u7528\u6237\u611f\u5230\u4e0d\u5b89\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u529f\u80fd\u4ecd\u7136\u5b58\u5728\uff0c\u5185\u7f6e\u5728Windows Defender\u9632\u706b\u5899\u4e2d\uff0c\u5177\u6709\u9ad8\u7ea7\u5b89\u5168\u6027\uff0c\u4f46\u5fae\u8f6f\u5df2\u7ecf\u5c06\u5176\u8c03\u6574\u4e3a\u4e0d\u90a3\u4e48\uff08\u4f46\u4ecd\u7136\u6709\u70b9\uff09\u4ee4\u4eba\u607c\u706b\u3002\u6709\u65f6\u5019\uff0c\u5f53\u4f60\u542f\u52a8\u4e00\u4e2a\u7a0b\u5e8f\u65f6\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u63d0\u793a\uff0c&#34\uff1b\u5141\u8bb8\u6b64\u7a0b\u5e8f\u5728\u7f51\u7edc\u4e0a\u901a\u4fe1\u5417&#34;\n\u4ec0\u4e48&#39\uff1b\u8fd9\u91cc\u771f\u6b63\u7684\u60c5\u51b5\u662f\uff0c\u7531\u4e8e\u7aef\u53e3\u77ed\u6682\uff0c\u57fa\u4e8e\u7aef\u53e3\u548c\u5730\u5740\u7684\u4f20\u7edf\u9632\u706b\u5899\u7b56\u7565\u89c6\u56fe\u4e0d\u9002\u5408\u63a7\u5236\u51fa\u7ad9\u8fde\u63a5\u3002\u5f53\u7136\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4f20\u7edf\u7684\u9632\u706b\u5899\u7b56\u7565\u6765\u9650\u5236\u51fa\u7ad9\u8fde\u63a5\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u7684\u8bed\u4e49\u6700\u7ec8\u4e0e\u7528\u6237\u5bf9\u95ee\u9898\u7684\u770b\u6cd5\u5b8c\u5168\u8131\u8282\u3002\u6211\u5e0c\u671bFirefox\u80fd\u591f\u4f7f\u7528http\uff08s\uff09\u4e0e\u4efb\u4f55\u4e1c\u897f\u8fdb\u884c\u5bf9\u8bdd\u3002\u6211\u4e0d\u5e0c\u671b\u8fd9\u4e2a\u767d\u76d2IP\u6444\u50cf\u5934\u7684Kitchy\u672c\u673a\u914d\u7f6e\u5b9e\u7528\u7a0b\u5e8f\u80fd\u591f\u4e0e\u6444\u50cf\u5934\u4e4b\u5916\u7684\u4efb\u4f55\u4e1c\u897f\u901a\u8bdd\uff0c\u800c\u6444\u50cf\u5934\u662f\u901a\u8fc7http\uff08s\uff09\u5b9e\u73b0\u7684\u3002\u6211\u4eec\u5982\u4f55\u4e3a\u6b64\u7f16\u5199\u4f20\u7edf\u7684\u9632\u706b\u5899\u7b56\u7565\uff1f\u4e0d\u592a\u5bb9\u6613\uff0c\u6240\u6709\u7684\u51fa\u754c\u4ea4\u901a\u770b\u8d77\u6765\u90fd\u4e00\u6837\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7528\u6237\uff0c\u6211\u8003\u8651\u7684\u95ee\u9898\u662f\u8fdb\u7a0b\uff0c\u800c\u4e0d\u662f\u7aef\u53e3\u3002\u563f\uff0c\u90a3&#39\uff1b\u8fd9\u5c31\u662f\u4e3b\u673a\u9632\u706b\u5899\u53ef\u4ee5\u505a\u7684\uff0c\u5982\u679c\u6211\u4eec\u8fd9\u6837\u4f7f\u7528\u5b83\u7684\u8bdd\u3002\n\u4ece\u6982\u5ff5\u4e0a\u8bb2\uff0c\u57fa\u4e8e\u8fdb\u7a0b\u7684\u4e3b\u673a\u9632\u706b\u5899\u7b56\u7565\u601d\u60f3\u7684\u6839\u6e90\u4e3b\u8981\u6765\u81ea\u4e8e\u963b\u6b62\u6076\u610f\u8f6f\u4ef6\u3001\u50f5\u5c38\u7f51\u7edc\u7b49\u7684\u613f\u671b\uff0c\u8981\u6c42\u7ba1\u7406\u5458\u5141\u8bb8\u5b83\u4eec\u751f\u6210\u7f51\u7edc\u6d41\u91cf\u3002\u8fd9\u4f7f\u5f97\u6076\u610f\u8f6f\u4ef6\u4ee5\u4e00\u79cd\u9690\u853d\u7684\u65b9\u5f0f\u6216\u591a\u6216\u5c11\u5730\u88ab\u9609\u5272\u3002\u4f46\u5b83\u6ca1\u6709&#39\uff1b\u6211\u4e0d\u4f1a\u5728\u5b9e\u8df5\u4e2d\u653e\u5f03\u5de5\u4f5c\uff0c\u539f\u56e0\u6709\u5341\u51e0\u4e2a\uff0c\u5176\u4e2d\u8bb8\u591a\u4f60\u53ef\u80fd\u5f88\u5bb9\u6613\u60f3\u8c61\u3002\n\u4e0d\u8fc7\uff0c\u6211\u8ba4\u4e3a\uff0c\u5c3d\u7ba1\u6709\u8fd9\u4e2a\u6982\u5ff5#39\uff1b\u5b83\u7684\u8bb8\u591a\u7f3a\u70b9\u5728\u4eca\u5929\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u52a0\u91cd\u8981\uff0c\u8fd9\u662f\u7531\u4e8e\u9690\u79c1\u800c\u975e\u7248\u6743\u6076\u610f\u8f6f\u4ef6\u7684\u539f\u56e0\u3002\u5927\u91cf\u5e94\u7528\u7a0b\u5e8f\u8bd5\u56fe\u901a\u8fc7\u9065\u6d4b\u548c\u91cd\u65b0\u5b9a\u4f4d\u63d0\u793a\u7ed9\u5bb6\u91cc\u6253\u7535\u8bdd\uff0c\u4f46\u5bf9\u7528\u6237\u6ca1\u6709\u5b9e\u9645\u597d\u5904\uff0c\u8fd9\u4f3c\u4e4e\u5bf9&#34\uff1b\u5c06\u7535\u6e90\u8f93\u5165\u7528\u6237&#39\uff1bs\u7684\u624b&#34\uff1b\u51b3\u5b9a\u5141\u8bb8\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u7f51\u7edc\u4e0a\u901a\u4fe1\uff0c\u4ee5\u53ca\u5728\u7cfb\u7edf\u7b56\u7565\u7ea7\u522b\u4e0e\u8c01\u901a\u4fe1\u3002\u8fd9\u5c31\u662f\u79d1\u6469\u591a\u9632\u706b\u5899\u7684\u60f3\u6cd5#39\uff1b\u73b0\u5728\u662f18\u5206\u949f\u3002\u8fd9\u4ecd\u7136\u662fWindows\u9632\u706b\u5899\u80cc\u540e\u7684\u60f3\u6cd5#39\uff1b\u5fae\u8f6f\u5f88\u5c11\u6709\u63d0\u793a\uff0c\u4f46\u53ef\u80fd\u662f\u4e3a\u4e86\u5bfb\u6c42\u67d0\u79cd\u53ef\u7528\u6027\u5e73\u8861\uff0c\u5fae\u8f6f\u5df2\u7ecf\u4ece\u6839\u672c\u4e0a\u964d\u4f4e\u4e86\u7528\u6237\u53c2\u4e0e\u7684\u7c92\u5ea6\u7ea7\u522b\uff08\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u90fd\u4f1a\u51fa\u73b0\u4e00\u6b21\u6027\u7684nothing\u6216everything\u63d0\u793a\uff09\u3002\n\u867d\u7136\u8fd9\u79cd\u7528\u6237\u4ea4\u4e92\u8fdb\u7a0b\u611f\u77e5\u7684\u51fa\u7ad9\u4e3b\u673a\u9632\u706b\u5899\u53d7\u5230\u6280\u672f\u754c\u7684\u6781\u5927\u5632\u7b11\uff0c\u4e3b\u8981\u662f\u7531\u4e8e21\u4e16\u7eaa\u672b\u7684\u5931\u8bef\uff0c\u4f46OS X\u7528\u6237\u4ea4\u4e92\u4e3b\u673a\u9632\u706b\u5899\u4ea7\u54c1Little Snitch\u7684\u5fe0\u5b9e\u7c89\u4e1d\u4f3c\u4e4e\u8868\u660e\uff0c\u8fd9\u4e9b\u5de5\u5177\u4ecd\u7136\u6709\u5176\u670d\u52a1\u7684\u76ee\u7684\u3002NetGuard\u4e3aAndroid\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\u4f3c\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4e0d\u8fc7\u56e0\u4e3aAndroid\u5b8c\u5168\u4e0d\u5411\u7528\u6237\u7a7a\u95f4\u516c\u5f00\u7f51\u7edc\u7b56\u7565\u529f\u80fd\uff0c\u6240\u4ee5\u5b83\u4f7f\u7528VPN\u57ab\u7247\u3002\u4ed6\u4eec\u53ea\u9700\u8981\u8fdb\u884c\u7528\u6237\u4ea4\u4e92\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u53ef\u4ee5&#39\uff1bDon\u2019\u4e0d\u8981\u6253\u6270\u5178\u578b\u7528\u6237\u7684\u65e5\u5e38\u751f\u6d3b\u3002\n\u771f\u7684\uff0c\u6211\u4eec\u8981\u8bf4\u7684\u662f\uff1a\u5982\u679cZoom\u5728\u6ca1\u6709\u4f60\u7684\u6388\u6743\u6216\u77e5\u60c5\u7684\u60c5\u51b5\u4e0b\u5c06\u9065\u6d4b\u6570\u636e\u53d1\u9001\u5230Facebook\uff0c\u663e\u7136\u662f\u56e0\u4e3a\u4ed6\u4eec\u4f7f\u7528\u4e86\u4e00\u4e9b\u5e93\uff0c\u800c\u6ca1\u6709&#39\uff1b\u6211\u6ca1\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0c\u4f60\u7684\u4e3b\u673a\u9632\u706b\u5899\u544a\u8bc9\u4f60\uff0c\u8fd9\u4e2a\u968f\u673a\u5e94\u7528\u7a0b\u5e8f\u5c06\u4f60\u7684\u5927\u90e8\u5206\u4e2a\u4eba\u79d8\u5bc6\u76f4\u63a5\u53d1\u9001\u5230\u9a6c\u514b\u00b7\u624e\u514b\u4f2f\u683c\uff0c\u66f4\u597d\u7684\u662f\uff0c\u5728\u4f60\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\u4e4b\u524d\uff0c\u5b83\u963b\u6b62\u4e86\u4f60\u8fd9\u4e48\u505a\uff1f\n\u4ece\u9690\u79c1\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u542c\u8d77\u6765\u51e0\u4e4e\u662f\u672a\u6765\u4e3b\u4e49\u7684\uff0c\u4f46\u6211\u4eec\u57282008\u5e74\u7528\u7684\u662f\u514d\u8d39\u5b89\u5168\u8f6f\u4ef6\uff0c\u5b83\u6709&#34\uff1b\u6d77\u76d7\u4e4b\u58f0&#34\uff1b\u901a\u77e5\u662f\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u5356\u70b9\u3002\u3002\u3002\u7528\u6237\u6ca1\u6709&#39\uff1b\u4f46\u6211\u4e0d\u660e\u767d\u8fd9\u4e00\u70b9\u3002\u4ed6\u4eec\u6ca1\u6709&#39\uff1b\u771f\u6b63\u5f97\u5230\u6b63\u786e\u7684\u4fe1\u606f\u3002\u4ed6\u4eec\u6ca1\u6709&#39\uff1b\u6211\u65e0\u6cd5\u63a7\u5236\u81ea\u5df1\u3002\u4ed6\u4eec\u53ea\u662f\u5f88\u751f\u6c14\u3002\n\u7531\u4e8eLinux IP\u5806\u6808\u7684\u4f20\u7edf\u7ba1\u9053\uff0c\u5b83&#39\uff1b\u4e3aLinux\u5f00\u53d1\u8fd9\u6837\u7684\u5de5\u5177\u975e\u5e38\u56f0\u96be\uff0c\u56e0\u4e3a\u4ed6\u4eec\u6700\u7ec8\u9700\u8981\u81ea\u5df1\u7684\u7b56\u7565\u89e3\u51b3\u65b9\u6848\u6765\u5904\u7406\u8fd9\u6837\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u7528\u6237\u5fc5\u987b\u62e5\u6709\u7f16\u8f91\u8868\u7684\u7279\u6743\uff08\u5373root\u6743\u9650\uff09\uff0c\u4f46\u7528\u6237\u9700\u8981\u4ec5\u9650\u4e8e\u7ba1\u7406\u81ea\u5df1\u8fdb\u7a0b\u7684\u89c4\u5219\u3002\u3002\u3002\u4f20\u7edf\u4e0a\uff0cLinux\u4e16\u754c\u5e76\u6ca1\u6709\u4e00\u4e2a\u597d\u7684\u3001\u6807\u51c6\u7684\u89e3\u51b3\u65b9\u6848\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6211\u5bf9firewalld\u975e\u5e38\u6124\u6012\uff08firewallctl\u4e0efirewall cmd\u7684\u5bf9\u6bd4\uff0c\u8fd9\u7edd\u5bf9\u662f\u75af\u72c2\u7684\uff09\uff0c\u4f46\u6211\u5fc5\u987b\u627f\u8ba4firewalld\u7684\u660e\u786e\u76ee\u6807\u4e4b\u4e00\u662f\u901a\u8fc7\u63d0\u4f9bdbus\u63a5\u53e3\u548c\u6700\u8fd1\u7684\u7ba1\u7406\u7b56\u7565\u6846\u67b6\u6765\u5b9e\u73b0\u8fd9\u79cd\u7528\u6237\u4ea4\u4e92\u7f51\u7edc\u7b56\u7565\u3002\u6211\u4e2a\u4eba\u8fd8\u6ca1\u6709\u770b\u5230Linux\u6982\u5ff5\u7684\u771f\u6b63\u5b9e\u73b0\uff0c\u4f46\u4f3c\u4e4e\u6784\u5efa\u5757\u5df2\u7ecf\u5b58\u5728\uff08\u6216\u8005\u81f3\u5c11\u6bd4\u8fc7\u53bb\u66f4\u591a\uff09\uff0c\u9884\u793a\u7740\u4e8b\u60c5\u4f1a\u53d1\u751f\u3002\n\u5f53\u7136\uff0c\u4e3b\u673a\u9632\u706b\u5899\u4e5f\u53ef\u4ee5\u7528\u6765\u9650\u5236\u5165\u7ad9\u6d41\u91cf\uff0c\u5927\u591a\u6570\u4eba\u8ba4\u4e3a\u5b83\u4eec\u662f\u5b9e\u73b0\u8fd9\u4e00\u76ee\u7684\u7684\u9996\u9009\u3002\u6211\u89c9\u5f97HostFirewall\u901a\u5e38\u6bd4networkfirewall\uff08\u5bf9\u63a7\u5236\u673a\u5668\u7684\u4eba\u6709\u66f4\u5927\u7684\u963b\u529b\uff09\u66f4\u96be\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u662f\u8981\u5c0f\u5fc3\u4ec0\u4e48&#39\uff1bDave Barrysaid\u8bf4\uff0c\u4eba\u4eec\u592a\u4e13\u6ce8\u4e8e\u5835\u4f4f\u95e8\u5468\u56f4\u6240\u6709\u7684\u5c0f\u7f1d\u9699\u6765\u62b5\u5fa1\u5bd2\u51b7\uff0c\u4ee5\u81f3\u4e8e\u5fd8\u8bb0\u4e86\u95e8\u4e2d\u95f4\u7684\u5927\u6d1e\u3002\u5f53\u7136\uff0c\u4f5c\u4e3a\u4e00\u79cd\u7eb5\u6df1\u9632\u5fa1\u63aa\u65bd\uff0c\u4e3b\u673a\u9632\u706b\u5899\u5728\u9650\u5236\u5165\u7ad9\u6d41\u91cf\u65b9\u9762\u7edd\u5bf9\u6709\u7528\u3002\u76ae\u5e26\uff0c\u540a\u5e26\uff0c\u80f6\u5e26\u7b49\u7b49\u3002\n\u8fd9\u91cc\u4f3c\u4e4e\u6709\u4e00\u70b9\u54f2\u5b66\u4e0a\u7684\u5206\u6b67\u3002Windows\u5728\u8bb8\u591a\u7aef\u53e3\u4e0a\u76d1\u542c\u5982\u6b64\u591a\u7684\u5185\u5bb9\uff0c\u4ee5\u81f3\u4e8e\u5fae\u8f6f\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff08\u81f3\u5c11\u5728&#34\uff1b\u516c\u5171&#34\uff1b\u7f51\u7edc\u73af\u5883\u4e0b\uff09\u4f1a\u4e3a\u5176\u63d0\u4f9b\u4e00\u4e2a\u53d7\u9650\u914d\u7f6e\u7684\u4e3b\u673a\u9632\u706b\u5899\u3002\u4e3b\u8981\u7684\u95ee\u9898\u5f80\u5f80\u662f\u4eba\u4eec\u9009\u62e9\u4e86\u9519\u8bef\u7684\u7f51\u7edc\u73af\u5883\uff0c\u6216\u8005\u5b89\u88c5\u4e86\u7b2c\u4e09\u65b9\u8f6f\u4ef6\uff0c\u800c\u7b2c\u4e09\u65b9\u8f6f\u4ef6\u7684\u76d1\u542c\u65b9\u5f0f\u53ef\u80fd\u4e0d\u5e94\u8be5\u662f&#39\uff1bt\u3001 \u53e6\u4e00\u65b9\u9762\uff0cLinux\u7528\u6237\u66f4\u503e\u5411\u4e8e\u89c2\u770b\u4ed6\u4eec\u7684&#34\uff1bnetstat&#34\uff1b\u4e3a\u4e86\u4ec0\u4e48&#39\uff1b\u6ed1\u52a8\u3001\u6740\u6b7b\u6216\u91cd\u65b0\u914d\u7f6e\u4efb\u4f55\u5b83\u4eec\u4e0d\u662f\u7684\u4e1c\u897f&#39\uff1b\u6211\u5bf9\u4f60\u7684\u5de5\u4f5c\u4e0d\u6ee1\u610f\u3002\u76f8\u5e94\u5730\uff0c\u76f4\u5230\u6700\u8fd1\uff0c\u51e0\u4e4e\u6ca1\u6709Linux\u53d1\u884c\u7248\u5bf9\u5165\u7ad9\u6d41\u91cf\u6709\u4efb\u4f55iptables\u9650\u5236\u3002\u8bb8\u591a\u4eba\u4ecd\u7136\u6ca1\u6709&#39\uff1bt\u3001 \u4e3b\u8981\u7684\u95ee\u9898\u5f80\u5f80\u662f\u90a3\u4e9b\u5b89\u88c5\u9ed8\u8ba4\u76d1\u542c0.0.0.0\u7684\u8f6f\u4ef6\u800c\u4e0d\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\u7684\u4eba\uff0c\u7136\u540e\u5c31\u8fd9\u6837\u79bb\u5f00\u4e86\uff0c\u56e0\u4e3a&#39\uff1b\u65af\u5362\u5fb7\u65af\u5361\u5c14\u3002\u65e0\u8bba\u54ea\u79cd\u65b9\u5f0f\uff0c\u901a\u8fc7\u91c7\u7528\u53e6\u4e00\u4e2a\u5e73\u53f0#39\uff1b\u8fd9\u4e5f\u662f\u6211\u4eec\u7684\u65b9\u6cd5\u3002", "note_en": "If you work in some kind of computer or IT industry, when you hear firewallyou probably think mostly about network firewalls, the 1U or so appliances thatyou install in between your delicate assets and the internet. These arego-between devices, they receive somebody else&#39;s packets and decide whether ornot to pass them on based on inscrutable rules that you have to file a ticketto get changed.\n But there&#39;s also a different world of firewalls, host-based firewalls that rundirectly on your various computers. Linux has iptables, BSD has pf, Windows hasWindows Defender Firewall with Advanced Security, apparently. No one evercommended Microsoft on their product naming. But there&#39;s more or less a hostfirewall present by default on all the major operating systems, just a wholelot of people ignore it. For Linux, historically, if you ignored it it wasusually wide open with zero rules, although some distros are switching tohaving restrictive rules by default. In Windows, by default, there&#39;s a wholelot of rules and which ones are active depends on whether you tell it a networkis &#34;private&#34; or &#34;public.&#34; In a lot of cases, it&#39;s still pretty wide open.\n There&#39;s also sort of another kind of host firewall, the Norton Defender McAfeeMalwareBytes by Symantec kind. These mostly went out of fashion in the 2000sbecause they were, frankly, irritating as shit. But there was some value inthem, value which has been largely forgotten outside of a few particularuser communities.\n The great thing about a host firewall, the thing that really makes it apowerful tool that can do things that your Third-Generation Smart Firewall inthe network rack can&#39;t, is something of a secret weapon: a host firewall canmake decisions based on not just the packet  but the process that sent or willreceive it.\n This kind of thing is not news to a Windows admin. The Windows firewall, theway the management interface is built, more or less views the sending/receivingprocess as the  primary information used in making a decision. TCP, UDP, ports,subnets, those are all fiddly technical considerations, secondary to theimportant part: what process is responsible?\n This sounds stranger to most Linux users... It&#39;s not that Linux doesn&#39;t have thiscapability. The iptables module &#34;owner&#34; allows you to match based on theprocess, uid, gid that generated the packet and has been shipped with everyLinux distro I&#39;ve tried it on. It&#39;s a little more complicated to write rulesbased on what process will  receive packets (i.e. is listening) because theunderlying plumbing for that is complicated. It&#39;s doable, you&#39;ll just have toget your hands a bit dirty. But, honestly, this use-case is a lot less common.Processes that are listening are (usually) listening on fixed ports, we(usually) restrict or permit access to them based on port numbers.\n Yet you don&#39;t see this used very often on Linux at all. Anecdotally, a lot ofpeople don&#39;t even know that it&#39;s possible. It&#39;s not that they thought &#34;match onoriginating pid&#34; was something that iptables  couldn&#39;t do, but rather, theyhad never even conceived it as something they might want to do, because mostLinux users and administrators are thoroughly steeped in a network-centric viewof firewalls as devices that think in addresses and ports, not process tablesYet iptables is right there, in the kernel, next to the process table.\n  That takes us back to those fiddly commercial firewalls for Windows that naggedthe user every time they clicked on anything. Really, this functionality isstill there, built into the Windows Defender Firewall with Advanced Security,but Microsoft has tuned it to be a lot less (but still somewhat) maddening.Sometimes when you launch a program you get a prompt, &#34;Allow this program tocommunicate on the network?&#34;\n What&#39;s really going on here is that, due to ephemeral ports, a conventionalfirewall policy view based on ports and addresses is unsuitable for the controlof outbound connections. Sure, you can use conventional firewall policy torestrict outbound connections, but the semantics of the situation end up ratherbadly divorced from how the user thinks about the problem. I would like Firefoxto be able to use http(s) to speak to just about anything. I would not like thesketchy native configuration utility for this whiteboxed IP camera to be ableto speak to anything  but the camera, which it does over http(s). How do wewrite conventional firewall policy for this? Not especially easily, theoutbound traffic all looks the same. As a user, I think about the problem interms of processes, not ports. And hey, that&#39;s what a host firewall can do, ifwe use it that way.\n Conceptually, the root of the idea of process-based host firewall policy comeslargely from a desire to deter malware, botnets, etc, by requiring that anadministrator allow them to generate network traffic. This leaves malware whichinstalls itself in a covert way more or less neutered. But it doesn&#39;t quitework out in practice, for a dozen reasons, many of which you can probablyreadily imagine.\n I would argue, though, that despite this concept&#39;s many shortcomings it is morerelevant today than it ever has been, due to reasons of privacy rather than ofoutright malware. With a large number of applications trying to phone home withtelemetry and at re-targeting tips, to no real benefit to the user, it seemsvery attractive to &#34;put the power in the user&#39;s hands&#34; to decide whichapplications are allowed to communicate on the network, and to whom, at asystem policy level. This was the idea of Comodo Firewall&#39;s eighteen promptsper minute. It is still the idea behind the Windows firewall&#39;s rare prompts,but presumably in search of some kind of usability balance Microsoft hasradically reduced the level of granularity at which the user gets involved (tomore or less a one-time nothing or everything prompt per application).\n While this kind of user-interactive process-aware outbound host firewall islargely derided by the tech community, due mostly to the missteps of the late2000s, the rather dedicated fan-base of the OS X user-interactive host firewallproduct Little Snitch would seem to show that there is still a purpose thesetools serve. NetGuard provides a similar solution for Android, although becauseAndroid exposes no network policy capability at all to userspace it makes useof a VPN shim. They just need the user interaction worked out so that theydon&#39;t annoy the ever-living daylight out of typical users.\n Really, what we are talking about is this: what if, when Zoom sent telemetry toFacebook without your authorization or knowledge apparently because they usedsome library and didn&#39;t realize it did that, your host firewall  told you thatthis random application was shipping your most personal secrets directly toMark Zuckerburg and, even better, prevented it doing so until you consideredthe question?\n It almost sounds futuristic in the privacy sense, yet we were doing this in2008 with free security software that had &#34;pirate voice&#34; notifications as ameaningful selling point... users didn&#39;t understand this, though. They didn&#39;treally get the right information. They didn&#39;t feel in control. They were justannoyed.\n Because of the traditional plumbing of the Linux IP stack, it&#39;s very difficultto develop tools like this for Linux since they end up needing their own policysolution to handle the fact that users must be privileged (i.e. root) to editiptables, but users need to restricted to managing rules for their ownprocesses... the Linux world has not traditionally had a good, standardsolution to that problem. I have a great deal of ire for firewalld (what is upwith firewallctl vs. firewall-cmd, it is absolutely insane), but I must give itthe credit that one of the explicit goals of firewalld is to enable this kindof user-interactive network policy by providing a dbus interface and playingnice with recent administrative policy frameworks. I have not personally seen areal implementation of the concept for Linux yet, but it seems like thebuilding blocks are there (or at least more than they have been in the past) soperhaps something will come about.\n Of course, host firewalls can also be used to restrict inbound traffic and mostpeople think about them as being first for that purpose. I feel that hostfirewalls are generally a worse solution to this problem than a networkfirewall (presents more resistance to someone who gains control of the machine)and just being careful about what&#39;s listening in the first place (as Dave Barrysaid, people get so fixated on caulking all the little gaps around the door tokeep the cold out that they forget about the big hole right in the middle). Butof course host firewalls can absolutely be useful to restrict inbound trafficas a defense-in-depth measure. Belt and suspenders and, um, tape, and all.\n There seems to be a bit of a philosophical divide here. Windows listens on somany ports for so many things that Microsoft ships it with a restrictivelyconfigured host firewall by default (at least in the &#34;public&#34; network context).The major problem tends to be people choosing the wrong network context orinstalling third-party software that listens in ways it probably shouldn&#39;t. Onthe other hand, Linux users are more prone to watch their &#34;netstat&#34; for what&#39;slistening and kill or reconfigure anything they aren&#39;t happy with.Correspondingly, until fairly recently almost no Linux distributions had anyiptables restrictions in inbound traffic at all. Many still don&#39;t. The majorproblem tends to be people who install software that listens on 0.0.0.0 bydefault with no authentication and then just leaving it that way because that&#39;scloudscale. Either way, the problem would be greatly mitigated by adopting theother platform&#39;s approach as well.", "posttime": "2022-02-24 21:57:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u9632\u706b\u5899,host", "title": "\u4e3b\u673a\u9632\u706b\u5899\uff082020\u5e74\uff09", "title_en": "Host Firewalls (2020)", "transed": 1, "url": "https://computer.rip/2020-05-16-host-firewalls.html", "via": "", "real_tags": ["2020", "\u9632\u706b\u5899", "host"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074747, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5b66\u4e60\u521d\u7ea7\u4ea7\u54c1\u8bbe\u8ba1\u5e08\u6240\u9700\u7684\u6280\u80fd\uff0c\u4ece\u8bbe\u8ba1\u7684\u57fa\u7840\u3001\u539f\u5219\u548c\u8981\u7d20\u5f00\u59cb\uff0c\u5168\u9762\u4e86\u89e3\u5404\u79cd\u65b9\u6cd5\u3001\u9002\u5f53\u7684\u4ea7\u54c1\u89c4\u5212\u548c\u7ba1\u7406\u3001\u7814\u7a76\u3001\u4ea4\u4e92\u548c\u4fe1\u606f\u8bbe\u8ba1\uff0c\u5e76\u4ee5\u8ddf\u8e2a\u6307\u6807\u548c\u4e0b\u4e00\u6b21\u8fed\u4ee3\u7ed3\u675f\u3002\u5b8c\u7f8e\u7684\u5b66\u751f\u662f\u771f\u6b63\u5bf9\u8bbe\u8ba1\u611f\u5174\u8da3\u7684\u4eba\uff0c\u6ca1\u6709\u5176\u4ed6\u8981\u6c42\u3002\u8fd9\u95e8\u8bfe\u7a0b\u7684\u8d39\u7528\u662f0\u6b27\u5143\uff0c\u6240\u4ee5\u4f60\u53ea\u9700\u8981\u6709\u5b66\u4e60\u7684\u6b32\u671b\u3001\u5b66\u4e60\u7684\u65f6\u95f4\u548c\u4e00\u53f0\u666e\u901a\u7684\u7535\u8111\uff08\u4e0d\u7ba1\u662fMac\u8fd8\u662fWindows\uff1b\u6211\u4eec\u6765\u5b66\u4e60\u8bbe\u8ba1\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u8f6f\u4ef6\uff09\u3002\n\u8fd9\u95e8\u8bfe\u7a0b\u5b8c\u5168\u7531\u60a8\u81ea\u884c\u7ba1\u7406\uff0c\u611f\u8c22\u6570\u767e\u4f4d\u4f5c\u8005\u4e3a\u4e92\u8054\u7f51\u63d0\u4f9b\u4e86\u4f18\u8d28\u6559\u6750\u3002\u8fd9\u610f\u5473\u7740\u4f60\u5c06100%\u8d1f\u8d23\u9605\u8bfb\u6559\u5b66\u5927\u7eb2\uff0c\u521b\u5efa\u7b14\u8bb0\uff0c\u5e76\u5728\u81ea\u6211\u8bc4\u4f30\u4e2d\u4fdd\u6301\u6279\u5224\u6027\u3002\u6b64\u5916\uff0c\u6211\u4eec\u5e0c\u671b\u4ee5\u67d0\u79cd\u65b9\u5f0f\u63d0\u4f9b\u6307\u5bfc\uff0c\u4f7f\u8fd9\u6761\u9053\u8def\u5c3d\u53ef\u80fd\u987a\u5229\u3002\n\u4e3b\u8981\u76ee\u6807\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u901a\u8fc7\u5b66\u4e60\u516c\u53f8\u6240\u9700\u7684\u5168\u90e8\u6280\u80fd\u6765\u83b7\u5f97\u521d\u7ea7\u804c\u4f4d\u3002\u6709\u4e86\u8fd9\u4e2a\uff0c\u4f60\u5c06\u80fd\u591f\u7533\u8bf7\u4ee5\u4e0b\u521d\u7ea7\u804c\u4f4d\u4e4b\u4e00\uff1a\n\u672c\u8bfe\u7a0b\u5206\u4e3a6\u4e2a\u6a21\u5757\uff0c\u517116\u95e8\u8bfe\u7a0b\uff0c\u6bcf\u4e2a\u6a21\u5757\u5206\u4e3a\u4e0d\u540c\u7684\u4e3b\u9898\u3002\u6211\u4eec\u4ece\u8bbe\u8ba1\u7684\u57fa\u7840\u3001\u8981\u7d20\u548c\u539f\u5219\u4ee5\u53ca\u5b58\u5728\u7684\u65b9\u6cd5\u5f00\u59cb\uff0c\u6700\u540e\u4ee5\u6b63\u786e\u7684\u5b9e\u65bd\u548c\u6307\u6807\u76d1\u63a7\u7ed3\u675f\uff0c\u4ee5\u9a8c\u8bc1\u6211\u4eec\u7684\u5047\u8bbe\u3002\n-&gt\uff1b\u8bbe\u8ba1\u5143\u7d20\uff1b\u539f\u5219-&gt\uff1b\u8bbe\u8ba1\u65b9\u6cd5-&gt\uff1b\u89c4\u5212\u53ca\uff1b\u7ba1\u7406\u5c42-&gt\uff1b\u7814\u7a76\u8fc7\u7a0b-&gt\uff1b\u601d\u7ef4\u4e0e\u601d\u7ef4\uff1b\u5206\u6790-&gt\uff1b\u4e92\u52a8\u8bbe\u8ba1-&gt\uff1b\u5185\u5bb9\u7b56\u7565-&gt\uff1b\u754c\u9762\u53ca\uff1b\u539f\u578b\u8bbe\u8ba1\n-&gt\uff1b\u4fe1\u606f\u8bbe\u8ba1-&gt\uff1b\u8bbe\u8ba1\u7cfb\u7edf-&gt\uff1b\u524d\u7aef\u5f00\u53d1-&gt\uff1b\u8bbe\u8ba1QA&amp\uff1b\u5ea6\u91cf\u8ddf\u8e2a-&gt\uff1b\u8bbe\u8ba1\u9886\u5bfc\u529b\u548c\uff1b\u7ba1\u7406\u5c42-&gt\uff1b\u8bbe\u8ba1\u5e08\u641c\u7d22\u5f15\u64ce\u4f18\u5316-&gt\uff1b\u8bbe\u8ba1\u804c\u4e1a\n\u8fd9\u4e9b\u8d44\u6e90\u6709\u4e09\u4e2a\u4e0d\u540c\u7684\u7ea7\u522b\uff1a\u521d\u7ea7\u3001\u4e2d\u7ea7\u548c\u9ad8\u7ea7\u3002begginer\u7ea7\u522b\u7684\u8d44\u6e90\u4fa7\u91cd\u4e8e\u5b66\u4e60\u79d1\u76ee\u7684\u57fa\u7840\u77e5\u8bc6\uff1b\u4e2d\u6863\u7684\u662f\u4e3a\u4e86\u6df1\u5165\u8be5\u5730\u533a\uff0c\u800c\u9ad8\u7ea7\u7684\u662f\u5b8c\u5168\u53ef\u9009\u7684\uff0c\u66f4\u591a\u7684\u662f\u4e3a\u4e86\u4e2d\u6863\u3002\n\u9996\u5148\u6211\u8981\u8ba1\u7b97\u603b\u7684\u5b66\u4e60\u65f6\u95f4\u3002\u4e00\u65e6\u5b8c\u6210\uff0c\u6211\u5c06\u53d1\u5e03\u4e00\u4efd\u6bcf\u5468\u5c0f\u65f6\u7684\u65f6\u95f4\u8868\u5efa\u8bae\uff0c\u4ee5\u57286\u4e2a\u6708\u30011\u5e74\u62162\u5e74\u5185\u5b8c\u6210\u8bfe\u7a0b\uff0c\u4ee5\u4fbf\u60a8\u8bbe\u5b9a\u76ee\u6807\u5e76\u5b9e\u73b0\u8be5\u804c\u4f4d\u3002\n\u55e8\uff0c\u6211&#39\uff1b\u6211\u662f\u7c73\u6d1b\uff01\ud83d\udc9c  \u6211&#39\uff1b\u6211\u662f\u4e00\u540d\u897f\u73ed\u7259\u8bbe\u8ba1\u5e08\uff0c\u5728@idealista\u5de5\u4f5c\uff0c\u8fd9\u662f\u6700\u5927\u7684\u623f\u5730\u4ea7\u95e8\u6237\u7f51\u7ad9\uff0c\u6bcf\u6708\u8bbf\u95ee\u91cf\u8d85\u8fc76000\u4e07\u6b21\u3002\u6211\u70ed\u7231\u5236\u4f5c\u4ea7\u54c1\uff0c\u5728\u4ea7\u54c1\u8bbe\u8ba1\u9886\u57df\u67094\u5e74\u7684\u7ecf\u9a8c\uff0c\u5728\u5e73\u9762\u8bbe\u8ba1\u9886\u57df\u4e5f\u6709\u51e0\u5e74\u7684\u7ecf\u9a8c\u3002\u6211&#39\uff1b\u6211\u4e00\u76f4\u60f3\u652f\u6301\u6240\u6709\u8ff7\u5931\u65b9\u5411\u7684\u8bbe\u8ba1\u5e08\uff0c\u52aa\u529b\u5f15\u5bfc\u4ed6\u4eec\u8d70\u4e0a\u6b63\u786e\u7684\u9053\u8def\uff0c\u800c\u4e0d\u662f\u88ab\u52a3\u8d28\u4fe1\u606f\u6240\u6c61\u67d3\uff0c\u8fd9&#39\uff1b\u8fd9\u5c31\u662f\u6211\u521b\u5efa\u8fd9\u4e2a\u7f51\u7ad9\u7684\u539f\u56e0\uff0c\u8fd9\u6837\u4eba\u4eec\u5c31\u53ef\u4ee5\u7528\u514d\u8d39\u8d44\u6e90\u5b66\u4e60\uff0c\u53d1\u73b0\u65b0\u4ea7\u54c1\uff0c\u53ca\u65f6\u4e86\u89e3\u65f6\u4e8b\u901a\u8baf\ud83d\udc33", "note_en": "Learn the skills a junior product designer needs, starting from the basics, the principles and elements of design, taking a comprehensive tour through methodologies and proper product planning and management, research, interaction and information design, and ending with tracking metrics and next iterations.  The perfect student is someone who is really interested in design, there is no other requirement. The cost of the course is 0\u20ac, so you will only need a desire to learn, time available to study and a normal computer (regardless if it is Mac or Windows; here we have come to study design, not to use software).\n This course is entirely self-managed by you, thanks to hundreds of authors who have contributed quality teaching material to the internet.  This means that you will be 100% responsible for reading the syllabus, creating your notes and being critical in your self-assessment. Further on, we would like in one way or another to offer mentoring to make this path as smooth as possible for you.\n The main objective is simple, that you get a junior position by learning the whole tree of skills that companies require. With this, you will be able to apply for one of the following junior positions:\n The course is divided into 6 blocks of 16 subjects, each divided into different topics. We start with the basics, the elements and principles of design and what methodologies exist, and end with the correct implementation and monitoring of metrics, verifying our hypothesis.\n -&gt; \u00a0 Design Elements &amp; Principles -&gt; \u00a0 Design Methods -&gt; \u00a0 Planning &amp; Management -&gt; \u00a0 Research Process -&gt; \u00a0 Ideation &amp; Analysis -&gt; \u00a0 Interaction Design -&gt; \u00a0 Content Strategy -&gt; \u00a0 Interface &amp; Prototyping Design\n -&gt; \u00a0 Information Design -&gt; \u00a0 Design Systems -&gt; \u00a0 Front-end Development -&gt; \u00a0 Design QA &amp; Metric Tracking -&gt; \u00a0 Design Leadership &amp; Management -&gt; \u00a0 SEO for Designers -&gt; \u00a0 Design Career\n The resources have three different levels: Beginner, Medium and Advanced. The begginer level resources focus on learning the basics of the subjects; the medium ones are geared towards going deeper into the area, while the advanced ones are entirely optional and more for a Mid profile.\n First I have to calculate the total learning time. Once done, I will publish a schedule proposal for hours per week to complete the course in 6 months, 1 year or 2 years, in order for you to set a goal and achieve that job position.\n Hi, I&#39;m  Millo! \ud83d\udc9c  I&#39;m a Spanish designer working @idealista, the biggest real estate portal with more than 60 million monthly visits, who loves making product with 4 years of experience in the product design sector along with several more years in graphic design.   I&#39;ve always wanted to support all those designers who are lost, trying to lead them on the right path and not get contaminated with bad quality information, that&#39;s why I created this website, so people can learn with free resources, discover new products and stay up to date with the newsletter \ud83d\udc33", "posttime": "2022-02-24 21:27:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u4ea7\u54c1\u8bbe\u8ba1,product", "title": "\u4ea7\u54c1\u8bbe\u8ba1\u8bfe\u7a0b", "title_en": "Product design course", "transed": 1, "url": "https://www.uxdatabase.io/free-product-design-course", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u4ea7\u54c1\u8bbe\u8ba1", "product"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074746, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5bf9\u4e8e\u8003\u53e4\u5b66\u5bb6\u6765\u8bf4\uff0c\u8fc7\u53bb\u53ef\u80fd\u662f\u4e00\u4e2a\u6c89\u9ed8\u7684\u5730\u65b9\u3002\u5c3d\u7ba1\u627e\u5230\u4e86\u53e4\u4eba\u7684\u9057\u7269\uff0c\u5206\u6790\u4e86\u4ed6\u4eec\u7684\u996e\u98df\uff0c\u751a\u81f3\u7814\u7a76\u4e86\u4ed6\u4eec\u7684\u9aa8\u9abc\uff0c\u5b66\u8005\u4eec\u8fd8\u662f\u53ea\u80fd\u60f3\u8c61\u4ed6\u4eec\u7684\u58f0\u97f3\u3002\u8bed\u8a00\u5b66\u5bb6\u7814\u7a76\u53e4\u4ee3\u53e3\u8bed\u53d1\u97f3\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u8ffd\u8e2a\u62fc\u5199\u7684\u53d8\u5316\uff0c\u5c24\u5176\u662f\u5728\u975e\u7cbe\u82f1\u6587\u672c\u4e2d\u3002\u5251\u6865\u5927\u5b66\u7684\u53e4\u5178\u4e3b\u4e49\u8005Tim Whitmarsh\u8bf4\uff1a\u201c\u5728\u6d41\u884c\u6587\u672c\u4e2d\uff0c\u62fc\u5199\u66f4\u5bb9\u6613\u9002\u5e94\u5355\u8bcd\u7684\u53d1\u97f3\uff0c\u800c\u4e0d\u592a\u53ef\u80fd\u88ab\u4e00\u4e9b\u4fdd\u5b88\u7684\u2018\u6b63\u786e\u62fc\u5199\u2019\u6240\u675f\u7f1a\u3002\u201d\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\u67e5\u770b\u73b0\u5b58\u7684\u5404\u79cd\u6587\u672c\uff0c\u5305\u62ec\u8bd7\u6b4c\uff0c\u4ee5\u786e\u5b9a\u5b83\u4eec\u53ef\u80fd\u63ed\u793a\u7684\u4eba\u4eec\u8bf4\u8bdd\u7684\u65b9\u5f0f\u3002\u60e0\u7279\u9a6c\u4ec0\u6700\u8fd1\u68c0\u67e5\u4e86\u6574\u4e2a\u7f57\u9a6c\u5e1d\u56fd\u53d1\u73b0\u7684\u6587\u7269\uff0c\u5305\u62ec20\u9897\u5b9d\u77f3\u548c\u897f\u73ed\u7259\u5361\u5854\u8d6b\u7eb3\u4e00\u6240\u623f\u5b50\u91cc\u7684\u4e00\u5e45\u6d82\u9e26\uff0c\u6240\u6709\u8fd9\u4e9b\u90fd\u5305\u542b\u4e00\u9996\u6d41\u884c\u7684\u5e0c\u814a\u77ed\u8bd7\u3002\u4ed6\u7684\u7ed3\u8bba\u53ef\u80fd\u65e0\u6cd5\u63d0\u4f9b\u76f4\u63a5\u8bc1\u636e\uff0c\u8bc1\u660e\u4eba\u4eec\u8bf4\u8bdd\u7684\u4e00\u79cd\u7279\u6b8a\u65b9\u5f0f\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5728\u4eca\u5929\u7684\u82f1\u8bed\u548c\u8bb8\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u4ecd\u7136\u5b58\u5728\uff0c\u6bd4\u4e4b\u524d\u5df2\u77e5\u7684\u65e9\u4e86\u51e0\u4e2a\u4e16\u7eaa\u3002\n\u60e0\u7279\u9a6c\u4ec0\u8bf4\uff1a\u201c\u4e2d\u4e16\u7eaa\u4ee5\u524d\uff0c\u8bb8\u591a\u2018\u53e4\u5178\u2019\u6587\u5316\u7684\u8bd7\u6b4c\u4f20\u7edf\uff0c\u6bd4\u5982\u73b0\u5728\u6b27\u6d32\u7684\u5e0c\u814a\u8bed\u548c\u62c9\u4e01\u8bed\uff0c\u4ee5\u53ca\u66f4\u8fdc\u7684\u4e1c\u65b9\u7684\u963f\u62c9\u4f2f\u8bed\u548c\u6ce2\u65af\u8bed\uff0c\u4f7f\u7528\u7684\u8bd7\u6b4c\u5f62\u5f0f\u4e0e\u6211\u4eec\u4eca\u5929\u6240\u77e5\u9053\u7684\u8bd7\u6b4c\u5b8c\u5168\u4e0d\u540c\u3002\u201d\u3002\u5728\u6b64\u4e4b\u524d\uff0c\u8bd7\u6b4c\u9075\u5faa\u53e4\u5178\u683c\u5f8b\u7684\u89c4\u5219\uff0c\u5373\u8bd7\u6b4c\u7684\u683c\u5f8b\u6216\u8282\u594f\u53d6\u51b3\u4e8e\u8bf4\u51fa\u8bd7\u6b4c\u957f\u77ed\u97f3\u8282\u7684\u65f6\u95f4\u957f\u5ea6\u3002\u201c\u60f3\u60f3\u2018\u5e0c\u671b\u2019\u548c\u2018\u8df3\u8dc3\u2019\uff0c\u201d\u60e0\u7279\u9a6c\u4ec0\u8bf4\u3002\u8fd9\u79cd\u957f\u77ed\u97f3\u8282\u7684\u89c4\u5219\u6a21\u5f0f\u88ab\u79f0\u4e3a\u6570\u91cf\u97f5\u5f8b\uff0c\u4e0d\u540c\u4e8e\u4e2d\u4e16\u7eaa\u53ca\u4ee5\u540e\u7684\u8d28\u91cf\u97f5\u5f8b\u6216\u91cd\u97f3\u97f5\u5f8b\u3002\u4f5c\u4e3a\u540e\u8005\u7684\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bd5\u7740\u80cc\u8bf5\u201c\u95ea\u70c1\uff0c\u95ea\u70c1\uff0c\u5c0f\u661f\u661f\u201d\uff0c\u5e76\u6ce8\u610f\u4e00\u4e9b\u97f3\u8282\u662f\u5982\u4f55\u91cd\u8bfb\u7684\u201c\u95ea\u70c1\u201d\uff0c\u201c\u5c0f\u201d\u548c\u201c\u661f\u661f\u201d\u4e2d\u7684\u201c\u53cc\u80de\u80ce\u201d\uff0c\u201c\u674e\u201d\uff0c\u6216\u201c\u739b\u4e3d\u6709\u4e00\u53ea\u5c0f\u7f8a\u7f94\u201d\uff0c\u5176\u4e2d\u201c\u9a6c\u201d\u3001\u201c\u54c8\u201d\u3001\u201c\u674e\u201d\u548c\u201c\u7f8a\u7f94\u201d\u662f\u91cd\u8bfb\u7684\u3002\n\u60e0\u7279\u9a6c\u4ec0\u8fd8\u8ba4\u4e3a\uff0c\u8fd9\u9996\u5e7f\u4e3a\u4f20\u8bf5\u7684\u8bd7\u8bc1\u660e\u4e86\u6d41\u884c\u6587\u5316\u4e0e\u65f6\u5c1a\u5ba3\u8a00\u5f62\u5f0f\u7684\u4e66\u9762\u6587\u5b57\u4e4b\u95f4\u7684\u975e\u51e1\u4ea4\u53c9\u3002\u201c\u4ece\u897f\u73ed\u7259\u5230\u4f0a\u62c9\u514b\uff0c\u6bcf\u4e2a\u4eba\u90fd\u60f3\u8981\u8fd9\u4e2a\u5c0f\u5b9d\u77f3\u548c\u5b83\u7684\u8bd7\uff0c\u201d\u4ed6\u8bf4\u3002\u8fd9\u9996\u8bd7\u5728\u6574\u4e2a\u5e1d\u56fd\u5e7f\u88a4\u7684\u571f\u5730\u4e0a\u59cb\u7ec8\u4fdd\u6301\u7740\u60ca\u4eba\u7684\u4e00\u81f4\u6027\uff0c\u4f3c\u4e4e\u5438\u5f15\u4e86\u4e00\u4e2a\u6709\u6587\u5316\u4f46\u5730\u4f4d\u4e0d\u9ad8\u7684\u4eba\u3002\u8fd9\u4e9b\u5b9d\u77f3\u7531\u73bb\u7483\u818f\u5236\u6210\uff0c\u8bed\u8a00\u662f\u65b9\u8a00\uff0c\u4e0d\u542b\u5f62\u5bb9\u8bcd\u6216\u540d\u8bcd\u3002\u60e0\u7279\u9a6c\u4ec0\u8bf4\uff1a\u201c\u8fd9\u662f\u4f60\u80fd\u505a\u5230\u7684\u6700\u7b80\u5355\u7684\u4e8b\u60c5\u3002\u201d\u3002\u201c\u8fd9\u662f\u4e00\u79cd\u6e38\u4e50\u573a\u7684\u8c08\u8bdd\uff0c\u5f00\u59cb\u4e8e\u8c08\u8bdd\u7684\u4e2d\u95f4\uff0c\u8282\u594f\u5f88\u5bb9\u6613\u518d\u73b0\uff0c\u542c\u8d77\u6765\u50cf\u67e5\u514b\u00b7\u8d1d\u91cc\u7684\u300aJohnny B. Goode\u300b\u7684\u4e3b\u8981\u8bd7\u53e5\u3002\u201d\u8fd9\u9996\u8bd7\u7684\u6d41\u884c\u548c\u6df1\u8fdc\u4e5f\u6709\u4e00\u4e2a\u7ecf\u6d4e\u5c42\u9762\u3002\u4ed6\u8bf4\uff1a\u201c\u7f57\u9a6c\u5e1d\u56fd\u521b\u9020\u4e86\u4eba\u4eec\u4ece\u672a\u6709\u8fc7\u7684\u8d22\u5bcc\u548c\u673a\u4f1a\uff0c\u4ee5\u53ca\u4ee5\u524d\u6240\u672a\u6709\u7684\u65b9\u5f0f\u8d2d\u4e70\u6587\u5316\u3001\u65c5\u884c\u548c\u5efa\u7acb\u7f51\u7edc\u7684\u673a\u4f1a\u3002\u201d\u3002\u201c\u8fd9\u4e2a\u7269\u4f53\u50cf\u91ce\u706b\u4e00\u6837\u8513\u5ef6\uff0c\u56e0\u4e3a\u5e1d\u56fd\u662f\u4e00\u6761\u4fe1\u606f\u9ad8\u901f\u516c\u8def\u3002\u201d", "note_en": "The past can be a silent place for archaeologists. Despite recovering the belongings of ancient people, analyzing their diets, and even studying their bones, scholars can only imagine how they might have sounded. One way philologists investigate how spoken words were pronounced in antiquity is by tracing changing spellings, especially in non-elite texts. \u201cIn popular texts, spelling is more likely to be adapted to the sound of the word and less likely to be tethered to some conservative idea of \u2018proper\u2019 spelling,\u201d says classicist Tim Whitmarsh of the University of Cambridge. Another approach involves looking at surviving texts of all kinds, including poetry, to identify what they might reveal about how people spoke. Whitmarsh recently examined artifacts found across the Roman Empire, including 20 gemstones and a graffito on painted plaster in a house in Cartagena, Spain, all of which contain a popular short poem written in Greek. His conclusions may provide scarce direct evidence of a particular way that people spoke\u2014one that persists in English and many other languages today\u2014centuries earlier than previously known.\n    \u201cBefore the Middle Ages, many poetic traditions of the \u2018classical\u2019 cultures, such as Greek and Latin in what is now Europe, and Arabic and Persian further east, used a form of verse that was entirely different from anything we know of as poetry today,\u201d Whitmarsh says. Up to that time, poems followed the rules of classical meter in which the meter, or rhythm, of a poem is determined by the length of time it takes to say the verse\u2019s long and short syllables. \u201cThink \u2018hope\u2019 versus \u2018hop,\u2019\u201d says Whitmarsh. This regular pattern of short and long syllables is known as quantitative meter, and differs from the qualitative, or stressed, meter of the Middle Ages and beyond. As an example of the latter, try reciting \u201cTwinkle, Twinkle, Little Star,\u201d and note how some syllables are stressed\u2014the \u201ctwin\u201d in \u201ctwinkle,\u201d \u201cli\u201d in \u201clittle,\u201d and \u201cstar,\u201d\u2014or \u201cMary Had a Little Lamb,\u201d where \u201cMar,\u201d \u201cha,\u201d \u201cli,\u201d and \u201clamb\u201d are stressed.\n        Whitmarsh also believes the widely recited poem is evidence of an extraordinary crossover between popular culture and the written word in the form of a fashion statement. \u201cFrom Spain to Iraq, everyone wants this little gemstone and its poem,\u201d he says. The poem remained remarkably consistent through time and across the empire\u2019s vast expanse, and seems to have appealed to a literate, but not especially high-status, sort of person. The gemstones are made of glass paste and the language is vernacular and includes no adjectives or nouns. \u201cIt\u2019s about as simple as you can get,\u201d says Whitmarsh. \u201cIt\u2019s a kind of playground chat that starts in the middle of a conversation and has an easily reproducible rhythm that sounds like the main verse of Chuck Berry\u2019s \u2018Johnny B. Goode.\u2019\u201d There was also an economic dimension to the poem\u2019s popularity and reach. \u201cThe Roman Empire produced wealth and opportunity that people had never had before and the chance to buy into culture and to travel and network in a way never before possible,\u201d he says. \u201cThis object spread like wildfire because the empire was an information superhighway.\u201d", "posttime": "2022-02-24 21:26:45", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bd7\u610f,poetic,\u8bd7\u6b4c", "title": "\u8bd7\u610f\u7684\u653e\u7eb5", "title_en": "Poetic License", "transed": 1, "url": "https://www.archaeology.org/issues/459-2203/digs/10346-digs-roman-stressed-meter-poetry", "via": "", "real_tags": ["\u8bd7\u610f", "poetic", "\u8bd7\u6b4c"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074745, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u4e2a\u535a\u5ba2\u4e2d\uff0c\u6211\u4eec\u7528SHARK\u6f14\u793a\u4e86PyTorch\u5728Apple M1Max GPU\u4e0a\u7684\u8bad\u7ec3\u548c\u63a8\u7406\uff0c\u53ea\u9700\u51e0\u884c\u989d\u5916\u7684\u4ee3\u7801\uff0c\u6027\u80fd\u4f18\u4e8eApple\u7684Tensorflow metal\u63d2\u4ef6\u3002\u5c3d\u7ba1\u82f9\u679c\u5df2\u7ecf\u901a\u8fc7\u73b0\u5728\u4e0d\u53d7\u6b22\u8fce\u7684Tensorflow macos\u63d2\u4ef6\u548c\u66f4\u65b0\u7684Tensorflow metal\u63d2\u4ef6\u53d1\u5e03\u4e86\u5bf9Tensorflow\u7684GPU\u652f\u6301\uff0c\u4f46\u6700\u6d41\u884c\u7684\u673a\u5668\u5b66\u4e60\u6846\u67b6PyTorch\u5728\u82f9\u679c\u7845\u4e0a\u7f3a\u4e4fGPU\u652f\u6301\u3002\u76f4\u5230\u73b0\u5728\u3002\nSHARK\u57fa\u4e8eMLIR\u548cIREE\u6784\u5efa\uff0c\u53ef\u4ee5\u65e0\u7f1d\u7784\u51c6\u5404\u79cd\u786c\u4ef6\u3002\u7531\u4e8eSHARK\u4e3a\u6bcf\u4e2a\u5de5\u4f5c\u8d1f\u8f7d\u52a8\u6001\u751f\u6210\u5185\u6838\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u79fb\u690d\u5230\u65b0\u7684\u4f53\u7cfb\u7ed3\u6784\uff0c\u5982M1Max\uff0c\u800c\u65e0\u9700\u4f9b\u5e94\u5546\u63d0\u4f9b\u7684\u624b\u5199/\u624b\u52a8\u8c03\u6574\u5e93\u3002\n\u70b9\u5934ai\u589e\u52a0\u4e86AMD GPU\u652f\u6301\uff0c\u80fd\u591f\u91cd\u65b0\u5b9a\u4f4dAMD MI100/MI200\u7c7b\u8bbe\u5907\u7684\u4ee3\u7801\u751f\u6210\uff0c\u5e76\u5c06\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u4eceNvidia V100/A100\u65e0\u7f1d\u8f6c\u79fb\u5230AMD MI100\u3002\u5728\u8fc7\u53bb\uff0c\u6211\u4eec\u5728Intel Alderlake CPU\u4e0a\u5c55\u793a\u4e86\u6bd4Intel MKL\u548cApache/OctoML TVM\u66f4\u597d\u7684codegen\uff0c\u5e76\u4f18\u4e8eNvidia\u7684cuDNN/cuBLAS/CUTLASS\uff0c\u540e\u8005\u88abOnnxruntime\u3001Pytorch/Torchscript\u548cTensorflow/XLA\u7b49ML\u6846\u67b6\u4f7f\u7528\u3002\u4eca\u5929\uff0c\u6211\u4eec\u5c06\u5c55\u793aSHARK\u5728M1Max\u4e2d\u7784\u51c6\u82f9\u679c\u768432\u6838GPU\uff0c\u5e76\u4f7f\u7528PyTorch\u6a21\u578b\u8fdb\u884c\u63a8\u7406\u548c\u8bad\u7ec3\u3002\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u559c\u6b22PyTorch\uff0c\u60f3\u5728\u65b0\u7684Apple Silicon Macbook Pro\u4e2d\u4f7f\u752832\u4e2aGPU\u5185\u6838\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002\n\u5728\u6211\u4eec\u7684\u5b9e\u9a8c\u4e2d\uff0c\u6211\u4eec\u5c06\u4f7f\u752814\u82f1\u5bf8\u7684MacBook Pro\u548c64GB\u5185\u5b58\u7684Apple M1 Max\u3002\u6211\u4eec\u4e5f\u572816\u82f1\u5bf8MacBook Pro\u4e0a\u8fd0\u884c\u4e86\u76f8\u540c\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5e76\u6ce8\u610f\u5230\u4e86\u76f8\u540c\u7684\u6027\u80fd\uff0c\u800c\u4e14\u5728\u6211\u4eec\u7684\u57fa\u51c6\u6d4b\u8bd5\u671f\u95f4\uff0c\u4e24\u8005\u90fd\u4e0d\u4f1a\u53d1\u751f\u70ed\u8282\u6d41\u3002\n\uff08\u57fa\u7840\uff09anush@MacBook-\u652f\u6301\u8303\u4f8b%/\u9ca8\u9c7c\u957f\u51f3\u2014\u2014\u6a21\u5757\u6587\u4ef6=minilm_jan6_m1max\u3002vmfb\u2014\u2014\u8f93\u5165\u51fd\u6570=\u9884\u6d4b\u2014\u2014\u51fd\u6570\u8f93\u5165=1x128xi32\u2014\u2014\u51fd\u6570\u8f93\u5165=1x128xi32\u2014\u2014\u51fd\u6570\u8f93\u5165=1x128xi32\u2014\u2014\u57fa\u51c6\u6d4b\u8bd5\u91cd\u590d\u6b21\u6570=102022-02-20T10:17:55-08:00\u8fd0\u884c/shark benchRun on\uff0810 X 24.1214 MHz CPU\uff09CPU\u7f13\u5b58\uff1aL1\u6570\u636e64\u5343\u5b57\u8282\uff08x10\uff09L1\u6307\u4ee4128\u5343\u5b57\u8282\uff08x10\uff09L2\u7edf\u4e004096\u5343\u5b57\u8282\uff08x5\uff09\u5e73\u5747\u8d1f\u8f7d\uff1a2.14,1.91\uff0c1.81----------------------------------------------------------------\u57fa\u51c6\u65f6\u95f4CPU\u8fed\u4ee3----------------------------------------------------------------------BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.7\u6beb\u79d21.39\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.5\u6beb\u79d21.34\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.7\u6beb\u79d21.43\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.6\u6beb\u79d21.30\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.5\u6beb\u79d21.33\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.7\u6beb\u79d21.46\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.6\u6beb\u79d21.31\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.5\u6beb\u79d21.33\u6beb\u79d258BM_\u9884\u6d4b/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f611.7\u6beb\u79d21.46\u6beb\u79d258BM_\u9884\u6d4b/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f611.6ms 1.30ms 58BM_\u9884\u6d4b/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u5e73\u574711.6ms 1.36ms 10BM_\u9884\u6d4b/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u4e2d\u4f4d\u657011.6ms 1.34ms 10BM_\u9884\u6d4b/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u6807\u51c6\u5dee0.074ms 0.063ms 10BM_\u9884\u6d4b/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6cv 0.64%4.65%10\uff08\u57fa\u6570\uff09anush@MacBook-\u4e13\u4e1a\u8303\u4f8b%\n\u53c2\u6570\uff1a\u540d\u79f0\u7a7a\u95f4\uff08models=[&#39\uff1bmicrosoft/MiniLM-L12-H384-uncased&#39\uff1b]\uff0c\u6a21\u578b#\u6e90=&#39\uff1b\u7b2c39\u9875\uff1b\uff0cmodel#class=None\uff0c\u5f15\u64ce=[&#39\uff1btensorflow&#39\uff1b]\uff0ccache_dir=&#39/cache#u\u6a21\u578b&#39\uff1b\uff0connx_dir=&#39/onnx#U\u578b\u53f7&#39\uff1b\uff0c\u4f7f\u7528gpu=True\uff0c\u7cbe\u5ea6=&lt\uff1b\u7cbe\u786e\u6d6e\u52a832:&#39\uff1bfp32\u548c#39&gt\uff1b\uff0cverbose=False\uff0coverwrite=False\uff0coptimize_onnx=False\uff0cvalidate_onnx=False\uff0cfusion_csv=&#39\uff1b\u878d\u5408csv\u548c#39\uff1b\uff0c\u7ec6\u8282_csv=#39\uff1b\u7ec6\u8282csv\u548c#39\uff1b\uff0c\u7ed3\u679c_csv=&#39\uff1b\u540e\u679ccsv\u548c#39\uff1b\uff0c\u8f93\u5165\u8ba1\u6570=[1]\uff0c\u6d4b\u8bd5\u6b21\u6570=1000\uff0c\u6279\u91cf\u5927\u5c0f=[1]\uff0c\u5e8f\u5217\u957f\u5ea6=[128]\uff0c\u7981\u7528\u7aef\u53e3io\u7ed1\u5b9a=\u5047\uff0c\u7ebf\u7a0b\u6570=[10]\uff09\u91d1\u5c5e\u8bbe\u5907\u8bbe\u7f6e\u4e3a\uff1aApple M1 MaxsystemMemory:64.00 GBmaxCacheSize:24.00 GBAll model\u68c0\u67e5\u70b9\u5c42\u5728\u521d\u59cb\u5316TFModel\u65f6\u4f7f\u7528\u3002TFBertModel\u7684\u6240\u6709\u5c42\u90fd\u662f\u4ece\u4f4d\u4e8emicrosoft/MiniLM-L12-H384-uncased\u7684\u6a21\u578b\u68c0\u67e5\u70b9\u521d\u59cb\u5316\u7684\u3002\u5982\u679c\u60a8\u7684\u4efb\u52a1\u4e0e\u68c0\u67e5\u70b9\u6a21\u578b\u8bad\u7ec3\u7684\u4efb\u52a1\u7c7b\u4f3c\uff0c\u5219\u65e0\u9700\u8fdb\u4e00\u6b65\u8bad\u7ec3\u5373\u53ef\u4f7f\u7528TFBertModel\u8fdb\u884c\u9884\u6d4b\u3002\u5728microsoft/MiniLM-L12-H384-uncased\u4e0a\u4f7f\u7528\u8f93\u5165\u5f62\u72b6[1128]\u8fd0\u884cTensorflow39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u53d1\u52a8\u673a\u548c\u53d1\u52a8\u673a\u548c39\uff1b39\uff1b39\uff1b\u53d1\u52a8\u673a\u548c39\uff1b39\uff1b\u53d1\u52a8\u673a\u548c39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c\u4e0e\u4e0e\u4e0e39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b39\uff1b\u7248\u672c\u548c\u548c\u548c\u548c\u548c\uff1b#39\uff1bfp32\u548c#39\uff1b&#39\uff1bio#U\u7ed1\u5b9a\u548c#39\uff1b&#39\uff1b&#39\uff1b&#\u6a21\u578b#\u540d\u79f0\u548c#39\uff1b&#39\uff1bmicrosoft/MiniLM-L12-H384-uncated\u548c#39\uff1b&#\u8f93\u5165\u548c#39\uff1b\uff1a1\u548c#39\uff1b\u7ebf\u7a0b\u548c#10, &#39;\u6279\u91cf\u5927\u5c0f&#39\uff1b\uff1a1, &#39;\u5e8f\u5217\u957f\u5ea6&#39\uff1b\uff1a128, &#39;\u65e5\u671f\u65f6\u95f4&#39\uff1b\uff1a&#39;2022-02-21 07:48:04.965312&#39;, &#39;\u6d4b\u8bd5\u6b21\u6570&#39\uff1b\uff1a1000, &#39;\u5ef6\u8fdf\u53d8\u5316&#39\uff1b\uff1a&#39;0.00&#39;, &#39;\u6f5c\u4f0f\u671f90%\u548c39%&#39;19.25&#39;, &#39;\u6f5c\u4f0f\u671f95%\u548c39%&#39;22.10&#39;, &#39;\u6f5c\u4f0f\u671f99_39\uff1b\uff1a&#39;23.14&#39;, &#39; \u5e73\u5747\u5ef6\u8fdf(\u6beb\u79d2#39\uff1b\uff1a&#39;16.99&#39;, &#39;QPS&#39\uff1b\uff1a&#39;58.85&#39;}\n\u5728\u6211\u4eec\u7684\u6d4b\u8bd5\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230Tensorflow\u91d1\u5c5e\u63d2\u4ef6\u4f3c\u4e4e\u65e0\u6cd5\u6709\u6548\u5730\u5c06\u53cd\u5411\u56fe\u5f62\u5378\u8f7d\u5230GPU\u4e0a\u3002\u7531\u4e8eTensorflow metal\u662f\u4e00\u4e2a\u4ec5\u4e8c\u8fdb\u5236\u7248\u672c\uff0c\u6211\u4eec\u65e0\u6cd5\u8c03\u8bd5\u5b83\u3002\u540c\u6837\u7684Tensorflow\u5b9e\u73b0\u53ef\u4ee5\u5f88\u597d\u5730\u5378\u8f7d\u5230CUDA GPU\u4e0a\u3002\n\uff08\u57fa\u7840\uff09anush@MacBook-\u652f\u6301\u8303\u4f8b%/shark bench\u2014\u2014\u6a21\u5757\u6587\u4ef6=bert_training_feb17\u3002vmfb\u2014\u2014\u51fd\u6570\u8f93\u5165=1x512xi32\u2014\u2014\u51fd\u6570\u8f93\u5165=1x512xi32\u2014\u2014\u51fd\u6570\u8f93\u5165=1x512xi32\u2014\u2014\u51fd\u6570\u8f93\u5165=1xi32\u2014\u2014\u8f93\u5165\u51fd\u6570=\u5b66\u4e60\u2014\u2014\u57fa\u51c6\u6d4b\u8bd5\u91cd\u590d\u6b21\u6570=102022-02-20T23:04:22-08:00\u8fd0\u884c/\uff0810 X 24.2416 MHz CPU\uff09CPU\u7f13\u5b58\u4e0a\u7684shark benchRun\uff1aL1\u6570\u636e64\u5343\u5b57\u8282\uff08x10\uff09L1\u6307\u4ee4128\u5343\u5b57\u8282\uff08x10\uff09L2\u7edf\u4e004096\u5343\u5b57\u8282\uff08x5\uff09\u5e73\u5747\u8d1f\u8f7d\uff1a2.03,2.53\uff0c2.31----------------------------------------------------------------\u57fa\u51c6\u65f6\u95f4CPU\u8fed\u4ee3----------------------------------------------------------------------BM_\u5b66\u4e60/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f6104\u6beb\u79d216.2\u6beb\u79d25BM_\u5b66\u4e60/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f6104\u6beb\u79d216.1\u6beb\u79d25BM_\u5b66\u4e60/\u5904\u7406\u65f6\u95f4/\u5b9e\u65f6105\u6beb\u79d215.3\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6104\u6beb\u79d216.0\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6103\u6beb\u79d215.2\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6105\u6beb\u79d216.9\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6104\u6beb\u79d215.5\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6104\u6beb\u79d214.9\u6beb\u79d25BM\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6105\u6beb\u79d217.4\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6105\u6beb\u79d215.7\u6beb\u79d25BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u5e73\u5747104\u6beb\u79d215.9\u6beb\u79d210BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u5e73\u5747104\u6beb\u79d215.8\u6beb\u79d210BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u6807\u51c6\u5dee0.830\u6beb\u79d20.774\u6beb\u79d210BM_\u5b66\u4e60/\u8fc7\u7a0b\u65f6\u95f4/\u5b9e\u65f6\u6807\u51c6\u5dee0.80%4.86%10\uff08\u57fa\u6570\uff09anush@MacBook-\u4e13\u4e1a\u8303\u4f8b%\n\uff08\u57fa\u7840\uff09anush@MacBook-Pro nlp_\u6a21\u578b%python/bert_small_tf_run\u3002pyMetal\u8bbe\u5907\u8bbe\u7f6e\u4e3a\uff1aApple M1 MaxsystemMemory:64.00 GBmaxCacheSize:24.00 GB2022-02-21 07:58:36.593857:I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory\u3002cc:305]\u65e0\u6cd5\u8bc6\u522b\u5e73\u53f0GPU ID 0\u7684NUMA\u8282\u70b9\uff0c\u9ed8\u8ba4\u4e3a0\u3002\u60a8\u7684\u5185\u6838\u53ef\u80fd\u6ca1\u6709\u4f7f\u7528NUMA\u652f\u6301\u6784\u5efa\u30022022-02-21 07:58:36.594010:I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory\u3002cc:271]\u521b\u5efa\u4e86TensorFlow\u8bbe\u5907\uff08/job:localhost/replica:0/task:0/device:GPU:0\uff0c\u5185\u5b58\u4e3a0 MB\uff09&gt\uff1b\u7269\u7406\u53ef\u63d2\u62d4\u8bbe\u5907\uff08\u8bbe\u5907\uff1a0\uff0c\u540d\u79f0\uff1aMETAL\uff0cpci\u603b\u7ebfid:&lt\uff1b\u672a\u5b9a\u4e49&gt\uff1b\uff091\u4e2a\u7269\u7406GPU\uff0c1\u4e2a\u903b\u8f91GPU\u6a21\u578b\uff1a&#34\uff1b\u76ee\u524d\uff0c34\u65e5\uff0c34\u65e5\uff0c34\u65e5\uff0c34\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c34\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c34\u65e5\uff0c4\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c34\u65e5\uff0c34\u65e5\uff0c3\u65e5\uff0c34\u65e5\uff0c3\u65e5\uff0c3\u65e5\uff0c34\u65e5\uff0c34\u65e5\uff0c3\u65e5\uff0c3\u6708\u6708\uff0cUUUU\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384\u5384_____===========================================================================================================================\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u514315250176[&#39\uff1b\u8f93\u5165\u5355\u8bcdID[0][0]&#39\uff1b\uff0c\uff08\u65e0768\u4eba\uff09&#39\u4eba\uff1b\u8f93\u5165_\u63a9\u7801[0][0]&#39&#39;\u8f93\u5165_type_id[0][0]&#39\uff1b]\u8f8d\u5b661\uff08\u8f8d\u5b66\uff09\uff08\u65e0\uff0c768\uff090[&#39\uff1bbert#u\u7f16\u7801\u5668#1[0][1]&#39\uff1b]\u53e5\u5b50\u9884\u6d4b\uff08\u5206\u7c7b\uff08\u65e0\uff0c5\uff093845[&#39\uff1b\u8f8d\u5b66\u8005#1[0][0]&#39\uff1b]1\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081\u67081_\u3002\u3002\u3002\u65f6\u95f4\uff1a1.7728650569915771\u65f6\u95f4/iter:0.19698500633239746\n\u529f\u7387\u6d4b\u91cf\u9700\u8981\u5728\u975e\u5e38\u53d7\u63a7\u548c\u4eea\u8868\u5316\u7684\u73af\u5883\u4e2d\u8fdb\u884c\u3002\u7136\u800c\uff0c\u5bf9\u4e8e\u5728A100\u548cM1MAX\u4e0a\u8fd0\u884c\u76f8\u540c\u7684\u4f2f\u7279\u8bad\u7ec3\u6a21\u578b\u6765\u8bf4\uff0c\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u8fd1\u4f3c\u503c\u3002\nA100\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6d88\u8017131W\u7684\u5cf0\u503c\uff0cM1MAX GPU\u6d88\u8017\u7684\u6700\u5927\u529f\u7387\u4e3a15.4W\u3002A100\u57287ms\u4e0e104ms\uff08\u4f7f\u7528SHARK\uff09\u548c196ms\uff08\u4f7f\u7528TF Metal\uff09\u4e4b\u95f4\u8fdb\u884c\u8fed\u4ee3\u3002\u7531\u4e8eTF Metal\u4e0d\u80fd\u5f88\u597d\u5730\u5c06\u8bad\u7ec3\u56fe\u5378\u8f7d\u5230GPU\u4e0a\uff0c\u6211\u4eec\u5c06\u5176\u4ece\u6027\u80fd/\u529f\u7387\u6bd4\u8f83\u4e2d\u5220\u9664\u3002\n2022\u5e742\u670821\u65e5\u661f\u671f\u4e0000:56:33+---------------------------------------------------------------+|NVIDIA-SMI 470.57.02\u9a71\u52a8\u7a0b\u5e8f\u7248\u672c\uff1a470.57.02 CUDA\u7248\u672c\uff1a11.4 | | CUDA\u7248\u672c\uff1a11.4 | GPU\u540d\u79f0\u6301\u4e45\u5316-M |\u603b\u7ebfId\u663e\u793a\u3002A |\u6325\u53d1\u6027\u89e3\u7532\u3002ECC | | |\u98ce\u6247\u6e29\u5ea6\u6027\u80fd\u538b\u6c34\u5806\uff1a\u4f7f\u7528\u7387/\u4e0a\u9650|\u5185\u5b58\u4f7f\u7528\u7387| GPU Util Compute M.| | | | | | |====================================================================================================================================================================================================================================================================================\u3002\u3002\u3002Off |00000000:00:04.0 Off | 0 | | | | | | | N/A 36C P0131W/350W | 39341MiB/40536MiB | 53%\u9ed8\u8ba4| | | | | | |\u7981\u7528|+-------------------------------+----------------------+----------------------+\nsamples/ModelCompiler/nlp_models$python bert_small_tf_run\u3002\u76ae\u8036\u3002\u3002\u578b\u53f7\uff1a&#34\uff1bbert#u\u5206\u7c7b\u5668&#34__________________________________________________________________________________________________====================================================================================================================================================================================\u793c\u793c\u793c\u793c\u793c\u793c\u793c\u5143\uff08\u7c7b\u578b\uff09\uff09\u8f93\u51fa\u5f62\u72b6\uff08\u7c7b\u578b\uff09\u8f93\u51fa\uff08\u7c7b\u578b\uff09\u8f93\u51fa\u5f62\u72b6\uff08\u7c7b\u578b\uff09\u5c42\uff08\u7c7b\u578b\uff09\u8f93\u51fa\uff08\u7c7b\u578b\uff09\u5f62\u72b6\uff09\u5c42\uff08\u7c7b\u578b\uff09\u8f93\u51fa\uff08\u7c7b\u578b\uff09\u5f62\u72b6\uff09\u5f62\u5f62\u5f62\u5f62\u53c2\u6570\u53c2\u6570\u53c2\u6570\uff08\u7c7b\u578b\uff09\u5c42\uff08\u7c7b\u578b\uff09\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\u5143\uu5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362\u5362_________________________________1.0[0 0[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\u6708\u6708UU\\UUUUUUU\\\\UUUUUUUUUUUU\\\\UUUUUUUUUUUUU\\\\\\UUUUUUUUUUUUUUUUUU\\\\\\\\UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\uff08\u65e0\uff0c\u65e0\uff0c768\uff09\u65e0\uff090 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8__________________;\u53e5\u5b50\u9884\u6d4b\uff08Classifica\uff08None\uff0c5\uff093845\u8f8d\u5b66\u8005_1[0][0]================================================================================================================================================================================================================================================================================================================================================================================================================UUUUUUU\uff08UUUUUU\uff08\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636e\u636eUUUUUU\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\u6708\uff08UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\u3002\u3002\u65f6\u95f4\uff1a6.907362699508667\u65f6\u95f4/iter:0.006977134039907744\n\u5c01\u88c5\u529f\u7387\uff1a2.48W\uff08\u5e73\u5747\u529f\u7387\uff1a2.34W\u5cf0\u503c\uff1a37.78W\uff09\u6cb9\u95e8\uff1a\u65e0CPU\uff1a1.37W\uff08\u5e73\u5747\u529f\u7387\uff1a1.03W\u5cf0\u503c\uff1a32.32W\uff09GPU\uff1a0.00W\uff08\u5e73\u5747\u529f\u7387\uff1a0.00W\u5cf0\u503c\uff1a15.41W\uff09\nSHARK\u8fd0\u884c\u65f6\u4ee5pip\u5305\u7684\u5f62\u5f0f\u63d0\u4f9b\uff0c\u9700\u8981\u5728Pytorch/Python\u6587\u4ef6\u4e2d\u66f4\u6539\u51e0\u884c\u4ee3\u7801\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f7f\u7528SHARK\u4ecePython\u8fd0\u884cResnet50\u548cBERT\u7684\u793a\u4f8b\uff0c\u6211\u4eec\u8ba1\u5212\u5728\u8fd9\u91cc\u6dfb\u52a0\u66f4\u591aPython\u793a\u4f8b\u3002\u5bf9\u4e8e\u672c\u6587\u4e2d\u7684\u5b9e\u9a8c\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u4e00\u4e2a\u4f7f\u7528\u8c37\u6b4c\u57fa\u51c6\u6d4b\u8bd5\u652f\u6301\u6784\u5efa\u7684\u57fa\u51c6\u4e8c\u8fdb\u5236\u6587\u4ef6\u6765\u8fd0\u884c\u4e00\u4e2a\u53d7\u63a7\u5b9e\u9a8c\uff0c\u5c3d\u7ba1\u4ecePython\u8c03\u7528\u4f1a\u589e\u52a0\u51e0\u5fae\u79d2\u3002\u6211\u4eec\u6d4b\u8bd5\u4e86\u4e00\u4e2aBERT MiniLM\u6a21\u578b\uff08\u7528\u4e8eHuggingFace\u7684\u65e0\u9650\u6f14\u793a\uff09\u548c\u4e00\u4e2aBERT\u8bad\u7ec3\u6a21\u578b\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c1d\u8bd5bert base uncased\u3001Resnet50\u3001Mobilenetv3\u7b49\uff0c\u6240\u6709\u578b\u53f7\u90fd\u4f1a\u901a\u8fc7torch mlir\u81ea\u52a8\u5378\u8f7d\u5230GPU\u3002\nBERT\u8bad\u7ec3\u56fe\u7684\u706b\u70acMLIR\u964d\u4f4e\u6b63\u5728\u8be5\u9636\u6bb5\u5206\u652f\u4e2d\u96c6\u6210\u3002\u6240\u6709\u91cd\u65b0\u521b\u5efa\u6d4b\u8bd5\u7684\u4ee3\u7801\u90fd\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u3002\u4f46\u662f\uff0c\u7531\u4e8etorchvision\u8fd8\u4e0d\u652f\u6301M1\uff0c\u60a8\u9700\u8981\u4ece\u6e90\u4ee3\u7801\u5904\u5b89\u88c5PyTorch torchvision\u3002\u60a8\u8fd8\u9700\u8981\u4eceSHARK\u5b58\u50a8\u5e93\u7684apple-m1-max-support\u5206\u652f\u6784\u5efaSHARK\u3002\n\uff08\u57fa\u7840\uff09anush@MacBook-Pro\u793a\u4f8b%pip\u5217\u8868| grep TensorFlow TensorFlow\u4f30\u8ba1\u56682.6.0\u4f20\u611f\u5668\u6d41\u91cf-macos 2.8.0\u4f20\u611f\u5668\u6d41\u91cf-metal 0.3.0\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u793a\u4f8b%pip list | grep onnx onnx 1.10.1\u975e\u901a\u75281.8.1\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u793a\u4f8b%pip list | grep tensortensortensorboard 2.8.0tensorboard-data-server 0.6.0tensorboard-plugin-wit 1.8.0tensorflow-estimator 2.6.0tensorflow-macos 2.8.0tensorflow-metal 0.3.0\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u793a\u4f8b%pip\u5217\u8868| grep\u706b\u70ac1.10.0\u6216\u89c6\u89c90.9.0a0\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u793a\u4f8b%pip\u5217\u8868| grep onnxy\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u793a\u4f8b%pip list | grep onnx onnx 1.10.1\u975e\u901a\u75281.8.1\uff08\u57fa\u672c\uff09anush@MacBook-\u4e13\u4e1a\u8303\u4f8b%\n\u6211\u4eec\u4f7f\u7528asitop\u76d1\u63a7\u7535\u6e90\u4f7f\u7528\u60c5\u51b5\u3001GPU\u4f7f\u7528\u60c5\u51b5\u3001\u5185\u6838\u8282\u6d41\u7b49\uff0c\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u901a\u8fc7pip\u5b89\u88c5\u3002\n\u82f9\u679c\u7684CoreML\u4e0d\u4ec5\u80fd\u591f\u9488\u5bf9CPU\u6216GPU\uff0c\u8fd8\u80fd\u591f\u9488\u5bf9\u82f9\u679c\u7684\u795e\u7ecf\u5f15\u64ce\uff0c\u5c3d\u7ba1\u53ea\u662f\u7528\u4e8e\u63a8\u7406\u3002\u6211\u4eec\u786e\u5b9e\u8bd5\u56fe\u8ba9CoreML\u8fdb\u884c\u63a8\u7406\u6bd4\u8f83\uff0c\u4f46\u5728\u8fd9\u91cc\u9047\u5230\u4e86\u6a21\u578b\u8f6c\u6362\u95ee\u9898\uff0c\u5e76\u5c06\u5176\u6392\u9664\u5728\u6d4b\u8bd5\u4e4b\u5916\u3002\u6700\u65b0\u7684coremltools\u4f3c\u4e4e\u9700\u8981\u65e7\u7684Tensorflow\u7248\u672c2.5.0\uff0c\u8fd9\u4e0d\u518d\u662f\u4f7f\u7528conda\u5b89\u88c5Tensorflow\u65f6\u7684\u9ed8\u8ba4\u7248\u672c\u3002\n\u5f53\u6240\u6709GPU\u88ab\u6700\u5927\u9650\u5ea6\u5730\u4f7f\u7528\u65f6\uff0cOSX\u7a97\u53e3\u670d\u52a1\u5668\u5d29\u6e83\u3002\u6211\u4eec\u5df2\u7ecf\u5c31\u8fd9\u4e2a\u9519\u8bef\u5411\u82f9\u679c\u516c\u53f8\u63d0\u51fa\u4e86\u53cd\u9988\u95ee\u9898\uff0c\u5e0c\u671b\u5b83\u80fd\u5f88\u5feb\u5f97\u5230\u89e3\u51b3\uff0c\u4f46\u5728\u91cd\u65b0\u521b\u5efa\u7ed3\u679c\u65f6\uff0c\u6211\u4eec\u5efa\u8bae\u5728MacBook Pro\u4e2d\u4f7f\u7528ssh\uff0c\u4e0d\u8981\u6253\u5f00\u663e\u793a\u5c4f\u3002\n\u8fd9\u4e9b\u5b58\u50a8\u5e93\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u662f\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\uff0c\u5e76\u4ee5\u6280\u672f\u9884\u89c8\u7684\u5f62\u5f0f\u663e\u793a\uff0c\u8fd9\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u6da6\u8272\uff0c\u7136\u540e\u624d\u80fd\u4f9b\u975e\u6280\u672f\u7528\u6237\u4f7f\u7528\u3002\u6211\u4eec\u8ba1\u5212\u7ee7\u7eed\u4f7f\u5176\u7528\u6237\u53cb\u597d\uff0c\u5e76\u4e3aTorch MLIR\u6dfb\u52a0\u6e34\u671b\u6a21\u5f0f\u652f\u6301\uff0c\u56e0\u6b64M1Max GPU\u4e0a\u7684PyTorch\u652f\u6301\u4e3a\u65e0\u7f1d\u5f00\u53d1\u548c\u90e8\u7f72\u63d0\u4f9b\u4e86\u6761\u4ef6\u3002\u5982\u679c\u4f60\u4e0d\u60f3\u628a\u6240\u6709\u7684\u5f00\u6e90\u90e8\u5206\u90fd\u653e\u5728\u81ea\u5df1\u7684\u4f4d\u7f6e\u4e0a\uff0c\u6216\u8005\u5982\u679c\u4f60\u6709\u5728M1\u8bbe\u5907\u4e0a\u90e8\u7f72\u652f\u6301GPU\u7684PyTorch\u548c\u4e13\u4e1a\u89e3\u51b3\u65b9\u6848\u7684\u5546\u4e1a\u6848\u4f8b\uff0c\u8bf7\u5728\u8fd9\u91cc\u6ce8\u518c\uff0c\u6211\u4eec\u7684\u89e3\u51b3\u65b9\u6848\u56e2\u961f\u5c06\u4f38\u51fa\u63f4\u52a9\u4e4b\u624b\u3002\n\u4f7f\u7528SHARK Runtime\uff0c\u6211\u4eec\u5728Apple M1Max GPU\u4e0a\u6f14\u793a\u4e86\u9ad8\u6027\u80fd\u7684PyTorch\u6a21\u578b\u3002\u5b83\u6bd4Tensorflow Metal\u7684\u63a8\u7406\u80fd\u529b\u5f3a1.5\u500d\uff0c\u8bad\u7ec3BERT\u6a21\u578b\u80fd\u529b\u5f3a2\u500d\u3002\u5728\u4e0d\u4e45\u7684\u5c06\u6765\uff0c\u6211\u4eec\u8ba1\u5212\u589e\u5f3a\u6700\u7ec8\u7528\u6237\u4f53\u9a8c\uff0c\u5e76\u6dfb\u52a0\u201c\u6e34\u671b\u201d\u6a21\u5f0f\u652f\u6301\uff0c\u4ee5\u4fbf\u5728\u4efb\u4f55\u786c\u4ef6\u4e0a\u5b9e\u73b0\u4ece\u5f00\u53d1\u5230\u90e8\u7f72\u7684\u65e0\u7f1d\u8fde\u63a5\u3002\n\u5982\u679c\u60a8\u60f3\u8bbf\u95eeSHARK Runtime\u7684\u5546\u4e1a\u7248\uff0c\u8bf7\u5728\u6b64\u5904\u6ce8\u518c\u8bbf\u95ee\uff0c\u5982\u679c\u60a8\u5728\u91cd\u65b0\u521b\u5efa\u7ed3\u679c\u65f6\u9047\u5230\u95ee\u9898\uff0c\u8bf7\u6253\u5f00\u4e00\u4e2a\u95ee\u9898\u3002\nSHARK\u5efa\u7acb\u5728\u5f00\u6e90\u8f6f\u4ef6\u5305Torch MLIR\u3001LLVM/MLIR\u548cGoogle iRE\u4e4b\u4e0a\uff0c\u6211\u4eec\u611f\u8c22\u6240\u6709\u5f00\u53d1\u8005\u548c\u793e\u533a\u7684\u652f\u6301\u3002\u6211\u4eec\u7279\u522b\u5e0c\u671b\u547c\u5401\u672c\u00b7\u74e6\u5c3c\u514b\u3001\u5f20\u78ca\u3001\u65af\u7279\u62c9\u00b7\u52b3\u4f26\u4f50\u548c\u6258\u9a6c\u65af\u00b7\u62c9\u4e4c\u514b\u65af\u5728MLIR/IREE GPU\u4ee3\u7801\u751f\u6210\u8def\u5f84\u4e0a\u63d0\u4f9b\u5e2e\u52a9\u3001\u652f\u6301\u548c\u6307\u5bfc\u3002", "note_en": "In this blog we demonstrate  PyTorch Training and Inference on the Apple M1Max GPU with SHARK with only a few lines of additional code and outperforming Apple\u2019s  Tensorflow-metal plugin. \u00a0Though Apple has released GPU support for Tensorflow via the now deprecated  tensorflow-macos plugin and the newer  tensorflow-metal plugin the most popular machine learning framework  PyTorch lacks GPU support on Apple Silicon. Until now.\n SHARK is built on  MLIR and  IREE and can target various hardware seamlessly. Since SHARK generates kernels on the fly for each workload you can port to new architectures like the M1Max without the vendor provided handwritten / hand tuned library.\n Nod.ai has added AMD GPU support to be able to retarget the code generation for AMD MI100/MI200 class devices and move machine learning workloads from Nvidia V100/A100 to AMD MI100 seamlessly. In the past  we demonstrated better codegen than Intel MKL and Apache/OctoML TVM on Intel Alderlake CPUs and  outperforming Nvidia\u2019s cuDNN/cuBLAS/CUTLASS used by ML frameworks such as Onnxruntime, Pytorch/Torchscript and Tensorflow/XLA. Today we demonstrate SHARK targeting \u00a0Apple\u2019s 32 Core GPU in the M1Max with PyTorch Models for BERT Inference and Training. So if you love PyTorch and want to use those 32 GPU cores in your new Apple Silicon Macbook Pro read on.\n For our experiment we will utilize a 14\u2033 MacBook Pro with the Apple M1 Max with 64GB RAM. We have also run the same benchmarks on a 16\u2033 MacBook Pro and notice the same performance and both don\u2019t thermally throttle during our benchmarks.\n     (base) anush@MacBook-Pro examples % ./shark-bench --module_file=minilm_jan6_m1max.vmfb --entry_function=predict --function_input=1x128xi32 --function_input=1x128xi32 --function_input=1x128xi32 --benchmark_repetitions=102022-02-20T10:17:55-08:00Running ./shark-benchRun on (10 X 24.1214 MHz CPU s)CPU Caches: L1 Data 64 KiB (x10) L1 Instruction 128 KiB (x10) L2 Unified 4096 KiB (x5)Load Average: 2.14, 1.91, 1.81-----------------------------------------------------------------------------------Benchmark Time CPU Iterations-----------------------------------------------------------------------------------BM_predict/process_time/real_time 11.7 ms 1.39 ms 58BM_predict/process_time/real_time 11.5 ms 1.34 ms 58BM_predict/process_time/real_time 11.7 ms 1.43 ms 58BM_predict/process_time/real_time 11.6 ms 1.30 ms 58BM_predict/process_time/real_time 11.5 ms 1.33 ms 58BM_predict/process_time/real_time 11.7 ms 1.46 ms 58BM_predict/process_time/real_time 11.6 ms 1.31 ms 58BM_predict/process_time/real_time 11.5 ms 1.33 ms 58BM_predict/process_time/real_time 11.7 ms 1.46 ms 58BM_predict/process_time/real_time 11.6 ms 1.30 ms 58 BM_predict/process_time/real_time_mean 11.6 ms  1.36 ms 10BM_predict/process_time/real_time_median 11.6 ms 1.34 ms 10BM_predict/process_time/real_time_stddev 0.074 ms 0.063 ms 10BM_predict/process_time/real_time_cv 0.64 % 4.65 % 10(base) anush@MacBook-Pro examples %\n Arguments: Namespace(models=[&#39;microsoft/MiniLM-L12-H384-uncased&#39;], model_source=&#39;pt&#39;, model_class=None, engines=[&#39;tensorflow&#39;], cache_dir=&#39;./cache_models&#39;, onnx_dir=&#39;./onnx_models&#39;, use_gpu=True, precision=&lt;Precision.FLOAT32: &#39;fp32&#39;&gt;, verbose=False, overwrite=False, optimize_onnx=False, validate_onnx=False, fusion_csv=&#39;fusion.csv&#39;, detail_csv=&#39;detail.csv&#39;, result_csv=&#39;result.csv&#39;, input_counts=[1], test_times=1000, batch_sizes=[1], sequence_lengths=[128], disable_ort_io_binding=False, num_threads=[10])Metal device set to: Apple M1 MaxsystemMemory: 64.00 GBmaxCacheSize: 24.00 GBAll model checkpoint layers were used when initializing TFBertModel.All the layers of TFBertModel were initialized from the model checkpoint at microsoft/MiniLM-L12-H384-uncased.If your task is similar to the task the model of the checkpoint was trained on, you can already use TFBertModel for predictions without further training. Run Tensorflow on microsoft/MiniLM-L12-H384-uncased with input shape [1, 128]{&#39;engine&#39;: &#39;tensorflow&#39;, &#39;version&#39;: &#39;2.8.0&#39;, &#39;device&#39;: &#39;cuda&#39;, &#39;optimizer&#39;: &#39;&#39;, &#39;precision&#39;: &lt;Precision.FLOAT32: &#39;fp32&#39;&gt;, &#39;io_binding&#39;: &#39;&#39;, &#39;model_name&#39;: &#39;microsoft/MiniLM-L12-H384-uncased&#39;, &#39;inputs&#39;: 1, &#39;threads&#39;: 10, &#39;batch_size&#39;: 1, &#39;sequence_length&#39;: 128, &#39;datetime&#39;: &#39;2022-02-21 07:48:04.965312&#39;, &#39;test_times&#39;: 1000, &#39;latency_variance&#39;: &#39;0.00&#39;, &#39;latency_90_percentile&#39;: &#39;19.25&#39;, &#39;latency_95_percentile&#39;: &#39;22.10&#39;, &#39;latency_99_percentile&#39;: &#39;23.14&#39;, &#39; average_latency_ms&#39;: &#39;16.99&#39;, &#39;QPS&#39;: &#39;58.85&#39;}\n           In our tests we noticed the Tensorflow-metal plugin doesn\u2019t seem to offload the backwards graph onto the GPU efficiently. Since Tensorflow-metal is a binary only release we have no way to debug it. The same  Tensorflow implementation works well to offload onto CUDA GPUs.\n (base) anush@MacBook-Pro examples % ./shark-bench --module_file=bert_training_feb17.vmfb --function_input=1x512xi32 --function_input=1x512xi32 --function_input=1x512xi32 --function_input=1xi32 --entry_function=learn --benchmark_repetitions=102022-02-20T23:04:22-08:00Running ./shark-benchRun on (10 X 24.2416 MHz CPU s)CPU Caches: L1 Data 64 KiB (x10) L1 Instruction 128 KiB (x10) L2 Unified 4096 KiB (x5)Load Average: 2.03, 2.53, 2.31---------------------------------------------------------------------------------Benchmark Time CPU Iterations---------------------------------------------------------------------------------BM_learn/process_time/real_time 104 ms 16.2 ms 5BM_learn/process_time/real_time 104 ms 16.1 ms 5BM_learn/process_time/real_time 105 ms 15.3 ms 5BM_learn/process_time/real_time 104 ms 16.0 ms 5BM_learn/process_time/real_time 103 ms 15.2 ms 5BM_learn/process_time/real_time 105 ms 16.9 ms 5BM_learn/process_time/real_time 104 ms 15.5 ms 5BM_learn/process_time/real_time 104 ms 14.9 ms 5BM_learn/process_time/real_time 105 ms 17.4 ms 5BM_learn/process_time/real_time 105 ms 15.7 ms 5 BM_learn/process_time/real_time_mean 104 ms  15.9 ms 10BM_learn/process_time/real_time_median 104 ms 15.8 ms 10BM_learn/process_time/real_time_stddev 0.830 ms 0.774 ms 10BM_learn/process_time/real_time_cv 0.80 % 4.86 % 10(base) anush@MacBook-Pro examples %\n (base) anush@MacBook-Pro nlp_models % python ./bert_small_tf_run.pyMetal device set to: Apple M1 MaxsystemMemory: 64.00 GBmaxCacheSize: 24.00 GB2022-02-21 07:58:36.593857: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:305] Could not identify NUMA node of platform GPU ID 0, defaulting to 0. Your kernel may not have been built with NUMA support.2022-02-21 07:58:36.594010: I tensorflow/core/common_runtime/pluggable_device/pluggable_device_factory.cc:271] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 0 MB memory) -&gt; physical PluggableDevice (device: 0, name: METAL, pci bus id: &lt;undefined&gt;)1 Physical GPUs, 1 Logical GPUModel: &#34;bert_classifier&#34;__________________________________________________________________________________________________ Layer (type) Output Shape Param # Connected to ================================================================================================== input_word_ids (InputLayer) [(None, None)] 0 [] input_mask (InputLayer) [(None, None)] 0 [] input_type_ids (InputLayer) [(None, None)] 0 [] bert_encoder_1 (BertEncoder) [(None, None, 768), 15250176 [&#39;input_word_ids[0][0]&#39;, (None, 768)] &#39;input_mask[0][0]&#39;, &#39;input_type_ids[0][0]&#39;] dropout_1 (Dropout) (None, 768) 0 [&#39;bert_encoder_1[0][1]&#39;] sentence_prediction (Classific (None, 5) 3845 [&#39;dropout_1[0][0]&#39;] ationHead) ==================================================================================================Total params: 15,254,021Trainable params: 15,254,021Non-trainable params: 0__________________________________________________________________________________________________...time: 1.7728650569915771 time/iter: 0.19698500633239746\n       Power measurements need to be done in a very controlled and instrumented environment. However this is a good approximation for running the same BERT training model on an A100 and M1MAX.\n The A100 draws 131W peak during the training run, the M1MAX GPU draws a maximum of 15.4 W. The A100 runs an iteration at 7ms vs 104ms (with SHARK) and 196ms (with TF-Metal). Since TF-Metal doesn\u2019t offload the Training graph well onto the GPU we remove it from our perf/watt comparisons.\n Mon Feb 21 00:56:33 2022 +-----------------------------------------------------------------------------+| NVIDIA-SMI 470.57.02 Driver Version: 470.57.02 CUDA Version: 11.4 ||-------------------------------+----------------------+----------------------+| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC || Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. || | | MIG M. ||===============================+======================+======================|| 0 NVIDIA A100-SXM... Off | 00000000:00:04.0 Off | 0 || N/A 36C P0  131W / 350W | 39341MiB / 40536MiB |  53% Default || | | Disabled |+-------------------------------+----------------------+----------------------+\n samples/ModelCompiler/nlp_models$ python bert_small_tf_run.py..Model: &#34;bert_classifier&#34;__________________________________________________________________________________________________Layer (type) Output Shape Param # Connected to==================================================================================================input_word_ids (InputLayer) [(None, None)] 0__________________________________________________________________________________________________input_mask (InputLayer) [(None, None)] 0__________________________________________________________________________________________________input_type_ids (InputLayer) [(None, None)] 0__________________________________________________________________________________________________bert_encoder_1 (BertEncoder) [(None, None, 768), 15250176 input_word_ids[0][0] input_mask[0][0] input_type_ids[0][0]__________________________________________________________________________________________________dropout_1 (Dropout) (None, 768) 0 bert_encoder_1[0][1]__________________________________________________________________________________________________sentence_prediction (Classifica (None, 5) 3845 dropout_1[0][0]==================================================================================================Total params: 15,254,021Trainable params: 15,254,021Non-trainable params: 0__________________________________________________________________________________________________.. time: 6.907362699508667 time/iter: 0.006977134039907744\n Package Power: 2.48W (avg: 2.34W peak: 37.78W) throttle: no  CPU: 1.37W (avg: 1.03W peak: 32.32W)   GPU: 0.00W (avg: 0.00W peak: 15.41W)\n  The SHARK Runtime is available as pip package and requires a few lines of code changes in your Pytorch/Python file. Here is an example of running  Resnet50 and  BERT from Python using SHARK and we plan to add more Python examples there.\u00a0 For the experiments in the post we will use a benchmark binary built with  Google Benchmark support to run a controlled experiment though calling from Python adds a few microseconds. We test a  BERT MiniLM Model (used in  HuggingFace\u2019s Infinity demos) and a  BERT Training model. You can also try  bert-base-uncased, Resnet50, Mobilenetv3 etc and all the models are automatically offloaded to the GPU via torch-mlir.\n The Torch-MLIR lowering for the BERT training graph is being integrated in this  staging branch. \u00a0All the code the recreate the tests are  here and  here. However you will need to install PyTorch  torchvision from source since torchvision  doesn\u2019t have support for M1 yet. You will also need to build SHARK from the  apple-m1-max-support\u00a0branch from the  SHARK repository.\n (base) anush@MacBook-Pro examples % pip list | grep tensorflowtensorflow-estimator 2.6.0tensorflow-macos 2.8.0tensorflow-metal 0.3.0(base) anush@MacBook-Pro examples % pip list | grep onnx onnx 1.10.1onnxconverter-common 1.8.1(base) anush@MacBook-Pro examples % pip list | grep tensortensorboard 2.8.0tensorboard-data-server 0.6.0tensorboard-plugin-wit 1.8.0tensorflow-estimator 2.6.0tensorflow-macos 2.8.0tensorflow-metal 0.3.0(base) anush@MacBook-Pro examples % pip list | grep torch torch 1.10.0torchvision 0.9.0a0(base) anush@MacBook-Pro examples % pip list | grep onnxy(base) anush@MacBook-Pro examples % pip list | grep onnx onnx 1.10.1onnxconverter-common 1.8.1(base) anush@MacBook-Pro examples %\n We use  asitop to monitor the Power Usage, GPU Usage, Core throttling etc which can be installed via pip.\n Apple\u2019s CoreML has the ability to target not just the CPU or GPU but also the Apple Neural Engine though only for inference. We did try to get CoreML to work for the inference comparison but ran into model conversion issues  here and excluded it from the tests. The latest coremltools seems to require an older Tensorflow version 2.5.0 which is no longer the default when you install tensorflow with conda.\n The OSX Window Server  crashes when all GPUs are used to the maximum. We have filed a Feedback issue with Apple on this bug and hope it will be resolved soon but when recreating results we recommend ssh into the MacBook Pro and don\u2019t turn on the display.\n All the code in these repositories are very much work in progress and shown as technical previews which requires some level of polish before they are ready for non-technical users to be able to use. We plan to continue making it user friendly and add eager mode support to Torch-MLIR so PyTorch support on M1Max GPUs works out the box for seamless development to deployment. If putting all the open source pieces is not your thing or if you have a business case for deploying PyTorch with GPU support on M1 devices today and professional solution please sign up  here and our solutions team will reach out to help.\n     Using SHARK Runtime, we demonstrate high performance PyTorch models on Apple M1Max GPUs. It outperforms Tensorflow-Metal by 1.5x for inferencing and 2x in training BERT models. In the near future we plan to enhance end user experience and add \u201ceager\u201d mode support so it is seamless from development to deployment on any hardware.\n If you would like access to the commercial version of SHARK Runtime sign up for access  here and if you have trouble recreating results please open an  issue.\n  SHARK is built on open source packages  Torch-MLIR,  \u00a0LLVM/MLIR and  Google IREE\u00a0and we are thank for all developers and community for their support. We specifically want to call out Ben Vanik, Lei Zhang, Stella Laurenzo and Thomas Raoux for their help, support and guidance on the MLIR/IREE GPU codegen paths.", "posttime": "2022-02-24 21:21:58", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "apple,tensorflow,gpu", "title": "\u5e26SHARK\u7684Apple M1 MAX GPU\u4e0a\u7684PyTorch\u2013\u6bd4TensorFlow Metal\u66f4\u5feb", "title_en": "PyTorch on Apple M1 MAX GPUs with SHARK \u2013 faster than TensorFlow-Metal", "transed": 1, "url": "https://nod.ai/pytorch-m1-max-gpu/", "via": "", "real_tags": ["apple", "gpu"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074744, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e00\u672c\u5173\u4e8eLinux\u7cfb\u7edf\u7ba1\u7406\u5458\u7684\u5e38\u8bc6\u548c\u4efb\u52a1\u7684\u5b66\u4e60\u7b14\u8bb0\u4e66\u3002\n\u4f7f\u7528ps\u547d\u4ee4\u5217\u51fa\u5f53\u524d\u6d3b\u52a8\u8fdb\u7a0b\u53ca\u5176\u72b6\u6001\u3001\u7f16\u53f7\u3001\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u7b49\u3002\n\u5f15\u7528\u4eba&#39\uff1bps\u4e0a\u7684s\u9875\u6587\u6863\uff1a&#34\uff1b\u901a\u8fc7\u4f7f\u7528-A\u3001-G\u3001-G\u3001-p\u3001-T\u3001-T\u3001-U\u548c-U\u9009\u9879\u7684\u4efb\u610f\u7ec4\u5408\uff0c\u53ef\u4ee5\u9009\u62e9\u4e00\u7ec4\u4e0d\u540c\u7684\u8fdb\u7a0b\u8fdb\u884c\u663e\u793a\u3002\u5982\u679c\u7ed9\u51fa\u4e86\u591a\u4e2a\u9009\u9879\uff0c\u5219ps\u5c06\u9009\u62e9\u81f3\u5c11\u4e00\u4e2a\u7ed9\u5b9a\u9009\u9879\u5339\u914d\u7684\u6240\u6709\u6d41\u7a0b&#34\uff1b\u3002\n\u5b88\u62a4\u7a0b\u5e8fsystemd\u8fdb\u7a0b\u5728\u5f15\u5bfc\u671f\u95f4\u542f\u52a8\uff0c\u5e76\u5728\u5173\u673a\u4e4b\u524d\u4fdd\u6301\u6d3b\u52a8\u72b6\u6001\u3002\u5b83&#39\uff1b\u5b83\u662f\u7cfb\u7edf\u4e2d\u6240\u6709\u5176\u4ed6\u8fdb\u7a0b\u7684\u7236\u8fdb\u7a0b\u3002\n\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u5305\u542b\u51e0\u4e2a\u4e3b\u8981\u90e8\u5206\uff0c\u4f8b\u5982\uff1aPID\u3001\u72b6\u6001\u3001\u865a\u62df\u7a7a\u95f4\u5730\u5740\uff08\u5185\u5b58\uff09\u3001\u7ebf\u7a0b\u3001\u7f51\u7edc\u548c\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u8c03\u5ea6\u7a0b\u5e8f\u4fe1\u606f\u548c\u94fe\u63a5\u3002\u8fc7\u7a0b\u53d7\u5230\u63a7\u5236\u5e76\u54cd\u5e94\u4fe1\u53f7\u3002\u4ee5\u4e0b\u63cf\u8ff0\u4e86\u4e00\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u5728\u5176\u4e2d\u4f20\u8f93\u7684\u72b6\u6001\uff1a\n\u8981\u4ea4\u4e92\u89c2\u5bdf\u8fdb\u7a0b\u7684\u72b6\u6001\u548c\u5176\u4ed6\u4fe1\u606f\uff0c\u8bf7\u4f7f\u7528top\u547d\u4ee4\u3002\n\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7528\u6237\u90fd\u4e0e\u552f\u4e00\u7684\u7528\u6237id uid\u5173\u8054\uff0c\u6bcf\u4e2a\u7ec4\u90fd\u4e0egid\u5173\u8054\u3002\n\u8981\u9650\u5236\u670d\u52a1\u7528\u6237\u5e10\u6237\uff08\u4f8b\u5982web\u670d\u52a1\u5668\u7684\u5e10\u6237\uff09\uff0c\u53ef\u4ee5\u5c06shell\u8bbe\u7f6e\u4e3anologin\uff1a\n\u8981\u66f4\u6539\u7528\u6237\u5bc6\u7801\uff0c\u8bf7\u4ea4\u4e92\u4f7f\u7528passwd\u547d\u4ee4\u3002\u53e6\u5916\uff0cchange\u547d\u4ee4\u8bbe\u7f6e\u7cfb\u7edf\u4e2d\u7684\u5bc6\u7801\u7b56\u7565\u3002\n\u4f7f\u7528\u547d\u4ee4su-&lt\uff1b\u7528\u6237\u540d&gt\uff1b\u5207\u6362\u5230\u6307\u5b9a\u7684\u7528\u6237\u3002\u8fd9\u5c06\u63d0\u5347\u5979\u7684\u5bc6\u7801\u3002\u5728\u6ca1\u6709\u7528\u6237\u540d\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u8be5\u547d\u4ee4\u5c06\u5207\u6362\u5230root\u7528\u6237\u3002\u4e3a\u4e86\u907f\u514d\u5bc6\u7801\u4e0d\u53ef\u7528\u7684\u60c5\u51b5\uff0c\u8bf7\u4f7f\u7528sudo\u4ec5\u4f7f\u7528\u5f53\u524d\u7528\u6237\u5bc6\u7801\u5e76\u6839\u636e/etc/sudoers\u76ee\u5f55\u4e2d\u7684\u89c4\u5219\u5207\u6362\u5e10\u6237\u3002\u4f7f\u7528sudo-i\u83b7\u5f97\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u6839shell\u3002\n\u8981\u5728\u5f53\u524d\u4f1a\u8bdd\u4e2d\u5728\u524d\u53f0\u5e26\u56de\u4f5c\u4e1a\u5e76\u5c06\u5176\u53d1\u56de\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\u4f7f\u7528kill-l\u547d\u4ee4\u67e5\u770b\u53d1\u9001\u7ed9\u8fdb\u7a0b\u7684\u53ef\u7528\u4fe1\u53f7\uff0c\u5982\u4e2d\u65ad\u3001\u7ec8\u6b62\u3001\u6062\u590d\u7b49\u3002\n\u4f7f\u7528killall\u53ef\u4ee5\u4f7f\u7528\u53ef\u6267\u884c\u6587\u4ef6\u540d\u5bf9\u591a\u4e2a\u8fdb\u7a0b\u8fdb\u884c\u64cd\u4f5c\u3002\u4f7f\u7528pkill\u8fdb\u884c\u8fc7\u6ee4\uff0c\u63d0\u4f9b\u66f4\u591a\u9009\u9879\u3002\n\u5efa\u8bae\u60a8\u4e60\u60efbash\u8bed\u8a00\u53ca\u5176\u57fa\u7840\u77e5\u8bc6\uff0c\u5982\u6761\u4ef6\u3001\u5faa\u73af\u3001\u51fd\u6570\u7b49\u3002\n\u6d41\u884c\u7684\u6587\u4ef6\u3001\u6587\u672c\u5904\u7406\u548c\u64cd\u4f5c\u5b9e\u7528\u7a0b\u5e8f\u5bf9\u638c\u63e1\u975e\u5e38\u91cd\u8981\uff0c\u4f8b\u5982\uff1a\n\u4f7f\u7528\u201c\u65e5\u671f\u201d\u547d\u4ee4\u6253\u5370\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\u6216\u8fc7\u53bb\u548c\u5c06\u6765\u7684\u5176\u4ed6\u65e5\u671f\u548c\u65f6\u95f4\uff1a\nssh\u547d\u4ee4\u7528\u4e8e\u4f7f\u7528OpenSSH\u5e93\uff08\u4f7f\u7528\u516c\u94a5\u52a0\u5bc6\uff09\u4ee5\u5b89\u5168\u7684\u65b9\u5f0f\u8fde\u63a5\u5230\u670d\u52a1\u5668\u3002\u914d\u7f6e\u548c\u5df2\u77e5\u4e3b\u673a\u4fdd\u5b58\u5728/etc/ssh\u7cfb\u7edf\u8303\u56f4\u5185\u6216~/\u4e2d\u3002ssh/in\u5f53\u524d\u7528\u6237&#39\uff1b\u8fd9\u662f\u4e3b\u76ee\u5f55\u3002\u53e6\u4e00\u65b9\u9762\uff0cscp\u7528\u4e8e\u5b89\u5168\u5916\u58f3\u4e0a\u7684\u5b89\u5168\u590d\u5236\u3002\n\u4ee5\u4e0b\u547d\u4ee4\u5217\u8868\u7528\u4e8e\u751f\u6210\u548c\u7ba1\u7406\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684ssh\u5bc6\u94a5\uff1a\n\u6587\u4ef6\u6743\u9650\u5206\u4e3a\u4e09\u4e2a\u7ef4\u5ea6\uff1a\u6240\u6709\u8005\u7528\u6237\u3001\u6240\u6709\u8005\u548c#39\uff1bs\u7ec4\u548c\u5176\u4ed6\u7528\u6237\u3002\n\u663e\u793a\u6587\u4ef6\u548c\u76ee\u5f55\u7684\u6743\u9650\u53ef\u4ee5\u5206\u522b\u4f7f\u7528ls-l\u548cls-ld\u3002\n\u57fa\u672c\u6743\u9650\u7c7b\u578b\u5305\u62ec\uff1a\u5bf9\u6587\u4ef6\u5939\u548c\u6587\u4ef6\u7684\u8bfb\u53d6\uff08r\uff09\u3001\u5199\u5165\uff08w\uff09\u548c\u6267\u884c\uff08x\uff09\uff1a\n\u901a\u8fc7chmod\u547d\u4ee4\u8bbe\u7f6e\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u6743\u9650\uff0c\u53ef\u4ee5\u4f7f\u7528\u7b26\u53f7\u6216\u6570\u5b57\u3002\n\u7b26\u53f7/\u5b57\u6bcd\u65b9\u5f0f\u7528\u4e8eu\u3001g\u3001o\uff0c\u6216\u4f5c\u4e3a\u7528\u6237\u3001\u7ec4\u3001\u5176\u4ed6\u4eba\u6216\u6240\u6709\u4eba\u7684\u57fa\u7840\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u6570\u5b57\u662f\u6309\u7167\u7528\u6237\u3001\u7ec4\u548c\u5176\u4ed6\u4eba\u7684\u987a\u5e8f\u4e00\u6b21\u6027\u5199\u5165\u7684\u3002\u4ee5\u4e0b\u662f\u4e24\u79cd\u60c5\u51b5\u7684\u793a\u4f8b\uff1a\nchown\u7528\u4e8e\u5206\u522b\u5c06\u6587\u4ef6\u5939/\u6587\u4ef6\u7684\u6240\u6709\u6743\u66f4\u6539\u4e3a\u7528\u6237\u6216\u7ec4\u3002chgrp\u662f\u4e00\u79cd\u4ec5\u7528\u4e8e\u7ec4\u66f4\u6539\u7684\u5feb\u6377\u65b9\u5f0f\u3002\u6839\u6216\u6240\u6709\u8005\u662f\u552f\u4e00\u53ef\u4ee5\u6539\u53d8\u6240\u6709\u6743\u7684\u4eba\uff0c\u5728\u540e\u8005\u4e2d\uff0c\u5979\u9700\u8981\u5728\u6539\u53d8\u4e4b\u524d\u6210\u4e3a\u65b0\u76ee\u6807\u7fa4\u4f53\u7684\u4e00\u90e8\u5206\u3002\n\u6700\u540e\uff0c\u53ef\u4ee5\u5728\u5f00\u59cb\u5904\u6dfb\u52a0\u7b2c\u56db\u4e2a\u7ef4\u5ea6\uff0c\u4ee5\u8868\u793asuid s\u3001sgid s\u548csticky t\u7684\u7279\u6b8a\u6743\u9650\uff0c\u8fd9\u4e9b\u6743\u9650\u63a7\u5236\u6587\u4ef6\u7684\u53ef\u6267\u884c\u6027\u8d28\uff0c\u8fd9\u4e9b\u6587\u4ef6\u5c06\u5c5e\u4e8e\u6240\u6709\u8005\u7528\u6237\uff0c\u5e76\u4e14\u7ec4\u4e0e\u5f53\u524d\u7528\u6237\u65e0\u5173\u3002\u6700\u540e\u4e00\u4e2a\u662f\u59cb\u7ec8\u9650\u5236\u4ec5\u5bf9\u6839\u7528\u6237\u548c\u6240\u6709\u8005\u7684\u5220\u9664\u3002\n\u6700\u540e\uff0c\u4f7f\u7528pstree\u548cpgrep\u67e5\u770b\u6d41\u7a0b\u7236/\u5b50\u6811\uff0c\u5e76\u6309\u6a21\u5f0f\u641c\u7d22\u6d41\u7a0b\u3002\nsystemctl\u662f\u7528\u4e8e\u5217\u51fa\u3001\u7ba1\u7406\u548c\u68c0\u67e5\u540e\u53f0\u8fdb\u7a0b\u6216\u6240\u8c13\u7684\u5b88\u62a4\u8fdb\u7a0b\u7684\u547d\u4ee4\u3002\n\u67093\u79cd\u7c7b\u578b\u7684\u5b88\u62a4\u7a0b\u5e8f\uff1a1\u3002\u670d\u52a1\uff0c2\u3002\u63d2\u5ea7\uff0c3\u3002\u8def\u5f84\u3002\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u7cfb\u7edf&#39\uff1b\u5728\u6bcf\u4e2a\u8fc7\u7a0b\u4e2d\uff1a\n\u542f\u7528\u548c\u7981\u7528\u72b6\u6001\u8868\u793a\u670d\u52a1\u5728\u542f\u52a8\u65f6\u662f\u5426\u88ab\u6fc0\u6d3b\u3002\u5b50\u547d\u4ee4enable\u548cdisable\u53ef\u7528\u4e8e\u63a7\u5236\u6b64\u65b9\u9762\u3002\n\u8981\u67e5\u770b\u5b88\u62a4\u7a0b\u5e8f\u7684\u72b6\u6001\uff0c\u8bf7\u4f7f\u7528status\u547d\u4ee4\u6216\u5176\u72b6\u6001\u5feb\u6377\u65b9\u5f0f\uff1a\n\u6700\u540e\uff0c\u4e3a\u4e86\u89e3\u51b3\u4f7f\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u51b2\u7a81\u670d\u52a1\uff0c\u53ef\u4ee5\u4f7f\u7528mask\u548cunmask\u547d\u4ee4\u5c06deamons\u914d\u7f6e\u6307\u5411dev/null\uff0c\u7136\u540e\u5206\u522b\u8fd4\u56de\u6b63\u5e38\u3002\n1991\u5e74\uff0cLinux\u5185\u6838\u7531Linus Torvalds\u5f15\u5165\uff0c\u5e76\u4e0eGNU\u9879\u76ee\u76f8\u7ed3\u5408\uff0cGNU\u9879\u76ee\u4e4b\u524d\u662f\u57281983-1984\u5e74\u4f5c\u4e3a\u5f00\u6e90\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u548c\u7ec4\u4ef6\u521b\u5efa\u7684\u3002\u8fd9\u5f62\u6210\u4e86\u6211\u4eec\u4eca\u5929\u6240\u8bf4\u7684Linux\u53d1\u884c\u7248\uff0c\u4e00\u79cd\u7c7b\u4f3cUnix\u7684\u64cd\u4f5c\u7cfb\u7edf\u3002\n\u5982\u4eca\uff0c\u5927\u591a\u6570\u786c\u4ef6\u5e73\u53f0\u90fd\u652f\u6301Linux\u64cd\u4f5c\u7cfb\u7edf\u3002\u4ecei386\u5230SPARC\uff0cLinux\u51e0\u4e4e\u9002\u7528\u4e8e\u6240\u6709\u4f53\u7cfb\u7ed3\u6784\u3002\u5982\u4eca\uff0c\u4ece\u624b\u8868\u3001\u7535\u89c6\u3001\u624b\u673a\u3001\u670d\u52a1\u5668\u3001\u53f0\u5f0f\u673a\uff0c\u751a\u81f3\u81ea\u52a8\u552e\u8d27\u673a\uff0c\u51e0\u4e4e\u6240\u6709\u7c7b\u578b\u7684\u8bbe\u5907\u4e0a\u90fd\u53ef\u4ee5\u627e\u5230Linux\u3002\nLinux\u53d1\u884c\u7248\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u4e4b\u4e00\u662f\u5305\u7ba1\u7406\u90e8\u5206\u4ee5\u53ca\u8f6f\u4ef6\u7684\u5b89\u88c5\u548c\u7ba1\u7406\u65b9\u5f0f\u3002\u6709\u591a\u79cd\u8f6f\u4ef6\u5305\u683c\u5f0f\uff0c\u6700\u5e38\u89c1\u7684\u662fDebian\uff08deb\uff09\u3001RedHat\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\uff08RPM\uff09\u3002\n\u4f60\u53ef\u4ee5\u76d1\u63a7\u7cfb\u7edf&#39\uff1bs\u8d44\u6e90\u4f7f\u7528\u3001\u6b63\u5e38\u8fd0\u884c\u65f6\u95f4\u548c\u4f1a\u8bdd#39\uff1b\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\uff0c\u8d1f\u8f7d\u6760\u6746\u5982\u4e0b\u6240\u793a\uff1a\n\u7cfb\u7edf\u4e8b\u4ef6\u548c\u8fdb\u7a0b\u8ddf\u8e2a\u7684\u65e5\u5fd7\u901a\u5e38\u4fdd\u5b58\u5728/var/log\u76ee\u5f55\u4e2d\u3002\u6709\u4e24\u79cd\u7c7b\u578b\u7684\u6301\u4e45\u65e5\u5fd7\uff08rsyslogs\uff09\u548c\u4e34\u65f6\u65e5\u5fd7\uff08journald\uff09\uff0c\u5b83\u4eec\u4f1a\u5728boots\u4e2d\u64e6\u9664\u3002\u65e5\u5fd7\u5305\u62ec\u7cfb\u7edf\u65e5\u5fd7\u534f\u8bae\u6d88\u606f\u3001\u4e8b\u4ef6\u3001\u5b89\u5168\u4e8b\u4ef6\u3001\u90ae\u4ef6\u65e5\u5fd7\u3001\u4f5c\u4e1a\u65e5\u5fd7\u548c\u5176\u4ed6\u7a0b\u5e8f\u65e5\u5fd7\u3002\n\u5982\u7b2c\uff083\uff09\u8282\u6240\u8ff0\uff0c\u4f7f\u7528cat\u3001head\u3001tail\u547d\u4ee4\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u67e5\u770b\u6216\u8ddf\u8e2a\u65e5\u5fd7\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u4f7f\u7528journalctl\u67e5\u770b\u548c\u8ddf\u8e2a\u7cfb\u7edf&#39\uff1bs\u65e5\u5fd7\u65e5\u5fd7\u6761\u76ee\uff0c\u5b83\u4f4d\u4e8erun/log/journal\u4e2d\u3002\n\u4e3a\u4e86\u6709\u6548\u5730\u8fdb\u884c\u7cfb\u7edf\u7f51\u7edc\u914d\u7f6e\u548c\u6545\u969c\u6392\u9664\uff0c\u6709\u5fc5\u8981\u56de\u987e\u7f51\u7edc/\u4e92\u8054\u7f51\u534f\u8bae\uff08TCP/UDP\uff09\u548cIPv4/IPv6\u6982\u5ff5\uff08\u53c2\u80031\uff09\u3001\uff08\u53c2\u80032\uff09\u3002\n\u4e3b\u673a\u8fde\u63a5\u5728/etc/resolv\u4e2d\u914d\u7f6e\u4e3a\u52a8\u6001\u7ba1\u7406\uff08DHCP\uff09\u3002conf\u6216\u624b\u52a8\u8f93\u5165/etc/hosts\u6587\u4ef6\u3002\nNetworkManager\u662fLinux\u4e2d\u7ba1\u7406Network\u914d\u7f6e\u7684\u6838\u5fc3\u529f\u80fd\u3002nmcli\u662f\u7ec8\u7aef\u5b9e\u7528\u7a0b\u5e8f\u3002\n\u7cfb\u7edf\u5305\u7684\u7ba1\u7406\u56e0linux\u53d1\u884c\u7248\u800c\u5f02\uff0c\u4f46\u57fa\u672c\u90e8\u5206\u662f\u76f8\u540c\u7684\uff08\u5b89\u88c5\u3001\u5b58\u50a8\u5e93\u3001\u5305\u7ba1\u7406\u5668\u7b49\uff09\u3002\u5bf9\u4e8e\u57fa\u4e8eDebian\u7684\u53d1\u884c\u7248\uff0capt\u662f\u5305\u7ba1\u7406\u5668\uff0c\u800c\u5bf9\u4e8eFedora/RHEL\uff0c\u5219\u4f7f\u7528yum\u3002\n\u6700\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8bbe\u7f6e\u548c\u66f4\u65b0\u5305\u6e90\u56de\u8d2d\u534f\u8bae\uff1a\nLinux\u662f\u4e3a\u4e00\u4e2a\u7edf\u4e00\u7684\u6587\u4ef6\u7cfb\u7edf\u800c\u5f62\u6210\u7684\uff0c\u5b83\u7531\u8fde\u63a5\u5230\u7cfb\u7edf\u7684\u786c\u4ef6\u6216\u865a\u62df\u5b58\u50a8\u8bbe\u5907\u63d0\u4f9b\u7684\u6240\u6709\u6587\u4ef6\u7cfb\u7edf\u7ec4\u6210\u3002\u672c\u8d28\u4e0a\uff0clinux\u4e2d\u7684\u6240\u6709\u5185\u5bb9\u90fd\u662f\u4e00\u4e2a\u6587\u4ef6\u3002\u53ef\u4ee5\u5c06\u5176\u89c6\u4e3a\u4ece\u6839\u76ee\u5f55/\u5f00\u59cb\u7684\u5d4c\u5957\u76ee\u5f55\u7684\u53cd\u5411\u6811\u3002\n\u5757\u8bbe\u5907\u662f\u5185\u6838\u68c0\u6d4b\u548c\u8bc6\u522b\u539f\u59cb\u5b58\u50a8\u8bbe\u5907\uff08HDD\u3001SSD\u3001USB\u7b49\uff09\u7684\u673a\u5236\u3002\u6b63\u5982\u540d\u79f0\u6240\u793a\uff0c\u5185\u6838\u901a\u8fc7\u56fa\u5b9a\u5927\u5c0f\u7684\u5757\uff08\u7a7a\u95f4\u5757\uff09\u8fdb\u884c\u63a5\u53e3\u548c\u5f15\u7528\u3002\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5757\u8bbe\u5907\u5b58\u50a8\u5728/dev\u76ee\u5f55\u4e2d\uff0c\u5e76\u5177\u6709\u5b57\u6bcd\u547d\u540d\u7ea6\u5b9a\uff0c\u5982/dev/sda\u3001/dev/sdb\u3001/dev/vda\uff0c\u4ee5\u53ca\u5206\u533a/dev/sda3\u7684\u9644\u52a0\u6570\u5b57\u3002\u5c06\u5757\u8bbe\u5907\u5b89\u88c5\u5230\u7cfb\u7edf\u4e2d\u662f\u901a\u8fc7\u5c06\u5176\u5b89\u88c5\u5230\u7cfb\u7edf\u4e2d\u7684\u76ee\u5f55\u6765\u5b8c\u6210\u7684\u3002\n\u5c06\u78c1\u76d8\u62c6\u5206\u4e3a\u53ef\u91cd\u590d\u4f7f\u7528\u7684\u8f83\u5c0f\u5355\u5143\uff0c\u6bcf\u4e2a\u5355\u5143\u90fd\u88ab\u89c6\u4e3a\u81ea\u5df1\u7684\u78c1\u76d8\u3002\u4e3b\u8981\u7684\u5206\u533a\u65b9\u6cd5\u662fMBR\uff08\u4e3b\u5f15\u5bfc\u8bb0\u5f55\uff09\u548cGPT\uff08GUID\u5206\u533a\u8868\uff09\u3002\n\u5c06\u8bbe\u5907\u51c6\u5907\u4e3a\u8981\u8bfb\u53d6\u548c\u5199\u5165\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\u5b58\u5728\u8bb8\u591a\u6587\u4ef6\u7cfb\u7edf\u683c\u5f0f\uff0c\u5982\uff1a\n\u6b64\u5916\uff0cLVM\u548cRAID\u662f\u53e6\u5916\u4e24\u4e2a\u6982\u5ff5\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u6982\u5ff5\u4e0e\u5206\u533a\u76f8\u53cd\uff0c\u5e76\u5c06\u591a\u4e2a\u78c1\u76d8\u5206\u7ec4\u4e3a\u4e00\u4e2a\u903b\u8f91\u5377\u3002\u540e\u8005\uff08\u72ec\u7acb\u78c1\u76d8\u5197\u4f59\u9635\u5217\uff09\u7528\u4e8e\u6784\u5efa\u66f4\u9ad8\u7ea7\u7684\u5b58\u50a8\u8bbe\u7f6e\uff0c\u4ee5\u786e\u4fdd\u66f4\u9ad8\u7684\u53ef\u7528\u6027\u3001\u5197\u4f59\u6027\u3001RD\u7b49\u3002\n\u8981\u67e5\u770b\u5f53\u524d\u8fde\u63a5\u7684\u6587\u4ef6\u7cfb\u7edf\u7684\u6302\u8f7d\u548c\u76ee\u5f55\u7a7a\u95f4\u4f7f\u7528\u60c5\u51b5\uff0c\u8bf7\u8fd0\u884cdf/du\u547d\u4ee4\uff1a\n\u6c38\u4e45\u5b89\u88c5\u8fc7\u7a0b\u4f9d\u8d56\u4e8e/etc/fstab\u6587\u4ef6\u6765\u786e\u5b9a\u8981\u5728\u542f\u52a8\u65f6\u5b89\u88c5\u7684\u8bbe\u5907\u3002\n\u4f7f\u7528man\u547d\u4ee4\u67e5\u627e\u6709\u5173\u7cfb\u7edf\u4e2d\u547d\u4ee4\u6216\u4e3b\u9898\u7684\u624b\u518c\u4fe1\u606f\u3002\n\u4e24\u8005\u90fd\u63d0\u4f9b\u5feb\u6377\u65b9\u5f0f\u3001\u5bfc\u822a\u548c\u641c\u7d22\u529f\u80fd\uff08\u4f8b\u5982\uff0c\u5728\u624b\u518c\u4e2d\u641c\u7d22man-K&lt\uff1b\u5173\u952e\u5b57\uff09\u3002", "note_en": "A study notes book for the common knowledge and tasks of a Linux system admin.\n     List the current active process with their statuses, numbers, resource usage, etc. using the command  ps .\n  Quoting man&#39;s page documentaiton on  ps : &#34;A different set of processes can be selected for display by using any combination of the  -a, -G, -g, -p, -T, -t, -U, and -u  options. If more than one of these options are given, then ps will select all processes which are matched by at least one of the given options&#34;.\n The daemon  systemd  process starts during boot time, and remains active until the shutdown. It&#39;s the parent process for all other process in the system.\n Each process contains several main parts, such as: PID, state, virtual space address (memory), threads, network and file descriptors, scheduler information, and links. Processes are controlled and respond to signals. The states that a process can transistion among are depicted below:\n  To observe the states and other information of the processes interatively, use the  top  command.\n        Each user in the system is associated with unique user id  uid , and each group is associated with  gid .\n      To restrict service user accounts (e.g. accounts for web servers), the shell can be set to  nologin :\n  To change a user password, use the command  passwd  interactively. Additionally  change  command sets the password policy in the system.\n Use the command  su - &lt;username&gt;  to switch to the specified user. which will promote for her password. Running the command without username will switch to the root user. To avoid cases where password is not available, use  sudo  to switch accounts using current user password only and according to rules in  /etc/sudoers  directory. Use  sudo -i  to gain an interactive root shell.\n    To bring back a job in the foreground in the current session, and send it back use the following:\n  Use the command  kill -l  to see the available signals to send to processes, like interrupt, terminate, resume, etc.\n  Use  killall  to operate on multiple processes using their executable name. Use  pkill  for filtering with more options.\n   Getting used to     bash language and its fundamentals   like conditions, looping, functions, etc. is recommended.\n The popular files and text processing and manipulation utilites are important to master, such as:\n  Use the command  date  to print the current date and time or others in the past and future:\n  The  ssh  command used to connect to servers in secure manner using OpenSSH library using public key cryptography. The configuration and known hosts are kept under  /etc/ssh  system-wide or in  ~/.ssh/  in current user&#39;s home directory. On the other hand  scp  is used for secure copy on secure shell fashion.\n The following list of commands are used to generate and manage ssh keys between client and server:\n   A file permissions are considered in three dimensions: the owner user, the owner&#39;s group, and rest of other users.\n Showing the permisison of files and directories can be using  ls -l ,  ls -ld  respectively.\n The basic permission types are: read (r), write (w), and execute (x) on both folders and files:\n  Setting the files and folders permission is done by  chmod  command and can be using symbols or digits.\n The symbols/letter way is made for  u ,  g ,  o , or  a  basis for the user, group, others, or all. Whereas, the digits are written for all at once in sequence for user, group, and others. Examples are below for both cases:\n  chown  is used to change the ownership of folder/files to users or groups respectively.  chgrp  is a shortcut to group change only. The root or the owner are only people can change ownership and in the latter, she needs to be part of the new target group before the change.\n  Lastly, a fourth dimension at the start can be added to represent the special permissions of  suid s ,  sgid s , and  sticky t  which control executable nature of files to be of owner users, and groups regardless of the current user. The last is to restrict deletion for only the root and owner always.\n  Finally, use  pstree  and  pgrep  to view process parent/child tree and search for processes by pattern.\n   systemctl  is the command used to list, manage, and check background processes or so called  daemons .\n   There are 3 types of daemons: 1. services, 2. sockets, 3. paths. Use the following to see the system&#39;s processes in each:\n  The states  enabled  and  disabled  indicate wether a service is lanuched on startup or not. The subcommands  enable  and  disable  can be used to control this aspect.\n To view the status of a daemon use the  status  command or its state shortcuts:\n     Finally, to resolve conflicting services making them unavailable, the  mask  and  unmask  commands can be used to point a deamons config to  dev/null  then back to normal respectively.\n  In 1991, Linux kernel was introduced by Linus Torvalds, and combined with GNU project, which was previously created in 1983-1984 as open source OS programs and components. This formed what we call today Linux distribution, a Unix-like operating system.\n Today the Linux operating system is supported on most hardware platforms.     Linux works on almost every architecture from i386 to SPARC  . Linux can be found on almost every type of device today, from watches, televisions, mobile phones, servers, desktops, and even vending machines.\n One of the major distinction between Linux distributions is the package management part and how software is installed and managed. There are multiple package formats, and the most common ones are Debian (deb), RedHat Package Manager (RPM).\n        You can monitor the system&#39;s resources usage, uptime, and sessions&#39; load leverages over time as follows:\n   The logs of the system events and processes traces are usually kept in  /var/log  directory. There are two categories of persistent logs ( rsyslogs ) and temporary logs ( journald ) that are wiped across boots. Logs include syslog protocol messages, events, security incidents, mailing logs, jobs logs, and other program logs.\n As explored in section (3), use  cat ,  head ,  tail  commands to interactively see or follow the logs.\n    On the other hand, use  journalctl  to view and follow the system&#39;s  journald  log entries, which resides in  run/log/journal .\n   For effective work on the system network configurations and troubleshooting, it is essential to review network/internet protocols (TCP/UDP) and IPv4/IPv6 concepts     (Ref.1)  ,     (Ref.2)  .\n    The host connection is either managed dynamically ( DHCP ) configured in  /etc/resolv.conf  or manually in  /etc/hosts  file.\n       NetworkManager  is the kernel feature     to manage netowrk configurations in Linux  .  nmcli  is the terminal utility.\n   Managing the system packages varies depending on linux distributions, but the essential parts are the same (installation, repositories, package managers, etc.). For Debian based distribtuions,  apt  is the package manager, whereas for Fedora / RHEL,  yum  is used.\n               And finally, the package source repos can be set up and updated through the following:\n   Linux is formed for a unified file-system consists of all file systems provided by the hardware or virtual storage devices attached to the system. Essentially, everything in linux is a file. It can be viewed as a reversed tree of nested directories starting from the root directory  / .\n  Block devices are the mechanism that the kernel detects and identify raw storage devices (HDD, SSD, USBs, ..).     As the name indicates, the kernel interfaces and references them by fixed-size blocks (chunks of spaces)  . The block devices are stored in  /dev  directory by the OS, and has letters naming convention such as  /dev/sda ,  /dev/sdb ,  /dev/vda , and appended numbers in case of partitions  /dev/sda3 . The attachment of the block device into the system is done through mounting it to a directory in the system.\n   Breaking the disk into reusable smaller units, each treated as own disk. The main partitioning methods are MBR (Master Boot Record) and GPT (GUID Partition Table).\n  Prepeating the device as a file-system to be read and write to. Many file-system formats exists like:\n  Additionall, LVM and RAID are another two concepts where the first operate on the opposite of partitioning and group multiple disks as one logical volume. The latter (Redundant Array of Independent Disks) is used to architect more advanced storage setup to ensure higher availablity, redundency, RD, etc.\n To see the currently attached file system with mounts and a directory space usage, run  df / du  commands:\n   The permanent mounting process rely on  /etc/fstab  file to determine devices to mount on the boot time.\n   Use the  man  command to lookup the manual information on commands or topics in the system.\n  Both provide shortcuts, navigation, and searching capablities (e.g.  man -K &lt;keyword  to search across manual).", "posttime": "2022-02-24 21:12:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "linux,\u7cfb\u7edf,sysops", "title": "Linux\u7cfb\u7edf\u64cd\u4f5c\u624b\u518c", "title_en": "Linux Sysops Handbook", "transed": 1, "url": "https://abarrak.gitbook.io/linux-sysops-handbook", "via": "", "real_tags": ["linux", "\u7cfb\u7edf", "sysops"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074743, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2022\u5e742\u670823\u65e5\n\u65e0\u8bc4\u8bba\uff1a", "note_en": "February 23, 2022\n    No comments :", "posttime": "2022-02-24 21:11:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "arm,kernel,\u8bc4\u8bba", "title": "\u964d\u4f4e32\u4f4dARM\u4e0a\u7684\u5185\u6838\u98ce\u9669", "title_en": "Mitigating kernel risks on 32-bit ARM", "transed": 1, "url": "https://security.googleblog.com/2022/02/mitigating-kernel-risks-on-32-bit-arm.html", "via": "", "real_tags": ["arm", "kernel", "\u8bc4\u8bba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074742, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u5c0f\u6307\u5357\u5c06\u5e2e\u52a9\u4f60\u8bbe\u7f6e\u4f60\u7684\u7535\u8def\u677f\uff0c\u5f00\u59cb\u4f7f\u7528jupyter\u7b14\u8bb0\u672c\n1.iotSDR-7010\u62167020\u677f2\u3002\u914d\u5907\u517c\u5bb9\u6d4f\u89c8\u5668\u7684\u7535\u8111\uff08\u8c37\u6b4cChrome\uff093\u3002\u4ee5\u592a\u7f51\u7535\u7f06\uff08100M\u62161G\uff094\u3002\u7535\u6e90\u63d2\u5ea75\u7684\u5fae\u578bUSB\u6570\u636e\u7ebf\u62165V\u7535\u6e90\u9002\u914d\u5668\u3002\u5e26\u6709\u9884\u52a0\u8f7d\u56fe\u50cf\u7684Micro SD\u5361\uff0810\u7ea7\uff09\uff08\u5efa\u8bae16GB\uff09\n\u6309\u7167\u8680\u523b\u673a\u8bf4\u660e\u5c06\u56fe\u50cf\u5199\u5165\u7a7a\u767dMicro SD\u5361\uff08\u5efa\u8bae16GB\uff09\n\u5c06**\u5f15\u5bfc**\u8df3\u7ebf\u8bbe\u7f6e\u5230SD\u4f4d\u7f6e\u3002\uff08\u8fd9\u4f1a\u5c06\u4e3b\u677f\u8bbe\u7f6e\u4e3a\u4eceMicro SD\u5361\u5f15\u5bfcLinux\uff09\n\u5c06\u5e26\u6709\u5404\u81ea\u9884\u52a0\u8f7d\u7684iotSDR\u6620\u50cf\u6587\u4ef6\u7684Micro SD\u5361\u63d2\u5165Micro SD\u5361\u63d2\u69fd\u8fde\u63a5\u4ee5\u592a\u7f51\u7535\u7f06\uff0c\u4e00\u7aef\u5e26\u6709iotSDR\uff0c\u53e6\u4e00\u7aef\u5e26\u6709PC\u5c06USB\u7535\u7f06\u8fde\u63a5\u5230PC/\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u5e76\u8fde\u63a5\u5230\u677f\u4e0a\u7684PWR+UART MicroUSB\u7aef\u53e3\uff08\u7535\u6e90\u63d2\u5ea7\u65c1\u8fb9\uff09\u3002iotSDR\u677f\u73b0\u5728\u5e94\u901a\u7535\u5e76\u8fdb\u5165\u5f15\u5bfc\u987a\u5e8f\n\u8bbe\u7f6eSD\u5361\u5934\u4f4d\u7f6e\uff0c\u63d2\u5165\u5e26\u6709\u9884\u52a0\u8f7d\u56fe\u50cf\u6587\u4ef6\u7684SD\u5361\uff0c\u5e76\u8fde\u63a5USB\u7535\u7f06\u540e\uff0c\u7eff\u8272LED\u5c06\u7acb\u5373\u70b9\u4eae\uff0c\u4ee5\u786e\u8ba4\u7535\u8def\u677f\u5df2\u901a\u7535\u3002\u63a5\u4e0b\u6765\uff0c\u51e0\u79d2\u949f\u540e\uff0c\u84dd\u8272/\u5b8c\u6210LED\u5e94\u4eae\u8d77\uff0c\u4ee5\u663e\u793a\u4f4d\u6587\u4ef6\u5df2\u52a0\u8f7d\u5230Zynq\u00ae\u8bbe\u5907\u4e2d\u3002\u4e00\u6bb5\u65f6\u95f4\u540e\uff0cLinux\u64cd\u4f5c\u7cfb\u7edf\u5c06\u542f\u52a8\u5e76\u51c6\u5907\u597d\u4f7f\u7528\u3002\n\u7535\u8def\u677f\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u60a8\u53ef\u4ee5\u5c06\u6d4f\u89c8\u5668\u8fde\u63a5\u5230\u5b83\uff0c\u5f00\u59cb\u4f7f\u7528Jupyter\u7b14\u8bb0\u672c\u7535\u8111\u3002\n\u5728\u6d4f\u89c8\u5668\u4e0a\u8fd0\u884cJupyter notebook\u4e4b\u524d\uff0c\u8bf7\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u914d\u7f6e\u4e3b\u673aPC\u548ciotSDR\u4e4b\u95f4\u7684\u4ee5\u592a\u7f51\u8fde\u63a5\n1.\u4ece192.168.2\u7684\u6c60\u4e2d\u4e3a\u8ba1\u7b97\u673a\u5206\u914d\u4e00\u4e2a\u9759\u6001IP\u5730\u5740\u3002xx\uff08\u9664.99\u548c.1\u5916\uff092\u3002\u5c06\u7535\u8def\u677f\u8fde\u63a5\u5230\u8ba1\u7b97\u673a\u7684\u4ee5\u592a\u7f51\u7aef\u53e33\u3002ping\u81f3192.168.2.99\u4ee5\u786e\u8ba4\u60a8\u5df2\u8fde\u63a54\u3002\u73b0\u5728\u6253\u5f00chrome\u6d4f\u89c8\u5668\u5e76\u5199\u5165http://192.168.2.99:9090/lab\u5728\u641c\u7d22\u680f5\u4e2d\u3002\u8f93\u5165\u5bc6\u7801\u7a97\u53e3\u5c06\u51fa\u73b0\u5bc6\u7801\u4e3a\uff1axilinx\n\u5728\u201c\u5bc6\u7801\u201d\u9009\u9879\u5361\u7a97\u53e3\u4e4b\u540e\uff0c\u7f51\u9875\u5de6\u4fa7\u4f1a\u51fa\u73b0\u4e24\u4e2a\u7b14\u8bb0\u672c\u6587\u4ef6\u5939\uff0c\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u4e9b\u6587\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u8fd0\u884c\u6f14\u793a\u9879\u76ee\u3002\n\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u8054\u7cfb\u6211\u4eecinfo@embedinn.com\u6216\u8005\u4e0d\u548c\u8c10https://discord.gg/kzxS8gsv7D", "note_en": "This small guide will help you setup your board to get started with the jupyter notebook\n   1. iotSDR-7010 or 7020 board 2. Computer with compatible browser (Google Chrome) 3. Ethernet cable (100M or 1G) 4. Micro USB data cable OR Power Adapter of 5V for Power Jack 5. Micro-SD card(class 10) with preloaded image (16GB recommended)\n    following the Etcher instructions Write the image to a blank Micro SD card (16GB recommended)\n    Set the ** Boot** jumper to the SD position. (This sets the board to boot Linux from the Micro-SD card)\n Insert the Micro SD card with respective pre-loaded iotSDR image file into the Micro SD card slotConnect the Ethernet cable, one end with iotSDR and other with PCConnect the USB cable to your PC/Laptop, and to the PWR + UART MicroUSB porton the board (next to power jack) iotSDR Board should now power up and get into boot sequence\n   After setting the SD card header position, inserting the SD card with pre-loaded image file, and the USB cable is connected, the green LED will come on immediately to confirm that the board has power. Following to that, after few seconds, the Blue / Done LED should light up to show that bit file is loaded in the Zynq\u00ae device. After some time The Linux OS will be booted and ready for use.\n Once board setup up is complete, you can connect your browser to it to start using Jupyter notebook.\n Follow the below procedure to configure ethernet connection between Host PC and iotSDR before running Jupyter notebook on browser\n 1. Assign your computer a static IP address from the pool of 192.168.2.xx (except .99 and .1) 2. Connect the board to your computer\u2019s Ethernet port 3. ping to 192.168.2.99 to confirm that you are connected 4. Now open chrome browser and write http://192.168.2.99:9090/lab in the search bar 5. Enter password window will appear The password is: xilinx\n    After the password tab window, two folder of the notebooks on the left of webpage will appear and the files can be accessed and user can run the demo projects.\n    if you are facing any issues, feel free to contact us at  info@embedinn.com or at Discord  https://discord.gg/kzxS8gsv7D", "posttime": "2022-02-24 21:09:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u53d1,\u7269\u8054\u7f51,\u8054\u7f51,stop,\u8fde\u63a5", "title": "iotSDR\uff1a\u4e00\u7ad9\u5f0f\u7269\u8054\u7f51\u5f00\u53d1\u677f", "title_en": "iotSDR: One-Stop IoT Development Board for All Things Radio", "transed": 1, "url": "https://github.com/embedinn/iotSDR", "via": "", "real_tags": ["\u5f00\u53d1", "\u7269\u8054\u7f51", "\u8054\u7f51", "stop", "\u8fde\u63a5"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074741, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "YouTube\u7684\u5b98\u65b9\u7f51\u7ad9\u2122 \u4e00\u4e2a\u7ecf\u8fc7\u6539\u9020\u7684YouTube\u2122 Android\u5ba2\u6237\u7aef\u3002", "note_en": "The official website of YouTube\u2122 Vanced - a modded YouTube\u2122 client for Android.", "posttime": "2022-02-24 20:42:24", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "android,youtube,\u5e7f\u544a", "title": "Vanced\uff1aAndroid\u7248YouTube\u5e7f\u544a\u62e6\u622a\u5668", "title_en": "Vanced: YouTube adblocker for Android", "transed": 1, "url": "https://vancedapp.com/", "via": "", "real_tags": ["android", "youtube", "\u5e7f\u544a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074740, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2015\u5e74\uff0c\u963f\u80af\u8272\u5dde\u8d39\u8036\u7279\u7ef4\u5c14\u5e02\u8bae\u4f1a\u91c7\u7eb3\u4e86\u4e00\u4e2a\u6fc0\u8fdb\u4f46\u7b80\u5355\u7684\u60f3\u6cd5\uff1a\u53d6\u6d88\u6700\u4f4e\u505c\u8f66\u8981\u6c42\uff0c\u8ba9\u4f01\u4e1a\u81ea\u884c\u51b3\u5b9a\u9700\u8981\u591a\u5c11\u505c\u8f66\u4f4d\u3002\n\u5728\u8fea\u514b\u68ee\u8857\u7684\u4e3b\u8981\u8857\u9053\u4e0a\u884c\u8d70\u7684\u666e\u901a\u4eba\u53ef\u80fd\u4f1a\u60ca\u8bb6\u5730\u53d1\u73b0\uff0c\u8fd9\u5ea7\u62e5\u67099.4\u4e07\u4eba\u53e3\u7684\u4e0d\u65ad\u589e\u957f\u7684\u57ce\u5e02\u53ef\u80fd\u662f\u7f8e\u56fd\u7b2c\u4e00\u4e2a\u5728\u5168\u5e02\u8303\u56f4\u5185\u53d6\u6d88\u5546\u4e1a\u505c\u8f66\u6700\u4f4e\u9650\u989d\u7684\u57ce\u5e02\u3002\u6253\u7834\u5206\u533a\u6cd5\u4e2d\u8be6\u7ec6\u8bf4\u660e\u6bcf\u5bb6\u4f01\u4e1a\u9700\u8981\u591a\u5c11\u505c\u8f66\u4f4d\u624d\u80fd\u4e3a\u5f53\u5730\u4f01\u4e1a\u5bb6\u63d0\u4f9b\u65b0\u673a\u4f1a\u7684\u90e8\u5206\u3002\u8be5\u6761\u4f8b\u4fdd\u7559\u4e86\u6700\u9ad8\u505c\u8f66\u7387\uff0c\u5e76\u6ca1\u6709\u50cf\u5e02\u68c0\u5bdf\u5b98\u6240\u8b66\u544a\u7684\u90a3\u6837\uff0c\u523a\u6fc0\u91cd\u5efa\u70ed\u6f6e\uff0c\u4e5f\u6ca1\u6709\u5e26\u6765\u505c\u8f66\u6295\u8bc9\u548c\u623f\u4ef7\u66b4\u8dcc\u7684\u5f0a\u75c5\u3002\n\u6c64\u666e\u68ee\u5728\u5de5\u4f5c\u51e0\u5e74\u540e\u63d0\u51fa\u4e86\u53d6\u6d88\u505c\u8f66\u6700\u4f4e\u9650\u989d\u7684\u7406\u7531\u3002\u4ed6\u8bf4\uff1a\u201c\u4f5c\u4e3a\u4e00\u540d\u57ce\u5e02\u89c4\u5212\u5e08\uff0c\u4f60\u4f1a\u63a5\u5230\uff08\u6765\u81ea\u623f\u5730\u4ea7\u7ecf\u7eaa\u4eba\u548c\u6f5c\u5728\u6295\u8d44\u8005\u7684\uff09\u7535\u8bdd\uff0c\u8be2\u95ee\u8fd9\u5904\u623f\u4ea7\u6216\u8fd9\u7247\u6f5c\u5728\u623f\u4ea7\u7684\u53ef\u80fd\u6027\u3002\u201d\u3002\n\u4ed6\u5f00\u59cb\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u5728\u76f8\u540c\u7684\u5c5e\u6027\u4e2d\u770b\u5230\u4e00\u79cd\u6a21\u5f0f\u3002\u57ce\u5e02\u89c4\u5219\u4e2d\u7684\u67d0\u4e9b\u4e1c\u897f\u4f3c\u4e4e\u662f\u8ba9\u8fd9\u4e9b\u5efa\u7b51\u7a7a\u7f6e\uff0c\u963b\u6b62\u4efb\u4f55\u4eba\u7684\u65b0\u60f3\u6cd5\u624e\u6839\u3002\n\u8fd9\u4e9b\u7a7a\u7f6e\u591a\u5e74\u7684\u5546\u4e1a\u5efa\u7b51\u6709\u7740\u76f8\u4f3c\u7684\u7279\u5f81\uff1a\u4f4d\u4e8e\u8f83\u5c0f\u5730\u5757\u4e0a\u7684\u8001\u5efa\u7b51\uff0c\u901a\u5e38\u4f4d\u4e8e\u5e02\u4e2d\u5fc3\u9644\u8fd1\u3002\u5728\u4e00\u4e2a\u53c8\u4e00\u4e2a\u6848\u4f8b\u4e2d\uff0c\u5173\u952e\u95ee\u9898\u662f\u505c\u8f66\uff0c\u7279\u522b\u662f\u6240\u9700\u7684\u6700\u4f4e\u505c\u8f66\u4f4d\u6570\u91cf\u3002\u4e1a\u4e3b\u6709\u53ef\u80fd\u83b7\u5f97\u89c4\u5212\u8bb8\u53ef\uff0c\u4ee5\u51cf\u5c11\u6240\u9700\u7684\u505c\u8f66\u91cf\uff0c\u4f46\u4eba\u4eec\u5f88\u5c11\u5c1d\u8bd5\u3002\n\u73b0\u5728\uff0c\u5728\u6388\u6743\u88ab\u53d6\u6d88\u516d\u5e74\u540e\uff0c\u8fd9\u4e9b\u5730\u5740\u91cd\u65b0\u52a0\u5165\u4e86\u8d39\u8036\u7279\u7ef4\u5c14\u84ec\u52c3\u53d1\u5c55\u7684\u7ecf\u6d4e\u3002\n\u6c64\u666e\u68ee\u8bf4\uff1a\u201c\u6211\u53d1\u73b0\u7684\u90a3\u4e9b\u6c38\u4e45\u6216\u6c38\u4e45\u65e0\u6cd5\u4f7f\u7528\u7684\u5efa\u7b51\u5f88\u5feb\u5c31\u88ab\u8d2d\u4e70\u3001\u91cd\u65b0\u5f00\u53d1\uff0c\u73b0\u5728\u6b63\u5728\u4f7f\u7528\u4e2d\u3002\u201d\u3002\n\u5176\u4e2d\u4e00\u4e2a\u5730\u65b9\u662f\u5357\u5b66\u9662\u5927\u9053110\u53f7\u3002\u8d39\u8036\u7279\u7ef4\u5c14\u5c45\u6c11\u5218\u6613\u65af\u00b7\u8521\u65af\uff08Lewis Chase\uff09\u8bf4\u670d\u4ed6\u513f\u65f6\u7684\u670b\u53cb\u3001\u53a8\u5e08\u548c\u5144\u5f1f\u8fc8\u514b\u5c14\u00b7\u8428\u987f\uff08Michael\uff09\u548c\u9a6c\u4fee\u00b7\u8428\u987f\uff08Matthew Sutton\uff09\u56de\u5bb6\u5f00\u81ea\u5df1\u7684\u9910\u5385\u3002\u5728\u4e24\u5904\u6f5c\u5728\u623f\u4ea7\u5012\u584c\u540e\uff0c\u4e09\u4eba\u5728\u5e02\u4e2d\u5fc3\u9047\u5230\u4e86\u4e00\u680b\u7a7a\u7f6e\u7684\u5efa\u7b51\u3002\u5b83\u7684\u72b6\u51b5\u5f88\u7cdf\u7cd5\uff0c\u5df2\u7ecf\u7a7a\u7f6e\u4e86\u8fd140\u5e74\uff0c\u4f46\u540e\u6765\u4ed6\u4eec\u722c\u4e0a\u5c4b\u9876\uff0c\u770b\u5230\u4e86\u98ce\u666f\u3002\u73b0\u573a\u53ea\u6709\u4e94\u4e2a\u505c\u8f66\u4f4d\uff0c\u6bd4\u4e4b\u524d\u7684\u505c\u8f66\u6cd5\u89c4\u8981\u6c42\u7684\u505c\u8f66\u4f4d\u5c11\u4e8630\u4e2a\u3002\n\u707e\u96be\u4e0d\u3002\u5c3d\u7ba1\u5728\u7b7e\u8ba2\u79df\u7ea6\u540e\u5931\u53bb\u4e86\u9644\u8fd1\u4e24\u4e2a\u5ba2\u6237\u53ef\u4ee5\u4f7f\u7528\u7684\u505c\u8f66\u573a\uff0c\u4f46\u5ba2\u6237\u4ecd\u4e0d\u65ad\u51fa\u73b0\u3002\n\u201c\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u5e76\u6ca1\u6709\u627c\u6740\u6211\u4eec\u7684\u4e1a\u52a1\uff0c\u201d\u8521\u65af\u8bf4\u3002\u73b0\u5728\uff0c\u5408\u4f5c\u4f19\u4f34\u4eec\u6b63\u8ba1\u5212\u5728\u5c0f\u9547\u5317\u4fa7\u5f00\u8bbe\u7b2c\u4e8c\u5bb6\u9910\u5385\u3002\n\u5bf9\u4e8e\u57ce\u9547\u6765\u8bf4\uff0c\u4e3a\u4e86\u4fdd\u62a4\u5728\u505c\u8f66\u4e4b\u524d\u4fee\u5efa\u7684\u5907\u53d7\u73cd\u89c6\u7684\u4e3b\u8981\u8857\u9053\u7684\u7f8e\u89c2\u6027\u548c\u53ef\u6b65\u884c\u6027\uff0c\u901a\u5e38\u4f1a\u514d\u9664\u5386\u53f2\u60a0\u4e45\u7684\u5e02\u4e2d\u5fc3\u5730\u533a\u7684\u505c\u8f66\u8981\u6c42\u3002\u4f46\u5f53\u6c64\u666e\u68ee\u4e0e\u8d39\u8036\u7279\u7ef4\u5c14\u7684\u89c4\u5212\u603b\u76d1\u5750\u4e0b\u6765\u786e\u5b9a\u8fb9\u754c\u65f6\uff0c\u4ed6\u4eec\u52aa\u529b\u5b9a\u4e49\u4e00\u6761\u4f3c\u4e4e\u516c\u5e73\u7684\u8fb9\u754c\u3002\n\u6c64\u666e\u68ee\u8bf4\uff1a\u201c\u5176\u4e2d\u4e00\u4e9b\u623f\u4ea7\u4f4d\u4e8e\u5e02\u4e2d\u5fc3\uff0c\u4f46\u5f88\u591a\u623f\u4ea7\u5e76\u975e\u5982\u6b64\u3002\u201d\u3002\u6700\u7ec8\uff0c\u4ed6\u4eec\u653e\u5f03\u4e86\u5212\u6e05\u754c\u9650\uff0c\u540c\u610f\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u5f97\u5230\u540c\u6837\u7684\u673a\u4f1a\u3002\u5e03\u5170\u767b\u00b7\u7f57\u65af\u6cf0\u514b\uff08Brandon Rostek\uff09\u662f\u4e00\u5bb6\u62e5\u6709\u4e24\u5e74\u5386\u53f2\u7684\u963f\u7279\u62c9\u65af\u9910\u5385\uff08Atlas the Restaurant\uff09\u7684\u8001\u677f\u4e4b\u4e00\uff0c\u4e5f\u662f\u4e00\u540d\u7c89\u4e1d\u3002\n\u7f57\u65af\u6cf0\u514b\u8bf4\uff1a\u201c\u80fd\u6709\u66f4\u591a\u7684\u5730\u65b9\u8ba9\u66f4\u591a\u7684\u5f53\u5730\u4f01\u4e1a\u5f00\u653e\uff0c\u8fd9\u5f88\u597d\u3002\u201d\u3002\u201c\u4f4d\u4e8e\u4e2d\u5fc3\u4f4d\u7f6e\u4e14\u8ddd\u79bb\u8d8a\u8fd1\u7684\u4f01\u4e1a\u8d8a\u591a\uff0c\u6b65\u884c\u4ea4\u901a\u8d8a\u591a\uff0c\u5bf9\u6bcf\u4e2a\u4eba\u90fd\u8d8a\u6709\u5229\u3002\u201d\n\u963f\u7279\u62c9\u65af\u9910\u5385\u662f\u65b0\u7ffb\u4fee\u7684\u57c3\u5229\u65af\u5927\u53a6\u7684\u7b2c\u4e00\u5bb6\u4f01\u4e1a\uff0c\u8be5\u5927\u53a6\u5efa\u4e8e1923\u5e74\uff0c\u88ab\u5217\u5165\u56fd\u5bb6\u5386\u53f2\u9057\u8ff9\u540d\u5f55\u3002\u9910\u5385\u7684\u975e\u8857\u9053\u7a7a\u95f4\u662f\u4e3a\u5c11\u6570\u5458\u5de5\u8f66\u8f86\u9884\u7559\u7684\u3002\u57282015\u5e74\u4e4b\u524d\uff0c\u8fd9\u79cd\u89c4\u6a21\u7684\u9910\u5385\u5c06\u9700\u898141\u4e2a\u7a7a\u95f4\u3002\n\u7ffb\u65b0\u7684\u5efa\u7b51\u5e76\u4e0d\u662f\u552f\u4e00\u53d7\u76ca\u4e8e\u8fd9\u4e00\u53d8\u5316\u7684\u5efa\u7b51\u3002\u652f\u6301\u5e02\u8bae\u4f1a\u6761\u4f8b\u7684\u524d\u8bae\u5458\u9a6c\u4fee\u00b7\u4f69\u8482\u6700\u8fd1\u5c06\u4e00\u5757\u7a7a\u5730\u6539\u5efa\u4e3a\u4e5d\u5957\u516c\u5bd3\u3001\u4e24\u95f4\u529e\u516c\u5ba4\u3001\u4e00\u5bb6\u5976\u6614\u5e97\u548c\u4e00\u95f4\u9910\u5385\u3002\n\u4f69\u8482\u5728\u8c08\u5230\u8fd9\u4e2a\u53ea\u670950\u82f1\u5c3a\u6df1\u7684\u573a\u5730\u65f6\u8bf4\uff1a\u201c\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u591f\u6210\u529f\uff0c\u662f\u56e0\u4e3a\u5546\u4e1a\u505c\u8f66\u573a\u7684\u6700\u4f4e\u505c\u8f66\u6807\u51c6\u53d1\u6325\u4e86\u4f5c\u7528\u3002\u201d\u3002\u4ed6\u8bf4\uff0c\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u8be5\u6cd5\u89c4\u7684\u7ec6\u5219\u53ef\u80fd\u5141\u8bb8\u4ed6\u4eec\u5bfb\u6c42\u4e00\u79cd\u5dee\u5f02\uff0c\u5c06\u573a\u5916\u505c\u8f66\u573a\u8ba1\u5165\u8981\u6c42\uff0c\u4f46\u8fd9\u662f\u4e00\u79cd\u5192\u9669\u7684\u5c1d\u8bd5\uff0c\u53ef\u80fd\u4f1a\u4f7f\u8be5\u9879\u76ee\u5bb9\u6613\u53d7\u5230\u5e02\u8bae\u4f1a\u7684\u4e0a\u8bc9\u3002\n\u201c\u8fd9\u592a\u4e0d\u65b9\u4fbf\u4e86\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u6211\u4eec\u672c\u6765\u4f1a\u628a\u90a3\u4e2a\u7f51\u7ad9\u6392\u9664\u5728\u6211\u4eec\u60f3\u505a\u7684\u4e8b\u60c5\u4e4b\u5916\u3002\u201d\n\u8d39\u8036\u7279\u7ef4\u5c14\u7684\u51e0\u5bb6\u4f01\u4e1a\u4e3b\u652f\u6301\u53d6\u6d88\u505c\u8f66\u8981\u6c42\uff0c\u4f46\u6000\u7591\u65e7\u89c4\u5b9a\u662f\u5426\u9002\u7528\u4e8e\u4ed6\u4eec\u3002\uff08\u4ed6\u4eec\u4f1a\u7684\u3002\uff09\u4f69\u8482\u8ba4\u4e3a\u8fd9\u662f\u4e00\u573a\u80dc\u5229\u3002\n\u201c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4f60\u77e5\u9053\u597d\u7684\u516c\u5171\u653f\u7b56\uff0c\u201d\u4ed6\u8bf4\uff0c\u201c\u591a\u5e74\u540e\u4eba\u4eec\u5b8c\u5168\u8ba4\u4e3a\u8fd9\u662f\u7406\u6240\u5f53\u7136\u7684\u3002\u201d\n\u8fd9\u5c31\u662f\u91cd\u70b9\u3002\u4f01\u4e1a\u4e3b\u4e0d\u5e94\u8be5\u975e\u5f97\u662f\u505c\u8f66\u6cd5\u89c4\u65b9\u9762\u7684\u4e13\u5bb6\u624d\u80fd\u51b3\u5b9a\u4e00\u4e2a\u573a\u5730\u662f\u5426\u9002\u5408\u4ed6\u4eec\u3002\u5982\u679c\u57ce\u5e02\u5141\u8bb8\u7684\u8bdd\uff0c\u4e0d\u540c\u7684\u4f01\u4e1a\u4e3b\u53ef\u4ee5\u9009\u62e9\u5728\u54ea\u91cc\u6295\u8d44\u4ed6\u4eec\u7684\u79ef\u84c4\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u4f18\u5148\u8003\u8651\u4e00\u4e2a\u597d\u7684\u666f\u89c2\u6216\u4e00\u4e2a\u7406\u60f3\u7684\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u5927\u91cf\u7684\u505c\u8f66\u573a\u3002\u5728\u8d39\u8036\u7279\u7ef4\u5c14\u5e02\uff0c\u8fd9\u79cd\u672a\u6765\u5df2\u7ecf\u5230\u6765\u3002\n\u89c6\u7ebf\u7814\u7a76\u6240\u662f\u4e00\u4e2a501\uff08c\uff093\u975e\u8425\u5229\u7ec4\u7ec7\uff0c\u4e0d\u652f\u6301\u3001\u652f\u6301\u6216\u53cd\u5bf9\u4efb\u4f55\u5019\u9009\u4eba\u6216\u653f\u515a\u3002\n\u8bf7\u4fdd\u6301\u6587\u660e\u548c\u5efa\u8bbe\u6027\u3002\u6211\u4eec\u7684\u7f16\u8f91\u4fdd\u7559\u76d1\u63a7\u4e0d\u5f53\u8bc4\u8bba\u548c\u4eba\u8eab\u653b\u51fb\u7684\u6743\u5229\u3002", "note_en": "In 2015, the city council of Fayetteville, Arkansas, adopted a radical but simple idea: do away with minimum parking mandates and let businesses decide for themselves how much parking they need.\n The average person walking down the main drag of Dickson Street might be surprised to learn that this growing city of 94,000 was perhaps the first city in the nation to  eliminate commercial parking minimums citywide. Striking the section of zoning code that detailed how many parking spots each business was required to provide created new opportunities for local entrepreneurs. The ordinance, which left maximum parking ratios in place, did not spur a frenzy of redevelopment, nor did it bring a malady of parking complaints and plummeting home values, as the city attorney had warned.\n    Thompson built the case to remove parking minimums after several years on the job. \u201cAs a city planner, you receive phone calls [from Realtors and potential investors] about what\u2019s possible with this property or this potential piece of property,\u201d he said.\n He began to see a pattern in the same properties over and over again. Something in the city rules seemed to be keeping those buildings empty\u2014and preventing anyone\u2019s new ideas from taking root.\n These commercial buildings that sat vacant for years had a similar profile: older buildings on smaller lots, often near downtown. In one case after another, it turned out that the key issue was parking\u2014specifically the minimum number of parking spots required. It was possible for a property owner to get planning permission to reduce the amount of parking required, but people seldom tried.\n  Now, six years after the mandates were lifted, those addresses have rejoined Fayetteville\u2019s  thriving economy.\n \u201cThe buildings I had identified as being perpetually and perhaps permanently unusable were very quickly purchased, redeveloped, and are in use right now,\u201d Thompson said.\n One of those places is 110 South College Avenue. Fayetteville resident Lewis Chase convinced his childhood friends, chefs and brothers Michael and Matthew Sutton, to come back home to start their own restaurant. After two potential properties fell through, the trio came across a vacant building downtown. It was in bad shape, having been unoccupied for nearly 40 years, but then they climbed onto the roof and saw the view. There were only five parking spots on site, 30 short of what the previous parking code would have required.\n Disaster? Nope. Despite losing two nearby parking lots that customers could use since they signed the lease, customers keep showing up.\n \u201cIt hasn\u2019t killed our business, that\u2019s for sure,\u201d Chase said. Now the partners are planning to open  a second restaurant on the north side of town.\n   It\u2019s common for towns to exempt historic downtown areas from parking requirements in order to preserve the aesthetics and walkability of cherished main streets that were built before parking mandates. But when Thompson sat down with Fayetteville\u2019s planning director to establish a boundary, they struggled to define an edge that seemed fair.\n \u201cSome of these properties were downtown, but a lot weren\u2019t,\u201d Thompson said. Eventually they gave up on drawing lines, agreeing that everyone deserved the same opportunity. Brandon Rostek, one of the owners of two-year-old Atlas the Restaurant, is a fan.\n    \u201cIt\u2019s nice to have more space for more local businesses to open up,\u201d Rostek said. \u201cThe more businesses that are centrally located and closer together, the better it is for everyone when you have more foot traffic.\u201d\n Atlas the Restaurant is the first venture in the newly renovated Ellis Building, which dates to 1923 and is on the National Register of Historic Places. The restaurant\u2019s off-street space is reserved for a handful of employee vehicles. Before 2015 a restaurant of that size would have required 41 spaces.\n    Renovated buildings are not the only ones benefitting from the change. Former Alderman Matthew Petty, who championed the ordinance on city council, recently converted a vacant lot into nine apartments, two offices, a smoothie shop, and a taproom.\n \u201cWe were only able to pull it off because the commercial parking minimums were in play,\u201d Petty said about the site, which was only 50 feet deep. He said that technically the code\u2019s fine print may have allowed them to pursue a variance to count off-site parking toward the requirement, but it\u2019s a risky endeavor that would have made the project vulnerable to be appealed to city council.\n \u201cIt\u2019s so incredibly inconvenient,\u201d he said, \u201c[that] we would have ruled out that site for what we wanted to do.\u201d\n   Several Fayetteville businesses owners supported eliminating the parking requirements but were skeptical the old rules would have even applied to them. (They would have.) Petty thinks that\u2019s a win.\n \u201cThat\u2019s how you know good public policies,\u201d he said, \u201cwhen years later people completely take it for granted.\u201d\n And that\u2019s kind of the point. Business owners shouldn\u2019t have to be experts in parking regulations to decide if a site will work for them. Given the option of where to invest their savings, different business owners might prioritize a great view or an ideal location over abundant parking, if cities would allow them to. In the City of Fayetteville, that future has already arrived.\n      Sightline Institute is a 501(c)3 non-profit organization and does not support, endorse, or oppose any candidate or political party.\n      Please keep it civil and constructive. Our editors reserve the right to monitor inappropriate comments and personal attacks.", "posttime": "2022-02-24 11:07:49", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8d39\u8036,parking,\u505c\u8f66", "title": "\u6ca1\u6709\u6700\u4f4e\u505c\u8f66\u8981\u6c42\uff1f\u963f\u80af\u8272\u5dde\u8d39\u8036\u7279\u7ef4\u5c14\u6ca1\u95ee\u9898", "title_en": "No minimum parking requirements? No problem for Fayetteville, Arkansas", "transed": 1, "url": "https://www.sightline.org/2022/02/22/no-minimum-parking-requirements-no-problem-for-fayetteville-arkansas/", "via": "", "real_tags": ["\u8d39\u8036", "parking", "\u505c\u8f66"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074739, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u534e\u76db\u987f2\u670823\u65e5\uff08\u8def\u900f\u793e\uff09-\u7f8e\u56fd\u76d1\u7ba1\u673a\u6784\u8b66\u544a\u79f0\uff0c5G\u65e0\u7ebf\u64cd\u4f5c\u53ef\u80fd\u4f1a\u5f71\u54cd\u5927\u591a\u6570\u6ce2\u97f3737\u98de\u673a\u7684\u65e0\u7ebf\u7535\u9ad8\u5ea6\u8868\uff0c\u5e76\u5f71\u54cd\u673a\u7ec4\u4eba\u5458\u7684\u5de5\u4f5c\u91cf\u548c\u98de\u673a\u7740\u9646\u3002\n\u8054\u90a6\u822a\u7a7a\u7ba1\u7406\u5c40&#39\uff1bs\u6307\u4ee4\u5f71\u54cd\u6ce2\u97f3\u516c\u53f8&#39\uff1b\u5468\u4e09\u5728\u7f51\u4e0a\u53d1\u5e03\u7684\u300a\u8054\u90a6\u516c\u62a5\u300b\u516c\u544a\u79f0\uff0c\u9664200\u548c200-c\u7cfb\u5217\u5916\uff0cs 737s\u8fd8\u5c06\u7ee7\u7eed\u53d1\u552e\u3002\n\u5b83\u8865\u5145\u8bf4\uff0c\u4ed6\u4eec\u7684&#34\uff1b\u5982\u679c\u65e0\u7ebf\u7535\u6d4b\u9ad8\u4eea\u57283.7-3.98 GHz\u9891\u6bb5\uff085G C\u9891\u6bb5\uff09\u53d7\u5230\u65e0\u7ebf\u5bbd\u5e26\u64cd\u4f5c\u7684\u5e72\u6270\uff0c\u5219\u65e0\u6cd5\u4f9d\u9760\u65e0\u7ebf\u7535\u6d4b\u9ad8\u4eea\u6267\u884c\u5176\u9884\u671f\u529f\u80fd&#34;\n\u7f8e\u56fd\u8054\u90a6\u822a\u7a7a\u5c40\u5728\u5b9a\u4e8e\u5468\u56db\u6b63\u5f0f\u53d1\u5e03\u7684\u901a\u77e5\u4e2d\u8868\u793a\uff0c\u76d1\u7ba1\u673a\u6784\u5df2\u786e\u5b9a&#34\uff1b\u5728\u8fdb\u8fd1\u3001\u7740\u9646\u548c\u590d\u98de\u671f\u95f4\uff0c\u7531\u4e8e\u8fd9\u79cd\u5e72\u6270\uff0c\u67d0\u4e9b\u98de\u673a\u7cfb\u7edf\u53ef\u80fd\u65e0\u6cd5\u6b63\u5e38\u5de5\u4f5c\uff1b\u3002\n\u8fd9\u5c06\u5bfc\u81f4&#34\uff1b\u5728\u98de\u884c\u6307\u5f15\u5458\u3001\u81ea\u52a8\u6cb9\u95e8\u6216\u81ea\u52a8\u9a7e\u9a76\u4eea\u63a5\u901a\u7684\u60c5\u51b5\u4e0b\u8fdb\u8fd1\u65f6\uff0c\u706f\u5149\u673a\u7ec4\u7684\u5de5\u4f5c\u8d1f\u8377\u589e\u52a0\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u98de\u884c\u673a\u7ec4\u7ef4\u6301\u98de\u673a\u5b89\u5168\u98de\u884c\u548c\u7740\u9646\u7684\u80fd\u529b\u964d\u4f4e\uff0c&#34\uff1b\u4e0a\u9762\u8bf4\u3002\n\u6ce2\u97f3\u53d1\u8a00\u4eba\u5728\u4e00\u4efd\u58f0\u660e\u4e2d\u8bf4&#34\uff1b\u6211\u4eec\u652f\u6301\u9002\u822a\u6307\u4ee4\uff0c\u56e0\u4e3a\u5b83\u89c4\u5b9a\u4e86\u6ce2\u97f3\u516c\u53f8\u57281\u6708&#34\uff1b\u5411\u8fd0\u8425\u5546\u63d0\u4f9b\u7684\u76f8\u540c\u6307\u5bfc\uff1b\u3002\n\u7535\u4fe1\u7f51\u7edc\u6b63\u5728\u63a8\u51fa\u4e0b\u4e00\u4ee35G\u7cfb\u7edf\uff0c\u7f8e\u56fd\u8054\u90a6\u822a\u7a7a\u7ba1\u7406\u5c40\u6b64\u524d\u8b66\u544a\u79f0\uff0c\u8be5\u7cfb\u7edf\u53ef\u80fd\u4f1a\u5f71\u54cd\u65e0\u7ebf\u7535\u9ad8\u5ea6\u8868\u7b49\u654f\u611f\u7684\u98de\u673a\u7535\u5b50\u8bbe\u5907\u3002\n\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\uff08Federal Communications Commission\uff09\u548c\u7f8e\u56fd\u56fd\u5bb6\u7535\u4fe1\u548c\u4fe1\u606f\u7ba1\u7406\u5c40\uff08National Telecommunications and Information Administration\uff0cNTIA\uff09\u57285G\u822a\u7a7a\u7ea0\u7eb7\u540e\u8a93\u8a00\u8981\u6539\u5584\u9891\u8c31\u7ba1\u7406\u65b9\u9762\u7684\u534f\u8c03\u3002\n\u8be5\u9891\u8c31\u4e8e1\u6708\u4efd\u63a8\u51fa\uff0c\u4f46\u4ec5\u5728Verizon Communications\uff08VZ.N\uff09\u548cAT&amp\uff1bT\uff08T.N\uff09\u540c\u610f\u63a8\u8fdf\u5728\u673a\u573a\u9644\u8fd1\u90e8\u7f725G\u65e0\u7ebf\u53d1\u5c04\u5854\u3002\nSusan Heavey\u62a5\u9053\uff0cMike Stone\u8865\u5145\u62a5\u9053\uff1b\u7f16\u8f91\uff1aDoina Chiacu\u3001Mark Porter\u3001Tomasz Janowski\u548cAlexander Smith", "note_en": "WASHINGTON, Feb 23 (Reuters) - U.S. regulators are warning that 5G wireless operations could affect radio altimeters in most Boeing 737 aircraft and impact crew workload and airplane landings.\n The Federal Aviation Administration&#39;s directive affects Boeing&#39;s 737s, except its 200 and 200-c series, a Federal Register notice posted online on Wednesday said.\n It added that their &#34;radio altimeters cannot be relied upon to perform their intended function if they experience interference from wireless broadband operations in the 3.7-3.98 GHz frequency band (5G C-Band).&#34;\n  The FAA said in the notice, scheduled to be formally published on Thursday, that regulators had determined that &#34;during approach, landings, and go-arounds, as a result of this interference, certain airplane systems may not properly function&#34;.\n That would result in &#34;increased lightcrew workload while on approach with the flight director, autothrottle, or autopilot engaged, which could result in reduced ability of the flight crew to maintain safe flight and landing of the airplane,&#34; it said.\n A Boeing spokesman said in a statement: &#34;we support the Airworthiness Directive, as it mandates the same guidance that Boeing provided to operators back in January&#34;.\n Telecommunications networks are rolling out next-generation 5G systems that the FAA has previously warned could impact sensitive airplane electronics such as radio altimeters.\n The Federal Communications Commission and the National Telecommunications and Information Administration (NTIA) have vowed to improve coordination on spectrum management after a dispute over 5G aviation.\n The spectrum rolled out in January, but only after Verizon Communications  (VZ.N) and AT&amp;T  (T.N) agreed to delay deploying 5G wireless towers near airports.\n  Reporting by Susan Heavey with additional reporting by Mike Stone; Editing by Doina Chiacu, Mark Porter, Tomasz Janowski and Alexander Smith", "posttime": "2022-02-24 07:06:32", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,5g,\u822a\u7a7a\u5c40,radio,\u98de\u673a", "title": "\u7f8e\u56fd\u8054\u90a6\u822a\u7a7a\u5c40\u8868\u793a\uff0c5G\u53ef\u80fd\u4f1a\u5f71\u54cd\u5927\u591a\u6570\u6ce2\u97f3737\u4e0a\u7684\u65e0\u7ebf\u7535\u9ad8\u5ea6\u8868", "title_en": "FAA says 5G could impact radio altimeters on most Boeing 737s", "transed": 1, "url": "https://www.reuters.com/business/aerospace-defense/faa-issues-notice-over-boeing-737s-5g-wireless-interference-2022-02-23/", "via": "", "real_tags": ["\u7f8e\u56fd", "5g", "\u822a\u7a7a\u5c40", "radio", "\u98de\u673a"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074738, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u60f3\u6211\u5df2\u7ecf\u60f3\u51fa\u4e86\u4e00\u4e2a\u65b0\u7684\u65b9\u6cd5\u6765\u5e94\u5bf9\u8ba9\u4f60\u7684\u516c\u53f8\u5728\u8d22\u52a1\u4e0a\u652f\u6301\u5b83\u4f7f\u7528\u7684\u5f00\u6e90\u9879\u76ee\u7684\u6311\u6218\uff1a\u8054\u7cfb\u7ef4\u62a4\u4eba\u5458\uff0c\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u6177\u6168\u7684\u6f14\u8bb2\u8d39\uff0c\u8ba9\u4ed6\u4eec\u4e0e\u4f60\u7684\u5de5\u7a0b\u56e2\u961f\u8fdb\u884c\u8fdc\u7a0b\u5bf9\u8bdd\u3002\n\u6bcf\u4e2a\u4eba\u90fd\u540c\u610f\u5f00\u6e90\u9879\u76ee\u5e94\u8be5\u5f97\u5230\u66f4\u591a\u7684\u8d44\u91d1\u652f\u6301\u3002\u5b9e\u9645\u4e0a\uff0c\u652f\u6301\u9879\u76ee\u53ef\u80fd\u4f1a\u975e\u5e38\u56f0\u96be\uff1a\n\u66f4\u91cd\u8981\u7684\u4e00\u70b9\u662f\uff1a\u5f00\u6e90\u9879\u76ee\u901a\u5e38\u4e0d\u5584\u4e8e\u7d22\u53d6\u6216\u601d\u8003\u8d44\u91d1\u2014\u2014\u8fd9\u5f88\u5c11\u662f\u6838\u5fc3\u7ade\u4e89\u529b\uff01\n\u786e\u5b9e\u7ecf\u5e38\u51fa\u9519\u7684\u9879\u76ee\uff1a\u6bcf\u67085\u7f8e\u5143\u7684\u201c\u4e70\u676f\u5496\u5561\u201dGitHub\u8d5e\u52a9\u5e76\u4e0d\u4f1a\u5bf9\u9879\u76ee\u4ea7\u751f\u6709\u610f\u4e49\u7684\u5f71\u54cd\u3002\n\u4f46\u662f\u2026\u2026\u8981\u8bc1\u660e\u4e00\u5bb6\u8425\u5229\u6027\u516c\u53f8\u5e94\u8be5\u4e3a\u4ed6\u4eec\u514d\u8d39\u5f97\u5230\u7684\u4e1c\u897f\u4ed8\u94b1\u662f\u5f88\u96be\u7684\uff01\u4efb\u4f55\u6d89\u53ca\u82b1\u94b1\u7684\u4e8b\u60c5\u90fd\u9700\u8981\u5f88\u591a\u5229\u76ca\u76f8\u5173\u8005\u7684\u5927\u91cf\u652f\u6301\uff0c\u800c\u516c\u53f8\u5185\u90e8\u8bb8\u591a\u5173\u5fc3\u8fd9\u4e00\u70b9\u7684\u4eba\u90fd\u6ca1\u6709\u8db3\u591f\u7684\u5185\u90e8\u5f71\u54cd\u529b\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\n\u5982\u679c\u4f60\u80fd\u63d0\u4f9b\u8d5e\u52a9\uff0c\u90a3\u592a\u597d\u4e86\uff1a\u4f60\u5e94\u8be5\u8fd9\u4e48\u505a\u3002\u4f46\u5982\u679c\u6ca1\u6709\u2026\u2026\u4e0d\u5982\u8054\u7cfb\u4e00\u4e0b\u7ef4\u62a4\u4eba\u5458\uff0c\u4e3b\u52a8\u96c7\u4f63\u4ed6\u4eec\uff0c\u8ba9\u4ed6\u4eec\u8fdb\u884c\u957f\u8fbe\u4e00\u5c0f\u65f6\u7684\u201c\u54a8\u8be2\u201d\u6f14\u8bb2\uff1f\n\u7531\u4e8e\u8fdc\u7a0b\u5de5\u4f5c\u548cZoom\u7684\u5174\u8d77\uff0c\u6f14\u8bb2\u4e0d\u518d\u9700\u8981\u53bb\u4e00\u4e2a\u53ef\u4ee5\u8f7b\u677e\u5c06\u4e00\u5c0f\u65f6\u7684\u673a\u4f1a\u53d8\u6210\u4e00\u6574\u5929\u7684\u5730\u65b9\u3002\n\u4e00\u6b21\u8fc7\u7684\u6709\u507f\u6f14\u8bb2\u673a\u4f1a\u66f4\u6709\u53ef\u80fd\u7b26\u5408\u4e00\u5bb6\u6b63\u89c4\u516c\u53f8\u6bcf\u6708\u6350\u6b3e\u7684\u652f\u51fa\u6a21\u5f0f\u3002\n\u8fd9\u79cd\u60f3\u6cd5\u7684\u4e00\u4e2a\u660e\u663e\u7f3a\u9677\u662f\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5f00\u6e90\u7ef4\u62a4\u8005\u5e76\u4e0d\u4e00\u5b9a\u610f\u5473\u7740\u67d0\u4eba\u662f\u4e00\u4e2a\u4f1f\u5927\u7684\u6f14\u8bf4\u5bb6\uff1a\u6f14\u8bb2\u672c\u8eab\u5c31\u662f\u4e00\u79cd\u6280\u80fd\u3002\n\u5982\u679c\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u6211\u5efa\u8bae\u4ee5\u4e3b\u6301\u4eba\u7684\u8eab\u4efd\u4e3b\u6301\u4f1a\u8bae\uff1bA\u76f8\u53cd\u3002\n\u627e\u4e00\u4f4d\u6709\u6f14\u8bb2\u7ecf\u9a8c\u7684\u56e2\u961f\u6210\u5458\u3002\u63d0\u524d\u6536\u96c6\u5176\u4ed6\u5de5\u7a0b\u5e08\u7684\u95ee\u9898\uff0c\u5e76\u4e0e\u5ba2\u4eba\u5206\u4eab\uff0c\u4ee5\u4fbf\u4ed6\u4eec\u505a\u597d\u51c6\u5907\u3002\u7136\u540e\u4ee5\u95ee\u7b54\u7684\u5f62\u5f0f\u8fd0\u884c\u4f1a\u8bdd\uff1bA.\n\u8fd9\u4f1a\u51cf\u8f7b\u6f14\u8bb2\u8005\u7684\u5de8\u5927\u538b\u529b\uff0c\u4e5f\u610f\u5473\u7740\u4f60\u7684\u8c08\u8bdd\u4f1a\u66f4\u52a0\u9488\u5bf9\u56e2\u961f\u7684\u5229\u76ca\u548c\u9700\u6c42\u3002\n\u8bf7\u8bb0\u4f4f\uff0c\u6211\u4eec\u8bd5\u56fe\u89e3\u51b3\u7684\u5173\u952e\u95ee\u9898\u662f\u5982\u4f55\u5728\u8d22\u52a1\u4e0a\u652f\u6301\u53ef\u80fd\u4e0d\u592a\u64c5\u957f\u8981\u94b1\u7684\u9879\u76ee\u548c\u7ef4\u62a4\u4eba\u5458\u3002\n\u6211\u60f3\u51cf\u8f7b\u7ef4\u62a4\u4eba\u5458\u7684\u538b\u529b\uff0c\u8ba9\u4ed6\u4eec\u5b66\u4f1a\u5982\u4f55\u8425\u9500\u548c\u9500\u552e\u4ed6\u4eec\u7684\u670d\u52a1\u3002\n\u6240\u4ee5\uff0c\u8054\u7cfb\u4f60\u4f7f\u7528\u7684\u4e00\u4e9b\u9879\u76ee\uff0c\u95ee\u4ed6\u4eec\u4f60\u662f\u5426\u53ef\u4ee5\u4ed8\u94b1\u8ba9\u4ed6\u4eec\u82b1\u4e00\u4e2a\u5c0f\u65f6\u7684\u65f6\u95f4\u4e0e\u4f60\u7684\u56e2\u961f\u4ea4\u8c08\uff01\u6211\u5f88\u9ad8\u5174\u770b\u5230\u8fd9\u4e00\u5207\u8fdb\u5c55\u987a\u5229\u3002\n\u6177\u6168\u4e00\u70b9\uff1a\u8fd9\u5e76\u4e0d\u662f\u8981\u4e0e\u4e00\u4e2a\u53ef\u80fd\u4ece\u672a\u83b7\u5f97\u8fc7\u53d1\u8a00\u62a5\u916c\u7684\u4eba\u534f\u5546\u6700\u4f73\u7684\u53d1\u8a00\u7387\u3002\u8fd9\u662f\u4e3a\u4e86\u8865\u507f\u4ed6\u4eec\u4ece\u4ed6\u4eec\u7684\u5de5\u4f5c\u4e2d\u83b7\u5f97\u7684\u5de8\u5927\u4ef7\u503c\uff0c\u5e76\u4f7f\u7528\u806a\u660e\u7684\u4f1a\u8ba1\u6280\u5de7\u6765\u5b9e\u73b0\u8fd9\u4e00\u70b9\u3002\u6240\u4ee5\u63d0\u524d\u7ed9\u4ed6\u4eec\u4e00\u7b14\u4e30\u539a\u7684\u8d39\u7528\u5427\uff01\u5728\u8fd9\u91cc\uff0c\u652f\u4ed8\u8d54\u7387\u5e94\u8be5\u662f\u4f60\u76ee\u6807\u7684\u4e00\u90e8\u5206\u3002\n\u5bf9\u4e8e\u89c4\u6a21\u8f83\u5927\u7684\u516c\u53f8\u6765\u8bf4\uff0c\u53ef\u4ee5\u8f7b\u677e\u652f\u51fa\u7684\u91d1\u989d\u53ef\u80fd\u6709\u4e0a\u9650\u3002\u5f04\u6e05\u695a\u8fd9\u662f\u4ec0\u4e48\u53ef\u80fd\u5728\u8fd9\u91cc\u4e5f\u6709\u5e2e\u52a9\u3002\n\uff08\u5982\u679c\u4f60\u7684\u56e2\u961f\u80fd\u4ece\u6211\u5173\u4e8eDatasette\u3001sqlite utils\u3001Git scraping\u6216\u6211\u6b63\u5728\u8fdb\u884c\u7684\u4efb\u4f55\u5176\u4ed6\u9879\u76ee\u7684\u6f14\u8bb2\u4e2d\u53d7\u76ca\uff0c\u8bf7\u5728gmail.com\u7684swillison\u4e0a\u7ed9\u6211\u7559\u8a00\u3002\u4f60\u4e5f\u53ef\u4ee5\u8d5e\u52a9\u6211\u5728GitHub\u4e0a\u7684\u5de5\u4f5c\uff01\uff09", "note_en": "I think I\u2019ve come up with a novel hack for the challenge of getting your company to financially support the open source projects that it uses: reach out to the maintainers and  offer them generous speaking fees for remote talks to your engineering team.\n  Everyone agrees that open source projects deserve more financial support. Actually supporting projects can be surprisingly difficult though:\n More to the point: open source projects are often really bad at asking for or thinking about money\u2014it\u2019s rarely a core competency!\n Projects that do often get the tiers wrong: a $5/month \u201cbuy a coffee\u201d GitHub sponsorship isn\u2019t really going to make a meaningful impact on a project.\n But\u2026 making the case that a for-profit company should hand over money for something they\u2019re getting for free is hard! You need a lot of buy-in from a lot of stakeholders for anything involving spending money\u2014and many of the people who care about this within a company won\u2019t have enough internal clout to get it to happen.\n If you can make sponsorship happen, great: you should do that. But if not\u2026 how about reaching out to the maintainers and offering to hire them for an hour-long \u201cconsultancy\u201d speaking engagement instead?\n Thanks to the rise of remote working and Zoom, giving a talk no longer requires traveling to a venue\u2014which can easily turn an hour-long opportunity into a full day.\n One-off paid speaking opportunities are much more likely to fit into a regular company\u2019s model of how money should spent that monthly donations.\n  The obvious flaw in this idea is that being an open source maintainer doesn\u2019t necessarily mean that someone is a great public speaker: speaking is a skill unto itself.\n If that\u2019s the case, I propose running the session as a moderated Q&amp;A instead.\n Find a member of your team with speaking experience. Gather questions from your other engineers in advance, and share them with your guest so that they can prepare. Then run the session as a Q&amp;A.\n This takes a huge deal of pressure off the speaker, and means you get a conversation that\u2019s much more targeted to your team\u2019s interests and needs as well.\n  Remember, the key problem we\u2019re trying to solve here is how to financially support projects and maintainers that may not be very good at asking for the money.\n I want to take the pressure off those maintainers to learn how to market and sell their services.\n So reach out to some projects you use and ask them if you can pay them to spend an hour of their time talking to your team! I\u2019m excited to see how well this works.\n Be generous: This isn\u2019t about negotiating the best speaking rate from someone who may never have been paid to speak before. This is about compensating them for the enormous value that your company has gained from their work, and using a clever accounting trick to do so. So offer them a generous fee up front! Paying over the odds should be part of your goal here.\n For larger companies there\u2019s probably an upper cap on the amount that can be expensed easily. Finding out what that is might be helpful here too.\n (If your team would benefit from a talk from me about  Datasette,  sqlite-utils,  Git scraping or any of the other projects I have going on, please drop me a line at  swillison at gmail dot com. You can also  sponsor my work on GitHub!)", "posttime": "2022-02-24 05:03:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5f00\u6e90,\u7ef4\u62a4,open,\u9879\u76ee", "title": "\u901a\u8fc7\u4ed8\u8d39\u8ba9\u7ef4\u62a4\u4eba\u5458\u4e0e\u60a8\u7684\u56e2\u961f\u4ea4\u8c08\u6765\u652f\u6301\u60a8\u4f7f\u7528\u7684\u5f00\u6e90", "title_en": "Support open source that you use by paying the maintainers to talk to your team", "transed": 1, "url": "https://simonwillison.net/2022/Feb/23/support-open-source/", "via": "", "real_tags": ["\u5f00\u6e90", "\u7ef4\u62a4", "open", "\u9879\u76ee"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074736, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "NanoHTTPD\u662f\u4e00\u6b3e\u8f7b\u91cf\u7ea7HTTP\u670d\u52a1\u5668\uff0c\u8bbe\u8ba1\u7528\u4e8e\u5d4c\u5165\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\uff0c\u6839\u636e\u4fee\u6539\u540e\u7684BSD\u8bb8\u53ef\u8bc1\u53d1\u5e03\u3002\n\u5b83\u6b63\u5728Github\u4e0a\u5f00\u53d1\uff0c\u5e76\u4f7f\u7528ApacheMaven\u8fdb\u884c\u6784\u5efa\uff1b\u5355\u5143\u6d4b\u8bd5\uff1a\n\u6211\u4eec&#39\uff1b\u6211\u5c06\u4f7f\u7528Maven for build/dep system\u521b\u5efa\u4e00\u4e2a\u81ea\u5b9a\u4e49HTTP\u670d\u52a1\u5668\u9879\u76ee\u3002\u672c\u6559\u7a0b\u5047\u8bbe\u60a8\u4f7f\u7528\u7684\u662fUnix\u53d8\u4f53\u548cshell\u3002\u9996\u5148\uff0c\u5982\u679c\u5c1a\u672a\u5b89\u88c5\uff0c\u8bf7\u5b89\u88c5Maven\u548cJava SDK\u3002\u7136\u540e\u8fd0\u884c\uff1a\n\u5305\u88f9\u901a\u8baf\u3002\u5b9e\u4f8b\u5bfc\u5165java\u3002\u4f0a\u5965\u3002IOException\uff1b\u5bfc\u5165java\u3002util\u3002\u5730\u56fe\u8fdb\u53e3\u91d1\u878d\u673a\u6784\u3002\u4f0a\u57fa\u3002\u57c3\u6d1b\u5b81\u3002\u7eb3\u7c73HTTPD\uff1b//\u6ce8\uff1a\u5982\u679c\u4f60&#39\uff1b\u91cd\u65b0\u4f7f\u7528\u7eb3\u7c73HTTPD&gt\uff1b=3.0.0\u540d\u79f0\u7a7a\u95f4\u4e0d\u540c\uff0c//\u4f7f\u7528\u4e0b\u9762\u7684\uff1a//\u5bfc\u5165\u7ec4\u7ec7\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u7684\u5bfc\u5165\u3002\u7eb3\u7c73HTTPD\u3002\u7eb3\u7c73httpd\uff1b\u516c\u5171\u7c7b\u5e94\u7528\u7a0b\u5e8f\u6269\u5c55NanoHTTPD{public App\uff08\uff09\u629b\u51faIOException{super\uff088080\uff09\uff1b\u5f00\u59cb\uff08NanoHTTPD.SOCKET_READ_TIMEOUT\uff0cfalse\uff09\uff1bSystem.out.println\uff08&#34\uff1b\\n\u8fd0\u884c\uff01\u5c06\u6d4f\u89c8\u5668\u6307\u5411http://localhost:8080/\\n&#34\uff1b\uff09}public static void main\uff08String[]args\uff09{try{new App\uff08\uff09\uff1b}catch\uff08IOException ioe\uff09{System.err.println\uff08&#34\uff1b\u65e0\u6cd5\u542f\u52a8\u670d\u52a1\u5668\uff1a\\n&#34\uff1b+ioe\uff09}@\u8986\u76d6\u516c\u5171\u54cd\u5e94\u670d\u52a1\uff08IHTTPSession session\uff09{String msg=&#34\uff1b&lt\uff1bhtml&gt\uff1bbody&gt\uff1b&lt\uff1bh1&gt\uff1bHello server&lt\uff1b/h1&gt\uff1b\\n&#34\uff1bMap&lt\uff1bString\uff0cString&gt\uff1bparms=session.getParms\uff08\uff09\uff1bif\uff08parms.get\uff08&#34\uff1busername&#34\uff1b\uff09=\u7a7a\uff09{msg+=&#34\uff1b&lt\uff1b\u8868\u5355\u64cd\u4f5c=&#39\uff1b\uff1f&#39\uff1b\u65b9\u6cd5=&#39\uff1b\u83b7\u53d6&#39\uff1b\\n&lt\uff1bp&gt\uff1b\u60a8\u7684\u59d3\u540d\uff1a&lt\uff1b\u8f93\u5165\u7c7b\u578b=&#39\uff1b\u6587\u672c&#39\uff1b\u59d3\u540d=&#39\uff1b\u7528\u6237\u540d&#39\uff1b&lt\uff1b/p&gt\uff1b\\n&#34\uff1b&lt\uff1b&lt\u53e6\u5916{msg+=&#34\uff1b&lt\uff1bp&gt\uff1b\u4f60\u597d\uff0c&#34\uff1b+parms.get\uff08&#34\uff1busername&#34\uff1b\uff09+&#34;!&lt/p&gt&#34;; }  \u8fd4\u56denewFixedLengthResponse\uff08msg+&#34\uff1b&lt\uff1b/body&gt\uff1b&lt\uff1b/html&gt\uff1b\\n&#34\uff1b\uff09}\n\u5982\u679c\u542f\u52a8\u6b63\u5e38\uff0c\u8bf7\u5c06\u6d4f\u89c8\u5668\u6307\u5411http://localhost:8080/\u4eab\u53d7\u4e00\u4e2a\u7f51\u7edc\u670d\u52a1\u5668\uff0c\u5b83\u4f1a\u8be2\u95ee\u4f60\u7684\u540d\u5b57\uff0c\u5e76\u56de\u590d\u95ee\u5019\u3002\n\u7eb3\u7c73\u9897\u7c92\u4e0eServlet\u7c7b\u4f3c\uff0c\u53ea\u662f\u5b83\u4eec\u7684\u5916\u5f62\u6781\u4e3a\u4f4e\u8c03\u3002\u5b83\u4eec\u4e3a\u66f4\u590d\u6742\u7684\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6613\u4e8e\u4f7f\u7528\u7684\u7cfb\u7edf\u3002\u672c\u6587\u5fc5\u987b\u7528\u4e00\u4e2a\u4f8b\u5b50\u8fdb\u884c\u6269\u5c55\uff0c\u6240\u4ee5\u73b0\u5728\u6765\u770b\u4e00\u4e0b\u5355\u5143\u6d4b\u8bd5\u7684\u7528\u6cd5\u3002https://github.com/NanoHttpd/nanohttpd/blob/master/nanolets/src/test/java/org/nanohttpd/junit/router/AppNanolets.java\n\u6211\u4eec\u76ee\u524d\u6b63\u5728\u4ece\u8fc7\u53bb\u51e0\u4e2a\u6708\u96c6\u6210\u7684\u8bb8\u591a\u62c9\u53d6\u8bf7\u6c42\u548c\u529f\u80fd\u8bf7\u6c42\u4e2d\u7a33\u5b9aNanoHTTPD\u3002\u4e0b\u4e00\u4e2a\u7248\u672c\u5f88\u5feb\u5c31\u4f1a\u53d1\u5e03\uff0c\u4e0d\u4f1a\u518d\u6709\u4e86#34\uff1b\u9884\u671f&#34\uff1b\u5728\u4e0b\u4e00\u4e2a\u7248\u672c\u4e4b\u524d\u8fdb\u884c\u91cd\u5927\u66f4\u6539\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u6700\u524d\u6cbf\u7684\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u4eceGithub\u514b\u9686\u5b83\uff0c\u6216\u8005\u4ecesonatype\u83b7\u5f97\u5b83\u3002org\uff08\u8bf7\u53c2\u89c1\u4e0b\u9762\u7684Maven dependencies/Living on the edge\uff09\u3002\n/core\u2013\u529f\u80fd\u9f50\u5168\u7684HTTP\uff08s\uff09\u670d\u52a1\u5668\uff0c\u7531\u4e00\uff081\uff09\u4e2aJava\u6587\u4ef6\u7ec4\u6210\uff0c\u53ef\u4ee5\u4e3a\u60a8\u81ea\u5df1\u7684\u9879\u76ee\u5b9a\u5236/\u7ee7\u627f\u3002\n/\u793a\u4f8b\u2013\u5173\u4e8e\u5982\u4f55\u5b9a\u5236\u7eb3\u7c73HTTPD\u7684\u7b80\u5355\u793a\u4f8b\u3002\u8bf7\u53c2\u9605HelloServer\u3002java\u662f\u4e00\u6b3e\u70ed\u60c5\u6b22\u8fce\u60a8\u7684\u6740\u624b\u7ea7\u5e94\u7528\u7a0b\u5e8f\uff01\n/webserver\u2013\u72ec\u7acb\u6587\u4ef6\u670d\u52a1\u5668\u3002\u8dd1&\u8dd1\uff1b\u4eab\u53d7\u4e00\u4e2a\u6d41\u884c\u7684\u5e94\u7528\u4f3c\u4e4e\u662f\u901a\u8fc7\u5b89\u5353\u8bbe\u5907\u63d0\u4f9b\u6587\u4ef6\u3002\n\u6ca1\u6709\u56fa\u5b9a\u7684\u914d\u7f6e\u6587\u4ef6\u3001\u65e5\u5fd7\u8bb0\u5f55\u3001\u6388\u6743\u7b49\uff08\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u81ea\u5df1\u5b9e\u73b0\u3002\u4e0d\u8fc7\uff0c\u9519\u8bef\u4f1a\u4f20\u9012\u5230java.util.logging\uff09\n\u5bf9HEAD\u3001POST\u548cDELETE\u8bf7\u6c42\u7684\u4e00\u4e9b\u5185\u7f6e\u652f\u6301\u3002\u4e0d\u8fc7\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u5b9e\u73b0/\u5b9a\u5236\u4efb\u4f55HTTP\u65b9\u6cd5\u3002\n\u6301\u7eed\u8fde\u63a5\uff08\u8fde\u63a5&#34\uff1b\u4fdd\u6301\u6d3b\u52a8&#34\uff1b\uff09\u652f\u6301\u901a\u8fc7\u5355\u4e2a\u5957\u63a5\u5b57\u8fde\u63a5\u63d0\u4f9b\u591a\u4e2a\u8bf7\u6c42\u3002\n\u8fd0\u884c\u65f6\u6269\u5c55\u652f\u6301\uff08\u670d\u52a1\u4e8e\u7279\u5b9aMIME\u7c7b\u578b\u7684\u6269\u5c55\uff09\u2014\u2014\u670d\u52a1\u4e8e\u6807\u8bb0\u683c\u5f0f\u6587\u4ef6\u7684\u793a\u4f8b\u6269\u5c55\u3002\u53ea\u9700\u5728Web\u670d\u52a1\u5668\u7c7b\u8def\u5f84\u4e2d\u5305\u542b\u4e00\u4e2a\u6269\u5c55JAR\u5c31\u8db3\u4ee5\u52a0\u8f7d\u6269\u5c55\u3002\n--cors=&#34\uff1bhttp://appOne.company.com, http://appTwo.company.com&#34;: \u8bf7\u6ce8\u610f\u53cc\u5f15\u53f7\uff0c\u4ee5\u4fbf\u5c06\u8fd9\u4e24\u4e2aURL\u89c6\u4e3a\u5355\u4e2a\u53c2\u6570\u7684\u4e00\u90e8\u5206\u3002\nNanoHTTPD\u662f\u4e00\u4e2a\u57fa\u4e8eMaven\u7684\u9879\u76ee\uff0c\u90e8\u7f72\u5230central\u3002\u5927\u591a\u6570\u5f00\u53d1\u73af\u5883\u90fd\u6709\u8bbf\u95ee\u4e2d\u592e\u5b58\u50a8\u5e93\u7684\u65b9\u6cd5\u3002Maven\u4e2d\u4f7f\u7528\u7684\u5750\u6807\u662f\uff1a\n\u5f00\u53d1\u73af\u5883\u7684\u5750\u6807\u5e94\u8be5\u4e0e\u8fd9\u4e9b\u5750\u6807\u76f8\u5bf9\u5e94\u3002\u5728\u5bfb\u627e\u65e7\u7248\u672c\u65f6\u8bf7\u5c0f\u5fc3\uff0c\u56e0\u4e3a\u6211\u4eec\u5df2\u5c06groupId\u4ececom\u4e2d\u5207\u6362\u3002nanohttpd\u5230org\u3002\u7eb3\u7c73HTTPD\u4e8e2015\u5e74\u5e74\u4e2d\u95ee\u4e16\u3002\n\u5728gradle\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528NanoHTTPD\uff0c\u56e0\u4e3agradle\u8bbf\u95ee\u76f8\u540c\u7684\u4e2d\u592e\u5b58\u50a8\u5e93\uff1a\n\u53ea\u9700\u5c06\u540d\u79f0\u66ff\u6362\u4e3a\u60a8\u60f3\u8981\u4f7f\u7528\u7684\u6a21\u5757\u7684\u5de5\u4ef6id\uff0cgradle\u5c31\u4f1a\u4e3a\u60a8\u627e\u5230\u5b83\u3002\n\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684org\u5b50\u7c7b\u3002\u7eb3\u7c73HTTPD\u3002NanoHTTPD\u7528\u4e8e\u914d\u7f6e\u548c\u670d\u52a1\u8bf7\u6c42\u3002\n\u5728\u8fd9\u91cc\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199\u81ea\u5df1\u7684org\u5b50\u7c7b\u3002\u7eb3\u7c73HTTPD\u3002NanoWebSocketServer\u7528\u4e8e\u914d\u7f6e\u548c\u670d\u52a1websocket\u8bf7\u6c42\u3002org\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u5c0f\u578b\u7684\u6807\u51c6echo\u793a\u4f8b\u3002\u7eb3\u7c73HTTPD\u3002\u6837\u54c1\u3002\u56de\u54cd\u8c03\u8bd5WebSocketServer\u3002\u60a8\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u5b9e\u73b0\u81ea\u5df1\u7684\u670d\u52a1\u7684\u8d77\u70b9\u3002\n\u5bf9\u4e8e\u4e00\u79cd\u66f4\u7ecf\u5178\u7684\u65b9\u6cd5\uff0c\u53ef\u80fd\u53ea\u662f\u521b\u5efa\u4e00\u4e2aHTTP\u670d\u52a1\u5668\uff0c\u4e3b\u8981\u4e3a\u78c1\u76d8\u4e0a\u7684\u670d\u52a1\u6587\u4ef6\u63d0\u4f9b\u670d\u52a1\uff0c\u60a8\u53ef\u4ee5\u5c06\u8be5\u6a21\u5757\u4e0eartifactId nanohttpd webserver\u4e00\u8d77\u4f7f\u7528\u3002\n\u5305\u542b\u7684\u7c7b\u7ec4\u7ec7\u3002\u7eb3\u7c73HTTPD\u3002SimpleWebServer\u65e8\u5728\u7528\u4f5c\u60a8\u81ea\u5df1\u5b9e\u73b0\u7684\u8d77\u70b9\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u6309\u539f\u6837\u4f7f\u7528\u3002\u6309\u539f\u6837\u542f\u52a8\u7c7b\u5c06\u5728\u7aef\u53e38080\u4e0a\u542f\u52a8HTTP\u670d\u52a1\u5668\u5e76\u53d1\u5e03\u5f53\u524d\u76ee\u5f55\u3002\nkeytool-genkey-keyalg RSA-alias selfsigned-keystore-keystore\u3002jks-storepass password-validity 360-keysize 2048-ext SAN=DNS:localhost\uff0cIP:127.0.0.1-validity 9999\n\u8fd9\u5c06\u751f\u6210\u4e00\u4e2a\u540d\u4e3a&#39\uff1b\u5bc6\u94a5\u5e93\u3002jks&#39\uff1b\u5177\u6709\u4e00\u4e2a\u540d\u4e3alocalhost\u3001IP\u5730\u5740\u4e3a127.0.0.1\u7684\u4e3b\u673a\u7684\u81ea\u7b7e\u540d\u8bc1\u4e66\u3002\u73b0\u5728\u4f60\u53ef\u4ee5\u4f7f\u7528\uff1a\n\u5728\u542f\u52a8\u670d\u52a1\u5668\u4ee5\u4f7fNanoHTTPD\u63d0\u4f9bHTTPS\u8fde\u63a5\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd&#39\uff1b\u5bc6\u94a5\u5e93\u3002jks&#39\uff1b\u5728\u4f60\u7684\u8bfe\u5802\u8def\u5f84\u4e0a\u3002", "note_en": "NanoHTTPD is a light-weight HTTP server designed for embedding in other applications, released under a Modified BSD licence.\n It is being developed at Github and uses Apache Maven for builds &amp; unit testing:\n   We&#39;ll create a custom HTTP server project using Maven for build/dep system. This tutorial assumes you are using a Unix variant and a shell. First, install Maven and Java SDK if not already installed. Then run:\n         package  com.example;  import  java.io.IOException;  import  java.util.Map;  import  fi.iki.elonen.NanoHTTPD;   // NOTE: If you&#39;re using NanoHTTPD &gt;= 3.0.0 the namespace is different,   // instead of the above import use the following:\t  // import org.nanohttpd.NanoHTTPD;  public  class  App  extends  NanoHTTPD {  public  App()  throws  IOException {  super( 8080); start( NanoHTTPD  .SOCKET_READ_TIMEOUT,  false);  System .out .println(  &#34; \\nRunning! Point your browsers to http://localhost:8080/  \\n &#34;); }  public  static  void  main( String[]  args) {  try {  new  App(); }  catch ( IOException ioe) {  System .err .println(  &#34;Couldn&#39;t start server: \\n &#34;  + ioe); } }  @Override  public  Response  serve( IHTTPSession  session) {  String msg  =   &#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello server&lt;/h1&gt; \\n &#34;;  Map&lt; String,  String&gt; parms  = session .getParms();  if (parms .get(  &#34;username &#34;)  ==  null) { msg  +=   &#34;&lt;form action=&#39;?&#39; method=&#39;get&#39;&gt; \\n &lt;p&gt;Your name: &lt;input type=&#39;text&#39; name=&#39;username&#39;&gt;&lt;/p&gt; \\n &#34;  +   &#34;&lt;/form&gt; \\n &#34;; }  else { msg  +=   &#34;&lt;p&gt;Hello,  &#34;  + parms .get(  &#34;username &#34;)  +   &#34;!&lt;/p&gt; &#34;; }  return newFixedLengthResponse(msg  +   &#34;&lt;/body&gt;&lt;/html&gt; \\n &#34;); } }\n   If it started ok, point your browser at  http://localhost:8080/ and enjoy a web server that asks your name and replies with a greeting.\n  Nanolets are like servlets only that they have a extremely low profile. They offer an easy to use system for a more complex server application.This text has to be extended with an example, so for now take a look at the unit tests for the usage.  https://github.com/NanoHttpd/nanohttpd/blob/master/nanolets/src/test/java/org/nanohttpd/junit/router/AppNanolets.java\n  We are currently in the process of stabilizing NanoHTTPD from the many pull requests and feature requests that were integrated over the last few months. The next release will come soon, and there will not be any more &#34;intended&#34; major changes before the next release. If you want to use the bleeding edge version, you can clone it from Github, or get it from sonatype.org (see &#34;Maven dependencies / Living on the edge&#34; below).\n   /core \u2013 Fully functional HTTP(s) server consisting of one (1) Java file, ready to be customized/inherited for your own project.\n /samples \u2013 Simple examples on how to customize NanoHTTPD. See  HelloServer.java for a killer app that greets you enthusiastically!\n  /webserver \u2013 Standalone file server. Run &amp; enjoy. A popular use seems to be serving files out off an Android device.\n   No fixed config files, logging, authorization etc. (Implement by yourself if you need them. Errors are passed to java.util.logging, though.)\n    Some built-in support for HEAD, POST and DELETE requests. You can easily implement/customize any HTTP method, though.\n     Persistent connections (Connection &#34;keep-alive&#34;) support allowing multiple requests to be served over a single socket connection.\n    Runtime extension support (extensions that serve particular MIME types) - example extension that serves Markdown formatted files. Simply including an extension JAR in the webserver classpath is enough for the extension to be loaded.\n  --cors=&#34;http://appOne.company.com, http://appTwo.company.com&#34;: note the double quotes so that the two URLs are considered part of a single argument.\n  NanoHTTPD is a Maven based project and deployed to central. Most development environments have means to access the central repository. The coordinates to use in Maven are:\n   The coordinates for your development environment should correspond to these. When looking for an older version take care because we switched groupId from  com.nanohttpd to  org.nanohttpd in mid 2015.\n   In gradle you can use NanoHTTPD the same way because gradle accesses the same central repository:\n   Just replace the name with the artifact id of the module you want to use and gradle will find it for you.\n    Here you write your own subclass of  org.nanohttpd.NanoHTTPD to configure and to serve the requests.\n    Here you write your own subclass of  org.nanohttpd.NanoWebSocketServer to configure and to serve the websocket requests. A small standard echo example is included as  org.nanohttpd.samples.echo.DebugWebSocketServer. You can use it as a starting point to implement your own services.\n  For a more classic approach, perhaps to just create a HTTP server serving mostly service files from your disk, you can use the module with artifactId  nanohttpd-webserver.\n  The included class  org.nanohttpd.SimpleWebServer is intended to be used as a starting point for your own implementation but it also can be used as is. Starting the class as is will start a HTTP server on port 8080 and publishing the current directory.\n      keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass password -validity 360 -keysize 2048 -ext SAN=DNS:localhost,IP:127.0.0.1 -validity 9999\n This will generate a keystore file named &#39;keystore.jks&#39; with a self signed certificate for a host named localhost with the IP address 127.0.0.1 . Nowyou can use:\n  Before you start the server to make NanoHTTPD serve HTTPS connections, when you make sure &#39;keystore.jks&#39; is in your classpath.", "posttime": "2022-02-23 22:25:15", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,tiny", "title": "Nanohttpd\u2013Java\u4e2d\u5c0f\u5de7\u3001\u6613\u4e8e\u5d4c\u5165\u7684HTTP\u670d\u52a1\u5668", "title_en": "Nanohttpd \u2013 Tiny, easily embeddable HTTP server in Java", "transed": 1, "url": "https://github.com/NanoHttpd/nanohttpd", "via": "", "real_tags": ["java", "tiny"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074735, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5355\u8bcd&#34\uff1b\u5343\u8db3\u866b&#34\uff1b\u6307&#34\uff1b\u4e00\u5343\u82f1\u5c3a\uff0c\u201c\u4f46\u662f\u8fd9\u4e2a\u540d\u5b57\u6709\u70b9\u5938\u5f20\u3002\u76f4\u5230\u6700\u8fd1\uff0c\u79d1\u5b66\u5bb6\u4eec\u624d\u53d1\u73b0\u4e86\u4e00\u53ea\u5927\u7ea6\u6709750\u6761\u817f\u7684\u5343\u8db3\u866b\u3002\u968f\u7740\u6fb3\u5927\u5229\u4e9a\u4e00\u4e2a\u65b0\u7269\u79cd\u7684\u53d1\u73b0\uff0c\u79d1\u5b66\u5bb6\u4eec\u7ec8\u4e8e\u5c06\u5343\u8db3\u866b\u547d\u540d\u4e3a\u4e00\u79cd\u540d\u526f\u5176\u5b9e\u7684\u6606\u866b\uff1aMeet Eumillipes persephone\uff0c\u4e00\u79cd\u62e5\u67091306\u6761\u817f\u7684\u52a8\u7269\uff0c\u662f\u5df2\u77e5\u7684\u6700\u5927\u7684\u4e00\u79cd\u6606\u866b\u3002\u201d\u5c3c\u9a6c\u5c14\u3002\n\u73c0\u5c14\u585e\u798f\u6d85\u7684\u957f\u5ea6\u7ea6\u4e3a3.5\u82f1\u5bf8\uff0c\u5bbd\u5ea6\u7ea6\u4e3a1\u6beb\u7c73\u3002Charles Q.Choi\u5728\u300aInside Science\u300b\u6742\u5fd7\u4e0a\u62a5\u9053\u8bf4\uff0c\u8fd9\u79cd\u767d\u81ed\u866b\u6709\u4e00\u4e2a\u5706\u9525\u5f62\u7684\u5934\u90e8\u3001\u6709\u5599\u7684\u5634\u548c\u7528\u4e8e\u611f\u77e5\u73af\u5883\u7684\u5927\u5929\u7ebf\u3002\u8fd9\u4e9b\u53d1\u73b0\u53d1\u8868\u5728\u4e0a\u5468\u7684\u79d1\u5b66\u62a5\u544a\u4e2d\u3002\n&#34;\u5728\u6211\u770b\u6765\uff0c\u8fd9\u662f\u4e00\u79cd\u60ca\u4eba\u7684\u52a8\u7269\uff0c\u662f\u8fdb\u5316\u7684\u5947\u8ff9\uff1b\u8fd9\u9879\u7814\u7a76\u7684\u5408\u8457\u8005\u5e03\u9c81\u8bfa\u00b7\u5e03\u624e\u6258\u662f\u6fb3\u5927\u5229\u4e9a\u73c0\u65afBennelongia\u73af\u5883\u987e\u95ee\u516c\u53f8\u7684\u751f\u7269\u5b66\u5bb6\uff0c\u4ed6\u544a\u8bc9\u8def\u900f\u793e\u7684\u5a01\u5c14\u00b7\u9093\u7eb3\u59c6\u3002\u201c\u5c24\u5176\u662f\u8fd9\u79cd\u7269\u79cd\uff0c\u80fd\u591f\u9002\u5e94\u5728\u51e0\u5341\u7c73\u6df1\u7684\u571f\u58e4\u4e2d\u751f\u6d3b\uff0c\u5728\u5e72\u65f1\u548c\u6076\u52a3\u7684\u73af\u5883\u4e2d\uff0c\u5f88\u96be\u5728\u5730\u8868\u627e\u5230\u5b58\u6d3b\u7684\u5343\u8db3\u866b\u3002\u201d\n\u5e03\u624e\u6258\u66fe\u88ab\u77ff\u4e1a\u516c\u53f8\u8058\u4e3a\u73af\u5883\u987e\u95ee\uff0c\u4ed6\u57282020\u5e748\u6708\u8c03\u67e5\u8be5\u5730\u533a\u7684\u5f53\u5730\u91ce\u751f\u52a8\u7269\u65f6\u53d1\u73b0\u4e86E.\u73c0\u5c14\u585e\u798f\u6d85\u3002\u636e\u4f0a\u4e3d\u838e\u767d\u00b7\u666e\u96f7\u65af\u987f\u4e3a\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u62a5\u9053\uff0c\u5e03\u624e\u6258\u7528\u6f6e\u6e7f\u7684\u843d\u53f6\u4f5c\u4e3a\u9677\u9631\u7684\u8bf1\u9975\uff0c\u628a\u5b83\u4eec\u6254\u5230200\u82f1\u5c3a\u6df1\u7684\u94bb\u5b54\u4e2d\uff0c\u7136\u540e\u5377\u8d77\u516b\u53ea\u82cd\u767d\u7684\u5343\u8db3\u866b\u3002\u7136\u540e\uff0c\u4ed6\u628a\u8fd9\u4e9b\u5343\u8db3\u866b\u4ea4\u7ed9\u5f17\u5409\u5c3c\u4e9a\u7406\u5de5\u5927\u5b66\u6606\u866b\u5b66\u5bb6\u4fdd\u7f57\u00b7\u9a6c\u96f7\u514b\uff0c\u540e\u8005\u7814\u7a76\u4e86\u4e4b\u524d\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u53d1\u73b0\u7684\u8bb0\u5f55\u3002\u5728\u663e\u5fae\u955c\u4e0b\u89c2\u5bdf\u8fd9\u4e9b\u751f\u7269\u5e76\u5bf9\u5176DNA\u8fdb\u884c\u6d4b\u5e8f\u540e\uff0c\u4ed6\u4eec\u77e5\u9053\u81ea\u5df1\u6709\u4e86\u7b2c\u4e00\u53ea\u201c\u771f\u6b63\u7684\u201d\u5343\u8db3\u866b\u3002\n\u9a6c\u96f7\u514b\u544a\u8bc9\u300a\u6cf0\u6664\u58eb\u62a5\u300b\uff1a\u201c\u8fd9\u4ee4\u4eba\u96be\u4ee5\u7f6e\u4fe1\uff0c\u56e0\u4e3a\u5b83\u7684\u817f\u6570\u51e0\u4e4e\u662f\u4ee5\u524d\u5343\u8db3\u866b\u7684\u4e24\u500d\u3002\u201d\u3002\u201c\u5bf9\u4e8e\u4e00\u53ea\u52a8\u7269\u6765\u8bf4\uff0c750\u6761\u817f\u4f3c\u4e4e\u592a\u591a\u4e86\u3002\u4e00\u5343\u4e09\u767e\u96f6\u516d\u6761\u817f\u771f\u662f\u592a\u60ca\u4eba\u4e86\u3002\u201d\nBuzatto\u548cMarek\u8fd8\u6307\u51fa\uff0c\u4ed6\u4eec\u6536\u96c6\u7684\u96cc\u6027\u5343\u8db3\u866b\u7684\u5e73\u5747\u817f\u6570\u6bd4\u96c4\u6027\u591a\u3002\u7814\u7a76\u4e2d\u63cf\u8ff0\u7684\u4e24\u540d\u6210\u5e74\u7537\u6027\u5206\u522b\u6709778\u548c818\u6761\u817f\uff0c\u800c\u4e24\u540d\u6210\u5e74\u5973\u6027\u5206\u522b\u6709998\u548c1306\u6761\u817f\u3002\u968f\u7740\u5343\u8db3\u866b\u7684\u751f\u957f\u548c\u5916\u9aa8\u9abc\u7684\u8715\u76ae\uff0c\u5b83\u4eec\u53ef\u4ee5\u589e\u52a0\u989d\u5916\u7684\u817f\u3002\u7814\u7a76\u4eba\u5458\u8ba4\u4e3a\uff0c\u6240\u6709\u8fd9\u4e9b\u989d\u5916\u7684\u9644\u5c5e\u7269\u53ef\u80fd\u5bf9\u9700\u8981\u5728\u72ed\u7a84\u7684\u5730\u4e0b\u7a7a\u95f4\u4e2d\u75be\u9a70\u7684\u5c0f\u52a8\u7269\u662f\u4e00\u4e2a\u798f\u97f3\u3002\n&#34;\u6211\u4eec\u76f8\u4fe1\uff0c\u5927\u91cf\u7684\u817f\u5728\u7275\u5f15\u529b/\u529b\u91cf\u65b9\u9762\u63d0\u4f9b\u4e86\u4f18\u52bf\uff0c\u53ef\u4ee5\u63a8\u52a8\u4ed6\u4eec\u7684\u8eab\u4f53\u5411\u524d\u901a\u8fc7\u4ed6\u4eec\u5c45\u4f4f\u7684\u571f\u58e4\u4e2d\u7684\u5c0f\u95f4\u9699\u548c\u88c2\u7f1d\uff0c&#34\uff1b\u5e03\u624e\u6258\u8bf4\u3002\n\u7814\u7a76\u4eba\u5458\u5f97\u51fa\u7ed3\u8bba\uff0cE.persephone\u7684\u7956\u5148\u53ef\u80fd\u8d77\u6e90\u4e8e\u6570\u4ebf\u5e74\u524d\u7684\u5730\u9762\u4e4b\u4e0a\uff0c\u7136\u540e\u5728\u5929\u6c14\u53d8\u5f97\u66f4\u70ed\u3001\u66f4\u5e72\u71e5\u65f6\u9003\u79bb\u5730\u4e0b\u3002\u7531\u4e8e\u8be5\u56e2\u961f\u53ea\u80fd\u68c0\u67e5\u5c11\u6570\u6807\u672c\uff0c\u4ed6\u4eec\u8feb\u5207\u5e0c\u671b\u770b\u5230\u662f\u5426\u5b58\u5728\u5176\u4ed6\u751a\u81f3\u817f\u66f4\u957f\u7684\u5343\u8db3\u866b\u3002\n\u9a6c\u96f7\u514b\u5bf9\u300a\u7ebd\u7ea6\u65f6\u62a5\u300b\u8bf4\uff1a\u201c\u53ef\u80fd\u4f1a\u6709\u4e00\u53ea\u817f\u66f4\u957f\u3002\u201d\u3002", "note_en": "The word &#34;millipede&#34; means &#34;a thousand feet,\u201d but the name is a bit of an exaggeration. Until recently, scientists had only found a millipede with around 750 legs. With the discovery of a new species in Australia, scientists have finally assigned the millipede name to an insect worthy of the title: Meet\u00a0 Eumillipes persephone, a\u00a0critter with a whooping 1,306 legs\u2014the most of any known animal.\n E. persephone stretches around three-and-a-half inches long and around a millimeter wide. The pale bug has a cone-shaped head, beaked mouth, and large antennae used for sensing its environment, Charles Q. Choi reports for   Inside Science.\u00a0The findings were published last week\u00a0in   Scientific Reports .\n &#34;In my opinion, this is a stunning animal, a marvel of evolution,&#34; study co-author Bruno Buzatto, a\u00a0biologist at Bennelongia Environmental Consultants in Perth, Australia, tells  Reuter\u2019s Will Dunham. \u201cThis species, in particular, managed to adapt to living tens of meters deep in the soil, in an arid and harsh landscape where it is very hard to find any millipedes surviving in the surface.\u201d\n Buzatto, who was hired as an environmental consultant by mining companies, found  E. persephone while surveying the area for local wildlife in August 2020. Buzatto baited traps with damp leaf litter, dropped them down 200 feet into boreholes, and later reeled up eight pale millipedes, reports\u00a0Elizabeth Preston for the   New York Times. He then sent the millipedes to Virginia Tech entomologist Paul Marek, who studies the previous record-holding millipedes found in California. After they looked at the critters under the microscopes and sequenced\u00a0their DNA, they knew they had the first \u201ctrue\u201d millepede.\n \u201cIt was mind-boggling because it\u2019s almost double the previous number of legs in millipedes,\u201d Marek tells\u00a0the   Times. \u201cSeven hundred and fifty seems like a lot of legs for an animal. One thousand, three hundred and six is pretty astounding.\u201d\n Buzatto and Marek also noted that the female millipedes they collected averaged more legs than males. The\u00a0two adult males described in the study had 778 and 818\u00a0legs, while the two adult females\u00a0had 998 and 1,306 legs. As millipedes grow and molt their exoskeletons, they can add additional legs. The researchers think all those extra appendages might be a boon to the critters, who need to scuttle through tight underground spaces.\n &#34;We believe that the large number of legs provides an advantage in terms of traction/force to push their bodies forward through small gaps and fractures in the soil where they live,&#34; says Buzatto.\n The researchers conclude that the ancestors of  E. persephone may have originated above ground\u00a0hundreds of millions of years ago before fleeing underground when conditions became hotter and drier. Because the team was able to examine only a handful of\u00a0specimens, they\u2019re eager to see if other, even-leggier millipedes exist.\n \u201cThere could be one with more legs out there,\u201d Marek says to the   Times.", "posttime": "2022-02-23 22:23:16", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6761\u817f,finally,\u53d1\u73b0", "title": "\u6700\u540e\uff0c\u4e00\u53ea\u62e5\u67091k\u6761\u817f\u7684\u5343\u8db3\u866b", "title_en": "Finally, a Millipede That Has 1k Legs", "transed": 1, "url": "https://www.smithsonianmag.com/smart-news/finally-a-millipede-that-actually-has-1000-legs-180979269/", "via": "", "real_tags": ["\u6761\u817f", "finally", "\u53d1\u73b0"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1074734, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u5c06\u8ba8\u8bbaAMD CPU\u5206\u652f\u9884\u6d4b\u5668\u7684\u4e00\u4e9b\u6280\u672f\u7ec6\u8282\uff0c\u91cd\u70b9\u8ba8\u8bba\u5b83\u5728\u7b80\u5355\u6761\u4ef6\u5206\u652f\u4e2d\u7684\u884c\u4e3a\u3002\u6211\u4eec\u8fd8\u8ba8\u8bba\u4e86\u8fd9\u79cd\u884c\u4e3a\u4e0e\u5229\u7528\u5e38\u89c1\u548c\u4e0d\u5e38\u89c1\u7684Spectre v1\u5c0f\u5de5\u5177\u7684\u5173\u7cfb\u3002\u4f5c\u4e3a\u8ba8\u8bba\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6765\u770b\u770bAMD&#39\uff1bs&#34\uff1b\u7ba1\u7406AMD\u5904\u7406\u5668\u6295\u673a\u7684\u8f6f\u4ef6\u6280\u672f&#34\uff1b\u767d\u76ae\u4e66[1]\u5e76\u8bc4\u4f30\u5efa\u8bae\u7684\u7f13\u89e3\u63aa\u65bd\uff08V1-1\u81f3V1-3\uff09\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e00\u4e2a\u770b\u4f3c\u6e29\u548c\u7684\u4eba\u5de5\u5e7d\u7075v1\u5c0f\u5de5\u5177\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a\u6613\u4e8e\u4f7f\u7528\u7684\u4efb\u610f\u5185\u5b58\u6cc4\u6f0f\u539f\u8bed\u52a0\u4ee5\u5229\u7528\u3002\u6700\u540e\uff0c\u6211\u4eec\u590d\u5236\u4e86&#34\uff1b\u5bf9\u91ce\u5916\u6295\u673a\u578b\u6df7\u4e71\u8106\u5f31\u6027\u7684\u5206\u6790#34\uff1b\u8bba\u6587[2]\u5c55\u793a\u4e86\u5728AMD CPU\uff08\u4e0e\u82f1\u7279\u5c14\u76f8\u6bd4\uff09\u4e0a\u5f00\u53d1\u6b64\u7c7bSpectre v1\u5c0f\u5de5\u5177\u7684\u6613\u7528\u6027\u3002\n\u672c\u6587\u5177\u6709\u9ad8\u5ea6\u7684\u6280\u672f\u6027\uff0c\u4ee5\u56fe\u8868\u548c\u5217\u8868\u7684\u5f62\u5f0f\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u7ecf\u9a8c\u6570\u636e\u3002\u5047\u8bbe\u5bf9\u73b0\u4ee3CPU\u7684\u5fae\u4f53\u7cfb\u7ed3\u6784\u7ec6\u8282\u6709\u4e2d\u7b49\u7a0b\u5ea6\u7684\u7406\u89e3\u3002\u5728\u9002\u7528\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8ba8\u8bba\u7684\u4e3b\u9898\u8fdb\u884c\u7b80\u8981\u4ecb\u7ecd\u3002\u5bf9\u4f60\u6765\u8bf4\u592a\u591a\u4e86\uff1f\u6ca1\u95ee\u9898\uff0c\u8bf7\u67e5\u770b\u6211\u4eec\u7684\u6700\u540e\u8bc4\u8bba\u90e8\u5206\uff0c\u4e86\u89e3TL\uff1b\u535a\u58eb\n\u4e3a\u4e86\u4f7f\u672c\u6587\u66f4\u6613\u4e8e\u9605\u8bfb\u548c\u6d88\u5316\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u9075\u5faa\u7c7b\u4f3cFAQ\u7684\u6587\u6863\u7ed3\u6784\u3002\u8ba8\u8bba\u7684\u4e3b\u9898\u9010\u6e10\u5448\u73b0\u51fa\u8d8a\u6765\u8d8a\u8be6\u7ec6\u7684\u5185\u5bb9\u3002\u5e0c\u671b\u8fd9\u4e2a\u4e0d\u5bfb\u5e38\u7684\u535a\u5ba2\u5e16\u5b50\u7ed3\u6784\u4e0e\u6240\u63cf\u8ff0\u7684\u6280\u672f\u6750\u6599\u914d\u5408\u5f97\u5f88\u597d\u3002\n\u4eab\u53d7\u53e6\u4e00\u4e2a\u5173\u4e8e\u9884\u6d4b\u5931\u8bef\u7684\u5206\u652f\u3001\u5e7d\u7075v1\u5c0f\u5de5\u5177\u548c\u4e00\u4e24\u4e2aPoC\u7684\u6545\u4e8b\u5427\u3002\n\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u57282022\u5e741\u67087\u65e5\u81f32\u67082\u65e5\u671f\u95f4\u4e0eAMD PSIRT\u56e2\u961f\u8ba8\u8bba\u4e86\u6211\u4eec\u7684\u53d1\u73b0\u548c\u89c2\u5bdf\u7ed3\u679c\u3002AMD\u5f97\u51fa\u7ed3\u8bba\uff0c\u5b83\u4eec\u90fd\u662f\u5178\u578b\u7684Spectre v1\u573a\u666f\uff0c\u5e76\u5efa\u8bae\u6309\u7167\u6307\u5357[1]\u4e2d\u7684\u89e3\u91ca\u5e94\u7528\u7f13\u89e3\u63aa\u65bd\u3002AMD\uff08\u53ef\u4ee5\u7406\u89e3\uff0c\u5e76\u4e0e\u5176\u4ed6\u82af\u7247\u5236\u9020\u5546\u4fdd\u6301\u4e00\u81f4\uff09\u4e0d\u60f3\u5bf9\u5176\u5206\u652f\u9884\u6d4b\u5668\u7684\u8bbe\u8ba1\u53d1\u8868\u8bc4\u8bba\uff0c\u6211\u4eec\u8ba4\u4e3a\uff0c\u4f3c\u4e4e\u4e5f\u6ca1\u6709\u5174\u8da3\u5bf9\u62a5\u544a\u7684\u884c\u4e3a\u53ca\u5176\u5f71\u54cd\u8fdb\u884c\u66f4\u5f7b\u5e95\u7684\u5206\u6790\u3002\u6211\u4eec\u4e0d\u77e5\u9053\u8fd9\u79cd\u5206\u6790\u662f\u5728\u6211\u4eec\u7684\u62a5\u544a\u4e4b\u524d\u8fdb\u884c\u7684\uff0c\u8fd8\u662f\u5728\u62a5\u544a\u4e4b\u540e\u8fdb\u884c\u7684\u3002\n\u6709\u9274\u4e8e\u6b64\uff0c\u6211\u4eec\u51b3\u5b9a\u4eb2\u81ea\u5f7b\u5e95\u8c03\u67e5\u8fd9\u4e2a\u95ee\u9898\uff0c\u5e76\u5728\u8fd9\u91cc\u516c\u5f00\u5c55\u793a\u6211\u4eec\u7684\u7814\u7a76\u6210\u679c\u3002\u6211\u4eec\u8ba4\u4e3a\uff0c\u5bf9\u4e8e\u672c\u6587\u8ba8\u8bba\u7684\u573a\u666f\uff0c\u5efa\u8bae\u7684\u7f13\u89e3\u63aa\u65bd\u662f\u4e0d\u5207\u5b9e\u9645\u7684\uff0c\u56e0\u4e3a\u4e0b\u9762\u7684\u7ec6\u8282\u6709\u671b\u8bf4\u660e\u8fd9\u4e9b\u539f\u56e0\u3002\n\u6545\u4e8b\u4ece\u4e00\u4e2a\u6709\u70b9\u610f\u5916\u4f46\u51fa\u4eba\u610f\u6599\u7684\u89c2\u5bdf\u5f00\u59cb\u3002\u6709\u4e00\u6b21\u6211\u95ee\u81ea\u5df1\uff1a&#34\uff1b\u4e00\u4e2a\u53ef\u8ba1\u7b97\u3001\u65e0\u5185\u5b58\u8bbf\u95ee\u4e14\u53ef\u80fd\u65e0\u5ef6\u8fdf\u7684\u6761\u4ef6\u5206\u652f\u662f\u5426\u4f1a\u88ab\u9884\u6d4b\u5931\u8bef\uff1f\u5982\u679c\u53ef\u4ee5\uff0c\u60c5\u51b5\u4f1a\u600e\u6837&#34;. \u8fd9\u4e9b\u95ee\u9898\u7684\u7b54\u6848\u591a\u5c11\u5df2\u7ecf\u7ed9\u51fa\u4e86\u3002\u73b0\u4ee3CPU\u4f1a\u5bf9\u4efb\u4f55\u5206\u652f\u8fdb\u884c\u9519\u8bef\u9884\u6d4b\u7684\u539f\u56e0\u6709\u5f88\u591a\u3002\u5fae\u4f53\u7cfb\u7ed3\u6784\u8d44\u6e90\u4e89\u7528\u3001\u5206\u652f\u6307\u4ee4\u9519\u4f4d\u3001\u7f13\u5b58\u7ebf\u6216\u9875\u9762\u8fb9\u754c\u62c6\u5206\u53ef\u80fd\u662f\u5176\u4e2d\u7684\u4e00\u4e9b\u539f\u56e0\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u79cd\u6545\u610f\u5bf9\u5e7d\u7075v1\u5c0f\u5de5\u5177\u8fdb\u884c\u5206\u652f\u8bef\u8bad\u7ec3\u7684\u6280\u672f\u3002\n\u7136\u800c\uff0c\u8bb8\u591a\u4f9b\u5e94\u5546\u548c\u5b89\u5168\u4ece\u4e1a\u4eba\u5458\u4f3c\u4e4e\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u8bef\u89e3\uff0c\u5373Spectre v1\u5c0f\u5de5\u5177\u4e3b\u8981\u662f\u5173\u4e8e\u8d85\u51fa\u8303\u56f4\u7684\u9635\u5217\u5185\u5b58\u8bbf\u95ee\uff0c\u7531\u5177\u6709\u53ef\u53d8\u8ba1\u7b97\u5ef6\u8fdf\uff08\u901a\u5e38\u662f\u5185\u5b58\u8bbf\u95ee\uff09\u7684\u9635\u5217\u7ed1\u5b9a\u68c0\u67e5\u7ec4\u6210\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u60f3\u5230\u7684\u662f\u53ef\u8ba1\u7b97\u7684\u6761\u4ef6\u5206\u652f\uff0c\u5b83\u7684\u6761\u4ef6\u64cd\u4f5c\u6570\u5728\u901a\u7528\u5bc4\u5b58\u5668\u4e2d\u7acb\u5373\u53ef\u7528\u3002\u8fd9\u6837\u7684\u5206\u652f\u662f\u5426\u53ef\u80fd\u4ee5\u53ef\u63a7\u7684\u65b9\u5f0f\u9884\u6d4b\u5931\u8bef\uff1f\u5b83\u5bf9\u5b89\u5168\u6709\u5f71\u54cd\u5417\uff1f\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u6765\u770b\u770b\u3002\n\u6211\u901a\u5e38\u901a\u8fc7\u4f7f\u7528\u6211\u6700\u559c\u6b22\u7684\u5de5\u5177KTF\uff08Kernel Test Framework[3]\uff09\u5b9e\u73b0\u7b80\u5355\u7684\u5b9e\u9a8c\u6765\u5f00\u59cb\u8fd9\u7c7b\u7814\u7a76\uff0c\u6211\u5728\u4e0d\u4e45\u524d\u521b\u5efa\u4e86KTF\uff0c\u6b63\u662f\u51fa\u4e8e\u8fd9\u6837\u7684\u76ee\u7684\u3002KTF\u4f7f\u5728\u8bb8\u591a\u4e0d\u540c\u7684\u6267\u884c\u73af\u5883\uff08\u88f8\u673a\u6216\u865a\u62df\u5316\uff09\u4e2d\u91cd\u65b0\u8fd0\u884c\u5b9e\u9a8c\u53d8\u5f97\u5f88\u5bb9\u6613\uff0c\u5e76\u914d\u5907\u4e86\u4e00\u4e9b\u7ecf\u8fc7\u826f\u597d\u6d4b\u8bd5\u7684\u57fa\u4e8e\u7f13\u5b58\u7684\u4fa7\u901a\u9053\u539f\u8bed\u3002\n0.mov$CACHE_LINE_ADDR\uff0c%rsi\uff1b\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef\u7684\u5185\u5b58\u5730\u57401\u3002clflush\uff08%rsi\uff09\uff1b\u5c06\u7f13\u5b58\u7ebf\u4ece\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u6e05\u9664\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u72b6\u60012\u3002\u7b54\u68483\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57284\u4e4b\u5916\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1.5\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL6\u3002mov\uff08%rsi\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c7\u3002\u7ed3\u675f\u6807\u7b7e\uff1a8\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\n\u95ee\u9898\u662f\uff1a\u4f4d\u7f6e5\u5904\u7684\u201c\u603b\u662f\u6267\u884c\u201d\u5206\u652f\u6709\u591a\u5c11\u6b21\u4f1a\u88ab\u9884\u6d4b\u5931\u8bef\uff1f\n\u6211\u5728\u4e00\u4e2a100k\u6b21\u7684\u5faa\u73af\u4e2d\u8fd0\u884c\u4e86\u5341\u6b21\u4ee3\u7801\uff0c\u5e76\u7edf\u8ba1\u4e86\u6240\u6709\u5bf9CACHE_LINE_ADDR\u7684\u4f4e\u5ef6\u8fdf\u8bbf\u95ee\uff0c\u8fd9\u8868\u660e\u63a8\u6d4b\u6267\u884c\u7684\u5185\u5b58\u8d1f\u8f7d\u3002\u8fd9\u5c31\u662f\u6211\u5f97\u5230\u7684\uff1a\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0c\u8fed\u4ee3\u6b21\u65706100000 2100000 4100000 6100000 5100000 4100000 4100000 6100000 4100000 7100000\u603b\u8ba1\uff1a48\n\u5217CL0\uff08\u4ee5\u53ca\u540e\u9762\u7684\u5b9e\u9a8c\u4e2d\u7684CL1\uff09\u8868\u793a\u5728\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u63a8\u6d4b\u52a0\u8f7d\u6d4b\u91cf\u7f13\u5b58\u7ebf\u7684\u6b21\u6570\uff08\u5373\u9884\u6d4b\u5931\u8bef\u7684\u6b21\u6570\uff09\u4e3b\u5faa\u73af\u8fed\u4ee3\u7684\u6b21\u6570\uff0c\u5bf9\u4e8e\u5341\u6b21\u6267\u884c\u4e2d\u7684\u6bcf\u4e00\u6b21\u3002\u603b\u6570\u662f\u53d1\u751f\u7684\u6240\u6709\u9884\u6d4b\u5931\u8bef\u7684\u603b\u548c\u3002Baseline\u662f\u4ece\u7f13\u5b58\u8bbf\u95ee\u5185\u5b58\u6570\u636e\u6240\u9700\u7684\u5e73\u5747CPU\u5468\u671f\u6570\u3002\n\u6211\u6ca1\u60f3\u5230\u4f1a\u8fd9\u6837\u3002\u4e00\u4e9b\u4e0d\u89c4\u5219\u7684\u4e8b\u4ef6\u5e76\u4e0d\u4ee4\u4eba\u9707\u60ca\uff0c\u4f46\u8fd9\u662f\u5f88\u6b63\u5e38\u7684\u3002\u6211\u5728\u8fd9\u4e2a\u9886\u57df\u5ea6\u8fc7\u7684\u51e0\u5e74\u8ba9\u6211\u660e\u767d\uff0c\u8fd9\u53ef\u80fd\u6beb\u65e0\u610f\u4e49\u3002\u53ef\u80fd\u5b58\u5728\u7f13\u5b58\u566a\u97f3\uff08\u4f8b\u5982\uff0c\u7531\u4e8e\u9891\u7e41\u4e2d\u65ad\u6216\u540c\u7ea7\u8d85\u7ebf\u7a0b\u6d3b\u52a8\uff09\u3001\u57fa\u7ebf\u8ba1\u7b97\u9519\u8bef\u3001\u7531\u4e8e\u6211\u6d4b\u8bd5\u7684\u865a\u62df\u673a\u7684vCPU\u6d6e\u52a8\u800c\u4ea7\u751f\u7684\u5047\u4fe1\u53f7\uff0c\u6216\u8005\u5927\u91cf\u5176\u4ed6\u539f\u56e0\u7834\u574f\u4e86\u5b9e\u9a8c\u3002\n\u4e3a\u4e86\u5feb\u901f\u6392\u9664\u5176\u4e2d\u4e00\u4e9b\uff0c\u6211\u503e\u5411\u4e8e\u6dfb\u52a0\u53e6\u4e00\u4e2a\u975e\u51b2\u7a81\u6d4b\u91cf\u7f13\u5b58\u7ebf\uff0c\u5e76\u5728\u5b9e\u9a8c\u8fd0\u884c\u65f6\u6d4b\u91cf\u4e24\u4e2a\u7f13\u5b58\u7ebf\u3002\u5982\u679c\u4fe1\u53f7\u6ca1\u6709\u76f8\u5e94\u4e14\u53ef\u9760\u5730\u53d8\u5316\uff0c\u5219\u5b9e\u9a8c\u68c0\u6d4b\u5230\u566a\u58f0\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL8\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c9\u3002\u7ed3\u675f\u6807\u7b7e\uff1aA.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\n\u6211\u5728100k\u6b21\u8fed\u4ee3\u7684\u5faa\u73af\u4e2d\u518d\u6b21\u8fd0\u884c\u4e86\u8fd9\u6bb5\u4ee3\u7801\u4e24\u6b21\uff0c\u6bcf\u6b21\u90fd\u5728\u4f4d\u7f6e8\u4f7f\u7528\u4e0d\u540c\u7684\u7f13\u5b58\u7ebf\u3002\u8fd9\u662f\u6211\u4e3a%rsi\u5f97\u5230\u7684\uff1a\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200 CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65704\uff0c0100000 2\uff0c0100000 4\uff0c0100000 1\uff0c0100000 2\uff0c0100000 3\uff0c0100000 2\uff0c0100000 4\uff0c0100000 2\uff0c0100000 4\uff0c0100000\u603b\u8ba1\uff1a28\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200 CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c3100000\uff0c3100000\uff0c1100000\uff0c3100000\uff0c3100000\uff0c3100000\uff0c2100000\uff0c2100000\uff0c2100000\uff0c2100000\uff0c6100000\uff0c3100000\u603b\u8ba1\uff1a28\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u5f00\u59cb\u6000\u7591\u53ef\u80fd\u771f\u7684\u51fa\u4e86\u95ee\u9898\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u6211\u8fd8\u7981\u7528\u4e86\u5faa\u73af\u4e2d\u65ad\uff08cli/sti\uff09\uff0c\u5e76\u786e\u4fdd\u7cfb\u7edf\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u50cf\u4e0a\u9762\u8fd9\u6837\u7684\u6761\u4ef6\u5206\u652f\u5728\u4e3b\u5faa\u73af\u6267\u884c\u671f\u95f4\u81f3\u5c11\u4f1a\u51fa\u73b0\u4e00\u6b21\u9884\u6d4b\u5931\u8bef\u3002\u5728\u5206\u652f\u9884\u6d4b\u5355\u5143\uff08BPU\uff09\u72b6\u6001\u975e\u5e38\u5e72\u51c0\u7684\u5047\u8bbe\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u65b0\u9047\u5230\u7684\u6761\u4ef6\u5206\u652f\u901a\u5e38\u5c5e\u4e8e\u9759\u6001\u9884\u6d4b\u7ed3\u679c\u89c4\u5219\u3002\u7136\u540e\uff0c\u5b83\u6839\u636e\u9ed8\u8ba4\u7684\u542f\u53d1\u5f0f\uff08\u4f8b\u5982\uff0c\u59cb\u7ec8\u91c7\u7528\u65b0\u7684\u524d\u5411\u5206\u652f\uff0c\u59cb\u7ec8\u4e0d\u91c7\u7528\u540e\u5411\u5206\u652f\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\u51b3\u5b9a\u8981\u505a\u4ec0\u4e48\u3002\u5982\u679c\u4f60\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4e00\u5f00\u59cb\u4f1a\u6709\u8fd9\u6837\u7684\u5206\u652f\u9884\u6d4b\uff0c\u90a3\u4e48\u7a0d\u540e\u5c31\u4f1a\u6709\u7b54\u6848\u3002\n\u6211\u5f88\u5feb\u5728\u4e0d\u540c\u7684CPU\u4e0a\u91cd\u65b0\u6d4b\u8bd5\u4e86\u76f8\u540c\u7684\u4ee3\u7801\u3002\u5176\u4e2d\u4e00\u4e9b\u662f\u82f1\u7279\u5c14\uff0c\u53e6\u4e00\u4e9b\u662fAMD\uff0c\u4e00\u4e9b\u662f\u670d\u52a1\u5668\uff0c\u8fd8\u6709\u4e00\u4e9b\u662f\u5ba2\u6237\u7aef\u3002\u6211\u671f\u5f85\u7740\u901a\u5e38\u7684\u7ed3\u679c\uff1a\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u5f97\u5230\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u6ca1\u6709\u4efb\u4f55\u6e05\u6670\u53ef\u89c1\u7684\u56fe\u6848\u5f62\u6210\u3002\u4f46\u8fd9\u4e00\u6b21\uff0c\u4e0d\u540c\u5bfb\u5e38\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u3002\n\u6211\u6d4b\u8bd5\u8fc7\u7684\u6240\u6709AMD CPU\u90fd\u663e\u793a\u51fa\u4e0e\u4e0a\u9762\u663e\u793a\u7684\u6709\u70b9\u7c7b\u4f3c\u7684\u7ed3\u679c\u6a21\u5f0f\u3002\u7136\u800c\uff0c\u65e0\u8bba\u6211\u4f7f\u7528\u7684\u7f13\u5b58\u7ebf\u662f\u4ec0\u4e48\uff0c\u6240\u6709\u82f1\u7279\u5c14CPU\u90fd\u6ca1\u6709\u663e\u793a\u4efb\u4f55\u9884\u6d4b\u5931\u8bef\u3002\nCPU:Intel\uff08R\uff09Core\uff08TM\uff09i9-10980XE CPU@3\u300200GHZ\u9891\u7387\uff1a3000 MHZ\u57fa\u7ebf\uff1a169CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\u603b\u8ba1\uff1a0\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\uff0c0100000\u603b\u8ba1\uff1a0\n\u8fd9\u4e00\u70b9\u5f88\u6709\u8da3\u3002\u6211\u4ed4\u7ec6\u68c0\u67e5\u4e86\u5185\u5b58\u8bbf\u95ee\u5ef6\u8fdf\u57fa\u7ebf\u662f\u5426\u5408\u7406\uff0c\u4ee5\u53ca\u7f13\u5b58oracle\u5b9e\u73b0\u662f\u5426\u4ecd\u7136\u6709\u6548\u3002\u6211\u8fd8\u786e\u4fdd\u4ee3\u7801\u6267\u884c\u88ab\u56fa\u5b9a\u5728\u7ed9\u5b9a\u7684\u903b\u8f91CPU\u4e0a\u3002\u6211\u8fd8\u7528\u4e00\u4e9b\u6545\u610f\u4e0d\u6b63\u786e\u7684\u57fa\u7ebf\u91cd\u65b0\u8fd0\u884c\u4e86\u5b9e\u9a8c\uff0c\u770b\u770b\u662f\u5426\u6709\u566a\u97f3\uff0c\u6211\u505a\u5230\u4e86\u3002\n\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6240\u6709\u8ff9\u8c61\u90fd\u8868\u660eAMD\u7684CPU\u53ca\u5176\u9884\u6d4b\u5931\u8bef\u6709\u95ee\u9898\u3002\n\u7531\u4e8e\u6211\u4eec\u6b63\u5728\u5904\u7406\u5bfc\u81f4\u63a8\u6d4b\u6027\u6267\u884c\u5185\u5b58\u52a0\u8f7d\u7684\u5206\u652f\u9884\u6d4b\u5931\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u5206\u652f\u4e4b\u540e\u653e\u7f6e\u4e00\u6761\u4e32\u884c\u5316\u6307\u4ee4\u6765\u505c\u6b62\u63a8\u6d4b\u6027\u6267\u884c\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u89c2\u5bdf\u7ed3\u679c\u6709\u66f4\u597d\u7684\u4fe1\u5fc3\uff0c\u56e0\u4e3a\u4e0d\u5e94\u8be5\u6709\u4efb\u4f55\u4fe1\u53f7\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL8\u3002\u5fe0\u8bda\uff1b\u5728AMD\u4e0a\uff0clfence\u53ef\u4ee5\u8bbe\u7f6e\u4e3adispatch Serialization mode\uff08\u8c03\u5ea6\u5e8f\u5217\u5316\u6a21\u5f0f\uff09\uff0c\u4ece\u800c\u505c\u6b62\u63a8\u6d4b9\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1aB.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a0\n\u6ca1\u6709\u9884\u671f\u7684\u4fe1\u53f7\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u8bf4\u670d\u81ea\u5df1\uff0c\u6211\u770b\u5230\u8fd9\u4e2a\u5fae\u4e0d\u8db3\u9053\u7684\u6761\u4ef6\u5206\u652f\u7684\u9891\u7e41\u5206\u652f\u9884\u6d4b\u5931\u8bef\u53ea\u53d1\u751f\u5728AMD CPU\u4e0a\uff0c\u800c\u4e0d\u662f\u82f1\u7279\u5c14CPU\u4e0a\u3002\n\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e00\u4e9b\u6709\u5173AMD branch predictor\u5b9e\u73b0\u7684\u4fe1\u606f\u3002\u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u518d\u505a\u51e0\u6b21\u5b9e\u9a8c\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u60c5\u51b5\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5fe0\u8bda\uff1b\u786e\u4fdd\u7f13\u5b58\u7ebf\u771f\u7684\u57286\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=17\u3002\u5fe0\u8bda\uff1b\u5728AMD\u4e0a\uff0clfence\u53ef\u4ee5\u8bbe\u7f6e\u4e3adispatch Serialization mode\uff08\u8c03\u5ea6\u4e32\u884c\u5316\u6a21\u5f0f\uff09\uff0c\u4ece\u800c\u505c\u6b62\u63a8\u6d4b\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL9\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1aB.\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65706\uff0c0100000 5\uff0c0100000 7\uff0c0100000 8\uff0c0100000 12\uff0c0100000 6\uff0c0100000 9\uff0c0100000 10\uff0c0100000 8\uff0c0100000 9\uff0c0100000\u603b\u6570\uff1a80\uff0c61000000\uff0c7100000 0\uff0c8100000 0\uff0c9100000 0\uff0c5100000 0\uff0c7100000 0\uff0c8100000 0\uff0c8100000 0\uff0c8100000 9100000\u603b\u8ba1\uff1a75\n\u7531\u4e8e\u5728\u8df3\u8dc3\u4e4b\u524d\u653e\u7f6elfence\uff0c\u9884\u6d4b\u5931\u8bef\u7387\u51fa\u73b0\u4e86\u8f7b\u5fae\u4f46\u6301\u7eed\u7684\u589e\u52a0\uff0c\u8fd9\u6709\u70b9\u4ee4\u4eba\u60ca\u8bb6\u3002\u5e8f\u5217\u5316\u662f\u5426\u4e0e\u624b\u5934\u7684\u95ee\u9898\u6709\u5173\uff1f\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65701\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c\u603b\u8ba1\uff1a3101100000\uff0c0100000 0\uff0c1100000\uff0c0100000 0\uff0c0100000 0\uff0c1100000\u603b\u8ba1\uff1a5\n\u770b\u8d77\u6765\u4fe1\u53f7\u4ecd\u7136\u5b58\u5728\uff0c\u4f46\u660e\u663e\u8f83\u5f31\u3002\u8ba9&#39\uff1bs\u7136\u540e\u79fb\u9664sfence\uff1a\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9519\u8bef\u9884\u6d4b1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9519\u8bef\u9884\u6d4b2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1.5\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL6\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c7\u3002\u7ed3\u675f\u6807\u7b7e\uff1a8\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65700\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a0\n\u6839\u672c\u6ca1\u6709\u4fe1\u53f7\uff01\u6211\u6ca1\u6599\u5230\u3002\u6bd5\u7adf\uff0csfence\u6307\u4ee4\u5728\u8fd9\u91cc\u4e0d\u5e94\u8be5\u90a3\u4e48\u76f8\u5173\uff1b\u5b83\u4e0d\u662f\u4e32\u884c\u5316\u7684\uff0c\u5e76\u4e14\u5b8c\u5168\u4e0d\u5e94\u8be5\u5f71\u54cd\u5206\u652f\u9884\u6d4b\u5931\u8bef\u3002\u76f8\u53cd\uff0c\u5047\u8bbe\u9700\u8981sfence\u6765\u786e\u4fdd\u7f13\u5b58\u7ebf\u88ab\u5237\u65b0\u3002\u5982\u679c\u6ca1\u6709\u5b83\uff0c\u4fe1\u53f7\u5e94\u8be5\uff08\u9519\u8bef\u5730\uff09\u66f4\u5f3a\u3002\u56e0\u6b64\uff0c\u81f3\u5c11\u5728\u6709\u548c\u6ca1\u6709sfence\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u7684\u7ed3\u679c\u5e94\u8be5\u8868\u660e\u4fe1\u53f7\u7684\u5b58\u5728\u3002\n\u6211\u5f88\u597d\u5947\uff0c\u8fd9\u79cd\u5dee\u5f02\u662f\u5426\u4ec5\u4ec5\u662f\u56e0\u4e3a\u6709\u4eba\u5728\u573a\u800c\u9020\u6210\u7684\u5ef6\u8bef\uff0c\u8fd8\u662f\u5176\u4ed6\u4ec0\u4e48\u539f\u56e0\u9020\u6210\u7684\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u5c1d\u8bd5\u4f7f\u7528\u53e6\u4e00\u6761\u65e2\u4e0d\u662f\u5e8f\u5217\u5316\u4e5f\u4e0d\u662f\u5185\u5b58\u6392\u5e8f\u7684\u6307\u4ee4\u3002\u4e3a\u6b64\uff0c\u6211\u51b3\u5b9a\u4f7f\u7528\u6682\u505c\u6307\u4ee4\u3002\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u6682\u505c5\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee32\uff0c0100000 1\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 2\uff0c0100000\u603b\u8ba1\uff1a9\uff0c1100000\uff0c2100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c0100000 0\uff0c1100000\uff0c010000\u603b\u8ba1\uff1a4\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=16\u3002jz END_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230END_LABEL7\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u5728\u67b6\u6784\u4e0a\u6267\u884c8\u3002\u7ed3\u675f\u6807\u7b7e\uff1a9\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee33\uff0c0100000 2\uff0c0100000 0\uff0c0100000 1\uff0c0100000 0\uff0c0100000 3\uff0c0100000 1\uff0c0100000 1\uff0c0100000 0\uff0c0100000 0\uff0c0100000\u603b\u8ba1\uff1a11000100000 0\uff0c2100000 0\uff0c2100000 0\uff0c2100000 0\uff0c1100000\uff0c0100000 0\uff0c3100000 0\uff0c1100000\uff0c2100000\uff0c11000002100000\u603b\u8ba1\uff1a14\n\u6211\u56f0\u60d1\u4e86\u4e00\u4f1a\u513f\uff0c\u4f46\u77a5\u4e86\u4e00\u773c&#34\uff1bAMD64\u4f53\u7cfb\u7ed3\u6784\u7a0b\u5e8f\u5458\u624b\u518c\u7b2c3\u5377\uff1a\u901a\u7528\u548c\u7cfb\u7edf\u8bf4\u660e&#34\uff1b[4] \u63cf\u8ff0clflush\u6307\u4ee4\u7684\u90e8\u5206\u5e2e\u52a9\u6211\u7406\u89e3\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u4e2a\u95ee\u9898\u662f\u7531\u5f31\u5e8fclflush\u6307\u4ee4\u5f15\u8d77\u7684\uff0c\u8fd9\u4e9b\u6307\u4ee4\u4e0e\u63a8\u6d4b\u6027\u5185\u5b58\u52a0\u8f7d\u6709\u5173\u3002\u8ba9&#39\uff1b\u8ba9\u6211\u4eec\u5f15\u7528\u624b\u518c\uff1a&#34\uff1b[...] CLFLUSH\u6307\u4ee4\u76f8\u5bf9\u4e8e\u5728\u5185\u5b58\u4e0a\u8fd0\u884c\u7684\u5176\u4ed6\u6307\u4ee4\u662f\u5f31\u987a\u5e8f\u7684\u3002\u5904\u7406\u5668\u542f\u52a8\u7684\u63a8\u6d4b\u6027\u52a0\u8f7d\uff0c\u6216\u4f7f\u7528\u7f13\u5b58\u9884\u53d6\u6307\u4ee4\u663e\u5f0f\u6307\u5b9a\u7684\u63a8\u6d4b\u6027\u52a0\u8f7d\uff0c\u53ef\u4ee5\u56f4\u7ed5CLFLUSH\u6307\u4ee4\u91cd\u65b0\u6392\u5e8f\u3002\u8fd9\u79cd\u91cd\u65b0\u6392\u5e8f\u53ef\u80fd\u4f1a\u4f7f\u63a8\u6d4b\u9884\u53d6\u7684\u7f13\u5b58\u7ebf\u65e0\u6548\uff0c\u4ece\u800c\u65e0\u610f\u4e2d\u7834\u574f\u9884\u53d6\u64cd\u4f5c&#34;\n\u663e\u7136\uff0c\u8fd9\u5c31\u662f\u8fd9\u91cc\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u63a8\u6d4b\u8d1f\u8f7d\u5728clflush\u4e2d\u91cd\u65b0\u6392\u5e8f\uff0c\u5e76\u5728clflush\u4e4b\u524d\u6267\u884c\u3002clflush\u6307\u4ee4\u65e0\u610f\u4e2d\u5c4f\u853d\u4e86\u4fe1\u53f7\u3002\u624b\u518c\u8fd8\u8bf4\uff1a\n&#34; \u907f\u514d\u8fd9\u79cd\u60c5\u51b5\u7684\u552f\u4e00\u65b9\u6cd5\u662f\u5728CLFLUSH\u6307\u4ee4\u4e4b\u540e\u4f7f\u7528MFENCE\u6307\u4ee4\uff0c\u5f3a\u5236CLFLUSH\u6307\u4ee4\u5bf9\u540e\u7eed\u5185\u5b58\u64cd\u4f5c\u8fdb\u884c\u5f3a\u6392\u5e8f&#34;\n\u5f00\u59cb\u4e86\u3002\u4ece\u73b0\u5728\u8d77\uff0c\u6211\u4eec\u5c06\u4f7f\u7528mfence\u6307\u4ee4\u6765\u8ba2\u8d2dclflush\u6307\u4ee4&#39\uff1b\u6267\u884c\u5f97\u5f53\u3002\n\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4e00\u76f4\u5728\u5c1d\u8bd5\u5411\u524d\u79fb\u52a8\u7684\u5206\u652f\u3002\u4f46BPU\u53ef\u80fd\u4f1a\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u5bf9\u5f85\u5411\u540e\u6761\u4ef6\u5206\u652f\u3002\u8ba9&#39\uff1b\u73b0\u5728\u8ba9\u6211\u4eec\u6765\u56de\u987e\u4e00\u4e0b\u8fc7\u53bb\u4e00\u76f4\u4ee5\u6765\u7684\u5206\u652f\u3002\n\u4e0e\u4e4b\u524d\u7684\u5b9e\u9a8c\u7c7b\u4f3c\uff0c\u6211\u4f7f\u7528\u4ee5\u4e0b\u5411\u540e\u6761\u4ef6\u5206\u652f\u4ee3\u7801\u6784\u9020\uff0c\u5728100k\u6b21\u8fed\u4ee3\u7684\u5faa\u73af\u4e2d\u8fd0\u884c\u4e86\u5341\u6b21\uff1a\n0.\u79fb\u52a8\u7f13\u5b58\u7ebf0\u5730\u5740%rsi\uff1b\u5185\u5b58\u5730\u57400\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef1\u3002mov\u7f13\u5b58\u7ebf\u5730\u5740%rbx\uff1b\u5185\u5b58\u5730\u57401\uff0c\u5176\u8bbf\u95ee\u5ef6\u8fdf\u5141\u8bb8\u89c2\u5bdf\u9884\u6d4b\u5931\u8bef2\u3002clflush\uff08%rsi\uff093\u3002clflush\uff08%rbx\uff09\uff1b\u6e05\u9664\u7f13\u5b58\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u4e24\u6761\u7f13\u5b58\u7ebf\uff0c\u4ee5\u83b7\u5f97\u5e72\u51c0\u7684\u72b6\u60014\u3002\u7b2c\u4e94\u7ae0\u3002jmp BRANCH_\u6807\u7b7e\uff1b\u5230\u540e\u9762\u7684\u5206\u652f6\u3002\u8fd4\u56de\u6807\u7b7e\uff1a\uff1b\u8fd9\u662f\u5411\u540e\u5206\u652f\u76ee\u68077\u3002jmp-END_\u6807\u7b7e\uff1b\u53bb\u6d4b\u91cf8\u3002\u5bf9\u9f5064\uff1b\u8be5\u5bf9\u9f50\u7ed3\u6784\u7528\u4e8e\u9694\u79bb\u540e\u54119\u3002ud2\uff1b\u4ece\u65e9\u671f\u7684\u5206\u652f\u4e2d\u5206\u652f\u3002\u8fd9\u4e00\u70b9\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5bc6\u5ea6A.\u5bf9\u51c664\uff1b\u6bcf\u4e2a\u7f13\u5b58\u7ebf\u7684\u5206\u652f\u6570\u5f88\u91cd\u8981\u3002B.\u5206\u652f\u673a\u6784\u6807\u7b7e\uff1aC.\u5f02\u6216%rdi\uff0c%rdi\uff1b\u8bbe\u7f6eZF=1D\u3002jz\u8fd4\u56de_\u6807\u7b7e\uff1b\u5982\u679cZF==1\uff0c\u5219\u8f6c\u5230\u8fd4\u56de\u6807\u7b7e\u3002mov\uff08%rsi/%rbx\uff09\uff0c%rax\uff1b\u5237\u65b0\u7f13\u5b58\u7ebf\u7684\u5185\u5b58\u8d1f\u8f7d\uff1b\u5b83\u4ece\u4e0d\u6267\u884c\u67b6\u6784\u3002\u7ed3\u675f\u6807\u7b7e\uff1a10\u3002\u6d4b\u91cf\u7f13\u5b58\u7ebf\u5730\u5740\u8bbf\u95ee\u65f6\u95f4\nCPU:AMD EPYC 7601 32\u6838\u5904\u7406\u5668\u57fa\u7ebf\uff1a200CL0\uff0cCL1\uff0c\u8fed\u4ee3\u6b21\u65702\uff0c0100000 2\uff0c0100000 0\uff0c0100000 1\uff0c0100000 1\uff0c0100000 1\uff0c0100000 3\uff0c0100000 1\uff0c0100000 0\u603b\u8ba1\uff1a1401100000\uff0c1100000\uff0c4100000\uff0c2100000\uff0c\n......", "note_en": "In this blog article, we discuss some technical details of the AMD CPU branch predictor, focusing on its behavior with simple conditional branches. We also discuss how the behavior relates to exploitation of common and not so common Spectre v1 gadgets. As part of this discussion, we take a look at AMD&#39;s &#34; Software Techniques for Managing Speculation on AMD Processors&#34; white paper  [1] and evaluate the recommended mitigations (V1-1 to V1-3). Next, we implement a seemingly benign, artificial Spectre v1 gadget and exploit it as an easy-to-use arbitrary memory leak primitive. Finally, we reproduce the eBPF exploit described in the &#34; An Analysis of Speculative Type Confusion Vulnerabilities in the Wild&#34; paper  [2] to demonstrate the ease of exploiting such Spectre v1 gadgets on AMD CPUs (compared to Intel).\n This article is highly technical with plenty of empirical data presented in the form of diagrams, charts and listings. An intermediate level of understanding the microarchitectural details of modern CPUs is assumed. Whenever applicable, a brief introduction to the discussed topics is provided.  Too much for you? Not a problem, check our  final remarks section for a TL;DR.\n To make this article somewhat easier to consume and digest, we aim to follow a FAQ-like document structure. The discussed topics are gradually presented with an increasing level of detail. Hopefully, this unusual blog post structure works well with the technical material described.\n Enjoy yet another story featuring mispredicted branches, Spectre v1 gadgets and a PoC or two.\n  Before this publication, we discussed our findings and observations with the AMD PSIRT team between January 7th and February 2nd 2022. AMD concluded they were all typical Spectre v1 scenarios and recommended applying mitigations as explained in their guide  [1]. AMD (understandably and consistent with other chip-makers) did not want to comment on their branch predictor design, nor, in our opinion, seem interested in performing a more thorough analysis of the reported behavior and its effects. Whether such an analysis had been performed already before or was performed after our report, we do not know.\n Given this, we decided to investigate this issue thoroughly ourselves and present our research publicly here. We believe the suggested mitigations are impractical for the scenarios discussed in this article, for the reasons that the details below hopefully illuminate.\n  The story began with a somewhat accidental, yet unexpected observation. At one point I asked myself: &#34;Can a trivially computable, memory-access-free and likely latency-free conditional branch be mispredicted? If it can, what would be the circumstances?&#34;. The answers to the questions were somewhat already given. There are many reasons why modern CPUs can mispredict any branch. Microarchitectural resource contention, branch instruction misalignment, cache line or page boundary splitting could be some of the reasons. On top of that, there is also the technique of deliberate branch mistraining for Spectre v1 gadget exploitation.\n However, many vendors and security practitioners seem to share the common misconception that Spectre v1 gadgets are mainly about out-of-bound array memory accesses and consist of array bound checks with variable computation latency (typically a memory access). Here, I was thinking of trivially computable conditional branches, whose conditions operands are immediately available in general purpose registers. Is it possible to have such branches mispredicted in a controllable manner? Does it have an impact on security? Let&#39;s find out.\n I usually begin such research by implementing simple experiments using my favorite tool KTF (Kernel Test Framework  [3]), which I created a while ago with exactly such purposes in mind. KTF makes it easy to re-run the experiments in many different execution environments (bare-metal or virtualized) and comes with a few well-tested cache-based side-channel primitives.\n   0. mov $CACHE_LINE_ADDR, %rsi ; memory address whose access latency allows to observe the mispredictions1. clflush (%rsi) ;  flush the  cache line  out  of  cache  hierarchy  to  get a clean state 2. sfence 3. lfence ; make sure the  cache line  is really  out 4.  xor %rdi, %rdi ;  set ZF= 1 5. jz END_LABEL ; if ZF==1 goto END_LABEL6. mov (%rsi), %rax ; memory  load  to the flushed  cache line; it never executes architecturally7. END_LABEL:8. measure CACHE_LINE_ADDR access time\n The question was: how many times can the trivial always-taken branch at location 5 be mispredicted?\n I ran the code ten times in a loop of 100k iterations and counted all low-latency accesses to  CACHE_LINE_ADDR, which were indicating a speculatively executed memory load. This is what I got:\n CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,Iterations  6,100000  2,100000  4,100000  6,100000  5,100000  4,100000  4,100000  6,100000  4,100000  7,100000Total:  48\n The column  CL0 (and  CL1 in later experiments) represents the number of times the measurement cache line has been speculatively loaded (i.e. the number of mispredictions) during  Iterations number of the main loop iterations, for every of the ten executions. The  Total is the sum of all the mispredictions that occurred.  Baseline is the average number of CPU ticks it takes to access memory data from cache.\n I was not expecting this. A few irregular occurrences would not be shocking, but this was quite regular. The few years I spent in this field have taught me the hard way that this might not mean anything. There could be cache noise (e.g. due to frequent interrupts or sibling hyper-thread activity), a miscalculated baseline problem, fake signal due to floating vCPU of the VM I tested this on, or a gazillion of other reasons crippling the experiment.\n To quickly rule out some of these, I tend to add another non-colliding measurement cache line and measure both of the cache lines during the experiment runtime. If the signal does not change accordingly and reliably the experiment detected noise.\n 0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. jz END_LABEL ; if ZF==1 goto END_LABEL8. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally9. END_LABEL:A. measure CACHE_LINE_ADDR access time\n I ran this code again in a loop of 100k iterations twice, each time using a different cache line at location 8. This is what I got for  %rsi:\n CPU: AMD EPYC 7601 32-Core Processor Baseline: 200 CL0,CL1,Iterations  4, 0,100000  2, 0,100000  4, 0,100000  1, 0,100000  2, 0,100000  3, 0,100000  2, 0,100000  4, 0,100000  2, 0,100000  4, 0,100000 Total: 28\n CPU: AMD EPYC 7601 32-Core Processor Baseline: 200 CL0,CL1,Iterations  0, 3,100000  0, 3,100000  0, 1,100000  0, 3,100000  0, 3,100000  0, 2,100000  0, 2,100000  0, 2,100000  0, 6,100000  0, 3,100000 Total: 28\n At this point, I started to suspect that something might be really off, particularly since I also disabled interrupts for the loop ( cli/ sti) and made sure the system was idle.\n On the other hand, it is expected that a conditional branch like the above gets mispredicted at least once during main loop execution. In the hypothetical, ideal case of a very clean state of the Branch Prediction Unit (BPU), a newly encountered conditional branch usually falls under the static predictor outcome ruling. It then decides what to do based on a default heuristic (e.g. new forward branch always taken and backward branch always not-taken or vice versa). If you wonder why there is any prediction in the first place for branches like these, there will be an answer later on.\n  I quickly re-tested the same code on different CPUs I had access to. Some of them were Intel, others AMD, some server and others client parts. I was expecting the usual: different results on different machines, without any clearly visible pattern forming. But this time the unusual happened.\n All AMD CPUs I tested it on displayed somewhat similar result patterns to the one presented above. Yet, all Intel CPUs displayed  no mispredictions at all, regardless of the cache line I used.\n CPU: Intel(R) Core(TM) i9- 10980XE CPU @  3. 00GHzFrequency:  3000 MHzBaseline:  169CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n It was getting interesting at this point. I double-checked that the memory access latency baseline was reasonable and that the cache oracle implementation still worked. I also made sure the code execution was pinned to a given logical CPU. I also re-ran the experiment with some deliberately incorrect baselines to see if I got noise, and I did.\n At this point, all signs pointed to there being something off with AMD CPUs and its mispredictions.\n Since we are dealing with a branch misprediction leading to the speculative execution of a memory load, we can put a serializing instruction right after the branch to stop the speculative execution. Thereby, we can have better confidence about the observation, since there should be no signal whatsoever.\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. jz END_LABEL ; if ZF==1 goto END_LABEL8. lfence ; on AMD lfence can be  set  to dispatch serializing  mode, which stops speculation 9. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturallyA. END_LABEL:B. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n No signal as anticipated. At this point, I convinced myself that I was seeing a frequent branch misprediction of this trivial conditional branch happening  only on AMD CPUs and not on Intel CPUs.\n  To answer that, we need to learn a few things about the AMD branch predictor implementation. But before we do, let&#39;s run a few more experiments to get a better picture of the situation.\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5. lfence ; make sure the  cache  lines  are really  out 6.  xor %rdi, %rdi ;  set ZF= 1 7. lfence ; on AMD lfence can be  set  to dispatch serializing  mode, which stops speculation 8. jz END_LABEL ; if ZF==1 goto END_LABEL9. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturallyA. END_LABEL:B. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  6,  0,100000  5,  0,100000  7,  0,100000  8,  0,100000  12,  0,100000  6,  0,100000  9,  0,100000  10,  0,100000  8,  0,100000  9,  0,100000Total:  80  0,  6,100000  0,  7,100000  0,  8,100000  0,  9,100000  0,  5,100000  0,  7,100000  0,  8,100000  0,  8,100000  0,  8,100000  0,  9,100000Total:  75\n It was a bit surprising to see a slight, but consistent increase of the misprediction rate as a result of placing the  lfence before the jump. Is the serialization somehow related to issue at hand?\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. sfence 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  1,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  1,  0,100000Total:  3  0,  1,100000  0,  0,100000  0,  1,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  1,100000  0,  1,100000  0,  0,100000  0,  1,100000Total:  5\n It looked like the signal was still there, but noticeably weaker. Let&#39;s then remove the  sfence as well:\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mis-predictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mis-predictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4.  xor %rdi, %rdi ;  set ZF= 1 5. jz END_LABEL ; if ZF==1 goto END_LABEL6. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally7. END_LABEL:8. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000Total:  0\n No signal at all! I was not expecting that. After all, the  sfence instruction should not be that relevant here; it is not serializing and it should not affect the branch misprediction at all. Quite the opposite, assuming the  sfence was required to make sure the cache lines are flushed. Without it, the signal should be (falsely) stronger. So at least the results obtained with and without the  sfence should indicate presence of the signal.\n I was curious if the difference was just the result of a delay caused by the mere presence of the  sfence, or something else. So, I decided to try with another instruction that is neither serializing nor memory ordering. I decided to go with a  pause instruction for this purpose.\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. pause 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  2,  0,100000  1,  0,100000  0,  0,100000  1,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  2,  0,100000Total:  9  0,  1,100000  0,  2,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  0,100000  0,  1,100000  0,  0,100000Total:  4\n   0. mov CACHE_LINE_0_ADDR, %rsi ; memory address 0 whose access latency allows to observe the mispredictions1. mov CACHE_LINE_1_ADDR, %rbx ; memory address 1 whose access latency allows to observe the mispredictions2. clflush (%rsi)3. clflush (%rbx) ;  flush  both  cache  lines  out  of  cache  hierarchy  to  get a clean state 4. mfence 5.  xor %rdi, %rdi ;  set ZF= 1 6. jz END_LABEL ; if ZF==1 goto END_LABEL7. mov (%rsi / %rbx), %rax ; memory  load  to the flushed  cache line; it never executes architecturally8. END_LABEL:9. measure CACHE_LINE_ADDR access time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  3,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  0,  0,100000  0,  0,100000  3,  0,100000  1,  0,100000  1,  0,100000  0,  0,100000Total:  11  0,  0,100000  0,  2,100000  0,  2,100000  0,  1,100000  0,  0,100000  0,  3,100000  0,  1,100000  0,  2,100000  0,  1,100000  0,  2,100000Total:  14\n   I was confused for a while, but a peek at the &#34; AMD64 Architecture Programmer\u2019s Manual Volume 3: General-Purpose and System Instructions&#34;  [4] section describing the  clflush instruction helped me understand. It turned out that the problem was caused by the weakly ordered  clflush instructions with respect to speculative memory loads.Let&#39;s quote the manual: &#34; [...] the CLFLUSH instruction is weakly ordered with respect to other instructions that operate on memory. Speculative loads initiated by the processor, or specified explicitly using cache-prefetch instructions, can be reordered around a CLFLUSH instruction. Such reordering can invalidate a speculatively prefetched cache line, unintentionally defeating the prefetch operation.&#34;\n Apparently, this is what was happening here. The speculative load got reordered with the  clflush and executed before the flush. The  clflush instruction was unintentionally masking the signal. The manual also says:\n &#34; The only way to avoid this situation is to use the MFENCE instruction after the CLFLUSH instruction to force strong-ordering of the CLFLUSH instruction with respect to subsequent memory operations.&#34;\n Here we go. From now on, we will be using the  mfence instruction to order the  clflush instructions&#39; execution properly.\n  So far, I was experimenting with forward always-taken branches. But the BPU may treat backward conditional branches differently. Let&#39;s take a look at backward always-taken branches now.\n Similar to the previous experiments, I ran this one ten times in a loop of 100k iterations using the following backward conditional branch code construct:\n  0. mov CACHE_LINE_0_ADDR, %rsi ; memory address  0 whose access latency allows  to observe  the mispredictions 1. mov CACHE_LINE_1_ADDR, %rbx ; memory address  1 whose access latency allows  to observe  the mispredictions 2. clflush (%rsi) 3. clflush (%rbx) ; flush both cache  lines out  of cache hierarchy  to  get  a clean state 4. mfence 5. jmp BRANCH_LABEL ; go  to  the backward branch 6. RETURN_LABEL: ; this is  the backward branch target  7. jmp END_LABEL ; go  to  the measurements 8. ALIGN  64 ; This alignment construct serves  the purpose  of isolating  the backward  9. ud2 ; branch  from  the earlier branches. This is important, because  the density A. ALIGN  64 ;  of branches per cache  line matters.B. BRANCH_LABEL:C. xor %rdi, %rdi ;  set ZF= 1D. jz RETURN_LABEL ;  if ZF== 1 goto RETURN_LABELE. mov (%rsi / %rbx), %rax ; memory  load  to  the flushed cache  line;  it never executes architecturallyF. END_LABEL: 10. measure CACHE_LINE_ADDR access  time\n  CPU: AMD EPYC  7601  32-Core Processor Baseline:  200CL0,CL1,Iterations  2,  0,100000  2,  0,100000  0,  0,100000  1,  0,100000  2,  0,100000  1,  0,100000  1,  0,100000  1,  0,100000  3,  0,100000  1,  0,100000Total:  14  0,  1,100000  0,  1,100000  0,  4,100000  0,  2,100000  0,\n......", "posttime": "2022-02-23 22:13:03", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5206\u652f,branch", "title": "AMD\u5206\u652f\uff08Mis\uff09\u9884\u6d4b\u5668\uff1a\u8bbe\u7f6e\u5b83\uff0c\u7136\u540e\u5fd8\u8bb0\u5b83", "title_en": "The AMD Branch (Mis)Predictor: Just Set It and Forget It", "transed": 1, "url": "https://grsecurity.net/amd_branch_mispredictor_just_set_it_and_forget_it", "via": "", "real_tags": ["\u5206\u652f", "branch"]}]