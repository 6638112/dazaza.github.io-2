[{"category": "", "categoryclass": "", "imagename": "73be1c667c04bf037561fb16681edfdc.jpg", "infoid": 1072177, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5982\u679c\u4f60\u66fe\u7ecf\u68a6\u60f3\u8fc7\u201c\u5f88\u4e45\u4ee5\u524d\uff0c\u4f4f\u5728\u4e00\u4e2a\u9065\u8fdc\u7684\u661f\u7cfb\u4e2d\u201d\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u662f\u4f60\u7684\u673a\u4f1a\u2014\u2014\u53ea\u8981\u4f60\u6709\u95f2\u7f6e\u7684\u56db\u5230\u516d\u5343\u7f8e\u5143\u3002\u672c\u5468\uff0c\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u516c\u5e03\u4e86\u6709\u5173\u5176\u6625\u5b63\u65b0\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u9152\u5e97\u5f00\u4e1a\u7684\u66f4\u591a\u7ec6\u8282\uff0c\u8fd9\u662f\u4e00\u573a\u4e3a\u671f\u4e24\u5929\u7684\u6c89\u6d78\u5f0f\u201c\u661f\u7403\u5927\u6218\u201d\u4f53\u9a8c\uff0c\u5524\u8d77\u4e86\u7f6e\u8eab\u4e8e\u7535\u5f71\u4e2d\u7684\u611f\u89c9\u3002\u8be5\u6280\u672f\u5c06\u6bd4\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\u90fd\u66f4\u5148\u8fdb\uff0c\u5305\u62ec\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u62b5\u6297\u8fd0\u52a8\u7684\u5174\u8d77\u548c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u8fb9\u7f18\u7684\u571f\u5730\u3002\u6b63\u5982\u60a8\u6240\u6599\uff0c\u6210\u672c\u4e5f\u5c06\u9ad8\u4e8e\u51e0\u4e4e\u4efb\u4f55\u5176\u4ed6\u8fea\u58eb\u5c3c\u4f53\u9a8c\uff0c\u9664\u4e86\u5927\u578b\u5a5a\u793c\u6216\u665a\u4e0a\u79df\u7528\u672a\u6765\u4e16\u754c\u3002 \u201c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u661f\u9645\u5de1\u6d0b\u8230\u662f\u4e00\u79cd\u9769\u547d\u6027\u7684\u5168\u65b0 2 \u665a\u4f53\u9a8c\uff0c\u60a8\u5c06\u6210\u4e3a\u82f1\u96c4\uff0c\u201d\u6c83\u5c14\u7279\u8fea\u65af\u5c3c\u4e16\u754c\u7f51\u7ad9\u79f0\u3002 \u201c\u60a8\u548c\u60a8\u7684\u56e2\u961f\u5c06\u8e0f\u4e0a\u5c5e\u4e8e\u60a8\u81ea\u5df1\u7684\u53f2\u65e0\u524d\u4f8b\u7684\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u8fd9\u662f\u6709\u53f2\u4ee5\u6765\u6700\u8eab\u4e34\u5176\u5883\u7684\u661f\u7403\u5927\u6218\u6545\u4e8b\u2014\u2014\u4f60\u53ef\u4ee5\u4f53\u9a8c\u5b9a\u5236\u7684\u4f53\u9a8c\uff0c\u5e76\u6bd4\u4f60\u60f3\u8c61\u7684\u66f4\u6df1\u5165\u5730\u8fdb\u884c\u661f\u7403\u5927\u6218\u5192\u9669\u3002\u201d\u6709\u5149\u5251\u4f53\u9a8c\u3001\u661f\u9645\u5a31\u4e50\u3001\u89d2\u8272\u56db\u5904\u6e38\u8361\uff0c\u4ee5\u53ca\u60a8\u6bd4\u4ee5\u5f80\u4efb\u4f55\u65f6\u5019\u90fd\u66f4\u63a5\u8fd1\u661f\u7403\u5927\u6218\u7684\u6574\u4f53\u611f\u89c9\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u4f60\u4f4f\u5728\u8c6a\u534e\u7684\u592a\u7a7a\u5de1\u822a\u4e2d\uff0c\u6c89\u6d78\u5728\u9152\u5e97\u200b\u200b\u7684\u7a97\u6237\u91cc\u53ef\u4ee5\u770b\u5230\u201c\u592a\u7a7a\u201d\uff0c\u4f60\u6c38\u8fdc\u4e0d\u4f1a\u79bb\u5f00\u9152\u5e97\uff0c\u9664\u975e\u201c\u767b\u4e0a\u4ea4\u901a\u5de5\u5177\u201d\u5230\u5df4\u56fe\uff0c\u661f\u7403\u5927\u6218\uff1a\u94f6\u6cb3\u7cfb\u7684\u571f\u5730\u8fb9\u7f18\u53d1\u751f\u3002\u597d\u83b1\u575e\u5f71\u57ce\u7684\u5165\u573a\u8d39\u5df2\u5305\u542b\u5728\u4ef7\u683c\u4e2d\uff0c\u60a8\u7684\u6240\u6709\u98df\u7269\u548c\u975e\u9152\u7cbe\u996e\u6599\u4e5f\u662f\u5982\u6b64\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u5728\u5de5\u4f5c\u5ba4\u4e2d\u4e3a\u4e24\u540d\u5ba2\u4eba\u63d0\u4f9b\u4e24\u665a\u4f4f\u5bbf\u7684\u8d39\u7528\u4e3a 4,809 \u7f8e\u5143\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6295\u5165\u4e00\u4e24\u676f\u592a\u7a7a\u5564\u9152\u3002\u5982\u679c\u60a8\u6dfb\u52a0\u4e00\u4e2a\u5b69\u5b50\uff0c\u540c\u4e00\u4e2a\u623f\u95f4\u7684\u4ef7\u683c\u5c06\u9ad8\u8fbe 5,299 \u7f8e\u5143\uff0c\u5982\u679c\u623f\u95f4\u4e2d\u6709\u4e00\u4e2a\u5b69\u5b50\u548c\u7b2c\u4e09\u4e2a\u6210\u4eba\uff0c\u5219\u4ef7\u683c\u9ad8\u8fbe 5,999 \u7f8e\u5143\u3002\u5957\u623f\u4f4f\u5bbf\u751a\u81f3\u66f4\u9ad8\u3002\n\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8fea\u58eb\u5c3c\u6280\u672f\u6700\u5148\u8fdb\u7684\u6e38\u8f6e\u65b0\u8fea\u58eb\u5c3c\u613f\u671b\u53f7\u5305\u62ec\u201c\u6c34\u4e0a\u8fc7\u5c71\u8f66\u201d\u6ed1\u6c34\u9053\u3001\u661f\u7403\u5927\u6218\u9152\u5427\u548c\u6f2b\u5a01\u9910\u5385\uff0c\u60a8\u53ef\u4ee5\u5728\u90a3\u91cc\u54c1\u5c1d\u9ed1\u8c79\u7684 Wakanda \u548c\u7329\u7ea2\u5973\u5deb\u7684 Sokovia \u7684\u98df\u7269\u3002\u660e\u5e74\u590f\u5929\u542f\u822a\u65f6\uff0c\u5e26\u9633\u53f0\u7684\u6d77\u666f\u623f\u4e24\u4e2a\u4eba\u6bcf\u665a\u7684\u4ef7\u683c\u7ea6\u4e3a1000\u7f8e\u5143\u3002\u636e TripAdvisor \u79f0\uff0c\u534e\u7279\u8fea\u58eb\u5c3c\u4e16\u754c\u6700\u6602\u8d35\u7684\u8fea\u58eb\u5c3c\u5927\u4f5b\u7f57\u91cc\u8fbe\u9152\u5e97\u7684\u5e73\u5747\u6bcf\u665a\u623f\u4ef7\u7ea6\u4e3a 675 \u7f8e\u5143\uff0c\u7565\u4f4e\u4e8e\u8fea\u58eb\u5c3c\u4e50\u56ed\u7684\u8fea\u58eb\u5c3c\u5927\u52a0\u5dde\u9152\u5e97\u3002\u4f46\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u661f\u7403\u5927\u6218\u7684\u7c89\u4e1d\u6765\u8bf4\uff0c\u4f60\u4e0d\u80fd\u4e3a\u5b8c\u5168\u6c89\u6d78\u5728\u540c\u4eba\u5708\u4e2d\u4ed8\u51fa\u4ee3\u4ef7\uff0c\u4ece\u6f14\u5458\u8868\u73b0\u5f97\u597d\u50cf\u4ed6\u4eec\u771f\u7684\u662f\u661f\u9645\u65c5\u884c\u8005\u5230\u80fd\u591f\u5728\u4e0d\u53d7\u4e25\u683c\u5224\u65ad\u7684\u60c5\u51b5\u4e0b\u5236\u4f5c\u65e0\u9650\u7684\u4f0d\u57fa\u7b11\u8bdd\u4e0d\u613f\u82b1 4,000 \u7f8e\u5143\u7761\u5728\u201c\u5b87\u5b99\u98de\u8239\u201d\u4e0a\u7684\u4eba\u3002", "note_en": "If you\u2019ve ever dreamed of living \u201ca long time ago in a galaxy far, far away,\u201d now is your chance \u2014 as long as you\u2019ve got a spare four to six thousand dollars sitting around.\n  This week, Walt Disney World announced more details about its new  Galactic Starcruiser hotel opening in the spring, an immersive, two-day \u201cStar Wars\u201d experience that evokes the feeling of being in the movies. The tech will be more advanced than any other Disney experience, including Rise of the Resistance at Disneyland and the Star Wars: Galaxy\u2019s Edge lands.\n  The cost, as you might expect, is going to be higher than almost any other Disney experience, too, with the exception of, say,  a grand-scale wedding or  renting out Epcot for the night.\n    \u201cStar Wars: Galactic Starcruiser is a revolutionary new 2-night experience where you are the hero,\u201d according to Walt Disney World\u2019s website. \u201cYou and your group will embark on a first-of-its-kind Star Wars adventure that\u2019s your own. It\u2019s the most immersive Star Wars story ever created \u2014 one where you live a bespoke experience and journey further into a Star Wars adventure than you ever dreamed possible.\u201d\n     There are lightsaber experiences, interstellar entertainment, characters hanging around and an overall feeling that you\u2019re closer to being in Star Wars than you\u2019ve ever been in your life.\n       The idea is that you\u2019re staying on a luxury space cruise, so immersive that the hotel\u2019s windows look out into \u201cspace\u201d and you never leave the property unless it\u2019s to \u201cboard a transport\u201d to Batuu, the land where Star Wars: Galaxy\u2019s Edge takes place. Admission to Hollywood Studios is included in the price, as is all of your food and non-alcoholic beverages. But really, for $4,809 for two nights\u2019 accommodations for two guests in a studio, they could throw in a space beer or two.\n   Prices go up to $5,299 for that same room if you add a kid, and up to $5,999 if there\u2019s a kid and a third adult in the room. Suite accommodations are even higher.\n      By comparison, Disney\u2019s most technologically advanced cruise ship,  the new Disney Wish, includes an \u201caqua coaster\u201d waterslide ride, a Star Wars bar and  a Marvel restaurant where you can eat foods from Black Panther\u2019s Wakanda and the Scarlet Witch\u2019s Sokovia. When it sets sail next summer, prices will be about $1,000 a night for two people in an ocean view room with a balcony.\n   According to TripAdvisor, the  average nightly rate at Disney\u2019s Grand Floridian Hotel, the most expensive hotel at Walt Disney World, is about $675, and  just slightly under that for Disney\u2019s Grand Californian at Disneyland.\n  But then again, for some Star Wars fans, you can\u2019t put a price on total immersion in the fandom, from cast members acting as though they\u2019re really intergalactic travelers to the ability to make infinite Wookee jokes free from the harsh judgements of people who wouldn\u2019t spend $4,000 to sleep in a \u201cspaceship.\u201d", "posttime": "2021-08-09 04:03:38", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u661f\u7403\u5927\u6218,\u4e16\u754c,world", "title": "\u5728\u8fea\u65af\u5c3c\u4e16\u754c\u7684\u661f\u7403\u5927\u6218\u4e3b\u9898\u9152\u5e97\uff0c\u5468\u672b\u4e24\u4eba\u8d39\u7528 4,800 \u7f8e\u5143", "title_en": "At Disney World's Star Wars-Themed Hotel, a Weekend for Two Costs $4,800", "transed": 1, "url": "https://www.sfgate.com/disneyland/article/disney-world-star-wars-hotel-prices-reservations-16372866.php", "via": "", "real_tags": ["\u661f\u7403\u5927\u6218", "\u4e16\u754c", "world"]}, {"category": "", "categoryclass": "", "imagename": "e64f4a5b50980f737d6f15c9dd1d5eb1.jpg", "infoid": 1072176, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u56db\u5341\u5e74\u524d\u7684 8 \u6708 10 \u65e5\uff0c\u4e00\u4f4d\u8eab\u6750\u9b41\u68a7\u7684\u8001\u4eba\u5728\u80af\u8f9b\u987f\u5bab\u53bb\u4e16\uff0c\u4eab\u5e74 94 \u5c81\u3002 .\u4ed6\u5728\u53bb\u94f6\u884c\u53c2\u52a0\u4f1a\u8bae\u65f6\u5728\u5730\u94c1\u4e0a\u9605\u8bfb\u838e\u58eb\u6bd4\u4e9a\uff0c\u5e76\u5199\u4e86\u4e1a\u4f59\u8bd7\u6b4c\u3002\u5076\u5c14\u7687\u5ba4\u6210\u5458\u4f1a\u5728\u4ed6\u4eec\u7ecf\u8fc7\u7684\u8def\u4e0a\u505c\u4e0b\u6765\u95f2\u804a\uff0c\u5c31\u50cf\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u66fe\u7ecf\u548c\u5979\u7684\u65b0\u751f\u513f\u4e00\u6837\u3002\u665a\u5e74\u9690\u5c45\u7684\u4ed6\uff0c\u7528\u4ed6\u81ea\u5df1\u7684\u8bdd\u6765\u8bf4\uff0c\u5c31\u662f\u4e2a\u201c\u5927\u809a\u8001\u6cb3\u72f8\u201d\uff0c\u7559\u7740\u96be\u770b\u7684\u80e1\u987b\u3002\u8fd9\u4e2a\u4eba\u662f\u827e\u4f26\u201c\u6c64\u7c73\u201d\u62c9\u585e\u5c14\u65af\uff0c\u4e54\u6cbb\u516d\u4e16\u548c\u4f0a\u4e3d\u838e\u767d\u5973\u738b\u4e8c\u4e16\u7684\u524d\u79c1\u4eba\u79d8\u4e66\uff0c\u7231\u5fb7\u534e\u516b\u4e16\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\uff0c\u5f53\u65f6\u4ed6\u662f\u5a01\u5c14\u58eb\u4eb2\u738b\u3002\u81ea 1953 \u5e74\u9000\u4f11\u4ee5\u6765\uff0c\u4ed6\u4e00\u76f4\u5728\u80af\u8f9b\u987f\u5bab\u7684\u65e7\u9a6c\u53a9\uff08\u4ed6\u8ba4\u4e3a\u90a3\u662f\u82f1\u683c\u5170\u6700\u597d\u7684\u623f\u5b50\u4e4b\u4e00\uff09\u4e00\u76f4\u751f\u6d3b\u5728\u4f18\u96c5\u548c\u5ba0\u7231\u4e4b\u4e2d\u3002\u4ece 1920 \u5e74\u5230 1953 \u5e74\uff0c\u4ed6\u65ad\u65ad\u7eed\u7eed\u5730\u5f53\u8fc7\u671d\u81e3\uff0c\u4ed6\u5bf9\u5982\u4f55\u5728\u6c11\u4e3b\u56fd\u5bb6\u7ef4\u62a4\u541b\u4e3b\u5236\u63d0\u51fa\u4e86\u5f15\u4eba\u5165\u80dc\u7684\u89c1\u89e3\u3002 Lascelles \u5728\u300a\u738b\u51a0\u300b\u4e2d\u88ab\u8bbd\u523a\u4e3a\u4e00\u4e2a\u987d\u56fa\u3001\u786c\u7740\u5934\u76ae\u3001\u813e\u6c14\u66b4\u8e81\u7684\u53ef\u6015\u89c4\u5219\u7684\u6267\u884c\u8005\uff0c\u6c38\u8fdc\u963b\u788d\u4e86\u771f\u7231\u7684\u8fdb\u7a0b\u3002\u9664\u4e86\u5728\u7231\u5fb7\u534e\u516b\u4e16\u7684\u9000\u4f4d\u4e2d\u53d1\u6325\u4f5c\u7528\u5916\uff0c\u62c9\u585e\u5c14\u65af\u8fd8\u88ab\u89c6\u4e3a\u51b3\u5b9a\u739b\u683c\u4e3d\u7279\u516c\u4e3b\u4e0d\u80fd\u4e0e\u5f7c\u5f97\u6c64\u68ee\u7ed3\u5a5a\u7684\u5f53\u6743\u6d3e\u4eba\u58eb\u4e4b\u4e00\u3002\u4f46\u662f\uff0c\u5c3d\u7ba1\u5728\u73b0\u4ee3\u7687\u5bb6\u5386\u53f2\u4e0a\u626e\u6f14\u7740\u5982\u6b64\u91cd\u8981\u7684\u89d2\u8272\uff0c\u4f46\u771f\u6b63\u7684 Lascelles \u4ecd\u7136\u5728\u6211\u4eec\u7684\u89c6\u7ebf\u4e4b\u5916\u3002\u6ca1\u6709\u4f20\u8bb0\u3002\u4ed6\u5728\u5251\u6865\u4e18\u5409\u5c14\u5b66\u9662\u7684\u6863\u6848\u57fa\u672c\u4e0a\u662f\u5c01\u95ed\u7684\u2014\u2014\u5c24\u5176\u662f\u4e0e\u541b\u4e3b\u5236\u6709\u5173\u7684\u8d44\u6599\u3002\u6700\u8fd1\u5199\u4e86\u4e00\u672c\u5173\u4e8e\u738b\u5ba4\u548c\u5927\u4f17\u5a92\u4f53\u7684\u4e66\u7684\u7231\u5fb7\u534e\u6b27\u6587\u65af\u88ab\u62d2\u7edd\u63a5\u89e6\u4ed6\u4eec\u3002\u4ed6\u7684\u65e5\u8bb0\u867d\u7136\u51fa\u8272\uff0c\u4f46\u8fd8\u662f\u7531\u4ed6\u7684\u670b\u53cb\u9c81\u4f2f\u7279\u00b7\u54c8\u7279-\u6234\u7ef4\u65af\uff08Rupert Hart-Davis\uff09\u6709\u9009\u62e9\u5730\u7f16\u8f91\u3002\u4e0e\u6d41\u884c\u7684\u5f62\u8c61\u76f8\u6bd4\uff0c\u4ed6\u4eec\u63ed\u793a\u4e86\u4e00\u4e2a\u66f4\u60c5\u7eea\u5316\u3001\u66f4\u660e\u667a\u3001\u66f4\u8ba8\u4eba\u559c\u6b22\u7684\u7537\u4eba\u3002\u56e0\u6b64\uff0c\u5173\u4e8e Lascelles \u7684\u771f\u5b9e\u6027\u683c\u5e76\u6ca1\u6709\u8fbe\u6210\u5171\u8bc6\u3002\u5bf9\u4e8e\u8eab\u4e3a\u6e29\u838e\u516c\u7235\u6d41\u4ea1\u6d77\u5916\u7684\u7231\u5fb7\u534e\u516b\u4e16\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u6c38\u8fdc\u662f\u201c\u90a3\u6761\u86c7\u201d\u3002\u8fd9\u79cd\u611f\u89c9\u662f\u76f8\u4e92\u7684\u3002\u9000\u4f4d\u4e09\u5929\u540e\uff0c\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u4e0e\u62c9\u585e\u5c14\u65af\u5171\u8fdb\u5348\u9910\u65f6\uff0c\u671d\u81e3\u8bf4\u8fd9\u4f4d\u524d\u56fd\u738b\u201c\u5c31\u50cf\u7ae5\u8bdd\u6545\u4e8b\u4e2d\u7684\u5b69\u5b50\uff0c\u9664\u4e86\u7075\u9b42\u4e4b\u5916\uff0c\u6240\u6709\u793c\u7269\u90fd\u5f97\u5230\u4e86\u201d\u3002\u4ed6\u8fd8\u5bf9\u7231\u5fb7\u534e\u516b\u4e16\u4e0d\u591f\u7231\u56fd\u8fd9\u4e00\u4e8b\u5b9e\u5927\u53d1\u96f7\u9706\uff1a\u201c\u4ed6\u4ece\u4e0d\u5173\u5fc3\u82f1\u683c\u5170\u6216\u82f1\u56fd\u4eba\u3002\u201d Ferdinand Mount \u8bb0\u5f97 Lascelles \u53c2\u89c2\u4e86\u4ed6\u7684\u5b66\u6821\uff0c\u5728\u90a3\u91cc\uff0cMount\u201c\u88ab\u4ed6\u5bf9\u6e29\u838e\u516c\u7235\u7684\u6bd2\u6db2\u7684\u7206\u70b8\u9707\u60ca\u4e86......\u4ed6\u4ee4\u4eba\u96be\u5fd8\u3002\u201d\u4f46 Lascelles \u4e0d\u53ea\u662f\u575a\u6301\u795e\u79d8\u548c\u52bf\u5229\u7684\u6807\u51c6\uff0c\u4ed6\u4e5f\u4e0d\u4f1a\u5728\u6267\u884c\u8fd9\u4e9b\u6807\u51c6\u65f6\u83b7\u5f97\u6b8b\u9177\u7684\u4e50\u8da3\u3002\u4ed6\u4e3b\u5f20\u516c\u5e73\u7ade\u4e89\u548c\u52a1\u5b9e\u3002\u5f53\u8bfa\u57c3\u5c14\u00b7\u8003\u6c83\u5fb7\u88ab\u63a8\u8350\u4e3a\u7235\u58eb\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u5efa\u8bae\u4e54\u6cbb\u516d\u4e16\u4e0d\u8981\u3002\u56fd\u738b\u4e0d\u65ad\u6279\u51c6\u5bf9\u5f00\u51fa\u65e0\u6548\u652f\u7968\u7684\u5e74\u8f7b\u82f1\u56fd\u7687\u5bb6\u7a7a\u519b\u519b\u5b98\u8fdb\u884c\u519b\u4e8b\u6cd5\u5ead\u5ba1\u5224\uff0c\u800c\u8003\u6c83\u5fb7\u6700\u8fd1\u56e0\u6b3a\u9a97\u6240\u5f97\u7a0e\u800c\u88ab\u7f5a\u6b3e\u3002\u90a3\u4e9b\u5e74\u8f7b\u4eba\u5728\u8003\u6c83\u5fb7\u53d7\u5230\u5c0a\u91cd\u7684\u540c\u65f6\u53d7\u5230\u60e9\u7f5a\u662f\u9519\u8bef\u7684\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u4ee4\u4eba\u96be\u5fd8\uff0c\u4f46\u672c\u8d28\u4e0a\u662f\u5149\u8363\u7684\u3002\u62c9\u585e\u5c14\u65af\u660e\u767d\uff0c\u867d\u7136\u541b\u4e3b\u5236\u5fc5\u987b\u4e0a\u6f14\uff0c\u4f46\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u662f\u5047\u7684\u3002\u516c\u5171\u666f\u89c2\u5fc5\u987b\u662f\u5b83\u6240\u575a\u6301\u7684\u4ef7\u503c\u89c2\u7684\u771f\u5b9e\u8868\u8fbe\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5fc5\u987b\u62d2\u7edd\u7235\u4f4d\uff0c\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u534e\u83b1\u58eb\u8f9b\u666e\u68ee\u4e0d\u80fd\u6210\u4e3a\u5973\u738b\u3002 \uff08\u5728\u4ed6\u66f4\u6076\u6bd2\u7684\u4e00\u4e2a\u65f6\u523b\uff0c\u62c9\u585e\u5c14\u65af\u5199\u9053\uff0c\u56fd\u738b\u7684\u81e3\u6c11\u4e0d\u4f1a\u5bb9\u5fcd\u201c\u4e00\u4e2a\u88ab\u5546\u5e97\u5ba0\u574f\u7684\u7f8e\u56fd\u4eba\uff0c\u6709\u4e24\u4e2a\u6d3b\u7740\u7684\u4e08\u592b\uff0c\u58f0\u97f3\u5c31\u50cf\u751f\u9508\u7684\u952f\u5b50\u201d\u3002\uff09\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5728\u9000\u4f4d\u540e\uff0c\u62c9\u585e\u5c14\u65af\u53bb\u4e86\u7aed\u5c3d\u5168\u529b\u8ba9\u7231\u5fb7\u534e\u8fdc\u79bb\u8fd9\u4e2a\u56fd\u5bb6\uff0c\u8bd5\u56fe\u4ece\u516c\u4f17\u7684\u8111\u6d77\u4e2d\u6839\u9664\u6574\u4e2a\u4e8b\u4ef6\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\uff0c\u65e0\u8bba\u53d1\u751f\u7684\u65b9\u5f0f\u5982\u4f55\uff0cLascelles \u5f00\u59cb\u76f8\u4fe1\u9000\u4f4d\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\u4ed6\u8bf4\uff0c\u7231\u5fb7\u534e\u201c\u4e60\u60ef\u6027\u5730\u51c6\u5907\u4e3a\u4ed6\u4e2a\u4eba\u7684\u597d\u6076\u800c\u727a\u7272\u771f\u76f8\u201d\uff1b\u7231\u5fb7\u534e\u7684\u540d\u6c14\u4e0d\u8db3\u4ee5\u7ef4\u6301\u541b\u4e3b\u5236\u3002 Lascelles \u76f8\u4fe1\u8be5\u673a\u6784\uff0c\u4f46\u8bf4\uff1a\u201c\u6211\u4ece\u672a\u5c06\u6e29\u838e\u5bb6\u65cf\u7684\u4efb\u4f55\u6210\u5458\u7406\u60f3\u5316\u201d\u3002\u5f53\u54c8\u7f57\u5fb7\u00b7\u5c3c\u79d1\u5c14\u68ee\u53d7\u547d\u64b0\u5199\u4e54\u6cbb\u200b\u200b\u4e94\u4e16\u7684\u4f20\u8bb0\u65f6\uff0c\u62c9\u585e\u5c14\u65af\u544a\u8bc9\u4ed6\uff0c\u8fd9\u5c06\u662f\u4e00\u4e2a\u673a\u6784\u7684\u4f20\u8bb0\uff0c\u4e0d\u9700\u8981\u201c\u4e0b\u964d\u4e3a\u4e2a\u6027\u201d\u3002\u8fd9\u4e0d\u4ec5\u4ec5\u662f\u5439\u5618\u3002\u5ba3\u5e03\u9000\u4f4d\u7684\u90a3\u5929\u665a\u4e0a\uff0c\u62c9\u585e\u5c14\u65af\u7ed5\u7740\u5723\u8a79\u59c6\u65af\u516c\u56ed\u8d70\u6765\u8d70\u53bb\uff0c\u60f3\u7740\u8a79\u59c6\u65af\u4e8c\u4e16\u3002\u541b\u4e3b\u5236\u7684\u7a33\u5b9a\u5bf9\u4ed6\u6765\u8bf4\u5f88\u91cd\u8981\u3002\u4ed6\u5c06\u9000\u4f4d\u63cf\u8ff0\u4e3a\u201c\u6211\u751f\u547d\u4e2d\u771f\u6b63\u7684\u60b2\u5267\u201d\u3002\n\u7136\u800c\u5bf9\u4e8e\u6709\u7740\u5982\u6b64\u5f3a\u70c8\u539f\u5219\u7684\u4eba\u6765\u8bf4\uff0c\u62c9\u585e\u5c14\u65af\u5374\u7f3a\u4e4f\u65b9\u5411\u611f\u3002\u4f5c\u4e3a\u4e00\u4e2a\u5e74\u8f7b\u7684\u6bd5\u4e1a\u751f\uff0c\u4ed6\u76f8\u5f53\u61d2\u6563\u3002\u5c3d\u7ba1\u4ed6\u548c\u4f2f\u8482\u00b7\u4f0d\u65af\u7279\uff08Bertie Wooster\uff09\u6240\u8bf4\u7684\u4e00\u4e9b\u66f4\u597d\u7684\u5143\u7d20\u4e00\u8d77\u5728\u4f26\u6566\u5403\u996d\uff0c\u4f46\u4ed6\u7684\u65e5\u8bb0\u4ece\u672a\u50cf\u4ed6\u5c04\u6740\u7b2c\u4e00\u53ea\u96c4\u9e7f\u6216\u9a91\u9a6c\u65f6\u90a3\u6837\u751f\u52a8\u3002 \uff08\u4ed6\u611f\u8c22\u4ed6\u7ee7\u627f\u4e86\u201c\u53c8\u957f\u53c8\u5e73\u7684 Lascelles \u5927\u817f\u201d\u3002\uff09\u4ed6\u5e74\u8f7b\u65f6\u7684\u4e3b\u8981\u5174\u8da3\u2014\u2014\u5c31\u50cf\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u6837\u2014\u2014\u662f\u6d3b\u8dc3\u3002\u4e00\u7cfb\u5217\u53ef\u80fd\u7684\u804c\u4e1a\u2014\u2014\u5916\u4ea4\u90e8\u3001\u80a1\u7968\u7ecf\u7eaa\u4eba\u3001\u8bb0\u8005\u2014\u2014\u88ab\u5c1d\u8bd5\u3001\u618e\u6068\u3001\u5931\u8d25\u6216\u6839\u672c\u6ca1\u6709\u5f00\u59cb\u3002\u5982\u679c\u6ca1\u6709\u6218\u4e89\uff0c\u4ed6\u53ef\u80fd\u4f1a\u6210\u4e3a\u4e00\u4e2a\u6d41\u6d6a\u8005\u3002\u76f8\u53cd\uff0c\u5c3d\u7ba1\u6218\u4e89\u6709\u70b9\u4e0d\u6d3b\u8dc3\uff0c\u4ed6\u8fd8\u662f\u88ab\u6388\u4e88\u519b\u4e8b\u5341\u5b57\u52cb\u7ae0\u3002\u505c\u6218\u540e\uff0c\u4ed6\u4e3a\u4ed6\u7684\u59d0\u592b\u5b5f\u4e70\u603b\u7763\u5de5\u4f5c\u3002\u4ed6\u5728\u7ed9\u4ed6\u7684\u53d4\u53d4\u963f\u9053\u592b\u00b7\u5229\u5fb7\u5c14\uff08Adolphous Liddell\uff09\uff08\u53e6\u4e00\u4e2a\u7a0d\u5fae\u6709\u70b9\u5931\u843d\u7684\u7075\u9b42\uff09\u5199\u4fe1\u65f6\u8bf4\uff1a\u201c\u5373\u4f7f\u7ecf\u8fc7\u957f\u671f\u7684\u519b\u7eaa\u8bad\u7ec3\uff0c\u5728\u6240\u6709\u7684\u9686\u91cd\u548c\u4eea\u5f0f\u4e2d\u4e5f\u6709\u5f88\u591a\u4e1c\u897f\u6df1\u6df1\u5730\u6fc0\u6012\u4e86\u6211\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u60ca\u8bb6\u4e8e\u8fd9\u79cd\u5bf9\u5e1d\u738b\u98ce\u4e91\u7684\u7f3a\u4e4f\u94a6\u4f69\u3002\u6bd5\u7adf\uff0c\u8fd9\u5c31\u662f Alan Lascelles\uff1a\u53cd\u52a8\u7684\u3001\u6743\u5a01\u7684\u3001\u5a5a\u59fb\u7684\u6740\u624b\u3001\u65e7\u79e9\u5e8f\u7684\u4e3b\u8981\u634d\u536b\u8005\u3002\u4f46\u4e5f\u6b63\u662f\u8fd9\u79cd\u7565\u663e\u8d85\u7136\u7684\u770b\u6cd5\uff0c\u8ba9\u4ed6\u6210\u4e3a\u4e86\u5982\u6b64\u4f18\u79c0\u7684\u81e3\u5b50\u3002 Lascelles \u76f8\u4fe1\u7687\u5ba4\u7684\u5b9e\u8d28\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u5c55\u793a\u3002\u4e54\u6cbb\u4e94\u4e16\u53bb\u4e16\u540e\u7684\u7b2c\u4e8c\u5929\uff0c\u4e5f\u5c31\u662f\u90a3\u6b21\u62b1\u6028\u7687\u5bb6\u98ce\u6d41\u7684\u8fd1 20 \u5e74\u540e\uff0c\u56fd\u738b\u7684\u9057\u4f53\u88ab\u5e26\u5230\u6851\u5fb7\u7075\u5384\u59c6\u82b1\u56ed\u5c3d\u5934\u7684\u4e00\u4e2a\u5c0f\u6559\u5802\uff0c\u5728\u5927\u578b\u516c\u5171\u8868\u6f14\u4e4b\u524d\u4e3e\u884c\u4e86\u4e00\u4e2a\u5c0f\u578b\u7684\u79c1\u4eba\u4eea\u5f0f\uff1a\u201c\u536b\u5175\u4eec\u51e0\u4e4e\u4e00\u58f0\u4e0d\u54cd\uff0c\u5c06\u68fa\u6750\u625b\u5728\u80a9\u4e0a\uff0c\u653e\u5728\u796d\u575b\u524d\uff1b\u5728\u90a3\u91cc\uff0c\u7ecf\u8fc7\u975e\u5e38\u77ed\u6682\u7684\u670d\u52a1\u540e\uff0c\u6211\u4eec\u79bb\u5f00\u4e86\u5b83\uff0c\u8ba9\u6851\u5fb7\u7075\u5384\u59c6\u5e84\u56ed\u7684\u4eba\u770b\u5b88\u4e09\u5341\u516d\u5c0f\u65f6\u3002\u6211\u6562\u8bf4\uff0c\u5f53\u6240\u6709\u7684\u55a7\u56a3\u548c\u558a\u53eb\u90fd\u6d88\u901d\u540e\uff0c\u90a3\u4e2a\u5c0f\u5c0f\u7684\u4eea\u5f0f\u5c06\u4f5c\u4e3a\u6700\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\u7684\u4eea\u5f0f\u7559\u5728\u6211\u7684\u8111\u6d77\u4e2d\u3002\u201d Lascelles \u4e0d\u662f\u90a3\u79cd\u4e3a\u4e86\u7eaa\u5ff5\u724c\u548c\u5728\u516c\u56ed\u91cc\u51fa\u53bb\u73a9\u7684\u4fdd\u7687\u515a\u3002\u4ed6\u662f\u4e00\u4e2a\u771f\u6b63\u7684\u4fe1\u5f92\u3002\u4ed6\u53ef\u4ee5\u6beb\u4e0d\u5938\u5f20\u5730\u5c06\u56fd\u738b\u79f0\u4e3a\u795e\u3002\u4ed6\u57cb\u846c\u4e86\u90e8\u843d\u7684\u9996\u9886\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u65b0\u56fd\u738b\u4f1a\u53d1\u751f\u5982\u6b64\u6df7\u4e71\u7684\u539f\u56e0\u3002\u7231\u5fb7\u534e\u516b\u4e16\u60f3\u8981\u7ecf\u8425\u4e00\u4e2a\u975e\u5e38\u4e0d\u540c\u7684\u90e8\u843d\u3002 Lascelles \u4e0e\u7231\u5fb7\u534e\u516b\u4e16\u7684\u5386\u53f2\u5bf9\u4e8e\u4e86\u89e3\u540e\u6765\u7684\u4e8b\u4ef6\u81f3\u5173\u91cd\u8981\u3002 1920 \u5e74\uff0c\u5f53\u4ed6\u4ece\u5370\u5ea6\u56de\u6765\u65f6\uff0c\u4ed6\u7684\u670b\u53cb\u83b1\u8482\u00b7\u57c3\u5c14\u4e54 (Letty Elcho) \u7ed9\u4ed6\u5e26\u6765\u4e86\u4e00\u5c01\u4fe1\uff0c\u9080\u8bf7\u4ed6\u4e0e\u65f6\u4efb\u5a01\u5c14\u58eb\u4eb2\u738b\u7684\u7231\u5fb7\u534e\u516b\u4e16\u4e00\u8d77\u5de5\u4f5c\u3002 Lascelles \u88ab\u8fd9\u4efd\u5de5\u4f5c\u5438\u5f15\uff0c\u90e8\u5206\u539f\u56e0\u662f\u56e0\u4e3a\u5723\u8a79\u59c6\u65af\u5bab\u79bb\u4ed6\u5bb6\u534a\u82f1\u91cc\uff0c\u79bb\u4ed6\u7684\u4ff1\u4e50\u90e8\u6709\u56db\u5206\u4e4b\u4e00\u82f1\u91cc\uff0c\u4f46\u4e3b\u8981\u662f\u56e0\u4e3a\u201c\u6211\u5bf9\u738b\u5b50\u975e\u5e38\u94a6\u4f69\uff0c\u6211\u76f8\u4fe1\u82f1\u683c\u5170\u7684\u672a\u6765\u548c\u4efb\u4f55\u4e2a\u4eba\u4e00\u6837\uff0c\u90fd\u638c\u63e1\u5728\u4ed6\u7684\u624b\u4e2d\u3002\u201d\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4efd\u5de5\u4f5c\uff0c\u4ed6\u53ef\u80fd\u4f1a\u7b7e\u7ea6\u5230\u4e00\u5bb6\u5370\u5237\u516c\u53f8\u5f53\u5b66\u5f92\u3002\u8fd9\u79cd\u6df1\u6df1\u7684\u94a6\u4f69\u4e0d\u4f1a\u6301\u4e45\uff0c\u800c\u62c9\u585e\u5c14\u65af\u770b\u5230\u7687\u5ba4\u4e2d\u7684\u8352\u8c2c\u7684\u80fd\u529b\u5bf9\u4ed6\u4f5c\u4e3a\u671d\u81e3\u7684\u89d2\u8272\u5f88\u91cd\u8981\u3002\u5728\u76ee\u7779\u4e86\u738b\u5b50\u559d\u9152\u3001\u8d4c\u535a\u3001\u505a\u5973\u4eba\u3001\u73a9\u5ffd\u804c\u5b88\u3001\u5bf9\u82f1\u56fd\u5f53\u6743\u6d3e\u6210\u5458\u7c97\u9c81\u4ee5\u53ca\u2014\u2014\u4ee4\u4eba\u9707\u60ca\u7684\u662f\u5c01\u5efa\u7684\u827e\u4f26\u2014\u2014\u5728\u4e54\u6cbb\u4e94\u4e16\u53ef\u80fd\u4f1a\u6b7b\u7684\u6050\u60e7\u65f6\u8868\u73b0\u51fa\u5f88\u5c11\u5174\u8da3\u540e\uff0c\u4ed61929 \u5e74\uff0c\u4ee5\u6211\u4eec\u8bb8\u591a\u4eba\u68a6\u5bd0\u4ee5\u6c42\u7684\u65b9\u5f0f\u8f9e\u804c\uff1a\n\u5f53\u4ed6\u95ee\u6211\u4e3a\u4ec0\u4e48\u8981\u79bb\u5f00\u4ed6\u65f6\uff0c\u6211\u5728\u4ed6\u7684\u623f\u95f4\u91cc\u8e31\u6b65\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u544a\u8bc9\u4ed6\uff0c\u5c31\u50cf\u6211\u53ef\u80fd\u544a\u8bc9\u4e00\u4e2a\u5f1f\u5f1f\u4e00\u6837\uff0c\u6211\u5bf9\u4ed6\u548c\u4ed6\u7684\u6574\u4e2a\u751f\u6d3b\u8ba1\u5212\u7684\u770b\u6cd5\uff0c\u5e76\u9884\u8a00\u51c6\u786e\u5730\u8bf4\uff0c\u4ed6\u5c06\u5931\u53bb\u82f1\u683c\u5170\u7684\u738b\u4f4d\uff0c\u8fd9\u5728\u5f53\u65f6\u53ef\u80fd\u4f1a\u8ba9\u6211\u611f\u5230\u60ca\u8bb6\u3002\u6211\u4eec\u5927\u591a\u6570\u4eba\uff0c\u5728\u8fd9\u6837\u7684\u9000\u51fa\u4e4b\u540e\uff0c\u5c31\u518d\u4e5f\u4e0d\u4f1a\u56de\u53bb\u4e86\u3002\u800c Lascelles \u53ea\u662f\u9010\u6e10\u878d\u5165\u4e86\u8fd9\u4e2a\u89d2\u8272\u3002\u4e0d\u5e72\u4e86\uff0c\u4ed6\u79f0\u81ea\u5df1\u4e3a\u201c\u5012\u7f6e\u7684\u798f\u65af\u5854\u592b\u201d\uff08\u56e0\u4e3a\u4ed6\u5f88\u7626\uff0c\u4e2d\u5e74\u65f6\u548c\u5e74\u8f7b\u65f6\u4e00\u6837\u7626\uff09\uff0c\u8ba9\u54c8\u5c14\u738b\u5b50\u201c\u81ea\u5bfb\u6b7b\u8def\u201d\u3002\u4f46\u662f\uff0c\u5728\u4e0e\u4ed6\u7684\u5bb6\u4eba\u5728\u8be5\u56fd\u9605\u8bfb\u548c\u56ed\u827a\u4e24\u5e74\u540e\uff0c\u5e76\u5728\u52a0\u62ff\u5927\u4e3a\u603b\u7763\u5de5\u4f5c\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u4ed6\u88ab\u8981\u6c42\u91cd\u65b0\u52a0\u5165\u7687\u5bb6\u5de5\u4f5c\u4eba\u5458\u3002\u8d77\u521d\uff0c\u4ed6\u62d2\u7edd\u4e86\u3002\u8fd9\u4efd\u5de5\u4f5c\u662f\u4e0e\u4e54\u6cbb\u4e94\u4e16\u4e00\u8d77\u5de5\u4f5c\u7684\uff0c\u4ed6\u66fe\u5c06\u4ed6\u63cf\u8ff0\u4e3a\u201c\u795e\u683c\u201d\u2014\u2014\u4f46\u62c9\u585e\u5c14\u65af\u5728\u4ed6\u7684\u8f9e\u804c\u4fe1\u4e2d\u8bf4\uff1a\u201c\u5f88\u5c11\u6709\u4eba\u80fd\u4e00\u8f88\u5b50\u505a\u79c1\u4eba\u79d8\u4e66\uff0c\u6211\u4e0d\u662f\u4ed6\u4eec\u4e2d\u7684\u4e00\u5458\u3002\u201d\u6b64\u5916\uff0c\u4ed6\u6307\u51fa\uff0c\u5f53\u56fd\u738b\u53bb\u4e16\u65f6\uff0c\u4ed6\u4f1a\u5904\u4e8e\u4e00\u4e2a\u975e\u5e38\u56f0\u96be\u7684\u5883\u5730\uff0c\u8bf4\u5f97\u5ba2\u6c14\u4e00\u70b9\uff0c\u5df2\u7ecf\u5c06\u4ed6\u5bf9\u4ed6\u7684\u60f3\u6cd5\u544a\u8bc9\u4e86\u4e0b\u4e00\u4f4d\u3002\u4e54\u6cbb\u4e94\u4e16\u7684\u79c1\u4eba\u79d8\u4e66\u514b\u83b1\u592b\u00b7\u5a01\u683c\u62c9\u59c6\uff08Clive Wigram\uff09\u66fe\u8058\u8bf7\u62c9\u585e\u5c14\u65af\u4f5c\u4e3a\u4ed6\u7684\u52a9\u624b\uff0c\u4ed6\u544a\u8bc9\u4ed6\u4e0d\u8981\u62c5\u5fc3\u3002\u56fd\u738b\u8eab\u4f53\u5f88\u597d\uff0c\u8fd8\u6709\u51e0\u5e74\u7684\u5bff\u547d\u3002 Lascelles \u5199\u4fe1\u7ed9\u4ed6\u7684\u59bb\u5b50\u743c\u8bf4\u4ed6\u5c06\u63a5\u53d7\u8fd9\u4efd\u5de5\u4f5c\uff1a\u201c\u5982\u679c\u4e00\u4e2a\u4eba\u4e0d\u51c6\u5907\u5728\u88ab\u53ec\u5524\u65f6\u534f\u52a9\u795e\u7075\uff0c\u90a3\u4e48\u5728\u4e16\u754c\u5404\u5730\u5531\u2018\u5929\u4f51\u56fd\u738b\u2019\u662f\u6ca1\u6709\u7528\u7684\u3002\u201d\u56e0\u6b64\uff0c\u5728 1936 \u5e74 1 \u6708\uff0c\u4ed6\u524d\u5f80\u8bfa\u798f\u514b\u5f00\u59cb\u4ed6\u7684\u65b0\u5de5\u4f5c\u3002\u4ed6\u5728\u5229\u7269\u6d66\u8857\u627e\u5230\u4e86\u4e00\u8f86\u4e3a\u4ed6\u9884\u7559\u7684\u5934\u7b49\u8f66\u53a2\u3002\u65c5\u7a0b\u5f00\u59cb\u540e\uff0c\u201c\u4e00\u4e2a\u5e74\u8f7b\u4eba\u51fa\u73b0\u5728\u6211\u7684\u9a6c\u8f66\u95e8\u53e3\u3002\u5f53\u6211\u8ba4\u51fa\u4ed6\u662f\u7ea6\u514b\u516c\u7235\u65f6\uff0c\u6211\u6b63\u8981\u544a\u8bc9\u4ed6\u8d70\u5f00\u3002\u201d\u4ed6\u80fd\u8ba4\u51fa\u4ed6\u662f\u4ef6\u597d\u4e8b\u3002 12 \u4e2a\u6708\u5185\uff0c\u8fd9\u4e2a\u5e74\u8f7b\u4eba\u5c06\u6210\u4e3a\u4e54\u6cbb\u516d\u4e16\uff0c\u800c 1943 \u5e74\uff0c\u62c9\u585e\u5c14\u65af\u5c06\u6210\u4e3a\u4ed6\u7684\u79c1\u4eba\u79d8\u4e66\u3002 \u7ea6\u514b\u516c\u7235\u5728\u65c5\u9014\u4e2d\u9014\u5bf9\u4ed6\u8bf4\uff1a\u201c\u56fd\u738b\u8eab\u4f53\u4e0d\u597d\u662f\u600e\u4e48\u56de\u4e8b\uff1f\u201d\u4e54\u6cbb\u4e94\u4e16\u5728\u56db\u5929\u5185\u53bb\u4e16\u3002\u6ca1\u6709\u7075\u9b42\u7684\u7231\u5fb7\u534e\u662f\u56fd\u738b\u3002\u56e0\u6b64\uff0c\u51fa\u4e8e\u5026\u6020\u3001\u8d23\u4efb\u548c\u70ed\u8840\u7231\u56fd\u4e3b\u4e49\u7684\u7ed3\u5408\uff0c\u62c9\u585e\u5c14\u65af\u6700\u7ec8\u6210\u4e3a\u4e86\u4e00\u4e2a\u5728\u9053\u5fb7\u4e0a\u88ab\u4ed6\u6392\u65a5\u7684\u4eba\u7684\u52a9\u7406\u79c1\u4eba\u79d8\u4e66\u3002\u7ec5\u58eb\u4eec\u4e0d\u53ea\u662f\u56e0\u4e3a\u4e0d\u559c\u6b22\u65b0\u56fd\u738b\u800c\u9000\u51fa\u7687\u5bb6\u670d\u52a1\u3002\u7231\u5fb7\u534e\u8ba9 Lascelles \u575a\u6301\u4e0b\u53bb\uff0c\u8fd9\u4e5f\u8bb8\u4ee4\u4eba\u60ca\u8bb6\u3002\u4f46\u4ece\u8fd9\u4e2a\u8ddd\u79bb\u770b\u6765\u5f88\u660e\u663e\u2014\u2014\u6b63\u5982\u5f53\u65f6\u62c9\u585e\u5c14\u65af\u6240\u8ba4\u4e3a\u7684\u90a3\u6837\u2014\u2014\u7231\u5fb7\u534e\u4ece\u6765\u6ca1\u6709\u6253\u7b97\u8d70\u90a3\u4e48\u8fdc\uff0c\u4e5f\u4e0d\u4f1a\u5f85\u592a\u4e45\u3002\u738b\u5ba4\u65e8\u5728\u901a\u8fc7\u5c55\u793a\u4ed6\u4eec\u7684\u751f\u6d3b\u6765\u4e3a\u6211\u4eec\u7684\u751f\u6d3b\u5e26\u6765\u5947\u89c2\uff1a\u51fa\u751f\u3001\u6b7b\u4ea1\u548c\u5a5a\u59fb\u7684\u8f89\u714c\u76db\u4f1a\u3002\u968f\u7740\u541b\u4e3b\u5236\u5728 19 \u4e16\u7eaa\u5931\u53bb\u6743\u529b\uff0c\u4ed6\u4eec\u7528\u8868\u6f14\u53d6\u800c\u4ee3\u4e4b\u3002\u516c\u4f17\u53c2\u4e0e\u6210\u4e3a\u7ef4\u591a\u5229\u4e9a\u5973\u738b\u4fdd\u6301\u5176\u76f8\u5173\u6027\u7684\u65b9\u5f0f\u3002\u8fd9\u79cd\u65b0\u7684\u7687\u5ba4\u751f\u6d3b\u6a21\u5f0f\u662f\u8ba9\u7231\u5fb7\u534e\u516b\u4e16\u6210\u4e3a\u5a01\u5c14\u58eb\u4eb2\u738b\u8fd9\u6837\u7684\u660e\u661f\u7684\u4e00\u90e8\u5206\uff1a\u4ed6\u5728\u7f8e\u56fd\u3001\u52a0\u62ff\u5927\u548c\u5357\u975e\u7684\u65c5\u884c\u53d6\u5f97\u4e86\u5de8\u5927\u7684\u6210\u529f\u3002\u4f46\u5230\u4e54\u6cbb\u4e94\u4e16\u7edf\u6cbb\u672b\u671f\uff0c\u82f1\u56fd\u7687\u5ba4\u4e0e\u4eba\u6c11\u8fbe\u6210\u4e86\u65b0\u7684\u76df\u7ea6\uff1a\u201c\u79c1\u4eba\u8bda\u4fe1\uff0c\u516c\u5171\u666f\u89c2\u201d\u3002 Lascelles \u662f\u683c\u9c81\u5409\u4e9a\u6a21\u5f0f\u7684\u5927\u796d\u53f8\uff0c\u4ed6\u4eb2\u773c\u76ee\u7779\u4e86\u7231\u5fb7\u534e\u5168\u662f\u516c\u4f17\u4eba\u7269\uff0c\u6ca1\u6709\u79c1\u4eba\u6b63\u76f4\u3002\u4f5c\u4e3a\u4e00\u540d\u5931\u804c\u7684\u671d\u81e3\uff08\u5e76\u4e14\u56e0\u4e3a\u4ed6\u627e\u4e0d\u5230\u5176\u4ed6\u4e8b\u60c5\u53ef\u505a\uff09\uff0c\u4ed6\u610f\u8bc6\u5230\u9664\u975e\u738b\u5ba4\u575a\u6301\u81ea\u5df1\u7684\u539f\u5219\u2014\u2014\u575a\u6301\u4e0d\u65ad\u53d8\u5316\u7684\u4e16\u754c\u5f3a\u52a0\u7ed9\u5b83\u7684\u539f\u5219\u2014\u2014\u5426\u5219\u5c31\u4f1a\u53d7\u5230\u5f71\u54cd\u3002\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\uff0c\u4ed6\u662f\u5ba3\u4f20\u5458\uff0c\u662f\u7231\u5fb7\u534e\u516b\u4e16\u7684\u654c\u4eba\uff0c\u662f\u53cd\u52a8\u6d3e\uff0c\u4ee5\u53ca\u4ed6\u58f0\u79f0\u7684\u4e00\u5207\uff0c\u56e0\u4e3a\u4ed6\u610f\u8bc6\u5230\u738b\u5ba4\u522b\u65e0\u9009\u62e9\u3002\u968f\u7740\u541b\u4e3b\u5236\u9002\u5e94\u6c11\u4e3b\u5236\uff0c\u636e\u8bf4\u62c9\u585e\u5c14\u65af\u5e26\u6765\u7684\u5927\u90e8\u5206\u4e8b\u60c5\u5f88\u53ef\u80fd\u662f\u4e0d\u53ef\u907f\u514d\u7684\u3002\n\u4ed6\u4e00\u76f4\u662f\u4e00\u4e2a\u7565\u663e\u4e0d\u7518\u7684\u671d\u81e3\u3002 \uff08\u4ed6\u9000\u4f11\u540e\u5f88\u4e45\u5c31\u544a\u8bc9\u4ed6\u7684\u5973\u513f\uff0c\u5982\u679c\u4ed6\u80fd\u91cd\u6765\uff0c\u4ed6\u4f1a\u517b\u9a6c\u3002\u201c\u8d5b\u9a6c\uff0c\u6216\u9a6c\u8f66\uff1a\u4efb\u4f55\u79cd\u7c7b\u7684\u9a6c\u3002\u201d\uff09\u4e0d\u8fc7\uff0c\u4ed6\u5f88\u64c5\u957f\u3002\u4ed6\u6700\u7ec8\u4f1a\u88ab\u8bb0\u4f4f\u662f\u6700\u540e\u4e00\u4e2a\u5e2e\u52a9\u541b\u4e3b\u5236\u8fc7\u6e21\u5230\u73b0\u4ee3\u529f\u80fd\u7684\u8001\u6d3e\uff0c\u8fd8\u662f\u4e00\u4e2a\u987d\u56fa\u7684\u8001\u53cd\u52a8\u5206\u5b50\uff0c\u65e0\u8c13\u5730\u7834\u574f\u4e86\u4e00\u4e9b\u5e78\u798f\u751f\u6d3b\uff0c\u8fd8\u6709\u5f85\u89c2\u5bdf\u3002\u4f46\u662f\u5f53\u4ed6\u7684\u6863\u6848\u6700\u7ec8\u88ab\u6e05\u7406\u5e72\u51c0\u65f6\uff0c\u6211\u6000\u7591\u6211\u4eec\u4f1a\u5728\u90a3\u91cc\u627e\u5230\u4efb\u4f55\u9ed1\u6697\u7684\u79d8\u5bc6\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u57fa\u672c\u539f\u7406\u3002\u4ed6\u662f\u4e00\u4e2a\u76f8\u4fe1\u738b\u5ba4\u9053\u5fb7\u652f\u6491\u7740\u738b\u5ba4\u773c\u955c\u7684\u4eba\u3002\u4ed6\u4f1a\u600e\u6837\u770b\u5f85\u73b0\u4ee3\u541b\u4e3b\u5236\uff1f\u5728 1990 \u5e74\u5bf9\u83f2\u5229\u666e\u00b7\u9f50\u683c\u52d2 (Philip Ziegler) \u7684\u7231\u5fb7\u534e\u516b\u4e16 (Edward VIII) \u7684\u8bc4\u8bba\u4e2d\uff0c\u514b\u91cc\u65af\u6258\u5f17\u00b7\u5e0c\u94a6\u65af (Christopher Hitchens) \u89c2\u5bdf\u5230\u201c\u738b\u4f4d\u7684\u9b54\u529b\u73b0\u5728\u4e0e\u67e5\u5c14\u65af\u548c\u5b89\u5ae9\u4f2f\u683c\u3001\u6234\u5b89\u5a1c\u548c\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5bc6\u4e0d\u53ef\u5206\u2014\u2014\u7231\u5fb7\u534e\u7684\u56fd\u9645\u767d\u8272\u5783\u573e\u4e60\u60ef\u5ef6\u4f38\u5230\u73b0\u4ee3\u5a31\u4e50\u5708\u548c\u540d\u4eba\u6587\u5316\u4e2d\u3002 \u201d\u8fd9\u53e5\u8bdd\u53ef\u80fd\u662f\u5bf9 Lascelles \u5b66\u6821\u7684\u60bc\u8bcd\uff1a\u9664\u975e\u4ed6\u4eec\u575a\u6301\u67d0\u4e9b\u56f0\u96be\u7684\u3001\u6709\u65f6\u662f\u8fc7\u65f6\u7684\u539f\u5219\uff0c\u5426\u5219\u62e5\u6709\u738b\u5ba4\u6beb\u65e0\u610f\u4e49\u3002\u5bf9\u4e8e\u62c9\u585e\u5c14\u65af\u6765\u8bf4\uff0c\u5bf9\u4e8e\u5f53\u65f6\u7684\u516c\u4f17\u6765\u8bf4\uff0c\u8fd9\u4e9b\u539f\u5219\u90fd\u662f\u5173\u4e8e\u5a5a\u59fb\u7684\u3002\u4ed6\u505a\u7684\u6700\u540e\u4e00\u4ef6\u4e8b\u662f\u5750\u5728\u80af\u8f9b\u987f\u5bab\u7684\u82b1\u56ed\u91cc\u89c2\u770b\u67e5\u5c14\u65af\u548c\u6234\u5b89\u5a1c\u5a5a\u793c\u7684\u70df\u82b1\u5e86\u795d\u6d3b\u52a8\u3002\u7b2c\u4e8c\u5929\uff0c\u4ed6\u6bcf\u9694\u51e0\u5206\u949f\u5c31\u8be2\u95ee\u6709\u5173\u4e8b\u4ef6\u7684\u6d88\u606f\uff0c\u62c5\u5fc3\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u3002\u4e24\u5468\u540e\u4ed6\u53bb\u4e16\u4e86\u3002\u6beb\u65e0\u7591\u95ee\uff0c\u6211\u4eec\u4ece\u90a3\u4ee5\u540e\u542c\u5230\u7684\u5173\u4e8e\u7687\u5ba4\u7684\u90a3\u4e9b\u7206\u6599\u4f1a\u4ee4\u4ed6\u7684\u793c\u4eea\u611f\u5230\u538c\u6076\u3002\u4f46\u6c64\u7c73\u6ca1\u6709\u63a8\u6d4b\u3002 BBC \u7684\u4e00\u4f4d\u5e74\u8f7b\u4eba\u66fe\u8bd5\u56fe\u8bf4\u670d\u4ed6\u53c2\u52a0 Lascelles \u6240\u8bf4\u7684\u201c\u5173\u4e8e\u82f1\u56fd\u541b\u4e3b\u5236\u672a\u6765\u7684\u7535\u89c6\u72c2\u6b22\u201d\u3002 Lascelles \u76f4\u622a\u4e86\u5f53\u5730\u56de\u7b54\u8bf4\uff1a\u201c\u6211\u544a\u8bc9\u4ed6\u6211\u5f88\u5feb\u5c31\u4f1a\u8d64\u8eab\u88f8\u4f53\u5730\u8d70\u5728\u76ae\u5361\u8fea\u5229\u5927\u8857\u4e0a\u3002\u201d\u6211\u4eec\u53ef\u80fd\u4f1a\u53d1\u73b0\u5f88\u5bb9\u6613\u5c06\u4ed6\u89c6\u4e3a\u8001\u987d\u56fa\u800c\u4e0d\u4e88\u7406\u4f1a\u3002\u4f46\u662f\uff0c\u6211\u4eec\u5982\u4f55\u81ea\u4fe1\u5730\u8bf4\u6211\u4eec\u8d85\u8d8a\u4e86\u4ed6\u5bf9\u79c1\u4eba\u8bda\u4fe1\u7684\u62c5\u5fe7\uff1f\u6211\u4eec\u662f\u5426\u62c5\u5fc3\u4ec0\u4e48\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u738b\u5ba4\u914d\u5076\uff1f\u8981\u53c2\u4e0e\u8ba8\u8bba\u5e76\u4fdd\u6301\u6700\u65b0\u72b6\u6001\uff0c\u8bf7\u6210\u4e3a\u6ce8\u518c\u7528\u6237\u3002\u6ce8\u518c\u6211", "note_en": "Forty years ago, on 10 August, a tall and wiry old man died at Kensington Palace, aged 94. He had been a cultivated chap \u2014 a former Director of the Midland Bank, Secretary of the Literary Society and Director of the Royal Academy of Music. He read Shakespeare on the Tube as he travelled to meetings at the bank, and wrote amateur poetry. Occasionally royalty stopped to chit chat on their way past, as Princess Margaret once did with her new baby. In later retirement, he had become something of a hermit, looking like \u201ca pot-bellied old beaver\u201d, to use his own words, and growing an ungainly beard.\n This man was Alan \u201cTommy\u201d Lascelles, former Private Secretary to George VI and Queen Elizabeth II, and the Assistant Private Secretary to Edward VIII when he was Prince of Wales. He had lived, grace-and-favour, at the Old Stables at Kensington Palace (he thought it was one of the nicest houses in England) since he retired in 1953. Having been a courtier, on and off, from 1920-1953, he gives a fascinating insight into how to preserve a monarchy in a democracy.\n  Lascelles gets caricatured as a stiff-arsed, hard-bristled, curmudgeonly enforcer of horrible rules in  The Crown , forever thwarting true love\u2019s course. As well as playing a role in Edward VIII\u2019s abdication, Lascelles is seen as one of the Establishment men who decided Princess Margaret couldn\u2019t marry Peter Townsend. But despite this crucial role in modern Royal history, the real Lascelles remains slightly out of sight to us. There is no biography. His archives in Churchill College, Cambridge are largely closed \u2014 especially material relating to the monarchy. Edward Owens, who recently wrote a book about the royal family and the mass media, was denied access to them. His diaries, although excellent, were selectively edited by his friend Rupert Hart-Davis; they reveal a much more emotional, sensible, likeable man than the popular image.\n There is no consensus, then, on Lascelles\u2019s true character. To Edward VIII, living in exile as the Duke of Windsor, Lascelles was always \u201cthat snake\u201d. The feeling was mutual. When Harold Nicolson had lunch with Lascelles three days after the Abdication, the courtier said the former King was \u201clike a child in the fairy stories who had been given every gift except a soul\u201d. He was also spitting with rage about the fact that Edward VIII was not patriotic enough: \u201cHe never cared about England or the English.\u201d Ferdinand Mount  remembers Lascelles visiting his school, where Mount \u201cwas startled by his explosion of venom against the Duke of Windsor \u2026 He was memorably unpleasant.\u201d\n  But Lascelles wasn\u2019t just a stickler for arcane and snobbish standards, nor did he take a cruel pleasure in enforcing them. He stood for fair play and pragmatism. When No\u00ebl Coward was recommended for a knighthood, Lascelles advised George VI against. The King was constantly approving court martials against young RAF officers who had written dud cheques, and Coward had recently been fined for cheating his Income Tax. It would have been wrong for those young men to be punished while Coward was honoured.\n Essentially honourable, then, despite being memorably unpleasant. Lascelles understood that although monarchy must be staged, that doesn\u2019t mean it can be fake. The public spectacle has to be a true enough expression of the values it upholds. That is why the knighthood had to be refused, and why Wallace Simpson couldn\u2019t be Queen. (In one of his more venomous moments, Lascelles wrote that the King\u2019s subjects would not tolerate \u201ca shop-spoiled American, with two living husbands and a voice like a rusty saw\u201d.) That is why, after the abdication, Lascelles went to some lengths to keep Edward out of the country, to try and eradicate the whole affair from the public mind. It is also why, irrespective of the way it happened, Lascelles came to believe the abdication was inevitable. Edward, he said, was \u201chabitually ready to sacrifice truth to his personal likes or dislikes\u201d; Edward\u2019s celebrity wasn\u2019t enough to maintain the monarchy.\n Lascelles believed in the institution but said, \u201cI have never idealised any member of the House of Windsor\u201d. When Harold Nicolson was commissioned to write George V\u2019s biography, Lascelles told him it would be the biography of an institution, and that there would be no need to \u201cdescend into personalities\u201d. This isn\u2019t just bluster. The night the abdication was announced, Lascelles walked round and round St James\u2019s Park, thinking about James II. The stability of the monarchy mattered to him. He described the abdication as \u201ca real tragedy in my life\u201d.\n  And yet for someone with such strong principles, Lascelles lacked a sense of direction. As a young graduate, he was rather louche. Although he was skittling around London dining with what Bertie Wooster would call some of the better elements, his diary never comes alive like it does when he shoots his first stag, or when he\u2019s riding a horse. (He gives thanks that he inherited the \u201clong, flat Lascelles thighs.\u201d) His main interest as a young man \u2014 just like Edward VIII\u2019s \u2014 was to be active. A series of possible careers \u2014 Foreign Office, stockbroker, journalist \u2014 were tried, hated, failed or simply never started. Without the war, he would have been edging towards becoming a drifter. Instead, despite a somewhat inactive war, he was awarded the Military Cross.\n After the Armistice, he worked for his brother-in-law, the Governor of Bombay. Writing to his uncle  Adolphous Liddell (another slightly lost soul) he said: \u201cthere is much in all the flummery and ceremonial which, even after a long course of military discipline, irritates me profoundly.\u201d We might be surprised at this lack of admiration for imperial flummery. This is, after all, Alan Lascelles: reactionary, establishment stalwart, slayer of marriages, arch defender of the old order. But it was precisely this slightly detached view that made him such a good courtier.\n Lascelles believed in the substance of royalty, not just the display. The day after George V died, nearly 20 years after that complaint about imperial flummery, the King\u2019s body was taken to a little church at the end of the garden at Sandringham for a small private ceremony ahead of the large, public spectacle:\n \u201cThe guardsmen, with scarcely a sound, slung the coffin on their shoulders and laid it before the altar; and there, after a very brief service, we left it, to be watched for thirty-six hours by the men of the Sandringham Estate. I daresay when all the tumult and shouting dies, that little ceremony will remain in my mind as the most impressive of all.\u201d\n Lascelles was not the sort of Royalist who was in it for the memorial plates and days out at the park. He was a genuine believer. He could talk of the King as a Deity with little exaggeration. He was burying the head of his tribe. This is why there was such a kerfuffle with the new King. Edward VIII wanted to run a very different sort of tribe.\n  Lascelles\u2019s history with Edward VIII is essential to understanding later events. When he returned from India in 1920, his friend Letty Elcho brought him a letter offering a job with Edward VIII, then Prince of Wales. Lascelles was attracted to the job partly because St. James\u2019s Palace was half a mile from his house and a quarter of a mile from his club, but mostly because \u201cI have got a very deep admiration for the Prince, and I am convinced that the future of England is as much in his hands as in any individual\u201d. Remarkably, had this job not come along, he would have signed on as an apprentice to a printing firm.\n This deep admiration would not last, and Lascelles\u2019s ability to see the ridiculous in the Royal was important to his role as a courtier. After nine years of watching the Prince drink, gamble, womanise, neglect his duties, be rude to members of the British establishment, and \u2014 shockingly for the feudal Alan \u2014 show very little interest when there was a scare that George V might die, he stormed out in 1929, in the sort of resignation so many of us have dreamed of making:\n When he asked me why I wanted to leave him, I paced his room for the best part of an hour, telling him, as I might have told a younger brother, exactly what I thought of him and his whole scheme of life, and foretelling, with an accuracy that might have surprised me at the time, that he would lose the throne of England.\n Most of us, after such an exit, would never go back. And Lascelles had only drifted into the role. Quitting it, he called himself \u201can inverted Falstaff\u201d (because he was thin, just as thin in middle age as when he was young), leaving Prince Hal to \u201cwork out his own damnation\u201d. But, after two years of reading and gardening with his family in the country, and a stint working for the Governor General in Canada, he was asked to re-join the Royal staff.\n At first, he refused. The job was with George V, who he once described as \u201cthe godhead\u201d \u2014 but Lascelles had said in his resignation letter: \u201cVery few men can go on being private secretaries all their lives, and I am not one of them.\u201d And besides, he pointed out, when the king died, he would be in a very difficult position, to put it mildly, having told the next-in-line exactly what he thought of him. Clive Wigram, George V\u2019s Private Secretary \u2014\u00a0who was hiring Lascelles to be his assistant \u2014 told him not to worry. The King was in splendid health and had years left in him. Lascelles wrote to his wife Joan saying he was going to take the job: \u201cIt is no use going about the world singing \u2018God Save the King\u2019 if one isn\u2019t prepared to assist the Deity when called upon.\u201d\n  And so, in January 1936, he travelled to Norfolk to start his new job. He had found a first-class carriage reserved for him at Liverpool Street. Once the journey was underway, \u201ca young man appeared in the doorway of my carriage. I was about to tell him to go away when I recognised him as the Duke of York.\u201d It was a good thing he recognised him. The young man would accede as George VI within 12 months, and Lascelles would become his Private Secretary in 1943. The Duke of York said to him halfway through the journey, \u201cWhat\u2019s all this about the King not being well?\u201d George V died within four days. The soulless Edward was king.\n And so, from a combination of lassitude, duty, and blue-blooded patriotism, Lascelles ended up as Assistant Private Secretary to a man he was morally repulsed by. Gentlemen do not just drop out of Royal service because they dislike the new King. It is perhaps surprising that Edward kept Lascelles on. But it seems obvious from this distance \u2014 as it seemed to Lascelles then\u00a0\u2014 that Edward had never planned to make it that far and wasn\u2019t going to stay long.\n The royal family is meant to bring spectacle to our lives by displaying theirs: a glittering pageant of Births, Deaths, and Marriages. As the monarchy lost power through the nineteenth century, they replaced it with performance. Public engagement became Queen Victoria\u2019s way of maintaining her relevance. And this new mode of royal existence is part of what made Edward VIII such a star as Prince of Wales: his tours of America, Canada, and South Africa were massive successes. But by the end of George V\u2019s reign, British royalty had consolidated a new covenant with the people: \u201cprivate probity, public spectacle.\u201d\n Lascelles was the high priest of the Georgian model and had seen first-hand that Edward was all public spectacle and no private probity. A courtier out of duty (and because he found nothing else to do), he realised that unless the royal family stuck to its principles \u2014 to the principles forced on it by a changing world \u2014 it would suffer. To the extent that he was a propagandist, an enemy of Edward VIII, a reactionary, and everything else he is claimed to be, it was because he realised the royal family had very little choice. Much of what Lascelles is said to have brought about may well have been inevitable as monarchy adjusted to democracy.\n He had always been a slightly unwilling courtier. (He told his daughter long after he retired that, if he could have his life again, he would breed horses. \u201cRacehorses, or cart-horses: any sort of horses.\u201d) He was good at it, though. It remains to be seen whether he will eventually be remembered as the last of the old school who helped the monarchy transition to its modern function \u2014 or as a crusty old reactionary who needlessly destroyed a clutch of happy lives. But when his archives are eventually dusted off, I doubt we will find any dark secrets in there. We already know the fundamentals. He was a man who believed in royal morals underpinning royal spectacles.\n  What would he make of the modern monarchy? In his 1990 review of Philip Ziegler\u2019s  Edward VIII, Christopher Hitchens  observed that \u201cthe magic of the throne is now inextricable from Charles and the Annenbergs, Diana and Donald Trump \u2014 the extension of Edward\u2019s international white-trash habit into modern showbiz and celeb culture.\u201d This line might stand as a eulogy for the Lascelles\u2019s school: that there is little point in having a Royal Family unless they adhere to certain difficult and sometimes out-of-date principles. For Lascelles, as for the public at that time, those principles were about marriage. One of the last things he did was sit in the garden of Kensington Palace to watch the firework celebrations of Charles and Diana\u2019s wedding. The next day, he asked for news about the event every few minutes, anxious it should all be going well. He died two weeks later.\n Undoubtedly, the sort of revelations we have heard about the Royal Family since would have been anathema to his sense of decorum. But Tommy didn\u2019t speculate. A young man from the BBC once tried to persuade him to appear in what Lascelles called \u201ca television orgy on The Future of the British Monarchy\u201d. Lascelles gave a forthright reply: \u201cI told him I would as soon walk stark naked down Piccadilly.\u201d We might find it easy to dismiss him as an old fogey. But how confidently can we say that we are beyond his concerns about private probity? Are we above worrying about what makes an acceptable royal spouse?\n To get involved in the discussion and stay up to date, become a registered user.\n    Sign me up", "posttime": "2021-08-09 03:58:18", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u541b\u4e3b\u5236,saved,\u7231\u5fb7\u534e", "title": "\u62ef\u6551\u541b\u4e3b\u5236\u7684\u201c\u86c7\u201d", "title_en": "The 'snake' who saved the monarchy", "transed": 1, "url": "https://unherd.com/2021/08/the-snake-who-saved-the-monarchy/", "via": "", "real_tags": ["\u541b\u4e3b\u5236", "saved", "\u7231\u5fb7\u534e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072175, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4eca\u5e74\u65e9\u4e9b\u65f6\u5019\uff0c\u6211\u53d1\u8868\u4e86\u4e00\u7bc7\u6587\u7ae0\uff0c\u5c55\u793a\u4e86\u6211\u4eec\u4f7f\u7528\u827e\u4f26\u671b\u8fdc\u955c\u9635\u5217\u5728 4.9 GHz \u9891\u7387\u4e0b\u5bf9\u4ed9\u540e\u5ea7 A \u548c\u5929\u9e45\u5ea7 A \u8fdb\u884c\u5e72\u6d89\u6210\u50cf\u7684\u7ed3\u679c\u3002\u63a5\u8fd1\u4e03\u6708\u5e95\uff0c\u6211\u51b3\u5b9a\u4ee5\u66f4\u9ad8\u7684\u9891\u7387\u5bf9\u5929\u9e45\u5ea7 A \u8fdb\u884c\u66f4\u591a\u7684\u5e72\u6d89\u89c2\u6d4b\uff0c\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u5206\u8fa8\u7387\u3002\u6211\u9009\u62e9\u4e86 8.45 GHz \u7684\u9891\u7387\uff0c\u56e0\u4e3a\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u6ca1\u6709\u5e72\u6270\u7684\u9891\u6bb5\uff08\u56e0\u4e3a\u5b83\u88ab\u5206\u914d\u7ed9\u6df1\u7a7a\u901a\u4fe1\uff09\uff0c\u5b83\u88ab\u5176\u4ed6\u65e0\u7ebf\u7535\u5929\u6587\u53f0\u4f7f\u7528\uff0c\u56e0\u6b64\u901a\u91cf\u5bc6\u5ea6\u53ef\u4ee5\u76f4\u63a5\u4e0e\u4ee5\u524d\u7684\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u5e76\u4e14\u56e0\u4e3a\u66f4\u9ad8\u968f\u7740\u9891\u7387\u7684\u589e\u52a0\uff0cATA \u4e0a\u65e7\u9988\u9001\u7684\u7075\u654f\u5ea6\u5f00\u59cb\u4e0b\u964d\u3002\u8fd9\u7bc7\u6587\u7ae0\u662f\u5bf9\u89c2\u5bdf\u548c\u7ed3\u679c\u7684\u603b\u7ed3\u3002\u4ee3\u7801\u548c\u6570\u636e\u5305\u542b\u5728\u5e16\u5b50\u7684\u672b\u5c3e\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u89c2\u5bdf\uff0c\u6211\u4f7f\u7528\u4e86\u6700\u8fd1\u6295\u5165\u4f7f\u7528\u7684 6 \u6839\u5929\u7ebf\u3002 USRP \u7684\u914d\u7f6e\u4e0e\u6211\u5728 3 \u6708\u4efd\u7684\u5e16\u5b50\u4e2d\u63cf\u8ff0\u7684\u76f8\u540c\uff0c\u56e0\u6b64\u4e00\u6b21\u53ea\u80fd\u5173\u8054\u4e00\u4e2a\u57fa\u7ebf\uff0c\u5e76\u4e14\u53ef\u4ee5\u5f62\u6210\u7684\u4e00\u7ec4\u57fa\u7ebf\u4ec5\u9650\u4e8e\u901a\u8fc7\u9009\u62e9\u53ef\u7528\u4e8e USRP1 \u7684\u5929\u7ebf\u83b7\u5f97\u7684\u90a3\u4e9b\u548c USRP2 \u53ef\u7528\u7684\u5929\u7ebf\u4e4b\u4e00\uff0c\u5982\u4e0b\u6240\u793a\uff1a J2007+404 \u4f5c\u4e3a\u4e3b\u76f8\u4f4d\u6821\u51c6\u5668\uff1b\u8fd9\u662f\u4e00\u4e2a\u88ab\u5217\u4e3a VLA \u6821\u51c6\u5668\u7684 2.85 Jy \u6e90 Cygnus A \u4e0e\u6821\u51c6\u5668 J2007+404 \u4ec5\u76f8\u8ddd 1.59 \u5ea6\u3002\u4e0b\u56fe\u53d6\u81ea VLASS 2-4 GHz VLA \u5929\u7a7a\u8c03\u67e5\u663e\u793a\u4e86\u4e24\u8005\u3002\u5929\u9e45\u5ea7 A \u4f4d\u4e8e\u9ed1\u5323\u5b50\u5185\uff0c\u56e0\u4e3a VLASS \u6392\u9664\u4e86\u975e\u5e38\u5f3a\u7684\u6e90\uff0c\u5e76\u4e14\u5728\u5929\u9e45\u5ea7 A \u7684\u5de6\u4fa7\u53ef\u4ee5\u770b\u5230 J2007+404\uff0c\u7531\u4e8e\u5176\u76f8\u5f53\u9ad8\u7684\u901a\u91cf\u5bc6\u5ea6\uff08\u4e0e\u6b64\u6c11\u610f\u8c03\u67e5\uff09\u3002\u8be5\u56fe\u50cf\u662f\u901a\u8fc7 VLASS2.1 HiPS \u6570\u636e\u7684 Web \u754c\u9762\u83b7\u5f97\u7684\uff0c\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u8f7b\u677e\u63a2\u7d22\u65e0\u7ebf\u7535\u5929\u7a7a\u3002\u6211\u4f7f\u7528\u4e86\u4e0e\u4e09\u6708\u4efd\u76f8\u540c\u7684 GNU Radio \u8f6f\u4ef6\u76f8\u5173\u5668\u3002\u8fd9\u5305\u542b\u5728 ata_interferometry Github \u5b58\u50a8\u5e93\u4e2d\u3002\u89c2\u5bdf\u5230\u7684\u5e26\u5bbd\u4e3a 40.96 MHz\uff0c\u4f7f\u7528 X \u548c Y \u6781\u5316\u3002\u6240\u6709\u6781\u5316\u81ea\u76f8\u5173\u548c\u4e92\u76f8\u5173\u90fd\u662f\u5b9e\u65f6\u8ba1\u7b97\u7684\uff0c\u5e76\u5728\u540e\u5904\u7406\u4e2d\u5206\u9636\u6bb5\u8fdb\u884c\uff0c\u5e76\u7b80\u5316\u4e3a\u5177\u6709 64 \u4e2a\u9891\u9053\u548c 1 \u79d2\u79ef\u5206\u65f6\u95f4\u7684 UVFITS \u6587\u4ef6\u3002\u89c2\u5bdf\u662f\u5728\u8fde\u7eed\u4e09\u5929\u5185\u8fdb\u884c\u7684\uff1a7 \u6708 23\u300124 \u65e5\u548c 25 \u65e5\u3002\u7b2c\u4e00\u5929\u4ec5\u5bf9 3C286 \u8fdb\u884c\u4e86\u5b8c\u6574\u7684\u8ddf\u8e2a\u89c2\u5bdf\u3002\u8fd9\u6b21\u89c2\u5bdf\u7684\u76ee\u7684\u662f\u6536\u96c6\u5c3d\u53ef\u80fd\u591a\u7684\u6570\u636e\u7528\u4e8e\u504f\u632f\u6821\u51c6\uff0c\u6b64\u5916\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u7cfb\u7edf\u7684\u68c0\u67e5\u3002\n\u7b2c\u4e8c\u5929\uff0c\u5bf9\u6240\u6709\u76ee\u6807\u8fdb\u884c\u89c2\u5bdf\uff0c\u987a\u5e8f\u5982\u4e0b\uff1a\u5929\u9e45\u5ea7A\u548cJ2007+404\u4e0a\u5347\u65f6\u4ea4\u66ff\u626b\u63cf\uff0c3C286\u4e0d\u9891\u7e41\u626b\u63cf\uff1b3C84\u4e0a\u5347\u65f6\uff0c\u626b\u63cf\u5929\u9e45\u5ea7A\u548cJ2007+\u7684\u56fe\u6848404\u7ee7\u7eed\uff0c\u4f463C286\u7684\u4e0d\u9891\u7e41\u626b\u63cf\u88ab3C84\u7684\u4e0d\u9891\u7e41\u626b\u63cf\u53d6\u4ee3 \u5f53\u5929\u9e45\u5ea7A\u548cJ2007+404\u8bbe\u7f6e\u65f6\uff0c3C84\u53c8\u89c2\u5bdf\u4e86\u4e00\u4e2a\u5c0f\u65f6\uff0c\u76ee\u7684\u662f\u4f7f\u7528\u8fd9\u6700\u540e\u4e00\u6bb5\u8fdb\u884c\u5e26\u901a\u6821\u51c6 \u4e0d\u5e78\u7684\u662f\uff0c\u6709\u4e00\u4e2a\u95ee\u9898\u5728\u5929\u9e45\u5ea7 A \u5347\u8d77\u4e4b\u524d\uff0c\u6574\u4e2a\u665a\u4e0a\u90fd\u6709\u89c2\u5bdf\u811a\u672c\uff0c\u56e0\u6b64\u4e22\u5931\u4e86\u51e0\u4e2a\u5c0f\u65f6\u7684\u6570\u636e\u3002\u7b2c\u4e09\u5929\u9075\u5faa\u76f8\u540c\u7684\u65f6\u95f4\u8868\uff0c\u89c2\u5bdf\u811a\u672c\u5df2\u7ecf\u66f4\u6b63\uff0c\u56e0\u6b64\u6536\u96c6\u4e86\u6240\u6709\u6570\u636e\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u6574\u6574\u4e09\u5929\u7684\u6821\u51c6\u80fd\u89c1\u5ea6\u5e45\u5ea6\u3002\u6309\u573a\u7740\u8272\uff0c\u9ed1\u8272\u4e3a 3C286\uff0c\u7c89\u7ea2\u8272\u4e3a J2007+404\uff0c\u6a59\u8272\u4e3a\u5929\u9e45\u5ea7 A\uff0c\u7eff\u8272\u4e3a 3C84\u3002\u8be5\u56fe\u663e\u793a\u4e86\u5149\u6e90\u4eae\u5ea6\u7684\u5de8\u5927\u5dee\u5f02\uff0c\u5929\u9e45\u5ea7 A \u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u4eae\u7684\u3002\u4f7f\u6821\u51c6\u5668\u9760\u8fd1\u901a\u91cf\u5bc6\u5ea6\u81f3\u5c11\u4e3a\u51e0 Jy \u7684\u79d1\u5b66\u76ee\u6807\u901a\u5e38\u5e76\u4e0d\u5bb9\u6613\uff0c\u8fd9\u5bf9\u4e8e\u4f7f\u7528 ATA 6.1 m \u789f\u5f62\u5929\u7ebf\u4ee5\u4e00\u6b21\u4ec5 40 MHz \u7684\u5e26\u5bbd\u548c\u4e00\u6761\u57fa\u7ebf\u8fdb\u884c\u89c2\u6d4b\u65f6\u83b7\u5f97\u826f\u597d\u7ed3\u679c\u662f\u5fc5\u8981\u7684.\u56e0\u6b64\uff0cJ2007+404 \u7684\u5b58\u5728\u4e0e\u5929\u9e45\u5ea7 A \u5982\u6b64\u63a5\u8fd1\u662f\u4e00\u4e2a\u5e78\u798f\u7684\u5de7\u5408\u3002\n3C84 \u662f\u8fc4\u4eca\u4e3a\u6b62\u6700\u5f3a\u7684\u7d27\u51d1\u578b\u6821\u51c6\u5668\u4e4b\u4e00\uff0c\u56e0\u6b64\u5b83\u5bf9\u4e8e\u5e26\u901a\u6821\u51c6\u548c\u5176\u4ed6\u53d7\u76ca\u4e8e\u9ad8 SNR \u7684\u6821\u51c6\u975e\u5e38\u6709\u7528\u3002\u6821\u51c6\u548c\u6210\u50cf\u5728 CASA 6.2.0 \u4e2d\u8fdb\u884c\u3002\u9996\u5148\uff0c\u4e00\u4e9b\u5e72\u6270\u6807\u8bb0\u662f\u7528 tfcrop \u5b8c\u6210\u7684\u3002\u7136\u540e\u624b\u52a8\u6807\u8bb0\u5728\u4f7f\u7528 msview \u68c0\u67e5\u5e45\u5ea6\u6216\u76f8\u4f4d\u65f6\u660e\u663e\u4e0d\u597d\u7684\u6570\u636e\u3002\u5728 Cygnus A \u8bbe\u7f6e\u4e4b\u540e\uff0c\u5728\u7b2c\u4e8c\u5929\u548c\u7b2c\u4e09\u5929\u7ed3\u675f\u65f6\u4f7f\u7528 3C84 \u7684\u626b\u63cf\u8fdb\u884c\u4e86\u4e24\u6b21\u5355\u72ec\u7684\u5e26\u901a\u6821\u51c6\u3002\u7ed3\u679c\u8bc1\u660e\u7b2c\u4e8c\u5929\u7684\u6821\u51c6\u8981\u597d\u5f97\u591a\uff0c\u56e0\u4e3a\u5728\u7b2c\u4e09\u5929\u51fa\u73b0\u4e86\u4e00\u4e9b\u5bfc\u81f4\u7075\u654f\u5ea6\u4e0b\u964d\u7684\u672a\u77e5\u95ee\u9898\u3002\u4e92\u76f8\u5173\u7684\u5e45\u5ea6\u7a81\u7136\u4e0b\u964d\uff0c\u800c\u81ea\u76f8\u5173\u7684\u5e45\u5ea6\u6ca1\u6709\u53d7\u5230\u5f71\u54cd\u3002\u6b64\u5916\uff0c\u80fd\u89c1\u5ea6\u7684\u65b9\u5dee\u663e\u7740\u589e\u52a0\u3002\u56e0\u6b64\uff0c\u9009\u62e9\u7b2c\u4e8c\u5929\u7684\u5e26\u901a\u89e3\u51b3\u65b9\u6848\u5e94\u7528\u4e8e\u6240\u6709\u6570\u636e\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u5e26\u901a\u89e3\u51b3\u65b9\u6848\u3002\u6b63\u5982\u6211\u5728 3 \u6708\u4efd\u7684\u5e16\u5b50\u4e2d\u6240\u8bf4\uff0c\u7531\u4e8e\u9010\u57fa\u7ebf\u626b\u63cf\uff0c\u4e0d\u53ef\u80fd\u4f7f\u7528 CASA \u8fdb\u884c\u5ef6\u8fdf\u6821\u51c6\u3002\u56e0\u6b64\uff0c\u5c0f\u7684\u5ef6\u8fdf\u88ab\u5e26\u901a\u76f8\u4f4d\u5438\u6536\u3002\u6709\u8da3\u7684\u662f\uff0c\u53c2\u8003\u5929\u7ebf 2j \u5728 X \u548c Y \u6781\u5316\u4e0a\u5177\u6709\u660e\u663e\u7684\u5ef6\u8fdf\u5dee\u5f02\uff0c\u800c\u5176\u4f59\u5929\u7ebf\u5177\u6709\u66f4\u76f8\u4f3c\u7684\u5ef6\u8fdf\u3002\u9664\u4e86\u6821\u51c6\u5e26\u901a\u4e4b\u5916\uff0c3C84 \u7684\u8fd9\u4e9b\u626b\u63cf\u8fd8\u7528\u4e8e\u6267\u884c\u4e0e\u65f6\u95f4\u65e0\u5173\u7684\u76f8\u4f4d\u6821\u51c6\uff0c\u7136\u540e\u5c06\u5176\u7528\u4f5c X \u548c Y \u504f\u632f\u4e4b\u95f4\u7684\u76f8\u4f4d\u504f\u79fb\u3002\u8fd9\u5141\u8bb8\u4ee5\u4e0e\u6781\u5316\u65e0\u5173\u7684\u65b9\u5f0f\u6267\u884c\u6240\u6709\u8fdb\u4e00\u6b65\u7684\u76f8\u4f4d\u6821\u51c6\uff0c\u4ece\u800c\u63d0\u9ad8 SNR\u3002\u63a5\u4e0b\u6765\uff0c\u5bf9\u6bcf\u4e2a\u7d27\u51d1\u578b\u6821\u51c6\u5668\u8fdb\u884c\u504f\u632f\u65e0\u5173\u76f8\u4f4d\u6821\u51c6\u3002\u5728\u5927\u591a\u6570\u89c2\u5bdf\u671f\u95f4\u624b\u52a8\u9009\u62e9\u6c42\u89e3\u95f4\u9694\uff0c\u4ee5\u4fbf\u4e0e 8 \u4e2a\u57fa\u7ebf\u5468\u671f\u5f88\u597d\u5730\u62df\u5408\u3002\n\u4e0b\u56fe\u663e\u793a\u4e86\u5c06\u8fd9\u79cd\u76f8\u4f4d\u6821\u51c6\u4ee5\u53ca\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u5e94\u7528\u4e8e\u4e09\u4e2a\u7d27\u51d1\u578b\u5149\u6e90 3C286\uff08\u9ed1\u8272\uff09\u3001J2007+404\uff08\u7c89\u8272\uff09\u548c 3C84\uff08\u7eff\u8272\uff09\u7684\u7ed3\u679c\u3002 J2007+404 \u76f8\u4f4d\u7684\u566a\u58f0\u5728\u7b2c\u4e09\u5929\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u7075\u654f\u5ea6\u4e0b\u964d\u5f88\u660e\u663e\u3002\u5728\u76f8\u4f4d\u6821\u51c6\u4e4b\u540e\uff0c\u5b8c\u6210\u5e45\u5ea6\u6821\u51c6\u3002\u8fd9\u662f\u4ee5\u504f\u632f\u76f8\u5173\u7684\u65b9\u5f0f\u8fdb\u884c\u7684\uff0c\u56e0\u4e3a\u4e24\u4e2a\u901a\u9053\u7684\u589e\u76ca\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002\u60f3\u6cd5\u662f\u4f7f\u7528 3C286 \u4f5c\u4e3a\u901a\u91cf\u5bc6\u5ea6\u6821\u51c6\u5668\u5e76\u5c06\u901a\u91cf\u523b\u5ea6\u8f6c\u79fb\u5230\u5176\u4ed6\u6821\u51c6\u5668\u3002\u4f46\u662f\uff0c\u6709\u4ee5\u4e0b\u4e24\u4e2a\u602a\u7656\u9700\u8981\u5904\u7406\u3002\u7b2c\u4e8c\u5929\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u7a7a\u7f3a\u6ca1\u6709\u6570\u636e\uff0c\u5c063C286\u548c\u5176\u4ed6\u6765\u6e90\u5206\u5f00\u3002\u8fd9\u610f\u5473\u7740 3C286 \u7684\u5e45\u5ea6\u6807\u5ea6\u4e0d\u80fd\u8f6c\u79fb\u5230\u5176\u4ed6\u6765\u6e90\uff0c\u56e0\u4e3a\u589e\u76ca\u5728\u90a3\u4e2a\u95f4\u9699\u671f\u95f4\u53ef\u80fd\u4f1a\u53d1\u751f\u4e00\u4e9b\u53d8\u5316\uff08\u5b9e\u9645\u4e0a\uff0c\u6b63\u786e\u7684\u5e45\u5ea6\u8f6c\u79fb\u8868\u660e\u5b83\u5df2\u7ecf\u53d1\u751f\u4e86\u53d8\u5316\uff09\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u4eca\u5929\u8981\u505a\u7684\u5c31\u662f\u4f7f\u75283C84\u4f5c\u4e3a\u5e45\u5ea6\u6807\u5ea6\uff0c\u5f3a\u5236\u6821\u51c6\u65f6\u7b2c\u4e09\u5929\u6d4b\u91cf\u7684\u901a\u91cf\u3002\u5728\u7b2c\u4e09\u5929\uff0c\u6211\u4eec\u9047\u5230\u4e86\u7075\u654f\u5ea6\u53d8\u5316\u7684\u95ee\u9898\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u80fd\u89c1\u5ea6\u5e45\u5ea6\u7a81\u7136\u4e0b\u964d\u3002\u66f4\u6539\u524d\u540e\u7684\u6bb5\u5206\u522b\u6821\u51c6\u548c\u4f20\u8f93\uff0c\u8fd9\u4f3c\u4e4e\u8fd0\u4f5c\u826f\u597d\u3002\u4e0b\u56fe\u663e\u793a\u4e86\u6bcf\u4e2a\u6821\u51c6\u5668\u7684\u6821\u51c6\u5e45\u5ea6\u3002\u4e0e\u7b2c\u4e8c\u5929\u548c\u7b2c\u4e09\u5929\u76f8\u6bd4\uff0c3C84 \u7684\u632f\u5e45\u53ef\u80fd\u7565\u6709\u4e0d\u540c\u3002\u8fd9\u662f\u7531\u4e0a\u9762\u89e3\u91ca\u7684\u7279\u6b8a\u6821\u51c6\u8fc7\u7a0b\u5f15\u8d77\u7684\uff0c\u4f46\u5b83\u662f\u6b21\u8981\u7684\u3002\u5bf9\u4e8e\u8fd9\u4e9b\u6e90\u4e2d\u7684\u6bcf\u4e00\u4e2a\uff0c\u90fd\u4f7f\u7528\u4e86\u7b2c\u4e8c\u5929 3C84 \u7684\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u4ee5\u53ca\u6765\u81ea\u5176\u81ea\u8eab\u7684\u5e45\u5ea6\u548c\u76f8\u4f4d\u6821\u51c6\u3002\u5bf9\u4e8e Cygnus A\uff0c\u5e26\u901a\u548c XY \u76f8\u4f4d\u504f\u79fb\u4e5f\u53d6\u81ea 3C84\uff0c\u5e45\u5ea6\u548c\u76f8\u4f4d\u6821\u51c6\u53d6\u81ea J2007+404\u3002\u6210\u50cf\u662f\u4f7f\u7528\u591a\u5c3a\u5ea6\u6e05\u6d01\u5b8c\u6210\u7684\uff0c\u53c2\u6570\u4e0e\u6211 3 \u6708\u4efd\u7684\u5e16\u5b50\u5927\u81f4\u76f8\u540c\u3002\u4f7f\u7528 4 \u5f27\u79d2\u7684\u50cf\u7d20\u5927\u5c0f\u3002\u4e0e\u90a3\u7bc7\u6587\u7ae0\u76f8\u6bd4\uff0c512\u00d7512 \u50cf\u7d20\u7684\u56fe\u50cf\u5927\u5c0f\u7528\u4e8e\u5bf9\u6574\u4e2a\u4e3b\u5149\u675f\u8fdb\u884c\u6210\u50cf\uff0c\u5c3d\u7ba1\u6211\u4eec\u4e0d\u5e0c\u671b\u5728\u6bcf\u4e2a\u573a\u4e2d\u770b\u5230\u8fdc\u79bb\u76f8\u4f4d\u4e2d\u5fc3\u7684\u4efb\u4f55\u5176\u4ed6\u7269\u4f53\u3002\n\u4e0b\u56fe\u663e\u793a\u4e86 Cygnus A \u7684 UV \u8986\u76d6\u8303\u56f4\u3002\u8986\u76d6\u8303\u56f4\u5927\u7ea6\u5728 0.2k\u03bb \u5230 7\u03bb \u4e4b\u95f4\uff0c\u5bf9\u5e94\u4e8e 30 \u5f27\u79d2\u548c 17 \u5f27\u5206\u4e4b\u95f4\u7684\u5206\u8fa8\u7387\u3002\u4e0b\u56fe\u663e\u793a\u4e86 (U,V) \u7684\u5e45\u5ea6\u4e0e\u6a21\u91cf\u7684\u5173\u7cfb\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u6709\u51e0\u4e2a\u57fa\u7ebf\u6b63\u5728\u63a2\u6d4b Cygnus A \u53ef\u89c1\u6027\u7684\u7b2c\u4e00\u4e2a\u96f6\u70b9\u3002\u5728\u4e00\u4e9b\u57fa\u7ebf\u4e2d\uff0c\u6211\u4eec\u770b\u5230\u8fd9\u6761\u7ebf\u662f\u53cc\u500d\u7684\u3002\u8fd9\u4e24\u5929\u7684\u6bcf\u4e00\u5929\u90fd\u6709\u4e00\u4e9b\u4e0d\u540c\u7684\u589e\u76ca\u6821\u51c6\u3002\u8fd9\u5c06\u901a\u8fc7\u6210\u50cf\u540e\u7684\u81ea\u6821\u51c6\u6765\u89e3\u51b3\u3002\u5bf9\u4e8e\u7d27\u51d1\u6e90\uff0c\u9996\u5148\u5728\u6ca1\u6709\u591a\u6b21\u6e05\u6d01\u8fed\u4ee3\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u56fe\u50cf\u4ee5\u751f\u6210\u6a21\u578b\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u4f4d\u548c\u5e45\u5ea6\u81ea\u6821\u51c6\uff0c\u5e76\u4e14\u901a\u8fc7\u66f4\u591a\u6b21\u8fed\u4ee3\u6e05\u6d01\u7b2c\u4e8c\u5e45\u56fe\u50cf\u3002\u56fe\u50cf\u4e0d\u662f\u5f88\u6709\u8da3\uff0c\u56e0\u4e3a\u6765\u6e90\u5c1a\u672a\u89e3\u6790\uff0c\u4f46\u6210\u50cf\u662f\u68c0\u67e5\u4e00\u5207\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u7684\u597d\u65b9\u6cd5\u3002\u5bf9\u4e8eCygnus A\uff0c\u9996\u5148\u5bf9\u56fe\u50cf\u8fdb\u884c\u6e05\u6d17\uff0c\u7136\u540e\u8fdb\u884c\u76f8\u4f4d\u81ea\u6821\u51c6\uff0c\u518d\u8fdb\u884c\u65b0\u7684\u6e05\u6d01\u56fe\u50cf\uff0c\u6700\u540e\u5bf9\u65b0\u56fe\u50cf\u8fdb\u884c\u76f8\u4f4d\u548c\u5e45\u5ea6\u81ea\u6821\u51c6\uff0c\u4ece\u800c\u751f\u6210\u6700\u7ec8\u7684\u81ea\u6821\u51c6\u56fe\u50cf.\u6bcf\u4e2a\u56fe\u50cf\u7684 SNR \u5982\u4e0b\u6240\u793a\u3002\u8fd9\u88ab\u8ba1\u7b97\u4e3a\u6700\u5927\u50cf\u7d20\u4eae\u5ea6\u4e0e\u4e0d\u5305\u542b\u5bf9\u8c61\u7684\u533a\u57df\u4e2d\u7684 RMS \u7684\u5546\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u52303C84\u548cCygnus A\u7684SNR\u5728\u81ea\u6821\u51c6\u540e\u6709\u5f88\u5927\u7684\u63d0\u9ad8\u3002\u7531\u4e8e\u8fd9\u4e9b\u7269\u4f53\u975e\u5e38\u660e\u4eae\uff0c\u56fe\u50cf SNR \u4e3b\u8981\u53d7\u6821\u51c6\u8bef\u5dee\u7684\u9650\u5236\u3002 3C84.image SNR\uff1aSNR 163.433C84_selfcal1.image\uff1a406.753C286.image SNR\uff1aSNR 409.763C286_selfcal1.image\uff1a474.12J2007 + 404.image SNR\uff1a182.80J2007 + 404_selfcal1.image SNR\uff1aSNR 189.06CygA.image\uff1a168.43CygA_selfcal1.image SNR : 230.08CygA_selfcal2.image SNR: 539.46 \u4e0b\u56fe\u663e\u793a\u4e86 Cygnus A \u7684\u56fe\u50cf\u3002\u6211\u4eec\u53ef\u4ee5\u6e05\u695a\u5730\u770b\u5230\u53cc\u6e90\u7ed3\u6784\u3002\n\u653e\u5927\u6b64\u56fe\u50cf\u5e76\u6dfb\u52a0\u7b49\u9ad8\u7ebf\u56fe\u53ef\u663e\u793a\u66f4\u591a\u7ec6\u8282\u3002\u8f6e\u5ed3\u8bbe\u7f6e\u4e3a 2.5\u30015\u300110\u300120\u300130\u300140\u300150\u300160\u300170\u300180 \u548c 90% \u7684\u6c34\u5e73\u3002\u5728\u4e24\u4e2a\u6ce2\u74e3\u4e4b\u95f4\u7684\u4e2d\u5fc3\u90e8\u5206\u6709\u5927\u7ea6 3 Jy/\u5149\u675f\u7684\u901a\u91cf\u3002\u8fd9\u660e\u663e\u9ad8\u4e8e\u672c\u5e95\u566a\u58f0\uff0c\u5b83\u662f Jy/\u5149\u675f\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u5b83\u63d0\u4f9b\u4e86\u8bc1\u636e\uff0c\u8868\u660e\u6211\u4eec\u6b63\u5728\u68c0\u6d4b\u5230\u4e0e\u6d3b\u52a8\u661f\u7cfb\u4e2d\u7684\u8d85\u5927\u8d28\u91cf\u9ed1\u6d1e\u76f8\u5bf9\u5e94\u7684\u5c0f\u7684\u4e2d\u5fc3\u6210\u5206\u3002\u4e0b\u56fe\u53d6\u81ea\u6b64\u9875\u9762\uff0c\u663e\u793a\u4e86\u4f7f\u7528 VLA \u5728 5 GHz \u4e0b\u5b8c\u6210\u7684\u56fe\u50cf\uff0c\u5206\u8fa8\u7387\u63d0\u9ad8\u4e86 60 \u500d\uff0c\u5e76\u6e05\u695a\u5730\u663e\u793a\u4e86\u4e2d\u5fc3\u7ec4\u4ef6\u3002\u5929\u9e45\u5ea7 A \u56fe\u50cf\u4e2d\u7684\u603b\u901a\u91cf\u5bc6\u5ea6\u4e3a 201.6 Jy\uff0c\u6700\u5927\u4eae\u5ea6\u4e3a 79.7 Jy/\u5149\u675f\u3002\u6211\u5e0c\u671b\u5229\u7528\u8fd9\u4e9b\u89c2\u6d4b\u6765\u7814\u7a76\u5929\u9e45\u5ea7 A \u7684\u6781\u5316\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u5929\u4e13\u95e8\u5bf9 3C286 \u8fdb\u884c\u5168\u8f68\u9053\u89c2\u6d4b\u7684\u539f\u56e0\u3002\u4f46\u662f\uff0c\u6211\u4e00\u76f4\u65e0\u6cd5\u83b7\u5f97\u4ee4\u4eba\u6ee1\u610f\u7684\u504f\u632f\u6821\u51c6\u3002\u7531\u4e8e\u5927\u6cc4\u6f0f\u548c\u4f4e\u4fe1\u566a\u6bd4\uff0c\u5f88\u96be\u68c0\u6d4b\u5341\u5b57\u624b\u4e2d\u7684\u6781\u5316\u7279\u5f81\u3002\u6b64\u5916\uff0c\u7531\u4e8e\u67d0\u4e9b\u672a\u77e5\u539f\u56e0\uff0c\u5e73\u884c\u624b\u76f8\u5bf9\u5e45\u5ea6\u7684\u53d8\u5316\u5728\u4e0d\u540c\u57fa\u7ebf\u4e4b\u95f4\u4f3c\u4e4e\u4e0d\u592a\u4e00\u81f4\u3002\u6211\u4ec0\u81f3\u4e00\u76f4\u5728\u5173\u6ce8\u4f7f\u7528 ALMA \u5bf9 3C286 \u8fdb\u884c\u504f\u632f\u6210\u50cf\u7684 CASA \u6559\u7a0b\uff08\u56e0\u4e3a ALMA \u4e5f\u4f7f\u7528\u7ebf\u6027\u504f\u632f\u57fa\u7840\uff0c\u4e0e VLA \u4e0d\u540c\uff09\uff0c\u8bd5\u56fe\u6539\u8fdb\u6211\u7684\u6280\u672f\u3002\u4f46\u662f\uff0c\u5728\u5c1d\u8bd5\u4e86\u4e00\u6bb5\u65f6\u95f4\u7684\u6570\u636e\u540e\uff0c\u6211\u8ba4\u4e3a\u5b83\u4e0d\u591f\u597d\uff0c\u9700\u8981\u6536\u96c6\u66f4\u597d\u7684\u6570\u636e\u3002\u672c\u6587\u4e2d\u7528\u4e8e\u76f8\u5173\u548c\u5b9a\u76f8\u7684\u4ee3\u7801\u662f\u6765\u81ea ata_interferometry \u5b58\u50a8\u5e93\u7684\u5e38\u7528 GNU Radio FX \u8f6f\u4ef6\u76f8\u5173\u5668\u7ba1\u9053\u3002 CASA \u4e2d\u7684\u6821\u51c6\u548c\u6210\u50cf\u662f\u4f7f\u7528\u6b64\u811a\u672c\u5b8c\u6210\u7684\u3002\u8be5\u6570\u636e\u5df2\u5728 Zenodo \u4e2d\u4f5c\u4e3a\u6570\u636e\u96c6\u201cCygnus A 8.45 GHz \u5e72\u6d89\u6d4b\u91cf\u89c2\u6d4b\u4e0e\u827e\u4f26\u671b\u8fdc\u955c\u9635\u5217\u201d\u53d1\u5e03\u3002", "note_en": "Earlier this year, I published a post showing our results of the  interferometric imaging of Cassiopeia A and Cygnus A at 4.9 GHz with the Allen Telescope Array. Near the end of July, I decided to perform more interferometric observations of Cygnus A at a higher frequency, in order to obtain better resolution. I chose a frequency of 8.45 GHz because it is usually a band clean of interference (since it is allocated to deep space communications), it is used by other radio observatories, so flux densities can be compared directly with previous results, and because going higher up in frequency the sensitivity of the old feeds at ATA starts to decrease.\n This post is a summary of the observations and results. The code and data is included at the end of the post.\n   For these observations, I used 6 antennas that have recently entered into service. The configuration of the USRPs is the same as I described in my  post from March, so only one baseline can be correlated at a time and the set of baselines that can be formed is limited to those obtained by choosing one of the antennas available for USRP1 and one of the antennas available for USRP2, as follows:\n    J2007+404 as primary phase calibrator; this is a 2.85 Jy source  listed as a VLA calibrator\n Cygnus A is located at only 1.59 degrees separation from the calibrator J2007+404. The image below, taken from the  VLASS 2-4 GHz VLA sky survey shows both of them. Cygnus A is inside the black box, since VLASS excludes very strong sources, and J2007+404 can be seen towards the left of Cygnus A, showing large sidelobes in this  quicklook image due to its rather high flux density (compared with the sensitivity of this survey). This image has been obtained with the web interface to the  VLASS2.1 HiPS data, which allows us to explore the radio sky easily.\n  I used the same GNU Radio software correlator as back in March. This is contained in the  ata_interferometry Github repository. The observed bandwidth was 40.96 MHz, using the X and Y polarizations. All the polarimetric autocorrelations and cross-correlations were computed in real time, and phased in post-processing and reduced to UVFITS files with 64 frequency channels and 1 second integration time.\n  The observations were carried out during three consecutive days: 23, 24 an 25 July. The first day was a full track observation of 3C286 only. The goal of this observation was to gather as much data as possible for polarization calibration, and additionally to serve as a check of the system.\n The second day, the observation of all the targets was carried out, following this order:\n When Cygnus A and J2007+404 rose, they were scanned alternatively, with infrequent scans of 3C286\n When 3C84 rose, the pattern of scanning Cygnus A and J2007+404 continued, but the infrequent scans of 3C286 were replaced by infrequent scans of 3C84\n When Cygnus A and J2007+404 set, 3C84 was observed for an hour more, with the goal of using this final segment for bandpass calibration\n Unfortunately, there was a problem with the observation script throughout the night, before Cygnus A rose, so several hours of data were lost. The third day the same schedule was followed, with the observation script already corrected, so all the data was gathered.\n The figure below shows the calibrated visibility amplitudes of the whole three days. Colouring is by field, with 3C286 in black, J2007+404 in pink, Cygnus A in orange, and 3C84 in green.\n  The plot shows the great differences in brightness of the sources, with Cygnus A being by far the brightest. It is often not easy to get calibrators close to the science target that have a flux density of at least a few Jy, which is necessary for good results with the ATA 6.1 m dishes observing with only 40 MHz of bandwidth and one baseline at a time. Therefore, the presence of J2007+404 so close to Cygnus A is a happy coincidence.\n 3C84 is by far one of the strongest compact calibrators, so it is quite useful for bandpass calibration and other calibrations that benefit from high SNR.\n  Calibration and imaging was performed in  CASA 6.2.0. First, some flagging of interference was done with  tfcrop. Then data that was visibly bad when examining the amplitudes or phases with  msview was manually flagged.\n Two separated bandpass calibrations were performed using the scans of 3C84 at the end of the second and third day, after Cygnus A had set. The calibration from the second day turned out to be much better because there was some unknown problem during the third day that caused a loss in sensitivity. The amplitude of the cross-correlations decreased suddenly, while the amplitude of the autocorrelations wasn\u2019t affected. Moreover, the variance of the visibilities increased significantly. Therefore, the bandpass solution from the second day was chosen to be applied to all the data.\n The figures below show the bandpass solutions. As I remarked in my post from March, it is not possible to use CASA for a delay calibration because of the baseline-by-baseline scans. Therefore, the delays, which are small, are absorbed by the bandpass phase.\n  It is interesting that the reference antenna, 2j, has a noticeable delay difference in the X and Y polarizations, whereas the rest of the antennas have more similar delays.\n   Besides calibrating the bandpass, these scans of 3C84 are used to perform a time-independent phase calibration, which is then used as the phase offset between the X and Y polarizations. This allows all further phase calibrations to be performed in a polarization-independent way, which increases the SNR.\n Next, a polarization-independent phase calibration is done on each compact calibrator. The solution intervals are chosen manually during most of the observations in order to fit well with the 8 baseline cycle.\n The figure below shows the results of applying this phase calibration, together with the bandpass and X-Y phase offset to the three compact sources 3C286 (black), J2007+404 (pink) and 3C84 (green). The decrease in sensitivity at some point during the third day is apparent in the noise in the phase of J2007+404.\n  After phase calibration, amplitude calibration is done. This is carried out in a polarization-dependent way, since the gains of the two channels can change independently. The idea is to use 3C286 as the flux density calibrator and to transfer the flux scale to the other calibrators. However, there are the following two quirks to handle.\n On the second day there is a long gap without data, separating 3C286 and the other sources. This means that the amplitude scale from 3C286 can\u2019t be transferred to the other sources, since the gains can have changed somewhat during that gap (and in fact the correct amplitude transfer shows that it has changed). Therefore, what we do for this day is to use 3C84 as the amplitude scale, forcing the flux measured on the third day during calibration.\n On the third day we have the problem with the change in sensitivity, that causes a sudden decrease of visibility amplitudes. The segments before and after the change are calibrated and transferred separately, and this seems to work well.\n The figures below show the calibrated amplitudes of each of the calibrators. There is perhaps a slight difference in amplitude for 3C84 comparing the second and third days. This is caused by the peculiar calibration process explained above, but it is something minor.\n    For each of these sources, the bandpass and X-Y phase offset from 3C84 on the second day and the amplitude and phase calibration from itself are used. For Cygnus A, the bandpass and X-Y phase offset are also taken from 3C84 and the amplitude and phase calibration is taken from J2007+404.\n  Imaging is done using multi-scale cleaning and roughly the same parameters as in my post from March. A pixel size of 4 arcseconds is used. In contrast to that post, an image size of 512\u00d7512 pixels is used to image the whole primary beam, though we don\u2019t expect to see any other objects away from the phase centre in each field.\n The figure below shows the UV coverage for Cygnus A. There is coverage between approximately 0.2k\u03bb to 7\u03bb, which corresponds to resolutions between 30 arcsec and 17 arcmin.\n  The next figure shows the amplitude versus modulus of (U,V). We can see that several baselines are probing the first nulls of the visibility of Cygnus A. In some of the baselines we see that the line is double. There are somewhat different gain calibrations on each of the two days. This will be fixed with self-calibration after imaging.\n  For the compact sources, first an image is done without many clean iterations to generate a model, then phase and amplitude self-calibration is made, and a second image is cleaned with more iterations. The images are not very interesting, since the sources are unresolved, but imaging is a good way to check that everything is working correctly.\n For Cygnus A, first an image is cleaned, then a phase self-calibration is done, a new clean image is done, and finally a phase and amplitude self-calibration is done with the new image, thus producing a final self-calibrated image.\n The SNR for each of the images is shown below. This is computed as the quotient of the maximum pixel brightness and the RMS in an area that does not contain the object. We can see how the SNRs of 3C84 and Cygnus A increase greatly after self-calibration. Since these objects are very bright, the image SNR is mainly limited by calibration errors.\n 3C84.image SNR: 163.433C84_selfcal1.image SNR: 406.753C286.image SNR: 409.763C286_selfcal1.image SNR: 474.12J2007+404.image SNR: 182.80J2007+404_selfcal1.image SNR: 189.06CygA.image SNR: 168.43CygA_selfcal1.image SNR: 230.08CygA_selfcal2.image SNR: 539.46\n     The next figure shows the image for Cygnus A. We can clearly see the double source structure.\n  A zoom to this image and the addition of a contour plot reveal more detail. The contours are set at 2.5, 5, 10, 20, 30, 40, 50, 60, 70, 80 and 90% levels.\n  In the central part between the two lobes there is a flux of around 3 Jy/beam. This is significantly higher than the noise floor, which is a fraction of a Jy/beam. It provides evidence that we are detecting the small central component, that corresponds to the supermassive black hole in the active galaxy. The figure below, taken from  this page, shows an image done with VLA at 5 GHz that has 60 times more resolution and shows the central component clearly.\n  The total flux density in the image of Cygnus A is 201.6 Jy, and the maximum brightness is 79.7 Jy/beam.\n  I hoped to use these observations to study the polarization of Cygnus A. This is the reason why the first day was devoted to a full track observation of 3C286. However, I have not been able to obtain a satisfactory polarization calibration. It is difficult to detect the polarized signature in the cross-hands due to the large leakages and low SNR. Moreover, the changes in the relative amplitudes of the parallel-hands do not seem so consistent between different baselines, for some unknown reason.\n I have even been following the  CASA tutorial for polarimetric imaging of 3C286 with ALMA (since ALMA also uses a linear polarization basis, unlike the VLA), trying to improve my techniques. However, after trying to do something with the data for a while, I think that it is not good enough, and better data needs to be gathered.\n  The code used in this post for correlation and phasing is the usual GNU Radio FX software correlator pipeline from the  ata_interferometry repository. The calibration and imaging in CASA was done with  this script.\n The data has been published as the dataset \u201c Cygnus A 8.45 GHz interferometric observation with Allen Telescope Array\u201d in  Zenodo.", "posttime": "2021-08-09 03:57:55", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "cygnus,imaging", "title": "\u4f7f\u7528 ATA \u4ee5 8.45 GHz \u5bf9 Cygnus a \u6210\u50cf", "title_en": "Imaging Cygnus a at 8.45 GHz with ATA", "transed": 1, "url": "https://destevez.net/2021/08/imaging-cygnus-a-at-8-45-ghz-with-ata/", "via": "", "real_tags": ["cygnus", "imaging"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072174, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5728\u5de5\u4f5c\u4e2d\u5e7f\u53d7\u8d5e\u8a89\uff0c\u56e0\u4e3a\u6211\u80fd\u591f\u6253\u5f00\u8bb8\u591a\u6d4f\u89c8\u5668\u9009\u9879\u5361\u3002 \uff08\u81f3\u5c11\uff0c\u8fd9\u662f\u6211\u4ece\u201c\u5929\u54ea\uff0c\u4f19\u8ba1\uff0c\u770b\u770b\u4f60\u7684\u6d4f\u89c8\u5668\uff01\u201d\u7684\u9891\u7e41\u547c\u558a\u4e2d\u5f97\u5230\u7684\u7ed3\u679c\uff09\u5c3d\u7ba1\u5982\u6b64\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\u503c\u5f97\u8ba9\u6211\u7684\u6807\u7b7e\u603b\u6570\u5012\u8ba1\u65f6\u3002\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\uff0c\u6211\u6253\u5f00\u4e86\u6807\u7b7e\u3002\u6211\u6b63\u5728\u5904\u7406\u4f46\u5e94\u8be5\u5728\u67d0\u4e2a\u65f6\u5019\u5b8c\u6210\u7684\u4e8b\u60c5 \u8fd9\u91cc\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u4e00\u65e6\u9009\u9879\u5361\u7684\u6570\u91cf\u8db3\u591f\u5927\uff0c\u201c\u6e05\u7406 uptabs\u201d\u5c31\u4f1a\u4ece\u201c\u627e\u51fa\u54ea\u4e2a\u9009\u9879\u5361\u662f\u54ea\u79cd\u9009\u9879\u5361\u201d\u7684\u6574\u4e2a\u6b65\u9aa4\u5f00\u59cb. \u6211\u53ef\u4ee5\u5173\u95ed\u5b83\uff0c\u56e0\u4e3a\u6211\u5df2\u7ecf\u5b8c\u6210\u4e86\u5417\uff1f\u8fd9\u662f\u6211\u5e94\u8be5\u9605\u8bfb\u7684\u4e1c\u897f\u5417\uff1f\u5f88\u5feb\uff1f\u603b\u6709\u4e00\u5929\uff1f\u6211\u9700\u8981\u6539\u8fdb\u6211\u7684\u5b9e\u65f6\u4e60\u60ef\uff1a\u5b8c\u6210\u540e\u5173\u95ed\u4e8b\u60c5\uff0c\u6309\u76ee\u7684\u5c06\u4e8b\u60c5\u5206\u7ec4\u7b49\u7b49\u3002\u4e0d\u8fc7\uff0c\u5728\u90a3\u4e4b\u524d\uff0c\u6211\u9700\u8981\u770b\u770b\u6211\u4ec0\u4e48\u65f6\u5019\u8ba9\u4e8b\u60c5\u5931\u63a7\u4e86\u3002\u591a\u5e74\u6765\uff0c\u6211\u4e00\u76f4\u8ba4\u4e3a\uff0c\u201c\u6211\u5e94\u8be5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u53ef\u89c6\u5316\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u3002\u201d\u6709\u4e00\u6b21\u6211\u4ec0\u81f3\u5199\u4e86\u4e00\u4e9b\u7a0b\u5e8f\u6765\u63d0\u4f9b\u5e2e\u52a9\uff0c\u4f46\u5927\u7ea6\u4e00\u5468\u524d\u6211\u7ec8\u4e8e\u5b8c\u6210\u4e86\u6574\u4e2a\u4e8b\u60c5\u3002\u5f53\u6211\u53d1\u63a8\u6587\u65f6\uff0c\u6211\u6536\u5230\u4e86\u4e00\u4e9b\u201c\u4f60\u662f\u600e\u4e48\u505a\u5230\u7684\uff1f\u201d\uff0c\u6240\u4ee5\u6211\u60f3\u6211\u4f1a\u5199\u4e0b\u6765\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u9664\u4e86\u6709\u70b9\u4e0d\u3002\u5982\u679c\u4f60\u770b\u4e0d\u51fa\u6765\uff0c\u8fd9\u5f20\u56fe\u662f\u7531 Grafana \u751f\u6210\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u6570\u636e\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u53ef\u4ee5\u751f\u6210\u5404\u79cd\u7cfb\u7edf\u6570\u636e\u7684\u56fe\u8868\u548c\u8bb8\u591a\u5176\u4ed6\u53ef\u89c6\u5316\u3002\u6240\u4ee5\uff0c\u6211\u9700\u8981\u8bbe\u7f6e Grafana\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u6211\u4f7f\u7528\u4e86\u4ed6\u4eec\u7684\u514d\u8d39\u4e91\u6258\u7ba1\uff0c\u4f46\u5728 Linode \u4e0a\u8bbe\u7f6e Grafana \u4e5f\u975e\u5e38\u7b80\u5355\u3002\u57fa\u672c\u4e0a\uff0c\u60a8\u5b89\u88c5\u5e76\u544a\u8bc9\u5b83\u4ece\u54ea\u91cc\u83b7\u53d6\u6570\u636e\u3002\u6709\u5f88\u591a Grafanatutorials\u3002\u6211\u7684 Grafana \u6307\u5411 Prometheus\u3002 Prometheus \u662f\u4e00\u4e2a\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u5e93\uff0c\u5b83\u901a\u8fc7\u70b9\u51fb HTTP \u7aef\u70b9\u6765\u6536\u96c6\u6570\u636e\u3002\u4e3a\u4e86\u5f7b\u5e95\u7b80\u5316\uff0c\u5982\u679c\u60a8\u5e0c\u671b\u5e94\u7528\u7a0b\u5e8f\u516c\u5f00\u8981\u6536\u96c6\u7684\u6307\u6807\u5e76\u5728\u4ee5\u540e\u8fdb\u884c\u5206\u6790\uff0c\u60a8\u53ef\u4ee5\u4e3a\u5176\u63d0\u4f9b HTTP \u4fa6\u542c\u5668\uff0c\u8be5\u4fa6\u542c\u5668\u4ee5\u7279\u5b9a\u683c\u5f0f\u56de\u590d\u6570\u636e\u3002\u6709\u5f88\u591a Prometheustutorials\u3002\u6211\u9700\u8981\u505a\u7684\u662f\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u63d0\u4f9b tabcounts \u7684 HTTP \u670d\u52a1\u3002\u6211\u9009\u62e9\u4e86\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u63d0\u4f9b\u8be5\u8ba1\u6570\uff0c\u610f\u601d\u662f\u8fd9\u6837\u7684\u54cd\u5e94\uff1a\n\u51e0\u5e74\u524d\uff0c\u5f53\u6211\u6700\u521d\u8003\u8651\u8fd9\u6837\u505a\u65f6\uff0c\u6211\u4f7f\u7528\u7684\u662f Firefox\u3002\u6211\u503e\u5411\u4e8e\u6bcf\u9694\u51e0\u5e74\u5728 Chrome \u548c Firefox \u4e4b\u95f4\u6765\u56de\u5207\u6362\u3002\u5728 Firefox \u4e2d\uff0c\u83b7\u53d6\u6807\u7b7e\u8ba1\u6570\u975e\u5e38\u5bb9\u6613\u3002\u5728\u914d\u7f6e\u6587\u4ef6\u76ee\u5f55\u4e2d\uff0c\u6709\u4e00\u4e2a\u540d\u4e3a sessionstore-backups/recovery.jsonlz4 \u4e4b\u7c7b\u7684\u6587\u4ef6\u3002\u5b83\u7684\u786e\u5207\u4f4d\u7f6e\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u6539\u53d8\uff0c\u4f46\u901a\u5e38\u5728\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4e2d\u6709\u4e00\u4e2a JSON \u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb\u8be5\u6587\u4ef6\u4ee5\u67e5\u770b\u9009\u9879\u5361\u3002 Chrome \u4ee5\u4e00\u79cd\u770b\u4f3c\u4ee4\u4eba\u8ba8\u538c\u7684\u4e8c\u8fdb\u5236\u683c\u5f0f\u5b58\u50a8\u5176\u4f1a\u8bdd\uff0c\u79f0\u4e3a SSNS\u3002\u6211\u770b\u7740\u51b3\u5b9a\u5e76\u547b\u541f\u7740\u3002\u6211\u77e5\u9053\u6211\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u6d4f\u89c8\u5668\u6269\u5c55\u7a0b\u5e8f\u6765\u83b7\u53d6\u6807\u7b7e\u8ba1\u6570\uff0c\u4f46\u6211\u5bf9\u4e24\u4ef6\u4e8b\u6709\u4e00\u79cd\u6a21\u7cca\u7684\u4e0d\u5b89\u611f\u3002\u9996\u5148\uff0c\u6211\u4e0d\u786e\u5b9a\u6211\u662f\u5426\u6709\u529e\u6cd5\u5728 Chrome \u4e2d\u5d4c\u5165\u7f51\u7edc\u670d\u52a1\u5668\u6765\u63d0\u4f9b\u8fd9\u4e9b\u6570\u636e\u3002\u8fd9\u610f\u5473\u7740\u6211\u60f3\u5c06\u6570\u636e\u5199\u5165\u6587\u4ef6\u4ee5\u901a\u8fc7\u5176\u4ed6\u65b9\u5f0f\u4f5c\u4e3a\u670d\u52a1\u5668\u3002\u8fd9\u5f15\u8d77\u4e86\u6211\u7684\u7b2c\u4e8c\u4e2a\u62c5\u5fe7\uff1a\u6211\u6000\u7591\u6211\u662f\u5426\u80fd\u591f\u53ef\u9760\u5730\u5c06\u9009\u9879\u5361\u8ba1\u6570\u4ece\u6269\u5c55\u5199\u5165\u6587\u4ef6\u3002\u4e0d\u8fc7\uff0c\u6211\u6709\u4e00\u4e2a\u95ea\u73b0\u7684\u7075\u611f\u3002\u5982\u679c\u51fa\u4e8e\u67d0\u79cd\u4ec1\u6148\uff0cChrome \u53ef\u4ee5\u901a\u8fc7 AppleScript \u5b9e\u73b0\u81ea\u52a8\u5316\uff0c\u6211\u53ef\u4ee5\u8bd5\u4e00\u8bd5\u3002\u6211\u6253\u5f00\u4e86 macOSScript \u7f16\u8f91\u5668\uff0c\u6309 Cmd-Shift-O \u5230\u201c\u6253\u5f00\u5b57\u5178\u201d\uff0c\u7136\u540e\u5bfb\u627e GoogleChrome\u3002\u5b83\u5728\u90a3\u91cc\uff01\u5b83\u7684\u81ea\u52a8\u5316\u5957\u4ef6\u5f88\u5c0f\uff0c\u4f46\u5b83\u66b4\u9732\u4e86\u7a97\u53e3\u548c\u9009\u9879\u5361\u3002\u6211\u80fd\u591f\u7f16\u5199\u8fd9\u4e2a AppleScript\uff1a\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u201cGoogle Chrome\u201d\u6b63\u5728\u8fd0\u884c\uff0c\u5219\u5c06 tabcount \u8bbe\u7f6e\u4e3a 0\uff0c\u7136\u540e\u544a\u8bc9\u5e94\u7528\u7a0b\u5e8f\u201cGoogle Chrome\u201d\u5728 Windows \u4e2d\u91cd\u590d w \u5c06 tabcount \u8bbe\u7f6e\u4e3a tabcount +\uff08w \u7684\u6807\u7b7e\u8ba1\u6570\uff09 end repeat end tellend \u5982\u679c AppleScript \u662f\u5f88\u5947\u602a\uff0c\u4f46\u6211\u8fc7\u53bb\u5728\u5c06\u5b83\u7528\u4e8e\u8bb8\u591a\u5c0f\u4efb\u52a1\u65b9\u9762\u53d6\u5f97\u4e86\u4e0d\u9519\u7684\u6210\u529f\u3002\u73b0\u5728\uff0c\u6211\u503e\u5411\u4e8e\u505a\u7684\u662f\u8bc1\u660e\u67d0\u4e9b\u4e1c\u897f\u53ef\u4ee5\u5728 AppleScript \u4e2d\u5de5\u4f5c\uff0c\u7136\u540e\u4f7f\u7528 JXA \u5c06\u5176\u79fb\u690d\u5230 JavaScript\u3002 JXA \u662f\u201c\u7528\u4e8e\u81ea\u52a8\u5316\u7684 JavaScript\u201d\uff0c\u5b83\u53ea\u662f\u201c\u5982\u679c\u4f60\u53ef\u4ee5\u7f16\u5199 JavaScript \u800c\u4e0d\u662f AppleScript \u6765\u505a\u540c\u6837\u7684\u4e8b\u60c5\u4f1a\u600e\u6837\uff1f\u201d\u8fd9\u975e\u5e38\u5438\u5f15\u4eba\uff01JavaScript \u662f\u4e00\u79cd\u4e0d\u90a3\u4e48\u5947\u602a\u7684\u8bed\u8a00\uff0c\u60a8\u53ef\u4ee5\u5c06 macOS \u81ea\u52a8\u5316\u4e0e\u60a8\u7528 JavaScript \u7f16\u5199\u7684\u5176\u4ed6\u4ee3\u7801\u7ed3\u5408\u8d77\u6765\u3002\u4e0d\u8fc7\uff0c\u5b83\u5e76\u4e0d\u5b8c\u7f8e\u3002\u7528\u6765\u8868\u793a AppleScriptableentities \u7684\u5bf9\u8c61\u975e\u5e38\u7b28\u62d9\u3002\u4ed6\u4eec\u4e0d\u8ba9\u4f60\u5f97\u5230\u4ed6\u4eec\u7684\u5c5e\u6027\u5217\u8868\uff0c\u5982\u679c\u4f60\u731c\u6d4b\uff0c\u5b83\u4e0d\u4f1a\u6709\u592a\u5927\u5e2e\u52a9\u3002 object.foo \u5c06\u59cb\u7ec8\u5bf9\u51fd\u6570\u6c42\u503c\uff0c\u4f46\u8be5\u51fd\u6570\u5728\u8c03\u7528\u65f6\u53ef\u80fd\u4f1a\u629b\u51fa\u201c\u65e0\u6b64\u7c7b\u51fd\u6570\u201d\u5f02\u5e38\u3002\u7c7b\u6570\u7ec4\u5bf9\u8c61\u4e0d\u53ef\u8fed\u4ee3\uff0c\u56e0\u6b64\u60a8\u5c06\u6267\u884c\u5927\u91cf\u5faa\u73af\u7d22\u5f15\u800c\u4e0d\u662f\u8fed\u4ee3\u503c\u3002\u4e0d\u8fc7\uff0c\u8fd9\u8fd8\u4e0d\u9519\uff1a let tabcount = 0;const Chrome = new Application(&quot;Google Chrome&quot;);if (Chrome.running()) { for (i in Chrome.windows) { tabcount += Chrome.windows [i].tabs.length; }}\n\u201c\u68c0\u67e5 Chrome \u662f\u5426\u6b63\u5728\u8fd0\u884c\u201d\u8fd9\u4e00\u6b65\u5f88\u91cd\u8981\u3002\u4e00\u65b9\u9762\uff0c\u8868\u73b0\u5f97\u597d\u50cf\u9000\u51fa Chrome \u5e76\u6ca1\u6709\u771f\u6b63\u6d88\u9664\u5176\u6807\u7b7e\u7684\u5fc3\u7406\u8d1f\u62c5\u4e00\u6837\u597d\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u4f7f\u7528 AppleScript \u4e0e\u672a\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8bdd\u5c06\u542f\u52a8\u8be5\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u80af\u5b9a\u4e0d\u5e0c\u671b\u90a3\u6837\u3002\u73b0\u5728\u6211\u6709\u4e86\u8ba1\u7b97\u6807\u7b7e\u7684\u65b9\u6cd5\u3002\u6211\u5b9e\u9645\u7f16\u5199\u7684\u4ee3\u7801\u6709\u70b9\u4e0d\u540c\uff0c\u56e0\u4e3a\u6211\u6536\u96c6\u4e86\u6bcf\u4e2a\u7a97\u53e3\u9009\u9879\u5361\u8ba1\u6570\u7684\u6570\u7ec4\uff0c\u4ee5\u9632\u4e07\u4e00\u6211\u4e5f\u60f3\u7ed8\u5236\u5b83\uff0c\u4f46\u5b83\u5f88\u50cf\u4e0a\u9762\u7684\u4ee3\u7801\u3002\u73b0\u5728\u6211\u9700\u8981\u8ba9\u5b83\u5b9a\u671f\u8fd0\u884c\u3002\u6700\u660e\u663e\u7684\u9009\u62e9\u662f\u8ba9\u5b83\u5728 macOS \u670d\u52a1\u7ba1\u7406\u5668 launchd \u4e0b\u8fd0\u884c\u3002\u8fd9\u5c06\u662f\u975e\u5e38\u660e\u667a\u7684\uff0c\u4f46\u9700\u8981\u6211\u8003\u8651launchdconfiguration\uff0c\u6211\u4e0d\u559c\u6b22\u8fd9\u6837\u505a\u3002\u6211\u60f3\u8fc7\u8bbe\u7f6e daemontools \u6765\u8fd0\u884c\u6211\u7684\u4e3b\u76ee\u5f55\u4e4b\u5916\u7684\u4e1c\u897f\u3002\u6211\u5fc5\u987b\u4ecelaunchd\u8fd0\u884c\u5b83\uff0c\u4f46\u662f\u4e00\u65e6\u8bbe\u7f6e\u4e86\u5b83\uff0c\u6211\u5c31\u4e0d\u5fc5\u518d\u8003\u8651\u5b83\u4e86\u3002\u6211\u4ec0\u81f3\u4e0d\u60f3\u8003\u8651\u4e00\u6b21\uff0c\u60f3\uff01\u6211\u6709\u53e6\u4e00\u4e2a\u5947\u602a\u7684\u8ba4\u8bc6\u3002\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u540d\u4e3a Hammerspoon \u7684\u7a0b\u5e8f\uff0c\u5b83\u662f\u4e00\u79cd\u7528\u4e8e\u6267\u884c macOS \u81ea\u52a8\u5316\u7684\u901a\u7528\u5de5\u5177\u3002\u6211\u7528\u5b83\u6765\u6ce8\u5165\u4e00\u4e9b\u83dc\u5355\u680f\u56fe\u6807\u6765\u91cd\u65b0\u7ec4\u7ec7\u6211\u7684\u684c\u9762\u6216\u8fd0\u884c\u8ba1\u65f6\u5668\uff0c\u5e76\u4e3a\u4e00\u4e9b\u4e1c\u897f\u8bbe\u7f6e\u952e\u76d8\u5feb\u6377\u952e\u3002\u5728\u5b83\u7684\u8bb8\u591a\u5176\u4ed6\u529f\u80fd\u4e2d\uff0c\u5b83\u5177\u6709\u7528\u4e8e\u5d4c\u5165\u5f0f HTTP \u670d\u52a1\u7684\u8bbe\u65bd\u3002\u5b83\u8fd8\u53ef\u4ee5\u4f7f\u7528 JXA \u8fd0\u884c JavaScript\u3002\u6211\u5199\u4e86\u8fd9\u4e2a\uff1a tabulator = hs.httpserver.new()tabulator:setPort(9876)tabulator:setCallback(function (method, path, headers, body) if (method == &quot;GET&quot;) and (path == &quot;/metrics &quot;) then bool, tabcounts, descriptor = hs.osascript.javascript([[ const Chrome = new Application(&quot;/Applications/Google Chrome.app&quot;); let tabCounts = []; if (Chrome.running()) { for (i \u5728 Chrome.windows \u4e2d) { tabCounts.push(Chrome.windows[i].tabs.length); } tabCounts.sort((a,b) =&gt; b - a); } tabCounts; ]]) \u5982\u679c\u4e0d\u662f bool\u7136\u540e\u8fd4\u56de &quot;Error\\n&quot;, 500, {} end local sum = 0 for i, tabs in ipairs(tabcounts) do sum = sum + tabs end return &quot;chrome_open_tabs &quot; .. sum .. &quot;\\n&quot;, 200, { } else return &quot;No good.\\n&quot;, 404, {} endend)tabulator:start() \u8fd9\u4f1a\u5728\u7aef\u53e3 9876 \u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 HTTP \u4fa6\u542c\u5668\u3002\u5982\u679c\u5b83\u6536\u5230 /metrics \u7684 GET \u8bf7\u6c42\uff0c\u5b83\u4f1a\u8fd0\u884c\u6211\u7684 JXA \u6765\u8be2\u95ee Chrome\uff08\u5982\u679c\u8fd0\u884c\uff09\u5173\u4e8e\u5b83\u7684\u6807\u7b7e\u8ba1\u6570\u3002 hs.osascript.javascript \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4\uff0c\u7b2c\u4e8c\u9879 init \u662f JavaScript \u4ee3\u7801\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\uff0c\u6211\u4eec\u5df2\u7ecf\u7ed3\u675f\u4e86\u673a\u667ah tabCounts\u3002\u5982\u679c\u4ee3\u7801\u8fd0\u884c\u6ca1\u6709\u9519\u8bef\uff0c\u6211\u4f1a\u5728 200 \u54cd\u5e94\u4e2d\u8fd4\u56de\u6211\u7684\u6307\u6807\u3002\u4e3a\u4e86\u5728\u672c\u5730\u6536\u96c6\u8fd9\u4e9b\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u8ba9\u4e92\u8054\u7f51\u4e0a\u7684\u4efb\u4f55\u4eba\u90fd\u89e6\u53d1\u6b64 JavaScript \u8fd0\u884c\uff0c\u6211\u5728 MacBook \u4e0a\u6709\u4e00\u4e2a\u672c\u5730\u8fd0\u884c\u7684 Prometheus \u5b9e\u4f8b\u3002\u5b83\u547d\u4e2d\u8fd9\u4e2a\u7aef\u70b9\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e2d\u7ee7\u5230\u6211\u5728\u4e91\u4e2d\u7684 Prometheus \u5b9e\u4f8b\u3002 Grafana \u770b\u7740\u5b83\uff0c\u5411\u6211\u5c55\u793a\u4e86\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u3002\u5f53\u5b83\u5728\u7ea2\u8272\u65f6\uff0c\u6211\u53f9\u4e86\u53e3\u6c14\uff0c\u7ffb\u9605\u6211\u7684\u6807\u7b7e\uff0c\u5c3d\u6211\u6240\u80fd\u5173\u95ed\u3002\u4f60\u53ef\u4ee5\u770b\u5230\u6211\u7684\u6807\u7b7e\u8ba1\u6570\u5d29\u6e83\u4e86\u51e0\u6b21\u3002\u9996\u5148\uff0c\u6211\u5173\u95ed\u4e86\u660e\u663e\u7684\u91cd\u590d\u6216\u6b7b\u6587\u4ef6\u3002\u540e\u6765\uff0c\u6211\u5b8c\u6210\u4e86\u4ee5 opentabs \u4e3a\u4ee3\u8868\u7684\u7b80\u5355\u4efb\u52a1\u3002\u5468\u672b\uff0c\u6211\u9605\u8bfb\u4e86\u5f88\u591a\u79ef\u538b\u7684\u6587\u7ae0\u5e76\u5173\u95ed\u4e86\u5b83\u4eec\u3002\u73b0\u5728\u6211\u5927\u7ea6\u6709 30 \u4e2a\u6807\u7b7e\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u53ef\u80fd\u662f\u6b63\u786e\u7684\u6570\u5b57\u3002\n\u6211\u6253\u7b97\u6784\u5efa\u5b83\u6765\u5e2e\u52a9\u6211\u66f4\u597d\u5730\u5728 Prometheus \u548c Grafana \u4e2d\u505a\u4e8b\u60c5\uff0c\u4f46\u6211\u8ba4\u4e3a\u5b83\u4e3b\u8981\u662f\u4e00\u79cd\u6709\u8da3\u7684\u5947\u602a\u7684\u901a\u7528\u7f16\u7a0b\uff0c\u6211\u5f88\u559c\u6b22\u5b83\u3002\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u63d0\u9192\uff0c\u8bb8\u591a\u4e4f\u5473\u7684\u95ee\u9898\u90fd\u6709\u611a\u8822\u7684\u89e3\u51b3\u65b9\u6848\u3002", "note_en": "I am widely admired at work for my ability to have many, many browser tabsopen. (That, at least, is what I take from the frequent shouts of &#34;holy cow,man, look at your browser!&#34;) Nonetheless, I have long thought that it would beworth getting my total tab count down. I have tabs open for a bunch ofreasons.\n thing I am in the middle of working on but should finish at some point\n One problem here is that once the count of tabs is large enough, &#34;clean uptabs&#34; starts with a whole step of &#34;figure out which tab is what kind of tab&#34;.Can I just close it because I&#39;m done? Is it a thing I should read? Soon?Someday? I need to improve my real time habits: closing things when done,grouping things by purpose, and so on. Until then, though, I need to see whenI&#39;ve let things get out of control.\n For years, I&#39;ve thought, &#34;I should visualize my tab count over time.&#34; Once ortwice I even wrote programs to help, but about a week ago I finally made thewhole thing go. When I Tweeted about it, I got a couple &#34;how&#39;d you do thats?&#34;,so I thought I&#39;d write it up. It&#39;s simple, except sort of not.\n   If you can&#39;t tell, this graph is generated by Grafana, a data visualizer that canproduce graphs and many other visualizations of data from all kinds of systems.So, I needed to set up Grafana. That was easy, I used their free cloudhosting, but setting up Grafana on a Linode is also dead simple. Basically,you install and tell it where to get the data. There are a lot of Grafanatutorials.\n I have my Grafana pointed at Prometheus. Prometheus is a  time seriesdatabase that gathers databy hitting HTTP endpoints. To grossly simplify, if you want your applicationto expose metrics to be gathered and later analyzed, you give it HTTP listenerthat replies with data in a specific format. There are a lot of Prometheustutorials.\n What I needed to do was to provide an HTTP service that would provide tabcounts. I picked the simplest possible way to provide that count, meaning aresponse like this:\n   When I originally looked at doing this, years ago, I was using Firefox. I tendto switch back and forth between Chrome and Firefox every few years. InFirefox, it was pretty easy to get tab counts. In the profile directory,there&#39;s a file called something like  sessionstore-backups/recovery.jsonlz4.The exact place this lives has changed over time, but generally there has beena JSON file in your profile that you could read to see tabs.\n Chrome stores its sessions in a seemingly obnoxious binary format called SSNS.I looked at deciding it and groaned. I knew I could write a browser extensionto get at the tab counts, but I had a vague sense of unease about two things.First, I wasn&#39;t sure I&#39;d have any means to embed a web server in Chrome toserve this data. That meant I&#39;d want to write the data to a file to be serverby something else. That gets to my second concern: I doubted I&#39;d be able toreliably write the tab count to a file from an extension.\n I had a flash of inspiration, though. If, by some great mercy, Chrome wasautomatable by AppleScript, I could make a go of it. I opened up the macOSScript Editor, hit Cmd-Shift-O to &#34;Open Dictionary&#34;, and looked for GoogleChrome. It was there! Its automation suite is tiny, but it exposes windowsand tabs. I was able to write this AppleScript:\n set tabcount to 0if application &#34;Google Chrome&#34; is running then tell application &#34;Google Chrome&#34; repeat with w in windows set tabcount to tabcount + (count of tabs of w) end repeat end tellend if\n AppleScript is weird, but I have had decent success in using it for lots oflittle tasks in the past. These days, what I tend to do is prove somethingwill work in AppleScript, then port it to JavaScript, using JXA. JXA is&#34;JavaScript for Automation&#34;, which is just &#34;what if you could write JavaScriptinstead of AppleScript to do the same stuff?&#34; This is pretty appealing!JavaScript is a much less weird language, and you can combine your macOSautomation with other code you&#39;ve written in JavaScript.\n It&#39;s not perfect, though. The objects you get to represent AppleScriptableentities are pretty clumsy. They don&#39;t let you get a list of their properties,and if you make a guess, it won&#39;t help much.  object.foo will always evaluatetoa function, but that function may throw a &#34;no such function&#34; exception whencalled. Array-like objects aren&#39;t iterable, so you&#39;ll do a lot of looping overindexes instead of iterating over value. Still, this isn&#39;t so bad:\n let tabcount = 0;const Chrome = new Application(&#34;Google Chrome&#34;);if (Chrome.running()) { for (i in Chrome.windows) { tabcount += Chrome.windows[i].tabs.length; }}\n That &#34;check if Chrome is running&#34; step is important. On one hand, it would benice to act like quitting Chrome didn&#39;t really eliminate the mental weight ofits tabs. On the other, using AppleScript to talk to an application that isn&#39;trunning will launch that application, and I sure don&#39;t want that.\n  Now I had a means to count tabs. The code I actually wrote was a littledifferent, because I gathered an array of per-window tab counts, in case Iwanted to graph that, too, but it was a lot like code above. Now I needed toget it running regularly. The most obvious option for this was to have it rununder  launchd, the macOS servicemanager. This would be very sensible, but would require I think about launchdconfiguration, which I don&#39;t like doing. I thought about setting up daemontools to run things out ofmy home directory. I&#39;d have to run it from launchd, but having set that uponce, I wouldn&#39;t have to think about it again. I didn&#39;t even want to thinkabout it once, thought!\n I had another weird realization. I use a program called Hammerspoon, which is sort of an all-purposetool for doing macOS automation. I use it to inject some menu bar icons thatreorganize my desktop or run timers, and to set up keyboard shortcuts for a fewthings. Among its many other functions, it has facilities for embedded HTTPservice. It can  also run JavaScript using JXA. I wrote this:\n tabulator = hs.httpserver.new()tabulator:setPort(9876)tabulator:setCallback(function (method, path, headers, body) if (method == &#34;GET&#34;) and (path == &#34;/metrics&#34;) then bool, tabcounts, descriptor = hs.osascript.javascript([[ const Chrome = new Application(&#34;/Applications/Google Chrome.app&#34;); let tabCounts = []; if (Chrome.running()) { for (i in Chrome.windows) { tabCounts.push(Chrome.windows[i].tabs.length); } tabCounts.sort((a,b) =&gt; b - a); } tabCounts; ]]) if not bool then return &#34;Error\\n&#34;, 500, {} end local sum = 0 for i, tabs in ipairs(tabcounts) do sum = sum + tabs end return &#34;chrome_open_tabs &#34; .. sum .. &#34;\\n&#34;, 200, {} else return &#34;No good.\\n&#34;, 404, {} endend)tabulator:start()\n This creates a new HTTP listener on port 9876. If it receives a GET requestfor  /metrics, it runs my JXA to ask Chrome (if running) about its tab count.The  hs.osascript.javascript function returns a tuple, and the second item init is the final statement of the JavaScript code, where we&#39;ve ended with tabCounts. If the code ran without an error, I return my metrics in a 200response.\n To collect this locally and not let just anybody on the internet trigger thisJavaScript running, I have a locally running Prometheus instance on my MacBook.It hits this endpoing and then relays the results to my Prometheus instance inthe cloud. Grafana looks at that and shows me my tab count. When it&#39;s in thered, I sigh, look through my tabs, and close what I can.\n You can see my tab count crashing a few times. First, I closed obviousduplicates or dead documents. Later, I finished easy tasks represented by opentabs. On the weekend, I read a lot of backlogged articles and closed them.Now I&#39;m around 30 tabs, which seems like it&#39;s probably about the right numberfor me.\n I meant to build this to help me get better at doing things in Prometheus andGrafana, but I think mostly it was just sort of fun weird general purposeprogramming, and I enjoyed it. It was a nice reminder that lots of tediousproblems have silly solutions.", "posttime": "2021-08-09 03:57:27", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6d4f\u89c8\u5668,lot,chrome", "title": "\u6211\u5173\u95ed\u4e86\u5f88\u591a\u6d4f\u89c8\u5668\u6807\u7b7e", "title_en": "I closed a lot of browser tabs", "transed": 1, "url": "https://rjbs.manxome.org/rubric/entry/2126", "via": "", "real_tags": ["\u6d4f\u89c8\u5668", "lot", "chrome"]}, {"category": "", "categoryclass": "", "imagename": "e62a4218021729fb5efe58f9e9bb1f2b.png", "infoid": 1072173, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6676\u4f53\u7ba1\u662f\u6211\u4eec\u7535\u5b50\u4ea7\u54c1\u7684\u7ec4\u6210\u90e8\u5206\uff1a\u4ece\u667a\u80fd\u624b\u673a\u5230\u7535\u8111\u3001\u73a9\u5177\u3001\u70f9\u996a\u8bbe\u5907\u3001\u6e05\u6d01\u5de5\u5177\u7b49\u3002\u5c3d\u7ba1\u6676\u4f53\u7ba1\u65e0\u5904\u4e0d\u5728\uff0c\u4f46\u53ea\u6709\u5c11\u6570\u4eba\u77e5\u9053\u5b83\u4eec\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5176\u5b9e\uff0c\u4e86\u89e3\u5b83\u4eec\u7684\u64cd\u4f5c\u539f\u7406\u5e76\u6ca1\u6709\u90a3\u4e48\u96be\u3002\u4e3a\u4e86\u4e86\u89e3\u6676\u4f53\u7ba1\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u6211\u4eec\u9700\u8981\u4e86\u89e3\u4e8c\u6781\u7ba1\u662f\u4ec0\u4e48\u3002\u4e8b\u5b9e\u4e0a\uff0c\u6676\u4f53\u7ba1\uff0c\u5728\u2026", "note_en": "Transistors are the building blocks of our electronic gadgets: from smartphones to computers, toys, cooking devices, cleaning tools, etc.\n Despite their ubiquity, only a few people know about how they work. In fact, understanding their principles of operation is not so hard.\n  In order to understand how a transistor work, we need to understand what a  diode is. In fact, a transistor, in\u2026", "posttime": "2021-08-09 03:57:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6676\u4f53\u7ba1,transistors", "title": "\u6676\u4f53\u7ba1\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff1f\u50cf\u62bd\u6c34\u9a6c\u6876", "title_en": "How do transistors work? Like a flush toilet", "transed": 1, "url": "https://medium.com/swlh/how-transistors-work-b63358b95180", "via": "", "real_tags": ["\u6676\u4f53\u7ba1"]}, {"category": "", "categoryclass": "", "imagename": "a2b5abdfd496c1019634efb2e46e3542.jpg", "infoid": 1072172, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u51e0\u5e74\u524d\uff0c\u5f53\u661f\u5ea7\u8ba1\u5212\u8fd8\u6d3b\u7740\u7684\u65f6\u5019\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u7684\u5de5\u7a0b\u5e08\u53d1\u73b0\u6218\u795e\u4e00\u53f7\u706b\u7bad\u6709\u4e00\u4e2a\u5173\u952e\u7684\u7f3a\u9677\uff0c\u4e00\u4e2a\u53ef\u80fd\u5371\u53ca\u6574\u4e2a\u9879\u76ee\u7684\u7f3a\u9677\u3002\u4ed6\u4eec\u60ca\u614c\u5931\u63aa\u3002\u4ed6\u4eec\u5bc6\u8c0b\u3002\u4ed6\u4eec\u4e3a\u628a\u4e8b\u60c5\u505a\u597d\u9700\u8981\u82b1\u8d39\u6570\u4ebf\u7f8e\u5143\u505a\u597d\u51c6\u5907\u3002\u66fe\u51e0\u4f55\u65f6\uff0c\u4e00\u4f4d\u603b\u7edf\u8ba4\u4e3a\u5c06\u4eba\u7c7b\u201c\u5e26\u5230\u6708\u7403\u548c\u66f4\u8fdc\u7684\u884c\u661f\u201d\u662f\u2026\u2026 \u9605\u8bfb\u66f4\u591a \u7136\u540e\u4ed6\u4eec\u627e\u5230\u4e86\u5982\u4f55\u4ee5\u8d85\u503c\u9910\u8d39\u7684\u65b9\u5f0f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 Ares 1 \u9762\u4e34\u7684\u95ee\u9898\u4e0d\u662f\u52a9\u63a8\u5668\u6545\u969c\u6216\u8ba1\u7b97\u673a\u6545\u969c\u3002\u8fd9\u662f\u7b80\u5355\u7684\u56e0\u679c\u7269\u7406\u5b66\u3002\u5728\u53d1\u5c04\u7684\u6700\u540e\u9636\u6bb5\uff0c\u5f53\u56fa\u4f53\u52a9\u63a8\u706b\u7bad\u71c3\u70e7\u65f6\uff0c\u5b83\u4f1a\u4f7f\u6574\u4e2a\u98de\u884c\u5668\u5feb\u901f\u632f\u8361\u3002\u5c06\u8fd9\u79cd\u632f\u8361\u6dfb\u52a0\u5230\u5206\u9694\u52a9\u63a8\u5668\u548c\u4e58\u5458\u8231\u7684\u5927\u7ba1\u7684\u5171\u632f\u9891\u7387\u4e0a\uff0c\u4f60\u5c31\u4f1a\u5f97\u5230\u4e00\u4e2a\u75af\u72c2\u632f\u52a8\u7684\u4e58\u5458\u8231\u3002\u5f53\u4eba\u7c7b\u632f\u52a8\u5230\u8fd9\u79cd\u7a0b\u5ea6\u65f6\uff0c\u4ed6\u4eec\u5c31\u4e0d\u53ef\u80fd\u9605\u8bfb\u6570\u5b57\u663e\u793a\u3002\u5982\u679c\u5b87\u822a\u5458\u4e0d\u4f1a\u9605\u8bfb\uff0c\u4ed6\u4eec\u5c31\u65e0\u6cd5\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\u3002\u5982\u679c\u4ed6\u4eec\u4e0d\u80fd\u5b8c\u6210\u4ed6\u4eec\u7684\u5de5\u4f5c\uff0c\u5c31\u6ca1\u6709\u66f4\u591a\u7684\u4f7f\u547d\u3002\u4e3a\u4e86\u8bc4\u4f30\u95ee\u9898\u7684\u4e25\u91cd\u7a0b\u5ea6\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u53ec\u96c6\u4e86\u5176\u4eba\u4e3a\u56e0\u7d20\u90e8\u95e8\u3002\u4ed6\u4eec\u662f\u7814\u7a76\u4eba\u7c7b\u611f\u77e5\u548c\u8868\u73b0\u7684\u4eba\uff0c\u4ece\u975e\u5e38\u57fa\u7840\u7684\u7814\u7a76\u5230\u975e\u5e38\u5e94\u7528\u7684\u7814\u7a76\u3002\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u5b8c\u6210\u4e86\u6700\u8fd1\u4e00\u8f6e\u7684\u632f\u52a8\u6d4b\u8bd5\uff1a50 \u5e74\u524d\uff0c\u5bf9\u4e8e Gemini \u9879\u76ee\uff0c\u5f53\u65f6\u663e\u793a\u5668\u662f\u6a21\u62df\u7684\u3001\u84b8\u6c7d\u9a71\u52a8\u7684\u8868\u76d8\u548c\u4eea\u8868\uff0c\u800c\u4e0d\u662f\u4eca\u5929\u7684\u8ba1\u7b97\u673a\u5c4f\u5e55\u3002\u4e0e\u5176\u4ed6\u4e00\u5207\u4e00\u6837\uff0c\u9a7e\u9a76\u8231\u4ece\u90a3\u65f6\u8d77\u53d1\u751f\u4e86\u5f88\u5927\u53d8\u5316\u3002\u662f\u65f6\u5019\u8fdb\u884c\u4e00\u4e9b\u65b0\u7684\u6d4b\u8bd5\u4e86\u3002\u7b2c\u4e00\u6b65\u662f\u8bbe\u7f6e\u4e00\u628a\u6905\u5b50\uff0c\u8ba9\u5b83\u5b8c\u5168\u4e0a\u4e0b\u632f\u52a8\uff08\u6216\u8005\uff0c\u5982\u679c\u4f60\u50cf\u5b87\u822a\u5458\u4e00\u6837\u4ef0\u5367\uff0c\u90a3\u4e48\u5b83\u5c31\u4f1a\u632f\u52a8\uff09\uff0c\u8fd9\u5c31\u662f\u8fd0\u8f7d\u706b\u7bad\u88ab\u9884\u6d4b\u7684\u6447\u6643\u65b9\u5f0f.\u706b\u7bad\u7684\u632f\u52a8\u9891\u7387\u4e3a 12 \u8d6b\u5179\uff08\u5e73\u5747\u800c\u8a00\uff0c\u4f46\u4f1a\u5728 10 \u8d6b\u5179\u548c 13 \u8d6b\u5179\u4e4b\u95f4\u6ce2\u52a8\uff09\uff0c\u56e0\u6b64\u4ed6\u4eec\u9700\u8981\u80fd\u591f\u51c6\u786e\u8fbe\u5230\u8be5\u8303\u56f4\u7684\u4e1c\u897f\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u8fd9\u9879\u6280\u672f\u5df2\u7ecf\u5b58\u5728\u3002\u76f8\u540c\u7684\u673a\u5236\u4f1a\u5bfc\u81f4\u60a8\u7684\u6905\u5b50\u5728\u6e38\u4e50\u56ed\u7684\u6a21\u62df\u6e38\u4e50\u8bbe\u65bd\u4e2d\u6643\u52a8\uff0c\u4ece\u800c\u6253\u9020\u51fa\u5b8c\u7f8e\u7684\u539f\u578b\u3002\n\u5de5\u7a0b\u5e08\u4eec\u4e5f\u77e5\u9053\u968f\u7740\u6218\u795e\u6211\u7684\u901f\u5ea6\u589e\u52a0\uff0c\u9707\u52a8\u4f1a\u589e\u52a0\u3002\u4ed6\u4eec\u8ba1\u7b97\u51fa\uff0c\u5728\u6700\u540e\u9636\u6bb5\uff0c\u5f53\u5b87\u822a\u5458\u5df2\u7ecf\u627f\u53d7 4 G \u7684\u52a0\u901f\u5ea6\u65f6\uff0c\u4ed6\u4eec\u5c06\u83b7\u5f97\u989d\u5916 0.7 G \u7684\u632f\u52a8\u3002\u968f\u7740 NASA \u5728\u6905\u5b50\u4e0a\u6162\u6162\u52a0\u5927\u6d4b\u8bd5\u529b\u5ea6\uff0c\u4ed6\u4eec\u53d1\u73b0\u5728 0.7 G \u65f6\uff0c\u5373\u4f7f\u662f\u6570\u5b57\u5316\u663e\u793a\u5668\u4e0a\u7684\u6700\u5927\u6570\u5b57\u4e5f\u51e0\u4e4e\u5b8c\u5168\u65e0\u6cd5\u8fa8\u8ba4\u3002\u5236\u5b9a\u4e86\u51cf\u5c11\u632f\u52a8\u7684\u8ba1\u5212\u3002\u5f39\u7c27\u548c\u53cd\u70b9\u706b\u7535\u673a\u3002\u6570\u4ebf\u7f8e\u5143\u6765\u5b9e\u65bd\u3002\u6dfb\u52a0\u4e86\u591a\u5e74\u7684\u5f00\u53d1\u548c\u5b9e\u65bd\u3002\u51e0\u4e4e\u65e0\u6cd5\u514b\u670d\u7684\u632b\u6298\u3002\u7136\u540e\u632f\u52a8\u5b9e\u9a8c\u5ba4\u7684\u4eba\u6709\u4e86\u4e00\u4e2a\u975e\u5e38\u975e\u5e38\u597d\u7684\u4e3b\u610f\uff1a\u901a\u8fc7\u7b80\u5355\u5730\u6839\u636e\u632f\u52a8\u53ca\u65f6\u5bf9\u663e\u793a\u5c4f\u8fdb\u884c\u9891\u95ea\uff0c\u4ed6\u4eec\u53ef\u4ee5\u5f7b\u5e95\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u4ed6\u4eec\u53ea\u82b1\u4e86\u51e0\u7f8e\u5143\u4e70\u4e86\u4e00\u4e9b\u7535\u8def\uff0c\u5c06\u5b83\u4eec\u8fde\u63a5\u5230\u5c4f\u5e55\u4e0a\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a 12Hz \u9891\u95ea\u3002\u5b83\u594f\u6548\u4e86\uff01\u53ef\u8bfb\u6027\u5927\u5927\u63d0\u9ad8\uff0c\u4f46\u5e76\u4e0d\u5b8c\u7f8e\u3002\u6905\u5b50\u4ee5 12Hz \u632f\u52a8\uff0c\u5c4f\u5e55\u4ee5 12Hz \u9891\u95ea\uff0c\u4f46\u5b83\u4eec\u5e76\u4e0d\u5b8c\u5168\u540c\u6b65\u3002\u5f53\u7136\uff0c\u6587\u5b57\u66f4\u660e\u663e\uff0c\u4f46\u5b83\u770b\u8d77\u6765\u50cf\u662f\u5728\u56db\u5904\u6e38\u52a8\u3002 NASA \u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u6240\u4ee5\u4ed6\u4eec\u6293\u8d77\u51e0\u4e2a\u52a0\u901f\u5ea6\u8ba1\uff0c\u628a\u5b83\u4eec\u56fa\u5b9a\u5728\u6905\u5b50\u4e0a\u3002\u968f\u7740\u632f\u52a8\u548c\u9891\u95ea\u73b0\u5728\u5b8c\u5168\u540c\u6b65\uff0c\u663e\u793a\u53d8\u5f97\u6676\u83b9\u5254\u900f\u3002\u6700\u7ec8\u7684\u6210\u672c\u53ea\u662f\u4ed6\u4eec\u9884\u671f\u7684\u4e00\u5c0f\u90e8\u5206\u3002\u80dc\u5229\u3002\u5982\u679c\u8fd9\u542c\u8d77\u6765\u592a\u7b80\u5355\u800c\u65e0\u6cd5\u5b9e\u9645\u5de5\u4f5c\uff0c\u76f8\u4fe1\u6211\uff0c\u6211\u4e5f\u6709\u540c\u6837\u7684\u611f\u89c9\uff0c\u76f4\u5230\u6211\u6700\u8fd1\u5728\u8bbf\u95ee NASA Ames \u65f6\u4eb2\u773c\u770b\u5230\u4e86\u5b83\u3002\u6211\u7684\u5411\u5bfc\u53ea\u613f\u610f\u5e26\u6211\u5230 0.5 G\uff0c\u4f46\u5373\u4f7f\u6309\u7167\u8fd9\u4e2a\u901f\u5ea6\uff0c\u6700\u5c0f\u7684\u4e00\u5217\u6570\u5b57\u4e5f\u5b8c\u5168\u96be\u4ee5\u8fa8\u8ba4\u3002\u4e00\u65e6\u4ed6\u4eec\u6253\u5f00\u9891\u95ea\uff1f\u6211\u53ef\u4ee5\u5b8c\u7f8e\u5730\u770b\u5230\u5b83\u3002\u6548\u679c\u60ca\u4eba\u3002\u6211\u4eec\u5c3d\u6700\u5927\u52aa\u529b\u901a\u8fc7\u5c06\u76f8\u673a\u653e\u5728\u96ea\u6a47\u4e0a\u6765\u5c55\u793a\u4e4b\u524d/\u4e4b\u540e\uff0c\u4f46\u56fe\u50cf\u7a33\u5b9a\u6027\u5b9e\u5728\u662f\u592a\u597d\u4e86\uff08\u73a9\u5f97\u597d\uff0c\u7d22\u5c3c\u3002\u73a9\u5f97\u597d\uff09\u3002\u4f60\u5fc5\u987b\u76f8\u4fe1\u6211\u7684\u8bdd\u3002\u56e0\u4e3a\u4e86\u89e3\u7cfb\u7edf\u5728\u632f\u52a8\u548c\u611f\u53d7\u5b87\u822a\u5458\u4f53\u9a8c\u5230\u7684\u771f\u5b9e\u7684\u3001\u9762\u90e8\u878d\u5316\u7684 G \u529b\u7684\u540c\u65f6\u662f\u5426\u5de5\u4f5c\u4e5f\u5f88\u91cd\u8981\uff0c\u7f8e\u56fd\u5b87\u822a\u5c40\u7684\u5927\u5927\u8111\u5df2\u5c06\u7c7b\u4f3c\u7684\u9891\u95ea/\u632f\u52a8\u88c5\u7f6e\u96c6\u6210\u5230\u6807\u5fd7\u6027\u7684 G \u529b\u6a21\u62df\u79bb\u5fc3\u673a\u4e2d\u3002\u5982\u679c\u6ca1\u6709\u5404\u79cd\u533b\u5b66\u8bc4\u4f30\uff0c\u4ed6\u4eec\u4e0d\u4f1a\u8ba9\u6211\u9760\u8fd1\u90a3\u4e1c\u897f\u3002\u4e5e\u8ba8\u3001\u8d3f\u8d42\u548c\u6cea\u6d41\u6ee1\u9762\u7684\u8868\u6f14\u88ab\u8bc1\u660e\u662f\u65e0\u6548\u7684\u3002\u4e5f\u8bb8\u6709\u4e00\u5929\u3002 NASA \u6b63\u5728\u7533\u8bf7\u8fd9\u9879\u6280\u672f\u7684\u4e13\u5229\uff0c\u5c3d\u7ba1\u5b83\u89e3\u51b3\u7684\u95ee\u9898\u663e\u7136\u4e0d\u662f NASA \u7279\u6709\u7684\u3002\u76f4\u5347\u673a\u3001\u98de\u673a\u548c\u5feb\u901f\u79fb\u52a8\u7684\u8239\u53ea\u90fd\u6709\u7c7b\u4f3c\u7684\u632f\u52a8\u95ee\u9898\uff0c\u6240\u4ee5\u6211\u4eec\u5f88\u53ef\u80fd\u4f1a\u5728\u5176\u4ed6\u5730\u65b9\u770b\u5230\u8fd9\u79cd\u60c5\u51b5\u3002\u6211\u53ea\u60f3\u5c06\u6211\u7684\u7535\u89c6\u540c\u6b65\u5230\u6307\u538b\u6309\u6469\u6905\u4e0a\u3002\u6ca1\u6709\u4eba\u6a21\u7cca\u6211\u7684\u78a7\u6602\u4e1d\u3002\n\u56e0\u6b64\uff0c\u867d\u7136\u6218\u795e\u4e00\u53f7\u706b\u7bad\u5df2\u7ecf\u505c\u98de\uff0c\u4f46\u6beb\u65e0\u7591\u95ee\uff0c\u8fd9\u9879\u7814\u7a76\u5c06\u7ee7\u7eed\u5b58\u5728\u5e76\u5728 NASA \u7684\u4e0b\u4e00\u4e2a\u8fd0\u8f7d\u706b\u7bad\u4e2d\u5b9e\u65bd\u3002\u5f88\u9ad8\u5174\u77e5\u9053\u4e0b\u4e00\u4ee3\u5b87\u822a\u5458\u5c06\u80fd\u591f\u770b\u5230\u4ed6\u4eec\u5728\u505a\u4ec0\u4e48\uff0c\u5e76\u4e14\u6ca1\u6709\u82b1\u8d39\u7eb3\u7a0e\u4eba\u6570\u4ebf\u7f8e\u5143\u3002\u597d\u4ea4\u6613\u3002\u5982\u679c\u60a8\u53ef\u4ee5\u4f7f\u7528\u624b\u673a\u6d4b\u8bd5\u7a7a\u6c14\u4e2d\u7684\u6bd2\u7d20\u4f1a\u600e\u6837\uff1f\u5982\u679c\u60a8\u53ef\u4ee5\u76d1\u63a7\u81ea\u5df1\u7684\u5065\u5eb7\u72b6\u51b5\u4f1a\u600e\u6837\u2026\u2026\u9605\u8bfb\u66f4\u591a Space Camp \u5b8c\u5168\u662f\u5173\u4e8e NASA \u672a\u5145\u5206\u63a2\u7d22\u7684\u4e00\u9762\u3002\u4ece\u673a\u5668\u4eba\u5230\u533b\u5b66\uff0c\u4ece\u6df1\u7a7a\u671b\u8fdc\u955c\u5230\u827a\u672f\u3002\u5728\u8fd9\u51e0\u5468\u5185\uff0c\u6211\u4eec\u5c06\u76f4\u63a5\u4ece NASA JPL \u548c NASA Ames \u5411\u60a8\u8d70\u6765\uff0c\u5411\u60a8\u5c55\u793a\u8fd9\u4e2a\u795e\u5947\u7684\u4e16\u754c\u3002\u60a8\u53ef\u4ee5\u5728\u6b64\u5904\u5173\u6ce8\u6574\u4e2a\u7cfb\u5217\u3002\u7279\u522b\u611f\u8c22 Mark Rober\u3001Jessica Culler\u3001Dan Goods\u3001Val Bunnell \u4ee5\u53ca NASA JPL \u548c NASA Ames \u7684\u6bcf\u4e2a\u4eba\u8ba9\u8fd9\u4e00\u5207\u6210\u4e3a\u73b0\u5b9e\u3002\u611f\u8c22\u540d\u5355\u5c06\u5360\u636e\u6570\u9875\uff0c\u4f46\u4e3a\u4e86\u8ba9\u6211\u4eec\u8bbf\u95ee\uff0c\u5e76\u4e3a\u4ed6\u4eec\u5982\u6b64\u6177\u6168\u7684\u65f6\u95f4\uff0c\u6211\u4eec\u975e\u5e38\u611f\u8c22\u90a3\u91cc\u7684\u6bcf\u4e2a\u4eba\u3002 Space Camp\u00ae \u662f\u7f8e\u56fd\u592a\u7a7a\u4e0e\u706b\u7bad\u4e2d\u5fc3\u7684\u6ce8\u518c\u5546\u6807/\u670d\u52a1\u3002\u672c\u6587\u53ca\u540e\u7eed\u5e16\u5b50\u672a\u7ecf\u7f8e\u56fd\u592a\u7a7a\u4e0e\u706b\u7bad\u4e2d\u5fc3\u6216\u592a\u7a7a\u8425\u00ae \u64b0\u5199\u6216\u8ba4\u53ef\u3002\u8981\u8bbf\u95ee\u5b98\u65b9\u592a\u7a7a\u8425\u7f51\u7ad9\uff0c\u8bf7\u5355\u51fb\u6b64\u5904\u3002", "note_en": "A few years ago, back when the   Constellation Program was still alive, NASA engineers discovered that the Ares I rocket had a crucial flaw, one that could have jeopardized the entire project. They panicked. They plotted. They steeled themselves for the hundreds of millions of dollars it was going to take to make things right.\n  Once upon a time, a President thought that taking humans &#34;to the Moon and the planets beyond&#34; was\u2026\n Read more\n And then they found out how to fix it for the cost of an extra value meal.\n The problem facing Ares 1 wasn&#39;t a booster malfunction or a computer glitch. It was simple cause-and-effect physics. During the final stages of a launch, as the solid booster rocket burns down it makes the entire vehicle oscillate rapidly. Add that oscillation to the resonant frequency of the large tube that separates the booster and the crew cabin, and you get a crew capsule that vibrates like crazy. When humans are vibrating to that extent, it&#39;s impossible for them to read a digital display. If the astronauts can&#39;t read, they can&#39;t do their jobs. If they can&#39;t do their jobs, no more mission.\n     To evaluate the extent of the problem, NASA called in its Human Factors Division. They&#39;re the ones who study human perception and performance, from very basic research to very applied research. In fact, they were the ones who had done the most recent round of vibration tests: 50 years ago, for the Gemini project, back when displays were analog, steam-actuated dials and gauges instead of the computer screens of today. Cockpits, like everything else, have changed a lot since those days. It was time for some new tests.\n  Step one was to set up a chair so it would vibrate purely in an up-down motion (or in-out, if you&#39;re lying on your back like an astronaut would be), which is how the launch vehicle was predicted to shake. The vibrational frequency of the rocket would be 12 hertz (on average, but it would fluctuate between 10Hz and 13Hz) so they needed something that could hit that range exactly. Luckily, that technology already existed; the same mechanism that causes your chair to shake in simulation rides at amusement park made for a perfect prototype.\n  The engineers also knew that as Ares I gained speed the shake would increase. They calculated that toward the final stage, when astronauts would be already subjected to 4 G&#39;s of acceleration, they would be getting an additional 0.7 G&#39;s of vibration. As NASA slowly ramped up testing in the chair, they discovered that at 0.7 G&#39;s even the largest numbers on the digitized display were almost entirely illegible.\n  Plans were drawn up to reduce the vibrations. Spring and counter-firing motors. Hundreds of millions of dollars to implement. Added years of development and implementation. A nearly insurmountable setback.\n  And then the people in the Vibration Lab had a really, really good idea: By simply strobing the display in time with the vibration, they could kill this problem altogether. They bought a handful of circuits that only cost a few bucks, hooked them up to the screen, and set it to strobe at 12Hz. And it worked!\n  The readability was vastly improved, but it wasn&#39;t perfect. The chair was vibrating at 12Hz and the screen was strobing at 12Hz, but they weren&#39;t perfectly in sync. The text was more visible, sure, but it looked like it was swimming around. NASA could do better. So they grabbed a few accelerometers and attached them to the chair. With the vibration and the strobing now perfectly in sync, the display became crystal clear. And the final cost was a fraction of a fraction of a fraction of what they&#39;d anticipated. Victory.\n  If it sounds too simple to actually work, believe me, I felt the same way until I saw it with my own eyes during a recent visit to NASA Ames. My guides were only willing to take me up to 0.5 G&#39;s, but even at that rate the smallest column of numbers was completely illegible. As soon as they flipped on strobing? I could see it perfectly. The effect was stunning. We did our best to show the before/after by putting our camera on the sled, but the image-stabilization was just too damn good (well played, Sony. Well played). You&#39;ll have to take my word for it.\n Because it was also important to know if the system worked while vibrating and feeling the real, face-melting G-forces that astronauts experience, NASA&#39;s big brains have incorporated a similar strobing/vibrating rig into the iconic G-force simulation centrifuge. They wouldn&#39;t let me anywhere near that thing without all kinds of medical evaluations. Begging, bribery, and tearful theatrics proved ineffective. Maybe someday.\n  NASA has a patent pending on the technology, although the problems it solves are decidedly not NASA-specific; helicopters, planes, and fast-moving boats have similar vibrational issues, so it&#39;s very possible we&#39;ll see this implemented elsewhere. I just want to sync my TV up to a shiatsu massage chair. Nobody blurs my Beyonce.\n So while the the Ares I rocket has been   grounded, there&#39;s no question this research will live on and be implemented in NASA&#39;s next launch vehicle. It&#39;s nice to know that the next generation of astronauts will be able to see what they&#39;re doing, and that it didn&#39;t cost the tax-payers hundreds of millions of dollars. Good deal.\n   What if you could use your phone to test the air for toxins? What if you could monitor your health\u2026\n Read more\n   Space Camp  is all about the under-explored side of NASA. From robotics to medicine to deep-space telescopes to art. For these couple of weeks we&#39;ll be coming at you direct from NASA JPL and NASA Ames, shedding a light on this amazing world. You can follow the whole series    here .\n   Special thanks to Mark Rober, Jessica Culler, Dan Goods, Val Bunnell, and everybody at NASA JPL and NASA Ames for making this happen. The list of thank yous would take up pages, but for giving us access, and for being so generous with their time, we are extremely grateful to everyone there.\n  Space Camp\u00ae is a registered trademark/service of the U.S. Space &amp; Rocket Center. This article and subsequent postings have not been written or endorsed by the U.S. Space &amp; Rocket Center or Space Camp\u00ae. To visit the official space camp website, click   here.", "posttime": "2021-08-09 03:56:54", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "nasa,\u663e\u793a\u5c4f,problem,\u632f\u52a8", "title": "NASA \u901a\u8fc7\u5bf9\u663e\u793a\u5c4f\u8fdb\u884c\u9891\u95ea\uff0c\u4ee5\u4f4e\u6210\u672c\u89e3\u51b3\u4e86\u4ef7\u503c 1 \u4ebf\u7f8e\u5143\u7684\u632f\u52a8\u95ee\u9898", "title_en": "NASA solved a $100M vibration problem cheaply by strobing the display", "transed": 1, "url": "https://gizmodo.com/how-nasa-solved-a-100-million-problem-for-five-bucks-5880850", "via": "", "real_tags": ["nasa", "\u663e\u793a\u5c4f", "problem", "\u632f\u52a8"]}, {"category": "", "categoryclass": "", "imagename": "f680568a1e68479966efd3c0c9c48d61.jpeg", "infoid": 1072170, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u7684\u4e00\u5929\u8fc7\u5f97\u5f88\u987a\u5229\uff0c\u5728\u67e5\u770b\u6211\u4eec\u5728 Stripe \u4e0a\u6700\u65b0\u66f4\u65b0\u7684 MRR \u540e\uff0c\u6211\u5fc3\u60c5\u5f88\u597d\uff0c\u6211\u51b3\u5b9a\u6253\u5f00\u6211\u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u770b\u770b\u5ba2\u6237\u662f\u5426\u6709\u4efb\u4f55\u95ee\u9898\u9700\u8981\u56de\u7b54\u3002\u5c31\u5728\u90a3\u65f6\uff0c\u6211\u6ce8\u610f\u5230\u4e00\u5c01\u6765\u81ea Google \u7684\u7535\u5b50\u90ae\u4ef6\uff0c\u6807\u9898\u4e3a\u201cGoogle Cloud Platform &amp; APIs: Payment received\u201d\uff0c\u7136\u540e\u6211\u7684\u4e00\u5929\u5c31\u53d1\u751f\u4e86\u5fae\u5999\u7684\u53d8\u5316\u3002\u6211\u6253\u5f00\u7535\u5b50\u90ae\u4ef6\u3002 \u201c\u4ed8\u6b3e\u5df2\u6536\u5230\u201d\uff0c\u5b83\u7528\u7c97\u4f53\u5927\u5199\u3002 \u201c\u592a\u597d\u4e86\u201d\uff0c\u4e00\u5207\u90fd\u5f88\u987a\u5229\uff0c\u5bf9\u5427\uff1f\u9519\u8bef\u7684\u3002\u60a8\u5df2\u4e8e 2021 \u5e74 6 \u6708 21 \u65e5\u5411 Google Cloud Platform \u548c API \u652f\u4ed8\u4e86 1,000.00 \u7f8e\u5143\u3002\u201c\u597d\u5427\uff0c\u8fd9\u53ef\u80fd\u53ea\u662f\u4e00\u4e2a\u9519\u8bef\u201d\uff0c\u5f53\u6211\u6253\u5f00 Developer API \u63a7\u5236\u53f0\u65f6\uff0c\u6211\u5fc3\u91cc\u60f3\u3002\u4f46\u662f\uff0c\u4e0d\uff0c\u4f60\u77a7\uff0c\u5728\u6253\u5f00 15 \u4e2a\u4e0d\u540c\u7684\u8d26\u5355\u5c0f\u8282\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5c0f\u8282\u7684\u63cf\u8ff0\u6027\u540d\u79f0\u90fd\u6bd4\u4e0b\u4e00\u4e2a\uff08\u201c\u6210\u672c\u8868\u201d\u3001\u201c\u6210\u672c\u5206\u89e3\u201d\u3001\u201c\u627f\u8bfa\u201d\u3001\u201c\u627f\u8bfa\u5206\u6790\u201d\uff09\u5c11\uff0c\u5e76\u4e14\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u7b80\u5355\u95ee\u9898\u7684\u7b54\u6848\u201c\u8fd9\u4e2a\u6708API\u8c03\u7528\u4e86\u591a\u5c11\u6b21\uff1f\u201d\uff0c\u6211\u7ec8\u4e8e\u770b\u5230\u4e86\u6211\u4eec\u8fd9\u4e2a\u6708\u7684\u6d88\u8d39\u60c5\u51b5\uff08\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u7684\u65f6\u5019\u8bd5\u7740\u627e\u56de\u6765\uff0c\u540e\u6765\u627e\u4e0d\u5230\u4e86\uff09 .\u4f3c\u4e4e\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u4e3a\u6211\u4eec\u6d88\u8d39\u7684\u4e1c\u897f\u4e70\u5355\u3002\u53ea\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u4ec0\u4e48\uff1f\u4ec0\u4e48\uff1f\u4ec0\u4e48\uff1f\u8fd9\u600e\u4e48\u53ef\u80fd\uff1f\u6211\u4ecd\u7136\u4e0d\u660e\u767d\uff0c\u4f46\u663e\u7136\u5b83\u5e94\u8be5\u662f\u6709\u9053\u7406\u7684\uff1a\n\u4e3a\u4ec0\u4e48\u6211\u4eec\u8981\u4e3a\u5927\u6c14\u6570\u636e\u4ed8\u8d39\uff0c\u8fd9\u5230\u5e95\u610f\u5473\u7740\u4ec0\u4e48\uff1f\u6211\u731c\u8c37\u6b4c\u89c9\u5f97\u4ed6\u4eec\u53ef\u4ee5\u5728\u201c\u8054\u7cfb\u6570\u636e\u201d\u4e0a\u591a\u82b1 100 \u7f8e\u5143\uff0c\u4e0d\u7ba1\u90a3\u662f\u4ec0\u4e48\u3002\u5927\u6c14\u6570\u636e 165.01 \u7f8e\u5143\uff1a\u6211\u4e00\u76f4\u5728\u4f7f\u7528\u5730\u70b9/\u81ea\u52a8\u5b8c\u6210\u529f\u80fd\uff0c\u4e3a\u4ec0\u4e48\u6211\u8fd8\u8981\u4e3a\u5927\u6c14\u6570\u636e\u4ed8\u8d39\uff1f\u5728\u201c\u8054\u7cfb\u6570\u636e\u201d\u4e0a\u989d\u5916\u6295\u5165 99 \u7f8e\u5143\uff0c\u6b64\u65f6\u989d\u5916\u7684 100 \u7f8e\u5143\u662f\u591a\u5c11\uff1f\u55ef...\u4e5f\u8bb8\u8fd9\u53ef\u4ee5\u89e3\u91ca\u4e3a\u4ec0\u4e48 Google \u7684 API \u4ea7\u54c1\u7684\u5b9a\u4ef7\u9875\u9762\u5982\u6b64\u6666\u6da9\u3002\u4f46\u6211\u6700\u559c\u6b22\u7684\u90e8\u5206\u662f\u6211\u4eec\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u652f\u4ed8\u5168\u4ef7\uff0c\u8fd9\u662f\u6211\u4eec\u7684\u6298\u6263\u4ef7\uff01\u4ed6\u4eec\u591a\u4e48\u6177\u6168\uff01\u54e6\uff0c\u5982\u679c\u8fd9\u4ecd\u7136\u6ca1\u6709\u610f\u4e49\uff0c\u8fd9\u91cc\u4e3a\u60a8\u63d0\u4f9b\u53e6\u4e00\u79cd\u5b9a\u4ef7\u660e\u7ec6\u3002\u662f\u7684\uff0c\u5728\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u4e00\u4e9b\u4e0b\u62c9\u83dc\u5355\uff0c\u8fd9\u4f1a\u8ba9\u4e8b\u60c5\u53d8\u5f97\u66f4\u6e05\u695a\uff1a\u90a3\u662f\u6211\u5f00\u59cb\u5bfb\u627e\u66ff\u4ee3\u65b9\u6848\u7684\u65f6\u5019\u3002\u503c\u5f97\u5e86\u5e78\u7684\u662f\uff0c\u5230 2021 \u5e74\u4f1a\u6709\u76f8\u5f53\u6570\u91cf\u7684\u8fd9\u4e9b\uff1aMapbox\u3001OpenCageData\u3001LocationIQ \u548c GeoCod.IO \u4ec5\u4e3e\u51e0\u4f8b\u3002\n\u6700\u540e\uff0c\u6211\u9009\u62e9\u4e86 Mapbox\uff1a\u5b83\u4e0d\u662f\u6240\u6709\u9009\u9879\u4e2d\u6700\u4fbf\u5b9c\u7684\uff0c\u4f46\u5b83\u4f3c\u4e4e\u5728\u53ef\u8d1f\u62c5\u6027\u548c\u6570\u636e\u76f8\u5173\u6027\u4e4b\u95f4\u53d6\u5f97\u4e86\u826f\u597d\u7684\u5e73\u8861\uff0c\u5728\u6574\u4e2a\u7a7a\u95f4\u7684\u81ea\u52a8\u5b8c\u6210\u4e2d\u83b7\u5f97\u4e86\u6700\u76f8\u5173\u7684\u7ed3\u679c\u3002\u6765\u81ea\u8c37\u6b4c\u6df7\u4e71\u7684\u63a7\u5236\u53f0\uff0c\u4ed6\u4eec\u4e25\u8083\u7684\u4eea\u8868\u677f\u4e5f\u975e\u5e38\u4ee4\u4eba\u8033\u76ee\u4e00\u65b0\uff1a\u73b0\u5728\uff0c\u6211\u4eec\u6bcf\u4e2a\u6708\u7684\u524d 100,000 \u6b21\u901a\u8bdd\u90fd\u662f\u514d\u8d39\u7684\uff0c\u6211\u4eec\u6700\u591a\u4e3a\u6bcf\u989d\u5916 1000 \u6b21\u901a\u8bdd\u652f\u4ed8 0.75 \u7f8e\u5143\u3002\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u60a8\u5df2\u7ecf\u731c\u5230\u6211\u80af\u5b9a\u4e0d\u4f1a\u4f7f\u7528\u4efb\u4f55 Google \u7684 API\uff0c\u9664\u975e\u5bf9\u5b9a\u4ef7\u548c\u672a\u6765\u7684\u66ff\u4ee3\u65b9\u6848\u8fdb\u884c\u4e25\u683c\u5ba1\u67e5\u3002\u5e0c\u671b\u8fd9\u7bc7\u6587\u7ae0\u53ef\u4ee5\u5e2e\u52a9\u66f4\u591a\u4eba\u5728\u76f2\u76ee\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u4e4b\u524d\u4e09\u601d\u800c\u540e\u884c\u3002\u811a\u6ce8\uff1a\u867d\u7136\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u5bf9 Mapbox \u7684\u670d\u52a1\u548c\u4ea7\u54c1\u975e\u5e38\u6ee1\u610f\uff0c\u4f46\u672c\u6587\u7edd\u4e0d\u662f Mapbox \u8d5e\u52a9\u6216\u8bf7\u6c42\u7684\u3002\u6211\u53ea\u662f\u4e00\u4e2a\u5e7b\u60f3\u7834\u706d\u7684\u8c37\u6b4c\u5ba2\u6237\uff0c\u5728\u5730\u72f1\u4e2d\u627e\u5230\u4e86\u4e00\u676f\u6c34\u3002\u60f3\u8981\u4e3a\u60a8\u7684\u793e\u533a\u5efa\u7acb\u81ea\u5df1\u7684\u81ea\u5b9a\u4e49\u5de5\u4f5c\u59d4\u5458\u4f1a\uff1f\u524d\u5f80 Niceboard.co \u5f00\u59cb\u60a8\u7684 7 \u5929\u514d\u8d39\u8bd5\u7528\uff01", "note_en": "My day was going great, I was in a good mood after checking our newly updated MRR on Stripe, and I decided to open my email to see if there were any questions from customers to answer.\n That&#39;s when I noticed an email from Google, entitled &#34; Google Cloud Platform &amp; APIs: Payment received&#34;, and my day took a slightly different turn.\n I open the email. &#34; Payment Received&#34;, it says in big bold letters. &#34;Great&#34;, everything&#39;s running smoothly, right?  Wrong.\n Your payment of $1,000.00 was applied to Google Cloud Platform &amp; APIs on Jun 21, 2021.\n  &#34;Well maybe it&#39;s just a mistake&#34; I think to myself, as I open the Developer API console.\n   But no, lo and behold, after opening 15 different Billing subsections each with less descriptive names than the next (&#34; Cost table&#34;, &#34; Cost breakdown&#34;, &#34; Commitments&#34;, &#34; Commitments analysis&#34;) and not finding an answer to the simple question &#34; How many calls did we make on the API this month?&#34;, I finally manage to view what our consumption for the month was (I tried to get back to it as I wrote this article, and couldn&#39;t even find it anymore). It seems that we are  in fact paying for what we consumed. There&#39;s only one little issue:\n  What? What? What? How could this be? I still don&#39;t understand it, but apparently it should make sense:\n  Why are we paying for Atmosphere Data and what the hell does that even mean? I guess Google felt they could use an extra $100 bucks on &#34;Contact Data&#34;, whatever that is.\n  $165.01 on Atmosphere Data: I&#39;ve been using Places/Autocomplete, why am I even paying for Atmosphere Data?\n Throw in an extra  $99 on &#34;Contact Data&#34;, what&#39;s an extra $100 at this point?\n Well...  Maybe this explains why the pricing pages are so obscure on Google&#39;s API products.\n But my favorite part is that we weren&#39;t actually paying the full price, this is our  discounted price! How generous of them!\n Oh, and if that still doesn&#39;t make sense, here&#39;s another breakdown of the pricing for you. Yeah add a few dropdowns everywhere, that&#39;ll make it clearer:\n   That&#39;s when I started looking into alternatives. And thankfully, there are a decent amount of them out there in 2021:  Mapbox,  OpenCageData,  LocationIQ and  GeoCod.IO just to name a few.\n In the end, I settled on Mapbox: it&#39;s not the cheapest of all options but it seemed to strike a good balance between affordability and data relevance, with the most relevant results in Autocomplete across the space.\n And coming from Google&#39;s mess of a console, their no-nonsense dashboard is also extremely refreshing:\n   Now, our first 100,000 calls are free every month, and we&#39;ll be paying $0.75 per extra 1000 calls,  at a maximum.\n   By now you&#39;ve guessed I surely won&#39;t be using any of Google&#39;s APIs without heavy scrutiny of the pricing and the alternatives moving forward.\n Hopefully this article can help a few more people think twice before blindly heading for the default choice.\n Footnote : While I&#39;m highly satisfied with Mapbox&#39;s service and offering so far, this article was   in no way sponsored or requested by Mapbox .I am merely a disillusioned Google customer who found a glass of water in hell.\n  Looking to set up your own custom job board for your community?  Head over to    Niceboard.co  to start your free 7 day trial!", "posttime": "2021-08-09 03:56:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "google,places,api", "title": "\u4e3a\u4ec0\u4e48\u6211\u4eec\u4ece Google Places \u5207\u6362\u5230\u6211\u4eec\u7684 Autocomplete API", "title_en": "Why we switched away from Google Places for our Autocomplete API", "transed": 1, "url": "https://hackernoon.com/heres-why-we-switched-from-google-places-to-mapbox-for-our-autocomplete-api-i2y37yw", "via": "", "real_tags": ["google", "places", "api"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072169, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u672c\u7f51\u7ad9\u4f7f\u7528 cookie \u6765\u63d0\u9ad8\u6027\u80fd\u3002\u5982\u679c\u60a8\u7684\u6d4f\u89c8\u5668\u4e0d\u63a5\u53d7 cookie\uff0c\u60a8\u5c06\u65e0\u6cd5\u67e5\u770b\u672c\u7f51\u7ad9\u3002\u65e0\u6cd5\u6b63\u786e\u8bbe\u7f6e cookie \u7684\u539f\u56e0\u6709\u5f88\u591a\u3002\u4ee5\u4e0b\u662f\u6700\u5e38\u89c1\u7684\u539f\u56e0\uff1a \u60a8\u5728\u6d4f\u89c8\u5668\u4e2d\u7981\u7528\u4e86 cookie\u3002\u60a8\u9700\u8981\u91cd\u7f6e\u6d4f\u89c8\u5668\u4ee5\u63a5\u53d7 cookie \u6216\u8be2\u95ee\u60a8\u662f\u5426\u613f\u610f\u63a5\u53d7 cookie\u3002\u60a8\u7684\u6d4f\u89c8\u5668\u8be2\u95ee\u60a8\u662f\u5426\u613f\u610f\u63a5\u53d7 cookie\uff0c\u60a8\u62d2\u7edd\u4e86\u3002\u8981\u63a5\u53d7\u6765\u81ea\u672c\u7f51\u7ad9\u7684 cookie\uff0c\u8bf7\u4f7f\u7528\u540e\u9000\u6309\u94ae\u5e76\u63a5\u53d7 cookie\u3002\u60a8\u8ba1\u7b97\u673a\u4e0a\u7684\u65e5\u671f\u662f\u8fc7\u53bb\u7684\u65e5\u671f\u3002\u5982\u679c\u60a8\u7684\u8ba1\u7b97\u673a\u65f6\u949f\u663e\u793a 1970 \u5e74 1 \u6708 1 \u65e5\u4e4b\u524d\u7684\u65e5\u671f\uff0c\u6d4f\u89c8\u5668\u5c06\u81ea\u52a8\u5fd8\u8bb0 cookie\u3002\u8981\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u8bf7\u5728\u60a8\u7684\u8ba1\u7b97\u673a\u4e0a\u8bbe\u7f6e\u6b63\u786e\u7684\u65f6\u95f4\u548c\u65e5\u671f\u3002\u60a8\u5b89\u88c5\u4e86\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u76d1\u63a7\u6216\u963b\u6b62 cookie \u7684\u8bbe\u7f6e\u3002\u60a8\u5fc5\u987b\u5728\u767b\u5f55\u65f6\u7981\u7528\u8be5\u5e94\u7528\u7a0b\u5e8f\u6216\u4e0e\u60a8\u7684\u7cfb\u7edf\u7ba1\u7406\u5458\u6838\u5bf9\u3002\u672c\u7f51\u7ad9\u4f7f\u7528 cookie \u6765\u63d0\u9ad8\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5728\u60a8\u6d4f\u89c8\u9875\u9762\u65f6\u8bb0\u4f4f\u60a8\u5df2\u767b\u5f55\u3002\u8981\u5728\u6ca1\u6709 cookie \u7684\u60c5\u51b5\u4e0b\u63d0\u4f9b\u8bbf\u95ee\u6743\u9650\uff0c\u7ad9\u70b9\u9700\u8981\u4e3a\u60a8\u8bbf\u95ee\u7684\u6bcf\u4e2a\u9875\u9762\u521b\u5efa\u4e00\u4e2a\u65b0\u4f1a\u8bdd\uff0c\u8fd9\u4f1a\u4f7f\u7cfb\u7edf\u901f\u5ea6\u964d\u4f4e\u5230\u4e0d\u53ef\u63a5\u53d7\u7684\u7a0b\u5ea6\u3002\n\u672c\u7f51\u7ad9\u5728 cookie \u4e2d\u53ea\u5b58\u50a8\u81ea\u52a8\u751f\u6210\u7684\u4f1a\u8bdd ID\uff1b\u6ca1\u6709\u6355\u83b7\u5176\u4ed6\u4fe1\u606f\u3002\u4e00\u822c\u800c\u8a00\uff0c\u53ea\u6709\u60a8\u63d0\u4f9b\u7684\u4fe1\u606f\u6216\u60a8\u5728\u8bbf\u95ee\u7f51\u7ad9\u65f6\u6240\u505a\u7684\u9009\u62e9\u624d\u80fd\u5b58\u50a8\u5728 cookie \u4e2d\u3002\u4f8b\u5982\uff0c\u9664\u975e\u60a8\u9009\u62e9\u952e\u5165\uff0c\u5426\u5219\u7ad9\u70b9\u65e0\u6cd5\u786e\u5b9a\u60a8\u7684\u7535\u5b50\u90ae\u4ef6\u540d\u79f0\u3002\u5141\u8bb8\u7f51\u7ad9\u521b\u5efa cookie \u4e0d\u4f1a\u8ba9\u8be5\u7f51\u7ad9\u6216\u4efb\u4f55\u5176\u4ed6\u7f51\u7ad9\u8bbf\u95ee\u60a8\u8ba1\u7b97\u673a\u7684\u5176\u4f59\u90e8\u5206\uff0c\u53ea\u6709\u521b\u5efa cookie \u7684\u7f51\u7ad9\u624d\u80fd\u8bfb\u53d6\u5b83\u3002", "note_en": "This site uses cookies to improve performance. If your browser does not accept cookies, you cannot view this site.\n      There are many reasons why a cookie could not be set correctly. Below are the most common reasons:\n  You have cookies disabled in your browser. You need to reset your browser to accept cookies or to ask you if you want to accept cookies.\n  Your browser asks you whether you want to accept cookies and you declined. To accept cookies from this site, use the Back button and accept the cookie.\n    The date on your computer is in the past. If your computer&#39;s clock shows a date before 1 Jan 1970, the browser will automatically forget the cookie. To fix this, set the correct time and date on your computer.\n  You have installed an application that monitors or blocks cookies from being set. You must disable the application while logging in or check with your system administrator.\n      This site uses cookies to improve performance by remembering that you are logged in when you go from page to page. To provide access without cookies would require the site to create a new session for every page you visit, which slows the system down to an unacceptable level.\n      This site stores nothing other than an automatically generated session ID in the cookie; no other information is captured.\n  In general, only the information that you provide, or the choices you make while visiting a web site, can be stored in a cookie. For example, the site cannot determine your email name unless you choose to type it. Allowing a website to create a cookie does not give that or any other site access to the rest of your computer, and only the site that created the cookie can read it.", "posttime": "2021-08-09 03:56:00", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u708e\u75c7,reduce,cookie", "title": "\u6c34\u6768\u9170\u82ef\u80fa\u51cf\u5c11 Covid \u590d\u5236\u5e76\u6291\u5236\u708e\u75c7\u7ec6\u80de\u56e0\u5b50", "title_en": "Salicylanilides Reduce Covid Replication and Suppress Inflammatory Cytokines", "transed": 1, "url": "https://pubs.acs.org/doi/abs/10.1021/acsinfecdis.1c00253", "via": "", "real_tags": ["\u708e\u75c7", "reduce", "cookie"]}, {"category": "", "categoryclass": "", "imagename": "b69582d7b994b99532ad9b4fd44a8bae.jpg", "infoid": 1072168, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u5e15\u7d22\u7f57\u5e03\u5c14\u65af\u2014\u2014\u52a0\u5229\u798f\u5c3c\u4e9a\u8bd5\u56fe\u505a\u534e\u76db\u987f\u6ca1\u6709\u505a\u7684\u4e8b\u60c5\uff1a\u8feb\u4f7f\u7f8e\u56fd\u7684\u79d1\u6280\u884c\u4e1a\u5c06\u5176\u6536\u96c6\u7684\u5927\u91cf\u6570\u636e\u4ea4\u7ed9\u4eba\u4eec\u63a7\u5236\u3002\u4f46\u662f\u4e00\u5e74\u8fc7\u53bb\u4e86\uff0c\u51e0\u4e4e\u4e0d\u53ef\u80fd\u77e5\u9053\u6709\u591a\u5c11\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u6b63\u5728\u5229\u7528\u4ed6\u4eec\u7684\u65b0\u6743\u5229\uff0c\u6216\u8005\u6700\u5927\u7684\u53c2\u4e0e\u8005\u662f\u5982\u4f55\u9075\u5b88\u7684\u3002\u5177\u6709\u91cc\u7a0b\u7891\u610f\u4e49\u7684 2018 \u5e74\u52a0\u5dde\u6d88\u8d39\u8005\u9690\u79c1\u6cd5\u6848\u6240\u9488\u5bf9\u7684\u6700\u5927\u516c\u53f8\u5fc5\u987b\u62ab\u9732\u81ea\u53bb\u5e74\u4ee5\u6765\u4ece\u8be5\u5dde\u5c45\u6c11\u90a3\u91cc\u6536\u5230\u7684\u6570\u636e\u9690\u79c1\u8bf7\u6c42\u7684\u8be6\u7ec6\u6570\u636e\u3002\u4f46\u8fd9\u4e9b\u516c\u53f8\u516c\u5e03\u7684\u6570\u636e\u5927\u76f8\u5f84\u5ead\uff0c\u56e0\u6b64\u65e0\u6cd5\u8bc4\u4f30\u6cd5\u5f8b\u7684\u6709\u6548\u6027\u3002\u5fae\u8f6f\u8868\u793a\uff0c\u5b83\u6536\u5230\u4e86 280 \u4e07\u4efd\u8981\u6c42\u5220\u9664\u52a0\u5dde\u4eba\u6570\u636e\u7684\u8bf7\u613f\u4e66\uff0c\u800c\u82f9\u679c\u6536\u5230\u7684\u8bf7\u6c42\u4e0d\u5230 295,000 \u4efd\u3002\u8c37\u6b4c\u662f\u4e00\u5bb6\u5728\u5168\u7403\u62e5\u6709\u6570\u5341\u4ebf\u7528\u6237\u7684\u516c\u53f8\uff0c\u62a5\u544a\u79f0\u53ea\u6709 276 \u6b21\u6765\u81ea\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7684\u5220\u9664\u8bf7\u6c42\u3002\u8fd9\u4e2a\u60f3\u6cd5\u662f\uff0c\u8fd9\u4e9b\u7edf\u8ba1\u6570\u636e\u5c06\u5411\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u5c55\u793a\u4ed6\u4eec\u4ece\u6cd5\u5f8b\u4e2d\u5f97\u5230\u4e86\u4ec0\u4e48\uff0c\u5e76\u5e2e\u52a9\u6267\u6cd5\u4eba\u5458\u8ddf\u8e2a\u516c\u53f8\u662f\u5426\u9075\u5b88\u89c4\u5219\u3002\u4ed6\u4eec\u9020\u6210\u4e86\u5f88\u591a\u6df7\u4e71\u3002\u65af\u5766\u798f\u5927\u5b66\u4ee5\u4eba\u4e3a\u4e2d\u5fc3\u7684\u4eba\u5de5\u667a\u80fd\u7814\u7a76\u6240\u7684\u9690\u79c1\u548c\u6570\u636e\u653f\u7b56\u7814\u7a76\u5458\u8a79\u59ae\u5f17\u00b7\u91d1\u8bf4\uff1a\u201c\u6211\u8ba4\u4e3a\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u6709\u70b9\u6df7\u4e71\uff0c\u8fd9\u662f\u6211\u6240\u89c2\u5bdf\u5230\u7684\u3002\u201d \u201c\u5f53\u7136\uff0c\u5982\u679c\u6ca1\u6709\u529e\u6cd5\u771f\u6b63\u4e86\u89e3\u8fd9\u4e9b\u6570\u5b57\u6240\u8861\u91cf\u7684\u662f\u4ec0\u4e48\uff0c\u90a3\u4e48\u4ec5\u4ece\u7814\u7a76\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u771f\u7684\u5f88\u56f0\u96be\u3002\u6211\u4eec\u5982\u4f55\u8bc4\u4f30\u8fd9\u9879\u6cd5\u5f8b\u662f\u5426\u6709\u6548\uff1f\u201d\n\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u4e8e 2018 \u5e74\u9881\u5e03\u4e86\u7f8e\u56fd\u7b2c\u4e00\u90e8\u5168\u9762\u7684\u9690\u79c1\u6743\u6cd5\uff0c\u8be5\u6cd5\u6388\u6743\u5c45\u6c11\u4e86\u89e3\u516c\u53f8\u6536\u96c6\u4e86\u6709\u5173\u4ed6\u4eec\u7684\u54ea\u4e9b\u4e2a\u4eba\u4fe1\u606f\uff0c\u5e76\u8981\u6c42\u4f01\u4e1a\u5220\u9664\u8fd9\u4e9b\u8be6\u7ec6\u4fe1\u606f\u6216\u4e0d\u51fa\u552e\u8fd9\u4e9b\u4fe1\u606f\u3002\u4f46\u662f\u5728 CCPA \u5168\u9762\u751f\u6548\u4e00\u5e74\u540e\uff0c\u5f88\u96be\u8bf4\u5b83\u5bf9\u4f01\u4e1a\u6216\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u6765\u8bf4\u771f\u6b63\u6539\u53d8\u4e86\u591a\u5c11\u3002\u62e5\u6709\u63d0\u8d77\u9690\u79c1\u6cd5\u8bc9\u8bbc\u7684\u552f\u4e00\u6743\u529b\u7684\u52a0\u5dde\u53f8\u6cd5\u90e8\u5df2\u7ecf\u53d1\u5e03\u4e86\u4e00\u7cfb\u5217\u8b66\u544a\uff0c\u4f46\u6ca1\u6709\u5c06\u4e00\u5bb6\u516c\u53f8\u544a\u4e0a\u6cd5\u5ead\u3002\u5728\u4ed6\u7684\u524d\u4efb Xavier Becerra \u52a0\u5165\u62dc\u767b\u653f\u5e9c\u540e\u4e8e\u4eca\u5e74\u6625\u5929\u88ab\u4efb\u547d\u4e3a\u8be5\u804c\u4f4d\u7684\u53f8\u6cd5\u90e8\u957f Rob Bonta \u4e0a\u4e2a\u6708\u4e3e\u884c\u4e86\u4e00\u6b21\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u53d1\u5e03\u4e86\u7f55\u89c1\u7684\u6267\u6cd5\u66f4\u65b0\u3002 Bonta \u8868\u793a\uff0c\u5927\u7ea6 75% \u7684\u516c\u53f8\u5728\u8b66\u544a\u53ef\u80fd\u8fdd\u53cd\u9690\u79c1\u6cd5\u7684\u60c5\u51b5\u4e0b\uff0c\u5df2\u5728\u6cd5\u5f8b\u89c4\u5b9a\u7684 30 \u5929\u5185\u89e3\u51b3\u4e86\u95ee\u9898\u3002\u4ed6\u6ca1\u6709\u8bf4\u6709\u591a\u5c11\u516c\u53f8\u6536\u5230\u8b66\u544a\uff0c\u53ea\u662f\u8bf4\u201c\u76f8\u5f53\u591a\u201d\u3002\u660e\u5e74\u5c06\u9762\u4e34\u5168\u5dde\u9009\u4e3e\u7684\u65e7\u91d1\u5c71\u6e7e\u533a\u8fdb\u6b65\u6c11\u4e3b\u515a\u4eba\u90a6\u5854\u5468\u56db\u5728\u63a5\u53d7\u91c7\u8bbf\u65f6\u8868\u793a\uff0c\u8be5\u6cd5\u5f8b\u5df2\u7ecf\u5efa\u7acb\u4e86\u4e00\u4e2a\u201c\u5f3a\u5927\u7684\u9690\u79c1\u5236\u5ea6\u201d\uff0c\u4ed6\u7684\u529e\u516c\u5ba4\u4ecd\u5904\u4e8e\u5efa\u7acb\u7684\u65e9\u671f\u9636\u6bb5\u3002 \u201c\u6211\u4eec\u79ef\u6781\u5f00\u5c55\u8c03\u67e5\uff0c\u5e76\u66f4\u591a\u5730\u4e86\u89e3\u516c\u53f8\u7684\u884c\u4e3a\u65b9\u5f0f\u3001\u5408\u89c4\u6027\u6216\u4e0d\u5408\u89c4\u6027\uff0c\u201d\u4ed6\u8bf4\u3002 \u201c\u5f53\u6709\u4eba\u4e0d\u5584\u610f\u548c\u4e0d\u9075\u5b88\u65f6\uff0c\u6211\u4eec\u5c06\u2014\u2014\u5982\u679c\u4e8b\u5b9e\u548c\u6cd5\u5f8b\u6307\u5411\u90a3\u91cc\u2014\u2014\u91c7\u53d6\u884c\u52a8\u5f3a\u5236\u6267\u884c\u3002\u6211\u4eec\u5e0c\u671b\u4eba\u4eec\u77e5\u9053\u8fd9\u662f\u6cd5\u5f8b\uff0c\u8fd9\u4e0d\u662f\u5efa\u8bae\uff0c\u4e5f\u4e0d\u662f\u81ea\u613f\u7684\u3002\u201d\u5dde\u53f8\u6cd5\u90e8\u5c06\u900f\u660e\u5ea6\u89c4\u5219\u5199\u5165\u6cd5\u89c4\uff0c\u4f46\u5e76\u672a\u4fdd\u7559\u5fc5\u987b\u9075\u5b88\u8be5\u89c4\u5219\u7684\u516c\u53f8\u7684\u5b8c\u6574\u6e05\u5355\u2014\u2014\u90a3\u4e9b\u6bcf\u5e74\u6536\u96c6\u81f3\u5c11 1000 \u4e07\u52a0\u5dde\u4eba\u4e2a\u4eba\u6570\u636e\u7684\u516c\u53f8\u3002\u6ca1\u6709\u4f01\u4e1a\u6570\u636e\u7684\u4e2d\u592e\u5b58\u50a8\u5e93\uff0c\u8feb\u4f7f\u516c\u4f17\u4ee5\u8017\u65f6\u4e14\u590d\u6742\u7684\u65b9\u5f0f\u8ffd\u8e2a\u6bcf\u5bb6\u516c\u53f8\u7684\u6570\u636e\u3002\u4f01\u4e1a\u81ea\u8eab\u62a5\u544a\u7684\u5ba2\u6237\u8bf7\u6c42\u91cf\u4ece\u4e2a\u4f4d\u6570\u5230\u6570\u767e\u4e07\u4e0d\u7b49\uff0c\u8fd9\u4e00\u8d8b\u52bf\u5f97\u5230\u65af\u5766\u798f\u5927\u5b66\u7814\u7a76\u5458\u51ef\u745f\u7433\u00b7\u5df4\u4f26 (Catherine Baron) \u7684\u8bc1\u5b9e\uff0c\u5979\u8fc4\u4eca\u4e3a\u6b62\u5206\u6790\u4e86 100 \u5bb6\u516c\u53f8\u7684\u6307\u6807\u3002 Facebook \u8bb0\u5f55\u4e86\u5927\u7ea6 82,000 \u4e2a\u5220\u9664\u8bf7\u6c42\uff0c\u800c PayPal \u8bb0\u5f55\u4e86 4,264 \u4e2a\u5220\u9664\u8bf7\u6c42\uff0cLinkedIn \u8bb0\u5f55\u4e86\u4e24\u4e2a\u5220\u9664\u8bf7\u6c42\uff0c\u5b83\u5141\u8bb8\u6240\u6709\u5ba2\u6237\u4e0b\u8f7d\u548c\u5220\u9664\u4ed6\u4eec\u7684\u6570\u636e\uff0c\u4f46\u5728\u5176\u81ea\u6211\u62a5\u544a\u4e2d\u53ea\u8ba1\u7b97\u4e0e CCPA \u76f8\u5173\u7684\u8bf7\u6c42\u3002\u4e9a\u9a6c\u900a\u8868\u793a\uff0c\u5b83\u5728\u7f8e\u56fd\u6536\u5230\u7684\u9488\u5bf9\u6240\u6709 Amazon.com \u7684\u5220\u9664\u8bf7\u6c42\u4e0d\u5230 590,000 \u6761\u3002\u5bf9\u8fd9\u4e9b\u5e7f\u6cdb\u4e0d\u4e00\u81f4\u7684\u4e00\u79cd\u89e3\u91ca\u53ef\u80fd\u5f88\u7b80\u5355\uff1a\u4e00\u4e9b\u516c\u53f8\u5c06\u5176\u4ee5\u52a0\u5229\u798f\u5c3c\u4e9a\u4e3a\u91cd\u70b9\u7684\u9690\u79c1\u94fe\u63a5\u6df1\u57cb\u5728\u5176\u7f51\u7ad9\u4e2d\uff0c\u56e0\u6b64\u5f88\u96be\u627e\u5230\u3002\u4f46\u8fd9\u4e9b\u6570\u5b57\u4e5f\u8868\u660e\uff0c\u516c\u53f8\u53ef\u80fd\u5bf9\u5176\u65b0\u804c\u8d23\u91c7\u53d6\u5b8c\u5168\u4e0d\u540c\u7684\u770b\u6cd5\u3002\u6709\u4e9b\u4eba\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u63aa\u65bd\u6765\u8ddf\u8e2a\u4ed6\u4eec\u7684\u9075\u5b88\u60c5\u51b5\u3002\u5176\u4ed6\u4eba\u6b63\u5728\u4f7f\u7528\u5168\u56fd\u6570\u5b57\u800c\u4e0d\u662f\u52a0\u5229\u798f\u5c3c\u4e9a\u7279\u5b9a\u7684\u6570\u5b57\u3002\n\u201c\u8fd9\u4e9b\u6570\u636e\u5728\u529f\u80fd\u4e0a\u6beb\u65e0\u7528\u5904\uff0c\u201d\u5723\u514b\u62c9\u62c9\u5927\u5b66\u6cd5\u5b66\u6559\u6388\u57c3\u91cc\u514b\u6208\u5fb7\u66fc\u8bf4\uff0c\u4ed6\u4e13\u6ce8\u4e8e\u79d1\u6280\u884c\u4e1a\uff0c\u662f CCPA \u7684\u6279\u8bc4\u8005\u3002\u4ed6\u8ba4\u4e3a\u900f\u660e\u5ea6\u76d1\u7ba1\u662f\u4e00\u9879\u6beb\u65e0\u610f\u4e49\u4e14\u4ee3\u4ef7\u9ad8\u6602\u7684\u5de5\u4f5c\uff0c\u5e76\u5f3a\u8c03\u53ef\u80fd\u65e0\u6cd5\u76f4\u63a5\u5c06\u4e00\u5bb6\u516c\u53f8\u7684\u6570\u5b57\u4e0e\u53e6\u4e00\u5bb6\u516c\u53f8\u7684\u6570\u5b57\u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u80fd\u5bf9\u6570\u636e\u91c7\u53d6\u4e0d\u540c\u7684\u65b9\u6cd5\u3002\u4f8b\u5982\uff0c\u8c37\u6b4c\u8868\u793a\uff0c\u5b83\u4ec5\u6536\u5230\u5e76\u6279\u51c6\u4e86 516 \u9879\u9488\u5bf9 CCPA \u7684\u8bbf\u95ee\u8be5\u516c\u53f8\u6536\u96c6\u7684\u4eba\u5458\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u53ea\u6709 276 \u9879\u8bf7\u6c42\u5220\u9664\u4e2a\u4eba\u4fe1\u606f\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u516c\u53f8\u8868\u793a\uff0c\u5230 2020 \u5e74\uff0c\u7f8e\u56fd\u6709\u8d85\u8fc7 1500 \u4e07\u4eba\u4f7f\u7528\u5176\u73b0\u6709\u5de5\u5177\u5220\u9664\u4e86\u4ed6\u4eec\u7684\u4e00\u4e9b\u4fe1\u606f\u3002\u5176\u4e2d\u4e00\u4e9b\u4eba\u53ef\u80fd\u5305\u62ec\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u3002\u4e00\u4e9b\u503e\u5411\u4e8e\u5f15\u8d77\u6d88\u8d39\u8005\u5bf9\u5176\u6570\u636e\u6536\u96c6\u65b9\u6cd5\u6301\u76f8\u5f53\u6000\u7591\u6001\u5ea6\u7684\u5de8\u5934\uff08\u5982 Facebook\u3001\u8c37\u6b4c\u548c\u4e9a\u9a6c\u900a\uff09\u58f0\u79f0\u4ed6\u4eec\u4e0d\u4f1a\u5c06\u4e2a\u4eba\u6570\u636e\u51fa\u552e\u7ed9\u7b2c\u4e09\u65b9\uff0c\u56e0\u6b64 CCPA \u6709\u6743\u9009\u62e9\u4e0d\u51fa\u552e\u4eba\u4eec\u7684\u8be6\u7ec6\u4fe1\u606f\u4e0d\u9002\u7528\u4e8e\u4ed6\u4eec\u3002\u9690\u79c1\u6743\u5021\u5bfc\u8005\u9a73\u65a5\u4e86\u8fd9\u4e00\u8bf4\u6cd5\uff0c\u8ba4\u4e3a CCPA \u9002\u7528\u4e8e\u5728\u7ebf\u6807\u8bc6\u7b26\uff0c\u4f8b\u5982\u53ef\u4ee5\u51fa\u4e8e\u8425\u9500\u76ee\u7684\u5728\u7f51\u7edc\u4e0a\u8ddf\u8e2a\u7528\u6237\u7684\u7b2c\u4e09\u65b9\u201ccookie\u201d\u3002\u5141\u8bb8\u4eba\u4eec\u9009\u62e9\u4e0d\u51fa\u552e\u5176\u4fe1\u606f\u7684\u516c\u53f8\u62a5\u544a\u7684\u8fd9\u4e9b\u8bf7\u6c42\u7684\u6570\u91cf\u6bd4\u4efb\u4f55\u5176\u4ed6\u516c\u53f8\u90fd\u8981\u9ad8\u5f97\u591a\u3002\u6570\u636e\u7ecf\u7eaa\u4eba Acxiom \u8868\u793a\uff0c\u5b83\u5df2\u6ee1\u8db3\u4e86\u5168\u56fd\u8fd1 20,000 \u9879\u9009\u62e9\u4e0d\u51fa\u552e\u4e2a\u4eba\u6570\u636e\u7684\u8bf7\u6c42\uff0c\u4f46\u516c\u53f8\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u81ea 1990 \u5e74\u4ee3\u4ee5\u6765\u5c31\u5df2\u7ecf\u5b9e\u65bd\u4e86\u6b64\u7c7b\u653f\u7b56\uff0c\u800c\u4e14\u8fd9\u4e9b\u6570\u5b57\u201c\u5e76\u4e0d\u663e\u7740\u201d\u3002\u4e0e CCPA \u4e4b\u524d\u4e0d\u540c\u201d\u3002\u8be5\u516c\u53f8\u6279\u51c6\u5176\u4ed6\u9690\u79c1\u8981\u6c42\u7684\u53ef\u80fd\u6027\u8981\u5c0f\u5f97\u591a\u3002\u5b83\u62d2\u7edd\u4e86\u53bb\u5e74\u6536\u5230\u7684 300 \u9879\u5220\u9664\u8bf7\u6c42\u4e2d\u7684\u4e00\u534a\u4ee5\u4e0a\uff0c\u4ee5\u53ca 483 \u9879\u8981\u6c42\u6536\u96c6\u6709\u5173\u4eba\u5458\u4fe1\u606f\u7684\u8bf7\u6c42\u4e2d\u7684\u4e00\u534a\u4ee5\u4e0a\u3002 \u300a\u9690\u79c1\u6cd5\u300b\u5141\u8bb8\u516c\u53f8\u8981\u6c42\u5bf9\u5220\u9664\u548c\u4fe1\u606f\u8bf7\u6c42\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4ed6\u4eec\u8ba4\u4e3a\u8fd9\u662f\u9632\u6b62\u8fdd\u89c4\u6240\u5fc5\u9700\u7684\u3002 Acxiom \u548c\u5176\u4ed6\u516c\u53f8\u8868\u793a\uff0c\u5927\u591a\u6570\u62d2\u7edd\u662f\u56e0\u4e3a\u5ba2\u6237\u653e\u5f03\u4e86\u4ed6\u4eec\u7684\u9690\u79c1\u8bf7\u6c42\u3002\nTarget \u8868\u793a\uff0c\u5b83\u6839\u636e CCPA \u8bb0\u5f55\u4e86 650 \u9879\u5220\u9664\u5ba2\u6237\u4e2a\u4eba\u8be6\u7ec6\u4fe1\u606f\u7684\u8bf7\u6c42\uff0c\u5e76\u540c\u610f\u4e86\u5176\u4e2d\u7684\u4e0d\u5230\u4e00\u534a\uff0c\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u8be5\u516c\u53f8\u4e3b\u8981\u63a5\u53d7\u4e86 139,000 \u9879\u9009\u62e9\u9000\u51fa\u6570\u636e\u9500\u552e\u7684\u8bf7\u6c42\u3002\u798f\u514b\u65af\u65b0\u95fb\u4ec5\u6ee1\u8db3\u4e86\u52a0\u5dde\u4eba 314 \u9879\u5220\u9664\u6570\u636e\u7684\u8bf7\u6c42\u4e2d\u7684 19 \u9879\uff0c\u79f0\u5176\u4ed6\u8bf7\u613f\u8005\u6ca1\u6709\u9a8c\u8bc1\u4ed6\u4eec\u7684\u8eab\u4efd\u3002\u52a0\u5dde\u53c2\u8bae\u9662\u591a\u6570\u515a\u9886\u8896\u9c8d\u52c3\u8d6b\u8328\u4f2f\u683c\u662f\u4e00\u4f4d\u6c11\u4e3b\u515a\u4eba\uff0c\u4ed6\u5e2e\u52a9\u4fc3\u6210\u4e86\u4e00\u9879\u6709\u5173\u6cd5\u5f8b\u7684\u7acb\u6cd5\u534f\u8bae\uff0c\u4ed6\u8868\u793a\uff0c\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u4ed6\u8ba4\u4e3a\u8fd9\u4e9b\u62a5\u544a\u95ee\u9898\u5e76\u4e0d\u91cd\u8981\u3002\u4ed6\u8bf4\uff0cCCPA\u4ecd\u5904\u4e8e\u201c\u6210\u719f\u201d\u9636\u6bb5\u3002 2023 \u5e74\u7684 CCPA \u5c06\u88ab\u66f4\u5e7f\u6cdb\u7684\u52a0\u5dde\u9690\u79c1\u6743\u6cd5\u6848\u6240\u53d6\u4ee3\uff0c\u8be5\u6cd5\u6848\u4e8e 11 \u6708\u901a\u8fc7\u6295\u7968\u63aa\u65bd\u83b7\u5f97\u4e86\u9009\u6c11\u7684\u6279\u51c6\u3002\u65b0\u6cd5\u5f8b\u5c06\u5e26\u6765\u4e00\u5957\u5168\u65b0\u7684\u6cd5\u89c4\u3001\u66f4\u5f3a\u5927\u7684\u6267\u6cd5\u5f39\u836f\u548c\u66f4\u660e\u786e\u7684\u6570\u636e\u4ea4\u6613\u7981\u4ee4\u3002\u8d6b\u8328\u4f2f\u683c\u8ba4\u4e3a\uff0c\u9690\u79c1\u73b0\u5728\u5df2\u7ecf\u6210\u4e3a\u516c\u4f17\u610f\u8bc6\uff0c\u516c\u53f8\u6b63\u5728\u8ba4\u771f\u5bf9\u5f85\u8fd9\u4e00\u70b9\uff0c\u201c\u4e0d\u4ec5\u4ec5\u662f\u516c\u5173\u5671\u5934\u3002\u201d\u4ed6\u8bf4\uff0c\u5728 21 \u4e16\u7eaa\u4e4b\u4ea4\uff0c\u516c\u53f8\u6b63\u8bd5\u56fe\u5f04\u6e05\u695a\u9690\u79c1\u662f\u4ec0\u4e48\u3002 \u201c\u73b0\u5728\u6709\u516c\u53f8\u7b2c\u4e00\u6b21\u975e\u5e38\u8ba4\u771f\u5730\u5bf9\u5f85\u9690\u79c1\u95ee\u9898\uff0c\u5e76\u62e5\u6709\u9996\u5e2d\u9690\u79c1\u5b98\uff0c\u201d\u8d6b\u8328\u4f2f\u683c\u8bf4\u3002 \u201c\u8fd9\u5c31\u662f\u8fd9\u79cd\u6210\u719f\u7684\u8fd0\u4f5c\u65b9\u5f0f\u3002\u201d", "note_en": "PASO ROBLES, Calif. \u2014  California tried to do what Washington hasn\u2019t: Force the nation\u2019s tech industry to hand people control over the massive troves of data it collects on them.\n But one year in, it\u2019s almost impossible to tell how many Californians are taking advantage of their new rights, or precisely how the biggest players are complying.\n   The largest companies targeted by the landmark 2018 California Consumer Privacy Act are required to disclose detailed figures on data-privacy requests they have received from the state&#39;s residents since last year. But the firms have published widely disparate figures  that  make it impossible to evaluate the law\u2019s effectiveness.\n Microsoft says it received 2.8 million petitions to delete Californians\u2019 data, while Apple got fewer  than 295,000.\n Google, a company with billions of users worldwide, reported a mere 276 deletion requests from Californians.\n  The idea was that these stats would show Californians what they were getting out of the law and help enforcers track whether companies are following the rules. What they\u2019ve created is a lot of confusion.\n \u201cI think it\u2019s a bit of a mess so far, is what I\u2019m observing,\u201d said Jennifer King, the privacy and data policy fellow at the Stanford Institute for Human-Centered Artificial Intelligence. \u201cCertainly if there\u2019s no way to truly understand what these numbers are measuring, then it\u2019s really difficult, just from a research perspective. How do we assess whether this law is working?\u201d\n California in 2018 enacted the nation&#39;s  first comprehensive privacy rights law, which empowers residents to find out what personal information companies have gathered about them and ask the businesses to delete those details or not sell them. But one year after CCPA took full effect, it\u2019s hard to tell how much it has really changed, for businesses or for Californians.\n The California Department of Justice, which has the sole authority to bring a Privacy Act lawsuit, has rolled out a slate of warnings but has not taken a single company to court. Attorney General Rob Bonta, who was appointed to the role this spring after his predecessor  Xavier Becerra joined the Biden administration, held a news conference last month with a rare enforcement update. Bonta said about 75 percent of companies warned about potential Privacy Act violations had fixed the problem within the 30 days allotted to them under the law. He would not say how many firms received warnings, only that it was \u201cquite a few.\u201d\n Bonta, a progressive Democrat from the San Francisco Bay Area who faces a statewide election next year, said in an interview Thursday that the law has established a &#34;strong privacy regime&#34; that his office is still in the early stages of establishing.\n \u201cWe\u2019re active with investigations, and in learning more about how corporations are acting, their compliance or lack thereof,\u201d he said. \u201cWhen there are folks that are not acting in good faith and not complying, we will \u2014 should the facts and the law point there \u2014 take action to enforce. We want people to know this is the law, it\u2019s not a suggestion, it\u2019s not voluntary.\u201d\n The state DOJ wrote the transparency rule into the regulations, but it does not keep a full list of firms that must comply with it \u2014 those that collect the personal data of at least 10 million Californians each year. There is no central repository for the businesses&#39; data, forcing the public to track down each company\u2019s numbers in a time-consuming and convoluted way. And the volume of customer requests, as reported by the businesses themselves, range from the single digits to millions, a trend confirmed by Catherine Baron, a research fellow at Stanford who has analyzed the metrics of 100 companies so far.\n Facebook logged about 82,000 deletion requests compared to 4,264 for PayPal and only  two for LinkedIn, which lets all of its customers download and delete their data but counts only the CCPA-linked requests in its self-reporting. Amazon says it\u2019s received fewer than 590,000 deletion requests for all of Amazon.com in the U.S.\n One explanation for these sweeping inconsistencies could be simple: Some firms bury their California-focused privacy links deep in their websites so they are hard to find. But the numbers also show that companies may be taking totally different views of their new responsibilities. Some could be using different measures to track their compliance. Others are using nationwide numbers instead of California-specific ones.\n \u201cThe data is functionally useless,\u201d said Eric Goldman, a law professor at Santa Clara University who focuses on the tech sector and is a critic of the CCPA. He sees the transparency regulation as a pointless and expensive exercise and stressed that it may not be possible to directly compare one company\u2019s numbers to another since they may be taking different approaches to the data.\n Google, for example, says it&#39;s  received and granted just 516 CCPA-specific requests for access to the data the company collects on people, and only 276 requested deletions of personal information. At the same time, the company says that more than 15 million people in the U.S. used its existing tools to delete some of their information in 2020. Some of these likely include Californians.\n Some of the giants that tend to draw considerable consumer skepticism over their data collection methods \u2014 like Facebook, Google and Amazon \u2014 contend they don\u2019t sell personal data to third parties and that therefore the CCPA\u2019s right to opt out of sale of people\u2019s details doesn\u2019t apply to them. Privacy advocates refute that claim, arguing CCPA applies to online identifiers, such as third-party \u201ccookies\u201d that can track users across the web for marketing purposes.\n The companies that do allow people to opt-out of the sale of their information are reporting a much higher volume for those requests than any other.\n The data broker Acxiom says it has complied with all of the nearly 20,000 nationwide requests to be opted out of the sale of personal data, though a company spokesperson said such a policy has been in place since the 1990s and that those numbers are not \u201csignificantly different\u201d than they were before the  CCPA.\n The firm was far less likely to grant other privacy asks. It denied more than half of the 300 deletion requests it received in the last year, and more than half of the  483 requests for the information it\u2019s gathering on people.\n The Privacy Act allows companies to require identity verification for deletion and information requests, which they argue is necessary to prevent breaches. Acxiom and others said most denials stemmed from customers abandoning their privacy petitions.\n Target says it logged 650 requests under the CCPA to delete customers\u2019 personal details and agreed to less than half of them, compared to 139,000 requests for the opt-out of the sale of data, which the company mostly honored.\n And Fox News complied with just 19 of the 314 requests from Californians to delete their data, saying the other petitioners didn\u2019t verify their identities.\n California Senate Majority Leader Bob Hertzberg, a Democrat who helped broker a legislative deal on the law, said he didn\u2019t see these reporting problems as significant in the long term. The CCPA is still in the \u201cmaturing\u201d phase, he said.\n The CCPA in 2023 will be replaced by a more expansive California Privacy Rights Act,  which voters approved in November through a ballot measure. The new law will bring a whole new set of regulations, greater enforcement ammunition and more clarity around data trafficking prohibitions.\n Hertzberg argued privacy is now in the public consciousness and something companies are taking seriously, \u201cbeyond just a PR stunt.\u201d\n At the turn of the 21st century, he said, firms were trying to figure out what privacy was.\n \u201cNow you have companies for the first time taking the issue of privacy quite seriously, and having chief privacy officers,\u201d Hertzberg said. \u201cThat\u2019s kind of how this maturing works.\u201d", "posttime": "2021-08-09 03:55:36", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u65e0\u7528,useless", "title": "\u201c\u529f\u80fd\u4e0a\u65e0\u7528\u201d\uff1a\u52a0\u5dde\u9690\u79c1\u6cd5\u7684\u91cd\u5927\u62ab\u9732\u4e0d\u8db3", "title_en": "'Functionally useless': California privacy law's big reveal falls short", "transed": 1, "url": "https://www.politico.com/states/california/story/2021/08/05/functionally-useless-california-privacy-laws-big-reveal-falls-short-1389429", "via": "", "real_tags": ["\u65e0\u7528", "useless"]}, {"category": "", "categoryclass": "", "imagename": "72e2c2bba6d5211c003d77678949663a.jpeg", "infoid": 1072167, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8e\u75ab\u82d7\u7684\u9519\u8bef\u4fe1\u606f\u5982\u6b64\u68d8\u624b\u7684\u90e8\u5206\u539f\u56e0\u662f\u5b83\u53ef\u80fd\u975e\u5e38\u6709\u5229\u53ef\u56fe\u3002\u591a\u5e74\u6765\uff0c\u53cd\u75ab\u82d7\u4eba\u58eb\u9760\u51fa\u7248\u4e66\u7c4d\u548c\u53d1\u8868\u6f14\u8bb2\u8d5a\u94b1\uff0c\u76f4\u5230\u6700\u8fd1\u51e0\u5e74\uff0cYouTube \u7b49\u4e3b\u8981\u7f51\u7ad9\u624d\u5f00\u59cb\u963b\u6b62\u53cd\u75ab\u82d7\u8005\u76f4\u63a5\u4ece\u5e7f\u544a\u4e2d\u83b7\u5f97\u6536\u5165\u3002\u5728\u5927\u6d41\u884c\u671f\u95f4\uff0c\u7531\u4e8e\u51a0\u72b6\u75c5\u6bd2\u4e3a\u5065\u5eb7\u6076\u4f5c\u5267\u521b\u9020\u4e86\u65b0\u5e02\u573a\uff0c\u9634\u8c0b\u8bba\u8005\u5df2\u7ecf\u80fd\u591f\u5229\u7528\u4ed6\u4eec\u5728 Facebook \u7b49\u4e3b\u8981\u7f51\u7ad9\u4e0a\u516c\u5e03\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u901a\u8fc7\u7535\u5b50\u5546\u52a1\u5546\u5e97\u5411\u8ffd\u968f\u8005\u51fa\u552e\u8865\u5145\u5242\u548c\u4e66\u7c4d\uff0c\u4ece\u800c\u5728\u7f51\u4e0a\u8d5a\u94b1\u3002\u73b0\u5728\uff0c\u62e5\u6709\u5927\u91cf\u8ffd\u968f\u8005\u7684\u75ab\u82d7\u6000\u7591\u8bba\u8005\u6b63\u5728\u8f6c\u5411\u4f17\u7b79\u5e73\u53f0\u2014\u2014\u76f8\u5bf9\u9ed8\u9ed8\u65e0\u95fb\u7684 GiveSendGo \u548c\u7edd\u5bf9\u4e3b\u6d41\u7684 GoFundMe\u2014\u2014\u5c06\u4ed6\u4eec\u7684\u6d3b\u52a8\u8d27\u5e01\u5316\uff0c\u901a\u5e38\u8fbe\u5230\u6570\u5341\u4e07\u7f8e\u5143\u3002\u75ab\u82d7\u72b9\u8c6b\u53ef\u80fd\u662f\u963b\u6b62\u8be5\u56fd\u9003\u907f\u51a0\u72b6\u75c5\u6bd2\u5927\u6d41\u884c\u7684\u6700\u6709\u529b\u529b\u91cf\u3002\u7f8e\u56fd\u7ec8\u4e8e\u5728\u5468\u4e00\u5b9e\u73b0\u4e86\u62dc\u767b\u653f\u5e9c\u7684\u76ee\u6807\uff0c\u5373\u5728 7 \u6708 4 \u65e5\u7684\u76ee\u6807\u65e5\u671f\u540e\u4e0d\u5230\u4e00\u4e2a\u6708\uff0c\u81f3\u5c11\u5411 70% \u7684\u7f8e\u56fd\u4eba\u63a5\u79cd\u7b2c\u4e00\u5242\u75ab\u82d7\uff0c\u4f46\u8fd9\u4e00\u91cc\u7a0b\u7891\u4ecd\u7136\u4e0d\u8db3\u4ee5\u8ba9\u8be5\u56fd\u62b5\u5fa1\u4f20\u67d3\u6027\u6781\u5f3a\u7684 Delta \u53d8\u79cd\u73b0\u5728\u6b63\u5728\u5e2d\u5377\u6574\u4e2a\u4eba\u7fa4\u2014\u2014\u800c\u73b0\u5728\u6b7b\u4e8e COVID-19 \u7684\u7edd\u5927\u591a\u6570\u4eba\u90fd\u6ca1\u6709\u63a5\u79cd\u75ab\u82d7\u3002\u5728 GiveSendGo \u548c GoFundMe \u4e0a\uff0c\u75ab\u82d7\u771f\u76f8\u8005\u7ecf\u5e38\u5c06\u81ea\u5df1\u63cf\u7ed8\u6210\u5c0f\u4eba\u7269\uff0c\u4e0e\u5927\u578b\u5236\u836f\u516c\u53f8\u3001\u5927\u578b\u79d1\u6280\u516c\u53f8\u548c\u5927\u578b\u653f\u5e9c\u7684\u4eb2\u75ab\u82d7\u66b4\u653f\u4f5c\u6597\u4e89\uff0c\u5e76\u4ee5\u6b64\u4ece\u6570\u4ee5\u5343\u8ba1\u7684\u540c\u60c5\u6350\u52a9\u8005\u90a3\u91cc\u652b\u53d6\u91d1\u94b1\u3002\u4ed6\u4eec\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u90e8\u5206\u539f\u56e0\u662f\u6807\u51c6\u677e\u61c8\u548c\u9002\u5ea6\u76f2\u70b9\uff0c\u90e8\u5206\u539f\u56e0\u662f\u5728\u7070\u8272\u5730\u5e26\u8fd0\u4f5c\u3002\u4ece GiveSendGo \u5f00\u59cb\uff0c\u8fd9\u662f\u4e00\u4e2a\u57fa\u7763\u6559\u4f17\u7b79\u5e73\u53f0\uff0c\u4e8e 2015 \u5e74\u63a8\u51fa\uff0c\u4e3b\u8981\u65e8\u5728\u4e3a\u4f20\u6559\u58eb\u65c5\u884c\u548c\u9700\u8981\u533b\u7597\u7684\u513f\u7ae5\u7b79\u96c6\u8d44\u91d1\u3002 GiveSendGo \u4e0a\u6709\u5f88\u591a\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u4e5f\u6210\u4e3a\u6781\u53f3\u7ffc\u4eba\u58eb\u4e3a\u8fb9\u7f18\u4e8b\u4e1a\u7b79\u96c6\u73b0\u91d1\u7684\u9996\u9009\u5de5\u5177\uff0c\u8fd9\u5e76\u975e\u5b8c\u5168\u51fa\u4e8e\u5076\u7136\u3002\u5230 2017 \u5e74\uff0c\u8be5\u7f51\u7ad9\u5c06\u81ea\u5df1\u5851\u9020\u6210\u4e00\u4e2a\u907f\u98ce\u6e2f\uff0c\u4f9b\u90a3\u4e9b\u5728\u5176\u66f4\u5927\u7684\u7ade\u4e89\u5bf9\u624b\u4e2d\u4e0d\u53d7\u6b22\u8fce\u7684\u4eba\u4f7f\u7528\u3002 \u201cGofundme \u91c7\u53d6\u4e86\u53cd\u5bf9\u57fa\u7763\u5f92\u7684\u7acb\u573a\uff0c\u5e76\u4e00\u76f4\u5728\u53d6\u6d88\u4ed6\u4eec\u4e0d\u540c\u610f\u7684\u6d3b\u52a8\uff0c\u201d\u5f53\u65f6\u7684 GiveSendGo \u535a\u5ba2\u6587\u7ae0\u5199\u9053\u3002\u968f\u7740\u4e3b\u6d41\u4f17\u7b79\u7f51\u7ad9\u5728\u7981\u6b62\u4eba\u4eec\u4f20\u64ad\u9519\u8bef\u4fe1\u606f\u548c\u4ec7\u6068\u65b9\u9762\u53d8\u5f97\u66f4\u52a0\u4e25\u683c\uff0c\u800c\u4e14\u50cf\u201cHatreon\u201d\u8fd9\u6837\u7684\u6781\u53f3\u7ffc\u66ff\u4ee3\u65b9\u6848\u88ab\u8bc1\u660e\u8bbe\u8ba1\u5f97\u5f88\u5dee\uff0cGiveSendGo \u6210\u4e3a\u4e86\u6781\u7aef\u5206\u5b50\u7684\u4e00\u4e2a\u6709\u5438\u5f15\u529b\u7684\u9009\u62e9\u3002\u4eca\u5e74 1 \u6708\uff0cProud Boys \u548c\u5176\u4ed6\u6781\u7aef\u4e3b\u4e49\u56e2\u4f53\u7684\u6210\u5458\u5229\u7528\u8be5\u7f51\u7ad9\u4e3a\u56fd\u4f1a\u66b4\u52a8\u63d0\u4f9b\u65c5\u884c\u548c\u7269\u8d44\u8d44\u52a9\uff0c\u7136\u540e\u5728\u5176\u4e2d\u8bb8\u591a\u4eba\u88ab\u6355\u540e\u7b79\u96c6\u8d44\u91d1\u652f\u4ed8\u6cd5\u5f8b\u8d39\u7528\u65f6\uff0c\u8fd9\u4ef6\u4e8b\u53d8\u5f97\u81ed\u540d\u662d\u8457\u3002 1 \u6708 6 \u65e5\u4e4b\u540e\u7684\u51e0\u5929\uff0cPayPal \u5207\u65ad\u4e86\u4e0e GiveSendGo \u7684\u8054\u7cfb\u3002 GiveSendGo \u58f0\u79f0\u5b83\u4e0d\u60f3\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u201c\u504f\u8892\u201d\u4e00\u65b9\u3002 \uff08\u8be5\u7f51\u7ad9\u73b0\u5728\u79f0\u5b83\u4f7f\u7528\u4e86\u201c\u5404\u79cd\u652f\u4ed8\u5904\u7406\u516c\u53f8\u201d\uff0c\u4f46\u6ca1\u6709\u6309\u540d\u79f0\u8bc6\u522b\u5b83\u4eec\u3002\uff09\u5728\u8fc7\u53bb\u51e0\u4e2a\u6708\u4e2d\uff0cGiveSendGo \u4e00\u76f4\u5728\u4e3e\u529e\u7b79\u6b3e\u6d3b\u52a8\uff0c\u539f\u56e0\u662f\u4eba\u4eec\u5bf9\u5df2\u7ecf\u79ef\u7d2f\u4e86\u5de8\u989d\u8d44\u91d1\u7684\u75ab\u82d7\u4ea7\u751f\u4e86\u6000\u7591\u3002\u4f8b\u5982\uff0c\u201c\u72ec\u7acb\u8bb0\u8005\u201dIvory Hecker \u7684\u4f17\u7b79\u6d3b\u52a8\u7b79\u96c6\u4e86\u8fd1 200,000 \u7f8e\u5143\u4ee5\u652f\u6301\u5979\u7684\u201c\u771f\u6b63\u7684\u65b0\u95fb\u5de5\u4f5c\u201d\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u8fd9\u7b14\u94b1\u7684\u7528\u9014\uff0c\u4f46\u8d6b\u514b\u5c14\u5728 6 \u6708\u4efd\u4e3a Fox 26 Houston \u62c5\u4efb\u5f53\u5730\u8bb0\u8005\u65f6\u58f0\u540d\u72fc\u85c9\uff0c\u5e76\u6253\u65ad\u4e86\u4e00\u4efd\u5929\u6c14\u62a5\u544a\uff0c\u58f0\u79f0\u8be5\u7f51\u7edc\u201c\u5835\u4f4f\u201d\u4e86\u5979\u3002\u7136\u540e\uff0c\u5979\u5728\u76f4\u64ad\u4e2d\u5ba3\u5e03\uff0c\u5979\u5c06\u63d0\u4f9b Fox \u7684\u201c\u5e55\u540e\u201d\u5f55\u97f3\u7ed9\u4fdd\u5b88\u6d3e\u827a\u672f\u5bb6 James O&#39;Keefe \u548c\u4ed6\u7684\u56e2\u961f Project Veritas\u3002 Hecker \u5bf9\u8be5\u7f51\u7edc\u6709\u5f88\u591a\u4e0d\u6ee1\uff0c\u4f46\u5176\u4e2d\u6700\u4e3b\u8981\u7684\u662f\u5b83\u5bf9 COVID-19 \u548c\u75ab\u82d7\u7684\u62a5\u9053\u3002\u5979\u58f0\u79f0 Fox 26 \u4e0d\u60f3\u7ed9\u75ab\u82d7\u201c\u8d1f\u9762\u65b0\u95fb\u201d\uff0c\u5e76\u4e14\u5b83\u6b63\u5728\u538b\u5236\u5979\u5bf9\u7f9f\u6c2f\u55b9\u7684\u62a5\u9053\uff0c\u7f9f\u6c2f\u55b9\u662f\u4e00\u79cd\u540d\u4e0d\u89c1\u7ecf\u4f20\u7684 COVID-19 \u6cbb\u7597\u65b9\u6cd5\u3002 Hecker \u8fd8\u6307\u8d23\u8be5\u7f51\u7edc\u627c\u6740\u4e86\u5979\u5ba3\u4f20 Stella Immanuel \u7684\u62a5\u9053\uff0cStella Immanuel \u662f\u4e00\u4f4d\u8457\u540d\u7684\u53cd\u75ab\u82d7\u533b\u751f\uff0c\u5979\u58f0\u79f0\u67d0\u4e9b\u533b\u5b66\u6cbb\u7597\u79d8\u5bc6\u4f7f\u7528\u4e86\u201c\u722c\u884c\u52a8\u7269\u201d\u7684 DNA\u3002\u81ea\u4ece Fox 26 \u89e3\u96c7\u4e86\u5979\u4e4b\u540e\uff0cHecker \u5c31\u72ec\u81ea\u51fa\u51fb\uff0c\u5927\u8086\u5ba3\u4f20\u4f0a\u7ef4\u83cc\u7d20\u7b49\u5176\u4ed6\u865a\u5047\u7597\u6cd5\uff0c\u5e76\u5728\u793e\u4ea4\u5a92\u4f53\u4e0a\u653e\u5927\u4e86\u5bf9\u75ab\u82d7\u7684\u62c5\u5fe7\u3002\u524d Facebook \u5458\u5de5\u548c\u81ea\u5c01\u7684\u201c\u544a\u5bc6\u8005\u201d\u6469\u6839\u5361\u66fc\u5728 GiveSendGo \u4e0a\u83b7\u5f97\u4e86\u66f4\u5927\u7684\u6210\u529f\uff0c\u7b79\u96c6\u4e86\u8d85\u8fc7 508,000 \u7f8e\u5143\u3002 Kahmann \u5728\u53c2\u52a0 Veritas \u9879\u76ee\u540e\uff0c\u5728\u5185\u90e8\u6587\u4ef6\u4e2d\u8be6\u7ec6\u8bf4\u660e\u4e86 Facebook \u5982\u4f55\u964d\u7ea7\u201c\u75ab\u82d7\u72b9\u8c6b\u201d\u5185\u5bb9\u540e\uff0c\u6210\u4e3a\u4fdd\u5b88\u6d3e\u5708\u5b50\u4e2d\u7684\u70c8\u58eb\u3002\u7531\u4e8e Facebook \u79ef\u6781\u5ba3\u4f20\u5176\u6291\u5236\u75ab\u82d7\u9519\u8bef\u4fe1\u606f\u7684\u52aa\u529b\uff0c\u5176\u4e2d\u5305\u62ec\u964d\u4f4e\u8bef\u5bfc\u6027 COVID-19 \u5185\u5bb9\u7684\u53ef\u89c1\u6027\uff0c\u56e0\u6b64\u4ed6\u7684\u6cc4\u5bc6\u5e76\u6ca1\u6709\u771f\u6b63\u6210\u4e3a\u91cd\u78c5\u70b8\u5f39\uff1b Kahmann \u53d1\u5e03\u7684\u6587\u4ef6\u6216\u591a\u6216\u5c11\u6d89\u53ca\u8be5\u5e73\u53f0\u5982\u4f55\u6267\u884c\u5176\u653f\u7b56\u7684\u7ec6\u8282\u3002\u7136\u800c\uff0c\u4ed6\u73b0\u5728\u63a5\u53d7\u4e86\u798f\u514b\u65af\u65b0\u95fb\u7684\u5854\u514b\u5361\u5c14\u68ee\u548c Infowars \u7684\u4e9a\u5386\u514b\u65af\u743c\u65af\u7684\u91c7\u8bbf\uff0c\u58f0\u79f0 Facebook \u6b63\u5728\u5f00\u5c55\u5f71\u5b50\u884c\u52a8\u4ee5\u9690\u85cf\u6709\u5173\u75ab\u82d7\u7684\u771f\u76f8\uff0c\u8fd9\u6709\u52a9\u4e8e\u53cd\u75ab\u82d7\u53d9\u8ff0\u3002 Infowars \u548c Project Veritas \u90fd\u63d0\u5347\u4e86 Kahmann \u7684 GiveSendGo \u9875\u9762\u7684\u94fe\u63a5\u3002\nGiveSendGo \u4e0a\u7684\u5176\u4ed6\u75ab\u82d7\u76f8\u5173\u6d3b\u52a8\u66f4\u591a\u5730\u4e0e\u9879\u76ee\u6709\u5173\uff0c\u800c\u4e0d\u662f\u7279\u5b9a\u7684\u4eba\u3002\u6700\u8fd1\u4e3a\u4e00\u90e8\u5173\u4e8e\u4e0d\u7ed9\u5b69\u5b50\u63a5\u79cd\u75ab\u82d7\u7684\u597d\u5904\u7684\u7eaa\u5f55\u7247\u7b79\u6b3e\u5df2\u7b79\u96c6\u4e86\u8fd1 30,000 \u7f8e\u5143\uff0c\u800c\u53e6\u4e00\u573a\u5728\u65f6\u4ee3\u5e7f\u573a\u5f20\u8d34\u6709\u5173\u75ab\u82d7\u4f24\u5bb3\u7684\u5e7f\u544a\u724c\u7684\u7b79\u6b3e\u6d3b\u52a8\u5df2\u7b79\u96c6\u4e86\u7ea6 2,300 \u7f8e\u5143\u3002\u4f46\u662f\uff0c\u4e0d\u4ec5\u4ec5\u662f GiveSendGo \u4fc3\u8fdb\u6350\u8d60\u4ee5\u62b5\u6297\u51a0\u72b6\u75c5\u6bd2\u75ab\u82d7\u3002 GoFundMe \u4e5f\u4e3a\u8fd9\u4e9b\u4e8b\u4e1a\u63d0\u4f9b\u670d\u52a1\u3002\u7136\u800c\uff0c\u6000\u7591\u8bba\u8005\u6709\u4e00\u4e2a\u53d8\u901a\u529e\u6cd5\uff1a\u4ed6\u4eec\u7b79\u96c6\u8d44\u91d1\u4e0d\u662f\u4e3a\u4e86\u53cd\u5bf9\u75ab\u82d7\u672c\u8eab\uff0c\u800c\u662f\u4e3a\u4e86\u53cd\u5bf9\u75ab\u82d7\u89c4\u5b9a\u3002\u4e8b\u5b9e\u4e0a\uff0cGoFundMe \u6709\u8bb8\u591a\u7c7b\u4f3c\u7684\u6d3b\u52a8\u3002\u4e00\u9879\u5df2\u7b79\u96c6\u8fd1 170,000 \u7f8e\u5143\u7684\u7b79\u6b3e\u6d3b\u52a8\u6b63\u5728\u8d44\u52a9\u9488\u5bf9\u4f11\u65af\u987f\u536b\u7406\u516c\u4f1a\u533b\u9662\u7684\u8bc9\u8bbc\uff0c\u8be5\u533b\u9662\u8981\u6c42\u5176\u533b\u52a1\u4eba\u5458\u63a5\u79cd COVID-19 \u75ab\u82d7\u3002\u636e\u533b\u9662\u79f0\uff0c99% \u7684\u5de5\u4f5c\u4eba\u5458\u6700\u7ec8\u63a5\u79cd\u4e86\u75ab\u82d7\u3002\u7136\u800c\uff0c\u4e00\u4f4d\u540d\u53eb\u8a79\u59ae\u5f17\u00b7\u5e03\u91cc\u5947\u65af\u7684\u524d\u4f11\u65af\u987f\u536b\u7406\u516c\u4f1a\u62a4\u58eb\u548c\u5176\u4ed6 100 \u591a\u540d\u5458\u5de5\u6b63\u8bd5\u56fe\u5c06\u5979\u5bf9\u533b\u9662\u7684\u6307\u63a7\u63d0\u4ea4\u7ed9\u6700\u9ad8\u6cd5\u9662\u3002\u4e00\u540d\u5730\u533a\u6cd5\u5b98\u5df2\u7ecf\u9a73\u56de\u4e86\u8bc9\u8bbc\u3002\u5728\u5979\u7684 GoFundMe \u9875\u9762\u4e0a\uff0c\u5979\u53d1\u5e03\u4e86\u8be5\u7ec4\u7ec7\u5728 6 \u6708\u4efd\u5bf9\u4f11\u65af\u987f\u536b\u7406\u516c\u4f1a\u4e3e\u884c\u7684\u6297\u8bae\u6d3b\u52a8\uff0c\u5e76\u5f3a\u8c03\u4e86\u4e00\u4e2a\u4e8b\u5b9e\uff0c\u5373\u6765\u81ea\u7f8e\u56fd\u524d\u7ebf\u533b\u751f\u7684\u4e09\u4eba\uff0c\u8fd9\u662f\u4e00\u4e2a\u53f3\u7ffc\u533b\u7597\u7ec4\u7ec7\uff0c\u5728\u4f20\u64ad\u53cd\u75ab\u82d7\u865a\u5047\u4fe1\u606f\u65b9\u9762\u6709\u7740\u957f\u671f\u7684\u8bb0\u5f55\uff0c\u53d1\u8868\u4e86\u6f14\u8bb2\u3002\u65af\u7279\u62c9\u00b7\u4f0a\u66fc\u7ebd\u5c14 (Stella Immanuel) \u4e5f\u5411\u4eba\u7fa4\u8bb2\u8bdd\u3002 GoFundMe \u8fd8\u4e3e\u529e\u4e86\u53e6\u4e00\u573a\u7b79\u6b3e\u6d3b\u52a8\uff0c\u65e8\u5728\u53d6\u6d88\u5f17\u5409\u5c3c\u4e9a\u5927\u5b66\u5b66\u751f\u7684\u7c7b\u4f3c\u75ab\u82d7\u89c4\u5b9a\uff0c\u8be5\u6d3b\u52a8\u5df2\u7b79\u96c6\u4e86\u8d85\u8fc7 23,000 \u7f8e\u5143\u3002\u8be5\u8fd0\u52a8\u58f0\u79f0\u4ee3\u8868\u7236\u6bcd\u5e0c\u671b\u5bf9\u56fd\u5bb6\u63d0\u51fa\u6cd5\u5f8b\u6311\u6218\uff0c\u56e0\u4e3a\u4ed6\u4eec\u62c5\u5fc3\u75ab\u82d7\u4f1a\u5bf9\u5728\u8fd9\u4e9b\u5b66\u6821\u5c31\u8bfb\u7684\u5b69\u5b50\u9020\u6210\u201c\u957f\u671f\u7684\u3001\u53ef\u80fd\u662f\u6c38\u4e45\u6027\u7684\u4f24\u5bb3\u201d\u3002 \uff08\u957f\u671f\u4ee5\u6765\uff0c\u5927\u5b66\u8981\u6c42\u5bf9\u9ebb\u75b9\u548c\u8111\u819c\u708e\u7b49\u75be\u75c5\u8fdb\u884c\u514d\u75ab\u63a5\u79cd\u4e00\u76f4\u662f\u6807\u51c6\u505a\u6cd5\u3002\uff09\u90e8\u5206\u6536\u76ca\u7528\u4e8e\u652f\u4ed8\u5f8b\u5e08\u7684\u8d39\u7528\uff0c\u8fd9\u4e9b\u5f8b\u5e08\u5df2\u5411\u5f17\u5409\u5c3c\u4e9a\u5927\u5b66\u548c\u5a01\u5ec9\u739b\u4e3d\u5b66\u9662\u7b49\u5b66\u6821\u53d1\u9001\u4fe1\u51fd\uff0c\u6566\u4fc3\u4ed6\u4eec\u201c\u5728\u60a8\u7684\u5b66\u751f\u88ab\u8fd9\u4e9b\u5371\u9669\u7684\u5b9e\u9a8c\u6027\u63a5\u79cd\u75ab\u82d7\u4f24\u5bb3\u6216\u6740\u6b7b\u4e4b\u524d\u201d\u64a4\u9500\u8fd9\u4e9b\u89c4\u5b9a\u3002\u9664\u4e86\u4e3a\u6297\u51fb\u5f17\u5409\u5c3c\u4e9a\u548c\u4f11\u65af\u987f\u536b\u7406\u516c\u4f1a\u7684\u4efb\u52a1\u800c\u8fdb\u884c\u7684\u7b79\u6b3e\u6d3b\u52a8\u4e4b\u5916\uff0c\u8fd8\u6709\u8bb8\u591a\u5176\u4ed6 GoFundMe \u6d3b\u52a8\u6765\u652f\u6301\u90a3\u4e9b\u9009\u62e9\u79bb\u804c\u800c\u4e0d\u662f\u63a5\u79cd\u75ab\u82d7\u7684\u4eba\u3002\u7136\u800c\uff0c\u4e0e GiveSendGo \u4e0d\u540c\uff0cGoFundMe \u4f3c\u4e4e\u786e\u5b9e\u5728\u7b79\u6b3e\u9875\u9762\u4e0a\u653e\u7f6e\u4e86\u5e26\u6709 CDC \u548c WHO \u4fe1\u606f\u94fe\u63a5\u7684\u6a2a\u5e45\uff0c\u4ee5\u4fc3\u8fdb\u75ab\u82d7\u72b9\u8c6b\u3002 \u201c\u7b79\u6b3e\u4ee5\u5ba3\u4f20\u6709\u5173\u75ab\u82d7\u7684\u9519\u8bef\u4fe1\u606f\u7684\u7b79\u6b3e\u6d3b\u52a8\u8fdd\u53cd\u4e86 GoFundMe \u7684\u670d\u52a1\u6761\u6b3e\uff0c\u5e76\u5c06\u4ece\u5e73\u53f0\u4e0a\u5220\u9664\uff0c\u201dGoFundMe \u7684\u9ad8\u7ea7\u901a\u8baf\u7ecf\u7406\u83ab\u59ae\u5361\u00b7\u79d1\u8d1d\u7279\u5728\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\u4e2d\u5199\u9053\u3002 \u201c\u5728\u8fc7\u53bb\u51e0\u5e74\u4e2d\uff0c\u6211\u4eec\u5df2\u7ecf\u79fb\u9664\u4e86 250 \u591a\u4e2a\u8bd5\u56fe\u5ba3\u4f20\u4e0e\u75ab\u82d7\u76f8\u5173\u7684\u9519\u8bef\u4fe1\u606f\u7684\u7b79\u6b3e\u6d3b\u52a8\u3002\u6cd5\u5f8b\u6311\u6218\u7684\u7b79\u6b3e\u6d3b\u52a8\u4e0d\u4f1a\u8fdd\u53cd\u6211\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u3002\u8bdd\u867d\u5982\u6b64\uff0c\u6211\u4eec\u5c06\u7ee7\u7eed 24/7 \u5168\u5929\u5019\u76d1\u63a7\u5e73\u53f0\uff0c\u5e76\u5220\u9664\u4efb\u4f55\u8bd5\u56fe\u4f20\u64ad\u6709\u5173\u75ab\u82d7\u7684\u9519\u8bef\u4fe1\u606f\u7684\u7b79\u6b3e\u6d3b\u52a8\u3002\u201d GiveSendGo \u6ca1\u6709\u56de\u5e94\u6211\u7684\u8bc4\u8bba\u8bf7\u6c42\uff0c\u4f3c\u4e4e\u6ca1\u6709\u4efb\u4f55\u6b64\u7c7b\u75ab\u82d7\u9519\u8bef\u4fe1\u606f\u653f\u7b56\u6216\u76d1\u63a7\u505a\u6cd5\uff0c\u8fd9\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4e0e\u8be5\u7f51\u7ad9\u4e4b\u524d\u5728\u6781\u7aef\u4e3b\u4e49\u56e2\u4f53\u548c\u9009\u4e3e\u9634\u8c0b\u8bba\u8005\u65b9\u9762\u7684\u4e0d\u4f5c\u4e3a\u4e00\u81f4\u3002\u8fd9\u4e9b\u7b79\u6b3e\u6d3b\u52a8\u7684\u68d8\u624b\u4e4b\u5904\u5728\u4e8e\uff0c\u5c24\u5176\u662f\u5728 GoFundMe \u4e0a\uff0c\u4ed6\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u7528\u66f4\u5e7f\u6cdb\u3001\u5d07\u9ad8\u7684\u8bed\u8a00\u8868\u8fbe\u4e86\u4ed6\u4eec\u7684\u53cd\u75ab\u82d7\u76ee\u6807\u2014\u2014\u65e0\u8bba\u662f\u5173\u4e8e\u4e2a\u4eba\u533b\u7597\u9009\u62e9\u6216\u4e0e\u5ba1\u67e5\u6280\u672f\u884c\u4e1a\u4f5c\u6597\u4e89\uff0c\u8fd8\u662f\u5173\u4e8e\u5b9e\u8df5\u201c\u771f\u6b63\u7684\u65b0\u95fb\u201d\u548c\u8bb2\u8ff0\u771f\u5b9e\u771f\u76f8\u3002\u6b63\u5982 Daily Beast \u62a5\u9053\u7684\u90a3\u6837\uff0c\u7528\u6237\u8fc7\u53bb\u5df2\u7ecf\u627e\u5230\u4e86\u7ed5\u8fc7 GoFundMe \u7981\u6b62\u75ab\u82d7\u9519\u8bef\u4fe1\u606f\u7684\u65b9\u6cd5\uff0c\u4ed6\u4eec\u4ee5\u201c\u533b\u7597\u81ea\u7531\u201d\u548c\u201c\u77e5\u60c5\u540c\u610f\u201d\u7b49\u53cd\u75ab\u82d7\u72d7\u54e8\u7684\u540d\u4e49\u7cbe\u5fc3\u7b56\u5212\u4e86\u4ed6\u4eec\u7684\u6d3b\u52a8\u3002\u7531\u4e8e GoFundMe \u786e\u5b9e\u660e\u786e\u9f13\u52b1\u7528\u6237\u4f7f\u7528\u5176\u670d\u52a1\u7b79\u96c6\u6cd5\u5f8b\u8d39\u7528\uff0c\u56e0\u6b64\u8fd9\u4e9b\u7528\u6237\u901a\u5e38\u4f1a\u715e\u8d39\u82e6\u5fc3\u5730\u6307\u51fa\u4ed6\u4eec\u7684\u7b79\u6b3e\u6d3b\u52a8\u662f\u4e3a\u4e86\u6253\u5b98\u53f8\u3002\u6211\u5411 GoFundMe \u5f3a\u8c03\u7684\u53cd\u6388\u6743\u7b79\u6b3e\u6d3b\u52a8\uff0c\u5176\u4e2d\u6307\u5b9a\u6350\u6b3e\u7528\u4e8e\u652f\u4ed8\u6cd5\u5f8b\u8d39\u7528\uff0c\u4ecd\u7136\u5728\u7f51\u7ad9\u4e0a\u3002\u7136\u800c\uff0c\u4ed6\u4eec\u7684\u7b79\u6b3e\u547c\u5401\u901a\u5e38\u5305\u542b\u6709\u5173\u75ab\u82d7\u7684\u6050\u60e7\u8a00\u8bba\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u8be5\u5e73\u53f0\u8bd5\u56fe\u6253\u51fb\u75ab\u82d7\u9519\u8bef\u4fe1\u606f\uff0c\u53d1\u73b0\u81ea\u5df1\u8d70\u5728\u5176\u4ed6\u5927\u578b\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u719f\u6089\u7684\u5185\u5bb9\u5ba1\u6838\u94a2\u4e1d\u4e0a\uff0c\u8fd9\u4e0d\u53ef\u907f\u514d\u5730\u7559\u4e0b\u4e86\u9519\u8bef\u4fe1\u606f\u63d0\u4f9b\u8005\u8bd5\u56fe\u5229\u7528\u7684\u6f0f\u6d1e\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5c06\u81ea\u5df1\u5b9a\u4f4d\u4e3a\u8a00\u8bba\u81ea\u7531\u66ff\u4ee3\u65b9\u6848\u7684 GiveSendGo \u975e\u5e38\u4e50\u4e8e\u63a5\u7eb3\u4ece GoFundme \u5f00\u59cb\u7684\u4eba\u3002 Future Tense \u662f Slate\u3001New America \u548c\u4e9a\u5229\u6851\u90a3\u5dde\u7acb\u5927\u5b66\u7684\u5408\u4f5c\u9879\u76ee\uff0c\u7814\u7a76\u65b0\u5174\u6280\u672f\u3001\u516c\u5171\u653f\u7b56\u548c\u793e\u4f1a\u3002", "note_en": "Part of the reason that misinformation about vaccines is so intractable is that it can be very lucrative. For years anti-vaccine figures have made money publishing books and  giving speeches, and only in the past couple of years have major sites  like YouTube started preventing anti-vaxxers from directly earning revenue from advertising. During the pandemic, as the coronavirus created new markets for health hoaxes, conspiracy theorists have been able to make money online by using the misinformation that they publicize on major sites like Facebook to sell  supplements and  books to followers via e-commerce shops. Now, vaccine skeptics with large followings are turning to crowdfunding platforms\u2014both the relatively obscure GiveSendGo and the decidedly mainstream GoFundMe\u2014to monetize their activities, often to the tune of hundreds of thousands of dollars.\n        Vaccine hesitancy may be the most potent force choking off the country\u2019s attempts to escape the coronavirus pandemic. The U.S. finally hit the Biden administration\u2019s goal of getting at least the first dose to  70 percent of Americans on Monday, a little less than a month after its July 4 target date, but this milestone still isn\u2019t enough for the country to fend off the highly contagious Delta variant that\u2019s now bowling over the population\u2014and the vast majority of people now dying from COVID-19 are unvaccinated.\n  On GiveSendGo and GoFundMe, vaccine truthers often portray themselves as little guys in a fight against the pro-vaccine tyranny of big pharma, big tech, and big government, and in doing so rake in money from thousands of sympathetic donors. They\u2019re able to do it in part because of lax standards and moderation blind spots, and in part by operating in gray areas.\n    Start with GiveSendGo, a Christian crowdfunding platform that  launched in 2015 as a site that was mainly intended to raise money for missionary trips and children needing medical treatment. There\u2019s plenty of that on GiveSendGo, but it\u2019s also become the preferred tool for far-right figures to raise cash for fringe causes, and not entirely by accident. By 2017, the site was casting itself as a safe haven for people who weren\u2019t welcome on its much larger competitor. \u201cGofundme has taken a stance against Christians and has been taking down campaigns that they did not agree with,\u201d a GiveSendGo blog post from around that time  read. As mainstream crowdfunding sites became stricter about banning people spreading misinformation and hate, and explicitly far-right alternatives like \u201cHatreon\u201d proved to be poorly designed, GiveSendGo emerged as an attractive option for extremists. It became notorious  this January when members of the Proud Boys and other extremist groups used the site to fund travel and supplies for the Capitol riot, and then to raise money to cover legal fees after many of them were arrested. PayPal  cut ties with GiveSendGo a few days after Jan. 6. GiveSendGo claimed that it did not want to \u201c take sides\u201d on the issue. (The site  now says it uses \u201ca variety of payment processing companies\u201d but does not identify them by name.)\n      Over the past few months, GiveSendGo has been hosting fundraisers for causes casting doubt on vaccines that have racked up huge sums.\n  A  crowdfunding campaign for \u201cindependent journalist\u201d Ivory Hecker, for instance, has raised nearly $200,000 to support her \u201ctrue journalism.\u201d It\u2019s not entirely clear what the money is being spent on, but Hecker achieved infamy  in June when she was working as a local reporter for Fox 26 Houston and interrupted a weather report to allege that the network was \u201cmuzzling\u201d her. She then announced on-air that she was providing \u201cbehind-the-scenes\u201d recordings from Fox to conservative gotcha artist James O\u2019Keefe and his group Project Veritas. Hecker had a number of grievances with the network, but chief among them was its coverage of COVID-19 and the vaccines. She alleged that Fox 26 didn\u2019t want to give the vaccines \u201c negative press\u201d and that it was suppressing her coverage of hydroxychloroquine, a  discredited cure for COVID-19. Hecker also accused the network of stifling her reporting promoting Stella Immanuel, a prominent anti-vax doctor who\u2019s claimed that some medical treatments secretly use DNA from \u201c reptilians.\u201d Since Fox 26 fired her, Hecker has struck out on her own, trumpeting other phony cures like  Ivermectin and amplifying fears about the vaccines on social media.\n      Former Facebook employee and self-styled \u201cwhistleblower\u201d Morgan Kahmann has enjoyed even more success  on GiveSendGo, raising more than $508,000. Kahmann became something of a martyr in conservative circles after he also went to Project Veritas with internal documents detailing how Facebook demotes \u201cvaccine hesitancy\u201d content. His leaks didn\u2019t really amount to a bombshell since Facebook has  aggressively publicized its efforts to suppress vaccine misinformation, which includes reducing the visibility of misleading COVID-19 content; the documents Kahmann released more or less go into the minutiae of how the platform is implementing its policy. However, he\u2019s now done interviews with Tucker Carlson on Fox News and Alex Jones on Infowars purporting that Facebook is running a shadow operation to hide the truth about the vaccines, which lends itself to anti-vax narratives. Infowars and Project Veritas have both promoted links to Kahmann\u2019s GiveSendGo page.\n    Other vaccine-related campaigns on GiveSendGo have more to do with projects than particular people. A recent fundraiser for a documentary about the benefits of not vaccinating kids has raised nearly $30,000, while another to put up a Times Square billboard about vaccine injuries has raised about $2,300.\n  But it isn\u2019t just GiveSendGo, though, that\u2019s facilitating donations for efforts to resist coronavirus vaccines. GoFundMe is also providing services to these causes. There, however, skeptics have a workaround: They\u2019re not raising money to oppose vaccines, per se, but to oppose vaccine mandates.\n    Indeed, GoFundMe has a host of similar campaigns. One  fundraiser that has raised nearly $170,000 is financing a lawsuit against the Houston Methodist Hospital, which is requiring that its medical staff get a COVID-19 vaccine. According to the hospital,  99 percent of the staff ended up getting vaccinated. However, a former Houston Methodist nurse named Jennifer Bridges and more than 100 other employees are trying to take her case against the hospital to the Supreme Court. A district judge has already  dismissed the suit. On her GoFundMe page, she posted about a protest that the group held against Houston Methodist in June and highlighted the fact that three people from America\u2019s Frontline Doctors, a right-wing medical organization that has a long  track record of spreading anti-vaccine disinformation, gave speeches. Stella Immanuel also spoke to the crowd.\n    GoFundMe is also hosting  another fundraiser aimed at tearing down similar vaccine mandates for students at Virginia universities, which has raised more than $23,000. The campaign claims to be representing parents who want to mount a legal challenge against the state out of concern that the vaccines will cause \u201clong-term, possibly permanent, harm\u201d to their children attending these schools. (It\u2019s long been standard practice for universities to require immunizations for diseases like measles and meningitis.) Part of the proceeds have gone to paying attorneys who have sent letters to schools such as the University of Virginia and the College of William &amp; Mary urging them to revoke the mandates \u201cbefore your students are harmed or killed by these dangerous experimental inoculations.\u201d Besides the fundraisers to fight the Virginia and Houston Methodist mandates, there are numerous other GoFundMe campaigns to support people who are choosing to leave their jobs instead of getting the vaccine. GoFundMe does, however, appear to be placing banners with links to information from the CDC and WHO on fundraising pages that promote vaccine hesitancy, unlike GiveSendGo.\n          \u201cFundraisers raising money to promote misinformation about vaccines violate GoFundMe\u2019s terms of service and will be removed from the platform,\u201d GoFundMe\u2019s senior communication manager Monica Corbett wrote in an email. \u201cOver the last several years, we have removed over 250 fundraisers attempting to promote misinformation related to vaccines. Fundraisers for legal challenges do not violate our terms of service. With that said, we will continue to monitor the platform 24/7 and remove any fundraiser attempting to spread misinformation about vaccines.\u201d GiveSendGo, which did not respond to my request for comment, does not appear to have any such vaccine misinformation policies or monitoring practices, which is largely in step with the site\u2019s previous inaction when it comes to extremist groups and election conspiracy theorists.\n      What\u2019s tricky about these fundraisers, especially on GoFundMe, is that many of them couch their anti-vaccine goals in broader, lofty language\u2014whether it\u2019s about personal medical choices or battling a censorious tech industry or about practicing \u201ctrue journalism\u201d and telling the real truth. As the Daily Beast  reported, users have in the past found ways to get around GoFundMe\u2019s ban on vaccine misinformation by crafting their campaigns in the name of anti-vax dog whistles like \u201cmedical freedom\u201d and \u201cinformed consent.\u201d Since GoFundMe does explicitly encourage users to use its services to raise money for legal fees, these users often take pains to specify that their fundraisers are for legal battles. The anti-mandate fundraisers I highlighted to GoFundMe, which specify that the donations are for legal fees, are still up on the site. Their fundraising appeals, though, often contain fear-mongering language about the vaccines. At the same time, the platform has tried to crack down on vaccine misinformation, finding itself walking the content-moderation tightrope that other large social media platforms are familiar with, which inevitably leaves loopholes in place that purveyors of misinformation try to exploit. And GiveSendGo, which positions itself as a free speech alternative, has proven more than happy to  take in people kicked off of GoFundme.\n  Future Tense is a partnership of  Slate,  New America, and  Arizona State University that examines emerging technologies, public policy, and society.", "posttime": "2021-08-09 03:05:16", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "business,\u75ab\u82d7", "title": "\u4f20\u64ad\u75ab\u82d7\u9519\u8bef\u4fe1\u606f\u7684\u5229\u6da6\u4e30\u539a\u7684\u4e1a\u52a1\u6b63\u5728\u4f17\u7b79", "title_en": "The Lucrative Business of Spreading Vaccine Misinformation is Being Crowdfunded", "transed": 1, "url": "https://slate.com/technology/2021/08/givesendgo-gofundme-vaccine-skeptics-covid-misinformation.html", "via": "", "real_tags": ["business", "\u75ab\u82d7"]}, {"category": "", "categoryclass": "", "imagename": "2308561f54beeb0e4d0b4921a7f3f8a3.jpg", "infoid": 1072166, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "2021 \u5e74 7 \u6708 16 \u65e5 WebAssembly (Wasm) \u5728\u5f53\u4eca\u7684\u4e91\u539f\u751f\u4e16\u754c\u4e2d\u6709\u8bb8\u591a\u5e94\u7528\u7a0b\u5e8f\u2014\u2014WASI\u3001\u8fb9\u7f18\u4e91\u8ba1\u7b97\u3001Proxy-Wasm \u548c\u7528\u4e8e\u65e0\u670d\u52a1\u5668\u529f\u80fd\u7684\u4e91\u539f\u751f\u8fd0\u884c\u65f6\uff0c\u4ec5\u4e3e\u51e0\u4f8b\u3002\u95ee\u9898\u662f\uff0c\u4e3a\u4ec0\u4e48 WebAssembly \u53d8\u5f97\u5982\u6b64\u6d41\u884c\uff1f\u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u8ba9\u6211\u4eec\u5148\u770b\u770b WebAssembly \u7684\u57fa\u672c\u5c5e\u6027\u3002 WebAssembly \u662f\u4e00\u79cd\u5b89\u5168\u3001\u53ef\u79fb\u690d\u4e14\u4f4e\u7ea7\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4\u683c\u5f0f\u3002\u8be6\u7ec6\u8bf4\u660e WebAssembly \u7684\u4e00\u4e9b\u5173\u952e\u5c5e\u6027\uff0c\u5b83\u662f\uff1a Open\uff1a\u8fd9\u610f\u5473\u7740\u5b83\u662f\u53ef\u5d4c\u5165\u7684\u3002\u5b83\u5177\u6709\u4e0e\u5916\u90e8\u73af\u5883\u7684\u53ef\u5b9a\u5236\u754c\u9762\u3002\u4f8b\u5982\uff0c\u5728 WASI \u4e2d\uff0cWebAssembly \u53ef\u4ee5\u8fd0\u884c\u5728\u62bd\u8c61\u7684\u64cd\u4f5c\u7cfb\u7edf\u5e73\u53f0\u4e0a\u3002\u53e6\u4e00\u4e2a\u4f8b\u5b50\u662f Proxy-Wasm\uff1aWasm \u6a21\u5757\u4e0e\u5916\u90e8\u4ee3\u7406\u5e94\u7528\u7a0b\u5e8f\u901a\u4fe1\u4ee5\u64cd\u7eb5\u6216\u5904\u7406 HTTP\u3001UDP \u6216 TCP \u6d41\u91cf\u7b49\u6d41\u91cf\u3002\u663e\u7136\u8fd8\u6709\u5176\u4ed6\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u53ef\u4ee5\u5b9e\u73b0\u4e0e WebAssembly \u7c7b\u4f3c\u7684\u76ee\u6807\uff0c\u4f46\u6b63\u5982\u6211\u4eec\u5c06\u770b\u5230\u7684\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709\u4e00\u5b9a\u7684\u5c40\u9650\u6027\uff1aNaCI \u662f Google \u7684\u8f6f\u4ef6\u6545\u969c\u9694\u79bb (SFI) \u89e3\u51b3\u65b9\u6848\u3002\u5b83\u662f\u5b89\u5168\u7684\u3001\u53ef\u5d4c\u5165\u7684\u548c\u591a\u8bed\u8a00\u7684\u3002\u5b83\u53ef\u4ee5\u901a\u8fc7\u5e94\u7528 SFI \u6280\u672f\u8fd0\u884c\u4e0d\u53d7\u4fe1\u4efb\u7684\u4ee3\u7801\u3002\u7136\u800c\uff0c\u7531\u4e8e NaCl \u662f\u57fa\u4e8e\u539f\u751f\u4e8c\u8fdb\u5236\u7684\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u89e3\u51b3\u65b9\u6848\u3002 eBPF \u662f\u4e00\u4e2a\u5b89\u5168\u7684\u3001\u53ef\u5d4c\u5165\u7684\u3001\u53ef\u79fb\u690d\u7684\u7a0b\u5e8f\uff0c\u4e3b\u8981\u7528\u4e8e\u5185\u6838\u3002\u7136\u800c\uff0c\u7531\u4e8e\u5176\u4e25\u683c\u7684\u9650\u5236\uff0c\u5b83\u51e0\u4e4e\u4e0d\u662f\u591a\u8bed\u8a00\u7684\u3002\nJava \u662f\u4e00\u79cd\u901a\u7528\u8bed\u8a00\uff0c\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u8fd0\u884c\u3002\u7f3a\u70b9\u662f\u5b64\u7acb\u7684\u5b9e\u4f53\u4e0d\u662f Java \u7684\u4e00\u7b49\u516c\u6c11\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u66ff\u4ee3\u89e3\u51b3\u65b9\u6848\u90fd\u6ca1\u6709\u5c55\u793a WebAssembly \u4e2d\u4f53\u73b0\u7684\u6240\u6709\u5c5e\u6027\u3002\u53e6\u4e00\u65b9\u9762\uff0cWebAssembly \u4e0e Java \u4e00\u6837\u53ef\u79fb\u690d\uff0c\u4e0e NaCl \u6216 Seccomp \u4e00\u6837\u5b89\u5168\uff0c\u4e0e Lua \u4e00\u6837\u53ef\u5d4c\u5165\uff0c\u5e76\u4e14\u4e0e Native Library \u4e00\u6837\u591a\u8bed\u8a00\u3002\u4e0e\u5e02\u573a\u4e0a\u73b0\u6709\u7684\u89e3\u51b3\u65b9\u6848\u76f8\u6bd4\uff0cWebAssembly \u662f\u4e00\u4e2a\u51fa\u8272\u7684\u65b0\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u8bbe\u8ba1\u5168\u9762\uff0c\u65e8\u5728\u540c\u65f6\u6ee1\u8db3\u591a\u4e2a\u76ee\u6807\u3002\u867d\u7136\u5176\u4ed6\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u5728\u67d0\u4e9b\u65b9\u9762\u7f3a\u4e4f\uff0c\u4f46 WebAssembly \u662f\u4e00\u4e2a\u6210\u529f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u65e0\u6cd5\u5b9e\u73b0\u7684\u76ee\u6807\u3002\u7efc\u4e0a\u6240\u8ff0\uff0cWebAssembly \u7684\u72ec\u7279\u4f18\u52bf\u4f7f\u5176\u5728\u4e91\u539f\u751f\u4e16\u754c\u4e2d\u8131\u9896\u800c\u51fa\u3002\u4e0e Linux \u4e2d\u53ef\u6267\u884c\u6587\u4ef6\u7684\u5bf9\u8c61\u683c\u5f0f Executable and Linkable Format (ELF) \u4e00\u6837\uff0cWebAssembly \u4e5f\u662f\u4e00\u79cd\u5bf9\u8c61\u683c\u5f0f\u3002\u7531\u4e8e Linux \u5b9a\u4e49\u4e86\u53ef\u6267\u884c\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b API\uff0c\u56e0\u6b64\u5916\u90e8 Wasm \u5d4c\u5165\u5f0f\u63a5\u53e3\u5b9a\u4e49\u4e86\u7531 Wasm \u6a21\u5757\u5bfc\u5165/\u5bfc\u51fa\u7684\u51fd\u6570\u548c\u7b26\u53f7\u3002\u8fd9\u4ea7\u751f\u4e86 WebAssembly \u7684\u5404\u79cd\u63a5\u53e3\u7c7b\u578b\u3002\u7531\u4e8e\u4ee5\u4e0b\u539f\u56e0\uff0c\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5d4c\u5165 WebAssembly \u5f88\u91cd\u8981\u3002\u9996\u5148\uff0cWebAssembly \u4e3a\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u5b89\u5168\u7684\u53ef\u6269\u5c55\u6027\u673a\u5236\u3002\u5176\u6b21\uff0c\u5e94\u7528\u7a0b\u5e8f\u548c Wasm \u6a21\u5757\u901a\u8fc7\u53cc\u5411 ABI \u548c API \u8fdb\u884c\u901a\u4fe1\u3002\u6700\u540e\uff0cWebAssembly \u5141\u8bb8\u7528\u6237\u4ee5\u4efb\u4f55\u8bed\u8a00\u5b89\u5168\u3001\u4fbf\u643a\u5730\u5b89\u88c5\u6269\u5c55\u3002 Wasm \u5d4c\u5165\u5f0f\u63a5\u53e3\u7684\u4e24\u4e2a\u4e3b\u8981\u793a\u4f8b\u662f\uff1aWebAssembly for Proxies (Proxy-Wasm) \u548c WASI \u53ef\u6267\u884c\u63a5\u53e3\u3002\u51fa\u4e8e\u672c\u6587\u7684\u76ee\u7684\uff0c\u8ba9\u6211\u4eec\u5173\u6ce8 Proxy-Wasm \u7684\u5b89\u5168\u6269\u5c55\u673a\u5236\u3002\u7531 WebAssembly \u63d0\u4f9b\u652f\u6301\uff0cProxy-Wasm \u662f\u4ee3\u7406\u670d\u52a1\u5668\u7684\u53ef\u6269\u5c55\u63a5\u53e3\u3002 Envoy \u4f5c\u4e3a\u53c2\u8003\u5b9e\u73b0\u3002 Proxy-Wasm \u63d0\u4f9b\u4e86\u4e00\u79cd\u5b89\u5168\u4e14\u53ef\u79fb\u690d\u7684\u65b9\u5f0f\u6765\u64cd\u7eb5\u4ee3\u7406\u6d41\u91cf\u3002\u5728 WebAssembly \u4e4b\u524d\uff0cEnvoy \u63d0\u4f9b\u4e86\u9759\u6001 C++ \u5e93\u4f5c\u4e3a\u5176\u6269\u5c55\u673a\u5236\u3002\u6ca1\u6709\u63d0\u4f9b\u9694\u79bb\uff0cC++ \u662f\u552f\u4e00\u53d7\u652f\u6301\u7684\u8bed\u8a00\u3002\u56e0\u6b64\uff0c\u66f4\u65b0\u8fc7\u53bb\u603b\u662f\u9700\u8981\u91cd\u5efa\u7684\u6269\u5c55\u3002\n\u81ea\u4ece\u91c7\u7528 WebAssembly \u4ee5\u6765\uff0cEnvoy \u7684\u6269\u5c55\u5df2\u7ecf\u80fd\u591f\u5728\u9694\u79bb\u7684\u73af\u5883\u4e2d\u5b89\u5168\u5730\u8fd0\u884c\u3002\u8fd9\u79cd\u65b9\u6cd5\u5177\u6709\u72ec\u7acb\u4e8e\u8bed\u8a00\u7684\u72ec\u7279\u4f18\u52bf\uff0c\u5e76\u4e14\u5b8c\u5168\u652f\u6301\u52a8\u6001\u52a0\u8f7d\u6269\u5c55\u3002 WebAssembly \u4e3a\u4e91\u539f\u751f\u5e94\u7528\u7a0b\u5e8f\u5e26\u6765\u4e86\u5b89\u5168\u7684\u53ef\u6269\u5c55\u6027\u673a\u5236\u3002 Envoy \u548c Istio \u4e3a\u7531 Proxy-Wasm \u63d0\u4f9b\u652f\u6301\u7684\u5e94\u7528\u7a0b\u5e8f\u7f51\u683c\u63d0\u4f9b\u5b89\u5168\u7684\u53ef\u6269\u5c55\u6027\u673a\u5236\u3002\u4f7f\u7528 WebAssembly\uff0c\u60a8\u53ef\u4ee5\u7f16\u5199 Envoy \u6269\u5c55\uff0c\u4f8b\u5982\u81ea\u5b9a\u4e49\u6388\u6743\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4ee5\u53ca\u65e5\u5fd7\u8bb0\u5f55\u3002 WebAssembly \u65e0\u4e0e\u4f26\u6bd4\u7684\u53ef\u5d4c\u5165\u6027\u3001\u5b89\u5168\u6027\u3001\u591a\u8bed\u8a00\u548c\u53ef\u79fb\u690d\u6027\u540c\u65f6\u5bfc\u81f4\u4e86\u5404\u79cd Wasm \u63a5\u53e3\u7684\u5f00\u53d1\u3002\u6b63\u5982\u6211\u4eec\u6240\u89c1\uff0c\u901a\u5e38\u5728\u8fd9\u4e9b\u63a5\u53e3\u4e2d\u53ef\u4ee5\u627e\u5230\u5b89\u5168\u7684\u53ef\u6269\u5c55\u6027\u673a\u5236\u3002\u4ee3\u7406\u7684\u53ef\u6269\u5c55\u6027\u673a\u5236 Proxy-Wasm \u662f\u4e00\u4e2a\u5f88\u597d\u7684\u4f8b\u5b50\uff0c\u5b83\u5141\u8bb8\u7528\u6237\u5b89\u5168\u5730\u6269\u5c55\u4ed6\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7f51\u683c\u3002\u51ed\u501f\u5176\u72ec\u7279\u7684\u4f18\u52bf\uff0cWebAssembly \u80af\u5b9a\u4f1a\u7ee7\u7eed\u4e3a\u4e91\u539f\u751f\u73af\u5883\u5e26\u6765\u65b0\u7684\u5b89\u5168\u53ef\u6269\u5c55\u6027\u673a\u5236\u3002\u672c\u6587\u57fa\u4e8e Tetrate \u5de5\u7a0b\u5e08 Takaya Saeki \u4e3a 2021 \u5e74\u6b27\u76df\u4e91\u539f\u751f Wasm \u65e5\u6240\u505a\u7684\u8d5e\u52a9\u4e3b\u9898\u6f14\u8bb2\u3002", "note_en": "July 16, 2021\r WebAssembly (Wasm) has many applications in the cloud-native world today \u2013 WASI, edge cloud computing, Proxy-Wasm, and cloud-native runtime for serverless functions, to name a few. The question is, why has WebAssembly become so popular?\n To answer this, let\u2019s begin by looking at the basic properties of WebAssembly.\n WebAssembly is a safe, portable, and low-level binary instruction format. To elaborate on a few of the key properties of WebAssembly, it\u2019s:\n Open:  This means that it is embeddable. It has a customizable interface with external environments. For example, in WASI, WebAssembly can run on abstracted operating system platforms. Another example is Proxy-Wasm: the Wasm module communicates with external proxy applications to manipulate or handle traffic such as HTTP, UDP, or TCP traffic.\n   There are clearly other existing solutions to achieve goals similar to what WebAssembly does, but as we will see, each of these solutions has certain limitations:\n NaCI  is Google\u2019s software fault isolation (SFI) solution. It is safe, embeddable, and polyglot. It can run untrusted codes with the application of SFI techniques. However, since NaCl is based on native binary, it is not a portable solution.\n eBPF  is a safe, embeddable, and portable program primarily used for kernels. However, due to its strict limitations, it is hardly polyglot.\n   Java  is a versatile language that runs anywhere. The downside is that isolated entities are not Java\u2019s first-class citizens.\n Accordingly, none of these alternative solutions demonstrates all the properties embodied in WebAssembly. On the other hand, WebAssembly is as portable as Java, as safe as NaCl or Seccomp, as embeddable as Lua, and as polyglot as Native Library. Compared to existing solutions on the market, WebAssembly is an excellent new solution with a well-rounded design that aims to meet multiple goals simultaneously. While other existing solutions are lacking in some respect, WebAssembly emerges as a successful solution to achieve what the others cannot. To sum up, WebAssembly\u2019s unique strengths help it stand out among the crowd in the cloud-native world.\n  Like Executable and Linkable Format (ELF), the object format of the executable file in Linux, WebAssembly is an object format. As Linux defines what APIs an executable file can use, the external Wasm embedded interface defines the functions and symbols imported/exported by a Wasm module. This gives rise to various interface types for WebAssembly.\n Embedding WebAssembly in applications is important for the following reasons. First, WebAssembly provides secure extensibility mechanisms for applications. Second, application and Wasm modules communicate through bi-directional ABI and API. Lastly, WebAssembly allows users to install extensions securely, portably, and in any language.\n Two prime examples of a Wasm embedded interface are: WebAssembly for Proxies (Proxy-Wasm), and the WASI executable interface.\n  For the purpose of this article, let\u2019s focus on the secure extension mechanism of Proxy-Wasm. Powered by WebAssembly, Proxy-Wasm is an extensibility interface for proxy servers. Envoy serves as the reference implementation. Proxy-Wasm provides a secure and portable way to manipulate proxy traffic.\n Before WebAssembly, Envoy offered the static C++ library as its extension mechanism. No isolation was provided, and C++ was the only language that was supported. Therefore, updating an extension used to always require a rebuild.\n Ever since its adoption of WebAssembly, Envoy\u2019s extension has been able to run securely in an isolated environment. This approach has the distinct advantage of being language-independent, and there is full support for dynamic loading extensions.\n WebAssembly brings secure extensibility mechanisms to cloud-native applications. Envoy and Istio provide a secure extensibility mechanism for application meshes powered by Proxy-Wasm. With WebAssembly, you can write your Envoy extensions, such as custom authorization and authentication, as well as logging.\n  WebAssembly\u2019s unmatched strength of being embeddable, safe, polyglot, and portable all at the same time have led to the development of various Wasm interfaces. As we have seen, a secure extensibility mechanism is typically found in these interfaces. The extensibility mechanism for proxies, Proxy-Wasm, is an excellent example that allows users to extend their application meshes securely. With its unique set of advantages, WebAssembly is sure to continue to bring about new secure extensibility mechanisms to the cloud-native landscape.\n This article is based on a    sponsored keynote   by Takaya Saeki, Tetrate Engineer, for Cloud Native Wasm Day EU 2021.", "posttime": "2021-08-09 02:59:41", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "webassembly,innovative", "title": "\u4e3a\u4ec0\u4e48 WebAssembly \u5373\u4f7f\u5728\u6d4f\u89c8\u5668\u4e4b\u5916\u4e5f\u662f\u521b\u65b0\u7684", "title_en": "Why WebAssembly is innovative even outside the browser", "transed": 1, "url": "https://www.tetrate.io/blog/wasm-outside-the-browser/", "via": "", "real_tags": []}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072165, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5e72\u51c0\u7684 git \u63d0\u4ea4\u5386\u53f2\u901a\u5e38\u88ab\u4f4e\u4f30\uff0c\u5bf9\u4e8e\u7b80\u5316\u4ee3\u7801\u5ba1\u67e5\u548c\u7406\u89e3\u672a\u6765\u7684\u53d8\u5316\uff08\u53ef\u80fd\u5728\u505c\u673a\u671f\u95f4\uff09\u975e\u5e38\u6709\u7528\u3002\u5f53\u7136\uff0c\u6211\u4eec\u5728\u8fd9\u91cc\u8ba8\u8bba\u7684\u662f\u63d0\u4ea4\u5230\u5171\u4eab\u5b58\u50a8\u5e93\u7684\u6700\u7ec8\u5386\u53f2\u8bb0\u5f55\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u5904\u7406\u4ee3\u7801\u65f6\u7684\u4e2d\u95f4\u5386\u53f2\u8bb0\u5f55\u3002\u6709\u65f6\u4e2d\u95f4\u5386\u53f2\u8db3\u4ee5\u76f4\u63a5\u63a8\u9001\uff0c\u4f46\u8fd9\u5b9e\u9645\u4e0a\u76f8\u5f53\u7f55\u89c1\u3002\u6e05\u7406\u5386\u53f2\u8bb0\u5f55\u4e00\u5f00\u59cb\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u4e4f\u5473\uff0c\u53ea\u662f\u4e3a\u4e86\u83b7\u5f97\u5fae\u4e0d\u8db3\u9053\u7684\u7f8e\u5bb9\u6548\u679c\uff0c\u4f46\u968f\u7740\u5b9e\u8df5\uff0c\u5b83\u4f1a\u53d8\u5f97\u66f4\u5bb9\u6613\u3001\u66f4\u5feb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u6536\u96c6\u4e86\u4e00\u4e9b\u5728\u5c06 git \u63d0\u4ea4\u5386\u53f2\u53d1\u5e03\u7ed9\u5176\u4ed6\u4eba\u4e4b\u524d\u6e05\u7406\u5b83\u7684\u6280\u5de7\uff0c\u4f8b\u5982\u4ee5\u62c9\u53d6\u8bf7\u6c42\u7684\u5f62\u5f0f\u3002\u53e6\u4e00\u4e2a\u6e05\u7406\u5386\u53f2\u8bb0\u5f55\u7684\u597d\u65f6\u673a\u662f\u5728\u5408\u5e76\u4e4b\u524d\uff0c\u5982\u679c\u6211\u4eec\u6dfb\u52a0\u4e86\u989d\u5916\u7684\u63d0\u4ea4\u6765\u5904\u7406\u5ba1\u67e5\u8bc4\u8bba\u3002\u4e0d\u8981\u5408\u5e76\u53ea\u662f\u4e3a\u4e86\u89e3\u51b3\u8bc4\u8bba\u800c\u5b58\u5728\u7684\u63d0\u4ea4\uff0c\u4fee\u590d\u539f\u59cb\u7684\u9519\u8bef\u63d0\u4ea4\u3002\u5e72\u51c0\u7684\u63d0\u4ea4\u5386\u53f2\u662f\u4ec5\u5305\u542b\u826f\u597d\u63d0\u4ea4\u7684\u5386\u53f2\u3002\u4f46\u662f\u4ec0\u4e48\u4f7f\u63d0\u4ea4\u597d\u5462\uff1f\u8fd9\u6709\u4e24\u90e8\u5206\uff0c\u63d0\u4ea4\u7684\u5185\u5bb9\u548c\u63d0\u4ea4\u63cf\u8ff0\u3002\u63d0\u4ea4\u6d88\u606f\u6709\u5f88\u591a\u6807\u51c6\uff0c\u4f46\u6211\u4e2a\u4eba\u4f7f\u7528 OTP \u63d0\u4ea4\u6307\u5357\u4f5c\u4e3a\u57fa\u7840\u3002\u7136\u540e\u6211\u5c1d\u8bd5\u5728\u6d88\u606f\u4e2d\u5305\u542b\u4efb\u4f55\u91cd\u8981\u7684\u6280\u672f\u548c\u4ea7\u54c1\u8003\u8651\u56e0\u7d20\uff0c\u4f8b\u5982\u66f4\u6539\u7684\u52a8\u673a\uff0c\u4ee5\u53ca\u6280\u672f\u4e0a\u7684\u7ec6\u5fae\u5dee\u522b\uff0c\u4f8b\u5982\u8003\u8651\u7684\u66ff\u4ee3\u5b9e\u73b0\u548c\u6743\u8861\u3002\u53c2\u89c1 Dan Carley \u7684\u60ca\u4eba\u4f8b\u5b50\u3002\u63d0\u4ea4\u7684\u5185\u5bb9\u6709\u70b9\u6a21\u7cca\uff0c\u4f46\u8fd9\u662f\u6211\u8981\u5bfb\u627e\u7684\uff1a\u6bcf\u4e2a\u63d0\u4ea4\u672c\u8eab\u90fd\u5e94\u8be5\u6709\u610f\u4e49\u3002\u63d0\u4ea4\u7684\u5927\u5c0f\u6070\u5230\u597d\u5904\uff0c\u65e0\u9700\u6dfb\u52a0\u4efb\u4f55\u5185\u5bb9\uff0c\u4e5f\u65e0\u9700\u5220\u9664\u4efb\u4f55\u5185\u5bb9\u3002\u6211\u4eec\u5e0c\u671b\u5728\u6bcf\u6b21\u63d0\u4ea4\u4e2d\u6dfb\u52a0/\u5220\u9664/\u66f4\u6539\u4e00\u4ef6\u4e8b\u3002\u5982\u679c\u6211\u4eec\u52aa\u529b\u60f3\u51fa\u4e00\u4e2a\u597d\u7684\u63d0\u4ea4\u6458\u8981\uff0c\u90a3\u5c31\u6697\u793a\u6211\u4eec\u7684\u63d0\u4ea4\u8303\u56f4\u4e0d\u660e\u786e\u3002\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u8fd9\u610f\u5473\u7740\u5ba1\u67e5\u8005\u53ef\u4ee5\u9010\u4e2a\u63d0\u4ea4\u5ba1\u67e5\u6211\u4eec\u7684\u66f4\u6539\u3002\u6211\u4eec\u5c1d\u8bd5\u5728\u63d0\u4ea4\u4e2d\u8bb2\u8ff0\u4e00\u4e2a\u6545\u4e8b\u3002\n\u6bcf\u4e2a\u63d0\u4ea4\u90fd\u5e94\u8be5\u662f\u53ef\u8fd0\u884c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5e94\u8be5\u80fd\u591f gitcheckout \u4efb\u4f55\u63d0\u4ea4\u5e76\u83b7\u5f97\u4e00\u4e2a\u529f\u80fd\u6027\u7684\u4ee3\u7801\u5e93\u3002\u8fd9\u610f\u5473\u7740\u6ca1\u6709\u201cWIP\u201d\u63d0\u4ea4\u6216\u4ec5\u5728\u6700\u540e\u6062\u590d\u529f\u80fd\u7684\u63d0\u4ea4\u94fe\u3002\u8fd9\u5f88\u91cd\u8981\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4e8b\u60c5\u6a2a\u5411\u53d1\u5c55\u65f6\u6062\u590d\u6216\u56de\u6eda\u4efb\u4f55\u63d0\u4ea4\u3002 Git \u975e\u5e38\u7075\u6d3b\uff0c\u5bf9\u4e8e\u8fd9\u91cc\u63cf\u8ff0\u7684\u8bb8\u591a\u6280\u672f\uff0c\u6709\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u7684\u66f4\u5feb\u65b9\u6cd5\u3002\u6211\u6b63\u5728\u63cf\u8ff0\u591a\u6b65\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u53ef\u4ee5\u5c06\u591a\u4e2a\u5355\u72ec\u7684\u63d0\u4ea4\u4fdd\u7559\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u4e3a\u5408\u5e76\u4e24\u4e2a\u63d0\u4ea4\u6bd4\u62c6\u5206\u5355\u4e2a\u63d0\u4ea4\u5bb9\u6613\u5f97\u591a\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5728\u6211\u8fdb\u884c\u6700\u7ec8\u7684\u4ea4\u4e92\u5f0f rebase \u4ee5\u89e3\u51b3\u6240\u6709\u66f4\u6539\u4e4b\u524d\uff0c\u6211\u5bf9\u5386\u53f2\u8fdb\u884c\u4e86\u5927\u91cf\u4fee\u8865\uff0c\u5728\u6b64\u5904\u7ed3\u5408\u4e86\u5176\u4e2d\u7684\u51e0\u79cd\u6280\u672f\u3002\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u5728\u4e2d\u9014\u6539\u53d8\u4e3b\u610f\uff0c\u800c\u4e0d\u4f1a\u5728\u64a4\u6d88\u4efb\u4f55\u4e8b\u60c5\u65f6\u9047\u5230\u4efb\u4f55\u9ebb\u70e6\u3002\u6211\u4eec\u8fd8\u5c06\u6240\u6709\u6807\u5fd7\u7684\u957f\u7248\u7528\u4e8e\u6559\u80b2\u76ee\u7684\u3002\u6709\u5173\u7b80\u77ed\u7248\u672c\uff0c\u8bf7\u53c2\u9605\u624b\u518c\u9875\u3002\u4ea4\u4e92\u5f0f\u53d8\u57fa\u975e\u5e38\u5f3a\u5927\uff0c\u53ef\u7528\u4e8e\u6267\u884c\u8bb8\u591a\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u907f\u514d\u8bb0\u4f4f\u8bb8\u591a\u5176\u4ed6\u4e13\u95e8\u4e3a\u505a\u4e00\u4ef6\u4e8b\u800c\u91cf\u8eab\u5b9a\u5236\u7684\u547d\u4ee4\u3002\u5b83\u901a\u5e38\u4e5f\u4e0d\u540c\u4e8e\u5e38\u89c4\u7684\u53d8\u57fa\uff0c\u6211\u4eec\u5c06\u4e00\u4e2a\u6216\u591a\u4e2a\u63d0\u4ea4\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u57fa\u7840\u4e0a\uff08\u56e0\u6b64\u53d8\u57fa\uff09\u3002\u5f53\u4ee5\u4ea4\u4e92\u65b9\u5f0f\u53d8\u57fa\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u5e0c\u671b\u7f16\u8f91 HEAD \u548c &lt;ref&gt; \u4e4b\u95f4\u7684\u6240\u6709\u63d0\u4ea4\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u9009\u62e9 &lt;ref&gt; \u4f5c\u4e3a\u6211\u4eec\u8981\u7f16\u8f91\u7684\u8303\u56f4\u7684\u53e6\u4e00\u7aef\u3002\u5f53\u60a8\u542f\u52a8\u4ea4\u4e92\u5f0f\u53d8\u57fa\u65f6\uff0c\u5c06\u5728 $EDITOR \u4e2d\u6253\u5f00\u4e00\u4e2a\u7279\u6b8a\u6587\u4ef6\uff0c\u5176\u4e2d\u5305\u542b\u53d8\u57fa\u8303\u56f4\u5185\u7684\u6240\u6709\u63d0\u4ea4\u548c\u5bf9\u5b83\u4eec\u7684\u64cd\u4f5c\u3002 Git \u5c06\u5728\u63cf\u8ff0\u53ef\u7528\u64cd\u4f5c\u7684\u5217\u8868\u4e0b\u65b9\u63d2\u5165\u4e00\u4e2a\u6307\u5357\u3002\u4e00\u65e6\u6211\u4eec\u5bf9\u884c\u52a8\u611f\u5230\u6ee1\u610f\uff0c\u6211\u4eec\u5c31\u4f1a\u786e\u8ba4\u8ba1\u5212\u5e76\u89e3\u51b3\u884c\u52a8\u3002\u60f3\u60f3\u68cb\u76d8\u6e38\u620f\u6216\u7eb8\u724c\u6e38\u620f\u3002\u867d\u7136\u6211\u9f13\u52b1\u5728\u63d0\u4ea4\u65f6\u76f4\u63a5\u7f16\u5199\u5b8c\u6574\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u4f46\u6709\u65f6\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u65e9\u671f\u63d0\u4ea4\u6d88\u606f\u8fdb\u884c\u6dfb\u52a0\u6216\u66f4\u6539\u3002\u8981\u4ec5\u66f4\u6539\u73b0\u6709\u63d0\u4ea4\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\uff1a\n\u8fd9\u4e9b\u547d\u4ee4\u4f1a\u521b\u5efa\u9644\u52a0\u5230\u6211\u4eec\u5386\u53f2\u8bb0\u5f55\u672b\u5c3e\u7684\u9644\u52a0\u201c\u4fee\u590d\u63d0\u4ea4\u201d\u3002\u5b83\u4eec\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u901a\u8fc7\u5176\u6807\u9898\u94fe\u63a5\u5230\u53e6\u4e00\u4e2a\u63d0\u4ea4\u3002\u4e3a\u4e86\u5b9e\u9645\u5c06\u4e24\u8005\uff08\u6216\u66f4\u591a\uff09\u7ed3\u5408\u8d77\u6765\uff0c\u6211\u4eec\u4f7f\u7528\uff1a \u8fd9\u5e94\u8be5\u8bbe\u7f6e\u4ea4\u4e92\u5f0f rebase \u6765\u505a\u6b63\u786e\u7684\u4e8b\u60c5\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u901a\u8fc7\u4fdd\u5b58\u548c\u5173\u95ed\u6587\u4ef6\u6765\u786e\u8ba4\u5efa\u8bae\u7684\u64cd\u4f5c\u3002\u8ba9\u6211\u4eec\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5199\u4e86\u4e00\u4e2a\u63d0\u4ea4\uff0c\u7136\u540e\u6ce8\u610f\u5230\u8fd9\u4e2a\u63d0\u4ea4\u8303\u56f4\u5185\u7684\u4e00\u4e2a\u5c0f\u6539\u52a8\u3002\u6211\u4eec\u53ea\u60f3\u4fee\u590d\u73b0\u6709\u7684\u63d0\u4ea4\uff0c\u800c\u4e0d\u662f\u7f16\u5199\u65b0\u7684\u63d0\u4ea4\u3002\u53ea\u9700\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef\u5b8c\u6210\uff1a\u5982\u679c\u6211\u4eec\u4ec5\u5728\u6dfb\u52a0\u5176\u4ed6\u63d0\u4ea4\u540e\u624d\u53d1\u73b0\u9519\u8bef\uff0c\u5e76\u4e14\u60f3\u8981\u8ffd\u6eaf\u6dfb\u52a0\u5bf9\u8f83\u65e9\u63d0\u4ea4\u7684\u66f4\u6539\uff0c\u5219\u6b64\u547d\u4ee4\u53d8\u4e3a\uff1a \u548c\u4ee5\u524d\u4e00\u6837\uff0c\u8fd9\u5c06\u521b\u5efa\u53ef\u4ee5\u4e0e\u4ea4\u4e92\u5f0f\u53d8\u57fa\u7ed3\u5408\u7684\u4fee\u590d\u63d0\u4ea4\u548c --autosquash \u6807\u5fd7\u3002\u5982\u679c\u6211\u4eec\u5e0c\u671b\u5c06\u5386\u53f2\u8bb0\u5f55\u4e2d\u5df2\u6709\u7684\u4e24\u4e2a\u63d0\u4ea4\u5408\u5e76\u4e3a\u4e00\u4e2a\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ea4\u4e92\u5f0f rebase\uff0c\u5982\u679c\u9700\u8981\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u63d0\u4ea4\u79fb\u5230\u7b2c\u4e00\u4e2a\u63d0\u4ea4\u4e4b\u540e\uff0c\u7136\u540e\u9009\u62e9\u538b\u7f29\u9009\u9879\u3002\u5728\u89e3\u51b3 rebase \u65f6\uff0cgit \u5c06\u5728\u6b64\u65f6\u505c\u6b62\u5e76\u4e3a\u6211\u4eec\u6253\u5f00\u4e00\u4e2a\u7ec4\u5408\u63d0\u4ea4\u6d88\u606f\u3002\u6211\u4eec\u80af\u5b9a\u8981\u7f16\u8f91\u8fd9\u4e2a\uff0c\u800c\u4e0d\u662f\u575a\u6301\u4f7f\u7528\u4e24\u6761\u539f\u59cb\u6d88\u606f\u7684\u9ed8\u8ba4\u8fde\u63a5\u3002\n\u5982\u679c\u6211\u4eec\u60f3\u66f4\u6539\u63d0\u4ea4\u7684\u987a\u5e8f\uff0c\u60a8\u5df2\u7ecf\u731c\u5230\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4ea4\u4e92\u5f0f rebase \u6765\u5b9e\u73b0\uff0c\u53ea\u9700\u66f4\u6539\u5217\u8868\u4e2d\u63d0\u4ea4\u7684\u987a\u5e8f\u5373\u53ef\u3002\u5982\u679c\u4e00\u4e2a\u63d0\u4ea4\u7ed3\u679c\u5305\u542b\u51e0\u4e2a\u72ec\u7acb\u7684\u66f4\u6539\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u62c6\u5206\u63d0\u4ea4\u4ee5\u9694\u79bb\u8fd9\u4e9b\u66f4\u6539\u3002\u6211\u4eec\u518d\u6b21\u4f7f\u7528\u4ea4\u4e92\u5f0f\u53d8\u57fa\uff0c\u4f46\u8fd9\u6b21\u6211\u4eec\u4e3a\u8981\u62c6\u5206\u7684\u63d0\u4ea4\u9009\u62e9\u7f16\u8f91\u64cd\u4f5c\u3002\u5f53\u6211\u4eec\u5230\u8fbe\u6b64\u63d0\u4ea4\u65f6\uff0c\u8fd9\u5c06\u5bfc\u81f4 rebase \u6682\u505c\u3002\u5728\u8fd9\u4e00\u70b9\u4e0a\uff0c\u6211\u4eec\u8981\u4f7f\u7528\u589e\u91cf\u6dfb\u52a0\u6587\u4ef6\u7684\u90e8\u5206\u3002\u8fd9\u5728\u7f16\u8f91\u73b0\u6709\u6587\u4ef6\u65f6\u6548\u679c\u6700\u597d\uff0c\u56e0\u4e3a\u8865\u4e01\u754c\u9762\u6709\u70b9\u7f3a\u4e4f\uff0c\u4f46\u5b83\u6709\u6548\u3002\u90a3\u91cc\u7684 Emacs \u7528\u6237\u53ef\u80fd\u4f1a\u719f\u6089\u975e\u5e38\u51fa\u8272\u7684 Magit \u754c\u9762\uff0c\u5b83\u53ef\u4ee5\u8f7b\u677e\u5730\u5bf9\u5404\u4e2a\u884c\u8fdb\u884c\u5206\u6bb5\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u521b\u5efa\u65b0\u7684\u63d0\u4ea4\u3002\u4e00\u65e6\u6211\u4eec\u5b8c\u6210\u521b\u5efa\u65b0\u63d0\u4ea4\u66ff\u6362\u65e7\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u5982\u679c\u6211\u4eec\u53d1\u73b0\u81ea\u5df1\u6709\u4e00\u4e2a\u6211\u4eec\u51b3\u5b9a\u4e0d\u518d\u9700\u8981\u7684\u63d0\u4ea4\uff0c\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u5730\u4ece\u5386\u53f2\u8bb0\u5f55\u4e2d\u5220\u9664\u5b83\u3002\u8fd9\u53ef\u80fd\u662f\u6211\u4eec\u6240\u505a\u7684\u66f4\u6539\uff0c\u4f46\u540e\u6765\u610f\u8bc6\u5230\u6211\u4eec\u6839\u672c\u4e0d\u9700\u8981\uff0c\u6216\u8005\u7c7b\u4f3c\u4e8e GitHub\u201c\u66f4\u65b0\u5206\u652f\u201d\u5408\u5e76\u63d0\u4ea4\u566a\u97f3\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u4ea4\u4e92\u5f0f rebase \u5e76\u4e3a\u76f8\u5173\u63d0\u4ea4\u9009\u62e9\u653e\u7f6e\u64cd\u4f5c\u3002 git \u624b\u518c\u9875\u6309\u547d\u4ee4\u62c6\u5206\uff0c\u56e0\u6b64\u6709\u5173 gitrebase \u7684\u6587\u6863\uff0c\u8bf7\u67e5\u770b man git-rebase\u3002\u624b\u518c\u9875\u5f88\u597d\uff0c\u4f46\u66f4\u591a\u7684\u662f\u53c2\u8003\u800c\u4e0d\u662f\u4f7f\u7528\u6307\u5357\u3002\n\u54e6\u8be5\u6b7b\uff0c\u5409\u7279\uff01\uff1f\uff01\u6709\u4e00\u4e2a\u4ee4\u4eba\u96be\u5fd8\u7684\u57df\uff0c\u5e76\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u5728\u53d1\u751f\u5927\u91cf git \u4e8b\u6545\u540e\u8fdb\u884c\u81ea\u6551\u7684\u4fe1\u606f\u3002", "note_en": "A clean git commit history is often underrated and can be immensely useful to ease code reviews and understand changes in the future (potentially in the midst of an outage).\n Of course we are talking about the final history here as committed to the shared repository, not the intermediate history while we are working on the code. Sometimes the intermediate history is good enough to be pushed directly, but this is actually fairly rare.\n Cleaning up the history might seem tedious at first for marginal cosmetic benefits, but it gets much easier and faster with practice. Here I am collecting some tips for cleaning up a git commit history before publishing it to others, for example in the form of a pull request.    Another good time to clean up the history is before merging, if we have added additional commits to address review comments. Don\u2019t merge commits that just exist to address comments, fix the original bad commits.\n  A clean commit history is one that is comprised only of good commits. But what makes a commit good? There are two parts to this, the content of the commit, and the commit description.\n There are many standards for commit messages, but I personally use the  OTP commit guidelines as the base. I then try to include any important technical and product consideration in the message, such as the motivation for the change, and maybe technical nuances such as alternative implementations considered and tradeoffs. See  Dan Carley\u2019s amazing example.\n The content of the commit is a bit more fuzzy, but here is what I am looking for:\n Every commit should make sense by itself. There is a  just right size for commits, where there is nothing to add and nothing to remove. We want to add/remove/change exactly one thing in each commit. If we are struggling to come up with a good commit summary, that is a hint that our commit is not well scoped. Ideally this means a reviewer can review our changes commit-by-commit. We try to tell a story in commits.\n Every commit should be runnable, that is we should be able to  gitcheckout any commit and get a functional code base. This means no \u201c WIP\u201d commits or commit chains that only restore functionality at the end. This is important so that we can revert or rollback to any commit if things go sideways.\n  Git is very flexible, and for many of the techniques described here there are faster ways of performing the same actions. I am describing multi-step methods which preserve several individual commits for longer, as it is much easier to combine two commits than to split a single commit.    Specifically I tinker a lot with the history, combining several of these techniques here, before I do the final interactive rebase to resolve all changes. This way I can change my mind halfway through without any trouble undoing anything.\n We are also using the long version of all flags for educational purposes. Refer to the man pages for the short versions.\n   Interactive rebase is incredibly powerful and can be used to perform many different operations. We can use it to avoid having to memorise many other commands that are specifically tailored to doing just one thing.\n It is also usually used differently from regular rebasing, where we move one or several commits onto a different base (hence rebasing). When rebasing interactively we usually want to edit all commits between  HEAD and  &lt;ref&gt; instead. Thus we need to chose  &lt;ref&gt; as the other end of the range we want to edit.\n When you start an interactive rebase, a special file will be opened in  $EDITOR with all commits in the rebase range and actions for them. Git will insert a guide below the list describing the available actions. Once we are happy with the actions, we confirm the plan and the actions resolve.    Think board games or  card games.\n  While I encourage the writing of the full commit message directly at commit time, sometimes we can think of additions or changes to earlier commit messages. To change just the commit message of an existing commit, we can use:\n  These commands create additional \u201cfixup commits\u201d which are appended to the end of our history. Each of them is linked to another commit via its title. To actually combine the two (or more), we use:\n  This should setup the interactive rebase to do the right thing, so we just confirm the actions proposed by saving and closing the file.\n  Let us assume we have written a commit, and then notice a small change necessary that falls within the scope of this commit. Instead of writing a new commit, we want to just fix up the existing commit. This is done simply by running:\n  If we notice our error only after adding additional commits, and want to retroactively add a change to an earlier commit, this command becomes:\n  Just as before, this creates fixup commits that can be combined with an interactive rebase and the  --autosquash flag.\n  If we have two already existing commits in our history that we would like to combine into a single one, we can use an interactive rebase, move the second commit after the first one if required, and select the  squash option.\n When resolving the rebase, git will stop at this point and open up a combined commit message for us. We definitely want to edit this one instead of sticking with the default concatenation of the two original messages.\n  If we want to change the order of commits, you have guessed it, we can do this with an interactive rebase and just changing the order of the commits in the list.\n  If a commit turns out to contain several independent changes, we can opt to split the commit to isolate those changes. Again we use an interactive rebase, but this time we select the  edit action for the commit we want to split. This will cause the rebase to pause when we reach this commit. At this point we want to use\n    to incrementally add sections of our files. This works best when editing existing files, as the patch interface is a bit lacking, but it works.    Emacs users out there will probably be familiar with  the vastly superior Magit interface, which allows easy staging of individual lines.   We can then use\n  to create the new commits. Once we are done creating new commits replacing the old one, we can use\n    If we find ourselves with a commit that we decide we just do not need anymore, we can simply remove it from the history. This could be a change that we made but later realised we did not need after all, or something like the GitHub \u201cupdate branch\u201d merge commit noise.\n The easiest way to do this is just using an interactive rebase and selecting the  drop action for the commit in question.\n  The git man pages are split by command, so for documentation on  gitrebase, check  man git-rebase. The man pages are good, but more of a reference than a usage guide.\n Oh Shit, Git!?! has a memorable domain and provides some information for how to perform self-rescue after a lot of git accidents.", "posttime": "2021-08-09 02:59:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "git,\u63d0\u4ea4", "title": "\u6e05\u7406 Git \u5386\u53f2\u8bb0\u5f55", "title_en": "Cleaning Up Git History", "transed": 1, "url": "https://blog.sulami.xyz/posts/cleaning-up-git-history/", "via": "", "real_tags": ["git", "\u63d0\u4ea4"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072164, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "1999 \u5e74\uff0cLutz Prechelt \u5728 COMMUNICATIONS OF THE ACM\uff081999 \u5e74 10 \u6708/\u7b2c 42 \u5377\uff0c\u7b2c 10 \u671f\uff09\u4e0a\u53d1\u8868\u4e86\u4e00\u7bc7\u5f00\u521b\u6027\u7684\u6587\u7ae0\uff0c\u540d\u4e3a Comparing Java vs. C/C++ Efficiency Differences to Interpersonal Differences\uff0c\u5373 Java VS C\uff0c\u5b83\u4f3c\u4e4e\u5177\u6709\u540e\u6765\uff082000 \u5e74 3 \u6708\uff09\u88ab\u6269\u5c55\u6210\u4e00\u7bc7\u5b8c\u6574\u7684\u8bba\u6587\uff0c\u5bf9 C\u3001C++\u3001Java\u3001Perl\u3001Python\u3001Rexx \u548c Tcl \u8fdb\u884c\u641c\u7d22/\u5b57\u7b26\u4e32\u5904\u7406\u7a0b\u5e8f\u7684\u5b9e\u8bc1\u6bd4\u8f83\uff0c\u6b64\u540e\u79f0\u4e3a Scripting VS Java/C\u3002\u5728\u90a3\u7bc7\u8bba\u6587\u4e2d\uff0c\u4ed6\u4eec\u5206\u6790\u4e86\u4e00\u9879\u7814\u7a76\u7684\u6570\u636e\uff08\u8be5\u7814\u7a76\u662f\u4e3a\u53e6\u4e00\u7bc7\u8bba\u6587\u8fd0\u884c\u7684\uff0c\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\uff09\u5728\u8be5\u7814\u7a76\u4e2d\uff0c\u53c2\u4e0e\u8005\u88ab\u8981\u6c42\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\uff0c\u5305\u62ec\u5c06\u7535\u8bdd\u53f7\u7801\u7f16\u7801\u4e3a\u5b57\u5178\u4e2d\u7684\u6570\u5b57\u548c\u5355\u8bcd\u7684\u7ec4\u5408\uff0c\u5927\u6982\u662f\u4e3a\u4e86\u4f7f\u4eba\u7c7b\u66f4\u5bb9\u6613\u8bb0\u4f4f\u4ed6\u4eec\u4ee5\u540e\u53ef\u80fd\u60f3\u8981\u56de\u5fc6\u7684\u7535\u8bdd\u53f7\u7801\uff08\u8fd9\u662f\u5728\u79fb\u52a8\u7535\u8bdd\u666e\u53ca\u4e4b\u524d\u7684\u65f6\u671f\uff09\u3002\u540c\u6837\u7684\u95ee\u9898\u540e\u6765\u88ab Ron Garret\uff08\u53c8\u540d Erann Gat\uff09\u5728\u4ed6\u7684\u77ed\u8bba\u6587 Lisp \u4f5c\u4e3a Java \u7684\u66ff\u4ee3\u54c1\uff0c\u5373 Lisp VS Java\uff0c\u4ece 2000 \u5e74\u5f00\u59cb\u4f7f\u7528\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u60f3\u91cd\u65b0\u5ba1\u89c6\u8fd9\u4e9b\u8bba\u6587\uff0c\u5206\u6790\u5b83\u4eec\u65b9\u6cd5\u548c\u7ed3\u8bba\uff0c\u5e76\u8bd5\u56fe\u627e\u51fa\u81ea\u8fd9\u4e9b\u6587\u7ae0\u53d1\u8868\u4ee5\u6765\u7684 21 \u5e74\u4e2d\u662f\u5426\u53d1\u751f\u4e86\u4efb\u4f55\u53d8\u5316\uff0c\u6211\u81ea\u5df1\u7f16\u5199\u4e86\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6cd5\uff0c\u5c31\u597d\u50cf\u6211\u81ea\u5df1\u53c2\u4e0e\u4e86\u5176\u4e2d\u4e00\u9879\u7814\u7a76\u4e00\u6837\u3002\u6211\u7528 Java \u7f16\u5199\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u800c\u6ca1\u6709\u7814\u7a76\u4efb\u4f55\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\uff0c\u4ee5\u4e86\u89e3\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff08\u548c Java 16\uff09\u5982\u679c\u53c2\u4e0e\u5176\u4e2d\u4f1a\u5982\u4f55\u5b8c\u6210\u3002\u4e4b\u540e\uff0c\u6211\u5206\u6790\u4e86\u5176\u4ed6\u4e00\u4e9b\u89e3\u51b3\u65b9\u6848\u5e76\u5c06\u5b83\u4eec\u4e0e\u6211\u7684\u8fdb\u884c\u4e86\u6bd4\u8f83\u3002\u6839\u636e\u6211\u7684\u53d1\u73b0\u548c Prechelt \u672c\u4eba\u5728\u4ed6\u7684\u8bba\u6587\u4e2d\u7684\u4e00\u4e9b\u8bc4\u8bba\uff0c\u6211\u51b3\u5b9a\u7f16\u5199\u7b2c\u4e8c\u4e2a Java \u7a0b\u5e8f\u6765\u5339\u914d\u5728\u66f4\u52a8\u6001\u7684\u8bed\u8a00\u4e2d\u5e38\u7528\u7684\u5b8c\u5168\u4e0d\u540c\u7684\u7b56\u7565\u3002\u6211\u4e5f\u5728 Rustin \u4e2d\u5b9e\u73b0\u4e86\u76f8\u540c\u7684\u7b97\u6cd5\uff0c\u4ee5\u4fbf\u4e86\u89e3\u4e00\u79cd\u975e\u5e38\u73b0\u4ee3\u7684\u7cfb\u7edf\u8bed\u8a00\u4f1a\u5982\u4f55\u505a\u3002\u8fd9\u5e94\u8be5\u5141\u8bb8\u6211\u4eec\u901a\u8fc7\u4f7f\u7528\u76f8\u540c\u7684\u7cbe\u786e\u7b97\u6cd5\uff08\u5728\u53ef\u80fd\u7684\u8303\u56f4\u5185\uff09\u66f4\u76f4\u63a5\u5730\u6bd4\u8f83\u73b0\u4ee3\u8bed\u8a00\uff0c\u6d88\u9664\u7a0b\u5e8f\u5458\u9009\u62e9\u7684\u4e0d\u540c\u7b97\u6cd5\u53ef\u80fd\u4ea7\u751f\u7684\u6f5c\u5728\u5de8\u5927\u5dee\u5f02\u3002\nPrechelt \u7684 Java VS C \u4e2d\u4f7f\u7528\u7684\u6240\u6709\u6570\u636e\uff0c\u4ee5\u53ca Scripting VS Java/C \u4e2d\u4f7f\u7528\u7684 Java/C/C++ \u89e3\u51b3\u65b9\u6848\u4e2d\u4f7f\u7528\u7684\u6240\u6709\u6570\u636e\uff0c\u90fd\u6765\u81ea\u5bf9\u79f0\u4e3a PSP\uff08\u4e2a\u4eba\u8f6f\u4ef6\u8fc7\u7a0b\uff09\u7684\u8f6f\u4ef6\u5f00\u53d1\u6280\u672f\u7684\u65e9\u671f\u7814\u7a76\u3002\u8fd9\u9879\u7814\u7a76\u5b9e\u9645\u4e0a\u662f\u5728 1996 \u5e74 8 \u6708\u548c 1998 \u5e74 10 \u6708\u4e4b\u95f4\u8fdb\u884c\u7684\uff01\u8fd9\u610f\u5473\u7740\u4e00\u4e9b\u53c2\u4e0e\u8005\u5b9e\u9645\u4e0a\u4f7f\u7528\u7684\u662f JDK \u7684\u7b2c\u4e00\u4e2a\u7248\u672c\uff01\u8be5\u7814\u7a76\u7684\u76ee\u7684\u4e0e\u7814\u7a76 Java \u548c C/C++ \u4e4b\u95f4\u7684\u5dee\u5f02\u65e0\u5173\uff0c\u800c\u662f\u7814\u7a76 PSP \u7684\u6709\u6548\u6027\uff08\u7ed3\u679c\u8868\u660e\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0cPSP \u5b9e\u8df5\u8005\u5177\u6709\u66f4\u53ef\u9884\u6d4b\u3001\u66f4\u7a33\u5b9a\u7684\u6027\u80fd\uff0c\u4f46\u5de5\u4f5c\u901f\u5ea6\u4e5f\u7a0d\u6162\uff09\u3002 55 \u540d\u7814\u7a76\u751f\u53c2\u4e0e\u4e86\u8fd9\u9879\u7814\u7a76\uff0c\u5176\u4e2d 24 \u540d\u4f7f\u7528 Java\uff0c9 \u540d\u4f7f\u7528 C\uff0c13 \u540d\u4f7f\u7528 C++\uff0c\u53e6\u5916\u4e24\u540d\u4f7f\u7528Modula-2 \u548c\u540d\u4e3a Sather-K \u7684\u4e1c\u897f\uff01\u5927\u591a\u6570\u5b66\u751f\u6765\u81ea PSP \u8bfe\u7a0b\u6216 Java \u9ad8\u7ea7\u8bfe\u7a0b\u3002\u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u662f Java VS C \u8bba\u6587\u6240\u57fa\u4e8e\u7684\u6570\u636e\u3002\u5b83\u5305\u62ec 24 \u4e2a\u7528 Java \u7f16\u5199\u7684\u7a0b\u5e8f\uff0c11 \u4e2a\u7528 C++ \u7f16\u5199\uff0c5 \u4e2a\u7528 C \u7f16\u5199\u3002\u63d0\u4f9b\u7ed9\u7814\u7a76\u53c2\u4e0e\u8005\u7684\u8bf4\u660e\uff0c\u7a0d\u5fae\u6539\u7f16\u4e3a Lisp VS Java \u6587\u7ae0\uff0c\u53ef\u4ee5\u5728 flownet.com \u4e0a\u627e\u5230\u3002\u6240\u6709\u7a0b\u5e8f\u90fd\u5b9e\u73b0\u76f8\u540c\u7684\u529f\u80fd\uff0c\u5373\u7535\u8bdd\u53f7\u7801\u5230\u5b57\u4e32\u7684\u8f6c\u6362....\u8f6c\u6362\u662f\u7531\u5b57\u7b26\u5230\u6570\u5b57\u7684\u56fa\u5b9a\u6620\u5c04\u5b9a\u4e49\u7684\uff0c\u5982\u4e0b\u6240\u793a\uff1aejnqrwxdsyftamcivbkul opgh z0 1 1 1 2 2 2 3 3 3 4 4 5 5 6 6 6 7 7 7 8 8 8 9 9 9 \u7a0b\u5e8f\u7684\u4efb\u52a1\u662f\u627e\u5230\u4e00\u4e2a\u5355\u8bcd\u5e8f\u5217\uff0c\u4f7f\u8fd9\u4e9b\u5355\u8bcd\u4e2d\u7684\u5b57\u7b26\u5e8f\u5217\u4e0e\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u6570\u5b57\u5e8f\u5217\u5b8c\u5168\u5bf9\u5e94\u3002\u5fc5\u987b\u627e\u5230\u6240\u6709\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848\u5e76\u6253\u5370\u3002\u89e3\u51b3\u65b9\u6848\u662f\u9010\u5b57\u521b\u5efa\u7684\uff0c\u5982\u679c\u5728\u8be5\u8fc7\u7a0b\u4e2d\u7684\u67d0\u4e2a\u65f6\u95f4\u70b9\u65e0\u6cd5\u63d2\u5165\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\uff0c\u5219\u7535\u8bdd\u53f7\u7801\u4e2d\u7684\u4e00\u4f4d\u6570\u5b57\u4f1a\u51fa\u73b0\u5728\u8be5\u4f4d\u7f6e\u7684\u7ed3\u679c\u4e2d\u3002\u8bb8\u591a\u7535\u8bdd\u53f7\u7801\u6839\u672c\u6ca1\u6709\u89e3\u51b3\u65b9\u6848.\n\u5982\u679c\u60a8\u60f3\u201c\u53c2\u4e0e\u201d\u7814\u7a76\uff0c\u8bf7\u5c3d\u53ef\u80fd\u6309\u7167\u6b64\u94fe\u63a5\u4e2d\u7ed9\u51fa\u7684\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u6211\u7684 GitHub \u5b58\u50a8\u5e93\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u4e0e\u6211\u7684\u548c\u5176\u4ed6\u4eba\u7684\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u6bd4\u8f83\uff0c\u5176\u4e2d\u5305\u542b\u6709\u5173\u5982\u4f55\u8f7b\u677e\u5c06\u60a8\u7684\u89e3\u51b3\u65b9\u6848\u6dfb\u52a0\u5230\u5f53\u524d\u57fa\u51c6\u6d4b\u8bd5\u5e76\u8fd0\u884c\u5b83\u7684\u8bf4\u660e\uff01\u8fd9\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u95ee\u9898\uff0c\u4e0d\u662f\u592a\u5bb9\u6613\uff0c\u4f46\u4e5f\u4e0d\u662f\u5f88\u96be\u3002\u5728\u7814\u7a76\u53d1\u8868 21 \u5e74\u540e\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u968f\u673a\u5076\u7136\u53d1\u73b0\u4e86\u5b83\uff0c\u6211\u53d1\u73b0\u5b83\u5f88\u6709\u8da3\uff0c\u60f3\u81ea\u5df1\u53c2\u4e0e\uff01\u663e\u7136\uff0c\u6211\u4e0d\u662f\u552f\u4e00\u4e00\u4e2a\u3002 Ron Garret\uff08\u5f53\u65f6\u5728\u7f8e\u56fd\u5b87\u822a\u5c40\u5de5\u4f5c\uff0c\u540e\u6765\u5728\u65e9\u671f\u7684\u8c37\u6b4c\u5de5\u4f5c\uff09\u53d1\u73b0\u5b83\u5f88\u6709\u8da3\uff0c\u53ef\u4ee5\u8fd0\u884c\u4ed6\u81ea\u5df1\u7684\u7814\u7a76\uff08\u5df2\u7ecf\u63d0\u5230\u7684 Lisp VS Java \u4e4b\u4e00\uff09\uff0c\u91cd\u7528\u540c\u6837\u7684\u95ee\u9898\uff0c\u4f46\u53ea\u8981\u6c42 Lisp \u7a0b\u5e8f\u5458\u89e3\u51b3\u5b83\u3002\u4ed6\u4ece\u4e92\u8054\u7f51\u65b0\u95fb\u7ec4\u62db\u52df\u7684\u5fd7\u613f\u8005\u90a3\u91cc\u5f97\u5230\u4e86 16 \u4e2a\u89e3\u51b3\u65b9\u6848\u3002\u751a\u81f3\u6211\u8ba4\u4e3a\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u540d\u4eba\u7684 Peter Norvig \u4e5f\u5728\u4ed6\u7684\u7f51\u7ad9\u4e0a\u53d1\u5e03\u4e86\u4ed6\u81ea\u5df1\u7528 Common Lisp \u7f16\u5199\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848\u3002\u55ef\uff0c\u57fa\u672c\u4e0a\uff0cJava \u5f88\u6162\uff0c\u4f7f\u7528\u592a\u591a\u5185\u5b58\uff0c\u5e76\u4e14\u4f7f\u7528\u5b83\u7f16\u5199\u4e00\u4e9b\u4e1c\u897f\u81f3\u5c11\u9700\u8981\u4e0e C \u6216 C++ \u4e00\u6837\u591a\u7684\u52aa\u529b\u3002\u6b64\u5916\uff0c\u81f3\u5c11\u5728 Prechalt \u7684\u60c5\u51b5\u4e0b\uff0c\u7a0b\u5e8f\u5458\u4e4b\u95f4\u7684\u5dee\u5f02\u901a\u5e38\u5927\u4e8e\u8bed\u8a00\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u4ece JDK 1.2 \u5f00\u59cb\uff0cJava \u7a0b\u5e8f\u901a\u5e38\u6bd4\u7528 C \u6216 C++ \u7f16\u5199\u7684\u7a0b\u5e8f\u6162\u5f97\u591a\u3002\u5b83\u4eec\u4e5f\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\u3002\u7136\u800c\uff0c\u5373\u4f7f\u5728\u4e00\u79cd\u8bed\u8a00\u4e2d\uff0c\u7531\u4e0d\u540c\u7a0b\u5e8f\u5458\u7f16\u5199\u7684\u540c\u4e00\u7a0b\u5e8f\u7684\u5b9e\u73b0\u4e4b\u95f4\u7684\u4eba\u9645\u5dee\u5f02\uff08\u574f/\u597d\u6bd4\uff09\u4e5f\u8fdc\u5927\u4e8e Java \u548c C/C++ \u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\u3002\n...\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u7f16\u7a0b\u95ee\u9898\uff0c\u201c\u811a\u672c\u8bed\u8a00\u201d\uff08Perl\u3001Python\u3001Rexx\u3001Tcl\uff09\u6bd4\u4f20\u7edf\u8bed\u8a00\u66f4\u6709\u6548\u7387\u3002\u5728\u8fd0\u884c\u65f6\u95f4\u548c\u5185\u5b58\u6d88\u8017\u65b9\u9762\uff0c\u5b83\u4eec\u901a\u5e38\u6bd4 Java \u597d\uff0c\u4e5f\u4e0d\u6bd4 C \u5dee\u591a\u5c11\u6216 C++\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u7531\u4e8e\u540c\u4e00\u8bed\u8a00\u4e2d\u4e0d\u540c\u7684\u7a0b\u5e8f\u5458\uff0c\u8bed\u8a00\u4e4b\u95f4\u7684\u5dee\u5f02\u5f80\u5f80\u5c0f\u4e8e\u5178\u578b\u5dee\u5f02\u3002 ... Lisp \u7684\u6027\u80fd\u5728\u6267\u884c\u901f\u5ea6\u4e0a\u4e0e C++ \u76f8\u5f53\u6216\u66f4\u597d ...\u5b83\u8fd8\u5177\u6709\u663e\u7740\u66f4\u4f4e\u7684\u53ef\u53d8\u6027\uff0c\u8fd9\u8f6c\u5316\u4e3a\u964d\u4f4e\u7684\u9879\u76ee\u98ce\u9669\u3002\u6b64\u5916\uff0c\u4e0e C++ \u6216 Java \u76f8\u6bd4\uff0c\u5f00\u53d1\u65f6\u95f4\u663e\u7740\u7f29\u77ed\u4e14\u53ef\u53d8\u6027\u66f4\u5c0f\u3002\u5185\u5b58\u6d88\u8017\u53ef\u4e0e Java \u76f8\u5ab2\u7f8e... Prechelt \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4ed6\u7684\u5b9e\u9a8c\u8bbe\u7f6e\u548c\u53c2\u4e0e\u8005\u7684\u6982\u51b5\uff0c\u4ee5\u53ca\u6bcf\u9879\u7814\u7a76\u4e2d\u6d89\u53ca\u7684\u8bb8\u591a\u6ce8\u610f\u4e8b\u9879\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u6d4f\u89c8 PSP \u8bba\u6587\uff0c\u8fd9\u662f\u4ed6\u540e\u6765\u53d1\u8868\u7684\u6587\u7ae0\u7684\u5f00\u7aef\u3002\u8bf7\u6ce8\u610f\uff0c\u539f\u59cb\u7814\u7a76\u4e2d\u6709\u4e24\u7ec4\u4e0d\u540c\u7684\u5b66\u751f\uff1aPSP \u5b66\u751f\uff0c\u4ed6\u4eec\u5df2\u7ecf\u5b66\u4f1a\u4e86\u5982\u4f55\u4f7f\u7528\u4e00\u79cd\u6280\u672f (PSP) \u6765\u660e\u786e\u5730\u63d0\u9ad8\u4ed6\u4eec\u7684\u5de5\u4f5c\u8d28\u91cf\uff0c\u800c\u5bf9\u7167\u7ec4\uff0c\u4e3b\u8981\u662f Java \u8bfe\u7a0b\u7684\u5b66\u751f\uff0c\u4ed6\u4eec\u5fc5\u987b\u53c2\u52a0\u7814\u7a76\u3002\u5927\u591a\u6570 C/C++ \u63d0\u4ea4\u90fd\u6765\u81ea PSP \u7ec4\uff0817 VS 5\uff09\uff0c\u4f46 Java \u63d0\u4ea4\u7684\u5206\u5e03\u66f4\u5747\u5300\uff0814 VS 10\uff09\u3002\u91cd\u8981\u7684\u662f\u8981\u8bb0\u4f4f\uff0cPSP \u5b66\u751f\u5df2\u7ecf\u4e60\u60ef\u4e8e\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u5206\u6790\u95ee\u9898\u5e76\u8bd5\u56fe\u9632\u6b62\u4ed6\u4eec\u7684\u7a0b\u5e8f\u51fa\u73b0\u7f3a\u9677\uff0c\u800c\u4e14\u8fd9\u9879\u7814\u7a76\u6700\u91cd\u8981\u7684\u8981\u6c42\u662f\u4f7f\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u53ef\u9760\u3002\u8fd9\u610f\u5473\u7740\u4f7f\u7528 Java \u4e0e C/C++ \u7684\u5b66\u751f\u7c7b\u578b\u5b58\u5728\u4e00\u4e9b\u5dee\u5f02\u3002\u5728 Java VS C \u4e2d\uff0cPrechalt \u751a\u81f3\u63d0\u5230\uff0c\u5e73\u5747\u800c\u8a00\uff0cJava \u7a0b\u5e8f\u5458\u5728 Java \u65b9\u9762\u7684\u7f16\u7a0b\u7ecf\u9a8c\u53ea\u6709 C/C++ \u7a0b\u5e8f\u5458\u5728 C/C++ \u65b9\u9762\u7684\u4e00\u534a\uff0c\u8fd9\u662f\u5f88\u81ea\u7136\u7684\uff0c\u56e0\u4e3a\u8fd9\u9879\u7814\u7a76\u662f\u5728 Java \u521a\u521a\u53d1\u5e03\u7684\u65f6\u5019\u8fdb\u884c\u7684\u3002\u7b2c\u4e00\u6b21\u3002\n\u65e0\u8bba\u5982\u4f55\uff0c\u5728 PSP \u8bba\u6587\u548c Java VS C \u4e2d\uff0cPrechelt \u5bf9\u7814\u7a76\u7684\u5c40\u9650\u6027\u975e\u5e38\u771f\u8bda\uff0c\u9274\u4e8e\u6570\u636e\uff08\u4ee5\u53ca\u4ed6\u4eec\u4f7f\u7528 1998 \u5e74\u53d1\u5e03\u7684 Java 1.2 \u7684\u4e8b\u5b9e\uff09\uff0c\u4ed6\u7684\u7ed3\u8bba\u975e\u5e38\u53ef\u9760\u3002\u7136\u800c\uff0c\u4f7f\u7528 Scripting VS Java/C\uff0c\u4e8b\u60c5\u53d8\u5f97\u66f4\u52a0\u6a21\u7cca\u3002\u8bf7\u6ce8\u610f\uff0cPrechelt \u518d\u6b21\u4e3a Java \u548c C/C++ \u7a0b\u5e8f\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u6570\u636e\uff0c\u4f46\u5bf9\u4e8e\u811a\u672c\u8bed\u8a00\u7ec4\uff0c\u53c2\u4e0e\u8005\u57fa\u672c\u4e0a\u662f\u5728\u4e92\u8054\u7f51\u7ec4\u4e2d\u53d1\u73b0\u7684\u968f\u673a\u4eba\u5458\uff1aPerl\u3001Python\u3001Rexx \u548c Tcl \u7a0b\u5e8f\u90fd\u662f\u540e\u671f\u63d0\u4ea4\u76841999 \u5e74\uff0c\u5728\u6211\u5728\u51e0\u4e2a Usenet \u65b0\u95fb\u7ec4\uff08comp.lang.perl.misc\u3001de.comp.lang.perl.misc\u3001comp.lang.rexx\u3001comp.lang.tcl\u3001comp. lang.tcl.announce\u3001comp.lang.python\u3001comp.lang.python.announce\uff09\u548c\u4e00\u4e2a\u90ae\u4ef6\u5217\u8868\uff08\u79f0\u4e3a\u201cFun with Perl\u201d\uff0cfwp@technofile.org\uff09\u3002\u53e6\u8bf7\u6ce8\u610f\uff0c\u89e3\u51b3\u89e3\u51b3\u65b9\u6848\u6240\u82b1\u8d39\u7684\u65f6\u95f4\u662f\u81ea\u6211\u62a5\u544a\u7684\uff0c\u811a\u672c\u8bed\u8a00\u53c2\u4e0e\u8005\u6ca1\u6709\u4ee5\u4efb\u4f55\u65b9\u5f0f\u53d7\u5230\u76d1\u63a7\uff0c\u8fd9\u4e0e\u53c2\u52a0\u7b2c\u4e00\u9879\u7814\u7a76\u7684\u53c2\u4e0e\u8005\u975e\u5e38\u4e0d\u540c\uff08\u5176\u4e2d\u8bb8\u591a\u4eba\u4e60\u60ef\u4e8e\u82b1\u66f4\u591a\u65f6\u95f4\u601d\u8003\u95ee\u9898\uff0c\u6b63\u5982 PSP \u6240\u9f13\u52b1\u7684\u90a3\u6837\uff09\u3002 Prechelt \u63d0\u5230\u811a\u672c\u7a0b\u5e8f\u5458\u62a5\u544a\u7684\u5de5\u4f5c\u65f6\u95f4\u53ef\u80fd\u4e0d\u51c6\u786e\u3002\u55ef\uff0c\u8fd9\u53ef\u80fd\u662f\u4ed6\u6240\u6709\u8bba\u6587\u4e2d\u6700\u5927\u7684\u8f7b\u63cf\u6de1\u5199\u3002\u8be5\u8bba\u6587\u53d1\u73b0\u811a\u672c\u7684\u4e2d\u4f4d\u65f6\u95f4\u4e3a 3.1 \u5c0f\u65f6\uff0c\u800c\u975e\u811a\u672c\u7ec4\u4e3a 10.0 \u5c0f\u65f6\u3002\u8bf7\u6ce8\u610f\uff0c\u6839\u636e\u60a8\u67e5\u770b\u6570\u636e\u7684\u65b9\u5f0f\uff0c\u60a8\u8fd8\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u81ea\u6211\u62a5\u544a\u65f6\u95f4\u7684\u53c2\u4e0e\u8005\u6bd4\u5b9e\u9645\u76d1\u63a7\u7684\u53c2\u4e0e\u8005\u5feb 3 \u500d\u3002\u539f\u59cb PSP \u7814\u7a76\u4e2d\u8d85\u8fc7\u4e00\u534a\u7684\u5b66\u751f\u82b1\u8d39\u4e86\u8d85\u8fc7\u5728\u8fd9\u4e2a\u95ee\u9898\u4e0a\u5de5\u4f5c\u4e86\u4e00\u5929\uff0c\u4ed6\u4eec\u4e0d\u4ec5\u5728\u90a3\u4e2a\u7814\u7a76\u4e2d\u4f7f\u7528\u4e86 Java\uff0c\u800c\u4e14\u57fa\u672c\u4e0a\u4f7f\u7528\u4e86\u4ed6\u4eec\u60f3\u8981\u4f7f\u7528\u7684\u4efb\u4f55\u8bed\u8a00\uff08\u5c3d\u7ba1 Prechelt \u4f3c\u4e4e\u53ea\u5728\u4ed6\u540e\u6765\u7684\u8bba\u6587\u4e2d\u4f7f\u7528\u4e86 Java \u7ed3\u679c\uff09\uff01\n\u4e0d\u8fc7\uff0c\u8fd8\u6709\u4e00\u4e9b\u66f4\u6709\u8da3\u7684\u53d1\u73b0\u3002\u4f8b\u5982\uff0c\u811a\u672c\u6bd4\u975e\u811a\u672c\u77ed\u4e24\u5230\u4e09\u500d\uff0c\u7a0b\u5e8f\u53ef\u9760\u6027\u5dee\u5f02\u7684\u7ed3\u679c\u76f8\u4e92\u77db\u76fe\uff0c\u8fd9\u4e00\u53d1\u73b0\u8ba9\u8bb8\u591a\u5176\u4ed6\u7814\u7a76\u7684\u4f5c\u8005\u611f\u5230\u56f0\u60d1\uff0c\u7279\u522b\u662f\u5728\u9759\u6001 VS \u52a8\u6001\u7c7b\u578b\u8bed\u8a00\u9886\u57df\uff08\u56e0\u4e3a\u8fd9\u8868\u660e\u4f7f\u7528\u9759\u6001\u7c7b\u578b\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u5bfc\u81f4\u66f4\u53ef\u9760\u7684\u7a0b\u5e8f\uff09\u3002\u5982\u679c Prechelt \u4e3b\u8981\u662f\u76f4\u8a00\u4e0d\u8bb3\u5730\u6307\u51fa\u4ed6\u7684\u53d1\u73b0\u7684\u6ce8\u610f\u4e8b\u9879\uff0c\u90a3\u4e48 Garret \u5c31\u5c11\u5f97\u591a\u3002\u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5982\u4f55\u4e3a\u4ed6\u7684\u7814\u7a76\u6536\u96c6\u6570\u636e\uff0c\u56e0\u4e3a\u9664\u4e86\u8bf4\u660e\u6211\u4eec\u5c3d\u53ef\u80fd\u590d\u5236\u539f\u59cb\u7814\u7a76\u7684\u60c5\u51b5\u5916\uff0c\u6839\u672c\u6ca1\u6709\u63cf\u8ff0\u8be5\u7a0b\u5e8f\u3002\u8003\u8651\u5230\u53c2\u4e0e\u8005\u662f\u4ece\u7f51\u7edc\u7ec4\u62db\u52df\u7684\uff0c\u6211\u6000\u7591\u53d7\u8bd5\u8005\u88ab\u76d1\u63a7\u5230\u4f4d\uff0c\u8fd9\u8ba9\u6211\u89c9\u5f97\u6536\u96c6\u7684\u5f00\u53d1\u65f6\u95f4\u6570\u636e\u5e94\u8be5\u662f\u4e00\u7c92\u76d0\u3002\u7136\u800c\uff0c\u62a5\u544a\u7684\u65f6\u95f4\u4f3c\u4e4e\u4e0e Prechelt \u7814\u7a76\u4e2d\u811a\u672c\u7f16\u5199\u7ec4\u81ea\u6211\u62a5\u544a\u7684\u65f6\u95f4\u76f8\u4f3c\uff1aLisp \u7528\u6237\u4e3a 2 \u5230 8.5 \u5c0f\u65f6\uff0cPrechelt \u7814\u7a76\u4e2d\u811a\u672c\u7f16\u5199\u7ec4\u4e3a 3 \u5230 10 \u5c0f\u65f6\u3002 ... \u4e00\u4e2a\u53e4\u8001\u7684\u7ecf\u9a8c\u6cd5\u5219\uff0c\u5b83\u8bf4\u7a0b\u5e8f\u5458\u6bcf\u5c0f\u65f6\u7684\u4ee3\u7801\u5185\u8054\u91cf\uff08LOC/\u5c0f\u65f6\uff09\u5927\u81f4\u72ec\u7acb\u4e8e\u7f16\u7a0b\u8bed\u8a00\u3002\u4ed6\u7528\u8fd9\u4e2a\u63a8\u7406\u5f97\u51fa\u7ed3\u8bba\uff0c\u5982\u679c\u8fd9\u662f\u771f\u7684\uff0c\u90a3\u4e48\u81ea\u6211\u62a5\u544a\u7684\u65f6\u95f4\u5e94\u8be5\u79bb\u73b0\u5b9e\u4e0d\u8fdc\u3002 Lisp \u5728\u8fd0\u884c\u65f6\u4f18\u4e8e Java\uff0c\u4e0e C++ \u76f8\u5ab2\u7f8e\uff0c\u5728\u7f16\u7a0b\u5de5\u4f5c\u91cf\u548c\u7ed3\u679c\u53ef\u53d8\u6027\u65b9\u9762\u90fd\u4f18\u4e8e C++\u3002\u57fa\u4e8e\u50cf Garret \u8fd9\u6837\u7684\u5c0f\u578b\u7814\u7a76\uff0c\u6211\u53d1\u73b0 Lisp \u5982\u6b64\u4f1f\u5927\u7684\u524d\u63d0\u662f\u6ca1\u6709\u6839\u636e\u7684\u3002\u5f53\u7136\uff0c\u4ed6\u53ef\u80fd\u4f1a\u7528\u81ea\u5df1\u7684\u7ecf\u5386\uff0c\u4e5f\u53ef\u80fd\u662f\u5176\u4ed6\u4eba\u7684\u8bc1\u8bcd\u6765\u5c06\u5176\u89c6\u4e3a\u4e8b\u5b9e\uff0c\u4f46\u662f\u5728\u8fd9\u6837\u7684\u8bba\u6587\u4e2d\uff0c\u60a8\u5fc5\u987b\u5728\u505a\u51fa\u8fd9\u6837\u7684\u6ed1\u52a8\u9648\u8ff0\u65f6\u63d0\u4f9b\u60a8\u7684\u6765\u6e90\u3002\u4e2a\u4eba\u611f\u89c9\u4e0d\u591f\u597d\u3002\n\u7136\u800c\uff0c\u6570\u636e\u786e\u5b9e\u8868\u660e Lisp \u7684\u751f\u4ea7\u529b\u4e0e\u5f53\u65f6\u7684\u811a\u672c\u8bed\u8a00\u4e00\u6837\u591a\uff0c\u5e76\u4e14\u901f\u5ea6\u53ef\u4e0e C \u548c C++ \u76f8\u5ab2\u7f8e\uff0c\u8fd9\u786e\u5b9e\u662f\u4e00\u9879\u4e86\u4e0d\u8d77\u7684\u6210\u5c31\u3002\u6211\u5728\u9605\u8bfb\u4e00\u7bc7\u5173\u4e8e Juliain \u7684\u6587\u7ae0\u65f6\u9047\u5230\u4e86 Prechelt \u7684\u7535\u8bdd\u53f7\u7801\u95ee\u9898\uff0c\u4f5c\u8005\u8bf4\uff1a\u6211\u7684\u5fc3\u788e\u4e86\uff0c\u56e0\u4e3a Common Lisp \u662f\u4e00\u79cd\u5f88\u597d\u7684\u8bed\u8a00\uff0c\u5de5\u4f5c\u5f88\u6109\u5feb\uff0c\u4f46\u5728\u5de5\u4e1a\u754c\u51e0\u4e4e\u6ca1\u6709\u4eba\u4f7f\u7528\u5b83\u3002 Java \u4e2d\u7684\u5927\u91cf\u4ee3\u7801\uff0c\u5373\u4f7f\u5728 Lisp \u4e2d\u7f16\u5199\u4ee3\u7801\u6240\u9700\u7684\u65f6\u95f4\u66f4\u5c11**\u3002\u7a0b\u5e8f\u5458\u7684\u65f6\u95f4\u53d1\u751f\u4e86\u4ec0\u4e48\u6bd4\u673a\u5668\u7684\u65f6\u95f4\u66f4\u91cd\u8981\uff1f\u6b64\u7c7b\u58f0\u660e\u7684\u6765\u6e90\u662f Garret \u7684 Lisp VS Java\u3002\u5f53\u6211\u7b2c\u4e00\u6b21\u9605\u8bfb\u90a3\u7bc7\u8bba\u6587\u65f6\uff0c\u6211\u5bf9\u5b83\u7684\u7ed3\u8bba\u5f88\u7740\u8ff7\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u201c\u53c2\u4e0e\u201d\u8fd9\u9879\u7814\u7a76\uff0c\u770b\u770b\u4ed6\u4eec\u7684\u7ed3\u8bba\u662f\u5426\u73b0\u5b9e\uff0c\u4e5f\u8bb8 Java 16\uff08\u5199\u4f5c\u65f6\u7684\u6700\u65b0\u7248\u672c\uff09\u81f3\u5c11\u6539\u8fdb\u4e86\u4e00\u4e2a\u4e0e Common Lisp \u7684\u4f1f\u5927\u76f8\u6bd4\u4e00\u70b9\u70b9\u3002\u6211\u9605\u8bfb\u4e86 Garret \u8bba\u6587\u4e2d\u94fe\u63a5\u7684\u8bf4\u660e\uff0c\u5e76\u7acb\u5373\u5f00\u59cb\u7740\u624b\u7814\u7a76\u3002\u6211\u8bbe\u6cd5\u5728\u5927\u7ea6 1 \u5c0f\u65f6\u5185\u7f16\u5199\u4e86\u6240\u6709\u6837\u677f\u4ee3\u7801\uff08\u8bfb\u53d6\u8f93\u5165\u3001\u6e05\u7406\u5b83\u3001\u6536\u96c6\u548c\u6253\u5370\u7ed3\u679c\u3001\u57fa\u672c\u6d4b\u8bd5\uff09\u3002\u540c\u65f6\uff0c\u6211\u6b63\u5728\u51b3\u5b9a\u4f7f\u89e3\u51b3\u65b9\u6848\u9ad8\u6548\u7684\u6700\u4f73\u7b56\u7565\uff0c\u5e76\u51b3\u5b9a\u4f7f\u7528\u6211\u5df2\u7ecf\u719f\u6089\u7684 Trie \u6570\u636e\u7ed3\u6784\u3002\u6211\u53c8\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3\u7684\u65f6\u95f4\uff0c\u6839\u636e\u8bf4\u660e\u4e2d\u7ed9\u51fa\u7684\u4f8b\u5b50\uff0c\u901a\u8fc7\u66f4\u591a\u7684\u6d4b\u8bd5\u6765\u7f16\u5199\u4e00\u4e2a\u57fa\u672c\u7684\u95ee\u9898\u89e3\u51b3\u65b9\u6848......\u4f46\u5b9e\u9645\u4e0a\u5b8c\u6210\u4e86\u7b97\u6cd5\uff0c\u4e0d\u5e78\u7684\u662f\uff0c\u82b1\u4e86\u6211\u66f4\u591a\u7684\u65f6\u95f4\uff08\u6211\u4e0d\u5199\u8fd9\u6837\u7684\u7b97\u6cd5\u6bcf\u5929\uff09\uff0c\u7279\u522b\u662f\u56e0\u4e3a\u4e00\u4e2a\u6211\u65e0\u6cd5\u8f7b\u6613\u89e3\u51b3\u7684\u5c0f\u9519\u8bef\uff08\u5f53\u6211\u5728\u4efb\u4f55\u4f4d\u7f6e\u90fd\u627e\u4e0d\u5230\u5355\u8bcd\u65f6\uff0c\u6211\u8bd5\u56fe\u6ce8\u5165\u4e00\u4e2a\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u4ec5\u5728\u6f5c\u5728\u5355\u8bcd\u7684\u5f00\u5934......\u4e00\u65e6\u627e\u5230\u539f\u56e0\uff0c\u4fee\u590d\u8d77\u6765\u5c31\u5f88\u7b80\u5355\u4e86\uff09\u3002\n\u603b\u800c\u8a00\u4e4b\uff0c\u6211\u4f30\u8ba1\u6211\u7684\u603b\u65f6\u95f4\u7ea6\u4e3a 3.5 \u5c0f\u65f6\u3002\u8fd9\u51e0\u4e4e\u662f Norvig \u7684\u4e24\u500d\uff0c\u4f46\u81f3\u5c11\u8ba9\u6211\u611f\u5230\u6b23\u6170\u7684\u662f\uff0c\u4e0e\u7814\u7a76\u4e2d\u7684\u5176\u4ed6\u53c2\u4e0e\u8005\u76f8\u6bd4\uff0c\u6211\u8bbe\u6cd5\u505a\u5f97\u76f8\u5f53\u597d\uff08\u540c\u6837\uff0c\u90a3\u4e9b\u88ab\u5b9e\u9645\u76d1\u63a7\u7684\u4eba\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u81ea\u6211\u62a5\u544a\u7684\u4eba\uff09\uff1a3 \u5230C/C++ \u4e3a 25 \u5c0f\u65f6\uff0cJava \u4e3a 4 \u5230 63 \u5c0f\u65f6\u3002\u672a\u53d7\u76d1\u63a7\u7684\u53c2\u4e0e\u8005\u62a5\u544a\u8bf4 Lisp \u9700\u8981 2 \u5230 8.5 \u4e2a\u5c0f\u65f6\uff0c\u811a\u672c\u8bed\u8a00\u9700\u8981\u5927\u7ea6 1 \u5230 10 \u4e2a\u5c0f\u65f6\u3002\u6211\u7684\u89e3\u51b3\u65b9\u6848\u4f7f\u7528 Java 16 \u9700\u8981 167 \u884c\u4ee3\u7801\uff0c\u800c Lisp \u7684\u8303\u56f4\u4e3a 51 \u5230 182\uff0cJava \u4e3a 107 \u5230 500+\uff0cC/C++ \u4e3a 130 \u5230 500+\uff0c\u811a\u672c\u8bed\u8a00\u5927\u7ea6\u4e3a 50 \u5230 200\u3002\u7531\u4e8e\u8ba1\u7b97\u673a\u5728\u8fc7\u53bb 21 \u5e74\u4e2d\u53d6\u5f97\u4e86\u957f\u8db3\u7684\u8fdb\u6b65\uff0c\u539f\u59cb\u8f93\u5165\u6587\u4ef6\u548c\u5b57\u5178\u592a\u5c0f\u4e86\uff0c\u65e0\u6cd5\u4f7f\u7a0b\u5e8f\u8fd0\u884c\u4e00\u79d2\u949f\u4ee5\u4e0a\uff01\u6240\u4ee5\u6211\u4e0d\u5f97\u4e0d\u751f\u6210\u4e00\u4e9b\u66f4\u957f\u7684\u8f93\u5165\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u4e86\u89e3\u6211\u7684\u89e3\u51b3\u65b9\u6848\u7684\u6027\u80fd\u3002\u9274\u4e8e\u4f3c\u4e4e\u6ca1\u6709\u4e00\u9879\u7814\u7a76\u53d1\u5e03\u4e86\u4ed6\u4eec\u6536\u96c6\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4f7f\u7528 Peter Norvig \u7684 CLimplementation \u4f5c\u4e3a\u57fa\u51c6\u3002\u5728 Lisp VS Java \u4e2d\uff0c\u5927\u591a\u6570 Common Lisp \u89e3\u51b3\u65b9\u6848\u5177\u6709\u975e\u5e38\u76f8\u4f3c\u7684\u901f\u5ea6\u548c\u5185\u5b58\u4f7f\u7528\u91cf\uff0c\u56e0\u6b64\u6211\u8ba4\u4e3a Norvig \u7684\u5b9e\u73b0\u4e5f\u5c06\u4e0e\u5176\u4ed6\u89e3\u51b3\u65b9\u6848\u76f8\u8fd1\u3002\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a GitHub \u5b58\u50a8\u5e93\u4e0a\u9605\u8bfb\u5b8c\u6574\u7684\u8bf4\u660e\u6765\u81ea\u5df1\u8fd0\u884c\u6d4b\u8bd5\uff0c\u5176\u4e2d\u5305\u62ec\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u5728\u4e92\u8054\u7f51\u4e0a\u627e\u5230\u7684\u5176\u4ed6\u51e0\u4e2a\uff0c\u9664\u4e86\u6211\u5bf9 Norvig \u7684 Java \u548c Rust \u89e3\u51b3\u65b9\u6848\u6240\u505a\u7684\u7aef\u53e3\u3002\n\u5728\u6211\u4eec\u8ba8\u8bba\u53ef\u7528\u4e8e\u89e3\u51b3\u95ee\u9898\u7684\u4e0d\u540c\u7b56\u7565\u540e\uff0c\u8be5\u5206\u6790\u7684\u7ed3\u679c\u5c06\u5728\u4e0b\u4e00\u8282\u4e2d\u663e\u793a\u3002\u811a\u672c\u7ec4\u4e2d\u7684\u5927\u591a\u6570\u7a0b\u5e8f\u5458\u4f7f\u7528\u4ed6\u4eec\u8bed\u8a00\u63d0\u4f9b\u7684\u5173\u8054\u6570\u7ec4\uff0c\u5e76\u5b58\u50a8\u8981\u901a\u8fc7\u5176\u6570\u5b57\u7f16\u7801\u68c0\u7d22\u7684\u5b57\u5178\u5355\u8bcd\u3002\u641c\u7d22\u7b97\u6cd5\u53ea\u662f\u5c1d\u8bd5\u4ece\u8be5\u6570\u7ec4\u4e2d\u68c0\u7d22\uff0c\u4f7f\u7528\u5f53\u524d\u624b\u673a\u5269\u4f59\u90e8\u5206\u7684\u589e\u52a0\u957f\u5ea6\u7684\u524d\u7f00number \u4f5c\u4e3akey\u3002\u627e\u5230\u7684\u4efb\u4f55\u5339\u914d\u90fd\u4f1a\u5bfc\u81f4\u7a0d\u540e\u5b8c\u6210\u65b0\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u7684\u975e\u811a\u672c\u7a0b\u5e8f\u5458\u90fd\u9009\u62e9\u4e86\u4ee5\u4e0b\u89e3\u51b3\u65b9\u6848\u4e4b\u4e00\u3002\u5728\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u53ea\u662f\u5c06\u6574\u4e2a\u5b57\u5178\u5b58\u50a8\u5728\u4e00\u4e2a\u6570\u7ec4\u4e2d\uff0c\u901a\u5e38\u4ee5\u539f\u59cb\u5b57\u7b26\u5f62\u5f0f\u548c\u76f8\u5e94\u7684\u7535\u8bdd\u53f7\u7801\u8868\u793a\u5f62\u5f0f\u3002\u7136\u540e\u4ed6\u4eec\u4e3a\u8981\u7f16\u7801\u7684\u7535\u8bdd\u53f7\u7801\u7684\u6bcf\u4e2a\u6570\u5b57\u9009\u62e9\u5e76\u6d4b\u8bd5\u6574\u4e2a\u5b57\u5178\u7684\u5341\u5206\u4e4b\u4e00\uff0c\u4ec5\u4f7f\u7528\u7b2c\u4e00\u4e2a\u6570\u5b57\u4f5c\u4e3a\u5173\u952e\u5b57\u6765\u9650\u5236\u641c\u7d22\u7a7a\u95f4\u3002\u8fd9\u5bfc\u81f4\u4e00\u4e2a\u7b80\u5355\u4f46\u6548\u7387\u4f4e\u4e0b\u7684\u89e3\u51b3\u65b9\u6848\u3002\u66f4\u590d\u6742\u7684\u60c5\u51b5\u4f7f\u7528\u4e00\u4e2a 10 \u53c9\u6811\uff0c\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u4ee3\u8868\u67d0\u4e2a\u6570\u5b57\uff0c\u9ad8\u5ea6\u4e3a n rep \u7684\u8282\u70b9\u91cd\u53d1\u5355\u8bcd\u7684\u7b2cn\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u4ece\u6839\u5230\u8be5\u8282\u70b9\u7684\u8def\u5f84\u4ee3\u8868\u5355\u8bcd\u7684\u7f16\u53f7\u7f16\u7801\uff0c\u5219\u5c06\u5355\u8bcd\u5b58\u50a8\u5728\u8be5\u8282\u70b9\u4e0a\u3002\u8fd9\u662f\u6700\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u9700\u8981\u6bd4\u8f83\u5927\u91cf\u7684\u8bed\u53e5\u6765\u5b9e\u73b0\u6811\u7ed3\u6784\u3002\u8fd9\u4e2a\u5206\u6790\u5728\u6211\u770b\u6765\u662f\u6b63\u786e\u7684\uff01\u7ed3\u679c\u8bc1\u660e\u6211\u7684\u89e3\u51b3\u65b9\u6848\u662f\u4ed6\u6240\u8bf4\u7684\u6700\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff08\u4ed6\u63cf\u8ff0\u4e86\u4e00\u79cd Trie \u6570\u636e\u7ed3\u6784\uff09\uff0cNorvig \u7684\u89e3\u51b3\u65b9\u6848\u6b63\u662f\u5927\u591a\u6570\u811a\u672c\u7ec4\u63d0\u51fa\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5b83\u66f4\u5bb9\u6613\u5b9e\u73b0\u3002\u8fd9\u79cd\u7b56\u7565\u4e0a\u7684\u5dee\u5f02\u5bf9\u6bcf\u4e2a\u7a0b\u5e8f\u7684\u957f\u5ea6\u53ca\u5176\u6548\u7387\u90fd\u6709\u660e\u663e\u7684\u5f71\u54cd\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u6bd4\u8f83\u4f7f\u7528\u5e7f\u6cdb\u4e0d\u540c\u7b56\u7565\u7684\u7a0b\u5e8f\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u771f\u6b63\u5c06\u6211\u4eec\u7684\u7ed3\u8bba\u63a8\u65ad\u4e3a\u6240\u4f7f\u7528\u8bed\u8a00\u7684\u5dee\u5f02\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u65e0\u8bba\u4f7f\u7528\u4f55\u79cd\u8bed\u8a00\uff0c\u4f7f\u7528 trie \u7b56\u7565\u7684\u7a0b\u5e8f\uff08\u5927\u591a\u6570\u975e\u811a\u672c\u7a0b\u5e8f\uff09\u90fd\u5c06\u6bd4\u4f7f\u7528\u5173\u8054\u6570\u7ec4\u7684\u7a0b\u5e8f\uff08\u5927\u591a\u6570\u811a\u672c\u7a0b\u5e8f\uff09\u66f4\u957f\u3002\u7136\u800c\uff0c\u6ce8\u610f\u5230\u8be5\u8bed\u8a00\u4f3c\u4e4e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u5f15\u5bfc\u7a0b\u5e8f\u5458\u4f7f\u7528\u4e00\u79cd\u6216\u53e6\u4e00\u79cd\u7b56\u7565\u4ecd\u7136\u5f88\u6709\u8da3\u3002\u4e3a\u4e86\u770b\u770b\u5982\u679c\u6211\u9009\u62e9 Norvig \u7684\u7b56\u7565\u800c\u4e0d\u662f\u4f7f\u7528 Trie \u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6211\u51b3\u5b9a\u5c06\u4ed6\u7684 CL \u4ee3\u7801\u5c3d\u53ef\u80fd\u5730\u79fb\u690d\u5230 Java\u3002\u6211\u4e5f\u9488\u5bf9 Rust \u505a\u4e86\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u4ee5\u4fbf\u83b7\u5f97\u7b97\u6cd5\u8fd0\u884c\u901f\u5ea6\u7684\u57fa\u51c6\uff08\u6216\u8005\u6211\u8ba4\u4e3a\uff09\u3002\n\u66f4\u65b0\uff082021 \u5e74 7 \u6708 25 \u65e5\uff09\uff1a\u6211\u73b0\u5728\u4e5f\u5728 Dartand Julia \u4e2d\u6dfb\u52a0\u4e86\u89e3\u51b3\u65b9\u6848\uff01\u8bf7\u53c2\u9605 Incl\u3002\u98de\u9556\u548c\u5305\u62ec\u3002 Julia \u6807\u7b7e\u5728\u4e0b\u9762\u94fe\u63a5\u7684\u7ed3\u679c\u4e2d\uff0c\u4ee5\u67e5\u770b\u5b83\u4eec\u7684\u8868\u73b0\u3002 Java 1 \u5b9e\u73b0\u4e86\u4e0e\u5176\u4ed6\u5b9e\u73b0\u4e0d\u540c\u7684\u7b97\u6cd5\uff08Trie\uff0c\u800c\u4e0d\u662f\u5173\u8054\u6620\u5c04\uff09\u3002\u8fd0\u884c\u5e26\u6709\u9650\u5236\u5185\u5b58\u4f7f\u7528\u7684\u6807\u5fd7\u7684 Java \u4f1a\u4f7f Java \u7ed3\u679c\u6709\u6240\u4e0b\u964d\uff0c\u4f46\u4e0d\u4f1a\u592a\u591a\u3002\u8bf7\u53c2\u9605\u7ed3\u679c\u7535\u5b50\u8868\u683c\u4e0a\u7684\u7b2c\u4e09\u6b21\u8fd0\u884c\u4ee5\u4e86\u89e3 Java \u7ed3\u679c\u5982\u4f55\u53d8\u5316\u3002 Rust \u89e3\u51b3\u65b9\u6848\u968f\u7740\u8f93\u5165\u6570\u91cf\u7684\u589e\u52a0\u800c\u53d8\u5f97\u975e\u5e38\u6162\u3002\u6211\u5728 Rust Discord Channel \u4e0a\u5411 Rust \u5f00\u53d1\u4eba\u5458\u8be2\u95ee\u4e86\u4e3a\u4ec0\u4e48\u5b83\u8fd9\u4e48\u6162\uff0c\u4f46\u7ecf\u8fc7\u591a\u6b21\u5efa\u8bae\uff0c\u7ed3\u679c\u5e76\u6ca1\u6709\u663e\u7740\u6539\u5584\uff08\u4e0a\u9762\u663e\u793a\u7684\u7ed3\u679c\u5305\u62ec\u4e00\u4e9b\u5efa\u8bae\uff09\u3002\u6211\u4ec0\u81f3\u751f\u6210\u4e86\u4e00\u4e2a\u706b\u7130\u56fe\u6765\u5206\u6790 Rust \u4ee3\u7801\uff0c\u4f46\u627e\u4e0d\u5230\u4efb\u4f55\u5feb\u901f\u4fee\u590d\u3002\u7f16\u8f91 (2021-07-31)\uff1a\u6211\u4e3a\u6b64\u57fa\u51c6\u7f16\u5199\u7684 Rust \u4ee3\u7801\u6709\u51e0\u4e2a\u95ee\u9898\uff0c\u6211\u51b3\u5b9a\u5728\u4e0b\u4e00\u7bc7\u535a\u6587\u4e2d\u8be6\u7ec6\u8ba8\u8bba\uff01\u5982\u679c\u60a8\u6ca1\u6709\u65f6\u95f4\uff1aRust \u53ef\u4ee5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u4f46\u5176\u4ed6\u8bed\u8a00\u4e5f\u53ef\u4ee5\u8fd0\u884c\u5f97\u66f4\u5feb\uff0c\u800c\u4e14\u6839\u636e\u65b0\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0cJava \u5b9e\u73b0\u53ef\u80fd\u6bd4 Rust \u6700\u5feb\u7684\u5b9e\u73b0\u8fd0\u884c\u5f97\u66f4\u5feb\u5e2e\u52a9\u4f7f Rust \u66f4\u5feb\u3002 Common Lisp \u53ef\u80fd\u5df2\u7ecf\u843d\u540e\u4e86\uff0c\u4f46\u8fd9\u53ef\u80fd\u53ea\u662f\u56e0\u4e3a\u5b83\u6ca1\u6709\u50cf Java \u548c Rust \u5b9e\u73b0\u90a3\u6837\u4f18\u5316\u3002\u51fa\u4e4e\u610f\u6599\u7684\u662f\uff0cCommon Lisp \u662f\u603b\u4f53\u4e0a\u6700\u597d\u7684\u8bed\u8a00\uff0c\u8fd0\u884c\u901f\u5ea6\u6700\u5feb\uff0c\u9664\u4e86\u6700\u5927\u7684\u8f93\u5165\u5927\u5c0f\uff08\u5373\u4fbf\u5982\u6b64\uff0c\u5b83\u4e5f\u53ea\u88ab Java \u5b9e\u73b0\u7684\u4e0d\u540c\u7b97\u6cd5\u6253\u8d25\uff09\u5e76\u4e14\u6d88\u8017\u5f88\u5c11\u7684\u5185\u5b58\u3002\nJava \u4f3c\u4e4e\u4ecd\u7136\u6bd4\u4f4e\u7ea7\u8bed\u8a00\uff08\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e3a Rust\uff09\u6d88\u8017\u66f4\u591a\u7684\u5185\u5b58\uff0c\u73b0\u5728\u751a\u81f3\u6bd4Common Lisp\uff08\u53c2\u89c1\u6211\u4e0a\u9762\u5173\u4e8e\u8c03\u6574 JVM \u5185\u5b58\u8bbe\u7f6e\u7684\u8bc4\u8bba\uff0c\u8fd9\u5e76\u6ca1\u6709\u771f\u6b63\u7684\u5e2e\u52a9\uff09\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u5b83\u53ef\u4ee5\u975e\u5e38\u5feb\u3002 Rust \u89e3\u51b3\u65b9\u6848\u663e\u793a\u4e86\u8fd0\u884c\u4efb\u610f\u6570\u91cf\u7684\u8f93\u5165\u6240\u9700\u7684\u5185\u5b58\u662f\u591a\u5c11\uff08\u5bf9\u4e8e\u4efb\u4f55\u8f93\u5165\u5927\u5c0f\uff0c\u5185\u5b58\u90fd\u662f\u76f8\u540c\u7684\uff0c\u8fd9\u662f\u9884\u671f\u7684\uff0c\u56e0\u4e3a\u52a0\u8f7d\u5b57\u5178\u4f1a\u5360\u7528\u5927\u90e8\u5206\u5185\u5b58\uff09\uff0c\u4f46\u4e0d\u5e78\u7684\u662f\u6027\u80fd\u4e0b\u964d\u8f93\u5165\u6570\u91cf\u589e\u52a0\uff08\u89c1\u4e0a\u6587\u6ce8\u91ca\uff09\u3002\u8fd9\u4f3c\u4e4e\u8868\u660e\uff0c\u5373\u4f7f\u901f\u5ea6\u81f3\u5173\u91cd\u8981\uff0c\u4f7f\u7528 Rust \u4e5f\u53ef\u80fd\u4e0d\u4f1a\u81ea\u52a8\u83b7\u80dc\u3002 Java \u7aef\u53e3\uff08Java 2\uff09\u5bf9\u4e8e\u539f\u59cb CL \u6709 99 LOC VS 74 LOC\u3002Java \u4e2d\u7684\u5927\u591a\u6570\u989d\u5916\u884c\u5b9e\u9645\u4e0a\u6765\u81ea\u6211\u5fc5\u987b\u624b\u52a8\u5b9e\u73b0\u7684\u51e0\u4e2a\u51fd\u6570\uff1a&lt;T&gt; List&lt;T&gt; append( List&lt; T&gt; list, T item ) - \u9700\u8981\u4ee5\u4fbf\u5728 Trie \u7684\u6bcf\u4e2a\u5206\u652f\u4e0b\u9012\u5f52\u800c\u4e0d\u5f71\u54cd\u5f53\u524d\u7684\u90e8\u5206\u89e3\u51b3\u65b9\u6848\u3002 char[] removeIfNotLetterOr ......", "note_en": "In 1999,  Lutz Prechelt published a seminal article on the COMMUNICATIONS OF THE ACM (October 1999/Vol. 42, No. 10) called  Comparing Java vs. C/C++ Efficiency Differences to Interpersonal Differences,henceforth  Java VS C, which seems to have later (March 2000) been expanded into a full paper,  An empirical comparison of C, C++, Java, Perl, Python, Rexx, and Tcl for a search/string-processing program,henceforth  Scripting VS Java/C.\n In that paper, they analysed data from a study (which was run for another paper, as we\u2019ll see later) where participantswere asked to solve a problem consisting of encoding phone numbers into a combination ofdigits and words from a dictionary, presumably to make it easier for humans to remember phone numbers they might wantto recall later (this was in a time before mobile phones were widespread).\n The same problem was later used by  Ron Garret (aka Erann Gat) in his short paper, Lisp as an alternative to Java,henceforth  Lisp VS Java, from the year 2000.\n  In this article, I would like to revisit these papers, analyse their methodology and conclusions, andtry to find out whether anything has changed in the 21 years since those articles were published by writing my ownsolutions to the problem as if I, myself, had participated in one of the studies.\n I wrote a solution in Java without looking into any other solutions in order to find out how my solution (and Java 16)would\u2019ve done if it had participated.\n After that, I analysed some other solutions and compared them against mine. Based on my findings and some comments byPrechelt himself in his paper, I decided to write a second Java program to match a completely different strategy thatwas commonly used in the more dynamic languages. I implemented the same algorithm also in  Rustin order to get an idea of how a very modern systems-language would do.\n That should allow us to compare modern languages more directly by usingthe same exact algorithm (to the extent possible), eliminating the potentially big differences that could arise fromthe different algorithms chosen by the programmer.\n  All data used in Prechelt\u2019s  Java VS C, as well as the Java/C/C++ solutions used in  Scripting VS Java/C, come from an earlier studyon a software development technique called PSP (Personal Software Process). This study actually ran between August 1996and October 1998!\n That means that some participants were actually using the very first release of the JDK!\n The objective of that study had nothing to do with studying the differences between Java and C/C++, it was about investigatinghow effective PSP was (the results indicated that, mostly, PSP practictioners had more predictable, stable performancebut also worked a bit slower).\n 55 graduate students participated in that study, 24 of which used Java, 9 used C, 13 used C++, and the other two usedModula-2 and something called Sather-K! Most students came from either the PSP course or a Java Advanced Course.\n Nevertheless, this was the data the  Java VS C paper was based on. It included 24 programs written inJava, 11 in C++ and 5 in C.\n The instructions given to participants of the study, slightly adapted for the  Lisp VS Java article,can be found at  flownet.com.\n  All programs implement the same functionality, namely a conversion of telephone numbers into word strings....The conversion is defined by a fixed mapping of characters to digits as follows:e j n q r w x d s y f t a m c i v b k u l o p g h z0 1 1 1 2 2 2 3 3 3 4 4 5 5 6 6 6 7 7 7 8 8 8 9 9 9The task of the program is to find a sequence of words such that the sequence of charactersin these words exactly corresponds to the sequence of digits in the phone number.All possible solutions must be found and printed.The solutions are created word by word and if no word from the dictionary can be inserted at some pointduring that process, a single digit from the phone number can appear in the result at that position.Many phone numbers have no solution at all.\n If you would like to \u201cparticipate\u201d in the study, follow the instructions given in this link as closely as possible. You can thencompare your solution against mine and other\u2019s using  my GitHub repositorywhich has instructions on how to easily add your solution to the current benchmark and run it!\n This is a nice problem, not too easy, but not very hard either. I found it interesting enough to want to participatemyself after I randomly stumbled upon it on the internet, 21 years after the study was published!\n Apparently, I was not the only one. Ron Garret (who worked at Nasa at the time and later went to work at early Google)found it interesting enough to run his own study (the already mentioned  Lisp VS Java one), re-using the sameproblem but asking only Lisp programmers to solve it. He got 16 solutions from  volunteers recruited from an Internet newsgroup.\n Even  Peter Norvig, who I consider a Computer Science celebrity, posted  his own solutionto the problem, written in  Common Lisp, on his website.\n  Well, basically, that Java is slow, uses too much memory and that it takes at least as much effort as C or C++ to writesomething using it. Also, at least in Prechalt\u2019s case, that the difference between programmers is generally greaterthan the difference between languages.\n   As of JDK 1.2, Java programs are typically much slower than programs written in C or C++.They also consume much more memory.\n  However, even within one language the interpersonal differences between implementationsof the same program written by different programmers (bad/good ratio) are much largerthan the average difference between Java and C/C++.\n  ... for the given programming problem, \u201cscripting languages\u201d (Perl, Python, Rexx, Tcl)are more productive than conventional languages.In terms of run time and memory consumption, they often turn out better than Java andnot much worse than C or C++.\n  In general, the differences between languages tend to be smaller than the typical differencesdue to different programmers within the same language.\n  ... Lisp\u2019s performance is comparable to or better than C++ in execution speed ...it also has significantly lower variability, which translates into reduced project risk.Furthermore, development time is significantly lower and less variable than either C++ or Java.Memory consumption is comparable to Java...\n  Prechelt describes in detail the setup of his experiments and the profile of participants, as well as the many caveatsinvolved in each study. I highly recommend skimming through the  PSP paperthat kicked off his later publications.\n Notice that there were two different groups of students in the original study: PSP students, who had learned how touse a technique (PSP) to explicitly increase the quality of their work, and the  control group,mostly students from a Java course who were obliged to participate in the study. Most of the C/C++ submissionsoriginated from the PSP group (17 VS 5), but the Java submissions were more evenly divided (14 VS 10).\n It\u2019s important to remember that PSP students had been conditioned to spend more time analysing the problem and attemptingto prevent defects in their programs, and that the most important requirement of the study was for programs to beas reliable as possible.\n This implies some difference in the  types of students working in Java VS C/C++. In  Java VS C, Prechalt even mentionsthat  on average, the Java programmers had only half as much programming experience in Java as the C/C++ programmershad in C/C++, which is natural given that the study ran when Java had just barely been released for the first time.\n Anyway, in both the PSP paper and  Java VS C, Prechelt was very sincere about the limitations of the study andhis conclusions were pretty solid given the data (and the fact they were using Java 1.2, released in 1998).\n However, things get murkier with  Scripting VS Java/C. Notice that Prechelt uses the same data again for the Java andC/C++ programs, but for the group of scripting languages, the participants were basically random people found onearly internet groups:\n The Perl, Python, Rexx, and Tcl programs were all submitted in late 1999 by volunteers after I had posted a \u201cCall for Programs\u201d on several Usenet newsgroups (comp.lang.perl.misc, de.comp.lang.perl.misc, comp.lang.rexx, comp.lang.tcl, comp.lang.tcl.announce, comp.lang.python, comp.lang.python.announce) and one mailing list (called \u201cFun with Perl\u201d, fwp@technofile.org).\n Notice also that the time taken to solve the solutions was self-reported and the script language participants were notmonitored in any way, quite unlike those who took part in the first study (many of whom had been conditioned to spendmore time thinking about the problem, as PSP encouraged).\n Prechelt mentions that  the work times reported by the script programmers may be inaccurate. Well, this is probably thebiggest understatement in all of his papers.\n The paper finds that the scripts\u2019 median time was 3.1 hours, compared to 10.0 hours for the non-script group.\n Notice that depending on how you look at the data, you could also have concluded that the participants who self-reportedtheir times were 3 times faster than those who were actually monitored.More than half of the students in the original PSP study spent more than a working day on the problem, and they were notonly using Java in that study, but basically whatever language they wanted to use (though Prechelt seems to have onlyused the Java results in his later paper)!\n There\u2019s some more interesting findings, though. For example, the fact that scripts were two to three times shorter thannon-scripts, and that there\u2019s conflicting results regarding differences in the reliability of programs, a finding thathas been puzzling many other study\u2019s authors, specially in the area of static VS dynamically typed languages (as thatsuggests that using static types do not actually result in more reliable programs).\n If Prechelt was mostly forthcoming in pointing out caveats to his findings, Garret was much less so.\n It\u2019s unclear how the data was collected for his study as the procedure was not described at all apart from a note sayingthat  to the extent possible we duplicated the circumstances of the original study. Given that the participants wererecruited from internet groups, I doubt that the subjects were monitored in place, which makes me think that the Development time data collected should be taken with a giant grain of salt. However, the reported times do seemsimilar to the scripting group self-reported times in Prechelt\u2019s study: 2 to 8.5 hours for Lisp users, 3 to 10 forthe scripting group in Prechelt\u2019s study.\n  ... an old rule of thumb, which says that programmer productivity measured inlines of code per hour (LOC/hour) is roughly independent of the programming language.\n He uses that reasoning to conclude that, if that\u2019s true, the self-reported times should not be far from reality.\n  Lisp is superior to Java and comparable to C++ in runtime, and it is superiorto both in programming effort and variability of results.\n    Based on a small study like Garret\u2019s, I find that the premise that  Lisp is so great is unwarranted. Sure, he maybe using his own experience and perhaps others\u2019 testimonies to take that as a fact, but in a paper like that, you mustprovide your sources when making swiping statements such as this one. Personal feeling is not good enough.\n However, the data does suggest that Lisp is about as productive as the scripting languages of the day and has a speedcomparable to C and C++, which is indeed a remarkable achievement.\n  I came across Prechelt\u2019s phone number problem when reading an  article about Juliain which the author said:\n My heart was broken because Common Lisp is such a fine fine languageand it is a joy to work in and hardly anyone uses it in industry.The industry has a lot of code in Java even when it takes **much less time** to write code in Lisp.What happened to the programmer\u2019s time is more important than the machine\u2019s?\n The  source for such statement was Garret\u2019s  Lisp VS Java. I was fascinated by the conclusion of that paper whenI first read it, so I decided to \u201cparticipate\u201d in the study to see if their conclusions had been realistic and if,perhaps, Java 16 (latest version as of writing) improved at least a little bit compared to the greatnessof Common Lisp.\n I read the instructions linked from Garret\u2019s paper and immediately started working on it.\n   I managed to write all the boilerplate code (read input, clean it up, collect and print results, basic tests) in justabout 1 hour. Meanwhile, I was deciding the best strategy to make the solution efficient and decided to use a Trie data structure, which was already familiar to me.\n It took me another hour or so to write a basic solution to the problem with a few more tests based on the examplesgiven in the instructions\u2026 but actually finishing thealgorithm off, unfortunately, took me some more time (I don\u2019t write algorithms like that every day), specially becauseof a small bug that I couldn\u2019t easily figure out how to fix (I was trying to inject a digit when I could not find a word on any position, instead of only at the beginning of a potential word\u2026once the reason was found, it was trivial to fix).\n  All in all, I estimate  my total time was around 3.5 hours. That\u2019s almost twice as much as Norvig, but at least I can takesome comfort in knowing I managed to do quite well when compared with other participants in the study (again, those whowere actually monitored, and did not just self-report):  3 to 25 hours for C/C++, 4 to 63 hours for Java.\n The non-monitored participants reported between  2 to 8.5 hours for Lisp, and  around 1 to 10 hours for the scriptinglanguages.\n  My solution required  167 lines of code using Java 16, compared with a range of  51 to 182 for Lisp, 107 to 500+ for Java,  130 to 500+ for C/C++,  around 50 to 200 for the scripting languages.\n   Because computers have come a long way in the last 21 years, the original input file and dictionary were far too smallto make the programs run for more than a second! So I had to generate some longer inputsin order to get a better sense of how performant my solution was.\n Given that none of the studies seem to have published the solutions they collected, I used Peter Norvig\u2019s CLimplementation as the baseline.\n In  Lisp VS Java, most Common Lisp solutions had very similar speed and memory usage, so I assume Norvig\u2019simplementation would also be close to the others.\n You can read the full instructions to run the test yourself on this  GitHub Repository,which includes my solution, several others I found around the internet, besides the ports I did of Norvig\u2019ssolution to Java and Rust.\n The results of this analysis will be shown in the next section after we discuss the different strategies that can beused to solve the problem.\n   Most of the programmers in the script group used the associative arrays providedby their language and stored the dictionary words to be retrieved by their numberencodings.The search algorithm simply attempts to retrieve from this array, using prefixesof increasing length of the remaining rest of the current phone number as the key.Any match found leads to a new partial solution to be completed later.In contrast, essentially all of the non-script programmers chose either of the followingsolutions.In the simple case, they simply store the whole dictionary in an array, usually in boththe original character form and the corresponding phone number representation.They then select and test one tenth of the whole dictionary for each digit of the phonenumber to be encoded, using only the first digit as a key to constrain the search space.This leads to a simple, but inefficient solution.The more elaborate case uses a 10-ary tree in which each node represents a certain digit,nodes at height n representing the n-th character of a word.A word is stored at a node if the path from the root to this node represents the numberencoding of the word.This is the most efficient solution, but it requires a comparatively large number ofstatements to implement the tree construction.\n This analysis is spot on in my opinion! My solution turned out to be the one he called  the most efficient one (he\u2019s describinga  Trie data structure), Norvig\u2019s solution was exactly the one most of the script group came up with, which was easier to implement.\n This difference in strategy has obvious consequences to the length of each program, as well as its efficiency. So whenwe compare programs that use widely different strategies, we cannot really extrapolate our conclusions to differencesin the languages being used. In other words, programs that used the trie strategy (most of the non-scripting ones)are going to be longer than the ones that used associative arrays (most of the scripting ones) regardless of thelanguage used.\n However, it is still quite interesting to note that the language seems to somehow guide programmers to use one oranother strategy.\n  To see what would\u2019ve happened if I had chosen Norvig\u2019s strategy instead of using a Trie, I decided to port his CL codeas closely as possible to Java.\n I did the same thing targeting Rust as well in order to get a baseline for how fast the algorithm could go(or so I thought).\n   UPDATE (25th July 2021): I\u2019ve now added solutions in Dartand  Julia as well!See the  Incl. Dart and  Incl. Julia tabs in the results linked just below to see how they performed.\n    Java 1 implements a different algorithm (a Trie, not an associative map) than the other implementations.\n   Running Java with flags to limit memory usage brings Java results down somewhat, but not much.See  Third runs on the results spreadsheetto see how the Java results change.\n   The Rust solution gets very slow with a higher number of inputs. I asked Rust developers on the Rust Discord Channelfor help figuring out why it was so slow, but after several suggestions, the results did not improve significantly(the result shown above includes some suggestions). I even generated a flamegraph to profile the Rust code,but was unable to find any quick fix.\n EDIT (2021-07-31): the Rust code I wrote for this benchmark has several issues, which I decided to discussat length in my  next blog post!\n  If you don\u2019t have time: Rust can run much faster, but so can the other languages, and it turns out that theJava implementation might run faster than the Rust fastest implementation, according to the new benchmarksI\u2019ve run after many Rust developers came to assist in making Rust faster. Common Lisp may have fallen behind,but that\u2019s likely just because it was not nearly as optimised as the Java and Rust implementations were.\n Quite unexpectedly, Common Lisp was the best language overall, running the fastest with all but the largest input size(and even then, it was beaten only by a different algorithm implemented in Java) and consuming very little memory.\n Java still appears to consume much more memory than low-level languages (Rust in this case) and, these days, even thanCommon Lisp (see my remarks above about tweaking the JVM memory settings, which don\u2019t really help). On the other hand,it can be very fast.\n The Rust solution shows how little memory can be necessary to run through any number of inputs (the memory is the samefor any input size, which is expected as most of the memory is taken up by loading the dictionary), but has someunfortunate performance degradation with an increased number of inputs (see notes above).\n This seems to indicate that even when speed is of the essence, using Rust may not give automatic wins.\n  The  Java port ( Java 2)has 99 LOC VS 74 LOC for the  original CL.Most of the extra lines in Java are actually from a couple of functions I had to implement by hand:\n &lt;T&gt; List&lt;T&gt; append( List&lt;T&gt; list, T item ) - needed in order to recurse under each arm of the Trie without affectingthe current, partial solution.\n char[] removeIfNotLetterOr\n......", "posttime": "2021-08-09 02:58:44", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,c++,\u8bba\u6587,lisp,prechelt", "title": "\u91cd\u6e29 Prechelt \u6bd4\u8f83 Java\u3001Lisp\u3001C/C++ \u548c\u811a\u672c\u8bed\u8a00\u7684\u8bba\u6587", "title_en": "Revisiting Prechelt\u2019s paper comparing Java, Lisp, C/C++ and scripting languages", "transed": 1, "url": "https://renato.athaydes.com/posts/revisiting-prechelt-paper-comparing-languages.html", "via": "", "real_tags": ["java", "c++", "\u8bba\u6587", "lisp", "prechelt"]}, {"category": "", "categoryclass": "", "imagename": "ce679cb345dc8217167a24ebeda37503.png", "infoid": 1072163, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6765\u5230 Signals And Threads\uff0c\u6df1\u5165\u8ba8\u8bba\u6765\u81ea Jane Street \u7684\u6280\u672f\u5806\u6808\u7684\u6bcf\u4e00\u5c42\u3002\u6211\u662f\u7f57\u6069\u00b7\u660e\u65af\u57fa\u3002\u4eca\u5929\u6211\u4eec\u8981\u8ba8\u8bba\u4e00\u4e2a\u770b\u4f3c\u7b80\u5355\u7684\u8bdd\u9898\uff1a\u65f6\u949f\u540c\u6b65\u3002\u6211\u8ba4\u4e3a\u6ca1\u6709\u4ec0\u4e48\u6bd4\u5c1d\u8bd5\u7f16\u5199\u8ba1\u7b97\u673a\u7a0b\u5e8f\u6765\u64cd\u7eb5\u65f6\u95f4\u6765\u8ba9\u4f60\u76f8\u4fe1\u65f6\u95f4\u662f\u4e00\u4ef6\u975e\u5e38\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u5b83\u4ee5 16 \u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u590d\u6742\uff0c\u4ece\u65f6\u533a\u5230\u95f0\u79d2\u518d\u5230\u5404\u79cd\u5176\u4ed6\u75af\u72c2\u7684\u4e8b\u60c5\uff0c\u4f46\u5176\u4e2d\u4e4b\u4e00\u8fd9\u4e2a\u4e16\u754c\u771f\u6b63\u6709\u8da3\u7684\u89d2\u843d\u662f\u5982\u4f55\u8ba9\u5927\u578b\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u65f6\u949f\u5927\u81f4\u4e00\u81f4\uff1f\u6362\u53e5\u8bdd\u8bf4\uff0c\u65f6\u949f\u540c\u6b65\u3002\u6240\u4ee5\u6211\u4eec\u5c06\u4e0e Chris Perl \u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\uff0c\u4ed6\u662f\u4e00\u540d\u7cfb\u7edf\u7ba1\u7406\u5458\uff0c\u81ea 2012 \u5e74\u4ee5\u6765\u4e00\u76f4\u5728 Jane Street \u5de5\u4f5c\u3002Chris \u6bd4\u6211\u66fe\u7ecf\u5408\u4f5c\u8fc7\u7684\u4efb\u4f55\u4eba\u90fd\u8981\u597d\uff0c\u5728\u6df1\u5165\u7814\u7a76\u590d\u6742\u7cfb\u7edf\u7684\u53ef\u6015\u7ec6\u8282\u5e76\u4e86\u89e3\u5b83\u4eec\u5982\u4f55\u5de5\u4f5c\u65b9\u9762\u4ee5\u53ca\u5982\u4f55\u4f7f\u5b83\u4eec\u66f4\u597d\u5730\u5de5\u4f5c\uff0c\u4ed6\u5728\u8fd9\u91cc\u505a\u4e86\u5f88\u591a\u5de5\u4f5c\uff0c\u7279\u522b\u662f\u5728\u65f6\u949f\u540c\u6b65\u65b9\u9762\uff0c\u5e76\u4e14\u5728\u6b64\u8fc7\u7a0b\u4e2d\uff0c\u91cd\u505a\u4e86\u6211\u4eec\u7684\u6574\u4e2a\u7cfb\u7edf\u6765\u8fdb\u884c\u65f6\u949f\u540c\u6b65\uff0c\u6240\u4ee5\u4ed6\u6709\u673a\u4f1a\u771f\u6b63\u5b66\u4e60\u5f88\u591a\u5173\u4e8e\u8fd9\u4e2a\u8bdd\u9898\u3002\u514b\u91cc\u65af\uff0c\u9996\u5148\uff0c\u60a8\u80fd\u5426\u7b80\u8981\u4ecb\u7ecd\u4e00\u4e0b\u8ba1\u7b97\u673a\u65f6\u949f\u7684\u5de5\u4f5c\u539f\u7406\uff1f\u6240\u4ee5\uff0c\u6211\u60f3\u7c97\u7565\u7684\u8981\u70b9\u662f\u4f60\u6709\u4e00\u4e9b\u632f\u8361\u5668\uff0c\u4e00\u4e2a\u5c0f\u6676\u4f53\u6709\u6548\u5730\u5728\u8ba1\u7b97\u673a\u5185\u90e8\u4ee5\u67d0\u4e2a\u9891\u7387\u632f\u8361\uff0c\u8fd9\u9a71\u52a8\u4e86\u64cd\u4f5c\u7cfb\u7edf\u5c06\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u5904\u7406\u7684\u4e2d\u65ad - \u53ef\u80fd\u6709\u5f88\u591a\u6211\u53ea\u662f\u7565\u8fc7\u8fd9\u91cc\u7684\u4e00\u4e9b\u7ec6\u8282\u2014\u2014\u4f46\u8fd9\u4f1a\u5bfc\u81f4\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u53d1\u751f\u7684\u4e2d\u65ad\u3002\u64cd\u4f5c\u7cfb\u7edf\u6b63\u5728\u4f7f\u7528\u5b83\u6765\u63a8\u5bfc\u5b83\u7684\u65f6\u95f4\u6982\u5ff5\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u6709\u4e00\u4e2a\u771f\u6b63\u9ad8\u8d28\u91cf\u7684\u632f\u8361\u5668\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b9a\u65f6\u5668\u4e2d\u65ad\u4ee5\u6b63\u786e\u7684\u901f\u7387\u53d1\u751f\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u5b9e\u65f6\u8ddf\u8e2a\u53ef\u80fd\u521a\u521a\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u5982\u679c\u60a8\u7684\u632f\u8361\u5668\u975e\u5e38\u597d\u4e14\u975e\u5e38\u7a33\u5b9a\uff0c\u90a3\u4e48\u60a8\u5b9e\u9645\u4e0a\u53ef\u4ee5\u975e\u5e38\u63a5\u8fd1\u6b63\u786e\u7684\u65f6\u95f4\u3002\u4f46\u4e8b\u5b9e\u662f\uff0c\u5927\u591a\u6570\u8ba1\u7b97\u673a\u90fd\u5e26\u6709\u76f8\u5f53\u7cdf\u7cd5\u7684\u632f\u8361\u5668\uff0c\u5b83\u4eec\u4f1a\u56e0\u5404\u79cd\u539f\u56e0\uff08\u4f8b\u5982\u53d1\u70ed\uff09\u6539\u53d8\u5b83\u4eec\u7684\u9891\u7387\uff0c\u6240\u4ee5\u5982\u679c\u60a8\u4f7f\u7528\u8ba1\u7b97\u673a\u7f16\u8bd1 Linux \u5185\u6838\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u90a3\u53ef\u80fd\u4f1a\u6539\u53d8\u70ed\u91cf\u5206\u5e03\uff0c\u6539\u53d8\u9891\u7387\u632f\u8361\u5668\uff0c\u5b9e\u9645\u4e0a\u4f1a\u6539\u53d8\u4f60\u4fdd\u6301\u5b9e\u65f6\u7684\u6548\u679c\u3002\u5f53\u6211\u4eec\u5929\u771f\u5730\u5c06\u65f6\u949f\u540c\u6b65\u89c6\u4e3a\u4eba\u65f6\uff0c\u6211\u4eec\u4f1a\u5c06\u5176\u89c6\u4e3a\u201c\u6211\u8981\u53bb\u8bbe\u7f6e\u6211\u7684\u65f6\u949f\u201d\u3002\u6211\u5c06\u67e5\u770b\u73b0\u5728\u7684\u65f6\u95f4\u5e76\u8c03\u6574\u6211\u7684\u65f6\u949f\u4ee5\u5339\u914d\u4efb\u4f55\u5b9e\u65f6\u65f6\u95f4\uff0c\u4f46\u60a8\u5b9e\u9645\u4e0a\u5728\u8fd9\u91cc\u8c08\u8bba\u7684\u662f\u53e6\u4e00\u56de\u4e8b\u3002\u4f60\u8bf4\u7684\u4e0d\u4ec5\u4ec5\u662f\u8bbe\u7f6e\u73b0\u5728\u7684\u6b63\u786e\u65f6\u95f4\uff0c\u800c\u662f\u4fdd\u6301\u90a3\u4e2a\u65f6\u95f4\u6b63\u786e\uff0c\u672c\u8d28\u4e0a\u4fdd\u6301\u540c\u6b65\u524d\u8fdb\u7684\u901f\u5ea6\u3002\u6b63\u786e\u7684\u3002\u5982\u679c\u60a8\u80fd\u5728\u6240\u6709\u8ba1\u7b97\u673a\u4e2d\u4ee5\u8d85\u4fbf\u5b9c\u7684\u4ef7\u683c\u83b7\u5f97\u771f\u6b63\u3001\u771f\u6b63\u9ad8\u8d28\u91cf\u7684\u632f\u8361\u5668\uff0c\u90a3\u4e48\u60a8\u4f1a\u559c\u6b22\u5b83\uff0c\u7136\u540e\u60a8\u5c31\u4e0d\u9700\u8981\u8fdb\u884c\u5927\u91cf\u8c03\u6574\u6765\u8ba9\u5b83\u4eec\u4fdd\u6301\u6b63\u786e\u7684\u65f6\u95f4\uff0c\u4f46\u8fd9\u786e\u5b9e\u662f\u6602\u8d35\u7684\u3002\u4f60\u53ef\u4ee5\u4e70\u8fd9\u6837\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u53ea\u662f\u8981\u82b1\u5f88\u591a\u94b1\u3002\u56e0\u6b64\uff0c\u60a8\u8bf4\u8ba1\u7b97\u673a\u4e2d\u53d1\u751f\u7684\u70ed\u91cf\u548c\u5176\u4ed6\u5404\u79cd\u4e8b\u60c5\u4f1a\u5bfc\u81f4\u8ba1\u7b97\u673a\u5185\u90e8\u51fa\u73b0\u8fd9\u79cd\u5411\u524d\u79fb\u52a8\u7684\u901f\u5ea6\u3002\u8fd9\u4e9b\u6709\u591a\u51c6\u786e\uff1f\u80fd\u4e0d\u80fd\u7ed9\u6211\u4e00\u79cd\u6570\u5b57\u611f\uff0c\u8fd9\u4e9b\u4e1c\u897f\u98d8\u4e86\u591a\u8fdc\uff1f\u6211\u4eec\u8fd0\u884c\u7684\u4e1c\u897f\uff0c\u6211\u4eec\u6355\u83b7\u5176\u4e2d\u7684\u4e00\u4e9b\u7edf\u8ba1\u6570\u636e\uff0c\u6211\u4eec\u770b\u5230\u5bf9\u5b83\u4eec\u5e94\u7528\u4e86\u9891\u7387\u6821\u6b63\u7684\u673a\u5668\uff0c\u6bd4\u5982\u8bf4\uff0c\u767e\u4e07\u5206\u4e4b 50\uff0c\u8fd9\u5c31\u50cf\u6bcf\u79d2\u5fae\u79d2\uff0c\u6240\u4ee5\u5927\u7ea6\u6bcf\u79d2\u949f\u51e0\u79d2\u4e00\u5929\uff0c\u8fd9\u5c31\u662f\u4f60\u5982\u4f55\u7ed3\u675f\u6f02\u6d41\u3002\u4f46\u6211\u6562\u80af\u5b9a\uff0c\u5982\u679c\u4f60\u7684\u684c\u5b50\u5e95\u4e0b\u6709\u4e00\u4e2a\u8d85\u7ea7\u65e7\u7684\u684c\u9762\uff0c\u4f60\u4ece\u4f60\u7236\u6bcd\u90a3\u91cc\u5077\u6765\u7684\u4e1c\u897f\uff0c\u7136\u540e\u4f60\u8bd5\u56fe\u91cd\u5efa\u6210\u4e00\u4e2a Linux \u673a\u5668\uff0c\u90a3\u4e48\u4f60\u7684\u6570\u5b57\u53ef\u80fd\u6bd4\u8fd9\u66f4\u7cdf\u7cd5\u3002\u5c31\u50cf\u6765\u81ea\u77e5\u540d\u4f9b\u5e94\u5546\u7684\u4e00\u79cd\u76f8\u5bf9\u8f83\u65b0\u7684\u4e00\u4ee3\u670d\u52a1\u5668\uff0c\u60a8\u6b63\u5728\u8c08\u8bba\u5927\u7ea6\u6bcf\u79d2 50 \u5230 100 \u5fae\u79d2\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u504f\u79bb\u6821\u51c6\u3002\u597d\u7684\uff0c\u56e0\u6b64\u65f6\u949f\u540c\u6b65\u662f\u5c1d\u8bd5\u4f7f\u60a8\u5728\u6574\u4e2a\u6570\u636e\u4e2d\u5fc3\u548c\u591a\u4e2a\u6570\u636e\u4e2d\u5fc3\u4e2d\u62e5\u6709\u7684\u6240\u6709\u65f6\u949f\u5f7c\u6b64\u540c\u6b65\u7684\u8fc7\u7a0b\u3002\u8fd9\u662f\u6b63\u786e\u7684\u601d\u8003\u65b9\u5f0f\u5417\uff1f\n\u6211\u8ba4\u540c\u3002 \u201c\u540c\u6b65\u201d\uff0c\u662f\u4e00\u79cd\u6709\u8da3\u7684\u8bf4\u6cd5\uff0c\u5bf9\u5427\uff1f\u5982\u679c\u60a8\u80fd\u591f\u7acb\u5373\u8be2\u95ee\u7f51\u7edc\u4e0a\u7684\u4e24\u4e2a\u968f\u673a\u670d\u52a1\u5668\uff0c\u5728\u540c\u4e00\u786e\u5207\u65f6\u95f4\u70b9\u662f\u4ec0\u4e48\u65f6\u95f4\uff0c\u5982\u679c\u60a8\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u795e\u5947\u5730\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u4ed6\u4eec\u4f1a\u540c\u610f\u4e00\u4e9b\u76f8\u5bf9\u8f83\u5c0f\u7684\u8fb9\u9645\u9519\u8bef\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5c31\u662f\u6211\u4eec\u6240\u8bf4\u7684\u65f6\u949f\u540c\u6b65\u7684\u610f\u601d\u3002\u5982\u679c\u4f60\u80fd\u4ee5\u67d0\u79cd\u65b9\u5f0f\u795e\u5947\u5730\u51bb\u7ed3\u65f6\u95f4\u5e76\u53bb\u8be2\u95ee\u7f51\u7edc\u4e0a\u7684\u6bcf\u4e00\u53f0\u8ba1\u7b97\u673a\uff0c\u201c\u563f\u3002\u4f60\u89c9\u5f97\u73b0\u5728\u51e0\u70b9\u4e86\uff1f\u201d\u4ed6\u4eec\u90fd\u4f1a\u5728\u60a8\u53ef\u4ee5\u5b9a\u4e49\u7684\u67d0\u4e2a\u9519\u8bef\u8303\u56f4\u5185\u5927\u81f4\u540c\u610f\u3002\u5bf9\u3002\u8fd9\u4e2a\u57fa\u672c\u6a21\u578b\u5b9e\u9645\u4e0a\u5047\u8bbe\u6709\u4e00\u4e2a\u660e\u786e\u5b9a\u4e49\u7684\u6982\u5ff5\uff0c\u5373\u77ac\u95f4\u540c\u65f6\u5b58\u5728\u7684\u542b\u4e49\uff0c\u7531\u4e8e\u76f8\u5bf9\u8bba\u548c\u7c7b\u4f3c\u7684\u4e1c\u897f\uff0c\u8fd9\u5e76\u4e0d\u5b8c\u5168\u6b63\u786e\uff0c\u4f46\u6211\u4eec\u5c06\u4e3b\u8981\u5ffd\u7565\u8fd9\u4e00\u70b9\u3002\u6240\u4ee5\uff0c\u6211\u60f3\u4f60\u5728\u8fd9\u91cc\u5f3a\u8c03\u7684\u4e00\u4e2a\u5c5e\u6027\u662f\u8ba9\u65f6\u949f\u5f7c\u6b64\u4e00\u81f4\uff0c\u8fd9\u662f\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u8fd8\u6709\u53e6\u4e00\u90e8\u5206\uff0c\u5bf9\uff0c\u5c31\u662f\u8ba9\u65f6\u949f\u4e0e\u67d0\u4e9b\u5916\u90e8\u53c2\u8003\u4e00\u81f4\u3002\u6709\u4e00\u4e9b\u7c7b\u4f3c\u7684\u6982\u5ff5\uff0c\u4e16\u754c\u8ba4\u4e3a\u65f6\u95f4\u662f\u591a\u5c11\uff1f\u90a3\u4e48\uff0c\u5916\u90e8\u53c2\u8003\u6765\u81ea\u54ea\u91cc\uff1f\u6211\u4e0d\u662f\u8fd9\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u4f46\u6211\u4f1a\u7ed9\u4f60\u4e00\u79cd 10,000 \u82f1\u5c3a\u7684\u89c6\u91ce\u3002\u60a8\u5728\u4e16\u754c\u5404\u5730\u90fd\u6709\u5404\u79cd\u7269\u7406\u5b9e\u9a8c\u5ba4\uff0c\u4f8b\u5982\u82f1\u56fd\u7684 NPL \u548c\u4e16\u754c\u5176\u4ed6\u5730\u65b9\u3002\u4ed6\u4eec\u90fd\u53ef\u4ee5\u6d4b\u91cf\u4ed6\u4eec\u8ba4\u4e3a\u7684\u65f6\u95f4\uff0c\u4f7f\u7528\u8bf8\u5982\u6c22\u8109\u6cfd\u4e4b\u7c7b\u7684\u4e1c\u897f\u548c\u67d0\u79cd\u975e\u5e38\u51c6\u786e\u7684\u539f\u5b50\u65b9\u6cd5\u3002\u4ed6\u4eec\u5c06\u6240\u6709\u8fd9\u4e9b\u4e1c\u897f\u63d0\u4f9b\u7ed9\u4e00\u4e2a\u5355\u4e00\u7684\u6765\u6e90\uff0c\u8be5\u6765\u6e90\u5bf9\u5176\u8fdb\u884c\u5e73\u5747\u6216\u8fdb\u884c\u67d0\u79cd\u52a0\u6743\uff0c\u4ee5\u5f97\u51fa\u6b63\u786e\u7684\u65f6\u95f4\uff0c\u7136\u540e\u60a8\u5c06\u8fd9\u79cd\u9b54\u6cd5\u4f20\u9012\u7ed9\u7a7a\u519b\uff0c\u7136\u540e\u7531\u7a7a\u519b\u53d1\u9001\u76f4\u5230 GPS \u661f\u5ea7\u3002 GPS \u6709\u4e00\u79cd\u673a\u5236\u53ef\u4ee5\u4ece GPS \u536b\u661f\u83b7\u53d6\u65f6\u95f4\u5230 GPS \u63a5\u6536\u5668\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u662f\u4e00\u4e2a\u8fd0\u884c\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u4eba\uff0c\u5e76\u4e14\u4f60\u6709\u5174\u8da3\u5c06\u4f60\u7684\u65f6\u949f\u4e0e UTC \u4e4b\u7c7b\u7684\u4e1c\u897f\u540c\u6b65\u5230\u76f8\u5bf9\u8f83\u9ad8\u7684\u7cbe\u5ea6\uff0c\u5b9e\u9645\u4e0a\u662f\u683c\u6797\u5a01\u6cbb\u6807\u51c6\u65f6\u95f4\uff0c\u5b83\u53ea\u662f\u4e00\u79cd\u6ca1\u6709\u5e94\u7528\u65f6\u533a\u7684\u5f53\u524d\u65f6\u95f4\u3002\u5982\u679c\u4f60\u6709\u5174\u8da3\u8fd9\u6837\u505a\uff0c\u4f60\u53ef\u4ee5\u505a\u7684\u662f\u4f60\u53ef\u4ee5\u53bb\u4e00\u4e2a\u4f9b\u5e94\u5546\u90a3\u91cc\u4e70\u4e00\u4e2a\u53eb\u505a GPS \u8bbe\u5907\u7684\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u8fde\u63a5\u5230\u5c4b\u9876\u4e0a\u7684\u5c0f\u5929\u7ebf\u3002\u5b83\u53ef\u4ee5\u4ece GPS \u661f\u5ea7\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u57fa\u672c\u4e0a\u7ed9\u4f60\u65f6\u95f4\uff0c\u51c6\u786e\u5ea6\u5927\u6982\u5728 100 \u7eb3\u79d2\u5de6\u53f3\u3002\u56e0\u6b64\uff0c\u60a8\u5df2\u7ecf\u83b7\u5f97\u4e86\u4e00\u79cd\u88ab\u9988\u9001\u5230 GPS \u661f\u5ea7\u7684\u539f\u5b50\u6d4b\u91cf\uff0c\u76f4\u5230\u60a8\u4f5c\u4e3a\u8ba1\u7b97\u673a\u7f51\u7edc\u7684\u8fd0\u8425\u5546\u53ef\u4ee5\u8d2d\u4e70\u7684 GPS \u63a5\u6536\u5668\u3002\u51fa\u4e8e\u672c\u6b21\u5bf9\u8bdd\u7684\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b GPS \u63a5\u6536\u5668\u89c6\u4e3a\u63a5\u6536\u5230\u7684\u5173\u4e8e\u65f6\u95f4\u7684\u667a\u6167\uff0c\u6211\u4eec\u7684\u5de5\u4f5c\u662f\u5f04\u6e05\u695a\u5982\u4f55\u5728\u8ba1\u7b97\u673a\u7f51\u7edc\u5185\u90e8\u5236\u9020\u6240\u6709\u4e0d\u540c\u7684\u8bbe\u5907\u5f7c\u6b64\u540c\u610f\u5e76\u540c\u610f\u8be5\u5916\u90e8\u53c2\u8003\u3002\u5982\u679c\u4f60\u5c06\u81ea\u5df1\u7f6e\u4e8e\u91d1\u878d\u76d1\u7ba1\u673a\u6784\u7684\u5730\u4f4d\uff0c\u5e76\u4e14\u6240\u6709\u8fd9\u4e9b\u4e0d\u540c\u7684\u53c2\u4e0e\u8005\u90fd\u5728\u90a3\u91cc\u7528\u8ba1\u7b97\u673a\u7cfb\u7edf\u505a\u4e8b\uff0c\u7136\u540e\u53d1\u751f\u4e86\u4e00\u4e9b\u5947\u602a\u7684\u4e8b\u60c5\uff0c\u5e76\u4e14\u4f60\u60f3\u5bf9\u5bfc\u81f4\u7684\u4e8b\u4ef6\u8fdb\u884c\u603b\u4f53\u6392\u5e8f\u8fd9\u4ef6\u75af\u72c2\u7684\u4e8b\u60c5\u2014\u2014\u6216\u8005\u662f\u4ec0\u4e48\u5bfc\u81f4\u4e86\u8fd9\u4ef6\u597d\u4e8b\uff0c\u8c01\u77e5\u9053\u5462\u2014\u2014\u4f46\u4f60\u60f3\u8981\u5bf9\u4e8b\u4ef6\u8fdb\u884c\u5168\u9762\u6392\u5e8f\u3002\u5982\u679c\u4eba\u4eec\u6ca1\u6709\u826f\u597d\u7684\u65f6\u949f\u540c\u6b65\uff0c\u5bf9\u4e8e\u67d0\u4e9b\u5916\u90e8\u6765\u6e90\uff0c\u60a8\u65e0\u6cd5\u5c06\u53c2\u4e0e\u8005 A \u7684\u65f6\u95f4\u6233\u4e0e\u53c2\u4e0e\u8005 B \u7684\u65f6\u95f4\u6233\u8fdb\u884c\u6bd4\u8f83\uff0c\u56e0\u6b64\u5982\u679c\u60a8\u8981\u89c4\u5b9a\u6bcf\u4e2a\u4eba\u90fd\u5fc5\u987b\u6709\u5728\u67d0\u4e2a\u8bef\u5dee\u8303\u56f4\u5185\u7684\u65f6\u95f4\uff0c\u60a8\u77e5\u9053\u8fd9\u4e9b\u65f6\u95f4\u6233\u662f\u5426\u5728\u8be5\u9519\u8bef\u8303\u56f4\u5185\uff0c\u90a3\u4e48\u6211\u65e0\u6cd5\u786e\u5b9a\u6392\u5e8f\uff0c\u4f46\u5982\u679c\u5b83\u4eec\u6bd4\u8fd9\u66f4\u8fdc\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u786e\u5b9a\u6392\u5e8f\u3002\u6211\u53ef\u4ee5\u77e5\u9053\u54ea\u4e2a\u5148\u6765\uff0c\u54ea\u4e2a\u7b2c\u4e8c\uff0c\u8fd9\u975e\u5e38\u6709\u7528\u3002\u6240\u4ee5\u8fd9\u5c31\u662f\u6211\u4eec\u884c\u4e1a\u7279\u6709\u7684\u52a8\u673a\uff0c\u4f46\u5176\u4ed6\u884c\u4e1a\u7684\u4eba\u4e0d\u662f\u4e5f\u5f88\u5173\u5fc3\u65f6\u949f\u540c\u6b65\u5417\uff1f\u6211\u539f\u4ee5\u4e3a\u8fd8\u6709\u5176\u4ed6\u539f\u56e0\u4f1a\u4fc3\u4f7f\u60a8\u60f3\u8981\u540c\u6b65\u7f51\u7edc\u4e0a\u7684\u673a\u5668\u3002\u54e6\u6ca1\u95ee\u9898\u3002\u6709\u5f88\u591a\u4e0d\u540c\u7684\u4e1c\u897f\u3002\u6211\u7684\u610f\u601d\u662f\uff0c\u5c31\u50cf\u4e00\u822c\u7684\u7cfb\u7edf\u7ba1\u7406\u5458\u4e3b\u9898\u4e00\u6837\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u60f3\u4ece\u8ba1\u7b97\u673a\u7f51\u7edc\u4e0a\u7684\u6240\u6709\u7cfb\u7edf\u6536\u96c6\u65e5\u5fd7\uff0c\u5e76\u4e14\u51fa\u4e8e\u5404\u79cd\u539f\u56e0\u60f3\u8981\u5206\u6790\u5b83\u4eec\u3002\u4e5f\u8bb8\u662f\u56e0\u4e3a\u60a8\u62c5\u5fc3\u5165\u4fb5\u8005\u3002\u6216\u8005\u53ef\u80fd\u662f\u56e0\u4e3a\u60a8\u53ea\u662f\u60f3\u4e86\u89e3\u4e8b\u7269\u7684\u8fd0\u4f5c\u65b9\u5f0f\uff0c\u5982\u679c\u60a8\u7684\u65f6\u949f\u4e0d\u540c\u6b65\uff0c\u5219\u5f88\u96be\u7406\u89e3\u7cfb\u7edf B \u4e0a\u53ef\u80fd\u53d1\u751f\u7684\u4e8b\u60c5\u4ee5\u53ca\u5b83\u4eec\u4e0e\u7cfb\u7edf A \u7684\u5173\u7cfb\uff0c\u56e0\u4e3a\u4e24\u8005\u65f6\u95f4\u6233\u4e0d\u662f - \u5982\u679c\u5b83\u4eec\u4e0d\u540c\u6b65\uff0c\u60a8\u5c31\u65e0\u6cd5\u6bd4\u8f83\u5b83\u4eec\u3002\n\u6211\u60f3\u4e5f\u6709\u4e00\u4e9b\u5206\u5e03\u5f0f\u7cfb\u7edf\uff0c\u9700\u8981\u65f6\u949f\u7684\u7b97\u6cd5\u539f\u56e0\u3002\u5f53\u7136\uff0c\u67d0\u4e9b\u7c7b\u578b\u7684\u5206\u5e03\u5f0f\u7b97\u6cd5\u6700\u7ec8\u4f1a\u4f7f\u7528\u65f6\u949f\u4f5c\u4e3a\u6253\u7834\u7cfb\u7edf\u4e4b\u95f4\u8054\u7cfb\u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\u8fd9\u81f3\u5c11\u9700\u8981\u4e00\u5b9a\u7a0b\u5ea6\u7684\u5408\u7406\u540c\u6b65\u3002\u5f53\u7136\u3002\u8fd8\u6709\u5176\u4ed6\u5e7f\u6cdb\u4f7f\u7528\u7684\u7f51\u7edc\u534f\u8bae\u9700\u8981\u65f6\u949f\u540c\u6b65\uff0c\u4f46\u65f6\u949f\u540c\u6b65\u7684\u7cbe\u786e\u5ea6\u8981\u4f4e\u5f97\u591a\u3002 Kerberos \u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u8eab\u4efd\u9a8c\u8bc1\u534f\u8bae\uff0c\u5b83\u8981\u6c42\u65f6\u949f\u5728\u4e94\u5206\u949f\u5185\u540c\u6b65\uff0c\u5176\u60f3\u6cd5\u662f\u963b\u6b62\u91cd\u653e\u653b\u51fb\u4e4b\u7c7b\u7684\u4e1c\u897f\uff0c\u786e\u4fdd\u6709\u4eba\u5728\u51e0\u5929\u5185\u65e0\u6cd5\u83b7\u53d6\u60a8\u7684\u51ed\u636e\u4e4b\u524d\u518d\u4f7f\u7528\u5b83\u4eec\uff0c\u90a3\u79cd\u4e1c\u897f\u3002\u6240\u4ee5\u5728\u90a3\u91cc\uff0c\u8bef\u5dee\u7ebf\u5f88\u5bbd\uff0c\u4f46\u4ecd\u7136\u9700\u8981\u67d0\u79cd\u540c\u6b65\u3002\u5bf9\u3002\u6211\u60f3\u8fd9\u662f\u8003\u8651\u540c\u6b65\u65f6\u7684\u4e00\u4e2a\u666e\u904d\u4e3b\u9898\uff1a\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u4e0d\u540c\u7ea7\u522b\u7684\u540c\u6b65\uff0c\u4f46\u66f4\u7d27\u5bc6\u7684\u540c\u6b65\u6c38\u8fdc\u4e0d\u4f1a\u53d7\u5230\u4f24\u5bb3\u3002\u5f53\u4f60\u5f00\u59cb\u8fdb\u5165\u4e0b\u9650\u65f6\u80af\u5b9a\u4f1a\u6709\u6743\u8861\uff0c\u4f46\u662f\u662f\u7684\u3002\u5982\u679c\u5b83\u4eec\u90fd\u662f\u514d\u8d39\u7684\uff0c\u5f53\u7136\uff0c\u6211\u5e0c\u671b\u5b83\u4eec\u5b8c\u5168\u4e00\u6837\u3002\u4eba\u4eec\u901a\u5e38\u5982\u4f55\u89e3\u51b3\u65f6\u949f\u540c\u6b65\u8fd9\u4e2a\u95ee\u9898\uff1f\u4ec0\u4e48\u662f\u6807\u51c6\u5de5\u5177\uff1f\u5927\u591a\u6570\u4eba\uff0c\u60a8\u53ea\u662f\u5c06\u60a8\u7684\u53d1\u884c\u7248\u4f5c\u4e3a NTP \u5b88\u62a4\u8fdb\u7a0b\u8fd0\u884c\u3002 NTP \u4ee3\u8868\u7f51\u7edc\u65f6\u95f4\u534f\u8bae\uff0c\u76f4\u5230\u4e0d\u4e45\u524d\uff0c\u6211\u8fd8\u8ba4\u4e3a\u5b83\u4f7f\u7528\u4e86\u67d0\u79cd\u9b54\u6cd5\uff0c\u5b83\u77e5\u9053\u5982\u4f55\u4e0e Internet \u4e0a\u7684\u67d0\u4e9b\u670d\u52a1\u5668\u6216\u67d0\u4e9b\u672c\u5730\u670d\u52a1\u5668\u901a\u4fe1\u3002\u53ef\u80fd\u7136\u540e\u4e0e\u4e92\u8054\u7f51\u4e0a\u7684\u670d\u52a1\u5668\u4ea4\u8c08\uff0c\u5b83\u4f1a\u5c06\u60a8\u7684\u65f6\u949f\u4e0e\u8fd9\u4e9b\u670d\u52a1\u5668\u540c\u6b65\u3002\u5b83\u4ea4\u6362\u4e00\u4e9b\u6570\u636e\u5305\uff0c\u4e5f\u8bb8\u9700\u8981\u4e00\u70b9\u65f6\u95f4\uff0c\u4e5f\u8bb8\u51e0\u5206\u949f\uff0c\u4e5f\u8bb8\u66f4\u957f\u3002\u4f60\u53ef\u80fd\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\uff0c\u4f46\u6700\u7ec8\uff0c\u4f60\u7684\u65f6\u949f\u76f8\u5bf9\u540c\u6b65\u5230\u51e0\u5341\u6beb\u79d2\u5de6\u53f3\u3002\u5c31\u50cf\u6211\u8bf4\u7684\uff0c\u6709\u5f88\u957f\u4e00\u6bb5\u65f6\u95f4\uff0c\u6211\u53ea\u662f\u5047\u8bbe\u5b83\u662f\u9b54\u672f\uff0c\u5e76\u6ca1\u6709\u60f3\u592a\u591a\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u65f6\u5019\uff0c\u6211\u63a5\u5230\u4efb\u52a1\uff0c\u5728\u7b80\u8857\uff0c\u5b9e\u9645\u770b\u770b\u5176\u4e2d\u7684\u4e00\u4e9b\u4e1c\u897f\u5e76\u5c1d\u8bd5\u6ee1\u8db3\u4e00\u4e9b\u6bd4\u6807\u51c6\u7684\u51e0\u5341\u6beb\u79d2\u540c\u6b65\u66f4\u96be\u7684\u8981\u6c42\u3002\u6240\u4ee5\u6211\u5b9e\u9645\u4e0a\u53bb\u4e86\uff0c\u5c31\u50cf\uff0c\u201c\u597d\u5427\u3002\u597d\u3002 NTP \u5982\u4f55\u4ece\u7b2c\u4e00\u539f\u5219\u505a\u5230\u8fd9\u4e00\u70b9\uff1f\u201d\u5bf9\uff1f\u5c31\u50cf\uff0c\u8ba9\u6211\u4eec\u53bb\u8bfb\u4e00\u4e9b\u5927\u536b\u7c73\u5c14\u65af\u7684\u8bba\u6587\u3002\u8ba9\u6211\u4eec\u53bb\u770b\u770b\u6211\u4eec\u662f\u5426\u771f\u7684\u53ef\u4ee5\u81ea\u5df1\u63a8\u7406\u51fa\u6765\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u53ea\u6709\u56db\u4e2a\u65f6\u95f4\u6233\u3002\u5b83\u5468\u56f4\u6709\u5f88\u591a\u66f4\u590d\u6742\u7684\u4e1c\u897f\uff0c\u4f46\u5b83\u7684\u6838\u5fc3\u662f\u8fd9\u56db\u4e2a\u65f6\u95f4\u6233\u3002\u5047\u8bbe\u6211\u662f\u5ba2\u6237\u7aef\uff0c\u800c\u4f60\u662f\u670d\u52a1\u5668\u3002\u9996\u5148\uff0c\u6211\u4f1a\u5411\u60a8\u53d1\u9001\u4e00\u4e2a\u6570\u636e\u5305\uff0c\u4f46\u5728\u6b64\u4e4b\u524d\u6211\u4f1a\u5199\u4e0b\u65f6\u95f4\u6233\u3002\u5f53\u60a8\u6536\u5230\u8be5\u6570\u636e\u5305\u65f6\uff0c\u60a8\u4f1a\u8bb0\u4e0b\u65f6\u95f4\u6233\u3002\u7136\u540e\uff0c\u60a8\u5411\u6211\u53d1\u9001\u56de\u590d\uff0c\u7136\u540e\u5728\u6b64\u4e4b\u524d\u5199\u4e0b\u65f6\u95f4\u6233\u3002\u6700\u540e\uff0c\u5f53\u6211\u6536\u5230\u90a3\u4e2a\u56de\u590d\u65f6\uff0c\u6211\u4f1a\u5199\u4e0b\u4e00\u4e2a\u65f6\u95f4\u6233\u3002\u8fd9\u4f3c\u4e4e\u4e0d\u662f\u5f00\u521b\u6027\u7684\uff0c\u4f46\u4ec5\u51ed\u8fd9\u56db\u4e2a\u65f6\u95f4\u6233\u6211\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e24\u4e2a\u91cd\u8981\u7684\u6570\u5b57\uff0c\u504f\u79fb\u91cf\u548c\u5ef6\u8fdf\u3002\u504f\u79fb\u91cf\u662f\u6211\u7684\u65f6\u949f\u4e0e\u4f60\u7684\u65f6\u949f\u76f8\u5dee\u591a\u8fdc\uff0c\u6240\u4ee5\u5982\u679c\u4f60\u8ba4\u4e3a\u73b0\u5728\u662f\u4e0b\u5348 12 \u70b9\uff0c\u800c\u6211\u8ba4\u4e3a\u662f\u4e0b\u5348 12:05\uff0c\u90a3\u4e48\u504f\u79fb\u91cf\u5c31\u662f\u4e94\u5206\u949f\u3002\u5ef6\u8fdf\u662f\u8fd9\u4e9b\u6570\u636e\u5305\u7a7f\u8d8a\u7f51\u7edc\u6240\u7528\u7684\u65f6\u95f4\u3002\u4e3a\u4e86\u8ba1\u7b97\u8fd9\u4e9b\u6570\u5b57\uff0c\u4f60\u57fa\u672c\u4e0a\u9700\u8981\u4e00\u4e2a\u65b9\u7a0b\u7ec4\uff0c\u5bf9\u6211\u6765\u8bf4\uff0c\u4e00\u4e2a\u91cd\u8981\u7684\u65b9\u9762\u5b9e\u9645\u4e0a\u662f\u7528\u4e00\u5f20\u7eb8\u548c\u4e00\u652f\u94c5\u7b14\u5199\u4e0b\u6765\uff0c\u81ea\u5df1\u89e3\u51b3\u8fd9\u4e9b\u65b9\u7a0b\uff0c\u662f\u7406\u89e3\u8fd9\u91cc\u9762\u6709\u4e00\u79cd\u5de8\u5927\u7684\u5047\u8bbe\u534f\u8bae\uff0c\u7b2c\u4e00\u4e2a\u6570\u636e\u5305\u7684\u5ef6\u8fdf\uff0c\u6211\u6253\u4e0a\u65f6\u95f4\u6233\u7136\u540e\u4f60\u505a\u7684\uff0c\u4ee5\u53ca\u7b2c\u4e8c\u4e2a\u6570\u636e\u5305\u7684\u5ef6\u8fdf\uff0c\u4f60\u6253\u4e0a\u65f6\u95f4\u6233\u7136\u540e\u6211\u505a\uff0c\u5047\u8bbe\u8fd9\u4e9b\u65f6\u95f4\u662f\u76f8\u540c\u7684\uff0c\u5982\u679c\u5b83\u4eec\u4e0d\u76f8\u540c\u4ed6\u4eec\u5f15\u5165\u4e86\u6240\u8c13\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u65b9\u9762\u3002\u8fd9\u662f\u4e00\u4e2a\u5047\u8bbe\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5b9e\u9645\u6c42\u89e3\u8fd9\u4e9b\u65b9\u7a0b\u4ee5\u83b7\u5f97\u504f\u79fb\u548c\u5ef6\u8fdf\u3002\n\u60a8\u80fd\u5426\u89e3\u91ca\u4e00\u4e0b\u53d6\u51b3\u4e8e\u53d1\u9001\u65f6\u95f4\u548c\u63a5\u6536\u65f6\u95f4\u4e4b\u95f4\u7684\u5bf9\u79f0\u6027\u7684\u8ba1\u7b97\u662f\u4ec0\u4e48\uff1f\u8fd9\u4e9b\u5ef6\u8fdf\u662f\u5c06\u5b83\u4eec\u8054\u7cfb\u5728\u4e00\u8d77\u7684\u539f\u56e0\uff0c\u5bf9\u5417\uff1f\u60a8\u77e5\u9053\u5982\u679c\u65f6\u949f\u540c\u6b65\uff0c\u60a8\u5c31\u77e5\u9053\u60a8\u4f7f\u7528\u7684\u65f6\u95f4\u6233\u51cf\u53bb\u6211\u4f7f\u7528\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u7b49\u4e8e\u6570\u636e\u5305\u5230\u8fbe\u60a8\u7684\u5ef6\u8fdf\uff0c\u5bf9\u5417\uff1f\u53cd\u4e4b\u4ea6\u7136\u3002\u6211\u7684\u65f6\u95f4\u6233\uff0c\u4ece\u6211\u6536\u5230\u7684\u7b2c\u4e8c\u4e2a\u5f00\u59cb\uff0c\u51cf\u53bb\u4f60\u7684\u65f6\u95f4\u6233\u5e94\u8be5\u7b49\u4e8e\u6570\u636e\u5305\u4ece\u4f60\u5230\u6211\u7684\u5ef6\u8fdf\u3002\u4f60\u5c31\u50cf\uff0c\u201c\u597d\u5427\u3002\u6211\u7528\u8fd9\u4e9b\u4fe1\u606f\u505a\u4ec0\u4e48\uff1f\u201d\u7136\u540e\u4f60\u8bf4\uff0c\u201c\u5982\u679c\u6211\u5047\u8bbe\u8fd9\u4e24\u4e2a\u5ef6\u8fdf\u662f\u76f8\u7b49\u7684\u5462\uff1f\u201d\u5982\u679c\u6211\u5047\u8bbe\u8fd9\u4e24\u4e2a\u5ef6\u8fdf\u76f8\u7b49\uff0c\u90a3\u4e48\u6211\u53ef\u4ee5\u5f00\u59cb\u91cd\u65b0\u6392\u5217\u7b49\u5f0f\u7684\u5404\u4e2a\u90e8\u5206\u3002\u7136\u540e\u8fd9\u5c31\u662f\u60a8\u5982\u4f55\u5b9e\u9645\u89e3\u51b3\u5ef6\u8fdf\u548c\u504f\u79fb\u7684\u65b9\u6cd5\u3002\u8fd9\u4e24\u4e2a\u65f6\u95f4\u6233\u5728\u670d\u52a1\u7aef\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\uff1f\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u95ee\u6211\u73b0\u5728\u51e0\u70b9\u4e86\uff0c\u6211\u4f1a\u5728\u6536\u5230\u7684\u65f6\u5019\u5199\u4e0b\u6765\uff0c\u7136\u540e\u5199\u4e0b\u6211\u5bc4\u56de\u7684\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e2a\u53ea\u6709\u4e09\u4e2a\u65f6\u95f4\u6233\u7684\u66f4\u7b80\u5355\u7684\u534f\u8bae\u3002\u7136\u540e\u4f60\u5c31\u5047\u8bbe\u6211\u8bb0\u4e0b\u7684\u65f6\u95f4\u53d1\u751f\u5728\u90a3\u4e2a\u65f6\u95f4\u95f4\u9694\u7684\u4e2d\u95f4\uff0c\u4e5f\u5c31\u662f\u4f60\u53d1\u9001\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u548c\u63a5\u6536\u7b2c\u4e8c\u4e2a\u6d88\u606f\u4e4b\u95f4\u7684\u65f6\u95f4\u95f4\u9694\u3002\u4f60\u600e\u4e48\u77e5\u9053\u4e2d\u95f4\u662f\u4ec0\u4e48\u65f6\u5019\uff0c\u5bf9\u5427\uff1f\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u53d1\u751f\u5f88\u591a\u53d8\u5e7b\u83ab\u6d4b\u7684\u4e8b\u60c5\uff0c\u6bd4\u5982\u5982\u679c\u4f60\u5728\u4e24\u7aef\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u4e00\u65e6\u4f60\u6536\u5230\u6570\u636e\u5305\u5c31\u7ed9\u5b83\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u7136\u540e\u4e5f\u8bb8\u4f60\u5fc5\u987b\u505a\u4e00\u4e9b\u5de5\u4f5c\uff0c\u7136\u540e\u5c31\u5728\u4f60\u53d1\u56de\u4e4b\u524d\u7ed9\u5b83\u6253\u4e0a\u65f6\u95f4\u6233\uff0c\u8fd9\u5c31\u662f\u4f60\u5982\u4f55\u6700\u63a5\u8fd1\u6211\u63d0\u5230\u7684\u90a3\u4e9b\u4ee3\u8868\u4ece\u4e00\u4e2a\u5230\u53e6\u4e00\u4e2a\u7684\u5b9e\u9645\u7f51\u7edc\u5ef6\u8fdf\u7684\u5dee\u5f02\u3002\u6211\u731c\u4f60\u5728\u8fd9\u91cc\u505a\u7684\u4e00\u4e2a\u989d\u5916\u5047\u8bbe\u662f\uff0c\u5728\u7b2c\u4e00\u4e2a\u65f6\u95f4\u6233\u548c\u7b2c\u4e8c\u4e2a\u65f6\u95f4\u6233\u4e4b\u95f4\u7684\u90a3\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u6700\u597d\u5047\u8bbe\u65f6\u949f\u524d\u8fdb\u7684\u901f\u5ea6\u662f\u6b63\u786e\u7684\u3002\u6211\u8ba4\u4e3a\u8fd9\u4f1a\u7ed9\u7b49\u5f0f\u5e26\u6765\u53e6\u4e00\u4e2a\u9519\u8bef\u9879\u3002\u6211\u8ba4\u4e3a\uff0c\u5b83\u901a\u5e38\u975e\u5e38\u5c0f\uff0c\u5bf9\u5417\uff1f\u5982\u679c\u4f60\u53ea\u662f\uff0c\u5b83\u80af\u5b9a\u770b\u8d77\u6765\u662f\u4f60\u53ef\u4ee5\u5728\u5b9e\u8df5\u4e2d\u5ffd\u7565\u7684\u4e1c\u897f\u3002\u56e0\u4e3a\u5982\u679c\u4f60\u53ea\u770b\u767e\u4e07\u5206\u4e4b\u51e0\uff0c\u6216\u8005\u4e0d\u7ba1\u4f60\u5728\u8bf4\u4ec0\u4e48\uff0c\u5c31\u771f\u6b63\u7684\u8ba1\u7b97\u673a\u65f6\u949f\u6709\u591a\u5c11\u6f02\u79fb\u800c\u8a00\uff0c\u6211\u8ba4\u4e3a\u8fd9\u5b9e\u9645\u4e0a\u975e\u5e38\u5c0f\u3002\u662f\u7684\uff0c\u60a8\u5df2\u7ecf\u5f97\u5230\u4e86\u8ba1\u7b97\u673a\u4e0a\u8fd0\u884c\u7684\u65f6\u95f4\u5b88\u62a4\u7a0b\u5e8f\u5e94\u7528\u7684\u66f4\u6b63\uff0c\u5b83\u4f7f\u65f6\u949f\u4fdd\u6301\u540c\u6b65\u3002\u636e\u63a8\u6d4b\uff0c\u8fd9\u79cd\u901a\u4fe1\u7684\u670d\u52a1\u5668\u7aef\u4e5f\u4ece\u67d0\u4e2a\u53c2\u8003\u65f6\u949f\u6216 NTP \u4e2d\u67d0\u79cd\u66f4\u9ad8\u4e0a\u6e38\u5c42\u7684\u67d0\u4e2a\u5730\u65b9\u82b1\u8d39\u65f6\u95f4\uff0c\u4f8b\u5982\u6bd4\u5b83\u66f4\u597d\u7684\u65f6\u949f\uff0c\u4f8b\u5982 GPS \u63a5\u6536\u5668\uff0c\u5e76\u4e14\u5b83\u5df2\u7ecf\u5e94\u7528\u4e86\u67d0\u79cd\u6821\u6b63\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u8bf4\uff1a\u201c\u563f\uff0c\u6211\u76ee\u524d\u8ba4\u4e3a\u9891\u7387\u4e0b\u964d\u4e86\u8fd9\u4e48\u591a\u3002\u5f53\u4f60\u628a\u65f6\u95f4\u8fd8\u7ed9\u6211\u65f6\uff0c\u8bf7\u7ea0\u6b63\u8fd9\u4e00\u70b9\u3002\u201d\u6240\u4ee5\uff0c\u6211\u89c9\u5f97\u4f60\u6700\u5927\u7684\u2014\u2014\u6211\u731c\u4f60\u5728\u5b9e\u8df5\u4e2d\u53ef\u4ee5\u5ffd\u7565\u2014\u2014\u4f60\u6700\u5927\u7684\u62c5\u5fe7\u662f\u5728\u8fd9\u4e24\u4e2a\u65f6\u95f4\u6233\u4e4b\u95f4\u662f\u5426\u53d1\u751f\u4e86\u5de8\u5927\u7684\u53d8\u5316\uff0c\u6bd4\u5982\u6e29\u5ea6\u4e0a\u5347\u6216\u4e0b\u964d\u4e86\u5f88\u591a\u5f88\u591a\u5ea6\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\u90a3\u4e2a\u9891\u7387\u6821\u6b63\u73b0\u5728\u5b8c\u5168\u4e0d\u6b63\u786e\u3002\u597d\u7684\uff0c\u73b0\u5728\u6211\u4eec\u6709\u4e86\u4e00\u4e2a\u7f51\u7edc\u534f\u8bae\u3002\u653e\u7f6e\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53d1\u9001\u4e00\u6761\u6d88\u606f\uff0c\u53e6\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u53e6\u4e00\u4e2a\u65f6\u95f4\u6233\uff0c\u4f60\u4f1a\u5f97\u5230\u5b83\u3002\u73b0\u5728\u542f\u52a8\u8fd9\u4e00\u5207\u7684\u8ba1\u7b97\u673a\u5df2\u7ecf\u4f30\u8ba1\u4e86\u5b83\u7684\u65f6\u949f\u5173\u95ed\u4e86\u591a\u5c11\u3002\u90a3\u5b83\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\n\u5728\u7b80\u5355\u7684\u4e16\u754c\u4e2d\uff0c\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u65f6\u95f4\u3002\u4f60\u53ef\u4ee5\u53ea\u662f\uff0c\u4f60\u53ef\u4ee5\u8bf4\uff0c\u201c\u65f6\u95f4\u5e94\u8be5\u662f X\u201d\uff0c\u4f46\u8fd9\u901a\u5e38\u4e0d\u662f\u5927\u591a\u6570\u7f51\u7edc\u65f6\u95f4\u534f\u8bae\u5b88\u62a4\u8fdb\u7a0b\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002\u4ed6\u4eec\u4f1a\u505a\u7684\u662f\uff0c\u4ed6\u4eec\u4f1a\u4ece\u5355\u4e2a\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u5927\u91cf\u6837\u672c\uff0c\u4f46\u662f\u5f88\u591a\u65f6\u5019\u60a8\u914d\u7f6e\u4e86\u591a\u4e2a\u670d\u52a1\u5668\uff0c\u56e0\u6b64\u60a8\u5c06\u4ece\u591a\u4e2a\u670d\u52a1\u5668\u4e2d\u83b7\u53d6\u8bb8\u591a\u6837\u672c\uff0c\u5e76\u4e14\u60a8\u5c06\u5bf9\u8fd9\u4e9b\u4e8b\u60c5\u5e94\u7528\u4e0d\u540c\u7684\u6807\u51c6\u51b3\u5b9a\u4f60\u662f\u5426\u5e94\u8be5\u8003\u8651\u5b83\u4eec\u3002\u6211\u8ba4\u4e3a NTPD \u7684\u53c2\u8003\u5b9e\u73b0\u6709\u4e00\u4e2a\u201c\u7206\u7c73\u82b1\u5c16\u5cf0\u201d\u7684\u6982\u5ff5\uff0c\u5982\u679c\u4f60\u7684\u504f\u79fb\u91cf\uff0c\u4f60\u77e5\u9053\uff0c\u5982\u679c\u4f60\u5df2\u7ecf\u53d6\u56de 30 \u4e2a\u6837\u672c\uff0c\u800c\u4e14\u5b83\u4eec\u770b\u8d77\u6765\u90fd\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u975e\u5e38\u75af\u72c2\u7684\u5173\u95ed\uff0c\u4f60\u53ea\u662f\u8bf4\uff0c\u201c\u6211\u4f1a\u5ffd\u7565\u90a3\u4e2a\uff0c\u56e0\u4e3a\u8fd9\u53ef\u80fd\u53ea\u662f\u7531\u4e8e\u7f51\u7edc\u4e2d\u67d0\u5904\u7684\u75af\u72c2\u6392\u961f\u6216\u7c7b\u4f3c\u7684\u4e8b\u60c5\u3002\u201d\u4f60\u53ef\u4ee5\u628a\u8fd9\u770b\u4f5c\u662f\u4e00\u79cd\u6295\u7968\u7b97\u6cd5\uff1a\u4f60\u6709\u4e00\u5806\u4e0d\u540c\u7684\u9884\u8a00\u673a\u544a\u8bc9\u4f60\u65f6\u95f4\u662f\u4ec0\u4e48\uff0c\u4f60\u628a\u5b83\u4eec\u653e\u5728\u4e00\u8d77\uff0c\u5e76\u6709\u67d0\u79cd\u65b9\u6cd5\u6765\u8ba1\u7b97\u5173\u4e8e\u4ec0\u4e48\u7684\u805a\u5408\u5047\u8bbe\u76ee\u524d\u7684\u65f6\u95f4\u662f\u8bd5\u56fe\u5bf9\u9519\u8bef\u548c\u5220\u9664\u5f02\u5e38\u503c\u7b49\u4fdd\u6301\u9c81\u68d2\u6027\u3002\u662f\u7684\uff0c\u6211\u8ba4\u4e3a\u8fd9\u662f\u5bf9\u7684\u3002\u4f60\u8bd5\u56fe\u627e\u51fa\u5bf9\u4f60\u6492\u8c0e\u7684\u4eba\uff0c\u5bf9\u5417\uff1f\u60a8\u53ef\u80fd\u6b63\u5728\u4e0e\u4e0a\u6e38\u4ea4\u8c08\u7684\u4e00\u4e9b\u670d\u52a1\u5668\u53ef\u80fd\u53ea\u662f\u544a\u8bc9\u60a8\u4e0d\u6b63\u786e\u7684\u4e8b\u60c5\u3002\u5b83\u4eec\u901a\u5e38\u4ee5 NTP \u7684\u8bf4\u6cd5\u88ab\u79f0\u4e3a falsetickers\uff0c\u800c\u90a3\u4e9b\u4e0d\u662f falseticker \u7684\u5c31\u662f\u771f\u6b63\u7684\u5d4c\u5408\u4f53\u3002\u6211\u4e0d\u786e\u5b9a\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u8fd9\u4e9b\u540d\u79f0\uff0c\u4f46\u5982\u679c\u60a8\u5728 Internet \u4e0a\u6d4f\u89c8\uff0c\u60a8\u53ef\u80fd\u4f1a\u770b\u5230\u8fd9\u4e9b\u540d\u79f0\u3002\u6240\u4ee5\u4f60\u8bd5\u7740\u6311\u51fa\u90a3\u4e9b\u544a\u8bc9\u4f60\u771f\u76f8\u7684\u4eba\u3002\u60a8\u5bf9\u5b83\u4eec\u5e94\u7528\u4e86\u4e00\u4e9b\u5176\u4ed6\u5404\u79cd\u542f\u53d1\u5f0f\u65b9\u6cd5\uff0c\u4ee5\u5c1d\u8bd5\u627e\u51fa\u60a8\u8ba4\u4e3a\u6700\u597d\u7684\u65b9\u6cd5\uff0c\u5bf9\u5417\uff1f\u54ea\u4e9b\u53ef\u80fd\u5177\u6709\u6700\u5c0f\u7684\u8bef\u5dee\u7ebf\u2014\u2014\u5c3d\u7ba1\u60a8\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u4e9b\u662f\u4f7f\u7528\u5b83\u4eec\u7684\u4e0d\u9519\u6765\u6e90\uff0c\u4f46\u5176\u4e2d\u4e00\u4e9b\u53ef\u80fd\u5177\u6709\u6bd4\u5176\u4ed6\u66f4\u5bbd\u7684\u8bef\u5dee\u7ebf\uff0c\u5bf9\uff0c\u5c31\u50cf\u60a8\u7684\u6837\u672c\u53ef\u80fd\u6bd4\u5176\u4ed6\u6837\u672c\u4ee3\u8868\u7684\u8303\u56f4\u66f4\u5e7f\u2014\u2014\u6240\u4ee5\u4f60\u8bd5\u7740\u627e\u51fa\u54ea\u4e9b\u662f\u6700\u597d\u7684\uff0c\u7136\u540e\u4f60\u7528\u5b83\u6765\u544a\u8bc9\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u6709\u6548\u5730\u52a0\u5feb\u6216\u51cf\u6162\u5b83\u7684\u9891\u7387\u6821\u6b63\uff0c\u4ee5\u4e86\u89e3\u5b83\u7684\u504f\u5dee\uff0c\u5e76\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u5c1d\u8bd5\u6d88\u9664\u8be5\u9519\u8bef\u3002\u60a8\u4e0d\u4f1a\u53ea\u662f\u7a81\u7136\u8c03\u6574\u7cfb\u7edf\u8ba4\u4e3a\u7684\u65f6\u95f4\u3002\u5927\u591a\u6570\u65f6\u95f4\u5b88\u62a4\u8fdb\u7a0b\u4e0d\u4f1a\u4e3b\u52a8\u5730\u8ba1\u65f6\u3002\u8fd9\u6837\u505a\u7684\u539f\u56e0\u662f\u5927\u591a\u6570\u5e94\u7528\u7a0b\u5e8f\u4e0d\u4f1a\u5728\u65f6\u95f4\u6025\u5267\u53d8\u5316\u65f6\u4eab\u53d7\uff0c\u5c24\u5176\u662f\u5f53\u5b83\u5728\u8d1f\u65b9\u5411\u4e0a\u6025\u5267\u53d8\u5316\u65f6\u3002\u8fd9\u7a81\u51fa\u4e86\u60a8\u5e0c\u671b\u65f6\u949f\u5177\u6709\u7684\u53e6\u4e00\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u8fd8\u6ca1\u6709\u89e6\u53ca\uff0c\u5373\uff1a\u6211\u4eec\u8bf4\u8fc7\u6211\u4eec\u5e0c\u671b\u6211\u4eec\u7684\u65f6\u949f\u51c6\u786e\u3002\u4f60\u5224\u65ad\u4ed6\u4eec\u6b63\u786e\u7684\u6807\u51c6\u662f\u4f60\u53bb\u627e\u4ed6\u4eec\u95ee\u4ed6\u4eec\u73b0\u5728\u51e0\u70b9\u4e86\uff0c\u4ed6\u4eec\u7ed9\u51fa\u7684\u6570\u5b57\u975e\u5e38\u63a5\u8fd1\u3002\u4f46\u662f\u8fd8\u6709\u4e00\u4e2a\u4f60\u60f3\u8981\u7684\u7279\u6027\uff0c\u90a3\u5c31\u662f\u4f60\u60f3\u8ba9\u65f6\u949f\uff0c\u5728\u5fae\u89c2\u610f\u4e49\u4e0a\uff0c\u6bcf\u79d2\u524d\u8fdb\u5927\u7ea6\u4e00\u79d2\uff0c\u5e76\u4e14\u4f60\u7279\u522b\u5e0c\u671b\u5b83\u6c38\u8fdc\u4e0d\u4f1a\u5012\u9000\uff0c\u56e0\u4e3a\u8ba1\u7b97\u673a\u4e0a\u6709\u5f88\u591a\u7b97\u6cd5\uff0c\u8fd9\u4f7f\u5f97\u9690\u542b\u5730\u5047\u8bbe\uff0c\u4f60\u77e5\u9053\uff0c\u5929\u771f\u5730\u5408\u7406\uff0c\u65f6\u949f\u53ea\u4f1a\u5411\u524d\uff0c\u5f53\u4f60\u5141\u8bb8\u65f6\u949f\u5411\u540e\u8df3\u65f6\uff0c\u5f88\u591a\u4e8b\u60c5\u90fd\u4f1a\u641e\u7838\u3002\u5bf9\u3002\u90a3\u4e48\uff0c\u4e00\u79cd\u65b9\u5f0f......", "note_en": "Welcome to Signals And Threads, in-depth conversations about every layer of the tech stack from Jane Street. I\u2019m Ron Minsky.  Today we\u2019re going to talk about a deceptively simple topic: clock synchronization. I think there\u2019s nothing like trying to write computer programs to manipulate time to convince you that time is an incredibly complicated thing, and it\u2019s complicated in like 16 different ways, from time zones to leap seconds to all sorts of other crazy things, but one of the really interesting corners of this world is how do you get all of the clocks on your big computer network to roughly agree with each other? In other words, clock synchronization.  So we\u2019re going to talk about that with Chris Perl, who\u2019s a sysadmin, who\u2019s worked at Jane Street since 2012. Chris is better than anyone I have ever worked with, at diving into the horrible details of complex systems and understanding how they work and how they can be made to work better, and he\u2019s done a lot of work here, specifically on clock synchronization, and has, in the course of that, redone our entire system for doing clock synchronization, so he\u2019s had an opportunity to really learn a lot about the topic. Chris, to get started, can you give us just a quick overview of how computer clocks work in the first place?\n   So, I guess the rough gist is something like you have some oscillator, a little crystal effectively that\u2019s inside the computer that is oscillating at some frequency, and that\u2019s driving an interrupt that the operating system is going to handle in some level \u2013 there\u2019s probably lots of details here that I\u2019m just skipping over \u2013 but that\u2019s driving an interrupt that\u2019s going happen in the operating system. And the operating system is using that to derive its notion of time, and so if you have a really high-quality oscillator, and those timer interrupts happen at the right rate so that you\u2019re tracking real-time that might just happen, and if your oscillator\u2019s very good, and very stable you could actually just be pretty close to the correct time just by virtue of that. But the truth is that most computers come with fairly bad oscillators and they change their frequencies for various reasons like heat, so if you are using your computer to compile the Linux kernel or something like that, that could change the heat profile, change the frequency of the oscillator, and actually change how well you\u2019re doing of keeping real time.\n   When we naively think of clock synchronization as people, we think of it as like, \u201cI\u2019m going to go set my clock\u201d. I\u2019m going to look at what time it is and adjust my clock to match whatever real-time is, but you\u2019re actually talking about a different thing here. You\u2019re talking not just about setting what the right time is right now but keeping that time correct, essentially keeping the rate at which time is going forward in sync.\n   Correct. You\u2019d love it if you could get like a really, really high-quality oscillator for super cheap in all your computers and then you wouldn\u2019t need a lot of adjustment to get them to keep the correct time, but that would be really expensive. You can buy such things, they just cost a lot of money.\n   So, you say that heat and various other things that are going on in the computer will cause this rate at which time is appearing to march forward inside of your computer to drift around. How accurate are these? Can give me a kind of numerical sense of how far these things drift away?\n   The stuff that we run, we capture some of these statistics, we see machines that have a frequency correction applied to them of, say, 50 parts per million, which is like microseconds per second, so that works out to roughly a couple seconds per day, is how you would wind up drifting off. But I\u2019m sure that if you had a super old desktop under your desk, that you stole from your parents or something and you were trying to rebuild into a Linux box, you might have worse numbers than that. Like a sort of relatively current generation server from a well-known vendor, you\u2019re talking somewhere around 50 to 100 microseconds per second that they can sort of walk-off out of alignment.\n   Okay, so clock synchronization is the process of trying to get all of those clocks that you have across your whole data center and across multiple data centers to be in sync with each other. Is that the right way of thinking about it?\n   I think so. \u201cIn sync\u201d, is an interesting sort of thing to say, right? You kind of would like that if you were able to instantaneously ask two random servers on your network, what time it was at the same exact point in time, if you could somehow magically do that, that they would agree to some relatively small margin of error, and I think that that\u2019s kind of what we mean by clock synchronization. That if you could somehow magically freeze time and go ask every single computer on your network, \u201cHey. What time do you think it is?\u201d that they would all roughly agree to within some error bound that you can define.\n   Right. And this basic model actually assumes that there is a well-defined notion of what it means to be instantaneously at the same time, which isn\u2019t exactly true because of relativity and stuff like that, but we\u2019re going to mostly ignore that. So, I guess one property that you\u2019re highlighting here is having the clocks agree with each other, and that\u2019s part of it, but there\u2019s another piece, right, which is having the clocks agree with some external reference. There\u2019s some notion of like, what does the world think the time is? So, where does that external reference come from?\n   I\u2019m not an expert on this stuff, but I\u2019ll give you the sort of 10,000-foot view. You have various physics laboratories all over the world, like NPL in the UK, and other places across the world. They all have measurements of what they think time is, using things like hydrogen masers and sort of very accurate atomic methods. They contribute all of that stuff to a single source who kind of averages it, or does some sort of weighting, to come up with what the correct time is, and then you kind of magic that over to the Air Force, who then sends it up to the GPS constellation. And GPS has a mechanism for getting time from the GPS satellites down to GPS receivers, and so if you\u2019re a person who runs a computer network and you\u2019re interested in synchronizing your clocks to a relatively high degree of accuracy with something like UTC, which is effectively Greenwich Mean Time, it is just sort of the current time without time zones applied.   If you\u2019re interested in doing that, what you can do is you can just go out to a vendor and you can buy a thing called a GPS appliance, which can hook up to a little antenna that goes onto the roof. It can receive this signal from the GPS constellation and basically gives you out time, and the accuracy there is something like maybe 100 nanoseconds or so. So you\u2019ve got the sort of atomic measurements being fed up to a GPS constellation, down to GPS receivers that you, as an operator of a computer network, can buy.\n   And for the purposes of this conversation, we\u2019re going to treat those GPS receivers as the received wisdom as to what time it is, and our job is to figure out how, inside of a computer network, you make all of the different devices agree with each other and agree with that external reference.\n         If you put yourself in the shoes of a financial regulatory authority, and you have all these different participants out there doing stuff with computer systems, and something weird happens, and you\u2019d like to come up with a total ordering of events of what led to this crazy thing \u2013 or what led to this good thing, who knows \u2013 but you want to have a total ordering of events. If people don\u2019t have good clock synchronization, to some external source, you can\u2019t compare the timestamp from participant A to the timestamp from participant B, so if you were to decree everybody must have time that is within some error bound, you know if these timestamps are within that error bound, well, then I can\u2019t be sure about the ordering, but if they\u2019re farther away than that then I can be sure about the ordering. I can know which one came first and which one came second, and that can be very useful.\n   So that\u2019s the motivation that\u2019s very specific to our industry, but don\u2019t people in other industries care a lot about clock synchronization, too? I would have thought that there are other reasons that would drive you to want to synchronize the machines on the network.\n   Oh, sure. There\u2019s lots of different things. I mean, just like a general sysadmin topic, a lot of times you want to gather logs from all the systems on your computer network, and you want to analyze them for various reasons. Maybe it\u2019s because you\u2019re concerned about intruders. Or maybe it\u2019s because you\u2019re just trying to understand the way things are functioning, and if your clocks aren\u2019t synchronized it\u2019s very hard to kind of understand things that might have happened on system B and how they relate to system A because the two timestamps are just not \u2013 you just can\u2019t compare them if they\u2019re not synchronized.\n   And I suppose there are also some distributed systems, algorithmic reasons to want clocks. Certainly, some kinds of distributed algorithms end up using clocks as ways of breaking ties between systems, and so that requires at least some reasonable level of synchronization.\n   For sure. There\u2019s also other network protocols that are widely used that require clock synchronization, but much less precise levels of clock synchronization. Kerberos is a widely used authentication protocol, and that requires that the clocks be synchronized to within five minutes, and the idea there is to thwart replay attacks, and stuff like that, making sure that somebody can\u2019t obtain your credentials from a couple days ago and use them again, that kind of thing. So there, it\u2019s like the error bars are very wide but there\u2019s still some sort of synchronization necessary.\n   Right. And I guess that\u2019s a general theme when thinking about synchronization: different applications require different levels of synchronization, but more closely synchronized never hurts.\n   There\u2019s definitely tradeoffs as you start to get into the lower bounds, but yeah. If they were all free, sure, I\u2019d like to have them exactly the same.\n   How do people normally approach this problem of clock synchronization? What are the standard tools out there?\n   Most people, you just kind of run whatever your distribution shipped as an NTP daemon. NTP stands for the Network Time Protocol, and it is a protocol that up until not that long ago, I just kind of assumed used some kind of magic, and it knows how to talk to some servers on the Internet or some local servers that you probably then having talking to servers on the Internet, and it synchronizes your clocks with those servers. It exchanges some packets, maybe it takes a little while, maybe a few minutes, maybe longer. You probably don\u2019t understand exactly why, but eventually, your clocks are relatively in sync to within maybe tens, or so, of milliseconds.\n      Like I said, for a long time, I just kind of assumed it was magic and didn\u2019t really think too hard about it, and then at some point, I got tasked, within Jane Street, to actually look at some of this stuff and try and meet some requirements that were a little bit harder than the sort of standard tens of milliseconds synchronization. So I actually went and just was like, \u201cOkay. Well. How does NTP do this from first principles?\u201d right? Like, let\u2019s go read some of the papers from David Mills. Let\u2019s just go see if we can actually reason this out ourselves. At the end of the day, it\u2019s just four timestamps. There\u2019s a lot more complicated stuff around it, but the sort of core of it is these four timestamps.   Let\u2019s say I\u2019m the client, and you\u2019re the server. First, I send you a packet, but before I do I write down a timestamp. When you receive that packet, you write down a timestamp. Then, you send me a reply, and before you do you write down a timestamp. Finally, when I receive that reply, I write down a timestamp.   It may not seem that groundbreaking, but with just those four timestamps I can compute two important numbers, the offset, and the delay. The offset is how far my clock is off from yours, so if you think it\u2019s 12 pm and I think it\u2019s 12:05 pm then the offset would be five minutes. The delay is how long it took those packets to traverse the network. To compute those numbers you basically take a system of equations, and for me, an important aspect was actually writing down, with a piece of paper and a pencil, and solving these equations myself, was understanding that there\u2019s a sort of huge assumption in this protocol, that the delay for that first packet, where I timestamped then you did, and the delay for the second packet, where you timestamped and then I did, the assumption is that those times are the same and if they\u2019re not the same they introduce what\u2019s called error, and that is a sort of very important aspect. That is an assumption that is made so that you can actually solve those equations to get the offset and the delay.\n   Can you maybe explain what it is about the calculation that depends on the symmetry between the send time and the received time?\n   Those delays are kind of what tie it together, right? You know that if the clocks were in sync you know that the timestamp that you took minus the timesstamp that I took should be equal to the delay of the packet to get to you, right? And vice versa. My timestamp, from the second one that I received, minus your timestamp should be equal to the delay that it took for the packet to get from you to me. And you\u2019re like, \u201cWell. What do I do with this information?\u201d And you say, \u201cWhat if I just assume that those two delays are equal?\u201d and if I assume that those two delays are equal, then I can start rearranging the various pieces of the equation. And then that\u2019s how you can actually solve for the delay and the offset.\n   What\u2019s the role of the two timestamps on the server-side? So, if you ask me what time it is, I write down when I receive it, and then I write down the time where I send it back. You could imagine a simpler protocol with just three timestamps. Then you just assume that that time that I wrote down happened in the middle of that interval, the interval between the time you sent the first method and received the second message.\n   How do you know when in the middle is, right? There\u2019s lots of vagaries that happen with operating systems like if you timestamp it on either end, as soon as you receive the packet you timestamp it, and then maybe you have to do some work, and then right before you send it back you timestamp it, and that\u2019s sort of how you get closest to those differences I mentioned representing the actual network delay from one to the other.\n   And I guess an extra assumption that you\u2019re making here is that in that period between the first timestamp and the second timestamp you had better assume that the rate at which the clock is going forward is about right. I think that throws another error term into the equation. It\u2019s, I think, typically extremely small, right? If you just, it certainly seems like something you can, in practice, ignore. Because if you just look at the number of parts per million, or whatever that you were talking about, in terms of how much drift there is in a real computer clock, I think that is, in fact, pretty tiny.\n   Right, well you\u2019ve got the correction being applied by the time daemon that\u2019s running on the computer, which is keeping the clock in sync. Presumably, the server-side of this communication is also taking time from somewhere either reference clock or some sort of higher upstream stratum in NTP, like clocks that are better than it, something like a GPS receiver, and it has applied a sort of correction to the operating system to say, \u201cHey, I currently believe that the frequency is off by this much. Please correct that when you hand me back time.\u201d So, I feel like your biggest \u2013 I guess to your point of being able to ignore in practice \u2013 your biggest concern would be if in between those two timestamps something massive changed, like the temperature rose or dropped by many, many degrees or something such that, that frequency correction was now just wildly incorrect.\n   Okay, so we have now a network protocol. Put a timestamp, send a message, another timestamp, another timestamp, you get it back. Now the computer that started all this has some estimate for how much it\u2019s clock is off. What does it do then?\n   In the simple world, you could just set your time. You could just, you could just sort of say like, \u201cAnd the time should be X,\u201d but that\u2019s not generally how most Network Time Protocol daemons work. What they\u2019ll do is they\u2019ll take a number of samples from a single server, but many times you have multiple servers configured so you\u2019ll take many samples from multiple servers, and you\u2019ll sort of apply different criteria to these things to decide if you should even consider them. I think the reference implementation of NTPD has this notion of a \u201cpopcorn spike,\u201d where if your offset, you know, if you\u2019ve gotten back 30 samples and they all kind of look about the same, but then you get one that\u2019s wildly off, you just kind of say like, \u201cI\u2019m gonna ignore that one, because likely that was just due to some crazy queueing somewhere in the network or something like that.\u201d\n   You can sort of think of this as a kind of voting algorithm: You have a bunch of different oracles that are telling you things about what time is, you kind of bring them all together and have some way of computing an aggregate assumption about what the time currently is that tries to be robust to errors and drop outliers and the like.\n   Yeah, I think that\u2019s right. You try to pick out the people who are lying to you, right? Some of those servers you might be talking to upstream might just be telling you incorrect things. They\u2019re generally referred to in sort of NTP parlance as falsetickers, and the ones who are not falsetickers are truechimers.\n      I\u2019m not sure why exactly these are the names, but these are some of the names you might see if you\u2019re looking around the internet. So you try and pick out the ones that are telling you the truth. You apply some other various heuristics to them to try and figure out which ones you think are the best, right? Which ones maybe have the smallest error bars \u2013 even though you might think that these are decent sources to use some of them might have wider error bars than others, right, like your samples may represent a sort of wider range than the other ones \u2013 so you try and figure out which ones are the best and then you use that to sort of tell your operating system to effectively speed up or slow down its frequency correction for how off it is, and try and sort of remove that error over time. You don\u2019t just abruptly adjust the time that the system thinks it is. Most time daemons will not aggressively step the clock. The reason for that is that most applications do not enjoy when the time just changes drastically, especially not when it changes drastically in the negative direction.\n   This highlights another property you want out of your clocks, which we haven\u2019t touched on yet, which is: we said we want our clocks to be accurate. Your criterion for what it means for them to be right is you go to them and ask them what time it is, and they give numbers pretty close to each other. But there\u2019s another property you want, which is you want the clocks to, in a micro sense, advance about a second per second and you especially want it to never go backwards, because there are lots of algorithms on a computer, which are making the assumption implicitly and you know, naively reasonably, that the clocks only go forward, and lots of things can get screwed up when you allow clocks to jump backwards.\n   Right. So, a way\n......", "posttime": "2021-08-09 02:58:19", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "2020,\u65f6\u949f,clock,\u65f6\u95f4", "title": "\u65f6\u949f\u540c\u6b65 (2020)", "title_en": "Clock Synchronization (2020)", "transed": 1, "url": "https://signalsandthreads.com/clock-synchronization/", "via": "", "real_tags": ["2020", "\u65f6\u949f", "clock", "\u65f6\u95f4"]}, {"category": "", "categoryclass": "", "imagename": "abc583fc1a4aecb759f34e079b198bb5.png", "infoid": 1072162, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e9a\u5386\u5c71\u5927\u00b7\u963f\u52a0\u76ae\u6258\u592b\uff08Aleksandr Agapitov\uff09\u8ba8\u8bba\u4e86\u56f4\u7ed5\u4ed6\u51b3\u5b9a\u4ece Xsolla \u88c1\u5458\u7ea6 150 \u540d\u5458\u5de5\u7684\u6700\u65b0\u4e89\u8bae\u3002\u4ed6\u89e3\u91ca\u4e86\u5982\u4f55\u51c6\u786e\u8bc4\u4f30\u5458\u5de5\u7ee9\u6548\u4ee5\u53ca\u4ed6\u5bf9\u6279\u8bc4\u4ed6\u7684\u4eba\u7684\u770b\u6cd5\u3002 Meduza \u4e8e 8 \u6708 6 \u65e5\u53d1\u8868\u4e86\u5bf9 Agapitov \u7684\u91c7\u8bbf\u3002\u4ee5\u4e0b\u662f\u91c7\u8bbf\u6458\u8981\u3002\u516c\u53f8\u88c1\u5458\u51b3\u5b9a\u7684\u7075\u611f\u6765\u81ea Netflix\u3001Harward \u548c\u5176\u4ed6\u7ec4\u7ec7\uff0c\u8fd9\u4e9b\u7ec4\u7ec7\u5b9a\u671f\u89e3\u96c7 10% \u6700\u4e0d\u656c\u4e1a\u548c\u6548\u7387\u6700\u4f4e\u7684\u5458\u5de5\u3002\u7136\u800c\uff0cXsolla \u6ca1\u6709\u8ba1\u5212\u89e3\u96c7\u8fd9\u4e48\u591a\u4eba\uff0c\u76f4\u5230\u5b83\u505c\u6b62\u540c\u6bd4\u589e\u957f 40%\u3002\u7ee9\u6548\u8bc4\u4f30\u7cfb\u7edf\u4e8e 2021 \u5e74\u521d\u5b9e\u65bd\u3002\u516c\u53f8\u6839\u636e 30 \u4e2a\u7279\u5f81\u4ee5 100 \u5206\u5236\u8861\u91cf\u5458\u5de5\u7684\u6548\u7387\u3002\u8be5\u5217\u8868\u5305\u62ec\u5728\u5185\u90e8 Wiki \u4e2d\u64b0\u5199\u548c\u9605\u8bfb\u6587\u7ae0\u3001\u521b\u5efa\u548c\u5173\u95ed\u4efb\u52a1\u5de5\u5355\uff0c\u4ee5\u53ca\u4eea\u8868\u677f\u6d3b\u52a8\u548c\u53c2\u4e0e\u5185\u90e8\u4f1a\u8bae\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u5199\u4f5c\u548c\u9605\u8bfb\u6587\u672c\u6bd4\u505a\u6f14\u8bb2\u66f4\u6709\u6548\u7387\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u4ed6\u8ba4\u4e3a\u6bcf\u4e2a\u5458\u5de5\u90fd\u5e94\u8be5\u9605\u8bfb Xsolla Wiki \u4e2d\u6709\u5173\u4e1a\u52a1\u548c\u5176\u4ed6\u516c\u53f8\u7684\u4fe1\u606f\u3002 \u201c\u6709\u4e9b\u4eba\u53ea\u662f\u4e0d\u60f3\u81ea\u5b66\u6216\u4e86\u89e3\u516c\u53f8\u7684\u8ba1\u5212\u3002\u6211\u4eec\u4e3a\u4ed6\u4eec\u63d0\u4f9b\u4e86\u4e30\u539a\u7684\u9063\u6563\u8d39\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002\u827e\u514b\u7d22\u62c9\u53ea\u8ddf\u8e2a\u5de5\u4f5c\u65e5\u5fd7\uff0c\u6240\u4ee5\u521b\u59cb\u4eba\u8ba4\u4e3a\u516c\u53f8\u6ca1\u6709\u4fb5\u72af\u5458\u5de5\u9690\u79c1\u3002\u4ed6\u58f0\u79f0\uff0c\u5982\u679c\u4e00\u4e2a\u4eba\u7684\u201c\u6570\u5b57\u8db3\u8ff9\u201d\u4e0d\u53ef\u89c1\uff0c\u4ed6\u4eec\u5c31\u4e0d\u5e94\u8be5\u5728 Xsolla \u5de5\u4f5c\u3002\u8be5\u516c\u53f8\u8fd8\u8ba1\u5212\u5b9e\u65bd\u6240\u8c13\u7684\u201c\u6570\u5b57\u955c\u50cf\u201d\uff0c\u4ee5\u4fbf\u6bcf\u4f4d\u5458\u5de5\u90fd\u80fd\u4e86\u89e3\u4eba\u5de5\u667a\u80fd\u5bf9\u4ed6\u4eec\u7684\u5de5\u4f5c\u548c\u656c\u4e1a\u5ea6\u7684\u770b\u6cd5\u3002\u7136\u800c\uff0c\u5f00\u53d1\u56e2\u961f\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\u5e76\u4e0d\u70ed\u60c5\u200b\u200b\uff0c\u6240\u4ee5\u5b83\u7684\u63a8\u51fa\u6b63\u5728\u7b49\u5f85\u4e2d\u3002\n\u7531\u4e8e\u5927\u6d41\u884c\u5bf9\u6e38\u620f\u884c\u4e1a\u7684\u5f71\u54cd\uff0cXsolla \u53bb\u5e74\u7684\u6536\u5165\u589e\u957f\u4e86 80%\u3002\u7136\u800c\uff0c\u589e\u957f\u653e\u7f13\u662f\u56e0\u4e3a\u7f3a\u4e4f\u7ebf\u4e0b\u6d3b\u52a8\u4f7f\u5f97\u5e73\u53f0\u66f4\u96be\u5438\u5f15\u65b0\u5ba2\u6237\u3002\u6839\u636e Agapitov \u7684\u8bf4\u6cd5\uff0cXsolla \u5728\u8fc7\u53bb\u516d\u4e2a\u6708\u4e2d\u505c\u6b62\u4e86 40% \u7684\u589e\u957f\uff0c\u56e0\u6b64\u4ed6\u51b3\u5b9a\u88c1\u5458\u3002\u5927\u7ea6150\u540d\u4e0b\u5c97\u5458\u5de5\u5360\u516c\u53f8500\u4eba\u5de6\u53f3\u5458\u5de5\u7684\u4e09\u5206\u4e4b\u4e00\u3002\u76ee\u6807\u662f\u5c06\u5de5\u8d44\u9884\u7b97\u51cf\u5c11 10%\uff0c\u800c\u4e0d\u662f\u89e3\u96c7 10% \u7684\u5458\u5de5\u3002\u963f\u52a0\u76ae\u6258\u592b\u51c6\u5907\u5728\u5fc5\u8981\u65f6\u4ece\u8bc4\u7ea7\u5e95\u90e8\u89e3\u96c7\u5c3d\u53ef\u80fd\u591a\u7684\u8868\u73b0\u4e0d\u4f73\u7684\u4eba\uff0c\u4ee5\u51cf\u5c11 10% \u7684\u5de5\u8d44\u57fa\u91d1\u3002\u5927\u591a\u6570\u88c1\u5458\u53d1\u751f\u5728\u827e\u514b\u7d22\u62c9\u6700\u521d\u6210\u7acb\u7684\u5f7c\u5c14\u59c6\u3002\u963f\u52a0\u76ae\u6258\u592b\u89e3\u96c7\u4e86 6 \u540d\u7f8e\u56fd\u5458\u5de5\uff0850 \u540d\u7f8e\u56fd\u5458\u5de5\uff09\u548c 2 \u540d\u4e9a\u6d32\u5458\u5de5\uff0812 \u540d\u5728\u97e9\u56fd\u529e\u516c\u5ba4\u5de5\u4f5c\u7684\u5458\u5de5\uff09\u3002\u516c\u53f8\u88c1\u6389\u4e86\u4e0d\u540c\u9886\u57df\u7684\u4e13\u804c\u4eba\u5458\u3002 \u201c\u6700\u5dee\u7684\u7a0b\u5e8f\u5458\u3001\u6700\u5dee\u7684\u8425\u9500\u4eba\u5458\u3001\u6700\u5dee\u7684\u529e\u516c\u5ba4\u7ecf\u7406\u3001\u6700\u5dee\u7684\u7ba1\u7406\u5458\uff0c\u751a\u81f3\u6700\u5dee\u7684\u4f1a\u8ba1\u5e08\uff0c\u201dAgapitov \u8bc4\u8bba\u9053\u3002 Xsolla \u8ba1\u5212\u6bcf 12 \u4e2a\u6708\u524a\u51cf 10% \u7684\u9884\u7b97\uff0c\u76f4\u5230\u5b83\u518d\u6b21\u5f00\u59cb\u663e\u793a\u81f3\u5c11 40% \u7684\u589e\u957f\u3002\u8be5\u516c\u53f8\u76ee\u524d\u6b63\u5728\u4e9a\u6d32\u548c\u6b27\u6d32\u5bfb\u627e\u65b0\u7684\u4eba\u624d\u3002\n\u963f\u52a0\u76ae\u6258\u592b\u8fd8\u627f\u8ba4\uff0c\u4ed6\u7684\u76f4\u8a00\u4e0d\u8bb3\u53ef\u80fd\u4f1a\u5413\u5230\u5f88\u591a\u5458\u5de5\u3002 \u201c\u6211\u610f\u8bc6\u5230\u6211\u7684\u60c5\u5546\u6709\u95ee\u9898\uff0c\u4f46\u6211\u6b63\u5728\u52aa\u529b\uff0c\u201d\u4ed6\u8bf4\u3002\u5c3d\u7ba1\u5927\u89c4\u6a21\u88c1\u5458\uff0c\u4ed6\u5e76\u4e0d\u5bb3\u6015\u53ef\u80fd\u7684\u8c03\u67e5\u3002\u4ed6\u8ba4\u4e3a Xsolla \u5e76\u6ca1\u6709\u8fdd\u53cd\u4fc4\u7f57\u65af\u7684\u52b3\u52a8\u6cd5\uff0c\u800c\u4e14\u8fd8\u6ca1\u6709\u6b63\u5f0f\u89e3\u96c7\u4efb\u4f55\u4eba\u3002 \u201c\u5bf9\u4e8e\u6536\u5230\u8fd9\u5c01\u4fe1\u7684\u6240\u6709\u5458\u5de5\uff0c\u6211\u4eec\u8bf4\u516c\u53f8\u4e0d\u91cd\u89c6\u4f60\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u4e3a\u4f60\u627e\u5230\u4e00\u4efd\u85aa\u6c34\u66f4\u9ad8\u7684\u66f4\u597d\u7684\u5de5\u4f5c\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bc4\u8bba\u9053\u3002 \u201c\u540c\u6837\uff0c\u4f60\u5bf9 Xsolla \u7684\u672a\u6765\u4e5f\u4e0d\u611f\u5174\u8da3\u3002\u6240\u4ee5\u8fd9\u662f\u4f60\u6177\u6168\u7684\u9063\u6563\u8d39\uff0c\u795d\u4f60\u597d\u8fd0\u3002\u201d\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u4e5f\u610f\u8bc6\u5230\uff0c\u5728\u8fd9\u573a\u4e89\u8bae\u4e4b\u540e\uff0c\u6709\u4e9b\u4eba\u53ef\u80fd\u60f3\u8981\u79bb\u5f00\u3002\u4f46\u4ed6\u8ba4\u4e3a\u4ed6\u7684\u516c\u53f8\u53ea\u9700\u8981\u5173\u5fc3\u4e2a\u4eba\u548c\u804c\u4e1a\u53d1\u5c55\u7684\u656c\u4e1a\u5458\u5de5\u3002\u4ed6\u58f0\u79f0\u7f8e\u56fd\u5a92\u4f53\u4f1a\u8ba4\u4e3a\u8fd9\u4e00\u51b3\u5b9a\u975e\u5e38\u79ef\u6781\uff0c\u56e0\u4e3a Xsolla \u9075\u5faa\u201c\u8be5\u5730\u533a\u5e38\u89c1\u7684\u505a\u6cd5\u201d\u3002\u963f\u52a0\u76ae\u6258\u592b\u63a5\u7740\u8bf4\uff0c\u5982\u4eca\u7684\u516c\u53f8\u5982\u4f55\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4\uff0c\u5982\u679c\u4e0d\u5f97\u4e0d\u89e3\u96c7\u4ed6\u4eec\u7684\u4ee3\u8868\uff0c\u53ef\u80fd\u4f1a\u8fc7\u4e8e\u8c28\u614e\uff0c\u8fd9\u4f1a\u4f7f\u8fd9\u4e9b\u5458\u5de5\u51e0\u4e4e\u4e0d\u53d7\u88c1\u5458\u7684\u5f71\u54cd\u3002 \u201c\u6211\u4eec\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u5c3d\u53ef\u80fd\u65e0\u504f\u89c1\u3002\u56e0\u6b64\uff0c\u4ece\u7f8e\u56fd\u5a92\u4f53\u548c\u793e\u4f1a\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u6211\u4eec\uff08\u6839\u636e\u7b97\u6cd5\u89e3\u96c7\u4e00\u4e2a\u4eba\uff09\u6bd4\u67d0\u4e9b\u7ecf\u7406\u6839\u636e\u4ed6\u4eec\u81ea\u5df1\u7684\u89c2\u70b9\u8fd9\u6837\u505a\u8981\u597d\u5f97\u591a\uff0c\u201c\u4ed6\u8bf4\u3002\u6839\u636e\u963f\u52a0\u76ae\u6258\u592b\u7684\u8bf4\u6cd5\uff0c\u6574\u4e2a\u4e89\u8bae\u59cb\u4e8e\u4fc4\u7f57\u65af\u7684\u8fdc\u7a0b\u5de5\u4f5c\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u95ee\u9898\u3002\u4ed6\u58f0\u79f0\u6709\u4e9b\u4eba\u89c9\u5f97\u5728\u5bb6\u5de5\u4f5c\u5f88\u56f0\u96be\uff0c\u6240\u4ee5\u5982\u679c\u6709\u4eba\u6279\u8bc4\u4ed6\u7684\u51b3\u5b9a\uff0c\u90a3\u53ea\u662f\u56e0\u4e3a\u4ed6\u4eec\u610f\u8bc6\u5230\u81ea\u5df1\u662f\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u827e\u514b\u7d22\u62c9\u521b\u59cb\u4eba\u8fd8\u6307\u51fa\uff0c\u4e0e\u4ed6\u5408\u4f5c\u7684\u7f8e\u56fd\u516c\u5173\u516c\u53f8\u5e76\u4e0d\u8ba4\u4e3a\u8fd9\u79cd\u60c5\u51b5\u662f\u516c\u53f8\u7684\u5371\u673a\u3002 \u201c\u65e0\u8bba\u4f60\u544a\u8bc9\u5a92\u4f53\u4ec0\u4e48\uff0c\u53ea\u6709\u4e24\u79cd\u6545\u4e8b\u2014\u2014\u6050\u60e7\u7684\u6545\u4e8b\u548c\u5e0c\u671b\u7684\u6545\u4e8b\u3002\u6050\u60e7\u5356\u5f97\u66f4\u597d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5356\u5f97\u5f88\u597d\u7684\u53ef\u6015\u6545\u4e8b\uff0c\u201d\u963f\u52a0\u76ae\u6258\u592b\u8bf4\u3002", "note_en": "Aleksandr Agapitov discussed the latest controversy surrounding his decision to lay off around 150 employees from Xsolla. He explained how exactly employee performance has been evaluated and what he thinks of people criticizing him.\n  An interview with Agapitov was   published by Meduza  on August 6. Below is the summary of that interview.\n  The company\u2019s decision regarding layoffs was inspired by Netflix, Harward, and other organizations that lay off 10% of the most unengaged and ineffective employees on a regular basis. However, Xsolla had no plans to fire these many people until it stopped growing by 40% year-over-year.\n The performance rating system was implemented in early 2021. The company measures its employees\u2019 efficiency on a 100-point scale, based on 30 characteristics. The list includes writing and reading articles in the internal Wiki, creating and closing task tickets, as well as dashboard activity and participation in internal meetings.\n According to Agapitov, writing and reading texts is way more efficient than making presentations. That\u2019s why he thinks that every employee should read the information about the business and other companies in Xsolla\u2019s Wiki. \u201cSome people just didn\u2019t really want to educate themselves or learn about the company\u2019s plans. We offered them a generous severance pay,\u201d Agapitov said.\n Xsolla only tracks work logs, so the founder thinks that the company doesn\u2019t violate employees\u2019 privacy. He claimed that if a person\u2019s \u201cdigital footprint\u201d is not visible, they shouldn\u2019t work at Xsolla.\n The company also planned to implement the so-called \u201cdigital mirror,\u201d so every employee could learn what AI thinks of their work and engagement. However, the development team wasn\u2019t enthusiastic about this idea, so its rollout is pending.\n  Xsolla\u2019s revenue increased by 80% last year, thanks to the effect that the pandemic had on the games industry.\n However, the growth slowed down because the lack of offline events made it harder to attract new customers to the platform.\n According to Agapitov, Xsolla stopped showing a 40% growth during the last six months, so he decided to reduce the staff.\n  Roughly 150 laid-off employees account for a third of the company\u2019s staff of around 500 people. The goal was to reduce the salary budget by ten percent, not to fire 10 percent of the employees. Agapitov was prepared to fire as many low-performing people from the bottom of the rating as necessary to achieve a 10% salary fund reduction.\n Most layoffs happened in Perm, where Xsolla was initially founded. Agapitov fired six people from the US (out of 50 US-based staff) and two people from Asia (out of 12 employees working at the South Korean office).\n The company laid off people specializing in different spheres. \u201cWorst programmers, worst marketers, worst office managers, worst admins, and even worst accountants,\u201d Agapitov commented.\n Xsolla plans to cut 10% of its budget every 12 months until it starts showing at least a 40% growth again. The company is now looking for new talent in Asia and Europe.\n Agapitov also admitted that his blunt statements could have scared a lot of employees. \u201cI realize I\u2019m having trouble with my emotional intelligence but I\u2019m working on it,\u201d he said.\n Despite the mass layoffs, he isn\u2019t afraid of possible investigations. He thinks that Xsolla hasn\u2019t violated Russian labor laws and, formally, hasn\u2019t fired anyone yet. \u201cTo all employees who received the letter, we said that the company doesn\u2019t value you, so we will find you a better job with a better salary,\u201d Agapitov commented. \u201cLikewise, you aren\u2019t interested in Xsolla\u2019s future either. So here is your generous severance pay, good luck.\u201d\n The Xsolla founder also realizes that some people might want to leave in the wake of this controversy. But he thinks that his company only needs engaged employees who care about their personal and professional growth.\n  He claimed that the US media would have seen the decision as quite positive, as Xsolla follows the \u201cpractices common for this region.\u201d\n Agapitov went on to say how companies nowadays protect minorities and can be overly cautios if they have to fire their representatives, which can make these employees almost immune to layoffs. \u201cOur algorithm-based solution is as unbiased as possible. Therefore, from the point of view of the US media and society, it is much better for us [to fire a person based on the algorithm] rather than some manager doing it, based on their own views,\u201d he said.\n According to Agapitov, the whole controversy started because remote work in Russia is a huge problem. He claimed that some find it difficult to work from home, so if someone criticizes his decision, it is only because they realize that they are inefficient employees themselves.\n The Xsolla founder also noted that the US PR firm he worked with doesn\u2019t see this situation as a crisis for the company. \u201cWhatever you tell the press, there are only two kinds of stories  \u00a0\u2014  stories of fear and stories of hope. Fear sells better, and this is a scary story that sells very well,\u201d Agapitov said.", "posttime": "2021-08-09 02:57:56", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7b97\u6cd5,\u6267\u884c\u5b98,ceo", "title": "\u827e\u514b\u7d22\u62c9\u9996\u5e2d\u6267\u884c\u5b98\u8868\u793a\uff0c\u4f7f\u7528\u57fa\u4e8e\u7b97\u6cd5\u7684\u89e3\u51b3\u65b9\u6848\u89e3\u96c7\u53ef\u4ee5\u4fdd\u62a4\u5c11\u6570\u65cf\u88d4", "title_en": "Xsolla CEO says firing using an algorithm-based solution protect minorities", "transed": 1, "url": "https://gameworldobserver.com/2021/08/06/xsolla-founder-on-mass-layoffs-and-ai-based-employee-appraisal-system", "via": "", "real_tags": ["\u7b97\u6cd5", "\u6267\u884c\u5b98", "ceo"]}]