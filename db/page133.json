[{"category": "", "categoryclass": "", "imagename": "2332b9ac4bd4797d1fcc0e08b2ff9aac.png", "infoid": 1071256, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6211\u5b8c\u5168\u53ef\u4ee5\u7406\u89e3\u8fd9\u4e00\u70b9\u3002\u6709\u5f88\u591a\u4e8b\u60c5\u6211\u6ca1\u6709\u5199\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5b8c\u6574\u7684 SO \u7b54\u6848\uff0c\u6709\u51e0\u4e2a\u66ff\u4ee3\u65b9\u6848\uff0c\u5df2\u7ecf\u5b58\u5728\u3002\u4f46\u6211\u610f\u8bc6\u5230\uff0c\u6839\u636e\u4f7f\u7528\u5de5\u5177\u7684\u7ecf\u9a8c\u6216\u975e\u5e38\u5177\u4f53\u7684\u7528\u4f8b\u6765\u63cf\u8ff0\u89e3\u51b3\u65b9\u6848\u7684\u6280\u672f\u5185\u5bb9\u4ecd\u6709\u7a7a\u95f4\u3002\u6b64\u7c7b\u5185\u5bb9\u4e0e SO \u7684\u76ee\u6807\u53d7\u4f17\u4e0d\u540c\u3002\u5b83\u9002\u7528\u4e8e\u5e0c\u671b\u89e3\u51b3\u975e\u5e38\u5177\u4f53\u95ee\u9898\u7684\u66f4\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u3002\u66f4\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u4eba\u5458\u4e0d\u592a\u53ef\u80fd\u9996\u5148\u53d1\u5e03\u95ee\u9898\uff0c\u5e76\u4e14\u66f4\u6709\u53ef\u80fd\u7834\u89e3\u81ea\u5df1\u7684\u89e3\u51b3\u65b9\u6848\u3002\u5bf9\u4e8e Stack Overflow \u6765\u8bf4\uff0c\u5b83\u4e5f\u592a\u5c0f\u4f17\u4e86\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5927\u91cf\u65f6\u95f4\u6765\u7814\u7a76\u5e76\u4e14\u901a\u5e38\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0cStack Overflow \u7684\u7b54\u6848\u901a\u5e38\u53ea\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u60a8\u5fc5\u987b\u5c06\u5b83\u4eec\u62fc\u51d1\u5728\u4e00\u8d77\u4ee5\u9002\u5e94\u60a8\u7684\u7528\u4f8b\u3002\u4f8b\u5982\uff0c\u6211\u7684\u535a\u5ba2\u5728\u4e00\u7bc7\u63cf\u8ff0\u5982\u4f55\u5728 Rails \u4e0a\u5e76\u884c\u8bbe\u7f6e Active Directory \u548c\u6570\u636e\u5e93\u767b\u5f55\u7684 5 \u5e74\u591a\u524d\u7684\u5e16\u5b50\u4e2d\u83b7\u5f97\u4e86\u6570\u5343\u6b21\u70b9\u51fb\u3002\u5f53\u6211\u5199\u5b83\u65f6\uff0cStack Overflow \u4e0a\u6709\u51e0\u4e2a\u5173\u4e8e\u5982\u4f55\u8bbe\u7f6e LDAP \u767b\u5f55\u7684\u7b54\u6848\uff0c\u4f46\u6ca1\u6709\u4e00\u4e2a\u6db5\u76d6\u4e86\u6211\u7684\u6574\u4e2a\u7528\u4f8b\u3002\u89e3\u51b3\u65b9\u6848\u6216\u60a8\u5b66\u5230\u7684\u4e1c\u897f\uff0c\u56e0\u4e3a\u60a8\u80fd\u591f\u9605\u8bfb\u6e90\u4ee3\u7801\u6216\u6587\u6863\n\u9605\u8bfb\u6587\u6863\u548c\u6e90\u4ee3\u7801\u662f\u5b66\u4e60\u6280\u80fd\u3002\u5982\u679c\u60a8\u80fd\u591f\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u5e76\u4e14\u63d0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848\uff0c\u6216\u8005\u5b66\u5230\u4e86\u6709\u8da3\u7684\u4e1c\u897f\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u503c\u5f97\u5199\u7684\u3002\u4f8b\u5982\uff0c\u6211\u590d\u5236\u4e86 mysql2 gem \u7248\u672c\u548c MySQL \u670d\u52a1\u5668\u7684\u517c\u5bb9\u6027\u5217\u8868\uff0c\u8be5\u5217\u8868\u4ec5\u5728 mysql gem \u7684 rdoc \u9875\u9762\u5e95\u90e8\u4ee5\u70b9\u5217\u8868\u5f62\u5f0f\u627e\u5230\uff0c\u6211\u4e4b\u524d\u81f3\u5c11\u9519\u8fc7\u4e86 3 \u6b21\u3002\u60a8\u60f3\u51fa\u7684\u89e3\u51b3\u65b9\u6848\u662f\u56e0\u4e3a\u60a8\u6709\u8db3\u591f\u7684\u6280\u80fd\u6765\u8986\u76d6\u6216\u6269\u5c55\u5e93\u7684\u4e00\u90e8\u5206 \u51ed\u501f\u7ecf\u9a8c\uff0c\u60a8\u53ef\u4ee5\u60f3\u51fa\u4fee\u6539\u5e93\u7684\u89e3\u51b3\u65b9\u6848\u3002\u8fd9\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u5355\u72ec\u5904\u7406\u6bcf\u4e2a\u6848\u4f8b\u3002\u76f8\u53cd\uff0c\u56fe\u4e66\u9986\u5c06\u80fd\u591f\u59cb\u7ec8\u5982\u4e00\u5730\u5904\u7406\u5b83\u4eec\u3002\u5728\u5bf9\u5de5\u5177\u6709\u66f4\u591a\u7ecf\u9a8c\u7684\u540c\u65f6\uff0c\u60a8\u4e00\u5b9a\u4f1a\u53d1\u73b0\u4e0d\u90a3\u4e48\u660e\u663e\u7684\u4e8b\u60c5\u3002\u5b83\u4eec\u53ef\u80fd\u88ab\u8bb0\u5f55\u5728\u6848\uff0c\u4f46\u6709\u526f\u4f5c\u7528\u6216\u4e0d\u5b8c\u5168\u76f4\u89c2\u3002\u5176\u4ed6\u4eba\u53ef\u80fd\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u5e76\u53ef\u80fd\u8ba4\u4e3a\u4ed6\u4eec\u7684\u4ee3\u7801\u8fd8\u6709\u5176\u4ed6\u95ee\u9898\u3002\u4e00\u4e2a\u7ecf\u5178\uff08\u4f46\u4f17\u6240\u5468\u77e5\uff09\u7684\u4f8b\u5b50\u662f JavaScript \u7684 atob \u548c btoa\u3002\u4f8b\u5982\uff0c\u6211\u53d1\u73b0 MySQL \u65e0\u6cd5\u89e3\u6790\u6ca1\u6709\u65e5\u671f\u7684 yyyy-ww \u65e5\u671f\u683c\u5f0f\uff0c\u5e76\u4e14\u5728\u6587\u6863\u4e2d\u6ca1\u6709\u660e\u786e\u63d0\u5230\u7684\u65f6\u95f4\u3002\u5373\u4f7f\u6587\u6863\u786e\u5b9e\u63d0\u5230\u73b0\u5728\u6211\u4ecd\u7136\u5076\u5c14\u4f1a\u70b9\u51fb\u8be5\u5e16\u5b50\u3002\u5f53\u65b0\u5de5\u5177\u53d1\u5e03\u65f6\uff0c\u9488\u5bf9\u521d\u5b66\u8005\u7684\u6559\u7a0b\u901a\u5e38\u5e76\u4e0d\u90a3\u4e48\u5145\u5b9e\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u5c1d\u8bd5\u65b0\u4e8b\u7269\uff0c\u4e5f\u53ef\u4ee5\u4e3a\u5b83\u4eec\u7f16\u5199\u66f4\u597d\u7684\u6559\u7a0b\u3002\u8fd9\u53ef\u80fd\u662f\u6210\u719f\u7684\u6559\u7a0b\u6216\u53ea\u662f\u7279\u5b9a\u7684\u90e8\u5206\u3002\n\u4f8b\u5982\uff0c\u5f53\u6211\u5c1d\u8bd5\u4f7f\u7528 Flutter \u65f6\uff0c\u8bbf\u95ee\u5171\u4eab\u9996\u9009\u9879\u548c\u6d88\u606f\u4f20\u9012\u7684\u6559\u7a0b\u4e0d\u662f\u5f88\u6e05\u695a\u3002\u4ed6\u4eec\u5c06\u51e0\u4e2a\u4e0d\u540c\u7684\u4e3b\u9898\u5408\u5e76\u5230\u4e00\u4e2a\u6559\u7a0b\u4e2d\uff0c\u4f46\u9057\u6f0f\u4e86\u4e00\u4e9b\u5e38\u89c1\u7684\u8fb9\u7f18\u60c5\u51b5\u3002\u56e0\u6b64\uff0c\u6211\u7f16\u5199\u4e86\u6709\u5173\u5728 Flutter \u4e2d\u8bbf\u95ee\u5171\u4eab\u9996\u9009\u9879\u4ee5\u53ca\u672c\u673a\u4ee3\u7801\u548c\u6d88\u606f\u4f20\u9012\u7684\u7b80\u5355\u6307\u5357\u3002\u5728\u8fc7\u53bb\u7684\u4e24\u5e74\u91cc\uff0c\u4ed6\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u6570\u5343\u6b21\u89c2\u770b\u3002\u5982\u679c\u60a8\u603b\u662f\u5fd8\u8bb0\u4e00\u4e9b\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u90a3\u4e48\u5176\u4ed6\u4eba\u4e5f\u53ef\u80fd\u4f1a\u5fd8\u8bb0\u3002\u6240\u4ee5\uff0c\u5199\u4e0b\u4e1c\u897f\u4f9b\u60a8\u53c2\u8003\u662f\u6709\u4ef7\u503c\u7684\u3002\u6211\u7684\u7b2c\u4e00\u7bc7\u535a\u6587\u662f\u5982\u4f55\u5411 Ubuntu 14.0 \u6dfb\u52a0\u4ea4\u6362\u5206\u533a\uff0c\u867d\u7136\u5b83\u53ef\u80fd\u4e0d\u662f\u6700\u53d7\u6b22\u8fce\u7684\u535a\u6587\uff0c\u4f46\u5b83\u5bf9\u6211\u6765\u8bf4\u4ecd\u7136\u975e\u5e38\u6709\u4ef7\u503c\uff0c\u56e0\u4e3a\u6211\u603b\u662f\u77e5\u9053\u8be5\u5f15\u7528\u4ec0\u4e48\u3002\u968f\u7740\u60a8\u8d8a\u6765\u8d8a\u6709\u7ecf\u9a8c\uff0c\u60a8\u4f1a\u60f3\u51fa\u81ea\u5df1\u7684\u505a\u4e8b\u65b9\u5f0f\uff0c\u8fd9\u4e9b\u65b9\u5f0f\u53ef\u80fd\u4e0d\u662f\u516c\u8ba4\u7684\u6700\u4f73\u5b9e\u8df5\uff0c\u4f46\u5bf9\u60a8\u6709\u7528\u3002\u56e0\u6b64\uff0c\u5982\u679c\u60a8\u60f3\u5199\u4f5c\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u7ecf\u9a8c\u521b\u4f5c\u5927\u91cf\u5185\u5bb9\u3002\u5199\u4e0b\u975e\u5e38\u5177\u4f53\u7684\u60c5\u51b5\u53ef\u80fd\u610f\u5473\u7740\u5982\u679c\u4f60\u5148\u5230\u90a3\u91cc\uff0c\u4e00\u4e2a\u95ee\u9898\u751a\u81f3\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u53d1\u5e03\u3002", "note_en": "I can absolutely relate to this. There are many things I didn\u2019t write about because a complete SO answer, with several alternatives, already existed.\n But I\u2019ve realized that there is room for technical content that describes solutions based on experience with tools or with a very specific use-case.\n This type of content is not for the same target audience as SO. It\u2019s for a more experienced dev who is looking to solve a very specific issue. The more experienced dev is less likely to post the question in the first place and more likely to hack a solution of their own.\n It would also be too niche for Stack Overflow because it takes a lot of time to research and is often dependant on context.\n   There are often situations where Stack Overflow answers offer only individual pieces of the solution and you must then piece them together to fit your use-case.\n  For example, my blog has had thousands of hits on a 5+ year old post describing how to  set up Active Directory and database login in parallel on Rails. When I wrote it there were several answers on Stack Overflow on how to set up LDAP login but none of them covered my entire use case.\n Solutions or things you learned because you\u2019re able to read the source or the docs\n Reading the docs and the source code are learned skills. If you\u2019re able to do that, and you come up with solutions, or learn interesting things, then that\u2019s worth writing about.\n For example,  I copied the compatibility list for  mysql2 gem versions and MySQL server that was only found on the bottom of the rdoc page of the mysql gem in point list form that I had missed at least three times previously.\n Solutions you came up with because you are skilled enough to override or extend part of a library\n With experience, you can come up with solutions that modify libraries. This is helpful because it means not having to handle each case individually in your code. Instead, the library would be able to consistently handle them.\n    While getting more experienced with tools you\u2019re bound to discover things that are less obvious. They might be documented but have side effects or aren\u2019t entirely intuitive. Others might not be aware of these things and might think there\u2019s something else wrong with their code. A classic (but well known) example of this is JavaScript\u2019s   atob and  btoa.\n For instance, I found out that  MySQL cannot parse yyyy-ww date format without a day and at the time that was not explicitly mentioned in the docs. Even though the docs do mention that now I still get occasional hits on that post.\n  When new tools are released, tutorials for beginners often aren\u2019t all that fleshed out. So, if you\u2019re into experimenting with new things, you can also write better tutorials for them. This might be full-fledged tutorials or just specific pieces.\n For instance, when I experimented with Flutter, the tutorials for accessing shared preferences and message passing were not very clear. They combined several different topics into one tutorial and missed some common edge cases. So, I wrote simple guides on  accessing shared preferences in Flutter and native code and  message passing. Over the past two years they\u2019ve had thousands of views.\n  If you keep forgetting something simple, chance are others are too. So, there is value in writing down things for your reference.\n One of my first posts was  how to add a swap partition to Ubuntu 14.0 and while it might not be the most popular of posts it was still very valuable to me because I always knew what to refer to.\n  As you get more experienced, you\u2019ll come up with your own ways of doing things that might not be the accepted best practice but work for you.\n   So, if you would like to write, there\u2019s plenty of content you can create based on your experience. Writing about very specific situations might mean that a question never even ends up being posted if you got there first.", "posttime": "2021-08-03 03:00:42", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u535a\u5ba2,overflow,blogging,\u53ef\u80fd", "title": "Stack Overflow \u65f6\u4ee3\u7684\u6280\u672f\u535a\u5ba2", "title_en": "Technical blogging in the era of Stack Overflow", "transed": 1, "url": "https://ognjen.io/technical-blogging-in-time-of-stack-overflow/", "via": "", "real_tags": ["\u535a\u5ba2", "overflow", "blogging", "\u53ef\u80fd"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071254, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u603b\u7ed3\u6211\u4ece\u5c1d\u8bd5\u66f4\u6df1\u5165\u5730\u7406\u89e3\u7f16\u7a0b\u4e2d\u7684\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\u4e2d\u5b66\u5230\u7684\u4e1c\u897f\uff1aPython \u7684\u751f\u6210\u5668\u548c Scheme \u7684\u5ef6\u7eed\u3002\u76ee\u7684\u4e0d\u662f\u6559\u6388 Python \u6216 Scheme \u7f16\u7a0b\u3002\u76f8\u53cd\uff0c\u6211\u60f3\u8981\u505a\u7684\u662f\u8bc1\u660e\u751f\u6210\u5668\u662f\u4e00\u4e2a\u66f4\u5f3a\u5927\u7684\u6784\u9020\u7684\u7279\u4f8b - \u5ef6\u7eed\u3002\u5ef6\u7eed\u5141\u8bb8\u7a0b\u5e8f\u5458\u53d1\u660e\u65b0\u7684\u63a7\u5236\u7ed3\u6784\uff0c\u5b83\u662f\u6784\u5efa\u8fed\u4ee3\u5668\u3001\u751f\u6210\u5668\u3001\u534f\u540c\u7a0b\u5e8f\u548c\u8bb8\u591a\u5176\u4ed6\u6709\u7528\u7ed3\u6784\u7684\u57fa\u7840\u3002\u6211\u53d1\u73b0\u4ece\u66f4\u6df1\u5165\u548c\u66f4\u5e7f\u6cdb\u7684\u5ef6\u7eed\u89d2\u5ea6\u7406\u89e3\u751f\u6210\u5668\u7684\u5de5\u4f5c\u539f\u7406\u975e\u5e38\u6709\u7528\u3002\u5ef6\u7eed\u5728\u7f16\u7a0b\u8bed\u8a00\u7406\u8bba\u4e2d\u5df2\u7ecf\u5f88\u6210\u719f\uff08\u5b83\u662f\u5728 70 \u5e74\u4ee3\u5f15\u5165\u7684\uff09\uff0c\u4f46\u5b83\u7684\u4f7f\u7528\u8fd8\u6ca1\u6709\u6210\u4e3a\u4e3b\u6d41\u3002\u4f46\u662f\uff0c\u6211\u6000\u7591\u5728\u4e91\u8ba1\u7b97\u548c\u5927\u6570\u636e\u65f6\u4ee3\uff0c\u60f0\u6027\u6c42\u503c\u53d8\u5f97\u8d8a\u6765\u8d8a\u91cd\u8981\uff0c\u5ef6\u7eed\u4f1a\u53d8\u5f97\u66f4\u52a0\u7a81\u51fa\uff0c\u5c31\u50cf\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e2d\u7684\u8bb8\u591a\u5176\u4ed6\u6982\u5ff5\u4e00\u6837\u3002\u6211\u8ba4\u4e3a\u503c\u5f97\u4f60\u82b1\u65f6\u95f4\u5728\u4f60\u7684\u5468\u8fb9\u89c6\u89c9\u4e2d\u4e3a\u8fd9\u4e2a\u6982\u5ff5\u4fdd\u7559\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u719f\u6089 Scheme \u7684\u4eba\uff1aScheme \u662f\u6700\u53e4\u8001\u7684\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\uff1aLISP \u7684\u4e00\u79cd\u76f8\u5bf9\u73b0\u4ee3\u7684\u65b9\u8a00\u3002 Scheme \u662f\u4e00\u79cd\u6781\u7b80\u4f46\u6781\u5bcc\u8868\u73b0\u529b\u7684\u8bed\u8a00\uff0c\u8fd9\u4f7f\u5176\u6210\u4e3a\u8bd5\u9a8c\u9ad8\u7ea7\u7f16\u7a0b\u6982\u5ff5\u7684\u7406\u60f3\u5de5\u5177\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 Scheme \u7ecf\u5e38\u88ab\u7528\u4f5c\u6559\u6388\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5de5\u5177\uff0c\u4ee5\u53ca\u7f16\u7a0b\u8bed\u8a00\u7814\u7a76\u4eba\u5458\u7684\u6e38\u4e50\u573a\u3002\u5ef6\u7eed\u5e76\u4e0d\u662f Scheme \u72ec\u6709\u7684\uff0c\u4f46 Scheme \u662f\u7b2c\u4e00\u79cd\u5c06\u5ef6\u7eed\u89c6\u4e3a\u4e00\u6d41\u5b9e\u4f53\u7684\u8bed\u8a00\uff0c\u4ece\u800c\u4f7f\u5b83\u4eec\u6613\u4e8e\u64cd\u4f5c\u3002\u8fd9\u662f\u63a2\u7d22\u5ef6\u7eed\u7684\u6700\u81ea\u7136\u7684\u573a\u6240\u3002\u5728 Python \u4e2d\uff0c\u751f\u6210\u5668\u4e3b\u8981\u7528\u4e8e\u4f7f\u590d\u6742\u7684\u5faa\u73af\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u7ef4\u62a4\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u5b83\u4eec\u662f\u8fed\u4ee3\u5668\u7684\u7279\u6b8a\u60c5\u51b5\u3002\u5728\u50cf c \u8fd9\u6837\u7684\u4f20\u7edf\u8bed\u8a00\u4e2d\uff0cfor \u5faa\u73af\u5982\u4e0b\u6240\u793a\uff1a \u7b2c\u4e00\u884c\u6307\u5b9a\u8981\u8fed\u4ee3\u7684\u6570\u5b57\u5e8f\u5217\u3002\u7b2c\u4e8c\u884c\u662f\u6211\u4eec\u60f3\u7528\u8fd9\u4e9b\u6570\u5b57\u505a\u4ec0\u4e48\u3002\u4f7f\u7528 Python \u4e2d\u7684\u751f\u6210\u5668\uff0c\u6211\u4eec\u53ef\u4ee5\u50cf\u4e0b\u9762\u7ed9\u51fa\u7684\u793a\u4f8b\u4e00\u6837\u7f16\u5199\u8fd9\u79cd\u7c7b\u578b\u7684\u5faa\u73af\u3002\u5728\u5176\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 squared_ints() \u751f\u6210\u5668\u4e00\u4e2a\u4e00\u4e2a\u5730\u4ea7\u751f\u4e00\u4e2a\u5e73\u65b9\u6574\u6570\u5e8f\u5217\uff0c\u7136\u540e\u4f7f\u7528 sum_of_squares() \u51fd\u6570\u5c06\u5b83\u4eec\u7d2f\u52a0\uff0c\u76f4\u5230\u603b\u548c\u5927\u4e8e\u7a0b\u5e8f\u5458\u6307\u5b9a\u7684\u754c\u9650\uff1a def squared_ints()\uff1a &#39;&#39;&#39; Infinite generator Return i^2 for i = 1, 2, ... &#39;&#39;&#39; i = 1 while True: yield i *i # \u6b63\u662f\u8fd9\u4e2a yield \u4f7f\u8fd9\u4e2a\u51fd\u6570\u6210\u4e3a\u4e00\u4e2a generator i += 1 def sum_of_squares( bound): &#39;&#39;&#39; \u8fd4\u56de\u5927\u4e8e\u754c\u9650\u7684\u5e73\u65b9\u6574\u6570\u7684\u6700\u5c0f\u603b\u548c &#39;&#39;&#39; g = squared_ints() s = 0 for i in g: # \u8fed\u4ee3\u751f\u6210\u5668 gs += i # \u5982\u679c s &gt;bound\uff0c\u5219\u7d2f\u79ef\u603b\u548c s : # \u5982\u679c s \u5927\u4e8e n \u5219\u9000\u51fa\u5faa\u73af return s squared-ints() \u7684\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\uff0c\u4f46\u662f yield \u5173\u952e\u5b57\u7684\u5b58\u5728\u4f7f\u5b83\u6210\u4e3a\u4e00\u4e2a\u751f\u6210\u751f\u6210\u5668\u7684\u51fd\u6570 [1]\u3002\u5728\u751f\u6210\u5668 g \u4e0a\u4f7f\u7528 next() \u51fd\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6570\u5b57\u662f\u4e00\u4e00\u751f\u6210\u7684\u3002\u751f\u6210\u5668\u4e0e Python \u4e2d\u7684\u5faa\u73af\u914d\u5408\u5f97\u5f88\u597d\u3002\u5728 sum_of_squares() \u4e2d\u53ef\u4ee5\u770b\u5230\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u7528 for \u5faa\u73af\u8fed\u4ee3\u751f\u6210\u5668\u3002\n\u8ba9\u6211\u4eec\u56de\u987e\u4e00\u4e0b\u5230\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u53d6\u5f97\u7684\u6210\u5c31\u3002\u5728 c \u98ce\u683c\u7684\u5faa\u73af\u4e2d\uff0c\u5e8f\u5217\u7684\u751f\u6210\u548c\u6d88\u8017\u662f\u7d27\u5bc6\u8026\u5408\u7684\u3002\u7136\u800c\uff0c\u5728\u4e0a\u9762\u7684 Python \u4ee3\u7801\u4e2d\uff0c\u5b83\u4eec\u88ab\u5206\u89e3\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u5b9e\u4f53\u3002\u7531\u4e8e\u751f\u6210\u5668\u53ef\u4ee5\u6784\u5efa\u5728\u5176\u4ed6\u751f\u6210\u5668\u4e0a\uff0c\u56e0\u6b64\u60a8\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u751f\u6210\u5668\u8fdb\u4e00\u6b65\u5206\u89e3\u4e3a\u66f4\u7b80\u5355\u7684\u751f\u6210\u5668\u94fe\u3002\u8fd9\u4f7f\u5f97\u590d\u6742\u7684\u5faa\u73af\u66f4\u52a0\u6a21\u5757\u5316\u548c\u53ef\u91cd\u7528\uff0c\u56e0\u6b64\u66f4\u6613\u4e8e\u7f16\u5199\u548c\u7ef4\u62a4\u3002\u53e6\u4e00\u4e2a\u6539\u8fdb\u662f\u751f\u6210\u5668\u4ee3\u7801\u6ca1\u6709\u5bf9\u5e8f\u5217\u7684\u957f\u5ea6\u8bbe\u7f6e\u9650\u5236\u3002\u7406\u8bba\u4e0a\u662f\u65e0\u9650\u7684\u3002\u751f\u6210\u7684\u5e8f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u7531\u6d88\u8017\u8be5\u5e8f\u5217\u7684\u4ee3\u7801\u51b3\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u751f\u6210\u5668\u4ee3\u7801\u53ef\u4ee5\u5c3d\u53ef\u80fd\u901a\u7528\uff0c\u5c06\u8ba1\u7b97\u6548\u7387\u7559\u7ed9\u6d88\u8d39\u8005\u3002\u5728\u751f\u6210\u5e8f\u5217\u4e2d\u7684\u4e0b\u4e00\u4e2a\u9879\u76ee\u7684\u8ba1\u7b97\u6210\u672c\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u201c\u61d2\u60f0\u201d\u662f\u975e\u5e38\u53ef\u53d6\u7684\u3002\u6240\u6709\u8fd9\u4e00\u5207\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u5173\u952e\u5b57\u6536\u76ca\u5b9e\u73b0\uff01\u8fd9\u5f88\u795e\u5947\uff0c\u4e0d\u662f\u5417\uff1f\u53d1\u751f\u7684\u60c5\u51b5\u662f\uff0c\u6bcf\u6b21\u8c03\u7528 yield \u65f6\uff0c\u51fd\u6570\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u51bb\u7ed3\uff0c\u5e76\u4e14\u63a7\u5236\u6d41\u8fde\u540c\u751f\u6210\u7684\u503c\u4e00\u8d77\u4ea4\u7ed9\u8c03\u7528\u8005 [2]\u3002\u4e0b\u4e00\u6b21\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u63a7\u5236\u6d41\u8fd4\u56de\u5230\u751f\u6210\u5668\u7684\u51bb\u7ed3\u72b6\u6001\u3002\u5bf9\u4e8e\u590d\u6742\u7684\u884c\u4e3a\u6765\u8bf4\uff0c\u591a\u4e48\u7b80\u5355\u800c\u4f18\u96c5\u7684\u8bed\u6cd5\uff01\u8fd9\u5c31\u50cf\u9b54\u672f\u3002\u7136\u800c\uff0c\u6211\u7684\u4e00\u90e8\u5206\uff08\u4e5f\u8bb8\u662f\u6211\u7684\u7406\u8bba\u5bb6\uff09\u5bf9\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u795e\u5947\u884c\u4e3a\u611f\u5230\u4e0d\u8212\u670d\u3002 yield \u5982\u4f55\u4ece\u51fd\u6570\u5b9a\u4e49\u4e2d\u521b\u5efa\u751f\u6210\u5668\uff08\u5373\u751f\u6210\u5668\u7c7b\u7684\u5bf9\u8c61\uff09\uff1f\u4e3a\u4ec0\u4e48\u5728\u8bed\u8a00\u7684\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u53d1\u73b0\u8fd9\u79cd\u9b54\u6cd5\uff1f\u4e3a\u4ec0\u4e48\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u8c03\u7528 yield\uff1f\u6b64\u5916\uff0c\u751f\u6210\u5668\u63d0\u4f9b\u4e86\u4e00\u4e9b\u7528\u4e8e\u5236\u4f5c\u534f\u7a0b\u7684\u5de5\u5177\u2014\u2014\u5e76\u53d1\u7f16\u7a0b\u4e2d\u7684\u4e00\u4e2a\u4e3b\u9898\u3002\u8d27\u5e01\u4e0e\u8fed\u4ee3\u6709\u4ec0\u4e48\u5173\u7cfb\uff1f\u7531\u4e8e\u6240\u6709\u8fd9\u4e9b\u884c\u4e3a\u4f3c\u4e4e\u90fd\u4ee5\u4e00\u79cd\u7279\u522b\u7684\u65b9\u5f0f\u4e0e\u4ea7\u91cf\u76f8\u5173\u8054\uff0c\u6211\u503e\u5411\u4e8e\u6309\u7167\u60ef\u7528\u7684\u65b9\u5f0f\u7f16\u5199\u751f\u6210\u5668\uff0c\u9075\u5faa\u719f\u8bb0\u7684\u914d\u65b9\u800c\u4e0d\u8003\u8651\u5e55\u540e\u7684\u91cd\u578b\u673a\u68b0\u3002\u6211\u603b\u662f\u6709\u4e00\u79cd\u5520\u53e8\u7684\u611f\u89c9\uff0c\u6709\u4e00\u4e2a\u6211\u770b\u4e0d\u5230\u7684\u66f4\u5927\u7684\u56fe\u666f\u3002\u90a3\u65f6\u6211\u610f\u8bc6\u5230\u6211\u4ee5\u524d\u66fe\u5728\u4e0d\u540c\u7684\u4e0a\u4e0b\u6587\u4e2d\u9605\u8bfb\u8fc7\u7c7b\u4f3c\u7684\u60f3\u6cd5\u3002\u5f53\u6211\u5728\u5927\u5b66\u5b66\u4e60\u7f16\u7a0b\u65f6\uff0c\u6211\u6709\u4e00\u4efd Springer \u548c Friedman \u6240\u8457\u7684 Scheme \u548c\u7f16\u7a0b\u827a\u672f\u3002\u6709\u4e00\u7ae0\u662f\u5173\u4e8e\u201c\u5ef6\u7eed\u201d\u8fd9\u4e2a\u795e\u79d8\u6982\u5ff5\u7684\uff0c\u5728\u90a3\u91cc\u8ba8\u8bba\u4e86\u6240\u6709\u8fd9\u4e9b\u4e1c\u897f\u3002\u6211\u8df3\u8fc7\u4e86\u6574\u7ae0\uff0c\u56e0\u4e3a\u6211\u65e0\u6cd5\u7406\u89e3\u5ef6\u7eed\u6709\u4ec0\u4e48\u597d\u5904\u3002\u4e5f\u8bb8\u662f\u65f6\u5019\u91cd\u65b0\u5ba1\u89c6\u8fd9\u4e2a\u8bdd\u9898\u4e86\u3002\u5728\u6211\u4eec\u7ee7\u7eed\u8ba8\u8bba\u5ef6\u7eed\u4e4b\u524d\uff0c\u8bf7\u653e\u5fc3\uff0cScheme \u4e2d\u63d0\u4f9b\u4e86 Python \u98ce\u683c\u7684\u751f\u6210\u5668\u3002\u5b83\u4eec\u4e0d\u662f\u8bed\u8a00\u672c\u8eab\u7684\u4e00\u90e8\u5206\uff0c\u4f46\u662f\u901a\u8fc7\u51c6\u6807\u51c6\u5e93\uff08\u5373 SRFI-158\uff09\u4e2d\u7684 make-coroutine-generator \u51fd\u6570\uff0c\u524d\u9762\u8ba8\u8bba\u7684 squared-ints \u751f\u6210\u5668\u53ef\u4ee5\u5728 Scheme \u4e2d\u7f16\u5199\u4e3a\uff1a\uff08\u5b9a\u4e49 squared- ints ;;; squared-ints \u662f\u4e00\u4e2a\u51fd\u6570 (lambda)\uff0c\u5b83\u751f\u6210\u4e00\u4e2a\u751f\u6210\u5668 ( lambda() ( make-coroutine-generator ( lambda ( yield) ( let loop (( i 1)) ) ;;; \u5b9a\u4e49\u9012\u5f52\u51fd\u6570\u201c\u5faa\u73af\u201d\u5b83\u589e\u52a0\u4e86 i\uff0c\u4ece 1 ( yield ( * ii)) ( loop ( + i 1)))))))(define g (squared-ints)) \u5f00\u59cb\uff1b;;\u5236\u4f5c\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u5c06\u5176\u8d4b\u503c\u7ed9\u201cg\u201d \u8fd9\u770b\u8d77\u6765\u4e0d\u50cf Python \u4ee3\u7801\u90a3\u4e48\u4f18\u96c5\uff0c\u4f46\u903b\u8f91\u51e0\u4e4e\u76f8\u540c [3]\u3002\u8fd9\u91cc\u7684\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\uff0cScheme \u4e2d\u7684 yield \u4e0d\u662f\u5d4c\u5165\u5230\u89e3\u91ca\u5668\u4e2d\u7684\u4fdd\u7559\u5173\u952e\u5b57\u3002\u76f8\u53cd\uff0c\u4ea7\u751f\u63a7\u5236\u7684\u673a\u5236\u662f\u901a\u8fc7\u64cd\u7eb5\u201c\u5ef6\u7eed\u201d\u6765\u5b9e\u73b0\u7684\u2014\u2014\u8fd9\u662f\u8bed\u8a00\u7684\u57fa\u672c\u6784\u5efa\u5757\uff0c\u8868\u793a\u5f85\u6267\u884c\u7684\u8ba1\u7b97\u6b65\u9aa4\u3002\u4e8b\u5b9e\u4e0a\uff0cmake-coroutine-generator \u53ea\u662f\u4e00\u4e2a\u7531\u5927\u7ea6 10 \u884c\u4ee3\u7801\u7ec4\u6210\u7684\u5e38\u89c4 Scheme \u51fd\u6570\u3002\u5b83\u53ef\u4ee5\u7531\u4efb\u4f55\u6709\u80fd\u529b\u7684 Scheme \u7a0b\u5e8f\u5458\u5b9e\u73b0\uff0c\u65e0\u9700\u592a\u591a\u5de5\u4f5c\u3002\u8fd9\u600e\u4e48\u53ef\u80fd\uff1f\u795e\u5947\u7684\u662f\u5728 make-coroutine-generator \u4e2d\u4f7f\u7528 call/cc\uff08\u4ee3\u8868\u201c\u5f53\u524d\u7ee7\u7eed\u8c03\u7528\u201d\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6b64\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\u6d89\u53ca\u7279\u6b8a\u7684\u7c7b\u6216\u5173\u952e\u5b57\u3002 make-coroutine-generator\u3001yield \u548c g \u90fd\u53ea\u4e0d\u8fc7\u662f\u5e38\u89c4\u51fd\u6570\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u901a\u8fc7\u50cf\u51fd\u6570\u4e00\u6837\u8c03\u7528\u5b83\u6765\u8bf7\u6c42\u4e0b\u4e00\u4e2a\u503c\uff1a\nScheme \u751f\u6210\u5668\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\u8be5\u5e93\u6ca1\u6709\u5f15\u5165\u65b0\u7684\u5b9e\u4f53\u7c7b\uff0c\u56e0\u6b64\u751f\u6210\u5668\u53ef\u4ee5\u4e0e\u8bed\u8a00\u7684\u5176\u4f59\u90e8\u5206\u65e0\u7f1d\u96c6\u6210\u3002\u7b80\u5355\u5730\u8bf4\uff0ccontinuation \u662f\u4e00\u7cfb\u5217\u5f85\u6267\u884c\u7684\u8ba1\u7b97\u6b65\u9aa4\u3002\u4f8b\u5982\uff0c0 + 1 + 2 \u5728 Scheme \u4e2d\u8868\u793a\u4e3a (+ 2 (+ 1 0))\u3002\u4ece0\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u4f1a\u53d1\u751f\u7684\u4e8b\u60c5\u662f\u5c061\u52a0\u5230\u5b83\uff0c\u7136\u540e\u5c062\u52a0\u5230\u7ed3\u679c\u4e2d\u3002\u56e0\u6b64\uff0c\u5728\u6b64\u4e0a\u4e0b\u6587\u4e2d 0 \u7684\u5ef6\u7eed\u662f\u8fd9\u4e24\u4e2a\u52a0\u6cd5\u3002 Scheme \u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\u5ef6\u7eed\u4e0d\u662f\u4e00\u4e2a\u5947\u7279\u7684\u6784\u9020\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8f7b\u677e\u64cd\u4f5c\u7684\u51fd\u6570\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5ef6\u7eed\u5c31\u662f (lambda (x) (+ 2 (+ 1 x)))\u3002\u5b83\u7b49\u4ef7\u4e8e Python \u4e2d\u7684 lambda x: x + 1 + 2\u3002\u5728 Scheme \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u540d\u4e3a call-with-current-continuation\uff08\u6216\u7b80\u79f0 call/cc\uff09\u7684\u51fd\u6570\u6765\u6355\u83b7\u5f53\u524d\u7684 continuation\uff0c\u7136\u540e\u5c06\u5176\u4f20\u9012\u7ed9\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6709\u65f6\u79f0\u4e3a\u63a5\u6536\u5668\u3002\u5927\u591a\u6570\u7f16\u7a0b\u8bed\u8a00\u6ca1\u6709\u8fd9\u4e2a\u7ed3\u6784\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u70b9\u65f6\u95f4\u6765\u9002\u5e94\u5b83\u3002\u8003\u8651\u8fd9\u4e2a\u7b80\u5355\u7684\u63a5\u6536\u5668\uff0c\u5b83\u53ea\u662f\u5c06\u5ef6\u7eed\u5b58\u50a8\u5728\u5168\u5c40\u53d8\u91cf\u201cc\u201d\u4e2d\u3002 (\u5b9a\u4e49 c #f) ;;;\u6700\u521d\uff0c\u5168\u5c40\u53d8\u91cf c \u4e0d\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9\uff08\u5b9a\u4e49 store-continuation ;;; \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 store-continuation ( lambda ( cc) ;;; \u5b83\u63a5\u6536\u4e00\u4e2a continuation ( set! c cc) ;;; \u5c06\u5b83\u5b58\u50a8\u5230\u5168\u5c40\u53d8\u91cf c 0 )) ;;;\u5e76\u8fd4\u56de 0 \u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u6355\u83b7 (+ 2 (+ 1 0)) \u4e2d 0 \u7684\u5ef6\u7eed\uff1a &gt; c ;; c #f \u4e2d\u6ca1\u6709\u5b58\u50a8\u4efb\u4f55\u5185\u5bb9 &gt; ( + 2 ( + 1 ( call/cc store-continuation))) 3 &gt; c # &lt;procedure ( continuation . results1887) &gt;\n(+2 (+ 1 (call/cc store-continuation))) \u7684\u8fd4\u56de\u503c\u5e76\u4e0d\u91cd\u8981\u3002\u91cd\u8981\u7684\u662f\uff0c\u5728call/cc\u8c03\u7528\u4e4b\u540e\uff0cc\u53d8\u91cf\u5b58\u50a8\u4e86\u4e00\u4e2a\u51fd\u6570\uff0c\u5c31\u662f\u6211\u4eec\u6355\u83b7\u7684continuation\uff01\u6211\u4eec\u770b\u4e0d\u5230\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u88ab\u7f16\u8bd1\u4e86\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u9a8c\u8bc1\u5b83\u662f\u6709\u6548\u7684(lambda (x) (+2 (+ 1 x)))\uff0c\u56e0\u4e3a\u5f53\u6211\u4eec\u7528\u4e00\u4e2a\u6570\u5b57\u8c03\u7528c\u65f6\uff0c\u8fd4\u56de\u503c\u662f\u8f93\u5165\u52a0 3\u3002\u8ba9\u6211\u4eec\u4f7f\u7528 call/cc \u505a\u4e00\u4e9b\u6709\u7528\u7684\u4e8b\u60c5\u3002\u6211\u4eec\u7528\u5b83\u6765\u5b9e\u73b0Scheme\u4e2dPython\u51fd\u6570sum_of_squares()\u7684\u903b\u8f91\u3002\u548c\u4ee5\u524d\u4e00\u6837\uff0c\u6211\u4eec\u5728\u5faa\u73af\u4e2d\u8fed\u4ee3\u751f\u6210\u5668\uff0c\u7d2f\u52a0\u603b\u548c\uff0c\u5f53\u603b\u548c\u5927\u4e8e\u67d0\u4e2a\u754c\u9650\u65f6\u505c\u6b62\u3002 (define sum-of-squares ( lambda ( bound) ;;define (sum-of-squares bound) ( call/cc ( lambda ( break) ;; \u5b9a\u4e49\u4e00\u4e2a\u63a5\u6536\u8005\uff1a\u9996\u5148\u6355\u83b7\u5230break ( let (( g ( squared-ints))) ;; \u4f7f\u751f\u6210\u5668 g ( let loop (( s 0)) ;; \u5b9a\u4e49\u9012\u5f52\u51fd\u6570\uff08loop s\uff09\uff0c\u5176\u4e2d s \u662f\u7d2f\u52a0\u503c\uff08 let (( new-s ( + s ( g )))) ;; \u8ba1\u7b97\u65b0\u7684\u7d2f\u52a0\u503c ( if ( &gt; new-s bound) ;; \u5982\u679c\u65b0\u7d2f\u52a0\u503c\u5927\u4e8e bound ( break new-s) ;; \u9000\u51fa\u5faa\u73af (loop new-s))) )))))));;\u5426\u5219\uff0c\u4f7f\u7528\u65b0\u7684\u7d2f\u79ef\u503c\u7ee7\u7eed\u5faa\u73af &gt; (sum-of-squares 100) 140 \u5728\u5e73\u65b9\u548c\u51fd\u6570\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\u4e4b\u524d\uff0c\u6211\u4f7f\u7528 call/cc \u6765\u6355\u83b7\u5ef6\u7eed\uff0c\u5e76\u5c06\u5176\u5206\u914d\u7ed9\u53d8\u91cf break\u3002\u8bf7\u6ce8\u610f\uff0c\u5728 Scheme \u7684\u8bed\u6cd5\u4e2d\uff0c\u8fd9\u662f\u51fd\u6570\u7684\u6700\u540e\u4e00\u6b65\u3002\u56e0\u6b64\uff0c\u65e0\u8bba\u5728\u4f55\u5904\u8c03\u7528\uff0c\u8c03\u7528break\u90fd\u4f1a\u7acb\u5373\u5b58\u5728\u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570\u3002\u5728\u8fd9\u4e2a\u7b80\u5355\u7684\u793a\u4f8b\u4e2d\uff0c\u8fd9\u4f3c\u4e4e\u5e76\u4e0d\u592a\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u8fd9\u610f\u5473\u7740\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u5927\u578b\u4e14\u6df1\u5ea6\u5d4c\u5957\u7684\u6570\u636e\u7ed3\u6784\uff08\u4f8b\u5982\uff0c\u6811\u6216\u56fe\uff09\uff0c\u60a8\u53ef\u4ee5\u4f18\u96c5\u5730\u8fdb\u884c\u7f16\u7a0b\u9012\u5f52\uff0c\u4f46\u80fd\u591f\u5728\u6ee1\u8db3\u67d0\u4e9b\u6761\u4ef6\u65f6\u7acb\u5373\u653e\u5f03\u9012\u5f52\u3002\u8fd9\u53ef\u4ee5\u5927\u5927\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u8ba1\u7b97\u3002\u6709\u4eba\u5c06 call/cc \u79f0\u4e3a\u51fd\u6570\u5f0f\u8bed\u8a00\u7684 GOTO \u8bed\u53e5\uff0c\u4f46\u66f4\u597d\u7684\u8868\u5f81\u662f\u5b83\u662f\u7a0b\u5e8f\u5458\u521b\u5efa\u6838\u5fc3\u8bed\u8a00\u4e2d\u4e0d\u5b58\u5728\u7684\u65b0\u63a7\u5236\u7ed3\u6784\u7684\u901a\u7528\u673a\u5236\u3002\u4f7f\u7528 call/cc\uff0c\u53ef\u4ee5\u6784\u5efa\u6240\u6709\u5f62\u5f0f\u7684\u63a7\u5236\uff0c\u5305\u62ec\u5f02\u5e38\u3001\u56de\u6eaf\u548c\u534f\u7a0b\u3002\u7531\u4e8e\u4e0d\u6d89\u53ca\u9b54\u6cd5\uff0c\u5982\u679c\u60a8\u4e0d\u559c\u6b22\u5b83\u4eec\u7684\u884c\u4e3a\u65b9\u5f0f\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u8fd9\u4e9b\u7ed3\u6784\u7684\u81ea\u5b9a\u4e49\u7248\u672c\u3002\u8fd8\u53ef\u4ee5\u53d1\u660e\u7279\u5b9a\u4e8e\u95ee\u9898\u57df\u7684\u65b0\u578b\u63a7\u5236\u7ed3\u6784\u3002\u4f8b\u5982\uff0c\u5728 Web \u7f16\u7a0b\u4e2d\uff0ccontinuation \u5df2\u88ab\u7528\u4e8e\u63a7\u5236\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u7684\u903b\u8f91\uff08\u8bf7\u53c2\u9605\u6b64\u5904\uff09\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u7f16\u5199\u4e86\u4e0a\u9762\u7684\u7a0b\u5e8f\u6765\u53cd\u6620 Python \u4ee3\u7801\u7684\u903b\u8f91\u3002\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728\u4e0d\u4f7f\u7528\u9012\u5f52\u6216\u8c03\u7528/cc \u7684\u60c5\u51b5\u4e0b\u5b9e\u73b0\u76f8\u540c\u7684\u76ee\u6807\u3002\u4f8b\u5982\uff0c\u5728\u4e0b\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4f7f\u7528\u751f\u6210\u5668\u5e93\u521b\u5efa\u4e86\u7b2c\u4e8c\u4e2a\u65e0\u9650\u751f\u6210\u5668 acc \u6765\u7d2f\u52a0 gen \u751f\u6210\u5668\u4e2d\u5143\u7d20\u7684\u603b\u548c\uff0c\u7136\u540e\u4f7f\u7528 generator-find \u51fd\u6570\u83b7\u53d6 acc \u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e\u8fb9\u754c\u3002\u8fd9\u662f\u94fe\u63a5\u8fed\u4ee3\u5668\u4ee5\u5236\u4f5c\u66f4\u590d\u6742\u8fed\u4ee3\u5668\u7684\u793a\u4f8b\u3002 ( \u5b9a\u4e49\u5e73\u65b9\u548c ( lambda ( bound) ( let* (( gen ( squared-ints) ) ) ;; \u521b\u5efa\u4e00\u4e2a\u751f\u6210\u5668 gen ( acc ( make-unfold-generator ;; \u521b\u5efa\u7b2c\u4e8c\u4e2a\u751f\u6210\u5668 acc ( lambda ( s) #f) ;; \u65e0\u505c\u6b62\u6761\u4ef6\uff0c\u4f7f acc \u6210\u4e3a\u65e0\u9650\u751f\u6210\u5668 ( lambda ( s) s) ( lambda ( s) ( + s ( gen))) ;; \u4ece gen 0))) \u7d2f\u79ef\u4e0b\u4e00\u4e2a\u503c ;; \u4ece0 ( generator-find ;; \u5728 acc \u751f\u6210\u5668\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e bound \u7684\u503c ( lambda ( s) ( &gt; s bound)) acc))))\n\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 call/cc \u6765\u4e2d\u65ad\u8fed\u4ee3\u751f\u6210\u5668\u7684\u5faa\u73af\u3002\u8ba9\u6211\u4eec\u7528 call/cc \u6765\u5b9e\u73b0\u751f\u6210\u5668\u672c\u8eab\u3002\u4e3a\u4e86\u5b9e\u73b0\u5b83\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\u6765\u8ba9\u6b65\u2014\u2014\u5728\u51fd\u6570\u6b63\u5e38\u7ed3\u675f\u4e4b\u524d\u9000\u51fa\u5b83\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u5b83\u662f\u5982\u4f55\u5b8c\u6210\u7684\u3002\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u673a\u5236\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u4ea7\u751f\u540e\u6062\u590d\u51fd\u6570\u3002\u4e0d\u96be\u770b\u51fa\u6211\u4eec\u9700\u8981\u4e24\u4e2a\u5ef6\u7eed\u3002 (define squared-ints ( lambda () ( let* (( break #f) ;;; \u5c06\u5b58\u50a8\u4e00\u4e2a\u7ee7\u7eed\u4ee5\u4e2d\u65ad\u51fd\u6570 ( resume #f) ;;; \u5c06\u5b58\u50a8\u4e00\u4e2a\u7ee7\u7eed\u4ee5\u5728\u5c48\u670d\u540e\u6062\u590d ( yield ; ) ;; \u5b9a\u4e49\u51fd\u6570 &quot;yield&quot; ( lambda ( value) ( call/cc ;;; \u6355\u83b7\u5f53\u524d\u7684\u5ef6\u7eed ( lambda ( r) ( set!resume r) ;;; \u5c06\u5b83\u5b58\u50a8\u5728 &quot;resume&quot; ( break value))) ))) ;;; \u548c break out ( lambda () ;;; \u5c06\u8fd4\u56de\u4e00\u4e2a\u51fd\u6570\uff08\u4e00\u4e2a\u95ed\u5305\uff09\uff08 call/cc ;;; \u6355\u83b7\u5f53\u524d\u7684\u5ef6\u7eed...\uff08 lambda ( cc) ( set!break cc) ; ;; ...\u5e76\u5c06\u5176\u5b58\u50a8\u5728\u201cbreak\u201d\u4e2d\uff08\u5982\u679c resume ;;; \u5982\u679c\u6b64\u751f\u6210\u5668\u4e4b\u524d\u5df2\u88ab\u8c03\u7528...\uff08 resume &#39;()) ;;; ... \u6062\u590d\u5b83\uff08 let loop (( i 1) ) ;;; \u5426\u5219\uff0c\u5faa\u73af i=1, 2, 3, 4... ( yield ( * ii)) ;;; \u4ea7\u751f i \u7684\u5e73\u65b9 ( loop ( + i 1))))))))) )(define g ( squared-ints)) &gt; ( g) 1 &gt; ( g) 4 &gt; ( g) 9 \u6211\u4ece Vasilij Schneidermann \u5bf9 SRFI-158 \u5e93\u7684\u5b9e\u73b0\u4e2d\u7a0d\u5fae\u4fee\u6539\u4e86\u8fd9\u6bb5\u4ee3\u7801\uff08\u5b8c\u6574\u6e90\u4ee3\u7801\u89c1\u8fd9\u91cc\uff09\u3002\u5bf9\u4e8e\u90a3\u4e9b\u4e0d\u662f\u4e13\u4e1a Scheme \u7a0b\u5e8f\u5458\u7684\u4eba\u6765\u8bf4\uff0c\u8fd9\u770b\u8d77\u6765\u6709\u70b9\u5413\u4eba\uff0c\u4f46\u903b\u8f91\u975e\u5e38\u7b80\u5355\uff1a\u5bf9\u4e8e\u5faa\u73af\u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57 i\uff0c\u9996\u5148\u5c06\u8ba1\u7b97\u7684\u672a\u6765\u5b58\u50a8\u5230\u4e00\u4e2a\u540d\u4e3a resume \u7684\u5185\u90e8\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u5c06 break \u7ee7\u7eed\u8c03\u7528\u4e3a\u6211\u4eec\u4e4b\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u5b58\u5728\u7684\u529f\u80fd\u3002\u4e0b\u4e00\u6b21\u8c03\u7528\u751f\u6210\u5668\u65f6\uff0c\u8c03\u7528 resume continuation\uff0c\u5b83\u5c06\u524d\u8fdb\u5230\u5faa\u73af\u4e2d\u7684\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002\u8bf7\u6ce8\u610f\uff0c\u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u5c06\u751f\u6210\u5668\u4f5c\u4e3a\u6ca1\u6709\u53c2\u6570\u7684\u51fd\u6570\u8fd4\u56de\u3002\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u5411\u51fd\u6570\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u8fed\u4ee3\u5f00\u59cb\u540e\u5c06\u6d88\u606f\u53d1\u9001\u5230\u751f\u6210\u5668\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u4ee3\u7801\uff0c\u4f7f\u5f97 (g &#39;reset) \u5c06\u91cd\u7f6e\u8fed\u4ee3\u3002\u7531\u4e8e\u751f\u6210\u5668\u53ea\u662f Scheme \u4e2d\u7684\u51fd\u6570\uff0c\u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u5e38\u89c4\u51fd\u6570\u8c03\u7528\u81ea\u7136\u5730\u4e0e\u751f\u6210\u5668\u8fdb\u884c\u901a\u4fe1\u3002\u5728 Python \u4e2d\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5411\u751f\u6210\u5668\u53d1\u9001\u6d88\u606f\uff0c\u4f46\u5b83\u9700\u8981\u4f7f\u7528 yield \u5173\u952e\u5b57\u7684\u7279\u6b8a\u8bed\u6cd5\u548c\u751f\u6210\u5668\u7c7b\u7684 .send() \u65b9\u6cd5\u3002\u540c\u6837\uff0c\u5728 Python \u4e2d\u4f7f\u7528\u751f\u6210\u5668\u662f\u60ef\u7528\u7684\uff0c\u5728\u5e55\u540e\u53d1\u751f\u4e86\u5f88\u591a\u4e8b\u60c5\u3002\u6211\u672c\u6765\u6253\u7b97\u8be6\u7ec6\u4ecb\u7ecd\u534f\u7a0b\uff0c\u56e0\u4e3a Python \u7684\u751f\u6210\u5668\u6559\u7a0b\u548c Scheme \u7684\u5ef6\u7eed\u6559\u7a0b\u90fd\u503e\u5411\u4e8e\u4ee5\u534f\u7a0b\u7ed3\u5c3e\uff08\u591a\u6709\u8da3\uff01\uff09\u3002\u4f46\u662f\uff0c\u6211\u51b3\u5b9a\u53cd\u5bf9\u8fd9\u4e2a\u60f3\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4f1a\u4f7f\u8ba8\u8bba\u8131\u8f68\u5230\u4e00\u4e2a\u4e0d\u540c\u7684\u9886\u57df\u3002\u4f46\u662f\u975e\u5e38\u7b80\u5355\uff0cPython \u4e2d\u7684 yield \u901a\u5e38\u88ab\u8868\u793a\u4e3a\u7f16\u5199\u751f\u6210\u5668\u7684\u7b80\u5316\u65b9\u6cd5\uff0c\u4f46\u5b83\u6240\u505a\u7684\uff0c\u6682\u505c\u51fd\u6570\u7684\u6267\u884c\u5e76\u5177\u6709\u6062\u590d\u5b83\u7684\u80fd\u529b\uff0c\u662f\u4e00\u4e2a\u6bd4\u8fed\u4ee3\u66f4\u901a\u7528\u7684\u6982\u5ff5\u3002\u5b83\u4f7f\u4e00\u4e2a\u4f8b\u7a0b\u53ef\u4ee5\u505a\u5c11\u91cf\u5de5\u4f5c\uff0c\u7136\u540e\u5c06\u63a7\u5236\u6743\u4ea4\u7ed9\u53e6\u4e00\u4e2a\u4f8b\u7a0b\uff0c\u4ece\u800c\u5141\u8bb8\u5b83\u4eec\u5e76\u53d1\u8fd0\u884c\u3002\u8fd9\u4f7f\u6570\u636e\u80fd\u591f\u7531\u4f8b\u7a0b\u7f51\u7edc\u5904\u7406\uff0c\u800c\u4e0d\u5fc5\u5c06\u5176\u7ec4\u7ec7\u4e3a\u7ebf\u6027\u7ba1\u9053\u3002\u5b83\u6bd4\u8fed\u4ee3\u66f4\u7075\u6d3b\u3001\u66f4\u5f3a\u5927\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u867d\u7136\u751f\u6210\u5668\u7528\u4e8e\u8fed\u4ee3\uff0c\u4f46\u4ea7\u91cf\u4e0d\u4e00\u5b9a\u662f\u3002 Scheme\u4e2d\u7684\u6545\u4e8b\u8981\u7b80\u5355\u5f97\u591a\u3002\u7531\u4e8e Scheme \u4e2d\u7684\u5b9e\u4f53\u4e0d\u662f\u6309\u7c7b\u5206\u5c42\u7ec4\u7ec7\u7684\uff0c\u56e0\u6b64\u60a8\u4e0d\u4f1a\u6709\u4f7f\u7528\u4e3b\u8981\u4e3a\u8fed\u4ee3\u800c\u8bbe\u8ba1\u7684\u7c7b\u6765\u5b9e\u73b0\u534f\u7a0b\u7684\u5c34\u5c2c\u3002\u5728 Scheme \u4e2d\uff0c\u534f\u7a0b\u548c\u751f\u6210\u5668\u53ea\u662f\u4ee5\u4e0d\u540c\u65b9\u5f0f\u64cd\u4f5c\u5ef6\u7eed\u7684\u666e\u901a\u51fd\u6570\u3002\n\u6211\u5199\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u662f\u4e3a\u4e86\u603b\u7ed3\u6211\u5b66\u5230\u7684\u65b0\u4e1c\u897f\u3002\u6211\u4e5f\u628a\u5b83\u4f5c\u4e3a\u827a\u672f\u6b23\u8d4f\u7684\u7ec3\u4e60\u3002\u5f88\u591a\u4eba\u559c\u6b22\u8c08\u8bba\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u559c\u6b22\u4e00\u9996\u6b4c\u3001\u4e00\u90e8\u7535\u89c6\u8282\u76ee\u6216\u4e00\u90e8\u5c0f\u8bf4\u3002\u6211\u5e0c\u671b\u770b\u5230\u66f4\u591a\u7684\u6587\u5b57\u6765\u9610\u660e\u4e3a\u4ec0\u4e48\u4e00\u4e2a\u60f3\u6cd5\u662f\u4f18\u96c5\u7684\u3001\u5f3a\u5927\u7684\u6216\u806a\u660e\u7684\u3002 Scheme \u662f\u4e00\u79cd\u6781\u7b80\u4e3b\u4e49\u7684\u4e0d\u5bfb\u5e38\u8bed\u8a00\u3002\u5b83\u7684\u8bbe\u8ba1\u8005\u5e0c\u671b\u5b83\u5177\u6709\u9ad8\u5ea6\u7684\u8868\u73b0\u529b\uff08\u610f\u5473\u7740\u53ef\u4ee5\u7b80\u6d01\u5730\u8868\u8fbe\u590d\u6742\u7684\u903b\u8f91\uff09\uff0c\u540c\u65f6\u53c8\u5c3d\u53ef\u80fd\u7b80\u5355\u3002\u8fd9\u53ea\u80fd\u901a\u8fc7\u5728\u5c11\u6570\u5f3a\u5927\u7684\u60f3\u6cd5\u4e0a\u6784\u5efa\u8bed\u8a00\u6765\u5b9e\u73b0\u3002\u4e00\u4e2a\u5f3a\u5927\u7684\u60f3\u6cd5\u7684\u8303\u56f4\u5e76\u4e0d\u7a84\u3002\u4e00\u4e2a\u5f3a\u5927\u7684\u60f3\u6cd5\u5bf9\u81ea\u5df1\u4fdd\u6301\u771f\u5b9e\uff0c\u4f46\u662f\u5f53\u5b83\u4e0e\u5176\u4ed6\u5f3a\u5927\u7684\u60f3\u6cd5\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u5c31\u4f1a\u51fa\u73b0\u65b0\u7684\u529f\u80fd\u3002\u8fd9\u5c31\u662f\u8868\u73b0\u529b\u7684\u6765\u6e90\u3002\u8868\u8fbe\u8fd9\u79cd\u9b54\u529b\u7684\u4e00\u79cd\u8bd7\u610f\u65b9\u5f0f\uff08\u7531\u4e8e\u7ea6\u7ff0\u9ea6\u5361\u9521\uff09\u662f\u5b83\u51e0\u4e4e\u611f\u89c9\u8bed\u8a00\u662f\u88ab\u53d1\u73b0\u800c\u4e0d\u662f\u88ab\u53d1\u660e\u7684\u3002\u4e00\u65e6\u638c\u63e1\u4e86\u5b83\uff0c\u5c31\u5f88\u96be\u60f3\u8c61\u5982\u4f55\u4ee5\u4efb\u4f55\u5176\u4ed6\u65b9\u5f0f\u8bbe\u8ba1\u4e00\u79cd\u8bed\u8a00\uff0c\u56e0\u4e3a\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u7ec4\u4ef6\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u4f3c\u4e4e\u90fd\u662f\u4e0d\u5b8c\u6574\u7684\u3002\u6211\u663e\u7136\u662f\u8fd9\u79cd\u54f2\u5b66\u7684\u7c89\u4e1d\u3002\u7136\u800c\uff0c\u6211\u5bf9\u5f3a\u5927\u7684\u60f3\u6cd5\u66f4\u96be\u638c\u63e1\u8fd9\u4e00\u4e8b\u5b9e\u5e76\u4e0d\u89c6\u800c\u4e0d\u89c1\u3002\u7eed\u96c6\u5f88\u96be\u7406\u89e3\uff0c\u4e5f\u5f88\u96be\u5199\u3002\u5728\u4e0a\u5b8c\u5927\u5b66\u7f16\u7a0b\u8bfe\u8fd9\u4e48\u591a\u5e74\u540e\uff0c\u6211\u4ecd\u7136\u5728\u8003\u8651\u5ef6\u7eed\u8fd9\u4e00\u4e8b\u5b9e\u5e94\u8be5\u544a\u8bc9\u4f60\u4e00\u4e9b\u5173\u4e8e\u8fbe\u5230\u7eaf\u7cb9 lambda \u542f\u8499\u7684\u5e78\u798f\u72b6\u6001\u6240\u9700\u7684\u5949\u732e\u6c34\u5e73\u3002\u8fd9\u8ba9\u6211\u60f3\u5230\u4e86 Python\u3002\u6b63\u5982\u6211\u4e4b\u524d\u6240\u8bf4\uff0c\u6211\u7684\u6781\u7b80\u4e3b\u4e49\u8005\u88ab\u53d1\u7535\u673a\u80cc\u540e\u9690\u85cf\u7684\u673a\u68b0\u6240\u56f0\u6270\u3002\u4f46\u662f\u4f7f\u7528 yield \u5173\u952e\u5b57\uff0c\u4efb\u4f55\u4eba\u90fd\u53ef\u4ee5\u5728 10 \u5206\u949f\u5185\u5b66\u4e60\u4e60\u8bed\u5e76\u5f00\u59cb\u4f7f\u7528\u751f\u6210\u5668\u3002\u5b83\u53ef\u80fd\u4e0d\u50cf continuation \u90a3\u6837\u5f3a\u5927\uff0c\u4f46\u5b83\u8db3\u591f\u5f3a\u5927\uff0c\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e\u5faa\u73af\u878d\u5408\uff0c\u4f7f\u590d\u6742\u7684\u5faa\u73af\u66f4\u5bb9\u6613\u7f16\u5199\u3002\u8fd9\u662f\u4e00\u4e2a\u7f8e\u4e3d\u7684\u60f3\u6cd5\u3002\u6700\u540e\uff0c\u6211\u4e0d\u5f97\u4e0d\u56de\u5230Scheme\u3002 Python \u751f\u6210\u5668\u7684\u7f8e\u5999\u4e4b\u5904\u5728\u4e8e\uff0cyield \u662f\u5f3a\u5927\u601d\u60f3\u7684\u6700\u5c0f\u63a5\u53e3\u3002\u60a8\u53ef\u80fd\u5bf9 Scheme \u7684\u5ef6\u7eed\u548c\u5b8f\u6709\u540c\u6837\u7684\u770b\u6cd5\u3002\u901a\u8fc7 call/cc \u548cdefine-macro\uff0c\u7a0b\u5e8f\u5458\u53ef\u4ee5\u8bbf\u95ee\u89e3\u91ca\u5668\u7684\u673a\u5236\uff0c\u4ece\u800c\u6d88\u9664\u4e86\u7f16\u7a0b\u548c\u5143\u7f16\u7a0b\u4e4b\u95f4\u7684\u754c\u9650\u3002\u5173\u4e8e\u8fd9\u4e2a\u4e3b\u9898\u5df2\u7ecf\u5199\u4e86\u5f88\u591a\uff0c\u6240\u4ee5\u6211\u4e0d\u4f1a\u5728\u8fd9\u91cc\u91cd\u590d\uff08\u53c2\u89c1\u8fd9\u91cc\uff09\uff0c\u4f46\u89e3\u6790\uff08\u53ef\u901a\u8fc7\u5b8f\u8bbf\u95ee\uff09\u548c\u6267\u884c\u63a7\u5236\uff08\u53ef\u901a\u8fc7 call/cc \u8bbf\u95ee\uff09\u57fa\u672c\u4e0a\u662f\u89e3\u91ca\u5668\u6240\u505a\u7684\u3002\u6211\u5bf9\u89e3\u91ca\u5668\u7684 API \u5982\u6b64\u4e4b\u5c11\u611f\u5230\u60ca\u8bb6\u3002\u90a3\u4e2a\u597d\u6f02\u4eae\u3002 [1] \u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u4f7f\u7528 yield \u5e76\u4e0d\u662f\u5728 Python \u4e2d\u6784\u5efa\u751f\u6210\u5668\u7684\u552f\u4e00\u65b9\u6cd5\u3002\u8bf7\u67e5\u9605\u6709\u5173\u751f\u6210\u5668\u7684\u4efb\u4f55\u4e00\u822c\u6559\u7a0b\u3002 [2] \u66f4\u51c6\u786e\u5730\u8bf4\uff0cyield \u5728\u51fd\u6570\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u751f\u6210\u5668\uff0c\u5b83\u5728\u5b9a\u4e49\u4e2d\u51fa\u73b0 yield \u7684\u5730\u65b9\u6682\u505c\u6267\u884c\u3002\u8fd9\u4e2a\u7279\u5f81\u66f4\u96be\u9605\u8bfb\uff0c\u6240\u4ee5\u6211\u4f1a\u5199\u5f97\u597d\u50cf yield \u5b9e\u9645\u4e0a\u505a\u4e86\u5c48\u670d\u3002\u8bed\u6cd5\u7684\u76ee\u7684\u662f\u521b\u9020\u8fd9\u79cd\u9519\u89c9\u3002 [3] \u8bf7\u6ce8\u610f\uff0c\u9012\u5f52\u662f Scheme \u7f16\u5199\u5faa\u73af\u7684\u9996\u9009\u65b9\u5f0f\u3002\u521b\u5efa\u751f\u6210\u5668\u4e0d\u662f\u5fc5\u9700\u7684\u3002\u7531\u4e8e\u8fd9\u662f\u5c3e\u9012\u5f52\u7684\u4e00\u79cd\u5f62\u5f0f\uff0cScheme \u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u5c06\u9012\u5f52\u8f6c\u6362\u4e3a\u5faa\u73af\u3002", "note_en": "In this post, I\u2019ll summarize what I\u2019ve learned from an attempt to gain a deeper understanding of two important concepts in programming: Python\u2019s  generators and Scheme\u2019s  continuation. The aim is not to teach Python or Scheme programming. Rather, what I want to do is to demonstrate that generators are special cases of a much more powerful construct - continuations. Continuations allow programmers to invent new control structures, and it is the foundation upon which iterators, generators, coroutines, and many other useful constructs can be built. I have found it very useful to understand how generators work from the deeper and broader perspective of continuations.\n Continuation is well-established in programming language theory (it was introduced in the 70\u2019s), but its use has not become mainstream. However, I suspect that in the age of cloud computing and big data, where lazy evaluation is becoming increasingly important, continuation will become more prominent, like many other concepts in functional programming. I think it\u2019s worthy of your time to reserve a place for this concept in your peripheral vision.\n For those who are not familiar with Scheme:  Scheme is a relatively modern dialect of one of the oldest programming languages: LISP. Scheme is a minimalist but highly expressive language, which makes it an ideal vehicle for experimenting with advanced concepts in programming. This is why Scheme is often used as a tool for teaching computer science, and as a playground for programming language researchers. Continuation is not unique to Scheme, but Scheme is the first language that treats continuations as first-class entities, thus making them easily manipulatable. It is the most natural venue for exploring continuations.\n  In Python, generators are primarily used to make complex loops easier to write and to maintain. That\u2019s why they are special cases of iterators. In a traditional language like c, a  for loop looks like this:\n  The first line specifies the sequence of numbers to iterate over with. The second line is what we want to do with those numbers. With generators in Python, we can write this type of loops like the example given below. In it, we use the  squared_ints() generator to produce a sequence of squared integers one by one, and then use the  sum_of_squares() function to accumulate them until the sum is greater than a bound specified by the programmer:\n def  squared_ints():  &#39;&#39;&#39; Infinite generator  Return i^2 for i = 1, 2, ...  &#39;&#39;&#39; i  =  1  while True:  yield i *i  # it is this yield that makes this function a generator i  +=  1 def  sum_of_squares(bound):  &#39;&#39;&#39; Return the smallest sum of squared integers greater than the bound  &#39;&#39;&#39; g  = squared_ints() s  =  0  for i  in g:  # iterate over generator g s  += i  # accumulate the sum s  if s &gt;bound:  # exit the loop if s is larger than n  return s\n The definition of  squared-ints() looks like a regular function, but the presence of the  yield keyword makes it a function that produces generators [1]. Using the  next() function on a generator  g, we can see that the numbers are generated one by one. Generators work nicely with loops in Python. An example can be seen in  sum_of_squares(), where we iterate over a generator with a  for loop.\n  Let\u2019s review what we have accomplished so far. In c-style loops, the generation and the consumption of the sequence are tightly coupled. In the Python code above, however, they are decomposed into two independent entities. Because generators can be build on other generators, you can further decompose a complex generator into a chain of simpler generators. This makes complex loops more modular and reusable, and therefore easier to write and maintain. Another improvement is that the generator code does not set a limit on the length of the sequence. It is theoretically infinite. The actual length of the sequence generated is determined by the code that consumes the sequence. This means that the generator code can be as general as possible, leaving computational efficiency to the consumer. This \u201claziness\u201d is highly desirable in situations where generating the next item in the sequence is computationally expensive.\n All of this is made possible by one single keyword  yield! It\u2019s pretty amazing, isn\u2019t it? What happens is that every time  yield is called, the state of the function is frozen, and the flow of control is yielded to the caller, along with the generated value [2]. The next time the generator is evoked, the control flow is returned to the frozen state of the generator.\n What a simple and elegant syntax for a complex behavior! It\u2019s like magic. However, there is a part of me (perhaps the theorist in me) that is uncomfortable with magical behaviors in programming languages. How does  yield create a generator (i.e., an object of the generator class) from a function definition? Why isn\u2019t this magic found in other places in the language? Why can\u2019t you call  yield outside a function? In addition, generators provide some facilities for making coroutines - a topic in concurrent programming. What does currency have anything to do with iteration? Since all these behaviors appears to be associated with  yield in an  ad hoc way, I tend to write generators idiomatically, following a memorized recipe without thinking about the heavy machinery behind the curtain. I always have a nagging feeling that there is a bigger picture that I don\u2019t see.\n This was when I realized that I had read about similar ideas in a different context before. When I learned to program in college, I had a copy of  Scheme and the Art of Programming by Springer and Friedman. There was a chapter on the mysterious concept of \u201ccontinuation\u201d, where all of this stuff was discussed. I skipped the entire chapter because I couldn\u2019t understand what continuations were good for. Maybe it\u2019s time to revisit this topic.\n  Before we move on to continuations, rest assured that Python-style generators are available in Scheme. They are not part of the language itself, but with the  make-coroutine-generator function in a quasi-standard library (i.e.,  SRFI-158), the  squared-ints generator discussed previously can be written in Scheme as:\n ( define  squared-ints  ;;; squared-ints is a function (lambda) that makes a generator ( lambda () ( make-coroutine-generator ( lambda ( yield) ( let  loop (( i  1))  ;;; define recursive function &#34;loop&#34; which increases i, starting from 1 \t ( yield ( *  i  i))\t ( loop ( +  i  1)))))))( define  g ( squared-ints))  ;;; make a generator, assign it to &#34;g&#34;\n This doesn\u2019t look as elegant as the Python code, but logic is almost identical [3]. What is different here is that  yield in Scheme is not a reserved keyword baked into the interpreter. Rather, the mechanism for yielding control is achieved by manipulating \u201ccontinuations\u201d - a fundamental building block of the language that represents computational steps that are pending execution. In fact,  make-coroutine-generator is just a regular Scheme function consisting of ~10 lines of code. It can be implemented by any competent Scheme programmer without too much work. How is it possible? The magic is the use of  call/cc (which stands for \u201ccall with current continuation\u201d) in  make-coroutine-generator. Note that nothing in this code refers to a special class or keyword.  make-coroutine-generator,  yield, and  g are all nothing more than regular functions. This is why we ask for the next value by calling it like a function:\n  The beauty of Scheme generators is that the library does not introduce a new class of entities, so generators can integrate seamlessly with the rest of the language.\n  Simply put, a continuation is a series of computational steps that are pending execution. For example,  0 + 1 + 2 is expressed in Scheme as  (+ 2 (+ 1 0)). From the perspective of  0, what will happen is that 1 will be added to it, and then 2 will be added to the result. The continuation of  0 in this context is therefore these two additions. The beauty of Scheme is that a continuation is not an exotic construct. Rather, it is just a function that can be easily manipulated by the programmer. In this example, the continuation is nothing other than  (lambda (x) (+ 2 (+ 1 x))). It is equivalent to  lambda x: x + 1 + 2 in Python.\n In Scheme, we can use a function named  call-with-current-continuation (or  call/cc for short) to capture the current continuation, and then pass it to a different function, which is sometimes called the  receiver. Most programming languages don\u2019t have this construct, so it will take a little bit of time to get used to it.\n Consider this simple receiver, which simply stores the continuation in a global variable \u2018c\u2019.\n ( define  c  #f)  ;;; initially, global variable c stores nothing( define  store-continuation  ;;; define a function store-continuation ( lambda ( cc)  ;;; which receives a continuation ( set!  c  cc)  ;;; store it to the global variable c  0))  ;;; and returns 0\n We can now use it to capture the continuation of  0 in  (+ 2 (+ 1 0)):\n &gt;  c  ;; nothing is stored in c #f  &gt; ( +  2 ( +  1 ( call/cc  store-continuation))) 3 &gt;  c # &lt;procedure ( continuation  .  results1887) &gt;\n The returned value of  (+2 (+ 1 (call/cc store-continuation))) is not important. The important part is that after the  call/cc call, the  c variable stores a function, which is the continuation we captured! We can\u2019t see the code, because it is compiled, but we can verify that it is effectively  (lambda (x) (+2 (+ 1 x))), because when we call  c with a number, the returned value is the input plus 3.\n   Let\u2019s use  call/cc to do something useful. Let\u2019s use it to implement the logic of the Python function  sum_of_squares() in Scheme. As before, we iterate over the generator in a loop, accumulate the sum, and stop when the sum is bigger than a certain bound.\n ( define  sum-of-squares ( lambda ( bound)  ;; define (sum-of-squares bound) ( call/cc ( lambda ( break)  ;; define a reciever: first capture the continuation into break\t ( let (( g ( squared-ints)))  ;; make the generator g\t ( let  loop (( s  0))  ;; define the recursive function (loop s), where s is the accumulated value\t ( let (( new-s ( +  s ( g))))  ;; compute the new accumulated value\t ( if ( &gt;  new-s  bound)  ;; if the new accumulated value is larger than bound\t\t ( break  new-s)  ;; exit the loop\t\t ( loop  new-s)))))))))  ;; otherwise, continue the loop with the new accumulated value &gt; ( sum-of-squares  100) 140\n Before the  sum-of-square function does anything, I use  call/cc to capture the continuation, and assign it to the variable  break. Notice that in the syntax of Scheme, this is the last step of the function. Therefore, calling  break will immediately exist the function with a returned value, no matter where it is called. This doesn\u2019t seem to be too impressive in this simple example, but what is means is that if you have to work with a big and deeply nested data structure (for example, a tree or a graph), you can program with the elegance of recursion, but with the ability to abandon the recursion as soon as some condition is met. This can dramatically reduce unnecessary computation.\n Some people call  call/cc the  GOTO statement of functional languages, but a better characterization is that it is a general mechanism for programmers to created new control structures that don\u2019t exist in the core language. With  call/cc, all forms of control, including exceptions, backtracking, and coroutines can be built. Since no magic is involved, you can create your customized versions of these structures if you don\u2019t like how they behave. Novel control structures that are specific to the problem domain can also be invented. For example, in web programming, continuations have been used to control the logic of server applications (see  here).\n Note that I wrote the program above to mirror the logic of the Python code. There are better ways to achieve the same without recursion or  call/cc. For example, in the example below, I used the generator library to create a second infinite generator  acc to accumulate the sum of elements in the  gen generator, and then use the  generator-find function to get the first value in  acc that is larger than  bound. This is an example of chaining iterators to make more complex iterators.\n ( define  sum-of-squares\t( lambda ( bound)\t\t( let* (( gen ( squared-ints))  ;; create a generator gen\t\t ( acc ( make-unfold-generator  ;; create a second generator acc\t\t ( lambda ( s)  #f)  ;; no stop condition, make acc an infinite generator\t\t ( lambda ( s)  s) \t\t ( lambda ( s) ( +  s ( gen)))  ;; accumulate the next value from gen\t\t  0)))  ;; accumulate from 0\t\t\t\t\t ( generator-find  ;; find the first value bigger than bound in the acc generator ( lambda ( s) ( &gt;  s  bound))  acc))))\n  In the previous section, we use  call/cc to break from a loop that iterates over a generator. Let\u2019s implement the generator itself with  call/cc. To make it happen, we need a mechanism to yield - to exit a function before it ends normally. We have already seen how it is done. Now, we need a mechanism that resumes the function after it has yielded. It\u2019s not hard to see that we need two continuations.\n ( define  squared-ints ( lambda () ( let* (( break  #f)  ;;; will store a continuation to break out of the function\t ( resume  #f)  ;;; will store a continuation to resume after yielding\t ( yield  ;;; define the function &#34;yield&#34;\t ( lambda ( value)\t ( call/cc   ;;; capture the current continuation\t ( lambda ( r)\t\t ( set!  resume  r)  ;;; store it in &#34;resume&#34;\t\t ( break  value))))))  ;;; and break out  ( lambda ()  ;;; will return a function (a closure)\t ( call/cc   ;;; capture the current continuation...\t ( lambda ( cc)\t ( set!  break  cc)  ;;; ...and store it in &#34;break&#34;\t ( if  resume  ;;; if this generator has been called before...\t ( resume  &#39;())  ;;; ... resume it\t ( let  loop (( i  1))  ;;; otherwise, loop through i=1, 2, 3, 4...\t\t ( yield ( *  i  i))  ;;; yield the square of i\t\t ( loop ( +  i  1))))))))))( define  g ( squared-ints)) &gt; ( g) 1 &gt; ( g) 4 &gt; ( g) 9\n I modified this code slightly from Vasilij Schneidermann\u2019s implementation of the SRFI-158 library (see  here for the full source code). It looks a bit intimidating to those who are not expert Scheme programmers, but the logic is very straightforward: for every number  i in the loop, first store the future of the computation into an internal variable called  resume, and then call the  break continuation as we have done before to exist the function. The next time the generator is called, call the  resume continuation, which will progress to the next number in the loop.\n Note that in the code above, we return a generator as a function with no argument. We can easily add an argument to the function, so that messages can be sent to the generator after the iteration has started. For example, we can modify the code such that  (g &#39;reset) will reset the iteration. Since generators are just functions in Scheme, communicating with generators can be done naturally with regular function calls. In Python, you can also send messages to generators, but it requires a special syntax of the  yield keyword, and the  .send() method of the generator class. Again, working with generators in Python is idiomatic, with lots of things happening behind the curtain.\n  I had planned to go into details about coroutines, because Python\u2019s tutorials on generators and Scheme\u2019s tutorials on continuations both tend to end with coroutines (How interesting!). However, I have decided against the idea because it will derail the discussion into a different territory.\n But very briefly,  yield in Python is often presented as a simplified method for writing generators, but what it does, suspending the execution of a function with the ability to resume it, is a much general concept than iteration. It enable a routine to do a small amount of work, and then pass the control to another routine, thus allowing them to run concurrently. This enables data to be processed by a network of routines, which do not have to be organized as a linear pipeline. It is more flexible and powerful than iteration. In other words, although generators are used for iterations,  yield doesn\u2019t have to be.\n The story is much simpler in Scheme. Since entities in Scheme are not organized hierarchically as classes, you don\u2019t have the awkwardness of implementing coroutines with a class that is designed primarily for iterations. In Scheme, coroutines and generators are just normal functions that manipulate continuations in different ways.\n  I wrote this post primarily to summarize something new that I have learned. I also did it as an exercise in art appreciation. A lot of people like to talk about why they love a song, a TV show, or a novel. I would like to see more words spent on articulating why an idea is elegant, powerful, or clever.\n Scheme is an unusual language in its minimalism. Its designers want it to be highly expressive (meaning that complex logic can be expressed succinctly), and yet as simple as possible. This can only be achieved by building the language on a small number of powerful ideas. A powerful idea is not narrow in scope. A powerful idea stays true to itself, but when it is used in combination with other powerful ideas, new functionalities emerge. This is where the expressiveness comes from. A poetic way to express this magic (due to  John McCarthy) is that it almost feel like the language was discovered rather than invented. Once you get it, it\u2019s hard to imagine how a language can be designed in any other way, because every component seems to be incomplete without the others.\n I am obviously a fan of this philosophy. However, I am not blind to the fact that powerful ideas are much harder to master. Continuations are hard to understand and hard to write. The fact that I am still thinking about continuations so many years after my college programming class should tell you something about the level of devotion needed to reach the blissful state of pure lambda enlightenment. This brings me to Python. As I said before, the minimalist in me is bothered by the hidden machinery behind generators. But with the  yield keyword, anybody can learn the idioms and start to use generators in 10 minutes. It is perhaps not as powerful an idea as continuations, but it is powerful enough that it blends in nicely with loops, making complex loops dramatically easier to write. It\u2019s a beautiful idea.\n In the end, I feel compelled to circle back to Scheme. What is beautiful about Python\u2019s generators is that  yield is a minimal interface to a powerful idea. You might say the same about Scheme\u2019s continuations and macros. With  call/cc and  define-macro, the machinery of the interpreter become accessible to the programmer, thus erasing the boundary between programming and metaprogramming. A lot has been written on this topic so I won\u2019t repeat it here (see  here), but parsing (accessible via macros) and execution control (accessible via  call/cc) are basically what the interpreter does. I am amazed by how minimal the API to the interpreter is. That is beautiful.\n  [1] Using  yield in a function definition is not the only way in which generators can be constructed in Python. Please consult any general tutorial on generators.\n [2] More accurately,  yield in a function creates a generator, which suspends its execution at the point where  yield appears in the definition. This characterization is harder to read, so I will write as if  yield actually does the yielding. The intention of the syntax is to create this illusion.\n [3] Note that recursion is Scheme\u2019s preferred way for writing loops. It isn\u2019t necessary for creating generators. Since this is a form of tail recursion, the Scheme interpreter automatically translates the recursion into a loop.", "posttime": "2021-08-03 02:59:57", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u521b\u610f,programming,\u7f16\u7a0b,\u751f\u6210\u5668,ideas", "title": "\u7f16\u7a0b\u4e2d\u7684\u7edd\u5999\u521b\u610f\uff1a\u751f\u6210\u5668\u548c\u5ef6\u7eed", "title_en": "Beautiful ideas in programming: generators and continuations", "transed": 1, "url": "https://www.hhyu.org/posts/generator_and_continuation/", "via": "", "real_tags": ["\u521b\u610f", "\u7f16\u7a0b", "\u751f\u6210\u5668", "ideas"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071253, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5173\u4e8e\u5b58\u5728\u548c\u5176\u4ed6\u4e8b\u7269\u7684\u91cd\u8981\u6027\u7684\u610f\u89c1\uff0c\u4e3b\u8981\u662f\u6211\u81ea\u5df1\u7684\u610f\u89c1\u3002 \u201c\u98ce\u683c\u662f\u4e00\u7ec4\u4e0d\u540c\u7684\u3001\u91cd\u590d\u7684\u5fae\u89c2\u51b3\u5b9a\uff0c\u6bcf\u6b21\u51fa\u73b0\u65f6\u90fd\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u505a\u51fa\uff0c\u5373\u4f7f\u4e0a\u4e0b\u6587\u53ef\u80fd\u4e0d\u540c\u3002[...]\u6211\u76f8\u4fe1\u4e00\u81f4\u6027\u662f\u6240\u6709\u8d28\u91cf\u539f\u5219\u7684\u57fa\u7840\u3002\u201d \u2014\u2014\u5f17\u96f7\u5fb7\u91cc\u514b\u00b7P\u00b7\u5e03\u9c81\u514b\u65af\uff0c\u8bbe\u8ba1\u7684\u8bbe\u8ba1", "note_en": "Opinions, mostly my own, on the importance of being and other things.           &#34;Style is a set of differentrepeated microdecisions, each made the same waywhenever it arises, even though the context may bedifferent. [...] I believe that consistency underliesall principles of quality.&#34; -- Frederick P.Brooks,  The Design of Design", "posttime": "2021-08-03 02:59:48", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f16\u5199,consistent,\u539f\u5219", "title": "\u7f16\u5199\u4e00\u81f4\u7684\u5de5\u5177 (2019)", "title_en": "Writing Consistent Tools (2019)", "transed": 1, "url": "https://www.netmeister.org/blog/consistent-tools.html", "via": "", "real_tags": ["\u7f16\u5199", "\u539f\u5219"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1071252, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u300a\u536b\u62a5\u300b\u7684\u4e00\u540d\u526f\u65b0\u95fb\u5236\u4f5c\u7f16\u8f91\u5411\u540c\u4e8b\u8bb2\u8ff0\u4e86\u51e0\u5341\u5e74\u6765\u526a\u5207\u548c\u66f4\u6b63\u526f\u672c\u7684\u6f14\u53d8 \u81ea\u6211\u52a0\u5165\u300a\u536b\u62a5\u300b\u4ee5\u6765\u7684 21 \u5e74\u91cc\uff0c\u4e92\u8054\u7f51\u53ef\u80fd\u5df2\u7ecf\u5f7b\u5e95\u6539\u53d8\u4e86\u5a92\u4f53\uff0c\u4f46\u6211\u4f5c\u4e3a\u526f\u7f16\u8f91\u7684\u89d2\u8272\u57fa\u672c\u4fdd\u6301\u4e0d\u53d8.\u6211\u4eec\u68c0\u67e5\u4e8b\u5b9e\uff0c\u64b0\u5199\u6807\u9898\u5e76\u5c06\u6545\u4e8b\u526a\u88c1\u5230\u5408\u9002\u7684\u957f\u5ea6\uff0c\u5e76\u5728\u5c06\u5176\u79fb\u81f3\u4e0b\u4e00\u9636\u6bb5\u4e4b\u524d\u8fdb\u884c\u6700\u540e\u7684\u62fc\u5199\u68c0\u67e5\u3002\u4f46\u76f4\u5230\u4e0a\u4e16\u7eaa\u672b\uff0c\u5b50\u7f16\u8f91\u770b\u8d77\u6765\u5b8c\u5168\u4e0d\u540c\u3002 Chris Dodd \u4e8e 1965 \u5e74\u5728\u4e00\u5bb6\u9152\u5427\u63a5\u53d7\u201c\u91c7\u8bbf\u201d\uff08\u4ed6\u4e0d\u77e5\u9053\u662f\u8be5\u559d\u9152\u8fd8\u662f\u6212\u9152\uff0c\u8fd8\u662f\u4e70\u4e00\u676f\uff09\u540e\uff0c\u4e8e 1965 \u5e74\u5728\u66fc\u5f7b\u65af\u7279\u5f00\u59cb\u5de5\u4f5c\uff0c\u800c Barry Johnson \u548c Jay Sivell \u52a0\u5165\u4e861986 \u5e74\u5728\u6cd5\u7075\u987f\u8def\u7684\u4f26\u6566\u529e\u4e8b\u5904\u3002\u7136\u540e\u5728\u4e0b\u5348\u7684\u4e0d\u540c\u65f6\u95f4\u5f00\u59cb\u8f6e\u73ed\uff0c\u6f5c\u8247\uff08\u6b63\u5982\u4ed6\u4eec\u6240\u8bf4\u7684\u90a3\u6837\uff09\u4eab\u53d7\u7740\u60a0\u95f2\u7684\u5f00\u59cb\u3002 \u201c\u4eba\u4eec\u8fc7\u53bb\u5e38\u5e38\u63a5\u53d7\u56fd\u9645\u8c61\u68cb\u548c\u4e66\u7c4d\uff0c\u6216\u8005\u505a\u586b\u5b57\u6e38\u620f\u3002\u4f60\u53ef\u4ee5\u4e00\u65e0\u6240\u6709\u5730\u5750\u4e0a\u51e0\u4e2a\u5c0f\u65f6\uff0c\u201d12 \u6708\u9000\u4f11\u7684\u7ea6\u7ff0\u900a\u8bf4\u3002\u968f\u7740\u65b0\u95fb\u8f6c\u79fb\u7684\u8fdb\u5c55\uff0c\u8ba2\u9605\u8005\u5728\u7eb8\u4e0a\u52fe\u52d2\u51fa\u9875\u9762\u8bbe\u8ba1\u5e76\u7b49\u5f85\u6545\u4e8b\u6216\u201c\u526f\u672c\u201d\uff0c\u8fd9\u4e9b\u6545\u4e8b\u6216\u201c\u526f\u672c\u201d\u4ee5\u7f16\u53f7\u9875\u9762\u7684\u5f62\u5f0f\u51fa\u73b0\u5728\u94c1\u4e1d\u7bee\u4e2d\uff0c\u6bcf\u4e2a\u9875\u9762\u5305\u542b\u4e00\u4e24\u4e2a\u6bb5\u843d\u3002\u6f5c\u8247\u88ab\u8d4b\u4e88\u6545\u4e8b\u957f\u5ea6\uff0c\u4ee5\u4e00\u5217\u7c7b\u578b\u7684\u82f1\u5bf8\u4e3a\u5355\u4f4d\uff0c\u5e76\u4e14\u5fc5\u987b\u4f30\u8ba1\u8981\u524a\u51cf\u591a\u5c11\u5b57\u3002\u4e00\u65e6\u6545\u4e8b\u7684\u957f\u5ea6\u5927\u81f4\u5408\u9002\uff0c\u5b83\u5c31\u4f1a\u88ab\u9001\u5230\u4e00\u4e2a\u4fee\u8ba2\u7248\uff0c\u88ab\u8ba4\u4e3a\u9002\u5408\u51fa\u7248\uff0c\u7136\u540e\u88ab\u653e\u5728\u53e6\u4e00\u4e2a\u7bee\u5b50\u91cc\uff0c\u7531\u4fe1\u4f7f\u6536\u96c6\uff0c\u5e76\u901a\u8fc7\u6c14\u52a8\u7ba1\u9001\u5230\u5730\u4e0b\u5ba4\u7684\u5408\u6210\u5ba4\u3002\u7531\u4e8e\u8fd9\u9879\u4efb\u52a1\u7531\u4e0d\u540c\u7684\u5de5\u4f1a\u63a7\u5236\uff0c\u56e0\u6b64\u7981\u6b62\u6f5c\u6c34\u5458\u63a5\u89e6\u7ba1\u5b50\uff1b\u4e09\u4eba\u90fd\u6df1\u60c5\u5730\u8bb0\u5f97\uff0c\u7279\u7a3f\u7f16\u8f91\u548c\u540e\u6765\u7684\u7f16\u8f91\u5f7c\u5f97\u666e\u96f7\u65af\u987f\u662f\u552f\u4e00\u6562\u6253\u7834\u8fd9\u6761\u89c4\u5219\u7684\u8bb0\u8005\u3002\u5199\u6807\u9898\u2014\u2014\u901a\u5e38\u662f\u5728\u7f16\u8f91\u6545\u4e8b\u540e\u4e24\u4e09\u4e2a\u5c0f\u65f6\u2014\u2014\u4e5f\u6d89\u53ca\u8ba1\u7b97\u3002 Subs \u5f97\u5230\u4e86\u4e00\u4e2a\u6807\u9898\u5927\u5c0f\u2014\u2014\u6bd4\u5982\u4e09\u884c 36 \u70b9\u7c7b\u578b\u7684\u4e24\u5217\u2014\u2014\u5e76\u4f7f\u7528\u8868\u683c\u6765\u8bc4\u4f30\u9002\u5408\u591a\u5c11\u5b57\u7b26\u3002\u5bbd\u5b57\u6bcd\u5982 M \u8ba1\u4e3a 1.5 \u4e2a\u5b57\u7b26\uff0c\u7a7a\u683c\u8ba1\u4e3a\u4e00\u534a\u3002 \u201c\u5982\u679c\u5b83\u5931\u8d25\u4e86\u534a\u4e2a\u5b57\u7b26\uff0c\u60a8\u53ef\u80fd\u4f1a\u5c06\u5176\u53d1\u9001\u51fa\u53bb\u5e76\u5e0c\u671b\u4e00\u5207\u987a\u5229\uff0c\u201d\u7ea6\u7ff0\u900a\u8bf4\u3002 \u201c\u5982\u679c\u5b83\u4e0d\u8d77\u4f5c\u7528\uff0c\u5e76\u4e14\u5408\u6210 [\u5408\u6210\u5e08] \u611f\u89c9\u6709\u5e2e\u52a9\uff0c\u4ed6\u4eec\u53ef\u4ee5\u7a0d\u5fae\u6324\u538b\u4e00\u4e0b\u3002\u201d\u9664\u975e\u4f60\u7684\u6807\u9898\u56e0\u4e3a\u5b83\u5931\u8d25\u800c\u88ab\u7528\u7ba1\u5b50\u53d1\u56de\u7ed9\u4f60\uff0c\u5426\u5219\u8fd9\u901a\u5e38\u662f\u4f60\u76f4\u5230\u65e9\u4e0a\u770b\u5230\u4f60\u7684\u5de5\u4f5c\u7684\u6700\u540e\u4e00\u6b21\u3002 \u201c\u5f53\u6211\u4eec\u5f00\u59cb\u65f6\uff0c\u4fee\u8ba2\u7248\u6709\u70b9\u5413\u4eba\uff0c\u201d\u7ea6\u7ff0\u900a\u8bf4\u3002 \u201c\u4ed6\u5728\u6218\u4e89\u4e2d\u66fe\u5728\u8f70\u70b8\u673a\u53f8\u4ee4\u90e8\u5de5\u4f5c\uff0c\u867d\u7136\u5f88\u53cb\u5584\uff0c\u4f46\u76f8\u5f53\u7a81\u7136\uff0c\u4ed6\u4f1a\u5750\u5728\u90a3\u91cc\u62bd\u70df\u6597\u3002\u4ed6\u4f1a\u77aa\u7740\u65c5\u884c\u4e2d\u7684\u95f9\u949f\uff0c\u4e5f\u76ef\u7740\u90a3\u4efd\u590d\u5370\u4ef6\uff0c\u968f\u7740\u591c\u5e55\u964d\u4e34\uff0c\u4ed6\u62bd\u7740\u70df\u6597\u8d8a\u6765\u8d8a\u5389\u5bb3\u3002\u5982\u679c\u4ed6\u4e0d\u559c\u6b22\u5934\u6761\u65b0\u95fb\uff0c\u4ed6\u4f1a\u6beb\u4e0d\u72b9\u8c6b\u5730\u628a\u5b83\u6254\u56de\u7ed9\u4f60\u3002\u201d\u4e8b\u5b9e\u6838\u67e5\u53ef\u80fd\u5f88\u8d39\u529b\u3002\u5728\u6ca1\u6709\u641c\u7d22\u5f15\u64ce\u7684\u60c5\u51b5\u4e0b\uff0c\u62e5\u6709\u5e7f\u6cdb\u7684\u5e38\u8bc6\u662f\u81f3\u5173\u91cd\u8981\u7684\uff0c\u7ecf\u5e38\u4f7f\u7528\u684c\u9762\u5730\u540d\u5f55\u548c\u540d\u4eba\u5f55\u4e5f\u662f\u5982\u6b64\u3002\u5728\u529e\u516c\u65f6\u95f4\uff0csubs \u53ef\u4ee5\u6253\u7535\u8bdd\u7ed9\u56fe\u4e66\u9986\u63d0\u95ee\uff0c\u901a\u5e38\u5728\u5927\u7ea6\u534a\u5c0f\u65f6\u5185\u5f97\u5230\u7b54\u590d\u3002\u4f46\u662f\uff0c\u7ea6\u7ff0\u900a\u8bf4\uff0c\u665a\u4e0a\u4f60\u5fc5\u987b\u81ea\u5df1\u53bb\u56fe\u4e66\u9986\u3002 \u201c\u5b83\u5305\u542b\u4e00\u4e9b\u8fc7\u65f6\u7684\u6559\u79d1\u4e66\u548c\u526a\u62a5\u7684\u67b6\u5b50\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u4e86\u89e3\u90a3\u4e9b\u526a\u62a5\u7684\u4eba\u7684\u601d\u60f3\u662f\u5982\u4f55\u8fd0\u4f5c\u7684\uff0c\u4ee5\u53ca\u4ed6\u4eec\u53ef\u80fd\u5c06\u8fd9\u4e9b\u4e1c\u897f\u5f52\u6863\u5728\u4ec0\u4e48\u4e4b\u4e0b\u3002\u201d\u4e00\u4e9b\u8bb0\u8005\uff0c\u5c31\u50cf\u73b0\u5728\u4e00\u6837\uff0c\u9700\u8981\u6bd4\u5176\u4ed6\u4eba\u66f4\u591a\u7684\u68c0\u67e5\uff1a\u591a\u5fb7\u56de\u5fc6\u8d77\u4e00\u4e2a\u4eba\u5728\u4e00\u4e2a\u6545\u4e8b\u4e2d\u7528 13 \u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u62fc\u5199\u4e86\u8bd7\u4eba\u53f6\u592b\u6839\u5c3c\u00b7\u53f6\u592b\u56fe\u7533\u79d1\u7684\u540d\u5b57\u3002\n\u4e0b\u5348 5 \u70b9\uff0c\u4e50\u961f\u7684\u4e00\u540d\u9ad8\u7ea7\u6210\u5458\u5c06\u4e0b\u5230\u5730\u4e0b\u5ba4\u2014\u2014\u4e00\u4e2a\u5145\u6ee1Linotype \u673a\u5668\u7684\u5927\u6559\u5802\u822c\u7684\u7a7a\u95f4\uff0c\u90a3\u65f6\u4e50\u961f\u5c06\u5f00\u59cb\u5de5\u4f5c\u3002\u8fd9\u4e9b\u6545\u4e8b\u88ab\u5206\u53d1\u7ed9 Linotype \u64cd\u4f5c\u5458\uff0c\u4ed6\u4eec\u5c06\u5b83\u4eec\u4ee5\u5355\u884c\u65b9\u5f0f\u653e\u5165\u7194\u878d\u91d1\u5c5e\u4e2d\uff0c\u79f0\u4e3a slugs\u3002 Comps \u4f1a\u5728\u8349\u56fe\u5e03\u5c40\u7684\u6307\u5bfc\u4e0b\uff0c\u4f7f\u7528\u51b7\u5374\u7684\u91d1\u5c5e\u7c7b\u578b\u7ec4\u88c5\u9875\u9762\uff0c\u7136\u540e\u5c06\u5176\u56fa\u5b9a\u5728\u6846\u67b6\u4e2d\uff1b\u4e22\u5f03\u5b83\u662f\u4e00\u573a\u707e\u96be\uff0c\u88ab\u79f0\u4e3a\u6253\u5370\u673a\u7684\u9985\u997c\u3002\u5bf9\u77f3\u5b50\u6709\u4e25\u683c\u7684\u89c4\u5b9a\u3002\u7ec4\u5408\uff08\u603b\u662f\u7537\u6027\uff09\u7ad9\u5728\u4e00\u4fa7\uff0c\u800c\u6f5c\u8247\u5219\u5728\u5bf9\u9762\u3002\u90a3\u6761\u7ebf\u4e0d\u80fd\u8d8a\u8fc7\u3002\u4f34\u594f\u4f1a\u544a\u8bc9\u526f\u6b4c\u4e00\u4e2a\u6545\u4e8b\u7ed3\u675f\u4e86\u591a\u5c11\u884c\uff0c\u526f\u6b4c\u5728\u7eb8\u4e0a\u526a\u4e0b\u5e76\u628a\u5b83\u4eec\u4ea4\u8fd8\u7ed9\u4f34\u594f\uff0c\u540e\u8005\u53d6\u51fa\u4e86\u91d1\u5c5e\u5b57\u4f53\u4e2d\u7684\u7b49\u4ef7\u90e8\u5206\u3002\u5728\u622a\u6b62\u65e5\u671f\u524d\uff0c\u6f5c\u8247\u5fc5\u987b\u80fd\u591f\u9605\u8bfb\u6b63\u9762\u548c\u80cc\u9762\u98a0\u5012\u653e\u7f6e\u7684\u9886\u5148\u7269\u8d28\u3002 Sivell \u8bf4\uff1a\u201c\u8fd9\u662f\u4e00\u4e2a\u8d1f\u8d23\u4efb\u7684\u8f6c\u53d8\uff0c\u6211\u5f88\u9ad8\u5174\u80fd\u505a\u5230\uff0c\u5c3d\u7ba1\u8fd9\u5f88\u8f9b\u82e6\u3002\u6211\u662f\u4e00\u540d\u975e\u5e38\u5e74\u8f7b\u7684\u5973\u8bb0\u8005\uff0c\u5979\u4eec\u53ef\u80fd\u6bd4\u6211\u66f4\u4e86\u89e3\u6211\u7684\u4e1a\u52a1\uff0c\u200b\u200b\u4f46\u5979\u4eec\u5f80\u5f80\u5bf9\u7537\u6027\u66f4\u6709\u5e2e\u52a9\u3002\u201d\u591a\u5fb7\u56de\u5fc6\u8bf4\uff0c\u5c3d\u7ba1\u6392\u7248\u5ba4\u4e2d\u7684\u5927\u591a\u6570\u4e92\u52a8\u90fd\u662f\u5584\u610f\u7684\uff0c\u4f46\u8fd9\u662f\u201c\u4e00\u79cd\u56f0\u96be\u7684\u5173\u7cfb\uff1a\u4f60\u6b63\u5728 [\u4e3a\u4f60\u7684\u7f16\u8f91] \u4e0e\u4e00\u4e2a\u4e3a\u4e3b\u6253\u5370\u673a\u5de5\u4f5c\u7684\u6392\u7248\u4e00\u8d77\u5728\u4e00\u4e2a\u9875\u9762\u4e0a\u5de5\u4f5c\u201d\u3002\u8ba1\u7b97\u673a\u9010\u6e10\u88ab\u5f15\u5165\uff0c\u6700\u7ec8\u53ea\u6709\u65b0\u95fb\u9875\u9762\u4f7f\u7528\u4e86\u70ed\u91d1\u5c5e\uff0c\u76f4\u5230 1987 \u5e74\u5b83\u4e5f\u88ab\u55a7\u95f9\u5730\u201c\u6572\u54cd\u201d\uff08\u65b0\u95fb\u4e1a\u7684\u4f20\u7edf\u544a\u522b\uff09\u3002\u591a\u6837\u6027\u4e0d\u662f\u4f18\u5148\u4e8b\u9879\u3002\u5f53 Sivell \u5230\u8fbe\u65f6\uff0c\u5979\u662f\u4e24\u540d\u5973\u6027\u5bb6\u5ead\u65b0\u95fb\u526f\u64ad\u4e4b\u4e00\uff0c\u800c\u300a\u536b\u62a5\u300b\u662f\u5982\u6b64\u7537\u6027\u5316\u7684\u73af\u5883\uff0c\u4ee5\u81f3\u4e8e\u5979\u548c\u5979\u7684\u540c\u4e8b Celia Locks \u88ab\u9080\u8bf7\u5230\u5973\u6027\u7f16\u8f91 Mary Stott \u5bb6\u5171\u8fdb\u5348\u9910\uff0c\u8ba8\u8bba\u5979\u4eec\u7684\u7ecf\u5386\u3002\u73b0\u5728\uff0c\u5728\u6027\u522b\u3001\u9636\u7ea7\u3001\u79cd\u65cf\u3001\u5e74\u9f84\u548c\u6027\u53d6\u5411\u65b9\u9762\u7684\u591a\u6837\u6027\u5f97\u5230\u6539\u5584\uff0c\u4f53\u73b0\u5728\u66f4\u5468\u5230\u7684\u8bed\u8a00\u4e2d\u3002 \u201c\u6211\u4eec\u66f4\u6e05\u695a\u5730\u53cd\u6620\u4e86\u8bfb\u8005\u8bcd\u6c47\u7684\u53d8\u5316\uff0c\u8fc7\u53bb\u4f5c\u4e3a\u5de5\u4f5c\u4e00\u90e8\u5206\u7684\u975e\u5e38\u767d\u4eba\u7537\u6027\u7684\u8bcd\u6c47\u5df2\u7ecf\u6d88\u5931\uff0c\u201d\u897f\u7ef4\u5c14\u8bf4\uff0c\u4ed6\u4ecd\u7136\u4e3a\u8be5\u62a5\u505a\u81ea\u7531\u8f6e\u73ed\u3002 \u201c\u6211\u4eec\u6709\u4e00\u4e2a\u4e0d\u65ad\u53d7\u5230\u5ba1\u67e5\u548c\u6311\u6218\u7684\u98ce\u683c\u6307\u5357\u3002\u5993\u5973\u6216\u6027\u5de5\u4f5c\u8005\uff0c\u8bf8\u5982\u2018\u4ed6\u4eec\u2019\u4e4b\u7c7b\u7684\u4ee3\u8bcd\u7684\u4f7f\u7528\u2014\u2014\u8fd9\u5c31\u662f\u8bed\u8a00\u7684\u6f14\u53d8\u65b9\u5f0f\uff0c\u8fd9\u638c\u63e1\u5728\u6f5c\u8247\u624b\u4e2d\u3002\u201d\u6211\u5f53\u65f6\u6700\u5927\u7684\u53d8\u5316\u662f\u5bf9\u7f51\u7ad9\u7684\u5173\u6ce8\u3002\u4ece\u9644\u5c5e\u7684\u526f\u4e1a\uff0c\u4e3b\u8981\u662f\u521d\u7ea7\u5458\u5de5\uff0c\u5b83\u5df2\u7ecf\u6210\u4e3a\u4e00\u4e2a\u5168\u5929\u5019\u7684\u5168\u7403\u4e1a\u52a1\uff0c\u5728\u4f26\u6566\u3001\u6089\u5c3c\u548c\u7ebd\u7ea6\u8bbe\u6709\u5206\u90e8\u3002\n\u5982\u4eca\uff0c\u6211\u4eec\u5728\u4f26\u6566\u7684\u8bb8\u591a\u4eba\u901a\u8fc7\u7f51\u7edc\u548c\u5370\u5237\u54c1\u5de5\u4f5c\u3002\u6709\u4e9b\u4eba\u66f4\u559c\u6b22\u6bcf\u5929\u5728\u665a\u4e0a 9 \u70b9\u622a\u6b62\u65e5\u671f\u524d\u8d76\u65f6\u95f4\u3002\u5176\u4ed6\u4eba\u559c\u6b22\u7f51\u7edc\u5b57\u5e55\u7684\u7075\u6d3b\u6027\uff0c\u4ee5\u53ca\u200b\u200b\u5b83\u7684\u901f\u5ea6\u548c\u8303\u56f4\u3002\u65e0\u8bba\u6211\u4eec\u5728\u54ea\u5f20\u684c\u5b50\u4e0a\u5de5\u4f5c\uff0c\u65e0\u8bba\u6211\u4eec\u6765\u81ea\u54ea\u4e2a\u65f6\u671f\uff0c\u6211\u4eec\u90fd\u53ef\u4ee5\u56de\u5fc6\u8d77\u521b\u4f5c\u4e00\u4e2a\u91cd\u5927\u6545\u4e8b\u65f6\u7684\u7535\u51fb\u6c14\u6c1b\u2014\u2014\u4ece\u6c34\u95e8\u4e8b\u4ef6\uff08\u591a\u5fb7\uff09\uff0c\u5230\u6234\u5b89\u5a1c\uff08\u7ea6\u7ff0\u900a\uff09\u4e4b\u6b7b\uff0c\u6ce2\u8482\u7565\u5931\u53bb\u5ea7\u4f4d\u7684\u90a3\u4e2a\u665a\u4e0a\uff08 Sivell\uff09\u6216\u82f1\u56fd\u6295\u7968\u652f\u6301\u8131\u6b27\uff08\u6211\uff09\u3002\u65b0\u6280\u672f\u4e8e 1980 \u5e74\u4ee3\u4e2d\u671f\u9996\u6b21\u5370\u5237\uff0c\u4ee5\u56db\u8282 AA \u7535\u6c60\u4f9b\u7535\u7684 Tandys \u5f62\u5f0f\u51fa\u73b0\uff0c\u53ef\u8bb0\u5fc6\u7ea6 1,000 \u4e2a\u5355\u8bcd\u3002\u8ba1\u7b97\u673a\u9010\u6e10\u88ab\u5f15\u5165\uff0c\u6700\u7ec8\u53ea\u6709\u65b0\u95fb\u9875\u9762\u4f7f\u7528\u4e86\u70ed\u91d1\u5c5e\uff0c\u76f4\u5230 1987 \u5e74\u5b83\u4e5f\u88ab\u5608\u6742\u5730\u201c\u7830\u201d\u5730\u4e00\u58f0\u201c\u6572\u54cd\u201d\uff08\u65b0\u95fb\u4e1a\u7684\u4f20\u7edf\u544a\u522b\uff09\u3002\u897f\u7ef4\u5c14\u8bf4\u3002 \u201c\u5f53\u65b0\u6280\u672f\u51fa\u73b0\u65f6\uff0c\u8fd9\u662f\u4e00\u4e2a\u66ff\u8865\u7684\u8270\u96be\u65f6\u671f\uff0c\u201d\u591a\u5fb7\u627f\u8ba4\u9053\u3002\u90a3\u4e48\uff0c\u5728\u6240\u6709\u6280\u672f\u51fa\u73b0\u4e4b\u524d\u7684\u65e5\u5b50\u662f\u201c\u9002\u5f53\u201d\u66ff\u6362\u7684\u65f6\u4ee3\u5417\uff1f\u4e0d\uff0c\u897f\u7ef4\u5c14\u8bf4\uff1a\u201c\u4f60\u73b0\u5728\u53ef\u4ee5\u4e13\u6ce8\u4e8e\u6587\u5b57\uff1b\u4f60\u4e0d\u662f\u5728\u8ba1\u7b97\u4e00\u4e2a\u5b57\u6bcd\u7684\u5bbd\u5ea6\u3002\u201d\u672c\u6587\u4e8e 2021 \u5e74 8 \u6708 2 \u65e5\u8fdb\u884c\u4e86\u4fee\u8ba2\uff0c\u4ee5\u6f84\u6e05\u6709\u5173\u77f3\u5934\u5b50/\u8865\u507f\u7f16\u8f91\u8fc7\u7a0b\u4e2d\u9875\u9762\u65b9\u5411\u7684\u8be6\u7ec6\u4fe1\u606f\u3002", "note_en": "A deputy news production editor at the Guardian speaks to colleagues about how cutting and correcting copy has evolved over decades\n   T he internet may have revolutionised the media in the 21 years since I joined the Guardian, but my role as a subeditor has stayed essentially the same. We check facts, write headlines and cut stories to the right length, with a final spellcheck before moving it to its next stage.\n But until late last century, subediting looked completely different. Chris Dodd started work on the features desk, then based in Manchester, in 1965, after an \u201cinterview\u201d in a pub (he didn\u2019t know whether to drink or abstain, or buy a round), while Barry Johnson and Jay Sivell joined the London office in Farringdon Road in 1986. Shifts then started at various points in the afternoon, and subs (as they are called) enjoyed a leisurely start. \u201cPeople used to take in chess sets and books, or do the crossword. You could sit for hours with nothing,\u201d says Johnson, who retired in December.\n  As news shifts progressed, subs sketched out page designs on paper and awaited the stories, or \u201ccopy\u201d, which arrived in a wire basket as numbered pages, each containing one or two paragraphs. Subs were given story lengths, measured as inches down a single column of type, and had to estimate how many words to cut. Once the story was approximately the right length, it went to a revise sub to be deemed fit for publication before being placed in another basket to be collected by a messenger and sent by pneumatic tube to the compositing room in the basement. Subs were banned from touching the tubes as this task was controlled by a different union; all three fondly remember that Peter Preston, features editor and later editor, was the only journalist who dared break this rule.\n Writing headlines \u2013 often two or three hours after editing the story \u2013 also involved calculations. Subs got a headline size \u2013 say three lines of 36-point type over two columns \u2013 and used a table to assess how many characters would fit. Wide letters such as M counted as 1.5 characters and spaces counted as a half. \u201cIf it bust by half a character, you might send it down and hope for the best,\u201d says Johnson. \u201cIf it didn\u2019t work and the comps [compositors] were feeling helpful, they could squeeze it a bit.\u201d Unless your headline was sent back to you in a tube because it bust, that was usually the last you saw of your work until the morning.\n  \u201cWhen we started, the revise sub was slightly frightening,\u201d says Johnson. \u201cHe\u2019d been in Bomber Command in the war and was rather abrupt, though kindly, and he\u2019d sit there smoking his pipe. He\u2019d glare at his travelling alarm clock and glare at the copy, puffing at his pipe more as the evening went on. If he didn\u2019t like a headline, he\u2019d literally throw it back at you.\u201d\n Fact-checking could be laborious. Without search engines, having vast general knowledge was crucial, as was frequent use of the desk\u2019s gazetteer and Who\u2019s Who. In office hours, subs could call the library with questions, with answers typically provided in about half an hour. But, says Johnson, in the evening you had to go up to the library yourself. \u201cIt consisted of some obsolete textbooks and shelves of cuttings, so you needed a feel for how the minds worked of the people who took the cuttings and what they might have filed things under.\u201d Some reporters, as now, needed more checking than others: Dodd recalls one spelling the name of the poet Yevgeny Yevtushenko 13 different ways in one story.\n A senior member of the team known as the stone sub would go down to the basement \u2013 a cathedral-like space filled with Linotype machines \u2013 at 5pm, when the comps would start work. The stories were handed out to Linotype operators, who set them in molten metal in single lines, known as slugs. Comps would assemble the page, guided by the sketched layout, using the cooled metal type, before it was secured in a frame; dropping it was a disaster known as printer\u2019s pie.\n There were strict rules for the stone sub. The comp (always male) stood on one side, and the sub was opposite. That line could not be crossed. The comp would tell the sub how many lines a story was over, and the sub made cuts on paper and handed them back to the comp, who took out the equivalent bits in the metal type. On deadline, subs had to be able to read the lead over-matter laid out on the side upside down as well as back to front.\n  Sivell says: \u201cIt was a responsible shift and I felt pleased to do it, even though it was hard work. I was a very young female journalist and they did know my business better than I did, probably, but they tended to be more helpful to the men.\u201d\n Dodd recalls that although most interactions in the comp room were good-natured, it was \u201ca difficult relationship: you\u2019re working [for your editor] on a page with a comp who\u2019s working for the master printer\u201d.\n Computers were introduced gradually and eventually only the news pages used hot metal, until it too was noisily &#39;banged out&#39; (a traditional farewell in journalism) in 1987\n Diversity was not a priority. When Sivell arrived she was one of two female home news subs, and the Guardian was such a masculine environment that she and her colleague Celia Locks were invited to lunch at the home of Mary Stott, the women\u2019s editor, to discuss their experiences. Improved diversity now, in terms of gender, class, ethnicity, age and sexuality, is reflected in more thoughtful language. \u201cWe are more aware of reflecting changes in vocabulary for the readership, and that the very white male vocabulary that used to be part of the job has gone,\u201d says Sivell, who still does freelance shifts for the paper. \u201cWe have a style guide that is constantly being reviewed and challenged. Prostitute or sex worker, the use of pronouns such as \u2018they\u2019 \u2013 this is how language evolves, and that is in the hands of the subs.\u201d\n The biggest change in my time has been the focus on the website. From a sideline in an annex, with mostly junior staff, it has become a round-the-clock global operation, with subs in London, Sydney and New York.\n These days, many of us in London work across web and print. Some prefer print\u2019s daily rush for the 9pm deadline. Others like the flexibility of web subbing, as well as its speed and reach. Whichever desk we work on, and whichever period we come from, we can all recall the electric atmosphere when working on a big breaking story \u2013 from Watergate (Dodd), to the death of Diana (Johnson), the night Portillo lost his seat (Sivell) or the UK voting for Brexit (me).\n New technology first arrived for print in the mid-1980s, in the form of Tandys powered by four AA batteries and with a memory of about 1,000 words. Computers were introduced gradually, and eventually only the news pages used hot metal, until it too was noisily \u201c banged out\u201d (a traditional farewell in journalism) in 1987.\n The moment when journalists were on machines dealing with type themselves was a huge step, Sivell says. \u201cIt was a ropey period for subbing when new tech came in,\u201d admits Dodd.\n So were the days before all the technology the era of \u201cproper\u201d subbing? No, says Sivell: \u201cYou can focus on the words now; you\u2019re not fiddling about counting how wide a letter is.\u201d\n  This article was amended on 2 August 2021 to clarify details about the orientation of the page during the stone sub/comp editing process.", "posttime": "2021-08-03 02:59:31", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u827a\u672f,\u9605\u8bfb,art,\u7f16\u8f91", "title": "\u526f\u7f16\u8f91\u4e0d\u65ad\u53d8\u5316\u7684\u827a\u672f\uff1a\u201c\u4f60\u5fc5\u987b\u98a0\u5012\u9605\u8bfb\u7c7b\u578b\u201d", "title_en": "The changing art of the subeditor: \u2018You had to read the type upside down\u2019", "transed": 1, "url": "https://www.theguardian.com/media/2021/aug/02/the-changing-art-of-the-subeditor-you-had-to-read-the-type-upside-down", "via": "", "real_tags": ["\u827a\u672f", "\u9605\u8bfb", "art", "\u7f16\u8f91"]}, {"category": "", "categoryclass": "", "imagename": "d8e87601f88cfc839f0381123eadb1fd.jpg", "infoid": 1071251, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "7 \u6708 30 \u65e5\uff08\u73b0\u5728\u7684\u53ef\u518d\u751f\u80fd\u6e90\uff09\u2014\u2014\u5c3d\u7ba1\u5927\u6d41\u884c\uff0c\u7f8e\u56fd\u5728 2020 \u5e74\u5b89\u88c5\u4e86\u521b\u7eaa\u5f55\u7684 26 \u5409\u74e6\u6e05\u6d01\u80fd\u6e90\u5de5\u5382\uff0c\u8fbe\u5230\u8d85\u8fc7 170 \u5409\u74e6\u7684\u98ce\u80fd\u3001\u516c\u7528\u4e8b\u4e1a\u592a\u9633\u80fd\u548c\u7535\u6c60\u5b58\u50a8\u7535\u529b\u5bb9\u91cf\uff0c\u6839\u636e\u7b2c\u4e00\u4efd\u6e05\u6d01\u80fd\u6e90\u5e74\u5ea6\u62a5\u544a\u7f8e\u56fd\u6e05\u6d01\u80fd\u6e90 (ACP) \u534f\u4f1a\u4e8e\u5468\u56db\u53d1\u5e03\u3002\u8be5\u56fd\u589e\u52a0\u4e86 16,836 \u5146\u74e6\u7684\u9646\u4e0a\u98ce\u80fd\u30018,894 \u5146\u74e6\u7684\u516c\u7528\u4e8b\u4e1a\u89c4\u6a21\u592a\u9633\u80fd\u548c 760 \u5146\u74e6\u7684\u7535\u6c60\u5b58\u50a8\u5bb9\u91cf\uff0c\u5b83\u4eec\u5728 2020 \u5e74\u5360\u6240\u6709\u65b0\u7535\u529b\u88c5\u7f6e\u7684 78%\uff0c\u9ad8\u4e8e 2010 \u5e74\u7684 28%\u3002\u76ee\u524d\u4e3a 10.7%\u62a5\u544a\u79f0\uff0c\u7f8e\u56fd\u7684\u7535\u529b\u6765\u81ea\u6e05\u6d01\u80fd\u6e90\u6280\u672f\u3002\u53bb\u5e74\u59d4\u6258\u7684\u9879\u76ee\u8f6c\u5316\u4e3a\u7ea6 390 \u4ebf\u7f8e\u5143\uff08330 \u4ebf\u6b27\u5143\uff09\u7684\u6295\u8d44\u3002\u8fd8\u6709\u8fd1 90 \u5409\u74e6\u7684\u6e05\u6d01\u80fd\u6e90\u9879\u76ee\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u6295\u8d44\u989d\u8d85\u8fc7 1200 \u4ebf\u7f8e\u5143\u3002\u7f8e\u56fd\u4e1c\u6d77\u5cb8\u7684 9 \u5409\u74e6\u6d77\u4e0a\u98ce\u7535\u9879\u76ee\u6b63\u5728\u63a8\u8fdb\u5f00\u53d1\u4e2d\u3002 2020 \u5e74\u5b89\u88c5\u6e05\u6d01\u7535\u529b\u5bb9\u91cf\u6700\u591a\u7684\u5dde\u662f\u5fb7\u514b\u8428\u65af\u5dde\uff0c\u88c5\u673a\u5bb9\u91cf\u4e3a 6,320 MW\u3002\u63a5\u4e0b\u6765\u662f\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684 2,193 \u5146\u74e6\uff0c\u4f5b\u7f57\u91cc\u8fbe\u5dde\u7684 1,267 \u5146\u74e6\uff0c\u7231\u8377\u534e\u5dde\u7684 1,218 \u5146\u74e6\u548c\u4fc4\u514b\u62c9\u8377\u9a6c\u5dde\u7684 1,182 \u5146\u74e6\u3002\u5728\u7d2f\u8ba1\u6e05\u6d01\u7535\u529b\u5bb9\u91cf\u65b9\u9762\uff0c\u5fb7\u514b\u8428\u65af\u5dde\u4ee5 37,443 MW\u3001\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde 20,354 \u5146\u74e6\u3001\u7231\u8377\u534e\u5dde 11,394 \u5146\u74e6\u3001\u4fc4\u514b\u62c9\u8377\u9a6c\u5dde 9,395 \u5146\u74e6\u548c\u582a\u8428\u65af\u5dde 7,058 \u5146\u74e6\u9886\u5148\u3002\u53bb\u5e74\u6e05\u6d01\u53d1\u7535\u4efd\u989d\u6392\u540d\u524d\u4e94\u7684\u5dde\u662f\u7231\u8377\u534e\u5dde\uff0857.6%\uff09\u3001\u582a\u8428\u65af\u5dde\uff0843.4%\uff09\u3001\u4fc4\u514b\u62c9\u8377\u9a6c\u5dde\uff0835.5%\uff09\u3001\u5357\u8fbe\u79d1\u4ed6\u5dde\uff0832.9%\uff09\u548c\u5317\u8fbe\u79d1\u4ed6\u5dde\uff0830.8%\uff09\u3002\u6839\u636e ACP \u7684\u62a5\u544a\uff0c\u98ce\u80fd\u548c\u592a\u9633\u80fd\u662f\u8be5\u56fd\u5927\u90e8\u5206\u5730\u533a\u6700\u4fbf\u5b9c\u7684\u53d1\u7535\u65b9\u5f0f\u3002\u81ea 2009 \u5e74\u4ee5\u6765\uff0c\u98ce\u80fd\u548c\u592a\u9633\u80fd\u7684\u65e0\u8865\u8d34\u80fd\u6e90\u6210\u672c\u5206\u522b\u4e0b\u964d\u4e86 71% \u548c 90%\u3002\n\u53bb\u5e74\uff0c\u4f01\u4e1a\u5bf9\u6e05\u6d01\u80fd\u6e90\u7684\u9700\u6c42\u4e5f\u521b\u4e0b\u5386\u53f2\u65b0\u9ad8\uff0c\u56e0\u4e3a\u4f01\u4e1a\u4e70\u5bb6\u7b7e\u8ba2\u4e86 10,417 \u5146\u74e6\u7684\u6e05\u6d01\u7535\u529b\u5bb9\u91cf\uff0c\u51e0\u4e4e\u4e0e\u516c\u7528\u4e8b\u4e1a\u7b7e\u8ba2\u7684 10,854 \u5146\u74e6\u5bb9\u91cf\u6301\u5e73\u3002", "note_en": "July 30 (Renewables Now) - Despite the pandemic, the US installed a record 26 GW of clean energy plants in 2020 to reach more than 170 GW of wind, utility solar and battery storage power capacity, according to the first Clean Power Annual report of the American Clean Power (ACP) Association, released on Thursday.\n  The country added 16,836 MW of land-based wind, 8,894 MW of utility-scale solar and 760 MW of battery storage capacity, which together represent 78% of all new power installations in 2020, up from 28% in 2010. Currently, 10.7% of the US electricity comes from clean power technologies, according to the report.\n  The projects commissioned last year translate to around USD 39 billion (EUR 33bn) in investment. A further almost 90 GW of clean energy projects are underway, representing an investment of more than USD 120 billion. Offshore wind projects of 9 GW are in advanced development along the US East coast.\n  The state that installed the most clean power capacity in 2020 was Texas with 6,320 MW. Next come California with 2,193 MW, Florida with 1,267 MW, Iowa with 1,218 MW and Oklahoma with 1,182 MW.\n  In terms of cumulative clean power capacity, the chart is led by Texas with 37,443 MW, California with 20,354 MW, Iowa with 11,394 MW, Oklahoma with 9,395 MW and Kansas with 7,058 MW.\n  The top five states for share of clean power generation last year were Iowa with 57.6%, Kansas with 43.4%, Oklahoma with 35.5%, South Dakota with 32.9% and North Dakota with 30.8%.\n  According to ACP\u2019s report, wind and solar are the cheapest form of generation in most parts of the country. Since 2009 the unsubsidised cost of energy has declined by 71% and 90% for wind and solar power, respectively.\n  Last year also saw record business demand for clean power as corporate buyers contracted 10,417 MW of clean power capacity, almost matching the 10,854 MW contracted by utilities.", "posttime": "2021-08-03 02:59:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7f8e\u56fd,2020,\u7ec4\u7ec7,power,\u80fd\u6e90", "title": "\u6e05\u6d01\u80fd\u6e90\u7ec4\u7ec7 ACP \u8868\u793a\uff0c\u7f8e\u56fd\u5728 2020 \u5e74\u589e\u52a0\u4e86\u521b\u7eaa\u5f55\u7684 26 \u5409\u74e6\u53ef\u518d\u751f\u80fd\u6e90", "title_en": "US adds record 26 GW of renewables in 2020, says clean power org ACP", "transed": 1, "url": "https://renewablesnow.com/news/us-adds-record-26-gw-of-renewables-in-2020-says-clean-power-org-acp-749351/", "via": "", "real_tags": ["\u7f8e\u56fd", "2020", "\u7ec4\u7ec7", "power", "\u80fd\u6e90"]}]