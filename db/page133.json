[{"category": "", "categoryclass": "", "imagename": "77e32cee2ad44cd006f35ad108f5ff5e.jpg", "infoid": 1072115, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u7ec8\u4e8e\u53d1\u5e03\u4e86\u6700\u65b0\u7684\u79fb\u52a8\u5bbd\u5e26\u8986\u76d6\u56fe\uff0c\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u957f\u671f\u9700\u8981\u7684\u5de5\u5177\uff0c\u4ee5\u4e86\u89e3\u4ed6\u4eec\u5728\u7f8e\u56fd\u4efb\u4f55\u7ed9\u5b9a\u533a\u57df\u53ef\u4ee5\u9884\u671f\u7684\u8702\u7a9d\u8986\u76d6\u7c7b\u578b\u4ea4\u4e92\u5f0f\u5de5\u5177\u663e\u793a 4G LTE \u5bbd\u5e26\u7f8e\u56fd\u56db\u5927\u8fd0\u8425\u5546\u7684\u6570\u636e\u548c\u8bed\u97f3\u79fb\u52a8\u8986\u76d6\uff1aAT&amp;T\u3001T-Mobile\u3001USmobile \u548c Verizon\u3002 FCC \u5728\u5468\u4e94\u7684\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u60a8\u770b\u5230\u7684\u6570\u636e\u622a\u81f3 2021 \u5e74 5 \u6708 15 \u65e5\u662f\u51c6\u786e\u7684\u3002\u7528\u6237\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u8fd0\u8425\u5546\u53e0\u52a0\u4e0d\u540c\u7684\u8986\u76d6\u56fe\uff0c\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u6bd4\u8f83\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u533a\u5206\u6570\u636e\u53ef\u7528\u6027\u548c\u8bed\u97f3\u53ef\u7528\u6027\u3002 \u201c\u8fd9\u662f FCC \u53d1\u5e03\u7684\u7b2c\u4e00\u5f20\u663e\u793a\u66f4\u65b0\u7684\u79fb\u52a8\u8986\u76d6\u8303\u56f4\u7684\u516c\u5171\u5730\u56fe\uff0c\u4e0e\u8be5\u673a\u6784\u4e4b\u524d\u53d1\u5e03\u7684\u5176\u4ed6\u6570\u636e\u76f8\u6bd4\u6709\u4e86\u663e\u7740\u6539\u8fdb\uff0c\u201d\u8be5\u673a\u6784\u8868\u793a\uff0c\u5e76\u8865\u5145\u8bf4\u5b83\u201c\u5c06\u63d0\u9ad8\u7531\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u6536\u96c6\u7684\u5bbd\u5e26\u53ef\u7528\u6027\u6570\u636e\u7684\u7edf\u4e00\u6027\u548c\u4e00\u81f4\u6027\u3002\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u3002\u201d\u4f46\u662f\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cFCC \u8fd8\u8868\u793a\uff0c\u5b83\u4f7f\u7528\u4e0a\u8ff0\u8fd0\u8425\u5546\u81ea\u613f\u63d0\u4f9b\u7684\u6570\u636e\u521b\u5efa\u4e86\u5730\u56fe\uff0c\u8fd9\u4e9b\u8fd0\u8425\u5546\u5728\u51c6\u786e\u81ea\u6211\u62a5\u544a\u5176\u8986\u76d6\u8303\u56f4\u65b9\u9762\u6ca1\u6709\u826f\u597d\u7684\u8bb0\u5f55\u3002\u8fd9\u4e0d\u662f\u552f\u4e00\u660e\u663e\u7684\u95ee\u9898\u3002\u8be5\u5de5\u5177\u6ca1\u6709\u89e3\u51b3\u5bb6\u5ead\u4e92\u8054\u7f51\u53ef\u7528\u6027\u7684\u8303\u56f4\uff0c\u8fd9\u662f\u6240\u8c13\u7684\u6570\u5b57\u9e3f\u6c9f\u7684\u4e3b\u8981\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u89e3\u51b3\u80fd\u591f\u83b7\u5f97\u8d1f\u62c5\u5f97\u8d77\u7684\u3001\u53ef\u9760\u7684\u4e92\u8054\u7f51\u670d\u52a1\u7684\u5c45\u6c11\u4e0e\u65e0\u6cd5\u83b7\u5f97\u7684\u5c45\u6c11\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u6bcf\u4e2a\u8fd0\u8425\u5546\u7684 5G \u5efa\u8bbe\u4e5f\u6ca1\u6709\u53cd\u6620\u51fa\u6765\u3002\u8fd8\u7f3a\u5c11\u7528\u6237\u5728\u4efb\u4f55\u7ed9\u5b9a\u7f51\u7edc\u4e0a\u53ef\u4ee5\u671f\u671b\u7684\u901f\u5ea6\u7c7b\u578b\u3002 FCC \u4ee3\u7406\u4e3b\u5e2d\u6770\u897f\u5361\u00b7\u7f57\u68ee\u6c83\u585e\u5c14 (Jessica Rosenworcel) \u5728\u6709\u5173\u8be5\u5de5\u5177\u63a8\u51fa\u7684\u8bf4\u660e\u4e2d\u8868\u793a\uff0c\u8981\u83b7\u5f97 4G \u6570\u636e\u8986\u76d6\uff0c\u7f51\u7edc\u5fc5\u987b\u63d0\u4f9b\u81f3\u5c11 5Mbps \u7684\u4e0b\u8f7d\u901f\u5ea6\u548c 1Mbps \u7684\u4e0a\u4f20\u901f\u5ea6\u3002\u4f46\u662f\uff0c\u76ee\u524d\u65e0\u6cd5\u5728\u5730\u56fe\u4e0a\u5224\u65ad\u8fd0\u8425\u5546\u5728\u4efb\u4f55\u7ed9\u5b9a\u533a\u57df\u7684\u8986\u76d6\u8303\u56f4\u662f\u5426\u8d85\u8fc7\u8fd9\u4e9b\u57fa\u51c6\u6216\u591a\u6b21\u8d85\u8fc7\u8fd9\u4e9b\u57fa\u51c6\u3002\u6240\u4ee5\u8fd9\u662f\u5411\u524d\u8fc8\u51fa\u7684\u4e00\u6b65\uff0c\u4f46\u53ea\u662f\u52c9\u5f3a\uff0c\u800c\u4e14\u65e9\u5c31\u5e94\u8be5\u8fd9\u6837\u505a\u4e86\u3002\u4fc3\u4f7f\u8be5\u5730\u56fe\u9996\u5148\u521b\u5efa\u7684\u6cd5\u5f8b\uff0c\u5373\u53bb\u5e74\u7684\u5bbd\u5e26\u90e8\u7f72\u51c6\u786e\u6027\u548c\u6280\u672f\u53ef\u7528\u6027\u6cd5\u6848\uff0c\u8981\u6c42 FCC \u63d0\u9ad8\u5176\u5bbd\u5e26\u53ef\u7528\u6027\u5730\u56fe\u7684\u51c6\u786e\u6027\uff0c\u56e0\u4e3a\u51b2\u7a81\u548c\u8fc7\u65f6\u7684\u6570\u636e\u963b\u788d\u4e86\u5f25\u5408\u6570\u5b57\u9e3f\u6c9f\u7684\u52aa\u529b\u5e74\u3002\u9664\u5176\u4ed6\u8981\u6c42\u5916\uff0c\u8be5\u673a\u6784\u8fd8\u88ab\u547d\u4ee4\u6c47\u7f16\u548c\u53d1\u5e03\u6709\u5173\u6709\u7ebf\u3001\u56fa\u5b9a\u65e0\u7ebf\u548c\u536b\u661f\u5bbd\u5e26\u63d0\u4f9b\u5546\u7684\u66f4\u53ef\u9760\u6570\u636e\uff0c\u5e76\u5efa\u7acb\u4f17\u5305\u6d41\u7a0b\u4ee5\u6536\u96c6\u516c\u4f17\u4fe1\u606f\u3002\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u5468\u4e94\u8868\u793a\uff0c\u73b0\u5728\u8be5\u5de5\u5177\u5df2\u4e0a\u7ebf\uff0c\u4f17\u5305\u6d41\u7a0b\u5c06\u53d1\u6325\u66f4\u5927\u4f5c\u7528\u3002\u4e00\u65e6\u540e\u7aef\u901a\u8fc7\u4e00\u4e9b\u6700\u7ec8\u7684\u9a8c\u8bc1\u8fc7\u7a0b\uff0c\u6d88\u8d39\u8005\u4ee5\u53ca\u5dde\u548c\u5730\u65b9\u5f53\u5c40\u5c06\u80fd\u591f\u201c\u6839\u636e\u5b9e\u9645\u7ecf\u9a8c\u63d0\u4f9b\u8f93\u5165\u201d\uff0c\u4ee5\u4ece\u957f\u8fdc\u6765\u770b\u63d0\u9ad8\u5de5\u5177\u7684\u51c6\u786e\u6027\u3002\n\u201c\u4e00\u5f20\u597d\u7684\u5730\u56fe\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\uff0c\u201d\u7f57\u68ee\u6c83\u585e\u5c14\u5728\u65b0\u95fb\u7a3f\u4e2d\u8bf4\u3002 \u201c\u4eca\u5929\u7684\u65b0\u5730\u56fe\u4ee3\u8868\u4e86\u6211\u4eec\u5728\u5b9e\u65bd\u5bbd\u5e26\u6570\u636e\u6cd5\u6848\u548c\u6784\u5efa\u4e0b\u4e00\u4ee3\u5bbd\u5e26\u5730\u56fe\u65b9\u9762\u53d6\u5f97\u7684\u8fdb\u5c55\uff0c\u8fd9\u4e9b\u5730\u56fe\u53ef\u4ee5\u5e2e\u52a9\u8fde\u63a5 100% \u7684\u7f8e\u56fd\u4eba\u3002\u4f7f\u7528\u6539\u8fdb\u7684\u7cfb\u7edf\u548c\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u6709\u5173\u5bbd\u5e26\u670d\u52a1\u5728\u5168\u56fd\u8303\u56f4\u5185\u548c\u4e0d\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u66f4\u597d\u4fe1\u606f\u3002\u201d Rosenworcel \u5728\u5979\u7684\u7b14\u8bb0\u4e2d\u8868\u793a\uff0c\u8fd9\u5f20\u5730\u56fe\u662f\u201c\u4e00\u7cfb\u5217\u52aa\u529b\u4e2d\u7684\u7b2c\u4e00\u6b21\u201d\uff0c\u65e8\u5728\u8ba9\u6d88\u8d39\u8005\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u5168\u56fd\u7684\u7f51\u7edc\u8986\u76d6\u8303\u56f4\u3002", "note_en": "The Federal Communications Commission has finally released   an up-to-date mobile broadband coverage map, giving consumers a long-needed tool to find out what kind of cellular coverage they can expect in any given area across the U.S.\n  The interactive tool shows 4G LTE broadband data and voice mobile coverage of four of the nation\u2019s largest carriers: AT&amp;T, T-Mobile, UScellular, and Verizon. The data you see is accurate as of May 15, 2021, the FCC said in   a press release Friday. Users can overlay different coverage maps for different carriers to compare all of the information in one place as well as differentiate between data availability and voice availability.\n \u201cThis is the first public map showing updated mobile coverage released by the FCC and represents a significant improvement over other data previously published by the agency,\u201d the agency said, adding that it \u201cwill improve the uniformity and consistency of broadband availability data collected by the FCC.\u201d\n    However, it\u2019s worth noting that the FCC also said it created the map using data voluntarily provided by the aforementioned carriers, who don\u2019t have   a great track record of accurately self-reporting their coverage. That\u2019s not the only glaring issue. The tool doesn\u2019t address the scope of home internet availability, a leading concern of the so-called   digital divide, or the gap between residents who have access to affordable, reliable internet service and those who don\u2019t. Each carrier\u2019s 5G buildouts aren\u2019t reflected as well.\n  Also missing is what kind of speeds users can expect on any given network. Acting FCC chairwoman Jessica Rosenworcel said in   a note about the tool\u2019s launch that to qualify as 4G data coverage, a network has to provide at least 5Mbps download speeds and 1Mbps upload speeds. Currently, though, there\u2019s no way to tell on the map if a carrier\u2019s coverage in any given area narrowly squeaks past those benchmarks or tops them several times over.\n   So it\u2019s a step forward, but just barely, and a long-overdue one at that. The   law that prompted this map to be created in the first place, last year\u2019s Broadband Deployment Accuracy and Technological Availability Act, required the FCC to improve the accuracy of its broadband availability maps because conflicting and outdated data has hampered efforts to bridge the digital divide for years. Among other requirements, the agency was ordered to compile and release more robust data about wired, fixed wireless, and satellite broadband providers as well as establish a crowdsourcing process to collect information from the public.\n   Now that the tool is live, that crowdsourcing process will come more into play, the FCC said Friday. Once the backend goes through some final verification processes, consumers along with state and local authorities will be able to \u201cprovide input informed by real-world experience\u201d to improve the tool\u2019s accuracy in the long run.\n \u201cA good map is one that changes over time,\u201d said Rosenworcel in the press release. \u201cToday\u2019s new map represents progress in our efforts to implement the Broadband DATA Act and build next-generation broadband maps that can help to connect 100 percent of Americans. Using improved systems and data, we can provide better information about where broadband service is and is not across the country.\u201d\n  In her note, Rosenworcel said that this map is the \u201cfirst in a series of efforts\u201d to offer consumers a clearer understanding of network coverage across the nation.", "posttime": "2021-08-08 21:51:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,\u7f8e\u56fd,\u5bbd\u5e26,finally,\u6570\u636e", "title": "FCC \u7ec8\u4e8e\u53d1\u5e03\u4e86\u7f8e\u56fd\u6700\u65b0\u7684\u79fb\u52a8\u5bbd\u5e26\u5730\u56fe", "title_en": "FCC Finally Debuts an Up-to-Date Mobile Broadband Map of the U.S.", "transed": 1, "url": "https://gizmodo.com/fcc-finally-debuts-an-up-to-date-mobile-broadband-map-o-1847443988", "via": "", "real_tags": ["\u53d1\u5e03", "\u7f8e\u56fd", "\u5bbd\u5e26", "finally", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072114, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u81ea\u52a8\u7684\u3002\u60a8\u7684\u6d4f\u89c8\u5668\u5c06\u5f88\u5feb\u91cd\u5b9a\u5411\u5230\u60a8\u8bf7\u6c42\u7684\u5185\u5bb9\u3002", "note_en": "This process is automatic. Your browser will redirect to your requested content shortly.", "posttime": "2021-08-08 21:51:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u4f1a\u8bae\u5458,mps,\u8bf7\u6c42", "title": "2012 \u5e74\uff0c\u6709 59% \u7684\u82f1\u56fd\u56fd\u4f1a\u8bae\u5458\u4e0d\u53ca\u683c\u7684\u6982\u7387\u8fde\u7eed\u7ffb\u8f6c\u4e24\u4e2a\u5934", "title_en": "In 2012, 59% of British MPs Flunked Probability of Flipping Two Heads in a Row", "transed": 1, "url": "https://www.unz.com/isteve/british-mps-flunked-probability-of-flipping-two-heads-in-a-row/", "via": "", "real_tags": ["\u56fd\u4f1a\u8bae\u5458", "mps", "\u8bf7\u6c42"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072113, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u641c\u7d22\u5f15\u64ce\u5bf9\u666e\u901a\u4e92\u8054\u7f51\u7528\u6237\u975e\u5e38\u6709\u5e2e\u52a9\uff0c\u4f46\u7248\u6743\u6240\u6709\u8005\u4e5f\u770b\u5230\u4e86\u5de8\u5927\u7684\u8d1f\u9762\u5f71\u54cd\u3002 \u201c\u4fb5\u6743\u7f51\u7ad9\u201d\u51fa\u73b0\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u8fd9\u4e00\u4e8b\u5b9e\u5df2\u6210\u4e3a\u4ee4\u4eba\u6cae\u4e27\u7684\u6839\u6e90\u3002\u56e0\u6b64\uff0c\u8c37\u6b4c\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u6b63\u9762\u4e34\u6e90\u6e90\u4e0d\u65ad\u7684 DMCA \u5220\u9664\u901a\u77e5\u3002\u4ec5 Google \u5c31\u5904\u7406\u4e86\u8d85\u8fc7 50 \u4ebf\u4e2a\u5220\u9664\u8bf7\u6c42\uff0c\u6bcf\u5468\u90fd\u4f1a\u62a5\u544a\u6570\u767e\u4e07\u4e2a\u65b0 URL\u3002\u867d\u7136\u5176\u4e2d\u5927\u591a\u6570\u6b63\u786e\u6307\u5411\u6709\u95ee\u9898\u7684\u94fe\u63a5\uff0c\u4f46\u4e5f\u6709\u5f88\u591a\u9519\u8bef\u3002\u4e00\u4e9b\u7248\u6743\u6240\u6709\u8005\u5c06\u5b8c\u5168\u5408\u6cd5\u7684\u7f51\u7ad9\u6807\u8bb0\u4e3a\u76d7\u7248\u5929\u5802\uff0c\u800c\u53e6\u4e00\u4e9b\u7248\u6743\u6240\u6709\u8005\u5219\u901a\u8fc7\u7784\u51c6\u4ed6\u4eec\u81ea\u5df1\u7684\u7f51\u7ad9\u6765\u6253\u51fb\u81ea\u5df1\u3002\u540e\u8005\u6700\u8fd1\u53d1\u751f\u5728\u7f51\u7edc\u6f2b\u753b\u8ba2\u9605\u670d\u52a1 Toomics \u4e0a\u3002\u672c\u5468\u6211\u4eec\u770b\u5230\u4e86\u53e6\u4e00\u4e2a\u6709\u95ee\u9898\u7684 DMCA \u901a\u77e5\uff0c\u8fd9\u53ef\u80fd\u66f4\u7cdf\u3002\u4e4c\u514b\u5170\u7535\u89c6\u9891\u9053 TRK \u8981\u6c42 Google \u5220\u9664 IP \u5730\u5740 127.0.0.1 \u4e0a\u6258\u7ba1\u7684\u5185\u5bb9\uff0c\u8be5 IP \u5730\u5740\u662f\u8bbe\u5907\u6216\u670d\u52a1\u5668\u7684\u672c\u5730\u4e3b\u673a\u3002\u8be5\u8bf7\u6c42\u662f\u7531 TKR \u7684\u53cd\u76d7\u7248\u5408\u4f5c\u4f19\u4f34 Vindex \u53d1\u9001\u7684\uff0c\u5b83\u57fa\u672c\u4e0a\u5728\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u6807\u8bb0\u4e86\u4e00\u4e2a\u6587\u4ef6\u3002 \u201c\u4fb5\u6743\u201d\u94fe\u63a5\u662f 127.0.0.1:6878/ace/manifest.m3u\u3002\u8fd9\u6307\u5411\u4e00\u4e2a\u64ad\u653e\u5217\u8868\u6587\u4ef6\uff0c\u53ef\u80fd\u7528\u4e8e\u7ecf\u5e38\u7528\u4e8e\u76d7\u7248\u5185\u5bb9\u7684 P2P \u6d41\u5a92\u4f53\u5e73\u53f0 Ace Stream\u3002\u6839\u636e\u5220\u9664\u901a\u77e5\uff0c\u6240\u6709\u88ab\u4e3e\u62a5\u7684\u94fe\u63a5\u201c\u90fd\u975e\u6cd5\u63d0\u4f9b\u4e86\u5916\u90e8\u94fe\u63a5\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u94fe\u63a5\u8bbf\u95ee\u548c/\u6216\u4e0b\u8f7d\u672a\u7ecf\u6388\u6743\u7684\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u8db3\u7403\u5185\u5bb9\u3002\u201d\u7136\u540e\u5c06\u5305\u542b Vindex \u8ba1\u7b97\u673a\u4e0a\u7684\u6587\u4ef6\u3002\n\u7531\u4e8e 127.0.0.1 \u6307\u7684\u662f\u4e3b\u673a\uff0c\u56e0\u6b64\u6280\u672f\u4e0a\u8981\u6c42 Google \u4ece\u5176\u670d\u52a1\u5668\u4e2d\u5220\u9664\u6587\u4ef6\u3002\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u4e0d\u7528\u8bf4\uff0c\u8c37\u6b4c\u6ca1\u6709\u91c7\u53d6\u4efb\u4f55\u56de\u5e94\u63aa\u65bd\u3002\u4ee5\u4e0a\u8868\u660e Vindex \u53ef\u80fd\u60f3\u8981\u597d\u597d\u770b\u770b\u5b83\u7684\u79fb\u9664\u673a\u5668\u4eba\u3002\u5728 DMCA \u901a\u77e5\u65b9\u9762\uff0c\u8be5\u516c\u53f8\u7684\u58f0\u8a89\u5e76\u4e0d\u9ad8\u3002\u5728\u62a5\u544a\u7ed9 Google \u7684\u6240\u6709\u94fe\u63a5\u4e2d\uff0c\u53ea\u6709 10% \u591a\u4e00\u70b9\u88ab\u641c\u7d22\u5f15\u64ce\u5220\u9664\u3002", "note_en": "While search engines are extremely helpful for the average Internet user, copyright holders also see a massive downside.\n The fact that \u201cinfringing sites\u201d show up in search results has become a source of frustration. As a result, Google and other search engines are facing a steady stream of DMCA takedown notices.\n Google alone has processed more than  five billion takedown requests and millions of new URLs are reported every week. While the majority of these correctly point to problematic links, there are plenty of mistakes too.\n Some copyright holders flag perfectly  legitimate websites as piracy havens, which others shoot themselves in the foot by targeting their own websites. The latter happened to the webtoon  subscription service Toomics just recently.\n  This week we saw yet another problematic DMCA notice, which is perhaps even worse. TV channel  TRK Ukraine asked Google to remove content hosted on the IP-address  127.0.0.1, which is the localhost of a device or server.\n  The request was sent by TKR\u2019s anti-piracy partner  Vindex, which essentially flagged a file on its own machine. The \u2018infringing\u2019 link is 127.0.0.1:6878/ace/manifest.m3u. This points to a playlist file, possibly for the P2P streaming platform  Ace Stream that\u2019s often used to pirate content.\n  According to the takedown notice, all reported links \u201cillegally provide external links with which users can access and/or download unauthorized copyrighted contents of Football.\u201d That would then include the file on Vindex\u2019s computer.\n Since 127.0.0.1 refers to the host computer, Google is technically asked to remove a file from its servers. A file that doesn\u2019t exist. Needless to say, Google hasn\u2019t taken any action in response.\n The above suggests that Vindex may want to take a good look at its takedown bots. The company doesn\u2019t have a stellar reputation when it comes to DMCA notices. Of  all the links that were reported to Google, little more than 10% were removed by the search engine.", "posttime": "2021-08-08 21:50:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,piracy,\u7f51\u7ad9", "title": "\u53cd\u76d7\u7248\u516c\u53f8\u8981\u6c42\u8c37\u6b4c\u963b\u6b62 127.0.0.1", "title_en": "Anti-Piracy Firm Asks Google to Block 127.0.0.1", "transed": 1, "url": "https://torrentfreak.com/anti-piracy-firm-asks-google-to-block-127-0-0-1-210808/", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "piracy", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "ff0287210796737fd34a6056d629fa7a.png", "infoid": 1072112, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u5728\u516c\u53f8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u6216\u6700\u5371\u9669\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4ec0\u4e48\uff1f\u6211\u4ece\u672a\u9047\u5230\u8fc7\u6211\u8ba4\u4e3a\u662f\u6545\u610f\u6076\u610f\u548c\u90aa\u6076\u7684\u751f\u4ea7\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u5f88\u60f3\u77e5\u9053\u5176\u4ed6\u4eba\u53d1\u73b0\u4e86\u4ec0\u4e48\u3002\u6211\u89c1\u8fc7\u7684\u6700\u5371\u9669\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u5b58\u50a8\u8fc7\u7a0b\uff0c\u8ddd\u79bb\u6211\u4eec\u7684\u6838\u5fc3\u751f\u4ea7\u6570\u636e\u5e93\u670d\u52a1\u5668\u6709\u4e24\u4e2a\u94fe\u63a5\u670d\u52a1\u5668\u3002\u8be5\u5b58\u50a8\u8fc7\u7a0b\u63a5\u53d7\u4efb\u4f55 NVARCHAR(8000) \u53c2\u6570\u5e76\u901a\u8fc7\u53cc\u8df3 sp_executeSQL \u547d\u4ee4\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u6267\u884c\u8be5\u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csp_executeSQL \u547d\u4ee4\u6267\u884c\u4e86\u53e6\u4e00\u4e2a sp_executeSQL \u547d\u4ee4\uff0c\u4ee5\u4fbf\u8df3\u8f6c\u4e24\u4e2a\u94fe\u63a5\u7684\u670d\u52a1\u5668\u3002\u54e6\uff0c\u94fe\u63a5\u670d\u52a1\u5668\u5e10\u6237\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u5177\u6709\u7cfb\u7edf\u7ba1\u7406\u5458\u6743\u9650\u3002 1 \u6211\u5199\u8fc7\u6211\u4ee5\u524d\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u5de5\u4f5c\u8fc7\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u516c\u53f8\u4ece\u5370\u5ea6\u7ee7\u627f\u4e8613\u4e07\u884c\u5783\u573e\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u662f\u7528 C# \u7f16\u5199\u7684\uff1b\u8fd9\u662f\u4e00\u4e2a\u67dc\u5458\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u4f60\u53bb\u94f6\u884c\u65f6\uff0c\u67dc\u5458\u5728\u67dc\u53f0\u540e\u9762\u4f7f\u7528\u7684\u90a3\u79cd\u8f6f\u4ef6\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6bcf\u5929\u5d29\u6e83 40-50 \u6b21\uff0c\u800c\u4e14\u6839\u672c\u65e0\u6cd5\u91cd\u6784\u4e3a\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u3002\u6211\u7684\u516c\u53f8\u4e0d\u5f97\u4e0d\u5728 12 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u91cd\u65b0\u7f16\u5199\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u90aa\u6076\u7684\uff1f\u56e0\u4e3a\u770b\u5230\u6e90\u4ee3\u7801\u5c31\u8db3\u4ee5\u8ba9\u4e00\u4e2a\u7406\u667a\u7684\u4eba\u53d1\u75af\uff0c\u4e00\u4e2a\u7406\u667a\u7684\u75af\u5b50\u3002\u7528\u4e8e\u7f16\u5199\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u626d\u66f2\u903b\u8f91\u53ef\u80fd\u53ea\u662f\u53d7\u5230\u6d1b\u592b\u514b\u62c9\u592b\u7279\u5f0f\u5669\u68a6\u7684\u542f\u53d1\u3002\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7279\u529f\u80fd\u5305\u62ec\uff1a \u5728 130,000 \u884c\u4ee3\u7801\u4e2d\uff0c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u542b 5 \u4e2a\u7c7b\uff08\u4e0d\u5305\u62ec\u8868\u5355\u6587\u4ef6\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u516c\u5171\u9759\u6001\u7c7b\u3002\u4e00\u4e2a\u7c7b\u79f0\u4e3a Globals.cs\uff0c\u5176\u4e2d\u5305\u542b 1000 \u548c 1000 \u548c 1000 \u4e2a\u516c\u5171\u9759\u6001\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u7684\u6574\u4e2a\u72b6\u6001\u3002\u8fd9\u4e94\u4e2a\u7c7b\u603b\u5171\u5305\u542b 20,000 \u884c\u4ee3\u7801\uff0c\u5176\u4f59\u4ee3\u7801\u5d4c\u5165\u5728\u8868\u5355\u4e2d\u3002\u4f60\u4e00\u5b9a\u60f3\u77e5\u9053\uff0c\u7a0b\u5e8f\u5458\u662f\u5982\u4f55\u5728\u6ca1\u6709\u4efb\u4f55\u7c7b\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u5982\u6b64\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\uff1f\u4ed6\u4eec\u7528\u4ec0\u4e48\u6765\u8868\u793a\u4ed6\u4eec\u7684\u6570\u636e\u5bf9\u8c61\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7a0b\u5e8f\u5458\u4ec5\u4ec5\u901a\u8fc7\u7ec4\u5408 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u6210\u529f\u5730\u91cd\u65b0\u53d1\u660e\u4e86\u6211\u4eec\u90fd\u5b66\u5230\u7684\u5173\u4e8e OOP \u7684\u4e00\u534a\u6982\u5ff5\u3002\u6211\u4eec\u770b\u5230\u4e86\u5f88\u591a\u8fd9\u6837\u7684\uff1a\n\u8bf7\u8bb0\u4f4f\uff0c\u4e0a\u9762\u7684\u6570\u636e\u7ed3\u6784\u90fd\u4e0d\u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u5c06\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u795e\u79d8\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002\u4ec5\u4f7f\u7528 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u53ef\u4ee5\u521b\u5efa\u4ec0\u4e48\u6837\u7684\u590d\u6742\u7684\u3001\u7c7b\u4f3c\u4e8e Rube Goldberg \u7684\u6570\u636e\u7ed3\u6784\uff0c\u771f\u662f\u4ee4\u4eba\u60ca\u5947\u3002\u8981\u5206\u4eab\u5982\u4f55\u4f7f\u7528\u4e0a\u9762\u8be6\u8ff0\u7684\u5bf9\u8c61\u6a21\u578b\u7684\u793a\u4f8b\uff0c\u8bf7\u8003\u8651 Accounts\uff1a\u539f\u59cb\u7a0b\u5e8f\u5458\u4e3a\u5e10\u6237\u7684\u6bcf\u4e2a\u53ef\u7406\u89e3\u7684\u5c5e\u6027\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u72ec\u7684 HashTable\uff1a\u4e00\u4e2a\u540d\u4e3a hstAcctExists\u3001hstAcctNeedsOverride\u3001hstAcctFirstName \u7684 HashTable\u3002\u6240\u6709\u8fd9\u4e9b\u54c8\u5e0c\u8868\u7684\u952e\u90fd\u662f\u201c|\u201d\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u60f3\u5230\u7684\u952e\u5305\u62ec\u201c123456|DDA\u201d\u3001\u201c24100|SVG\u201d\u3001\u201c100|LNS\u201d\u7b49\u3002\u7531\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u5f88\u5bb9\u6613\u4ece\u5168\u5c40\u53d8\u91cf\u4e2d\u8bbf\u95ee\uff0c\u7a0b\u5e8f\u5458\u53d1\u73b0\u6ca1\u6709\u5fc5\u8981\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002\u6211\u4f1a\u8bf4 90% \u7684\u65b9\u6cd5\u91c7\u7528 0 \u53c2\u6570\u3002\u5728\u5c11\u6570\u8fd9\u6837\u505a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6240\u6709\u53c2\u6570\u90fd\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u800c\u4e0d\u7ba1\u5b57\u7b26\u4e32\u4ee3\u8868\u4ec0\u4e48\u3002\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u529f\u80fd\u4e0d\u5b58\u5728\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4fee\u6539\u4e86 Globals \u7c7b\u4e2d\u7684 1 \u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u3002\u5e76\u975e\u6240\u6709\u7684\u526f\u4f5c\u7528\u90fd\u6709\u610f\u4e49\uff1b\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u79cd\u8868\u5355\u9a8c\u8bc1\u65b9\u6cd5\u6709\u4e00\u4e2a\u795e\u79d8\u7684\u526f\u4f5c\u7528\uff0c\u5373\u4e3a\u5b58\u50a8 Globals.lngAcctNum \u7684\u4efb\u4f55\u5e10\u6237\u8ba1\u7b97\u8d37\u6b3e\u7684\u8d85\u989d\u548c\u77ed\u989d\u4ed8\u6b3e\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u5f62\u5f0f\uff0c\u4f46\u53ea\u6709\u4e00\u79cd\u5f62\u5f0f\u53ef\u4ee5\u7edf\u6cbb\u5b83\u4eec\uff1afrmMain.cs\uff0c\u5176\u4e2d\u5305\u542b\u9ad8\u8fbe 20,000 \u884c\u7684\u4ee3\u7801\u3002 frmMain \u505a\u4e86\u4ec0\u4e48\uff1f\u4e00\u5207\u3002\u5b83\u67e5\u5e10\u3001\u6253\u5370\u6536\u636e\u3001\u53d1\u653e\u73b0\u91d1\uff0c\u5b83\u4ec0\u4e48\u90fd\u505a\u3002\u6709\u65f6\u5176\u4ed6\u5f62\u5f0f\u9700\u8981\u8c03\u7528 frmMain \u4e0a\u7684\u65b9\u6cd5\u3002\u4e0e\u5176\u5c06\u8868\u5355\u4e2d\u7684\u4ee3\u7801\u5206\u89e3\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8c03\u7528\u4ee3\u7801\uff1a\u5c3d\u7ba1\u5b83\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u53ef\u89c1\u7684\u8868\u5355\u6765\u6267\u884c\u4e1a\u52a1\u903b\u8f91\uff0c\u4f46\u60a8\u8ba4\u4e3a\u8868\u5355\u5982\u4f55\u77e5\u9053\u8981\u67e5\u627e\u54ea\u4e2a\u5e10\u6237\uff1f\u8fd9\u5f88\u7b80\u5355\uff1a\u8868\u5355\u53ef\u4ee5\u8bbf\u95ee Globals.lngAcctNum \u548c Globals.strAcctType\u3002 \uff08\u8c01\u4e0d\u559c\u6b22\u5308\u7259\u5229\u7b26\u53f7\uff1f\uff09\n\u4ee3\u7801\u91cd\u7528\u662f ctrl-c\u3001ctrl-v \u7684\u540c\u4e49\u8bcd\u3002\u6211\u53d1\u73b0 200 \u884c\u65b9\u6cd5\u5728 20 \u4e2a\u8868\u5355\u4e2d\u590d\u5236/\u7c98\u8d34\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5947\u602a\u7684\u7ebf\u7a0b\u6a21\u578b\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a\u7ebf\u7a0b\u548c\u8ba1\u65f6\u5668\u6a21\u578b\uff1a\u6bcf\u4e2a\u751f\u6210\u7ebf\u7a0b\u7684\u8868\u5355\u90fd\u6709\u4e00\u4e2a\u8ba1\u65f6\u5668\u3002\u4ea7\u751f\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u6709 200 \u6beb\u79d2\u5ef6\u8fdf\u7684\u8ba1\u65f6\u5668\uff1b\u4e00\u65e6\u8ba1\u65f6\u5668\u542f\u52a8\uff0c\u5b83\u4f1a\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u9b54\u6cd5\u5e03\u5c14\u503c\uff0c\u7136\u540e\u5b83\u4f1a\u4e2d\u6b62\u7ebf\u7a0b\u3002\u4ea7\u751f\u7684 ThreadAbortException \u88ab\u541e\u4e86\u3002\u60a8\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u53ea\u4f1a\u770b\u5230\u4e00\u6b21\uff0c\u4f46\u6211\u81f3\u5c11\u5728 10 \u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u53d1\u73b0\u4e86\u5b83\u3002\u8bf4\u5230\u7ebf\u7a0b\uff0c\u5173\u952e\u5b57\u201c\u9501\u201d\u4ece\u672a\u51fa\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u7ebf\u7a0b\u65e0\u9700\u9501\u5b9a\u5373\u53ef\u81ea\u7531\u64cd\u4f5c\u5168\u5c40\u72b6\u6001\u3002\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5305\u542b\u4e00\u4e2a try/catch \u5757\u3002\u6bcf\u4e2a\u5f02\u5e38\u90fd\u88ab\u8bb0\u5f55\u5e76\u541e\u4e0b\u3002\u4e00\u4e9b\u5929\u624d\u53d1\u73b0\u60a8\u53ef\u4ee5\u5c06\u591a\u4e2a\u8868\u5355\u63a7\u4ef6\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5458\u662f\u600e\u4e48\u5904\u7406\u7684\uff1f private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &quot;btnBS&quot;) { UpdateText(); } if (txtEdit.Text.Trim() != &quot;Error&quot;) { SaveFormState(); } switch (btn.Name) { case &quot;btnC&quot;: ResetValues();\u4f11\u606f; case &quot;btnCE&quot;: txtEdit.Text = &quot;0&quot;;\u4f11\u606f; case &quot;btnBS&quot;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &quot;0&quot; : EditText); } \u4f11\u606f; case &quot;btnPercent&quot;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); blnEqualOccurred = false; blnStartedNew = true; } \u4f11\u606f; case &quot;btnAdd&quot;: case &quot;btnSubtract&quot;: case &quot;btnMultiply&quot;: case &quot;btnDivide&quot;: blnAfterOp = true; if (txtEdit.Text.Trim() == &quot;Error&quot;) { btnC.PerformClick();\u8fd4\u56de; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&quot;\u9519\u8bef&quot;); strOpPressed = btn.Text; blnEqualOccurred = \u5047\uff1b blnNumPressed = \u5047\uff1b } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &quot;Error&quot;) { AddToTape(&quot;Error&quot;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &quot;\u9519\u8bef&quot;; } \u4f11\u606f; case &quot;btnEqual&quot;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&quot;\u9519\u8bef&quot;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = \u5047\uff1b blnEqualOccurred = \u771f\uff1b strOpPressed = string.Empty; } } \u4f11\u606f; case &quot;btnSign&quot;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue));\u4f11\u606f; } }}\nstrDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked \uff1f \u201cD\u201d\uff1achkCredits.Checked \uff1f \u201cC\u201d\uff1a\u201cN\u201d\uff1b if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\u6f14\u793a\u4e86 StringBuilder \u7684\u5178\u578b\u8bef\u7528\u3002\u8bf7\u6ce8\u610f\u7a0b\u5e8f\u5458\u5982\u4f55\u5728\u5faa\u73af\u4e2d\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5b57\u7b26\u4e32\u9644\u52a0\u5230 StringBuilder\uff1a private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_chknum&quot;].ToString().PadLeft(8, &#39; &#39;); strTemp += &quot; &quot;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trandt&quot;]).ToString(&quot;MM/dd/yyyy&quot;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_DrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_CrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trancd&quot;].ToString().PadLeft(4, &#39; &#39;); strTemp += &quot; &quot;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_desc&quot;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();} \u8868\u4e0a\u4e0d\u5b58\u5728\u4e3b\u952e\u3001\u7d22\u5f15\u6216\u5916\u952e\u7ea6\u675f\uff0c\u51e0\u4e4e\u6240\u6709\u5b57\u6bb5\u90fd\u662f varchar(50) \u7c7b\u578b\uff0c\u5e76\u4e14 100% \u7684\u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002\u6709\u8da3\u7684\u662f\uff0c\u4f4d\u57df\u4e0d\u7528\u4e8e\u5b58\u50a8\u5e03\u5c14\u6570\u636e\uff1b\u76f8\u53cd\uff0c\u4f7f\u7528\u4e86 char(1) \u5b57\u6bb5\uff0c\u5b57\u7b26\u201cY\u201d\u548c\u201cN\u201d\u5206\u522b\u7528\u4e8e\u8868\u793a\u771f\u548c\u5047\u3002 ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null , @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS \u58f0\u660e@WhereCond Varchar(1000) \u58f0\u660e@strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; \u5982\u679c\u4e0d\u662f@TellerID \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) \u5982\u679c\u4e0d\u662f@CashDrawer \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) \u5982\u679c\u4e0d\u662f @AcctNum \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) \u5982\u679c\u4e0d\u662f @StartDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f @EndDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT .PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f@TranCode\u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) \u5982\u679c\u4e0d\u662f @EndTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) \u5982\u679c\u4e0d\u662f @StartTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) \u5982\u679c\u4e0d\u662f (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) -- \u6839\u636e\u8fc7\u6ee4\u5668\u83b7\u53d6\u67dc\u5458\u4ea4\u6613\u8bb0\u5f55 Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) \u4f5c\u4e3a[\u4ea4\u6613\u63cf\u8ff0], TT.AcctNbr \u4f5c\u4e3a[\u8d26\u53f7], TT.TranID \u4f5c\u4e3a[\u4ea4\u6613\u7f16\u53f7], Convert(varchar,TT.ActivityDateTime,101) \u4f5c\u4e3a[\u6d3b\u52a8\u65e5\u671f] ], Convert(varchar,TT.EffDate,101) \u4e3a[\u751f\u6548\u65e5\u671f], Convert(varchar,TT.PostDate,101) \u4e3a[\u53d1\u5e03\u65e5\u671f], Convert(varchar,TT.ActivityDateTime,108) \u4e3a[\u65f6\u95f4], TT .BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT\u3002 TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery) ) \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e2a 130,000 \u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u5927\u95ee\u9898\u662f\uff1a\u6ca1\u6709\u5355\u5143\u6d4b\u8bd5\u3002\n10 \u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u4e00\u4e9b\u7f16\u5199\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u4ed6\u4eec\u505a\u5f97\u5f88\u597d\uff0c\u5e76\u5728\u4ed6\u7684\u7b80\u5386\u4e0a\u70ab\u8000\u3002 \u201c\u4e0d\u719f\u7ec3\u800c\u4e14\u4e0d\u77e5\u9053\u5b83\u201d\u2014\u2014\u585e\u5c14\u5409\u5965\u00b7\u963f\u79d1\u65af\u5854\uff0c\u563f\uff0c\u4f60\u5199\u7684\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u8ba4\u4e3a\u5b83\u5f88\u597d\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u505a\u5f97\u66f4\u597d\uff0c\u4f60\u5e94\u8be5\u5c1d\u8bd5\u2014\u2014\u8d1d\u65af\u5361 \u4e00\u4e9b\u7ba1\u7406\u5386\u53f2\u7684\u6de1\u5316\u7248\u672c\u6700\u7ec8\u51fa\u73b0\u5728 DailyWTF \u4e0a\u4eca\u5929\uff1athedailywtf.com/Articles/eTeller-Horror.aspx \u2013 Juliet 4 LOL \u2013 \u8fd9\u5c31\u50cf\u7528\u900f\u660e\u4fe1\u5c01\u5206\u53d1\u5de5\u8d44\u5355\u3001\u94f6\u884c\u5bf9\u8d26\u5355\u7b49\u3002 :-) \u2013 \u514b\u91cc\u65af\u8482\u5b89\u00b7\u6d77\u7279\u00b7\u7ea6\u5947\u3002\u6211\u66fe\u7ecf\u5728\u5546\u4e1a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u5e93\u4e2d\u53d1\u73b0\u4e86\u770b\u8d77\u6765\u5f88\u597d\u6563\u5217\u7684\u5bc6\u7801\u3002\u539f\u6765\u5b83\u4eec\u53ea\u662f\u5b58\u50a8\u5728 VARBINARY \u5217\u4e2d\u7684\u7eaf\u6587\u672c\uff0c\u56e0\u6b64\u60a8\u4e4d\u4e00\u770b\u65e0\u6cd5\u5206\u8fa8\u3002 - \u9a6c\u7279\u00b7\u5409\u5e03\u68ee\u8bf4\u6765\u60b2\u54c0\uff0c\u8fd9\u57fa\u672c\u4e0a\u5728\u6211\u7ee7\u627f\u4e86\u4e00\u4e2a\u9879\u76ee\u7684\u5bc6\u7801\u52a0\u5bc6\u3002\u5c3d\u7ba1\u4ed6\u4eec\u65e7\u7684\u81ea\u5b9a\u4e49\u7f16\u5199\u7684 base64 \u7f16\u7801\u51fd\u6570\u505a\u9519\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u8fd9\u6709\u4ec0\u4e48\u597d\u5904 ;-) \u2013 Allbite \u5728\u4e00\u4e2a\u63a5\u53d7\u4fe1\u7528\u5361\u4ed8\u6b3e\u7684\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u8fc7\u53bb\u5e38\u5e38\u5b58\u50a8\u5b8c\u6574\u7684\u4fe1\u7528\u5361\u53f7\u7801\u4ee5\u53ca\u59d3\u540d\u3001\u5230\u671f\u65e5\u671f\u7b49\u3002\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u975e\u6cd5\u7684\uff0c\u9274\u4e8e\u6211\u4eec\u5f53\u65f6\u6b63\u5728\u4e3a\u53f8\u6cd5\u90e8\u7f16\u5199\u7a0b\u5e8f\uff0c\u8fd9\u5177\u6709\u8bbd\u523a\u610f\u5473\u3002 5 \u6709\u8c01\u77e5\u9053\u4e9a\u9a6c\u900a\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1f\u6216\u8005\u5982\u679c\u60a8\u8981\u6c42\u7528\u6237\u8bb8\u53ef\u662f\u5426\u5408\u6cd5\uff1f \u2013 Davy Landman @Davy \u2013 \u52a0\u5bc6\u3002\u5982\u679c\u5b83\u662f\u52a0\u5bc6\u7684\u5e76\u4e14\u53ea\u80fd\u5728\u9700\u8981\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\uff0c\u5219\u5b58\u50a8\u662f\u5408\u6cd5\u7684\u3002\u6709\u5f88\u591a\u5173\u4e8e\u5f3a\u5ea6\u3001\u4fdd\u7559\u3001DMZ \u7b49\u7684\u89c4\u5219\uff0c\u8bf7\u53c2\u9605\u6b64\u5904 pcisecuritystandards.org/security_standards/pci_dss.shtml \u2013 Luke Schafer 5 \u597d\u6d88\u606f\u662f\u6709\u4e00\u4e2a FIXME\uff0c\u56e0\u6b64 IDE \u53ef\u4ee5\u5c06\u60a8\u5f15\u5bfc\u81f3\u8be5\u884c\u3002 \u2013 Josh Lee @Chadworthington\uff1a\u5982\u679c\u662f\u6545\u610f\u7684\uff0c\u8bc4\u8bba\u5e94\u8be5\u662f /* DON&#39;T FIXME\uff01 */ ;P \u2013 David \u5728\u6784\u5efa\u5546\u4e1a\u7248\u672c\u65f6\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u662f\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u5417\uff1f \u2013 Attila Kun \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u201c\u4f18\u5316\u201d\u5faa\u73af\uff1b\u5b83\u4f1a\u201c\u4f18\u5316\u201d\u4ec0\u4e48\uff1f\u6b64\u5916\uff0c\u201c\u6545\u610f\u7834\u574f\u201d\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u53ef\u80fd\u6027\u3002 \u201cFIXME\u201d\u53ef\u80fd\u662f\u4e3a\u4e86\u5426\u8ba4\u3002 \u2013 \u675c\u5c14\u9ad8\u62f1\u95e8\n\uff08\u5728\u6211\u610f\u8bc6\u5230\u5b83\u4eec\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u4e4b\u524d\uff0c\u6211\u771f\u7684\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8bd5\u56fe\u5f04\u6e05\u695a\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff09\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u5e76\u4e14\u5185\u5bb9\u4ee5\u6709\u6761\u4ef6\u548c\u4e0d\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u5728\u6240\u6709 50 \u4e2a\u6587\u4ef6\u4e2d\u7ebf\u6027/\u7a0b\u5e8f\u5730\u6267\u884c.\u73b0\u5728\u8003\u8651 $x \u5305\u542b\u6765\u81ea\u60a8\u7684 URL \u7684\u503c\uff08 register globals magic \uff09\uff0c\u56e0\u6b64\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u5f88\u660e\u663e\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u5168\u90e8\u7531 url \u51b3\u5b9a\u3002\u73b0\u5728\u8003\u8651\u5f53\u8be5\u53d8\u91cf\u7684\u5185\u5bb9\u53ef\u4ee5\u662f\u7f51\u7ad9\u7528\u6237\u6307\u5b9a\u7684 url \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u662f\u7684\uff0c\u8fd9\u5bf9\u60a8\u6765\u8bf4\u53ef\u80fd\u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u8be5 url \u7684\u53d8\u91cf\uff0c\u5373\uff1a\u9664\u4e86\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u4e4b\u5916\uff0c\u60a8\u5fc5\u987b\u901a\u8fc7\u4e0a\u9762\u7684\u53cc $ \u6280\u672f\u4f7f\u7528\u5b83\u3002\u6b64\u5916\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u5728 URL \u4e0a\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u6765\u6307\u793a\u8981\u5305\u542b\u54ea\u4e2a\u6587\u4ef6\u65f6\uff0c\u6709\u4e00\u4e9b\u8ba8\u538c\u7684\u6280\u5de7\uff0c\u4f8b\u5982\u201cevilcode.php\u201d\u6253\u5370\u5176\u4ee3\u7801\u660e\u6587\uff0c\u5e76\u4e14 Php \u6ca1\u6709\u5f97\u5230\u9002\u5f53\u7684\u4fdd\u62a4\uff0cphp \u53ea\u4f1a\u88ab\u6dd8\u6c70\uff0c\u4e0b\u8f7d evilcode.php\uff0c\u5e76\u4ee5 Web \u670d\u52a1\u5668\u7684\u7528\u6237\u8eab\u4efd\u6267\u884c\u5b83\u3002\n\u7f51\u7edc\u670d\u52a1\u5668\u4f1a\u7ed9\u5b83\u6240\u6709\u7684\u6743\u9650\u7b49\u7b49\uff0c\u5141\u8bb8 shell \u8c03\u7528\uff0c\u4e0b\u8f7d\u4efb\u610f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u8fd0\u884c\u5b83\u4eec\u7b49\u7b49\uff0c\u76f4\u5230\u6700\u7ec8\u4f60\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f60\u7684\u76d2\u5b50\u7528\u5b8c\u4e86\u78c1\u76d8\u7a7a\u95f4\uff0c\u4e00\u4e2a\u76ee\u5f55\u6709 8GB \u7684\u200b\u200b\u76d7\u7248\u7535\u5f71\u610f\u5927\u5229\u8bed\u914d\u97f3\uff0c\u901a\u8fc7\u673a\u5668\u4eba\u5728 IRC \u4e0a\u5171\u4eab\u3002\u6211\u5f88\u5e86\u5e78\u6211\u5728\u8fd0\u884c\u653b\u51fb\u7684\u811a\u672c\u51b3\u5b9a\u505a\u4e00\u4e9b\u975e\u5e38\u5371\u9669\u7684\u4e8b\u60c5\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\uff0c\u6bd4\u5982\u4ece\u6216\u591a\u6216\u5c11\u4e0d\u5b89\u5168\u7684\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6781\u5176\u673a\u5bc6\u7684\u4fe1\u606f\uff1a| \uff08\u6211\u53ef\u4ee5\u7528\u90a3\u4e2a\u4ee3\u7801\u5e93\u5728 6 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u6bcf\u5929\u5a31\u4e50 Dailywtf\uff0c\u6211\u6ca1\u6709\u9a97\u4f60\u3002\u5f88\u9057\u61be\u6211\u5728\u6211\u9003\u8131\u4e86\u90a3\u4e2a\u4ee3\u7801\u4e4b\u540e\u53d1\u73b0\u4e86 Dailywtf\uff09 3 \u201c\u6211\u5f88\u5e86\u5e78\u6211\u5728\u811a\u672c\u51b3\u5b9a\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\u6536\u83b7\u6570\u636e\u5e93:|&quot;\u4f60\u600e\u4e48\u77e5\u9053\u7684\uff1f\u5bf9\u4e8e\u6240\u6709\u5bc6\u96c6\u7684\u6d77\u8c5a\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u5728\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u7684\u60c5\u51b5\u4e0b\u8fd9\u6837\u505a\u4e86...... \u2013 Piskvor \u79bb\u5f00\u4e86\u5efa\u7b51\u7269 \u5b83\u53ef\u80fd\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff0c\u4f46\u6570\u636e\u5e93\u65e5\u5fd7\u5e76\u6ca1\u6709\u8868\u660e\u5b83\u505a\u4e86\u591a\u5c11\u3002 \u2013 Kent Fredric \u5728\u4e3b\u9879\u76ee\u5934\u6587\u4ef6\u4e2d\uff0c\u6765\u81ea\u4e00\u4f4d\u8001\u624b COBOL \u7a0b\u5e8f\u5458\uff0c\u4ed6\u83ab\u540d\u5176\u5999\u5730\u7528 C \u7f16\u5199\u4e86\u4e00\u4e2a\u7f16\u8bd1\u5668\uff1a\u201c\u6240\u4ee5\u5982\u679c\u4f60\u5fd8\u8bb0\u58f0\u660e\u4f60\u7684\u5faa\u73af\u53d8\u91cf\uff0c\u4f60\u5c31\u4e0d\u4f1a\u5f97\u5230\u7f16\u8bd1\u5668\u9519\u8bef\u3002\u201d\n0 3 \u53ea\u8981\u60a8\u4f7f\u7528\u6b63\u786e\u7684\u5de5\u5177\u6765\u6784\u5efa\u5305 (WiX)\uff0c\u8fd9\u8fd8\u4e0d\u9519\u3002\u7136\u800c\uff0cVS \u7f16\u8f91\u5668\u548c InstallShield \u662f\u90aa\u6076\u7684\u2014\u2014erikkallen \u8fd9\u7bc7\u6587\u7ae0\u5982\u4f55\u7f16\u5199\u4e0d\u53ef\u7ef4\u62a4\u7684\u4ee3\u7801\u6db5\u76d6\u4e86\u4e00\u4e9b\u4eba\u7c7b\u5df2\u77e5\u7684\u6700\u51fa\u8272\u7684\u6280\u672f\u3002\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u662f\uff1a \u8d2d\u4e70\u4e00\u672c\u5a74\u513f\u547d\u540d\u4e66\uff0c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5bf9\u53ef\u53d8\u540d\u79f0\u611f\u5230\u832b\u7136\u3002 Fred \u662f\u4e00\u4e2a\u7f8e\u5999\u7684\u540d\u5b57\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u6253\u5b57\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u6613\u4e8e\u8f93\u5165\u7684\u53d8\u91cf\u540d\u79f0\uff0c\u5982\u679c\u60a8\u4f7f\u7528 DSK \u952e\u76d8\u8f93\u5165\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528 adsf \u6216 aoeu\u3002\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u63cf\u8ff0\u6027\u53d8\u91cf\u548c\u51fd\u6570\u540d\u79f0\uff0c\u8bf7\u62fc\u9519\u5b83\u4eec\u3002\u901a\u8fc7\u5728\u67d0\u4e9b\u51fd\u6570\u548c\u53d8\u91cf\u540d\u79f0\u4e2d\u62fc\u9519\u5e76\u5728\u5176\u4ed6\u4e2d\u6b63\u786e\u62fc\u5199\uff08\u4f8b\u5982 SetPintleOpening SetPintalClosing\uff09\uff0c\u6211\u4eec\u6709\u6548\u5730\u5426\u5b9a\u4e86 grep \u6216 IDE \u641c\u7d22\u6280\u672f\u7684\u4f7f\u7528\u3002\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\u3002\u901a\u8fc7\u5728\u4e0d\u540c\u7684\u5267\u9662/\u5267\u9662\u62fc\u5199 tory \u6216 tori \u6765\u6dfb\u52a0\u56fd\u9645\u98ce\u5473\u3002\u5728\u547d\u540d\u51fd\u6570\u548c\u53d8\u91cf\u65f6\uff0c\u5927\u91cf\u4f7f\u7528\u62bd\u8c61\u8bcd\uff0c\u5982 it\u3001everything\u3001data\u3001handle\u3001stuff\u3001do\u3001routine\u3001perform \u548c\u6570\u5b57\uff0c\u4f8b\u5982routineX48\u3001PerformDataFunction\u3001DoIt\u3001HandleStuff \u548c do_args_method\u3002\u5c06\u5355\u8bcd\u4e2d\u95f4\u7684\u97f3\u8282\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u968f\u673a\u5927\u5199\u3002\u4f8b\u5982 ComputeRasterHistoGram()\u3002\n\u4f7f\u7528\u5c0f\u5199 l \u8868\u793a\u957f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c10l \u66f4\u53ef\u80fd\u88ab\u8bef\u8ba4\u4e3a\u662f 101\uff0c\u800c\u4e0d\u662f 10l\u3002\u7981\u6b62\u4efb\u4f55\u660e\u663e\u6d88\u9664 uvw wW gq9 2z 5s il17|!j oO08 `&#39;&quot; ;,. m nn rn {[()]} \u6b67\u4e49\u7684\u5b57\u4f53\u3002\u8981\u6709\u521b\u610f\u3002\u53ea\u8981\u8303\u56f4\u89c4\u5219\u5141\u8bb8\uff0c\u91cd\u590d\u4f7f\u7528\u73b0\u6709\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u540d\u79f0\u3002\u7c7b\u4f3c\u5730\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u5173\u7684\u76ee\u7684\uff08\u58f0\u79f0\u662f\u4e3a\u4e86\u8282\u7701\u5806\u6808\u69fd\uff09\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6076\u9b54\u53d8\u4f53\uff0c\u5c06\u53d8\u91cf\u53d8\u5f62\uff0c\u4f8b\u5982\uff0c\u5728\u5f88\u957f\u7684\u65b9\u6cd5\u9876\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u7684\u67d0\u5904\u66f4\u6539\u4ee5\u5fae\u5999\u7684\u65b9\u5f0f\u4e86\u89e3\u53d8\u91cf\u7684\u542b\u4e49\uff0c\u4f8b\u5982\u5c06\u5176\u4ece\u57fa\u4e8e 0 \u7684\u5750\u6807\u8f6c\u6362\u4e3a\u57fa\u4e8e 1 \u7684\u5750\u6807\u3002\u4e00\u5b9a\u4e0d\u8981\u8bb0\u5f55\u8fd9\u79cd\u542b\u4e49\u7684\u53d8\u5316\u3002\u5728\u53d8\u91cf\u6216\u65b9\u6cd5\u540d\u79f0\u4e2d\u4f7f\u7528\u7f29\u5199\u65f6\uff0c\u7528\u540c\u4e00\u4e2a\u8bcd\u7684\u51e0\u79cd\u53d8\u4f53\uff0c\u751a\u81f3\u5076\u5c14\u62fc\u5199\u51fa\u6765\u3002\u8fd9\u6709\u52a9\u4e8e\u6253\u8d25\u90a3\u4e9b\u4f7f\u7528\u6587\u672c\u641c\u7d22\u53ea\u7406\u89e3\u7a0b\u5e8f\u7684\u67d0\u4e9b\u65b9\u9762\u7684\u61d2\u60f0\u7684\u6d41\u6d6a\u6c49\u3002\u8003\u8651\u5c06\u53d8\u4f53\u62fc\u5199\u4f5c\u4e3a\u7b56\u7565\u7684\u53d8\u4f53\uff0c\u4f8b\u5982\u6df7\u5408\u56fd\u9645\u989c\u8272, \u5e26\u6709\u7f8e\u56fd\u8272\u5f69\u548c\u82b1\u82b1\u516c\u5b50\u7684\u9177\u4e50rz\u3002\u5982\u679c\u60a8\u5b8c\u6574\u5730\u62fc\u51fa\u59d3\u540d\uff0c\u5219\u6bcf\u4e2a\u59d3\u540d\u53ea\u6709\u4e00\u79cd\u53ef\u80fd\u7684\u62fc\u5199\u65b9\u5f0f\u3002\u8fd9\u4e9b\u5bf9\u4e8e\u7ef4\u62a4\u7a0b\u5e8f\u5458\u6765\u8bf4\u592a\u5bb9\u6613\u8bb0\u4f4f\u4e86\u3002\u56e0\u4e3a\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7f29\u5199\u4e00\u4e2a\u8bcd\uff0c\u901a\u8fc7\u7f29\u5199\uff0c\u4f60\u53ef\u4ee5\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u5177\u6709\u76f8\u540c\u7684\u660e\u663e\u76ee\u7684\u3002\u4f5c\u4e3a\u989d\u5916\u7684\u597d\u5904\uff0c\u7ef4\u62a4\u7a0b\u5e8f\u5458\u751a\u81f3\u53ef\u80fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u5b83\u4eec\u662f\u5355\u72ec\u7684\u53d8\u91cf\u3002\u4f7f\u7528\u8bf8\u5982 LancelotsFavouriteColour \u4e4b\u7c7b\u7684\u5e38\u91cf\u540d\u79f0\u800c\u4e0d\u662f\u84dd\u8272\uff0c\u5e76\u5c06\u5176\u6307\u5b9a\u4e3a $0204FB \u7684\u5341\u516d\u8fdb\u5236\u503c\u3002\u989c\u8272\u770b\u8d77\u6765\u4e0d\u9519......", "note_en": "What is the most evil or dangerous code fragment you have ever seen in a production environment at a company? I&#39;ve never encountered production code that I would consider to be deliberately malicious and evil, so I&#39;m quite curious to see what others have found.\n The most dangerous code I have ever seen was a stored procedure two linked-servers away from our core production database server. The stored procedure accepted any NVARCHAR(8000) parameter and executed the parameter on the target production server via an double-jump sp_executeSQL command. That is to say, the sp_executeSQL command executed another sp_executeSQL command in order to jump two linked servers. Oh, and the linked server account had sysadmin rights on the target production server.\n  1\n    I&#39;ve written about one application I&#39;ve worked on before  here and  here. To put it simply, my company inherited 130,000 lines of garbage from India. The application was written in C#; it was a teller app, the same kind of software tellers use behind the counter whenever you go to the bank. The app crashed 40-50 times a day, and it simply couldn&#39;t be refactored into working code. My company had to re-write the entire app over the course of 12 months.\n Why is this application evil? Because the sight of the source code was enough to drive a sane man mad and a mad man sane. The twisted logic used to write this application could have only been inspired by a Lovecraftian nightmare. Unique features of this application included:\n Out of 130,000 lines of code, the entire application contained 5 classes (excluding form files). All of these were public static classes. One class was called Globals.cs, which contained 1000s and 1000s and 1000s of public static variables used to hold the entire state of the application. Those five classes contained 20,000 lines of code total, with the remaining code embedded in the forms.\n You have to wonder, how did the programmers manage to write such a big application without any classes? What did they use to represent their data objects? It turns out the programmers managed to re-invent half of the concepts we all learned about OOP simply by combining ArrayLists, HashTables, and DataTables. We saw a lot of this:\n  Keep in mind, none of the data structures above are strongly typed, so you have to cast whatever mystery object you get out of the list to the correct type. It&#39;s amazing what kind of complex, Rube Goldberg-like data structures you can create using just ArrayLists, HashTables, and DataTables.\n To share an example of how to use the object model detailed above, consider Accounts: the original programmer created a seperate HashTable for each concievable property of an account: a HashTable called hstAcctExists, hstAcctNeedsOverride, hstAcctFirstName. The keys for all of those hashtables was a \u201c|\u201d separated string. Conceivable keys included \u201c123456|DDA\u201d, \u201c24100|SVG\u201d, \u201c100|LNS\u201d, etc.\n Since the state of the entire application was readily accessible from global variables, the programmers found it unnecessary to pass parameters to methods. I&#39;d say 90% of methods took 0 parameters. Of the few which did, all parameters were passed as strings for convenience, regardless of what the string represented.\n Side-effect free functions did not exist. Every method modified 1 or more variables in the Globals class. Not all side-effects made sense; for example, one of the form validation methods had a mysterious side effect of calculating over and short payments on loans for whatever account was stored Globals.lngAcctNum.\n Although there were lots of forms, there was one form to rule them all: frmMain.cs, which contained a whopping 20,000 lines of code. What did frmMain do? Everything. It looked up accounts, printed receipts, dispensed cash, it did everything.\n Sometimes other forms needed to call methods on frmMain. Rather than factor that code out of the form into a seperate class, why not just invoke the code directly:\n As bad as it already is creating an invisible form to perform business logic, how do you think the form knew which account to look up? That\u2019s easy: the form could access Globals.lngAcctNum and Globals.strAcctType. (Who doesn&#39;t love Hungarian notation?)\n Code-reuse was a synonym for ctrl-c, ctrl-v. I found 200-line methods copy/pasted across 20 forms.\n The application had a bizarre threading model, something I like to call the thread-and-timer model: each form that spawned a thread had a timer on it. Each thread that was spawned kicked off a timer which had a 200 ms delay; once the timer started, it would check to see if the thread had set some magic boolean, then it would abort the thread. The resulting ThreadAbortException was swallowed.\n You&#39;d think you&#39;d only see this pattern once, but I found it in at least 10 different places.\n Speaking of threads, the keyword &#34;lock&#34; never appeared in the application. Threads manipulated global state freely without taking a lock.\n Every method in the application contained a try/catch block. Every exception was logged and swallowed.\n  Some genius figured out that you can hook multiple form controls up to the same event handler. How did the programmer handle this?\n private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &#34;btnBS&#34;) { UpdateText(); } if (txtEdit.Text.Trim() != &#34;Error&#34;) { SaveFormState(); } switch (btn.Name) { case &#34;btnC&#34;: ResetValues(); break; case &#34;btnCE&#34;: txtEdit.Text = &#34;0&#34;; break; case &#34;btnBS&#34;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &#34;0&#34; : EditText); } break; case &#34;btnPercent&#34;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); } blnEqualOccurred = false; blnStartedNew = true; } break; case &#34;btnAdd&#34;: case &#34;btnSubtract&#34;: case &#34;btnMultiply&#34;: case &#34;btnDivide&#34;: blnAfterOp = true; if (txtEdit.Text.Trim() == &#34;Error&#34;) { btnC.PerformClick(); return; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&#34;Error&#34;); } strOpPressed = btn.Text; blnEqualOccurred = false; blnNumPressed = false; } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &#34;Error&#34;) { AddToTape(&#34;Error&#34;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &#34;Error&#34;; } break; case &#34;btnEqual&#34;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&#34;Error&#34;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = false; blnEqualOccurred = true; } strOpPressed = string.Empty; } } break; case &#34;btnSign&#34;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue)); break; } }}\n strDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked ? &#34;D&#34; : chkCredits.Checked ? &#34;C&#34; : &#34;N&#34;;\n  if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\n Here&#39;s a code snippet which demonstrates the typical misuse of the StringBuilder. Note how the programmer concats a string in a loop, then appends the resulting string to the StringBuilder:\n private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_chknum&#34;].ToString().PadLeft(8, &#39; &#39;); strTemp += &#34; &#34;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trandt&#34;]).ToString(&#34;MM/dd/yyyy&#34;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_DrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_CrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trancd&#34;].ToString().PadLeft(4, &#39; &#39;); strTemp += &#34; &#34;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_desc&#34;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();}\n No primary keys, indexes, or foreign key constraints existed on tables, nearly all fields were of type varchar(50), and 100% of fields were nullable. Interestingly, bit fields were not used to store boolean data; instead a char(1) field was used, and the characters &#39;Y&#39; and &#39;N&#39; used to represent true and false respectively.\n ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null, @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS declare @WhereCond Varchar(1000) declare @strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; If not @TellerID is null Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) If not @CashDrawer is null Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) If not @AcctNum is null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) If not @StartDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; If not @EndDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; If not @TranCode is null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) If not @EndTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) If not @StartTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) If not (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) --Get the Teller Transaction Records according to the filters Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) as [Transaction Description], TT.AcctNbr as [Account Number], TT.TranID as [Transaction Number], Convert(varchar,TT.ActivityDateTime,101) as [Activity Date], Convert(varchar,TT.EffDate,101) as [Effective Date], Convert(varchar,TT.PostDate,101) as [Post Date], Convert(varchar,TT.ActivityDateTime,108) as [Time], TT.BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT.TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery)\n With all that said, the single biggest problem with this 130,000 line application this: no unit tests.\n  10  And the depressing thing is that somewhere, some programmer that worked on that code, thinks they did a good job and is showing it off on his resume. &#34;Unskilled and Unaware of it&#34;\r \r\u2013\u00a0 Sergio Acosta\n  hey you i writted this code adn i think its prety good if you think you cuold do better you shoud try\r \r\u2013\u00a0 Beska\n  A very watered down version of some of the management history ended up on the DailyWTF today:  thedailywtf.com/Articles/eTeller-Horror.aspx\r \r\u2013\u00a0 Juliet\n      4  LOL - that&#39;s like handing out payslips, bank statements etc in transparent envelopes. :-)\r \r\u2013\u00a0 Christian Hayter\n    Yowch. I found what looked like nicely-hashed passwords in a commercial web app&#39;s database once. Turned out they were just plain text stored in a VARBINARY column so you couldn&#39;t tell at first glance.\r \r\u2013\u00a0 Matt Gibson\n  Sad to say, that&#39;s basically the password encryption in a project I inherited. Albeit their old custom written base64 encoding function did it wrong, so I guess there&#39;s solice in that ;-)\r \r\u2013\u00a0 Allbite\n    In a system which took credit card payments we used to store the full credit card number along with name, expiration date etc.\n Turns out this is illegal, which is ironic given the we were writing the program for the Justice Department at the time.\n  5  Does anybody know how amazon solves this problem? Or is it legal if you ask for the users permission?\r \r\u2013\u00a0 Davy Landman\n      @Davy - encryption. It&#39;s legal to store if it&#39;s encrypted and only accessible on need-to-know. There are lots of rules about strength, retention, DMZs etc, see here  pcisecuritystandards.org/security_standards/pci_dss.shtml\r \r\u2013\u00a0 Luke Schafer\n      5  Good thing there was a FIXME so the IDE could direct you to that line.\r \r\u2013\u00a0 Josh Lee\n  @Chadworthington: If it was intentional the comment would have been /* DON&#39;T FIXME! */ ;P\r \r\u2013\u00a0 David\n  Isn&#39;t this kind of thing optimized out by compilers when building a commercial release?\r \r\u2013\u00a0 Attila Kun\n  In this situation the compiler did not &#34;optimize out&#34; the loop; what would it &#34;optimize&#34; to? Also, &#34;intentional sabotage&#34; was a definite possibility. The &#34;FIXME&#34; could have been for deniability.\r \r\u2013\u00a0 Dour High Arch\n    ( I literally spent an hour trying to work out how that worked before I realised they  wern&#39;t the same variable )\n Include 50 files, which each include 50 files, and stuff is performed linearly/procedurally across all 50 files in conditional and unpredictable ways.\n   Now consider $x contains a value from your URL ( register globals magic ), so nowhere in your code is it obvious what variable your working with becuase its all determined by the url.\n Now consider what happens when the contents of that variable can be a url specified by the websites user. Yes, this may not make sense to you, but it creates a variable named that url, ie:\n  except it cant be directly accessed, you have to use it via the double $ technique above.\n Additionally, when its possible for a user to specify a variable on the URL which indicates which file to include, there are nasty tricks like\n   and &#39;evilcode.php&#39; prints its code plaintext, and Php is inappropriately secured, php will just trundle off, download evilcode.php, and execute it as the user of the web-server.\n The web-sever will give it all its permissions etc, permiting shell calls, downloading arbitrary binaries and running them, etc etc, until eventually you wonder why you have a box running out of disk space, and one dir has 8GB of pirated movies with italian dubbing, being shared on IRC via a bot.\n I&#39;m just thankful I discovered that atrocity before the script running the attack decided to do something really dangerous like harvest extremely confidential information from the more or less unsecured database :|\n ( I could entertain the dailywtf every day for 6 months with that codebase, I kid you not. Its just a shame I discovered the dailywtf after I escaped that code )\n  3  &#34;I&#39;m just thankful I discovered that atrocity before the script decided to harvest the database :|&#34; How would you know? For all intensive porpoises, it may already have done that without anyone noticing...\r \r\u2013\u00a0 Piskvor left the building\n  It may have, but the database logs didn&#39;t indicate much that it did.\r \r\u2013\u00a0 Kent Fredric\n    In the main project header file, from an old-hand COBOL programmer, who was inexplicably writing a compiler in C:\n  &#34;So you won&#39;t get a compiler error if you forget to declare your loop variables.&#34;\n  0\n    3  It&#39;s not so bad as long as you use the correct tools to build the package (WiX). The VS editor, and InstallShield, are evil, though\r \r\u2013\u00a0 erikkallen\n    This article  How to Write Unmaintainable Code covers some of the most brilliant techniques known to man. Some of my favorite ones are:\n   Buy a copy of a baby naming book and you&#39;ll never be at a loss for variable names. Fred is a wonderful name, and easy to type. If you&#39;re looking for easy-to-type variable names, try adsf or aoeu if you type with a DSK keyboard.\n  If you must use descriptive variable and function names, misspell them. By misspelling in some function and variable names, and spelling it correctly in others (such as SetPintleOpening SetPintalClosing) we effectively negate the use of grep or IDE search techniques. It works amazingly well. Add an international flavor by spelling tory or tori in different theatres/theaters.\n  In naming functions and variables, make heavy use of abstract words like it, everything, data, handle, stuff, do, routine, perform and the digits e.g. routineX48, PerformDataFunction, DoIt, HandleStuff and do_args_method.\n  Randomly capitalize the first letter of a syllable in the middle of a word. For example ComputeRasterHistoGram().\n  Use lower case l to indicate long constants. e.g. 10l is more likely to be mistaken for 101 that 10L is. Ban any fonts that clearly disambiguate uvw wW gq9 2z 5s il17|!j oO08 `&#39;&#34; ;,. m nn rn {[()]}. Be creative.\n  Wherever scope rules permit, reuse existing unrelated variable names. Similarly, use the same temporary variable for two unrelated purposes (purporting to save stack slots). For a fiendish variant, morph the variable, for example, assign a value to a variable at the top of a very long method, and then somewhere in the middle, change the meaning of the variable in a subtle way, such as converting it from a 0-based coordinate to a 1-based coordinate. Be certain not to document this change in meaning.\n  When using abbreviations inside variable or method names, break the boredom with several variants for the same word, and even spell it out longhand once in while. This helps defeat those lazy bums who use text search to understand only some aspect of your program. Consider variant spellings as a variant on the ploy, e.g. mixing International colour, with American color and dude-speak kulerz. If you spell out names in full, there is only one possible way to spell each name. These are too easy for the maintenance programmer to remember. Because there are so many different ways to abbreviate a word, with abbreviations, you can have several different variables that all have the same apparent purpose. As an added bonus, the maintenance programmer might not even notice they are separate variables.\n  Use constant names like LancelotsFavouriteColour instead of blue and assign it hex value of $0204FB. The color looks iden\n......", "posttime": "2021-08-08 21:50:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u751f\u4ea7,code,quot", "title": "\u60a8\u5728\u751f\u4ea7\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\uff1f", "title_en": "What is the most EVIL code you have ever seen in production?", "transed": 1, "url": "https://stackoverflow.com/questions/434414/what-is-the-most-evil-code-you-have-ever-seen-in-a-production-enterprise-environ", "via": "", "real_tags": ["\u4ee3\u7801", "\u751f\u4ea7", "code", "quot"]}, {"category": "", "categoryclass": "", "imagename": "9c198ae4180f01f9f3651ce4f301a6c0.jpg", "infoid": 1072111, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7fa4\u4f53\u673a\u5668\u4eba\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u65b0\u4e14\u6781\u5177\u524d\u666f\u7684\u7814\u7a76\u9886\u57df\uff0c\u9700\u8981\u5f00\u53d1\u53ef\u4ee5\u4e00\u8d77\u79fb\u52a8\u548c\u5b8c\u6210\u4efb\u52a1\u7684\u591a\u673a\u5668\u4eba\u56e2\u961f\u3002\u673a\u5668\u4eba\u7fa4\u53ef\u4ee5\u6709\u8bb8\u591a\u6709\u4ef7\u503c\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u641c\u7d22\u548c\u6551\u63f4\u4efb\u52a1\u4e2d\u4e3a\u4eba\u7c7b\u63d0\u4f9b\u652f\u6301\uff0c\u6216\u8005\u5141\u8bb8\u4ed6\u4eec\u76d1\u89c6\u96be\u4ee5\u8fdb\u5165\u7684\u5730\u7406\u533a\u57df\u3002 Fraunhofer FKIE \u548c\u5fb7\u56fd\u6ce2\u6069\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u6700\u8fd1\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7406\u8bba\u7ed3\u6784\uff0c\u53ef\u4ee5\u6307\u5bfc\u81ea\u7ec4\u7ec7\u7fa4\u7cfb\u7edf\u7684\u53d1\u5c55\u3002\u8be5\u7ed3\u6784\u5728 Sage \u7684 Adaptive Behavior \u671f\u520a\u4e0a\u53d1\u8868\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u4e3a\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u6574\u4f53\u89c6\u89d2\uff0c\u8be5\u56e2\u961f\u5c06\u5176\u79f0\u4e3a\u201c\u8054\u5408\u4eba-\u7fa4\u5faa\u73af\u201d\u3002 \u201c\u6211\u4eec\u4e13\u6ce8\u4e8e\u7814\u7a76\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u7684\u673a\u5668\u4eba\u6280\u672f\u5b50\u9886\u57df\uff0c\u201d\u8fdb\u884c\u8fd9\u9879\u7814\u7a76\u7684\u7814\u7a76\u4eba\u5458\u4e4b\u4e00\u4e54\u7eb3\u65af D.\u54c8\u65af\u5df4\u8d6b\u544a\u8bc9 TechXplore\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5bf9\u4e8e\u6211\u4eec\u5982\u4f55\u6700\u597d\u5730\u8bbe\u8ba1\u672a\u6765\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\uff0c\u8fd8\u6ca1\u6709\u666e\u904d\u7684\u770b\u6cd5\u3002\u6211\u4eec\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u4e3a\u7814\u7a76\u754c\u63d0\u4f9b\u4e00\u4e2a\u7406\u8bba\u57fa\u7840\uff0c\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u4eba\u7c7b\u4e2d\u7684\u5b64\u7acb\u89e3\u51b3\u65b9\u6848\u8054\u7cfb\u8d77\u6765\u2014\u2014\u7fa4\u4e92\u52a8\u3002\u201d\u5f53\u7814\u7a76\u4eba\u5458\u8bd5\u56fe\u4e3a\u5728\u73b0\u5b9e\u4e16\u754c\u73af\u5883\u4e2d\u8868\u73b0\u826f\u597d\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u8bbe\u8ba1\u201c\u5faa\u73af\u201d\u65f6\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5e94\u8be5\u5168\u9762\u8003\u8651\u8fd9\u4e9b\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u4eba\u7c7b\u5982\u4f55\u5411\u673a\u5668\u4eba\u7fa4\u53d1\u51fa\u4ed6\u4eec\u7684\u610f\u56fe\u662f\u4e0d\u591f\u7684\uff0c\u65b9\u6cd5\u8fd8\u5e94\u8be5\u8003\u8651\u673a\u5668\u4eba\u7fa4\u5982\u4f55\u5411\u4eba\u7c7b\u7528\u6237\u63d0\u4f9b\u53cd\u9988\u3002 \u201c\u6211\u4eec\u4ece\u7406\u8bba\u7684\u89d2\u5ea6\u63d0\u51fa\u95ee\u9898\uff0c\u5728\u590d\u6742\u4e16\u754c\u7684\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u4eba\u7c7b\u8ba4\u77e5\u7684\u597d\u5904\u4e0e\u81ea\u7ec4\u7ec7\u673a\u5668\u4eba\u7fa4\u7684\u597d\u5904\u7ed3\u5408\u8d77\u6765\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u53d7\u751f\u7269\u542f\u53d1\u7684\u8bbe\u8ba1\u9690\u55bb\uff0c\u5373\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u5b83\u672c\u8d28\u4e0a\u63d0\u51fa\u7fa4\u4f53\u5e94\u8be5\u81ea\u6211\u7ec4\u7ec7\u6210\u4eba\u4f53\u5e76\u50cf\u4eba\u4f53\u4e00\u6837\u884c\u4e8b\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u79cd\u89c2\u70b9\u53ef\u80fd\u662f\u8bbe\u8ba1\u4eba\u7c7b\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u9690\u55bb-\u80fd\u591f\u5904\u7406\u73b0\u5b9e\u4e16\u754c\u52a8\u6001\u7684\u7fa4\u5faa\u73af\u3002\u201d\u5728\u673a\u5668\u4eba\u7fa4\u4f5c\u4e3a\u4eba\u7c7b\u7684\u5ef6\u4f38\uff08\u5373\u901a\u8fc7\u8986\u76d6\u4ed6\u4eec\u65e0\u6cd5\u8986\u76d6\u7684\u533a\u57df\u6765\u5e2e\u52a9\u4eba\u7c7b\u5b8c\u6210\u4efb\u52a1\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u9690\u55bb\u53ef\u7528\u4e8e\u5bfc\u822a\u4eba\u7c7b\u590d\u6742\u7684\u8bbe\u8ba1\u7a7a\u95f4\u3002\u7fa4\u4e92\u52a8\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f00\u53d1\u66f4\u9ad8\u6548\u4e14\u53ef\u5e94\u7528\u4e8e\u66f4\u590d\u6742\u573a\u666f\u7684\u4eba\u7c7b\u96c6\u7fa4\u7cfb\u7edf\u3002 \u201c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8be2\u95ee\u771f\u5b9e\u7684\u8eab\u4f53\u90e8\u4f4d\u63a7\u5236\u611f\u89c9\u5982\u4f55\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230\u4eba\u7fa4\u754c\u9762\u8bbe\u8ba1\u4e0a\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u89e3\u91ca\u9053\u3002 \u201c\u5f53\u4f60\u8d70\u5728\u8857\u4e0a\u65f6\uff0c\u4f60\u6709\u591a\u5c11\u6b21\u6709\u610f\u8bc6\u5730\u8003\u8651\u4f60\u7684\u817f\u90e8\u8fd0\u52a8\uff1f\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\u3002\u4ece\u8fdb\u5316\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\uff1b\u9648\u89c4\u5b9a\u578b\u7684\u8eab\u4f53\u63a7\u5236\u7531\u795e\u7ecf\u5b50\u7cfb\u7edf\u8d1f\u8d23\uff0c\u4ee5\u4fbf\u6709\u610f\u8bc6\u7684\u8ba4\u77e5\u7cfb\u7edf\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u590d\u6742\u7684\u4e16\u754c\u52a8\u6001\u3002\u201d Hasbach \u548c\u4ed6\u7684\u540c\u4e8b\u7684\u8bba\u6587\u5f3a\u8c03\u4e86\u4f7f\u7528\u4eba\u7c7b\u72b6\u6001\u5206\u7c7b\u4f5c\u4e3a\u63d0\u4f9b\u7ed9\u673a\u5668\u4eba\u7fa4\u7684\u63a7\u5236\u8f93\u5165\u7684\u6f5c\u5728\u597d\u5904\uff0c\u800c\u4e0d\u662f\u8ba9\u4eba\u7c7b\u7528\u6237\u59cb\u7ec8\u63a7\u5236\u7fa4\u3002\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u6bd4\u55bb\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u53d1\u5c55\u7684\u7075\u611f\u3002\u8fd9\u662f\u751f\u7269\u7fa4\uff08\u4f8b\u5982\u8682\u8681\u3001\u9e1f\u7c7b\uff09\u548c\u5927\u8111\u5171\u4eab\u7c7b\u4f3c\u7684\u81ea\u7ec4\u7ec7\u539f\u5219\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u539f\u5219\u5bfc\u81f4\u8ba4\u77e5\u548c\u51b3\u7b56\u3002\n\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u601d\u60f3\u8fd8\u6ca1\u6709\u5728\u5de5\u7a0b\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u63a2\u7d22\u3002\u7814\u7a76\u4eba\u5458\u7684\u5de5\u4f5c\u53ef\u4ee5\u4e3a\u5f00\u53d1\u53d7\u5927\u8111\u548c\u751f\u7269\u7fa4\u542f\u53d1\u7684\u673a\u5668\u4eba\u7fa4\u5f00\u8f9f\u6709\u8da3\u7684\u53ef\u80fd\u6027\u3002 \u201c\u8bbe\u8ba1\u4f5c\u4e3a\u4eba\u4f53\u5ef6\u4f38\u7684\u673a\u5668\u4eba\u7fa4\u6d89\u53ca\u5728\u7f51\u7edc\u7ea7\u522b\u5c06\u795e\u7ecf\u903b\u8f91\u96c6\u6210\u5230\u673a\u5668\u4eba\u7fa4\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4ec5\u53d7\u5230\u6709\u9650\u7684\u5173\u6ce8\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u6211\u4eec\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u88ab\u89c6\u4e3a\u795e\u7ecf\u7cfb\u7edf\u7684\u60f3\u6cd5\u3002\u201d\u672a\u6765\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u8bbe\u8ba1\u7684\u7406\u8bba\u65b9\u6cd5\u53ef\u4ee5\u6fc0\u53d1\u65b0\u7cfb\u7edf\u7684\u5f00\u53d1\uff0c\u4f7f\u4eba\u7c7b\u548c\u6210\u7fa4\u7684\u200b\u200b\u673a\u5668\u4eba\u4e4b\u95f4\u80fd\u591f\u6709\u6548\u4ea4\u4e92\u3002\u5728\u4ed6\u4eec\u7684\u8bba\u6587\u4e2d\uff0cHasbach \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u8fd8\u5c55\u793a\u4e86\u4e00\u4e2a\u6709\u8da3\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u8be5\u5b9e\u9a8c\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u7fa4\u4f53\u89c6\u4e3a\u4e00\u4e2a\u81ea\u7ec4\u7ec7\u7684\u754c\u9762\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6982\u5ff5\u7eaf\u5c5e\u7406\u8bba\u6027\u8d28\uff0c\u4f46\u6211\u4eec\u76ee\u524d\u6b63\u5728\u5b9e\u65bd\u539f\u578b\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u51ed\u7ecf\u9a8c\u7814\u7a76\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5c06\u7528\u4e8e\u66f4\u65b0\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u4f5c\u4e3a\u5173\u4e8e\u5982\u4f55\u8bbe\u8ba1\u4eba\u4e0e\u7fa4\u4f53\u4ea4\u4e92\u7684\u79d1\u5b66\u7406\u8bba\u3002\u201d\u5f15\u6587\uff1a\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7c7b\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5\uff082021 \u5e74\uff0c8 \u6708 5 \u65e5\uff09\uff0c2021 \u5e74 8 \u6708 8 \u65e5\u68c0\u7d22\u81ea https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human- swarm.html \u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e86\u51fa\u4e8e\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u76ee\u7684\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\uff0c\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "Swarm robotics is a relatively new and highly promising research field, which entails the development of multi-robot teams that can move and complete tasks together. Robot swarms could have numerous valuable applications. For instance, they could support humans during search and rescue missions or allow them to monitor geographical areas that are difficult to access.    Researchers at Fraunhofer FKIE and University of Bonn in Germany have recently devised a theoretical construct that could guide the development of self-organizing  -swarm systems. This construct, presented in a paper published in Sage&#39;s Adaptive Behavior journal, provides a new holistic perspective to human-swarm interaction, which the team refers to as &#34;joint human-swarm loops.&#34;\n  &#34;We focus on the subfield of robotics that investigates human-swarm interaction,&#34; Jonas D. Hasbach, one of the researchers who carried out the study, told TechXplore. &#34;So far, there exists no general perspective on how we could best design future human-swarm interactions. The aim of our article was to provide the research community with a theoretical base, a way of thinking, that can relate isolated solutions in human-swarm interaction.&#34;\n  When researchers are trying to design &#34;loops&#34; for human-swarm interactions that perform well in real-world settings, they should ideally consider these interactions in their totality. For instance, specifying how humans may signal their intent to a robot swarm is not enough and approaches should also consider how the robot swarm can offer feedback to human users.\n  &#34;We asked from a theoretical point of view how we could join the benefits of human cognition with the benefits of self-organizing robot swarms in the context of a complex world,&#34; Hasbach said. &#34;This led to a bio-inspired metaphor for design, the swarm-amplified human, which essentially proposes that the swarm should self-organize itself into and act like human body parts. We hypothesize that this view may be a good metaphor for designing human-swarm loops that are capable of dealing with real-world dynamics.&#34;\n  In situations where a robot swarm acts as an extension of humans (i.e., helping humans to complete a task by covering areas they cannot cover), the design metaphor introduced by this team of researchers could be used to navigate the complex design space of human-swarm interactions. This could lead to the development of human-swarm systems that are more efficient and can be applied in more complex scenarios.\n   &#34;For example, we can ask how real body part control feels like and map this onto the human-swarm interface design,&#34; Hasbach explained. &#34;How often have you consciously thought about your leg movement when walking down the street? Probably not that often. This makes sense from an evolutionary perspective; stereotypical body control is taken care of by neural subsystems so that the conscious cognitive system can deal with more complex world dynamics.&#34;\n     The paper by Hasbach and his colleagues highlights the potential benefits of using human state classification as a control input fed to a robot swarm, rather than having a human user controlling the swarm at all times. The design metaphor introduced by the researchers could also serve as an inspiration for the development of what is sometimes referred to as &#34;swarm cognition.&#34; This is the idea that biological swarms (e.g., ants, bird folks) and the brain share similar self-organizing principles that lead to cognition and decision making.\n  The idea of &#34;swarm cognition&#34; has not yet been explored in the context of engineering. The researchers&#39; work could open interesting possibilities for the for the development of robot swarms inspired both by the brain and biological swarms.\n  &#34;Designing robot swarms that are an extension of the human body relates to integrating neural logic into robot swarms on the network level, which has received only limited attention so far,&#34; Hasbach said. &#34;We have proposed some ideas on how   could be thought of as neural systems.&#34;\n  In the future, the theoretical approach devised by this team of researchers could inspire the development of new systems that enable effective interactions between humans and swarms of robots. In their paper, Hasbach and his colleagues also presented the results of an interesting experiment that showed how a   swarm could be considered as a self-organized interface in and of itself.\n  &#34;So far, our concepts are of purely theoretical nature, but we are currently implementing prototypes so that we can empirically investigate the swarm-amplified human,&#34; Hasbach said. &#34;The   will be used to update the swarm-amplified human as a scientific theory on how to design human-swarm interaction.&#34;             Citation: A theoretical approach for designing a self-organizing human-swarm system (2021, August 5) retrieved 8 August 2021 from https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2021-08-08 21:49:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7ec4\u7ec7,approach,\u4eba\u7c7b", "title": "\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5", "title_en": "A theoretical approach for designing a self-organizing human-swarm system", "transed": 1, "url": "https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7ec4\u7ec7", "approach", "\u4eba\u7c7b"]}]