[{"category": "", "categoryclass": "", "imagename": "", "infoid": 1072121, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6700\u8fd1\u5728 Twitter \u4e0a\u91cd\u65b0\u8ba8\u8bba\u4e86 macOS \u6c99\u7bb1\u5bf9\u5e94\u7528\u200b\u200b\u7a0b\u5e8f\u53ef\u4ee5\u540c\u65f6\u8bbf\u95ee\u7684\u6253\u5f00\u6587\u4ef6\u6570\u91cf\u7684\u9650\u5236\u3002\u7531\u4e8e\u8fd9\u4e2a\u9650\u5236\uff0c\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u9047\u5230\u95ee\u9898\uff0c\u5e76\u4e14\u5728 Apple \u4e4b\u5916\u6ca1\u6709\u5f88\u591a\u6280\u672f\u7ec6\u8282\u53ef\u7528\uff0c\u6240\u4ee5\u6211\u60f3\u5206\u4eab\u6211\u5bf9\u5b83\u7684\u7406\u89e3\u3002 macOS \u53ea\u5141\u8bb8\u6c99\u76d2\u5e94\u7528\u7a0b\u5e8f\u4e00\u6b21\u8bbf\u95ee\u6709\u9650\u6570\u91cf\u7684\u6587\u4ef6\uff0c\u4f46\u5e94\u7528\u7a0b\u5e8f\u65e0\u6cd5\u67e5\u8be2\u5b83\u53ef\u4ee5\u6253\u5f00\u591a\u5c11\u4e2a\u6587\u4ef6\uff0c\u6216\u8005\u662f\u5426\u63a5\u8fd1\u9650\u5236\u3002\u5b9e\u9645\u4e0a\uff0c\u6b64\u9650\u5236\u53d6\u51b3\u4e8e\u8ba1\u7b97\u673a\u4e2d\u5b89\u88c5\u7684 RAM \u91cf\u4ee5\u53ca\u5176\u4ed6\u5e94\u7528\u7a0b\u5e8f\u6253\u5f00\u7684\u6587\u4ef6\u6570\u3002\u7531\u4e8e\u6b64\u9650\u5236\u4ec5\u5f71\u54cd\u53ef\u4ee5\u6279\u91cf\u5904\u7406\u6570\u5343\u4e2a\u6587\u4ef6\u7684\u5e94\u7528\u7a0b\u5e8f\u4ee5\u53ca\u60f3\u8981\u8fd9\u6837\u505a\u7684\u7528\u6237\uff0c\u56e0\u6b64\u5c3d\u7ba1\u5b83\u5df2\u7ecf\u5f71\u54cd\u4e86 Apple \u81ea\u5df1\u7684\u4e00\u4e9b\u5e94\u7528\u7a0b\u5e8f\uff0c\u4f46\u8bb8\u591a\u7528\u6237\u548c\u5f00\u53d1\u4eba\u5458\u4ecd\u7136\u6ca1\u6709\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\u3002\u6211\u7b2c\u4e00\u6b21\u610f\u8bc6\u5230\u8fd9\u4e2a\u9650\u5236\u662f\u5728 2012 \u5e74\u521d\u3002\u6211\u6b63\u5728\u5f00\u53d1\u4e00\u4e2a\u53ef\u4ee5\u6fc0\u6d3b\u5b57\u4f53\u6587\u4ef6\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u867d\u7136\u5927\u591a\u6570\u7528\u6237\u4e00\u6b21\u53ea\u4f7f\u7528\u5b83\u6765\u5904\u7406\u5c11\u6570\u5b57\u4f53\uff0c\u4f46\u5728\u9650\u5236\u4e4b\u540e\u6211\u4eec\u5f88\u5feb\u5c31\u6536\u5230\u4e86\u7528\u6237\u7684\u652f\u6301\u8bf7\u6c42\u5728 OS X 10.7 \u7684\u66f4\u65b0\u4e2d\u5f15\u5165\u3002\u7136\u800c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bfc\u81f4\u95ee\u9898\u7684\u539f\u56e0\u5e76\u4e0d\u660e\u663e\u3002\u5728\u524d\u51e0\u767e\u6b21\u6fc0\u6d3b\u540e\uff0c\u5b57\u4f53\u6fc0\u6d3b\u5c06\u5f00\u59cb\u5931\u8d25\u5e76\u663e\u793a\u901a\u7528\u9519\u8bef\u4ee3\u7801\u3002\u7cfb\u7edf\u65e5\u5fd7\u62a5\u544a\u6c99\u7bb1\u62d2\u7edd\u6211\u4eec\u5e94\u7528\u7a0b\u5e8f\u7684\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u4f46\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6ca1\u6709\u88ab\u6c99\u7bb1\u5316\uff0c\u6240\u4ee5\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u9519\u8bef\u3002\u5c3d\u7ba1\u6211\u4eec\u8bd5\u56fe\u901a\u8fc7\u81ea\u5df1\u548c Apple \u5f00\u53d1\u4eba\u5458\u6280\u672f\u652f\u6301\u7684\u5e2e\u52a9\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u76f4\u5230\u51e0\u4e2a\u6708\u540e\u7684 WWDC 2012\uff0c\u6211\u4eec\u624d\u80fd\u591f\u5f97\u5230\u4e3a\u4ec0\u4e48\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u7684\u7b54\u6848\u3002\u5728 WWDC\uff0c\u6211\u5c3d\u5feb\u4e3a\u5b9e\u9a8c\u5ba4\u6392\u961f\uff0c\u5e76\u6700\u7ec8\u4e0e\u4e00\u4f4d\u4ece\u4e8b\u5b57\u4f53\u6fc0\u6d3b\u5de5\u4f5c\u7684\u5de5\u7a0b\u5e08\u4ea4\u8c08\u3002\u5728\u4e0e\u4ed6\u5206\u4eab\u4e86\u4e00\u4e9b\u6f14\u793a\u95ee\u9898\u7684\u4ee3\u7801\u540e\uff0c\u4ed6\u80fd\u591f\u51c6\u786e\u5730\u627e\u5230\u5b57\u4f53\u5b88\u62a4\u7a0b\u5e8f\u4e2d\u53d1\u751f\u6545\u969c\u7684\u4f4d\u7f6e\u3002\u5c1d\u8bd5\u6253\u5f00\u5b57\u4f53\u6587\u4ef6\u65f6\uff0c\u5b88\u62a4\u7a0b\u5e8f\u6536\u5230\u65e0\u6cd5\u6253\u5f00\u6587\u4ef6\u7684\u4e00\u822c\u9519\u8bef\u3002\u7136\u800c\uff0c\u4ed6\u4e0d\u786e\u5b9a\u8be5\u4e0e\u8c01\u8ba8\u8bba\u8fd9\u4e2a\u95ee\u9898\uff0c\u6240\u4ee5\u4ed6\u7ed9\u51fa\u4e86\u4e00\u9875\u8be6\u7ec6\u7684\u7b14\u8bb0\uff0c\u4ee5\u53ca\u5176\u4ed6\u5de5\u7a0b\u5e08\u7684\u5efa\u8bae\uff0c\u4ee5\u53ca\u4ed6\u4eec\u5c06\u5728\u54ea\u4e9b\u5b9e\u9a8c\u5ba4\u3002\u6240\u6709\u5de5\u7a0b\u5e08\u90fd\u63d0\u4f9b\u4e86\u5e2e\u52a9\u5e76\u60f3\u5f04\u6e05\u8fd9\u4e2a\u8c1c\u5e95\uff0c\u4f46\u4ed6\u4eec\u90fd\u4e0d\u5f97\u4e0d\u5efa\u8bae\u5176\u4ed6\u5de5\u7a0b\u5e08\u4e0e\u4e4b\u4ea4\u8c08\uff0c\u76f4\u5230\u6700\u7ec8\u6211\u88ab\u63a8\u8350\u7ed9\u5b89\u5168\u5b9e\u9a8c\u5ba4\u7684\u4e00\u540d\u5de5\u7a0b\u5e08\u3002\u5929\u8272\u5df2\u665a\uff0c\u5b9e\u9a8c\u5ba4\u5373\u5c06\u5173\u95ed\u3002\u6211\u6e05\u695a\u5730\u8bb0\u5f97\u6211\u8dd1\u8fc7\u623f\u95f4\uff0c\u8dd1\u5230\u5b89\u5168\u5b9e\u9a8c\u5ba4\u88ab\u5c01\u9501\u7684\u90e8\u5206\uff0c\u6211\u80f3\u818a\u4e0b\u5939\u7740\u7b14\u8bb0\u672c\u7535\u8111\u3002\u5728\u90a3\u91cc\uff0c\u6211\u9047\u5230\u4e86\u4e00\u4f4d\u975e\u5e38\u4e50\u4e8e\u52a9\u4eba\u7684\u5de5\u7a0b\u5e08\uff0c\u4ed6\u80fd\u591f\u89e3\u5f00\u8fd9\u4e2a\u8c1c\u56e2\u3002 macOS \u4f7f\u7528\u5b89\u5168\u8303\u56f4\u7684\u4e66\u7b7e\u6765\u6388\u4e88\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u5b83\u4eec\u901a\u5e38\u65e0\u6cd5\u8bbf\u95ee\u7684\u6587\u4ef6\u7684\u6743\u9650\u3002\u4e3a\u4e86\u4fc3\u8fdb\u8fd9\u4e00\u70b9\uff0cmacOS \u5fc5\u987b\u4fdd\u7559\u5141\u8bb8\u54ea\u4e9b\u5e94\u7528\u7a0b\u5e8f\u8bbf\u95ee\u54ea\u4e9b\u6587\u4ef6\u8def\u5f84\u7684\u6620\u5c04\uff0c\u5e76\u4e14\u51fa\u4e8e\u5b89\u5168\u539f\u56e0\uff0c\u8be5\u6620\u5c04\u5fc5\u987b\u5b58\u5728\u4e8e\u5185\u6838\u5185\u5b58\u4e2d\u3002\u5185\u6838\u5185\u5b58\u5df2\u8fde\u63a5\uff1a\u5185\u6838\u65e0\u6cd5\u8bbf\u95ee\u865a\u62df\u5185\u5b58\u3002\u56db\u5206\u4e4b\u4e00\u7684\u7269\u7406 RAM \u4e3a\u5185\u6838\u4fdd\u7559\uff0c\u5728\u8be5\u56db\u5206\u4e4b\u4e00\u5185\uff0c\u5185\u6838\u4e3a\u6587\u4ef6\u6620\u5c04\u5206\u914d\u4e00\u4e2a\u767e\u5206\u6bd4\u3002\u4ed6\u4ece\u6765\u6ca1\u6709\u76f4\u63a5\u8bf4\u51fa\u6765\uff0c\u4f46\u6211\u7684\u5370\u8c61\u662f\u5b89\u5168\u56e2\u961f\u521a\u521a\u5f97\u77e5\u8fd9\u6700\u8fd1\u5bfc\u81f4\u5e94\u7528\u7a0b\u5e8f\u51fa\u73b0\u95ee\u9898\uff0c\u53ea\u662f\u56e0\u4e3a iPhotos \u56e2\u961f\u901a\u77e5\u4e86\u4ed6\u4eec\uff0c\u4f46\u4ed6\u4eec\u4e0d\u77e5\u9053\u8fd9\u5bfc\u81f4\u5b57\u4f53\u5b88\u62a4\u7a0b\u5e8f\u51fa\u73b0\u95ee\u9898.\u6211\u4eec\u7684\u96f7\u8fbe\u3001DTS \u7968\u8bc1\u4ee5\u53ca\u4e0e Apple \u4ee3\u8868\u7684\u7535\u5b50\u90ae\u4ef6\u672a\u80fd\u5c06\u95ee\u9898\u4f20\u8fbe\u7ed9\u5b89\u5168\u56e2\u961f\u3002\u987a\u4fbf\u8bf4\u4e00\u53e5\uff0c\u8fd9\u5c31\u662f WWDC \u5b9e\u9a8c\u5ba4\u5982\u6b64\u91cd\u8981\u548c\u6709\u4ef7\u503c\u7684\u539f\u56e0\u3002\u901a\u5e38\u4e0d\u53ef\u80fd\u8ba9 Apple \u5185\u90e8\u7684\u9002\u5f53\u5de5\u7a0b\u5e08\u6ce8\u610f\u5230\u95ee\u9898\u3002\u5373\u4f7f\u4ed6\u4eec\u65e0\u6cd5\u89e3\u51b3\u95ee\u9898\uff0c\u5b9e\u9a8c\u5ba4\u4e2d\u7684\u5de5\u7a0b\u5e08\u901a\u5e38\u4e5f\u53ef\u4ee5\u63d0\u4f9b\u4fe1\u606f\u548c\u89e3\u51b3\u65b9\u6cd5\u3002\n\u5de5\u7a0b\u5e08\u8fdf\u5230\u4e86\uff0c\u5e2e\u6211\u5411\u5b89\u5168\u56e2\u961f\u548c\u5b57\u4f53\u56e2\u961f\u63d0\u4ea4\u4e86\u5173\u4e8e\u8fd9\u4e2a\u95ee\u9898\u7684\u96f7\u8fbe\uff0c\u4f46\u4ed6\u8b66\u544a\u8bf4\uff0c\u6f5c\u5728\u7684\u95ee\u9898\u53ef\u80fd\u4e0d\u4f1a\u5f88\u5feb\u5f97\u5230\u89e3\u51b3\u3002\u82f9\u679c\u5185\u90e8\u7684\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u548c\u5176\u4ed6\u56e2\u961f\u9700\u8981\u89e3\u51b3\u9650\u5236\u9020\u6210\u7684\u95ee\u9898\u3002\u5b83\u662f macOS \u5e94\u7528\u6c99\u7bb1\u8bbe\u8ba1\u7684\u57fa\u7840\uff0c\u53ea\u6709\u627e\u5230\u4e00\u79cd\u5b89\u5168\u4e14\u9ad8\u6548\u7684\u65b9\u5f0f\u5728\u7528\u6237\u7a7a\u95f4\u4e2d\u5b58\u50a8\u6b64\u6620\u5c04\u65f6\u624d\u80fd\u4fee\u590d\uff0c\u8fd9\u662f\u4e0d\u592a\u53ef\u80fd\u7684\u3002 Apple \u4e0d\u4f1a\u4e3a\u4e86\u6d88\u9664\u8fd9\u4e2a\u9650\u5236\u800c\u629b\u5f03\u6c99\u7bb1\u6216\u635f\u5bb3\u5176\u5b89\u5168\u6027\u3002\u8003\u8651\u5230\u4eca\u5929\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u95ee\u9898\uff0c\u4ed6\u662f\u5bf9\u7684\u3002\u5728 Apple \u4e4b\u5916\uff0c\u5e94\u7528\u6c99\u76d2\u81ea 2011 \u5e74\u9996\u6b21\u4eae\u76f8\u4ee5\u6765\u4f3c\u4e4e\u51e0\u4e4e\u6ca1\u6709\u53d8\u5316\u3002\u8bb8\u591a\u4f8b\u5916\u6743\u5229\u4ecd\u7136\u662f\u201c\u6682\u65f6\u7684\u201d\u3002\u5f53\u5f15\u5165\u8fd9\u4e9b\u4e34\u65f6\u4f8b\u5916\u65f6\uff0cApple \u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u63d0\u4ea4\u96f7\u8fbe\uff0c\u89e3\u91ca\u4ed6\u4eec\u4e3a\u4ec0\u4e48\u9700\u8981\u4f8b\u5916\uff0c\u8868\u660e Apple \u5c06\u6765\u4f1a\u6269\u5c55\u6c99\u7bb1\u4ee5\u6db5\u76d6\u9700\u8981\u8fd9\u4e9b\u4f8b\u5916\u7684\u7528\u4f8b\uff0c\u7136\u540e\u5220\u9664\u4e34\u65f6\u6743\u5229\u3002\u636e\u6211\u6240\u77e5\uff0c\u867d\u7136\u6c99\u7bb1\u4e2d\u5df2\u7ecf\u4fee\u8865\u4e86\u5b89\u5168\u6f0f\u6d1e\uff0c\u5e76\u6dfb\u52a0\u4e86\u65b0\u7684\u6743\u5229\uff0c\u4f46\u6c99\u7bb1\u4ece\u672a\u6269\u5c55\u5230\u5305\u62ec\u8fd9\u4e9b\u7528\u4f8b\uff0c\u4e5f\u4ece\u672a\u5220\u9664\u8fc7\u4e34\u65f6\u4f8b\u5916\uff0c\u4f7f\u201c\u4e34\u65f6\u201d\u6709\u70b9\u7528\u8bcd\u4e0d\u5f53\u3002\u7531\u4e8e\u4ece\u672a\u5728 Apple \u5de5\u4f5c\u8fc7\uff0c\u6211\u5c06\u907f\u514d\u5bf9\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u8fdb\u884c\u6beb\u65e0\u6839\u636e\u7684\u731c\u6d4b\u3002\u8003\u8651\u5230\u6b64\u9650\u5236\u4ecd\u7136\u5f71\u54cd Microsoft Office \u7b49\u5907\u53d7\u77a9\u76ee\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u8ba4\u4e3a Apple \u4e0d\u4f1a\u6ca1\u6709\u52a8\u529b\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f46\u8003\u8651\u5230\u5b83\u4ecd\u7136\u5b58\u5728\u591a\u957f\u65f6\u95f4\uff0c\u76f4\u5230 Apple \u53e6\u884c\u5ba3\u5e03\uff0c\u6211\u4eec\u4e0d\u80fd\u5047\u8bbe\u5b83\u4f1a\u6d88\u5931\u4efb\u4f55\u65f6\u95f4\u5f88\u5feb\u3002\u5e94\u7528\u7a0b\u5e8f\u5f00\u53d1\u4eba\u5458\u5e94\u8be5\u5c3d\u53ef\u80fd\u5730\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u3002\u7b2c\u4e00\u4e2a\u662f\u5c3d\u5feb\u653e\u5f03\u5b89\u5168\u8303\u56f4\u7684\u4e66\u7b7e\uff0c\u7b2c\u4e8c\u4e2a\u662f\u63d0\u793a\u7528\u6237\u6253\u5f00\u6587\u4ef6\u5939\uff0c\u800c\u4e0d\u662f\u6587\u4ef6\u3002\u53ef\u4ee5\u4f7f\u7528 NSURL \u7684 stopAccessingSecurityScopedResource \u65b9\u6cd5\u653e\u5f03\u5b89\u5168\u8303\u56f4\u7684\u4e66\u7b7e\u3002\u6b64\u65b9\u6cd5\u91ca\u653e\u5185\u6838\u4e2d\u6587\u4ef6\u7684\u6761\u76ee\u3002\u5982\u679c\u60a8\u7684\u5e94\u7528\u4e00\u6b21\u53ea\u9700\u8981\u8bbf\u95ee\u51e0\u4e2a\u6587\u4ef6\uff0c\u60a8\u53ef\u4ee5\u5728\u5b8c\u6210\u6bcf\u4e2a\u6587\u4ef6\u540e\u7acb\u5373\u8c03\u7528\u6b64\u65b9\u6cd5\u3002\u5982\u679c\u8fd9\u4e0d\u8d77\u4f5c\u7528\uff0c\u60a8\u53ef\u4ee5\u63d0\u793a\u7528\u6237\u6253\u5f00\u6587\u4ef6\u5939\u800c\u4e0d\u662f\u6587\u4ef6\u3002\u5728 NSOpenPanel \u4e2d\u6253\u5f00\u6587\u4ef6\u5939\u65f6\uff0c\u53ea\u4f1a\u5728\u5185\u6838\u5185\u5b58\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\uff0c\u4f46\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u53ef\u4ee5\u8bbf\u95ee\u8be5\u6587\u4ef6\u5939\u4e2d\u7684\u6587\u4ef6\u3002\u4f46\u662f\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5c06\u81ea\u5df1\u9650\u5236\u4e3a\u4f7f\u7528\u5b57\u7b26\u4e32\u8def\u5f84\u800c\u4e0d\u662f NSURL \u8bbf\u95ee\u8fd9\u4e9b\u6587\u4ef6\u7684 API\u3002\u6253\u5f00\u6587\u4ef6\u5939\u540e\uff0c\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u5c06\u9700\u8981\u679a\u4e3e\u6587\u4ef6\u5939\u7684\u5185\u5bb9\u5e76\u63d0\u4f9b\u81ea\u5df1\u7684\u6587\u4ef6\u5217\u8868\u4f9b\u7528\u6237\u9009\u62e9\u6587\u4ef6\u3002\u901a\u8fc7 NSOpenPanel \u6253\u5f00\u7684\u4efb\u4f55\u6587\u4ef6\u90fd\u4f1a\u6d88\u8017\u5185\u6838\u5185\u5b58\u3002\u5c31\u6211\u800c\u8a00\uff0c\u7531\u4e8e\u6211\u5728 WWDC 2012 \u4e0a\u83b7\u5f97\u7684\u5e2e\u52a9\uff0c\u6211\u80fd\u591f\u4e86\u89e3\u5230\u5b57\u4f53\u5b88\u62a4\u7a0b\u5e8f\u5728\u4f7f\u7528 CoreText API \u6fc0\u6d3b\u5b57\u4f53\u65f6\u6b63\u786e\u5730\u653e\u5f03\u4e86\u4e66\u7b7e\uff0c\u800c\u4e0d\u662f\u6211\u4eec\u4f7f\u7528\u7684\u65b0\u5f03\u7528\u7684 ATS API\u3002\u6211\u4eec\u80fd\u591f\u5207\u6362\u5230 CoreText\uff0c\u4f46\u662f\u6240\u6709\u4f7f\u7528 ATS \u7684 Carbon \u5e94\u7528\u7a0b\u5e8f\u5c06\u65e0\u6cd5\u770b\u5230\u6240\u6709\u6fc0\u6d3b\u7684\u5b57\u4f53\u3002\u770b\u8d77\u6765\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u6536\u5230\u5b57\u4f53\u6fc0\u6d3b\u901a\u77e5\u540e\uff0c\u4f1a\u4e0e\u5b57\u4f53\u5b88\u62a4\u7a0b\u5e8f\u901a\u4fe1\u4ee5\u4f7f\u7528 ATS \u529f\u80fd\u83b7\u53d6\u5b57\u4f53\u6570\u636e\uff0c\u4f46\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4ecd\u7136\u6ca1\u6709\u8db3\u591f\u5feb\u5730\u653e\u5f03\u4e66\u7b7e\u3002\u636e\u6211\u6240\u77e5\uff0c\u8fd9\u4e2a\u95ee\u9898\u4ece\u672a\u5f97\u5230\u89e3\u51b3\uff0c\u4f46\u7531\u4e8e Carbon \u4ece\u672a\u5b8c\u5168\u79fb\u690d\u5230 64 \u4f4d\uff0cCarbon \u5e94\u7528\u7a0b\u5e8f\u7684\u4f7f\u7528\u91cf\u4e0b\u964d\uff0c\u76f4\u5230 macOS 10.15 \u4e2d\u5220\u9664\u4e86 32 \u4f4d\u652f\u6301\uff0c\u4f7f\u95ee\u9898\u53d8\u5f97\u6beb\u65e0\u610f\u4e49\u3002\n\u7136\u800c\uff0c\u5f53\u65f6\uff0c\u8bb8\u591a\u6d41\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u662f\u4f7f\u7528 Carbon \u7f16\u5199\u7684\uff0c\u6216\u8005\u81f3\u5c11\u5305\u542b\u8db3\u591f\u7684 Carbon \u4ee3\u7801\u4ee5\u53d7\u5230\u6b64\u95ee\u9898\u7684\u5f71\u54cd\uff0c\u5305\u62ec Microsoft Office \u548c Adob\u200b\u200be Creative Suite \u7684\u90e8\u5206\u5185\u5bb9\u3002\u5f53\u7528\u6237\u5c1d\u8bd5\u6fc0\u6d3b\u5927\u91cf\u5b57\u4f53\u65f6\uff0c\u6211\u4eec\u4e0d\u5f97\u4e0d\u5411\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6dfb\u52a0\u8b66\u62a5\uff0c\u8bf4\u660e\u5e76\u975e\u6240\u6709\u5b57\u4f53\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u3002\u4e00\u4e9b\u7528\u6237\u82e6\u82e6\u5730\u62b1\u6028\uff0c\u4f46\u6211\u4eec\u6709\u4e00\u4e2a\u5f15\u4eba\u6ce8\u76ee\u7684\u6f14\u793a\u6765\u8bc1\u660e\u95ee\u9898\u4e0d\u662f\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u9519\u3002\u5982\u679c\u7528\u6237\u7b80\u5355\u5730\u5c06\u6240\u6709\u5b57\u4f53\u6587\u4ef6\u79fb\u52a8\u5230 ~/Library/Fonts \u4e2d\uff0c\u4ed6\u4eec\u53ef\u4ee5\u786e\u8ba4\u8fd9\u4e9b\u5b57\u4f53\u5728 TextEdit \u4e2d\u90fd\u53ef\u7528\uff0c\u4f46\u5728 Word \u4e2d\u4e0d\u53ef\u7528\u3002", "note_en": "There has recently been some  renewed discussion on Twitter about the limitation that the macOS sandbox places on the number of open files an app can access at once. Apps are still running into problems because of this limitation, and there is not a lot of technical detail available on it outside of Apple, so I\u2019d like to share my understanding of it.\n macOS only allows sandboxed apps to access a limited number of files at a time, but there is no way for an app to query how many files it can open, or if it\u2019s close to the limit. In fact, this limit is dependent on the amount of RAM installed in the computer and the number of files open by other apps. Because this limit only affects apps that can batch process thousands of files, and users that want to do so, many users\u2014and developers\u2014remain unaware of it, despite the fact that it has affected some of Apple\u2019s own apps.\n I first became aware of the limitation in early 2012. I was working on an app that could activate font files, and although most users only used it for a handful of fonts at a time, we very quickly got support requests from users after the limitation was introduced in an update to OS X 10.7. In this case, however, it wasn\u2019t obvious what was causing the issue. Font activation would start failing with a generic error code after the first few hundred activations. The system log reported that the sandbox was denying  file-read-data for our app, but our app wasn\u2019t sandboxed, so this appeared to be a bug.\n Although we attempted to fix the problem, both by ourselves and with the help of Apple\u2019s Developer Tech Support, it wasn\u2019t until WWDC 2012, a few months later, that we were able to get answers on why this was happening. At WWDC, I lined up for the labs as soon as I could and was eventually able to talk with an engineer who worked on font activation. After sharing some code with him that demonstrated the problem, he was able to find exactly where in the font daemon the failure was occurring. When attempting to open the font file, the daemon was receiving a generic error that the file could not be opened. However, he wasn\u2019t sure exactly who to talk to about that problem, so he gave be a page of detailed notes, along with suggestions of other engineers to talk to, and which labs they would be in.\n All of the engineers were helpful and wanted to get to the bottom of this mystery, but they all had to suggest other engineers to speak with, until ultimately, I was referred to an engineer in the security lab. It was late in the day, and labs were about to close. I distinctly remember running across the room to the section blocked off for the security lab, laptop under my arm. There, I met an extremely helpful engineer who was able to solve the mystery.\n macOS uses security-scoped bookmarks to grant apps access to files they normally wouldn\u2019t have access to. In order to facilitate this, macOS must keep a mapping of which apps are allowed to access which file paths, and for security reasons, this mapping has to live in kernel memory. Kernel memory is wired: The kernel has no access to virtual memory. A quarter of physical RAM is reserved for the kernel, and within that quarter, the kernel allocates a percentage for the file mapping.\n He never said it outright, but I got the impression that the security team had just learned that this was causing problems for apps recently, and only because they were notified by the iPhotos team, but they were unaware it was causing problems with the font daemon. Our radars, DTS tickets, and emails with our Apple rep had failed to get the problem through to the security team. As an aside, this is why WWDC labs are so important and valuable. It is often impossible to get issues noticed by the proper engineers inside Apple. Even if they can\u2019t fix the issues, engineers in the labs can often provide information and workarounds.\n The engineer stayed late to help me file radars on the issue for both the security team and the fonts team, but cautioned that the underlying problem would probably not get fixed any time soon. It would be up to app developers and other teams within Apple to work around the problems the limitation created. It was foundational to how the macOS app sandbox was designed, and could only be fixed if they found a safe and performant way to store this mapping in userspace, which was unlikely. Apple was not going to throw out the sandbox or compromise its security to remove this limitation. Considering that it remains a problem to this day, he was right.\n From outside of Apple, it appears that very little has changed in the app sandbox since its debut in 2011. Many exception entitlements are still \u201ctemporary\u201d. When these temporary exceptions were introduced, Apple encouraged developers to file radars explaining why they needed the exceptions, indicating that Apple would, in the future, expand the sandbox to cover use cases that necessitated these exceptions, then remove the temporary entitlements. As far as I am aware, although security holes have been patched in the sandbox, and new entitlements added, the sandbox has never been expanded to include these use cases, and no temporary exception has ever been removed, making \u201ctemporary\u201d somewhat of a misnomer.\n Having never worked at Apple, I will refrain from uneducated guesses as to why this is. Considering that this limitation  still affects high-profile apps like Microsoft Office, I don\u2019t think Apple is unmotivated to fix this, but considering how long it has remained a problem, until Apple announces otherwise, we can\u2019t assume it\u2019s going away any time soon. It\u2019s on app developers to work around it as best as possible.\n There are two ways to deal with the issue. The first is to  relinquish security-scoped bookmarks as quickly as possible, and the second is to  prompt users to open folders, not files.\n Security-scoped bookmarks can be relinquished using  NSURL&#39;s   stopAccessingSecurityScopedResource method. This method frees the entry for the file in the kernel. If your app only needs to access a few files at a time, you can call this method immediately when you are done with each file.\n In cases where this does not work, you can prompt users to open folders instead of files. When a folder is opened in an  NSOpenPanel, only one entry is added in kernel memory, but your app will still be able to access the files within that folder. However, you may need to limit yourself to APIs that access those files using string paths, rather than  NSURLs. After opening the folder, your app will need to enumerate the contents of the folder and provide its own file listing for users to select files. Any files opened through  NSOpenPanel will consume kernel memory.\n In my case, thanks to the help I received at WWDC 2012, I was able to learn that the font daemon properly relinquished bookmarks when fonts were activated using the CoreText API, as opposed to the newly-deprecated ATS API we were using. We were able to switch over to CoreText, but Carbon apps, which all used ATS, wouldn\u2019t be able to see all of the activated fonts. It appeared that these apps, upon being notified of font activations, would communicate with the font daemon to get the font data using ATS functions, which were still not relinquishing the bookmarks quickly enough. As far as I know, this has never been fixed, but since Carbon was never fully ported to 64-bit, Carbon app usage declined until 32-bit support was removed in macOS 10.15, making the problem moot.\n At the time, however, many popular apps were written using Carbon, or at least contained enough Carbon code to be affected by this issue, including Microsoft Office and parts of the Adobe Creative Suite. We had to add an alert to our app when users attempted to activate a large number of fonts, explaining that not all fonts would be available in these apps. Some users complained bitterly, but we had a compelling demo to prove that the problem was not our app\u2019s fault. If users simply moved all their font files into  ~/Library/Fonts, they could confirm that the fonts were all available in TextEdit, but not in Word.", "posttime": "2021-08-08 22:51:29", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6c99\u76d2,sandbox", "title": "macOS \u6c99\u76d2\u6587\u4ef6\u9650\u5236", "title_en": "The macOS Sandbox File Limit", "transed": 1, "url": "https://buckleyisms.com/blog/anecdotes-about-the-macos-sandbox-file-limit/", "via": "", "real_tags": ["\u6c99\u76d2", "sandbox"]}, {"category": "", "categoryclass": "", "imagename": "529fdc668b142b2dbb3008ef41039ec7.gif", "infoid": 1072120, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u4eec\u9192\u7740\u7684\u65f6\u5019\uff0c\u5927\u8111\u63a5\u6536\u5230\u51e0\u4e4e\u4e0d\u65ad\u6d8c\u5165\u7684\u5404\u79cd\u5f3a\u5ea6\u7684\u611f\u89c9\u4fe1\u53f7\u3002\u51e0\u5341\u5e74\u6765\uff0c\u79d1\u5b66\u5bb6\u4eec\u4e00\u76f4\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4fe1\u53f7\u4f1a\u51fa\u73b0\u5728\u6709\u610f\u8bc6\u7684\u610f\u8bc6\u4e4b\u5149\u4e2d\uff0c\u800c\u5176\u4ed6\u5f3a\u5ea6\u76f8\u4f3c\u7684\u4fe1\u53f7\u4ecd\u5904\u4e8e\u65e0\u610f\u8bc6\u7684\u9ed1\u6697\u9634\u5f71\u4e2d\u3002\u662f\u4ec0\u4e48\u63a7\u5236\u4e86\u5206\u9694\u9634\u5f71\u548c\u5149\u7ebf\u7684\u95e8\uff1f\u5728\u5bc6\u6b47\u6839\u533b\u5b66\u9ebb\u9189\u5b66\u7cfb\u548c\u610f\u8bc6\u79d1\u5b66\u4e2d\u5fc3\u7684\u4e00\u9879\u65b0\u7814\u7a76\u4e2d\uff0c\u7814\u7a76\u4eba\u5458\u786e\u5b9a\u4e86\u76ae\u5c42\u4e2d\u7684\u4e00\u4e2a\u5173\u952e\u533a\u57df\uff0c\u5b83\u4f3c\u4e4e\u662f\u610f\u8bc6\u610f\u8bc6\u7684\u5927\u95e8\u3002 \u201c\u5927\u8111\u4e2d\u7684\u4fe1\u606f\u5904\u7406\u6709\u4e24\u4e2a\u7ef4\u5ea6\uff1a\u5bf9\u73af\u5883\u65e0\u610f\u8bc6\u7684\u611f\u89c9\u5904\u7406\uff0c\u4ee5\u53ca\u5f53\u523a\u6fc0\u8fbe\u5230\u4e00\u5b9a\u91cd\u8981\u6027\u5e76\u8fdb\u5165\u6709\u610f\u8bc6\u7684\u610f\u8bc6\u65f6\u53d1\u751f\u7684\u7c7b\u578b\uff0c\u201d\u8be5\u7814\u7a76\u7684\u7814\u7a76\u5458\u9ec4\u5b50\u745e\u535a\u58eb\u89e3\u91ca\u8bf4\u3002\u9ebb\u9189\u79d1\u3002 Huang\uff0c\u4ee5\u53ca\u9996\u5e2d\u7814\u7a76\u5458 Anthony Hudetz \u535a\u58eb\u3002\u548c\u4ed6\u4eec\u7684\u56e2\u961f\u8bd5\u56fe\u786e\u8ba4\u8fd9\u79cd\u8f6c\u6362\u53d1\u751f\u5728\u5927\u8111\u4e2d\u79f0\u4e3a\u524d\u5c9b\u53f6\u76ae\u5c42\u7684\u90e8\u5206\uff0c\u5145\u5f53\u4f4e\u7ea7\u611f\u89c9\u4fe1\u606f\u548c\u9ad8\u7ea7\u610f\u8bc6\u4e4b\u95f4\u7684\u4e00\u79cd\u95f8\u95e8\u3002\u5728\u5b9e\u9a8c\u4e2d\uff0c\u53c2\u4e0e\u8005\u88ab\u653e\u5165 fMRI \u673a\u5668\u5185\uff0c\u5e76\u4f7f\u7528\u9ebb\u9189\u836f\u7269\u5f02\u4e19\u915a\u6765\u63a7\u5236\u4ed6\u4eec\u7684\u610f\u8bc6\u6c34\u5e73\u3002\u7136\u540e\u8ba9\u4ed6\u4eec\u60f3\u8c61\u81ea\u5df1\u6253\u7f51\u7403\u3001\u8d70\u5728\u5c0f\u8def\u4e0a\u6216\u6324\u538b\u4ed6\u4eec\u7684\u624b\uff0c\u5e76\u8981\u6c42\u4ed6\u4eec\u8fdb\u884c\u8fd0\u52a8\u6d3b\u52a8\uff08\u6324\u538b\u4e00\u4e2a\u6a61\u76ae\u7403\uff09\uff0c\u56e0\u4e3a\u4ed6\u4eec\u9010\u6e10\u5931\u53bb\u77e5\u89c9\u5e76\u5728\u4e19\u6cca\u915a\u505c\u6b62\u540e\u518d\u6b21\u6062\u590d\u77e5\u89c9\u3002\u5148\u524d\u7684\u7814\u7a76\u8868\u660e\uff0c\u5fc3\u7406\u610f\u8c61\u4ea7\u751f\u7684\u5927\u8111\u6d3b\u52a8\u7c7b\u4f3c\u4e8e\u5b9e\u9645\u6267\u884c\u7684\u6d3b\u52a8\u3002\u5f53\u53c2\u4e0e\u8005\u60f3\u8c61\u81ea\u5df1\u5728\u6253\u7f51\u7403\u65f6\uff0c\u8d1f\u8d23\u63a7\u5236\u8fd0\u52a8\u7684\u5927\u8111\u90e8\u5206\u5c31\u4f1a\u4eae\u8d77\u6765\u3002\u5927\u8111\u7684\u5176\u4ed6\u533a\u57df\u5728\u6267\u884c\u4efb\u52a1\u65f6\u4f1a\u53d8\u5f97\u505c\u7528\uff0c\u56e0\u4e3a\u7cbe\u795e\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6d3b\u52a8\u4e0a\u3002\n\u968f\u7740\u7814\u7a76\u53c2\u4e0e\u8005\u5f00\u59cb\u5931\u53bb\u610f\u8bc6\uff0c\u5931\u6d3b\u53d1\u751f\u7684\u9891\u7387\u964d\u4f4e\u3002\u5f53\u4ed6\u4eec\u5b8c\u5168\u5931\u53bb\u610f\u8bc6\u65f6\uff0c\u4ed6\u4eec\u76f8\u5e94\u7684\u5927\u8111\u533a\u57df\u4e5f\u6ca1\u6709\u8868\u73b0\u51fa\u5bf9\u5fc3\u7406\u610f\u8c61\u4efb\u52a1\u7684\u53cd\u5e94\u3002\u5f53\u4ed6\u4eec\u6062\u590d\u4e00\u4e9b\u610f\u8bc6\u65f6\uff0c\u4ed6\u4eec\u6062\u590d\u4e86\u4e00\u4e9b\u4e0e\u5fc3\u7406\u610f\u8c61\u76f8\u5173\u7684\u6d3b\u52a8\uff0c\u6b64\u540e\u4e0d\u4e45\uff0c\u4ed6\u4eec\u7684\u610f\u8bc6\u5b8c\u5168\u6e05\u9192\uff0c\u4ed6\u4eec\u7684\u5927\u8111\u663e\u793a\u51fa\u6b63\u5e38\u7684\u6fc0\u6d3b\u6a21\u5f0f\u3002\u5bfb\u627e\u8fd9\u4e9b\u610f\u8bc6\u72b6\u6001\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u63ed\u793a\u4e86\u524d\u5c9b\u53f6\u76ae\u5c42\u7684\u6fc0\u6d3b\u5728\u8fd9\u4e9b\u6fc0\u6d3b\u548c\u505c\u7528\u4e4b\u95f4\u7684\u6210\u529f\u8f6c\u6362\u4e2d\u53d1\u6325\u4e86\u4f5c\u7528\u3002 \u201c\u611f\u89c9\u523a\u6fc0\u901a\u5e38\u4f1a\u6fc0\u6d3b\u524d\u5c9b\u53f6\u76ae\u5c42\uff0c\u201dHudetz \u8bf4\u3002 \u201c\u4f46\u662f\u5f53\u4f60\u5931\u53bb\u610f\u8bc6\u65f6\uff0c\u524d\u5c9b\u53f6\u76ae\u5c42\u5c31\u4f1a\u88ab\u505c\u7528\uff0c\u5927\u8111\u4e2d\u652f\u6301\u610f\u8bc6\u7684\u7f51\u7edc\u8f6c\u79fb\u5c31\u4f1a\u88ab\u7834\u574f\u3002\u201d\u4ed6\u89e3\u91ca\u8bf4\uff0c\u524d\u5c9b\u53f6\u76ae\u5c42\u53ef\u80fd\u5145\u5f53\u8fc7\u6ee4\u5668\uff0c\u53ea\u5141\u8bb8\u6700\u91cd\u8981\u7684\u4fe1\u606f\u8fdb\u5165\u610f\u8bc6\u3002\u4ed6\u4eec\u8bd5\u56fe\u7528\u53e6\u4e00\u4e2a\u7ecf\u5178\u7684\u5fc3\u7406\u5b9e\u9a8c\u6765\u8bc1\u5b9e\u4ed6\u4eec\u7684\u5047\u8bbe\uff0c\u5176\u4e2d\u4e00\u5f20\u8138\u5728\u5c4f\u5e55\u4e0a\u77ed\u6682\u5730\u95ea\u70c1\uff0c\u51e0\u4e4e\u65e0\u6cd5\u5bdf\u89c9\u767e\u5206\u4e4b\u4e09\u79d2\u3002\u9762\u90e8\u56fe\u50cf\u4e4b\u540e\u662f\u5608\u6742\u7684\u9ad8\u5bf9\u6bd4\u5ea6\u56fe\u50cf\uff0c\u65e8\u5728\u4e2d\u65ad\u9762\u90e8\u56fe\u50cf\u7684\u6709\u610f\u8bc6\u5904\u7406\u3002\u7136\u540e\u8be2\u95ee\u53c2\u4e0e\u8005\u662f\u5426\u770b\u5230\u4e86\u4e00\u5f20\u8138\u3002\u662f\u5426\u6709\u610f\u8bc6\u5730\u8fdb\u5165\u9762\u90e8\u662f\u901a\u8fc7\u524d\u5c9b\u53f6\u76ae\u5c42\u7684\u6fc0\u6d3b\u6765\u9884\u6d4b\u7684\u3002 \u201c\u524d\u5c9b\u53f6\u76ae\u5c42\u7684\u6d3b\u52a8\u4e0d\u65ad\u6ce2\u52a8\uff0c\u201d\u9ec4\u8bf4\u3002 \u201c\u4f60\u662f\u5426\u80fd\u68c0\u6d4b\u5230\u523a\u6fc0\u53d6\u51b3\u4e8e\u4fe1\u606f\u5230\u8fbe\u5927\u8111\u65f6\u524d\u8111\u5c9b\u7684\u72b6\u6001\uff1a\u5982\u679c\u8111\u5c9b\u5728\u523a\u6fc0\u70b9\u7684\u6d3b\u52a8\u5f88\u9ad8\uff0c\u4f60\u5c31\u4f1a\u770b\u5230\u56fe\u50cf\u3002\u6839\u636e\u8fd9\u4e24\u4e2a\u5b9e\u9a8c\u7684\u8bc1\u636e\uff0c\u6211\u4eec\u5f97\u51fa\u7ed3\u8bba\uff0c\u524d\u5c9b\u53f6\u76ae\u5c42\u53ef\u80fd\u662f\u610f\u8bc6\u610f\u8bc6\u7684\u5927\u95e8\u3002\u201d\u5f15\u7528\u7684\u8bba\u6587\uff1a\u201c\u524d\u8111\u5c9b\u8c03\u8282\u5927\u8111\u7f51\u7edc\u8f6c\u6362\uff0c\u95e8\u6709\u610f\u8bc6\u7684\u8bbf\u95ee\uff0c\u201d\u7ec6\u80de\u62a5\u544a\u3002 DOI\uff1a10.1016/j.celrep.2021.109081\n\u559c\u6b22\u64ad\u5ba2\uff1f\u5728 iTunes \u6216\u60a8\u6536\u542c\u64ad\u5ba2\u7684\u4efb\u4f55\u5730\u65b9\u6dfb\u52a0\u5bc6\u6b47\u6839\u533b\u5b66\u65b0\u95fb\u5feb\u62a5\u3002", "note_en": "During our waking hours, the brain is receiving a near-constant influx of sensory signals of various strengths.\n For decades, scientists have wondered why some signals rise to the light of conscious awareness while other signals of a similar strength remain in the dark shadows of unconsciousness. What controls the gate that separates the shadows and the light?\n In a new study from the    Department of Anesthesiology   and    Center for Consciousness Science   at Michigan Medicine, researchers identify a key area in the cortex that appears to be the gate of conscious awareness.\n \u201cInformation processing in the brain has two dimensions: sensory processing of the environment without awareness and the type that occurs when a stimulus reaches a certain level of importance and enters conscious awareness,\u201d explains    Zirui Huang, Ph.D.,   research investigator in the Department of Anesthesiology.\n Huang, along with lead researcher    Anthony Hudetz, Ph.D.   and their team, attempted to confirm that this switch occurs in a part of the brain called the anterior insular cortex, acting as a type of gate between low level sensory information and higher level awareness.\n For the experiments, participants were put inside of a fMRI machine and administered the anesthetic drug propofol to control their level of consciousness. They were then asked to imagine themselves playing tennis, walking down a path or squeezing their hand, as well as asked to perform a motor activity (squeeze a rubber ball) as they gradually lost consciousness and regained it again after the propofol was stopped.\n Previous research has shown that mental imagery produces brain activity similar to actually performing the activity. When participants imagine themselves playing tennis, the part of the brain responsible for controlling movement lights up. Other regions of the brain become deactivated when performing tasks, as mental attention is focused on the activity.\n As the study participants began to lose consciousness, deactivations happened less frequently. When they completely lost consciousness, their corresponding brain areas also showed no activation in response to mental imagery tasks. As they regained some consciousness, they regained some activity related to mental imagery and with full consciousness shortly thereafter, their brain showed normal activation patterns.\n  Looking for the correlation across these states of consciousness revealed activation of the anterior insular cortex played a role in the successful switch between these activations and deactivations.\n \u201cA sensory stimulus will normally activate the anterior insular cortex,\u201d says Hudetz. \u201cBut when you lose consciousness, the anterior insular cortex is deactivated and network shifts in the brain that support consciousness are disrupted.\u201d The anterior insular cortex, he explains, might act as a filter that allows only the most important information to enter conscious awareness.\n They sought to confirm their hypothesis with another classic psychological experiment, wherein a face is briefly flashed on a screen for a barely perceptible three hundredths of a second.\n The face image is followed by a noisy high contrast image designed to interrupt conscious processing of the face image. Participants were then asked whether they saw a face or not. Whether the face was consciously accessed was predicted by activation in the anterior insular cortex.\n \u201cAnterior insular cortex has continuously fluctuating activity,\u201d says Huang. \u201cWhether you can detect a stimulus depends upon the state of the anterior insula when the information arrives in your brain: if the insula\u2019s activity is high at the point of stimulus, you will see the image. Based on evidence from these two experiments, we conclude that the anterior insular cortex could be a gate for conscious awareness.\u201d\n Paper cited:   \u201cAnterior insula regulates brain network transitions that gate conscious access,\u201d  Cell Reports.    DOI: 10.1016/j.celrep.2021.109081\n Like Podcasts? Add the          Michigan Medicine News Break       on \u00a0         iTunes       or anywhere you listen to podcasts.", "posttime": "2021-08-08 22:51:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u79d1\u5b66\u5bb6,\u610f\u8bc6,find", "title": "\u79d1\u5b66\u5bb6\u627e\u5230\u610f\u8bc6\u610f\u8bc6\u7684\u201c\u5b88\u95e8\u4eba\u201d", "title_en": "Scientists find \u2018gatekeeper\u2019 of conscious awareness", "transed": 1, "url": "https://labblog.uofmhealth.org/lab-report/study-reveals-gateway-to-conscious-awareness", "via": "", "real_tags": ["\u79d1\u5b66\u5bb6", "\u610f\u8bc6", "find"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072118, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Unix shell \u975e\u5e38\u5f3a\u5927\u3002\u6211\u7ecf\u5e38\u5c06\u5b83\u7528\u4e8e\u7b80\u5355\u7684\u4efb\u52a1\uff08\u79fb\u52a8\u6587\u4ef6\uff09\u3001\u65e5\u5e38\u5de5\u4f5c\uff08\u8bc4\u5206\u811a\u672c\uff09\u4ee5\u53ca\u6211\u7684\u5f00\u53d1\u8fc7\u7a0b\uff08\u6784\u5efa\u3001\u90e8\u7f72\u7b49\uff09\u3002\u5f53\u6211\u5904\u7406\u6587\u672c\u65f6\uff0cshell \u53ca\u5176\u751f\u6001\u7cfb\u7edf\u975e\u5e38\u51fa\u8272\uff1a\u5c06 cat\u3001find\u3001grep\u3001sed\u3001tr \u548c cut \u4e0e shell \u7ba1\u9053\u548c\u91cd\u5b9a\u5411\u62fc\u51d1\u5728\u4e00\u8d77\u662f\u4e00\u79cd\u65b9\u4fbf\u3001\u5bcc\u6709\u8868\u73b0\u529b\u4e14\u5feb\u901f\u7684\u68c0\u67e5\u548c\u7f16\u8f91\u6587\u4ef6\u7684\u65b9\u5f0f\u3002\u4f46\u662f\u5728\u5904\u7406\u534a\u7ed3\u6784\u5316\u6570\u636e\uff08\u5982 JSON \u548c YAML\uff09\u65f6\uff0c\u6211\u7684 shell \u5de5\u5177\u94fe\u7684\u5e2e\u52a9\u8981\u5c0f\u5f97\u591a\u3002\u4eba\u4eec\u5bf9 shell \u751f\u6001\u7cfb\u7edf\u505a\u51fa\u4e86\u51fa\u8272\u7684\u8d21\u732e\u6765\u63d0\u4f9b\u5e2e\u52a9\u2014\u2014\u50cf jq \u548c gron \u8fd9\u6837\u7684\u5de5\u5177\u3002\u8fd9\u4e24\u4e2a\u5de5\u5177\u63d0\u4f9b\u4e86\u7528\u4e8e\u64cd\u4f5c JSON \u7684\u65b0\u8bed\u8a00\u3002\u5bf9\u4e8e\u7f16\u7a0b\u8bed\u8a00\u7814\u7a76\u4eba\u5458\u6765\u8bf4\uff0c\u627f\u8ba4\u53ef\u80fd\u4f1a\u5f88\u5c34\u5c2c\uff0c\u4f46\u662f\u2026\u2026\u6211\u5bf9\u65b0\u8bed\u8a00\u6709\u70b9\u7740\u8ff7\u4e86\u3002\u6240\u4ee5\u6211\u6784\u5efa\u4e86\u4e00\u4e2a\u65b0\u5de5\u5177\uff0c\u8ba9\u60a8\u53ef\u4ee5\u4f7f\u7528\u5e38\u7528\u7684 shell \u5de5\u5177\u6765\u5904\u7406\u73b0\u4ee3\u6587\u4ef6\u683c\u5f0f\uff1affs\uff0c\u6587\u4ef6\u6587\u4ef6\u7cfb\u7edf\u3002 ffs \u5141\u8bb8\u60a8\u5c06\u534a\u7ed3\u6784\u5316\u6570\u636e\u6302\u8f7d\u4e3a\u6587\u4ef6\u7cfb\u7edf\uff1a\u5bf9\u8c61\u548c\u5217\u8868\u5bf9\u5e94\u4e8e\u76ee\u5f55\uff0c\u800c\u5176\u4ed6\u7c7b\u578b\u5bf9\u5e94\u4e8e\u5e38\u89c4\u6587\u4ef6\u3002\u60a8\u53ef\u4ee5\u4ee5\u4e00\u79cd\u683c\u5f0f\u6302\u8f7d\u6587\u4ef6\uff0c\u7f16\u8f91\u6587\u4ef6\u7cfb\u7edf\uff0c\u7136\u540e\u5c06\u5176\u5199\u56de\u53e6\u4e00\u79cd\u683c\u5f0f\u3002\u8fd0\u884c ffs \u6240\u9700\u7684\u53ea\u662f FUSE\uff0c\u8fd9\u662f\u4e00\u4e2a\u652f\u6301\u7528\u6237\u7a7a\u95f4\u6587\u4ef6\u7cfb\u7edf\u7684\u5185\u6838\u6a21\u5757\u3002\u4f60\u9700\u8981\u5728 Linux \u4e0a\u4f7f\u7528 libfuse\uff0c\u6216\u8005\u5728 macOS \u4e0a\u4f7f\u7528 macFUSE\u3002\u4e0b\u8f7d\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u73a9\u8f6c\uff01", "note_en": "The Unix shell is incredibly powerful. I use it routinely for simple tasks (moving files around), routine work (grading scripts), and in my development process (building, deploying, etc.). When I\u2019m working with text, the shell and its ecosystem is excellent: patching together  cat,  find,  grep,  sed,  tr, and  cut with shell pipelines and redirections is a convenient, expressive, and fast way to inspect and edit files.\n But my shell toolchain is much less helpful when working with  semi-structured data, like JSON and YAML. Folks have made wonderful contributions to the shell ecosystem to help\u2014tools like  jq and  gron. These two tools provide new languages for manipulating JSON. It may be embarrassing to admit for a programming languages researcher, but\u2026 I\u2019m kind of maxed out on new languages.\n So I built a new tool that lets you use your usual shell tools to work with modern file formats:   ffs, the  file  file system.\n  ffs lets you mount semi-structured data as a filesystem: objects and lists correspond to directories, while other types correspond to regular files. You can mount a file in one format, edit the filesystem, and write it back in another.\n All you need to run ffs is FUSE, a kernel module that supports userspace filesystem. You\u2019ll want  libfuse on Linux, or  macFUSE on macOS.  Download a binary and play around!", "posttime": "2021-08-08 21:52:22", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "unix,semi,\u6587\u4ef6", "title": "\u5728 Unix Shell \u4e2d\u5904\u7406\u534a\u7ed3\u6784\u5316\u6570\u636e", "title_en": "Processing Semi-Structured Data in the Unix Shell", "transed": 1, "url": "http://www.weaselhat.com/2021/06/29/processing-semi-structured-data-in-the-unix-shell/", "via": "", "real_tags": ["unix", "semi", "\u6587\u4ef6"]}, {"category": "", "categoryclass": "", "imagename": "b1a3499acce0c8b56fa902d740a861d5.png", "infoid": 1072117, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u4e0a\u5468\u672b\u6211\u6ce8\u610f\u5230\u6211\u5728 StaffPad \u548c Dorico \u4e4b\u95f4\u6765\u56de\u5207\u6362\u65f6\u9047\u5230\u4e86\u8bb8\u591a\u632b\u6298\uff0c\u56e0\u4e3a\u4e24\u8005\u4e4b\u95f4\u7684\u97f3\u4e50 XML \u4f20\u9012\u4ee4\u4eba\u6cae\u4e27\uff0c\u5c24\u5176\u662f\u5728\u6253\u51fb\u4e50\u65b9\u9762\u2014\u2014\u800c\u4e14\uff0c\u5267\u900f\uff0c\u6211\u7684\u7ba1\u5f26\u4e50\u4f5c\u54c1\u5145\u5206\u5229\u7528\u4e86\u6253\u51fb\u4e50\u5668\uff01 1 \u867d\u7136\u6211\u4ecd\u7136\u6709\u70b9\u60ac\u800c\u672a\u51b3\uff0c\u6211\u6700\u7ec8\u4f1a\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u4f5c\u4e3a\u4e3b\u8981\u5de5\u5177\u2014\u2014\u6700\u8fd1\u6765\u81ea Dorico \u7684\u6d88\u606f\u4f7f\u8fd9\u6210\u4e3a\u4e00\u4e2a\u66f4\u6709\u8da3\u7684\u8003\u8651\uff01 2 - \u4f46\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u8ba4\u4e3a\u6df1\u5165\u7814\u7a76\u4e24\u8005\u7684\u4e0d\u540c\u4e4b\u5904\u548c\u539f\u56e0\u4f1a\u5f88\u6709\u8da3\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u5c06\u6df1\u5165\u63a2\u8ba8\u8fd9\u4e9b\u5e94\u7528\u7a0b\u5e8f\u5728\u8868\u793a\u5355\u4e2a\u6253\u51fb\u4e50\u5668\u7684\u65b9\u5f0f\u4e0a\u7684\u4e3b\u8981\u5dee\u5f02\uff1a\u6728\u5757\u3002\u6211\u9009\u62e9 Wood Blocks \u662f\u56e0\u4e3a\u5b83\u4eec\u6bd4\u4f4e\u97f3\u9f13\u6216\u519b\u9f13\u4e4b\u7c7b\u7684\u4e1c\u897f\u66f4\u590d\u6742\uff1a\u5b83\u4eec\u88ab\u5f52\u7c7b\u4e3a\u65e0\u97f3\u9ad8\u7684\u6253\u51fb\u4e50\uff0c\u56e0\u4e3a\u5b83\u4eec\u6ca1\u6709\u786e\u5b9a\u7684\u97f3\u9ad8\uff0c\u4f46\u5b83\u4eec\u5728\u6574\u4e2a\u5757\u4e0a\u6709\u4e0d\u540c\u7684\u97f3\u9ad8\u3002\u4ed6\u4eec\u603b\u662f\u8868\u73b0\u4e3a\u67d0\u79cd\u591a\u7ebf\u5de5\u4f5c\u4eba\u5458\u3002\u7136\u800c\uff0c\u4e0d\u540c\u7684\u5de5\u5177\u5448\u73b0\u4e0d\u540c\u7684\u5458\u5de5\uff01\u5b83\u4eec\u4e0d\u662f\u50cf\u67b6\u5b50\u9f13\u4e50\u8c31\u90a3\u6837\u5c06\u5b8c\u5168\u4e0d\u540c\u7684\u6253\u51fb\u4e50\u5668\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u8fd9\u4e9b\u5757\u4e5f\u6709\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u4ee5\u4e0d\u540c\u4e8e\u94a2\u7434\u6216\u949f\u7434\u7684\u65b9\u5f0f\u8fdb\u884c\u6253\u51fb\u3002\u867d\u7136 Dorico \u7248\u672c\u66f4\u7b26\u5408\u6807\u51c6\u4e60\u8bed\uff0c\u4f46 StaffPad \u7248\u672c\u5e76\u6ca1\u6709\u9519\uff1a\u6211\u5df2\u7ecf\u770b\u5230 Wood Blocks \u5728\u4e16\u754c\u4e0a\u51fa\u7248\u7684\u97f3\u4e50\u4e2d\u5b8c\u5168\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8868\u793a\u3002\u4e0d\u8fc7\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u4e3b\u9898\uff1aStaffPad \u4e3a\u8fd9\u6837\u7684\u4e8b\u60c5\u6240\u505a\u7684\u901a\u5e38\u5f88\u597d\uff0c\u4f46 Dorico \u6240\u505a\u7684\u901a\u5e38\u66f4\u63a5\u8fd1\u6b63\u786e\u201d\uff0c\u56e0\u4e3a\u8fd9\u79cd\u4e8b\u60c5\u5b58\u5728\u4e8e\u4e50\u8c31\u4e2d\u3002\u8fd9\u7ec4\u5dee\u5f02\u610f\u5473\u7740\u67e5\u770b\u6728\u5757\u5c06\u5411\u6211\u4eec\u5c55\u793a\u6211\u4eec\u9700\u8981\u4e86\u89e3\u7684\u6709\u5173\u7a0b\u5e8f\u5bf9\u6253\u51fb\u4e50\u8868\u793a\u7684\u6f5c\u5728\u5dee\u5f02\u7684\u5927\u90e8\u5206\u4fe1\u606f\u3002\u6211\u4eec\u53ef\u4ee5\u5b89\u5168\u5730\u4ece\u6211\u4eec\u5c06\u5728\u4e0b\u9762\u770b\u5230\u7684\u8fdb\u884c\u6982\u62ec\uff01\n\u8fd9\u7ed9\u4e86\u6211\u4eec\u5173\u4e8e\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u5982\u4f55\u4ee5\u4e0d\u540c\u65b9\u5f0f\u5bf9\u4e50\u5668\u8fdb\u884c\u5efa\u6a21\u7684\u7b2c\u4e00\u4e2a\u63d0\u793a\uff1aStaffPad \u5728\u67d0\u4e9b\u65b9\u9762\u5c06\u5176\u89c6\u4e3a\u65e0\u97f3\u9ad8\u7684\u4e50\u5668\uff08\u6ce8\u610f\u4e94\u7ebf\u8c31\u5f00\u5934\u7684\u4e24\u6839\u7c97\u5c0f\u8282\uff09\uff0c\u4f46\u4f7f\u7528\u7684\u662f\u503e\u659c\u4e50\u5668\u98ce\u683c\u7684\u4e94\u7ebf\u8c31\u6765\u4ee3\u8868\u5b83\u3002 Dorico \u6b63\u5728\u505a\u4e00\u4e9b\u5b8c\u5168\u4e0d\u540c\u7684\u4e8b\u60c5\uff0c\u6bcf\u4e2a\u6728\u5757\u53ea\u6709\u4e00\u6761\u7ebf\u2014\u2014\u5c31\u597d\u50cf\u5b83\u628a\u6bcf\u4e2a\u6728\u5757\u4ee3\u8868\u4e3a\u4e00\u4e2a\u4e0d\u540c\u7684\u4e50\u5668\uff0c\u4f46\u7ec4\u5408\u5728\u4e00\u8d77\u5f62\u6210\u4e00\u4e2a\u5355\u4e00\u7684\u89c6\u89c9\u8868\u73b0\u3002\u4e8b\u5b9e\u8bc1\u660e\uff0c\u8fd9\u79cd\u89c6\u89c9\u5dee\u5f02\uff08\u5728\u8fd9\u91cc\u5f88\u660e\u663e\uff0c\u56e0\u4e3a\u5b83\u4e0d\u4e00\u5b9a\u5728\u6211\u4eec\u53ef\u80fd\u770b\u8fc7\u7684\u5176\u4ed6\u66f4\u7b80\u5355\u7684\u6253\u51fb\u4e50\u5668\u4e2d\uff09\u6b63\u662f\u5f15\u64ce\u76d6\u4e0b\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u66f4\u91cd\u8981\u7684\u662f\uff0c\u6211\u5b9e\u9645\u4e0a\u5728\u8fd9\u91cc\u4f5c\u5f0a\u4f7f\u8fd9\u4e9b\u770b\u8d77\u6765\u6bd4\u5e73\u65f6\u66f4\u76f8\u4f3c\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDorico \u5b9e\u9645\u4e0a\u4ee5\u5355\u72ec\u7684\u5757\u547d\u540d\u6765\u5448\u73b0\u8fd9\u4e9b\uff1a\u6211\u4e0d\u9057\u4f59\u529b\u5730\u521b\u5efa\u4e86\u4e00\u4e2a\u7ec4\uff0c\u4ee5\u4f7f\u8bb0\u8c31\u6cd5\u5c3d\u53ef\u80fd\u63a5\u8fd1 StaffPad \u7684\u8bb0\u8c31\u6cd5\uff0c\u4ee5\u7a81\u51fa\u663e\u793a\u4e94\u7ebf\u8c31\u7684\u5dee\u5f02\uff0c\u4f46\u4f7f\u7528\u9ed8\u8ba4\u7684\u4e50\u5668\u547d\u540d\u8003\u8651\u5230\u5b83\u53d8\u5f97\u66f4\u52a0\u6e05\u6670\uff1aDorico \u5c06\u6bcf\u4e2a\u5757\u89c6\u4e3a\u65e0\u97f3\u9ad8\u7ebf\u4e0a\u7684\u4e00\u4e2a\u72ec\u7279\u9879\u76ee\uff0c\u800c StaffPad \u5c06\u5b83\u4eec\u89c6\u4e3a\u4e00\u4e2a\u5355\u4e00\u7684\u4e50\u5668\uff0c\u5c06\u65e0\u97f3\u9ad8\u7684\u5757\u6620\u5c04\u5230\u6709\u97f3\u9ad8\u7684\u4e94\u7ebf\u8c31\u4e0a\uff0c\u5e76\u76f8\u5e94\u5730\u5448\u73b0\u5b83\u4eec\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u5174\u8da3\u70b9\u3002\u4e00\u662f\u5982\u4f55\u5b9a\u4e49\u5de5\u5177\u672c\u8eab\u3002\u4e24\u4e2a\u7a0b\u5e8f\u90fd\u9075\u5faa\u6b64\u5904\u7684 Music XML \u89c4\u8303\uff0c\u4f46\u5b83\u4eec\u4ee3\u8868\u4e50\u5668\u7684\u65b9\u5f0f\u5374\u5927\u4e0d\u76f8\u540c\u2014\u2014\u5c3d\u7ba1\u8003\u8651\u5230\u6211\u4eec\u5728\u4e0a\u9762\u770b\u5230\u7684\u60c5\u51b5\uff0c\u8fd9\u5e76\u4e0d\u5947\u602a\uff01 Wood Blocks Wood Block 1 Wood Block 2 Wood Block 3 Wood Block 4 Wood Block 5 StaffPad \u548c Dorico \u90fd\u628a\u8fd9\u4e2a\u4e50\u5668\u5f53\u4f5c\u4e00\u4e2a\u4e50\u8c31\u90e8\u4ef6\uff0c\u5b9e\u9645\u4e0a\u5b83\u6070\u597d\u6709\u4e00\u4e2a\u5339\u914d\u7684\u90e8\u4ef6 ID \u5728 StaffPad \u4e2d\uff0c\u6728\u5757\u88ab\u8868\u793a\u4f5c\u4e3a\u8be5\u9876\u7ea7\u4e50\u8c31\u90e8\u5206\u4e2d\u7684\u5355\u4e2a\u4e50\u8c31\u5de5\u5177\u3002\u5728 Dorico \u4e2d\uff0c\u6bcf\u4e2a\u6728\u5757\u90fd\u662f\u4e50\u8c31\u90e8\u5206\u4e2d\u7684\u4e00\u4e2a\u5355\u72ec\u7684\u4e50\u8c31\u4e50\u5668\u548c\u4e50\u5668\u540d\u79f0\u3002\n\u7ed3\u679c\u662f\u6211\u4e0a\u5468\u53d1\u73b0\u7684\uff1a\u6765\u81ea StaffPad \u7684\u6253\u51fb\u4e50\u5668\u7684\u4e0d\u540c\u7ebf\u6761\u6700\u7ec8\u6620\u5c04\u5230 Dorico \u4e2d\u7684\u591a\u4e2a\u4e0d\u540c\u4e50\u5668\u3002\u5f53\u6211\u4eec\u6df1\u5165\u5230 Music XML \u6587\u4ef6\u7684 &lt;part&gt; \u90e8\u5206\u65f6\uff0c\u8fd9\u4f1a\u7ee7\u7eed\u4e0b\u53bb\u3002 &lt;part&gt; \u4ee3\u8868\u4e50\u8c31\u4e2d\u7684\u6bcf\u4e2a\u97f3\u4e50\u90e8\u5206\uff0c\u5e76\u4fdd\u5b58\u5c5e\u4e8e\u8be5\u90e8\u5206\u7684\u6240\u6709\u5c0f\u8282\u3002\u5982\u679c\u6211\u4eec\u770b\u770b\u8fd9\u4e24\u4e2a\u7a0b\u5e8f\u5982\u4f55\u8868\u793a\u5404\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c31\u4f1a\u660e\u767d\u4e3a\u4ec0\u4e48\u5f88\u96be\u4ece\u4e00\u4e2a\u7a0b\u5e8f\u8f6c\u6362\u5230\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u3002 192 0 major 4 4 1 percussion 5 0 0 0 &lt;!-- ... &lt;note&gt;s... --&gt; \u9996\u5148\u8981\u6ce8\u610f 4 \u662f\u5728\u4eba\u5458\u8be6\u7ec6\u4fe1\u606f\u5b9a\u4e49\u4e2d\u3002\u8fd9\u662f\u4e00\u4e2a\u663e\u793a\u5feb\u901f\u6bd4\u8f83\u7684\u8868\u683c\uff1a\u4e24\u8005\u90fd\u5bf9\u8c31\u53f7\u4f7f\u7528\u6253\u51fb\u4e50\uff08\u5c3d\u7ba1 Dorico \u5728\u8fd9\u91cc\u4e5f\u660e\u786e\u6307\u5b9a\u4e86\u8c31\u53f7\u7f16\u53f7\u5c5e\u6027\uff09\uff0c\u5e76\u5c06\u8fd9\u90e8\u5206\u7684\u8c31\u8868\u8bbe\u7f6e\u4e3a 1\uff0c\u6b63\u5982\u6211\u4eec\u6240\u671f\u671b\u7684\uff1a\u9664\u4e86\u94a2\u7434\u3001\u7ad6\u7434\u3001\u6216\u7c7b\u4f3c\u7684\u5c06\u662f\u5355\u4e94\u7ebf\u8c31\u4e50\u5668\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u4e24\u8005\u5927\u76f8\u5f84\u5ead\u3002 StaffPad \u6307\u5b9a\u4eba\u5458\u884c\uff08\u5728\u4eba\u5458\u8be6\u7ec6\u4fe1\u606f\u5bb9\u5668\u5185\uff09\uff0c\u4f46\u662f\u867d\u7136\u5b83\u53ef\u4ee5\u9009\u62e9\u4f7f\u7528\u884c\u8be6\u7ec6\u4fe1\u606f\u5143\u7d20\u6765\u5b8c\u5168\u6309\u7167 Dorico \u7684\u65b9\u5f0f\u6765\u8868\u793a\u8fd9\u4e00\u70b9\u2026\u2026\u4f46\u5b83\u5e76\u6ca1\u6709\u90a3\u6837\u505a\u3002\u76f8\u53cd\uff0c\u5b83\u53ea\u662f\u6307\u5b9a\u6709\u4e94\u4e2a\u5458\u5de5\u7ebf\u5e76\u7ee7\u7eed\u524d\u8fdb\u3002\u540c\u65f6\uff0cDorico \u5b8c\u5168\u8df3\u8fc7\u4e86\u8fd9\u4e00\u70b9\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u5bf9\u5757\u7684\u8868\u793a\u8fdb\u884c\u4e86\u7f16\u7801\uff1a\u5728\u9876\u90e8\u7684\u90e8\u4ef6\u5217\u8868\u4e2d\u3002\u540c\u6837\uff0cDorico \u6839\u672c\u6ca1\u6709\u6307\u5b9a\u79fb\u8c03\uff0c\u56e0\u4e3a\u5b83\u4e0e\u6b64\u4e50\u5668\u65e0\u5173\u3002 5 \u5f53\u6211\u4eec\u67e5\u770b\u5355\u4e2a\u97f3\u7b26\u65f6\uff0c\u8fd9\u79cd\u6a21\u5f0f\u4f1a\u7ee7\u7eed\u5b58\u5728\u3002\u8ba9\u6211\u4eec\u770b\u770b\u6bcf\u4e2a\u7a0b\u5e8f\u5982\u4f55\u8868\u793a\u7b2c\u4e00\u4e2a\u97f3\u7b26\uff0c\u6700\u4f4e\u7684\u6728\u5757\u3002 \uff08\u5176\u4f59\u7684\u97f3\u7b26\u57fa\u672c\u76f8\u540c\uff0c\u53ea\u662f\u6572\u51fb\u7684\u6728\u5757\u6709\u6240\u4e0d\u540c\u3002\uff09\u8fd9\u6b21 Dorico \u6709\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u4f46\u8fd9\u662f\u56e0\u4e3a\u5b83\u5c06\u6728\u5757\u7f16\u7801\u4e3a\u771f\u6b63\u7684\u65e0\u97f3\u8c03\u5e76\u5c06\u5b83\u4eec\u8868\u793a\u4e3a\u5355\u72ec\u7684\u4e50\u5668\uff0c\u5982\u6211\u4eec\u5728\u96f6\u4ef6\u6e05\u5355\u4e2d\u770b\u5230\u4e86\u3002 StaffPad \u5c06\u7b2c\u4e00\u4e2a\u97f3\u7b26\u8868\u793a\u4e3a\u9ad8\u97f3\u97f3\u7b26\uff1aG4\u201d\u3002 Dorico \u5c06\u5b83\u8868\u793a\u4e3a\u4e00\u4e2a\u65e0\u97f3\u9ad8\u7684\u97f3\u7b26\uff0c\u5b83\u51fa\u73b0\u5728 E4\u201d\u7684\u7279\u5b9a\u663e\u793a\u97f3\u7b26\u548c\u516b\u5ea6\u97f3\u7a0b\u4e2d\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u867d\u7136 StaffPad \u7684\u8868\u793a\u5728\u5df2\u53d1\u5e03\u7684\u97f3\u4e50\u4e2d\u662f\u672a\u77e5\u7684\uff0c\u4f46 Dorico \u7684\u7edd\u5bf9\u662f\u66f4\u6b63\u786e\u7684\u8868\u793a\u3002\u60a8\u8fd8\u53ef\u4ee5\u770b\u5230\uff0c\u4f5c\u4e3a\u9009\u62e9\u5c06\u5757\u8868\u793a\u4e3a\u5355\u4e2a\u4e50\u5668\u7684\u7ed3\u679c\uff0cDorico \u9700\u8981\u4f7f\u7528 id \u5c5e\u6027\u6307\u5b9a\u4e50\u5668\uff0c\u5e76\u6307\u5b9a\u8bbe\u7f6e\u97f3\u7b26\u7684\u4e50\u8c31\u7f16\u53f7\u3002\u5bf9\u4e8e StaffPad \u6765\u8bf4\uff0c\u540e\u9762\u7684\u90a3\u4e9b\u4f4d\u662f\u514d\u8d39\u7684\uff0c\u56e0\u4e3a\u5b83\u9009\u62e9\u4f7f\u7528\u97f3\u7b26\u7684\u97f3\u9ad8\u8868\u793a\uff0c\u4f46\u4ee3\u4ef7\u662f\u8868\u793a\u5177\u6709\u6280\u672f\u4e0a\u4e0d\u6b63\u786e\u7684\u8bed\u4e49\u3002\n\u503c\u5f97\u5728\u8fd9\u91cc\u505c\u4e0b\u6765\u6ce8\u610f\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9 Dorico \u8868\u793a\u7684\u66ff\u4ee3\u65b9\u6848\uff0c\u8fd9\u4e5f\u662f\u6b63\u786e\u7684\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5c06 line-detail \u5143\u7d20\u7528\u4e8e\u4e94\u7ebf\u8c31\u5185\u7684\u4e0d\u540c\u7ebf\u6761\uff0c\u5e76\u91c7\u7528\u4e0e Dorico \u4e00\u6837\u7684\u65e0\u97f3\u9ad8\u97f3\u7b26\u548c\u663e\u793a\u6b65\u957f\u548c\u663e\u793a\u516b\u5ea6\u97f3\u7a0b\u7684\u65b9\u6cd5\u3002 \uff08\u5173\u952e\u4e0d\u5728\u4e8e Dorico \u505a\u5bf9\u4e86\u2014\u2014\u867d\u7136\u6211\u8ba4\u4e3a\u5b83\u505a\u5bf9\u4e86\u2014\u2014\u800c\u662f StaffPad \u505a\u7684\u6709\u70b9\u4e0d\u6b63\u786e\u3002\uff09\u4f46\u5373\u4fbf\u5982\u6b64\uff1a\u683c\u5f0f\u8db3\u591f\u7075\u6d3b\uff0c\u65e0\u8bba\u5982\u4f55\u4e92\u64cd\u4f5c\u90fd\u4f1a\u5f88\u56f0\u96be\u3002\u5bf9\u6211\u6765\u8bf4\uff0c\u5982\u679c StaffPad \u5207\u6362\u5230\u6211\u5728\u6b64\u5904\u63cf\u8ff0\u7684\u7f16\u7801\uff0cDorico \u7684\u5bfc\u5165\u4f1a\u66f4\u597d\u5730\u5de5\u4f5c\uff0c\u8fd9\u5bf9\u6211\u6765\u8bf4\u5e76\u4e0d\u660e\u663e\u3002\u8fd9\u53ea\u662f\u4e00\u4e2a\u96be\u9898\uff01\u5982\u679c\u60a8\u5f88\u597d\u5947\u5e76\u60f3\u81ea\u5df1\u6df1\u5165\u7814\u7a76\uff0c\u6211\u5df2\u7ecf\u4e0a\u4f20\u4e86\u672c\u8ba8\u8bba\u4e2d\u4f7f\u7528\u7684\u4e24\u4e2a\u97f3\u4e50 XML \u6587\u4ef6\uff1b\u968f\u610f\u770b\u4e00\u770b\uff1a\u5f53\u6211\u4eec\u8d70\u5230\u6700\u540e\u65f6\uff0c\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u8fd9\u4e00\u5207\u7684\u610f\u4e49\u662f\u4ec0\u4e48\u3002\u55ef\uff0c\u4e00\u65b9\u9762\uff0c\u6211\u5e0c\u671b\u8fd9\u5bf9\u6211\u4ee5\u5916\u7684\u5176\u4ed6\u4eba\u6709\u5e2e\u52a9\uff0c\u53ef\u4ee5\u51c6\u786e\u4e86\u89e3\u8fd9\u79cd\u97f3\u4e50\u4ea4\u6d41\u683c\u5f0f\u4e2d\u53d1\u751f\u7684\u4e8b\u60c5\u3002\u4e86\u89e3\u8fd9\u4e9b\u4e8b\u60c5\u7684\u590d\u6742\u6027\u53ef\u4ee5\u8ba9\u4eba\u4eec\u66f4\u5bb9\u6613\u540c\u60c5\u8f6f\u4ef6\u5f00\u53d1\u4eba\u5458\uff1a\u4ed6\u4eec\u7684\u5de5\u4f5c\u975e\u5e38\u8f9b\u82e6\uff01 6 \u53e6\u4e00\u65b9\u9762\uff0c\u6211\u5f00\u59cb\u6df1\u5165\u7814\u7a76\u8fd9\u4e2a\u95ee\u9898\uff0c\u770b\u770b\u7f16\u5199\u4e00\u4e2a\u5c0f\u5de5\u5177\u5c06 StaffPad \u7684\u8f93\u51fa\u8f6c\u6362\u6210 Dorico \u80fd\u591f\u7406\u89e3\u7684\u4e1c\u897f\u662f\u591a\u4e48\u56f0\u96be\u3002\u6211\u60f3\u7b54\u6848\u662f\uff1a\u4e0d\u592a\u96be\uff01\u6211\u9700\u8981\u68c0\u67e5\u6bcf\u79cd\u6253\u51fb\u4e50\u5668\u5e76\u786e\u4fdd\u5b83\u6b63\u786e\u5730\u8f6c\u6362\u5b83\uff0c\u4f46\u8fd9\u662f\u6211\u8fc7\u53bb\u4ece\u5176\u4ed6\u7c7b\u578b\u7684 XML \u6df7\u5408\u4e2d\u77e5\u9053\u5982\u4f55\u505a\u7684\u4e8b\u60c5\u3002 7 \u867d\u7136\u6211\u4e0d\u77e5\u9053\u6211\u4f1a\u505a\u90a3\u4ef6\u4e8b\uff0c\u4f46\u6211\u73b0\u5728\u5f88\u6e05\u695a\u8fd9\u9700\u8981\u4ec0\u4e48\u3002\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\uff0c\u8fd9\u5c06\u662f\u4e00\u4e9b\u4e0d\u5e73\u51e1\u7684\u5de5\u4f5c\uff1b\u4f46\u53d6\u51b3\u4e8e\u6211\u6b63\u5728\u8fdb\u884c\u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\u4ec0\u4e48\u6837\u7684\uff0c\u5b83\u6700\u7ec8\u5bf9\u6211\u6765\u8bf4\u53ef\u80fd\u662f\u503c\u5f97\u7684\u3002\u5982\u679c\u786e\u5b9e\u5982\u6b64\u5e76\u4e14\u6211\u6784\u5efa\u4e86\u8be5\u5de5\u5177\uff0c\u6211\u5f53\u7136\u4f1a\u5728\u6b64\u5904\u4ee5\u53ca\u5728\u76f8\u5173\u8f6f\u4ef6\u7a0b\u5e8f\u7684\u5404\u79cd\u8bba\u575b\u4e2d\u5206\u4eab\u5b83\u3002 \uff08\u867d\u7136\u6ca1\u6709\u627f\u8bfa\uff0c\u4f46\u771f\u7684\uff01\uff09\u5927\u591a\u6570\u8bfb\u8005\u53ef\u80fd\u4e0d\u77e5\u9053\u7684\u4e00\u4ef6\u4e8b\uff1a\u4ece\u524d\u5728\u9ad8\u4e2d\u65f6\uff0c\u6211\u5728\u7ba1\u4e50\u5408\u594f\u4e2d\u6f14\u594f\u6253\u51fb\u4e50\u3002\u6211\u5f88\u559c\u6b22\u5b83\uff0c\u6211\u5b66\u5230\u4e86\u5f88\u591a\u4e1c\u897f\uff01 \u21a9\ufe0e POWAHHHRR\uff0c\u65e0\u9650\u7684 POWAAHHHHRRRR \u2014 \u9519\u8bef\uff0c\u62b1\u6b49\uff0c\u6211\u6307\u7684\u662f iPad \u7248 Dorico \u4e0a\u7684\u65e0\u9650\u90e8\u5206\u3002 \u21a9\ufe0e\n\u4e86\u89e3 Dorico \u7684\u4eba\u53ef\u80fd\u6709\u5174\u8da3\u77e5\u9053\uff0c\u65e0\u8bba\u6728\u5757\u662f\u5426\u5728\u6253\u51fb\u4e50\u5668\u7ec4\u4e2d\uff0c\u8fd9\u90fd\u662f\u6b63\u786e\u7684\u3002 \u21a9\ufe0e \u60a8\u53ef\u80fd\u8fd8\u4f1a\u6ce8\u610f\u5230 &lt;divisions&gt;\u3001&lt;key&gt; \u548c &lt;time&gt; \u5728\u5904\u7406\u65b9\u5f0f\u4e0a\u7684\u4e0d\u540c\u3002\u8fd9\u5f88\u6709\u8da3\uff0c\u6211\u5f3a\u70c8\u6000\u7591\u5b83\u6307\u51fa\u4e86\u4e24\u4e2a\u7a0b\u5e8f\u5982\u4f55\u6982\u5ff5\u5316/\u5efa\u6a21\u97f3\u4e50\u7684\u5176\u4ed6\u6839\u6df1\u8482\u56fa\u7684\u5dee\u5f02\uff0c\u4f46\u5bf9\u6211\u4eec\u4eca\u5929\u7684\u76ee\u7684\u6765\u8bf4\u5e76\u4e0d\u91cd\u8981\u3002 \u21a9\ufe0e \u8fd9\u51e0\u4e4e\u80af\u5b9a\u4e0d\u662f\u4e00\u4e2a\u6709\u610f\u8bc6\u5730\u6839\u636e\u6bcf\u4e2a\u4e50\u5668\u9009\u62e9\u8981\u505a\u4ec0\u4e48\u7684\u60c5\u51b5\u3002\u800c\u662f\uff1a\u7a0b\u5e8f\u6307\u5b9a\u5982\u4f55\u4e3a\u7ed9\u5b9a\u7684\u6570\u636e\u6876\u5bfc\u51fa XML\uff0c\u7136\u540e\u5b83\u4f1a\u81ea\u52a8\u8fdb\u884c\u3002\u6240\u4ee5\uff0c\u6700\u6709\u53ef\u80fd\u7684\u662f\uff0cStaffPad \u5bf9\u6bcf\u4e2a\u4e50\u5668\u90fd\u6709\u4e00\u4e2a transpotioin \u7684\u8868\u793a\uff0c\u5373\u4f7f\u5b83\u88ab\u9ed8\u8ba4\u4e86\uff0c\u5c31\u50cf\u8fd9\u91cc\uff0c\u6ca1\u6709\u4ec0\u4e48\u6709\u8da3\u7684\uff0c\u7ee7\u7eed\u524d\u8fdb\uff1b\u800c Dorico \u53ef\u80fd\u6839\u672c\u6ca1\u6709\u8fd9\u6837\u7684\u4e50\u5668\u3002 XML \u5bfc\u51fa\u4ec5\u53cd\u6620\u8be5\u5185\u90e8\u8868\u793a\u3002 \u21a9\ufe0e \u6211\u5bf9\u6b64\u6709\u65e2\u5f97\u5229\u76ca\uff0c\u5373\u4f7f\u6211\uff08\u76ee\u524d\uff1f\uff09\u4e0d\u4f7f\u7528\u4e50\u8c31\u8f6f\u4ef6\u3002 \u21a9\ufe0e \u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f53\u6211\u5efa\u7acb HolyBible.com \u65f6\uff0c\u4f7f\u7528 OSIS \u4ee3\u8868\u7684 KJV \u5723\u7ecf\uff0c\u8fd9\u5341\u5e74\u7684\u5927\u90e8\u5206\u65f6\u95f4\u6559\u4f1a\u4e86\u6211\u5f88\u591a\u3002 \u21a9\ufe0e", "note_en": "Last weekend I  noted that I had hit a number of frustrations in trying to jump back and forth between  StaffPad and  Dorico, because the Music XML handoff between the two was frustrating particularly around percussion\u2009\u2014\u2009and, spoilers, my orchestral writing makes pretty thorough use of percussion!  1 While I\u2019m still somewhat up in the air where I\u2019ll ultimately land on one or the other as a primary tool\u2009\u2014\u2009 recent news from Dorico having made that a yet more interesting consideration!  2\u2009\u2014\u2009but in the meantime I figured it would be interesting to dig into how and why the two differ.\n For this post, I\u2019m going to dig into the major ways the applications differ in how they represent a single percussion instrument: Wood Blocks. I picked Wood Blocks because they\u2019re a bit move involved than something like a bass drum or snare drum:\n They are categorized as unpitched percussion, because they do not have  definite pitches, but they do have  distinct pitches across the blocks.\n They are always represented as some kind of multiline staff. However, different tools present that staff differently!\n They are not a collection of  totally different percussion instruments all grouped together as in a drum kit staff, but the blocks do also have distinct elements to strike in a way that differs from e.g. a piano or a glockenspiel.\n While the Dorico version is more in line with standard idiom, the StaffPad version isn\u2019t  wrong exactly: I have seen Wood Blocks notated exactly that way in published music out in the world. There is a theme here, though: what StaffPad does for things like this is usually  fine, but what Dorico does is usually more close to   correct\u201d insofar as such a thing exists in music notation.\n This set of differences means that looking at wood blocks will show us most of what we need to know about the underlying differences in the programs\u2019 representations of percussion. We  can safely generalize from what we\u2019ll see below!\n       This gives us our first hint of how the two programs  model the instruments differently: StaffPad is treating this as an unpitched instrument in some ways (notice the two-thick-bars start of the staff), but using a pitched-instrument-style staff to represent it. Dorico is doing something totally different, with a single line per block\u2009\u2014\u2009as if it is representing each wood block as a distinct instrument, but grouped together into a single visual representation. As it turns out, that visual difference (apparent here as it is not necessarily in other, simpler percussion instruments we might have looked at) is  exactly what is going on under the hood.\n What\u2019s more, I have actually cheated a bit here to make these appear more similar than they normally would. By default, Dorico actually presents these with the individual blocks named:\n  I went out of my way to create a  Group to get the notation as close as possible to StaffPad\u2019s to highlight the difference in presentation of the musical staves, but with the default instrument naming in view it becomes that much more clear: Dorico thinks of each block as a distinct item on unpitched lines, whereas StaffPad thinks of them as a single instrument with unpitched blocks mapped to pitched stave lines, and they present them accordingly.\n   There are a couple points of interest here. One is how the instruments themselves are defined. Both programs follow the Music XML spec here, but they represent the instrument quite differently\u2009\u2014\u2009albeit in a rather unsurprising way, given what we saw above!\n    Wood Blocks     Wood Block 1       Wood Block 2       Wood Block 3       Wood Block 4       Wood Block 5\n  StaffPad and Dorico both treat this instrument as a single  score-part, and in fact it happens to have a matching part  ID\n In StaffPad, the Wood Blocks are represented as a  single  score-instrument within that top-level  score-part. In Dorico, each wood block is a separate  score-instrument and  instrument-name within the  score-part.\n The result is what I found last week: The different  lines from percussion instruments from StaffPad ended up mapped into multiple different  instruments in Dorico.\n This continues as we dig into the  &lt;part&gt; section of the Music XML file. A  &lt;part&gt; represents each  musical part in the score, and holds all the measures which belong to that part. If we look at how the two programs represent the parts, we can see more of why it\u2019s difficult to translate from one to the other.\n  192     0   major       4   4     1     percussion       5       0   0   0       &lt;!-- ... &lt;note&gt;s... --&gt;\n   The first thing to notice  4 is in the  staff-details definition. Here\u2019s a table showing a quick comparison:\n  Both use  percussion for the  clef (though Dorico explicitly also specifies a  clef  number attribute here), and set  staves to  1 for this part, as we would expect:  most instruments other than a piano, harp, or similar will be single-stave instruments. Beyond this, the two diverge substantially. StaffPad specifies  staff-lines (within the  staff-details container), but while it  could choose to use the  line-detail element to represent this exactly the way Dorico does\u2026 it  doesn\u2019t do that. Instead, it just specifies that there are five staff lines and moves on. Meanwhile, Dorico skips this entirely, because it has encoded the representation of the blocks already: in the  part-list at the top. Likewise, Dorico doesn\u2019t specify transposition at all, because it\u2019s not relevant information for this instrument.  5\n This pattern continues when we look at individual notes. Let\u2019s see how each program represents the first note, the lowest wood block. (The rest of the notes are basically identical, just with differences around which block is being struck.)\n     This time Dorico has far more information, but this is because it is encoding the wood blocks as genuinely unpitched and representing them as separate instruments, as we saw in the  part-list. StaffPad is representing that first note as a pitched note: a   G4\u201d. Dorico is representing it as an unpitched note which apperas in a particular display note-and-octave of   E4\u201d. In this case, while StaffPad\u2019s representation is not unknow of in published music, Dorico\u2019s is definitely the more correct representation. You can also see that as a result of the choice to represent the blocks as individual instruments, Dorico needs to specify the  instrument with an  id attribute, and to specify the  staff number on which the note is set. Those latter bits come   for free\u201d for StaffPad because of its choice to use a pitched representation of the note, but at the cost of a representation which has technically-incorrect semantics.\n It\u2019s worth pausing here to note that a program could choose an alternative to Dorico\u2019s representation which would  also be correct. For example, you could use the  line-detail element for the different lines within the stave, and take the same approach with  unpitched notes and a  display-step and  display-octave as Dorico does. (The point is not that Dorico does it correctly\u2009\u2014\u2009though I think it does\u2009\u2014\u2009so much as that StaffPad does it slightly  incorrectly.) But even so: the format is flexible enough that interop would be hard regardless. It is not obvious to me that Dorico\u2019s import would work any better at all if StaffPad switched to the encoding I described here. This is just a hard problem!\n  If you\u2019re curious and want to dig in further yourself, I\u2018ve uploaded both of the Music XML files used in this discussion; feel free to take a look:\n   As we come here to the end, you might be wondering what the point of all of that was. Well, for one thing I hope it\u2019s helpful for other people besides me to see exactly what\u2019s going on in this musical interchange format. Understanding the complexities of these kinds of things can make it easier for people to sympathize with software developers: whose work is very hard!  6\n For another, I started digging into this to see how hard it would be to write a small tool to transform StaffPad\u2019s output into something Dorico will understand. I think the answer is: not  too hard! I would need to go through each kind of percussion instrument and make sure it transforms it correctly, but that\u2019s the kind of thing I know how to do from other sorts of  XML-mashing in the past.  7\n While I don\u2019t  know that I\u2019ll do that, I now have a pretty good sense of what it would take. It would be some non-trivial amount of work, to be sure; but depending on what my ongoing workflow looks like, it might end up being worth it to me. If it does and I build that tool, I will of course share it here as well as in various forums for the software programs in question. (No promises, though, for real!)\n  A thing most readers likely don\u2019t know: once upon a time back in high school, I played percussion in the wind ensemble. I enjoyed it and I learned a lot!  \u21a9\ufe0e\n POWAHHHRR, UNLIMITED POWAAHHHHRRRR\u2009\u2014\u2009err, sorry, I meant unlimited  parts on Dorico for iPad.  \u21a9\ufe0e\n Folks knowledgeable about Dorico may be interested to know that this is true regardless of whether the wood blocks are in a  group in a percussion kit.  \u21a9\ufe0e\n You might also notice the difference in how  &lt;divisions&gt;,  &lt;key&gt;, and  &lt;time&gt; are handled. This is interesting, and I  strongly suspect it points to other deep-seated differences in how the two programs conceptualize/model music, but doesn\u2019t matter for our purposes today.  \u21a9\ufe0e\n This is almost certainly not a case of consciously choosing on some per-instrument basis what to do. Rather: the programs specify how to export the  XML for a given bucket of data, and then it goes automatically. So, most likely, StaffPad has a representation of transpotioin for  every instrument, even if it\u2019s defaulted, as here, to  nothing-interesting, move along; while Dorico likely doesn\u2019t have it for the instruments like this at all. The  XML export just reflects that internal representation.  \u21a9\ufe0e\n I have a vested interest in that, even if I don\u2019t (currently?) work in music notation software.  \u21a9\ufe0e\n Turns out that working with the  OSIS representation of the  KJV Bible back when I built  HolyBible.com the better part of a decade taught me a  lot.  \u21a9\ufe0e", "posttime": "2021-08-08 21:51:53", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6253\u51fb\u4e50,percussion,dorico", "title": "MusicXML \u548c\u6253\u51fb\u4e50\u7b26\u53f7", "title_en": "MusicXML and Percussion Notation", "transed": 1, "url": "https://v5.chriskrycho.com/journal/musicxml-and-percussion-redux/", "via": "", "real_tags": ["\u6253\u51fb\u4e50", "dorico"]}, {"category": "", "categoryclass": "", "imagename": "77e32cee2ad44cd006f35ad108f5ff5e.jpg", "infoid": 1072115, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u7ec8\u4e8e\u53d1\u5e03\u4e86\u6700\u65b0\u7684\u79fb\u52a8\u5bbd\u5e26\u8986\u76d6\u56fe\uff0c\u4e3a\u6d88\u8d39\u8005\u63d0\u4f9b\u4e86\u4e00\u4e2a\u957f\u671f\u9700\u8981\u7684\u5de5\u5177\uff0c\u4ee5\u4e86\u89e3\u4ed6\u4eec\u5728\u7f8e\u56fd\u4efb\u4f55\u7ed9\u5b9a\u533a\u57df\u53ef\u4ee5\u9884\u671f\u7684\u8702\u7a9d\u8986\u76d6\u7c7b\u578b\u4ea4\u4e92\u5f0f\u5de5\u5177\u663e\u793a 4G LTE \u5bbd\u5e26\u7f8e\u56fd\u56db\u5927\u8fd0\u8425\u5546\u7684\u6570\u636e\u548c\u8bed\u97f3\u79fb\u52a8\u8986\u76d6\uff1aAT&amp;T\u3001T-Mobile\u3001USmobile \u548c Verizon\u3002 FCC \u5728\u5468\u4e94\u7684\u65b0\u95fb\u7a3f\u4e2d\u8868\u793a\uff0c\u60a8\u770b\u5230\u7684\u6570\u636e\u622a\u81f3 2021 \u5e74 5 \u6708 15 \u65e5\u662f\u51c6\u786e\u7684\u3002\u7528\u6237\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u8fd0\u8425\u5546\u53e0\u52a0\u4e0d\u540c\u7684\u8986\u76d6\u56fe\uff0c\u4ee5\u5728\u4e00\u4e2a\u5730\u65b9\u6bd4\u8f83\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u533a\u5206\u6570\u636e\u53ef\u7528\u6027\u548c\u8bed\u97f3\u53ef\u7528\u6027\u3002 \u201c\u8fd9\u662f FCC \u53d1\u5e03\u7684\u7b2c\u4e00\u5f20\u663e\u793a\u66f4\u65b0\u7684\u79fb\u52a8\u8986\u76d6\u8303\u56f4\u7684\u516c\u5171\u5730\u56fe\uff0c\u4e0e\u8be5\u673a\u6784\u4e4b\u524d\u53d1\u5e03\u7684\u5176\u4ed6\u6570\u636e\u76f8\u6bd4\u6709\u4e86\u663e\u7740\u6539\u8fdb\uff0c\u201d\u8be5\u673a\u6784\u8868\u793a\uff0c\u5e76\u8865\u5145\u8bf4\u5b83\u201c\u5c06\u63d0\u9ad8\u7531\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u6536\u96c6\u7684\u5bbd\u5e26\u53ef\u7528\u6027\u6570\u636e\u7684\u7edf\u4e00\u6027\u548c\u4e00\u81f4\u6027\u3002\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u3002\u201d\u4f46\u662f\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0cFCC \u8fd8\u8868\u793a\uff0c\u5b83\u4f7f\u7528\u4e0a\u8ff0\u8fd0\u8425\u5546\u81ea\u613f\u63d0\u4f9b\u7684\u6570\u636e\u521b\u5efa\u4e86\u5730\u56fe\uff0c\u8fd9\u4e9b\u8fd0\u8425\u5546\u5728\u51c6\u786e\u81ea\u6211\u62a5\u544a\u5176\u8986\u76d6\u8303\u56f4\u65b9\u9762\u6ca1\u6709\u826f\u597d\u7684\u8bb0\u5f55\u3002\u8fd9\u4e0d\u662f\u552f\u4e00\u660e\u663e\u7684\u95ee\u9898\u3002\u8be5\u5de5\u5177\u6ca1\u6709\u89e3\u51b3\u5bb6\u5ead\u4e92\u8054\u7f51\u53ef\u7528\u6027\u7684\u8303\u56f4\uff0c\u8fd9\u662f\u6240\u8c13\u7684\u6570\u5b57\u9e3f\u6c9f\u7684\u4e3b\u8981\u95ee\u9898\uff0c\u4e5f\u6ca1\u6709\u89e3\u51b3\u80fd\u591f\u83b7\u5f97\u8d1f\u62c5\u5f97\u8d77\u7684\u3001\u53ef\u9760\u7684\u4e92\u8054\u7f51\u670d\u52a1\u7684\u5c45\u6c11\u4e0e\u65e0\u6cd5\u83b7\u5f97\u7684\u5c45\u6c11\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002\u6bcf\u4e2a\u8fd0\u8425\u5546\u7684 5G \u5efa\u8bbe\u4e5f\u6ca1\u6709\u53cd\u6620\u51fa\u6765\u3002\u8fd8\u7f3a\u5c11\u7528\u6237\u5728\u4efb\u4f55\u7ed9\u5b9a\u7f51\u7edc\u4e0a\u53ef\u4ee5\u671f\u671b\u7684\u901f\u5ea6\u7c7b\u578b\u3002 FCC \u4ee3\u7406\u4e3b\u5e2d\u6770\u897f\u5361\u00b7\u7f57\u68ee\u6c83\u585e\u5c14 (Jessica Rosenworcel) \u5728\u6709\u5173\u8be5\u5de5\u5177\u63a8\u51fa\u7684\u8bf4\u660e\u4e2d\u8868\u793a\uff0c\u8981\u83b7\u5f97 4G \u6570\u636e\u8986\u76d6\uff0c\u7f51\u7edc\u5fc5\u987b\u63d0\u4f9b\u81f3\u5c11 5Mbps \u7684\u4e0b\u8f7d\u901f\u5ea6\u548c 1Mbps \u7684\u4e0a\u4f20\u901f\u5ea6\u3002\u4f46\u662f\uff0c\u76ee\u524d\u65e0\u6cd5\u5728\u5730\u56fe\u4e0a\u5224\u65ad\u8fd0\u8425\u5546\u5728\u4efb\u4f55\u7ed9\u5b9a\u533a\u57df\u7684\u8986\u76d6\u8303\u56f4\u662f\u5426\u8d85\u8fc7\u8fd9\u4e9b\u57fa\u51c6\u6216\u591a\u6b21\u8d85\u8fc7\u8fd9\u4e9b\u57fa\u51c6\u3002\u6240\u4ee5\u8fd9\u662f\u5411\u524d\u8fc8\u51fa\u7684\u4e00\u6b65\uff0c\u4f46\u53ea\u662f\u52c9\u5f3a\uff0c\u800c\u4e14\u65e9\u5c31\u5e94\u8be5\u8fd9\u6837\u505a\u4e86\u3002\u4fc3\u4f7f\u8be5\u5730\u56fe\u9996\u5148\u521b\u5efa\u7684\u6cd5\u5f8b\uff0c\u5373\u53bb\u5e74\u7684\u5bbd\u5e26\u90e8\u7f72\u51c6\u786e\u6027\u548c\u6280\u672f\u53ef\u7528\u6027\u6cd5\u6848\uff0c\u8981\u6c42 FCC \u63d0\u9ad8\u5176\u5bbd\u5e26\u53ef\u7528\u6027\u5730\u56fe\u7684\u51c6\u786e\u6027\uff0c\u56e0\u4e3a\u51b2\u7a81\u548c\u8fc7\u65f6\u7684\u6570\u636e\u963b\u788d\u4e86\u5f25\u5408\u6570\u5b57\u9e3f\u6c9f\u7684\u52aa\u529b\u5e74\u3002\u9664\u5176\u4ed6\u8981\u6c42\u5916\uff0c\u8be5\u673a\u6784\u8fd8\u88ab\u547d\u4ee4\u6c47\u7f16\u548c\u53d1\u5e03\u6709\u5173\u6709\u7ebf\u3001\u56fa\u5b9a\u65e0\u7ebf\u548c\u536b\u661f\u5bbd\u5e26\u63d0\u4f9b\u5546\u7684\u66f4\u53ef\u9760\u6570\u636e\uff0c\u5e76\u5efa\u7acb\u4f17\u5305\u6d41\u7a0b\u4ee5\u6536\u96c6\u516c\u4f17\u4fe1\u606f\u3002\u7f8e\u56fd\u8054\u90a6\u901a\u4fe1\u59d4\u5458\u4f1a\u5468\u4e94\u8868\u793a\uff0c\u73b0\u5728\u8be5\u5de5\u5177\u5df2\u4e0a\u7ebf\uff0c\u4f17\u5305\u6d41\u7a0b\u5c06\u53d1\u6325\u66f4\u5927\u4f5c\u7528\u3002\u4e00\u65e6\u540e\u7aef\u901a\u8fc7\u4e00\u4e9b\u6700\u7ec8\u7684\u9a8c\u8bc1\u8fc7\u7a0b\uff0c\u6d88\u8d39\u8005\u4ee5\u53ca\u5dde\u548c\u5730\u65b9\u5f53\u5c40\u5c06\u80fd\u591f\u201c\u6839\u636e\u5b9e\u9645\u7ecf\u9a8c\u63d0\u4f9b\u8f93\u5165\u201d\uff0c\u4ee5\u4ece\u957f\u8fdc\u6765\u770b\u63d0\u9ad8\u5de5\u5177\u7684\u51c6\u786e\u6027\u3002\n\u201c\u4e00\u5f20\u597d\u7684\u5730\u56fe\u4f1a\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u800c\u53d8\u5316\uff0c\u201d\u7f57\u68ee\u6c83\u585e\u5c14\u5728\u65b0\u95fb\u7a3f\u4e2d\u8bf4\u3002 \u201c\u4eca\u5929\u7684\u65b0\u5730\u56fe\u4ee3\u8868\u4e86\u6211\u4eec\u5728\u5b9e\u65bd\u5bbd\u5e26\u6570\u636e\u6cd5\u6848\u548c\u6784\u5efa\u4e0b\u4e00\u4ee3\u5bbd\u5e26\u5730\u56fe\u65b9\u9762\u53d6\u5f97\u7684\u8fdb\u5c55\uff0c\u8fd9\u4e9b\u5730\u56fe\u53ef\u4ee5\u5e2e\u52a9\u8fde\u63a5 100% \u7684\u7f8e\u56fd\u4eba\u3002\u4f7f\u7528\u6539\u8fdb\u7684\u7cfb\u7edf\u548c\u6570\u636e\uff0c\u6211\u4eec\u53ef\u4ee5\u63d0\u4f9b\u6709\u5173\u5bbd\u5e26\u670d\u52a1\u5728\u5168\u56fd\u8303\u56f4\u5185\u548c\u4e0d\u5728\u5168\u56fd\u8303\u56f4\u5185\u7684\u66f4\u597d\u4fe1\u606f\u3002\u201d Rosenworcel \u5728\u5979\u7684\u7b14\u8bb0\u4e2d\u8868\u793a\uff0c\u8fd9\u5f20\u5730\u56fe\u662f\u201c\u4e00\u7cfb\u5217\u52aa\u529b\u4e2d\u7684\u7b2c\u4e00\u6b21\u201d\uff0c\u65e8\u5728\u8ba9\u6d88\u8d39\u8005\u66f4\u6e05\u695a\u5730\u4e86\u89e3\u5168\u56fd\u7684\u7f51\u7edc\u8986\u76d6\u8303\u56f4\u3002", "note_en": "The Federal Communications Commission has finally released   an up-to-date mobile broadband coverage map, giving consumers a long-needed tool to find out what kind of cellular coverage they can expect in any given area across the U.S.\n  The interactive tool shows 4G LTE broadband data and voice mobile coverage of four of the nation\u2019s largest carriers: AT&amp;T, T-Mobile, UScellular, and Verizon. The data you see is accurate as of May 15, 2021, the FCC said in   a press release Friday. Users can overlay different coverage maps for different carriers to compare all of the information in one place as well as differentiate between data availability and voice availability.\n \u201cThis is the first public map showing updated mobile coverage released by the FCC and represents a significant improvement over other data previously published by the agency,\u201d the agency said, adding that it \u201cwill improve the uniformity and consistency of broadband availability data collected by the FCC.\u201d\n    However, it\u2019s worth noting that the FCC also said it created the map using data voluntarily provided by the aforementioned carriers, who don\u2019t have   a great track record of accurately self-reporting their coverage. That\u2019s not the only glaring issue. The tool doesn\u2019t address the scope of home internet availability, a leading concern of the so-called   digital divide, or the gap between residents who have access to affordable, reliable internet service and those who don\u2019t. Each carrier\u2019s 5G buildouts aren\u2019t reflected as well.\n  Also missing is what kind of speeds users can expect on any given network. Acting FCC chairwoman Jessica Rosenworcel said in   a note about the tool\u2019s launch that to qualify as 4G data coverage, a network has to provide at least 5Mbps download speeds and 1Mbps upload speeds. Currently, though, there\u2019s no way to tell on the map if a carrier\u2019s coverage in any given area narrowly squeaks past those benchmarks or tops them several times over.\n   So it\u2019s a step forward, but just barely, and a long-overdue one at that. The   law that prompted this map to be created in the first place, last year\u2019s Broadband Deployment Accuracy and Technological Availability Act, required the FCC to improve the accuracy of its broadband availability maps because conflicting and outdated data has hampered efforts to bridge the digital divide for years. Among other requirements, the agency was ordered to compile and release more robust data about wired, fixed wireless, and satellite broadband providers as well as establish a crowdsourcing process to collect information from the public.\n   Now that the tool is live, that crowdsourcing process will come more into play, the FCC said Friday. Once the backend goes through some final verification processes, consumers along with state and local authorities will be able to \u201cprovide input informed by real-world experience\u201d to improve the tool\u2019s accuracy in the long run.\n \u201cA good map is one that changes over time,\u201d said Rosenworcel in the press release. \u201cToday\u2019s new map represents progress in our efforts to implement the Broadband DATA Act and build next-generation broadband maps that can help to connect 100 percent of Americans. Using improved systems and data, we can provide better information about where broadband service is and is not across the country.\u201d\n  In her note, Rosenworcel said that this map is the \u201cfirst in a series of efforts\u201d to offer consumers a clearer understanding of network coverage across the nation.", "posttime": "2021-08-08 21:51:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u53d1\u5e03,\u7f8e\u56fd,\u5bbd\u5e26,finally,\u6570\u636e", "title": "FCC \u7ec8\u4e8e\u53d1\u5e03\u4e86\u7f8e\u56fd\u6700\u65b0\u7684\u79fb\u52a8\u5bbd\u5e26\u5730\u56fe", "title_en": "FCC Finally Debuts an Up-to-Date Mobile Broadband Map of the U.S.", "transed": 1, "url": "https://gizmodo.com/fcc-finally-debuts-an-up-to-date-mobile-broadband-map-o-1847443988", "via": "", "real_tags": ["\u53d1\u5e03", "\u7f8e\u56fd", "\u5bbd\u5e26", "finally", "\u6570\u636e"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072114, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8fd9\u4e2a\u8fc7\u7a0b\u662f\u81ea\u52a8\u7684\u3002\u60a8\u7684\u6d4f\u89c8\u5668\u5c06\u5f88\u5feb\u91cd\u5b9a\u5411\u5230\u60a8\u8bf7\u6c42\u7684\u5185\u5bb9\u3002", "note_en": "This process is automatic. Your browser will redirect to your requested content shortly.", "posttime": "2021-08-08 21:51:05", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u56fd\u4f1a\u8bae\u5458,mps,\u8bf7\u6c42", "title": "2012 \u5e74\uff0c\u6709 59% \u7684\u82f1\u56fd\u56fd\u4f1a\u8bae\u5458\u4e0d\u53ca\u683c\u7684\u6982\u7387\u8fde\u7eed\u7ffb\u8f6c\u4e24\u4e2a\u5934", "title_en": "In 2012, 59% of British MPs Flunked Probability of Flipping Two Heads in a Row", "transed": 1, "url": "https://www.unz.com/isteve/british-mps-flunked-probability-of-flipping-two-heads-in-a-row/", "via": "", "real_tags": ["\u56fd\u4f1a\u8bae\u5458", "mps", "\u8bf7\u6c42"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072113, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u867d\u7136\u641c\u7d22\u5f15\u64ce\u5bf9\u666e\u901a\u4e92\u8054\u7f51\u7528\u6237\u975e\u5e38\u6709\u5e2e\u52a9\uff0c\u4f46\u7248\u6743\u6240\u6709\u8005\u4e5f\u770b\u5230\u4e86\u5de8\u5927\u7684\u8d1f\u9762\u5f71\u54cd\u3002 \u201c\u4fb5\u6743\u7f51\u7ad9\u201d\u51fa\u73b0\u5728\u641c\u7d22\u7ed3\u679c\u4e2d\u8fd9\u4e00\u4e8b\u5b9e\u5df2\u6210\u4e3a\u4ee4\u4eba\u6cae\u4e27\u7684\u6839\u6e90\u3002\u56e0\u6b64\uff0c\u8c37\u6b4c\u548c\u5176\u4ed6\u641c\u7d22\u5f15\u64ce\u6b63\u9762\u4e34\u6e90\u6e90\u4e0d\u65ad\u7684 DMCA \u5220\u9664\u901a\u77e5\u3002\u4ec5 Google \u5c31\u5904\u7406\u4e86\u8d85\u8fc7 50 \u4ebf\u4e2a\u5220\u9664\u8bf7\u6c42\uff0c\u6bcf\u5468\u90fd\u4f1a\u62a5\u544a\u6570\u767e\u4e07\u4e2a\u65b0 URL\u3002\u867d\u7136\u5176\u4e2d\u5927\u591a\u6570\u6b63\u786e\u6307\u5411\u6709\u95ee\u9898\u7684\u94fe\u63a5\uff0c\u4f46\u4e5f\u6709\u5f88\u591a\u9519\u8bef\u3002\u4e00\u4e9b\u7248\u6743\u6240\u6709\u8005\u5c06\u5b8c\u5168\u5408\u6cd5\u7684\u7f51\u7ad9\u6807\u8bb0\u4e3a\u76d7\u7248\u5929\u5802\uff0c\u800c\u53e6\u4e00\u4e9b\u7248\u6743\u6240\u6709\u8005\u5219\u901a\u8fc7\u7784\u51c6\u4ed6\u4eec\u81ea\u5df1\u7684\u7f51\u7ad9\u6765\u6253\u51fb\u81ea\u5df1\u3002\u540e\u8005\u6700\u8fd1\u53d1\u751f\u5728\u7f51\u7edc\u6f2b\u753b\u8ba2\u9605\u670d\u52a1 Toomics \u4e0a\u3002\u672c\u5468\u6211\u4eec\u770b\u5230\u4e86\u53e6\u4e00\u4e2a\u6709\u95ee\u9898\u7684 DMCA \u901a\u77e5\uff0c\u8fd9\u53ef\u80fd\u66f4\u7cdf\u3002\u4e4c\u514b\u5170\u7535\u89c6\u9891\u9053 TRK \u8981\u6c42 Google \u5220\u9664 IP \u5730\u5740 127.0.0.1 \u4e0a\u6258\u7ba1\u7684\u5185\u5bb9\uff0c\u8be5 IP \u5730\u5740\u662f\u8bbe\u5907\u6216\u670d\u52a1\u5668\u7684\u672c\u5730\u4e3b\u673a\u3002\u8be5\u8bf7\u6c42\u662f\u7531 TKR \u7684\u53cd\u76d7\u7248\u5408\u4f5c\u4f19\u4f34 Vindex \u53d1\u9001\u7684\uff0c\u5b83\u57fa\u672c\u4e0a\u5728\u81ea\u5df1\u7684\u673a\u5668\u4e0a\u6807\u8bb0\u4e86\u4e00\u4e2a\u6587\u4ef6\u3002 \u201c\u4fb5\u6743\u201d\u94fe\u63a5\u662f 127.0.0.1:6878/ace/manifest.m3u\u3002\u8fd9\u6307\u5411\u4e00\u4e2a\u64ad\u653e\u5217\u8868\u6587\u4ef6\uff0c\u53ef\u80fd\u7528\u4e8e\u7ecf\u5e38\u7528\u4e8e\u76d7\u7248\u5185\u5bb9\u7684 P2P \u6d41\u5a92\u4f53\u5e73\u53f0 Ace Stream\u3002\u6839\u636e\u5220\u9664\u901a\u77e5\uff0c\u6240\u6709\u88ab\u4e3e\u62a5\u7684\u94fe\u63a5\u201c\u90fd\u975e\u6cd5\u63d0\u4f9b\u4e86\u5916\u90e8\u94fe\u63a5\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u94fe\u63a5\u8bbf\u95ee\u548c/\u6216\u4e0b\u8f7d\u672a\u7ecf\u6388\u6743\u7684\u53d7\u7248\u6743\u4fdd\u62a4\u7684\u8db3\u7403\u5185\u5bb9\u3002\u201d\u7136\u540e\u5c06\u5305\u542b Vindex \u8ba1\u7b97\u673a\u4e0a\u7684\u6587\u4ef6\u3002\n\u7531\u4e8e 127.0.0.1 \u6307\u7684\u662f\u4e3b\u673a\uff0c\u56e0\u6b64\u6280\u672f\u4e0a\u8981\u6c42 Google \u4ece\u5176\u670d\u52a1\u5668\u4e2d\u5220\u9664\u6587\u4ef6\u3002\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u6587\u4ef6\u3002\u4e0d\u7528\u8bf4\uff0c\u8c37\u6b4c\u6ca1\u6709\u91c7\u53d6\u4efb\u4f55\u56de\u5e94\u63aa\u65bd\u3002\u4ee5\u4e0a\u8868\u660e Vindex \u53ef\u80fd\u60f3\u8981\u597d\u597d\u770b\u770b\u5b83\u7684\u79fb\u9664\u673a\u5668\u4eba\u3002\u5728 DMCA \u901a\u77e5\u65b9\u9762\uff0c\u8be5\u516c\u53f8\u7684\u58f0\u8a89\u5e76\u4e0d\u9ad8\u3002\u5728\u62a5\u544a\u7ed9 Google \u7684\u6240\u6709\u94fe\u63a5\u4e2d\uff0c\u53ea\u6709 10% \u591a\u4e00\u70b9\u88ab\u641c\u7d22\u5f15\u64ce\u5220\u9664\u3002", "note_en": "While search engines are extremely helpful for the average Internet user, copyright holders also see a massive downside.\n The fact that \u201cinfringing sites\u201d show up in search results has become a source of frustration. As a result, Google and other search engines are facing a steady stream of DMCA takedown notices.\n Google alone has processed more than  five billion takedown requests and millions of new URLs are reported every week. While the majority of these correctly point to problematic links, there are plenty of mistakes too.\n Some copyright holders flag perfectly  legitimate websites as piracy havens, which others shoot themselves in the foot by targeting their own websites. The latter happened to the webtoon  subscription service Toomics just recently.\n  This week we saw yet another problematic DMCA notice, which is perhaps even worse. TV channel  TRK Ukraine asked Google to remove content hosted on the IP-address  127.0.0.1, which is the localhost of a device or server.\n  The request was sent by TKR\u2019s anti-piracy partner  Vindex, which essentially flagged a file on its own machine. The \u2018infringing\u2019 link is 127.0.0.1:6878/ace/manifest.m3u. This points to a playlist file, possibly for the P2P streaming platform  Ace Stream that\u2019s often used to pirate content.\n  According to the takedown notice, all reported links \u201cillegally provide external links with which users can access and/or download unauthorized copyrighted contents of Football.\u201d That would then include the file on Vindex\u2019s computer.\n Since 127.0.0.1 refers to the host computer, Google is technically asked to remove a file from its servers. A file that doesn\u2019t exist. Needless to say, Google hasn\u2019t taken any action in response.\n The above suggests that Vindex may want to take a good look at its takedown bots. The company doesn\u2019t have a stellar reputation when it comes to DMCA notices. Of  all the links that were reported to Google, little more than 10% were removed by the search engine.", "posttime": "2021-08-08 21:50:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8c37\u6b4c,google,piracy,\u7f51\u7ad9", "title": "\u53cd\u76d7\u7248\u516c\u53f8\u8981\u6c42\u8c37\u6b4c\u963b\u6b62 127.0.0.1", "title_en": "Anti-Piracy Firm Asks Google to Block 127.0.0.1", "transed": 1, "url": "https://torrentfreak.com/anti-piracy-firm-asks-google-to-block-127-0-0-1-210808/", "via": "", "real_tags": ["\u8c37\u6b4c", "google", "piracy", "\u7f51\u7ad9"]}, {"category": "", "categoryclass": "", "imagename": "ff0287210796737fd34a6056d629fa7a.png", "infoid": 1072112, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u60a8\u5728\u516c\u53f8\u7684\u751f\u4ea7\u73af\u5883\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u6216\u6700\u5371\u9669\u7684\u4ee3\u7801\u7247\u6bb5\u662f\u4ec0\u4e48\uff1f\u6211\u4ece\u672a\u9047\u5230\u8fc7\u6211\u8ba4\u4e3a\u662f\u6545\u610f\u6076\u610f\u548c\u90aa\u6076\u7684\u751f\u4ea7\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u5f88\u60f3\u77e5\u9053\u5176\u4ed6\u4eba\u53d1\u73b0\u4e86\u4ec0\u4e48\u3002\u6211\u89c1\u8fc7\u7684\u6700\u5371\u9669\u7684\u4ee3\u7801\u662f\u4e00\u4e2a\u5b58\u50a8\u8fc7\u7a0b\uff0c\u8ddd\u79bb\u6211\u4eec\u7684\u6838\u5fc3\u751f\u4ea7\u6570\u636e\u5e93\u670d\u52a1\u5668\u6709\u4e24\u4e2a\u94fe\u63a5\u670d\u52a1\u5668\u3002\u8be5\u5b58\u50a8\u8fc7\u7a0b\u63a5\u53d7\u4efb\u4f55 NVARCHAR(8000) \u53c2\u6570\u5e76\u901a\u8fc7\u53cc\u8df3 sp_executeSQL \u547d\u4ee4\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u6267\u884c\u8be5\u53c2\u6570\u3002\u4e5f\u5c31\u662f\u8bf4\uff0csp_executeSQL \u547d\u4ee4\u6267\u884c\u4e86\u53e6\u4e00\u4e2a sp_executeSQL \u547d\u4ee4\uff0c\u4ee5\u4fbf\u8df3\u8f6c\u4e24\u4e2a\u94fe\u63a5\u7684\u670d\u52a1\u5668\u3002\u54e6\uff0c\u94fe\u63a5\u670d\u52a1\u5668\u5e10\u6237\u5728\u76ee\u6807\u751f\u4ea7\u670d\u52a1\u5668\u4e0a\u5177\u6709\u7cfb\u7edf\u7ba1\u7406\u5458\u6743\u9650\u3002 1 \u6211\u5199\u8fc7\u6211\u4ee5\u524d\u5728\u8fd9\u91cc\u548c\u8fd9\u91cc\u5de5\u4f5c\u8fc7\u7684\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u7b80\u5355\u6765\u8bf4\uff0c\u6211\u516c\u53f8\u4ece\u5370\u5ea6\u7ee7\u627f\u4e8613\u4e07\u884c\u5783\u573e\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u662f\u7528 C# \u7f16\u5199\u7684\uff1b\u8fd9\u662f\u4e00\u4e2a\u67dc\u5458\u5e94\u7528\u7a0b\u5e8f\uff0c\u5f53\u4f60\u53bb\u94f6\u884c\u65f6\uff0c\u67dc\u5458\u5728\u67dc\u53f0\u540e\u9762\u4f7f\u7528\u7684\u90a3\u79cd\u8f6f\u4ef6\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6bcf\u5929\u5d29\u6e83 40-50 \u6b21\uff0c\u800c\u4e14\u6839\u672c\u65e0\u6cd5\u91cd\u6784\u4e3a\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u3002\u6211\u7684\u516c\u53f8\u4e0d\u5f97\u4e0d\u5728 12 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u91cd\u65b0\u7f16\u5199\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e2a\u5e94\u7528\u7a0b\u5e8f\u662f\u90aa\u6076\u7684\uff1f\u56e0\u4e3a\u770b\u5230\u6e90\u4ee3\u7801\u5c31\u8db3\u4ee5\u8ba9\u4e00\u4e2a\u7406\u667a\u7684\u4eba\u53d1\u75af\uff0c\u4e00\u4e2a\u7406\u667a\u7684\u75af\u5b50\u3002\u7528\u4e8e\u7f16\u5199\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u626d\u66f2\u903b\u8f91\u53ef\u80fd\u53ea\u662f\u53d7\u5230\u6d1b\u592b\u514b\u62c9\u592b\u7279\u5f0f\u5669\u68a6\u7684\u542f\u53d1\u3002\u6b64\u5e94\u7528\u7a0b\u5e8f\u7684\u72ec\u7279\u529f\u80fd\u5305\u62ec\uff1a \u5728 130,000 \u884c\u4ee3\u7801\u4e2d\uff0c\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5305\u542b 5 \u4e2a\u7c7b\uff08\u4e0d\u5305\u62ec\u8868\u5355\u6587\u4ef6\uff09\u3002\u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u516c\u5171\u9759\u6001\u7c7b\u3002\u4e00\u4e2a\u7c7b\u79f0\u4e3a Globals.cs\uff0c\u5176\u4e2d\u5305\u542b 1000 \u548c 1000 \u548c 1000 \u4e2a\u516c\u5171\u9759\u6001\u53d8\u91cf\uff0c\u7528\u4e8e\u4fdd\u5b58\u5e94\u7528\u7a0b\u5e8f\u7684\u6574\u4e2a\u72b6\u6001\u3002\u8fd9\u4e94\u4e2a\u7c7b\u603b\u5171\u5305\u542b 20,000 \u884c\u4ee3\u7801\uff0c\u5176\u4f59\u4ee3\u7801\u5d4c\u5165\u5728\u8868\u5355\u4e2d\u3002\u4f60\u4e00\u5b9a\u60f3\u77e5\u9053\uff0c\u7a0b\u5e8f\u5458\u662f\u5982\u4f55\u5728\u6ca1\u6709\u4efb\u4f55\u7c7b\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u5982\u6b64\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\uff1f\u4ed6\u4eec\u7528\u4ec0\u4e48\u6765\u8868\u793a\u4ed6\u4eec\u7684\u6570\u636e\u5bf9\u8c61\uff1f\u4e8b\u5b9e\u8bc1\u660e\uff0c\u7a0b\u5e8f\u5458\u4ec5\u4ec5\u901a\u8fc7\u7ec4\u5408 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u6210\u529f\u5730\u91cd\u65b0\u53d1\u660e\u4e86\u6211\u4eec\u90fd\u5b66\u5230\u7684\u5173\u4e8e OOP \u7684\u4e00\u534a\u6982\u5ff5\u3002\u6211\u4eec\u770b\u5230\u4e86\u5f88\u591a\u8fd9\u6837\u7684\uff1a\n\u8bf7\u8bb0\u4f4f\uff0c\u4e0a\u9762\u7684\u6570\u636e\u7ed3\u6784\u90fd\u4e0d\u662f\u5f3a\u7c7b\u578b\u7684\uff0c\u56e0\u6b64\u60a8\u5fc5\u987b\u5c06\u5217\u8868\u4e2d\u7684\u4efb\u4f55\u795e\u79d8\u5bf9\u8c61\u8f6c\u6362\u4e3a\u6b63\u786e\u7684\u7c7b\u578b\u3002\u4ec5\u4f7f\u7528 ArrayLists\u3001HashTables \u548c DataTables \u5c31\u53ef\u4ee5\u521b\u5efa\u4ec0\u4e48\u6837\u7684\u590d\u6742\u7684\u3001\u7c7b\u4f3c\u4e8e Rube Goldberg \u7684\u6570\u636e\u7ed3\u6784\uff0c\u771f\u662f\u4ee4\u4eba\u60ca\u5947\u3002\u8981\u5206\u4eab\u5982\u4f55\u4f7f\u7528\u4e0a\u9762\u8be6\u8ff0\u7684\u5bf9\u8c61\u6a21\u578b\u7684\u793a\u4f8b\uff0c\u8bf7\u8003\u8651 Accounts\uff1a\u539f\u59cb\u7a0b\u5e8f\u5458\u4e3a\u5e10\u6237\u7684\u6bcf\u4e2a\u53ef\u7406\u89e3\u7684\u5c5e\u6027\u521b\u5efa\u4e86\u4e00\u4e2a\u5355\u72ec\u7684 HashTable\uff1a\u4e00\u4e2a\u540d\u4e3a hstAcctExists\u3001hstAcctNeedsOverride\u3001hstAcctFirstName \u7684 HashTable\u3002\u6240\u6709\u8fd9\u4e9b\u54c8\u5e0c\u8868\u7684\u952e\u90fd\u662f\u201c|\u201d\u5206\u9694\u7684\u5b57\u7b26\u4e32\u3002\u53ef\u4ee5\u60f3\u5230\u7684\u952e\u5305\u62ec\u201c123456|DDA\u201d\u3001\u201c24100|SVG\u201d\u3001\u201c100|LNS\u201d\u7b49\u3002\u7531\u4e8e\u6574\u4e2a\u5e94\u7528\u7a0b\u5e8f\u7684\u72b6\u6001\u5f88\u5bb9\u6613\u4ece\u5168\u5c40\u53d8\u91cf\u4e2d\u8bbf\u95ee\uff0c\u7a0b\u5e8f\u5458\u53d1\u73b0\u6ca1\u6709\u5fc5\u8981\u5c06\u53c2\u6570\u4f20\u9012\u7ed9\u65b9\u6cd5\u3002\u6211\u4f1a\u8bf4 90% \u7684\u65b9\u6cd5\u91c7\u7528 0 \u53c2\u6570\u3002\u5728\u5c11\u6570\u8fd9\u6837\u505a\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6240\u6709\u53c2\u6570\u90fd\u4f5c\u4e3a\u5b57\u7b26\u4e32\u4f20\u9012\uff0c\u800c\u4e0d\u7ba1\u5b57\u7b26\u4e32\u4ee3\u8868\u4ec0\u4e48\u3002\u6ca1\u6709\u526f\u4f5c\u7528\u7684\u529f\u80fd\u4e0d\u5b58\u5728\u3002\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u4fee\u6539\u4e86 Globals \u7c7b\u4e2d\u7684 1 \u4e2a\u6216\u591a\u4e2a\u53d8\u91cf\u3002\u5e76\u975e\u6240\u6709\u7684\u526f\u4f5c\u7528\u90fd\u6709\u610f\u4e49\uff1b\u4f8b\u5982\uff0c\u5176\u4e2d\u4e00\u79cd\u8868\u5355\u9a8c\u8bc1\u65b9\u6cd5\u6709\u4e00\u4e2a\u795e\u79d8\u7684\u526f\u4f5c\u7528\uff0c\u5373\u4e3a\u5b58\u50a8 Globals.lngAcctNum \u7684\u4efb\u4f55\u5e10\u6237\u8ba1\u7b97\u8d37\u6b3e\u7684\u8d85\u989d\u548c\u77ed\u989d\u4ed8\u6b3e\u3002\u5c3d\u7ba1\u6709\u5f88\u591a\u5f62\u5f0f\uff0c\u4f46\u53ea\u6709\u4e00\u79cd\u5f62\u5f0f\u53ef\u4ee5\u7edf\u6cbb\u5b83\u4eec\uff1afrmMain.cs\uff0c\u5176\u4e2d\u5305\u542b\u9ad8\u8fbe 20,000 \u884c\u7684\u4ee3\u7801\u3002 frmMain \u505a\u4e86\u4ec0\u4e48\uff1f\u4e00\u5207\u3002\u5b83\u67e5\u5e10\u3001\u6253\u5370\u6536\u636e\u3001\u53d1\u653e\u73b0\u91d1\uff0c\u5b83\u4ec0\u4e48\u90fd\u505a\u3002\u6709\u65f6\u5176\u4ed6\u5f62\u5f0f\u9700\u8981\u8c03\u7528 frmMain \u4e0a\u7684\u65b9\u6cd5\u3002\u4e0e\u5176\u5c06\u8868\u5355\u4e2d\u7684\u4ee3\u7801\u5206\u89e3\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u7c7b\uff0c\u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u8c03\u7528\u4ee3\u7801\uff1a\u5c3d\u7ba1\u5b83\u5df2\u7ecf\u521b\u5efa\u4e86\u4e00\u4e2a\u4e0d\u53ef\u89c1\u7684\u8868\u5355\u6765\u6267\u884c\u4e1a\u52a1\u903b\u8f91\uff0c\u4f46\u60a8\u8ba4\u4e3a\u8868\u5355\u5982\u4f55\u77e5\u9053\u8981\u67e5\u627e\u54ea\u4e2a\u5e10\u6237\uff1f\u8fd9\u5f88\u7b80\u5355\uff1a\u8868\u5355\u53ef\u4ee5\u8bbf\u95ee Globals.lngAcctNum \u548c Globals.strAcctType\u3002 \uff08\u8c01\u4e0d\u559c\u6b22\u5308\u7259\u5229\u7b26\u53f7\uff1f\uff09\n\u4ee3\u7801\u91cd\u7528\u662f ctrl-c\u3001ctrl-v \u7684\u540c\u4e49\u8bcd\u3002\u6211\u53d1\u73b0 200 \u884c\u65b9\u6cd5\u5728 20 \u4e2a\u8868\u5355\u4e2d\u590d\u5236/\u7c98\u8d34\u3002\u8be5\u5e94\u7528\u7a0b\u5e8f\u6709\u4e00\u4e2a\u5947\u602a\u7684\u7ebf\u7a0b\u6a21\u578b\uff0c\u6211\u559c\u6b22\u79f0\u4e4b\u4e3a\u7ebf\u7a0b\u548c\u8ba1\u65f6\u5668\u6a21\u578b\uff1a\u6bcf\u4e2a\u751f\u6210\u7ebf\u7a0b\u7684\u8868\u5355\u90fd\u6709\u4e00\u4e2a\u8ba1\u65f6\u5668\u3002\u4ea7\u751f\u7684\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u542f\u52a8\u4e00\u4e2a\u6709 200 \u6beb\u79d2\u5ef6\u8fdf\u7684\u8ba1\u65f6\u5668\uff1b\u4e00\u65e6\u8ba1\u65f6\u5668\u542f\u52a8\uff0c\u5b83\u4f1a\u68c0\u67e5\u7ebf\u7a0b\u662f\u5426\u8bbe\u7f6e\u4e86\u4e00\u4e9b\u9b54\u6cd5\u5e03\u5c14\u503c\uff0c\u7136\u540e\u5b83\u4f1a\u4e2d\u6b62\u7ebf\u7a0b\u3002\u4ea7\u751f\u7684 ThreadAbortException \u88ab\u541e\u4e86\u3002\u60a8\u53ef\u80fd\u8ba4\u4e3a\u8fd9\u79cd\u6a21\u5f0f\u53ea\u4f1a\u770b\u5230\u4e00\u6b21\uff0c\u4f46\u6211\u81f3\u5c11\u5728 10 \u4e2a\u4e0d\u540c\u7684\u5730\u65b9\u53d1\u73b0\u4e86\u5b83\u3002\u8bf4\u5230\u7ebf\u7a0b\uff0c\u5173\u952e\u5b57\u201c\u9501\u201d\u4ece\u672a\u51fa\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002\u7ebf\u7a0b\u65e0\u9700\u9501\u5b9a\u5373\u53ef\u81ea\u7531\u64cd\u4f5c\u5168\u5c40\u72b6\u6001\u3002\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5305\u542b\u4e00\u4e2a try/catch \u5757\u3002\u6bcf\u4e2a\u5f02\u5e38\u90fd\u88ab\u8bb0\u5f55\u5e76\u541e\u4e0b\u3002\u4e00\u4e9b\u5929\u624d\u53d1\u73b0\u60a8\u53ef\u4ee5\u5c06\u591a\u4e2a\u8868\u5355\u63a7\u4ef6\u8fde\u63a5\u5230\u540c\u4e00\u4e2a\u4e8b\u4ef6\u5904\u7406\u7a0b\u5e8f\u3002\u7a0b\u5e8f\u5458\u662f\u600e\u4e48\u5904\u7406\u7684\uff1f private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &quot;btnBS&quot;) { UpdateText(); } if (txtEdit.Text.Trim() != &quot;Error&quot;) { SaveFormState(); } switch (btn.Name) { case &quot;btnC&quot;: ResetValues();\u4f11\u606f; case &quot;btnCE&quot;: txtEdit.Text = &quot;0&quot;;\u4f11\u606f; case &quot;btnBS&quot;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &quot;0&quot; : EditText); } \u4f11\u606f; case &quot;btnPercent&quot;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); blnEqualOccurred = false; blnStartedNew = true; } \u4f11\u606f; case &quot;btnAdd&quot;: case &quot;btnSubtract&quot;: case &quot;btnMultiply&quot;: case &quot;btnDivide&quot;: blnAfterOp = true; if (txtEdit.Text.Trim() == &quot;Error&quot;) { btnC.PerformClick();\u8fd4\u56de; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&quot;\u9519\u8bef&quot;); strOpPressed = btn.Text; blnEqualOccurred = \u5047\uff1b blnNumPressed = \u5047\uff1b } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &quot;Error&quot;) { AddToTape(&quot;Error&quot;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &quot;\u9519\u8bef&quot;; } \u4f11\u606f; case &quot;btnEqual&quot;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&quot;\u9519\u8bef&quot;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = \u5047\uff1b blnEqualOccurred = \u771f\uff1b strOpPressed = string.Empty; } } \u4f11\u606f; case &quot;btnSign&quot;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue));\u4f11\u606f; } }}\nstrDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked \uff1f \u201cD\u201d\uff1achkCredits.Checked \uff1f \u201cC\u201d\uff1a\u201cN\u201d\uff1b if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\u6f14\u793a\u4e86 StringBuilder \u7684\u5178\u578b\u8bef\u7528\u3002\u8bf7\u6ce8\u610f\u7a0b\u5e8f\u5458\u5982\u4f55\u5728\u5faa\u73af\u4e2d\u8fde\u63a5\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u5b57\u7b26\u4e32\u9644\u52a0\u5230 StringBuilder\uff1a private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_chknum&quot;].ToString().PadLeft(8, &#39; &#39;); strTemp += &quot; &quot;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trandt&quot;]).ToString(&quot;MM/dd/yyyy&quot;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_DrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_CrAmount&quot;].ToString().PadLeft(15, &#39; &#39;); strTemp += &quot; &quot;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_trancd&quot;].ToString().PadLeft(4, &#39; &#39;); strTemp += &quot; &quot;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&quot;Hst_desc&quot;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();} \u8868\u4e0a\u4e0d\u5b58\u5728\u4e3b\u952e\u3001\u7d22\u5f15\u6216\u5916\u952e\u7ea6\u675f\uff0c\u51e0\u4e4e\u6240\u6709\u5b57\u6bb5\u90fd\u662f varchar(50) \u7c7b\u578b\uff0c\u5e76\u4e14 100% \u7684\u5b57\u6bb5\u53ef\u4ee5\u4e3a\u7a7a\u3002\u6709\u8da3\u7684\u662f\uff0c\u4f4d\u57df\u4e0d\u7528\u4e8e\u5b58\u50a8\u5e03\u5c14\u6570\u636e\uff1b\u76f8\u53cd\uff0c\u4f7f\u7528\u4e86 char(1) \u5b57\u6bb5\uff0c\u5b57\u7b26\u201cY\u201d\u548c\u201cN\u201d\u5206\u522b\u7528\u4e8e\u8868\u793a\u771f\u548c\u5047\u3002 ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null , @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS \u58f0\u660e@WhereCond Varchar(1000) \u58f0\u660e@strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; \u5982\u679c\u4e0d\u662f@TellerID \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) \u5982\u679c\u4e0d\u662f@CashDrawer \u4e3anull Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) \u5982\u679c\u4e0d\u662f @AcctNum \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) \u5982\u679c\u4e0d\u662f @StartDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f @EndDate \u4e3a null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT .PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; \u5982\u679c\u4e0d\u662f@TranCode\u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) \u5982\u679c\u4e0d\u662f @EndTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) \u5982\u679c\u4e0d\u662f @StartTranAmt \u4e3a null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) \u5982\u679c\u4e0d\u662f (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) -- \u6839\u636e\u8fc7\u6ee4\u5668\u83b7\u53d6\u67dc\u5458\u4ea4\u6613\u8bb0\u5f55 Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) \u4f5c\u4e3a[\u4ea4\u6613\u63cf\u8ff0], TT.AcctNbr \u4f5c\u4e3a[\u8d26\u53f7], TT.TranID \u4f5c\u4e3a[\u4ea4\u6613\u7f16\u53f7], Convert(varchar,TT.ActivityDateTime,101) \u4f5c\u4e3a[\u6d3b\u52a8\u65e5\u671f] ], Convert(varchar,TT.EffDate,101) \u4e3a[\u751f\u6548\u65e5\u671f], Convert(varchar,TT.PostDate,101) \u4e3a[\u53d1\u5e03\u65e5\u671f], Convert(varchar,TT.ActivityDateTime,108) \u4e3a[\u65f6\u95f4], TT .BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT\u3002 TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery) ) \u5c3d\u7ba1\u5982\u6b64\uff0c\u8fd9\u4e2a 130,000 \u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u6700\u5927\u95ee\u9898\u662f\uff1a\u6ca1\u6709\u5355\u5143\u6d4b\u8bd5\u3002\n10 \u4ee4\u4eba\u6cae\u4e27\u7684\u662f\uff0c\u5728\u67d0\u4e2a\u5730\u65b9\uff0c\u4e00\u4e9b\u7f16\u5199\u4ee3\u7801\u7684\u7a0b\u5e8f\u5458\u8ba4\u4e3a\u4ed6\u4eec\u505a\u5f97\u5f88\u597d\uff0c\u5e76\u5728\u4ed6\u7684\u7b80\u5386\u4e0a\u70ab\u8000\u3002 \u201c\u4e0d\u719f\u7ec3\u800c\u4e14\u4e0d\u77e5\u9053\u5b83\u201d\u2014\u2014\u585e\u5c14\u5409\u5965\u00b7\u963f\u79d1\u65af\u5854\uff0c\u563f\uff0c\u4f60\u5199\u7684\u8fd9\u6bb5\u4ee3\u7801\uff0c\u6211\u8ba4\u4e3a\u5b83\u5f88\u597d\uff0c\u5982\u679c\u4f60\u8ba4\u4e3a\u81ea\u5df1\u505a\u5f97\u66f4\u597d\uff0c\u4f60\u5e94\u8be5\u5c1d\u8bd5\u2014\u2014\u8d1d\u65af\u5361 \u4e00\u4e9b\u7ba1\u7406\u5386\u53f2\u7684\u6de1\u5316\u7248\u672c\u6700\u7ec8\u51fa\u73b0\u5728 DailyWTF \u4e0a\u4eca\u5929\uff1athedailywtf.com/Articles/eTeller-Horror.aspx \u2013 Juliet 4 LOL \u2013 \u8fd9\u5c31\u50cf\u7528\u900f\u660e\u4fe1\u5c01\u5206\u53d1\u5de5\u8d44\u5355\u3001\u94f6\u884c\u5bf9\u8d26\u5355\u7b49\u3002 :-) \u2013 \u514b\u91cc\u65af\u8482\u5b89\u00b7\u6d77\u7279\u00b7\u7ea6\u5947\u3002\u6211\u66fe\u7ecf\u5728\u5546\u4e1a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u7684\u6570\u636e\u5e93\u4e2d\u53d1\u73b0\u4e86\u770b\u8d77\u6765\u5f88\u597d\u6563\u5217\u7684\u5bc6\u7801\u3002\u539f\u6765\u5b83\u4eec\u53ea\u662f\u5b58\u50a8\u5728 VARBINARY \u5217\u4e2d\u7684\u7eaf\u6587\u672c\uff0c\u56e0\u6b64\u60a8\u4e4d\u4e00\u770b\u65e0\u6cd5\u5206\u8fa8\u3002 - \u9a6c\u7279\u00b7\u5409\u5e03\u68ee\u8bf4\u6765\u60b2\u54c0\uff0c\u8fd9\u57fa\u672c\u4e0a\u5728\u6211\u7ee7\u627f\u4e86\u4e00\u4e2a\u9879\u76ee\u7684\u5bc6\u7801\u52a0\u5bc6\u3002\u5c3d\u7ba1\u4ed6\u4eec\u65e7\u7684\u81ea\u5b9a\u4e49\u7f16\u5199\u7684 base64 \u7f16\u7801\u51fd\u6570\u505a\u9519\u4e86\uff0c\u6240\u4ee5\u6211\u60f3\u8fd9\u6709\u4ec0\u4e48\u597d\u5904 ;-) \u2013 Allbite \u5728\u4e00\u4e2a\u63a5\u53d7\u4fe1\u7528\u5361\u4ed8\u6b3e\u7684\u7cfb\u7edf\u4e2d\uff0c\u6211\u4eec\u8fc7\u53bb\u5e38\u5e38\u5b58\u50a8\u5b8c\u6574\u7684\u4fe1\u7528\u5361\u53f7\u7801\u4ee5\u53ca\u59d3\u540d\u3001\u5230\u671f\u65e5\u671f\u7b49\u3002\n\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u975e\u6cd5\u7684\uff0c\u9274\u4e8e\u6211\u4eec\u5f53\u65f6\u6b63\u5728\u4e3a\u53f8\u6cd5\u90e8\u7f16\u5199\u7a0b\u5e8f\uff0c\u8fd9\u5177\u6709\u8bbd\u523a\u610f\u5473\u3002 5 \u6709\u8c01\u77e5\u9053\u4e9a\u9a6c\u900a\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\uff1f\u6216\u8005\u5982\u679c\u60a8\u8981\u6c42\u7528\u6237\u8bb8\u53ef\u662f\u5426\u5408\u6cd5\uff1f \u2013 Davy Landman @Davy \u2013 \u52a0\u5bc6\u3002\u5982\u679c\u5b83\u662f\u52a0\u5bc6\u7684\u5e76\u4e14\u53ea\u80fd\u5728\u9700\u8981\u77e5\u9053\u7684\u60c5\u51b5\u4e0b\u8bbf\u95ee\uff0c\u5219\u5b58\u50a8\u662f\u5408\u6cd5\u7684\u3002\u6709\u5f88\u591a\u5173\u4e8e\u5f3a\u5ea6\u3001\u4fdd\u7559\u3001DMZ \u7b49\u7684\u89c4\u5219\uff0c\u8bf7\u53c2\u9605\u6b64\u5904 pcisecuritystandards.org/security_standards/pci_dss.shtml \u2013 Luke Schafer 5 \u597d\u6d88\u606f\u662f\u6709\u4e00\u4e2a FIXME\uff0c\u56e0\u6b64 IDE \u53ef\u4ee5\u5c06\u60a8\u5f15\u5bfc\u81f3\u8be5\u884c\u3002 \u2013 Josh Lee @Chadworthington\uff1a\u5982\u679c\u662f\u6545\u610f\u7684\uff0c\u8bc4\u8bba\u5e94\u8be5\u662f /* DON&#39;T FIXME\uff01 */ ;P \u2013 David \u5728\u6784\u5efa\u5546\u4e1a\u7248\u672c\u65f6\uff0c\u8fd9\u79cd\u4e1c\u897f\u4e0d\u662f\u88ab\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u5417\uff1f \u2013 Attila Kun \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u7f16\u8bd1\u5668\u6ca1\u6709\u201c\u4f18\u5316\u201d\u5faa\u73af\uff1b\u5b83\u4f1a\u201c\u4f18\u5316\u201d\u4ec0\u4e48\uff1f\u6b64\u5916\uff0c\u201c\u6545\u610f\u7834\u574f\u201d\u662f\u4e00\u4e2a\u786e\u5b9a\u7684\u53ef\u80fd\u6027\u3002 \u201cFIXME\u201d\u53ef\u80fd\u662f\u4e3a\u4e86\u5426\u8ba4\u3002 \u2013 \u675c\u5c14\u9ad8\u62f1\u95e8\n\uff08\u5728\u6211\u610f\u8bc6\u5230\u5b83\u4eec\u4e0d\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u4e4b\u524d\uff0c\u6211\u771f\u7684\u82b1\u4e86\u4e00\u4e2a\u5c0f\u65f6\u8bd5\u56fe\u5f04\u6e05\u695a\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\uff09\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5305\u542b 50 \u4e2a\u6587\u4ef6\uff0c\u5e76\u4e14\u5185\u5bb9\u4ee5\u6709\u6761\u4ef6\u548c\u4e0d\u53ef\u9884\u6d4b\u7684\u65b9\u5f0f\u5728\u6240\u6709 50 \u4e2a\u6587\u4ef6\u4e2d\u7ebf\u6027/\u7a0b\u5e8f\u5730\u6267\u884c.\u73b0\u5728\u8003\u8651 $x \u5305\u542b\u6765\u81ea\u60a8\u7684 URL \u7684\u503c\uff08 register globals magic \uff09\uff0c\u56e0\u6b64\u5728\u60a8\u7684\u4ee3\u7801\u4e2d\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u5f88\u660e\u663e\u60a8\u4f7f\u7528\u7684\u662f\u54ea\u4e2a\u53d8\u91cf\uff0c\u56e0\u4e3a\u5b83\u5168\u90e8\u7531 url \u51b3\u5b9a\u3002\u73b0\u5728\u8003\u8651\u5f53\u8be5\u53d8\u91cf\u7684\u5185\u5bb9\u53ef\u4ee5\u662f\u7f51\u7ad9\u7528\u6237\u6307\u5b9a\u7684 url \u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48\u3002\u662f\u7684\uff0c\u8fd9\u5bf9\u60a8\u6765\u8bf4\u53ef\u80fd\u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u5b83\u4f1a\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\u8be5 url \u7684\u53d8\u91cf\uff0c\u5373\uff1a\u9664\u4e86\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u4e4b\u5916\uff0c\u60a8\u5fc5\u987b\u901a\u8fc7\u4e0a\u9762\u7684\u53cc $ \u6280\u672f\u4f7f\u7528\u5b83\u3002\u6b64\u5916\uff0c\u5f53\u7528\u6237\u53ef\u4ee5\u5728 URL \u4e0a\u6307\u5b9a\u4e00\u4e2a\u53d8\u91cf\u6765\u6307\u793a\u8981\u5305\u542b\u54ea\u4e2a\u6587\u4ef6\u65f6\uff0c\u6709\u4e00\u4e9b\u8ba8\u538c\u7684\u6280\u5de7\uff0c\u4f8b\u5982\u201cevilcode.php\u201d\u6253\u5370\u5176\u4ee3\u7801\u660e\u6587\uff0c\u5e76\u4e14 Php \u6ca1\u6709\u5f97\u5230\u9002\u5f53\u7684\u4fdd\u62a4\uff0cphp \u53ea\u4f1a\u88ab\u6dd8\u6c70\uff0c\u4e0b\u8f7d evilcode.php\uff0c\u5e76\u4ee5 Web \u670d\u52a1\u5668\u7684\u7528\u6237\u8eab\u4efd\u6267\u884c\u5b83\u3002\n\u7f51\u7edc\u670d\u52a1\u5668\u4f1a\u7ed9\u5b83\u6240\u6709\u7684\u6743\u9650\u7b49\u7b49\uff0c\u5141\u8bb8 shell \u8c03\u7528\uff0c\u4e0b\u8f7d\u4efb\u610f\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u8fd0\u884c\u5b83\u4eec\u7b49\u7b49\uff0c\u76f4\u5230\u6700\u7ec8\u4f60\u60f3\u77e5\u9053\u4e3a\u4ec0\u4e48\u4f60\u7684\u76d2\u5b50\u7528\u5b8c\u4e86\u78c1\u76d8\u7a7a\u95f4\uff0c\u4e00\u4e2a\u76ee\u5f55\u6709 8GB \u7684\u200b\u200b\u76d7\u7248\u7535\u5f71\u610f\u5927\u5229\u8bed\u914d\u97f3\uff0c\u901a\u8fc7\u673a\u5668\u4eba\u5728 IRC \u4e0a\u5171\u4eab\u3002\u6211\u5f88\u5e86\u5e78\u6211\u5728\u8fd0\u884c\u653b\u51fb\u7684\u811a\u672c\u51b3\u5b9a\u505a\u4e00\u4e9b\u975e\u5e38\u5371\u9669\u7684\u4e8b\u60c5\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\uff0c\u6bd4\u5982\u4ece\u6216\u591a\u6216\u5c11\u4e0d\u5b89\u5168\u7684\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u6781\u5176\u673a\u5bc6\u7684\u4fe1\u606f\uff1a| \uff08\u6211\u53ef\u4ee5\u7528\u90a3\u4e2a\u4ee3\u7801\u5e93\u5728 6 \u4e2a\u6708\u7684\u65f6\u95f4\u91cc\u6bcf\u5929\u5a31\u4e50 Dailywtf\uff0c\u6211\u6ca1\u6709\u9a97\u4f60\u3002\u5f88\u9057\u61be\u6211\u5728\u6211\u9003\u8131\u4e86\u90a3\u4e2a\u4ee3\u7801\u4e4b\u540e\u53d1\u73b0\u4e86 Dailywtf\uff09 3 \u201c\u6211\u5f88\u5e86\u5e78\u6211\u5728\u811a\u672c\u51b3\u5b9a\u4e4b\u524d\u53d1\u73b0\u4e86\u66b4\u884c\u6536\u83b7\u6570\u636e\u5e93:|&quot;\u4f60\u600e\u4e48\u77e5\u9053\u7684\uff1f\u5bf9\u4e8e\u6240\u6709\u5bc6\u96c6\u7684\u6d77\u8c5a\uff0c\u5b83\u53ef\u80fd\u5df2\u7ecf\u5728\u6ca1\u6709\u4eba\u6ce8\u610f\u5230\u7684\u60c5\u51b5\u4e0b\u8fd9\u6837\u505a\u4e86...... \u2013 Piskvor \u79bb\u5f00\u4e86\u5efa\u7b51\u7269 \u5b83\u53ef\u80fd\u5df2\u7ecf\u8fd9\u6837\u505a\u4e86\uff0c\u4f46\u6570\u636e\u5e93\u65e5\u5fd7\u5e76\u6ca1\u6709\u8868\u660e\u5b83\u505a\u4e86\u591a\u5c11\u3002 \u2013 Kent Fredric \u5728\u4e3b\u9879\u76ee\u5934\u6587\u4ef6\u4e2d\uff0c\u6765\u81ea\u4e00\u4f4d\u8001\u624b COBOL \u7a0b\u5e8f\u5458\uff0c\u4ed6\u83ab\u540d\u5176\u5999\u5730\u7528 C \u7f16\u5199\u4e86\u4e00\u4e2a\u7f16\u8bd1\u5668\uff1a\u201c\u6240\u4ee5\u5982\u679c\u4f60\u5fd8\u8bb0\u58f0\u660e\u4f60\u7684\u5faa\u73af\u53d8\u91cf\uff0c\u4f60\u5c31\u4e0d\u4f1a\u5f97\u5230\u7f16\u8bd1\u5668\u9519\u8bef\u3002\u201d\n0 3 \u53ea\u8981\u60a8\u4f7f\u7528\u6b63\u786e\u7684\u5de5\u5177\u6765\u6784\u5efa\u5305 (WiX)\uff0c\u8fd9\u8fd8\u4e0d\u9519\u3002\u7136\u800c\uff0cVS \u7f16\u8f91\u5668\u548c InstallShield \u662f\u90aa\u6076\u7684\u2014\u2014erikkallen \u8fd9\u7bc7\u6587\u7ae0\u5982\u4f55\u7f16\u5199\u4e0d\u53ef\u7ef4\u62a4\u7684\u4ee3\u7801\u6db5\u76d6\u4e86\u4e00\u4e9b\u4eba\u7c7b\u5df2\u77e5\u7684\u6700\u51fa\u8272\u7684\u6280\u672f\u3002\u6211\u6700\u559c\u6b22\u7684\u4e00\u4e9b\u662f\uff1a \u8d2d\u4e70\u4e00\u672c\u5a74\u513f\u547d\u540d\u4e66\uff0c\u60a8\u6c38\u8fdc\u4e0d\u4f1a\u5bf9\u53ef\u53d8\u540d\u79f0\u611f\u5230\u832b\u7136\u3002 Fred \u662f\u4e00\u4e2a\u7f8e\u5999\u7684\u540d\u5b57\uff0c\u800c\u4e14\u5f88\u5bb9\u6613\u6253\u5b57\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e\u6613\u4e8e\u8f93\u5165\u7684\u53d8\u91cf\u540d\u79f0\uff0c\u5982\u679c\u60a8\u4f7f\u7528 DSK \u952e\u76d8\u8f93\u5165\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528 adsf \u6216 aoeu\u3002\u5982\u679c\u60a8\u5fc5\u987b\u4f7f\u7528\u63cf\u8ff0\u6027\u53d8\u91cf\u548c\u51fd\u6570\u540d\u79f0\uff0c\u8bf7\u62fc\u9519\u5b83\u4eec\u3002\u901a\u8fc7\u5728\u67d0\u4e9b\u51fd\u6570\u548c\u53d8\u91cf\u540d\u79f0\u4e2d\u62fc\u9519\u5e76\u5728\u5176\u4ed6\u4e2d\u6b63\u786e\u62fc\u5199\uff08\u4f8b\u5982 SetPintleOpening SetPintalClosing\uff09\uff0c\u6211\u4eec\u6709\u6548\u5730\u5426\u5b9a\u4e86 grep \u6216 IDE \u641c\u7d22\u6280\u672f\u7684\u4f7f\u7528\u3002\u5b83\u5de5\u4f5c\u5f97\u975e\u5e38\u597d\u3002\u901a\u8fc7\u5728\u4e0d\u540c\u7684\u5267\u9662/\u5267\u9662\u62fc\u5199 tory \u6216 tori \u6765\u6dfb\u52a0\u56fd\u9645\u98ce\u5473\u3002\u5728\u547d\u540d\u51fd\u6570\u548c\u53d8\u91cf\u65f6\uff0c\u5927\u91cf\u4f7f\u7528\u62bd\u8c61\u8bcd\uff0c\u5982 it\u3001everything\u3001data\u3001handle\u3001stuff\u3001do\u3001routine\u3001perform \u548c\u6570\u5b57\uff0c\u4f8b\u5982routineX48\u3001PerformDataFunction\u3001DoIt\u3001HandleStuff \u548c do_args_method\u3002\u5c06\u5355\u8bcd\u4e2d\u95f4\u7684\u97f3\u8282\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u968f\u673a\u5927\u5199\u3002\u4f8b\u5982 ComputeRasterHistoGram()\u3002\n\u4f7f\u7528\u5c0f\u5199 l \u8868\u793a\u957f\u5e38\u91cf\u3002\u4f8b\u5982\uff0c10l \u66f4\u53ef\u80fd\u88ab\u8bef\u8ba4\u4e3a\u662f 101\uff0c\u800c\u4e0d\u662f 10l\u3002\u7981\u6b62\u4efb\u4f55\u660e\u663e\u6d88\u9664 uvw wW gq9 2z 5s il17|!j oO08 `&#39;&quot; ;,. m nn rn {[()]} \u6b67\u4e49\u7684\u5b57\u4f53\u3002\u8981\u6709\u521b\u610f\u3002\u53ea\u8981\u8303\u56f4\u89c4\u5219\u5141\u8bb8\uff0c\u91cd\u590d\u4f7f\u7528\u73b0\u6709\u7684\u4e0d\u76f8\u5173\u53d8\u91cf\u540d\u79f0\u3002\u7c7b\u4f3c\u5730\uff0c\u4f7f\u7528\u76f8\u540c\u7684\u4e34\u65f6\u53d8\u91cf\u7528\u4e8e\u4e24\u4e2a\u4e0d\u76f8\u5173\u7684\u76ee\u7684\uff08\u58f0\u79f0\u662f\u4e3a\u4e86\u8282\u7701\u5806\u6808\u69fd\uff09\u3002\u5bf9\u4e8e\u4e00\u4e2a\u6076\u9b54\u53d8\u4f53\uff0c\u5c06\u53d8\u91cf\u53d8\u5f62\uff0c\u4f8b\u5982\uff0c\u5728\u5f88\u957f\u7684\u65b9\u6cd5\u9876\u90e8\u4e3a\u53d8\u91cf\u8d4b\u503c\uff0c\u7136\u540e\u5728\u4e2d\u95f4\u7684\u67d0\u5904\u66f4\u6539\u4ee5\u5fae\u5999\u7684\u65b9\u5f0f\u4e86\u89e3\u53d8\u91cf\u7684\u542b\u4e49\uff0c\u4f8b\u5982\u5c06\u5176\u4ece\u57fa\u4e8e 0 \u7684\u5750\u6807\u8f6c\u6362\u4e3a\u57fa\u4e8e 1 \u7684\u5750\u6807\u3002\u4e00\u5b9a\u4e0d\u8981\u8bb0\u5f55\u8fd9\u79cd\u542b\u4e49\u7684\u53d8\u5316\u3002\u5728\u53d8\u91cf\u6216\u65b9\u6cd5\u540d\u79f0\u4e2d\u4f7f\u7528\u7f29\u5199\u65f6\uff0c\u7528\u540c\u4e00\u4e2a\u8bcd\u7684\u51e0\u79cd\u53d8\u4f53\uff0c\u751a\u81f3\u5076\u5c14\u62fc\u5199\u51fa\u6765\u3002\u8fd9\u6709\u52a9\u4e8e\u6253\u8d25\u90a3\u4e9b\u4f7f\u7528\u6587\u672c\u641c\u7d22\u53ea\u7406\u89e3\u7a0b\u5e8f\u7684\u67d0\u4e9b\u65b9\u9762\u7684\u61d2\u60f0\u7684\u6d41\u6d6a\u6c49\u3002\u8003\u8651\u5c06\u53d8\u4f53\u62fc\u5199\u4f5c\u4e3a\u7b56\u7565\u7684\u53d8\u4f53\uff0c\u4f8b\u5982\u6df7\u5408\u56fd\u9645\u989c\u8272, \u5e26\u6709\u7f8e\u56fd\u8272\u5f69\u548c\u82b1\u82b1\u516c\u5b50\u7684\u9177\u4e50rz\u3002\u5982\u679c\u60a8\u5b8c\u6574\u5730\u62fc\u51fa\u59d3\u540d\uff0c\u5219\u6bcf\u4e2a\u59d3\u540d\u53ea\u6709\u4e00\u79cd\u53ef\u80fd\u7684\u62fc\u5199\u65b9\u5f0f\u3002\u8fd9\u4e9b\u5bf9\u4e8e\u7ef4\u62a4\u7a0b\u5e8f\u5458\u6765\u8bf4\u592a\u5bb9\u6613\u8bb0\u4f4f\u4e86\u3002\u56e0\u4e3a\u6709\u5f88\u591a\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u7f29\u5199\u4e00\u4e2a\u8bcd\uff0c\u901a\u8fc7\u7f29\u5199\uff0c\u4f60\u53ef\u4ee5\u6709\u51e0\u4e2a\u4e0d\u540c\u7684\u53d8\u91cf\uff0c\u5b83\u4eec\u90fd\u5177\u6709\u76f8\u540c\u7684\u660e\u663e\u76ee\u7684\u3002\u4f5c\u4e3a\u989d\u5916\u7684\u597d\u5904\uff0c\u7ef4\u62a4\u7a0b\u5e8f\u5458\u751a\u81f3\u53ef\u80fd\u4e0d\u4f1a\u6ce8\u610f\u5230\u5b83\u4eec\u662f\u5355\u72ec\u7684\u53d8\u91cf\u3002\u4f7f\u7528\u8bf8\u5982 LancelotsFavouriteColour \u4e4b\u7c7b\u7684\u5e38\u91cf\u540d\u79f0\u800c\u4e0d\u662f\u84dd\u8272\uff0c\u5e76\u5c06\u5176\u6307\u5b9a\u4e3a $0204FB \u7684\u5341\u516d\u8fdb\u5236\u503c\u3002\u989c\u8272\u770b\u8d77\u6765\u4e0d\u9519......", "note_en": "What is the most evil or dangerous code fragment you have ever seen in a production environment at a company? I&#39;ve never encountered production code that I would consider to be deliberately malicious and evil, so I&#39;m quite curious to see what others have found.\n The most dangerous code I have ever seen was a stored procedure two linked-servers away from our core production database server. The stored procedure accepted any NVARCHAR(8000) parameter and executed the parameter on the target production server via an double-jump sp_executeSQL command. That is to say, the sp_executeSQL command executed another sp_executeSQL command in order to jump two linked servers. Oh, and the linked server account had sysadmin rights on the target production server.\n  1\n    I&#39;ve written about one application I&#39;ve worked on before  here and  here. To put it simply, my company inherited 130,000 lines of garbage from India. The application was written in C#; it was a teller app, the same kind of software tellers use behind the counter whenever you go to the bank. The app crashed 40-50 times a day, and it simply couldn&#39;t be refactored into working code. My company had to re-write the entire app over the course of 12 months.\n Why is this application evil? Because the sight of the source code was enough to drive a sane man mad and a mad man sane. The twisted logic used to write this application could have only been inspired by a Lovecraftian nightmare. Unique features of this application included:\n Out of 130,000 lines of code, the entire application contained 5 classes (excluding form files). All of these were public static classes. One class was called Globals.cs, which contained 1000s and 1000s and 1000s of public static variables used to hold the entire state of the application. Those five classes contained 20,000 lines of code total, with the remaining code embedded in the forms.\n You have to wonder, how did the programmers manage to write such a big application without any classes? What did they use to represent their data objects? It turns out the programmers managed to re-invent half of the concepts we all learned about OOP simply by combining ArrayLists, HashTables, and DataTables. We saw a lot of this:\n  Keep in mind, none of the data structures above are strongly typed, so you have to cast whatever mystery object you get out of the list to the correct type. It&#39;s amazing what kind of complex, Rube Goldberg-like data structures you can create using just ArrayLists, HashTables, and DataTables.\n To share an example of how to use the object model detailed above, consider Accounts: the original programmer created a seperate HashTable for each concievable property of an account: a HashTable called hstAcctExists, hstAcctNeedsOverride, hstAcctFirstName. The keys for all of those hashtables was a \u201c|\u201d separated string. Conceivable keys included \u201c123456|DDA\u201d, \u201c24100|SVG\u201d, \u201c100|LNS\u201d, etc.\n Since the state of the entire application was readily accessible from global variables, the programmers found it unnecessary to pass parameters to methods. I&#39;d say 90% of methods took 0 parameters. Of the few which did, all parameters were passed as strings for convenience, regardless of what the string represented.\n Side-effect free functions did not exist. Every method modified 1 or more variables in the Globals class. Not all side-effects made sense; for example, one of the form validation methods had a mysterious side effect of calculating over and short payments on loans for whatever account was stored Globals.lngAcctNum.\n Although there were lots of forms, there was one form to rule them all: frmMain.cs, which contained a whopping 20,000 lines of code. What did frmMain do? Everything. It looked up accounts, printed receipts, dispensed cash, it did everything.\n Sometimes other forms needed to call methods on frmMain. Rather than factor that code out of the form into a seperate class, why not just invoke the code directly:\n As bad as it already is creating an invisible form to perform business logic, how do you think the form knew which account to look up? That\u2019s easy: the form could access Globals.lngAcctNum and Globals.strAcctType. (Who doesn&#39;t love Hungarian notation?)\n Code-reuse was a synonym for ctrl-c, ctrl-v. I found 200-line methods copy/pasted across 20 forms.\n The application had a bizarre threading model, something I like to call the thread-and-timer model: each form that spawned a thread had a timer on it. Each thread that was spawned kicked off a timer which had a 200 ms delay; once the timer started, it would check to see if the thread had set some magic boolean, then it would abort the thread. The resulting ThreadAbortException was swallowed.\n You&#39;d think you&#39;d only see this pattern once, but I found it in at least 10 different places.\n Speaking of threads, the keyword &#34;lock&#34; never appeared in the application. Threads manipulated global state freely without taking a lock.\n Every method in the application contained a try/catch block. Every exception was logged and swallowed.\n  Some genius figured out that you can hook multiple form controls up to the same event handler. How did the programmer handle this?\n private void OperationButton_Click(object sender, EventArgs e){ Button btn = (Button)sender; if (blnModeIsAddMc) { AddMcOperationKeyPress(btn); } else { string strToBeAppendedLater = string.Empty; if (btn.Name != &#34;btnBS&#34;) { UpdateText(); } if (txtEdit.Text.Trim() != &#34;Error&#34;) { SaveFormState(); } switch (btn.Name) { case &#34;btnC&#34;: ResetValues(); break; case &#34;btnCE&#34;: txtEdit.Text = &#34;0&#34;; break; case &#34;btnBS&#34;: if (!blnStartedNew) { string EditText = txtEdit.Text.Substring(0, txtEdit.Text.Length - 1); DisplayValue((EditText == string.Empty) ? &#34;0&#34; : EditText); } break; case &#34;btnPercent&#34;: blnAfterOp = true; if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, false); decCurrValue = decResultValue * decCurrValue / intFormatFactor; DisplayValue(GetValueString(decCurrValue)); AddToTape(GetValueString(decCurrValue), string.Empty, true, false); strToBeAppendedLater = GetValueString(decResultValue).PadLeft(20) + strOpPressed.PadRight(3); if (arrLstTapeHist.Count == 0) { arrLstTapeHist.Add(strToBeAppendedLater); } blnEqualOccurred = false; blnStartedNew = true; } break; case &#34;btnAdd&#34;: case &#34;btnSubtract&#34;: case &#34;btnMultiply&#34;: case &#34;btnDivide&#34;: blnAfterOp = true; if (txtEdit.Text.Trim() == &#34;Error&#34;) { btnC.PerformClick(); return; } if (blnNumPressed || blnEqualOccurred) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (Operation()) { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(GetValueString(decResultValue)); } else { AddToTape(GetValueString(decCurrValue), (string)btn.Text, true, true); DisplayValue(&#34;Error&#34;); } strOpPressed = btn.Text; blnEqualOccurred = false; blnNumPressed = false; } } else { strOpPressed = btn.Text; AddToTape(GetValueString(0), (string)btn.Text, false, false); } if (txtEdit.Text.Trim() == &#34;Error&#34;) { AddToTape(&#34;Error&#34;, string.Empty, true, true); btnC.PerformClick(); txtEdit.Text = &#34;Error&#34;; } break; case &#34;btnEqual&#34;: blnAfterOp = false; if (strOpPressed != string.Empty || strPrevOp != string.Empty) { if (GetValueDecimal(txtEdit.Text, out decCurrValue)) { if (OperationEqual()) { DisplayValue(GetValueString(decResultValue)); } else { DisplayValue(&#34;Error&#34;); } if (!blnEqualOccurred) { strPrevOp = strOpPressed; decHistValue = decCurrValue; blnNumPressed = false; blnEqualOccurred = true; } strOpPressed = string.Empty; } } break; case &#34;btnSign&#34;: GetValueDecimal(txtEdit.Text, out decCurrValue); DisplayValue(GetValueString(-1 * decCurrValue)); break; } }}\n strDrCr = chkCredits.Checked &amp;&amp; chkDebits.Checked ? string.Empty : chkDebits.Checked ? &#34;D&#34; : chkCredits.Checked ? &#34;C&#34; : &#34;N&#34;;\n  if (strDefaultVals == strNowVals &amp;&amp; (dsTranHist == null ? true : dsTranHist.Tables.Count == 0 ? true : dsTranHist.Tables[0].Rows.Count == 0 ? true : false))\n Here&#39;s a code snippet which demonstrates the typical misuse of the StringBuilder. Note how the programmer concats a string in a loop, then appends the resulting string to the StringBuilder:\n private string CreateGridString(){ string strTemp = string.Empty; StringBuilder strBuild = new StringBuilder(); foreach (DataGridViewRow dgrRow in dgvAcctHist.Rows) { strTemp = ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_chknum&#34;].ToString().PadLeft(8, &#39; &#39;); strTemp += &#34; &#34;; strTemp += Convert.ToDateTime(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trandt&#34;]).ToString(&#34;MM/dd/yyyy&#34;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_DrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_CrAmount&#34;].ToString().PadLeft(15, &#39; &#39;); strTemp += &#34; &#34;; strTemp += ((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_trancd&#34;].ToString().PadLeft(4, &#39; &#39;); strTemp += &#34; &#34;; strTemp += GetDescriptionString(((DataRowView)dgrRow.DataBoundItem)[&#34;Hst_desc&#34;].ToString(), 30, 62); strBuild.AppendLine(strTemp); } strCreateGridString = strBuild.ToString(); return strCreateGridString;//strBuild.ToString();}\n No primary keys, indexes, or foreign key constraints existed on tables, nearly all fields were of type varchar(50), and 100% of fields were nullable. Interestingly, bit fields were not used to store boolean data; instead a char(1) field was used, and the characters &#39;Y&#39; and &#39;N&#39; used to represent true and false respectively.\n ALTER PROCEDURE [dbo].[Get_TransHist] ( @TellerID int = null, @CashDrawer int = null, @AcctNum bigint = null, @StartDate datetime = null, @EndDate datetime = null, @StartTranAmt decimal(18,2) = null, @EndTranAmt decimal(18,2) = null, @TranCode int = null, @TranType int = null )AS declare @WhereCond Varchar(1000) declare @strQuery Varchar(2000) Set @WhereCond = &#39; &#39; Set @strQuery = &#39; &#39; If not @TellerID is null Set @WhereCond = @WhereCond + &#39; AND TT.TellerID = &#39; + Cast(@TellerID as varchar) If not @CashDrawer is null Set @WhereCond = @WhereCond + &#39; AND TT.CDId = &#39; + Cast(@CashDrawer as varchar) If not @AcctNum is null Set @WhereCond = @WhereCond + &#39; AND TT.AcctNbr = &#39; + Cast(@AcctNum as varchar) If not @StartDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &gt;= &#39;&#39;&#39; + Convert(varchar,@StartDate,121) + &#39;&#39;&#39;&#39; If not @EndDate is null Set @WhereCond = @WhereCond + &#39; AND Convert(varchar,TT.PostDate,121) &lt;= &#39;&#39;&#39; + Convert(varchar,@EndDate,121) + &#39;&#39;&#39;&#39; If not @TranCode is null Set @WhereCond = @WhereCond + &#39; AND TT.TranCode = &#39; + Cast(@TranCode as varchar) If not @EndTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &lt;= &#39; + Cast(@EndTranAmt as varchar) If not @StartTranAmt is null Set @WhereCond = @WhereCond + &#39; AND TT.TranAmt &gt;= &#39; + Cast(@StartTranAmt as varchar) If not (@TranType is null or @TranType = -1) Set @WhereCond = @WhereCond + &#39; AND TT.DocType = &#39; + Cast(@TranType as varchar) --Get the Teller Transaction Records according to the filters Set @strQuery = &#39;SELECT TT.TranAmt as [Transaction Amount], TT.TranCode as [Transaction Code], RTrim(LTrim(TT.TranDesc)) as [Transaction Description], TT.AcctNbr as [Account Number], TT.TranID as [Transaction Number], Convert(varchar,TT.ActivityDateTime,101) as [Activity Date], Convert(varchar,TT.EffDate,101) as [Effective Date], Convert(varchar,TT.PostDate,101) as [Post Date], Convert(varchar,TT.ActivityDateTime,108) as [Time], TT.BatchID, TT.ItemID, isnull(TT.DocumentID, 0) as DocumentID, TT.TellerName, TT.CDId, TT.ChkNbr, RTrim(LTrim(DT.DocTypeDescr)) as DocTypeDescr, (CASE WHEN TT.TranMode = &#39;&#39;F&#39;&#39; THEN &#39;&#39;Offline&#39;&#39; ELSE &#39;&#39;Online&#39;&#39; END) TranMode, DispensedYN FROM TellerTrans TT WITH (NOLOCK) LEFT OUTER JOIN DocumentTypes DT WITH (NOLOCK) on DocType = DocumentType WHERE IsNull(TT.DeletedYN, 0) = 0 &#39; + @WhereCond + &#39; Order By BatchId, TranID, ItemID&#39; Exec (@strQuery)\n With all that said, the single biggest problem with this 130,000 line application this: no unit tests.\n  10  And the depressing thing is that somewhere, some programmer that worked on that code, thinks they did a good job and is showing it off on his resume. &#34;Unskilled and Unaware of it&#34;\r \r\u2013\u00a0 Sergio Acosta\n  hey you i writted this code adn i think its prety good if you think you cuold do better you shoud try\r \r\u2013\u00a0 Beska\n  A very watered down version of some of the management history ended up on the DailyWTF today:  thedailywtf.com/Articles/eTeller-Horror.aspx\r \r\u2013\u00a0 Juliet\n      4  LOL - that&#39;s like handing out payslips, bank statements etc in transparent envelopes. :-)\r \r\u2013\u00a0 Christian Hayter\n    Yowch. I found what looked like nicely-hashed passwords in a commercial web app&#39;s database once. Turned out they were just plain text stored in a VARBINARY column so you couldn&#39;t tell at first glance.\r \r\u2013\u00a0 Matt Gibson\n  Sad to say, that&#39;s basically the password encryption in a project I inherited. Albeit their old custom written base64 encoding function did it wrong, so I guess there&#39;s solice in that ;-)\r \r\u2013\u00a0 Allbite\n    In a system which took credit card payments we used to store the full credit card number along with name, expiration date etc.\n Turns out this is illegal, which is ironic given the we were writing the program for the Justice Department at the time.\n  5  Does anybody know how amazon solves this problem? Or is it legal if you ask for the users permission?\r \r\u2013\u00a0 Davy Landman\n      @Davy - encryption. It&#39;s legal to store if it&#39;s encrypted and only accessible on need-to-know. There are lots of rules about strength, retention, DMZs etc, see here  pcisecuritystandards.org/security_standards/pci_dss.shtml\r \r\u2013\u00a0 Luke Schafer\n      5  Good thing there was a FIXME so the IDE could direct you to that line.\r \r\u2013\u00a0 Josh Lee\n  @Chadworthington: If it was intentional the comment would have been /* DON&#39;T FIXME! */ ;P\r \r\u2013\u00a0 David\n  Isn&#39;t this kind of thing optimized out by compilers when building a commercial release?\r \r\u2013\u00a0 Attila Kun\n  In this situation the compiler did not &#34;optimize out&#34; the loop; what would it &#34;optimize&#34; to? Also, &#34;intentional sabotage&#34; was a definite possibility. The &#34;FIXME&#34; could have been for deniability.\r \r\u2013\u00a0 Dour High Arch\n    ( I literally spent an hour trying to work out how that worked before I realised they  wern&#39;t the same variable )\n Include 50 files, which each include 50 files, and stuff is performed linearly/procedurally across all 50 files in conditional and unpredictable ways.\n   Now consider $x contains a value from your URL ( register globals magic ), so nowhere in your code is it obvious what variable your working with becuase its all determined by the url.\n Now consider what happens when the contents of that variable can be a url specified by the websites user. Yes, this may not make sense to you, but it creates a variable named that url, ie:\n  except it cant be directly accessed, you have to use it via the double $ technique above.\n Additionally, when its possible for a user to specify a variable on the URL which indicates which file to include, there are nasty tricks like\n   and &#39;evilcode.php&#39; prints its code plaintext, and Php is inappropriately secured, php will just trundle off, download evilcode.php, and execute it as the user of the web-server.\n The web-sever will give it all its permissions etc, permiting shell calls, downloading arbitrary binaries and running them, etc etc, until eventually you wonder why you have a box running out of disk space, and one dir has 8GB of pirated movies with italian dubbing, being shared on IRC via a bot.\n I&#39;m just thankful I discovered that atrocity before the script running the attack decided to do something really dangerous like harvest extremely confidential information from the more or less unsecured database :|\n ( I could entertain the dailywtf every day for 6 months with that codebase, I kid you not. Its just a shame I discovered the dailywtf after I escaped that code )\n  3  &#34;I&#39;m just thankful I discovered that atrocity before the script decided to harvest the database :|&#34; How would you know? For all intensive porpoises, it may already have done that without anyone noticing...\r \r\u2013\u00a0 Piskvor left the building\n  It may have, but the database logs didn&#39;t indicate much that it did.\r \r\u2013\u00a0 Kent Fredric\n    In the main project header file, from an old-hand COBOL programmer, who was inexplicably writing a compiler in C:\n  &#34;So you won&#39;t get a compiler error if you forget to declare your loop variables.&#34;\n  0\n    3  It&#39;s not so bad as long as you use the correct tools to build the package (WiX). The VS editor, and InstallShield, are evil, though\r \r\u2013\u00a0 erikkallen\n    This article  How to Write Unmaintainable Code covers some of the most brilliant techniques known to man. Some of my favorite ones are:\n   Buy a copy of a baby naming book and you&#39;ll never be at a loss for variable names. Fred is a wonderful name, and easy to type. If you&#39;re looking for easy-to-type variable names, try adsf or aoeu if you type with a DSK keyboard.\n  If you must use descriptive variable and function names, misspell them. By misspelling in some function and variable names, and spelling it correctly in others (such as SetPintleOpening SetPintalClosing) we effectively negate the use of grep or IDE search techniques. It works amazingly well. Add an international flavor by spelling tory or tori in different theatres/theaters.\n  In naming functions and variables, make heavy use of abstract words like it, everything, data, handle, stuff, do, routine, perform and the digits e.g. routineX48, PerformDataFunction, DoIt, HandleStuff and do_args_method.\n  Randomly capitalize the first letter of a syllable in the middle of a word. For example ComputeRasterHistoGram().\n  Use lower case l to indicate long constants. e.g. 10l is more likely to be mistaken for 101 that 10L is. Ban any fonts that clearly disambiguate uvw wW gq9 2z 5s il17|!j oO08 `&#39;&#34; ;,. m nn rn {[()]}. Be creative.\n  Wherever scope rules permit, reuse existing unrelated variable names. Similarly, use the same temporary variable for two unrelated purposes (purporting to save stack slots). For a fiendish variant, morph the variable, for example, assign a value to a variable at the top of a very long method, and then somewhere in the middle, change the meaning of the variable in a subtle way, such as converting it from a 0-based coordinate to a 1-based coordinate. Be certain not to document this change in meaning.\n  When using abbreviations inside variable or method names, break the boredom with several variants for the same word, and even spell it out longhand once in while. This helps defeat those lazy bums who use text search to understand only some aspect of your program. Consider variant spellings as a variant on the ploy, e.g. mixing International colour, with American color and dude-speak kulerz. If you spell out names in full, there is only one possible way to spell each name. These are too easy for the maintenance programmer to remember. Because there are so many different ways to abbreviate a word, with abbreviations, you can have several different variables that all have the same apparent purpose. As an added bonus, the maintenance programmer might not even notice they are separate variables.\n  Use constant names like LancelotsFavouriteColour instead of blue and assign it hex value of $0204FB. The color looks iden\n......", "posttime": "2021-08-08 21:50:13", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u4ee3\u7801,\u751f\u4ea7,code,quot", "title": "\u60a8\u5728\u751f\u4ea7\u4e2d\u89c1\u8fc7\u7684\u6700\u90aa\u6076\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\uff1f", "title_en": "What is the most EVIL code you have ever seen in production?", "transed": 1, "url": "https://stackoverflow.com/questions/434414/what-is-the-most-evil-code-you-have-ever-seen-in-a-production-enterprise-environ", "via": "", "real_tags": ["\u4ee3\u7801", "\u751f\u4ea7", "code", "quot"]}, {"category": "", "categoryclass": "", "imagename": "9c198ae4180f01f9f3651ce4f301a6c0.jpg", "infoid": 1072111, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u7fa4\u4f53\u673a\u5668\u4eba\u662f\u4e00\u4e2a\u76f8\u5bf9\u8f83\u65b0\u4e14\u6781\u5177\u524d\u666f\u7684\u7814\u7a76\u9886\u57df\uff0c\u9700\u8981\u5f00\u53d1\u53ef\u4ee5\u4e00\u8d77\u79fb\u52a8\u548c\u5b8c\u6210\u4efb\u52a1\u7684\u591a\u673a\u5668\u4eba\u56e2\u961f\u3002\u673a\u5668\u4eba\u7fa4\u53ef\u4ee5\u6709\u8bb8\u591a\u6709\u4ef7\u503c\u7684\u5e94\u7528\u3002\u4f8b\u5982\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u641c\u7d22\u548c\u6551\u63f4\u4efb\u52a1\u4e2d\u4e3a\u4eba\u7c7b\u63d0\u4f9b\u652f\u6301\uff0c\u6216\u8005\u5141\u8bb8\u4ed6\u4eec\u76d1\u89c6\u96be\u4ee5\u8fdb\u5165\u7684\u5730\u7406\u533a\u57df\u3002 Fraunhofer FKIE \u548c\u5fb7\u56fd\u6ce2\u6069\u5927\u5b66\u7684\u7814\u7a76\u4eba\u5458\u6700\u8fd1\u8bbe\u8ba1\u4e86\u4e00\u79cd\u7406\u8bba\u7ed3\u6784\uff0c\u53ef\u4ee5\u6307\u5bfc\u81ea\u7ec4\u7ec7\u7fa4\u7cfb\u7edf\u7684\u53d1\u5c55\u3002\u8be5\u7ed3\u6784\u5728 Sage \u7684 Adaptive Behavior \u671f\u520a\u4e0a\u53d1\u8868\u7684\u4e00\u7bc7\u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u4e3a\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b0\u7684\u6574\u4f53\u89c6\u89d2\uff0c\u8be5\u56e2\u961f\u5c06\u5176\u79f0\u4e3a\u201c\u8054\u5408\u4eba-\u7fa4\u5faa\u73af\u201d\u3002 \u201c\u6211\u4eec\u4e13\u6ce8\u4e8e\u7814\u7a76\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u7684\u673a\u5668\u4eba\u6280\u672f\u5b50\u9886\u57df\uff0c\u201d\u8fdb\u884c\u8fd9\u9879\u7814\u7a76\u7684\u7814\u7a76\u4eba\u5458\u4e4b\u4e00\u4e54\u7eb3\u65af D.\u54c8\u65af\u5df4\u8d6b\u544a\u8bc9 TechXplore\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u5bf9\u4e8e\u6211\u4eec\u5982\u4f55\u6700\u597d\u5730\u8bbe\u8ba1\u672a\u6765\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\uff0c\u8fd8\u6ca1\u6709\u666e\u904d\u7684\u770b\u6cd5\u3002\u6211\u4eec\u8fd9\u7bc7\u6587\u7ae0\u7684\u76ee\u7684\u662f\u4e3a\u7814\u7a76\u754c\u63d0\u4f9b\u4e00\u4e2a\u7406\u8bba\u57fa\u7840\uff0c\u4e00\u79cd\u601d\u7ef4\u65b9\u5f0f\uff0c\u53ef\u4ee5\u5c06\u4eba\u7c7b\u4e2d\u7684\u5b64\u7acb\u89e3\u51b3\u65b9\u6848\u8054\u7cfb\u8d77\u6765\u2014\u2014\u7fa4\u4e92\u52a8\u3002\u201d\u5f53\u7814\u7a76\u4eba\u5458\u8bd5\u56fe\u4e3a\u5728\u73b0\u5b9e\u4e16\u754c\u73af\u5883\u4e2d\u8868\u73b0\u826f\u597d\u7684\u4eba\u4e0e\u7fa4\u4ea4\u4e92\u8bbe\u8ba1\u201c\u5faa\u73af\u201d\u65f6\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\uff0c\u4ed6\u4eec\u5e94\u8be5\u5168\u9762\u8003\u8651\u8fd9\u4e9b\u4ea4\u4e92\u3002\u4f8b\u5982\uff0c\u6307\u5b9a\u4eba\u7c7b\u5982\u4f55\u5411\u673a\u5668\u4eba\u7fa4\u53d1\u51fa\u4ed6\u4eec\u7684\u610f\u56fe\u662f\u4e0d\u591f\u7684\uff0c\u65b9\u6cd5\u8fd8\u5e94\u8be5\u8003\u8651\u673a\u5668\u4eba\u7fa4\u5982\u4f55\u5411\u4eba\u7c7b\u7528\u6237\u63d0\u4f9b\u53cd\u9988\u3002 \u201c\u6211\u4eec\u4ece\u7406\u8bba\u7684\u89d2\u5ea6\u63d0\u51fa\u95ee\u9898\uff0c\u5728\u590d\u6742\u4e16\u754c\u7684\u80cc\u666f\u4e0b\uff0c\u6211\u4eec\u5982\u4f55\u5c06\u4eba\u7c7b\u8ba4\u77e5\u7684\u597d\u5904\u4e0e\u81ea\u7ec4\u7ec7\u673a\u5668\u4eba\u7fa4\u7684\u597d\u5904\u7ed3\u5408\u8d77\u6765\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5bfc\u81f4\u4e86\u4e00\u4e2a\u53d7\u751f\u7269\u542f\u53d1\u7684\u8bbe\u8ba1\u9690\u55bb\uff0c\u5373\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u5b83\u672c\u8d28\u4e0a\u63d0\u51fa\u7fa4\u4f53\u5e94\u8be5\u81ea\u6211\u7ec4\u7ec7\u6210\u4eba\u4f53\u5e76\u50cf\u4eba\u4f53\u4e00\u6837\u884c\u4e8b\u3002\u6211\u4eec\u5047\u8bbe\u8fd9\u79cd\u89c2\u70b9\u53ef\u80fd\u662f\u8bbe\u8ba1\u4eba\u7c7b\u7684\u4e00\u4e2a\u5f88\u597d\u7684\u9690\u55bb-\u80fd\u591f\u5904\u7406\u73b0\u5b9e\u4e16\u754c\u52a8\u6001\u7684\u7fa4\u5faa\u73af\u3002\u201d\u5728\u673a\u5668\u4eba\u7fa4\u4f5c\u4e3a\u4eba\u7c7b\u7684\u5ef6\u4f38\uff08\u5373\u901a\u8fc7\u8986\u76d6\u4ed6\u4eec\u65e0\u6cd5\u8986\u76d6\u7684\u533a\u57df\u6765\u5e2e\u52a9\u4eba\u7c7b\u5b8c\u6210\u4efb\u52a1\uff09\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u9690\u55bb\u53ef\u7528\u4e8e\u5bfc\u822a\u4eba\u7c7b\u590d\u6742\u7684\u8bbe\u8ba1\u7a7a\u95f4\u3002\u7fa4\u4e92\u52a8\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5f00\u53d1\u66f4\u9ad8\u6548\u4e14\u53ef\u5e94\u7528\u4e8e\u66f4\u590d\u6742\u573a\u666f\u7684\u4eba\u7c7b\u96c6\u7fa4\u7cfb\u7edf\u3002 \u201c\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u4ee5\u8be2\u95ee\u771f\u5b9e\u7684\u8eab\u4f53\u90e8\u4f4d\u63a7\u5236\u611f\u89c9\u5982\u4f55\uff0c\u5e76\u5c06\u5176\u6620\u5c04\u5230\u4eba\u7fa4\u754c\u9762\u8bbe\u8ba1\u4e0a\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u89e3\u91ca\u9053\u3002 \u201c\u5f53\u4f60\u8d70\u5728\u8857\u4e0a\u65f6\uff0c\u4f60\u6709\u591a\u5c11\u6b21\u6709\u610f\u8bc6\u5730\u8003\u8651\u4f60\u7684\u817f\u90e8\u8fd0\u52a8\uff1f\u53ef\u80fd\u6ca1\u6709\u90a3\u4e48\u9891\u7e41\u3002\u4ece\u8fdb\u5316\u7684\u89d2\u5ea6\u6765\u770b\uff0c\u8fd9\u662f\u6709\u9053\u7406\u7684\uff1b\u9648\u89c4\u5b9a\u578b\u7684\u8eab\u4f53\u63a7\u5236\u7531\u795e\u7ecf\u5b50\u7cfb\u7edf\u8d1f\u8d23\uff0c\u4ee5\u4fbf\u6709\u610f\u8bc6\u7684\u8ba4\u77e5\u7cfb\u7edf\u53ef\u4ee5\u5904\u7406\u66f4\u591a\u590d\u6742\u7684\u4e16\u754c\u52a8\u6001\u3002\u201d Hasbach \u548c\u4ed6\u7684\u540c\u4e8b\u7684\u8bba\u6587\u5f3a\u8c03\u4e86\u4f7f\u7528\u4eba\u7c7b\u72b6\u6001\u5206\u7c7b\u4f5c\u4e3a\u63d0\u4f9b\u7ed9\u673a\u5668\u4eba\u7fa4\u7684\u63a7\u5236\u8f93\u5165\u7684\u6f5c\u5728\u597d\u5904\uff0c\u800c\u4e0d\u662f\u8ba9\u4eba\u7c7b\u7528\u6237\u59cb\u7ec8\u63a7\u5236\u7fa4\u3002\u7814\u7a76\u4eba\u5458\u5f15\u5165\u7684\u8bbe\u8ba1\u6bd4\u55bb\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6709\u65f6\u88ab\u79f0\u4e3a\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u53d1\u5c55\u7684\u7075\u611f\u3002\u8fd9\u662f\u751f\u7269\u7fa4\uff08\u4f8b\u5982\u8682\u8681\u3001\u9e1f\u7c7b\uff09\u548c\u5927\u8111\u5171\u4eab\u7c7b\u4f3c\u7684\u81ea\u7ec4\u7ec7\u539f\u5219\u7684\u60f3\u6cd5\uff0c\u8fd9\u4e9b\u539f\u5219\u5bfc\u81f4\u8ba4\u77e5\u548c\u51b3\u7b56\u3002\n\u201c\u7fa4\u4f53\u8ba4\u77e5\u201d\u7684\u601d\u60f3\u8fd8\u6ca1\u6709\u5728\u5de5\u7a0b\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u63a2\u7d22\u3002\u7814\u7a76\u4eba\u5458\u7684\u5de5\u4f5c\u53ef\u4ee5\u4e3a\u5f00\u53d1\u53d7\u5927\u8111\u548c\u751f\u7269\u7fa4\u542f\u53d1\u7684\u673a\u5668\u4eba\u7fa4\u5f00\u8f9f\u6709\u8da3\u7684\u53ef\u80fd\u6027\u3002 \u201c\u8bbe\u8ba1\u4f5c\u4e3a\u4eba\u4f53\u5ef6\u4f38\u7684\u673a\u5668\u4eba\u7fa4\u6d89\u53ca\u5728\u7f51\u7edc\u7ea7\u522b\u5c06\u795e\u7ecf\u903b\u8f91\u96c6\u6210\u5230\u673a\u5668\u4eba\u7fa4\u4e2d\uff0c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u8fd9\u4ec5\u53d7\u5230\u6709\u9650\u7684\u5173\u6ce8\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u6211\u4eec\u5df2\u7ecf\u63d0\u51fa\u4e86\u4e00\u4e9b\u5173\u4e8e\u5982\u4f55\u88ab\u89c6\u4e3a\u795e\u7ecf\u7cfb\u7edf\u7684\u60f3\u6cd5\u3002\u201d\u672a\u6765\uff0c\u8fd9\u7ec4\u7814\u7a76\u4eba\u5458\u8bbe\u8ba1\u7684\u7406\u8bba\u65b9\u6cd5\u53ef\u4ee5\u6fc0\u53d1\u65b0\u7cfb\u7edf\u7684\u5f00\u53d1\uff0c\u4f7f\u4eba\u7c7b\u548c\u6210\u7fa4\u7684\u200b\u200b\u673a\u5668\u4eba\u4e4b\u95f4\u80fd\u591f\u6709\u6548\u4ea4\u4e92\u3002\u5728\u4ed6\u4eec\u7684\u8bba\u6587\u4e2d\uff0cHasbach \u548c\u4ed6\u7684\u540c\u4e8b\u4eec\u8fd8\u5c55\u793a\u4e86\u4e00\u4e2a\u6709\u8da3\u5b9e\u9a8c\u7684\u7ed3\u679c\uff0c\u8be5\u5b9e\u9a8c\u5c55\u793a\u4e86\u5982\u4f55\u5c06\u4e00\u4e2a\u7fa4\u4f53\u89c6\u4e3a\u4e00\u4e2a\u81ea\u7ec4\u7ec7\u7684\u754c\u9762\u3002 \u201c\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6211\u4eec\u7684\u6982\u5ff5\u7eaf\u5c5e\u7406\u8bba\u6027\u8d28\uff0c\u4f46\u6211\u4eec\u76ee\u524d\u6b63\u5728\u5b9e\u65bd\u539f\u578b\uff0c\u4ee5\u4fbf\u6211\u4eec\u53ef\u4ee5\u51ed\u7ecf\u9a8c\u7814\u7a76\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u201d\u54c8\u65af\u5df4\u8d6b\u8bf4\u3002 \u201c\u8fd9\u5c06\u7528\u4e8e\u66f4\u65b0\u7fa4\u4f53\u653e\u5927\u7684\u4eba\u7c7b\uff0c\u4f5c\u4e3a\u5173\u4e8e\u5982\u4f55\u8bbe\u8ba1\u4eba\u4e0e\u7fa4\u4f53\u4ea4\u4e92\u7684\u79d1\u5b66\u7406\u8bba\u3002\u201d\u5f15\u6587\uff1a\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7c7b\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5\uff082021 \u5e74\uff0c8 \u6708 5 \u65e5\uff09\uff0c2021 \u5e74 8 \u6708 8 \u65e5\u68c0\u7d22\u81ea https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human- swarm.html \u672c\u6587\u6863\u53d7\u7248\u6743\u4fdd\u62a4\u3002\u9664\u4e86\u51fa\u4e8e\u79c1\u4eba\u5b66\u4e60\u6216\u7814\u7a76\u76ee\u7684\u7684\u4efb\u4f55\u516c\u5e73\u4ea4\u6613\u5916\uff0c\u672a\u7ecf\u4e66\u9762\u8bb8\u53ef\uff0c\u4e0d\u5f97\u590d\u5236\u4efb\u4f55\u90e8\u5206\u3002\u5185\u5bb9\u4ec5\u4f9b\u53c2\u8003\u3002", "note_en": "Swarm robotics is a relatively new and highly promising research field, which entails the development of multi-robot teams that can move and complete tasks together. Robot swarms could have numerous valuable applications. For instance, they could support humans during search and rescue missions or allow them to monitor geographical areas that are difficult to access.    Researchers at Fraunhofer FKIE and University of Bonn in Germany have recently devised a theoretical construct that could guide the development of self-organizing  -swarm systems. This construct, presented in a paper published in Sage&#39;s Adaptive Behavior journal, provides a new holistic perspective to human-swarm interaction, which the team refers to as &#34;joint human-swarm loops.&#34;\n  &#34;We focus on the subfield of robotics that investigates human-swarm interaction,&#34; Jonas D. Hasbach, one of the researchers who carried out the study, told TechXplore. &#34;So far, there exists no general perspective on how we could best design future human-swarm interactions. The aim of our article was to provide the research community with a theoretical base, a way of thinking, that can relate isolated solutions in human-swarm interaction.&#34;\n  When researchers are trying to design &#34;loops&#34; for human-swarm interactions that perform well in real-world settings, they should ideally consider these interactions in their totality. For instance, specifying how humans may signal their intent to a robot swarm is not enough and approaches should also consider how the robot swarm can offer feedback to human users.\n  &#34;We asked from a theoretical point of view how we could join the benefits of human cognition with the benefits of self-organizing robot swarms in the context of a complex world,&#34; Hasbach said. &#34;This led to a bio-inspired metaphor for design, the swarm-amplified human, which essentially proposes that the swarm should self-organize itself into and act like human body parts. We hypothesize that this view may be a good metaphor for designing human-swarm loops that are capable of dealing with real-world dynamics.&#34;\n  In situations where a robot swarm acts as an extension of humans (i.e., helping humans to complete a task by covering areas they cannot cover), the design metaphor introduced by this team of researchers could be used to navigate the complex design space of human-swarm interactions. This could lead to the development of human-swarm systems that are more efficient and can be applied in more complex scenarios.\n   &#34;For example, we can ask how real body part control feels like and map this onto the human-swarm interface design,&#34; Hasbach explained. &#34;How often have you consciously thought about your leg movement when walking down the street? Probably not that often. This makes sense from an evolutionary perspective; stereotypical body control is taken care of by neural subsystems so that the conscious cognitive system can deal with more complex world dynamics.&#34;\n     The paper by Hasbach and his colleagues highlights the potential benefits of using human state classification as a control input fed to a robot swarm, rather than having a human user controlling the swarm at all times. The design metaphor introduced by the researchers could also serve as an inspiration for the development of what is sometimes referred to as &#34;swarm cognition.&#34; This is the idea that biological swarms (e.g., ants, bird folks) and the brain share similar self-organizing principles that lead to cognition and decision making.\n  The idea of &#34;swarm cognition&#34; has not yet been explored in the context of engineering. The researchers&#39; work could open interesting possibilities for the for the development of robot swarms inspired both by the brain and biological swarms.\n  &#34;Designing robot swarms that are an extension of the human body relates to integrating neural logic into robot swarms on the network level, which has received only limited attention so far,&#34; Hasbach said. &#34;We have proposed some ideas on how   could be thought of as neural systems.&#34;\n  In the future, the theoretical approach devised by this team of researchers could inspire the development of new systems that enable effective interactions between humans and swarms of robots. In their paper, Hasbach and his colleagues also presented the results of an interesting experiment that showed how a   swarm could be considered as a self-organized interface in and of itself.\n  &#34;So far, our concepts are of purely theoretical nature, but we are currently implementing prototypes so that we can empirically investigate the swarm-amplified human,&#34; Hasbach said. &#34;The   will be used to update the swarm-amplified human as a scientific theory on how to design human-swarm interaction.&#34;             Citation: A theoretical approach for designing a self-organizing human-swarm system (2021, August 5) retrieved 8 August 2021 from https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html\n  This document is subject to copyright. Apart from any fair dealing for the purpose of private study or research, no part may be reproduced without the written permission. The content is provided for information purposes only.", "posttime": "2021-08-08 21:49:47", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bbe\u8ba1,\u7ec4\u7ec7,approach,\u4eba\u7c7b", "title": "\u4e00\u79cd\u8bbe\u8ba1\u81ea\u7ec4\u7ec7\u4eba\u7fa4\u7cfb\u7edf\u7684\u7406\u8bba\u65b9\u6cd5", "title_en": "A theoretical approach for designing a self-organizing human-swarm system", "transed": 1, "url": "https://techxplore.com/news/2021-08-theoretical-approach-self-organizing-human-swarm.html", "via": "", "real_tags": ["\u8bbe\u8ba1", "\u7ec4\u7ec7", "approach", "\u4eba\u7c7b"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072110, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728\u6211\u5173\u4e8e Zig \u8bed\u8a00\u7684\u5e16\u5b50\u4e4b\u540e\uff0c\u6211\u88ab\u6307\u5411\u4e86 Odin \u8bed\u8a00\u3002\u4ece\u8868\u9762\u4e0a\u770b\uff0c\u5965\u4e01\u548c\u9f50\u683c\u975e\u5e38\u76f8\u4f3c\uff0c\u4f46\u4ed6\u4eec\u5728\u884c\u4e3a\u548c\u5fc3\u6001\u4e0a\u6709\u4e00\u4e9b\u6839\u672c\u7684\u4e0d\u540c\u3002\u6211\u5728\u8fd9\u91cc\u5199\u7684\u5927\u90e8\u5206\u5185\u5bb9\u90fd\u662f\u57fa\u4e8e\u5bf9 Odin \u8bed\u8a00\u6587\u6863\u548c\u8fd9\u7bc7\u535a\u5ba2\u6587\u7ae0\u7684\u7c97\u7565\u9605\u8bfb\u3002 Odin \u5728\u6761\u4ef6\u7f16\u8bd1\u65b9\u9762\u6709\u4e00\u4e2a\u5f88\u597d\u7684\u89c2\u70b9\u3002\u5728\u7f16\u8bd1\u65f6\u8bc4\u4f30\u7684 if \u8bed\u53e5\u5f88\u96be\u533a\u5206\u3002\u6211\u66f4\u559c\u6b22 Odin \u7684 when \u5b50\u53e5\uff0c\u4f46 Zig \u4e5f\u6709 comptime if\uff0c\u8fd9\u4f7f\u5b83\u66f4\u5bb9\u6613\u3002\u6211\u5728 Zig \u4e2d\u4f7f\u7528\u6b64\u6a21\u578b\u7684\u5b9e\u9645\u95ee\u9898\u662f\uff0c\u5f88\u5bb9\u6613\u9047\u5230\u8fd9\u6837\u4e00\u79cd\u60c5\u51b5\uff1a\u60a8\u7f16\u5199\u7684\uff08\u65b0\uff09\u4ee3\u7801\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u4f46 Zig \u4f1a\u68c0\u6d4b\u5230\u5b83\u672a\u4f7f\u7528\u5e76\u4e14\u4e0d\u4f1a\u8d39\u5fc3\u7f16\u8bd1\u5b83\u3002\u5f53\u60a8\u5b9e\u9645\u5c1d\u8bd5\u4f7f\u7528\u5b83\u65f6\uff0c\u60a8\u4f1a\u9047\u5230\u8bb8\u591a\u9700\u8981\u4fee\u590d\u7684\u7f16\u8bd1\u9519\u8bef\u3002\u8fd9\u4e0e\u6211\u901a\u5e38\u7684\u5de5\u4f5c\u65b9\u5f0f\u5f62\u6210\u9c9c\u660e\u5bf9\u6bd4\uff0c\u5373\u51e0\u4e4e\u603b\u662f\u8ba9\u4ee3\u7801\u5904\u4e8e\u53ef\u7f16\u8bd1\u72b6\u6001\uff0c\u5e76\u4f9d\u9760\u7f16\u8bd1\u5668\u6765\u4ed4\u7ec6\u68c0\u67e5\u6211\u7684\u5de5\u4f5c\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6211\u4e0e\u535a\u5ba2\u6587\u7ae0\u548c Odin \u8bed\u8a00\u7684\u4f5c\u8005 Ginger \u5b58\u5728\u4e25\u91cd\u5206\u6b67\u3002\u6211\u53ea\u60f3\u4ece\u90a3\u7bc7\u6587\u7ae0\u4e2d\u63d0\u53d6\u6211\u8ba4\u4e3a\u6700\u91cd\u8981\u7684\u51e0\u70b9\uff1a\u6211\u4ece\u6765\u6ca1\u6709\u8ba9\u7a0b\u5e8f\u5bfc\u81f4\u7cfb\u7edf\u5728\u771f\u5b9e\u8f6f\u4ef6\u4e2d\u8017\u5c3d\u5185\u5b58\uff08\u4eba\u5de5\u538b\u529b\u6d4b\u8bd5\u9664\u5916\uff09\u3002\u5982\u679c\u60a8\u5728\u4f4e\u5185\u5b58\u73af\u5883\u4e2d\u5de5\u4f5c\uff0c\u60a8\u5e94\u8be5\u975e\u5e38\u4e86\u89e3\u5176\u5c40\u9650\u6027\u5e76\u505a\u51fa\u76f8\u5e94\u7684\u8ba1\u5212\u3002\u5982\u679c\u60a8\u662f\u53f0\u5f0f\u673a\u5e76\u4e14\u5185\u5b58\u4e0d\u8db3\uff0c\u8bf7\u4e0d\u8981\u5c1d\u8bd5\u4ece\u6050\u614c\u4e2d\u6062\u590d\uff0c\u9000\u51fa\u7a0b\u5e8f\u751a\u81f3\u5173\u95ed\u8ba1\u7b97\u673a\u3002\u81f3\u4e8e\u5176\u4ed6\u673a\u5668\uff0c\u8bf7\u76f8\u5e94\u8ba1\u5212\uff01\u8fd9\u4e0e\u81ea\u52a8\u5806\u5206\u914d\u6709\u5173\uff08\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u8fd9\u901a\u5e38\u4f1a\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u56e0\u4e3a\u6ca1\u6709\u597d\u7684\u65b9\u6cd5\u62a5\u544a\u5b83\uff09\u3002\u6211\u5bf9\u6b64\u7684\u53cd\u5e94\u662f\u201c640KB \u8db3\u591f\u4e86\u201d\uff0c\u5bf9\u5417\uff1f\u9996\u5148\uff0c\u6211\u4ee5\u7f16\u5199\u6570\u636e\u5e93\u4e3a\u751f\u3002\u5f53\u7528\u6237\u4f7f\u7528\u5927\u5c0f\u4e3a 100 GB \u7684\u6570\u636e\u5e93\u65f6\uff0c\u6211\u5728 128 MB \u7684\u5bb9\u5668\u4e0a\u8fd0\u884c\u6211\u7684\u4ee3\u7801\u3002\u5373\u4f7f\u5728\u5408\u9002\u7684\u670d\u52a1\u5668\u673a\u5668\u4e0a\u8fd0\u884c\uff0c\u6211\u51e0\u4e4e\u603b\u662f\u4e0d\u5f97\u4e0d\u5904\u7406\u5927\u4e8e\u5185\u5b58\u7684\u6570\u636e\u96c6\u3002\u6bcf\u6b21\u542f\u52a8\u7a0b\u5e8f\u65f6\uff0c\u51e0\u4e4e\u90fd\u4f1a\u53d1\u751f\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5\u3002\u7a33\u5065\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\u5bf9\u4e8e\u6784\u5efa\u7cfb\u7edf\u8f6f\u4ef6\u5f88\u91cd\u8981\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5728\u6211\u770b\u6765\uff0c\u76f8\u5e94\u7684\u8ba1\u5212\u5e76\u4e0d\u662f\u4f7f\u7528\u4e00\u79cd\u4f1a\u8ba9\u6211\u9677\u5165\u56f0\u5883\u7684\u8bed\u8a00\u3002\u8fd9\u4e0d\u662f\u7406\u8bba\u4e0a\u7684\uff0c\u8fd9\u662f\u6211\u4eec\u5fc5\u987b\u5904\u7406\u7684\u771f\u5b9e\u60c5\u51b5\u3002 \u2026\u6211\u5bf9\u57fa\u4e8e\u5f02\u5e38/\u7c7b\u4f3c\u5f02\u5e38\u7684\u9519\u8bef\u7684\u95ee\u9898\u4e0d\u662f\u8bed\u6cd5\uff0c\u800c\u662f\u5b83\u4eec\u5982\u4f55\u9f13\u52b1\u9519\u8bef\u4f20\u64ad\u3002\u8fd9\u79cd\u9f13\u52b1\u4fc3\u8fdb\u4e86\u4e00\u79cd\u5c06\u9519\u8bef\u5411\u4e0a\u4f20\u9012\u7ed9\u201c\u5176\u4ed6\u4eba\u201d\u6765\u5904\u7406\u9519\u8bef\u7684\u6587\u5316\u3002\u6211\u8ba8\u538c\u8fd9\u79cd\u6587\u5316\uff0c\u6211\u4e0d\u60f3\u5728\u8bed\u8a00\u5c42\u9762\u9f13\u52b1\u5b83\u3002\u5728\u90a3\u91cc\u5904\u7406\u9519\u8bef\uff0c\u7136\u540e\u4e0d\u8981\u5c06\u5b83\u4eec\u4f20\u9012\u5230\u5806\u6808\u4e2d\u3002\u4f60\u5f04\u5f97\u4e00\u56e2\u7cdf\uff1b\u4f60\u6e05\u7406\u5b83\u3002\n\u6211\u4e00\u5f00\u59cb\u771f\u7684\u4e0d\u77e5\u9053\u8be5\u600e\u4e48\u56de\u7b54\u3002\u5728\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u8fd9\u751a\u81f3\u6ca1\u6709\u610f\u4e49\uff0c\u751a\u81f3\u90fd\u4e0d\u597d\u7b11\u3002\u8003\u8651\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u9700\u8981\u8c03\u7528\u4e00\u4e2a\u53ef\u4ee5\u4e3a\u6211\u8ba1\u7b97\u4e00\u4e9b\u503c\u7684\u670d\u52a1\u3002\u6211\u8fd9\u6837\u505a\u662f\u4f5c\u4e3a gRPC over TCP + SSL\u3002\u8ba9\u6211\u6570\u4e00\u6570\u8fd9\u91cc\u53ef\u80fd\u53d1\u751f\u7684\u9519\u8bef\u6570\uff0c\u597d\u5417\uff1f\u6211\u7684\u8c03\u7528\u670d\u52a1\u7684\u4ee3\u7801\u9700\u8981\u80fd\u591f\u5904\u7406\u4efb\u4f55/\u6240\u6709\u8fd9\u4e9b\u3002\u53ef\u80fd\u8fd8\u6709\u5f88\u591a\u6211\u6ca1\u6709\u8003\u8651\u5230\u3002\u5c1d\u8bd5\u6784\u5efa\u8fd9\u6837\u7684\u4e1c\u897f\u662f\u7e41\u91cd\u7684\u3001\u8106\u5f31\u7684\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u884c\u4e0d\u901a\u3002\u5c31\u6b64\u800c\u8a00\uff0c\u5982\u679c\u6211\u4e3a\u670d\u52a1\u4f20\u9012\u4e86\u9519\u8bef\u7684 URL\uff0c\u90a3\u4e48\u6267\u884c gRPC \u8c03\u7528\u7684\u4ee3\u7801\u662f\u4ec0\u4e48\uff0c\u4f46\u4f1a\u5192\u6ce1\u9519\u8bef\uff1f\u5982\u679c DNS \u8fd4\u56de\u9519\u8bef\uff0c\u6216\u8005\u5b58\u5728\u8bc1\u4e66\u95ee\u9898\uff0c\u60a8\u5982\u4f55\u6e05\u7406\u5b83\uff1f\u552f\u4e00\u5408\u7406\u7684\u505a\u6cd5\u662f\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u4e0a\u4e0b\u6587\u5e76\u5c06\u9519\u8bef\u62a5\u544a\u7ed9\u8c03\u7528\u8005\u3002\u5728\u6784\u5efa\u5065\u58ee\u7684\u8f6f\u4ef6\u65f6\uff0c\u5c06\u5b83\u5192\u6ce1\u4ee5\u4fbf\u8c03\u7528\u8005\u53ef\u4ee5\u51b3\u5b9a\u505a\u4ec0\u4e48\u4e0d\u662f\u56de\u4f20\uff0c\u8fd9\u662f\u6700\u4f73\u5b9e\u8df5\u3002\u60a8\u53ea\u9700\u8981\u67e5\u770b Erlang \u4ee5\u53ca\u5bf9\u53ef\u9760\u6027\u8981\u6c42\u6700\u9ad8\u7684\u5e94\u7528\u7a0b\u5e8f\u662f\u5982\u4f55\u6784\u5efa\u7684\u3002\u5b83\u4eec\u6ce8\u5b9a\u4f1a\u5931\u8d25\uff0c\u9519\u8bef\u5904\u7406\u548c\u6062\u590d\u53d1\u751f\u5728\u4e13\u7528\uff08\u4e3b\u7ba1\uff09\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4f4d\u7f6e\u5177\u6709\u6b63\u786e\u7684\u4e0a\u4e0b\u6587\u6765\u505a\u51fa\u5b9e\u9645\u51b3\u5b9a\u3002\u7136\u800c\uff0c\u8fd9\u7684\u81f4\u547d\u5f71\u54cd\u662f Zig \u6709\u660e\u786e\u7684\u9519\u8bef\u6982\u5ff5\uff0c\u800c Odin \u4f9d\u8d56\u4e8e\u591a\u8fd4\u56de\u503c\u7cfb\u7edf\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230 Go \u6709\u591a\u597d\u3002\u4e8b\u5b9e\u4e0a\uff0cGo \u6700\u5e38\u89c1\u7684\u95ee\u9898\u4e4b\u4e00\u662f\u8fdb\u884c\u6b63\u786e\u7684\u9519\u8bef\u5904\u7406\u9700\u8981\u591a\u5c11\u624b\u52a8\u5de5\u4f5c\u3002\u4f46\u6211\u8ba4\u4e3a\u8fd9\u91cc\u7684\u5173\u952e\u95ee\u9898\u662f\u9519\u8bef\u4f5c\u4e3a\u8bed\u8a00\u7684\u7b2c\u4e00\u7c7b\u65b9\u9762\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u975e\u5e38\u5f3a\u5927\u7684\u80fd\u529b\uff0cerrdefer\u3002\u8fd9\u4e2a\u5355\u4e00\u7684\u8bed\u8a00\u7279\u6027\u662f\u6211\u8ba4\u4e3a Zig \u662f\u4e00\u79cd\u4e86\u4e0d\u8d77\u7684\u8bed\u8a00\u7684\u539f\u56e0\u3002\u4e00\u6d41\u9519\u8bef\u7684\u6982\u5ff5\u4e0e errdefer \u76f8\u7ed3\u5408\uff0c\u4f7f\u6784\u5efa\u590d\u6742\u7ed3\u6784\u53d8\u5f97\u66f4\u52a0\u5bb9\u6613\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u6b63\u5728\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c06\u5b83\u6620\u5c04\u5230\u5185\u5b58\uff0c\u9a8c\u8bc1\u5b83\u7684\u5927\u5c0f\uff0c\u7136\u540e\u5b83\u5177\u6709\u6b63\u786e\u7684\u54c8\u5e0c\u503c\u3002\u6211\u4f7f\u7528 defer \u6765\u786e\u4fdd\u6211\u6e05\u7406\u4e86\u6587\u4ef6\u53e5\u67c4\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u5185\u5b58\u5462\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u6709\u9519\u8bef\uff0c\u6211\u60f3\u6e05\u7406\u5b83\uff0c\u4f46\u4e0d\u662f\u5176\u4ed6\u60c5\u51b5\u3002\u8003\u8651\u5982\u4f55\u5728\u6ca1\u6709 errdefer \u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u6b64\u4ee3\u7801\u3002\u6211\u5fc5\u987b\u5728\u6211\u60f3\u8981\u8fd4\u56de\u9519\u8bef\u7684\u4e24\u4e2a\u5730\u65b9\u6dfb\u52a0\u201c\u5173\u95ed\u5730\u56fe\u201d\u90e8\u5206\u3002\u5982\u679c\u6211\u4f7f\u7528\u591a\u4e2a\u8d44\u6e90\u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\u6211\u53ef\u80fd\u9700\u8981\u505a\u4e00\u4e9b\u9700\u8981\u6587\u4ef6\u3001\u7f51\u7edc\u5957\u63a5\u5b57\u3001\u5185\u5b58\u7b49\u7684\u64cd\u4f5c\u3002\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u90fd\u53ef\u80fd\u5931\u8d25\uff0c\u4f46\u6211\u53ea\u60f3\u6e05\u7406\u5b83\u4eec\u5931\u8d25\u3002\u5426\u5219\uff0c\u6211\u9700\u8981\u5c06\u5b83\u4eec\u8fd4\u56de\u7ed9\u6211\u7684\u6765\u7535\u8005\u3002\u4f7f\u7528 errdefer\uff08\u5b83\u4f9d\u8d56\u4e8e\u5e38\u89c4\u8fd4\u56de\u548c\u9519\u8bef\u4e4b\u95f4\u7684\u660e\u786e\u533a\u522b\uff09\u5c06\u786e\u4fdd\u6211\u6ca1\u6709\u95ee\u9898\u3002\u4e00\u5207\u6b63\u5e38\uff0c\u6211\u5fc5\u987b\u8bb0\u4f4f\u7684\u72b6\u6001\u6570\u91cf\u5927\u5927\u51cf\u5c11\u3002\n\u53e6\u4e00\u65b9\u9762\uff0c\u8003\u8651\u4e00\u4e0b\u5728 Odin \u6216 Go \u4e2d\u4f60\u4f1a\u5982\u4f55\u5904\u7406\uff0c\u4f60\u4f1a\u770b\u5230\u9519\u8bef\u5904\u7406\u5982\u4f55\u6210\u4e3a\u4e00\u4e2a\u5de8\u5927\u7684\u91ce\u517d\u3002\u6709\u660e\u786e\u7684\u8bed\u8a00\u652f\u6301\u6765\u5e2e\u52a9\u5b9e\u73b0\u8fd9\u4e00\u70b9\u771f\u7684\u5f88\u597d\u3002", "note_en": "I was pointed to the Odin language after my post about  the Zig language. On the surface, Odin and Zig are very similar, but they have some fundamental differences in behavior and mindset. I\u2019m basing most of what I\u2019m writing here on admittedly cursory reading of the Odin language docs and  this blog post.\n Odin has a great point on conditional compilation. The  if statements that are evaluated at compile time  are hard to distinguish. I like Odin\u2019s  when clauses better, but Zig has  comptime if as well, which make it easier. The actual problem I have with this model in Zig is that it is easy to get to a situation where you write (new) code that doesn\u2019t get called, but Zig will detect that it is unused and not bother compiling it. When you are actually trying to use it, you\u2019ll hit a lot of compilation errors that you need to fix. This is in contrast to the way I would usually work, which is to almost always have the code in compliable state and leaning hard on the compiler to double check my work.\n Beyond that, I have grave disagreements with Ginger, the author of  the blog post and the Odin language. I want to pull just a couple of what I think are the most important points from that post:\n I have never had a program cause a system to run out of memory in real software (other than artificial stress tests). If you are working in a low-memory environment, you should be extremely aware of its limitations and plan accordingly. If you are a desktop machine and run out of memory, don\u2019t try to recover from the panic, quit the program or even shut-down the computer. As for other machinery, plan accordingly!\n This is in relation to automatic heap allocations (which can fail, which will usually kill the process because there is no good way to report it). My reaction to that is \u201c640KB is enough for everything\u201d, right?\n To start with, I write databases for a living. I run my code on containers with 128MB when the user uses a database that is 100s of GB in size. Even if running on proper server machines, I almost always have to deal with datasets that are bigger than memory. Running out of memory happens to us pretty much every single time we start the program. And handling this scenario robustly is  important to building system software. In this case, planning accordingly in my view is not using a language that can put me in a hole. This is  not theoretical, that is real scenario that we have to deal with.\n  \u2026my issue with exception-based/exception-like errors is not the syntax but how they encourage error propagation. This encouragement promotes a culture of pass the error up the stack for \u201csomeone else\u201d to handle the error. I hate this culture and I do not want to encourage it at the language level. Handle errors there and then and don\u2019t pass them up the stack.  You make your mess; you clean it.\n I didn\u2019t really know how to answer that at first. There are so many cases where that doesn\u2019t even make sense that it isn\u2019t even funny. Consider a scenario where I need to call a service that would compute some value for me. I\u2019m doing that as gRPC over TCP + SSL. Let me count the number of errors that can happen here, shall we?\n  My code, which is calling the service, need to be able to handle any / all of those. And probably quite a few more that I didn\u2019t account for. Trying to build something like that is onerous, fragile and doesn\u2019t really work. For that matter, if I passed the wrong URL for the service, what is the code that is doing the gRPC call supposed to do but bubble the error up? If the DNS is returning an error, or there is a certificate issue, how  do you clean it up? The only reasonable thing to do is to give as much context as possible and raise the error to the caller.\n When building robust software, bubbling it up so the caller can decide what to do isn\u2019t about passing the back, it is a b  best practice. You only need to look at Erlang and how applications with the highest requirements for reliability are structured. They are  meant to fail, error handling and recovery is something that happens in dedicated (supervisors) locations, because these places has the right context to make an actual determination.\n The killer impact of this, however, is that Zig has explicit notion of errors, while Odin relies on the multiple return values system. We have seen how good that is with Go. In fact, one of the most common issues  with Go is the issue with how much manual work it takes to do proper error handling.\n But I think that the key issue here is that errors as a first class aspect of the language gives us a very powerful ability,  errdefer. This single language feature is the reason I think that Zig is an amazing language. The concept of first class errors combine with  errdefer makes building complex structures so much easier.\n   Note that I\u2019m opening a file, mapping it to memory, validating its size and then that it has the right hash. I\u2019m using  defer to ensure that I cleanup the file handle, but what about the returned memory, in this case, I want to clean it up  if there is an error, but not otherwise.\n Consider how you would write this code without  errdefer. I would have to add the \u201cclose the map\u201d portion to both places where I want to return an error. And what happens if I\u2019m using more than a couple of resources, I may be needing to do something that require a file, network socket, memory, etc. Any of those operations can fail, but I want to clean them up only on failure. Otherwise, I need to return them to my caller. Using  errdefer (which relies on the explicit distinction between regular returns and errors) will ensure that I don\u2019t have a problem. Everything works, and the amount of state that I have to keep in my head is  greatly reduce.\n Consider how you\u2019ll that that in Odin or Go, on the other hand, and you can see how error handling become a big beast. Having explicit language support to assist in that is  really nice.", "posttime": "2021-08-08 21:49:14", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5965\u4e01,odin,\u9519\u8bef", "title": "\u8c03\u67e5\u5965\u4e01\u548c\u9f50\u683c", "title_en": "Looking into Odin and Zig", "transed": 1, "url": "https://ayende.com/blog/194466-A/looking-into-odin-and-zig-my-notes?key=42d23515614840bead91eca65823b9d5", "via": "", "real_tags": ["\u5965\u4e01", "odin", "\u9519\u8bef"]}, {"category": "", "categoryclass": "", "imagename": "555133b5180c351b5b2f942fc37a98fb.jpg", "infoid": 1072109, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "M \u4f1a\u5728\u5b66\u6821\u9047\u5230\u6bd5\u8fbe\u54e5\u62c9\u65af\u5173\u4e8e\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u5b9a\u7406\u2014\u2014\u659c\u8fb9\u4e0a\u7684\u5e73\u65b9\u7b49\u4e8e\u53e6\u5916\u4e24\u6761\u8fb9\u4e0a\u7684\u5e73\u65b9\u4e4b\u548c\u2014\u2014\u3002\u4f46\u4e0d\u592a\u559c\u6b22\u6570\u5b66\u7684\u4eba\u53ef\u80fd\u4f1a\u95ee\uff0c\u8fd9\u79cd\u77e5\u8bc6\u4ec0\u4e48\u65f6\u5019\u624d\u80fd\u5728\u73b0\u5b9e\u751f\u6d3b\u4e2d\u6709\u7528\u3002\u4e00\u4e2a\u6bd4\u6bd5\u8fbe\u54e5\u62c9\u65af\u65e9 1000 \u591a\u5e74\u7684\u7b54\u6848\u662f\u571f\u5730\u6d4b\u91cf\u3002\u6f5c\u4f0f\u5728\u4f0a\u65af\u5766\u5e03\u5c14\u535a\u7269\u9986\u4e2d\u7684\u662f\u4e00\u5757 3700 \u5e74\u5386\u53f2\u7684\u6ce5\u677f\uff0c\u540d\u4e3a Si.427\u3002\u81ea\u4ece\u5b83\u4e8e 19 \u4e16\u7eaa\u5728\u897f\u5e15\uff08Sippar\uff09\u2014\u2014\u4e00\u5ea7\u4f4d\u4e8e\u73b0\u5728\u4f0a\u62c9\u514b\u5883\u5185\u7684\u5df4\u6bd4\u4f26\u53e4\u57ce\u88ab\u6316\u6398\u51fa\u6765\u4ee5\u6765\uff0c\u5b83\u5c31\u4e00\u76f4\u5b58\u5728\u3002\u7136\u800c\uff0c\u76f4\u5230\u4eca\u5e74\uff0c\u6fb3\u5927\u5229\u4e9a\u65b0\u5357\u5a01\u5c14\u58eb\u5927\u5b66\u7684\u6570\u5b66\u5bb6\u4e39\u5c3c\u5c14\u66fc\u65af\u83f2\u5c14\u5fb7\u624d\u63ed\u793a\u4e86\u5b83\u7684\u91cd\u8981\u6027\u3002\u6b63\u5982\u4ed6\u5728\u300a\u79d1\u5b66\u57fa\u7840\u300b\u4e2d\u6240\u63cf\u8ff0\u7684\u90a3\u6837\uff0cMansfield \u535a\u58eb\u5df2\u7ecf\u8bc1\u660e Si.427 \u523b\u6709\u4e16\u754c\u4e0a\u5df2\u77e5\u6700\u53e4\u8001\u7684\u5e94\u7528\u51e0\u4f55\u793a\u4f8b\u3002 Si.427 \u4f3c\u4e4e\u662f\u7531\u4e00\u540d\u6d4b\u91cf\u5458\u5728\u90e8\u5206\u571f\u5730\u51fa\u552e\u540e\u5b9a\u4e49\u571f\u5730\u8fb9\u754c\u800c\u521b\u5efa\u7684\u3002\u8fd9\u672c\u8eab\u5c31\u5f88\u4e0d\u8d77\u773c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5b83\u7684\u6587\u672c\u63cf\u8ff0\u4e86\u5982\u4f55\u4f7f\u7528\u73b0\u5728\u79f0\u4e3a\u52fe\u80a1\u6570\u4e09\u5143\u7ec4\u6765\u7ed8\u5236\u51c6\u786e\u7684\u76f4\u89d2\u3002\u52fe\u80a1\u4e09\u5143\u7ec4\u662f\u52fe\u80a1\u5b9a\u7406\u7684\u7279\u4f8b\u3002\u5b83\u4eec\u662f\u4e00\u7ec4\u6574\u6570\uff0c\u5bf9\u5e94\u4e8e\u7279\u5b9a\u76f4\u89d2\u4e09\u89d2\u5f62\u7684\u8fb9\u957f\u3002\u4f8b\u5982\uff0c\u4e09\u3001\u56db\u548c\u4e94\uff0c\u6216\u4e94\u300112 \u548c 13\u3002\u53e6\u4e00\u5757\u77f3\u677f\uff0cPlimpton 322\uff0c\u5728\u51e0\u5341\u5e74\u524d\u8868\u660e\u5df4\u6bd4\u4f26\u4eba\u77e5\u9053\u8fd9\u4e9b\u4e09\u5143\u7ec4\u3002\u7814\u7a76\u4eba\u5458\u65e0\u6cd5\u5c31\u4ed6\u4eec\u611f\u5174\u8da3\u7684\u539f\u56e0\u8fbe\u6210\u4e00\u81f4\u3002\u66fc\u65af\u83f2\u5c14\u5fb7\u535a\u58eb\u7684\u56de\u7b54\u662f\u8c03\u67e5\uff0c\u56e0\u4e3a\u8fd9\u662f\u519c\u4e1a\u53d1\u5c55\u7684\u65f6\u671f\uff0c\u571f\u5730\u6240\u6709\u6743\u7684\u60f3\u6cd5\u4e5f\u968f\u4e4b\u800c\u6765\u3002\u6d4b\u91cf\u5b57\u6bb5\u5927\u5c0f\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5c06\u5176\u5212\u5206\u4e3a\u77e9\u5f62\u548c\u76f4\u89d2\u4e09\u89d2\u5f62\uff0c\u8fd9\u4e24\u79cd\u4e09\u89d2\u5f62\u7684\u9762\u79ef\u90fd\u5f88\u5bb9\u6613\u8ba1\u7b97\u3002\u4e86\u89e3\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e09\u5143\u7ec4\u53ef\u4ee5\u66f4\u8f7b\u677e\u5730\u7ed8\u5236\u6784\u5efa\u8fd9\u4e9b\u56fe\u5f62\u6240\u9700\u7684\u76f4\u89d2\uff0c\u56e0\u6b64\u6709\u7528\u7684\u4fe1\u606f\u4e5f\u662f\u5982\u6b64\u3002 .\u8fd9\u7bc7\u6587\u7ae0\u51fa\u73b0\u5728\u5370\u5237\u7248\u7684\u79d1\u5b66\u4e0e\u6280\u672f\u90e8\u5206\uff0c\u6807\u9898\u4e3a\u201c\u4e0d\u9700\u8981\u91cf\u89d2\u5668\u201d", "note_en": "M  will have encountered Pythagoras\u2019s theorem about right-angled triangles\u2014that the square on the hypotenuse is equal to the sum of the squares on the other two sides\u2014at school. But the less-mathematically inclined might have been tempted to ask when such knowledge would ever be useful in real life. One answer, predating Pythagoras by over 1,000 years, is in land surveying.\n  Lurking in a museum in Istanbul is a 3,700-year-old clay tablet known as Si.427. It has been there since it was dug up in the 19th century in Sippar, an ancient Babylonian city in what is now Iraq. Only this year, however, has its significance been revealed\u2014by Daniel Mansfield, a mathematician at the University of New South Wales, in Australia. As he describes in  Foundations of Science, Dr Mansfield has shown that Si.427 is inscribed with the world\u2019s oldest known example of applied geometry.\n Si.427 seems to have been created by a surveyor defining land boundaries after part of a field was sold. This is, of itself, unremarkable. What is remarkable is that its text describes the use of what are now called Pythagorean triples to draw accurate right angles.\n  Pythagorean triples are special cases of Pythagoras\u2019s theorem. They are sets of whole numbers that correspond to the lengths of the sides of particular right-angled triangles. Three, four and five for example, or five, 12 and 13. Another tablet, Plimpton 322, showed many decades ago that the Babylonians knew about these triples. What researchers could not agree on was why they were interested.\n Dr Mansfield\u2019s answer is surveying, for this was a period when agriculture was developing, and with it the idea of land ownership. One way to measure the size of a field is to divide it into rectangles and right-angled triangles, both of which have easily calculated areas. Knowing Pythagorean triples makes drawing the right angles needed to construct these figures easier, and so is useful information.  .\n  This article appeared in the Science &amp; technology section of the print edition under the headline &#34;No need for a protractor&#34;", "posttime": "2021-08-08 20:49:43", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u6bd5\u8fbe\u54e5\u62c9\u65af,pythagorean,\u571f\u5730", "title": "\u5df4\u6bd4\u4f26\u4eba\u65e9\u5728\u6bd5\u8fbe\u54e5\u62c9\u65af\u4e4b\u524d\u5c31\u4f7f\u7528\u4e86\u6bd5\u8fbe\u54e5\u62c9\u65af\u7684\u601d\u60f3", "title_en": "The Babylonians used Pythagorean ideas long before Pythagoras", "transed": 1, "url": "https://www.economist.com/science-and-technology/the-babylonians-used-pythagorean-ideas-long-before-pythagoras/21803301", "via": "", "real_tags": ["\u6bd5\u8fbe\u54e5\u62c9\u65af", "\u571f\u5730"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072108, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u8be5\u5e93\u652f\u6301 100 \u591a\u79cd\u8bed\u8a00\u3001\u81ea\u52a8\u6587\u672c\u5b9a\u4f4d\u548c\u811a\u672c\u68c0\u6d4b\u3001\u7528\u4e8e\u9605\u8bfb\u6bb5\u843d\u3001\u5355\u8bcd\u548c\u5b57\u7b26\u8fb9\u754c\u6846\u7684\u7b80\u5355\u754c\u9762\u3002 Tesseract.js \u65e2\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u5728\u5e26\u6709 NodeJS \u7684\u670d\u52a1\u5668\u4e0a\u8fd0\u884c\u3002", "note_en": "This library supports  more than 100 languages, automatic text  orientation and script detection, a simple interface for reading paragraph, word, and character  bounding boxes. Tesseract.js can run either in a  browser and on a server with  NodeJS.", "posttime": "2021-08-08 20:49:34", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "java,javascript,pure,\u5e26\u6709", "title": "Tesseract.js \u2013 100 \u79cd\u8bed\u8a00\u7684\u7eaf JavaScript OCR", "title_en": "Tesseract.js \u2013 Pure JavaScript OCR for 100 Languages", "transed": 1, "url": "https://tesseract.projectnaptha.com/", "via": "", "real_tags": ["java", "pure", "\u5e26\u6709"]}, {"category": "", "categoryclass": "", "imagename": "116ef3932d6edf9d95eefd8dd7473ee0.jpg", "infoid": 1072105, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "(CNN) \u53bb\u5e74\uff0c\u4f18\u6b65 (UBER)\u3001Lyft (LYFT)\u3001DoorDash \u548c Instacart \u6210\u529f\u5730\u8ba9\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u6295\u7968\u652f\u6301\u4e00\u9879\u6295\u7968\u63aa\u65bd\uff0c\u514d\u9664\u4ed6\u4eec\u5c06\u53f8\u673a\u548c\u9001\u8d27\u5de5\u4eba\u5f52\u7c7b\u4e3a\u96c7\u5458\u3002\u73b0\u5728\uff0c\u8fd9\u4e9b\u516c\u53f8\u6b63\u5904\u4e8e\u9a6c\u8428\u8bf8\u585e\u5dde\u91c7\u53d6\u7c7b\u4f3c\u65b9\u6cd5\u7684\u65e9\u671f\u9636\u6bb5\u3002\u4ee3\u8868\u8fd9\u4e9b\u96f6\u5de5\u516c\u53f8\u7684\u8054\u76df\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u8868\u793a\uff0c\u5b83\u4e8e\u5468\u4e09\u63d0\u4ea4\u4e86\u4e00\u4efd\u5173\u4e8e\u8be5\u5dde 2022 \u5e74\u6295\u7968\u7684\u95ee\u9898\uff0c\u8be5\u6295\u7968\u5c06\u201c\u6388\u4e88\u5386\u53f2\u6027\u7684\u65b0\u798f\u5229\u201d\uff0c\u5e76\u5141\u8bb8\u5de5\u4eba\u201c\u4fdd\u6301\u4f5c\u4e3a\u72ec\u7acb\u627f\u5305\u5546\u7684\u7075\u6d3b\u6027\u201d\uff0c\u8fd9\u662f\u5b83\u8bf4\u5927\u591a\u6570\u53f8\u673a\u60f3\u8981\u3002 \u201c\u5982\u679c\u6ca1\u6709\u6295\u7968\u63aa\u65bd\u6216\u7acb\u6cd5\u89e3\u51b3\u65b9\u6848\uff0c\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u62fc\u8f66\u548c\u4ea4\u4ed8\u7684\u672a\u6765\u53ef\u80fd\u4f1a\u5904\u4e8e\u5371\u9669\u4e4b\u4e2d\uff0c\u201d\u8be5\u8054\u76df\u8868\u793a\uff0c\u5176\u8bed\u8a00\u8ba9\u4eba\u60f3\u8d77\u8fd9\u4e2a\u95ee\u9898\u5bf9\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u7684\u4e25\u91cd\u7a0b\u5ea6\u3002\u4f46\u662f\uff0c\u7531\u4e8e\u770b\u5230\u4e86\u52a0\u5229\u798f\u5c3c\u4e9a\u7684\u60c5\u51b5\u5982\u4f55\uff0c\u53cd\u5bf9\u6d3e\u8fd9\u6b21\u7ad9\u5728\u4e86\u4ed6\u4eec\u8ba4\u4e3a\u4e0a\u6b21\u4f7f\u7528\u7684\u5267\u672c\u7684\u524d\u6cbf\u3002\u5305\u62ec\u52b3\u5de5\u6743\u76ca\u5021\u5bfc\u8005\u548c\u793e\u533a\u56e2\u4f53\u5728\u5185\u7684\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u672c\u5468\u8fa9\u79f0\uff0c\u9a6c\u8428\u8bf8\u585e\u5dde\u7684\u63aa\u65bd\u5c06\u4e3a\u5de5\u4eba\u201c\u6c38\u4e45\u521b\u9020\u2018\u4e8c\u7b49\u2019\u5730\u4f4d\u201d\uff0c\u5e76\u6307\u51fa\u5176\u4e2d\u5927\u591a\u6570\u662f\u9ed1\u4eba\u3001\u68d5\u8272\u4eba\u548c\u79fb\u6c11\u3002\u957f\u671f\u4ee5\u6765\uff0c\u5c06\u6309\u9700\u5458\u5de5\u5f52\u7c7b\u4e3a\u5458\u5de5\u4e00\u76f4\u88ab\u89c6\u4e3a\u5bf9 Uber \u548c Lyft \u666e\u53ca\u7684\u5546\u4e1a\u6a21\u5f0f\u7684\u6f5c\u5728\u5a01\u80c1\u3002\u8fd9\u4e9b\u516c\u53f8\u901a\u8fc7\u5927\u91cf\u88ab\u89c6\u4e3a\u72ec\u7acb\u627f\u5305\u5546\u7684\u5de5\u4eba\u6269\u5927\u4e1a\u52a1\u89c4\u6a21\uff0c\u907f\u514d\u4e86\u4e3a\u5458\u5de5\u63d0\u4f9b\u6602\u8d35\u798f\u5229\u7684\u8d23\u4efb\uff0c\u4f8b\u5982\u6700\u4f4e\u5de5\u8d44\u3001\u52a0\u73ed\u8d39\u3001\u5e26\u85aa\u75c5\u5047\u548c\u5931\u4e1a\u4fdd\u9669\u3002\u8fd9\u4e9b\u516c\u53f8\u8fd8\u8868\u660e\uff0c\u4ed6\u4eec\u51c6\u5907\u4e0d\u9057\u4f59\u529b\u5730\u4e3a\u81ea\u5df1\u5236\u5b9a\u4e00\u9879\u66f4\u6709\u5229\u7684\u6cd5\u5f8b\u200b\u200b\u3002\u5f53\u9762\u4e34\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u7684\u4e00\u9879\u65b0\u52b3\u52a8\u6cd5\uff0c\u5373\u7b2c 5 \u53f7\u8bae\u4f1a\u6cd5\u6848\uff0c\u8be5\u6cd5\u6848\u4f7f\u516c\u53f8\u66f4\u96be\u5c06\u5de5\u4eba\u5f52\u7c7b\u4e3a\u8be5\u5dde\u7684\u72ec\u7acb\u627f\u5305\u5546\u65f6\uff0c\u4f18\u6b65\u3001Lyft\u3001DoorDash \u548c Instacart \u5728\u4e00\u9879\u540d\u4e3a Proposition \u7684\u6295\u7968\u63aa\u65bd\u4e0a\u603b\u5171\u82b1\u8d39\u4e86 2.25 \u4ebf\u7f8e\u514322 \u6216 22 \u53f7\u63d0\u6848\u4ee5\u6709\u6548\u5730\u56de\u907f\u5b83\u3002\u4ed6\u4eec\u53d1\u8d77\u4e86\u4e00\u573a\u79ef\u6781\u7684\u7535\u89c6\u5e7f\u544a\u3001\u5e94\u7528\u5185\u4fe1\u606f\u548c\u6df7\u6dc6\u90ae\u4ef6\u6d3b\u52a8\uff0c\u7528\u5176\u4fe1\u606f\u8f70\u70b8\u52a0\u5229\u798f\u5c3c\u4e9a\u4eba\u3002 22 \u53f7\u63d0\u6848\u5141\u8bb8\u516c\u53f8\u5c06\u5de5\u4eba\u5f52\u7c7b\u4e3a\u72ec\u7acb\u627f\u5305\u5546\uff0c\u540c\u65f6\u7ed9\u4e88\u4e00\u4e9b\u53f8\u673a\u67d0\u4e9b\u798f\u5229\u8ba9\u6b65\uff0c\u4f46\u5982\u679c\u4e0d\u901a\u8fc7\u8be5\u63aa\u65bd\u800c\u4ed6\u4eec\u88ab\u5f52\u7c7b\u4e3a\u96c7\u5458\uff0c\u4ed6\u4eec\u53ef\u80fd\u4f1a\u83b7\u5f97\u7684\u5168\u5957\u4fdd\u62a4\u3002\u63a5\u4e0b\u6765\u662f\u9a6c\u8428\u8bf8\u585e\u5dde\uff0c\u5b83\u7684\u52b3\u52a8\u6cd5\u4e5f\u540c\u6837\u4e25\u683c\u3002\u9a6c\u8428\u8bf8\u585e\u5dde\u603b\u68c0\u5bdf\u957f\u76ee\u524d\u6b63\u5728\u5c31 Uber \u548c Lyft \u5bf9\u5458\u5de5\u8fdb\u884c\u5206\u7c7b\u7684\u65b9\u5f0f\u5411\u4ed6\u4eec\u63d0\u51fa\u6311\u6218\uff0c\u4e24\u5bb6\u516c\u53f8\u5df2\u8868\u793a\u6253\u7b97\u4e0e\u4e4b\u6297\u4e89\u3002\n\u4e0e 22 \u53f7\u63d0\u6848\u7c7b\u4f3c\uff0c\u62df\u8bae\u7684\u9a6c\u8428\u8bf8\u585e\u5dde\u6295\u7968\u8ba1\u5212\u63d0\u51fa\u4e86\u57fa\u4e8e\u201c\u53c2\u4e0e\u65f6\u95f4\u201d\u7684\u201c\u6700\u4f4e\u5de5\u8d44\u7684 120%\u201d\u7684\u6700\u4f4e\u6536\u5165\u4fdd\u8bc1\uff0c\u8fd9\u610f\u5473\u7740\u552f\u4e00\u8ba1\u7b97\u7684\u65f6\u95f4\u662f\u53f8\u673a\u5b8c\u6210\u4e58\u8f66\u6216\u9001\u8d27\u8bf7\u6c42\u7684\u65f6\u95f4\uff0c\u800c\u4e0d\u662f\u65f6\u95f4\u4ed6\u4eec\u82b1\u5728\u7b49\u5f85\u6f14\u51fa\u4e0a\u3002 \uff08\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u52b3\u5de5\u4e2d\u5fc3\u7684\u4e00\u9879\u5206\u6790\u4f30\u8ba1\uff0c\u6839\u636e 22 \u53f7\u63d0\u6848\uff0c\u4f18\u6b65\u548c Lyft \u53f8\u673a\u7684\u5de5\u8d44\u4fdd\u8bc1\u76f8\u5f53\u4e8e\u6bcf\u5c0f\u65f6 5.64 \u7f8e\u5143\uff0c\u800c\u4e0d\u662f 15.60 \u7f8e\u5143\u6216 13 \u7f8e\u5143\u6700\u4f4e\u5de5\u8d44\u7684 120%\uff0c\u56e0\u4e3a\u5b58\u5728\u6b64\u7c7b\u6f0f\u6d1e\u3002\uff09\u8fd8\u5c06\u83b7\u5f97\u6bcf\u82f1\u91cc 0.26 \u7f8e\u5143\u7684\u8865\u507f\uff0c\u7528\u4e8e\u652f\u4ed8\u8f66\u8f86\u4fdd\u517b\u548c\u6c7d\u6cb9\u8d39\u7528\u3002 \uff08\u52a0\u5dde\u5927\u5b66\u4f2f\u514b\u5229\u5206\u6821\u52b3\u5de5\u4e2d\u5fc3\u6b64\u524d\u66fe\u6307\u51fa\uff0c22 \u53f7\u63d0\u6848\u7684 0.30 \u7f8e\u5143\u8865\u507f\u4f4e\u4e8e\u7f8e\u56fd\u56fd\u7a0e\u5c40\u4f30\u8ba1\u7684\u6bcf\u82f1\u91cc\u62e5\u6709\u548c\u8fd0\u8425\u8f66\u8f86\u6210\u672c 0.58 \u7f8e\u5143\u3002\uff09\u867d\u7136\u8be5\u63d0\u6848\u5305\u62ec\u516c\u53f8\u4e3a\u67d0\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u5de5\u4eba\u63d0\u4f9b\u7684\u533b\u7597\u4fdd\u5065\u6350\u6b3e\uff0c\u4f46\u6839\u636e\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7684\u8bf4\u6cd5\uff0c\u4e5f\u662f\u57fa\u4e8e\u201c\u5de5\u4f5c\u65f6\u95f4\u201d\uff0c\u7531\u4e8e\u6700\u4f4e\u5de5\u4f5c\u65f6\u95f4\u8981\u6c42\uff0c\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u5de5\u4eba\u53ef\u80fd\u7b26\u5408\u6761\u4ef6\u3002 \uff08\u6839\u636e\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u7684\u8bf4\u6cd5\uff0c\u4f7f\u7528\u201c\u53c2\u4e0e\u65f6\u95f4\u201d\u4f5c\u4e3a\u8861\u91cf\u6807\u51c6\u53ef\u4ee5\u63d0\u9ad8\u5de5\u4f5c\u7684\u7075\u6d3b\u6027\uff0c\u58f0\u79f0\u201c\u5927\u591a\u6570\u53f8\u673a\u4ece\u5176\u4ed6\u6765\u6e90\u83b7\u5f97\u533b\u7597\u4fdd\u5065\uff0c\u901a\u5e38\u6765\u81ea\u5168\u804c\u5de5\u4f5c\u3002\u201d\uff09\u4e00\u4e9b\u5de5\u4eba\u8fd8\u53ef\u4ee5\u83b7\u5f97\u5e26\u85aa\u75c5\u5047\u3001\u5e26\u85aa\u63a2\u4eb2\u5047\u548c\u75c5\u5047\uff0c\u4ee5\u53ca\u5728\u5de5\u4f24\u60c5\u51b5\u4e0b\u7684\u533b\u7597\u548c\u4f24\u6b8b\u6d25\u8d34\uff0c\u4ee5\u4ee3\u66ff\u5de5\u4f24\u8d54\u507f\u3002\u5982\u679c\u4ed6\u4eec\u7684\u5e10\u6237\u88ab\u505c\u7528\uff0c\u5de5\u4eba\u5c06\u6709\u80fd\u529b\u63d0\u51fa\u4e0a\u8bc9\uff0c\u5e76\u4f1a\u63a5\u53d7\u6709\u5173\u516c\u5171\u5b89\u5168\u95ee\u9898\u7684\u57f9\u8bad\u3002\u5b83\u8fd8\u5c06\u4f7f\u96f6\u5de5\u516c\u53f8\u907f\u514d\u7f34\u7eb3\u5931\u4e1a\u91d1\u6216\u793e\u4f1a\u4fdd\u969c\u91d1\uff0c\u5e76\u62d2\u7edd\u4e3a\u57fa\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u5458\u5de5\u63d0\u4f9b\u66f4\u5f3a\u6709\u529b\u7684\u6b67\u89c6\u6cd5\u5f8b\u4fdd\u62a4\uff0c\u5305\u62ec\u5728\u8865\u507f\u65b9\u9762\u3002 \uff08\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u8868\u793a\uff0c\u8be5\u5021\u8bae\u7981\u6b62\u516c\u53f8\u6839\u636e\u300a\u9a6c\u8428\u8bf8\u585e\u5dde\u6c11\u6743\u6cd5\u6848\u300b\u4fdd\u62a4\u7684\u4efb\u4f55\u7279\u5f81\u6b67\u89c6\u5de5\u4eba\uff0c\u4f46\u8be5\u5021\u8bae\u7684\u8bed\u8a00\u4e2d\u6ca1\u6709\u660e\u786e\u8bf4\u660e\u3002\uff09\u516c\u53f8\uff0c\u4ed6\u4eec\u53d8\u5f97\u66f4\u7cdf\u3002\u8fd9\u4e2a[\u63aa\u65bd]\u5c06\u5bfc\u81f4\u8d8a\u6765\u8d8a\u591a\u7684\u53f8\u673a\u66f4\u52a0\u4f9d\u8d56\u6211\u4eec\u7eb3\u7a0e\u4eba\u4e70\u5355\u7684\u793e\u4f1a\u8ba1\u5212\uff0c\u66f4\u5c11\u7684\u94b1\u8fdb\u5165\u5931\u4e1a\u57fa\u91d1\uff0c\u793e\u4f1a\u4fdd\u969c\u57fa\u91d1\u3002\u6211\u4eec\u53ea\u662f\u538c\u5026\u4e86\u8fd9\u79cd\u5265\u524a\uff0c\u201d\u4f18\u6b65\u53f8\u673a\u517c\u6ce2\u58eb\u987f\u72ec\u7acb\u53f8\u673a\u534f\u4f1a\u4e3b\u5e2d\u8d1d\u4e1d\u683c\u91cc\u83f2\u65af\u5728\u5468\u4e8c\u7531\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7ec4\u7ec7\u7684\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8bf4\u3002 \u201c\u6211\u4eec\u5bf9\u6210\u4e3a\u5de5\u4eba\u7684\u6c38\u4e45\u5b50\u9636\u7ea7\u8bf4&#39;\u4e0d&#39;\u3002\u8fd9\u592a\u8352\u8c2c\u4e86\u3002\u201d Shannon Liss-Riordan \u662f\u4e00\u4f4d\u6ce2\u58eb\u987f\u5f8b\u5e08\uff0c\u4e03\u5e74\u6765\u4e00\u76f4\u901a\u8fc7\u5404\u79cd\u8bc9\u8bbc\u5c31\u5de5\u4eba\u5206\u7c7b\u95ee\u9898\u5411 Uber \u548c Lyft \u63d0\u51fa\u6311\u6218\uff0c\u5e76\u5728\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e0a\u8b66\u544a\u8bf4\uff1a\u201c\u4ed6\u4eec\u5c06\u8bd5\u56fe\u8ba9\u8fd9\u9879\u6295\u7968\u63aa\u65bd\u83b7\u5f97\u901a\u8fc7\u3002\u901a\u8fc7\u6b3a\u9a97\u516c\u4f17\u8ba4\u4e3a\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u662f\u4e3a\u4e86\u5de5\u4eba\u7684\u5229\u76ca\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u4f18\u6b65\u3001Lyft\u3001DoorDash\u3001Instacart \u548c\u6240\u6709\u8fd9\u4e9b\u516c\u53f8\u4f1a\u5728\u8fd9\u80cc\u540e\u6295\u5165 1 \u4ebf\u7f8e\u5143\u6216\u66f4\u591a\uff0c\u9664\u975e\u662f\u4e3a\u4e86\u8ba9\u8fd9\u4e9b\u516c\u53f8\u53d7\u76ca\u5e76\u638f\u8170\u5305\uff1f\u201d\n\uff08\u8003\u8651\u5230\u8fd9\u4e9b\u516c\u53f8\u5728\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u901a\u8fc7 22 \u53f7\u63d0\u6848\u6240\u82b1\u8d39\u7684\u91d1\u989d\u4ee5\u53ca\u9a6c\u8428\u8bf8\u585e\u5dde\u7acb\u6cd5\u673a\u6784\u7684\u91cd\u8981\u6027\uff0c\u4fdd\u62a4\u5de5\u4eba\u6743\u5229\u8054\u76df\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8868\u793a\uff0c\u5b83\u4f30\u8ba1\u4ee3\u8868\u79d1\u6280\u516c\u53f8\u7684\u8054\u76df\u5c06\u82b1\u8d39\u8d85\u8fc7 1 \u4ebf\u7f8e\u5143\u7528\u4e8e\u5176\u5728\u5f53\u88ab\u95ee\u53ca\u8fc4\u4eca\u4e3a\u6b62\u8be5\u63aa\u65bd\u80cc\u540e\u6709\u591a\u5c11\u8d44\u91d1\u65f6\uff0c\u9a6c\u8428\u8bf8\u585e\u5dde\u72ec\u7acb\u5de5\u4f5c\u8054\u76df\u7684\u4e00\u4f4d\u53d1\u8a00\u4eba\u8bf4\u201c\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u4e0d\u9700\u8981\u8d21\u732e\u62a5\u544a\u3002\u201d\uff09\u4e5f\u5728\u7535\u8bdd\u4e2d\uff0c\u52b3\u5de5\u6cd5\u6559\u6388\u7ef4\u5a1c\u675c\u5df4\u5c14\u5728\u7535\u8bdd\u4e2d\u52a0\u5dde\u5927\u5b66\u9ed1\u65af\u5ef7\u65af\u5206\u6821\u548c\u52b3\u5de5\u6743\u5229\u7684\u58f0\u97f3\u5021\u5bfc\u8005\u540c\u6837\u8868\u793a\uff0c\u8fd9\u9879\u52aa\u529b\u53ef\u80fd\u4f1a\u4f9d\u8d56\u4e8e\u6df7\u4e71\u3002 \u201c\u4ed6\u4eec\u4f1a\u7ee7\u7eed\u8bf4&#39;\u6211\u4eec\u6b63\u5728\u4e3a\u8fd9\u4e9b\u5de5\u4eba\u63d0\u4f9b\u6240\u6709\u8fd9\u4e9b\u4f1f\u5927\u7684\u65b0\u798f\u5229\u548c\u798f\u5229\u3002&#39;\u4e8b\u5b9e\u4e0a\uff0c\u4ed6\u4eec\u6b63\u5728\u5265\u593a\u771f\u6b63\u9700\u8981\u4ed6\u4eec\u7684\u5de5\u4eba\u7684\u6743\u5229\uff0c\u201d\u675c\u5df4\u5c14\u8bf4\uff0c\u4ed6\u6307\u51fa\uff0c\u867d\u7136\u8fd9\u4e9b\u516c\u53f8\u5728\u901a\u8fc7\u52a0\u5dde\u6cd5\u5f8b\u4e4b\u524d\u505a\u51fa\u4e86\u627f\u8bfa\u2014\u2014\u5305\u62ec\u5982\u4f55\u4fdd\u6301\u53f8\u673a\u7684\u7075\u6d3b\u6027\u2014\u2014\u5176\u4e2d\u4e00\u4e9b\u5df2\u7ecf\u81ea\u4ece\u88ab\u6253\u7834\u4e86\u3002\u4f8b\u5982\uff0c\u7075\u6d3b\u6027\u88ab\u5439\u6367\u4e3a 22 \u53f7\u63d0\u6848\u7684\u6838\u5fc3\u9700\u6c42\uff0c\u4f18\u6b65\u4e3a\u8be5\u5dde\u7684\u53f8\u673a\u5f15\u5165\u4e86\u81ea\u884c\u5b9a\u4ef7\u7684\u80fd\u529b\u3002\u4f46\u5728 22 \u53f7\u63d0\u6848\u6210\u4e3a\u6cd5\u5f8b\u51e0\u4e2a\u6708\u540e\uff0c\u4f18\u6b65\u505c\u6b62\u5141\u8bb8\u53f8\u673a\u8fd9\u6837\u505a\u3002", "note_en": "(CNN)Last year,  Uber  (  UBER),  Lyft  (  LYFT), DoorDash and Instacart  succeeded in getting Californians to vote in favor of a ballot measure exempting them from classifying drivers and delivery workers as employees. Now, the companies are in the early stages of taking a similar approach in Massachusetts.\n The  coalition representing these gig companies, Massachusetts Coalition for Independent Work, said it filed Wednesday to have a  question put on the state&#39;s 2022 ballot that would &#34;grant historic new benefits&#34; and allow workers to &#34;maintain their flexibility as independent contractors,&#34; something it says most drivers want.\n &#34;Without the ballot measure or a legislative solution, the future of app-based rideshare and delivery could be in jeopardy,&#34; the coalition said, in language reminiscent of how dire the issue was positioned to Californians.\n      But with the benefit of seeing how things played out in California, the opposition is on its front foot this time against the playbook it believes was used last time. The Coalition to Protect Workers&#39; Rights,  an alliance that includes labor advocates and community groups, argued this week that the Massachusetts measure would &#34;permanently create a &#39;second class&#39; status&#34; for the workers, noting the majority of whom are Black, Brown and immigrants.\n   Classifying on-demand workers as employees has long been viewed as a potential existential threat to the business model popularized by Uber and Lyft. The companies have scaled their businesses with massive fleets of workers who are treated as independent contractors, avoiding the responsibility of providing costly benefits entitled to employees, such as a minimum wage, overtime, paid sick leave and unemployment insurance.\n  The companies have also shown they&#39;re prepared to go to great lengths to get themselves a more favorable law. When faced with a new labor law in California, Assembly Bill 5, that made it much harder for companies to classify workers as independent contractors in the state, Uber, Lyft, DoorDash and Instacart spent a combined $225 million on a ballot measure known as Proposition 22 or Prop 22 to effectively side-step it. They waged an aggressive campaign of  television ads,  in-app messages, and  confusing mailers to bombard Californians with its messaging. Prop 22 allows the companies to classify workers as independent contractors while granting some drivers certain benefit concessions, but not the full suite of protections that they would likely have gotten had the measure not passed and they were classified as employees.\n Next up is Massachusetts, which has a similarly strict labor law. The Massachusetts Attorney General is currently challenging Uber and Lyft  over how they classify workers, an effort the companies have indicated they intend to fight.\n Similar to Prop 22, the proposed Massachusetts ballot initiative presents a minimum earnings guarantee of &#34;120 percent of minimum wage&#34; based on &#34;engaged time,&#34; meaning the only time counted is when a driver is fulfilling a ride or delivery request but not the time they spend waiting for a gig. (An  analysis from UC Berkeley Labor Center had estimated the pay guarantee under Prop 22 for Uber and Lyft drivers would be equivalent to a wage of $5.64 per hour, instead of $15.60 or 120% of a $13 minimum wage, given such loopholes.)\n Workers would also receive $0.26 reimbursement per engaged mile to cover vehicle upkeep and gas. (The UC Berkeley Labor Center previously pointed out that Prop 22&#39;s $0.30 reimbursement is lower than the IRS&#39; estimated $0.58 per mile cost of owning and operating a vehicle.)\n While the proposal includes a health care contribution from a company for certain qualifying workers, that too is based on &#34;engaged time&#34; and only a small portion of workers would likely qualify, according to the Coalition to Protect Workers&#39; Rights, due to minimum engaged time requirements. (Using &#34;engaged time&#34; as a metric allows for the flexibility of the job, according to the Massachusetts Coalition for Independent Work, claiming that the &#34;majority of drivers receive healthcare from other sources, often from a full-time job.&#34;)\n Some workers could also earn paid sick time, paid family and medical leave, and in lieu of worker&#39;s compensation, benefits for medical and disability in cases of on-the-job injuries. Workers would have the ability to appeal if their accounts are deactivated, and would receive training on public safety issues.\n It would also let gig companies avoid contributions to unemployment or Social Security, and deny app-based workers more robust  legal protections around discrimination, including when it comes to compensation. (The Massachusetts Coalition for Independent Work said the initiative prohibits companies from discriminating against the workers on any characteristic protected by the Massachusetts Civil Rights Act, but that is not expressly stated in the initiative&#39;s language.)\n &#34;Things aren&#39;t getting better with these gig companies, they&#39;re getting worse. This [measure] is going to cause more and more drivers to be even more dependent on social programs that we taxpayers foot the bill for, less money going into the unemployment fund, the social security fund. We are just sick of this exploitation,&#34; said Beth Griffith, an Uber driver and chair of the Boston Independent Drivers Guild, on a press call Tuesday organized by the Coalition to Protect Workers&#39; Rights. &#34;We say &#39;no&#39; to being a permanent sub-class of workers. This is ridiculous.&#34;\n  Shannon Liss-Riordan, a Boston-based lawyer who has challenged Uber and Lyft over worker classification through various lawsuits for more than seven years and was also on the press call, warned: &#34;They&#39;re going to try to get this ballot measure passed by deceiving the public into thinking that this is somehow for the benefit of the workers, but why would Uber, Lyft, DoorDash, Instacart and all these companies be putting $100 million or more behind this unless it was to benefit these companies and line their pockets?&#34;\n (Given the amount the companies spent on passing Prop 22 in California and the significance of the Massachusetts legislature, a spokesperson for the Coalition to Protect Workers&#39; Rights said it estimates the coalition representing the tech companies will spend upwards of $100 million on its efforts in the state. When asked how much funding is behind the measure to date, a spokesperson for the Massachusetts Coalition for Independent Work said &#34;contribution reports are not required for some time.&#34;)\n Also on the call, Veena Dubal, a labor law professor at University of California, Hastings, and a vocal advocate for labor rights, similarly said the effort will likely rely upon confusion.\n   &#34;They will continue to say &#39;we are extending all of these great new perks and benefits to these workers.&#39; In fact, they are taking rights away from workers who really need them,&#34; said Dubal, who noted that while the companies made promises ahead of passing the California law -- including around how it would preserve flexibility for drivers -- some of these have since been broken.\n For example, flexibility was touted as a core need for Prop 22, with Uber  introducing the ability for drivers in the state to set their own prices. But months after Prop 22 became law, Uber  stopped allowing drivers to do so.", "posttime": "2021-08-08 19:59:23", "source_domain": "slashdot.org", "source_name": "slashdot", "tags": "\u63d0\u51fa,worker,\u5de5\u4eba", "title": "\u9a6c\u8428\u8bf8\u585e\u5dde\u63d0\u51fa\u7684\u65b0\u96f6\u5de5\u4f8b\u5916\u4f1a\u6539\u53d8\u5de5\u4f5c\u7684\u672a\u6765\u5417\uff1f", "title_en": "Will a New Gig Worker Exception Proposed in Massachusetts Change the Future of Work?", "transed": 1, "url": "https://www.cnn.com/2021/08/04/tech/uber-lyft-doordash-massachusetts-ballot-gig-economy/index.html", "via": "", "real_tags": ["\u63d0\u51fa", "worker", "\u5de5\u4eba"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072104, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "PDP-11 BASIC \u5206\u6790\u9879\u76ee\u65e8\u5728\u9010\u884c\u5206\u89e3\u548c\u5206\u6790 PDP-11 BASIC \u4ee3\u7801\u7684\u64cd\u4f5c\u3002\u5206\u6790\u8303\u56f4\u5f88\u5e7f\uff0c\u5e76\u4e14\u5df2\u7ecf\u53d1\u5e03\u4e86\u591a\u4e2a\u535a\u5ba2\u6761\u76ee\uff0c\u63cf\u8ff0\u4e86 BASIC \u5e94\u7528\u7a0b\u5e8f\u7684\u4e0d\u540c\u7ec4\u4ef6\u3002\u63d0\u524d\u6f84\u6e05\u4e00\u4e0b\uff0c\u8fd9\u4e0d\u662f\u4e00\u4e2a\u5173\u4e8e\u5728 PDP-11 \u4e0a\u52a0\u8f7d\u6216\u4f7f\u7528 BASIC \u7684\u9879\u76ee\u3002\u5982\u679c\u60a8\u60f3\u5728\u6a21\u62df\u73af\u5883\u4e2d\u52a0\u8f7d\u548c\u4f7f\u7528 PDP-11 BASIC\uff0c\u8bf7\u8f6c\u5230\u6b64\u5904\u3002\u5982\u679c\u60a8\u6b63\u5728\u5bfb\u627e PDP-11 BASIC \u4ee3\u7801\u7684\u9010\u884c\u53cd\u6c47\u7f16\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u8bbf\u95ee\uff1a\u7b2c 0 \u90e8\u5206\uff1aPDP-11 BASIC \u4ee3\u7801\u5728\u5f88\u5927\u7a0b\u5ea6\u4e0a\u4f9d\u8d56\u4e8e\u8f6f\u4ef6 TRAP \u7684\u4f7f\u7528\u3002\u5728\u672c\u7cfb\u5217\u7684\u4efb\u4f55\u5176\u4ed6\u90e8\u5206\u53d8\u5f97\u6709\u610f\u4e49\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5bf9\u8fd9\u4e9b\u6709\u4e00\u4e2a\u6e05\u6670\u800c\u7b80\u6d01\u7684\u7406\u89e3\u3002\u6b64\u5916\uff0c\u672c\u6587\u8fd8\u4ecb\u7ecd\u4e86 PDP-11 BASIC \u7528\u4e8e\u5c06 TRAP\u201c\u8def\u7531\u201d\u5230\u4e0d\u540c\u5904\u7406\u5b50\u4f8b\u7a0b\u7684\u4ee3\u7801\u3002\u7b2c 1 \u90e8\u5206\uff1a\u5206\u6790 TTY \u4e2d\u65ad\u5904\u7406\u4f8b\u7a0b\u3001TRAP 0\u3001TRAP 2 \u548c TRAP 66\u3002 \u7b2c 5 \u90e8\u5206\uff1a\u89e3\u91ca\u957f\u683c\u5f0f\u9009\u9879\u5bf9\u8bdd\u6846\u7684\u64cd\u4f5c\u3001\u5185\u5b58\u548c\u78c1\u5e26\u9605\u8bfb\u5668\u914d\u7f6e\u3001\u5220\u9664\u6269\u5c55\u51fd\u6570\u3001\u52a0\u8f7d EXF \u51fd\u6570\u3001\u8df3\u8f6c\u5230\u663e\u793a\u201cREADY\u201d\u5e76\u8fdb\u5165\u8bed\u6cd5\u89e3\u6790\u5faa\u73af\u3002\n\u7b2c 6 \u90e8\u5206\uff1a\u901a\u8fc7\u67e5\u770b\u884c\u53f7\u7684\u6807\u8bc6\u3001\u786e\u5b9a\u5df2\u8f93\u5165\u54ea\u4e2a\u547d\u4ee4\u4ee5\u53ca BASIC \u547d\u4ee4\u7684\u6807\u8bb0\u6765\u5f00\u59cb\u5206\u6790\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u3002\u7b2c7\u90e8\u5206\uff1a\u5206\u6790TRAP 74\u3001TRAP 76\u3001TRAP 102\u548cTRAP 104\u3002\u8fd9\u4e9b\u5728\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u5206\u6790\u7684\u7b2c\u4e8c\u90e8\u5206\u4e2d\u4f7f\u7528\u3002\u7b2c 8 \u90e8\u5206\uff1a\u63cf\u8ff0\u8bed\u6cd5\u89e3\u6790\u4ee3\u7801\u7684\u5176\u4f59\u90e8\u5206\u3001\u7acb\u5373\u6a21\u5f0f\u4e0b BASIC \u547d\u4ee4\u7684\u6267\u884c\u4ee5\u53ca\u5ef6\u8fdf\u6a21\u5f0f\u4e0b BASIC \u547d\u4ee4\u7684\u5b58\u50a8\u3002\u7b2c 11 \u90e8\u5206\uff1a\u63cf\u8ff0 BASIC \u8fd0\u884c\u65f6\u72b6\u6001\u5b58\u50a8\u6a21\u578b\u5e76\u8be6\u7ec6\u68c0\u67e5 TRAP 130\u3001TRAP 122\u3001TRAP 112 \u548c TRAP 114\u3002\u7b2c 12 \u90e8\u5206\uff1a\u5206\u6790 GOTO\u3001GOSUB \u548c RETURN BASIC \u547d\u4ee4\uff0c\u4ee5\u53ca TRAP 120 \u548c TRAP 134\u3002\u7b2c 13 \u90e8\u5206\uff1a\u901a\u8fc7\u68c0\u67e5 TRAP 64\u3001TRAP 14 \u548c TRAP 12 \u8be6\u7ec6\u89e3\u91ca\u6574\u6570\u5230 ASCII \u529f\u80fd\u7684\u64cd\u4f5c\u3002\u7b2c 14 \u90e8\u5206\uff1a\u68c0\u67e5 PDP-11 BASIC \u4e2d\u6d6e\u70b9\u6570\u7684\u7ed3\u6784\u5e76\u67e5\u770b TRAP 36 \u548c TRAP 40\u3002\n\u7b2c 15 \u90e8\u5206\uff1a\u8fd9\u7bc7\u6587\u7ae0\u7814\u7a76\u4e86\u4e00\u4e9b\u6d6e\u70b9\u8fd0\u7b97\uff1b TRAP 24\uff08\u53d6\u53cd\u4e00\u4e2a\u6d6e\u70b9\u6570\uff09\u3001TRAP 20\uff08\u52a0\u4e24\u4e2a\u6d6e\u70b9\u6570\uff09\u548c TRAP 22\uff08\u51cf\u53bb\u4e24\u4e2a\u6d6e\u70b9\u6570\uff09\u3002\u7b2c 16 \u90e8\u5206\uff1a\u68c0\u67e5\u4e58\u6cd5\u4ee3\u7801\uff1b TRAP 62\uff0832 \u4f4d\u6574\u6570\u4e58\u6cd5\uff09\u3001TRAP 16\uff0816 \u4f4d\u6574\u6570\u4e58\u6cd5\uff09\u548c TRAP 30\uff08\u6d6e\u70b9\u4e58\u6cd5\uff09\u3002\u7b2c 17 \u90e8\u5206\uff1a\u8fd9\u7bc7\u6587\u7ae0\u5c06\u4ecb\u7ecd\u4e00\u4e9b\u66f4\u591a\u7684\u6d6e\u70b9\u64cd\u4f5c\u9677\u9631\uff1b TRAP 26\uff08\u6d6e\u70b9\u9664\u6cd5\uff09\u548c TRAP 34\uff08\u6d6e\u70b9\u6bd4\u8f83\uff09\u3002 TRAP 34 \u4f7f\u7528\u7684 TRAP 54 \u4e5f\u4e0e TRAP 32 \u4e00\u8d77\u63cf\u8ff0\u3002 \u7b2c 19 \u90e8\u5206\uff1a\u4ecb\u7ecd\u7528\u6237\u5b9a\u4e49\u7684\u51fd\u6570\u5e76\u63cf\u8ff0 BASIC DEF \u547d\u4ee4\uff0c\u4ee5\u53ca\u4e00\u4e9b\u652f\u6301\u5176\u64cd\u4f5c\u7684 TRAP\uff08TRAP 140\u3001TRAP 126 \u548c TRAP 110)\u3002\u7b2c 20 \u90e8\u5206\uff1a\u63cf\u8ff0\u7528\u4e8e\u7ba1\u7406\u5806\u6808\u4e0a\u548c\u8fd0\u884c\u65f6\u72b6\u6001\u5b58\u50a8\u4e2d\u7684\u6d6e\u70b9\u53d8\u91cf\u7684 TRAP \u7684\u64cd\u4f5c\u3002\u6211\u4eec\u5c06\u7814\u7a76 TRAP 142\u3001TRAP 150\u3001TRAP 146\u3001TRAP 144 \u548c TRAP 132\u3002\u7b2c 21 \u90e8\u5206\uff1a\u5206\u6790\u6570\u5b66\u8868\u8fbe\u5f0f\u6c42\u503c\u4ee3\u7801\u3002\u8868\u8fbe\u5f0f\u65e0\u5904\u4e0d\u5728\uff0c\u89e3\u6790\u5b83\u4eec\u7684\u4e3b\u8981\u5165\u53e3\u70b9\u662f TRAP 136\u3002\u7b2c 22 \u90e8\u5206\uff1a\u63cf\u8ff0 TRAP 124 \u7684\u64cd\u4f5c\u548c BASIC DIM \u548c LET \u547d\u4ee4\uff0c\u4ee5\u53ca DATA \u548c REM \u547d\u4ee4\u3002\n\u8fd9\u4e2a\u9879\u76ee\u4ecd\u5728\u8fdb\u884c\u4e2d\uff0c\u6240\u4ee5\u6211\u4f1a\u5728\u6dfb\u52a0\u65b0\u7684\u5206\u6790\u90e8\u5206\u65f6\u4fdd\u6301\u8fd9\u4e2a\u9875\u9762\u7684\u6700\u65b0\u72b6\u6001\u3002", "note_en": "The PDP-11 BASIC Analysis project is an effort to disassemble and analyse line-by-line the operation of the PDP-11 BASIC code. The analysis is extensive and multiple blog entries have been posted describing different components of the BASIC application.\n  A couple of clarifications in advance, this is not a project about loading or using BASIC on the PDP-11.\n  If you want to load and use PDP-11 BASIC in an emulated environment, go   here.\n  If, you&#39;re looking for a line-by-line disassembly of the PDP-11 BASIC code, here you go:\n  Part 0: The PDP-11 BASIC code relies heavily on the use of software TRAPs. You need a clear and concise understanding of these before any of the rest of this series is going to make sense. Also, this article describes the code used by PDP-11 BASIC to &#34;route&#34; TRAPs to different handling subroutines.\n  Part 1: Analyses the TTY interrupt handling routines, TRAP 0, TRAP 2 and TRAP 66.\n        Part 5: Explains the operation of the long-form options dialog, the memory and tape reader configuration, deleting the extended functions, loading the EXF function, jumping to display &#34;READY&#34; and entering the syntax parsing loop.\n  Part 6: Starts the analysis of the syntax parsing code by looking at the identification of line numbers, determining which command has been entered and the tokenising of the BASIC command.\n  Part 7: Analyses TRAP 74, TRAP 76, TRAP 102 and TRAP 104. These are used in the second part of the syntax parsing code analysis.\n  Part 8: Describes the remainder of the syntax parsing code, the execution of BASIC commands in immediate mode and the storage of BASIC commands in deferred mode.\n      Part 11: Describes the BASIC runtime state storage model and examines in detail TRAP 130, TRAP 122, TRAP 112 and TRAP 114.\n  Part 12: Analyses the GOTO, GOSUB and RETURN BASIC commands, as well as TRAP 120 and TRAP 134.\n  Part 13: Explains in detail the operation of the integer-to-ASCII functionality by examining TRAP 64, TRAP 14 and TRAP 12.\n  Part 14: Examines the structure of floating point numbers in PDP-11 BASIC and looks at TRAP 36 and TRAP 40.\n  Part 15: This post examines some of the floating point operations; TRAP 24 (negatate a floating point number), TRAP 20 (add two floating point numbers) and TRAP 22 (subtract two floating point numbers).\n  Part 16: Examines the multiplication code; TRAP 62 (32-bit integer multiplication), TRAP 16 (16-bit integer multiplication) and TRAP 30 (floating point multiplication).\n  Part 17: This post will take a look at some more floating point manipulation TRAPs; TRAP 26 (floating point division) and TRAP 34 (floating point comparison). TRAP 54, which is used by TRAP 34, is also described, along with TRAP 32.\n    Part 19: Introduces user-defined functions and describes the BASIC DEF command, along with some TRAPs that support its operation (TRAP 140, TRAP 126 and TRAP 110).\n  Part 20: Describe the operation of TRAPs that are used to manage floating point variables on the stack and in the runtime state storage. We&#39;ll be looking at TRAP 142, TRAP 150, TRAP 146, TRAP 144 and TRAP 132.\n  Part 21: Analyses the mathemetical expression evaluation code. Expressions are used all over the place and the main entry point to parsing them is TRAP 136.\n  Part 22: Describes the operation of TRAP 124 and the BASIC DIM and LET commands, as well as the DATA and REM commands.\n  This project is still underway, so I will keep this page up to date as I add new parts of the analysis.", "posttime": "2021-08-08 19:54:01", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5206\u6790,analysis,trap", "title": "PDP-11 \u57fa\u7840\u5206\u6790\u9879\u76ee", "title_en": "The PDP-11 Basic Analysis Project", "transed": 1, "url": "https://www.learningpdp11.com/pdp-11-basic-analysis", "via": "", "real_tags": ["\u5206\u6790", "analysis", "trap"]}, {"category": "", "categoryclass": "", "imagename": "fdf709714e0078137b2122afe0202c6c.png", "infoid": 1072103, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u6b22\u8fce\u6765\u5230\u6211\u7684\u4e2a\u4eba\u7f51\u7ad9\u548c\u535a\u5ba2\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u627e\u5230\u5173\u4e8e\u6211\u7684\u4e00\u4e9b\u4fe1\u606f\u3001\u8054\u7cfb\u65b9\u5f0f\u3001\u793e\u4ea4\u5a92\u4f53\u94fe\u63a5\u4ee5\u53ca\u6211\u7684\u535a\u6587", "note_en": "Welcome to my personal website and blog, here you can find some information about me, contact, social media links as well as    my blog posts", "posttime": "2021-08-08 19:53:40", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "python,operator,features,\u6765\u5230", "title": "Python \u7684 `operator` \u6a21\u5757\u7684\u672a\u77e5\u7279\u6027", "title_en": "The unknown features of Python's `operator` module", "transed": 1, "url": "https://martinheinz.dev/blog/54", "via": "", "real_tags": ["python", "operator", "features", "\u6765\u5230"]}]