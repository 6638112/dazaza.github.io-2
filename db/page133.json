[{"category": "", "categoryclass": "", "imagename": "9f7d2389e187cdabe6f0dab242ec177b.png", "infoid": 1072142, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u5728 Grapl\uff0c\u6211\u4eec\u76f8\u4fe1\u4e3a\u4e86\u6784\u5efa\u6700\u597d\u7684\u9632\u5fa1\u7cfb\u7edf\uff0c\u6211\u4eec\u9700\u8981\u6df1\u5165\u4e86\u89e3\u653b\u51fb\u8005\u7684\u884c\u4e3a\u3002\u4f5c\u4e3a\u8be5\u76ee\u6807\u7684\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u6b63\u5728\u6295\u8d44\u8fdb\u653b\u6027\u5b89\u5168\u7814\u7a76\u3002\u7ee7\u7eed\u5173\u6ce8\u6211\u4eec\u7684\u535a\u5ba2\uff0c\u4e86\u89e3\u6709\u5173\u9ad8\u98ce\u9669\u6f0f\u6d1e\u3001\u6f0f\u6d1e\u5229\u7528\u548c\u9ad8\u7ea7\u5a01\u80c1\u7b56\u7565\u7684\u65b0\u7814\u7a76\u3002\u5728\u6b64\u5904\u67e5\u627e\u5df2\u53d1\u5e03\u7684 CVE-2021-3490 \u7684\u672c\u5730\u63d0\u6743 (LPE) \u6982\u5ff5\u8bc1\u660e\uff1ahttps://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490\u3002\u5b83\u9488\u5bf9 Ubuntu 20.10 (Groovy Gorilla) \u5185\u6838 5.8.0-25.26 \u5230 5.8.0-52.58\u3002\u548c Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17\u3002\u8fd9\u7bc7\u535a\u6587\u65e8\u5728\u4ece\u6f0f\u6d1e\u5229\u7528\u5f00\u53d1\u4eba\u5458\u7684\u89d2\u5ea6\u8be6\u7ec6\u6982\u8ff0 eBPF\u3002\u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4ecb\u7ecd\u4e86\uff1a\u6211\u5bf9 eBPF \u4e00\u65e0\u6240\u77e5\u3002\u6211\u5e0c\u671b\u901a\u8fc7\u5206\u4eab\u4e00\u4e2a PoC \u4ee5\u53ca\u6211\u7684\u5f00\u53d1\u7ecf\u9a8c\uff0c\u5b83\u53ef\u4ee5\u5e2e\u52a9\u5176\u4ed6\u4eba\u5f00\u59cb\u4f7f\u7528 eBPF\u3002 Berkeley Packet Filter (BPF) \u6700\u521d\u662f\u4f5c\u4e3a\u5728\u5185\u6838\u4e2d\u6267\u884c\u6570\u636e\u5305\u8fc7\u6ee4\u7684\u4e00\u79cd\u65b9\u5f0f\u800c\u521b\u5efa\u7684\u3002\u5b83\u7684\u529f\u80fd\u540e\u6765\u88ab\u91cd\u65b0\u8bbe\u8ba1\u548c\u6269\u5c55\uff0c\u4ee5\u521b\u5efa\u6269\u5c55\u7684\u4f2f\u514b\u5229\u6570\u636e\u5305\u8fc7\u6ee4\u5668 (eBPF) [1]\u3002\u7b80\u800c\u8a00\u4e4b\uff0ceBPF \u4e3a\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u65e0\u9700\u7f16\u5199\u5185\u6838\u6a21\u5757\u5373\u53ef\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u7684\u65b9\u6cd5\u3002\u4f7f\u7528 eBPF \u4e0e\u5185\u6838\u6a21\u5757\u76f8\u6bd4\u7684\u6240\u8c13\u597d\u5904\u662f\u6613\u7528\u6027\u3001\u7a33\u5b9a\u6027\u548c\u5b89\u5168\u6027\u3002\u4e0e\u7eaf\u7528\u6237\u6a21\u5f0f\u7a0b\u5e8f\u76f8\u6bd4\uff0c\u901a\u8fc7\u76f4\u63a5\u5728\u5185\u6838\u4e2d\u6267\u884c\u67d0\u4e9b\u4efb\u52a1\u8fd8\u53ef\u4ee5\u83b7\u5f97\u6027\u80fd\u6539\u8fdb\u3002 eBPF \u7a0b\u5e8f\u7528\u4e8e\u505a\u5f88\u591a\u4e8b\u60c5\uff0c\u4f8b\u5982\uff1a\u8ddf\u8e2a\u3001\u68c0\u6d4b\u3001\u6302\u94a9\u7cfb\u7edf\u8c03\u7528\u3001\u8c03\u8bd5\uff0c\u5f53\u7136\u8fd8\u6709\u6570\u636e\u5305\u6355\u83b7/\u8fc7\u6ee4\u3002 eBPF \u7a0b\u5e8f\u662f\u7528\u9ad8\u7ea7\u8bed\u8a00\u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u5de5\u5177\u94fe\uff08\u4f8b\u5982 BCC [18]\uff09\u7f16\u8bd1\u6210 eBPF \u5b57\u8282\u7801\u3002 eBPF VM \u4f7f\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6307\u4ee4\u96c6\uff0c\u8be5\u6307\u4ee4\u96c6\u4f7f\u7528 11 \u4e2a* 64 \u4f4d\u5bc4\u5b58\u5668\u3001\u4e00\u4e2a\u7a0b\u5e8f\u8ba1\u6570\u5668\u548c\u4e00\u4e2a 512 \u5b57\u8282\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6808\u3002\u4e5d\u4e2a\u5bc4\u5b58\u5668\u662f\u901a\u7528\u8bfb\u5199\uff0c\u4e00\u4e2a\u662f\u53ea\u8bfb\u5806\u6808\u6307\u9488\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u9690\u5f0f\u7684 [2] \u3002\u6307\u4ee4\u96c6\u4e0e x86 \u7c7b\u4f3c\uff0c\u53ef\u5bf9 64 \u4f4d\u548c 32 \u4f4d\u503c\u8fdb\u884c\u64cd\u4f5c\u3002\n*\u4ece\u6280\u672f\u4e0a\u8bb2\uff0c\u5b83\u4f7f\u7528\u4e86 12 \u4e2a\u5bc4\u5b58\u5668\uff0c\u4f46\u7b2c 12 \u4e2a\u5bc4\u5b58\u5668\u662f\u4e00\u4e2a\u8f85\u52a9\u5bc4\u5b58\u5668\uff0c\u4ec5\u7528\u4e8e\u6267\u884c ALU \u536b\u751f\u64cd\u4f5c [12]\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4f7f\u7528 bpf() [14] \u7cfb\u7edf\u8c03\u7528\u5c06\u5b57\u8282\u7801\u52a0\u8f7d\u5230\u5185\u6838\u4e2d\uff0c\u5176\u4e2d eBPF \u9a8c\u8bc1\u5668\u5c06\u6267\u884c\u8bb8\u591a\u68c0\u67e5\u4ee5\u786e\u4fdd\u7a0b\u5e8f\u5728\u5185\u6838\u4e2d\u201c\u5b89\u5168\u201d\u8fd0\u884c\u3002\u8fd9\u4e2a\u9a8c\u8bc1\u6b65\u9aa4\u5f88\u5173\u952e\u2014\u2014eBPF \u4e3a\u975e\u7279\u6743\u7528\u6237\u516c\u5f00\u4e86\u4e00\u6761\u5728 ring0 \u4e2d\u6267\u884c\u7684\u8def\u5f84\u3002\u52a0\u8f7d\u7a0b\u5e8f\u540e\uff0c\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u5c06\u7a0b\u5e8f\u9644\u52a0\u5230\u201c\u6302\u94a9\u70b9\u201d\u3002\u6302\u94a9\u70b9\u662f\u5185\u6838\u4e2d\u53ef\u4ee5\u9644\u52a0 eBPF \u7a0b\u5e8f\u7684\u5730\u65b9 [5]\u3002 eBPF \u7a0b\u5e8f\u662f\u4e8b\u4ef6\u9a71\u52a8\u7684\uff0c\u8fd9\u610f\u5473\u7740\u7a0b\u5e8f\u5c06\u5728\u6302\u94a9\u70b9\u53d1\u751f\u67d0\u4e9b\u4e8b\u4ef6\u65f6\u6267\u884c\u3002\u7ecf\u5178\u7528\u4f8b\u662f\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u5957\u63a5\u5b57\uff0c\u5f53\u6570\u636e\u5199\u5165\u65f6\u7a0b\u5e8f\u5c06\u5728\u5957\u63a5\u5b57\u4e2d\u6267\u884c\u3002\u5982\u679c\u8bbe\u7f6e\u4e86 kconfig \u65cb\u94ae CONFIG_BPF_JIT\uff0c\u5219 eBPF \u7a0b\u5e8f\u5728\u9a8c\u8bc1\u548c\u52a0\u8f7d\u540e\u4f1a\u88ab JIT \u7f16\u8bd1\u4e3a\u539f\u751f\u6c47\u7f16\u6307\u4ee4\u3002\u5426\u5219\uff0c\u5f53\u7a0b\u5e8f\u6267\u884c\u65f6\uff0c\u5b83\u4f1a\u5728 eBPF \u89e3\u91ca\u5668\u4e2d\u8fd0\u884c\uff0c\u8be5\u89e3\u91ca\u5668\u89e3\u7801\u5e76\u6267\u884c eBPF \u5b57\u8282\u7801\u6307\u4ee4\u3002\u7528\u6237\u6a21\u5f0f\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u548c eBPF \u8f85\u52a9\u51fd\u6570\u4e0e\u5185\u6838\u4e2d\u8fd0\u884c\u7684 eBPF \u7a0b\u5e8f\u4ea4\u4e92\u5e76\u4ece\u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u8fd9\u4e9b\u51fd\u6570\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u8fdb\u884c\u8bbf\u95ee\u3002 sysctl \u65cb\u94ae kernel.unprivileged_bpf_disabled \u51b3\u5b9a\u662f\u5426\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u8fd0\u884c eBPF \u7a0b\u5e8f\u3002\u5982\u679c\u672a\u8bbe\u7f6e\uff0c\u5219\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5c06 eBPF \u7a0b\u5e8f\u9644\u52a0\u5230\u7528\u6237\u62e5\u6709\u7684\u5957\u63a5\u5b57\u3002\u5728\u8bb8\u591a Linux \u53d1\u884c\u7248\u4e2d\uff0c\u4f8b\u5982 Ubuntu\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u672a\u542f\u7528 unprivileged_bpf_disabled\u3002\u56e0\u6b64\uff0c\u6211\u51b3\u5b9a\u66f4\u4ed4\u7ec6\u5730\u7814\u7a76 eBPF\uff0c\u56e0\u4e3a\u5141\u8bb8\u975e\u7279\u6743\u7528\u6237\u5728\u5185\u6838\u4e2d\u8fd0\u884c\u4ee3\u7801\u662f\u4e00\u4e2a\u6210\u719f\u7684\u653b\u51fb\u9762\u3002\u6211\u5728\u4e0a\u9762\u63d0\u5230\u8fc7\uff0c\u7528\u6237\u6a21\u5f0f\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528 eBPF \u6620\u5c04\u4e0e\u5185\u6838\u4e2d\u7684 eBPF \u7a0b\u5e8f\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u4eec\u4e5f\u53ef\u4ee5\u88ab\u591a\u4e2a eBPF \u7a0b\u5e8f\u7528\u6765\u76f8\u4e92\u4ea4\u4e92\u3002\u5b83\u4eec\u662f\u5177\u6709\u4efb\u610f\u6570\u636e\u7ed3\u6784\u7684\u901a\u7528\u952e/\u503c\u5b58\u50a8 [6]\u3002\u6709\u591a\u79cd\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5305\u62ec\uff1a\u6570\u7ec4\u3001\u961f\u5217\u548c\u5806\u6808\u3002\nkey_size - \u7528\u4e8e\u7d22\u5f15\u5143\u7d20\u7684\u952e\u7684\u5b57\u8282\u5927\u5c0f\uff08\u7528\u4e8e\u6570\u7ec4\u6620\u5c04\uff09 map_flags - \u63cf\u8ff0\u6620\u5c04\u7684\u7279\u6b8a\u7279\u6027\uff0c\u4f8b\u5982\u662f\u5426\u5e94\u8be5\u9884\u5148\u5206\u914d\u6574\u4e2a\u6620\u5c04\u5185\u5b58\u3002\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u547d\u4ee4\u901a\u8fc7 bpf() \u7cfb\u7edf\u8c03\u7528\u4ece\u7528\u6237\u7a7a\u95f4\u521b\u5efa\u548c\u66f4\u6539 eBPF \u6620\u5c04\uff0c\u4f7f\u7528 BPF_MAP_UPDATE_ELEM \u547d\u4ee4\u66f4\u65b0\uff0c\u5e76\u4f7f\u7528 BPF_MAP_LOOKUP_ELEM \u547d\u4ee4\u68c0\u7d22\u5176\u5185\u5bb9\u3002 eBPF \u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528 BPF_MAP_CREATE \u8fd4\u56de\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u5e76\u8c03\u7528 eBPF \u8f85\u52a9\u51fd\u6570\u6765\u8bbf\u95ee eBPF \u6620\u5c04\uff0c\u8be5\u51fd\u6570\u5c06\u8fd4\u56de\u6307\u5411\u6620\u5c04\u4e2d\u503c\u7684\u6307\u9488\u3002\u6211\u7f16\u5199\u7684\u6f0f\u6d1e\u5229\u7528\u4e86 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u4e00\u4e2a\u9519\u8bef\u3002\u56e0\u6b64\uff0c\u5728\u6df1\u5165\u7814\u7a76\u6f0f\u6d1e\u4e4b\u524d\uff0c\u91cd\u8981\u7684\u662f\u7b80\u8981\u89e3\u91ca\u9a8c\u8bc1\u5668\u7684\u5185\u90e8\u7ed3\u6784\u3002\u9a8c\u8bc1\u5668\u9996\u5148\u6784\u5efa\u7a0b\u5e8f\u7684\u63a7\u5236\u6d41\u56fe\u3002\u7136\u540e\uff0c\u5b83\u5c06\u901a\u8fc7\u6bcf\u4e2a\u53ef\u80fd\u7684\u63a7\u5236\u6d41\u6765\u9a8c\u8bc1\u6bcf\u6761\u6307\u4ee4\u662f\u5426\u6709\u6548\u4ee5\u53ca\u6240\u6709\u5185\u5b58\u8bbf\u95ee\u90fd\u662f\u5b89\u5168\u7684 [3]\u3002\u4e4b\u540e\uff0c\u5b83\u5c06\u5411\u7a0b\u5e8f\u6dfb\u52a0\u8fd0\u884c\u65f6\u68c0\u67e5\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a ALU Sanitation\uff0c\u5c06\u8865\u4e01\u63d2\u5165 eBPF \u5b57\u8282\u7801\uff0c\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u6307\u9488\u8fd0\u7b97\u65f6\u4e0d\u4f1a\u8fdd\u53cd\u8fd0\u884c\u65f6\u5141\u8bb8\u7684\u5185\u5b58\u8303\u56f4 [4]\u3002\u4e0d\u80fd\u6267\u884c\u6307\u9488\u6bd4\u8f83\uff0c\u53ea\u80fd\u5411\u6307\u9488\u6dfb\u52a0\u6216\u51cf\u53bb\u6807\u91cf\u503c\u3002 eBPF \u9a8c\u8bc1\u5668\u4e2d\u7684\u6807\u91cf\u503c\u662f\u4efb\u4f55\u4e0d\u662f\u4ece\u6307\u9488\u6d3e\u751f\u7684\u503c\u3002\u9a8c\u8bc1\u5668\u8ddf\u8e2a\u54ea\u4e9b\u5bc4\u5b58\u5668\u5305\u542b\u6307\u9488\uff0c\u54ea\u4e9b\u5305\u542b\u6807\u91cf\u503c\u3002\u6307\u9488\u8fd0\u7b97\u4e0d\u80fd\u79bb\u5f00\u5730\u56fe\u7684\u201c\u5b89\u5168\u201d\u8fb9\u754c\u3002\u610f\u601d\u662f\uff0c\u7a0b\u5e8f\u65e0\u6cd5\u8bbf\u95ee\u9884\u5b9a\u4e49\u5730\u56fe\u5185\u5b58\u4e4b\u5916\u7684\u4efb\u4f55\u5185\u5bb9\u3002\u4e3a\u6b64\uff0c\u9a8c\u8bc1\u5668\u4f1a\u8ddf\u8e2a\u6bcf\u4e2a\u5bc4\u5b58\u5668\u7684\u503c\u7684\u4e0a\u9650\u548c\u4e0b\u9650\u3002\n\u6307\u9488\u4e0d\u80fd\u5b58\u50a8\u5728\u6620\u5c04\u4e2d\u6216\u5b58\u50a8\u4e3a\u8fd4\u56de\u503c\uff0c\u4ee5\u907f\u514d\u5185\u6838\u5730\u5740\u6cc4\u6f0f\u5230\u7528\u6237\u7a7a\u95f4\u3002\u9a8c\u8bc1\u5668\u4e3a\u6bcf\u4e2a\u53ef\u80fd\u7684\u6267\u884c\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u5bc4\u5b58\u5668\u5b58\u50a8\u4ee5\u4e0b\u8fb9\u754c\u503c\uff0c\u4ee5\u786e\u4fdd\u6ca1\u6709\u8d8a\u754c\u5185\u5b58\u8bbf\u95ee\uff1a umin_value \uff0c umax_value \u5b58\u50a8\u88ab\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\u65f6\u7684\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c (64 bit) \u6574\u6570 smin_value \uff0c smax_value \u5728\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0864 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 u32_min_value , u32min_value \u5728\u89e3\u91ca\u4e3a\u65e0\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u3002 s32_min_value , s32_max_value \u5b58\u50a8\u5bc4\u5b58\u5668\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\uff0c\u5f53\u89e3\u91ca\u4e3a\u6709\u7b26\u53f7\uff0832 \u4f4d\uff09\u6574\u6570\u65f6\u3002 var_off \u5305\u542b\u6709\u5173\u5df2\u77e5\u5bc4\u5b58\u5668\u4f4d\u7684\u4fe1\u606f\u3002\u5b83\u5b58\u50a8\u5728\u4e00\u4e2a\u540d\u4e3a tnum \u7684\u7ed3\u6784\u4e2d\uff0c\u8be5\u7ed3\u6784\u5305\u542b\u4e24\u4e2a 64 \u4f4d\u5b57\u6bb5\uff1a mask \u548c value \u3002\u5728\u63a9\u7801\u4e2d\u8bbe\u7f6e\u7684\u6bcf\u4e00\u4f4d\u90fd\u610f\u5473\u7740\u8be5\u4f4d\u7684\u503c\u662f\u672a\u77e5\u7684\u3002\u672a\u8bbe\u7f6e\u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u5b83\u4eec\u7684\u771f\u5b9e\u503c\u5b58\u50a8\u5728 value \u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c var_off = {mask = 0x0; value = 0x1} \uff0c\u5bc4\u5b58\u5668\u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff0c\u5e76\u4e14\u5df2\u77e5\u5bc4\u5b58\u5668\u7684\u503c\u4e3a1\u3002\u5982\u679cvar_off = {mask = 0xFFFFFFFF00000000; value = 0x3} \u8868\u793a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\u4e3a 0x00000003\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\n\u8fd9\u4e9b\u8fb9\u754c\u7528\u4e8e\u76f8\u4e92\u66f4\u65b0\u3002\u7279\u522b\u662f\uff0c\u5982\u679c var_off \u6307\u793a\u5bc4\u5b58\u5668\u662f\u5df2\u77e5\u5e38\u6570\uff0c\u5219\u66f4\u65b0\u6700\u5c0f/\u6700\u5927\u754c\u9650\u4ee5\u53cd\u6620\u5df2\u77e5\u503c\u3002\u6211\u4eec\u7a0d\u540e\u4f1a\u770b\u5230\u4e3a\u4ec0\u4e48\u8fd9\u5f88\u91cd\u8981\uff01 ALU Sanitation \u662f\u4e00\u9879\u529f\u80fd\uff0c\u7528\u4e8e\u8865\u5145\u9a8c\u8bc1\u5668\u7684\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u3002\u5982\u679c\u5bc4\u5b58\u5668\u7684\u503c\u5728\u8fd0\u884c\u65f6\u672a\u843d\u5728\u5176\u9884\u671f\u8303\u56f4\u5185\uff0c\u5219\u8be5\u60f3\u6cd5\u662f\u4e3a\u4e86\u9632\u6b62 OOB \u5185\u5b58\u8bbf\u95ee\u3002\u6dfb\u52a0\u6b64\u529f\u80fd\u662f\u4e3a\u4e86\u5e2e\u52a9\u51cf\u8f7b\u9a8c\u8bc1\u5668\u4e2d\u7684\u6f5c\u5728\u6f0f\u6d1e\u5e76\u9632\u6b62\u6295\u673a\u653b\u51fb\u3002\u5bf9\u4e8e\u6d89\u53ca\u6307\u9488\u548c\u6807\u91cf\u5bc4\u5b58\u5668\u7684\u6bcf\u4e2a\u7b97\u672f\u8fd0\u7b97\uff0c\u90fd\u4f1a\u8ba1\u7b97 alu_limit\u3002\u8fd9\u8868\u793a\u53ef\u4ee5\u6dfb\u52a0\u5230\u6307\u9488\u6216\u4ece\u6307\u9488\u4e2d\u51cf\u53bb\u7684\u6700\u5927\u7edd\u5bf9\u503c [4]\u3002\u5728\u8fd9\u4e9b\u64cd\u4f5c\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e4b\u524d\uff0c\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u4fee\u8865\u5b57\u8282\u7801\uff1a *patch ++ = BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) \uff1b *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_SUB , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_OR , BPF_REG_AX , off_reg ) ; *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_NEG, BPF_REG_AX, 0); *\u8865\u4e01++ = BPF_ALU64_IMM (BPF_ARSH, BPF_REG_AX, 63); *\u8865\u4e01++ = BPF_ALU64_REG ( BPF_AND , BPF_REG_AX , off_reg ) ;\u6ce8\u610foff_reg \u4ee3\u8868\u88ab\u6dfb\u52a0\u5230\u6307\u9488\u5bc4\u5b58\u5668\u7684\u6807\u91cf\u5bc4\u5b58\u5668\uff0cBPF_REG_AUX \u4ee3\u8868\u8f85\u52a9\u5bc4\u5b58\u5668\u3002\u8fd0\u884c\u65f6 off_reg \u7684\u503c\u4ece alu_limit \u4e2d\u51cf\u53bb\u5e76\u5b58\u50a8\u5230 BPF_REG_AX \u4e2d\u3002\u5982\u679c off_reg &gt; alu_limit \uff0c\u5219\u8bbe\u7f6e BPF_REG_AX \u7684\u6700\u9ad8\u4f4d\uff08\u7b26\u53f7\u4f4d\uff09\u3002\u5982\u679c BPF_REG_AUX \u4e2d\u5b58\u50a8\u7684\u5dee\u503c\u4e3a\u6b63\uff0coff_reg \u4e3a\u8d1f\uff0c\u8868\u793a alu_limit \u548c\u5bc4\u5b58\u5668\u7684\u503c\u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 BPF_OR \u64cd\u4f5c\u5c06\u8bbe\u7f6e\u7b26\u53f7\u4f4d\u3002\nBPF_NEG \u64cd\u4f5c\u5c06\u5426\u5b9a\u7b26\u53f7\u4f4d\u3002\u5982\u679c\u8bbe\u7f6e\u4e86\u7b26\u53f7\u4f4d\uff0c\u5219\u4e3a 0\uff0c\u5426\u5219\u4e3a 1\u3002 BPF_ARSH \u64cd\u4f5c\u8fdb\u884c 63 \u4f4d\u7b97\u672f\u53f3\u79fb\u3002\u8fd9\u5c06\u7528\u5168 0 \u6216 1\uff08\u7b26\u53f7\u4f4d\u7684\u503c\uff09\u586b\u5145 BPF_REG_AX\u3002\u6839\u636e\u4e0a\u8ff0\u64cd\u4f5c\u7684\u7ed3\u679c\uff0cBPF_AND \u64cd\u4f5c\u8981\u4e48\u5c06 off_reg \u7f6e\u7a7a\uff0c\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\u3002\u8fd9\u610f\u5473\u7740\u5982\u679c off_reg \u8d85\u8fc7 alu_limit \uff0c\u6216\u8005\u5982\u679c off_reg \u548c alu_limit \u5177\u6709\u76f8\u53cd\u7684\u7b26\u53f7\uff0c\u5219 off_reg \u7684\u503c\u5c06\u88ab\u66ff\u6362\u4e3a 0\uff0c\u4ece\u800c\u4f7f\u6307\u9488\u7b97\u672f\u8fd0\u7b97\u5f52\u96f6\u3002\u6700\u8fd1\u66f4\u65b0\u4e86 alu_limit \u7684\u8ba1\u7b97\u65b9\u5f0f [15]\u3002\u67d0\u4e9b Linux \u53d1\u884c\u7248\u53ef\u80fd\u5c1a\u672a\u91c7\u7528\u65b0\u7684\u5b9e\u73b0\u3002\u4e3a\u5b8c\u6574\u8d77\u89c1\uff0c\u6211\u5c06\u6db5\u76d6\u4e24\u8005\uff0c\u5e76\u5728\u4e0b\u4e00\u8282\u4e2d\u91cd\u65b0\u8ba8\u8bba\u4e3a\u4ec0\u4e48\u5dee\u5f02\u5f88\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u53d8\u5f97\u76f8\u5173\u3002 alu_limit \u7531\u6307\u9488\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u610f\u601d\u662f\uff0c\u5982\u679c\u6307\u9488\u5bc4\u5b58\u5668\u6307\u5411\u6620\u5c04\u7684\u5f00\u5934\uff0c\u5219\u51cf\u6cd5\u7684 alu_limit \u4e3a 0\uff0c\u52a0\u6cd5\u7684 alu_limit \u7b49\u4e8e\u6620\u5c04\u7684\u5927\u5c0f\uff08\u51cf 1\uff09\u3002 alu_limit \u968f\u6307\u9488\u5bc4\u5b58\u5668\u4e0a\u7684\u540e\u7eed\u64cd\u4f5c\u66f4\u65b0\u3002 alu_limit \u7531\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\u51b3\u5b9a\u3002\u8fd9\u610f\u5473\u7740\u662f\u5426\u5c06\u8fd0\u884c\u65f6\u504f\u79fb\u5bc4\u5b58\u5668\u7684\u503c\u4e0e\u9a8c\u8bc1\u5668\u9759\u6001\u8303\u56f4\u8ddf\u8e2a\u671f\u95f4\u8ba1\u7b97\u7684\u5bc4\u5b58\u5668\u8fb9\u754c\u8fdb\u884c\u6bd4\u8f83\u3002\n\u6211\u5bf9 eBPF \u9a8c\u8bc1\u5668\u7684\u521d\u6b65\u4e86\u89e3\u6765\u81ea Manfred Paul \u8fd9\u7bc7\u51fa\u8272\u7684\u535a\u5ba2\u6587\u7ae0\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4ed6\u5bf9 CVE-2020-8835 \u7684\u5229\u7528\u3002\u6211\u5f3a\u70c8\u5efa\u8bae\u68c0\u67e5\u4e00\u4e0b\uff01\u56de\u60f3\u4e00\u4e0b\uff0ceBPF \u6307\u4ee4\u96c6\u53ef\u4ee5\u5bf9\u6574\u4e2a 64 \u4f4d\u5bc4\u5b58\u5668\u6216\u4ec5\u4f4e 32 \u4f4d\u8fdb\u884c\u64cd\u4f5c\u3002\u56e0\u6b64\uff0c\u9a8c\u8bc1\u5668\u8303\u56f4\u8ddf\u8e2a\u5305\u542b\u5bc4\u5b58\u5668\u4f4e 32 \u4f4d\u7684\u5355\u72ec\u8fb9\u754c\uff1a {u,s}32_{min,max}_value \u3002\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4f1a\u66f4\u65b0\u8fd9\u4e9b\u8fb9\u754c\u3002\u6bcf\u4e2a\u64cd\u4f5c\u90fd\u6709\u4e24\u4e2a\u8ddf\u8e2a\u529f\u80fd\uff0c\u4e00\u4e2a 64 \u4f4d\u548c\u4e00\u4e2a 32 \u4f4d\u8ba1\u6570\u5668\u90e8\u5206\u3002\u4e24\u8005\u90fd\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\u8c03\u7528 64 \u4f4d\u64cd\u4f5c\u3002 * /* \u8b66\u544a\uff1a\u6b64\u51fd\u6570\u5bf9 64 \u4f4d\u503c\u8fdb\u884c\u8ba1\u7b97\uff0c\u4f46 * \u5b9e\u9645\u6267\u884c\u53ef\u80fd\u53d1\u751f\u5728 32 \u4f4d\u503c\u4e0a\u3002\u56e0\u6b64\uff0c*\u50cf\u4f4d\u79fb\u8fd9\u6837\u7684\u4e1c\u897f\u5728 32 \u4f4d\u60c5\u51b5\u4e0b\u9700\u8981\u989d\u5916\u68c0\u67e5\u3002*/ static int adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ... case BdPFst_AND - &gt;var_off = tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_and (dst_reg , &amp;src_reg ) ; scalar_min_max_and (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_OR : dst_reg - &gt;var_off = tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_or (dst_reg , &amp;src_reg ) ; scalar_min_max_or (dst_reg , &amp;src_reg ) ;\u4f11\u606f ;\u6848\u4f8b BPF_XOR : dst_reg - &gt;var_off = tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ; scalar32_min_max_xor (dst_reg , &amp;src_reg ) ; scalar_min_max_xor (dst_reg , &amp;src_reg ) ;\u4f11\u606f ; ... } \u6f0f\u6d1e CVE-2021-3490 \u4f4d\u4e8e BPF_AND \u3001 BPF_OR \u548c BPF_XOR \u64cd\u4f5c\u7684 32 \u4f4d\u8ddf\u8e2a\u51fd\u6570\u4e2d\u3002\u6bcf\u4e2a\u529f\u80fd\u90fd\u662f\u4e00\u6837\u7684\u3002\u8ba9\u6211\u4eec\u6765\u770b\u770b BPF_AND \u7684\u8fdd\u89c4\u4ee3\u7801\u7684\u6458\u5f55\uff1a static void scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_subreg_is_const (src_reg - &gt;var_off) bool dst_known = tnum_subreg_is_const (dst_reg - &gt;var_off); struct tnum var32_off = tnum_subreg (dst_reg - &gt;var_off) ; s32 smin_val = src_reg-&gt;s32_min_value; u32 umax_val = src_reg - &gt;u32_max_value \uff1b /* \u5047\u8bbe scalar64_min_max_and \u5c06\u88ab\u8c03\u7528\uff0c\u6240\u4ee5\u5b83\u5b89\u5168 * \u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002 */ \u5982\u679c (src_known &amp;&amp; dst_known ) \u8fd4\u56de\uff1b ... }\n\u5982\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\u6240\u793a\uff0c\u5982\u679c\u6e90\u5bc4\u5b58\u5668\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u5df2\u77e5\uff0c\u5219\u8be5\u51fd\u6570\u4f1a\u8df3\u8fc7\u66f4\u65b0 32 \u4f4d\u8fb9\u754c\u3002\u8fd4\u56de\u4e0a\u9762\u7684\u6ce8\u91ca\u6307\u51fa\u8fd9\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3a 64 \u4f4d\u5bf9\u5e94\u7269\u4f1a\u5904\u7406\u5b83\u3002\u6211\u4eec\u6765\u770b\u770b\uff1a static void scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known = tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known = tnum_is_const (dst_reg - &gt;var_off) ; s64 smin_val = src_reg-&gt;smin_value; u64 umin_val = src_reg - &gt;umin_value \uff1b if (src_known &amp;&amp; dst_known ) { __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;\u8fd4\u56de ; } ... } \u7684\u786e\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5982\u679csrc_known \u548cdst_known \u4e3a\u771f\uff0c\u51fd\u6570__mark_reg_known \u4f1a\u88ab\u8c03\u7528\u3002\u4f60\u80fd\u53d1\u73b0\u95ee\u9898\u5417\uff1f\u5728 scalar32_min_max_and \u4e2d\uff0c _known \u53d8\u91cf\u662f\u4f7f\u7528 tnum_subreg_is_const \u8ba1\u7b97\u7684\u3002 64 \u4f4d\u5bf9\u5e94 scalar_min_max_and \u4f7f\u7528 tnum_is_const \u3002\u533a\u522b\u5728\u4e8e\uff0c\u5982\u679c\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u524d\u8005\u8fd4\u56de\u771f\uff0c\u800c\u540e\u8005\u4ec5\u5728\u6574\u4e2a 64 \u4f4d\u90fd\u662f\u5e38\u91cf\u65f6\u624d\u8fd4\u56de\u771f\u3002\u5982\u679c\u64cd\u4f5c\u6d89\u53ca\u4f4e 32 \u4f4d\u5df2\u77e5\u4f46\u9ad8 32 \u4f4d\u672a\u77e5\u7684\u5bc4\u5b58\u5668\uff0c\u5219\u8fdd\u53cd\u6ce8\u91ca\u4e2d\u6240\u8ff0\u7684\u5047\u8bbe\u3002\u5728\u51fd\u6570 adjust_scalar_min_max_vals \u4e2d\uff0c\u5728\u8fd4\u56de\u4e4b\u524d\uff0c\u901a\u8fc7\u8c03\u7528\u4ee5\u4e0b\u4e09\u4e2a\u51fd\u6570\u6700\u540e\u4e00\u6b21\u66f4\u65b0\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u8fb9\u754c\uff1a\u8fd9\u4e9b\u51fd\u6570\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u6709 32 \u4f4d\u548c 64 \u4f4d\u5bf9\u5e94\u9879\u3002\u6211\u5c06\u53ea\u4ecb\u7ecd 32 \u4f4d\u60c5\u51b5\uff0c\u56e0\u4e3a\u90a3\u662f\u9519\u8bef\u5f71\u54cd\u7684\u5185\u5bb9\u3002\nstatic void __update_reg32_bounds (struct bpf_reg_state *reg) { struct tnum var32_off = tnum_subreg (reg-&gt;var_off); /* \u6700\u5c0f\u6709\u7b26\u53f7\u662f\u6700\u5927\uff08\u7b26\u53f7\u4f4d\uff09 | min(other bits) */ reg - &gt;s32_min_value = max_t (s32 , reg - &gt;s32_min_value , var32_off .value | (var32_off .mask &amp; S32_MIN ) ) ; /* \u6700\u5927\u6709\u7b26\u53f7\u662f\u6700\u5c0f\uff08\u7b26\u53f7\u4f4d\uff09 | max(other bits) */ reg - &gt;s32_max_value = min_t (s32 , reg - &gt;s32_max_value , var32_off .value | (var32_off .mask &amp; S32_MAX ) ) ; reg - &gt;u32_min_value = max_t (u32 , reg - &gt;u32_min_value , (u32 )var32_off .value ) ; reg - &gt;u32_max_value = min (reg - &gt;u32_max_value , (u32 ) (var32_off .value | var32_off .mask ) ) ;\u8bf7\u6ce8\u610f\uff0c\u6700\u5c0f\u503c\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5c0f\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5927\u8005\u4e3a\u51c6\u3002\u7c7b\u4f3c\u5730\uff0c\u6700\u5927\u8fb9\u754c\u8bbe\u7f6e\u4e3a\u5f53\u524d\u6700\u5927\u503c\u6216\u5bc4\u5b58\u5668\u7684\u5df2\u77e5\u503c\uff0c\u4ee5\u8f83\u5c0f\u8005\u4e3a\u51c6\u3002\u7136\u540e\uff0c\u5728 __reg32_deduce_bounds \u4e2d\u4f7f\u7528\u6709\u7b26\u53f7\u548c\u65e0\u7b26\u53f7\u8fb9\u754c\u76f8\u4e92\u66f4\u65b0\u3002 /* \u4f7f\u7528\u6709\u7b26\u53f7\u7684\u6700\u5c0f\u503c/\u6700\u5927\u503c\u6765\u901a\u77e5\u65e0\u7b26\u53f7\uff0c\u53cd\u4e4b\u4ea6\u7136 */ static void __reg32_deduce_bounds ( struct bpf_reg_state *reg ) { /* \u4ece\u6709\u7b26\u53f7\u7684\u8fb9\u754c\u4e2d\u5b66\u4e60\u7b26\u53f7\u3002 * \u5982\u679c\u6211\u4eec\u4e0d\u80fd\u8de8\u8d8a\u7b26\u53f7\u8fb9\u754c\uff0c\u90a3\u4e48\u6709\u7b26\u53f7\u8fb9\u754c\u548c * \u65e0\u7b26\u53f7\u8fb9\u754c * \u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u7ed3\u5408\u8d77\u6765\u3002\u8fd9\u751a\u81f3\u5728 * \u5426\u5b9a\u60c5\u51b5\u4e0b\u4e5f\u6709\u6548\uff0c\u4f8b\u5982 * -3 s&lt;= x s&lt;= -1 \u610f\u5473\u7740 0xf...fd u&lt;= x u&lt;= 0xf...ff\u3002 */ if (reg - &gt;s32_min_value &gt;= 0 || reg - &gt;s32_max_value &lt; 0 ) { reg - &gt;s32_min_value = reg - &gt;u32_min_value = max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value = reg - &gt;u32_max_value = min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;\u8fd4\u56de ; } ... } static void __reg_bound_offset (struct bpf_reg_state *reg) { struct tnum var64_off = tnum_intersect (reg - &gt;var_off , tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off = tnum_intersect (tnum_subreg (reg -&gt;var_off), tnum_range (reg -&gt;u32_min_value, reg -&gt;u32_max_value)); reg - &gt;var_off = tnum_or (tnum_clear_subreg (var64_off), var32_off); tnum_intersect \u63a5\u53d7\u4e24\u4e2a tnum \u5e76\u5c06\u4e24\u8005\u4f20\u8fbe\u7684\u77e5\u8bc6\u7ec4\u5408\u6210\u4e00\u4e2a tnum \u3002\u8ba9\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u4f8b\u5b50\u6765\u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7406\u89e3\u4e3a\u4ec0\u4e48\u8fd9\u662f\u4e00\u4e2a\u4e25\u91cd\u7684\u6f0f\u6d1e\u3002\n\u5047\u8bbe\u6211\u4eec\u6709\u6307\u4ee4 BPF_ALU64_REG(BPF_AND, R2, R3)\u3002\u8be5\u6307\u4ee4\u5bf9\u5bc4\u5b58\u5668 R2 \u548c R3 \u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728 R2 \u4e2d\u3002 R2 \u6709 var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}\uff0c\u8868\u793a\u5df2\u77e5\u4f4e 32 \u4f4d\u503c\u4e3a 1\uff0c\u9ad8 32 \u4f4d\u672a\u77e5\u3002\u56e0\u4e3a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u7684\uff0c\u6240\u4ee5\u5b83\u7684 32 \u4f4d\u8fb9\u754c\u7b49\u4e8e\u8be5\u503c\u3002 R3 \u6709 var_off = {mask = 0x0; value = 0x100000002}\uff0c\u610f\u5473\u7740\u6574\u4e2a 64 \u4f4d\u662f\u5df2\u77e5\u7684\u5e76\u4e14\u7b49\u4e8e 0x100000002\u3002\u5982 adjust_scalar_min_max_vals \u7247\u6bb5\u7684\u7b2c 12 \u884c\u6240\u793a\uff0c\u51fd\u6570 tnum_and \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u6267\u884c AND \u8fd0\u7b97\u5e76\u5c06\u7ed3\u679c\u4fdd\u5b58\u5728\u76ee\u6807\u5bc4\u5b58\u5668 R2 \u7684 var_off \u4e2d\u3002\u56de\u60f3\u4e00\u4e0b\uff0c\u4e24\u4e2a\u5bc4\u5b58\u5668\u4e2d\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002 R3 \u7684\u6240\u6709\u4f4d\u90fd\u662f\u5df2\u77e5\u7684\uff1a\u9ad8 31 \u4f4d\u662f 0\uff0c\u7b2c 32 \u4f4d\u662f 1\u3002\u8fd9\u610f\u5473\u7740 R2 \u5269\u4e0b var_off = {mask = 0x100000000;\u503c = 0x0}\u3002\u8fd9\u662f\u56e0\u4e3a 2 &amp; 1 = 0\uff08\u5bf9\u4e8e\u4f4e 32 \u4f4d\uff09\uff0c\u5e76\u4e14\u9664\u4e86\u7b2c 32 \u4f4d\u4e4b\u5916\u7684\u6240\u6709\u4f4d\u90fd\u5c06\u88ab\u79f0\u4e3a 0\uff0c\u56e0\u4e3a R3 \u5728\u7b2c 32 \u4f4d\u4e2d\u6709\u4e00\u4e2a 1\u3002\u5728\u4e0b\u4e00\u884c\uff0c\u8c03\u7528 scalar32_min_max_and\u3002\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e2a\u51fd\u6570\u4f1a\u7acb\u5373\u8fd4\u56de\u5e76\u4e14\u4e0d\u4f1a\u6539\u53d8\u8fb9\u754c\uff0c\u56e0\u4e3a\u4e24\u4e2a\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u90fd\u662f\u5df2\u77e5\u7684\u3002\u7136\u540e __update_reg32_bounds \u88ab\u8c03\u7528\u3002\u8fd9\u5c06\u8bbe\u7f6e u32_max_value = 0 \uff0c\u56e0\u4e3a var_off.value = 0 &lt; u32_max_value = 1 \u7684\u503c\u3002\u540c\u6837\uff0c\u5b83\u4f1a\u8bbe\u7f6e u32_min_value = 1 \u56e0\u4e3a var_off.value = 0 &lt; u32_min_value \u3002\u7b7e\u540d\u8fb9\u754c\u4e5f\u662f\u5982\u6b64\u3002\u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7559\u4e0b\u4e86\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u5176\u4e2d {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 \uff01\n@@ - 7084 , 11 + 7084 , 10 @@ static void scalar32_min_max_and (struct bpf_reg_state *dst_reg , s32 smin_val = src_reg - &gt; s32_min_value ; u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u32 umax_val = 3 src_max - u /* 3 src_max - u /* 3 2_reg_\u548c * 4 _ \u548c * 4 \u5c06\u5b89\u5168\u79f0\u4e3a\u5b89\u5168\u8df3\u8fc7\u66f4\u65b0\u5df2\u77e5 32 \u4f4d\u60c5\u51b5\u7684\u5bc4\u5b58\u5668\u3002- */ - if (src_known &amp;&amp; dst_known ) + if (src_known &amp;&amp; dst_known ) { + __mark_reg32_known (dst_reg , var32_off .value ) ; return ; + } \u4e0a\u9762\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6e90\u548c\u76ee\u6807\u5bc4\u5b58\u5668\u7684\u4f4e 32 \u4f4d\u662f\u5df2\u77e5\u5e38\u91cf\uff0c\u5219\u5728\u8fd4\u56de\u4e4b\u524d\u5728\u76ee\u6807\u5bc4\u5b58\u5668\u4e0a\u8c03\u7528 __mark_reg32_known\u3002 /* \u5c06\u5bc4\u5b58\u5668\u7684\u672a\u77e5\u90e8\u5206\uff08\u53d8\u91cf\u504f\u79fb\u91cf\u6216\u6807\u91cf * \u503c\uff09\u6807\u8bb0\u4e3a\u5df2\u77e5\u503c @imm\u3002 */ static void __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off = tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value = (s32 )imm ; reg - &gt; value.imm ; reg - &gt;s32_s3_s3_s32 .....", "note_en": "At  Grapl we believe that in order to build the best defensive system we need to deeply understand attacker behaviors. As part of that goal we&#39;re investing in offensive security research.  Keep up with our blog for new research on high risk vulnerabilities, exploitation, and advanced threat tactics.\n    Find the released local privilege escalation (LPE) Proof-of-Concept for  CVE-2021-3490 here:  https://github.com/chompie1337/Linux_LPE_eBPF_CVE-2021-3490. It targets Ubuntu 20.10 (Groovy Gorilla) kernels 5.8.0-25.26 through 5.8.0-52.58. and Ubuntu 21.04 (Hirsute Hippo) 5.11.0-16.17.\n    This blog post is intended to give a detailed overview of eBPF from the perspective of an exploit developer. In this post, I cover:\n     I had no knowledge of eBPF going into this. My hope is that by sharing a PoC as well as my experience developing it, it can help others get started with eBPF exploitation.\n                  Berkeley Packet Filter (BPF) was initially created as a way to perform packet filtering in the kernel. Its capabilities were later redesigned and extended to create extended Berkeley Packet Filter (eBPF)  [1].\n    Put simply, eBPF provides a way for a user mode application to run code in the kernel without needing to write a kernel module.The purported benefits of using eBPF versus a kernel module are ease of use, stability, and security. There are also performance improvements gained by doing certain tasks directly in the kernel compared to a pure user mode program. eBPF programs are used to do a myriad of things such as: tracing, instrumentation, hooking system calls, debugging, and of course, packet capturing/filtering.\n    eBPF programs are written in a high level language and compiled into eBPF bytecode using a toolchain (such as  BCC   [18]). The eBPF VM uses a simple instruction set that uses eleven* 64-bit registers, a program counter, and a 512 byte fixed-size stack. Nine registers are general purpose read-write, one is a read-only stack pointer and the program counter is implicit  [2] . The instruction set is similar to x86, and operates on both 64 and 32 bit values.\n          *Technically, it uses   12 registers,  but the 12th register is an auxiliary register only used to perform ALU sanitation operations   [12].\n  A user mode application loads the bytecode into the kernel using the   bpf()    [14] syscall, where the eBPF verifier will perform a number of checks to ensure the program is \u201csafe\u201d to run in the kernel. This verification step is critical - eBPF exposes a path for unprivileged users to execute in ring0.\n    After the program is loaded, the user mode application attaches the program to a \u201chook point\u201d. A hook point is a place in the kernel where eBPF programs can be attached  [5]. eBPF programs are event driven, meaning the program will execute when certain events occur at the hook point. The classic use case is attaching an eBPF program to a socket, where the program will execute when data is written to it.\n    If the   kconfig knob   CONFIG_BPF_JIT is set, the eBPF program is JIT compiled into native assembly instructions after it is verified and loaded. Otherwise, when the program is executed it is run in the eBPF interpreter which decodes and executes the eBPF bytecode instructions.\n  User mode applications can interact with and get data from the eBPF program running in the kernel using eBPF maps and eBPF helper functions, which are accessed via the    bpf()  syscall.\n      The     sysctl   knob    kernel.unprivileged_bpf_disabled  determines whether unprivileged users are allowed to run eBPF programs. If it is not set, unprivileged users are allowed to attach an eBPF program to a socket that the user owns. In many Linux distributions, such as Ubuntu,    unprivileged_bpf_disabled  is not enabled by default. Because of this, I decided to look into eBPF more closely, as allowing unprivileged users to run code in the kernel is a ripe attack surface.\n    I mentioned above that user mode processes can interact with a eBPF program in the kernel using eBPF maps. They can also be used by multiple eBPF programs to interact with each other. They are a generic key/value store with an arbitrary data structure  [6]. There are various types of maps including: arrays, queues, and stacks.\n      key_size  - the size in bytes of the key used to index an element (used in array maps)\n   map_flags  - describes special characteristics of the map, such as if the entire map memory should be preallocated or not.\n eBPF maps can be created and altered from user space via the    bpf()  syscall using the    BPF_MAP_CREATE  command, updated using the    BPF_MAP_UPDATE_ELEM  command, and retrieve its contents using the    BPF_MAP_LOOKUP_ELEM  command. eBPF maps can accessed by eBPF programs using the file descriptor returned by    BPF_MAP_CREATE  and calling eBPF helper functions, which will return pointers to values within the map.\n      The exploit I wrote leverages a bug in the eBPF verifier. So before I delve into the vulnerability it is important to briefly explain the internals of the verifier.\n    The verifier starts by building a control flow graph of the program. Then, it will verify each instruction is valid and all memory accesses are safe through each possible flow of control  [3]. Afterwards, it will add in runtime checks to the program. This process, called  ALU Sanitation, inserts patches to the eBPF bytecode to ensure permitted memory ranges are not violated during runtime when performing pointer arithmetic  [4].\n      No pointer comparisons can be performed, and only scalar values can be added or subtracted to a pointer. A scalar value in the eBPF verifier is any value that is not derived from a pointer. The verifier keeps track of which registers contain pointers and which contain scalar values.\n Pointer arithmetic can not leave the \u201csafe\u201d bounds of a map. Meaning, the program can not access anything outside the predefined map memory. To do so, verifier keeps track of the upper and lower bounds of the values for each register.\n No pointers can be stored in maps or stored as a return value, in order to avoid leaking kernel addresses to user space.\n     The verifier stores the following bound values, for every register in each possible path of execution, to ensure there are no out-of-bound memory accesses:\n  umin_value ,    umax_value  store the min/max value of the register when interpreted as an unsigned (64 bit) integer\n smin_value ,   smax_value  store the min/max value of the register when interpreted as a signed (64 bit) integer.\n u32_min_value ,   u32min_value  store the min/max value of the register when interpreted as an unsigned (32 bit) integer.\n s32_min_value ,   s32_max_value  store the min/max value of the register when interpreted as a signed (32 bit) integer.\n var_off  contains information about the bits of the the register that are known. It is stored in a structure called    tnum  which contains two 64 bit fields:    mask  and    value . Every bit that is set in    mask  means the value of that bit is  unknown. The unset bits are known, and their true value are stored in    value . For example, if    var_off = {mask = 0x0; value = 0x1} , all bits of the register are known, and the register is known to have a value of 1. If    var_off = {mask = 0xFFFFFFFF00000000; value = 0x3}  it means that the lower 32 bits of the register are known to be 0x00000003 and the upper 32 bits are unknown.\n These bounds are used to update each other. In particular, if    var_off  indicates the register is a known constant, the min/max bounds are updated to reflect the known value. We will see why this is important later!\n      ALU Sanitation is a feature that was introduced to supplement the static range tracking of the verifier. The idea is to prevent OOB memory accesses if the value of registers do not fall within their expected range during runtime. This was added to help mitigate potential vulnerabilities in the verifier and protect against speculative attacks.\n  For every arithmetic operation that involves a pointer and a scalar register, an    alu_limit  is calculated. This represents the maximum absolute value that can be added to or subtracted from the pointer  [4]. Before each of these operations, the bytecode is patched with the following instructions:\n  *patch ++  =  BPF_MOV32_IMM ( BPF_REG_AX , aux - &gt;alu_limit ) ; *patch ++  =  BPF_ALU64_REG ( BPF_SUB ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_REG ( BPF_OR ,  BPF_REG_AX , off_reg ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_NEG ,  BPF_REG_AX ,  0 ) ; *patch ++  =  BPF_ALU64_IMM ( BPF_ARSH ,  BPF_REG_AX ,  63 ) ; *patch ++  =  BPF_ALU64_REG ( BPF_AND ,  BPF_REG_AX , off_reg ) ;\n    Note that    off_reg  represents the scalar register being added to the pointer register, and    BPF_REG_AUX  represents the auxiliary register.\n      The value of    off_reg  at runtime is subtracted from    alu_limit  and stored into    BPF_REG_AX . If    off_reg &gt; alu_limit , the highest bit of    BPF_REG_AX  is set (the sign bit).\n If the difference stored in    BPF_REG_AUX  is positive and off_reg is negative, indicating that    alu_limit  and the register\u2019s value have opposing signs, the    BPF_OR  operation will set the sign bit.\n The    BPF_NEG  operation will negate the sign bit. If the sign bit is set, it will become 0, and if not, it will become 1.\n The    BPF_ARSH  operation does an arithmetic right shift of 63 bits. This fills    BPF_REG_AX  with either all 0s or 1s, the value of the sign bit.\n Depending on the result of the above operation, the    BPF_AND  operation will either null out    off_reg  or leave it unchanged.\n This means that if    off_reg  exceeds    alu_limit , or if    off_reg  and    alu_limit  have opposing signs, the value of    off_reg  will be replaced with 0, nulling the pointer arithmetic operation.\n        The way    alu_limit  is calculated was  recently updated  [15]. The new implementation may not have been adopted yet by some Linux distributions. For completeness, I will cover both, and revisit why the differences matter as they become relevant in the next sections.\n      The    alu_limit  is determined by the boundaries of the  pointer register. Meaning, if the pointer register points to the beginning of a map, the    alu_limit  for subtraction is 0, and the alu_limit for addition is equal to the size of the map (minus 1). The    alu_limit  is updated with subsequent operations on the pointer register.\n      The    alu_limit  is determined by the boundaries of the  offset register. Meaning if the value of the offset register at runtime is compared against the register\u2019s boundaries computed during the verifier\u2019s static range tracking.\n    My initial knowledge of the eBPF verifier came from this excellent   blog post  by Manfred Paul detailing his exploitation of CVE-2020-8835. I highly recommend checking it out!\n      Recall that the eBPF instruction set can operate on both the entire 64 bits of registers or just the lower 32 bits. For this reason, the verifier range tracking contains separate bounds for the lower 32 bits of a register:    {u,s}32_{min,max}_value .\n  These bounds are updated for every operation. Each operation has two tracking functions with a 64 bit and a 32 bit counter part. Both are called for a 64 bit operation in the function   adjust_scalar_min_max_vals  .\n  * /* WARNING: This function does calculations on 64-bit values, but * the actual execution may occur on 32-bit values. Therefore, * things like bitshifts need extra checks in the 32-bit case.*/ static int  adjust_scalar_min_max_vals ( struct bpf_verifier_env *env, struct bpf_insn *insn, struct bpf_reg_state *dst_reg, struct bpf_reg_state src_reg ) { ...  case  BPF_AND : dst_reg - &gt;var_off  =  tnum_and (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_and (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_and (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_OR : dst_reg - &gt;var_off  =  tnum_or (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_or (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_or (dst_reg ,  &amp;src_reg ) ;  break ;  case  BPF_XOR : dst_reg - &gt;var_off  =  tnum_xor (dst_reg - &gt;var_off , src_reg .var_off ) ;  scalar32_min_max_xor (dst_reg ,  &amp;src_reg ) ;  scalar_min_max_xor (dst_reg ,  &amp;src_reg ) ;  break ;  ... }\n    The bug,  CVE-2021-3490, is found in the 32 bit tracking function for    BPF_AND ,    BPF_OR , and    BPF_XOR  operations. It is the same in each of the functions.\n    Let\u2019s take a look at an excerpt of the  offending code for    BPF_AND :\n  static  void  scalar32_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_subreg_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_subreg_is_const (dst_reg - &gt;var_off ) ; struct tnum var32_off  =  tnum_subreg (dst_reg - &gt;var_off ) ; s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  /* Assuming scalar64_min_max_and will be called so its safe * to skip updating register for known 32-bit case. */  if  (src_known  &amp;&amp; dst_known )  return ; ... }\n    As shown in the code snippet above, if the lower 32 bits of both the source and destination register are known, the function skips updating the 32 bit bounds.\n    The comment above the return states that this is OK, because the  64 bit  counterpart will take care of it. Let\u2019s take a look:\n  static  void  scalar_min_max_and ( struct bpf_reg_state *dst_reg, struct bpf_reg_state *src_reg ) { bool src_known  =  tnum_is_const (src_reg - &gt;var_off ) ; bool dst_known  =  tnum_is_const (dst_reg - &gt;var_off ) ; s64 smin_val  = src_reg - &gt;smin_value ; u64 umin_val  = src_reg - &gt;umin_value ;  if  (src_known  &amp;&amp; dst_known )  {  __mark_reg_known (dst_reg , dst_reg - &gt;var_off .value ) ;  return ;  }  ... }\n  Indeed, we can see if    src_known  and    dst_known  are true, the function    __mark_reg_known  will be called. Can you spot the problem?\n    In    scalar32_min_max_and , the    _known  variable is calculated using    tnum_subreg_is_const  . The 64 bit counterpart,    scalar_min_max_and , uses    tnum_is_const . The difference is that the former returns true if the the lower 32 bits of the register are known constants, and the latter returns true only if the entire 64 bits are constant. If the operation involves registers where the lower 32 bits are known but the upper 32 bits are unknown, the assumption stated in the comment is violated.\n    In the function    adjust_scalar_min_max_vals , before returning, the bounds of the destination register are updated a last time by calling the  following three functions:\n    Each of these functions have 32 and 64 bit counterparts. I\u2019ll just cover the 32 bit case, since that is what the bug affects.\n      static  void  __update_reg32_bounds ( struct bpf_reg_state *reg ) { struct tnum var32_off  =  tnum_subreg (reg - &gt;var_off ) ;  /* min signed is max(sign bit) | min(other bits) */ reg - &gt;s32_min_value  =  max_t (s32 , reg - &gt;s32_min_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MIN ) ) ;  /* max signed is min(sign bit) | max(other bits) */ reg - &gt;s32_max_value  =  min_t (s32 , reg - &gt;s32_max_value , var32_off .value  |  (var32_off .mask  &amp;  S32_MAX ) ) ; reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;u32_min_value ,  (u32 )var32_off .value ) ; reg - &gt;u32_max_value  =  min (reg - &gt;u32_max_value ,  (u32 ) (var32_off .value  | var32_off .mask ) ) ; }\n    Notice that the min bounds set to either the current min or the known value of register, whichever is larger. Similarly, the max bounds are set either the current max, or the known value of the register, whichever is smaller.\n  Then, the signed and unsigned bounds are used to update each other in   __reg32_deduce_bounds  .\n  /* Uses signed min/max values to inform unsigned, and vice-versa */ static  void  __reg32_deduce_bounds ( struct bpf_reg_state *reg ) {  /* Learn sign from signed bounds. * If we cannot cross the sign boundary, then signed and * unsigned bounds * are the same, so combine. This works even in the * negative case, e.g. * -3 s&lt;= x s&lt;= -1 implies 0xf...fd u&lt;= x u&lt;= 0xf...ff. */  if  (reg - &gt;s32_min_value  &gt;=  0  || reg - &gt;s32_max_value  &lt;  0 )  { reg - &gt;s32_min_value  = reg - &gt;u32_min_value  =  max_t (u32 , reg - &gt;s32_min_value , reg - &gt;u32_min_value ) ; reg - &gt;s32_max_value  = reg - &gt;u32_max_value  =  min_t (u32 , reg - &gt;s32_max_value , reg - &gt;u32_max_value ) ;  return ;  } ... }\n      static  void  __reg_bound_offset ( struct bpf_reg_state *reg ) { struct tnum var64_off  =  tnum_intersect (reg - &gt;var_off ,  tnum_range (reg - &gt;umin_value , reg - &gt;umax_value ) ) ; struct tnum var32_off  =  tnum_intersect ( tnum_subreg (reg - &gt;var_off ) , tnum_range (reg - &gt;u32_min_value , reg - &gt;u32_max_value ) ) ; reg - &gt;var_off  =  tnum_or ( tnum_clear_subreg (var64_off ) , var32_off ) ; }\n    tnum_intersect  takes two    tnum s and combines the knowledge conveyed by both into a single    tnum .\n Let\u2019s go through the steps using an example so we can understand why this is a critical vulnerability.\n  Suppose we have the instruction   BPF_ALU64_REG(BPF_AND, R2, R3). This instruction performs an   AND operation on registers   R2 and   R3 and saves the results in   R2.\n  R2 has   var_off = {mask = 0xFFFFFFFF00000000; value = 0x1}, meaning the lower 32 bits are known to have a value of 1, and the upper 32 bits are unknown. Because the lower 32 bits of the register are known, its 32bit bounds are equal to the value.\n R3 has   var_off = {mask = 0x0; value = 0x100000002}, meaning the entire 64 bits are known and equal to   0x100000002.\n   As shown on line 12 of the snippet of   adjust_scalar_min_max_vals, the function   tnum_and is called. This will perform an AND operation and save the results in var_off of the destination register,   R2. Recall, the lower 32 bits in both of the registers are known. All of the bits of R3 are known: the upper 31 bits of are 0, and the 32nd bit is 1. This means that    R2  is left with    var_off = {mask = 0x100000000; value = 0x0} . This is because 2 &amp; 1 = 0 (for the lower 32 bits), and all but the 32nd bit will be known to be 0, since    R3  has a 1 in the 32nd bit.\n On the next line,    scalar32_min_max_and  is called. We already know that this function will return immediately and make no changes to the bounds, because the lower 32 bits of both registers are known.\n Then    __update_reg32_bounds  is called. This will set    u32_max_value = 0 , because the value of    var_off.value = 0 &lt; u32_max_value = 1 . Similarly, it will set    u32_min_value = 1  because    var_off.value = 0 &lt; u32_min_value . The same goes for the signed bounds.\n Now we can see that in this case, we are left with a register where    {u,s}32_max_value = 0 &lt; {u,s}32_min_value = 1 !\n      @@  - 7084 , 11  + 7084 , 10 @@  static  void  scalar32_min_max_and (struct bpf_reg_state  *dst_reg , s32 smin_val  = src_reg - &gt;s32_min_value ; u32 umax_val  = src_reg - &gt;u32_max_value ;  -  /* Assuming scalar64_min_max_and will be called so its safe- * to skip updating register for known 32-bit case.- */ -  if  (src_known  &amp;&amp; dst_known ) +  if  (src_known  &amp;&amp; dst_known )  { +  __mark_reg32_known (dst_reg , var32_off .value ) ;  return ; +  }\n    Above we can see that now,   __mark_reg32_known  is called on the destination register before returning if the lower 32 bits of the source and destination register are known constants.\n    /* Mark the unknown part of a register (variable offset or scalar * value) as known to have the value @imm.*/ static  void  __mark_reg32_known ( struct bpf_reg_state *reg, u64 imm ) { reg - &gt;var_off  =  tnum_const_subreg (reg - &gt;var_off , imm ) ; reg - &gt;s32_min_value  =  (s32 )imm ; reg - &gt;s32_max_value  =  (s32 )imm\n......", "posttime": "2021-08-09 00:55:07", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u7834\u89e3,ebpf,pwning,bpf", "title": "\u4f7f\u7528 eBPF \u8fdb\u884c\u5185\u6838\u7834\u89e3\uff1a\u4e00\u4e2a\u7231\u60c5\u6545\u4e8b", "title_en": "Kernel Pwning with eBPF: A Love Story", "transed": 1, "url": "https://www.graplsecurity.com/post/kernel-pwning-with-ebpf-a-love-story", "via": "", "real_tags": ["\u7834\u89e3", "ebpf", "pwning", "bpf"]}, {"category": "", "categoryclass": "", "imagename": "", "infoid": 1072141, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "Wildfire Games \u81ea\u8c6a\u5730\u5ba3\u5e03\u53d1\u5e03 0AD Alpha 25\uff1a\u201cYaun\u00e3\u201d\uff0c\u8fd9\u662f 0 AD \u7684\u7b2c 25 \u4e2a Alpha \u7248\u672c\uff0c\u8fd9\u662f\u4e00\u6b3e\u514d\u8d39\u3001\u5f00\u6e90\u7684\u53e4\u4ee3\u6218\u4e89\u5b9e\u65f6\u6218\u7565\u6e38\u620f\u3002 Yaun\u00e3 \u662f\u53e4\u6ce2\u65af\u8bed\u4e2d\u7231\u5965\u5c3c\u4e9a\u4eba\uff08\u5e0c\u814a\u4eba\uff09\u7684\u8bcd\u3002\u8ba2\u5355\u91cd\u7ec4\u2014\u2014\u73a9\u5bb6\u73b0\u5728\u53ef\u4ee5\u5c06\u65b0\u8ba2\u5355\u63a8\u5230\u751f\u4ea7\u961f\u5217\u7684\u524d\u9762 0 AD \u662f\u514d\u8d39\u8f6f\u4ef6\u3002\u8fd9\u610f\u5473\u7740\u60a8\u53ef\u4ee5\u5728\u76f8\u540c\u7684\u8bb8\u53ef\u4e0b\u514d\u8d39\u4e0b\u8f7d\u3001\u91cd\u65b0\u5206\u53d1\u3001\u4fee\u6539\u548c\u8d21\u732e\u5e94\u7528\u7a0b\u5e8f\uff1a\u7528\u4e8e\u4ee3\u7801\u7684 GNU \u516c\u5171\u8bb8\u53ef\u7248\u672c 2 (GPL v2) \u548c\u7528\u4e8e\u827a\u672f\u4f5c\u54c1\u7684\u77e5\u8bc6\u5171\u4eab\u7f72\u540d\u76f8\u540c\u65b9\u5f0f\u5171\u4eab 3.0 (CC-BY-SA 3.0) .\u5c3d\u7ba1\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u4e9b\u4eba\u901a\u8fc7\u4e92\u8054\u7f51\u6216\u7269\u7406\u5a92\u4f53\u51fa\u552e 0 AD \u7684\u526f\u672c\uff0c\u4f46\u60a8\u59cb\u7ec8\u53ef\u4ee5\u9009\u62e9\u76f4\u63a5\u4ece\u5f00\u53d1\u4eba\u5458\u5904\u5b8c\u5168\u514d\u8d39\u4e0b\u8f7d 0 AD\u3002\u6ca1\u6709\u201c\u514d\u8d39\u589e\u503c\u201d\u6a21\u5f0f\uff0c\u6ca1\u6709\u6e38\u620f\u5185\u5e7f\u544a\uff0c\u6ca1\u6709\u6355\u83b7\u3002", "note_en": "Wildfire Games proudly announces the release of 0AD Alpha 25: \u201cYaun\u00e3,\u201d the twenty-fifth alpha version of 0 A.D., a free, open-source real-time strategy game of ancient warfare.\u00a0Yaun\u00e3 is an\u00a0old Persian word for Ionians (Greeks).\n     Order Restructuring \u2013 Players Can Now Push New Orders To The Front Of Their Production Queues\n   0 A.D. is free software. This means you are free to download, redistribute, modify and   contribute \u00a0to the application under the same licences: GNU Public Licence version 2 (GPL v2) for code and Creative Commons Attribution Share-Alike 3.0 (CC-BY-SA 3.0) for artwork.\n Although you might find some people selling copies of 0 A.D., either over the internet or on physical media, you will always have the option to   download 0 A.D. \u00a0completely gratis, directly from the developers. No \u201cfreemium\u201d model, no in-game advertising, no catch.", "posttime": "2021-08-09 00:54:51", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "ad,alpha", "title": "0 AD \u963f\u5c14\u6cd5 25\uff1aYaun\u0101", "title_en": "0 A.D. Alpha 25: Yaun\u0101", "transed": 1, "url": "https://play0ad.com/new-release-0-a-d-alpha-25-yauna/", "via": "", "real_tags": ["ad", "alpha"]}, {"category": "", "categoryclass": "", "imagename": "f1ac3d2c9a9eb77da56b61f928e0d7a6.png", "infoid": 1072140, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u636e\u62a5\u9053\uff0c\u652f\u4ed8\u670d\u52a1\u516c\u53f8 Xsolla \u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5\uff0c\u6839\u636e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\uff08\u901a\u8fc7 Game World Observer\uff09\uff0c\u8be5\u516c\u53f8\u4f4d\u4e8e\u4fc4\u7f57\u65af\u5f7c\u5c14\u59c6\u7684\u529e\u516c\u5ba4\u7684\u5458\u5de5\u88ab\u89e3\u96c7\u3002\u66f4\u7cdf\u7cd5\u7684\u662f\uff0cXsolla \u7684\u9996\u5e2d\u6267\u884c\u5b98\u517c\u521b\u59cb\u4eba Aleksandr Agapitov \u5411\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53d1\u9001\u4e86\u4e00\u5c01\u7535\u5b50\u90ae\u4ef6\uff0c\u89e3\u91ca\u4e86\u8fd9\u4e00\u51b3\u5b9a\uff0c\u5e76\u900f\u9732\u4ed6\u4eec\u5df2\u88ab\u89e3\u96c7\uff0c\u56e0\u4e3a\u4ed6\u4eec\u88ab\u6807\u8bb0\u4e3a\u201c\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u201d\u3002 \u201c\u60a8\u6536\u5230\u8fd9\u5c01\u7535\u5b50\u90ae\u4ef6\u662f\u56e0\u4e3a\u6211\u7684\u5927\u6570\u636e\u56e2\u961f\u5206\u6790\u4e86\u60a8\u5728 Jira\u3001Confluence\u3001Gmail\u3001\u804a\u5929\u3001\u6587\u6863\u3001\u4eea\u8868\u677f\u4e2d\u7684\u6d3b\u52a8\uff0c\u5e76\u5c06\u60a8\u6807\u8bb0\u4e3a\u4e0d\u656c\u4e1a\u4e14\u6548\u7387\u4f4e\u4e0b\u7684\u5458\u5de5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5f53\u60a8\u8fdc\u7a0b\u5de5\u4f5c\u65f6\uff0c\u60a8\u5e76\u4e0d\u603b\u662f\u5728\u5de5\u4f5c\u573a\u6240\u3002 \u201c\u4f60\u4eec\u4e2d\u7684\u8bb8\u591a\u4eba\u53ef\u80fd\u4f1a\u611f\u5230\u9707\u60ca\uff0c\u4f46\u6211\u771f\u7684\u76f8\u4fe1 Xsolla \u4e0d\u9002\u5408\u4f60\u4eec\u3002 Nadia \u548c\u5979\u7684\u62a4\u7406\u56e2\u961f\u4e0e\u4e03\u5bb6\u9886\u5148\u7684\u4eba\u529b\u8d44\u6e90\u673a\u6784\u5408\u4f5c\uff0c\u56e0\u4e3a\u6211\u4eec\u5c06\u5e2e\u52a9\u60a8\u627e\u5230\u4e00\u4e2a\u597d\u5730\u65b9\uff0c\u5728\u90a3\u91cc\u60a8\u8d5a\u5f97\u66f4\u591a\uff0c\u5de5\u4f5c\u66f4\u5c11\u3002 Sasha \u5c06\u5e2e\u52a9\u60a8\u83b7\u5f97\u63a8\u8350\uff0c\u5305\u62ec\u6211\u81ea\u5df1\u7684\u63a8\u8350\u3002 Natalia \u4f1a\u4e3a\u60a8\u89e3\u8bfb\u60a8\u7684\u6743\u5229\u3002 \u201c\u518d\u6b21\u611f\u8c22\u60a8\u7684\u8d21\u732e\u3002\u5982\u679c\u4f60\u60f3\u548c\u6211\u4fdd\u6301\u8054\u7cfb\uff0c\u8bf7\u7ed9\u6211\u5199\u4e00\u5c01\u957f\u4fe1\uff0c\u628a\u4f60\u6240\u6709\u7684\u89c2\u5bdf\u3001\u4e0d\u516c\u548c\u611f\u6fc0\u3002\u201d\u8fd9\u7acb\u5373\u5f15\u53d1\u4e86\u53ef\u9884\u89c1\u7684\u53cd\u5f39\uff1a\u65e0\u8bba\u662f\u88c1\u5458\u672c\u8eab\u8fd8\u662f\u7535\u5b50\u90ae\u4ef6\u7684\u8bed\u6c14\u3002\u636e ProPerm.ru \u79f0\uff0c\u8be5\u516c\u53f8\u6b63\u5728\u8c03\u67e5\u5bfb\u627e\u6cc4\u9732\u7535\u5b50\u90ae\u4ef6\u7684\u5458\u5de5\u3002\u88c1\u5458\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u53ec\u5f00\u4e86\u4e00\u6b21\u65b0\u95fb\u53d1\u5e03\u4f1a\uff0c\u4ed6\u89e3\u91ca\u8bf4\uff0c\u5927\u89c4\u6a21\u88c1\u5458\u662f\u7531\u4e8e\u516c\u53f8\u5df2\u505c\u6b62\u663e\u793a 40% \u7684\u589e\u957f\u3002\u963f\u52a0\u76ae\u6258\u592b\u63d0\u4f9b\u4e86\u66f4\u591a\u7ec6\u8282\uff0c\u5305\u62ec\u4e0b\u5c97\u5458\u5de5\u603b\u6570\u53ef\u80fd\u5360\u516c\u53f8\u6240\u6709\u529e\u516c\u5ba4\u5458\u5de5\u603b\u6570\u7684 40%\u3002\n\u5728\u65b0\u95fb\u53d1\u5e03\u4f1a\u4e4b\u540e\uff0c\u963f\u52a0\u76ae\u6258\u592b\u901a\u8fc7\u4e00\u6761\u63a8\u6587\u5f15\u53d1\u4e86\u8fdb\u4e00\u6b65\u7684\u4e89\u8bae\uff0c\u63a8\u6587\u5927\u81f4\u7ffb\u8bd1\u4e3a\u201c\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u5f00\uff0c\u6216\u8005\u8ba9\u4f60\u4ed6\u5988\u7684\u5c41\u80a1\u6eda\u51fa\u53bb\u3002\u201d\u963f\u52a0\u76ae\u6258\u592b\u5728\u63a5\u53d7\u300a\u798f\u5e03\u65af\u4fc4\u7f57\u65af\u300b\u91c7\u8bbf\u65f6\u900f\u9732\uff0c\u5728\u4e0e\u7ecf\u7406\u8ba8\u8bba\u540e\uff0c60 \u540d\u53d7\u5f71\u54cd\u7684\u5458\u5de5\u53ef\u80fd\u4f1a\u7559\u5728\u516c\u53f8\uff0c\u800c\u88ab\u89e3\u96c7\u7684\u5458\u5de5\u5c06\u4fdd\u7559\u533b\u7597\u4fdd\u9669\uff0c\u5e76\u83b7\u5f97\u76f8\u5f53\u4e8e\u56db\u5230\u516d\u4e2a\u6708\u5de5\u8d44\u7684\u533b\u7597\u5de5\u8d44\u3002", "note_en": "Payment services company Xsolla has reportedly fired 150 of its employees, with workers in the company\u2019s office in Perm, Russia being terminated based on big data analysis of their activity (via  Game World Observer).\n Making the situation worse, Xsolla CEO and founder Aleksandr Agapitov sent an email to the affected employees explaining the decision, revealing that they had been let go because they had been tagged as \u201cunengaged and unproductive employees.\u201d\n   \u201cYou received this email because my big data team analyzed your activities in Jira, Confluence, Gmail, chats, documents, dashboards and tagged you as unengaged and unproductive employees. In other words, you were not always present at the workplace when you worked remotely.\n \u201cMany of you might be shocked, but I truly believe that Xsolla is not for you. Nadia and her care team partnered with seven leading HR agencies, as we will help you find a good place, where you will earn more and work even less. Sasha will help you get a recommendation, including the one from myself. And Natalia will read you your rights.\n \u201cOnce again, thank you for your contribution. If you want to stay in contact with me, please write me a long letter about all your observations, injustice, and gratitude.\u201d\n This prompted immediate and predictable backlash: both for the layoffs themselves and for the tone of the email. According to  ProPerm.ru, the company is investigating to find the employee who leaked the email.\n Following the layoffs, Agapitov held a press conference in which he explained that the mass layoffs were caused by the fact that the company has stopped showing 40% growth. Agapitov provided further details, including that the total number of laid-off employees could total 40% of the company\u2019s headcount across all of its offices.\n Following the press conference, Agapitov incited further controversy with a  Tweet that roughly translates to \u201cWork your fucking ass off or get your fucking ass out.\u201d\n Speaking with  Forbes Russia, Agapitov revealed that 60 of the affected employees might stay with the company following discussions with their managers, while those who have been let go will keep their medical insurance and receive medical pay equal to four to six monthly salaries.", "posttime": "2021-08-09 00:54:30", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u5927\u6570\u636e,\u6570\u636e\u5206\u6790,based,\u5458\u5de5", "title": "\u827e\u514b\u7d22\u62c9\u57fa\u4e8e\u5bf9\u5176\u6d3b\u52a8\u7684\u5927\u6570\u636e\u5206\u6790\u89e3\u96c7\u4e86 150 \u540d\u5458\u5de5", "title_en": "Xsolla fires 150 employees based on big data analysis of their activity", "transed": 1, "url": "https://www.mcvuk.com/business-news/xsolla-fires-150-employees-based-on-big-data-analysis-of-their-activity-many-of-you-might-be-shocked-but-i-truly-believe-that-xsolla-is-not-for-you/", "via": "", "real_tags": ["\u5927\u6570\u636e", "\u6570\u636e\u5206\u6790", "based", "\u5458\u5de5"]}, {"category": "", "categoryclass": "", "imagename": "6d4fe6117029a98c7aa66fe2542b07c2.png", "infoid": 1072138, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u590f\u5b63\u7684\u4e09\u4f0f\u5929\u5df2\u7ecf\u5230\u6765\uff0c\u672c\u5468\u5e02\u573a\uff08\u80a1\u7968\u3001\u503a\u52a1\u3001\u5546\u54c1\u5e02\u573a\uff09\u51e0\u4e4e\u6ca1\u6709\u53d8\u52a8\uff0c\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u7684\u64b0\u7a3f\u4eba\u601d\u8003\u5982\u4f55\u5728\u80a1\u7968\u548c\u5546\u54c1\u5e02\u573a\u65e0\u7cbe\u6253\u91c7\u7684\u60c5\u51b5\u4e0b\u5ea6\u8fc7\u4ed6\u4eec\u7684\u4e00\u5929\u3002\u968f\u610f\u7684\u60f3\u6cd5\u6293\u4f4f\u4e86\u65e0\u804a\u7684\u65f6\u523b\u3002\u751a\u81f3\u300a\u91d1\u878d\u65f6\u62a5\u300b\u4e5f\u6682\u65f6\u7f29\u6c34\u4e86\uff1a\u672c\u5468\u6bcf\u5929 6 \u9875\uff0c\u4ece\u7ecf\u5178\u7684 12 \u9875\u51cf\u5c11\u4e86\u3002\u590f\u5929\u5230\u4e86\u3002\u5173\u4e8e\u5fb7\u56fd\u8d54\u507f\u7684\u4e89\u8bba\u4ecd\u5728\u7ee7\u7eed\u3002\u5728\u8fc7\u53bb\u7684\u4e00\u5e74\u91cc\uff0c\u82f1\u56fd\u548c\u6cd5\u56fd\u5df2\u7ecf\u6e05\u695a\uff0c\u5fb7\u56fd\u65e0\u6cd5\u5168\u989d\u652f\u4ed8\u3002 1921 \u5e74 8 \u6708 10 \u65e5\u5c31\u4e09\u4e2a\u6838\u5fc3\u95ee\u9898\u5c55\u5f00\u8c08\u5224\uff0c\u800c\u4e0d\u662f\u8fdd\u7ea6\uff1a\u5fb7\u56fd\u5411\u76ee\u524d\u5360\u9886\u5fb7\u56fd\u5730\u533a\u7684\u82f1\u56fd\u548c\u6cd5\u56fd\u58eb\u5175\u4ed8\u6b3e\u3001\u5b9e\u7269\uff08\u94a2\u3001\u7164\u3001\u6728\u6750\uff09\u8f6c\u79fb\u4ee3\u66ff\u5fb7\u56fd\u91d1\u9a6c\u514b\uff0c\u4ee5\u53ca\u627f\u62c5\u6218\u4e89\u503a\u52a1\u6b27\u6d32\u8f83\u5c0f\u7684\u56fd\u5bb6\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u5fb7\u56fd\u5728\u7b2c\u4e00\u200b\u200b\u6b21\u4e16\u754c\u5927\u6218\u540e\u4f7f\u7528\u4e24\u79cd\u5e73\u884c\u8d27\u5e01\uff1a\u91d1\u9a6c\u514b\u548c\u7eb8\u5e01\u3002\u51e1\u5c14\u8d5b\u6761\u7ea6\u89c4\u5b9a\u4ee5\u91d1\u9a6c\u514b\u652f\u4ed8\uff0c\u8fd9\u9020\u6210\u4e86\u4e25\u91cd\u7684\u8d22\u653f\u538b\u529b\u3002 1920 \u5e74\u4ee3\u7684\u5fb7\u56fd\u5f53\u7136\u88ab\u79f0\u4e3a\u9b4f\u739b\u5171\u548c\u56fd\uff0c\u5e76\u5c06\u5728 9 \u6708\u5f00\u59cb\u7ecf\u5386\u4e25\u91cd\u7684\u901a\u8d27\u81a8\u80c0\uff0c\u8fd9\u79cd\u901a\u8d27\u81a8\u80c0\u4f1a\u6301\u7eed\u4e24\u5e74\u76f4\u5230\u91d1\u878d\u5d29\u6e83\u3002\u7ebd\u7ea6\u7684\u4ea4\u6613\u5458\u60f3\u77e5\u9053\u4ec0\u4e48\u53ef\u80fd\u4f1a\u6539\u53d8\u5e02\u573a\u3002 \u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b\u7684\u7f16\u8f91\u4eec\u63a8\u6d4b\uff0c\u9ad8\u7a0e\u6536\u548c\u516c\u5171\u652f\u51fa\u6b63\u5728\u635f\u5bb3\u516c\u4f17\u5bf9\u62e5\u6709\u80a1\u7968\u7684\u770b\u6cd5\u3002\u4e0d\u65f6\u6709\u8db3\u591f\u52c7\u6562\u7684\u4eba\u5bf9\u4e0d\u53d7\u6b22\u8fce\u7684\u666e\u901a\u80a1\u53d1\u8868\u610f\u89c1\u3002\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\u5728 1911 \u5e74\u88ab\u62c6\u5206\u4e3a\u8fd1\u4e09\u6253\u516c\u53f8\uff0c\u672c\u6587\u5217\u51fa\u4e86\u6240\u6709\u524d\u6210\u5206\u7684\u4ef7\u683c\u3002\u5c3d\u7ba1\u8fc7\u53bb\u4e00\u5e74\u8270\u96be\uff0c\u4f46 1921 \u5e74\u5df2\u7ecf\u663e\u793a\u51fa\u77f3\u6cb9\u89e6\u5e95\u7684\u8ff9\u8c61\u3002\u4f5c\u8005\u5efa\u8bae\u7cbe\u660e\u7684\u6295\u8d44\u8005\u8d2d\u4e70\u6240\u6709\u8fd9\u4e9b\u80a1\u7968\u3002\u6bcf\u5bb6\u516c\u53f8\u7684\u4ea4\u6613\u4ef7\u683c\u90fd\u4f4e\u4e8e\u8d26\u9762\u4ef7\u503c\uff01\u5e02\u76c8\u7387\u4ecb\u4e8e 3 \u5230 5 \u4e4b\u95f4\u3002\u63d0\u9192\u4e00\u4e0b\uff0c\u65e0\u98ce\u9669\u503a\u5238\u7684\u6536\u76ca\u7387\u4e3a 5%\uff0c\u79ef\u6781\u9f13\u52b1\u6563\u6237\u6295\u8d44\u8005\u4e0d\u8981\u6301\u6709\u80a1\u7968\u3002\u5386\u53f2\u4e8b\u5b9e\uff1a\u62a5\u7eb8\u4e0a\u5bf9\u666e\u901a\u80a1\u7684\u51b7\u6f20\u4f1a\u8ba9\u73b0\u4ee3\u6295\u8d44\u8005\u5782\u6d8e\u4e09\u5c3a\u3002\u5982\u679c\u4ece 1921 \u5e74\u5230\u73b0\u5728\uff0c\u4e70\u5165\u5e76\u6301\u6709\u9053\u743c\u65af\u6307\u6570\uff0c\u603b\u56de\u62a5\u5c06\u662f 500,000%\uff085,000 \u500d\uff09\uff01\u6839\u636e\u57c3\u514b\u68ee\u7f8e\u5b5a\u7684\u524d\u8eab\u65b0\u6cfd\u897f\u6807\u51c6\u77f3\u6cb9\u516c\u53f8\uff08\u62c6\u5206\u8c03\u6574\u540e\u7684 0.04 \u7f8e\u5143\uff09\uff0c\u8d2d\u4e70\u548c\u6301\u6709 100 \u5e74\u5c06\u76f8\u5f53\u4e8e 800,000% \u7684\u56de\u62a5\uff088,000 \u500d\uff09\uff01\u81f4\u6211\u4eec\u7684\u8bfb\u8005\uff1a\u5982\u679c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u90a3\u4e48\u5728\u5f53\u65f6\u6295\u8d44\u4e8e\u5927\u76d8\u7684 100 \u7f8e\u5143\u4eca\u5929\u5c06\u4ef7\u503c 500,000 \u7f8e\u5143\uff01\u5728\u4eca\u5929\u7684\u6a21\u56e0\u80a1\u7968\u4e16\u754c\u4e2d\uff0c\u8fd9\u5982\u4f55\u6210\u4e3a\u5934\u6761\u65b0\u95fb\uff1f\n\u9605\u8bfb\u672c\u65f6\u4e8b\u901a\u8baf\u662f\u514d\u8d39\u7684\u3002\u5982\u679c\u60a8\u559c\u6b22\u5b83\uff0c\u8bf7\u5206\u4eab\u7ed9\u670b\u53cb\u6216\u901a\u8fc7 PayPal \u6350\u8d60\uff08\u4e0b\u9762\u7684\u6309\u94ae\uff09\u3002", "note_en": "Dog days of summer have arrived, bringing little to no movements in markets this week (equity, debt, commodity markets)\n  Writers at the FT ponder how to spend their day while equity and commodity markets vacillate listlessly. Random ideas captures the very moment of boredom. Even the Financial Times has temporarily shrunk: 6 pages per day this week down from the classic 12 pages. Summer has arrived.\n Wrangling over German reparations continues. Over the past year, it has become clear to Britain and France that Germany cannot pay in full. Instead of default, talks open on August 10, 1921 regarding three core issues: German payments to British and French soldiers currently occupying German regions, in kind (steel, coal, timber) transfers in lieu of German gold marks, and assumption of war debt of smaller European countries.\n Historical Fact: Germany operates two parallel currencies after WWI: the gold mark and paper mark. The Treaty of Versailles stipulates payment in gold marks, which is causing severe fiscal strain. The Germany of the 1920s is, of course, known as the Weimar Republic and will begin experiencing severe inflation in September that drags on for two years until financial implosion.\n Traders in New York wonder what might turn the market. The editors of the WSJ surmise that high taxation and public spending are harming public perception of owning equities.\n  Every now and then, someone brave enough offers their opinion on unpopular common stocks. Standard Oil was split into nearly three dozen companies in 1911, and this article lists the prices of all former constituents. Despite having a rough past year, 1921 has shown signs of an oil bottom. The writer recommends astute investors purchase shares in all of them. Every single company trades below book value! PE ratios range from 3 to 5. As a reminder, risk free bonds are yielding 5%, and retail investors are being actively encouraged not to own equities.\n  Historical Fact: The apathy in the papers regarding common stocks would make the modern day investor salivate. If one bought and held the Dow from 1921 to present, the total return would be 500,000% (5,000x)! Based on ExxonMobil\u2019s predecessor company Standard Oil of New Jersey ($0.04 split adjusted), buying and holding for 100 years would equate to an 800,000% return (8,000x)! To our readers: $100 invested in the broad market back then would be worth $500,000 today by doing  absolutely nothing! How\u2019s that for a headline in today\u2019s meme stock world?\n  Reading this newsletter is free. If you enjoy it, then please share to a friend or donate via PayPal (button below).", "posttime": "2021-08-09 00:53:52", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u534e\u5c14\u8857,\u91d1\u878d\u65f6\u62a5,ft,\u5fb7\u56fd", "title": "\u6211\u6bcf\u5468\u9605\u8bfb 100 \u5e74\u524d\u5230 1929 \u5e74\u7684\u82f1\u56fd\u300a\u91d1\u878d\u65f6\u62a5\u300b\u548c\u300a\u534e\u5c14\u8857\u65e5\u62a5\u300b", "title_en": "I'm reading the FT and WSJ from 100 years ago each week leading to 1929", "transed": 1, "url": "https://roaring20s.substack.com/p/august-8-1921", "via": "", "real_tags": ["\u534e\u5c14\u8857", "\u91d1\u878d\u65f6\u62a5", "ft", "\u5fb7\u56fd"]}, {"category": "", "categoryclass": "", "imagename": "aea55b8bf17634e5a4a71fe2bfd67220.png", "infoid": 1072137, "ip": "", "isanchordig": 1, "ischecked": 1, "isdelete": 0, "isneo": 1, "mark": "", "name": "", "note": "\u201c\u65e0\u8bba\u8c01\u91c7\u53d6\u8fd9\u79cd\u9884\u9632\u63aa\u65bd\uff0c\u90fd\u4f1a\u4f53\u9a8c\u5230\u4e50\u8da3\uff0c\u800c\u4e0d\u662f\u65f6\u4e0d\u65f6\u5730\u5931\u53bb\u4e09\u5206\u4e4b\u4e00\u6216\u56db\u540d\u4ea7\u8925\u70ed\u60a3\u8005\uff0c\u4f46\u53ef\u80fd\u53ea\u6709\u56db\u767e\u5206\u4e4b\u4e00\u201d\u6211\u7684\u670b\u53cb Doug McKenty\uff0c\u4ed6\u7684 Shift \u64ad\u5ba2\u521a\u521a\u88ab Mailchimp \u6682\u505c.\u4ed6\u5bf9\u4ed6\u6240\u8c13\u7684\u533b\u7597\u4fdd\u5065\u81ea\u7531\uff08\u9605\u8bfb\uff1a\u75ab\u82d7\u62a4\u7167\uff09\u7684\u58f0\u97f3\u8d8a\u6765\u8d8a\u76f4\u8a00\u4e0d\u8bb3\uff0c\u4ee5\u53ca\u4e00\u4e9b\u5173\u4e8e\u754c\u9650\u4e4b\u5916\u7684\u4e1c\u897f\u3002 Mailchimp \u662f\u4e00\u4e2a\u7535\u5b50\u90ae\u4ef6\u5217\u8868\u63d0\u4f9b\u5546\uff0c\u4ee5\u8fd9\u6837\u505a\u800c\u95fb\u540d\u3002\u60a8\u6709\u6548\u5730\u5411 Mailchimp \u4ed8\u8d39\uff0c\u4ee5\u7ba1\u7406\u60a8\u53ef\u4ee5\u6216\u4e0d\u80fd\u5bf9\u81ea\u5df1\u7684\u7535\u5b50\u90ae\u4ef6\u8ba2\u9605\u8005\u8bf4\u7684\u8bdd\u3002\u60a8\u6b63\u5728\u4f7f\u7528\u4ed6\u4eec\u7684\u90ae\u4ef6\u670d\u52a1\u5668\uff0c\u5728\u4ed6\u4eec\u770b\u6765\uff0c\u8fd9\u5c31\u662f\u8d4b\u4e88\u4ed6\u4eec\u6743\u5229\u548c\u9053\u5fb7\u6743\u5a01\u6765\u76d1\u63a7\u60a8\u4e0e\u60a8\u81ea\u5df1\u7684\u53d7\u4f17\u7684\u901a\u4fe1\u5185\u5bb9\u7684\u539f\u56e0\u3002\u5728\u6211\u7684\u4e66\u300a\u65e0\u61c8\u53ef\u51fb\uff1a\u4fdd\u62a4\u81ea\u5df1\u514d\u53d7\u5e73\u53f0\u653b\u51fb\u3001\u53d6\u6d88\u6587\u5316\u548c\u5176\u4ed6\u5728\u7ebf\u707e\u96be\u300b\uff08\u7535\u5b50\u4e66\u7248\u672c\u73b0\u5df2\u514d\u8d39\u63d0\u4f9b\u4e00\u6bb5\u65f6\u95f4\uff09\u4e2d\uff0c\u6211\u7528\u4e86\u4e00\u6574\u7ae0\u6765\u8bb2\u8ff0\u5927\u578b\u79d1\u6280\u516c\u53f8\u7684\u9634\u8c0b\u8be1\u8ba1\u4ee5\u53ca\u4ed6\u4eec\u5982\u4f55\u8d85\u8d8a\u5728\u51b3\u5b9a\u4ec0\u4e48\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\uff0c\u4ec0\u4e48\u4e0d\u5728\u6216\u4e0d\u5e94\u8be5\u5728\u4ed6\u4eec\u7684\u8303\u56f4\u5185\u65f6\uff0c\u7406\u6027\u7684\u754c\u9650\u3002\u4efb\u4f55\u79d1\u6280\u516c\u53f8\u90fd\u4e0d\u5e94\u8be5\u6839\u636e\u4ed6\u4eec\u8ba4\u4e3a\u7528\u6237\u5728\u4ed6\u4eec\u81ea\u5df1\u7684\u5e73\u53f0\u4e0a\u505a\u4e86\u6216\u53ef\u80fd\u505a\u7684\u4e8b\u60c5\u6765\u6267\u884c\u4ed6\u4eec\u7684\u670d\u52a1\u6761\u6b3e\u3002\u7136\u800c Twitter\u3001Facebook\u3001Patreon \u4ee5\u53ca\u8c01\u77e5\u9053\u8fd8\u6709\u8c01\u8fd9\u6837\u505a\u4e86\u3002\u50cf Mailchimp \u8fd9\u6837\u7684\u90ae\u4ef6\u516c\u53f8\u8fde\u89e3\u6790\u4ed6\u4eec\u4ed8\u8d39\u5ba2\u6237\u7684\u5185\u5bb9\u90fd\u6ca1\u6709\u4e1a\u52a1\uff0c\u66f4\u4e0d\u7528\u8bf4\u7c97\u7565\u5730\u5224\u65ad\u5b83\u662f\u5426\u662f\u9519\u8bef\u4fe1\u606f\u3002\u90ae\u4ef6\u63d0\u4f9b\u5546\u5e94\u8be5\u53ea\u5173\u5fc3\u4e24\u4ef6\u4e8b\u548c\u4e24\u4ef6\u4e8b\uff1a\u5c31\u662f\u8fd9\u6837\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u8fd9\u771f\u7684\u4e0d\u662f\u4ed6\u4eec\u7684\u4e8b\uff0c\u8ba4\u4e3a\u5b83\u662f\u81ea\u5927\u548c\u50b2\u6162\u7684\u9ad8\u5ea6\u3002\nPatreon \u7684\u9996\u5e2d\u6267\u884c\u5b98 Jack Conte \u63cf\u8ff0\u4e86\u4ed6\u4eec\u7684\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u5982\u4f55\u901a\u8fc7\u57fa\u4e8e\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u201d\u5bf9\u5176\u8fdb\u884c\u8bc4\u4f30\u6765\u6d88\u9664\u5c06\u67d0\u4eba\u7684\u5185\u5bb9\u8d27\u5e01\u5316\u7684\u51b3\u5b9a\u4e2d\u7684\u6240\u6709\u4e3b\u89c2\u56e0\u7d20\uff1a\u201c\u660e\u663e\u7684\u53ef\u89c2\u5bdf\u884c\u4e3a\u662f\u5728\u56e2\u961f\u5ba1\u67e5\u5185\u5bb9\u65f6\u6d88\u9664\u4e2a\u4eba\u4ef7\u503c\u89c2\u548c\u4fe1\u5ff5.\u8fd9\u662f\u4e00\u79cd\u5b8c\u5168\u57fa\u4e8e\u53ef\u89c2\u5bdf\u4e8b\u5b9e\u7684\u5ba1\u67e5\u65b9\u6cd5\uff1a\u76f8\u673a\u770b\u5230\u4e86\u4ec0\u4e48\uff0c\u97f3\u9891\u8bbe\u5907\u8bb0\u5f55\u4e86\u4ec0\u4e48\u3002\u4e0d\u7ba1\u4f60\u7684\u610f\u56fe\u662f\u4ec0\u4e48\uff0c\u4f60\u7684\u52a8\u673a\uff0c\u4f60\u662f\u8c01\uff0c\u4f60\u7684\u8eab\u4efd\uff0c\u4f60\u7684\u610f\u8bc6\u5f62\u6001\u3002\u4fe1\u4efb\u548c\u5b89\u5168\u56e2\u961f\u53ea\u5173\u6ce8 Manifest Observable Behaviour\u3002\u6211\u4eec\u53d8\u5f97\u4e25\u8c28\u548c\u5177\u4f53\uff0c\u56e0\u4e3a\u6211\u4eec\u8c08\u8bba\u7684\u662f\u53d6\u6d88\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u3002\u5265\u593a\u4e00\u4e2a\u4eba\u7684\u6536\u5165\u7684\u6743\u529b\u662f\u4e00\u9879\u53d1\u4eba\u6df1\u7701\u7684\u8d23\u4efb\u3002\u8fd9\u4e0d\u662f\u4e00\u65f6\u5174\u8d77\u7684\u4e8b\u60c5\u3002\u201d\u8fd9\u4e2a\u8fc7\u7a0b\u7c7b\u4f3c\u4e8e\u4ec0\u4e48\uff1f\u8fd9\u5b9e\u9645\u4e0a\u542c\u8d77\u6765\u5f88\u50cf\u4e00\u9879\u6cd5\u5f8b\u7a0b\u5e8f\uff0c\u5c3d\u7ba1\u5b83\u5b8c\u5168\u662f\u7247\u9762\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u6b63\u5f53\u7a0b\u5e8f\u6216\u6cd5\u5f8b\u4fdd\u62a4\u7684\u8868\u8c61\uff0c\u5e76\u4e14\u53ef\u80fd\u662f\u7531\u4e00\u7fa4\u5e26\u7740\u9f3b\u73af\u548c\u4eba\u79f0\u4ee3\u8bcd\u60c5\u7eea\u7684\u7d2b\u53d1\u5343\u79a7\u4e00\u4ee3\u6267\u884c\u7684-\u6212\u6307\u3002\u5f53\u79d1\u6280\u516c\u53f8\u81ea\u884c\u4ef2\u88c1\u4ec0\u4e48\u662f\u9519\u8bef\u4fe1\u606f\u6216\u4e0d\u662f\u9519\u8bef\u4fe1\u606f\u65f6\uff0c\u6216\u8005\u6839\u636e\u53d1\u751f\u5728\u4ed6\u4eec\u81ea\u5df1\u5e73\u53f0\u4e4b\u5916\u7684\u4e8b\u4ef6\u91c7\u53d6\u884c\u52a8\u65f6\uff0c\u4ed6\u4eec\u6240\u505a\u7684\u6838\u5fc3\u662f\u5bf9\u56fd\u9645\u6cd5\u8fdb\u884c\u88c1\u51b3\u3002\u60a8\u771f\u7684\u5e0c\u671b\u60a8\u7684\u57df\u540d\u6ce8\u518c\u5546\u6216\u7f51\u7edc\u4e3b\u673a\u8fd9\u6837\u505a\u5417\uff1f\u8fd9\u4e9b\u516c\u53f8\u8ba4\u4e3a\u4ed6\u4eec\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf\u3002\u73b0\u5b9e\u662f\u5b83\u4eec\u662f\u7ba1\u9053\u3002 \u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u662f\u53e6\u4e00\u4e2a\u5b8c\u5168\u4e3b\u89c2\u7684\u6807\u8bed\uff0c\u88ab\u4f2a\u88c5\u6210\u5ba2\u89c2\u4e8b\u5b9e\u3002\u5982\u4eca\uff0c\u4e8b\u5b9e\u6838\u67e5\u66f4\u53ef\u80fd\u662f\u903b\u8f91\u8c2c\u8bef\uff0c\u800c\u73b0\u5b9e\u662f\uff0c\u5927\u591a\u6570\u4eba\u751a\u81f3\u4e0d\u77e5\u9053\u4ec0\u4e48\u662f\u903b\u8f91\u8c2c\u8bef\u3002\u5f53\u7f8e\u8054\u793e\u201c\u4e8b\u5b9e\u6838\u67e5\u201d\u7f8e\u56fd\u53c2\u8bae\u9662\u5173\u4e8e\u4f0a\u7ef4\u83cc\u7d20\u529f\u6548\u7684\u8bc1\u8bcd\u65f6\u58f0\u79f0\u201c\u6ca1\u6709\u8bc1\u636e\u8868\u660e\u4f0a\u7ef4\u83cc\u7d20\u662f\u5bf9\u6297 COVID \u7684\u2018\u795e\u836f\u2019\u201d\u5e76\u4e14\u4ed6\u4eec\u5c06\u5176\u6807\u8bb0\u4e3a\u865a\u5047\uff0c\u4ed6\u4eec\u72af\u4e0b\u4e86\u4e00\u4e2a\u903b\u8f91\u8c2c\u8bef\uff0c\u79f0\u4e3a\u201c\u8bc9\u8bf8\u65e0\u77e5\u201d \uff08\u6ca1\u6709\u8bc1\u636e\u4e0d\u662f\u7f3a\u5e2d\u7684\u8bc1\u636e\uff09\u3002\n\u7edd\u5927\u591a\u6570\u5173\u4e8e COVID-19 \u7684\u5a92\u4f53\u53d9\u8ff0\uff0c\u5173\u4e8e\u53e3\u7f69\u3001\u5c01\u9501\u3001\u4f0a\u7ef4\u83cc\u7d20\u3001HCQ \u4ee5\u53ca\u662f\u7684\u75ab\u82d7\uff0c\u90fd\u53ef\u4ee5\u5f52\u7c7b\u4e3a\u4e94\u4e2a\u903b\u8f91\u8c2c\u8bef\uff1a \u8bc9\u8bf8\u6743\u5a01\uff1a\u4e13\u5bb6\u548c\u4e0d\u8d1f\u8d23\u4efb\u7684\u6280\u672f\u5b98\u50da\u6240\u8bf4\u7684\u5ba2\u89c2\u771f\u5b9e\u3002\u5982\u679c\u60a8\u4e0d\u540c\u610f\u4e13\u5bb6\u7684\u89c2\u70b9\uff0c\u90a3\u4e48\u60a8\u5c31\u662f\u5728\u8d28\u7591\u79d1\u5b66\u672c\u8eab\uff08\u5373\u4f7f\u662f\u90a3\u4e9b\u5728\u8d44\u52a9\u529f\u80fd\u83b7\u5f97\u6027\u7814\u7a76\u65b9\u9762\u975e\u5e38\u6295\u5165\u7684\u4eba\uff0c\u8fd9\u4e9b\u7814\u7a76\u5f88\u53ef\u80fd\u5bfc\u81f4\u5b9e\u9a8c\u5ba4\u53d1\u5e03\u5bfc\u81f4\u5927\u6d41\u884c\uff09\u3002 Bandwagon\uff1a\u56e0\u4e3a\u5176\u4ed6\u4eba\u90fd\u76f8\u4fe1\u67d0\u4e8b\uff0c\u6240\u4ee5\u4f60\u4e5f\u6709\u9053\u5fb7\u4e49\u52a1\u53bb\u76f8\u4fe1\u5b83\u3002\u60a8\u9047\u5230\u6216\u8bfb\u5230\u7684\u4efb\u4f55\u4e0e\u5176\u4ed6\u4eba\u8ba4\u4e3a\u771f\u5b9e\u7684\u5185\u5bb9\u76f8\u77db\u76fe\u7684\u5185\u5bb9\u90fd\u662f\u201c\u9519\u8bef\u4fe1\u606f\u201d\u3002 Ad Hominem\uff1a\u6839\u672c\u4e0d\u662f\u4e89\u8bba\uff0c\u800c\u662f\u653b\u51fb\u3002 \u201cCovidiots\u201d\u3001\u201cDeniers\u201d\u8fd9\u4e9b\u4e0d\u662f\u7406\u6027\u7684\u53cd\u9a73\uff0c\u800c\u662f\u8bfd\u8c24\u3002\u4efb\u4f55\u4f7f\u7528\u5b83\u4eec\u7684\u4eba\u90fd\u4e0d\u662f\u5728\u8c08\u8bba\u8bdd\u8bed\uff0c\u800c\u662f\u5728\u504f\u6267\u548c\u504f\u89c1\u3002\u8fd9\u548c\u79cd\u65cf\u4e3b\u4e49\u4e00\u6837\u4e0d\u53ef\u539f\u8c05\u3002\u5728\u8fc7\u53bb\u7684\u51e0\u5e74\u91cc\uff0c\u8bb8\u591a\u4eba\u9762\u4e34\u7740\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u51fa\u4e8e\u5b8c\u5168\u6b63\u5f53\u7684\u7406\u7531\u6765\u5ba1\u89c6\u81ea\u5df1\u7684\u504f\u89c1\u548c\u7279\u6743\u7684\u6311\u6218\u3002\u4efb\u4f55\u5bf9\u6000\u7591\u8bba\u8005\u548c\u9006\u5411\u8005\u91c7\u53d6\u8fd9\u79cd\u5176\u4ed6\u65b9\u5f0f\u7684\u4eba\u90fd\u7f3a\u4e4f\u4e0e\u79cd\u65cf\u4e3b\u4e49\u8005\u540c\u7b49\u7a0b\u5ea6\u7684\u81ea\u6211\u610f\u8bc6\u548c\u540c\u7406\u5fc3\u3002\u8bc9\u8bf8\u60c5\u611f\uff1a\u4f01\u4e1a\u5a92\u4f53\u56e0\u6050\u60e7\u800c\u84ec\u52c3\u53d1\u5c55\u3002\u5173\u4e8e\u6124\u6012\u7684\u793e\u4ea4\u5a92\u4f53\u5e73\u53f0\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6bcf\u6b21 CNN \u8bf4\u201cDelta \u53d8\u4f53\u201d\u65f6\uff0c\u5b83\u90fd\u662f\u201c\u9ad8\u5ea6\u4f20\u67d3\u6027\u7684\u201d\u800c\u4e0d\u662f\u201c\u4e0d\u90a3\u4e48\u81f4\u547d\u201d\u3002\u5982\u679c\u6bcf\u4e2a\u4eba\u90fd\u77e5\u9053\u82f1\u56fd\uff08\u4ee5\u53ca\u5176\u4ed6\uff09\u6700\u8fd1\u7684\u6570\u636e\u8868\u660e Delta \u53d8\u4f53\u7684\u6b7b\u4ea1\u7387\u751a\u81f3\u4f4e\u4e8e\u5df2\u7ecf\u5f88\u4f4e\u7684 Alpha \u53d8\u4f53\uff0c\u4e0e\u5b63\u8282\u6027\u6d41\u611f\u57fa\u672c\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ef\u80fd\u4f1a\u51b7\u9759\u4e0b\u6765\u3002\u6211\u4eec\u4e0d\u80fd\u6709\u90a3\u4e2a\u3002\u79fb\u52a8\u76ee\u6807\uff1a\u5728\u5927\u7ea6 18 \u4e2a\u6708\u5185\u4f7f\u66f2\u7ebf\u53d8\u5e73\u7684 15 \u5929\u53d8\u6210\u4e86#NoJabNoJob\u3002\u5982\u679c\u60a8\u5b8c\u5168\u63a5\u79cd\u4e86\u75ab\u82d7\uff0c\u60a8\u4ecd\u7136\u5e94\u8be5\u6234\u4e0a\u53e3\u7f69\uff0c\u5a92\u4f53\u5df2\u7ecf\u51b3\u5b9a\u79cb\u5b63\u5c06\u53d1\u751f\u7b2c\u56db\u6ce2\u75ab\u60c5\uff0c\u771f\u6b63\u5177\u6709\u524d\u77bb\u6027\u7684\u601d\u60f3\u5bb6\u6b63\u5728\u4e3a\u6211\u4eec\u51c6\u5907\u597d\u5e94\u5bf9\u6c14\u5019\u5c01\u9501\u3002 \u201c\u6211\u4eec\u90fd\u5728\u4e00\u8d77\u201d\u53d8\u6210\u4e86\u82cf\u65af\u535a\u58eb\u5173\u4e8e\u65af\u5185\u5947\u7684\u6545\u4e8b\u3002\u6b64\u5916\uff0c\u82cf\u65af\u535a\u58eb\u88ab\u53d6\u6d88\u4e86\u3002\u6709\u4e9b\u4eba\u8ba4\u4e3a\u8fd9\u4e00\u5207\u90fd\u6ca1\u6709\u4e3b\u89c2\u6027\u3002\u4ed6\u4eec\u8ba4\u4e3a\uff0c\u6b63\u5982 Jack Conte \u6240\u505a\u7684\u90a3\u6837\uff0c\u5b58\u5728\u72ec\u7acb\u7684\u5ba2\u89c2\u771f\u7406\uff0c\u4f8b\u5982 Manifest Observable Behaviour\u3002\u6d88\u9664\u7ec6\u5fae\u5dee\u522b\u3001\u4e0d\u786e\u5b9a\u6027\u548c\u76f8\u4e92\u77db\u76fe\u7684\u6570\u636e\u7684\u9886\u57df\u3002\u601d\u60f3\u6b63\u786e\u7684\u4eba\u90fd\u7406\u89e3\u771f\u7406\uff0c\u53ea\u6709\u601d\u60f3\u9519\u8bef\u7684\u4eba\u624d\u4f1a\u8d28\u7591\u5b83\u3002\n\u60a8\u6b63\u5728\u52aa\u529b\u7406\u89e3\u4e3a\u4ec0\u4e48\u6709\u4e9b\u4eba\u5bf9\u75ab\u82d7\u72b9\u8c6b\u4e0d\u51b3\u3002 \u201c\u8ba9\u6211\u5e2e\u52a9\u4f60\u201d\u5927\u7ebf\u7a0b\uff1a\u60f3\u8c61\u4f60\u662f\u4e00\u4e2a\u6b63\u5e38\u4eba\u3002\u8fd9\u4e00\u5e74\u662f 2016 \u5e74\u3002\u65e0\u8bba\u5bf9\u9519\uff0c\u4f60\u76f8\u4fe1\u4f60\u5728\u5a92\u4f53\u4e0a\u770b\u5230\u7684\u5927\u90e8\u5206\u5185\u5bb9\u3002\u5b83\u76f8\u5f53\u6709\u8bf4\u670d\u529b\u5730\u8bf4\u660e\u4e86\u4e3a\u4ec0\u4e48\u666e\u901a\u516c\u4f17\u53ef\u80fd\u53ea\u662f\u611f\u5230\u56f0\u60d1\u3001\u4e0d\u4fe1\u4efb\u548c\u72b9\u8c6b\uff0c\u800c\u4e0d\u662f\u6210\u4e3a\u9053\u5fb7\u4e0a\u5815\u843d\u7684\u602a\u7269\u3002\u6b64\u5916\uff0c\u5b83\u7ec6\u81f4\u5730\u5217\u4e3e\u4e86\u5b98\u65b9\u7ecf\u5178\u7684\u591a\u4e2a\u652f\u67f1\uff0c\u7ed3\u679c\u8bc1\u660e\u662f\u9519\u8bef\u4fe1\u606f\uff0c\u56e0\u4e3a\u7f3a\u5c11\u66f4\u597d\u7684\u8bcd\uff08\u9664\u975e\u8be5\u8bcd\u662f\u201c\u8c0e\u8a00\u201d\uff09\u3002\u6211\u4eec\u770b\u5230\u798f\u5947\u5728\u6444\u50cf\u673a\u505c\u6b62\u8f6c\u52a8\u7684\u90a3\u4e00\u523b\u6458\u4e0b\u4e86\u4ed6\u7684\u9762\u5177\u3002\u6211\u4eec\u770b\u5230 AOC \u5750\u5728\u4e00\u7fa4\u76f8\u5f53\u4eb2\u5bc6\u7684\u4eba\u7fa4\u4e2d\uff0c\u4e3a\u4e86\u62cd\u7167\u7684\u660e\u786e\u76ee\u7684\u800c\u6234\u4e0a\uff0c\u7136\u540e\u53c8\u8131\u4e0b\u3002\u4f46\u662f\uff0c\u5982\u679c\u60a8\u901a\u8fc7 Mailchimp \u5411\u81ea\u5df1\u7684\u8ba2\u9605\u8005\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\uff0c\u5927\u58f0\u60f3\u77e5\u9053\u9762\u5177\u662f\u5426\u53ea\u4e0d\u8fc7\u662f\u8868\u6f14\u5267\u9662\uff0c\u90a3\u4e48\u60a8\u5c06\u88ab\u5173\u95ed\u3002\u8fd9\u5176\u4e2d\u7684\u4efb\u4f55\u4e00\u9879\u5982\u4f55\u5efa\u7acb\u52a8\u5458\uff08\u636e\u79f0\uff09\u5b9e\u73b0\u7fa4\u4f53\u514d\u75ab\u6240\u9700\u7684\u6700\u540e 20% \u5230 30% \u6240\u9700\u7684\u53ef\u4fe1\u5ea6\u548c\u516c\u4f17\u4fe1\u4efb\uff1f\u5b83\u6ca1\u6709\u3002\u4ece\u4f0a\u62c9\u514b\u7684\u5927\u89c4\u6a21\u6740\u4f24\u6027\u6b66\u5668\u6210\u4e3a\u201c\u8d2b\u6c11\u7a9f\u201d\u5230\u201c\u6b21\u8d37\u88ab\u904f\u5236\u201d\u5230\u201c\u51cf\u4ea7\u5c31\u50cf\u770b\u7740\u6cb9\u6f06\u53d8\u5e72\u201d\uff0c\u4efb\u4f55\u5728\u8fc7\u53bb 20 \u5e74\u91cc\u4e00\u76f4\u8ddf\u8e2a\u4e13\u5bb6\u5f53\u5c40\u8bb0\u5f55\u7684\u4eba\u90fd\u6709\u5408\u7406\u7684\u7406\u7531\u76f8\u4fe1\u4e13\u5bb6\u4eec\u4ec0\u4e48\u90fd\u4e0d\u77e5\u9053\u3002\u81f3\u5c11\u6ca1\u6709\u4efb\u4f55\u9884\u6d4b\u4ef7\u503c\u3002\u6211\u4e66\u4e2d\u7684\u53e6\u4e00\u7ae0\u63d0\u51fa\u4e86\u201c\u53bb\u5e73\u53f0\u5316\u662f\u5426\u6709\u6548\uff1f\u201d\u8fd9\u4e2a\u95ee\u9898\u3002\u7b80\u77ed\u7684\u56de\u7b54\u662f\uff1a\u6ca1\u6709\u3002\u4ece\u957f\u8fdc\u6765\u770b\uff0c\u6750\u6599\u7684\u6291\u5236\u4f1a\u653e\u5927\u5b83\u3002\u5982\u679c\u4f60\u60f3\u51cf\u5c11\u5173\u4e8e COVID \u7684\u4e0d\u5408\u903b\u8f91\u7684\u9634\u8c0b\u8bba\uff0c\u8bf7\u505c\u6b62\u5bf9\u4efb\u4f55\u4e0d\u662f\u76f2\u76ee\u6a21\u4eff\u798f\u5947\u7684\u4eba\u8fdb\u884c\u53bb\u5e73\u53f0\u5316\u3002\n\u771f\u6b63\u9700\u8981\u7684\u662f\u4e00\u4e2a\u5168\u793e\u4f1a\u7684\u6279\u5224\u6027\u601d\u7ef4\u901f\u6210\u8bfe\u7a0b\uff0c\u800c\u4e0d\u662f\u4e0d\u65ad\u5730\u88ab\u529d\u963b\u548c\u544a\u8bc9\u4e0d\u8981\u601d\u8003\u4ec0\u4e48\u3002\u8fbe\u6c83\u65af\u56e2\u961f\uff0c\u540e\u671f\u5168\u7403\u5316\u7684\u6839\u6df1\u8482\u56fa\u7684\u7cbe\u82f1\u4eec\u8ba4\u4e3a\u6211\u4eec\u6b63\u5728\u8d70\u5411\u4e00\u4e2a\u7531\u4e13\u5bb6\u6280\u672f\u5b98\u50da\u7ba1\u7406\u7684\u4e16\u754c\u3002\u4f46\u4ed6\u4eec\u5e76\u6ca1\u6709\u53d6\u5f97\u4e00\u7cfb\u5217\u6210\u529f\uff0c\u800c\u4e14\u8fd9\u79cd\u516c\u5171\u653f\u7b56\u65b9\u6cd5\u53ef\u4ee5\u8bf4\u6ca1\u6709\u901a\u8fc7\u6700\u91cd\u8981\u7684\u8003\u9a8c\u3002\u6211\u4eec\u6b63\u671d\u7740\u4e00\u4e2a\u7531\u5f00\u6e90\u534f\u8bae\u548c\u667a\u80fd\u5408\u7ea6\u6240\u8868\u8fbe\u7684\u5171\u8bc6\u6cbb\u7406\u7684\u53bb\u4e2d\u5fc3\u5316\u4e16\u754c\u8fc8\u8fdb\u3002\u8fd9\u573a\u6218\u6597\u4e0d\u662f\u5173\u4e8e\u5de6\u6d3e\u4e0e\u53f3\u6d3e\u3001\u4fdd\u5b88\u6d3e\u4e0e\u81ea\u7531\u6d3e\u7684\u6597\u4e89\uff0c\u5176\u4e2d\u4efb\u4f55\u4e00\u65b9\u90fd\u4f1a\u8ba9\u4f60\u76f8\u4fe1\u5185\u5bb9\u5b8c\u5168\u5206\u4e3a\u771f\u76f8\u548c\u9519\u8bef\u4fe1\u606f\u3002\u672a\u6765 20 \u5e74\u7684\u51b3\u5b9a\u6027\u5f20\u529b\u5c06\u5728\u6743\u529b\u4e0b\u653e\u4e0e\u5b98\u50da\u4e3b\u4e49\u3001\u5e73\u53f0\u4e0e\u534f\u8bae\u4ee5\u53ca\u6c11\u65cf\u56fd\u5bb6\u4e0e\u7f51\u7edc\u4e4b\u95f4\u3002\u81f3\u4e8e\u4eca\u5929\u8fd9\u7bc7\u6587\u7ae0\u7684\u5f00\u573a\u767d\uff1f\u585e\u9ea6\u5c14\u7ef4\u65af\u8fc7\u7740\u60b2\u60e8\u7684\u751f\u6d3b\u3002\u8bf4\u670d\u5f53\u65f6\u7684\u533b\u7597\u673a\u6784\u5728\u8fdb\u884c\u5c38\u68c0\u540e\u548c\u5206\u5a29\u524d\u6d17\u624b\u53ef\u4ee5\u9632\u6b62\u201c\u5c38\u4f53\u9897\u7c92\u201d\u4ece\u5c38\u4f53\u4f20\u64ad\u5230\u6bcd\u4eb2\u548c\u65b0\u751f\u513f\u7684\u6597\u4e89\u88ab\u89c6\u4e3a\u5984\u60f3\u3002\u5f53\u7136\uff0c\u7f8e\u8054\u793e\u4f1a\u5c06\u5176\u201c\u4e8b\u5b9e\u68c0\u67e5\u201d\u4e3a\u5047\u3002 Politifact \u4f1a\u8bc4\u4ef7\u5b83\u201c\u7740\u706b\u7684\u88e4\u5b50\u201d\u3002\u6bd5\u7adf\uff0c\u6ca1\u6709\u7ec6\u83cc\u8fd9\u6837\u7684\u4e1c\u897f\u662f\u786e\u5b9a\u7684\u79d1\u5b66\u3002\u8511\u89c6\u548c\u5996\u9b54\u5316\u7684\u538b\u529b\u8ba9\u585e\u6885\u5c14\u7ef4\u65af\u5931\u53bb\u4e86\u5f88\u591a\u3002\u81ea 1857 \u5e74\u5f00\u59cb\u4ed6\u7684\u5199\u4f5c\u6d3b\u52a8\u4ee5\u5ba3\u4f20\u4ed6\u7684\u7406\u8bba\u76f4\u5230 1860 \u5e74\u4ed6\u7684\u300a\u75c5\u56e0\u5b66\u300b\u51fa\u7248\u4ee5\u6765\uff0c\u4ed6\u663e\u7136\u5728\u77ed\u77ed\u4e09\u5e74\u5185\u5c31\u8001\u4e86\u51e0\u5341\u5c81\u3002\u4ed6\u5b64\u72ec\u5730\u6b7b\u53bb\uff0c\u803b\u8fb1\u5730\u6b7b\u53bb\uff0c\u88ab\u4ed6\u7684\u533b\u5b66\u540c\u884c\u9001\u8fdb\u4e86\u7cbe\u795e\u75c5\u9662\u3002 Mark E. Jeftovic \u662f\u591a\u4f26\u591a\u7f51\u7edc\u670d\u52a1\u516c\u53f8easyDNS \u7684\u9996\u5e2d\u6267\u884c\u5b98\u3002\u8981\u5728\u60a8\u7684\u90ae\u7bb1\u4e2d\u63a5\u6536\u672a\u6765\u7684\u5e16\u5b50\uff0c\u8bf7\u52a0\u5165\u514d\u8d39\u7684 Bombthrower \u90ae\u4ef6\u5217\u8868\u3002\u8981\u5bf9\u51c6\u5907\u968f\u7740\u52a0\u5bc6\u6280\u672f\u7ee7\u7eed\u4e0a\u6da8\u800c\u5927\u83b7\u5168\u80dc\u7684\u516c\u53f8\u548c\u80a1\u7968\u8fdb\u884c\u4f18\u8d28\u7814\u7a76\uff0c\u8bf7\u5c1d\u8bd5\u6211\u4eec\u7684\u52a0\u5bc6\u8d27\u5e01\u8d44\u672c\u5bb6\u6295\u8d44\u7ec4\u5408\u8bd5\u7528\u4f18\u60e0\u3002", "note_en": "\u201cWhoever practices this prophylaxis will experience the pleasure, not from time to time to lose every third or fourth patient from puerperal fever, but perhaps lose only one in four hundred\u201d\n My friend  Doug McKenty, who does  The Shift podcast was just suspended by Mailchimp. He\u2019s been getting more vocal about what he calls healthcare freedom (read: vaccine passports), and something about that coloured outside the lines.\n Mailchimp, an email list provider, is known for doing this. You effectively pay Mailchimp to curate what you can or cannot say to your own email subscribers.\u00a0 You\u2019re using their mailservers, and in their mind that\u2019s what gives them the right and the moral authority to monitor  the content of your communications to your own audience.\n In my book  Unassailable: Protect Yourself From Deplatform Attacks, Cancel Culture and other Online Disasters (the e-book version has been  available for free for some time now) I devote an entire chapter to the machinations of the Big Tech and how they overstep the bounds of rationality when it comes to deciding what is within their purview and what isn\u2019t, or shouldn\u2019t be.\n No tech company should be enforcing their Terms of Service based on what they\u00a0 think their users have done or  might do off of their own platforms. Yet Twitter, Facebook, Patreon and who knows who else do that.\n A mailer company like Mailchimp has no business even parsing the content of their paying clients, let alone summarily judging whether it is misinformation or not. Mail providers should care about two things and two things only:\n  That\u2019s it. Beyond that it really isn\u2019t their business and it\u2019s the height of grandiosity and hubris to think that it is.\n Patreon\u2019s CEO Jack Conte  describes how their Trust and Safety Team remove all subjective elements from the decision to demonetize somebody\u2019s content by evaluating them based on \u201cManifest Observable Behaviour\u201d:\n \u201cManifest observable behavior is to remove personal values and beliefs when the team is reviewing content. It\u2019s a review method that\u2019s  entirely based on observable facts:  what has a camera seen,  what has an audio device recorded. It doesn\u2019t matter what your intentions are, your motivations, who you are, your identity, your ideology. The trust and safety team only looks at Manifest Observable Behaviour. We get rigorous and specific because we\u2019re talking about removing a person\u2019s income. The authority to take away a human being\u2019s income is a sobering responsibility. It is not something to be done on a whim.\u201d\n What does this process resemble? It actually sounds a lot like a legal proceeding, albeit one that\u2019s entirely one-sided, devoid of any semblance of due process or legal protection under the law, and probably carried out by teams of purple-haired Millennials with nose hoops and personal pronoun mood-rings.\n When tech companies take it upon themselves to arbitrate what is or isn\u2019t misinformation, or taking action based on events that occur outside of their own platforms what they are doing, at its core, is adjudicating international law. Do you really want your domain registrar or your web host doing that?\n These companies think they\u2019re the patricians of internet discourse. The reality is they\u2019re the plumbing.\n  \u201cFact Checks\u201d are another entirely subjective catch phrase dolled up to look like objective truth. These days a fact check is more likely to be a logical fallacy and the reality is, most people don\u2019t even know what logical fallacies  are.\n When the  Associated Press \u201cfact checked\u201d US Senate testimony on the efficacy of Ivermectin claiming  \u201cthere is no evidence that Ivermectin is a \u2018miracle drug\u2019 against COVID\u201d\u00a0and they labeled it  false, they committed a logical fallacy called \u201cappeal to ignorance\u201d (absence of evidence is not evidence of absence).\n The vast majority of all media narrative around COVID-19, on masks, lockdowns, Ivermectin, HCQ and yes, vaccines, can be categorized into  five logical fallacies:\n Appeal to Authority: whatever experts and unaccountable technocrats say is objectively true. If you disagree with the experts you are disputing science itself (even the ones who were neck deep in funding the gain-of-function research that quite possibly led to the lab release that caused the pandemic).\n Bandwagon: Because everybody else believes something, you have a moral obligation to believe it too. Anything you\u2019ve come across or read that contradicts what everybody else believes to be true is \u201cmisinformation\u201d.\n Ad Hominem: is not an argument at all, it\u2019s an attack. \u201cCovidiots\u201d, \u201cDeniers\u201d these are not rational counter-arguments, they\u2019re slurs. Anybody employing them is not\u00a0 engaging in discourse but rather bigotry and prejudice. This is as inexcusable as racism. Over the past few years many have been challenged to examine their own biases and privilege, in certain contexts for perfectly valid reasons. Anybody engaging in this type of othering toward skeptics and contrarians lacks self-awareness and empathy to the same degree as a racist.\n Appeal To Emotion: Corporate media thrives on fear. Social media platforms on anger. It\u2019s why every time CNN says \u201cDelta variant\u201d it is \u201chighly contagious\u201d instead of \u201cless fatal\u201d. If everybody knew that  recent data out of the UK (among others) indicates the Delta variant has a fatality rate that\u2019s even lower than the already quite low Alpha variant, basically the same as seasonal flu, then they may just calm down. And we can\u2019t have that.\n Moving the Goalposts: 15-days to flatten the curve became #NoJabNoJob in about 18 months. You\u2019re still supposed to wear a mask if you\u2019re fully vaccinated, the media has already decided that a fourth wave will occur in the fall and the really forward looking thinkers are gearing us up for climate lockdowns.\u00a0 \u201cWe\u2019re all in this together\u201d turned into that Dr. Seuss story about the Sneeches. Also, Dr Seuss got canceled.\n    There are those that believe there is no subjectivity involved in any of this. They think, as Jack Conte does, that there are standalone objective truths, like Manifest Observable Behaviour. Realms where nuance, uncertainty and conflicting data are banished. All right thinking people grok The Truth and only wrong thinking people dispute it.\n  You\u2019re struggling to understand why some people are vaccine hesitant. The \u201clet me help you\u201d megathread:\n Imagine you\u2019re a normal person. The year is 2016. Rightly or wrongly, you believe most of what you see in the media.\n   It lays out the case, fairly cogently, why the general public may just simply be confused, distrustful and hesitant as opposed to being morally reprobate monsters. Further, it enumerates, in painstaking detail, multiple pillars of official canon which turned out to be, misinformation, for lack of a better word (unless that word is  \u201clies\u201d).\n We see Fauci removing his mask the moment the cameras stop rolling. We see AOC sitting amongst a fairly close knit crowd put one on for the express purpose of a photo op and then take it off again. But if you send an email to your own subscribers via Mailchimp wondering out loud if masks are nothing more than performative theatre, you\u2019ll get shut down.\n How does any of this establish the credibility and public trust required to mobilize that last 20% to 30% needed to (purportedly) achieve herd immunity? It doesn\u2019t.\n From WMD in Iraq being a \u201cslum dunk\u201d through \u201cSubprime is Contained\u201d to \u201cTapering will be like watching paint dry\u201d, anybody who has actually been keeping track of the expert authorities track records  over the past 20 years has legitimate reason to believe that experts don\u2019t know anything. At least nothing of  predictive\u00a0value.\n Another chapter in  my book asks the question \u2018Does Deplatforming Even Work?\u2019 Short answer is: it doesn\u2019t. Over the long haul suppression of material amplifies it. If you want fewer unhinged conspiracy theories circulating about COVID, stop deplatforming anybody who isn\u2019t mindlessly parroting Fauci.\n What is really needed is a society-wide  crash course in critical thinking, and not to be incessantly hectored and told what  not\u00a0to think. The Davos crew, the entrenched elites of late stage globalism think we\u2019re headed toward a world managed by expert technocrats. But they haven\u2019t exactly put up a string of successes and this approach to public policy has arguably failed its most important test.\n We\u2019re headed toward a decentralized world governed by consensus as expressed through open source protocols and smart contracts. The battle is not about left vs right, conservative vs liberal where either side would have you believe that content cleanly bisects into Truth and Misinformation. The defining tension of the next 20 years will between decentralization vs bureaucracy, platforms vs protocols and nation states vs networks.\n As for the opening quote of today\u2019s piece? Semmelweis lived a tragic life. The  battle to convince the medical establishment of his day that  washing ones hands\u00a0 after performing an autopsy and before delivering a baby would prevent the spread of\u00a0 \u201ccadaverous particles\u201d from corpses to mothers and newborns was seen as delusional. Surely AP would have \u201cfact checked\u201d it as  false. Politifact would have rated it  \u201cpants on fire\u201d. After all, that there was no such thing as\u00a0 germs\u00a0was settled science.\n The stress of the scorn and demonization took a lot out of Semmelweis. He apparently aged the equivalent of decades in just three years since he commenced his writing campaign in 1857 promoting his theories until the publication of his Aetiology in 1860.\n  He died alone and in ignominy, having been committed to a mental institution by his medical peers.\n Mark E. Jeftovic is the CEO of the Toronto-based web services company  easyDNS. To receive future posts in your mailbox   join the free Bombthrower mailing list. To get premium research on companies and stocks that are poised to win big as crypto continues its ascent, try our\u00a0Crypto Capitalist Portfolio   trial offer.", "posttime": "2021-08-09 00:53:04", "source_domain": "news.ycombinator.com", "source_name": "Hacker News", "tags": "\u8bdd\u8bed,tech", "title": "\u5927\u79d1\u6280\u5e94\u8be5\u662f\u6c34\u7ba1\u5de5\uff0c\u800c\u4e0d\u662f\u4e92\u8054\u7f51\u8bdd\u8bed\u7684\u8d35\u65cf", "title_en": "Big Tech are supposed to be the plumbers, not patricians of internet discourse", "transed": 1, "url": "https://bombthrower.com/articles/when-dissent-is-misinformation-fallacies-become-facts/", "via": "", "real_tags": ["\u8bdd\u8bed", "tech"]}]